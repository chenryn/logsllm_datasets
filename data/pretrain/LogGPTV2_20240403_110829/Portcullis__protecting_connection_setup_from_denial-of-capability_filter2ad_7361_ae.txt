### Partial Deployment and Performance Analysis

Figure 5 illustrates the performance of various mechanisms when only the victim's ISP upgrades its routers, with 20,000 attackers. The x-axis is on a logarithmic scale, representing time in seconds.

**Key Observations:**
- **Speak-up and Random Results:** These remain consistent with Figure 4, as they do not affect the forwarding algorithm.
- **TVA Performance:** Slightly worse due to fewer attack packets being filtered early in the network. However, even with full deployment, TVA struggles to distinguish attack packets, so the impact of partial deployment is minimal.
- **Portcullis vs. Puzzle-Solving Attacker:** Performance remains unchanged because the puzzle-solving attacker does not generate enough packets to congest the core network, where legacy routers are located. Congestion occurs near the victim, where legitimate senders' increasing puzzle levels quickly break through.
- **Portcullis vs. Flooding Attacker:** Performance is somewhat worse, with about 15% of legitimate senders not receiving a capability. However, the majority of legitimate senders that do receive a capability do so very quickly (as shown by the logarithmic x-axis). Senders fail to receive a capability when their traffic is overwhelmed by attack traffic early in the core network, before reaching the victimâ€™s ISP.

Despite these challenges, this experiment shows that even if a single ISP upgrades to use Portcullis, more than 85% of legitimate senders can quickly establish a capability during a DDoS attack by 20,000 attackers.

### Computational Capabilities

**Table 1: Computational Capabilities**

| Platform                | SHA-1 Hashes/Minute | Normalized to Nokia 6620 |
|-------------------------|---------------------|--------------------------|
| Nokia 6620              | 25 K                | 1.00x                    |
| Nokia N70               | 36 K                | 1.44x                    |
| Sharp Zaurus PDA        | 56 K                | 2.24x                    |
| Xeon 3.20GHz            | 956 K               | 38.24x                   |

This table summarizes the rate at which various platforms can perform SHA-1 hashes needed to solve and verify puzzles, averaged over 10 trials with negligible deviations.

### Discussion

#### 7.1 Asymmetric Computational Power

Computational puzzles favor endhosts with faster CPUs. Given the typical lifespan of a PC (3 to 5 years) and Moore's Law, the oldest endhosts are expected to be 4 to 10 times slower than the newest ones. For instance, a desktop PC with a Hyper-Threaded Intel Xeon 3.20GHz processor and 3GB of RAM has a 38x computational advantage over a Nokia 6620 cellphone. The Nokia 6620 performs approximately 25K hashes/second, while the PC performs approximately 956K hashes/second, indicating a disparity of only 38x (with even smaller disparities for the newer N70 and the PDA), compared to the 1,500x disparity for per-bandwidth fairness.

To mitigate differences in CPU speed, researchers have explored memory-bound functions, which exhibit smaller variations in access latencies (on the order of 5-10x). This makes memory-bound puzzles an interesting topic for future research. Alternatively, mobile Internet service providers could offer clients access to a proxy that computes a rate-limited number of puzzles, addressing both power and performance concerns. Since clients only use Portcullis when the site they wish to contact is heavily congested, puzzle solving should not significantly impact battery life.

#### 7.2 Puzzle Inflation

When senders (legitimate or malicious) send high-level puzzles to a destination under attack, their packets share links with "innocent bystander" packets intended for other destinations. We show that these high-level puzzle solutions do not inflate the puzzle level required of the bystander packets.

**Analysis:**
- **Condition 1:** If the link's request capacity is not exhausted, bystander packets are unaffected.
- **Condition 2:** If the link's request capacity is entirely consumed by high-level puzzle packets, bystander senders must also send high-level puzzles, as the link is effectively under a DDoS attack.
- **Condition 3:** If the link's request capacity is exhausted by a mix of high-level and bystander packets, bystander packets compete for the remaining capacity. They can solve puzzles to improve their odds, but the puzzle level need not match the high-level puzzles. High-level puzzle senders use less bandwidth due to the computational time required, limiting the increase in puzzle levels locally and preventing cascading effects across the network.

### Related Work

**Capability-Based Systems:**
- Early systems require significant state within the network and trust relationships between infrastructure nodes and endhosts [3, 20].
- Later schemes, such as Machiraju et al.'s secure QoS architecture [22], provide improved efficiency but do not defend against request channel flooding.
- Yaar et al.'s SIFF [31] allows receivers to enforce flow-based admission control but does not address DoC attacks.

**Computation-Based Systems:**
- Several researchers have proposed computational puzzles for DDoS defense, but none address network flooding attacks. Examples include Dwork et al.'s spam prevention [12], Juels et al.'s SYN flooding prevention [17], and Aura et al.'s client authentication [5].
- Waters et al. [29] propose a distribution mechanism for puzzle challenges, but it allows attackers to reuse puzzle solutions and imposes a heavy burden on routers.
- Laurie and Clayton [21] analyze the effectiveness of computational puzzles for spam, but Wobber [8] discovered an arithmetic error, suggesting that computational puzzles are viable at current spam response rates.

### Conclusion

The Denial-of-Capability (DoC) attack is a significant challenge for capability-based DDoS defense mechanisms. Portcullis strictly bounds the delay created by attacking nodes for any client. Our simulations demonstrate the strong fairness provided by Portcullis's computational puzzles. While Portcullis introduces additional complexity, it offers a powerful mechanism for DDoS resistance. Future work will determine if the Internet needs the strict availability guarantees originally proposed by capability schemes, now made robust against DoC by Portcullis.

### Acknowledgements

We thank Jonathan McCune for technical assistance, Diana Parno for editorial contributions, and David Maltz and our anonymous reviewers for their feedback. This research was supported by CyLab at Carnegie Mellon, the Army Research Office, and the National Science Foundation. Bryan Parno is supported by an NDSEG Fellowship.

### References

[1] M. Abadi, M. Burrows, M. Manasse, and T. Wobber. Moderately hard, memory-bound functions. In Proceedings of ISOC NDSS, February 2003.
[2] Lisa Amini and Henning Schulzrinne. Issues with inferring Internet topological attributes. In Proceedings of the Internet Statistics and Metrics Analysis Workshop, October 2004.
[3] Tom Anderson, Timothy Roscoe, and David Wetherall. Preventing Internet denial-of-service with capabilities. In Proceedings of Hotnets-II, November 2003.
...
[32] X. Yang, D. Wetherall, and T. Anderson. A DoS-limiting network architecture. In Proceedings of ACM SIGCOMM, August 2005.