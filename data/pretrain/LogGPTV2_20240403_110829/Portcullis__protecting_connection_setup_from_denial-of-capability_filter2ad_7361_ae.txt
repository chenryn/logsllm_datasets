ing out from the victim. The remaining routers simply randomly
choose among incoming packets.
100
d
e
h
s
i
l
b
a
t
s
E
y
t
i
l
i
b
a
p
a
C
%
80
60
40
20
0
0.1
Portcullis - Flooder
Portcullis - Puzzle Solver
Speak-up
Random
TVA
1
Time (s)
10
100
Figure 5: Partial Deployment. Time to establish a capability
versus 20,000 attackers when only the victim’s ISP upgrades its
routers. Again, the x-axis employs a logarithmic scale.
Figure 5 summarizes our results for 20,000 attackers (the re-
sults look similar for 1,000 attackers). The speak-up and Ran-
dom results remain the same as in Figure 4, since neither one af-
fects the forwarding algorithm. TVA performs slightly worse, since
fewer attack packets are ﬁltered early in the network; however,
even with full deployment, TVA has difﬁculty distinguishing at-
tack packets, so partial deployment has a relatively small effect.
Portcullis’s results versus the puzzle-solving attacker remains unaf-
fected, since the puzzle-solving attacker does not generate enough
packets to congest the core of the network (where the legacy routers
reside); congestion only occurs near the victim, where the legiti-
mate senders’ increasing puzzle levels quickly break through.
Against the ﬂooding attacker, Portcullis performs somewhat worse
than before, since about 15% of legitimate senders do not receive
a capability. However, the vast majority of legitimate senders that
do receive a capability do so extremely quickly (note the logarith-
mic x-axis). Senders fail to receive a capability when their traf-
ﬁc is swamped by attack trafﬁc early in the core of the network
Platform
Nokia 6620
Nokia N70
Sharp Zaurus PDA
Xeon 3.20GHz
SHA-1
hashes/minute
Normalized
to Nokia 6620
25 K
36 K
56 K
956 K
1.00x
1.44x
2.24x
38.24x
Table 1: Computational Capabilities. This table summarizes
the rate at which various platforms can perform the SHA-1
hashes needed to solve and verify puzzles (averaged over 10 tri-
als, with negligible deviations).
at a legacy router, before reaching the victim’s ISP. Nonetheless,
this experiment demonstrates that even if a single ISP upgrades to
use Portcullis, more than 85% of legitimate senders will be able
to quickly establish a capability in the face of a DDoS attack by
20,000 attackers.
7. DISCUSSION
7.1 Asymmetric Computational Power
Computational puzzles give an advantage to endhosts with faster
CPUs. Because the typical life-time of a PC is 3 to 5 years, and
according to Moore’s Law, computing power available for a ﬁxed
cost doubles every 18 months, the oldest endhosts would be ex-
pected to be at most 4 to 10 times slower than the newest endhosts.
To take an extreme case, our experiments show that a desktop PC
with a Hyper-Threaded Intel Xeon 3.20GHz processor and 3GB of
RAM has an approximately 38x computational advantage over a
Nokia 6620 cellphone. On the cellphone, we used an unoptimized
C++ implementation of SHA-1 based directly on the FIPS speciﬁ-
cation [19]. We also employed the same code on a slightly newer
phone, the Nokia N70, as well as on the Sharp Zaurus, a PDA that
uses an Intel PXA255 CPU operating at 400MHz. On the PC, we
used the OpenSSL implementation of SHA-1.
Table 1 summarizes our results. The Nokia 6620 performs ap-
proximately 25K hashes/second on average, while the PC performs
approximately 956K hashes/second, indicating a disparity of only
38x (with even smaller disparities for the newer N70 and the PDA),
as opposed to the 1,500x disparity for per-bandwidth fairness.
To help mask differences in CPU speed, researchers have stud-
ied memory-bound functions [1, 11, 12]. Because memory access
latencies exhibit smaller variations across classes of devices (on the
order of 5-10x), using memory bound puzzles is an interesting topic
for our future research.
Alternately, providers of mobile Internet services may offer their
clients access to a proxy that computes a rate-limited number of
puzzles on behalf of each client. Such an arrangement may also
address power concerns for mobile devices. However, since clients
only employ Portcullis when the site they wish to contact is heavily
congested, we expect puzzle solving to be sufﬁciently infrequent
that it should not signiﬁcantly impact battery life.
7.2 Puzzle Inﬂation
When senders (legitimate or malicious) send high-level puzzles
to a destination under attack, their packets will share links with
“innocent bystander” packets intended for other destinations. We
show that these high-level puzzle solutions will not “inﬂate” the
puzzle level required of the bystander packets.
We can analyze the situation by considering three possible con-
ditions for the link in question. First, if the link’s request capacity is
not exhausted, then the bystander packets will be completely unaf-
fected. Second, if the link’s request capacity is entirely consumed
by packets with high-level puzzles, then bystander senders must
send high-level puzzles as well, since the link is effectively under
a DDoS attack, even though it has not necessarily been speciﬁcally
targeted. Finally, the link’s request capacity may be exhausted by
a mixture of high-level and bystander packets. As a result, the
bystander packets essentially compete for the capacity not con-
sumed by the high-level packets. The bystander packets can solve
puzzles to improve their odds against other bystander packets, but
the puzzle-level need not be the same as the high-level puzzles.
While the bystander packets are competing for less than the link’s
full request capacity, the senders of the high-level puzzles actually
use less bandwidth than they otherwise would, since the compu-
tational time required to solve high-level puzzles forces them to
send at a much lower rate than they could at lower puzzle levels.
Thus, Portcullis only cause limited, “local” increases in puzzle lev-
els which will not cascade across the network.
8. RELATED WORK
Below, we review related work not already discussed, focusing
particularly on the areas of capability-based systems and computation-
based systems for DoS defense.
Capability-Based Systems.
Early capability systems require
signiﬁcant state within the network, as well as trust relationships
(i.e., secure keys) between infrastructure nodes and endhosts [3,
20]. Later schemes provide improved efﬁciency but do not defend
against request channel ﬂooding. For example, Machiraju et al.
propose a secure Quality-of-Service (QoS) architecture [22]. They
use lightweight certiﬁcates to enable routers to designate band-
width reservations, and they propose a stateless recursive moni-
toring algorithm for routers to throttle ﬂows that attempt to exceed
their allotted bandwidth. Yaar et al. propose SIFF, a capability-
based system that allows a receiver to enforce ﬂow-based admis-
sion control but makes no effort to defend against DoC attacks [31].
Computation-Based Systems.
Several researchers have pro-
posed computational puzzles for DDoS defense; however, none
of these schemes defend against network ﬂooding attacks. Dwork
et al. propose puzzles to discourage spammers from sending junk
email [12]. Juels et al. use puzzles to prevent SYN ﬂooding [17].
Aura et al. [5], Dean and Stubbleﬁeld [10], and Wang and Re-
iter [27] propose puzzles to defend against DoS attacks on application-
level client authentication mechanisms. These systems require the
server under attack to provide and verify the puzzle and solution
and are generally inappropriate for attacks that require in-network
prioritization. Gligor [14] analyzes the wait-time guarantees that
different puzzle and client-challenge techniques provide. He argues
that application-level mechanisms are necessary to prevent service-
level ﬂooding and proposes a scheme that provides per-request,
maximum-waiting-time guarantees for clients under the assump-
tion that lower-layer, anti-ﬂooding countermeasures exist.
The approach of Waters et al. [29] comes closest to the proof-
of-work mechanism used by Portcullis. They utilize a distribution
mechanism for puzzle challenges based on a trusted and centralized
bastion host. Unfortunately, this approach allows attackers to re-
use puzzle solutions for multiple destinations. In addition, to verify
puzzle solutions, the veriﬁer must generate a large lookup table by
performing many public-key operations, which would impose an
excessive burden on routers since puzzle seeds change frequently.
Adopting an economic approach in “‘Proof of Work’ Proves Not
to Work”, Laurie and Clayton analyze the effectiveness of using
computational puzzles to ﬁght spam [21]. However, Wobber dis-
covered an arithmetic error in a proﬁt margin calculation that un-
dermines one of the key results [8]. Thus, the correct conclusion of
their argument is that computational puzzles are a viable solution
at current spam response rates. Also, their arguments only consider
a simple ﬁxed-rate payment system that differs signiﬁcantly from
the proof-of-work scheme used by Portcullis.
9. CONCLUSION
The Denial-of-Capability (DoC) attack is a serious impediment
for capability-based DDoS defense mechanisms. Portcullis strictly
bounds the amount of delay a collection of attacking nodes can
create for any client. With realistic Internet-scale simulations, we
show the strong fairness Portcullis’s computational puzzles pro-
vide. Portcullis introduces a powerful mechanism for providing
DDoS resistance, but that beneﬁt requires additional complexity.
Only time will tell if the Internet will need the strict availability
guarantees originally proposed by past capability schemes and now
made robust against DoC by Portcullis. In the mean time, we be-
lieve Portcullis provides an important design point to inform the
debate on highly available network architectures.
Acknowledgements
The authors would like to thank Jonathan McCune for his technical
assistance, Diana Parno for her extensive editorial contributions,
and David Maltz and our anonymous reviewers for their helpful
comments and suggestions.
This research was supported in part by CyLab at Carnegie Mel-
lon under grant DAAD19-02-1-0389 from the Army Research Of-
ﬁce, and grants CNF–0433540 and CNF–0435382 from the Na-
tional Science Foundation. Bryan Parno is supported in part by an
NDSEG Fellowship, which is sponsored by the Department of De-
fense. The views and conclusions contained here are those of the
authors and should not be interpreted as necessarily representing
the ofﬁcial policies or endorsements, either express or implied, of
ARO, CMU, NSF, or the U.S. Government or any of its agencies.
10. REFERENCES
[1] M. Abadi, M. Burrows, M. Manasse, and T. Wobber.
Moderately hard, memory-bound functions. In Proceedings
of ISOC NDSS, February 2003.
[2] Lisa Amini and Henning Schulzrinne. Issues with inferring
Internet topological attributes. In Proceedings of the Internet
Statistics and Metrics Analysis Workshop, October 2004.
[3] Tom Anderson, Timothy Roscoe, and David Wetherall.
Preventing Internet denial-of-service with capabilities. In
Proceedings of Hotnets-II, November 2003.
[4] Katerina Argyraki and David Cheriton. Network capabilities:
The good, the bad and the ugly. In Proceedings of Workshop
on Hot Topics in Networks (HotNets-IV), November 2005.
[5] T. Aura, P. Nikander, and J. Leiwo. DoS-resistant
authentication with client puzzles. In Proceedings of Security
Protocols Workshop, 2001.
[6] A. Broder and M. Mitzenmacher. Network applications of
Bloom ﬁlters: A survey. Journal of Internet Mathematics,
1(4), 2005.
[7] CAIDA. Skitter. http:
//www.caida.org/tools/measurement/skitter/.
[8] Richard Clayton. http://www.cl.cam.ac.uk/~rnc1/
Accessed May, 2007.
[9] Team Cymru. The team cymru ip to asn lookup page.
http://www.cymru.com/BGP/asnlookup.html.
[10] Drew Dean and Adam Stubbleﬁeld. Using client puzzles to
protect TLS. In Proceedings of USENIX Security
Symposium, 2001.
[11] C. Dwork, A. Goldberg, and M. Naor. On memory-bound
functions for ﬁghting spam. In Proceedings of CRYPTO,
2003.
[12] C. Dwork and M. Naor. Pricing via processing or combatting
junk mail. In Proceedings of CRYPTO, 1993.
[13] P. Ferguson and D. Senie. Network ingress ﬁltering:
Defeating denial of service attacks which employ IP source
address spooﬁng. RFC 2267, January 1998.
[14] V. Gligor. Guaranteeing access in spite of service-ﬂooding
attacks. In Proceedings of the Security Protocols Workshop,
April 2003.
[15] Helion Technology Limited. Fast SHA-1 hash core for ASIC.
Cambridge, England. Available at
http://www.heliontech.com/downloads/sha1_asic_
fast_helioncore.pdf. November 2005.
[16] Helion Technology Limited. Fast SHA-1 hash core for
Xilinx FPGA. Cambridge, England. Available at
http://www.heliontech.com/downloads/sha1_
xilinx_fast_helioncore.pdf. November 2005.
[17] A. Juels and J. Brainard. Client puzzles: A cryptographic
countermeasure against connection depletion attacks. In
Proceedings of ISOC NDSS, 1999.
[18] Jaeyeon Jung, Emil Sit, Hari Balakrishnan, and Robert
Morris. DNS performance and the effectiveness of caching.
Transactions on Networking, 10(5), 2002.
[19] National Institute of Standards and Technology (NIST)
Computer Systems Laboratory. Secure hash standard. 180-1,
April 1995.
[20] K. Lakshminarayanan, D. Adkins, A. Perrig, and I. Stoica.
Taming IP Packet Flooding Attacks. In ACM HotNets-II,
November 2003.
[21] Ben Laurie and Richard Clayton. “Proof-of-work" proves not
to work. In Proceedings of WEIS, May 2004.
[22] S. Machiraju, M. Seshadri, and I. Stoica. A scalable and
robust solution for bandwidth allocation. In International
Workshop on QoS, May 2002.
[23] Jeffrey Pang, James Hendricks, Aditya Akella, Bruce Maggs,
Roberto De Prisco, and Srinivasan Seshan. Availability,
usage, and deployment characteristics of the domain name
system. In Proceedings of the Internet Measurement
Conference, October 2004.
[24] Lindsey Poole and Vivek S. Pai. ConﬁDNS: Leveraging
scale and history to improve DNS security. In Proceedings of
USENIX WORLDS, November 2006.
[25] Elaine Shi, Bryan Parno, Adrian Perrig, Yih-Chun Hu, and
Bruce Maggs. FANFARE for the common ﬂow. Technical
Report CMU-CS-05-148, Carnegie Mellon, February 2005.
[26] Michael Walﬁsh, Mythili Vutukuru, Hari Balakrishnan,
David Karger, and Scott Shenker. DDoS defense by offense.
In Proceedings of ACM SIGCOMM, September 2006.
[27] X. Wang and M. Reiter. Defending against denial-of-service
attacks with puzzle auctions. In Proceedings of IEEE
Symposium on Security and Privacy, May 2003.
[28] X. Wang and M. Reiter. Mitigating bandwidth-exhaustion
attacks using congestion puzzles. In ACM CCS, October
2004.
[29] Brent Waters, Ari Juels, J. Alex Halderman, and Edward W.
Felten. New client puzzle outsourcing techniques for DoS
resistance. In Proceedings of ACM CCS, November 2004.
[30] A. Yaar, A. Perrig, and D. Song. Pi: A path identiﬁcation
mechanism to defend against DDoS attacks. In Proceedings
of IEEE Symposium on Security and Privacy, May 2003.
[31] A. Yaar, A. Perrig, and D. Song. SIFF: A stateless Internet
ﬂow ﬁlter to mitigate DDoS ﬂooding attacks. In Proceedings
of IEEE Symposium on Security and Privacy, May 2004.
[32] X. Yang, D. Wetherall, and T. Anderson. A DoS-limiting
network architecture. In Proceedings of ACM SIGCOMM,
August 2005.