# Precisely and Scalably Vetting JavaScript Bridge in Android Hybrid Apps

**Authors:**
- Guangliang Yang
- Abner Mendoza
- Jialong Zhang
- Guofei Gu

**Affiliation:**
SUCCESS LAB, Texas A&M University, College Station, USA

**Emails:**
- {ygl, abmendoza}@tamu.edu
- {jialong, guofei}@cse.tamu.edu

## Abstract

In this paper, we introduce a novel system, named **BridgeScope**, designed for the precise and scalable detection of security issues related to JavaScript Bridges in Android hybrid applications. BridgeScope is flexible and can be applied to analyze various WebView implementations, including Android's default WebView and Mozilla's Rhino-based WebView. Additionally, BridgeScope can automatically generate test exploit code to further validate any identified JavaScript Bridge vulnerabilities.

We evaluated BridgeScope to demonstrate its precision and effectiveness in identifying JavaScript Bridge vulnerabilities. On average, it can analyze an app within seven seconds with a low false positive rate. Our large-scale evaluation identified hundreds of potentially vulnerable real-world popular apps that could lead to critical exploitation. Furthermore, we show that BridgeScope can detect malicious functionalities leveraging JavaScript Bridges in real-world malicious apps, even when the associated malicious servers are unavailable.

**Keywords:** Android security, WebView security, JavaScript Bridge

## 1. Introduction

Android hybrid applications increasingly integrate the embedded web browser component, "WebView," to render web pages and execute JavaScript code within the app for a seamless user experience. Developers can choose from various WebView implementations, such as Android's default WebView, Mozilla's Rhino-based WebView, Intel's XWalkView, and Chromeview.

The power of WebView extends beyond basic browser functionality by enabling rich interactions between web (e.g., JavaScript) and native (e.g., Java for Android) code through a special interface known as the "JavaScript Bridge." This feature simplifies the development of hybrid apps but also introduces critical security risks, such as sensitive information leakage and local resource access.

Recent research has highlighted the security issues associated with JavaScript Bridges. However, an automated and fine-grained solution for precisely and scalably detecting these issues is still lacking.

In this paper, we present **BridgeScope**, a precise and scalable static detection framework. BridgeScope can automatically vet JavaScript Bridge usage in Android hybrid apps and generate test exploit code to validate problematic JavaScript Bridge usage. Our approach consists of four main steps:

1. BridgeScope fills the semantic gap between different core WebView implementations using a generalized WebView model.
2. It precisely discovers all available WebView components and bridges in an app.
3. It reconstructs the semantic information of all JavaScript Bridges and identifies sensitive bridges that contain data flows to sensitive API invocations.
4. It generates test exploit code using the analysis results, such as UI event sequences to trigger WebView components and data flow inside sensitive bridges.

To achieve high precision and scalability, BridgeScope applies fine-grained type, taint, and value analysis, implemented using a novel "shadowbox" data structure. Compared with state-of-the-art static approaches like data flow tracking, shadowbox analysis is path- and value-sensitive while maintaining precision and scalability. We evaluated our shadowbox analysis technique using a generic benchmark (DroidBench) and found that it achieved 94% precision.

Finally, we evaluated BridgeScope with 13,000 of the most popular free Android apps, gathered from Google Play across 26 categories. BridgeScope identified a total of 913 potentially vulnerable apps that may enable various types of attacks, such as stealing sensitive information, gaining privileged access by bypassing security checks, and other serious attacks that may result in monetary loss to device users. Our evaluation on real-world malware apps also demonstrated that BridgeScope could identify malicious functionalities hidden in sensitive JavaScript Bridges, even when the associated malicious servers were unavailable.

**Key Contributions:**

- We conduct a systematic study on how WebView and JavaScript Bridge are used by both benign apps and malware with diverse WebView implementations.
- We design a precise and scalable static detection system to automatically detect vulnerabilities caused by JavaScript Bridge.
- We evaluate our detection system, BridgeScope, with real-world popular apps and find 913 potentially vulnerable apps that could be exploited by attackers. On average, our system can analyze an app within 7 seconds with a low false positive rate.

## 2. Problem Statement

### 2.1 Background: WebView and JavaScript Bridge

To understand the fundamental components of WebView, irrespective of specific implementations, we devise a model based on Android's default WebView, which we find representative of key properties important for JavaScript Bridge analysis.

**Figure 1.** Major modules in Android default WebView. In the example, Bridge Jm enables interaction between web code Jw and native code M.

**JavaScript Bridge.** The bridge Jm allows interactions between the embedded web content Jw and the mobile native code implemented in M (the Bridge Object). Through its access to M, the web code in Jw inherits access to local resources and sensitive information in the mobile framework.

To enable bridges in WebView, all bridges must be registered using the `addJavascriptInterface(BridgeObject, BridgeName)` API, where `BridgeObject` is a native object (e.g., an instance of a Java class such as M in Figure 1) imported into the WebView instance W, and `BridgeName` is the object's reference name used to directly access `BridgeObject` in the web context through Jw.

**Annotation.** In Android 4.2+, an annotation mechanism restricts bridge access. In `BridgeObject`, only methods explicitly annotated with `@JavaScriptInterface` can be invoked by JavaScript code.

**Configuration Settings.** Developers can configure a WebView component through its settings property. For example, developers can enable or disable JavaScript in WebView. JavaScript is generally disabled by default and requires explicit activation by developers.

**Event Handler.** This mechanism allows developers to handle different events after WebView runs, which can be used to provide additional security checks. For instance, the `shouldOverrideUrlLoading()` and `shouldInterceptRequest()` event handlers, designed to handle URL and resource loading events, can be used to restrict new web content loaded in WebView.

**Same Origin Policy (SOP).** In WebView, SOP enforces access control on local data in the web layer between mutually distrusting parties. However, SOP is not extended to resources in the native layer, such as users' contact lists.

### 2.2 Security Issues Caused by JavaScript Bridge and Their Impacts

Consider an Android app that exposes several methods {m1...mn} âˆˆ M through a bridge Jm in an embedded WebView W. If m1 provides privileged access to sensitive APIs or functionality in the mobile framework, any JavaScript code Jw executed in the context of the WebView will have access to the exposed interface Jm. This means all JavaScript code executed in the WebView, even in embedded iFrames, can invoke all methods exposed by the app in M.

**Direct Access to Sensitive APIs.** Attackers who can inject code into W can directly invoke sensitive functionality exposed through Jm. They can combine multiple methods in M for stealthy attacks, such as reading data with one method and writing data to a remote server with another. This is a variant of the classic confused deputy access control problem. In this scenario, the WebView W, as the deputy, will allow access to both exposed methods m1 and m2, enabling an attacker to first invoke a request for sensitive information through m1 and then append the returned data to another request to the communication-enabled exposed interface m2. Even if M does not include a method such as m2, if the app has INTERNET permissions, data from m1 can still be leaked by Jw through a JavaScript HTTP method.

**Cross-Origin DOM Manipulation.** An interesting attack scenario arises when mn exposes an API that allows manipulation of the DOM in W, such as using `loadUrl()` or `loadDataWithBaseURL()`. As a result, an embedded iFrame in W can inject cross-origin JavaScript code to effectively circumvent the same origin policy (SOP) and execute cross-site scripting (XSS) attacks in W's web origin. This violates the same origin policy assumption and can result in client-side XSS attacks using JavaScript Bridges. The root cause is that the origin information is lost when JavaScript causes content to be loaded via a Bridge Object.

### 2.3 Sensitive APIs

We categorize three types of 'sensitive' system APIs: source (reading data from Android), sink (sending data out of mobile devices), and danger (dangerous operations) APIs. Specifically, we define "source API" and "sink API" using a comprehensive categorization developed in previous work. Additionally, we treat any API that can access local hardware (such as the camera) and cause charges on the user's device (e.g., SMS, phone calls) as a "danger API."

### 2.4 Threat Model

We focus on hybrid apps that enable JavaScript and JavaScript Bridge. We assume that the code written in C/C++ and implicit data flow inside apps have minimal influence on our analysis. Generally, we consider attack scenarios in the context of benign and malicious apps:

**Benign Apps.** In this scenario, we assume that HTML/JavaScript code loaded in WebView of benign apps is untrusted. We also assume that web attackers cannot directly access the native context but can inject malicious HTML/JavaScript code into WebView through code injection attacks. Attackers can either compromise third-party websites or inject/hijack network traffic (e.g., man-in-the-middle (MITM) attack), such as the HTTP communication within WebView or third-party Java libraries (e.g., ad libraries).

A stronger assumption is that attackers may also hijack HTTPS traffic. Although this type of attack is difficult, it is still feasible, particularly considering the poor/insecure implementation of HTTPS in mobile apps.

**Malicious Apps.** We assume that an attacker writes a malicious app using WebView and JavaScript Bridge and submits it to app marketplaces, such as Google Play. To evade security vetting systems, such as Google Bouncer, the app is designed so that (1) WebView loads a remote web page, whose content is controlled by the attacker; (2) the malware's sensitive behaviors are conducted in JavaScript Bridge, while its command & control (C&C) logic is implemented by JavaScript code in WebView; (3) initially, the C&C code is not injected into the loaded web page and only becomes available at a specific time, such as after the app bypasses the security checks and is published.

## 3. Shadowbox Analysis

In this section, we present details about our shadowbox analysis technique. First, we highlight the advantages of our approach compared with other state-of-the-art approaches. Then, we present definitions and concepts related to shadowbox. We also discuss more details about type, taint, and value analysis. Finally, we show how to apply shadowbox analysis to solve different challenges, such as the problem caused by common data structures.

### 3.1 Challenges

Type, taint, and value/string analysis are frequently used program analysis techniques. However, state-of-the-art approaches fall short in (1) precisely handling common data structures, such as list, hashmap, Android Bundle, Parcel, etc.; (2) maintaining path- and value-sensitivity while remaining precise and scalable. These shortcomings may cause false negatives and false positives in analysis results.

**Path- and Value-Sensitivity.** To achieve high precision, it is critical to maintain path- and value-sensitivity. However, state-of-the-art work, such as Flowdroid and Amandroid, do not thoroughly maintain these properties. For example, Listing 1.1 shows a snippet of a test case (from DroidBench) designed to test false positives of alias analysis. In this test case, sensitive information saved in `deviceId` is transferred to a field of an instance of the class `A` (Line 14), and then a sink API is called (Line 15), which merely sends out a constant string rather than the sensitive information. However, existing approaches, such as Flowdroid and Amandroid, erroneously find a path from source to sink in this scenario due to path-insensitivity.

```java
1 class A { public String b = "Y"; }
2 class B { public A attr; }
3 ...
4 A b, q, y; B a, p, x;
5 a = new B(); p = new B();
6 b = new A();
7 if (...) {
8   ...
9 } else {
10  x = p; y = q;
11 }
12 x.attr = y;
13 q.b = deviceId; // source
14 sms.sendTextMessage("+49 1234", null, a.attr.b, null, null); // sink
```

Listing 1.2. An Example abstracted from real apps

BridgeScope solves this problem by performing fine-grained type, taint, and value analysis using a 'shadowbox' data structure as discussed in the following sections.

### 3.2 Concepts Related to Shadowbox

We define a shadowbox as the representation of an object (e.g., WebView). Generally, only tainted 'primitive variables' (e.g., integers), whose data type is primitive, and all 'non-primitive variables' (e.g., string and array) are boxed. The relevant concepts are defined as follows:

- **v**: Represents a variable.
- **s**: Represents a shadowbox.

By using shadowboxes, BridgeScope can accurately track and analyze the flow of data, ensuring that the analysis remains both precise and scalable.