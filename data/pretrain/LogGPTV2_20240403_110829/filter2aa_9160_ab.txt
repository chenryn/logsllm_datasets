              | .-------------'
              | |
        .------------------------.
        |  0xa0                  |
        | mov dx, 0x120          |
        | mov ah, 9              |
        | int 0x21               |
        | call fcn.00000038;[oc] |
        | ;-- bx:                |
        | mov dx, 0xc2           |
        | mov ah, 9              |
        | int 0x21               |
        | mov ax, 0x4c00         |
        | int 0x21               |
        `------------------------'
[0000:0050]>
```
We'll analyze the function block-by-block. In parallel, we can follow the flow with the DOSBox-X debugger (to open the debugger, hit `ALT-Break`). But before we start, let's take a quick look at the program strings:
```console
root@kali:/media/sf_CTFs/kaf/dkdos# strings dkdos.exe
MS-DOS KIPOD SHOP
------------------------------------------------
Wanna buy some KIPODIM?
First, I have to make sure you're allowed to.
Please log in with you password:
Congrats! You are allowed to buy some KIPODIM!
You can do it with `nc ctf.kaf.sh 6000`
No KIPODIM today :|
```
We obviously want to get to the "Congrats!" string. Radare2 can't identify the strings or their references correctly (maybe because DOS defines dollar-terminated strings instead of null-terminated strings) but we'll see them used later on.
Anyway, let's start with the first block, which starts at `0x50`.
```assembly
0000:0050      b80c00         mov ax, 0xc
0000:0053      8ed8           mov ds, ax
0000:0055      e8c9ff         call fcn.00000021
```
This section sets the data segment to `0xC` and calls `fcn.00000021`:
```assembly
[0000:0050]> pdf @ fcn.00000021
            ;-- ip:
/ (fcn) fcn.00000021 8
|   fcn.00000021 ();
| bp: 0 (vars 0, args 0)
| sp: 0 (vars 0, args 0)
| rg: 0 (vars 0, args 0)
|           0000:0021      ba0000         mov dx, 0
|           0000:0024      b409           mov ah, 9
|           0000:0026      cd21           int 0x21
\           0000:0028      c3             ret
```
The function simply calls [int 21,9](http://stanislavs.org/helppc/int_21-9.html) to print the `$` terminated string at `DS:DX`. Let's check it out using the DOSBox-X Debugger. First, we set a breakpoint to catch `int 21,9` using the `bpint 21 9` command, and press `F5` to resume execution. Then, we run the program in the console and wait for the breakpoint to hit.
```assembly
────Code Overview───────────────────────────────────────────────────────────────
0339:00000021 BA0000              mov  dx,0000                                  
0339:00000024 B409                mov  ah,09                                    
0339:00000026 CD21                int  21                                       
0339:00000028 C3                  ret   
```
We can now inspect the memory at `DS:DX` by typing `D DS:DX`:
```
────Data view (segmented)───────────────────────────────────────────────────────
0345:00000000 4D 53 2D 44 4F 53 20 4B 49 50 4F 44 20 53 48 4F  MS-DOS KIPOD SHO
0345:00000010 50 0A 0D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D  P..------------- 
0345:00000020 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D  ---------------- 
0345:00000030 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D  ---------------- 
0345:00000040 2D 2D 2D 0A 0D 0A 0D 57 61 6E 6E 61 20 62 75 79  ---....Wanna buy 
0345:00000050 20 73 6F 6D 65 20 4B 49 50 4F 44 49 4D 3F 0A 0D   some KIPODIM?.. 
0345:00000060 46 69 72 73 74 2C 20 49 20 68 61 76 65 20 74 6F  First, I have to 
0345:00000070 20 6D 61 6B 65 20 73 75 72 65 20 79 6F 75 27 72   make sure you'r
0345:00000080 65 20 61 6C 6C 6F 77 65 64 20 74 6F 2E 0A 0D 0A  e allowed to....
0345:00000090 0D 50 6C 65 61 73 65 20 6C 6F 67 20 69 6E 20 77  .Please log in w 
0345:000000A0 69 74 68 20 79 6F 75 20 70 61 73 73 77 6F 72 64  ith you password 
0345:000000B0 3A 0A 0D 24 09 00 00 00 00 00 00 00 00 00 00 00  :..$............
```
This prints the introduction string we saw earlier. Let's continue:
```assembly
0000:0058      2ec7061100d1.  mov word cs:[0x11], 0x27d1
0000:005f      2ec7061300d1.  mov word cs:[0x13], 0x27d1
0000:0066      e8c0ff         call fcn.00000029
```
After storing some values, the program modifies some values in the code segment (we'll get to that later) and calls `fcn.00000029`:
```assembly
[0000:0050]> pdf @ fcn.00000029
/ (fcn) fcn.00000029 15
|   fcn.00000029 ();
|           0000:0029      2ec706150001.  mov word cs:[0x15], 0x701
|           0000:0030      bab400         mov dx, 0xb4
|           0000:0033      b40a           mov ah, 0xa
|           0000:0035      cd21           int 0x21
\           0000:0037      c3             ret
```
This function continues modifying the code segment (more on that later) and calls [int 21,a](http://stanislavs.org/helppc/int_21-a.html) to read input from the user. `DS:DX` contains the pointer to the input buffer of the format:
```
    | max | count |  BUFFER (N bytes)
	   |	  |	     `------ input buffer
	   |	  `------------ number of characters returned (byte)
	   `-------------- maximum number of characters to read (byte)
```
Let's see what the debugger shows at this point by running to `0000:0035` and calling `D DS:DX`:
```
0345:000000B4 09 00 00 00 00 00 00 00 00 00 00 00 00 00 0A 0D  ................
```
We can see that `max` is set to 9. After stepping over the interrupt and entering a string (`abcdefgh`), the buffer now shows:
```
0345:000000B4 09 08 61 62 63 64 65 66 67 68 0D 00 00 00 0A 0D  ..abcdefgh......
```
We can see that the `count` is set to `8`, and immediately after it we found our input. 
Next comes:
```assembly
0000:0069      a0bd00         mov al, byte [0xbd]
0000:006c      84c0           test al, al
0000:006e      7407           je 0x77
```