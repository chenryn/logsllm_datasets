3: Construct and output two challenge sets:
x = {(1,N − 1)b1 , (2,N − 2)b2 , . . . , (t,N −t)bt ,t + 1}, and
y = {(1,N − 1)b1 , (2,N − 2)b2 , . . . , (t,N −t)bt ,N − (t + 1)}.
4: Receive encryptions c1, . . . ,c2t+1; Adv has to decide if
5: Let midt
they correspond to x or y.
the middle
[EncOrd(t), EncOrd(N − t)].
“it is x”, else output “it is y”.
be
of
the
of
If c2t+1  midi and c2i+1 is
the encryption of i + 1 or if c2i+1 ; righthash=<>
hash of         = x274a
hash of         = x9b32
Figure 7. OPE Tree with Merkle hash and metadata; compare to the
Merkle-free version shown in Fig. 2.
The Merkle hash at a node is a hash over the data at this
node and the Merkle hashes of its children.
A. Merkle tree veriﬁcation
To verify the correctness of each operation performed by
the server, the client stores a copy of the root Merkle hash,
and requests proofs from the server for each operation. For
example, in order for the client to check if a node v is in
the OPE Tree, the server has to provide a sibling-path: this
consists of all the information (including hashes) at the nodes
on the path from v up to the root, and the information at all
the siblings of these nodes. Using the properties of the Merkle
tree, in order to establish that v is in the tree, it sufﬁces for
the client to compute the Merkle root corresponding to the
sibling-path and see if it matches the client’s stored hash.
In the rest of this section, we describe how the client
checks each OPE Tree operation for stOPE. This approach
can be similarly applied to mOPE, but we omit it for brevity.
We also omit the formal security deﬁnition and proof, which
are included in Appendix D of our extended paper [34].
Proofs of deletion and insertion. When the client requests
insertion or deletion of an item, the server needs to provide
a proof that it indeed inserted or deleted the item. The proof
consists of:
1) Old Merkle information: the information at the nodes
in the tree that were affected by the insertion/deletion,
together with the sibling paths of these nodes. (In a
B-tree, there is just one sibling-path corresponding to
the lowest node in the tree involved in the operation.)
2) New Merkle information: the new sibling-path with
values and hashes after the deletion.
The client checks the insertion or deletion proof by:
1) Using the old Merkle information, the client computes
the root of the Merkle tree and veriﬁes that it agrees
with the current Merkle root the client has.
2) The client checks that the new information is correct:
the node was inserted or removed correctly in the B-tree
or the appropriate ref-count was updated, and any other
metadata at nodes was not altered.
3) The client computes the root of the new tree and stores
this updated Merkle hash.
Proofs of correctness for Order and Query. To prove
correctness of Order results, the server includes the sibling-
path from where the node is located in the tree to the root.
Using the client’s Merkle root hash, the client checks that
the hash of the path corresponds to the client’s Merkle root,
the path starts from the desired node, and the OPE encoding
is correct based on the path from the root to the node.
To check the results of Query(v), the client has to ensure
that the returned interval is not only enclosing but also tight.
For this, the client uses the characterization of the interval
margins from Claim 3. To prove tightness of the left margin
for a value v, let N be the node in the tree that either contains
v or that would be the node where v would be inserted (as
determined during the client–server interaction). The server
supplies the sibling-path of the rightmost element in the left
subtree of N, or the sibling-path of N if N has no left child.
The client checks against its root Merkle hash that this path
is indeed a valid path from the tree containing N. To verify
the result is tight, the client checks that it satisﬁes Claim 3
using the information from each node on this path (which
contains whether a node has a right or left child and the
children hashes). Treatment of the right margin is symmetric.
VIII. USING MOPE IN A DATABASE APPLICATION
In this section, we explain how to use mOPE in a database,
which is the primary application for OPE schemes and
for mOPE. As mentioned in the introduction, OPE allows
efﬁcient order computations on an encrypted database because
the database server can compute order on OPE encodings
in the same way as on unencrypted data (e.g., database
indexes work the same way), and the database server software
does not need to be modiﬁed. Using mOPE in an encrypted
database improves security over other OPE schemes such as
BCLO [6], currently used in CryptDB [33], because mOPE
does not leak any information besides order. Using stOPE