# Surgical Recovery from Kernel-Level Rootkit Installations
## Speaker: Julian Grizzard
### DEFCON 13, July 2005

---

### Latest Slides and Tools
**Please download the latest slides and tools:**
- [Latest Slides](http://www.ece.gatech.edu/research/labs/nsa/presentations/dc13_grizzard.pdf)
- [System Call Table Tools](http://www.ece.gatech.edu/research/labs/nsa/sct_tools.shtml)
- [Spine Architecture Work](http://www.ece.gatech.edu/research/labs/nsa/spine.shtml)

---

### Talk Overview
- **Rootkit Background**
- **System Call Table Tools**
  - Demos
- **L4 Microkernel Introduction**
- **Spine Architecture**
- **Intrusion Recovery System (IRS)**
  - Demos
- **Concluding Remarks**

---

### Rootkit Functionality
- **Retain Access**
  - Trojan sshd client with hardcoded user/pass for root access
  - Initiate remote entry via specially crafted packet stream
- **Hide Activity**
  - Hide a process and its resource usage
  - Conceal malicious rootkit kernel modules from `lsmod`

---

### Additional Malware Functionality
- **Information Harvesting**
  - Credit cards
  - Bank accounts
- **Resource Usage**
  - Spam relaying
  - Distributed Denial of Service (DDoS)

---

### User-Level vs. Kernel-Level Rootkits
- **User-Level**
  - Modify/replace system binaries (e.g., `ps`, `netstat`, `ls`, `top`, `passwd`)
- **Kernel-Level**
  - Modify/replace kernel processes (e.g., system call table)

---

### History of Kernel-Level Rootkits
- **Heroin (October 1997)**
  - First public LKM
- **Knark (June 1999)**
  - Highly popular LKM
- **SucKIT (December 2001)**
  - First public `/dev/kmem` entry
- **Adore-ng 0.31 (January 2004)**
  - Uses VFS redirection; works on Linux 2.6.X

---

### Kernel-Level Rootkit Targets
- System call table
- Interrupt descriptor table
- Virtual file system layer
- Kernel data structures

---

### Kernel Entry Methods
- Linux kernel module (LKM)
- `/dev/kmem`, `/dev/mem`, `/dev/port`
- Direct memory access (DMA)
- Modify kernel image on disk

---

### System Call Table Modifications
- **System calls** are the main gateway from user space to kernel space.
- **Commonly targeted kernel structure**:
  - Redirect individual system calls or the entire table.

---

### Entry Redirection
- **Original read system call**: No longer pointed to by SCT.
- **Trojaned read system call**: Active SCT points to it.

---

### Entry Overwrite
- **System call code overwritten**: SCT remains intact.

---

### Table Redirection
- **Original SCT intact**: Original system calls intact.
- **Handler points to Trojan table**.

---

### /dev/kmem Details from SucKIT
- **SucKIT accesses kernel memory from user space**:
  - Redirects entire system call table.
  - **Finding the system call table**:
    - Reads IDTR register.
    - Computes absolute offset of system call handler.
  - **Allocating kernel memory**:
    - Uses `kmalloc` as a system call.

---

### Example Kernel-Level Rootkits
- **VFS Redirection**: adore-ng
- **SCT Table Redirection**: r.tgz, zk, sucKIT
- **SCT Entry Redirection**: adore, knark, heroin

---

### System Call Table Tools
- **Developed tools** to query and repair the system call table.
- **Based on sucKIT source code** and work from user space.
- **Recovery algorithm** similar to rootkit algorithms.

---

### Algorithm (x86 Architecture)
1. Copy clean system calls to kernel memory.
2. Create a new system call table.
3. Copy system call handler to `kmem`.
4. Query the IDTR register (interrupt table).
5. Set 0x80ith entry to the new handler.

---

### Details
- Use a known good kernel image and extract the system call table with `gdb`.
- Address of the system call table must be set in the system call handler.

---

### Copying Kernel Functions
- **Trickery involved**:
  - x86 code has call instructions with relative offsets.
  - Recompute relative offsets and modify machine code.

---

### Demos
- **System Call Table Tools Demonstration**

---

### Intel Descriptor Privilege Level
- **Level 3**: Minimal hardware access (user space processes).
- **Level 2**: Limited hardware access (N/A in Linux).
- **Level 1**: Limited hardware access (N/A in Linux).
- **Level 0**: Unlimited hardware access (kernel space threads).

---

### Virtual Machines/Hypervisors
- VMware
- User Mode Linux
- Xen
- L4

---

### Monolithic Operating System

---

### Microkernel Operating System

---

### History of Microkernels
- Mach project (1985, CMU)
- QNX
- Windows NT
- LynxOS
- Chorus
- Mac OS X

---

### Microkernel Requirements
- Tasks
- Inter-Process Communication (IPC)
- I/O Support

---

### L4 System Calls (Fiasco)
- **9 IPC Calls**: e.g., `l4_ipc_call`, `l4_ipc_receive`
- **5 Thread Calls**: e.g., `l4_myself`, `l4_task_new`

---

### L4 IPC's
- Fast IPCs
- Flexpages
- Clans and chiefs
- System calls, page faults are IPCs

---

### L4 I/O (from Fiasco lecture slides)
- **Hardware interrupts**: Mapped to IPC.
- **I/O memory and I/O ports**: Flexpages.
- **Missing feature**: Pass interrupt association (security hole).
- **DMA**: Big security risk.

---

### Rmgr (lecture slides)
- **Resources**: Serves page faults (physical memory, I/O ports, tasks, interrupts).

---

### Booting the System (lecture slides)
- **Modified GRUB**
- Multi-boot specification
- Rmgr, sigma0, root task, etc.
- **IDT and GDT/LDT setup**

---

### L4 Security Problems
- Passing interrupt association
- Direct memory access
- Filling up page mapping database
- Kernel accessible on disk
- CLI/STI
- Other issues

---

### Spine Architecture
- **Uses L4 Fiasco microkernel**
- **L4Linux runs on top of the microkernel**
- **User tasks run on L4Linux**
- **Intrusion recovery system (IRS)**: Levels 0 through 3

---

### L4Linux
- **Port of Linux kernel to L4 architecture**
- "Paravirtualization" vs. pure virtualization
- Linux kernel runs in user space
- Binary compatible

---

### Intrusion Recovery System (IRS)
- **Capable of recovering from rootkit installations**
- **Maintains a copy of known good state** to verify system integrity and repair if needed.
- **Integral part of the operating system**

---

### IRS Details
- **Intrusion detection system (IDS)**
  - Detects intrusions to enable recovery.
- **Verifying system integrity**
  - Challenges in verifying data structures, config files, etc.
- **Verifying IRS integrity**
  - Malware can disable IDSs.

---

### Multi-Level IRS Reasoning
- **Multi-level approach** to bridge the semantic gap between layers:
  - **L3**: Verify file system state and repair if needed.
  - **L2**: Kernel module to verify L4Linux and L3.
  - **L1**: Microkernel modifications to verify L2 and provide secure storage.
  - **L0**: Hardware support for isolation and verifying L1.

---

### Demos
- **Intrusion Recovery System Demonstration**

---

### Limitations and Conclusions
- **Can an attacker install a microkernel-level rootkit?**
- **What if the attacker has physical access?**
- **No all-encompassing solution** exists, but an IRS can make systems more reliable.

---

### Thanks!
- Henry Owen
- John Levine
- Sven Krasser
- Greg Conti

---

### Links
- [Network and Security Architecture website](http://www.ece.gatech.edu/research/labs/nsa/index.shtml)
- [Georgia Tech Information Security Center](http://www.gtisc.gatech.edu/)
- [Fiasco project](http://os.inf.tu-dresden.de/fiasco/)
- [Xen](http://www.cl.cam.ac.uk/Research/SRG/netos/xen/)
- [Samhain Labs](http://la-samhna.de)
- [Chkrootkit](http://www.chkrootkit.org)
- [DaWheel](http://www.dawheel.org)

---

### Questions?
- **Julian Grizzard**
- **grizzard AT ece.gatech.edu**