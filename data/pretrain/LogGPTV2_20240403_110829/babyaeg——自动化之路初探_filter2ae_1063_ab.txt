    void explode_first(int (* firsttype)(char , char , char ), char *a, char *b, char *c){
      int i = 0;
      for(i = 0; i  0xff:
                    raise Exception('parse_first_type: offset overflow.')
                edit_func += 'x75' + chr(offset)
                # print disasm('x75' + chr(offset))
                counter += 1
            else:
                edit_func += tmp_ins.bytes.__str__()
        edit_func += 'Hxc7xc0x00x00x00x00'
        edit_func += 'x90' * 0x200 + 'xc9xc3'
        # md = Cs(CS_ARCH_X86, CS_MODE_64)
        # for i in md.disasm(edit_func, 0):
        #     print("0x%x:t%st%s" %(i.address, i.mnemonic, i.op_str))
        executor.send('x01')
        executor.send(edit_func.ljust(0x400, 'x00'))
        try:
            res = executor.recv(3)
        except Exception:
            md = Cs(CS_ARCH_X86, CS_MODE_64)
            for i in md.disasm(edit_func, 0):
                print("0x%x:t%st%s" %(i.address, i.mnemonic, i.op_str))
            raise
        if not len(res) == 3:
            print res.encode('hex')
            raise Exception('parse_first_type: There is something wrong with the result.')
        return res, nextfunc
这里需要简单解释一下的是func这个变量里面到底是什么，这里其实是capstone解析出的operation对象的一个list，储存了这个函数中的所有汇编语句；
executor变量储存了一个pwntools中的process对象，打开的正是我们之前编译的C程序，用于爆破。
具体细节可以看附在文末的exp，在这里只要看个大概就可以。
####  第二类函数
当我们将第一类函数的check全部绕过之后，将会面对下一种函数，大概长这个样子：
    __int64 __fastcall sub_2608D08(int a1)
    {
      __int64 result; // rax
      int v2; // [rsp+10h] [rbp-40h]
      int v3; // [rsp+14h] [rbp-3Ch]
      int v4; // [rsp+18h] [rbp-38h]
      int v5; // [rsp+1Ch] [rbp-34h]
      int v6; // [rsp+20h] [rbp-30h]
      int v7; // [rsp+30h] [rbp-20h]
      int v8; // [rsp+34h] [rbp-1Ch]
      int v9; // [rsp+38h] [rbp-18h]
      int v10; // [rsp+3Ch] [rbp-14h]
      int v11; // [rsp+40h] [rbp-10h]
      int v12; // [rsp+48h] [rbp-8h]
      int v13; // [rsp+4Ch] [rbp-4h]
      v13 = a1 - 48;
      v7 = 3;
      v8 = 0;
      v9 = 2;
      v10 = 1;
      v11 = 4;
      v2 = 8;
      v3 = 9;
      v4 = 6;
      v5 = 5;
      v6 = 7;
      v12 = (a1 - 48) % 5;
      result = (unsigned int)*(&v2 + *(&v7 + v12));
      if ( (_DWORD)result == 8 )
        result = sub_2608BB9((unsigned __int8)byte_280BFB1);
      return result;
    }
这个函数长得真的是丑，于是我们应该发扬CTF选手的逆向实力，稍作整理，就看得很清楚：
    __int64 __fastcall sub_2608D08(int a1)
    {
      __int64 result; // rax
      int t2[5]; // [rsp+10h] [rbp-40h]
      int t1[5]; // [rsp+30h] [rbp-20h]
      int v4; // [rsp+48h] [rbp-8h]
      int v5; // [rsp+4Ch] [rbp-4h]
      v5 = a1 - 48;
      t1[0] = 3;
      t1[1] = 0;
      t1[2] = 2;
      t1[3] = 1;
      t1[4] = 4;
      t2[0] = 8;
      t2[1] = 9;
      t2[2] = 6;
      t2[3] = 5;
      t2[4] = 7;
      v4 = (a1 - 48) % 5;
      result = (unsigned int)t2[t1[v4]];
      if ( (_DWORD)result == 8 )
        result = sub_2608BB9((unsigned __int8)byte_280BFB1);
      return result;
    }
经过这么一整理，读者们都看出来了，这就是一个二重查表的函数，以我们的输入为索引（当然经过了一点小小的变换），对t1,t2两个表进行迭代查表操作，此时我们只需要读二进制，反向建立这么一张表格，然后在python中找到我们应该输入的值，就可以绕过check了。但是在做之前，我们仍然需要对照一下汇编，因为只有整齐的汇编才便于处理，如果汇编不整齐，我们就必须再做进一步操作：
我们所需要的，其实就是前面整整齐齐的赋值语句，从赋值语句中，我们就能直接恢复出两张表的数据。好看吗？好看就是好代码。
但是在这里，我偷了一点懒，这里其实是出题人偷的懒。第二类函数总共只有三个，表的大小分别为：5， 10， 64；表的级数分别为2， 3，
3。因此我直接对每一个函数写了一个量身定制的处理函数，秒之。
代码如下：
    def parse_second_type(func):
        tablelist = []
        for idx in range(len(func.oplist)):
            tmp_ins = func.oplist[idx]
            if tmp_ins.mnemonic == 'call':
                nextfuncvaddr = int(tmp_ins.op_str, 16)
                break
        # print func
        for idx in range(len(func.oplist)):
            tmp_ins = func.oplist[idx]
            if tmp_ins.mnemonic == 'mov' and tmp_ins.op_str.startswith('dword ptr [rbp -'):
                try:
                    tmpval = eval(tmp_ins.op_str.split(', ')[1])
                except Exception:
                    continue
                tablelist.append(tmpval)
                # print tmp_ins.address, tmp_ins.mnemonic, tmp_ins.op_str
            if tmp_ins.mnemonic == 'cmp':