FROM_BASE64(str)
FORMAT(x,d[,locale])
FIND_IN_SET(str,str_list)
口
串。下面两个表达式是等价的（更多详细信息请参考对CONV（）函数的介绍）：
如果输入参数是一个数值n，那么 HEX（）函数将返回n的十六进制表示，返回值是一个字符
HEX(str)
FROM_BASE64（）是在 MySQL 5.6.1里引入的。
HEX(65)
FROM_BASE64(TO_BASE64('he11o'))
NULL。此函数是TO_BASE64（)的逆操作。
转换一个base-64编码字符串，并返回原始值；如果参数不是base-64编码字符串，则返回
TO_BASE64('hel1o')
lc_time_names的值。
'en_Us'，它可以使用可选的locale 参数来改写。所有允许值等同于系统变量
本地语言决定了小数点、千位分隔符以及分隔符之间的分组方式。默认本地语言为
请注意最后一个例子里的数值舍入行为。
FORMAT(999999.99,0)
FORMAT(999999.99,2)
FORMAT(1234.56789,3)
使用一个类似nn,nnn.nnn'的格式，将数值x格式化成小数点后带a位小数的数字，返回
FIND_IN_SET('dog',*moose,cow,pig)
FIND_IN_SET(cOW',mooSe,coW,pig')
FIND_IN_SET（)将返回字符串 str在str_list中的下标。如果str没有出现在 str_list
str_list是由一些以逗号分隔的子串(即类似于MySQL中的 SET值)构成的一个字符串。
值
雷
EXPORT_SET(97,Y,*N',',,8)
EXPORT_SET(0xa,'1'
EXPORT_SET（7,'+','-,，5）
进行如此转换的最大位数。bit_count的默认值是64，这也是它的最大值。只要输入参娄
于0）的每个位。结果中最左边的字符串对应于n中最下边的位。bit_count是将对n
号。on用来表示值n中被置位（即等于1）的每个位，off 用来表示n中没被置位（即等
返回一个由字符串on和off构成、以字符串delim为分隔符的字符串。默认的分隔符是
EXPORT_SET(n,on,off[,delim,[bit_count]])
CONV(-10,10,-16)
CONV(-10,10,16)
CONV（）函数将把n视为一个有符号数。
默认情况下，数值n将被视为一个无符号数。如果给定的to_base是一个负数，那么
CONV（11111111,2,8)
CONV(11111111,2,8)
下面的例子将把二进制表示的255转换为八进制：
CONV('e',16,2)
是一个字符串。如果等于0，则返回值中将不包含小数点或小数部分。
，则返回O；只要输入参数中有NULL值，就返回NULL。第一个子串的下标是1。
有NULL值，此函数的返回值就为NULL。
'0'
,6)
→41
→'aGVsbG8=
一
→'1,234.568
↓
↓
→'1110'
000'000′1.
↑
'FFFFFFFFFFFFFFF6'
377
66*666666
2
'Y,N,N,N,N,Y,Y,N
'010100
+++--
-A'
377
C.2函数
577
数
值
尚
---
## Page 598
578
LOCATE(substr, str)
口
口
INSTR(str,substr)
LOCATE('b
LOCATE('b','ABC)
LOCATE('b','abc')
如果str和 substr都不是二进制串，比较操作将按操作数排序规则进行。
找字符串 substr。如果有一个操作数是二进制串，LOCATE（）将按二进制串比较字符串；
位置；如果 substr 没有出现在字符串 str 里，则返回O。如果有输入参数为 NULL，则返
带有两个参数形式的LOCATE（）函数，会返回字符串 substr在字符串 str里第一次出现的
LOCATE(substr,str,pos)
LENGTH(NULL)
LENGTH('abc')
以使用 CHAR_LENGTH（）。
LEFT('abc',0)
LEFT('abc,NULL)
LEFT(NULL,10)
LEFT('myleftfoot*,2)
如果1en为NULL或者小于1，则返回一个空串。如果 str为NULL，则返回NULL。
返回字符串 str最左面的len个字符；如果len大于 str的长度，则返回整个字符串 str。
LEFT(str,len)
等同于LOWER（）函数。
LCASE(str)
LOCATE(BINARYb','ABC')
返
LOCATE(substr, str)
INSTR(str,substr)
等价的：
INSTR（）类似于带两个输入参数的LOCATE（）函数，只是参数的顺序相反。下面的表达式是
INSERT('sunshine',0,3,'rain or')
INSERT('sunshine'
INSERT('nighttime',6,4,*fal1')
则返回NULL。
值。如果 pos超出字符串 str的长度范围，则返回原来的字符串；如果有输入参数为NULL，
把字符串 str从第 pos 个位置开始的 len个字符替换为 ins_str，得到的字符串即为返回
UNHEX(HEX('abc'))
HEX(255*)
的十六进制数，组成一个字符串返回。HEX（)是UNHEX（）的逆操作。
回
CONV(65,10,16)
附录C操作符与函数参考
NULL。
区回字符串 str的长度，
。如果给出了位置参数 pos，LOCATE（）函数将在字符串 str 里以 pos 为起点去寻
COLLATE
latinl_general_ci,'ABC')
以字节为单位。多字节字符长度大于1。如果要确定字符长度，可
'rain
→'my'
323535
20
NULL
O
9
3
NULL
'sunshine'
'nightfall'
'abc'
616263
'rain or shine
---
## Page 599
MATCH(col_Iist)
MAKE_SET(n,bitO_str,bitl_str,...)
 LTRIM(str)
LPAD(str, len,pad_str)
LOWER(str)
些单词是由字母、数字、单引号或者下划线字符构成的字符序列。MATCH 里允许出现括
成，各列名以逗号分隔。它们必须是组成正被搜索的那张表的 FULLTEXT 索引的列。
MATCH 将使用一个 FULLTEXT 索引来执行一次搜索操作。MATCH 列表由一个或多个列名构
在最后一个例子里，
MAKE_SET(8,'a',b',c',d','e')
字符串会被忽略。
返回一个空串。如果n为NULL，则返回 NULL。在构造结果字符串时，列表中值为 NULL的
返回值里。（如果设置了O位，则结果会包含bitO_str，如此等等。）如果n等于0，
隔各个子串的字符串）。n值中每一个被置位（即等于1）的位所对应的子串都将被包括在
根据整数值n和字符串bitO_str,bitl_str,...构造出一个SET值（即一个以逗号来分
回NULL。
返回去掉字符串 str最左端的（打头的）空格后得到的那个字符串；如果 str为NULL，则返
LPAD('abc,2,.)
MAKE_SET（-1,'a',b','c,d",e')
MAKE_SET(2+16,'a','b'，'c',
MAKE_SET(11214,
LTRIM(
如果字符串str的长度已经超过len个字符，那么LPAD（)将把字符串 str截短为len 个
LPAD('abc',12,'def')
串。如果某个参数为 NULL，则返回 NULL。
返回在字符串str的左侧用字符串pad_str补足到长度等于len个字符时得到的一个字符
LOWER(_1atin1 0x414243)
制串。
如果这不是你想要的结果，可以把它的参数强制转换为一个有着适当排序规则的非二进
排序规则。
二进制串，LOWER（）函数将原封不动地返回该参数本身，因为二进制串没有任何字符集和
LOWER（）函数是根据其参数字符集的排序规则来进行大小写转换的。如果它的参数是一个
LOWER('New York,NY')
则返回NULL。
返回把字符串 str里的字符全都转换为小写字母后得到的一个字符串；如果 str为 NULL,
LPAD('abc',10,'.)
LOWER(0x414243)
LOWER(BINARY'NeW York,NY')
LOWER(NULL)
abc
）
AGAINST(str[search_mode])
，因为n值-1翻转了所有位，所以返回值包含了每一个子串。
b'
C
d，'e')
'd.
'e')
→'a,b,c,d,e'
→'ab
一
→ NULL
'new york, ny'
'new york,ny'
'b,e'
'a,b,c'
'd
'.......abc'
'defdefdefabc'
'New York,NY
abc
C.2函数
579
2
---
## Page 600
580
()
MID(str,pos, len)
请参考对CONV（）函数的介绍）：
返回包含参数n的八进制表示形式的一个字符串。下面两个表达式是等价的（更多详细信息
OCT（65)
法形式。
事实上，MID（）等同于 SUBSTRING（）函数，并且可以利用 SUBSTRING（）函数支持的各种语
MID(whata
MID(*what a dul1 example',8,4)
如果某个参数为NULL，则返回NULL。
子串。2个参数形式的MID（)将返回字符串 str从位置 pos到最后一个字符的那一个子串。
带3个参数形式的 MID（)将返回字符串str从位置pos开始且长度为len 个字符的那一个
MID(str, pos)
更多与FULLTEXT搜索相关的信息请参考2.14节。
的数据行。
配的少量信息再次搜索，才能完成自然语言搜索。
EXPANSION，那么要先使用搜索字符串进行搜索，然后使用搜索字符串和初次搜索最为匹
如果搜索模式为 WITH QUERY EXPANSION 或 IN NATURAL LANGUAGE MODE WITH QUERY
布尔模式搜索在表没有相应的FULLTEXT索引时也能进行，
在布尔搜索方式中，那些不带修饰符的被搜索单词都是可选的，与普通语言搜索方式中的含义
■多个被搜索单词可以用括号分组为一个表达式。括号表达式可以嵌套。
■短语搜索的实现方式是用双引号将该短语括起来（如"phase")。只有该短语存在，且排
相同。
几种操作符来影响搜索操作的具体行为。
不是以它们的出现频率为依据。在布尔搜索方式中，你还可以通过给被搜索单词加上以下
如果搜索模式为IN BOOLEANMODE，那么搜索结果将以被搜索单词是否出现过为依据，而
正，则表明至少找到了一个被搜索单词。那些在表中一半以上的行里都有的单词（它们的相
对于自然语言搜索，MATCH（)给出的是被搜索单词在每个行里的相关性排序。这些排序值
■INBOOLEANMODE
些值：
默认情况下，是以自然语言模式执行搜索。可以显式地将search_mode参数设置为下面这
列顺序一致，才能算匹配成功。
关
号，但AGAINST 里不允许出现括号。
出现在被搜索单词尾部的*被看作是一个通配符。例如，act*将匹配 act、acts、
附录C操作符与函数参考
action等。
含该单词的行完全排除在外。
打头的~将使给定单词在相关度计算里的贡献值变换正负号，但不会像-前导字符那样把包
打头的会减少或增加该单词对相关度计算结果的贡献。
打头的+或-分别表示该单词必须出现或必须不出现。
性被认为是零，因为它们的出现次数太多了）会被忽略。此外，MySQL内部还有一个停
IN NATURAL LANGUAGE MODE
dull
example',8)
，这样能找出内容与初次搜索字符串相关