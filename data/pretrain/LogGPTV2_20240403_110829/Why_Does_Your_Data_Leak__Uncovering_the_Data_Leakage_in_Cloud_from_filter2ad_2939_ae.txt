r
i
F
A1
A2
A3
A4
A5
A6
A7
A8
Drupe
A9
A10
A11
A12
A13
A14
A15
A16
A17
A18
A19
A20
A21
A22
Photo Collage
A23
A24
A25
A26
A27
A28
Sending messages with multiple fancy features
Editing user photos with magical enhancements
Editing user photos with featured specialties
Allowing users to organize and upload photos
Helping users in planning and booking trips
A game app to build and design attractive hotels
A game app to express revenges on game NPCs
Pushing news and allowing users to report news
Helping user to manage and reach their contacts
Pushing news and allowing users to report news
Helping users to start a diet and control weight
Calculating and tracking calories for human health
Showing fertility status from correspondent kits
Helping users to easily play a popular game
A real time translation tool, for calls, chats, etc.
Showing images of nations’ commemorative coins
A convenient tool to take notes with rich content
A convenient tool for users to schedule a taxi
Allowing users to buy/renew general insurances
Providing accurate local weather forecast
Editing and enhancing users photos and selﬁes
Allowing users to guess information about music
Allowing users to sell and buy multiple products
Creating photo collage with personal photos
Helping users to translate and learn languages
Editing user photos with effects for cartoon avatar
Help users to learn how to draw human bodies
An ofﬂine bible learning app with texts and audios
Music platform for hiphop mixtapes and musics
Helping users to learn drawing different things
(cid:2)
(cid:2)
(cid:2)

(cid:2)



(cid:2)

(cid:2)




(cid:2)
(cid:2)


(cid:2)

(cid:2)

(cid:2)
(cid:2)

(cid:2)


(cid:2)
User Photos
User Photos
User Photos; Posted Pictures
User Uploaded Pictures
User Photos
User Backups
Premium Plug-ins
User Uploaded Pictures & Videos
User Voice Messages
User Uploaded Pictures & Videos
User Photos; Posted Pictures
User Photos
User Uploaded Pictures
Conﬁgurations about the Game
User Photos; Chat History
Coins Images
User Uploaded Pictures
Driver Photos
Inspection Videos
Device Info (IMEI, etc.)
User Info (); User Private Messages
Music Details
User Info (); Transactions
User Info ()
User Info (); Quiz Data
User Info (); User Pictures
User Info (); User Pictures
User Info ()
User Info (); Play List
User Info (); User Pictures
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)

(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)

(cid:2)

(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)

(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
Table VIII: The Detailed Study of the Top-10 Vulnerable Apps from Each Cloud Category. Note that symbol  denotes the user
name,  the user ID,  the user email, and  the user token.
likely it is obfuscated. We believe this is because developers
of these apps are more likely to have a better security mindset.
However, even though the apps might have been obfus-
cated, we can still detect their data leakage vulnerabilities.
(In fact, many of the top apps detected as vulnerable are
obfuscated, as shown in Table VII). This is because our key
techniques are obfuscation-resilient and regardless whether an
app is obfuscated or not, we are still able to resolve the vast
majority of the strings of our interest, as shown in the 7th and
11th column of Table V. Therefore, obfuscation does not help
developers defeat data leakage attacks; they must implement
proper authentication and authorization in order to prevent
these attacks.
False Positive Analysis. LeakScope ﬁrst uses static analysis to
identify strings of interest (e.g., various keys used by the app),
and then uses dynamic analysis to conﬁrm the data leaks by
inspecting the responses to our leakage-probing requests. There
are no false positives in determining whether the data stored
in the cloud can be leaked. That is, for all the vulnerable apps
we detected, their servers are subject to data leakage attacks.
However,
there might be cases in which developers may
deliberately leave their data open. To really decide whether
LeakScope has any false positives in this regard, we must look
at the data itself. If the corresponding leaked data is not privacy
sensitive, then it is a false positive.
To this end, we manually registered a user account from
the app with the corresponding cloud server, and we reverse
engineered both the app code and the network trafﬁc to
understand whether the data stored in the cloud is privacy
sensitive or not. We could not conﬁrm this with all of the apps
data due to our limited man power and also the grand challenge
of reverse engineering the obfuscated apps, so instead we only
focused on the top 10 most popular vulnerable apps in which
we have the best understanding from each of the tested clouds.
1306
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:50 UTC from IEEE Xplore.  Restrictions apply. 
The detailed report for each of these apps and the data that
can be leaked is reported in Table VIII. Note that we would
like to keep the app name anonymized since not all of them
have been patched yet, and therefore we only report the name
of the app (the 2nd column) shown in the Google Play if its
vulnerabilities has been patched (as of May 2018, there are
two apps whose servers have been patched.), followed by the
app description and functionality (the 3rd column), whether
this app has been obfuscated (the 4th column), the speciﬁc data
that can be leaked from the cloud server for this particular app
(the 5th column), and ﬁnally whether these data are privacy
sensitive (the last column).
For the top 10 vulnerable apps that have used AWS, we
notice that many of them store user photos: either user avatars
or the photos taken by the users. There are also some other
ﬁles such as videos and conﬁgurations. Interestingly, there are
two news apps that use AWS for storage (but the news content
is not stored in AWS). In particular, they allow users to report
news such as a witnessed accident and in the meantime allow
users to attach pictures or videos about the reported news.
Clearly, an attacker could easily grab these ﬁles. We also
have to stress that an attacker can tamper with the integrity of
the ﬁles stored in AWS as well. We have similar observations
for the vulnerable apps that use Azure. Most of the data
are privacy sensitive, such as user photos, chat history, and
videos. For instance, the 9th app, a car insurance related app,
allows the users to take and upload a video for car inspection.
We believe these ﬁles clearly should be protected.
Unlike AWS and Azure, which are mainly used by apps
for storage, Firebase is a database that contains a variety of
data records. As reported in the 5th column of Table VIII,
we summarize those data records according to their category
such as user name, user ID, and user email. While most of the
data are privacy sensitive, we notice there is one app that only
stores music related data in the database. In particular, the 2nd
app, a music related app, allows users to guess the information
of songs. All the data in its database are related to the music,
such as music ID, music download URL, and the singer. While
it does not contain any privacy sensitive data, anyone could
obtain the entire database with a single HTTPS request. We
believe this is not what the developers have intended (e.g., a
competitor could easily build a similar system with these data).
In summary, what LeakScope can automatically discover
is the cases in which the data stored in the cloud back-end can
be leaked. To really determine whether LeakScope has any
false positives, both end-users and service providers would
need to classify whether the data is of importance to them
and is privacy sensitive or not. Currently, we do not have an
automatic technique, though our manual classiﬁcation with
30 vulnerable apps has shown that 86.7% of these apps’ data
is indeed privacy sensitive.
VII. DISCUSSION
Our study has uncovered tens of thousands of mobile apps
that contain cloud data leakage vulnerabilities. Altogether,
these apps have accumulated downloads of between 4 billion
and 14 billion. As such, it is a very serious security problem. In
this section, we discuss further why such vulnerabilities exist
and the countermeasures (§VII-A), the limitations and future
work (§VII-B), and ﬁnally how we handled ethics during our
study (§VII-C).
A. Root Causes and Countermeasures
There are many reasons for the data leaks in the cloud.
The ﬁrst one is “security through obscurity”. Developers may
believe that no one could ﬁnd their (root) keys. But unfor-
tunately, with simple reverse engineering of the (obfuscated)
mobile apps, an adversary can easily extract various keys and
directly use them to communicate with the server. The second
reason is the lack of security training when using the SDK. For
instance, it is an absolute security disaster to use a root key to
communicate with the server. It is also a huge mistake to not
validate the user’s identity when accessing particular resources.
In response, providing security training to developers is
an immediate step to alleviate this problem. Cloud providers
should clearly document various mistakes that developers
could make and their consequences in their manuals, and most
importantly provide the correct way (not the wrong way) to
use the keys. In fact, very surprisingly, we discovered that
an ofﬁcial example from Azure documentation had actually
misused the root keys (instead of using the SAS keys) to com-
municate with the cloud back-end from the mobile apps. This
also explains why there are so many key misuses in Azure.
More importantly, cloud providers should also offer better
security tools and SDKs to help developers. For instance, the
SDK should perform type checks, and the cloud back-end
should also reject the incorrect use of the keys. The SDK
should also make the security policy speciﬁcation easier, espe-
cially for Google Firebase, where more templates or GUI inter-
faces could have been provided to make it easier for developers
to follow. Finally, cloud providers could also develop security
tools to detect data leaks (e.g., by checking for insecure access
control policies in the cloud back-end periodically).
B. Limitations and Future Work
While LeakScope has detected many data leakage vulner-
abilities in the cloud back-end from mobile apps, clearly it
is not perfect and has many limitations. First, it has false
negatives. This is because the detection of the vulnerability
is based on the APIs listed in Table III. If there are any other
APIs that also involve app or developer credentials in their
parameters, LeakScope will have missed the identiﬁcation of
these strings. For one of our future efforts, we would like to
focus on on more systematically examining all of the APIs
from cloud provider SDKs.
Second, our String Value Analysis does not recognize dy-
namically generated values, e.g., those received from remote
servers, since we use static analysis without actually execut-
ing the apps. For instance, there are 404 apps from which
LeakScope has failed to extract strings of our interest. Note
that this also contributes to the false negatives. To handle these
apps, we plan to use dynamic analysis to run the apps, hook the
APIs of our interest, and extract the corresponding parameters.
This is another future work of ours.
Third, due to ethics considerations (§VII-C), we only
validated the data leakage vulnerabilities with our best efforts.
For instance, we only identiﬁed 9, 023 no permission check
vulnerabilities in Firebase. In fact, this is because we could
only automatically register users with only 13, 506 out of the
101, 380 apps that used Firebase in our dataset. We should
be able to identify more vulnerabilities if there are any other
approaches to bypass the authentication for the remaining
87, 874 apps, or if there is collaboration from the cloud
1307
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:50 UTC from IEEE Xplore.  Restrictions apply. 
providers. Increasing the coverage of our analysis is the 3rd
avenue for our future work.
Finally, LeakScope only focuses on the apps that use cloud
APIs to develop the mobile apps. Clearly, there is a signiﬁcant
portion of the apps that have directly used other types of
cloud services (e.g., the IaaS cloud) in their back-end. How
to identify these apps and their vulnerable cloud services in a
principled manner, as LeakScope has achieved for mBaaS, is
another avenue for our future work.
C. Ethics
Since our work aims to identify data leakage vulnerabilities
in the cloud, we had to ensure that our research would not
directly leak any of the customer data. As described in §V-C,
we took the ethics into consideration and designed a zero-data-
leakage vulnerability identiﬁcation approach by considering
how the server would respond to a client request based on
different user roles. Though this approach has limited the
number of vulnerabilities we could identify, it is secure with
respect to the customer data.
Moreover, we have made responsible disclosure to each of
the cloud providers, and through them can reach the mobile
app developers. All of the cloud providers are actively working
on addressing the issues we reported. For instance, we have
learned from Google that they have immediately warned the
vulnerable Firebase users and are monitoring the vulnerability
patching process, especially for the super popular apps (w/
between 100 and 500 million users).
Furthermore, over the past a few months, we have also
been engaging with the cloud providers on how to detect,
mitigate, and prevent these data leakage vulnerabilities. More
importantly, as part of the consequences of our research,
Google has planned to provide more developer-friendly SDKs
when conﬁguring the user permissions for authorization. Azure
has corrected its documentation on how to use the right keys
to communicate with the cloud in its recent git commits [8].
VIII. RELATED WORK
Identiﬁcation with Mobile
Vulnerability
Systems.
Developing mobile apps is similar to developing traditional
software in which developers could have made mistakes,
thereby leading to various security vulnerabilities. Over the
past many years, signiﬁcant efforts have focused on identifying
various vulnerabilities from mobile apps. Early efforts focused
on identifying privacy leakage, since a user’s GPS coordinates,
address book, etc., can be accidentally leaked. TaintDroid [28],
PiOS [27], and AndroidLeaks [29] are examples of these
efforts. They leveraged either dynamic analysis to track
whether sensitive information (e.g., the address book) can be
leaked, or static analysis to identify leakage.
In addition to privacy leaks from mobile apps, there are
also other security vulnerabilities. For instance, component
hijacking vulnerabilities [32] allow an attacker to hijack the
ﬂow and perform unauthorized read and write operations, code
injection vulnerabilities [30] enable an attacker to inject mali-
cious Javascript code into mobile apps, and hanging attribute
references vulnerabilities [21] allow a malicious app to acquire