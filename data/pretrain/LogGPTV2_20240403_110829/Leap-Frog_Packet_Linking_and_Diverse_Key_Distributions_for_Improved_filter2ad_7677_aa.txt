title:Leap-Frog Packet Linking and Diverse Key Distributions for Improved
Integrity in Network Broadcasts
author:Michael T. Goodrich
Leap-Frog Packet Linking and Diverse Key Distributions for
Improved Integrity in Network Broadcasts
MICHAEL T. GOODRICH
Dept. of Computer Science
University of California, Irvine
Irvine, CA 92697-3425
goodrich (at) ieee.org
Abstract
We present two new approaches to improving the in-
tegrity of network broadcasts and multicasts with low stor-
age and computation overhead. The ﬁrst approach is a leap-
frog linking protocol for securing the integrity of packets
as they traverse a network during a broadcast, such as in
the setup phase for link-state routing. This technique al-
lows each router to gain conﬁdence about the integrity of
a packet before passing it on to the next router; hence, al-
lows many integrity violations to be stopped immediately
in their tracks. The second approach is a novel key pre-
distribution scheme that we use in conjunction with a small
number of hashed message authentication codes (HMACs),
which allows end-to-end integrity checking as well as im-
proved hop-by-hop integrity checking. Our schemes are
suited to environments, such as in ad hoc and overlay net-
works, where routers can share only a small number of sym-
metric keys. Moreover, our protocols do not use encryption
(which, of course, can be added as an optional security en-
hancement). Instead, security is based strictly on the use of
one-way hash functions; hence, our algorithms are consid-
erably faster than those based on traditional public-key sig-
nature schemes. This improvement in speed comes with only
modest reductions in the security for broadcasting, as our
schemes can tolerate small numbers of malicious routers,
provided they don’t form signiﬁcant cooperating coalitions.
1 Introduction
The integrity of messages in network broadcasts and
multicasts is an essential component of communication, as
false or modiﬁed packets contribute to congestion and net-
work overhead. Moreover, falsiﬁed packets can be used in
denial-of-service attacks or network infrastructure attacks.
In ad hoc networks, for example, manufactured false broad-
casts can be used to run down the batteries of devices being
used as routers. In addition, the network infrastructure it-
self is vulnerable to falsiﬁed broadcasts, as the algorithms
that form the basis of most routing protocols, such as OSPF
and BGP, use broadcasts as a primitive (e.g., see [15, 25]).
Indeed, some of these algorithms have been compromised
by routers that did not follow the respective protocols cor-
rectly. Fortunately, network malfunctions resulting from
faulty routers have to date been shown to be the result of
misconﬁgured routers, not malicious attacks. Nevertheless,
these failures show the feasibility of malicious broadcast or
multicast attacks, for they demonstrate that compromising
a single router can undermine the performance of an entire
network.
We are therefore interested in studying ways of improv-
ing the integrity of packets in network broadcasts and mul-
ticasts where routers can store a small number of keys and
can perform a limited number of computations using those
keys. Here we use the term “router” fairly loosely to refer to
any device that receives and forwards packets in a network
broadcast or multicast, even if this routing takes place at the
application layer. Such a network could be an autonomous
system on the Internet, an ad hoc network, or an overlay net-
work used for multicasting or peer-to-peer applications. In
many of these applications, the routers are potentially low-
computation devices or have limited computing resources
that they can devote to routing packets. Thus, we desire
solutions that are efﬁcient. Indeed, we would like to limit
the security computations that routers make for achieving
integrity to use only the fastest of cryptographic primitives,
such as one-way hash functions. We are not explicitly re-
quiring that we also achieve conﬁdentiality for the broadcast
messages, however, since in many applications integrity is
more important than conﬁdentiality.
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
1.1 Prior Related Work
Network broadcast security was ﬁrst studied in the sem-
inal work of Perlman [24] (see also [25]), who studied
ﬂooding algorithms that are resilient to faulty routers. Her
schemes are based on using a public-key infrastructure
where each router x is given a public-key/private-key pair
and must sign each message that originates from x. Like-
wise, in her schemes, any router y that wants to authen-
ticate a message M checks the signature of the router x
that originated it. Such a signature-based approach is sufﬁ-
cient, therefore, to achieve integrity in a broadcast or mul-
ticast algorithm. Even so, several researchers have com-
mented that, from a practical point of view, requiring full
public-key signatures on all broadcast messages is probably
not efﬁcient, particularly for environments where routers
are low-computation devices. Signing and checking signa-
tures are expensive operations when compared to the sim-
ple table lookups and computations performed in the well-
known routing algorithms. Nevertheless, there has been
considerable previous work discussing the details of pro-
tocols that would implement integrity through the use of
digital signatures, including work by Guerrero-Zapata and
Asokan [11], Kent et al. [16], Konh et al. [17], Murphy et
al. [20, 22, 21], Papadimitratos and Haas [23], Sanzgiri et
al. [27], and Smith et al. [29].
Motivated by the desire to create efﬁcient and secure
broadcast or multicast algorithms, several researchers have
designed algorithms that achieve security at computational
costs that are argued to be superior to those of Perlman.
Given that the signature-based design of Perlman is already
highly-secure, this research has used fast cryptographic
tools, such as one-way hash functions, instead of public-
key digital signatures on all messages. Nevertheless, since
there is a natural trade-off between computational speed and
security, this research has also involved the introduction of
additional assumptions about the network or restrictions on
the kinds of network attacks that one is likely to encounter.
The challenge, then, is to create practical and secure broad-
cast algorithms using fast cryptographic tools while limit-
ing the security assumptions needed for these algorithms to
maintain packet integrity.
Cheung [4] shows how to use hash chaining to secure
broadcast algorithms, assuming that the routers have syn-
chronized clocks. His scheme is not timely, however, as
it can only detect attacks long after they have happened.
Hauser, Przygienda, and Tsudik [12] avoid that defect by
using hash chains to instead reveal the status of speciﬁc
links in a link-state algorithm. That is, their protocol is
limited to simple yes-no types of messages.
In addition,
because of the use of hash chains, they also require that the
routers in the network be synchronized. Zhang [33] extends
their protocol for more complex messages, but does so at the
expense of many more hash chains, and his protocol still re-
quires synchronized routers. It is not clear, in fact, whether
his scheme would actually be faster than a full-blown digital
signature approach, as advocated in the early work of Perl-
man. Also of related interest, is work of Bradley et al. [2],
who discuss ways of improving the security of packet deliv-
ery after the routing tables have been built. In addition, Wu
et al. [32] and Vetter et al. [31] discuss some practical and
empirical issues in securing routing algorithms.
Recently, Hu, Perrig, and Johnson [13] show how to use
chains of one-way hash functions to improve the integrity
of the setup packets used to build routing tables for distance
vector and path vector routing. Likewise, Zhu et al. [35]
show how to use one-way hash chains for hop-by-hop au-
thentication. Our ﬁrst approach complements these recent
works, in that we use small sets of one-way hash functions
to improve the integrity of packets as they are being used
for broadcasts.
Since our second scheme involves the use of a novel
randomized key pre-distribution method, previous work on
randomized key pre-distribution is also relevant to the top-
ics of this paper. Eschenauer and Gligor [8] propose a
randomized key pre-distribution scheme based on creating
a large pool of potential keys and having each device (or
router) select a random subset of this pool as its keys. These
keys are used for point-to-point unicast routing by having a
sender use a key known to be shared by the receiver, for
encryption or integrity. Chan et al. [3] improve and ana-
lyze several of the features of the Eschenauer-Gligor ap-
proach for unicast routing algorithms, keeping to the ba-
sic framework of using a single key pool. Zhu et al. [34]
show how improve the key identiﬁcation computation for
these unicast routing schemes by using a pseudo-random
number generator seeded with each node’s ID to choose
the keys from the key pool. Du et al. [7] show how to
combine the Eschenauer-Gligor scheme and a pairwise key-
generation scheme of Blom [1] to allow unicast routing with
guaranteed shared keys between sender-receiver pairs, us-
ing less memory. Likewise, Liu and Ning [18] use a pooled
polynomial-based key distribution scheme to achieve sim-
ilar results. Hwang and Kim [14] study the connectivity
properties of these key-distribution schemes for establish-
ing pairwise secure connections. All of these schemes are
effective for unicast routing, but they are not directly appli-
cable for efﬁcient broadcast or multicast routing.
1.2 Our Results
In this paper we describe two new approaches to improv-
ing the data integrity of broadcast and multicast algorithms
on devices with low storage and computational resources.
After a preliminary setup that involves distributing a set
of small set of secret keys to the routers, our schemes use
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
simple cryptographic hashed message authentication codes
(HMACs) to achieve security.
2 Leap-Frog Packet Linking
Our ﬁrst approach involves the use of a technique we call
leap-frog linking between hops of a packet as it is routed,
for it allows parties in a broadcast tree to authenticate
messages between every other member in a path from the
source. This scheme achieves data integrity using hashed
message authentication codes (HMACs) in broadcast mes-
sages under the assumption that there are no two adjacent
malicious routers that are colluding with each other. Such
a strategy would even be effective, for example, for broad-
casts and multicasts in peer-to-peer networks, which are no-
toriously insecure but are likely to experience few collusion
attacks. Our algorithms allow a router to receive messages
from an untrusted neighbor in such a way that the neighbor
cannot modify the message contents without being detected.
The number of keys used per router in this scheme is at most
its network degree, which is the minimum storage need per
device just to route messages.
The second approach is a diverse key distribution
scheme that uses a small number of keys per device and
HMACs to achieve end-to-end integrity checking as well as
improved hop-by-hop integrity checking for network broad-
casts and multicasts. The main idea of this approach is to
distribute L keys to each router in a diverse way, so that the
intersection of the sets of keys between two routers is nei-
ther too small nor too big (we make this notion more formal
in the paper). This approach differs from previous random-
ized key pre-distribution schemes [3, 7, 8], in that it is based
on the use of L sets of colored keys, with devices picking
one color from each set, rather than a large pool of similar
keys from which devices choose a subset. We show that our
distribution scheme can in fact be done using only a loga-
rithmic or fewer number of keys. Such a distribution allows
a ﬁltering scheme, whereby routers can be conﬁdent of the
data integrity of packets, subject to the (stronger) assump-
tion that at most Ω(log L) malicious routers are colluding
with each other to spoof this ﬁltering scheme. It also guar-
antees that even though we are using only a small number
of keys for authentication, every node in a broadcast or mul-
ticast will be guaranteed to be able to share a key with the
sender (in fact, they will share several keys).
Our protocols do not use encryption (which, of course,
can be added as an optional security enhancement); the
only cryptographic primitive utilized is the use of one-
way hash functions in hashed message authentication codes
(HMACs). This usage allows our algorithms to be consid-
erably faster than those based on traditional public-key sig-
nature schemes.
We begin by discussing a low-cost way of making broad-
cast ﬂooding and multicast routing more secure. Our
method involves the use of a novel “leap frog” message-
authenticating scheme.
2.1 The Network Framework
Let G = (V, E) be a network whose vertices in V are
considered as routers and whose edges in E are connec-
tions between these routers. We assume that the routers
have some convenient addressing mechanism that allows
us without loss of generality to assume that the routers are
numbered 1 to n. We assume the network allows for the
routing or ﬂooding of messages. We also assume (for the
basic leap-frog scheme) that the network topology is static.
For completeness, let us brieﬂy review the broadcast
ﬂooding algorithm, so that we can identify how data in-
tegrity plays an important role in its correctness. The ﬂood-
ing algorithm is initiated by some router s creating a mes-
sage M that it wishes to send to every other router in G. The
typical way the ﬂooding algorithm is implemented is that s
incrementally assigns sequence numbers to the messages it
sends. So that if the previous message that s sent had se-
quence number j, then the message M is sent with sequence
number j + 1 and an identiﬁcation of the message source,
that is, as the message (s, j + 1, M ). Likewise, every router
x in G maintains a cache Sx that stores the largest sequence
number encountered so far from each recently-encountered
broadcast source router in G. Thus, any time a router x re-
ceives a message (s, j +1, M ) from an adjacent router y the
router x ﬁrst checks if Sx[s] < j + 1. If so, then x assigns
Sx[s] = j + 1 and x sends the message (s, j + 1, M ) to all
of its adjacent routers, except for y. If the test fails, how-
ever, then x assumes it has handled this message before and
it discards the message.
If all routers perform their respective tasks correctly, then
the ﬂooding algorithm will send the message M to all the
nodes in G. Indeed, if the communication steps are syn-
chronized and done in parallel, then the message M propa-
gates out from s in a breadth-ﬁrst fashion.
If the security of one or more routers is compromised,
however, then the ﬂooding algorithm can be successfully
attacked. For example, a router t could spoof the router s
and send its own message (s, j + 1, M (cid:1)). If this message
reaches a router x before the correct message, then x will
propagate this imposter message and throw away the correct
one when it ﬁnally arrives. Likewise, a corrupted router can
modify the message itself, the source identiﬁcation, and/or
the sequence number of the full message in transit. Each
such modiﬁcation has its own obvious bad effects on the
network. For example, incrementing the sequence number
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
to j + m for some large number m will effectively block the
next m messages from s. Indeed, such failures have been
documented (e.g., [32, 31]), although many such failures
can be considered router misconﬁgurations not malicious
intent. Of course, from the standpoint of the source router s
the effect is the same independent of any malicious intent—
all ﬂooding attempts will fail until s completes m attempted
ﬂooding messages or s sends a sequence number reset com-
mand (but note that the existence of unauthenticated reset
commands itself presents the possibility for abuse).
2.2 The Basic Leap-Frog Protocol
One possible way of avoiding the possible failures that
compromised or misconﬁgured routers can inﬂict on a
ﬂooding algorithm is to take advantage of a public-key in-
frastructure deﬁned for the routers. In this case, we would
have s digitally sign every ﬂooding message it transmits,
and have every router authenticate a message before send-
ing it on [24, 25]. Unfortunately, this approach is more com-