1
APISIX CVE-OLOO-OXOTT 漏洞分析与复现
漏洞描述
影响版本
前要介绍
APISIX
JWT
漏洞分析
环境搭建
漏洞复现
漏洞代码修复
修复⽅案
总结
CVE-2022-29266 这个漏洞已经出现有些时间了，正好现在有时间，⽹上也出现了不少分析⽂章，今
天来看看这个漏洞。 
在 2.13.1 之前的 Apache APISIX 中，由于 APISIX 中的 jwt-auth 插件依赖于 lua-resty-jwt 库，⽽在 
lua-resty-jwt 库返回的错误信息中可能会包含 JWT 的 sceret 值，因此对于开启了 jwt-auth 插件的 
APISIX 存在 JWT sceret 的泄露，从⽽造成对 JWT 的伪造⻛险。 
低于 2.13.1 的 Apache APISIX 全部版本。 
Apache APISIX 是⼀个由 Apache 基⾦会孵化的⼀个开源的云原⽣ API ⽹关，具有⾼性能、可扩展的特
点，与传统的 API ⽹关相⽐，APISIX 是通过插件的形式来提供负载均衡、⽇志记录、身份鉴权、流量控
制等功能。 
漏洞描述 
影响版本 
前要介绍 
APISIX 
2
JSON Web Token 缩写成 JWT，常被⽤于和服务器的认证场景中，这⼀点有点类似于 Cookie ⾥的 
Session id 
JWT ⽀持 HS256、RS256、RS512 等等算法，JWT 由三部分构成，分别为 Header（头部）、
Payload（负载）、Signature（签名），三者以⼩数点分割。 
JWT 的第三部分 Signature 是对 Header 和 Payload 部分的签名，起到防⽌数据篡改的作⽤，如果知道
了 Signature 内容，那么就可以伪造 JWT 了。 
JWT 的格式类似于这样： 
实际遇到的 JWT ⼀般是这种样⼦ 
⾸先根据官⽅仓库的漏洞修复代码定位到 /apisix/plugins/jwt-auth.lua ⽂件的第 364 ⾏，如果 JWT ⽆
效则在 return 返回 401 并给出⽆效的原因，即 jwt_obj.reason
JWT 
漏洞分析 
Plain Text
复制代码
Header.Payload.Signature
1
Plain Text
复制代码
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6
IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV
_adQssw5c
1
3
接着在 lua-resty-jwt 库中找到 lib/resty/jwt.lua ⽂件，在 jwt.lua ⽂件的 782 ⾏中，可以看到有个 
jwt_obj.reason 中包含了 secret，这⾥代码的意思是说，如果程序执⾏正常就返回 secret 的值，否则
就返回具体的异常信息。 
那么接下来要做的就是怎么样构建 payload 才能让代码进⼊到第 782 ⾏，从⽽让 jwt_obj.reason 返回
我们想要的 secret 呢？那么就要看看 782 ⾏上⾯的代码。 
.. 表示字符串拼接，即把后⾯代码的值拼接到字符串中
err and err or secret 所表示的意思是：如果 err 为 nil，则返回 secret 的值，否则返回 err
4
通过上图可以看到，如果想执⾏到第 782 ⾏，需要满⾜四个条件，分别如下： 
756 ⾏，JWT 的算法需要是 RS256 或者 RS512 
758 ⾏，trusted_certs_file 值需要为 nil 
774 ⾏，secret 值不能为 nil 
781 ⾏，cert 的值需要为 nil 或者 false 
⾸先，第⼀个条件，JWT 的算法需要是 RS256 或者 RS512，这个很简单，只需要 JWT 的 header 部分
的 alg 参数为 RS256 或者 RS512 即可。 
接着，第⼆个条件，trusted_certs_file 即信任证书⽂件，APISIX 默认算法是 HS256，⽽ HS256 和 
HS512 不⽀持这种证书⽂件的⽅式，因此只要我们使⽤ HS256  或者 HS512 算法就⾏了。 
●
●
●
●
~= 表示不等于 
5
然后，第三个条件，secret 值不能为 nil，当 APISIX 使⽤ jwt-auth 插件的时候，如果使⽤的默认算
法，就需要指定 secret 的值，那么这个 secret 的值就不会是 nil 了。 
最后，第四个条件，cert 的值需要为 nil 或者 false，在 776 ⾏⾄ 779 ⾏的代码中，可以看到会判断 
secret 中有没有 CERTIFICATE 和 PUBLIC KEY，如果有那么 cert 就不会是 nil 了，那么也就是说，只
要 secret 中没有 CERTIFICATE 和 PUBLIC KEY，代码就会执⾏到第 782 ⾏，并且返回 secret 的值。 
所以分析到这⾥就基本清楚了，漏洞利⽤的前提有以下三个： 
APISIX 需要开启 jwt-auth 插件 
jwt-auth 插件算法需要是 HS256 或者 HS512 
secret 的值中不能包含 CERTIFICATE 和 PUBLIC KEY 字符串 
如果满⾜了这三个前提，当我们利⽤ RS256 或者 RS512 的 JWT 值发送给 APISIX 的时候，我们就会得
到 jwt-auth 中的 secret，从⽽实现 JWT 伪造了。 
那么下⾯就开始搭环境，复现，顺便验证下漏洞分析的正确性。 
在 VulnHub 上有 APISIX CVE-2020-13945 漏洞的靶场，APISIX 版本为 2.11.0，因此我们可以直接⽤
这个靶场作为 CVE-2022-29266 的靶场进⾏复现。 
环境搭建命令： 
访问 http://your-ip:9080 地址即可 
⾸先需要⼀个 RS256 算法的 JWT 值，这⾥为了⽅便直接在 jwt.io 中⽣成，只需要将算法改为 RS256，
Payload 改为以下内容即可，注意 Payload 中的 key 值需要和下⾯创建 consumer 对象时的 key ⼀致。 
●
●
●
环境搭建 
漏洞复现 
Plain Text
复制代码
git clone https://github.com/vulhub/vulhub.git
cd vulhub/apisix/CVE-2020-13945
docker-compose up -d
1
2
3
6
⽣成的 JWT 值如下： 
Plain Text
复制代码
{"key": "rs-key"}
1
7
接着创建⼀个 consumer 对象，并设置 jwt-auth 的值，默认是 HS256 算法，secret  值为 teamssix-
secret-key 
然后再创建 Route 对象，并开启 jwt-auth 插件 
Plain Text
复制代码
eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJycy1rZXkifQ.mF27BBWlXPb3f
TiFufhcL3K9y99b8kioMmp7eMwRhB1kZjK62aJ_R6SB0A_Kmym8a7U2S3zYLue9mkD4FGGmhw
mkmUGppjZdtwfxrZc7JvvdpJbihNGxdfn9ywUspr6DX831e29VAy1DnLT6cU8do_9MFklxrRb
hTVpDOsOADEhh6Q5zdTKPz3h5pKHSQYO4y5Xd0bmRM7TqRvhfIRchmvroaJBQjP6TrDrN_x2e
lRpPsuabYmCNH_G7m6x5ouf0bqoOkOmsk3alJ6zNZFDY6-aTS4vDD8SDlSbAXkCh5DN-
C10YQ6ZYWUGmcbap7hQhaIVJRlZRtaXMFbmabLwhgg
1
Plain Text
复制代码
curl http://127.0.0.1:9080/apisix/admin/consumers -H 'X-API-KEY: 
edd1c9f034335f136f87ad84b625c8f1' -X PUT -d '
{
"username": "jack",
"plugins": {
"jwt-auth": {
"key": "rs-key",
"secret": "teamssix-secret-key"
}
}
}'
1
2
3
4
5
6
7
8
9
10
8
这时其实漏洞环境才算搭好，接下来就可以开始发送 Payload 了 
将刚才由 RS256 算法⽣成的 JWT 值发送给 HS256 算法验证的路由，这样就可以获得刚才设置的 
secret 值了。 
Plain Text
复制代码
curl http://127.0.0.1:9080/apisix/admin/routes/1 -H 'X-API-KEY: 
edd1c9f034335f136f87ad84b625c8f1' -X PUT -d '
{
"methods": ["GET"],
"uri": "/index.html",
"plugins": {
"jwt-auth": {}
},