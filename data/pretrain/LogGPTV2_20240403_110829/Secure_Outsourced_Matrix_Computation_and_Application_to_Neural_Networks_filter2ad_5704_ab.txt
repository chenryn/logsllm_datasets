2: for (cid:96) = 1 to n − 1 do
3:
4: end for
5: return ct(cid:48)
ct(cid:48) ← Add(ct(cid:48), CMult(Rot(ct; (cid:96)); u(cid:96)))
As shown in Algorithm 1, the computational cost of matrix-vector multiplication is about n additions,
constant multiplications, and rotations. Note that rotation operation needs to perform a key-switching
operation and thus is comparably expensive than the other two operations. So we can say that the
complexity is asymptotically O(n) rotations. It can be reduced when the number of nonzero diagonal
vectors of U is relatively small.
3 Secure Matrix Multiplication via Homomorphic Encryption
In this section, we propose a simple encoding method to convert a matrix into a plaintext vector in a
SIMD environment. Based on this encoding method, we devise an eﬃcient algorithm to carry out basic
matrix operations over encryption.
3.1 Permutations for Matrix Multiplication
We propose an HE-friendly expression of the matrix multiplication operation. For a d × d square matrix
A = (Ai,j)0≤i,j<d, we ﬁrst deﬁne useful permutations σ, τ , φ, and ψ on the set Rd×d. For simplicity, we
identify Z ∩ [0, d) as a representative of Zd and write [i]d to denote the reduction of an integer i modulo
d into that interval. All the indexes will be considered as integers modulo d.
• σ(A)i,j = Ai,i+j.
• τ (A)i,j = Ai+j,j.
• φ(A)i,j = Ai,j+1.
• ψ(A)i,j = Ai+1,j.
Note that φ and ψ represent the column and row shifting functions, respectively. Then for two square
matrices A and B of order d, we can express their matrix product AB as follows:
d−1(cid:88)
(cid:0)φk ◦ σ(A)(cid:1) (cid:12)(cid:0)ψk ◦ τ (B)(cid:1) ,
A · B =
k=0
5
(2)
where (cid:12) denotes the component-wise multiplication between matrices. The correctness is shown in the
following equality by computing the matrix component of the index (i, j):
(cid:0)φk ◦ σ(A)(cid:1)
i,j ·(cid:0)ψk ◦ τ (B)(cid:1)
d−1(cid:88)
k=0
k=0
d−1(cid:88)
d−1(cid:88)
d−1(cid:88)
k=0
i,j =
=
σ(A)i,j+k · τ (B)i+k,j
Ai,i+j+k · Bi+j+k,j
Ai,k · Bk,j
=
= (A · B)i,j.
k=0
Since Equation (2) consists of permutations on matrix entries and the Hadamard multiplication opera-
tions, we can eﬃciently evaluate it using an HE system with ciphertext packing method.
3.2 Matrix Encoding Method
We propose a row ordering encoding map to transform a vector of dimension n = d2 into a matrix in
Rd×d. For a vector a = (ak)0≤k<n, we deﬁne the encoding map ι : Rn → Rd×d by
ι : a (cid:55)→ A = (ad·i+j)0≤i,j<d,
i.e., a is the concatenation of row vectors of A. It is clear that ι(·) is an isomorphism between additive
groups, which implies that matrix addition can be securely computed using homomorphic addition in a
SIMD manner. In addition, one can perform multiplication by scalars by adapting a constant multiplica-
tion of an HE scheme. Throughout this paper, we identify two spaces Rn and Rd×d with respect to the
ι(·), so a ciphertext will be called an encryption of A if it encrypts the plaintext vector a = ι−1(A).
3.3 Matrix Multiplication on Packed Ciphertexts
An arbitrary permutation operation on Rd×d can be understood as a linear transformation L : Rn → Rn
such that n = d2. In general, its matrix representation U ∈ {0, 1}n×n ⊆ Rn×n has n number of nonzero
diagonal vectors. So if we directly evaluate the permutations A (cid:55)→ φk ◦ σ(A) and B (cid:55)→ ψk ◦ τ (B) for
1 ≤ k < d, each of them requires O(d2) homomorphic operations and thus the total complexity is
O(d3). We provide an eﬃcient algorithm to perform the matrix multiplication on packed ciphertexts by
combining Equation (2) and our matrix encoding map.
3.3.1 Tweaks of Permutations
We focus on the following four permutations σ, τ , φ, and ψ described above. We let U σ, U τ , V , and W
denote the matrix representations corresponding to these permutations, respectively. Firstly, the matrix
representations U σ and U τ of σ and τ are expressed as follows:
(cid:40)
(cid:40)
1
0
U σ
d·i+j,(cid:96) =
U τ
d·i+j,(cid:96) =
if (cid:96) = d · i + [i + j]d;
otherwise;
1
0
if (cid:96) = d · [i + j]d + j;
otherwise,
6
for 0 ≤ i, j < d and 0 ≤ (cid:96) < d2. Similarly, for 1 ≤ k < d, the matrix representations of φk and ψk can be
computed as follows:
(cid:40)
(cid:40)
1
0
V k
d·i+j,(cid:96) =
W k
d·i+j,(cid:96) =
if (cid:96) = d · i + [j + k]d;
otherwise;
if (cid:96) = d · [i + k]d + j;
otherwise,
1
0
for 0 ≤ i, j < d and 0 ≤ (cid:96) < d2.
As described in Equation (1), we employ the diagonal decomposition of the matrix representations
for multiplications with encrypted vectors. Let us count the number of diagonal vectors to estimate the
complexity. We use the same notation u(cid:96) to write the (cid:96)-th diagonal vector of a matrix U . For simplicity,
we identify ud2−(cid:96) with u−(cid:96). The matrix U σ has exactly (2d − 1) number of nonzero diagonal vectors,
k for k ∈ Z ∩ (−d, d). The (cid:96)-th diagonal vector of U τ is nonzero if and only if (cid:96) is divisible
denoted by uσ
by the integer d, so U τ has d nonzero diagonal vectors. For any 1 ≤ k < d, the matrix V k has two
nonzero diagonal vectors vk and vk−d. Similarly, the matrix W k has the only nonzero diagonal vector
wd·k. Therefore, homomorphic evaluations of the permutations σ and τ require O(d) rotations while it
takes O(1) rotations to compute ψk or φk for any 1 ≤ k < d.
3.3.2 Homomorphic Matrix Multiplication
Suppose that we are given two ciphertexts ct.A and ct.B that encrypt matrices A and B of size d ×
d, respectively. In the following, we describe an eﬃcient evaluation strategy for homomorphic matrix
multiplication.
Step 1-1: This step performs the linear transformation U σ on the input ciphertext ct.A. As mentioned
above, the matrix U σ is a sparse matrix with (2d − 1) number of nonzero diagonal vectors uσ
k for
k ∈ Z ∩ (−d, d), so we can represent the linear transformation as
U σ · a =
k (cid:12) ρ(a; k))
(uσ
(3)
(cid:88)
−d<k<d
where a = ι−1(A) ∈ Rn is the vector representation of A. If k ≥ 0, the k-th diagonal vector is computed
by
uσ
k [(cid:96)] =
if 0 ≤ (cid:96) − d · k < (d − k);
otherwise,
(cid:40)
1
0
(cid:40)
1
0
where uσ
k [(cid:96)] denotes the (cid:96)-th component of uσ
k . In the other cases k < 0, it is computed by
if − k ≤ (cid:96) − (d + k) · d < d;
otherwise.
uσ
k [(cid:96)] =
Then Equation (3) can be securely computed as(cid:88)
CMult (Rot(ct.A; k); uσ
k ) ,
−d<k<d
resulting the encryption of the plaintext vector U σ · a, denoted by ct.A(0). Thus, the computational cost
is about 2d additions, constant multiplications, and rotations.
Step 1-2: This step is to evaluate the linear transformation U τ on the input ciphertext ct.B. As described
above, the matrix U τ has d nonzero diagonal vectors so we can express this matrix-vector multiplication
as
U τ · b =
d·k (cid:12) ρ(b; d · k)),
(uτ
(4)
(cid:88)
0≤k<d
7
where b = ι−1(B) and uτ
0 ≤ k < d, the vector uτ
other entries. Then Equation (4) can be securely computed as
d·k is the (d · k)-th diagonal vector of the matrix U τ . We note that for any
d·k contains one in the (k + d · i)-th component for 0 ≤ i < d and zeros in all the
(cid:88)
0≤k<d
CMult (Rot(ct.B; d · k); uτ
d·k) ,
resulting the encryption of the plaintext vector U τ·b, denoted by ct.B(0). The complexity of this procedure
is roughly half of the Step 1-1: d additions, constant multiplications, and rotations.
Step 2: This step securely computes the column and row shifting operations of σ(A) and τ (B), respec-
tively. For 1 ≤ k < d, the column shifting matrix V k has two nonzero diagonal vectors vk and vk−d that
are computed by
(cid:40)
(cid:40)
1
0
if 0 ≤ [(cid:96)]d < (d − k);
otherwise;
if (d − k) ≤ [(cid:96)]d < d;
otherwise.
1
0
vk[(cid:96)] =
vk−d[(cid:96)] =
Then we get an encryption ct.A(k) of the matrix φk ◦ σ(A) by adding two ciphertexts CMult(Rot
(ct.A(0); k); vk) and CMult(Rot(ct.A(0); k − d); vk−d). In the case of the row shifting permutation, the
corresponding matrix W k has exactly one nonzero diagonal vector wd·k whose entries are all one. Thus
we can obtain an encryption of the matrix ψk ◦ τ (B) by computing ct.B(k) ← Rot(ct.B(0); d · k). The
computational cost of this procedure is about d additions, 2d constant multiplications, and 3d rotations.
Step 3: This step computes the Hadamard multiplication between the ciphertexts ct.A(k) and ct.B(k)for
0 ≤ k < d, and ﬁnally aggregates all the resulting ciphertexts. As a result, we get an encryption ct.AB
of the matrix AB. The running time of this step is d homomorphic multiplications and additions.
In summary, we can perform the homomorphic matrix multiplication operation as described in Algo-
rithm 2.
Algorithm 2 Homomorphic matrix multiplication
procedure HE-MatMult(ct.A, ct.B)
[Step 1-1]
1: ct.A(0) ← LinTrans(ct.A; U σ)
[Step 1-2]
2: ct.B(0) ← LinTrans(ct.B; U τ )
[Step 2]
3: for k = 1 to d − 1 do
4:
ct.A(k) ← LinTrans(ct.A(0); V k)
ct.B(k) ← LinTrans(ct.B(0); W k)
5:
6: end for
[Step 3]
7: ct.AB ← Mult(ct.A(0), ct.B(0))
8: for k = 1 to d − 1 do
9:
10: end for
11: return ct.AB
ct.AB ← Add(ct.AB, Mult(ct.A(k), ct.B(k)))
8
3.3.3 Further Improvements
This implementation of matrix multiplication takes about 5d additions, 5d constant multiplications, 6d
rotations, and d multiplications. The complexity of Steps 1-1 and 1-2 can be reduced by applying the
d· i + j for some
idea of baby-step/giant-step algorithm. Given an integer k ∈ (−d, d), we can write k =
−√
d. It follows from [25, 26] that Equation (3) can be expressed as
d and 0 ≤ j <
d < i <
√
√
√
U σ · a =
uσ√
d·i+j
(cid:12) ρ(a;
√
d · i + j)
(cid:17)
(cid:88)
=
−√
√