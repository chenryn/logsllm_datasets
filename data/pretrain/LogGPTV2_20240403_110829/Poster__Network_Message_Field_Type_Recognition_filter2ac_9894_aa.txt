# Poster: Network Message Field Type Recognition

## Authors
- Stephan Kleber, PI: [EMAIL]
- Frank Kargl, PI: [EMAIL]

### Affiliation
Institute of Distributed Systems, Ulm University, Ulm, Germany

## Abstract
Current methods for reverse engineering network protocols based on traffic traces lack comprehensive techniques to determine the data types (e.g., float, timestamp, or addresses) of segments in binary protocol messages. We propose a novel method to analyze unknown protocol messages and identify the data types contained within them. Our approach involves splitting messages into byte segments, interpreting these as vectors of byte values, and using vector analysis to determine similarities and characteristics of specific data types. These insights can be used to classify segments into clusters of the same type and to identify their data type for previously trained data types. Initial evaluations of our method show promising results, with data-type recognition precision up to 100%.

## CCS Concepts
- **Security and Privacy**: Network security
- **Networks**: Protocol testing and verification
- **Computing Methodologies**: Cluster analysis

## ACM Reference Format
Stephan Kleber and Frank Kargl. 2019. Poster: Network Message Field Type Recognition. In 2019 ACM SIGSAC Conference on Computer and Communications Security (CCS '19), November 11–15, 2019, London, United Kingdom. ACM, New York, NY, USA, 3 pages. https://doi.org/10.1145/3319535.3363261

## 1. Introduction
Protocol reverse engineering from traffic traces infers the behavior of unknown network protocols by analyzing observable network messages. This technique is often used to understand malware communication or to validate the correct and secure implementation of network services. Existing approaches either focus on textual protocols, where natural language processing (NLP) techniques like Latent Dirichlet Allocation or Apriori are applicable, or use byte-wise multiple sequence alignment for binary protocols, such as Needleman-Wunsch. While sequence alignment can infer probable field candidates, it does not characterize the content of these fields.

Characterizing the contents of message fields is crucial for determining the data type and understanding the meaning of binary data segments. For example, recognizing a segment as a counter, timestamp, or checksum adds semantic interpretation to the message. Neither NLP-based nor sequence alignment methods provide a way to achieve this level of semantic interpretation, limiting the ability to distinguish between different types of inferred fields beyond binary and textual segments.

Our approach recognizes fine-grained field data types in binary protocols by analyzing segments of network messages. We quantify the similarity of message segments across all messages, which serves as input for classifying groups of similar segments into field data types. This classification is then used to label similar segments from unknown protocols with the corresponding data type.

## 2. Approach
The messages used to train and test our approach are collected from real network protocol traces, which are publicly available. We preprocess each raw trace by filtering for the desired protocol, removing duplicate payloads, and truncating the traces to 1,000 messages each.

For each message, we obtain subsequences using tshark and NEMESYS. These subsequences are treated as atomic segments that approximate protocol fields. Each segment is interpreted as a vector of byte values. We define a dissimilarity measure based on the Canberra distance to calculate a similarity value for each pair of segments. The pairwise dissimilarities are used as affinity values for clustering with DBSCAN, which identifies cores of high density within noisy data. Clusters of similar segments are likely to represent a field data type. We apply this approach in three modes:

### Mode 1: Ground Truth Segments
We generate segments that perfectly represent true fields using tshark dissectors. These segments are labeled with their true data type, also determined from tshark. We cluster these segments and use the ground truth to validate our approach and prepare for the second mode. This mode is only applicable to known protocols with existing tshark dissectors.

### Mode 2: Data-Type Templates
From the clusters in Mode 1, we determine templates of common field data types using ground truth from multiple protocols. These templates represent typical features of a field data type and are generated once for future use. To recognize segments in unknown protocols, we use a sliding window of the template’s byte-length over all message bytes. The Mahalanobis distance quantifies the confidence of whether a subsequence is similar to a learned template. Sufficiently similar subsequences are recognized as new segments and labeled with the matching template's data type.

### Mode 3: Heuristic Segment Generation
This mode is independent of the first two and works even if no known templates match in messages of an unknown protocol. For unknown protocols, we use NEMESYS to generate segments and cluster them similarly to Mode 1. Although the original data type cannot be recognized, our approach groups segments into clusters representing the same kind of data. Further analysis, such as correlation, can reveal the data type.

## 3. Evaluation
We validate our approach for each application mode through cluster visualization and recognition statistics. Figures 1 and 2 visualize the dissimilarity of segments compared to the clustering results, rationalizing the clustering and recognition approaches. The figures show the topology of high-dimensional feature vectors as dissimilarities between segments, represented in a two-dimensional plane using Multi-dimensional Scaling (MDS).

### 3.1 Clustering Ground Truth Segments
As described in Mode 1, we classify segments into clusters of their field type. Figure 1 shows the MDS-plot of the dissimilarity of segments from the NTP analysis. The true field types of each segment are color-coded, visually verifying that segments of the same data type are close in terms of dissimilarity. The plot illustrates that areas of low dissimilarity fit data types and are dense according to DBSCAN’s definition, making this clustering approach applicable.

### 3.2 Recognition Statistics
[Insert recognition statistics and further evaluation details here.]

## Conclusion
Our method for recognizing fine-grained field data types in binary protocols shows promising results, with high precision in data-type recognition. Future work will focus on improving the robustness and scalability of the approach.

## References
[Insert references here.]

---

**Note:** The placeholders [EMAIL], [Insert recognition statistics and further evaluation details here.], and [Insert references here.] should be replaced with the actual content.