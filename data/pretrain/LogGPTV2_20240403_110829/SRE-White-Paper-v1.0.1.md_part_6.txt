误码>500）；但不包括 触 发 频 控 导 致 的 限 流请 求 或 者 制 品库 升级 、 变
更、停机而导致的失败请求。用户请求指的是 制品库服务器端接收
到的用户发送的请求，但不包括未经身份验证、鉴权失败或者欠费
停服状态下的请求。用户端由于黑客攻击而对制品库的请求，或者
由于配置了跨区域复制、生命周期规则而在后端异步执行的请求，
均不视为有效请求或失败请求
（2）下载速度，下载速度=包大小/下载耗时，下载速度和制品
的存储区域分布及用户所在的区域有较大的关系，可针对不同地
域、国家可设置差异化的可用性衡量指标；
3.2.4.2 制品部署可靠性
在制品下载完成后，还有一项重要的下游能力，即制品的自动
化部署，使用户实现对制品产物即时体验的能力；
在大型业务研发过程中，多种研发角色手动安装制品产物非常
耗时，在没有自动化部署的情况下执行诸如软件安装和升级会消耗
大量研发人员的时间和精力，且对迭代的效率有较大的影响；
⽹址：SRE-Elite.com 37 微信：SRE精英联盟
SRE实践白皮书（2023年）
制品部署是指通过技术手段，打通构建流水线，将构建完成的
制品主动推送到用户多种类型终端的过程，用 自动化的方式对制品进行
分发、安装、更新，让用户以较低的时间成本获取到构建产物，减少临
时下载制品对迭代效率的影响，尤其对于具备超大制品的业务类
型，制品部署的可靠性尤为重要；
1．制品部署可用性提升措施
（1）多用途支持：为满足不同的测试验证目的，一个项目往往
会设置多条构建流水线，例如用于逻辑、性能、开发调试等多种不
同类型，制品部署能力需要支持到多种类型；
（2）多平台支持：制品的分类按平台分有 iOS、安卓、 PC、
console 等，每种平台都多种不同类型的 OS 版本和设备型号，碎片
化程度高，预部署能力需要良好的机型兼容适配能力，能够支持多
种不同类型的设备和平台；
2．效果评估
（1）部署成功率，部署成功率=成功部署次数/总分发次数
（2）部署人工耗时，一个完善的预分发方案应该尽量减少用户
等待的时长，通过部署人工耗时指标来驱动减少人工参与；
3.2.4.3 制品安全可靠性
制品在持续构建过程中的包依赖，以及构建完成的产物（含
docker 镜像、npm、helm、maven 等多种不同类型的格式），可能存
在一些安全风险，导致制品不可靠；
1．制品安全性提升措施
⽹址：SRE-Elite.com 38 微信：SRE精英联盟
SRE实践白皮书（2023年）
（1）漏洞扫描，制品需要经过经过漏洞、 license 信息的扫描与
分析，并对漏洞和不合规的 license 告警并输出安全合规报告，漏洞
库需要及时更新；
（2）设置质量红线，禁止下载未经安全扫描或者未通过安全扫
描的制品；
（3）访问控制，针对不同角色设置差异化的权限，防止资源泄
露和，减少恶意盗取制品风险，权限以最小化为原则；
（4）操作审计，提供制品库的操作审计功能，保证制品的下载
使用等操作操作可追溯；
2．效果评估
（1）漏洞扫描覆盖度：扫描能力能够覆盖足够多的制品库类
型；
（2）漏洞扫描速度：漏洞扫描的速度和及时性，能够在漏洞产
生后，以最快的速度发现异常；
（3）漏洞扫描准确性：漏洞库及时更新和维护，确保制品安全
扫描结果的准确性；
（4）访问控制：是否具备精细化权限控制的能力；
（5）审计能力：是否具备良好的审计能力；
3.3 入网控制
3.3.1 运行环境适配
3.3.1.1 运营环境设计
产品在经过了核心概念的提炼，通过对市场分析、确立用户定
⽹址：SRE-Elite.com 39 微信：SRE精英联盟
SRE实践白皮书（2023年）
位、关注用户体验和产品风险等方面后，建立项目筹备小组，在完
成了开发产品原型，验证技术风险，及通过相关评审确定进入量产
阶段以完成产品的全部内容的开发。此时，将进入产品面向用户的
试运营阶段，根据新产品评价体系每月对产品运营数据指标进行评
测和汇报；确定产品质量是否已经达到面向外部玩家的品质；通过
相关评审来后项目组可根据项目实际情况开启正式运营。
通过运营环境的规划与设计，可以根据过往的运营经验形成可
运营规范，帮助项目组和研发规避相同的风险，同时结合运营策略
进行推演正式运营后的情况，以此来提前发现潜在的风险和问题，
便于和运营、研发团队进行评估和优化排期。同时，对于规模化测
试所需人力、用户体验、成本预估、设备及机房选型、网络带宽资
源及周边组件的容量，可用性等进行提前的评估和筹备。鉴于越来
越多的组织采用多云环境，我们在规划过程中特别注重对公有云、
私有云和混合云的供应商进行优劣势分析，同时充分考虑运营环境
与云服务的耦合程度，做出恰当的选择和权衡。
从组织结构上来说，可以成立一个专家组，主要的工作项是横
向提炼各业务在运营阶段中的各种共性问题、解决方案的沉淀和刷
新，确立可运营规范。同时，在业务的关键节点参与技术评审。
对业务支撑团队，在进行运营环境规划与设计时，主要可分为
如下几个步骤：
架构。业务决定量产并分配到支撑团队后，支撑团队需获取
《业务架构说明书》《部署文档》，运营节点（建议近三个月为宜）等
⽹址：SRE-Elite.com 40 微信：SRE精英联盟
SRE实践白皮书（2023年）
必要的业务相关文档从而了解业务架构、各模块功能和通信逻辑、
容灾及技术指标等信息。以传统模式部署还是云原生模式部署，在
这个环节会确定下来。
评审。运维专家及支撑团队组织项目组、研发团队进行可运营
规范、评审标准、版本交付规范等的宣导;深入就业务架构，运营目
标涉及的技术问题进行专项沟通，以此来对业务有个整体了解，梳
理风险及问题。
验证。通过对业务测试环境的搭建，掌握业务搭建方法，并分
析可自动化和改善的点，此阶段非必须建设自动化，因为业务架构
成熟度和交付结构可能会经常变动。同时根据对外测试的的目标选
定部署的机房、机型及合适的网络运营商等环境规划。
对齐。正式运营阶段筹备前根据节点时间进行倒推梳理整体支
撑的检查列表，明确工作项、完成时间、负责人和细节部分，并与
干系人逐一明确对齐，共同完善。和研发、运营共同确定业务稳定
性目标 SLO 及相关的指标 SLI，以及围绕用户体验所需的场景和分
析方式，并做好相关的数据埋点、呈现和监控。对于基线数据提前
做好规划和收集。
迭代。配合业务压测，了解性能瓶颈，并重点进行方案的拟定
和保障实施。根据运营中的问题刷新风险问题列表，并设计解决方
案持续跟进，并在下次产品迭代更新后进行实际效果验证。
3.3.1.2 容器云适配
随着云原生技术的不断发展，容器以及 Kubernetes 等技术的长
⽹址：SRE-Elite.com 41 微信：SRE精英联盟
SRE实践白皮书（2023年）
足发展给企业数字化转型带来了便利。容器技术将软件运行环境打
包成一个“集装箱”，方便在不同环节进行传递；而 Kubernetes 则将
容器的调度和部署标准化，让开发运维人员不再关注资源层面的调
度和容灾。容器云适配则是通过云平台、Kubernetes 和 Docker 等云
原生技术帮助企业降低成本，加快业务迭代，对企业数字化转型提
供强有力的技术支撑。
通过容器云适配可以简化了服务部署等方面的运维管理的复杂
度，让业务团队更加专注于自身核心业务逻辑的开发，从而实现快
速的业务迭代。同时通过虚拟化、资源池化以及弹性调度等技术，
增加资源交互弹性，帮助业务团队不断降低资源成本，因此 SRE 应
推动业务容器云的适配。
改造筹备。筹备相关的内容主要目的是梳理各模块之间的逻辑
以及交互方式，便于针对容器环境进行适应型评估，明确业务架构
与容器环境之间的差距，便于业务进行架构调整。例如按照业务进
程进程本身是否缓存数据，可分为有状态模块和无状态模块，无状
态模块。同时还需要关注进程的服务发现机制，如果业务自己有成
熟的服务注册机制，例如业务自行设计的服务注册中心，那么在容
器化的过程中，优先会有部分模块会落入 Kubernetes集群中。
网络评估。一般情况下，Kubernetes的集群内与集群外是两套独
立的网络，一旦容器化后落入 Kubernetes 集群中，内网访问时网络
链路就会发生变化，也就是 overlay网络。在overlay方案中，我们可
以认为集群中的所有容器，默认都可以通过 IP 地址相互直连。集群
⽹址：SRE-Elite.com 42 微信：SRE精英联盟
SRE实践白皮书（2023年）
内可以主动访问集群外，但是集群外看到的来源 IP 是集群节点的 IP
地址，并不知道容器 IP地址。即使知道容器 IP地址，集群外也不能
直连容器 IP 地址基于这些条件，业务需要评估各模块访问关系，确
认落入集群中后是否需要进行针对性适配。
工作负载评估。工作负载评估的基础原则是如何基于业务无
损、不停机更新的情况下，可以选用哪种工作负载进行容器管理。
对于各类更新方式：滚动更新、蓝绿发布、金丝雀发布，业务落地
容器化必须至少选择一种方式进行管理，这个是保障我们利用好容
器特性的基础。常用的工作负载是 Deployment 和 StatefulSet，是
Kubernetes 原生提供的分别解决微服务部署，有状态服务部署的方
案。建议优先评估是否可以采用原生工作负载进行部署。
弹性伸缩评估。弹性伸缩是云计算中一种常用的方法。通过设
置伸缩规则来自动增加/缩减业务资源。HPA 是 Kubernetes 基于弹性
伸缩进行的规则设计，Kubernetes 对 Workload 的资源使用（CPU，
Mem）、自定 义Metric 指标进行负载评估：当负载超过设定高水位
时，例如 CPU 平均负载超过 60%，就扩容 Pod 实例以降低负载到设
定水位之下。当负载低于设定低水位时，例如 CPU 平均负载低于
20%，裁剪Pod实例以释放资源，降低成本。要实现水平扩缩，业务
需要在业务逻辑与架构上实现优雅退出、负载均衡。优雅退出：业
务容器负载降低时，HPA 会针对模块实例进行缩容操作，业务容器
必须要优雅退出，保障业务逻辑顺利完成退出动作。负载均衡：当
负载增加时，HPA 会直接增加容器数量。无状态服务的处理方式较
⽹址：SRE-Elite.com 43 微信：SRE精英联盟
SRE实践白皮书（2023年）
为简单，可以通过前置的负载均衡器有效均衡负载；有状态服务则
需要业务动态感知实例/容量变化，合理分配玩家至新增服务实例。
容器云适配后的交付和管理。容器云适配后建议使用 GitOps 来
进行持续交付。GitOps 是由 Alexis Richardson 在 2017 年首次提出
的，该模型主张将 Git 作为“单一事实来源”来管理和同步开发和生
产环境，而不是使用传统的基础设施管理和部署方式。 GitOps 的核
心思想是将应用系统的声明性基础架构和应用程序定义存放在 Git 版
本库中。将 Git 作为交付流水线的核心，每个开发人员都可以通过提