ly, we conclude in Section 7. For readers’ convenience, the
symbols and parameters employed throughout this article
are summarized in an alphabetical order in Table 1.
2. RELATED WORK
2.1 Mechanisms for Key Distribution
Establishing pairwise keys is always an important issue for
WSN. Eschenauer and Gligor [13] (cid:12)rst proposed a key pre-
distribution scheme for WSN. In their scheme, each sensor
node randomly picks a key set from a big key pool. If two
nodes have a key in the intersection of their key sets, they
can use this key as a secret key. Chan et al. [6] then pro-
posed a scheme using the same procedure [13] but the key
between two nodes is available if and only if the intersection
of the key sets contains a number of keys. Otherwise, they
have to communicate to each other via intermediate node(s).
Subsequently, there are many key pre-distribution schemes
proposed, e.g., [11, 16, 12, 15, 18]. However, these schemes
are not suitable for our scenario because the keys are es-
tablished according to the data receivers rather than time
periods. In our scenario, the user is issued a key for (con-
tinuous or discrete) time periods and is restricted to access
the nodes within the time periods.
2.2 Key Assignments Supporting Hierarchy
Time-bound access control is usually realized with key as-
signment scheme supporting a partial order hierarchy. A
comprehensive overview of the time-bound hierarchical key
assignment can be found in [27]. While one may extend the
time-hierarchy to also cover the nodes (e.g., the upper level
represents time periods and the lower level represents node
indices), it is unclear how to support the two-dimensional
key derivation as we described in Section 1.3. Even though
the structure of a public-key scheme may be rich enough
to support \fancy" hierarchy (e.g., a two-dimensional hi-
erarchy [24]), these encryption schemes are impractical for
low-cost, resource-constrained sensor nodes, unless other ar-
rangements are made such as storing pre-computed results
and utilizing online/o(cid:15)ine encryption techniques (e.g. [9]).
One may view that our system is essentially providing a
mean for a node i and a user subscribed to j to agree upon
a session key ki;j, which bears a similarity with the key
agreement problem. First, it is \agreed" in a non-interactive
or \o(cid:15)ine" manner between a sensor node and a mobile user,
without interacting with each other or interacting with the
control center other than the initial assignments. While non-
interactive key agreement exists, we still need to satisfy our
design goal requiring the size of either ki;∗ or k∗;J to be
independent of either the total number of sensor nodes n
or the total number of time periods l, which rules out the
straightforward adoption of key agreement protocol.
3. TECHNICAL PRELIMINARIES
3.1 Quick Review of RSA Cryptosystem
An RSA cryptosystem can be setup in the following way.
Choose two large primes p and q. Let N = pq be the public
RSA modulus and λ(N ) = lcm(p − 1, q − 1), where lcm(·,·)
denotes the least common multiple, be the Carmichael func-
§
tion (which is a secret similar to the factorization of N )
.
Find integers e > 1 and d such that ed ≡ 1 (mod λ(N )) (this
(cid:21)(N ); therefore, e ≥ 3). Publish
implicitly requires e, d ∈ Z
∗
e as the encryption exponent, and keep d as the (secret)
decryption exponent. For any integer x ∈ ZN , its encrypt-
ed form is y = xe mod N . With the knowledge of d, the
plaintext x can be recovered from the ciphertext y follow-
ing x = yd mod N = xed mod N = xz(cid:21)(N )+1 mod N = x,
where z is an integer.
Generally, given the public-key (e, N ) and the ciphertext
y, it is computationally infeasible for an adversary to recover
the plaintext x. Nevertheless, given e1, e2, y1 = xe1 mod N
and y2 = xe2 mod N , where the greatest common divisor of
the exponents is 1, i.e., gcd(e1, e2) = 1, it is feasible for an
adversary to recover the plaintext x. This is done as follows.
Employ the Euclidean algorithm to compute integers u and v
such that e1u+e2v = 1. Then yu
This is known as the common modulus attack, which we will
employ in our security proof.
3.2 Quadratic Residue
2 ≡ xe1uxe2v ≡ x mod N .
1 yv
We call an integer u ∈ Z∗
′
2
2
4
⌋+1.
N as QR
N ∩ Z⌊ N
N = {u ∈ Z∗
We say a prime p is a safe prime if p = 2p
N a quadratic residue modulo N if
there exists an integer v such that u = v2 mod N (otherwise,
u is called a quadratic non-residue modulo N ). We de(cid:12)ne the
N | u =
group of quadratic residues in Z∗
v2 mod N, v ∈ ZN}. It is su(cid:14)cient to generate QR
N by only
considering v ∈ Z∗
′
+ 1, where p
itself is a (large) prime (hence we immediately have p ≡ 3
(mod 4)). We say an N is a safe RSA modulus if N = pq is
the product of two distinct safe primes (hence N is a Blum
integer). For such an N , the order of the group of quadratic
residues is |QR
′
= (cid:21)(N )
. That is, there
q
such quadratic residues in Z∗
are p
N .
N is a generator for QR
N ,
if and only if gcd(u − 1, N ) = 1 [17]. Therefore, QR
N is
′
If p and q are signi(cid:12)cantly
a cyclic group of order p
q
\{1} shall be a generator for
large, any random u ∈ QR
′
QR
N except for a negligible probability ε = p
+q
p′q′−1 . One
approach to compute this ε is to employ the group theory
(regarding subgroup); another approach is to enumerate u ∈
\{1} satisfying gcd(u−1, N ) ̸= 1 (particularly, with the
QR
Chinese Remainder Theorem).
3.3 Strong QR-RSA Assumption
′
= p
It has been proved that, u ∈ QR
| = (p−1)(q−1)
′
.
N
′−2
′
′
q
N
N
The strong RSA assumption is (cid:12)rst introduced by [3]. It-
s variant and itself have been very useful in the construc-
tion of many e(cid:14)cient cryptographic functions (e.g. signa-
ture scheme in [10]). In this article, we consider a variant
of this (standard) strong RSA problem, the strong QR-RSA
§
We follow PKCS#1 version 2.1, which speci(cid:12)es using the
Carmichael function λ(N ) instead of the Euler’s totient
function ϕ(N ) = (p − 1)(q − 1). Observe that λ(N ) is al-
ways a divisor of ϕ(N ). PKCS#1 version 2.1 is the public-
key cryptography standard published by RSA laboratories
in 2002 which was also republished as an Internet standard
(RFC 3447).
231
problem [17], in the group of quadratic residues in Z∗
N , where
N is the product of two safe primes. It has been shown that
this variant is not any easier than the standard one [10].
Therefore, we have the following strong QR-RSA assump-
tion.
De(cid:12)nition 1. The strong QR-RSA assumption holds if no
polynomial time adversary A has non-negligible advantage
in solving the following strong QR-RSA problem: given the
instance (y, N ), where N is a safe RSA modulus and y ∈
QR
N , output (x, e) such that y = xe mod N .
3.4 Lagrange Interpolation
A polynomial f (x) of degree t can be uniquely recovered
from (t + 1) sample values f (x0), f (x1),··· , f (xt), where
no two xa are the same, 0 ≤ a ≤ t. The interpolation
polynomial in the Lagrange form is
f (x) =
λxxa f (xa), where λxxa =
a=0
b=0;b̸=a
t∑
∏
x − xb
xa − xb
.
t∏
∑
t
t
b=0;b̸=a
for any (integer) i. In this article, we call
i−b
a−b and then f (i) =
∏
b=0;b̸=a(i − b) and βa =
Each λxxa itself is also a polynomial of degree t (instead of
a coe(cid:14)cient). Later in Section 5.1 we shall employ a special
∏
case where xa = a, 0 ≤ a ≤ t. Thus we know for any (inte-
t
ger) i, λia =
a=0 λiaf (a).
b=0;b̸=a(a − b). Then
t
Let αia =
we have λia = (cid:11)ia
(cid:12)a
such λia’s the Lagrange interpolation coe(cid:14)cients.
The Lagrange interpolation also works in Zm, where m =
′
′
is the product of two (large) primes [22]. That is, for
q
p
any subset of t points in {1, 2,··· , n}, the sample values of
f (x) mod m at these points uniquely determine the value
of f (x) mod m at any other point in {1, 2,··· , n}.
(This
follows from the fact that the corresponding Vandermonde
matrix is invertible modulo m, since its determinant is rel-
atively prime to m [22].) We will apply this idea in Section
5.2.
4. FORMAL DEFINITIONS
4.1 Framework
A time-based key management scheme consists of the fol-
lowing (cid:12)ve algorithms:
• Setup(1(cid:22), n, t, l): On input an unary string 1(cid:22) for an
integer µ which acts as the security parameter, an in-
teger n as the total number of sensor nodes, an integer
t as the maximum number of nodes that the adversary
may corrupt and an integer l as the total number of
time periods for user subscription, output the master
secret key K (along with certain public parameters).
This is the only probabilistic one among all (cid:12)ve algo-
rithms.
• NodeKeyGen(K, i): On input the master secret key
K and a node index i, output the secret key ki;∗ for
node i.
• UserKeyGen(K, J): On input the master secret key
K and a set J of time periods, output the secret key
k∗;J for a mobile user subscribing to all the time peri-
ods j ∈ J.
• NodeKeyDer(ki;∗, j): On input a secret key ki;∗ and
a time period j, output the encryption key ki;j for node
i.
• UserKeyDer(k∗;J , i, j): On input a secret key k∗;J of
a set J of time periods, output the decryption key ki;j
for the user subscribing to J.
The control center performs Setup to select the master
secret key, and then issues the node keys and user keys to
sensor nodes and mobile users by invoking NodeKeyGen
and UserKeyGen, respectively. After that, a sensor node
performs NodeKeyDer to derive its encryption key for the
current time period j, and an entitled mobile user performs
UserKeyDer at time period j ∈ J with respect to a corre-
sponding node to derive the same key for decryption. That
is, NodeKeyDer and UserKeyDer independently gener-
ate the same ki;j with regard to any given node-time index
pair (i, j) for i ∈ {1, 2,··· , n}, j ∈ J ⊆ {1, 2,··· , l}.
4.2 Security Model
The security of a (t, n)-threshold time-based key manage-
ment scheme is de(cid:12)ned by the following game between an
adversary A and a challenger C.
Setup. C invokes Setup(1(cid:22), n, t, l) to select the master se-
cret key K.
Query Phase 1. A can query the following oracles:
• NodeExt(i): C responds with
ki;∗ ← NodeKeyGen(K, i).
This oracle can be only queried for up to t di(cid:11)er-
ent i’s.
• MobiExt(J): C responds with
k∗;J ← UserKeyGen(K, J).
Challenge. A selects (^i, ^j), where ^i has never been called
in NodeExt and any J with ^j ∈ J has never been
called in MobiExt. Then C (cid:13)ips a fair coin b ∈ {0, 1}.
If b = 0, C responds with a random element chosen
from the key space. If b = 1, C responds with the real
session key k^i;^j
← NodeKeyDer(k^i;∗, ^j).
Query Phase 2. C responds to the queries from A as in
Query Phase 1, but neither NodeExt(^i) nor any Mo-
biExt(J) with ^j ∈ J is permitted; otherwise, A triv-
ially obtains k^i;^j.
Guess. A outputs his guess b
′
on b. If b
′
= b, A wins the
game.
The above game has modeled the potential attacks on
the scheme: the adversary can corrupt at most t nodes and
extract their node keys (via NodeExt), and acquire an ar-
bitrary number of user keys (via MobiExt). Therefore, if a
scheme is provably secure in the above model, it can resist
collusion attacks.
De(cid:12)nition 2. A (t, n)-threshold time-based key manage-
ment scheme is secure if for any polynomial time algorithm
|
A, A’s advantage in the above game AdvA = | Pr[b
= b]− 1
′
is negligible.
2
232
For this work, we consider the slightly restricted \static"
security of a (t, n)-threshold time-based key management
scheme, where A chooses a set of at most t nodes he may
corrupt at the very beginning of the game. That is, in Query
Phase 1 and Query Phase 2, NodeExt is only made to these
pre-determined nodes. Such a static model is the actual one
we shall employ in the security proof of the proposed scheme.
5. OUR PROPOSED SYSTEM
5.1 Protocol Speciﬁcation
Let n be the total number of sensor nodes in the WSN, t
be the maximum number of nodes that the adversary may
corrupt, and l be the total number of time periods for user
subscription. The symbols and parameters employed are
summarized in an alphabetical order in Table 1.
• Setup(1(cid:22), n, t, l):
′
′
′
and q
′
+ 1 and q = 2q
1. Choose two distinct primes p
of length µ,
+ 1 are two large