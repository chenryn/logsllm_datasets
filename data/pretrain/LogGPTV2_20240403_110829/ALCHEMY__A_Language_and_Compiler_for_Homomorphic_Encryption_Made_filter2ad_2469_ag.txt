lamDB :: expr (e,a) b -> expr e (a -> b)
($:)
v0
weaken :: expr e a -> expr (e,x) a
:: expr e (a -> b) -> expr e a -> expr e b
:: expr (e,a) a
The host-language function lamDB creates an object-language func-
tion (i.e., lambda abstraction). Notice its use of the environment: it
converts any object-language term of type b, in any environment
whose “topmost” entry has type a, into an object-language function
of type a -> b.
Similarly, in any environment whose topmost entry has type a,
the object-language term v0 represents that topmost entry. Essen-
tially, an environment can be thought of as a stack of values of
specific types, and v0 is the object-language term representing the
value at the top. To allow access to values farther down, weaken
“demotes” any object-language term in environment e to an equiv-
alent term in a modified environment with an additional value
(of arbitrary type) pushed on top. For example, v1 = weaken v0
has type expr ((e,a),x) a and represents the second value on
the stack, v2 = weaken v1 represents the third, etc. Putting these
pieces together, for example, lamDB v0 has type expr e (a -> a)
and represents the identity function. Finally, the $: operator applies
an object-language function of type a -> b to an object-language
value of type a to yield an object-language value of type b.
The definitions of lamDB, v0, $:, and weaken are trivial for the
evaluator E. They are almost as trivial for the printer, but the P type
needs to be redefined as a function from the “lamDB depth” of the
term to String, so that proper variable indices can be generated.
See Appendix A.1 for the actual definition of this interpreter.
Higher-order abstract syntax (HOAS).. Referencing variables by
their positions in the environment (i.e., de Bruijn indexing) soon
becomes painful, because the same index, e.g., v0 or v2, can repre-
sent different object-language values depending on its lexical scope,
and tracking down the correct binding location in the code can
be quite difficult. We would instead like to use the host language
for creating, binding, and referencing arbitrary human-readable
variable names (i.e., HOAS), just as we could with lamPure, but for
effectful generators.
By adapting a key idea from [40], it turns out that we can obtain
HOAS as a relatively simple layer around our existing Lambda_ class.
The core idea is this: suppose we have a host-language function f
of (for the moment underspecified) type expr ? a -> expr ? b,
which is defined as f = \x -> ... We can think of the func-
tion body as an object-language expression in the “topmost” host-
language variable x. We can substitute x with the “topmost” object-
language variable v0 simply by invoking f v0. If we can arrange
for the result to have type expr (e,a) b, then applying lamDB to
it yields a value of the desired type expr e (a -> b). The type
of v0 :: expr (e,a) a gives us a clue about what the full type
of f could be, yielding the following candidate implementation:
unsafeLam :: Lambda_ expr
=> (expr (e,a) a -> expr (e,a) b)
-> expr e (a -> b)
unsafeLam f = lamDB $ f v0
However, as its name suggests and as shown in [40, Section 4.1],
unsafeLam has a subtle but serious flaw: it allows variable bindings
to be “mixed up.” For example, consider the function
ex f = unsafeLam (\y -> unsafeLam (\x -> f (var x)))
Surprisingly, certain function arguments f cause f (var x) to
evaluate to y! The problem, essentially, is that f can have a type
that swaps the topmost two environment variables. This ought not
be possible under the expected scoping rules of our DSL.
To rememdy the problem, we use a key idea from [40], which is
to make lam a higher-rank function:
lam :: Lambda_ expr
=> (forall x . expr (e,x) a -> expr (e,x) b)
-> expr e (a -> b)
lam f = lamDB $ f v0
The only difference with unsafeLam is that the host-language func-
tion f has a more general type: its input’s topmost environment
variable may have arbitrary type x. Essentially, this prevents f from
“misbehaving” by letting x escape its scope or swapping it with
entries of the environment, because x cannot be unified with them.
Invoking f v0 specializes x to a, so the same implementation as
unsafeLam works.
Perhaps surprisingly, the above easily generalizes to our ultimate
goal of HOAS for effectful generators!
lamM :: (Lambda_ expr, Functor m)
=> (forall x . expr (e,x) a -> m (expr (e,x) b))
-> m (expr e (a -> b))
lamM f = lamDB  f v0
Essentially, the type variable x acts as a “hole” allowing us to bring
the type a inside the monad.
These abstractions do not yield quite the same level of simplicity
as lamPure did above. In particular, replacing lamPure with lam in
addMulPure fails to typecheck because x and y necessarily have dif-
ferent environments: y’s strictly contains x’s. In order to add these
two values, we must “weaken” x by extending its environment:
addMul = lam $ \x -> lam $ \y -> ((weaken x) +: y) *: y
This is not much more usable than the original index-based ap-
proach, because the required number of weakens depends on the
lexical scope. To remedy this, we take one more idea from [40].
We define the Extends m n typeclass, which allow us to induc-
tively weaken a term until its environment is compatible with the
surrounding context.
class Extends m n where
var :: expr m a -> expr n a
instance {-# OVERLAPS #-} Extends m m where
var = id
ex = lam $ \x -> var x +: var x
((exct, ctarg), keys, hints) >= ($ ctarg)
print errors
-- [("add_Q268440577",7.301429694065961e-7)]
Figure 3: Example usage of the error-rate logger.
instance (Extends m n, x ~ (n, e)) => Extends m x where
var = weaken . var
We adopt the general rule of always using var to automatically
extend the environment of any variable (if necessary). The above
example then becomes:
addMul = lam $ \x -> lam $ \y -> (var x +: var y) *: var y
Though this is not quite as simple as lamPure, the use of var is
mechanical and context-independent, and gives us foolproof HOAS.
C LOGGING ERROR RATES
Recall that in FHE, ciphertexts have some internal error that grows
under homomorphic operations. If the error grows too large rel-
ative to the ciphertext modulus, the ciphertext will not decrypt
to the correct plaintext. The exact error growth incurred by a ho-
momorphic computation depends in a rather complex way on the
particular sequence of homomorphic operations and the various
parameters of the system, so it can be difficult to predict in advance
exactly what parameters, especially ciphertext moduli, should be
used: moduli that are too small will make it impossible to decrypt
the result, while unnecessarily large moduli induce (for security
reasons) other large parameters and less efficiency.
To aid a good selection of parameters, Alchemy includes a
ciphertext-DSL interpreter that logs the empirical error rate—essentially,
the ratio of the error to the ciphertext modulus—of every ciphertext
created during a homomorphic computation. By observing these
error rates for a particular computation of interest, the programmer
can easily adjust the parameters upward or downward as needed.
In keeping with Alchemy’s modular approach, the error-rate
logger is actually a compiler that transforms any ciphertext-DSL
program into an equivalent one that additionally logs the error
rates of any ciphertexts it generates. The output program can in
turn be passed on to any suitable interpreter, e.g., the evaluator, the
printer, other DSL transformations, etc.
C.1 Usage Example
Figure 3 gives a slightly simplified usage example of the log-
ger’s public interface writeErrorRates. (See Section 5 for a more
involved example.) The code first defines a toy object-language
function ex that simply adds its argument to itself. It then com-
piles ex into a homomorphic (ciphertext-DSL) computation, and
encrypts a random value to serve as the input. These computa-
tions require keys (and in other cases, key-switching hints) to be
generated and stored; runKeysHints sets up the monadic context
for doing this, and ultimately outputs all the generated keys and
hints. Next, the code invokes writeErrorRates exct to convert
the ciphertext-DSL function into one that also logs the error rate
of any ciphertext it produces (which in this case is just the out-
put ciphertext); the call to runReader keys sets up the necessary
monadic context that gives “reader” access to the secret keys. Lastly,
the code evaluates the augmented ciphertext-DSL function on the
encrypted input ctarg, where runWriter sets up the necessary
monadic context for logging the error rates. This produces both
the (encrypted) result and a log, which consists of a list of pairs
describing the DSL operation that produced each ciphertext (help-
fully augmented with the value of its modulus), and the ciphertext’s
error rate.
We point out that the monadic ciphertext-DSL code produced au-
tomatically from a plaintext-DSL program by pt2ct and writeErrorRates
could in principle instead be written manually be the programmer.
However, due to the lack of do-notation “syntactic sugar” in the ob-
ject language, this would be quite burdensome on the programmer,
and would greatly conceal the meaning and intent of the code.
C.2 Interface and Implementation
The design and implementation of our error-rate logger involves a
number of technical challenges:
(1) To measure ciphertext error rates we need access to the cor-
responding decryption keys, which are properly values in
the host language because they are generated during the con-
struction of the homomorphic computation, not its evaluation.
Therefore, access to the keys is best modeled by embedding
the transformed DSL expression in a host-language “reader”
monad that provides such access.
(2) Creating a log of error rates is most naturally seen as a side
effect of the main homomorphic computation, which is best
modeled by embedding the computation in a “writer” monad.
Because the error rates depend on the ciphertexts, which are
values in the object language, we need the object language
itself to support monads. (The DSL components for object-
language monads are given in Section 2.3.)
instance (Add_ expr CT, ...) => Add_ (ERW expr k w) CT where
neg_ = ERW $ liftWriteError
"neg_" neg_
add_ = ERW $ liftWriteError2 "add_" add_
-- | Given an annotation string, and an object-lang function that
-- | outputs a ciphertext, lift it to one that also logs the error
liftWriteError :: (ErrorRate_ expr, ...)
=> String
-> expr e (a -> CT)
-> k (expr e (w (a -> w CT)))
-- | annotation
-- | the function to lift
liftWriteError str f_ = do
key  (after_ $: tellError_ str sk) .: f_
Nothing -> return_ .: f_
-- | no key, so can't log
-- | Given an annotation string and a secret key, produce an
-- | object-lang function that writes a ciphertext's error rate
tellError_ :: (ErrorRate_ expr, ...)
=> String -> SK -> expr e (CT -> w ())
-- | Apply an action to a value, then return the original value
after_ :: (Monad_ expr w, ...) => expr e ((a -> w b) -> a -> w a)
Figure 5: Simplified partial implementation of ERW. (Many
constraints are elided for brevity.)
is an annotation to identify the step in the larger expression
that produced it.
As an illustrative example, Figure 5 shows the instantiation of
Add_ for ciphertexts, and the key supporting functions. The most
important of these is liftWriteError, a host-language function
whose type signature hints at its functionality: it transforms any
object-language pure function that produces a ciphertext into a
monadic one that also logs the ciphertext’s error, if a suitable de-
cryption key is available. First, liftWriteError uses lookupKey
(associated with the reader monad k) to try to obtain a key that can
decrypt the ciphertext. (This lookup is based on the ciphertext’s
type parameters, which we have suppressed here for readability.) If
a key is found, liftWriteError produces a new object-language
function that applies the original function, calls tellError_ on
its result, and returns that result. (The generic after_ combinator
performs this sequencing.) If no key is found, it just returns the
original function, but modified so that its output is monadic.
newtype ERW
expr -- | the underlying interpreter
k
w
e
a
= ERW (k (expr (Kleislify w e) (w (Kleislify w a))))
-- | (reader) monad that supplies keys
-- | (writer) monad for logging error rates
-- | environment
-- | object-language type
writeErrorRates ::
ERW expr k w e a
-> k (expr (Kleislify w e) (w (Kleislify w a)))
writeErrorRates (ERW ex) = ex
type family Kleislify w a = r | r -> a where
Kleislify w (a -> b) = Kleislify w a -> w (Kleislify w b)
Kleislify w (a,b)
Kleislify w [a]
Kleislify _ a
= (Kleislify w a, Kleislify w b)
= [Kleislify w a]
= a
Figure 4: Definition and public interface of the error-rate
writer ERW.
(3) The exposed object-language type of the original ciphertext-
DSL program must be rewritten as an appropriate object-
language type of the transformed expression, incorporating
all the monadic embeddings (and similarly for their environ-
ments).
The data type ERW (short for “error-rate writer”) resolves all of
the above issues; see Figure 4 for its formal definition and public
interface. The (partially applied) type ERW expr k w is an inter-
preter which, as usual, is additionally parameterized by an envi-
ronment type e and an object-language type a. It represents an
object-language expression of exposed type a by another one of
type w (Kleislify w a), as interpreted by expr. (This represen-
tation is also embedded in the host-language reader monad k, mod-
eling the fact that we need access to the decryption keys.) The
Kleislify type family lifts the type a -> b of any pure object-
language function into the monadic type a -> w b, recursing into
pairs and lists to find all appearances.10 This models the fact that
the transformed function may now use the side effect of writing
error rates to a log. For example, supposing that CT denotes the
type of ciphertexts, the exposed object-language type CT is inter-
nally represented by the type w CT, and CT -> CT -> CT by the
type w (CT -> w (CT -> w CT)).
Interpretation of language components. Naturally, ERW expr k w
is an instance of all our generic and ciphertext-DSL language com-
ponents, subject to appropriate constraints on expr, k, and w. Specif-
ically, we need:
a corpus of FHE secret keys, and
• MonadReader Keys k, which says that k provides access to
• MonadWriter [(String,Double)] w, which says that w sup-
ports the side-effect of append-only writes of (String,Double)
pairs to a log. Here Double represents the empirical error
rate of an intermediate ciphertext, and the matching String
10Formally, Kleislify recursively lifts into the Kleisli category of w.