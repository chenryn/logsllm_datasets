I apologize if this issue is a duplicate of #2997, but it appears to be somewhat different. The problem I am encountering involves the `.ix` method, which interprets an integer as a label when getting a value, but as a positional index when setting a value.

Here is a minimal example to illustrate the issue:

```python
import numpy as np
import pandas as pd

# Create a DataFrame with mixed-type column and index labels
df = pd.DataFrame(
    np.arange(16).reshape((4, 4)),
    columns=['a', 'b', 8, 'c'],
    index=['e', 7, 'f', 'g']
)

# Display the DataFrame
print(df)
```

Output:
```
   a  b  8  c
e  0  1  2  3
7  4  5  6  7
f  8  9 10 11
g 12 13 14 15
```

When using `.ix` to get a value, the integer `8` is interpreted as a label:

```python
print(df.ix['e', 8])
```

Output:
```
2
```

However, when using `.ix` to set a value, the integer `8` is interpreted as a positional index, leading to an `IndexError`:

```python
df.ix['e', 8] = 42
```

Error:
```
Traceback (most recent call last):
  File "", line 1, in 
  File "pandas/core/indexing.py", line 90, in __setitem__
    self._setitem_with_indexer(indexer, value)
  File "pandas/core/indexing.py", line 190, in _setitem_with_indexer
    values[indexer] = value
IndexError: index 8 is out of bounds for axis 1 with size 4
```

Similarly, using `.loc` to set a value also results in an `IndexError`:

```python
df.loc['e', 8] = 42
```

Error:
```
Traceback (most recent call last):
  File "", line 1, in 
  File "pandas/core/indexing.py", line 90, in __setitem__
    self._setitem_with_indexer(indexer, value)
  File "pandas/core/indexing.py", line 190, in _setitem_with_indexer
    values[indexer] = value
IndexError: index 8 is out of bounds for axis 1 with size 4
```

This issue has been observed in both version 0.12 and the latest git checkout. 

_Update: @jreback noted that `.loc` is also not working as expected._