be evenly spread among the multiple subsets in that group.
After the versions are assigned to those subsets in the
frontier, a uniﬁed MKB is created by encrypting different
media keys with the subset keys that were assigned each
media key version. These are shown in line 3-7 of the
Algorithm 3.
When a uniﬁed MKB constructed from q media keys
assigned to subsets in the frontier is distributed with the
content or feed into the clone, the outcome of the clone
or the recovered pirated content allows the tracing agency
to immediately identify which of the q versions it is, thus
identify which subsets it corresponds to, i.e., the suspect
subsets (line 8 in Algorithm 3).
After the suspect subsets are identiﬁed, line 9-14 in
Algorithm 3 update the frontier for next iteration. If the
identiﬁed subset is a leaf, a traitor is identiﬁed. If the
identiﬁed subsets are not at the leaf level, those suspect
subsets form an active group and is added into the frontier
to further split in next iteration. If those subsets are the
children of the inactive group, when the newly formed
active group is added into the frontier,
they are also
removed from the inactive group. If those subsets are the
children of an active group, when the newly formed active
group is added into the frontier, their parent group will be
removed from the frontier. Their sibling subsets will be
merged into the inactive group. With the new frontier, the
algorithm will loop again from line 3.
B. Traceability analysis on dynamic trac-
ing
In the “single identity until revoked” strategy, it only
takes O(1) probes to identify which subset to subdivide,
because q media keys spreading among q subsets can
immediately identify the suspect subset. Furthermore, it
takes logq N iterations in order to detect a traitor at
takes t logq N tests. This
the leaf. Therefore totally it
traceability is a signiﬁcant improvement over the original
O(t3 ∗ logt ∗ logN) tests needed in NNL tracing scheme
shown in Section II-A.
Before we analyze the performance of our tracing
algorithm based on random strategy, we have an important
observation. Due to the grouping used when assigning the
versions to the subsets, the frontier always contains r + 1
groups where r is the current coalition size that we deduce
at that stage. Keep in mind we assume we do not know
the actual coalition size t. We deduce the coalition size
while tracing traitors. We start with r = 0 and the frontier
contains only the inactive group. At each testing, if the
attackers responds with a version that was assigned to
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:13:28 UTC from IEEE Xplore.  Restrictions apply. 
subsets in the inactive group, they reveal to us there exists a
new traitor. In our algorithm, a new active group is formed
and added to the frontier. If the attacker responds with a
version assigned to an existing active group, the newly
formed group replaces its parent group in the frontier. The
number of groups in the frontier does not change. Our
knowledge of traitor coalition size remains same. Indeed
the active groups contain the traitorous subsets. So at any
step, the frontier contains r + 1 groups including r active
traitorous group, and one inactive group. Since we assign
q versions evenly among r + 1 group and each group is
subdivided into q
r+1 child subsets, so after each testing the
tracing process goes down log2
q
r+1 levels on one of the
traitorous group. As a result the number of tests we need
in order to detect t traitors is bounded by the following:
t ∗ log2 N
=
log2 q − log2(t + 1)
t ∗ log2 N
log2
q
t+1
(1)
The superlinear traceability on random strategy is much
improved from the O(t3 ∗ logt ∗ logN) in NNL tracing
based on the same strategy. Our traceability improvement
converts to the tracing time reduction from tens of years
to hours.
C. Create uniﬁed MKBs for semi-static
tracing
The above dynamic tracing approach means one has to
wait for the tracing feedback information to incorporate
into the new uniﬁed MKB. This is ﬁne in clone tracing at
a testing lab and might be also ﬁne for other applications.
But when used for content protection applications, keep
in mind uniﬁed MKBs are production MKBs that we
distribute together with the content on the discs.
Highly motivated by real applications like AACS, we
are interested in designing schemes that ﬁt into reality. A
simple reality is that content owners order MKBs much in
advance of the appearance of the discs in retail stores,
it is impossible to wait for the tracing information to
incorporate into the new MKB. So a traitor tracing scheme
must be more static in order to ﬁt into this reality.
As mentioned earlier, an efﬁcient revocation scheme
and efﬁcient
tracing scheme demand different design.
Faster tracing requires any two devices be maximally far
apart, i.e., sharing minimal number of keys. On contrast,
efﬁcient revocation (i.e., small MKB) requires any key to
be shared by many devices. Thus, while it is possible
to distinguish two neighbor devices in a reasonable size
TKB in JL tracing scheme, the tree-based MKB in NNL
scheme has to contain over billion leaf nodes to distinguish
individual leaves in the tree.
As a result, the nature of the matrix-based JL scheme is
mainly static, meaning that further TKBs can be produced
146
ahead of time, independent of the forensic results from
previous ones. This is especially true if assuming random
attack strategy. However, note that in the “use a single
player’s keys until it is revoked” strategy, it will take at
least T iterations, each iteration requiring modiﬁcations to
the TKBs based on previous results, to completely stop the
attack.
On contrast, a tree-based system can never be static. Its
MKB to distinguish individual leaves is too huge to put
on a disc. So its tracing has to be phases, detecting the
traitorous subtrees ﬁrst then producing new MKBs focus-
ing on leaf nodes in the problematic subtrees. However,
the tree-based approach did not have to be completely
dynamic: multiple MKBs at the same level in the tree
could be produced ahead of time, and each could provide
forensic information.
It was the combination of the realization that an JL
scheme could not be completely static, and a tree-based
system did not need to be completely dynamic, that led us
to a practical uniﬁed approach based on semi-static tracing.
Basically the tree will be divided into more subtrees than
that in the dynamic tracing case shown in Section V-A,
diving deeper down in the tree than before. Suppose the
content is prepared with q versions and there are totally q
media key variants (e.g., q = 1024). In dynamic tracing the
tree can be divided into at most q subtrees. In this semi-
static tracing, the tree can be divided into 32K subtrees,
in other words, the frontier will dive into level 15 of the
tree from the root to begin the tracing process.
The semi-static tracing algorithm is shown in Algorithm
4. In line 1, the algorithm initializes a partition (frontier) S.
As explained in previous paragraph, this partition occurs at
a lower level of the tree than that in the dynamic tracing
approach described in V-A. As a result, the number of
subsets contained in the frontier is more than q. At line
3 and 4, the encodings of q media key variants among S
subtrees are statically assigned to create a batch of uniﬁed
MKBs. The purpose of the code is similar to the outer
code in JL scheme. The codeword is different movie by
movie. At line 5 this batch of uniﬁed MKBs are used over
a sequence of movies, one MKB per movie. Again, they
can be distributed together with content or serve as forensic
MKBs to feed into a clone device. In line 6 the license
agency collects tracing information over q sequence of
movies. In line 7 the license agency will use the collected
information to identify guilty subsets. This is just as JL
scheme does and will use the exact same traitor detection
algorithm in JL scheme as shown in [11]. As a result,
some subtrees are identiﬁed to be the suspects. At line 8
and 9 if some of the identiﬁed subtrees are the tree leaves,
traitors are identiﬁed. If none of the identiﬁed subtrees
are leaves of the tree, through line 11 to 13 the suspect
subtrees will be subdivided into subtrees further down in
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:13:28 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 4 Semi-static Tracing
1: Divide tree into S subtrees to form a frontier, |S| > q
2: loop
3:
4:
Encode q media key variants among S subtrees
For each encoding, creates a corresponding uniﬁed
MKB by repeatedly encrypting each media key
variant with its assigned subtree keys
Distribute the batch of uniﬁed MKBs to licensees
or Feed into the clone device
Recovering a series of pirated contents or collect a
series of testing results from the clone box
Using the variations recovered from above to iden-
(cid:2)
tify a guilty subtree Si or a set of guilty subtrees S
used in the piracy — call traitor coalition detection
algorithm in [11].
if Si or a subtree Si in S
is a leaf then
(cid:2)
Si is identiﬁed as a traitor and revoked in future
uniﬁed MKBs; also remove Si from S
into S
Add Si or S
Find the parent subtrees in S which contains Si
or any subtree in S
Subtract Si or all subtrees in S
from their parents
(cid:2)
(cid:2)
5:
6:
7:
8:
9:
10:
11:
12:
13:
else
(cid:2)
the tree. The suspect subtrees are removed and replaced
with the newly subdivided subtrees. These new subtrees
form a new frontier for next iteration. It goes to next
iteration to line 3, similar to the dynamic NNL tracing
scheme. Again, the algorithm statically encodes q media
key variants among the new S subtrees to create the next
batch of uniﬁed MKBs. Of course for those subtrees that
were never suspects, the algorithm could assign one same
media key variant to those subtrees in next batch. This
is equivalent to merge them into higher level subtrees.
Overall in this algorithm, processing within a batch is static
and processing between batches is dynamic.
D. Traceability analysis on semi-static
scheme
The process within a batch in the semi-static scheme
is exactly same as that in current JL scheme. Indeed as
shown in line 8, the semi-static algorithm employs the
same efﬁcient coalition detection algorithm shown in [11]
which achieves almost linear traceability, i.e., it takes O(T )
MKBs to detect T traitors.
Of course, the coalition may employ different strategies
in using the keys they compromised. In each iteration, they
may choose to use all traitors’ keys, or only one traitor’s
keys, or some traitors’ keys. For example, a tree is 30 levels
in total. Suppose the tree is divided into 32K subtrees and
dived 15 levels down in each iteration, it only takes 2
147
iterations to detect active traitors whose keys are actually
used in piracy. If they always use all traitors’ keys in each
iteration, it only takes 2 iterations to detect all traitors. In
each iteration, it takes O(T ) MKBs to detect all guilty
subtrees (or leaves) when the coalition size is T .
In the case they choose to only use one traitor’s keys
until it is revoked, it takes 2 iterations to detect one traitor
but in each iteration it only takes constant number of
uniﬁed MKBs to discover the guilty subtree to split. In
other words it takes constant number of MKBs to detect
one traitor, thus O(T ) MKBs to detect all T traitors. Again
the traceability of the semi-static tracing is O(T ). This is in
comparison with the current NNL tracing for clone attack
which takes O(T 3logT ) forensic MKBs in order detect
traitors of coalition size T .
On the other hand, as shown in Section
II-B, the
traceability of the JL scheme degrades with revocation
and ultimately the system can be overwhelmed. This is
due to the fact that the traitors in the coalition can mix-
match the revoked keys with their non-revoked keys to
get the same correct variant data thus not giving tracing
agency any forensic information on which key has been
used to get the correct variant data. On contrast, for the
semi-static tracing in the uniﬁed approach, as long as the
attackers do not have every possible version (i.e., they
do not have all q “symbols”), each test or pirated movie
yields forensic information. This is a great improvement
over the JL scheme. Using a practical number q = 1024,
tracing for re-broadcasting attack in JL scheme although
provides linear traceability but has a very ﬁnite up limit
(for example, about 40) on traceability and revocation
capability before the system is overwhelmed. Our new
system improves traceability from about 40 to 10,000 with
the same parameter. And furthermore in our new system
there is no limit on revocation.
VI. Experimental results
In previous
sections we have formally analyzed
and derived traceabilities for our scheme. We have also
performed simulations on the dynamic tracing Algorithm 3
on a ThinkPad T42. We emphasize our simulations using
sample practical parameters. For example, we chose 4
million user and 1024 variations of keys/contents, very
practical numbers for a real application like AACS. We run
50 times for each coalition size setting and get the average
number of tests needed to detect all traitors in the coalition.
T=10
60000
Coalition Size
NNL scheme
Our scheme
The results shown above are very much consistent
with our traceability analysis shown in Section V-B. The
T=50 T=100
T=200
15M 100M 1 billion
250
1600
600
35
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:13:28 UTC from IEEE Xplore.  Restrictions apply. 
number of tests reduced from our approaches is enormous.
This converts the tracing time from tens of years to just
hours.
VII. Conclusion
[10] H. Jin, J.Lotspiech and S.Nusser, ”Traitor tracing for prerecorded
and recordable media”, ACM DRM workshop, Oct. 2004.
[11] H.Jin, J. Lotspiech, Nimrod Megiddo, ”Efﬁcient Traitor Tracing”,
IBM research report, RJ10390, Computer Science, 2007.
[12] H.Jin and J. Lotspiech, ”Renewable Traitor Tracing: A Trace-
Revoke-Trace System For Anonymous Attack”, 12th European
Symposium on Research in Computer Security, Lecture Notes in
Computer Science 4734, pp.563-577, Springer, 2007.
In this paper we have shown the ﬁrst uniﬁed sys-
tem which seamlessly combines broadcast encryption and
traitor tracing into one system. It carries both practical and
scientiﬁc signiﬁcance. The new uniﬁed system simpliﬁes
the current system into one set of keys on the device which
are used to process a single uniﬁed type of key block.
It signiﬁcantly improves the traceability on both types of
pirate attacks. It improves the traceability on the clone
device attack from O(T 3) to O(T ). This converts to tracing
time reduction from tens of years to hours. Our semi-static
tracing algorithm has practical signiﬁcance. The simplicity,
efﬁciency and practicality caused it to be adopted as the
core technology in the new version of AACS [1]. As future
work, we are interested in combining other engineering
methods to potentially improve traceability in AACS even
more.
Scientiﬁcally, while existing work has viewed revoca-
tion and tracing as two orthogonal problems that demand
different designs to provide efﬁciency for both revocation
and tracing, our system is the ﬁrst design that uniﬁes
broadcast encryption and traitor tracing and provides efﬁ-
ciency for both. It defends against the two different attacks
in exactly the same way. As future work we are also
interested in formalizing and generalizing the design of
our uniﬁed system.
References
[1] http://www.aacsla.com/speciﬁcations.
[2] A. Fiat and M. Naor, “Broadcast Encryption,” Crypto’93, Lecture
Notes in computer science, Vol. 773, pp480-491. Springer-Verlag,
Berlin, Heidelberg, New York, 1993.
[3] B. Chor, A, Fiat and M. Naor, “Tracing traitors,” Crypto’94, Lecture
Notes in computer science, Vol. 839, pp480-491. Springer-Verlag,
Berlin, Heidelberg, New York, 1994.
[4] B. Chor, A, Fiat, M. Naor and B. Pinkas, “Tracing traitors,” IEEE
Transactions on Information Theory, Vol 46(2000), 893-910.
[5] M. Naor and B. Pinkas, ”Efﬁcient Trace and Revoke Schemes”,
Financial Cryptography’2000, Lecture Notes in Computer Science,
Vol. 1962, pp. 1-20.
[6] D. Naor, M. Naor and J. Lotspiech, ”Revocation and Tracing
Schemes for Stateless Receivers”, Crypto 2001, Lecture Notes in
computer science, Vol. 2139, pp 41-62, 2001.
[7] D. Boneh and B. Waters, ”A collusion resistant broadcast, trace
and revoke system”, ACM Communication and Computer Security,
2006.
[8] A. Fiat and T. Tassa, “Dynamic traitor tracing,” Crypto’99, Lecture
Notes in computer science, Vol. 1666, pp354-371. Springer-Verlag,
Berlin, Heidelberg, New York, 1999.
[9] R. Safani-Naini and Y. Wang, “Sequential Traitor
tracing,”
Crypto’2000, Lecture Notes in computer science, Vol. 1880, pp.
316-332. Springer-Verlag, Berlin, Heidelberg, New York, 2000.
148
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:13:28 UTC from IEEE Xplore.  Restrictions apply.