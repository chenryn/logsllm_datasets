# 前言
这里时Sulley使用手册的第二部分。  
手册链接：
# Sessions
一旦定义了许多request，就可以在session中将它们绑定在一起了。
Sulley相对于其他fuzz框架的主要优点之一是它能够在协议中“深入”fuzz，这是通过将request链接在一个graph(图)中实现的。在下面的示例中，request序列被绑定在一起，并且利用session和请求类扩展的PGRAPH库，以UDRAW格式呈现图形：  
    from sulley import *
    s_initialize("helo")
    s_static("helo")
    s_initialize("ehlo")
    s_static("ehlo")
    s_initialize("mail from")
    s_static("mail from")
    s_initialize("rcpt to")
    s_static("rcpt to")
    s_initialize("data")
    s_static("data")
    sess = sessions.session()
    sess.connect(s_get("helo"))
    sess.connect(s_get("ehlo"))
    sess.connect(s_get("helo"), s_get("mail from"))
    sess.connect(s_get("ehlo"), s_get("mail from"))
    sess.connect(s_get("mail from"), s_get("rcpt to"))
    sess.connect(s_get("rcpt to"), s_get("data"))
    fh = open("session_test.udg", "w+")
    fh.write(sess.render_graph_udraw())
    fh.close()
fuzz时，Sulley从根节点开始遍历graph结构，并沿途fuzz每个组件。这个例子以'helo'
requet开头。一旦完成，Sulley将开始fuzz “maiL from” request。它通过在每个测试用例前面加上有效的“helo”
request来实现。 接下来，Sulley继续fuzz 'rcpt to’
request。同样，这是通过在每个测试用例前面加上有效的“helo”和“mail from” request来实现的。等到该过程一直到”data”
request完成后,又转回到从”ehlo”开始。通过构建的graph将协议分解为单个请求，并fuzz所有可能路径，使得Sulley的fuzz能力十分强大。举个实际例子，2006年9月针对Ipswitch
Collaboration Suite的问题。在这种情况下，软件故障是在解析字符'@'和'：'中包含的长字符串时造成的堆栈溢出。
这个案例的有趣之处在于，这个漏洞只暴露在'ehlo'路线而不是'helo'路线上。
如果我们的fuzzer无法走完所有可能的协议路径，那么可能会错过像他这样的问题。
实例化session时，可以指定以下可选关键字参数：
  * session_filename :( string，default = None）（Filename to serialize persistent data to. ）。 指定文件名来操作fuzzer的执行。
  * skip :(整数，默认= 0）要跳过的测试用例数。
  * sleep_time :( float，default = 1.0）在传输测试用例之间sleep的时间。
  * log_level :(整数，默认= 2）设置日志级别，更高的数字==更多日志消息。
  * proto :( string，default =“tcp”）通信协议。
  * timeout：（float，default = 5.0）设置等待send（）/ recv（）的超时时长。
  * restart_interval: (integer, default=0) 在N个测试用例之后重新启动目标，通过设置为0禁用
  * crash_threshold :(整数，默认值= 3）节点耗尽前允许的最大崩溃次数
Sulley引入的另一个高级功能是能够在协议图结构中定义的每个边缘上注册回调。这允许我们注册在节点传输之间调用的函数，以实现诸如质询响应系统之类的功能。回调方法必须遵循此原型：
    def callback(node, edge, last_recv, sock)
'node'是要发送的节点，'edge'是当前fuzz到node'的最后一条路径，'last_recv'包含从最后一个套接字传输返回的数据，'sock'是实时套接字。如果你需要动态填写目标IP地址，就可以一个sock.getpeername（）回调获取IP。Edge回调也可以通过可选关键字参数'callback'来注册session.connect（）方法。
## Targets and Agents
下一步是定义target，将它们与代理链接并将目标添加到会话中。在以下示例中，我们实例化一个在VMWare虚拟机内运行的target，并将其链接到三个代理：
    target = sessions.target("10.0.0.1", 5168)
    target.netmon = pedrpc.client("10.0.0.1", 26001)
    target.procmon = pedrpc.client("10.0.0.1", 26002)
    target.vmcontrol = pedrpc.client("127.0.0.1", 26003)
    target.procmon_options = \
    {
    "proc_name" : "SpntSvc.exe",
    "stop_commands" : ['net stop "trend serverprotect"'],
    "start_commands" : ['net start "trend serverprotect"'],
    }
    sess.add_target(target)
    sess.fuzz()
实例化的目标绑定在主机10.0.0.1上的TCP端口5168上。
网络监视器代理正在目标系统上运行，默认侦听端口26001.网络监视器将记录所有套接字通信到由测试用例编号标记的各个PCAP文件。
进程监视器代理程序也在目标系统上运行，默认情况下在端口26002上进行侦听。此代理接受指定要附加到的进程名称的其他参数，用于停止目标进程的命令和用于启动目标进程的命令。
最后，VMWare控制代理在本地系统上运行，默认情况下在端口26003上进行侦听。目标将添加到会话中并开始fuzz。
Sulley可以fuzz多个target，每个target都有一组独特的链接代理。 这样分割测试空间（total test
space）可以有效节省fuzz时间。
让我们仔细看看每个代理（agnet）的功能。
### Agent: Network Monitor (network_monitor.py)
网络监视器代理负责监视网络通信并将其记录到磁盘上的PCAP文件。
代理硬编码绑定到TCP端口26001，并通过PedRPC自定义二进制协议接受来自Sulley
session的连接。在将测试用例发送给target之前，Sulley联系该代理并请求它开始记录网络流量。
一旦测试用例成功传输，Sulley再次联系该代理，请求它将记录的流量刷新到磁盘上的PCAP文件。
PCAP文件以测试用例编号命名，便于检索。此代理不必在与目标软件相同的系统上启动。 但是，它必须能够看到发送和接收的网络流量。 此代理接受以下命令行参数：
    ERR> USAGE: network_monitor.py
     device to sniff on (see list below)
    [-f|--filter PCAP FILTER] BPF filter string
    [-p|--log_path PATH] log directory to store pcaps to
    [-l|--log_level LEVEL] log level (default 1), increase for more verbosity
    Network Device List:
    [0] \Device\NPF_GenericDialupAdapter
    [1] {2D938150-427D-445F-93D6-A913B4EA20C0} 192.168.181.1
    [2] {9AF9AAEC-C362-4642-9A3F-0768CDA60942} 0.0.0.0
    [3] {9ADCDA98-A452-4956-9408-0968ACC1F482} 192.168.81.193
    ...
### Agent: Process Monitor (process_monitor.py)
过程监控代理负责检测fuzz target过程中可能发生的故障。 代理硬编码绑定到TCP端口26002并通过PedRPC自定义二进制协议接受来自Sulley
session的连接。在成功将每个单独的测试用例传输到target之后，Sulley联系该代理以确定是否触发了故障。如果是这样，关于故障性质的hgih
level信息将被传送回Sulley session，以便通过内部Web服务显示（稍后将详细介绍）。
    ERR> USAGE: process_monitor.py
     filename to serialize crash bin class to
    [-p|--proc_name NAME] process name to search for and attach to
    [-i|--ignore_pid PID] ignore this PID when searching for the target process
    [-l|--log_level LEVEL] log level (default 1), increase for more verbosity
### Agent: VMWare Control (vmcontrol.py)
VMWare控制代理硬编码为绑定到TCP端口26003并接受来自Sulley的连接通过PedRPC自定义二进制协议进行会话。
此代理公开用于与虚拟机映像交互的API，包括启动，停止，挂起或重置映像以及获取，删除和还原快照的功能。如果检测到故障或无法到达target，Sulley可以联系此代理并将虚拟机恢复到已知的良好状态。测试序列的honing工具很大程度上依赖该代理来完成识别触发给定复杂故障的测试用例的精确序列的任务（The
test sequence honing tool will heavily rely on this agent to accomplish its
task of identifying the exact sequence of test cases that trigger any given
complex fault. ）。
    ERR> USAGE: vmcontrol.py
     path to VMX to control
     path to vmrun.exe
    [-s|--snapshot NAME> set the snapshot name
    [-l|--log_level LEVEL] log level (default 1), increase for more verbosity
## Web Monitoring Interface
Sulle
Session类有一个内置小型Web服务，它被硬编码绑定到端口26000。一旦调用了session的fuzz（）方法，Web服务线程就会开始，并且可以看到fuzz的进度，下图是屏幕截图的示例：  
通过按下相应按钮可以暂停和恢复fuzzer。 每个检测到的crash在列表中简要显示，其中第一列中列出了违规测试案例编号。
单击测试用例编号可以看到发生crash时加载详细的crash信息。 此信息当然也可以在“crash bin”文件中找到，并可通过编程方式访问。
# Post Mortem