# TUTK软件供应链漏洞分析报告：影响全球多家摄像头厂商
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 漏洞背景
### 概述
近日，360安全大脑监测到 Nozomi 实验室披露了 ThroughTek 公司的 P2P 软件开发套件 (SDK)
中的一个严重漏洞(CVE-2021-32934)[1]，CVSS v3评分为9.1分。该 P2P SDK 用于支持通过 Internet
提供对音频/视频流的远程访问，目前被多个安全摄像头和智能设备厂商采用，是许多消费级安全摄像头和物联网设备原始设备制造商 (OEM) 供应链的一部分。
此后 ThroughTek 公司给出了漏洞影响的SDK版本、实现与修复建议[2]。但是同时 Nozomi 实验室表示：由于多年来，ThroughTek 的
P2P 库已被多个供应商集成到许多不同的设备中，因此第三方几乎不可能跟踪受影响的产品。
时至今日，该供应链漏洞到底影响了产业界哪些厂商，哪些设备型号，依然没有团队给出详细的分析报告，导致潜在受漏洞影响的诸多厂商依然浑然不知，大量的在网设备依然面临潜在的风险而无人知晓。为此，360未来安全研究院
/ 工业互联网安全团队通过 FirmwareTotal
供应链安全分析平台，独家提供该软件供应链安全事件分析报告，以期提高业界对本次漏洞事件的关注度和风险认知程度。
### 背景
**网络摄像机的相关概念**
需要先明确漏洞场景中出现的如下几个概念名词：
  * **DVR** ：Digital Video Recorder，数字硬盘录像机，主要功能是将视频信息数字化存储到如磁盘、USB、SD卡、SSD 或本地网络大容量存储的电子设备。其前端主要接入的是模拟摄像机，在 DVR 内部进行编码存储。如果 DVR 支持网络输出，也可以成为 NVR 的视频源提供者。 
  * **IPC** ：IP Camera，基于网络协议传输视频控制数据以及发送图像数据的摄像设备。与模拟型信号的 CCTV 摄像机不同，无需本地录像设备支持，仅需要局域网络即可。多数 IPC 都是 webcam，提供实时的监控视频图像。 
  * **NVR** ：Network Video Recorder，网络视频录像机，基于专用的嵌入式系统提供视频录像功能，但无视频监控设备，往往和 IPC 等设备直接相连，NVR 通常不提供视频数据的编码功能，但提供数据流的存储和远程观看或压缩等功能。有些混合型的 NVR 设备集成了 NVR 和 DVR 的功能。 
**典型NVR架构**
典型的网络摄像机的架构如下图所示：
在这种工作模式下，用户与其所拥有的 NVR 设备之间有诸如 LAN、P2P、Relay 等多种连接方式。对于 P2P
连接，其指的是允许客户端通过互联网透明地访问音频/视频流的连接功能。P2P 往往借助于隧道技术，而相应的隧道建立方案则因提供商的具体实现而异。
同时，在建立 P2P 连接之前，则需要一个公网上的服务器提供认证与连接服务。此服务器常由设备商或是上游供应商提供（对于此案例，对于使用了 IOTC
库的设备与客户端之间的连接，则是由 ThroughTek 提供），用以充当想要访问音频/视频流的客户端和提供数据的设备之间的中间人。
IOTC（物联网云）平台是 Throughtek (TUTK) 所开发的基于云平台的物联网解决方案。它利用 P2P
连接技术与云计算，加上跨平台API，使得不同的互联网设备之间可以建立跨平台的连接。使用 TUTK 提供的 SDK 所开发的网络摄像机客户端与服务端，会被嵌入
IOTC 库，用于与 TUTK 服务器通讯，并建立 P2P 连接。
由于 ThroughTek
软件组件被安全摄像头和智能设备供应商广泛使用，目前已被整合至数以百万计的连接设备中。作为多个消费级安全摄像头和物联网设备原始设备制造商供应链的组成部分，此次漏洞影响到了
IP 摄像机和婴儿和宠物监控摄像机，以及机器人和电池设备等多种设备。
## 漏洞分析
根据 nozomi 披露的信息，漏洞是由于客户端与设备端库中采用了硬编码加解密算法和密钥，因此第三方可以通过中间人或离线的方式，重建音频/视频流。
通过分析我们发现，问题组件可能以动态链接库文件（IOTCAPIs.dll、libIOTCAPIs.so）的形式打包进设备端固件或客户端程序（exe，apk）中，也可能被静态链接到厂商特定的二进制程序中，例如`goahead`,`tutk_tran`,
`TutkTunnel`等，这反映出供应链安全问题的隐蔽性和复杂性。
### IOTC 库设备与客户端交互逻辑分析
为还原漏洞场景，首先我们需要的是一套包含了 IOTC 平台的设备固件，和与其交互的客户端。
无论是固件还是客户端，都会包含 IOTC 的版本信息。所以我们以 IOTC_Get_Version 函数作为搜索依据，在 FirmwareTotal
中搜索相应的固件：
得到关联分析结果：
筛选出与包含 IOTC_Get_Version 字符串的单文件相关的固件后，我们这里选取了某摄像头固件作为分析对象。
同时依据产品型号搜索，我们关联到了该摄像头的 Windows 版客户端（md5sum:
9990658d87a78d04186b869bb20a38be）。可以发现 Windows 客户端中的 IOTC 相关功能实现于 IOTCAPIs.dll
库中。
同时，使用 FirmwareTotal 下载到该摄像头固件的文件系统，可以从中提取到固件端的 IOTC 库文件 libIOTCAPIs.so。
样本就绪后，就可以开始我们的分析任务了。经过对于客户端简单的反编译分析，定位到登录设备的函数 LoginDevice
后，可以初步确认，登录设备所用的设备标识为设备ID。继续进入 VideoPlayerTutk_LoginDev 函数：
    [DllImport("imivideoplayertutk.dll", CallingConvention = CallingConvention.Cdecl)]
    public static extern int VideoPlayerTutk_LoginDev(string deviceId, string viewAccount, string viewPassword, out int pIMIhandle, int resvInfo = 0);
可以发现，经由 TUTK 服务器进行认证登录一台设备，所需提供的参数项包含了：
  * 设备ID：deviceID
  * 访问账户：viewAccount
  * 访问口令：viewPassword
继续跟踪执行流可以还原出客户端的如下执行流程信息：
  * 首先，客户端使用`IOTC_Get_SessionID`函数，请求到当前连接的一个 Session 并用 SessionID 唯一标识。
  * 此后使用`IOTC_Connect_ByUID_Parallel(_deviceID, SessionID)`连接设备，此处建立连接需要 uid+sid 来共同标识。
  * 之后还有一步check操作，使用`IOTC_Session_Check(SessionID, &buffer)`对于当前连接的 Session 进行检查，同时在检查成功的情况下，向 buffer 所在缓冲区中写入相应信息。
  * 以上步骤通过后，使用`avClientStart2(SessionID, account, password, 10, &v22, 0, &v20)`对设备进行连接，此时连接所用的 account 与 password，是用于在设备端进行认证的信息，而非与 TUTK 服务器进行交互认证的信息。
  * TUTK 服务器端，SessionID 的 check 通过且 UID 可用；设备端，account 与 password 检查通过，则客户端与设备成功建立 P2P 连接。
以上是初步的逆向分析与定位。同时，依据搜索到的 IOTC 文档与源码[3-5]，我们可以进一步还原更准确的设备与客户端连接流程。整体流程如下图所示：
  1. 设备注册到P2P服务器
  2. 客户端向P2P服务器请求P2P连接服务
  3. P2P服务器为客户端提供隧道建立服务
  4. P2P服务器为设备提供隧道建立服务
  5. 此后设备与客户端直连，不涉及 P2P 服务器
成功建立 P2P 连接后，设备与客户端便可以开始传输数据了。具体的通讯方式如下：
首先是设备端的流图：
  * 首先进行IOTC 的初始化：IOTC_Initialize(master_domain_name, port)。其中的参数标识了 Master 服务器的地址。Master 指的是一台由 TUTK 维持在 IOTC 平台的，用于检查内部关键信息来管理服务器和设备以及验证他们的身份的主机。
  * 此后 Login 线程会被创建，此线程使用 IOTC_Divce_Login(device_UID) 尝试登陆 IOTC 云平台以获取服务。此处的 UID 是 TUTK 为每个服务器和设备提供的 20 字节的唯一标识，用于管理和连接目的。
  * 接下来便是建立客户端与服务端之间的连接。连接以 SessionID 标识。建立 Session 的前提则是由 TUTK 服务器告知客户端设备的 IP 与端口，以此让两者建立 P2P 通讯。
  * 连接建立成功后的数据传输，则是以SessionID对应的连接为标识。
其次是客户端的流图：
  * 与设备端相同，客户端首先需要使用 IOTC_Initialize(master_domain_name, port) 连接到 Master 服务器。
  * 其后，使用 IOTC_seession_ID = IOTC_Connect_ByUID(device_UID)，通过传入 UID 来连接自己想要的设备，并在连接成功建立后返回该连接的 Session_ID。
  * 此后同样以 Session_ID 标识的连接进行数据传输。
### 流量”解密”
由于client端与设备端通过UDP协议传输数据，数据仅进行简单混淆，因此很容易通过中间人方式窃取设备端传输的敏感信息，例如摄像头画面、用户凭据等。“解密”脚本如下
    import struct
    # code by owl
    # test on TUTK version: 1.11
    def ROL4(value, cnt):
        """
        rotate left (4-Byte wise)
        """
        return ((value > (32-cnt))
    def Swap(raw, size):
        maps = { 2: [1, 0], 4: [2,3,0,1], 8: [7,4,3,2,1,6,5,0], 16: [11,9,8,15,13,10,12,14,2,1,5,0,6,4,7,3]}
        result = raw
        if size in maps.keys():
            result = ''.join([raw[maps[size][i]] for i in range(size)])
        return result
    def ReverseTransCodePartial(raw):
        key = "Charlie is the designer of P2P!!"
        result=''
        len1 = len(raw)/16
        len2 = len(raw)%16
        for s in range(len1):
            tmp1 = raw[s*16: s*16+16]
            tmp2 = ''
            tmp3 = ''
            for r in range(0,16,4):
                tmp2 += struct.pack("0:
            tmp1 = Swap(raw[len1*16:], len2)
            for r in range(len2):
                result += chr(ord(tmp1[r])^ord(key[r]))
        return result
    raw_packet = "4e0a8dec40d040ca2d2d882dc0e7cad82b5ade2b19b4a3f87e7c4c8825b2e9fc206c335059656972".decode('hex')
    dec_packet = "04021a0218000000060242000000000041384756465231425a3645594e4736333131314100000000".decode('hex')
    res = ReverseTransCodePartial(raw_packet)
    print(res.encode('hex'))
    if res == dec_packet:
        print("success")
从 libIOTCAPIs.so 版本1.7.0.0开始，已经实现了“更安全”的IOTC_Listen2()和IOTC_Connect_ByUID2()
但是，建立 P2P
连接使用的libP2PTunnelAPIs.so仍然使用的旧版本的接口IOTC_Listen()和IOTC_Connect_ByUID()，意味着建立的
P2P 连接仍没有得到保护。
后续版本中对该“解密”函数的实现略有调整，但差别不大，此处不再赘述。
**虽然该漏洞出现在 TUTK 的 P2P
组件中，实际上，无论采用何种方式（P2P/LAN/RELAY），只要使用该组件进行设备连接，均存在音频/视频被截取的风险。**
### AES misused
通过分析 libIOTCAPIs.so 的加密通信接口，我们发现其中还存在AES加密算法的误用问题。
根据文档， `IOTC_Listen2()`接口的参数 `cszAESKey` 表示加密密钥
    int IOTC_Listen2(unsigned int nTimeout, const char *cszAESKey, IOTCSessionMode 	nSessionMode);
当设备端调用该接口启动监听时，将 `cszAESKey` 保存到 session的 `PrivateKey`字段中
但是在调用 AES 加/解密时，却将`PrivateKey`字段作为初始向量IV使用，真正的 Ek/Dk 均为空
其中，AesCtx结构定义如下
    // AES context structure
    typedef struct {
     unsigned int Ek[60];
     unsigned int Dk[60];
     unsigned int Iv[4];
     unsigned char Nr;
     unsigned char Mode;
    } AesCtx;
在 libIOTCAPIs.so 的 3.1.10.7 版本中，我们还看到采用ECB分组模式的AES实现，其中使用了硬编码的密钥
## 影响范围评估
### 版本识别
根据 TUTK 的声明，所有版本低于 3.1.10 的 SDK 都会受到影响。通过提取库文件 libIOTCAPIs.so 或 IOTCAPIs.dll
中， `IOTC_Get_Version()` 函数的硬编码数值，可以识别设备端或客户端所使用到的 SDK 版本。
以某摄像头的客户端为例，将 `IOTC_Get_Version()` 函数的返回值由高位向低位逐字节读取即得结果，其版本为2.1.8.4。
    _DWORD *__fastcall IOTC_Get_Version(_DWORD *result)
    {
      if ( result )
        *result = 0x2010804;
      return result;
    }
我们采取这个方法对 FirmwareTotal 库中的 TUTK SDK 版本分布做出了评估，结果如下
### 厂商视角
厂商
|
受影响固件数量  
---|---  
美国 Shield Technology
|
96  
台湾威联通科技（QNAP）
|
55  
台湾利凌（LiLin）
|
51  
Tenvis
|
22  
台湾广盈（KGuard）
|
11  
Xiaomi
|
7  
美国趋网（TRENDnet）
|
5  
日本艾欧（IO DATA）
|
4  
Tenda
|
4  
Xiaoyi
|
4  
英国Zxtech
|
3  
台湾环名（HME）
|
1  
韩国Hanwha Techwin
|
1  
Relong
|
1  
### 固件视角
通过对 FirmwareTotal 中的固件进行关联分析发现，仅有 5
个固件包含了3.1.10以上版本（3.1.10.7）的SDK。对于低于该版本的SDK，统计包含其的固件数量分布如下：
SDK 版本
|
包含该版本SDK的固件数量  
---|---  
1.6.0.0
|
2  
1.9.1.0
|
142  
1.10.0.0
|
21  
1.10.2.0
|
54  
1.10.3.0
|
122  
1.10.5.0
|
1  
1.10.6.0
|
6  
1.10.7.0
|
1  
1.10.8.0
|
27  
1.11.0.0
|
2  
1.13.8.0
|
3  
2.1.3.0
|
13  
2.1.4.22
|
1  
2.1.8.4
|
1  
2.1.8.13
|
1  
3.0.0.0
|
1  
3.0.1.29
|
4  
3.1.4.48
|
1  
3.1.5.38
|
1  
### 厂商修复建议
参照TUTK官方给出的漏洞影响范围与修复措施：
**影响范围**
  * 3.1.10及更早版本
  * 带有nossl标签的SDK版本