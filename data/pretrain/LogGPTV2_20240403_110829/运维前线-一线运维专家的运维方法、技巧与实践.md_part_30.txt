## Page 173
7.3.1PHP进程的部署
些思考和实践，PHP部署可以包括以下三个内容：
方法有介绍单台服务器PHP部署的，有讲PHP配置参数的，却很少有讲“大规模集群”下
出差错，其实是很有挑战性的工作。网上有大量关于PHP 部署的教程，不难发现网上教程的
这些工作。如何在较短时间内完成多台、十几台、甚至几十、上百台服务器的部署，而且不
对配置文件按需要进行修改，启动进程，把PHP代码复制上去即可，稍有经验的人都能完成
7.3
讲其中的进程部署、代码发布、性能优化和故障处理这几个方面。
从中可以粗略地看出运维应该做的事情包括如下几项。
务。概括地说运维是服务于从立项到研发完成、到上线运营、到下线的整个业务生命周期。
问题能够快速定位并解决，甚至进一步让运行数据反向推动产品、研发、运营人员改进业
试完成的代码部署到服务器上，并保证以良好的状态持续运行，监控随时发生的状况，出了
运营”，在腾讯运维岗位被称为技术运营。在我的理解中运维是把产品设计、研发开发、测
并没有体现运维的价值。我个人很认同Google某大牛所说的，“运维是保证网站的可持续性
再修改配置文件，然后启动PHP-FPM，上传PHP代码。这种回答看起来也没什么错，然而
PHP的部署和配置变更的，讲PHP代码发布的也极少。本节将为大家分享一下我个人的一
首先来看看PHP进程的部署，常见的两种部署方式包括源码编译和官方软件包管理，
（3）PHP应用代码的发布。
（2）PHP配置文件的部署和变更。
（1）PHP进程的部署、升级，包括PHP 扩展的部署。
在一台服务器中进行 PHP 进程的部署、配置和代码发布都很简单，只要安装 PHP 进程，
运维要做的事情其实很多，每一个点都能体现出强大的运维能力。接下来几节将展开来
口数据分析反馈：对线上运行的状态能进行充分分析，把有用的结果反馈给研发和产品
口故障处理：出现故障后能快速定位到问题点。
口性能优化：网站出现性能问题时能进行运维侧的优化，可帮助研发优化代码性能，容
口稳定运行：保障用户进入网站页面后能一直顺利地完成整个业务流程。
口业务上线：PHP代码发布。
口部署：包括基础设施的资源部署、软件环境的部署。
如果有人问我们，PHP运维是做什么的？或许回答是这样的：首先安装PHP软件包
PHP进程部署和配置、代码发布
口监控：监控网站运行过程中的各种状态，如发生异常则告警。
推动产品进行下一次迭代。
量不够时可快速扩容。
第7章PHP运维实践157
---
## Page 174
过自动化来实现，只有通过自动化部署的平台，才能实现线上软件一致、版本一致、配置一
介绍一下YY自建包部署系统的设计思路。
手工的方式都没办法做到。所以很多大型互联网公司都会选择自建包部署系统，接下来我们
不能跟进程部署完全耦合，也不能完全隔离分开；跟公司的CMDB等运维系统打通。这些用
DO分离，不是每个人都可以去部署；软件要不断进行迭代升级和更新；配置文件要一致，
情况。运维部署进程还会碰到一些需要解决的问题，比如：发布生产环境要控制安全，要做
严重拖延业务的上线或变更时间，结果很难预期，很难保证每台都完全一样，会有很多意外
采用软件包管理的方式同样也存在一些问题，具体如下：
进行安装，然后修改配置参数，这种方式简单又高效，
有 RPM和 Debian、Ubuntu有 apt-get、CentOS 有YUM。通过Linux 官方包管理工具从仓库
结果会很不一样，甚至编译通不过。所以对服务器进行源码编译的方式不适合大规模部署。
扩展，可以编译、运行多个软件版本，但是会存在如下一些问题：
然后修改配置参数，启动进程。
运维工具来实现包部署的方法。
为自建包部署系统不是每个公司都能做的，因此我们在最后分析出几个核心点，简述用批量
然后介绍下互联网公司采用较多的自建包部署系统的方式，这里将重点介绍系统的思路。因
158运维前线：一线运维专家的运维方法、技巧与实践
源码编译可以更好地利用平台的特性，更灵活地指定一些优化参数，灵活地选择组件、
我所在的公司YY在服务端使用的是自建的包部署系统。大规模集群的部署必须要通
3.自建包部署系统
在服务器规模较大的环境中进行逐台手工编译或安装的方式会造成很多问题：耗时费力
口不方便定制各种优化参数。
口自建仓库也比较难实现多版本、多配置的服务。
口安装方式的目录结构零散，不能完全按照自己的意愿组织文件。
口官方仓库安装的版本太老旧，跟不上新版。
每个Linux 发行版都有各自的包安装方式和工具，
2.软件包管理
也有可能会因为服务器Linux稍微有点不一致（版本差异或人为配置差异），编译过程和
口若优化不好性能可能会更差。
口编译速度慢，时间长。
口编译比较复杂，需要掌握更多的技术，如要解决包之间的各种依赖。
口需要把源代码下载到每台服务器，时间长，效率低。
若要采用这种方式首先要下载 PHP的源码，执行configure、make、make install三板斧，
口不
1.源码编译
在自动化和运维可控性上较弱。
，官方会提供包的仓库。比如RedHat
一些公司也建立了自己的软件仓库，
---
## Page 175
可以自行安装和自行部署的组合，打包过程如图7-8所示。
系统打通，与整个运维体系整合在一起。接下来简单介绍下建设思路。
致、目录一致，这些都对后续的运维效率影响重大，至关重要，只有这样也才能实现与其他
我们定义的软件包指的是一组目标执行代码文件、脚本和配置文件，按照打包规范组成
4）PHP包的升级和发布
口写好了统一的监控脚本，在固定目录中定期执行监控脚本，并上报到公司监控系统。
口把所依赖的一些系统库文件，也放置到一个依赖目录，比如 libjpeg、libevent等，总
口把核心扩展（MySQL、APC等）编译进PHP可执行文件，常用的扩展（Redis、
口日志路径、配置路径、脚本路径、监听端口都统一规定好。
口配置文件 php.ini 和 php-fpm.conf均经过仔细优化，以适应公司的服务器机型，如
口专人编译PHP，全公司统一版本，编译参数是经过运维团队仔细考虑和优化过的，充
具体到PHP 包，我们的打包流程及其规范具体如下。
3）PHP打包规范
按规范打完包后接下来讲解如何部署软件包。
口环境规范：OS发行版本、系统库版本。
口部署规范：如何部署到目标服务器、路径、文件，对其他系统的依赖，启停脚本规范。
口打包规范：是指包括哪些内容、目录、版本、配置规范路径，文件名称，通用变量等
打包和部署的工作不只是一件将软件文件组成一个包的事情，还包括一系列的规范。
2）包部署规范
口有记录可供回溯：每一次的发布都有记录，方便管理、控制安全、后续审计等。
口灵活的运维需求：可以定制前后置脚本，比如监控、定期任务，跟其他运维系统打
口管理配置：配置文件的修改也是经常会发生的事情，可以通过系统统一修改下发配置
口发布效率：包部署的效率比每次编译和仓库安装快N倍，而且不容易出错，包括回滚
口统一管理：不用大家都去编译一个版本，一次编译，全网部署，全网一致。
通过包部署系统来实现我们的运维目标。
1）运维目标
之把包发下去不会影响现在的系统库，也不会依赖太多的系统和第三方库。
MongoDB、Memcached等）编译成独立的.so文件，放在扩展目录下。
Web类服务器的内存和CPU情况。
L
通等。
文件。
的能力和效率。
的意见，兼顾了大家的需求。
分考虑公司的Linux发行版，不同OS 发行版采用不同的包，收集了大部分PHP团队
监控规范：需要哪些脚本，脚本名称规范、定期执行规范、上报规范、自动监控、拉起。
第7章PHP运维实践159
---
## Page 176
集中服务器，部署的时候通过Puppet、
能基本实现整个流程。打包过程还是一样，最后不用传到系统，而是以 tar包的形式保存在
T
部署过程如图7-9所示：
选择你的PHP-FPM需要的包和版本，选择或输人目标服务器IP，点击部署就可以开始了。
续运行的，在包部署系统中也能进行启动、停止、升级等各种操作。医溜
分配一个新的包版本号。升级包可以替换包的任何部分。这样各个版本的包还是可以在线继
种调整可以通过升级包版本的方式来完成，而不是重新打另外一个包。对于升级的包我们会
解压，执行前置，
不是每个公司都有能力开发这样的部署系统，了解了核心思路后通过一些简化的做法也
当业务需要往一台服务器中部署 PHP-FPM 包时，我们一般的流程是先到包部署系统中
说到大规模部署，
首次打好的PHP-FPM包要能够满足当前的需要，后期可能会根据需要做一些调整。这
运维前线：
图7-8
规
环
规
规
部
规
打
范
范
控
包范署
打包过程示意图
本
级
：一线运维专家的运维方法、
部署，后置脚本，部署监控脚本等。
在包部署系统创建/升
文
组织可执行文件、库
目前容器技术也很热门，也有公司把PHP等进程直接做成VM镜像，
等信息
组织优化配置文件
源
写好前后置动作
文件上传到系统
把编译好的各种
脚本、监控脚本
件
码，
载需要的软件版
生成软件包
优化参数编译
本
、SaltStack、Ansible等批量运维工具分发到目标服务器
技巧与实践
图7-9
规
部规监规环
署范控范境范
包部署过程示意图
拉下来，解包
把包从中心服务器
服务器执行部署
选择或输入目标
选择软件包、版本
执行后置脚本
执行前置脚本
进入包部署系统
启动软件进程
---
## Page 177
件。比如新的高性能服务器需要使用更多的进程数，为它单独分配一个配置文件，又比如为
发1-2台服务器，成功了再发全部。
到目标服务器，并重启PHP进程。这里的目标服务器一般以应用模块为单位，比如说登录模
内容是保存在数据库中的。可以根据服务器和应用模块来查看。
session 保存在哪里、此次请求最大的内存大小、错误日志、语言特性、可以上传多大的文
对通过这个进程处理的每一个请求都有效。比如PHP 工作进程启动时要载入哪些扩展、将
活地管理变更这些配置文件，变更后不会造成混乱，这是运维团队及运维平台是否成熟的
软件的运行方式和运行状态，修改配置文件是运维的日常工作。是否能够高效、准确又灵
要考虑建立配置文件管理系统。配置文件是运维标准化、自动化中非常重要的一环，决定了
可能逐台去登录修改了，必须通过 SaltStack、Ansible等批量运维工具来实现。再进一步就
变更。“
分，很多时候不需要变更软件，而只需要修改配置文件。接下来我们讲解PHP 配置文件的
业务场景，比如不同的服务器资源，负载不同的业务。配置文件也是线上修改比较频繁的部
7.3.2PHP配置文件变更
范畴，这里不会展开来讲，有兴趣的读者可以自行查找资料。
或者打成Docker镜像。通过VM和Docker的部署来实现进程的部署。容器技术属于另外的
块有4台服务器，一般会同时修改这个模块的全部服务器。当然有灰度能力就更方便了，先
件、
文件描述符数量、队列、监听端口等。
体现。
（3）如果是与包部署系统结合的方式，可以为每个包先做多个满足不同场景的配置文
）进行手工部署的时候，也需要登录服务器修改配置文件，当服务器有10台以上时，不
（2）变更部署：一般是在默认配置文件的基础上修改参数，修改了配置后可以快速下发
、日志文件的路径等。
php.ini 文件：用于控制 PHP工作进程处理请求时的相关参数。配置项对应于工作进程，
（1）配置查看：查看配置文件的内容、配置变更历史、查看某版本的配置文件。查看的
php-fpm.conf文件：用于控制PHP-FPM 管理进程的相关参数。比如工作子进程的数量
PHP有两个重要的配置文件，php.ini和php-fpm.conf。
配置文件是服务器软件的重要组成部分，使用不同参数的配置文件可以满足各种特定的
不管是采用哪种配置文件管理方式，都应该包含以下的核心功能。
口独立的配置文件管理系统：通过自动化运维系统变更配置文件，首次部署软件时初始
口配置文件跟PHP代码一起发布：发布业务代码时将配置文件也随之发布。
口包部署系统管理配置文件：将配置文件的变更当做一次软件升级。
那我们应该怎样快速修改这些配置文件呢，有如下几种常见的做法
化了配置文件，后续的变更都通过配置文件管理系统来进行。
第7章PHP运维实践161
---
## Page 178
了解配置项（php-fpm.conf配置项的分类如图7-10所示，php.ini配置项的分类如图 7-11所示）:
上这类资料也比较容易获取，因此我们仅用思维导图把这些配置项进行分类，希望能帮助大家
7.3.3
能从配置查服务器和模块。
单独的管理。比如说某些服务器使用了特殊配置，应该既能从应用模块或服务器查配置，也
同的配置文件。在部署包的时候选择需要的配置文件。
某特殊的应用使用一份特殊的配置文件。测试环境、预发布环境、生产环境可以使用各自不
162运维前线：一线运维专家的运维方法、技巧与实践
memorylimit
法（4）历史记录可以记录每次的变更历史、发布历史，以及修改了的配置文件，需要进行
PHP 配置文件 php.ini和 php-fpm.conf 中的配置项非常多，因为本节的重点不在于此，加
systemd_interval
HOSTNAME
rlimit_core
PHP配置项
error_log
TEMP
PATH
TMR
epoll
process
php admin
env
global
图7-10php-fpm.conf配置项分类
FPM 配置项
pool directives
slowlog
pingresponse
processmanager-
user
listen
chroot
chdir
clear env
prefix
rlimit files
ping
slowlog
group
request sowlog_timeout
allowed_clients
owner
listen
status_path
max requests
process idle timeout
man spare_servers
children
---
## Page 179
;cgi.redirect status env
default socket timeout
;cgi.rfc2616 headers
always_populate_raw_post_data