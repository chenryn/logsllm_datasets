# 九、介绍 Kubernetes 的 Helm
在前一章中，我们学习了如何安装和使用 Kustomize。这一章，我们来了解一下 Helm ( [https://helm.sh](https://helm.sh) )。
Helm 是事实上的 Kubernetes 包管理器，也是在 Kubernetes 上安装任何复杂应用的最佳和最简单的方法之一。
Helm 不是`kubectl`的一部分，也没有`kubectl`插件，但是它在 Kubernetes 空间中发挥了很大的作用，是一个必知的工具。
在本章中，我们将学习 Helm v3，特别是如何安装应用，升级和回滚应用版本，创建和 lint Helm 图表，以及使用插件扩展 Helm。
注意
我们将使用 Helm v3，因为在撰写本文时它是 Helm 的最新版本。
我们将在本章中讨论以下主题:
*   Helm 简介
*   使用 Helm 图表安装应用
*   升级 Helm 版本
*   回滚到以前的 Helm 版本
*   使用 Helm 的模板命令
*   创建掌舵图
*   使用 Helm 的林挺功能
*   用插件扩展头盔
# Helm 简介
Helm 是一个 Kubernetes 包管理器，允许开发人员和用户以一种简单的方式将 Kubernetes 应用打包、配置、共享和部署到 Kubernetes 集群上。
你可以认为 Helm 和家酿/APT/Yum 包管理器一样，但是对于 Kubernetes 来说。
Helm v3 基于纯客户端架构。它以与`kubectl`相同的方式连接到 Kubernetes 应用编程接口，使用包含 Kubernetes 集群连接设置的`kubeconfig`文件。所以在`kubectl`工作的地方，Helm 命令行界面也将工作，使用相同的`kubectl`功能和权限。
为了更好地理解 Helm，您应该熟悉以下概念:
*   **Helm CLI**:命令行工具与 Kubernetes API 交互，执行各种功能，如安装、升级和删除 Helm 版本。
*   **一个图表**:这是描述 Kubernetes 资源的模板文件的集合。
*   **图表模板**:图表中使用的掌舵图表模板语言。
*   **存储库**:Helm 存储库是存储和共享打包图表的地方。
*   **发布版本**:部署到 Kubernetes 集群的图表的特定实例。
让我们在接下来的几节中详细了解一下它们。
## Helm CLI
Helm 命令行界面可以使用以下命令安装在不同的操作系统上:
*   在 macOS 上安装如下:
    ```
    $ brew install helm
    ```
*   在 Windows 上安装是通过以下命令完成的:
    ```
    $ choco install kubernetes-helm
    ```
*   在 Linux 上安装如下:
    ```
    $ https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
    ```
您可以通过`helm –h`获得所有可用的 Helm CLI 命令。让我们列出最常用的，以及它们的描述:
*   `helm repo add`:在本地缓存列表中增加一个 Helm 图表库，之后我们可以引用它从库中拉图表。
*   `helm repo update`:获取图表库的最新信息；信息存储在本地。
*   `helm search repo`:在给定的存储库中搜索图表。
*   `helm pull`:从图表库中下载给定的图表。
*   `helm upgrade -i`:如果没有版本那就安装，否则升级版本。
*   `helm ls`:列出当前命名空间中的版本。如果提供了`-A`标志，它将列出所有的名称空间。
*   `helm history`:打印给定版本的历史版本。
*   `helm rollback`:将一个版本回滚到以前的版本。
*   `helm template`:在本地渲染图表模板并显示输出。
*   `helm create`:创建图表。
*   `helm lint`:绘制图表。
*   `helm plugin`:安装、列出、更新和卸载 Helm 插件。
让我们在接下来的章节中更详细地学习其中的每一个。
## 头盔图表
图表是一个掌舵包。它是描述 Kubernetes 资源的模板文件的集合。它使用模板来创建 Kubernetes 清单。
示例 Helm 图表结构如下所示:
![Figure 9.1 – hart folders layout ](img/B16411_09_001.jpg)
图 9.1–图表文件夹布局
让我们详细讨论一下前面的一些内容:
*   `Chart.yaml`:包含图表元数据信息的文件。
*   `charts`:存放子图表的文件夹。
*   `templates`:存放模板文件的文件夹。
*   `values.yaml`: A YAML-formatted file with configuration values used by the chart templates. These values can be resources, replica counts, or an image repository and tag, among other things.
    小费
    要更改值，建议使用`override-values.yaml`文件，在该文件中只需输入要更改的值。不建议更改图表附带的默认`values.yaml`文件，因为您可能会丢失该文件较新版本的更改记录。
既然我们已经学习了 Helm 图表结构的一些基础知识，让我们深入到图表模板化。
## 图表模板
Helm 最强的特性是图表模板化。Helm 模板语言基于 Go 语言包`text/template`语法。与模板语法一起使用的值可用于自定义 Kubernetes 资源清单。在安装图表之前，Helm 通过注入指定的值来呈现图表的模板，然后安装图表。
数值从图表附带的默认`values.yaml`文件或用户提供的文件中读取，例如名为`override-values.yaml`的文件。两个文件的值将被合并，然后应用于图表。
让我们看一下下面的图表模板示例:
![Figure 9.2 – Chart template example ](img/B16411_09_002.jpg)
图 9.2–图表模板示例
Helm 模板是一个 Kubernetes 服务资源，上面的代码片段允许我们设置服务类型和端口。如果默认值不符合您的要求，您可以通过使用自定义`override-values.yaml`文件提供新的默认值来更改默认值。
其他值如`name`、`labels`、`selector`从`_helpers.tpl`文件注入，这是模板部分的默认位置:
![Figure 9.3 – A partial example of _helpers.tpl ](img/B16411_09_003.jpg)
图 9.3–助手的部分例子
前面的代码片段是`_helpers.tpl`文件的一部分，该文件定义了要注入到图表模板中的标签和选择器。
## 储存库
存储库是存储和共享打包图表的位置。它可以是任何能够提供文件的网络服务器。存储库中的图表以压缩的`.tgz`格式存储。
## 释放
发布是部署到 Kubernetes 集群的图表的特定实例。一个 Helm 图表可以使用同一个发布名称安装多次，每次都会创建一个新的发布版本。
特定发布的发布信息存储在与发布本身相同的命名空间中。
您可以使用相同的发行版名称但是不同的命名空间安装相同的 Helm 图表无数次。
现在我们已经学习了 Helm 的一些基础知识，让我们开始使用图表来安装应用。
# 使用 Helm 图表安装应用
有许多 Helm 图表库，逐个设置它们太麻烦了。
相反，我们将使用作为我们的中央 Helm 图表存储库 [https://chartcenter.io](https://chartcenter.io) ，它有 300 多个 Helm 存储库，可以作为我们从一个位置安装所有图表的唯一真实来源。它还有一个很好的用户界面，你可以在这里搜索图表并获得关于它们的非常详细的信息:
![Figure 9.4 – ChartCenter UI ](img/B16411_09_004.jpg)
图 9.4–图表中心用户界面
上一张截图显示了图表中心**界面**。
将 ChartCenter 设置为您的中央 Helm 存储库也非常容易，如下所示:
```
$ helm repo add center**https://repo.chartcenter.io**
"center" has been added to your repositories
$ helm repo update
Hang tight while we grab the latest from your chart repositories...
...Successfully got an update from the "center" chart repository
Update Complete. Happy Helming!
```
前面的命令添加了`center`图表存储库，并用其内容更新了 Helm 本地缓存。
现在我们可以尝试通过运行`$ helm search repo center/bitnami/postgresql -l | head -n 5`命令来搜索`postgresql`图表:
![Figure 9.5 – Searching for PostgreSQL chart ](img/B16411_09_005.jpg)
图 9.5–搜索 PostgreSQL 图表
在前面的截图中，我们可以看到我们获得了 Bitnami PostgreSQL 图表的最新五个版本。
在安装 PostgreSQL 图表之前，我们应该设置一个密码，因为设置自己的密码而不是使用 Helm 图表生成的密码是一个很好的做法。
通过阅读图表中位于 https://chartcenter.io/bitnami/postgresql T2 的 T0，我们可以找到我们需要使用的值名:
![Figure 9.6 – PostgreSQL chart password ](img/B16411_09_006.jpg)
图 9.6–PostgreSQL 图表密码
前面的截图告诉我们需要`values.yaml`文件中的`postgresqlPassword`变量来设置 PostgreSQL 图表的密码。
首先，让我们创建一个`password-values.yaml`文件来存储 PostgreSQL 密码:
```
$ echo "postgresqlPassword: SomeVerySecurePassword" > password-values.yaml
```
让我们使用以下命令安装它:
```
$ helm upgrade –i postgresql center/bitnami/postgresql --version=9.2.1 -f password-values.yaml
```
下面的屏幕截图显示了前面命令的输出:
![Figure 9.7 – Helm installing the PostgreSQL chart ](img/B16411_09_007.jpg)
图 9.7–Helm 安装 PostgreSQL 图表
前面的命令将名为`postgresql`的 PostgreSQL 图表安装到了当前的命名空间中。
小费
前面的`helm upgrade`命令有一个`–i`标志(长名称为`--install`，它允许我们在第一次安装和之后的升级中使用相同的命令。
让我们使用以下命令检查图表安装了什么:
```
$ kubectl get all
```
下面的屏幕截图显示了前面命令的输出:
![Figure 9.8 – Listing all installed resources ](img/B16411_09_008.jpg)
图 9.8–列出所有已安装的资源
在前面的截图中，我们可以看到`postgresql`Pod ，两个`postgresql-`相关服务，以及`statefulset`。查看`service/postgresql`，可以看到`postgresql`在`postgresql:5432`上可以被其他 Kubernetes 应用访问。
让我们通过运行以下命令来检查所有机密是否都已正确创建:
```
$ kubectl get secret
```
下面的屏幕截图显示了前面命令的输出:
![Figure 9.9 – Listing all installed secrets ](img/B16411_09_009.jpg)
图 9.9–列出所有已安装的机密
在前面的截图中，我们看到了存储 PostgreSQL 密码的`postgresql`机密和存储 Helm 发布信息的`sh.helm.release.v1.postgresql.v1`。
现在，让我们通过运行以下命令来检查当前命名空间中的 Helm 版本:
```
$ helm ls
```
下面的屏幕截图显示了前面命令的输出:
![Figure 9.10 – Listing Helm releases ](img/B16411_09_010.jpg)
图 9.10–列出 Helm 版本
在前面的截图中，我们看到了`postgresql`的一个成功部署的 Helm 版本，其中我们有以下列表:
*   `STATUS`:显示释放状态为`deployed`
*   `CHART`:显示图表名称和版本为`postgresql-9.2.1`
*   `APP VERSION`:显示 PostgreSQL 版本；在这种情况下，`11.9.0`
这很容易安装——我们只需要提供密码，boom，我们有一个完整安装的 PostgreSQL 实例，它的密码甚至存储在机密中。
# 升级头盔版本
在前一节中，我们安装了 PostgreSQL，所以现在让我们尝试升级它。我们需要知道如何做到这一点，因为它将不得不不时升级。
对于升级，我们将使用最新的 PostgreSQL 图表版本，即`9.3.2.`
让我们使用以下命令获取并运行升级:
```
$ helm upgrade –i postgresql center/bitnami/postgresql --version=9.3.2 -f password-values.yaml
```
下面的屏幕截图显示了前面命令的输出:
![Figure 9.11 – Listing Helm releases ](img/B16411_09_011.jpg)
图 9.11–列出 Helm 版本
我们运行了前面的`helm upgrade`命令将`postgresql`图表版本更改为`9.3.2`，但是我们看到 PostgreSQL 版本仍然和原来一样，也就是`11.9.0`，所以这意味着图表本身收到了一些更改，但是应用版本保持不变。
运行`helm ls`显示`REVISION 2`，这意味着 PostgreSQL 图表的第二次发布。
让我们通过运行以下命令再次检查这些机密:
```
$ kubectl get secrets
```
下面的屏幕截图显示了前面命令的输出:
![Figure 9.12 – Listing Helm releases ](img/B16411_09_012.jpg)
图 9.12–列出 Helm 版本
从前面的截图中，我们可以看到一个新的机密，`sh.helm.release.v1.postgresql.v2`，这是 PostgreSQL 升级版本的存储位置。