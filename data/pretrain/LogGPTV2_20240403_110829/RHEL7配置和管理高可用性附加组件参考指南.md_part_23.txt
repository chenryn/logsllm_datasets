:::
防止资源在干净节点关闭中进行故障的功能是通过下列集群属性实现的。
::: variablelist
[shutdown-lock]{.term}
:   当将此集群属性设置为 `false`{.literal}
    的默认值时，集群将恢复在被完全关闭的节点上活跃的资源。当此属性设为
    `true`{.literal}
    时，在被完全关闭的节点上活跃的资源将无法在其它位置启动，直到它们在重新加入集群后在该节点上再次启动。
    `shutdown-lock`{.literal}
    属性适用于群集节点或远程节点，但不适用于客户机节点。
    如果 `shutdown-lock`{.literal} 设为
    `true`{.literal}，您可以在节点关闭时删除一个集群资源的锁定，以便可通过使用以下命令在节点上手动刷新来在其它位置启动资源。
    ``` screen
    pcs resource refresh resource --node node
    ```
    请注意，资源被解锁后，集群就可以自由地将资源移至其他位置。您可以使用粘性值或位置首选项来控制发生这种情况的可能性。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    只有在您第一次运行以下命令时，手动刷新才可以在远程节点中使用：
    ::: orderedlist
    1.  在远程节点上运行 [**systemctl stop pacemaker_remote**]{.command}
        命令，以停止该节点。
    2.  运行 [**pcs resource disable
        *`remote-connection-resource`***]{.command} 命令。
    :::
    然后您可以在远程节点上手动进行刷新。
    :::
[shutdown-lock-limit]{.term}
:   当将此集群属性设置为默认值 0
    以外的其他值时，如果节点在启动关闭后的指定时间内没有重新加入，则资源将在其他节点上可用。但请注意，时间间隔不会比
    `cluster-recheck-interval`{.literal} 集群属性的值更频繁地检查。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    只有在您第一次运行以下命令时，`shutdown-lock-limit`{.literal}
    属性才能用于远程节点：
    ::: orderedlist
    1.  在远程节点上运行 [**systemctl stop pacemaker_remote**]{.command}
        命令，以停止该节点。
    2.  运行 [**pcs resource disable
        *`remote-connection-resource`***]{.command} 命令。
    :::
    运行这些命令后，当因 `shutdown-lock-limit`{.literal}
    指定的时间已过后，远程节点上运行的资源将可用于在其他节点上恢复。
    :::
:::
:::
::: section
::: titlepage
## []{#ch-advancedresource-HAAR.html#s2-setting-shutdownlock-HAAR}设置 shutdown-lock 集群属性 {.title}
:::
以下示例将示例集群中的 `shutdown-lock`{.literal} 集群属性设置为
`true`{.literal}，并显示在关闭并再次启动节点时的影响。这个示例集群由三个节点组成：z
`1.example.com`{.literal}、`z2.example.com`{.literal} 和
`z3.example.com`{.literal}。
::: orderedlist
1.  将 `shutdown-lock`{.literal} 属性设为 `true`{.literal}
    并验证其值。在本例中，`shutdown-lock-limit`{.literal}
    属性维护其默认值 0。
    ``` screen
    [PI:EMAIL ~]# pcs property set shutdown-lock=true
    [PI:EMAIL ~]# pcs property list --all | grep shutdown-lock
    shutdown-lock: true
    shutdown-lock-limit: 0
    ```
2.  检查集群的状态。在本例中，资源 `三`{.literal} 和 `第五个`{.literal}
    在 `z1.example.com`{.literal} 上运行。
    ``` screen
    [PI:EMAIL ~]# pcs status
    ...
    Full List of Resources:
    ...
    * first	(ocf::pacemaker:Dummy):	Started z3.example.com
    * second	(ocf::pacemaker:Dummy):	Started z2.example.com
    * third	(ocf::pacemaker:Dummy):	Started z1.example.com
    * fourth	(ocf::pacemaker:Dummy):	Started z2.example.com
    * fifth	(ocf::pacemaker:Dummy):	Started z1.example.com
    ...
    ```
3.  关闭 `z1.example.com`{.literal}，这将停止该节点上运行的资源。
    ``` screen
    [PI:EMAIL ~] # pcs cluster stop z1.example.com
    Stopping Cluster (pacemaker)...
    Stopping Cluster (corosync)...
    ```
    运行 [**pcs status**]{.command} 命令可显示节点
    `z1.example.com`{.literal} 脱机，并且 `z1.example.com`{.literal}
    上运行的资源在节点停机时为 `LOCKED`{.literal}。
    ``` screen
    [PI:EMAIL ~]# pcs status
    ...
    Node List:
    * Online: [ z2.example.com z3.example.com ]
    * OFFLINE: [ z1.example.com ]
    Full List of Resources:
    ...
    * first	(ocf::pacemaker:Dummy):	Started z3.example.com
    * second	(ocf::pacemaker:Dummy):	Started z2.example.com
    * third	(ocf::pacemaker:Dummy):	Stopped z1.example.com (LOCKED)
    * fourth	(ocf::pacemaker:Dummy):	Started z3.example.com
    * fifth	(ocf::pacemaker:Dummy):	Stopped z1.example.com (LOCKED)
    ...
    ```
4.  在 `z1.example.com`{.literal}
    上再次启动群集服务，使其重新加入集群。锁定的资源应该在这个节点上启动，但当它们启动后，它们不一定会停留在同一个节点上。
    ``` screen
    [PI:EMAIL ~]# pcs cluster start z1.example.com
    Starting Cluster...
    ```
    在本例中，会在节点 z1.example.com 上恢复第三和第五个节点。
    ``` screen
    [PI:EMAIL ~]# pcs status
    ...
    Node List:
    * Online: [ z1.example.com z2.example.com z3.example.com ]
    Full List of Resources:
    ..
    * first	(ocf::pacemaker:Dummy):	Started z3.example.com
    * second	(ocf::pacemaker:Dummy):	Started z2.example.com
    * third	(ocf::pacemaker:Dummy):	Started z1.example.com
    * fourth	(ocf::pacemaker:Dummy):	Started z3.example.com
    * fifth	(ocf::pacemaker:Dummy):	Started z1.example.com
    ...
    ```
:::
:::
:::
:::
[]{#ch-Quorum-HAAR.html}
::: chapter
::: titlepage
# []{#ch-Quorum-HAAR.html#ch-Quorum-HAAR}第 10 章 集群仲裁 {.title}
:::
红帽企业 Linux 高可用性附加组件群集使用 `votequorum`{.literal}
服务和隔离以避免脑裂问题。为集群中的每个系统分配一组投票机制，只能在大多数投票机制都存在时才允许执行集群操作。该服务必须被加载到所有节点或无节点
; 如果服务被载入到集群节点的一个子集，则结果将无法预计。有关
`votequorum`{.literal} 服务的配置和操作的详情，请查看
[**votequorum**]{.command}(5)手册页。
::: section
::: titlepage
# []{#ch-Quorum-HAAR.html#s1-clusterquorum-HAAR}配置仲裁选项 {.title}
:::
使用 [**pcs cluster setup**]{.command}
命令创建集群时，可以设置仲裁配置的一些特殊功能。[表 10.1
"仲裁选项"](#ch-Quorum-HAAR.html#tb-quorumoptions-HAAR "表 10.1. 仲裁选项"){.xref}
总结了这些选项。
::: table
[]{#ch-Quorum-HAAR.html#tb-quorumoptions-HAAR}
**表 10.1. 仲裁选项**
::: table-contents
+----------------------------------+----------------------------------+
| 选项                             | 描述                             |
+==================================+==================================+
| `--auto_tie_breaker`{.literal}   | 启                               |
|                                  | 用后，集群可能会以确定的方式达到 |
|                                  | 50%                              |
|                                  | 个节                             |
|                                  | 点同时失败的情况。群集分区或仍与 |
|                                  | `                                |
|                                  | auto_tie_breaker_node`{.literal} |
|                                  | 中配置的 `nodeid`{.literal}      |
|                                  | 联系                             |
|                                  | 的节点集合（如果未设置则为最低的 |
|                                  | `nodeid`{.literal}               |
|                                  | ）将保持法定状态。其他节点将为   |
|                                  | inquorate。                      |
|                                  |                                  |
|                                  | `auto_tie_breaker`{.option}      |
|                                  | 选项主要用于具有偶数节点的群集， |
|                                  | 因为它允许群集继续使用平均分割操 |
|                                  | 作。对于更复杂的故障，如多个不一 |
|                                  | 致的分割，建议您使用仲裁设备，如 |
|                                  | ["仲裁设备                       |
|                                  | "一节](#ch-Quorum-HAAR.html#s1-q |
|                                  | uorumdev-HAAR "仲裁设备"){.xref} |
|                                  | 所                               |
|                                  | 述。`auto_tie_breaker`{.option}  |
|                                  | 选项与仲裁设备不兼容。           |
+----------------------------------+----------------------------------+
| `--wait_for_all`{.literal}       | 在启用后，                       |
|                                  | 只有在所有节点都最少同时可见一次 |
|                                  | 后，集群才会第一次处于仲裁状态。 |
|                                  |                                  |
|                                  | `wait_for_all`{.option}          |
|                                  | 选项主要用于                     |
|                                  | 双节点群集，以及用于使用仲裁设备 |
|                                  | `lms(`{.literal} last man        |
|                                  | standing)算法的双向群集。        |
|                                  |                                  |
|                                  | 当群集具有两                     |
|                                  | 个节点并且不使用仲裁设备并且禁用 |
|                                  | ` auto_tie_br                    |
|                                  | eaker 时，wait_for_all`{.option} |
|                                  | ``{=html}                 |
|                                  | 选项会自动启用。您可以通过将     |
|                                  | `wait_for_all`{.option}          |
|                                  | 明确设置为 0 来覆盖它。          |
+----------------------------------+----------------------------------+
| `--last_man_standing`{.literal}  | 启用后，                         |
|                                  | 集群可以在特定情况下动态重新计算 |
|                                  | `expected_votes`{.literal}       |
|                                  | 和                               |
|                                  | 仲裁。启用这个选项时，您必须启用 |
|                                  | `wait_for_all`{.literal          |
|                                  | }。`last_man_standing`{.literal} |
|                                  | 选项与仲裁设备不兼容。           |
+----------------------------------+----------------------------------+
| `--las                           | 在集群丢失节点后，在重新计算     |
| t_man_standing_window`{.literal} | `expected_votes`{.literal}       |
|                                  | 和仲裁前需要等待的时间（毫秒）。 |
+----------------------------------+----------------------------------+
:::
:::
有关配置和使用这些选项的详情，请查看 [**votequorum**]{.command}(5)man
page。
:::
::: section
::: titlepage
# []{#ch-Quorum-HAAR.html#s1-quorumadmin-HAAR}仲裁管理命令（Red Hat Enterprise Linux 7.3 及稍后） {.title}
:::
在集群运行时，您可以输入以下的集群仲裁命令。
以下命令显示制裁配置。
``` screen
pcs quorum [config]
```
以下命令显示制裁运行时状态。
``` screen
pcs quorum status
```
如果您将节点长时间移出集群，且这些节点丢失会导致仲裁丢失，您可以使用
[**pcs quorum `expected-votes 命令更改实时群集的 expected_`{.literal}
votes**]{.command} 参数值。这可让集群在没有仲裁的情况下继续操作。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
在 Live
集群中更改预期投票时应特别小心。如果因为您手动更改了预期的投票，集群的少于
50%
的部分在运行，那么集群中的其他节点就可以单独启动并运行集群服务，从而导致数据崩溃和其他意外结果。如果更改了这个值，您应该确保启用了
`wait_for_all`{.literal} 参数。
:::
以下命令将 live 集群中的预期 vote
设置为指定的值。这只会影响实时集群，且不会更改配置文件；如果重新加载，则
`expected_votes`{.literal} 的值将重置为配置文件中的值。
``` screen
pcs quorum expected-votes votes
```
:::
::: section
::: titlepage
# []{#ch-Quorum-HAAR.html#s1-quorumoptmodify-HAAR}修改仲裁选项（红帽企业 Linux 7.3 及更新的版本） {.title}
:::
从 Red Hat Enterprise Linux 7.3 开始，您可以使用 [**pcs quorum
update**]{.command}
命令修改集群的常规仲裁选项。您可以在正在运行的系统上修改
[**quorum.two_node**]{.command} 和 [**quorum.expected_votes**]{.command}
选项。对于所有其他仲裁选项，执行此命令要求停止群集。有关仲裁选项的详情，请查看
[**votequorum**]{.command}(5)man page。
[**pcs quorum update**]{.command} 命令的格式如下。
``` screen
pcs quorum update [auto_tie_breaker=[0|1]] [last_man_standing=[0|1]] [last_man_standing_window=[time-in-ms] [wait_for_all=[0|1]]
```
以下一系列命令修改 `wait_for_all`{.literal} 仲裁选项并显示
选项的更新状态：请注意，系统不允许在集群运行时执行这个命令。
``` screen
[root@node1:~]# pcs quorum update wait_for_all=1
Checking corosync is not running on nodes...
Error: node1: corosync is running
Error: node2: corosync is running
[root@node1:~]# pcs cluster stop --all
node2: Stopping Cluster (pacemaker)...