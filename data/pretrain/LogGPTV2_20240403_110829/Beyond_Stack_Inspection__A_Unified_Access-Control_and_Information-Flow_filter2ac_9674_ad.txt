### R.5: This would have been the only check performed by the SBAC test.

1. **Verify that the frame of the boolean value pointed to by `append` contains `R`.**  
   The failure of this check is caused by the fact that the value of `append` is read during a security-sensitive operation, which is guarded by the `checkPermission` call. This test succeeds because the frame for `append` is `All`.

2. **Similarly, verify that the frame of the String object pointed to by `name` contains `R`.**  
   This test fails because the frame for `name` is `∅`.

**Conclusion:**
- IBAC causes the security-sensitive operation to fail due to the detected integrity violation.
- SBAC would not have recognized the integrity violation, allowing `b.m1` to overwrite the contents of `passwords.txt`.
- HBAC would also cause the program to fail, but only because the execution of `b.m1` is in the history.

### Another Example: Program in Figure 3

Assume an untrusted client invokes `m2` on an object `c` of type `C` after setting `c.logFileName` to `"passwords.txt"`. The frame for this value will be `All ∩ R2 = ∅`.

**Following the same reasoning as in the example of Figure 1:**

- **The String object pointed to by `name` in the constructor `FileOutputStream(File, boolean)` is framed with `∅`** because it is the return value of `file.getPath`, which returns exactly the object assigned to `logFileName` by the untrusted client. The value of `name` is control-dependent on the `File` object pointed to by `file`, which is framed with `∅`, so `s(pc) = ∅`.
- **The value of the boolean parameter `append` in the `FileOutputStream(String, boolean)` constructor is framed with `All ∩ R2 = All`**.

**IBAC Test Operations:**

1. **Verify that the set `D` of dynamic permissions associated with the current stack of execution contains the singleton `R = {FilePermission("passwords.txt", "write")}`.**  
   This test succeeds because `D = R1 ⊃ R`. The presence of `doPrivileged` on the stack prevents `R2` from being part of the computation of `D`. This would have been the only test performed by SBAC.

2. **Verify that the frame of the boolean value pointed to by `append` contains `R`.**  
   This test also succeeds because the frame is `All`.

3. **Verify that the frame of the String object pointed to by `name` contains `R`.**  
   This test fails because the frame is `∅`.

**Conclusion:**
- IBAC dynamically detects the presence of tainted variables in privilege-asserting code, solving a serious problem previously identified in the literature [33], and forces programs permitted by SBAC to fail.

### Difference Between IBAC and HBAC: Program in Figure 4

When the IBAC test is performed, the values used in the security-sensitive operation are framed as follows:

- **The String object pointed to by `name` in the `FileOutputStream(File, boolean)` constructor is framed with `R1`** because it is the return value of `file.getPath`, which returns exactly the String object `"passwords.txt"` allocated to `FileOutputStream(String)`. The value of `name` is control-dependent on the `File` object pointed to by `file`, which is also framed with `R1`.
- **The value of the boolean parameter `append` in the `FileOutputStream(File, boolean)` constructor is framed with `All`** because it originated from the `FileOutputStream(String)` constructor.

**IBAC Test Operations:**

1. **Verify that the set `D` of dynamic permissions associated with the current stack of execution contains the singleton `R = {FilePermission("passwords.txt", "write")}`.**  
   This test succeeds because `D = R1 ⊃ R`.

2. **Verify that the frame of the boolean value pointed to by `append` contains `R`.**  
   This test also succeeds because the frame is `All`.

3. **Verify that the frame of the String object pointed to by `name` contains `R`.**  
   This test succeeds because the frame is `R1 ⊃ R`.

**HBAC Test:**
- HBAC would unjustly cause this program to fail because `g.m3` is in the history, and class `G` has been granted no permissions.

### 4.2 Production-level Code

The programs in Sections 1.1 and 1.2 are not contrived examples but are inspired by production-level code. Currently, the core of the Eclipse platform, called the Rich Client Platform (RCP), is undergoing extensive code rewriting to permit it to run with security enabled [15]. This work uses a static analyzer to model the stack inspection mechanism [39] and detect the permission set required by each RCP component [27], as well as the security-sensitive operations that should be wrapped into privilege-asserting blocks of code to shield other Eclipse components from unnecessary permission requirements [33].

**Problem with SBAC:**
- An untrusted component may influence the security-sensitive operations performed in a more trusted component without being on the stack of execution when the security check is performed.

**Concrete Example:**
- Method `evaluate` in `SystemTestExpression` in the `org.eclipse.core.expressions` RCP component accesses a security-sensitive system property through the following code:
  ```java
  String str = (String) AccessController.doPrivileged(
      new PrivilegedAction() {
          public Object run() {
              return System.getProperty(fProperty);
          }
      });
  ```
- The `String` object pointed to by `fProperty` is influenced, through a series of direct and indirect flows, by the `String` object pointed to by the `ELEMENT_ACTIVE_WHEN` constant in class `HandlerPersistence`. This class is located in the `org.eclipse.ui.workbench` RCP component, which in the current version of the RCP has not been granted the `PropertyPermission` required to execute the code above.

**In an SBAC system such as the current version of Java:**
- A malicious attacker could modify the value of `ELEMENT_ACTIVE_WHEN` and condition the property being accessed. Since no method of `HandlerPersistence` is on the stack when `System.getProperty` calls `checkPermission`, this integrity exposure would not disappear by simply removing the privilege-asserting block around the call to `System.getProperty`.

**IBAC Solution:**
- By tracking information flows to each security-sensitive operation and testing not only the callers on the current stack of execution up to the `doPrivileged` caller, but also the labels on all the values read in the security-sensitive operation guarded by the `checkPermission` call, IBAC detects the integrity exposure. It is then up to the developers and system administrators to decide whether the code needs to be corrected to eliminate this exposure or whether it is safe to grant `HandlerPersistence` the appropriate `PropertyPermission`.

### 5. Proposed Implementation

We propose two different implementations for IBAC enforcement: a completely static enforcement and one that combines static analysis with dynamic enforcement.

**Completely Static IBAC Enforcement:**
- Achieved by considering the set of all statements guarded by the test. For each statement `s` guarded by a `testR` command, it must be the case that no statement `s' ∈ backslice(s)` originates from code with a static permission set `P` such that `P ⊇ R`. Here, `backslice` is the function that maps each statement `s` to its static backwards slice, consisting of all the (transitive) predecessors of `s` along control- and data-dependence edges in the Program Dependence Graph (PDG).

**Stack Inspection Mechanism:**
- A call graph and a points-to graph [21] representing the execution of the program under analysis are built. For each node in the call graph corresponding to a `checkPermission` method call, the set `P` of abstract `Permission` objects that, according to the model, could have flowed to the `Permission` parameter of `checkPermission` is computed. The level of abstraction could be by allocation site, as in Andersen’s analysis [3]. Next, each of these `Permission` sets is propagated backwards in the call graph, performing set unions at merge points, until a fix point is reached [26]. The only nodes in this fix-point iteration that kill the reverse propagation of the `Permission` sets are the `doPrivileged` nodes, to model the requirement that a call to `doPrivileged` on a stack of execution causes the stack inspection to stop regardless of the `Permission` being checked.

**Advantages and Disadvantages:**
- **Advantage:** Sound; identifies all integrity violations.
- **Disadvantage:** Potentially conservative, leading to false alarms. The precision of the analysis can significantly affect its scalability.

**Dynamic IBAC Enforcement:**
- Associates a label with every value based on the static permissions granted by the current access-control policy. At each existing `testR` command (corresponding to calls to `checkPermission` in Java and `Demand` in CLR), an ordinary stack inspection is performed. However, it is necessary for the frame `P` of each expression `E` guarded by the test to satisfy `P ⊆ R`. This requires inserting additional `testR` calls for each such expression `E`. This approach must be coupled with a static analysis implementing the write oracle, which overapproximates the set of values that would be modified at every branch not taken, as explained in Section 2.2.

### 6. Related Work

- **Early Work by Denning and Denning [13]:** Focuses on static analysis for information flow.
- **Goguen and Meseguer [19]:** Introduce a more general notion of information flow based on noninterference.
- **Volpano, et al. [41]:** Show a type-based algorithm that certifies implicit and explicit flows and guarantees noninterference.
- **Noninterference:** Traditionally the technical criterion used for proving correctness of security analysis algorithms or type systems. Snelting et al. [37] connect PDGs with noninterference. Hammer et al. [23] present a PDG-based algorithm for verifying noninterference: for any output statement `s`, it must be the case that any statement in `backslice(s)` must have a security label lower than the security label of `s`.

**Taint Analysis:**
- An integrity problem focusing on whether untrusted data obtained from the user might influence other data that the system trusts. The notion of tainted variables became known with the Perl language. In Perl, using the `-T` option allows detecting tainted variables [42].
- **Shankar et al. [36]:** Present a tainted-variable analysis for CQual using constraint graphs. To find format-string bugs, CQual uses a type-qualifier system [17] with two qualifiers: `tainted` and `untainted`. A constraint graph is constructed for a CQual program. If there is a path from a tainted node to an untainted node in the graph, an error is flagged.
- **Newsome and Song [31]:** Propose a dynamic taint analysis that catches errors by monitoring tainted variables at runtime. Data originating or arithmetically derived from untrusted sources, such as the network, are marked as tainted. Tainted variables are tracked at runtime, and when they are used in a dangerous way, an attack is detected.
- **Volpano et al. [41]:** Relate taint analysis to enforcing information-flow policies through typing.
- **Ashcraft and Engler [4]:** Use taint analysis to detect software attacks due to tainted variables. Their approach provides user-defined sanity checks to untaint potentially tainted variables.