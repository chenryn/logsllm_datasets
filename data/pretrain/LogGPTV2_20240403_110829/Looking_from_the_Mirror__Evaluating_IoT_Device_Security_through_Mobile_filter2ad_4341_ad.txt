CVE-2017-8221
CVE-2017-8222
CVE-2017-8223
CVE-2017-8224
CVE-2017-8225
IP Camera Vendor A
IP Camera Vendor B
IP Camera Vendor C
Baby Monitor Vendor D
Instar
VStarcam
Sricam
Conceptronic
KGUARD
7 Vendors
4
1
1
1
2
35
6
2
3
17
Validation
Method
Firmware
Firmware
Firmware
Device
Reports
Reports
Reports
Reports/Firmware
Device
N/A
Mobile App
App A
App B
App C
App D
camviewer.mobi.for_instar
vstc.GENIUS.client
object.shazx1.client.yi
object.smartmom.client
camviewer.p2pwiﬁcam.client
object.kguard.client
7 apps
App
Downloads
100,000+
5,000+
100,000+
10,000+
1,000+
1,000+
55,000+
10,000+
10,000+
146,000+
Conﬁrmation
Status
Newly
Discovered
Independently
Reconﬁrmed
FP
Pending Conﬁrmation
our email request about potential security issues went into a
black hole (i.e., no responses ever received from the vendor).
We believe this is also an artifact of market fragmentation as
smaller vendors tend to care less about the security of their
products.
3.3.2 Device Rebranding
Investigation of a more recent vulnerability, CVE-2018-11560,
leads to another interesting ﬁnding of device rebranding. This
vulnerability was initially reported in Insteon IP Camera 2864-
222 (ﬁrmware 1.4.1.9), where the embedded web server on
the device had a missing bounds check when parsing CGI
parameters, resulting in a stack buffer overﬂow. We used the
companion app of Insteon IP camera as the input to our Cross-
App Analysis Engine to detect if any other devices might
be vulnerable to the same vulnerability. To our surprise, we
found that almost identical device interfaces are provided by a
major IP camera vendor, Foscam. We initially suspected that
the same web server might be used by both vendors, but later
through research we found that Insteon IP camera 2864-222 is
actually a rebranded version of Foscam IP Camera FI8918W—
it is based on the exact same hardware and software but with
a different brand name. Not surprisingly, early versions of
Foscam IP camera also suffer from the same vulnerability,
but no one has reported that.
The interesting part, however, is that Foscam actually
patched the vulnerability before the vulnerability was reported
in Insteon IP camera. We examined the ﬁrmware history of
Foscam IP camera and found that the vulnerable code was
shipped in over eight Foscam ﬁrmware versions before Jul.
2017, impacting at least 15 Foscam models. In ﬁrmware up-
dates (2.x.1.120) of Jul. 2017, the vulnerability was patched.
However, this patch never made it to the Insteon IP camera
until the vulnerability was reported in 2018. We contacted
Foscam about this issue, but their response neither conﬁrmed
nor denied the ﬁnding. Instead, we were advised to update
to the newest version of ﬁrmware. This highlights another
interesting issue about smart home IoT devices. Due to the
fragmented market, smaller IoT vendors sometimes do not
develop their own products. Instead, they customize IoT de-
vices from OEMs and resell with their own branding. This
complicates the security management of the product and puts
customers in danger, as vulnerabilities in upstream vendors
tend to propagate to a broader set of downstream vendors but
security patches are not. Indeed, a Shodan search with the
IP camera ﬁngerprints (e.g., server type, time stamps) shows
that although Foscam released patches as early as Jul. 2017,
there are still 30.7% (10,210 out of 33,230) devices that are
not patched to the secure version.
Additionally, our analysis shows that re-branding is indeed
not uncommon. With a dataset of ∼2K apps, we identiﬁed
27 other re-branded device families not including Foscam
example. Examples of these devices include smart plugs from
Bayit and Orvibo, Wi-Fi sockets from CHITCO and EDUP
and so on. Further validation is needed to conﬁrm if these
devices inherit any vulnerabilities from upstream vendors.
3.3.3 Vulnerable Hardware
Different IoT device vendors may rely on a common hard-
ware module (e.g., Wi-Fi, Bluetooth), which, if vulnerable,
could impact multiple devices. The challenge, however, is
that IoT device vendors often do not publicize the hardware
components in use. As a result, it is often difﬁcult to decide if
a device is vulnerable due to a vulnerable hardware compo-
nent without tearing apart the physical device or unpacking
the ﬁrmware to examine the driver code.
Through cross-app analysis, we identiﬁed a total of 166
devices belonging to 35 different vendors that are poten-
tially impacted by two recent security weaknesses found in
hardware. In one example, a recent study [36] demonstrated
that Hi-Flying Wi-Fi module (HF-LPB100, HF-LPT100, HF-
LPB200) can be leveraged by an adversary to steal home
network Wi-Fi credentials. The Hi-Flying Wi-Fi module is
a self-contained 802.11b/g/n module used by a number of
IoT devices to provide wireless interfaces. As an important
feature, the module supports credential (e.g., SSID, password)
provisioning from device companion app to IoT device via
SmartLink. As reported by the study [36], the provisioning
process may leak Wi-Fi credentials: an adversary could pas-
sively listen to the trafﬁc and gather the home Wi-Fi network
credentials without much effort. Through our cross-app anal-
ysis, we identiﬁed that 26 apps, covering 108 devices from 21
1160    28th USENIX Security Symposium
USENIX Association
vendors are potentially impacted by this security weakness.
These apps have been downloaded more than 158,000 times.
In another example, ESP8622, a low-cost Wi-Fi microchip
that appears in many cheap IoT devices (e.g., Wi-Fi controller,
smart plug), was reported to have a similar vulnerability in its
ESP-Touch provisioning protocol. In our analysis, we identi-
ﬁed that 21 apps covering 58 devices from 14 distinct vendors
are potentially impacted by the security weakness. In total,
these apps have been downloaded more than 120,000 times.
Among the devices ﬂagged by the platform, we were able
to conﬁrm that 67 devices from 16 vendors are indeed im-
pacted by the security weaknesses (43 devices from eight
vendors are conﬁrmed through vendor response. 24 devices
from eight vendors are conﬁrmed through ﬁrmware emula-
tion, real device or online reports.). Through vendor response,
we were also able to identify that seven devices from two ven-
dors were mistakenly ﬂagged by the platform as vulnerable
(i.e., ∼9% false positive rate). We manually examined the
two apps to analyze the reason for the false positive. For one
case, 14 devices supported by the Revogi app were ﬂagged by
the platform as potentially vulnerable. However, four of them
(Power Plug SOW324, Power Strip SOW321 and SOW323,
and Smart Light LTW311) were not actually using the vul-
nerable hardware. The issue was due to the imprecision of
the static analysis performed by the platform. Since the app
supports multiple devices from the same vendor, the code
modules that control individual devices are not clearly dis-
tinguishable (i.e., some modules are shared across devices
but others are independent). As a result, the platform was not
able to attribute the network interfaces that correspond to the
vulnerable hardware to a speciﬁc device. Instead, the platform
outputs all the devices supported by the app as potentially
vulnerable. For another case, three devices supported by the
smanos app were ﬂagged by the platform by mistake. The
devices were found not to be using the vulnerable hardware,
but the code module and the corresponding network inter-
faces that control the hardware was included in the app. This
may be due to that the app developer built the app upon some
open source templates that contain the hardware module, or
maybe the device vendor changed their hardware conﬁgura-
tion during the device development process, but the app code
was never cleaned up. Nevertheless, the IPE method used by
the platform is guided by static analysis to construct network
interfaces as long as a code snippet is reachable from an An-
droid activity, even though that activity may never be actually
triggered by the real device.
3.3.4 Vulnerable Protocol
Similar to hardware components, IoT device vendors often
do not publicize the protocols that a device speaks. These
protocols range from more open and standard ones such as
UPnP, mDNS and SSDP to proprietary ones such as TDDP5
5TDDP stands for TP-Link Device Debug Protocol.
used for debugging, penetrating private networks and various
other purposes. Not knowing which protocol a device can
speak creates a great security challenge of managing the de-
vice, especially when the protocols are found to be vulnerable
or can be leveraged by an adversary to launch attacks.
Through cross-app analysis, we can identify devices that
speak the same protocol, thus may suffer from similar secu-
rity problems. For example, previous research [37] showed
that SSDP protocol can be abused by adversaries in order to
launch DDoS attacks. SSDP queries such as "ssdp:all" and
"upnp:rootdevice" may result in a response size orders of
magnitude larger, thus if openly accessible to the Internet may
serve as a reﬂector to amplify requests sent by the attacker.
Through cross-app analysis, we identiﬁed 39 devices from 11
different vendors that speak SSDP, despite that few of them
clearly documented the protocol that their devices speak. As
a result, once these devices are activated in the environment
where a ﬁrewall is not conﬁgured to block incoming queries,
they may act as reﬂectors for DDoS attacks. It’s difﬁcult to tell
the exact number of devices that are exposed and vulnerable,
but the total app downloads (over 10.2 million) indicate that
a massive number of devices could possibly be harnessed by
attackers.
We validated the results output by the platform. In total,
we were able to conﬁrm that 18 devices from six vendors are
indeed speaking the SSDP protocol. One device, Bixi gesture
controller, was mistakenly ﬂagged by the platform. The case
with Bixi gesture controller is interesting: the device itself
does not speak SSDP, but its companion app does, therefore
causing false positive for the platform. The reason is that the
gesture controller is a device that allows users to control other
devices via gesture. It does not speak SSDP but relies on its
companion app to use SSDP to discover subsidiary devices
for it to control. In this case, the network interface of the app
is not an exact mirror of the device interface, causing false
positives in the platform.
3.3.5 Vulnerable Backend Service
IoT devices may rely on the same IoT cloud backend ser-
vice to relay command and control (e.g., to penetrate private
home networks). When the backend service contains a secu-
rity weakness, multiple IoT devices using the same service
are impacted at the same time. However, without detailed
knowledge of the registered customers of the cloud service,
many of these impacted devices are left vulnerable until the
problems are independently discovered.
Our cross-app analysis can help address this issue. In a
particular case, the security weakness was initially reported
on DeepSec 2017 [38], where an IoT cloud backend service is
found to be using very short device IDs (i.e., only six digits)
to register IoT devices. Consequently, any IoT device that is
using the service to relay commands and control is vulnerable
to device ID and password enumeration attacks. A successful
USENIX Association
28th USENIX Security Symposium    1161
attack may enable attackers to authenticate to the device and
abuse the device as a bot. We used the vulnerable device re-
ported in DeepSec, Yoosee, as the seed for cross-app analysis
and found 32 devices from 10 different vendors also rely on
the same vulnerable backend to relay command and control.
While it is hard to estimate the actual number of devices in
the wild that are vulnerable, the total amount of downloads
of these apps is over 226,000 times.
Among the 32 devices ﬂagged by the platform, we were
able to conﬁrm that 12 devices from seven vendors are in-
deed sending requests to the speciﬁc backend server, and the
device IDs are indeed enumerable (i.e., 6-digits). We also
found that four devices from one vendor, namely secrui, were
mistakenly ﬂagged by the platform. The reason is similar to
the "dead code" issue we encountered while validating results
for devices with vulnerable hardware: we found that secrui
app embedded a self-contained app com/jwkj that talks to
the problematic backend server and thus the app interfaces
exhibit similarity with those that are vulnerable. However, the
embedded app was never actually executed nor did the de-
vices supported by secrui app actually talk to the problematic
backend server.
3.4 Accuracy of Results
In total, the platform ﬂagged 324 devices from 73 vendors as
potentially vulnerable, and we were able to conﬁrm that 164
devices from 38 vendors are indeed vulnerable. This accounts
for roughly 50.6% of all the devices ﬂagged by the platform.
During the process of validation, we were also able to iden-
tify that 15 devices from 5 vendors were mistakenly ﬂagged
by the platform as vulnerable. This accounts for 8.4% of all
the devices that we could either conﬁrm or disapprove (i.e.,
false positives). Table 4 enumerates the reasons for the false
positives and the number of instances of each reason. The
ﬁrst reason for the false positive is the existence of the patch.
After vulnerabilities were disclosed, vendors may patch the
device. In this case, the app-device interface may stay largely
the same, but the device is no longer vulnerable. This is a
fundamental limitation of the approach, as the platform is