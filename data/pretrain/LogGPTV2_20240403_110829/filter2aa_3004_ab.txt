push 0x3E8
call Sleep
jmp block_b
...
/?rndWalk
mov [ebp-0x04], 00
jmp block_c
cmp [ebp-0x04], Ah
jg Exit
mov eax, [ebp-0x04]
add eax, 1
mov [ebp-0x04], eax
block_c:
block_b:
block_a:
jmp block_c
push 0x3E8
call Sleep
jmp block_b
jmp block_b
block_d:
jg Exit
asm
script
PI:EMAIL
 #Asm2Vec
push rbp
mov rbp, rsp
sub rsp, 138h
mov rax, 8h
mov [rbp+0ch], rax
xor eax, eax
mov [rbp+04h], 0
mov [rbp+32h], 1505h
...
PI:EMAIL
 #Asm2Vec
push rbp
mov rbp, rsp
sub rsp, 138h
mov rax, 8h
mov [rbp+0ch], rax
xor eax, eax
mov [rbp+04h], 0
mov [rbp+32h], 1505h
...
PI:EMAIL
 #Asm2Vec
push rbp
mov rbp, rsp
mov rsp, 138h
mov rax, 8h
mov [rbp+0ch], rax
xor eax, eax
mov [rbp+04h], 0
mov [rbp+32h], 1505h
...
PI:EMAIL
 #Asm2Vec
push rbp
mov rbp, rsp
sub rsp, 138h
mov rax, 8h
mov [rbp+0ch], rax
xor eax, eax
mov [rbp+04h], 0
mov [rbp+32h], 1505h
...
PI:EMAIL
 #Asm2Vec
push rbp
mov rbp, rsp
sub rsp, 138h
mov rax, 8h
mov [rbp+0ch], rax
xor eax, eax
mov [rbp+04h], 0
mov [rbp+32h], 1505h
...
PI:EMAIL
 #Asm2Vec
push rbp
mov rbp, rsp
sub rsp, 138h
mov rax, 8h
mov [rbp+0ch], rax
xor eax, eax
mov [rbp+04h], 0
mov [rbp+32h], 1505h
...
PI:EMAIL
 #Asm2Vec
push rbp
mov rbp, rsp
sub rsp, 138h
mov rax, 8h
mov [rbp+0ch], rax
xor eax, eax
mov [rbp+04h], 0
mov [rbp+32h], 1505h
...
PI:EMAIL
 #Asm2Vec
push rbp
mov rbp, rsp
sub rsp, 138h
mov rax, 8h
mov [rbp+0ch], rax
xor eax, eax
mov [rbp+04h], 0
mov [rbp+32h], 1505h
...
sub   rsp, 138h
lea   eax, [ebx+4]
push  rbp
vocab = {
'sub':    [-0.53, 0.01  ... -0.08],
'rsp':    [ 0.12, 0.31, ...  0.34],
'lea':    [-0.75,-0.42, ... -0.72],
'push':   [ 0.23, 0.37, ... -0.23],
'[ebx+4]':[-0.02,-0.19, ...  0.11],
 ... 
}
Tokenize
200 dim
PI:EMAIL
 #Asm2Vec
push rbp
mov rbp, rsp
sub rsp, 138h
mov rax, 8h
mov [rbp+0ch], rax
xor eax, eax
mov [rbp+04h], 0
mov [rbp+32h], 1505h
...
sub   rsp, 138h
operands
lea   eax, [ebx+4]
push  rbp
...
operator
PI:EMAIL
 #Asm2Vec
push rbp
mov rbp, rsp
sub rsp, 138h
mov rax, 8h
mov [rbp+0ch], rax
xor eax, eax
mov [rbp+04h], 0
mov [rbp+32h], 1505h
...
sub   rsp, 138h
operands
operator
Ƭ(sub) || ( Ƭ(rsp)/2 + Ƭ(138h)/2 ) 
Ƭ(instruction) =
PI:EMAIL
 #Asm2Vec
push rbp
mov rbp, rsp
sub rsp, 138h
mov rax, 8h
mov [rbp+0ch], rax
xor eax, eax
mov [rbp+04h], 0
mov [rbp+32h], 1505h
...
push  rbp
operands
operator
Ƭ(instruction) = Ƭ(push) || ( Ƭ(rbp) )
PI:EMAIL
 #Asm2Vec
push rbp
mov rbp, rsp
sub rsp, 138h
mov rax, 8h
mov [rbp+0ch], rax
xor eax, eax
mov [rbp+04h], 0
mov [rbp+32h], 1505h
nop
nop  (null)
operands
operator
Ƭ(instruction) = Ƭ(nop) || ( null ) 
PI:EMAIL
 #Asm2Vec
push rbp
mov rbp, rsp
sub rsp, 138h
mov rax, 8h
mov [rbp+0ch], rax
xor eax, eax
...
Ƭ("sub rsp, 138h")
Ƭ(rsp)
[-0.53, 0.01  ... -0.08]
sigmoid(x)
Avg(x)
Ƭ(rbp)
Ƭ(mov)||
[-0.53, 0.01  ... -0.08]
Ƭ(8h)
Avg(x)
Ƭ(rax)
Ƭ(mov)||
[-0.53, 0.01  ... -0.08]
predict
θfs
Avg(x)
PI:EMAIL
 #Asm2Vec
push rbp
mov rbp, rsp
sub rsp, 138h
mov rax, 8h
mov [rbp+0ch], rax
xor eax, eax
...
Ƭ("sub rsp, 138h")
Ƭ(rsp)
[-0.53, 0.01  ... -0.08]
sigmoid(x)
Avg(x)
Ƭ(rbp)
Ƭ(mov)||
[-0.53, 0.01  ... -0.08]
Ƭ(8h)
Avg(x)
Ƭ(rax)
Ƭ(mov)||
[-0.53, 0.01  ... -0.08]
loss
θfs
loss1/3
loss1/3
loss1/3
Avg(x)
PI:EMAIL
• Dataset 
- malware: Mirai samples from VirusTotal (40000+) 
- benign: ELF from Linux-based IoT firmware (3600+) 
- stripped binary 
• Training  
- random choose only 25 Mirai samples to train 
- each token represented by 200-dim vector (random) 
- negative sampling: 25 tokens 
- decreasing learning rate: 0.025 → 0.0025  
• Cross validation: 10 times 
• Malicious: Similarity(binary, model) >= 95%
 $./exp
PI:EMAIL
• MIPS 
- Mirai:  96.75% (18467 samples) 
- Benign: 96.41% (348   samples) 
• x86  
- Mirai:  96.75% (2564  samples) 
- Benign: 99.93% (1567  samples) 
• ARM  
- Mirai:  98.53% (23827 samples) 
- Benign: 93.87% (1699  samples)
 $./exp
/>Demo
PI:EMAIL
〉〉〉Challenge
PI:EMAIL
/!challenge
github.com/aaaddress1/theArk
PI:EMAIL
/!PluginX
DLL SIDE-LOADING: A Thorn in the Side of the Anti-Virus Industry
PI:EMAIL
int main(void) {
  try {
    *(char*)NULL = 1;
  } catch (...) {
    puts("Hell Kitty");
  }
}
/!challenge
PI:EMAIL
/!challenge
github.com/xoreaxeaxeax/movfuscator
PI:EMAIL
• Issue based on Control Flow Walking 
- Self modifying code  
1. Software Packer e.g. VMProtect, Themida 
2. Shellcode Encoder 
- Control Flow Rerouting 
1. Error handling e.g. SEH 
2. MultiThread 
- Exported malicous function 
- Virtual Method Table 
• Vector Obfuscation  
- 95% benignware / 5% injected shellcode 
- Use common instructions as gadgets  
to build a obfuscation chain e.g. movfuscator 
/!challenge
41414141414141414141414141
Thanks!
PI:EMAIL
Slide
Github
@aaaddress1
Facebook
AAAAAAAAAAAAAA AAAAAAA AAAA
HITCON