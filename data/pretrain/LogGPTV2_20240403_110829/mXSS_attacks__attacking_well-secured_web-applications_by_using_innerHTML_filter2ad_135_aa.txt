title:mXSS attacks: attacking well-secured web-applications by using innerHTML
mutations
author:Mario Heiderich and
J&quot;org Schwenk and
Tilman Frosch and
Jonas Magazinius and
Edward Z. Yang
Ruhr-University Bochum,
Ruhr-University Bochum,
Security
Germany
Ruhr-University Bochum,
Security
Germany
Security
Germany
mXSS Attacks: Attacking well-secured Web-Applications
by using innerHTML Mutations
Mario Heiderich
Horst Goertz Institute for IT
Jörg Schwenk
Tilman Frosch
Horst Goertz Institute for IT
Horst Goertz Institute for IT
PI:EMAIL
PI:EMAIL
PI:EMAIL
Jonas Magazinius
Chalmers University of
Technology, Sweden
Edward Z. Yang
Stanford University, USA
PI:EMAIL
PI:EMAIL
ABSTRACT
Back in 2007, Hasegawa discovered a novel Cross-Site Scrip-
ting (XSS) vector based on the mistreatment of the backtick
character in a single browser implementation. This initially
looked like an implementation error that could easily be
(cid:12)xed. Instead, as this paper shows, it was the (cid:12)rst example
of a new class of XSS vectors, the class of mutation-based
XSS (mXSS) vectors, which may occur in innerHTML and
related properties. mXSS a(cid:11)ects all three major browser
families: IE, Firefox, and Chrome.
We were able to place stored mXSS vectors in high-pro(cid:12)le
applications like Yahoo! Mail, Redi(cid:11) Mail, OpenExchange,
Zimbra, Roundcube, and several commercial products. m-
XSS vectors bypassed widely deployed server-side XSS pro-
tection techniques (like HTML Puri(cid:12)er, kses, htmlLawed,
Blueprint and Google Caja), client-side (cid:12)lters (XSS Auditor,
IE XSS Filter), Web Application Firewall (WAF) systems,
as well as Intrusion Detection and Intrusion Prevention Sys-
tems (IDS/IPS). We describe a scenario in which seemingly
immune entities are being rendered prone to an attack based
on the behavior of an involved party, in our case the browser.
Moreover, it proves very di(cid:14)cult to mitigate these attacks:
In browser implementations, mXSS is closely related to per-
formance enhancements applied to the HTML code before
rendering; in server side (cid:12)lters, strict (cid:12)lter rules would break
many web applications since the mXSS vectors presented in
this paper are harmless when sent to the browser.
This paper introduces and discusses a set of seven di(cid:11)er-
ent subclasses of mXSS attacks, among which only one was
previously known. The work evaluates the attack surface,
showcases examples of vulnerable high-pro(cid:12)le applications,
and provides a set of practicable and low-overhead solutions
to defend against these kinds of attacks.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’13, November 04–08, 2013, Berlin, Gernany.
Copyright 2013 ACM 978-1-4503-2477-9/13/11 ...$15.00.
http://dx.doi.org/10.1145/2508859.2516723.
Figure 1: Information (cid:13)ow in an mXSS attack.
1.
INTRODUCTION
Mutation-based Cross-Site-Scripting (mXSS).
Server- and client-side XSS (cid:12)lters share the assumption
that their HTML output and the browser-rendered HTML
content are mostly identical. In this paper, we show how this
premise is false for important classes of web applications that
use the innerHTML property to process user-contributed con-
tent. Instead, this very content is mutated by the browser,
such that a harmless string that passes nearly all of the de-
ployed XSS (cid:12)lters is subsequently transformed into an active
XSS attack vector by the browser layout engine itself.
The information (cid:13)ow of an mXSS attack is shown in Fig-
ure 1: The attacker carefully prepares an HTML or XML
formatted string and injects it into a web application. This
string will be (cid:12)ltered or even rewritten in a server-side XSS
(cid:12)lter, and will then be passed to the browser. If the browser
contains a client-side XSS (cid:12)lter, the string will be checked
again. At this point, the string is still harmless and cannot
be used to execute an XSS attack.
However, as soon as this string is inserted into the brower’s
DOM by using the innerHTML property, the browser will mu-
tate the string. This mutation is highly unpredictable since
it is not part of the speci(cid:12)ed innerHTML handling, but is a
proprietary optimization of HTML code implemented di(cid:11)er-
ently in each of the major browser families. The mutated
in CSS Escapes
Description
Backtick Characters breaking Attribute
Delimiter Syntax
XML Namespaces in Unknown Elements
causing Structural Mutation
Backslashes
String-Boundary Violation
Mis(cid:12)t Characters in Entity Representa-
tion breaking CSS Strings
CSS Escapes in Property Names violating
entire HTML Structure
Entity-Mutation in non-HTML Docu-
ments
Entity-Mutation in non-HTML context of
HTML documents
causing
Section
3.1
3.2
3.3
3.4
3.5
3.6
3.7
Table 1: Overview on the mXSS vectors discussed
in this paper
string now contains a valid XSS vector, and the attack will
be executed on rendering of the new DOM element. Both
server- and client side (cid:12)lters were unable to detect this at-
tack because the string scanned in these (cid:12)lters did not con-
tain any executable code.
Mutation-based XSS (mXSS) makes an impact on all three
major browser families (IE, Firefox, Chrome). Table 1 gives
an overview on the mXSS subclasses discovered so far, and
points to their detailed description. A web application is
vulnerable if it inserts user-contributed input with the help
of innerHTML or related properties into the DOM of the
browser. It is di(cid:14)cult to statistically evaluate the number
of websites a(cid:11)ected by the seven attack vectors covered in
this paper, since automated testing fails to reliably detect
all these attack prerequisites: If innerHTML is only used to
insert trusted code from the web application itself into the
DOM, it is not vulnerable. However, it can be stated that
amongst the 10.000 most popular web pages, roughly one
third uses the innerHTML property, and about 65% use Java-
Script libraries like jQuery [7], who abet mXSS attacks by
using the innerHTML property instead of the corresponding
DOM methods.
However, it is possible to single out a large class of vulner-
able applications (Webmailers) and name high-pro(cid:12)le state-
of-the-art XSS protection techniques that can be circum-
vented with mXSS. Thus the alarm we want to raise with
this paper is that an important class of web applications is
a(cid:11)ected, and that nealy all XSS mitigation techniques fail.
Webmail Clients.
Webmail constitutes a class of web applications particu-
larly a(cid:11)ected by mutation-based XSS: nearly all of them (in-
cluding e.g. Microsoft Hotmail, Yahoo! Mail, Redi(cid:11) Mail,
OpenExchange, Roundcube and other tools and providers)
were vulnerable to the vectors described in this paper. These
applications use the innerHTML property to display user-
generated HTML email content. Before doing so, the con-
tent is thoroughly (cid:12)ltered by server-side anti-XSS libraries
in recognition of the dangers of a stored XSS attack. The
vectors described in this paper will pass through the (cid:12)lter
because the HTML string contained in the email body does
not form a valid XSS vector { but would require only a sin-
gle innerHTML access to be turned into an attack by the
browser itself.
Here the attacker may submit the attack vector within the
HTML-formatted body of an email. Most webmail clients do
not use innerHTML to display this email in the browser, but
a simple click on the \Reply" button may trigger the attack:
to attach the contents of the mail body to the reply being
edited in the webmail client, mostly innerHTML access is
used.
HTML Sanitizers.
We analysed a large variety of HTML sanitizers such as
HTML Puri(cid:12)er, htmLawed, OWASP AntiSamy, jSoup, kses
and various commercial providers. At the time of testing, all
of them were (and many of them still are) vulnerable against
mXSS attacks. Although some of the authors reacted with
solutions, the major e(cid:11)ort was to alert the browser ven-
dors and trigger (cid:12)xes for the innerHTML-transformations.
In fact, several of our bug reports have led to subsequent
changes in browser behavior. To protect users, we have
decided to anonymise names of several formerly a(cid:11)ected
browsers and applications used as examples in our work.
This paper makes the following contributions:
1. We identify an undocumented but long-existing threat
against web applications, which enables an attacker
to conduct XSS attacks, even if strong server- and
client-side (cid:12)lters are applied. This novel class of attack
vectors utilize performance-enhancement peculiarities
present in all major browsers, which mutate a given
HTML string before it is rendered. We propose the
term mXSS (for Mutation-based XSS) to describe this
class of attacks to disambiguate and distinguish them
from classic, re(cid:13)ected, persistent and DOM-based XSS
attacks.
2. We discuss client- and server-side mitigation mecha-
nisms. In particular, we propose and evaluate an in-
browser protection script, entirely composed in Java-
Script, which is practical, feasible and has low-overhead.
With this script, a web application developer can im-
plement a (cid:12)x against mXSS attacks without relying
on server-side changes or browser updates. The script
overwrites the getter methods of the DOM properties
we identi(cid:12)ed as vulnerable and changes the HTML
handling into an XML-based processing, thereby ef-
fectively mitigating the attacks and stopping the mu-
tation e(cid:11)ects1.
3. We evaluated this attack in three ways: (cid:12)rst, we an-
alyzed the attack surface for mXSS and give a rough
estimate the number of vulnerable applications on the
Internet; second, we conducted a (cid:12)eld study testing
commonly used web applications such as Yahoo! Mail
and other high pro(cid:12)le websites, determining whether
they could be subjected to mXSS attacks; third, we
have examined common XSS (cid:12)lter software such as
AntiSamy, HTML Puri(cid:12)er, Google Caja and Blueprint
for mXSS vulnerabilities, subsequently reporting our
(cid:12)ndings back to the appropriate tool’s author(s).
1In result, one can purposefully choose XML-based process-
ing for security-critical sites and HTML-based processing for
performance-critical sites.
2. PROBLEM DESCRIPTION
In the following sections, we describe the attack vectors
which arise from the use of the innerHTML property in web-
sites. We will outline the history of (cid:12)ndings and recount a
realistic attack scenario. The problems we identify leave
websites vulnerable against the novel kind of mXSS attacks,
even if the utilized (cid:12)lter software fully protects against the
dangers of the classic Cross-Site Scripting.
2.1 The innerHTML Property
Originally introduced to browsers by Microsoft with In-
ternet Explorer 4, the property quickly gained popularity
among web developers and was adopted by other browsers,
despite being non-standard. The use of innerHTML and
outerHTML is supported by each and every one of the com-
monly used browsers in the present landscape. Consequently,
the W3C started a speci(cid:12)cation draft to unify innerHTML
rendering behaviors across browser implementations [20].
An HTML element’s innerHTML property deals with cre-
ating HTML content from arbitrarily formatted strings on
write access on the one hand, and with serializing HTML
DOM nodes into strings on read access on the other. Both
directions are relevant in scope of our paper { the read access
is necessary to trigger the mutation while the write access
will attach the transformed malicious content to the DOM.
The W3C working draft document, which is far from com-
pletion, describes this process as generation of an ordered
set of nodes from a string valued attribute. Due to being
attached to a certain context node, if this attribute is eval-
uated, all children of the context node are replaced by the
(ordered) node-set generated from the string.
To use innerHTML, the DOM interface of element is en-
hanced with an innerHTML attribute/property. Setting of
this attribute can occur via the element.innerHTML=value
syntax, and in this case the attribute will be evaluated im-
mediately. A typical usage example of innerHTML is shown
in Listing 1: when the HTML document is (cid:12)rst rendered, the
 element contains the "First text" text node. When
the anchor element is clicked, the content of the  element
is replaced by the "New second text." HTML for-
matted string.
Listing 1: Example on innerHTML usage
var new = " New  second  text .";
function Change () {
document . all . myPar . i nn e r H T M L = new ;
}
 First text . 
Change text above !
outerHTML displays similar behavior with single exception:
unlike in the innerHTML case, the whole context (not only
the content of the context node) will be replaced here. The
innerHTML-access changes the utilized markup though for
several reasons and in di(cid:11)ering ways depending on the user
agent. The following code listings show some (non security-
related) examples of these performance optimizations:
Listing 2: Examples for internal HTML mutations
to save CPU cycles
 hello &# x20 ;  goodbye 
 hello  goodbye  
The browser { in this case Internet Explorer 8 { mutates
the input string in multiple ways before sending it to the lay-
out engine: the empty class is removed, the tag names are
set to upper-case, the markup is sanitized and the HTML
entities are resolved. These transformations happen in sev-
eral scenarios:
1. Access to the innerHTML or outerHTML properties
of the a(cid:11)ected or parent HTML element nodes;
2. Copy (and subsequent paste) interaction with the HTML
data containing the a(cid:11)ected nodes;
3. HTML editor access via the contenteditable attribute,
the designMode property or other DOM method calls
like document.execCommand();
4. Rendering the document in a print preview container
or similar intermediate views. Browsers tend to use
the outerHTML property of the HTML container or
the innerHTML.
For the sake of brevity, we will use the term innerHTML-
access to refer to some or all of the items from the above
list.
2.2 Problem History and Early Findings
In 2006, a non-security related bug report was (cid:12)led by a
user, noting an apparent (cid:13)aw in the print preview system
for HTML documents rendered by a popular web browser.
Hasegawa’s 2007 analysis [11] of this bug report showed that
once the innerHTML property of an element’s container
node in an HTML tree was accessed, the attributes delim-
ited by backticks or containing values starting with backticks
were replaced with regular ASCII quote delimiters: the con-
tent had mutated. Often the regular quotes disappeared,
leaving the backtick characters unquoted and therefore vul-
nerable to injections. As Hasegawa states, an attacker can
craft input operational for bypassing XSS detection systems
because of its benign nature, yet having a future possibility
of getting transformed by the browser into a code that exe-
cutes arbitrary JavaScript code. An example vector is being
discussed in Section 3.1. This behavior constitutes a funda-
mental basis for our research on the attacks and mitigations
documented in this paper.
2.3 Mutation-based Cross-Site Scripting
Certain websites permit their users to submit inactive
HTML aimed at visual and structural improvement of the