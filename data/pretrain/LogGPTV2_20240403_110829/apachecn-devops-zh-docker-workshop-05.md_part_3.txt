5.  Start the application with the `docker-compose up` command. The output should look like the following:
    ![Figure 5.11: Starting the application ](img/B15021_05_11.jpg)
图 5.11:启动应用
输出是在`docker-compose`文件中定义的`print`容器的结果。该容器有一个命令要运行，`env`，它打印可用的环境变量。不出所料，有两个环境变量`ENV_FROM_ENV_FILE_1`和`ENV_FROM_ENV_FILE_2`，对应的数值为`HELLO`和`WORLD`。此外，在*步骤 3* 中的`docker-compose.yaml`文件中定义的环境变量可用名称`ENV_FROM_COMPOSE_FILE`和值`HELLO`。最后，在*步骤 4* 中导出的环境变量可以使用名称`ENV_FROM_SHELL`和值`WORLD`。
在本练习中，创建了一个 Docker Compose 应用，并用不同的方法进行了配置。使用 Docker Compose 文件，可以使用环境定义文件和导出的值将同一个应用部署到不同的平台。
由于 Docker Compose 管理多容器应用，因此需要定义它们之间的相互依赖关系。Docker Compose 应用中容器的相互依赖关系将在下一节中介绍。
# 服务依赖
Docker Compose 运行和管理在`docker-compose.yaml`文件中定义的多容器应用。尽管容器被设计为独立的微服务，但是创建相互依赖的服务是非常值得期待的。例如，假设您有一个包含数据库和后端组件的两层应用，例如 PostgreSQL 数据库和 Java 后端。Java 后端组件要求 PostgreSQL 启动并运行，因为它应该连接到数据库来运行业务逻辑。因此，您可能需要定义多容器应用的服务之间的依赖关系。使用 Docker Compose，可以控制服务的启动和关闭顺序。
假设您有一个三容器应用，包含以下`docker-compose.yaml`文件:
```
version: "3"
services:
  init:
    image: busybox
  pre:
    image: busybox
    depends_on:
    - "init"
  main:
    image: busybox
    depends_on:
    - "pre"
```
在这个文件中，`main`容器依赖于`pre`容器，而`pre`容器依赖于`init`容器。Docker Compose 按照`init`、`pre`和`main`的顺序启动容器，如图 5.12 所示。此外，容器将以相反的顺序停止:`main`、`pre`，然后`init`:
![Figure 5.12: Service startup order ](img/B15021_05_12.jpg)
图 5.12:服务启动顺序
在下面的练习中，容器的顺序将用于填充文件的内容，然后将其提供给 web 服务器。
## 练习 5.03:Docker 编写的服务依赖关系
Docker Compose 中的服务可以配置为依赖于其他服务。在本练习中，您将创建一个包含四个容器的应用。前三个容器将连续运行，以创建一个由第四个容器提供服务的静态文件。
要完成练习，请执行以下步骤:
1.  创建一个名为`server-with-dependency`的文件夹，并使用`cd`命令导航到该文件夹:
    ```
    mkdir server-with-dependency
    cd server-with-dependency
    ```
2.  Create a file with the name `docker-compose.yaml` and the following content:
    ```
    version: "3"
    services:
      clean:
        image: busybox
        command: "rm -rf /static/index.html"
        volumes:
          - static:/static 
      init:
        image: busybox
        command: "sh -c 'echo This is from init container >>       /static/index.html'"
        volumes:
          - static:/static 
        depends_on:
        - "clean"
      pre:
        image: busybox
        command: "sh -c 'echo This is from pre container >>       /static/index.html'"
        volumes:
          - static:/static 
        depends_on:
        - "init"
      server:
        image: nginx
        volumes:
          - static:/usr/share/nginx/html  
        ports:
          - "8080:80"
        depends_on:
        - "pre"
    volumes:
      static:
    ```
    该文件由四个服务和一个卷组成。该卷名为`static`，它被安装到所有服务中。前三个服务对静态卷采取单独的操作。`clean`容器取出`index.html`文件，然后`init`容器开始填充`index.html`。接下来，`pre`容器向`index.html`文件写入一行。最后，`server`容器提供`static`文件夹中的内容。
3.  Start the application with the `docker-compose up` command. The output should look like the following:
    ![ Figure 5.13: Starting the application ](img/B15021_05_13.jpg)
    图 5.13:启动应用
    输出显示 Docker Compose 按照`clean`、`init`和`pre`的顺序创建容器。
4.  Open `http://localhost:8080` in the browser:
    ![Figure 5.14: Server output ](img/B15021_05_14.jpg)
    图 5.14:服务器输出
    服务器的输出显示`clean`、`init`和`pre`容器按照预期的顺序工作。
5.  Return to the Terminal in *step 3* and use *Ctrl* + *C* to close the application gracefully. You will see some HTTP request logs and, in the end, the `Stopping server-with-dependency_server_1` line:
    ![Figure 5.15: Stopping the application ](img/B15021_05_15.jpg)
图 5.15:停止应用
在本练习中，使用相互依赖的服务创建了一个 Docker Compose 应用。显示了 Docker Compose 如何以定义的顺序启动和管理容器。这是 Docker Compose 的一个基本特性，使用它可以创建复杂的多容器应用。
现在，让我们通过实现以下活动来测试我们在本章中已经获得的知识。在下一个活动中，您将学习如何使用 Docker Compose 安装 WordPress。
## 活动 5.01:使用 Docker 编写安装 WordPress
您被指派设计和部署一个博客，其数据库作为 Docker 中的微服务。您将使用 **WordPress** ，因为它是最受欢迎的**内容管理系统** ( **CMS** )，互联网上超过三分之一的网站都使用它。此外，开发和测试团队需要在不同的平台上隔离多次安装 WordPress 和数据库。因此，您需要将其设计为 Docker Compose 应用，并使用`docker-compose` CLI 进行管理。
执行以下步骤完成本活动:
1.  首先为你的`docker-compose.yaml`文件创建一个目录。
2.  使用 MySQL 和在`docker-compose.yaml`文件中定义的卷为数据库创建一个服务。确保设置了`MYSQL_ROOT_PASSWORD`、`MYSQL_DATABASE`、`MYSQL_USER`和`MYSQL_PASSWORD`环境变量。
3.  为在`docker-compose.yaml`文件中定义的 WordPress 创建一个服务。确保 WordPress 容器在数据库之后启动。对于 WordPress 的配置，不要忘记按照*步骤 2* 设置`WORDPRESS_DB_HOST`、`WORDPRESS_DB_USER`、`WORDPRESS_DB_PASSWORD`和`WORDPRESS_DB_NAME`环境变量。此外，您需要发布它的端口，以便能够从浏览器访问它。
4.  Start the Docker Compose application in `detached` mode. Upon successful deployment, you will have two containers running:
    ![Figure 5.16: WordPress and database containers ](img/B15021_05_16.jpg)
图 5.16: WordPress 和数据库容器
然后，您将能够在浏览器中到达 WordPress 的设置屏幕:
![Figure 5.17: WordPress setup screen ](img/B15021_05_17.jpg)
图 5.17: WordPress 设置屏幕
注意
此活动的解决方案可以通过[这个链接](16.html#_idTextAnchor328)找到。
在下一个活动中，您将通过创建一个三容器 Docker 应用并使用`docker-compose` CLI 进行管理，获得使用 Docker Compose 安装全景徒步应用的实践经验。
## 活动 5.02:使用 Docker Compose 记录全景徒步旅行应用
您的任务是使用 Docker Compose 创建全景徒步旅行应用的部署。您将利用全景徒步应用的三层架构，创建一个三容器 Docker 应用，其中包含数据库、网络后端和`nginx`容器。因此，您将把它设计为 Docker Compose 应用，并使用`docker-compose` CLI 进行管理。
执行以下步骤完成本活动:
1.  为你的`docker-compose.yaml`文件创建一个目录。
2.  使用 PostgreSQL 和在`docker-compose.yaml`文件中定义的卷为数据库创建服务。确保`POSTGRES_PASSWORD`环境变量设置为`docker`。此外，您需要在`docker-compose.yaml`中创建一个`db_data`卷，并将其装载到`/var/lib/postgresql/data/`中以存储数据库文件。
3.  Create a service for the Panoramic Trekking App defined in the `docker-compose.yaml` file. Ensure that you are using the `packtworkshops/the-docker-workshop:chapter5-pta-web` Docker image, which is prebuilt and ready to use from the registry. In addition, since the application is dependent on the database, you should configure the container to start after the database. To store the static files, create a `static_data` volume in `docker-compose.yaml` and mount it to `/service/static/`.
    最后，为`nginx`创建一个服务，并确保您正在使用注册表中的`packtworkshops/the-docker-workshop:chapter5-pta-nginx` Docker 映像。确保`nginx`容器在全景徒步应用容器之后启动。您还需要将相同的`static_data`卷安装到`/service/static/`位置。别忘了发布`nginx`端口`80`到`8000`从浏览器到达。
4.  Start the Docker Compose application in `detached` mode. Upon successful deployment, you will have three containers running:
    ![Figure 5.18: The application, database, and nginx containers ](img/B15021_05_18.jpg)
    图 5.18:应用、数据库和 nginx 容器
5.  Go to the administration section of the Panoramic Trekking App in the browser with the address `http://0.0.0.0:8000/admin`:
    ![Figure 5.19: Admin setup logon ](img/B15021_05_19.jpg)
    图 5.19:管理员设置登录
    您可以使用用户名`admin`和密码`changeme`登录，并添加新的照片和国家:
    ![Figure 5.20: Admin setup view ](img/B15021_05_20.jpg)
    图 5.20:管理设置视图
6.  Access the Panoramic Trekking App at the address `http://0.0.0.0:8000/photo_viewer` in the browser:
    ![Figure 5.21: Application view ](img/B15021_05_21.jpg)
图 5.21:应用视图
注意
此活动的解决方案可以通过[这个链接](16.html#_idTextAnchor329)找到。
# 总结
本章重点介绍如何使用 Docker Compose 来设计、创建和管理多容器应用。随着微服务架构的兴起，容器化应用的复杂性增加了。因此，如果没有适当的工具，创建、管理和排除多容器应用的故障就变得很困难。Docker Compose 是 Docker 工具箱中用于此目的的官方工具。
本章主要重点是全面学习`docker-compose`。为此，本章从`docker-compose`命令行界面的功能及其命令和标志开始。然后，`docker-compose.yaml`的解剖档案被呈现出来。Docker Compose 的功能实际上来自于`docker-compose.yaml`文件中定义的配置功能。因此，学习如何使用这些文件来管理多容器应用是至关重要的。
随后，说明了 Docker Compose 中的服务配置。您已经学习了如何为不同的环境配置服务并适应未来的变化。然后，我们转向服务依赖关系，学习如何创建更复杂的容器化应用。
本章中的每个练习都旨在展示 Docker 的功能，包括不同的 CLI 命令和 YAML 文件部分。获得命令行界面的实践经验以及创建用于测试和生产环境的多容器应用所需的文件是至关重要的。
在下一章中，您将在 Docker 中了解网络。容器化和可扩展应用中的网络是基础架构的关键部分之一，因为它将分布式部分粘合在一起。这就是为什么 Docker 中的网络由可插入的驱动程序和选项组成，以增强容器化的应用开发和管理体验。