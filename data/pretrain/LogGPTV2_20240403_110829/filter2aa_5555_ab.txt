    SmallE()
```
爆破时间有点长，，拿到 flag
```
Didn't you know RSA padding is really important? Now you see a non-padding message is so dangerous. And you should notice this in future.Fl4g: flag{Sm4ll_3xpon3nt_i5_W3ak}
```
### 题目
## RSA 衍生算法——Rabin 算法
### 攻击条件
Rabin 算法的特征在于 $e=2$。
### 攻击原理
密文：
$$
c = m^2\bmod n
$$
解密：
- 计算出 $m_p$ 和 $m_q$：
$$
\begin{align*}
m_p &= \sqrt{c} \bmod p\\
m_q &= \sqrt{c} \bmod q
\end{align*}
$$
- 用扩展欧几里得计算出 $y_p$ 和 $y_q$：
$$
y_p \cdot p + y_q \cdot q = 1
$$
- 解出四个明文：
$$
\begin{align*}
a &= (y_p \cdot p \cdot m_q + y_q \cdot q \cdot m_p) \bmod n\\
b &= n - a\\
c &= (y_p \cdot p \cdot m_q - y_q \cdot q \cdot m_p) \bmod n\\
d &= n - c
\end{align*}
$$
注意：如果 $p \equiv q \equiv 3 \pmod 4$，则
$$
\begin{align*}
m_p &= c^{\frac{1}{4}(p + 1)} \bmod p\\
m_q &= c^{\frac{1}{4}(q + 1)} \bmod q
\end{align*}
$$
而一般情况下，$p \equiv q \equiv 3 \pmod 4$ 是满足的，对于不满足的情况下，请参考相应的算法解决。
### 例子
这里我们以 XMan 一期夏令营课堂练习（Jarvis OJ 有复现）为例，读一下公钥。
```bash
➜  Jarvis OJ-hard RSA git:(master) ✗ openssl rsa -pubin -in pubkey.pem -text -modulus 
Public-Key: (256 bit)
Modulus:
    00:c2:63:6a:e5:c3:d8:e4:3f:fb:97:ab:09:02:8f:
    1a:ac:6c:0b:f6:cd:3d:70:eb:ca:28:1b:ff:e9:7f:
    be:30:dd
Exponent: 2 (0x2)
Modulus=C2636AE5C3D8E43FFB97AB09028F1AAC6C0BF6CD3D70EBCA281BFFE97FBE30DD
writing RSA key
-----BEGIN PUBLIC KEY-----
MDowDQYJKoZIhvcNAQEBBQADKQAwJgIhAMJjauXD2OQ/+5erCQKPGqxsC/bNPXDr
yigb/+l/vjDdAgEC
-----END PUBLIC KEY-----
```
$e=2$，考虑 Rabin 算法。首先我们先分解一下 p 和 q，得到
```text
p=275127860351348928173285174381581152299
q=319576316814478949870590164193048041239
```
编写代码
```python
#!/usr/bin/python
# coding=utf-8
import gmpy2
import string
from Crypto.PublicKey import RSA
# 读取公钥参数
with open('pubkey.pem', 'r') as f:
    key = RSA.importKey(f)
    N = key.n
    e = key.e
with open('flag.enc', 'r') as f:
    cipher = f.read().encode('hex')
    cipher = string.atoi(cipher, base=16)
    # print cipher
print "please input p"
p = int(raw_input(), 10)
print 'please input q'
q = int(raw_input(), 10)
# 计算yp和yq
inv_p = gmpy2.invert(p, q)
inv_q = gmpy2.invert(q, p)
# 计算mp和mq
mp = pow(cipher, (p + 1) / 4, p)
mq = pow(cipher, (q + 1) / 4, q)
# 计算a,b,c,d
a = (inv_p * p * mq + inv_q * q * mp) % N
b = N - int(a)
c = (inv_p * p * mq - inv_q * q * mp) % N
d = N - int(c)
for i in (a, b, c, d):
    s = '%x' % i
    if len(s) % 2 != 0:
        s = '0' + s
    print s.decode('hex')
```
拿到 flag，`PCTF{sp3ci4l_rsa}`。
### 题目