design the first semantic-aware PowerShell attack detection
system. To enable semantic-based detection, we employ the
classic Objective-oriented Association (OOA) mining algorithm
to obtain PowerShell attack signatures, and newly identifie
31 OOA rules for PowerShell attacks based on a collection of
malicious PowerShell script databases.
• Based on a collection of 6483 PowerShell script samples (2342
benign ones and 4141 malicious ones), we find that our de-
obfuscation method is not only effective, which increases the
similarity between the obfuscated and original scripts from only
0.5% to around 80%, but also efficient, which takes less than 0.5
seconds on average for scripts with an average size of 5.4 Kilo-
bytes. By applying our deobfuscation, the attack detection rates
for Windows Defender and VirusTotal increase substantially
from 0.3% and 2.65% to 75.0% and 90.0%. Furthermore, when our
Figure 2: Average alerts count on VirusTotal for original and
obfuscated samples
Table 2: Obfuscation schemes
Scheme #
S1
S2
S3
S4
Adopted obfuscation techniques (§2)
O1, O2 (Token-level)
O1, O2 (Script block-level)
O1, O3 (Script block-level, Secstring encoding)
O1, O3 (Script block-level, Hex encoding)
memory without any form of isolation, and thus can avoid ma-
licious files on the disk and bypass traditional file-based defense
methods. The first two points support live-off-the-land attacks, and
the third point makes complete fileless attacks feasible. To make
matters worse, it is not complicated to conduct such attacks at all.
For example, open source PowerShell attack frameworks, such as
Empire [1] and Nishang [54], provide wide distribution of these
attacks.
2.2 Obfuscation Techniques for PowerShell
Obfuscation is the most popular way to evade detection. For bi-
nary programs, logic structure obfuscation is widely adopted. Some
analysts attempted to migrate these methods to PowerShell and im-
plemented AST-based obfuscation [15]. However, the effectiveness
of this type of method is extraordinarily limited. For PowerShell,
in order to hide malicious intentions and thus avoid detection, at-
tackers often take advantage of the dynamic nature of PowerShell
to create highly obfuscated scripts. Specifically, PowerShell has
no clear boundary between code and data. As shown in Figure 1,
the scripts can be constructed at runtime. Logically, the process of
executing obfuscated scripts can be divided into two steps: (1) Cal-
culating strings that can play multiple roles in scripts. Theoretically,
as long as the process of calculating a string is reversible, a corre-
sponding obfuscation method can be found. So there are numerous
methods to do obfuscations. (2) Reconstructing original scripts and
executing them. For reconstruction at the token level, these two
steps are mixed up, which makes the deobfuscation more challeng-
ing. We analyze the commonly used obfuscation techniques in the
Symantec’s white paper [21] and discuss them in the following
three categories below:
O1. Randomization. Randomized obfuscation is a technology that
attackers can make random changes to scripts without affecting
their executions and semantics. These techniques include white
Figure 1: Examples of obfuscated scripts at different levels
deobfuscation is applied, our semantic-aware attack detection
system outperforms both Windows Defender and VirusTotal
with a 92.3% true positive rate and a 0% false-positive rate on
average.
2 BACKGROUND AND MOTIVATION
Due to unique features of PowerShell, it is commonly used as an
attack vector. For example, according to the attack knowledge data-
base organized by MITRE [3], PowerShell is used to implement
various functions at different stages of real-world attacks. Among
all the samples, PowerShell is most commonly used for download-
ing and payload execution. At the same time, PowerShell is applied
to establish reverse shells and gather information on the target ma-
chines. In this section, we will discuss the challenges in PowerShell
attacks from two perspectives.
2.1 “Living Off the Land” and Fileless Attacks
via PowerShell
“Living off the land” attacks refer to attacks that drop as fewer
files as possible and only use clean system tools to avoid detection.
Fileless attacks refer to attacks that avoid leaving any trace on the
disk. According to Symantec’s white paper [64], these two attacks
have been the trend of cyber attacks in recent years.
PowerShell is an ideal tool for such attacks for several reasons.
First, PowerShell is pre-installed on all Windows computers since
Windows 7 and Windows Server 2008 R2. Thus, at present, ma-
licious PowerShell scripts can compromise almost all Windows.
Second, as a powerful first-party admin tool, PowerShell provides
easy access to all major Windows components including Windows
Management Instrumentation (WMI) and Component Object Model
(COM), which can directly trigger many privileged system-level
operations. Third, PowerShell scripts can be executed directly from
(New-Object Net.WebClient).DownloadString("hxxps://raw.githubusercontent.com/PowerShellEmpire/Empire/master/data/module_source/code_execution/Invoke-Shellcode.ps1")# Step 1: Calculate the string using decoding$SecstringEncoding =[Runtime.InteropServiceS.Marshal]::Protostringauto([Runtime.InteropServiceS.Marshal]::SecureStringtObstr($('76492d1116743f0423413b16050...=='| Converto-Securestring -K (96..65)))# Step 2: "Reconstruct" at the script block leveland executionInvoke-Expression $SecstringEncoding# Step 1: Calculate the string using multiple methods$StrReorder = "{1}{0}{2}"-f'w-o','Ne','ject'$Strjoint = "Net.W" + "ebClient"$Random = "downlOAdstRIng"$Url = "{9}...{26}"-f'ellE'...'s1'# Step 2: "Reconstruct" at the token level andexecution(&$StrReorder $Strjoint).$Random.Invoke($Url)(a) Original script(b) Encoding-based obfuscation at script block level(c) Multiple obfuscation methods at token levelspace randomization, case randomization, variable and function
name randomization, and insertion characters ignored by Power-
Shell. These techniques take the advantage that PowerShell inter-
preter is not sensitive to certain script properties, such as case-
insensitive. The variable "$Random" in Figure 1 (c) is an example
for this kind of obfuscation. Other methods, such as using aliases
rather than full-type commands, can be classified into this category.
This kind of obfuscation only affects reading, but does not affect
semantics and syntax.
O2. String manipulation. In order to obfuscate strings in Power-
Shell, there are a variety of methods such as string splitting, string
reversing and string reordering, which refer to the calculation of
variables "$StrReorder", "$Strjoint" and "$Url" in Figure 1
(c).
O3. Encoding. Encoding-based obfuscation is the most common
obfuscation technique in the real world. After encoding, the obfus-
cated scripts reflect a small amount of information of the original
scripts. Variables "$SecstringEncoding" in Figure 1 (b) shows
how encoding is used in obfuscation. There are several built-in
encoding functions and also attackers can write their encoding
modules easily.
In practice, attackers frequently combine these methods to in-
crease the effect of obfuscation. For example, the famous PowerShell
attack framework Empire [1] has a obfuscated variant Obfuscat-
edEmpire [16] that mixes the above three kinds of obfuscation. In
recent white papers [30, 33, 45] on attack analysis, it is also reported
that many attacks tend to use at least one of obfuscation methods.
2.3 Effectiveness of Obfuscation on PowerShell
Attack Detection Today
In this section, we experimentally explore the effectiveness of rep-
resentative PowerShell script obfuscation schemes against state-of-
the-art PowerShell attack detection systems.
Experiment methodology. In this experiment, we choose five
representative obfuscation schemes with combinations of obfusca-
tion techniques at different construction levels and with different
encoding methods, which are summarized in Table 2. As a basic
obfuscation technique, randomization is applied to all five schemes.
For scheme S1 and S2, string manipulations are then adopted at
the token level and the script block level, respectively. For scheme
S3 and S4, we apply encoding based obfuscation (described in §2),
which is utilized at the script block level. We pick two types of
encoding techniques for them, namely, secure string-based encod-
ing, and hex-based encoding, both of which are commonly used
[65], and represent the encoding with the secret key and the encod-
ing without the secret key, respectively. For scheme S5, we apply
AST-based obfuscation (described in §2). All obfuscation techniques
used in these schemes are available in open source project Invoke-
Obfuscation [17], which is widely used in APT attacks like Emotet
[45], POWERTON [30] and APT19 [33].
For PowerShell script samples, we collect 75 malicious samples
from open source attack framework and security blogs, and the
same number of benign samples from Github [7]. Each of these
150 scripts is then obfuscated using the 5 schemes above. Subse-
quently, we upload both the original scripts and obfuscated scripts
to VirusTotal [11], a website that aggregates as many as 70 state-
of-art antivirus products and performs online scanning. From the
scanning results, we count the number of the antivirus engines that
report malware alerts.
Results. The experiment results are shown in Figure 2. As
shown, all four obfuscation schemes can effectively bypass nearly
all state-of-the-art antivirus products. More specifically, as long as
one of them is applied, the average number of alerts for malicious
scripts drops significantly from 13.2 to at most 3.1, which is at least
4.25 times lower. Scheme S2 is especially effective, which reduces
the average alert number by as high as 1320 times to only 0.01.
Compared to S2, the alert number for scheme S3 is slightly higher,
which is because the obfuscation in S2 is at the token level, and thus
more fine-grained than that in S3 in hiding malicious behaviors.
The alert numbers for S3 and S4 are higher than those for S1 and S2,
but are still only around 2 to 3, which means that malicious scripts
with obfuscation scheme S3 and S4 are still able to evade majority
of the antivirus engines today. Note that the alert numbers for S3
and S4 are higher because there are three antivirus engines that
always raise alerts when encoding-based obfuscation is detected. As
shown, even for benign samples with scheme S3 and S4, these three
engines also reported alerts. Since obfuscations have benign usage
such as for intellectual property protection and avoid unwanted
changes [60], this heuristics can lead to false positives, which is
probably why majority of the antivirus engines do not use such
heuristics as shown in Figure 2.
3 OVERVIEW
As shown in §2.3, obfuscation is highly effective in bypassing to-
day’s the PowerShell attack detection. To combat such threat, it is
thus highly desired to design a effective and light-weight deobfus-
cation mechanism for PowerShell scripts. In this paper, we are the
first to design such a mechanism and use it as the key building block
to develop the first semantic-aware PowerShell attack detection
system. As shown in Figure 3, the detection process can be divided
into three phases:
Deobfuscation phase. In the deobfuscation phase, we propose
a novel subtree-based approach leveraging the features of the Pow-
erShell scripts. We treat the AST subtrees as the minimum units
of obfuscation, and perform recovery on the subtrees, and finally
construct the deobfuscated scripts. The deobfuscated scripts are
then used in both training and detection phases. Note that such
deobfuscation function can benefit not only the detection of Power-
Shell attacks in this paper but the analysis and forensics of them as
well, which is thus a general contribution to the PowerShell attack
defense area.
Training and detection phases. After the deobfuscation phase,
the semantics of the malicious PowerShell scripts are exposed and
thus enable us to design and implement the first semantic-aware
PowerShell attack detection approach. As shown on the right side of
Figure 3, we adopt the classic Objective-oriented Association (OOA)
mining algorithm [68] on malicious PowerShell script databases,
which is able to automatically extract 31 OOA rules for signature
matching. Besides, we can adapt existing anti-virus engines and
manual analysis as extensions.
Obfuscated PowerShell scripts have to bring out the hidden
original scripts so that interpreter can execute them correctly. In
Figure 1, we show the separation of the obfuscated script pieces
from other parts of the script. As shown, these script pieces have
two parts: hidden original script pieces, and recovery algorithms.
More importantly, these pieces return string-typed recovered pieces.
Therefore, we call these script pieces recoverable pieces, and the
corresponding subtrees in AST recoverable subtrees. As long as these
recoverable pieces are found, we can directly use the embedded
recovery algorithms to recover the original scripts. However, in
practice, there is no clear boundary between the recoverable pieces
and other parts of the script, especially when the script is obfuscated
in multiple layers. To address this problem, we propose an AST
subtree-based approach that locates recoverable pieces first and
then reconstructs the original scripts.
4.1 Subtree-based Deobfuscation Approach
Overview.
The overall process of our subtree-based deobfuscation is shown
in Figure 4. At a high level, the process of deobfuscation can be
divided into five stages. First, PowerShell script samples are parsed
to ASTs, and subtrees are extracted. In addition, variables may be
used to store some key information during the obfuscation process.
So when we build AST, we will add links to the elements at the
two ends of an assignment statement. Such connections should
be considered in both step 2 and 3. Second, we find obfuscated
subtrees/pieces with a classifier. It is noteworthy that not all trees
met obfuscation characteristics are recoverable subtrees. Third,
obfuscated pieces are recovered with an emulator to obtain original
script pieces. Fourth, the deobfuscated pieces should be parsed into
new ASTs and replace the obfuscated subtrees. Such process loops
until there is no obfuscated subtree left. Finally, script pieces are
reconstructed to get the deobfuscated scripts. Then we use a post-
processing module to remove some redundant structures added
during the obfuscation process in the scripts.
In stage 2, distinguishing obfuscated pieces and recoverable ones