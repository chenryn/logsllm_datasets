information in a ﬁngerprint. The higher the entropy is, the
more unique and identiﬁable a ﬁngerprint will be.
Let H be the entropy, X a discrete random variable with
possible values {x1, ..., xn} and P (X) a probability mass
function. The entropy follows this formula:
H(X) = − (cid:2)
P (xi) logb P (xi)
i
881881
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:16 UTC from IEEE Xplore.  Restrictions apply. 
NORMALIZED ENTROPY FOR SIX ATTRIBUTES COLLECTED BOTH BY
PANOPTICLICK AND AMIUNIQUE
TABLE III
Attribute
User agent
List of plugins
List of fonts
Screen resolution
Timezone
Cookies enabled
AmIUnique
0.570
0.578
0.446
0.277
0.201
0.042
Panopticlick
0.531
0.817
0.738
0.256
0.161
0.019
We use the entropy of Shannon where b = 2 and the result is
in bits. One bit of entropy reduces by half the probability of
an event occurring.
Normalized Shannon’s entropy: To compare both the AmI-
Unique and Panopticlick datasets, which are of different sizes,
we use a normalized version of Shannon’s entropy:
H(X)
HM
HM represents the worst case scenario where the entropy is
maximum and all values of an attribute are unique (HM =
log2(N ) with N being the number of ﬁngerprints in our
dataset).
The advantage of this measure is that it does not depend
on the size of the anonymity set but on the distribution of
probabilities. We are quantifying the quality of our dataset
with respect to an attribute’s uniqueness independently from
the number of ﬁngerprints in our database. This way, we can
qualitatively compare the two datasets despite their different
sizes.
2) Comparison with Panopticlick:
Entropy: Table III lists the normalized Shannon’s entropy
for six different attributes for both the AmIUnique and the
Panopticlick datasets. For fairness of comparison, we used
our dataset
in its entirety by keeping ﬁngerprints without
JavaScript. We observe that
the entropy values for both
datasets are similar for all attributes except for the list of
plugins and the list of fonts.
For the list of plugins, it is still the most discriminating
attribute but a difference of 0.24 is present. It can be explained
by the absence of plugins on mobile devices which are
increasingly used to browse the web and by the lack of support
for the old NPAPI plugin architecture on Chrome since April
2015 (more details in section V).
For the list of fonts, a noticeable drop of 0.29 occurs
because half of the ﬁngerprints in the AmIUnique dataset
were collected on browsers that do not have the Flash plugin
installed or activated. Since our ﬁngerprinting script collects
the list of fonts through the Flash API, this means half of
our ﬁngerprints do not contain a list of fonts, reducing its
entropy. The absence of Flash can be explained (i) by the lack
of Flash on mobile devices; (ii) by the fact that the visitors
of AmIUnique are privacy conscious and tend to deactivate
Flash. Yet, we notice that the entropy of the list of fonts is
still high.
The small value of entropy for the timezone shows that
our dataset
is biased towards visitors living in the same
geographical areas. A higher level of entropy would have
meant a more spread distribution of ﬁngerprints across the
globe.
Distribution of ﬁngerprints: We compared frequency dis-
tributions w.r.t. anonymity set sizes from both datasets and
observed very similar trends. We also studied each attribute
separately and observed that the most discriminating attributes
are still the ones found by Eckersley with the addition of new
efﬁcient techniques like canvas ﬁngerprinting. More details on
the distributions can be found in Appendix D.
III. FINGERPRINTING WITH THE MOST RECENT WEB
TECHNOLOGIES
AmIUnique collects 17 attributes to form a browser ﬁnger-
print. Out of the 118,934 ﬁngerprints that we study, 89.4% are
unique. In this section, we analyze how the attributes collected
with the most recent technologies (7 attributes at the bottom
of Table I) contribute to the uniqueness of ﬁngerprints.
A. Canvas ﬁngerprinting
The canvas element in HTML5 [8] allows for scriptable
rendering of 2D shapes and texts. This way any website
can draw and animate scenes to offer visitors dynamic and
interactive content. As discovered by Mowery and al. [4] and
investigated by Acar and al. [6], canvas ﬁngerprinting can be
used to differentiate devices with pixel precision by rendering
a speciﬁc picture following a ﬁxed set of instructions. This
technique is gaining popularity in tracking scripts due to the
fact that the rendered picture depends on several layers of
the system (at least the browser, OS, graphics drivers and
hardware).
1) Our test: The ﬁngerprinting script used by AmIUnique
includes a test based on the canvas element. With this image,
we collect information about three different attributes of the
host device, as discussed below.
Figure 1 displays the image that we use, as it is rendered
by a Firefox browser running on Fedora 21 with an Intel i7-
4600U processor. Our test replicates the test performed by
AddThis and described in details by Acar et al [6]: print a
pangram twice with different fonts and colors, the U+1F603
unicode character and rectangle with a speciﬁc color. The only
adaptation is to change the position of the second string so that
it is not intertwined with the ﬁrst one. More details about this
test are discussed below.
Fig. 1. Example of a rendered picture following the canvas ﬁngerprinting test
instructions
882882
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:16 UTC from IEEE Xplore.  Restrictions apply. 
(a) Windows 7
(b) Windows 10
(c) Linux
(d) iOS
(e) Firefox OS (f) Android 4.3 and
before
(g) Android 4.4
(h) Android 5.0
(j) Android on a
Samsung device
(i) Android on
an LG device
Fig. 2. Comparison of the “Smiling face with open mouth" emoji on different
devices and operating systems
(k) Android on
an HTC device
(l) Emoji not
supported
Font probing: This test captures OS diversity. The script
tells the browser to render the same pangram (a string with
all the letters of the alphabet) twice. For the ﬁrst line we force
the browser to use one of its fallback fonts by asking for a font
with a fake name. Depending on the OS and fonts installed
on the device, the fallback font differs. For the second line
the browser is asked to use the Arial font that is common in
many operating systems and is used for the hardware and OS
ﬁngerprinting described next.
Device and OS ﬁngerprinting: The last character of our
string may be the most important one. This character should
not be confused with an emoticon, which is a succession
of letters, numbers and punctuation marks like “:)" or “50
2−50
1
pluginsJS
e
l
i
b
o
M
p
o
t
k
s
e
D
% 0
20
40
60
80
100
Fig. 3. Comparison of anonymity set sizes on the list of plugins between
desktop and mobile devices
context. Our analysis of mobile device ﬁngerprinting is based
on 13,105 mobile ﬁngerprints. We select these ﬁngerprints
from our dataset by analyzing the user-agents. If the user-
agent contains a substring that is present in a predeﬁned set
(’Mobile’, ’Android’, ’iPhone’ or ’iPad’), the ﬁngerprint is
selected as a mobile ﬁngerprint, otherwise, it belongs to the
desktop/laptop category.
In this section, we ﬁrst compare desktop/laptop ﬁngerprints
with mobile ones. Then, we perform a detailed analysis of
mobile ﬁngerprints, looking at differences between browsers
and between mobile operating systems.
A. Mobile and Desktop ﬁngerprint comparison
Using the attributes from Table I, we succeeded in uniquely
identifying 90% of desktop ﬁngerprints. This number is lower
for mobile ﬁngerprints at 81%, yet still quite effective. At ﬁrst
sight, the overall results are close. However, as we discuss in
this section, the discriminating attributes for mobile ﬁnger-
prints are very different from those for desktop ﬁngerprints.
One factor is the lack of plugins in general, and Flash in
particular, for mobile devices. We also discuss the importance
of the new attributes collected through the HTML5 canvas and
WebGL elements on mobile device ﬁngerprinting.
If we take a look at Figure 3, we can clearly notice an
important difference. For desktops, more than 37% of the
collected ﬁngerprints have a unique list of plugins, while it is
at 1% for mobile devices. This is due to the fact that mobiles
were designed to take full advantage of HTML5 functionalities
and do not rely on plugins. For example, Adobe removed the
Flash player from the Google Play store in August 2012 as
part of a change of focus for the company [13]. Plugins are
considered to be unsuitable for the modern web and Google
states in their move to deprecate NPAPI support for their
Chrome browser that these plugins are a source of “ hangs,
crashes, security incidents, and code complexity" [14]. This
choice helps mobile device users gain some privacy with
regards to ﬁngerprint uniqueness. The level of entropy of the
plugin attribute is close to zero (some iOS systems have the
QuickTime plugin and some Android systems reported having
Flash, possibly from legacy installations). The lack of plugins
also reduces information leaks that could come from them. In
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:16 UTC from IEEE Xplore.  Restrictions apply. 
Size of the anonymity sets
>50
2−50
1
userAgentHttp
e
l
i
b
o
M
p
o
t
k
s
e
D
userAgentHttp Mobile
S
O
i
i
d
o
r
d
n
A
Size of the anonymity sets
>50
2−50
1
% 0
20
40
60
80
100
% 0
20
40
60
80
100
Fig. 4. Comparison of anonymity set sizes on the user-agent between desktop
and mobile devices
Fig. 5. Comparison of anonymity set sizes on the user-agent between Android
and iOS devices
particular, mobile phones and tablets do not have the Flash
plugin, thus all the ﬁngerprint attributes leaked through the
Flash API are unavailable.
Despite the unavailability of the two most discriminating
attributes from desktop ﬁngerprints (list of fonts and plugins),
mobile ﬁngerprints are still very much recognizable. This is
due to two main factors: very rich and revealing user agents
and very discriminating emojis.
Figure 4 shows that user-agents found on mobiles are
ﬁve times more unique than the ones found on desktops. In
our dataset, about 1 smartphone out of 4 is instantaneously
recognizable with just
the user-agent. This is due to two
factors:
• Phone manufacturers include the model of their phone
and even the version of the Android ﬁrmware directly in
the user-agent.
Example:
Mozilla/5.0 (Linux; Android 5.0.1;
Nexus 5 Build/LRX22C) AppleWebKit
/537.36 (KHTML, like Gecko) Chrome
/40.0.2214.109 Mobile Safari/537.36
• On a smartphone, applications are slowly replacing the
default browser and they have access to a wide range
of personal
information after the user has explicitly
granted speciﬁc permissions. The problem is any of these
information can be exposed for the world to see by
the application. We noticed in our dataset that a lot of
user-agents collected on mobile devices were sent by an
application and not by the native browser.
Example with the Facebook app where the phone car-
rier (Vodafone UK) and the exact model of the phone
(“iPhone7" = iPhone 6 Plus) is included in the user-agent:
Mozilla/5.0 (iPhone; CPU iPhone OS 8
_1_1 like Mac OS X) AppleWebKit
/600.1.4 (KHTML, like Gecko) Mobile
/12B436 [FBAN/FBIOS;FBAV
/20.1.0.15.10;FBBV/5758778;FBDV/
iPhone7,2;FBMD/iPhone;FBSN/iPhone
OS;FBSV/8.1.1;FBSS/2; FBCR/
vodafoneUK;FBID/phone;FBLC/en_GB;
FBOP/5]
Sometimes, even the model of
the phone can give
away your phone carrier. One ﬁngerprint reported “SM-
G900P". It is a Samsung Galaxy S5 and the “P" is unique
to the Sprint phone carrier.
The second highest source of entropy for mobile devices
comes from canvas ﬁngerprinting. Mobiles have unique hard-
ware impacting the ﬁnal rendered picture as explained in
section III-A and emojis can also be really discriminating
between two devices. As seen in Figure 2, some manufacturers
have their own set of emojis and even between different
versions of Android, the emojis have evolved, splitting the
Android user base into recognizable groups.
In the end, desktop and mobile ﬁngerprints are somehow
equally unique in the eyes of browser ﬁngerprinting even
though the discriminating information does not come from
the same attributes.
The complete details of attributes’ entropy between desktop
and mobile devices can be found in Table A of the Appendix.
B. Comparison Mobile OS and browsers
More than 97% of mobile ﬁngerprints collected on AmIU-
nique are either running Android or iOS: 7,416 run on Android
and 5,335 on iOS. How diverse is the set of ﬁngerprints
coming from both of these operating systems?
Figure 5 shows the size of anonymity sets for user-agents on
both Android and iOS devices. We can see that user agents
on Android devices expose more diversity with three times
as many users being in an anonymity set of size 1 (9% for
iOS devices and 35% for Android devices). This is due to the
wealth of Android models available on the market. Moreover,
our dataset may not be representative enough of the global
diversity of Android devices so these percentages may be
even higher in reality. For iOS devices, the diversity is still
high but much less pronounced since users share devices with
identical conﬁgurations. We can notice a trend where half of
the collected iOS ﬁngerprints are in really large anonymity
sets. The fact that Apple is the only manufacturer of iOS
devices shows in this graph.
885885
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:16 UTC from IEEE Xplore.  Restrictions apply. 
userAgentHttp Mobile
f
x
o
e
r
i
F
e
m
o
r
h
C
Size of the anonymity sets
>50
2−50
1
Complete fingerprint
Size of the anonymity sets
>50
2−50