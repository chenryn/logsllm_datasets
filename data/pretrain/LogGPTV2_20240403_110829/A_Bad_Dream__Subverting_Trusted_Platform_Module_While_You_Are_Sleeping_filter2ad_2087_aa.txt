title:A Bad Dream: Subverting Trusted Platform Module While You Are Sleeping
author:Seunghun Han and
Wook Shin and
Jun-Hyeok Park and
Hyoung-Chun Kim
A Bad Dream: Subverting Trusted Platform  
Module While You Are Sleeping
Seunghun Han, Wook Shin, Jun-Hyeok Park, and HyoungChun Kim,  
National Security Research Institute
https://www.usenix.org/conference/usenixsecurity18/presentation/han
This paper is included in the Proceedings of the 
27th USENIX Security Symposium.
August 15–17, 2018 • Baltimore, MD, USA
ISBN 978-1-939133-04-5
Open access to the Proceedings of the 27th USENIX Security Symposium is sponsored by USENIX.A Bad Dream: Subverting Trusted Platform Module While You Are Sleeping
Seunghun Han
Wook Shin
National Security Research Institute
Jun-Hyeok Park
HyoungChun Kim
{hanseunghun, wshin, parkparkqw, khche}@nsr.re.kr
Abstract
This paper reports two sorts of Trusted Platform Mod-
ule (TPM) attacks regarding power management. The at-
tacks allow an adversary to reset and forge platform con-
ﬁguration registers which are designed to securely hold
measurements of software that are used for bootstrapping
a computer. One attack is exploiting a design ﬂaw in the
TPM 2.0 speciﬁcation for the static root of trust for mea-
surement (SRTM). The other attack is exploiting an im-
plementation ﬂaw in tboot, the most popular measured
launched environment used with Intel’s Trusted Execu-
tion Technology. Considering TPM-based platform in-
tegrity protection is widely used, the attacks may affect
a large number of devices. We demonstrate the attacks
with commodity hardware. The SRTM attack is sig-
niﬁcant because its countermeasure requires hardware-
speciﬁc ﬁrmware patches that could take a long time to
be applied.
1
Introduction
The Trusted Platform Module (TPM) was designed to
provide hardware-based security functions. A TPM chip
is a tamper-resistant device equipped with a random
number generator, non-volatile storage, encryption func-
tions, and status registers, which can be utilized for appli-
cations such as ensuring platform integrity and securely
storing keys. The Trusted Computing Group (TCG) is an
industry consortium whose goal is to specify and stan-
dardize the TPM technology, which includes security-
related functions, APIs, and protocols. The initial ver-
sion of the TPM main speciﬁcation (TPM 1.2) [31] was
published in 2003. The revised version, the TPM library
speciﬁcation 2.0 (TPM 2.0) [37] was initially published
in 2013.
The TPM technology provides a trustworthy founda-
tion for security-relevant applications and services. TPM
is a major component of the integrity measurement chain
that is a collection of system components such as the
bootloader, kernel, and other components. The chain can
either start statically from Basic Input and Output System
(BIOS)/Uniﬁed Extensible Firmware Interface (UEFI)
code modules when the system is booted or dynamically
from a specialized instruction set during runtime.
Regardless of how the chain starts,
the measure-
ments are “extended” to platform conﬁguration registers
(PCRs) inside the TPM. When a value is extended to a
PCR, the value is hashed together with the previously
stored value in the PCR and then the PCR is updated with
the hashed result. A small bit change to a PCR value will
affect all the following extended values. The extended
values in PCRs can be compared to expected values lo-
cally or submitted to a remote attestor. Namely, the in-
tegrity measurement chain must be started from a trust-
worthy entity, also known as the root of trust for mea-
surement (RTM).
The TPM has been widely deployed in commodity de-
vices to provide a strong foundation for building trusted
platforms, especially in devices used in enterprise and
government systems. The US Department of Defense
also considers the TPM to be a key element for dealing
with security challenges in device identiﬁcation and au-
thentication, encryption, and similar tasks.
The TPM chip is designed to cooperate with other
parts of the system, e.g., the ﬁrmware and the operating
system. Mechanisms for cooperation are often compli-
cated and fail to be clearly speciﬁed. This may result in
critical security vulnerability.
Power management is one of the features which in-
creases complexity of the cooperation. The goal of
power management is to save power by putting the sys-
tem into a low-power state or even cutting off the power
when the system is idle. How the power management
works is quite complicated because each peripheral de-
vice can have its own power state independently from the
system-wide power state.
A recent Linux kernel supports the Advanced Conﬁg-
USENIX Association
27th USENIX Security Symposium    1229
uration and Power Interface (ACPI), which is an open
industry speciﬁcation that enables operating system-
centric intelligent and dynamic management coordina-
tion with power management-aware devices such as
CPUs, networks, storage, and graphics processing units.
TPM is a peripheral that supports ACPI. The informa-
tion stored in the TPM chip such as keys and state val-
ues are very important for maintaining the security of the
whole system, TPM has to actively and safely save and
restore the state as the power state changes.
Unfortunately, the TPM does not safely maintain the
state when the power state changes. We found vulnera-
bilities in both types of RTM that allow an adversary to
reset and forge PCRs when the system wakes up. There-
fore, the system may look normal even after it has been
modiﬁed. Considering that TPM has been widely de-
ployed, the impact of our ﬁnding is critical, especially
when it comes to static measurement. The vulnerabil-
ity of a static RTM (SRTM) is due to a ﬂawed speciﬁ-
cation, which means that many products that implement
the speciﬁcation can be affected and patches would not
be applicable to all of the products immediately. The
vulnerability of the dynamic RTM (DRTM) is due to
a bug in the open source project, tboot, which is the
most popular measured launch environment (MLE) for
Intel’s Trusted eXecution Technology (TXT). Patching
the bug is relatively simple, and our patch1 can be found
on the tboot project [9]. We also have obtained Common
Vulnerabilities and Exposures (CVE) identiﬁers: CVE-
2018-6622 for the SRTM and CVE-2017-16837 for the
DRTM attack, respectively.
This paper makes the following contributions:
• We present vulnerabilities that allow an adversary
to reset the PCRs of a TPM. The PCRs are reset-
table whether the RTM processes start statically or
dynamically.
• We craft attacks exploiting these vulnerabilities.
The attacks extract normal measurements from the
event logs recorded during the boot process, and
then they use the measurements to perform a replay
attack.
• We also address countermeasures for these vul-
nerabilities. To remedy the SRTM vulnerability
that we found, hardware vendors must patch their
BIOS/UEFI ﬁrmware. We have contacted them and
are waiting for releases of the patches. We also pro-
duced a patch by ourselves for the DRTM vulner-
ability that we found. We have obtained the CVE
IDs of both vulnerabilities.
In the following sections, we review TPM and ACPI
technologies. Then, we introduce their vulnerabilities
Static Root of Trust for Measurement 
BIOS/UEFI firmware 
S-CRTM 
BIOS/UEFI 
Code 
Bootloader 
Kernel 
User 
Applications 
Power On/ 
Restart 
TPM 
Dynamic Root of Trust for Measurement 
(Intel Trusted Execution Technology) 
Untrusted 
Code 
D-CRTM 
(DCE) 
tboot 
(DLME) 
Bootloader 
Kernel 
User 
Applications 
DL Event 
TPM 
: Extend a hash of next code to TPM 
: Execute next code 
Figure 1: Examples of static and dynamic RTM (SRTM
and DRTM, respectively) processes
and exploits against them. The exploits are demonstrated
in a variety of commercial off-the-shelf devices. The re-
sults of the attacks are presented in this paper. We also
suggest different ways of mitigating the vulnerabilities
that we found.
2 Background
2.1 TPM Technology
A trusted computing base (TCB) [37] is a collection of
software and hardware on a host platform that enforces a
security policy. The TPM helps to ensure that the TCB is
properly instantiated and trustworthy. A measured boot
is a method of booting in which each component in the
boot sequence measures the next component before pass-
ing control to it. In this way, a trust chain is created. The
TPM provides a means of measurement and a means of
accumulating these measurements. PCRs are the mem-
ory areas where the measurements can be stored. When
a measurement is “extended” to a PCR, the measurement
is hashed together with the current value of the PCR, and
the hashed result replaces the current value. As long as
the values are updated in this way, it is easy to ﬁnd an
alteration in the middle of the chain. A particular value
of a PCR can be reproduced only when the same val-
ues are extended in the same order. The trustworthiness
of the platform can be determined by investigating the
values stored in PCRs. It is also possible to request the
PCR values remotely. Remote attestation is a challenge-
response protocol that sends PCR values in the form of a
digitally signed quote to a remote attestor.
1The commit hash is 521c58e51eb5be105a29983742850e72c44ed80e
The TPM also functions as a secure storage by provid-
1230    27th USENIX Security Symposium
USENIX Association
PCR
Index
PCR Usage
(1) Request 
      to save state 
OS 
0
1
2
3
4
5
6
7
8-15
16
17-22
23
S-CRTM, BIOS, host platform extensions, and
embedded option ROMs
Host platform conﬁguration
BIOS: Option ROM code
UEFI: UEFI driver and application code
BIOS: Option ROM conﬁguration and data
UEFI: UEFI driver, application conﬁguration,
and data
BIOS: Initial Program Loader (IPL, e.g.,
bootloader) code and boot attempts
UEFI: UEFI boot manager code (e.g., bootloader)
and boot attempts
BIOS: IPL code conﬁguration and data
UEFI: Boot manager code conﬁguration, data,
and GPT partition table
BIOS: State transitions and wake events
UEFI: Host platform manufacturer speciﬁc
BIOS: Host platform manufacturer speciﬁc
UEFI: Secure boot policy
Deﬁned for use by the OS with SRTM
Debug
Deﬁned for use by the DRTM and OS with
DRTM
Application support
Table 1: Summary of PCR usage (TPM 1.2 and 2.0)
ing “sealing” and “binding” operations that limit access
to the storage based on a speciﬁc platform state. For ex-
ample, a TPM’s “sealed” data can be decrypted by the
TPM only when the PCR values match speciﬁed values.
“Unbinding” data is done by a TPM using the private key
part of the public key used to encrypt the data. Binding
can be done by anyone using the public key of a TPM,
but unbinding is done by the TPM only because the pri-
vate key part is securely stored inside TPM and is even
locked to speciﬁc PCR values.
A chain of trust is an ordered set of elements in which
one element is trusted by its predecessor. The trustwor-
thiness of the whole chain depends on the ﬁrst element.
An RTM is the trust anchor of a measurement chain. A
TPM is designed to report the platform state securely, but
it cannot initiate the measurements by itself. Initiating
the measurement is done by another software component
that can be trusted called the core RTM (CRTM). Fig-
ure 1 shows two different types of RTM: SRTM [32, 39]
and DRTM [33].
In addition, Table 1 shows the PCR
usage for SRTM and DRTM.
SRTM is the trust anchor that is initialized by static
CRTM (S-CRTM) when the host platform starts at
power-on or restarts. Often, SRTM is an immutable
software program that is stored in ROM or a protected
hardware component.
In contrast, DRTM launches a
(2) Request to  
      enter sleep 
(6) Resume OS 
TPM 
ACPI 
(5) Request 
      to restore state 
(BIOS/UEFI) 
(3) Sleep 
(4) Wake up 
Sleep 
(S3, S4) 
Figure 2: ACPI sleep process with TPM
measured environment at runtime without platform re-
set. When the dynamic chain of trust starts with a dy-
namic launch event (DL Event), the DRTM conﬁgura-
tion environment (DCE) preamble performs the initial
conﬁguration and prepares the DRTM process [33, 43].
As the DRTM process starts, the special code module
(the DCE), is executed as a dynamic CRTM (D-CRTM),
validates whether the platform is trustworthy, and trans-
fers the control to the initial part of the operating system,
called the dynamically launched measured environment
(DLME).
A chain of trust can be expanded to user-level appli-
cations beyond the operating system kernel.
Integrity
Measurement Architecture (IMA) [26] measures appli-
cations before executing them. IMA is included in the
kernel, and therefore its authenticity can be guaranteed
by the trust chain.
2.2 ACPI Sleeping States
[42]
ACPI
is an open standard for architecture-
independent power management. It was released in 1996
after being co-developed by Intel, Hewlett-Packard (HP),
and other companies.
The ACPI speciﬁcation deﬁnes power states and the
hardware register sets that represent the power states.
There are four global power states, deﬁned as working
(G0 or S0), sleeping (G1), soft-off (G2), and mechanical-
off (G3). The sleeping state is divided into four sleeping
states:
• S1: Power on Suspend. The CPU stops execut-
ing instructions, but all devices including CPU and
RAM are still powered.
• S2: The same as S1 except the CPU is powered off.
USENIX Association
27th USENIX Security Symposium    1231
• S3: Sleep (Suspend to RAM). All devices are
powered-off except for RAM.
• S4: Hibernation (Suspend to Disk). The platform
context in the main memory is saved to disk. All
devices are powered off.
Like other devices, a TPM chip is powered off in states
S3 or S4. The TCG speciﬁcations [32, 39] deﬁne how
the state is maintained while the power state changes.
They also deﬁne the roles of the operating system and
BIOS/UEFI ﬁrmware. The steps deﬁned for saving and
restoring the TPM state are summarized in Figure 2. Be-
fore sleep, the operating system requests the TPM chip
to save the state, and then makes a transition to sleeping
states by sending a request to the ACPI in the BIOS/UEFI
ﬁrmware. All hardware devices are either powered off
(in S4) or only the main memory remains powered (in
S3). When the platform exits from the sleeping states,
the BIOS/UEFI ﬁrmware requests the TPM to restore the
state and then it starts the operating system.
The TCG speciﬁcation describes the role of power
management over
the operating system and the
BIOS/UEFI ﬁrmware. Power management will be ef-
ﬁcient and work as long as the operating system and
ﬁrmware cooperate well. For the S3 sleep function to
work properly, each part must function perfectly with-
out error; however, this state may collapse when one part
malfunctions, which is hard to correct using the other
parts. Moreover, the power management of a TPM chip
needs to be carefully considered when it is partly han-
dled by an operating system that could be compromised
by rootkits [29]. In Section 4, we demonstrate how in-
complete power management control breaks the chain of
trust.
3 Assumptions and Threat Model
3.1 Assumptions
First, we assume that our system measures the ﬁrmware
and bootloader using TCG’s SRTM [32, 39]. Many com-
modity laptops, PCs, and servers come with TPM sup-
port. When their TPM support option is enabled in the
BIOS/UEFI menu, the BIOS/UEFI ﬁrmware starts the
“trusted boot” [25] process, which means that it mea-
sures the ﬁrmware itself and the bootloader and stores
the measurements in the TPM chip.
Second, we assume that our system employs TCG’s
DRTM architecture [43]. When a DRTM chain starts at
runtime, the DRTM itself, kernel ﬁle, and initial RAM