title:SMACS: Smart Contract Access Control Service
author:Bowen Liu and
Siwei Sun and
Pawel Szalachowski
2020 50th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
SMACS: Smart Contract Access Control Service
Bowen Liu∗, Siwei Sun†, Pawel Szalachowski∗
∗Singapore University of Technology and Design, Singapore
†State Key Laboratory of Information Security, Institute of Information Engineering,
Chinese Academy of Sciences, Beijing 100093, China
Abstract—Although blockchain-based smart contracts promise
a “trustless” way of enforcing agreements even with monetary
consequences, they suffer from multiple security issues. Many of
these issues could be mitigated via an effective access control sys-
tem, however, its realization is challenging due to the properties of
current blockchain platforms (like lack of privacy, costly on-chain
resources, or latency). To address this problem, we propose the
SMACS framework, where updatable and sophisticated Access
Control Rules (ACRs) for smart contracts can be realized with
low cost. SMACS shifts the burden of expensive ACRs validation
and management operations to an off-chain infrastructure, while
implementing on-chain only lightweight token-based access con-
trol. SMACS is ﬂexible and in addition to simple access control
lists can easily implement rules enhancing the runtime security of
smart contracts. With dedicated ACRs backed by vulnerability-
detection tools, SMACS can protect vulnerable contracts after
deployment. We fully implement SMACS and evaluate it.
Keywords-Blockchain; Smart Contract; Access
Ethereum; Runtime veriﬁcation
control;
I. INTRODUCTION
Blockchain-based platforms like Ethereum [1] have made
the concept of self-enforcing smart contract [2] into reality.
A smart contract is a special computer program that executes
on the global virtual machine running upon the distributed
and decentralized ledger. By running a consensus protocol and
following the replicated state machine model a uniﬁed view
of the system state over all network participants is imposed.
Like all computer programs, it is likely that most non-trivial
smart contracts will contain errors [3], [4], [5]. These smart
contract related errors should be addressed even more seri-
ously than ordinary program bugs. Firstly, smart contracts are
often deployed over transparent and permissionless blockchain
platforms, thus anyone can inspect and interact with them.
Secondly, due to its immutability, it is hard to upgrade or
simply "kill" an already-deployed smart contract when attacks
are discovered as the contract could have become an important
part of the ecosystem (i.e., other contracts hardcode its ad-
dress). Finally, smart contracts determine how units of value
convertible to real money move, making them a high-value
target with intrinsic economic incentives. In the past few years,
several hundreds of millions worth of USD were stolen or
frozen due to ﬂawed smart contracts [6], [7]. For instance, the
infamous attack on the TheDAO [5] smart contract resulted
in over 50 million US Dollars worth of Ether were drained at
the time the attack occurred. Given the severity of the attack,
the Ethereum community ﬁnally agreed on hard-forking.
As a consequence, the community has made a great effort on
developing methodologies and tools to ensure the security of
smart contracts. One line of research focuses on the security
analysis of smart contracts by verifying their code [8], [9],
[10], [11]. However, most of these approaches are unable to
protect deployed smart contracts. Another approach is to inte-
grate runtime defensive mechanisms into the deployed smart
contracts and their runtime environment. With this approach,
security-risky interactions with a vulnerable smart contract can
be detected and mitigated “on-the-ﬂy” in runtime [12], [13].
These mechanisms usually require integration with the exe-
cution environment (i.e., with the virtual machine deployed)
to be useful
in production, but unfortunately that hinders
their adoption. Ideally, a defensive mechanism with arbitrary
complexity would be put into a smart contract itself, but in
practice it is infeasible since on-chain resources are expensive.
Moreover, such a mechanism would be difﬁcult to manage and
update, ACRs would be publicly visible, and available smart
contract languages with virtual machines associated would
limit its capabilities. For example, it would be very costly
and inconvenient to enhance the security of smart contracts
by encoding ﬁne-grained ACRs into them, which is a fairly
mature and traditional approach for centralized systems.
In this work, we propose the SMACS framework, a cost-
effective access control service that is not simply a token-based
authentication system but aims to enhance the runtime security
of smart contracts. In SMACS, a smart contract only needs
to perform lightweight token veriﬁcations, which introduces
a clear on/off-chain sides separation with minimized on-chain
trusted computing base. The on-chain storage and computation
requirement are minimized by various techniques and by
shifting the burden of access control and ACR management
to an off-chain service. SMACS framework not only supports
ﬁne-grained and updatable ACRs, but also is easily extensible
by integrating recently developed smart contract vulnerability
detection tools and security enhancement mechanisms [14],
[12]. The combination of SMACS with runtime veriﬁcation
tools is powerful as it provides the beneﬁts of these tools
immediately without requiring updating virtual machines by
all blockchain participants. SMACS is deployable as today,
does not require any blockchain platform changes, and by
moving security rules off-chain preserves their privacy.
II. BACKGROUND AND MOTIVATION
A. Blockchain and Smart Contracts
In the last
the blockchain technology initi-
ated by the Bitcoin [15] cryptocurrency has fueled great
ten years,
978-1-7281-5809-9/20/$31.00 ©2020 IEEE
DOI 10.1109/DSN48063.2020.00039
221
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:34:17 UTC from IEEE Xplore.  Restrictions apply. 
it
is not
innovations. Relying on the consensus protocol behind Bit-
coin,
long before Ethereum [1] was built – a
general-purpose blockchain system well-beyond cryptocurren-
cies which can execute programs on blockchain. Similarly to
Bitcoin, Ethereum introduces its native cryptocurrency – ether,
which is also used to incentivize system participants.
Ethereum can be regarded as a decentralized and replicated
state machine whose state is maintained as a proof-of-work
blockchain. The state transition of Ethereum is processed
by the so-called Ethereum Virtual Machine (EVM) executing
programs called smart contracts written in a Turing-complete
language. Due to the Turing completeness, one can implement
self-enforcing smart contracts with nearly arbitrary logic. As
a result, we have witnessed a wide range of applications of
smart contracts in different domains [14], [16].
Smart contracts inherit some essential properties from its
underlying blockchain. Once a smart contract
is deployed
on the Ethereum platform, its code is immutable and visible
by every node in the Ethereum network, and all transactions
calling it are also transparent to all. Therefore, it is the duty
of the contract developer to implement proper access control
or defensive mechanisms prior to deployment, and failed to
do so can lead to tremendous and irreversible ﬁnancial losses.
B. EVM and Solidity
EVM executes smart contracts as a Turing complete stack-
based language at low level called Ethereum bytecode. In
practice, smart contracts are typically developed in high-level
languages such as Solidity, Vyper, Serpent, etc., and are
compiled into bytecode by the corresponding compilers.1 In
this work we focus on Solidity as it is the most popular and
developed language of Ethereum. There are three memory
regions of a smart contract program: stack, memory, and
storage. The stack and memory are volatile and cheap to
use. The storage is maintained on blockchain and is the only
persistent memory region across transactions.
The execution logic of a smart contract is modularized into
methods which are the executable code segments within a
contract [21]. Method calls can happen internally or externally
and have different levels of visibility towards other contracts.
There are four types of visibilities for methods in Solidity:
• external methods are part of the contract interface, which
means they can be called from other contracts and via trans-
actions. An external methods cannot be called internally,
• public methods are part of the contract interface and can be
either called internally or via messages (see the next section),
• internal methods can only be accessed internally (i.e., from
within the current contract or contracts deriving from it),
• private methods are only visible for the contract they are
deﬁned in and not in derived contracts.
All computational or memory utilization in Ethereum is
charged in gas, which can be regarded as a separate virtual
1Note that even a smart contract is semantically bug-free with respect to
the underlying high-level language, compilers may introduce language-speciﬁc
vulnerabilities into the system [6], [17], [18], [19], [20], which once again
highlight the importance of runtime security analysis.
currency with its own exchange rate against ether [22]. The
gas system is essential to incentivize system participants and
prevent denial-of-service attacks or inadvertently resource-
devouring transactions. Performing computation or storing
data objects of large size (e.g., access rules) can be gas-
expensive. In fact, according to our experiment, creating even a
simple whitelist with 10k addresses would cost around $300.
Also managing such a list would have a linear cost in the
number of update operations.
C. Transactions and Message calls
In Ethereum, every state change of the global singleton
state machine is ultimately due to a transaction, a signed
data package originated from an externally owned account.
Transactions are recorded on the blockchain and can move
value from one account to another or/and trigger smart contract
execution. User accounts and smart contract
instances are
uniformly identiﬁed by unique addresses.
Contracts can call other contracts or send ether to non-
contract accounts by message calls, the virtual objects that
are never serialized and exist only in the Ethereum execution
environment. Every transaction consists of a top-level message
call which in turn can create further message calls. It implies
that from a simple transaction initiated by an externally owned
account, a call chain of contract executions can be triggered.
Solidity allows smart contracts to access some global objects
and properties of the blockchain [23]. In the context of this
work the following objects are relevant:
• tx.origin - the sender of the transaction for full call chain
(a list of all called methods that a given transaction triggers),
• msg.sender - the sender of the message for the current
call. Let us consider a call chain triggered by a transaction
T originated from the externally owned account u, where T
calls the contract A, and A calls another contract B. Then from
B’s perspective the value of msg.sender is the address of
A while tx.origin is the address of u,
• msg.sig -
(encoded as the ﬁrst
four bytes of
identiﬁers of
each method for every smart contract. When A calls
B.funcB(argA,argB), the value of msg.sig seen by B
would be the identiﬁer of funcB(),
• msg.data - the complete calldata (the method identiﬁer and
passed arguments). The value of msg.data for the case
above is msg.sig appended with the encoded values of
argA and argB.
calldata). Ethereum tags
the method identiﬁer
Transactions are signed by their originators and before
processing them in EVM their authenticity is validated by the
Ethereum network. To prevent replay attacks each transaction
has a nonce which also is validated by participants. However,
nonces cannot be accessed by Solidity contracts.
D. Access Control in Smart Contracts
Access control is a security technique that regulates who
has access to certain system resources. The intention of access
control in Ethereum smart contracts is to restrict the access to
contract functionalities according to suitable criteria. In § II-B,
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:34:17 UTC from IEEE Xplore.  Restrictions apply. 
222
the programming language of smart contracts already has
some features to facilitate a minimum level of access control.
However,
these features are limited, only deﬁning access
control rules for built-in methods.
In general, implementing access control for smart contracts
based on a permissionless blockchain is difﬁcult. A naive
approach of putting all access control
logic into a smart
contract would violate privacy and consume a lot of expensive
on-chain resources. On the other hand, due to the immutability
nature of the underlying blockchain, it is difﬁcult to update the
ACRs if they are managed over blockchain. To the best of our
knowledge, there is no generic framework in the literature real-
izing efﬁcient and ﬂexible access control for smart contracts.
However, such a framework could be highly beneﬁcial for
the security of smart contracts and the ecosystem. Currently,
many token sales allow only approved users to participate in
a token sale or trade. To achieve on-chain access control, the
owner of the token sale contract maintains a whitelist listing
addresses of authorized users. When a user tries to access the
contract, there is an access control check verifying whether
the user is whitelisted. For example, the Bluzelle decentralized
database has paid 9.345 ETH (11,949 USD at the time) just
to whitelist 7473 users for their token sale [24]. Similarly,
OpenZeppelin [25] provides templates like role-based access
control or “proxy contracts”. Unfortunately, these solutions are
intended for on-chain contract management, do not allow for
ﬂexible changes at runtime, and still have all other limitations
of on-chain access control.
To further illustrate the motivations behind our system, we
give several other examples with brief comments.
Example 1. A service provider may want to create a smart
contract whose methods can be called only by a dynamic set
of addresses (e.g., employees or business partners).
Example 2. The owner of a contract may want her smart
contract to block the access from a predeﬁned set of addresses.
Example 1 and Example 2 show the needs of implementing
very basic and common ACRs such as whitelist and blacklist.
Note that the involved lists should be updatable dynamically,
and the method for deﬁning the lists should be ﬂexible enough.
Implementing even such a basic access control on-chain in
smart contracts would be highly expensive if a black/whitelist
is long and/or updated frequently. Moreover, managing such
an access control
list would be impractical as executing
blockchain transactions is signiﬁcantly delayed (minutes to
hours [26]). The list maintained on-chain would be also visible
to anyone which in most cases is undesired.
Example 3. The owner of a contract may require that only
authorized parties can call a speciﬁc method. She may demand
more ﬁne-tuned controls: only authorized parties can call the
method with speciﬁc arguments.
This kind of selective restrictions may be useful in almost
any smart contract application, e.g., to determine who can
move the money, who can stop a service, etc. The latter rule
hints at an even more exciting application of access control:
the owner can specify that an address can call a method in
a smart contract only when the payload will not trigger any
known security problems. By extending this kind of rules, we
may prevent attacks on vulnerable contracts even after their
deployment – see the next example.
Example 4. The owner of a contract may require that a
given call can be executed only when it is validated by some
sophisticated runtime veriﬁcation tool(s).
In contrast to the previous examples, such a rule would
allow the owner to inspect a given call in detail and limit
access in the case of any issue detected. In such a way the
owner could beneﬁt from runtime veriﬁcation tools running
them off-chain, without integrating them in the smart contract
environment. The owner may also want to ensure a given call
can be executed only once, unless a new permission is granted.
III. SMACS OVERVIEW
Throughout the paper, we describe SMACS in the context
of Ethereum and Solidity, but it can be easily extended to other
platforms and languages with similar capabilities.
A. System Participants
SMACS involves four types of actors:
• SMACS-enabled Smart Contracts are contracts on
blockchain protected by SMACS. A SMACS-enabled smart
contract veriﬁes incoming calls by validating their correspond-
ing tokens. Any transaction or a message call will be rejected if
a valid token is not presented. For simple description, we often
refer to SMACS-enabled smart contracts as “smart contracts”
or just “contracts” and from the context it will be clear when
we distinguish them from legacy smart contracts.
• Owner is the creator of a smart contract. Normally, there
could be several smart contracts under the control of a single
owner. An owner is responsible for deﬁning and managing the
ACRs. Also, an owner needs to manage a Token Service (TS)
instance corresponding to a SMACS-enabled smart contract.
• Token Service (TS) is a service that is responsible for
verifying requests from clients and issuing access control
tokens accordingly. A token issued by a TS determines exact