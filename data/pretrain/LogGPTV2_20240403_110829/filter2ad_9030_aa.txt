**作者：spoock**  
**来源：**
## 源代码调试
ss是位于iproute2这个库中，可以从[iproute2](https://github.com/CumulusNetworks/iproute2)上面下载到源代码，配置其源代码调试的方式和[netstat源代码调试](https://blog.spoock.com/2019/05/26/netstat-learn/)这篇文章一样. 在根目录下创建CMakeLists.txt文件，内容如下：
    cmake_minimum_required(VERSION 3.13)
    project(test C)
    set(BUILD_DIR .)
    #add_executable()
    add_custom_target(ss command -c ${BUILD_DIR})
同时修改Makefile文件中的45行的 **CCOPTS = -O2** 为 **CCOPTS = -O0 -g3** 在clion中配置Target:
[
如此整个调试环境搭建完毕．
## 初步分析
在什么参数也没有的情况下，运行程序得到的结果如下:
    Netid  State      Recv-Q Send-Q Local Address:Port             Peer Address:Port
    tcp    ESTAB      0      0      127.0.0.1:57354                127.0.0.1:socks               
    tcp    ESTAB      0      0      127.0.0.1:37350                127.0.0.1:socks               
    tcp    ESTAB      0      0      172.16.40.154:43450                45.8.223.61:17250               
    tcp    CLOSE-WAIT 1      0      127.0.0.1:57398                127.0.0.1:socks               
    tcp    ESTAB      0      0      127.0.0.1:57062                127.0.0.1:socks
和直接运行ss命令得到的结果一样．接下来就是分析整个ss程序的执行流程
## main
main函数就是用于对各种选项进行解析，并以此判断执行什么函数．
    int main(int argc, char *argv[])
    {
        int saw_states = 0;
        int saw_query = 0;
        int do_summary = 0;
        const char *dump_tcpdiag = NULL;
        FILE *filter_fp = NULL;
        int ch;
        int state_filter = 0;
        int addrp_width, screen_width = 80;
        while ((ch = getopt_long(argc, argv,
                     "dhaletuwxnro460spbEf:miA:D:F:vVzZN:KHS",
                     long_opts, NULL)) != EOF) {
            switch (ch) {
            case 'n':
                resolve_services = 0;
                break;
            ......
            }
            .....
        }
在默认情况下，会进入到如下代码中
    if (do_default) {
        state_filter = state_filter ? state_filter : SS_CONN;
        filter_default_dbs(＆current_filter);
    }
程序会执行filter_default_dbs()函数，设置默认的过滤条件．
### filter_default_dbs
    static void filter_default_dbs(struct filter *f) {
        filter_db_set(f, UDP_DB);
        filter_db_set(f, DCCP_DB);
        filter_db_set(f, TCP_DB);
        filter_db_set(f, RAW_DB);
        filter_db_set(f, UNIX_ST_DB);
        filter_db_set(f, UNIX_DG_DB);
        filter_db_set(f, UNIX_SQ_DB);
        filter_db_set(f, PACKET_R_DB);
        filter_db_set(f, PACKET_DG_DB);
        filter_db_set(f, NETLINK_DB);
        filter_db_set(f, SCTP_DB);
    }
filter_default_dbs很简单就是在默认情况下设置的过滤条件．
之后程序会执行到unix_show(&current_filter);
## unix_show
函数代码如下:
    static void filter_default_dbs(struct filter *f) {
        filter_db_set(f, UDP_DB);
        filter_db_set(f, DCCP_DB);
        filter_db_set(f, TCP_DB);
        filter_db_set(f, RAW_DB);
        filter_db_set(f, UNIX_ST_DB);
        filter_db_set(f, UNIX_DG_DB);
        filter_db_set(f, UNIX_SQ_DB);
        filter_db_set(f, PACKET_R_DB);
        filter_db_set(f, PACKET_DG_DB);
        filter_db_set(f, NETLINK_DB);
        filter_db_set(f, SCTP_DB);
    }
    filter_default_dbs很简单就是在默认情况下设置的过滤条件．
    之后程序会执行到unix_show(&current_filter);
    unix_show
    函数代码如下:
    unix_show  Collapse source
    static int unix_show(struct filter *f)
    {
        FILE *fp;
        char buf[256];
        char name[128];
        int  newformat = 0;
        int  cnt;
        struct sockstat *list = NULL;
        const int unix_state_map[] = { SS_CLOSE, SS_SYN_SENT,
                           SS_ESTABLISHED, SS_CLOSING };
        if (!filter_af_get(f, AF_UNIX))
            return 0;
        if (!getenv("PROC_NET_UNIX") && !getenv("PROC_ROOT")
            && unix_show_netlink(f) == 0)
            return 0;
        if ((fp = net_unix_open()) == NULL)
            return -1;
        if (!fgets(buf, sizeof(buf), fp)) {
            fclose(fp);
            return -1;
        }
        if (memcmp(buf, "Peer", 4) == 0)
            newformat = 1;
        cnt = 0;
        while (fgets(buf, sizeof(buf), fp)) {
            struct sockstat *u, **insp;
            int flags;
            if (!(u = calloc(1, sizeof(*u))))
                break;
            if (sscanf(buf, "%x: %x %x %x %x %x %d %s",
                   &u->rport, &u->rq, &u->wq, &flags, &u->type,
                   &u->state, &u->ino, name) lport = u->ino;
            u->local.family = u->remote.family = AF_UNIX;
            if (flags & (1 state = SS_LISTEN;
            } else if (u->state > 0 &&
                   u->state state = unix_state_map[u->state-1];
                if (u->type == SOCK_DGRAM && u->state == SS_CLOSE && u->rport)
                    u->state = SS_ESTABLISHED;
            }
            if (unix_type_skip(u, f) ||
                !(f->states & (1 state))) {
                free(u);
                continue;
            }
            if (!newformat) {
                u->rport = 0;
                u->rq = 0;
                u->wq = 0;
            }
            if (name[0]) {
                u->name = strdup(name);
                if (!u->name) {
                    free(u);
                    break;
                }
            }
            if (u->rport) {
                struct sockstat *p;
                for (p = list; p; p = p->next) {
                    if (u->rport == p->lport)
                        break;
                }
                if (!p)
                    u->peer_name = "?";
                else
                    u->peer_name = p->name ? : "*";
            }
            if (f->f) {
                struct sockstat st = {
                    .local.family = AF_UNIX,
                    .remote.family = AF_UNIX,
                };
                memcpy(st.local.data, &u->name, sizeof(u->name));
                if (strcmp(u->peer_name, "*"))
                    memcpy(st.remote.data, &u->peer_name,
                           sizeof(u->peer_name));
                if (run_ssfilter(f->f, &st) == 0) {
                    free(u->name);
                    free(u);
                    continue;
                }
            }
            insp = &list;
            while (*insp) {
                if (u->type type ||
                    (u->type == (*insp)->type &&
                     u->ino ino))
                    break;
                insp = &(*insp)->next;
            }
            u->next = *insp;
            *insp = u;
            if (++cnt > MAX_UNIX_REMEMBER) {
                while (list) {
                    unix_stats_print(list, f);
                    printf("\n");
                    unix_list_drop_first(&list);
                }
                cnt = 0;
            }
        }
        fclose(fp);
        while (list) {
            unix_stats_print(list, f);
            printf("\n");
            unix_list_drop_first(&list);
        }
        return 0;
    }
这个函数就是解析网络数据的核心函数．代码较多，还是分布分析这些代码．
### unix_show_netlink
    if (!getenv("PROC_NET_UNIX") && !getenv("PROC_ROOT")
           && unix_show_netlink(f) == 0)
           return 0;
  * getenv判断PROC_NET_UNIX和PROC_ROOT是否存在
  * unix_show_netlink(f) 创建netlink
追踪进入到unix_show_netlink()中
    static int unix_show_netlink(struct filter *f)
    {
        DIAG_REQUEST(req, struct unix_diag_req r);
        req.r.sdiag_family = AF_UNIX;
        req.r.udiag_states = f->states;
        req.r.udiag_show = UDIAG_SHOW_NAME | UDIAG_SHOW_PEER | UDIAG_SHOW_RQLEN;
        if (show_mem)
            req.r.udiag_show |= UDIAG_SHOW_MEMINFO;
        return handle_netlink_request(f, &req.nlh, sizeof(req), unix_show_sock);
    }
f是一个filter，用于设置一些简单的过滤条件．
    req.r.sdiag_family = AF_UNIX;
    req.r.udiag_states = f->states;
    req.r.udiag_show = UDIAG_SHOW_NAME | UDIAG_SHOW_PEER | UDIAG_SHOW_RQLEN;
是用于设置diag_net的netlink的请求头，之后调用handle_netlink_request(f, &req.nlh, sizeof(req),
unix_show_sock);
### handle_netlink_request
跟踪进入到handle_netlink_request的实现
    static int handle_netlink_request(struct filter *f, struct nlmsghdr *req,
            size_t size, rtnl_filter_t show_one_sock)
    {
        int ret = -1;
        struct rtnl_handle rth;
        if (rtnl_open_byproto(&rth, 0, NETLINK_SOCK_DIAG))
            return -1;
        rth.dump = MAGIC_SEQ;
        if (rtnl_send(&rth, req, size) fd, buf, len, 0);
    }
rtnl_send直接调用send()方法发送信息．
#### rtnl_dump_filter
跟踪进入到lib/libnetlink.c
    int rtnl_dump_filter_nc(struct rtnl_handle *rth,
                 rtnl_filter_t filter,
                 void *arg1, __u16 nc_flags)
    {
        const struct rtnl_dump_filter_arg a[2] = {
            { .filter = filter, .arg1 = arg1, .nc_flags = nc_flags, },
            { .filter = NULL,   .arg1 = NULL, .nc_flags = 0, },
        };
        return rtnl_dump_filter_l(rth, a);
    }
在rtnl_dump_filter_nc()中设置rtnl_dump_filter_arg过滤函数，之后调用rtnl_dump_filter_l()
    int rtnl_dump_filter_l(struct rtnl_handle *rth,
                   const struct rtnl_dump_filter_arg *arg)
    {
        struct sockaddr_nl nladdr;
        struct iovec iov;
        struct msghdr msg = {
            .msg_name = &nladdr,
            .msg_namelen = sizeof(nladdr),
            .msg_iov = &iov,
            .msg_iovlen = 1,
        };
        char buf[32768];
        int dump_intr = 0;
        iov.iov_base = buf;
        while (1) {
            int status;
            const struct rtnl_dump_filter_arg *a;
            int found_done = 0;
            int msglen = 0;
            iov.iov_len = sizeof(buf);
            status = recvmsg(rth->fd, &msg, 0);
            if (status dump_fp)
                fwrite(buf, 1, NLMSG_ALIGN(status), rth->dump_fp);
            for (a = arg; a->filter; a++) {
                struct nlmsghdr *h = (struct nlmsghdr *)buf;
                msglen = status;
                while (NLMSG_OK(h, msglen)) {
                    int err = 0;
                    h->nlmsg_flags &= ~a->nc_flags;
                    if (nladdr.nl_pid != 0 ||
                        h->nlmsg_pid != rth->local.nl_pid ||
                        h->nlmsg_seq != rth->dump)
                        goto skip_it;
                    if (h->nlmsg_flags & NLM_F_DUMP_INTR)
                        dump_intr = 1;
                    if (h->nlmsg_type == NLMSG_DONE) {
                        err = rtnl_dump_done(h);
                        if (err nlmsg_type == NLMSG_ERROR) {
                        rtnl_dump_error(rth, h);
                        return -1;
                    }
                    if (!rth->dump_fp) {
                        err = a->filter(&nladdr, h, a->arg1);
                        if (err fd, &msg, 0);
过滤数据:
    for (a = arg; a->filter; a++) {
        struct nlmsghdr *h = (struct nlmsghdr *)buf;
        .....