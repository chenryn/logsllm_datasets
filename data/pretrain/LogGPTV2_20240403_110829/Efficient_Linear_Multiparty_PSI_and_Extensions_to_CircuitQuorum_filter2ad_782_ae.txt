(3) Invoking the F 𝜎
wPSM
B2A
EQ
𝑖 , resp., and receive the additive shares ⟨𝑓𝑖 𝑗⟩1 and ⟨𝑓𝑖 𝑗⟩𝑖 resp., as outputs.
𝑃1 and 𝑃𝑖 send their inputs ⟨𝑒𝑞𝑖 𝑗⟩𝐵
(4) Invoking the F F𝑝
1 and ⟨𝑒𝑞𝑖 𝑗⟩𝐵
(5) Converting to (𝑛, 𝑡) shares: For each 𝑗 ∈ [𝛽],
• 𝑃1 computes ⟨𝑎 𝑗⟩1 =𝑛
𝑖=2⟨𝑓𝑖 𝑗⟩1 and for each 𝑖 ∈ {2, · · · , 𝑛}, 𝑃𝑖 sets ⟨𝑎 𝑗⟩𝑖 = ⟨𝑓𝑖 𝑗⟩𝑖.
𝑗
• 𝑃1, · · · , 𝑃𝑛 compute [𝑎 𝑗] ← ConvertShares𝑛,𝑡 (⟨𝑎 𝑗⟩).
(6) Computing shares of intersection: For each 𝑗 ∈ [𝛽],
• Compute [𝑣 (0)
] = [𝑎 𝑗] − 𝑛 + 1.
• For each 𝑖 ∈ [𝑑], compute [𝑣 (𝑖)
• Let [𝑞(0)
• For 𝑖 ∈ [𝑘], compute [𝑞(𝑖)
• Compute [𝑐 𝑗] = 1 − [𝑞(𝑘)
• 𝑃1 inputs {[𝑐 𝑗]1} 𝑗 ∈[𝛽] and Table1. For 𝑖 ∈ {2, · · · , 𝑛}, 𝑃𝑖 inputs {[𝑐 𝑗]𝑖} 𝑗 ∈[𝛽].
• All parties receive the output 𝑇 .
] ← MultF𝑛,𝑡 ([𝑞(𝑖−1)
].
] ← MultF𝑛,𝑡 ([𝑣 (𝑖−1)
] = [𝑣 (ind0)
], [𝑣 (ind𝑖)
], [𝑣 (𝑖−1)
]).
]).
].
𝑗
𝑗
𝑗
𝑗
𝑗
𝑗
𝑗
𝑗
𝑗
(7) Computing the circuit 𝐶𝛽,𝜎,𝑝: The parties invoke the FMPC functionality parameterized 𝐶𝛽,𝜎,𝑝 by as follows:
Figure 6: CIRCUIT PSI PROTOCOL
(Sec. 2.3.1), boolean to arithmetic share conversion F F𝑝
B2A
2.3.2), and the 𝑛-party functionalities from Section 2.5.
(Section
We consider standard multiparty functionality FMPC that is pa-
rameterized by a circuit 𝐶. The circuit 𝐶 takes as inputs 𝐼𝑖 from
each 𝑃𝑖, for 𝑖 ∈ [𝑛] and the functionality computes the circuit 𝐶
on these inputs and returns 𝐶(𝐼1, · · · , 𝐼𝑛). In our construction, to
evaluate a symmetric function 𝑓 , we consider the circuit 𝐶𝛽,𝜎,𝑝,
which takes as inputs {[𝑐 𝑗]𝑖} 𝑗 ∈[𝛽] from 𝑃𝑖 for each 𝑖 ∈ [𝑛] such
that 𝑐 𝑗 ∈ F𝑝 and 𝑎1, . . . , 𝑎𝛽 ∈ {0, 1}𝜎 from 𝑃1, computes {𝑐 𝑗} 𝑗 ∈[𝛽]
by reconstructing the shares, and computes 𝑇 = 𝑓
.
𝑎 𝑗
We set things up such that 𝑐 𝑗 = 1, if 𝑎 𝑗 ∈ ∩𝑛
𝑖=1𝑋𝑖; else 𝑐 𝑗 = 0. Next,
give an overview and describe the protocol formally in Figure 6.
Protocol Overview. On input 𝑋𝑖 from party 𝑃𝑖, for each 𝑖 ∈ [𝑛],
the protocol proceeds in seven steps: The first two steps of the
protocol, namely the Hashing and Invoking the F 𝛽,𝜎,𝑁
wPSM functionality,
are same as Steps 2 and 3 of our mPSI protocol (Figure 4). At the
end of these steps, 𝑃1 holds Table1 of 𝛽 bins containing one element
(cid:32) 
𝑗 ∈[𝛽]:𝑐 𝑗 =1
(cid:33)
each and other parties 𝑃𝑖’s hold Table𝑖 with 𝛽 bins of arbitrary size.
Moreover, for each 𝑖 ∈ {2, . . . , 𝑛} and 𝑗 ∈ [𝛽], 𝑃1 holds 𝑦𝑖 𝑗 ∈ {0, 1}𝜎
and 𝑃𝑖 holds 𝑤𝑖 𝑗 ∈ {0, 1}𝜎 such that 𝑦𝑖 𝑗 = 𝑤𝑖 𝑗 iff Table1[ 𝑗] ∈
Table𝑖[ 𝑗] (except with negligible probability). Now, in the next step,
the parties check whether this equality holds or not. Formally, in
Step 3, for each 𝑖 ∈ {2, · · · , 𝑛}, parties 𝑃1 and 𝑃𝑖 invoke the F 𝜎
EQ
functionality with inputs 𝑦𝑖 𝑗 and 𝑤𝑖 𝑗, respectively and receive as
outputs, the boolean shares7.
Rest of the steps are executed for each bin 𝑗 independently. In
Step 4, for each 𝑖 ∈ {2, · · · , 𝑛}, parties 𝑃1 and 𝑃𝑖 invoke the F F𝑝
B2A
functionality to convert the boolean shares to additive shares over
F𝑝, where 𝑝 > 𝑛 is a prime. Next, in Step 5, parties convert these
additive shares between 𝑃1 and 𝑃𝑖 for 𝑖 ∈ [𝑛]\{1} to (𝑛, 𝑡)-shares of
values 𝑎 𝑗 such that 𝑎 𝑗 denotes the number of parties in [𝑛]\{1} that
have the element stored at Table1[ 𝑗]. In Step 6, the task is to securely
compute shares of whether 𝑎 𝑗 = 𝑛 − 1 or not. Let 𝑣 𝑗 = 𝑎 𝑗 − (𝑛 − 1).
7We note that these four steps of our protocol together follow the blueprint of executing
a circuit PSI protocol [16, 26, 45, 64–66] between 𝑃1 and 𝑃𝑖 (for each 𝑖 ∈ {2, · · · , 𝑛}),
while ensuring a consistent mapping of elements of 𝑃1 (via Cuckoo hashing into
Table1) across all instantiations. To explicitly spell out this consistent hashing, we
make a whitebox use of the circuit-PSI blueprint from [65].
Session 4C: Private Set Intersection CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1189𝑗
Now, using property of fields with prime order, 𝑣 𝑗 = 0 (and hence,
𝑎 𝑗 = 𝑛 − 1) if and only if 𝑣𝑝−1
= 0. For this, parties first compute
for 𝑖 ∈ {0} ∪ [𝑑] where 𝑑 = ⌈log 𝑝⌉ − 1 (requiring 𝑑
shares of 𝑣2𝑖
𝑗
calls to MultF𝑛,𝑡) and then multiply shares of appropriate powers
of 𝑣 𝑗 (requiring at most 𝑑 calls to MultF𝑛,𝑡). Then, parties locally
compute shares of 𝑐 𝑗 = 1 − 𝑣𝑝−1
. It holds that 𝑐 𝑗 is 1 if and only if
𝑎 𝑗 = 𝑛 − 1.
Finally, parties invoke FMPC functionality for circuit 𝐶𝛽,𝜎,𝑝 (de-
scribed above) with shares of 𝑐 𝑗 and Table1[ 𝑗], for all 𝑗 ∈ [𝛽].
𝑗
Remark. The well-known/standard definition of circuit-PSI [13,
45, 64–66] outputs shares of 0/1 values (𝑐 𝑗) and these are given
as input to the circuit 𝐶𝛽,𝜎,𝑝. We compute the same in step 6 of
our protocol because it offers the flexibility to compute arbitrary
functions. However, circuits for certain functions might themselves
involve computing equality checks on 𝑐 𝑗’s. For such functions, one
can consider an optimization wherein 𝐶𝛽,𝜎,𝑝 takes shares of 𝑎 𝑗, for
all 𝑗 ∈ [𝛽] (computed in step 5 of the protocol) as input and 𝐶𝛽,𝜎,𝑝
checks if 𝑎 𝑗 = 𝑛 − 1 to determine if the corresponding element is
in the intersection. On the other hand, many functions, such as
cardinality of intersection, can be computed by adding the 𝑐 𝑗 values
and no additional equality checks are needed in 𝐶𝛽,𝜎,𝑝.
4.2 Correctness and Security Proof
Theorem 4.1. The protocol in Figure 6 securely realizes F 𝑛,𝑚,𝑓
C−PSI in
the F -hybrid model, where F = (F 𝛽,𝜎,𝑁
, ConvertShares𝑛,𝑡 , F 𝜎
EQ,
wPSM
F F𝑝
B2A, MultF𝑛,𝑡), against a semi-honest adversary corrupting 𝑡 < 𝑛/2
parties. Our protocol has total communication at most 2𝑚𝑛(𝜆𝜅 +
36(log 𝑛)2)with at most 4⌈log 𝑛⌉ + ⌈log 𝜎⌉ + 6 rounds.

𝑗 ∈[𝛽]:𝑐 𝑗 =1
Table1[ 𝑗] and 𝑌∗ =
Proof. Correctness: Let 𝑌 =
𝑖=1𝑋𝑖. For statistical correctness, we need to show that 𝑇 = 𝑓 (𝑌∗)
∩𝑛
with all but negligible probability in 𝜅. By correctness of the FMPC
(parameterized by the circuit 𝐶𝛽,𝜎,𝑝) functionality, whenever 𝑌 =
𝑌∗ we have 𝑇 = 𝐶(Table1, {𝑐 𝑗} 𝑗 ∈[𝛽]) = 𝑓 (𝑌) = 𝑓 (𝑌∗). So it suffices
to upper bound the probability of 𝑌∗ ≠ 𝑌. For the rest of the proof
we assume that cuckoo hashing by 𝑃1 succeeds which happens with
probability at most 1 − 2−41.
As we will see later, steps 3–6 do not lead to correctness error of
our protocol. We make a few observations about these steps below,
that will be used in both lemmata that follow. For each 𝑗 ∈ [𝛽],
• (Step 3) By correctness of F 𝜎
EQ
• (Step 4) By correctness of F F𝑝
B2A
• (Step 5) By correctness of ConvertShares𝑛,𝑡, 𝑎 𝑗 =
• (Step 6) First, 𝑣 (0)
correctness of MultF𝑛,𝑡 for every 𝑖 ∈ [𝑑], it holds that 𝑣 (𝑖)
(𝑣 𝑗)2𝑖 and 𝑞(𝑘)
Now, using the property of finite fields, we get that 𝑞(𝑘)
𝑖=2
= 𝑎 𝑗 − (𝑛 − 1). Also, let 𝑣 𝑗 = 𝑣 (0)
= 0, and
consequently, 𝑐 𝑗 = 1, if and only if 𝑣 𝑗 = 0. Hence, 𝑐 𝑗 = 1 if and only
if 𝑎 𝑗 = 𝑛 − 1. This in turn implies that 𝑒𝑞𝑖 𝑗 = 1 for all 𝑖 ∈ {2, . . . , 𝑛}.
𝑓𝑖 𝑗 < 𝑛.
. Next, by
𝑗 ≡
, for each 𝑖 ∈ [𝑛] \ {1}, 𝑒𝑞𝑖 𝑗 equals
, for each 𝑖 ∈ [𝑛] \ {1}, 𝑓𝑖 𝑗 = 𝑒𝑞𝑖 𝑗.
1 when 𝑦𝑖 𝑗 = 𝑤𝑖 𝑗 and 0 otherwise.
. Finally, 𝑐 𝑗 = 1 − 𝑞(𝑘)
= 𝑣𝑝−1
𝑗
𝑛
𝑗
𝑗
𝑗
.
𝑗
𝑗
To conclude, we have shown that 𝑐 𝑗 = 1 if and only if 𝑒𝑞𝑖 𝑗 = 1 for
all 𝑖 ∈ {2, . . . , 𝑛}. We now prove the following two lemmata.
Lemma 4.2. 𝑌∗ ⊆ 𝑌 .
Proof. Let 𝑒 = Table1[ 𝑗] ∈ 𝑌∗. Therefore, for each 𝑖 ∈ {2, · · · , 𝑛},
by the definition of simple hashing 𝑒 ∈ Table𝑖[ 𝑗]. Hence by correct-
ness of F 𝛽,𝜎,𝑁
guarantees that 𝑦𝑖 𝑗 = 𝑤𝑖 𝑗 (and hence 𝑒𝑞𝑖 𝑗 = 1) for
each 𝑖 ∈ {2, · · · , 𝑛}. Using what we show above, we get that in this
wPSM
case 𝑐 𝑗 = 1 and hence, 𝑒 ∈ 𝑌.
□
Lemma 4.3. 𝑌 ⊆ 𝑌∗ with probability at least 1 − 2−𝜅−1.
Proof. Suppose 𝑒 = Table1[ 𝑗] ∉ 𝑌∗. Since 𝑒 ∉ 𝑌∗, let 𝑖∗ ∈
{2, · · · , 𝑛} be such that 𝑒 ∉ 𝑋𝑖∗. We now show that 𝑒 ∉ Table𝑖∗[ 𝑗]
with the following disjoint and exhaustive scenarios.
• 𝑒 ∈ 𝑋1: Since 𝑒 ∉ 𝑋𝑖∗ and any dummy elements inserted by 𝑃𝑖∗
are distinct from real elements, it holds that 𝑒 ∉ Table𝑖∗[ 𝑗].
• 𝑒 ∉ 𝑋1: Then, 𝑒 is a dummy element inserted by 𝑃1. Since dummy
elements of 𝑃∗
𝑖 are distinct from dummy elements of 𝑃1, it holds
that 𝑒 ∉ Table𝑖∗[ 𝑗].
Since 𝑒 ∈ 𝑌, it holds that 𝑐 𝑗 = 1 and hence, 𝑒𝑞𝑖∗ 𝑗 = 1, i.e., 𝑦𝑖∗ 𝑗 = 𝑤𝑖∗ 𝑗.
Now, probability that 𝑦𝑖∗ 𝑗 = 𝑤𝑖∗ 𝑗 when 𝑒 ∉ Table𝑖∗ is at most 2−𝜎.
Note that this is the probability that Table1[ 𝑗] ∈ 𝑌\𝑌∗. By union
bound over all bins it holds that with probability at least 1 − 𝛽2−𝜎
the set 𝑌\𝑌∗ is empty.
□
Hence, except with failure probability at most 2−𝜅 (that includes
the probability of cuckoo hashing failure), the output of the protocol