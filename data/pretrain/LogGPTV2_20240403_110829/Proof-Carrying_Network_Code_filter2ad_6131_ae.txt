natures with their credentials, and generates a JSON object match-
ing the schema defined in Figure 6. An example PCNC message that
instantiates this schema with definitions from Section 4, specifically
the reconfiguration scenario embodied in proof term witness1 and
program reconfig, is given in Figure 7. We show some details of the
proof witness and credentials in serialized format to give a flavor
of the syntax, while we elide details of the cryptographic material
and the serialized format of NetKAT programs.
5.2 Server and Configuration Workflow
The PCNC server receives messages and processes them—it verifies
that requests are authorized, that submitted reconfiguration pro-
grams adhere to behavioral policies, and then compiles and deploys
derived tables to network components. The server has the following
components:
i. A parser that converts JSON-formatted PCNC messages to ele-
ments Γ, e, p, and a list of signatures sigs indexed by credential
name.
ii. An authorization check to prove that the request is allowed
given the proof witness e and credentials in Γ.
Figure 8: PCNC server workflow.
tion spec.
iii. A behavioral check to verify p ≼ spec given a policy specifica-
iv. Frenetic compilation of p to Open Flow v1.3 tables.
v. Deployment of tables to network devices.
We describe authorization and behavioral checks in more detail as
follows. Compilation and deployment to OpenFlow tables use ex-
isting Frenetic technology. As discussed in Section 2.3.1, behavioral
verification (item iii) is based on an existing bisimulation algorithm,
but our implementation includes some new optimizations.
5.2.1 Authorization Check. In the authorization check, we first
verify that sigs(cred) is a valid signature for Γ(cred) = KA Says τ for
each cred ∈ domain(Γ), using the public key KA in the credential
itself. Following this verification step, we type check , Γ ⊢ e :
reconfig(p). This type check verifies authorization, as well as the
authenticity and integrity of p, as discussed in Section 3.1.
5.2.2 Behavioral Check. To perform the behavioral check, we
obtain A(spec) and A(p +spec), which are the determinized NetKAT
automata derived from spec and p + spec, respectively. Then we
check A(p + spec) ∼ A(spec) using the algorithm described in Sec-
tion 2.3, leveraging FDD-based optimizations discussed in Section
3.2. This verifies that p ≼ spec and thus behavioral compliance of
p. The authorization and behavioral components together obtain
validity of the target System FSays judgment for PCNC verification
as described at the very end of Section 3.
5.3 Virtual Network Experiment
We first used a virtual network environment to evaluate the efficacy
and usefulness of PCNC proof for authorization and NetKAT for
defining policy on the data plane. Specifically, we used Mininet [39]
with Frenetic [12] to create a virtual network topology with routers
in an SDN environment, that is endowed with PCNC server capa-
bilities. Our network configuration shown in Figure 5 reflects the
case study introduced in Section 1 and formalized in the PCNC
framework in Section 4.
The topology specifications and configuration, reconfiguration,
and extension programs we tested are essentially the same as de-
fined in Section 4.2, except there we made some simplifications that
need to be fleshed out for testing in Mininet (and on real platforms).
For example addresses H3, H4, and H5 need to be replaced with
real IP addresses. And unfortunately Frenetic uses OpenFlow 1.0
that does not provide the metadata field (OpenFlow 1.1 or later
versions support the metadata field), but we circumvent this hurdle
by using the vlanID field, specifically assigned to values 1000 or
1001 to denote PUB and 911 flags, respectively. The NetKAT policies
Message ParserOpenFlow v1.3 tablesAuthorization CheckBehavioral CheckNetwork ConfigurationPCNC messageCCS ’19, November 11–15, 2019, London, United Kingdom
Skalka et al.
Match
Action
EthType = 0x800 (ip) Output(1)
IP4Dst = 104.16.65.50 Vlan = 1000
IP4Dst = 104.16.66.50 Vlan = 1000
EthType = 0x800 (ip) Output(1)
Table 2: The flow table at the edge router before the reconfig-
uration where the destination IP addresses are the two fitbit
servers, VLAN is used as the metadata field (VLAN = 1000
represents PUB), and the outgoing port is 1.
blood pressure monitor [20]. The Fitbit Charge tracks the sleep ac-
tivities of the user, and periodically sends data to the Fitbit servers
running on Cloudflare [9] via its app on an Android phone. Simi-
larly, the blood pressure monitor aggregates blood pressure data
and communicates with the Withings servers [40] via the iHealth
app on the phone. The phone connects to a wireless access point,
then to the edge router that runs Open VSwitch (OVS version 2.7)
[30] for external communication. We used a Raspberry Pi 3 Model
B+ with a 1.4GHz 64-bit quad-core processor [14], wireless LAN,
Bluetooth, and Ethernet for both the switch and access points. We
used the Linux host access point daemon (hostapd) to turn the Pi to
a virtual access point and to create a virtual LAN, and dnsmasq as a
lightweight DHCP and caching DNS server. We used a laptop with
a 2.2 GHz Intel Core i7 and 16GB RAM as the NAT server that is
connected to the switch through an Ethernet interface, and another
laptop for the edge device that also receives the same data from
the fitbit. We bridge the wireless and Ethernet interfaces via bridge-
utils available in Ubuntu. The OVS data plane is controlled by a
Frenetic controller component of the PCNC server which is located
on the Raspberry Pi, that performs verification and deployment of
programs via OpenFlow. In fact it would be easy to also incorporate
the NAT server on the Raspberry Pi, indicating the feasibility of a
low-cost embedded platform to support PCNC functionality.
5.4.2 Authorization and Behavioral Policies. The PCNC server
runs on the Raspberry Pi and uses the same implementation as de-
veloped for the Mininet experiment. The wire format is as defined
previously, and for this experiment we assume the same authoriza-
tion proof target, credentials, etc. as for the Mininet experiment.
The PCNC evaluation example for the Raspberry Pi-based server is
therefore the same as in Figure 7, except with modifications to the
reconfiguration program and specification.
Again, we use vlanID values of 1000 and 1001 to denote PUB and
911 data, respectively. The firewall component of the behavioral
policy specification for the testbed server is as follows. A technical
detail is that this specification allows for messages sent via UDP
protocol for DNS lookups (via the condition ipProto = 17) as
required by the testbed for initialization:
(filter (not (switch = 346653522121)) or
(switch = 346653522121 and
((vlanId=1000 and ip4Dst=104.16.65.50 and tcpDstPort=443) or
(vlanId=1000 and ip4Dst=104.16.66.50 and tcpDstPort=443) or
ipProto = 17)))
Emergency data (911) from the iHealth app is sent specifically to
either 89.30.121.150:443 or 151.101.146.217:443, which are the With-
ings cloud servers, while public data (PUB) from the fitbit is sent to
the fitbit servers at 104.16.65.50:443 and 104.16.66.50:443. The public
Figure 9: Real network testbed with a Fitbit Charge 3 for
sleep tracking and an iHealth Feel wireless blood pressure
monitor.
Network Packets
Destination
104.16.65.50
104.16.66.50
89.30.121.150
151.101.146.217
129.21.62.150
No.
1
2
3
4
5
TCP port
Type
Initial Reconfig.
443
443
443
443
443
PUB
PUB
911
911
PUB
✓
✓
✗
✗
✓
✓
✓
✓
✓
✓
Table 1: Packets that are allowed (✓) or blocked (✗) for the
initial policy and after the policy reconfiguration.
were implemented in OCaml [21]. The policies were tested with
the Linux utility nc to facilitate communication channels between
the destination hosts and the device hosts.
5.3.1 Results. The size of the tested PCNC messages were 2.6KB
including all cryptographic material which constitutes the bulk of
the encoding. Authorization and behavioral verification on an x86-
64 laptop computer as implemented for the Mininet version of the
server takes 0.172 seconds. The size of the PCNC server binary for
x86-64 is 19.3MB for the verification components and cryptography
library, and 47MB for the Frenetic codebase.
The results from this testing also show that the edge router
allows packets with proper header information to pass—i.e., packets
with PUB go to H3 while packets with 911 are forwarded to H4.
The router also successfully drops packets with improper header
information. All of the source code for the policies and documents
on how to run them with Frenetic and Mininet is available online.2
5.4 Real Network Testbed
We also tested PCNC in a real network. In this section we discuss
configuration with hardware and software components, and evalua-
tion of the use case. Notably, we show that PCNC can run effectively
on embedded devices such as Raspberry Pis, an attractive platform
for adding security and privacy protections in home IoT systems.
5.4.1 Testbed Configuration. As shown in Figure 9, the testbed
consists of two IoT devices connected to their remotely-located
servers through an edge router. The two IoT devices are a Fitbit
Charge 3 [11] for tracking sleep data and an iHealth Feel wireless
2https://github.com/uvm-plaid/PCNC_CCS_2019
wireless access pointfitbitsleep tracker blood pressure monitorNATInternetfitbitserveriHealthserverFreneticPCNCEdge routeredge deviceProof-Carrying Network Code
CCS ’19, November 11–15, 2019, London, United Kingdom
Match
Vlan = 1000
IP4Dst = 104.16.65.50
IP4Dst = 104.16.66.50
Vlan = 1000
IP4Dst = 151.101.146.217 Vlan = 1001
IP4Dst = 89.30.121.150
Vlan = 1001
EthType = 0x800 (ip)
EthType = 0x800 (ip)
EthType = 0x800 (ip)
EthType = 0x800 (ip)
Action
SetField(ipDst, 129.21.62.150) Output(1) + Output(1)
SetField(ipDst, 129.21.62.150) Output(1) + Output(1)
Output(1)
Output(1)
Table 3: The flow table at the edge router after the reconfiguration where two new entries are added with VLAN = 1001, which
denotes 911, destined to the iHealth servers for blood pressure data.
data (PUB) is also replicated to the edge device at 129.21.62.150. In
Table 1, the types of packets are displayed with their destination
before and after the reconfiguration. The reconfiguration firewall
also specifies an additional well-formedness condition that TCP
destination port 443 should be used for all communications:
(filter (not (switch = 346653522121)) or
(switch = 346653522121 and
((vlanId=1000 and ip4Dst=104.16.65.50 and tcpDstPort=443) or
(vlanId=1000 and ip4Dst=104.16.66.50 and tcpDstPort=443) or
(vlanId=1001 and ip4Dst=89.30.121.150 and tcpDstPort=443) or
(vlanId=1001 and ip4Dst=151.101.146.217 and tcpDstPort=443) or
ipProto = 17)))
Additionally, the forwarding policy is revised to duplicate pack-
ets from H3 to H5 for the extended network presented in Sec-
tion 4.2.2. The firewall policy is not changed as we use the second
approach (see Section 4.2.2) since the iHealth device allows only
one destination address to be specified. The revised forwarding
policy is:
(if switch = 346653522121
then (ip4Dst := 104.16.66.50; port := 1
+ ip4Dst := 129.21.61.113; port := 1)
else port := 55555 (* packet drop *) )
where the IP address of H5 is 129.21.61.113.
5.4.3 Results. As for the Mininet example, the case study PCNC
messages for the testbed are 2.6KB including all cryptographic
material which constitutes the bulk of the encoding. Authorization
and behavioral verification on the Raspberry Pi server takes 0.444
seconds. The size of the PCNC server binary for Raspberry Pi is
13MB for the verification components and cryptography library,
and 27MB for the Frenetic codebase.
In Tables 2 and 3, part of the flow tables is shown, specifically
the entries for forwarding from the devices to the servers, before
and after the reconfiguration in the OVS switch. In the initial flow
table, the packets destined to either 151.101.146.217 or 89.30.121.150
(with VLAN = 1001, i.e., emergency data from iHealth) are blocked,
while other traffic (data from fitbit, i.e., VLAN = 1000) is forwarded
to outgoing port 1, where Output(n) means that traffic is to be
replicated to port n. After the reconfiguration and extension, the
flow table (Table 3) is changed to forward both the PUB and 911
traffic to the outgoing port, i.e., the emergency data is no longer
blocked, and the data is replicated to another destination set by
SetField(ipDst, 129.21.62.150). We also captured packets from the
ingress and egress ports of the switch to ensure that the installed
policy takes effect. The flow tables and entire .pcap file containing
the captured packets are available online.3
3https://github.com/uvm-plaid/PCNC_CCS_2019
6 CONCLUSION
In this paper we developed the Proof Carrying Network Code
(PCNC) framework, that allows software defined network (SDN)
programming by multiple, possibly non-local administrative do-
mains in a secure manner. PCNC provides features for checking
authorization of administrative domains for network programming,
and allows programs themselves to be verified with respect to be-
havioral policy specifications.
PCNC is based on mathematically well-founded theories, specif-
ically Nexus Authorization Logic and the NetKAT programming
language. We developed a method for verifying behavioral proper-
ties that leverages the decidable equational theory of NetKAT. We
also introduced a new language and type theory called System FSays
that provides proof terms for an authorization logic via a types-as-
formulas correspondence.
To evaluate the practicality of PCNC, we implemented it in both
simulated and real network settings, and considered the use-case
scenario of an home health monitoring network. The latter incor-
porated a sleep monitor, where privacy concerns are relevant, and
a heart rate monitor that may report emergency data that must be
allowed to escape the network. We showed how PCNC can be used
to support these sorts of applications and security concerns, while
allowing external users to reconfigure local networks, even when
direct trust relationships do not exist with those users as in a feder-
ated setting. Our results show that the PCNC system can support
authorization, verification, and deployment of network programs
efficiently and with a small binary footprint, even when installed
on embedded devices. PCNC messages themselves are shown to be
of manageable size in our case study.
ACKNOWLEDGMENTS
The authors wish to thank the CCS reviewers, Jonathan Dilorenzo,
Ryan Doenges, and Fred Schneider for helpful comments and sug-
gestions. Hossein Hojjat, Mark Reitblatt, and Lindsey Stuntz con-
tributed many early ideas related to PCNC. This work was sup-
ported in part by the NSF under grants 1413972, 1717581, 1718036,
and 1718083, and gifts from Fujitsu and InfoSys.
REFERENCES
[1] M. Abadi. 2003. Logic in access control. In IEEE Symposium of Logic in Computer
Science (LICS). 228–233. https://doi.org/10.1109/LICS.2003.1210062
[2] Martín Abadi. 2006. Access Control in a Core Calculus of Dependency. In ACM
International Conference on Functional Programming (ICFP). 263–273. https:
//doi.org/10.1145/1159803.1159839
[3] Martín Abadi. 2008. Variations in Access Control Logic. In International Confer-
ence on Deontic Logic in Computer Science (DEON). 96–109. https://doi.org/10.
1007/978-3-540-70525-3_9