# Title: Automatically Fixing C Buffer Overflows Using Program Transformations

## Authors:
- Alex Shaw
- Dusten Doggett
- Munawar Hafiz

## Conference:
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks

## Abstract
Fixing buffer overflows in C at the source code level is often a manual or semi-automated process. We present an automated approach to fix buffer overflows by introducing two program transformations that automatically implement well-known security solutions in C source code. These transformations address the complexities of correctly analyzing and modifying C source code, including pointers and aliasing. They are effective, having fixed all buffer overflows in 4,505 programs from NIST’s SAMATE reference dataset, affecting over 2.3 million lines of code (MLOC). They are also safe, as demonstrated by their application to four open-source programs (1.7 MLOC) without breaking functionality. Such automated transformations can be used by developers during coding and by maintainers to fix issues in legacy code, either on a case-by-case basis or in batch, thereby improving system dependability.

## I. Introduction
Buffer overflows remain a critical issue in dependable systems. Many research efforts have focused on detecting buffer overflows, both statically and dynamically. However, these vulnerabilities persist. In 2012, the National Vulnerability Database reported 5,297 security vulnerabilities, with 843 (15.91%) being overflows.

Existing prevention methods do not address overflows at the source code level. Dynamic approaches, such as making the stack non-executable, checking array bounds, or ensuring code pointer integrity, introduce solutions at runtime but suffer from performance overhead and can be circumvented. These methods do not help developers write better code, as it is easy to create C code with buffer overflows. Current approaches detect or fix overflows but do not guide developers in writing secure code.

A more effective and educational solution is to introduce fixes at the C source code level, teaching developers as their problems are resolved. Tools like CCured and Cyclone provide solutions by extending C with annotations, but these must be manually added. Other automatic approaches are unsafe due to minimal or non-existent program analysis, often breaking the original program.

We describe a program transformation-based approach, specifically two transformations that fix buffer overflows by automatically introducing frequently prescribed security solutions. The SAFE LIBRARY REPLACEMENT (SLR) transformation replaces unsafe library functions with safer alternatives. The SAFE TYPE REPLACEMENT (STR) transformation replaces character buffers with a safe data structure that tracks buffer bounds during pointer operations. These transformations are similar to refactorings but are security-oriented, improving system security while preserving expected behavior.

## II. Program Transformations to Fix Overflows
We focus on the two most common causes of buffer overflows: the use of unsafe library functions and errors in pointer operations. Avoiding unsafe functions and tracking buffer length are well-known solutions, but they are often not followed in legacy code. Manual changes are error-prone and do not scale for large projects.

### A. Safe Library Replacement (SLR)
**Motivation:**
C library functions that do not perform extra checking during buffer operations are vulnerable to buffer overflows. Table I lists some unsafe functions and their safer alternatives. Despite the availability of safer alternatives, unsafe functions are still widely used, especially in legacy code.

**Preconditions:**
- The function call is one of the unsafe library functions supported by the transformation.
- The size of the destination buffer can be calculated using control flow, data flow, and alias analysis.

**Solution:**
Replace an unsafe function call with a safer alternative. SLR uses functions that check and truncate inputs to match the size of the destination buffer, similar to glib functions. These functions are syntactically similar to the original functions and do not require new data types, minimizing changes per instance. The transformation must analyze the program to determine the exact size of the destination buffer, which is complicated by pointers and aliasing.

| Unsafe Library Functions | Safe Alternative Functions |
|--------------------------|----------------------------|
| `strcpy(3)`               | `g_strlcpy` from glib       |
| `strncpy(3)`             | `astrcpy` from libmib       |
| `memcpy(3)`              | `memcpy_s` from ISO/IEC 24731 |
| `gets(3)`                | `gets_s` from ISO/IEC 24731  |
| `getenv(3)`              | `getenv_s` function         |
| `sprintf(3), snprintf(3)`| `g_snprintf` from glib      |

## Contributions
- **Design and Mechanism:** We describe the design decisions and mechanisms behind the transformations, including the necessary program analyses.
- **Implementation and Validation:** We implemented the transformations using OpenRefactory/C and validated them by applying them to benchmark programs and open-source software.
- **Effectiveness and Safety:** We demonstrate that the transformations can prevent all types of buffer overflow originating from unsafe library functions and bad pointer operations, and we show that they do not break existing code and have minimal performance overhead.

For more details and results, visit our web page: [https://munawarhaﬁz.com/research/overﬂow](https://munawarhaﬁz.com/research/overﬂow)

---

This optimized version of the text is more structured, clear, and professional, with improved readability and coherence.