sandbox
n A Mach server for handling logging from the kernel and holding prebuilt
confi gurations
n A kernel extension using the TrustedBSD API for enforcing individual
policies
n A kernel support extension providing a regular expression engine for
evaluating some policy restrictions during enforcement
Figure 5.1 shows how these components are related.
Sandboxing an application begins with a call to the libSystem function
sandbox_init. This function uses the libsandbox.dylib library to turn a human-
readable policy defi nition (describing rules similar to “don’t allow access to fi les
under /opt/sekret”) into a binary format that the kernel expects. This binary
format is passed to the mac_syscall system call handled by the TrustedBSD
subsystem. TrustedBSD passes the sandbox initialization request to the Sandbox
.kext kernel extension for processing. The kernel extension installs the sandbox
profi le rules for the current process. Upon completion, a successful return value
is passed back out of the kernel.
Once the sandbox is initialized, many of the function calls hooked by the
TrustedBSD layer pass through Sandbox.kext for policy enforcement. Depending
on the system call, the extension consults the list of rules for the current pro-
cess. Some rules (such as the example given previously of denying access to
fi les under the /opt/sekret path) require pattern-matching support. Sandbox
.kext imports functions from AppleMatch.kext to perform regular expression
matching on the system call arguments against the patterns used in the policy
rules. For example, does the path passed to open() match the denied path
/opt/sekret/.*? The fi nal component, sandboxd, listens for Mach messages
used to carry tracing and logging information (such as which operations are
being checked) and requests for prebuilt profi les (such as “block all network
cc0055..iinndddd 110088 44//1166//22001122 55::4444::2244 PPMM
Chapter 5 n Sandboxing 109
usage” or “don’t allow anything but computation”), which are hard-coded
into the kernel.
user_process
libSandbox libSystem sandboxd
BSD syscalls Mach traps
mach_kernel
TrustedBSD
AppleMatch.kext Sandbox.kext
Figure 5.1: Components of the iOS sandbox
The following sections step you through each component just discussed in
greater detail. You start in userspace and work your way down to the kernel
components. Throughout the discussion, you’ll be using the binaries unpacked
from the iPhone3,1_5.0_9A334 fi rmware. For details on unpacking the kernel-
cache and root fi lesystem (for the dyld cache), see Chapter 10. Any discussion of
the XNU kernel should use both analysis of the binary fi rmware and the open
source code available in xnu-1699.24.8. This is the closest available version of
the xnu source to the fi rmware in question. Also, you can download any sample
code throughout this chapter at the book’s companion website at www.wiley
.com/go/ioshackershandbook.
Sandboxing Your Apps
With the creation of the App Store and the release of OS X 10.7 Lion, the
sandbox extensions used by iOS have received more documentation. Prior to
10.7, the iOS sandbox included more features than the versions shipped with
OS X, but with little information publicly available. The concepts discussed
cc0055..iinndddd 110099 44//1166//22001122 55::4444::2244 PPMM
110 Chapter 5 n Sandboxing
in the Application Sandbox Design Guide (https://developer.apple.com/
library/mac/#documentation/Security/Conceptual/AppSandboxDesignGuide/
AboutAppSandbox/AboutAppSandbox.html) complement this chapter, and Apple
has taken care to note many of the iOS differences. The Apple Sandbox Design
Guide is higher level, but the concepts introduced remain useful.
The iPhone 5.0 SDK contains the sandbox.h header exposing the userspace
interface of the sandbox. The example begins by looking at the three functions
used for initializing a sandbox: sandbox_init, sandbox_init_with_parameters,
and sandbox_init_with_extensions.
sandbox_init confi gures the sandbox of the calling process given a profi le.
sandbox_init takes a profi le, a set of fl ags, and an output argument for storing
a pointer to an error message. The profi le, or set of rules for restricting a process,
can be provided in a few different ways depending on the fl ags passed to the
function. The only publicly supported fl ag, SANDBOX_NAMED, expects a string
passed in the profi le argument selecting a built-in profi le such as “no-internet.”
The sample program here uses this option to restrict a spawned shell from
using the Internet:
#include 
#include 
int main(int argc, char *argv[]) {
int rv;
char *errbuff;
//rv = sandbox_init(kSBXProfileNoInternet, SANDBOX_NAMED_BUILTIN,
&errbuff);
rv = sandbox_init(“nointernet”, SANDBOX_NAMED_BUILTIN, &errbuff);
if (rv != 0) {
fprintf(stderr, “sandbox_init failed: %s\n”, errbuff);
sandbox_free_error(errbuff);
} else {
printf(“pid: %d\n”, getpid());
putenv(“PS1=[SANDBOXED] \\h:\\w \\u\\$ “);
execl(“/bin/sh”, “sh”, NULL);
}
return 0;
}
Before running this example, ensure that your jailbroken device has installed
ping from the inetutils package. The /bin/ping executable will also need the
sticky bit removed using the command /chmod –s /bin/ping. The following
is a transcript of the preceding program showing the sandbox blocking a ping
request as expected:
iFauxn:~/ioshh root# ./sb1
pid: 5169
cc0055..iinndddd 111100 44//1166//22001122 55::4444::2244 PPMM
Chapter 5 n Sandboxing 111
[SANDBOXED] iFauxn:~/ioshh root# ping eff.org
PING eff.org (69.50.232.52): 56 data bytes
ping: sendto: Operation not permitted
^C--- eff.org ping statistics ---
0 packets transmitted, 0 packets received,
[SANDBOXED] iFauxn:~/ioshh root# exit
iFauxn:~/ioshh root# ping eff.org
PING eff.org (69.50.232.52): 56 data bytes
64 bytes from 69.50.232.52: icmp_seq=0 ttl=46 time=191.426 ms
^C--- eff.org ping statistics ---
1 packets transmitted, 1 packets received, 0% packet loss
round-trip min/avg/max/stddev = 191.426/191.426/191.426/0.000 ms
iFauxn:~/ioshh root#
One thing to note about this sample program is the commented-out line
using a documented constant, kSBXProfileNoInternet, as the name for the
profi le. The constants defi ned in the header are not compatible with the iOS
sandbox. For example, the kSBXProfileNoInternet constant will resolve to
“no-internet” on both iOS and OS X. Unfortunately, on iOS, the profi le name
should be “nointernet”.
In addition to named built-in profi les, sandbox_init supports the specifi cation
of custom fi ne-grained restrictions using a Scheme-embedded domain-specifi c
language called Sandbox Profi le Language (SBPL). Using the fl ag SANDBOX_NAMED_
EXTERNAL, sandbox_init expects a path to a sandbox profi le language script fi le
to be passed as an argument. If the path is not absolute, three different locations
are tried as base paths prefi xing the relative path given:
__cstring:368FB90A aLibrarySandbox DCB “/Library/Sandbox/Profi les”,0
__cstring:368FB924 aSystemLibraryS DCB “/System/Library/Sandbox/Profi les”,0
__cstring:368FB945 aUsrShareSandbo DCB “/usr/share/sandbox”,0
In addition to SANDBOX_NAMED_EXTERNAL, a fl ag’s value of 0 may be passed
to sandbox_init along with the SBPL script in the profi le argument directly.
Apple has provided no documentation on the SBPL, but the full defi nition of
the language, a Scheme script itself, is easily extractable from libsandbox.
dylib (available from the dyld cache in the fi rmware). Fortunately, fG! has
created the Apple Sandbox Guide (http://reverse.put.as/2011/09/14/
apple-sandbox-guide-v1-0/) to document the SBPL as implemented in OS X.
Much of this guide is applicable to iOS but it does not include some of the newer
features of SBPL (such as extension fi lters).
There is also one example of an .sb SBPL script in the fi rmware we’re using:
ftp-proxy.sb is found in /usr/share/sandbox. Following is an excerpt of this
profi le to give you an idea of the format before continuing on to a full example:
(deny default)
...
(allow file-read-data
(literal “/dev/pf”)
cc0055..iinndddd 111111 44//1166//22001122 55::4444::2244 PPMM
112 Chapter 5 n Sandboxing
(literal “/dev/random”)
(literal “/private/etc/master.passwd”))
(allow file-read-metadata
(literal “/etc”))
(allow file-write-data
(literal “/dev/pf”))
The profi le language is mostly intuitive. This script sets the default action to
deny any access, locking down the process applying this profi le. After remov-
ing all privileges, specifi c actions are explicitly allowed, such as reads from the
password fi le (presumably for authentication actions required by the FTP proxy).
To try out your own sandbox profi le, create a small profi le to restrict access to
two specifi c fi les under /tmp:
(version 1)
(allow default)
(deny file-read-data
(literal “/private/var/tmp/can_w”))
(deny file-write-data
(literal “/private/var/tmp/can_r”))
To test this profi le, copy the previous example that denied Internet access
and change the sandbox_init call to use the SANDBOX_NAMED_EXTERNAL option:
rv = sandbox_init(“sb2”, SANDBOX_NAMED_EXTERNAL, &errbuff);
You’ll also need to copy the.sb script presented earlier to /usr/share/
sandbox (or a similar directory in the search path) or give an absolute path in the
sandbox_init argument. Here, the transcript shows the custom SBPL restricting
access to fi les based on path:
iFauxn:~/ioshh root# echo “w” > /private/var/tmp/can_w
iFauxn:~/ioshh root# echo “r” > /private/var/tmp/can_r
iFauxn:~/ioshh root# ./sb2
pid: 5435
[SANDBOXED] iFauxn:~/ioshh root# cat /private/var/tmp/can_w
cat: /private/var/tmp/can_w: Operation not permitted
[SANDBOXED] iFauxn:~/ioshh root# cat /private/var/tmp/can_r
r
[SANDBOXED] iFauxn:~/ioshh root# echo “IOSHH” >> /private/var/tmp/can_w
[SANDBOXED] iFauxn:~/ioshh root# echo “IOSHH” >> /private/var/tmp/can_r
sh: /private/var/tmp/can_r: Operation not permitted
[SANDBOXED] iFauxn:~/ioshh root# exit
iFauxn:~/ioshh root#
As expected, read access to can_w is blocked, but write access is allowed.
can_r is fl ipped; you can read but not write.
cc0055..iinndddd 111122 44//1166//22001122 55::4444::2255 PPMM
Chapter 5 n Sandboxing 113
Like sandbox_init, the other two functions used for initialization take the
same three parameters. They also take a fourth parameter that points to an array
of strings. init_sandbox_with_parameters is used to pass a list of parameters to
the Scheme interpreter when evaluating the SBPL script. This feature is useful
in a similar manner as the C preprocessor. All parameters must be specifi ed at
initialization time.
The extensions passed into the final initialization function, via init_
sandbox_with_extensions, are quite different from the parameters mentioned
previously. Extensions are commonly base paths and may be dynamically added
to a process. Unlike parameters, the extension logic is built into the kernel
enforcement; each process maintains a list of extension strings currently held
and the sandbox consults this list when certain SBPL fi lters are encountered
in the profi le rules. init_sandbox_with_extensions is used to specify a list of
extensions needed by the process immediately.
You use a two-step procedure to dynamically add an extension to a process.
First, you issue an extension by calling sandbox_issue_extension with the path
to add and a pointer to hold an output token. This token is then consumed using
sandbox_consume_extension to install this extension in a process. The issuing
process need not be the same as the consuming process. A parent process that
is communicating with a sandboxed child may issue extensions to the child
based on an internal policy, for example. The SBPL provides a way to restrict
the sandbox_issue_extension operation. Without this restriction, a sandboxed
child process would be able to issue itself any extension it wanted, rendering
this feature useless.
Take a look at another example to illustrate the use of extensions:
#include 
#include 
int main(int argc, char *argv[]) {
int rv;
char sb[] =
“(version 1)\n”
“(allow default)\n”
“(deny fi le-issue-extension*)\n”
“(deny fi le-read-data\n”
“ (regex #\”/private/var/tmp/container/”
“([0-9]+)/.*\”))\n”
“(allow fi le-read-data\n”
“ (require-all\n”
“ (extension)\n”
“ (regex #\”/private/var/tmp/container/”
“([0-9]+)/.*\”)))\n”;
char *errbuff;
char *token;
token = NULL;
rv = sandbox_issue_extension(
cc0055..iinndddd 111133 44//1166//22001122 55::4444::2255 PPMM
114 Chapter 5 n Sandboxing
“/private/var/tmp/container/1337”, &token);
if (rv == 0 && token) {
printf(“Issued extension token for “
“\”/private/var/tmp/container/1337\”:\n”);
printf(“ %s\n”, token);
} else {
printf(“sandbox_issue_extension failed\n”);
}
const char *exts[] = { argv[1] };
printf(“Applying sandbox profi le:\n”);
printf(“%s”, sb);
printf(“\n”);
printf(“With extensions: { \”%s\” }\n”, exts[0]);
printf(“\n”);
rv = sandbox_init_with_extensions(sb, 0, exts, &errbuff);
if (rv != 0) {
fprintf(stderr, “sandbox_init failed: %s\n”, errbuff);
sandbox_free_error(errbuff);
} else {
putenv(“PS1=[SANDBOXED] \\h:\\w \\u\\$ “);
printf(“Attempting to issue another extension after”
“applying the sandbox profi le...\n”);
char *token2 = NULL;
rv = sandbox_issue_extension(
“/private/var/tmp/container/1337”,
&token2);
if (rv == 0 && token) {
printf(“Issued extension token for “
“\”/private/var/tmp/container/1337\”:\n”);
printf(“ %s\n”, token);
} else {
printf(“sandbox_issue_extension failed\n”);
}
system(“/bin/sh”);
printf(“\nConsuming the extension, then starting another “
“shell...\n\n”);
sandbox_consume_extension(
“/private/var/tmp/container/1337”, token);
system(“/bin/sh”);
}
return 0;
}
In this example, the goal is to create a profi le that enables you to add allowed
subpaths at run time. To accomplish this, you fi rst deny all read-data access to
paths under /private/var/tmp/container containing 1 or more digits. Following
cc0055..iinndddd 111144 44//1166//22001122 55::4444::2255 PPMM
Chapter 5 n Sandboxing 115
the denial of read-data, you add an allow read-data that applies only if the
target path is both under one of the processes extensions and under /private/
var/tmp/container. You also deny access to the sandbox_issue_extension
function. Before initializing the sandbox, the fi rst extension is issued for the
1337 subdirectory. The returned token is saved. The sandbox is then initialized
with a single extension taken from the fi rst command-line argument. Before
launching a shell, you try to issue an extension from under the sandbox to prove