表IV显示了我们三个收集的数据集中不同Microsoft Windows版本的数量。(可以看出沙箱的系统分布与真实用户的是不相同的)。
图1显示了三个数据集（Dreal，Dsand和Dbase）中每个磨损artifact值的分布。从中可以看到:1.大多数artifact在真实用户系统中的值大于沙箱和基线中的值，因此可以用来区分真实用户和沙箱；2.真实用户的artifact值分布更宽，因此可以用来预测系统年龄。
PS: 可以看到沙箱的appdiffdays和sysdiffdays值比真实用户高很多，因此沙箱系统一般比真实用户系统“老化”程度更高。
图2显示了Mann-Whitney
U检验显示的Dreal和Dsand分布之间差异的影响大小。0.3和0.5之间的效果被认为是“中等”效应的特征，而高于0.5的效应被认为是“强”效应。
## V. EVADING MALWARE SANDBOXES
以上的统计信息说明了作者所选用的artifact是可以作为特征来分辨沙箱的，因此接下来将使用有监督机器学习方式，训练决策树模型来进一步完成对沙箱的规避工作。
### A. Setup and Classifier
  1. 使用决策树模型。因为决策树模型可以表现为一系列的if-else语句，从而将恶意软件的整体足迹保持在最小。
  2. 计算皮尔森相关系数（r）来检查特征对的相关性。虽然有4对特征具有很强的相关性（r> 0.7），但是为了尽可能的规避所有沙箱，作者还是采用了所有的特征。
  3. 训练集：49个沙箱环境实例，22个新安装操作系统的实例，71个真实用户实例；测试集：剩余的49个沙箱环境实例，49个真实用户随机样本。
  4. 使用10-trial adaptive boosting算法(创建多个树，每个树专注改进前一棵树的结果)和adaptive boosting决策树算法(覆盖单棵树不能到达的边界)来提升分类器准确性。
  5. 指定成本矩阵减少漏报的出现(原则是宁可不感染到某些真实用户，也尽量不能被沙箱捕获)。
PS: FP 误报->没有感染真实用户主机；FN 漏报->尝试感染沙箱
### B. Evaluation
模型在测试集上达到了92.86％的准确率，假阴性率（FNR）为4.08％，假阳性率（FPR）为10.20％。
十个构建的树的平均树大小为4.6分裂，最短的树具有3个分裂，最长的树分裂为5个。 表V显示了对算法最有用的功能，以及使用任何给定功能的树的百分比。
之后作者从两个思路出发:
一、评估我们的算法对沙盒环境中增量变化的稳健性
方法: 每次只删除一个特征，将以上分类器训练过程重复30次。
目的: 对于攻击者而言量化恶意软件区分沙箱和真实用户的能力；对于防御者而言可以使用在此处识别的最有价值的artifact磨损程度来模仿真实的用户系统。
效果: 图4显示了准确性，误报率和漏报率如何变化。可以看到即使删除多达20个特征，分类器的整体准确性仍高于90%。
二、每种类型的工件如何影响分类器的准确性
方法: 一次仅使用 **一种** 类型的工件重新训练我们的模型。
目的: 让恶意软件作者可以选择他们想要关注的artifact类别，但这种选择不会影响恶意软件的规避能力。
效果: 表VI显示了每个类别的artifact数量以及每个分类器在测试数据集上的性能。
## VI. ESTIMATING ACTUAL SYSTEM AGE
在之前的数据分析中，可以发现沙箱环境的“老化”程度与用户的真实环境是截然不同的。而且理论上“磨损”程度和“老化”程度应该是相匹配的，如果不匹配那么是沙箱的概率则很大。对于攻击者可以使用者一特点进行沙箱规避；对于防御者则可以对沙箱做更好的调整。
### A. Correlation Between Age and Artifacts
目的: 得出artifact的磨损与系统年龄之间的关系
图5显示了用户系统和恶意软件沙箱“年龄”的累积分布函数。可以看到平均而言用户系统比沙箱更“新”。
图6显示了报告的年龄与真实用户系统的每个artifact磨损程度之间的皮尔森相关系数。此处假设从真实用户系统收集的报告年龄是准确的。
观测结果分析:
  1. 许多非常成功地区分真实机器和沙箱的工件实际上与机器的年龄无关；
  2. 一些与用户活动直接相关的artifact不能很好的反映系统的年龄，比如cookie的数量(用户可以主动清除)；
  3. 一些不太容易被用户修改的artifact将跟系统年龄成正相关，比如连接过的USB数量。
### B. Regression
目的: 确定组合它们的原始值来估计系统的实际年龄的合适方法。
数据集处理:
  1. 删除具有缺失值的artifact；
  2. 删除丢失率超过80％的artifact。
(1) Linear Regression:
  * 公式: Y =β0+β1X1+β2X2+ … +ε (Xi是给定的artifact值，βi是对应的权重，Y是预测的年龄)
  * 数据集: 训练（60％），测试（40％）
  * 评估: 十折交叉验证
  * 结果: 真实系统的预测年龄的最终均方误差（MSE）是1.88，而沙箱的MSE非常高，为6.25。
  * 结论: 使用artifact的磨损程度来预测系统年龄是可行的，也就是说使用预测年龄和系统的生成年龄的对比来识别沙箱是可行的。
PS: 十折交叉验证，英文名叫做10-fold cross-validation，用来测试算法准确性。是常用的测试方法。将数据集分成十份，轮流将其中9份作为训练数据，1份作为测试数据，进行试验。
表VII中报告了模型的系数及其p值。 我们看到13种artifact磨损程度与机器的年龄相关，具有统计学意义。
图7显示了在Dreal和Dsand系统上应用线性回归模型时残差值的累积分布函数(CDF)。可以看到在尝试预测沙箱年龄时的残差值是非常高的。
(2) Lasso Regression
  * 目的: 验证复杂的回归模型是否会带来更好的预测准确性
  * 套索回归的优点: 比线性回归使用更少的预测变量，这降低了整体模型的复杂性。 对于恶意软件，较小的功能集意味着对底层操作系统的API调用较少，从而减少了触发可疑活动监视器的机会。
  * 数据集: 训练集，评估集和测试集
  * 方法: 交叉验证来找到最佳的λ值
  * 结果: Dreal集的MSE为0.749，Dsand集上的MSE为4.45，优于线性回归
  * 结论: Lasso模型可以更好地辨别沙箱。
表VIII显示了Lasso模型选择的八个特征，它们是系统年龄及其相应系数的良好预测因子。
![
](https://images.seebug.org/content/images/2019/03/fe6de153-638e-4c90-92ae-b53d0e581b38.png-w331s)
小结: 使用artifact磨损程度来预测系统年龄是可行的，这一方面可以用于辨识沙箱；另一方面是可以帮助sandbox开发人员创建系统年龄相符的沙箱环境
## VII. DISCUSSION
### A. Ethical Considerations and Coordinated Disclosure
本文主要讲述了这种新的规避技术的有效性，并且目前已经出现了此类相关工作的恶意软件。但是本文主要是为了帮助创建更强大的恶意软件分析系统。
### B. Probing Stealthiness
  1. 总是存在不受监控的artifact集；
  2. 虽然最小特权原则造成的系统API调用限制，可访问的环境限制，但是依旧可以从其他不受限制的artifact集获取大量信息；
### C. OS Dependability
文章虽然是基于Windows平台在进行artifact的分析，但其中的一些artifact并不是其特有的，在其它系统例如Linux，Mac，Android等也同样适用。如果想适用Java等编写跨平台的恶意软件，就可以去关注那些不依赖于特定系统而存在的artifact。
### D. Defenses
  1. 克隆真实用户系统并将其用作恶意软件沙箱的基础。
缺点:
i) 隐私问题（如何在克隆之前或之后擦除所有私人信息，但保留磨损工件完整？）；
ii) artifact的老化问题(攻击者可以使用我们提出的统计模型来检测声称的年龄与磨损程度不匹配的情况)。
  2. 从新安装的操作系统映像开始，通过自动模拟用户操作人为地使其老化。
缺点:尚不清楚这种人工老化在多大程度上会产生与真实系统相似的artifact情况。
## VIII. CONCLUSION AND FUTURE WORK
本文主要做了两个方面工作:
  1. 攻击者角度:将Windows系统的一些不涉及用户隐私的artifact作为特征，使用决策树分类器进行训练，最终可以在92.86％的准确度上来识别沙箱环境。
  2. 防御者角度:将系统的artifact特征与系统的年龄进行联系并提出统计模型，从而帮助沙箱操作人员对系统进行微调，使其具有更逼真的磨损特性。
未来工作:
  1. 克隆真实用户系统并将其用作恶意软件沙箱的基础。
  2. 自动模拟用户操作人为地使系统其老化到所需程度。
  3. 不同的桌面操作系统以及移动设备中评估基于artifact磨损特性的沙盒规避的有效性。
* * *