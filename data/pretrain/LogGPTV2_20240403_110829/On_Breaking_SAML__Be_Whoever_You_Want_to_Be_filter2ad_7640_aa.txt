# Title: On Breaking SAML: Be Whoever You Want to Be

# Authors:
- Juraj Somorovsky
- Andreas Mayer
- Jörg Schwenk
- Marco Kampmann
- Meiko Jensen

**Affiliations:**
1. Horst Görtz Institute for IT-Security, Ruhr-University Bochum, Germany
2. Adolf Würth GmbH & Co. KG, Künzelsau-Gaisbach, Germany

**Contact:**
- {Juraj.Somorovsky, Joerg.Schwenk, Marco.Kampmann, Meiko.Jensen}@rub.de
- PI:EMAIL

## Abstract
The Security Assertion Markup Language (SAML) is a widely adopted standard for making security statements about subjects. It is a critical component in federated identity deployments and Single Sign-On (SSO) scenarios. To protect the integrity and authenticity of exchanged SAML assertions, the XML Signature standard is used. However, the signature verification algorithm in XML Signature is more complex than in traditional formats like PKCS#7, making it susceptible to various XML Signature-specific attacks under a weak adversarial model.

In this paper, we present an in-depth analysis of 14 major SAML frameworks and demonstrate that 11 of them, including Salesforce, Shibboleth, and IBM XS40, have critical XML Signature wrapping (XSW) vulnerabilities. Based on our analysis, we developed an automated penetration testing tool for XSW in SAML frameworks. The feasibility of this tool was validated by the discovery of a new XSW variant. We propose the first framework to analyze such attacks, based on the information flow between two components of the Relying Party. Surprisingly, this analysis also yields efficient and practical countermeasures.

## Introduction
The Security Assertion Markup Language (SAML) is an XML-based language designed for making security statements about subjects. SAML assertions are used as security tokens in WS-Security and REST-based Single Sign-On (SSO) scenarios. Supported by major software vendors and open source projects, SAML is widely deployed, with new application scenarios constantly being defined due to its flexibility and broad support.

### SAML Assertions
Since SAML assertions contain security-critical claims about a subject, their validity must be certified. According to the standard, this is achieved using XML Signatures, which should cover either the complete SAML assertion or an XML document containing it (e.g., a SAML Authentication response). However, approximately 80% of the SAML frameworks we evaluated could be compromised by novel XML Signature wrapping (XSW) attacks, primarily due to:

- **Complex Signing Algorithm:** Unlike previous digital signature formats like PKCS#7 and OpenPGP, which compute a single hash of the entire document and append the signature, the XML Signature standard is more complex. The position of the signature and the signed content can vary, leading to many permutations of the same XML document.
- **Unspecified Internal Interface:** Most SAML frameworks treat the Relying Party (RP) as a single block, assuming a joint common state for all tasks. Logically, this block must be subdivided into the signature verification module (RPsig) and the SAML processing module (RPclaims). These modules have different views on the assertion and typically exchange only a Boolean value about the signature's validity.

### Contribution
In this paper, we present an in-depth analysis of 14 SAML frameworks and systems, identifying critical XSW vulnerabilities in 11 of them. This result is alarming given the importance of SAML in practice, especially since SSO frameworks may become a single point of attack. It indicates that the security implications behind SAML and XML Signature are not fully understood.

- **Exploitation by Weak Adversaries:** These vulnerabilities can be exploited by attackers with fewer resources than classical network-based adversaries. The attacker does not need real-time eavesdropping capabilities and can work with expired SAML assertions. Even SSL/TLS encryption does not help, as the attacker can register as a regular customer at the SAML issuer and use their own assertion to impersonate others.
- **Model for SAML Frameworks:** We provide the first model for SAML frameworks that accounts for the interface between RPsig and RPclaims. This model defines successful attacks on SAML and enables us to prove several positive results, offering advice on improving the security of the 11 vulnerable frameworks.
- **XSW Vulnerabilities:** XSW vulnerabilities constitute an important and broad class of attack vectors. Contrary to common belief, signing the whole document does not necessarily protect against them. A specialized XSW penetration testing tool, developed during our research, will be released as open source to aid in understanding and mitigating these attacks. Its practicability was proven by discovering a new attack vector on Salesforce's SAML interface despite specific countermeasures.

### Responsible Disclosure
All vulnerabilities found during our analysis were reported to the responsible security teams, and we collaborated closely with them to patch the issues.

### Outline
- **Section 2:** High-level overview of SAML.
- **Section 3:** Detailed technical foundations.
- **Section 4:** Methodology of the investigation.
- **Section 5:** Detailed results.
- **Section 6:** Presentation of the first fully automated XSW penetration test tool for SAML.
- **Section 7:** Formal analysis and derivation of two countermeasures.
- **Section 8:** Discussion of practical feasibility.
- **Section 9:** Overview of related work.
- **Conclusion:** Future research directions.

## Figure 1: A Typical Single Sign-On Scenario
A user visits the RP, which generates a request token. The user redirects this token to the IdP. The issued token is sent to the user and forwarded to the RP. Even though the channel is secured by SSL/TLS, the user can still see the token.

## 2. Motivation
In this section, we introduce two typical SAML scenarios and some widely used SAML frameworks.

### SAML-Based Single Sign-On
Internet users often manage multiple identities for different web applications. Single Sign-On (SSO) was developed to address this issue. Users authenticate once to a trustworthy Identity Provider (IdP), and the IdP issues security tokens on demand. These tokens are used to authenticate to Relying Parties (RPs).

### Securing Web Services with SAML
Another typical application scenario is the use of SAML with WS-Security in SOAP to provide authentication and authorization mechanisms for Web Services. SAML assertions are included as security tokens in the Security header.

### SAML Providers and Frameworks
Our evaluation, conducted over the last 18 months, includes prominent and well-used SAML frameworks, summarized in Table 1. Our analysis included the IBM hardware appliance XS40, the Windows Identity Foundation (WIF) used in Microsoft Sharepoint, and the Salesforce cloud platform. Important open-source frameworks include OpenSAML, OpenAM, OIOSAML, OneLogin, and Apache Axis 2.

| Framework/Provider | Language | Type | Reference |
|--------------------|----------|------|-----------|
| Apache Axis 2      | Java     | WS   | [Link]    |
| Guanxi             | Java     | Web SSO | [Link]   |
| Higgins 1.x        | Java     | Web SSO | [Link]   |
| IBM XS40           | XSLT     | WS   | [Link]    |
| JOSSO              | Java     | Web SSO | [Link]   |
| WIF                | .NET     | Web SSO | [Link]   |
| OIOSAML            | Java, .NET | Web SSO | [Link]  |
| OpenAM             | Java     | Web SSO | [Link]   |
| OneLogin           | Java, PHP, Ruby, Python | Web SSO | [Link] |
| OpenAthens         | Java, C++ | Web SSO | [Link]  |
| OpenSAML           | Java, C++ | Web SSO | [Link]  |
| Salesforce         | PHP      | Web SSO | [Link]   |
| SimpleSAMLphp      | PHP      | Web SSO | [Link]   |
| WSO2               | Java     | Web SSO | [Link]   |

### Applications
- **Apache Axis 2:** Standard framework for generating and deploying Web Service applications.
- **Guanxi:** Sakai Project.
- **Higgins 1.x:** Identity project.
- **IBM XS40:** Enterprise XML Security Gateway.
- **JOSSO:** Motorola, NEC, Redhat.
- **WIF:** Microsoft Sharepoint 2010.
- **OIOSAML:** Danish eGovernment.
- **OpenAM:** Enterprise-Class Open Source SSO.
- **OneLogin:** Joomla, Wordpress, SugarCRM, Drupal.
- **OpenAthens:** UK Federation.
- **OpenSAML:** Shibboleth, SuisseID.
- **Salesforce:** Cloud Computing and CRM.
- **SimpleSAMLphp:** Danish e-ID Federation.
- **WSO2:** WSO2 products (Carbon, ESB, etc.).

## 3. Technical Foundations
In this section, we briefly introduce the SAML standard and XML Signature wrapping attacks. For readers unfamiliar with the relevant W3C standards, we also present XML Signature and XML Schema.

### 3.1 XML Signature
The XML Signature standard defines the syntax and processing rules for creating, representing, and verifying XML-based digital signatures. It allows signing a whole XML tree or specific elements, and one XML Signature can cover several local or global resources.

- **Enveloped Signature:** Placed within the signed content.
- **Enveloping Signature:** Surrounds the signed parts.
- **Detached Signature:** Neither inside nor a parent of the signed data.

An XML Signature is represented by the `Signature` element, as shown in Figure 2. XML Signatures are two-pass signatures, storing the hash value of the resource, the used hash algorithm, and the URI reference to the resource in a `Reference` element. The `Transforms` element specifies the processing steps applied before digesting the resource. Each signed resource is represented by a `Reference` element in the `SignedInfo` element. The `SignedInfo` itself is protected by the signature. The `CanonicalizationMethod` and `SignatureMethod` elements specify the algorithms used for canonicalization and signature creation. The Base64-encoded value of the computed signature is deposited in the `SignatureValue` element. The `KeyInfo` element facilitates the transport of signature-relevant key management information. The `Object` is an optional element.

![XML Signature Data Structure](Figure_2.png)

This structured and detailed approach ensures clarity and professionalism in the presentation of the research findings.