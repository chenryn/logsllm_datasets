title:On Breaking SAML: Be Whoever You Want to Be
author:Juraj Somorovsky and
Andreas Mayer and
J&quot;org Schwenk and
Marco Kampmann and
Meiko Jensen
On Breaking SAML: Be Whoever You Want to Be
Juraj Somorovsky1, Andreas Mayer2, J¨org Schwenk1, Marco Kampmann1, and Meiko Jensen1
1Horst G¨ortz Institute for IT-Security, Ruhr-University Bochum, Germany
2Adolf W¨urth GmbH & Co. KG, K¨unzelsau-Gaisbach, Germany
{Juraj.Somorovsky, Joerg.Schwenk, Marco.Kampmann, Meiko.Jensen}@rub.de,
PI:EMAIL
Abstract
The Security Assertion Markup Language (SAML) is a
widely adopted language for making security statements
about subjects. It is a critical component for the develop-
ment of federated identity deployments and Single Sign-
On scenarios. In order to protect integrity and authentic-
ity of the exchanged SAML assertions, the XML Signa-
ture standard is applied. However, the signature veriﬁca-
tion algorithm is much more complex than in traditional
signature formats like PKCS#7. The integrity protection
can thus be successfully circumvented by application of
different XML Signature speciﬁc attacks, under a weak
adversarial model.
In this paper we describe an in-depth analysis of 14
major SAML frameworks and show that 11 of them,
including Salesforce, Shibboleth, and IBM XS40, have
critical XML Signature wrapping (XSW) vulnerabilities.
Based on our analysis, we developed an automated pen-
etration testing tool for XSW in SAML frameworks. Its
feasibility was proven by additional discovery of a new
XSW variant. We propose the ﬁrst framework to an-
alyze such attacks, which is based on the information
ﬂow between two components of the Relying Party. Sur-
prisingly, this analysis also yields efﬁcient and practical
countermeasures.
Introduction
1
The Security Assertion Markup Language (SAML) is an
XML based language designed for making security state-
ments about subjects. SAML assertions are used as se-
curity tokens in WS-Security, and in REST based Single
Sign-On (SSO) scenarios. SAML is supported by major
software vendors and open source projects, and is widely
deployed. Due to its ﬂexibility and broad support, new
application scenarios are deﬁned constantly.
SAML ASSERTIONS. Since SAML assertions con-
tain security critical claims about a subject, the validity
of these claims must be certiﬁed. According to the stan-
dard, this shall be achieved by using XML Signatures,
which should either cover the complete SAML assertion,
or an XML document containing it (e.g. a SAML Au-
thentication response).
However, roughly 80% of the SAML frameworks that
we evaluated could be broken by circumventing integrity
protection with novel XML Signature wrapping (XSW)
attacks. This surprising result is mainly due to two facts:
• Complex Signing Algorithm: Previous digital sig-
nature data formats like PKCS#7 and OpenPGP
compute a single hash of the whole document, and
signatures are simply appended to the document.
The XML Signature standard is much more com-
plex. Especially, the position of the signature and
the signed content is variable. Therefore, many per-
mutations of the same XML document exist.
• Unspeciﬁed internal
interface: Most SAML
frameworks treat the Relying Party (i.e.
the Web
Service or website consuming SAML assertions) as
a single block, assuming a joint common state for
all tasks. However, logically this block must be sub-
divided into the signature veriﬁcation module (later
called RPsig) which performs a cryptographic opera-
tion, and the SAML processing module (later called
RPclaims) which processes the claims contained in
the SAML assertion. Both modules have different
views on the assertion, and they typically only ex-
change a Boolean value about the validity of the sig-
nature.
CONTRIBUTION.
In this paper, we present an in-
depth analysis of 14 SAML frameworks and systems.
During this analysis, we found critical XSW vulnerabili-
ties in 11 of these frameworks. This result is alarming
given the importance of SAML in practice, especially
since SSO frameworks may become a single point of at-
tack.
It clearly indicates that the security implications
behind SAML and XML Signature are not understood
yet.
Second, these vulnerabilities are exploitable by an at-
tacker with far fewer resources than the classical network
based attacker from cryptography: Our adversary may
succeed even if he does not control the network. He does
not need realtime eavesdropping capabilities, but can
work with SAML assertions whose lifetime has expired.
A single signed SAML assertion is sufﬁcient to com-
pletely compromise a SAML issuer/Identity Provider.
Using SSL/TLS to encrypt SAML assertions, and thus to
prevent adversaries from learning assertions by intercept-
ing network trafﬁc, does not help either: The adversary
may e.g. register as a regular customer at the SAML is-
suer, and may use his own assertion to impersonate other
customers.
Third, we give the ﬁrst model for SAML frameworks
that takes into account the interface between RPsig and
RPclaims. This model gives a clear deﬁnition of successful
attacks on SAML. Besides its theoretical interest, it also
enables us to prove several positive results. These results
are new and help to explain why some of the frameworks
were not vulnerable to our attacks, and to give advice on
how to improve the security of the other 11 frameworks.
Last, we show that XSW vulnerabilities constitute an
important and broad class of attack vectors. There is no
easy defense against XSW attacks: Contrary to common
belief, even signing the whole document does not neces-
sarily protect against them. To set up working defenses,
a better understanding of this versatile attack class is re-
quired. A specialized XSW pentesting tool developed
during our research will be released as open source to aid
this understanding. Its practicability was proven by dis-
covering a new attack vector on Salesforce SAML inter-
face despite the fact that speciﬁc countermeasures have
been applied.
RESPONSIBLE DISCLOSURE. All vulnerabilities
found during our analysis were reported to the respon-
sible security teams. Accordingly, in many cases, we
closely collaborated with them in order to patch the
found issues.
OUTLINE. The rest of the paper is organized as fol-
lows. Section 2 gives a highlevel overview on SAML,
and Section 3 adds details. The methodology of the in-
vestigation is explained in Section 4, and the detailed re-
sults are described in Section 5. In Section 6 we present
the ﬁrst fully automated XSW penetration test tool for
SAML. Section 7 gives a formal analysis and derives two
countermeasures. In Section 8 we discuss their practi-
cal feasibility. Section 9 presents an overview on related
work. In the last section we conclude and propose future
research directions.
Figure 1: A typical Single Sign-On scenario: The user
visits the RP, which generates a request token. He redi-
rects this token to the IdP. The issued token is sent to the
user and forwarded to the RP. Even though the channel
is secured by SSL/TLS, the user still can see the token.
2 Motivation
In this section we introduce two typical SAML scenarios
and some widely used SAML frameworks.
SAML-BASED SINGLE SIGN-ON. Typical Internet
users have to manage many identities for different web
applications. To overcome this problem, Single Sign-On
was developed. In this approach the users authenticate
only once to a trustworthy Identity Provider (IdP). After
a successful login of a user, the IdP issues security to-
kens on demand. These tokens are used to authenticate
to Relying Parties (RP).
A simpliﬁed Single Sign-On scenario is depicted in
Figure 1. In this setting, a user logged-in by the IdP ﬁrst
visits the desired RP (1). The RP issues a token request
(2). This token is sent to the user (3) who forwards it
to the IdP (4). The IdP issues a token response for the
user including several claims (e.g. his access rights or
expiration time). In order to protect the authenticity and
integrity of the claims, the token is signed (5). Subse-
quently, the token is sent to the user (6), who forwards it
to the RP (7). The RP validates the signature and after-
wards grants access to the protected service or resource,
if the user is authorized (8). This access control decision
is based on the claims in the validated token.
SECURING WEB SERVICES WITH SAML. Another
typical application scenario is the use of SAML together
with WS-Security [29] in SOAP [21] to provide authen-
tication and authorization mechanisms to Web Services.
SAML assertions are included as security tokens in the
Security header.
SAML PROVIDERS AND FRAMEWORKS.
The
evaluation presented in this paper was made through-
out the last 18 months and includes prominent and well-
used SAML frameworks, which are summarized in Ta-
ble 1. Our analysis included the IBM hardware appliance
ClientRelying Party(RP)Identity Provider (IdP)45SAML ResponseTokenIssuing andSigningToken Redirect6Token Response7Token Redirect8Signature    validationToken  evaluationUser   authorization[SSL/TLS]3Token Request1LoginRequest[SSL/TLS]2SAML RequestTokenIssuingFramework/Provider
Apache Axis 2
Guanxi
Higgins 1.x
IBM XS40
JOSSO
WIF
OIOSAML
OpenAM
OneLogin
OpenAthens
OpenSAML
Salesforce
SimpleSAMLphp
WSO2
Language
Java
Java
Java
XSLT
Java
.NET
Java, .NET
Java
Java, PHP, Ruby, Python
Java, C++
Java, C++
Type
WS
Web SSO
Web SSO
WS
Web SSO
Web SSO
Web SSO
Web SSO
Web SSO
Web SSO
Web SSO
Web SSO —
Web SSO
Web SSO
PHP
Java
Reference
http://axis.apache.org
http://guanxi.sourceforge.net
www.eclipse.org/higgins
www.ibm.com
www.josso.org
http://msdn.microsoft.com
http://www.oiosaml.info
http://forgerock.com/openam.html
www.onelogin.com
www.openathens.net
http://opensaml.org
www.salesforce.com
http://simplesamlphp.org
www.wso2.com
Application1
WSO2 Web Services
Sakai Project (www.sakaiproject.org)
Identity project
Enterprise XML Security Gateway
Motorola, NEC, Redhat 2
Microsoft Sharepoint 2010
Danish eGovernment (e.g. www.virk.dk)
Enterprise-Class Open Source SSO
Joomla, Wordpress, SugarCRM, Drupal
UK Federation (www.eduserv.org.uk)
Shibboleth, SuisseID
Cloud Computing and CRM
Danish e-ID Federation (www.wayf.dk)
WSO2 products (Carbon, ESB, . . . )
Table 1: Analyzed SAML frameworks and providers: The columns give information about type (Web Service or
Browser-based SSO), programming language (if known), website, and application in concrete products or frameworks.
XS40, which is applied as an XML Security Gateway.
Other examples of closed source frameworks are the
Windows Identity Foundation (WIF) used in Microsoft
Sharepoint and the Salesforce cloud platform. Important
open source frameworks include OpenSAML, OpenAM,
OIOSAML, OneLogin, and Apache Axis 2. OpenSAML
is for example used in Shibboleth and the SDK of the
electronic identity card from Switzerland (SuisseID).
OpenAM, formerly known as SUN OpenSSO, is an iden-
tity and access management middleware, used in major
enterprises. The OIOSAML framework is e.g. used in
Danish public sector federations (e.g. eGovernment busi-
ness and citizen portals). The OneLogin Toolkits can be
used to integrate SAML into various popular open source
web applications like Wordpress, Joomla, Drupal, and
SugarCRM. Moreover, these Toolkits are used by many
OneLogin customers (e.g. Zendesk, SAManage, Knowl-
edgeTree, and Yammer) to enable SAML-based SSO.
Apache Axis2 is the standard framework for generating
and deploying Web Service applications.
3 Technical Foundations
In this section we brieﬂy introduce the SAML standard
and XML Signature wrapping attacks. Additionally, for
readers unfamiliar with the relevant W3C standards, we
present XML Signature [14] and XML Schema [36].
3.1 XML Signature
The XML Signature standard [14] deﬁnes the syntax and
processing rules for creating, representing, and verifying
XML-based digital signatures.
It is possible to sign a
whole XML tree or only speciﬁc elements. One XML
Signature can cover several local or global resources.
A signature placed within the signed content is called
an enveloped signature.
If the signature surrounds the
1In some of the listed applications and frameworks SAML-based
SSO is optional and has to be explicitly activated.
2Stated on JOSSO’s website.
(
()?
)+
()?
()*
Figure 2: XML Signature data structure (”?”: zero or one
occurrence; ”+”: one or more occurrences; ”*”: zero or
more occurrences).
signed parts, it is an enveloping signature. A detached
signature is neither inside nor a parent of the signed data.
An XML Signature is represented by the Signature
element. Figure 2 provides its basic structure. XML
Signatures are two-pass signatures:
the hash value of
the resource (DigestValue) along with the used hash
algorithm (DigestMethod) and the URI reference to
the resource are stored in a Reference element. Ad-
ditionally, the Transforms element speciﬁes the pro-
cessing steps which are applied prior to digesting of
the resource. Each signed resource is represented by
a Reference element
in the SignedInfo element.
Therefore, SignedInfo is a collection of hash val-
ues and URIs. The SignedInfo itself is protected
by the signature. The CanonicalizationMethod and
the SignatureMethod element specify the algorithms
used for canonicalization and signature creation, and are
also embedded in SignedInfo. The Base64-encoded
value of the computed signature is deposited in the
SignatureValue element. In addition, the KeyInfo el-
ement facilitates the transport of signature relevant key
management information. The Object is an optional el-