in 1-RTT corresponds to a unique message sent by a
peer over a matching session (notably with the same psk)
unless psk or kt are compromised during the session.
• PSK-DHE 1-RTT Unique Channel Identiﬁer The val-
, ems, and H(log 7) generated in a DHE or PSK-
ues psk
DHE session are all unique channel identiﬁers.
Notably, data sent over PSK-DHE is forward secret even
if the server’s long term ticket encryption key kt is compro-
mised after the session. In contrast, pure PSK handshakes
do not provide this forward secrecy.
The authentication guarantee requires that the client and
server must agree on the value of the PSK psk, and if this
PSK was established in a prior session, then the unique
channel identiﬁer property says that the client and server
must transitively agree on the prior session as well. An
earlier analysis of Draft-10 in Tamarin [35] found a violation
of the authentication goal because the 1-RTT client signature
in Draft-10 did not include the server’s Finished or any
other value that was bound to the PSK. This ﬂaw was ﬁxed
in Draft-11 and hence we are able to prove authentication
for Draft-18.
Verifying PSK-based 0-RTT. We extend our model with
the 0-RTT exchange and verify that m0 is authentic and
secret. The strongest queries that ProVerif can prove are the
(cid:2)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:28:27 UTC from IEEE Xplore.  Restrictions apply. 
following:
• PSK-based 0-RTT (Forward) Secrecy A message m0
sent from C to S in a 0-RTT ﬂight is secret as long as
psk and kt are never compromised.
• PSK-based 0-RTT Authentication A message m0 re-
ceived by S from C in a 0-RTT ﬂight corresponds to some
message sent by C with a matching ClientHello and
matching psk, unless the psk or kt are compromised.
In other words, PSK-based 0-RTT data is not forward se-
cret and is vulnerable to replay attacks. As can be expected,
it provides a symmetric authentication property: since both
C and S know the psk, if either of them is compromised,
the attacker can forge 0-RTT messages.
An Attack on 0-RTT Client Authentication. Up to Draft-
12,
the client could authenticate its 0-RTT data with a
client certiﬁcate in addition to the PSK. This served the
following use case: suppose a client and server establish an
(cid:2)
) where the client
initial 1-RTT session (that outputs psk
is unauthenticated. Some time later,
the server asks the
client to authenticate itself, and so they perform a PSK-
) with client authentication. The
DHE handshake (using psk
use of psk
ensures continuity between the two sessions. In
the new session, the client wants to start sending messages
immediately, and so it would like to use client authentication
in 0-RTT.
(cid:2)
(cid:2)
To be consistent with Draft-12, suppose we remove the
outer binder MAC (using kb) on the ClientHello in
Figure 4, and we allow client authentication in 0-RTT.
Then, if we model this protocol in ProVerif and ask the 0-
RTT authentication query again, ProVerif ﬁnds a credential
forwarding attack, explained next.
(cid:2)
Suppose a client C shares psk with a malicious server M,
with an honest server S. If C
and M shares a different psk
sends an authenticated 0-RTT ﬂight (certiﬁcate, signature,
data m0) to M, M can decrypt this ﬂight using psk, re-
encrypt it using psk
, and forward the ﬂight to S. S will
accept the authenticated data m0 from C as intended for
itself, whereas C intended to send it only to M. In many
HTTPS scenarios, as discussed in §IV, M may be able to
control the contents of this data, so this attack allows M to
send arbitrary requests authenticated by C to S.
(cid:2)
This attack was not discovered in previous analyses of
TLS 1.3 since many of them did not consider client au-
thentication; the prior Tamarin analysis [35] found a similar
attack on 1-RTT client authentication but did not consider
0-RTT client authentication. The attacks described here and
in [35] belong to a general class of compound authentica-
tion vulnerabilities that appear in protocols that compose
multiple authentication credentials [17]. In this case, the
composition of interest is between PSK and certiﬁcate-based
authentication. We found a similar attack on 1-RTT server
authentication in pure PSK handshakes.
to our
In response
attack, Draft-13 included a
resumption context value derived from the psk in the
handshake hash, to ensure that the client’s signature over
the hash cannot be forwarded on another connection (with
). This countermeasure has since evolved to
a different psk
(cid:2)
the MAC-based design showed in Figure 4, which has now
been veriﬁed in this paper.
The Impact of Replay on 0-RTT and 0.5-RTT. It is
now widely accepted that asynchronous messaging protocols
like 0-RTT cannot be easily protected from replay, since
the recipient has no chance to provide a random nonce
that can ensure freshness. QUIC attempted to standardize a
replay-prevention mechanism but it has since abandoned this
mechanism, since it cannot prevent attackers from forcing
the client to resend 0-RTT data over 1-RTT [66].
Instead of preventing replays, TLS 1.3 Draft-18 advises
applications that they should only send non-forward-secret
and idempotent data over 0-RTT. This recommendation is
hard to systematically enforce in ﬂexible protocols like
HTTPS, where all requests have secret cookies attached, and
even GET requests routinely change state.
We argue that replays offer an important attack vector
for 0-RTT and 0.5-RTT data. If the client authenticates
its 0-RTT ﬂight,
then an attacker can replay the entire
ﬂight to mount authenticated replay attacks. Suppose the
(client-authenticated) 0-RTT data asks the server to send
a client’s bank statement, and the server sends this data
in a 0.5-RTT response. An attacker who observes the 0-
RTT request once, can replay it any number of times to the
server from anywhere in the world and the server will send it
the user’s (encrypted) bank statement. Although the attacker
cannot complete the 1-RTT handshake or read this 0.5-RTT
response, it may be able to learn a lot from this exchange,
such as the length of the bank statement, and whether the
client is logged in.
In response to these concerns, client authentication has
now been removed from 0-RTT. However, we note that
similar replay attacks apply to 0-RTT data that contains
an authentication cookie or OAuth token. We highly rec-
ommend that TLS 1.3 servers should implement a replay
cache (based on the client nonce nC and the ticket age) to
detect and reject replayed 0-RTT data. This is less practical
in server farms, where time-based replay mitigation may be
the only alternative.
VI. COMPUTATIONAL ANALYSIS OF TLS 1.3 DRAFT-18
Our ProVerif analysis of TLS 1.3 Draft-18 identiﬁes the
necessary conditions under which the symbolic security
guarantees of the protocol hold. We now use the tool Cryp-
toVerif [24] to see whether these conditions are sufﬁcient
to obtain cryptographic security proofs for the protocol in a
more precise computational model. In particular, under the
assumption that the algorithms used in TLS 1.3 Draft-18
satisfy certain strong cryptographic assumptions, we prove
that the protocol meets our security goals.
Proofs in the computational model are hard to mechanize,
and CryptoVerif offers less ﬂexibility and automation than
ProVerif. To obtain manageable proofs, we focus only on
TLS 1.3 (we do not consider TLS 1.2) and we ignore down-
grade attacks. We split the protocol into three pieces and
prove them separately using CryptoVerif, before composing
them manually to obtain a proof for the full protocol.
493
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:28:27 UTC from IEEE Xplore.  Restrictions apply. 
A. Cryptographic Assumptions
We make the following assumptions about the crypto-
graphic algorithms supported by TLS 1.3 clients and servers.
Difﬁe-Hellman. We assume that the Difﬁe-Hellman groups
used in TLS 1.3 satisfy the gap Difﬁe-Hellman (GDH)
assumption [61]. This assumption means that given g, ga,
and gb for random a, b,
the adversary has a negligible
probability to compute gab, even when the adversary has
access to a decisional Difﬁe-Hellman oracle, which tells him
given G, X, Y, Z whether there exist x, y such that X = Gx,
Y = Gy, and Z = Gxy.
In our proof, we require GDH rather than the weaker
decisional Difﬁe-Hellman (DDH) assumption, in order to
prove secrecy of keys on the server side as soon as the server
sends its Finished message: at this point, if the adversary
controls a certiﬁcate accepted by the client, he can send its
(cid:2) to the client to learn information on gx(cid:2)y(cid:2)
own key share y
,
and that would be forbidden under DDH. We also require
that xy = x
implies
(cid:2), which holds when the considered Difﬁe-Hellman
y = y
group is of prime order. This is true for all groups currently
speciﬁed in TLS 1.3, and our proof requires it for all groups
included in the future.
(cid:2) and that xy = xy(cid:2)
(cid:2)y implies x = x
We also assume that all Difﬁe-Hellman group elements
have a binary representation different from 0len H(). This
assumption simpliﬁes the proof by avoiding a possible con-
fusion between handshakes with and without Difﬁe-Hellman
exchange. Curve25519 does have a 32-byte zero element,
but excluding zero Difﬁe-Hellman shared values is already
recommended to avoid points of small order [54].
assume
Finally, we
all Difﬁe-Hellman group
elements have a binary representation different
from
len H()(cid:6)“TLS 1.3, ”(cid:6)l(cid:6)h(cid:6)0x01. This helps ease our proofs
by avoiding a collision between hkdf-extract(es, e) and
derive-secret(es, pbk, “”) or derive-secret(es, etsc, log 1).
This assumption holds with the currently speciﬁed groups
and labels, since group elements have a different length than
the bitstring above. The technical problem identiﬁed by our
assumption was independently discovered and discussed on
the TLS mailing list [67], and has led to a change in Draft-19
which will make this assumption unnecessary.
Signatures. We assume that the function sign is unforgeable
under chosen-message attacks (UF-CMA) [43]. This means
that an adversary with access to a signature oracle has a
negligible probability of forging a signature for a message
not signed by the signature oracle. Only the oracle has access
to the signing key; the adversary has the public key.
Hash Functions. We assume that the function H is collision-
resistant [36]: the adversary has a negligible probability of
ﬁnding two different messages with the same hash.
HMAC. We need two assumptions on HMAC-H:
We require that the functions x (cid:3)→ HMAC-H
0lenH() (x)
and x (cid:3)→ HMAC-H
kdf 0 (x) are independent random oracles,
in order to justify the use of HMAC-H as a randomness
extractor in the HKDF construct. This assumption can itself
be justiﬁed as follows. Assuming that the compression func-
that
tion underlying the hash function is a random oracle, The-
orem 4.4 in [38] shows that HMAC is indifferentiable [33]
from a random oracle, provided the MAC keys are less than
the block size of the hash function minus one, which is true
for HMAC-SHA-256, HMAC-SHA-384, and HMAC-SHA-
512. It is then easy to show that x (cid:3)→ HMAC-H
0lenH() (x) and
x (cid:3)→ HMAC-H
kdf 0 (x) are indifferentiable from independent
random oracles in this case.
We assume that HMAC-H is a pseudo-random function
(PRF) [9], that is, HMAC-H is indistinguishable from a
random function provided its key is random and used only in
HMAC-H, when the key is different from 0len H() and kdf0.
We avoid these two keys to avoid confusion with the two
random oracles above. Since keys are chosen randomly with
uniform probability from a set key (with cardinality |key|),
2|key| is
the only consequence of avoiding these keys is that
added to the probability of breaking the PRF assumption.
Authenticated Encryption. The authenticated encryption
scheme is IND-CPA (indistinguishable under chosen plain-
text attacks) and INT-CTXT (ciphertext integrity) [11], pro-
vided the same nonce is never used twice with the same
key. IND-CPA means that the adversary has a negligible
probability of distinguishing encryptions of two distinct
messages of the same length that it has chosen. INT-CTXT
means that an adversary with access to encryption and
decryption oracles has a negligible probability of forging
a ciphertext that decrypts successfully and has not been
returned by the encryption oracle.
B. Verifying 1-RTT Handshakes without Pre-Shared Keys
To prove the security of TLS 1.3 in CryptoVerif, we ﬁrst
establish some lemmas about the primitives, as detailed in
Appendix A. Then, we split the protocol into three parts,
as shown in Figure 5, and verify them in sequence, before
composing them by hand into a proof for the full protocol.
This modular hybrid approach allows us to have proofs of
manageable complexity, and to obtain results even when
keys are reused many times, such as when several PSK-
based resumptions are performed, which would otherwise
be out of scope of CryptoVerif.
We ﬁrst consider the initial 1-RTT handshake shown in
Figure 2, until the new client and server session boxes. We
model a honest client and a honest server, which are willing
to interact with each other, but also with dishonest clients
and servers included in the adversary. We do not consider
details of the negotiation (or the RetryRequest message).
We give the handshake keys (kh
s ) to the adversary,
and let it encrypt and decrypt the handshake messages, so
our security proof does not rely on the encryption of the
handshake.
c and kh
We assume that the server is always authenticated and
consider both the handshake with and without client au-
thentication. The honest client and server may be com-
promised at any time: the secret key of the compromised
participant is then sent to the adversary, and the compromise
is recorded by deﬁning a variable corruptedClient or
corruptedServer.
494
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:28:27 UTC from IEEE Xplore.  Restrictions apply. 
(cid:2)
(cid:2)
The outputs of this protocol are the application trafﬁc
secrets ats c and ats s (the derivation of the keys kc and
ks from these secrets is left for the record protocol), the
exporter master secret ems, and the resumption master secret
(later used as pre-shared key). CryptoVerif proves the
psk
following properties:
• Key Authentication: If the client terminates a session
with the server and the server is not compromised, then
the server has accepted a session with the client, and
they share the same parameters: the keys ats c, ats s, and
ems and all messages sent in the protocol until the server
Finished message. (We can make no claim on the client
Finished message because it has not been received by
because it depends
the server at this point, nor on psk
on the client Finished message.)
In our CryptoVerif model, we formalize this property by
adding an event ClientTerm(. . .) in the client, executed
when the client terminates a session (that is, sends his
Finished message) with an honest server (that
is,
corruptedServer is not deﬁned). We similarly deﬁne
an event ServerAccept(. . .) at the server, executed when
the server accepts a session (that is, sends his Finished
message). The arguments of these events include the
session keys and all the messages sent in the protocol
until the server Finished message. We then ask Cryp-
toVerif or prove an authentication query that states that,
with overwhelming probability, each execution of event
ClientTerm corresponds to a distinct execution of event
ServerAccept with the same arguments.
Conversely,
if a server terminates a session with an