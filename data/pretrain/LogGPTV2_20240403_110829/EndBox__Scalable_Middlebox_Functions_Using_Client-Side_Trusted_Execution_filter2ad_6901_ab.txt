The use of SGX involves some restrictions. Since enclave
code must be isolated from the untrusted environment, it is
not possible to make system calls to the OS. Prior work has
addressed this issue by embedding system support inside the
enclave [23]–[25] while increasing the TCB size. The EPC
size in the current version of SGX is limited to 128 MB per
machine. It is possible to create larger enclaves by swapping
EPC pages to regular memory, but this results in a substantial
performance penalty [23], [26]. While SGX is vulnerable to
side-channel attacks [27]–[29], research exists on mitigation
techniques [30], [31].
D. Threat model
Client machines are typically untrusted, as they elude from
the control of network owners. In companies, not all enter-
prise machines are managed by a central IT department, i.e.
developers or administrators typically possess administrative
rights for their own and others’ machines. In the case of the
ISP scenario, the client machines of customers are and should
be totally out of control of the provider. Also, client machines
388
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:31:18 UTC from IEEE Xplore.  Restrictions apply. 
may lack essential security patches or be misconﬁgured, and,
thus, are vulnerable to attacks which could circumvent any
security critical middlebox functions.
We therefore assume that client machines are not trustworthy,
and an adversary may have full control over a client machine,
including its operating system, hypervisor, and hardware. They
can make it send any trafﬁc, and they have access to inbound
trafﬁc, i.e. they can drop or modify packet contents. In addition,
they have full control over the OS networking stack, and can
bypass or modify any of its functionality. With physical access
to the client machines, the adversary can read from or write
to any memory address.
The adversary can also mount DoS attacks against the
enclave, i.e. not starting or entering it. However, we ignore
distributed denial-of-service (DDoS) attacks on the server
infrastructure: while malicious clients can collude and send
spurious trafﬁc to servers, existing mitigation approaches can
be applied [32].
In line with typical assumptions about managed networks,
we consider all servers to be under central administrative
control and thus trustworthy. Client machines are not allowed
unrestricted access to the network because they can be subject
to the above attacks and act maliciously.
In contrast, we assume that users put trust in the provider
of middlebox functions (e.g. the company or the ISP). Note
that this assumption is also valid for traditional approaches
involving middleboxes. However, this assumption could be
weakened or removed by enabling users to enforce policies
during runtime on SGX enclaves [33].
III. DESIGN
We describe ENDBOX, a system that securely executes mid-
dleboxes at client machines. In accordance with a deployment
scenario as part of untrusted clients (see §II-D), ENDBOX must
satisfy the following requirements:
R1: Flexibility. ENDBOX should support ﬂexible development
for tailored middlebox functions for a wide range of use cases.
R2: Enforcement. ENDBOX should ensure that all
trafﬁc
between the client and the managed network is processed
by middlebox functions.
R3: Integrity and privacy. ENDBOX should protect the integrity
of middlebox functions and the privacy of client trafﬁc.
R4: Manageability. Despite middleboxes being distributed, it
should remain easy for network administrators to rapidly and
seamlessly manage middlebox functions, such as updating their
conﬁgurations.
R5: Low overhead and good scalability. To be practical,
ENDBOX should introduce only a low performance overhead
compared to existing solutions and scale linearly with the
number of clients, in order to support ﬂuctuating client numbers
and prevent idle middleboxes at the same time.
A. ENDBOX in a nutshell
Fig. 2 details the deployment of ENDBOX for our two repre-
sentative scenarios introduced in §II-A. In both scenarios, a
number of ENDBOX clients connect to an ENDBOX server.
The ENDBOX client allows applications on client machines
Client machine
Applications
EndBox Client
TEE
W
G
W
F
/
Enterprise
Network
Apps
EndBox
conﬁgures
Client
TEE
Admin
EndBox Server
(a) enterprise network scenario
k
r
o
w
t
e
N
e
m
o
H
Client machine
Applications
EndBox Client
TEE
W
G
W
F
/
Home Network
FW/GW
ISP
network
EndBox 
Server
/
F
W
G
W
H
o
m
e
N
e
t
w
o
r
k
(b) ISP network scenario
Fig. 2: ENDBOX system deployment of two scenarios (a) and
(b), FW/GW is ﬁrewall/gateway
to access the managed network. Clients execute middlebox
functions in a TEE (SGX enclaves in our prototype, denoted
in green throughout the paper). The TEE guards the secure
endpoint of the VPN communication and secures the necessary
encryption keys. The keys are injected inside the TEE as
part of a secure bootstrapping process, so neither the user
of the machine nor software outside the TEE are granted
access to them (see §III-C). Packet en- and decryption, as
well as arbitrary processing, happen within the TEE. This
enables the implementation of a wide range of middlebox
functions (R1), including caching, malware detection, licensing
controls, and functions such as compression that all cannot
operate on encrypted packets (see §III-D). Moreover, this
enables organisations to adapt middlebox functions executed
with ENDBOX to their speciﬁc use case.
In the case of the enterprise network scenario (Fig. 2a),
clients are allowed to be inside the network or to connect
remotely (e.g. employees in home ofﬁce). In contrast, in the
ISP network scenario (Fig. 2b), clients are private machines
that connect to the ISP network.
In both scenarios, the use of ENDBOX is enforced when
accessing a managed network because the ENDBOX server
is the only entry point: it only accepts trafﬁc encrypted with
the key owned by a correct ENDBOX client. This ensures that
all trafﬁc is processed by ENDBOX and prevents users from
bypassing the middlebox functionality, because bypassed trafﬁc
is either blocked or encrypted, thus not readable (R2).
In addition, ENDBOX uses the SGX attestation support to
guarantee that (i) the enclave is initialised with the correct code
and data; and (ii) the encryption and decryption of network
packets can only occur within the enclave (R3).
The ENDBOX server provides a management
interface
that enables administrators to deploy middlebox conﬁguration
changes (R4), e.g. to issue updates for middlebox functions. The
updates are disseminated to all (connected and reconnecting)
clients, which are responsible for fetching and applying the
conﬁguration changes. After a conﬁgurable grace period, the
389
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:31:18 UTC from IEEE Xplore.  Restrictions apply. 
Client Machine
Applications
k
c
i
l
C
l
e
v
a
c
n
E
EndBox Client
IDPS, Firewall, …
2
3
Cryptography
4
1
Fragmentation, Encapsulation
Network Stack
Virtual Network 
Interface
Network 
Interface
Fig. 3: Architecture of the ENDBOX client
U
s
e
r
S
p
a
c
e
K
e
r
n
e
l
S
p
a
c
e
update is enforced by accepting only trafﬁc from ENDBOX
clients with the latest middlebox conﬁguration (see §III-E)
ENDBOX is designed to induce a low performance overhead,
and scale with the number of connected clients (R5). This
is achieved by (i) reducing the number of enclave mode
transitions; and (ii) by moving middlebox functions to clients,
thus removing load from centralised middleboxes as part of
the managed network.
B. Architecture of the ENDBOX client
The ENDBOX client architecture shown in Fig. 3 consists
of two components: a VPN client and a set of middlebox
functions. The VPN client is based on OpenVPN [8] and
is partitioned; security-sensitive parts (such as cryptographic
functions and encryption keys) are moved into the enclave to
prevent an attacker from gaining knowledge about the secret.
Other parts that are not important for security (such as packet
encapsulation and fragmentation) are executed outside of the
enclave. ENDBOX implements middlebox functions using the
Click modular router [9], which can be used to implement a
diverse set of middlebox functions (R1). ENDBOX routes all
trafﬁc through middlebox functions: before encrypting egress
or decrypting ingress trafﬁc, OpenVPN hands all packets to
Click for processing.
To ensure that all network trafﬁc is intercepted by ENDBOX
(R2), a client can only connect to the network through the
VPN. The VPN client processes each IP packet individually
in four steps: after the packet is copied inside the enclave 1(cid:2),
it is processed by one or more middlebox functions according
to the system conﬁguration 2(cid:2). Depending on the speciﬁc
function, the packet header or payload may be modiﬁed or the
whole packet marked to be discarded (e.g. due to ﬁrewall or
IDPS rules). After the execution of the middlebox functions,
the packet is either accepted or rejected 3(cid:2). Finally, the packet
is signed and encrypted and then copied outside of the enclave,
where it is passed back to the VPN client running in untrusted
space 4(cid:2) for transmission over the network.
Each packet arriving from the network is processed in the
opposite order: it is ﬁrst copied into the enclave, where its
signature is checked and its content decrypted. It is then
processed by middlebox functions, accepted or discarded, and
ﬁnally copied outside the enclave and passed to the application.
Enclave
7 1
3
2
EndBox
Client
6
Quoting
Enclave
Client Machine
5
Certiﬁcate
Authority
4
Managed
Network
Intel
Attestation
Service
Fig. 4: ENDBOX remote attestation and key management
C. Attestation and key management
To achieve our desired level of security (R3), ENDBOX
leverages the Intel SGX enclave attestation facilities [22]
described in §II-C and. Fig. 4 shows the steps executed to attest
the correctness of the enclave as well as to protect and sign the
VPN keys. ENDBOX’s key management is based on a certiﬁcate
authority (CA) operated by network owners. The public key
of the CA is pre-deployed into enclave binaries during system
compilation to prevent MITM attacks. An asymmetric key pair
is generated in the enclave 1(cid:2), the private key never leaves
the enclave. Next, the VPN client creates a report containing
the public key of the aforementioned key pair and passes it
to the QE to obtain a quote 2(cid:2) (see §II-C). This is forwarded
to the CA 3(cid:2), which relays it to the IAS and receives a
reply 4(cid:2). If that reply is positive and the quote contains a
known measurement, the CA signs the public key, creating
a certiﬁcate 5(cid:2). The certiﬁcate and a symmetric shared key
encrypted with the enclave’s public key are provisioned to the
enclave 6(cid:2). Finally, after checking the received certiﬁcate with
the CA’s public key, the enclave persistently stores the generated
key pair as well as the certiﬁcate using the SGX sealing
feature 7(cid:2). The client can now use that certiﬁcate to connect
to the VPN server. Consequently, an enclave only has to be
attested once and unattested clients cannot establish connections
because of missing certiﬁcates. The symmetric shared key is
used for decrypting conﬁguration ﬁles as described in §III-E.
D. Processing encrypted network trafﬁc
Although half of today’s network trafﬁc is encrypted [10], [11],
many middlebox functions, e.g. for deep packet inspection or
caching, need to access the payload of packets, i.e. cannot
operate on encrypted trafﬁc. This problem became particularly
visible when the Internet Engineering Task Force (IETF)
heavily discussed whether the key exchange in TLS 1.3 should
be degraded to allow network monitoring [34].
There are different state-of-the-art solutions for this problem:
(i) middleboxes performing a MITM attack on users; (ii) apply-
ing modiﬁcations to the TLS protocol to allow middleboxes to
intercept trafﬁc [13], [14]; and (iii) searchable or homomorphic
encryption schemes [15]. These solutions solve the problem, but
have drastic disadvantages: they break end-to-end security, are
incompatible with technologies like HTTP public key pinning
(HPKP), are impractical or are notoriously slow. Therefore,
ENDBOX implements a new approach of decrypting network
trafﬁc. We assume that a client application, such as a web
browser, is linked against a custom untrusted TLS library. This
library forwards all negotiated session keys to the trusted Click
instance, running inside the ENDBOX VPN client. The keys
390
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:31:18 UTC from IEEE Xplore.  Restrictions apply. 
are used to decrypt the packets inside a special Click element.
For our prototype implementation, we modify OpenSSL by
adding a single call to a custom function, which forwards
negotiated keys via the OpenVPN management interface. Using
this approach, ENDBOX can decrypt trafﬁc transparently to
the client. The client neither needs to trust a custom certiﬁcate
authority nor does it see different certiﬁcates than those offered
by the accessed services. Also, we do not have to change the
TLS protocol or rely on special encryption schemes. Note that
transferring the keys to the ENDBOX enclave is not a security
risk for the client: the keys are generated by the untrusted TLS
library and are therefore also stored in untrusted memory.
Our approach to analyse encrypted trafﬁc also works with the
upcoming TLS version 1.3, which today’s middleboxes cannot
handle correctly [35]. Additionally, our solution is applicable
in our targeted scenarios: In an enterprise network, employees
trust their employer to some extent and should refrain from