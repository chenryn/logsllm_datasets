### The Use of SGX and Its Limitations

The use of Intel Software Guard Extensions (SGX) comes with several constraints. Since enclave code must be isolated from the untrusted environment, it cannot make system calls to the operating system. Prior work has addressed this issue by embedding system support inside the enclave [23]–[25], though this increases the Trusted Computing Base (TCB) size. The current version of SGX limits the Enclave Page Cache (EPC) size to 128 MB per machine. While larger enclaves can be created by swapping EPC pages to regular memory, this results in a significant performance penalty [23], [26]. Additionally, SGX is vulnerable to side-channel attacks [27]–[29], although research on mitigation techniques is ongoing [30], [31].

### Threat Model

Client machines are typically untrusted, as they often fall outside the control of network owners. In corporate settings, not all enterprise machines are managed by a central IT department; developers or administrators may have administrative rights over their own and others' machines. In the context of Internet Service Providers (ISPs), client machines should be entirely out of the provider's control. These machines may lack essential security patches or be misconfigured, making them vulnerable to attacks that could bypass any security-critical middlebox functions.

We assume that client machines are not trustworthy, and an adversary may have full control over a client machine, including its operating system, hypervisor, and hardware. This allows the adversary to send any traffic, access inbound traffic, drop or modify packet contents, and fully control the OS networking stack. With physical access, the adversary can read from or write to any memory address. The adversary can also mount Denial-of-Service (DoS) attacks against the enclave, such as preventing it from starting or entering. However, we do not consider distributed DoS (DDoS) attacks on the server infrastructure, as existing mitigation approaches can be applied [32].

In line with typical assumptions about managed networks, we consider all servers to be under central administrative control and thus trustworthy. Client machines are not allowed unrestricted access to the network due to the potential for the above-mentioned attacks and malicious behavior. Conversely, we assume that users trust the provider of middlebox functions (e.g., the company or the ISP). This assumption is also valid for traditional middlebox approaches. However, this trust can be weakened or removed by enabling users to enforce policies during runtime on SGX enclaves [33].

### Design

We present ENDBOX, a system that securely executes middleboxes at client machines. Given the deployment scenario involving untrusted clients (see §II-D), ENDBOX must meet the following requirements:

**R1: Flexibility.** ENDBOX should support flexible development for tailored middlebox functions for a wide range of use cases.

**R2: Enforcement.** ENDBOX should ensure that all traffic between the client and the managed network is processed by middlebox functions.

**R3: Integrity and Privacy.** ENDBOX should protect the integrity of middlebox functions and the privacy of client traffic.

**R4: Manageability.** Despite the distributed nature of middleboxes, it should remain easy for network administrators to manage middlebox functions, such as updating configurations.

**R5: Low Overhead and Good Scalability.** ENDBOX should introduce only a low performance overhead compared to existing solutions and scale linearly with the number of clients to support fluctuating client numbers and prevent idle middleboxes.

### ENDBOX in a Nutshell

Figure 2 illustrates the deployment of ENDBOX for two representative scenarios introduced in §II-A. In both scenarios, multiple ENDBOX clients connect to an ENDBOX server. The ENDBOX client allows applications on client machines to access the managed network. Clients execute middlebox functions in a Trusted Execution Environment (TEE) (SGX enclaves in our prototype, denoted in green throughout the paper). The TEE secures the endpoint of the Virtual Private Network (VPN) communication and the necessary encryption keys. These keys are injected into the TEE during a secure bootstrapping process, ensuring that neither the user nor software outside the TEE can access them (see §III-C). Packet encryption and decryption, as well as arbitrary processing, occur within the TEE. This enables the implementation of a wide range of middlebox functions (R1), including caching, malware detection, licensing controls, and functions like compression that cannot operate on encrypted packets (see §III-D). Moreover, organizations can adapt middlebox functions executed with ENDBOX to their specific use case.

In the enterprise network scenario (Fig. 2a), clients can be inside the network or connect remotely (e.g., employees working from home). In the ISP network scenario (Fig. 2b), clients are private machines that connect to the ISP network.

In both scenarios, ENDBOX usage is enforced when accessing a managed network because the ENDBOX server is the only entry point: it only accepts traffic encrypted with the key owned by a correct ENDBOX client. This ensures that all traffic is processed by ENDBOX and prevents users from bypassing the middlebox functionality, as bypassed traffic is either blocked or unreadable (R2).

Additionally, ENDBOX uses SGX attestation support to guarantee that (i) the enclave is initialized with the correct code and data, and (ii) the encryption and decryption of network packets can only occur within the enclave (R3).

The ENDBOX server provides a management interface that enables administrators to deploy middlebox configuration changes (R4), such as issuing updates for middlebox functions. Updates are disseminated to all connected and reconnecting clients, which are responsible for fetching and applying the configuration changes. After a configurable grace period, the update is enforced by accepting only traffic from ENDBOX clients with the latest middlebox configuration (see §III-E).

ENDBOX is designed to induce a low performance overhead and scale with the number of connected clients (R5). This is achieved by (i) reducing the number of enclave mode transitions and (ii) moving middlebox functions to clients, thereby offloading centralized middleboxes in the managed network.

### Architecture of the ENDBOX Client

The ENDBOX client architecture, shown in Figure 3, consists of two components: a VPN client and a set of middlebox functions. The VPN client is based on OpenVPN [8] and is partitioned, with security-sensitive parts (such as cryptographic functions and encryption keys) moved into the enclave to prevent an attacker from gaining knowledge about the secrets. Other parts that are not critical for security (such as packet encapsulation and fragmentation) are executed outside the enclave. ENDBOX implements middlebox functions using the Click modular router [9], which can be used to implement a diverse set of middlebox functions (R1). ENDBOX routes all traffic through middlebox functions: before encrypting egress or decrypting ingress traffic, OpenVPN hands all packets to Click for processing.

To ensure that all network traffic is intercepted by ENDBOX (R2), a client can only connect to the network through the VPN. The VPN client processes each IP packet individually in four steps: after the packet is copied inside the enclave (1), it is processed by one or more middlebox functions according to the system configuration (2). Depending on the specific function, the packet header or payload may be modified, or the whole packet may be marked for discard (e.g., due to firewall or Intrusion Detection and Prevention System (IDPS) rules). After the execution of the middlebox functions, the packet is either accepted or rejected (3). Finally, the packet is signed and encrypted and then copied outside the enclave, where it is passed back to the VPN client running in untrusted space (4) for transmission over the network.

Each packet arriving from the network is processed in the opposite order: it is first copied into the enclave, where its signature is checked, and its content is decrypted. It is then processed by middlebox functions, accepted or discarded, and finally copied outside the enclave and passed to the application.

### Attestation and Key Management

To achieve the desired level of security (R3), ENDBOX leverages the Intel SGX enclave attestation facilities [22] described in §II-C. Figure 4 shows the steps executed to attest the correctness of the enclave and to protect and sign the VPN keys. ENDBOX’s key management is based on a certificate authority (CA) operated by network owners. The public key of the CA is pre-deployed into enclave binaries during system compilation to prevent Man-in-the-Middle (MITM) attacks. An asymmetric key pair is generated in the enclave (1), with the private key never leaving the enclave. Next, the VPN client creates a report containing the public key of the aforementioned key pair and passes it to the Quoting Enclave (QE) to obtain a quote (2) (see §II-C). This quote is forwarded to the CA (3), which relays it to the Intel Attestation Service (IAS) and receives a reply (4). If the reply is positive and the quote contains a known measurement, the CA signs the public key, creating a certificate (5). The certificate and a symmetric shared key encrypted with the enclave’s public key are provisioned to the enclave (6). Finally, after checking the received certificate with the CA’s public key, the enclave persistently stores the generated key pair and the certificate using the SGX sealing feature (7). The client can now use that certificate to connect to the VPN server. Consequently, an enclave only has to be attested once, and unattested clients cannot establish connections due to missing certificates. The symmetric shared key is used for decrypting configuration files as described in §III-E.

### Processing Encrypted Network Traffic

Although half of today’s network traffic is encrypted [10], [11], many middlebox functions, such as deep packet inspection or caching, need to access the payload of packets, i.e., they cannot operate on encrypted traffic. This problem became particularly visible when the Internet Engineering Task Force (IETF) heavily discussed whether the key exchange in TLS 1.3 should be degraded to allow network monitoring [34].

There are different state-of-the-art solutions for this problem: (i) middleboxes performing a MITM attack on users; (ii) applying modifications to the TLS protocol to allow middleboxes to intercept traffic [13], [14]; and (iii) searchable or homomorphic encryption schemes [15]. These solutions solve the problem but have significant drawbacks: they break end-to-end security, are incompatible with technologies like HTTP Public Key Pinning (HPKP), are impractical, or are notoriously slow. Therefore, ENDBOX implements a new approach for decrypting network traffic. We assume that a client application, such as a web browser, is linked against a custom untrusted TLS library. This library forwards all negotiated session keys to the trusted Click instance, running inside the ENDBOX VPN client. The keys are used to decrypt the packets inside a special Click element. For our prototype implementation, we modify OpenSSL by adding a single call to a custom function, which forwards negotiated keys via the OpenVPN management interface. Using this approach, ENDBOX can decrypt traffic transparently to the client. The client neither needs to trust a custom certificate authority nor sees different certificates than those offered by the accessed services. Also, we do not have to change the TLS protocol or rely on special encryption schemes. Note that transferring the keys to the ENDBOX enclave is not a security risk for the client, as the keys are generated by the untrusted TLS library and are therefore also stored in untrusted memory.

Our approach to analyze encrypted traffic also works with the upcoming TLS version 1.3, which today’s middleboxes cannot handle correctly [35]. Additionally, our solution is applicable in our targeted scenarios: in an enterprise network, employees trust their employer to some extent and should refrain from engaging in activities that compromise the network's security.