```
如果与会者输入了上述命令，那么他就可以体验当时最先进的国际象棋程序，其棋盘布局如下：
```
BR BN BB BQ BK BB BN BR
BP BP BP BP ** BP BP BP
-- ** -- ** -- ** -- **
** -- ** -- BP -- ** --
-- ** -- ** WP ** -- **
** -- ** -- ** -- ** --
WP WP WP WP -- WP WP WP
WR WN WB WQ WK WB WN WR
```
与之不同的是，如果要连接加州大学洛杉矶分校的 IBM System/360 机器，运行 Speakeasy 数值计算环境，与会者需要输入以下命令：
```
@r [LF]                   // 重置 TIP
@t [SP] o [SP] L [LF]     // “传递换行”设置
@i [SP] L [LF]            // “插入换行”设置，即回车时发送换行符。
@L [SP] 65 [LF]           // 连接 65 号主机
tso                       // 连接 IBM 分时可选软件系统
logon [SP] icX [CR]       // 输入用户名，进行登录，“X”可为任意数字
iccc [CR]                 // 输入密码（够安全！）
speakez [CR]              // 启动 Speakeasy
```
输入上述命令后，与会者可以在终端中对矩阵进行乘法、转置以及其他运算，如下所示：
```
:+! a=m*transpose(m);a [CR]
:+! eigenvals(a) [CR]
```
当时，这场演示给许多人都留下了深刻的印象，但原因并不是我们所想的那样，毕竟我们有的只是后见之明。今天的人们总是记不住，在 1972 年，即便身处两个不同的城市，远程登录使用计算机也已经不是一件新鲜事儿了。在那之前的数十年，电传打字机就已经用于与相隔很远的计算机传递信息了。在 ICCC 第一届大会之前，差不多整整五年前，在西雅图的一所高中， 比尔·盖茨   Bill Gates 使用电传打字机，在该市其他地方的 通用电气   General Electric （GE）计算机上运行了他的第一个 BASIC 程序。在当时，登录远程计算机，运行几行命令或者玩一些文字游戏，只不过是家常便饭。因此，虽说上文提到的软件的确很不错，但是即便没有 ARPANET，我刚刚介绍的两个情景勉强也是可以实现的。
当然，ARPANET 一定带来了新的东西。参加本次大会的律师、政治家与经济学家可能被国际象棋游戏与聊天机器人所吸引，但是网络专家们可能对另外两个情景更感兴趣，因为它们将 ARPANET 的作用更好地展示了出来。
在其中一个情景下，MIT  非兼容分时系统   Incompatible Timesharing System （ITS）上运行了一个名为 `NETWRK` 的程序。`NETWRK` 命令下有若干个子命令，输入这些子命令就能得到 ARPANET 各方面的运行状态。`SURVEY` 子命令可以列出 ARPANET 上哪些主机正在运行和可用（它们都在一个列表中）；`SUMMARY.OF.SURVEY` 子命令汇总了过去 `SURVEY` 子命令过去的运行结果，得出每台主机的“正常运行比率”，以及每台主机响应消息的平均时间。`SUMMARY.OF.SURVEY` 子命令以表格的形式输出结果，如下所示：
```
--HOST--  -#-  -%-UP-  -RESP-
UCLA-NMC  001  097%    00.80
SRI-ARC   002  068%    01.23
UCSB-75   003  059%    00.63
...
```
可以看到，主机编号的占位不超过三个数字（哈！）。其他 `NETWRK` 子命令能够查看较长时间内查询结果的概要，或者检查单个主机查询结果的日志。
第二个情景用到了斯坦福大学开发的一款软件 —— SRI-ARC 联机系统。这款软件功能齐全，非常优秀。美国发明家 道格拉斯·恩格尔巴特   Douglas Engelbart 在 “ 所有演示之母   Mother of All Demos ” 上演示的正是 SRI-ARC 联机系统。这款软件可以在加州大学圣芭芭拉分校的主机上运行本质上属于文件托管的服务。使用华盛顿希尔顿酒店的终端，用户可以将斯坦福大学主机上创建的文件复制到加州大学圣芭芭拉分校的主机上。操作也很简单，只需执行 `copy` 命令，然后回答计算机的下列问题：
> 
> 在下方的代码块中，`[ESC]`、`[SP]` 与 `[CR]` 分别代表退出、空格与回车键；圆括号中的文字是计算机打印出的提示信息；第三行中的退出键用于自动补全文件名。此处复制的文件是 `sample.txt;1`，其中文件名末尾的数字 1 代表文件的版本号，`` 表示文件路径。这种文件名是 TENEX 操作系统上面的惯用写法。   [11] 
> 
> 
> 
```
@copy
(TO/FROM UCSB) to
(FILE) sample [ESC] .TXT;1 [CR]
(CREATE/REPLACE) create
```
这两个情景看起来好像和最初提及的两个情景没有太大区别，但是此二者却意义非凡。因为它们证明了，在 ARPANET 上面，不仅人们可以与计算机进行交流，计算机与计算机也可以 *相互* 交流。MIT 主机上的 `SURVEY` 命令的结果并非由人类定期登录并检查每台机器的运行状态收集而来，而是由一款能在网络上与其他机器进行交流的软件收集得到的。同样的道理，在斯坦福大学与加州大学圣芭芭拉分校之间传输文件的情景下，也没有人守在两所大学的终端旁边，华盛顿特区的终端用户仅仅使用了一款软件，就能让其他两地的计算机相互对话。更重要的是，这一点无关乎你使用的是宴会厅里的哪一台电脑，因为只要输入同样的命令序列，就能在任意一台电脑上浏览 MIT 的网络监视数据，或者在加州大学圣芭芭拉分校的计算机上储存文件。
这才是 ARPANET 的全新之处。本次国际计算机通信会议演示的不仅仅是人与远程电脑之间的交互，也不仅仅是远程输入输出的操作，更是一个软件与其他软件之间的远程通讯，这一点才是史无前例的。
为什么这一点才是最重要的，而不是地图上画着的那些贯穿整个美国、实际连接起来的电线呢（这些线是租赁的电话线，而且它们以前就在那了！）？要知道，早在 1966 年 ARPANET 项目启动之前，美国国防部的高级研究计划署（ARPA）打造了一间终端室，里面有三台终端。三台终端分别连接着位于 MIT、加州大学伯克利分校以及圣塔莫尼卡三地的计算机    [12] 。对于 ARPA 的工作人员来说，即便他们身处华盛顿特区，使用这三台计算机也非常方便。不过，这其中也有不便之处：工作人员必须购买和维护来自三家不同制造商的终端，牢记三种不同的登录步骤，熟悉三种不同的计算环境。虽然这三台终端机可能就放在一起，但是它们只是电线另一端主机系统的延申，而且操作也和那些计算机一样各不相同。所以说，在 ARPANET 项目诞生之前，远程连接计算机进行通讯就已经实现了，但问题是不同的计算系统阻碍了通讯朝着更加先进复杂的方向发展。
### 集合起来，就在此刻