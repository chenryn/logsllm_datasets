title:Tracer: enforcing mandatory access control in commodity OS with
the support of light-weight intrusion detection and tracing
author:Zhiyong Shan and
Xin Wang and
Tzi-cker Chiueh
Tracer: Enforcing Mandatory Access Control in Commodity OS 
with the Support of Light-Weight Intrusion Detection and Tracing 
Zhiyong Shan† 
PI:EMAIL 
Xin Wang‡ 
PI:EMAIL 
Tzi-cker Chiueh‡* 
PI:EMAIL 
†Key Laboratory of Data Engineering and Knowledge Engineering (Renmin University of China), MOE 
‡Stony Brook University 
*Industrial Technology Research Institute 
ABSTRACT 
Enforcing  a  practical  Mandatory  Access  Control  (MAC)  in  a 
commercial  operating  system  to  tackle  malware  problem  is  a 
grand  challenge  but  also  a  promising  approach.  The  firmest 
barriers  to  apply  MAC  to  defeat  malware  programs  are  the 
incompatible  and  unusable  problems  in  existing  MAC  systems. 
To  address  these  issues,  we  start  our  work  by  analyzing  the 
technical  details  of  2,600  malware  samples  one  by  one  and 
performing  experiments  over  two  types  of  MAC  enforced 
operating systems. Based on the preliminary studies, we design a 
novel MAC model incorporating intrusion detection and tracing 
in  a  commercial  operating  system,  named  Tracer,  in  order  to 
disable  malware  on  hosts  while  offering  good  compatibility  to 
existing  software  and  good  usability  to  common  users  who  are 
not  system  experts.  The  model  conceptually  consists  of  three 
actions: detecting, tracing and restricting suspected intruders. One 
novelty  is  that  it  leverages  light-weight  intrusion  detection  and 
tracing techniques to automate security label configuration that is 
widely  acknowledged  as  a  tough  issue  when  applying  a  MAC 
system  in  practice.  The  other  is  that,  rather  than  restricting 
information  flow  as  a  traditional  MAC  does,  it  traces  intruders 
and  restricts  only  their  critical  malware  behaviors,  where 
intruders  represent  processes  and  executables  that  are  potential 
agents of a remote attacker. Our prototyping and experiments on 
Windows  show  that  Tracer  can  effectively  defeat  all  malware 
samples tested via blocking malware behaviors while not causing 
a significant compatibility problem. 
Categories and Subject Descriptors 
D.4.6  [Operating  System]:  Security  and  Protection—Invasive 
software 
General Terms 
Security 
Keywords 
Access  Control;  Operating  System;  Compatibility;  Usability; 
Malware; Intrusion Detection; 
1.  INTRODUCTION 
Malicious software (i.e., Malware) has resulted in one of the 
Permission to make digital or hard copies of all or part of this work for 
personal or classroom use is granted without fee provided that copies are 
not  made  or  distributed  for  profit  or  commercial  advantage  and  that 
copies  bear  this  notice  and  the  full  citation  on  the  first  page.  To  copy 
otherwise,  to  republish,  to  post  on  servers  or  to  redistribute  to  lists, 
requires prior specific permission and/or a fee. 
ASIACCS '11, March 22–24, 2011, Hong Kong, China. 
Copyright 2011 ACM 978-1-4503-0564-8/11/03…$10.00. 
most  severe  computer  security  problems  today.  A  network  of 
hosts  which  are  compromised  by  malware  and  controlled  by 
attackers can cause a lot of damages to information systems. As a 
useful  malware  defense  technology,  Mandatory  Access  Control 
(MAC) works without relying on malware signatures and blocks 
malware behaviors before they cause security damage. Even if an 
intruder manages to breach other layers of defense, MAC is able 
to  act  as  the  last  shelter  to  prevent  the  entire  host  from  being 
compromised.  However,  as  widely  accepted  [2][3][5],  existing 
MAC  mechanisms  built  in  commercial  operating  systems  (OS) 
often  suffer  from  two  problems  which  make  general  users 
reluctant to assume them. One problem is that a built-in MAC is 
incompatible with a lot of application software and thus interferes 
with  their  running  [2][3][5],  and  the  other  problem  is  low 
usability, which makes it difficult to configure MAC properly [2]. 
Thus,  enforcing  a  practical  MAC  on  commercial  OS  to  defend 
against malware is a promising but challenging task. 
found 
In order to devise a new form of MAC to defeat malware, 
we  have  performed  two  preliminary  studies.  First,  we  analyzed 
the  technical  details  of  2,600  samples  so  as  to  get  a  deep  and 
overall  view  on  malware  programs.  We  extracted  30  critical 
malware  behaviors  and 
three  common  malware 
characteristics that can guide anti-malware system design. Second, 
we  investigated  the  root  cause  of  incompatibility  and  low 
usability  of  existing  MAC  models  through  experiments  on  two 
types of MAC enforced operating systems. Our observations are 
as follows. The incompatibility problem is introduced because the 
security  labels  of  existing  MACs  are  unable  to  distinguish 
between  malicious  and  benign  entities,  which  causes  a  huge 
number  of  false  positives  (i.e.  treating  benign  operations  as 
malicious) 
from 
performing 
is 
introduced,  because  existing  MACs  are  unable  to  automatically 
label  the  huge  number  of  entities  in  OS  and  thus  require  tough 
configuration work at end users. 
thus  preventing  many  benign  software 
legal  operations; 
low-usability  problem 
the 
a 
specific 
file  with 
With  these  investigation  results,  we  propose  a  novel  MAC 
model, Tracer, which consists of three actions: detection, tracing 
and  restriction.  Each  process  or  executable  has  two  states, 
suspicious  or  benign.  An  executable  in  this  paper  represents  an 
executable 
such 
as .EXE, .COM, .DLL, .SYS, .VBS, .JS, .BAT, or a special type 
of data file that can contain macro codes, say a semi-executable, 
such as .DOC, .PPT, .XLS, and .DOT. The actions of detection 
and  tracing  change  the  state  of  a  process  or  executable  to 
suspicious if it is suspected to be malicious, and the entity marked 
as  suspicious  is  called  a  suspicious  intruder.  The  action  of 
restriction  forbids  a  suspicious  intruder  to  perform  malware 
behaviors  in  order  to  maintain  confidentiality,  integrity  and 
availability of the system, as well as to stop malware propagation. 
extension, 
1. C om m unicate w ith a rem ote hos t(P C )
2. C reate ex ecutable files (P )
3. M odify  regis try  for s tartup(P IA )
4. C opy  its elf(P )
5. O btain pers onal or s y s tem  inform ation(C )
6. Inject into other proces s es (P I)
7. M odify  ex ecutable files (P )
8. C reate or m odify  W indow s  s erv ices (P IA )
9. C hange s ecurity  s ettings (P IA )
10. A dd IE  or E x plorer plug-ins (P )
11. S tart hidden netw ork clients (P )
12. E nd anti-m alw are proces s es  or
s erv ices (A )
13. M odify  s y s tem  configuration files (P I)
14. Log key s trokes  and m ous e clicks (C )
15. C opy  s pecial configuration files (P )
16. C opy  s y s tem  ex ecutable files (P )
17. Unins tall s oftw are(P IA )
18. C opy  ex ecutables  to rem ov able driv es (P )
19. C reate W indow s  hooks (P )
20. Ins tall or m odify  driv ers (P )
21. C hange file tim e(I)
22. C apture s creen s hots (C )
23. R es tart com puter(A )
24. M ake s y s tem /hidden directories (P I)
25. C los e s ecurity  alert w indow s (A )
26. M odify  lay ered s erv ice prov iders (IA )
27. Ins tall s creen s av ers (P )
28. C hange des ktop backgrounds (A )
29. B lock acces s  to s ecurity  w ebs ites (A )
30. A dd data s tream s (P )
0
500
1000
1500
2000
2500
3000
Figure 1. The top 30 Critical malware behaviors
To be precise, once detecting a suspicious process or executable, 
Tracer  labels  it  to  be  suspicious  and  traces  its  descendent  and 
interacted  processes,  as  well  as  the  executables  it  generates. 
Tracer  does  not  restrict  any  operations  of  benign  processes. 
Meanwhile,  it  permits  suspicious  processes  to  run  as  long  as 
possible but only forbids their malware behaviors. 
The  novelty  of  Tracer  is  that,  it  incorporates  light-weight 
intrusion detection and tracing techniques for configuring security 
labels,  i.e.,  labeling  suspicious  OS  entities,  which  is  often  done 
manually. Moreover, rather than restricting information flow as a 
traditional  MAC  does, it traces suspected intruders  and  restricts 
the malware behaviors of suspected intruders, i.e., processes and 
executables  that  are  potential  agents  of  remote  attackers.  These 
novelties  lead  to  two  advantages.  First,  Tracer  is  able  to  better 
identify  potentially  malicious  OS  entities  and  regulate  their 
behaviors,  which  in  turn  significantly  reduces  the  false  positive 
(FP)  rate  which  is  the  root  cause  of  incompatibility  in  existing 
MAC-enforced  systems.  Second,  Tracer  is  able  to  label  OS 
entities automatically to tackle the low usability problem which is 
the other major issue of existing MAC systems [2]. 
We  have  implemented  Tracer  on  Windows  and  have  been 
using  evolving prototypes  of  the  Tracer  system  in  our  lab  for a 
few months. Our experiments on the function of Tracer with a set 
of real-world malware samples demonstrate that it can effectively 
block  malware  behaviors  while  offering  good  compatibility  to 
applications  and  good  usability  to  normal  users.  Moreover, 
another  experiment  shows  that  Tracer  causes  much  fewer  FPs 
than  commercial  anti-malware  tools  and  MIC  (Mandatory 
Integrity Control) which is a MAC mechanism on Windows Vista 
benefit 
[4][16]. The contributions of this paper are as follows: 
1.  We  introduce  Tracer,  a  novel  MAC  mechanism  which 
integrates  intrusion  detection  and  tracing  techniques  to 
disable  malware  on  a  commercial  OS  in  a  compatible  and 
usable manner. 
2.  We  have  implemented  Tracer  model  on  Windows  OS  to 
disable malware timely without need of malware signatures. 
Developing  a  prototype  on  Windows  is  important,  because 
most of the over 236,000 known malware items are designed 
for the attacks in the Windows environment, only about 700 
malware  items  target  for  the  attack  of  various  Unix/Linux 
distributions [12].   
3.  Based on the analysis of 2,600 malware samples, we extract 
30  critical  malware  behaviors  and  summarize  three  useful 
malware 
future 
anti-malware researches.   
characteristics,  which  will 
4.  We  investigate  the  root  reasons  of  incompatibility  and  low 
usability  problems  of  existing  MACs.  Although  not  all  the 
observations  are  brand  new,  we  believe  that  understanding 
these  reasons  more  comprehensively  and  illustrating  them 
through  the  design  of  an  actual  system  are  useful  for  other 
MAC researchers. 
The  rest  of  the  paper  is  organized  as  follows.  Section  2 
introduces  in  details  our  investigation  on  various  behaviors  of 
malware  programs,  and  our  analysis  on  existing  problems  in 
MAC. Section 3 describes Tracer model. Section 4 provides our 
prototype and tests of Tracer on Windows. Lastly, we present the 
related research in Section 5 and conclude the work in Section 6. 
2.  PRELIMINARY STUDIES 
2.1 Malware Investigation 
Malware  contribute  to  most  Internet  security  problems. 
Anti-malware  companies  typically  receive  thousands  of  new 
malware  samples  every  day.  An  analyst  generally  attempts  to 
understand the actions that each sample can perform, determines 
the type and severity of the threat that the sample constitutes, and 
then  forms  detection  signatures  and  creates  removal  procedures. 
Symantec Threat Explorer [6] is such a publicly available database 
which stores the analysis results of thousands of malware samples 
from various sources and is thus valuable to malware researchers. 
To  have  a  thorough  understanding  of  the  philosophies  behind 
malware  design,  we  have  spent  considerable  amount  of  time 
analyzing the behaviors of malware programs. Specifically, since 
2008, we have read, recorded and analyzed the technical details of 
2,600 malware samples of a wide range of formats and varieties, 
such as viruses, worms, backdoors, rootkits, and Trojan horses. As 
taking many samples from the same malware family might make 
the  analysis  results  biased,  we  have  intentionally  not  chosen 
multiple samples of a polymorphic malware or similar malware. 
Figure  1  depicts  the  top  30  critical  malware  behaviors 
extracted from the samples and ranked in the descending order of 
their appearance times. For the behavior repeatedly appearing in a 
single malware, we only count it once. As the analysis is made on 
a  great  number  of  malware  samples,  we  expect  the  behaviors 
captured to reflect the popular attacking techniques taken by the 
community  of  malware  writers.  Our  performance  studies  in 
Section 4.2 have demonstrated that these behaviors are helpful to 
defend against unknown malware programs. The top 10 behaviors 
on the list are explained as follows: 
1.  Communicate  with  a  remote  host.  Most  malware 
samples need to access the network in order to break into hosts, 
download  files,  receive  hacker  commands,  upload  confidential 
information, and spread themselves to other hosts and so on. The 
most commonly used network protocols are HTTP, POP3, IRC, 
SMTP, FTP and ICMP. Here, we not only take into account the 
network communications when a malware sample executes on a 
host  but  also  the  network  communications  through  which  a 
malware  sample  breaks  into  a  host.  2.  Create  executable  files. 
When reaching a system, almost all malware immediately create 
their  executables  in  various  formats,  including  both  binary  and 
script  files.  A  significant  part  of  the  created  executables  comes 
from the network. 3. Modify registry for startup. 1,568 malware 
samples  change  or  create  registry  entries  in  order  to  launch 
themselves  upon  restart  of  the  system  or  applications.  The 
registry  entries  changed  the  most  are  “run”,  “Explorer”  and 
“Winlogon” under the path “HKEY_LOCALMACHINE\SOFT- 
WARE\Microsoft\Windows\C-urrentVersion\”.  4.  Copy  itself. 
As a characteristic behavior of malware, more than 1000 malware 
samples  copy  themselves  to  system  directories.  5.  Obtain 
personal  or  system  information.  785  malware  samples  steal 
user  or  system  information  including  password,  email  address, 
encryption key, IRC accounts, system version, configuration data, 
banking data, etc. Particularly, more than half of these malware 
samples are only interested in system information. 6. Inject into 
other  processes.  775  malware  samples  inject  malicious  codes 
into other process’ address space and remotely start a thread from 
the code. The system processes often being injected into include 
explorer.exe, winlogon.exe, svchost.exe, services.exe. 7. Modify 
executable  files.  769  malware  samples 
insert  codes 
into 
executables,  particularly  system  dynamic 
library  files,  for 
propagating,  hiding  or  starting  up  themselves.  8.  Create  or 
modify  Windows  services.  To  start  or  hide  themselves,  608 
malware samples create or modify services by calling service API 
functions or directly changing service related registry entries. 9. 
Change  security  settings.  To  escape  from  the  checking  by 
security software, 550 malware samples change registry to lower 
the system security level, disable firewall, bypass firewall, disable 
system  restoring  mechanism,  alter  safe  mode  setting, as  well  as 
disable task manager and registry editor. 10. Add IE or Explorer 
plug-ins. 541 malware samples add plug-in into IE and Explorer, 
for example, Browser Helper Object on IE, Shell Service Object 