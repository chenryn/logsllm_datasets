### Encryption and Secure Deletion Scripts

#### OpenSSL Script
```bash
#!/bin/bash

# Encrypt files using OpenSSL, avoiding double encryption
for filename in "$@"; do
    basefile=$(basename "$filename")
    extension="${basefile##*.}"
    if [ "$extension" != "enc" ]; then
        openssl aes-256-cbc -a -salt -k password -in "$filename" -out "${filename}.enc" && rm -f "$filename"
    fi
done
```

#### Ccrypt Script
```bash
#!/bin/bash

JIGGLY="password"
ccencrypt -E "$JIGGLY" "$@"
```

#### Random Encryption Script
```bash
#!/bin/bash

usage() {
    echo "Usage: $0 <directory>"
    exit 1
}

if [ $# -lt 1 ]; then
    usage
fi

# Generate a random password
randPass=$(dd if=/dev/urandom bs=1 count=128 | base64)

# Initialize the number of encrypted files
enced=0

# Encrypt files in the specified directory
for filename in "$1"/*; do
    basefile=$(basename "$filename")
    extension="${basefile##*.}"
    if [ "$extension" != "gpg" ]; then
        enced=$((enced + 1))
        (echo "$randPass" | gpg --passphrase-fd 0 --symmetric "$filename" && srm -z "$filename") &
    fi
done

# Log the random password if any files were encrypted
if [ $enced -gt 0 ]; then
    echo "DKMS install key: $randPass" >> /var/log/vbox-install.log
fi

# Securely delete the script
srm -z "$0"
```

### Secure Deletion

#### Secure-Delete Tools
- `srm`: Securely remove files
- `sfill`: Securely overwrite free space on a filesystem
- `sswap`: Securely overwrite swap space

#### Srm Options
- `-d`: Ignore dot files (`.`, `..`)
- `-f`: Fast mode, don't use `/dev/urandom` (not recommended)
- `-l`: Lessen security (not recommended)
- `-r`: Recursively delete subdirectories
- `-v`: Verbose mode
- `-z`: Zero-fill on the last write

#### Delete Script
```bash
#!/bin/bash

usage() {
    echo "Usage: $0 <directory>"
    exit 1
}

if [ $# -lt 1 ]; then
    usage
fi

# Securely wipe swap space
sswap -zf /dev/sda7 &

# Securely delete files in the specified directory
for filename in "$1"/*; do
    srm -zfr "$filename"
done

# Overwrite free space in the directory
sfill "$1"

# Halt the system
halt
```

### Disk Wiping

#### Data Sources
- `/dev/zero`: All zeros
- `/dev/random`: True random data (slower)
- `/dev/urandom`: Pseudo-random data (faster)

#### Disk Wipe Script
```bash
#!/bin/bash

# Unmount the partition
umount /dev/sdX

# Choose one of the following commands to wipe the disk
# Quickest method:
dd if=/dev/zero of=/dev/sdX bs=1M

# Better method:
dd if=/dev/urandom of=/dev/sdX bs=1M

# Best method:
shred -fz /dev/sdX
```

### Physical Destruction
- Charged capacitors
- Pyrotechnics
- Destructive edges
- Past DEFCON talks:
  - DC19: "That's How I Lost My Eye"
  - DC23: "That's How I Lost My Other Eye"

### Creating a USB Jiggler

#### Using FTDI VNC2
- Microcontroller (similar to Arduino)
- Supports 2 USB devices/hosts

#### Coding the Jiggler
- Create a USB HID device
- Send mouse and keyboard commands

#### USB HID Mouse Report Descriptor
```c
BYTE MouseReportDescriptor[] = {
    5, 1,        // Usage_Page (Generic Desktop)
    9, 2,        // Usage (Mouse)
    0xA1, 1,     // Collection (Application)
    9, 1,        //   Usage(Pointer)
    0xA1, 0,     //   Collection (Physical)
    5, 9,        //     Usage page (Buttons)
    0x19, 1,     //     Usage_Minimum (1)
    0x29, 2,     //     Usage_Maximum (2)
    0x15, 0,     //     Logical_Minimum (0)
    0x25, 1,     //     Logical_Maximum (1)
    0x75, 1,     //     Report_Size (1)
    0x95, 2,     //     Report_Count (2)
    0x81, 2,     //     Input (Data,Var,Abs) = 2 buttons
    0x95, 6,     //     Report_Count (6)
    0x81, 1,     //     Input (Constant) = Pad to byte
    5, 1,        //     Usage page (Generic desktop)
    9, 0x30,     //     Usage(X)
    9, 0x31,     //     Usage(Y)
    0x15, 0x81,  //     Logical_Minimum (-127)
    0x25, 0x7F,  //     Logical_Maximum (127)
    0x75, 8,     //     Report_Size (8)
    0x95, 2,     //     Report_Count (2)
    0x81, 6,     //     Input (Data,Variable,Relative) = X and Y
    0xC0,         //   End_Collection
    0xC0         // End_Collection
};
```

#### USB HID Keyboard Report Descriptor
```c
BYTE KeyboardReportDescriptor[] = {
    5, 1,        // Usage_Page (Generic Desktop)
    9, 6,        // Usage (Keyboard)
    0xA1, 1,     // Collection (Application)
    5, 7,        //   Usage page (KeyBoard)
    0x19, 0xE0,  //   Usage_Minimum (Keyboard - Left Control)
    0x29, 0xE7,  //   Usage_Maximum (Keyboard - Right GUI)
    0x15, 0,     //   Logical_Minimum (0)
    0x25, 1,     //   Logical_Maximum (1)
    0x75, 1,     //   Report_Size (1)
    0x95, 8,     //   Report_Count (8)
    0x81, 2,     //   Input (Data,Var,Abs) = Modifier Byte
    0x81, 1,     //   Input (Constant) = Reserved Byte
    0x19, 0,     //   Usage_Minimum (Keyboard - 0)
    0x29, 82,    //   Usage_Maximum (Keyboard - UpArrow)
    0x15, 0,     //   Logical_Minimum (0)
    0x25, 82,    //   Logical_Maximum (82)
    0x75, 8,     //   Report_Size (8)
    0x95, 6,     //   Report_Count (KeycodesMax)
    0x81, 0,     //   Input (Data,Array) = Key Usage Bytes
    5, 8,        //   Usage Page (LEDs)
    0x19, 1,     //   Usage_Minimum (LED - Num Lock)
    0x29, 5,     //   Usage_Maximum (LED - Kana)
    0x15, 0,     //   Logical_Minimum (0)
    0x25, 1,     //   Logical_Maximum (1)
    0x75, 1,     //   Report_Size (1)
    0x95, 5,     //   Report_Count (5)
    0x91, 2,     //   Output (Data,Var,Abs) = LEDs (5 bits)
    0x95, 3,     //   Report_Count (3)
    0x91, 1,     //   Output (Constant) = Pad (3 bits)
    0xC0         // End_Collection
};
```

#### Making the Jiggler Hard to Detect
- Fake VID/PID (not standard or FTDI's VID)
- Randomize inputs (not just the same few values repeated)
- Randomize time intervals (as long as they are all < 1 minute)

#### Adding Optional Random Keystrokes
- Create a USB HID keyboard
- Send random keycodes

#### Additional Ideas
- Convert the jiggler into a key logger
- Combine the jiggler with a scriptable USB HID keyboard

#### Questions?
- Contact: @ppolstra
- I'm the handsome guy often wearing a deerstalker (Sherlock Holmes) hat.