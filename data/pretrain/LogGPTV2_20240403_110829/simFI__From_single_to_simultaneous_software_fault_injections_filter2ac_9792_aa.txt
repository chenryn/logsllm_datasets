# Title: simFI: From Single to Simultaneous Software Fault Injections

## Authors:
Stefan Winter, Michael Tretter, Benjamin Sattler, Neeraj Suri  
DEEDS Group, Department of Computer Science, TU Darmstadt, Germany  
{sw, tretter, bsattler, suri}@cs.tu-darmstadt.de

## Abstract
Software-implemented fault injection (SWIFI) is a well-established technique for evaluating the robustness of software systems. Despite the availability of numerous SWIFI frameworks, most are based on the single-fault assumption, neglecting the interactions of simultaneously occurring independent faults. Given that software systems often contain multiple faults and current safety standards require the consideration of "multi-point faults," the validity of the single-fault assumption is questionable.

To address this issue and support simultaneous SWIFI (simFI), we analyze how independent faults can manifest in a generic software composition model and extend an existing SWIFI tool to support characteristic simultaneous fault types. We implement three simultaneous fault models and demonstrate their utility in evaluating the robustness of the Windows CE kernel. Our findings indicate that simultaneous fault injections are highly effective in triggering robustness vulnerabilities.

**Keywords:** Software fault injections, fault models, robustness testing

## I. Introduction
Software-implemented fault injection (SWIFI) is used to evaluate the resilience of software to perturbations in its operational environment. The effectiveness of such evaluations fundamentally depends on the proper choice of fault models, which specify how faults manifest in the system across dimensions such as timing, duration, and location.

Despite the large number of fault models behind various proposed SWIFI frameworks, virtually all consider only the injection of a single fault per experiment run. This design choice is typically driven by the assumptions that:
1. Apart from error propagation, no error interactions occur (i.e., all errors resulting from different fault activations are independent or have a necessary and sufficient causal relationship).
2. Such interactions are of no or negligible relevance to the outcome of the experiments.

Therefore, existing tools do not account for the possibility of interactions between multiple faults, even though software systems containing more than a single fault are common. If the consideration of multiple coincident faults significantly affects the outcome of a robustness evaluation, disregarding them would be a fallacy.

The ISO 26262 standard for the functional safety of road vehicles explicitly considers multiple-point failures, i.e., failures resulting from the combination of several independent faults. To assess the degree to which systems are vulnerable to such multiple-fault conditions, new approaches are needed, and this forms the focus of this paper.

The goal of this paper is to:
(a) Conceptually develop a notion of what fault coincidence implies in the context of SWIFI-based robustness evaluations.
(b) Experimentally assess the impact (positive or negative) of considering fault coincidence on evaluation effectiveness and applicable overheads.

The contributions of this paper are:
(C1) **Coincidence Notion**: Establish fault coincidence notions and discuss their applicability within a general model of SWIFI-based robustness assessments for software compositions (Sections II and IV).
(C2) **Impact Criteria**: Identify and discuss SWIFI experimentation aspects affected by simultaneous faults. These aspects form a set of criteria for assessing both the overhead and benefits of simultaneous fault injections (Section III).
(C3) **Simultaneous Fault Model Design**: Demonstrate the utility of coincident injections via the design and implementation of three simultaneous fault models (Section V).
(C4) **Quantitative Evaluation of simFI**: Quantitatively compare the efficiency of three simultaneous and three discrete fault models (Section V).

## II. System & Basic Fault Models
We consider robustness evaluations of component-based software systems, where components interact via contractually specified interfaces. Each component's functionality is accessible through sets of services offered by the component, termed interfaces. Compositions implement their functionality using services of their individual components. The set of services that a component provides is termed the component’s export interface, while the corresponding import interface spans the external services it depends on.

We assume the availability of functional service specifications for components as the minimum information required for composition. We do not assume access to source code or other component implementation details.

Following related literature, we model faults according to their location, type, trigger, and latency. Individual experiments are termed injection runs. Injection runs with the same system configuration and the same fault model, but different fault model instances being injected, are called injection campaigns. Multiple injection campaigns for the same CUE, but with different fault models and different system configurations, constitute an evaluation of the CUE.

## III. Fault Simultaneity Aspects in SWIFI-Based Software Assessments
When multiple independent faults can affect the dependable operation of a software system, the application of tools and processes based on a single-fault assumption may generate incorrect or imprecise results. In addition to impacting the validity of obtained results, the consideration of simultaneous faults in SWIFI-based assessments may have several conceptual and technical implications on experimental assessments, which we discuss below.

### A. Likelihood vs. Criticality of Rare Events
Assuming the probability of some fault \( f \) being activated is \( p_f \), the probability of \( n \) independent faults \( f_1, f_2, \ldots, f_n \) being active at the same time is \( \prod_{i=1}^{n} p_{f_i} \). The activation of \( n \) faults is less probable than the activation of an individual fault if at least one other fault has an activation probability less than 1. This makes the co-occurrence of multiple fault activations less likely than individual fault activations. Thus, the risk they impose may be regarded as negligible for very low probabilities of occurrence, especially when contrasted with high testing efforts required to cover all possible cases. This resembles the fundamental assumption driving test case reductions in combinatorial testing: Fault interactions are so rare that they can be neglected during tests without significantly affecting the outcome in the common case.

However, in safety engineering, critical failures (accidents) are often considered to result from unlikely, rare, and unconsidered combinations of events, as reflected in the ISO 26262 safety standard. Due to their improbability, such conditions often escape the focus of testers and are sometimes very difficult to construct in the test environment. Empirical work shows this to apply to critical software failures as well.

### B. Experiment Acceleration vs. Counts
Single fault injections can identify one internal fault per injection run. If a simultaneous fault injection reveals multiple internal faults at the same time, this implies a considerable speed-up in terms of experiment time required for the identification of the same amount of internal faults. However, the outcome of a simultaneous fault injection run may also lead to more ambiguous results.

If multiple faults are injected, one activated fault (termed an error) can potentially mask another fault or error. For example, if a fault \( f_1 \) leads to a corrupted data value in memory, and a different fault \( f_2 \) activates such that the memory location is never referenced, the effect of \( f_1 \)'s activation never becomes visible. From such an experiment, it is not possible to determine whether the activation of \( f_1 \) would have been tolerated or would have caused the component to fail.

If the injection of simultaneous faults results in a system failure, a similar ambiguity can occur: It is unclear whether the activation of all injected faults is actually necessary to trigger the observed failure. This makes it difficult to spot the robustness vulnerability or vulnerabilities responsible for the failure. Note that this problem is different from error masking, as error masking may lead to an error being tolerated or mitigated, unlike the presumed software failure in this case. In both cases, the ambiguity can be resolved at the cost of additional experiments with single faults constituting the simultaneous fault condition. However, this may add considerably to the number of overall required experiments.

Even without the potential need for additional experiments to resolve ambiguities, the consideration of coincident faults by itself leads to higher numbers of possible experiments, thereby aggravating test case selection. While the individual injection of \( n \) faults yields \( n \) experiments, this expands to \( \binom{n}{k} \) experiments for \( k \) coincident faults, assuming all possible combinations are feasible.

We experimentally investigate the impact of coincident faults on the evaluation efficiency in Section V.

### C. Sequential vs. Concurrent Executions
Unlike classical sequential processing, modern processors provide higher performance via higher degrees of parallelism instead of higher execution rates. To exploit these performance gains, software applications are designed for the parallel execution of independent threads. This parallel execution enables the simultaneous activation of independent internal faults within one component. With an increasing degree of parallelism, the rate of failures resulting from simultaneous fault activations naturally increases.

We develop notions of “temporal” and “spatial” fault coincidence that apply to both sequential and concurrent execution models in the following section.

## IV. Modeling Simultaneous Faults
Defining simultaneous fault models strictly on the fault notion and system model in Section II is problematic. The fault notion of Avižienis et al. [10] implies that a software component cannot be exposed to two independent external faults. As an external fault is defined as something that triggers an internal fault and an internal fault is defined as something possibly resulting in a component failure, there are two possibilities: Either the simultaneous injection of two independent alterations does not lead to a failure and, consequently, does not constitute a fault, or they lead to an observable component failure, in which case they are considered one external fault.

However, if we assume software components to be themselves composed of components, simultaneous faults can be defined via subcomponent faults. Consider component A to be composed of components B and C. Assume B to have the internal fault \( f_B \) and C to have the internal fault \( f_C \). If there exist external faults \( f_B, f_C, f_{BC} \), such that \( f_B \) triggers \( f_B \), \( f_C \) triggers \( f_C \), and \( f_{BC} \) triggers both \( f_B \) and \( f_C \), then we call \( f_{BC} \) a simultaneous fault if it is an external fault to A, i.e., if it results in a failure of A.

The external faults \( f_B \) and \( f_C \) are distinguishable, as they trigger different internal faults that constitute external faults to distinct subcomponents. While temporally coincident, they differ in location. There may also be different external faults triggering the same internal fault. These are perceived as distinct cases if they occur at different instances of time. Hence, we distinguish between temporally coincident faults (that differ in location) and spatially coincident faults (that differ in timing). While temporal fault coincidence is the more intuitive notion and less considered in existing work, we first discuss "spatially coincident but temporally spread" faults, as they facilitate the accurate definition of temporal fault coincidence.

### A. Spatial Coincidence and Temporal Resolution
**Definition 1:** An external fault is termed spatially coincident but temporally spread if it triggers the same internal fault at different instances of time.

The precise timing and even an approximate timing with respect to real execution times can be difficult to measure if the component’s implementation is not accessible for instrumentation. Therefore, we relax the notion for black-box components and only require observability at their interfaces during different usage sequences.

**Definition 2:** An external fault of a black-box component is termed spatially coincident but temporally spread if it triggers the same internal fault within more than one temporal usage sequence of the functional interface. Temporal usage sequence may refer to an evaluation, an injection campaign, a single injection run, or an individual service invocation during an injection run. The choice of the usage sequence is referred to as temporal resolution.

For simplicity, we write “temporally spread” to mean “spatially coincident but temporally spread.” An example of a temporally spread fault with coarse-grained temporal resolution is the injection into a component that maintains some state across different evaluations, e.g., injections that lead to accumulating corruptions in persistent storage. It is important to note that the external fault is only considered temporally spread if it targets the same internal fault in multiple evaluations. An example of a fine-grained temporal resolution is the repeated injection of the same external fault into the same service over multiple service invocations.

### B. Temporal Coincidence and Spatial Resolution
**Definition 3:** An external fault of a component is termed temporally coincident if it triggers internal faults in more than one sub-component.

As two internal faults are triggered by one event occurring at one instance of time, their causation is considered temporally coincident. While this definition works well for cases where the internal structure of a component under evaluation is known, it cannot be directly applied to black-box components for which the internal structure is not known to the evaluator. We, therefore, approximate the internal structure of black-box components by reference to their accessible interfaces.

**Definition 4:** An external fault of a black-box component is termed temporally coincident if it triggers internal faults through different spatial entities in the component’s interface during the same temporal usage sequence. Spatial entity may refer to a component interface, a service provided by the component, a parameter passed to the component upon service invocation, or a data element of the parameter. The choice of the spatial entity is referred to as spatial resolution.

Figure 3 depicts the relationship between the considered spatial entities. An example of a temporally coincident fault of a black-box component with a spatially coarse-grained resolution is when services of different component interfaces are invoked with illegal parameter values within a single injection run. An example of a fine-grained spatial resolution is the simultaneous modification of two individual bits within the same parameter.

Note that the redefinition of temporal coincidence for black-box components requires the previously introduced notion of temporal usage sequences. We recognize that the temporal and spatial dimensions of fault models are not independent for black-box components. Depending on the considered temporal resolution (i.e., the choice of the temporal usage sequence), only a subset of spatial entity choices (i.e., spatial resolutions) is possible: If an individual service invocation is the temporal scope, only different parameters of that service or multiple locations within one parameter are possible choices for temporally coincident spatial entities. We develop fault models for these two cases in the following section.

## V. Experimental Evaluation
We define three simultaneous fault models according to the temporal coincidence notion developed in Section IV (C3) and investigate the impact of these models on the evaluation efficiency, taking masking and amplification effects into account (C4). We conclude that the evaluation effort resulting from the higher numbers of experiments for simultaneous fault injections is well justified in this case study (C2). Before going into the details of the developed models and their performance, we briefly describe the experimental setup for our case study.

### A. Experimental Setup
We apply SWIFI to the Windows CE 4.21 operating system (OS), specifically targeting device drivers. Device drivers are known to be error-prone and constitute a common cause for OS failures. We choose to investigate the effects that device driver failures have on the overall system by injecting faults at the OS’s driver interface and observing the results at its application interface. The approach is similar to previous studies and aims at the identification of vulnerable OS services, so that runtime fault-tolerance mechanisms can be selectively applied if required.

Windows CE loads device drivers as dynamically linked library (DLL) binaries. We use a serial port driver and an Ethernet driver for our case study. Both drivers export a Windows stream driver interface. The serial port driver imports the CEDDK and COREDLL kernel interfaces. The Ethernet driver imports COREDLL and NDIS.

We inject external faults at the kernel interface by intercepting service invocations between the drivers and the kernel and modifying parameter and return values passed to the kernel. Service invocations at the kernel/driver interface are triggered by synthetic workloads designed to trigger executions of the targeted drivers. The applied failure detectors are capable of detecting four different classically known outcomes of an injection run. Upon fault injection, the system may respond with the following:
- **Not Failing (NF)** in any detectable manner.
- **Failing without violating OS specifications** by delivering wrong, yet plausible results (Application Error, AE).
- **Violating the service specification of an individual OS service** upon which the application fails and becomes unresponsive (Application Hang, AH).
- **System Crash (SC)**, rendering the whole system unavailable and often necessitating a manual restart.

### B. Fault Models: From Discrete to Simultaneous
Our injection framework supports a large number of fault models with a variety of injection triggers and latencies. While it supports various injection locations, i.e., injections into device driver binaries as well as injections into service parameter values, we only consider the latter in our evaluation because of the strong effects this difference in location has on the evaluation outcome. For parameter value corruptions, the framework supports three classical discrete fault models:
- **Bit Flips (BF)**: An individual bit in the binary representation of the passed parameter value is flipped.
- **Fuzzing (FZ)**: A passed parameter value is replaced by a random value of the same binary length.
- **Data Type-Specific (DT)**: A passed parameter value is replaced by a data type-specific boundary value, e.g., MAXINT, MININT, -1, 0, 1 for the integer data type.

We use BF and FZ models as a basis for constructing three temporally simultaneous fault models (C3), i.e., models of faults that are activated within the same temporal usage sequence in different spatial locations. We choose individual service invocations as the considered temporal usage sequence. Simultaneous faults can then manifest themselves as faults in distinct parameters of the same service call or as distinct faults within one single parameter of the targeted service call, depending on the spatial resolution.

#### 1. The Simultaneous FuzzFuzz Model
While the fuzzing fault model mandates the replacement of an individual parameter value of a service call, the FuzzFuzz model applies fuzzing to two distinct parameters of the same service invocation. Note that fuzzing is only usefully applicable for spatial resolutions lower than the individual parameter level: If fuzzing was simultaneously applied to the same parameter, the resulting injection would not differ from a single fuzzing injection (one parameter value is replaced by a random value).

Consider a service invocation `foo(a, b)` to a component under evaluation. Fuzzing mandates replacing either parameter value `a` or `b` by a random value. If fuzzing was applied to the same parameter twice, the result would be indistinguishable from a single parameter fuzzing. We, therefore, consider simultaneously fuzzing different parameters with the FuzzFuzz model, thereby implicitly restricting its applicability to services that take at least two parameters as inputs.