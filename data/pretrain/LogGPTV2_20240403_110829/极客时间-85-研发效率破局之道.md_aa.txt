# 85-研发效率破局之道
# 开篇词 \| 为什么你要关注研发效能？你好，我是葛俊，曾在 Facebook内部工具组工作，与两个同事共同负责软件研发工具套件 Phabricator的开发和开源，是[Phabricator](https://github.com/phacility/phabricator)的主要作者之一。最近这十年，国内互联网产业的发展速度不亚于硅谷，在商业模式创新方面甚至已经完成超越，但是我们在研发效能方面始终比较落后。今年年初爆发的996大讨论，让国内的加班问题，吸引了国内外开发者的关注。我们很难予以否认，在互联网行业繁荣发展的背景下，国内很多公司采用了"拼工时"的做法，却忽略了最最应该关注的研发效能。现在，我想请你回忆下，你是否也曾为下面这些问题感到困扰呢？1.  研发团队看起来人也不少，大家也很辛苦，加班也不少了，但是产品发布还是常常延期，上线后产品问题频发。2.  用户需求从需求分析、产品设计、开发、测试最终流到部署，但最终发布的产品与用户需求偏差却很大。3.  产品发布上线时出现大量提交、合并，导致最后时刻出现很多问题，团队成员集体熬夜加班，却将大把的时间花在了等待环境、等待验证上。4.  开发提测质量不好，大量压力聚集到测试这一步，导致代码返工率很高。引入单元测试、代码审查，效果却都不明显。5.  开发人员疲于应付业务，没有精力或者兴趣去精进技术，对    Git、命令行等强大工具的使用仅限于皮毛，士气低迷、工作效率低下。``{=html}这其实就是团队的研发效率，也就是研发效能出现了问题。那么，研发效能到底是什么呢？一提到研发效能，很多人的第一反应可能都是开发的速率，也就是研发团队能否快速发布产品。但在我看来，速率只是效能的三大支柱之一。除了快，产品开发更重要的是方向正确，因为不能给用户和公司真正提供价值的产品，做了也是白做。另外，高效能还需要有可持续性，否则短期的高产出可能会严重伤害长期的产出。比如，连续熬夜加班带来的身体问题，会导致后续工作效率低下，得不偿失。因此，**研发效能的完整定义应该是：团队能够持续地为用户产生有效价值的效率**，包括有效性（Effectiveness）、效率（Efficiency）和可持续性（Sustainability）三个方面。简单来说，就是能否长期、高效地开发出有价值的产品。可喜的是，国内越来越多的公司开始在研发流程、工具、文化等方面下功夫，很多百人研发人员规模的公司开始组建了专门的效能团队，来提高整个公司的研发效能。这是一个很好的现象和趋势。但，很多公司在推进研发效能的时候，常常不知道从何下手，或者是花了精力、加大了投入却看不到效果，产出抵不上投入。比如，我在一些公司做内训和顾问工作的时候，经常会遇到下面这样的案例：1.  想通过指标度量的方式来衡量团队的效能，要求每个团队达到一定的测试覆盖率。研发团队在产品完成后进行突击，来编写单元测试，最终达到了要求，但产品质量却没有提高。2.  引入业界先进工程实践，学习 Google    使用大仓，但因为基础设施不成熟，对大量二进制文件支持很差，结果是算法团队因为有很多的二进制模型文件，每次    Git Clone 都需要半小时，怨声载道。3.  希望建设工程师文化来提高产出和活跃气氛，跟公司老大以及 HR    商量好几条价值观在公司宣传推广，还组织了几次团建活动，但是收效甚微。大家真正工作起来还是老样子。这些问题的根源都在于，**软件开发的灵活性决定了研发效能提升的困难性：**可以关注的点太多，可以使用的方法也很多，但如果只是简单照搬业界研发实践的话，效果往往不好，有时甚至会造成负面效果。而与国内公司形成鲜明对比的是，硅谷的互联网公司在推进研发效能方面做得要好得多。在2000年互联网泡沫之后，美国的互联网产业从疯狂增长进入到了"精耕细作"的阶段，需要通过比拼效能在竞争中取得优势，并在此过程中积累了很多经验。在这其中，Facebook的研发效能非常高，更是硅谷公司中的一个典范。比如，早在 2012 年 Facebook月活达到 10亿的时候，后端服务及前端网站的部署，采用的是每周一次全量代码部署、每天一次增量代码部署，以及每天不定次数的热修复部署，但部署人员就只有三个，达到平均每个部署人员支撑3.3 亿用户的惊人效率。又比如，社交网络出现 Bug 的时候，调测起来非常麻烦。因为要复现 Bug场景中错综复杂的社交网络数据，困难并且耗时。但在Facebook，它采用开发环境跟生产环境共享一套数据的方法。这就使得开发人员可以非常方便地在自己的机器上复现这个Bug，进行调测。当然，这样的数据共享机制背后有着强大的技术和管理支撑来规避风险。2010 到 2013 年之间，我在 Facebook基础平台团队的内部工具组，作为核心成员，研发并开源了研发工具套件Phabricator。2013 到 2015 年，我又作为效能工具的使用者，参与了 Facebook对外产品的研发。也正因为这几年的工作，我对 Facebook如何提高研发效能有了越来越清晰的理解，认识到**研发效能的提高，需要整个公司在研发流程、工程方法、个人效能和文化管理等方面进行精心设计。**离开 Facebook 之后，我在硅谷的 Stand Technologies公司、国内的创业公司以及华为担任过技术总负责人、CTO、技术专家和团队主管等角色，带领百人技术团队进行研发。比如，2017 年到 2018年，我在华为开发工具部主导下一代集成开发工具环境，为软件开发工程师提供全栈的端云一体工具平台，服务于2万多开发者，致力于提高公司整体的研发效能。同时，我也尝试将研发效能的工程实践引入华为。比如，我在团队进行了几次黑客松（Hackathon），每次活动，平均10 个开发者就产生一个项目，每 10 个项目中就有 1.5 个成功落地。工作 15年来，我在研发效能团队工作过，也在产品团队中推动过研发效能，这其中包括硅谷和国内的公司，也包括大型企业和创业公司。对怎样在一个公司或者团队引入效能实践，有比较丰富的经验。所以，当极客时间团队邀请我写一个与研发效能相关的专栏时，我毫不犹豫地就答应了，希望能够借此把之前的经验、教训做一次系统地梳理，帮助到同样对效能有期待同时又有困惑的同行者，另外对自己也是一次温故知新的机会。在这个专栏中，我会从 4 个方面，分 5个模块与你讲清楚如何做到研发的高效能。-   **研发效能综述。**我会讲解研发效能的定义、模型，并着重介绍研发效能度量的正确使用方法。借此，希望你能够梳理出研发效能的主脉络，构建出一副清晰的知识图谱。-   **研发流程模块。**我将与你分享敏捷、持续集成、分支管理、持续交付、DevOps、团队协同等话题，希望能帮助你深入理解研发过程中的关键流程，以及流程优化的基本原则，从而能够针对自己的实际情况，找到最合适的工程实践，让软件开发的整个流程更加顺畅、高效。-   **工程方法模块。**我将与你讨论研发流程中各关键步骤高效工程方法，包括开发、测试、运维。并与你分析软件开发的趋势和热点，比如智能化开发、在移动设备上开发、云原生等等。通过这个模块，我希望加深你对这些具体工程方法的了解，并学会如何正确地使用这些方法。-   **个人效能模块。**我将与你分享如何提高个人效能，具体涉及深度工作、Git、命令行、VIM、工具环境集成等内容，旨在帮助你提高技术的专精程度和持续成长。每个开发人员都应该提高自己的效能，只有这样才能持续学习持续提高，避免被业务拖着跑。-   **管理和文化模块。**我将重点与你系统分析硅谷管理和文化，尤其是    Facebook    的工程师文化，并根据我在国内公司的具体落地经验，给出推荐的文化引入和建设方法。研发效能和软件开发一样，都具有很大的灵活性，提高研发效能也不是照搬照套就能做好的。所以**在写作专栏的过程中，我会着重讲解Why，带你深入了解效能实践背后的原理，然后才给出How，也就是具体的实践。**因为只有深刻理解原理，才能灵活运用。同时，我会与你分享尽量多的案例，带你一起了解国内外一些公司的优秀做法，分析它们成功的经验，当然，我也会分享失败的案例，以及背后的原因。不过更重要的是，我希望你能够跟着我一起分析，通过对比思考，找到真正适合团队和自身的实践。而这，是我写作这个专栏的真正初衷。这是研发效能专栏的第一篇文章，如果可以的话，欢迎你在留言区做个自我介绍，和我聊聊你或者你的团队在研发效能方面的实践以及遇到的问题，增进我们彼此的了解。而且，我也希望你看过这个专栏后，能够再回头来看看最初留下的内容，相信届时你已经对研发效能有了新的理解和思考。![](Images/6476358e731920fbc927e278bae473aa.png){savepage-src="https://static001.geekbang.org/resource/image/ec/d8/ece1747e3a8f96aa76a8e57c94de94d8.jpg"}
# 01 \| 效能模型：如何系统地理解研发效能？你好，我是葛俊。今天，我来和你聊聊什么是研发效能，以及研发效能的模型，这些内容是理解整个专栏的基础。今年的 3 月 26 日，一位昵称为 996icu 的用户，在 GitHub 上创建了 996.ICU的项目，自此 996 这个话题被推上了风口浪尖。目前，这个项目已经拿到了 24万多颗星。朋友们也常常问我：硅谷的公司有没有 996？其实，在硅谷，很少有公司要求996。不过，在初创公司，因为业务紧张、同事间的竞争，加班也很常见。但是，硅谷和国内的公司有一个很大的区别，就是硅谷的公司一般是任务驱动，只要完成任务就行，不管你花了多少时间。而国内很多实行996的公司不仅仅是要求完成任务，更强调工作时长。但其实，专注时长的这种操作在软件开发行业是不合理的，因为长期加班不能保证持续的高效产出。从我以及身边许多开发者的经验来看，每天能够高效地产出代码五六个小时，已经相当不错了。短期突击加班会有效果，但如果长期加班，通常效率、质量会下降，产生了Bug 就要花费更多的精力去修复。如果这些 Bug发布到了用户手上，损失就会更大，得不偿失。长期加班还会出现无效加班的结果。比如，有个朋友在一家国内一流的互联网公司工作，据他反馈，公司实行996，很多人加班其实是磨洋工，低效加班非常明显。可想而知，其他推行 996工作制的公司，大概率也会存在这种问题。``{=html}**那么，长期加班效果不好，面对激烈竞争，我们到底应该怎么办呢？**在我看来，这个问题还是要从软件开发本身的特点来解决。
## 为什么要关注研发效能？软件开发是一个创造性很高的过程，开发者之间的效率相差很大。就比如，10x程序员的生产效率可以达到普通开发者的 10倍。其实，不仅是个人，团队间的效率相差也很大。**所以，相比工作时长而言，公司更应该关注的是研发效能**。接下来，我们再回顾一下我在开篇词中给研发效能的定义：> 研发效能，是团队能够持续为用户产生有效价值的效率，包括有效性（Effectiveness）、效率（Efficiency）和可持续性（Sustainability）三方面。简单来说，就是开发者是否能够长期既快又准地产生用户价值。硅谷的很多知名公司，比如 Google、Facebook、Netflix等，在研发效能上做得很好，是研发效能的标杆。这，也是它们业务成功的重要因素。以我在开篇词中提到的 Facebook 的部署上线流程为例。Facebook 在 2012年达到 10 亿月活的时候，部署人员只有三个，达到平均每个人支撑 3.3亿用户的惊人效率。举个形象的例子，如果全中国每一个人都使用Facebook，那最多只要 5 个部署人员就够了。Facebook做到这一点的基础，就是不断提高研发效能。还是以上面的部署流程为例，原来的部署已经非常高效，但是在2017 年，Facebook又引入了持续部署，做了进一步的优化，实现了更高效率的部署上线。试想一下，如果Facebook 选择堆人、堆时间的话，那需要增加多少人、多少加班才能做到呢？**所以在我看来，如果研发效能提不上去，单靠加人、加班根本不可能解决问题。****注重研发效能的另一个巨大好处**，是开发者能够聚焦产出价值，更容易精进自己的技术。于是，团队容易建立起好的氛围，进而又能促进生产效率的提高，形成良性循环，支撑持续的高效开发。所以，国内公司近一两年越来越注重提高研发效能，许多公司甚至专门成立了工程效率部门。但是，在真正开展研发效能提升工作时，它们却常常因为**头绪太多无从下手，或者对方法了解不够，导致画虎不成反类犬的效果**。这，又和软件研发的高度创造性和灵活性紧密相关。自软件行业诞生起，开发者们就发挥聪明才智，不断创造新的方法、流程和工具来适应和提高生产效率。互联网产业爆发以来，这一趋势更是明显：从最初的瀑布研发流程到敏捷到精益，从持续集成到持续发布到持续部署，从实体机到虚拟机到Docker，从本地机器到数据中心再到云上部署，从单体应用到微服务再到无服务应用。新的工具、方法，可谓层出不穷。面对如此多的选择，如果能处理好，则开发体验好，产品发布速度快，研发过程处于一个持续的良性发展情况。但处理不好，就会事倍功半，出现扯皮、重复劳动、产品质量不好、不可维护的情况。微服务的不合理引入就是一个典型的例子。自从亚马逊（Amazon）成功大规模地应用后，微服务逐渐形成风潮，很多公司在不清楚适用场景的情况下盲目采用，结果是踩了很多坑。比如，我见过一个初创公司，在业务还没开展起来的时候，一上来就采用微服务，因为没有要求一致的技术栈，也没有限制服务的大小，于是开发人员怎么方便怎么做，只考虑局部优化而忽视了全局优化。半年下来，20人的开发团队搞出了 30 多个服务和 5种开发语言。服务之间的调用依赖和部署上线越来越复杂，难以维护，每次上线问题不断，经常搞通宵才能让服务稳定下来。同时，知识的共享非常有限，有好几个服务只有一个人了解的情况，一旦这个人不在的时候这个服务出现问题，解决起来就基本上成了"不可能的任务"。这样的错误使用微服务的公司非常普遍。那，到底怎样才能有效地提高研发效能呢？硅谷的业界标杆公司又是怎么做到高效能的呢？
## 只有深入研发活动的本质，才能提高效能我的建议是，提高研发效能，需要**深入了解研发活动的本质，从纷乱的表象和层出不穷的方法中，看到隐藏的模型，找到根本原则**，然后从这些原则出发，具体问题具体分析，找到合适的方法。这样做的原因是，软件研发很灵活，在实践的时候总会见到不一样的状况。越是灵活的东西，就越需要理解其本质，这样才能做到随机应变。在 Facebook的时候，我们做事时都遵循一些基本原则。比如，有一个原则是"**不要阻塞开发人员**"，贯穿在公司的很多研发和管理实践中。接下来，我给你举两个具体的应用场景，来帮助你理解这个原则。**第一个应用场景是，本地构建脚本的运行速度要足够快**。开发人员在自己的开发机器上写完代码之后，都要运行这个脚本进行构建，把新做的改动在自己的开发机器沙盒环境上运行起来，以方便做一些基本检查。这个操作非常频繁，所以如果它的运行时间太长，就会阻塞开发。因此，确保这个脚本的快速运行就是内部工具团队的一个超高优先级的任务。我们对每次脚本的运行进行埋点跟踪，当运行时长超过1.5 分钟后，我们就会停下手中的工作，想尽一切办法给这个本地构建加速。**第二个应用场景是，商用软件的采购**。对一定数额下的软件购买，开发人员可以自行决定，先斩后奏。而且那个数额还蛮高的，覆盖一般的软件完全没问题。我个人就经历过两次在晚上加班时，要购买一个商业软件的情况。如果等主管审批，就需要到第二天。但，因为公司信任工程师能够在这样的情况下做出利于公司的决定，所以我可以直接购买并使用。这样一来，除了能提高这几个小时的开发效率外，更重要的是，我觉得自己拥有信任和权力，工作积极性更加高涨。这两个应用场景差别很大，却都是基于"不要阻塞开发人员"这个原则。Facebook之所以会有这个原则，正是因为它认识到了，**开发流程的顺畅是生产优质软件的关键因素，只有这样才能最大程度地释放开发者的创造性和积极性**。相比之下，很多公司更注重强管理下的流程和制度，而忽略了开发的顺畅，结果是开发人员工作起来磕磕绊绊，又谈何高效率呢。看到这里你会说，我已经很清楚地知道，要想提高研发效能，就必须理解软件开发的本质。那么，软件开发的本质到底什么呢？接下来，**我就和你探讨一下软件开发的本质特点，然后基于这些特点，搭建出一个研发效能的模型，希望你可以灵活运用，找到提高研发效能的主要着力点。这个思路，将是贯穿整个专栏的主线索。**
## 研发效能的模型是什么？在我看来，**软件开发本质上就是一条超级灵活的流水线**。这个流水线从产品需求出发，经过开发、测试、发布、运维等环节，每一个环节的产出流动到下一个环节进行处理，最后交付给用户。![](Images/756998b20eb8c8ed4720a877be732590.png){savepage-src="https://static001.geekbang.org/resource/image/3a/b7/3afb132da674578627c30272dd8504b7.png"}```{=html}```图 1 软件开发的流水线]{.reference}```{=html}```另外，这条流水线的每个环节都还可以细分。比如，本地开发环节可以细分为下面几个部分：![](Images/451584bf5340d0f5cb7dabbda81c5bdb.png){savepage-src="https://static001.geekbang.org/resource/image/44/28/44e048f968b603e49136b10f5dbdf728.png"}```{=html}```图 2 本地开发流水线]{.reference}```{=html}```这种流水线工作方式，在传统的制造业中很普遍，也已经有了很多经验和成功实践。最典型的就是汽车生产中使用的丰田生产体系（ToyotaProductionSystem，TPS）。所以，**我们可以参考传统制造行业的经验来提高效能**。事实上，瀑布模式就类似于传统流水线的处理方法：它强调每个环节之间界限分明，尽量清晰地定义每一个环节的输入和输出，保证每一个环节产出的质量。但，**和传统制造业相比，软件开发又具有超强的灵活性，**体现在以下四个方面**。**1.  最终产品目标的灵活性。传统流水线的目标确定，而互联网产品的最终形态通常是在不断地迭代中逐步明确，相当于是一个移动的标靶。尤其是最近几年，这一灵活性愈发明显。比如，在精益开发实践中，常常使用    MVP（最小可行性产品，Minimal Viable    Product）来不断验证产品假设，经过不断调整最终形成产品。2.  节点之间关系的灵活性，比如流水线上的多个节点可以互相融合。DevOps    就是在模糊节点之间的边界，甚至有一些实践会直接去掉某些环节，或者融入到其他环节当中。3.  每个节点的灵活性。每一个生产环节都会不断涌现出新的生产方式 /    方法。比如测试，最近十多年就产生了测试驱动开发、Dogfood（狗粮测试）、测试前移等方法；最近又出现的测试右移，开始强调在生产环境中进行测试。4.  每个节点上的开发人员的灵活性。跟传统制造业不同，流水线上的每一个工作人员，也就是开发者，都有很强的灵活性，主要表现在对一个相同的功能，可以选择很多不同的方式、不同的工具来实现。\    比如，之前我在 Facebook    做后端开发的时候，同样一个代码仓，有的同事使用命令行的编辑环境    VIM/Emacs，有的使用图形界面 IDE，有的使用    WebIDE；在实现一个工具的时候，大家可以自己选择使用 Python 还是 Ruby    还是 PHP。这其中的每一个选择，都很可能影响效能。基于这些特点，我们可以从以下四个方面去提高研发效能。![](Images/adadf9d0249c3db4038d2fef6dd04c4b.png){savepage-src="https://static001.geekbang.org/resource/image/68/51/68f278d53b0441413842539ed8919c51.png"}```{=html}```图 3 研发效能模型]{.reference}```{=html}```1.  优化流流程，主要针对特点 1 和    2，也就是最终产品目标的灵活性和节点间关系的灵活性，进行优化。具体来说，针对最终产品目标的灵活性，主要是提高流程的灵活性，让它能聚焦最终产生的用户价值，以终为始地指导工作，击中移动的标靶。而针对节点之间关系的灵活性，则主要聚焦流水线的顺畅，以保证用户价值的流动受到的阻力最小。2.  团队工程实实践，主是针对特点    3，也就是每个节点的灵活性进行优化，聚焦每一个生产环节的工程实践进行提高。3.  个人工程实实践，主是针对特点    4，也就是每个节点上开发人员的灵活性，来提高个人研发效能。争取让每个开发人员都能适当地关注业务、以终为始，同时从方法和工具上提高开发效率，实现    1+1\>2 的效果。4.  文化和管管理。任何流程、实践的引入和推广，都必须有合理的管理方法来支撑。同时，文化是一个团队工作的基本价值观和潜规则。只有建立好文化，才能让团队持续学习，从而应对新的挑战。所以，要提高效能，我们还需要文化和管理这个引擎。优化流程、团队工程实践、个人工程实践以及文化和管理，就是我们提高研发效能需要关注的四个方面，也就是我们所说的研发效能模型。在接下来的文章中，我会以这个模型为基础，从以上这四个方向与你介绍硅谷公司，尤其是我最熟悉的Facebook的成功实践，并着重向你讲述这些实践背后的原理。因为只有理解了这些原理和原则，我们才有可能在这个超级灵活和高速发展的软件开发行业里见招拆招，立于不败之地。