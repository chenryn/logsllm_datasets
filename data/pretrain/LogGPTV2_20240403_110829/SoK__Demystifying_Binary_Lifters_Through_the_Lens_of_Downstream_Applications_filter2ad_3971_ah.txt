### References

[76] Zhibo Liu and Shuai Wang. "How Far We Have Come: Testing Decompilation Correctness of C Decompilers." In *ISSTA*, 2020.

[102] Yulei Sui and Jingling Xue. "SVF: Interprocedural Static Value-Flow Analysis in LLVM." In *Proceedings of the 25th International Conference on Compiler Construction*, pages 265–266. ACM, 2016.

[103] Yulei Sui, Ding Ye, and Jingling Xue. "Detecting Memory Leaks Statically with Full-Sparse Value-Flow Analysis." *IEEE Transactions on Software Engineering*, 40(2):107–122, 2014.

[104] Chengnian Sun, Vu Le, and Zhendong Su. "Finding Compiler Bugs via Live Code Mutation." In *OOPSLA*, 2016.

[105] sunlv. "Fail to Build Klee Maze Example." <https://github.com/lifting-bits/mcsema/issues/569>, 2019.

[106] testhound. "Mctoll Crashes When Running Raising ARM Binary." <https://github.com/microsoft/llvm-mctoll/issues/67>, 2020.

[107] Pei Wang, Qinkun Bao, Li Wang, Shuai Wang, Zhaofeng Chen, Tao Wei, and Dinghao Wu. "Software Protection on the Go: A Large-Scale Empirical Study on Mobile App Obfuscation." In *ICSE*, 2018.

[108] Ruoyu Wang, Yan Shoshitaishvili, Antonio Bianchi, Aravind Machiry, John Grosen, Paul Grosen, Christopher Kruegel, and Giovanni Vigna. "Ramblr: Making Reassembly Great Again." In *NDSS*, 2017.

[109] Shen Wang, Zhengzhang Chen, Xiao Yu, Ding Li, Jingchao Ni, Lu-An Tang, Jiaping Gui, Zhichun Li, Haifeng Chen, and Philip S. Yu. "Heterogeneous Graph Matching Networks for Unknown Malware Detection." In *Proceedings of the 28th International Joint Conference on Artificial Intelligence*, pages 3762–3770. AAAI Press, 2019.

[110] Shuai Wang, Pei Wang, and Dinghao Wu. "Reassembleable Disassembling." In *USENIX Security*, 2015.

[111] Shuai Wang, Pei Wang, and Dinghao Wu. "Uroboros: Instrumenting Stripped Binaries with Static Reassembling." In *2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER)*, volume 1, pages 236–247. IEEE, 2016.

[112] Wenhan Wang, Ge Li, Bo Ma, Xin Xia, and Zhi Jin. "Detecting Code Clones with Graph Neural Network and Flow-Augmented Abstract Syntax Tree." *arXiv preprint arXiv:2002.08653*, 2020.

[113] Wenwen Wang, Stephen McCamant, Antonia Zhai, and Pen-Chung Yew. "Enhancing Cross-ISA DBT Through Automatically Learned Translation Rules." *ACM SIGPLAN Notices*, 53(2):84–97, 2018.

[114] Brian Wickman, Hong Hu, JungWon Lim, Sanidhya Kashyap, and Taesoo Kim. "Preventing Use-After-Free Attacks with Fast Forward Allocation." 2021.

[115] David Williams-King, Hidenori Kobayashi, Kent Williams-King, Graham Patterson, Frank Spano, Yu Jian Wu, Junfeng Yang, and Vasileios P. Kemerlis. "Egalito: Layout-Agnostic Binary Recompilation." In *Proceedings of the Twenty-Fifth International Conference on Architectural Support for Programming Languages and Operating Systems*, pages 133–147, 2020.

[116] Xiaojun Xu, Chang Liu, Qian Feng, Heng Yin, Le Song, and Dawn Song. "Neural Network-Based Graph Embedding for Cross-Platform Binary Code Similarity Detection." In *Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security*, pages 363–376, 2017.

[117] Khaled Yakdan, Sebastian Eschweiler, Elmar Gerhards-Padilla, and Matthew Smith. "No More Gotos: Decompilation Using Pattern-Independent Control-Flow Structuring and Semantic-Preserving Transformations." In *NDSS*, 2015.

[118] Zeping Yu, Rui Cao, Qiyi Tang, Sen Nie, Junzhou Huang, and Shi Wu. "Order Matters: Semantic-Aware Neural Networks for Binary Code Similarity Detection." In *Proceedings of the AAAI Conference on Artificial Intelligence*, volume 34, pages 1145–1152, 2020.

[119] Zeping Yu, Wenxin Zheng, Jiaqi Wang, Qiyi Tang, Sen Nie, and Shi Wu. "CodeCMR: Cross-Modal Retrieval for Function-Level Binary Source Code Matching." *Advances in Neural Information Processing Systems*, 33, 2020.

[120] Hang Zhang and Zhiyun Qian. "Precise and Accurate Patch Presence Test for Binaries." In *USENIX Security*, 2018.

[121] Zheng Zhang, Hang Zhang, Zhiyun Qian, and Billy Lau. "An Investigation of the Android Kernel Patch Ecosystem." In *Usenix Security*, 2021.

[122] Zhuo Zhang, Wei You, Guanhong Tao, Yousra Aafer, Xuwei Liu, and Xiangyu Zhang. "STOCHFUZZ: Sound and Cost-Effective Fuzzing of Stripped Binaries by Incremental and Stochastic Rewriting." 2021.

[123] Jianzhou Zhao, Santosh Nagarakatte, Milo M.K. Martin, and Steve Zdancewic. "Formal Verification of SSA-Based Optimizations for LLVM." *Proceedings of the 2013 ACM SIGPLAN Conference on Programming Language Design and Implementation*, pages 175–186, 2013.

[124] Lei Zhao, Yuncong Zhu, Jiang Ming, Yichen Zhang, Haotian Zhang, and Heng Yin. "PatchScope: Memory Object Centric Patch Differencing." In *Proceedings of the 2020 ACM SIGSAC Conference on Computer and Communications Security*, pages 149–165, 2020.

[125] Jie Zhou, Ganqu Cui, Zhengyan Zhang, Cheng Yang, Zhiyuan Liu, Lifeng Wang, Changcheng Li, and Maosong Sun. "Graph Neural Networks: A Review of Methods and Applications." *arXiv preprint arXiv:1812.08434*, 2018.

### Appendix

#### A. Binary Code Sanitization

**Address Sanitizer (ASan)** [98] inserts sanitizer checks to detect software defects such as buffer overflows [101]. It instruments each memory access to validate memory addresses with sanitizer checks. ASan also uses a runtime library to hook memory allocation/free and to create poisoned "redzones" for each allocated memory region to detect memory errors.

**Taxonomy of Memory Protection Capability.** The LLVM framework provides ASan as a standard utility. We enable ASan by compiling lifted IR using Clang with the `-fsanitize=address` option. Additionally, we reuse RetroWrite [43], a binary-only rewriting framework, to insert sanitizer checks into binary code. RetroWrite leverages Capstone [85] for disassembling, facilitates relocation symbol recovery, and inserts ASan checks. We compare RetroWrite with McSema and RetDec, given their distinct and representative code lifting schemes: emulation-style lifting vs. high-level lifting (Section III). We follow the notation used in the RetroWrite paper and report the extent to which different memory regions are protected by ASan in Table XIII. As a binary-only solution, RetroWrite can redzone the heap but does not strive to recover global or local variables. RetroWrite thus instruments stack objects at the stack frame granularity, which may miss bugs when the overflow is contained within the frame [43].

Recall that McSema uses emulation-style lifting, meaning the recovered function local stack no longer corresponds to the original stack. Hence, we deem its lifted IR does not facilitate redzoning the stack but protects the heap and globals. Our previous study has shown that RetDec (partially) recovers variables and program stacks, which are similar to Clang-generated LLVM IR code. In principle, RetDec-lifted IR code can enable securing stacks and global memory regions, overcoming the limits of binary-only tools. However, its variable recovery is inaccurate, which means its memory protections are not flawless; we use "partial" in Table XIII to denote this aspect.

**Experiments.** We use the Juliet test suite benchmarked in the RetroWrite paper, which is a collection of test programs containing stack and heap memory vulnerabilities. Each test program has a "good" variant without a vulnerability and a "bad" variant with a vulnerability (generated by slightly modifying the "good" variant). Tools can be evaluated based on errors reported on the bad variants while not flagging errors on the good variants.

We report the bug detection rates of ASan-enabled programs in Table XII and compare these with the rates reported for RetroWrite (reusing results from its paper). For each Juliet test case, we first compare the outputs of the ASan-enabled good variant with its original good variant using its shipped test inputs. If the outputs of the two good variants are equal (see the second row of Table XII), we then test if ASan checks in the corresponding bad variant can capture the memory vulnerability. A false positive means that ASan reports capturing the vulnerability in a good variant, whereas a false negative means that ASan misses capturing the vulnerability in a bad variant.

Given that McSema uses emulation-style stacks, we exclude Juliet test programs containing stack vulnerabilities and report results derived from the remaining ASan in the fifth column of Table XII (heap vulnerabilities). Similarly, we run the released RetroWrite tool [15] on these heap vulnerability cases and report the results in the sixth column.

Clang-inserted ASan (the second column in Table XII) has the highest recall rate, and the remaining false negative cases (1,382) arise because some vulnerabilities in the Juliet dataset are not designed to benchmark ASan. RetroWrite (the third column) shows a good recall rate, comparable to that of Clang-inserted ASan. More importantly, RetroWrite and McSema on heap vulnerability cases yield promising and comparable recall rates (85.1% vs. 89.3%); however, McSema generates 1,310 lifted IR programs that are mal-functional (see the second row of Table XII). Benchmarking ASan over those 1,310 programs becomes meaningless. Our manual study shows that some remaining false negatives are due to bugs that are not triggerable in 64-bit PIC code. Note that RetroWrite can only process 64-bit PIC code, whereas McSema is a versatile cross-platform binary lifter that can process binary code on 32-bit/64-bit x86, ARM, and SPARC architectures. Given that many heap-related vulnerabilities, such as use-after-free bugs, remain unsolved [12, 71, 114], McSema has appealing utility, as on the correctly-lifted IR programs, it shows heap-sanitization performance comparable to that of RetroWrite, the state-of-the-art binary-only solution.

Additionally, McSema's emulation-style lifting can generate slower code than binary-only solutions. Overall, McSema carries large runtime performance overhead as computations are emulated in its lifted IR code. Nonetheless, for Juliet test cases, we report the extra runtime cost is negligible. Our experiments show that McSema + ASan introduces about 40% extra slowdown, whereas RetroWrite + ASan is about 37%. This is reasonable: while Juliet test cases contain comprehensive sets of vulnerabilities, these test programs are not so complex. Complex executables may pose a major challenge for both McSema and RetroWrite: the emulation-style lifting of McSema can likely introduce notable performance penalties, whereas the "reassembleable disassembling" heuristics [110] employed by RetroWrite might be broken (i.e., generating mal-functional code).

Our manual study confirms that in RetDec-lifted IR, ASan checks are inserted in a generally comprehensive way, similar to those in Clang-generated IR. However, almost all LLVM IR lifted by RetDec fails to retain functional correctness. After excluding Juliet test programs that have erroneous outputs, we have 692 remaining programs. We report that vulnerabilities in all the "bad" variants of these 692 programs are missed, resulting in 692 false negatives in Table XII. This evaluation reveals the lack of binary lifters capable of delivering full-fledged sanitization support. Heap memory regions can be protected based on McSema-lifted IR, which exhibits accuracy comparable to that of RetroWrite. In contrast, the sanitization of stacks is dependent on the functional correctness of RetDec-lifted IR code, which requires major improvements.

#### B. Binary Differencing Comparison

We also compare our binary similarity analysis results with those generated by the state-of-the-art binary differencing tool, DeepBinDiff [46], and the industrial standard binary differencing tool, BinDiff [2]. The released DeepBinDiff implementation [45] is highly convenient to use, as it does not require a pre-trained model. Given two executable files, it launches an on-the-fly training process and conducts basic block level matching.

Recall that our discriminability model used in Section VI-C is on the whole program level, whereas DeepBinDiff operates at the basic block level. 

**Table XV: DEEPBINDIFF BINARY DIFFING COMPARISON RESULTS ON POJ-104**

| Tool          | gcc -O0 | gcc -O3 | clang -O0 | clang -O3 |
|---------------|---------|---------|-----------|-----------|
| BinDiff       | 70.2%   | 54.8%   | 57.7%     | 59.6%     |
| DeepBinDiff   | 66.3%   | 68.3%   | 73.1%     | 66.3%     |
| RetDec        | 77.7%   | 80.1%   | 81.0%     | 78.2%     |

**Table XIV: AVERAGE STRUCTUREDNESS AND LOC PER USER-DEFINED FUNCTION OF SPEC PROGRAMS**

| Tool  | gcc -O0 | gcc -O3 | clang -O0 | clang -O3 |
|-------|---------|---------|-----------|-----------|
| Metric|         |         |           |           |

*Note: The metrics for Table XIV are not provided in the text. Please fill in the appropriate metrics for a complete table.*

---

This revised version aims to improve clarity, coherence, and professionalism.