 7097.82712893384  
(1 row)  
digoal=> select #(hll_add_agg(hll_hash_integer(t))) from generate_series(1,7091) g(t);  
 ?column?   
----------  
      NaN  
(1 row)  
-- 所以log2m=10, regwidth=1存储的值并不是7.4e+02, 而是7090. 这不知道是不是文档上的BUG。  
```  
3\. SPARSE  
存储的不是完整的hll_hashval, 而是short-word, 由log2(numberOfRegisters) + registerWidth这两个宽度的比特位组成.  
例如log2m=10, regwidth=1, 则存储1个值消耗11个比特.  
```  
log2(numberOfRegisters) 称为 index.  
registerWidth 称为 value.  
```  
注意这里也有对齐的问题, 如果 BITS = (registerWidth + log2(numberOfRegisters)) * numberOfRegisters 不是8的倍数, 那么末尾需要填0。  
例如 :   
```  
log2m=10, regwidth=1, expthresh= -1(16): (expthresh自动计算得到).  
```  
这种情况下 :   
```  
digoal=> select hll_add_agg(hll_hash_integer(t)) from generate_series(1,17) g(t);  
                       hll_add_agg                          
----------------------------------------------------------  
 \x130a7f05e13c528c33666d51ca776fefde18cb1bfbb07d3fc9fc20  
(1 row)  
```  
长度27字节 :   
```  
digoal=> select octet_length(hll_add_agg(hll_hash_integer(t))::text::bytea) from generate_series(1,17) g(t);  
 octet_length   
--------------  
           27  
(1 row)  
```  
长度计算 :   
17个值占用的空间是11*17=187字节, 不能被8整除, 需要添5个0.  
```  
digoal=> select 11*17;  
 ?column?   
----------  
      187  
(1 row)  
```  
添5个0后等于192; 因此data bytes部分占据24字节.  
```  
digoal=> select 192/8;  
 ?column?   
----------  
       24  
(1 row)  
```  
24加上头部的3个字节正好是27字节.  
```  
-- 手册上的例子 :   
For example, if log2(numberOfRegisters) = 11 and registerWidth = 6, and if the register index/value pairs are (11, 6) and (1099, 19):  
= [(11, 6), (1099, 19), padding]                                    # as unsigned decimal-encoded pairs  
= [(0b00000001011, 0b000110), (0b10001001011, 0b010011), 0b000000]  # as two binary-encoded pairs and 6 bits of padding  
= [(0b00000001011000110), (0b10001001011010011), 0b000000]          # as binary-encoded 17-bit short words and 6 bits of padding  
= [0b00000001, 0b01100011, 0b01000100, 0b10110100, 0b11000000]      # as binary-encoded octets in array  
= [0x01, 0x63, 0x44, 0x5B, 0xC0]                                    # as byte array  
  0x0163445BC0                                                      # as hex  
```  
4\. FULL  
当使用sparse存储可能超过使用full存储的空间开销时, 会转成full存储.   
(或者设置了enablesparse=false,0)时超过expthresh后会从explicit直接转换成FULL.)  
FULL存储结构如下 :   
存储的不是完整的hll_hashval, 而是short-word, 由registerWidth的比特位组成.  
例如log2m=10, regwidth=1, 则存储1个值消耗1个比特.  
registerWidth 称为 value.  
注意这里也有对齐的问题, 如果 BITS = registerWidth * numberOfRegisters 不是8的倍数, 那么末尾需要填0。  
例如 :   
```  
digoal=> select hll_set_defaults(10,2,16,1);  
 hll_set_defaults   
------------------  
 (10,7,16,1)  
(1 row)  
-- 全部填满, 每个short-word是2bit, 可存储范围为0-3. 从下面的print可以看出已经全部填满.  
digoal=> select hll_print(hll_add_agg(hll_hash_bigint(t))) from generate_series(1,9999999::int8) g(t);  
                                               hll_print                                                  
--------------------------------------------------------------------------------------------------------  
 COMPRESSED, 1024 filled nregs=1024, nbits=2, expthresh=16, sparseon=1:                                +  
    0:  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3 +  
   32:  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3 +  
   64:  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3 +  
   96:  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3 +  
  128:  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3 +  
  160:  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3 +  
  192:  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3 +  
  224:  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3 +  
  256:  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3 +  
  288:  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3 +  
  320:  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3 +  
  352:  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3 +  
  384:  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3 +  
  416:  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3 +  
  448:  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3 +  
  480:  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3 +  
  512:  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3 +  
  544:  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3 +  
  576:  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3 +  
  608:  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3 +  
  640:  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3 +  
  672:  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3 +  
  704:  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3 +  
  736:  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3 +  
  768:  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3 +  
  800:  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3 +  
  832:  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3 +  
  864:  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3 +  
  896:  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3 +  
  928:  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3 +  
  960:  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3 +  
  992:  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3   
(1 row)  
-- 手册中的例子 :   