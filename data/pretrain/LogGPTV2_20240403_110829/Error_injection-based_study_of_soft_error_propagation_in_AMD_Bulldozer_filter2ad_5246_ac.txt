Fig.  4  shows  the  error  injection  results  when  RTL 
simulations are run at the unit-level.  In this case, similar to 
the module simulations, EXSC and ID are the most sensitive 
units, while FP and CU are less sensitive. Unit derived LDM 
factors for the LS unit are lower compared to those obtained 
at  the  module  level.  It  has  to  be  noted  in  this  case  the 
workloads  are  unit-specific  (e.g.,  the  EXSC  workload  A 
opcode mix is different from FP workload A). That is why 
we  do  not  compare  the  effectiveness  of  the  workloads 
executed by different units. 
As  previously mentioned, module-level simulations take 
much longer than the unit-level simulations. Table I gives the 
duration  of  the  simulations  for  each  Bulldozer  unit.  The 
duration  of  module  error  injection  simulations  ranges  from 
33  min.,  49  sec.,  when  running  the  Livermore  benchmark 
and injecting an error into the LS unit, to 59 min., 49 sec. for 
injecting   an  error  into   the   CU   unit   while   the   Galgel  
TABLE II.  
AVERAGE LDM FACTORS AND SIMULATION TIME  
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:22:35 UTC from IEEE Xplore.  Restrictions apply. 
TABLE III.  
LDM CONFIDENCE INTERVALS FOR 90% AND 99% 
CONFIDENCE LEVELS 
benchmark  is  executed. In the  case of  unit  simulations,  the 
shortest execution time for one error injection, is 1 min., 11 
sec.  for  LS  workload  C,  while  the  longest  duration  is  13 
min., 45 sec. for LS workload B. 
Table  II  shows   both   the   average   LDM  factors  and 
duration  of  the  error  injection  simulations  executed  at  the 
module and unit levels, for each Bulldozer unit, respectively. 
Unit-level  simulations  provide  good  approximations  of  the 
LDM  factors  for  all  units  except  LS.    The  LS  unit 
simulations  also  have  the  longest  average  execution  time 
compared  to  the  other  units.  The  unit-level  simulations  are 
faster, across the board, when compared to the module-level 
simulations. 
LDM confidence intervals for 90% and 99% confidence 
levels are provided in Table III. The large number of injected 
errors  allows  the  use  of  the  normal  approximation  to  the 
Binomial distribution [26]. As expected, the 99% confidence 
intervals  are  wider.  The  unit-level  simulations  provide  a 
good approximation of LDM for the ID, EXSC, FP, and CU 
units. The 99% CU confidence intervals overlap (module vs. 
unit  simulations). The  most  significant difference occurs in 
the case of the LS unit. 
V.  FUTURE WORK 
Future  error  injection  research  will  target  two  main 
topics. The first topic is finding better workloads for the unit-
level  simulations.  In  particular,  we  need  faster  workloads, 
that  lead  to  more  accurate  LDM  estimates  for  the  LS  unit. 
Second, we intend to perform error injection experiments at a 
lower  granularity  (e.g.,  at the  block level). In  this  way,  we 
will be able to target more accurately the most sensitive logic 
for better protection against soft errors.  
VI.  CONCLUSIONS 
This paper presented the architecture of the latest AMD 
microprocessor  building  block,  the  Bulldozer  module,  the 
error injection methodology used for deriving SER derating 
factors,  and  discussed  the  experimental  results.    The  errors 
were injected into sequential logic of all five Bulldozer units 
(ID, EXSC, FP, LS, and CU). The experiments showed that 
the  integer  execution  and  scheduler  (EXSC)  and  the 
instruction fetch and decode (ID) are the most sensitive units.  
The  nearly  half-million  latches  and  flip-flops  in  the 
Bulldozer  module  and  the  complexity  of  the  design  led  to 
very  long  simulation  times  for  the  entire  module.  We 
performed error injection both at the module and unit levels, 
using  different  workloads,  and  compared  the  results.  Good 
approximations  of  the  derating  factors  were  provided  by 
unit-level  simulations  for  ID,  EXSC,  FP,  and  CU.  As  a 
consequence,  we  consider  unit-level  simulations,  which  are 
much  faster,  to  have  the  potential  to  substitute  for  time-
consuming module-level experiments. More work is needed 
to narrow the gap between module and unit-level results for 
the LS unit. 
ACKNOWLEDGMENT 
The  authors  thank  Rui  Zhao,  Chris  Warling,  Rob 
Weidner,  Mike  Sedmak,  Zak  Smith,  Paul  Moyer,  Paul 
Keltcher,  Mark  Anderson,  Sriram  Srinivasan,  Subramoni 
Parameswaran,  Rajat  Bahl,  and  Adithya  Yalavarti  for  their 
contributions to the software development and support of the 
Bulldozer error injection project. 
REFERENCES 
[1]  H. Ando et al., “Validation of Hardware Error Recovery Mechanisms 
for  the  SPARC64  V  Microprocessor”,  International  Conference  on 
Dependable Systems and Networks, 2008, pp. 62-69. 
[2]  C. 
SER 
Constantinescu, 
of 
microprocessors”,  International  Conference  on  Dependable  Systems 
and Networks, 2005, pp. 754-759. 
characterization 
“Neutron 
[3]  H. Nguyen, Y. Yagil, “A systematic approach to SER estimation and 
solutions”,  International  Reliability  Physics  Symposium,  2003,  pp. 
60-70. 
[4]  H, Nguyen, Y. Yagil, N. Seifert, M. Reitsma, “Chip-level soft error 
estimation  model,"  IEEE  Transactions  on  Device  and  Materials 
Reliability, Vol. 5, No. 3, 2005, pp.365-381. 
[5]  S.  Mukherjee,  C.  Weaver,  J.  Emer,  S.  Reinhardt,  T.  Austin,  "A 
systematic  methodology  to  compute  the  architectural  vulnerability 
factors 
International 
Sympsoium on Microarchitecture, 2003, pp. 29-40. 
for  a  high-performance  microprocessor," 
[6]  A.  Biswas,  R.  Cheveresan,  J.  Emer,  S.  Mukherjee,  R.  Rangan, 
"Computing  architectural  vulnerability  factors  for  address-based 
structures," International Sympsium on Computer Architecture, 2005, 
pp. 532-543. 
[7]  P.  Ramachandrant,  P.  Kudvatt,  J.  Kellingtont,  J.  Schumannt,  P. 
Sanda,  “Statistical  Fault  Injection”,  International  Conference  on 
Dependable Systems and Networks, 2008, pp. 122-127. 
[8]  P.  Kudva,  J.  Kellington,  P.  Sanda,  R.  McBeth,    J.  Schumann,  R. 
Kalla,  "Fault  injection  verification  of  IBM  POWER6  soft  error 
resilience,"  Workshop  on  Architectural  Support  for  Gigascale 
Integration (ASGI), 2007. 
[9]  N. George, C. Elks, B. Johnson, J. Lach, “Transient fault models and 
AVF  estimation  revisited”,  International  Conference  on  Dependable 
Systems and Networks, 2010, pp. 477-486. 
[10]  X. Li, S. Adve, P. Bose, J.  Rivers, “Online estimation of architectural 
vulnerability  factors  for  soft  errors”,  International  Symposium  on 
Computer Architecture, 2008, pp. 341-352. 
[11]  C. Constantinescu, J. Maiz, N. Seifert, S. Stadler, “Logic Soft Errors 
in Servers”, SELSE Workshop, 2005, http://softerrors.info/selse/ 
[12]  L.  Spainhower,  J.  Isenberg,  R.  Chillarege,  J.  Berding,    “Design  for 
Fault-Tolerance  in  System  ES/9000  Model  900”,  International 
Conference on Dependable Systems  and Networks, 1992, pp. 38-47. 
[13]  P.  Meaney,  S.  Swaney,  P.  Sanda,  L.  Spainhower,  “IBM  z990  Soft 
Error  Detection  and  Recovery”,  IEEE  Transactions  on  Device  and 
Materials Reliability, Vol. 5, No. 3, 2005, pp. 419-427. 
[14]  P.  Sanda  et  al.,  "IBM  POWER6  Processor  Soft  Error  Resilience," 
IBM Journal of Research and Development, Vol. 52, No. 3, 2008, pp. 
275-284. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:22:35 UTC from IEEE Xplore.  Restrictions apply. 
[15]  M. Butler, L. Barnes, D. Sarma, B. Gelinas, “Bulldozer: an approach 
to multithreaded compute performance”, IEEE Micro, Vol. 31, No. 2, 
2011, pp. 6-15. 
[16]  T.  Fischer  et  al.,  “Design  solutions  for  the  Bulldozer  32nm  SOI  2-
core  processor  module  in  an  8-core  CPU”,  International  Solid-State 
Circuits Conference, 2011, pp. 78-80. 
[17]  J.  Arlat,  M.  Aguera,  L.  Amat,  Y.  Crouzet,  J.  Fabre,  J.  Laprie,  E. 
Martins,  D.  Powell,  “Fault  injection  for  dependability  validation:  a 
methodology and some applications”, IEEE Transactions on Software 
Engineering, Vol. 16, No. 2, 1990,  pp. 166-182. 
[18]  G.  Choi,  R.  Iyer,  V.  Carreno,  “Simulated  fault  injection:  a 
methodology to evaluate fault tolerant microprocessor architectures”, 
IEEE Transactions on Reliability, Vol. 39, No. 4, 1990, pp. 486-491. 
[19]  M.  Hsueh,  T.  Tsai,  R.  Iyer,  “Fault  injection  techniques  and  tools”, 
IEEE Computer, Vol. 30, No. 4, 1997,  pp. 75-82. 
[20]  D.  Skarin,  R.  Barbosa,  J.  Karlsson,  “GOOFI-2:  A 
tool  for 
experimental dependability assessment”, International Conference on 
Dependable Systems and Networks, 2010, pp. 557-562. 
[21]  K.  Goswami,  R.  Iyer,  L.  Young,  “DEPEND:  A  simulation-based 
IEEE 
environment 
Transactions on Computers, Vol. 46, No. 1, 1997, pp. 60-74. 
for  system 
level  dependability  analysis”, 
[22]  E. Jenn, J. Arlat, M. Rimen, J. Ohlsson, J. Karlsson, “Fault injection 
into  VHDL  models:  the  MEFISTO  tool”,  International  Symposium 
on Fault-Tolerant Computing, 1994, pp. 356-363. 
[23]  V. Sieh, O. Tschäche, F. Balbach, “VERIFY: evaluation of reliability 
using VHDL-models with embedded fault descriptions”, International 
Symposium on Fault Tolerant Computing, 1997, pp. 32-36. 
[24]  J.  C.  Baraza,  J.  Gracia,  D.  Gil,  P.  J.  Gil,  “Improvement  of  fault 
injection techniques based on VHDL code modification”, High-Level 
Design Validation and Test Workshop, 2005, pp. 19-26. 
[25]  J. C. Baraza, J. Gracia, S. Blanc, D. Gil, P. J. Gil, “Enhancement of 
fault injection techniques based on the modification of VHDL code”, 
IEEE Transactions on Very Large Scale Integration (VLSI) Systems, 
Vol. 16, No. 6, 2008, pp. 693-706. 
[26]  K. S. Trivedi, “Probability & statistics with reliability, queuing, and 
computer science applications”, Prentice-Hall, 1982, pp.471- 507 . 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:22:35 UTC from IEEE Xplore.  Restrictions apply.