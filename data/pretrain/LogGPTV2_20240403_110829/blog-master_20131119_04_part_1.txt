## Systemtap examples, DISK IO - 7 Periodically Print I/O Block Time  
### 作者                                                                                                                       
digoal                                                                                                                         
### 日期                                                                                                                                        
2013-11-19                                                                                                                
### 标签                                                                                                                     
PostgreSQL , Linux , systemtap , stap , dtrace , probe                                                                                                                      
----                                                                                                                               
## 背景         
```  
例子来自ioblktime.stp 脚本, 该脚本用以统计每个块设备的io块请求情况, 请求次数, io操作耗费的时间以systemtap的统计变量进程存储, 可以得到块设备上io块请求的平均时间, 总时间, 最大, 最小时间, 次数, 柱状图等等.  
因为内核支持合并块操作, 所以通过ioblock.request触发的块请求, 可能被合并掉, 因此通过对函数kernel.trace("block_bio_frontmerge"), kernel.trace("block_bio_backmerge")的事件跟踪, 可以得到块设备上精确的块操作统计情况.  
脚本内容以及注解 :   
[root@db-172-16-3-150 network]# cd /usr/share/systemtap/testsuite/systemtap.examples/io  
[root@db-172-16-3-150 io]# cat ioblktime.stp  
#!/usr/bin/stap  
global req_time, etimes  
// req_time数组, 索引为上下文变量bio的内存地址. 值为当前时间  
// etimes数组, 索引为设备名, R|W字符串. 存储的值为ioblock的整个操作耗时的统计变量.  
// 如果数组元素超过默认的2048可能会导致运行错误退出, 那么可使用stap -D MAXMAPENTRIES=10240或者更大的值来规避这个错误,  
// 或者指定数组的长度global req_time[100000] 或者是使用rotate数组global req_time%[10000]  
probe ioblock.request  
{  
  req_time[$bio] = gettimeofday_us()  
}  
// 当ioblock请求发生时, 记录下内存地址和当前时间  
probe ioblock.end  
{  
  t = gettimeofday_us()  // 当前事件  
  s =  req_time[$bio]  // 根据bio找到ioblock.request事件记录的请求开始时间.  
  delete req_time[$bio]  // 删除请求开始时间  
  if (s) {  // 当请求未被合并时, 记录此次io操作的耗时.  
    etimes[devname, bio_rw_str(rw)] bi_sector  
        flags = $bio->bi_flags  
        rw = $bio->bi_rw  
        vcnt = $bio->bi_vcnt  
        idx = $bio->bi_idx  
        phys_segments = $bio->bi_phys_segments  
        hw_segments = (@defined($bio->bi_hw_segments)  
                       ? $bio->bi_hw_segments : 0)  
        size = $bio->bi_size  
        bdev = $bio->bi_bdev  
        bdev_contains = $bio->bi_bdev->bd_contains  
        p_start_sect = __bio_start_sect($bio)  
}  
/**  
 * probe ioblock.end - Fires whenever a block I/O transfer is complete.  
 *  
 *  @name      - name of the probe point  
 *  @devname   - block device name  
 *  @ino       - i-node number of the mapped file  
 *  @bytes_done - number of bytes transferred  
 *  @sector    - beginning sector for the entire bio  
 *  @flags     - see below  
 *      BIO_UPTODATE    0       ok after I/O completion  
 *      BIO_RW_BLOCK    1       RW_AHEAD set, and read/write would block  
 *      BIO_EOF         2       out-out-bounds error  
 *      BIO_SEG_VALID   3       nr_hw_seg valid  
 *      BIO_CLONED      4       doesn't own data  
 *      BIO_BOUNCED     5       bio is a bounce bio  
 *      BIO_USER_MAPPED 6       contains user pages  
 *      BIO_EOPNOTSUPP  7       not supported  
 *  @error     - 0 on success  
 *  @rw        - binary trace for read/write request  
 *  @vcnt      - bio vector count which represents number of array element (page, offset, length) which makes up this I/O request  
 *  @idx       - offset into the bio vector array  
 *  @phys_segments - number of segments in this bio after physical address coalescing is performed.  
 *  @hw_segments -   number of segments after physical and DMA remapping hardware coalescing is performed  
 *  @size      - total size in bytes  
 *  
 * Context:  
 *  The process signals the transfer is done.  
 */  
probe ioblock.end = kernel.function("bio_endio")  
{  
        name = "ioblock.end"  
        devname = __bio_devname($bio)  
        ino = __bio_ino($bio)  
        bytes_done = (@defined($bytes_done) ? $bytes_done : $bio->bi_size)  
        error = $error  
        sector = $bio->bi_sector  
        flags = $bio->bi_flags  
        rw = $bio->bi_rw  
        vcnt = $bio->bi_vcnt  
        idx = $bio->bi_idx  
        phys_segments = $bio->bi_phys_segments  
        hw_segments = (@defined($bio->bi_hw_segments)  
                       ? $bio->bi_hw_segments : 0)  
        size = $bio->bi_size  
}  
// 把ioblock.end的rw变量转换成R,W字符串  
/* returns 0 for read, 1 for write */  
function bio_rw_num:long(rw:long)  
%{ /* pure */  
    long rw = (long)STAP_ARG_rw;  
    STAP_RETVALUE = (rw & REQ_WRITE);  
%}  
/* returns R for read, W for write */  
function bio_rw_str(rw:long)  
{  
    return bio_rw_num(rw) == BIO_READ ? "R" : "W"  
}  
这几个函数的源码位置信息:   
[root@db-172-16-3-150 io]# stap -L 'kernel.function ("generic_make_request")'  
kernel.function("generic_make_request@block/blk-core.c:1770") $bio:struct bio*  
[root@db-172-16-3-150 io]# stap -L 'kernel.function ("bio_endio")'  
kernel.function("bio_endio@fs/bio.c:1425") $bio:struct bio* $error:int  
[root@db-172-16-3-150 io]# stap -L 'kernel.trace("block_bio_backmerge")'  
kernel.trace("block_bio_backmerge") $q:struct request_queue* $bio:struct bio*  
[root@db-172-16-3-150 io]# stap -L 'kernel.trace("block_bio_frontmerge")'  
kernel.trace("block_bio_frontmerge") $q:struct request_queue* $bio:struct bio*  
源码 :   
/usr/src/debug/kernel-2.6.32-358.el6/linux-2.6.32-358.el6.x86_64/block/blk-core.c  
/*  
 * We only want one ->make_request_fn to be active at a time,  
 * else stack usage with stacked devices could be a problem.  
 * So use current->bio_{list,tail} to keep a list of requests  
 * submited by a make_request_fn function.  
 * current->bio_tail is also used as a flag to say if  
 * generic_make_request is currently active in this task or not.  
 * If it is NULL, then no make_request is active.  If it is non-NULL,  
 * then a make_request is active, and new requests should be added  
 * at the tail  
 */  
void generic_make_request(struct bio *bio)  
{  
        if (current->bio_tail) {  
                /* make_request is active */  
                *(current->bio_tail) = bio;  
                bio->bi_next = NULL;  