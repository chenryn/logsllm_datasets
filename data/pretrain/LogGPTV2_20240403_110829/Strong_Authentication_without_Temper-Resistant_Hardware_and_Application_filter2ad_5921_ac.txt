the device [4], or even via the automatical backup service
performed by a breached cloud server [2].
• REVEALPW: The adversary could also reveal the passwords
of users on its choices by having access to the REVEALPW
oracle. This corresponds to the case that the user encrypts
its credential with a password that has already leaked.
• SIGN: When a PBC scheme is adopted for end user authen-
tication, the adversary may see many authentication tokens.
This ability is modeled by the SIGN oracle, which allows
the adversary to obtain authentication tokens of its chosen
messages and users. We model this oracle since attackers in
practice can capture the authentication tokens when they are
transferred from the end users to servers (e.g., via phishing
attacks).
• VERIFY: Furthermore, the adversary can get the veriﬁcation
result of an authentication token σ and a message m via
impersonating a user to interact with the server. We model
this attack ability with the VERIFY oracle, which allows
the adversary to obtain the decision result on any query
(username, message, token) made by it. In this oracle, we
model real-world attacker’s ability of communicating with
the server. We do not assume that the attacker can break
5
(A)
PBC
Experiment ExpEUF-CMVA
pp ← Setup(1λ); (sk, isp) ← KeyGen(pp).
RUpw , RUcred , Q ← ∅.
For each i ∈ [n], pwi
[cre i]pwi ← Issue(sk, Reg) (cid:10) (uid i, pwi ).
(uid
, m∗, σ∗) ← A(pp, isp,{uid i}n
$← D, and
∗
i=1, SIGN, VERIFY,
REVEALPW, REVEALCRED).
∗
∗
If Verify(sk, uid∗, m∗, σ∗) = 0, return 0.
If uid
If uid
/∈ Reg, return 1.
= uid i∗ ∈ Reg, then
• If (i∗, m∗) ∈ Q, return 0.
• If i∗ ∈ RUpw ∩ RUcred, return 0.
• If i∗ /∈ RUcred, return 1.
• If i∗ ∈ RUcred ∧ i∗ /∈ RUpw, return 2.
Fig. 3: Experiment for the EUF-CMVA security of PBC
into a server and capture the private keys for cryptographic
protocols, as they can be protected by tamper-resistant
modules (e.g., [58]) at server side.
The Goal of Adversary. The goal of adversary is to forge a
valid authentication token on a fresh message that has never
been queried to the SIGN oracle for an honest user, which
means that it can pretend as the honest user by authenticating
to the server. To deﬁne the adversary’s goal formally, we need
to eliminate some trivial cases and to bound the advantage of
the adversary as follows:
In the game of EUF-CMVA security, the adversary attempts
∗
to generate an authentication token on an username uid
(corresponding to an unregistered user or honest user i∗) and
a fresh message m∗. The adversary is not allowed to trivially
reveal both the password-wrapped credential and password of
user i∗, or answers with a (i∗, m∗, σ∗) where σ∗ is obtained by
querying SIGN(i∗, m∗). We consider two cases when bounding
the advantage of the adversary.
1) In the ﬁrst case that either uid∗ has not been registered or
the password-wrapped credential of user i∗ is not revealed,
the adversary’s advantage should be negligible. That is to
say, it is impossible for an attacker to impersonate as an
honest user when it can not access to the password-wrapped
credential.
2) In the second case that the password-wrapped credential
[crei∗ ]pwi∗ of user i∗ has been revealed, the adversary can
mount online dictionary attacks with the following steps:
a) Guess a password pw(cid:48) and use (uid∗, pw(cid:48), [crei∗ ]pwi∗ )
b) Make a query with (uid∗, m(cid:48), σ(cid:48)) as the input to the
to generate a token σ(cid:48) on an arbitrary message m(cid:48)
VERIFY oracle.
In this case,
the adversary’s advantage is bounded by
the standard advantage of password-based authentication
protocols, which means that the attacker cannot do any
better than guessing the password online.
Deﬁnition 4 (EUF-CMVA): We say that a PBC scheme
PBC is EUF-CMVA secure, if for all PPT adversaries A,
6
i=1 ∈ U such that the following holds:
any polynomial-size integer n, any n different usernames
{uidi}n
AdvEUF-CMVA
AdvEUF-CMVA
PBC,case-1(A) def= Pr[ExpEUF-CMVA
PBC,case-2(A) def= Pr[ExpEUF-CMVA
(A) = 1] ≤ negl(λ),
(A) = 2] ≤ qv|D| + negl(λ),
(A) is deﬁned in Fig. 3; and qv is the
where ExpEUF-CMVA
number of queries made by A to the VERIFY oracle.
PBC
PBC
PBC
Similar to the security notion of digital signatures [30],
a stronger variant of the EUF-CMVA security is strongly
Existential UnForgeability under Chosen Message and chosen
Veriﬁcation queries Attack (sEUF-CMVA), meaning that a
forgery (m∗, σ∗) is considered as valid if (m∗, σ∗) is not from
the SIGN oracle. The security deﬁnition of sEUF-CMVA is
easy to be obtained by slightly modifying the deﬁnition of
EUF-CMVA, i.e., Q now additionally includes the authentica-
(A)
tion tokens created by the SIGN oracle and ExpSEUF-CMVA
returns 0 if (i∗, m∗, σ∗) ∈ Q. The adversary’s advantage
(A) for ∀i ∈ {1, 2} is deﬁned in the same way
AdvSEUF-CMVA
as in Deﬁnition 4.
PBC,case-i
PBC
IV. A PRACTICAL CONSTRUCTION OF PBC
We propose a practical PBC scheme denoted by ΠPBC,
which satisﬁes the security deﬁnition of sEUF-CMVA under
the q-SDH and q-DDHI assumptions. It is efﬁcient enough to
be deployed in practice, and can be implemented by common
cryptographic libraries in many programming languages (e.g.,
OpenSSL in C/C++ and Bouncy Castle in Java) with stan-
dardized elliptic curves. In this section, we will ﬁrst give the
basic ideas underlying the construction of ΠPBC, then present
the detailed protocol as well as prove its security under the
security model described in Section III, and ﬁnally present the
application of PBC as a strong authentication mechanism for
end user authentication.
A. High Level Description
In our concrete construction, the server creates a tag on uid
with its secret key as the user’s credential cre, which is then
encrypted by the user with its password pw. In the process
of authentication, the user proves its possession of cre with
respect to uid, and sends σ and uid to the server. To avoid off-
line attacks when the attacker could see many authentication
tokens and password-wrapped credentials, the techniques that
we adopted are explained as follows:
• We use g1/(γ+uid) as the credential of user, where γ is
the secret key held by server. This is inspired by [16]. The
credential is indistinguishable from random group elements
without the knowledge of γ. We encrypt the credential cre
with pw by [cre]pw ← cre · HG(pw ), where the correspond-
ing decryption algorithm is cre ← [cre]pw · HG(pw )-1 and
HG : D → G is a cryptographic hash function. An attacker
who captures [cre]pw can guess the password with pw(cid:48)
and only obtain [cre]pw · HG(pw(cid:48)). However, it is an group
element that is indistinguishable from the real credential cre,
which can not be used by the attacker to decide whether pw(cid:48)
is the correct password.
• We leverage the “randomize-then-prove” paradigm when the
user proves its possession of a credential w.r.t. uid. The user
randomizes its credential cre as T with a randomness a (i.e.,
T = cre a). It then proves the validity of the randomized
credential T using a signature proof of knowledge πT =
SPK{(a) : ga = PK}(m) for an implicit public-key PK .
• To verify an authentication token σ = (T, πT ), the server
ﬁrst computes PK = T γ+uid, and then checks the validity
of πT . If valid, the server is assured that the claimer holds
the secret a such that ga = T γ+uid, and then believes that
it is the legitimate user who has been issued the credential
w.r.t. uid, since T −a has exactly the form g1/(γ+uid).
• The point here is that σ only could be veriﬁed by the server
who issued the credential (i.e., holding γ), since only the
server can obtain the complete statement (T , PK ) to be
proved in the signature proof of knowledge. Furthermore, it
is also infeasible for an attacker to check the validity of πT
with cre, since PK can not be derived from T and cre.
With these approaches, we eliminate the possibility of off-
line attacks even if an attacker has the ability to steal the
password-wrapped credentials. The attacker can neither verify
the correctness of its guesses on the password through the
decryption results directly, nor by checking the correctness of
the authentication token generated by it as in the conventional
strong authentication mechanisms.
We note that a PBC scheme can not be constructed with un-
deniable signatures [25] or designated veriﬁer signatures [34],
[50] directly. These schemes guarantee that only designated
veriﬁer could convince the validity of the signature, but could
not prevent the attackers from guessing the passwords for
encrypting the credential (i.e., private key) by verifying the
correctness of signature. Furthermore, ΠPBC is also not a simple
application of the Designated-Veriﬁer Non-Interactive Zero-
Knowledge proof (DV-NIZK) [22], and could be instantiated
with standard Fait-Shamir transformation [28] over common
elliptic curves [1]. Our scheme only leverage the idea that, it
is infeasible for the attackers to check the proof when they do
not know the complete statement to be proved.
B. The Detailed Construction
Let HG : D → G be a random oracle. Our scheme ΠPBC is
constructed as follows:
• Setup(1λ): Given a security parameter λ, the setup algo-
rithm chooses a set of group parameters (G, p, g) such that
p is an at least 2λ-bit prime, and then outputs pp = (G, p, g).
• KeyGen(pp): Given the public parameters pp, a server runs
the key generation algorithm which picks γ
p and
computes w ← gγ. The server sets sk ← γ and publishes
isp ← w, and then initializes Reg as empty.
• Issue(γ, Reg) (cid:10) (uid , pw) is executed over a secure chan-
nel. The channel could be established following standard
approaches, such as the TLS protocol.
1) A user sends its username uid to the server.
2) The server aborts if uid ∈ Reg. Otherwise it computes
A ← g1/(γ+uid) and adds uid to Reg. Then it sends
cre ← A to the user.
[A]pw ← A · HG(pw), and then stores [A]pw .
3) The user encrypts its credential cre = A by computing
$← Z∗
• Sign(uid , pw, [A]pw , m): this algorithm decrypts [A]pw by
$← Z∗
computing A ← [A]pw /HG(pw). Then, it chooses a
p
7
and randomizes A as T ← Aa (i.e., T = ga/(γ+uid)), and
generates a signature proof of knowledge w.r.t T as
πT ← SPK(cid:8)(a) : ga = T γ+uid(cid:9) (m).
Finally, it outputs an authentication token σ ← (T, πT ).
• Verify(γ, uid , m, σ): the veriﬁcation algorithm parses σ as
(T, πT ). If T = 1, it outputs 0. Otherwise, it outputs 1 if
VerifySPK ((g, T, uid , γ), m, πT ) = 1 and 0 otherwise.
For practical usage where the user may want to register and
authenticate with the username on its own choice, uid could
be generated via a cryptographic hash function Hp : {0, 1}(cid:63) →
Zp with the chosen username as input.
Instantiation of SPK. Below, we give efﬁcient instantiation for
the signature proofs of knowledge SPK. Let H : {0, 1}∗ → Zp
be a random oracle, SPK could be efﬁciently instantiated as
follows:
Prove: Pick r
$← Zp and compute R ← gr. Then, compute
c ← H(g, T, uid , R, m). Next, compute s ← r + c · a
mod p. Finally, output a proof π ← (c, s).
Verify: Given a tuple (g, T, uid , γ), a message m and a proof
π = (c, s), compute R(cid:48) ← gs · T −(γ+uid)·c mod p, and
then calculate c(cid:48) ← H(g, T, uid , R(cid:48), m). Output 1 if c(cid:48) =
c and 0 otherwise.
One could easily observe that the instantiation of SPK is
an application of the Schnorr signature scheme [54], where
the public key T uid+γ could only be computed by the server
who has γ. Furthermore, the Sign and Verify algorithms could
also be constructed by other standardized signature algorithms
(e.g., ISO/IEC 14888-3 [5] ) in the same way. For the sake
of simplicity, we only present the approach based on Schnorr
proof, which obtains optimized efﬁciency and could be im-
plemented by commonly adopted cryptographic libraries with
standard curves.
C. Security Proof
In this section, we prove that our scheme ΠPBC is sEUF-
CMVA secure, provided that
the q-SDH and q-DDHI as-
sumptions hold in G, HG is a random oracle, and SPK is
unbounded zero-knowledge and simulation-sound extractable.
Furthermore, SPK is zero-knowledge by programming the
random oracle [49], and is simulation-sound extractable in
the random oracle model [13] and generic group model [55]
following along the lines of [53], [56], [24], [61].
Theorem 1: Let A be an adversary against
the sEUF-
CMVA security of PBC scheme ΠPBC who runs in time t, and
makes qs queries to the SIGN oracle and qv queries to the
VERIFY oracle. Then, we have:
AdvsEUF-CMVA
ΠPBC,case-1 (A) ≤ AdvSPK(t(cid:48), qs, qv)+
(qv + 1)(AdvSDHG (t(cid:48)(cid:48), n + 1) + nAdvSDHG (t(cid:48)(cid:48), n)),
AdvsEUF-CMVA
ΠPBC,case-2 (A) ≤ qv|D| + AdvSPK(t(cid:48), qs, qv)+
(qv + 1)AdvSDHG (t(cid:48)(cid:48), n + 1) + nAdvDDHIG
(t(cid:48)(cid:48), n),
where AdvSPK(t(cid:48), qs, qv) = O(Advuzk
SPK(t(cid:48), qs) + Advss−ext