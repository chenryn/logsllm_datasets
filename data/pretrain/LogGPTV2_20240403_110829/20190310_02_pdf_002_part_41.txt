with a DEFAULT rule as long as there are no conflicting values between existing rows in
the table and the values of the partition to be added.
You cannot use the ALTER TABLE… ADD PARTITION statement to add a partition to a
table with a MAXVALUE rule.
You can alternatively use the ALTER TABLE… SPLIT PARTITION statement to split an
existing partition, effectively increasing the number of partitions in a table.
RANGE partitions must be specified in ascending order. You cannot add a new partition
that precedes existing partitions in a RANGE partitioned table.
Include the TABLESPACE clause to specify the tablespace in which the new partition will
reside. If you do not specify a tablespace, the partition will reside in the default
tablespace.
If the table is indexed, the index will be created on the new partition.
To use the ALTER TABLE... ADD PARTITION command you must be the table owner,
or have superuser (or administrative) privileges.
Parameters
table_name
The name (optionally schema-qualified) of the partitioned table.
partition_name
The name of the partition to be created. Partition names must be unique amongst
all partitions and subpartitions, and must follow the naming conventions for
object identifiers.
subpartition_name
The name of the subpartition to be created. Subpartition names must be unique
amongst all partitions and subpartitions, and must follow the naming conventions
for object identifiers.
(value[, value]...)
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 359
Database Compatibility for Oracle® Developers Guide
Use value to specify a quoted literal value (or comma-delimited list of literal
values) by which rows will be distributed into partitions. Each partitioning rule
must specify at least one value, but there is no limit placed on the number of
values specified within a rule. value may also be NULL, DEFAULT (if specifying
a LIST partition), or MAXVALUE (if specifying a RANGE partition).
For information about creating a DEFAULT or MAXVALUE partition, see Section
10.4.
tablespace_name
The name of the tablespace in which a partition or subpartition resides.
10.3.2.1 Example - Adding a Partition to a LIST Partitioned Table
The example that follows adds a partition to the list-partitioned sales table. The table
was created using the command:
CREATE TABLE sales
(
dept_no number,
part_no varchar2,
country varchar2(20),
date date,
amount number
)
PARTITION BY LIST(country)
(
PARTITION europe VALUES('FRANCE', 'ITALY'),
PARTITION asia VALUES('INDIA', 'PAKISTAN'),
PARTITION americas VALUES('US', 'CANADA')
);
The table contains three partitions (americas, asia, and europe) :
acctg=# SELECT partition_name, high_value FROM ALL_TAB_PARTITIONS;
partition_name | high_value
----------------+-------------------------------------
EUROPE | FOR VALUES IN ('FRANCE', 'ITALY')
ASIA | FOR VALUES IN ('INDIA', 'PAKISTAN')
AMERICAS | FOR VALUES IN ('US', 'CANADA')
(3 rows)
The following command adds a partition named east_asia to the sales table:
ALTER TABLE sales ADD PARTITION east_asia
VALUES ('CHINA', 'KOREA');
After invoking the command, the table includes the east_asia partition:
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 360
Database Compatibility for Oracle® Developers Guide
acctg=# SELECT partition_name, high_value FROM ALL_TAB_PARTITIONS;
partition_name | high_value
----------------+-------------------------------------
EUROPE | FOR VALUES IN ('FRANCE', 'ITALY')
ASIA | FOR VALUES IN ('INDIA', 'PAKISTAN')
AMERICAS | FOR VALUES IN ('US', 'CANADA')
EAST_ASIA | FOR VALUES IN ('CHINA', 'KOREA')
(4 rows)
10.3.2.2 Example - Adding a Partition to a RANGE Partitioned
Table
The example that follows adds a partition to a range-partitioned table named sales:
CREATE TABLE sales
(
dept_no number,
part_no varchar2,
country varchar2(20),
date date,
amount number
)
PARTITION BY RANGE(date)
(
PARTITION q1_2012
VALUES LESS THAN('2012-Apr-01'),
PARTITION q2_2012
VALUES LESS THAN('2012-Jul-01'),
PARTITION q3_2012
VALUES LESS THAN('2012-Oct-01'),
PARTITION q4_2012
VALUES LESS THAN('2013-Jan-01')
);
The table contains four partitions (q1_2012, q2_2012, q3_2012, and q4_2012):
acctg=# SELECT partition_name, high_value FROM ALL_TAB_PARTITIONS;
partition_name | high_value
----------------+------------------------------------------------------------------
Q1_2012 | FOR VALUES FROM (MINVALUE) TO ('01-APR-12 00:00:00')
Q2_2012 | FOR VALUES FROM ('01-APR-12 00:00:00') TO ('01-JUL-12 00:00:00')
Q3_2012 | FOR VALUES FROM ('01-JUL-12 00:00:00') TO ('01-OCT-12 00:00:00')
Q4_2012 | FOR VALUES FROM ('01-OCT-12 00:00:00') TO ('01-JAN-13 00:00:00')
(4 rows)
The following command adds a partition named q1_2013 to the sales table:
ALTER TABLE sales ADD PARTITION q1_2013
VALUES LESS THAN('01-APR-2013');
After invoking the command, the table includes the q1_2013 partition:
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 361
Database Compatibility for Oracle® Developers Guide
acctg=# SELECT partition_name, high_value FROM ALL_TAB_PARTITIONS;
partition_name | high_value
----------------+------------------------------------------------------------------
Q1_2012 | FOR VALUES FROM (MINVALUE) TO ('01-APR-12 00:00:00')
Q2_2012 | FOR VALUES FROM ('01-APR-12 00:00:00') TO ('01-JUL-12 00:00:00')
Q3_2012 | FOR VALUES FROM ('01-JUL-12 00:00:00') TO ('01-OCT-12 00:00:00')
Q4_2012 | FOR VALUES FROM ('01-OCT-12 00:00:00') TO ('01-JAN-13 00:00:00')
Q1_2013 | FOR VALUES FROM ('01-JAN-13 00:00:00') TO ('01-APR-13 00:00:00')
(5 rows)
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 362
Database Compatibility for Oracle® Developers Guide
10.3.3 ALTER TABLE… ADD SUBPARTITION
The ALTER TABLE… ADD SUBPARTITION command adds a subpartition to an existing
subpartitioned partition. The syntax is:
ALTER TABLE table_name MODIFY PARTITION partition_name
ADD SUBPARTITION subpartition_definition;
Where subpartition_definition is:
{list_subpartition | range_subpartition}
and list_subpartition is:
SUBPARTITION [subpartition_name]
VALUES (value[, value]...)
[TABLESPACE tablespace_name]
and range_subpartition is:
SUBPARTITION [subpartition_name]
VALUES LESS THAN (value[, value]...)
[TABLESPACE tablespace_name]
Description
The ALTER TABLE… ADD SUBPARTITION command adds a subpartition to an existing
partition; the partition must already be subpartitioned. There is no upper limit to the
number of defined subpartitions.
New subpartitions must be of the same type (LIST, RANGE or HASH) as existing
subpartitions. The new subpartition rules must reference the same column specified in
the subpartitioning rules that define the existing subpartition(s).
You can use the ALTER TABLE… ADD SUBPARTITION statement to add a subpartition to
a table with a DEFAULT rule as long as there are no conflicting values between existing
rows in the table and the values of the subpartition to be added.
You cannot use the ALTER TABLE… ADD SUBPARTITION statement to add a subpartition
to a table with a MAXVALUE rule.
You can split an existing subpartition with the ALTER TABLE… SPLIT SUBPARTITION
statement, effectively adding a subpartition to a table.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 363
Database Compatibility for Oracle® Developers Guide
You cannot add a new subpartition that precedes existing subpartitions in a range
subpartitioned table; range subpartitions must be specified in ascending order.
Include the TABLESPACE clause to specify the tablespace in which the subpartition will
reside. If you do not specify a tablespace, the subpartition will be created in the default
tablespace.
If the table is indexed, the index will be created on the new subpartition.
To use the ALTER TABLE... ADD SUBPARTITION command you must be the table
owner, or have superuser (or administrative) privileges.
Parameters
table_name
The name (optionally schema-qualified) of the partitioned table in which the
subpartition will reside.
partition_name
The name of the partition in which the new subpartition will reside.
subpartition_name
The name of the subpartition to be created. Subpartition names must be unique
amongst all partitions and subpartitions, and must follow the naming conventions
for object identifiers.
(value[, value]...)
Use value to specify a quoted literal value (or comma-delimited list of literal
values) by which table entries will be grouped into partitions. Each partitioning
rule must specify at least one value, but there is no limit placed on the number of
values specified within a rule. value may also be NULL, DEFAULT (if specifying
a LIST partition), or MAXVALUE (if specifying a RANGE partition).
For information about creating a DEFAULT or MAXVALUE partition, see Section
10.4.
tablespace_name
The name of the tablespace in which the subpartition resides.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 364
Database Compatibility for Oracle® Developers Guide
10.3.3.1 Example - Adding a Subpartition to a LIST-RANGE Partitioned
Table
The following example adds a RANGE subpartition to the list-partitioned sales table.
The sales table was created with the command:
CREATE TABLE sales
(
dept_no number,
part_no varchar2,
country varchar2(20),
date date,
amount number
)
PARTITION BY LIST(country)
SUBPARTITION BY RANGE(date)
(
PARTITION europe VALUES('FRANCE', 'ITALY')
(
SUBPARTITION europe_2011
VALUES LESS THAN('2012-Jan-01'),
SUBPARTITION europe_2012
VALUES LESS THAN('2013-Jan-01')
),
PARTITION asia VALUES('INDIA', 'PAKISTAN')
(
SUBPARTITION asia_2011
VALUES LESS THAN('2012-Jan-01'),
SUBPARTITION asia_2012
VALUES LESS THAN('2013-Jan-01')
),
PARTITION americas VALUES('US', 'CANADA')
(
SUBPARTITION americas_2011
VALUES LESS THAN('2012-Jan-01'),
SUBPARTITION americas_2012
VALUES LESS THAN('2013-Jan-01')
)
);
The sales table has three partitions, named europe, asia, and americas. Each
partition has two range-defined subpartitions:
acctg=# SELECT partition_name, subpartition_name, high_value FROM
ALL_TAB_SUBPARTITIONS;
partition_name | subpartition_name | high_value
----------------+-------------------+-------------------------------------------------
EUROPE | EUROPE_2011 | FOR VALUES FROM (MINVALUE) TO ('01-JAN-12
00:00:00')
EUROPE | EUROPE_2012 | FOR VALUES FROM ('01-JAN-12 00:00:00') TO ('01-
JAN-13 00:00:00')
ASIA | ASIA_2011 | FOR VALUES FROM (MINVALUE) TO ('01-JAN-12
00:00:00')
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 365
Database Compatibility for Oracle® Developers Guide
ASIA | ASIA_2012 | FOR VALUES FROM ('01-JAN-12 00:00:00') TO ('01-
JAN-13 00:00:00')
AMERICAS | AMERICAS_2011 | FOR VALUES FROM (MINVALUE) TO ('01-JAN-12
00:00:00')
AMERICAS | AMERICAS_2012 | FOR VALUES FROM ('01-JAN-12 00:00:00') TO ('01-
JAN-13 00:00:00')
(6 rows)
The following command adds a subpartition named europe_2013:
ALTER TABLE sales MODIFY PARTITION europe
ADD SUBPARTITION europe_2013
VALUES LESS THAN('2015-Jan-01');
After invoking the command, the table includes a subpartition named europe_2013:
acctg=# SELECT partition_name, subpartition_name, high_value FROM
ALL_TAB_SUBPARTITIONS;
partition_name | subpartition_name | high_value
----------------+-------------------+--------------------------------------------------
EUROPE | EUROPE_2011 | FOR VALUES FROM (MINVALUE) TO ('01-JAN-12
00:00:00')
EUROPE | EUROPE_2012 | FOR VALUES FROM ('01-JAN-12 00:00:00') TO ('01-
JAN-13 00:00:00')
EUROPE | EUROPE_2013 | FOR VALUES FROM ('01-JAN-13 00:00:00') TO ('01-
JAN-15 00:00:00')
ASIA | ASIA_2011 | FOR VALUES FROM (MINVALUE) TO ('01-JAN-12
00:00:00')
ASIA | ASIA_2012 | FOR VALUES FROM ('01-JAN-12 00:00:00') TO ('01-
JAN-13 00:00:00')
AMERICAS | AMERICAS_2011 | FOR VALUES FROM (MINVALUE) TO ('01-JAN-12
00:00:00')
AMERICAS | AMERICAS_2012 | FOR VALUES FROM ('01-JAN-12 00:00:00') TO ('01-
JAN-13 00:00:00')
(7 rows)
Note that when adding a new range subpartition, the subpartitioning rules must specify a
range that falls after any existing subpartitions.
10.3.3.2 Example - Adding a Subpartition to a RANGE-LIST
Partitioned Table
The following example adds a LIST subpartition to the RANGE partitioned sales table.
The sales table was created with the command:
CREATE TABLE sales
(
dept_no number,
part_no varchar2,
country varchar2(20),
date date,
amount number
)
PARTITION BY RANGE(date)
SUBPARTITION BY LIST (country)
(
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 366
Database Compatibility for Oracle® Developers Guide
PARTITION first_half_2012 VALUES LESS THAN('01-JUL-2012')
(
SUBPARTITION europe VALUES ('ITALY', 'FRANCE'),
SUBPARTITION americas VALUES ('US', 'CANADA')
),
PARTITION second_half_2012 VALUES LESS THAN('01-JAN-2013')
(
SUBPARTITION asia VALUES ('INDIA', 'PAKISTAN')
)
);
After executing the above command, the sales table will have two partitions, named
first_half_2012 and second_half_2012. The first_half_2012 partition has
two subpartitions, named europe and americas, and the second_half_2012 partition
has one partition, named asia:
acctg=# SELECT partition_name, subpartition_name, high_value FROM
ALL_TAB_SUBPARTITIONS;
partition_name | subpartition_name | high_value
------------------+-------------------+-------------------------------------
FIRST_HALF_2012 | AMERICAS | FOR VALUES IN ('US', 'CANADA')
FIRST_HALF_2012 | EUROPE | FOR VALUES IN ('ITALY', 'FRANCE')
SECOND_HALF_2012 | ASIA | FOR VALUES IN ('INDIA', 'PAKISTAN')
(3 rows)
The following command adds a subpartition to the second_half_2012 partition,
named east_asia:
ALTER TABLE sales MODIFY PARTITION second_half_2012
ADD SUBPARTITION east_asia VALUES ('CHINA');
After invoking the command, the table includes a subpartition named east_asia:
acctg=# SELECT partition_name, subpartition_name, high_value FROM
ALL_TAB_SUBPARTITIONS;
partition_name | subpartition_name | high_value
------------------+-------------------+-------------------------------------
FIRST_HALF_2012 | AMERICAS | FOR VALUES IN ('US', 'CANADA')
FIRST_HALF_2012 | EUROPE | FOR VALUES IN ('ITALY', 'FRANCE')
SECOND_HALF_2012 | EAST_ASIA | FOR VALUES IN ('CHINA')
SECOND_HALF_2012 | ASIA | FOR VALUES IN ('INDIA', 'PAKISTAN')
(4 rows)
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 367
Database Compatibility for Oracle® Developers Guide
10.3.4 ALTER TABLE...SPLIT PARTITION
Use the ALTER TABLE… SPLIT PARTITION command to divide a single partition into
two partitions, and redistribute the partition's contents between the new partitions. The
command syntax comes in two forms.
The first form splits a RANGE partition into two partitions:
ALTER TABLE table_name SPLIT PARTITION partition_name
AT (range_part_value)
INTO
(
PARTITION new_part1
[TABLESPACE tablespace_name],
PARTITION new_part2
[TABLESPACE tablespace_name]
);
The second form splits a LIST partition into two partitions:
ALTER TABLE table_name SPLIT PARTITION partition_name
VALUES (value[, value]...)
INTO
(
PARTITION new_part1
[TABLESPACE tablespace_name],
PARTITION new_part2
[TABLESPACE tablespace_name]