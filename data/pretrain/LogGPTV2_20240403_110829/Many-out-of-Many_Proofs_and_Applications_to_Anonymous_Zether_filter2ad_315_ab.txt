### Protocol for the Anonymous Zether Relation

The protocol for the Anonymous Zether relation (1) presents several challenges. Notably, it involves not just two specific ciphertexts (the sender's and receiver's, which must encrypt opposite amounts), but also all other ciphertexts in the list (which must encrypt zero). This requirement precludes a straightforward application of Groth and Kohlweiss’s one-out-of-many proofs [9], as suggested in [6]. A naive approach where the prover conducts [9] N times, each time presenting a different element from the list to the verifier, would be inefficient, incurring super-linear communication and super-quadratic computation. Moreover, this approach would fail to prove the relationship between the N secret indices, particularly whether they are distinct.

Instead, the prover must provide something akin to a verifiable shuffle of the input ciphertexts, allowing the verifier to perform checks on the shuffled ciphertexts. However, traditional shuffle proofs also fall short of our needs, primarily due to inefficiency. The adjustment ciphertexts in the relation (1) are encrypted under the ring members' heterogeneous public keys, as are the ciphertexts representing their post-adjustment balances. Additionally, shuffle proofs provide more information than necessary; they allow the prover to designate a full permutation of the list, whereas our prover only needs to distinguish two elements (the sender's and receiver's). The verifier can complete the permutation arbitrarily. Our protocol leverages this insight.

### Authorized Use
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25, 2022 at 12:14:00 UTC from IEEE Xplore. Restrictions apply.

### Polynomial Construction and Efficient Transmission

The protocol involves constructing polynomials \( P_i(X) \) for \( i \in \{0, \ldots, N-1\} \) and efficiently transmitting their evaluations \( p_i := P_i(x) \) at a challenge \( x \) to the verifier using only \( O(\log N) \) communication. Each \( P_i(X) \) has a high degree (i.e., \( m \), where \( m = \log N \)) if and only if \( i = l \), where \( l \) is a secret index chosen by the prover.

The utility of the vector \( (p_i)_{i=0}^{N-1} \) lies in its use as the exponent in a multi-exponentiation. Multi-exponentiating the public vector of commitments \( (c_0, \ldots, c_{N-1}) \) by \( (p_i)_{i=0}^{N-1} \) "picks out" exactly that commitment \( c_l \) for which \( P_i(X) \) has a high degree, while concealing the value of \( l \).

### Homomorphic Permutation and Reuse

Our first core idea is that, after reconstructing the vector \( (p_i)_{i=0}^{N-1} \) of evaluations, the verifier can "homomorphically permute" this vector and reuse its components in successive multi-exponentiations. This allows the verifier to pick out secret elements among \( c_0, \ldots, c_{N-1} \) in a controlled manner without additional communication.

We fix a permutation \( \kappa \in S_N \). Given the vector \( (p_i)_{i=0}^{N-1} \), the verifier can iteratively permute its components, constructing the sequence of vectors \( (p_{\kappa^{-j}(i)})_{i=0}^{N-1} \) for \( j \in \{0, \ldots, o-1\} \) (where each \( \kappa^{-j} \in S_N \) is an inverse iterate of \( \kappa \) and \( o \) denotes \( \kappa \)'s order in \( S_N \)).

Despite not knowing \( l \), the verifier knows that \( P_{\kappa^{-j}(i)}(X) \) has a high degree if and only if \( i = \kappa^j(l) \). This way, the verifier iteratively applies \( \kappa \) to an unknown initial element \( l \in \{0, \ldots, N-1\} \). Under the condition that \( \langle \kappa \rangle \subset S_N \) acts freely on \( \{0, \ldots, N-1\} \), each sequence \( (l, \kappa, \kappa^2(l), \ldots, \kappa^{o-1}(l)) \) is free of repetitions, and these sequences never overlap. Permutations \( \kappa \) of this type are suitable for our purposes.

### Correction Terms and Linear Maps

The multi-exponentiation does not directly yield \( c_l^{x^m} \) but rather a sum with lower-order terms that need to be canceled out. More generally, there may be up to linearly many such elements, and sending correction terms for each would impose excessive communication costs. Our solution is to correct a "random linear combination" of these terms, evoking techniques used in Bulletproofs [12, §4.1]. We also interpose an arbitrary linear transformation \( \Xi : F_q^o \to F_s^q \). The prover then sends correction terms for the single element \( \sum_{i=0}^{N-1} c_i^{p_{\kappa^{-j}(i)}} \).

### Overview of Our Contribution

One-out-of-many proofs, introduced by Groth and Kohlweiss [9], allow a prover to demonstrate knowledge of a secret element among a public list of commitments, along with an opening of this commitment to zero. These proofs have been used to construct ring signatures, zerocoin, and proofs of set membership [9], and "accountable ring signatures" [10].

By definition, these proofs pertain to only one secret element of a list and establish nothing about the others. However, certain applications require more flexible assertions. Many-out-of-many proofs allow a prover to efficiently prove knowledge of a certain (ordered) subset of a fixed list of commitments, as well as that the elements of this subset satisfy certain properties.

Given a list \( c_0, \ldots, c_{N-1} \) of commitments and a pre-specified linear map \( \Xi : F_q^N \to F_s^q \), a prover might wish to demonstrate knowledge of a secret permutation \( K \in S_N \) and openings to zero of the image points of \( (c_{K(0)}, \ldots, c_{K(N-1)}) \) under \( \Xi \). We show how this can be done, given certain restrictions on \( K \).

This technique is powerful, with an interesting combinatorial flavor. We situate the protocol within a natural family of extensions to [9], parameterized by permutations \( \kappa \in S_N \) whose action partitions \( \{0, 1, \ldots, N-1\} \) into equal-sized orbits. For example, \( \kappa = \text{id} \in S_N \) recovers [9], while \( \kappa \) as an N-cycle corresponds to the above example. Finally, \( \kappa = (0, 2, \ldots, N-2)(1, 3, \ldots, N-1) \) (for even \( N \) and specially chosen \( \Xi \)) is used in the crucial step of Anonymous Zether.

### Theorem

**Theorem II.1.** There exists a sound, honest-verifier zero-knowledge protocol for the many-out-of-many relation \( R_2 \) below, which requires \( O(\log N) \) communication and can be implemented in \( O(N \log^2 N) \) time for the prover and \( O(N \log N) \) time for the verifier.

### Review of One-Out-of-Many Proofs

The central technique of one-out-of-many proofs [9] involves the prover constructing certain polynomials. The evaluation of these polynomials, combined with a random challenge \( v \) chosen by the verifier, ensures the resulting protocol is still sound.

### Canonical Example

To illustrate, consider the case \( \kappa = (0, 1, \ldots, N-1) \). Iterating this permutation corresponds to circularly rotating the vector \( (p_i)_{i=0}^{N-1} \), homomorphically incrementing \( l \) modulo \( N \). The prover sends the top row of a secret circular shift matrix to the verifier, who constructs the rest locally. This process is depicted in Fig. 2.

The multiplication of the circulant matrix in Fig. 2(b) by the vector of curve points \( (c_i)_{i=0}^{N-1} \) takes \( O(N^2) \) time naively. However, this is a circular convolution, and the number-theoretic transform can be applied.

### Circular Convolutions and the Number-Theoretic Transform

We use Fourier-theoretic techniques. While classical treatments handle only the convolution of field-element vectors, we convolve a vector of elliptic curve points. Surprisingly, the number-theoretic transform still works in this setting, even when field multiplication cannot be performed on the right-hand vector's domain. The components of the signal being transformed need only reside in a vector space over a field.

### Many-Out-of-Many Proofs

We turn to our main results. Preliminaries on permutations refer to Cohn [14] for further background. The permutation group \( S_N \) consists of bijections \( \kappa : \{0, \ldots, N-1\} \to \{0, \ldots, N-1\} \), with a group law given by composition. For a permutation \( \kappa \in S_N \) of order \( o \) and some initial element \( l \in \{0, \ldots, N-1\} \), the ordered orbit of \( l \) under \( \kappa \) is the ordered sequence \( (l, \kappa(l), \kappa^2(l), \ldots, \kappa^{o-1}(l)) \).

**Definition III.1.** A permutation \( \kappa \in S_N \) is free if, for each \( l \in \{0, \ldots, N-1\} \), the ordered orbit of \( l \) under \( \kappa \) consists of distinct elements.

Freeness is a natural group-theoretic property. For example, \( \kappa \) is free if and only if its cycle structure consists of equal-length cycles (with no fixed points). Alternatively, freeness captures the property whereby the subgroup \( \langle \kappa \rangle \subset S_N \) induces a free action on \( \{0, \ldots, N-1\} \).

### Commitments to Bits

Our protocol uses the "bit commitment" protocol of Bootle, Cerulli, Chaidos, Ghadafi, Groth, and Petit [10, Fig. 4], specialized to the binary case (i.e., \( n = 2 \)). This protocol improves the single-bit commitment procedure of [9, Fig. 1] and requires slightly less communication. The relation is as follows:

\[ R_1 = \left\{ (B; (b_0, \ldots, b_{m-1}), r_B) \mid \forall k, b_k \in \{0, 1\} \wedge B = \text{Com}(b_0, \ldots, b_{m-1}; r_B) \right\}. \]

The protocol is as follows:
\[ r_A, r_C, r_D, a_0, \ldots, a_{m-1} \leftarrow F_q. \]

### Authorized Use
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25, 2022 at 12:14:00 UTC from IEEE Xplore. Restrictions apply.