that correspond to each legitimate return site for each function re-
turn (callee). This could provide an attacker a useful hint at which
addresses it is legitimate to return. In case these return addresses
contain useful gadgets, then the attacker may return at these ad-
dresses, thus bypassing the ρFEM CFI checks. This limitation can
be addressed in future work by adding an additional level of indi-
rection and computing the ID, which was previously inserted at
the NOPs location, on the fly.
Control flow bending. Control Flow Bending (CFB) [12] showed
that, even with fully-precise static CFI, powerful CRAs are still pos-
sible. ρFEM cannot handle CFB attacks with the same precision as
shadow stack techniques. Note that all other techniques (excluding
shadow stacks) cannot protect against CFB as well. Further, to date
only shadow stack can mitigate this type of attack, but shadow
stacks can be bypassed [22]. Thus, in future work, we plan to make
ρFEM able to mitigate CFB attacks as well, at least to a partial degree.
Inter-modular support. ρFEM can only secure single binaries.
Thus, each used dynamic library has to be compiled in order to be
protected. In the current ρFEM implementation, the IDs for differ-
ent modules may overlap, which increases the return target set. In
addition, inter-modular backward edges are not protected. In future
work, we would like to address this by synchronizing IDs between
modules. As a result, the program modules are compiled after com-
piling dynamic libraries. This allows for forward sharing of ID in-
formation in the modules, which use the dynamic libraries. As such,
we consider this as an engineering limitation that is easily solvable.
Imprecise function pointer callsite analysis. Our experiments
show that function pointer based callsites account for a significant
amount of return targets. This is especially problematic for virtual
callees since these are usually not targets of function pointer based
callsites. In future work, this issue can be addressed by developing a
better address taken (AT) function detection analysis, which would
help to reduce the number of functions that can be targeted by
any function pointer based callsite. Lastly, the function signature
encoding can be improved by using more data types and the object
this pointer.
8 RELATED WORK
There are many defenses to protect backward-edges. In the follow-
ing, we briefly categorize them to differentiate and motivate our
research.
Shadow stack based. SafeStack [15] is an LLVM/Clang com-
piler framework based tool which can protect program backward
edges. SafeStack uses for each program function stack a secondary
shadow stack frame that will be loaded during runtime. However,
Goktas et al. [22] show how SafeStack can be bypassed with rela-
tively low effort, thus bypassing this protection technique. PittyPat
[18] introduces a fine-grained path-sensitive CFI for protecting
both forward and backward edges. It uses shadow stack to maintain
a stack of points-to information during its analysis, it will always
allow only a single transfer target for each return instruction.
Double shadow stack. Zieris et al. [55] propose a leak-resilient
dual stack approach by relocating potentially unsafe objects on a
second stack while keeping the unsafe objects on the program’s
original stack. Compared to ρFEM, our approach does not hide in-
formation, and does not position data at statically defined addresses
as our labels are randomized during each program compilation.
477ρFEM: Efficient Backward-edge Protection Using Reversed Forward-edge Mappings
ACSAC 2020, December 7–11, 2020, Austin, USA
HW register based. Shadesmar [11] is a compact shadow stack
implementation that relies on information hiding and which re-
purposes two new Intel x86 extensions: memory protection (MPX),
and page table control (MPK). It uses a register in order to hide
the shadow stack pointer and thus the access to the shadow stack
which will be located at variable distances in memory. As such it
still relies on information hiding but raises the bar for the attacker
when searching for the shadow stack. The authors admit that in-
formation hiding is fundamentally broken, but recommend it only
because of the resistance to deploying any protection mechanism
with greater than 5% overhead.
Non-shadow stack based. CFL [8] is a GCC compiler based
tool used for protecting backward edges only by instrumenting the
source code (only for 32-bit) of a compiled program. CFL uses a
statically pre-computed program control flow graph (CFG). Thus,
this technique (as it can be observed) relies on the precision of
the computed CFG. CFL can protect against code reuse attacks for
statically linked 32-bit binaries, which violate the statically pre-
computed CFG. CFL provides three modes of operation: (1) just
alignment, (2) single-bit CFL, and (3) full CFL, which each have
different performance overheads. πCFI [40] is a compiler-based
tool, which lazily builds a CFG on the fly during runtime. Indirect
edges are added in the CFG before indirect branches need those
edges. πCFI disallows adding edges, which are not present in the
statically computed all-input CFG (this CFG serves as an upper
bound for the runtime constructed CFG).
Re-purposed registers. µRAI [2] protects backward edges also
without shadow stacks in microcontroller-based systems (MCUS)
by using a specific register to memorize where the legitimate return
address resides. µRAI’s technique relies on moving return addresses
from writable memory to readable and executable memory. It re-
purposes a single general purpose register that is never spilled,
and uses it to resolve the correct return location. At runtime, µRAI
provides each function a uniquely encoded ID (e.g., a hash value)
each time the function is executed.
9 CONCLUSION
We have presented ρFEM, a Clang/LLVM-based backward-edge
runtime protection tool, which leverages static forward-edge in-
formation of C/C++ programs to protect backward edges. We con-
ducted an evaluation of ρFEM with several real-world programs
such as Google’s Chrome Web browser, NodeJS, and Nginx. Our
evaluation results show that only a low median number of return
targets per callee return site are allowed. More precisely, the median
geomean number of return addresses per callee is 1.57 while the
geomean is 2.77. These results confirm that the attack surface is
drastically diminished, thus the chances of successfully performing
a control-flow hijacking attack are considerably reduced. Further,
our experiments with Google’s Chrome Web browser indicate that
ρFEM imposes a low runtime overhead of 3.44% in geomean. Lastly,
ρFEM is compatible with currently available real-world C/C++ appli-
cations such as Google’s Chrome Web browser, readily deployable,
and advances the state-of-the-art protection of program callees.
ACKNOWLEDGMENTS
We thank the anonymous reviewers for their insightful comments.
Further, we want to thank Thurston Dang (MIT, USA), Artur Janc
(Google, CH), Jaroslav Sevcik (Google, DE), and Haohuang Wen
(OSU, USA), for constructive feedback on an earlier version of this
paper, which helped to improve the quality of our work.
apache.org/.
REFERENCES
[1] M. Abadi, M. Budiu, Ú. Erlingsson, and J. Ligatti. 2005. Control Flow Integrity. In
ACM Conference on Computer and Communications Security (CCS).
[2] N. S. Almakhdhub, A. A. Clements, S. Bagchi, and M. Payer. 2020. µRAI: Securing
Embedded Systems with Return Address Integrity. In Network and Distributed
System Security Symposium (NDSS).
[3] Apache Software Foundation. 2017. Apache Httpd. https://httpd.apache.org/.
[4] Apache Software Foundation. 2017. Apache Traffic Server. http://trafficserver.
[5] O. Arias, L. Davi, M. Hanreich, Y. Jin, P. Koeberl, D. Paul, A.-R. Sadeghi, and D.
Sullivan. 2015. HAFIX: Hardware-Assisted Flow Integrity Extension. In Annual
Design Automation Conference (DAC).
[6] ARM. 2015. C++ ABI for the ARM Architecture. http://infocenter.arm.com/help/
topic/com.arm.doc.ihi0041e/IHI0041Ecppabi.pdf.
[7] T. Bletsch, X. Jiang, and V. Freeh. 2011. Mitigating Code-reuse Attacks with
Control-flow Locking. In Annual Computer Security Applications Conference (AC-
SAC).
[8] T. Bletsch, X. Jiang, V. W. Freeh, and Z. Liang. 2011. Jump-Oriented Programming:
A New Class of Code-Reuse Attack. In ACM Asia Conference on Computer &
Communications Security (AsiaCCS).
[9] D. Bounov, R. G. Kici, and S. Lerner. 2016. Protecting C++ Dynamic Dispatch
Through VTable Interleaving. In Network and Distributed System Security Sympo-
sium (NDSS).
[10] E. Buchanan, R. Roemer, H. Shacham, and S. Savage. 2008. When Good In-
structions Go Bad: Generalizing Return-oriented Programming to RISC. In ACM
Conference on Computer and Communications Security (CCS).
[11] N. Burow, X. Zhang, and M. Payer. 2019. SoK: Shining Light on Shadow Stacks.
In IEEE Symposium on Security and Privacy (S&P).
[12] N. Carlini, A. Barresi, M. Payer, D. Wagner, and T. R. Gross. 2015. Control-Flow
Bending: On the Effectiveness of Control-Flow Integrity. In USENIX Security
Symposium (USENIX Security).
[13] T. Chiueh and F.H. Hsu. 2001. RAD: A Compile-Time Solution to Buffer Overflow
Attacks. In International Conference on Distributed Computing Systems (ICDCS).
[14] Clang/LLVM. [n. d.]. Clang/LLVM compiler framework. https://clang.llvm.org/.
[15] Clang/LLVM. [n. d.]. Clang’s SafeStack. https://clang.llvm.org/docs/SafeStack.
html.
cxx-abi/abi.html.
[16] Industry Coalition. [n. d.]. Itanium C++ ABI. https://mentorembedded.github.io/
[17] T. H. Y. Dang, P. Maniatis, and D. Wagner. 2015. The Performance Cost of
Shadow Stacks and Stack Canaries. In ACM Asia Conference on Computer &
Communications Security (AsiaCCS).
[18] R. Ding, C. Qian, C. Song, W. Harris, T. Kim, and W. Lee. 2017. Efficient Protection
of Path-Sensitive Control Security. In USENIX Security Symposium (USENIX
Security).
[19] GCC. 2019. GCC’s Shadow Stack Proposal. https://gcc.gnu.org/onlinedocs/
gcc/Common-Function-Attributes.html#index-stack_005fprotect-function-
attribute.
[20] X. Ge, N. Talele, M. Payer, and T. Jaeger. 2016. Fine-Grained Control-Flow Integrity
for Kernel Software. In European Symposium on Security and Privacy (EuroS&P).
[21] E. Goktas, B. Kollenda, P. Koppe, G. Bosman, Portokalidis, T. Holz, H. Bos, and C.
Giuffrida. 2018. Position-independent Code Reuse: On the Effectiveness of ASLR
in the Absence of Information Disclosure. In European Symposium on Security
and Privacy (EuroS&P).
[22] E. K. Goktas, A. Oikonomopoulos, R. Gawlik, B. Kollenda, I. Athanasopoulos, C.
Giuffrida, G. Portokalidis, and H. J. Bos. 2016. Bypassing Clang’s SafeStack for
Fun and Profit. In Black Hat Europe.
[23] Google. 2017. Google’s Chrome Web browser. https://www.chromium.org/.
[24] J. Gray. 1994. C++: Under the Hood. http://www.openrce.org/articles/files/
jangrayhood.pdf.
[25] Y. Gu, Q. Zhao, Y. Zhang, and Z. Lin. 2017. PT-CFI: Transparent Backward-Edge
Control Flow Violation Detection Using Intel Processor Trace. In Proceedings of
the 7th ACM Conference on Data and Application Security and Privacy (CODASPY).
[26] I. Haller, E. Goktas, E. Athanasopoulos, G. Portokalidis, and H. Bos. 2015.
ShrinkWrap: VTable Protection Without Loose Ends. In Annual Computer Security
Applications Conference (ACSAC).
[27] Intel.
[n. d.].
Intel Control-Flow Enforcement Technology (CET).
https://software.intel.com/en-us/blogs/2016/06/09/intel-release-new-
478ACSAC 2020, December 7–11, 2020, Austin, USA
Paul Muntean, Matthias Neumayer, Zhiqiang Lin, Gang Tan, Jens Grossklags, and Claudia Eckert
technology-specifications-protect-rop-attacks.
[28] J. Salwan. 2018. ROPgadget. https://github.com/JonathanSalwan/ROPgadget.
[29] D. Jang, Z. Tatlock, and S. Lerner. 2014. SafeDispatch: Securing C++ Virtual Calls
from Memory Corruption Attacks. In Network and Distributed System Security
Symposium (NDSS).
[30] LightHTTPD. 2017. LightHTTPD. https://www.lighttpd.net/.
[31] Memcached. 2017. Memcached. https://memcached.org/.
[32] Microsoft. 2009. The STRIDE Threat Model. https://docs.microsoft.com/en-
us/previous-versions/commerce-server/ee823878(v=cs.20)?redirectedfrom=
MSDN.
[33] Microsoft. 2018. Microsft’s Data Execution Prevention. https://msdn.microsoft.
com/en-us/library/windows/desktop/aa366553(v=vs.85).aspx.
[34] P. Muntean, M. Fischer, G. Tan, Z. Lin, J. Grossklags, and C. Eckert. 2018. τ CFI:
Type-Assisted Control Flow Integrity for x86-64 Binaries. In Symposium on Re-
search in Attacks, Intrusions, and Defenses (RAID).
[35] P. Muntean, M. Neumayer, Z. Lin, G. Tan, J. Grossklags, and C. Eckert. 2019.
Analyzing Control Flow Integrity with LLVM-CFI. In Annual Computer Security
Applications Conference (ACSAC).
[36] P. Muntean, S. Wuerl, J. Grossklags, and C. Eckert. 2018. CastSan: Efficient
Detection of Polymorphic C++ Object Type Confusions with LLVM. In European
Symposium on Research in Computer Security (ESORICS).
[37] Nginx. 2017. Nginx. https://nginx.org/en/.
[38] B. Niu and G. Tan. 2014. Modular Control-Flow Integrity. In Programming
Language Design and Implementation (PLDI).
[39] B. Niu and G. Tan. 2014. RockJIT: Securing Just-In-Time Compilation Using Mod-
ular Control-Flow Integrity. In ACM Conference on Computer and Communications
Security (CCS).
[40] B. Niu and G. Tan. 2015. Per-Input Control-Flow Integrity. In ACM Conference
on Computer and Communications Security (CCS).
[41] Node.js Foundation. 2017. NodeJS. https://nodejs.org/en/.
[42] A. Oikonomopoulos, E. Athanasopoulos, H. Bos, and C. Giuffrida. 2018. Poking
Holes in Information Hiding. In USENIX Security Symposium (USENIX Security).
[43] G. Ramalingam. 1994. The Undecidability of Aliasing. In Transactions on Pro-
gramming Languages and Systems (TOPLAS), ACM.
[44] Redis. 2017. Redis. https://redis.io/.
[45] R. Rudd, R. Skowyra, D. Bigelow, V. Dedhia, T. Hobson, S. Crane, C. Liebchen,
P. Larsen, L. Davi, and M. Franz. [n. d.]. Address oblivious code reuse: On the
effectiveness of leakage resilient diversity.. In Proceedings of the Symposium on
Network and Distributed System Security (NDSS).
[46] F. Schuster, T. Tendyck, J. Pewny, A. Tendyck, M. Steegmanns, M. Contag, and
T. Holz. 2014. Evaluating the Effectiveness of Current Anti-ROP Defenses. In
International Symposium on Research in Attacks, Intrusions and Defenses (RAID).
[47] H. Shacham. 2007. The Geometry of Innocent Flesh on the Bone: Return-into-
Libc without Function Calls (On the x86). In ACM Conference on Computer and
Communications Security (CCS).
[48] M. Theodorides. 2017. Breaking Active-Set Backward-Edge CFI. In Technical
Report No. UCB/EECS-2017-78. http://www2.eecs.berkeley.edu/Pubs/TechRpts/
2017/EECS-2017-78.html.
[49] M. Theodorides and D. Wagner. [n. d.]. Breaking Active-Set Backward-Edge CFI.
In Hardware Oriented Security and Trust (HOST).
[50] C. Tice, T. Roeder, P. Collingbourne, S. Checkoway, U. Erlingsson, L. Lozano,
and G. Pike. 2014. Enforcing Forward-Edge Control-Flow Integrity in GCC and
LLVM. In USENIX Security Symposium (USENIX Security).
[51] V. van der Veen, D. Andriesse, E. Göktas, B. Gras, L. Sambuc, A. Slowinska, H.
Bos, and C. Giuffrida. 2015. Practical Context-Sensiticve CFI. In ACM Conference
on Computer and Communications Security (CCS).
[52] xLab. [n. d.]. Return Flow Guard. http://xlab.tencent.com/en/2016/11/02/return-
[53] C. Zhang, S. A. Carr, T. Li, Y. Ding, C. Song, M. Payer, and D. Song. 2016. vTrust:
Regaining Trust on Virtual Calls. In Proceedings of the Symposium on Network
and Distributed System Security (NDSS).
[54] M. Zhang and R. Sekar. 2013. Control Flow Integrity for COTS Binaries. In
USENIX Security Symposium (USENIX Security).
[55] P. Zieris and J. Horsch. 2018. A Leak-Resilient Dual Stack Scheme for Backward-
Edge Control-Flow Integrity. In ACM Asia Conference on Computer and Commu-
nications Security (AsiaCCS).
flow-guard/.
479