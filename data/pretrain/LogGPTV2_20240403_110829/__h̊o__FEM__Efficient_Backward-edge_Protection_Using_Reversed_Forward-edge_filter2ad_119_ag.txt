### Limitations and Future Work

#### Legitimate Return Site Identification
The current implementation identifies legitimate return sites for each function, which could provide an attacker with hints about valid return addresses. If these return addresses contain useful gadgets, the attacker may exploit them to bypass the ρFEM CFI checks. To mitigate this, future work could introduce an additional layer of indirection by dynamically computing the ID previously inserted at NOP locations.

#### Control Flow Bending (CFB)
Control Flow Bending (CFB) [12] demonstrates that even with fully-precise static CFI, powerful control-flow redirection attacks (CRAs) are still possible. ρFEM cannot handle CFB attacks with the same precision as shadow stack techniques. In fact, all other techniques (excluding shadow stacks) also fail to protect against CFB. Shadow stacks, while effective, can be bypassed [22]. Therefore, in future work, we aim to enhance ρFEM to partially mitigate CFB attacks.

#### Inter-Modular Support
Currently, ρFEM is limited to securing single binaries, requiring each dynamic library to be compiled separately for protection. In the existing implementation, IDs for different modules may overlap, increasing the set of potential return targets. Additionally, inter-modular backward edges are not protected. Future work will address this by synchronizing IDs between modules, allowing for forward sharing of ID information in modules that use dynamic libraries. This engineering limitation is considered solvable.

#### Imprecise Function Pointer Call Site Analysis
Our experiments reveal that a significant number of return targets are associated with function pointer-based call sites, particularly problematic for virtual callees, which are usually not targeted by such call sites. Future work will focus on developing a more accurate address-taken (AT) function detection analysis to reduce the number of functions that can be targeted by any function pointer-based call site. Additionally, the function signature encoding can be improved by incorporating more data types and the `this` pointer.

### Related Work

Various defenses have been proposed to protect backward edges. We categorize them below to differentiate and motivate our research.

#### Shadow Stack Based
- **SafeStack [15]**: An LLVM/Clang compiler framework tool that uses a secondary shadow stack frame for each program function stack. However, Goktas et al. [22] demonstrated how SafeStack can be bypassed with relatively low effort.
- **PittyPat [18]**: Introduces a fine-grained, path-sensitive CFI for protecting both forward and backward edges. It maintains a stack of points-to information during its analysis, allowing only a single transfer target for each return instruction.

#### Double Shadow Stack
- **Zieris et al. [55]**: Propose a leak-resilient dual stack approach by relocating potentially unsafe objects to a second stack. Unlike ρFEM, their approach does not hide information and does not position data at statically defined addresses, as labels are randomized during each compilation.

#### HW Register Based
- **Shadesmar [11]**: A compact shadow stack implementation that relies on information hiding and repurposes two new Intel x86 extensions: Memory Protection (MPX) and Page Table Control (MPK). It uses a register to hide the shadow stack pointer, making it harder for attackers to locate the shadow stack. The authors acknowledge that information hiding is fundamentally flawed but recommend it due to the resistance to deploying any protection mechanism with greater than 5% overhead.

#### Non-Shadow Stack Based
- **CFL [8]**: A GCC compiler-based tool that protects backward edges by instrumenting the source code of a compiled program. It uses a statically pre-computed program control flow graph (CFG), relying on the precision of the computed CFG. CFL provides three modes of operation: (1) just alignment, (2) single-bit CFL, and (3) full CFL, each with different performance overheads.
- **πCFI [40]**: A compiler-based tool that lazily builds a CFG during runtime. Indirect edges are added to the CFG before indirect branches need those edges. πCFI disallows adding edges not present in the statically computed all-input CFG, which serves as an upper bound for the runtime constructed CFG.

#### Re-purposed Registers
- **µRAI [2]**: Protects backward edges without shadow stacks in microcontroller-based systems (MCUs) by using a specific register to memorize the legitimate return address. µRAI moves return addresses from writable memory to readable and executable memory, repurposing a single general-purpose register to resolve the correct return location. At runtime, µRAI provides each function a uniquely encoded ID (e.g., a hash value) each time the function is executed.

### Conclusion

We have presented ρFEM, a Clang/LLVM-based backward-edge runtime protection tool that leverages static forward-edge information of C/C++ programs to protect backward edges. Our evaluation with real-world programs, including Google’s Chrome Web browser, NodeJS, and Nginx, shows that only a low median number of return targets per callee return site are allowed. Specifically, the median geomean number of return addresses per callee is 1.57, while the geomean is 2.77. These results confirm a drastically reduced attack surface, significantly lowering the chances of successful control-flow hijacking attacks. Additionally, our experiments with Google’s Chrome Web browser indicate that ρFEM imposes a low runtime overhead of 3.44% in geomean. Lastly, ρFEM is compatible with real-world C/C++ applications, readily deployable, and advances the state-of-the-art protection of program callees.

### Acknowledgments

We thank the anonymous reviewers for their insightful comments. We also want to thank Thurston Dang (MIT, USA), Artur Janc (Google, CH), Jaroslav Sevcik (Google, DE), and Haohuang Wen (OSU, USA) for their constructive feedback on an earlier version of this paper, which helped to improve the quality of our work.

### References

[References listed here as in the original text.]

---

This revised version aims to provide a clearer, more coherent, and professional presentation of the text.