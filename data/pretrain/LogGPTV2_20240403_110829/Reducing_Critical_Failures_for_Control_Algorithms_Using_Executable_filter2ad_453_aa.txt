title:Reducing Critical Failures for Control Algorithms Using Executable
Assertions and Best Effort Recover
author:Jonny Vinter and
Joakim Aidemark and
Peter Folkesson and
Johan Karlsson
Reducing Critical Failures for Control Algorithms 
Using Executable Assertions and Best Effort Recovery 
Jonny Vinter, Joakim Aidemark, Peter Folkesson, Johan Karlsson 
Department  of Computer Engineering 
Chalmers University of Technology 
S-412 96 Goteborg, Sweden 
+46 31 772 1667, +46 31 772 3663 fax 
{vinter, aidemark, peter$ johan} @ce.chnlmers.se 
Abstract 
Systems that use f+l computer nodes to tolerate f node 
failures ordinarily  require  that  the  computer nodes have 
strong failure semantics, i.e. a node should either produce 
correct  results,  or  no  results  at  all.  We show  that  this 
requirement  can  be  relaxed for control  applications,  as 
control  algorithms  inherently  compensate for a  class  of 
value  failures.  Value  failures  occur  when  an  error 
escapes  the  error  detection  mechanisms  in  the  computer 
node and  an  erroneous  value  is sent  to the  actuators  of 
the control  system.  Fault injection experiments  show  that 
89%  of the  value failures  caused  by  bit-jlips  in  a  CPU 
impact  on  the  controlled  object. 
had  no  or  minor 
However,  the  experiments  also  show  that  11%  of  the 
value failures  had  severe  consequences.  These failures 
were  caused  by  bit-flips  affecting  the  state  variables  of 
the  control  algorithm.  Another  set  of  fault  injection 
experiments show that the percentage of the value failures 
with  severe  consequences  was  reduced  to 3%  when  the 
state  variables were protected  with  executable  assertions 
arid best effort recovety mechanisms. 
1. Introduction 
The  .primary  task  for  many  embedded  computer 
systems  is  to  execute  control  algorithms.  Embedded 
control  systems  are  used  in  safety-critical  applications 
such  as  fly-by-wire  systems,  jet-engine  controllers, 
electronic  throttles  and  active  suspension.  Applications 
requiring  extreme levels of dependability,  such as fly-by- 
wire often  use massive redundancy and majority  voting to 
achieve  fault  tolerance,  see e.g.  [I].  Today  replication  is 
usually  introduced  at  the  computer  node  level.  Thus, 
classical  TMR  (triple  modular  redundancy)  [2]  requires 
three  nodes  to  tolerate  one  node  failure.  In  the  general 
case,  2f+l  nodes  are  required  to  tolerate f faulty  nodes. 
Some systems are  designed  to  tolerate  Byzantine  faults, 
which  requires  as much  as 3f+1  nodes  to  toleratefnode 
failures [3] [4]. 
failures.  Massive 
An  advantage of  using  massive  redundancy  is  that  the 
failure  semantics'  of  the  computer  nodes  can  be  weak. 
Weak  failure  semantics implies that  a node  can exhibit  a 
wide range  of failure classes, including  value failures and 
timing 
is,  however, 
considered  too expensive  for a  wide  range  of  embedded 
control  applications.  A more cost-effective  approach  is to 
use  nodes  with  strong  failure  semantics.  Examples  of 
strong  failure  semantics  are  when  a  node  exhibits  only 
fail-stop  or  omission  failures  [5], i.e.  the  node  should 
either produce correct results, or no result  at all. 
redundancy 
Systems  using  computer  nodes  with  strong  failure 
semantics  need  only f + l   nodes  to tolerate f  faulty  nodes. 
An  example  of  such  a  system  is  the  classical  duplex 
system,  which  uses  two  computer  nodes  to  tolerate  one 
node  failure.  Strong  failure  semantics makes  the  task  of 
identifying  a  faulty  node  simple  in  a  duplex  system. 
Duplex  systems  are  commonly  used  in  safety-critical  or 
mission  critical  systems  such  as jet  engine  controllers, 
satellites, and satellite  launchers.  They are also preferred 
in the cost-sensitive  automotive industry. Using computer 
nodes  with  strong  failure  semantics  also  simplifies  the 
design of control systems that must ensure safe shutdown. 
In  order  to  achieve  strong  failure  semantics,  a 
computer  node  must  be  equipped  with  internal  error 
detection  mechanisms.  Duplication  and  comparison  can 
be  used  to  achieve  strong  failure  semantics  for  random 
hardware  faults,  but  this  is  an  expensive  solution  since 
each  node  then  consists  of  two  computers  (with  weak 
failure  semantics)  and  extra  logic  for  comparing  results. 
Thus,  we  need  2(f+l) computers  to  tolerate f computer 
failures. 
' The concept of failure semantics was introduced in [ 5 ] .  
0-7695-1101-5/01 $10.00 0 2001 IEEE 
347 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:07:27 UTC from IEEE Xplore.  Restrictions apply. 
In  cost-sensitive  applications,  strong failure  semantics 
are  achieved  by  combining 
low-cost  hardware  and 
software  error  detection  mechanisms.  These  include 
hardware  mechanisms  such  as  error  correcting  codes, 
memory management units, hardware exceptions, control- 
flow  checking  and  watchdog 
timers.  Examples  of 
software  error  detection  mechanisms  are  executable 
assertions, 
time 
redundant execution of  tasks,  and acceptance tests.  Some 
of  these mechanisms have  the  capability  to detect  errors 
caused  by  software  faults,  which  is  not  possible  with 
hardware duplication  and comparison. 
implemented  exceptions, 
software 
Unfortunately,  most  of  these  techniques  also  have 
rather  low coverage for value errors, i.e. errors that affect 
the  result,  but  not  the  control  flow  or  the  timing  of  a 
computation.  Time  redundant  execution  of  tasks  is  one 
way  to  improve  the  coverage  of  such  errors,  but  as 
demonstrated  in  [6] the  coverage may  still  be  less  than 
100%. 
However,  the  experiments  also  show  that  bit-flips 
affecting the  state variables of the control  algorithm could 
cause  value  failures  with  unacceptable  consequences, 
such  as permanently  locking  the  engineâ€™s  throttle  at  full 
speed.  By  adding  executable  assertions  and  best  effort 
the  control  program,  we 
recovery  mechanisms 
managed  to  significantly  reduce  the  probability  of  value 
failures.  In  particular,  failures  that  locked  the  throttle  at 
full  speed were not observed  when  the target  system was 
running the modified control program. 
to 
The engine control  algorithm  was taken from a design 
[IO],  a  toolbox  for 
library  supplied  with  Simulink 
MATLAB,  which  is  widely  used  for  design  of  control 
In  this  paper,  we  address  the  problem  of  dealing with 
value  failures  in  control  applications.  A  value  failure 
occurs  when  an  error  escapes  the  error  detection 
mechanisms in a computer node and an erroneous result is 
sent  to  the  actuators  of  the  control  system. We consider 
value thilures caused by transient bit-flips occurring in the 
central  processing  unit (CPU) of a computer  node using a 
single CPU.  Particles  such  as heavy-ions,  alpha particles 
and  high-energetic  neutrons  are  known  to  be  causing  bit- 
flips 
[7]. 
Recent  research  indicates  that  such errors also can occur 
at  ground  level,  although  with  a  much  lower probability 
than  In space or the upper atmosphere  [8] [ 9 ] .  
in  aerospace  applications 
in  VLSI-circuits 
In  an  experimental  study  of  an  embedded  engine 
controller,  we  demonstrate  that  a  vast  majority  of  the 
value  failures  caused  by  bit-flips  in  the  CPU had  no  or 
little  impact  on  the  engine.  The  reason  for  this  is  that 
control  applications  in  general  are  inherently robust  with 
respect to value failures, provided that their impact on the 
control  algorithm 
that  of  external 
disturbances affecting the controlled object. 
similar 
to 
is 
algorithms.  The  control  program  was  executed  on  the 
Thor CPU  [l 11,  which has been  specifically designed for 
use in critical embedded, space applications. Bit-flips  were 
injected  into  the  Thor  CPU  using  a  new  fault  injection 
tool  called  GOOFI.  We  have  previously  evaluated  the 
hardware  implemented  error  detection  mechanisms  in 
Thor  [12].  In  this  paper  we  use  software  techniques  to 
handle errors that escape the hardware mechanisms. 
The  remainder  of  the  paper  is  organized  as  follows. 
Section  2 describes the engine control  algorithm.  Section 
3  describes  the  experimental  set  up.  The  results  are 
presented  in  Section  4. Finally,  the  conclusions  are 
presented in Section 5. 
2. The engine controller 
The  engine  controller  investigated  in  this  study  was 
developed  with the MATLAB toolbox Simulink, which is 
a  software  package 
for  modeling,  simulating  and 
analyzing  dynamical  systems.  Simulink  provides  a 
graphical  user  interface  for  building  block  diagrams  of 
models  using  click-and-drag  mouse  operations  and 
generating 
that 
implements the model. The Ada code used  for our model 
was generated with the product Real-Time Workshop Ada 
Coder, which is an extension for Simulink. 
software  code 
corresponding 
the 
The controller  is a proportional-integral  (PI) controller 
used  for  controlling the  speed  of  an  engine.  The  target 
system  for  the  fault  injection  experiments executed only 
the code generated for the PI controller block in Figure  1. 
Figure 1.  Simulink model of the engine control 
system. 
The code  generated  for the rest  of  the  engine control 
system  in  Figure  1  was  used  to  simulate the  controlled 
object  (i.e.  the  engine)  and  was  executed  on  a  Unix 
workstation  and  was not  subjected  to fault injection. The 
workstation hosted the board containing the target system 
and was also executing the fault injection tool. 
The  PI  controller  is  shown  in  detail  in  Figure  2.  It 
controls the  speed of  the engine by  adjusting the opening 
348 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:07:27 UTC from IEEE Xplore.  Restrictions apply. 
angle of  the engineâ€™s throttle, which lies between 0.0 and 
70.0 degrees.  The  control  error  signal  e  is  calculated  as 
the  difference  between  the  reference  value  r  (speed 
wanted)  and the actual engine speed J by: 
where  k  is  the sample number.  The PI controller consists 
of  an  integrating  part  and  a  proportional  part.  The 
integrating  part  integrates  the  error  signal  e  (multiplied 
with the integral  gain K,) as: 
x ( k )  = x ( k  - 1 ) + T   . K i . e ( k )  
(2) 
where  T  is  the  sample  interval. 
In  addition,  the 
proportional  part  directly scales the  control  error signal  e 
by  the proportional  gain  K,,  and the desired  throttle angle 
is !he  SUZI  of the integral  and the proportional  parts, as: 
u ( k )  = K p . e ( k ) +  x ( k ) .  
(3) 
The  output  signal  u(k) can  assume  values  outside  the 
interval  0.0 to  70.0 degrees. The limit  output  function  in 
Figure  2,  assures that  the  output  signal  u-linz  lies  within 
this  interval.  There  is  also  an  anti-windup  function  that 
cuts off  the  integration  if  the  input y  from  the  engine  is 
not  responding  to  the  output  U-[im  from  the  controller 
when the siznal is limited (i.e. at 0.0 or 70.0 degrees). 
I 
PI Controller 
I 
I 
Figure 2.  PI controller block from Figure 1, 
executing on the target system. 
This  results  in  the  control  error  signal  e  not  being 
equal  to zero. An example could be a full throttle angle of 
70  degrees  (upper  limit)  but  a  heavy  load  holding  the 
engine  speed  down  resulting  in  e  > 0  that  erroneously 
increase  the  value  of  the  state x  (above the  upper  limit) 
according to equation (2). In this case, the integration  will 
be stopped until  u-lim  is back within the defined limits. 
A  simplified  algorithm  of  the  PI  controller  workload 
can be expressed as: 
x  :  float 
function PI-Controller(r,  y  :  float) 
--  state of  the controller 
begin 
--  constants 
Kp, T: constant  float 
e, U ,  U-lim,  Ki  : float --  controller variables 
e = r - y  
U  =  e *  Kp +  x 
u-lim  =  limit-output(u)  -- range check of U 
if  anti-windup-activated  then 
--  calculate  control erroz 
--  calculate  output  signal 
Ki =  0.0 
Ki =  integral-gain 
else 
end  i f  
x  =  x  +  T *  e  *  Ki 
return u-lim 
end 
--  disable integration 
--  enable integration 
_ -  integrate,  update x 
Algorithm I.  The PI  controller algorithm. 
In  our experiments, a sequence of  650 iterations of the 
PI controller algorithm was executed. This corresponds to 
a total  time interval of  10 seconds with  a sample interval 
of  15.4 milliseconds. As shown in Figure 3, the reference 
speed r was kept  constant at 2000 rpm for the first half  of 
the  10 second interval  and was then changed momentarily 
to  3000  rpm.  The  figure  also  shows  the  actual  engine 
speed y. 
Figure 3.  Reference speed r (white) vs. 
actual engine speed y (grey). 
Figure 4  shows how  the  engine load  varies  during the 
observed time  interval. The  variations  of the  engine load 
cause the differences between the reference speed and the 
actual  engine  speed  at  time  3  "tlg"rc 
T q L i  Syileni 
I 
r._..._._..._...... 
:  Target System 
j 
I _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . _  
Figure 6.  Overview of the experimental setup. 
350 
Figure 4.  Engine load. 