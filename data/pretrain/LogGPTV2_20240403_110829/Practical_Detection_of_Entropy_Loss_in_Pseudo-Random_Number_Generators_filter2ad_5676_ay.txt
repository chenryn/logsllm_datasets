• ε3 = 9 · 22k · εF0 and
• ε4 = 22k−µ · (2 log2(κ) + νκ).
2−v Security. With m = 256, µ = 128, εF = εF0 ≈ 2−127: ε1  9k + 2v + 5 + m and γ∗ > n + λ − k; ε2  701 and γ∗ > n + λ − 40. With ν = 2, we need n = 256κ − 128 > 701
and thus κ = 4, which ensures that the contraints on ε2 and ε4 are satisﬁed . Finally, n = 896
and γ∗ = 858 for λ ≈ 2.
2−64 Security. Unfortunately, for k = v = 64, one cannot get a provable security with the size
of the input block µ = 128, because of the collisions on the counters. In order to increase the
size of the input blocks, one can XOR pseudo-random permutations to get a pseudo-random
— 110 —
6.6. Benchmarks
s
e
l
b
a
i
r
a
v
c
i
l
b
u
p
X00
C0
K0
F0
p0
F
F0
p1
F
C1
K0
L
C0 + 1
K0
F0
p2
F
F0
p3
F
C1 + 1
K0
L
C2
K0
F0
p4
F
F0
p5
F
C2 + 1
K0
L
First block
Second block
Third block
Figure 6.9 – Example of Instantiation of Generator G for Higher Security Bounds
function on larger inputs [Luc00]. This makes ε4 negligible: 22k−2µ = 2−128, and thus the factor
νκ will not aﬀect it. On the other hand, to make ε2 and ε3 small enough, we need εF and εF0
to be smaller than 2−200, and then use AES with 256-bit keys. But then we have to use the
same key 6 times in order to extract 384 bits (see a 3-block extraction in Figure 6.9), where
κ keys are used ν = 6 times, and two counters C0 and C1 are extracted: m = 3 · 128 = 384,
n = 3 × 128 × κ − 128 = 384κ − 128. As for the constraint on ε1, we need 384κ > 1221. We can
take κ = 4. Then, n = 1408 and γ∗ = 1346.
— 111 —
Chapter 6. Robustness Against Side-Channel Attacks
— 112 —
Chapter 7
Security Analysis
7.1
Introduction
From Security Models to Implementations. We discuss brieﬂy some interesting common
points in the security models presented in [DHY02, BH05], in the robustness model (Chapter
4) and in the robustness against memory attacks model (Chapter 5) as well as their potential
use to assess the security of the implementations of pseudo-random number generators with
input. All security models consider an adversarial environment for the generator. The security
model of [DHY02] does not take into account an attack in which the generator is refreshed
with adversarial inputs, whereas this situation is considered in [BH05] and in our two models of
robustness. In [DHY02], the internal state of the generator is composed of two parts, named key
and initial state; the generation algorithm takes as input both of them and updates the initial
state. In concrete implementations the internal state is considered as a single entity, as modelled
in [BH05] and in the two robustness models. Finally, entropy accumulation in the internal state
is modelled clearly only in the two robustness models. Therefore we use two robustness models
as a starting point for our analysis. Furthermore, our source code analysis shows that in certain
situations, only a partial compromise of the internal state is necessary to make the generator
predictable. As a partial compromise of the internal state is only captured in our model of
robustness against memory attacks, we use it to identify precisely the part of the internal state
that needs to be compromised to break the security of some generators.
From Implementations To Security Models. We use Deﬁnition 27 for pseudo-random
number generator with input in all this chapter. This deﬁnition describes a pseudo-random
number generator as a triple of algorithms G = (setup, refresh, next), where setup is a probabilistic
algorithm that outputs a public parameter seed for the generator. As entropy needs to be
extracted from the inputs used to refresh the generator, a randomness extractor is needed,
ensuring that each input actually gives entropy to the generator. However, it is well known that
no deterministic extractor can extract good randomness from all entropy sources and therefore
a seeded extractor is necessary (see Section 2.6). In all implementations, no explicit extractor
is deﬁned; whereas all generators considered in this chapter use the SHA1 hash function to
mix new input into the current internal state or to generate outputs. We therefore assume
for our analysis that the SHA1 function deﬁnes a hash functions family used as an extractor,
whose seed is the public parameter K = K0||K1||K2||K3, where K0 = 5A827999, K1 = 6ED9EBA1,
K2 = 8F1BBCDC, and K3 = CA62C1D6 are the round constants deﬁned in the SHA1 speciﬁcation
[SHA95]. Hence, for all generators presented in this chapter, we assume that the algorithm setup
always outputs this public parameter K, of size 128 bits and the underlying extractor is the hash
function family deﬁned in the speciﬁcation [SHA95], indexed by the parameter K. We will
therefore refer to the SHA1 function in our description as HK, to identity the underlying hash
— 113 —
Chapter 7. Security Analysis
function family. As a consequence, this assumption shows that our attacks on these generators
are independent of the speciﬁc hash function used and are really related to their design.
Consider Algorithms hK, HK, PAD and SHA1 described in Table 7.1. These algorithms allow to
describe the hash function SHA1 as a particular instance of the hash functions family HK, with
the compression function hK. Note that this description is similar as the one done in [GB01].
n)
SHA1
Require: M, |M| < 264
1: K = 5A827999||6ED9EBA1||
8F1BBCDC||CA62C1D6
2:
3: V ← HK(M)
4: return V
HK
Require: M, |M| < 264,
1: y = PAD(M)
2: Parse y as M1||M2|| · · · ||Mn, where |Mi| = 512 (1 ≤ i ≤
3: V = 67452301||EFCDAB89||98BADCFE||
10325476||C3D2E1F0
4:
5: for i = 1 to n do
V ← hK(Mi||V)
6:
7: end for
8: return V
PAD
Require: M, |M| < 264
1: d ← (447 − |M|) mod 512
2: Let ‘ be the 64-bit binary representation of |M|
3: y ← M||1||0d||‘
4: return y
Notations
X ∧ Y : bitwise AN D of X and Y
X ∨ Y : bitwise OR of X and Y
X ⊕ Y : bitwise XOR of X and Y
¬X: bitwise complement of X
X + Y : integer sum modulo 232 of X and Y
ROTL‘(X): circular left shift of bits of X by ‘ positions
(0 ≤ ‘ ≤ 31)
15)
14:
hK
Require: B||V, |B| = 512, |V| = 160
1: Parse B as W0||W1|| · · · ||W15, where |Wi| = 32 (0 ≤ i ≤
2: Parse V as V0||V1|| · · · ||V4, where |Vi| = 32 (0 ≤ i ≤ 4)
3: Parse K as K0|| · · · ||K3, where |Ki| = 32 (0 ≤ i ≤ 3)
4: for t = 16 to 79 do
5: Wt ← ROTL1(Wt−3 ⊕ Wt−8 ⊕ Wt−14 ⊕ Wt−16)
6: end for
7: A ← V0, B ← V1, C ← V2, D ← V3, E ← V4
8: for t = 0 to 19 do
9:
10: end for
11: for t = 0 to 79 do
12:
13:
if 0 ≤ t ≤ 19 then f ← (B ∧ C)∨ ((¬B)∧ D) end if
if 20 ≤ t ≤ 39 or 60 ≤ t ≤ 79 then f ← B ⊕ C ⊕ D
end if
if 40 ≤ t ≤ 59 then f ← (B ∧ C)∨ (B ∧ D)∨ (C ∧ D)
end if
T ← ROTL5(A) + f + E + Wt + Lt
E ← D, D ← C, C ← ROTL30(B), B ← A, A ← T
Lt ← K0, Lt+20 ← K1, Lt+40 ← K2, Lt+60 ← K3
15:
16:
17: end for
18: V0 ← V0 + A, V1 ← V1 + B, V2 ← V2 + C, V3 ← V3 + D,
19: V ← V0||V1||V2||V3||V4
20: return V
V4 ← V4 + E
Table 7.1 – Algorithms hK, HK, PAD and SHA1
In [FPZ08], Fouque et al. gave an analysis of the use of the cascade construction as an entropy
extractor. The cascade construction is used for iterated hash functions, such as SHA1.
In
particular, Fouque et al. showed, that the cascade mode is a good randomness extractor, if the
compression function is a pseudo-random function. This result can be used to assess the security
of the hash function family HK function as a randomness extractor: assuming that the function
hK (which corresponds to the compression function of the HK hash function family) is a pseudo-
random function, the family HK is a randomness extractor. Hence the seed of the extractor is
of size 128 bits.
An Illustrative Example Let us illustrate our analysis. All implementations contain instruc-
tions that can be easily related to the refresh and next algorithms. However, while our security
model considers generators that may be refreshed with potentially biased inputs, in some ap-
plications, the refresh algorithm is called just one time with a single input. Hence after this
single call, the entropy contained in S (named γ∗) is bounded by the size of the input (named
p). An adversary may gain information about the behavior of the environment and estimate the
entropy of this single input when collected by the generator. An example of this idea is presented
in [MMS13], where it was discovered that the input in the Android SHA1PRNG implementation
— 114 —
7.2. Security of Linux Generators
actually contains very low entropy since it was not generated by several calls to system variables.
During our analysis, we discovered vulnerabilities that are complementary to this work, as we
focus on the global behavior of the generators.
In our security models, an adversary can compromise the internal state (partially or totally) and
the security game ensures that enough entropy is accumulated in the internal state to generate
output. The OpenSSL library contains a pseudo-random number generator with an internal
state of size 1072 bytes, which contains an entropy pool of size 1023 bytes and internal coun-
ters. The structure of S, that we named its decomposition in Section 5.1, is public for OpenSSL
and known to the adversary. We show that an adversary only needs to compromise 40 bytes
of the internal state and to control 23 bytes of an input of size 1023 bytes (with a legitimate
distribution sampler, as described in Deﬁnition 28) to predict a future output of the generator.
Hence, this shows that this pseudo-random number generator with input does not resist a single
relatively small internal state compromise.
7.2 Security of Linux Generators
In Unix-like operating systems, a pseudo-random number generator with input was implemented
for the ﬁrst time for Linux 1.3.30 in 1994. The entropy source comes from device drivers and
other sources such as latencies between user-triggered events (keystroke, disk I/O, mouse clicks,
. . . ).
It is gathered into an internal state called the entropy pool. The internal state keeps
an estimate of the number of bits of entropy in the internal state and (pseudo-)random bits
are created from the special ﬁles /dev/random and /dev/urandom. Barak and Halevi [BH05]
discussed brieﬂy the generator /dev/random but its conformity with their robustness security
deﬁnition is not formally analyzed.
The ﬁrst security analysis of these generators was given in 2006 by Gutterman, Pinkas and
Reinman [GPR06]. It was completed in 2012 by Lacharme, Röck, Strubel and Videau [LRSV12].
Gutterman et al. [GPR06] presented an attack based on kernel version 2.6.10 for which a ﬁx has
been published in the following versions. Lacharme et al. [LRSV12] gives a detailed description
of the operations of the generators and provides a result on the entropy preservation property
of the mixing function used to refresh the internal state.
The Linux operating system contains one pseudo-random number generator with input, that has
two user interfaces, named /dev/random and /dev/urandom. They are part of the kernel and
used in the OS security services and some cryptographic libraries. We give a precise description1
of this pseudo-random number generator with input in accordance with Deﬁnition 27 as a triple
LINUX = (setup, refresh, next) and we prove the following theorem:
Theorem 21. The pseudo-random number generator with input LINUX is not robust.
Since the actual generator LINUX does not deﬁne any seed (i.e. the algorithm setup always
output the empty string), as mentioned above, it cannot achieve the notion of robustness.
However, in the following, we additionally mount concrete attacks that would work even if
LINUX had used a seed in the underlying hash function or mixing function. The attacks exploit
two independent weaknesses, in the entropy estimator and the mixing functions, which would
need both to be ﬁxed in order to expect the generators to be robust.
1All descriptions were done by source code analysis. We refer to version 3.7.8 of the Linux kernel.
— 115 —
Chapter 7. Security Analysis
General Overview
Security Parameters. The generator LINUX uses parameters n = 6144, ‘ = 80, p = 96. The
parameter n can be modiﬁed (but requires kernel compilation), and the parameters ‘ (size of
the output) and p (size of the input) are ﬁxed. The generator outputs the requested random
numbers by blocks of ‘ = 80 bits and truncates the last block if needed.
Internal State. The internal state of generator LINUX is a triple S = (Si, Su, Sr) where
|Si| = 4096 bits, |Su| = 1024 bits and |Sr| = 1024 bits. New data is collected in Si, which is
named the input pool. Output is generated from Su and Sr which are named the output pools.