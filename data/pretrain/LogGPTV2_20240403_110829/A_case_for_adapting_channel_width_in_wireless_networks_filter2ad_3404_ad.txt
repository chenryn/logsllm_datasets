ity that causes many losses or high contention that creates fewer
opportunities for transmitting. These causes need to be treated dif-
ferently. In the ﬁrst, probing and potentially moving to a narrower
channel is the correct decision.
In the second, moving to a nar-
rower channel is unlikely to alleviate the problem. In fact, probing
and possibly moving to a wider channel can help at high data rates.
The main advantage of limiting probing to adjacent channel widths
is that only the most relevant channel widths are sampled. If nodes
are using the currently optimal width of 10 MHz, for instance, Sam-
pleWidth may sample the adjacent widths (5 MHz and 20 MHz)
depending on the achieved data rate, but unless conditions change
(e.g., due to mobility), it does not waste time on sampling wider
channels which are very likely to have poor performance. We now
show below that limiting search to adjacent widths does not come
at the cost of transmitting at suboptimal channel widths.
5.4 Optimality and Convergence
The critical question regarding the effectiveness of SampleWidth
is whether it converges to the optimal channel width or gets stuck
in a local minima. For instance, in a scenario where the optimal
throughput is at 40 MHz but the throughput at 10 MHz is higher
than at 20 MHz, nodes would be stuck at 10 MHz after starting at
5 MHz.
In order to formally show that such local minima are unlikely
to exist, we introduce the notion of smoothness that captures the
correlation between the channel width and the average data rate
that autorate settles on.
For a given channel width Bi, let R(Bi) be the average achieved
data rate, i.e., the best data rate that autorate settles on when using
channel width Bi. For a coarse approximation, let T (Bi) = B ·
R(Bi) denote the achieved throughput. No channel width should
be a local minima. Formally, an intermediate channel width Bi is
not a local minima if one of the two following properties holds for
some constant λ ≥ 1.
T (Bi) ≤ T (Bi+1) ⇒ T (Bi) > λ · T (Bi−1)
T (Bi) ≤ T (Bi−1) ⇒ T (Bi) > λ · T (Bi+1)
The constant λ quantiﬁes the degree to which the above properties
are satisﬁed. If at least one of the properties holds with λ ≥ 1 then
Bi is not a local minimum. Hence, for every channel width for
which either T (Bi) ≤ T (Bi+1) or T (Bi) ≤ T (Bi−1), we deﬁne
the smoothness of Bi as
S(Bi) = max
T (Bi)
T (Bi−1)
,
T (Bi)
T (Bi+1)
j
ﬀ
.
Based on this, we can deﬁne the smoothness of the entire system as
S = minBi S(Bi) over all channel widths that are not maxima.
The importance of smoothness stems from the fact that if S ≥
1—i.e., if the system is convex— it guarantees that greedy local
search converges to the global optimum. Moreover, if S is greater
than 1, then the above properties becomes more robust and local
search converges to the optimum point even if each sample may be
inaccurate and even if autorate does not ﬁnd the best possible data
rate. Speciﬁcally in our case, if S > 1, SampleWidth converges to
the optimum even if the average data rate obtained by autorate is
by a factor of S worse than the best possible modulation scheme.
This is because for two channel widths Bi and Bi+1, the achieved
throughput of such an autorate algorithm could deviate from the
optimal T (Bi) and T (Bi+1) by at most a factor of S, respectively.
Hence, for smoothness S, our algorithm can still decide which of
the channel widths is better. On the other hand, if smoothness S
is very low, less than 1, it implies that no efﬁcient channel width
adaptation algorithms exist because the optimal conﬁguration can
only be found if all options are sampled.
So, the question is, what is the value of S? Intuitively, there
are strong arguments why S should be at least 1. Our measure-
ments in Section 3 show that the average data rate R(B) is a non-
increasing in B: as the channel becomes wider, the modulation
yielding the best throughput drops. Importantly, our range experi-
ments further indicate that once a critical attenuation is reached for
a given channel width, the achievable throughput drops sharply. In
the sequel, we capture this making only the very weak assump-
tion that R(B) is concave in B. For example, if the effective
data rate is halved when going from 10 MHz to 20 MHz, it must
drop at least as much when going to 40 MHz.
If we thus as-
(B) ≤ 0 holds4, the second deriva-
sume that R(cid:2)
tive of the resulting throughput function T (B) = B · R(B) is
4For the sake of simplicity, we assume B and R(B) to be continu-
ous for this argument. The same argument would hold for discrete
values and difference quotients.
(B) ≤ 0 and R(cid:2)(cid:2)
δ2T (B)
(B) + 2R(cid:2)
(B) ≤ 0, implying that T (B) is a con-
δB2 = BR(cid:2)(cid:2)
cave function in B. Hence, there is no local minimum and Sam-
pleWidth converges to the optimal channel width.
In theory, the wireless medium should thus be smooth even under
minimal assumptions. Later, in Section 6.4, we empirically show
that this is indeed the case even in our interference-ridden indoor
setting.
Optimality of Parameters: Besides convergence, the other in-
teresting question is regarding the choice of the two thresholds α
and β. When determining the best possible values, we seek to
satisfy all of the following objectives: i) avoid disconnections, ii)
avoid unnecessary probing, and iii) probe new channel widths sufﬁ-
ciently often in order to avoid getting stuck on a suboptimal channel
width. Clearly, these goals are contradictory. i) demands for a high
value of β and ii) asks for low α and high β, respectively. On the
other hand, in order to meet the third objective, the thresholds must
not be too strict, i.e., not too low for α; not too high for β.
t
P
bTt that SampleWidth achieves when
We determine the optimal values of α and β using our mea-
sured data sets. For a given setting (say, for a given distance or
attenuation between sender and receiver), and for concrete val-
ues of α and β, we compute the long-term average throughput
TSW (α, β) = limt→∞ 1
t
starting at some arbitrary width. Let TOP T denote the average
throughput achieved by a hypothetical optimal algorithm that con-
stantly transmits using the best possible channel width. We can
then deﬁne the efﬁciency ESW (α, β) of a parameter pair (α, β) as
the ratio between the throughput achieved by SampleWidth() and
the optimum, ESW (α, β) = TSW (α, β)/OP T .
For each pair (α, β), we determined ESW (α, β) based on our
measurement numbers in the emulator and indoor experiments. As
disconnections incur a particularly high cost, we discounted any
pair of α and β that results in a disconnection. For all remaining
pairs, we computed ESW (α, β) for all attenuations (emulator) and
all ofﬁces (indoor), and for all starting channel widths. Table 2
shows the computed values. It can be seen that our choice of α = 9
and β = 18 provides optimal efﬁciency. Our choice of α = 9 over
α = 12 is based on better average efﬁciency.
β = 12
β = 18
β = 24
β = 36
α = 6
α = 9
α = 12
α = 18
0.20
0.47
0.47
0.47
0.20
0.94
0.94
0.91
0.20
0.70
0.70
0.69
0.20
0.66
0.66
0.63
Table 2: Efﬁciency ESW (α, β) of SampleWidth for different val-
ues of α and β, and for X = 5.
5.5 Optimizing for Energy
The SampleWidth algorithm can easily be adjusted to optimize
for other objectives. For instance, in order to minimize the power
consumption of the sender (i.e., to pick the channel width that con-
sumes the least power-per-bit), we only change the decision rule in
Line 15. Instead of switching to the channel with highest through-
put, we switch to the channel that is most energy-efﬁcient. That
is, we use EP Ji instead of Ti to compare across different channel
widths, where EP Ji is the bits per Joule for channel width Bi. To
compute EP Ji for a sample interval, we need to know the number
of bits successfully transmitted and the total energy spent. To com-
pute the ﬁrst term, we count the successful transmissions, and for
the second, we also use packet retransmissions, the data rates used,
along with the power numbers from Section 3.3 (see Figure 8). In
general, these power consumption numbers may be different for
different chipsets; we use the ones for our Atheros implementation.
We show in Section 6.3 that the adjusted SampleWidth algorithm
reduces energy consumption in comparison to ﬁxed channel-width
algorithms.
5.6 Implementation
Our implementation of SampleWidth is spread across user and
kernel space as a daemon and a modiﬁed driver. Suitable hooks
are provided in the driver to enable the daemon to issue adaptation
commands. These hooks also enable the daemon to poll the driver
for stats such as the current data rate and number of retries.
The daemon is responsible for initiating and maintaining the con-
nection between the two nodes. The nodes send beacons periodi-
cally, containing information about their adaptation capability, and
to advertise themselves to other nodes. When a node has data to
send to another node that has been detected in range, the nodes
form an ad hoc (peer-to-peer) network. When nodes connect and
initiate a data session, the daemon initiates the adaptation policies,
which in turn makes calls to the driver to switch the channel widths.
Because changing the channel width requires coordination be-
tween nodes (to ensure that both nodes are on the same channel
width), we implement a simple handshake protocol. A node that
wishes to change its channel width sends a request packet to the
other node, and waits for an acknowledgement before switching the
channel width. A node that receives a request packet switches the
channel width right after sending the acknowledgement. In order
to be robust against lost requests or acknowledgements, we imple-
ment a backup rendezvous protocol. If after changing the channel
width, two nodes do not receive beacons for more than two sec-
onds, they switch to the narrowest channel width and resume com-
munication. In Section 6.5, we show that the overhead of switching
widths is low in our implementation.
6. PERFORMANCE EVALUATION
sions. We will show the following.
In this section, we evaluate SampleWidth along several dimen-
• In Section 6.1, we show that SampleWidth approximates the
throughput achieved by the optimal channel width for a range of
distances and attenuations.
• In Section 6.2, using an experiment with mobility, we show
that its adaptation to changing conditions lets it outperform the best
ﬁxed-width system by roughly 65%.
• In Section 6.3, we show how SampleWidth also saves power
by selecting the most energy-efﬁcient channel width depending on
whether a data transfer is active.
• In Section 6.4, we show that current autorate algorithms come
close to ﬁnding optimal modulation, and that the rate-width search
space is sufﬁciently smooth to justify the use of autorate as a build-
ing block for SampleWidth.
• Finally, in Section 6.5, we show that the switching overhead of
SampleWidth is small.
6.1 Choosing the Correct Channel Width
In this section, we evaluate how well the search strategy of Sam-
pleWidth is able to zero in on the optimal channel width. We con-
sider throughput maximization as the objective and present results
from both emulator and indoor experiments. In the emulator, we
vary signal attenuation in steps of 1 dB and compute the UDP
throughput for every available static channel width and then com-
pare it to the throughput achieved by SampleWidth. The methodol-
ogy is similar for the indoor environment except that the nodes are
separated by varying number of ofﬁces.
Figure 12 shows our results for both settings, averaged over three
(a) Emulator. The labels depict transition points where that
width becomes better that the adjacent wider channel.
(a) Instantaneous Energy Usage
(b) Indoor
Figure 12: Comparison of throughput achieved using Sam-
pleWidth with that of static width schemes in emulator and in-
door settings.
runs. The plots show that for all attenuations and ofﬁce distances
the throughput achieved by SampleWidth closely tracks the through-
put yielded by the optimal width. The maximum gap between Sam-
pleWidth and optimal throughput in the indoor experiments is only
8.7%, which includes all overheads stemming from probing adja-
cent widths as well as switching widths itself.
Width (MHz)
Throughput
5
3.60
10
5.17
20
8.27
40
7.92
SampleWidth
13.68
Table 3: Throughput achieved by ﬁxed widths and SampleWidth
in an indoor mobile network.
6.2 Adapting during Mobility
The previous experiment shows that SampleWidth adapts to the
optimal width in stationary scenarios; we ﬁnd that it is nimble
enough to adapt well in mobile scenarios as well. We conduct a
simple experiment in an indoor setting with a UDP transfer be-
tween two laptops. The receiver is positioned in a ﬁxed location
and the sender moves along a ﬁxed trajectory at roughly constant
speed. For different trials of this experiment, the laptops are either
ﬁxed on one channel width or use SampleWidth. Since estimat-
ing the optimal throughput in this setting is difﬁcult, we evaluate
SampleWidth by comparing it to the throughput of ﬁxed-width sce-