5
6
clear GCL;
for each set t in TEMP GCL
for each node srs in SRS
t = srs [ t;
push back t to GCL;
if i < gs
return GL
return GCL
Table 2. Algorithm for generating gang
Time To Wake Up (s)
Gang
fB; Cg
fD; C; Eg
fB; Eg
fE; F g
1200
1500
1800
2100
(a) Gang schedule table
D
C
E
B
C
B
E
E
F
B
C
D
C
E
B
E
E
F
B
C
Time (s)
1200 1500 1800 2100 2400 2700 3000 3300 3600
(b) Wake up schedule
Table 3. Illustration of a gang schedule table
and the resulting wake up schedule.
4.2.1 Basic idea
The discussions in this section have simpli(cid:2)ed assumptions
such as a redundant node only serves one active node, and
all the redundant nodes will not fail before the active nodes
do. We made these assumption to keep the explanation easy
to understand, and in the following sections, we discuss how
to extend R-Sentry to handle more realistic scenarios, where
a redundant node may belong to multiple active nodes, and
node failures can occur at random times.
We let the active nodes maintain most of the data struc-
tures, while having redundant nodes only keep track of their
own next wake up time. The most important data struc-
ture maintained by an active node is its gang schedule table,
which speci(cid:2)es each gang’s next wake up time. An illustra-
tion of such a data structure is provided in Table 3(a). Based
on this table, we can infer the wake up times for each gang.
For example, with (cid:1) = 300s, if an active node has 3 gangs,
the gang that wakes up at time 1200s also wakes up at times
2100s, 3000s, 3900s, etc. Therefore, a portion of the wake
up events caused by Table 3(a) is shown in Table 3(b).
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:33:13 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007Next we discuss how active nodes establish their gang
schedule tables, and more importantly, how they maintain
the schedules.
Initialization: During the bootstrapping phase, a WSN
usually runs a host of initialization services, such as neigh-
bor discovery, localization, time synchronization, route dis-
covery, duty-cycle scheduling, etc. Similarly, a WSN that
employs R-Sentry needs the following extra initialization
services:
(cid:15) Gang Discovery. This service ensures every sensor
node identi(cid:2)es its neighbor nodes, and populates its
SRS and GridList. At the beginning, each node in
the network sends out a presence announcement mes-
sage including its ID and location . Such messages are
(cid:3)ooded within h hops around the source nodes, where
h is a small number, usually 1 or 2, as the presence
announcement only matters to nodes within the vicin-
ity of the source node. After a certain amount of time
in the process, every node will receive the announce-
ments from all of its SRS members, based on which
a node can calculate the GridList of each node in its
SRS. After that, a node would be able to form its own
GangList in the way illustrated in Table 2.
(cid:15) Schedule Bootstrapping. The initial set of active nodes
are determined by the underlying coverage and initial-
ization protocols. Our approach is similar as the one
employed in CCP [11], which can be broken down
into 3 steps: 1) after presence announcement exchange
phase, every node stays active and starts a random
backoff timer, collecting redundancy announcement
from its SRS members; 2) upon the timer’s expiration,
a node checks its SRS members’ redundancy status and
determines if all grid points in GridList are covered by
the non-redundant SRS members. If yes, it considers
itself redundant and broadcasts redundancy announce-
ment, otherwise it considers itself non-redundant and
doesn’t take any actions; 3) at the end of bootstrapping
phase, the non-redundant nodes calculate their gangs’
schedules and (cid:3)ood them within a small number of
hops, staying active; while the redundant nodes, upon
receiving the schedules, record their own wake up time
or the earliest one if it receives multiple schedules.
At the end of the initialization phase, the redundant
nodes go to sleep with their sleep timers properly set
up, while the active nodes start collecting and forwarding
sensed data.
Probing: A sentry (i.e. redundant) node periodically wakes
up, as scheduled, to probe the active node.
If the active
node has failed, sentry nodes will become active to resume
network services; otherwise, they go back to sleep.
When a sentry node wakes up, it broadcasts a probing
message with its node ID included. Around the same time,
A
active
B
up
C
up
G
up
D
up
BC
up
F
up
E
up
Time (s)
1200
1300
1400
1500
(a) The events that have been observed by A.
1600
1700
1800
fB, Cg
fD, Eg
fE, Fg
-
-
-
(b) t = 1200
1600
fB, Cg
-
fD, Eg
fE, Fg
-
(d) t = 1400
1600
fB, Cg
fD, Eg
1900
fE, Fg
-
(f) t = 1550
fB, Cg
2200
fD, Eg
1900
fE, Fg
2500
(h) t = 1700
1600
1600
fB, Cg
-
fD, Eg
fE, Fg
-
(c) t = 1300
fB, Cg
fD, Eg
-
fE, Fg
-
(e) t = 1500
fB, Cg
fD, Eg
fE, Fg
-
(g) t = 1600
2200
fB, Cg
fD, Eg
1900
fE, Fg
2500
(i) t = 1800
2200
1900
Figure 2.
node establishes its gang schedule table.
Illustration of how a new active
the other sentries of the same gang will also wake up and
probe. If the target active node is still alive, it will match
the node ID’s contained in the probing messages with the
gang whose scheduled wake up time is closest to the current
time. If the match is successful, the active node updates the
gang schedule table by incrementing the wake up time by
the round duration N (cid:1). Finally, the active node sends the
sentries a reply message which has two (cid:2)elds: NextWake-
Time, and CurrentTime. The CurrentTime (cid:2)eld is used to
synchronize the clocks between the sentry nodes and the
active node.
The above discussion assumes the active node is still
alive while sentries probing. If the active node has failed
before sentries probe, the sentries will not receive the reply
message, then they conclude the active node has failed. In
this situation, the sentries should become active to provide
uninterrupted services. The design of R-Sentry thus ensures
that, whenever one of the active node fails, its functional-
ity will be fully resumed by other nodes roughly within (cid:1),
when the sentries outlive the target active node and corre-
sponding communication time is negligible compared to (cid:1).
Therefore, R-Sentry can limit the service loss period within
a tolerable threshold.
4.2.2 Dynamically establishing schedules for new ac-
tive nodes
After the sentry nodes become active, these new active
nodes face several challenges. The main challenge stems
from the fact that the communication between the new ac-
tive node and the redundant nodes that belong to its SRS
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:33:13 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007has not been established. On one hand, the redundant nodes
are still following the schedules of the previous active node,
without realizing that the active node has changed. On the
other hand, the new active node does not have a schedule for
its gangs, and therefore, it will not be guarded properly. Fur-
ther complicating the problem is that it is impossible for the
new active node to communicate with the redundant nodes
when they are asleep for their radios are off. As a result,
we can only attempt to establish the schedule gradually as
more and more redundant nodes wake up in groups down
the stretch.
The algorithm a new active node uses to establish its
schedule is rather simple, yet effective. The idea is that,
if the redundant node that is probing is not associated with
a wake up time in the gang schedule table, the new active
node will assign the next available wake up slot to the gang
that contains this redundant node. If the node is included in
multiple gangs, the smallest gang will be picked.
To better understand this algorithm, let us walk through
an example shown in Figure 2. Suppose node A is the new
active node, and its GangList is fB, Cg, fD, Eg, and fE,
Fg. The (cid:1) is 300 seconds. Figure 2(a) illustrates the wake
up events A observes in the establishing phase, and for each
event, it shows the corresponding schedule table in the sub-
sequent (cid:2)gures (Figures 2(b-i)). In particular, the establish-
ing phase has the following steps:
1. A becomes active at time 1200, when A’s schedule is
empty (Figure 2(b)).
2. At time 1300, B wakes up. A then assigns next avail-
able wake up slot, i.e. the current time incremented by
(cid:1), 1600, to gang fB; Cg, and updates the gang sched-
ule table accordingly (Figure 2(c)).
3. At time 1400, C wakes up. A (cid:2)nds C is already sched-
uled, so it does not update the gang schedule table. It
just simply sends a reply message to C to instruct C to
wake up at 1600 (Figure 2(d)).
4. At time 1500, G wakes up. A (cid:2)nds G does not belong
to its SRS, so it does not update the gang schedule ta-
ble. A sends a reply message to G with a large sleep
interval (Figure 2(e)). If G serves other active nodes,
it will receive a much shorter sleep time from them.
5. At time 1550, node D wakes up. A assigns next avail-
able wake up slot, 1900, to gang fD; Eg, and updates
the gang schedule table accordingly (Figure 2(f)).
6. At time 1600, node B and C wake up according to the
schedule. Since A’s table is not fully occupied yet, A
assigns the next available wake up slot, 2200, to them
(Figure 2(g)).
7. At time 1700, node F wakes up. A assigns the next
available wake up slot, 2500, to node E and F (Fig-
ure 2(h)).
1200
1500
1800
fB, Cg
fD, Eg
fF, Gg
(a) t = 1000
fB, Cg
fD, Eg
fF, Gg
3000
2400
2700
fB, Cg
2100
fD, Eg
1500
fF, Gg
1800
(b) t = 1500
3000
fB, Cg
-
2700
-
fF, Gg
(d) t = 2400, A cleans up its
gang schedule table
(c) t = 2400, A still has not
heard from D.
Figure 3. An example illustrating how a ac-
tive node detects failures among redundant
nodes and adapts its schedule accordingly.
8. At time 1800, node E wakes up. A does not update
the schedule table because E is already scheduled. A
sends a reply message to E, requesting E to wake up
at time 1900 (Figure 2(i)).
9. After that, A becomes a normal active node, and it will
handle the subsequent waking sentries by increment-
ing their wake up times by 3(cid:1) = 900.
We note that a new active usually can establish its gang
schedule within a reasonable amount of time because ac-
cording to R-Sentry, every redundant node wakes up peri-
odically, and this period will be the upper bound of the time
taken to form the schedule.
4.3. Scheduling Redundant Nodes That
Serve Multiple Active Nodes
To simplify the discussion, we assumed that a redundant
node only serves one active node in the earlier sections.
In this section, we look at how R-Sentry handles the cases
where a redundant node may serve multiple active nodes.
If a sentry node guards multiple active nodes, the main
challenge lies in that when it probes, how it handles sched-
ules from multiple active nodes. In R-Sentry, when a sentry
node probes, it only includes its own ID in the probing mes-
sage. Each of the active nodes that receive the probing mes-
sages, will examine the difference between the scheduled
wake up time of that redundant node and the current time
at the active node. If the difference is below a threshold,
the corresponding active node assumes this is a valid wake
up, calculates its next wake up time, and sends a reply mes-
sage back. The reply message contains three (cid:2)elds: the next
wake up time Tnext, the current time Tcurr, and the active
node’s ID. Those active nodes that have a different wake up
time for the redundant node will simply copy the previously
scheduled wake up time to the reply message. After receiv-
ing all the reply messages, the redundant node calculates
the sleep interval for each of the active nodes, chooses the
shortest one as the next sleep interval , and synchronizes its
clock appropriately.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:33:13 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 20074.4. Dynamically Adjusting Schedules for
Missing Redundant Nodes
In many sensor network applications, failures occur not
only to active nodes, but also to redundant nodes, even when
they are in sleep mode. For instance, a catastrophic event,
such as lightning can cause sensor node failures, regardless
of their state. When a redundant node fails, the active node
cannot rely on the gangs that contain the failed node, and
should remove these gangs from its schedule.
In R-Sentry, dynamically adapting the active node’s
schedule is rather straightforward. If the active node does
not hear from a redundant node in k consecutive rounds
(usually, k is a small number such as 2), it simply removes
the gangs that contain the missing node from the gang list.
In order to understand the details, let us look at an example
illustrated in Figure 3, where the active node A has the fol-
lowing gangs, fB, Cg, fD, Eg, and fF, Gg; and the (cid:1) is 300
seconds. Node D fails at time 1000. What happens to A is:
1. At time 1000, node D fails. A’s gang schedule table is
shown in Figure 3(a).
2. At time 1500 (Figure 3(b)), A only receives probes
from E, not D. A decides to wait for one more round
(900 seconds in this case) before taking actions.
3. After a round, at time 2400, A still has not heard
from D (Figure 3(c)). A then concludes that D has
failed, and removes the gang fD, Eg from the schedule