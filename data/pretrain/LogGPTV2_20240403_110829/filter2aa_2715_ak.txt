kubectl config current-context                       
display the 
current-context 
kubectl config use-context my-cluster-name           
set the default 
context to my-
cluster-name 
kubectl config set-credentials 
kubeuser/foo.kubernetes.com --
username=kubeuser --password=kubepassword 
add a new cluster 
to your kubeconf 
that supports 
basic auth 
kubectl config set-context --current --
namespace=ggckad-s2 
permanently save 
the namespace for 
all subsequent 
kubectl commands 
in that context. 
kubectl config set-context gce --
user=cluster-admin --namespace=foo && kubectl 
config use-context gce 
set a context 
utilizing a 
specific username 
and namespace. 
kubectl config unset users.foo                       
delete user foo 
CREATE OBJECTS 
kubectl apply -f ./my-manifest.yaml            
create 
resource(s) 
kubectl apply -f ./my1.yaml -f ./my2.yaml      
create from 
multiple files 
kubectl apply -f ./dir                         
create 
resource(s) in 
all manifest 
files in dir 
kubectl apply -f https://git.io/vPieo          
create 
resource(s) from 
url 
kubectl create deployment nginx --image=nginx  
start a single 
instance of nginx 
kubectl explain pods,svc 
get the 
documentation for 
pod and svc 
manifests 
VIEW/FIND RESOURCES 
kubectl get services                          
List all services 
in the namespace 
kubectl get pods --all-namespaces             
List all pods in 
all namespaces 
kubectl get pods -o wide                      
List all pods in 
the current 
namespace with 
more details 
114 
kubectl get deployment my-dep                 
List a particular 
deployment 
kubectl get pods                              
List all pods in 
the namespace 
kubectl get pod my-pod -o yaml                
Get a pod's YAML 
kubectl get pod my-pod -o yaml --export       
Get a pod's YAML 
without cluster 
specific 
information 
# Describe commands with verbose output 
kubectl describe nodes my-node 
kubectl describe pods my-pod 
kubectl get services --sort-by=.metadata.name 
# List Services 
Sorted by Name 
kubectl get pods --sort-
by='.status.containerStatuses[0].restartCount
' 
# List pods 
Sorted by Restart 
Count 
kubectl get pv --sort-
by=.spec.capacity.storage 
# List 
PersistentVolumes 
sorted by 
capacity 
kubectl get pods --selector=app=cassandra -o 
jsonpath='{.items[*].metadata.labels.version}
' 
# Get the version 
label of all pods 
with label 
app=cassandra 
kubectl get node --selector='!node-
role.kubernetes.io/master' 
# Get all worker 
nodes (use a 
selector to 
exclude results 
that have a label 
named 'node-
role.kubernetes.i
o/master') 
kubectl get pods --field-
selector=status.phase=Running 
# Get all running 
pods in the 
namespace 
kubectl get nodes -o 
jsonpath='{.items[*].status.addresses[?(@.typ
e=="ExternalIP")].address}' 
# Get ExternalIPs 
of all nodes 
kubectl get pods -o json | jq 
'.items[].spec.containers[].env[]?.valueFrom.
secretKeyRef.name' | grep -v null | sort | 
uniq 
# List all 
Secrets currently 
in use by a pod 
kubectl get events --sort-
by=.metadata.creationTimestamp 
# List Events 
sorted by 
timestamp 
kubectl diff -f ./my-manifest.yaml 
# Compares the 
current state of 
the cluster 
against the state 
115 
that the cluster 
would be in if 
the manifest was 
applied. 
UPDATING RESOURCES 
kubectl set image deployment/frontend 
www=image:v2               
Rolling update 
"www" containers 
of "frontend" 
deployment  
updating the 
image 
kubectl rollout history deployment/frontend                      
Check the history 
of deployments 
including the 
revision  
kubectl rollout undo deployment/frontend                         
Rollback to the 
previous 
deployment 
kubectl rollout undo deployment/frontend --
to-revision=2         
Rollback to a 
specific revision 
kubectl rollout status -w deployment/frontend                    
Watch rolling 
update status of 
"frontend" 
deployment until 
completion 
kubectl rollout restart deployment/frontend                      
Rolling restart 
of the "frontend" 
deployment 
# deprecated starting version 1.11 
kubectl rolling-update frontend-v1 -f 
frontend-v2.json           
(deprecated) 
Rolling update 
pods of frontend-
v1 
kubectl rolling-update frontend-v1 frontend-
v2 --image=image:v2  
(deprecated) 
Change the name 
of the resource 
and update the 
image 
kubectl rolling-update frontend --
image=image:v2                 
(deprecated) 
Update the pods 
image of frontend 
kubectl rolling-update frontend-v1 frontend-
v2 --rollback        
(deprecated) 
Abort existing 
rollout in 
progress 
kubectl expose rc nginx --port=80 --target-
port=8000 
Create a service 
for a replicated 
nginx which 
serves on port 80 
and connects to 
116 
the containers on 
port 8000 
# Update a single-container pod's image 
version (tag) to v4 
kubectl get pod mypod -o yaml | sed 
's/\(image: myimage\):.*$/\1:v4/' | kubectl 
replace -f -kubectl label pods my-pod new-
label=awesome 
Add a Label 
kubectl annotate pods my-pod icon-
url=http://goo.gl/XXBTWq       
Add an annotation 
kubectl autoscale deployment foo --min=2 --
max=10                
Auto scale a 
deployment "foo" 
EDITING RESOURCES 
kubectl edit svc/docker-registry                      
Edit the service 
named docker-
registry 
KUBE_EDITOR="nano" kubectl edit svc/docker-
registry   
Use an 
alternative 
editor 
SCALING RESOURCES 
kubectl scale --replicas=3 rs/foo                                 
Scale a 
replicaset named 
'foo' to 3 
kubectl scale --replicas=3 -f foo.yaml                            
Scale a resource 
specified in 
"foo.yaml" to 3 
kubectl scale --current-replicas=2 --
replicas=3 deployment/mysql  
If the deployment 
named mysql's 
current size is 2 
scale mysql to 3 
kubectl scale --replicas=5 rc/foo rc/bar 
rc/baz                   
Scale multiple 
replication 
controllers 
DELETE RESOURCES 
kubectl delete -f ./pod.json                                              
Delete a pod 
using the type 
and name 
specified in 
pod.json 
kubectl delete pod,service baz foo                                        
Delete pods and 
services with 
same names "baz" 
and "foo" 
kubectl delete pods,services -l name=myLabel                              
Delete pods and 
services with 
label 
name=myLabel 
kubectl -n my-ns delete pod,svc --all                                      
Delete all pods 
and services in 
namespace my-ns 
117 
kubectl get pods  -n mynamespace --no-
headers=true | awk '/pattern1|pattern2/{print 
$1}' | xargs  kubectl delete -n mynamespace 
pod 
Delete all pods 
matching the awk 
pattern1 or 
pattern2 
INTERACT PODS 
kubectl logs my-pod                                 
dump pod logs 
(stdout) 
kubectl logs -l name=myLabel                        
dump pod logs 
with label 
name=myLabel 
(stdout) 
kubectl logs my-pod --previous                      
dump pod logs 
(stdout) for a 
previous 
instantiation of 
a container 
kubectl logs my-pod -c my-container                 
dump pod 
container logs 
(stdout multi-
container case) 
kubectl logs -l name=myLabel -c my-container        
dump pod logs  
with label 
name=myLabel 
(stdout) 
kubectl logs my-pod -c my-container --
previous      
dump pod 
container logs 
(stdout multi-
container case) 
for a previous 
instantiation of 
a container 
kubectl logs -f my-pod                              
stream pod logs 
(stdout) 
kubectl logs -f my-pod -c my-container              
stream pod 
container logs 
(stdout multi-
container case) 
kubectl logs -f -l name=myLabel --all-
containers    
stream all pods 
logs with label 
name=myLabel 
(stdout) 
kubectl run -i --tty busybox --image=busybox 
-- sh  
Run pod as 
interactive shell 
kubectl run nginx --image=nginx --
restart=Never -n mynamespace 
Run pod nginx in 
a specific 
namespace 
kubectl run nginx --image=nginx --
restart=Never =--dry-run -o yaml > pod.yaml 
Run pod nginx and 
write its spec 
into a file 
called pod.yaml 
118 
kubectl attach my-pod -i                            
Attach to Running 
Container 
kubectl port-forward my-pod 5000:6000               
Listen on port 
5000 on the local 
machine and 
forward to port 
6000 on my-pod 
kubectl exec my-pod -- ls /                         
Run command in 
existing pod (1 
container case) 
kubectl exec my-pod -c my-container -- ls /         
Run command in 
existing pod 
(multi-container 
case) 
kubectl top pod POD_NAME --containers               
Show metrics for 
a given pod and 
its containers 
INTERACTING NODES/CLUSTER 
kubectl cordon my-node                                                
Mark my-node as 
unschedulable 
kubectl drain my-node                                                 
Drain my-node in 
preparation for 
maintenance 
kubectl uncordon my-node                                              
Mark my-node as 
schedulable 
kubectl top node my-node                                              
Show metrics for 
a given node 
kubectl cluster-info                                                  
Display addresses 
of the master and 
services 
kubectl cluster-info dump                                             
Dump current 
cluster state to 
stdout 
kubectl cluster-info dump --output-
directory=/path/to/cluster-state   
Dump current 
cluster state to 
/path/to/cluster-
state 
RESOURCE TYPES 
kubectl api-resources --namespaced=true      
All namespaced 
resources 
kubectl api-resources --namespaced=false     
All non-
namespaced 
resources 
kubectl api-resources -o name                
All resources 
with simple 
output (just the 
resource name) 
kubectl api-resources -o wide                
All resources 
with expanded 
119 
(aka "wide") 
output 
kubectl api-resources --verbs=list,get       
All resources 
that support the 
"list" and "get" 
request verbs 
kubectl api-resources --api-group=extensions 
All resources in 
the "extensions" 
API group 
REFERENCE: 
https://kubernetes.io/docs/reference/kubectl/cheatsheet/ 
https://cheatsheet.dennyzhang.com/cheatsheet-kubernetes-a4 
https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates 
L 
L
L 
LINUX_Commands 
ALL 
ADMINISTRATION 
LINUX 
FILE SYSTEM 
ls 
list items in current directory 
ls -l 
list items in current directory 
in long format 
ls -a  
list all items in current 
directory, including hidden files 
ls -F  
list all items in current 
directory and show directories 
with a slash and executables with 
a star 
ls dir  
list all items in directory dir 
120 
cd dir 
change directory to dir 
cd ..  
go up one directory 
cd /  
go to the root directory 
cd ~  
go to to your home directory 
cd -  
go to the last directory you were  
pwd  
show present working directory 
mkdir dir  
make directory dir 
rm file  
remove file 
rm -r dir  
remove directory dir recursively 
cp file1 file2  
copy file1 to file2 
cp -r dir1 dir2  
copy directory dir1 to dir2 
recursively 
mv file1 file2  
move (rename) file1 to file2 
ln -s file link  
create symbolic link to file 
touch file  
create or update file 
cat file  
output the contents of file 
less file  
view file with page navigation 
head file  
output the first 10 lines of file 
tail file  
output the last 10 lines of file 
tail -f file  
output the contents of file as it 
grows, starting with the last 10 
lines 
vim file  
edit file 
alias name 'command'  
create an alias for a command 
SYSTEM 
cat /etc/*release* 
OS version 
cat /etc/issue 
OS version 
cat /proc/version 
Kernel information 
date  
show the current date and time 
df  
show disk usage 
du  
show directory space usage 
finger user  
display information about user 
free  
show memory and swap usage 
last -a 
Users to login last 
man command  
show the manual for command 
mount 
Show any mounted file systems 
nbtstat -A  or  
Query hostname for IP or CIDR 
reboot  
restart machine 
shutdown  
shut down machine 
uname -a 
CPU arch and kernel version 
whereis app  
show possible locations of app 
which app  
show which app will be run by 
default 
who -a 
Combined user information 
whoami  
who you are logged in as 
PROCESS ADMINISTRATION 
ps -aef 
display your currently active 
processes 
top  
display all running processes 
kill pid#  
kill process id pid 
121 
kill -9 pid# 
force kill process id pid 
NETWORKING 
echo "1" > 
/proc/sys/net/ipv4/ip_forwar
d 
Enable IP forwarding 
echo "nameserver " > 
/etc/resolv.conf 
Insert a new DNS server 
ifconfig  / 
Configure eth# interface IP 
iwlist  scan 
WiFi broadcast scan 
lsof -i 
List open files connection status 
lsof -i tcp:80 
List all processes running on 
port 80 
netstat -ant 
Top tcp network connection status 
netstat -anu 
Top udp network connection status 
route add default gw  
Configure gateway IP 
share   C$ 
Mount Windows C share 
smb:///IPC$ 
SMB connect Windows IPC share 
smbclient -U  
\\\\\\ 
SMBclient connect to share 
watch netstat -an 
Continuous network connect status 
PERMISSIONS 
ls -lart 
list items by date in current 
directory and show permissions 
chmod ugo file 
change permissions of file to ugo 
- u is the user's permissions, g 
is the group's permissions, and o 
is everyone else's permissions. 
The values of u, g, and o can be 
any number between 0 and 7. 
7 — full permissions 
6 — read and write only 
5 — read and execute only 
4 — read only 
3 — write and execute only 
2 — write only 
1 — execute only 
0 — no permissions 
chmod 600 file  
you can read and write - good for 
files 
chmod 700 file  
you can read, write, and execute 
- good for scripts 
chmod 644 file  
you can read and write, and 
everyone else can only read - 
good for web pages 
chmod 755 file  
you can read, write, and execute, 
and everyone else can read and 
execute - good for programs that 
you want to share 
UTILITIES 
curl  -O 
download a file 
122 
dig -x host  
reverse lookup host 
dig domain.com 