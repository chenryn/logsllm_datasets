and we will need to install "Preferred Installer Program", otherwise known as PIP. Enter the following into 
Terminal, which will proride the necessary configuration for the current default version of Python (3) in Ubuntu.
We now have the necessary utilities installed for our media needs. This process is not too exciting, and you will 
not immediately see anything useful after these actions. However, you are laying the groundwork for the 
upcoming scripts. The YouTube-DL script is ready to use, but only through the Terminal application. Let's 
conduct an example in order to understand the features, and then discuss a way to automate queries.
apt install: This tells Ubuntu to install a specific software application, such as FFmpeg. Since we 
y" to the command, we do not need to confirm installation during the process.
You should now see the video file on your Desktop in Ubuntu. Playback will likely appear poor within the VM, 
but you could copy that file out to your host for proper playback through the shared folder on your Desktop. 
When you retrieved this video, you may have noticed that two files actually downloaded (one video and one 
audio). This is because YouTube-DL has detected that you have FFmpeg installed, and it chose to download 
the highest quality option for you. If you had not possessed FFmpeg, you would have been given a lower quality 
version. This is because YouTube presents separate audio and video files to the viewer when a high-quality 
output is chosen. YouTube-DL works in tandem with FFmpeg to download the best quality option and merge 
the result into a playable file. This is the best way to extract a single video from YouTube and other video 
sources. However, the true power is on bulk downloads.
We can now install YouTube-DL via "Pip" by entering the following command. The "sudo -H" instructs the 
command to use elevated privileges (sudo), but to install as the current home user (-H) of "osint". This should 
prevent damage to the core functionally, which could happen if we had installed it as "root".
Assume that we are looking for videos of Bob Ross teaching viewers how to paint with oils. After a search on 
YouTube, you found the Bob Ross video channel located at https://www.youtube.com/user/BobRosslnc. 
Clicking on the "Videos" option on that page presents https://www.youtube.com/user/BobRossInc/videos. 
This page displays over 600 full episodes of his television program. Clicking one of these videos presents a URL 
similar to https://www.youtube.com/watch?v=lLWEXRAnQdO. You want to download the video from this 
page in the best quality possible in order to attach it to your case. The default YouTube-DL command to do 
this is as follows.
This will download the video to whichever director}7 you are in within Terminal. By default, you are likely in 
your home folder, but that is not a great place to save a video. Therefore, let's change the saved location to your 
desktop with the following commands.
• youtube-dl https://www.youtube.com/user/BobRossInc/videos
• youtube-dl https://www.youtube.com/watch?v=lLWEXRAnQdO —all-subs
Linux Applications
47
Imagine the following scenario. You have a suspect on YouTube with hundreds of videos. You have been tasked 
to download every video and identify the exact files and timestamps of ever}' time he said the word "kill". One 
command within YouTube-DL would provide all of the data you need to conduct a search within all text files, 
and the corresponding video evidence. In a later chapter, I will provide a single query which will search all of 
these text files at once.
00:00:29.988 —> 00:00:32.108
- Hello, I'm Bob Ross and I'd like to welcome 
00:00:29.988 —> 00:00:32.108
- Hola, soy Bob Ross y me gustaria dar la bienvenida
Downloading all available formats of every video is likely overkill and could take several hours. However, 
obtaining the closed captioning for each video can be quite beneficial. The following command in Terminal will 
download the best quality' video and audio tracks of the target video, merge them together, and download a text 
file of each of the embedded closed captioning files.
This tutorial could be sufficient for your needs, as it will download the media you desire. It works well on most 
video host websites. However, I would like to take things a step further. There are a few minor annoyances with 
this process. The first is that you must manually open Terminal in order to replicate this technique. Next, you 
must navigate to a desired folder for saving. Finally, you are at the mercy of YouTube-DL on the naming scheme 
for your saved file. The following may seem complicated at first, but it will simplify our usage of this utility’.
—all-subs (Downloads all closed captioning subtides associated with the videos)
—all-formats (Downloads all versions of a video of any quality')
The video appears on my Desktop, as that was the last place I had navigated within Terminal. Next to the video 
is two text files with a .vtt file extension. Below are the first two lines of each. The first represents the English 
subtides, and the second are in Spanish.
This will take some time to download everything, especially if the videos are long. If you want to cancel this 
command, press "Ctrl" and "C" on your keyboard at any time. This terminates any process within Terminal and 
may' be beneficial throughout this chapter. Additional options to add to this command include the following.
In both versions of the Buscador VM, we created scripts which would automate the various tools which we had 
installed. These were publicly available inside the VM and were the best feature of the OS in my opinion. They 
simplified the Terminal tools into point-and-click utilities. A YouTube-DL script is as follows, with minor 
modifications due to changes in the command options. /Ml scripts mentioned in this chapter are located within 
my online archive of "vm-files" available at https://inteltechniques.com/osintbook9. If prompted, enter a 
username of "osint9" and password of "bookl43wt", without the quotes. Later in this chapter, we will 
incorporate all of the scripts explained in this chapter into our OSINT Original VM using only a few 
commands. Before then, we should understand the code and function.
Assume you downloaded the previous file in reference to your investigation. You then see that your target 
possesses hundreds of videos on his YouTube "Videos" page. You want all of these videos, located at 
https://www.youtube.com/user/BobRossInc/videos. YouTube-DL can download these with the following 
single command.
48 Chapter 4
#!/usr/bin/env bash
timestamp=$(date +%Y-%m-%d:%H:%M)
url=$(zenity —entry —title "Video Downloader" —text "Target URL:")
youtube-dl "$url" -o ~/Videos/Youtube-DL/"$timestamp% (title) s.% (ext) s" -i —all­
subs I zenity —progress —pulsate —no-cancel —auto-close —title="Video 
Downloader" —text="Video being saved to -/Videos/Youtube-DL/" 
nautilus -/Videos/ 
exit
• 
cd -/Desktop (Places Terminal in the Desktop director)’)
• 
chmod +x youtubedl. sh (Makes the script executable)
• 
. /youtubedl. sh (Launches the script)
The result would be the image seen in Figure 4.01 (left). If you entered either of the YouTube URLs used in the 
previous pages, the script would download the target data to your "Videos” folder. This solves many of the 
annoyances, but there is still one issue. You still need to open Terminal in order to launch the script. The solution 
to this is to create a ".desktop" file which we can launch from the Dock. You could conduct the following 
manual steps or automate this process with the tutorial presented in a moment. The following is provided in 
order to understand what wall happen behind the scenes when we automate our full VM build.
• 
Open the Applications menu (nine dots) and launch Text Editor.
• 
Enter the following text and save the file as youtubedl.desktop to your Desktop.
[Desktop Entry]
Type=Application
Name=Video Download
Categories=Application;OSINT
Exec=/home/osint/Documents/scripts/youtubedl . sh 
Icon=/home/osint/Documents/icons/youtube-dl .png 
Terminal=true
• 
Close Text Editor.
• 
In Terminal, type: cd -/Desktop
• 
In Terminal, type: sudo mv youtubedl.desktop /usr/share/applications/
• 
Enter password if prompted.
• 
Open the Files program and click on "Documents" in the left area.
• 
Right-click in the empty area and select "New Folder".
• 
Create a folder tided "scripts" and enter this folder.
• 
Drag and drop the youtubedl.sh file from the Desktop to this folder.
• 
Click on "Documents" in the left area of the Files program.
• 
Right-click in the white area and select "New Folder".
• 
Create a folder tided "icons" and enter this folder.
• 
Download the Linux "vm-files" archive from https://inteltechniques.com/osintbook9.
• 
Enter a username of "osint9" and password of "bookl43wt" if required.
• 
Extract the archive within your new VM.
• 
Copy all images from the "icons" folder in the archive into the "icons" folder in the VM.
The first line (#) explains that this file is an executable script. The second line creates a current timestamp in 
order to prevent duplicate file names and display the capture time. The third line (url) creates a menu prompt 
for the user to input the URL of the target video. The next line (youtube-dl) instructs the script to launch the 
YouTube-DL command with the entered URL; defines a folder for output; and supplies a proper file name. The 
rest of the script (nautilus) launches the folder containing the final download for convenient access. We will see 
this structure numerous times throughout this chapter. If you were to save this file to your Desktop as 
youtubedl.sh, you could launch it with the following Terminal commands.
Linux Applications
49
• youtube-dl https://www.youtube.com/watch?v=lLWEXRAnQdO -f 
1 bestvideo[height BR.txt
Linux z\pplications
51
--------- > Void the Bot
Some make happy little acidents
--------- > TheLazyGamer YT
Not all capes wear heroes
• Export video page information: yttool —info
https://www.youtube.com/watch?v=lLWEXRAnQdO > info.txt
• Export details of all videos contained in a Playlist yttool —playlist https: //www. youtube 
.com/playlist?list=PLAEQD0ULngi67rwmhrkNjMZKvyCReqDV4 > playlist.txt
I have added menu dialogue options into our video download script, which is presented in a moment
This command targets the desired video page; loads all of the user comments; exports them to a file called 
BR.txt; and saves this file wherever your current Terminal path is set. I chose this video because it contains 
thousands of comments. My query took several minutes, but the text file created contained over 20,000 lines of 
comments. Below is a partial view.
YouTube-DL has been a staple in my OSINT work for many years. In 2021,1 witnessed weekly updates turn 
into months without any patches. Since YouTube changes their own services regularly, we need alternatives for 
downloading their content This is where yt-dlp can be helpful. This application is a fork of the original 
YouTube-DL, but it has a much more active community and regular updates. Install it with the following 
command.
It should be noted that YouTube changes the "pagination" features of its comment section often. When they 
do, this feature breaks until the software is updated. We can also conduct the following commands with this 
tool.
1 like the way this video download script is coming along, but I want to add more features. I want an alternative 
download option; features which download all the comments from a YouTube video; and the ability to export 
data about videos, channels, and playlists.
We can now formulate various queries, such as the following.
• Export all subtitles of a video (with timestamps): yttool -v —subtitles 
https://www.youtube.com/watch?v=lLWEXRAnQdO > subs.txt
Cancel