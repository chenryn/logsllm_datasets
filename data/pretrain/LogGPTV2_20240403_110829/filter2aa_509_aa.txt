Assisted Discovery of On-Chip Debug Interfaces
Joe Grand (@joegrand)
Introduction
•
On-chip debug interfaces are a well-known 
attack vector
-
Can provide chip-level control of a target device
-
Extract program code or data
-
Modify memory contents
-
Affect device operation on-the-ﬂy
-
Gain insight into system operation
•
Inconvenient for vendor to remove functionality
-
Would prevent capability for legitimate personnel
-
Weak obfuscation instead (hidden or unmarked 
signals/connectors)
-
May be password protected (if supported by device)
Introduction 2
•
Identifying OCD interfaces can sometimes be 
difﬁcult and/or time consuming
Goals
•
Create an easy-to-use tool to simplify the 
process
•
Attract non-HW folks to HW hacking
•
Hunz's JTAG Finder
-
http://elinux.org/JTAG_Finder
•
JTAGenum & RS232enum
-
http://deadhacker.com/tools/
•
Cyber Fast Track
-
www.cft.usma.edu
Inspiration
Other Art
•
An Open JTAG Debugger (GoodFET), Travis 
Goodspeed, DEFCON 17
-
http://defcon.org/html/links/dc-archives/dc-17-
archive.html#Goodspeed2
•
Blackbox JTAG Reverse Engineering, Felix 
Domke, 26C3
-
http://events.ccc.de/congress/2009/Fahrplan/
attachments/1435_JTAG.pdf
Other Art 2
•
Forensic Imaging of Embedded Systems using 
JTAG, Marcel Breeuwsma (NFI), Digital 
Investigation Journal, March 2006
-
http://www.sciencedirect.com/science/article/pii/
S174228760600003X
Identifying Interfaces: External
•
Accessible to the outside world
-
Intended for engineers or manufacturers
-
Device programming or ﬁnal system test
•
Usually hidden or protected
-
Underneath batteries
-
Behind stickers/covers
•
May be a proprietary/non-standard connector
Identifying Interfaces: Internal
•
Test points or unpopulated pads
•
Silkscreen markings or notation
•
Easy-to-access locations
Identifying Interfaces: Internal 2
•
Familiar target or based on common pinouts
-
Often single- or double-row footprint
-
JTAG: www.jtagtest.com/pinouts/
← www.blackhat.com/html/bh-us-10/bh-us-10-archives.html#Jack
→ www.nostarch.com/xboxfree
Identifying Interfaces: Internal 3
•
Can use PCB/design heuristics
-
Traces of similar function are grouped together (bus)
-
Array of pull-up/pull-down resistors (to set static  
state of pins)
-
Test points usually placed on important/interesting 
signals
← http://elinux.org/images/d/d6/Jtag.pdf
Identifying Interfaces: Internal 4
•
More difﬁcult to locate when available only on 
component pads or tented vias
*** www.dd-wrt.com/wiki/index.php/JTAG_pinouts#Buffalo_WLA-G54C
Determining Pin Function
•
Identify test points/connector & target device
•
Trace connections
-
Visually or w/ multimeter in continuity mode
-
For devices where pins aren't accessible (BGA), 
remove device or use X-ray
-
Use data sheet to match pin number to function
•
Probe connections
-
Use oscilloscope or logic analyzer
-
Pull pins high or low, observe results, repeat
-
Logic state or number of pins can help to make 
educated guesses
On-Chip Debug Interfaces
•
JTAG
•
UART
JTAG
•
Industry-standard interface (IEEE 1149.1)
-
Created for chip- and system-level testing
-
Deﬁnes low-level functionality of ﬁnite state machine/
Test Access Port (TAP)
-
http://en.wikipedia.org/wiki/Joint_Test_Action_Group
•
Provides a direct interface to hardware
-
Can "hijack" all pins on the device (Boundary scan/
test)
-
Can access other devices connected to target chip
-
Programming/debug interface (access to Flash, RAM)
-
Vendor-deﬁned functions/test modes might be 
available
JTAG 2
•
Multiple devices can be "chained" together for 
communication to all via a single JTAG port
-
Even multiple dies within the same chip package 
-
Different vendors may not play well together
•
Development environments abstract low-level 
functionality from the user
-
Implementations are device- or family-speciﬁc
-
As long as we can locate the interface/pinout, let 
other tools do the rest
JTAG: Architecture
•
Synchronous serial interface
→  TDI = Data In (to target device)
←  TDO = Data Out (from target device)  
→  TMS = Test Mode Select   
→  TCK = Test Clock  
→  /TRST = Test Reset (optional for async reset)
•
Test Access Port (TAP) w/ Shift Registers
-
Instruction (>= 2 bit wide)
-
Data
-
Bypass (1 bit)
-
Boundary Scan (variable)
-
Device ID (32 bit) (optional)
JTAG: TAP Controller
*** State transitions occur on 
rising edge of TCK based on 
current state and value of TMS
*** TAP provides 4 major 
operations: Reset, Run-Test, 
Scan DR, Scan IR
*** Can move to Reset state 
from any other state w/ TMS 
high for 5x TCK
*** 3 primary steps in Scan: 
Capture, Shift, Update
*** Data held in "shadow" 
latch until Update state
JTAG: Instructions
 ┌───────────┬─────────────┬──────────┬───────────────────────────────────────────────────────────────────────┐
 │    Name   │  Required?  │  Opcode  │                          Description                                  │
 ├───────────┼─────────────┼──────────┼───────────────────────────────────────────────────────────────────────┤
 │   BYPASS  │      Y      │  All 1s  │   Bypass on-chip system logic. Allows serial data to be transferred   │
 │           │             │          │   from TDI to TDO without affecting operation of the IC.              │
 ├───────────┼─────────────┼──────────┼───────────────────────────────────────────────────────────────────────┤
 │   SAMPRE  │      Y      │  Varies  │   Used for controlling (preload) or observing (sample) the signals at │
 │           │             │          │   device pins. Enables the boundary scan register.                    │
 ├───────────┼─────────────┼──────────┼───────────────────────────────────────────────────────────────────────┤
 │   EXTEST  │      Y      │  All 0s  │   Places the IC in external boundary test mode. Used to test device   │
 │           │             │          │   interconnections. Enables the boundary scan register.               │
 ├───────────┼─────────────┼──────────┼───────────────────────────────────────────────────────────────────────┤
 │   INTEST  │      N      │  Varies  │   Used for static testing of internal device logic in a single-step   │
 │           │             │          │   mode. Enables the boundary scan register.                           │
 ├───────────┼─────────────┼──────────┼───────────────────────────────────────────────────────────────────────┤
 │   RUNBIST │      N      │  Varies  │   Places the IC in a self-test mode and selects a user-specified data │
 │           │             │          │   register to be enabled.                                             │
 ├───────────┼─────────────┼──────────┼───────────────────────────────────────────────────────────────────────┤
 │   CLAMP   │      N      │  Varies  │   Sets the IC outputs to logic levels as defined in the boundary scan │
 │           │             │          │   register. Enables the bypass register.                              │
 ├───────────┼─────────────┼──────────┼───────────────────────────────────────────────────────────────────────┤
 │   HIGHZ   │      N      │  Varies  │   Sets all IC outputs to a disabled (high impedance) state. Enables   │
 │           │             │          │   the bypass register.                                                │
 ├───────────┼─────────────┼──────────┼───────────────────────────────────────────────────────────────────────┤
 │   IDCODE  │      N      │  Varies  │   Enables the 32-bit device identification register. Does not affect  │
 │           │             │          │   operation of the IC.                                                │
 ├───────────┼─────────────┼──────────┼───────────────────────────────────────────────────────────────────────┤
 │  USERCODE │      N      │  Varies  │   Places user-defined information into the 32-bit device              │
 │           │             │          │   identification register. Does not affect operation of the IC.       │
 └───────────┴─────────────┴──────────┴───────────────────────────────────────────────────────────────────────┘
JTAG: Protection
•
Implementation speciﬁc
•
Security fuse physically blown prior to release
-
Could be repaired w/ silicon die attack
•
Password required to enable functionality
-
Ex.: Flash erased after n attempts (so perform n-1), 
then reset and continue
•
May allow BYPASS, but prevent higher level 
functionality
-
Ex.: TI MSP430
JTAG: HW Tools
•
RIFF Box
-
www.jtagbox.com
•
H-JTAG
-
www.hjtag.com/en/
•
Bus Blaster (open source)
-
http://dangerousprototypes.com/docs/Bus_Blaster
•
Wiggler or compatible (parallel port)
-
ftp://www.keith-koep.com/pub/arm-tools/jtag/
jtag05_sch.pdf
JTAG: SW Tools
•
OpenOCD (Open On-Chip Debugger)
-
http://openocd.sourceforge.net
•
UrJTAG (Universal JTAG Library)
-
www.urjtag.org
UART
•
Universal Asynchronous Receiver/Transmitter
-
No external clock needed
-
Data bits sent LSB ﬁrst (D0)
-
NRZ (Non-Return-To-Zero) coding
-
Transfer speed (bits/second) = 1 / bit width
-
http://en.wikipedia.org/wiki/Asynchronous_serial_ 
communication
*** Start bit + Data bits + Parity (optional) + Stop bit(s)
UART 2
•
Asynchronous serial interface
→  TXD = Transmit data (to target device)
←  RXD = Receive data (from target device)
↔  DTR, DSR, RTS, CTS, RI, DCD = Control signals
     (uncommon for modern implementations)
•
Many embedded systems use UART as debug 
output/console
UART 3
Bit width 
= ~8.7uS
Mark (Idle)
Space
Hardware
Design Requirements
•
Open source/hackable/expandable
•
Simple command-based interface
•
Proper input protection
•
Adjustable target voltage
•
Off-the-shelf components
•
Hand solderable (if desired)
Block Diagram
MCU
Parallax Propeller
EEPROM
24LC512
2 (I2C)
Power Switch
MIC2025-2YM
LDO
LD1117S33TR
USB
5V
3.3V
D/A
AD8655
1.2V - 3.3V
~13mV/step
Serial-to-USB
FT232RL
2
1 (PWM)
Host PC
USB Mini-B
Voltage Level 
Translator
TXS0108EPWR
Voltage Level 
Translator
TXS0108EPWR
Voltage Level 
Translator
TXS0108EPWR
Input Protection 
Circuitry
24
Target Device
1
Status Indicator
WP59EGW
PCB
*** 2x5 headers compatible w/ Bus Pirate probes, 
http://dangerousprototypes.com/docs/Bus_Pirate
Target I/F (24 channels)
Propeller
USB
Input protection
Level translation
Status
Op-Amp/DAC
*** INFORMATION: www.parallax.com/propeller/
*** DISCUSSION FORUMS: http://forums.parallax.com
*** OBJECT EXCHANGE: http://obex.parallax.com
•
Completely custom, ground up design
•
8 independent cogs @ 20 MIPS each
•
Code in Spin, ASM, or C
•
Used in DEFCON XX Badge
Propeller/Core
•
Clock: DC to 128MHz (80MHz recommended)
•
Global (hub) memory: 32KB RAM, 32KB ROM
•
Cog memory: 2KB RAM each
•
GPIO: 32 @ 40mA sink/source per pin
•
Program code loaded from external EEPROM on 
power-up
Propeller/Core 2
Propeller/Core 3
•
Standard development using Propeller Tool & 
Parallax Serial Terminal (Windows)
•
Programmable via serial interface (usually in 
conjunction w/ USB-to-serial IC)
Propeller/Core 4
USB Interface
•
Allows for Propeller programming & UI
•
Powers JTAGulator from bus (5V)
•
FT232RL USB-to-Serial UART
-
Entire USB protocol handled on-chip
-
Host will recognize as a virtual serial port (Windows, 
OS X, Linux)
•
MIC2025 Power Distribution Switch
-
Internal current limiting, thermal shutdown
-
Let the FT232 enumerate ﬁrst (@  will not interfere with 
target when not in use
Input Protection
•
Prevent high voltages/spikes on unknown pins 
from damaging JTAGulator
•
Diode limiter clamps input if needed
•
Vf must be < 0.5V to protect TXS0108Es
Bill-of-Materials
•
All components from Digi-Key
•
Total cost per unit = $50.73
JTAGulator
JTAGulator
Bill-of-Materials
Bill-of-Materials
Bill-of-Materials
HW B, Document 1.0, April 19, 2013
HW B, Document 1.0, April 19, 2013
HW B, Document 1.0, April 19, 2013
Item
Quantity
Reference
Manufacturer
Manuf. Part #
Distributor
Distrib. Part #
Description
1
2
C1, C2
Kemet
C1206C103K5RACTU
Digi-Key
399-1234-1-ND
Capacitor, 0.01uF ceramic, 10%, 50V, X7R, 1206