# Assisted Discovery of On-Chip Debug Interfaces
## Joe Grand (@joegrand)

### Introduction
On-chip debug (OCD) interfaces are a well-known attack vector, providing potential attackers with chip-level control over a target device. These interfaces can be used to:
- Extract program code or data.
- Modify memory contents.
- Affect device operation in real-time.
- Gain insight into system operation.

Vendors often find it inconvenient to remove this functionality entirely, as it would prevent legitimate personnel from performing necessary tasks. Instead, they may use weak obfuscation techniques, such as hidden or unmarked signals/connectors, or implement password protection if the device supports it.

### Goals
- Create an easy-to-use tool to simplify the process of identifying and accessing OCD interfaces.
- Attract individuals without hardware expertise to the field of hardware hacking.

### Inspiration and Related Work
- **Hunz's JTAG Finder**: [http://elinux.org/JTAG_Finder](http://elinux.org/JTAG_Finder)
- **JTAGenum & RS232enum**: [http://deadhacker.com/tools/](http://deadhacker.com/tools/)
- **Cyber Fast Track**: [www.cft.usma.edu](www.cft.usma.edu)

#### Other Art
- **An Open JTAG Debugger (GoodFET)** by Travis Goodspeed, DEFCON 17: [http://defcon.org/html/links/dc-archives/dc-17-archive.html#Goodspeed2](http://defcon.org/html/links/dc-archives/dc-17-archive.html#Goodspeed2)
- **Blackbox JTAG Reverse Engineering** by Felix Domke, 26C3: [http://events.ccc.de/congress/2009/Fahrplan/attachments/1435_JTAG.pdf](http://events.ccc.de/congress/2009/Fahrplan/attachments/1435_JTAG.pdf)
- **Forensic Imaging of Embedded Systems using JTAG** by Marcel Breeuwsma (NFI), Digital Investigation Journal, March 2006: [http://www.sciencedirect.com/science/article/pii/S174228760600003X](http://www.sciencedirect.com/science/article/pii/S174228760600003X)

### Identifying Interfaces: External
- **Accessible to the outside world**:
  - Intended for engineers or manufacturers for device programming or final system testing.
  - Usually hidden or protected, e.g., underneath batteries or behind stickers/covers.
  - May use proprietary or non-standard connectors.

### Identifying Interfaces: Internal
- **Test points or unpopulated pads**.
- **Silkscreen markings or notation**.
- **Easy-to-access locations**.
- **Familiar targets or common pinouts**:
  - Often single- or double-row footprints.
  - JTAG pinout reference: [www.jtagtest.com/pinouts/](www.jtagtest.com/pinouts/)

#### Internal Identification Techniques
- **PCB/design heuristics**:
  - Traces of similar function are grouped together (bus).
  - Array of pull-up/pull-down resistors to set static states of pins.
  - Test points usually placed on important/interesting signals.
- **Challenges**:
  - More difficult to locate when available only on component pads or tented vias.
  - Reference: [http://elinux.org/images/d/d6/Jtag.pdf](http://elinux.org/images/d/d6/Jtag.pdf)

### Determining Pin Function
1. **Identify test points/connector & target device**.
2. **Trace connections**:
   - Visually or with a multimeter in continuity mode.
   - For devices where pins aren't accessible (e.g., BGA), remove the device or use X-ray.
   - Use the data sheet to match pin numbers to functions.
3. **Probe connections**:
   - Use an oscilloscope or logic analyzer.
   - Pull pins high or low, observe results, and repeat.
   - Logic state or number of pins can help make educated guesses.

### On-Chip Debug Interfaces
- **JTAG**
- **UART**

#### JTAG
- **Industry-standard interface (IEEE 1149.1)**:
  - Created for chip- and system-level testing.
  - Defines the low-level functionality of the finite state machine/Test Access Port (TAP).
  - Provides a direct interface to hardware, allowing "hijacking" of all pins on the device (Boundary scan/test).
  - Can access other devices connected to the target chip.
  - Programming/debug interface (access to Flash, RAM).
  - Vendor-defined functions/test modes might be available.
- **Multiple devices can be "chained" together**:
  - Communication to all via a single JTAG port.
  - Even multiple dies within the same chip package.
  - Different vendors may not play well together.
- **Development environments abstract low-level functionality**:
  - Implementations are device- or family-specific.
  - Once the interface/pinout is located, other tools handle the rest.

#### JTAG Architecture
- **Synchronous serial interface**:
  - TDI = Data In (to target device)
  - TDO = Data Out (from target device)
  - TMS = Test Mode Select
  - TCK = Test Clock
  - /TRST = Test Reset (optional for asynchronous reset)
- **Test Access Port (TAP) with Shift Registers**:
  - Instruction (>= 2 bit wide)
  - Data
  - Bypass (1 bit)
  - Boundary Scan (variable)
  - Device ID (32 bit, optional)

#### JTAG TAP Controller
- **State transitions occur on the rising edge of TCK based on the current state and value of TMS**.
- **TAP provides 4 major operations**: Reset, Run-Test, Scan DR, Scan IR.
- **Can move to Reset state from any other state with TMS high for 5x TCK**.
- **3 primary steps in Scan**: Capture, Shift, Update.
- **Data held in "shadow" latch until Update state**.

#### JTAG Instructions
| Name       | Required? | Opcode | Description                                                                                     |
|------------|-----------|--------|-------------------------------------------------------------------------------------------------|
| BYPASS     | Y         | All 1s | Bypass on-chip system logic. Allows serial data to be transferred from TDI to TDO.             |
| SAMPRE     | Y         | Varies | Used for controlling (preload) or observing (sample) the signals at device pins.                |
| EXTEST     | Y         | All 0s | Places the IC in external boundary test mode. Used to test device interconnections.            |
| INTEST     | N         | Varies | Used for static testing of internal device logic in a single-step mode.                         |
| RUNBIST    | N         | Varies | Places the IC in a self-test mode and selects a user-specified data register to be enabled.     |
| CLAMP      | N         | Varies | Sets the IC outputs to logic levels as defined in the boundary scan register.                   |
| HIGHZ      | N         | Varies | Sets all IC outputs to a disabled (high impedance) state.                                       |
| IDCODE     | N         | Varies | Enables the 32-bit device identification register. Does not affect operation of the IC.         |
| USERCODE   | N         | Varies | Places user-defined information into the 32-bit device identification register.                 |

#### JTAG Protection
- **Implementation specific**.
- **Security fuse physically blown prior to release** (can be repaired with a silicon die attack).
- **Password required to enable functionality** (e.g., Flash erased after n attempts, then reset and continue).
- **May allow BYPASS, but prevent higher level functionality** (e.g., TI MSP430).

#### JTAG Hardware Tools
- **RIFF Box**: [www.jtagbox.com](www.jtagbox.com)
- **H-JTAG**: [www.hjtag.com/en/](www.hjtag.com/en/)
- **Bus Blaster (open source)**: [http://dangerousprototypes.com/docs/Bus_Blaster](http://dangerousprototypes.com/docs/Bus_Blaster)
- **Wiggler or compatible (parallel port)**: [ftp://www.keith-koep.com/pub/arm-tools/jtag/jtag05_sch.pdf](ftp://www.keith-koep.com/pub/arm-tools/jtag/jtag05_sch.pdf)

#### JTAG Software Tools
- **OpenOCD (Open On-Chip Debugger)**: [http://openocd.sourceforge.net](http://openocd.sourceforge.net)
- **UrJTAG (Universal JTAG Library)**: [www.urjtag.org](www.urjtag.org)

#### UART
- **Universal Asynchronous Receiver/Transmitter**:
  - No external clock needed.
  - Data bits sent LSB first (D0).
  - NRZ (Non-Return-To-Zero) coding.
  - Transfer speed (bits/second) = 1 / bit width.
  - Start bit + Data bits + Parity (optional) + Stop bit(s).
- **Asynchronous serial interface**:
  - TXD = Transmit data (to target device)
  - RXD = Receive data (from target device)
  - DTR, DSR, RTS, CTS, RI, DCD = Control signals (uncommon for modern implementations).
- **Many embedded systems use UART as a debug output/console**.

### Hardware Design Requirements
- **Open source/hackable/expandable**.
- **Simple command-based interface**.
- **Proper input protection**.
- **Adjustable target voltage**.
- **Off-the-shelf components**.
- **Hand solderable (if desired)**.

### Block Diagram
- **MCU**: Parallax Propeller
- **EEPROM**: 24LC512 (2 I2C)
- **Power Switch**: MIC2025-2YM
- **LDO**: LD1117S33TR
- **USB**: 5V
- **D/A**: AD8655 (1.2V - 3.3V, ~13mV/step)
- **Serial-to-USB**: FT232RL
- **Host PC**: USB Mini-B
- **Voltage Level Translator**: TXS0108EPWR
- **Input Protection Circuitry**
- **Status Indicator**: WP59EGW
- **PCB**: 2x5 headers compatible with Bus Pirate probes, [http://dangerousprototypes.com/docs/Bus_Pirate](http://dangerousprototypes.com/docs/Bus_Pirate)
- **Target Interface (24 channels)**
- **Propeller**: 8 independent cogs @ 20 MIPS each, 32KB RAM, 32KB ROM, 2KB RAM per cog, 32 GPIO @ 40mA sink/source per pin.
- **Program code loaded from external EEPROM on power-up**.
- **Standard development using Propeller Tool & Parallax Serial Terminal (Windows)**.
- **Programmable via serial interface (usually in conjunction with USB-to-serial IC)**.

### USB Interface
- **Allows for Propeller programming & UI**.
- **Powers JTAGulator from bus (5V)**.
- **FT232RL USB-to-Serial UART**:
  - Entire USB protocol handled on-chip.
  - Host will recognize as a virtual serial port (Windows, OS X, Linux).
- **MIC2025 Power Distribution Switch**:
  - Internal current limiting, thermal shutdown.
  - Ensures the FT232 enumerates first, preventing interference with the target when not in use.

### Input Protection
- **Prevent high voltages/spikes on unknown pins from damaging JTAGulator**.
- **Diode limiter clamps input if needed**.
- **Vf must be < 0.5V to protect TXS0108Es**.

### Bill-of-Materials
- **All components from Digi-Key**.
- **Total cost per unit = $50.73**.

#### Example Component
- **Capacitor, 0.01uF ceramic, 10%, 50V, X7R, 1206**:
  - Manufacturer: Kemet
  - Manufacturer Part #: C1206C103K5RACTU
  - Distributor: Digi-Key
  - Distributor Part #: 399-1234-1-ND

### Document Details
- **HW B, Document 1.0, April 19, 2013**