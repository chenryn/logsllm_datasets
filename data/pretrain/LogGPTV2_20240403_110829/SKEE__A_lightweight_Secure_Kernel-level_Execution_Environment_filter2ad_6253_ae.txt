Geekbench
Single Core
Multi Core
Original
30933
5061
718
12893
35576
2465
1077
1083
3281
SKEE
29035
5002
739
12552
34761
2500
1071
966
2747
Degradation (%)
6.14%
1.17%
-2.93%
2.65%
2.29%
-1.42%
0.56%
10.8%
16.28%
Multiple benchmark tools were used to compare the per-
formance of SKEE with the original system. Results of the
32-bit ARMv7 are shown in table III. When tested using
12
Benchmark
CF-Bench
Smartbench 2012
Linpack
Quadrant
Antutu v5.7
Vellamo
Browser
Metal
Geekbench
Single Core
Multi Core
Original
75641
14030
1904
36891
66193
3690
2650
1453
4585
SKEE
66741
13377
1874
35595
67223
3141
2540
1235
4288
Degradation(%)
11.77%
4.65%
1.58%
3.51%
-1.56%
14.88%
4.15%
15.00%
6.48%
seven different benchmarking tools, the prototype shows a
performance degradation that varies according to the used
benchmark. Results of the 64-bit ARMv8 are shown in ta-
ble IV. It was tested using the same benchmarking tools and
the same variation of degradation rates was observed. We
attribute this variation to the unexpected system state when
the TLB is frequently invalidated. The process of restoring the
cached entries using translation table walks can vary according
to the state of the system.
Loading Apps Delay: The third experiment evaluated the effect
of SKEE on the look and the feel of the device from the
perspective of the end user. The experiment measured the time
needed to load some Android Apps. The time was measured
between the time the App icon is pressed to the time it is
fully loaded. We selected a set of gaming apps that require
long time to load due to the size of their binaries and the high
resolution graphics involved. The apps were selected from the
list of the most popular apps on the Android App Store.
Table V.
SKEE APP LOAD DELAY ON ARMV7
App
Temple Run 2
Hill Climb Racing
Angry Birds
Crossy Road
Subway Surf
Original
9.31
3.66
4.72
4.81
5.45
SKEE
10.33
3.71
4.79
5.24
5.95
Overhead (%)
10.96%
1.37%
1.48%
8.94%
9.17%
Table VI.
SKEE APP LOAD DELAY ON ARMV8
App
Temple Run 2
Hill Climb Racing
Angry Birds
Crossy Road
Subway Surf
Original
6.08
2.42
4.12
3.42
4.42
SKEE
6.58
2.73
4.32
3.80
4.71
Overhead(%)
8.22%
12.81%
4.85%
11.11%
6.34%
Tables V and VI show the result of this experiment on
ARMv7 and ARMv8 respectively. The overhead represents the
extra time needed to load the app when SKEE is present.
Device Boot up Time: The last experiment measured the
overhead added to device boot up time. Booting up is one
of SKEE’s worst case scenarios because it requires enormous
number of memory allocations. In 32-bit ARMv7, the average
original system boot up time is 21.35 seconds, while the
average boot up time for the SKEE system is 23.10 seconds
(8.2% increase). In 64-bit ARMv8, the average original system
boot up time is 21.72 second, while the average boot up time
for the SKEE system is 24.30 seconds (11.9% increase).
B. Added Overhead of Sample Security Checks
In the second group of experiments, we added security
checks to guarantee that the emulated events do not compro-
mise the isolation. The purpose is to measure the overhead of
SKEE with a sample framework that satisﬁes the minimal set
of security checks required to protect the isolated environment.
To build the sample security framework, we adopted the
same technique presented in TZ-RKP [11]. In this framework,
SKEE creates an array that stores the status of every physical
frame of the system memory. It uses this array to verify that
writes to either translation tables or translation table base
registers will not expose SKEE’s protected address space.
The experiments in this section were done using a Samsung
Galaxy Note5 smartphone, which uses 64-bit ARMv8 Exynos
7420 processor. The target OS was Android 5.1.1, which ran
on Linux kernel 3.10.61. In these experiments the system is
set with maximum logging and debugging capabilities.
This group of experiments was done using different hard-
ware, Android version and system settings from the exper-
iments presented in Section V-A. Hence, the performance of
the original system varies between both groups of experiments.
To make sure that results are accurate, we compare the
performance of three system images: an original image without
SKEE, an image where SKEE is only used to emulate system
events withouts any security checks, and ﬁnally an image
where SKEE hosts the framework that veriﬁes the emulated
events do not compromise the isolation.
Table VII.
SKEE ADDED SECURITY CHECKS BENCHMARK SCORES
Benchmark
CF-Bench
Smartbench
Linpack
Quadrant
Antutu v5.7
Vellamo
Browser
Metal
Geekbench
Single Core
Multi Core
Original
63273
15820
1849
31429
65242
4659
2158
1508
4566
SKEE
58903
15217
1697
30843
62866
4256
2139
1342
4388
Degrad.
(%)
6.91%
3.81%
8.22%
1.86%
3.64%
8.65%
0.88%
11.00%
3.90%
SKEE +
Sec. Checks
57250
15104
1560
29330
58658
4350
2081
1340
4207
Degrad.
(%)
2.81%
0.74%
8.07%
4.91%
6.69%
-2.21%
2.71%
0.15%
4.12%
The same set of benchmark tools used in Section V-A were
used to evaluate the performance of SKEE with the newly
added security checks. The results are shown in table VII. The
fourth column calculates the percentage degradation between
bare SKEE and the original system, while the sixth column
calculates the percentage degradation between SKEE hosting
the security framework and the bare SKEE system.
It can be observed that overhead added by the bare SKEE
platform slightly varies from the one reported in table IV.
For instance, the Vellamo-browser benchmark reported less
overhead in this experiment. We can conclude that the impact
of TLB invalidation is not uniform; it varies according to
the original system settings. Similar to the results reported in
Section V-A, it can be also observed that the measured over-
head widely vary according to the used benchmark. Finally, it
can be observed that the performance impact of the security
framework is within 10%.
We measured the overhead added to the device boot up
time. The average original system boot up time is 30.15
seconds. The average boot up time for bare SKEE is 33.80
seconds (11.7% increase), while that of SKEE hosting the se-
curity framework is 35.12 seconds (4.9% additional increase).
C. Performance Enhancement
The experiments presented in this paper do not include
performance enhancement technique. The relatively high per-
formance overhead is attributed to the large number of page
table updates that are emulated by SKEE. Hence, adopting
techniques that group page table updates to reduce the number
context switching, such as those introduced in TZ-RKP [11],
will reduce the performance overhead.
VI. RELATED WORK
Section I cites a plethora of related work that use hyper-
visors to monitor and protect the OS. Hypervisors can either
rely on hardware-assisted or software-based virtualization tech-
niques. The latter is often referred to as para-virtualization.
KVM/ARM [18] is an example of systems that build a
hardware-assisted ARM hypervisor, which can be used to
host security tools. The key difference between such sys-
tems and SKEE is the location of the security monitor.
In hardware-assisted virtualization, the hypervisor relies on
hardware extensions to provide the required isolation and
memory virtualization. Using the same virtualization layer for
kernel monitoring increases both the size of the hypervisor’s
TCB and the hypervisor’s interaction with the kernel, which
consequently increases the chances of having vulnerabilities.
This is speciﬁcally a concern in real world systems, where
the virtualization layer is used for purposes other than kernel
monitoring. SKEE solves this problem by creating an extra
layer of indirection that is less privileged than the virtualization
layer, yet more privileged than the kernel.
secure
theoretically less
Para-virtualization is
than
hardware-assisted virtualization. However, it is more ﬂexible
because it allows the hypervisor to be built without monopoliz-
ing hardware extensions. ARMVisor [21] is an example of sys-