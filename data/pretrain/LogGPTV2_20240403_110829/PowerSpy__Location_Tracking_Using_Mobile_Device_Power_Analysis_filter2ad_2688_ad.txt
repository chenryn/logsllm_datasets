55%
65%
Table 2: Test Routes
Table 3: Destination localization
and an HTC Desire. Each phone was used to record
the power proﬁle of a different route. The four routes
combined cover almost all of the road segments in the
area. Table 2 details the routes by their corresponding
sequences of intersection identiﬁers. These route record-
ings were done on different days, different time of day
and varying weather conditions.
As noted, we can only measure the aggregate power
consumption which can be signiﬁcantly affected by ap-
plications that run continuously. To have a better sense
of the effects of these applications the phones were
run with different number of background applications.
Nexus 4 #1, Nexus 5 and HTC Desire have a relatively
modest number of applications which included (beyond
the default Android apps): Email (corporate account),
Gmail, and Google Calender. Nexus 4 #2 has a much
higher number of application which included on top of
the applications of phone #1: Facebook, Twitter, Skype,
Waze, and WhatsApp. All those applications periodi-
cally send and receive trafﬁc.
For each of the four tracks we derived all possible sub-
tracks having 3 to 7 road segments. We estimated each
such sub-track. In total we estimated around 200 sub-
tracks. For each sub-track we employed Algorithms 2
and 3 to get two best estimates for the sub-track.
Tables 3 to 5 summarize the results of route estimation
for each of the four phones. For each route we have two
alternatives for picking an estimate (1) the most frequent
route in the particle set as output by Algorithm 2; (2)
the route output by Algorithm 3. For each alternative we
note the road segment in which the phone is estimated to
be after the completion of its track and compare it with
the ﬁnal road segment of the true route. This allows us to
measure the accuracy of the algorithm for estimating the
location of the user’s destination (the end of the track).
This is the most important metric for many attack sce-
narios where the attacker wishes to learn the destination
of the victim.
In some cases it may also be beneﬁcial for the attacker
to know the actual route through which the victim tra-
versed on his way to the destination. For this purpose,
we also calculate for each alternative estimate the Leven-
shtein distance between it and the true route. The Leven-
shtein distance is a standard metric for measuring the dif-
ference between two sequences [18]. It equals the mini-
mum number of updates required in order to change one
sequence to the next. In this context, we treat a route as
a sequence of intersections. The distance is normalized
by the length of the longer route of the two. This allows
us to measure the accuracy of the algorithm for estimat-
ing the full track the user traversed. For each estimate
we also note whether it is an exact ﬁt with the true route
(i.e., zero distance). The percentage of successful local-
ization of destination, average Levenshtein distance and
percentage of exact full route ﬁts are calculated for each
type of estimated route. We also calculate these metrics
for both estimates combined while taking into account
for each track the best of the two estimates. To bench-
mark the results we note in each table the performance
of a random estimation algorithm which simply outputs
a random, albeit feasible, route.
The results in Table 3 show the accuracy of destination
identiﬁcation. It is evident that the performance of the
most frequent route output by the particle ﬁlter is com-
parable to the performance of the best estimate output by
Algorithm 3. However, their combined performance is
signiﬁcantly better than either estimates alone and pre-
dict more accurately the ﬁnal destination of the phone.
This result suggests that Algorithm 3 extracts signiﬁcant
amount of information from the routes output by the par-
ticle ﬁlter beyond the information gleaned from the most
frequent route.
Table 3 indicates that for Nexus 4 #1 the combined
route estimates were able to identify the ﬁnal road seg-
ment for 80% of all scenarios. For Nexus 4 #2 which was
running many applications the ﬁnal destination estimates
are somewhat less accurate (72%). This is attributed to
the more noisy measurements of the aggregate power
consumption. The accuracy for the two models – Nexus
5 and HTC Desire – is lower than the accuracy achieved
for Nexus 4. Remember that all our pre-recordings were
done using a Nexus 4. These results may indicate that the
power consumption proﬁle of the cellular radio is depen-
dent on the phone’s model. Nonetheless, for both phones
we achieve signiﬁcantly higher accuracy of destination
localization (55% and 65%) as compared to the random
case (about 20%).
Tables 4 and 5 present measures – Levenshtein dis-
tance and exact full route ﬁt – of the accuracy of esti-
mates for the full route the phone took to its destination.
Here, again, the algorithm presented for Nexus 4 #1 su-
perior performance. It was able to exactly estimate 45%
USENIX Association  
24th USENIX Security Symposium  795
11
Nexus 4 #1
Nexus 4 #2
Nexus 5
HTC Desire
Nexus 4 #1
Nexus 4 #2
Nexus 5
HTC Desire
random frequent Alg. 3
0.27
0.59
0.55
0.5
0.61
0.63
0.68
0.65
0.38
0.61
0.6
0.59
Table 4: Levenshtein distance
random frequent Alg. 3
22%
5%
9%
12%
38%
8.5%
15%
10%
4%
5%
3%
5%
combined
0.24
0.52
0.45
0.45
combined
45%
15%
20%
17%
Table 5: Exact full route ﬁt
of the full route to the destination. On the other hand, for
the more busy Nexus 4 #2 and the other model phones
the performance was worse.
It is evident from the re-
sults that for these three phones the algorithm had difﬁ-
culties producing an accurate estimate of the full route.
Nonetheless, in all cases the accuracy is always markedly
higher than that of the random case.
To have a better sense of the distance metric used
to evaluate the quality of the estimated routes Figure 9
depicts three cases of estimation errors and their corre-
sponding distance values in increasing order. It can be
seen that even estimation error having relatively high dis-
tances can have a signiﬁcant amount of information re-
garding the true route.
8 Future directions
In this section we discuss ideas for further research, im-
provements, and additions to our method.
8.1 Power consumption inference
While new (yet very common) smartphone models con-
tain an internal ampere-meter and provide access to cur-
rent data, other models (for instance Galaxy S III) sup-
ply voltage but not current measurements. Therefore on
these models we cannot directly calculate the power con-
sumption. V-edge [31] proposes using voltage dynamics
to model a mobile device’s power consumption. That and
any other similar technique would extend our method
and make it applicable to additional smartphone models.
Ref. [33] presents PowerTutor, an application that es-
timates power consumption by different components of
the smartphone device based on voltage and state of dis-
charge measurements.
Isolating the power consumed
by the cellular connectivity will improve our method by
eliminating the noise introduced by other components
such as audio/Bluetooth/WiFi etc.
that do not directly
depend on the route.
8.2 State of Discharge (SOD)
The time derivative of the State-of-Discharge (the bat-
tery level) is basically a very coarse indicator of power
consumption. While it seemed to be too inaccurate for
our purpose, there is a chance that extracting better fea-
tures from it or having few possible routes may ren-
der distinguishing routes based on SOD proﬁles feasi-
ble. Putting it to the test is even more interesting given
the HTML 5 Battery API that enables obtaining certain
battery statistics from a web-page via JavaScript. Our
ﬁndings demonstrate how future increases in the sam-
pling resolution of the battery stats may turn this API
even more dangerous, allowing web-based attacks.
8.3 Choice of reference routes
Successful classiﬁcation depends among other factors
on good matching between the power proﬁle we want
to classify and the reference power proﬁles. Optimal
matching might be a matter of month, time of day, trafﬁc
on the road, and more. We can possibly improve our clas-
siﬁcation if we tag the reference proﬁles with those asso-
ciated conditions and select reference proﬁles matching
the current conditions when trying to distinguish a route.
That of course requires collecting many more reference
proﬁles.
8.4 Collecting a massive dataset
Collecting a massive dataset of power proﬁles associated
with GPS coordinates is a feasible task given vendors’
capability to legally collect analytics about users’ use of
their smartphones. Obtaining such big dataset will en-
able us to better understand how well our approach can
scale and whether it can be used with much less prior
knowledge about the users.
9 Defenses
9.1 Non-defenses
One might think that by adding noise or limiting the sam-
pling rate or the resolution of the voltage and current
measurements one could protect location privacy. How-
ever, our method does not rely on high sampling fre-
quency or resolution.
In fact, our method works well
with proﬁles much coarser than what we can directly get
from the raw power data, and for the route distinguish-
ing task we actually performed smoothing and downsam-
pling of the data yet obtained good results. Our method
also works well with signal strength, which is provided
796  24th USENIX Security Symposium 
USENIX Association
12
3
4
2
1
5
6
7
5
6
6
7
7
8
2
2
1
1
(b) Distance = 0.25
3
4
8
8
2
1
5
6
7
8
(a) Distance = 0.125
(c) Distance = 0.43
Figure 9: Examples of estimation errors and their corresponding distances (partial map is depicted). The true route is
green and the estimated route is red.
with much lower resolution and sampling frequency7.
9.2 Risky combination of power data and
network access
One way of reporting voltage and current measurements
to the attacker is via a network connection to the at-
tacker’s server. Warning the user of this risky combi-
nation may somewhat raise the bar for this attack. There
are of course other ways to leak this information. For
instance, a malicious application disguised as a diagnos-
tic software can access power data and log it to a ﬁle,
without attempting to make a network connection, while
another, seemingly unrelated, application reads the data
from that ﬁle and sends it over the network.
9.3 Secure hardware design
The problem with access to total power consumption is
that it leaks the power consumed by the transceiver cir-
cuitry and communication related tasks that indicate sig-
nal strength. While power measurements can be useful
for proﬁling applications, in many cases, examining the
power consumed by the processors executing the soft-
ware logic might be enough. We therefore suggest that
supplying only measurements of the power consumed by
the processors (excluding the power consumed by the
TX/RX chain) could be a reasonable trade-off between
functionality and privacy.
9.4 Requiring superuser privileges
A simple yet effective prevention may be requiring su-
peruser privileges (or being root) to access power supply
data on the phone. Thus, developers and power-users
can install diagnostic software or run a version of their
7In fact, since it reﬂects more directly the environmental conditions,
signal strength data can provide even better route identiﬁcation and
tracking. We did not focus on signal strength since accessing it re-
quires access permissions and has already drawn research attention to
it as useful for localization.
application that collects power data on a rooted phone,
whereas the release version of the software excludes this
functionality. This would of course prevent the collection
of anonymous performance statistics from the install-
base, but as we have shown, such data can indicate much
more than performance.
9.5 Power consumption as a coarse loca-
tion indicator
Same as the cell identiﬁer is deﬁned as a coarse location
indicator, and requires appropriate permissions to be ac-
cessed, power consumption data can also be deﬁned as
one. The user will then be aware, when installing ap-
plications that access voltage and current data, of the
application’s potential capabilities, and the risk poten-
tially posed to her privacy. This defense may actually
be the most consistent with the current security policies
of smartphone operating systems like Android and iOS,
and their current permission schemes.
10 Related work
Power analysis is known to be a powerful side-channel.
The most well-known example is the use of high sam-
ple rate (∼20 MHz) power traces from externally con-
nected power monitors to recover private encryption keys
from a cryptographic system [15]. Prior work has also
established the relationship between signal strength and
power consumption in smartphones [6,29]. Further, Bar-
tendr [29] demonstrated that paths of signal strength
measurements are stable across several drives.
PowerSpy combines these insights on power analy-
sis and improving smartphone energy efﬁciency to re-
veal a new privacy attack. Speciﬁcally, we demonstrate
that an attacker can determine a user’s location simply by
monitoring the cellular modem’s changes in power con-
sumption with the smartphone’s alarmingly unprotected
∼100 Hz internal power monitor.
USENIX Association  
24th USENIX Security Symposium  797
13
10.1 Many sensors can leak location
Prior work has demonstrated that data from cellular
modems can be used to localize a mobile device (an ex-