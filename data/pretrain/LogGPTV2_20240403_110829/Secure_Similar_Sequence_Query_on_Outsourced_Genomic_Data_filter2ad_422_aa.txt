title:Secure Similar Sequence Query on Outsourced Genomic Data
author:Ke Cheng and
Yantian Hou and
Liangmin Wang
Boise State University
ScholarWorks
Computer Science Faculty Publications and
Presentations
1-1-2018
Department of Computer Science
Secure Similar Sequence Query on Outsourced
Genomic Data
Ke Cheng
Boise State University
Yantian Hou
Boise State University
Liangmin Wang
Jiangsu University
This is an author-produced, peer-reviewed version of this article. The final, definitive version of this document can be found online at ASIACCS '18:
Proceedings of the 2018 on Asia Conference on Computer and Communications Security, published by Association for Computing Machinery. Copyright
restrictions may apply. doi: 10.1145/3196494.3196535
This  is  an  author-produced,  peer-reviewed  version  of  this  article.  The  final,  definitive  version  of  this  document  can  be  found  online  at  ASIACCS  '18:
Proceedings of the 2018 on Asia Conference on Computer and Communications Security, published by Association for Computing Machinery. Copyright
restrictions may apply. doi: 10.1145/3196494.3196535
Secure Similar Sequence Query on Outsourced Genomic Data
Ke Cheng*
Boise State University
Boise, Idaho, USA
PI:EMAIL
Yantian Hou
Boise State University
Boise, Idaho, USA
PI:EMAIL
Liangmin Wang
Jiangsu University
Zhenjiang, Jiangsu, China
PI:EMAIL
ABSTRACT
The growing availability of genomic data is unlocking research
potentials on genomic-data analysis. It is of great importance to
outsource the genomic-analysis tasks onto clouds to leverage their
powerful computational resources over the large-scale genomic se-
quences. However, the remote placement of the data raises personal-
privacy concerns, and it is challenging to evaluate data-analysis
functions on outsourced genomic data securely and efficiently. In
this work, we study the secure similar-sequence-query (SSQ) prob-
lem over outsourced genomic data, which has not been fully in-
vestigated. To address the challenges of security and efficiency,
we propose two protocols in the mixed form, which combine two-
party secure secret sharing, garbled circuit, and partial homomor-
phic encryptions together and use them to jointly fulfill the secure
SSQ function. In addition, our protocols support multi-user queries
over a joint genomic data set collected from multiple data owners,
making our solution scalable. We formally prove the security of
protocols under the semi-honest adversary model, and theoreti-
cally analyze the performance. We use extensive experiments over
real-world dataset on a commercial cloud platform to validate the
efficacy of our proposed solution, and demonstrate the performance
improvements compared with state-of-the-art works.
CCS CONCEPTS
• Security and privacy → Privacy-preserving protocols; Se-
curity protocols; Privacy protections;
KEYWORDS
Secure similar sequence query, genomic data outsourcing, mixed
protocols
ACM Reference Format:
Ke Cheng*, Yantian Hou, and Liangmin Wang. 2018. Secure Similar Se-
quence Query on Outsourced Genomic Data. In ASIA CCS’18: 2018 ACM
Asia Conference on Computer and Communications Security, June 4–8, 2018,
Incheon, Republic of Korea. ACM, New York, NY, USA, 17 pages. https:
//doi.org/10.1145/3196494.3196535
*Ke Cheng is also a member of Department of Computer Science at Anhui University.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
ASIA CCS’18, June 4–8, 2018, Incheon, Republic of Korea
© 2018 Association for Computing Machinery.
ACM ISBN 978-1-4503-5576-6/18/06. . . $15.00
https://doi.org/10.1145/3196494.3196535
1 INTRODUCTION
The rapid advance of the gene-sequencing technique is generating
a huge amount of genomic data which holds the key to the under-
standing of many diseases. The cost of sequencing a human genome
is about $1,000 today and is estimated to drop to only $100 in near
future with the aid of next-generation sequencing techniques [1].
The growing availability of genomic data is unlocking research po-
tentials on genome-data query and analysis [21] in medical domain.
Similar Sequence Query (SSQ) on genomic data has been utilized
as a cornerstone in many gene therapies to identify individuals
with close genomic data. Among the indicators of genomic simi-
larity, edit distance is regarded as one of the most important and
frequently-used metrics for biomedical research [29].
However, genomic information is highly sensitive, thus malicious
analysis over genomic data could lead to terrifying privacy leakage.
It has been reported that researchers could identify a patient by
analyzing his/her genome sequence [32], or infer the close relatives
given a target person’s gene sequence [19]. To address the privacy
issues, several works have been proposed to securely perform SSQ
operations on genomic data. Researchers used the secure multi-
party computation model (SMC) to perform a query operation
over the genomic data set without revealing the query information
[2, 3, 35, 36]. However, these works produce a large amount of user-
side computations and communications, which are too unwieldy
to be practical.
To free users from these burdens, another paradigm that is based
on secure computing outsourcing is investigated. In this paradigm,
the data owner securely outsources data to the cloud server, which
will then process user’s queries by searching within the data set in
a privacy-preserving manner. Several privacy-preserving protocols
[5, 9, 14] are proposed to compute the edit distance between two
sequences based on homomorphic encryptions. Though correct-
ness demonstrated, these approaches raise performance concerns
primarily due to the length of genomic sequences.
To address this issue, in a recent piece of work [23], Kim et
al. developed a secure approximate edit distance scheme aiming
at reducing the computation overhead on cloud based on the set-
difference metric, which enables parallel processing in computation.
However, the query user still suffers from heavy overhead. In ad-
dition, all these works heavily rely on homomorphic encryption
primitives, which are costly to make these schemes scalable to
support multiple data owners and users.
In this work, we study the secure similar sequence query prob-
lem over outsourced genomic data. Our goal is to develop a secure
SSQ solution that is efficient over large-volume genomic data. To
this end, we propose two protocols in the mixed form [12], which
combine two-party secret sharing, garbled circuit, and partial ho-
momorphic encryptions together and use them to jointly fulfill the
This  is  an  author-produced,  peer-reviewed  version  of  this  article.  The  final,  definitive  version  of  this  document  can  be  found  online  at  ASIACCS  '18:
Proceedings of the 2018 on Asia Conference on Computer and Communications Security, published by Association for Computing Machinery. Copyright
restrictions may apply. doi: 10.1145/3196494.3196535
secure SSQ function. Our protocols could perform k-nearest se-
quence queries securely by guaranteeing the privacy of outsourced
data and queries. To improve our protocols’ performance, we em-
ploy the lightweight additive secret sharing method to evaluate
the majority of secure-computation functions, while reducing the
usage of homomorphic encryptions to the minimum. The computa-
tional overhead on query users is negligible and the communication
overhead is only one-time. In addition, our protocols support mul-
tiple query-generating users and data owners, yielding a scalable
solution in advancing secure SSQ in practice.
Challenges. We observe that finding the minimum and selecting
the branch are key operations in the process of edit distance com-
putation. During these processes, the information regarding the
index of the result should not be revealed, because some confi-
dential information, such as the access patterns could be leaked
with indices disclosed. Although there are some works tackling
these problems, their performance is not satisfactory, since multiple
costly encryptions, decryptions, and evaluations on ciphertexts are
needed [10, 13]. Also, their schemes didn’t consider the scalability
issue in multi-user scenarios.
In addition, our mixed protocols utilize different types of sub-
protocols, which use different message spaces. For example, in the
offline phase of our secure shuffling protocol, a conversion from
message space of additive secret sharing to that of Paillier encryp-
tion is needed. Though straightforward to convert the message
space while guaranteeing the correctness of protocols in evaluating
corresponding functions, it is challenging to guarantee security
during this process.
Our Contribution. By addressing the aforementioned challenges,
we propose two protocols that could securely and efficiently com-
pute k nearest sequences given queries from multiple users. Specif-
ically, our contributions are:
• In combination with multiple secure computation methods
including secret sharing, garbled circuits, and homomorphic
encryption, we present a set of secure hybrid sub-protocols,
which can be used as building blocks for secure similar se-
quence query.
• Based on our building blocks, we implement two secure SSQ
protocols with exact edit distance (SSQ-I) and approximate
edit distance (SSQ-II). Our protocols allow secure multi-user
SSQ on a joint genomic database collected from different data
sources. By shifting a large portion of computational work-
load including the homomorphic encryptions to the offline
phase, we could remarkably improve the query performance.
• We formally prove that our protocols are secure under semi-
honest adversaries model. We present an extensive experi-
mental evaluation of the proposed protocols that are imple-
mented on a commercial cloud platform, showing that the
proposed methods scale well for large data sets, and clearly
outperform state-of-the-art works.
The rest of the paper is organized as follows. Section 2 reviews
edit distance computation and some secure computation primitives.
Section 3 gives an overview of our system framework. A set of
privacy-preserving sub-protocols and their implementations are
provided in Section 4. In Section 5, the two proposed SSQ protocols
are explained in detail. We analyze the computational complexity
and the security of the proposed protocols in Section 6. The pro-
posed protocols are evaluated through extensive simulations in
Section 7. We make a discussion and review some related work in
Section 8 and Section 9, and make a conclusion in Section 10.
2 PRELIMINARIES
2.1 Edit Distance Protocol for Genomic
Sequences
Edit distance is a measure to quantify how dissimilar two strings of
characters are to one another by counting the minimum number of
edits required to transform one string into the other. Wagner-Fisher
algorithm is a common method for computing edit distance based
on dynamic programming, we refer the reader to Appendix A for
details.
However, the overhead for computing the exact genome edit
distance in a privacy-preserving manner is too large because of
large datasets and long sequences. There is a unique feature in
human genome sequences that two average human individuals
are extremely similar at the genetic level (about 99.5%) [36]. So
researchers, in recent years, have developed a series of approximate
edit distance protocols based on this observation [3, 23, 36]. Next,
we briefly describe an advanced approximate algorithm1 [3].
First, the algorithm converts the edit-distance function (ED)
into a block-wise approximation. Each sequence Si in the data-
base and query Q are broken into t short length (less than 15)
blocks (Si,1, . . . , Si,t ) and (Q1, . . . , Qt ). Then the approximate edit-
distance between Si and Q can be computed as follows:
t
ApproxED(Q, Si ) ≈
ED(Ql , Si,l ).
(1)
l =1
For genomic data, since each block has only a few distinct values, the
size of the set of values Tl = {Si,l : i = 1, . . . , m} is much smaller
than m. Furthermore, there is a high probability that the block Ql is
in the set Tl . Let v = max(|Tl | : l = 1, . . . , t ), Tl = {ul,1
, . . . , ul,v },
define a bit variable χl, j ← (ul, j == Ql ?1 : 0) to indicate whether
ul, j is equal to Ql . In the case where Ql (cid:2) Tl , χl, j = 0 will bring
the error. However, [3] verified that the error rate is minor on real
genomic data. Thus, we have
v
ED(Ql , Si,l ) ≈
then
χl, j · ED(ul, j , Si,l ),
v
j=1
t
ApproxED(Q, Si ) ≈
χl, j · ED(ul, j , Si,l ).
l =1
j=1
(2)
(3)
Note that ED(ul, j , Si,l ) is not relevant to the query Q, so it can be
pre-computed.
2.2 Secure Computation
2.2.1 Additive Secret Sharing and Multiplication Triplets. For the
additive secret sharing [12], an (cid:2)-bit value x is shared additively
2(cid:2) as the sum of two values. For an (cid:2)-bit additive
in the ring Z
secret sharing (cid:4)x(cid:5) of x, we have (cid:4)x(cid:5) A + (cid:4)x(cid:5) B ≡ x (mod 2
) where
(cid:4)x(cid:5) A , (cid:4)x(cid:5) B ∈ Z
is only known by party α (α ∈ {A, B}).
We denote a shared value x as (cid:4)x(cid:5). To recover (Rec(·, ·)) the value
2(cid:2) and (cid:4)x(cid:5)α
(cid:2)
1This work won the 1st place for accuracy and speed in the recent iDASH competition
(http://www.humangenomeprivacy.org/2016/).
This  is  an  author-produced,  peer-reviewed  version  of  this  article.  The  final,  definitive  version  of  this  document  can  be  found  online  at  ASIACCS  '18:
Proceedings of the 2018 on Asia Conference on Computer and Communications Security, published by Association for Computing Machinery. Copyright
restrictions may apply. doi: 10.1145/3196494.3196535
x, party A (B) sends (cid:4)x(cid:5) A
x = (cid:4)x(cid:5) A + (cid:4)x(cid:5) B
values can be defined as follows:
((cid:4)x(cid:5) B
) to party B (A) who computes
. The basic operation on additive secret sharing
Addition. To compute the sum of two shared values (cid:4)x(cid:5) and
(cid:4)y(cid:5), (cid:4)z(cid:5) = (cid:4)x + y(cid:5) = (cid:4)x(cid:5) + (cid:4)y(cid:5) can be defined as: party α locally
computes (cid:4)z(cid:5)α = (cid:4)x(cid:5)α + (cid:4)y(cid:5)α
. To compute the sum of a shared
values (cid:4)x(cid:5) and a public constant c, (cid:4)z(cid:5) = (cid:4)x + c(cid:5) = (cid:4)x(cid:5) + c can be
defined as: party A locally computes (cid:4)z(cid:5) A = (cid:4)x(cid:5) A + c, party B
locally computes (cid:4)z(cid:5) B = (cid:4)x(cid:5) B
.
Multiplication. (cid:4)z(cid:5) = (cid:4)x(cid:5) · (cid:4)y(cid:5): In order to perform multipli-
cation, we take advantage of pre-computed multiplication triplets
[4, 12] of the form (cid:4)c(cid:5) = (cid:4)a(cid:5) · (cid:4)b(cid:5): party α locally computes (cid:4)e(cid:5)α =
(cid:4)x(cid:5)α − (cid:4)a(cid:5)α
. Both parties run e=Rec((cid:4)e(cid:5) A
,
(cid:4)e(cid:5) B
), then party A sets (cid:4)z(cid:5) A = f · (cid:4)a(cid:5) A +
and B sets (cid:4)z(cid:5) B = e · f + f · (cid:4)a(cid:5) B + e · (cid:4)b(cid:5) B + (cid:4)c(cid:5) B
e · (cid:4)b(cid:5) A + (cid:4)c(cid:5) A
.
In the remainder of this paper, the additive secret sharing is