title:Something from Nothing (There): Collecting Global IPv6 Datasets from
DNS
author:Tobias Fiebig and
Kevin Borgolte and
Shuang Hao and
Christopher Kruegel and
Giovanni Vigna
Something from Nothing (There): Collecting
Global IPv6 Datasets from DNS
Tobias Fiebig1(B), Kevin Borgolte2, Shuang Hao2, Christopher Kruegel2,
and Giovanni Vigna2
1 TU Berlin, Berlin, Germany
PI:EMAIL
2 UC Santa Barbara, Santa Barbara, CA, USA
Abstract. Current large-scale IPv6 studies mostly rely on non-public
datasets, as most public datasets are domain speciﬁc. For instance,
traceroute-based datasets are biased toward network equipment. In this
paper, we present a new methodology to collect IPv6 address datasets
that does not require access to restricted network vantage points. We
collect a new dataset spanning more than 5.8 million IPv6 addresses
by exploiting DNS’ denial of existence semantics (NXDOMAIN). This
paper documents our eﬀorts in obtaining new datasets of allocated IPv6
addresses, so others can avoid the obstacles we encountered.
1 Introduction
The adoption of IPv6 has been steadily increasing in recent years [4]. Unsurpris-
ingly, simultaneously, the research question of eﬃciently identifying allocated
IPv6 addresses has received more and more attention from the scientiﬁc com-
munity. However, unfortunately for the common researcher, these studies have—
so far—been dominated by the analysis of large, restricted, and proprietary
datasets. For instance, the well-known content delivery network (CDN) dataset
used for most contemporary IPv6 analyses [8,15], Internet exchange point (IXP)
datasets, which were used regularly by some other research groups [3,9], or,
slightly less restrictive, the Farsight DNS recursor dataset [21]. Although pub-
lic datasets do exist, they are traceroute-based datasets from various sources,
including the RIPE Atlas project [17], which are limited due to their nature:
they are biased towards addresses of networking equipment, and, in turn, bear
their own set of problems for meaningful analyses.
Correspondingly, in this paper, we aim to tackle the problem of obtaining
a dataset of allocated IPv6 addresses for the common researcher: We present a
new methodology that can be employed by every researcher with network access.
With this methodology we were able to collect more than 5.8 million unique
IPv6 addresses The underlying concept is the enumeration of IPv6 reverse zones
(PTR) leveraging the semantics of DNS’ denial of existence records (NXDO-
MAIN). Although the general concept has been discussed in RFC 7707 [10], we
c(cid:2) Springer International Publishing AG 2017
M.A. Kaafar et al. (Eds.): PAM 2017, LNCS 10176, pp. 30–43, 2017.
DOI: 10.1007/978-3-319-54328-4 3
Collecting Global IPv6 Datasets From DNS
31
identiﬁed and overcame various challenges that prevented the use of this tech-
nique on a global scale. Therefore, we document how we can leverage the seman-
tics of NXDOMAIN on a global scale to collect allocated IPv6 addresses for a
new IPv6 dataset. Our detailed algorithmic documentation allows researchers
everywhere to implement this technique, reproduce our results, and collect sim-
ilar datasets for their own research.
In this paper, we make the following contributions:
– We present a novel methodology to enumerate allocated IPv6 addresses with-
out requiring access to a speciﬁc vantage point, e.g., a CDN, IXP, or large
transit provider.
– We focus on the reproducibility of our techniques and tools, to provide
researchers with the opportunity to collect similar datasets for their own
research.
– We report on a ﬁrst set of global measurements using our technique, in which
we gather a larger and more diverse dataset that provides new insights into
IPv6 addressing.
– We present a case-study that demonstrates how our technique allows insights
into operators’ networks that could not be accomplished with previous tech-
niques.
2 Previous Work
Active probing for network connected systems is probably one of the oldest
techniques on the Internet. However, tools that can enumerate the full IPv4 space
are relatively new. The ﬁrst complete toolchain that allowed researchers to scan
the whole IPv4 space was presented by Durumeric in 2013 [6] with ZMap. The
problem of scanning the whole IPv4 address space is mostly considered solved
since then. Especially the security scene heavily relies on these measures [19].
The address space for IPv6 is 128bit, which is signiﬁcantly larger than the 32bit
of IPv4. Hence, a simple brute-force approach as presented for IPv4 is—so far—
not feasible. Indeed, most current research eﬀorts in the networking community
are concerned with evaluating large datasets to provide descriptive information
on utilized IPv6 addresses [10].
Plonka and Berger provide a ﬁrst assessment of active IPv6 addresses in their
2015 study using a large CDN’s access statistics as dataset [15]. Subsequently, in
their 2016 work Foremski et al. propose a technique to generate possibly utilized
IPv6 addresses from initial seed datasets for later active probing [8]. Gasser et al.
attempt a similar endeavor, using—among various other previously mentioned
datasources—a large Internet Exchange Point (IXP) as vantage point [9]. How-
ever, prior work has the drawback that the used vantage points are not publicly
accessible.
Measurement-studies using public data sources have been recently published
by Czyz et al. [4,5]. They combine various public data sources, like the Alexa Top
1 million and the Farsight DNS recursor dataset [21]. In addition, they resolve
all IPv4 reverse pointers and attempt to resolve the returned FQDNs for their
IPv6 addresses.
32
T. Fiebig et al.
Algorithm 1. Algorithm iterating over ip6.arpa., based on RFC7707 [10].
// Base-Case: max.ip6.arpa.len = 128/4 ∗ 2 + len(”ip6.arpa.”);
Function enumerate(base, records={ }, max.ip6.arpa.len)
for i in 0..f do
newbase ← i+”.”+base;
qryresult ← getptr(newbase);
if qryresult != NXDOMAIN then
if len(newbase) == max.ip6.arpa.len then
add(records, newbase);
else
enumerate(newbase,records,max.ip6.arpa.len);
3 DNS Enumeration Techniques
Complimentary to prior approaches, van Dijk enumerates IPv6 reverse records by
utilizing the speciﬁc semantics of denial of existence records (NXDOMAIN) [2,
10]: When correctly implementing RFC1034 [12], as clariﬁed in RFC8020 [2], the
Name Error response code (NXDOMAIN in practice) has the semantic of there
is nothing here or anywhere thereunder in the name tree. Making this notion
explicit in RFC8020 [2] is a relatively recent development. Combined with the
IPv6 PTR DNS tree, where each sub-zone has 16 (0-f, one for each IPv6 nibble)
children up to a depth of 32 levels, provides the possibility to exploit standard-
compliant nameservers to enumerate the zone.
Speciﬁcally: Starting at the root (or any other
known subtree), a request for each of the pos-
sible child nodes is performed. If the authorita-
tive server returns NXDOMAIN, the entire possi-
ble subtree can be ignored, as it indicates that no
entries below the queried node exist. Algorithm 1
shows the corresponding algorithmic description.
Figure 1 provides a simpliﬁed visualization, e.g., if
a queries for 0-e.ip6.arpa. return NXDOMAIN, but
f.ip6.arpa. returns NOERROR, we can ignore these
subtrees, and continue at f.ip6.arpa., ﬁnally ﬁnding
f.0.f.ip6.arpa. as the only existing record.
Fig. 1. Enumerating f.0.f.-
ip6.arpa., existing nodes are
highlighted in bold.
.ip6.arpa
0
e
1
e
...
f
f
...
0
0
1
1
e
f
...
4 Methodology and Algorithmic Implementation
The approach outlined in Sect. 3 has been used on small scales in the past:
Foremski et al. [8] used it to collect a sample of 30,000 records from selected
networks for their study. In this section, we analyze the challenges of a global
application of the technique and describe how we can overcome these limitations.
Collecting Global IPv6 Datasets From DNS
33
is correctly implemented,
Non RFC8020-compliant Systems: The current technique requires that
RFC8020 [2]
i.e., that the nameserver behaves
standard-compliant. However, following RFC7707 [10], this is not the case for
all authoritative DNS nameserver software found in the wild [2]. Speciﬁcally,
if higher level servers (from a DNS tree point of view) are not enumerable by
any of the presented techniques, then this can mask the enumerable zones below
them. For example, if a regional network registry, like APNIC or, RIPE would
use a DNS server that cannot be exploited to enumerate the zone, then all net-
works for which they delegate the reverse zones would become invisible to our
methodology.
To approach this challenge, we seed the algorithm with potentially valid
bases, i.e., known to exist ip6.arpa. zones. Our implementation obtains the
most recent Routeviews [20], and the latest RIPE Routing Information Ser-
vice (RIS) [18] Border Gateway Protocol (BGP) tables as a source. Particularly
important to allow the approach to be easily reproducible: both are public BGP
view datasets, available to any researcher.
Based on the data, we create a collapsed list of preﬁxes. Following prior
work, we consider the generated list a valid view on the Global Routing Table
(GRT) [22]. For each of the collapsed preﬁxes we calculate the corresponding
ip6.arpa. DNS record. The resulting list is then used as the input seed for our
algorithm. Alternative public seed datasets are the Alexa Top 1,000,000 [4,5]
or traceroute datasets [8] (which, as aforementioned, are biased by nature; thus,
special care must be taken for traceroute datasets). If available, other non-public
datasets like the Farsight DNS recursor dataset [21] could also be used.
Complimentary approaches to collect ip6.arpa. addresses or subtrees from
systems that implement RFC8020 incorrectly are those with which one can
obtain (signiﬁcant parts of) a DNS zone. For example, by employing insuﬃciently
protected domain transfers (AXFRs), which are a prominent misconﬁguration
of authoritative nameservers [1].
Breadth-First vs. Depth-First Enumeration: For our data collection, we
employ Algorithm 1. Unfortunately, the algorithm leverages depth-ﬁrst search to
explore the IPv6 reverse DNS tree. This search strategy becomes problematic if
any of the earlier subtrees is either rather full (non-sparse) or if the authoritative
nameservers are relatively slow to respond to our queries. Slow responses are
particularly problematic: they allow an “early” subtree to delay the address
collection process signiﬁcantly.
Substituting depth-ﬁrst search with breadth-ﬁrst search is non-trivial unfor-
tunately. Therefore, we integrate features of breadth-ﬁrst search into the depth-
ﬁrst algorithm (Algorithm 1), which requires a multi-step approach: Starting
from the seed set, we ﬁrst use Algorithm 1 to enumerate valid ip6.arpa. zones
below the records up to a corresponding preﬁx-length of 32 bits. If we encounter
input-records that are more speciﬁc than 32 bits, we add the input record and
the input record’s 32-bit preﬁx to the result set. Once this step has completed
for all input records, we conduct the same process on the result set, but with
a maximum preﬁx-length of 48 bits, followed by one more iteration for 64-bit
34
T. Fiebig et al.
Algorithm 2. Algorithm cooking down the initial seed records.
Function cook down (records)
for preﬁx.len in 32,48,64 do
records.new ← { };
cur.ip6.arpa.len ← pref ix.len/4 ∗ 2 + len(”ip6.arpa.”);
for base in records do
// See Sect. 4 Dynamically-generated Zones/Preﬁx
Exclusion/Opt-Out for details;
if checks(base) == False then
else if len(base) ≥ cur.ip6.arpa.len then
pass
add(records.new, base);
crop.base = croptolength(base,cur.ip6.arpa.len);
add(records.new, crop.base);
else
add(records.new, enumerate(base, cur.ip6.arpa.len));
preﬁxes. We opted to use 64 bits as the smallest aggregation step because it is
the commonly suggested smallest allocation size and designated network size for
user networks [11]. Algorithm 2 provides a brief description of the cook down
algorithm. The last step uses Algorithm 1 on these /64 networks with a tar-
get preﬁx size of 128 bits, eﬀectively enumerating full ip6.arpa. zones up to their
leaf nodes. To not overload a single authoritative server, the ip6.arpa. record sets
are sorted by the least signiﬁcant nibble of the corresponding IPv6 address ﬁrst
before they are further enumerated. Sorting them by the least signiﬁcant nibble
spreads zones with the same most signiﬁcant nibbles as broadly as possible.
Combined with the observed low overall traﬃc that our modiﬁed technique
generates, we can prevent generating unreasonably high load on single authori-
tative nameserver. Our approach, contrary to prior work, does not generate high
load on the authoritative nameservers before moving on to the next one. Oth-
erwise it would launch a denial of service attack against the nameserver. If our
approach is more widely adopted by researchers, future work should investigate
how distributed load patterns can be prevented, i.e., thousands of researchers
querying the same nameserver simultaneously (see Sect. 4).
Detecting Dynamically-generated Zones: Dynamically generating the
reverse IP address zone, i.e., creating a PTR record just-in-time when it is
requested, has been popular in the IPv4 world for some time [16]. Unsurprisingly,
utilizing dynamically generated IPv6 reverse zones has become even more com-
mon over time as well. Especially access networks tend to utilize dynamically-
generated reverse records. While this provides a signiﬁcant ease-of-use to the net-
work operators, our algorithm will try to fully enumerate the respective subtrees.
For a single dynamically-generated /64 network it leads to 264 records to explore,
which is clearly impractical. Therefore, we introduce a heuristic to detect if a
Collecting Global IPv6 Datasets From DNS
35
zone is dynamically-generated, so that we can take appropriate action. To detect
dynamically-generated reverse zones, we can rely on the semantic properties of
reverse zones. The ﬁrst heuristic that we use is the repeatability of returned
FQDNs. Techniques for dynamically-generated reverse zones usually aim at pro-
viding either the same or similar fully-qualiﬁed domain names (FQDNs) for the
reverse PTR records. For the former detection is trivial. In the latter case, one
often ﬁnds the IPv6 address encoded in the returned FQDN. In turn, two or
more subsequent records in an dynamically generated reverse zone ﬁle should
only diﬀer by a few characters. Therefore, a viable solution to evaluate if a zone
is dynamically-generated is the Damerau-Levenshtein distance (DLD) [7].
Unfortunately, we encountered various cases where such a simplistic view is
insuﬃcient in practice. For instance, zones may also be dynamically-generated
to facilitate covert channels via DNS tunneling [14]. In that case, the returned
FQDNs appear random. Similarly in other cases, the IPv6 address is hashed,
and then incorporated into the reverse record. In those cases the change between
two records can be as high as the full hash-length of the utilized hash digest. We
devised another heuristic based on the assumption that if a zone is dynamically-
generated, then all records in the zone should be present. Following prior work
by Plonka et al. and Foremski et al. [8,15], we determined that certain records
are unlikely to exist in one zone all together, speciﬁcally, all possible terminal
records of a base that utilize only one character repeatedly. For example, for
the base 0.0.0.0.0.0.0.0.0.0.0.0.0.8.e.f.ip6.arpa such a record would be f.f.f.f.f.f.f.
f.f.f.f.f.f.f.f.f.0.0.0.0.0.0.0.0.0.0.0.0.0.8.e.f.ip6.arpa. Therefore, we build and query
all sixteen possible records from the character set 0..f. Due to these records being
highly unlikely [8], and the use of packet-loss sensitive UDP throughout DNS,
we require only three records to resolve within a one second timeout to classify a
zone as dynamically-generated. We omit the heuristic’s algorithmic description
for brevity, as the implementation is straight forward.
Preﬁx Exclusion: Naturally, in addition to excluding dynamically-generated
zones, a network operator may ask to be excluded from her networks being
scanned. During our evaluation, multiple network operators requested being
excluded from our scans. Furthermore, we blacklisted two network operators
that did use dynamically-generated zones, but for which our heuristic did not
trigger, either due to rate-limiting of our requests on their side, or bad connec-
tivity toward their infrastructure. Similarly, our algorithm missed a case for a
US based university which used /96 network access allocations, which we did
not detect as dynamically-generated due to the preselected step-sizes for Algo-
rithm 2. In total, we blacklisted ﬁve ISPs’ networks and one university network.
Ethical Considerations and Opt-Out Standard: To encourage best prac-
tice, for our experiments and evaluation, the outbound throughput was always
limited to a maximum of 10 MBit/s in total and speciﬁcally to 2MBit/s for
any single target system at a time following our least-signiﬁcant byte sorting for
ip6.arpa zones. Although the load we incurred was negligible for the vast major-
ity of authoritative nameservers, we acknowledge that the load this methodol-
ogy may put onto authoritative servers may become severe, particularly if more
36
T. Fiebig et al.
Algorithm 3. Call-order in ﬁnal script.
seeds ← get seeds();
enum.records ← cook down(seeds);
f inal.result ← { };
for base in enum.records do
// See Sect. 4 Dynamically-generated Zones/Preﬁx Exclusion/Opt-Out for
details;
return { } ;
if checks(base) == False then
tmp.results ← enumerate(base, 128);
f inal.result ← f inal.result + tmp.results;
researchers utilize the same approach simultaneously or do not limit their out-
bound throughput. Hence, we suggest to adopt and communicate the practice
of ﬁrst checking for the existence of a PTR record in the form of 4.4.4.f.4.e.5-
.4.5.3.4.3.4.1.4.e. ... .ip6.arpa.. The respective IPv6 record encodes the ASCII
representation of DONTSCAN for /64 networks. For networks larger than /64,
we suggest to repeat the string. We do not use a non-PTR conform record, as
this would exclude users utilizing, e.g., restrictive DNS zone administration soft-
ware possibly sanitizing input. We will carry this proposal toward the relevant
industry bodies, to provide operators a simple method to opt out of scans.
CNAMEs: Our investigation also found cases of seemingly empty terminals
in the DNS tree, i.e., records of 32 nibble length without an associated PTR
resource record that do not return NXDOMAIN. Upon removal of these records,
and by focusing on non-empty terminals in these address bases, we still obtain
valid results. In addition to cases where the terminals are fully empty, CNAME
records [13] may exist instead of PTR records, which is why it is necessary to
resolve CNAME records if a PTR record does not exist.
Parallelization: Combining the previously presented algorithms, we can enu-
merate the IPv6 PTR space (see Algorithm 3). Due to our algorithm’s nature,
parallelization is ideally introduced in the for loop starting at line 5 of Algo-