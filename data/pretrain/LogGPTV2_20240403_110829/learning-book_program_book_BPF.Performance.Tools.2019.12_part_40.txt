### 8.2.4 File System Tracing with `perf`

To trace file system events, the `perf` tool can be used with specific tracepoints. For example, to record the `ext4:ext4_ds_write_begin` event, the following command is executed:

```bash
+ perf record -e ext4:ext4_ds_write_begin -a
```

However, this can lead to a feedback loop because `perf` writes the trace data to the file system, which in turn triggers more write events. In the given example, this resulted in 14 million samples and a 1.3 GB `perf.data` file:

```
[ perf record: Captured and wrote 1376.293 MB perf.data (14394798 samples) ]
```

This feedback loop is an important consideration when tracing file system or disk writes.

The format string for the trace output includes the device, inode, position, length, and flags for the write. Here is an example of the trace output:

```plaintext
perf 26768 [005] 275068.339717: ext4:ext4_da_write_begin: dev 253,1 ino 1967479 pos 5260704 len 192 flags 0
...
```

File systems may support many tracepoints, or some, or none. For example, XFS has around 500 tracepoints. If your file system does not have tracepoints, you can use kprobes to instrument its internals.

For comparison, the same tracepoint can be instrumented using `bpftrace` to summarize the length argument as a histogram:

```bash
+ bpftrace -e 'tracepoint:ext4:ext4_da_write_begin { @hist[args->len] = hist(args->len); }'
```

This produces a histogram showing the distribution of write lengths, performed in kernel context without writing to the file system, thus avoiding the overhead and risk of a feedback loop.

### 8.2.5 `fatrace`

`fatrace(1)` is a specialized tracer that uses the Linux fanotify API (file access notify). Example output:

```bash
+ fatrace
cron (4794): C /tmp/#9346 (deleted)
cron (4794): R /etc/login.defs
rsyslogd (872): M /var/log/auth.log
sshd (7553): O /etc/motd
...
```

Each line shows the process name, PID, type of event, full path, and optional status. The types of events include opens (O), reads (R), writes (W), and closes (C). `fatrace(1)` can be used for workload characterization but can produce a large amount of output and consume significant CPU resources. Filtering to one type of event, such as opens, can help:

```bash
+ fatrace -f O
run (6383): O /bin/sleep
sleep (6383): O /etc/ld.so.cache
...
```

### 8.3 BPF Tools

BPF tools are useful for file system performance analysis and troubleshooting. These tools are from the BCC and bpftrace repositories. Table 8-2 lists the origins of the tools covered in this section.

| Tool         | Source  | Description                                       |
|--------------|---------|---------------------------------------------------|
| `opensnoop`  | BCC/BT  | Trace files opened                                |
| `statsnoop`  | BCC/BT  | Trace calls to `stat(2)` varieties                |
| `syncsnoop`  | BCC/BT  | Trace `sync(2)` and variety calls with timestamps  |
| `mmapfiles`  | Book    | Count `mmap(2)` files                             |
| `scread`     | Book    | Count `read(2)` files                             |
| ...          | ...     | ...                                               |

#### 8.3.1 `opensnoop`

`opensnoop(8)` traces file opens and is useful for discovering the location of data, log, and configuration files. It can also help identify performance issues caused by frequent opens. Example output:

```plaintext
TIME (s)   PID   COMM       FD ERR PATH
0.000000000 3862 java        5248 0 /proc/loadavg
0.000036000 3862 java        5248 0 /sys/fs/cgroup/cpu,cpuacct/.../cpu.cfs_quota_us
...
```

This output shows that a Java process is reading certain system metric files at a high rate, which can be further analyzed to determine if it is necessary.

#### 8.3.2 `statsnoop`

`statsnoop` traces calls to `stat(2)` and related functions, providing insights into file metadata operations. This tool is useful for understanding file access patterns and identifying potential bottlenecks in file system operations.