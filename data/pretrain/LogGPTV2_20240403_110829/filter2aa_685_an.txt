is no longer in this file’s 
namespace.
The moduleVersion 
variable can be 
accessed by explicitly 
writing the module 
namespace.
Imports moduleVersion into this file’s 
namespace. All other public definitions need 
to be accessed via the example namespace.
The moduleVersion variable 
can again be accessed 
without explicitly writing 
the module namespace.
The randomNumber variable 
must be qualified.
Licensed to   
107
Overview of the standard library
Certain definitions can be excluded using the except keyword.
import example except moduleVersion
echo(example.moduleVersion)
echo(moduleVersion)
echo(randomNumber)
In Nim, it’s idiomatic to import all modules so that all identifiers end up in the
importing module’s namespace, so you only need to explicitly specify the namespace
when the name is ambiguous. This is different from Python, which requires every
identifier that’s imported to be accessed via the module’s namespace unless the mod-
ule is imported using the from x import * syntax.
 Nim’s default import behavior allows flexible Uniform Function Call Syntax
(UFCS) and operator overloading. Another benefit is that you don’t need to con-
stantly retype the module names.
 You might not recall the discussion on UFCS in chapter 1. It allows any procedure
to be called on an object as if the function were a method of the object’s class. The fol-
lowing listing shows UFCS in action.
proc welcome(name: string) = echo("Hello ", name)
welcome("Malcolm")
"Malcolm".welcome()
You should now have a better understanding of Nim’s module system. Let’s go on to
look at Nim’s standard library in greater detail. 
4.2
Overview of the standard library
Nim’s standard library is split up into three major categories: pure, impure, and wrap-
pers. This section will look at these categories in general. Later sections in this chapter
explore a few specific modules from a couple of these categories.
4.2.1
Pure modules
A large proportion of Nim’s standard library is composed of pure modules. These
modules are written completely in Nim and require no dependencies; you should pre-
fer them because of this.
 The pure modules themselves are further split up into multiple categories, includ-
ing the following:
 The core
 Collections and algorithms
Listing 4.9
Excluding some definitions when importing
Listing 4.10
Uniform Function Call Syntax
Accessing the moduleVersion variable 
via the module’s namespace still works.
Accessing the 
moduleVersion variable 
without qualifying the 
name doesn’t work.
Accessing the 
randomNumber 
variable without 
qualifying the 
name does work.
Both syntaxes are valid and 
perform the same action.
Licensed to   
108
CHAPTER 4
A tour through the standard library
 String handling
 Generic OS services
 Math libraries
 Internet protocols
 Parsers 
4.2.2
Impure modules
Impure modules consist of Nim code that uses external C libraries. For example, the
re module implements procedures and types for handling regular expressions. It’s an
impure library because it depends on PCRE, which is an external C library. This means
that if your application imports the re module, it won’t work unless the user installs
the PCRE library on their system.
4.2.3
Wrappers
Wrappers are the modules that allow these external C libraries to be used. They pro-
vide an interface to these libraries that, in most cases, matches the C interface exactly.
Impure modules build on top of wrappers to provide a more idiomatic interface.
 You can use wrappers directly, but doing so isn’t easy because you’ll need to use
some of Nim’s unsafe features, such as pointers and bit casts. This can lead to errors
because in most cases you’ll need to manage memory manually.
 Impure modules define abstractions to provide a memory-safe interface that you
can easily use in your source code without worrying about the low-level details of C. 
4.2.4
Online documentation
We’ll start looking at different modules in a moment, but I first want to mention that
the Nim website contains documentation for the full standard library. A list of all
the modules in the standard library can be found in the Nim documentation:
http://nim-lang.org/docs/lib.html. This URL always shows the documentation for
the latest release of Nim, and it contains links to documentation for each module.
Shared libraries
Impure modules such as re use what’s known as a shared library, typically a C library
that’s been compiled into a shared library file. On Windows, these files use the .dll
extension, on Linux the .so extension, and on Mac OS the .dylib extension.a
When you import an impure module, your application will need to be able to find these
shared libraries. They’ll need to be installed via your OS’s package manager or bun-
dled with your application. On Linux, it’s common to use a package manager; on Mac
OS, both methods are fairly common; and on Windows, bundling the dependencies
with your application is popular. 
a See Wikipedia’s “Dynamic linker” article: https://en.wikipedia.org/wiki/Dynamic_linker
#Implementations.
Licensed to   
109
Overview of the standard library
 The documentation for each module provides definitions and links to implemen-
tations of those definitions. It can, for example, link to a line of code where a proce-
dure is implemented, showing you exactly how it functions.
 Every part of Nim is open source, including its standard library, so you can look at
the source of the standard library to see Nim code written by the Nim developers
themselves. This allows you to truly understand the behavior of each part of the stan-
dard library, and you can even modify it to your liking.
 Figure 4.5 shows what the documentation for the os module looks like.
 The Nim documentation also includes a Nimble section,1 with links to community-
created modules. Nimble is a Nim package manager that makes the installation of
these packages easy. You’ll learn more about it in the next chapter.
 The list of Nimble packages is split into official and unofficial lists. The official
packages are ones that are officially supported by the core Nim developers, and as
such they’re far more stable than some of the unofficial packages. The official pack-
ages include modules that used to be part of the standard library but which have been
transferred out in order to make the standard library a bit more lean.
 We’ll now look at the pure modules in a bit more detail. We’ll start with the core
modules. 
1 List of Nimble packages: https://nim-lang.org/docs/lib.html#nimble.
Figure 4.5
The documentation for the os module
Licensed to   
110
CHAPTER 4
A tour through the standard library
4.3
The core modules
The most important module in the core of the standard library is the system module.
This is the only module that’s implicitly imported, so you don’t need to include
import system at the top of each of your own modules. This module is imported
automatically because it contains commonly used definitions.
 The system module includes definitions for all the primitive types, such as int and
string. Common procedures and operators are also defined in this module. Table 4.1
lists some examples.
Table 4.1
Some examples of definitions in the system module
Definitions
Purpose
Examples
+, -, *, /
Addition, subtraction, multiplica-
tion, division of two numbers.
doAssert(5 + 5 == 10)
doAssert(5 / 2 == 2.5)
==, !=, >, =,  2)
and, not, or
Bitwise and Boolean operations.
doAssert(true and true) 
doAssert(not false) 
doAssert(true or false)
add
Adds a value to a string or 
sequence.
var text = "hi"
text.add('!') 
doAssert(text == "hi!")
len
Returns the length of a string or 
sequence.
doAssert("hi".len == 2)
shl, shr
Bitwise shift left and shift right.
doAssert(0b0001 shl 1 == 0b0010)
&
Concatenation operator; joins two 
strings into one.
doAssert("Hi" & "!" == "Hi!")
quit
Terminates the application with a 
specified error code.
quit(QuitFailure)
$
Converts the specified value into a 
string. This is defined in the 
system module for some com-
mon types.
doAssert($5 == "5")
repr
Takes any value and returns its 
string representation. This differs 
from $ because it works on any 
type; a custom repr doesn’t need 
to be defined.
doAssert(5.repr == "5")
substr
Returns a slice of the specified 
string.
doAssert("Hello".substr(0, 1) == "He")
echo
Displays the specified values in 
the terminal.
echo(2, 3.14, true, "a string")
items
An iterator that loops through the 
items of a sequence or string.
for i in items([1, 2]): echo(i)
Licensed to   
111
Data structures and algorithms
In addition to the definitions in table 4.1, the system module also contains types that
map directly to C types. Remember that Nim compiles to C by default and that these
types are necessary to interface with C libraries. Interfacing with C is an advanced
topic; I’ll go into it in more detail in chapter 8.
 Whenever the --threads:on flag is specified when compiling, the system module
includes the threads and channels modules. This means that all the definitions
found in those modules are available through the system module. These modules
implement threads that provide a useful abstraction for concurrent execution. Con-
currency will be touched on in more detail in chapter 6.
 Other modules in the core category include threadpool and locks, both of which
implement different threading abstractions, and macros, which implements an API for
metaprogramming.
 The main module in the core that you’ll be interested in is the system module.
The others aren’t as important, and you’ll be using them only for specialized tasks like
concurrency.
 You should now have a basic idea of what some of the core modules implement,
particularly the procedures and types defined in the implicitly imported system mod-
ule. Next, let’s look at the modules that implement data structures and common algo-
rithms, and how they can be used. 
4.4
Data structures and algorithms
A large proportion of data structures are defined in the system module, including
ones you’ve already seen in chapter 2: seq, array, and set.
 Other data structures are implemented as separate modules in the standard
library. These modules are listed under the “Collections and algorithms” category in
the standard library documentation. They include the tables, sets, lists, queues,
intsets, and critbits modules.
 Many of those modules have niche use cases, so we won’t go into much detail
about them, but we will talk about the tables and sets modules. We’ll also look at
some modules that implement different algorithms to deal with these data structures.
doAssert, assert
Raises an exception if the value 
specified is false. (assert calls 
are removed when compiled with 
-d:release. doAssert calls 
are always present.)
doAssert(true)
Table 4.1
Some examples of definitions in the system module (continued)
Definitions
Purpose
Examples
Licensed to   
112
CHAPTER 4
A tour through the standard library
4.4.1
The tables module
Assume that you’re writing an application that stores the average life expectancy of dif-
ferent kinds of animals. After adding all the data, you may wish to look up the average
life expectancy of a specific animal. The data can be stored in many different data
structures to accommodate the lookup.
 One data structure that can be used to store the data is a sequence. The sequence
type seq[T] defines a list of elements of type T. It can be used to store a dynamic list of
elements of any type; dynamic refers to the fact that a sequence can grow to hold more
items at runtime.
 The following listing shows one way that the data describing the average life expec-
tancy of different animals could be stored.
var numbers = @[3, 8, 1, 10]
numbers.add(12)
var animals = @["Dog", "Raccoon", "Sloth", "Cat"]
animals.add("Red Panda")
In listing 4.11, the numbers variable holds the ages of each of the animals. The ani-
mals’ names are then stored in the animals sequence. Each age stored in the numbers
sequence has the same position as the animal it corresponds to in animals, but that’s
not intuitive and raises many issues. For example, it’s possible to add an animal’s aver-
age age expectancy to numbers without adding the corresponding animal’s name into
animals, and vice versa. A better approach is to use a data structure called a hash table.
 A hash table is a data structure that maps keys to values. It stores a collection of
(key, value) pairs, and the key appears only once in the collection. You can add,
remove, and modify these pairs as well as look up values based on a key. Hash tables
typically support keys of any type, and they’re typically more efficient than any other
lookup structure, which makes their use popular. Figure 4.6 shows how data about ani-
mals can be retrieved from a hash table by performing a lookup based on a key.
Listing 4.11
Defining a list of integers and strings
Defines a new variable of type 
seq[int] that holds some numbers
Adds the number 12 to 
the numbers sequence
Defines a new variable 
of type seq[string] that 
holds some animals
Adds the animal "Red 
Panda" to the 
animals sequence
hash("Dog")
animalAges["Dog"]
3
8
1
10
00
01
02
18
19
3
animalAges
hash table
Hash
procedure
Hash table
lookup
Result
Figure 4.6
Looking up the value of the key 
"Dog" in the animalsAges hash table
Licensed to   
113
Data structures and algorithms
The tables module implements a hash table, allowing you to write the following.
import tables
var animalAges = toTable[string, int](
{
"Dog": 3,
"Raccoon": 8,
"Sloth": 1,
"Cat": 10
})
animalAges["Red Panda"] = 12
Several different types of hash tables are defined in the tables module: the generic
version defined as Table[A, B]; the OrderedTable[A, B], which remembers the inser-
tion order; and the CountTable[A], which simply counts the number of each key. The
ordered and count tables are used far less often than the generic table because their
use cases are more specific.
 The Table[A, B] type is a generic type. In its definition, A refers to the type of the
hash table’s key, and B refers to the type of the hash table’s value. There are no restric-
tions on the types of the key or the value, as long as there’s a definition of a hash pro-
cedure for the type specified as the key. You won’t run into this limitation until you
attempt to use a custom type as a key, because a hash procedure is defined for most
types in the standard library.
import tables
type
Dog = object
name: string
var dogOwners = initTable[Dog, string]()
dogOwners[Dog(name: "Charlie")] = "John"
Compiling listing 4.13 will result in the following output:
file.nim(7, 10) template/generic instantiation from here
lib/pure/collections/tableimpl.nim(92, 21)
➥ template/generic instantiation from here
lib/pure/collections/tableimpl.nim(43, 12)
➥ Error: type mismatch: got (Dog)
Listing 4.12
Creating a hash table
Listing 4.13
Using a custom type as a key in a hash table
Hash tables are in the tables 
module, so it needs to be imported.
Creates a new Table[string, int] out of the 
mapping defined in listing 4.11. The key and 
value types need to be specified because the 
compiler can’t infer them in all cases.
Uses the {:} syntax to define a 
mapping from string to int
Adds "Red 
Panda" 
to the 
animalAges 
hash table
The type keyword begins a section 
of code where types can be defined.
Defines a new Dog 
object with a name 
field of type string
The initTable procedure can 
be used to initialize a new 
empty hash table.
Creates a new instance of the Dog object and uses that as the key. 
Sets the value of that key in the dogOwners hash table to "John".
This refers to 
dogOwners
[Dog(name: 
"Charlie")] = 
"John", where 
you’re trying to use 
the Dog as the key.
These errors are inside the standard library
because that’s where the call to hash(key) is made.
Licensed to   
114
CHAPTER 4
A tour through the standard library
but expected one of:
hashes.hash(x: T)
hashes.hash(x: pointer)
hashes.hash(x: T)
hashes.hash(x: float)
hashes.hash(x: set[A])
hashes.hash(x: T)
hashes.hash(x: string)
hashes.hash(x: int)
hashes.hash(aBuf: openarray[A], sPos: int, ePos: int)
hashes.hash(x: int64)
hashes.hash(x: char)
hashes.hash(sBuf: string, sPos: int, ePos: int)
hashes.hash(x: openarray[A])
The compiler rejects the code with the excuse that it can’t find the definition of a
hash procedure for the Dog type. Thankfully, it’s easy to define a hash procedure for
custom types.
import tables, hashes
type
Dog = object
name: string
proc hash(x: Dog): Hash =
result = x.name.hash
result = !$result
var dogOwners = initTable[Dog, string]()
dogOwners[Dog(name: "Charlie")] = "John"
The code in listing 4.14 shows in bold the additions that make the example compile.
The hashes module is necessary to aid in computing a hash in the hash procedure. It