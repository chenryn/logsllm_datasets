gation by modifying the original Android framework.
TaintART [44] extends the idea of TaintDroid on the
most recent Android Java virtual machine Android Run-
time (ART). VetDroid [55] reconstructs the malicious be-
havior of the malware based on permission usage, and
it is applicable to taint analysis. DroidTrace [56] uses
ptrace to monitor the dynamic loading code on both
Java and native code level. BareDroid [34] provides a
quick restore mechanism that makes the bare-metal anal-
ysis of Android applications feasible at scale. Although
these tools attempt to analyze the target on real-world
devices to improve transparency, the modiﬁcation to the
Android framework leaves some memory footprints or
code signatures, and the ptrace-based approaches can
be detected by simply check the /proc/self/status
ﬁle. Moreover, these systems are vulnerable to privileged
malware.
3.3 TrustZone-related Systems
TZ-RKP [13] runs in the secure domain and protects the
rich OS kernel by event-driven monitoring. Sprobes [51]
provides an instrumentation mechanism to introspect the
rich OS from the secure domain, and guarantees the ker-
nel code integrity. SeCReT [28] is a framework that en-
ables a secure communication channel between the nor-
mal domain and the secure domain, and provides a trust
execution environment. Brasser et al. [14] use TrustZone
to analyze and regulate guest devices in a restricted host
spaces via remote memory operation to avoid misusage
of sensors and peripherals. C-FLAT [1] ﬁghts against
control-ﬂow hijacking via runtime control-ﬂow veriﬁca-
tion in TrustZone. TrustShadow [25] shields the execu-
tion of an unmodiﬁed application from a compromised
operating system by building a lightweight runtime sys-
tem in the ARM TrustZone secure world. The runtime
system forwards the requests of system services to the
commodity operating systems in the normal world and
veriﬁes the returns. Unlike previous systems, NINJA
leverage TrustZone to transparently debug and analyze
the ARM applications and malware.
4 System Architecture
Figure 2 shows the architecture of NINJA. The NINJA
consists of a target executing platform and a remote de-
bugging client. In the target executing platform, Trust-
Figure 2: Architecture of NINJA.
Zone provides hardware-based isolation between the
normal and secure domains while the rich OS (e.g.,
Linux or Android) runs in the normal domain and NINJA
runs in the secure domain. We setup a customized excep-
tion handler in EL3 to handle asynchronous exceptions
(i.e., interrupts) of our interest. NINJA contains a Trace
Subsystem (TS) and a Debug Subsystem (DS). The TS is
designed to transparently trace the execution of a target
application, which does not need any human interaction
during the tracing. This feature is essential for automatic
large-scale analysis. In contrast, the DS relies on human
analysts. In the remote debugging platform, the analysts
send debug commands via a secure serial port and the DS
then response to the commands. During the execution of
an application, we use secure interrupts to switch into the
secure domain and then resume to the normal domain by
executing the exception return instruction eret.
4.1 Reliable Domain Switch
Normally, the smc instruction is used to trigger a domain
switch by signaling a Secure Monitor Call (SMC) excep-
tion which is handled in EL3. However, as the execution
of the smc instruction may be blocked by privileged mal-
ware, this software-based switch is not reliable.
Another solution is to trigger a secure interrupt which
is considered as an asynchronous exception in EL3.
ARM Generic Interrupt Controller (GIC) [5] partitions
all interrupts into secure group and non-secure group,
and each interrupt is conﬁgured to be either secure or
non-secure. Moreover, the GIC Security Extensions en-
sures that the normal domain cannot access the conﬁg-
uration of a secure interrupt. Regarding to NINJA, we
conﬁgure PMI to be a secure interrupt so that an over-
ﬂow of the PMU registers leads to a switch to the secure
domain. To increase the ﬂexibility, we also use simi-
lar technology mentioned in [43] to conﬁgure the Gen-
eral Purpose Input/Output (GPIO) buttons as the source
of secure Non-Maskable Interrupt (NMI) to trigger the
switch. The switch from secure domain to normal do-
main is achieved by executing the exception return in-
struction eret.
36    26th USENIX Security Symposium
USENIX Association
Secure Interrupt HandlerTrace SubsystemRemote Debug ClientNormal OSApplicationApplicationSecure InterruptDebug SubsystemNormal DomainSecure DomainApplicationNinjaException ReturnSecure Serial PortATFTarget Executing PlatformRemote DebuggingPlatform4.2 The Trace Subsystem
5 Design and Implementation
The Trace Subsystem (TS) provides the analyst the abil-
ity to trace the execution of the target application in dif-
ferent granularities during automatic analysis including
instruction tracing, system call tracing, and Android API
tracing. We achieve the instruction and system call trac-
ing via hardware component ETM, and the Android API
tracing with help of PMU registers.
By default, we use the GPIO button as the trigger of
secure NMIs. Once the button is pressed, a secure NMI
request is signaled to the GIC, and GIC routes this NMI
to EL3. NINJA toggles the enable status of ETM after
receiving this interrupt and outputs the tracing result if
needed. Additionally, the PMU registers are involved
during the Android API trace. Note that the NMI of
GPIO buttons can be replaced by any system events that
trigger an interrupt (e.g., system calls, network events,
clock events, and etc.), and these events can be used to
indicate the start or end of the trace in different usage
scenarios.
Another advanced feature of ETM is that PMU events
can also be conﬁgured as an external input source.
In
light of this, we specify different granularities of the trac-
ing. For example, we trace all the system calls by con-
ﬁgure the ETM to use the signal of PMU event EXC SVC
as the external input.
4.3 The Debug Subsystem
In contrast to the TS, the Debug Subsystem (DS) is de-
signed for manual analysis. It establishes a secure chan-
nel between the target executing platform and the remote
debugging platform, and provides a user interface for hu-
man analysts to introspect the execution status of the tar-
get application.
To interrupt the execution of the target, we conﬁgure
the PMI to be secure and adjust the value of the PMU
counter registers to trigger an overﬂow at a desired point.
NINJA receives the secure interrupt after a PMU counter
overﬂows and pauses the execution of the target. A hu-
man analyst then issues debugging commands via the se-
cure serial port and introspects the current status of the
target following our GDB-like debugging protocol. To
ensure the PMI will be triggered again, the DS sets de-
sirable values to the PMU registers before exiting the se-
cure domain.
Moreover, similar to the TS, we specify the granu-
larity of the debugging by monitoring different PMU
events. For example, if we choose the event INST R-
ETIRED which occurs after an instruction is retired, the
execution of the target application is paused after each
instruction is executed. If the event EXC SVC is chosen,
the DS takes control of the system after each system call.
We implement NINJA on a 64-bit ARMv8 Juno r1 board.
There are two ARM Cortex-A57 cores and four ARM
Cortex-A53 cores on the board, and all of them include
the support for PMU, ETM, and TrustZone. Based on the
ATF and Linaro’s deliverables on Android 5.1.1 for Juno,
we build a customized ﬁrmware for the board. Note that
NINJA is compatible with commercial mobile devices
because it relies on existing deployed hardware features.
5.1 Bridge the Semantic Gap
As with the VMI-based [27] and TEE-based [54] sys-
tems, bridging the semantic gap is an essential step for
NINJA to conduct the analysis. In particular, we face two
layers of semantic gaps in our system.
5.1.1 Gap between Normal and Secure Domains
In the DS, NINJA uses PMI to trigger a trap to EL3. How-
ever, the PMU counts the instructions executed in the
CPU disregarding to the current running process. That
means the instruction which triggers the PMI may belong
to another application. Thus, we ﬁrst need to identify if
the current running process is the target. Since NINJA is
implemented in the secure domain, it cannot understand
the semantic information of the normal domain, and we
have to ﬁll the semantic gap to learn the current running
process in the OS.
In Linux, each process is represented by an instance
of thread info data structure, and the one for the
current running process could be obtained by SP &
∼(THREAD SIZE - 1) , where SP indicates the current
stack pointer and THREAD SIZE represents the size of
the stack. Next, we can fetch the task struct, which
maintains the process information (like pid, name, and
memory layout), from the thread info. Then, the tar-
get process can be identiﬁed by the pid or process name.
5.1.2 Gap in Android Java Virtual Machine
Android maintains a Java virtual machine to interpret
Java bytecode, and we need to ﬁgure out the current exe-
cuting Java method and bytecode during the Android API
tracing and bytecode stepping. DroidScope [52] ﬁlls the
semantic gaps in the Dalvik to understand the current sta-
tus of the VM. However, as a result of Android upgrades,
Dalvik is no longer available in recent Android versions,
and the approach in DroidScope is not applicable for us.
of
ART, we learn that
the bytecode interpreter uses
ExecuteGotoImpl or ExecuteSwitchImpl function
to execute the bytecode. The approaches we used to ﬁll
the semantic gap in these two functions are similar, and
By manually
source
analyzing
the
code
USENIX Association
26th USENIX Security Symposium    37
template implementations in ART, and our approach is
applicable to all of them.
5.2 Secure Interrupts
In GIC, each interrupt is assigned to Group 0 (secure in-
terrupts) or Group 1 (non-secure interrupts) by a group
of 32-bit GICD IGROUPR registers. Each bit in each
GICD IGROUPR register represents the group information
of a single interrupt, and value 0 indicates Group 0 while
value 1 means Group 1. For a given interrupt ID n,
the index of the corresponding GICD IGROUPR register
is given by n / 32, and the corresponding bit in the reg-
ister is n mod 32. Moreover, the GIC maintains a target
process list in GICD ITARGETSR registers for each inter-
rupt. By default, the ATF conﬁgures the secure interrupts
to be handled in Cortex-A57 core 0.
As mentioned in Section 4.1, NINJA uses secure PMI
and NMI to trigger a reliable switch. As the secure inter-
rupts are handled in Cortex-A57 core 0, we run the tar-
get application on the same core to reduce the overhead
of the communication between cores.
In Juno board,
the interrupt ID for PMI in Cortex-A57 core 0 is 34.
Thus, we clear the bit 2 of the register GICD IGROUPR1
(34 mod 32 = 2,34 / 32 = 1) to mark the interrupt 34 as
secure. Similarly, we conﬁgure the interrupt 195, which
is triggered by pressing a GPIO button, to be secure by
clearing the bit 3 of the register GICD IGROUPR6.
5.3 The Trace Subsystem
5.3.1
Instruction Tracing
NINJA uses ETM embedded in the CPU to trace the exe-
cuted instructions. Figure 4 shows the ETM and related
components in Juno board. The funnels shown in the
ﬁgure are used to ﬁlter the output of ETM, and each of
them is controlled by a group of CoreSight Trace Funnel
(CSTF) registers [9]. The ﬁltered result is then output
to Embedded Trace FIFO (ETF) which is controlled by
Trace Memory Controller (TMC) registers [10].
In our case, as we only need the trace result from the
core 0 in the Cortex-A57 cluster, we set the EnS0 bit in
CSTF Control Register of funnel 0 and funnel 2, and
clear other slave bits. To enable the ETF, we set the
TraceCaptEn bit of the TMC CTL register.
The ETM is controlled by a group of trace regis-
ters. As the target application is always executed in
non-secure EL0 or non-secure EL1, we make the ETM
only trace these states by setting all EXLEVEL S bits and
clearing all EXLEVEL NS bits of the TRCVICTLR register.
Then, NINJA sets the EN bit of TRCPRGCTLR register to
start the instruction trace. In regard to stop the trace, we
ﬁrst clear the EN bit of TRCPRGCTLR register to disable
Figure 3: Semantics in the Function ExecuteGotoImpl.
we use function ExecuteGotoImpl as an example to
explain our approach. In Android, the bytecode of a Java
method is organized as a 16-bit array, and ART passes
the bytecode array to the function ExecuteGotoImpl
together with the current execution status such as the
current thread, caller and callee methods, and the call
frame stack that stores the call stack and parameters.
Then,
the function ExecuteGotoImpl interprets the
bytecode in the array following the control ﬂows, and a
local variable dex pc indicates the index of the current
interpreting bytecode in the array. By manual checking
the decompiled result of the function, we ﬁnd that the
pointer to the bytecode array is stored in register X27
while variable dex pc is kept by register X21, and the
call frame stack is maintained in register X19. Figure 3
shows the semantics in the function ExecuteGotoImpl.
By combining registers X21 and X27, we can locate the
current executing bytecode. Moreover, a single frame
in the call frame stack is represented by an instance of
StackFrame with the variable link pointing to the
previous frame. The variable method indicates the
current executing Java method, which is represented
by an instance of ArtMethod. Next, we fetch the
declaring class of the Java method following the pointer
declaring class . The pointer dex cache in the
declaring class points to an instance of DexCache which
is used to maintain a cache for the DEX ﬁle, and the
variable dex file in the DexCache ﬁnally points to
the instance of DexFile, which contains all information
of a DEX ﬁle. Detail description like the name of the
method can be fetched via the index of the method (i.e.,
dex method index ) in the method array maintained
by the DexFile. Note that both ExecuteGotoImpl
and ExecuteSwitchImpl functions have four different
38    26th USENIX Security Symposium
USENIX Association
...link_method_vregs_......link_method_vregs_......link_method_vregs_......declaring_class_dex_method_index_......dex_cache_dex_type_idx_......dex_ﬁle_......type 0type 1...type n...method 0method 1...method n...code 0code 1...code n...StackFrameStackFrameStackFrameDexCacheDexFileClassArtMethodX19: stack frameX21: dex_pcX27: bytecodeconst/4 v0, 0const/4 v1, 1add-int, v0, v0, v1return v0CodeItemand ART jumps to these functions by a branch instruction
bl. Since a PMU event BR RETIRED is ﬁred after exe-
cution of a branch instruction, we use PMU to trace the
BR RETIRED event and reconstruct the semantic informa-
tion following the approach described in Section 5.1.2 if
these functions are invoked.
There exist six PMU counters for each processor on
Juno board, and we randomly select the last one to be
used for the Android API trace and the DS. Firstly, the
E bit of PMCR EL0 register is set to enable the PMU.
Then, both PMCNTENSET EL0 and PMINTENSET EL1 reg-