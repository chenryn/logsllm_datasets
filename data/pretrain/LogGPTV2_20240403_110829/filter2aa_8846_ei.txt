涉及用来检测常见软件缺陷(如缓冲区溢出)的自动化工具。在成熟的开发环境中，应用程序开
发人员能够使用静态分析工具，并在设计、开发和测试过程中使用它们。
3.动态测试 Dynamic Testing
动态测试是在运行环境中评估软件安全，对于部署别人写的应用程序的组织来说通常是唯
一选择。在这种情况下，测试人员经常不能访问底层的源代码。动态软件测试的一个常见的例
子是使用 Web 应用程序扫描工具来检测 Web 应用程序中跨站点脚本、SQL 注入或其他缺陷的存
在。对生产环境的动态测试应该小心谨慎，以避免服务意外中断。
动态测试也可以使用综合事务/合成交易（synthetic transactions）来验证系统的性能。
4.Fuzzing (模糊测试) Fuzz Testing（考点）
模糊测试是黑盒测试，有点像误用例测试，就是随意乱输入数据来测试软件的功能和性能。
是一项专门的动态测试技术，它向软件提供了许多不同类型的输入，来强调其局限性并发现先
前未被发现的缺陷。模糊测试软件向软件提供无效的输入，或者是随机生成，或者是特别制作
以触发特殊的软件漏洞。然后，模糊测试监控应用程序的性能，监视软件崩溃、缓冲区溢出或
其他不良和/或不可预知的结果。
有两种方法：
①变异（修改），Mutation (Dumb) Fuzzing。修改下实际运行的数据来测试。
—177—
②智能（生成），Generational (Intelligent) Fuzzing。这个难搞，要基于对程序所使
用数据类型的理解，开发新的数据模型并创建新的模糊输入。
模糊测试常用的工具软件是 zzuf！
5.软件测试和代码测试
一旦代码检查成功结束，软件测试就开始了。先从单元级别测试开始，最后做系统级别测
试。有时可能还有一个集成级别的测试。
B.6 误用例测试
在软件测试中有两个主要的测试战略：正面测试和负面测试
①正面测试/正向测试 Positive Testing，确定你的应用按预期工作，如果在测试中发现
一个错误，则测试失败。
②负面测试/负向测试 Nagative Testing，确保你的应用能够很好地处理无效输入或非预
期的用户行为。
用例是对于系统及其环境之间交互的抽象场景（程序员都懂）。一个用例定义了系统和环
境可能发生交互时共享的系统或对话的方式。一个场景描述了在特定个人之间的特定交互。用
例把同类系统和使用系统的行动方之间交互的示例性场景加以抽象。
误用例 misuse case，也有称为“滥用用例”，就是人为的做一个错误的行为，去测试软
件的应对能力。软件测试人员使用一个称为误用案例测试或滥用用例测试的过程来评估他们的
软件对这些己知风险的脆弱性。在误用用例测试中，测试人员首先列举己知的误用用例。然后
他们试图使用手动和/或自动攻击技术开发这些用例。
关于详细的测试分类，见第八域 C.3 章节。
B.7 测试覆盖率分析（度量标准）
结构化测试的水平可以使用设计好的度量标准来评估。一般来说使用在结构化测试中软件
结构完成评估的百分比来表示。这些度量标准一般称为“覆盖”，是针对测试选择准则测量其
完成度。结构化覆盖的完成数量应当与软件所面临的风险水平相对应。使用“覆盖”这一术语
通常意味着 1O0%覆盖。比如，如果一个测试程序已经实现“语句覆盖”，这意味着软件中 100%
的语句己经被至少执行了一次。题目中问 statement coverage，别理解错了，它应该翻译成
语句覆盖。
常见的结构化覆盖（structured coverage）：
①语句覆盖 statement coverage：这一准则要求每个程序语句至少执行一次测试，并为
此提供充足的测试用例；但是实现语句覆盖不能为软件产品的行为提供充足的信心。
②决策/判断(分支)覆盖 decision(branch) coverage：这一准则要求每个程序决策或分
支被执行，并为此提供充足的测试用例，以使每个可能的输出至少出现一次。对多数软件产品
来说，这被认为是最低水平的覆盖。但是仅仅是决策覆盖对于高完整性应用来说是不够的。
③条件覆盖 condition coverage：这一准则要求程序决策的每个条件所呈现的所有可能
的输出必须至少执行一次测试，并为此提供充足的测试用例。只有当必须评估多条件以达到决
策时，条件覆盖才与分支覆盖有所不同。
—178—
④多条件覆盖 multi-condition coverage：这一准则要求在一个程序决策的所有组合条
件执行测试，并为此提供充足的测试用例。
⑤循环覆盖 loop coverage：这一准则要求所有程序被循环执行，从 0,1,2 以至于多次重
复，覆盖启动，典型运行，和中止(边界)条件。
⑥路径覆盖 path coverage：这一准则要求每个可能的路径，基础路径等，从程序代码段
的入口到出口，至少执行一次测试，并为此提供充足的测试用例。由于在软件程序中存在大量
可能的路径，路径覆盖一般很难实现。一般根据被测软件的风险大小和关键程度，确定路径覆
盖的数量。
⑦数据流覆盖 data flow coverage：这一准则要求每个可能的数据流至少执行一次测试，
并为此提供充足的测试用例。目前有一些可用的数据流测试战略。
B.8 接口测试 （例如： API, UI, 物理）
接口测试（Interface Testing）是开发复杂软件系统的一个重要组成部分。被分别开发
的模块之间的数据传递使用定义良好的接口，以便团队可以独立工作；接口测试就是评估模块
接口的性能，以确保所有开发工作完成后模块会正常工作。有三种接口要进行测试：
①应用程序编程接口(API) Application Programming Interfaces
测试模块的数据交互。
②用户界面(UI) User Interfaces
包括图形用户界面(GUI)graphical user interfaces 和命令行接口(CLI)command-line
interfaces，要审查所有的用户界面是否能正常运作。考题会列出一个命令行的测试，答案一
般都是“接口测试”，别错选了 API 测试。
③物理接口 Physical Interfaces
其它的物理接口。
C.收集安全流程数据（例如： 管理和运营控制措施）
1.信息安全持续监控 Information security continuous monitoring（ISCM）（考点）
用于支持企业的信息安全风险决策；确保安全策略有效实施；保持对信息安全、脆弱性和
威胁的持续了解，为组织的风险管理决策提供支撑。做好监控需要预先定义好各项测量指标
Metrics，如漏洞的数量与严重程度、尝试非法访问的次数、风险容忍的阈值等等。
2.ISCM 开发过程
①制定 ISCM 战略；Define
②建立 ISCM 程序；establish
③实施 ISCM 程序；implement
④收集安全相关信息；（考题中有的没这步）
⑤分析收集到的信息并形成结果报告；analyze and report
⑥对这些结果作出响应；respond
⑦回顾并更新监控程序。Review and update（考题中有的把这步拆分成 2 步了）
3.度量标准/监控频率
—179—
根据 NIST SP 800-137，对于联邦信息系统和组织的信息安全持续监控(ISCM)，安全实践
者需要在确定度量系统的监控频率或安全控制的评估频率时，把下列准则考虑在内：
①安全控制的易变性：易变的安全控制应被更频繁地评估，无论评估目的在于确定安全控
制的有效性还是支持对度量指标的计算。
②系统分类/影响水平：一般来说，分类为高影响度系统的安全控制要比中、低影响度的
系统上被更频繁地监控。
③提供关键功能的安全控制或特走评估目标：提供关键功能的安全控制或特定评估目标
(比如日志管理服务器，防火墙)应当更频繁地被监控。另外，支持关键安全功能的个别评估目
标被认为是对系统很关键的(根据业务影响分析)。
④对于己经辨识的弱点的安全控制：一般认为，已经记录在安全评估报告(SARs)的现存风
险需要更频繁地监控以确保风险在可容忍范围内。
⑤组织风险容忍水平：对风险容忍水平低的组织(比如处理，存储，或传输大量专有和/
或个人身份识别信息的组织，有大量高等级系统的组织，面临特定持续性威胁的组织〕会比对
风险容忍水平高的组织(比如拥有大量中低等级的系统，基本不处理，存储或传输专有的/或个
人身份识别信息的组织)更频繁地监控安全态势。
⑥威胁信息：组织要考虑现有可信的威胁信息，包括己知的漏洞，攻击场景。
⑦薄弱点信息：在决定监控频率时，组织要考虑与信息技术产品相关的最新薄弱点信息。
比如，如果一个特定产品厂商每月提供软件补丁，组织就可以考虑至少每月一次执行漏洞扫描。
⑧风险评估结果：检查组织的、或系统的风险评估结果，并在决定监控频率时考虑这些结
果的影响。如果在组织内部有风险打分系统，风险的分值可能被用来证明增加或减少对相关控
制的监控频率的合理性。
⑨报告要求：报告要求不会驱动 ISCM 战略，但是可能对监控频率产生影响。比如如果组
织策略要求每个季度报告非授权组件数量和采取的纠正性行动，组织将至少每季度监控系统以
发现非授权组件。
C.1 账户管理 （例如：升级、撤销）
在第五域的 G 章节也讲到身份信息的管理了，即身份信息和访问的开通、使用的生命周期
包括：帐户的创建、管理和删除等，这些过程都很重要的，不然会出问题。它和账户管理还是
有区别的。
1.身份信息管理
①提供/开通/指派 Provisioning：一个新用户账户的初始创建，称为注册或登记。
②审查/评审 Review：检查帐户以确保不活跃的账户被禁用以及员工没有过多的特权。
③撤销 Revocation：无论员工以何种原因离开公司，要及时禁用他们的用户账户。
2.账户管理
①增加账户。首先用户要悉知并接受系统使用政策，然后还有账号期限、口令强度等要求。
②修改账户。特权账号要严控，尽量少用、不用，别滥用。
③停用账户。人走茶凉。
—180—
C.2 管理评审 management reviews
管理评审是对管理进行评审，公司高管召开会议来研究管理机制是是否完全达到公司要
求、符合公司目标。
C.3 关键绩效与风险指标
这是两个最重要的信息安全度量标准，即 KPIs（key performance indicators）和 KRIs
（key risk Indicators)，关键性能指标和关键风险指标。ISO 27004 给出了衡量安全管控效
能的标准。
KPI 是评估所有关键业务功能是否有效运行的指标，即系统运维关注的运行质量状况；
KRI 是展现某些特殊操作是否带来安全风险的指标，即安全监察关注的所有风险变化。
C.4 验证备份数据
数据必须有效备份，并能按需恢复。用户数据、数据库、邮件等要用不同级别的备份策略。
C.5 培训与意识
培训是提高技能，意识是提高警惕。社会工程通过搞定人的因素而轻易得到相关信息或资
产，典型的社会工程应用方式就是钓鱼（phishing），其中精确指向的钓鱼(spear phishing)
专门针对高官、高管人群，也称为捕鲸（whaling）。此外，借口套话（pretexting）方式常
用来骗取对方的账号信息。
C.6 灾难恢复与业务连续性
业务持续计划（BCP）以及灾难恢复计划（DRP）应定期评测并修订。
第一域 G 章节，第七域 M、N 章节都讲了 BCP，都要掌握。
D.分析与报告测试结果（例如：自动、手动）
写报告是最烦人的事，也是最需要综合素质的事，工作量很大，在熟悉技术方案、掌握测
试情况的基础上，必须按照管理层的需求，以商业运营的角度去客观、生动、浅易地描述安全
状况。技术报告不是对扫描结果的简单罗列，要从分析模型方法、分析测试结果、量化风险影
响、提出对策措施、核算成本收益等多个方面进行研究，最终给出精准可行的报告，为管理层
提供辅助决策支持。
E.开展或促进内部和第三方审计
美国联邦信息安全法案（FISMA Federal Information Security Management Act）要求
联邦机构每年至少对组织的信息安全体系进行一次自我审计和独立的第三方审计。信息安全专
家需要理解法律标准，虽然完全做到很难，但必须确保有恰当的范围和合理的目标用于相应的
安全级别，并实施合理的控制。
内部审计与外部审计各自有优缺点：内部审计的人员对公司情况更熟悉，协调公司内部资
源更顺畅，且对外暴露公司资产的风险较小，但也存在内部关系复杂，人为隐蔽、瞒报问题的
—181—
情况。外部审计往往有更多其它系统安全测试的经验，且由于不了解公司、不受利益制约，可
以更客观更彻底的随意查找并暴露问题，但耗时较长，外部审计的收费还很昂贵，且必须受监
管以避免内部信息泄露。
1.有关审计标准的陈述(SAS)70
历史上，许多组织常借鉴 Statement on Auditing Standards (SAS) 70 reports 审计准
则来有效管控外包服务，然而 SAS 70 关注财务报告内部控制(ICOFR)specifically on risks
related to internal control over financial reporting，并不关注系统可用性和安全。SAS
70 报告已在 2011 退休，取代财务报告内部控制(ICOFR)的是：服务组织控制报告 SOC（Service
Organization Control)报告。在过去，SAS 70 报告的目的是辅助做财务报表审计。现在三个
类型的 SOC 报告己经被定义以取代 SAS 70 报告并解决更广泛的特定用户需求一比如解决安全，
隐私，和可用性问题。另外，服务组织正在寻找更好的方式以提供对于它们控制环境的保障。
2.SOC 报告类型（Service Organization Control(SOC) reports）（必考）
服务组织控制报告/SOC 报告，通常覆盖过去 12 个月有关设计和控制有效性的活动，每年
都要持续报告以满足财务管理或安全治理要求。在有些场合，一个 SOC 报告也可能覆盖一个较
短的时间段，比如六个月，或特定时间点，一般用于新系统/服务的控制设计或者对于系统/