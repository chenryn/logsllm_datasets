### 软件缺陷检测与安全测试方法

#### 1. 自动化工具
自动化工具用于检测常见的软件缺陷，如缓冲区溢出。在成熟的开发环境中，应用程序开发人员可以在设计、开发和测试过程中使用静态分析工具。

#### 2. 动态测试
动态测试是在运行环境中评估软件的安全性，尤其适用于无法访问底层源代码的情况。例如，Web 应用程序扫描工具可以检测跨站点脚本（XSS）、SQL 注入等缺陷。进行生产环境的动态测试时需谨慎，以避免服务中断。此外，综合事务/合成交易可用于验证系统的性能。

#### 3. 模糊测试 (Fuzz Testing)
模糊测试是一种黑盒测试技术，通过向软件提供多种类型的输入来发现未被发现的缺陷。它包括两种方法：
- **变异模糊测试 (Mutation Fuzzing)**：修改实际运行的数据来进行测试。
- **智能模糊测试 (Generational Fuzzing)**：基于对程序数据类型的理解，开发新的数据模型并创建新的模糊输入。

常用的模糊测试工具之一是 `zzuf`。

#### 4. 软件测试和代码测试
代码检查完成后，开始进行软件测试，通常从单元测试到系统测试，有时还包括集成测试。

### 测试策略

#### A. 正面测试与负面测试
- **正面测试**：确保应用按预期工作，若发现错误则测试失败。
- **负面测试**：确保应用能够妥善处理无效输入或非预期用户行为。

#### B. 误用例测试
误用例测试（也称为滥用用例测试）通过人为制造错误行为来测试软件的应对能力。测试人员首先列举已知的误用用例，然后手动或自动地执行这些用例。

### 测试覆盖率分析

结构化测试的水平可以通过设计好的度量标准来评估，通常表示为“覆盖”百分比。常见的结构化覆盖包括：
- **语句覆盖**：每个语句至少执行一次。
- **决策/分支覆盖**：每个决策或分支被执行。
- **条件覆盖**：每个条件的所有可能输出至少执行一次。
- **多条件覆盖**：所有组合条件执行测试。
- **循环覆盖**：循环从0次到多次重复执行。
- **路径覆盖**：每个可能路径至少执行一次。
- **数据流覆盖**：每个可能的数据流至少执行一次。

### 接口测试

接口测试是复杂软件系统开发的重要组成部分，涉及以下几种接口：
- **应用程序编程接口 (API)**
- **用户界面 (UI)**：包括图形用户界面 (GUI) 和命令行接口 (CLI)。
- **物理接口**

### 安全流程数据收集

#### 信息安全持续监控 (ISCM)
ISCM 支持企业的信息安全风险决策，确保安全策略有效实施，并保持对信息安全、脆弱性和威胁的持续了解。监控过程包括：
- 制定 ISCM 战略
- 建立 ISCM 程序
- 实施 ISCM 程序
- 收集安全相关信息
- 分析信息并形成报告
- 对结果作出响应
- 回顾并更新监控程序

#### 监控频率考虑因素
- 安全控制的易变性
- 系统分类/影响水平
- 关键功能的安全控制
- 已识别的弱点
- 组织风险容忍水平
- 威胁信息
- 薄弱点信息
- 风险评估结果
- 报告要求

### 账户管理

账户管理包括身份信息管理和账户操作：
- **身份信息管理**：提供/开通、审查、撤销
- **账户操作**：增加、修改、停用账户

### 管理评审
管理评审是对公司管理机制是否达到要求和符合目标的评估。

### 关键绩效与风险指标
关键绩效指标 (KPIs) 和关键风险指标 (KRIs) 是两个重要的信息安全度量标准。KPI 评估业务功能的有效运行，KRI 展现特定操作带来的安全风险。

### 数据备份
数据必须有效备份并能按需恢复，不同级别的备份策略应用于用户数据、数据库和邮件等。

### 培训与意识
培训提高技能，意识提高警惕。社会工程攻击通过搞定人的因素获取信息或资产，如钓鱼 (phishing) 和借口套话 (pretexting)。

### 灾难恢复与业务连续性
业务持续计划 (BCP) 和灾难恢复计划 (DRP) 应定期评测并修订。

### 分析与报告测试结果
报告应客观、生动、浅易地描述安全状况，涵盖分析模型方法、测试结果、风险量化、对策措施和成本收益核算等多个方面。

### 内部和第三方审计
内部审计和外部审计各有优缺点。外部审计更客观但耗时且昂贵，内部审计熟悉公司情况但可能存在隐瞒问题的风险。

### 审计标准
- **SAS 70**：关注财务报告内部控制，已被 SOC 报告取代。
- **SOC 报告**：涵盖过去 12 个月的设计和控制有效性活动，满足财务管理或安全治理要求。