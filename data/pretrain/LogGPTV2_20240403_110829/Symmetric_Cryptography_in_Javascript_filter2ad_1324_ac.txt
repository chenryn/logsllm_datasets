### Introduction

This study evaluates the performance of various JavaScript AES (Advanced Encryption Standard) implementations across different web browsers, including Google Chrome, Microsoft Internet Explorer 8 beta, Apple Safari 4, and Mozilla Firefox 3.0 and 3.5 beta 5. The JavaScript Just-In-Time (JIT) compiler was enabled in Firefox 3.5, and both Safari 4 and Google Chrome also utilize JIT compilers. The measurements were conducted on a Lenovo Thinkpad T61 with an Intel Core 2 Duo processor (2.1 GHz) running 32-bit Windows Vista.

### Performance Metrics

Table III presents the code size and running times, along with the speed improvement over the fastest previously existing implementation for each browser. The speed improvements are attributed to the construction of large lookup tables in browser memory, which enable rapid computation of mixing functions.

#### Table III: Code Sizes and Speeds for Various JavaScript AES Implementations
| Implementation | Size (B) | Speed (kB/s) | Improvement |
|----------------|----------|--------------|-------------|
| Chrome         | 5687     | 585.2        | 12%         |
| IE 8b          | 9395     | 58.6         | 2.1         |
| Safari 4       | 14667    | 99.0         | 2.7         |
| Firefox 3.0    | 15916    | 125.9        | 5.2         |
| Firefox 3.5b5  | 6455     | 16.2         | 1.3         |
| Our code       | 6460     | 111.4        | 5.2         |
| Clipperz       | 264.8    | 12.3         | 4.8         |
| EKU           | 136.9    | 5.1          | 21.8        |
| BrowserSync    | 231.5    | 13.3         | 13.1        |
| Javascrypt     | 33.6     | 5.2          | 451.6       |
| Movable Type   | 110.7    | 365%         | 97.4        |
| Improvement    | 1062%    | 14%          | 347%        |
|                |          | 625%         |             |

The reduction in code size is due to precomputation, where the code to generate our lookup tables is approximately 60% smaller than the hard-coded S-boxes used in previous implementations.

### Effects of Precomputation

Precomputing both the S-box and the round transformation tables results in a worst-case precomputation time of fewer than 10 milliseconds each time the library is loaded. Hard-coded tables can speed up precomputation but at the cost of increased code size. In some browsers, precomputing the tables may be even faster than loading them from disk.

Table IV illustrates that precomputing all tables introduces minimal performance degradation while significantly reducing code size. Hardcoding both the S-box and the T-tables can reduce the load time by at most eight milliseconds, but this is not worth the increased code size.

#### Table IV: Code Sizes and Precomputation Times with Varying Levels of Hardcoding
| Hardcode | Size (B) | Precomputation Time (ms) |
|----------|----------|--------------------------|
| Nothing  | 5687     | 0.89                     |
| S-box only | 8788     | 0.78                     |
| Everything | 32799    | 7.85                     |

Our approach to precomputation provides the speed benefits of hardcoding AES tables without the associated code bloat.

### Effects of Loop Unrolling

Table V shows the performance gains from unrolling loops in the core encrypt function. The first implementation is our standard implementation with no unrolling. The second implementation unrolls short loops with 4 or fewer iterations. The third implementation unrolls the round transformation loop, which iterates 10 times per block for 128-bit keys, similar to the technique used by OpenSSL [14].

#### Table V: Code Sizes and Speeds with Varying Levels of Loop Unrolling
| Unroll  | Size (B)  | Chrome  | IE 8b  | Safari 4 | Firefox 3.0 | Firefox 3.5b5 |
|---------|-----------|---------|--------|----------|-------------|---------------|
| None    | 5687      | 1524    | 153    | 256      | 260         | 326           |
| Short   | 6485 (+14%)| 1596 (+5%)| 136 (−11%)| 248 (−3%)| 253 (−3%)   | 313 (−4%)     |
| Round   | 8814 (+55%)| 1836 (+20%)| 233 (+52%)| 223 (−13%)| 453 (+74%)  | 270 (−17%)    |

Unrolling short loops achieves no significant performance improvement, but unrolling the round function shows significant improvements in some browsers, albeit with increased code size. In newer JavaScript interpreters, the performance increase from loop unrolling is less pronounced, suggesting that this optimization will become less relevant as users adopt more modern interpreters.

We also experimented with loop unrolling in the CCM and OCB implementations, which wrap the core AES code. There was no significant improvement in CCM and OCB performance in Chrome. Firefox 3.5 showed improvements of approximately 5% and 12%, respectively, by unrolling short loops. This small performance increase came at the cost of a 12% increase in code size, leading us to use an OCB implementation with no unrolled loops in our library.

#### Table VI: Code Sizes and Speeds for OCB Implementation with and Without Loop Unrolling
| Unroll  | Size (B)  | Chrome  | IE 8b  | Safari 4 | Firefox 3.0 | Firefox 3.5b5 |
|---------|-----------|---------|--------|----------|-------------|---------------|
| None    | 3772      | 183     | 34.9   | 54.2     | 60.0        | 42            |
| Short   | 4221 (+12%)| 193 (+5%)| 34.7 (−0%)| 53.9 (−1%)| 59.8 (−0%)  | 47 (+12%)     |

### Comparison to Other Algorithms

To ensure that AES is a suitable choice for a JavaScript crypto library, we compared our optimized implementation to other algorithms. Table VII shows the results of these comparisons. We found that SHA-256 is slower across all browsers, motivating our decision to use AES-CMAC for integrity instead of HMAC-SHA-256.

We also compared JavaScript AES with a JavaScript implementation of Salsa20/12, one of the fastest eSTREAM ciphers. A native x86 implementation of Salsa20/12 is about five times faster than a native implementation of 128-bit AES. Surprisingly, when both algorithms are implemented in JavaScript, Salsa20/12 is comparable in speed to AES. This discrepancy is primarily due to JavaScript's lack of 128-bit SIMD instructions or 64-bit registers, and secondarily due to Salsa20/12's larger state spilling to memory.

#### Table VII: Performance of AES, SHA-256, and Salsa20/12
| Algorithm     | Chrome  | IE 8b  | Safari 4 | Firefox 3.0 | Firefox 3.5b5 |
|---------------|---------|--------|----------|-------------|---------------|
| AES           | 679.4   | 63.2   | 248.0    | 214.0       | 71.3          |
| AES unrolled  | 753.6   | 92.0   | 266.0    | 124.5       | 173.5         |
| SHA-256       | 131.9   | 38.6   | 50.9     | 161.8       | 289.4         |
| Salsa20/12    | 452.2   | 148.8  | 153.2    | 283.1       | 347.2         |

### Conclusion

We have described an optimized JavaScript implementation of symmetric cryptography, focusing on AES. Our primary contribution is an approach that differs from typical AES implementations, allowing us to reduce code size and increase speed. Instead of performing all cipher computations at runtime or including large lookup tables in the code, our implementation precomputes tables as soon as the first cipher object is created. This precomputation is fast enough to be beneficial for encrypting or decrypting messages of any length and is much smaller than hardcoding the tables.

We studied various optimization tradeoffs for AES and modes of operation (OCB and CCM), showing that certain standard optimizations are ineffective in the browser. Our data suggests that SHA-256 performs far worse than AES, making JavaScript integrity schemes based on AES a better choice than those based on HMAC-SHA-256. Similarly, ciphers like Salsa20/12, which consistently outperform AES in native code, do not show the same advantage in JavaScript. Our library, which is publicly available, is four times faster and 12% smaller than previous JavaScript AES implementations.

We also discussed the issue of generating cryptographic randomness in the browser and hope that future browsers will provide a clean solution, such as implementing Netscape’s `window.crypto.random`.

### References

[1] Marco and G. Cesare, “Clipperz online password manager,” 2007, http://www.clipperz.com.
[2] “Google Browser Sync,” 2008, http://www.google.com/tools/firefox/browsersync/.
[3] E. Styere, “JavaScript AES Example,” October 2006, http://people.eku.edu/styere/Encrypt/JS-AES.html.
[4] J. Walker, “JavaScrypt: Browser-Based Cryptography Tools,” December 2005, http://www.fourmilab.ch/javascrypt.
[5] “JavaScript implementation of AES in counter mode,” http://www.movable-type.co.uk/scripts/aes.html.
[6] M. labs, “The weave project,” 2007, https://wiki.mozilla.org/Labs/Weave/0.2.
[7] C. Jackson, A. Barth, and J. Mitchell, “Securing frame communication in browsers,” in Proc. of USENIX Security 2008, 2008.
[8] D. S. Chester Rebeiro and A. Devi, “Bitslice Implementation of AES,” in Lecture Notes in Computer Science, Springer Berlin, 2006, pp. 203–212.
[9] B. Yee, D. Sehr, G. Dardyk, B. Chen, R. Muth, T. Ormandy, S. Okasaka, N. Narula, and N. Fullagar, “Native client: a sandbox for portable, untrusted, x86 native code,” in Proceedings of IEEE Security and Privacy, 2009.
[10] NIST, “Special publication 800-38b, recommendation for block cipher modes of operation: The CMAC mode for authentication,” 2005.
[11] T. Korvetz and P. Rogaway, “The OCB authenticated-encryption algorithm,” Internet Draft draft-krovetz-ocb-00.txt, 2005.
[12] NIST, “Special publication 800-38c, recommendation for block cipher modes of operation: The CCM mode for authentication and confidentiality,” 2004.
[13] J. Daemen and V. Rijmen, “The Rijndael Block Cipher,” March 1999, http://csrc.nist.gov/archive/aes/rijndael/Rijndael-ammended.pdf.
[14] “OpenSSL: The Open Source toolkit for SSL/TLS,” http://www.openssl.org.
[15] M. Matsui and J. Nakajima, “On the power of bitslice implementation on Intel Core2 processor,” in Cryptographic Hardware and Embedded Systems, 2007.
[16] E. Kasper and P. Schwabe, “Faster and timing-attack resistant AES-GCM,” Cryptology ePrint Archive: Report 2009/129, 2009.
[17] R. Halprin and M. Naor, “Games for extracting randomness,” in Proceedings of SOUPS ’09, 2009.
[18] N. Ferguson and B. Schneier, Practical Cryptography. Wiley Publishing, Inc., 2003.
[19] D. Edwards, “A JavaScript compressor,” 2007, http://dean.edwards.name/packer.
[20] D. Bernstein, “Salsa20 specification,” eSTREAM Project algorithm description, http://www.ecrypt.eu.org/stream/salsa20pf.html.
[21] Emily Stark, Mike Hamburg, and Dan Boneh, “jsCrypto,” 2009, http://crypto.stanford.edu/sjcl.