threshold and blind issuance, and a multi-authority anonymous
credentials scheme. Coconut primitives do not require sequen-
tial aggregation, that is the aggregate operation does not have
to be performed by each signer in turn. Any independent party
can aggregate any threshold number of partial signatures into
a single aggregate credential, and verify its validity.
VIII. LIMITATIONS
Coconut has a number of limitations that are beyond the
scope of this work, and deferred to future work.
Adding and removing authorities implies to re-run the
key generation algorithm—this limitation is inherited from
the underlying Shamir’s secret sharing protocol [48] and
can be mitigated using techniques coming from proactive
secret sharing introduced by Herzberg et al. [29]. However,
credentials issued by authorities with different key sets are
distinguishable, and therefore frequent key rotation reduces the
privacy provided.
12
As any threshold system, Coconut is vulnerable if more
than the threshold number of authorities are malicious; collud-
ing authorities could create coins to steal all the coins in the
buffer of the coin tumbler application (Section V-A), create
fake identities or censor legitimate users of the electronic
petition application (Section V-B), and defeat the censorship
resistance of our proxy distribution application (Section V-C).
Note that users’ privacy is still guaranteed under colluding
authorities, or an eventual compromise of their keys.
Implementing the Coconut smart contract
library on
Ethereum is expensive (Table VI) as Ethereum does not
provide pre-compiled contracts for elliptic curve arithmetic in
G2; re-writing our cryptographic primitives by swapping all
the operations in G1 and G2 would dramatically reduce the
gas cost, at the cost of relying on the SXDH assumption [44].
IX. CONCLUSION
Existing selective credential disclosure schemes do not
provide the full set of desired properties, particularly when