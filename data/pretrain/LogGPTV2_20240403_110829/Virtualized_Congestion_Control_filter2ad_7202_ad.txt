nection end-point necessarily makes debugging more com-
plex when there are connection issues on a host. On the
other hand, normalizing all the congestion control algo-
rithms to the same reference algorithm, as enabled by vCC,
can greatly simplify in-network debugging: where there
were once many versions of different congestion control al-
gorithms, there is now a single version of a single algorithm.
Inside connections. When two guest VMs on the same hy-
pervisor communicate, they still go through the hypervisor,
and therefore through the same translation layer. As a result,
vCC is expected to work without changes.
6. RELATED WORK
AC/DC. AC/DC [47] has independently and concurrently in-
troduced a similar approach to ours. It shares many of the
main goals and ideas of this paper. AC/DC suggests that
datacenter administrators could take control of the TCP con-
gestion control of all the VMs. In particular, it demonstrates
this approach by implementing a vSwitch-based DCTCP
congestion control algorithm. AC/DC provides a thorough
evaluation, including a demonstration of the effectiveness of
AC/DC in solving the incast and fairness problems identiﬁed
in [7] and CPU overhead measurements.
We view our virtualized congestion control (vCC) solu-
tion as a general framework for translating between conges-
tion control algorithms. For example, our framework allows
the translation of only the legacy ﬂows, or the translation
of only the sender (or receiver) side. Our experiments show
that vCC allows virtually-translated legacy ﬂows to fairly co-
exist with modern non-virtualized ﬂows. On the conceptual
side, we survey additional translation techniques, such as
introspection and split-connection. In addition, we provide
emulation proofs for ECN and DCTCP in speciﬁc cases. Be-
yond vCC, we also introduce the general concept of algorith-
mic virtualization for legacy algorithms.
Congestion control algorithms. Many congestion control
algorithms and extensions have been suggested for datacen-
ters, including ECN, DCTCP, D2TCP, MPTCP, TCP-Bolt,
TIMELY, DX, Halfback and DCQCN [1–12]. A goal of this
paper is to enable the hypervisor to implement such novel
algorithms in the underlay physical network given legacy al-
gorithms in the guest VMs on the network.
Several papers have also suggested that the congestion
control algorithm could adapt to the datacenter network con-
ditions, e.g. by using Remy, Tao or PCC [13–15]. Our vCC
architecture is ideally situated to implement such an adapt-
able congestion control algorithm in the underlay network.
TCP rate control. The ACK pacing and TCP rate control
approaches attempt to regulate the sending rate of each TCP
ﬂow [22–26]. These papers present the techniques of buffer-
ing TCP packets and ACKs, as well as throttling the receive
window. Our vCC approach uses similar approaches. While
these papers typically attempt to reach a ﬁxed sending rate,
the goal of vCC is to translate between legacy congestion
control algorithms and any modern congestion control algo-
rithm.
Link-level retransmissions. In wireless communications,
the Snoop protocol [20, 30] can buffer data packets at the
base station, and then snoop on ACKs and retransmit lost
packets on behalf of the sender, making sure to block du-
plicate ACKs from reaching the sender.
This is similar
to a link-level retransmission protocol, and can help address
large loss rates at the last-mile link. Our vCC hypervisor can
similarly snoop on ACKs and prevent duplicate ACKs from
reaching the sender. However, it operates at the end-to-end
level, and not at the link level.
Split connection. The split-connection approach breaks a
TCP connection into several sub-connections, e.g., using a
TCP proxy [19, 20, 48]. In contrast, vCC need not break the
end-to-end principle; it can keep the original connection and
does not need to create ACKs for data not received by the
destination receiver.
Fairness between VMs. An alternative approach for
providing fairness between VMs is to use datacenter-
wide isolation-based techniques that are able to enforce
bandwidth guarantees while attempting to maintain work-
conserving link usage [49–53]. Also, a related approach
for the multitenant datacenter owner is to strictly divide the
bandwidth among the tenants, giving each a ﬁxed alloca-
tion [17]. Rate limiters and shapers in hypervisors and in
NIC hardware [41, 54] can also help enable better fairness
between local VMs.
7. CONCLUSION
Our goal was to make it easy to deploy new and improved
congestion control algorithms into multitenant datacenters,
without having to worry about TCP-friendliness with non-
participating virtual machines. This paper presents vCC,
which enables the datacenter owner to introduce a new con-
gestion control algorithm in the hypervisors. Internally, the
hypervisors translate between the new congestion control
algorithm and the old legacy congestion control, allowing
legacy applications to enjoy the beneﬁts of the new algo-
rithm. Using the example of ECN trafﬁc, we show how this
vCC solution can have an impact on fairness among tenants.
In the longer term, our goal is for the hypervisor transla-
tion layer to provide hooks that would simplify the coding
of new congestion control algorithms, similarly to the exist-
ing hooks in the current Linux TCP stack implementations.
These hooks would signiﬁcantly reduce the deployment time
of novel congestion control algorithms in large-scale data-
centers.
8. ACKNOWLEDGMENTS
We would like to thank the many people whom we con-
sulted for this paper, including Guido Appenzeller, David
Tennenhouse, Dahlia Malkhi, Mukesh Hira, Ben Basler, Jim
Stabile, Azeem Feroz, Boon Ang, Pushkar Putil, Naga Katta,
Subrahmanyam Manuguri, Steven Hand, Marco Canini, Gal
Mendelson, Asaf Samuel, as well as our shepherd, Vishal
Misra, and our anonymous reviewers.
This work was partly supported by the Platform Lab and
ONRC (Open Networking Research Center) at Stanford,
funding from Intel and AT&T, the Hasso Plattner Institute
Research School, the Gordon Fund for Systems Engineer-
ing, the Technion Fund for Security Research, the Israeli
Consortium for Network Programming (Neptune), and the
Israel Ministry of Science and Technology.
9. REFERENCES
[1] Mohammad Alizadeh, Albert Greenberg, David A
Maltz, Jitendra Padhye, Parveen Patel, Balaji
Prabhakar, Sudipta Sengupta, and Murari Sridharan.
Data Center TCP (DCTCP). ACM SIGCOMM, 2011.
[2] Mohammad Alizadeh, Adel Javanmard, and Balaji
Prabhakar. Analysis of DCTCP: stability,
convergence, and fairness. ACM SIGMETRICS, 2011.
[3] Costin Raiciu, Sebastien Barre, Christopher Pluntke,
Adam Greenhalgh, Damon Wischik, and Mark
Handley. Improving datacenter performance and
robustness with multipath TCP. ACM SIGCOMM,
2011.
[4] Balajee Vamanan, Jahangir Hasan, and
TN Vijaykumar. Deadline-aware Datacenter TCP
(D2TCP). ACM SIGCOMM, 2012.
[5] Haitao Wu, Jiabo Ju, Guohan Lu, Chuanxiong Guo,
Yongqiang Xiong, and Yongguang Zhang. Tuning
ECN for data center networks. ACM CoNEXT, 2012.
[6] Brent Stephens, Alan L Cox, Anubhav Singla, Jenny
Carter, Colin Dixon, and Wes Felter. Practical DCB
for improved data center networks. IEEE Infocom,
2014.
[7] Glenn Judd. Attaining the promise and avoiding the
pitfalls of TCP in the datacenter. USENIX NSDI, 2015.
[8] Radhika Mittal, Nandita Dukkipati, Emily Blem,
Hassan Wassel, Monia Ghobadi, Amin Vahdat,
Yaogong Wang, David Wetherall, David Zats, et al.
TIMELY: RTT-based congestion control for the
datacenter. ACM SIGCOMM, 2015.
[9] Changhyun Lee, Chunjong Park, Keon Jang, Sue
Moon, and Dongsu Han. Accurate latency-based
congestion feedback for datacenters. USENIX ATC,
2015.
[10] Qingxi Li, Mo Dong, and Brighten Godfrey. Halfback:
Running short ﬂows quickly and safely. ACM
CoNEXT, 2015.
Injong Rhee. Tackling bufferbloat in 3G/4G networks.
IMC, 2012.
[11] Yibo Zhu, Haggai Eran, Daniel Firestone, Chuanxiong
[27] Tal Garﬁnkel and Mendel Rosenblum. A virtual
machine introspection based architecture for intrusion
detection. NDSS, 2003.
[28] Bryan D Payne, Martim Carbone, Monirul Sharif, and
Wenke Lee. Lares: An architecture for secure active
monitoring using virtualization. IEEE Symposium on
Security and Privacy, 2008.
[29] VMsafe. https://www.vmware.com/company/news/
releases/vmsafe_vmworld.
[30] Hari Balakrishnan, Srinivasan Seshan, and Randy H
Katz. Improving reliable transport and handoff
performance in cellular wireless networks. Wireless
Networks, 1(4):469–481, 1995.
[31] RFC 5681. https://tools.ietf.org/html/rfc5681.
[32] Stefan Savage, Neal Cardwell, David Wetherall, and
Tom Anderson. TCP congestion control with a
misbehaving receiver. ACM SIGCOMM, 1999.
[33] RFC 6582. https://tools.ietf.org/html/rfc6582.
[34] Nikhil Handigol, Brandon Heller, Vimalkumar
Jeyakumar, Bob Lantz, and Nick McKeown.
Reproducible network experiments using
container-based emulation. ACM CoNEXT, 2012.
[35] Sally Floyd. TCP and explicit congestion notiﬁcation.
ACM SIGCOMM, 1994.
Guo, Marina Lipshteyn, Yehonatan Liron, Jitendra
Padhye, Shachar Raindel, Mohamad Haj Yahia, and
Ming Zhang. Congestion control for large-scale
RDMA deployments. ACM SIGCOMM, 2015.
[12] Prasanthi Sreekumari and Jae-il Jung. Transport
protocols for data center networks: a survey of issues,
solutions and challenges. Photonic Network
Communications, pages 1–17, 2015.
[13] Keith Winstein and Hari Balakrishnan. TCP ex
machina: Computer-generated congestion control.
ACM SIGCOMM, 2013.
[14] Anirudh Sivaraman, Keith Winstein, Pratiksha Thaker,
and Hari Balakrishnan. An experimental study of the
learnability of congestion control. ACM SIGCOMM,
2014.
[15] Mo Dong, Qingxi Li, Doron Zarchy, Brighten
Godfrey, and Michael Schapira. Rethinking
congestion control architecture: Performance-oriented
congestion control. ACM SIGCOMM, 2014.
[16] Mirja Kuhlewind, David P Wagner, Juan
Manuel Reyes Espinosa, and Bob Briscoe. Using Data
Center TCP (DCTCP) in the Internet. IEEE Globecom
Workshops, 2014.
[17] Eitan Zahavi, Alexander Shpiner, Ori Rottenstreich,
Avinoam Kolodny, and Isaac Keslassy. Links as a
Service (LaaS): Guaranteed tenant isolation in the
shared cloud. ACM/IEEE ANCS, 2016.
[18] Stefano Vissicchio, Olivier Tilmans, Laurent
Vanbever, and Jennifer Rexford. Central control over
distributed routing. ACM SIGCOMM, 2015.
[19] Michele Luglio, M Yahya Sanadidi, Mario Gerla, and
James Stepanek. On-board satellite split TCP proxy.
IEEE J. Select. Areas Commun., 22(2):362–370, 2004.
[20] Xiang Chen, Hongqiang Zhai, Jianfeng Wang, and
Yuguang Fang. A survey on improving TCP
performance over wireless networks. Resource
management in wireless networking, 2005.
[21] vCC project. http://webee.technion.ac.il/~isaac/vcc/.
[22] Lampros Kalampoukas, Anujan Varma, and
KK Ramakrishnan. Explicit window adaptation: A
method to enhance TCP performance. IEEE Infocom,
1998.
[23] Shrikrishna Karandikar, Shivkumar Kalyanaraman,
Prasad Bagal, and Bob Packer. TCP rate control. ACM
SIGCOMM, 2000.
[24] James Aweya, Michel Ouellette, and Delﬁn Montuno.
A self-regulating TCP acknowledgment (ACK) pacing
scheme. International Journal of Network
Management, 12(3):145–163, 2002.
[25] Huan-Yun Wei, Shih-Chiang Tsao, and Ying-Dar Lin.
Assessing and improving TCP rate shaping over edge
gateways. IEEE Trans. Comput., 53(3):259–275, 2004.
[26] Haiqing Jiang, Yaogong Wang, Kyunghan Lee, and
[36] Mirja Kühlewind, Sebastian Neuner, and Brian
Trammell. On the state of ECN and TCP options on
the Internet. International Conference on Passive and
Active Measurement, 2013.
[37] Yin Zhang and Lili Qiu. Understanding the end-to-end
performance impact of RED in a heterogeneous
environment. Technical report, Cornell, 2000.
[38] VMware vSphere DVFilter.
https://pubs.vmware.com/vsphere-60/index.jsp?topic=
%2Fcom.vmware.vsphere.networking.doc%
2FGUID-639ED633-A89A-470F-8056-5BB71E8C3F8F.
html.
[39] Alok Kumar, Sushant Jain, Uday Naik, Nikhil
Kasinadhuni, Enrique Cauich Zermeno, C. Stephen
Gunn, Jing Ai, Bjorn Carlin, Mihai
Amarandei-Stavila, Mathieu Robin, Aspi Siganporia,
Stephen Stuart, and Amin Vahdat. BwE: Flexible,
hierarchical bandwidth allocation for WAN distributed
computing. ACM SIGCOMM, 2015.
[40] Microsoft Hyper-V Extensible Switch.
https://msdn.microsoft.com/en-us/library/windows/
hardware/jj673961%28v=vs.85%29.aspx.
[41] Sivasankar Radhakrishnan, Yilong Geng, Vimalkumar
Jeyakumar, Abdul Kabbani, George Porter, and Amin
Vahdat. Senic: Scalable NIC for end-host rate
limiting. USENIX NSDI, 2014.
[42] Radhika Niranjan Mysore, George Porter, and Amin
Vahdat. FasTrak: enabling express lanes in
multi-tenant data centers. ACM CoNEXT, 2013.
[43] Jeffrey C Mogul, Jayaram Mudigonda, Jose Renato
Santos, and Yoshio Turner. The NIC is the hypervisor:
bare-metal guests in IaaS clouds. 2013.
[44] Sangjin Han, Keon Jang, Aurojit Panda, Shoumik
Palkar, Dongsu Han, and Sylvia Ratnasamy. SoftNIC:
A software NIC to augment hardware. Technical
Report UCB/EECS-2015-155, UC Berkeley, 2015.
[45] Stephen Kent and Karen Seo. Security Architecture
for the Internet Protocol. RFC 4301, RFC Editor,
December 2005.
[46] Andrea Bittau, Michael Hamburg, Mark Handley,
David Mazières, and Dan Boneh. The case for
ubiquitous transport-level encryption. USENIX
Security, 2010.
[47] Keqiang He, Eric Rozner, Agarwal Kanak, Yu Gu,
Wes Felter, John Carter, and Aditya Akella. AC/DC
TCP: Virtual congestion control enforcement for
datacenter networks. ACM SIGCOMM, 2016.
[48] F5 Networks. Optimize WAN and LAN application
performance with TCP Express. 2007.
[49] Hitesh Ballani, Paolo Costa, Thomas Karagiannis, and
Ant Rowstron. Towards predictable datacenter
networks. ACM SIGCOMM, 2011.
[50] Chuanxiong Guo, Guohan Lu, Helen J Wang, Shuang
Yang, Chao Kong, Peng Sun, Wenfei Wu, and
Yongguang Zhang. Secondnet: a data center network
virtualization architecture with bandwidth guarantees.
ACM CoNEXT, 2010.
[51] Alan Shieh, Srikanth Kandula, Albert G Greenberg,
Changhoon Kim, and Bikas Saha. Sharing the data
center network. USENIX NSDI, 2011.
[52] Vimalkumar Jeyakumar, Mohammad Alizadeh, David
Changhoon Kim, and Albert Greenberg. EyeQ:
Practical network performance isolation at the edge.
USENIX NSDI, 2013.
[53] Lucian Popa, Praveen Yalagandula, Sujata Banerjee,
Jeffrey C. Mogul, Yoshio Turner, and Jose Renato
Santos. Elasticswitch: Practical work-conserving
bandwidth guarantees for cloud computing. ACM
SIGCOMM, 2013.
[54] Gautam Kumar, Srikanth Kandula, Peter Bodik, and
Ishai Menache. Virtualizing trafﬁc shapers for
practical resource allocation. USENIX HotCloud,
2013.