                      throw new IllegalStateException("Invalid element qName:method");
                   } else {
                      if(qName.equalsIgnoreCase("void")) {
                         for(int attClass = 0; attClass 
                oracle.toplink.internal.sessions.UnitOfWorkChangeSet
                    -84
                    ...
                    ...
关于二次反序列的原理不再一一分析，大佬们早已经给出了非常详尽的解释，有兴趣可以去廖大神的博客（[http://xxlegend.com）学习一下，也可以选择读一下ysoserial的7u21](http://xxlegend.com%EF%BC%89%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%8B%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E9%80%89%E6%8B%A9%E8%AF%BB%E4%B8%80%E4%B8%8Bysoserial%E7%9A%847u21)模块代码就ok。
针对此次漏洞，官方给出的修复补丁处理比较简单，禁用class标签。
    private void validate(InputStream is) {
       WebLogicSAXParserFactory factory = new WebLogicSAXParserFactory();
       try {
          SAXParser parser = factory.newSAXParser();
          parser.parse(is, new DefaultHandler() {
             private int overallarraylength = 0;
             public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
                if (qName.equalsIgnoreCase("object")) {
                   throw new IllegalStateException("Invalid element qName:object");
                } else if (qName.equalsIgnoreCase("class")) {
                   throw new IllegalStateException("Invalid element qName:class");
                } else if (qName.equalsIgnoreCase("new")) {
                   throw new IllegalStateException("Invalid element qName:new");
                } else if (qName.equalsIgnoreCase("method")) {
                   throw new IllegalStateException("Invalid element qName:method");
                } else {
                   if (qName.equalsIgnoreCase("void")) {
                      for(int i = 0; i = WorkContextXmlInputAdapter.MAXARRAYLENGTH) {
                               throw new IllegalStateException("Exceed array length limitation");
                            }
                            this.overallarraylength += length;
                            if (this.overallarraylength >= WorkContextXmlInputAdapter.OVERALLMAXARRAYLENGTH) {
                               throw new IllegalStateException("Exceed over all array limitation.");
                            }
不过7u21模块有一点要提一下，7u21模块利用的最后会通过将TemplatesImpl对象的_bytecodes变量动态生成为对象，于是该类的static
block和构造函数便会自动执行，而这个类又是攻击者可以随便构造的，于是便造成了命令执行。
由于此次漏洞的payload是byte写的，而由于攻击利用类又是动态生成的，所以分析攻击者的代码是个比较麻烦的事情，所以下面给出如何将payload中攻击者代码还原出来的方法。
  1. 开启weblogic远程调试，并把断点打在ProcessBuilder类的start函数中（因为此时攻击类已经动态生成成功，但是没法直接在编译器里查看代码）
  2. 使用jps -l命令查看weblogic的pid
3、运行sudo java -cp $JAVA_HOME/lib/sa-jdi.jar sun.jvm.hotspot.HSDB命令查看对应PID的内存，
4、搜索内存中的动态生成类，并生成class文件，反编译一下，就可以看到攻击者写的自定义类了。
## CVE-2019-2725绕过
最近网上又流传了CVE-2019-2725绕过的poc，如下：
                        oracle.toplink.internal.sessions.UnitOfWorkChangeSet
                                ...
刚拿到poc的时候，看了一下思路，因为标签被禁了，所以通过
来绕过补丁。思路是比较清晰的，通过Class.forName(classname)来取到我们想要的类，从而绕过class标签被禁的问题。
但刚看到这个poc的时候，我第一个疑问就是，array居然可以使用method属性吗？所以立马去看了一下ArrayElementHandler类的内容，
只支持length标签，但是它是NewElementHandler的子类，那再去看看NewElementHandler
支持class标签，但是它是ElementHandler的子类，再去看一下ElementHandler
发现到最后也没找到它支持method属性。
马上去我自己的环境里面试一下，没法复现成功，一度以为这个poc是假的，但后来想了一下，我的环境里面只有1.7和1.8的jdk，会不会是jdk版本太高了，立马去1.6试一下，果然复现成功，看来1.6的XMLDecoder的代码和1.7\1.8不太一样。
去跟进一下jdk 1.6的XMLDecoder，根据原理去写一个简单一点的poc.xml，测试demo继续使用第一章的就行
            java.lang.ProcessBuilder
                    /bin/bash
                    -c
                    open /Applications/Calculator.app/
发现jdk1.6的XMLDecoder代码简单很多，根本没有那么多的ElementHandler，直接统一放在ObjectHandler的代码里面处理。
而对标签的处理，也可以说是非常的朴实无华了，看一下startElement，
    public void startElement(String var1, AttributeList var2) throws SAXException {
        ...
    ...
            String var8 = (String)var3.get("method");
            if (var8 == null && var6 == null) {
                var8 = "new";
            }
            var4.setMethodName(var8);
         ...
    ...
            } else if (var1 == "array") {
                var14 = (String)var3.get("class");
                Class var10 = var14 == null ? Object.class : this.classForName2(var14);
                var11 = (String)var3.get("length");
                if (var11 != null) {
                    var4.setTarget(Array.class);
                    var4.addArg(var10);
                    var4.addArg(new Integer(var11));
                }
我这里只截取关键部分代码，首先可以看到代码根本不管你的标签是什么，只要有methond属性，那就算作你的方法名，并且如果你的标签是array标签，而有没有class属性，自动给你补一个Class，完美契合需求，所以就可以直接通过Class.forName来取到我们需要的类了。
这样也就绕过了对class标签的过滤，不过只能在1.6的jdk利用。
## 思考与总结
根据近些年weblogic由于XMLDecoder导致的反序列漏洞的缝缝补补中，可以看到虽然绕过的poc层出不穷，但是利用的范围却越来越窄，从一开始的所有jdk通用，到7u21以下可以利用成功，再到最近的绕过已经只能在1.6利用成功，可以看到，保持jdk版本的高版本可以有效的防范java反序列化攻击。与此同时，对于基本用不到的weblogic组件，还是能删就删为好。
## 引用
[http://www.lmxspace.com/2019/06/05/Xmldecoder%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/](http://www.lmxspace.com/2019/06/05/Xmldecoder%25E5%25AD%25A6%25E4%25B9%25A0%25E4%25B9%258B%25E8%25B7%25AF/)
[http://xxlegend.com/2017/12/23/Weblogic%20XMLDecoder%20RCE%E5%88%86%E6%9E%90/](http://xxlegend.com/2017/12/23/Weblogic%2520XMLDecoder%2520RCE%25E5%2588%2586%25E6%259E%2590/)
[http://xxlegend.com/2019/04/30/CVE-2019-2725%E5%88%86%E6%9E%90/](http://xxlegend.com/2019/04/30/CVE-2019-2725%25E5%2588%2586%25E6%259E%2590/)