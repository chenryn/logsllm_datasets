i denote the value of ai at the j-th cycle for j = 1, ··· , t
a
and i = 0,··· , j. For each cycle, a new xk is appended into
(0)
the polynomial. After an inital coeﬃcient is set as a
0 = 1,
the coeﬃcients can be computed repeatedly in each cycle as
fS (x) = x
akxk+1
(mod p)
⎧⎪⎪⎪⎪⎪⎨
⎪⎪⎪⎪⎪⎩
(k−1)
(k)
k−1
a
= a
(k−1)
k
(k)
k−2 + a
k−1 = a
a
·· ·
···
(k−1)
a
= a
0
(k−1)
a
= a
0
+ a
· xk
(k)
1
(k)
0
(k−1)
k−1
(k−1)
1
· xk
· xk
(k ≥ 1)
(k ≥ 2)
(k ≥ 2)
(k ≥ 1)
.
(t)
After t cycles running, the value a
t are outputted
as a0,··· , at. It is obvious that the output of ZerosAppr is
GS = GfS (γ). In face, although γ is unknown, we make use
of (G1,··· , Gm) and t < m to compute GS as following
(t)
0 ,··· , a
GS = GfS (γ)
= Gγ·(cid:2)
k=1 ak−1·γk
t+1
ei
(cid:3)
∈S (γ+xi)
(cid:4)t+1
Gak−1
= G
(6)
Note that, when S = ∅ and t = 0, the output of this
algorithm is ZerosAggr(mpk,S) = G1. This value is used
to realize the broadcast for all users.
k=1
=
k
.
Algorithm ZerosAggr(mpk,S)
B[1] = 1;
for i = 1 to t do
B[i + 1] = B[i];
for j = i downto 2 do
B[j] = B[j − 1] + B[j] ∗ xi;
end for
B[1] = B[1] ∗ xi;
end for
sum = 1;
for k = 1 to t + 1 do
sum = sum ∗ pow(Gk, B[k]);
end for
Return sum;
Figure 3: The zeros-based aggregation function.
= e(G, H)
xks
γ+xk · e(G, H)
γs
γ+xk = e(G, H)s = Rs.
Based on this recursive process, we present a fast algo-
In this al-
rithm, call ZoresAggr, shown in Algorithm 3.
195gorithm, we design a double-loop structure for computing
the coeﬃcients (a0,··· , at) of the polynomial fS (x), where
B[1] = a0, ··· , B[t + 1] = at. And then, the ﬁnal result is
computed by accumulating all items Gak−1
= pow(Gk, B[k])
In this process, the function pow(·)
for k = 1,··· , t + 1.
is invoked to obtain the power of element in G1, that is,
pow(Gk, B[k]) = GB[k]
3.4.2 Implement of PolesAggr function
To implement fast pole-based aggregation, we ﬁrst extract
the information {(xi, Hi = H
Hi and Hj, it is easy to obtain the aggregation equation
γ+xi )}ei∈S from mpk. Given
ak−1
k = G
k
k
.


)(γ+xj
1
−xj = (H


1
−xj = H
xi
γ+xj /H
γ+xi )
(Hj/Hi)
where xi (cid:5)= xj is a prerequisite for this equation. The value
xi−xj
modulo p can be computed by using extended Eu-
clidean algorithm (called xGCD) in Z
(γ+xi
) ,
xi
1
∗
p.
Next, we expand this equation to multi-value cases. We
deﬁne a new notation Bi,j that denotes the aggregation of
all values (Hi,·· · , Hj), where 1 ≤ i < j ≤ t and Bi,j =
H
) . In terms of Equation (7), we can compute

(γ+xk
k=i
(cid:2)j
Bi,j+1 = (Bi,j /Bi+1,j+1)
1
xj+1−xi
= (H
(cid:2)j
k=i

(γ+xk
) /H

(cid:2)j+1
k=i+1
= (H

γ+xi /H

γ+xj+1 )
(γ+xk
·
(cid:2)j
1
xj+1−xi
1
xj+1−xi
) )
1
(γ+xk
)
k=i+1
(γ+xi

)(γ+xj+1 )
= H
·
(cid:2)j
1
(γ+xk
k=i+1
) = H
(cid:2)j+1
k=i

(γ+xk
) .
Finally, the output value HS = B1,t can be completed by
sequentially computing Bi,j for j ∈ [1, t − i] (where i varies
from 1 to t − 1) according to the following recursive process
= Hi ∀i ∈ [1, t],
Bi,j+1 = (Bi,j /Bi+1,j+1)
xj+1−xi ,
i ∈ [1, t − 1], j ∈ [1, t − i],
1
(7)
⎧⎪⎨
⎪⎩ Bi,i
where Bi,i is the initial input Hi for i = [1, t].
Algorithm PolesAggr(mpk, S)
for k = 1 to t do
B[k] = Hk
end for
for i = 1 to t − 1 do
for j = 1 to t − i do
if xj+i = xj then
Return 0.
end if
tmp1 = xj − xj+i;
tmp2 = invert(tmp 1, p);
tmp3 = B[j + 1]/B[j];
B[j] = pow(tmp3, tmp2);
end for
end for
Return B[1];
Figure 4: The poles-based aggregation function.
We provide the above recursive algorithm, called Pole-
sAggr, in Algorithm 4. This fast algorithm is derived from
Equation (7). During the aggregation process, the double
loops are used to compute the value of B[j] = Bj,j+i for
i = 1, ··· , t − 1 and j = 1,··· , t − i, repeatedly. In each
loop, the output value 0 denotes the error if there exist two
equivalent values xj+i and xj. This means that two iden-
tities are identical (or a hash collision occurred, but this
is unlikely to happen because two identities IDj+i and IDj
are equivalent with negligible probability according to the
property of cryptographic hash function). Next, two func-
tions, invert(·) and pow(·), are used to compute the inverse
element and the power of element, that is, tmp2 = 1/tmp1
(mod p) and B[j] = tmptmp2
4. SECURE ANALYSIS
4.1 Security Analysis for Our SBE Scheme
∈ G2.
3
We prove the semantic security of our system by relying on
the General Diﬃe-Hellman Exponent (GDHE) framework
in [3, 5]. We overview the GDHE framework in Appendix
A. We will not analyze All-mode because this mode can be
realized as a special case of Cut-mode, that is, S = ∅. We
start by deﬁning the following computational problem.
According to construction of two aggregation functions,
we assume f (x) and g(x) be two known random polynomials
of respective degree t and n− t with pairwise distinct roots,
(cid:8)
(cid:5)
(cid:5)
f (X) =
g(X) =
t
i=1(X + xi) =
n−t
(cid:3)
i=1 (X + x
i) =
(cid:20)
(cid:20)
i=0 ai · X i,
t
i=0 bi · X i.
n−t
Moreover, h(x, y, z) = f (x)g(x)yz be a three-variable poly-
nomial in a bilinear group system S = (p, G1, G2, GT , e(·,·)).
Based on these two polynomials, we provide a new com-
putational problem, called GDHE1 problem, which is used
to prove the semantic security of our SBE scheme for Select-
mode (u ∈ S). This problem is deﬁned as follows:
(cid:2)
Theorem 1
F1(γ, ς, ) =
(cid:4)
ˆG, ˆGγ,·· · , ˆGγt−1
((n, t)-GDHE1 Problem). Let γ, ς,  ∈ Z
∗
p
be three secret random variables, f (X) and g(X) are two
polynomials described above, and ˆG, ˆH be generators of S.
Given the values in (F1, F2, F3)-GDHE1 problem with
⎧⎪⎪⎨
⎪⎪⎩
2(γ)g(γ),
e( ˆG, ˆH)f
and T R←− GT , decide whether e( ˆG, ˆH)ς··f
2(γ)·g(γ) = T . For
any algorithm A that makes a total of at most q queries
to the oracles computing the group operation and the bi-
linear pairing, the advantage of A is AdvIND
GDHE1,A(n, t) ≤
(q+2s+2)2·d
(cid:5)
, ˆGγf (γ), ·· · , ˆGγm f (γ)
ˆH , ˆH γ,·· · , ˆH γn ,
ˆH f (γ)g(γ), ˆH ςf (γ)g(γ), ˆH ςf (γ)
F2(γ, ς, ) =
F3(γ, ς, ) =
, where s = n + t + m + 4 and d = 2n.
,
2p
(cid:3)
,
We provide the proof of this theorem in Appendix B. In
this proof, we reduce this problem to the weakest case G1 =
G2 = G, so that the polynomials (F1, F2, F3, T ) in bilinear
map group are converted to three polynomials (P, Q, h) in
bilinear map group. Then we prove that h is independent
of (P, Q) and complete the ﬁnal proof based on Theorem 4
in Appendix. In fact, we also show the security of this as-
sumption based on the following analysis: Considering that
ς only appears in ˆH ςf (γ) and ˆH ςf (γ)g(γ), we only pick them
out for three following cases:
(cid:20)
Case ˆH ςf (γ) : we need to ﬁnd ˆGf (γ)g(γ) to meet e( ˆGf (γ)g(γ),
i=0 bi· xi,
n−t
n−t (cid:5)= 0 because all x
i (cid:5)= 0. So
(cid:3)
(cid:3)
(cid:15)n−t
ˆH ςf (γ)) = T . Let g(x) =
where b0 = x
that, this polynomial f (x)g(x) is represented as
2 · ·· x
(cid:3)
(cid:15)n−t
n−t
i=1 (x + x
(cid:3)
i) =
(cid:5)
(cid:3)
1x
f (x)g(x) =
ai(xif (x)) = b0f (x)+
bi(xif (x)).
i=0
i=1
196But it is infeasible for computing ˆGf (γ)g(γ) = ( ˆGf (γ))b0·
( ˆGγif (γ))bi because there dose not exist the item ˆGf (x)
from all known items ˆGγf (γ),·· · , ˆGγm f (γ).
(cid:5)
Case ˆH ςf (γ)g(γ) : we need to ﬁnd ˆGf (γ) to meet e( ˆGf (γ),
ˆH ςf (γ)g(γ)) = T and it is also infeasible because f (x) =
i=0 ai · xi + xt is a
t−1
(cid:5)
polynomial of degree t and at = 1, such that ˆGf (γ) =
)ai · ˆGγt
cannot be built from all known
ˆG, ˆGγ,··· , ˆGγt−1
.
i=0 ai · xi =
t