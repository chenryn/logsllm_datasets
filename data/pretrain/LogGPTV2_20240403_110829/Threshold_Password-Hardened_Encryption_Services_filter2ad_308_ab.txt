0, 𝜏), sk′
1, . . . , sk′
𝑚) ← Rotate
(cid:42) S(“rot”, sk0),
R1(“rot”, sk1),
R𝑚(“rot”, sk𝑚)
. . . ,
(cid:43)
:
The rotation protocol is run between the server and all 𝑚 rate-
limiters. Each party inputs its secret key and outputs a rotated key.
The server additionally outputs an update token 𝜏.
𝐶′ ← Udt(𝜏, 𝑛, 𝐶):
The update algorithm inputs an update token 𝜏, a nonce 𝑛, and a
ciphertext 𝐶. It outputs a new ciphertext 𝐶′.
Correctness. Correctness is defined in the obvious way and the
formal definition is omitted. Roughly speaking, a (𝑡, 𝑚)-PHE is
correct whenever all honestly generated ciphertexts can be success-
fully decrypted to recover the encrypted message with the correct
password, at long as at least 𝑡 rate-limiters participate in the de-
cryption protocol. Moreover, if a ciphertext passes decryption with
respect to some secret keys, then the updated ciphertext also passes
decryption with respect to the rotated keys.
Remarks. Our model requires a trusted party to run the setup
algorithm. In a typical application of (𝑡, 𝑚)-PHE it is acceptable to
let the server run the setup algorithm, send the rate-limiter keys
to the respective rate-limiters, and securely delete those keys. This
is because it is for the server’s own benefit to employ a (𝑡, 𝑚)-
PHE scheme in the first place. Moreover, the rate-limiters do not
contribute any private inputs other than their secret keys in any
protocols. If we insist that the server cannot be trusted to run the
setup, a standard solution is to emulate the setup using a secure
multi-party computation (MPC) protocol.
In our syntax, we handle the nonces differently compared to the
approach in previous work [12]. We believe that the new approach
models the reality more closely and is more intuitive. Previously, the
encryption and decryption protocols take a “label” as common input
for both the server and the rate-limiter, where the label consists of a
server-side nonce and a rate-limiter-side nonce. This model deviates
from the reality where the nonce is generated during (instead of
before) the encryption protocol, stored by the server, and sent to the
rate-limiter during decryption. More confusingly, the label input to
the encryption protocol is by default an empty string, unless it is
called in the forward security experiment.
2.1 Security of (𝑡, 𝑚)-PHE
We define the hiding and soundness properties of (𝑡, 𝑚)-PHE. We
assume that each rate-limiter has an authenticated channel to the
server and that the rate limiters are not aware of each other, i.e., for
𝑖 ≠ 𝑗, there may not exist any communication channel between R𝑖
and R 𝑗. We focus on a semi-adaptive corruption model, where the
adversary must declare the set of corrupt parties for the next time
period, where a time period is the time between two honest key-
rotations. The possibility to corrupt parties during a time period
is modeled in the oracle RotateO, where the adversary can set
HonestRot to 1 and define a set 𝐼 for which he wishes to learn the
private-keys.
This corruption model is already stronger than that in previous
work [12, 13], where the adversary must declare the corrupt party at
the very beginning of the experiment, and cannot change its choice
throughout the experiment. For completeness, we also define a fully
adaptive variant, where the adversary can request to corrupt any
party at any time.
2.1.1 Hiding. Intuitively, hiding models the property that no party
should be able to do better than online brute force attacks against
the password space. As passwords have limited entropy, we limit
the adversary’s decryption queries using the counter DecCount
3
UdtO, ChO𝑏, DecChO}
(sk0, . . . , sk𝑚) ← Setup(1𝜆, 1𝑚, 1𝑡)
Π,A,𝑄Dec,PW(1𝜆, 1𝑚, 1𝑡 , 𝐼)
ensure |𝐼 ∩ [𝑚]| < 𝑡 ∨ 0 ∉ 𝐼
IsChallenged := 0, 𝜏 := 𝜖, DecCount := 0
Hid𝑏
1 :
2 :
3 : CorruptParties := 𝐼
4 :
5 : O := {EncO, DecO, CorrO , RotateO,
6 :
7 : 𝑏′ ← AO(1𝜆, {sk𝑖 }𝑖∈𝐼)
8 :
9 :
EncO(pw, 𝑀, 𝐼, {P𝑖}𝑖∈𝐼)
1 :
2 : S∗ := if 0 ∈ 𝐼 then PO
0 else := S(“enc”, sk0, pw, 𝑀)
3 : R∗
𝑖 else R𝑖 (“enc”, sk𝑖) ∀𝑖 ∈ [𝑚]
𝑖 := if 𝑖 ∈ 𝐼 then PO
((𝑛, 𝐶; view0), (∗; view1), . . . , (∗; view𝑚)) ← ⟨S∗, R∗
4 :
return (𝑛, 𝐶, view𝐼)
5 :
if DecCount ≥ 𝑄Dec then 𝑏′ ←$ {0, 1}
return 𝑏′
ensure 𝐼 ⊆ CorruptParties
1, . . . , R∗
𝑚⟩
1, . . . , R∗
𝑚⟩
0 else := S(“dec”, sk0, pw, 𝑛0, 𝐶)
𝑖 else R𝑖 (“dec”, sk𝑖, 𝑛) ∀𝑖 ∈ [𝑚]
DecO(pw, 𝑛0, 𝐶, 𝐼, {P𝑖}𝑖∈𝐼)
ensure 𝐼 ⊆ CorruptParties
1 :
2 : S∗ := if 0 ∈ 𝐼 then PO
3 : R∗
𝑖 := if 𝑖 ∈ 𝐼 then PO
((𝑀; view0), (𝑛1; view1), . . . , (𝑛𝑚; view𝑚)) ← ⟨S∗, R∗
4 :
5 : 𝑏0 := (0 ∈ 𝐼 ∨ 𝑛0 = 𝑛∗)
6 : 𝑏1 := (|𝐼 ∩ [𝑚]| + |{𝑖 : 𝑛𝑖 = 𝑛∗}| ≥ 𝑡)
7 :
8 :
if 𝑏0 ∧ 𝑏1 then DecCount := DecCount + 1
return (𝑀, view𝐼)
DecChO(𝐶, 𝐼, {P𝑖}𝑖∈𝐼)
1 :
2 : S∗ := S(“dec”, sk0, pw∗, 𝑛∗, 𝐶)
3 : R∗
4 :
5 :
𝑖 := if 𝑖 ∈ 𝐼 then PO
((∗; view0), . . . , (∗; view𝑚)) ← ⟨S∗, R∗
return view𝐼
ensure IsChallenged = 1 ∧ 𝐼 ⊆ CorruptParties \ {0}
𝑖 else R𝑖 (“dec”, sk𝑖, 𝑛) ∀𝑖 ∈ [𝑚]
1, . . . , R∗
𝑚⟩
1, . . . , R∗
𝑚⟩
if HonestRot = 1 then // Honest rotation then corruption
ensure |𝐼 ∩ [𝑚]| < 𝑡 ∨ 0 ∉ 𝐼
S∗ := S(“rot”, sk0)
R∗
𝑖 := R𝑖 (“rot”, sk𝑖) ∀𝑖 ∈ [𝑚]
((sk0, 𝜏), sk1, . . . , sk𝑚) ← ⟨S∗, R∗
CorruptParties := 𝐼
return {sk𝑖 }𝑖∈𝐼
else // Malicious rotation
RotateO(HonestRot, 𝐼, {P𝑖}𝑖∈𝐼)
1 :
2 :
3 :
4 :
5 :
6 :
7 :
8 :
9 :
10 :
11 :
12 :
13 :
14 :
15 :
⟨S∗, R∗
return view𝐼
1, . . . , R∗
𝑚⟩
endif
ensure 𝐼 ⊆ CorruptParties
S∗ := if 0 ∈ 𝐼 then PO
R∗
𝑖 := if 𝑖 ∈ 𝐼 then PO
((sk0, 𝜏; view0), (sk1; view1), . . . , (sk𝑚; view𝑚)) ←
0 else S(“rot”, sk0)
𝑖 else R𝑖 (“rot”, sk𝑖) ∀𝑖 ∈ [𝑚]
CorrO(𝑖) Only available in fully adaptive variant
1 : CorruptParties′ := CorruptParties ∪ {𝑖 }
2 :
3 : CorruptParties := CorruptParties′
4 :
ensure |CorruptParties′ ∩ [𝑚]| < 𝑡 ∨ 0 ∉ CorruptParties′
return sk𝑖
ensure 𝜏 ≠ 𝜖
return 𝐶′
0 , 𝑀∗
UdtO(𝑛, 𝐶)
1 :
2 : 𝐶′ ← Udt(𝜏, 𝑛, 𝐶)
3 :
ChO𝑏(𝑀∗
ensure IsChallenged = 0 ∧ 𝐼 ⊆ CorruptParties \ {0}
1 :
IsChallenged := 1, pw∗ ←$ PW
2 :
3 : S∗ := S(“enc”, sk0, pw∗, 𝑀∗
𝑏)
4 : R∗
5 :
6 :
𝑖 := if 𝑖 ∈ 𝐼 then PO
((𝑛∗, 𝐶∗), (∗; view1), . . . , (∗; view𝑚)) ← ⟨S∗, R∗
return (𝑛∗, 𝐶∗, view𝐼)
1 , 𝐼, {P𝑖}𝑖∈𝐼)
𝑖 else R𝑖 (“enc”, sk𝑖) ∀𝑖 ∈ [𝑚]
1, . . . , R∗
𝑚⟩
Figure 1: Hiding Experiment (Procedures in dashed boxes are provided for variant with fully adaptive corruption.)
which is bounded by 𝑄Dec. At any given time, the adversary may
either corrupt the server and up to 𝑡 −1 rate limiters, or an arbitrary
subset of rate-limiters but not the server. It can also instruct the
parties to execute an honest key-rotation, after which all parties
are considered honest, and the adversary can corrupt a possibly
different subset of parties again.
The Oracles. The (encryption, decryption, key rotation, and cipher-
text update) oracles are formally defined in Figure 1. The oracles
interface protocol executions by inputting a set of adversarial proce-
dures and running the respective protocols with the codes of some
honest parties replaced. The encrypt and decrypt oracles EncO and
4
DecO model normal interactions with adversarially choosen mes-
sages resp. ciphertexts. The decrypt challenge oracle DecChO, in
contrast, allows the adversary to observe interactions between an
honest server and potentially malicious rate-limiters with the cor-
rect challenge password. The oracle RotateO allows the adversary
to request key-rotation. The adversary can request for an honest
key-rotation, where the update token remains secret, while the set
of corrupted parties is reset depending on the choice of the adver-
sary. The adversary can also request for a malicious key-rotation,
where the code of some parties are possibly replaced by malicious
ones. The oracle UdtO allows updating any ciphertext with the
most recent update token 𝜏. In the fully adaptive variant, the ad-
versary gains access to an additional corrupt oracle CorrO from
which it can learn the current secret keys of parties of its choice.
Finally, the adversary can generate a challenge ciphertext using
ChO. Notice that the challenge may only be generated once3 and
the server code used to generate the challenge ciphertext is honest
(although the server key might be revealed via CorrO and RotateO).
Intuitively this is reasonable as a malicious server can store the mes-
sage and the password outside the protocol, and therefore security
for maliciously generated ciphertexts is unrealistic.
0
Hid
(cid:12)(cid:12)(cid:12) Pr(cid:104)
Pr(cid:104)
Definition 1 (Hiding). A (𝑡, 𝑚)-PHE Π is semi-adaptively
hiding if, for any PPT adversary A, any integer 𝑄Dec ≥ 0, and any
password space PW4 with support size of at least 𝑄Dec,
1
2
Π,A,𝑄Dec,PW(1𝜆, 1𝑚, 1𝑡) = 1(cid:105) −
Π,A,𝑄Dec,PW(1𝜆, 1𝑚, 1𝑡) = 1(cid:105)(cid:12)(cid:12)(cid:12) ≤ 𝑄Dec
|PW| + negl(𝜆) .
The (𝑡, 𝑚)-PHE Π is fully adaptively hiding if in Hid the adversary
A is given access to the CorrO oracle.
1
Hid
Soundness. Our definition of soundness is inspired by the
2.1.2
complete robustness definition [8] for encryption schemes, which
intuitively captures the property that a ciphertext cannot be encrypt-
ing two distinct messages. In [12], the soundness of PHE requires
that there is no inconsistency between an encryption session and a
decryption session, whereas the strong soundness notion further
requires that there is no inconsistency between two decryption
sessions. To unify both deception strategies, we define a sound-
ness experiment where the adversary is given an encryption and a
decryption oracle. The former takes as input all the inputs of the
server, including the randomness, during an encryption session,
and possibly malicious programs for all the rate-limiters. The oracle
then runs the encryption protocol between an honest execution
of the server code on the given input, and the possibly malicious
rate-limiters. The decryption oracle is defined in a similar way, ex-
cept that the decryption protocol is run. The adversary is successful
if an inconsistency occur between the communication transcripts
produced by any two oracle queries.
Definition 2 (Soundness). A (𝑡, 𝑚)-PHE Π is sound if,
for any PPT adversary A,
0
Soundness
Pr(cid:104)
Π,A(1𝜆, 1𝑚, 1𝑡) = 1(cid:105) ≤ negl(𝜆) .
3 CONSTRUCTION
Our construction of a (𝑡, 𝑚)-PHE scheme can be seen as a gen-
eralization of the PHE scheme of [12], where a secret key of one
rate-limiter is shared to multiple rate-limiters. In contrast to [12] it