cause the mobile clients have already passed Filter 3, the re-
peated queries here should all come from the DNS cache, ei-
ther of the DNS forwarder of the upstream resolver. Our goal
is to keep mobile clients which get the responses from DNS
forwarder cache, i.e., exclude mobile clients which obtain re-
sponses from recursive resolver cache. To this end, we take
the opportunity to measure how long it generally takes for a
Wi-Fi client to probe the cache of its upstream recursive re-
solver. Because learning the upstream resolver address needs
manual effort, we choose to perform the measurement using
30 controlled vantage points in China. The vantage points
are all connected to home routers through Wi-Fi (i.e., the
same environment as the large-scale measurement), which
span 11 Chinese provinces and 6 major Chinese ISP net-
works. We learn the upstream resolver addresses manually
from the router conﬁguration pages. On each vantage point,
we send cache-probing queries directly to the upstream re-
solver, and record the average time. Figure 8 shows the CDF
of upstream resolver cache probing time. We term the ratio
of clients which spend more than t ms to get a response from
the cache of the upstream resolver as P(t), which is the op-
posite of the CDF. For instance, from Figure 8, P(10) = 0.7,
P(11) = 0.6. Later, we will use this ground truth distribution
to extrapolate and estimate how many clients in the complete
dataset are hitting the forwarder cache.
For mobile clients that passes Filters 1-3, Figure 9 shows
their average time to retrieve a response from the DNS cache.
For instance, a total of 139 mobile clients spend 10ms to get
a response from DNS cache (either of the DNS forwarder
or the upstream resolver). Here we know P(10) = 0.7 in
Figure 8: CDF of DNS cache probing time of upstream re-
cursive resolver (30 vantage points).
Figure 9: Average DNS query time of a cached domain
the ground truth dataset which we assume will generalize
to the complete dataset. This means that 70% (97) of the
139 clients should require more than 10ms to hit upstream
resolver cache, so their responses can only come from the
DNS forwarder cache (i.e., are vulnerable). Similarly, for the
165 clients which spend 11ms to retrieve a cached response,
because P(11) = 0.6, we estimate that 60% (99) of the 165
clients are vulnerable. Finally, summing up the client num-
bers for each time value (i.e., the yellow bars in Figure 9)
together, we get an estimation of 1,346 vulnerable clients –
6.6% of the total clients measured in the wild). As expected,
when the DNS query time gets longer, it is less likely that the
responses come from DNS forwarder cache.
Summary. Overall, a signiﬁcant portion of the tested DNS
forwarders (6.6%) is estimated to be vulnerable to our new
defragmentation attack. Different from prior works [33, 48]
which have a different set of attack conditions (e.g., on the
conﬁguration of authoritative servers), our attack conditions
are focused more on the behaviors and conﬁgurations of
DNS forwarders (and also partly resolvers). Therefore, we
do not have constraints on which domains can be attacked.
Rather, our constraint is more on which client networks can
be attacked.
In addition, we estimate that the vulnerable
DNS forwarders in the wild will rise because our results indi-
cate that the major attack conditions unsatisﬁed are EDNS(0)
support (40.8%) and correctly handling oversized responses
(28.3%). As the new DNS features are getting promoted and
increasingly supported by vendors, more users will be af-
fected.
586    29th USENIX Security Symposium
USENIX Association
7 Reﬂection on DNS Forwarders
Our attack further demonstrates that DNS forwarders can be
a soft spot in the DNS infrastructure. From our tests in Sec-
tion 5 we have seen different variations of DNS forwarder
implementations. In this section, we further give a discus-
sion on the role of DNS forwarders in the ecosystem. We be-
gin with observations on current implementations, and then
discuss the speciﬁcations related to DNS forwarders.
7.1 DNS Forwarder Implementations
A general notion of DNS forwarders is that the devices do
not resolve queries themselves, but pass the queries to an-
other server. They rely on the integrity and logic checks of
the upstream recursive resolvers, and are often not in the po-
sition to verify the DNS responses. For instance, none of
the home routers that we test veriﬁes the CNAME chain in
the response. As a result, vulnerable DNS forwarders are
not able to distinguish the rogue responses, which are tam-
pered with after checked by the upstream resolvers. How-
ever, if a DNS forwarder performs response veriﬁcation itself
to void the attack (e.g., by “re-querying” or full DNSSEC
validation), it is acting in recursive mode, which could not
be wanted because of performance overhead.
In fact, from the DNS forwarder implementations that we
test in Section 5, we ﬁnd that the industry does not agree on
the role of DNS forwarders in the ecosystem. They can act
as transparent DNS proxies, or exhibit behaviors of recursive
resolvers. As listed in Table 2 and Table 3, software vendors
could disagree on whether their DNS forwarders should have
caching abilities, whether they should handle fragmented
DNS packets, and whether they should issue queries on their
own (e.g., to verify CNAME chains).
7.2 DNS Forwarder Speciﬁcations
After researching RFC documents related to DNS, we ﬁnd
that the diverse implementations of DNS forwarders can be
caused by the vague deﬁnitions in these speciﬁcations. In
the very original speciﬁcation of DNS (i.e., RFC 1034 [58]),
there is no discussion on DNS forwarding, and the ma-
jor components of DNS only include name servers and re-
solvers. As the ecosystem evolves, it now contains multiple
layers of servers, including forwarding devices. While DNS
forwarders are prevalent in current use, there is still a lack
of speciﬁc guidelines on their implementation details in the
standard documents.
History: two deﬁnitions of “forwarder”. In Table 4 we list
the RFC documents which refer to DNS forwarding. In fact,
we ﬁnd that the standard documents themselves disagree on
the deﬁnition of DNS forwarders, and have different names
for them. Put together, there have been two different descrip-
tions of DNS forwarding devices.
In early speciﬁcations, DNS forwarding devices appear to
serve as upstream servers of recursive resolvers. The de-
vices are leveraged to access authoritative servers, and typi-
cally have better Internet connection or bigger caching abil-
ities. The ﬁrst description of “DNS forwarding” appears in
RFC 2136 [70], which refers to an authoritative zone slave
forwarding UPDATE messages to their master servers. Later,
RFC 2308 [29] gives a deﬁnition of “DNS forwarder”, which
implies that forwarders are used to only query authorita-
tive servers.
It also says that DNS forwarders are bigger
machines which can share their cached data to downstream
servers. This term is again used in RFC 7626 [32] on DNS
privacy, which suggests that forwarders receive queries from
recursive resolvers.
On the other hand, another deﬁnition says that DNS for-
warders locate between clients and recursive resolvers. The
devices take queries from clients, and instead of resolving,
they pass the requests on to another server. Starting from
RFC 3597 [45], the document ﬁrst describes that forwarders
are used by the client. In RFC 7871 [35], “Forwarding Re-
solvers” use recursive resolvers to handle their queries. For
hosts behind broadband gateways, RFC 5625 [31] provide
guidelines on the implementations of their DNS proxy de-
vices, which are included as “simple DNS forwarders”.
It is not until the very recent speciﬁcation on DNS termi-
nology (i.e., RFC 8499 [41]) that the deﬁnition on DNS for-
warders is clariﬁed. According to their common use, DNS
forwarders “often stand between stub resolvers and recursive
resolvers”. It also deﬁnes DNS forwarding as the process
of “sending DNS queries with the RD bit set to 1 to another
server”.
Lacking implementation guidelines. While the term of
DNS forwarders has been updated, the speciﬁcations do not
discuss much about the implementation details. That is, the
answer to “what should a DNS forwarder do” is still vague,
such as how they should handle DNS responses, whether
they should have caches, or whether they can perform like
a full-service resolver (e.g., handle referrals and aliases).
The only document we ﬁnd related to DNS forwarder im-
plementation is RFC 5625 [31], which provides guidelines
to DNS proxies (i.e., a subset of DNS forwarders in one spe-
ciﬁc network). It recommends that DNS proxies should be
as transparent as possible, and that they should ensure DNS
packets are forwarded and returned verbatim to their destina-
tions. It is also recommended that DNS proxy devices should
be able to forward UDP packets up to 4,096 octets. As a re-
sult, a consequence is that a DNS proxy cannot distinguish a
spoofed response, if it is tampered with on its way back to the
forwarder. In particular, defragmentation attacks have made
the tampering task simple, since there is not much entropy
for and adversary to guess in the 2nd fragment.
USENIX Association
29th USENIX Security Symposium    587
When a zone slave forwards an UPDATE message upward toward the zone’s primary master server,
it must allocate a new ID and prepare to enter the role of “forwarding server”.
Forwarder is a nameserver used to resolve queries instead of directly using the authoritative
nameserver chain. The forwarder typically either has better access to the internet, or maintains
a bigger cache which may be shared amongst many resolvers.
... and in some cases also at caching name servers and forwarders used by the client.
(DNS) proxies are usually simple DNS forwarders, but typically do not have any caching capabilities.
The proxy serves as a convenient default DNS resolver for clients on the LAN,
but relies on an upstream resolver (e.g., at an ISP) to perform recursive DNS lookups.
DNS recursive resolvers sometimes forward requests to other recursive resolvers,
... these forwarders are like resolvers, except that they do not see all of the requests being made.
Forwarding Resolvers essentially appear to be Stub Resolvers to whatever Recursive Resolver is
ultimately handling the query, but they look like a Recursive Resolver to their client.
2308 [29]
(Mar 1998)
Negative Caching of
DNS Queries (DNS NCACHE)
3597 [45]
(Sept 2003)
Handling of Unknown DNS
Resource Record (RR) Types
5625 [31]
(Aug 2009)
DNS Proxy
Implementation Guidelines
DNS Privacy Considerations
Client Subnet in DNS Queries
7626 [32]
(Aug 2015)
7871 [35]
(May 2016)
8499 [41]
(Jan 2019)
Table 4: DNS forwarder descriptions in RFC documents
Title
Description
RFC No.
2136 [70]
(Apr 1997)
Dynamic Updates in the
Domain Name System
(DNS UPDATE)
DNS Terminology
In current use, however, forwarders often stand between stub resolvers and recursive servers.
8 Attack Model Extension and Mitigation
In this section, we extend our attack model to open DNS
forwarders. Further, we propose mitigation to the new de-
fragmentation attack.
8.1 Extending the Attack Model
In our extended model, we remove the requirement that the
attacker and the DNS forwarder have to be located in the
same LAN. For example, the attack can also be possible for
open DNS forwarders out on the Internet. [62] proposes a
method on how to detect such open forwarders. As we show
in Figure 10, a major difference here is that it is much harder
for the attacker to predict the IPID from the resolver to the
DNS forwarder, unless the resolver uses a globally incre-
menting IPID counter, in which case such open forwarders
will be obviously vulnerable. In the case of hash-based IPID
counter, the recursive resolver is likely going to have two
separate IPID counters for the forwarder and attacker (de-
pending on if there is a hash collision). Therefore, it is difﬁ-
cult for the attacker to predict the IPID value of the resolver’s
response packets sent to the forwarder.
However, prior defragmentation attacks have proposed
techniques such as meet-in-the-middle [42, 49], which can
still infer the current IPID counter despite that the attacker,
using its own IP address sending probes, would only observe
a different IPID counter (due to the attacker’s IP hashing into
a different counter). A recent technique also suggested that
an attacker who controls multiple IP addresses can proba-
bilistically force a hash collision, in which case the attacker
would still succeed. We believe such attacks are promising
and would affect many more users. Due to reasons such as
Figure 10: Defragmentation cache poisoning attack targeting
open DNS forwarders
ethics, we leave it as future work to validate such attacks in
practice.
8.2 Mitigation
Recall that in Section 4.4, we list several conditions of a vul-
nerable DNS forwarder implementation. Intuitively, break-
ing any of the conditions will void the attack. However, mea-
sures like removing DNS cache or EDNS(0) support are not
advised as they are compromising new and important func-
tionalities.
Response veriﬁcation. The ﬁrst solution is for the DNS for-
warder to verify the oversized DNS response. In detail, it
can re-query all names and aliases in the CNAME chain, or
perform full DNSSEC validation. For example, in our DNS
software test (see Table 3), we ﬁnd that BIND and other 3
kinds of software adopt the “re-query” approach. As a re-
sult, the rogue records should not pass veriﬁcation, and the
588    29th USENIX Security Symposium
USENIX Association
attack fails. However, this approach requires that the DNS
forwarder should be able to perform recursive queries, which
could not be wanted in certain use cases. Meanwhile, it
brings signiﬁcant performance overhead, which contradicts
with the purpose of DNS forwarders, and might not be feasi-
ble for devices with limited resources (e.g., home routers).
DNS caching by response. An ad hoc approach to void
the defragmentation attack is to change how forwarders
cache the responses. As discussed in Section 4.4, vulner-
able devices cache DNS responses by individual records.
By caching them as a whole, the rogue records in the last
part of the response (see Figure 5(b)) will not hit the cache.
The approach is practical, as it only requires changes on the
forwarder itself. From the disclosure responses (see Sec-
tion 5.4), the updated ﬁrmware of ASUS router adopts this
defence. We recommend this solution as a short-term coun-
termeasure. However, due to the uncertainty of the role
of forwarders, it is unclear what their expected behaviors
should be (as RFCs do not specify this), and whether caching
by responses will hurt performance.
0x20 encoding on DNS records. Similar to previous de-
fences of DNS cache poisoning, the essence of this mitiga-
tion is to increase randomness of the response (speciﬁcally,
the 2nd fragment). As the 2nd fragment lacks DNS and UDP
metadata, its entropy can be increased by encoding the DNS
records, using an upgraded version of 0x20 encoding [36].
While the original 0x20 encoding only mixes cases of query
names in the question section, here we need recursive re-
solvers to encode names and aliases in all records of the an-
swer section oversized response. To go along with this, the
DNS forwarder should also check the cases of each record
when receiving a DNS response. The downside of this mit-
igation is that it needs changes from upstream recursive re-
solvers, thus cannot be deployed shortly.
Randomizing IPID values. Random IPID values makes any
defragmentation-based attacks (including ours) much more
difﬁcult, as they require the prediction of future IPID val-
ues. Interestingly, as we have tested and described earlier
in Section 4.3, major operating systems such as Windows
and Linux do not exhibit such a random IPID behavior. Yet
in our measurement, we do ﬁnd Google and Versign’s re-
solvers appear to have such behaviors. We suspect that it
is either because they have used uncommon/customized op-
erating systems and network middleboxes (that rewrite the
IPIDs), or that there are actually still multiple hosts sitting
behind the same egress IP address (e.g., through NAT). In
any event, random IPID values are not impossible to guess,
especially given that the attacker can place 64 guessed values
(out of 64K possible values). Furthermore, if the attack is re-
peated multiple times, the likelihood of success will increase
as well. As a result, it is not a bullet-proof mitigation.
9 Other Related Work
Security risks of DNS forwarders. As mentioned earlier,
a DNS forwarder does not perform recursive DNS lookup
themselves, but simply forwards DNS requests to an up-
stream resolver.
In order to mitigate the security risks of
DNS cache poisoning and denial of service attacks, DNS for-
warders are widely implemented in network products related
with DNS protocol, such as home routers, as it not directly
exposed to Internet attackers [49]. It is also recommended
by some DNS experts, e.g., Kaminsky [24].
Unfortunately, many DNS forwarders themselves are not
patched and are vulnerable to DNS cache poisoning at-
tacks [49]. In some cases, DNS forwarders fail to validate
the DNS responses, such as the DNS transaction ID, source
IP address and the destination port number. A measure-
ment study shows that at least 8.6% open DNS resolvers
in the wild are vulnerable to the DNS cache poisoning at-
tacks [63]. Therefore, in spite of the availability of DNSSEC,
DNS record injection vulnerabilities are still fairly common
among DNS forwarders until now.
Compared to previous works, in this paper we further
present a type of cache poisoning attack targeting DNS for-
warders. The methods can circumvent traditional defences
against cache poisoning attacks. Combined with previous
attacks, our work further demonstrates that DNS forwarders
can be a soft spot in the infrastructure.
10 Conclusion
As the DNS infrastructure has evolved dramatically, today
it involves multiple layers of servers. DNS forwarders are
widely-deployed devices, however we show that they can be
a soft spot that is more vulnerable to cache poisoning attacks.
Using fragmented DNS packets and oversized response, an