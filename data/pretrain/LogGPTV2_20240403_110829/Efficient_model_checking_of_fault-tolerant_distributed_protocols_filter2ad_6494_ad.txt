QUORUM SEMANTICS RESULTS.
Baseline experiments
Our quorum results
}|
{
z
}|
{
z
No quorum (DPOR[13])1
States
No quorum (SPOR[9])
States
Time
>48h4
8s
41s
27s
6s
6,247,530
524
9222
9986
66
Time
23h
12s
2m22s
1m55s
9s
Quorum2 (SPOR[9])
States
Time
9h37m
2,822,764
279
652
2787
48
Regular storage (3,1)
Regular storage (3,2)
20,039
41,331
1Run by Basset (stateless search). 2DPOR not supported. 3Unreduced (stateful) search. 4Time-out after 48h. 5Counterexample found.
8h57m3
1h1m
185,711
72,937
Wrong regularity
33m49s
12m37s
Veriﬁed
CE5
2,358,3453
286,410
Regularity
Table II
TRANSITION REFINEMENT IN ACTION.
z
}|
Our transition reﬁnement results
10s
12s
31s
6s
3m4s
6m46s
{
Combined-split2,3
Time
States
548,061
3h30m
Protocol
Property
Result
Paxos (2,3,1)
Faulty Paxos (2,3,1)
Consensus
Consensus
Agreement
Agreement
Agreement
Echo Multicast (3,0,1,1)
Echo Multicast (2,1,0,1)
Echo Multicast (3,1,1,1)
Echo Multicast (2,1,2,1) Wrong agreement
Regular storage (3,1)
Regular storage (3,2)
Regularity
Wrong regularity
Veriﬁed
CE5
Veriﬁed
Veriﬁed
Veriﬁed
CE5
Veriﬁed
CE5
Quorum (SPOR[9])1
Time
9h37m
2,822,764
States
279
652
2787
10s
12s
31s
States
1,087,486
105
652
1165
Reply-split2,3
Time
3h47m
Quorum-split2,3
Time
States
11h28m
1,826,560
8s
12s
18s
279
232
2787
10s
12s
31s
105
232
1165
8s
12s
18s
12,023,663 >48h4
>10,472,557 >48h4
7,600,843
>48h4
7,087,193
42h21m
48
20,039
41,331
6s
3m4s
6m46s
48
18,451
6,969
7s
3m13s
1m32s
48
18,451
29,877
9s
4m31s
9m51s
48
18,451
6,987
9s
4m32s
2m34s
1Unsplit from Table I. 2All protocols are modeled with quorum transitions. 3Using the static POR algorithm from [9]. 4Time-out after 48h. 5Counterexample found.
priorities were set by hand. Other heuristics that require no
user intervention are proposed in [5], [24]. For example,
some heuristics are based on different characteristics of the
pending messages [24]. A comprehensive comparison of
how different heuristics perform for quorum transition-based
protocols is beyond the scope of this paper.
Evaluation results. We use Basset and MP-Basset to
run the experiments. All experiments ran on DETERlab
machines [42] with Xeon processors and 4 GB of memory.
The results are shown in Tables I-II. Our POR experiments
utilize the “opposite transaction heuristic” explained above.
The transaction heuristic resulted in very little reduction (not
shown). The depicted protocol settings were selected such
that they represent a meaningful instance of the protocol
(e.g., enough processes to tolerate faults) and are feasible
for model checking. Since the current version of MP-Basset
does not support the automation of transition reﬁnement,
the split models were created by hand. For each protocol
and setting, we highlight the best search strategy (if any)
with bold italic numbers. For example, the quorum model
of Paxos in Table I is the smallest and its model checking
takes the shortest time. We observe the following trends:
• Using quorum transitions can reduce both veriﬁcation
memory and time (up to 89% and 91% for regular
storage with SPOR) compared to the single-message
case. First,
the models with quorum transitions are
smaller. Second, although the throughput of model
checking quorum models is smaller (due to more com-
plex semantics), the overall veriﬁcation time is less
because of state space reduction.
• Transition reﬁnement can achieve additional reduction
in terms of both memory and time (up to 81% and 64%
for Paxos) compared to the unsplit case. Although the
throughput falls with quorum-split (because split quo-
rum transitions trigger a time-consuming optimization
of the SPOR algorithm), it can achieve signiﬁcant space
reduction, which adds up to an overall time reduction
(see combined-split of Paxos and multicast (3,1,1,1)).
• The proposed optimizations can also ﬁnd bugs fast
using little memory. If the bug is “deep” in the search
space, we observe similar trends as for veriﬁcation (see
regular storage results with wrong property).
Behind the numbers. The above results offer interesting
insights about the different search strategies. Firstly, the
beneﬁt of stateful over stateless search becomes signiﬁcant
with large state spaces. Otherwise, the stateless search can
be faster because (1) it has no overhead of state comparison
and (2) it revisits just a few states. In this case, the beneﬁt
of DPOR over SPOR can be exposed, e.g., for Faulty
Paxos (Table I). In addition, the beneﬁt of quorum models
decreases with the small quorum size of Echo Multicast
(2,1,0,1) (Table I).
If an optimization is ineffective in a particular fraction
of the state space, then the search strategy with the least
overhead achieves the best result, as can be seen for Echo
Multicast (2,1,2,1) in Table II. In other cases,
the split
10
strategies achieve no reduction in the entire state space. For
example, reply-split is ineffective if there is a single initiator
to which the receivers can reply (Echo Multicast (3,0,1,1)),
or quorum-split makes no difference if the quorum contains
all receivers (Echo Multicast (2,1,0,1)). Another example is
regular storage (3,1), where reply-split and quorum-split are
both ineffective. Note that the size of the reduced state space
is slightly different (smaller) compared to the unsplit case.
This is because split models deﬁne other (reﬁned) transitions
and the order in which these are executed can be different
(depending on the scheduler of the model checker).
Note that, in general, there is no guarantee that a bug
is found if POR does not preserve the property under
veriﬁcation. However, if the bug is contained also in the
reduced state space, then the POR search tends to ﬁnd
the bug quicker as it explores “different” paths [35]. For
example, we refer to the DPOR result of wrong regularity
in Table I for which the unreduced search times out (not
depicted).
VI. RELATED WORK
Our formal model of message-passing systems adapted
from [4] can be seen as an actor program [1]. Similarly,
the proposed MP language shares commonalities with ac-
tor languages such as ActorFoundry [19]. For example,
a concept similar to quorum transitions appears as joint
transitions of actors [14]. However, these are proposed to
make a speciﬁcation language expressive and not to mitigate
state space explosion. The actor model implements rich
semantics, e.g., synchronization between actors or dynamic
creation of actors. New transition reﬁnement strategies can
be devised for such richer semantics, if needed.
The protocol design and also veriﬁcation can be simpliﬁed
by making assumptions such as synchrony and fail-silent
faults [30], [11] (note that none of our example proto-
cols makes synchrony assumptions). The beneﬁt of quorum
transitions is possibly less signiﬁcant in such systems as
the possible interleavings of single-message transitions is
constrained by synchronized events.
is operation reﬁnement
Existing work on POR concentrates on the deﬁnition
and implementation of sound POR-conditions given the
transitions of the system [15], [31], [12]. A concept similar
to transition reﬁnement
in [15].
However, operation reﬁnement is speciﬁc for a proof-of-
concept modeling language, it is discussed informally, and
its effect on the performance of POR implementations is
not studied. In addition, no general applicable operation
reﬁnement is proposed nor its effect is evaluated in practical
veriﬁcation.
Promela, the input language of the SPIN model checker
[17], supports message-passing and can be used, as any
other general-purpose speciﬁcation language, to implement
the semantics of quorum transition (via atomic blocks).
We consider our contribution, regarding quorum transitions,
primarily on the modeling-side as substantiated by our MP-
Basset experiments. However, we could have as well used
other model checkers such as SPIN for these experiments.
SPIN’s POR algorithm is limited to exclusive reads and
writes of FIFO channels. MP-Basset (and Basset) implement
more general POR algorithms and can be extended with such
FIFO-speciﬁc independencies.
Automated veriﬁcation of speciﬁc message-passing fault-
tolerant protocols is often done via model checking, e.g.,
[29], [28]. Other approaches target general classes of pro-
tocols. For example, MODIST is a POR-optimized di-
rected testing tool for the analysis of unmodiﬁed distributed
message-passing protocols [35]. As MODIST explores the
state space of the real, unabstracted system, it is generally
non-exhaustive due to state space explosion. A related ap-
proach is the network abstraction layer from [2], which is
useful if the processes being model checked communicate
with other external processes. Crystalball is a tool to debug
and prevent failures through a combination of real execution
and model checking [33]. Other work utilizes symmetry
reduction for scalable model checking of message-passing
protocols [7]. These and similar techniques are orthogonal
to ours and can be used in combination.
VII. CONCLUSIONS AND FUTURE WORK
We have devised, implemented, and evaluated a frame-
work for efﬁcient model checking of message-passing dis-
tributed protocols using quorum transitions. The framework
consists of (a) using quorum transitions in protocol-level
abstractions and (b) a new technique called transition re-
ﬁnement to improve the performance of certain partial-order
reduction algorithms.
An open issue to pursue in our future work is whether
the presented reduction techniques show similar trends in
symbolic model checking. Such a comparison is especially
motivated by the fact that certain POR methods, e.g. [18],
are best suited for symbolic model checking.
Acknowledgement: We are deeply appreciative of Gul
Agha, Steven Lauterburg and Rajesh Karmani from UIUC
for making the sources of Basset available as well as for
their continuing support of Basset.
REFERENCES
[1] G. Agha, I. A. Mason, S. Smith, and C. Talcott, A foundation