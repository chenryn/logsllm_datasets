### 4.4.2 Independent Discovery

To assess the frequency of independent discovery, we utilized the Chromium release blog to manually code an additional variable. This variable, labeled "independent," represents the number of times a vulnerability was independently discovered. We derived this information from the text of the "credit" variable, which mentions "independent discovery" in cases where multiple parties independently identified the same vulnerability.

Our Chrome dataset provides details on whether a vulnerability was independently discovered by multiple parties, identifies these parties, and, in some instances, offers an upper bound on the time between the initial discovery and subsequent rediscoveries. Out of the 668 vulnerabilities in our Chrome VRP dataset, 15 (2.25%) were independently discovered at least twice, with two of these having three independent discoveries. This figure serves as a lower bound, as it only accounts for those discoveries known to the vendor.

**Figure 11: Independent Vulnerability Discoveries within the Chrome VRP Dataset**

- **X-axis:** Number of vulnerabilities discovered by an individual.
- **Y-axis:** Number of these vulnerabilities that were independently rediscovered by another contributor in our dataset.
- **Data Points:** Each dot represents an individual contributor.
- **Key Findings:** Among individuals who reported five or more vulnerabilities, the highest rediscovery rate is 25%, and the mean rediscovery rate is 4.6%.

![Independent Vulnerability Discoveries](https://example.com/figure11.png)

### Firefox Dataset

The Firefox dataset does not provide explicit information on independent rediscovery. However, through personal communication with a Firefox security engineer [56], we learned that there were at least 4 to 7 vulnerabilities reported through the VRP with two independent discoveries. This corresponds to a rediscovery rate of 2.7% to 4.7%, which is consistent with our findings in the Chrome dataset.

### Discussion

Independent rediscovery rates have implications for estimating the number of latent bugs in software [29] and understanding the expected decay rate of a stash of zero-day vulnerabilities. A zero-day vulnerability loses its value when the vendor becomes aware of it, often through independent discovery. Thus, a stash of zero-days will decay over time. Based on our limited data, we hypothesize:

**Hypothesis 7:** The decay rate of a stash of zero-day vulnerabilities is low enough to be inconsequential, given the relatively low empirical independent rediscovery rates.

We encourage future studies to confirm or refute this hypothesis using larger and more appropriate datasets.

## 5. Discussion and Recommendations

### 5.1 Mozilla Firefox vs. Google Chrome

Despite similar costs, the Chrome VRP has identified more than three times as many bugs, is more popular, and shows similar participation from both repeat and first-time participants. There is a significant difference in external participation levels between the two VRPs (Figure 2).

**Key Differences:**

1. **Tiered Structure with Large Special Rewards:**
   - **Mozilla's Program:** Fixed payout of $3,000.
   - **Chrome's Program:** Tiered structure with higher payouts (e.g., $10,000) for clever bugs and special cases, which appears to be more effective in encouraging participation.

2. **Time to Patch:**
   - **Firefox:** Higher variance in the time-to-release-patch metric for critical vulnerabilities.
   - **Chrome:** More consistent response times, which is crucial for responsible disclosure.

3. **Higher Profile:**
   - **Chrome:** Annual competitions like Pwnium, providing high rewards (up to $150,000), and extra reward top-ups for "interesting" bugs, leading to a higher profile and greater participation.

**Recommendations:**
- **Mozilla:** Implement a tiered reward system similar to Chrome's.
- **Reduce Variance in Patch Time:** Continue efforts to reduce the variance in patching critical vulnerabilities.
- **Increase PR Efforts:** Consider holding annual competitions or increasing public relations efforts around the VRP.

## 5.2 Recommendations for Vendors

### Key Observations and Recommendations

1. **Economic Efficiency:**
   - VRPs appear to be an economically efficient mechanism for finding vulnerabilities, with a reasonable cost/benefit trade-off. They are 2-100 times more cost-effective than hiring expert security researchers.

2. **Response Time:**
   - Timely response, especially for critical vulnerabilities, is crucial. High variance in time-to-patch can reduce participation and make responsible disclosure less attractive.

3. **Incentive Design:**
   - Chrome's tiered incentive structure is more effective at encouraging community participation compared to Firefox's fixed-amount structure.
   - Both programs have increased their rewards over time, which enhances publicity and entices participants.

4. **Privilege Separation:**
   - Privilege separation, as seen in Chrome, provides flexibility in managing rewards and can help cut costs while still increasing participation.

Vendors should consider these factors when designing or evolving their VRPs to maximize effectiveness and participation.

## 6. Related Work

### Previous Studies

- **Mein and Evans [35]:** Share our motivation and present Google’s experience with VRPs. Our focus is on comparing two popular VRPs run by competing browser vendors.
- **Rescorla [49]:** Analyzed NIST’s ICAT database and found no evidence that efforts to find vulnerabilities reduce vulnerability rates.
- **Ozment and Schechter [47]:** Used the OpenBSD CVS repository and found that the rate of foundational vulnerability discovery decreased over time.
- **Neuhaus and Plattner [42]:** Evaluated vulnerability fix rates and concluded that the supply of vulnerabilities is not declining.
- **Edmundson et al. [18]:** Found that different reviewers tend to find different vulnerabilities, supporting the effectiveness of crowdsourced VRPs.

## 7. Conclusion and Future Work

### Summary

- **VRP Characteristics:** Both the Chrome and Firefox VRPs appear to be economically efficient, comparing favorably to the cost of hiring full-time security researchers.
- **Engagement Strategy:** The Chrome VRP uses low expected payouts with high potential payouts, effectively engaging a broad community of vulnerability researchers.

### Future Work

- **Economic Modeling:** Further economic modeling of VRPs.
- **Pattern Identification:** Identifying typical patterns, trajectories, or phases in VRPs.
- **Failed VRPs:** Studying failed or unsuccessful VRPs to understand possible pitfalls.
- **Data Analysis:** Gathering and analyzing data from more VRPs to provide a more comprehensive view of their potential costs and benefits.

### Acknowledgments

We are grateful to Chris Evans, Dan Veditz, Chris Hofmann, Parisa Tabriz, Vern Paxson, Adrienne Felt, the anonymous reviewers, and our shepherd, Sam King, for their valuable feedback and support.

### References

[References listed here, formatted consistently and with hyperlinks if available]

---

This revised version aims to improve clarity, coherence, and professionalism, making the content more accessible and structured.