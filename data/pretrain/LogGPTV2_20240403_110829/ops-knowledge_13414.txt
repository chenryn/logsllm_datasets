Question: "Imagine you are a lead software architect in a tech company and you are tasked with starting a new project that requires high memory safety. You are considering using a memory-safe language for this project. Which of the following reasons would support your decision to use a memory-safe language, and which reasons might explain why a different team might choose not to use a memory-safe language?"
 "A": "A memory-safe language can eliminate all memory safety vulnerabilities, ensuring robust security for the application."
 "B": "A memory-safe language might be avoided due to the need to maintain and integrate with existing legacy code written in a memory-unsafe language."
 "C": "A memory-safe language may incur performance overhead due to runtime checks which can be a concern for performance-critical applications."
 "D": "A memory-safe language lacks the necessary features and libraries available in some memory-unsafe languages, which can be critical for certain applications."
Answer: ABC