rates, resulting in poor timekeeping performance and imposing excessive host load even when the virtual 
machine is idle. In most cases, the latest VMware‐supported version of a Linux distribution has the best 
timekeeping behavior. See VMware knowledge base article 1006427 (http://kb.vmware.com/kb/1006427) for 
specific recommendations, including workarounds for bugs and performance issues with specific distribution 
vendor kernels. The remainder of this section describes the overall development and characteristics of the 
Linux timekeeping implementation in more detail.
Linux kernel version 2.4 and earlier versions of 2.6 used tick counting exclusively, with PIT 0 usually used as 
the source of ticks. More recently, a series of changes amounting to a rewrite of the timekeeping subsystem 
were made to the kernel. The first major round of changes, which went into the 32‐bit kernel in version 2.6.18 
and the 64‐bit kernel in 2.6.21, added an abstraction layer called clocksource to the timekeeping subsystem. 
The kernel can select from several clock sources at boot time. Generally, each one uses a different hardware 
timer device with appropriate support code to implement the clocksource interface. Almost all the provided 
clock sources are tickless, including all the commonly used ones. The next major round of changes, completed 
in 32‐bit 2.6.21 and 64‐bit 2.6.24, add the clockevents abstraction to the kernel. These changes add the NO_HZ 
kernel configuration option, which, when enabled at kernel compile time, switches the kernel to using an 
aperiodic (one‐shot) interrupt for system timer callbacks, process accounting, and scheduling.
Versions of Linux prior to the introduction of NO_HZ require a periodic interrupt for scheduler time slicing and 
statistical process accounting. Most configurations use the local APIC timer on each CPU to generate scheduler 
interrupts for that CPU, but in some uniprocessor configurations, the scheduler is driven from the same 
interrupt used for timekeeping.
User applications on Linux can request additional timer interrupts using the /dev/rtc device. These 
interrupts come either from the CMOS periodic timer or the HPET. This feature is used by some multimedia 
software. It is also used by VMware hosted products running on a Linux host system, to handle cases in which 
one or more of the currently running virtual machines requires a higher virtual timer interrupt rate than the 
host’s default physical interrupt rate. See VMware Knowledge Base article 892 (http://kb.vmware.com/kb/892). 
The Linux implementation of this feature using the HPET can sometimes stop delivering interrupts because 
of the timeout‐setting race mentioned in “HPET” on page 6.
Copyright © 2008 VMware, Inc. All rights reserved.
11
Timekeeping in VMware Virtual Machines
Most Linux distributions are set up to initialize the system time from the battery‐backed CMOS TOD clock at 
startup and to write the system time back to the CMOS TOD clock at shutdown. In some cases, Linux kernels 
also write the system time to the CMOS TOD clock periodically (once every 11 minutes). You can manually 
read or set the CMOS TOD clock using the /sbin/hwclock program.
Kernels Before Clocksource
Linux kernels prior to the introduction of the clocksource abstraction count periodic timer interrupts as their 
basic method of timekeeping. Linux kernels generally use PIT 0 as their main source of timer interrupts. The 
interrupt rate used depends on the kernel version. Linux 2.4 and earlier kernels generally program the PIT 0 
timer to deliver interrupts at 100Hz. Some vendor patches to 2.4 kernels increase this rate. In particular, the 
initial release of Red Hat Linux 8 and some updates to Red Hat Linux 7 used 512Hz, but later updates reverted 
to the standard 100Hz rate. SUSE Linux Professional 9.0 uses 1000Hz when the desktop boot‐time option is 
provided to the kernel, and the SUSE installation program sets this option by default. Early Linux 2.6 kernels 
used a rate of 1000Hz. This rate was later made configurable at kernel compile time, with 100Hz, 250Hz, and 
1000Hz as standard choices and 250Hz as the default; however, some vendors (including Red Hat in the Red 
Hat Enterprise Linux 4 and Red Hat Enterprise Linux 5 series) continued to ship kernels configured for 
1000Hz. The latest versions in both the Red Hat Enterprise Linux 4 and Red Hat Enterprise Linux 5 series 
include a divider= boot‐time option that can reduce the interrupt rate—for example, divider=10 reduces 
the interrupt rate to 100Hz.
As mentioned above, most kernels also program the local APIC timer on each CPU to deliver periodic 
interrupts to drive the scheduler. These interrupts occur at approximately the same base rate as the PIT 0 timer. 
Thus, a one‐CPU virtual machine running an SMP Linux 2.4 kernel requires a total of 200 timer interrupts per 
second across all sources, while a two‐CPU virtual machine requires 300 interrupts per second. A one‐CPU 
Linux 2.6 kernel virtual machine that uses tick counting for timekeeping and the local APIC timer for 
scheduling requires a total of 2000 timer interrupts per second, while a two‐CPU virtual machine requires 3000 
interrupts per second.
32‐bit Linux kernel 2.4 and earlier versions interpolate the system time (as returned by the gettimeofday 
system call) between timer interrupts using an algorithm that is somewhat prone to errors. First, the kernel 
counts PIT timer interrupts to keep track of time to the nearest 10 milliseconds. When a timer interrupt is 
received, the kernel reads the PIT counter to measure and correct for the latency in handling the interrupt. The 
kernel also reads and records the TSC at this point. On each call to gettimeofday, the kernel reads the TSC 
again and adds the change since the last timer interrupt was processed to compute the current time. 
Implementations of this algorithm have had various problems that result in incorrect time readings being 
produced when certain race conditions occur. These problems are fairly rare on real hardware but are more 
frequent in a virtual machine. The algorithm is also sensitive to lost ticks (as described earlier), and these seem 
to occur more often in a virtual machine than on real hardware. As a result, if you run a program that loops 
calling gettimeofday repeatedly, you may occasionally see the value go backward. This occurs both on real 
hardware and in a virtual machine but is more frequent in a virtual machine.
Most 32‐bit versions of Linux kernel 2.6 that predate clocksource implement several different algorithms for 
interpolating the system time and let you choose among them with the clock= kernel command line option. 
Unfortunately, all the available options have some drawbacks.
Two of the algorithms incorporate code that attempts to detect lost ticks from nonprocessed timer interrupts 
automatically and add extra ticks to correct for the time loss. Unfortunately, these algorithms often overcorrect: 
they add extra, spurious ticks to the operating system clock when timer interrupt handling is delayed such 
that two interrupts are handled in close succession but neither is lost. Such bunching of interrupts occurs 
occasionally on real hardware, usually because a CPU is busy handling other tasks while interrupts are 
temporarily disabled. This problem occurs much more frequently in a virtual machine because of the virtual 
machine’s need to share the real CPU with other processes. Thus, this problem can cause the clock to run too 
fast both on real hardware and in a virtual machine, but the effect is much more noticeable in a virtual 
machine. The following paragraphs describe the time interpolation algorithms of 32‐bit Linux 2.6 kernels 
predating clocksource that are usable in a virtual machine:
Copyright © 2008 VMware, Inc. All rights reserved.
12
Timekeeping in VMware Virtual Machines
(cid:132)
(cid:132)
(cid:132)
The option clock=tsc selects an algorithm that makes use of the PIT counter and the TSC for time 
interpolation. This algorithm is similar to that of Linux kernel 2.4 but incorporates lost tick correction. As 
previously noted, the methods used to adjust time for lost ticks may overcorrect, making the clock run too 
fast. Time gains of 10 percent or more have been observed when running this algorithm in a virtual 
machine. This option is the default on some kernels.
The option clock=pmtmr selects a simpler but more robust algorithm that makes use of the ACPI timer 
for interpolation. This option also includes lost tick correction code that may cause time gains. However, 
when used in a virtual machine, time gains from using this option are much smaller. This option is usable 
in a virtual machine, if you can tolerate the small time gain. This option is the default on some kernels. 
The option clock=pit uses only the PIT counter for interpolation. It does not include lost tick correction 
code, so it does not gain time, but it does lose time when a tick is actually lost. Unfortunately, this option 
has a different bug on most kernels, such that if you write a program that calls gettimeofday repeatedly, 
it frequently jumps backward by about 1ms, then corrects itself.
The 64‐bit Linux kernels that predate clocksource implement timekeeping with a method different from that 
used in the corresponding 32‐bit kernels. Unfortunately, this implementation also has problems with lost tick 
correction code that overcorrects and causes a time gain. Even some 64‐bit kernels in the 2.4 series have lost 
tick overcorrection—for example, the kernel included in 64‐bit Red Hat Enterprise Linux 3 has this problem. 
The 64‐bit timekeeping implementation has a slightly different set of available algorithms and is controlled by 
a different boot‐time option.
(cid:132) One algorithm is similar to the 32‐bit clock=tsc algorithm discussed above and has the same problem of 
severe lost tick overcorrection. This option is the default on most kernels and is the only one available on 
older kernels.
(cid:132) An alternative algorithm is similar to the 32‐bit clock=pmtmr algorithm discussed above. It has the same 
problem of minor lost tick overcorrection. On some kernels this algorithm is not available at all; on some 
it is selected automatically for AMD processors but cannot be selected manually. On most kernels, 
however, this algorithm can be selected using the notsc kernel command line option.
See VMware knowledge base article 1006427 (http://kb.vmware.com/kb/1006427) for recommended options to 
use on specific vendor kernels. 
Clocksource Kernels
With the new clocksource abstraction, the kernel’s high‐level timekeeping code basically deals only with 
wall‐clock time and NTP rate correction. It calls into a lower‐level clocksource driver to read a counter that 
reflects the raw amount of time (without rate correction) that has passed since boot. The available clocksource 
drivers generally do not use any of the problematic techniques from earlier Linux timekeeping 
implementations, such as using one timer device to interpolate between the ticks of another or doing lost tick 
compensation. In fact, most of the clocksource drivers are tickless. The TSC clocksource (usually the default) 
basically just reads the TSC value and returns it. The ACPI PM timer clocksource is similar, as the kernel 
handles timers that wrap (which occurs about every four seconds with a 24‐bit ACPI PM timer) and extends 
their range automatically.
The clocksource abstraction is a good match for virtual machines, though not perfect. The TSC does not run at 
a precisely specified rate, so the guest operating system has to measure its rate at boot time, and this 
measurement is always somewhat inaccurate. Running NTP or other clock synchronization software in the 
guest can compensate for this issue, however. The ACPI PM timer does run at a precisely specified rate but is 
slower to read than the TSC. Also, when clocksource is used without NO_HZ, the guest operating system still 
programs a timer to interrupt periodically, so by default, the virtual machine still keeps track of a backlog of 
timer interrupts and tries to catch up gradually.
The NO_HZ option provides a further significant improvement. Because the guest operating system does not 
schedule any periodic timers, the virtual machine can never have a backlog greater than one timer interrupt, 
so apparent time does not fall far behind real time and catches up very quickly. Also important, NO_HZ tends 
to reduce the overall average rate of virtual timer interrupts, improving system throughput and scalability to 