tion or context switch to this thread.
This functionality, however, being solely reserved for the termination code path, meant that develop-
ers who want to similarly guarantee the execution of their User APC, regardless of alertability state, 
had to resort to using more complex mechanisms such as manually changing the context of the 
thread using SetThreadContext, which is error-prone at best. In response, the QueueUserAPC2 API was 
created, which allows passing in the QUEUE_USER_APC_FLAGS_SPECIAL_USER_APC
exposing similar functionality to developers as well. Such APCs will always be added before any other 
user-mode APCs (except the termination APC, which is now extra special) and will ignore the alertable 
as a special user APC.
Table 8-9 summarizes the APC insertion and delivery behavior for each type of APC.
The executive uses kernel-mode APCs to perform operating system work that must be completed 
within the address space (in the context) of a particular thread. It can use special kernel-mode APCs to 
direct a thread to stop executing an interruptible system service, for example, or to record the results 
kernel-mode APCs to make a thread suspend or terminate itself or to get or set its user-mode execu-
tion context. The Windows Subsystem for Linux (WSL) uses kernel-mode APCs to emulate the delivery 
of UNIX signals to Subsystem for UNIX Application processes.
CHAPTER 8 System mechanisms
65
TABLE 8-9 APC insertion and delivery
APC Type
Insertion Behavior
Delivery Behavior
Special (kernel)
Inserted right after the last spe-
cial APC (at the head of all other 
normal APCs)
drops, and the thread is not in a guarded region. It is 
the APC.
Normal (kernel)
Inserted at the tail of the kernel-
mode APC list
APC_LEVEL as soon as IRQL 
drops, and the thread is not in a critical (or guarded) 
inserting the APC. Executes the normal routine, if any, 
at PASSIVE_LEVEL after the associated kernel routine 
was executed. It is given arguments returned by the as-
sociated kernel routine (which can be the original argu-
ments used during insertion or new ones).
Normal (user)
Inserted at the tail of the user-
mode APC list
APC_LEVEL as soon as IRQL 
set (indicating that an APC was queued while the thread 
was in an alertable wait state). It is given pointers to 
Executes the normal routine, if any, in user mode at 
PASSIVE_LEVEL after the associated kernel routine is 
executed. It is given arguments returned by the associ-
ated kernel routine (which can be the original argu-
ments used during insertion or new ones). If the normal 
routine was cleared by the kernel routine, it performs a 
test-alert against the thread.
User Thread 
Terminate APC 
(KiSchedulerApcTerminate) 
Inserted at the head of the user-
mode APC list
-
lows similar rules as described earlier but delivered 
at PASSIVE_LEVEL on return to user mode, no matter 
what. It is given arguments returned by the thread-
termination special APC.
Special (user)
Inserted at the head of the 
user-mode APC list but after the 
thread terminates APC, if any. 
Same as above, but arguments are con-
trolled by the caller of QueueUserAPC2 
(NtQueueApcThreadEx2
KeSpecialUserApcKernelRoutine function that re-inserts 
the APC, converting it from the initial special kernel 
APC to a special user APC.
Another important use of kernel-mode APCs is related to thread suspension and termination. Because 
these operations can be initiated from arbitrary threads and directed to other arbitrary threads, the 
kernel uses an APC to query the thread context as well as to terminate the thread. Device drivers often 
block APCs or enter a critical or guarded region to prevent these operations from occurring while they are 
holding a lock; otherwise, the lock might never be released, and the system would hang.
goes into a wait state, another thread in another process can be scheduled to run. When the device 
initiated the I/O so that it can copy the results of the I/O operation to the buffer in the address space 
of the process containing that thread. The I/O system uses a special kernel-mode APC to perform this 
action unless the application used the SetFileIoOverlappedRange API or I/O completion ports. In that 
case, the buffer will either be global in memory or copied only after the thread pulls a completion item 
from the port. (The use of APCs in the I/O system is discussed in more detail in Chapter 6 of Part 1.)
66 
CHAPTER 8 System mechanisms
Several Windows APIs—such as ReadFileEx, WriteFileEx, and QueueUserAPC—use user-mode APCs. 
ReadFileEx and WriteFileEx functions allow the caller to specify a completion routine 
alertable wait state. A thread can enter a wait state either by waiting for an object handle and specify-
ing that its wait is alertable (with the Windows WaitForMultipleObjectsEx function) or by testing directly 
whether it has a pending APC (using SleepEx). In both cases, if a user-mode APC is pending, the kernel 
when the APC routine completes. Unlike kernel-mode APCs, which can execute at APC_LEVEL, user-
mode APCs execute at PASSIVE_LEVEL.
APC delivery can reorder the wait queues—the lists of which threads are waiting for what, and in 
what order they are waiting. (Wait resolution is described in the section “Low-IRQL synchronization,” 
later in this chapter.) If the thread is in a wait state when an APC is delivered, after the APC routine 
are used to suspend a thread from execution, if the thread is waiting for any objects, its wait is removed 
until the thread is resumed, after which that thread will be at the end of the list of threads waiting to 
access the objects it was waiting for. A thread performing an alertable kernel-mode wait will also be 
woken up during thread termination, allowing such a thread to check whether it woke up as a result of 
termination or for a different reason.
Timer processing
-
denced by its high IRQL value (CLOCK_LEVEL) and due to the critical nature of the work it is responsible 
for. Without this interrupt, Windows would lose track of time, causing erroneous results in calcula-
tions of uptime and clock time—and worse, causing timers to no longer expire, and threads never to 
consume their quantum. Windows would also not be a preemptive operating system, and unless the 
current running thread yielded the CPU, critical background tasks and scheduling could never occur on 
a given processor.
Timer types and intervals
-
chine, and subsequently allowed drivers, applications, and administrators to modify the clock interval 
Programmable Interrupt Timer (PIT) chip that has been present on all computers since the PC/AT or 
the Real Time Clock (RTC). The PIT works on a crystal that is tuned at one-third the NTSC color carrier 
various achievable multiples to reach millisecond-unit intervals, starting at 1 ms all the way up to 15 ms. 
run at various intervals that are also powers of two. On RTC-based systems, the APIC Multiprocessor 
CHAPTER 8 System mechanisms
67
The PIT and RTC have numerous issues: They are slow, external devices on legacy buses, have poor 
granularity, force all processors to synchronize access to their hardware registers, are a pain to emu-
late, and are increasingly no longer found on embedded hardware devices, such as IoT and mobile. In 
response, hardware vendors created new types of timers, such as the ACPI Timer, also sometimes called 
the Power Management (PM) Timer, and the APIC Timer (which lives directly on the processor). The 
Timer, or HPET, which a much-improved version of the RTC. On systems with an HPET, it is used instead 
of the RTC or PIC. Additionally, ARM64 systems have their own timer architecture, called the Generic 
on a given system, using the following order:
1.
virtual machine.
2.
3.
4.
kind of HPET.
5.
If no HPET was found, use the RTC.
6.
7. 
which should never happen.
The HPET and the LAPIC Timer have one more advantage—other than only supporting the typical 
periodic one shot mode. This capability will 
allow recent versions of Windows to leverage a dynamic tick model, which we explain later.
Timer granularity
Some types of Windows applications require very fast response times, such as multimedia applications. 
rate (that functionality was added later, through enhanced timers, which we cover in an upcoming sec-
tion); instead, they end up increasing the resolution of all timers in the system, potentially causing other 
timers to expire more frequently, too.
68 
CHAPTER 8 System mechanisms
That being said, Windows tries its best to restore the clock timer back to its original value whenever 
it can. Each time a process requests a clock interval change, Windows increases an internal reference 
count and associates it with the process. Similarly, drivers (which can also change the clock rate) get 
added to the global reference count. When all drivers have restored the clock and all processes that 
EXPERIMENT: Identifying high-frequency timers
Due to the problems that high-frequency timers can cause, Windows uses Event Tracing for 
interval, displaying the time of the occurrence and the requested interval. The current interval 
is also shown. This data is of great use to both developers and system administrators in identify-
ing the causes of poor battery performance on otherwise healthy systems, as well as to decrease 
overall power consumption on large systems. To obtain it, simply run powercfg /energy, and 
energy-report.html, similar to the one shown here:
EXPERIMENT: Identifying high-frequency timers
Due to the problems that high-frequency timers can cause, Windows uses Event Tracing for 
interval, displaying the time of the occurrence and the requested interval. The current interval 
is also shown. This data is of great use to both developers and system administrators in identify-
ing the causes of poor battery performance on otherwise healthy systems, as well as to decrease 
overall power consumption on large systems. To obtain it, simply run powercfg /energy, and 
powercfg /energy, and 
powercfg /energy
energy-report.html, similar to the one shown here:
energy-report.html, similar to the one shown here:
energy-report.html
CHAPTER 8 System mechanisms
69
Scroll down to the Platform Timer Resolution section, and you see all the applications that 
call. Timer resolutions are shown in hundreds of nanoseconds, so a period of 20,000 corresponds 
to 2 ms. In the sample shown, two applications—namely, Microsoft Edge and the TightVNC 
remote desktop server—each requested a higher resolution. 
EPROCESS 
+0x4a8 TimerResolutionLink : _LIST_ENTRY [ 0xfffffa80'05218fd8 - 0xfffffa80'059cd508 ]
+0x4b8 RequestedTimerResolution : 0
+0x4bc ActiveThreadsHighWatermark : 0x1d
+0x4c0 SmallestTimerResolution : 0x2710
+0x4c8 TimerResolutionStackRecord : 0xfffff8a0'0476ecd0 _PO_DIAG_STACK_RECORD
Note that the debugger shows you an additional piece of information: the smallest timer resolu-
tion that was ever requested by a given process. In this example, the process shown corresponds 
to PowerPoint 2010, which typically requests a lower timer resolution during slideshows but not 
during slide editing mode. The EPROCESS
this, and the stack could be parsed by dumping the PO_DIAG_STACK_RECORD structure.
TimerResolutionLink
resolution, through the ExpTimerResolutionListHead doubly linked list. Parsing this list with the 
debugger data model can reveal all processes on the system that have, or had, made changes to 
the timer resolution, when the powercfg command is unavailable or information on past pro-
resolution, as did the Remote Desktop Client, and Cortana. WinDbg Preview, however, now only 
previously requested it but is still requesting it at the moment this command was written.
lkd> dx -g Debugger.Utility.Collections.FromListEntry(*(nt!_LIST_ENTRY*)&nt!ExpTimerReso
lutionListHead, "nt!_EPROCESS", "TimerResolutionLink").Select(p => new { Name = ((char*)
p.ImageFileName).ToDisplayString("sb"), Smallest = p.SmallestTimerResolution, Requested =
p.RequestedTimerResolution}),d
====================================================== 
=         = Name              = Smallest = Requested = 
====================================================== 
= [0]     - msedge.exe        - 10000    - 0
= 
= [1]     - msedge.exe        - 10000    - 0
= 
= [2]     - msedge.exe        - 10000    - 0
= 
= [3]     - msedge.exe        - 10000    - 0
= 
= [4]     - mstsc.exe         - 10000    - 0
= 
= [5]     - msedge.exe        - 10000    - 0
= 
= [6]     - msedge.exe        - 10000    - 0
= 
= [7]     - msedge.exe        - 10000    - 0
= 
= [8]     - DbgX.Shell.exe    - 10000    - 10000     = 
= [9]     - msedge.exe        - 10000    - 0
= 
= [10]    - msedge.exe        - 10000    - 0
= 
= [11]    - msedge.exe        - 10000    - 0
= 
= [12]    - msedge.exe        - 10000    - 0
= 
= [13]    - msedge.exe        - 10000    - 0
= 
= [14]    - msedge.exe        - 10000    - 0
= 
Scroll down to the Platform Timer Resolution section, and you see all the applications that 
call. Timer resolutions are shown in hundreds of nanoseconds, so a period of 20,000 corresponds 
to 2 ms. In the sample shown, two applications—namely, Microsoft Edge and the TightVNC 
remote desktop server—each requested a higher resolution. 
EPROCESS
+0x4a8 TimerResolutionLink : _LIST_ENTRY [ 0xfffffa80'05218fd8 - 0xfffffa80'059cd508 ]
+0x4b8 RequestedTimerResolution : 0
+0x4bc ActiveThreadsHighWatermark : 0x1d
+0x4c0 SmallestTimerResolution : 0x2710
+0x4c8 TimerResolutionStackRecord : 0xfffff8a0'0476ecd0 _PO_DIAG_STACK_RECORD
Note that the debugger shows you an additional piece of information: the smallest timer resolu-
tion that was ever requested by a given process. In this example, the process shown corresponds 
to PowerPoint 2010, which typically requests a lower timer resolution during slideshows but not 
during slide editing mode. The EPROCESS
EPROCESS
EPROCESS
this, and the stack could be parsed by dumping the PO_DIAG_STACK_RECORD structure.
TimerResolutionLink
TimerResolutionLink
TimerResolutionLink
resolution, through the ExpTimerResolutionListHead doubly linked list. Parsing this list with the 
ExpTimerResolutionListHead doubly linked list. Parsing this list with the 
ExpTimerResolutionListHead
debugger data model can reveal all processes on the system that have, or had, made changes to 
the timer resolution, when the powercfg command is unavailable or information on past pro-
resolution, as did the Remote Desktop Client, and Cortana. WinDbg Preview, however, now only 
previously requested it but is still requesting it at the moment this command was written.
lkd> dx -g Debugger.Utility.Collections.FromListEntry(*(nt!_LIST_ENTRY*)&nt!ExpTimerReso
lutionListHead, "nt!_EPROCESS", "TimerResolutionLink").Select(p => new { Name = ((char*)
p.ImageFileName).ToDisplayString("sb"), Smallest = p.SmallestTimerResolution, Requested =
p.RequestedTimerResolution}),d
======================================================
=         = Name              = Smallest = Requested =
======================================================
= [0]     - msedge.exe        - 10000    - 0
=
= [1]     - msedge.exe        - 10000    - 0
=
= [2]     - msedge.exe        - 10000    - 0
=
= [3]     - msedge.exe        - 10000    - 0
=
= [4]     - mstsc.exe         - 10000    - 0
=
= [5]     - msedge.exe        - 10000    - 0
=
= [6]     - msedge.exe        - 10000    - 0
=
= [7]     - msedge.exe        - 10000    - 0
=
= [8]     - DbgX.Shell.exe    - 10000    - 10000     =
= [9]     - msedge.exe        - 10000    - 0
=
= [10]    - msedge.exe        - 10000    - 0
=
= [11]    - msedge.exe        - 10000    - 0
=
= [12]    - msedge.exe        - 10000    - 0
=
= [13]    - msedge.exe        - 10000    - 0
=
= [14]    - msedge.exe        - 10000    - 0
=
70 
CHAPTER 8 System mechanisms
= [15]    - msedge.exe        - 10000    - 0         = 
= [16]    - msedge.exe        - 10000    - 0         = 
= [17]    - msedge.exe        - 10000    - 0         = 
= [18]    - msedge.exe        - 10000    - 0         = 
= [19]    - SearchApp.exe     - 40000    - 0         = 
====================================================== 