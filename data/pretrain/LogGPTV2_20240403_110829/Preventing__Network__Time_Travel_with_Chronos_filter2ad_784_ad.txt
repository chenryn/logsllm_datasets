m(cid:88)
P(m−d,m] =
(cid:18)m
(cid:19)
k
k=m−d+1
Figure 6 plots the numerical results of Equation 3 when
3 for different values of p (Figure 7 shows the values in
d = m
a log-scale). As is clear from the ﬁgure, even for fairly low
9
Figure 9: The attacker’s probability, for different values of d,
of injecting m − d bad samples into the sample set when n
of the servers in the server pool are under his control.
3
Figure 10: Probability that the attacker controls at least half of
the queried servers (and can thus successfully attack today’s
NTP clients) in one sampling iteration
of at least d + 1 of the sampled servers goes to 0 as m is
increased; the higher the value of d the lower this probability is.
In addition, so long as d  50ms, the
12
time values from servers are expected to be fairly close to
each other.
Selecting ω. The above has direct implications for setting the
value of ω. Suppose that the goal is to protect from an attacker
capable of gaining control of, e.g., 10% of the hundreds
of servers in the server pool (and moreover, controlling the
servers with the most accurate clocks). Setting ω to be, e.g.,
25ms, implies that, over 83% of the servers (on average)
are honest servers whose clocks are all within 2ω = 50ms
from each other. Hence, setting ω to be in the order of 10s
of milliseconds yields both high accuracy and strong security
guarantees.
VI. RELATED WORK
NTP’s insecurity. The network time protocol (NTP) [14], [32],
designed by Mills [34], is one of the Internet’s oldest protocols.
Already in 1985, in the context of the development of the
Kerberos security model, NTP’s inadequacy for achieving
secure time synchronization was pointed out [34].
Recent years have witnessed renewed interest
in NTP
security. See taxonomy of attacks against NTP in [37]. Re-
cent studies [24], [25] demonstrated the ability of even off-
path attackers to launch denial-of-service (DoS) attacks and
timeshifting attacks against NTP by exploiting weaknesses in
NTP’s implementation (e.g., via spoofed Kiss-o’-Death pack-
ets). Recently introduced patches to NTP’s implementation
eliminate/mitigate some of these vulnerabilities [1].
Today’s NTP is effectively defenseless against Man-in-the-
Middle (MitM) attackers capable of dropping, delaying, and
tampering with client-server trafﬁc (see section II).
Approaches to securing NTP. Although NTP supports crypto-
graphic authentication [9], [43], in practice NTP trafﬁc is very
rarely authenticated [24], as a result of a cumbersome key-
distribution mechanism, weaknesses in the Autokey protocol
for public-key authentication, and beyond [14], [37], [40]. “Au-
tokey (RFC 5906) public-key encryption scheme vulnerability
issues too severe to be patched” motivated the development of
NTPsec [2], implemented in 2015 [22].
Still,
today’s usage of NTPsec is very low and, more
importantly, encryption and authentication do not prevent
MitM attacks, as such attacks can rely simple on delaying
and dropping (encrypted) trafﬁc and, moreover, even perfect,
globally deployed authentication will leave NTP exposed to
attackers that gain control of (authenticated) NTP servers.
Another approach to NTP security is utilizing path re-
dundancy on the Internet to avoid MitM attackers [36], [42].
Under this approach, multiple network paths are used to
connect client and server. Chronos, in contrast, generates server
redundancy through the creation of large server pools and
carefully samples servers in these pools. Chronos is also
designed to contend with a stronger notion of MitM attacker
than that considered in [36], [42]; the threat model for Chronos
considers an attacker in control of NTP servers, as opposed to
a MitM attacker on a speciﬁc single path from the client to
a server. Lastly, generating multiple disjoint Internet paths for