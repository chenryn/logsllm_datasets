# Should the UI allow to change the configured user accounts?
can_change_users = False
# Define the default password policies.
# Specify a policy name and its attributes on each line.
#
# Valid attributes:
#
#   quality   The minimum quality score (see libpwquality).
#   length    The minimum length of the password.
#   empty             Allow an empty password.
#   strict            Require the minimum quality.
#
password_policies =
    root (quality 1, length 6)
    user (quality 1, length 6, empty)
    luks (quality 1, length 6)
[License]
# A path to EULA (if any)
#
# If the given distribution has an EULA & feels the need to
# tell the user about it fill in this variable by a path
# pointing to a file with the EULA on the installed system.
#
# This is currently used just to show the path to the file to
# the user at the end of the installation.
eula =
```
:::
::: section
::: titlepage
## []{#branding-and-chroming-the-graphical-user-interface_customizing-anaconda.html#_configuring_the_product_configuration_files}配置产品配置文件 {.title}
:::
产品配置文件有一个或者两个额外的部分来识别这个产品。`[Product]`{.literal}
部分指定产品的产品名称。`[Base Product]`{.literal}
部分指定基础产品的产品名称（如果有的话）。例如：Red Hat Enterprise Linux
是 Red Hat Virtualization 的基本产品。
安装程序在加载指定产品的配置文件之前加载基础产品的配置文件。例如：它会首先载入
Red Hat Enterprise Linux 配置，然后载入 Red Hat Virtualization 的配置。
请参阅 Red Hat Enterprise Linux 的产品配置文件示例：
``` literallayout
# Anaconda configuration file for Red Hat Enterprise Linux.
[Product]
product_name = Red Hat Enterprise Linux
[Installation System]
# Show a warning if SMT is enabled.
can_detect_enabled_smt = True
[Network]
default_on_boot = DEFAULT_ROUTE_DEVICE
[Payload]
ignored_packages =
    ntfsprogs
    btrfs-progs
    dmraid
enable_closest_mirror = False
default_source = CDN
[Bootloader]
efi_dir = redhat
[Storage]
file_system_type = xfs
default_partitioning =
    /     (min 1 GiB, max 70 GiB)
    /home (min 500 MiB, free 50 GiB)
    swap
[Storage Constraints]
swap_is_recommended = True
[User Interface]
help_directory = /usr/share/anaconda/help/rhel
[License]
eula = /usr/share/redhat-release/EULA
```
请参阅 Red Hat Virtualization 产品配置文件示例：
``` literallayout
# Anaconda configuration file for Red Hat Virtualization.
[Product]
product_name = Red Hat Virtualization (RHVH)
[Base Product]
product_name = Red Hat Enterprise Linux
[Storage]
default_scheme = LVM_THINP
default_partitioning =
    /              (min 6 GiB)
    /home          (size 1 GiB)
    /tmp           (size 1 GiB)
    /var           (size 15 GiB)
    /var/crash     (size 10 GiB)
    /var/log       (size 8 GiB)
    /var/log/audit (size 2 GiB)
    swap
[Storage Constraints]
root_device_types = LVM_THINP
must_not_be_on_root = /var
req_partition_sizes =
	/var   10 GiB
	/boot  1  GiB
```
要为您的产品自定义安装程序配置，您必须创建一个产品配置文件。创建名为
`my-distribution.conf`{.literal} 的新文件，其内容与上例类似。将
`[Product]`{.literal} 部分中的 [*product_name*]{.emphasis}
更改为产品的名称，如 My Distribution。产品名称应当与
`.buildstamp`{.literal} 文件中使用的名称相同。
创建自定义配置文件后，请按照创建 [product.img
文件](#completing-post-customization-tasks_customizing-anaconda.html#creating-a-product-img-file_completing-post-customization-tasks "创建 product.img 文件"){.link}
部分的步骤来创建包含自定义 `的新 product.img`{.literal} 文件，以及
[创建自定义引导镜像](#completing-post-customization-tasks_customizing-anaconda.html#creating-custom-boot-images_completing-post-customization-tasks "创建自定义引导镜像"){.link}
以使用包含您的更改创建新的可引导 ISO 文件。
:::
::: section
::: titlepage
## []{#branding-and-chroming-the-graphical-user-interface_customizing-anaconda.html#_configuring_the_custom_configuration_files}配置自定义配置文件 {.title}
:::
要自定义与产品名称无关的安装程序配置，您必须创建一个自定义配置文件。要做到这一点，创建一个名为
`100-my-configuration.conf`{.literal} 的新文件，其内容类似于
[配置默认配置文件中的示例，](#branding-and-chroming-the-graphical-user-interface_customizing-anaconda.html#configuring_the_product_configuration_files "配置默认配置文件"){.link}
省略 `[Product]`{.literal} 和 `[Base Product]`{.literal} 部分。
创建自定义配置文件后，请按照创建 [product.img
文件](#completing-post-customization-tasks_customizing-anaconda.html#creating-a-product-img-file_completing-post-customization-tasks "创建 product.img 文件"){.link}
部分的步骤来创建包含自定义 `的新 product.img`{.literal} 文件，以及
[创建自定义引导镜像](#completing-post-customization-tasks_customizing-anaconda.html#creating-custom-boot-images_completing-post-customization-tasks "创建自定义引导镜像"){.link}
以使用包含您的更改创建新的可引导 ISO 文件。
:::
:::
:::
[]{#developing-installer-add-ons_customizing-anaconda.html}
::: chapter
::: titlepage
# []{#developing-installer-add-ons_customizing-anaconda.html#developing-installer-add-ons_customizing-anaconda}第 5 章 开发安装程序附加组件 {.title}
:::
本节详细介绍了 Anaconda 及其架构，以及如何开发您自己的附加组件。Anaconda
及其架构的详情可帮助您了解 Anaconda
后端和附加组件工作的各种插件。它还有助于开发附加组件。
::: section
::: titlepage
# []{#developing-installer-add-ons_customizing-anaconda.html#introduction-to-anaconda-and-add-ons_developing-installer-add-ons}Anaconda 和附加组件介绍 {.title}
:::
[**[Anaconda]{.application}**]{.strong} 是 Fedora、Red Hat Enterprise
Linux 及其变体使用的操作系统安装程序。它是一组 Python
模块和脚本，以及一些额外的文件，如 `Gtk`{.literal} widgets（用 C
编写的）、`systemd`{.literal} 单元和 `dracut`{.literal}
库。它们一起形成了一个允许用户设置结果(目标)系统参数的工具，然后在计算机上设置此系统。安装过程有四个主要步骤：
::: orderedlist
1.  准备安装目的地（通常是磁盘分区）
2.  安装软件包和数据
3.  安装并配置引导装载程序
4.  配置新安装的系统
:::
使用 Anaconda 可让您使用以下三种方法安装 Fedora、Red Hat Enterprise
Linux 及其变体：
[**使用图形用户界面(GUI)：**]{.strong}
这是最常用的安装方法。该界面允许用户在开始安装前，只需很少或无需配置即可以交互方式安装系统。这个方法涵盖了所有常见的用例，包括设置复杂的分区布局。
图形界面支持通过 `VNC`{.literal}
的远程访问，即使在没有图形卡或未连接显示器的系统上，您也能够使用 GUI。
[**使用文本用户界面(TUI)：**]{.strong}
TUI
的工作方式类似于单色行打印机，它允许在不支持光标移动、颜色和其他高级功能的串行控制台上工作。文本模式是有限的，它只允许您自定义最常用的选项，如网络设置、语言选项或安装（软件包）源；在此界面中没有手动分区等高级功能。
[**使用 Kickstart 文件：**]{.strong}
Kickstart 文件是一个纯文本文件，它使用类似 shell
的语法,可包含驱动器安装过程的数据。Kickstart
文件允许您部分或完全自动化安装。要完全自动化安装，需要一组命令来配置所有必填区域。如果缺少一个或多个命令，则安装需要用户参与才能完成。
除了安装程序本身的自动化外，Kickstart
文件还可以包含安装过程中在特定时间运行的自定义脚本。
:::
::: section
::: titlepage
# []{#developing-installer-add-ons_customizing-anaconda.html#architecture-of-anaconda_developing-installer-add-ons}Anaconda 构架 {.title}
:::
[**[Anaconda]{.application}**]{.strong} 是一组 Python
模块和脚本。它还使用几个外部软件包和程序库。这个工具组的主要组件包括以下软件包：
::: itemizedlist
-   `pykickstart`{.literal} - 解析并验证 Kickstart
    文件。另外，提供存储安装值的数据结构。
-   `dnf`{.literal} - 安装软件包并解决依赖项的软件包管理器
-   `blivet`{.literal} - 处理与存储管理相关的所有活动
-   `pyanaconda`{.literal} - 包含
    [**[Anaconda]{.application}**]{.strong}
    的用户界面和模块，如键盘和时区选择、网络配置和用户创建。同时提供各种执行面向系统功能的工具
-   `python-meh`{.literal} -
    包含一个异常处理程序，它在崩溃时收集和存储额外的系统信息，并将这些信息传递给
    `libreport`{.literal} 库，后者本身是 [ABRT
    项目](https://fedorahosted.org/abrt/){.link} 的一部分
-   `dasbus`{.literal} - 启用 `D-Bus`{.literal} 库与 anaconda
    模块和外部组件之间的通信
-   `python-simpleline`{.literal} - 文本 UI 框架库，用于在
    [**Anaconda**]{.strong} 文本模式中管理用户交互
-   `gtk`{.literal} - 用于创建和管理 GUI 的 Gnome 工具包库
:::
除了上面提到的软件包外，[**Anaconda**]{.strong}
在内部被分成用户界面和一组模块，这些模块作为独立的进程运行，并使用
`D-Bus`{.literal} 库进行通信。这些模块是：
::: itemizedlist
-   `Boss`{.literal} - 管理内部模块发现、生命周期和协调
-   `Localization`{.literal} - 管理区域设置
-   `Network`{.literal} - 处理网络
-   `Payloads`{.literal} - 处理以不同格式的安装数据，如
    `rpm`{.literal}、`ostree`{.literal}、`tar`{.literal}
    和其他安装格式。有效负载管理安装的数据源 ;
    源的格式可能会有所不同，比如 CD-ROM、HDD、NFS、URL 和其他来源
-   `Security`{.literal} - 管理与安全相关的方面
-   `Services`{.literal} - 处理服务
-   `Storage`{.literal} - 使用 `blivet`{.literal} 管理存储
-   `Subscription`{.literal} - 处理 `subscription-manager`{.literal}
    工具和洞察力。
-   `Timezone`{.literal} - 处理时间、日期、区域和时间同步。
-   `Users`{.literal} - 创建用户和组。
:::
每个模块声明其处理 Kickstart 的哪些部分，并具方法来将配置从 Kickstart
应用到安装环境和安装的系统。
Anaconda(`pyanaconda`{.literal})的 Python
代码部分作为拥有用户界面的\"主\"进程启动。您提供的任何 Kickstart
数据都使用 `pykickstart`{.literal} 模块解析，并且启动 `Boss`{.literal}
模块，其发现所有其他模块，并启动它们。然后主进程会根据其声明的功能将
Kickstart 数据发送到模块。模块处理数据，将配置应用到安装环境，UI
将验证是否已做了所有必要的选择。如果没有，您必须在互动安装模式中提供数据。完成所有必要的选择后，安装就可以开始 -
把数据写入安装系统的模块。
:::
::: section
::: titlepage
# []{#developing-installer-add-ons_customizing-anaconda.html#the-hub-spoke-model_developing-installer-add-ons}Anaconda 用户界面 {.title}
:::
Anaconda 用户界面（UI）有一个非线性结构，也称 hub 和 spoke 模型。
[**[Anaconda]{.application}**]{.strong} hub 和 spoke 模型的优点是：
::: itemizedlist
-   进入安装程序屏幕的灵活性。
-   保留默认设置的灵活性。
-   提供对配置的值的概述信息。
-   支持可扩展性。您可以添加
    hub，而无需对任何内容重新排序，并可解决一些复杂的依赖关系。
-   支持使用图形和文本模式安装。
:::
下图显示了安装程序布局以及[*hub*]{.emphasis}与[*spoke*]{.emphasis}之间可能的交互
（创建）:
::: figure
[]{#developing-installer-add-ons_customizing-anaconda.html#figu-anaconda-hub-and-spoke}
**图 5.1. Hub 和 spoke 模型**
::: figure-contents
::: mediaobject
![hub 和 spoke](images/hub_and_spoke.png)
:::
:::
:::
在图中，屏幕 2-13 称为 [*普通 spoke*]{.emphasis}，屏幕 1 和 14 称为
[*独立 spoke*]{.emphasis} 。独立 spoke 是可在独立 spoke 或 hub
之前或之后使用的屏幕。例如，安装开始时的 `Welcome`{.literal}
屏幕提示您为剩余的安装选择语言。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
::: itemizedlist
-   `安装概述`{.literal} 是 Anaconda 中唯一的
    hub。它显示了在安装开始前配置的选项概述
:::
:::
每个 spoke 都具有以下预定义的[*属性*]{.emphasis}来反映 hub。
::: itemizedlist
-   `ready`{.literal} - 说明您能否访问 spoke
    。例如，当安装程序配置软件包源时，spoke
    的颜色是灰色的，在配置完成后前您无法访问它。
-   `completion`{.literal} - 标记 spoke 是否完成（设置所有必需值）。
-   `mandatory`{.literal} - 决定在继续安装前是否 [*必须*]{.emphasis}
    访问 spoke ；例如，您必须访问 `Installation Destination`{.literal}
    spoke，即使您想要使用自动磁盘分区