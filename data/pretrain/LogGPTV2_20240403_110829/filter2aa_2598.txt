1
脱壳⼩⼦-java anti-decompiler保护脱壳
前⾔
脱壳思路
脱壳效果
开源地址
有⼀天，脚本⼩⼦想开发⼀个⼯具，但脚本⼩⼦⼜不想从头构思设计代码框架，就找找业界有没有
好的⼯具能不能抄抄。终于在脚本⼩⼦快乐星球⾥，找到⼀个看起来还不错的⼯具。但存在⼀个问题，
这个⼯具有代码保护壳。。。脚本⼩⼦本来想当裁缝⼩⼦的，可没想到还得先变成脱壳⼩⼦才⾏。
正⾯硬刚解密算法是⼀种思路，但所需要花费的时间太⻓，性价⽐不是很⾼，并且由于笔者太菜
了，浅尝了下，发现不太容易搞定。这⾥采⽤CSAgent的形式，通过注⼊⽬标程序，替换壳代码的解密
加载过程，直接将解密后的代码写到⽂件当中。
解密加载代码在JavaLauncherIdea$Decoder的loadJars⽅法当中。 
其中类CipherInputStream的作⽤就是读取加密状态的⽂件，所以我们只需要在这⾥将
CiperInputStream获取的⽂件流读取出来，然后写⼊到本地⽂件即可。 
前⾔
脱壳思路
2
这⾥有个⼩坑，就是在壳代码当中有个判断启动java进程的命令⾏参数当中是否包含-
XX:+DisableAttachMechanis，并且这个选项是否是⽣效的，代码位置在JavaLauncherIdea的main⽅法
中。
要是启动参数当中没有加⼊这个选项或者没有⽣效，就会创建新JVM进程，并且在新进程启动参数
中添加-XX:+DisableAttachMechanis。 
Java
复制代码
if (jvmArgs.contains("-XX:+DisableAttachMechanism") && 
jvmArgs.lastIndexOf("-XX:-DisableAttachMechanism") < 
jvmArgs.lastIndexOf("-XX:+DisableAttachMechanism")) {
            JavaLauncherIdea launcher = new JavaLauncherIdea();
            try {
                launcher.run(args);
            } catch (Throwable var6) {
                JOptionPane.showMessageDialog((Component)null, 
var6.getMessage(), "Error", 0);
                System.exit(0);
            }
 }
1
2
3
4
5
6
7
8
9
10
3
所以我们在使⽤javaagent时带上-XX:+DisableAttachMechanis这个启动选项。 
这⾥开发脱壳agent⽩嫖了Twi1ight师傅得CSAgent的模板代码，感谢⼤佬的代码，脚本⼩⼦表示⽩
嫖真⾹。最后脱壳后的⽂件会保存在java运⾏的当前⽬录下，名字以xxx_unpacked.jar命名 
https://github.com/yougar0/AntiDecAgent 
脱壳效果
开源地址
Java
复制代码
java -javaagent:CSAgent-1.4-SNAPSHOT-jar-with-dependencies.jar -
XX:+DisableAttachMechanism -jar xxx.jar
1