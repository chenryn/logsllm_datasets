      * this id can be used with all of the existing IDC Array functions.  
      */  
     static error_t idaapi idc_create_netnode(idc_value_t *argv, idc_value_t *res)  
     {  
➊     res->vtype = VT_LONG;           //result type is a netnode index  
➋     if (argv[0].vtype == VT_STR2) {  //verify we have the proper input type  
➌       netnode n(argv[0].c_str(), 0, true);  //create the netnode  
➍       res->num = (nodeidx_t)n;          //set the result value  
      }  
      else {  
➎      res->num = -1;         //If the user supplies a bad argument we fail  
      }  
      return eOk;  
    }  
这个函数的两个参数分别表示输入参数数组（argv
 ），其中包含提交给 CreateNetnode
 的所有参数（这里应该只有一个），还有一个输出参数（res
 ），它用于接收我们正在执行的 IDC 函数的结果。SDK 数据类型idc_value_t
 代表一个 IDC 值。这个数据类型中的字段指明这个值所代表的数据的当前类型以及这个值的当前内容。这个函数首先指定CreateNetnode
 返回一个长（VT_LONG
 ）值（➊）。由于 IDC 变量没有类型，我们必须指明这个变量在任何给定的时刻所保存的值的类型。接下来，该函数验证 CreateNetnode
 的调用方是否提供了一个字符串类型的参数 VT_STR （➋）。如果调用方提供了一个有效的参数，则使用提供的名称创建一个网络节点（➌）。得到的网络节点索引号将以 CreateNetnode
 函数结果的形式返回给调用方（➍）。在这个例子中，结果的类型是整数值，因此，这个结果将存储在 res->num
 字段中。如果结果类型是一个字符串，那么，需要调用res->set_string
 来设置该结果的字符串值。如果用户没有提供字符串参数，这个函数将无法完成任务，并返回无效的网络节点索引 1（➎）。
使用下面的函数和 PLUGIN结构体完成插件的创建过程：
     void idaapi term(void) {}   //nothing to do on termination  
     void idaapi run(int arg) {} //nothing to do and no way to activate  
     plugin_t PLUGIN = {  
       IDP_INTERFACE_VERSION,  
       //this plugin loads at IDA startup, does not get listed on the Edit>Plugins menu
       //and modifies the database  
➊     PLUGIN_FIX | PLUGIN_HIDE | PLUGIN_MOD,  // plugin flags  
       init,                 // initialize  
       term,                 // terminate. this pointer may be NULL.  
       run,                  // invoke plugin  
       "",                   // long comment about the plugin  
       "",                   // multiline help about the plugin  
       "",                   // the preferred short name of the plugin  
       ""                    // the preferred hotkey to run the plugin  
     };
这个插件的特殊之处在于，它在 IDA 启动时加载（PLUGIN_FIX
 ），并且一直对用户隐藏它的行踪，因为它并没有添加到 Edit ▶Plugins 菜单（PLUGIN_HIDE
 ，➊）中。该插件一直驻留在内存中，可供所有数据库使用。它的所有初始化任务都在 init
 函数中进行，因此，插件的 run
 方法基本上无事可做。
安装这个插件后，IDC 程序员就可以使用网络节点名称访问 IDA 数据库中的任何已命名网络节点，如下面的例子所示：
auto n, val;  
n = CreateNetnode("$ imports");       //no $ idc_array prefix will be added  
val = GetArrayElement(AR_STR, n, 0);  //get element zero
有关使用 SDK 与IDC 交互的更多信息，请参阅 expr.hpp 头文件。
17.6 插件用户界面选项
本书并非用户界面开发指南，但许多时候，插件需要与 IDA 用户交互以请求或显示信息。除了第16 章中提到的askXXX
 函数外，还有其他一些复杂的函数可以通过IDA API 实现用户交互。对于更加大胆的插件作者来说，需要记住的是，为GUI 版的IDA 开发的插件也能够使用各种 GUI库（Qt或者Windows Native）中的所有用户界面函数。通过使用这些函数，你几乎可以使用插件中的任何一种图形界面元素。
除SDK 的askXXX
 界面函数外，使用 SDK 构建用户界面元素时，你将面临更大的挑战。其中一个原因是 SDK 试图通过提供一个非常通用的编程接口来完成向用户显示 GUI 元素和接受用户输入之类的复杂任务。
17.6.1 使用SDK的“选择器”对话框
我们首先讨论的两个函数是 choose
 和choose2
 。kernwin.hpp文件声明了这些函数以及用于控制其行为的各种常量。这两个函数的作用是向用户显示一组数据元素，并要求用户从中选择一项或几项。通过要求你指定格式化函数，从而生成在“选择器”窗口中显示的每一行文本，choose
 函数几乎能够显示任何类型的数据。这两个函数的不同在于，choose
 显示一个单列列表，而choose2
 则能够显示一个多列列表。下面的例子提供了这些函数的最简单代码，其中使用了许多默认参数。如果希望研究 choose
 和choose2
 的全部功能，请参阅 kernwin.hpp文件。
为向用户显示一列信息，最简单的 choose
 函数代码如下所示，其中省略了一些默认参数：
ulong choose(void *obj,  
             int width,  
             ulong (idaapi *sizer)(void *obj),  
             char *(idaapi *getline)(void *obj, ulong n, char *buf),  
             const char *title);
在这个例子中，obj
 参数是一个指向即将显示的数据块的指针，width
 参数是“选择器”窗口所使用的列宽。sizer
 参数是一个指向某函数的指针，该函数能够解析obj
 所指的数据，并返回显示这些数据所需的行数。getline
 参数也是一个指向某函数的指针，该函数能够生成obj
 选择的一个项的字符串表示形式。值得注意的是，只要 sizer
 函数能够解析相关数据来确定显示该数据所需的行数，且 getline
 函数能够使用一个整数索引定位某数据项，并生成该数据项的字符串表示形式，则 obj
 指针能够指向任何类型的数据。title
 参数指定生成的“选择器”对话框使用的标题字符串。choose
 函数返回用户选择的项目的索引（1.. n
 ），如果用户取消该对话框，则返回 0。代码清单 17-2 中的代码摘自某插件，虽然并不十分令人兴奋，但它说明了如何使用choose
 函数。
代码清单 17-2 choose函数的示例用法
#include   
//The sample data to be displayed  
int data[] = {0xdeafbeef, 0xcafebabe, 0xfeedface, 0};  
//this example expects obj to point to a zero  
//terminated array of non-zero integers.  
ulong idaapi idabook_sizer(void *obj) {  
   int *p = (int*)obj;  
   int count = 0;  
   while (*p++) count++;  
   return count;  
}  
/*  
 * obj In this example obj is expected to point to an array of integers  
 * n indicates which line (1..n) of the display is being formatted.  
 *   if n is zero, the header line is being requested.  
 * buf is a pointer to the output buffer for the formatted data. IDA will  
 *     call this with a buffer of size MAXSTR (1024).  
 */  
char * idaapi idabook_getline(void *obj, ulong n, char *buf) {  
   int *p = (int*)obj;  
   if (n == 0) { //This is the header case  
      qstrncpy(buf, "Value", strlen("Value") + 1);  
   }  
   else { //This is the data case  
      qsnprintf(buf, 32, "0x%08.8x", p[n - 1]);  
   }  
   return buf;  
}  
void idaapi run(int arg) {  
   int choice = choose(data, 16, idabook_sizer, idabook_getline,  
                      "Idabook Choose");  
   msg("The user's choice was %d\n", choice);  
}
激活代码清单 17-2 中的插件将生成如图 17-4 所示的“选择器”对话框。
图17-4 选择器对话框示例
choose2
 函数可以显示多列形式的“选择器”对话框。同样，我们分析这个函数的最简单版本，接受所有可能的默认参数，如下所示：
ulong choose2(void *obj,  
              int ncol,  
              const int *widths,  
              ulong (idaapi *sizer)(void *obj),  
              void (idaapi *getline)(void *obj, ulong n, char* const *cells),  
              const char *title);
可以看到，choose2
 函数与前面提到的 choose
 函数有一些不同。首先，ncol
 参数指定将要显示的列数，而 widths
 参数是一个指定每列宽度的整数数组。在 choose2
 中，getline
 函数的格式发生了一些变化。由于 choose2
 对话框能够显示多列，getline
 函数必须为一行中的每列提供数据。代码清单 17-3 中的示例代码说明了 choose2