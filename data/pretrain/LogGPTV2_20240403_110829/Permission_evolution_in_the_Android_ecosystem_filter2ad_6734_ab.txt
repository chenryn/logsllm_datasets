merged into platform version 4.0.
To obtain the permission deﬁnitions for each API level,
we extracted the ﬁle AndroidManifest.xml from each re-
lease [10]. We then analyzed the changes in permissions
between successive releases.
3.2 Apps Permissions Dataset
Third-party apps. We characterize permission usage evolu-
tion in third-party apps based on a stable set of 237 popular
apps with 1,703 versions that span at least three years. We
chose these apps because they are widely-used, have releases
associated in each API level, and have more than one release
per year; hence we could observe how apps evolve and how
changes in the platform might lead to changes in apps.
Selecting this stable dataset was far from trivial, and was
an involved process. First, we seeded the dataset with 1,100
apps (Top-50 free apps from each category) [16]. Then
we crawled historic versions of apps from online reposito-
ries, and then retrieved their latest versions from Google
Play [1,2]; in total, this initial set contained 1,420 apps with
4,857 versions. Next, we selected only those apps that had
at least one version each year between 2009 and 2012. Fi-
nally, after eliminating those apps that did not match our
requirements, we obtained the stable dataset of 237 apps
with 1,703 versions, with each app’s evolution spanning at
least three years.
Pre-installed apps. Pre-installed apps are much more dif-
ﬁcult to obtain because they are not distributed online by
vendors—they come with the phone; moreover, the sets of
pre-installed apps vary widely among phones and manufac-
turers. Therefore, to collect pre-installed apps, we used a
diﬀerent process compared to third-party apps. First, we
gathered the ﬁrmwares of multiple phone vendors—HTC,
Motorola, Samsung, and LG—from various online sources.
Next, we unpacked the ﬁrmwares and extracted the pre-
installed apps inside.
In total, we collected 69 ﬁrmwares
over the years which contained 346 pre-installed apps with
1,714 versions.
Permission collection. To obtain the permission list for
each app, we use the tool aapt on each app version to ex-
tract the AndroidManifest.xml ﬁle, which contains the per-
missions requested by that version [10]. After obtaining the
set of manifest ﬁles, we parse the manifest ﬁles to get the
full list of the permissions used by each app version.
Our analysis is based on these datasets. The datasets con-
tain applications from a large number of developers across a
60
50
40
30
20
10
Dangerous
Signature
Normal
signatureOrSystem
i
s
n
o
s
s
m
r
e
P
i
f
o
r
e
b
m
u
N
0
3
4
5
6
8
7
API Level
9
10
14
15
Figure 1: Protection Levels, e.g. Normal, Danger-
ous, Signature, signatureOrSystem, evolving over
API levels.
broad range of categories. Thus, we believe that our datasets
reﬂect Android app permission variation and evolution in a
meaningful way.
4. PLATFORM PERMISSION EVOLUTION
We study the evolution of the Android platform permis-
sions through a ﬁne-grained, qualitative and quantitative
analysis of permission changes between API levels. As we
discussed in Section 2, the Android platform deﬁnes the list
of all permissions in the framework’s source code ﬁle An-
droidManifest.xml for each API level. Since the API level
directly reﬂects what permissions Android platform oﬀers,
we use the API level as the deﬁning indicator to compare
the Android permission changes.
4.1 The List of Permissions is Growing
As shown in Table 1, the number of Android permissions
in each API level is signiﬁcantly increasing. In early 2009,
API level 3 had 103 Android permissions, while there are
now 165 Android permissions in API level 15. The net gain
of 62 permissions was the result of adding 68 new permis-
sions and removing 6 existing ones. We present the permis-
sion evolution by protection level and functionality category.
In Figure 1, we show the permission evolution by protec-
tion levels (the levels were described in Section 2). We ob-
serve that the number of permissions in each protection level
is increasing. In addition, we ﬁnd that most of the increased
permissions across diﬀerent API levels belong to the protec-
tion levels Signature and signatureOrSystem, which indi-
cates that most of the introduced Android permissions are
only accessible to vendors, e.g., HTC, Motorola, Samsung,
and LG. This raises signiﬁcant security concerns for at least
two reasons: (1) users have no control over the pre-installed
apps, as the apps are already present when the phone is
purchased, and (2) a ﬂaw in a pre-installed app will aﬀect
all phones whose ﬁrmware contained that app. To illus-
trate the danger associated with pre-installed apps, consider
the notorious HTCLogger pre-installed app, in which users
of certain HTC phones were exposed to a signiﬁcant secu-
rity ﬂaw. HTCLogger was designed to log device information
for the development community in order to debug device-
speciﬁc issues; as such, the app collects account names, call
34
Dev
tools
36
-1
API
level
3
4
5
6
7
8
9
10
14
15
Overall
-1
Sys Accounts Cost Hardware Location Messages Network Personal Phone Storage Default
tools
Money Controls
Info
calls
35
+2,-2
+3
+7
+2
+1
+13
1
+4
+4
2
6
+1
+2,-1
+2
+1
+1
4
+1
+1
5
5
+2
+1
+1
+4
+1
+1
6
+2
-2
+5
+5
3
+1
+1
+1
+1
+2
+2
+7
+6, -1
+2
+12
+1
+29
Table 2: Permission changes per API level and permission categories.
Dangerous permission
READ HISTORY BOOKMARKS
WRITE HISTORY BOOKMARKS
READ USER DICTIONARY
READ PROFILE
WRITE PROFILE
READ SOCIAL STREAM
WRITE SOCIAL STREAM
WRITE EXTERNAL STORAGE
AUTHENTICATE ACCOUNTS
MANAGE ACCOUNTS
USE CREDENTIALS
NFC
USE SIP
Category
Personal Info
Personal Info
Personal Info
Personal Info
Personal Info
Personal Info
Personal Info
Storage
Accounts
Accounts
Accounts
Network
Network
CHANGE WIFI MULTICAST STATE System Tools
System Tools
CHANGE WIMAX STATE
Table 3: Added Dangerous permissions and their cat-
egories.
and SMS data, GPS location, etc. Unfortunately, the app
stored the collected information without encrypting it and
made it available to any application that had the Internet
permission [5].
In Table 2, we show the permission evolution by function-
ality categories: each column contains a category, each row
corresponds to an API level, and cell data indicates the num-
ber of permissions added and deleted in that API level; note
that, the ﬁrst row shows the number of permissions in each
category of API 3. We ﬁnd that the number of permissions
in nearly all the categories is increasing, with the excep-
tion of the Personal Information category, which yielded
a decrease in the number of permissions from API 8 to 9,
as shown in Table 2. After grouping the Android permis-
sions into the 11 functionality categories, we ﬁnd that the
Default, System_Tools and Development_Tools categories
contribute to most of the increases. Newly-added permis-
sions in these categories allow developers and applications
to take advantage of the evolving hardware capabilities and
features of the device. We now proceed to providing obser-
vations on permission evolution at a ﬁner-grained level.
4.2 Dangerous Group is Largest and Growing
From Figure 1, we can see that the Dangerous permission
level (the levels were introduced in Section 2.3) vastly out-
numbers all other permission types at all times. Note that
the Dangerous permission set is still growing, even though
it is already the largest. We further investigated the growth
of permissions in the Dangerous protection level.
As shown in Table 3, Dangerous permissions are added
in 5 out of 11 categories. Most of them are from personal
data-related categories, e.g, PERSONAL_INFO, STORAGE and
ACCOUNTS. We believe that this evolutionary trend shows
that the Android platform provides more channels to harvest
personal information from the device, which could increase
the privacy breach risk if these permissions may be abused
by Android apps.
4.3 Why are Permissions Added or Deleted?
To understand the rationale behind permission addition
and deletion, we studied the commit history (log messages
and source code diﬀs) of the Android developer code repos-
itory [10].
We found that, in most cases, permissions are added and
deleted to oﬀer access to more functionality oﬀered by the
device. Advances in the hardware strongly motivate such
permission evolution. For instance,
in API level 9, new
hardware technology for near-ﬁeld communication led to the
introduction of a permission to access NFC. In API level 15,
a permission to access WiMAX is introduced in order to
access 4G networks.
Permissions can also be deleted to accommodate new smart-
phone features when they are removed and replaced by new
permissions. For example, READ_OWNER_DATA was deleted af-
ter API level 8, but two new, related permissions, READ_
PROFILE and READ_SOCIAL_STREAM were added in level 14.
Interestingly, some permissions were added in the earlier
API levels while deleted later, as the associated functionali-
ties are made available to public without manifest-declared
permissions. For example, BACKUP_DATA was added in API
level 5, but deleted in level 8, because the backup/restore
function was made available to all apps by default.
Furthermore, most of the added permissions are permis-
sions categorized as Default, System_Tools and Develop-
ment_Tools, which are mostly used to access system level
information to function and debug the Android apps. How-
ever, as we discussed before, most of those permissions are
in the Signature and signatureOrSystem protection levels
that are only available to vendor developers in pre-installed
apps. This indicates that the added permissions facilitate
the development of pre-installed apps by vendor developers,
instead of third-party apps by third-party developers. The
extended aid to vendors is somewhat adverse, since third-
party developers are the dominant and active force in the
Android ecosystem.
4.4 No Tendency Toward Finer-grained Per-
missions
Finer-grained permissions in Android, e.g., separating the
advertisement code permissions from host app permissions [14],
have been advocated by security groups from both academia
35
(cid:3)
(cid:3)
(cid:11)(cid:23)(cid:18)(cid:8)
(cid:11)(cid:23)(cid:18)(cid:9)
(cid:11)(cid:23)(cid:18)(cid:10)
(cid:11)(cid:23)(cid:18)(cid:5)(cid:4)
(cid:24)(cid:14)(cid:11)(cid:13)(cid:29)(cid:22)(cid:28)(cid:21)(cid:14)(cid:24)(cid:29)(cid:13)(cid:11)(cid:26)(cid:11)
(cid:1)(cid:13)(cid:30)(cid:35)(cid:32)(cid:31)(cid:37)(cid:36)(cid:40)(cid:38)(cid:2)
(cid:25)(cid:14)(cid:21)(cid:13)(cid:29)(cid:25)(cid:20)(cid:25)
(cid:1)(cid:13)(cid:30)(cid:35)(cid:32)(cid:31)(cid:37)(cid:36)(cid:40)(cid:38)(cid:2)
(cid:24)(cid:14)(cid:11)(cid:13)(cid:29)(cid:23)(cid:17)(cid:22)(cid:21)(cid:14)(cid:29)(cid:25)(cid:26)(cid:11)(cid:26)(cid:14)
(cid:1)(cid:13)(cid:30)(cid:35)(cid:32)(cid:31)(cid:37)(cid:36)(cid:40)(cid:38)(cid:2)
(cid:11)(cid:23)(cid:18)(cid:5)(cid:6)
(cid:24)(cid:14)(cid:11)(cid:13)(cid:29)(cid:23)(cid:24)(cid:22)(cid:15)(cid:18)(cid:19)(cid:14)
(cid:24)(cid:14)(cid:11)(cid:13)(cid:29)(cid:25)(cid:22)(cid:12)(cid:18)(cid:11)(cid:19)(cid:29)(cid:25)(cid:26)(cid:24)(cid:14)(cid:11)(cid:20)
(cid:1)(cid:13)(cid:30)(cid:35)(cid:32)(cid:31)(cid:37)(cid:36)(cid:40)(cid:38)(cid:2)
(cid:1)(cid:13)(cid:30)(cid:35)(cid:32)(cid:31)(cid:37)(cid:36)(cid:40)(cid:38)(cid:2)
(cid:25)(cid:14)(cid:21)(cid:13)(cid:29)(cid:25)(cid:20)(cid:25)
(cid:1)(cid:13)(cid:30)(cid:35)(cid:32)(cid:31)(cid:37)(cid:36)(cid:40)(cid:38)(cid:2)
(cid:25)(cid:14)(cid:21)(cid:13)(cid:29)(cid:25)(cid:20)(cid:25)(cid:29)(cid:21)(cid:22)(cid:29)(cid:12)(cid:22)(cid:21)(cid:15)(cid:18)(cid:24)(cid:20)(cid:11)(cid:26)(cid:18)(cid:22)(cid:21)
(cid:24)(cid:14)(cid:11)(cid:13)(cid:29)(cid:23)(cid:17)(cid:22)(cid:21)(cid:14)(cid:29)(cid:25)(cid:26)(cid:11)(cid:26)(cid:14)
(cid:24)(cid:14)(cid:11)(cid:13)(cid:29)(cid:23)(cid:24)(cid:18)(cid:27)(cid:18)(cid:19)(cid:14)(cid:16)(cid:14)(cid:13)(cid:29)(cid:23)(cid:17)(cid:22)(cid:21)(cid:14)(cid:29)(cid:25)(cid:26)(cid:11)(cid:26)(cid:14)
(cid:1)(cid:25)(cid:33)(cid:32)(cid:35)(cid:30)(cid:39)(cid:40)(cid:37)(cid:31)(cid:22)(cid:37)(cid:25)(cid:41)(cid:38)(cid:39)(cid:31)(cid:34)(cid:2)
(cid:1)(cid:13)(cid:30)(cid:35)(cid:32)(cid:31)(cid:37)(cid:36)(cid:40)(cid:38)(cid:2)
(cid:1)(cid:25)(cid:33)(cid:32)(cid:35)(cid:30)(cid:39)(cid:40)(cid:37)(cid:31)(cid:22)(cid:37)(cid:25)(cid:41)(cid:38)(cid:39)(cid:31)(cid:34)(cid:2)
(cid:11)(cid:23)(cid:18)(cid:5)(cid:7)
Figure 2: Functionally-similar permissions added and deleted between API levels.
and industry [9, 12, 16]. The basis for ﬁner-grained permis-
sions is the principle of least privilege, i.e., giving apps the
minimum number of permissions necessary to provide a cer-
tain level of service.
We investigated whether Android permissions are becom-
ing more ﬁne-grained over time. After carefully examining
the Android permissions from API level 3 to 15, we observe
that the permission changes do not tend towards becoming
more ﬁne-grained. We found only one possible example of a
permission splitting in READ_OWNER_DATA. However, there is
no indication that the two new permissions were speciﬁcally
designed to replace the previous one, as shown in the ﬁrst ex-
ample of Figure 2. Overwhelmingly, the permission changes
indicate that the Android platform is giving more ﬂexibility
and control to the phone vendors. For example, as shown
in Figure 2, SEND_SMS and PHONE_STATE permissions exist
in both API level 10 and 14, but the newly added Android
permissions SEND_SMS_NO_CONFIRMATION and READ_PRIVI-
LEGED_PHONE_STATE gives the app a higher privileged access
to the device. Further, those higher privileged permissions
are signatureOrSystem permissions, which can only used
by vendor developers. In summary, we do not observe the
evolution of Android permissions that is trending to provide
more ﬁne-grained permissions.
5. THIRD-PARTY APPS
We now change our focus and investigate the variation and
evolution of permissions from the perspective of the driving
force of the Android ecosystem: the apps. We investigate
two types of apps, third-party apps and pre-installed apps;
we present and discuss the permission usage of Android apps
across diﬀerent versions and their evolution.
5.1 Permission Additions Dominate
We analyzed the permissions added and deleted in the
1,703 versions of the 237 third-party apps in our stable
dataset. In Figure 3(a) we show the distribution of permis-
sion changes; on the x-axis we show the number of permis-
sion changes: permission additions are marked positive, per-
mission deletions are marked negative. Note that the bulk
of the changes are to the right of the origin (0 changes means
no permission change), we can conclude that most apps add
permissions over time, with some apps adding more than
15 permissions. Only a small number of apps, about 10,
delete permissions, and the deletions are limited to at most
3 permissions.
We present the total numbers of permission addition and
deletion events in the stable dataset in Table 4: column
2 illustrates that the addition of permissions occurs much
more frequently than the deletion of permissions. To disam-
biguate between genuine permission additions and additions
induced by changes in the platform (e.g., as a result of added
Total
Induced by
changes
platform changes
Add
Delete
Total
857
183
1040
14 (1.63%)
5 (2.73%)
19 (1.82%)
Table 4:App permission changes in the stable dataset.
Android permission
ACCESS NETWORK STATE
WRITE EXTERNAL STORAGE
WAKE LOCK
GET ACCOUNTS
VIBRATE
In Top 20?
(cid:2)
(cid:2)
(cid:2)
×
(cid:2)
Table 5: Most frequently added permissions in the
stable dataset.