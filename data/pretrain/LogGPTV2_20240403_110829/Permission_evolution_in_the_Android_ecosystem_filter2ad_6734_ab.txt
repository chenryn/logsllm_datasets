### 3.2 Apps Permissions Dataset

#### Third-Party Apps
To analyze the evolution of permission usage in third-party apps, we selected a stable set of 237 popular apps with 1,703 versions, spanning at least three years. These apps were chosen based on their widespread use, consistent release schedules across API levels, and having more than one release per year. This dataset allows us to observe how app permissions evolve and how changes in the platform may influence these changes.

**Dataset Selection Process:**
1. **Initial Seeding:** We started with a dataset of 1,100 apps, comprising the top 50 free apps from each category [16].
2. **Historic Version Collection:** We crawled historic versions of these apps from online repositories and retrieved their latest versions from Google Play, resulting in an initial set of 1,420 apps with 4,857 versions.
3. **Filtering:** We then selected only those apps that had at least one version released each year between 2009 and 2012.
4. **Final Dataset:** After eliminating apps that did not meet our criteria, we obtained a stable dataset of 237 apps with 1,703 versions, ensuring each app's evolution spanned at least three years.

#### Pre-Installed Apps
Pre-installed apps are more challenging to obtain because they are not distributed online by vendors but come pre-loaded on phones. Additionally, the sets of pre-installed apps vary widely among different phone models and manufacturers. To collect pre-installed apps, we followed a different process:

1. **Firmware Collection:** We gathered firmwares from multiple phone vendors (HTC, Motorola, Samsung, and LG) from various online sources.
2. **Extraction:** We unpacked the firmwares and extracted the pre-installed apps.
3. **Dataset Composition:** In total, we collected 69 firmwares containing 346 pre-installed apps with 1,714 versions.

#### Permission Collection
To obtain the permission list for each app, we used the `aapt` tool to extract the `AndroidManifest.xml` file from each app version. This file contains the permissions requested by the app. After extracting the manifest files, we parsed them to compile the full list of permissions used by each app version.

Our analysis is based on these datasets, which include applications from a wide range of developers and categories. We believe these datasets provide a meaningful representation of Android app permission variation and evolution.

### 4. PLATFORM PERMISSION EVOLUTION

We study the evolution of Android platform permissions through a detailed, qualitative, and quantitative analysis of permission changes between API levels. As discussed in Section 2, the Android platform defines all permissions in the framework’s source code file `AndroidManifest.xml` for each API level. Since the API level directly reflects the permissions offered by the Android platform, we use it as the key indicator for comparing permission changes.

#### 4.1 The List of Permissions is Growing
As shown in Table 1, the number of Android permissions in each API level has significantly increased. In early 2009, API level 3 had 103 permissions, while API level 15 now has 165 permissions. This net gain of 62 permissions was the result of adding 68 new permissions and removing 6 existing ones. We present the permission evolution by protection level and functionality category.

**Permission Evolution by Protection Level:**
- Figure 1 shows the permission evolution by protection levels (described in Section 2). We observe that the number of permissions in each protection level is increasing.
- Most of the added permissions belong to the protection levels `Signature` and `signatureOrSystem`, indicating that many new permissions are accessible only to vendors like HTC, Motorola, Samsung, and LG. This raises significant security concerns:
  1. Users have no control over pre-installed apps, which are already present when the phone is purchased.
  2. A flaw in a pre-installed app will affect all phones whose firmware contained that app.

**Example:**
- The notorious `HTCLogger` pre-installed app exposed users of certain HTC phones to a significant security flaw. The app, designed to log device information for debugging, collected account names, call data, SMS data, GPS location, etc., without encryption, making the information available to any app with Internet permission [5].

#### 4.2 Dangerous Group is Largest and Growing
From Figure 1, we can see that the `Dangerous` permission level (introduced in Section 2.3) vastly outnumbers all other permission types at all times. Despite being the largest, the `Dangerous` permission set is still growing.

**Permission Growth in the Dangerous Level:**
- Table 3 shows that `Dangerous` permissions are added in 5 out of 11 categories, mostly related to personal data (e.g., `PERSONAL_INFO`, `STORAGE`, and `ACCOUNTS`).
- This trend suggests that the Android platform is providing more channels to harvest personal information, which could increase privacy breach risks if these permissions are misused by apps.

#### 4.3 Why are Permissions Added or Deleted?
To understand the rationale behind permission addition and deletion, we studied the commit history (log messages and source code diffs) of the Android developer code repository [10].

**Key Findings:**
- **Additions and Deletions for Functionality:** Permissions are often added and deleted to offer access to new or removed functionalities. For example, in API level 9, a new permission for near-field communication (NFC) was introduced due to hardware advancements. In API level 15, a permission for WiMAX was added to access 4G networks.
- **Functionality Replacements:** Some permissions are deleted when new features replace old ones. For instance, `READ_OWNER_DATA` was deleted after API level 8, but two new, related permissions, `READ_PROFILE` and `READ_SOCIAL_STREAM`, were added in level 14.
- **Public Access:** Some permissions added in earlier API levels were later deleted as the associated functionalities became available to all apps by default. For example, `BACKUP_DATA` was added in API level 5 but deleted in level 8 because backup/restore functionality was made available to all apps.
- **Vendor-Specific Permissions:** Many added permissions are categorized as `Default`, `System_Tools`, and `Development_Tools`, which are primarily used to access system-level information for app development and debugging. However, most of these permissions are in the `Signature` and `signatureOrSystem` protection levels, accessible only to vendor developers. This indicates that the added permissions facilitate the development of pre-installed apps by vendors rather than third-party apps.

#### 4.4 No Tendency Toward Finer-Grained Permissions
Finer-grained permissions, such as separating advertisement code permissions from host app permissions, have been advocated by security groups in both academia and industry [9, 12, 16]. The principle of least privilege, giving apps the minimum necessary permissions, underlies this approach.

**Observations:**
- After examining Android permissions from API level 3 to 15, we found that permission changes do not tend toward becoming more fine-grained.
- One possible example of permission splitting is `READ_OWNER_DATA`, but there is no indication that the new permissions were specifically designed to replace the previous one (Figure 2).
- Overall, the permission changes indicate that the Android platform is giving more flexibility and control to phone vendors. For example, the newly added `SEND_SMS_NO_CONFIRMATION` and `READ_PRIVILEGED_PHONE_STATE` permissions provide higher-privileged access to the device, and these permissions are `signatureOrSystem` permissions, accessible only to vendor developers.

### 5. THIRD-PARTY APPS

We now shift our focus to investigate the variation and evolution of permissions from the perspective of third-party and pre-installed apps. We analyze the permission usage of Android apps across different versions and their evolution.

#### 5.1 Permission Additions Dominate
We analyzed the permissions added and deleted in the 1,703 versions of the 237 third-party apps in our stable dataset. Figure 3(a) shows the distribution of permission changes, with the x-axis representing the number of permission changes (positive for additions, negative for deletions).

**Key Observations:**
- Most apps add permissions over time, with some adding more than 15 permissions.
- Only a small number of apps (about 10) delete permissions, and the deletions are limited to at most 3 permissions.

**Table 4: App Permission Changes in the Stable Dataset**
| Total | Induced by Platform Changes |
|-------|-----------------------------|
| Add   | 857 (1.63%)                 |
| Delete| 183 (2.73%)                 |

**Table 5: Most Frequently Added Permissions in the Stable Dataset**
| Android Permission             | In Top 20? |
|-------------------------------|------------|
| ACCESS_NETWORK_STATE           | ✓          |
| WRITE_EXTERNAL_STORAGE         | ✓          |
| WAKE_LOCK                      | ✓          |
| GET_ACCOUNTS                   | ×          |
| VIBRATE                        | ✓          |

These tables and figures provide a comprehensive view of the permission usage and evolution in third-party and pre-installed Android apps.