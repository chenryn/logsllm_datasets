# 第三章：储存与检索
![](../img/ch3.png)
> 建立秩序，省却搜寻
>
> —— 德国谚语
>
-------------------
[TOC]
一个数据库在最基础的层次上需要完成两件事情：当你把资料交给资料库时，它应当把资料储存起来；而后当你向资料库要资料时，它应当把资料返回给你。
在 [第二章](ch2.md) 中，我们讨论了资料模型和查询语言，即程式设计师将资料录入资料库的格式，以及再次要回资料的机制。在本章中我们会从资料库的视角来讨论同样的问题：资料库如何储存我们提供的资料，以及如何在我们需要时重新找到资料。
作为程式设计师，为什么要关心资料库内部储存与检索的机理？你可能不会去从头开始实现自己的储存引擎，但是你 **确实** 需要从许多可用的储存引擎中选择一个合适的。而且为了让储存引擎能在你的工作负载型别上执行良好，你也需要大致了解储存引擎在底层究竟做了什么。
特别需要注意，针对 **事务性** 负载最佳化的和针对 **分析性** 负载最佳化的储存引擎之间存在巨大差异。稍后我们将在 “[事务处理还是分析？](#事务处理还是分析？)” 一节中探讨这一区别，并在 “[列式储存](#列式储存)” 中讨论一系列针对分析性负载而最佳化的储存引擎。
但首先，我们将从你可能已经很熟悉的两大类资料库（传统的关系型资料库和很多所谓的 “NoSQL” 资料库）中使用的 **储存引擎** 来开始本章的内容。我们将研究两大类储存引擎：**日志结构（log-structured）** 的储存引擎，以及 **面向页面（page-oriented）** 的储存引擎（例如 B 树）。
## 驱动资料库的资料结构
世界上最简单的资料库可以用两个 Bash 函式实现：
```bash
#!/bin/bash
db_set () {
  echo "$1,$2" >> database
}
db_get () {
  grep "^$1," database | sed -e "s/^$1,//" | tail -n 1
}
```
这两个函式实现了键值储存的功能。执行 `db_set key value` 会将 **键（key）** 和 **值（value）** 储存在资料库中。键和值（几乎）可以是你喜欢的任何东西，例如，值可以是 JSON 文件。然后呼叫 `db_get key` 会查询与该键关联的最新值并将其返回。
麻雀虽小，五脏俱全：
```bash
$ db_set 123456 '{"name":"London","attractions":["Big Ben","London Eye"]}'
$ db_set 42 '{"name":"San Francisco","attractions":["Golden Gate Bridge"]}'
$ db_get 42
{"name":"San Francisco","attractions":["Golden Gate Bridge"]}
```
底层的储存格式非常简单：一个文字档案，每行包含一条逗号分隔的键值对（忽略转义问题的话，大致与 CSV 档案类似）。每次对 `db_set` 的呼叫都会向档案末尾追加记录，所以更新键的时候旧版本的值不会被覆盖 —— 因而查询最新值的时候，需要找到档案中键最后一次出现的位置（因此 `db_get` 中使用了 `tail -n 1` )。
```bash
$ db_set 42 '{"name":"San Francisco","attractions":["Exploratorium"]}'
$ db_get 42
{"name":"San Francisco","attractions":["Exploratorium"]}
$ cat database
123456,{"name":"London","attractions":["Big Ben","London Eye"]}
42,{"name":"San Francisco","attractions":["Golden Gate Bridge"]}
42,{"name":"San Francisco","attractions":["Exploratorium"]}
```
`db_set` 函式对于极其简单的场景其实有非常好的效能，因为在档案尾部追加写入通常是非常高效的。与 `db_set` 做的事情类似，许多资料库在内部使用了 **日志（log）**，也就是一个 **仅追加（append-only）** 的资料档案。真正的资料库有更多的问题需要处理（如并发控制，回收硬碟空间以避免日志无限增长，处理错误与部分写入的记录），但基本原理是一样的。日志极其有用，我们还将在本书的其它部分重复见到它好几次。
> **日志（log）** 这个词通常指应用日志：即应用程式输出的描述正在发生的事情的文字。本书在更普遍的意义下使用 **日志** 这一词：一个仅追加的记录序列。它可能压根就不是给人类看的，它可以使用二进位制格式，并仅能由其他程式读取。