tmp_buff array (the stack pointer is decreased by 4).
• The for loop then copies the received bytes in the
tmp_buff buﬀer that starts at address 0x105B.
• When the function terminates, the function deallocates
its local variables (i.e.
increases the stack pointer),
possibly restores the registers with pop instructions,
and executes the ret instruction, which reads the ad-
dress to return to from the top of the stack.
If an
attacker sends a packet formatted as shown in Fig-
ure 2(b), the data copy operation overﬂows the 4-bytes
buﬀer with 19-bytes. As a result, the return address
is overwritten with the address 0x2b58 and 13 more
bytes (used as parameters by the gadget) are written
into the stack. The ret instruction then fetches the
return address 0x2b58 instead of the original @ret ad-
dress. As a result, the gadget is executed.
6.2 Meta-gadget implementation
This section describes the implementation of the two meta-
gadgets. Note that a meta-gadget’s implementation actually
depends on the code present in a node. Two nodes conﬁg-
ured with diﬀerent code would, very likely, require diﬀerent
implementations.
Injection meta-gadget.
In order to inject one byte into memory we need to ﬁnd
a way to perform the operations that would be done by the
“ideal” gadget, described in Figure 3(a). This ideal gadget
would load the address and the value to write from the stack
and would use the ST instruction to perform the memory
write. However, this gadget was not present in the program
memory of our sensor. We therefore needed to chain several
gadgets together to create what we refer to as the Injection
meta-gadget.
We ﬁrst searched for a short gadget performing the store
operation. We found, in the mote’s code, a gadget, gadget3,
that stores the value of register 18 at the address speciﬁed
by register Z (the Z register is a 16 bit register alias for
registers r30 and r31). To achieve our goal, we needed to
pop the byte to inject into register r18 and the injection
address into registers r30 and r31. We did not ﬁnd any
gadget for this task. We therefore had to split this task
into two gadgets. The ﬁrst one, gadget1, loads the injection
destination address into registers r24 and r25, and loads the
byte to inject into r18. The second gadget, gadget2, copies
the registers r24, r25 into registers r30, r31 using the “move
word” instruction (movw ).
By chaining these three gadgets we implemented the meta-
gadget which injects one byte from the stack to an address
in data memory.
To execute this meta-gadget, the attacker must craft a
packet that, as a result of a buﬀer overﬂow, overwrites the
return address with the address of gadget1, and injects into
the stack the injection address, the malicious byte, the ad-
dresses of gadget2 and gadget3, and the value “0” (to reboot
the node). The payload of the injection packet is displayed
in Figure 2(b).
Reprogramming meta-gadget.
As described in Section 5.3.2, the Reprogramming meta-
gadget is required to copy a set of pages from data to pro-
gram memory. Ideally the ProgFlash.write function of the
bootloader, that uses the SPM instruction to copy pages
instr
comments
buﬀer
payload
instr.
address
Gadget 1: load future SP value from stack to r28,r29
f93d:
f93e:
f93f:
f940:
f941:
pop r29
pop r28
pop r17
pop r15
pop r14
Fake SP value
f942:
ret
next gadget
F SPH
F SPL
0
0
0
0xa9
0xfb
control ﬂow redirection
Gadget 2: modify SP, prepare registers
fba9 :
fbaa:
fbab:
fbac:
fbad:
in r0, 0x3f
cli
out 0x3e, r29
out 0x3f, r0
out 0x3d, r28
o
o
)
o
)
fbae:
fbaf:
fbb0:
fbb1:
fbb2:
fbb3:
. . .
fbb8:
fbb9:
fbba:
fbbb:
. . .
fbc0:
pop r29
pop r28
pop r17
pop r16
pop r15
pop r14
. . .
pop r9
pop r8
pop r7
pop r6
. . .
ret
Modify SP
Load FP
DESTM
now using fake stack
F PH
F PL
A3
A2
A1
A0
. . .
I3
I2
I1
I0
. . .
0x4d
0xfb
)
o
next gadget
loop counter
control ﬂow redirection
Gadget 3: reprogramming
fb4d:
fb4e:
fb4f:
fb51:
fb53:
. . .
fb7c:
. . .
fb92:
. . .
fbc0:
ldi r24, 0x03
movw r30, r14
sts 0x005B, r16
sts 0x0068, r24
spm
. . .
spm
. . .
spm
. . .
ret
o
o
Page write @
Page erase
write bytes to ﬂash
ﬂash page
malware address
control ﬂow redirection
Just installed Malware
8000:
8002:
. . .
sbi 0x1a, 2
sbi 0x1a, 1
. . .
from the data to the program memory, could be used. How-
ever, this function is inlined within the bootloader code. Its
instructions are mixed with other instructions that, for ex-
ample, load pages from external ﬂash memory, check the
integrity of the pages and so on. As a result, this function
cannot be called independently.
We therefore built a meta-gadget that uses selected gad-
gets belonging to the bootloader. The implementation of
this meta-gadget is partially shown in Figure 4. Due to the
size of each gadget we only display the instructions that are
important for the understanding of the meta-gadget. We
assume in the following description that a fake stack was in-
jected at the address ADDRF SP of data memory and that
the size of the malware to be injected is smaller than one
page.
If the malware is larger than one page, this meta-
gadget has to be executed several times.
The details of what this fake stack contains and how it is
injected in the data memory will be covered in Section 6.3.
Our Reprogramming meta-gadget is composed of three
gadgets. The ﬁrst gadget, gadget1, loads the address of the
fake stack pointer (FSP) in r28 and r29 from the current
stack. It then executes some instructions, that are not use-
ful for our purpose, and calls the second gadget, gadget2.
Gadget2 ﬁrst sets the stack pointer to the address of the
fake stack. This is achieved by setting the stack pointer (IO
registers 0x3d and 0x3e) with the value of registers r28 and
r29 (previously loaded with the FSP address). From then
on, the fake stack is used. Gadget2 then loads the Frame
Pointer (FP) into r28 and 29, and the destination address of
the malware in program memory, DESTM , into r14, r15, r16
and r17. It then sets registers r6, r7, r8, r9 to zero (in order
to exit a loop in which this code is embedded) and jumps
to the third gadget. Gadget3 is the gadget that performs
the copy of a page from data to program memory. It loads
the destination address, DESTM , into r30, r31 and loads
the registers r14, r15 and r16 into the register located at ad-
dress 0x005B. It then erases one page at address DESTM ,
copies the malware into a hardware temporary buﬀer, before
ﬂashing it at address DESTM . This gadget ﬁnally returns
either to the address of the newly installed malware (and
therefore executes it) or to the address 0 (the sensor then
reboots).
Automating the meta-gadget implementation.
The actual implementation of a given meta-gadget de-
pends on the code that is present in the sensor. For example,
if the source code, the compiler version, or the compiler ﬂags
change, the generated binary might be very diﬀerent. As a
result, the gadgets might be located in diﬀerent addresses or
might not be present at all. In order to facilitate the imple-
mentation of meta-gadgets, we built a static binary analyzer
uint8 t payload[ ]={
//
...
0x3d, 0xf9
// Address of gadget1
FSP H, FSP L, // Fake Stack Pointer
0x00,0x00,0x00, // padding to r17,r15,r14
0xa9,0xfb
// once Gadget 2 is executed the fake stack is used
};
// Address of Gadget 2
Figure 4: Reprogramming meta-gadget. The greyed
area displays the fake stack.
Figure 5: Payload of the Reprogramming packet.
application
TinyPEDS
AntiTheft Node
MultihopOscilloscope
AntiTheft Root
MViz
BaseStation
RadioCountToLeds
Blink
SharedSourceDemo
Null
code size (KB)
43.8
27
26.9
25.5
25.6
13.9
11.2
2.2
3
0.6
payload len. (B)
19
17
17
17
17
21
21
21
21
none
Figure 6: Length of the shortest payload found
by our automated tool to implement the Injection
meta-gadget.
based on the Avrora [28] simulator. It starts by collecting all
the available gadgets present in the binary code. It then uses
various strategies to obtain diﬀerent chains of gadgets that
implement the desired meta-gadget. The analyzer outputs
the payload corresponding to each implementation.
The quality of a meta-gadget does not depend on the num-
ber of instructions it contains nor on the number of gadgets
used. The most important criteria is the payload size i.e.
the number of bytes that need to be pushed into the stack.
In fact, the larger the payload the lower the chance of being
able to exploit it. There are actually two factors that impact
the success of a gadget chain.
• The depth of the stack: if the memory space between
the beginning of the exploited buﬀer in the stack and
the end of the physical memory (i.e. address 0x1100) is
smaller than the size of the malicious packet payload,
the injection cannot obviously take place.
• Maximum packet length: since TinyOS maximum pa-
cket length is set, by default, to 28 bytes, it is impos-
sible to inject a payload larger than 28 bytes. Gadgets
that require payload larger than 28 bytes cannot be
invoked.
Figure 6 shows the length of Injection meta-gadget, found
by the automated tool, for diﬀerent test and demonstration
applications provided by TinyOS 2.0.2. TinyPEDS is an
application developed for the European project Ubisec&Sens
[29].
In our experiments, we used a modiﬁed version of the Ra-
dioCountToLeds application 3. Our analyser found three dif-
ferent implementations for the Injection meta-gadget. These
implementations use packets of respective size 17, 21 and 27
bytes. We chose the implementation with the 17-byte pay-
load, which we were able to reduce to 15 bytes with some
manual optimizations.
The Reprogramming meta-gadget depends only on the
bootloader code.
It is therefore independent of the appli-
cation loaded in the sensor. The meta-gadget presented in
ﬁgure 4 can therefore be used with any application as long
as the same bootloader is used.
6.3 Building and injecting the fake stack
As explained in Section 5.3.2, our attack requires to inject
a fake stack into the sensor data memory. We detail the
3The RadioCountToLeds has been modiﬁed in order to in-
troduce a buﬀer overﬂow vulnerability.
structure of the fake stack that we used in our example and
explain how it was injected into the data memory.
Building the fake stack.
The fake stack is used by the Reprogramming meta-gadget.
As shown by Figure 4, it must contain, among other things,
the address of the fake frame pointer, the destination address
of the malware in program memory (DESTM ), 4 zeros, and
again the address DESTM (to execute the malware when
the Reprogramming meta-gadget returns). The complete
structure of the fake stack is displayed in Figure 7. The size
of this fake stack is 305 bytes, out of which only 16 bytes
and the malware binary code, of size sizeM , need to be ini-
tialized. In our experiment, our goal was to inject the fake
stack at address 0x400 and ﬂash the malware destination at
address 0x8000.
Injecting the Fake Stack.
Once the fake stack is designed it must be injected at ad-
dress F SP = 0x400 of data memory. The memory area
around this address is unused and not initialized nor modi-
ﬁed when the sensor reboots. It therefore provides a space
where bytes can be stored persistently across reboots.
Since the packet size that a sensor can process is lim-
ited, we needed to inject it byte-by-byte as described in Sec-
tion 5.3.2. The main idea is to split the fake stack into pieces
of one byte and inject each of them independently using the
Injection meta-gadget described in Section 6.2.
Each byte Bi is injected at address F SP +i by sending the
specially-crafted packet displayed in Figure 2(b). When the
packet is received it overwrites the return address with the
address of the Injection meta-gadget (i.e. address 0x56b0 ).
The Injection meta-gadget is then executed and copies byte
Bi into the address F SP +i. When the meta-gadget returns
it reboots the sensor. The whole fake stack is injected by
sending 16 + sizeM packets, where sizeM is the size of the