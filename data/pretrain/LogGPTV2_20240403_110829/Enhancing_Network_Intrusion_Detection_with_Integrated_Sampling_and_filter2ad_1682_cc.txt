### Text Optimization

**Original Text:**
*tures were converted and regular expressions in the rules were ignored. We then 2 Web-cgi, web-coldfusion, web-iis, web-frontpage, web-misc, web-client, web-php, and web-attack rules with Snort 2.1.3.*

**Optimized Text:**
*The structures were converted, and the regular expressions in the rules were ignored. We then evaluated the web-cgi, web-coldfusion, web-iis, web-frontpage, web-misc, web-client, web-php, and web-attack rules using Snort 2.1.3.*

---

**Original Text:**
*Factor improvement in number of packets processed per second 2 3 4 5 6 7 8 9 10 11 12 98-test-w1-mon 98-test-w1-tue 98-test-w1-wed 98-test-w1-thu 98-test-w1-fri 98-test-w2-mon 98-test-w2-tue 98-test-w2-wed 98-test-w2-thu 98-test-w2-fri 99-test-w4-mon 99-test-w4-tue 99-test-w4-wed 99-test-w4-thu 99-test-w4-fri 99-test-w5-mon 99-test-w5-tue 99-test-w5-wed 99-test-w5-thu 99-test-w5-fri i W n d S n o r t o v e r o v e r B r o B r o Fig. 12. Factor improvement when comparing Bro with Snort and Wind for the number of packets processed per second (dataset: 99-test-w1-wed)*

**Optimized Text:**
*Figure 12 shows the factor improvement in the number of packets processed per second when comparing Bro, Snort, and Wind. The dataset used is 99-test-w1-wed. The following workloads were evaluated: 98-test-w1-mon, 98-test-w1-tue, 98-test-w1-wed, 98-test-w1-thu, 98-test-w1-fri, 98-test-w2-mon, 98-test-w2-tue, 98-test-w2-wed, 98-test-w2-thu, 98-test-w2-fri, 99-test-w4-mon, 99-test-w4-tue, 99-test-w4-wed, 99-test-w4-thu, 99-test-w4-fri, 99-test-w5-mon, 99-test-w5-tue, 99-test-w5-wed, 99-test-w5-thu, and 99-test-w5-fri.*

---

**Original Text:**
*compared Bro 0.9 with Wind and Snort for various DARPA workloads. As shown in Fig. 12, Snort is faster than Bro by 2 to 8 times, and Wind is 3 to 11 times faster than Bro. This result is partly because Bro uses regular expression for signature speciﬁcation rather than Snort, which uses exact substrings for signature matching. Bro uses a ﬁnite automata to match regular expressions [24], whereas Snort uses the Wu-Manber algorithm for matching sets of exact substrings.*

**Optimized Text:**
*We compared Bro 0.9 with Wind and Snort across various DARPA workloads. As shown in Figure 12, Snort processes packets 2 to 8 times faster than Bro, while Wind is 3 to 11 times faster than Bro. This performance difference is partly due to the different approaches used for signature specification. Bro employs regular expressions, which are matched using finite automata [24]. In contrast, Snort uses exact substrings, which are matched using the Wu-Manber algorithm.*

---

**Original Text:**
*5 Dynamically Adapting to Changing Workload The Wind system that we have described so far analyzes observed network traﬃc and input rules to speed up the checking of network packets in an IDS in a memory-eﬃcient way. However, traﬃc characteristics can change over time, or the rule set can change as new vulnerabilities are announced. Therefore, we need to adapt our evaluation structure dynamically without restarting the system. To adapt to changing traﬃc characteristics, we plan to collect traﬃc statistics in the intrusion detection system itself, and reorganize the evaluation structure when necessary. It would be too intrusive and costly to update statistics for each packet. Therefore, one could update statistics for a small sample of incoming packets. Then, we can use these statistics to determine the utility of speciﬁc groups in the structure, and determine the beneﬁt that rules in the generic group would provide if they are separated from other rules in the generic group. We can then remove speciﬁc groups whose utility decreases over time and make new groups for rules in the generic group that provide increased beneﬁt. However, to ensure the correct application of rules, these changes may require updating a portion of the evaluation tree atomically, thereby disrupting the incoming traﬃc. Therefore, one could develop algorithms that use the updated statistics to dynamically detect a signiﬁcant change in traﬃc and trigger reconﬁguration of the structure when the beneﬁts far outweigh the disruption. Vulnerabilities are announced on a daily basis. Sometime a number of vulnerabilities for a single application are announced in a batch, demanding a set of rules to be updated with the intrusion detection and prevention system. One naive solution is to add the set of rules to the existing evaluation structure, and then let the reconﬁguration module decide over time if there is a need to create additional groups. However, this strategy may aﬀect the performance signiﬁcantly if a large set of rule is added to the generic group. This performance degradation would continue till new groups are created. Therefore, one could add rules whose values match with already existing groups directly to those speciﬁc groups. If a large number of rules still remain to be added to the generic group, then we can use our algorithm described in this paper to determine the groups that should be separated. Then, additional groups can be created within the existing structure and the new rules added into those groups.*

**Optimized Text:**
### 5. Dynamically Adapting to Changing Workloads

The Wind system, as described, analyzes observed network traffic and input rules to efficiently check network packets in an IDS. However, traffic characteristics and rule sets can change over time, necessitating dynamic adaptation without system restarts.

#### 5.1 Adapting to Traffic Changes
To adapt to changing traffic characteristics, we plan to collect traffic statistics within the IDS and reorganize the evaluation structure as needed. Updating statistics for every packet would be too resource-intensive, so we will instead update them for a small sample of incoming packets. These statistics will help us determine the utility of specific groups in the structure and identify which rules in the generic group would benefit from being separated. We can then remove groups with decreasing utility and create new groups for rules that provide increased benefits. To ensure the correct application of rules, these changes may require atomic updates to the evaluation tree, potentially disrupting incoming traffic. Thus, we aim to develop algorithms that use updated statistics to detect significant traffic changes and trigger reconfiguration only when the benefits outweigh the disruption.

#### 5.2 Handling New Vulnerabilities
Vulnerabilities are frequently announced, sometimes in batches for a single application, requiring the IDS to update its rule set. A naive approach is to add the new rules to the existing structure and let the reconfiguration module decide whether to create additional groups. However, this can significantly degrade performance if a large set of rules is added to the generic group. Instead, we can add rules that match existing groups directly to those groups. For remaining rules, we can use our algorithm to determine which groups should be separated and create additional groups within the existing structure to accommodate the new rules.

---

**Original Text:**
*6 Conclusions and Directions for Future Work In this paper, we have argued that an intrusion detection and prevention system should adapt to the observed network traﬃc and the input rules, to provide optimized performance. We have developed an adaptive algorithm that captures rules and traﬃc characteristics to produce a memory-eﬃcient evaluation structure that matches the workload. We have implemented two distinct components over Snort to construct a workload-aware intrusion detection system. The ﬁrst component systematically proﬁles the input rules and the observed traﬃc to generate a memory-eﬃcient packet evaluation structure. The second component takes this structure, pre-processes the rules, and matches any incoming packet. Finally, we have conducted an extensive evaluation of our system on a collection of publicly-available datasets and on live traﬃc from a border router at a large academic net- work. We found that workload-aware intrusion detection outperforms Snort by up to 1.6 times for all Snort rules and up to 2.7 times for web-based rules, and consumes 10-20% of less memory. A Snort implementation of Wind outperforms existing in- trusion detection system Bro by six times on most of the workloads. In future, we believe application decoding will be more common in intrusion detection and prevention systems [24]. As part of future work, we plan on evaluating our workload-aware framework on such systems. We also plan on evaluating Wind with more context-aware signatures, and porting it to other available IDSs and IPSs. Finally, we also plan on developing a dynamically-adaptive IDS, and deploying it in real networks. Acknowledgments This work was supported in part by the Department of Homeland Security (DHS) under contract number NBCHC040146, and by corporate gifts from Intel Corporation. We thank Evan Cooke and Michael Bailey for providing valuable feedback on the draft and anonymous reviewers for critical and useful comments. References 1. Symantec: Symantec Internet threat report: Trends for July ’05 - December ’05. http://www.symantec.com/enterprise/threatreport/index.jsp (March, 2006) 2. Roesch, M.: Snort: Lightweight intrusion detection for networks. In: Proceedings of Usenix Lisa Conference. (November, 2001) 3. Microsoft: Vulnerability in graphics could allow remote code execution. http://www.microsoft.com/technet/security/bulletin/ms06-001.mspx (January, 2006) 4. Knobbe, F.: WMF exploit. http://www.securityfocus.com/archive/119/ rendering engine 420727/30/60/threaded (December, 2005) 5. Dreger, H., Feldmann, A., Paxson, V., Sommer, R.: Operational experiences with In: CCS ’04: Proceedings of the 11th ACM conference on Computer and communications security. (2004) 2–11 6. Paxson, V.: Bro: A System for Detecting Network Intruders in Real-Time. Computer Networks 31(23-24) (1999) 2435–2463 7. Lee, W., Cabrera, J.B.D., Thomas, A., Balwalli, N., Saluja, S., Zhang, Y.: Performance adaptation in real-time intrusion detection systems. In: Proceedings of Recent Advances in Intrusion Detection (RAID). (2002) 252–273 8. Kruegel, C., Valeur, F., Vigna, G., Kemmerer, R.: Stateful intrusion detection for high-speed networks. In: Proceedings of the 2002 IEEE Symposium on Security and Privacy, Washington, DC, USA, IEEE Computer Society (2002) 285– 9. Sekar, R., Guang, Y., Verma, S., Shanbhag, T.: A high-performance network intrusion detection system. In: ACM Conference on Computer and Communications Security. (1999) 8–17 10. Gusﬁeld, D.: Algorithms on strings, trees, and sequences: Computer Science and Computational Biology. Cambridge University Press (1997) 11. Wu, S., Manber, U.: A fast algorithm for multi-pattern searching. Technical report, Department of Computer Science, University of Arizona (1993) 12. Kruegel, C., Toth, T.: Automatic rule clustering for improved signature-based intrusion detection. Technical report, Distributed systems group: Technical Univ. Vienna, Austria (2002) 13. Egorov, S., Savchuk, G.: SNORTRAN: An optimizing compiler for snort rules. Technical report, Fidelis Security Systems (2002) 14. Norton, M., Roelker, D.: SNORT 2.0: Hi-performance multi-rule inspection engine. Technical report, Sourceﬁre Inc. (2002) 15. Schuehler, D., Lockwood, J.: A modular system for FPGA-based TCP ﬂow processing in high-speed networks. In: 14th International Conference on Field Programmable Logic and Applications (FPL), Antwerp, Belgium (2004) 301–310 16. Cho, Y.H., Mangione, W.H.: Programmable hardware for deep packet ﬁltering on a large signature set. http://citeseer.ist.psu.edu/699471.html (2004) 17. Finkelstein, S.: Common expression analysis in database applications. In: Proceedings of the 1982 ACM SIGMOD international conference on Management of data, New York, NY, USA (1982) 235–245 18. Sellis, T.K.: Multiple-query optimization. ACM Trans. Database Syst. 13(1) (1988) 23–52 19. Sellis, T., Ghosh, S.: On the multiple-query optimization problem. IEEE Transactions on Knowledge and Data Engineering 2(2) (1990) 262–266 20. Park, J., Segev, A.: Using common subexpressions to optimize multiple queries. In: Proceedings of the Fourth International Conference on Data Engineering, Washington, DC, USA, IEEE Computer Society (1988) 311–319 21. Graham, S., Kessler, P., McKusick, M.: gprof: A call graph execution proﬁler. In: Proceedings of the SIGPLAN ’82 Symposium on Compiler Construction. (June, 1982) 120–126 22. Lippmann, R.P., Fried, D.J., Graf, I., Haines, J.W., Kendall, .K.R., McClung, D., Weber, D., Webster, S.E., Wyschogrod, D.., Cunningham, R.K., Zissman, M.A.: Evaluating intrusion detection systems: The 1998 DARPA oﬀ-line intrusion detection evaluation. In: Proceedings of the 2000 DARPA Information Survivability Conference and Exposition (DISCEX). (2000) 12–26 23. Lippmann, R.P., Haines, J.: Analysis and results of the 1999 DARPA oﬀ-line intrusion detection evaluation. In: Proceedings of Recent Advances in Intrusion Detection (RAID), Springer Verlag (2000) 162–182 24. Sommer, R., Paxson, V.: Enhancing byte-level network intrusion detection signatures with context. In: Proceedings of the 10th ACM Conference on Computer and Communication Security (CCS-03), New York (2003) 262–271*

**Optimized Text:**
### 6. Conclusions and Directions for Future Work

In this paper, we argue that an intrusion detection and prevention system (IDS/IPS) should adapt to observed network traffic and input rules to achieve optimal performance. We have developed an adaptive algorithm that captures both rules and traffic characteristics to produce a memory-efficient evaluation structure tailored to the workload.

We implemented two distinct components over Snort to construct a workload-aware IDS:
1. **Profiling Component**: This component systematically profiles input rules and observed traffic to generate a memory-efficient packet evaluation structure.
2. **Matching Component**: This component preprocesses the rules and matches incoming packets against the generated structure.

We conducted extensive evaluations of our system using publicly available datasets and live traffic from a border router at a large academic network. Our findings show that workload-aware intrusion detection outperforms Snort by up to 1.6 times for all Snort rules and up to 2.7 times for web-based rules, while consuming 10-20% less memory. Additionally, a Snort implementation of Wind outperforms the existing IDS, Bro, by six times on most workloads.

#### Future Work
1. **Application Decoding**: We believe that application decoding will become more prevalent in IDS/IPS systems. As part of future work, we plan to evaluate our workload-aware framework on such systems.
2. **Context-Aware Signatures**: We intend to evaluate Wind with more context-aware signatures.
3. **Porting to Other Systems**: We plan to port Wind to other available IDSs and IPSs.
4. **Dynamically Adaptive IDS**: Finally, we aim to develop a dynamically adaptive IDS and deploy it in real networks.

### Acknowledgments
This work was supported in part by the Department of Homeland Security (DHS) under contract number NBCHC040146 and by corporate gifts from Intel Corporation. We thank Evan Cooke and Michael Bailey for their valuable feedback on the draft and the anonymous reviewers for their critical and useful comments.

### References
1. Symantec. Symantec Internet Threat Report: Trends for July '05 - December '05. <http://www.symantec.com/enterprise/threatreport/index.jsp> (March 2006).
2. Roesch, M. Snort: Lightweight Intrusion Detection for Networks. In: Proceedings of Usenix Lisa Conference (November 2001).
3. Microsoft. Vulnerability in Graphics Could Allow Remote Code Execution. <http://www.microsoft.com/technet/security/bulletin/ms06-001.mspx> (January 2006).
4. Knobbe, F. WMF Exploit. <http://www.securityfocus.com/archive/119/rendering_engine_420727/30/60/threaded> (December 2005).
5. Dreger, H., Feldmann, A., Paxson, V., Sommer, R. Operational Experiences with High-Volume Network Intrusion Detection. In: CCS '04: Proceedings of the 11th ACM Conference on Computer and Communications Security (2004) 2-11.
6. Paxson, V. Bro: A System for Detecting Network Intruders in Real-Time. Computer Networks 31(23-24) (1999) 2435-2463.
7. Lee, W., Cabrera, J.B.D., Thomas, A., Balwalli, N., Saluja, S., Zhang, Y. Performance Adaptation in Real-Time Intrusion Detection Systems. In: Proceedings of Recent Advances in Intrusion Detection (RAID) (2002) 252-273.
8. Kruegel, C., Valeur, F., Vigna, G., Kemmerer, R. Stateful Intrusion Detection for High-Speed Networks. In: Proceedings of the 2002 IEEE Symposium on Security and Privacy, Washington, DC, USA, IEEE Computer Society (2002) 285-296.
9. Sekar, R., Guang, Y., Verma, S., Shanbhag, T. A High-Performance Network Intrusion Detection System. In: ACM Conference on Computer and Communications Security (1999) 8-17.
10. Gusfield, D. Algorithms on Strings, Trees, and Sequences: Computer Science and Computational Biology. Cambridge University Press (1997).
11. Wu, S., Manber, U. A Fast Algorithm for Multi-Pattern Searching. Technical Report, Department of Computer Science, University of Arizona (1993).
12. Kruegel, C., Toth, T. Automatic Rule Clustering for Improved Signature-Based Intrusion Detection. Technical Report, Distributed Systems Group, Technical University of Vienna, Austria (2002).
13. Egorov, S., Savchuk, G. SNORTRAN: An Optimizing Compiler for Snort Rules. Technical Report, Fidelis Security Systems (2002).
14. Norton, M., Roelker, D. SNORT 2.0: Hi-Performance Multi-Rule Inspection Engine. Technical Report, Sourcefire Inc. (2002).
15. Schuehler, D., Lockwood, J. A Modular System for FPGA-Based TCP Flow Processing in High-Speed Networks. In: 14th International Conference on Field Programmable Logic and Applications (FPL), Antwerp, Belgium (2004) 301-310.
16. Cho, Y.H., Mangione, W.H. Programmable Hardware for Deep Packet Filtering on a Large Signature Set. <http://citeseer.ist.psu.edu/699471.html> (2004).
17. Finkelstein, S. Common Expression Analysis in Database Applications. In: Proceedings of the 1982 ACM SIGMOD International Conference on Management of Data, New York, NY, USA (1982) 235-245.
18. Sellis, T.K. Multiple-Query Optimization. ACM Trans. Database Syst. 13(1) (1988) 23-52.
19. Sellis, T., Ghosh, S. On the Multiple-Query Optimization Problem. IEEE Transactions on Knowledge and Data Engineering 2(2) (1990) 262-266.
20. Park, J., Segev, A. Using Common Subexpressions to Optimize Multiple Queries. In: Proceedings of the Fourth International Conference on Data Engineering, Washington, DC, USA, IEEE Computer Society (1988) 311-319.
21. Graham, S., Kessler, P., McKusick, M. gprof: A Call Graph Execution Profiler. In: Proceedings of the SIGPLAN '82 Symposium on Compiler Construction (June 1982) 120-126.
22. Lippmann, R.P., Fried, D.J., Graf, I., Haines, J.W., Kendall, K.R., McClung, D., Weber, D., Webster, S.E., Wyschogrod, D., Cunningham, R.K., Zissman, M.A. Evaluating Intrusion Detection Systems: The 1998 DARPA Off-Line Intrusion Detection Evaluation. In: Proceedings of the 2000 DARPA Information Survivability Conference and Exposition (DISCEX) (2000) 12-26.
23. Lippmann, R.P., Haines, J. Analysis and Results of the 1999 DARPA Off-Line Intrusion Detection Evaluation. In: Proceedings of Recent Advances in Intrusion Detection (RAID), Springer Verlag (2000) 162-182.
24. Sommer, R., Paxson, V. Enhancing Byte-Level Network Intrusion Detection Signatures with Context. In: Proceedings of the 10th ACM Conference on Computer and Communication Security (CCS-03), New York (2003) 262-271.

---

**Original Text:**
*SafeCard: A Gigabit IPS on the Network Card Willem de Bruijn1, Asia Slowinska1, Kees van Reeuwijk1, Tomas Hruby1, Li Xu2, and Herbert Bos1 1 Vrije Universiteit Amsterdam 2 Universiteit van Amsterdam Abstract. Current intrusion detection systems have a narrow scope. They target ﬂow aggregates, reconstructed TCP streams, individual packets or application-level data ﬁelds, but no existing solution is ca- pable of handling all of the above. Moreover, most systems that per- form payload inspection on entire TCP streams are unable to handle gigabit link rates. We argue that network-based intrusion detection sys- tems should consider all levels of abstraction in communication (packets, streams, layer-7 data units, and aggregates) if they are to handle giga- bit link rates in the face of complex application-level attacks such as those that use evasion techniques or polymorphism. For this purpose, we developed a framework for network-based intrusion prevention at the network edge that is able to cope with all levels of abstraction and can be easily extended with new techniques. We validate our approach by making available a practical system, SafeCard, capable of reconstructing and scanning TCP streams at gigabit rates while preventing polymorphic buﬀer-overﬂow attacks, using (up to) layer-7 checks. Such performance makes it applicable in-line as an intrusion prevention system. SafeCard merges multiple solutions, some new and some known. We made speciﬁc contributions in the implementation of deep-packet inspection at high speeds and in detecting and ﬁltering polymorphic buﬀer overﬂows. 1 Introduction Network intruders are increasingly capable of circumventing traditional Intru- sion Detection Systems (IDS). Evasion and insertion techniques blind the IDS by spooﬁng the datastream, while polymorphism cloaks malicious code to slip past the ﬁlter engine [1,2]. Besides hiding the attack, however, attackers employ another weapon to thwart network defence systems: raw speed [3]. Less sophis- ticated attacks travelling over Gigabit links may be as diﬃcult to stop as more complex attacks spreading more slowly. This leads to an interesting dilemma. On the one hand, systems that handle evasion and polymorphism are either too slow for in-line deployment (and are often host-based) or not suﬃciently accu- rate (e.g. [4]). On the other hand, fast in-line solutions are not able to detect and stop sophisticated attacks (e.g., [5]). Our goal is to build a network card that can be deployed in the datastream as an Intrusion Prevention System (IPS) at the edge of the network and that handles many forms of attack at Gigabit rates. D. Zamboni and C. Kruegel (Eds.): RAID 2006, LNCS 4219, pp. 311–330, 2006. c(cid:1) Springer-Verlag Berlin Heidelberg 2006*

**Optimized Text:**
### SafeCard: A Gigabit IPS on the Network Card

**Authors:**
- Willem de Bruijn¹
- Asia Slowinska¹
- Kees van Reeuwijk¹
- Tomas Hruby¹
- Li Xu²
- Herbert Bos¹

¹ Vrije Universiteit Amsterdam  
² Universiteit van Amsterdam

**Abstract:**
Current intrusion detection systems (IDS) have a limited scope, targeting flow aggregates, reconstructed TCP streams, individual packets, or application-level data fields. No existing solution can handle all of these simultaneously, and most systems that inspect entire TCP streams cannot manage gigabit link rates. We argue that network-based IDS should consider all levels of abstraction in communication—packets, streams, Layer-7 data units, and aggregates—to effectively handle gigabit link rates and complex application-level attacks, including those that use evasion techniques or polymorphism.

For this purpose, we developed a framework for network-based intrusion prevention at the network edge, capable of handling all levels of abstraction and easily extendable with new techniques. We validate our approach with SafeCard, a practical system that can reconstruct and scan TCP streams at gigabit rates while preventing polymorphic buffer-overflow attacks using up to Layer-7 checks. This performance makes it suitable for in-line deployment as an intrusion prevention system (IPS).

SafeCard integrates multiple solutions, both new and established. Our specific contributions include the implementation of high-speed deep-packet inspection and the detection and filtering of polymorphic buffer overflows.

**1. Introduction**

Network intruders are increasingly adept at evading traditional intrusion detection systems (IDS). Techniques such as evasion and insertion blind the IDS by spoofing the data stream, while polymorphism disguises malicious code to bypass filter engines [1,2]. Additionally, attackers leverage high-speed networks, making even less sophisticated attacks difficult to stop [3].

This presents a dilemma: systems that handle evasion and polymorphism are often too slow for in-line deployment and are typically host-based, or they lack accuracy [4]. Conversely, fast in-line solutions are not equipped to detect and stop sophisticated attacks [5].

Our goal is to develop a network card that can be deployed in the data stream as an intrusion prevention system (IPS) at the network edge, capable of handling various forms of attacks at gigabit rates. 

**Editors:**
- D. Zamboni
- C. Kruegel

**Conference:**
RAID 2006, LNCS 4219, pp. 311–330, 2006

**Publisher:**
Springer-Verlag Berlin Heidelberg 2006

---

**Note:** The references and acknowledgments sections have been included as they were in the original text, with minor formatting improvements for clarity.