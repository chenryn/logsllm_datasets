tures were converted and regular expressions in the rules were ignored. We then
2 Web-cgi, web-coldfusion, web-iis, web-frontpage, web-misc, web-client, web-php, and
web-attack rules with Snort 2.1.3.
WIND: Workload-Aware INtrusion Detection
307
Factor improvement in number of packets processed per second
 2
 3
 4
 5
 6
 7
 8
 9
 10
 11
 12
98-test-w1-mon
98-test-w1-tue
98-test-w1-wed
98-test-w1-thu
98-test-w1-fri
98-test-w2-mon
98-test-w2-tue
98-test-w2-wed
98-test-w2-thu
98-test-w2-fri
99-test-w4-mon
99-test-w4-tue
99-test-w4-wed
99-test-w4-thu
99-test-w4-fri
99-test-w5-mon
99-test-w5-tue
99-test-w5-wed
99-test-w5-thu
99-test-w5-fri
i
W
n
d
S
n
o
r
t
o
v
e
r
o
v
e
r
B
r
o
B
r
o
Fig. 12. Factor improvement when comparing Bro with Snort and Wind for the number
of packets processed per second (dataset: 99-test-w1-wed)
compared Bro 0.9 with Wind and Snort for various DARPA workloads. As shown
in Fig. 12, Snort is faster than Bro by 2 to 8 times, and Wind is 3 to 11 times
faster than Bro. This result is partly because Bro uses regular expression for sig-
nature speciﬁcation rather than Snort, which uses exact substrings for signature
matching. Bro uses a ﬁnite automata to match regular expressions [24], whereas
Snort uses the Wu-Manber algorithm for matching sets of exact substrings.
5 Dynamically Adapting to Changing Workload
The Wind system that we have described so far analyzes observed network traﬃc
and input rules to speed up the checking of network packets in an IDS in a
memory-eﬃcient way. However, traﬃc characteristics can change over time, or
the rule set can change as new vulnerabilities are announced. Therefore, we need
to adapt our evaluation structure dynamically without restarting the system.
To adapt to changing traﬃc characteristics, we plan to collect traﬃc statistics
in the intrusion detection system itself, and reorganize the evaluation structure
when necessary. It would be too intrusive and costly to update statistics for each
packet. Therefore, one could update statistics for a small sample of incoming
packets. Then, we can use these statistics to determine the utility of speciﬁc
groups in the structure, and determine the beneﬁt that rules in the generic group
would provide if they are separated from other rules in the generic group. We
can then remove speciﬁc groups whose utility decreases over time and make new
groups for rules in the generic group that provide increased beneﬁt. However,
to ensure the correct application of rules, these changes may require updating
308
S. Sinha, F. Jahanian, and J.M. Patel
a portion of the evaluation tree atomically, thereby disrupting the incoming
traﬃc. Therefore, one could develop algorithms that use the updated statistics
to dynamically detect a signiﬁcant change in traﬃc and trigger reconﬁguration
of the structure when the beneﬁts far outweigh the disruption.
Vulnerabilities are announced on a daily basis. Sometime a number of vul-
nerabilities for a single application are announced in a batch, demanding a set
of rules to be updated with the intrusion detection and prevention system. One
naive solution is to add the set of rules to the existing evaluation structure,
and then let the reconﬁguration module decide over time if there is a need to
create additional groups. However, this strategy may aﬀect the performance sig-
niﬁcantly if a large set of rule is added to the generic group. This performance
degradation would continue till new groups are created. Therefore, one could
add rules whose values match with already existing groups directly to those spe-
ciﬁc groups. If a large number of rules still remain to be added to the generic
group, then we can use our algorithm described in this paper to determine the
groups that should be separated. Then, additional groups can be created within
the existing structure and the new rules added into those groups.
6 Conclusions and Directions for Future Work
In this paper, we have argued that an intrusion detection and prevention system
should adapt to the observed network traﬃc and the input rules, to provide opti-
mized performance. We have developed an adaptive algorithm that captures rules
and traﬃc characteristics to produce a memory-eﬃcient evaluation structure that
matches the workload. We have implemented two distinct components over Snort
to construct a workload-aware intrusion detection system. The ﬁrst component
systematically proﬁles the input rules and the observed traﬃc to generate a
memory-eﬃcient packet evaluation structure. The second component takes this
structure, pre-processes the rules, and matches any incoming packet. Finally, we
have conducted an extensive evaluation of our system on a collection of publicly-
available datasets and on live traﬃc from a border router at a large academic net-
work. We found that workload-aware intrusion detection outperforms Snort by up
to 1.6 times for all Snort rules and up to 2.7 times for web-based rules, and consumes
10-20% of less memory. A Snort implementation of Wind outperforms existing in-
trusion detection system Bro by six times on most of the workloads.
In future, we believe application decoding will be more common in intrusion
detection and prevention systems [24]. As part of future work, we plan on evalu-
ating our workload-aware framework on such systems. We also plan on evaluating
Wind with more context-aware signatures, and porting it to other available IDSs
and IPSs. Finally, we also plan on developing a dynamically-adaptive IDS, and
deploying it in real networks.
Acknowledgments
This work was supported in part by the Department of Homeland Security
(DHS) under contract number NBCHC040146, and by corporate gifts from Intel
WIND: Workload-Aware INtrusion Detection
309
Corporation. We thank Evan Cooke and Michael Bailey for providing valuable
feedback on the draft and anonymous reviewers for critical and useful comments.
References
1. Symantec: Symantec Internet threat report: Trends for July ’05 - December ’05.
http://www.symantec.com/enterprise/threatreport/index.jsp (March, 2006)
2. Roesch, M.: Snort: Lightweight intrusion detection for networks. In: Proceedings
of Usenix Lisa Conference. (November, 2001)
3. Microsoft:
Vulnerability in graphics
could allow re-
mote code execution. http://www.microsoft.com/technet/security/bulletin/
ms06-001.mspx (January, 2006)
4. Knobbe, F.: WMF exploit.
http://www.securityfocus.com/archive/119/
rendering engine
420727/30/60/threaded (December, 2005)
5. Dreger, H., Feldmann, A., Paxson, V., Sommer, R.: Operational experiences with
In: CCS ’04: Proceedings of the 11th
high-volume network intrusion detection.
ACM conference on Computer and communications security. (2004) 2–11
6. Paxson, V.: Bro: A System for Detecting Network Intruders in Real-Time. Com-
puter Networks 31(23-24) (1999) 2435–2463
7. Lee, W., Cabrera, J.B.D., Thomas, A., Balwalli, N., Saluja, S., Zhang, Y.: Per-
formance adaptation in real-time intrusion detection systems. In: Proceedings of
Recent Advances in Intrusion Detection (RAID). (2002) 252–273
8. Kruegel, C., Valeur, F., Vigna, G., Kemmerer, R.: Stateful intrusion detection for
high-speed networks. In: Proceedings of the 2002 IEEE Symposium on Security
and Privacy, Washington, DC, USA, IEEE Computer Society (2002) 285–
9. Sekar, R., Guang, Y., Verma, S., Shanbhag, T.: A high-performance network in-
trusion detection system. In: ACM Conference on Computer and Communications
Security. (1999) 8–17
10. Gusﬁeld, D.: Algorithms on strings, trees, and sequences: Computer Science and
Computational Biology. Cambridge University Press (1997)
11. Wu, S., Manber, U.: A fast algorithm for multi-pattern searching. Technical report,
Department of Computer Science, University of Arizona (1993)
12. Kruegel, C., Toth, T.: Automatic rule clustering for improved signature-based
intrusion detection. Technical report, Distributed systems group: Technical Univ.
Vienna, Austria (2002)
13. Egorov, S., Savchuk, G.: SNORTRAN: An optimizing compiler for snort rules.
Technical report, Fidelis Security Systems (2002)
14. Norton, M., Roelker, D.: SNORT 2.0: Hi-performance multi-rule inspection engine.
Technical report, Sourceﬁre Inc. (2002)
15. Schuehler, D., Lockwood, J.: A modular system for FPGA-based TCP ﬂow pro-
cessing in high-speed networks. In: 14th International Conference on Field Pro-
grammable Logic and Applications (FPL), Antwerp, Belgium (2004) 301–310
16. Cho, Y.H., Mangione, W.H.: Programmable hardware for deep packet ﬁltering on
a large signature set. http://citeseer.ist.psu.edu/699471.html (2004)
17. Finkelstein, S.: Common expression analysis in database applications.
In: Pro-
ceedings of the 1982 ACM SIGMOD international conference on Management of
data, New York, NY, USA (1982) 235–245
18. Sellis, T.K.: Multiple-query optimization. ACM Trans. Database Syst. 13(1) (1988)
23–52
310
S. Sinha, F. Jahanian, and J.M. Patel
19. Sellis, T., Ghosh, S.: On the multiple-query optimization problem. IEEE Transac-
tions on Knowledge and Data Engineering 2(2) (1990) 262–266
20. Park, J., Segev, A.: Using common subexpressions to optimize multiple queries. In:
Proceedings of the Fourth International Conference on Data Engineering, Wash-
ington, DC, USA, IEEE Computer Society (1988) 311–319
21. Graham, S., Kessler, P., McKusick, M.: gprof: A call graph execution proﬁler. In:
Proceedings of the SIGPLAN ’82 Symposium on Compiler Construction. (June,
1982) 120–126
22. Lippmann, R.P., Fried, D.J., Graf, I., Haines, J.W., Kendall, .K.R., McClung, D.,
Weber, D., Webster, S.E., Wyschogrod, D.., Cunningham, R.K., Zissman, M.A.:
Evaluating intrusion detection systems: The 1998 DARPA oﬀ-line intrusion detec-
tion evaluation.
In: Proceedings of the 2000 DARPA Information Survivability
Conference and Exposition (DISCEX). (2000) 12–26
23. Lippmann, R.P., Haines, J.: Analysis and results of the 1999 DARPA oﬀ-line
intrusion detection evaluation. In: Proceedings of Recent Advances in Intrusion
Detection (RAID), Springer Verlag (2000) 162–182
24. Sommer, R., Paxson, V.: Enhancing byte-level network intrusion detection signa-
tures with context. In: Proceedings of the 10th ACM Conference on Computer and
Communication Security (CCS-03), New York (2003) 262–271
SafeCard: A Gigabit IPS on the Network Card
Willem de Bruijn1, Asia Slowinska1, Kees van Reeuwijk1, Tomas Hruby1,
Li Xu2, and Herbert Bos1
1 Vrije Universiteit Amsterdam
2 Universiteit van Amsterdam
Abstract. Current intrusion detection systems have a narrow scope.
They target ﬂow aggregates, reconstructed TCP streams,
individual
packets or application-level data ﬁelds, but no existing solution is ca-
pable of handling all of the above. Moreover, most systems that per-
form payload inspection on entire TCP streams are unable to handle
gigabit link rates. We argue that network-based intrusion detection sys-
tems should consider all levels of abstraction in communication (packets,
streams, layer-7 data units, and aggregates) if they are to handle giga-
bit link rates in the face of complex application-level attacks such as
those that use evasion techniques or polymorphism. For this purpose,
we developed a framework for network-based intrusion prevention at the
network edge that is able to cope with all levels of abstraction and can
be easily extended with new techniques. We validate our approach by
making available a practical system, SafeCard, capable of reconstructing
and scanning TCP streams at gigabit rates while preventing polymorphic
buﬀer-overﬂow attacks, using (up to) layer-7 checks. Such performance
makes it applicable in-line as an intrusion prevention system. SafeCard
merges multiple solutions, some new and some known. We made speciﬁc
contributions in the implementation of deep-packet inspection at high
speeds and in detecting and ﬁltering polymorphic buﬀer overﬂows.
1 Introduction
Network intruders are increasingly capable of circumventing traditional Intru-
sion Detection Systems (IDS). Evasion and insertion techniques blind the IDS
by spooﬁng the datastream, while polymorphism cloaks malicious code to slip
past the ﬁlter engine [1,2]. Besides hiding the attack, however, attackers employ
another weapon to thwart network defence systems: raw speed [3]. Less sophis-
ticated attacks travelling over Gigabit links may be as diﬃcult to stop as more
complex attacks spreading more slowly. This leads to an interesting dilemma.
On the one hand, systems that handle evasion and polymorphism are either too
slow for in-line deployment (and are often host-based) or not suﬃciently accu-
rate (e.g. [4]). On the other hand, fast in-line solutions are not able to detect and
stop sophisticated attacks (e.g., [5]). Our goal is to build a network card that
can be deployed in the datastream as an Intrusion Prevention System (IPS) at
the edge of the network and that handles many forms of attack at Gigabit rates.
D. Zamboni and C. Kruegel (Eds.): RAID 2006, LNCS 4219, pp. 311–330, 2006.
c(cid:1) Springer-Verlag Berlin Heidelberg 2006
312
W. de Bruijn et al.
Like [6], we advocate distributed ﬁrewalls. Brieﬂy, centralised ﬁrewalls do not
protect against attacks from inside an organisation, and are less able to analyse
in detail complete TCP streams at link rate and to exploit knowledge about
speciﬁc conﬁgurations of end-hosts. Host-based solutions are problematic also,
because they depend on correct conﬁguration of users’ PCs, which has proved
elusive in the past.
As a result, we prefer network administrators to have full control and security
measures to be physically removed from users. A network device (such as a
switch, or a router) close to the users’ machines is the sweet spot for positioning
the IPS system. The ﬁrewall could even reside in the network card of an end-
host [7]. However, physically removing safety measures from the user’s machine
has the advantage that they cannot be tampered with, which from a security
viewpoint may be preferred by administrators.
Unlike much existing work on distributed ﬁrewalls, the focus of our work is on
enforcing security policies on all levels of the protocol stack, rather than spec-
iﬁcation of policies, distribution of rules, etc., for which we intend to build on
existing solutions like [6]. SafeCard provides a single IPS solution that consid-
ers many levels of abstraction in communication: packets, streams, higher-level
protocol units, and aggregates (e.g., ﬂow statistics). We selected state-of-the-art
methods for the most challenging abstractions (streams and application data
units) and demonstrate for the ﬁrst time the feasibility of a full IPS on a net-
work card containing advanced detection methods for all levels of abstraction
in digital communication. To support in-depth analysis in higher-level protocol
layers and still achieve performance at Gigabit rates, we target specialised hard-
ware as might be found in common router line cards. In particular, we aim for
a truly low-level implementation on network processors. For the same reason as
in [7] we evaluated the system on a slightly outdated processor to make it price
competitive1.
Besides combining many levels of abstraction in our IPS, we also make contri-
butions to individual components. In particular, we developed a high-performance
pattern matching language, Ruler, that oﬀers functionality similar to that of Snort
but is amenable to implementation on low-level hardware. In addition, we de-
veloped a protocol-speciﬁc detector, Prospector. Finally, we developed fast, zero-
copy TCP reassembly that proves crucial for performance.
We oﬀer a full network IPS implemented as a pipeline on a single network
card. Each stage in the pipeline drops traﬃc that it perceives as malicious. Thus,
the compound system works as a sieve, applying orthogonal detection vectors
to maximise detection rate. In stage 1, we ﬁlter packets based on header ﬁelds
(e.g., protocol, ports). Stage 2 is responsible for reconstructing and sanitising
TCP streams. In stage 3, we match the streams against Snort-like patterns us-
ing Ruler. Unmatched traﬃc is inspected further in stage 4 by Prospector, an
innovative protocol-speciﬁc detection method capable of stopping polymorphic
buﬀer overﬂow attacks. This method is superior to pattern-matching for the de-
tection of exploits in known protocols. Against other types of malicious traﬃc,
1 In terms of manufacturing costs, not necessarily in current retail prices.
SafeCard: A Gigabit IPS on the Network Card
313
such as trojans, it is ineﬀective, however. The two methods therefore complement