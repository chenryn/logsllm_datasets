### Recovery Action Selection Based on User Constraints

When no recovery action satisfies all three constraints (Consrt, Consrc, and Consri), we proceed to find recovery actions that meet two of the three constraints. Specifically, we look for actions that satisfy:

1. Consrt and Consrc
2. Consrt and Consri
3. Consrc and Consri

If no such actions are found, we then seek actions that meet only one of the constraints. The process is as follows:

1. If no recovery action satisfies any of the above combinations, we select the first available action in the list.

This logic can be modeled using constraint programming, as illustrated in Figure 25 (M. Fu, et al., 2016).

**Algorithm 2: User Constraints Based Recovery Action Selection**

- **Input**: A set of \( n \) recovery actions for a specific step section of an operation, denoted by \( R = \{R_i | 1 \leq i \leq n\} \).
- **Metrics**: For each recovery action \( R_i \), the metrics are denoted by \( RT_i \), \( RC_i \), and \( RI_i \).
- **Goal**: Find the list of acceptable recovery actions \( Rx \), where:
  - \( Rx = \{R_i | 1 \leq i \leq n & RT_i \leq Consrt & RC_i \leq Consrc & RI_i \leq Consri\} \)
  - If \( Rx \) is empty, try:
    - \( Rx = \{R_i | 1 \leq i \leq n & RT_i \leq Consrt & RC_i \leq Consrc\} \)
    - If \( Rx \) is still empty, try:
      - \( Rx = \{R_i | 1 \leq i \leq n & RT_i \leq Consrt & RI_i \leq Consri\} \)
      - If \( Rx \) is still empty, try:
        - \( Rx = \{R_i | 1 \leq i \leq n & RC_i \leq Consrc & RI_i \leq Consri\} \)
        - If \( Rx \) is still empty, try:
          - \( Rx = \{R_i | 1 \leq i \leq n & RT_i \leq Consrt\} \)
          - If \( Rx \) is still empty, try:
            - \( Rx = \{R_i | 1 \leq i \leq n & RC_i \leq Consrc\} \)
            - If \( Rx \) is still empty, try:
              - \( Rx = \{R_i | 1 \leq i \leq n & RI_i \leq Consri\} \)
              - If \( Rx \) is still empty, assign \( Rx \) with the value of \( R \).
- **Final Selection**: The first element of \( Rx \) is selected as the recovery action.

**Figure 25. User Constraints Based Selection Algorithm**

### Experimental Evaluation

In the experimental evaluation, we will present the results of selecting acceptable recovery actions based on the two selection and optimization mechanisms for each recovery point within the sporadic operations evaluated (Chapter 8).

### Mapping Recovery Actions into Executable Code

The selected recovery actions are logical workflows that describe how the recovery will be performed. To make them executable, they must be mapped into code. This section provides information on mapping these actions into executable code, such as Java SDK libraries, .Net framework C# SDK libraries, and command lines.

In POD-Recovery, the selected recovery actions are mapped into C# code, using AWS cloud SDK libraries provided in .Net framework 4.0 of Visual Studio 2010. For example, the action "Start Cloud Instances" is mapped to the C# cloud SDK function "StartInstances," which launches an instance in the cloud platform.

To ensure "recovery for recovery," we use an exception handling mechanism. This mechanism captures errors in the recovery action using a "try" block and recovers from them using a "catch" block. In the "catch" block, the current erroneous resource state and the expected resource state of the current recovery point are obtained. A state transition plan between these states is generated using AI planning techniques and then mapped to executable code, such as C# or Java cloud SDK library functions. The code is executed to perform "recovery for recovery" for each recovery point of the sporadic operation on the cloud (M. Fu, et al., 2015; M. Fu, et al., 2016).

### Chapter 8: Experiments and Evaluation

#### Testing POD-Recovery on AWS EC2

We tested POD-Recovery on AWS EC2 (AWS, 2016). Our techniques can be adapted to other cloud platforms if they meet the following assumptions:
1. The operation's process model with timestamps can be mined from cloud operational logs.
2. Cloud API call history logs with timestamps are available and accessible.
3. Cloud logs are accessible for error detection.
4. Cloud APIs are accessible by external parties.
5. Cloud resources are accessible from external parties.

We tested POD-Recovery on AWS because it is the most widely used and representative of major public clouds. We used five representative sporadic operations on a simplified version of a real cloud system:
1. Rolling upgrade
2. Scale-up
3. Scale-down
4. Installation
5. Migration

These operations were used to demonstrate the generalizability of POD-Recovery (requirement R8) and the remaining seven recovery requirements (R1 to R7).

#### Case Study 1: Recovery for Rolling Upgrade Operation on Cloud

**Recovery Points Determination**
- Recovery points are manually determined using the "Recovery Actions Identifiable" criterion.
- The rolling upgrade operation is divided into recoverable step sections, each ending with a recovery point.
- Sections with low failure rates are combined, resulting in fewer recovery points.

**Workload of Resource Space Determination**
- The resource space includes four types: Instance, Launch Configuration, Auto Scaling Group, and Elastic Load Balancer.
- The execution time for determining the resource space was 57.07ms on average, with a relative standard deviation of 10.96%.

**Workload of Expected Resource State Templates Generation**
- The execution time for generating expected resource state templates was 60.24ms on average, with a relative standard deviation of 8.23%.

**Recovery Satisfying Requirements**
- POD-Recovery is designed to meet eight recovery requirements, including runtime recovery, RTO satisfaction, reducing negative impact, and more.
- Experiments were conducted to demonstrate how POD-Recovery fulfills each requirement using the rolling upgrade operation.

**A. Runtime Recovery (Satisfying Recovery Requirement R1)**
- Our method is inherently a runtime recovery solution.

**B. Recovery Satisfying RTO**
- **Experimental Procedure**: Measure recovery time by performing the rolling upgrade operation on a cloud application with 8 instances.
- **Fault Injection**: Inject faults at each recovery point and measure the recovery time.
- **Results**: The recovery time was calculated by summing the execution time of each function in the recovery action.

**Table 9. Faults Injected for Rolling Upgrade Operation**
| Recovery Point | Fault Injected |
|----------------|----------------|
| After Step 3   | ASG uses unknown LC |
| After Step 4   | Instance still registered with ELB |
| After Step 5   | Instance not terminated |
| After Step 6   | Instance launching fails |
| After Step 7   | Instance not registered with ELB |

**Table 10. Recovery Time for Rolling Upgrade**
| Recovery Pattern ID | Recovery Pattern | Selected Recovery Action (Pareto Set) | Recovery Time (Pareto Set) | Selected Recovery Action (User Constraints) | Recovery Time (User Constraints) |

This table summarizes the recovery times for different recovery patterns and methods.