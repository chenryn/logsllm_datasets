142 -
第六章高级 sed 命令
 I can repair the 
---
## Page 143
的底部。而是被Delete 命令重定向到相同的顶端。
与这个脚本以前的版本相同。连续地处理多个行。控制永远不会被转移到脚本
式空间直接到找到匹配为止。
找到结束序列时，这个循环就生效了。Sed 将回到循环开始处并将行追加到模
所以我们就可以读入一一行。当我们匹配了字体更改请求的开始序列但还没有
试用模式匹配嵌入的换行符。如果匹配成功，
第二部分试着匹配多行上的模式。Next 命令构建了多行模式空间。替换命令尝
出现）。
到顶端并寻找其它可能的匹配，包括已经被应用的指令（在一行上可能有多次
令将控制转移到标签begin。换句话说，一旦我们执行了匹配。我们希望返回
一部分尝试匹配完全在一行上找到的字体更改语法。
我们来进一步查看这个脚本，
again。改进的脚本如下：
我们可以使用标签建立读取多行的循环，
间中的第一行，控制被传递到脚本的顶端，接着读入另一行。
第
我们主要来看看如何完成第二个请求。前面的字体更改脚本创建了一个两行的
签
三部分是跟在标签 again后面的过程，模式空间的第一行在输出后被删除。
后面的行。如果没有进行替换，控制就被转移动跟在标签begin后面的行，
s/@f1(\([^)]*\n[^)]*\))/\fB\1\\fR/g
s//\\fB\1\\fR/g
# 改变 Scribe 字体的脚本。新改进的脚本.
d
:again
/@f1(. */ {
b begin 
/@f1(\([^)]*\))/{
:begin 
/~\n$/D
 begin
 again
QQ群：
50192241
，它有3部分。从跟在：begin后面的行开始，
143-
并且使匹配跨越多行的模式成为可
，test 命令将控制转移到 again 标
，在进行替换之后，
第六章高级 sed 命令
分友命
---
## Page 144
它的命令行参数都被解释为文件名。在分析它之前我们先来看看整个脚本：
这个脚本被设计为可以接受命令行中的参数。第一个参数是搜索模式。所有其
行符并跨行寻找模式。
一旦确定在第一行或第二行上都没有找到模式，我们就删除这两行之间的替换
们将两行的模式空间复制到保持空间以保护其内容。现在，以前被读入模式空
配的内容，就将另一行读入模式空间(正如前面的多行脚本中那样)。然后，
脚本的逻辑是先在一行上寻找模式，如果匹配就打印这一行，如果没有找到匹
建了一个输入/输出循环，用来控制行何时输出或不输出。
为可以用-n选项来抑制默认的行输出。然而，这个 sed 脚本不寻常之处是它创
与 grep一样，该程序的一个必不可少的部分是只打印匹配模式的行。你也许认
grep 程序，用于寻找一系列出现在两行上的多个单词。
本，这个脚本用到了几乎所有的 sed 的高级结构。这个脚本是通用的，类似于
我们已经介绍了 sed 的所有的高级结构，
加入一个短语
间
的新行本身可能匹配搜索模式，
s/. *\n/ / 
search=$1
#! /bin/sh
done 
J
s/ *\n/ / 
sed
for file
shift
#
’"$search"’ /{
"$search"’/b
 phrase -- search for words across lines 
"$search"’ /b
 $file
QQ群：
50192241
144
，现在来看一个名为 phrase 的 shelI脚
第六章高级 sed 命令
---
## Page 145
匹配：
所以，我们尝试匹配第二行的模式，并且如果不成功，那么尝试跨越两行进行
可以大胆地使用，
你也许想在尝试匹配模式之前，
分。那么当第二行匹配时，
然而，如果发现一个匹配，
因而会被它搞糊涂。这里的方法是，如果第二行匹配模式，则只输出第二行。
配，那么我们仍然输出这两行。换句话说，用户会看到被匹配的行前面的行，
什么不直接寻找任何跨越两行的模式？原因是如果模式实际上在第二行被匹
行本身可以匹配这一搜索字符串。
如果一个输入行不匹配这个模式，
支命令。
且控制返回到脚本的顶端。每次尝试匹配模式时，都可以用相同的方式使用分
底部并打印该行。使用 sed 的正常控制流，
如果搜索模式匹配这一行，
理（注3）
序列确保被包围的参数，
中，
号把变量引用括起来，然后再用单引号括住它。注意脚本本身被包围在单引号
这个脚本展示了将 shelI变量传递给脚本的另一种方法。这里我们用一对双引
名为 search 的 shell变量被指定为命令行上的第一个参数，它表示搜索模式。
亥 sed 脚本在3个不同的点尝试匹配搜索字符串，每一个都标有用于查找搜索
s/. *\n/ / 
/’"$search"’ /b 
’"$search"’ /[
/ *\n/ / 
但是会改变脚本的逻辑）。
QQ群：
a/
，首先被 shell 求值，
，采用上面的结构将打印两行。
：那么分支命令（没有标签）就将控制转移到脚本的
50192241
我们不想打印整个模式空间，
，使用Delete 命令删除模式空间中的第一行。
为什么这一步是必要的也许并不明显----为
则开始下一个过程来创建多行模式空间。新
145
下一个输入行被读入模式空间，并
，然后再由 sed 对 sed 脚本进行处
第六章
只想打印它的第二部
 高级 sed 命令
---
## Page 146
础知识，awk 脚本就很容易编写和理解。
构。当你开始用 sed 完成更复杂的任务时，所编写的脚本会变得令人很难理
的内容，
接下来的章节
正如我们在开始时提到的那样，编定 sed 脚本是进行程序设计的好的开始。
下面是程序在样本文件上运行的结果：
而不是清空它，因为在读取另一个输入行之后，有可以要进行跨两行的匹配，
中的第一行并且将控制转移回脚本的顶端。我们只删除模式空间的第一部分，
这里的 get 命令从操持空间获取保持换行符的副本。Delete 命令删除模式空间
只有当模式不匹配时才执行脚本的最后一部分。
我们试着匹配这种模式。如果匹配成功、我们不想打印模式空间的内容，
理过的行。替换命令用一个空格取代嵌入的换行符和它前面的任意空格。然后
这里的 get 命令从保持空间获取原始的两行的一个备份，并改写模式空间中处
解，awk的优点之一是，
$ phrase "the procedure is followed" sect3 
S
: followed for all lines that do not match the pattern.
这会使你感到宽慰，
QQ群：
它更容易处理复杂问题，并且一旦你学会了awk的
50192241
但是你也会看到更多用于编写有用的程序的结
146.
第六章高级 sed 命令
只是
基
似
---
## Page 147
绍的主要部分指出。
的版本。但是，在某些方面不同的版本在性能上具有重要的区别，这些将在介
殊的工具，不管是贝尔实验式的原始版本，
当你在阅读余下的章节是，请你牢记术语 awk 是指 POSIX awk，而不是任何特
注1:
awk的功能凭增加了CONVFMT变量（将在本章后面部分介绍）。
在1989 年，awk 用于 System VRelease 4,
发布，这一版本现在一直应用的SunOS4.1.x操作系统上。
在 1985年，awk 的原作者发现，awk 被应用于比他们原来预期的更多的程序
第七版中，
早期的 awk 是一个很好的小型的语言。大约在 1978 年，他首次出现在UNIX的
awk语言。在深入介绍细节之前，我们先介绍一下他的一些历史。
在序言中曾提到，本书所描述的是 POSIX awk，
始
中
的awk，
本章内容
遵守规则
信息的检索
向脚本传递参数
格式化打印
关系操作符和布尔操作符
表达式
记录和字段
模式匹配
awk 程序设计模型
Hel lo, wor Id 
系统变
的章节进行详细介绍
添加了
以及于新版本相比较它不具备的所有功能）。
随着他的发展和流行，人们开始使用它来编写重要的程序。
量
-v选项以及tolower(）和 toupper ()函数，删除了 srand()和 printf。
QQ群：
50192241
147
 还是任何的其他将在第十一章介绍
并在一些小的方面做了更新（注
也就是说，
编写 awk脚本
第七章 编写 awk 脚本
，这个新版本在1987年
：遵循 POSIX标准的
，介绍原
---
## Page 148
输入行，他们同样可以被输出。
现在让我们看另外一个例子，这里使用一个包含“Hello,World.”行的文件。
这个脚本只有一条包含在大括号中语句。这个操作对每个输入行执行print 语
Hel lo, Wor Id
其中的print 语句没有参数，只简单的输出每个输入行。如果文件中有其他的
在这个例子中，“Hello,World.”出现在输入文件中，得到了相同的结果。因为
个输入行将被读入但没有被输出。
在第一个例子中，我们创建了-一个文件，命名为test,它只包含一个句子。这
通过演示“Hello,World”这个程序来介绍一种程序设计语言已经成为一种管
作。现在让我们开始吧。
Programming Language》
最好方法是从编写开始。当编写脚本取得一定的进步是，
一个空格或括号，
awk 的基础。但是使用 awk 越多，
阅
要编写一个awk程序，就必须熟悉这个工具的规则。这些规则做了清楚的规
遵守规则
句
上，
理
（并且反复的读它们），或者阅读awk的手册，或者阅读《TheAWK
语
熟
标
定
。在本里中，
里。通过延时这个程序在 awk 中如何工作将证明 awk 是如何的不寻常。实际
言是一样的，
读规则，这种方式与使用手册来学习应用程序，
悉这种语言的许多特征，
不是向你介绍这些规则，二是延时如何使用这些规则。用这种方式，
，有必要演示几种打印“Hello,World”的不同方法
，可以在附录二“awk的快速参考”中找到，
Hel lo, world 
$ awk 
$ cat test2
Hel lo, world 
$ awk '
（’{print}’test2
’{ print "Hello, world" }′
，不是一种简单的工作。
QQ群：
这些错误对长期记忆具有神奇的效果。
）这本书无疑都将是有益的。你可以在以后做这些工
，而且通过看例子了解脚本如何工作。有些人喜
50192241
其规则就越快变成根深蒂固的习惯。你应
- 148-
然而，
test
，熟练掌握规则是开始规范地使
而不在本章中讨论。本章的
或通过浏览语法规则来学
第七章
阅读附录二中的规则
，因此学习编写脚本的
编写 awk 脚本
例如漏掉
你将
欢
反
习
先
会
---
## Page 149
执行前和主输入循环钟之后你可以做一些处理。BEGIN 和 END 过程是可选的。
awk 允许你编写两个特殊的例程，他们在任何输入被读取前和所有输入都被读
awk程序设计模型
取后执行。他们是与BEGIN和END 规则相关的过程。换句话说，在主输入循环
使得编程更容易。
并一次读入一行。这并不需要许多共组，但它说明了基本的 awk 简化操作可，
立一个主输入循环并将它作为程序的一个组成部分。它必须打开一个输入文
必须打开一个输入文件并一次读入一行。在其他的程序设计语言中，你必须
设计语言中，
访问它。你所编写的处理操作的代码假设有一个可用的输入行。在其他的程序
awk 中的主要输入循环是一个例程，它可以从文件中读取一行冰似的进程可以
是现成的，
awk程序是由所谓的主输入（main input）循环组成的。一个循环是一个例
语言更容易的部分原因，是由于 awk 为程序员提供了定义得当且有用的模型。
理解 awk 提供给程序员的基本模型是很重要的。学习 awk 比学习其他程序设计
没有其他的语句，awk 将不处理任何输入文件。
Awk 打印这个消息，
动作。
和BEGIN模式是相关的，BEGIN模式用于指定的第一个输入行读入之前要执行
为了验证这一点，可以输入第一个例子中的命令行，但忽略文件名。你将发现
此，如果没有来自文件中的输入行，以上的 print 语句将不做任何事情。
并检查其中的指令的语法。然后 awk 将对每个输入行执行脚本中的指令。因
输入行，否则将什么也不能做。当调用 awk程序是，
终
看
程
入：按几次RETURN键，并用EOF（大多系统使用CTRL-D）作为输入的结束标
这两个例子都说明了 awk 是输入驱动的。也就是说，
甲
止。
看到的，这种循环仅当有一个输入时才执行。当没有其他输入行读入是循环将
输入循环执行的次数和输入的行数相同。就像在“Hello,World.”例子中所
法来输出“Hello,Wor ld”信息，
于 awk 期望得到来自键盘的输入，
Hello, world 
$  awk 
，它作为一个框架存在，
′BEGIN { print "Hello, world" }′
你必须建立一个主输入循环并将它作为程序的一个组成部分。
QQ群：
然后退出程序。如果一个程序只有一个BEGIN模式，并且
50192241
在这个框架中你编写的代码能够执行。在
，并且 awk 不需要等待输入。这个方法的实现
，所以它将一直等待知道对它的提供了输
- 149 -
的操作将被执行。还有另外一种
，它将读入所提供的脚本，
，除非有可以在其上操作的
第七章
编写 awk 脚本
件
建
---
## Page 150
到许多小的，甚至没有什么意义的例子，但他们能够验证 awk 程序脚本的主要
模式匹配
式
该脚本表示：如果输入行为空，
本：
特点。
“Hello,World.”程序没有演示出模式匹配规则的作用。在本节中，
控制流中这些部分之间的关系。
配
定
宗
图
行
要
处
对
入过程中将做的处理，
弃
己的输入行将被打印出来（执行打印语句是一个默认操作）。参阅下面的脚
的模式相匹配的输入行才能成为操作对象。如果没有指定操作，
 awk读入一行是时，它试图匹配脚本中的每个模式匹配规则。只有与一个特