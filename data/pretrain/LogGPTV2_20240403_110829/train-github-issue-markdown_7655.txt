# Bug report
**What is the current behavior?**  
I have an issue after upgrade to webpack 5, we have internal components as npm
packages and services that use those components and we have the following
issue:
  1. Package A have the following folder structure:  
src
    * theme 
      * default-theme.ts
    * views 
      * Component.tsx
    * index.ts
  2. Service has the following folder structure  
src
    * theme 
      * default-theme.ts
    * exported 
      * ExportedView.tsx
    * index.ts
After we run build in the service, default-theme of Package A gets replaced by
default-theme of the service.
This does not happen if the 2 files have different paths or different name.
This happens with all files that have same name and same path.
**What is the expected behavior?**
default-theme from the services should not override the package default-theme.
**Other relevant information:**  
webpack version: 5.60.0  
Node.js version: 14  
Operating System: Mac  
Additional tools:
Current webpack configuration:
const webpack = require('webpack');  
const { merge } = require('webpack-merge');  
const externalsConfig = require('./webpack.externals');  
const paths = require('../paths');  
const serviceName = require(paths.appPackageJson).name.  
const fs = require('fs');  
const ForkTsCheckerWebpackPlugin = require('fork-ts-checker-webpack-plugin');
const DuplicatePackageCheckerPlugin = require(paths.scriptModule(  
'duplicate-package-checker-webpack-plugin'  
));
let packages = fs.existsSync(paths.localDependencies)  
? require(paths.localDependencies).packages  
: {};
const svgInlineOptions = {  
template: (  
{ template },  
opts,  
{ imports, componentName, props, jsx, exports }  
) => template.ast`  
${imports}
      const ${componentName} = (${props}) => {
        return ${jsx};
      };
      export default ${componentName};
    `,
};
module.exports = () => {  
const entryPoints = {  
bundle: paths.appIndex  
};  
const commonConfigs = {  
entry: entryPoints,  
output: {  
filename: '[name].js',  
path: paths.appBuild,  
libraryTarget: 'umd',  
chunkFilename: '[name].[contenthash].bundle.js',  
devtoolNamespace: serviceName,  
library: serviceName  
},  
context: paths.appPath,
        resolve: {
            extensions: ['.ts', '.tsx', '.js', '.jsx', '.json', '.webpack.js', '.web.js'],
            alias: packages || {},
            fallback: {
                child_process: false,
                fs: false,
                crypto: false,
                net: false,
                tls: false,
                tty: require.resolve("tty-browserify"),
                "http": require.resolve("stream-http"),
                "https": require.resolve("https-browserify"),
                 path: require.resolve('path-browserify')
            }
        },
        stats: {
            // Examine all modules
            modulesSpace: Infinity,
            // Display bailout reasons
            optimizationBailout: true
        },
        module: {
            rules: [
                {
                    test: /\.tsx?$/,
                    use: [
                        {
                            loader: paths.scriptModule('esbuild-loader'),
                            options: {
                                loader: 'tsx',
                                target: 'es2015',
                            }
                        }
                    ], 
                },
                {
                    test: /\.eot(\?.*)?$/,
                    use: [{
                        loader: paths.scriptModule('file-loader?name=fonts/[content-hash].[ext]')
                    }]
                },
                {
                    test: /\.css?$/,
                    use: [{loader:paths.scriptModule('style-loader/useable')},{loader: paths.scriptModule('raw-loader')}
                    ]
                },
                {
                    test: /\.svg(\?.*)?$/,
                    use: [{
                    loader: paths.scriptModule(
                        'url-loader?limit=10000&mimetype=image/svg+xml&name=fonts/[content-hash].[ext]'
                    ) }],
                    exclude: /\.inline.svg$/
                },
                {
                    test: /\.inline.svg$/,
                    use: [
                      {
                        loader: paths.scriptModule('@svgr/webpack'),
                        options: svgInlineOptions
                      },
                    ],
                  },
                  {
                    test: /\.(jpe?g|png|gif)$/i,
                    use: [{
                    loader: paths.scriptModule('url-loader?limit=1000&name=images/[content-hash].[ext]')
                }]
                },
                {
                    test: /\.scss$/,
                    use: [{
                        loader: paths.scriptModule('style-loader/useable'),
                    },{
                        loader: paths.scriptModule('css-loader'),
                    },{
                        loader: paths.scriptModule('sass-loader')
                    }   
                    ]
                },
                {
                    test: /\.woff(2)?(\?v=[0-9]\.[0-9]\.[0-9])?$/,
                    loader: paths.scriptModule('url-loader')
                },
                {
                    test: /\.(ttf|eot)(\?v=[0-9]\.[0-9]\.[0-9])?$/,
                    loader: paths.scriptModule('file-loader')
                },
                {
                    test: /font-awesome\.config\.js/,
                    loader: paths.scriptModule('style-loader')
                }
            ]
        },
        plugins: [
            new ForkTsCheckerWebpackPlugin(),
            new webpack.LoaderOptionsPlugin({
                options: {
                    tslint: {
                        failOnHint: true
                    }
                }
            }),
            new DuplicatePackageCheckerPlugin({
                verbose: true,
                emitError: false,
                showHelp: true,
                strict: true
            }),
            new webpack.ProvidePlugin({
                process: 'process/browser'
            }),
        ],
        node: {}
    };
    return merge(externalsConfig, commonConfigs);
};