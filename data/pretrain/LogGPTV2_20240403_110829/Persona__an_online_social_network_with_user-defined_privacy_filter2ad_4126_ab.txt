permits sharing eﬃcient, symmetric keys that can be “recy-
cled” to avoid expensive operations. This approach means
that ABE’s performance penalty need only be paid when it
provides its ease-of-use or third-party group-deﬁnition ad-
vantages, not for each operation.
Consider our example access structure (‘neighbor’ AND
‘football fan’). In creating this group, Alice had to enumer-
ate all her friends and distribute a new group key to match-
ing friends. Now imagine that Bob wants to encrypt data to
the same (‘neighbor’ AND ‘football fan’) group. With ABE,
Bob would encrypt using (‘neighbor’ AND ‘football fan’) as
the access structure. Under traditional cryptography, if Al-
ice had pre-deﬁned this group (and invited Bob), then Bob
could encrypt using the group symmetric key. Otherwise,
Bob can encrypt this message only if he can enumerate all
of Alice’s friends and know whether they belonged to both
groups.
Using ABE allows friend-of-friend interactions without re-
quiring enumerations of friend and attribute lists. A friend
may limit who may read a response to a wall post to a more
restricted group. For example, if Alice writes “I want to
watch Serenity this weekend,” as a post to her ‘friends’, Bob
might reply “I have the DVD, let’s watch it at my place,”
to Alice’s ‘friends’ who also have the ‘in-the-neighborhood’
attribute. Without ABE, Bob would have to rely on Alice to
have created this (intersection) group in advance. As long
as users share attribute names (and their meanings) with
friends, ABE provides an elegant mechanism for users to
target information for friends-of-friends. The same function-
ality can be implemented without ABE, but requires more
information exchange (lists of all friends-of-friends and their
attributes) and a key distribution mechanism (that maps
groups deﬁned by friends to the group key).
3. GROUP KEY MANAGEMENT
We describe how Persona users deﬁne groups and how
users generate and use keys corresponding to groups. Keys
guard access to two types of objects in Persona: user data
and abstract resources. In Persona, all users store their data
encrypted for groups that they deﬁne. Any user that can
name a piece of data may retrieve it, but they can only read
it if they belong to the group for which the data was en-
crypted. Abstract resources represent non-data objects, for
example, a user’s storage space or a Facebook Wall. The
set of possible operations on an abstract resource is tailored
to the resource (for example, it is possible to write onto a
storage space or post to a user’s Wall). Each resource has
a home which maintains and enforces the resource’s Access
Control List (ACL). The resource’s owner may change the
resource ACL and allow speciﬁc groups diﬀerent levels of ac-
cess to the resource. The Persona group management oper-
ations described in this section allow users to control access
to data and resources. All Persona applications (Section 4)
are built using these operations.
Each Persona user is identiﬁed using a single public key
and stores their own (encrypted) data with a storage service.
Users with existing relationships exchange their public keys
and storage service locations out of band. Storage services
support two operations for data storage and retrieval: put
and get, which mimic the store and retrieve operations of
a hash table. Storage is a resource in Persona, and users
may grant other users (or groups) the ability to store (put)
onto their storage service using the operations described in
this section. Storage services are a specialized case of the
broader class of Persona applications and are described in
more detail in Section 4.1.
We use the notation shown in Table 1. In the algorithm
listings, u : hprotocol stepi means user u invokes the speci-
ﬁed step.
3.1 Operations
Persona operations allow users to manage group member-
ship and mandate access to resources. The operations com-
bine ABE and traditional cryptography, allowing individu-
als to be securely added to groups deﬁned using ABE and
allowing group members authenticated access to abstract
resources.
137Term
u.SS
u.K
(TPK , TSK )
(APK , AMSK )
ASK
AS
TKeyGen()
TEncrypt(K, m)
TDecrypt(K, c)
TSign(K, m)
ABESetup
ABEKeyGen(K, attrs)
ABEEncrypt(K, m, AS)
Deﬁnition
u’s storage service location
Key K created by u
PKC public/secret keypair
ABE public/master secret keypair
ABE user secret key
Access structure
Generate RSA keypair
RSA encrypt m with key K
RSA decrypt ciphertext c
RSA sign m with key K
Generate an attribute public key
and master secret key
Generate an attribute secret key
with attributes attrs
ABE encrypt m with key K and
access structure AS
ABEDecrypt(SK, P K, c) ABE decrypt ciphertext c with
secret key SK
Table 1: Notation used in this paper.
3.1.1 DeﬁneRelationship
Users invoke the DeﬁneRelationship function to add indi-
viduals to a group. The user generates an appropriate at-
tribute secret key using the ABEKeyGen function, encrypts
this key using the target user’s public key, and stores the
encrypted key on her storage service. The target user can
retrieve this encrypted key using a process described in Sec-
tion 3.3, decrypt it, and use it as necessary.
Algorithm 1 DeﬁneRelationship(u1, attrs, u2)
u1: A ← ABEKeyGen(u1.AMSK , attrs)
u1: C ← TEncrypt(u2.TPK , A)
u1: u1.SS.put(H0(u2.TPK ), C)
. . .
u2: C ← u1.SS.get(H0(u2.TPK ))
Example Usage: Alice wants to confer the attribute
‘friend’ upon Bob. Alice creates K = Alice.ASK‘friend’, an
ABE key associated with the ‘friend’ attribute. Alice com-
putes C = TEncrypt(Bob.TPK , K) after obtaining Bob’s
public key from out-of-band communication with Bob. Alice
stores C on her storage service at the location H0(Bob.TPK ),
where H0(·) is a hash function deﬁned in Section 3.3. Bob
retrieves C from Alice’s storage service and decrypts it, gain-
ing the ability to decrypt content guarded by the attribute
‘friend’. Although any user can retrieve C from its well-
known location, only Bob can decrypt it.
3.1.2 DeﬁneTransitiveRelationship
The DeﬁneTransitiveRelationship function allows a user Al-
ice to deﬁne groups based on a group deﬁned by another
user, Bob.
Alice creates a new attribute to describe the new group
‘bob-friend’ and generates an ASK‘bob-friend’ with that at-
tribute. Alice encrypts ASK‘bob-friend’ with the access struc-
ture (‘friend’) using Bob’s attribute public key and stores
the ciphertext on her storage service (Algorithm 2).
Users with the attribute ‘friend’ in Bob’s ABE domain
may retrieve and decrypt this key and use it to view content
encrypted within Alice’s ABE domain. Alice may include a
traditional keypair, used for authentication to ACLs, in the
ciphertext C. We describe how Bob’s friends retrieve these
keys in Section 3.3.
Algorithm 2 DeﬁneTransitiveRelationship(u1, APK ,
access structure AS, attrs)
u1: A ← ABEKeyGen(u1.APK , attrs)
u1: C ← ABEEncrypt(APK , A, AS)
u1: u1.SS.put(H0(AS, APK ), C)
Example Usage: Alice is advertising a party on an OSN
and wants to invite Bob and any of Bob’s friends. Alice dis-
covers that Bob uses the attribute ‘friend’ to deﬁne who
his friends are. Alice generates the group identity tradi-
tional PKC keypair (TPK , TSK ) for authentication, creates
the new attribute ‘bob-friend’, and generates the attribute
secret key A = Alice.ASK‘bob-friend’. Alice calculates
C = ABEEncrypt(Bob.APK , [A, (TPK , TSK )] , ‘friend’)
and stores it on her storage service at H0(‘friend’, Bob.APK ).
Alice also performs AssignRightsToGroup to generate group
identity keys and instruct the application providing the event
advertising service that TPK can be used to authenticate
RSVPs. Bob sends to each of his friends a link to the ap-
plication that directs them to Alice’s event. Bob’s friends
cannot initially view the data, so they get C, decrypt it, and
view the event. They then get the group identity key, which
allows them to authenticate and RSVP to the event.
3.1.3 AssignRightsToIdentity
Resource owners use AssignRightsToIdentity to provide other
users speciﬁc rights to named resources. An example of such
a right would be the ability to store data on another user’s
storage service; we describe other resources and uses in Sec-
tion 4.
To assign rights, the user instructs the resource’s home
to add a (public key, set of rights) pair to the resource’s
ACL. If the public key was already in the ACL, then the
rights are changed to those speciﬁed in the new rights set
(Algorithm 3).
Algorithm 3 AssignRightsToIdentity(u1, rights,
TPK , resource r, owner o)
u1: o.chACL(r, TPK , rights)
User u2 who possesses TSK may exercise the named rights
on the resource by authenticating to the resource’s home
node using TSK .
Example Usage: Alice wants to give Bob the ability to
put data on her storage service. Alice instructs her stor-
age service to create a new ACL rule based on Bob.TPK
that allows write access. Bob later calls the put function
on the location L with the world readable data m. Al-
ice’s storage service issues a nonce n, and Bob replies with
TSign(Bob.TSK , [n,“write(L, m)”]). Alice’s storage service
veriﬁes the signature against Bob.TPK , authenticating Bob’s
write according to Alice’s access policy.
3.1.4 AssignRightsToGroup
The AssignRightsToGroup function allows a user Alice to
provide resource access to a group G rather than to an in-
dividual. The group is speciﬁed using attributes deﬁned in
Alice’s ABE domain.
First, Alice creates a new (TPK ,TSK ) pair speciﬁcally for
G. Alice ABE-encrypts this keypair with an access struc-
138ture that identiﬁes members of G. Alice stores the resulting
ciphertext on her storage service. This pair of PKC keys be-
comes the group identity and Alice can assign rights accord-
ing to AssignRightsToIdentity. The pseudocode is presented
in Algorithm 4.
Algorithm 4 AssignRightsToGroup(u1, rights,
access structure AS, resource r, owner o)
u1: (TPK , TSK ) ← TKeyGen()
u1: C ← ABEEncrypt(u1.APK , (TPK , TSK ), AS)
u1: u1.SS.put(H0(AS, APK ), C)
u1: AssignRightsToIdentity(u1, rights, TPK , r, o)
Example Usage: Alice wants to give her friends and
her family the ability to put data on her storage service.
Alice deﬁnes the group G as the users who have ‘friend’ or
‘family’ in their ASK in Alice’s ABE domain. Alice creates
K = (TPK G, TSK G), and stores
C = ABEEncrypt(Alice.APK , K, (‘friend’ or ‘family’))
on her storage service. Anyone who possesses either of these
attribute keys can retrieve C, decrypt it with their ASK ,
and use TSK G to authenticate to store data on the storage
service as described in AssignRightsToIdentity.
3.2 Revocation of Group Membership
Removing a group member requires re-keying: all remain-
ing group members must be given a new key. Data encrypted
with the old key remains visible to the revoked member. The
nominal overhead is linear in the number of group members
but can be reduced [37].
An ABE message can be encrypted with an access struc-
ture that speciﬁes an inequality (“keyYear < 2009”), and the
message can be decrypted only if a user possesses a key that
satisﬁes the access structure. This facility can be used to
provide keys to new group members such that they cannot
decrypt old messages sent to the group.
3.3 Publishing and Retrieving Data
Private user data in Persona is always encrypted with a
symmetric key.1 The symmetric key is encrypted with an
ABE key corresponding to the group that is allowed to read
this data. The group is speciﬁed by an access structure as
described in Section 2.3. This two phase encryption allows
data to be encrypted to groups; reuse of the symmetric key
allows Persona to minimize expensive ABE operations.
Users put (encrypted) data onto their storage service and
use applications to publish references to their data. Data
references have the following format:
htag, storage service, key-tag, key-storei
The tag and storage service specify how to retrieve the en-
crypted data item, and the key-tag and key-store specify
how to obtain a decryption key.
Users read data by retrieving both the item and the key.
Suppose item i is encrypted with symmetric key s. If user u1
wants to read i and u1’s local cache or own storage service
does not contain s, u1 can retrieve the ABE-encrypted s us-
ing the key-tag and key-store information in the reference.
1Users may store public data in plain-text to reduce over-
head.
s is encrypted under the access structure AS in the ABE do-
main deﬁned by APK (u1 can infer both from the encrypted
key). u1 tries to decrypt s using its ABE secret key, and if
successful, decrypts i using s. u1 stores s, encrypted with
their own public key, on their own storage service for future
use. The encrypted key is stored at H(AS, APK ), where H(·)
is a hash function. If s is instead encrypted with traditional
public key TPK , u1 stores the encrypted s at H(TPK ).
Suppose user u2 wants to encrypt a message for a set of
users speciﬁed by access structure AS in the ABE domain
with public key APK . The domain may belong to u2 or to
some other user; u2 only needs to know the public parame-
ters for this domain in order to encrypt.
u2 looks for a symmetric key for this group by invoking
u2.SS.get(H(AS, APK )). Such a key would exist if u2 had
previously encrypted or decrypted messages for this group.