# 域委派
学习之前最好先搞懂kerberos协议：  
可以参考我的blog  
## 是什么？
域委派是指将域内用户的权限委派给服务账户，使得服务账号能够以用户的权限在域内展开活动。
**简单的说就是如果一个服务账号上设置了委派属性，那么这个服务就能够以用户权限在域内进行其他操作。翻译过来就是服务能够被（某个用户）委派来进行其他操作。**
当然，委派的前提是被委派的用户未设置成不能被委派
委派的简单的一个场景就是如图，域内用户都通过IIS统一认证平台来登录，而IIS需要使用数据库SQLSERVER（获其他）来支撑用户的访问。但它本身的权限iis不支持它访问SQLSERVER。
或者说，域内的文件服务器，想要实现每个人不同的权限，能看到不同的目录。如果没有域委派这个机制,那么所有人成功通过IIS认证后，存在的权限都只是IIS的权限，当访问文件服务器的时候，文件服务器都只认为是IIS服务在访问它，无法做到详细划分权限的功能。
因此委派就是解决这个问题的，通过设置委派属性，可以让IIS模拟用户，验证并访问后端的其他服务器以获取相应的资源。
## 谁能被设置委派属性
委派分为无约束委派，传统的约束委派以及基于资源的约束委派。  
**在域中，只有 服务账号 和 主机账号 才具有委派属性。**  
主机账号就是AD活动目录中 Computers 中的计算机，也可以称为机器账号(一个普通域用户默认最多可以创建十个主机账号)。 服务账号（Service
Account）是域内用户的一种类型，是服务器运行服务时所用的账号，将服务运行起来并加入域。例如SQL Server 在安装时，会在域内自动注册服务账号
SQLServiceAccount。也可以将域用户通过注册SPN变为服务账号。
## 设置委派
### 机器用户设置委派
直接使用AD目录管理器操作。
此时查看这个机器账号的ACL属性，发现其userAccountControl包含字段TRUSTED_FOR_DELEGATION字段
### 域用户注册SPN设置委派（服务账号设置委派）
PS：SPN的相关可以看我的上一篇文章
**setspn -s testSPN/777.ruyue.com momo #首先在域账号momo上注册一个SPN  
只后就可以在这个域账号上设置委派属性了。**
# 非约束性委派
## 原理
非约束性委派其实就是权限最大的一种委派方式，即完全的获取到你这个用户的权限（相当于获取到这个用户的TGT）。  
对于非约束性委派，服务账号可以获取被委派用户的TGT，并将TGT缓存到LSASS进程中，从而服务账号可使用该TGT，模拟用户访问任意服务。
**大致流程：当用户访问服务A的时，会向KDC认证身份，此时KDC通过认证在发放ST前，会检查一下服务A的委派属性，如果是非约束性委派，就会把用户的TGT放在ST票据中并一起返还给用户，用户会拿着这个带着TGT的ST去访问服务A。服务A就成功获取了用户的TGT，相当于拿到了用户的所有权限。**
## 特点
1.非约束性委派的目标的ACL属性中会包含：TRUSTED_FOR_DELEGATION。  
2.委派的设置需要SeEnableDelegation特权，通常仅域管理员有。  
3.域控主机默认是非约束性委派。
## 基础利用
从上面它的原理已经很清楚了，服务A直接拿到用户的TGT并缓存在内存中，那么我们只需要拿下一台设置了非约束性委派的机子后，诱导域管访问这台机子，这样，就能够获取到域管的TGT即金票了。
具体流程就是：
  * 寻找配置了非约束性委派的服务或主机账号
  * 诱导其他账号访问配置了非约束性委派的服务或主机。
  * 导出票据，进行票据注入。
首先是获取存在非约束性委派的机器账号。（获取拿下机子是存在非约束性委派的，这样我们拿下这台机子就可能搞下域控了）
    Get-Netcomputer -Unconstrained | select name 
    Get-NetUser -Unconstrained | select name
使用域控去访问目标主机。
此时exchange这台机子内存就已经存在了域控的TGT。这里我们用mimikatz把内存中的票据给导出来。
**(注意，这里我是用本地管理员账号登录exchange这台机子的)**
    privilege::debug
    sekurlsa::tickets /export
得到TGT之后，我们用ptt将票据注入到当前会话后，用dcsync导出域控中所有用户的hash，最后就可以用krbtgt用户的hash去生成黄金票据了。
    kerberos::ptt [0;181868]PI:EMAIL //导入票据
    kerberos::list //查看票据
导出所有hash，保证可以随时做金票。
    lsadump::dcsync /domain:ruyue.com /all /csv
## spooler打印机BUG+非约束性委派
### 原理
Lee（ Print System
Remote
Protocol，Windows打印系统远程协议）中一个古老但又默认启用的方法，这个协议只使用了基于命名管道的RPC，因此，源和目标服务器会通过445端口建立网络连接。也就说具备域用户账户权限的攻击者可以使用MS-RPRN的RpcRemoteFindFirstPrinterChangeNotification(Ex)方法来强迫运行Spooler服务的任何主机通过Kerberos或者NTLM向攻击者选择的目标发起身份认证请求。  
利用这个协议，我们就能够让域管的机器账号强制与我们拿下的非约束性委派的机子强行建立连接，从而得到域管的机器账号的TGT。
### 利用
涉及的工具：
 （需要自己去编译）
从上面我们不难看出，想要利用成功，一方面我们需要要求目标的打印机服务是正常的，也就是Print
spooler服务（默认都是开启的）。同时我们需要拿下非约束性委派机子的本地管理员账号（用于读内存的票据），还有一个域内的普通账号（用于MS-RPRN协议）。
具体操作流程就是先在非约束性委派机子上以本地管理员权限使用mimikatz或者Rubeus监听来访者的TGT，然后使用普通域账号强制让
**域控的机器账号** 和我们进行认证。
因为前面我们用的就是mimikatz，所以这里我也用mimikatz，不用网上用的比较多的Rubeus来监听TGT（主要是Rubeus依赖.net3.5环境，想要用还得在目标机子上装个.net环境）。
首先，我们开启mimikatz，权限给上
    privilege::debug
然后runas以域普通账号运行一个powershell，接着运行我们的exp，强制让域控机器账号和我们的进行认证
`runas /user:ruyue.com\momo powershell`
SpoolSample.exe dc exchange
#这里第一个参数是发起认证的主机，在这里就是域控。第二个参数则是存在非约束性委派的主机。需要注意的是，这里必须使用机器名，不能使用ip。
注意：在执行完上述命令后， **一定要快速的使用mimikatz去导出票据（慢了就没了）** 。多次都抓不到的话推荐使用rebeus去尝试。
    sekurlsa::tickets /export
后面的操作其实就和前面一样了，把票据注入当前会话，获取krbtgt的hash，得到金票，随意伪造票据。直接拿下域控。这里不再赘述。
### 其他想法
从上面的流程我们不难看出，最难的部分其实就是怎么让域控和我们进行NTLM身份认证。  
而这里我们有以下几种方法：  
①说服受害者用户或机子向我们的非约束性委派服务器进行身份验证。这里可以辅佐一些网络协议的攻击。  
比如比较常见的链路层地址解析协议 (ARP)，通过 ARP 中毒来说服目标受害者认为恶意服务器实际上是文件服务器、域控制器或网络中已经存在的任何合法服务器。  
从而导致它与我们的服务器进行NTLM认证。
②钓鱼，利用特殊的网络协议如 SMB、HTTP、RDP、LDAP 等，通过精心设计PDF 、 Microsoft Word 和 Microsoft
Access等文件，以在打开时引发 NTLM 身份验证请求。  
# 约束性委派
## 原理
不理解的建议多看kerberos协议。
由于非约束委派的不安全性，微软在windows
server2003中引入了约束委派，对Kerberos协议进行了拓展，引入了S4U。其中S4U支持两个子协议：
  * Service for User to Proxy(S4U2proxy)约束委派
  * Service for User to Self(S4U2self)协议转换
### S4U2Proxy (约束委派)
还是以一个例子来理解。  
当用户去带着ST1去访问服务A的时候，服务A如果需要访问服务B，就会使用S4U2Proxy协议将用户发送来的ST1转发给TGS并请求一个ST2。此时TGS会检查服务A的委派属性，如果服务A能够委派给服务B，那么就会返回ST2给服务A，此后服务A会拿着ST2以momo的身份去访问服务B。  
**其实约束委派就是限制了S4U2proxy扩展的范围。配置它后，约束委派将限制服务A能委派的服务范围。而且用的是ST，不至于像TGT那样权限那么大。**
### S4U2Self(协议转换)
上图中用户是通过Kerberos协议与服务A进行认证的，而当用户以其他方式(如NTLM认证，基于表单的认证等方式)与Web服务器进行认证后，用户是无法向Web服务器提供请求该服务的服务票据ST1的，因而服务器A也无法进一步使用S4U2Proxy协议请求访问服务B。  