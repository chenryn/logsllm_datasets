SELECT后面显示的列里面只能显示分组的列，比如我们这里对城市分组了，那幺子
查询里面就只能显示城市列，如果要显示其他列，比如要还要显示"省份"
SELECT 城市,省份 FROM Customers
GROUP BY 城市
HAVING COUNT(1)>1
会提示如下错误：
所以我们将筛选出来符合条件的内容，通过子查询再传递给外面的主查询。主查询
就可以不受GROUP BY的约束显示你想显示的内容了。
第二十六章 事务的用法
26.1 什么是事务
事务是在数据库上按照一定的逻辑顺序执行的任务序列，既可以由用户手动执行，
也可以由某种数据库程序自动执行。
事务实际上就是对数据库的一个或者多个更改。当你在某张表上创建更新或者删除
记录的时，你就已经在使用事务了。控制事务以保证数据完整性，并对数据库错误
做出处理，对数据库来说非常重要。
实践中，通常会将很多 SQL 查询组合在一起，并将其作为某个事务一部分来执行。
26.2 事务的属性
事务具有以下四个标准属性，通常用缩略词 ACID 来表示：
原子性：保证任务中的所有操作都执行完毕；否则，事务会在出现错误时终止，并
回滚之前所有操作到原始状态。
一致性：如果事务成功执行，则数据库的状态得到了进行了正确的转变。
隔离性：保证不同的事务相互独立、透明地执行。
持久性：即使出现系统故障，之前成功执行的事务的结果也会持久存在。
26.3事务控制
有四个命令用于控制事务：
COMMIT：提交更改；
ROLLBACK：回滚更改；
SAVE：在事务内部创建一系列可以 ROLLBACK 的还原点；
SET TRANSACTION：命名事务；
26.4 COMMIT 命令
COMMIT 命令用于保存事务对数据库所做的更改。
COMMIT 命令会将自上次 COMMIT 命令或者 ROLLBACK 命令执行以来所有
的事务都保存到数据库中。
COMMIT 命令的语法如下所示：
COMMIT;
26.5 COMMIT事务实例
考虑 Customers表，表中的记录如下所示：
下面的示例将会删除表中姓名为"张三"的记录，然后将更改提交（COMMIT）到数
据库中。
BEGIN TRANSACTION
DELETE FROM customers_bak WHERE 姓名='张三'
COMMIT;
上述语句将会从表中删除一行记录，再执行 SELECT 语句将会得到如下结果：
注意：SQL Server默认会自动提交事务，要取消自动提交事务可以执行如下操作，
在SSMS中的菜单栏中选择【工具】——【选项】——【查询执行】——【ANSI】
在界面右边勾选上SET IMPLICIT_TRANSACTIONS，如下图：
设置完后需重新启动SMSS方可生效。
26.6 ROLLBACK 命令
ROLLBACK 命令用于撤销尚未保存到数据库中的事务。
ROLLBACK 命令只能撤销自上次 COMMIT 命令或者 ROLLBACK 命令执行以来
的事务。
ROLLBACK 命令的语法如下所示：
ROLLBACK;
26.7 ROLLBACK示例
考虑 Customers表，表中的记录如下所示：
下面的示例将会从表中删除城市为"广州"的记录，然后回滚（ROLLBACK）对数据
库所做的更改。
BEGIN TRANSACTION
DELETE FROM Customers WHERE 城市='广州'
ROLLBACK;
结果是删除操作并不会对数据库产生影响。现在，执行 SELECT 语句将会得到如下
结果：
26.8 SAVE命令
SAVE 是事务中的一个状态点，使得我们可以将事务回滚至特定的点，而不是将整
个事务都撤销。
SAVE 命令的记录如下所示：
SAVE TRANSACTION SAVE_NAME;
该命令只能在事务语句之间创建保存点（SAVE）。ROLLBACK 命令可以用于撤销
一系列的事务。
回滚至某一保存点的语法如下所示：
ROLLBACK TRANSACTION SAVE_NAME
下面的示例中，你计划从 Customers 表中删除三条不同的记录，并在每次删除之
前创建一个保存点（SAVE），从而使得你可以在任何任何时候回滚到任意的保存点，
以恢复数据至其原始状态。
注意：Oracle和Mysql的保存点语法与上述不同，语法为
SVAEPOINT SAVEPOINT_NAME
26.9 SAVE示例
考虑 Customers 表，表中的记录如下所示：
操作序列如下所示：
BEGIN TRANSACTION
SAVE TRANSACTION SP1
DELETE FROM Customers WHERE 姓名='张三'
SAVE TRANSACTION SP2
DELETE FROM Customers WHERE 姓名='李四'
SAVE TRANSACTION SP3
DELETE FROM Customers WHERE 姓名='王五'
现在，三次删除操作已经生效了，如果此时你改变主意决定回滚至名字为 SP2 的保
存点，由于 SP2 于第一次删除操作之后创建，所以后两次删除操作将会被撤销。
ROLLBACK TRANSACTION SP2
COMMIT;
注意，由于你将数据库回滚至 SP2，所以只有第一次删除真正起效了：
26.10 SET TRANSACTION 命令
SET TRANSACTION 命令可以用来初始化数据库事务，指定随后的事务的各种特
征。
例如，你可以将某个事务指定为只读或者读写。
SET TRANSACTION 命令的语法如下所示：
SET TRANSACTION [ READ WRITE | READ ONLY ];
26.11 批注
事务在SQL应用中很广泛，特别是针对一些读写问题时，使用事务可以很好的规避
意外(脏读，幻读，不可重复读)。而且事务在出来误操作时也有很好的预防作用，特
别是像SQL Server这种自动提交的数据库平台，使用事务能防止误删和误更新。
第二十七章 常用数学函数
本章主要介绍日常使用的数学函数，包括MAX(),MIN(),COUNT(),AVG(),SUM()等。
27.1 MAX() 函数
MAX() 函数返回所选列的最大值。
MAX() 语法
SELECT MAX(column_name)
FROM table_name
WHERE condition;
下面是选自 "Products" 表的数据：
MAX() 实例
以下SQL语句查找最昂贵的产品的价格：
SELECT MAX(价格) AS 最高价格 FROM Products;
结果为：
27.2 MIN() 函数
MIN() 函数返回所选列的最小值。
MIN() 语法
SELECT MIN(column_name)
FROM table_name
WHERE condition;
MIN() 实例
以下SQL语句查找最便宜的产品的价格：
SELECT MIN(价格) AS 最低价格
FROM Products;
结果为：
27.3 COUNT()函数
COUNT() 函数返回符合指定条件的行数。
COUNT(column_name) 语法
COUNT(column_name) 函数返回指定列的值的数目（NULL 不计入）：
SELECT COUNT(column_name)
FROM table_name
WHERE condition;
COUNT(column_name) 实例
以下SQL语句查找产品数量：
SELECT COUNT(产品ID) FROM Products;
结果为：
注意：返回的函数如果不重命名，在显示的时候以(无列名)标注。
COUNT(*) 语法
COUNT(*) 函数返回表中的记录数：
SELECT COUNT(*)
FROM table_name
WHERE condition;
COUNT(*)实例
下面的 SQL 语句计算 "Products" 表中的产品种类：
SELECT COUNT(*) FROM Products;
结果为：
注意：结果与上面的 COUNT(column_name)一致，但是效率上有区别，
COUNT(column_name)在数据量大时效率会快些。
COUNT(DISTINCT column_name) 语法
COUNT(DISTINCT column_name) 函数返回指定列的不同值的数目：
SELECT COUNT(DISTINCT column_name)
FROM table_name;
注释：COUNT(DISTINCT) 适用于 ORACLE 和 Microsoft SQL Server，但是无法
用于 Microsoft Access。
COUNT(DISTINCT column_name) 实例
下面的 SQL 语句计算 "Products" 表中不同供应商的数目：
SELECT COUNT(DISTINCT 供应商ID) FROM Products;
结果为：
27.4 AVG() 函数
AVG() 函数返回数字列的平均值。
AVG() 语法
SELECT AVG(column_name)
FROM table_name
WHERE condition;
AVG() 实例
以下SQL语句查找所有产品的平均价格：
SELECT AVG(价格) FROM Products;
结果为：
下面的 SQL 语句选择价格高于平均价格的 "名称" 和 "价格" 记录：
SELECT 名称, 价格 FROM Products
WHERE 价格>
(SELECT AVG(价格) FROM Products);
结果为：
其实就是找到价格大于49.6的产品和价格。
27.5 SUM()函数
SUM() 函数返回数字列的总和。
SUM() 语法
SELECT SUM(column_name)
FROM table_name
WHERE condition;
SUM() 实例
下面的 SQL 语句查找 "Products" 表的 "价格" 字段的总数：
SELECT SUM(价格) FROM Products;
结果为：
第二十八章 常用日期函数
日期函数是数据库中经常需要使用到的，本期将常用的几个日期函数给小伙伴做详
细的介绍。
28.1 GETDATE()
GETDATE()函数用于返回当前数据库系统的日期和时间，返回值的类型为datetime。
返回值舍入到最近的秒小数部分，精度为.333秒数据库十七偏移量不包含在内。
SELECT GETDATE()
28.2 GETUTCDATE()
GETUTCDATE()函数返回当前UTC(世界标准时间)日期值，即格林尼治时间（GMT）
SELECT GETUTCDATE()
28.3 YEAR()
YEAR()函数以 int 数据类型的格式返回特定日期的年度信息。其语法格式为
YEAR(date数据)。
SELECT YEAR(GETDATE())
注意：函数之间只要符合语法规范是可以嵌套的。
28.4 MONTH()
MONTH()函数以 int 数据类型的格式返回特定日期的月份信息。其语法格式为
MONTH(date数据)。
SELECT MONTH(GETDATE())
28.5 DAY()
DAY()函数以 int 数据类型的格式返回特定日期的天数信息。其语法格式为
DAY(date数据)。
SELECT DAY(GETDATE())
28.6 DATEPART(dp,d)
DATEPART(dp,d)函数返回指定日期中相应的部分的整数值。
DATEPART语法格式
DATEPART( datepart , date数据 )
datepart取值
年度 YEAR、YYYY、YY
SELECT DATEPART(YEAR,GETDATE())
-- 2019
月份 MONTH、MM、M
SELECT DATEPART(MONTH,GETDATE())
-- 2
日期 DAY、DD、D
SELECT DATEPART(DAY,GETDATE())
-- 14
周 WEEK、WK、WW
SELECT DATEPART(WEEK,GETDATE())
-- 7 (一年中的第7周)
每周星期几 WEEKDAY、DW
SELECT DATEPART(WEEKDAY,GETDATE())
-- 5 (是从星期日开始计算往后的第几天)
季度 QUARTER、QQ、Q
SELECT DATEPART(QUARTER,GETDATE())
-- 1
一年中第几天 DAYOFYEAR、DY、Y
SELECT DATEPART(DAYOFYEAR,GETDATE())
-- 45
小时 HOUR、HH
SELECT DATEPART(HOUR,GETDATE())
-- 23 (晚上11点还在写公众号的苦逼小编)
分钟 MINUTE、MI、N
SELECT DATEPART(MINUTE,GETDATE())
-- 11
秒 SECOND、SS、SS
SELECT DATEPART(SECOND,GETDATE())
-- 45
毫秒 MILLISECOND、MS
SELECT DATEPART(MILLISECOND,GETDATE())
-- 120
28.7 DATENAME(dp,d)
DATENAME(dp,d)函数返回指定日期中相应的部分的字符串，用法与 DATEPART
类似。
SELECT DATENAME(MONTH,GETDATE())
-- 02
SELECT DATENAME(WEEKDAY,GETDATE())
-- 星期四
SELECT DATENAME(DAY,GETDATE())
-- 14
SELECT DATENAME(WEEK,GETDATE())
-- 7 一年中的第7周
SELECT DATENAME(DAYOFYEAR,GETDATE())
-- 45 一年中的第45天
28.8 DATEADD(dp,num,d)
DATEADD(dp,num,d)函数用于执行日期的加运算，返回指定日期值加上一个时间
段后的新日期。dp指定日期中进行加法运算的部分值，
例如：YEARMONTH,DAY,HOUR,MINUTE,SECOND,MILLISECOND 等，num指
定与dp相加的值，如果该值为非整数值，将舍弃该值的小数部分，d为执行加法运
算的日期。
DATEADD语法格式
dateadd (datepart,numer,date数据)
numer：用于与detepart相加的值。如果指定了非整数值，则将舍弃该值的小数部
分。
date数据：一个用于解析为time、date、smalldatetime、datetime、datetime2、
或datetimeoffset值的表达式、列表达式、用户定义的变量或字符串文字。
datepart：时间部分
SELECT DATEADD(YEAR,2,GETDATE())
-- 2021-02-14 23:17:52.550 (年份往后增加2年)
SELECT DATEADD(MONTH,2,GETDATE())
-- 2019-04-14 23:17:52.550 (月份往后增加2个月)
SELECT DATEADD(DAY,2,GETDATE())
-- 2019-02-16 23:17:52.550 (日期往后增加2天)
SELECT DATEADD(YEAR,-2,GETDATE())
-- 2017-02-14 23:37:09.477 (年份往前减少2年)
SELECT DATEADD(MONTH,-2,GETDATE())
-- 2018-12-14 23:37:09.477 (月份往前减少2个月)
SELECT DATEADD(DAY,-2,GETDATE())
-- 2019-02-12 23:37:09.477 (日期往前减少2天)
28.9 DATEDIFF(dp,stardate,enddate)
datediff 函数将两个特定的日期数据相减，得到的结果可以按照 detepart 指定的
格式返回特定的数据。
语法格式
datediff(datepart,startdate,enddate)
执行中将使用enddate减以startdate的值，如果startdate晚于enddate将返回
负值。执行结果如果超出整数范围将提示错误。
SELECT DATEDIFF(YEAR,'2018-5-19','2019-2-14')
-- 1
SELECT DATEDIFF(YEAR,'2020-5-19','2019-2-14')
-- -1
SELECT DATEDIFF(MONTH,'2018-2-14','2019-8-11')
-- 18
SELECT DATEDIFF(MONTH,'2020-2-14','2019-8-11')
-- -6
第二十九章 常用字符处理函数
29.1 ASCII()
语法
ASCII(字符串)
返回字符串表达式中最左侧的ASCII代码值
示例：
SELECT ASCII('S'),ASCII('SQL')
29.2 CHAR()
语法
CHAR(字符串)
将整数类型的ASCII值转换为对应的字符
示例：
SELECT CHAR(83)
29.3 LEN()
语法
LEN(需要获取长度的字符串)
返回：字符串的长度
示例：
SELECT LEN('SQL学习之路')
29.4 LEFT()
语法