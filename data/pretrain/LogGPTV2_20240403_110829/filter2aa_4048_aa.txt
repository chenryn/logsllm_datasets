# 数据访问
**什么是JDBC？**
Java 数据库连接（Java Database Connectivity，简称 JDBC）是 Java 语言中用来规范客户端程序如何来访问数据库的应用程序接口，提供了诸如查询和更新数据库中数据的方法。JDBC 也是 Sun Microsystems 的商标。我们通常说的 JDBC 是面向关系型数据库的。
JDBC API 主要位于 JDK 中的 java.sql 包中（之后扩展的内容位于 javax.sql 包中），主要包括（斜体代表接口，需驱动程序提供者来具体实现）：
- DriverManager：负责加载各种不同驱动程序（Driver），并根据不同的请求，向调用者返回相应的数据库连接（Connection）。
- Driver：驱动程序，会将自身加载到 DriverManager 中去，并处理相应的请求并返回相应的数据库连接（Connection）。
- Connection：数据库连接，负责与进行数据库间通讯，SQL 执行以及事务处理都是在某个特定 Connection 环境中进行的。可以产生用以执行 SQL 的 Statement。
- Statement：用以执行 SQL 查询和更新（针对静态 SQL 语句和单次执行）。PreparedStatement：用以执行包含动态参数的 SQL 查询和更新（在服务器端编译，允许重复执行以提高效率）。
- CallableStatement：用以调用数据库中的存储过程。
- SQLException：代表在数据库连接的建立和关闭和 SQL 语句的执行过程中发生了例外情况（即错误）。
**什么是数据源？**
可以看到，在 java.sql 中并没有数据源（Data Source）的概念。这是由于在 java.sql 中包含的是 JDBC 内核 API，另外还有个 javax.sql 包，其中包含了 JDBC 标准的扩展 API。而关于数据源（Data Source）的定义，就在 javax.sql 这个扩展包中。
实际上，在 JDBC 内核 API 的实现下，就已经可以实现对数据库的访问了，那么我们为什么还需要数据源呢？主要出于以下几个目的：
1. 封装关于数据库访问的各种参数，实现统一管理
2. 通过对数据库的连接池管理，节省开销并提高效率
---
## JdbcTemplate
**数据源配置**
首先，为了连接数据库需要引入 jdbc 支持，在 pom.xml 中引入如下配置：
```xml
    org.springframework.boot
    spring-boot-starter-jdbc
```
**嵌入式数据库支持**
嵌入式数据库通常用于开发和测试环境，不推荐用于生产环境。Spring Boot 提供自动配置的嵌入式数据库有 H2、HSQL、Derby，你不需要提供任何连接配置就能使用。
比如，我们可以在 pom.xml 中引入如下配置使用 HSQL
```xml
    org.hsqldb
    hsqldb
    runtime
```
**连接生产数据源**
以 MySQL 数据库为例，先引入 MySQL 连接的依赖包，在 pom.xml 中加入：
```xml
    mysql
    mysql-connector-java
```
在 src/main/resources/application.properties 中配置数据源信息
```conf
spring.datasource.url=jdbc:mysql://localhost:3306/test
spring.datasource.username=dbuser
spring.datasource.password=dbpass
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
```
注意：因为 Spring Boot 2.1.x 默认使用了 MySQL 8.0 的驱动，所以这里采用 com.mysql.cj.jdbc.Driver，而不是老的 com.mysql.jdbc.Driver.
**连接JNDI数据源**
当你将应用部署于应用服务器上的时候想让数据源由应用服务器管理，那么可以使用如下配置方式引入 JNDI 数据源。
```
spring.datasource.jndi-name=java:jboss/datasources/customers
```
## 使用JdbcTemplate操作数据库
Spring 的 JdbcTemplate 是自动配置的，你可以直接使用 @Autowired 或构造函数（推荐）来注入到你自己的 bean 中来使用。
**准备数据库**
先创建 User 表，包含属性 name、age。可以通过执行下面的建表语句：：
```sql
CREATE TABLE `User` (
  `name` varchar(100) COLLATE utf8mb4_general_ci NOT NULL,
  `age` int NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
```
**编写领域对象**
根据数据库中创建的 User 表，创建领域对象：
```java
@Data
@NoArgsConstructor
public class User {
    private String name;
    private Integer age;
}
```
这里使用了 Lombok 的 @Data 和 @NoArgsConstructor 注解来自动生成各参数的 Set、Get 函数以及不带参数的构造函数。
**编写数据访问对象**
定义包含有插入、删除、查询的抽象接口 UserService
```java
public interface UserService {
    /**
     * 新增一个用户
     *
     * @param name
     * @param age
     */
    int create(String name, Integer age);
    /**
     * 根据name查询用户
     *
     * @param name
     * @return
     */
    List getByName(String name);
    /**
     * 根据name删除用户
     *
     * @param name
     */
    int deleteByName(String name);
    /**
     * 获取用户总量
     */
    int getAllUsers();
    /**
     * 删除所有用户
     */
    int deleteAllUsers();
}
```
通过 JdbcTemplate 实现 UserService 中定义的数据访问操作
```java
@Service
public class UserServiceImpl implements UserService {
    private JdbcTemplate jdbcTemplate;
    UserServiceImpl(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }
    @Override
    public int create(String name, Integer age) {
        return jdbcTemplate.update("insert into USER(NAME, AGE) values(?, ?)", name, age);
    }
    @Override
    public List getByName(String name) {
        List users = jdbcTemplate.query("select NAME, AGE from USER where NAME = ?", (resultSet, i) -> {
            User user = new User();
            user.setName(resultSet.getString("NAME"));
            user.setAge(resultSet.getInt("AGE"));
            return user;
        }, name);
        return users;
    }
    @Override
    public int deleteByName(String name) {
        return jdbcTemplate.update("delete from USER where NAME = ?", name);
    }
    @Override
    public int getAllUsers() {
        return jdbcTemplate.queryForObject("select count(1) from USER", Integer.class);
    }
    @Override
    public int deleteAllUsers() {
        return jdbcTemplate.update("delete from USER");
    }
}
```
---
## Hikari
由于 Spring Boot 的自动化配置机制，大部分对于数据源的配置都可以通过配置参数的方式去改变。只有一些特殊情况，比如：更换默认数据源，多数据源共存等情况才需要去修改覆盖初始化的 Bean 内容。
在 Spring Boot 自动化配置中，对于数据源的配置可以分为两类：
通用配置：以 `spring.datasource.*` 的形式存在，主要是对一些即使使用不同数据源也都需要配置的一些常规内容。比如：数据库链接地址、用户名、密码等。这里就不做过多说明了，通常就这些配置：
```conf
spring.datasource.url=jdbc:mysql://localhost:3306/test
spring.datasource.username=root
spring.datasource.password=123456
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
```
数据源连接池配置：以 `spring.datasource..*` 的形式存在，比如：Hikari 的配置参数就是 `spring.datasource.hikari.*` 形式。下面这个是我们最常用的几个配置项及对应说明：
```conf
spring.datasource.hikari.minimum-idle=10
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.idle-timeout=500000
spring.datasource.hikari.max-lifetime=540000
spring.datasource.hikari.connection-timeout=60000
spring.datasource.hikari.connection-test-query=SELECT 1
```
这些配置的含义：
- spring.datasource.hikari.minimum-idle: 最小空闲连接，默认值 10，小于 0 或大于 maximum-pool-size，都会重置为 maximum-pool-size
- spring.datasource.hikari.maximum-pool-size: 最大连接数，小于等于 0 会被重置为默认值 10；大于零小于 1 会被重置为 minimum-idle 的值
- spring.datasource.hikari.idle-timeout: 空闲连接超时时间，默认值 600000（10 分钟），大于等于 max-lifetime 且 max-lifetime>0，会被重置为 0；不等于 0 且小于 10 秒，会被重置为 10 秒。
- spring.datasource.hikari.max-lifetime: 连接最大存活时间，不等于 0 且小于 30 秒，会被重置为默认值 30 分钟. 设置应该比 mysql 设置的超时时间短
- spring.datasource.hikari.connection-timeout: 连接超时时间：毫秒，小于 250 毫秒，否则被重置为默认值 30 秒
- spring.datasource.hikari.connection-test-query: 用于测试连接是否可用的查询语句
---
## Druid
**配置 Druid 数据源**
在 pom.xml 中引入 druid 官方提供的 Spring Boot Starter 封装。
```xml
    com.alibaba
    druid-spring-boot-starter
    1.1.21
```
在 application.properties 中配置数据库连接信息。
Druid 的配置都以 spring.datasource.druid 作为前缀，所以根据之前的配置，稍作修改即可：
```conf
spring.datasource.druid.url=jdbc:mysql://localhost:3306/test
spring.datasource.druid.username=root
spring.datasource.druid.password=
spring.datasource.druid.driver-class-name=com.mysql.cj.jdbc.Driver
```
配置 Druid 的连接池
与 Hikari 一样，要用好一个数据源，就要对其连接池做好相应的配置，比如下面这样：
```conf
spring.datasource.druid.initialSize=10
spring.datasource.druid.maxActive=20
spring.datasource.druid.maxWait=60000
spring.datasource.druid.minIdle=1
spring.datasource.druid.timeBetweenEvictionRunsMillis=60000
spring.datasource.druid.minEvictableIdleTimeMillis=300000
spring.datasource.druid.testWhileIdle=true
spring.datasource.druid.testOnBorrow=true
spring.datasource.druid.testOnReturn=false
spring.datasource.druid.poolPreparedStatements=true
spring.datasource.druid.maxOpenPreparedStatements=20
spring.datasource.druid.validationQuery=SELECT 1
spring.datasource.druid.validation-query-timeout=500
spring.datasource.druid.filters=stat
```
**Druid监控**
在 pom.xml 中引入 spring-boot-starter-actuator 模块
```xml
    org.springframework.boot
    spring-boot-starter-actuator
```
在 application.properties 中添加 Druid 的监控配置
```conf
spring.datasource.druid.stat-view-servlet.enabled=true
spring.datasource.druid.stat-view-servlet.url-pattern=/druid/*
spring.datasource.druid.stat-view-servlet.reset-enable=true
spring.datasource.druid.stat-view-servlet.login-username=admin
spring.datasource.druid.stat-view-servlet.login-password=admin
```
上面的配置主要用于开启 stat 监控统计的界面以及监控内容的相关配置，具体释意如下：
- spring.datasource.druid.stat-view-servlet.url-pattern：访问地址规则
- spring.datasource.druid.stat-view-servlet.reset-enable：是否允许清空统计数据
- spring.datasource.druid.stat-view-servlet.login-username：监控页面的登录账户
- spring.datasource.druid.stat-view-servlet.login-password：监控页面的登录密码
针对之前实现的 UserService 内容，我们创建一个 Controller 来通过接口去调用数据访问操作：
```java
@Data
@AllArgsConstructor
@RestController
public class UserController {
    private UserService userService;
    @PostMapping("/user")
    public int create(@RequestBody User user) {
        return userService.create(user.getName(), user.getAge());
    }
    @GetMapping("/user/{name}")
    public List getByName(@PathVariable String name) {
        return userService.getByName(name);
    }
    @DeleteMapping("/user/{name}")
    public int deleteByName(@PathVariable String name) {
        return userService.deleteByName(name);
    }
    @GetMapping("/user/count")
    public int getAllUsers() {
        return userService.getAllUsers();
    }
    @DeleteMapping("/user/all")
    public int deleteAllUsers() {
        return userService.deleteAllUsers();
    }
}
```
完成上面所有配置之后，启动应用，访问 Druid 的监控页面 http://localhost:8080/druid/，可以看到登录页面
- Sorry, you are not permitted to view this page.
    deny优先于allow，如果在deny列表中，就算在allow列表中，也会被拒绝。如果allow没有配置或者为空，则允许所有访问
    ```conf
    spring.datasource.druid.stat-view-servlet.allow=
    ```
---
## Spring Data JPA
在实际开发过程中，对数据库的操作大多可以归结为：“增删改查”。就最为普遍的单表操作而言，除了表和字段不同外，语句几乎都是类似的，开发人员需要写大量类似而枯燥的语句来完成业务逻辑。
为了解决这些大量枯燥的数据操作语句，诞生了非常多的优秀框架，比如：Hibernate。通过整合Hibernate，我们能够以操作Java实体的方式来完成对数据的操作，通过框架的帮助，对Java实体的变更最终将自动地映射到数据库表中。
在Hibernate的帮助下，Java实体映射到数据库表数据完成之后，再进一步解决抽象各个Java实体基本的“增删改查”操作，我们通常会以泛型的方式封装一个模板Dao来进行抽象简化，但是这样依然不是很方便，我们需要针对每个实体编写一个继承自泛型模板Dao的接口，再编写该接口的实现。虽然一些基础的数据访问已经可以得到很好的复用，但是在代码结构上针对每个实体都会有一堆Dao的接口和实现。
由于模板Dao的实现，使得这些具体实体的Dao层已经变的非常“薄”，有一些具体实体的Dao实现可能完全就是对模板Dao的简单代理，并且往往这样的实现类可能会出现在很多实体上。Spring Data JPA的出现正可以让这样一个已经很“薄”的数据访问层变成只是一层接口的编写方式。比如，下面的例子：
```java
public interface UserRepository extends JpaRepository {
    User findByName(String name);
    @Query("from User u where u.name=:name")
    User findUser(@Param("name") String name);
}
```
在 pom.xml 中添加相关依赖，加入以下内容：
```xml
    org.springframework.boot
    spring-boot-starter-data-jpa
```
在 application.xml 中配置：数据库连接信息（如使用嵌入式数据库则不需要）、自动创建表结构的设置，例如使用 mysql 的情况如下：
```conf
spring.datasource.url=jdbc:mysql://localhost:3306/test
spring.datasource.username=root
spring.datasource.password=