second
thizd
dourth
378
第8章
---
## Page 411
9
子查询
查询中的查询
每个人都将注意到我是如
此的（闭月差花？沉鱼落
雁？美若天仙…啊，都无法
形容我的魅力啊！）
Jack，请给我被分成两部分的问题，谢谢。有了联接的确很好，但有时
要问数据库的问题不只一个。或者需要把甲查询的结果作为乙查询的输入。这时
候就该是子查询出场了。子查询有助于避免数据重复，让查询更加动态灵活，甚
至能引入高端概念。（最后一项不一定会成真，不过三项好处中有两项是真的也
很好嘛！）
进入新章节
379
---
## Page 412
gregs_list也可以找工作了！
Greg踏入招聘服务行列
到目前为止，gregs_list数据库是名符其实的月下
老人，Greg利用数据库帮助了许多单身的朋友，但是
自己却分文未取。
Greg想到他可以开始经营招聘业务，只要把数据库中
的联络人与可能的工作进行配对。
有了新的招聘功能，我的出头之日就
在眼前啦！
Greg's
Greg知道数据库需要加入新表，专供对招聘服
Recruiting
务有兴趣的联络人使用。他决定另外把这些信
Service
息单独存储在具有一对一关系的表中，而不是
把信息放在my_contacts表中。这样做有两
个原因。
第一点，并非my_contacts中的所有人都对此
服务感兴趣。因此，独立成另外一张表可以避
免在my_contacts中出现NULL值。
第二点，Greg将来或许需要雇用其他帮手，联
络人的薪水算是敏感信息。只让特定人士有权
访问敏感信息可能更妥当。
380
第9章
---
## Page 413
子查询
Greg加入了更多表
Greg在他数据库中添加了追踪理想职务与理想薪资的表，还有追
踪联络人的当前职务和当前薪资的表。他还创建了一个包含职缺
信息的简单表。
省前职务
理想职务
开放职缺
T
job_current
job_desired
job_listings
contact_idO
contact_idO
job_id 0
title
title
title
salary
salary_low
salary
新
start_date
salary_high
zip
表
available
description
years_exp
contact_interest
interests
contact_id
interestid0
+0
my_contacts
interest
contact_ido
interest_id 
profession
prof_id O
last_name
0+
原
first_name
有
profession
phone
contact_seeking
seeking
表
zip_code
email
gender
contact_id
-seeking_ido
zip_codeo
birthday
0+r
seeking
city
prof_id
seeking_id
state
→zip_code
0+π
status
 p!sns
status_id0
status
因为新表都与my_contacts表有一对一关系，
所以使用自然联接（naturaljoin）就能轻松地完
成工作。
当前位置
381
---
## Page 414
使用内联接
Greg使用内联接
Greg列出一份职缺列表，并试着将列表上的职务与他的联络人比对。
他希望为每个职务找到最合适的人选，如果他推荐的候选人被录用
了，才会有资金流进他的口袋。
职务：网站开发员（WebDeveloper)
我们的互动与视觉设计团队正在寻找精通HTML
和CSS的一流网站开发员。对于非常关注网站
标准的人而言，这是一个进入高知名度的公司
并在其中发光发热的大好机会。加入极有影响力
的公司，与一群乐在工作的人一起工作吧！
薪资：$95.000~$105.000
经验：5年以上
个
A
一旦找出最适合的候选人，Greg就能联络他们并进一步筛选。
但是，首先要找出所有具有5年以上经验的网站开发员，而且
他们对薪资的期待不能高于$105.000。
382
第9章
---
## Page 415
子查询
磨笔上阵
设计从数据库中取得合适候选人的查询。
job_current
job_desired
job_listings
contact_ido-w
contact_ido
job_id ow
title
salary
title
title
start_date
salary_low
salary
这是每个人接受的新职务的
salary_high
zip
available
description
最低薪资。
years_exp
这是每个人希望的新
职务的薪资。
当前位置》
383
---
## Page 416
两个步骤中的两个查询
但是他想试试其他查询
Greg收到的招聘需求比他知道的人才多。他必须从自己的求职表
中找出适合每项职缺的人才。然后才能利用my_contacts取得合
适人才的联络方式，并询问他们是否有意应征。
首先选出job_listings表中的所有职缺。
SELECT title FROM job_listings
title
GROUP BY title ORDER BY title;
Cook
这里只是jo6_listinss
Hairdresser
表中存储的部分职缺。
我们使用CROUPBY让奎询结果中的每种
Waiter
职缺只占用一行，同时拾字母顺序排列。
查询结果
Web Designer
Web Developer
设计从数据库中取得合适候选人的查询，
此例只需取得联络信息，因为
搜索的对象一定都在寻找“Web
SELECTmc.last_name.mc.first_name,mc.phone
Developet”职缺。
FROM my_contacts AS mc
因为我们的my_contacts与jo6_desired表都
NATURALFON
以contact_id作为主键，送以自然联接直接
jo6_desited AS jd
连接两张表。
WHERE jd.title =We6 Developes
ANDjd.salaxy_low<105000
我们只对有意考虑这份弱资的人选有兴趣。所以要查询
salary_low，检查薪资是否低子候选人的底限。
384
第9章
---
## Page 417
子查询
现在Greg使用关键字IN，检查他的联络人清单中是否存储了
符合职务需求的人才。
SELEcT mc.first_name,mc.last_name,mc.phone,jc.title
FROM job_current AS jc NATURAL JOIN my_contacts AS mc
WHERE
jc.title IN ('Cook',
'Hairdresser',
'Waiter','WebDesigner',
'Web Developer');
还记得关键字JN吗：如果列中的ic.title属于括号里
来自上一个查询的结果。
的职缺之一，N就金返回该行。
mc.first_name
mc.last_name
mc.phone
jc.title
找出候补人送了！
Joe
Lonnigan
（555)555-3214
Cook
Wendy
Hillerman
（555)555-8976
Waiter
Sean
Miller
(555) 555-4443
Web Designer
Jared
Callaway
(555) 555-5674
WebDeveloper
Juan
Garza
（555)555-0098
WebDeveloper
不过，Greg还是要设计两段查询才能办到..
D动g
试着把上述查询结合成一个查询。请把你的答案写在下面。
当前位置
385
---
## Page 418
介绍子查询
子查询
想用一个查询来完成两个查询的工作，我们需要在查询中添加子查询（subquery）。
前一页的第二个查询从my_contacts与job_current表中取出职务符合所需职缺的联络人的
信息，此处的查询称为外层查询（OUTERquery），它里面另有一个内层查询（INNERquery）。
现在就来看看其运作方式：
外层查询
SELEcT mc.first_name,mc.last_name,mc.phone,jc.title
FROM job_currentAS jc NATURAL JOIN my_contacts AS mC
WHERE
jc.title IN
这部分称为外层叠询。
这部分能以第一个查询的某部分取代
因而成为内层查询。
列在括号内的所有职务都来自前一页的第一个查询，从job_
子查询，是被另一
current表中取出所有职务的查询。接下来是SQL聪明的地方，
个查询包围的查询，
仔细看：我们可以把属于内层查询的部分用第一个查询的一部分
取代。这样仍可产生上述括号里的内容，但第一个查询已经被压
也可称为内层查询。
缩成一个子查询了：
内层查询
SELECT title FROM job_1istings
第一个会询的这个部分将
变成内层查询，也称为子
查询。
386
第9章
---
## Page 419
子查询
以子查询合二为一
接下来只要把两个查询合并为一个。首先要有外层查询，另一个查询
中的查询则是内层查询。
外层查询
内层查询
S
以子查询进行查询
K两个壹询结合而成的一
个查询就是包含子查询的
外层查询
查询。
SELECT mc.first_name，mc.last_name,mc.phone,jc.tit1e
FROMjob
_currentASjcNATURALJOINmy_contacts AS mc
WHERE jc.title IN(SELECT title FROM job_listings);
前一页的第一个查询不需原封不动
地爱制到这里，内层查询金为我们
照料其他细节！
下表就是运行查询后的结果，与加上列出所有职缺的
WHERE子句的效果一样，但可以少打很多字。
与稍军的叠询结果相同，
但只用了一个查询。
mc.first_name
mc.last_name
mc.phone
Jc.tile
Joe
Lonnigan
(555)555-3214
Cook
Wendy
Hillerman
（555)555-8976
Waiter
Sean
Miller
(555) 555-4443
WebDesigner
Jared
Callaway
(555) 555-5674
WebDeveloper
Juan
Garza
(555)555-0098
WebDeveloper
当前位置
387
---
## Page 420
子查询解剖课
子查询解
在单一查询不够用的时候：请用子查询
子查询只不过是查询里的查询。
外部的查询称为包含查询（containing query）或外层查询。内部的查询就是内
层查询，或称为子查询。
外展查询，有时称为包
含查询。
SELECT sOme
colum,
another
column
FROM table
WHEREcolumn
=
（SELECTcolumnFROMtable）;
内层查询，又称子奎询
外层查询
SELECT SOme
column,
another
column
FROM table
WHEREcolumn=
(SELECTcolumnFROMtable);
内层查询
因为查询里使用了=运算符，所以子查询只会返回单
value
值，特定行和列的交叉点（有时称为cell，但SQL称之
为标量值，scalarvalue），这一个值将是WHERE子句中
子壹询返图标量值（来自某个列的
比对数据列的条件。
某一行）作为WHERE子句比对数
据列内容的条件。
388
第9章
---
## Page 421
子查询
子查询示范
让我们以my_contacts为例，示范一个可比较的查询实例。首
先，RDBMS 接受来自zip_code 表的标量值，然后在WHERE子
句指定的列中寻找该值。
(SELECT zip_codeFROM
zip_code WHERE city=
'Memphis'AND state=
'TN`)
value
SELECT last_name,
first
name
FROM my_contacts
WHERE zip_code
(SELECTzip_codeFROM
zip_code WHERE city
'Memphis'ANDstate='TN')
这个查询将从my_contacts中送出
住在Memphis.Tennessee的联络人
的姓名。
没有蠢问题
没有蠢问题
问：
为什么我不能只用联接呢？
SELECT last _name, first _name
FROM my_contacts mc
NATURAL JOIN zip_Code zC
询设计起来比联接简单。在语法上能有其他
WHERE zC.city = 'Memphis'
AND zC.state = *TN"
选择是件好事。相同查询也能以下列方式实
现：
当前位置
389
---
## Page 422
围炉夜话
炉夜语
今夜主题：你是INNER还是OUTER？
外层查询
内层查询
内层查询，你知道的，我不需要你。就算没
有你，我的生活一样可以过得很好。
彼此彼此，我也不需要你。你以为你每次都
要找出限定目标的查询结果很好玩吗？我辛
辛苦苦找出来的查询结果却只是给你用来找
出一堆相符的行！质不等于量，知道吗？
（大喊）你每次都只给我一个小小的结果。
用户想要数据！数据！很多数据！！这就是
我给用户的东西：很多很多数据。我看，你
不在那搅局的话，用户反而更高兴。
才不是，我为你的查询结果赋予特定目的。
没有我，你就等着喷出表中的所有内容吧！
只要加上WHERE子句就不会。
对，没错，我就是你的WHERE子句。要
我形容自己的话，那就是我是非常精确的
WHERE子句。事实上，我一点都不需要你
是哦，你不需要我！一个只有一行、一列的
嘛！
答案能做什么？信息量根本不够！
但我不需要你。
我们一起工作的效果或许真的很好，那是因
为我为你的结果赋予了一些方向。
我也不需要你，大部分的时候。
390
第9章
---
## Page 423
子查询
子查询规则
所有子查询都会遵循一些规则。请使用我们提供的词填入规则
里的空格（有些词可能不只用到一次）。
SEMICOLON
SELECT
END
COLUMNLIST
PARENTHESES
DELETE
UPDATE
INSERT
HAVING
FROM
SQL 的子查询规则
SQL的子查询规则
子查询都是单一—
语句。
子查询可能出现在查询中的
四个地方：
子查询总是位于，
子句、选出
作为其
中一列、子句与
子
句中。
子查询没有属于自己的
。就
像一般查询一样，要等到整个查
询结束，出现
它后面才
子查询能与
会有
当然还有
一起使
用。
当前位置
391