Our%aim%in%this%por:on%of%the%workshop%is%to%overwrite%the%EIP%register%by%sending%a%
long%string,%which%will%allow%us%to%redirect%program%execu:on%ﬂow%to%shellcode%of%our%
choosing.%In%this%case,%it%would%be%calc.exe%or%a%bind%shell.%%
%
Vanilla%EIP%Overwrite%(MailCarrier)%
%
Vanilla%EIP%Overwrite%(MailCarrier)%
%
Aeaching%to%the%MailCarrier%process,%using%Immunity%Debugger%(on%your%VM)%
Vanilla%EIP%Overwrite%(MailCarrier)%
%
Vanilla%EIP%Overwrites%(MailCarrier)%
%
Skeleton%Python%Script,%which%will%send%6000%A’s%via%“USER”(on%your%VM)%
Vanilla%EIP%Overwrite%(MailCarrier)%
%
Overwri:ng%EIP%with%“41414141”%
Vanilla%EIP%Overwrite%(MailCarrier)%
%
Genera:ng%a%unique%paeern%with%msf-paeern_create%with%length%6000%
Vanilla%EIP%Overwrite%(MailCarrier)%
%
Python%script,%with%unique%paeern%to%send%to%MailCarrier%
Vanilla%EIP%Overwrite%(MailCarrier)%
%
Execu:ng%the%script,%which%carries%the%unique%paeern.%
Vanilla%EIP%Overwrite%(MailCarrier)%
%
Obtaining%EIP%overwrite%with%a%unique%paeern,%we%copy%this%value%to%ﬁnd%the%exact%oﬀset.%
Vanilla%EIP%Overwrite%(MailCarrier)%
%
Using%msf-paeern_oﬀset%in%order%to%obtain%the%exact%oﬀset,%in%this%case%5094%bytes.%
Vanilla%EIP%Overwrite%(MailCarrier)%
%
We%create%our%“B”%buﬀer,%to%conﬁrm%the%exact%oﬀset%and%EIP%overwrite.%
Vanilla%EIP%Overwrite%(MailCarrier)%
%
Conﬁrming%the%correct%oﬀset%and%EIP%overwrite%via%42424242%(“B”%*%4)%
Vanilla%EIP%Overwrite%(MailCarrier)%
%
We%search%for%a%JMP%ESP%to%overwrite%EIP%with,%via%mona%with%“!mona%jmp%–r%esp”%
Vanilla%EIP%Overwrite%(MailCarrier)%
%
Adding%the%JMP%to%the%Python%script.%
Vanilla%EIP%Overwrite%(MailCarrier)%
%
We%place%a%breakpoint%at%that%address,%and%wait%for%the%breakpoint%to%be%hit,%conﬁrming%jmp.%
Vanilla%EIP%Overwrite%(MailCarrier)%
%
We%step%through%the%instruc:ons%and%conﬁrm%that%we%land%in%our%“C”%buﬀer.%
Vanilla%EIP%Overwrite%(MailCarrier)%
%
Genera:ng%our%bind_tcp%shellcode,%with%msfvenom.%
Vanilla%EIP%Overwrite%(MailCarrier)%
%
Placing%it%in%to%our%Python%script%(1/2).%
Vanilla%EIP%Overwrite%(MailCarrier)%
%
Placing%it%in%to%our%Python%script%%(2/2).%
Vanilla%EIP%Overwrite%(MailCarrier)%
%
Execu:ng%our%Python%script%(full%exploit).%
Vanilla%EIP%Overwrite%(MailCarrier)%
%
Obtaining%our%bind%shell%on%port%443.%
Vanilla%EIP%Overwrite%(MailCarrier)%
%
Using%Meterpreter%to%connect%to%the%bind%shell.%
SEH%exploita:on%
'41414141'–'SGll'the'magic'numbers,'just'diﬀerent!'
Structured%excep:on%handling%exploits%compromise%an%applica:on%by%overwri:ng%the%
pointer%of%an%excep:on%handler%with%an%aeacker%controlled%address.%
%
The%“Structured'ExcepGon'Handler%(SEH)”%is%a%protec:on%mechanism%that%was%
implemented%to%mi:gate%the%abuse%of%buﬀer%overﬂows,%but%it%is%a%highly%ﬂawed%one.%
REF:%heps://www.fuzzysecurity.com/tutorials/expDev/3.html%%
SEH%exploita:on%
Skeleton%Python%script%to%exploit%the%LIST%command,%post%authen:ca:on%(test/test)%
SEH%exploita:on%
Sending%10000%A’s%via%the%LIST%command.%
SEH%exploita:on%
EIP%is%not%overwrieen,%but%we%con:nue%program%execu:on.%
SEH%exploita:on%
EIP%is%now%overwrieen,%the%SEH%chain%our%A’s.%
SEH%exploita:on%
In%the%same%way%as%the%previous%exploit,%we%use%msf%to%create%a%unique%paeern%with%10000%
bytes.%
SEH%exploita:on%
Python%script%with%the%paeern.%
SEH%exploita:on%
SEH%chain%shows%overwrite,%we%then%match%that%with%msf-paeern_oﬀset%to%6178%bytes.%
SEH%exploita:on%
We%modify%our%buﬀer%to%overwrite%nseh%and%seh%with%“BBBB”%and%“CCCC”.%
SEH%exploita:on%
SEH%Chain%now%shows%we%control%nseh%and%seh%accordingly.%
SEH%exploita:on%
We%use%“!mona%seh”%to%search%for%a%POP%POP%RET%instruc:on.%
SEH%exploita:on%
Our%PPR%instruc:on%is%then%added%to%our%exploit,%with%nseh%added%as%“G”%*%4.%
SEH%exploita:on%
We%place%a%breakpoint%at%our%PPR%instruc:on,%to%make%sure%it%is%being%executed%properly.%
SEH%exploita:on%
We%execute%our%PPR%instruc:on,%and%jump%to%our%4%“G”%buﬀer,%which%we%can%now%use%to%jump.%
SEH%exploita:on%
We%use%these%4%bytes,%to%assemble%a%JMP%SHORT%to%a%value%ader%the%handler(EB12)%
SEH%exploita:on%
We%modify%our%Python%script%to%add%our%nseh%jump%and%some%nops(we%want%to%land%in%the%nops).%
SEH%exploita:on%
Using%breakpoints%and%stepping%through,%we%ﬁnally%land%in%our%nops%and%can%add%our%shellcode.%
SEH%exploita:on%
Using%msfvenom,%we%generate%our%bind%shell%once%again.%
SEH%exploita:on%
We%add%this%to%our%ﬁnal%exploit(1/2).%
SEH%exploita:on%
We%add%this%to%our%ﬁnal%exploit(2/2).%
SEH%exploita:on%
We%then%run%the%ﬁnal%Python%exploit,%and%hope%to%get%a%bind%shell%on%the%target.%
SEH%exploita:on%
Success,%we%have%our%bind%shell%wai:ng%on%port%443.%
SEH%exploita:on%
Connected%to%our%bind%shell%via%MSF.%
Egg%hunters%
Playing'with'limited'buﬀer'space'can'be'fun!'
'
An%egg%hunter%is%a%small%piece%of%shellcode%that%will%search%memory%for%a%speciﬁc%
paeern.%Once%this%is%found,%it%will%then%execute%the%full%shellcode%in%a%larger%area%of%
available%buﬀer%space(some:mes%done%via%another%stored%variable)%.%
%
We%will%expand%upon%the%SEH%exploit%from%the%previous%example,%with%the%use%of%a%egg%
hunter%to%ﬁnd%our%shellcode.%
'
%
Addi:onal%informa:on:%heps://www.corelan.be/index.php/2010/01/09/exploit-wri:ng-tutorial-part-8-win32-egg-hun:ng/%
Egg%hunters%
We%start%with%our%skeleton%Python%script,%which%uses%nseh,%seh%and%nops(no%shellcode%this%:me).%%
Egg%hunters%
We%land%in%our%nops%as%expected,%which%will%allow%us%to%create%and%execute%our%egg%hunter.%
Egg%hunters%
Using%msf-egghunter%to%generate%our%egghunter,%with%x00%as%the%only%bad%char,%tag%of%WOOT.%
Egg%hunters%
Adding%the%egghunter%to%our%code,%also%including%the%WOOTWOOT%tag%just%ader%ini:al%“A”%buﬀer%
Egg%hunters%
Execu:ng%our%script%with%our%Egg%hunter,%if%all%goes%well%we%should%ﬁnd%WOOTWOOT%in%memory.%
Egg%hunters%
Our%egghunter%tag%is%found,%we%can%now%place%nops%and%shellcode!%
Egg%hunters%
Once%again,%we%generate%our%shellcode%using%msfvenom.%
Egg%hunters%
Adding%the%shellcode%to%our%exploit%(1/2).%
Egg%hunters%
Adding%the%shellcode%to%our%exploit%(2/2).%
Egg%hunters%
Running%our%ﬁnal%exploit%with%egg%hunter%and%shellcode.%
Egg%hunters%
By%sexng%breakpoints%and%stepping%through%the%execu:on,%we%can%see%our%egg%hunter.%
Egg%hunters%
We%set%another%strategic%breakpoint,%ader%our%WOOTWOOT%is%found%in%memory,%then%con:nue.%
Egg%hunters%
To%conﬁrm,%we%ﬁnd%our%tag%in%memory,%followed%by%our%nops%and%shellcode.%
Egg%hunters%
We%con:nue%execu:on,%ﬁnd%our%nops%and%shellcode%executes%correctly.%
Egg%hunters%
Bind%shell%wai:ng%on%port%443%for%us%to%connect%to.%
Egg%hunters%
Connec:ng%to%our%bind%shell!%
@telspacesystems%
www.telspace.co.za%
References%and%thanks%to:%
FuzzySecurity%
Corelan%(Peter!)%
Oﬀsec%
Mae%Miller%(skape)%
DEF%CON%(Jeﬀ,%Nikita,%Highwiz,%Toeenkoph%and%all%crew)%
The%Telspace%Systems%Crew%(heps://www.telspace.co.za)%
%