• 修改Web服务器
也可以将某些Web服务器配置为向客户端发送一条HTTP重定向命令（响应码
305），将客户端请求重定向到一个代理上去。收到重定向命令后，客户端会与代
理进行通信（参见图6-14d）。
下一节解释了如何配置客户端才能使其将流量发送给代理。第20章会说明如何配置
网络、DNS以及服务器，才能将流量重定向到代理服务器。
（a）配置为使用代理的客户端 （b）拦截流量，将其重定向到代理的网络。
路由器
客户端 服务器 客户端 服务器
代理 代理
（c）代表Web服务器的替代物 （d）服务器将HTTP请求重定向到代理
代理
客户端 假扮Web服 服务器 客户端 服务器
务器的名字
代理
图6-14 有很多技巧可以将Web请求导向代理
6.4 客户端的代理设置
所有现代的Web浏览器都允许用户对代理的使用进行配置。实际上，很多浏览器都
提供了多种配置代理的方式，其中包括以下几种。
148 ｜ 第6章
• 手工配置
显式地设置要使用的代理。
• 预先配置浏览器
浏览器厂商或发行商会在将浏览器发送给其客户之前预先对浏览器（或所有其他
Web客户端）的代理设置进行手工配置。 141
• 代理的自动配置（Proxy Auto-Configuration，PAC）
提供一个URI，指向一个用JavaScript语言编写的代理自动配置文件；客户端会
取回这个JavaScript文件，并运行它以决定是否应该使用一个代理，如果是的
话，应该使用哪个代理服务器。
• WPAD的代理发现
有些浏览器支持Web 代理自动发现协议（Web Proxy Autodiscovery Protocol，
WPAD），这个协议会自动检测出浏览器可以从哪个“配置服务器”下载到一个
自动配置文件。7
6.4.1 客户端的代理配置：手工配置
很多Web客户端都允许用户手工配置代理。网景的Navigator和微软的Internet
Explorer都为代理配置提供了便捷的支持。
在网景的Navigator 6中，可以通过菜单选项Edit（编辑）→Preferences（首选项）→
Advanced（高级）→Proxies（代理），然后选中单选按钮“Manual proxy”（手工配
置代理）来指定代理。
在微软的Internet Explorer 5中，可以在Tools（工具）→Internet Options（Internet
选项）菜单中，选择一个连接，点击“Settings”（设置），选中“Use a proxy
server”（使用代理服务器）框，并点击“Advanced”（高级），来手工指定代理。
其他浏览器都有不同的方式来进行手工配置的修改，但其思想是一样的：为代理指
定主机和端口。有些ISP会向客户发送预先配置好的浏览器，或定制好的操作系统，
使其将Web流量重定向到代理服务器上。
6.4.2 客户端代理配置：PAC文件
手工代理配置很简单但有些死板。只能为所有内容指定唯一的一个代理服务器，而
且不支持故障转移。手工代理配置还会给大型组织带来管理问题。如果配置过的浏
注7： 当前只有Internet Explorer支持这一特性。
代 理 ｜ 149
览器基数很大，那么需要进行修改的时候，重新配置每个浏览器是非常困难，甚至
是不可能的。
PAC文件是一些小型的JavaScript程序，可以在运行过程中计算代理设置，因此，
是一种更动态的代理配置解决方案。访问每个文档时，JavaScript函数都会选择恰
当的代理服务器。
要使用PAC文件，就要用JavaScript PAC文件的URI来配置浏览器［配置方式与
142 手工配置类似，但要在“ automatic configuration”（自动配置）框中提供一个URI］。
浏览器会从这个URI上获取PAC文件，并用JavaScript逻辑为每次访问计算恰当
的代理服务器。PAC文件的后缀通常是.pac，MIME类型通常是application/x-ns-
proxy-autoconfig。
每个 PAC 文件都必须定义一个名为 FindProxyForURL(url,host)的函数，用
来计算访问 URI 时使用的适当的代理服务器。函数的返回值可以是表 6-1 列出的
任意值。
表6-1 代理自动配置脚本的返回值
FindProxyForURL的返回值 描 述
DIRECT 不经过任何代理，直接进行连接
PROXY host:port 应该使用指定的代理
SOCKS host:port 应该使用指定的SOCKS服务器
例6-1中的PAC文件为HTTP事务处理指定了一个代理，为FTP事务处理指定了
另一个代理，并为所有其他类型的事务处理使用直连方式。
例6-1 代理自动配置文件示例
function FindProxyForURL(url, host) {
if (url.substring(0,5) == "http:") {
return "PROXY http-proxy.mydomain.com:8080";
} else if (url.substring(0,4) =="ftp:") {
return "PROXY ftp-proxy.mydomain.com:8080";
} else {
return "DIRECT";
}
}
更多有关PAC文件的细节，请参见第20章。
6.4.3 客户端代理配置：WPAD
另一种浏览器配置机制是 WPAD 协议。WPAD 协议的算法会使用发现机制的逐
150 ｜ 第6章
级上升策略自动地为浏览器查找合适的 PAC 文件。实现 WPAD 协议的客户端
需要：
• 用WPAD找到PAC的URI；
• 从指定的URI获取PAC文件；
• 执行PAC文件来判定代理服务器；
• 为请求使用代理服务器。
WPAD会使用一系列的资源发现技术来判定适当的PAC文件。并不是所有组织都
能够使用所有的发现技术，所以WPAD使用了很多种发现技术。WPAD会一个接
一个地对每种技术进行尝试，直到成功为止。 143
当前的WPAD协议规范按顺序定义了下列技术：
• 动态主机配置协议（Dynamic Host Configuration Protocol，DHCP）；
• 服务定位协议（Service Location Protocol，SLP）；
• DNS知名主机名；
• DNS SRV记录；
• TXT记录中的DNS服务URI。
更多信息，请参阅第20章。
6.5 与代理请求有关的一些棘手问题
本节对与代理服务器请求有关的一些比较棘手且易被误解的问题进行了解释，其中
包括：
• 代理请求中的URI和服务器请求中的URI有何不同；
• 拦截和反向代理是如何将服务器主机信息隐藏起来的；
• 修改URI的规则；
• 代理是怎样影响浏览器的智能URI自动完成机制，或主机名扩展特性的。
6.5.1 代理URI与服务器URI的不同
除了一点之外，Web服务器报文和Web 代理报文的语法是一样的。客户端向服务
器而不是代理发送请求时，HTTP请求报文中的URI会有所不同。
客户端向Web服务器发送请求时，请求行中只包含部分URI（没有方案、主机或端
口），如下例所示：
代 理 ｜ 151
GET /index.html HTTP/1.0
User-Agent: SuperBrowser v1.3
但当客户端向代理发送请求时，请求行中则包含完整的URI。例如：
GET http://www.marys-antiques.com/index.html HTTP/1.0
User-Agent: SuperBrowser v1.3
为什么会有两种不同的请求格式，一种用于代理，另一种用于服务器呢？在原始的
HTTP设计中，客户端会直接与单个服务器进行对话。不存在虚拟主机，也没有为
代理制定什么规则。单个的服务器都知道自己的主机名和端口，所以，为了避免发
送冗余信息，客户端只需发送部分URI即可，无需发送方案和主机（以及端口）。
代理出现之后，使用部分URI就有问题了。代理需要知道目标服务器的名称，这样
144 它们才能建立自己与服务器的连接。基于代理的网关要知道URI的方案才能连接到
FTP资源和其他方案上去。HTTP/1.0要求代理请求发送完整的URI，解决了这个问
题，但它为服务器请求保留部分URI的形式（已经有相当多的服务器都改为支持完
整URI了）。8
因此，我们要将部分URI发送给服务器，将完整URI发送给代理。在显式地配置客
户端代理设置的情况下，客户端就知道要发布哪种类型的请求了。
(1) 没有设置客户端使用代理时，它会发送部分URI（参见图6-15a）。
(2) 设置客户端使用代理时，它会发送完整URI（参见图6-15b）。
6.5.2 与虚拟主机一样的问题
代理“缺少方案/主机/端口”的问题与虚拟主机Web服务器面临的问题相同。虚
拟主机Web服务器会在很多Web站点间共享同一个物理Web服务器。包含部分
URI（比如/index.html）的请求到达时，虚拟主机Web服务器需要知道目的Web站
点的主机名（更多信息请参见5.7.1节和18.2节）。
尽管它们出现的问题相似，但解决方法却有所不同：
• 显式的代理要求在请求报文中使用完整URI来解决这个问题；
• 虚拟主机Web服务器要求使用Host首部来承载主机和端口信息。
注8： 现在，HTTP/1.1要求服务器为代理请求和服务器请求都提供完整的URI处理，但实际上，很多已部
署的服务器仍然只接受部分URI。
152 ｜ 第6章
（a）服务器请求 GET /index.html HTTP/1.0
User-agent: SuperBrowser v1.3
客户端 原始服务器
（b）显式代理请求 GET http://www.marys-antiques.com/index.html HTTP/1.0
User-agent: SuperBrowser v1.3
客户端 （显式配置了代理） 代理服务器 原始服务器
（c）替代物（反向代理）请求 GET /index.html HTTP/1.0
User-agent: SuperBrowser v1.3
替代物
客户端 （服务器主机名指向替代物代理） 原始服务器
（d）拦截代理请求
GET /index.html HTTP/1.0
User-agent: SuperBrowser v1.3
客户端 原始服务器
拦截代理
图6-15 拦截代理会获取服务器请求 145
6.5.3 拦截代理会收到部分URI
只要客户端正确地实现了HTTP，它们就会在请求中包含完整的URI，发送给经过
显式配置的代理。这样解决了部分问题，但还有一个问题：客户端并不总是知道它
是在和代理进行对话，因为有些代理对客户端可能是不可见的。即使没有将客户端
配置为使用代理，客户端的流量也可能会经过替代物或拦截代理。在这两种情况下，
客户端都会认为它在与Web服务器进行对话，不会发送完整的URI。
• 如前所述，反向代理是一个用来取代原始服务器的代理服务器，它通常会通过假
扮服务器的主机名或IP地址来做到这一点。它会收到Web服务器请求，可能会
向真正的服务器提供缓存的响应或者代理请求。客户端无法区分反向代理和Web
服务器，因此它会发送部分URI（参见图6-15c）。
代 理 ｜ 153
• 拦截代理是网络流量中的代理服务器，它会拦截从客户端发往服务器的请求，并
提供一个缓存响应，或对其进行转发。由于拦截代理拦截了从客户端到服务器的
流量，所以它会收到发送给Web服务器的部分URI（参见图6-15d）。9
6.5.4 代理既可以处理代理请求，也可以处理服务器请求
由于将流量重定向到代理服务器的方式有所不同，通用的代理服务器既应该支持请
求报文中的完整URI，也应该支持部分URI。如果是显式的代理请求，代理就应该
146 使用完整URI，如果是Web服务器请求，就应该使用部分URI和虚拟Host首部。
使用完整和部分URI的规则如下所示。
• 如果提供的是完整URI，代理就应该使用这个完整URI。
• 如果提供的是部分URI，而且有Host首部，就应该用Host首部来确定原始服
务器的名字和端口号。
• 如果提供的是部分URI，而且没有Host首部，就要用其他方法来确定原始服务器：
- 如果代理是代表原始服务器的替代物，可以用真实服务器的地址和端口号来
配置代理；
- 如果流量被拦截了，而且拦截者也可以提供原始的IP地址和端口，代理就可
以使用拦截技术提供的IP地址和端口号（参见第20章）；
- 如果所有方法都失败了，代理没有足够的信息来确定原始服务器，就必须返
回一条错误报文（通常是建议用户升级到支持Host首部的现代浏览器）。10
6.5.5 转发过程中对URI的修改
代理服务器要在转发报文时修改请求URI的话，需要特别小心。对URI的微小修
改，甚至是看起来无害的修改，都可能给下游服务器带来一些互操作性问题。
尤其是，现在已知有些代理会在将URI转发给下一跳节点之前将URI“规范”为标
准格式。有些看起来无害的转换行为，比如用显式的“:80”来取代默认的HTTP端
口，或者用适当的换码转义符来取代非法的保留字符以校正URI，就可能造成互操
作性问题。
总之，代理服务器要尽量宽容一些。它们的目标不是成为强制实现严格协议一致性
注9： 在某些情况下，拦截代理可能也会拦截客户端到代理的流量，在这种情况下，拦截代理可能会收到完
整URI，并需要对其进行处理。由于显式代理的通信端口通常与HTTP使用的端口有所不同（通常是
8080而不是80），而且拦截代理通常只对端口80进行拦截，所以这种情况并不会经常发生。
注10： 不应该经常这么做。因为用户会收到之前从未收到过的神秘错误页面。
154 ｜ 第6章
的“协议警察”，因为这样可能会严重破坏之前能正常工作的服务。
特别是，HTTP规范禁止一般的拦截代理在转发URI时重写其绝对路径部分。唯一
的例外是可以用“/”来取代空路径。
6.5.6 URI的客户端自动扩展和主机名解析