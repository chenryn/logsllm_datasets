nal and execute nim c -r segfault.nim. You should see that your program crashes
with the following output:
Traceback (most recent call last)
segfault.nim(2)
segfault
SIGSEGV: Illegal storage access. (Attempt to read from nil?)
As long as your program isn’t compiled in
release mode, any crashes will display a
traceback that shows the procedure calls
leading up to your program’s crash. In
this case, the 2 in the parentheses corre-
sponds to line 2 in the source code,
echo(list[0]). This hints that list is
nil, and that it must be initialized.
 A sequence can be initialized in two
ways: using the sequence constructor syn-
tax (@[]), as in the previous example, and
using the newSeq procedure. Each is
more or less appropriate, depending on
the use case.
Assigns 1 to the first item in the sequence. This will result 
in an index-out-of-bounds exception at runtime because 
there are currently no items in the sequence.
Appends 1 as an item to the list sequence
Attempts to access an item that 
doesn’t exist. An index-out-of-
bounds exception will be raised.
The sequence constructor
When using the sequence construc-
tor syntax, you must be careful to
specify the type of the sequence.
var list = @[]
This example won’t work because
the compiler has no way of knowing
what type of sequence you want to
define. This isn’t a problem when
you’re constructing a non-empty
sequence: var list = @[4, 8,
15, 16, 23, 42]. In this case, the
compiler knows that the sequence
type is seq[int].
Licensed to   
42
CHAPTER 2
Getting started
The newSeq procedure provides another way to construct a sequence. It also offers an
important optimization—you should use it when you know the size of the sequence
ahead of time.
var list = newSeq[string](3)
assert list[0] == nil
list[0] = "Foo"
list[1] = "Bar"
list[2] = "Baz"
list.add("Lorem")
The size of the sequence that you specify in the call to newSeq will correspond to the
number of items that the new sequence will contain. The items themselves won’t be
initialized, and you can still add more items to the sequence if you wish.
 Iterating over a sequence is done in the same way as iterating over an array. But
although sequences do have low and high fields, it’s more idiomatic to use the len
field, which gives you the length of the sequence. The reason for this is that the low
field for sequences is always 0.
let list = @[4, 8, 15, 16, 23, 42]
for i in 0 .. 
43
Control flow
 The set type is a value type and so doesn’t need to be initialized.
var collection: set[int16]
assert collection == {}
A set is constructed using {}. A list of values is specified inside the curly brackets, and
items are separated by commas.
 A set pays no attention to the order of the items that it stores, so you can’t access
items in it via an index. Sets are useful for cases where you want to check for the pres-
ence of a certain value in a collection—this is where the in keyword comes in.
let collection = {'a', 'x', 'r'}
assert 'a' in collection
Although they’re simple, sets can be used to perform some interesting checks.
let collection = {'a', 'T', 'z'}
let isAllLowerCase = {'A' .. 'Z'} * collection == {}
assert(not isAllLowerCase)
One of the operations that can be performed on sets is the intersection of two sets using
the * operator. This returns a new set containing the values that the intersected sets
have in common. The preceding example uses this to check whether the collection
set contains any uppercase letters. A set constructor can contain ranges of items too: the
range 'A' .. 'Z' is deduced by the compiler to contain all the uppercase letters.
 Sets are often used in the standard library to represent a collection of unique flags.
In other languages such as C, flags may be represented by an integer, which is inter-
preted as a sequence of Boolean bits. Compared to sets, this approach is very unsafe
and often leads to errors.
 I encourage you to experiment with these collection types to gain a deeper insight
into how they work. You’ll be using these types throughout the book and whenever
you write Nim programs. 
2.4
Control flow
There are many ways to control the flow of execution in Nim. The most common is
the if statement, which you’ve already seen in action in section 2.1.
 The if statement is a conditional statement: when its condition is true, its body is
executed. Nim’s if statement is similar to the if statement in other languages. It sup-
ports multiple “else if” blocks specified using the elif keyword and an “else” block
using the else keyword.
if age > 0 and age  10 and age 
44
CHAPTER 2
Getting started
Switch statements are also supported, although in Nim they’re known as case state-
ments because they begin with the case keyword. They reduce repetition when you
need to handle many different conditions.
case variable
of "Arthur", "Zaphod", "Ford":
echo("Male")
of "Marvin":
echo("Robot")
of "Trillian":
echo("Female")
else:
echo("Unknown")
Where the Nim case statement differs from the ones in other languages is in its lack
of fall-through, which is the continuing execution of further case statements until a
break keyword is used. Fall-through enables multiple values to match the same code
block, but it usually requires a large number of break keywords to be used. Nim still
allows multiple values to match the same code block, but it uses a different syntax.
 An of branch in a case statement can contain a list of values to be matched, as well
as a range, similar to the ranges used in set constructors. For example, matching every
number from 0 to 9 can be done like this: of 0 .. 9:.
 In Nim, every statement can be an expression. One case where this is useful is
when you wish to assign a value depending on a condition:
let ageDesc = if age 
45
Control flow
 You can also nest looping statements, and you may wonder how to break out of
multiple loops at once. This can be solved by specifying a label for the break keyword.
The label must be defined by the block keyword, and breaking to that label will cause
the execution to break out of every loop inside that block.
block label:
var i = 0
while true:
while i  3: break label
i.inc
Another feature of the block keyword is that it introduces a new scope whenever it’s used.
 Nim supports the concept of iterators. These are similar to procedures, but they
yield values to their caller multiple times, instead of returning just once. An iterator
can be specified in a for statement, and it’s then advanced after each iteration. The
value that it yields is available in the body of the for statement.
iterator values(): int =
var i = 0
while i 
46
CHAPTER 2
Getting started
In Python, you can iterate over any object that defines the __iter__ method, and this
can be done implicitly without needing to call the __iter__ method in the for loop.
Nim supports a similar mechanism:
for item in @[1, 2, 3]:
echo(item)
Nim will implicitly call an iterator by the name of items. Which specific items iterator
will be called depends on the type of the value specified after the in keyword; in this
case it’s seq[int].
 If an items iterator that matches the type can’t be found, the compilation will fail
with a type mismatch error, as in this example:
for i in 5:
echo i
Here’s the compilation output:
file.nim(1, 10) Error: type mismatch: got (int literal(5))
but expected one of:
system.items(a: array[IX, T])
system.items(E: typedesc[enum])
system.items(s: Slice[items.T])
system.items(a: seq[T])
system.items(a: openarray[T])
system.items(a: string)
system.items(a: set[T])
system.items(a: cstring)
The items iterator is only invoked when you specify one variable in the for loop; a
pairs iterator is invoked for two variables. The values that the pairs iterator typically
returns are the current iteration index and the current item at that index:
for i, value in @[1, 2, 3]: echo("Value at ", i, ": ", value)
for keyword  
One or more loop variables
in keyword  
Iterator call or variable
Loop body  
Figure 2.2
for loop syntax in Nim
Licensed to   
47
Exception handling
The preceding code will produce this output:
Value at 0: 1
Value at 1: 2
Value at 2: 3
There’s no default name for an iterator yielding three values or more. 
2.5
Exception handling
Exceptions are yet another method for controlling flow. Raising an exception will
cause the execution of a program to cease until the exception is caught or the pro-
gram exits.
 An exception is an object consisting of a message describing the error that
occurred. A new exception is raised using the raise keyword. You can create new
exceptions using the newException procedure.
 Handling exceptions in Nim is very similar to Python. Exceptions are caught using
a try statement, with one or more except branches specifying the exception type to
be handled.
 One of the most powerful features of Nim is its brilliant tracebacks. When an excep-
tion is raised and not caught, your program will display a stack traceback and quit.
proc second() =
raise newException(IOError, "Somebody set us up the bomb")
proc first() =
second()
first()
The preceding code will produce the following output:
Traceback (most recent call last)
file.nim(7)
file
file.nim(5)
first
file.nim(2)
second
Error: unhandled exception: Somebody set us up the bomb [IOError]
A traceback gives you a list of events leading up to the crash of your program. It’s a
very useful debugging tool. Each line in the traceback is a call to a procedure. The
number in parentheses is the line number where the call was made, and the name on
the right is the procedure that was called.
 These tracebacks will be your best friend throughout your time working with the
Nim programming language.
 In order to stop your program from crashing, you must handle the exceptions and
decide what your program should do when these exceptions occur. You can handle
Listing 2.10
Raising an exception
Licensed to   
48
CHAPTER 2
Getting started
exceptions by wrapping the affected code in a try statement. The top part of a try
statement consists of the try keyword, followed by a colon, which is then followed by
indented code. The bottom part of a try statement consists of one or more except
branches—each except branch matches a specific exception that should be caught. If
an except branch omits the exception type, then all exceptions are caught. When an
exception is matched, the corresponding except branch’s code is executed.
try:
except ErrorType:
except:
Let’s rewrite listing 2.10 to handle the exception by using a try statement.
proc second() =
raise newException(IOError, "Somebody set us up the bomb")
proc first() =
try:
second()
except:
echo("Cannot perform second action because: " &
getCurrentExceptionMsg())
first()
The exception is raised in the second procedure, but because it’s called under the try
statement, the exception is caught. The except branch is then executed, leading to
the following output:
Cannot perform second action because: Somebody set us up the bomb
You should now know the basics of exception handling in Nim and be able to debug
and handle simple exceptions on your own. Exceptions are a very important feature
of the Nim programming language, and we’ll continue to discuss them throughout
this book. 
Listing 2.11
The try statements
Listing 2.12
Handling an exception using a try statement
Code statements that will 
be checked for exceptions
Code statements that will be executed when the 
code under the try raises an ErrorType exception
Code statements that will be executed when the 
code under the try raises another type of exception
Raises a new
IOError exception
The try statement will catch any 
exceptions raised in its body.
Catches all
exceptions
Returns the message of the
exception that was just caught
Displays a message stating that the
second action couldn’t be performed
and displaying the message of the
exception that was caught
Licensed to   
49
User-defined types
2.6
User-defined types
The ability to define custom data structures is essential in many programming lan-
guages. Defining them in Nim is simple, and although they support some OOP fea-
tures, their semantics don’t unnecessarily bog you down in any OOP concepts.
 Nim features three different kinds of user-defined types: objects, tuples, and
enums. This section explains their main differences and use cases.
2.6.1
Objects
A basic object definition in Nim is equivalent to a C struct type and can be passed to C via
the FFI. All types are defined under a type section. An object definition can be placed
under the type keyword or alongside it. The definition starts with the name of the type,
followed by =, the object keyword, a new line, and then an indented list of fields:
type
Person = object
name: string
age: int
A type section can define multiple types, and you should collect related types under
it. Just like procedures, types must be defined above the code in which they’re used.
 A variable utilizing the Person type can be declared just like any other variable:
var person: Person
You can initialize the Person type using the object construction syntax:
var person = Person(name: "Neo", age: 28)
You can specify all, some, or none of the fields. The type is an object, so its memory
will be allocated on the stack. Data types that are stored on the stack can’t be nil in
Nim, so this extends to the Person type.
 When you’re defining a new variable, you can’t change whether it’s defined on the
stack or on the heap. You must change the type definition itself. You can use the ref
object keywords to define a data type that will live on the heap.
 Types defined with the ref keyword are known as reference types. When an instance
of a reference type is passed as a parameter to a procedure, instead of passing the
underlying object by value, it’s passed by reference. This allows you to modify the orig-
inal data stored in the passed variable from inside your procedure. A non-ref type
passed as a parameter to a procedure is immutable.
type
PersonObj = object
name: string
age: int
PersonRef = ref PersonObj
Listing 2.13
Mutable and immutable parameters
When both non-ref and ref types are defined, the 
convention is to use an Obj suffix for the non-ref 
name, and a Ref suffix for the ref name.
In this case, you don’t need to repeat the definition.
Licensed to   
50
CHAPTER 2
Getting started
proc setName(person: PersonObj) =
person.name = "George"
proc setName(person: PersonRef) =
person.name = "George"
The preceding listing gives you a small taste of the behavior that ref and non-ref
types exhibit. It also introduces the syntax used to access the fields of an object and to
assign new values to these fields. 
2.6.2
Tuples
Objects aren’t the only way to define data types. Tuples are similar to objects, with the