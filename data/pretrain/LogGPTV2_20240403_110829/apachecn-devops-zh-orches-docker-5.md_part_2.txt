```
第二步:在`/etc/hosts`文件中设置 SSH 主机:
```
10.0.0.2 dokku.app
```
第三步:在`~/.ssh/config`设置 SSH 配置
```
Host dokku.app
 Port 2222
```
步骤 4:创建虚拟机
以下是一些要设置的可选环境参数:
```
# - `BOX_NAME`
# - `BOX_URI`
# - `BOX_MEMORY`
# - `DOKKU_DOMAIN`
# - `DOKKU_IP`.
cd path/to/dokku
vagrant up
```
第五步:使用以下命令复制你的 SSH 密钥:
```
$ cat ~/.ssh/id_rsa.pub | pbcopy
```
将您的 SSH 密钥粘贴到`http://dokku.app`处的 dokku-installer 中(指向`/etc/hosts`文件中指定的`10.0.0.2`)。将 **Dokku Setup** 屏幕上的**主机名**字段更改为您的域，然后选中显示**使用** **虚拟主机** **命名**的框。然后，点击**完成** **设置**安装钥匙。您将从这里获得应用部署说明。
您现在可以部署应用或安装插件了。
## 配置主机名并添加公钥
我们的 PaaS 将路由子域到以相同名称部署的应用。这意味着设置了多库的机器必须对您的本地设置以及运行多库的机器可见。
设置指向 Dokku 主机的通配符域。运行`bootstrapper`脚本后，检查 Dokku 主机中的`/home/dokku/VHOST`文件是否设置为这个域。只有当主机名可以通过 dig 工具解析时，才会创建。
在本例中，我通过将以下配置添加到(本地主机的)`/etc/hosts`文件中，将我的 Dokku 主机名设置为`dokku.app`:
```
10.0.0.2 dokku.app
```
我还在`~/.ssh/config`文件(本地主机的)中设置了 SSH 端口转发规则:
```
Host dokku.app
 Port 2222
```
### 注
根据维基百科，**域** **信息** **Groper** ( **挖**)是一个网络管理命令行工具，用来查询 DNS 名称服务器。这意味着给定一个网址，dig 将返回该网址指向的服务器的 IP 地址。
如果`/home/dokku/VHOST`文件还没有自动创建，您将不得不手动创建它并将其设置为您喜欢的域名。如果在部署应用时缺少该文件，Dokku 将使用端口名而不是子域发布应用。
最后要做的是将您的公共`ssh`密钥上传到 Dokku 主机，并将其与用户名相关联。为此，请运行以下命令:
```
$ cat ~/.ssh/id_rsa.pub | ssh dokku.app "sudo sshcommand acl-add dokku shrikrishna"
```
在前面的命令中，用您的域名替换`dokku.app`名称，用您的名称替换`shrikrishna`。
太好了。现在我们已经准备就绪，是时候部署我们的应用了。
## 部署应用
我们现在有了自己的平台即服务，可以部署我们的应用。让我们在那里部署`code.it`文件。您也可以尝试在那里部署自己的应用:
```
$ cd code.it
$ git remote add dokku PI:EMAIL:codeit
$ git push dokku master
Counting objects: 456, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (254/254), done.
Writing objects: 100% (456/456), 205.64 KiB, done.
Total 456 (delta 34), reused 454 (delta 12)
-----> Building codeit ...
 Node.js app detected
-----> Resolving engine versions
......
......
......
-----> Application deployed:
 http://codeit.dokku.app
```
就这样！我们现在在我们的 PaaS 中有一个工作应用。关于多库的更多细节，你可以在[https://github.com/progrium/dokku](https://github.com/progrium/dokku)查看的 GitHub 存储库页面。
如果您想要一个生产就绪的 PaaS，您必须在[http://deis.io/](http://deis.io/)查找 Deis，它提供多主机和多租户支持。
# 设置高可用性服务
虽然 Dokku 很适合部署偶尔的辅助项目，但它可能不适合更大的项目。大规模部署基本上有以下要求:
*   **横向** **可扩展**:单个服务器实例只能完成这么多工作。随着负载的增加，处于曲棍球棒增长曲线上的组织将发现自己不得不在服务器集群之间平衡负载。在早期，这意味着必须设计数据中心。如今，这意味着向云中添加更多实例。
*   **故障** **宽容**:正如道路事故即使在有广泛的交通规则来避免事故发生时也会发生一样，即使在你采取广泛的措施来预防事故后，也可能会发生撞车事故，但是其中一种情况下的撞车事故不得造成服务停机。一个设计良好的架构将处理故障情况，并使另一台服务器代替崩溃的服务器。
*   **模块化**:虽然看起来不是这样，但是模块化是大规模部署的一个决定性特征。模块化体系结构使其灵活且经得起未来考验(因为模块化体系结构将随着组织范围和范围的扩大而容纳更新的组件)。
这绝不是一个详尽的列表，但它标志着构建和部署一个高可用性服务所需的工作量。然而，正如我们到目前为止所看到的，Docker 在单个主机中使用，并且其中(到目前为止)没有可用的工具来管理运行 Docker 的实例集群。
这就是 CoreOS 的用武之地。这是一个最小化的操作系统，其唯一目的是作为 Docker 上大规模服务部署的构建模块。它附带了一个名为`etcd`的高可用性键值配置存储，用于配置管理和服务发现(发现集群中每个其他组件的位置)。 `etcd`服务在[第 4 章](4.html "Chapter 4. Automation and Best Practices")、*自动化和最佳实践*中进行了探索。它还附带了 fleet，这是一种利用`etcd`在整个集群上执行操作的工具，而不是在单个实例上执行操作。
### 注
你可以把 fleet 看作是`systemd`套件的扩展，它在集群级别而不是机器级别运行。`systemd`套件是一个单机初始化系统，而 fleet 是一个集群初始化系统。你可以在[https://coreos.com/using-coreos/clustering/](https://coreos.com/using-coreos/clustering/)找到更多关于舰队的信息。
在本节中，我们将尝试在本地主机的三节点 CoreOS 集群上部署我们的标准示例`code.it`。这是一个典型的例子，实际的多主机部署将需要更多的工作，但这是一个很好的起点。它还帮助我们欣赏多年来在硬件和软件方面所做的出色工作，使部署高可用性服务成为可能，甚至变得容易，直到几年前，这项任务还只能在大型数据中心才能完成。
## 安装依赖项
运行前面的示例需要以下依赖关系:
1.  **VirtualBox**:VirtualBox 是一款流行的虚拟机管理软件。您平台的安装可执行文件可以从[https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)下载。
2.  **游民**:游民是一个开放的源码工具，可以认为是一个虚拟机相当于 Docker。可从[https://www.vagrantup.com/downloads.html](https://www.vagrantup.com/downloads.html)下载。
3.  **Fleetctl** :简单来说，Fleet 就是一个分布式的 init 系统，这意味着它将允许我们在集群级别管理服务。Fleetctl 是一个命令行界面客户端，用于运行舰队命令。要安装 fleetctl，请运行以下命令:
    ```
    $ wget \ https://github.com/coreos/fleet/releases/download/v0.3.2/fleet -v0.3.2-darwin-amd64.zip && unzip fleet-v0.3.2-darwin-amd64.zip
    $ sudo cp fleet-v0.3.2-darwin-amd64/fleetctl /usr/local/bin/
    ```
## 获取和配置流浪文件
游民相当于 Dockerfiles。游民文件包含详细信息，如要获取的基本虚拟机、要运行的安装命令、要启动的虚拟机映像的实例数等。CoreOS 有一个存储库，其中包含可用于在虚拟机中下载和使用 CoreOS 的游民文件。这是在开发环境中尝试 CoreOS 特性的理想方式:
```
$ git clone https://github.com/coreos/coreos-vagrant/
$ cd coreos-vagrant
```
前面的命令克隆了`coreos-vagrant`存储库，该存储库包含下载和启动基于 CoreOS 的虚拟机的游民文件。
### 注
游民是一款免费开源软件，用于创建和配置虚拟开发环境。它可以被视为虚拟化软件(如 VirtualBox、KVM 或 VMware)和配置管理软件(如 Chef、Salt 或 Puppet)的包装器。你可以从[https://www.vagrantup.com/downloads.html](https://www.vagrantup.com/downloads.html)下载游民。
在启动虚拟机之前，我们需要做一些配置。
### 获取发现令牌
每个 CoreOS 主机运行一个`etcd`服务实例，以协调在该机器上运行的服务，并与集群中其他机器上运行的服务进行通信。为此，`etcd`实例本身需要相互发现。
CoreOS 团队已经构建了一个发现服务([https://discovery . etcd . io](https://discovery.etcd.io))，该服务通过存储对等体信息来提供一个免费服务来帮助`etcd`实例相互通信。它通过提供标识集群的唯一令牌来工作。集群中的每个`etcd`实例使用发现服务使用该令牌来标识其他每个`etcd`实例。生成令牌很简单，只需向[discovery.etcd.io/new](http://discovery.etcd.io/new)发送`GET`请求即可:
```
$ curl -s https://discovery.etcd.io/new
https://discovery.etcd.io/5cfcf52e78c320d26dcc7ca3643044ee
```
现在打开`coreos-vagrant`目录中名为`user-data.sample`的文件，找到`etcd`服务下保存`discovery`配置选项的注释行。取消注释并提供从先前运行的`curl`命令返回的令牌。完成后，将文件重命名为`user-data`。
### 注
`user-data`文件用于在 CoreOS 实例中为`cloud-config`程序设置配置参数。Cloud-config 的灵感来自于`cloud-init`项目中的`cloud-config`文件，它将自己定义为事实上的多发行版包，处理云实例的早期初始化(`cloud-init`文档)。简而言之，它有助于配置各种参数，如要打开的端口，以及在 CoreOS 的情况下，`etcd`配置等。您可以在以下网址找到更多信息:
[https://coreos . com/docs/cluster-management/setup/cloudinit-cloud-config/](https://coreos.com/docs/cluster-management/setup/cloudinit-cloud-config/)和[http://cloudinit.readthedocs.org/en/latest/index.html](http://cloudinit.readthedocs.org/en/latest/index.html)。
以下是 CoreOS 的代码示例: