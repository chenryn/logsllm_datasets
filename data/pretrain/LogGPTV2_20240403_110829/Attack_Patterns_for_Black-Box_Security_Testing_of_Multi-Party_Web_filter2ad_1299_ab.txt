status of the account activation is loaded in U’s browser (steps
13-15). This scenario is not just limited to account activation
as the same process is followed by many SPs to verify the
authenticity of security-critical operations such as password
3
reset. For generality, we refer to this scenario as Veriﬁcation
via Email (in short, VvE).
Quite surprisingly, prominent SPs (e.g., twitter.com) do not
properly perceive and/or manage the risk associated to the
security-sensitive URIs sent via email to their users. It turns out
that some of these URIs give direct access to sensitive services
skipping any authentication step. For instance, when a user
has not signed into twitter for more than 10 days, twitter.com
sends emails to the user about the tweets the user missed
and this email contains security-sensitive URIs that directly
authenticates the user without asking for credentials. Such a
URL can be used by an attacker to silently authenticate a
victim to an attacker controlled twitter account. This attack
is widely known as login CSRF.
A. Attacks
Table I presents ten prominent attacks that were discovered
in literature on SSO- and CaaS-based MPWAs. It includes
the two attacks mentioned above (excluding login CSRF in
twitter), corresponding to #1 for SAML SSO, and #3 for
PayPal Payments Standard. We do not consider here XSS and
XML rewriting attacks (see Section VII for details). Hereafter,
we brieﬂy describe the other attacks.
#2: The attacker hosts SPM to obtain the AccessT oken
issued by the TTP Facebook for authenticating UV in SPM.
The very same AccessT oken is replayed against SPT to
authenticate as UV.
#4: The attacker completes a transaction T1 at SPT, and
the order id (OrderId), issued by the TTP PayPal for com-
pleting this transaction, is reused by the attacker to complete
another transaction T2 at SPM without payment.
#5: The attacker completes a transaction T1 at SPT and
the payment T oken issued by the TTP PayPal for completing
this transaction is reused by the attacker to complete another
transaction T2 at SPM without payment. In [32], the interaction
with PayPal was completely skipped during T2. Here, we focus
on the replay attack strategy used.
#6: The attacker spoofs the AppId of SPT in the
session between UV and SPM to obtain AccessT oken of UV.
The very same AccessT oken is then replayed by the attacker
in a session between SPT and UM to authenticate as UV at
SPT. In [36], a logic ﬂaw in ﬂash was applied to capture the
#7:
AccessT oken. Here, we focus on the replay attack strategy
used.
Initially,
the attacker obtains an authentication
assertion (AuthAssert) from the session between UM and
SPT. Then the attacker forces victim’s browser to submit
AuthAssert to SPT to silently authenticate UV as UM at SPT.
#8: The attacker obtains the value of AuthCode during
the session between UM and SPT. The attacker forces UV’s
browser to submit this value to SPT to silently authenticate
UV as UM at SPT.
#9: The attacker replaces the value of RedirectU RI to
a malicious URI (MALICIOUSURI) in the session between UV
and SPM. TTP sends AuthCode of UV to MALICIOUSURI
and the attacker obtains it. The AuthCode is then replayed
in the session between UM and SPT to authenticate as UV at
SPT.
#10: The attacker replaces the value of RedirectU RI
to a malicious URI (MALICIOUSURI) in the session between
UV and SPM. TTP sends AccessT oken of UV to MALI-
CIOUSURI and the attacker obtains it. The AccessT oken
is then replayed in the session between UM and SPT to
authenticate as UV at SPT.
B. Threat Models
The attacks shown in Table I can be discovered by con-
sidering the Web Attacker threat model introduced in [21] and
outlined hereafter according to our context:
Web Attacker. He/She can control a SP (referred to as the
SPM) that is integrated with a TTP. The SPM can subvert
the protocol ﬂow (e.g., by changing the order and value of
the HTTP requests/responses generated from her SP, including
redirection to arbitrary domains). The web attacker can also
operate a browser and communicate with other SPs and TTPs.
Notice also that none of the attacks discussed requires the
threat scenario in which the TTP can be played by the
attacker [31]. We do not consider this threat scenario.
III. FROM ATTACKS TO ATTACK PATTERNS
A close inspection of the attacks in Table I reveals that:
1)
they leverage a small number of nominal sessions of
the MPWA under test, namely those played by UV,
UM, SPT, and SPM, which we concisely represent by
(UV, SPT), (UM, SPT), (UV, SPM), (UM, SPM).4
they amount to combining sessions obtained by tam-
pering with the messages exchanged in one nominal
session or by replacing some message from one
nominal session into another.
2)
By session we mean any sequence of HTTP requests and
responses corresponding to an execution of the MPWA under
test. Our goal is to identify recipes, called attack patterns, that
specify how nominal sessions can be tampered with and com-
bined to ﬁnd attacks on MPWAs. We start by identifying and
comparing attack strategies for the attacks in Table I and then
we abstract them into general, i.e. application-independent,
attack patterns.
Attack strategies are built on top of the following three
operations:
4For the sake of simplicity we leave B and the TTP implicit since we identify
the browser with the user. The TTP, according to the threat model considered,
is assumed to be trustworthy.
4
•
•
•
indicating that
REPLAY x FROM S1 IN S2:
the
value of the HTTP element x extracted while exe-
cuting session S1 is replayed into session S2;
REPLACE x WITH v IN R: denoting that the HTTP
element x (e.g., SID) is replaced with the value v
(e.g., abcd1234) while executing the sequence of
HTTP requests R; and
REQUEST-OF x FROM R: indicating the extraction
of the HTTP request transporting the HTTP element
x while executing the sequence of HTTP requests R.
For the sake of simplicity, we present in the overall paper the
replay of a single element, but our attack patterns actually
support simultaneous replay of combinations of elements. By
abusing the notation, we use (U, SP) in place of R to indicate
the sequence of HTTP requests underlying the session (U, SP).
The attack strategies corresponding to the attacks described
in Table I are given in Table II.
In attack strategy #1 (and #2), the attacker runs a session
with the victim user UV playing the role of the service provider
SPM and replays AuthAssert (AccessT oken, resp.) into a
new session with a target service provider SPT. The attacker
tries thus to impersonate the victim (UV) at SPT.
Attack strategy #3 is analogous to the previous ones, the
difference being that the user role in the ﬁrst session is played
by the malicious user and the replayed element is P ayeeId.
Here the goal of the attacker is to use credits generated by
TTP, in the ﬁrst session, for SPM on SPT.
Attack strategy #4 (and #5) differs from the previous ones
in that the User and the SP roles are played by UM and SPT
respectively in both sessions. In doing so, the attacker aims to
“gain” something from SPT by re-using the T oken (OrderId,
resp.) obtained in a previous session with the same SPT.
Attack strategy #6 is the composition of two basic replay
attack strategies. The element AppId, obtained by running a
session between the victim user UV and the malicious service
provider SPM, is replayed to get the AccessT oken which is
then in turn replayed by the attacker UM to authenticate as
UV at SPT. Thus, the result should be the same obtained by
completing a session between UV and SPT.
In attack strategy #7 (and #8),
the HTTP request
(cf. REQUEST-OF keyword)
transporting AuthAssert
(AuthCode, resp.) in a session played by UM on SPT is
replaced on a sequence comprising a single HTTP request
in which UM sends a HTTP request
to SPT (denoted as
[UM SEND req]). Thus, the result should be the same obtained
by completing a session between UM and SPT.
In attack strategy #9 (and #10), the attacker includes a ma-
licious URI (MALICIOUSURI) in the session between UV and
SPT. In doing so, the credential AuthCode (AccessT oken,
resp.) is received by the attacker. By replaying this intercepted
AuthCode (AccessT oken, resp.) in the session between UM
and SPT, the attacker aims to authenticate as UV in SPT. Thus,
the result should be the same obtained by completing a session
between UV and SPT.
We have distilled the attack strategies in Table II into
a small set of general,
i.e. application-independent, attack
patterns which are summarized in Table III. To illustrate,
consider the attack pattern RA1. This pattern has been obtained
from attack strategy #1 (#2) in Table II by abstracting the
element to replay, i.e. AuthAssert (AccessT oken, resp.) into
a parameter x.
TABLE I: Attacks against security-critical Multi Party Web Applications
#
1
2
3
4
5
6
7
8
9
Vulnerable MPWA
SPs implementing Google’s SAML
SSO [23, §4]
SPs implementing OAuth 2.0 implicit
ﬂow-based Facebook SSO [38, §5.2.1]
PayPal Payments Standard implemen-
tation in SPs using osCommerce v2.3.1
or AbanteCart v1.0.4 [32, §IV.A.1]
SPs implementing CaaS solutions of
2Checkout, Chrono-Pay, PSiGate and
Luottokunta (v1.2) [35, §V.A]
PayPal Express Checkout implementa-
tion in SPs using OpenCart 1.5.3.1 or
TomatoCart 1.1.7 [32, §IV.A.2]
SPs implementing OAuth 2.0 implicit
ﬂow-based Facebook SSO [36, §4.2]
(SP)
developer.mozilla.com
implementing BrowserID [24, §6.2]
CitySearch.com (SP) using Facebook
SSO (OAuth 2.0 Auth. Code Flow)
[25, §V.C]
Github (TTP) implementing OAuth 2.0
Authorization Code ﬂow-based SSO
[1, Bug 2]
10
SPs implementing Facebook SSO [2]
Description of the Attack
Replay UV’s AuthAssert for SPM in SPT
Replay UV’s AccessT oken for SPM in SPT
Replay P ayeeId of SPM during transaction T at SPT
Attacker’s Goal
Authenticate as
UV at SPT
Authenticate as
UV at SPT
Complete T at
SPT
Replay OrderId of transaction T1 at SPT during trans-
action T2 at SPT
Complete T2 at
SPT
Replay T oken of transaction T1 at SPT during transac-
tion T2 at SPT
Complete T2 at
SPT
Replay AppId of SPT in the session between UV and
SPM to obtain AccessT oken of UV which is then
replayed to SPT.
Make UV browser send request
AuthAssert
Make UV browser send request
AuthCode
to SPT with UM’s
to SPT with UM’s
Replace the value of RedirectU RI to MALICIOUSURI
in the session between UV and SPM to obtain AuthCode
of UV and replay this AuthCode in the session between
UM and SPT
Replace the value of RedirectU RI to MALICIOUSURI
in the session between UV and SPM to obtain
AccessT oken of UV and replay this AccessT oken in
the session between UM and SPT
Authenticate as
UV at SPT
Authenticate as
UM at SPT
Authenticate as
UM at SPT
Authenticate as
UV at SPT
Authenticate as
UV at SPT
TABLE II: Known Attacks Strategies against MPWAs
Id Attack Strategy
1
2
3
4
5
6
7
8
9
REPLAY AuthAssert FROM (UV, SPM) IN (UM, SPT)
REPLAY AccessT oken FROM (UV, SPM) IN (UM, SPT)
REPLAY P ayeeId FROM (UM, SPM) IN (UM, SPT)
REPLAY OrderId FROM (UM, SPT) IN (UM, SPT)
REPLAY T oken FROM (UM, SPT) IN (UM, SPT)
REPLAY AccessT oken FROM S IN (UM, SPT)
where S = REPLAY AppId FROM (UM, SPT) IN (UV, SPM)
REPLACE x WITH REQUEST-OF AuthAssert FROM (UM, SPT) IN [UM SEND x]
REPLACE x WITH REQUEST-OF AuthCode FROM (UM, SPT) IN [UM SEND x]
REPLAY AuthCode FROM S IN (UM, SPT)
where S = REPLACE RedirectU RI WITH MALICIOUSURI IN (UV, SPT)
10 REPLAY AccessT oken FROM S IN (UM, SPT)
where S = REPLACE RedirectU RI WITH MALICIOUSURI IN (UV, SPT)
5
TABLE III: Attack Patterns
Name
Attack Strategy
RA1