### Status of Account Activation in the User's Browser

The account activation status is loaded in the user's browser (steps 13-15). This scenario is not limited to account activation; many service providers (SPs) use a similar process to verify the authenticity of security-critical operations, such as password resets. For generality, we refer to this scenario as **Verification via Email (VvE)**.

### Security Risks with Prominent SPs

Surprisingly, prominent SPs, such as Twitter, do not adequately manage the risks associated with security-sensitive URIs sent via email to their users. Some of these URIs provide direct access to sensitive services without requiring any authentication. For example, if a user has not signed into Twitter for more than 10 days, Twitter sends an email containing security-sensitive URIs that directly authenticate the user without asking for credentials. An attacker could exploit such a URL to silently authenticate a victim to an attacker-controlled Twitter account. This type of attack is known as **login CSRF**.

### Attacks on SSO- and CaaS-based MPWAs

Table I presents ten prominent attacks discovered in literature on Single Sign-On (SSO) and Cloud Access Security Broker (CaaS)-based Multi-Party Web Applications (MPWAs). These include the two attacks mentioned above (excluding the login CSRF in Twitter), corresponding to #1 for SAML SSO and #3 for PayPal Payments Standard. We do not consider Cross-Site Scripting (XSS) and XML rewriting attacks (see Section VII for details). Below, we briefly describe the other attacks:

#### Attack Descriptions

1. **#2: Access Token Replay**
   - The attacker hosts a malicious service provider (SPM) to obtain the `AccessT oken` issued by the trusted third party (TTP) Facebook for authenticating the victim user (UV) in SPM. The same `AccessT oken` is then replayed against a target service provider (SPT) to authenticate as UV.

2. **#4: Order ID Reuse**
   - The attacker completes a transaction T1 at SPT, and the order ID (`OrderId`) issued by the TTP PayPal for completing this transaction is reused to complete another transaction T2 at SPM without payment.

3. **#5: Payment Token Reuse**
   - The attacker completes a transaction T1 at SPT and reuses the payment token issued by the TTP PayPal to complete another transaction T2 at SPM without payment. In [32], the interaction with PayPal was completely skipped during T2. Here, we focus on the replay attack strategy used.

4. **#6: AppID Spoofing and Access Token Replay**
   - The attacker spoofs the `AppId` of SPT in the session between UV and SPM to obtain the `AccessT oken` of UV. The same `AccessT oken` is then replayed by the attacker in a session between SPT and the malicious user (UM) to authenticate as UV at SPT. In [36], a logic flaw in Flash was exploited to capture the `AccessT oken`.

5. **#7: Authentication Assertion Replay**
   - Initially, the attacker obtains an authentication assertion (`AuthAssert`) from the session between UM and SPT. Then, the attacker forces the victim’s browser to submit `AuthAssert` to SPT to silently authenticate UV as UM at SPT.

6. **#8: Authorization Code Replay**
   - The attacker obtains the value of `AuthCode` during the session between UM and SPT. The attacker forces UV’s browser to submit this value to SPT to silently authenticate UV as UM at SPT.

7. **#9: Malicious Redirect URI for AuthCode**
   - The attacker replaces the value of `RedirectU RI` to a malicious URI (MALICIOUSURI) in the session between UV and SPM. The TTP sends `AuthCode` of UV to MALICIOUSURI, and the attacker obtains it. The `AuthCode` is then replayed in the session between UM and SPT to authenticate as UV at SPT.

8. **#10: Malicious Redirect URI for Access Token**
   - The attacker replaces the value of `RedirectU RI` to a malicious URI (MALICIOUSURI) in the session between UV and SPM. The TTP sends `AccessT oken` of UV to MALICIOUSURI, and the attacker obtains it. The `AccessT oken` is then replayed in the session between UM and SPT to authenticate as UV at SPT.

### Threat Models

The attacks shown in Table I can be discovered by considering the **Web Attacker** threat model introduced in [21] and outlined here according to our context:

- **Web Attacker**: This attacker can control a service provider (referred to as SPM) that is integrated with a TTP. The SPM can subvert the protocol flow (e.g., by changing the order and value of HTTP requests/responses generated from her SP, including redirection to arbitrary domains). The web attacker can also operate a browser and communicate with other SPs and TTPs. Note that none of the attacks discussed requires the TTP to be controlled by the attacker [31]. We do not consider this threat scenario.

### From Attacks to Attack Patterns

A close inspection of the attacks in Table I reveals that they leverage a small number of nominal sessions of the MPWA under test, specifically those played by UV, UM, SPT, and SPM, which we concisely represent as (UV, SPT), (UM, SPT), (UV, SPM), and (UM, SPM). These attacks involve tampering with messages exchanged in one nominal session or replacing some message from one nominal session into another.

By "session," we mean any sequence of HTTP requests and responses corresponding to an execution of the MPWA under test. Our goal is to identify recipes, called **attack patterns**, that specify how nominal sessions can be tampered with and combined to find attacks on MPWAs. We start by identifying and comparing attack strategies for the attacks in Table I and then abstract them into general, i.e., application-independent, attack patterns.

### Attack Strategies and Operations

Attack strategies are built on top of the following three operations:

- **REPLAY x FROM S1 IN S2**: The value of the HTTP element `x` extracted while executing session S1 is replayed into session S2.
- **REPLACE x WITH v IN R**: The HTTP element `x` (e.g., SID) is replaced with the value `v` (e.g., abcd1234) while executing the sequence of HTTP requests `R`.
- **REQUEST-OF x FROM R**: The extraction of the HTTP request transporting the HTTP element `x` while executing the sequence of HTTP requests `R`.

For simplicity, we present the replay of a single element, but our attack patterns support simultaneous replay of combinations of elements. By abusing the notation, we use (U, SP) in place of `R` to indicate the sequence of HTTP requests underlying the session (U, SP).

### Attack Strategies in Table II

- **#1 (and #2)**: The attacker runs a session with the victim user UV playing the role of the service provider SPM and replays `AuthAssert` (or `AccessT oken`) into a new session with a target service provider SPT. The attacker aims to impersonate the victim (UV) at SPT.
- **#3**: Similar to the previous ones, but the user role in the first session is played by the malicious user, and the replayed element is `P ayeeId`. The goal is to use credits generated by the TTP in the first session for SPM on SPT.
- **#4 (and #5)**: The User and the SP roles are played by UM and SPT, respectively, in both sessions. The attacker aims to gain something from SPT by reusing the `T oken` (or `OrderId`) obtained in a previous session with the same SPT.
- **#6**: The composition of two basic replay attack strategies. The `AppId` obtained by running a session between UV and SPM is replayed to get the `AccessT oken`, which is then replayed by the attacker UM to authenticate as UV at SPT.
- **#7 (and #8)**: The HTTP request transporting `AuthAssert` (or `AuthCode`) in a session played by UM on SPT is replaced on a sequence comprising a single HTTP request in which UM sends a request to SPT. The result should be the same as completing a session between UM and SPT.
- **#9 (and #10)**: The attacker includes a malicious URI (MALICIOUSURI) in the session between UV and SPM. The credential `AuthCode` (or `AccessT oken`) is received by the attacker. By replaying this intercepted `AuthCode` (or `AccessT oken`) in the session between UM and SPT, the attacker aims to authenticate as UV in SPT.

### General Attack Patterns

We have distilled the attack strategies in Table II into a small set of general, i.e., application-independent, attack patterns summarized in Table III. For example, consider the attack pattern **RA1**. This pattern is derived from attack strategy #1 (or #2) in Table II by abstracting the element to replay, i.e., `AuthAssert` (or `AccessT oken`), into a parameter `x`.

### Summary Tables

#### Table I: Attacks against Security-Critical Multi-Party Web Applications

| # | Vulnerable MPWA | Description of the Attack | Attacker's Goal |
|---|-----------------|---------------------------|-----------------|
| 1 | SPs implementing Google’s SAML SSO | Replay UV’s `AuthAssert` for SPM in SPT | Authenticate as UV at SPT |
| 2 | SPs implementing OAuth 2.0 implicit flow-based Facebook SSO | Replay UV’s `AccessT oken` for SPM in SPT | Authenticate as UV at SPT |
| 3 | PayPal Payments Standard implementation in SPs using osCommerce v2.3.1 or AbanteCart v1.0.4 | Replay `P ayeeId` of SPM during transaction T at SPT | Complete T at SPT |
| 4 | SPs implementing CaaS solutions of 2Checkout, Chrono-Pay, PSiGate, and Luottokunta (v1.2) | Replay `OrderId` of transaction T1 at SPT during transaction T2 at SPT | Complete T2 at SPT |
| 5 | PayPal Express Checkout implementation in SPs using OpenCart 1.5.3.1 or TomatoCart 1.1.7 | Replay `T oken` of transaction T1 at SPT during transaction T2 at SPT | Complete T2 at SPT |
| 6 | SPs implementing OAuth 2.0 implicit flow-based Facebook SSO | Replay `AppId` of SPT in the session between UV and SPM to obtain `AccessT oken` of UV, which is then replayed to SPT | Authenticate as UV at SPT |
| 7 | developer.mozilla.com implementing BrowserID | Make UV browser send request `AuthAssert` to SPT with UM’s | Authenticate as UM at SPT |
| 8 | CitySearch.com (SP) using Facebook SSO (OAuth 2.0 Auth. Code Flow) | Make UV browser send request `AuthCode` to SPT with UM’s | Authenticate as UM at SPT |
| 9 | Github (TTP) implementing OAuth 2.0 Authorization Code flow-based SSO | Replace the value of `RedirectU RI` to MALICIOUSURI in the session between UV and SPM to obtain `AuthCode` of UV and replay this `AuthCode` in the session between UM and SPT | Authenticate as UV at SPT |
| 10 | SPs implementing Facebook SSO | Replace the value of `RedirectU RI` to MALICIOUSURI in the session between UV and SPM to obtain `AccessT oken` of UV and replay this `AccessT oken` in the session between UM and SPT | Authenticate as UV at SPT |

#### Table II: Known Attack Strategies against MPWAs

| Id | Attack Strategy |
|----|-----------------|
| 1  | REPLAY `AuthAssert` FROM (UV, SPM) IN (UM, SPT) |
| 2  | REPLAY `AccessT oken` FROM (UV, SPM) IN (UM, SPT) |
| 3  | REPLAY `P ayeeId` FROM (UM, SPM) IN (UM, SPT) |
| 4  | REPLAY `OrderId` FROM (UM, SPT) IN (UM, SPT) |
| 5  | REPLAY `T oken` FROM (UM, SPT) IN (UM, SPT) |
| 6  | REPLAY `AccessT oken` FROM S IN (UM, SPT) where S = REPLAY `AppId` FROM (UM, SPT) IN (UV, SPM) |
| 7  | REPLACE `x` WITH REQUEST-OF `AuthAssert` FROM (UM, SPT) IN [UM SEND `x`] |
| 8  | REPLACE `x` WITH REQUEST-OF `AuthCode` FROM (UM, SPT) IN [UM SEND `x`] |
| 9  | REPLAY `AuthCode` FROM S IN (UM, SPT) where S = REPLACE `RedirectU RI` WITH MALICIOUSURI IN (UV, SPT) |
| 10 | REPLAY `AccessT oken` FROM S IN (UM, SPT) where S = REPLACE `RedirectU RI` WITH MALICIOUSURI IN (UV, SPT) |

#### Table III: Attack Patterns

| Name | Attack Strategy |
|------|-----------------|
| RA1  | REPLAY `x` FROM (UV, SPM) IN (UM, SPT) |

This structured and detailed approach provides a clear and professional overview of the attacks, threat models, and attack patterns, making it easier to understand and analyze the security vulnerabilities in multi-party web applications.