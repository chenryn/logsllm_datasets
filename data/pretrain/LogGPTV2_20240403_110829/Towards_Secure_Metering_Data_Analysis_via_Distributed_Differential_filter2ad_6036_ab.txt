appliance in idle mode, PK is the estimated threshold power
consumption to select the top-k appliances with the largest
consumption, and tpl and tph indicate the timestamp range of
peak times. Then the controller transmits the query to the data
collector, which forwards the query to the concentrator.
(cid:4)
(cid:4)
t =, where
noise, i.e., the transformed query Q
(cid:4) =‘SELECT appliances FROM history log WHERE p > PK
q
and t ∈ [tpl − m, tph]’, where m is the noise added by
, where rs is the
the concentrator, and m >
sample rate of the data collector, k is the number of the
returned query answers, ε is the privacy budget and OP Te
is the estimated sum of top-k appliances power usage based
on historical information. Then, the transformed query request
Q
(cid:4)
t is forwarded to each of the smart meters in the NAN.
Query Response. After receiving the query request, each
smart meter of a house searches the history log based on the
rs ln(e+ε2kOP Te)
ε
Algorithm Keygen(l)
1. return (Kp, Ks) ← RSA.Keygen(l)
Algorithm InitQuery(q)
1. Relax the original query q’s time range from [tpl, tph] to
[tpl − m, tph].
2. return q
(cid:2)
(cid:2))
Algorithm P roctEnc(q
1. search the history log to obtain the answers QA of the query
, QA = {}
(cid:2)
q
2. add the noise ni in the power consumption to generate a
fuzzy query answer QA
3. return RSA.Enc(Kp, QA
, i.e., pai + ni.
(cid:2))
(cid:2)
Algorithm InitAnswer(CQA)
1. add ci noise query answers based on the frequency fi of
each appliance appearing (i.e., HKp (i||ai))
2. uniformly sample k distinct items R from the set of the
query responses including the noise query answers.
3. return R
Algorithm Dec(R)
1. return RSA.Dec(Ks, R)
Fig. 3. The sequential scheme of algorithms.
query request. When the smart meter of house i obtains the set
of the query answers QA = {}, where ai, pai , ti
are the UID of the appliance, the power consumption and the
timestamp respectively, it adds noise then encrypts the set of
answers before sending them back to the concentrator. The
format of the data message sent from the smart meter, S, to
the concentrator, P , is as follows:
(i||ai)||EKp
(1)
where Ekp is an asymmetric encryption scheme (such as
RSA), Hkp is a hash function (such as SHA-2), and ni is
the power consumption noise, ni = LAP ( Δfs
S → P : HKp
+ ni)||EKp
ε ), Δfs  OP T − 2t}, where
εOP T
A() is the sequential scheme we proposed.
2
−εt
≤ e
∵ m >
μ(St)
kOP Te)
∴ E[A(ai)] = (OP T − 2t)(1 − A(S2t))
∵ A(S2t) ≤ A(S2t)
A(St)
rs ln(e + ε
ε
rs ln OP T
tμ(St)
ε
−εt
∴ 1 − A(S2t) (cid:4) 1 − e
∴ E[A(ai)] ≥ OP T − 3m
rs
μ(St) > 1 − m
>
rsOP T
≥ OP T − 3 ln(e + ε
ε
kOP T )
2
∴ d ≤ 3 ln(e + ε
εOP T
2
kOP T )
(6)
(7)
(8)
(9)
(10)
(11)
(12)
(13)
(14)
In this section, we present the syntax of our scheme, and
describe the provable privacy and the upper bound of the error
rate theoretically.
A. Syntax
the
load data
• Initialize query: q
analysis mechanism for
Deﬁnition 3: A privacy-preserving and ﬁne-grained pow-
er
appliance-
level peak-time load balance control consists of a tuple
(Keygen, InitQuery, P roctEnc, InitAnswer, Dec) as
follows:
• Key generation: (Kp, Ks) ← Keygen(l). Keygen runs
at the controller side, which generates the public-secret
key pair (Kp, Ks) for encryption.
(cid:4) ← InitQuery(q). InitQuery runs on
the concentrator side, which transforms the query request
q from the controller to a new query request q
(cid:4)). ProctEnc runs on the
(cid:4)
smart meter of each house, which answers the query q
then encrypts the query answers.
• Initialize answer: R ← InitAnswer(CQA). InitAnswer
runs at the concentrator side to output k encrypted query
answers R.
• Decryption: M ← Dec(R). Dec runs at the controller
• Response: CQA ← P roctEnc(q
(cid:4).
side to decrypt then obtain the query answer M.
The algorithms are shown in Figure 3.
B. Privacy Analysis
Theorem 1: (compositionality [14]) The sequential scheme
of randomized algorithms {Ai}, each giving {εi}-differential
privacy respectively, gives (
i εi)-differential privacy.
(cid:2)
Theorem 2: The scheme we proposed gives 3ε-differential
privacy.
Proof: In ProctEnc(), as the power consumption noise
ε ), the
ni is added as the Laplace noise, i.e., ni = LAP ( Δfs
algorithm ProctEnc() is ε-differential privacy.
In InitAnswer() (a.k.a., IA()), considering fc(ai) < 1 ,
where fc(ai) is the chosen frequency of the appliance ai ,
hence the sensitivity of the chosen frequency Δfc(ai) < 1.
With the noises c(ai) = neεfc(ai) − fc(ai) added for the
appliance ai and uniformly sample, the sampled probability
of the appliance ai is eεfc(ai). For two data sets D1 and D2
differing on at most one row,
e
P r(IA(D1))
P r(IA(D2))
= eε(fc(D1,ai)−fc(D2,ai))
−ε(fc(D1,ai)−fc(D2,ai))
= eεΔfc(ai)
−εΔfc(ai)
e
2εΔfc(ai) ≤ e
= e
∴ P r(IA(D1)) ≤ e
P r(IA(D2))
2ε
2ε
(2)
(3)
(4)
(5)
Hence, the algorithm InitAnswer() is 2ε-differential privacy.
By the use of Theorem 1, the scheme we proposed gives
3ε-differential privacy.
5
Hence, the upper bound of the error rate in our scheme is
3 ln(e+ε2kOP T )
εOP T
.
VII. EVALUATION
In this section, we present an evaluation of the accuracy
and efﬁciency of our scheme, based on a real-world dataset:
UMASS SMART* dataset [15], which included the power
usage of about 30 appliances, and the average sample rate
of appliance usage is 30 seconds/appliance per house. The
simulation is implemented in Python on a PC which had two
3.10 GHz Intel Core i5-2400 processors running the Linux
3.5 kernel. We used pycrypto (a.k.a., Python Cryptography
Toolkit) to implement the RSA-OAEP and SHA-2 as instances
of the public-key encryption and hash function, respectively.
The performance of the scheme is evaluated regarding the
tradeoff between the privacy and the accuracy as well as the
response delay of the scheme. In particular, we answer the
following questions:
• (Accuracy) What is the accuracy of the query results of
the scheme under different privacy budgets? And how do
the error rates under different privacy budgets compare
with the theoretical upper bound?
• (Delay) How does the response time increase when our
scheme is used? That is, how much overhead is incurred
by the use of the privacy modules on the concentrator
and the smart meter in the smart grid?
A. Accuracy Analysis
To evaluate the accuracy of the scheme, we measure the
error rate of our scheme compared with the upper bound
we proved theoretically. Figure 4 shows the error rate of the
scheme with different privacy budgets ε. Both the theoretical
upper bound of the error rate and the error rate in the
experiment are presented. Overall, the error rate of the scheme
decreases as the number of query results k increases. With
the larger privacy budget ε, i.e., ε = 0.1, both the upper
bound of the error rate and the experimental error rate are
smaller than those with smaller privacy budget, i.e., ε = 0.01.
Compared to the upper bound of the error rate under the same
privacy budget, the experimental error rate is much lower than
the theoretical one. Moreover, when the privacy budget is
small, the difference between the upper bound of the error
rate and the experimental error rate becomes larger. Overall,
the theoretical upper bound of the error rate ranges from 15%
- 40% given the stated privacy budgets. However, the observed
error rates based on the experiments are less than 14% when
ε = 0.01 and less than 7% when ε = 0.1.
t
e
a
r
r
o
r
r
e
e
h
T
0.5
0.45
0.4
0.35
0.3
0.25
0.2
0.15
0.1
0.05
0
10
ε=0.1 (theoretical)
ε=0.1 (experimental)
ε=0.01 (theoretical)
ε=0.01 (experimental)
12
14
K
16
18
20
Fig. 4. The error rate of our scheme with different privacy budgets.
B. Delay Analysis
To evaluate the Delay of our scheme, we measured the
response time of our scheme under the real-world dataset
compared with the original scheme without any security and
privacy protection. Figure 5 presents the response time of our
scheme with different privacy budgets (i.e., ε = 0.1 and 0.01).
To indicate the performance degradation, the response time
of our scheme is compared with that without any security
mechanism. As the number of query results k increases, the
response time of the scheme increases. Also,
the smaller
privacy budget introduces a larger performance degradation,
i.e., when the privacy budget ε = 0.01, the response time
becomes larger than that with a smaller privacy budget. In our
privacy-preserving scheme with privacy budget ε = 0.1, the
increase in the response time is below 0.4s, which is about
105% of that without any security mechanism.
VIII. CONCLUSION AND FUTURE WORK
In this paper, we present a privacy-preserving ﬁne-grained
power usage data analysis mechanism for appliance-level
peak-time load balance control in a NAN based smart grid. Our
scheme provides provable privacy and accuracy guarantees.
6
)
s
(
e
m
i
t
e
s
n
o
p
s
e
R
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
10
ε=0.1
ε=0.01
without privacy
12
14
K
16
18
20
Fig. 5. The response time with different privacy budgets.
The scheme we proposed is based on distributed differential
privacy to protect residents from the NILM attack. Through
the evaluation based on a real-world dataset, we showed that
our scheme provided privacy and accuracy guarantees while
achieving good performance. In our future work, we will
consider additional metrics for peak-time load balance control,
such as the fairness of the appliances being chosen to shut off
and the total power usage of the household. Also, we will
implement a prototype of the scheme in a testbed to evaluate
its performance.
REFERENCES
[1] M. Jawurek, F. Kerschbaum, G. Danezis. SoK: Privacy Technologies for
Smart Grids - A Survey of Options. In 2012 Microsoft Technical Report.
[2] G. W. Hart. Nonintrusive appliance load monitoring. In Proceedings of
the IEEE, 1992, 80(12): 1870-1891.
[3] I. Rouf, H. Mustafa, M. Xu, et al. Neighborhood watch: security and
privacy analysis of automatic meter reading systems. In Proceedings of
the 2012 ACM CCS: 462-473.
[4] R. Rajagopalan, L. Sankar, S. Mohajer, et al. Smart meter privacy: A
utility-privacy framework. In Proceedings of the 2011 IEEE SmartGrid-
Comm: 190-195.
[5] S. McLaughlin, P. McDaniel, W. Aiello. Protecting consumer privacy
from electric load monitoring. In Proceedings of the 2011 ACM CCS:
87-98.
[6] W. Yang, N. Li, Y. Qi, et al. Minimizing private data disclosures in the
smart grid. In Proceedings of the 2012 ACM CCS: 415-427.
[7] P. Deng, L. Yang. A secure and privacy-preserving communication
scheme for Advanced Metering Infrastructure. In Proceedings of the 2012
IEEE ISGT: 1-5.
[8] F. Li, B. Luo, P. Liu. Secure information aggregation for smart grids using
homomorphic encryption. In Proceedings of the 2010 IEEE SmartGrid-
Comm: 327-332.
[9] C. Rottondi, G. Verticale. Privacy-friendly appliance load scheduling in
smart grids. In Proceedings of the 2013 IEEE SmartGridComm: 420-425.
[10] M. Dijk, C. Gentry, S. Halevi, et al. Fully Homomorphic Encryption
over the Integers. In Advances in Cryptology-Eurocrypt 2010: 24-43.
[11] J. Coron, A. Mandal, D. Naccache, et al. Fully Homomorphic Encryption
over the Integers with Shorter Public Keys. In Advances in Cryptology-
Crypto 2011: 487-504.
[12] P. Paillier. Public-key Cryptosystems based on Composite Degree Resid-
uosity Classes. In Advances in cryptology-EUROCRYPT 1999: 223-238.
[13] Y. Yan, Y. Qian, H. Sharif. A secure and reliable in-network collaborative
communication scheme for advanced metering infrastructure in smart
grid. In Proceedings of the 2011 IEEE WCNC: 909-914.
[14] C. Dwork. Differential privacy. In Automata, languages and program-
ming. Springer Berlin Heidelberg, 2006: 1-12.
[15] S. Barker, A. Mishra, D. Irwin, et al. Smart*: An open data set and tools
for enabling research in sustainable homes. In Proceedings of the 2012
SustKDD.