样本使用到的技术很多，例如动态加载、花指令、反调试、多层解密、代码注入等，使用的这些技巧大大增加了安全人员分析工作所需要花费的时间，也能有效躲避杀软检测，并使一些分析工具产生异常而无法正常执行恶意代码流程。下面举例说明一下使用到的技巧：
代码中加入了大量的JMP类型花指令，还有一些无效的计算，比如下图中红框中ECX。
在每次获取API地址之后，都会检测API代码第一字节是否等于0xcc，如果等于则结束后续行为，否则继续。
Shellcode通过自身的配置信息，通过一个for循环，循环4次。每次根据EDI定位配置信息，通过下面的结构体来获取要拷贝的数据的大小，将所有需要的数据拷贝到申请的内存中。然后解密数据。
循环拷贝数据
**关联分析及溯源**
8月的域名为 nylalobghyhirgh.com，360威胁情报中心显示此域名为隐私保护状态：
此域名目前在7月23日被注册，8月3日达到解析量的顶峰，360网络研究院的数据显示解析量巨大，达到800万。
所有的请求类型为NS记录，也就是说域名极有可能被用来析出数据而不是用于C&C控制，这与前面的分析结论一致。
而notped.com作为已知的相关恶意域名，我们发现其注册人为Yacboski
Curtis，据此关联点找到了一些其他的关联域名，具体见附件的IOC节，由于这些域名并没有找到对应的连接样本，目前只是怀疑，不能确定就是其他的相关恶意域名。
**参考链接**
**附件**
**IOC列表**
**DNS 隧道编解码算法**
Xshell后门代码通过DNS子域名的方式向C&C服务器输出收集到的主机信息，以下是分析得到的编码算法及实现的对应解码程序。
编码算法是先经过下图的算法1加密成二进制的形式如图：
算法1加密后的数据：
然后把结果转换成可见的字符转换方法是通过每个字节的高位减‘j’低位减‘a’，把1个字节拆分成2个字节的可见字符，这样就浪费了一个字节：
解密算法是加密算法的逆运算，解密算法流程入下图：
根据网上的一些公开的流量数据，
解密出的一些上传的数据：
实现的解码代码如下：
    int sub_1C3E(int a1, unsigned char* a2, int a3, int a4)
    {
    char v4; // cl@1
    int v5; // esi@1
    unsigned char* v6; // edi@2
    byte v7[1024]= {0}; // eax@11
    char v8; // dl@11
    int v10; // [sp+4h] [bp-10h]@1
    int v11; // [sp+8h] [bp-Ch]@1
    int v12; // [sp+Ch] [bp-8h]@1
    int v13; // [sp+10h] [bp-4h]@1
    v4 = 0;
    v5 = 0;
    v10 = a1;
    v11 = a1;
    v12 = a1;
    v13 = a1;
    int i = 0;
    if ( a3 > 0 )
    {
    v6 = a2 - a4;
    do
    {
    if ( v5 & 3 )
    {
    switch ( v5 & 3 )
    {
    case 1:
    v11 = 0xBFD7681A - 0x7DB1F70F * v11;
    v4 = (*((byte *)&v11  + 2) ^ (*((byte *)&v11 + 1)
    + (*((byte *)&v11) ^ v4)))
    - *((byte *)&v11 + 3);
    //v7 = (byte *)(v5 + a4);
    v8 = v4 ^ *(byte *)(v6 + v5++ + a4);
    v7[i] = v8;
    i++;
    break;
    case 2:
    v12 = 0xE03A30FA - 0x3035D0D6 * v12;
    v4 = (*((byte *)&v12  + 2) ^ (*((byte *)&v12 + 1)
    + (*((byte *)&v12) ^ v4)))
    - *((byte *)&v12 + 3);
    //v7 = (byte *)(v5 + a4);
    v8 = v4 ^ *(byte *)(v6 + v5++ + a4);
    v7[i] = v8;
    i++;
    break;
    case 3:
    v13 = 0xB1BF5581 - 0x11C208F * v13;
    v4 = (*((byte *)&v13  + 2) ^ (*((byte *)&v13 + 1)
    + (*((byte *)&v13) ^ v4)))
    - *((byte *)&v13 + 3);
    //v7 = (byte *)(v5 + a4);
    v8 = v4 ^ *(byte *)(v6 + v5++ + a4);
    v7[i] = v8;
    i++;
    break;
    }
    }
    else
    {
    v10 = 0x9F248E8A - 0x2F8FCE7E * v10;
    v4 = (*((byte *)&v10 + 2) ^ (*((byte *)&v10 + 1)
    + (*((byte *)&v10 ) ^ v4)))
    - *((byte *)&v10 + 3);
    //v7 = (byte *)(v5 + a4);
    v8 = v4 ^ *(byte *)(v6 + v5++ + a4);
    v7[i] = v8;
    i++;
    }
    }
    while ( v5 < a3 );
    printf("Last Step Decode：%s", (char*)v7);
    }
    return 0;
    }
    int _tmain(int argc, _TCHAR* argv[])
    {
    unsigned char szText[117] = "ajajlyoogrmkdmnndtgphpojmwlvajdkbtephtetcqopnkkthlplovbvardopqfleonrgqntmresctokkxcnfvexhjpnpwepgnjubrbrbsenhxbkmy";
    unsigned char szXXX[58] = {0};
    for (int i=0; i<57; i++)
    {
    unsigned char One = szText[2*i] - 'a';
    unsigned char Two = szText[2*i+1] -'j';
    printf("%d, %drn", One, Two);
    unsigned char Total = One+Two*16;
    szXXX[i] = Total;
    }
    printf("First Step Decode：%s", (char*)szXXX); 
    sub_1C3E(0, szXXX, 56, 0); //算法1
    return 0;
    }
**ShellCode的处理**
本次后门多次解出ShellCode的过程都是用的同一套模版代码。经过分析发现PE的一些基本信息还是保留了的，ShellCode解码用到的结构整理如下：
    struct ShellContext
    {
    u32 dwShellKey;//用于解密重定位表以及输入表的数据
    u32 HeadCheck;//和dwShellKey异或用来校验Key是否合法
    u32 SizeOfImage;//Image大小
    u32 ModBase;//默认基地址
    u32 RelocTable;//重定位表偏移
    u32 RelocSize;//重定位表大小
    u32 ImportTable;//输入表偏移
    u32 ImportSize;//输入表大小
    u32 OEP;//OEP地址
    u16 Magic;//010b为pe32
    u8MajorVer;//链接器版本
    u8  MinorVer;//
    u32 NumberOfSections;//节表数
    u32 timeStamp;//时间戳
    SectionDescsecArray[1]; //节表描述数组
    };
下面介绍下ShellCode的加载过程，在调用Loader之前先将ShellCode起始地址以及大小入栈。
然后进入Loader部分处理流程：
1）从PEB里找到Kernel模块，从中找到LoadLibrary，GetProcAddress，VirtualAlloc以及Sleep，以备后续过程使用。
2）接着利用ShellCode中的SizeOfImage去分配内存。
3）往分配的内存头部填充垃圾数据，一直填充到代码段开始。
4）根据结构里保存的节表信息，依次填充到分配的内存。
5）如果结构里重定位信息不为空，则使用dwShellKey去解密重定位数据并利用重定位数据去修正内存的数据。处理完之后把重定位数据清零。
解密重定位数据的算法还原如下
6）如果输入表信息不为空，接着使用重定位处理用的dwShellKey去解密输入表对应的字符串信息，如果是ordinal方式的则不做处理。使用解密了的DLL名以及API名获取到API地址后，并不直接填充，而是先把地址做求补操作后，生成一个小的stub再填进去。
最后再把输入表用到的数据清零。
解密输入表的流程还原如下：
7）跳到入口处执行，并设置fdwReason为1。
根据保留的结构可以大致还原出本来模块文件。