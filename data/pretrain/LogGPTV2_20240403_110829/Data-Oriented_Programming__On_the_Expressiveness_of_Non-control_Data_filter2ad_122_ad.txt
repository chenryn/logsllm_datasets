595
37
12
13
3
53
10
114
FP
50
542
125
177
0
9
23
232
0
H
0
54
8
26
0
2
2
17
0
G
0
160
3
28
21
5
16
6
5
Logical
FP
40
292
13
265
10
0
13
305
3
H
0
17
6
7
0
2
2
24
0
Conditional
H
G
0
0
17
70
4
3
6
3
9
1
0
3
0
7
0
3
3
3
7518
FP
6
55
7
22
0
0
2
28
2
program source code. Then we identify the gadget dis-
patchers that enfold the vulnerable code and collect the
data-oriented gadgets.
2) Exploit chain construction (Manual). We take the
expected malicious MINDOP program as input. Each
MINDOP operation can be achieved by any data-oriented
gadget
in the corresponding functional category. We
select gadgets based on their priorities.
3) Stitchability veriﬁcation (Manual). Once we get a chain
of data-oriented gadgets for desired functionality, we
verify that every stitching is possible with the gadget
dispatcher surrounding them. We feed concrete input to
the program to trigger memory errors to connect expected
gadgets. If the attack does not work, we roll back to Step
2) to select different gadgets and try the stitching again.
V. EVALUATION
In this section, we measure the feasibility of data-oriented
programming and answer the research questions outlined in
Section II-C. We ﬁrst show the prevalence of data-oriented
gadgets and gadget dispatchers in real-world x86 programs
(Q1). We sample the identiﬁed gadgets and empirically verify
if they are stitchable with known CVEs. We ﬁnd both Turing-
complete data-oriented gadgets as well as dispatchers in inter-
active and non-interactive mode (Q2). We demonstrate three
end-to-end case-studies which use DOP to exploit the program
while bypassing ASLR and DEP to highlight the utility of
Turing-completeness (Q3).
Selection of Benchmarks. We select 9 widely used ap-
plications with publicly known CVEs for our evaluation.
These applications provide critical network services (like
FTP, HTTP, cryptocurrency) and thus are common targets
of real-world exploits. Speciﬁcally, we study FTP servers
(WU-FTPD [29], ProFTPD [28]), HTTP server (nginx [30]),
daemons (bitcoind [31], sshd [32]), network packet analyzer
(Wireshark [33]), user library musl libc 5 [36], and common
user utilities (mcrypt [37], sudo [38]).
5We analyze standard C library musl libc instead of glibc [34] because
glibc cannot be compiled with LLVM. In our analysis, we use BusyBox [35]
built against musl libc.
A. Feasibility of DOP
We study our 9 applications and measure how many x86
gadgets in these programs can simulate MINDOP operations.
We aim to evaluate the following four aspects in our analysis:
• Empirically justify the choice of operations in MINDOP
based on the prevalence of x86 gadgets.
• Study the distribution of various types of gadgets based
on the scope of input operands.
• Measure the reachability of these x86 gadgets in concrete
executions in presence of an exploitable memory error.
• Verify if the memory errors (in the public CVEs) have
the capability to control the input operands and activate
the gadgets in concrete executions.
Choice of MINDOP Operations. Table VI shows our static
analysis results, including the number of x86 gadgets and
gadget dispatchers to simulate MINDOP operations.
• x86 Gadgets. We identiﬁed 7518 data-oriented gadgets
from 9 programs. 8 programs provide x86 data-oriented
gadgets to simulate all MINDOP operations. In fact, there
are multiple gadgets for each operation. These gadgets
provides the possibility for attackers to enable arbitrary
calculations in program memory. Another program, bit-
coind, contains x86 gadgets to simulate MINDOP op-
erations except load and store. This result implies that
real-world applications do embody MINDOP operations
and are fairly rich in DOP expressiveness.
• x86 Dispatchers. Our programs contain 5052 number of
gadget dispatchers in total, such that each program has
more that one dispatcher (See Column 4 in Table VI).
1443 of these dispatchers contain x86 gadgets of our
interest (See Column 5 in Table VI). More importantly,
programs such as sudo with relatively fewer number of
loops w.r.t LOC, still contains 16 dispatchers to trigger
x86 gadgets. This means that the dispatchers are abundant
in real-world programs to simulate MINDOP operations.
Gadgets Classiﬁcation. We classify our x86 gadgets into three
categories based on the scope of the operands as discussed in
Section IV-B. The inputs of global gadgets can be controlled
by a memory error from any location. The inputs of function-
parameter gadgets can be controlled only if the memory error
977977
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:56 UTC from IEEE Xplore.  Restrictions apply. 
Reachability and corruptibility of x86 gadgets in the presence of a speciﬁc memory error. Columns 2-4 present the CVE number, type and capacity of
the vulnerability as format string vulnerability (FSV), integer overﬂow (IO), stack buffer overﬂow (SBO), arbitrary write (AW) and stack write (SW).
Column 5 denotes the number of functions executed after the vulnerable function in the program. Columns 6-7 report the total number of dispatcher loops
executed and how many of them execute at least one data gadget respectively. Columns 8-12 represent the number of gadgets in each type executed within
these dispatchers and a (cid:2)implies that at least one gadget is conﬁrmed to be stitchable. Column 13 reports the total number of gadgets. Columns 14-15
report if the vulnerability can be used to maintain a virtual PC and build Turing-complete exploit respectively.
TABLE VII
Vulnerable Application
Name
bitcoind
musl libc + ping
Wireshark
nginx
mcrypt
sudo
ProFTPD
sshd
WU-FTPD
CVE
2015-6031 [39]
2015-1817 [40]
2014-2299 [41]
2013-2028 [42]
2012-4409 [43]
2012-0809 [44]
2006-5815 [45]
2001-0144 [46]
2000-0573 [47]
Type
SBO
SBO
SBO
SBO
SBO
FSV
SBO
IO
FSV
Cap
SW
AW
AW
AW
AW
AW
AW
AW
AW
TOTAL
Func
Exec
0
83
152
82
31
27
146
91
23
635
Dispatchers
Used
Exec
0
0
16
88
1
44
91
30
2
10
2
9
31
92
20
34
36
9
404
110
Assign-
ment
0
18 (cid:2)
1 (cid:2)
39
1 (cid:2)
3
15 (cid:2)
10
47 (cid:2)
134
Logical
Load /
Store
0
45
1 (cid:2)
Arith-
metic
0
0
6 (cid:2)
19 (cid:2)
2 (cid:2)
0
68 (cid:2) 119
441
5
1
0
4 (cid:2)
2
12
69 (cid:2)
22 (cid:2)
18
19 (cid:2) 120
11
21 (cid:2) 102 (cid:2)
8
600
287
228
Condi-
tional
0
0
1 (cid:2)
11
0
2
2 (cid:2)
0
8
24
Total
Gadgets
0
88
5
678
7
23
126
160
186
1273
Virtual
PC?
Is
TC?
(cid:2)
(cid:2)
(cid:2)
3
(cid:2)
(cid:2)
3
occurs before the parent function. We currently ignore the local
gadgets as it requires the memory error to occur in the func-
tion body before it. Instead, we consider the gadgets taking
both global inputs and function-parameter inputs, classiﬁed as
hybrid gadgets. An arbitrary memory error provides partial
control over hybrid gadgets. Table VI reports the number of
gadgets in each category for our examples. 8 out of 9 programs
have at least one class of gadget for each operation, which
shows that highly controllable gadgets are common in real-
world vulnerable programs.
Execution Reachability from Memory Errors. The nature
of the memory vulnerability — location in the code and the
corruptible memory region — decides if the execution can
reach a speciﬁc gadget or not. To estimate how many gadgets
in the program are reachable, we select one concrete vulner-
ability from the CVE database per program (See Column 2
in Table VII). We run the vulnerable program with the given
CVE PoC to get the dynamic function call trace, including the
vulnerable function. From the function call trace, we identify
the functions invoked by the vulnerable function, and loops
surrounding the vulnerable function during the execution. The
gadgets inside the invoked functions and enfolding loops are
the reachable gadgets from the dispatcher. Table VII shows the
number of reachable gadgets in our programs. In total there
are 1273 reachable gadgets via the listed CVEs. 4 out of 9
programs have at least one dispatcher and one gadget of each
type reachable from the selected CVE, which can be used to
simulate all operations in MINDOP. Thus, these selected real-
world vulnerabilities have the ability to reach a large number
of data-oriented gadgets and invoke many dispatchers.
Corruptibility of the CVE. The fact that a gadget is reachable
does not necessarily imply that the attacker can always control
the inputs to the gadget. For example, memory errors with only
stack access can use function-parameter gadgets and hybrid
gadgets at most, while memory errors with arbitrary read-
write access can activate any x86 gadgets. To this end, we
dynamically analyze the actual corruptibility of memory errors
conﬁrmed with concrete execution of PoC exploits. The data
provide evidence of the prevalence of reusing existing CVEs
to construct DOP attacks. For example, 5 out of the 6 stack-
based buffer overﬂow vulnerabilities can use the assignment
operations to achieve arbitrary write access (Column 3, 4 in
Table VII). 8 out of 9 vulnerabilities enable arbitrary write
capabilities with which the attacker can trigger a total of 1273
global gadgets (Column 13 in Table VII). In case of bitcoind,
the attacker can only control local variables within the function
using the CVE. Since we ignore the local gadgets in our
analysis, we cannot simulate any MINDOP operations with
this particular memory error.
Manually Conﬁrmed Stitchability. Note that we have not
checked each of 1273 gadgets against each CVE run to
construct complete exploits — this is an onerous manual task.
We have sampled a few cases and manually executed and