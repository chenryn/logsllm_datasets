/proc/ (pid) / (mounte|mountinfo)
CTF is commonly found in Docker
(In this case, mounts reveal some sensitive paths) .
environments.
---
## Page 65
1.3 Arbitrary File Read Vulnerability
49
/proc/ [pid] /net/*
( [pid] points to the network infozmation of
the process, e-g. reading TCP wi11 get the
TCP port to which the process is bound)
(ARP wi11 leak intranet IP information on the same segment)
1.3.2.2 Windows
The Windows web application arbitrary file read vulnerability is not common in CTF
challenges, but there is a problem when Windows is used with PHP: it is possible to
use symbols such as " *#
---
## Page 67
1.3 Arbitrary File Read Vulnerability
51
Fig, 1.65 Execution
process
include( zip://uploads/xxxx.png%231
php)
zipfilo
1.php
【Summary】 ① The challenge first examines the player's ability to find any file
reading/including related vulnerabilities through black-box testing. Everyone has
their own unique testing method. The ideas written above are for reference only.
When conducting black-box testing, we must capture the keywords in the param-
eters and have a certain association ability.
② Examine the use of Filter by players, such as php:/filter/convert.Base64-encode
(encode the file stream through Base64).
③ Examined the players’ use of the zip:// protocol: Treat the file stream as a Zip file
stream, and use *# (%23) to select the file stream of the specified file in the
compressed package.
You may not understand point ③), but here is the explanation. When we upload a Zip
file to the server when the zip file is parsed using the zip:// protocol, the Zip file is
automatically parsed according to its file structure, and then the Zip file is indexed by
“# (corresponding URL code %23) +filename”. (In the example above, a file named
1.php is stored intemally. In this case, the entire file stream is localized to 1.php, so
the include contents are the contents of 1.php, as shown in Fig. 1.65.
1.3.3.2 PWNHUB-Classroom
[Intro】 Develop with the Django framework and configure a static resource direc-
tory in an insecure way.
#ur1s.py
from. import views
from django.conf .urls import ur1
urlpattezns = [ur1 (^S, views, IndexView.as_viev() , nane=′index′) ,
ur1 (+ ^1login/$* , views LoginViev.aa_view() , name= login′) ,
ur1 (^1ogout/S* , views.LogoutView.aa_view () , name=′ logout*) ,
ur1 ( ^static/ (?P *) ′, vievs.StatieFilesView.as_view() ,
name=′static)]
Ad SMPTA##
class StaticFileaView (generic, View) :
content_type = 'text/plain'
def get (self, request, *args, **kwargs) :
filename = self.kvargs [*path]
filename = os-path.join [settings.BASE_DIR, *students', 'static',
---
## Page 68
52
1 Introduction to the Web
filename)
nane, ext = os-path.splitext (filename)
if ext in [* -py', ' .conf', '.sqlite31, *-yml*) :
raise exceptions . PermissionDenied ( Permission deny′)
try:
return HttpResponse (FileWrapper (open (filename, rb′) , 8192) ,
content_type=self .content_type)
except BaseException as e :
raise Http404 ( +Statie file not found*)
[Difficulty 】 Moderate.
【Knowledge】 Python (Django) file read vulnerability caused by static resource
configuration error; Pyc bytecode file decompilation; Django framework ORM
injection.
【Challenge solving】 The first vulnerability: The code first matches the content
after the URL path static/ passed in by the user, and then passes this content to os.
path.join, and forms an absolute path after splicing with some system default
directories, and then performs the suffix name Check, after checking, the absolute
path will be passed into the openO function, read the file content and retum to
the user.
The second vulnerability is in the views.py class LoginView. As you can see,
after loading the JSON data passed by the user, the loaded data is directly passed into
the x.objects.filter (a native Django ORM function).
class LoginViev (JsonReaponseMixin, generic,TemplateView) :
template_name = 'login.htm1
def post (self, request, *args, **kwargs) :
data = json. 1oads (request .body . decode (  )
stu = models.Student , objects.filter (+*data) first ()
: [, Aaxssed,]eaep =  Aassrd'nqs xo nqs qou gT
return self._jsondata (**, 403)
1se :
request . session ['is_login′] = True
return self ._jsondata (**, 200)
Open the challenge link first and could see the Server information displayed in the
HTTP response header.
Sezver : gunicorn/19 .6 0 Django/1.10. 3 CPython/3 .5 .2
We can know that Python's Django framework develops the challenge. When
encountering a situation where the source code is not provided in the Python
challenges, we can first try whether there are vulnerabilities related to directory
traversal (maybe Nginx insecure configuration or Python framework insecure
---
## Page 69
1.3 Arbitrary File Read Vulnerability
53
Fig, 1.66 Get fag
filter(field__lookuptype = value )
exact
some keywo
iexact
containts
9t
configuration), here use “/etc/passwd” as an examination for file reading, and the
requested path is:
/static/../.. / .- / .-/ . -/ - -/etc/passwd
It can be found that any file reading vulnerability does exist, but when trying to
read Python source code files, it is found that the server has filtered several common
file extensions, including Python extensions, configuration file extensions, Sqlite file
extensions, and YML. File extension:
if ext in (' -py', ',conf', ' -sqlite3', ' .yml′) :
raise exceptions . PermiaaionDenied ( ' Pezmisslon deny′)
Is there any other way to get the source code? When you run a Python file in
Python 3, the running module is cached and stored in the pycache__ directory,
where the pyc bytecode file is named as follows.
[module_name] +* cpython- 3*+ [\d] (python3 minor version nunber] + *
pycache_/views.cpython-34.pyc is an example of a filename. Thus, we could
get those cache files to get the source codes.
Replace the exploit path as follows.
/static/ . . /_pycache_/ur1a , cpython-35 -pyc
Now we successfully read the PYC bytecode file. Read all the remaining PYC
files and then decompile the PYC bytecode file to get the source code. By reviewing
the obtained source code, we found an ORM injection vulnerability, which can be
exploited to obtain the flag content. See Fig. 1.66.
【Summary 】 ① CTF players need to judge the challenge’s environment through the
fingerprint information in the HTTP header. Of course, some experience and
skills may be involved here, which need to be accumulated through practice.
---
## Page 70
54
1 Introduction to the Web
② Should be familiar with the environment and web application framework used by
CTF challenge. Even if CTF players are unfamiliar initially, they must quickly
build and learn the characteristics of the environment and framework or look
through the manual. Note: Quickly seting up an environment and leaming
features is the basic ability of CTF players to solve Web challenges.
③ Able to find a directory traversal vulnerability through black-box testing and then
use this vulnerability to read arbitrary files.
④ Source code audit, according to 2, after understanding the characteristics of the
framework, the flag is obtained through ORM injection.
1.3.3.3 Show Me the Shell I(TCTF/0CTF 2018 Final)
【Intro】 The vulnerability of the challenge is obvious. The UpdateHead function is
the function of updating the avatar. The protocol of the URL passed by the user can
be the File protocol, and then the arbitrary file reading vulnerability of the URL
component is triggered in the Download function.
// UserContro1ler.class
SRequestMapping (value=( * /headimg . do*) ,
method= (org - springframework, web bind. annotation.
public void UpdateHead (αRequestParan [*ur1*) String ur])
RequestMethod ,GET↓)
String dowmloadPath = this .request getSession (1 -getServletContext
() . getRealPath (*/*) +*/headimg/*;
String headur] = */headimg/* + HttpReg.Dowmload (ur1 , downloadPath) ;
User user = (User) thie.ession.getAttribute ("user") ;
this usezMapper UpdateHeadur1 (headurl, uid) ;
Integer uid = user ,getId() :
/ / HttpReq-class
public static String Doumload (String urlstring, String path)
String filenane = *default -jpg* :
if (endnithIng(ur1string)l(
x3
URL ur1 = new URL {ur1String) :
URLConnection ur1Connection = ur1 openConnection () ;
urlConnection setReadTimeout (5oo0) ;
int size = ur1Connection getContentLength () :
if (s1ze  {
const fileterKeys = ['globa1°, 'require′]
return /~ [azA-z0-9\ -] *$/g. test (upug) && 1fileterKeys.some [t =>
upug. toLowezCase () . ineludes (t11
console. log ( ′Generator pug tenplate*)
const uid = reg, session,user.uid
{{6ndn)s]#、= Apoq suoo
console. 1og ('body', body)
console. log (*upugPath', wpugPath)
const upugPath = path.join (*users′, utils.md5 {uid) , ~S{uid) -pug*)
1x
fs . writeFileSync (path.resolve (contig. VIEws_pATH, upugPath) , body)
catch (err) {
(2) In the challenge, an API sends a request through a local proxy. The user enters
the URL, and the backend will start the Chrome browser to request this URL, and
take a screenshot of the requested page and feed it back to the user. Of course, the