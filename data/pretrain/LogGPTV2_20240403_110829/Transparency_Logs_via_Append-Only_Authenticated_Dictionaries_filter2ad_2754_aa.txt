# Title: Transparency Logs via Append-Only Authenticated Dictionaries

## Authors
- Alin Tomescu, Massachusetts Institute of Technology
- Vivek Bhupatiraju, Lexington High School, MIT PRIMES
- Dimitrios Papadopoulos, Hong Kong University of Science and Technology
- Charalampos Papamanthou, University of Maryland
- Nikos Triandopoulos, Stevens Institute of Technology
- Srinivas Devadas, Massachusetts Institute of Technology

## Abstract
Transparency logs enable users to audit potentially malicious services, contributing to a more accountable Internet. For example, Certificate Transparency (CT) allows domain owners to monitor Certificate Authorities (CAs) and detect impersonation attacks. To fully realize their potential, transparency logs must be bandwidth-efficient when queried by users. Specifically, users should be able to efficiently look up log entries by key and verify that the log remains append-only. Unfortunately, without additional trust assumptions, current transparency logs cannot provide both small-sized lookup proofs and small-sized append-only proofs. One of the proofs always requires bandwidth linear in the size of the log, making it expensive for users to query the log.

In this paper, we address this gap with a new primitive called an append-only authenticated dictionary (AAD). Our construction is the first to achieve (poly)logarithmic size for both proof types, reducing bandwidth consumption in transparency logs. This comes at the cost of increased append times and high memory usage, which need further improvement for practical deployment.

## CCS Concepts
- Security and privacy → Key management
- Theory of computation → Cryptographic primitives; Data structures design and analysis

## Keywords
- Append-only
- Transparency logs
- Authenticated dictionaries
- Merkle trees
- Bilinear accumulators
- RSA accumulators
- Polynomials

## ACM Reference Format
Alin Tomescu, Vivek Bhupatiraju, Dimitrios Papadopoulos, Charalampos Papamanthou, Nikos Triandopoulos, and Srinivas Devadas. 2019. Transparency Logs via Append-Only Authenticated Dictionaries. In 2019 ACM SIGSAC Conference on Computer and Communications Security (CCS '19), November 11–15, 2019, London, United Kingdom. ACM, New York, NY, USA, 18 pages. https://doi.org/10.1145/3319535.3345652

## Permission Notice
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than the author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.

## 1. Introduction
Security often relies on a public-key infrastructure (PKI). For instance, on the web, Certificate Authorities (CAs) digitally sign certificates that bind a website to its public key, allowing users to set up secure channels. Many systems require or assume the existence of a PKI [39, 40, 60, 84]. However, securing PKIs has proven challenging, as evidenced by past CA compromises [1, 63, 77].

To address such issues, transparency logs [29, 36, 59] have been proposed to build more accountable and secure PKIs. A transparency log is a dictionary managed by an untrusted log server, which periodically appends key-value pairs and is queried by mutually-distrusting users. For example, in key transparency [8, 23, 55, 59, 65, 88, 95, 104], CAs are required to publicly log issued certificates, enabling the detection of fake certificates and holding CAs accountable for misbehavior.

Transparency logging is becoming increasingly important, as seen with Google's Certificate Transparency (CT) project, which has logged over 2.1 billion certificates since its initial deployment in March 2013 [44]. Since April 2018, Google's Chrome browser requires all new certificates to be published in a CT log [93]. Additionally, there is growing research into software transparency schemes [2, 38, 49, 78, 94, 96] for securing software updates. Google is also prototyping general transparency logs through their Trillian project [36, 45].

For transparency logs to realize their full potential, they must operate correctly or be easily detected if they do not. Specifically:
- **Append-Only Property:** The log should prove that it remains append-only, i.e., the new version of the log still contains all entries of the old version.
- **Lookup Support:** Users should be able to check which values are registered for a certain key in the log.
- **Fork Consistency:** The log should ensure that if two users are given different digests, they must forever be given different digests, allowing users to detect forks through gossiping [28, 32, 94, 96].

### Challenges
Building transparency logs with succinct lookup and append-only proofs is a long-standing open problem. While Merkle-based solutions [68] seem possible, organizing a Merkle tree to support both types of proofs is difficult. Chronologically-ordered trees [29, 64, 97] support logarithmic-sized append-only proofs but have linear-sized lookup proofs, while lexicographically-ordered trees [6, 23, 30, 79] support succinct lookup proofs but have linear append-only proofs.

Combining the two approaches does not work, as it requires a succinct proof that the two trees correspond, which is non-trivial. Previous transparency logs [88, 104] rely on collective verification by users, which can be slow and requires a sufficient number of honest users. An alternative is to use SNARKs [42, 48], but cryptographic accumulators [13, 76] are asymptotically inefficient, requiring linear time for proof computation and updates.

### Our Contribution
We introduce a novel cryptographic primitive called an append-only authenticated dictionary (AAD). An AAD maps a key to one or more values in an append-only fashion and is an abstraction for a transparency log. We provide the first security definitions for AADs and instantiate asymptotically efficient AADs from bilinear accumulators [76]. Our AAD offers logarithmic-sized append-only proofs, polylogarithmic-sized lookup proofs, and polylogarithmic worst-case time appends (see Table 1).

We implement our AAD in C++ and evaluate it. Our code is available at https://github.com/alinush/libaad-ccs2019. Our lookup and append-only proofs are in the order of tens of KiBs, and our verification time is in the order of seconds. For example, a proof for a key with 32 values in a dictionary of 1 million entries is 94 KiB and verifies in 2.5 seconds. While our lookup proof sizes are larger than in previous work, our small-sized append-only proofs significantly reduce overall bandwidth consumption in transparency logs.

### Limitations
Our construction has high append times (a few seconds per append) and high memory usage (hundreds of GiBs for an AAD of size 2^20). Future work could improve these aspects (Sections 6.1.1 and 6.1.4). The security of our construction relies on the q-PKE "knowledge" assumption, requiring a large set of public parameters generated via a trusted setup phase, which complicates deployment. We discuss how the trusted setup can be decentralized in Section 7.

### Overview of Techniques
We first build an efficient append-only authenticated set (AAS), which is an append-only set of elements with proofs of (non)membership. An AAS can efficiently implement Revocation Transparency (RT) [58] if elements are revoked certificates. To implement any transparency log, we modify our AAS into an AAD, which is more expressive. Specifically, an AAD can provably return all values of a key, while an AAS can only prove (non)membership.

A bilinear accumulator is already an AAS, but updating the set and computing (non)membership and append-only proofs takes linear time, which is prohibitive. Our work reduces these times to polylogarithmic, but at the cost of increasing proof sizes from constant to polylogarithmic. We introduce bilinear trees to precompute all membership proofs in quasilinear time and build a sparse prefix tree over all elements to accumulate the tree itself. We precompute non-membership proofs for all prefixes at the frontier of this tree in quasilinear time. Finally, we use classic amortization techniques to append in polylogarithmic time and precompute append-only proofs between any versions of the set.

## 1.1 Related Work
The key difference between AADs and previous work [8, 23, 55, 59, ...] is that AADs provide both logarithmic-sized append-only proofs and polylogarithmic-sized lookup proofs, addressing the long-standing challenge of building efficient and secure transparency logs.