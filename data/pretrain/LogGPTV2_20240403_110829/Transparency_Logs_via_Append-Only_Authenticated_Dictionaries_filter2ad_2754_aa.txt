title:Transparency Logs via Append-Only Authenticated Dictionaries
author:Alin Tomescu and
Vivek Bhupatiraju and
Dimitrios Papadopoulos and
Charalampos Papamanthou and
Nikos Triandopoulos and
Srinivas Devadas
Transparency Logs via Append-Only Authenticated Dictionaries
Alin Tomescu
Massachusetts Institute of Technology
Vivek Bhupatiraju
Lexington High School
MIT PRIMES
Dimitrios Papadopoulos
Hong Kong University of Science and
Technology
Charalampos Papamanthou
University of Maryland
Nikos Triandopoulos
Stevens Institute of Technology
Srinivas Devadas
Massachusetts Institute of Technology
ABSTRACT
Transparency logs allow users to audit a potentially malicious ser-
vice, paving the way towards a more accountable Internet. For
example, Certificate Transparency (CT) enables domain owners
to audit Certificate Authorities (CAs) and detect impersonation
attacks. Yet, to achieve their full potential, transparency logs must
be bandwidth-efficient when queried by users. Specifically, every-
one should be able to efficiently look up log entries by their key
and efficiently verify that the log remains append-only. Unfortu-
nately, without additional trust assumptions, current transparency
logs cannot provide both small-sized lookup proofs and small-sized
append-only proofs. In fact, one of the proofs always requires band-
width linear in the size of the log, making it expensive for everyone
to query the log. In this paper, we address this gap with a new
primitive called an append-only authenticated dictionary (AAD).
Our construction is the first to achieve (poly)logarithmic size for
both proof types and helps reduce bandwidth consumption in trans-
parency logs. This comes at the cost of increased append times and
high memory usage, both of which remain to be improved to make
practical deployment possible.
CCS CONCEPTS
• Security and privacy → Key management; • Theory of com-
putation → Cryptographic primitives; Data structures de-
sign and analysis.
KEYWORDS
append-only; transparency logs; authenticated dictionaries; Merkle
trees; bilinear accumulators; RSA accumulators; polynomials
ACM Reference Format:
Alin Tomescu, Vivek Bhupatiraju, Dimitrios Papadopoulos, Charalampos
Papamanthou, Nikos Triandopoulos, and Srinivas Devadas. 2019. Trans-
parency Logs via Append-Only Authenticated Dictionaries. In 2019 ACM
SIGSAC Conference on Computer and Communications Security (CCS ’19),
November 11–15, 2019, London, United Kingdom. ACM, New York, NY, USA,
18 pages. https://doi.org/10.1145/3319535.3345652
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-6747-9/19/11...$15.00
https://doi.org/10.1145/3319535.3345652
1 INTRODUCTION
Security is often bootstrapped from a public-key infrastructure (PKI).
For example, on the web, Certificate Authorities (CAs) digitally sign
certificates that bind a website to its public key. This way, a user who
successfully verifies the certificate can set up a secure channel with
the website. In general, many systems require a PKI or assume one
exists [39, 40, 60, 84]. Yet, despite their necessity, PKIs have proven
difficult to secure as evidenced by past CA compromises [1, 63, 77].
To address such attacks, transparency logs [29, 36, 59] have been
proposed as a way of building accountable (and thus more secure)
PKIs. A transparency log is a dictionary managed by an untrusted
log server. The server periodically appends key-value pairs to the
dictionary and is queried by mutually-distrusting users, who want
to know certain keys’ values. For example, in key transparency [8, 23,
55, 59, 65, 88, 95, 104], CAs are required to publicly log certificates
they issue (i.e., values) for each domain (i.e., keys). Fake certificates
can thus be detected in the log and CAs can be held accountable
for their misbehavior.
Transparency logging is becoming increasingly important in
today’s Internet. This is evident with the widespread deployment
of Google’s Certificate Transparency (CT) [59] project. Since its
initial March 2013 deployment, CT has publicly logged over 2.1
billion certificates [44]. Furthermore, since April 2018, Google’s
Chrome browser requires all new certificates to be published in a
CT log [93]. In the same spirit, there has been increased research
effort into software transparency schemes [2, 38, 49, 78, 94, 96] for
securing software updates. Furthermore, Google is prototyping
general transparency logs [36, 45] via their Trillian project [45].
Therefore, it is not far-fetched to imagine generalized transparency
improving our census system, our elections, and perhaps our gov-
ernment. But to realize their full potential, transparency logs must
operate correctly or be easily caught otherwise. Specifically:
Logs should remain append-only. In a log-based PKI, a devas-
tating attack is still possible: a malicious CA can publish a fake
certificate in the log but later collude with the log server to have it
removed, which prevents the victim from ever detecting the attack.
Transparency logs should therefore prove that they remain append-
only, i.e., the new version of the log still contains all entries of the
old version. One trivial way to provide such a proof is to return the
newly-added entries to the user and have the user enforce a subset
relation. But this is terribly inefficient. Ideally, a user with a “short”
digest hold should accept a new digest hnew only if it comes with a
succinct append-only proof computed by the log. This proof should
convince the user that the old log with digest hold is a subset of the
new log with digest hnew.
Session 6C: Secure Computing VICCS ’19, November 11–15, 2019, London, United Kingdom1299Logs should support lookups. When users have access to digests
(instead of whole logs), the central question becomes: How can
a user check against their digest which values are registered for
a certain key k in the log? Ideally, a small lookup proof should
convince the user that the server has returned nothing more or less
than all values of key k. Otherwise, the server could equivocate and
present one set of values V for k to a user and a different set V ′ to
some other user, even though both users have the same digest and
should thus see the same set of values for key k.
Logs should remain fork-consistent. An unavoidable issue is
that a malicious log server can also equivocate about digests and
fork users [29, 60]. For example, at time i, the server can append
(k, v) to one user’s log while appending (k, v′) to another user’s log.
Since the two users’ logs will differ at location i, their digests will
also differ. Intuitively, fork consistency [60, 61] guarantees that if
two users are given two different digests as above, they must forever
be given different digests. Thus, users can gossip [28, 32, 94, 96] to
check if they are seeing different digests and detect forks.
Challenges. Building transparency logs with succinct lookup and
append-only proofs is a long-standing open problem. At first glance,
a Merkle-based [68] solution seems possible. Unfortunately, it ap-
pears very difficult to organize a Merkle tree so as to support both
succinct append-only proofs and succinct lookup proofs. On one
hand, trees with chronologically-ordered leaves [29, 64, 97] support
logarithmic-sized append-only proofs but at the cost of linear-sized
lookup proofs. On the other hand, trees can be lexicographically-
ordered by key [6, 23, 30, 79] to support succinct lookup proofs at
the cost of linear append-only proofs (see Section 6.2).
It might seem natural to combine the two and obtain succinct
lookup proofs via the lexicographic tree and succinct append-only
proofs via the chronologic tree [88]. But this does not work either,
since there must be a succinct proof that the two trees “correspond”:
they are correctly built over the same set of key-value pairs. While
previous transparency logs [88, 104] work around this by having
users “collectively” verify that the two trees correspond [26, 88, 104],
this requires a sufficiently high number of honest users and can
result in slow detection. An alternative, which we discuss in Sec-
tion 7.1, is to use SNARKs [42, 48]. At second glance, cryptographic
accumulators [13, 76] seem useful for building transparency logs
(see Section 2.1). Unfortunately, accumulators are asymptotically-
inefficient, requiring linear time to compute proofs or to update
proofs after a change to the set. As a result, a computationally-
efficient accumulator-based solution is not obvious.
Our contribution. We introduce a novel cryptographic primitive
called an append-only authenticated dictionary (AAD). An AAD
maps a key to one or more values in an append-only fashion and
is an abstraction for a transparency log. We are the first to give
security definitions for AADs. We are also the first to instantiate
asymptotically efficient AADs from bilinear accumulators [76] (see
Section 5). Importantly, our design does not rely on collective veri-
fication by users or on trusted third parties and assumes only an
untrusted log server. Our AAD offers logarithmic-sized append-only
proofs, polylogarithmic-sized lookup proofs and polylogarithmic
worst-case time appends (see Table 1).
We implement our AAD in C++ and evaluate it. Our code is
available at https://github.com/alinush/libaad-ccs2019. Our lookup
Table 1: Asymptotic costs of our construction versus previ-
ous work. n is the number of key-value pairs in the dictio-
nary and λ is the security parameter.
Append
Append-only
Time & bandwidth
Lookup
proof size
proof size
Space
n log n
n
λn
time
log n
log n
λ log3 n
log n
n
n
log n
log n
log2 n
Lexicographic trees [65, 88]
Chronologic trees [29, 59]
AAD (this work)
and append-only proofs are in the order of tens of KiBs and our
verification time is in the order of seconds. For example, a proof
for a key with 32 values in a dictionary of 106 entries is 94 KiB
and verifies in 2.5 seconds. While our lookup proof sizes are larger
than in previous work, our small-sized append-only proofs can
help significantly reduce the overall bandwidth consumption in
transparency logs, as we show in Section 6.2.1.
Limitations of our approach. Our construction has high append
times (i.e., a few seconds per append) and high memory usage (i.e.,
hundreds of GiBs for an AAD of size 220). This means it is not
yet practical and we discuss how future work might improve it in
Sections 6.1.1 and 6.1.4. The security of our construction relies on
the q-PKE “knowledge” assumption (commonly used in SNARKs [43,
47]). Hence, we need a large set of public parameters that must be
generated via a trusted setup phase, which complicates deployment.
We discuss how the trusted setup can be decentralized in Section 7.
Overview of techniques. We first build an efficient append-only
authenticated set (AAS), instead of an AAD. An AAS is an append-
only set of elements with proofs of (non)membership of any element.
If we let elements be revoked certificates, then an AAS efficiently
implements Revocation Transparency (RT) [58]. But to efficiently
implement any transparency log, we must modify our AAS into an
AAD, which is more “expressive.” Specifically, an AAD can provably
return all values of a key, while an AAS can only prove that an
element is or is not in the set. One could attempt to build an AAD
from an AAS in “black-box” fashion by representing an AAD key-
value pair as an AAS element. Unfortunately, this is not sufficient
if we want to convince AAD verifiers that all values of a key have
been returned via a lookup proof. In Section 5, we describe a non-
black-box modification of our AAS into an AAD.
Our first observation is that a bilinear accumulator (see Sec-
tion 2.1) is already an AAS, albeit an expensive one. Specifically, up-
dating the set and computing (non)membership proofs and append-
only proofs takes time linear in the size of the set, which is prohibi-
tive. Our work reduces these times to polylogarithmic, but at the
cost of increasing proof sizes from constant to polylogarithmic in
the size of the set. First, we introduce bilinear trees, a hierarchical
way to precompute all membership proofs in a bilinear accumu-
lator in quasilinear time (instead of quadratic). Second, instead
of “accumulating” the elements directly, we build a “sparse” pre-
fix tree (or trie) over all elements and accumulate the tree itself.
Then, we precompute non-membership proofs for all prefixes at
the frontier of this tree (see Figure 2) in quasilinear time. As a result,
non-membership of an element is reduced to non-membership of
one of its prefixes. (This frontier technique was originally proposed
in [70].) Finally, we use classic amortization techniques [80, 81] to
append in polylogarithmic time and to precompute append-only
proofs between any version i and j of the set.
Session 6C: Secure Computing VICCS ’19, November 11–15, 2019, London, United Kingdom13001.1 Related Work
The key difference between AADs and previous work [8, 23, 55, 59,