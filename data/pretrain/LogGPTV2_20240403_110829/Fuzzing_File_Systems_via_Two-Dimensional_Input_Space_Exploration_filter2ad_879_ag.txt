write_extent_buffer
try_merge_free_space
btrfs_root_node
io_ctl_map_page
btrfs_free_dev_extent
btrfs_tree_lock
read_one_chunk
build_sit_info
utilization
f2fs_iget
verify_block_addr
update_sit_entry
reset_curseg
clear_inode
f2fs_truncate_inode_blocks
__remove_dirty_segment
f2fs_truncate_inline_inode
fscrypt_do_page_crypto
hfsplus_lookup
Type
Use-after-free
Out-of-bounds access
Null pointer dereference
Out-of-bounds access
Heap overﬂow
Use-after-free
Out-of-bounds access
Out-of-bounds access
Use-after-free
Out-of-bounds access
Uninitialized memory
BUG()
BUG()
Heap overﬂow
Use-after-free
Divide by zero
Use-after-free
Null pointer dereference
Null pointer dereference
Null pointer dereference
Out-of-bounds access
Null pointer dereference
Null pointer dereference
Null pointer dereference
Out-of-bounds access
Use-after-free
Null pointer dereference
Null pointer dereference
BUG()
Deadlock
BUG()
Heap overﬂow
Divide by zero
Out-of-bounds access
BUG()
Use-after-free
Divide by zero
BUG()
BUG()
Out-of-bounds access
Heap overﬂow
Null pointer dereference
Null pointer dereference
Conditions
I
I+S
I+S
I+S
I+S
I+S
I+S
I+S
I+S
I+S
I+S
I+S
I+S
I+S
I+S
I+S
I+S
I+S
I+S
I+S
I+S
I+S
I+S
I
I+S
I
I
I+S
I+S
I
I
I
I
I+S
I+S
I+S
I
I
I+S
I
I+S
I+S
I+S
TABLE VI: The list of previously unknown bugs in widely used ﬁle systems found by JANUS that have already been ﬁxed in Linux kernel
v4.16, v4.17, and v4.18. We are still waiting for CVE assignment for several conﬁrmed bugs. For security concerns, we exclude other 19
found bugs that developers have not ﬁxed. The rightmost column, Conditions, indicates what components of JANUS contribute to discovering
the bugs. I means that triggering the bug only requires mounting a mutated image. I+S represents that the bug is triggered by mounting a
mutated image and also invoking speciﬁc system calls.
(cid:25)(cid:20)(cid:20)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:33 UTC from IEEE Xplore.  Restrictions apply. 
struct lkl_disk disk;
char mpoint[32], buffer[1024];
unsigned int disk_id;
char *file;
int fd;
disk.fd = open(fsimg_path, O_RDWR);
disk.ops = NULL;
disk_id = lkl_disk_add(&disk);
lkl_start_kernel(&lkl_host_ops, "mem=128M");
lkl_mount_dev(disk_id, 0, "ext4", 0,
1 int mount_and_read(char *fsimg_path) {
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22 }
Fig. 11: A function example that mounts an ext4 image and reads a
ﬁle stored on the image through LKL APIs.
}
lkl_umount_dev(disk_id, cla.part, 0, 1000);
lkl_disk_remove(disk);
lkl_sys_halt();
asprintf(&file, "%s/file", mpoint);
fd = lkl_sys_open(file, LKL_O_RDONLY, 0666);
if (fd >= 0) {
lkl_sys_read(fd, buf, 1024);
lkl_sys_close(fd);
"errors=remount-ro", mpoint, sizeof(mpoint));
repeated Variable variables;
// if the argument is a variable
required bool is_var;
// an immediate value or
// the index of the corresponding variable
required int64 value;
required int32 index; // variable index
required int32 size; // variable size
required bool is_pointer; // if the variable is a pointer
// the buffer data pointed to by a pointer
required bytes buffer;
// the file object type of an active file descriptor
// for normal variables, it is -1
required int32 type;
1 message Variable {
2
3
4
5
6
7
8
9
10 }
11
12 message Variables {
13
14 }
15
16 message Arg {
17
18
19
20
21
22 }
23
24 message Syscall {
25
26
27
28
29
30
31
32 }
33
34 message FileObject {
35
36
37
38
39
40 }
41
42 message Program {
43
44 }
45
46 message Status {
47
48 }
Fig. 12: The format of a serialized program and speculated image
status described in protocol buffer language.
required int32 nr; // syscall number
repeated Arg args;
// the index of the variable that
// stores the return value of the syscall
// if necessary (e.g., fd returned from open());
// by default it is -1
required int64 ret_index;
required string path; // relative path
// the file object type (FILE, DIR, SYMLINK, etc.)
required int32 type;
// the names of all the extended attributes
repeated string xattr_names;
repeated Syscall syscalls;
repeated FileObject fobjs;
readdir(dir);
closedir(dir);
void *mem = mmap(NULL, 4096, PROT_READ,
MAP_PRIVATE | MAP_POPULATE, fd, 0);
DIR *dir = opendir(mountpoint);
if (dir) {
munmap(mem, 4096);
read(fd, buf, 11);
read(fd, buf, sizeof(buf));
close(fd);
write(fd, buf, 517);
write(fd, buf, sizeof(buf));
fdatasync(fd);
fsync(fd);
lseek(fd, 0, SEEK_SET);
read(fd, buf, sizeof(buf));
lseek(fd, 1234, SEEK_SET);
read(fd, buf, 517);
close(fd);
}
fd = open(foo_bar_baz, O_RDWR | O_TRUNC, 0777);
if (fd != -1) {
}
fd = open(foo_bar_baz, O_RDWR | O_TRUNC, 0777);
if (fd != -1) {
}
static int buf[8192];
memset(buf, 0, sizeof(buf));
int fd = open(foo_bar_baz, O_RDONLY);
if (fd != -1) {
1 void activity(const char *mountpoint)
2 {
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73 }
Fig. 13: The ﬁxed ﬁle operations used for evaluating how effectively
JANUS and Syzkaller fuzz images.
}
rename(foo_bar_baz, foo_baz);
struct stat stbuf;
memset(&stbuf, 0, sizeof(stbuf));
stat(foo_baz, &stbuf);
chmod(foo_baz, 0000);
chmod(foo_baz, 1777);
chmod(foo_baz, 3777);
chmod(foo_baz, 7777);
chown(foo_baz, 0, 0);
chown(foo_baz, 1, 1);
unlink(foo_bar_baz);
unlink(foo_baz);
mknod(foo_baz, 0777, makedev(0, 0));
char buf2[113];
memset(buf2, 0, sizeof(buf2));
listxattr(xattr, buf2, sizeof(buf2));
removexattr(xattr, "user.mime_type");
setxattr(xattr, "user.md5", buf2, sizeof(buf2), XATTR_CREATE);
setxattr(xattr, "user.md5", buf2, sizeof(buf2), XATTR_REPLACE);
readlink(sln, buf2, sizeof(buf2));
lseek(fd, 1024 - 33, SEEK_SET);
write(fd, buf, sizeof(buf));
lseek(fd, 1024 * 1024 + 67, SEEK_SET);
write(fd, buf, sizeof(buf));
lseek(fd, 1024 * 1024 * 1024 - 113, SEEK_SET);
write(fd, buf, sizeof(buf));
lseek(fd, 0, SEEK_SET);
write(fd, buf, sizeof(buf));
fallocate(fd, 0, 0, 123871237);
fallocate(fd, 0, -13123, 123);
fallocate(fd, 0, 234234, -45897);
fallocate(fd, FALLOC_FL_KEEP_SIZE |
FALLOC_FL_PUNCH_HOLE, 18237, -9173);
FALLOC_FL_PUNCH_HOLE, 0, 4243261);
fallocate(fd, FALLOC_FL_KEEP_SIZE |
FALLOC_FL_PUNCH_HOLE, -95713, 38447);
fallocate(fd, FALLOC_FL_KEEP_SIZE |
close(fd);
(cid:25)(cid:20)(cid:21)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:33 UTC from IEEE Xplore.  Restrictions apply.