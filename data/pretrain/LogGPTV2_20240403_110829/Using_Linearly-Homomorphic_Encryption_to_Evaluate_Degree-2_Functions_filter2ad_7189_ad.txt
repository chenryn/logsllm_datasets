scription. Second, it is easy to see that the only “extra”
property we require to the underlying ˆHE is the ability to
sample random elements in M.
Proof of Security. First, it is straightforward to see that
the scheme HE is semantically-secure.
Theorem 1. If ˆHE is semantically-secure, then HE is se-
mantically secure.
We can also show (cf. the full version [9] for the proof) that
HE satisﬁes the notion of leveled circuit-privacy of Def. 7.
Theorem 2. If ˆHE is circuit private, then HE is a leveled
circuit-private homomorphic encryption.
2 , i.e., are of the form P ( (cid:126)m) +(cid:80)L
On the ciphertext growth. As we mentioned earlier, our
scheme cannot compactly evaluate all degree-2 polynomials.
Yet we achieve compactness as long as the polynomials are
in F (cid:63)
i=1 Qi( (cid:126)m)· Ri( (cid:126)m), with
P ( (cid:126)m),{Qi( (cid:126)m), Ri( (cid:126)m)} all of degree 1. Such a class of poly-
nomials is still meaningful. For example, the SPDZ protocol
[14], in its oﬄine phase, requires a somewhat homomorphic
encryption capable of evaluating polynomials exactly of the
form P ( (cid:126)m) + Q( (cid:126)m) · R( (cid:126)m), which is a subset (for L = 1) of
our supported class F (cid:63)
2 .
In Section 5 we show how to completely remove this is-
sue in a speciﬁc application (thus achieving fully compact
ciphertexts while supporting all degree-2 polynomials).
P ( (cid:126)m) +(cid:80)L
Exact asymptotic costs. Here we provide exact asymp-
totic costs both for the client and the server. Let f ( (cid:126)m) =
i=1 Qi( (cid:126)m) · Ri( (cid:126)m), with P ( (cid:126)m),{Qi( (cid:126)m), Ri( (cid:126)m)}
all of degree 1, each containing a maximum of n monomials.
Note that the circuit for evaluating f ( (cid:126)m) has size O(n · L).
The client’s cost in decryption is dominated by the (2L+1)
decryptions that need to be performed in the worst case.
This leads to an O(Lp ˆDec) complexity, where p ˆDec is the cost
ˆDec. Notice that the client complexity is in-
of running
dependent of n. The server’s cost, on the other hand, is
O(nL(pAdd1 + pcMult) + Lp ˆEnc)9.
9Here we are ignoring the cost of ReRand as it will be run
only once.
Inheriting Properties.
Interestingly, our transforma-
tion naturally preserves useful properties of the underly-
ing linearly-homomorphic scheme. Here we highlight three
properties: proof of knowledge, threshold decryption and
multikey homomorphic encryption.
First, given that “fresh” ciphertexts are simply ciphertexts
of the ˆHE scheme, it is immediate to see that if ˆHE admits a
zero knowledge proof of plaintext knowledge protocol, then
so does HE.
As a second property, we consider multikey homomorphic
encryption. This is a scheme which is capable of performing
homomorphic operations on inputs encrypted under mul-
tiple unrelated keys, and that allows decryption only if,
roughly speaking, all the corresponding secret keys involved
in the computation are used. This notion has been for-
mally proposed in the context of multiparty computation by
L´opez-Alt et al. [28] who also proposed a fully-homomorphic
realization. We note that a multikey linearly-homomorphic
encryption scheme was earlier given by Bresson et al.
[6]
(albeit not explicitly formalized). The following theorem
shows that the schemes obtained via our transformation in-
herit the multikey property (informally this holds because
a HE ciphertext consists of one or more ˆHE ciphertexts).
Therefore, by plugging for instance the scheme of Bresson
et al. [6] we obtain a multikey HE scheme supporting one
multiplication.
Theorem 3. If ˆHE is a multikey linearly-homomorphic
encryption, then so is HE.
As a third property inherited by our transformed schemes,
we consider threshold decryption.
Theorem 4. If ˆHE has a threshold decryption protocol
associated with it, then HE has threshold decryption as well.
The theorem follows by observing that the threshold variant
of HE is basically the same threshold variant of ˆHE.
Beyond Degree 2. The main diﬃculty when trying to
extend our technique to support more than one level of mul-
tiplications come from the fact that, to keep going in the
same way, one needs to perform multiplications of the ﬁrst
components of each triplet. Clearly, this can be achieved
easily if the underlying encryption scheme is more than lin-
early homomorphic.
In the full version, we show how to
generalize our construction to boost a level-d homomorphic
encryption scheme to a level-(d + 1) scheme. As an inter-
esting consequence, such a generalization for instance shows
how to use the BGN cryptosystem [3] to evaluate polynomi-
als of degree up to 4 on ciphertexts.
Instantiations. By instantiating our transformation with
a variety of existing schemes (e.g., [20, 10, 11, 32, 30, 33, 13,
6, 2, 25, 8]) we obtain several HE schemes capable of evalu-
ating one multiplication whose security relies on a variety of
assumptions, such as standard DDH, quadratic/composite
residuosity, or Decision Linear.
5. TWO-SERVER DELEGATION OF COM-
PUTATION ON ENCRYPTED DATA
In this section we introduce a new primitive that we call
two-server delegation of computation on encrypted data (2S-
DCED, for short) and we show how to realize it building
on our technique of Section 4. Using a 2S-DCED protocol,
1524a client can outsource the computation of a function f on
some input m to two distinct servers in such a way that:
it is possible to recover the output f (m) from the servers’
outputs, and (2) the two servers do not need to interact
(nor to know of their mutual existence). For security, the
protocol preserves the conﬁdentiality of the client’s inputs
as long as the two servers do not collude.
This new notion is somehow related to the one of server-
aided secure function evaluation [26].
Indeed, in the full
version we show how to use two-server delegation of compu-
tation on encrypted data to build double-server-aided secure
function evaluation in the semi-honest model.
5.1 2S-DCED Deﬁnition
A protocol for two-server delegation of computation on en-
crypted data is a tuple of algorithms 2S.DCED = (2S.KeyGen,
2S.Enc, 2S.Dec, 2S.Eval1, 2S.Eval2) working as follows.
2S.KeyGen(1λ): the key generation algorithm takes as input
the security parameter λ and produces a secret key sk and
a public key pk.
2S.Enc(pk, m): the encryption algorithm takes as input pk
and a message m ∈ M and outputs a ciphertext C con-
sisting of two components (C (1), C (2)).
2S.Dec(sk, C (1), C (2)): the decryption algorithm takes as in-
put sk, a ciphertext (C (1), C (2)) and returns a message m.
In addition, there exist two evaluation algorithms 2S.Eval1,
2S.Eval2 (basically, one for each server):
2S.Evali(pk, f, C (i)
t ): the i-th evaluation algorithm
takes as input pk, an arithmetic circuit f : Mt → M in a
class F of “permitted” circuits, and t ciphertexts C (i)
1 , . . . ,
C (i)
, all of the same component i = 1, 2. The algorithm
outputs a ciphertext C (i) (of the same component).
As a basic property, a 2S-DCED protocol must be correct
1 , . . . , C (i)
t
and compact.
Definition 9. A 2S-DCED protocol 2S.DCED = (2S.KeyGen,
2S.Enc, 2S.Eval1, 2S.Eval2, 2S.Dec) correctly evaluates a fam-
ily of circuits F if for all honestly generated keys (pk, sk) $←
2S.KeyGen(1λ), for all f ∈ F and for all messages m1,
) ← 2S.Enc(pk, mi)
. . . , mt ∈ M we have that if (C (1)
∀i ∈ [t], then Pr[2S.Dec(sk, 2S.Eval1(pk, f, C (1)
)) = f (m1, . . . , mt)] = 1−negl(λ)
2S.Eval2(pk, f, C (2)
where the probability is taken over all the algorithms’ ran-
dom choices. Furthermore, 2S.DCED compactly evaluates F
if above the running time of the decryption algorithm 2S.Dec
is bounded by a ﬁxed polynomial in λ, independent of f .
1 , . . . , C (1)
1 , . . . , C (2)
, C (2)
),
t
t
i
i
Security.
Informally, a 2S-DCED protocol should guaran-
tee that any adversary who has access to only one component
of a ciphertext (C (1), C (2)) should not learn any information
about the underlying plaintext. We formalize this property
using the approach of semantic security. Intuitively, our no-
tion says that as long as the two servers do not collude,
each of them does not learn anything about the encrypted
messages.
Definition 10
(2S-DCED Semantic Security). Let
2S.DCED be a 2S-DCED protocol as deﬁned above, and A
be a PPT adversary. Consider the following experiment:
Experiment Exp2S.SS
2S.DCED,A(λ)
b $← {0, 1}; (pk, sk) $← 2S.KeyGen(1λ)
(m0, m1, i)←A(pk)
(C (1), C (2)) $← Enc(pk, mb)
b(cid:48)←A(C (i))
If b(cid:48) = b return 1. Else return 0.
2S.DCED,A(λ) = Pr[Exp2S.SS
Let Adv2S.SS
2 . We
say that 2S.DCED is semantically-secure if for any PPT A
it holds Adv2S.SS
2S.DCED,A(λ) = negl(λ).
2S.DCED,A(λ) = 1] − 1
We remark that the notion extends in a straightforward
way to the case where the adversary submits multiple triples
{(m0,j, m1,j, ij)} and receives the corresponding ciphertext
components {C (ij )
} (all generated with the same b).
j
In addition to semantic security we consider another se-
curity notion that we call context hiding. The motivation
is that in the outsourcing setting the party who decrypts
may be diﬀerent from the one who provides the inputs of
the computation. Hence, the decryptor who receives a ci-
phertext (C (1), C (2)) encrypting the result of a computation
f must learn nothing about all the inputs of f (that it did
not provide), beyond what the result trivially reveals, i.e.,
f (m1, . . . , mt).
Definition 11
(Context Hiding). We say that a pro-
tocol 2S.DCED for two-server delegation of computation on
encrypted data satisﬁes context-hiding for a family of cir-
cuits F if there exists a PPT simulator Sim and a negligible
function (λ) such that the following holds. For any λ ∈ N,
any pair of keys (pk, sk) $← 2S.KeyGen(1λ), any circuit f ∈
F with t inputs, any two tuples of messages (cid:126)m1 ∈ Mt1 , (cid:126)m2 ∈
Mt2 such that t = t1 + t2 and corresponding ciphertexts
$← 2S.Enc(pk, (cid:126)mk)
(cid:126)C1, (cid:126)C2 such that (cid:126)Ck = ( (cid:126)C (1)
for k = 1, 2, and a ciphertext (C (1), C (2)) where C (1) =
2S.Eval1(pk, f, (cid:126)C (1)
2) and C (2) = 2S.Eval2(pk, f, (cid:126)C (2)
1,
(cid:126)C (2)
2) it holds
SD[(C (1), C (2)), Sim(1λ, (cid:126)C1, f, pk, f ( (cid:126)m1, (cid:126)m2))] ≤ (λ)
k, (cid:126)C (2)
1, (cid:126)C (1)
k)
5.2 A 2S-DCED Protocol for Degree-2 Poly-
nomials
In this section, we propose the construction of a proto-
col for two-server delegation of computation on encrypted
data that supports the evaluation of all degree-2 multivariate
polynomials. Our construction builds upon a public-space
linearly-homomorphic encryption scheme (cf. Deﬁnition 8),
and its interesting feature is to “boost” the linear-only ho-
momorphism in order to compute functions up to degree 2.
We stress that in contrast to the result of Section 4, here
the ciphertext remains always compact and thus the scheme
can support the evaluation of all degree-2 polynomials.
Furthermore, our protocol achieves two interesting prop-
erties that we call unbalanced eﬃciency and unbalanced se-
curity. The former says that one of the two servers can
perform the computation essentially “for free”, i.e., as if it
computes over the original inputs in M. The unbalanced
security property instead says that with respect to such
eﬃcient server the semantic security of the protocol holds
information-theoretically.
The precise description of our scheme follows:
2S.KeyGen(1λ): On input 1λ, where λ is a security parame-
ˆKeyGen(1λ) to get (pk, sk), and outputs (pk, sk).
ter, it runs
We assume that pk implicitly contains a description of the
message space M and the ciphertext space ˆC.
15252S.Enc(pk, m): The randomized encryption algorithm chooses
a random value b $← M and sets a ← (m − b) ∈ M and
β ← ˆEnc(pk, b). The output is C (1) = (a, β) ∈ M × ˆC and
C (2) = b ∈ M. The ciphertexts of the ﬁrst component
C (1) are “leveled”, i.e., the ones of the form (a, β) ∈ M× ˆC
are of level 1, whereas C (1) = α ∈ ˆC are of level 2.
2S.Eval1(pk, f, C (1)
): the evaluation algorithm for
the ciphertexts of the ﬁrst component essentially consists
of the basic procedures for performing the homomorphic
operations: Add1, Mult, Add2. Informally, Add1 and Mult
operate over pairs of level-1 ciphertexts whereas Add2 op-
erates over pairs of level-2 ciphertexts.
2 ∈ M× ˆC
Add1 : On input two level-1 ciphertexts C (1)
where, for i = 1, 2, C (1)
i = (ai, βi) this algorithm returns
a (level-1) ciphertext C = (a, β) ∈ M × ˆC computed as:
1 , . . . , C (1)
1 , C (1)
t
a = a1 + a2,
β = β1 (cid:1) β2