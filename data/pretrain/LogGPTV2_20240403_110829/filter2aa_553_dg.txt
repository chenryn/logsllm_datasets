例如，考虑makeinfo()函数。在第1个程序中，传递的是person的地址，
该函数实际上处理的是person的值。在第2个版本的程序中，创建了一个新
的结构info。储存在person中的值被拷贝到info中，函数处理的是这个副本。
因此，统计完字母个数后，计算结果储存在info中，而不是person中。然
而，返回机制弥补了这一点。makeinfo()中的这行代码：
return info;
与main()中的这行结合：
person = makeinfo(person);
把储存在info中的值拷贝到person中。注意，必须把makeinfo()函数声明
为struct namect类型，所以该函数要返回一个结构。
14.7.5 结构和结构指针的选择
假设要编写一个与结构相关的函数，是用结构指针作为参数，还是用结
构作为参数和返回值？两者各有优缺点。
把指针作为参数有两个优点：无论是以前还是现在的C实现都能使用这
种方法，而且执行起来很快，只需要传递一个地址。缺点是无法保护数据。
被调函数中的某些操作可能会意外影响原来结构中的数据。不过，ANSI 
C
新增的const限定符解决了这个问题。例如，如果在程序清单14.8中，
showinfo()函数中的代码改变了结构的任意成员，编译器会捕获这个错误。
把结构作为参数传递的优点是，函数处理的是原始数据的副本，这保护
了原始数据。另外，代码风格也更清楚。假设定义了下面的结构类型：
struct vector {double x; double y;};
如果用vector类型的结构ans储存相同类型结构a和b的和，就要把结构作
为参数和返回值：
1050
struct vector ans, a, b;
struct vector sum_vect(struct vector, struct vector);
...
ans = sum_vect(a,b);
对程序员而言，上面的版本比用指针传递的版本更自然。指针版本如
下：
struct vector ans, a, b;
void sum_vect(const struct vector *, const struct vector *, struct vector *);
...
sum_vect(&a, &b, &ans);
另外，如果使用指针版本，程序员必须记住总和的地址应该是第1个参
数还是第2个参数的地址。
传递结构的两个缺点是：较老版本的实现可能无法处理这样的代码，而
且传递结构浪费时间和存储空间。尤其是把大型结构传递给函数，而它只使
用结构中的一两个成员时特别浪费。这种情况下传递指针或只传递函数所需
的成员更合理。
通常，程序员为了追求效率会使用结构指针作为函数参数，如需防止原
始数据被意外修改，使用const限定符。按值传递结构是处理小型结构最常
用的方法。
14.7.6 结构中的字符数组和字符指针
到目前为止，我们在结构中都使用字符数组来储存字符串。是否可以使
用指向 char 的指针来代替字符数组？例如，程序清单14.3中有如下声明：
1051
#define LEN 20
struct names {
char first[LEN];
char last[LEN];
};
其中的结构声明是否可以这样写：
struct pnames {
char * first;
char * last;
};
当然可以，但是如果不理解这样做的含义，可能会有麻烦。考虑下面的
代码：
struct names veep = {"Talia", "Summers"};
struct pnames treas = {"Brad", "Fallingjaw"};
printf("%s and %s\n", veep.first, treas.first);
以上代码都没问题，也能正常运行，但是思考一下字符串被储存在何
处。对于struct names类型的结构变量veep，以上字符串都储存在结构内部，
结构总共要分配40字节储存姓名。然而，对于struct pnames类型的结构变量
treas，以上字符串储存在编译器储存常量的地方。结构本身只储存了两个地
址，在我们的系统中共占16字节。尤其是，struct pnames结构不用为字符串
分配任何存储空间。它使用的是储存在别处的字符串（如，字符串常量或数
组中的字符串）。简而言之，在pnames结构变量中的指针应该只用来在程序
1052
中管理那些已分配和在别处分配的字符串。
我们看看这种限制在什么情况下出问题。考虑下面的代码：
struct names accountant;
struct pnames attorney;
puts("Enter the last name of your accountant:");
scanf("%s", accountant.last);
puts("Enter the last name of your attorney:");
scanf("%s", attorney.last);  /* 这里有一个潜在的危险 */
就语法而言，这段代码没问题。但是，用户的输入储存到哪里去了？对
于会计师（accountant），他的名储存在accountant结构变量的last成员中，该
结构中有一个储存字符串的数组。对于律师（attorney），scanf()把字符串放
到attorney.last表示的地址上。由于这是未经初始化的变量，地址可以是任何
值，因此程序可以把名放在任何地方。如果走运的话，程序不会出问题，至
少暂时不会出问题，否则这一操作会导致程序崩溃。实际上，如果程序能正
常运行并不是好事，因为这意味着一个未被觉察的危险潜伏在程序中。
因此，如果要用结构储存字符串，用字符数组作为成员比较简单。用指
向 char 的指针也行，但是误用会导致严重的问题。
14.7.7 结构、指针和malloc()
如果使用malloc()分配内存并使用指针储存该地址，那么在结构中使用
指针处理字符串就比较合理。这种方法的优点是，可以请求malloc()为字符
串分配合适的存储空间。可以要求用4字节储存"Joe"和用18字节储
存"Rasolofomasoandro"。用这种方法改写程序清单14.9并不费劲。主要是更
改结构声明（用指针代替数组）和提供一个新版本的getinfo()函数。新的结
1053
构声明如下：
struct namect {
char * fname; // 用指针代替数组
char * lname;
int letters;
};
新版本的getinfo()把用户的输入读入临时数组中，调用malloc()函数分配
存储空间，并把字符串拷贝到新分配的存储空间中。对名和姓都要这样做：
void getinfo (struct namect * pst)
{
char temp[SLEN];
printf("Please enter your first name.\n");
s_gets(temp, SLEN);
// 分配内存储存名
pst->fname = (char *) malloc(strlen(temp) + 1);
// 把名拷贝到已分配的内存
strcpy(pst->fname, temp);
printf("Please enter your last name.\n");
s_gets(temp, SLEN);
1054
pst->lname = (char *) malloc(strlen(temp) + 1);
strcpy(pst->lname, temp);
}
要理解这两个字符串都未储存在结构中，它们储存在 malloc()分配的内
存块中。然而，结构中储存着这两个字符串的地址，处理字符串的函数通常
都要使用字符串的地址。因此，不用修改程序中的其他函数。
第12章建议，应该成对使用malloc()和free()。因此，还要在程序中添加
一个新的函数cleanup()，用于释放程序动态分配的内存。如程序清单14.10所
示。
程序清单14.10 names3.c程序
// names3.c -- 使用指针和 malloc()
#include 
#include   // 提供 strcpy()、strlen() 的原型
#include   // 提供 malloc()、free() 的原型
#define SLEN 81
struct namect {
char * fname; // 使用指针
char * lname;
int letters;
};
1055
void getinfo(struct namect *);   // 分配内存
void makeinfo(struct namect *);
void showinfo(const struct namect *);
void cleanup(struct namect *);   // 调用该函数时释放内存
char * s_gets(char * st, int n);
int main(void)
{
struct namect person;
getinfo(&person);
makeinfo(&person);
showinfo(&person);
cleanup(&person);
return 0;
}
void getinfo(struct namect * pst)
{
char temp[SLEN];
printf("Please enter your first name.\n");
s_gets(temp, SLEN);
1056
// 分配内存以储存名
pst->fname = (char *) malloc(strlen(temp) + 1);
// 把名拷贝到动态分配的内存中
strcpy(pst->fname, temp);
printf("Please enter your last name.\n");
s_gets(temp, SLEN);
pst->lname = (char *) malloc(strlen(temp) + 1);
strcpy(pst->lname, temp);
}
void makeinfo(struct namect * pst)
{
pst->letters = strlen(pst->fname) +
strlen(pst->lname);
}
void showinfo(const struct namect * pst)
{
printf("%s %s, your name contains %d letters.\n",
pst->fname, pst->lname, pst->letters);
}
1057
void cleanup(struct namect * pst)
{
free(pst->fname);
free(pst->lname);
}
char * s_gets(char * st, int n)
{
char * ret_val;
char * find;
ret_val = fgets(st, n, stdin);
if (ret_val)
{
find = strchr(st, '\n');  // 查找换行符
if (find)          // 如果地址不是 NULL，
*find = '\0';     // 在此处放置一个空字符
else
while (getchar() != '\n')
continue;     // 处理输入行的剩余部分
}
1058
return ret_val;
}
下面是该程序的输出：
Please enter your first name.
Floresiensis
Please enter your last name.
Mann
Floresiensis Mann, your name contains 16 letters.
14.7.8 复合字面量和结构（C99）
C99 
的复合字面量特性可用于结构和数组。如果只需要一个临时结构
值，复合字面量很好用。例如，可以使用复合字面量创建一个数组作为函数
的参数或赋给另一个结构。语法是把类型名放在圆括号中，后面紧跟一个用
花括号括起来的初始化列表。例如，下面是struct book类型的复合字面量：
(struct book) {"The Idiot", "Fyodor Dostoyevsky", 6.99}
程序清单14.11中的程序示例，使用复合字面量为一个结构变量提供两
个可替换的值（在撰写本书时，并不是所有的编译器都支持这个特性，不过
这是时间的问题）。
程序清单14.11 complit.c程序
/* complit.c -- 复合字面量 */
#include 
#define MAXTITL 41
1059
#define MAXAUTL 31
struct book {     // 结构模版：标记是 book
char title[MAXTITL];
char author[MAXAUTL];
float value;
};
int main(void)
{
struct book readfirst;
int score;
printf("Enter test score: ");
scanf("%d", &score);
if (score >= 84)
readfirst = (struct book) {"Crime and Punishment",
"Fyodor Dostoyevsky",
11.25};
else
readfirst = (struct book) {"Mr.Bouncy's Nice Hat",
"Fred Winsome",
1060
5.99};
printf("Your assigned reading:\n");
printf("%s by %s: $%.2f\n", readfirst.title,
readfirst.author, readfirst.value);
return 0;
}
还可以把复合字面量作为函数的参数。如果函数接受一个结构，可以把
复合字面量作为实际参数传递：
struct rect {double x; double y;};
double rect_area(struct rect r){return r.x * r.y;}
...
double area;
area = rect_area( (struct rect) {10.5, 20.0});
值210被赋给area。
如果函数接受一个地址，可以传递复合字面量的地址：
struct rect {double x; double y;};