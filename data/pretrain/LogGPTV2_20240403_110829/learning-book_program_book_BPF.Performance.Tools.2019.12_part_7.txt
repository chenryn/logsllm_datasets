native instructions for direct execution. The verifier rejects unsafe operations, incluxding
unbounded loops: BPF programs must finish in a bounded time.
BPF
BPF
bpf_jit_enabled
BPF Helpers
Kernel
Instructions
Verifier
es
BPF JIT
bpf
call
64-bit Registers
Execution
ue BPF prop
Events
ROR5
Native
Interpreter
BPF
R1R6
Instructions
context
R2R7]
R3R8]
BPF Syscalls
R4[R]
Map 2
BPF MAP LOOKUP ELEM
R10/FP
Map 1
Eduw
Figure 2-3BPF runtime internals
BPF can make use of helpers for fetching kernel state, and BPF maps for storage. The BPF program
is executed on events, which include kprobes, uprobes, and tracepoints.
The next sections discuss why performance tools need BPF, extended BPF programming, viewing
BPF instructions, the BPF API, BPF limitations, and BTE These sections provide a basis for under-
standing how BPF works when using bpftrace and BCC. In adldition, Appendix D covers BPF
programming in C directly, and Appendix E covers BPF instructions.
2.3.1 Why Performance Tools Need BPF
Performance tools use extended BPF in part for its programmability. BPF programs can execute 
custom latency calculations and statistical summaries. Those features alone would make for an
interesting tool, and there are plenty of other tracing tools that have those features. What makes
BPF different is that it is also efficient and production safe, and it is built into the Linux kernel.
With BPF, you can run these tools in production environments without needing to add any new
kernel components.
---
## Page 57
20
Chapter 2 Technology Background
Let’s look at some output and a diagram to see how performance tools use BPE This example
comes from an early BPF tool I published called bitehist, which shows the size of disk I/O as a
histogram [15]:
bitehist
Tracing block device I/0... Interval 5 secs. Ctrl-C to end.
kbytes
: count
dist.r i.but:ion
  J
56EE :
8 -> 15
| * d
: 1
16 -> 31
: 2
32 -> 63
: 738
64 -> 127
: 3 
128 -> 255
: 1
Figure 2-4 shows how BPF improves the efficiency of this tool.
User Tool
Before BPF
Kernel
disk I/O event
Tracepoint
Record
+
Parse Record
copy to user
Perf Buffer
Histogram
User Tool
Using BPF
Kernel
disk I/O event
BPF Program
copy to user
Format Output
Histogram
Figure 2-4(
---
## Page 58
2.3  Extended BPF (eBPF)
21
The key change is that the histogram can be generated in kernel context, which greatly reduces
the amount of data copied to user space. This efficiency gain is so great that it can allow tools to
run in production that would otherwise be too costly. In detail:
Prior to BPF, the full steps to produce this histogram summary were*:
1. In the kernel: enable instrumentation for disk I/O events.
2. In the kernel, for each event: write a record to the perf buffer. If tracepoints are used (as is
preferred), the record contains several fields of metadata about the disk I/O.
3. In user space: periodically copy the buffer of all events to user space.
4. In user space: step over each event, parsing the event metadata for the bytes field. Other
fields are ignored
5. In user space: generate a histogram summary of the bytes field.
Steps 2 to 4 have high performance overhead for high-I/O systems. Imagine transferring 10,000
puooas A1asa—azesutuns ptre asred o4 tuez8oud aoeds-sasn e o4 spuooau aoen O/1 sp
With BPF, the steps for the bitesize program are:
1. In the kernel: enable instrumentation for disk I/O events and attach a custom BPF program,
defined by bitesize.
2. In the kernel, for each event: run the BPF program. It fetches the bytes field alone and saves
it into a custom BPF map histogram.
3. In user space: read the BPF map histogram once and print it out.
This method avoids the cost of copying events to user space and reprocessing them. It also avoids
copying metadata fields that are not used. The only data copied to user space is shown in the
previous output: the *count° column, which is an array of numbers.
2.3.2 BPF Versus Kernel Modules
Another way to understand the benefits of BPF for observability is to compare it to kernel
modules. kprobes and tracepoints have been available for many years, and they can be used
from loadable kernel modules directly. The benefits of using BPF over kernel modules for tracing
purposes are:
• BPF programs are checked via a verifier; kernel modules may introduce bugs (kernel panics)
or security vulnerabilities.
• BPF provides rich data structures via maps.
8 These are the best steps ilable,but they dont show the only method. You could instal an outoftree traer, lle
SystemTap,but, depending on your kemel and distribution, that could be a rocky eperienoe. You could also modify the
Remel code, or develop a custom kprobe module, but both of these methods invove challenges and cary their ow
counters with range fiters for each row in the histogram [16]. It wss horible
isks. I developed my own workaround that I called the *hacktogram,* which imvoived creating multiple per(1) stat
---
## Page 59
22
Chapter 2 Technology Background
• BPF programs can be compiled once and then run anywhere, as the BPF instruction
set, map, helpers, and infrastructure are a stable ABI. (However, this is not possible with
e sqod se ns suauoduoo qesun aonponu e suod uen d uo
instrument kernel structures; see Section 2.3.10 for work on a solution.)
• BPF programs do not require kernel build artifacts to be compiled.
 BPF programming is easier to learn than the kernel engineering required to develop kernel
modules, making it accessible to more people.
Note that there are addlitional benefits when BPF is used for networking, including the ability to
replace BPF programs atomically. A kernel module would need to first unload out of the kernel
entirely and then reload the new version into the kernel, which could cause service disruptions.
A benefit of kernel modules is that other kernel functions and facilities can be used, without the
restriction to BPF helper calls only. However, this brings the additional risk of introducing bugs if
arbitrary kernel functions are misused.
2.3.3Writing BPF Programs
BPF can be programmed via one of the many front ends available. The main ones for tracing are,
from lowest- to highest-level language:
• LLVM
· BCC
• bpftrace
The LLVM compiler supports BPF as a compilation target. BPF programs can be written using
a higher-level language that LLVM supports, such as C (via Clang) or LLVM Intermediate
Representation (IR), and then compiled into BPE. LLVM includes an optimizer, which improves
the efficiency and size of the BPF instructions it emits.
While developing BPF in LLVM IR is an improvement, switching to BCC or bpftrace is even better.
BCC allows BPF programs to be written in C, and bpftrace provides its own higher-level language.
Internally, they are using LLVM IR and an LLVM library to compile to BPE.
The performance tools in this book are programmed in BCC and bpftrace. Programming in BPP
instructions directly, or LLVM IR, is the domain of developers who work on BCC and bpftrace
internals and is beyond the scope of this book. It is unnecessary for those of us using and
developing BPF performance tools.° If you wish to become a BPF instruction developer or are
curious, here are some resources for additional reading:
Appendix E provides a brief summary of BPF instructions and macros.
 BPF instructions are documented in the Linux source tree, Documentation/networking/
filter.txt [17],
(DIF) programs directly (the DTrace equhslent of BPF instructions),
---
## Page 60
2.3  Extended BPF (eBPF)
23
• LLVM IR is documented in the online LLVM reference; start with the Ilvm:IRBuilderBase
Class Reference [18].
• See the Cilium BPF and XDP Reference Guide [19]
While most of us will never program BPF instructions directly, many of us will view them
at times, such as when tools encounter issues. The next two sections show examples, using
bpftool(8) and then bpftrace.
2.3.4 Viewing BPF Instructions: bpftool
bpftool(8) was added in Linux 4.15 for viewing and manipulating BPF objects, including programs
and maps. It is in the Linux source under tools/bpf/bpftool. This section summarizes how to use
bpftool(8) to find loaded BPF programs and print their instructions.
bpftool
The default output of bpftool(8) shows the object types that it operates on. From Linux 5.2:
+ bpftool
Usage: bpftoo1[OPTIONS] OBJECT | COMMAND I help 
bpftool batch file FILE
bpftool version
( 3nq 1 eanareg 1 4ou 1 gxed 1 dnox6o 1 dew 1 6oxd 1 =: s3ar80
0eTons =( (|--son) [(-|-=pretty] 1f Ibpffs} 1
[(umouou|u]1[eduoodem|u]
There is a separate help page for each object. For example, for programs:
 bpftool prog help
Usage: bpftool prog [shov 1 list ][FROG]
bpftool prog dunp xlated PROG [I fi1e FILE I opcodes Ivisual I 1inun ]
bpftool prog dump jited  PRoG [1 file FILE 1opcodes 1 1inun ]
bpftool prog plnPROG FILE
bpftcol prog (load 1 loada110BJ  PATH 
[3nex aep][3axL ed]
[map [idx IDX 1nane BAMEMAP]\
[pirmaps KAP_DIR]
bpftool prog attach PROG ATTACH_TrPE [MAP]
bpftool prog detach PROC ATTACH_TYPE [MAP]
bpftool prog tracelog
drau boad toongdq
---
## Page 61
24
Chapter 2 Technology Background
MAP := [ id MAP_ID I pinned FILE )
PROG := ( 1d PROG_ID 1 pinned FILE I tag PROG_TAG ]
TYPE :=( socket 1kprobe 1kretprobe Iclassifier Iaction 1q
[. - -]
The pezf and prog subcommands can be used to find and print tracing programs. bpftool(8)
capabilities not covered here include attaching programs, reading and writing to maps, operating
on cgroups, and listing BPF features.
bpftool perf
The perf subcommand shows BPF programs attached via perf_event_open(), which is the norm
for BCC and bpftrace programs on Linux 4.17 and later. For example:
 bpftool perf
pid 1765 fd 6: prog_id 26 kprobe func blk_account_io_start offset 0
59ct ptd
f6 B: prog_ld 271
kprobe func blk_account_io_gone offset 0
59cT ptd
fd 11: prog_id 28 kprobe f
func sched_fork offset 0
59L[ pd
fd 15: prog_id 29 kprobe func ttvu_do_wakeup offset 0
pid 1765
fd 17: prog_id 30 kprobe func wake_up_nev_task offset 0
IE ptboad =6t ps9LI ptd
kprobe fune finish_taak_avitch offset 0
pid 1765 fd 26: prog_id 33 tracepoint inet_sock_set_state
E661z pd
fd 6: prog_id 232 upzobe  fllenane /proc/selr/exe offset 1T81927
pid 21993 fd 8: prog_id 233 uprobe filenane /proc/self/exe offset 1781920
E661z pd
fd 15: prog_id 234 kpxobe func blk_account_io_done offset 0
pid 21993 fd 17: prog_id 235 kprobe func blk_account_io_start offset 0
pid 25440
fd 8: prog_14 262 kprobet
func bik_nq_start_request offset 0
pid 25440 fd 10: prog_id 263 kprobe func blk_aceount_io_done offset 0
This output shows three different PIDs with various BPF programs:
• PID 1765 is a Vector BPF PMDA agent for instance analysis. (See Chapter 17 for more
details.)
● PID 21993 is the bpftrace version of biolatency(8). It shows two uprobes, which are the
BEGIN and END probes from the bpftrace program, and two kprobes for instrumenting the
start and end of block 1/O. (See Chapter 9 for the source to this program.)
• PID 25440 is the BCC version of biolatency(8), which currently instruments a different
start function for the block I/O.
The offset field shows the offset of the instrumentation from the instrumented object. For
1781927 matches the END_rigger function (as can be verified by using reade1f s bpftrace)-
bpftrace, offset 1781920 matches the BEGIN_trigger function in the bpftrace binary, and offset
The prog_id is the BPF program ID, which can be printed using the following subcommands.
---
## Page 62
2.3Extended BPF (eBPF)
25
bpftool prog show
The prog show subcommand lists all programs (not just those that are perf_event_open() based):
 bpftool prog show
[..-]
232: kprobe nane END tag b7cc714c79700b37gp1
1oaded_at 2019-06-18721:29:26+0000 u1d 0
233: kpzobe nane BEGIN tag 7de8b38ee40a4762 gp1
1oaded_at 2019-0618721:29:26+0000 uid 0
xlated 120B jited 112B memlock 4096B map_lds 130
234: kgrobe nane blk_account_io_ tag d89dcf82fc3e48d8gp1
1oaded_at 2019-06-18721:29:26+0000  u1d 0
xlated 848B jited 5408 memlock 4096B map_ids 128,129
235: kpzobe nane blk_account_1o_ tag 499rr93d9cff0eb2 gp1
1oaded_at 2019-06-18r21:29:26+ 0000 vi.d 0
B2t 8p1dew 8960> xootuu 8621 p93t 891t p91ex
258: cgzoup_skb tag 7be49e3934a125ba gp1
[. ..]
1oaded_at 2019-0618721:31:27+0000 uid 0
xlated 296Bjited 229Bmemlock 4096Bmap_1ds 153, 154
259: cgroup_skb  tag 2a142ef67assd174gp1
1oaded_at 2019-06-18721:31:27+0000 u1d 0
262: kprobe nane trace_req_start  tag 1dfc28ba8b3dd597gp1
1oaded_at 2019-06-18721:37:51+0000 u1d 0
263: kprobe nane trace_req_done tag d9bc05b8Tesa5498c gpl
btf_1d 5
loaded_at 2019-06-18721:37:51+0000 u1d 0
xlated 912B jited 5678 memlock 4096B map_ids 158,157
S pT"q
This output shows the bpftrace program IDs (232 to 235) and the BCC program IDs (262 and 263),
as well as other BPF programs that are loaded. Note that the BCC kprobe programs have BPF Type 
Format (BTF) information, shown by the presence of btf_id in this output. BTF is explained in
more detail in Section 2.3.9. For now, it is sufficient to understand that BTF is a BPF version of
debuginfo.
---
## Page 63
26
Chapter 2 Technology Background
bpftool prog dump xlated
Each BPF program can be printed (*dumped°) via its ID. The x1ated mode prints the BPF
instructions translated to assembly. Here is program 234, the bpftrace block I/O done program
 bpftool pzog dunp xlated 1d 234
0: (bf) rf = r1
1: (07) x6 += 112
2:  (bf) r1 = r10
- =+ [x (c0] ≤
4: (b7) r2 = 8
93 = ∈x (g) 15
6:(85) ca11 bpf_probe_readf51584
{- ota1 (+ 9n) 。 = [x (6) 
[ = [9[- 0[x] [ 9n)  (q] 1g
[8ztpt|deu =[x (et]6
11: (bf) r2 = r10
9- =+ Zx c0] 21
13:(85) ca11 _htab_map_lookup_elenif93808
14: (15) 1f ro == 0xo goto pc+]
15:(07) r0 += 56
16: (55) 1f ro 1= 0xo goto pc+2
[.. 
The output shows one of the restricted kernel helper calls that BPF can use: bpf_probe_read().
(More helper calls are listed in Table 2-2.)
Now compare the preceding output to the output for the BCC block I/O done program, ID 263
which has been compiled with BTF:
 bpftool pzog dunp xlated id 263
int trace_reg_done(struct pt_regs * ctx) :
 struct request *req = ctx->di;
(T[+ [21 ( 9n) + = [z (6) 10
Tpdl; [file:/virtual/main.e 1ine_nun:42 1ine_col:29]
(T[+ [)( 9n)。 = z 461 10
 stzuct request *req = ctx->dl; [Eile:/virtual/main.e 1ine_nun:42 1ine_col:18]
[ = (g0↑x) [ 9n)  (q) [
 tsp = bpf_nap_1okup_eles ( (void *)bpf_pseudo_cd (1, -1) , 4req| 
[file: /virtua1/nain.c 1ine_num: 46 1ine_co1 :39]
[8stpT|deu =[x (et]z
4:(bf) r2 = r10
[.--]
In this case, the line number information refers to the virtual files BCC creates when running
programs.
An opcodes modifier includes the BPF instruction opcodes (highlighted in bold):
 bpftool prog dunp xlated id 263 opcodes
int trace_req_done (struct pt_regs * ctx) :
 struct request *req = ctx=>d1
(T[+ [2) ( 9n)▪ = [ (6) ：0
79 11 70 00 00 00 00 00
 struct request *req = ctx->di
[x = (8- 0[x] I+ 9n] • (q.] [
7b 1a f8 ff 00 00 00 00
 t.sp = bpf_nap_1ookup_elem ( (void *)bpf_pseudo_cd (1, -1) 。 4req] 
---
## Page 65