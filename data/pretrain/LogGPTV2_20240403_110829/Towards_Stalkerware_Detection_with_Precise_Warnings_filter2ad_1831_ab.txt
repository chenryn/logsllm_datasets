nately, policies about adequate notifications are not well enforced.
For example, in June 2021 we reviewed apps on the Google Play
app store and found more than 100 “automated” call recording apps
advertising the functionality to record all phone calls automatically
with no interaction from the device owner. Many of these apps au-
tomatically forward call recordings to a pre-specified email address
and describe themselves as “hidden.”
Spyware and Stalkerware Detection Strategies. Most spyware
detection methods rely on dynamic taint tracking of private data,
which enables the flow of specific elements of private data to be
tracked as it flows through a program until it is exfiltrated over the
network [23]. This technique was adopted by commercial software
3
on many platforms where it is used to this day [48], often facili-
tated by use of the TaintDroid taint tracking tool [24]. Additional
spyware detection methods have also emerged, using such methods
as static analysis [33] and network traffic analysis [56].
In the realm of stalkerware detection, taint tracking remains
useful but insufficient. This is because most spyware starts to
silently steal private data in the background as soon as it is in-
stalled, whereas stalkerware apps are much more likely to require
an initial configuration step as the app needs to know to whom the
extracted data should be forwarded. Thus, dynamic analysis is far
less likely to succeed on stalkerware, for which automated analysis
is unlikely to get past this configuration step.
Chatterjee et al. [14] provided the first published solution de-
signed specifically to detect stalkerware. Their solution issues
keyword-based searches like “catch my cheating girlfriend” on the
web and app marketplaces to identify candidate stalkerware apps
and then uses machine learning to filter out false positives. Taking
a different approach, CreepRank [42] uncovered a broad ecosystem
of apps used in IPV, which includes stalkerware, but also apps that
enable harassment, impersonation, fraud, information theft, and
defense against such threats. It constructs a bipartite graph of apps
and devices on which they appeared, and it propagates information
from a seed set of stalkerware apps to other apps to establish guilt
by association. Though both of these algorithms are successful
and complementary methods for detecting stalkerware, neither ad-
dresses the problem of detecting how stalkerware compromises the
privacy of an individual to enable the creation of more informative
warnings. To accomplish this goal, we build on the taxonomies de-
veloped by prior work [40, 42] to create a taxonomy of stalkerware
capabilities, and we turn to machine learning methods that can
assign an app to multiple categories, each of which represents a
distinct stalkerware surveillance capability (e.g., extraction of call
logs, web browsing history, and social media messages).
Multi-label Learning and Semi-supervised Learning. We treat
the nuanced attribution of surveillance capabilities to stalkerware
apps as a multi-label learning problem [8, 54, 63]. A common ap-
proach in multi-label learning is to decompose the problem into
multiple independent binary classification problems, one for each
category. The final set of labels for each instance can then be deter-
mined by combining the classification results from all the binary
classifiers. This approach is flexible in its ability to use different
binary classifiers to build a multi-label learning system. However,
it also ignores the underlying mutual correlations among differ-
ent categories, which can contribute to the classification perfor-
mance [15, 65]. In our study, we follow the spirit of [49] and use
tree structures for this task. Specifically, we use extreme random
trees [28] and random forests [10].
Our work also adopts semi-supervised learning. In this setting,
only a fraction of the training examples are labeled. The goal is to re-
fine the decision boundary using the statistical characteristics of the
data distribution conveyed by the unlabelled data instances. Label
propagation is one style of semi-supervised learning [58, 64, 66] that
has been applied to stalkerware detection [42]. Our study adopts
active learning [19, 43, 47], a different branch of semi-supervised
learning, which interactively queries an external oracle (such as a
human annotator) to label new data instances. It is especially suit-
able for the scenario where unlabeled data is abundant but labeling
959ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Han, Roundy, Tamersoy
data manually is expensive. Dosmelt uses a learning-by-prediction
based active learning mechanism to incrementally update the nu-
anced stalkerware classifier. While most variants of active learning
choose to submit low-confidence instances to an expert overseer
for manual ground-truthing, as in the cases of uncertainty sampling
and margin sampling, this process can still leave the human anno-
tators with a significant workload checking questionable samples.
Alahmari et al. [1] pioneered an alternative active learning process
designed to minimize the annotation workload. It uses an ensem-
ble of highly diversified classifiers that vote, issuing a confidence
score that depends on the ensemble’s level of agreement. Only the
data instances with the highest confidence scores are submitted
to human experts for further review. We adopt this active learn-
ing mechanism combined with ensemble tree-based classifiers in
our framework. The instances our method selects for review help
minimize the annotation effort contributed by human experts.
3 DATA COLLECTION AND LABELING
In this section, we discuss our data collection efforts and the process
we used to create a labeled dataset of apps categorized according
to a taxonomy of stalkerware capabilities.
For this study, we partnered with a large security vendor and
obtained two anonymized reports that solely consisted of Android
application identifiers (app id for short) that the vendor observed
on customer devices between 2019 and 2020. An Android app id
uniquely identifies an app on a device and in app stores. In line with
prior work [14, 42] that also examined Android apps in a similar
context, our focus on the Android platform is due to its large market
share [5] and to the comparatively large number of stalkerware
apps that have been developed for Android devices [31]. Using the
vendor’s data to indicate apps that were in use on mobile devices,
we then queried two app stores with the app ids we possessed,
namely APKPure1 and Google Play Store2, to retrieve the titles
and descriptions of the apps. In total, we obtained information for
1.02 million apps3. The app titles and app descriptions are the main
pieces of information we rely on in this work.
We then developed a taxonomy of stalkerware capabilities to
support nuanced detections as follows. We first queried the app
titles and app descriptions we had obtained in the previous step
using search terms such as “spy” and “track” to identify apps that
were likely to be stalkerware. Then, two researchers from our team
independently reviewed the app descriptions of a random set of 200
apps identified via this process to examine their capabilities in detail
and iteratively refine the taxonomy using inductive coding [35]. We
then compared our taxonomy to that of Parsons et al. [40], which
also identified different capabilities of a small set of seven overt
stalkerware apps, finding that they matched each other well. The
final version of our taxonomy of stalkerware capabilities along with
their descriptions is shown in Table 1. The main differences between
our taxonomy and that of Parsons et al. [40] are that our taxonomy
combines surveillance of social media and chat apps into a single
category (which we call Social-Media) since our coders observed
1https://apkpure.com/
2https://play.google.com/store/apps
3For the majority of the apps, the two app stores contained identical information.
When they differed, we retained the longer of the two app descriptions. In the rare
case that neither store contained information for a particular app, we attempted to
determine if it had a dedicated webpage using search engine queries.
Description
Capability
Browsing-History Remote access to internet browsing history
Call-Logs
Call-Recordings
Camera
Contacts
Email
GPS-Tracking
Installed-Apps
Keylogging
Media-Extraction
Microphone
Screen
SMS
Social-Media
Access to call history
Recording of calls in a hidden and automated manner
Remote viewing of device’s camera
Remote access to phone’s list of contacts
Remote access to emails sent to an app on the device
Tracking the GPS location of the victim
Listing of apps installed on the device
Tracking of typing input
Remote access to photos, videos, and other media
Remote listening to device’s microphone
Recording of the device’s screen
Exports SMS/text messages
Access to social media accounts (including chat and
messaging) normally tied to a single device
Table 1: Taxonomy of stalkerware capabilities. Our stalk-
erware detection approach assigns these capabilities to sus-
pected apps by assuming a multi-label classification setting.
Figure 2: (Outer) Distribution of stalkerware capabilities
among the apps manually labeled for this work according
to our taxonomy. The numbers next to the bars pertain to
the actual counts. Surveillance of social media accounts and
locations of victims are the major capabilities. (Inner) Cu-
mulative distribution function (CDF) of fraction of labeled
surveillance apps that have a particular number of capabili-
ties. Most surveillance apps have only one capability.
that a significant majority of the apps advertised the surveillance of
both sources. Our taxonomy also omits the calendar-surveillance
capability as it was not prevalent in the apps we coded, and we omit
the ability to block phone calls as it does not pertain to surveillance.
After finalizing the taxonomy, the same two researchers partic-
ipated in a formal coding process consisting of three rounds. In
each of the first two rounds, they independently coded 150 ran-
domly chosen apps. Specifically, for each stalkerware capability
in the taxonomy, the coders noted whether or not the app under
review possessed the capability, based on an examination of the
app title and app description. After each round, the researchers met
to discuss any apps they coded differently to better align with each
other and improve the coding. In the third and final round, both
researchers coded another random set of 100 apps to test agree-
ment. Since our setting is such that each example can be assigned a
4
0.000.050.100.150.20Fraction of labeled apps with a specific capabilityEmailKeyloggingScreenInstalled-AppsBrowsing-HistoryCameraMedia-ExtractionCall-RecordingsMicrophoneContactsCall-LogsSMSGPS-TrackingSocial-Media54566285102125129146154203261290639667246810121413Number of capabilities0.00.20.40.60.81.0CDF for labeled apps960Towards Stalkerware Detection with Precise Warnings
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Figure 4: Steps taken by Dosmelt to perform nuanced clas-
sification of stalkerware.
4 SYSTEM ARCHITECTURE
The architecture of Dosmelt is shown as a pipeline in Figure 4. As
described in Section 3, the input dataset is comprised of the titles
and descriptions of the apps. These text-based descriptors are then
fed into a feature extraction module. Here, we remove the stop
words and build a bag-of-words model where each word becomes
a token. The term frequency-inverse document frequency (TF-IDF)
value of each token is then computed, and for a particular app, the
combination of these values form the feature vector of the app.
Then, a stalkerware detector is applied over these feature vectors
to decide whether the app is stalkerware or benign. In the final
step, the nuanced classification module identifies the surveillance
capabilities carried out by the detected stalkerware apps.
For both the detection and nuanced classification modules, we
adopt a learning-by-prediction based active learning paradigm to
guide the training process. We use this approach because we only
have access to a tiny number of labeled examples to use in train-
ing. Furthermore, obtaining new labeled examples is costly, as it
requires a human annotator to examine app descriptions in detail.
Active learning is suitable for this setting; it requires the labeling
of a small fraction of the training dataset in the beginning [47].
After building an initial classifier, active learning helps Dosmelt to
iteratively select informative training data instances and retrieve
their labels from human experts. These judiciously selected data in-
stances enrich the training data and gradually refine the classifier’s
parameters. This active learning makes good use of the limited
budget we have for expert labeling of individual apps.
5 FEATURE ENCODING & ACTIVE LEARNING
In this section, we describe how the learning-by-prediction strategy
enables us to gradually build an accurate stalkerware classifier with
nuanced detections by starting with a small set of labelled apps,
each of which is represented with features extracted from their title
and description information.
5.1 Preprocessing and Feature Engineering
We leverage term frequency-inverse document frequency (TF-IDF)
features extracted from the titles and descriptions of the apps in
our dataset (see Section 3). We first use the NLTK [6] package to
remove stop words from the extracted texts, as these commonly
used stop words (such as “the”, “a”, “an”, or “in”) contain no infor-
mation related to stalkerware functionality. After that, we count
the frequency of occurrence of the remaining keywords and ex-
clude those that appear only once. These extremely unusual words
cannot generate statistically stable TF-IDF features, and they in-
crease a classifier’s risk of overfitting to the training data. Next,
we construct a bag-of-word model and derive the TF-IDF feature
Figure 3: Pointwise mutual information (PMI) values for ev-
ery pair of surveillance capabilities. PMI is a measure of as-
sociation, higher values indicate greater association. Email
is involved in the top-3 strongest associations.
varying number of codes (each representing a stalkerware capabil-
ity), we used Krippendorff’s alpha, which is a statistical measure of
inter-rater reliability suitable for this setting [34]. Our two coders
achieved a Krippendorff’s alpha of 0.86 in this final round, which in-
dicates strong inter-rater reliability [34]. The team then continued
to code stalkerware apps independently. In total, this process led
to the labeling of 4,839 apps, where 1,462 of them are stalkerware
apps with at least one surveillance capability from the taxonomy
of surveillance capabilities. The rest are benign apps.
Figure 2 contains the distribution of stalkerware capabilities
among the 1,462 stalkerware apps. The most common forms of
surveillance are social media monitoring (Social-Media) and loca-
tion tracking (GPS-Tracking). Figure 2 also shows the cumulative
distribution function of labeled surveillance apps that have a partic-
ular number of capabilities. While 73% of stalkerware apps support
only one surveillance capability, there are many apps with multi-
ple capabilities. To examine the associations between surveillance
capabilities, we computed the pointwise mutual information (PMI)
values for every pair of capabilities, which is defined as follows. Let
X and Y be discrete random variables. Then, for a pair of outcomes
x ∈ X and y ∈ Y, PMI(x, y) measures the discrepancy between the