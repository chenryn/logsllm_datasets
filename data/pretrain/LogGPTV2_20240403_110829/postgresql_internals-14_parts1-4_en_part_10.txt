ofdataatsomearbitrarypointinthepast,evenifalltherequiredtuplesarepresent
inheappages. Consequently,itisimpossibletoimplementretrospectivequeries
(whicharesometimesalsocalledtemporalorflashbackqueries).
Intriguingly,suchfunctionalitywasdeclaredasoneoftheobjectivesofPostgresandwas
implemented at theverystart,but it was removed from the database system when the
projectsupportwaspassedontothecommunity.1
Thus,asnapshotconsistsofseveralvaluessavedatthetimeofitscreation:2
xmin isthesnapshot’slowerboundary,whichisrepresentedbytheoftheoldest
activetransaction.
Allthetransactionswithsmallersareeithercommitted(sotheirchanges p.
areincludedintothesnapshot)oraborted(sotheirchangesareignored).
xmax is the snapshot’s upper boundary, which is represented by the value that
exceedstheofthelatestcommittedtransactionbyone.Theupperboundary
definesthemomentwhenthesnapshotwastaken.
Allthetransactionswhosesareequaltoorgreaterthanxmaxareeitherstill
runningordonotexist,sotheirchangescannotbevisible.
xip_list isthelistofsofalltheactivetransactionsexceptforvirtualones,which
donotaffectvisibilityinanyway. p.
1 JosephM.Hellerstein,LookingBackatPostgres.https://arxiv.org/pdf/1901.01973.pdf
2 backend/storage/ipc/procarray.c,GetSnapshotDatafunction
95
Chapter4 Snapshots
Snapshotsalsoincludeseveralotherparameters,butwewillignorethemfornow.
Inagraphicalform,asnapshotcanberepresentedasarectanglethatcomprises
transactionsfromxmintoxmax:
xip_list
xmin xmax
xid
1 2 3
To understand how visibility rules are defined by the snapshot, we are going to
reproducetheabovescenarioontheaccountstable.
=> TRUNCATE TABLE accounts;
Thefirsttransactioninsertsthefirstrowintothetableandremainsopen:
=> BEGIN;
=> INSERT INTO accounts VALUES (1, 'alice', 1000.00);
=> SELECT pg_current_xact_id();
pg_current_xact_id
−−−−−−−−−−−−−−−−−−−−
790
(1 row)
Thesecondtransactioninsertsthesecondrowandcommitsthischangeimmedi-
ately:
=> BEGIN;
=> INSERT INTO accounts VALUES (2, 'bob', 100.00);
=> SELECT pg_current_xact_id();
pg_current_xact_id
−−−−−−−−−−−−−−−−−−−−
791
(1 row)
=> COMMIT;
96
4.3 SnapshotStructure
Atthispoint,let’screateanewsnapshotinanothersession. Wecouldsimplyrun
anyqueryforthispurpose,butwewilluseaspecialfunctiontotakealookatthis
snapshotrightaway:
=> BEGIN ISOLATION LEVEL REPEATABLE READ;
=> -- txid_current_snapshot() before v.13
SELECT pg_current_snapshot();
pg_current_snapshot
−−−−−−−−−−−−−−−−−−−−−
790:792:790
(1 row)
This function displays the following snapshot components, separated by colons:
xmin, xmax, and xip_list (the list of active transactions; in this particular case it
consistsofasingleitem).
Oncethesnapshotistaken,committhefirsttransaction:
=> COMMIT;
Thethirdtransactionisstartedafterthesnapshotcreation.Itmodifiesthesecond
row,soanewtupleappears:
=> BEGIN;
=> UPDATE accounts SET amount = amount + 100 WHERE id = 2;
=> SELECT pg_current_xact_id();
pg_current_xact_id
−−−−−−−−−−−−−−−−−−−−
792
(1 row)
=> COMMIT;
Oursnapshotseesonlyonetuple:
=> SELECT ctid, * FROM accounts;
ctid | id | client | amount
−−−−−−−+−−−−+−−−−−−−−+−−−−−−−−
(0,2) | 2 | bob | 100.00
(1 row)
97
Chapter4 Snapshots
Butthetablecontainsthreeofthem:
=> SELECT * FROM heap_page('accounts',0);
ctid | state | xmin | xmax
−−−−−−−+−−−−−−−−+−−−−−−−+−−−−−−−
(0,1) | normal | 790 c | 0 a
(0,2) | normal | 791 c | 792 c
(0,3) | normal | 792 c | 0 a
(3 rows)
So how does Postgre choose which versions to show? By the above rules,
changes are included into a snapshot only if they are made by committed trans-
actionsthatsatisfythefollowingcriteria:
• Ifxid COMMIT;
4.4 Visibility of Transactions’Own Changes
Things get a bit more complicated when it comes to defining visibility rules for
transactions’ownchanges: insomecases,onlypartofsuchchangesmustbevis-
ible. Forexample,acursorthatwasopenedataparticularpointintimemustnot
seeanychangesthathappenedlater,regardlessoftheisolationlevel.
98
4.4 VisibilityofTransactions’OwnChanges
To address such situations, tuple headers provide a special field (displayed as
cminandcmaxpseudocolumns)thatshowsthesequencenumberoftheoperation
withinthetransaction. Thecmincolumnidentifiesinsertion,whilecmaxisused
fordeletionoperations. Tosavespace,thesevaluesarestoredinasinglefieldof
thetupleheaderratherthanintwodifferentones. Itisassumedthatoneandthe
samerowalmostnevergetsbothinsertedanddeletedwithinasingletransaction.
(Ifitdoeshappen,Postgrewritesaspecialcomboidentifierintothisfield,and
theactualcminandcmaxvaluesarestoredbythebackendinthiscase.1)
Asanillustration,let’sstartatransactionandinsertarowintothetable:
=> BEGIN;
=> INSERT INTO accounts VALUES (3, 'charlie', 100.00);
=> SELECT pg_current_xact_id();
pg_current_xact_id
−−−−−−−−−−−−−−−−−−−−
793
(1 row)
Openacursortorunthequerythatreturnsthenumberofrowsinthistable:
=> DECLARE c CURSOR FOR SELECT count(*) FROM accounts;
Insertonemorerow:
=> INSERT INTO accounts VALUES (4, 'charlie', 200.00);
Nowextendtheoutputbyanothercolumntodisplaythecminvaluefortherows
insertedbyourtransaction(itmakesnosenseforotherrows):
=> SELECT xmin, CASE WHEN xmin = 793 THEN cmin END cmin, *
FROM accounts;
xmin | cmin | id | client | amount
−−−−−−+−−−−−−+−−−−+−−−−−−−−−+−−−−−−−−−
790 | | 1 | alice | 1000.00
792 | | 2 | bob | 200.00
793 | 0 | 3 | charlie | 100.00
793 | 1 | 4 | charlie | 200.00
(4 rows)
1 backend/utils/time/combocid.c
99
Chapter4 Snapshots
The cursor query gets only three rows; the row inserted when the cursor was al-
readyopendoesnotmakeitintothesnapshotbecausethecmin  FETCH c;
count
−−−−−−−
3
(1 row)
Naturally,thiscminnumberisalsostoredinthesnapshot,butitisimpossibleto
displayitusinganymeans.
4.5 Transaction Horizon
Asmentionedearlier,thelowerboundaryofthesnapshotisrepresentedbyxmin,
whichistheoftheoldesttransactionthatwasactiveatthemomentofthesnap-
shot creation. This value is very important because it defines the horizon of the
transactionthatusesthissnapshot.
Ifatransactionhasnoactivesnapshot(forexample,attheReadCommittedisola-
tionlevelbetweenstatementexecution),itshorizonisdefinedbyitsownifitis
assigned.
All the transactions that are beyond the horizon (those with xid  BEGIN;
=> SELECT backend_xmin FROM pg_stat_activity
WHERE pid = pg_backend_pid();
backend_xmin
−−−−−−−−−−−−−−
793
(1 row)
100
4.5 TransactionHorizon
Virtualtransactionshavenoreals,buttheystillusesnapshotsjustlikeregular
transactions,sotheyhavetheirownhorizons.Theonlyexceptionisvirtualtrans-
actionswithoutanactivesnapshot: theconceptofthehorizonmakesnosensefor
them,andtheyarefully“transparent”tothesystemwhenitcomestosnapshots
andvisibility(eventhoughpg_stat_activity.backend_xminmaystillcontainanxmin
ofanoldsnapshot).
We can also define the database horizon in a similar manner. For this purpose,
weshouldtakethehorizonsofallthetransactionsinthisdatabaseandselectthe
mostremoteone,whichhastheoldestxmin.1 Beyondthishorizon,outdatedheap
tupleswillneverbevisibletoanytransactioninthisdatabase. Suchtuplescanbe
safely cleaned up by vacuum—this is exactly why the concept of the horizon is so
importantfromapracticalstandpoint.
database
horizon
outdatedtuples
thatcanbevacuumed
xid
1 2 3 4 5 6 7 8 9 10
Let’sdrawsomeconclusions:
• Ifatransaction(nomatterwhetheritisrealorvirtual)attheRepeatableRead
or Serializable isolation level is running for a long time,it thereby holds the
databasehorizonanddefersvacuuming.
1 backend/storage/ipc/procarray.c,ComputeXidHorizonsfunction
101
Chapter4 Snapshots
• A real transaction at the Read Committed isolation level holds the database
horizoninthesameway,evenifitisnotexecutinganyoperators(beinginthe
“idleintransaction”state).
• AvirtualtransactionattheReadCommittedisolationlevelholdsthehorizon
onlywhileexecutingoperators.
Thereisonlyonehorizonforthewholedatabase,soifitisbeingheldbyatrans-
action,itisimpossibletovacuumanydatawithinthishorizon—evenifthisdata
hasnotbeenaccessedbythistransaction.
Cluster-widetablesofthesystemcataloghaveaseparatehorizonthattakesintoaccount
all transactions in all databases. Temporarytables,on the contrary,do not have to pay
attentiontoanytransactionsexceptthosethatarebeingexecutedbythecurrentprocess.
Let’sgetbacktoourcurrentexperiment.Theactivetransactionofthefirstsession
still holds the database horizon; we can see it by incrementing the transaction
counter:
=> SELECT pg_current_xact_id();
pg_current_xact_id
−−−−−−−−−−−−−−−−−−−−
794
(1 row)
=> SELECT backend_xmin FROM pg_stat_activity
WHERE pid = pg_backend_pid();
backend_xmin
−−−−−−−−−−−−−−
793
(1 row)
Andonlywhenthistransactioniscomplete,thehorizonmovesforward,andout-
datedtuplescanbevacuumed:
=> COMMIT;
=> SELECT backend_xmin FROM pg_stat_activity
WHERE pid = pg_backend_pid();
backend_xmin
−−−−−−−−−−−−−−
795
(1 row)
102
4.6 SystemCatalogSnapshots
In a perfect world, you should avoid combining long transactions with frequent p.
updates(thatspawnnewrowversions),asitwillleadtotableandindexbloating.
4.6 System Catalog Snapshots
Although the system catalog consists of regular tables, they cannot be accessed
viaasnapshotusedbyatransactionoranoperator.Thesnapshotmustbe“fresh”
enoughtoincludeallthelatestchanges,otherwisetransactionscouldseeoutdated
definitionsoftablecolumnsormissnewlyaddedintegrityconstraints.
Hereisasimpleexample:
=> BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
=> SELECT 1; -- a snapshot for the transaction is taken
=> ALTER TABLE accounts
ALTER amount SET NOT NULL;
=> INSERT INTO accounts(client, amount)
VALUES ('alice', NULL);
ERROR: null value in column "amount" of relation "accounts"
violates not−null constraint
DETAIL: Failing row contains (1, alice, null).
=> ROLLBACK;
The integrity constraint that appeared after the snapshot creation was visible to
thecommand. Itmayseemthatsuchbehaviorbreaksisolation,butifthe
insertingtransactionhadmanagedtoreachtheaccountstablebeforethe-
command,thelatterwouldhavebeenblockeduntilthistransactioncompleted. p.
Ingeneral,theserverbehavesasifaseparatesnapshotiscreatedforeachsystem
catalog query. But the implementation is,of course,much more complex1 since
frequent snapshot creation would negatively affect performance; besides, many
systemcatalogobjectsgetcached,anditmustalsobetakenintoaccount.
1 backend/utils/time/snapmgr.c,GetCatalogSnapshotfunction
103
Chapter4 Snapshots
4.7 Exporting Snapshots
Insomesituations,concurrenttransactionsmustseeoneandthesamesnapshot
byallmeans.Forexample,ifthepg_dumputilityisrunintheparallelmode,allits
processesmustseethesamedatabasestatetoproduceaconsistentbackup.
We cannot assume that snapshots will be identical simply because transactions
were started“simultaneously.” To ensure that all the transactions see the same
data,wemustemploythesnapshotexportmechanism.
The pg_export_snapshot function returns a snapshot , which can be passed to
anothertransaction(outsideofthedatabasesystem):
=> BEGIN ISOLATION LEVEL REPEATABLE READ;
=> SELECT count(*) FROM accounts;
count
−−−−−−−
4
(1 row)
=> SELECT pg_export_snapshot();
pg_export_snapshot
−−−−−−−−−−−−−−−−−−−−−
00000004−0000006E−1
(1 row)
Beforeexecutingthefirststatement,theothertransactioncanimportthesnapshot
byrunningthecommand.Theisolationlevelmustbeset
toRepeatableReadorSerializablebecauseoperatorsusetheirownsnapshotsatthe
ReadCommittedlevel:
=> DELETE FROM accounts;
=> BEGIN ISOLATION LEVEL REPEATABLE READ;
=> SET TRANSACTION SNAPSHOT '00000004-0000006E-1';