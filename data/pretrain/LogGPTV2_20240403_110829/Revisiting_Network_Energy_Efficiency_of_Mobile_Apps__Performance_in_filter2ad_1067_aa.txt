title:Revisiting Network Energy Efficiency of Mobile Apps: Performance in
the Wild
author:Sanae Rosen and
Ashkan Nikravesh and
Yihua Guo and
Zhuoqing Morley Mao and
Feng Qian and
Subhabrata Sen
Revisiting Network Energy Efﬁciency of Mobile Apps:
Performance in the Wild
Sanae Rosen, Ashkan Nikravesh, Yihua Guo, Z. Morley Mao, Feng Qian†, Subhabrata Sen*
University of Michigan, †Indiana University, *AT&T Labs – Research
{sanae,ashnik,yhguo,zmao}@umich.edu,
PI:EMAIL, PI:EMAIL
ABSTRACT
Energy consumption due to network trafﬁc on mobile devices con-
tinues to be a signiﬁcant concern. We examine a range of excessive
energy consumption problems caused by background network traf-
ﬁc through a two-year user study, and also validate these ﬁndings
through in-lab testing of the most recent versions of major mobile
apps. We discover a new energy consumption problem where fore-
ground network trafﬁc persists after switching from the foreground
to the background, leading to unnecessary energy and data drain.
Furthermore, while we ﬁnd some apps have taken steps to improve
the energy impact of periodic background trafﬁc, energy consump-
tion differences of up to an order of magnitude exist between apps
with near-identical functionality. Finally, by examining how apps
are used in the wild, we ﬁnd that some apps continue to generate
unneeded trafﬁc for days when the app is not being used, and in
some cases this wasted trafﬁc is responsible for a majority of the
app’s network energy overhead. We propose that these persistent,
widespread and varied sources of excessive energy consumption in
popular apps should be addressed through new app management
tools that tailor network activity to user interaction patterns.
Categories and Subject Descriptors
C.2.1 [Network Architecture and Design]: wireless communi-
cation; C.4 [Performance of Systems]: measurement techniques,
performance attributes
Keywords
4G LTE; smartphones; cellular network performance; mobile en-
ergy consumption
1.
INTRODUCTION
Fueled by powerful mobile devices and ubiquitous cellular data
network access, smartphone applications (apps) have become an
indispensable part of modern life. There have been more than 100
billion mobile app downloads from the Apple App Store as of June
2015 [2]. However, battery life remains a scarce resource. Over the
past 15 years, CPU performance has improved 250x while Li-Ion
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
IMC’15, October 28–30, 2015, Tokyo, Japan.
c(cid:13) 2015 ACM. ISBN 978-1-4503-3848-6/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/2815675.2815713.
battery capacity has only doubled [11]. It is known that inefﬁcient
app design can lead to excessive battery drain. In particular, certain
app trafﬁc patterns, like periodic requests, interact poorly with the
power-hungry cellular interface [22, 8, 21]. Despite these known
problems, however, apps continue to drain user batteries.
In this paper, we measure the prevalence of excessive mobile
app network energy consumption by analyzing data collected from
20 real smartphone users and 342 unique apps over a period of 22
months. This unique long-term dataset allows us to examine the
smartphone and app ecosystem in the wild. We focus on the im-
pact of background trafﬁc — trafﬁc sent when the app has no UI
element visible — which makes up 84% of the total network en-
ergy consumed across all users. Periodic background trafﬁc is often
power-hungry [21], but apps have ﬂexibility in scheduling back-
ground trafﬁc due to the absence of real-time user interaction, and
can use strategies such as bundling trafﬁc or reducing update fre-
quencies to reduce energy consumption. We examine global trends
across all apps and determine that energy overconsumption remains
a pervasive problem, despite many apps taking steps to reduce their
energy overhead. Furthermore, some of this trafﬁc is likely unin-
tentional and not useful to the end user.
Our key ﬁndings are as follows:
• We identify a signiﬁcant new source of excessive background
energy consumption (§4.1), where network trafﬁc persists after an
app transitions from the foreground to the background, sometimes
for as long as a day. 30% of background trafﬁc from one major
browser is caused by this phenomenon. Over 80% of apps transmit
more than 80% of their background data in the ﬁrst minute after the
app is sent to a background state, in total across all user devices in
our study.
• We show that there is high variation in the energy overhead of
apps that rely on frequent background trafﬁc, even between apps
with similar background functionality (§4.2). By examining case
studies of apps that require background updates, we ﬁnd that the en-
ergy consumed by similar apps can vary by up to an order of mag-
nitude. Furthermore, we ﬁnd that apps studied in previous work
have often improved their energy overheads but that other new apps
continue to make the same mistakes. There is substantial room for
improvement by adopting energy-efﬁcient design approaches, such
as batching background updates.
• By examining apps as they are used in the wild, we ﬁnd that
many apps are frequently not used for days, including apps with
substantial background trafﬁc. We demonstrate that the network
energy overhead of these apps can be reduced by up to a half in
some cases if the OS were to proactively terminate long-running
apps after three days of inactivity (§5). More generally, we empha-
size the need for apps to be aware of their foreground/background
339state when scheduling network requests, and our ﬁndings suggest
that new suggestions for managing background trafﬁc are likely to
be highly valuable.
2. RELATED WORK
Mobile network and app performance is an area that has received
a great deal of interest, and prior work has examined many as-
pects of this problem, including papers on TCP-cellular interac-
tions [17], accurate active performance measurements [14], app
usage [27], wireless data drain [23], comparing cellular and Wi-
Fi performance [25], application performance [19], energy efﬁ-
ciency when downloading and rendering web content in the fore-
ground [26], and the impact of user behavior [13]. We focus on
background network energy consumption speciﬁcally, speciﬁcally
where it occurs in the wild.
Prior work has also examined various aspects of background net-
work activity as well, which or work builds upon. Aucinas et al.
examined smartphone energy efﬁciency through in-lab experiments
with a number of major apps which maintain a continuous online
presence [8]. Work by Huang et al. [18] examined trafﬁc sent when
the screen is off (note that background trafﬁc can also occur when
the screen is on, including from minimized apps). Other work has
examined periodic transfers [21], and the disproportionate impact
of small background requests [12, 9]. Tamer [20] demonstrates it
is possible to modify the energy impact of app wakeups by inter-
posing on wakeup events to better manage them. Our work is com-
plementary, examining a broad set of apps and focusing on their
behavior in the wild over a long time period, which enabled us to
uncover new energy drain problems as well as understand how old
problems have evolved.
There has also been a great deal of interest in the impact of back-
ground trafﬁc in work developed concurrently with this paper. In
particular, Google announced Android M after the submission of
this paper, which introduces Doze and App Standby, which should
decrease the energy impact of the excessive background trafﬁc we
uncovered in this paper [15, 5]. Other concurrent work includes Za-
pDroid [24], which automatically isolates or disables infrequently-
used apps, a solution which our ﬁndings suggest would be highly
valuable. Work by Chen et al [10] presents a large-scale user study
of how users use their phones and how that interacts with app
battery consumption. Their study is complementary, covering all
sources of energy consumption and trends across categories of de-
vices, whereas we focus on examining the role of background net-
work transfers speciﬁcally in depth and exploring the root causes
of this excessive background consumption.
3. DATA COLLECTION AND OVERVIEW
We ﬁrst summarize our measurement dataset. We recruited 20
students1 at the University of Michigan and provided each of them
with a Samsung Galaxy S III smartphone with an unlimited LTE
data plan. We pre-installed custom data collection software on each
phone that transparently collects complete network traces. These
traces include packet payloads (note we are unable to decrypt SSL
trafﬁc), user input events, and packet-process mappings. All col-
lected data was kept strictly conﬁdential. The data was collected
over a period of 623 days (December 2012 to November 2014) with
an overall raw data size of 125 GB, including cellular and WiFi
packet traces and user input and context data. We focus primar-
ily on cellular trafﬁc in this study as it consumes far more energy
than WiFi. Processes are labeled with names derived from the app
1This user trial was approved by University of Michigan IRB-
HSBS #HUM00044666.
Figure 1: Number of times each app appears in a user’s top 10
apps, ranked by total data consumption.
Figure 2: Highest cellular data and network energy usage by
app across all users.
package name, allowing us to straightforwardly map packets to the
originating apps. In a few cases, requests are delegated to some
system services such as the Media Server. We label this trafﬁc ac-
cording to the service from which it originated rather than the app
which triggered it, as mapping back to the originating app in this
speciﬁc case cannot always be done with high accuracy.
3.1 Measurement Data Overview
We next give an overview of this 22 month dataset before focus-
ing on speciﬁc apps.
App Popularity and Diversity. Users differ greatly in the apps
they use. Figure 1 shows apps that appear in at least two users’ top-
10 lists (by total data consumption). While a handful of apps are
popular among all users (e.g., the built-in media player, Facebook,
and Google Play), users’ top-ten lists otherwise exhibit signiﬁcant
diversity. Similar diversity of app usage was observed in previous
work [13, 27].
Data- and Energy-Hungry apps. First, we examine trends in
applications that consume a large amount of energy or data. We use
a standard power model for LTE [16, 22] supported by measure-
 0 5 10 15 20Media processMedia serverPlay storeGmailWssyncmldmFacebookDefault browserMapsChromePlusGallery3dAccuweatherRedditFlipboardDropboxMagic busTinderYahoo weatherESPNTwitterNytimesWeather channelInstagramSkypeSgiggleEmailTencentSpotifyNumber of times ina user’s top 10 0 0.5 1 1.5 2 2.5GroupmeFacebookGappsSamsung PushGmailViberGvphoneTenthbitK9ESPNEmailRedboxTimeToCallLoc. processMapsWeiboWhatsappTwitterExchangeChromeTotal consumed (MJ)Energy 0 5 10 15 20 25 30Media serverInstagramPodcastaddictMedia processFacebookPocketcastsDefault browserGoogle musicChromeWssyncmldmRedditMapsGallery3dPlay storeGmailIheartradioTwitterWeatherSpotifyESPNTotal consumed (GB)Data340subject to time constraints to meet user expectations. Furthermore,
there is often a tradeoff between ensuring updates are timely and
avoiding wasted background updates the user never looks at. For
this reason, apps vary greatly in the amount of energy that they con-
sume in the background, even when providing similar functional-
ity. In this section, we analyze the resource efﬁciency of app back-
ground network activities through detailed case studies, identifying
large disparities between apps due to diverse design approaches.
We also identify several cases where large numbers of network re-
quests are sent unnecessarily, veriﬁed through in-lab testing.
Our deﬁnition of “background" trafﬁc is based on ﬁve main pro-
cess states deﬁned by Android [6]: foreground, where the process
is responsible for the main UI; visible, where the process is respon-
sible for a secondary UI element; perceptible, where a process not
visible to the user may still affect the user experience (e.g. playing
music); service, where a background process should not be termi-
nated if possible; and background, where the OS will kill the app if
system memory is low. We summarize the cellular energy in each
of these ﬁve states for twelve data- or energy-hungry apps in Fig-
ure 3. We refer to the ﬁrst two categories as “foreground" processes
and the last three as “background" processes for the remainder of
the paper. Note that for all but three of these apps, background en-
ergy of some sort contributes more than half of the overall network
energy consumed by the app. Across all apps, 84% of cellular net-
work energy is consumed in a background state. This included only
8% of energy consumed by “perceptible trafﬁc", as only a few users
used streaming services and it is apparent from Figure 3 that not all
apps made use of this feature when expected. 32% was consumed
by “service" trafﬁc.
We focus on two main categories of background transfers. In §4.1,
we examine background trafﬁc that occurs when an app switches
from the foreground to the background. In §4.2 we investigate traf-
ﬁc initiated automatically in the background, such as that for peri-
odic updates, push notiﬁcations, or music streaming. We supple-
ment our longitudinal traces with in-lab measurements to validate
our ﬁndings and determine the context and purpose of the trafﬁc in
our traces.
4.1 Foreground Trafﬁc not Terminated
While it is expected that some apps will transmit data in the back-
ground, such as when checking email, updating a social networking
app or streaming music, other apps such as browsers are expected to
mainly transmit data when the app is in the foreground. However,
we ﬁnd some such apps appear to inadvertently transmit data in
the background. As shown in Figure 3, about 30% of the Chrome
browser’s network energy is consumed while the app is running
in the background. To understand why, we examine a representa-
tive trace from the user study dataset in Figure 4. We have high-
lighted the time period after Chrome switches to the background in
grey. During this time packets continue to be sent for several min-
utes: note that some websites also generate periodic background
requests.
To validate our hypothesis that Chrome allows web pages to con-
tinue sending periodic trafﬁc after the app is minimized, we ﬁrst
created a custom web page that only sends XMLHttpRequest asyn-
chronously to a server every second. We found that the Chrome app
allows this web page to transfer data when tabs are not selected and
thus invisible to the user; when the screen is off; and even when
the app has been sent to the background. To further conﬁrm this
problem exists in the wild, we also opened several web pages, min-
imized Chrome, and recorded the resulting network traces. In gen-
eral, any web page which automatically refreshes content has this
problem, including some ad and analytics content. In one partic-
Figure 3: Fraction of energy in each foreground/background
state, based on process codes assigned by the Android operating
system.
ments gathered with a Monsoon power monitor to compute radio
energy consumption2.
We summarize the top energy and data consumers in Figure 2.
Note the top energy consumers and the top data consumers are
not necessarily the same. For example, the default email app con-
sumes network energy disproportionate to its data usage, whereas