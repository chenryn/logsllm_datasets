原文 by MayIKissYou  
## 0x01 HTML中嵌入FLASH
在HTML中嵌入FLASH的时候在IE和非IE浏览器下嵌入的方式有所不同，可以使用embed 标签和object 标签，使用如下的代码进行嵌入：  
IE下嵌入  
``` html
```
非IE下嵌入  
``` html
```
可以直接浏览器查看swf 源码 view-source&#58;http://183.60.83.233/ZeroClipboard.swf ，可以看到是CWS开头的一段乱码，即编译好的 action script 2/3 代码。  
在插入Flash的过程中有两个重要的参数，allowScriptAccess 和 allowNetworking 两个参数：  
allowScriptAccess：控制html页面与Flash页面的通讯：  
always：html和Flash页面的通讯不做任何的限制；  
samedomain：html和Flash同域的时候可以做通讯【这个值是默认值】；  
never：html和Flash禁止通讯。  
allowNetworking：控制Flash与外部的网络通讯：  
all：Flash所有的网络API通讯接口都可用；  
internal：navigateToURL，fscommand，ExternalInterface.call不可用；  
none：所有的网络API不可用。  
以chrome浏览器为例来验证以上参数，首先在本地搭建环境，并且新建一个Flash文件，Flash文件包括的内容主要是使用  ExternalInterface.call 执行一个js语句，弹出当前域的域名。  
1）：插入本地的Flash文件。  
```  html
```
运行结果：  
![flash1](../pictures/flash1.png)  
2）：插入本地的Flash，将allowScriptAccess参数改为samedomain。  
``` html
```
运行结果：  
![flash1](../pictures/flash1.png)  
Html界面与Flash属于同域，因此能够弹出。  
3）：插入本地Flash，将allowScriptAccess改为never。  
``` html
```
运行结果没有弹出。  
4）：插入远程Flash，将allowScriptAccess改为always。  
``` html
```
运行结果：  
![flash1](../pictures/flash1.png)
注意这里弹出的域为当前html的域名，非Flash的域。      
但如果用 iframe 来嵌入 flash 的话，运行你会发现，弹出的是新浪域的cookie。  
``` html
```
5）：插入远程Flash，将allowScriptAccess改为samedomain  
``` html
```
运行结果没有弹出，因为Flash的域不和html在同一域内。  
6）：插入远程Flash，将allowScriptAccess改为never  
``` html
```
运行结果没有弹出，由于禁止了与html界面通讯。  
7）：将allowScriptAccess置为always，将allowNetworking置为internal  
``` html
```
运行结果没有弹出，allowNetworking的参数置为internal，禁止了接口ExternalInterface.all。  
## 0x02 常见Flash xss分类总结Flash缺陷参数-getURL  
Flash提供相关的函数，可以执行js代码，getURL【AS2中支持】，navigateToURL【AS3中支持】，ExternalInterface.call。  
本着学习的原则本地搭建实践了下： 本地新建了个Flash，Flash调用外部资源xml文件。 Flash代码：  
``` actionScript
var root_xml:XML = new XML();
root_xml.ignoreWhite = true;
root_xml.onLoad = function(success){
    if(success){
        getURL(root_xml.childNodes[0].childNodes[0].childNodes[0].nodeValue)
    }else{
        getURL("javascript:alert('fail')")
    }
}
root_xml.load(_root.url);
```
xml文件：  
``` xml
    javascript:alert('xss')
```
运行结果：  
![flash2](../pictures/flash2.png)  
PS.此类问题一般可以使用google搜索xml文件被swf 调用的情况，传入的内容如果没做过滤，很可能出现此类问题。  
如果我们的 a.xml 是放在 A 站点，则需要在 A 站点根目录下的 crossdomain.xml 配置一下 allow-access-from 选项。  
### Flash缺陷参数-ExternalInterface.call(参数一)  
ExternalInterface.call 同样是一个Flash提供的可以执行js的接口函数， ExternalInterface.call函数有两个参数，形如  ExternalInterface.call("函数名","参数1")。  
Flash最后执行的JS代码如下：  
`try { __Flash__toXML(函数名("参数1")) ; } catch (e) { ""; }`  
此段先考虑参数1，即函数名。  
本着学习的原则，本地搭建实践了下： Flash文件：  
``` actionScript
var a:String = root.loaderInfo.parameters.func
if(ExternalInterface.available){
    ExternalInterface.call(a)
} else {
    trace(100)
}
stop()
```
从外部获取参数func，使用ExternalInterface.call接收第一个参数，执行。  
对比：  
`try { __Flash__toXML(函数名("参数1")) ; } catch (e) { ""; }`  
创建url：  
`http://192.168.4.70/ExternalInterface_first.swf?func=alert(1))}catch(e){alert(100)}//`  
这样实际执行的js代码为：  
``` 
try { __Flash__toXML(alert(1))}catch(e){alert(100)}// ("参数1")) ; } catch (e) { ""; }`   
http://192.168.4.70/ExternalInterface_first.swf?func=a1lert(1))}catch(e){alert(100)}//`  
try { __Flash__toXML(a1lert(1))}catch(e){alert(100)}// ("参数1")) ; } catch (e) { ""; }`  
```
预期结果应该是第一个url执行之后弹出数字1，第二个url执行之后弹出数字100。  
访问 `http://192.168.4.70/ExternalInterface_first.swf?func=alert(1))}catch(e){alert(100)}//`  
![flash3](../pictures/flash3.png)  
访问 `http://192.168.4.70/ExternalInterface_first.swf?func=a1lert(1))}catch(e){alert(100)}//`  
![flash4](../pictures/flash4.png)  