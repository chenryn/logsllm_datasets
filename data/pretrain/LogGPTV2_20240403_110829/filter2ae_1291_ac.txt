攻击的核心策略是将受害代码中的间接分支作为目标，这些间接分支从内存中加载目标地址，并清除包含该目标地址的缓存行至主内存。当CPU遇到这个间接分支时，它无法立即得知跳转的确切目的地。直到相应的缓存行重新加载回CPU（这一过程通常需要几百个周期），CPU才能计算出真正的目标地址。因此，在这超过100个周期的时间窗口内，CPU会基于分支预测机制推测性地执行指令。

## Haswell架构下的分支预测内部机制
尽管英特尔已经公开了一些关于其处理器分支预测机制的信息，但为了使这种攻击有效运行，仍需进一步实验来明确更多细节。本节重点介绍通过在Intel Haswell Xeon CPU上进行实验所发现的分支预测器内部结构特征。Haswell架构似乎采用了多种不同的分支预测技术：
- **通用分支预测器**：为每个源地址存储单一的目标地址，适用于绝对和相对跳转等。
- **专用间接调用预测器**：能够为每个源地址保存多个目标地址，专用于处理间接调用。
- **返回预测器**：根据英特尔优化手册描述的存在，但我们尚未深入研究其具体运作方式及其潜在应用价值，特别是是否可用于可靠地暴露部分虚拟机的调用栈信息。

### 通用预测器详解
先前的研究表明，通用分支预测器仅依据源指令最后一个字节地址的低31位来进行预测。例如，如果BTB中存在从`0x4141.0004.1000`到`0x4141.0004.5123`的条目，则对于来自`0x4242.0004.1000`的跳转也会使用相同的目标地址`0x4242.0004.5123`。这意味着预测器并不存储完整的绝对地址。在查找BTB之前，会先对源地址的低位进行XOR折叠操作，使得某些特定模式下不同源地址之间产生混淆。

### 间接调用预测器
间接调用预测器的BTB查询输入包括源指令地址的低12位及分支历史缓冲区的状态。当间接调用预测器无法解析分支时，将由通用预测器接管。分支历史缓冲区记录了最近29个已执行分支的相关信息，有助于提高具有多个可能目标的间接调用预测准确性。更新此缓冲区状态的方法涉及一系列位移与异或运算。此外，了解BHB的行为不仅有助于精确触发间接调用预测器内的冲突，还可能允许攻击者在超级调用后直接控制管理程序，进而泄露敏感信息如管理程序加载地址的部分比特位。

### 反向工程分支预测器
我们通过构建用户空间测试案例来逆向分析Haswell分支预测器的具体实现细节。基于超线程间共享分支预测状态的假设，我们开发了一个双进程应用程序，其中一个进程尝试执行分支注入，而另一个则测量成功频率。经过一系列实验调整后，我们得出了关于分支历史缓冲区大小、内容更新逻辑等方面的初步结论。