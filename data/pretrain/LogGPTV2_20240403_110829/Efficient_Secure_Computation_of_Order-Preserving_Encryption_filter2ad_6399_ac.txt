(6)
5 PROTOCOL FOR OBLIVIOUS OPE
In this section we present our scheme ΠOOPE that consists of an
initialization step and a computation step. The initialization step
generates the server state and is run completely by the Data Owner.
The server state and the ciphertexts are sent to the CSP afterward.
5.1 Order-Preserving Encoding
We instantiate the Ope.Encode function of Definition 4.2 with
mOPE2.Encode, which is now presented in more details. The client
chooses a range{0, . . . , M} for the order and maintains for each
plaintext x a pair∐︀x, ỹ︀ in the encoding state Sc (stored at the client),
Anselme Tueno and Florian Kerschbaum
⎜32⨆︁
0
1
⎜25⨆︁
(a) OPE-tree𝒯
y
4
7
11
14
21
0
⎜10⨆︁
⎜20⨆︁
⎜x⨆︁
⎜10⨆︁
⎜20⨆︁
⎜25⨆︁
⎜32⨆︁
⎜69⨆︁
1
⎜69⨆︁
∐︀x, ỹ︀
∐︀32, 14̃︀
∐︀20, 7̃︀
∐︀25, 11̃︀
∐︀69, 21̃︀
∐︀10, 4̃︀
(b) OPE-table T
(c) Data Owner State
Figure 3: Example initialization
new plaintext works as follows:
where y∈{0, . . . , M} is the OPE encoding of x. The encoding of a
● find∐︀xi , yĩ︀,∐︀xi+1, yi+1̃︀∈ Sc with xi≤ x 1 then compute y= yi+[︂ yi+1−yi
⌉︂.
2
For the new plaintext x the client sends only the OPE encoding y
to the database stored at the server.
Remark 5.1. The reason of using mOPE2.Encode instead of
mOPE1.Encode is that after our OOPE protocol, the DA will re-
ceive the OPE encoding. Its binary representation, when using
mOPE1.Encode, reveals the corresponding path in the tree, allow-
ing the DA to infer additional information. In contrast, mOPE2
allows the DO to choose not just the length of the OPE encoding,
but also the order range like 0, . . . , M. If log2 M is larger than the
needed length of the OPE encoding and M is not a power of two,
then for a ciphertext∐︀⎜x⨆︁, ỹ︀, y does not reveal the position of⎜x⨆︁
h= 3, the order of 25 (i.e. 011 = 3) reveals the corresponding path.
However, with mOPE2 and M= 28, 25 has order 11 = 1011. A second
in the tree. In Figure 3a for instance, when applying mOPE1 with
and more important reason is that in Section 7, we extend OOPE to
the case of mOPE3, which is more secure and builds on mOPE2.
5.2 Initialization
runs Ope.Encode from Definition 4.2 (using mOPE2) and sends the
generated OPE-table to the CSP.
Let D={x1, . . . , xn} be the unordered DO’s dataset and h= log2 n.
The DO chooses a range 0, . . . , M such that log2 M> h (Remark 5.1),
For example, if D={10, 20, 25, 32, 69} is the data set, M= 28 and
ecuting algorithm Ope.Encode are∐︀⎜32⨆︁, 14̃︀,∐︀⎜20⨆︁, 7̃︀,∐︀⎜25⨆︁, 11̃︀,
∐︀⎜69⨆︁, 21̃︀,∐︀⎜10⨆︁, 4̃︀. The OPE-tree, the OPE-table and the DO state
the insertion order is 32, 20, 25, 69, 10. Then the ciphertexts after ex-
of this example initialization are depicted in Figure 3.
Efficient Secure Computation of Order-Preserving Encryption
Figure 4: Overview of the protocol
5.3 Algorithms
In the following, we present our main protocol that repeatedly
makes calls to a sub-protocol (Protocol 6). Both protocols run
between the three parties. During the protocol’s execution the
CSP runs Algorithm 7 to traverse the tree and Algorithm 8 to com-
pute the order (as in mOPE2). We will deal with mOPE3 in Section
7. An overview of the protocol is illustrated in Figure 4.
Our OOPE Protocol. Protocol 5 is executed between the three
parties. First the CSP retrieves the root of the tree and sets it as
current node. Then the protocol loops h(= log2 n) times. In each
step of the loop the CSP increments the counter and the parties run
an oblivious comparison protocol (Protocol 6) whose result enables
the CSP to traverse the tree (Algorithm 7). If the inputs are equal
or the next node is empty then the traversal stops. However, the
CSP uses the current node as input to the next comparison until the
counter reaches the value h. After the loop the result is either the
order of the current node in case of equality or it is computed by the
CSP using Algorithm 8. In the last step, the DA computes⎜x⨆︁ using
DO’s public key pk and sends it to the CSP as argued in Remark
4.7. Alternatively, the DA could generate an unique identifier (UID)
for each element that is being inserted and send this UID instead.
So if the corresponding node is later involved in a comparison step,
the result is computed by the DA alone.
comparison GC is run between the DA and DO and they are not
Oblivious Comparison Protocol. Protocol 6 runs between the
three parties as well, with input(⎜x⨆︁, x, sk) for the CSP, the DA and
the DO respectively. It outputs two bits bд=(i f x> x then 1 else 0)
and be = (i f x ≠ x then 1 else 0) to the server. As the actual
′
′
a),(bo, b
allowed to learn the result, they use masking bits(ba, b
o)
First the CSP randomizes its input, with a random integer r ∈
{0, . . . , 2l+k}4, to⎜x+ r⨆︁←⎜x⨆︁⋅⎜r⨆︁, by first computing⎜r⨆︁ with
k is the security parameter that determines the statistical leakage [14], e.g., k= 40.
in the GC protocol.
4
ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
Functionality : OOPE(S, x, sk)
Input (CSP, DA, DO):(S, x, sk)
Output (CSP, DA, DO):(∐︀⎜x⨆︁, ỹ︀ , y,∅)
1: CSP : retrieve root⎜xroot⨆︁ of𝒯
2: CSP : let⎜x⨆︁←⎜xroot⨆︁
3: CSP : let count← 0
(∐︁be , bд̃︁ ,∅,∅)← Compare(⎜x⨆︁, x, sk)
CSP : if be≠ 0 then
⎜xnext⨆︁← Traverse(bд,⎜x⨆︁)
if⎜xnext⨆︁≠ NIL then
let⎜x⨆︁←⎜xnext⨆︁
CSP : let count← count+ 1
retrieve∐︀⎜x⨆︁, ỹ︀ and let y← y
y← Encode(bд,⎜x⨆︁)
13: until count= h
14: CSP : if be= 0 then
4: repeat
5:
6:
7:
8:
9:
10:
11:
12:
CSP :
CSP :
CSP :
CSP :
CSP : end if
15: CSP :
16: CSP : else
17: CSP :
18: CSP : end if
end if
19: CSP→ DA: send y
20: DA→ CSP: send⎜x⨆︁
▷ meaning x≠ x
▷ meaning x= x
Protocol 5: Oblivious OPE Protocol ΠOOPE
DO’s public key, such that the DO will not be able to identify the
as described in Section 6. For simplicity, the garbled circuit is imple-
mented in Protocol 6 as ideal functionality. In reality the DO gener-
ates the garbled circuit and the DA evaluates it. The DA and the DO
position in the tree, and it sends⎜x+ r⨆︁ to the DO and r to the
′
o, x+ r) and the DA with input
DA. Then the DO with input(bo, b
′
(ba, b
a, x+ r) engage in a garbled circuit protocol for comparison
′
′
a⊕b
o) as output of this computation and
receive(be⊕ba⊕bo, bд⊕b
′
′
′
′
resp. send(ba, b
a, be⊕bo, bд⊕b
o) and(bo, b
a) to
o, be⊕ba, bд⊕b
the CSP. Finally the CSP evaluates Equation 7 and outputs∐︁be , bд̃︁.
)︀⌉︀⌉︀⌋︀⌉︀⌉︀]︀be
= be⊕ bo⊕ bo= be⊕ ba⊕ ba
′
′
′
′
bд = bд⊕ b
o⊕ b
o= bд⊕ b
a⊕ b
This will be used to traverse the OPE-tree.
(7)
a
Tree Traversal Algorithm. The tree traversal (Algorithm 7)
runs only at the CSP. Depending on the output of the oblivious
comparison the CSP either goes to the left (line 2) or to the the
right (line 4). If the comparison step returns equality there is no
need to traverse the current node and the protocol returns the cor-
responding ciphertext.
Encoding Algorithm. Algorithm 8 runs at the CSP as well and
is called only if the tree traversal (Algorithm 7) has to stop. Then
the compared values are strictly ordered and depending on that
the algorithm finds the closest element to the current node in the
OPE-table. This element is either the predecessor (Pred) if DA’s
input is smaller (line 4) or the successor (Succ) if DA’s input is
ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
Input (CSP, DA, DO):(⎜x⨆︁, x, sk)
Output (CSP, DA, DO):(∐︁be , bд̃︁ ,∅,∅)
Functionality : Compare(⎜x⨆︁, x, sk)
1: CSP: choose(l+ k)-bits random r and compute⎜x+ r⨆︁
2: CSP→ DO: send⎜x+ r⨆︁
3: CSP→ DA: send r
′
4: DO: decrypt⎜x+ r⨆︁ and choose masking bits bo, b
′
5: DA: compute x+ r and choose masking bits ba, b
′
6: DO→ GC: send(bo, b
o, x+ r)
′
7: DA→ GC: send(ba, b
a, x+ r)
′
′
o)
a⊕ b
8: GC↔ DA: send(be⊕ ba⊕ bo, bд⊕ b
′
′
a⊕ b
9: GC↔ DO: send(be⊕ ba⊕ bo, bд⊕ b
o)
′
′
10: DA→ CSP: send(ba, b
o)
a, be⊕ bo, bд⊕ b
′
′
11: DO→ CSP: send(bo, b
o, be⊕ ba, bд⊕ b
a)
12: CSP: compute be= be⊕ bo⊕ bo= be⊕ ba⊕ ba
′
′
′
′
o= bд⊕ b
13: CSP: compute bд= bд⊕ b
a⊕ b
o⊕ b
14: CSP: output∐︁be , bд̃︁
a
a
o
6:
4:
2:
else
Protocol 6: Oblivious Comparison Protocol
function Traverse(bд,⎜x⨆︁)
if bд= 0 then
⎜xnext⨆︁← LeftChildNode(⎜x⨆︁)
⎜xnext⨆︁← RightChildNode(⎜x⨆︁)
return⎜xnext⨆︁
▷ traverse to left
▷ traverse to right
Algorithm 7: Tree Traversal at Node⎜x⨆︁ (run by CSP)
function Encode(bд,⎜x⨆︁)
retrieve∐︀⎜x⨆︁, ỹ︀ from the OPE-table
if bд= 0 then
′̃︁← Pred(∐︀⎜x⨆︁, ỹ︀)
′⨆︁, y
∐︁⎜x
′ and yr ← y
let yl ← y
′′⨆︁, y
′′̃︁← Succ(∐︀⎜x⨆︁, ỹ︀)
else∐︁⎜x
′′
let yl ← y and yr ← y
if yr− yl = 1 then
y← yl+]︂ yr−yl2
{︂
′< y
▷ y
′′
▷ y< y
rebalance the OPE-tree
10:
2:
4:
6:
8:
12:
return y
Algorithm 8: Encryption at Node⎜x⨆︁ (run by CSP)
larger (line 7). Then if necessary (line 9) re-balance the tree and
compute the ciphertext as in line 11.
5.4 Optimization
One can reduce the number h of homomorphic decryptions by using
plaintexts packing [40]. Let⎜x⨆︁ be a node at the level 2i, 0≤ i≤ h2 ,