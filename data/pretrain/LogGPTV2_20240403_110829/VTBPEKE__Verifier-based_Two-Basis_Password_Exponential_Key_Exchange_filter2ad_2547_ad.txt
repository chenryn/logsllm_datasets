(0, 0, C, S, g, X, Y, Z, R(cid:48), s, ε, σ) or (1, 1, R) with random answers, either ek , sk , or R(cid:48) R← {0, 1}(cid:96).
For keeping consistent, one stores ((0, 1, C, S, g, X, Y, Z, R(cid:48), s, ε), ek ), ((0, 0, C, S, g, X, Y, Z, R(cid:48), s, ε, σ), sk )
or ((1, 1, R), R(cid:48)) in Λ that is used to give the same answer if the same query is asked twice.
One also simulates the random oracle Hp on new queries (s, pw ): it outputs a random
P R← Zp. One then stores ((s, pw ),P) in Λp that is used to give the same answer if the
same query is asked twice. This is a perfect simulation of the random oracles H and Hp:
AdvG0(A) ≤ AdvG1(A).
We formally restrict to ¯Λ the set of the truncated tuples (C, S, X, Y, s) corresponding to
the above tuples in Λ that satisfy Z = DHg(X, Y ), with g = U · V, for any veriﬁer V of
any user, or g = U · V Hp(s,pw ), for any password of any user. In addition to the initial salts
associated to the users, for any salt s sent for a client C (by the adversary), one computes
PC = Hp(s, pw C) and g = U · V PC to build this list.
Game G2: Execute-queries between compatible users, before corruption.
We ﬁrst deal with passive attacks (Execute-queries), in which we know from the beginning
whether the players are compatible or not. In this game, we modify the way Execute-queries
between compatible users, before corruption, are answered. We make Ci and Sj send the
correct salt s, random group elements X and Y , but a correct proof of knowledge of PC,
with R(cid:48) = H(11(cid:107)R), ε, and ρ encrypted under a random key ek R← {0, 1}(cid:96), into σ. One also
randomly draws sk R← {0, 1}(cid:96), and stores (C, S, X, Y, s) in Λ1.
Unless (∗, C, S, g, X, Y, Z, s,∗), for the appropriate g and Z, has been asked to H, this
is indistinguishable from the previous game. We thus set the event Bad1H to true (and
let the adversary win) as soon as ¯Λ ∩ Λ1 (cid:54)= ∅. Unless Bad1H = true, the two games are
indistinguishable: AdvG1(A) ≤ AdvG2(A) + Pr[Bad1H].
Game G3: We can now replace R(cid:48) R← {0, 1}(cid:96) and σ by a random ciphertext. Under the indis-
tinguishability of the encryption scheme, the two games are indistinguishable: AdvG2(A) ≤
AdvG3(A) + qcomp
· AdvindE (A).
e
Game G4: Execute-queries between incompatible users, before corruption.
Execute-queries between incompatible users, before corruption, are answered the same way
as above, but with independent sessions keys. Unless the same Bad1H = true, the two
games are indistinguishable under the indistinguishability of the encryption scheme (E,D):
AdvG3(A) ≤ AdvG4(A) + qincomp
· AdvindE (A). As a conclusion, since the initial game, we have
e
AdvG0(A) ≤ AdvG4(A) + qe · AdvindE (A) + Pr[Bad1H].
We will now modify the Send-queries, where Send0 is the start-query for a client to initiate
an execution of the protocol, followed by Send1, Send2, and Send3.
Game G5: Send2-queries, before corruption.
We now modify the behavior of the client before corruption. To a Send2-query (s, ε, Y ), one
selects X R← G and keys ek , sk R← {0, 1}(cid:96). The simulator also stores (C, S, X, Y, s) in Λ2.
As above, an inconsistency can be detected if an H-query has been asked with the appro-
priate g and Z. But this time Y has been chosen by the adversary, without knowing the
real password/veriﬁer (before corruption). More generally, we set the event Bad2H to true
(and let the adversary win) as soon as ¯Λ ∩ Λ2 (cid:54)= ∅. Unless Bad2H = true, the two games are
indistinguishable: AdvG4(A) ≤ AdvG5(A) + Pr[Bad2H].
Game G6:
In addition, we replace σ by a random ciphertext, which is indistinguishable since
ek is random:
AdvG5(A) ≤ AdvG6(A) + qC · AdvindE (A).
Game G7: Send3-queries, before corruption.
We now modify the behavior of the server before corruption. To a Send3-query (X, σ), one
selects a random key sk R← {0, 1}(cid:96), and stores (C, S, X, Y, s) in Λ2.
Game G8: H-queries.
13
As above, an inconsistency can be detected if an H-query has been asked with the appropri-
ate g and Z. But with X chosen by the adversary, without knowing the real password/veriﬁer
(before corruption), which is already covered by the event Bad2H that makes the adversary
win: AdvG7(A) = AdvG6(A).
We enhance the simulation of the H-queries with a possible ⊥ instead of Z, which is assumed
to stand for Z = DHg(X, Y ). Let us focus on the (g, X, Y, Z) part in the input and the output
y:
– for a new query (from the simulator) involving (g, X, Y,⊥), one looks for any (Z, y) for
which Z would complete the query in Λ and checks whether DDH(g, X, Y, Z) is true or
not. If this is true for a pair (Z, y), then the answer is y, otherwise a random y R← {0, 1}(cid:96)
is drawn and output. The query, completed with y, is stored in Λ;
– for a new query involving (g, X, Y, Z) such that completed query-answer ((g, X, Y,⊥), y) ∈
Λ, one checks whether DDH(g, X, Y, Z) is true or not. If this is true, then the answer is
y (⊥ is replaced by Z in the list), otherwise a random y R← {0, 1}(cid:96) is drawn and output,
and the query, completed with y, is stored in Λ.
Of course, as before, one gives the same answer if the same query is asked twice. This is a
perfect simulation of the random oracle H, but with access to a DDH oracle which, on input
(g, X, Y, Z), checks whether Z = DHg(X, Y ) or not. The number of DDH-oracle-queries will
be bounded by qH: AdvG8(A) = AdvG7(A).
Game G9: Send3-queries, after corruption.
We now deal with the corruptions, and the answer to a Send3-query (X, σ) but for a Y
generated before the corruption, and so the adversary might possibly be correct for the
X and g: the simulator asks for the appropriate (g, X, Y,⊥)-query to H, to get sk , with
g = U · VS,C, using the above simulation of the random oracle H. Thanks to the enhanced
simulation of the random oracle, one will get the same answers as the adversary asked for
the correct queries, with the correct Z: AdvG9(A) = AdvG8(A).
Game G10: Send1-queries, before corruption.
We can complete the behavior of the server before corruption, since Z is not needed any-
more to answer Send3-queries. To a Send1-query (A, R(cid:48)), one selects Y R← G: AdvG10(A) =
AdvG9(A).
Game G11: In the above game, one can remark that the passwords/veriﬁers are not needed for
the simulation of the honest players, unless they have been corrupted, but just required to
build the list ¯Λ, and to evaluate the events Bad1H and Bad2H. This is enough to evaluate
them at the very end only. However, the server must have generated a salt for each client,
from the beginning.
So, in the ﬁnal game, the passwords/veriﬁers are not known at the beginning, but just at
the corruption time or at the very end only:
– Execute(Ci, Sj)-queries: the simulator randomly selects X, Y R← G, and stores (C, S, X, Y, s)
R← {0, 1}(cid:96);
in Λ1. If the users are compatible, they are given the same random key sk = sk C =
R← {0, 1}(cid:96). If they are incompatible, they are given two independent random keys
sk S
sk C, sk S
randomly selects α R← Z∗
– Send0(Ci)-queries (which asks C to initiate an execution of the protocol): the simulator
– Send1(C, R(cid:48))-queries: before a corruption, the simulator selects the appropriate salt s
and a random challenge ε, but randomly chooses Y R← G. Otherwise it randomly selects
y R← Z∗
p, sets R ← V α and R(cid:48) ← H(11(cid:107)R), and outputs (C, R(cid:48));
p and sets Y ← gy, for g ← U · VS,C;
– Send2(s, ε, Y )-queries: before a corruption, the simulator randomly selects X R← G, the
keys ek , sk R← {0, 1}(cid:96), and the ciphertext σ, and stores the tuple (C, S, X, Y, s) in Λ2,
otherwise it randomly selects x R← Z∗
p, sets X ← gx and Z ← Y x, for g ← U · V PC with
PC ← H(s, pw C), and asks for ek and sk to H and answers σ correctly;
14
R← {0, 1}(cid:96);
H on the tuple (g, X, Y,⊥), for g ← U · VS,C;
(g, X, Y, Z), where Z ← X y.
– Send3(X, σ)-queries: thee cases appear
• before corruption, one chooses sk C
• after corruption, but Y has been generated before corruption, one asks for sk from
• after corruption, and Y = gy for g = U · VS,C, one asks for sk from H on the tuple
– Corrupt(C) and Corrupt(S, C,⊥)-queries: if this is the ﬁrst corruption query involving
C, one ﬁrst chooses a random password pw (to be pw C) and deﬁnes PC = H(s, pw )
from the already chosen salt s, and sets VS,C = V PC . One then checks for events Bad1H
and Bad2H, for sessions involving C;
– Corrupt(S, C, (s,V))-query: it sets VS,C ← V as well as sS,C ← s;
– Test-queries are answered using the deﬁned session key, and according to the bit b.
In case of collision between the X’s or the Y (cid:48) chosen by the simulator (either in Execute-
answer or a Send-answer), and a previously sent value (either by the simulator or the ad-
versary), we set Coll to true (and let the adversary win). Unless a collision happens, thanks
to the deﬁnition of the session ids (the entire transcripts), no instance of a player can have
more than one partner (with the same session id). At the very end, or at the time of a
corruption, the passwords are drawn at random, and the pre-hashes P and veriﬁers V are
computed. As a consequence,
AdvG10(A) ≤ AdvG11(A) + Pr[Coll].
In this last game, the way the session keys are deﬁned is exactly the same as in the random
and the real cases (chosen at random before corruption). Then the probability for b(cid:48) = b is
exactly one half:
AdvG0(A) ≤ Pr[Bad1H] + Pr[Bad2H] + Pr[Coll]
+ (qe + qC) · AdvindE (A).
Collisions. The probability the event Coll is upper-bounded by (qe + qs)2/p, where qe is the
number of Execute-queries and qs is the number of Send-queries.
Event Bad1H. The event Bad1H means that for some tuple (g = U · V P , X = gx, Y = gy, Z),
we have Z = gxy. Let us be given a Diﬃe-Hellman instance (u, v = ua, w = yb). We set
U ← u, V ← uz for a random z, and for any random element X, Y , one chooses random x, y
and sets X ← vx and Y ← wy: the basis is g = u1+Pz, while X = uax = gax/(1+Pz) and
Y = uby = gby/(1+Pz). Therefore, Z = gabxy/(1+Pz)2 = (uab)xy/(1+Pz). We thus have solved the
CDH problem with Z(1+Pz)/xy, which can be checked with qH additional DDH-oracle queries:
Pr[Bad1H] ≤ Succ2qH−gdh(t).
Event Bad2H. The event Bad2H cannot be proven to be negligible, since it can at least happen
when the adversary guesses correctly the password. We have to show this cannot happen more
often than once per active session. Let us assume that the adversary can make a given tuple
(C, S, g, X, Y, Z, s) raise the event Bad2H for two distinct choices pw 1 (cid:54)= pw 2 of the password
and so two distinct pre-hashs P1 (cid:54)= P2 with the same salt s (unless there is a collision on Hp).
Let us be given an instance (u, v = ua, w = ub) for which we want to get R, R1/a, R1/b (break
the SDH problem). We set U ← (vP2/wP1)1/P2−P1 and V ← (v/U )1/P1. With this deﬁnition,
one can note that U · V P1 = v and U · V P2 = w. For a random choice of X or Y in G, one sets
it to ux for a random scalar x. Let us assume this is X = ux (but by symmetry it would be the
same with Y ). If (g, X, Y, Z, s) would raise the event Bad2H for both P1 and P2, there are Z1
and Z2 in the list Λ such that Z1 = DHv(X, Y ) and Z2 = DHw(X, Y ), which can be checked
2 = Y 1/b. With R ← Y , we have
with DDH-oracle queries. For X = ux: Z1/x
Z1/x
1 = R1/a and Z1/x
1 = Y 1/a and Z1/x
2 = R1/b.
Scheme
Communication
(Both Sides)
1G / 1G
EKE [12]
1G / 1G
SPAKE [6]
1G / 1G
SPAKE2 [6]
1G / 1G
SPEKE [33]
2G / 2G
SAE [32]
3G / 3G
SRP [50]
GL-SPOKE [2] 4G / 3G
GK-SOPKE [2] 2G / 4G
1G / 1G
TBPEKE
15
Computation
(Both Sides)
PAKE
Forward Security Assumptions
Secrecy Model
Limitations
2E / 2E
Yes
2E+2sE / 2E+2sE No
2E+2sE / 2E+2sE No
No
2E / 2E
3E / 3E
No
2E / 3E
10E /10E
Yes
8E / 9E
Yes
2E+1sE / 2E+1sE Yes
Veriﬁer-based PAKE
ICM
ROM
ROM
ROM
ROM
CDH [19]
CDH
CDH
CDH
CDH [42]
No proof
Standard DDH
Standard DDH
ROM
GSDH
in Z∗
in Z∗
in Z∗
p only
p only