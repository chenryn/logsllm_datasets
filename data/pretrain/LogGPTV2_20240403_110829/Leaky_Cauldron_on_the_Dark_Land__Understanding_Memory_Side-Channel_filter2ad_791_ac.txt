magnitude [43]. As a result, such an attack could be detected by
looking at its extremely high frequency of page faults (i.e., AEXs)
and anomalously low performance observed from the remote. All
existing solutions, except those requiring hardware changes, are
either leveraging interrupts or trying to remove the page trace of
a program (e.g., putting all the code on one page). Little has been
done to question whether such defense is sufficient.
To show that excessive AEXs are not the necessary condition to
conducting memory side-channel attack, in this section, we elabo-
rate sneaky page monitoring (SPM), a new paging attack that can
achieve comparable effectiveness with much less frequent AEXs.
4.1 The Three SPM Attacks (Vector 4)
In this section, we introduce three types of SPM attacks, which
monitor the page table entries and exploit different techniques to
flush TLBs.
B-SPM: Accessed Flags Monitoring. The SPM attack manipu-
lates and monitors the accessed flags on the pages of an enclave
process to identify its execution trace. Specifically, we run a system-
level attack process outside an enclave to repeatedly inspect each
page table entry’s accessed flag, record when it is set (from 0 to 1)
and reset it once this happens. The page-access trace recovered in
this way is a sequence of page sets, each of which is a group of pages
visited (with their accessed flags set to 1) between two consecutive
inspections. This attack is lightweight since it does not need any
AEX to observe the pages first time when they are visited.
However, as mentioned earlier, after a virtual address is trans-
lated, its page number is automatically added to a TLB. As a result,
the accessed flag of that page will not be set again when the page is
visited later. To force the processor to access the PTE (and update
the flag), the attacker has to invalidate the TLB entry proactively.
The simplest way to do so is by generating an inter-processor in-
terrupt (IPI) from a different CPU core to trigger a TLB shootdown,
which causes an AEX from the enclave, resulting in flushing of
6
Figure 3: An example of secret-dependent branch leaking
timing information.
all TLB entries of the current PCID. Figure 2 illustrates this attack,
which we call basic SPM or B-SPM.
This B-SPM attack still involves interrupts but is already much
more lightweight than the page-fault attack: TLB shootdowns are
typically less expensive than page faults; more importantly, B-SPM
only triggers interrupts when visiting the same page needs to be
observed again, while the latter needs to trigger an interrupt for
every (new) page access.
In terms of accuracy, the page-fault attack tends to have a finer-
grained observation while B-SPM attack cannot differentiate the
visiting order of two pages that are spotted during the same round
of inspections. However B-SPM attack strives for a balance between
the interrupt rate and attack resolutions.
T-SPM: Timing enhancement. When repeated visits to same
pages become a salient feature for an input, the basic SPM needs to
issue more TLB shootdowns in order to observe the feature, making
the attack observable to the existing protections that detect the
anomalous interrupt rate [15, 38]. Figure 3 illustrates an example, in
which the secret-dependent code resides in the same page, except
that the execution on one condition involves a loop while that on
the other does not, leading to different execution time. In this case,
TLB shootdowns during the execution of the loop are required to
distinguish two branches using page visit traces (i.e. number of
page visits). To reduce the number of the interrupts, we leverage a
timing channel to enhance SPM, making it stealthier. Specifically,
given a code fragment with a unique entry page α and a unique
exit page β, together with multiple input-dependent paths between
the two points on different pages, our timing-enhanced SPM (called
T-SPM) continuously monitors α and β, measuring the execution
time between these two points, and once the accessed flag of β is
found to be set, flushes the TLB and resets the accessed flags for
both PTEs. The timing recorded is then used to infer the input of
the code fragment.
This simple approach avoids all the interrupts between α and
β, but still reveals the possible execution path connecting them.
In the extreme case, when all other code stays on the same page,
as proposed by the prior research [39] to defend against page-
fault attacks, T-SPM can still infer sensitive information when the
operations on them take different time to complete.
HT-SPM: TLB Flushing through HyperThreading. Further we
found that when HyperThreading is turned on for a processor, we
can clear up the TLBs without issuing TLB shootdowns, which
renders all existing interrupt-based protection ineffective. Hyper-
Threading runs two virtual cores on a physical core to handle the
StartCheck PTEs flagsEnclave loaded?PTEs flags set?‐ Record page set‐ Clear PTEs flags‐ TLB shootdownsYesYesYesNoNoNoWait and checkGet enclave base addressEndEnclave Unloaded?condition= true?Path_APath_B1BB0BB1BB2Path_B2BB3pageSession K4:  Secure EnclavesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2426Table 1: Configuration of the testbed, available per logical
core when HyperThreading is enabled.
Table 2: Words distribution in the en_US Hunspell dictio-
nary.
iTLB
dTLB
L2 TLB
iCache
dCache
L2 Cache
L3 Cache
DRAM
Size
64
64
1536
32KB
32KB
256KB
8MB
Size
8GB×2
Sets × Ways
8 × 8
16 × 4
128 × 12
64 × 8
64 × 8
1024 × 4
8192 × 16
Channel × DIMMs × Ranks × Banks × Rows
2 × 1 × 2 × 16 × 215
workloads from two different OS processes. This resource-sharing
is transparent to the OS and therefore does not trigger any inter-
rupt. The processes running on the two virtual cores share some of
the TLBs, which allows the attacker to remove some TLB entries
outside the enclave, without causing any interrupts. As a result,
in the presence of HyperThreading, we can run an attack process
together with an enclave process, to continuously probe the virtual
addresses in conflict with the TLB entries the latter uses, in an
attempt to evict these entries and force the victim process to walk
its page tables. Using this technique, which we call HT-SPM, we
can remove most or even eliminate the interrupts during an attack.
4.2 Evaluation of Effectiveness
Our analysis was performed on an Dell Optiplex 7040 with a Skylake
i7-6700 processor and 4 physical cores, with 16GB memory. The
configuration of the cache and memory hierarchy is shown in
Table 1. It runs Ubuntu 16.04 with kernel version 4.2.8. During
our experiments, we patched the OS when necessary to facilitate
the attacks, as an OS-level adversary would do. We used the latest
Graphene-SGX Library OS [5, 41] compiled using GCC 5.4.0 with
default compiling options to port unmodified libraries.
B-SPM on Hunspell. Hunspell is a popular spell checking tool
used by software packages like Apple’s OS X and Google Chrome.
It stores a dictionary in a hash table, which uses linked lists to link
the words with the same hash values. Each linked list spans across
multiple pages, so searching for a word often generates a unique
page-visit sequence. Prior study [43] shows that by monitoring page
faults, the attacker outside an enclave can fingerprint the dictionary
lookup function inside the enclave, and further determine the word
being checked from the sequence of accessing different data pages
(for storing the dictionary). In our research, we evaluated B-SPM on
Hunspell 1.3.3 and found that the invocation of its spell function
(looking up for one word) can be determined by the access of a
specific page, which can be reliably identified at the inspection
rate (for an attack process running on a separate core) of once
per 184 CPU cycles. For simplicity, our attack process issues a
TLB shootdown once the function invocation is discovered. In the
interrupt, the process inspects the PTEs of pages being monitored
to identify the searched word and resets their accessed flags, and
then monitors the occurrence of the next function invocation. This
approach identifies all the iterative lookups for multiple words.
Like the prior research [43], we also evaluated our attack using
the en_US Hunspell dictionary, as illustrated in Table 2. To compare
with the page-fault attack, we re-implemented it and ran it against
group size
1
2
3
4
5
6
7
8
9
10
> 10
%
Page-fault based
words
51599
7586
2073
568
200
60
35
8
0
0
0
83.05
12.21
3.34
0.91
0.32
0.10
0.06
0.01
0
0
0
%
Accessed-flag based
words
45649
8524
3027
1596
980
810
476
448
306
140
173
73.47
13.72
4.87
2.57
1.58
1.30
0.77
0.72
0.49
0.23
0.28
Table 3: Features used in Freetype experiment.
trigger page
α -β pairs
0x0005B000
0005B000, 0005B000
0005B000, 00065000
0005B000, 0005E000
00065000, 00022000
0005E000, 00018000
the same data-set, whose results are shown in Table 2. As we can see
here, the effectiveness of B-SPM is in line with that of the known
attack: e.g., the percentage of the uniquely-identifiable words (i.e.,
group size 1) is 73.47% in our attack, a little below 83.05% observed in
the page-fault attack; more than 92% of the words are in group size
less than or equal to 3, compared with 98.6% in the page-fault attack.
When it comes to performance, however, B-SPM runs much faster:
for 62,129 word look-ups it slowed down the original program by
a factor of 5.1×, while the existing attack incurred an overhead of
1214.9×. Note that the prior research reports a slowdown of 25.1×
for 39,719 word look-ups over the SGX emulator [43]. In our study,
however, we ran both experiments on the real SGX platform.
T-SPM on FreeType. FreeType is a font library that converts text
content (the input) into images, which has been used by Linux, An-
droid and iOS and other software packages. In our research, we ran
T-SPM on its TrueType font rendering function, as did in the prior
study [43]. The function, TT_load_Glyph, takes a letter’s glyph
as its input to construct its bitmap. The prior study fingerprints
the start and the end of the function, and selects a set of pages
in-between and uses the number of page faults observed on these
pages to determine the letter being rendered. In our research, we uti-
lize a trigger page to identify the execution of the TT_load_Glyph
function and then within the function, select 5 different α-β pairs
along its control-flow graph as features for identifying the 26 al-
phabet and the space between words (see Table 3). Each feature,
the timing between its α and β points, can separate some of these
27 letters from others. Collectively, they form a feature vector over
which we run a Random Forest Classifier (with number of estima-
tors set as 400) to classify an observed execution of TT_load_Glyph
into one of these letters.
We ran our experiment on FreeType 2.5.3 within an enclave
and collected 250 samples of a 1000 character paragraph from the
book The Princess and the Goblin as a training set for the Random
Forest Classifier. Then we tested on a 1000 character paragraph
7
Session K4:  Secure EnclavesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2427Table 4: T-SPM attack on Freetype 2.5.3: for example, we
achieved a precision of 69.90% over a coverage of 100% char-
acters.
coverage
precision
100%
69.90%
88.17%
75.25%
75.62%
80.66%
69.14%
84.45%
57.35%
89.94%
from The Wonderful Wizard of Oz, as is used in the prior study [43].
Based upon the timing vectors observed in the experiments (with