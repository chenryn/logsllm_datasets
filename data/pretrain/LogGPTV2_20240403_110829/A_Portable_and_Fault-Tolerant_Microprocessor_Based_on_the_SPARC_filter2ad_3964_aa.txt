title:A Portable and Fault-Tolerant Microprocessor Based on the SPARC
V8 Architecture
author:Jiri Gaisler
A Portable and Fault-Tolerant Microprocessor Based on the SPARC V8
Architecture
Jiri Gaisler
European Space Agency, 2200 AG Noorwijk, Holland (until 31-12-2000)
Gaisler Research, 411 08 Göteborg, Sweden
PI:EMAIL
Abstract
The architecture and implementation of the LEON-FT
processor is presented. LEON-FT is a fault-tolerant 32-bit
processor based on the SPARC V8 instruction set. The pro-
cessors tolerates transient SEU errors by using techniques
such as TMR registers, on-chip EDAC, parity, pipeline
restart, and forced cache miss. The ﬁrst prototypes were
manufactured on the Atmel ATC35 0.35 µm CMOS process,
and subjected to heavy-ion fault-injection at the Louvain
Cyclotron. The heavy-ion tests showed that all of
the
injected errors (> 100,000) were successfully corrected
without timing or software impact. The device SEU thresh-
old was measured to be below 6 MeV while ion energy-lev-
els of up to 110 MeV were used for error injection.
1. Introduction
In 1997, the European Space Agency (ESA) completed
the development of a 32-bit microprocessor for embedded
space-ﬂight applications, denoted ERC32 [1]. The ERC32
is based on the Cypress CY601 SPARC V7 processor and is
now being used in several space projects, including the con-
trol computers of the International Space Station. To meet
the mission requirements for projects beyond year 2000,
the development of a new and improved processor denoted
LEON was started in 1998. This paper presents the design
goals, architecture, built-in fault-tolerance functions and
initial test results of this processor. The LEON project was
started by ESA under the Douglas Marsh fellowship and
the ESA Technology Research Programme (TRP), and is
now continued by Gaisler Research under ESTEC contract
15102/01/NL/FM.
2. Background
European microprocessors designed for space applica-
tions have typically had three main design drivers; radia-
tion-hardness, performance and development cost. The
objectives have been to within a limited budget, develop a
device that can withstand the space radiation environment
and provide the highest possible performance on the given
semiconductor process. Other aspects, such as software
compatibility, system integration, component cost, design
reuse and future evolution have been less emphasized.
However, the conditions under which on-board computers,
and subsequently processors, are being developed are rap-
idly changing. The increased complexity and volumes of
new satellites brings forward requirements for reduced cost,
higher integration, use of commercial-off-the-shelf software
and higher performance. The increasing development pace
of microelectronic technology provides a further complica-
tion; the life-time of semiconductor processes is decreasing
to a point where it is becoming difﬁcult to guarantee the
long-term component support required by many space pro-
grammes. In addition, demand for military components
have decreased signiﬁcantly since the end of the Cold War,
reducing the number of foundries providing radiation-hard
components and manufacturing services.
The objective for the LEON processor is to meet the
requirements for performance, availability and low cost by
the use of commercial standards, design techniques and
semiconductor technology. The following design goals
were deﬁned for the processor:
• Use of commercial semiconductor process. To reduce
cost and increase performance, it should be possible to
implement the processor on commercial, single-event
upset (SEU) sensitive semiconductor processes.
• Portability. To guarantee long-term availability, the pro-
cessor should be portable across wide range of semicon-
ductor processes with minimum cost and effort, while
maintaining functionality and performance.
• Modularity. The processor implementation should allow
reuse in system-on-a-chip (SOC) designs.
• Scalability. The processor should be usable in both low-
end and high-end applications with minimum hardware
and software overhead.
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:23:37 UTC from IEEE Xplore.  Restrictions apply. 
• Standard interfaces. The processor should have stan-
dardized interfaces to simplify system integration and to
reuse commercial cores, components and tools.
• Software compatibility. The processor should be com-
patible with both the currently used ERC32 software
development tools and COTS software packages.
The target performance is 100 MIPS (peak) at 100
MHz, with a power consumption of less than 1 Watt.
3. LEON architecture
The LEON processor is based on a newly developed
SPARCV8-compatible [6] integer unit, featuring a 5-stage
pipeline, hardware multiply and divide units, dual co-pro-
cessor interfaces, and separate instruction and data buses
(Harvard architecture). The reason to choose the SPARCV8
architecture is two-fold: to maintain software compatibility
with ERC32, and to avoid any licensing issues regarding a
re-implementation of the instruction set (SPARC is an open
architecture and can be used without license). A high-speed
AMBA [7] AHB bus is used for data transfer between the
caches and the external memory controller. A low-speed
AMBA APB bus is used to attach on-chip simpler peripher-
als such as timers, uarts, interrupt controller and I/O ports.
A block diagram can be seen in ﬁgure 1 below:
LEON processor
LEON SPARC V8
Integer unit
I-Cache
D-Cache
FPU
Co-proc
AMBA AHB
PCI
User I/O
AHB
Controller
Memory
Controller
Timers
IrqCtrl
UARTS
I/O port
AHB/APB
Bridge
AMBA APB
8/16/32/39-bits memory bus
PROM
SRAM
I/O
Figure 1: LEON block diagram
4. Adaptation to the space environment
4.1  Design goals
One of the main design goals for LEON was to be able
to use a single-event upset (SEU) sensitive semiconductor
process, while maintaining correct operation in the space
environment. Extensive tests on ERC32 [3] showed that
error-detection is not enough to maintain correct operation
without using spare computers or voting. To avoid the large
overhead of spare units, the decision was taken to imple-
ment on-chip fault-tolerance to both detect and remove
SEU errors. To be able to use unmodiﬁed COTS software,
the error-removal must be fully software transparent, and
with no (or negligible) performance impact. To maintain
portability, the fault-tolerance functions must be imple-
mented directly in VHDL without relying on SEU-hard-
ened technology cells.
4.2  Initial analysis
For the ﬁrst LEON design, only SEU errors originating
from a direct hit in a register or memory element were
taken into account. Tests have shown that SEU errors in
combinational logic can propagate to a register on a clock
edge, but the probability of such events is low [4].
Studying the distribution of sequential cells in the
LEON design, they form three groups: single-port ram cells
used for cache memories (tag and data), dual or triple-port
rams used for the processor register ﬁle, and synchronous
D-ﬂip-ﬂops used for all remaining storage such as state
machines, pipeline registers and status/control functions.
Different types of SEU protection has been used for these
three groups, based on their usage in the system.
4.3  Cache memories
Large cache memories are vital for high performance,
and are typically in the critical (timing) path of a processor.
This is indeed true for LEON which due to portability rea-
sons uses standard synchronous ram cells rather than spe-
cially-designed cache rams. To minimize complexity and
timing overhead, the cache rams are provided with simple
error-detection in form of one or two parity bits for each tag
or data word. The parity bits are written simultaneously
with the associated tag or data, and checked on each access.
If a parity error is detected during a cache access, a cache
miss is forced and the (uncorrupted) data is fetched from
external memory. The data cache uses write-through policy,
and a second copy of the data is thus always available. No
timing penalty occurs since parity checking is performed in
parallel with tag checking.
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:23:37 UTC from IEEE Xplore.  Restrictions apply. 
In dense ram blocks, it is possible that one SEU hit can
cause multiple errors [10], typically in adjacent cells. If the
bits in the ram block are geometrically organized as a
matrix with one word per line, a multiple error could occur
in the same word and potentially not be detected by one
parity bit (a single parity bit can only detect odd number of
errors). To handle such ram cells, LEON can be conﬁgured
to use two parity bits per tag and data word, one for odd and
one for even data bits. A double error in any adjacent cells
can then be detected. In rams with data words geometri-
cally interleaved (i.e. no adjacent bits belongs to the same
word), one parity bit is sufﬁcient to detect double errors.
4.4  Processor register ﬁle
The SPARC architecture uses registers in windows of 32
(16 overlapping). A typical 8-window implementation con-
tains 136 32-bit integer registers and 32 32-bits ﬂoating-
point registers. Most SPARC instructions uses two source
and one destination operand, and the LEON processor
therefore uses a three-port register ﬁle. To detect SEU
errors, each word can be protected using one parity bit, two
parity bits or a (32,7) BCH [9] checksum. The protection
bits are generated in the write stage of the pipeline and writ-
ten together with the corresponding data. The register ﬁle is
read in the decode stage, but checking is done in the exe-
cute stage in parallel with instruction execution to avoid
timing penalties in the decode stage. If a correctable error is
detected (ﬁg. 2C), the pipeline is ﬂushed and the erroneous
operand data is corrected and written back to the register
ﬁle (instead of the erroneous instruction result). The pipe-
line is then restarted at the point of the failing instruction.
The restart operation is identical to taking a trap with the
exception that a jump is made to the address of the failed
instruction rather than to a trap vector. The time for the
complete restart operation takes 4 clock cycles, the same as
for taking a normal
trap. If an uncorrectable error is
detected (ﬁg 2D), a register error trap is generated. The
implementation overhead for the pipeline restart is small
since the logic for normal trap handling is used. Figure 2B
shows the pipeline behavior for a normal trap.
The register ﬁle has two read-ports, and two error-detec-
tion units are implemented. The register ﬁle has one write
port, and only one correction unit is needed. This means
that if more than one correctable error occurs, the instruc-
tion will be restarted once for each error, correcting and
storing one register value each time. In worst-case, a dou-
ble-store instruction that use four individual registers can
be restarted up to four times, correcting one register value
at a time.
Most standard-cell ram-libraries do not include three-
port rams, and the register ﬁle is then implemented as two
parallel
two-port rams with the write-ports connected
together. In such case, the cheaper parity coding can be use
to not only detect errors but also to correct them. Both two-
port rams have the same content, and when a parity error is
detected on one read port (i.e. in one memory) error correc-
tion is performed by copying the value from the error-free
memory to the failed memory. During the copy operation,
the (presumed) error-free ram is also checked for errors, if
an error is found an uncorrectable error trap is generated.
Although the implemented protection scheme (parity or
BCH) has no timing impact, performance of double-store
instructions can be slightly affected. This is because the
write-buffer in the data cache will delay the request of the
memory bus one clock cycle in order not to start any mem-
ory store cycle before the second store data word has been
checked and (potentially) corrected.
A. Normal execution
B. Normal trap operation (INST2 trapped)
FETCH
INST1
INST2
INST3
INST4
FETCH
INST1
INST2
INST3
INST4
INST5
FLUSH
TA1
DECODE
EXECUTE
MEMORY
WRITE
INST1
INST2
INST3
INST4
INST1
INST2
INST3
INST4
INST1
INST2
INST3
INST4
INST1
INST2
INST3
INST4
DECODE
EXECUTE
MEMORY
WRITE
INST1
INST2
INST3
INST4
FLUSH
INST1
INST2
INST3
INST1
TRAP
FLUSH
FLUSH
INST1
TRAP
C. Regﬁle error detection/correction (INST2 restarted)
D. Uncorrectable regﬁle error, error trap
FETCH
INST1
INST2
INST3
INST4
INST5
FLUSH
INST2
INST3
FETCH
INST1
INST2
INST3
INST4
INST5
FLUSH
TA1
DECODE
EXECUTE
MEMORY
WRITE
INST1
INST2
INST3
INST4
FLUSH
INST2
INST1
CHECK
INST3
FLUSH
INST1
CORR.
FLUSH
INST1
UPDATE
DECODE
EXECUTE
MEMORY
WRITE
INST1
INST2
INST3
INST4
FLUSH
INST1
CHECK
INST3
FLUSH
INST1
ERROR.
FLUSH
INST1
TRAP
TA2
TA1
TA2
TA1
Figure 2: Pipeline operation during traps and errors
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:23:37 UTC from IEEE Xplore.  Restrictions apply. 
4.5  Flip-ﬂops
The processor contains approximately 2,500 ﬂip-ﬂops,
used for temporary storage and state machines. To protect
against SEU errors, each on-chip register can be imple-
mented using triple modular redundancy (TMR). The ﬂip-
ﬂops are continuously clocked, and any SEU register error
will automatically be removed within one clock cycle while
the output of the voter will maintain the correct (glitch-free)
value. To further increase robustness, each of the three
lanes of the TMR registers can have separate clock-trees
(ﬁgure 3). An SEU hit in one clock-tree can therefore be
tolerated even if the data of a complete lane of 2,500 regis-
ters is corrupted. On the following clock edge, all errors
will be removed when new data is clocked in. An SEU hit
in the (single) clock pad is not tolerated since it will propa-
gate to all three clock-trees. However, the large feature size
and capacitance in the main clock buffer makes such an
event unlikely.
D
Clock pad
Clock trees
D
Q
D
Q
D
Q
QFT
Voter
Figure 3: TMR register with separate clock trees
4.6  External memory
The external memory is protected using an on-chip
EDAC (error-detection and correction) unit. The EDAC
implements a standard (32,7) BCH code, correcting one
and detecting two errors per 32-bit word. Error-detection
and correction is done during the re-ﬁll of the caches with-
out timing penalties. The caches operate in parallel with the
processor, and parts of a cache line can be ﬁlled on specula-
tion without being requested by the processor. It is there-
fore not always desirable to signal an uncorrectable EDAC
error to the processor since the failed data might in fact
never be used. To solve this problem, the caches implement
sub-blocking [8], with one valid bit per 32-bit data word. If
an uncorrectable error is detected, the corresponding valid
bit is not set, but the remaining of the cache line is still
ﬁlled. If the processor accesses the failed data (or instruc-
tion), a cache miss will occur since the valid bit is not set.
The data is re-fetched and the memory error is propagated