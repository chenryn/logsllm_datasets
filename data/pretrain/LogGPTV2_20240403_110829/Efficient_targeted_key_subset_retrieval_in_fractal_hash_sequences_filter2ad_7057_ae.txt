will correctly match the state found by the iterative method
for the same target. Since both algorithms start from identi-
cal initial states, correctness is ensured over arbitrary state
changes.
5. EXPERIMENT AND ANALYSIS
To verify performance, the targeting algorithm was im-
plemented and compared with a slightly modiﬁed version
of the iterative traversal approach. The modiﬁed FHT de-
creases latency by neglecting hash operations needed to com-
pute values at odd positions in skipped regions. This ver-
sion was dubbed Half Iterative and improves eﬃciency by
removing at most n
2 hashes per traversal. All algorithms
were implemented in Java, but compiled using the GCJ front
end for the GCC compiler to prevent runtime performance
modiﬁcations by Java’s Just-In-Time compiler. The choice
of hash function was SHA-16. Tests were performed on a
3GHz AMD Phenom II processor with 8GB of RAM run-
ning Ubuntu 12.04.
Tests were designed to measure performance for secure
uses of TV-OTS. Only the operations used to traverse the
chain are measured, with the n hash operations required
to initialize the chain considered setup cost. Retrievals re-
quested by TV-OTS are independent, with all values having
equal probability, p, of being retrieved. Thus, the expected
interval size between retrieved values is n× p. The assumed
application for all tests uses a message rate of 30Hz and a
chain length of 16, 384 which, for example, gives TV-OTS
a total lifespan of more than 4 hours if keys are refreshed
every second.
second ×13 keys
Tests were designed to show performance over a range
of probabilities. Security is measured by the probability of
an adversary ﬁnding a message for which a signature can
be forged. Forgery probability is directly related to the per-
centage of keys retrieved. If each signature contains 13 keys,
then out of 4096 keys, at most v = 30 messages
message =
390 keys
second are used. For this scenario, the fraction of re-
trieved keys about 9%, but the probably that a message
can be forged is more than .0001 [2]. However, the frac-
tion of retrieved keys drops rapidly when increasing security
6The choice of hash function aﬀects timed performance.
When comparing latencies, the performance increases will
appear greater with slower hash functions. For example, re-
sults presented here would be diminished by using a faster
function such as MD5 and magniﬁed by a slower function
such as SHA-256.
1282Figure 6: Comparison of the total number of hash
operations performed over the course of a traversal.
by increasing the number of chains N . It also drops when
taking into account the possibility that keys may be used
in more than one signature. Equation 10 calculates the ex-
pected probability of retrieval of any key by probabilistically
weighting the possible numbers of retrieved keys and divid-
ing by N . Some sample values based on Equation 10 are
shown in Table 2.
v(cid:80)
v(cid:80)
k=1
(cid:1)(cid:0)v−1
k(cid:0)N
(cid:1)
(cid:1)
(cid:1)(cid:0)v−1
(cid:0)N
k−1
k
(N, v) =
×
1
N
k
k−1
k=1
(10)
Table 2: Expected fraction of retrieved keys is shown
for various combinations of N and v. Entries are
omitted where TV-OTS signatures would be impos-
sible when using a hash length limited to 160 bits.
Percentage Of Keys Retrieved
v = 30 × 13
8.7%
v = 30 × 12
8%
v = 30 × 11
7.4%
-
-
4.2%
-
3.8%
1.9%
N
4096
8192
16384
Tests were designed to highlight performance at these per-
centages and show the surrounding context. Tests averaged
12 trials, which roughly reﬂects the number of retrievals re-
quired for each signature.
In each trial, the positions of
the retrieved values were randomly generated, as would be
expected from the execution of TV-OTS.
Performance graphs show the diﬀerences between the iter-
ative and targeted retrievals. Figure 6 shows the diﬀerence
in the numbers of hash operations performed by iterative
and targeted traversals. This graph shows that the savings
are approximately δ
p , and fall within the
bounds derived in Section 3.2. Latency measurements are
shown in Figure 7 for both total retrieval time and retrieval
overhead without hashes.
2 log2(δ) where δ = 1
Figure 7: Average time of a single retrieval opera-
tion is plotted over the fraction of keys retrieved.
Latencies were measured both for the entire re-
trieval and overhead only. Overhead was evalu-
ated by running the traversals without perform-
ing hash operations. The targeting algorithm has
lower latencies both when measuring overall time
and overhead-only performance.
6. FUTURE WORK
This work could be expanded in several directions, focus-
ing on algorithm optimization or incorporation with other
signature protocols.
At the algorithm level, the number of hash operations may
be optimal, but the process by which pebbles are chosen
to move between states may still be optimized. With the
current algorithms, an unfortunate consequence of storing
pebbles ordered by position is the need to iteratively search
for pebbles identiﬁed by ID. Eliminating this search would
be a large step towards a more eﬃcient targeting algorithm.
This might be accomplished with diﬀerent sorting strategies,
or data structures that work more eﬃciently with multiple
types of searches. Alternatively, this searching may be elim-
inated altogether if algorithms were found to determine peb-
ble destinations by some means other than relative oﬀsets.
Such an algorithm would lower the traversal overhead even
further beyond the improvement shown by Traveling Pebble
transitions.
To achieve reliable security with TV-OTS, the number of
skipped keys must be large. The base-two inspired pebble
arrangements used by FHT may not be the most eﬃcient for
TV-OTS. Other arrangements might increase eﬃciency by
grouping pebbles more densely around diﬀerent intervals. A
modiﬁed algorithm based on a diﬀerent arrangement pattern
potentially requires fewer operations to transition between
states.
When TV-OTS was ﬁrst published, HORS appeared to be
the most appropriate one-time signature to incorporate, but
this may no longer be true. FHT with targeting increases
ﬂexibility in protocol choices. The ability to skip keys more
eﬃciently and with less scaling penalty may open up other
possibilities for one-time signatures that ﬁt in practically
with the TV-OTS family.
12837. CONCLUSION
Multicast data authentication is a diﬃcult problem with
no general solution suited to low latency applications. This
problem is becoming increasingly important, with an emerg-
ing need for this type of protocol in critical infrastructure
monitoring and control applications. TV-OTS is a protocol
that shows promise for use in these systems, but too lit-
tle is known about its practical use to provide an accurate
assessment. To further the goal of accurately evaluating
TV-OTS, the issue of key generation was addressed. The
non-optimality of current methods was shown as inspiration
for improvement.
The improved key management strategy builds on the
FHT method by adding the ability to skip values without
performing unnecessary hash operations — a necessary im-
provement for optimal performance of TV-OTS. This ap-
proach was motivated by the idea that FHT oﬀers bounded
retrieval time for consecutive hash chain values, but also
wastes operations whenever values were skipped. With the
addition of targeted state changes, the retrieval latency is
decreased when skipping values. The state transition al-
gorithms lowered not only the number of hash operations
that were performed, but also the associated state transi-
tion overhead. The achieved performance gain corresponds
to the percentage of keys retrieved from the chain. Savings
increase with the distance δ between retrieved keys and are
bounded by Θ(δ log2(δ)). Security of TV-OTS increases rel-
ative to 1
p , where p is the probability of key retrieval. The
average distance δ grows as p is decreased, meaning TV-OTS
performance savings improve as security is increased. These
results indicate the targeting method to be a good choice for
use with TV-OTS.
8. ACKNOWLEDGMENTS
The authors would like to thank Roberto Tamassia and
the anonymous reviewers for their contributions toward im-
proving this paper.
9. REFERENCES
[1] Bakken, D., Bose, A., Hauser, C., Whitehead,
D., and Zweigle, G. Smart generation and
transmission with coherent, real-time data.
Proceedings of the IEEE 99, 6 (June 2011), 928 –951.
[2] Cairns, K., Hauser, C., and Gamage, T. Flexible
data authentication evaluated for the smart grid. 2013
IEEE International Conference on Smart Grid
Communications (SmartGridComm) (2013), To
appear.
[3] Challal, Y., Bettahar, H., and Bouabdallah,
A. A taxonomy of multicast data origin
authentication: Issues and solutions. Communications
Surveys & Tutorials, IEEE 6, 3 (2004), 34–57.
[4] Coppersmith, D., and Jakobsson, M. Almost
optimal hash sequence traversal. In Financial
Cryptography (2003), Springer, pp. 102–119.
[5] Diffie, W., and Hellman, M. New directions in
cryptography. IEEE Transactions on Information
Theory 22, 6 (1976), 644–654.
[6] Fuloria, S., Anderson, R., McGrath, K.,
Hansen, K., and Alvarez, F. The protection of
substation communications. In Proceedings of SCADA
Security Scientiﬁc Symposium (2010).
[7] Hauser, C., Manivannan, T., and Bakken, D.
Evaluating multicast message authentication protocols
for use in wide area power grid data delivery services.
In 2012 45th Hawaii International Conference on
System Science (HICSS) (2012), IEEE, pp. 2151–2158.
[8] Hu, Y., Jakobsson, M., and Perrig, A. Eﬃcient
constructions for one-way hash chains. In Applied
Cryptography and Network Security (2005), Springer,
pp. 167–190.
[9] Itkis, G., and Reyzin, L. Forward-secure signatures
with optimal signing and verifying. In Advances in
Cryptology–Crypto 2001 (2001), Springer,
pp. 332–354.
[10] Jakobsson, M. Fractal hash sequence representation
and traversal. In 2002 IEEE International Symposium
on Information Theory (2002), IEEE, p. 437.
[11] Kim, S. Improved scalable hash chain traversal. In
Applied Cryptography and Network Security (2003),
Springer, pp. 86–95.
[12] Lamport, L. Constructing digital signatures from a
one-way function. Tech. rep., Technical Report
CSL-98, SRI International, 1979.
[13] Lamport, L. Password authentication with insecure
communication. Communications of the ACM 24, 11
(1981), 770–772.
[14] Li, Q., and Cao, G. Multicast authentication in the
smart grid with one-time signature. Smart Grid, IEEE
Transactions on 2, 4 (2011), 686–696.
[15] Perrig, A. The BiBa one-time signature and
broadcast authentication protocol. In Proceedings of
the 8th ACM conference on Computer and
Communications Security (2001), ACM, pp. 28–37.
[16] Perrig, A., Canetti, R., Song, D., and Tygar, J.
Eﬃcient and secure source authentication for
multicast. In Network and Distributed System Security
Symposium (NDSS) (2001), vol. 1, pp. 35–46.
[17] Perrig, A., Canetti, R., Tygar, J. D., and Song,
D. The TESLA broadcast authentication protocol.
RSA CryptoBytes 5, 2 (2002).
[18] Reyzin, L., and Reyzin, N. Better than BiBa: Short
one-time signatures with fast signing and verifying. In
Information Security and Privacy (2002), Springer,
pp. 1–47.
[19] Rivest, R., Shamir, A., and Adleman, L. A
method for obtaining digital signatures and public-key
cryptosystems. Communications of the ACM 21, 2
(1978), 120–126.
[20] Sella, Y. On the computation-storage trade-oﬀs of
hash chain traversal. In Financial Cryptography,
Lecture Notes in Computer Science. Springer, 2003,
pp. 270–285.
[21] Wang, Q., Khurana, H., Huang, Y., and
Nahrstedt, K. Time valid one-time signature for
time-critical multicast data authentication. In
INFOCOM 2009, IEEE (2009), IEEE, pp. 1233–1241.
[22] Yum, D., Seo, J., Eom, S., and Lee, P. Single-layer
fractal hash chain traversal with almost optimal
complexity. Topics in Cryptology–CT-RSA 2009
(2009), 325–339.
1284