### 5. EXPERIMENT AND ANALYSIS

To verify the performance of the targeting algorithm, it was implemented and compared with a slightly modified version of the iterative traversal approach. The modified FHT (Half Iterative) reduces latency by omitting hash operations for values at odd positions in skipped regions, thereby improving efficiency by eliminating up to \( \frac{n}{2} \) hashes per traversal. All algorithms were implemented in Java and compiled using the GCJ front end for the GCC compiler to prevent runtime performance modifications by Java’s Just-In-Time (JIT) compiler. SHA-16 was chosen as the hash function. Tests were conducted on a 3GHz AMD Phenom II processor with 8GB of RAM running Ubuntu 12.04.

The tests were designed to measure the performance of TV-OTS for secure use cases. Only the operations required to traverse the chain were measured, with the \( n \) hash operations needed to initialize the chain considered as setup cost. Retrievals requested by TV-OTS are independent, with each value having an equal probability \( p \) of being retrieved. Therefore, the expected interval size between retrieved values is \( n \times p \). The assumed application for all tests uses a message rate of 30Hz and a chain length of 16,384, which provides TV-OTS with a total lifespan of more than 4 hours if keys are refreshed every second.

### Performance Over a Range of Probabilities

Tests were designed to show performance over a range of probabilities. Security is measured by the probability of an adversary finding a message for which a signature can be forged. This forgery probability is directly related to the percentage of keys retrieved. If each signature contains 13 keys, then out of 4096 keys, at most \( v = 30 \) messages per second use \( 390 \) keys. In this scenario, the fraction of retrieved keys is about 9%, but the probability that a message can be forged is more than 0.0001 [2]. However, the fraction of retrieved keys drops rapidly when increasing security by increasing the number of chains \( N \). It also decreases when considering the possibility that keys may be used in more than one signature. Equation 10 calculates the expected probability of retrieval of any key by probabilistically weighting the possible numbers of retrieved keys and dividing by \( N \). Some sample values based on Equation 10 are shown in Table 2.

\[ P(N, v) = \frac{1}{N} \sum_{k=1}^{v} \binom{v-1}{k-1} \left( \frac{v-1}{N} \right)^{k-1} \]

**Table 2: Expected Fraction of Retrieved Keys**

| \( v \) | \( N \)  | Percentage of Keys Retrieved |
|---------|----------|------------------------------|
| 30 × 13 | 4096     | 8.7%                         |
| 30 × 12 | 8192     | 8%                           |
| 30 × 11 | 16384    | 7.4%                         |
| -       | -        | 4.2%                         |
| -       | -        | 3.8%                         |
| -       | -        | 1.9%                         |

### Performance Evaluation

Performance graphs highlight the differences between iterative and targeted retrievals. Figure 6 shows the difference in the number of hash operations performed by iterative and targeted traversals. The savings are approximately \( \frac{\delta}{p} \), where \( \delta = \frac{1}{2 \log_2(\delta)} \), and fall within the bounds derived in Section 3.2. Latency measurements are shown in Figure 7 for both total retrieval time and retrieval overhead without hashes.

**Figure 6: Comparison of the Total Number of Hash Operations Performed Over the Course of a Traversal**

**Figure 7: Average Time of a Single Retrieval Operation Plotted Over the Fraction of Keys Retrieved**

Latencies were measured for the entire retrieval process and for overhead only. The targeting algorithm has lower latencies both in overall time and overhead-only performance.

### 6. FUTURE WORK

This work can be expanded in several directions, focusing on algorithm optimization or integration with other signature protocols.

**Algorithm Optimization:**
- The current number of hash operations may be optimal, but the process of choosing pebbles to move between states can be optimized.
- Storing pebbles ordered by position necessitates iterative searches for pebbles identified by ID. Eliminating this search would improve efficiency, possibly through different sorting strategies or data structures.
- An alternative approach could determine pebble destinations without relative offsets, further reducing traversal overhead.

**Efficient Pebble Arrangements:**
- Base-two inspired pebble arrangements used by FHT may not be the most efficient for TV-OTS. Other arrangements might increase efficiency by grouping pebbles more densely around different intervals, potentially requiring fewer operations to transition between states.

**Integration with Other Protocols:**
- When TV-OTS was first published, HORS appeared to be the most appropriate one-time signature to incorporate. However, FHT with targeting increases flexibility in protocol choices, allowing for more efficient key skipping with less scaling penalty. This opens up possibilities for other one-time signatures that fit well with the TV-OTS family.

### 7. CONCLUSION

Multicast data authentication is a challenging problem with no general solution suitable for low-latency applications. This problem is becoming increasingly important, particularly in critical infrastructure monitoring and control. TV-OTS is a promising protocol for these systems, but its practical use requires further evaluation. To address key generation, the non-optimality of current methods was highlighted, inspiring improvements.

The improved key management strategy builds on the FHT method by adding the ability to skip values without performing unnecessary hash operations, a necessary improvement for optimal TV-OTS performance. This approach reduces retrieval latency and state transition overhead, with performance gains corresponding to the percentage of keys retrieved. Savings increase with the distance \( \delta \) between retrieved keys and are bounded by \( \Theta(\delta \log_2(\delta)) \). TV-OTS security increases relative to \( \frac{1}{p} \), where \( p \) is the probability of key retrieval. As \( p \) decreases, the average distance \( \delta \) grows, meaning TV-OTS performance improves as security increases. These results indicate that the targeting method is a good choice for use with TV-OTS.

### 8. ACKNOWLEDGMENTS

The authors would like to thank Roberto Tamassia and the anonymous reviewers for their contributions toward improving this paper.

### 9. REFERENCES

[1] Bakken, D., Bose, A., Hauser, C., Whitehead, D., and Zweigle, G. Smart generation and transmission with coherent, real-time data. Proceedings of the IEEE 99, 6 (June 2011), 928–951.

[2] Cairns, K., Hauser, C., and Gamage, T. Flexible data authentication evaluated for the smart grid. 2013 IEEE International Conference on Smart Grid Communications (SmartGridComm) (2013), To appear.

[3] Challal, Y., Bettahar, H., and Bouabdallah, A. A taxonomy of multicast data origin authentication: Issues and solutions. Communications Surveys & Tutorials, IEEE 6, 3 (2004), 34–57.

[4] Coppersmith, D., and Jakobsson, M. Almost optimal hash sequence traversal. In Financial Cryptography (2003), Springer, pp. 102–119.

[5] Diffie, W., and Hellman, M. New directions in cryptography. IEEE Transactions on Information Theory 22, 6 (1976), 644–654.

[6] Fuloria, S., Anderson, R., McGrath, K., Hansen, K., and Alvarez, F. The protection of substation communications. In Proceedings of SCADA Security Scientific Symposium (2010).

[7] Hauser, C., Manivannan, T., and Bakken, D. Evaluating multicast message authentication protocols for use in wide area power grid data delivery services. In 2012 45th Hawaii International Conference on System Science (HICSS) (2012), IEEE, pp. 2151–2158.

[8] Hu, Y., Jakobsson, M., and Perrig, A. Efficient constructions for one-way hash chains. In Applied Cryptography and Network Security (2005), Springer, pp. 167–190.

[9] Itkis, G., and Reyzin, L. Forward-secure signatures with optimal signing and verifying. In Advances in Cryptology–Crypto 2001 (2001), Springer, pp. 332–354.

[10] Jakobsson, M. Fractal hash sequence representation and traversal. In 2002 IEEE International Symposium on Information Theory (2002), IEEE, p. 437.

[11] Kim, S. Improved scalable hash chain traversal. In Applied Cryptography and Network Security (2003), Springer, pp. 86–95.

[12] Lamport, L. Constructing digital signatures from a one-way function. Tech. rep., Technical Report CSL-98, SRI International, 1979.

[13] Lamport, L. Password authentication with insecure communication. Communications of the ACM 24, 11 (1981), 770–772.

[14] Li, Q., and Cao, G. Multicast authentication in the smart grid with one-time signature. Smart Grid, IEEE Transactions on 2, 4 (2011), 686–696.

[15] Perrig, A. The BiBa one-time signature and broadcast authentication protocol. In Proceedings of the 8th ACM conference on Computer and Communications Security (2001), ACM, pp. 28–37.

[16] Perrig, A., Canetti, R., Song, D., and Tygar, J. Efficient and secure source authentication for multicast. In Network and Distributed System Security Symposium (NDSS) (2001), vol. 1, pp. 35–46.

[17] Perrig, A., Canetti, R., Tygar, J. D., and Song, D. The TESLA broadcast authentication protocol. RSA CryptoBytes 5, 2 (2002).

[18] Reyzin, L., and Reyzin, N. Better than BiBa: Short one-time signatures with fast signing and verifying. In Information Security and Privacy (2002), Springer, pp. 1–47.

[19] Rivest, R., Shamir, A., and Adleman, L. A method for obtaining digital signatures and public-key cryptosystems. Communications of the ACM 21, 2 (1978), 120–126.

[20] Sella, Y. On the computation-storage trade-offs of hash chain traversal. In Financial Cryptography, Lecture Notes in Computer Science. Springer, 2003, pp. 270–285.

[21] Wang, Q., Khurana, H., Huang, Y., and Nahrstedt, K. Time valid one-time signature for time-critical multicast data authentication. In INFOCOM 2009, IEEE (2009), IEEE, pp. 1233–1241.

[22] Yum, D., Seo, J., Eom, S., and Lee, P. Single-layer fractal hash chain traversal with almost optimal complexity. Topics in Cryptology–CT-RSA 2009 (2009), 325–339.