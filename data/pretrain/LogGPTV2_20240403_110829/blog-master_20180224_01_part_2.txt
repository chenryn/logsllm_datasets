   7 |   3 | 英语 |    93 | 670 | 95.7142857142857143 |          93 |         99    
   3 |   3 | 英语 |    95 | 877 | 97.4444444444444444 |          95 |        100    
   2 |   3 | 英语 |    95 | 877 | 97.4444444444444444 |          95 |        100    
   4 |   3 | 英语 |    95 | 877 | 97.4444444444444444 |          95 |        100    
   2 |   2 | 数学 |    96 | 877 | 97.4444444444444444 |          95 |        100    
   6 |   2 | 数学 |    97 | 592 | 98.6666666666666667 |          96 |        100    
   3 |   1 | 语文 |    99 | 399 | 99.7500000000000000 |          99 |        100    
   7 |   2 | 数学 |   100 | 399 | 99.7500000000000000 |          99 |        100    
   4 |   1 | 语文 |   100 | 399 | 99.7500000000000000 |          99 |        100    
   1 |   3 | 英语 |   100 | 399 | 99.7500000000000000 |          99 |        100    
(28 rows)    
```    
### 社区力量，用户福音，5小时修复BUG  
社区响应用户提交BUG，修复BUG的速度很给力，PostgreSQL社区给予用户强大的信心。  
如Bruce momjian说的，一个用户提交的BUG一般在12小时内社区会响应。  
附上提交BUG的方法：  
https://www.postgresql.org/support/  
https://www.postgresql.org/account/submitbug/  
![pic](20180224_01_pic_001.jpg)  
```  
提交BUG：  
From:	PG Bug reporting form   
To:	pgsql-bugs(at)lists(dot)postgresql(dot)org  
Cc:	digoal(at)126(dot)com  
Subject:	BUG #15082: PostgreSQL 11 dev bug with window range partition by QUERY  
Date:	2018-02-23 15:16:39  
修复：  
From:	Tom Lane   
To:	digoal(at)126(dot)com  
Cc:	pgsql-bugs(at)lists(dot)postgresql(dot)org  
Subject:	Re: BUG #15082: PostgreSQL 11 dev bug with window range partition by QUERY  
Date:	2018-02-23 20:12:31  
Message-ID:	PI:EMAIL (view raw or download thread mbox)  
=?utf-8?q?PG_Bug_reporting_form?=  writes:  
> when i use frame clause(range), it's only right when don't use partition by,  
> and use the whole rows as one partition.  
> is it a bug?  
Yup.  Fixed, thanks.  
			regards, tom lane  
```  
patch如下  
https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=9fe802c8185e9a53158b6797d0f6fd8bfbb01af1  
```  
author	Tom Lane 	  
Sat, 24 Feb 2018 04:11:40 +0800 (15:11 -0500)  
committer	Tom Lane 	  
Sat, 24 Feb 2018 04:11:40 +0800 (15:11 -0500)  
commit	9fe802c8185e9a53158b6797d0f6fd8bfbb01af1  
tree	493273a7076eb287b6b00803346f93e47a3a7e55	tree | snapshot  
parent	8af87f411c151537b6e3315c2a191110c3fec494	commit | diff  
Fix brown-paper-bag bug in commit 0a459cec96d3856f476c2db298c6b52f592894e8.  
RANGE_OFFSET comparisons need to examine the first ORDER BY column,  
which isn't necessarily the first column in the incoming tuples.  
No idea how this slipped through initial testing.  
Per bug #15082 from Zhou Digoal.  
Discussion: https://postgr.es/m/PI:EMAIL  
```  
建议在提交BUG的时候，尽量的描述详细，能复现的问题写清楚复现方法，能引用的commit尽量引用，减少committer排查问题的时间。  
下面详细介绍窗口查询的语法。    
## 窗口查询语法介绍    
https://www.postgresql.org/docs/devel/static/sql-expressions.html#SYNTAX-WINDOW-FUNCTIONS    
https://www.postgresql.org/docs/devel/static/sql-select.html    
大括号表示必选，中括号可选。    
1、仅window聚合函数，允许使用FILTER子句，表示只处理filter中WHERE TRUE的记录。    
```    
function_name ([expression [, expression ... ]]) [ FILTER ( WHERE filter_clause ) ] OVER window_name    
function_name ([expression [, expression ... ]]) [ FILTER ( WHERE filter_clause ) ] OVER ( window_definition )    
function_name ( * ) [ FILTER ( WHERE filter_clause ) ] OVER window_name    
function_name ( * ) [ FILTER ( WHERE filter_clause ) ] OVER ( window_definition )    
```    
2、窗口定义，where window_definition has the syntax    
```    
[ existing_window_name ]    
[ PARTITION BY expression [, ...] ]    
[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]    
[ frame_clause ]    
```    
3、帧定义，The optional frame_clause can be one of    
rows 表示前后多少行。    
groups 表示前后多少组。    
**例如1,1,1,2,2,3,3,3,4,5,6的顺序值。当前记录=3的任意一条时，前后1组表示2,2,3,3,3,4；当前记录=2的任意一条时，前1组以及current row表示1,1,1,2,2。**    
range, groups的边界都是以peer的最外围作为边界，例如字段值 1,1,1,2,3,3，边界是1或者3时，包含所有的1以及所有的3。    
如果order by是一个表达式，那么边界以表达式的值来计算，如果多行表达式的值一致，那么这些行就是一组PEER。    
groups，相同表达式或列值作为一个peer簇，边界输入为前后N个簇。current_row表示包含当前行所在簇的最大范围。    
range，当前值的差值作为判断边界的条件。current_row表示包含当前行所在簇的最大范围。    
**目前range的offset仅支持int2,int4,int8,interval类型，对应类型int,date,time,timestamp,timestamptz，即类似数据库range类型的描述，order by表达式的类型决定了offset用到的类型**    
```    
{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]    
{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]    
```    
4、帧的开始和结束定义，where frame_start and frame_end can be one of    
```    
UNBOUNDED PRECEDING    
offset PRECEDING    
CURRENT ROW    
offset FOLLOWING    
UNBOUNDED FOLLOWING    
```    
默认为 between UNBOUNDED PRECEDING and CURRENT ROW。    
**注意：如果window中未定义order by，那么整个window就是一个group，或者整个window就是一个frame。**    
5、帧的不包含定义，and frame_exclusion can be one of    
- EXCLUDE CURRENT ROW，不包含当前行    
- EXCLUDE GROUP，不包含当前行的所有peer行(当前行也不包含)，即order by表达式得到的值等值的行s。 1,1,currentrow(1),1 排除前面2行，当前行，后面1行。       
- EXCLUDE TIES，不包含当前行的所有peer行s，但是包含当前行。即不包含order by表达式得到的等值(order by表达式)的current row之前和之后的所有rows. 1,1,currentrow(1),1  排除前面2条和后面1条。      
- EXCLUDE NO OTHERS，不排除任何行。默认值。    
例子  
```
test=# CREATE TABLE t_demo AS
    SELECT   ordinality, day, date_part('week', day) AS week 
    FROM    generate_series('2020-01-02', '2020-01-15', '1 day'::interval) 
            WITH ORDINALITY AS day;
SELECT 14
test=# SELECT * FROM t_demo;
 ordinality |          day           | week 
------------+------------------------+------
          1 | 2020-01-02 00:00:00+01 |    1
          2 | 2020-01-03 00:00:00+01 |    1
          3 | 2020-01-04 00:00:00+01 |    1
          4 | 2020-01-05 00:00:00+01 |    1
          5 | 2020-01-06 00:00:00+01 |    2
          6 | 2020-01-07 00:00:00+01 |    2
          7 | 2020-01-08 00:00:00+01 |    2
          8 | 2020-01-09 00:00:00+01 |    2
          9 | 2020-01-10 00:00:00+01 |    2
         10 | 2020-01-11 00:00:00+01 |    2
         11 | 2020-01-12 00:00:00+01 |    2
         12 | 2020-01-13 00:00:00+01 |    3
         13 | 2020-01-14 00:00:00+01 |    3
         14 | 2020-01-15 00:00:00+01 |    3
(14 rows)
test=# SELECT *, 
        array_agg(ordinality) 
                OVER (ORDER BY day ROWS
                         BETWEEN 1 PRECEDING AND 1 FOLLOWING),
        avg(ordinality) 
                OVER (ORDER BY day ROWS
                         BETWEEN 1 PRECEDING AND 1 FOLLOWING)
FROM t_demo;
 ordinality |          day           | week | array_agg  |         avg        
------------+------------------------+------+------------+---------------------
          1 | 2020-01-02 00:00:00+01 |    1 | {1,2}      |  1.5000000000000000
          2 | 2020-01-03 00:00:00+01 |    1 | {1,2,3}    |  2.0000000000000000
          3 | 2020-01-04 00:00:00+01 |    1 | {2,3,4}    |  3.0000000000000000
          4 | 2020-01-05 00:00:00+01 |    1 | {3,4,5}    |  4.0000000000000000
          5 | 2020-01-06 00:00:00+01 |    2 | {4,5,6}    |  5.0000000000000000
          6 | 2020-01-07 00:00:00+01 |    2 | {5,6,7}    |  6.0000000000000000
          7 | 2020-01-08 00:00:00+01 |    2 | {6,7,8}    |  7.0000000000000000
          8 | 2020-01-09 00:00:00+01 |    2 | {7,8,9}    |  8.0000000000000000
          9 | 2020-01-10 00:00:00+01 |    2 | {8,9,10}   |  9.0000000000000000
         10 | 2020-01-11 00:00:00+01 |    2 | {9,10,11}  | 10.0000000000000000
         11 | 2020-01-12 00:00:00+01 |    2 | {10,11,12} | 11.0000000000000000
         12 | 2020-01-13 00:00:00+01 |    3 | {11,12,13} | 12.0000000000000000
         13 | 2020-01-14 00:00:00+01 |    3 | {12,13,14} | 13.0000000000000000
         14 | 2020-01-15 00:00:00+01 |    3 | {13,14}    | 13.5000000000000000
(14 rows)
test=# SELECT *, array_agg(ordinality) 
        OVER (ORDER BY day ROWS
            BETWEEN 1 PRECEDING AND 1 FOLLOWING 
            EXCLUDE CURRENT ROW) 
    FROM  t_demo;
 ordinality |          day           | week | array_agg 
------------+------------------------+------+-----------
          1 | 2020-01-02 00:00:00+01 |    1 | {2}
          2 | 2020-01-03 00:00:00+01 |    1 | {1,3}
          3 | 2020-01-04 00:00:00+01 |    1 | {2,4}
          4 | 2020-01-05 00:00:00+01 |    1 | {3,5}
          5 | 2020-01-06 00:00:00+01 |    2 | {4,6}
          6 | 2020-01-07 00:00:00+01 |    2 | {5,7}
          7 | 2020-01-08 00:00:00+01 |    2 | {6,8}
          8 | 2020-01-09 00:00:00+01 |    2 | {7,9}
          9 | 2020-01-10 00:00:00+01 |    2 | {8,10}
         10 | 2020-01-11 00:00:00+01 |    2 | {9,11}
         11 | 2020-01-12 00:00:00+01 |    2 | {10,12}
         12 | 2020-01-13 00:00:00+01 |    3 | {11,13}
         13 | 2020-01-14 00:00:00+01 |    3 | {12,14}
         14 | 2020-01-15 00:00:00+01 |    3 | {13}
(14 rows)
test=# SELECT   day, week, 
        array_agg(week) OVER (ORDER BY week ROWS
                BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS all,
        array_agg(week) OVER (ORDER BY week ROWS
                BETWEEN 2 PRECEDING AND 2 FOLLOWING EXCLUDE TIES) AS ties
FROM    t_demo;
          day           | week |     all     |  ties   
------------------------+------+-------------+---------
 2020-01-02 00:00:00+01 |    1 | {1,1,1}     | {1}
 2020-01-03 00:00:00+01 |    1 | {1,1,1,1}   | {1}
 2020-01-04 00:00:00+01 |    1 | {1,1,1,1,2} | {1,2}
 2020-01-05 00:00:00+01 |    1 | {1,1,1,2,2} | {1,2,2}
 2020-01-06 00:00:00+01 |    2 | {1,1,2,2,2} | {1,1,2}