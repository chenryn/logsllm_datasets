# 2020湖湘杯Reverse Writeup及复盘
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
>
> 这次和happy_misc里的师傅一起报了湖湘杯，打了一天，总体感觉还算可以，虽然没进线下，但还是很感觉到自己一年中的提升和现在的不足的。re差一点儿ak，也就算是半个ak吧，嘻嘻。比赛嘛，一如既往的卷，就嗯卷。
## 0x00 easyre
这题放入IDA可以看到，在main中其实是没有关于flag的check部分的。有的只是对flag的长度的一个check，仅仅只是要求了flag的长度为0x18。之后就会ret，会到上一级函数。这里我没有选择去用IDA深究，而是用OD去动态调试看一下。
向下跟进可以看到在main返回之后，会有一个加密的过程。先将第一个字符与0xe0存到栈中。之后就是第一个字符左移3位，第二个字符右移5位，之后取或运算。之后异或循环变量也就是字符数组下标。大致伪代码就是`(((input[i])|(input[i+1]))&0xff)^i`。最后将存入栈中的变量和最后一位做运算。
再次ret可以看到check部分，找到加密flag之后的数据。
位运算本身不可逆，而我算法也不大行，所以直接正面爆破。我们可以把每一位的表达式看做一种条件，而对于移位和或运算，必然会有多解，满足所有条件，才能确定唯一的flag。在我多次的尝试之后发现，每一位的取值其实可能性也很有限，而在前后两个条件的限制下，其实就会固定，所以可以进行分段爆破。（不存在艺术，简单粗暴才能抢血）大致给一下部分代码截图，就不给完全了，每个人的爆破代码都不一样的。
## 0x01 ReMe
这题主要考察python的反编译，具体从exe->pyc->py这个过程可以百度，这里不多说。反编译后的代码如下
    # uncompyle6 version 3.7.4
    # Python bytecode 3.7 (3394)
    # Decompiled from: Python 2.7.15+ (default, Aug 31 2018, 11:56:52) 
    # [GCC 8.2.0]
    # Warning: this version of Python has problems handling the Python 3 "byte" type in constants properly.
    # Embedded file name: ReMe.py
    # Compiled at: 1995-09-28 00:18:56
    # Size of source mod 2**32: 272 bytes
    import sys, hashlib
    check = [
     'e5438e78ec1de10a2693f9cffb930d23',
     '08e8e8855af8ea652df54845d21b9d67',
     'a905095f0d801abd5865d649a646b397',
     'bac8510b0902185146c838cdf8ead8e0',
     'f26f009a6dc171e0ca7a4a770fecd326',
     'cffd0b9d37e7187483dc8dd19f4a8fa8',
     '4cb467175ab6763a9867b9ed694a2780',
     '8e50684ac9ef90dfdc6b2e75f2e23741',
     'cffd0b9d37e7187483dc8dd19f4a8fa8',
     'fd311e9877c3db59027597352999e91f',
     '49733de19d912d4ad559736b1ae418a7',
     '7fb523b42413495cc4e610456d1f1c84',
     '8e50684ac9ef90dfdc6b2e75f2e23741',
     'acb465dc618e6754de2193bf0410aafe',
     'bc52c927138231e29e0b05419e741902',
     '515b7eceeb8f22b53575afec4123e878',
     '451660d67c64da6de6fadc66079e1d8a',
     '8e50684ac9ef90dfdc6b2e75f2e23741',
     'fe86104ce1853cb140b7ec0412d93837',
     'acb465dc618e6754de2193bf0410aafe',
     'c2bab7ea31577b955e2c2cac680fb2f4',
     '8e50684ac9ef90dfdc6b2e75f2e23741',
     'f077b3a47c09b44d7077877a5aff3699',
     '620741f57e7fafe43216d6aa51666f1d',
     '9e3b206e50925792c3234036de6a25ab',
     '49733de19d912d4ad559736b1ae418a7',
     '874992ac91866ce1430687aa9f7121fc']
    def func(num):
        result = []
        while num != 1:
            num = num * 3 + 1 if num % 2 else num // 2
            result.append(num)
        return result
    if __name__ == '__main__':
        print('Your input is not the FLAG!')
        inp = input()
        if len(inp) != 27:
            print('length error!')
            sys.exit(-1)
        for i, ch in enumerate(inp):
            ret_list = func(ord(ch))
            s = ''
            for idx in range(len(ret_list)):
                s += str(ret_list[idx])
                s += str(ret_list[(len(ret_list) - idx - 1)])
            md5 = hashlib.md5()
            md5.update(s.encode('utf-8'))
            if md5.hexdigest() != check[i]:
                sys.exit(i)
        md5 = hashlib.md5()
        md5.update(inp.encode('utf-8'))
        print('You win!')
        print('flag{' + md5.hexdigest() + '}')
    # okay decompiling 2.pyc
稍微改一改源码，就会自己出flag（有手就行）
    # uncompyle6 version 3.7.4
    # Python bytecode 3.7 (3394)
    # Decompiled from: Python 2.7.15+ (default, Aug 31 2018, 11:56:52) 
    # [GCC 8.2.0]
    # Warning: this version of Python has problems handling the Python 3 "byte" type in constants properly.
    # Embedded file name: ReMe.py
    # Compiled at: 1995-09-28 00:18:56
    # Size of source mod 2**32: 272 bytes
    import sys, hashlib
    check = [
     'e5438e78ec1de10a2693f9cffb930d23',
     '08e8e8855af8ea652df54845d21b9d67',
     'a905095f0d801abd5865d649a646b397',
     'bac8510b0902185146c838cdf8ead8e0',
     'f26f009a6dc171e0ca7a4a770fecd326',
     'cffd0b9d37e7187483dc8dd19f4a8fa8',
     '4cb467175ab6763a9867b9ed694a2780',
     '8e50684ac9ef90dfdc6b2e75f2e23741',
     'cffd0b9d37e7187483dc8dd19f4a8fa8',
     'fd311e9877c3db59027597352999e91f',
     '49733de19d912d4ad559736b1ae418a7',
     '7fb523b42413495cc4e610456d1f1c84',
     '8e50684ac9ef90dfdc6b2e75f2e23741',
     'acb465dc618e6754de2193bf0410aafe',
     'bc52c927138231e29e0b05419e741902',
     '515b7eceeb8f22b53575afec4123e878',
     '451660d67c64da6de6fadc66079e1d8a',
     '8e50684ac9ef90dfdc6b2e75f2e23741',
     'fe86104ce1853cb140b7ec0412d93837',
     'acb465dc618e6754de2193bf0410aafe',
     'c2bab7ea31577b955e2c2cac680fb2f4',
     '8e50684ac9ef90dfdc6b2e75f2e23741',
     'f077b3a47c09b44d7077877a5aff3699',
     '620741f57e7fafe43216d6aa51666f1d',
     '9e3b206e50925792c3234036de6a25ab',
     '49733de19d912d4ad559736b1ae418a7',