position independent.
Code-Data Separation: To convert a stripped binary to be
XOM-compatible, there is one fundamental problem to solve,
namely code-data separation. Note that separating data from
code for COTS binaries is, in general, undecidable as it is
equivalent to the famous Halting Problem [19]. But we found
that in the scope of ARM64 position-independent binaries,
which are prevalent in modern Android and iOS [20] Phones,
a practical solution is possible. Basically, a feasible solution
should address the two following challenges.
1) Locating Data In Code Pages: We generally refer to data
residing in executable code regions as executable data. There
are two types of executable data allowed in ELF binaries.
• Executable sections: The ﬁrst kind of data are those ELF
sections consisting of pure read-only data which could
reside in executable memory. Deﬁned by contemporary
ELF standard, a typical ELF ﬁle has two views: linking
view and loading view, used by linker and loader respec-
tively. Linking view consists of ELF sections (such as
.text, .rodata). During linking, the static linker bundles
those sections with compatible access permissions to
form a segment – in this case, executable indicates read-
able. The segments then comprise the loading view. When
an ELF is being loaded, the loader simply loads each
of the segments as a whole into memory, and grant the
corresponding access permissions. A standard ELF has
two loadable segments. One is readable and executable,
which is normally referred as “code segment”. This
segment contains all the sections with instructions (.plt
and .text, etc.), and read-only data (.gnu.hash, .dynsym,
etc.); the other segment is readable and writable, referred
as “data segment”, it contains the program data as well as
other read/writ-able sections. For our goal to realize non-
readable code, we mainly focus on the code segment.
In this segment, generally only .plt and .text contain
instructions used for program execution, but as explained
before,
they are mixed with other sections that only
need to be read-only, thus we cannot simply map the
memory page to execute-only as oftentimes these sections
could locate within the same page. For instance, Table II
shows the code segment layout of an example program,
all except the last two sections in this code segment
are placed within the same page. To make things more
complex, the segment layout varies for different ELFs.
• Embedded data: The second kind of data in the code
pages is those embedded data in the .text section. For
optimization purpose, such as exploiting spatial locality,
compilers emit data to places nearby their accessing code.
Note that albeit recent study [21] shows that in modern
x86 Linux, compilers no longer generate binaries that
have code interleaved with data, to the opposite of our
discovery, we found this is not the case for ARM, we
examined the system binaries extracted from smartphone
Nexus 5X running the factory image MMB29P, Table III
reveals that code-data interleaving still prevails in those
modern ARM64 Linux binaries, indicating this is a real-
world problem to be solved.
TABLE II: ELF sections that comprise the code segment of
the example program, the highlighted ones are locate in the
same page.
Section Name
.interp
.note.android.ident
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version r
.rela.dyn
.rela.plt
.plt
.text
.rodata
.eh frame hdr
.eh frame
Address
0000000000000238
0000000000000250
0000000000000268
0000000000000288
00000000000002c8
00000000000005b0
00000000000006e2
0000000000000720
0000000000000740
0000000000000830
00000000000009a0
0000000000000ab0
0000000000000f08
00000000000010d0
0000000000001110
Type
PROGBITS
NOTE
NOTE
GNU HASH
DYNSYM
STRTAB
VERSYM
VERNEED
RELA
RELA
PROGBITS
PROGBITS
PROGBITS
PROGBITS
PROGBITS
306
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:33 UTC from IEEE Xplore.  Restrictions apply. 
TABLE III: Android Marshmallow system binaries that have
embedded data in Nexus 5X.
(cid:1)(cid:1)
(cid:27)(cid:19)(cid:24)(cid:19)(cid:20)(cid:7)(cid:13)(cid:27)(cid:4)(cid:11)(cid:14)(cid:1)
(cid:27)(cid:19)(cid:24)(cid:19)(cid:20)(cid:7)(cid:13)(cid:27)(cid:12)(cid:11)(cid:4)(cid:32)(cid:31)(cid:1)
(cid:27)(cid:22)(cid:7)(cid:14)(cid:6)(cid:15)(cid:18)(cid:27)(cid:12)(cid:11)(cid:4)(cid:32)(cid:31)(cid:1)
(cid:27)(cid:22)(cid:7)(cid:14)(cid:6)(cid:15)(cid:18)(cid:27)(cid:4)(cid:11)(cid:14)(cid:1)
(cid:32)(cid:1)(cid:20)(cid:14)(cid:1)
(cid:10)(cid:16)(cid:19)(cid:9)(cid:21)(cid:16)(cid:13)(cid:22)(cid:1)
(cid:16)(cid:17)(cid:21)(cid:1)
(cid:16)(cid:19)(cid:19)(cid:1)
(cid:15)(cid:15)(cid:15)(cid:1)
(cid:18)(cid:1)
(cid:32)(cid:1)(cid:20)(cid:14)(cid:1)(cid:10)(cid:16)(cid:19)(cid:9)(cid:21)(cid:16)(cid:13)(cid:22)(cid:1)(cid:25)(cid:29)(cid:1)
(cid:13)(cid:18)(cid:10)(cid:13)(cid:12)(cid:13)(cid:12)(cid:1)(cid:12)(cid:9)(cid:23)(cid:9)(cid:1)
(cid:15)(cid:20)(cid:21)(cid:1)
(cid:15)(cid:14)(cid:15)(cid:1)
(cid:17)(cid:23)(cid:1)
(cid:16)(cid:1)
(cid:7)(cid:13)(cid:21)(cid:11)(cid:13)(cid:19)(cid:23)(cid:9)(cid:15)(cid:13)(cid:1)
(cid:21)(cid:14)(cid:10)(cid:18)(cid:20)(cid:26)(cid:1)
(cid:17)(cid:23)(cid:10)(cid:20)(cid:15)(cid:26)(cid:1)
(cid:17)(cid:19)(cid:10)(cid:15)(cid:18)(cid:26)(cid:1)
(cid:19)(cid:14)(cid:10)(cid:14)(cid:14)(cid:26)(cid:1)
2) Updating Data References: In addition to ﬁnding out the
locations of executable data, we also need to relocate them and
update their references. It turns out that references updating
is also non-trivial. In our system, as shown in Table IV,
the majority of the ELF sections inside code segment are
expected to be relocated to a different memory location so that
appropriate permission can be enforced. The sections that are
left out, such as .interp and .note.∗ are either accessed only
by OS or not used for program execution so we can leave
them untouched. For those sections listed in Table IV, they
have complex interconnections, both internally and externally.
As shown in Table V, various types of references exist in a
given ELF. Due to this complexity, the references collection
is conducted across the whole NORAX system by different
components in different stages including both ofﬂine and
during load-time.
TABLE IV: Sections in the executable code page that are
handled by NORAX
(.gnu).hash
.rela.plt
.dynsym
.text (embedded data)
.dynstr
.rodata
.gnu.version
.eh frame
.rela.dyn
.eh frame hdr
TABLE V: ELF section reference types
Reference Type
Intra-section references
Inter-section references
External references
Multiple external references
Example
.text refers to .text (embedded data)
.text refers to .rodata
dynamic linker refers to .dynsym, .rela.∗
C++ runtime/debugger refer to .eh frame
III. NORAX DESIGN
A. System Overview
The goal of NORAX is to allow COTS binaries to take
advantage of execute-only memory (XOM), a new security
feature that recent AArch64 CPUs provide and is widely avail-
able on today’s mobile devices. While useful for preventing
memory disclosure-based code reuse [1], [2], XOM remains
barely used by user and system binaries due to its require-
ment for recompilation. NORAX removes this requirement
by automatically patching COTS binaries and loading their
code to XOM. As a result, existing binaries can beneﬁt rom
the hardware-backed protection against direct code memory
disclosure attacks. While we demonstrate NORAX on Android,
the ideas behind NORAX are generally applicable to any
AAarch64 platform.
Design Principles: To make NORAX widely useful in practice,
we set the following design principles for NORAX:
• P1 - Backward compatibility: Changes introduced by
NORAX to binaries must not break their standard struc-
tures or compilation conventions (i.e., patched binaries
can run on devices without NORAX support). Otherwise,
patched binaries may become incompatible with existing
loaders, linkers, or orthogonal binary-hardening solutions
(e.g., code diversiﬁcation techniques). Furthermore, NO-
RAX must not make special assumptions about binaries
to facilitate analysis and patching.
• P2 - Completeness: NORAX must have complete cover-
age of embedded data. It must detect all embedded data in
a binary accessed by code and ensure that these accesses
still succeed when XOM enforcement is in place. On the
other hand, NORAX can only have very few, if not zero,
false positives (i.e., misidentifying code as data).
• P3 - Correctness: NORAX must not alter or break a
patched binary’s original function or behavior, needless
to say crashing the binary.
• P4 - Low Overhead: NORAX should not introduce im-
practical overheads to the patched binaries, including both
space overhead (e.g., binary sizes and memory footprint)
and runtime slowdown.
NORAX Workﬂow: NORAX consists of four major compo-
nents: NDisassembler, NPatcher, NLoader, and NMonitor, as
shown in Figure 1. The ﬁrst two components perform ofﬂine
binary analysis and transformation and the last two provide
runtime support for loading and monitoring the patched,
XOM-compatible executables and libraries. In addition to
disassembling machine code, NDisassembler scans for all
executable code that needs to be protected by XOM. A major
challenge it solves is identifying various types of data that
ARM compilers often embed in the code section, including
jump tables, literals, and padding. Unlike typical disassem-
blers, NDisassembler has to precisely differentiate embedded
data from code in order to achieve P 2 and P 3 (§III-B). Taking
input from NDisassembler, NPatcher transforms the binary so
that its embedded data are moved out of code sections and
their references are collected for later adjustment. After the
transformation, NPatcher inserts a unique magic number in the
binary so that it can be recognized by NLoader during load-
time. NPatcher also stores NORAX metadata in the binary,
which will be used by NLoader and NMonitor (§III-C). When
a patched binary is being loaded, NLoader takes over the
loading process to (i) load the NORAX metadata into memory,
307
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:33 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 1: NORAX System Overview: the ofﬂine tools (left) analyze the input binary, locate all the executable data and their
references (when available), and then statically patch the metadata to the raw ELF; the runtime components (right) create
separated mapping for the executable data sections and update the recorded references as well as those generated at runtime.
(ii) adjust the NPatcher-collected references as well as those
dynamically created references to the linker-related sections
(e.g .hash,
.rela.*), and (iii) map all memory pages that
contain code to XOM (§III-D). During runtime, NMonitor,
an OS extension, handles read accesses to XOM. While such
accesses are rare and may indicate attacks, they could also be
legitimate because NPatcher may not be able to completely
recognize dynamic references to the relocated embedded data
(e.g., those generated at runtime). When there are missed data
references, the access will trigger an XOM violation, which
NMonitor veriﬁes and, if legitimate, facilitates the access to
the corresponding data (§III-E).