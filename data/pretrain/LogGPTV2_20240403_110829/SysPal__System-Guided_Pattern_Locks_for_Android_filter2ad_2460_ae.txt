(cid:15)
(cid:14)
(cid:12)
(cid:13)
(cid:1)(cid:9)(cid:2)(cid:2)(cid:2)
(cid:1)(cid:8)(cid:2)(cid:2)(cid:2)
(cid:1)(cid:7)(cid:2)(cid:2)(cid:2)
(cid:1)(cid:6)(cid:2)(cid:2)(cid:2)
(cid:1)(cid:5)(cid:2)(cid:2)(cid:2)
(cid:1)(cid:4)(cid:2)(cid:2)(cid:2)
(cid:1)(cid:3)(cid:2)(cid:2)(cid:2)
(cid:1)(cid:2)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:3)(cid:5)(cid:6)(cid:7)
(cid:8)(cid:9)(cid:10)(cid:11)(cid:3)(cid:5)(cid:12)
(cid:13)(cid:9)(cid:10)(cid:11)(cid:3)(cid:5)(cid:12)
(cid:14)(cid:9)(cid:10)(cid:11)(cid:3)(cid:5)(cid:12)
(cid:1)(cid:2)(cid:1)(cid:7)
(cid:1)(cid:2)(cid:1)(cid:6)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:3)(cid:5)(cid:6)(cid:7)
(cid:8)(cid:9)(cid:10)(cid:11)(cid:3)(cid:5)(cid:12)
(cid:13)(cid:9)(cid:10)(cid:11)(cid:3)(cid:5)(cid:12)
(cid:14)(cid:9)(cid:10)(cid:11)(cid:3)(cid:5)(cid:12)
(cid:10)(cid:8)(cid:9)
(cid:3)(cid:4)(cid:8)(cid:9)
(cid:3)(cid:11)(cid:8)(cid:9)
(cid:4)(cid:1)(cid:8)(cid:9)
(cid:1)(cid:2)(cid:3)
(cid:1)(cid:2)(cid:4)
(cid:1)(cid:2)(cid:5)
(cid:1)(cid:2)(cid:6)
(cid:1)(cid:2)(cid:7)
(cid:1)(cid:2)(cid:8)
(cid:1)(cid:2)(cid:9)
(cid:1)(cid:2)(cid:10)
(cid:1)(cid:2)(cid:11)
(cid:3)(cid:2)(cid:1)
(cid:20)(cid:16)(cid:21)(cid:22)
(a) Top 20 Probabilities
(cid:18)(cid:16)(cid:17)(cid:19)(cid:20)(cid:16)(cid:21)(cid:13)(cid:22)(cid:20)(cid:23)(cid:22)(cid:23)(cid:24)(cid:19)(cid:23)(cid:25)(cid:13)(cid:26)
(b) Guessing entropy
Fig. 9: Probability estimates for the top 20 patterns and α–guessing entropy.
TABLE IX: Comparison of bits of information with α across all policies.
Policy
Original
1-Point
2-Point
3-Point
Random
Random Patterns (U389112)
Real-world 4-digit PINs [17]
Random 4-digit PINs (U10000)
Real-world 6-digit PINs
Random 6-digit PINs (U1000000)
0.1
5.04
7.54
7.16
6.95
11.20
18.57
5.19
13.29
10.71
19.93
0.2
5.82
8.19
7.91
7.81
11.84
18.57
7.04
13.29
13.32
19.93
0.3
6.54
8.67
8.40
8.52
12.44
18.57
8.37
13.29
14.03
19.93
0.4
7.19
9.16
8.92
9.12
13.02
18.57
9.38
13.29
14.50
19.93
α
0.5
7.86
9.67
9.47
9.69
13.58
18.57
10.08
13.29
14.92
19.93
0.6
8.50
10.21
10.02
10.29
14.11
18.57
10.63
13.29
15.36
19.93
0.7
9.20
10.82
10.65
10.96
14.60
18.57
11.08
13.29
15.86
19.93
0.8
9.97
11.57
11.39
11.71
15.04
18.57
11.44
13.29
16.49
19.93
0.9
11.00
12.44
12.30
12.59
15.44
18.57
11.70
13.29
17.14
19.93
1.0
12.71
13.67
13.62
13.79
15.81
18.57
11.83
13.29
17.53
19.93
(cid:3)μα
where pi is the probability of ithelement occurring in non-
i=1 pi, which is the actual
increasing order, and let λμα =
(cid:3)μα
fraction covered. With those notations, partial guessing entropy
is deﬁned as Gα(χ) = (1 − λμα ) · μα +
i=1 i · pi where
the traditional guessing entropy is a special case of partial
guessing entropy with α = 1.
Because our collected set of patterns only represent a small
portion of the theoretically possible password space, we em-
ployed the 3-gram Markov model to estimate the occurrence
likelihood of every possible pattern. A separate Markov model
was constructed for each policy. To cover rare n-gram cases,
we particularly used the Laplace smoothing approximation
technique – the frequency of each n-gram is incremented
by one. The Markov model is one of most representative
probabilistic password models to evaluate the guessability of
passwords [19].
The estimated probabilities of occurrence likelihood of
patterns are sorted in descending order, and the probabilities of
the top 20 patterns are plotted in Figure 9(a). The probability
graphs for the SysPal policies are ﬂatter than the graph for
the Original policy. Compared to the SysPal policies, the
pattern distribution for Orignal is skewed toward a small
number of commonly used patterns. Appendix C shows the
top 20 most likely used patterns in the SysPal policies and
Original policies, respectively.
As described in our attack scenario (see Section II-B),
a policy that restricts the number of allowed unlock fail
attempts (e.g., Android allows 20 consecutive attempts) could
be applied to effectively mitigate real-time, online guessing
348
attacks. For more intuitive comparison of entropy estimates,
entropy estimates can be represented in “bits of information.”
This conversion can be done as follows:
(cid:6)
(cid:5)
˜Gα(χ) = log
2 · Gα(χ)
λμα
− 1
+ log
1
2 − λμα
The converted results are shown in Table IX. As for the
real-world 4-digit PINs, we used a PIN dataset consisting of
204,508 PINs that was collected through an iPhone applica-
tion [17]. As for the real-world 6-digit PINs, we extracted
383,914 6-digit PINs from the popularly known “RockYou”
(32.6 million) and “Yahoo” (0.5 million) password datasets.
We constructed a 5-gram Markov model with those PINs to
estimate the guessing entropy of 6-digit PINs.
As expected, policy Random showed the highest guessing
entropy estimates in bits of information. All SysPal policies
showed higher entropy estimates than Original policy.
Among the SysPal policies, policy 1-Point showed a higher
guessing entropy estimate than other SysPal policies between
α = 0.1 and 0.4. Interestingly, policy 3-Point showed the
highest guessing entropy estimates from α = 0.5 onwards.
Next, based on those occurrence likelihood probabilities,
we computed partial guessing entropy estimates. Our entropy
results are plotted in Figure 9(b). As α increases, the differ-
ences between Original and all SysPal policies increases
signiﬁcantly, clearly demonstrating that SysPal patterns are
much more robust against guessing attacks even when α is
large. Unlike Original policy, all SysPal policies seem to
provide higher resistance to guessing attacks than real-world
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:42 UTC from IEEE Xplore.  Restrictions apply. 
TABLE X: Comparison of the percentage of cracked patterns across all policies.
Mean # of guessing attempts
Mean # of guessing attempts (≤ 20)
Mean % of cracked patterns (≤ 20)
Original
5,472.97
6.31
32.55%
1-Point
3,803.01
10.44
9.97%
2-Point
2,993.18
7.29
9.36%
3-Point
3,740.18
11.74
14.11%
Random
47,445.51
0.00
0.00%
4-digit PINs when α is less than 0.3. However, the guessing
entropies of the SysPal policies are still signiﬁcantly lower
than that of the real-world 6-digit PINs.
C. Pattern cracking
1) k-fold cross validation: As another metric for evaluating
the security of SysPal, we used a pattern cracking technique
that we designed using the 3-gram Markov model (see V-B).
We calculated the probabilities of all possible patterns, and
sorted them in descending order. This list of ordered patterns
were used as an organized, smart dictionary to efﬁciently crack
patterns.
To statistically generalize pattern cracking results, we ap-
plied the 10-fold cross validation method on each pattern set.
That is, the patterns collected for each policy was equally
divided into 10 subsets. One of the subsets was used as a
test set, and the remaining 9 subsets were used as the training
data. We repeated this validation process 10 times, where every
subset was used once as a test set. We then averaged the ratios
of cracked patterns on those 10 rounds.
2) Cracking results: The cracking results are summarized
in Table X. None of the Random patterns were cracked
in our experiments, demonstrating their robustness against
sorted dictionary-based guessing attacks. In contrast, 32.55%
of the Original patterns were successfully cracked within
20 guessing attempts, which was the largest percentage across
all policies. Much smaller portion of SysPal patterns were
cracked though: 9.36%, 9.97%, and 14.11% for 2-Point,
1-Point, and 3-Point, respectively. All SysPal policies
showed statistically signiﬁcant superiority over Original
in resisting our cracking technique (all p  0.9, corrected FET).
VI. LAB STUDY
As shown in Table IV, the recall success rate for Original
and SysPal policies was around 94-99% in all three tests.
Those results showed that people can recall SysPal patterns
just as well as Original patterns. However, since most
people unlock their phones more frequently in real life [13]
(and not based on the three artiﬁcial recall test durations we
experimented with), it is hard for us to make strong claims
about the memorability solely based on the ﬁrst study results.
To address this limitation of the ﬁrst study, we conducted
a separate lab study to collect screen unlock data that would
closely resemble real-life usage scenarios. To achieve strong
ecological validity, we implemented a screen unlock appli-
cation that mimics the current Android screen lock pattern
mechanism and supports SysPal policies. We asked the partic-
ipants to install it on their own Android phone, and use it for a
day. The goal of the lab study was to measure and analyze the
participants’ real-life unlock behaviors when SysPal policies
are used.
A. Methodology
Instead of using Mechanical Turk, this study was conducted
in a laboratory, where the participants (before doing the
study) were explained the study purpose, instructions, and
how SysPal patterns can be created (using the same examples
given to the Mechanical Turk participants). We selected three
representative policies to experiment with: policy Original
was chosen as the real-world reference, and two SysPal poli-
cies 1-Point, 2-Point were chosen as the best performing
SysPal policies in the ﬁrst study that did not show statistically
signiﬁcant difference against policy Original in the recall
success rate.
The participants were welcome to participate at anytime
between 10am and 10pm. In one day period, we recruited 46
participants from a university campus. Each participant was
sequentially assigned to one of the three policies. We followed
the methodology of the ﬁrst study (see Section III), with the
modiﬁcations explained bellow.
The participants were ﬁrst briefed on the purpose of the
study, and asked to sign a consent form. They were then asked
to submit demographics, and download and install our screen
unlock application. After installation, they were asked to select
a pattern based on the assigned policy, and use this pattern for
a day. To ensure that we do not affect their normal phone
usage behaviors, we did not give any additional instruction.
For those who were already using a screen lock mechanism,
we asked them to switch to using our application for a day.
An unlock attempt was marked as a “failed” attempt if a
participant failed to draw the correct pattern within 5 guesses.
A reminder email was sent 24 hours after the study started,
notifying the participants to come back and complete a survey
(the responses for Q2 and Q3 as described in Table II are
presented in Appendix D).
B. Demographics
We recruited a total of 46 Android users during a three-
day period. We carefully excluded two responses, one from a
participant who used an external storage, and another from
a participant who tried to disable our unlock application
during the study, leaving us with 44 valid responses. The
participants’ age ranged from 19 to 45 years. The majority
of the participants (62.2%) were graduate students, and about
73.3% were male.
C. Memorability
We ﬁrst estimated the 24-hour survival rate for each policy
based on the number of participants who correctly entered
349
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:42 UTC from IEEE Xplore.  Restrictions apply. 
TABLE XI: Lab study memorability results. Mean time (sec) taken to complete authentication, mean number of unlock attempts
made during the 24 hour period (μ: mean, σ: standard deviation), % of participants who survived the study, and % of successful
unlock trials across all participants.
Policy
# Participants