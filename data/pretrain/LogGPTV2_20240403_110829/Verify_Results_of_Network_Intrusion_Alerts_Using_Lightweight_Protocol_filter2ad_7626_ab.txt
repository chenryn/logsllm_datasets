fake entry into web server’s log ﬁle in order to avoid detec-
tion [29].
The result of an attack often has different meanings from
different view points. For example, a buffer overﬂow at-
tack often intends to execute a shell program. Thus, from
the view of the attack goal, executing a shell is a success-
ful attack result, but crashing a vulnerable application due
to imperfect overﬂow attack is not. By assumption 4, over-
running the buffer, regardless of executing a shell or not, is
considered as a successful attack.
Assumptions 5 and 6 are common in the real world. They
also give a performance beneﬁt to our approach, as dis-
cussed in Sect. 3.4.
3.2. Application Response
Below we use attacks against web servers as example
to illustrate our approach. We choose web attacks because
they comprise the majority of known attacks. Moreover,
web attacks are often more complicated than the attacks
against other network services because web servers often
serve as a platform for many high-level applications. Tech-
niques in analyzing web attacks are usually adequate for
analyzing other attacks. Typical web attacks can generate
many different results. We elaborate on the attacks and their
possible results, showing how to verify attack results based
on different responses from web servers.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:07:27 UTC from IEEE Xplore.  Restrictions apply. 
3.2.1 HTTP Protocol
A web server and its clients communicate through the
HTTP protocol. The HTTP protocol 1.1 deﬁnes a server
response as follows [10]:
Response
= S t a t u s −Line
∗ ( ( General−Header
| Response−Header
| E n t i t y −Header
)
CRLF
[ message−body ]
SP Reason−P h r a s e CRLF
S t a t u s −Line = HTTP−V e r s i o n SP S t a t u s −Code
process is continuing
The ﬁrst line of a server response is a well-formatted
Status-Line. In particular, the Status-Code element is a 3-
digit integer that indicates the result of a request. There are
ﬁve values for the ﬁrst digit [10], of which 2, 4 and 5 are of
the most concern:
• 1xx: Informational - The request was received, and the
• 2xx: Success - The request was successfully received,
• 3xx: Redirection - Further action must be taken in or-
• 4xx: Client Error - The request contains bad syntax or
• 5xx: Server Error - The server failed to fulﬁll an ap-
der to complete the request
understood, and accepted
cannot be fulﬁlled
parently valid request
3.2.2 Response to Attacks
Attacks against a web server can result in one of two kinds
of server responses: a response that obeys the HTTP pro-
tocol, or a response that does not. If an attack, typically a
buffer overﬂow attack, has changed the program logic of a
web server process, a response that does not obey the HTTP
protocol is often produced. This is called “erroneous server
response” in the following. Otherwise, the response follows
the HTTP protocol 2.
Attacks that cause a web server to generate erroneous
server responses are limited.
In particular, these attacks
must change the program logic of the web server pro-
cess. Such attacks typically include buffer overﬂows, in-
teger overﬂows and format string attacks against the web
server process. Since server side scripts, e.g., PHP and ASP
scripts, execute in the same address space of the web server
process, attacks against the scripts can potentially produce
erroneous server responses as well.
2Unless there exists a logic error in the web server program that can
generate erroneous server response on valid request, which we shall ignore
according to assumption 2.
Not all overﬂow-like attacks can trigger erroneous server
responses. Many web based applications are executing in a
different address space from the web server process, e.g.,
CGI programs. Successful overﬂow-like attacks against
these applications can change their program logic, but not
that of the underlying web server process. Thus, the web
server does not produce erroneous server responses for
these attacks.
For web attacks that do not change the program logic of
a web server process, the server responds with a Status-Line
following the HTTP protocol. In this case, the Status-Code
in the Status-Line of the server response often provides hint
about the attack result. Almgren et. al.[1] discusses such an
example: if an attack is targeting a vulnerable CGI program,
but the program does not exist on the server, a “404” Status-
Code is returned by the server. Thus, observing the “404”
Status-Code in the server response, an IDS knows the attack
has failed. A trickier example is to crash a CGI program via
a buffer overﬂow attack. In this case, the web server often
returns a “500” Status-Code. Thus, seeing the “500” Status-
Code indicates the attack has succeeded.
3.3. Methodology of Veriﬁcation
Therefore, to verify the result of an attack, we ﬁrst de-
termine whether the attack will trigger an erroneous server
response. If true, a server response that does not satisfy the
protocol means the attack has succeeded. If false, we will
determine the attack result via the status code in the server
response.
There are two veriﬁcation methods to determine the re-
sult of an attack based on the status code in the server re-
sponse: conﬁrming a negative result or conﬁrming a posi-
tive result.
Conﬁrming a negative result means to identify a set of
status codes that indicate an attack has failed. Often, the sta-
tus code is the same as the error code used in the protocols.
For example, a “4XX” status code in a web server response
means the web server cannot process a client request (e.g.,
a web page does not exist or the client is forbidden to ac-
cess it). As another example, a “45X” status code in an ftp
server response means a ﬁle or directory request has failed.
Such code in a server response to an attack often means the
attack has failed. Other status codes mean the attack has
either failed or succeeded depending on the property of an
attack. If it is difﬁcult to determine the attack result based
on the status code, the IDS should assume that the attack
has succeeded and report alerts. In this case, failed attacks
can be reported as successful attacks.
Conﬁrming a positive result requires ﬁnding a set of sta-
tus codes that show an attack has succeeded. Often the
status code is the same as the success code in the proto-
cols. For example, a “2XX” status code in a web server
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:07:27 UTC from IEEE Xplore.  Restrictions apply. 
response means that a client request has been successfully
processed. Thus, it is reasonable to believe that the attack
may have succeeded. But exceptions exist, depending on
the relevant property of an attack. For example, as discussed
earlier, even though a “5XX” response code means a web
server error, it can indicate a successful buffer overﬂow at-
tack against a CGI program. Except for this set of status
codes that we can use to verify successful attacks, other sta-
tus codes mean the attack has failed, or the status codes are
irrelevant to the attack.
Which method to choose depends on many factors, such
as the relevant property of an attack, the granularity of sta-
tus code deﬁned by a protocol, the ease of identifying an
accurate set of status codes to conﬁrm the positive or neg-
ative result, and the tolerance to accept false decisions. In
our implementation, we ﬁnd the ﬁrst method (conﬁrming a
negative result) is preferred though it introduces some im-
precision.
Because an attack is aimed at a speciﬁc vulnerability,
the number of possible outcomes is usually limited. Thus,
a complete protocol analysis is unnecessary, and we only
need to analyze the part of the protocol that is relevant to
the attack. For example, for an ftp attack to retrieve sensi-
tive ﬁles, the status codes to monitor would be those related
to ﬁle operations, i.e., “X5X”. We can safely ignore the sta-
tus codes related to authentication, i.e., “X3X”. This signif-
icantly simpliﬁes and facilitates the analysis in practice.
Though our discussion so far focuses on the HTTP pro-
tocol, the approach is also applicable to other popular net-
work application protocols, e.g., the FTP, SMTP and POP3
protocols. They share several properties:
• An application protocol is based on a request and re-
sponse model. An application client sends a request to
a server, and the server sends a corresponding response
back to the client.
• Considering each request and its response as a session,
sessions can be uniquely identiﬁed from the network
trafﬁc.
• Each server response has a well deﬁned format. In par-
ticular, it contains at least a status code chosen from a
pre-deﬁned domain of all meaningful status code.
• The status code appears at the beginning of the server
responses.
3.4. Performance Considerations
Our approach requires tracking network connections. It
is expensive in term of processing and memory overhead.
Dreger et. al. [9] ﬁnds three major factors of overhead in
network intrusion detection: (1) the total amount of state
kept by the IDS, (2) the network trafﬁc volume, and (3) the
(ﬂuctuating) per-packet processing time. Based on these
factors, we suggest several methods to reduce the amount
of data to inspect and to limit the lifetime of attack related
data in a NIDS’s memory.
We only verify the server response of detected attacks.
Thus, a NIDS can do detection on client requests as usual.
Once a malicious request has been found, the NIDS begins
to inspect the response. This optimization eliminates the ex-
amination of server responses for all normal network con-
nections, which comprise the majority of network trafﬁc.
Assumption 5 of Sect. 3.1 also helps reduce overhead.
Typically, a NIDS resides in the same network of the moni-
tored systems. It simpliﬁes connection state management of
the NIDS by avoiding delays between the moment a mon-
itored system sends a response and the moment the NIDS
observes the response because of network transmission de-
lay. Once the NIDS observes the response of an attack from
the monitored system, it can determine the attack result, and
immediately discard the attack related data from its mem-
ory. The lifetime of an attack session in the NIDS’s memory
is close to the processing time of a request by the monitored
system.
By assumption 6, a NIDS expends little effort to recon-
structing the response from multiple packets using network
trafﬁc reassembly techniques. This limits the data kept in
IDS memory and reduces the processing time.
Finally, since our analysis is primarily based on the
header in the server responses, NIDS processing time is
minimized. The header data usually appears only at the be-
ginning of a response, and is small enough to ﬁt into a single
network packet. Therefore, the NIDS needs to capture only
the ﬁrst packet in a response, and to analyze only a small
portion of the packet, which is adequate for verifying attack
results. The rest of the data can be ignored. This means
less processing time. The fact that the header is in the ﬁrst
packet can help verify the attack result as well. If a response
is unexpectedly fragmented or its size is very small, a valid
status code will not ﬁt in the ﬁrst packet of the response,
signalling of a successful attack.
4. Implementations
We have implemented our tool using Snort [22], a pop-
ular NIDS primarily based on misuse detection techniques.
Although other misuse NIDSes like Bro and NetSTAT pro-
vide better facilities to support our approach, we feel that
choosing Snort can beneﬁt its large user base. We used
Snort 2.3.0 in our implementation. Snort provides a simple
lightweight description language to deﬁne signatures. Each
signature is divided into two sections, the rule header and
the rule options. The rule header deﬁnes rule action, pro-
tocol, IP addresses and ports. The rule option speciﬁes the
method to inspect the network packets and other options,
e.g., reference to the vulnerability.
Our approach requires tracking connections between
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:07:27 UTC from IEEE Xplore.  Restrictions apply. 
network application server and client. Snort has two pre-
processors, stream4 and ﬂow, to support TCP reassembly
and stateful analysis. Each of the pre-processors provides a
rule option keyword and several options to specify the prop-
erties of TCP connections. For example, using the stream4
pre-processor, one can deﬁne the ﬂow option as to server in
a signature to inspect only the packets from client to server;
or, deﬁne the ﬂow option as established to inspect only the
packets after a TCP connection is established. Using the
ﬂow pre-processor, one can tag a user-deﬁned ﬂag to an in-
teresting TCP connection using the ﬂowbits option, and in-
spect only the packets in the tagged TCP connection. The
ﬂag can be cleared when it is not needed any more.
There is a limitation of the Snort signature description
language. If we want to inspect data A in a TCP connection
from the client to the server, and also inspect data B in the
same connection from the server to the client, we cannot do
so using a single rule. Thus, we have to introduce an extra
rule to inspect B.
4.1. Rule Conversion
We convert Snort signatures to handle our approach in
the following way. Using web attacks as example, for each
attack, we deﬁne at least two detection rules. The ﬁrst rule
is the same as the original Snort rule with two exceptions:
(1) the TCP connection that contains a malicious client re-
quest is tagged with a custom ﬂag using the ﬂowbits option;
(2) no alert is reported by this rule. The second rule in-
spects the web server response with the corresponding TCP
connection having an appropriate tag.