### (b) Number of Key Copies in Memory

**Figure 3. OpenSSH Case Study**

**Figure 3(a)** illustrates the locations of copies of the private key in memory, where “×” denotes a copy in allocated user or kernel space, and “+” represents a copy in unallocated memory. The following observations can be made from this figure:

1. **Initial Presence**: The OpenSSH private key is present in memory at time \( t = 0 \), even though the OpenSSH server does not start until \( t = 2 \). This is because the PEM-encoded file has been loaded into memory by the Reiser file system.
   
2. **Server Start**: When the OpenSSH server starts at \( t = 2 \), new “×” symbols appear, representing the components \( d \), \( P \), and \( Q \) of the private key.

3. **Client Requests**: At \( t = 6 \), when OpenSSH client requests begin, the number of copies of the private key in memory increases sharply. Additionally, copies of the private key start to appear in unallocated memory.

4. **Request Cessation**: When client machines stop issuing requests at \( t = 18 \), the number of copies of the private key in allocated memory drops sharply. However, many copies of the private key are not erased before entering unallocated memory.

5. **Server Shutdown**: When the OpenSSH server stops at \( t = 22 \), \( d \), \( P \), and \( Q \) exist only in unallocated memory, except for the PEM-encoded private key file, which remains in the Linux kernel’s page cache.

**Figure 3(b)** shows the total number of copies of the private key in memory, with lightly shaded bars representing copies in allocated memory and dark shaded bars representing copies in unallocated memory.

### Summary

In both the OpenSSH and Apache HTTP servers (details of the Apache case are deferred to [13]), numerous copies of the private key can be found in both allocated and unallocated memory. This confirms our suspicion that cryptographic keys tend to proliferate in memory as the number of SSH/HTTP connections increases, even in newer operating systems. This proliferation explains why the previously tested attacks were so effective.

### 4. Countering Memory Disclosure Attacks

The analysis in the previous section suggests the following countermeasures:

1. **Minimize Allocated Copies**: Ensure that a cryptographic key appears in allocated memory a minimal number of times (e.g., once) without degrading system performance.
   
2. **Prevent Unallocated Copies**: Ensure that unallocated memory (or any other place with disclosure potential, such as swap space) does not contain a copy of a cryptographic key.

To achieve these goals, we present a set of solutions at different layers, from the application down to the operating system kernel.

#### Application Level Solution

1. **Copy on Write Policy**: Utilize the "copy on write" memory management policy [17] to avoid unnecessary duplications of cryptographic keys. Specifically, place the private key in a special memory region and ensure no process writes to that region. This ensures the private key exists only once in physical memory, in addition to the PEM-encoded private key file.
   
2. **Avoid Explicit Copies**: Ensure the private key is not explicitly copied by the application or any involved libraries. Disable swapping of the memory containing the key using appropriate system calls to prevent the key from appearing in unallocated memory.

#### Library Level Solution

Eliminate unnecessary duplications of cryptographic keys in allocated memory using the same measures suggested in the application level solution. This prevents private keys from appearing in memory other than the special region and the PEM-encoded private key file.

#### Kernel Level Solution

Ensure that unallocated memory does not contain any private keys. This can be achieved by having the kernel zero any physical pages before they become unallocated.

#### Integrated Library-Kernel Solution

Integrate the library and kernel level mechanisms to provide stronger protection. This eliminates unnecessary duplications of private keys in allocated memory and their appearance in unallocated memory. Additionally, this solution can remove the PEM-encoded private key from allocated memory if the library instructs the kernel not to cache the PEM-encoded private key file. This solution should be adopted whenever possible.

### 5. Protecting Keys of OpenSSH Servers

#### Implementing the Application Level Solution

We implement the general solution with a function, `RSA_memory_align()`, which should be called as soon as OpenSSL’s RSA data structure contains the private key. This ensures exactly one copy of the private key appears in allocated memory, in addition to the PEM-encoded file. Note that the OpenSSH server must be started with the undocumented `-r` option to prevent re-execution after every incoming connection.

**Characteristics of `RSA_memory_align()`**:

1. **Memory Management**: Uses `posix_memalign()` to request one or more memory pages for the special memory region. It then copies the private key into this region, zeros and frees the original memory, updates pointers in the RSA data structure, and sets the `BN_FLG_STATIC_DATA` flag to inform OpenSSL that the private key is now exclusively located in the special region.
   
2. **Prevent Caching**: Unsets the `RSA_FLAG_CACHE_PRIVATE` flag in the flags member of the associated RSA data structure to prevent caching by `RSA_eay_mod_exp()`. Additionally, it disables swapping of memory containing the private key by calling `mlock()` on the memory allocated by `posix_memalign()`.

#### Implementing the Library Level Solution

Modify the OpenSSL function `d2i_PrivateKey()`, which translates a PEM-encoded private key file into the RSA key parts. After `d2i_RSAPrivateKey()` returns, immediately call `RSA_memory_align()`.

#### Implementing the Kernel Level Solution

Modify the kernel function `free_hot_cold_page()` to clear memory pages via `clear_highpage()` before adding them to the list of free pages. This ensures no private key appears in unallocated memory.

#### Implementing the Integrated Library-Kernel Solution

In addition to the modifications in the library and kernel level solutions, introduce a new flag, `O_NOCACHE`, to allow an application to instruct the kernel to immediately remove the PEM-encoded private key file from the page cache. Specifically, when the PEM-encoded private key file is read, the kernel gives the file contents to the requester and checks if the `O_NOCACHE` flag is specified. If so, the kernel immediately deletes the corresponding page cache entry by calling `remove_from_page_cache()` before calling `free_page()`.

### Experimental Results

1. **Attack Re-examination**: We re-examined the attack based on [14] against the vulnerable 2.6.10 Linux Kernel, patched with our respective solutions. In no case were we able to recover any copy of the private key.
   
2. **Integrated Solution Effectiveness**: We re-examined the attack based on [10] against the same vulnerable 2.6.10 Linux kernel, but with our integrated library-kernel solution. **Figure 4(a)** compares the average number of private key copies found in the USB device before and after deploying our solution, showing a reduction. **Figure 4(b)** compares the success rate of attacks, reducing the rate from about 90% to about 50%. The attack still succeeds with a probability of about 50% because it discloses on average about 50% of the memory. Complete elimination of such powerful attacks may require special hardware devices.

### 6. Conclusion

We investigated mechanisms to address the exposure of cryptographic keys caused by memory disclosure attacks. Our mechanisms can eliminate attacks that disclose unallocated memory and mitigate damage from attacks that disclose a small portion of allocated memory. To eliminate powerful attacks that can disclose a large portion of memory, special hardware devices may be necessary.

### Acknowledgement

We thank the anonymous reviewers for their valuable comments and our shepherd, Luigi Romano, for his constructive suggestions that improved the paper. This work was supported in part by ARO, NSF, and UTSA.

### References

[1] R. Anderson. On the forward security of digital signatures. Technical report, 1997.

[2] M. Bellare and S. Miner. A forward-secure digital signature scheme. In Proc. Crypto’99, pages 431–448.

[3] Bochs. The Bochs IA-32 Emulator Project. http://bochs.sourceforge.net/.

[4] P. Broadwell, M. Harren, and N. Sastry. Scrash: A system for generating secure crash information. In Usenix Security Symposium’03.

[5] J. Chow, B. Pfaff, T. Garfinkel, K. Christopher, and M. Rosenblum. Understanding data lifetime via whole system simulation. In Usenix Security Symposium’04.

[6] J. Chow, B. Pfaff, T. Garfinkel, and M. Rosenblum. Shredding your garbage: Reducing data lifetime. In Proc. USENIX Security Symposium’05.

[7] G. Di Crescenzo, N. Ferguson, R. Impagliazzo, and M. Jakobsson. How to forget a secret. In STACS’99.

[8] Y. Desmedt and Y. Frankel. Threshold cryptosystems. In Proc. Crypto’89, pages 307–315.

[9] Y. Dodis, J. Katz, S. Xu, and M. Yung. Key-insulated public key cryptosystems. In Proc. EUROCRYPT’02.

[10] Georgi Guninski. Linux kernel 2.6 fun. Windoze is a joke. http://www.guninski.com/where_do_you_want_billg_to_go_today_3.html (dated 15 February 2005).

[11] G. Itkis and L. Reyzin. Forward-secure signatures with optimal signing and verifying. In Crypto’01.

[12] G. Itkis and L. Reyzin. Sibir: Signer-base intrusion-resilient signatures. In Crypto’02.

[13] K. Harrison and S. Xu. Full version of the present paper available at www.cs.utsa.edu/~shxu.

[14] Mathieu Lafon and Romain Francoise. Information leak in the Linux kernel ext2 implementation. http://arkoon.net/advisories/ext2-make-empty-leak.txt (Arkoon Security Team Advisory - dated March 25, 2005).

[15] R. Ostrovsky and M. Yung. How to withstand mobile virus attacks (extended abstract). In PODC’91.

[16] N. Provos. Encrypting virtual memory. In Proc. Usenix Security Symposium’00.

[17] A. Silberschatz, P. Galvin, and G. Gagne. Operating System Concepts (sixth ed.). John Wiley & Sons.

[18] J. Viega. Protecting sensitive data in memory. http://www.cgisecurity.com/lib/protecting-sensitive-data.html, 2001.

[19] J. Viega and G. McGraw. Building Secure Software. Addison Wesley, 2002.