than once per hour.
The RF messages are
transmitted at a frequency of 345MHz +/-
82KHz using an off-keyed AM modulation
method.
5815MN Duty Cycle Calculation
Message protocol, timing and duty cycle
calculation.
The data output is phase
encoded Manchester that has inherent 50%
duty cycle and consists of 64 bits per
word.
A supervision transmission is six
identical words separated by (start to
start) by nominal 125mS (100mS min.
to
150mS max).
Each message has a nominal
data rate of 3.7 kb/s (3.2 kb/s min.
to
4.2kb/s max).
Therefore the duty cycle
is calculated as follows:
The word format consists of 64 bits, The
duration of each bit is 312.5 uSec max.
The duty cycle over a 100 mSec measuring
period is calculated as follows:
Duty cycle = Actual RF transmission ON
time / 100 mSec
Actual transmission ON time = 64 bits X
50% X 312.5 uSec = 10 mSec
Therefore duty cycle = 10 / 100 mSec
= 0.10 = 10%, peak to average field
strength is 20 dB.
Total on-air time for a supervision
transmission is:
64 X 312.5 uSec + (5
X 150 mSec) = 0.77 seconds.
In the case of an alarm transmission, the
group of six transmissions is repeated
twice, with the second group delayed from
the first by a max.
time of 2 seconds.
The worst case on-air time is 2 X (super-
vision time) + 2 = 3.54 seconds.
Summary:- Duty cycle = 10%
On-air time = 3.54 seconds.
Figure 2: Excerpt from FCC ﬁlings
Figure 3: Honeywell Jamming Flow-Chart
third block, a type conversion from int to ﬂoat, and create
a valid ﬂow chart that can generate noise on 345MHz.
We found the spot jammer ﬂow chart to be surprisingly ef-
fective on the Honeywell system. With this capability, an
adversary can covertly inﬁltrate and exﬁltrate from a pro-
tected area without the system alerting the occupants or
the monitoring company. But there is a caveat. Manufac-
turers of home security equipment are aware of this attack,
and have incorporated ’RF Jam’ detection into most of their
alarm devices.
4.3.2
Jamming with RF Jam Enabled
After enabling RF Jam on the Honeywell system the pre-
vious ﬂow chart no longer worked. If left running for too
long, the system would notify the occupants and monitoring
company of the RF Jam event. Interestingly, the system did
not notify the occupants until the ﬂow chart had been run-
ning for about a minute, so we devised some tests to see how
the RF Jam detection is implemented. Our ﬁrst hypothesis
is that it simply checked if the noise ﬂoor was elevated for
a particular period of time. The second hypothesis is that
after the system received a number of malformed packets it
would trigger the RF Jam event.
We tested the elevated noise ﬂoor hypothesis by running the
spot jammer ﬂow chart for 20 seconds, turning the jammer
o↵ for a second, and turning it back on. The code to do this
was a simple modiﬁcation to the generated Python program
of the spot jammer. We found we could lower the o↵ time
to a quarter of a second and still avoid RF Jam detection.
We tested the arbitrary number of malformed packets hy-
pothesis by creating a ﬂow chart which broadcasts a simple
square wave at the baud rate of transmission with duty cycle
under 25%. The pulse jamming ﬂow chart can be seen in
Figure 4. The ﬂow chart’s purpose is not to jam the trans-
missions from sensors, but to mangle them. After testing,
this approach was e↵ective at jamming.
We found two approaches to jam transmissions without trig-
gering RF Jam events. Given a choice, systems with RF Jam
detection enabled are actually more desirable targets than
without. An adversary can both suppress alarms for covert
inﬁltration and exﬁltration with active jamming and trigger
alarms with the spot jamming.
4.4
SIGINT
There are multiple tiers of SIGINT. The ﬁrst, and simplest,
is the capture of RF transmissions. If the adversary can dis-
cern through observation what event the RF transmission is
Figure 4: Honeywell Pulse Jamming Flow-Chart
Figure 5: Converting RF to bitstream
triggering, then they can replay the transmission and trig-
ger the witnessed event. The second, less simple approach
is to capture the RF transmissions and demodulate them
to recover transmission packets.
The adversary may not
know exactly what the packets are communicating, but if
the transmitted packets have no dynamic components, i.e.,
sensors always send the same couple of packets, then the
adversary may be able to discern the meaning without fully
reverse engineering the protocol. The last approach is full
reverse engineering of the captured packets, which requires
the most e↵ort and has the highest payo↵.
We will now
cover these three approaches to SIGINT.
4.4.1
RF Transmission Capture with GRC
The simplest of ﬂow charts, we connect our USRP source
with center frequency set to 345MHz to a ﬁle sink. In doing
so, we store whatever is captured by the USRP while the
ﬂow chart is running. We will use the generated ﬁle at a
later time for replay. The ﬂow chart can be seen in Figure
4.
4.4.2
Bitstream Capture with GRC
From Figure 2, the following pertinent information is avail-
able to us:
• Center Frequency: 345MHz
• Modulation: o↵-keyed AM modulation (OOK)
• Baud Rate: 3200
• Line Coding: Manchester
Figure 6: A Honeywell transmission converted to a
binary signal
The purpose of the ﬂowchart in ﬁgure 5 is to convert an OOK
modulated signal to a bitstream. It is composed of a low
pass ﬁlter, complex to magnitude squared, and thresholding
blocks.
The primary purpose of the low pass ﬁlter is to
decimate the signal from the sampling rate of the SDR to
something more manageable. We selected a decimation rate
of 75 so that the output sampling rate of this ﬂow graph
will be ten times the baud rate of 3.2K. This relatively high
sampling rate will allow us to easily detect long and short
pulses. The complex to magnitude squared is used to convert
the complex signal into something closer to a square wave.
Finally, the thresholding block is used to convert the signal
into a binary signal. The ﬁle sink dumps the binary signal.
The generated bitstream ﬁle is not just a step towards re-
verse engineering the protocol; it increases the e↵ectiveness
of replay attacks. By creating a bitstream, we have removed
all the noise from the RF signal. So, when we replay we can
increase the gain and not worry about distorting the binary
signal. A sample output packet can be seen in Figure 6.
4.4.3
Bitstream to Packets with GNU Radio and Python
Now that we have a reliable bitstream, we can use additional
pertinent information from Figure 2:
• Word Length: 64 bits
From Figure 6, it appears the signal has a preamble for
synchronization.
So, we’ll leverage that to ﬁgure out the
average number of samples per bit. Once we have an average
number for samples per bit, we read from the stream until
we have 64 and then proceed to manchester decode them.
This is a pure programming exercise. Of interest though, it
is very easy to ﬁll the bu↵er of the SDR resulting in dropped
samples. The implementation has a concurrent solution to
consume samples quickly. One thread is constantly doing
block reads from the SDR output ﬁle and removing dead air
(all zeros). If there is an instance of live transmission it adds
those samples to a deque which the program reads from.
We now have a reliable packet stream. For each door sensor
in our the Honeywell system, we trigger door open, door
closed, and door tamper events. We also set o↵ the motion
detectors. The packets captured from each device were static
for each event type. So, a door open event will be the same
every time it triggers for a particular sensor. The captured
packets are in Figure 7.
# door sensor, serial:
A 031-6418
0xfffe84d40280512c
0xfffe84d402a0d1ef
0xfffe84d402e0506c
# door sensor, serial:
A 102-6691
0xfffe8faa83804d3d
0xfffe8faa83a0cdfe
0xfffe8faa83e04c7d
# motion sensor, serial:
unknown
0xfffe8cf96c00944e
0xfffe8cf96c021441
0xfffe8cf96c80174d
# motion sensor, serial:
A 070-4201
0xfffe8abec9003728
0xfffe8abec902b727
0xfffe8abec980b42b
# motion sensor, serial:
A 085-0206
0xfffe8cf91e00384b
0xfffe8cf91e80bb48
Figure 7: Honeywell Sensor Packets
4.4.4
Reverse Engineering the Protocol
Now that we have packetized the bitstream we can focus on
reverse engineering of the protocol. Again, from the Duty
Cycle Calculation documentation in Figure 2, it appears for
each type of broadcasted message there is only one word
which is repeated multiple times.
We now induce the behaviors detailed above (door open,
door closed, tamper) in the two door sensors and get the
results in Figure 7.
Now we focus our e↵orts on identifying static and dynamic
parts of the packets. Within each door’s packets the ﬁrst
5 bytes are static, and for all devices the ﬁrst 5 nibbles are
static. Immediately we recognize what looks like a pream-
ble and sync bit, 0xfffe. For each door sensor, there is a
static part of the message that is unique to the door sensor,
0x84d402 and 0x8faa83. Ignoring the leading 0x8, 0x4d402
and 0xfaa83 are the serial numbers of the door sensors in
hex. All wireless Honeywell sensors start with an A so that
part of the serial is implied. By identifying the serials in the
packets, we now have the capability of uniquely identifying
sensors.
The last 3 bytes of these packets are the only ones which
are dynamic. The ﬁrst byte of these three appears to be the
packet type (0x80, 0xa0, 0xe0). That leaves only the last
two bytes to be reversed. The last two bytes are most likely
for integrity checks, so we run RevEng over our packets to
see if the last two bytes are the product of a known CRC.
Sure enough, they are CRC BUYPASS.
The completely reverse engineered protocol for these door
0x0fffe Preamble and sync bit
0x8 Unknown
0xXXXXX Device serial number
0x{80,a0,e0} Packet type
0xXXXX CRC16-BUYPASS
Figure 8:
Honeywell Packet Format
sensors is in Figure 8.
The correctness of the protocol is
conﬁrmed by applying it to the motion detectors.
4.5
Situational Awareness using SIGINT
We now have a solution to convert the RF transmissions
from sensors into meaningful messages. The sensors trans-
mit events regardless of the system’s armed state. This is
what allows us to accumulate information on occupants.
The utility of the captured transmissions is directly pro-
portional to the number collected.
So, a single captured
transmission in isolation does not provide much intelligence.
However, a single transmission in the context of all captured
transmissions can provide quite a bit of insight, allowing us
to draw conclusions on habitual and anomalous behavior.
4.5.1
Differentiating sensors types
Doors and motion detectors share a common packet type,
namely 0x80. Thankfully we have some other features that
help us di↵erentiate the sensor type. Doors sensors transmit