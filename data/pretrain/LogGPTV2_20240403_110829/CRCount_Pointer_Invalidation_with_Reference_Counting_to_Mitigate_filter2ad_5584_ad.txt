copied to another region, the pointers belonging to the object
are copied as well. Therefore, to keep track of the copied
pointers correctly, the corresponding bits of the pointer bitmap
also have to be copied. Next, after the migration, realloc
frees the original memory region. In CRCount, however, the
free action only has to be allowed when the reference count
becomes zero. To enforce this rule, we modiﬁed realloc
to let the runtime library decide when to free the original
region, as was done in the free function. The runtime library
(1) allows the memory allocator to perform the free action if
the reference counter is zero or (2) just sets the freeable ﬂag
otherwise.
Multithreading support. Multithreading support can be
enabled in CRCount by deﬁning ENABLE_MULTITHREAD
macro variable when building the runtime library. Two ma-
jor data structures—the reference counters and the pointer
bitmap—have to be updated atomically to support multithread-
ing. The reference counters need atomic operations because
multiple threads can store or kill the pointers to the same
heap object at the same time. As a reference counter is just
a single word, we simply used the atomic operations deﬁned
in the c11 standard library. We assume that the threads in the
target program do not write to the same pointer concurrently
without a proper synchronization. We believe that this is a
reasonable assumption as it indicates a race condition in the
original program. The pointer bitmap also must be maintained
in an atomic fashion. Even if we have the above assumption,
multiple threads could write pointers to the nearby memory
locations which could end up in the same word in the pointer
bitmap. Thus, we also use the atomic operations whenever
the bitmap is updated. Besides the reference counters and
the pointer bitmap, we made a small change in the per-
object metadata allocation/deallocation routine to ensure thread
safety.
Note that all of the data structure updates in CRCount only
require touching just one word which makes multithreading
support very simple and also very efﬁcient in most cases.
However, we have encountered a worst case in one of the
benchmarks that we tested, where only a small number of
objects are allocated and their reference counters are frequently
updated by multiple threads. In this case, there will be many
lock contentions for the reference counters, which results in a
considerable performance overhead. We will give more detail
in §VII.
8
Double free and invalid free. We can simply implement
the prevention capability for double frees on CRCount. As a
freeable ﬂag of per-object metadata indicates that free has
been called for an object, we can easily detect if free is called
multiple times for the object. CRCount can also be extended to
prevent invalid frees. If free is called for an invalid pointer,
CRCount can easily detect it because there either will be no
valid mapping for the pointer in the pointer-to-object map, or
the base address of the object metadata will not match the
pointer value.
C++ support. For the most part, CRCount can naturally
support C++ because CRCount instrumentation operates on
LLVM IR, which is language independent and thus does not
distinguish between C and C++. C++ concepts like templates,
dynamic binding, etc. are lowered to basic functions and
LLVM instructions and do not require separate handling by our
LLVM plugin. However, C++ new and delete require some
special care. Recall that CRCount delays freeing of the object
until its reference count becomes zero. For C++, CRCount
must invoke the correct deallocation function according to the
function that was used to allocate the object. malloc, new,
and new [] are three possible choices for the allocation of
the object, and the corresponding deallocation function must
be used to deallocate the object. To achieve this, CRCount
uses the additional bits next to the freeable ﬂag in the per-
object metadata to record and call the right function for the
deallocation of the object.
VII. EVALUATION
In this section, we evaluate CRCount by measuring the
performance overhead and the memory overhead imposed by
CRCount in well-known benchmarks and web server appli-
cations. All the experiments have been conducted on Intel
Xeon(R) CPU E5-2630 v4 platform with 10 cores at 2.20 GHz
and 64 GB of memory, running Ubuntu 64-bit 16.04 version.
We applied minor patches to a few of the benchmarks to assist
our reference counter management. In §IX, we will explain
these cases in detail.
A. Statistics
The performance and memory overhead of CRCount can
vary depending on the characteristics of the target program.
In particular, the number of pointer store operations and the
memory usage of CRCount can be a crucial indicator for
analyzing the experimental results. Thus, we gathered some of
the statistics for the SPEC benchmarks [12] which we will refer
to when analyzing the performance and memory overheads in
this section. Table II shows the results for the SPEC CPU2006
benchmarks.
Here, we ﬁrst compare the number of pointer stores tracked
down by CRCount with that by DangSan. We will explain
other metrics later in this section. As shown in the # ptr
stores by inst. column and the # ptrs column, in
many benchmarks, we can see that the number of pointer
stores by the store instruction measured in CRCount is larger
than the one in DangSan. The differences are mainly due
to a small patch we applied to LLVM in order to ease our
static analysis. Speciﬁcally, we disabled a part of the bitcast
folding optimization, which complicates our backward data
ﬂow analysis in tracing the casting operations. We expect the
numbers to be decreased if we elaborate on our static analysis
to support the optimization, which would also give a small
performance improvement for CRCount.
In the case of dealII and xalancbmk, CRCount kept
track of a fewer number of pointer stores than that of DangSan.
This is due to a minor hack in our LLVM plugin that is applied
to avoid the problem of incorrect reference counter manage-
ment in the programs that use the C++ templates from the C++
standard library. Speciﬁcally, the problem occurred because
only the part of the library code for the template functions
deﬁned in the header ﬁle was instrumented by our plugin while
the rest was not instrumented. In order to solve this problem,
we compiled the program with the -g option to include the
debug symbols and excluded the instructions originating from
the library during the instrumentation. Another way to solve
this problem would be to compile and instrument the entire
standard library with CRCount.
B. Performance Overhead
To measure the performance overhead of CRCount, we ran
and recorded the execution times for several benchmarks and
server programs. We compare the performance overhead of
CRCount with DangSan and Oscar, which are the latest work
in this ﬁeld. We used the open-sourced version of DangSan
for our evaluation while using the numbers reported in the
paper for Oscar. We also report the performance overheads for
BDW GC. To use BDW GC, programs must use special APIs
for memory allocation routines (e.g., GC malloc instead of
malloc) to let the GC track and automatically release the object
when there are no references to it. BDW GC provides an option
to automatically redirect all of the C memory management
functions to use the APIs. We used this option and another
option that makes GC to ignore the free function. As we later
specify, we were not able to compile or correctly run some
C application, which indicates that some porting efforts are
required to use BDW GC for UAF mitigation. Also, simple
API redirection does not work for C++ applications. Instead,
all the class needs to inherit from special gc class which
provides a new deﬁnition of operator new. Classes that
already have a custom operator new function will have
to be changed. Because of these reasons, we only show the
results for the subset of the C benchmarks which we were
able to compile and run correctly.
First, to measure the performance impact on the single-
threaded applications, we ran the SPEC CPU2006 bench-
mark suite 3.
Figure 3 shows the results. For CRCount,
the geometric mean of all benchmarks is 22.0%, which is
approximately the half that for DangSan and Oscar, which
respectively are 44.4% and 41%. The performance efﬁciency
of CRCount is even more evident in the pointer intensive
benchmarks (omnetpp, perlbench, and xalancbmk). For
these benchmarks, CRCount only incurs an average overhead
of 92.0%, while both DangSan and Oscar show over 300%.
For povray, CRCount incurs a higher performance overhead
than Oscar and DangSan. For the case of Oscar, note that
Oscar does not instrument any memory access. This gives
Oscar performance advantages for some benchmarks like
3linked with the single-threaded version of CRCount runtime library
9
benchmark
# tot alloc.
# ptr stores
by inst.
400.perlbench
401.bzip2
403.gcc
429.mcf
433.milc
444.namd
445.gobmk
447.dealII
450.soplex
453.povray
456.hmmer
458.sjeng
462.libquantum
464.h264ref
470.lbm
471.omnetpp
473.astar
482.sphinx3
483.xalancbmk
350m
264
28m
21
6531
1340
622k
151m
236k
2427k
2394k
21
165
178k
20
267m
4800k
14m
135m
44507m
2200k
9328m
10086m
2663m
2998k
609m
30m
876m
5784m
4458k
4
130
11m
6004
13099m
1235m
326m
1711m
CRCount
# ptr stores
by memcpy max mem.
1103 MB
3362 MB
4075 MB
1676 MB
679 MB
46 MB
117 MB
791 MB
877 MB
2 MB
41 MB
172 MB
96 MB
111 MB
409 MB
154 MB
471 MB
44 MB
385 MB
242m
0
13m
574k
0
1198
10
13m
1731k
2409m
0
0
72
845m
0
14m
7667k
0
1633
max
undeleted
5838 KB
0
7491 MB
0
21 MB
0
34 KB
2048 KB
27 MB
18 KB
12 MB
0
32 B
1609 KB
0
1301 KB
91 MB
11 KB
1018 KB
max undel.
/ max mem.
0.005
0
1.838
0
0.032
0
0
0.003
0.032
0.007
0.291
0
0
0.014
0
0.008
0.195
0
0.003
leaks
1680 B
0
288 KB
0