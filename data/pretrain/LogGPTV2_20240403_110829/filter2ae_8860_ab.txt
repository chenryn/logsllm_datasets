中的域名等，我们需要动态替换所有静态文件里的域名为自己的服务器地址或个人域名，并提供 `cryptonight.wasm`
等其他资源访问，所以我们来修改第一段代码，其中构造的 `web` 实例里需要替换那个 “撒fufu的”页面，将 `res.end('Pool
Worked!'); // Change at Next...` 替换为如下：
    req.url = (req.url === '/') ? '/index.html' : req.url;
        fs.readFile(__dirname + '/web' + req.url, (err, buf) => {
            if (err) {
                fs.readFile(__dirname + '/web/404.html', (err, buf) => {
                    res.end(buf);
                });
            } else {
                if (!req.url.match(/\.wasm$/) && !req.url.match(/\.mem$/)) {
                    buf = buf.toString().replace(/%deepMiner_domain%/g, conf.domain);
                } else {
                    res.setHeader('Content-Type', 'application/octet-stream');
                }
                res.end(buf);
            }
        });
将所需的web文件，放入web文件夹，其中lib文件夹放入 `cryptonight-asmjs.min.js` / `cryptonight-asmjs.min.js.mem` / `cryptonight.wasm` ，最终我们拥有了一个200行代码写出来的 `Pool_Proxy` 中间件！
## deepMIner 项目实例
参考Repo: 
Example: 
    deepMiner.git
    .
    |-- README.md
    |-- banner
    |-- config.json
    |-- package-lock.json
    |-- package.json
    |-- server.js
    |__ web
        |-- 404.html
        |-- deepMiner.js
        |-- demo.html
        |-- index.html
        |-- lib
        |   |-- cryptonight-asmjs.min.js
        |   |-- cryptonight-asmjs.min.js.mem
        |   |__ cryptonight.wasm
        |__ worker.js
## 构建属于自己的Pool
（以下内容，可以跳过或者选取阅读。你可以直接在 `config.json`
里使用对外开放的公共矿池，也可以继续跟着本文，搭建自己的矿池。因为这个200行的Pool_Proxy已经可以完美地独立运转了！）
既然中间件有了，按道理我们可以直接使用，但还是想自行控制全部权限。
所以，不如再来一起搭建一个完全属于自己的矿池吧！
Github: 
Monero: 
### 搭建Monero
首先，保证我们的服务器有 `1C1G` 的标准，因为本矿池并不对外，可以只在localhost运行，所以我们不需要太大的规格来容纳那么多连接。
但是为了确保万一别用着用着就宕了……我们还是先设置一下虚拟内存吧……
    dd if=/dev/zero of=/mnt/myswap.swap bs=1M count=4000
    mkswap /mnt/myswap.swap
    swapon /mnt/myswap.swap
再把设置出来的内存，挂载到系统里 `vi /etc/fstab` 并加入如下（保存退出： `:wq` ）
    /mnt/myswap.swap none swap sw 0 0
接下来解决Pool的依赖问题：
    apt-get install build-essential libtool autotools-dev autoconf pkg-config libssl-dev
    apt-get install libboost-all-dev git libminiupnpc-dev redis-server
    add-apt-repository ppa:bitcoin/bitcoin
    apt-get update
    apt-get install libdb4.8-dev libdb4.8++-dev
麻烦的事情总是要来的，我们需要得到完整版区块链信息来完成交易和任务发布，所以需要构建可信的 `monerod` 本地进程。
具体Monero版本如果更新了，可以去官网下载布置，本文目前以0.11.0.0版本介绍。（见上方链接）
    cd
    mkdir monero
    cd monero
    wget https://downloads.getmonero.org/cli/monero-linux-x64-v0.11.0.0.tar.bz2
    tar -xjvf monero-linux-x64-v0.11.0.0.tar.bz2
然后运行 `./monerod` 开始长达3-6小时的下载区块链信息和验证完整性……
当然，官网也介绍了一个更方便的方式，直接手动下载 `raw` 文件并导入验证。
    // 下载并验证导入
    wget -c --progress=bar https://downloads.getmonero.org/blockchain.raw
    ./monero-blockchain-import --verify 0 --input-file ./blockchain.raw
    // 验证完之后就可以移除辣~
    rm -rf ./blockchain.raw
    // 继续开启demon并后台运行
    ./monerod --detach
### 搭建Pool
可以参见官方文档：
之前已经下载了 `nodejs` 所以不做重复下载。我们还需要 `Redis` 解决Pool的数据库问题。
关于Redis安装，一搜一大堆，不再啰嗦。
> 请注意：切记设置Redis为本地服务，不要对外开放，可以自行设置密码。
>
> 参见：
搭建完Redis数据库，我们来从github下载最新的源码，着手布置Pool。
    cd /srv
    git clone https://github.com/zone117x/node-cryptonote-pool.git pool
    cd pool
    npm update
等npm更新下载完毕，我们来进行配置
    cp config_example.json config.json
`vi config.json` 开始配置Pool信息
    /* Used for storage in redis so multiple coins can share the same redis instance. */
    "coin": "monero",
    /* Used for front-end display */
    "symbol": "MRO",
    "logging": {
        "files": {
            /* Specifies the level of log output verbosity. This level and anything
               more severe will be logged. Options are: info, warn, or error. */
            "level": "info",
            /* Directory where to write log files. */
            "directory": "logs",
            /* How often (in seconds) to append/flush data to the log files. */
            "flushInterval": 5
        },
        "console": {
            "level": "info",
            /* Gives console output useful colors. If you direct that output to a log file
               then disable this feature to avoid nasty characters in the file. */
            "colors": true
        }
    },
    /* Modular Pool Server */
    "poolServer": {
        "enabled": true,
        /* Set to "auto" by default which will spawn one process/fork/worker for each CPU
           core in your system. Each of these workers will run a separate instance of your
           pool(s), and the kernel will load balance miners using these forks. Optionally,
           the 'forks' field can be a number for how many forks will be spawned. */
        "clusterForks": "auto",
        /* Address where block rewards go, and miner payments come from. */
        "poolAddress": "4AsBy39rpUMTmgTUARGq2bFQWhDhdQNek******************************************************************"
        // 上方一定要记得替换为自己的Wallet地址
        /* Poll RPC daemons for new blocks every this many milliseconds. */
        "blockRefreshInterval": 1000,
        /* How many seconds until we consider a miner disconnected. */
        "minerTimeout": 900,
        // 这里可以根据web挖矿，适当降低难度，也不需要这么多端口。
        "ports": [
            {
                "port": 1111, //Port for mining apps to connect to
                "difficulty": 100, //Initial difficulty miners are set to
                "desc": "Low end hardware" //Description of port
            },
            {
                "port": 2222,
                "difficulty": 500,
                "desc": "Mid range hardware"
            },
            {
                "port": 3333,
                "difficulty": 1000,
                "desc": "High end hardware"
            }
        ],
        /* Variable difficulty is a feature that will automatically adjust difficulty for
           individual miners based on their hashrate in order to lower networking and CPU
           overhead. */
        "varDiff": {
            "minDiff": 2, //Minimum difficulty
            "maxDiff": 1000,
            "targetTime": 100, //Try to get 1 share per this many seconds
            "retargetTime": 30, //Check to see if we should retarget every this many seconds
            "variancePercent": 30, //Allow time to very this % from target without retargeting
            "maxJump": 100 //Limit diff percent increase/decrease in a single retargetting
        },
        /* Feature to trust share difficulties from miners which can
           significantly reduce CPU load. */
        "shareTrust": {
            "enabled": true,
            "min": 10, //Minimum percent probability for share hashing
            "stepDown": 3, //Increase trust probability % this much with each valid share
            "threshold": 10, //Amount of valid shares required before trusting begins
            "penalty": 30 //Upon breaking trust require this many valid share before trusting
        },
        /* If under low-diff share attack we can ban their IP to reduce system/network load. */
        "banning": {
            //banning可以设置为false，毕竟web浏览不能保证单个页面长期在线，很容易断开
            //或者设置时间不需要这么长，连接来自我们的PoolProxy，我们修改为30秒避免造成长期阻断
            "enabled": true,
            "time": 30, //How many seconds to ban worker for
            "invalidPercent": 25, //What percent of invalid shares triggers ban
            "checkThreshold": 30 //Perform check when this many shares have been submitted
        },
        /* [Warning: several reports of this feature being broken. Proposed fix needs to be tested.] 
            Slush Mining is a reward calculation technique which disincentivizes pool hopping and rewards 
            'loyal' miners by valuing younger shares higher than older shares. Remember adjusting the weight!
            More about it here: https://mining.bitcoin.cz/help/#!/manual/rewards */
        "slushMining": {
            "enabled": false, //Enables slush mining. Recommended for pools catering to professional miners
            "weight": 300, //Defines how fast the score assigned to a share declines in time. The value should roughly be equivalent to the average round duration in seconds divided by 8. When deviating by too much numbers may get too high for JS.
            "lastBlockCheckRate": 1 //How often the pool checks the timestamp of the last block. Lower numbers increase load but raise precision of the share value
        }
    },
    /* Module that sends payments to miners according to their submitted shares. */
    "payments": {
        "enabled": true,
        "interval": 600, //how often to run in seconds
        "maxAddresses": 50, //split up payments if sending to more than this many addresses
        "mixin": 3, //number of transactions yours is indistinguishable from
        "transferFee": 5000000000, //fee to pay for each transaction
        "minPayment": 100000000000, //miner balance required before sending payment
        "denomination": 100000000000 //truncate to this precision and store remainder
    },
    /* Module that monitors the submitted block maturities and manages rounds. Confirmed
       blocks mark the end of a round where workers' balances are increased in proportion
       to their shares. */
    "blockUnlocker": {
        "enabled": true,
        "interval": 30, //how often to check block statuses in seconds
        /* Block depth required for a block to unlocked/mature. Found in daemon source as
           the variable CRYPTONOTE_MINED_MONEY_UNLOCK_WINDOW */
        "depth": 60,
        "poolFee": 1.8, //1.8% pool fee (2% total fee total including donations)
        "devDonation": 0.1, //0.1% donation to send to pool dev - only works with Monero
        "coreDevDonation": 0.1 //0.1% donation to send to core devs - only works with Monero
    },
    /* AJAX API used for front-end website. */
    "api": {
        "enabled": true,
        "hashrateWindow": 600, //how many second worth of shares used to estimate hash rate
        "updateInterval": 3, //gather stats and broadcast every this many seconds
        "port": 8117,
        "blocks": 30, //amount of blocks to send at a time
        "payments": 30, //amount of payments to send at a time
        "password": "test" //password required for admin stats
    },
    /* Coin daemon connection details. */
    "daemon": {
        "host": "127.0.0.1",
        "port": 18081
    },
    /* Wallet daemon connection details. */
    "wallet": {
        "host": "127.0.0.1",
        "port": 8082
    },
    /* Redis connection into. */
    "redis": {
        "host": "127.0.0.1",
        "port": 6379,
        "auth": null //If set, client will run redis auth command on connect. Use for remote db
    }
最后在终端键入 `node init.js` 让Pool开始工作, 也可以用比如 `node init.js -module=api` 只开启单独项目。
当然你也可以用 `forever start /srv/pool/init.js`
确保出错了还能在线，也可以将其写入开机启动项里。不过值得注意的是：切记要把Pool的开启，放在Pool_Proxy开启之前哦！
如此一来，Pool + Pool_Proxy 就完成了，请开始你的表演吧~
## Pool 相关项目
[https://github.com/search?utf8=%E2%9C%93&q=monero+pool](https://github.com/search?utf8=%E2%9C%93&q=monero+pool)
## 发展构想
其实前端算力，不仅仅可以用来挖矿，更可以用来做机器人验证，构造一种算法，或者换一种token方式，利用硬算力来增加批量化成本，同时通过算力难度，来增加单次的硬计算时间成本，我想在验证码应用上将有更好的发展。
同时 `asmjs` 和 `WebAssembly`
的出现，也将前端的处理能力提升到一个新的台阶，今后通过浏览器构造本地应用？创建新形式的3D页游？甚至加入P2P将应用分发到用户？新的加密传输？大众化的自定义加密算法？
正如Coinhive现在的验证码雏形，市场前景十分美好，通过基本判断，逐步增加重复提交表单的计算成本，来杜绝撸羊毛，通过不断的更新与进步，前端的魅力，正在逐步散发。
比如EtherDream的文章推荐给大家：
[使用浏览器的计算力，对抗密码破解](https://www.cnblogs.com/index-html/p/frontend_kdf.html)
[【探索】无形验证码 —— PoW 算力验证](https://www.cnblogs.com/index-html/p/web-pow-research.html)
[怎样的 Hash 算法能对抗硬件破解](https://www.cnblogs.com/index-html/p/hardware-resistant-hash-algorithm.html)
> 一入前端深似海，猥琐不往此生学。
>
> 熊迪，跟我来学做菜吧2333……