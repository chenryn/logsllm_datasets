title:iTOP: Automating Counterfeit Object-Oriented Programming Attacks
author:Paul Muntean and
Richard Viehoever and
Zhiqiang Lin and
Gang Tan and
Jens Grossklags and
Claudia Eckert
iTOP: Automating Counterfeit Object-Oriented Programming
Attacks
Paul Muntean
Technical University of Munich
PI:EMAIL
Gang Tan
Penn State University
PI:EMAIL
Richard Viehoever
Technical University of Munich
PI:EMAIL
Jens Grossklags
Technical University of Munich
PI:EMAIL
Zhiqiang Lin
The Ohio State University
PI:EMAIL
Claudia Eckert
Technical University of Munich
PI:EMAIL
ABSTRACT
Exploiting a program requires a security analyst to manipulate data
in program memory with the goal to obtain control over the pro-
gram counter and to escalate privileges. However, this is a tedious
and lengthy process as: (1) the analyst has to massage program data
such that a logical reliable data passing chain can be established,
and (2) depending on the attacker goal certain in-place fine-grained
protection mechanisms need to be bypassed. Previous work has
proposed various techniques to facilitate exploit development. Un-
fortunately, none of them can be easily used to address the given
challenges. This is due to the fact that data in memory is difficult
to be massaged by an analyst who does not know the peculiarities
of the program as the attack specification is most of the time only
textually available, and not automated at all.
In this paper, we present indirect transfer oriented programming
(iTOP), a framework to automate the construction of control-flow
hijacking attacks in the presence of strong protections including
control flow integrity, data execution prevention, and stack canaries.
Given a vulnerable program, iTOP automatically builds an exploit
payload with a chain of viable gadgets with solved SMT-based mem-
ory constraints. One salient feature of iTOP is that it contains 13
attack primitives powered by a Turing complete payload specifica-
tion language, ESL. It also combines virtual and non-virtual gadgets
using COOP-like dispatchers. As such, when searching for gadget
chains, iTOP can respect, for example, a previously enforced CFI
policy, by using only legitimate control flow transfers. We have
evaluated iTOP with a variety of programs and demonstrated that
it can successfully generate working exploits with the developed
attack primitives.
CCS CONCEPTS
• Security and privacy → Systems security; Information flow
control; Software security engineering; Software reverse en-
gineering.
KEYWORDS
Machine code, control flow integrity, Clang/LLVM, cyber attacks.
RAID ’21, Oct. 06–08, 2021, San Sebastian, Spain
© 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM.
This is the author’s version of the work. It is posted here for your personal use.
Not for redistribution. The definitive Version of Record was published in RAID ’21:
International Symposium on Research in Attacks, Intrusions and Defenses, Oct. 06–08,
2021, San Sebastian, Spain, https://doi.org/10.1145/3471621.3471847.
ACM Reference Format:
Paul Muntean, Richard Viehoever, Zhiqiang Lin, Gang Tan, Jens Grossklags,
and Claudia Eckert. 2021. iTOP: Automating Counterfeit Object-Oriented
Programming Attacks. In RAID ’21: International Symposium on Research in
Attacks, Intrusions and Defenses, Oct. 06–08, 2021, San Sebastian, Spain. ACM,
New York, NY, USA, 15 pages. https://doi.org/10.1145/3471621.3471847
1 INTRODUCTION
Large software (e.g., Web browsers) is buggy due to its enormous
complexity. Among all bugs, exploitable bugs (i.e., bugs giving at-
tackers an advantage) are the most dangerous ones. Being able to
understand exploitability of bugs and to triage particularly danger-
ous ones is highly desirable. However, this is often a tedious and
labor-intensive process. Major vendors (e.g., Google [19], Apple [5],
and Microsoft [28]) heavily rely on their bug bounty programs and
highly specialized internal teams (e.g., Google’s Project Zero [20]).
This situation is due to the facts that (1) given an exploitable vul-
nerability, the security analyst has to manually manipulate data in
program memory in order to pass data around to achieve their goals;
and (2) given the wide deployment of defenses such as control-flow
integrity (CFI) i.e., at binary [31] and source code [33] level, data exe-
cution prevention (DEP) [29], and stack canaries, the analysts needs
to make sure that the exploit can bypass the defenses, e.g., they are
respecting the enforced control-flow graph (CFG) based policies.
While there are considerable efforts going on to automate ex-
ploit generation, every one fills a different niche and only partially
addresses the needs of security analysts. Specifically, AEG [6] was
the first tool to automatically search for an exploitable program
vulnerability [34] and to generate a control-flow hijacking attack.
Revery [49] is an extension of AEG that addressed additional chal-
lenges. However, it can only automatically create return-to-stack
and return-to-libc exploits. Newton [48] is a runtime-based attack
crafting tool which breaks forward-edge CFI during exploit genera-
tion, relying on run-time information such as values in registers and
memory addresses to identify the appropriate gadgets and to stitch
them together. Further, the attacker has to interact during attack
creation within the attack specification language with program
memory constraints, which significantly raises the entry bar for
this tool’s usage. BOPC [24] is a data-only attack generation tool,
which searches the target program’s basic blocks in the CFG for
valid program traces fulfilling the attacker’s goal. While it provides
attack primitives, it does not offer programmable interfaces such as
APIs for payload construction. Further, neither of the data-only nor
control-flow hijacking tools show in their evaluations that these
tools can evade state-or-the-art security defenses. In summary, there
is a need to develop a tool based on static analysis (i.e., without
using runtime information) as most currently existing approaches
are runtime-based. The tool should be programmable, and automat-
ically generate exploits bypassing fine-grained forward-edge CFI
(i.e., context-insensitive CFI) to craft control-flow hijacking attacks.
In this paper, we present Indirect Transfer Oriented Program-
ming (iTOP), a COOP [43] attack construction framework for auto-
matic development of control-flow hijacking attacks. iTOP provides
an extensible, Turing-complete language—in order to be able to en-
code all types of program control flows—called Exploit Specification
Language (ESL). The novelty of ESL consists in the fact that it is not
a monolithic language but rather relies on an extensible API which
can be easily tailored for different types of attacks. ESL is motivated
by the need for a light-weight and extensible language (its compact
grammar will be introduced later), which lowers the hurdle for entry
for the analyst; it has an extensible API and is based on ANTLR [3],
enabling automated lexer and parser generation out of the box. The
extensible API allows for extending (1) the gadget set by consid-
ering other target types (e.g., basic blocks, non-virtual functions),
and (2) the attack type by adding more attack crafting primitives.
Given a vulnerable program, an ESL attack specification, the
source code of the application, and the modeled deployed CFI de-
fense, iTOP is able to build control-flow hijacking attacks that bypass
CFI. The final result of the iTOP analysis pipeline is a payload file,
which if fed into the vulnerable program buffer, allows to perform
the attack. The key novelty of this work is an end-to-end framework
for crafting control-flow hijacking attacks under strong deployed
CFI policies, improving the precision of prior analysis with a full-
fledged symbolic execution. Also, unlike prior works, it has a novel
gadget search algorithm that can be operated under fine-grained
CFI defenses. At a high level, iTOP also requires the address of an
attacker-controlled buffer as input, the Z3 [30] solver, ANGR [46],
and symbolic execution to generate the attack payload. The gener-
ated payload can bypass state-of-the-art CFI defenses due to found
usable calltargets which were previously identified. iTOP provides
CFI policy modeling, integration, and attack construction guidance
based on the currently selected CFI policy.
There are multiple challenges that are addressed by iTOP in or-
der to automate the exploit generation. In particular, iTOP must
resolve the abstract registers to match the correct registers of the
underlying architecture. Meanwhile, the analysis has to determine
which callsite gadgets are compatible to which calltarget gadgets,
because of COOP attack requirements. Also, identifying whether
a gadget is usable within a gadget chain using symbolic execution
is time-consuming, and we have to improve its performance. In
addition, iTOP has to construct the payload that leads to execution
of the specified ESL program, solve gadget memory overlaps and
resolve pointer destinations. Lastly, the attack has to bypass mod-
ern defenses such as, DEP [29], shadow stack [16], and deployed
fine-grained CFI policies [32]. We have addressed these challenges
and implemented iTOP.
To evaluate iTOP, we have conducted experiments with several
real-world programs, and demonstrated that iTOP can generate
code reuse attack payloads for a set of 13 test payload specifica-
tions. These payloads demonstrate the capabilities of iTOP and
ESL (e.g., loops, conditional branches, memory reads/writes) and
the applicability to real-world attacks (e.g., spawning a shell with
attacker-controlled parameters). As opposed to common belief that
high percentage values (above or around 90%) in the realm of au-
tomated attack construction are the key indicator for tool potential
(or tool quality), we rather think that this is not the most essential
indicator. As such, successful attack crafting depends primarily on
the types of gadgets used, thus it is less significant to have many
attack variations for a single target program when one attack is
sufficient to compromise the whole system.
iTOP is, to our knowledge, the first automated static control-
flow hijacking attack crafting tool that is aware of the deployed
CFI defense. Based on a NodeJS use case, we show that iTOP can
generate attacks even in the presence of strong CFI defenses. In
contrast to other attack crafting tools (e.g., Newton, BOPC, AEG,
Revery), iTOP demonstrates that it can build attacks under strong
real-world CFI defenses. Additionally, note that the applications of
iTOP go beyond an attack framework. We envision iTOP as a tool
for defenders to evaluate the residual attack surface of a program
usable after a defense was deployed, enabling analysts to assess,
for example, whether a certain CFI policy sufficiently protects the
program, and which parts of a program require additional attention
to stop them from enabling attacks.
In summary, we make the following contributions:
• Gadget Search and Chain Building Framework. We pro-
pose iTOP1, a novel framework that generates gadget chains
and validates their feasibility fully automatically. iTOP trans-
lates an ESL payload into a full-fledged control-flow hijack-
ing attack for the target vulnerable binary and enables the
discovery of viable gadgets and chains though an efficient
search process.
• Attack Specification Abstraction. We propose ESL, a sys-
tem independent attack payload specification language, which
is based on a powerful and extensible library of predefined
gadgets. The API is used to extend the ESL functionalities.
ESL enables the necessary abstraction to scale to large pro-
grams and to be used by an analyst with no previous attack
construction experience.
• Attack Construction under Strong Defenses. We pro-
pose an approach to illustrate that iTOP can run in the pres-
ence of strong defenses such as CFI, DEP, and Clang’s shadow
stack techniques [10]. We also show how much attack sur-
face reduction is required to effectively defend against these
attacks.
• Experimental Results. We evaluated iTOP by showing the
generality of its techniques based on existing vulnerabilities
where manual exploit construction may have been infeasible
or very tedious. With the primitives provided by iTOP, we
can successfully generate a payload to trigger a significant
compromise (a) by first writing an exploit2 for all target
programs, and (b) second by spawning a system shell3.
2 BACKGROUND
Control Flow Bending (CFB). CFB [9] attacks demonstrate that
CRAs are still possible under strong CFI policies. By restricting
1iTOP’s source code on GitHub. https://tinyurl.com/y8bnsk6w
2Video: exploit writing in ESL. https://tinyurl.com/y6cmbvyt
3Video: spawning a system shell exploit. https://tinyurl.com/y6a9gk7c
2
Figure 1: Attack generation pipeline. Black arrows represent data transfers while red arrows indicate analysis backtrack steps.
exploit execution traces within the legitimate CFG, control flow
bending attacks avoid CFI defenses entirely. While the resulting
exploit might not follow a valid non-exploit trace, every step fol-
lows legal control flow transfers. If an attacker modifies a function
pointer to point to a different, yet still legal calltarget, he is per-
forming a CFB attack. In a nutshell, CFB attacks demonstrate that
an attacker, with precise knowledge of valid calltarget sets under
specific CFI policies, can still construct an attack as long as the
target set contains the necessary CRA gadgets.
Counterfeit Object-oriented Programming (COOP). COOP at-
tacks [43] are a CRA technique which exploits C++ virtual function
dispatches to generate an attack. COOP uses a main loop dispatcher
gadget, which may be one of the following: (1) a function iterating
over an array of objects and invoking a virtual function on each
main loop dispatcher, (2) a function going through a linked list of
objects invoking a virtual function for each LinkedList dispatcher,
or (3) a virtual function invoking two virtual functions with two
objects, which is leveraged by building a recursion-based dispatcher.
This is done by having the second object be a pointer to the dis-
patcher itself (Recursion dispatcher). Using these three dispatcher
types, virtual functions are chained together to create an attack.
Lastly, COOP attacks respect backwards return edges (stack disci-
pline), making it immune to shadow stack protection techniques.
3 THREAT MODEL AND ASSUMPTIONS
In this section, we present the defensive assumptions and attacker
capabilities of our threat model (e.g., STRIDE [27]).
Defensive Assumptions.
• Writable ⊕ Executable Memory: The target system ensures that
memory can be either writable or executable, but never both at
the same time through, e.g., DEP [29]. This prevents attackers
from injecting new code or modifying existing code.
• Control Flow Protection: We assume that the vulnerable appli-
cation is protected by state-of-the-art control flow protection
techniques and an efficient shadow stack implementation.
• DEP, ASLR, Stack Canaries (DAS): We assume that DAS [11] are
deployed, correctly configured and active in the target system.
Attacker Capabilities.
3
• System Configuration: The attacker is aware of the target system
configuration and applied defenses, and she has access to a bi-
nary of the target application that is not re-randomized at short
intervals.
• Vulnerability: The target application suffers from a known mem-
ory corruption vulnerability, which can be leveraged by the at-
tacker to write arbitrary values into writable memory.
• Information Leak (IL): To bypass ASLR, the attacker has access to
an IL, which allows her to read arbitrary values. Note that the IL
primitive is orthogonal to the program vulnerability requirement
and necessary to bypass ASLR. Also note that the IL primitive
can be achieved by using memory management side channels
[21], or using hardware side channels [22, 25], etc.
• Application Entry Point (AEP): We assume that the attacker has ac-
cess to an AEP, which is part of the vulnerability discovery phase.
AEP is a point of failure that might enable a malicious actor (i.e.,
attacker) to break the application and cause damage [40]. Note
that the entry point is not the program main() function. The
discovery of the AEP is orthogonal to our work and can be, for
example, addressed with the plethora of available fuzzing tools or
by using an already known and well-documented vulnerability
tool in the style of Metasploit [26].
• Read Write Operations: We assume that one or more read/write
operations are needed to modify the state of the target binary in
order to initiate the attack. These operations are part of the attack
payload, which together with the attack assembly operations fa-
cilitate successful payload execution. Note that a write operation
does not necessarily need to be proceeded by a read operation.
4 SYSTEM OVERVIEW
Figure 1 provides an overview of iTOP’s attack building pipeline.
Numbers from one to ten denote the different components and
operations of iTOP analysis, and three inputs: the CFI policies,
the program binary, and the ESL attack specification. Further, the
whole iTOP analysis is broken down into five stages for payload
construction. These stages are: binary and ESL front-ends, gad-
get classification, calltargets and dispatchers gadget search, gadget
chaining, as well as simulation, verification and payload generation.
Specifically, as depicted in Figure 1 from left to right, in ❶ the
target program binary is passed into iTOP’s binary front-end. Next,
the address and size of the attacker-controlled buffer is indicated
ESLAttackSpecifi-cationLLVM-CFI12345679810ACDEFGHIBBinaryFront-endESLFront-endSemantic SearchCalltargesSearchDispatchers SearchGadgetSimulationChain GenerationChain Simulation&VerificationPayloadGenerationCFIPoliciesBinaryCodeAPayload12346791058Binary & ESLFront-endsGadgetClassificationCalltargets andDispatcher SearchGadgetChainingSimulation, Verification& Payload GenerationFront-endMiddle-partBack-endin the ESL attack specification. In ❷ the ESL payload specification
is passed into iTOP’s ESL front-end. A set of CFI policies is then
provided. Each of the provided CFI policies is optional and is used
to filter the results when analyzing the target binary during attack
construction. Further, the target binary is first lifted into PyVEX
intermediate representation (IR) [45] with the help of ANGR [46],
while the ESL payload is translated into our own Python object-
based IR. In ❸ based on the ESL specification a semantic search is
performed. In ❹ iTOP searches for promising caltarget gadgets in
order to build the callsite/calltarget matching pairs sets. In ❺ the
CFI policies for the vulnerable program are modeled. Note that this
step is an optional and iTOP still works without it.
Further, in ❻ iTOP searches for dispatcher gadgets for construct-
ing the matching callsite/calltarget pairs. After this step, in ❼ the
gadgets are simulated in order to verify their functionality. In par-
allel to this step, in 8 the gadget chain is generated. After these
two parallel steps, in ❾ the gadget chain is simulated and verified.
Further, in ❿ the payload is generated if the previous two steps
succeed. If ❾ or ❿ fails, iTOP backtracks (see red arrows) to the pre-
vious step and tries a different gadget chain or gadget combination.
When both of these two steps succeed, the payload is generated
and emitted as a distinct file. Lastly, note that the payload file needs
to be written to the attacker-controlled buffer to initiate the attack.