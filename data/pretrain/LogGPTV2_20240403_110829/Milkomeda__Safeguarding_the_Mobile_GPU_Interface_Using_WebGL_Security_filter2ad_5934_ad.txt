if (!is_opengles_call_safe(api_num, arg1, arg2, ...))
return -1;
/* 3. Call the actual OpenGL ES API */
long rv = some_opengles_api_actual_function(arg1, arg2, ...)
/* 4. Return from the shield, return the OpenGL ES call return value (rv) */
syscall(NR_SHIELD_EXIT, rv);
/* The execution never reaches here. */
}
/* Kernel implementation of shield_exit syscall */
SYSCALL_DEFINE(shield_exit, long, rv)
{
/* 1. Switch to the untrusted page tables
* 2. Flush the TLB
* 3. Mark the thread as untrusted
* 4. Restore previously saved CPU registers
* 5. Store the return value (rv) on a CPU register
* 6. Exit (which returns to the untrusted app code outside the shield,
*
to right after the shield entry syscall) */
}
Figure 6: Pseudocode demonstrating an OpenGL ES API call
in Milkomeda.
(§2.4). We achieve this by using our protected shield memory (§5.1).
All the code and data of these security checks (including the stack
and heap) are allocated within the shield and hence are protected.
Performance guarantee. The last guarantee states that perfor-
mance loss should be minimized. Our solution eliminates the need
for IPC, shared memory data copy, and serialization/deserialization
of API calls. It does however add some overhead including two
syscalls per OpenGL ES API call (one syscall to enter the shield
space and one to exit it), saving and restoring the register state as
well as changing the page tables at entry and exit syscalls, and TLB
flushes in the exit syscall as well as in some context switches (§7.1).
transform this interface to the OpenGL ES interface, CheckGen uses
the OpenGL ES interface definition. Moreover, it removes all the
deserialization code and only keeps the simple security checks of
this layer using pattern matching. The bulk of the security checks
provided in the next layer (Figure 7) are then used without any
modifications.
6.2 WebGL and OpenGL ES Incompatibilities
The WebGL and OpenGL ES API have a few differences. More
specifically, the Chromium project documents two incompatibilities
between WebGL and OpenGL ES 2.0 [20]. First, WebGL does not
support client-side vertex arrays [16], which store vertices and their
attributes in the system memory instead of the GPU memory. This
is not due to security and mainly because this API is slow (indeed, it
is being deprecated in OpenGL ES 3.0). Therefore, WebGL fails calls
to this API. However, this feature is required by the OpenGL ES 2.0
specification, and indeed used by many mobile apps, e.g., by two
of the mobile app benchmarks used in our evaluation. Therefore,
we enable this feature in Milkomeda and remove a Chrome WebGL
check due to this incompatibility. An alternative option is to emulate
this feature on top of other OpenGL ES APIs.
Second, WebGL does not support the GL_FIXED attribute type.
It suggests using GL_FLOAT instead since GL_FIXED “requires
the same amount of memory as GL_FLOAT, but provides a smaller
range of values” [6]. Chromium converts this type [20]. Because
Milkomeda is built on top of OpenGL ES, which requires support
for GL_FIXED, we modify the checks to accept GL_FIXED. Our
understanding is that this does not cause a security problem. Alter-
natively, we can also convert this type.
7 IMPLEMENTATION
We implement Milkomeda for Android operating system on 64-
bit ARMv8 processors, which are commonly used in all recent
mobile devices (see §10 for a discussion on support for ARMv7
processors). We use Google Chromium’s WebGL security checks
in our implementation. Milkomeda’s implementation consists of
two parts: the shield and the CheckGen tool. Below, we provide
implementation details on these two components.
7.1 Shield Integration
The core of the shield’s functionality is implemented in the Linux
kernel. This includes the implementation of the protected memory
space and syscall filtering. Our implementation consists of about
500 LoC, making the solution easy to reason about and easy to port.
The shield space needs to be set up by the process at its initializa-
tion time. This is done through one syscall that activates the shield
for a range of addresses in the address space. The activation syscall
creates the secondary set of page tables and marks the designated
address range as inaccessible in the default page tables. Moreover,
the same syscall sets the shield’s call gate address and prepares
secure stacks for threads to execute in the shield. Note that once the
shield is activated, it cannot be deactivated by the process anymore.
In our current prototype, we fix the shield address space size
to be 1 GB. This is because (i) 1 GB of address space is mapped
by a single entry in the first-level page table (when using the 4
kB translation granulate with three levels of address translation in
Figure 7: Milkomeda’s CheckGen tool automatically trans-
forms WebGL’s security checks into a single layer to be used
for mobile graphics.
6 REUSING WEBGL SECURITY CHECKS FOR
MOBILE GRAPHICS
One of our key design principles is to aim for minimal engineering
effort to port and reuse WebGL’s security checks for mobile graph-
ics. This is because these checks are still under active development.
For instance, our study shows that 12 new patches have been added
to these checks in just 2 months recently (March and April 2018). A
solution that requires significant effort to port these checks to mo-
bile graphics makes it challenging to keep the checks up-to-date. As
a result, we developed a tool, called CheckGen, which automatically
ports the WebGL security checks to be used for mobile graphics.
Figure 7 illustrates the role of the CheckGen tool. The left side
of the figure depicts the WebGL stack, all the way from the web
app to the underlying graphics library (OpenGL ES, OpenGL, or
Direct3D depending on the platform and operating system). A
WebGL API call is first serialized in the web app process and sent,
using IPC and shared memory, to the GPU process. Inside the GPU
process, the IPC is deserialized. Some simple security checks, such
as validation of numeric values (§2.4) are performed in the same
procedure that performs the deserialization. Some select API calls
are then forwarded for more security checks and others are directly
passed to the underlying graphics library. Therefore, as can be seen
in the figure, the security checks are spread across two layers in
the WebGL stack, a layer dedicated for checks and the deserializer.
Our CheckGen tool receives the source code for these two layers
and generates one single vetting layer with the OpenGL ES API as
its input and output, which can then be used in the mobile graphics
stack, shown on the right side of the same figure.
In the rest of this section, we discuss the challenges that we
addressed in CheckGen.
6.1 Fixing the Interface for Security Checks
CheckGen transforms the input interface of WebGL’s deserializer to
the OpenGL ES interface, as expected by mobile apps (see Figure 7).
The deserializer interface accepts a pointer to and the size of a
shared memory segment as arguments for a WebGL call. It contains
the code that extracts OpenGL ES API arguments from this shared
memory segment, and then performs simple security checks. To
SerializerDeserializer+simple security checksBulk of security checksOpenGL ES/OpenGL/Direct3D libraryWebGL APIIPC interfaceInternal browser APIWeb app codeAll WebGL security checksOpenGL ES libraryOpenGL ES APIOpenGL ES APIApp codeWeb app processMobile app processGPU processOpenGL ES/OpenGL APIMilkomeda CheckGenToolARMv8 [28]), simplifying the implementation and (ii) 1 GB is large
enough for all the trusted code (including the graphics libraries,
security checks, and the libraries they depend on). Note that we
do not allocate memory for the shield space unless needed. That is,
we only reserve 1 GB of the address space, but the actual backing
memory is only allocated and mapped when needed (e.g., when a
library is loaded or when trusted code performs dynamic memory
allocation). Increasing the shield address space size, if needed, is
trivial by using more of the first-level page table entries. Also, note
that reserving 1 GB of the address space does not put pressure on
the operating system memory management for finding unallocated
memory addresses for the app. This is because the virtual address
space in ARMv8 is large (256 GB of address space when using the
aforementioned paging mode, which uses 38-bit virtual addresses
effectively [28]). Finally, when setting up the shield, we choose one
entry in the first-level page table that is yet unused. The chosen
entry then determines the start and end addresses of the shield
space.
To protect the integrity of the security checks, it is important
that all code and data used by these checks are isolated from the
rest of the app. To do this, we load the security checks, the graphics
libraries, as well as all the libraries they rely on in the shield space.
This means that we have duplicate copies of several libraries in
the process address space, one for use by the untrusted code in
the app and one to be used by the protected code in the shield.
One noteworthy example is LibC. We initialize two instances of
LibC, one for the untrusted code and one for the graphics-related
code in the shield. This ensures that all the global variables and
dynamic allocations of LibC and other libraries used by the trusted
code are in the shield space as well and hence protected. This
design increases the memory usage of the app (since it needs to
load more libraries). Moreover, it puts more pressure on the code
cache. However, these libraries are shared between all apps hence
amortizing the overhead. Moreover, as part of our future work, we
plan to investigate sharing the library code (but not data) between
the trusted and untrusted space in the process address space to
eliminate this additional overhead.
These libraries need to be loaded and the shield needs to be
activated before untrusted app code is loaded. We implement this
for Android in the app’s launch sequence. We bypass the Zygote
process (which forks a pre-configured process) and execute the
launch sequence from scratch. In the future, to accelerate the launch
time of Milkomeda apps, we can create a secondary Zygote process
with Milkomeda’s shield preconfigured. Our implementation allows
us to select the apps that need to be protected by Milkomeda by
specifying the app’s package name in Android system properties.
This capability can be used by the operating system admin or the
user in various ways: first, it is possible to enable Milkomeda on
all apps. Second, it is possible to enable Milkomeda by default but
whitelist some trusted apps. Finally, it is possible use Milkomeda
for only a set of blacklisted apps.
Milkomeda does not require any modifications to the app. In-
deed, it can support binary code, i.e., .apk executable packages
in Android. To achieve this, Milkomeda employs a shim graphics
library outside the shield space that implements the OpenGL ES
API. When called by the app, it issues a shield-call and passes the
API number and its arguments (see the OpenGL ES stub function
in Figure 6).
Milkomeda does not allow any OpenGL ES API call to register a
callback. Otherwise, such a callback can be exploited by malware to
execute arbitrary code within the shield space. Fortunately, there is
only one OpenGL ES API with a callback: glDebugMessageCallback.
We disable this debug API in Milkomeda.
Milkomeda’s shield implementation is thread-safe. Each thread
entering the shield has its own secure stack. Indeed, our benchmarks
in §8.2 use multiple threads for graphics. These threads enter the
shield separately and potentially concurrently. Thread scheduling
is also safely done in Milkomeda. We have modified the kernel
context switch procedure so that the right page tables (secure vs.
untrusted) are used for a thread, and the TLB is flushed, when
needed, to prevent an untrusted thread from accessing the TLB
entries for the shield space.
Milkomeda does not allow delivering a signal to a thread within
the shield space. This is important to ensure the integrity of execu-
tion within the shield.
7.2 CheckGen’s Implementation
We implement CheckGen in Python. It compiles the security checks
as a set of shared libraries by reusing part of the Chromium source
code. In addition to the regular build process, which produces the
unified browser executable, Chromium also supports a component
build. We leverage the component build to generate the aforemen-
tioned shared libraries.
OpenGL ES represents the graphics state with a context object.
In order to properly vet the graphics API calls, we create a separate
instance of the security checks for each graphics context (similar
to WebGL).
Chromium implements GPU driver and library bug workarounds
for specific vendors and operating systems (§2.4). Similarly, we
apply the workarounds for the GPU used in the target mobile device,
e.g., the Adreno GPU in our prototype.
We solve one challenge with respect to the IDs of graphics objects
in OpenGL ES. OpenGL ES assigns integer IDs to graphics resource
objects, such as texture objects. In WebGL, in order to minimize
the round trip delay for management of IDs, the web app process
itself generates the ID immediately upon creating an object and
uses these locally generated IDs in future operations [20]. The GPU
process uses the real IDs returned by the OpenGL ES library, and
maintains a mapping between the web app process-generated IDs
and the real IDs. As this is a performance optimization needed in
the multi-process architecture [20], we disable it in CheckGen. Note
that this does not affect the security of Milkomeda because the real
IDs are not considered secrets.
8 EVALUATION
We evaluate Milkomeda on a Nexus 5X smartphone. This smart-
phone has 2 GB of memory, four ARM Cortex-A53 cores as well as
two ARM Cortex-A57 cores (ARM big.LITTLE), and an Adreno 418
GPU. We use Android 7.1.2 (LineageOS 14.1).
(a) B1 [9]
(b) B2 [21]
(c) B3 [22]
(d) B4 [23]
(e) B5
Figure 8: Graphics benchmarks used in evaluation. We derive B5 from B4 by increasing the number of cubes significantly.
8.1 Security Analysis
In this section, we discuss the attacks that Milkomeda can and
cannot protect against and compare with the multi-processor ar-
chitecture deployed in web browsers.
against such attacks in the browser, they protect against similar
attacks on mobile devices.
First, an attacker may try to directly invoke the GPU device
driver syscalls. Milkomeda prevents this attack as only the shield
space is allowed to interact with the GPU device driver. The multi-
process architecture prevents this attack too as the web app process
is not given permission to interact with the GPU driver. Second,
the attacker may try to jump past the security checks and directly
execute the unvetted OpenGL EL API. Milkomeda prevents this
attack since a thread cannot enter the shield space at arbitrary
entry points. Similarly, the multi-process architecture does not al-
low this attack since a thread in one process cannot jump to and