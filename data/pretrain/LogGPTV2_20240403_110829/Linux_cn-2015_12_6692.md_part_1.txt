---
author: Arun Pyasi
category: 系统运维
comments_data: []
count:
  commentnum: 0
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 8357
date: '2015-12-05 09:32:57'
editorchoice: false
excerpt: 大家好，本教程将学习如何在 ubuntu 15.04 上面安装 puppet，它可以用来管理你的服务器基础环境。puppet 是由 puppet
  实验室（Puppet Labs）开发并维护的一款开源的配置管理软件，它能够帮我们自动化供给、配置和管理服务器的基础环境。不管我们管理的是几个服务器还是数以千计的计算机组成的业务报表体系，puppet
  都能够使管理员从繁琐的手动配置调整中解放出来，腾出时间和精力去提系统的升整体效率。它能够确保所有自动化流程作业的一致性、可靠性以及稳定性。它让管理员和开发者更紧密的联系在一起，使开发者更容易产出付出设计良好、
fromurl: http://linoxide.com/linux-how-to/install-puppet-ubuntu-15-04/
id: 6692
islctt: true
largepic: /data/attachment/album/201512/05/093245eiiz284dw4gw28i1.jpg
permalink: /article-6692-1.html
pic: /data/attachment/album/201512/05/093245eiiz284dw4gw28i1.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 大家好，本教程将学习如何在 ubuntu 15.04 上面安装 puppet，它可以用来管理你的服务器基础环境。puppet 是由 puppet
  实验室（Puppet Labs）开发并维护的一款开源的配置管理软件，它能够帮我们自动化供给、配置和管理服务器的基础环境。不管我们管理的是几个服务器还是数以千计的计算机组成的业务报表体系，puppet
  都能够使管理员从繁琐的手动配置调整中解放出来，腾出时间和精力去提系统的升整体效率。它能够确保所有自动化流程作业的一致性、可靠性以及稳定性。它让管理员和开发者更紧密的联系在一起，使开发者更容易产出付出设计良好、
tags:
- puppet
thumb: false
title: 如何在 Ubuntu 15.04 中安装 puppet
titlepic: false
translator: ivo-wang
updated: '2015-12-05 09:32:57'
---
大家好，本教程将学习如何在 ubuntu 15.04 上面安装 puppet，它可以用来管理你的服务器基础环境。puppet 是由  puppet 实验室   （    Puppet Labs    ） 开发并维护的一款开源的配置管理软件，它能够帮我们自动化供给、配置和管理服务器的基础环境。不管我们管理的是几个服务器还是数以千计的计算机组成的业务报表体系，puppet 都能够使管理员从繁琐的手动配置调整中解放出来，腾出时间和精力去提系统的升整体效率。它能够确保所有自动化流程作业的一致性、可靠性以及稳定性。它让管理员和开发者更紧密的联系在一起，使开发者更容易产出付出设计良好、简洁清晰的代码。puppet 提供了配置管理和数据中心自动化的两个解决方案。这两个解决方案分别是 **puppet 开源版** 和 **puppet 企业版**。puppet 开源版以 Apache 2.0 许可证发布，它是一个非常灵活、可定制的解决方案，设置初衷是帮助管理员去完成那些重复性操作工作。pupprt 企业版是一个全平台复杂 IT 环境下的成熟解决方案，它除了拥有开源版本所有优势以外还有移动端 apps、只有商业版才有的加强支持，以及模块化和集成管理等。Puppet 使用 SSL 证书来认证主控服务器与代理节点之间的通信。
本教程将要介绍如何在运行 ubuntu 15.04 的主控服务器和代理节点上面安装开源版的 puppet。在这里，我们用一台服务器做 主控服务器   （    master    ） ，管理和控制剩余的当作 puppet  代理节点   （    agent node    ） 的服务器，这些代理节点将依据主控服务器来进行配置。在 ubuntu 15.04 只需要简单的几步就能安装配置好 puppet，用它来管理我们的服务器基础环境非常的方便。（LCTT 译注：puppet 采用 C/S 架构，所以必须有至少有一台作为服务器，其他作为客户端处理）
![](/data/attachment/album/201512/05/093245eiiz284dw4gw28i1.jpg)
### 1.设置主机文件
在本教程里，我们将使用2台运行 ubuntu 15.04 “Vivid Vervet" 的主机，一台作为主控服务器，另一台作为 puppet 的代理节点。下面是我们将用到的服务器的基础信息。
* puupet 主控服务器 IP：44.55.88.6 ，主机名： puppetmaster
* puppet 代理节点 IP： 45.55.86.39 ，主机名： puppetnode
我们要在代理节点和服务器这两台机器的 hosts 文件里面都添加上相应的条目，使用 root 或是 sudo 访问权限来编辑 `/etc/hosts` 文件，命令如下：
```
# nano /etc/hosts
45.55.88.6 puppetmaster.example.com puppetmaster
45.55.86.39 puppetnode.example.com puppetnode
```
注意，puppet 主控服务器必使用 8140 端口来运行，所以请务必保证开启8140端口。
### 2. 用 NTP 更新时间
puppet 代理节点所使用系统时间必须要准确，这样可以避免代理证书出现问题。如果有时间差异，那么证书将过期失效，所以服务器与代理节点的系统时间必须互相同步。我们使用 NTP（ Network Time Protocol   （    网络时间协议    ） ）来同步时间。**在服务器与代理节点上面分别**运行以下命令来同步时间。
```
# ntpdate pool.ntp.org
17 Jun 00:17:08 ntpdate[882]: adjust time server 66.175.209.17 offset -0.001938 sec    
```
（LCTT 译注：显示类似的输出结果表示运行正常）
如果没有安装 ntp，请使用下面的命令更新你的软件仓库，安装并运行ntp服务
```
# apt-get update && sudo apt-get -y install ntp ; service ntp restart
```
### 3. 安装主控服务器软件
安装开源版本的 puppet 有很多的方法。在本教程中我们在 puppet 实验室官网下载一个名为 puppetlabs-release 的软件包的软件源，安装后它将为我们在软件源里面添加 puppetmaster-passenger。puppetmaster-passenger 包括带有 apache 的 puppet 主控服务器。我们开始下载这个软件包：
```
# cd /tmp/
# wget https://apt.puppetlabs.com/puppetlabs-release-trusty.deb
--2015-06-17 00:19:26-- https://apt.puppetlabs.com/puppetlabs-release-trusty.deb
Resolving apt.puppetlabs.com (apt.puppetlabs.com)... 192.155.89.90, 2600:3c03::f03c:91ff:fedb:6b1d
Connecting to apt.puppetlabs.com (apt.puppetlabs.com)|192.155.89.90|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 7384 (7.2K) [application/x-debian-package]
Saving to: ‘puppetlabs-release-trusty.deb’
puppetlabs-release-tr 100%[===========================>] 7.21K --.-KB/s in 0.06s
2015-06-17 00:19:26 (130 KB/s) - ‘puppetlabs-release-trusty.deb’ saved [7384/7384]
```
下载完成，我们来安装它：
```
# dpkg -i puppetlabs-release-trusty.deb
Selecting previously unselected package puppetlabs-release.
(Reading database ... 85899 files and directories currently installed.)
Preparing to unpack puppetlabs-release-trusty.deb ...
Unpacking puppetlabs-release (1.0-11) ...
Setting up puppetlabs-release (1.0-11) ...
```
使用 apt 包管理命令更新一下本地的软件源：
```
# apt-get update
```
现在我们就可以安装 puppetmaster-passenger 了
```
# apt-get install puppetmaster-passenger
```
**提示**: 在安装的时候可能会报错：
```
Warning: Setting templatedir is deprecated.see http://links.puppetlabs.com/env-settings-deprecations (at /usr/lib/ruby/vendor_ruby/puppet/settings.rb:1139:in `issue_deprecation_warning')
```
不过不用担心，忽略掉它就好，我们只需要在设置配置文件的时候把这一项禁用就行了。
如何来查看 puppet 主控服务器是否已经安装成功了呢？非常简单，只需要使用下面的命令查看它的版本就可以了。
```
# puppet --version
3.8.1
```
现在我们已经安装好了 puppet 主控服务器。因为我们使用的是配合 apache 的 passenger，由 apache 来控制 puppet 主控服务器，当 apache 运行时 puppet 主控服务器才运行。
在开始之前，我们需要通过停止 apache 服务来让 puppet 主控服务器停止运行。
```
# systemctl stop apache2
```
### 4. 使用 Apt 工具锁定主控服务器的版本
现在已经安装了 3.8.1 版的 puppet，我们锁定这个版本不让它随意升级，因为升级会造成配置文件混乱。 使用 apt 工具来锁定它，这里我们需要使用文本编辑器来创建一个新的文件 `/etc/apt/preferences.d/00-puppet.pref`：
```
# nano /etc/apt/preferences.d/00-puppet.pref
```
在新创建的文件里面添加以下内容：
```
# /etc/apt/preferences.d/00-puppet.pref
Package: puppet puppet-common puppetmaster-passenger
Pin: version 3.8*
Pin-Priority: 501
```
这样在以后的系统软件升级中， puppet 主控服务器将不会跟随系统软件一起升级。
### 5. 配置 Puppet 主控服务器
Puppet 主控服务器作为一个证书发行机构，需要生成它自己的证书，用于签署所有代理的证书的请求。首先我们要删除所有在该软件包安装过程中创建出来的 ssl 证书。本地默认的 puppet 证书放在 `/var/lib/puppet/ssl`。因此我们只需要使用 `rm` 命令来整个移除这些证书就可以了。
```
# rm -rf /var/lib/puppet/ssl
```
现在来配置该证书，在创建 puppet 主控服务器证书时，我们需要包括代理节点与主控服务器沟通所用的每个 DNS 名称。使用文本编辑器来修改服务器的配置文件 `puppet.conf`：
```
# nano /etc/puppet/puppet.conf
```
输出的结果像下面这样
```
[main]
logdir=/var/log/puppet
vardir=/var/lib/puppet
ssldir=/var/lib/puppet/ssl
rundir=/var/run/puppet
factpath=$vardir/lib/facter
templatedir=$confdir/templates
[master]
# These are needed when the puppetmaster is run by passenger
# and can safely be removed if webrick is used.
ssl_client_header = SSL_CLIENT_S_DN
ssl_client_verify_header = SSL_CLIENT_VERIFY
```
在这我们需要注释掉 `templatedir` 这行使它失效。然后在文件的 `[main]` 小节的结尾添加下面的信息。
```
server = puppetmaster
environment = production
runinterval = 1h
strict_variables = true
certname = puppetmaster
dns_alt_names = puppetmaster, puppetmaster.example.com
```
还有很多你可能用的到的配置选项。 如果你有需要，在 Puppet 实验室有一份详细的描述文件供你阅读： [Main Config File (puppet.conf)](https://docs.puppetlabs.com/puppet/latest/reference/config_file_main.html)。
编辑完成后保存退出。
使用下面的命令来生成一个新的证书。
```
# puppet master --verbose --no-daemonize
Info: Creating a new SSL key for ca
Info: Creating a new SSL certificate request for ca
Info: Certificate Request fingerprint (SHA256): F6:2F:69:89:BA:A5:5E:FF:7F:94:15:6B:A7:C4:20:CE:23:C7:E3:C9:63:53:E0:F2:76:D7:2E:E0:BF:BD:A6:78
...
Notice: puppetmaster has a waiting certificate request
Notice: Signed certificate request for puppetmaster
Notice: Removing file Puppet::SSL::CertificateRequest puppetmaster at '/var/lib/puppet/ssl/ca/requests/puppetmaster.pem'
Notice: Removing file Puppet::SSL::CertificateRequest puppetmaster at '/var/lib/puppet/ssl/certificate_requests/puppetmaster.pem'
Notice: Starting Puppet master version 3.8.1
^CNotice: Caught INT; storing stop
Notice: Processing stop
```
至此，证书已经生成。一旦我们看到 `Notice: Starting Puppet master version 3.8.1`，就表明证书就已经制作好了。我们按下 `CTRL-C` 回到 shell 命令行。
查看新生成证书的信息，可以使用下面的命令。
```
# puppet cert list -all
+ "puppetmaster" (SHA256) 33:28:97:86:A1:C3:2F:73:10:D1:FB:42:DA:D5:42:69:71:84:F0:E2:8A:01:B9:58:38:90:E4:7D:B7:25:23:EC (alt names: "DNS:puppetmaster", "DNS:puppetmaster.example.com")
```
### 6. 创建一个 Puppet 清单
默认的主 清单   （    Manifest    ） 是 `/etc/puppet/manifests/site.pp`。 这个主要清单文件包括了用于在代理节点执行的配置定义。现在我们来创建一个清单文件：
```
# nano /etc/puppet/manifests/site.pp
```
在刚打开的文件里面添加下面这几行：
```
# execute 'apt-get update'
exec { 'apt-update': # exec resource named 'apt-update'
command => '/usr/bin/apt-get update' # command this resource will run
}
# install apache2 package
package { 'apache2':
require => Exec['apt-update'], # require 'apt-update' before installing
ensure => installed,
}
# ensure apache2 service is running
service { 'apache2':
ensure => running,
}
```
以上这几行的意思是给代理节点部署 apache web 服务。
### 7. 运行 puppet 主控服务
已经准备好运行 puppet 主控服务器 了，那么开启 apache 服务来让它启动
```
# systemctl start apache2
```
我们 puppet 主控服务器已经运行，不过它还不能管理任何代理节点。现在我们给 puppet 主控服务器添加代理节点.
**提示**: 如果报错
```
Job for apache2.service failed. see "systemctl status apache2.service" and "journalctl -xe" for details.
```