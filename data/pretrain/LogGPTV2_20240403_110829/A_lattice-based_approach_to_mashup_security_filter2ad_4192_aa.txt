title:A lattice-based approach to mashup security
author:Jonas Magazinius and
Aslan Askarov and
Andrei Sabelfeld
A Lattice-based Approach to Mashup Security
Jonas Magazinius
Chalmers
Aslan Askarov
Cornell University
Andrei Sabelfeld
Chalmers
ABSTRACT
A web mashup is a web application that integrates content
from diﬀerent providers to create a new service, not oﬀered
by the content providers. As mashups grow in popularity,
the problem of securing information ﬂow between mashup
components becomes increasingly important. This paper
presents a security lattice-based approach to mashup secu-
rity, where the origins of the diﬀerent components of the
mashup are used as levels in the security lattice. Declas-
siﬁcation allows controlled information release between the
components. We formalize a notion of composite delimited
release policy and provide considerations for practical (static
as well as runtime) enforcement of mashup information-ﬂow
security policies in a web browser.
Categories and Subject Descriptors
D.4.6 [Security and Protection]: Information ﬂow con-
trols
General Terms
Security, Languages
Keywords
Web mashups, security policies, lattices, information ﬂow,
declassiﬁcation, noninterference
1.
INTRODUCTION
A web mashup is a web application that integrates content
from diﬀerent providers to create a new service, not pro-
vided by the content providers. As mashups are becoming
increasingly popular, the problem of securing information
ﬂow between mashup components is becoming increasingly
important.
1.1 Web mashups
Web mashups consist of a hosting page, usually called
the integrator, and a number of third-party components,
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS’10 April 13–16, 2010, Beijing, China.
Copyright 2010 ACM 978-1-60558-936-7 ...$10.00.
often called widgets, gadgets, blocks, or pipes. An exam-
ple of a mashup-based application is a web site that com-
bines the data on available apartments from one source (e.g.,
Craigslist) with the visualization functionality of another
source (e.g., Google Maps) to create an easy-to-use map in-
terface.
The number of web mashups is rapidly increasing. For
example, a directory service for mashups programmableweb.
com registers on average three new mashups every day. This
directory contains more than 4000 registered mashups and
1000 registered content provider API’s.
1.2 Mashup security
Mashup applications, by their nature, involve interaction
between various page components. Often these components
are loaded from diﬀerent origins. Here, origins are identi-
ﬁed by an Internet domain, protocol, and a port number, a
standard convention which we also follow in this paper.
Cross-origin interaction within the browser is currently
regulated by the so-called Same-Origin Policy (SOP). SOP
classiﬁes documents based on their origins. Documents from
the same origin may freely access each other’s content, while
such access is disallowed for documents of diﬀerent origins.
Unfortunately, the SOP mechanism turns out to be prob-
lematic for mashup security. First, origin tracking in SOP
is only partial and allows content from diﬀerent sources to
coexist under the same origin. For example, an HTML tag
with an src attribute can load content from some other origin
and integrate it in the current document. Once integrated,
such content is considered to be of the same origin as the
integrating document. This means that the content is ac-
cessible to scripts in other documents from the same origin.
Of particular concern here is document inclusion via script
tags. When a script tag is used to load JavaScript code
from a diﬀerent origin, the loaded script is integrated into
the document, and thereby can freely interact with it. For
the same reasons, interaction between diﬀerent components
loaded in this fashion is unrestricted.
The problem of script-tag inclusion for mashup applica-
tions is that the integrator must trust the third parties to
protect its secrets and not to override trusted data with un-
trusted. Eﬀectively, the security of the integrator no longer
relies only upon itself, but also on the security of the third
parties whose scripts are included.
So far, these issues have been resolved using the iframe
tag. The iframe tag borrows a part of the integrator’s win-
dow space to display another document. Since the integrated
content is loaded in a separate document, the SOP applies,
and the sensitive information of the integrator is protected.
ity for composite secure data release.
At two extreme instances of our framework, we obtain
an isolation of iframes and the ﬂexibility of the script tag
for including third-party content. The main beneﬁt of our
approach is that it allows a ﬁne-grained control over infor-
mation propagation within the browser.
1.4 Attacker model
We assume an honest user that runs a trusted browser on
a trusted machine. The web attacker [9] is an owner of ma-
licious web sites that the user might be accessing. The web
attacker is weaker than, for example, the classical Dolev-
Yao attacker [18], because the web attacker may not inter-
cept or modify arbitrary messages. This implies that the
web attacker is unable to mount man-in-the-middle attacks.
Instead, the network capabilities of the web attacker are re-
stricted to the standard network protocols of communication
with servers in the domain of attacker’s control.
In contrast to Barth et al. [9], we do not assume a par-
ticular separation of web sites on trusted and untrusted.
Instead, diﬀerent component of a web site (or mashup) have
diﬀerent interests and only trust themselves and their secu-
rity policies.
The gadget attacker [9] is a web attacker with the possi-
bility that an integrator embeds a gadget of the attacker’s
choice. Our attacker is richer than the gadget attacker.
First, we take into account that diﬀerent content providers
might have diﬀerent interests and protect gadgets from each
other. Second, the integrator itself might be a malicious
web site. Hence, we refer to our attacker as a decentralized
gadget attacker.
Social engineering attacks such as phishing are not in the
scope of the paper. Note that since we focus on distinguish-
ing intended vs. unintended inter-domain communication,
injection attacks (such as by cross-site scripting) are not
prevented, but the payload of the injection is restricted from
unintended inter-domain communication.
1.5 Sources and sinks
Security sources and sinks correspond to the end-points,
where security-sensitive data enters and leaves the system.
For conﬁdentiality, we consider secret sources, where secret
information enters the system, and public sinks, where pub-
lic output happens. For integrity, untrusted sources and
trusted sinks are of the respective importance. Most of the
discussion in this paper is focused on conﬁdentiality. Sec-
tion 5.1 brieﬂy discusses an integrity extension.
User-sensitive data can be stored in browser cookies, form
input, browsing history, and other secret sources (cf. the
list of sensitive sources used by Netscape Navigator 3 [27]).
Client-side scripts have full read access to such data. The
need for read access is often well-justiﬁed: one common us-
age is form validation, where (possibly sensitive) data is val-
idated on the client side by a script, before it is passed over
to the server. Read access is necessary for such a validation.
We assume that public sinks are observable by the at-
tacker. A script must not leak information from secret sources
to public sinks. Examples of public sinks are communication
to attacker-observable web sites or interaction with parts of
the host site that the script is not allowed to. As we describe
further, ﬁne granularity of the lattice-based approach allows
us to express such policies.
1.6 Scenarios
Figure 1: Polarized trust in mashups
However, this also severely reduces the possibilities for inter-
action between the documents. A number of techniques for
secure communication between documents have been pro-
posed to bypass the restrictions, but, due to JavaScript’s
dynamic nature, ensuring conﬁdentiality has proved to be
complicated. See Barth et al. [10] for a number of attacks
on mashup communication techniques.
The phenomenon is illustrated in Figure 1, where there
are two inclusions from site B into site A. The ﬁrst inclu-
sion (B.html) is by an iframe tag, while the second inclusion
(B.js) is by a script tag. This implies two levels of trust:
either full or no trust, but also two modes of interaction.
Either the content is fully trusted and integrated in the doc-
ument with full interactivity, or the content is not trusted
at all and loaded in a separate document with very limited
interactivity.
To sum up, today’s mashups trade the users’ conﬁdential-
ity and integrity for functionality. In order to deal with this
problem, we aim at requiring the same separation between
cross-origin content within documents as we have between
documents.
1.3 Lattice-based approach
We propose a lattice-based approach to mashup security.
The security lattice is built from the origins of the mashup
components so that each level in the lattice corresponds to
a set of origins. The key element in the approach is that the
security lattice is inferred directly from the mashup itself.
The security lattice is used to label the classiﬁed objects,
where an object’s label corresponds to the origin from which
it is loaded. The labels are used to track information ﬂow
within the browser. One may use a range of techniques, such
as static and/or dynamic analysis to ensure that information
from one origin does not ﬂow to another one unless the in-
formation has been declassiﬁed (in case of conﬁdentiality)
or endorsed (in case of integrity) for that speciﬁc target.
The enforcement mechanism controls possible channels for
communicating data from within the page to the outside
environment, such as by following links or submitting forms.
In order for the components of one origin to securely re-
lease information to another origin, declassiﬁcation [33] is
required. We propose a mechanism that allows origins to
specify escape hatches [31] for declassifying objects. The
novelty of our mechanism is that a piece of data may be re-
leased only if all origins that own the data agree that it can
be released. This approach provides a much-desired ﬂexibil-
!"#"$%&'()*&+)",-.)*/'"0)123#45&/678",01)-9&"0)123#4:078";?@@"&)=0&"$.)*/'"(*A('&"B*C*D1)-9&"(*A('&"Below are some motivating scenarios for our approach.
1.6.1 Dangerous goods
Consider a scenario of a trucking company that uses a
web-based application for managing truck data. In this con-
text, sensitive data that this application needs to operate on
includes information such as truck load and scheduled stops.
In order to visualize the location of the trucks to the user, the
application uses the Google Maps API [2]. This visualiza-
tion requires that the web application supplies coordinates
of each truck when making API calls. With the current tech-
nology, Google Maps API can only be used through script
inclusion, which means that the code supplied by Google
has access to the entire page it is part of. Due to the limi-
tations of the Same-Origin Policy, the company must trust
that Google’s code is not malicious or that Google’s security
is not compromised.
1.6.2 Advertising
In online advertisement, ad providers seek tight interac-
tion of the ads with pages that provide context for adver-
tisements. Hence, the iframe-based solution often turns out
to be too restrictive. On the other hand, ad scripts need
to be constrained from giving full trust, since a malicious
advertiser can compromise sensitive data.
Unlike previous work that restricts language for advertise-
ment to a strict subset, e.g., AdSafe [14], we allow interac-
tions between trusted code and ads as long as information-
ﬂow policies of the trusted origin are respected. Such poli-
cies may prevent any ﬂows from the trusted origin to the
ad provider, or perhaps, allow some restricted ﬂow, such
as releasing certain keywords or releasing some part of user
behavior.
2. LATTICE-BASED FLOW IN MASHUPS
To deal with the problem of cross-origin content within
a document, we propose an approach based on security lat-
tices. An interesting aspect in the mashup setting is that