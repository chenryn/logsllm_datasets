2,027,913
28,952
281,451
176,701
2,081
50
16,513
TABLE IV: Constituent datasets and their behavioural reports.
samples. We make these hashes available to enable further
research.
APT Malware. We gathered a dataset of APT malware
following a method similar to the dataset paper dAPTaset [59].
We processed HTML pages and pdf ﬁles and extracted all
malware hashes contained within these ﬁles. We collected APT
reports from various threat intelligence companies, govern-
ment agencies and other entities that release threat intelligence
data online, mostly from the APTnotes [4] repository. We then
processed these reports, creating an aggregated collection of
APT malware hashes, which we make public.
Yara Rule Match Malware. We collected an additional
dataset by leveraging the live hunting service from VT. To
this end, we deployed three Yara [9] rules we wrote to
detect
the use of LotL binaries based on the behavioural
footprint of the samples. We make these rules public in our
repository. Livehunt ran the provided Yara rules against all
malware binaries uploaded to the VT platform. We used
Livehunt to identify new malware hashes uploaded to VT that
matched the behavioural characteristics of malware using LotL
techniques. We subsequently inserted these malware hashes
into our database for augmentation and analysis.
Our Yara rules import an extension of the default Yara libraries
that
integrates the use of the Cuckoo module [74]. The
Cuckoo module in Yara allows rules to match artefacts of the
behavioural report. To this end, we leveraged the ﬁle access
parameter. Whenever a process creates another process, the
report shows an entry indicating that the image (PE ﬁle) of
the created process has been accessed. This artefact allowed us
to preselect candidate samples by ﬁnding occurrences of the
ﬁle system locations of LotL binaries being accessed.
B. Analysis Pipeline
Once we had gathered the different datasets composed of
Windows Portable Executable (PE) binaries, we analysed the
behaviour of the samples. To facilitate this we implemented
an analysis pipeline consisting of three phases: data collection
(described in the previous section), data augmentation and
analysis.
We augmented the data for the collected malware hashes by
querying VT’s public API and adding the returned additional
data to our database. We added this data to provide contextual
information about
the malware under analysis as well as
enabling the ﬁltering of malware by characteristics. This
additional data includes detection by different AV products, the
ﬁrst seen date and behavioural reports from dynamic analysis
of the binary. Each behavioural analysis report contains a list
of shell commands and processes executed or created. We
additionally ran AVClass [62] against each sample to add a
family classiﬁcation. Finally, we processed all the behavioural
reports to identify the samples that apply any LotL technique
among all the candidates. We provide a detailed description
of the process followed in Section IV-C.
C. LotL Technique Identiﬁcation
We processed all the collected behavioural reports by using
pattern matching to identify invocations of LotL binaries
within the execution of the malware. For this, we parsed the
following report indicators:
Shell Commands. Shell commands are commands that a
malicious binary executes in the shell of the host operating
system. Shell command logs can show executions of a system
binary by a reference to its absolute path. The command
prompt for Windows also includes a number of aliases such
as reg for Reg.exe, by which system binaries can also be
executed.
Processes. Process logs specify system binaries executed
by a malware sample. Parameters provided to the executed
binary are also contained within process logs in behavioural
reports.
In our analysis, we assessed that a sample uses LotL tech-
niques if its behavioural report contained at least one execution
of a LotL binary. We recorded the details of every LotL
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:34 UTC from IEEE Xplore.  Restrictions apply. 
1562
binary execution with its parameters and inserted them into the
database. We then analysed the parameters of these malware
samples to determine the most frequent parameter types and
execution purposes in every dataset. More speciﬁcally, we
identify these two separate types of binaries:
Default System Binaries. This set of binaries comprises
those native to the system according to the LOLBAS project,
together with those present
in the System32 folder of a
Windows 10 system. To identify the execution of these
binaries, we conducted string matching over the process logs.
Installed Signed Binaries. We extended our selection of
LotL binaries with those not installed by default, mentioned
in the 2017 Symantec LotL report and the SysInternals
tool suite [36], in addition to those listed in the LOLBAS
project.
Pattern Matching Reﬁnement. We iteratively validated a
cross-section of each result set, identiﬁed misclassiﬁed cases
and removed them from our results database, reﬁning our pat-
tern matching approach. We conducted this until all identiﬁed
LotL commands were properly categorised and mapped to an
execution purpose. Additionally, as shown in Table IV, we
identiﬁed anti-VM malware artefacts or erroneous reports and
do not include them within our measurements.
We also found a number of LotL binary executions where
no parameters were provided. These occur in the case of
either an execution of a binary without parameters, or process
hollowing, replacement or injection, all of which are out
of scope for our analysis. To justify removal, we manually
validated a small number of these samples.
Additionally, we identiﬁed several system binaries being exe-
cuted in the reports that were artefacts of the sandbox and are
not directly related to LotL technique usage. One such forensic
artefact we removed is the execution of Explorer.exe, that
is typically a remnant of the execution of malware samples
by the sandboxed environment. We removed executions of
Explorer.exe with the parameter of the absolute address
of C:\ and a sufﬁx of the SHA256 hash of the malware
sample in question. We did not remove forensically relevant
executions of Explorer.exe to open webpages or other
directories.
We also removed instances of Verclsid.exe, after manu-
ally verifying a subset of the 64,385 executions in our dataset.
We removed these instances as they were simply forensic
artefacts showing veriﬁcation of COM objects before they
were instantiated by Windows Explorer. Whilst the malicious
usage of this tool to spawn processes [29] is known, we
did not observe any occurrences of this behaviour in our
dataset. Finally, we found that many legitimate binaries from
the Ember benign dataset were spawning Msiexec.exe. We
manually inspected these cases and determined them to be
legitimate installer ﬁles packaged with the MSI installer tool.
Raw Command
Behaviour
Purpose of Execution
Rundll32.exe c:\mal.dll
Executing .dll via
Rundll32.exe
Proxied Execution of
Code
Cscript.exe mal.vbs
Executing .vbs script
via Cscript.exe
At.exe 10:15 c:\mal.exe
Reg add hklm\system\...
Persistent Execution of
Command at Future
Time via At.exe
Registry Modification
via Reg.exe
Persistence
Registry Modification
Fig. 1: Examples of raw commands being mapped to be-
haviours, which are in turn mapped to execution purposes. This
illustrates the classiﬁcation heuristic we applied to identify an
execution purpose.
We discarded these cases as they do not represent LotL binary
usage.
D. Parameter Analysis to Identify Execution Purpose
To identify the purpose of LotL technique executions, we
observed the parameters provided by malware samples. Figure
1 illustrates the mapping of four process executions. This
mapping was conducted across all datasets by identifying in-
dividual execution purposes, such as executions of Net.exe
with the stop parameter as task stopping. After individual
commands had been mapped to an execution purpose, we then
selected all matching executions for that binary. We repeated
this across all system binary executions until every execution
was classiﬁed as belonging to a speciﬁc execution purpose or
removed as a misclassiﬁed case (reﬁning our pattern matching
rules). Following this approach, we grouped the parameters by
purpose into nine separate categories. Three of these categories
are related to execution:
• Proxied Execution. Malware using a LotL binary to
abstract execution of other code e.g., Mshta.exe exe-
cuting .hta ﬁles and Rundll32.exe executing .dll ﬁles.
• Persistence. Malicious code achieves persistence if it
conﬁgures or modiﬁes the system to execute a com-
mand or stored job at a future point in time. This is
typically resultant from a system conﬁguration change
by a malware sample. e.g., Sc.exe with the create
parameter, Bitsadmin.exe with the /create parameter
or Schtasks.exe/At.exe with a datetime parameter.
• Delayed Execution. Using a LotL binary to delay ex-
ecution e.g., Ping.exe executing -n, followed with a
number, and an & to trigger the execution of another
binary.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:34 UTC from IEEE Xplore.  Restrictions apply. 
1563
System
Binary
Reg
Nslookup
Regasm
Runas
Schtasks
Sc
Wscript
Rundll32
Regsvr32
Attrib
Net
Ping
Taskkill
Netsh
Timeout
Wmic
Mshta
Cacls
Regedit
Tasklist
Cscript
Explorer
Msiexec
Vssadmin
Fig. 2: Relative prevalence of samples using LotL techniques
per dataset.
VTB Ember
7.07
15.49
4.49
15.14
1.25
9.93
7.84
0.39
3.78
7.50
6.08
5.87
1.95
3.31
3.16
4.70
3.62
2.99
2.83
4.63
2.52
8.45
2.14
27.19
2.39
1.49
3.37
1.40
1.36
0.74
0.62
1.27
4.68
1.09
0.00
0.89
1.55
0.52
0.00
0.00
0.88
0.00
0.69
0.69
1.78
0.55
0.00
0.81
GT
42.16
0.58
0.00
6.51
3.66
1.44
1.59
2.63
2.99
15.59
4.14
5.61
0.67
0.62
0.56
0.50
0.76
0.48
0.00
0.00
3.96
0.41
1.78
0.00
Frequency of LotL Binaries By Dataset
MS
4.26
4.55
0.44
0.00
0.26
1.17
0.61
14.00
8.58
0.32
1.89
1.31
4.04
2.49
0.33
36.14
10.72
0.23
0.00
0.00
0.00
0.00
0.57
0.58
VS VXU
5.88
0.70
1.60
0.00
4.27
10.00
5.50
8.62
5.87
3.63
9.48
4.81
6.30
6.54
1.13
0.55
0.60
3.11
2.79
0.85
0.00
6.0
0.00
0.00
11.10
0.00
0.00
0.00
0.00
14.08
2.36
5.25
4.47
1.18
9.85
5.06
3.40
5.19
0.00
9.63
0.74
0.80
6.97
2.60
1.52
1.91
0.58
0.00
The following three categories, instead, relate to the modiﬁ-
cation of underlying system components. Malware typically
engages in this behaviour in order to enable further propaga-
tion or action on objectives on a machine.
• Firewall Modiﬁcation. Modifying ﬁrewall conﬁguration
e.g., Netsh.exe with the Firewall parameter and suc-
cessive commands.
• Registry Modiﬁcation. Modifying registry settings e.g.,
Reg.exe with an Add or Delete parameter and a registry
location.
• Permissions Modiﬁcation. Modifying permissions of a
ﬁle e.g., Cacls.exe with a parameter that includes an
absolute ﬁle location.
Finally, we distinguish the following three categories that are
not related to execution or system modiﬁcation:
• File Opening. Opening a ﬁle, via binary execution e.g.,
Explorer.exe followed by a relative or absolute ﬁle
location.
• Reconnaissance. Elicitation of local or remote conﬁg-
uration for lateral movement, leveraging a LotL binary
e.g., Net.exe with user localgroup administrators or
execution of Ipconfig.exe, outputting to a ﬁle.
• Task Stopping. Surreptitious stopping of another process
or service using a LotL binary e.g., Taskkill.exe
executed with another process name as parameter. In
many cases, the goal of these executions is to disrupt
system security services.
TABLE V: Most frequently used binaries for each dataset
(percentage of the number of distinct sample-binary executions
observed). 5 most common highlighted in grey.
V. MEASUREMENT RESULTS
We followed the methodology described in Section IV to
evaluate the prevalence and nature of LotL techniques, and
to answer the research questions raised for this study.
in Commodity Mal-
A. Prevalence of LotL Techniques
ware
Relative Prevalence Between Datasets. Figure 2 shows the
percentage of malware samples that use LotL techniques in
every dataset. If we omit Ember’s benign dataset and the
APT malware dataset, we can observe that between 5.42%
and 12.72% of commodity malware samples used a LotL
technique at
least once. Within our VT balanced dataset,
we can observe that 9.6% of samples leveraged this type
of technique. These numbers show that LotL techniques are
a relatively widespread phenomenon and not an anecdotal
occurrence in speciﬁc malware samples or families.
Interestingly, APT datasets employed LotL techniques signif-
icantly more frequently than commodity malware. 26.26% of
the APT dataset made use of LotL techniques, more than
twice that of comparable commodity malware datasets. Our
ﬁndings conﬁrm the assertions of many reports that state that
APT campaigns use LotL techniques due to the increased
sophistication and evasive requirements of state-sponsored
malware authors. Section V-C presents deeper ﬁndings about
the APT dataset, while the rest of this section focuses on
commodity malware. We excluded the Yara dataset from this
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:34 UTC from IEEE Xplore.  Restrictions apply. 