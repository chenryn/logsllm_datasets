### Table IV: Constituent Datasets and Their Behavioral Reports

The following numbers represent the samples in each dataset:
- 2,027,913
- 28,952
- 281,451
- 176,701
- 2,081
- 50
- 16,513

We provide these hashes to enable further research.

#### APT Malware
We compiled a dataset of APT malware using a method similar to the dAPTaset [59]. We processed HTML pages and PDF files to extract all malware hashes. The APT reports were collected from various threat intelligence companies, government agencies, and other entities that release threat intelligence data online, primarily from the APTnotes [4] repository. We then aggregated these reports to create a comprehensive collection of APT malware hashes, which we have made public.

#### Yara Rule Match Malware
We also gathered an additional dataset by leveraging the live hunting service from VirusTotal (VT). We deployed three Yara rules [9] designed to detect the use of Living off the Land (LotL) binaries based on the behavioral footprint of the samples. These rules are publicly available in our repository. The VT Livehunt service ran these Yara rules against all uploaded malware binaries, identifying new malware hashes that matched the behavioral characteristics of LotL techniques. These hashes were then added to our database for further analysis.

Our Yara rules incorporate an extension of the default Yara libraries, integrating the Cuckoo module [74]. The Cuckoo module allows Yara rules to match artifacts in the behavioral report, such as file access parameters. When a process creates another process, the report indicates that the image (PE file) of the created process has been accessed. This artifact helped us preselect candidate samples by identifying occurrences where LotL binaries were accessed.

### B. Analysis Pipeline

After gathering the datasets composed of Windows Portable Executable (PE) binaries, we analyzed their behavior. Our analysis pipeline consists of three phases: data collection, data augmentation, and analysis.

**Data Collection:** 
Described in the previous section.

**Data Augmentation:**
We augmented the data for the collected malware hashes by querying VT’s public API and adding the returned additional data to our database. This included detection by different antivirus (AV) products, the first seen date, and behavioral reports from dynamic analysis of the binary. Each behavioral analysis report contains a list of shell commands and processes executed or created. We also ran AVClass [62] to add family classifications to each sample.

**Analysis:**
We processed all the behavioral reports to identify samples that apply any LotL technique among the candidates. A detailed description of this process is provided in Section IV-C.

### C. LotL Technique Identification

We identified invocations of LotL binaries within the execution of malware by parsing the following report indicators:

- **Shell Commands:** Shell commands are commands executed in the host operating system's shell. Logs can show executions of a system binary by referencing its absolute path. The command prompt for Windows includes aliases like `reg` for `Reg.exe`.

- **Processes:** Process logs specify system binaries executed by a malware sample, including parameters provided to the executed binary.

A sample was considered to use LotL techniques if its behavioral report contained at least one execution of a LotL binary. We recorded the details of every LotL binary execution with its parameters and inserted them into the database. We then analyzed the parameters to determine the most frequent parameter types and execution purposes in each dataset.

**Types of Binaries:**
- **Default System Binaries:** These are native to the system according to the LOLBAS project and those present in the System32 folder of a Windows 10 system. We identified their execution through string matching over process logs.
- **Installed Signed Binaries:** We extended our selection to include binaries not installed by default, mentioned in the 2017 Symantec LotL report and the SysInternals tool suite [36], as well as those listed in the LOLBAS project.

**Pattern Matching Refinement:**
We iteratively validated a cross-section of each result set, identified misclassified cases, and refined our pattern matching approach until all identified LotL commands were properly categorized and mapped to an execution purpose. We excluded anti-VM malware artifacts and erroneous reports from our measurements.

We also found several instances where no parameters were provided, which could be due to either an execution without parameters or process hollowing, replacement, or injection. We manually validated a small number of these samples to justify their removal.

Additionally, we identified system binaries executed in the reports that were artifacts of the sandbox environment and not directly related to LotL technique usage. For example, we removed executions of `Explorer.exe` with the parameter of the absolute address of `C:\` and a suffix of the SHA256 hash of the malware sample. We also removed instances of `Verclsid.exe`, as they were forensic artifacts showing verification of COM objects before instantiation by Windows Explorer.

### D. Parameter Analysis to Identify Execution Purpose

To identify the purpose of LotL technique executions, we observed the parameters provided by malware samples. Figure 1 illustrates the mapping of four process executions. We conducted this mapping across all datasets by identifying individual execution purposes, such as executions of `Net.exe` with the `stop` parameter for task stopping. After individual commands were mapped to an execution purpose, we selected all matching executions for that binary and repeated this process until every execution was classified or removed as a misclassified case.

We grouped the parameters by purpose into nine categories:

1. **Proxied Execution:** Malware uses a LotL binary to abstract the execution of other code, e.g., `Mshta.exe` executing `.hta` files and `Rundll32.exe` executing `.dll` files.
2. **Persistence:** Malicious code achieves persistence by configuring or modifying the system to execute a command or stored job at a future point in time, e.g., `Sc.exe` with the `create` parameter, `Bitsadmin.exe` with the `/create` parameter, or `Schtasks.exe/At.exe` with a datetime parameter.
3. **Delayed Execution:** Using a LotL binary to delay execution, e.g., `Ping.exe` executing `-n` followed by a number and an `&` to trigger the execution of another binary.

The following three categories relate to the modification of underlying system components:

4. **Firewall Modification:** Modifying firewall configuration, e.g., `Netsh.exe` with the `Firewall` parameter and successive commands.
5. **Registry Modification:** Modifying registry settings, e.g., `Reg.exe` with an `Add` or `Delete` parameter and a registry location.
6. **Permissions Modification:** Modifying permissions of a file, e.g., `Cacls.exe` with a parameter that includes an absolute file location.

Finally, we distinguish the following three categories that are not related to execution or system modification:

7. **File Opening:** Opening a file via binary execution, e.g., `Explorer.exe` followed by a relative or absolute file location.
8. **Reconnaissance:** Elicitation of local or remote configuration for lateral movement, leveraging a LotL binary, e.g., `Net.exe` with `user localgroup administrators` or execution of `Ipconfig.exe`, outputting to a file.
9. **Task Stopping:** Surreptitious stopping of another process or service using a LotL binary, e.g., `Taskkill.exe` executed with another process name as a parameter.

### V. Measurement Results

We evaluated the prevalence and nature of LotL techniques using the methodology described in Section IV to answer the research questions raised for this study.

#### A. Prevalence of LotL Techniques

**Relative Prevalence Between Datasets:**
Figure 2 shows the percentage of malware samples that use LotL techniques in each dataset. Excluding Ember’s benign dataset and the APT malware dataset, between 5.42% and 12.72% of commodity malware samples used a LotL technique at least once. In our VT balanced dataset, 9.6% of samples leveraged this type of technique, indicating that LotL techniques are relatively widespread and not just an anecdotal occurrence.

Interestingly, APT datasets employed LotL techniques significantly more frequently than commodity malware. 26.26% of the APT dataset used LotL techniques, more than twice that of comparable commodity malware datasets. This confirms that APT campaigns use LotL techniques due to the increased sophistication and evasive requirements of state-sponsored malware authors. Section V-C presents deeper findings about the APT dataset, while the rest of this section focuses on commodity malware. We excluded the Yara dataset from this analysis.