genesis: crashed: no parachute: G-switch failed: bad relay orientation
由于错误信息经常是以链式组合在一起的，所以错误信息中应避免大写和换行符。最终的错
误信息可能很长，我们可以通过类似grep的工具处理错误信息（译者注：grep是一种文本搜
索工具）。
编写错误信息时，我们要确保错误信息对问题细节的描述是详尽的。尤其是要注意错误信息
表达的一致性，即相同的函数或同包内的同一组函数返回的错误在构成和处理方式上是相似
的。
以OS包为例，OS包确保文件操作（如os.Open、Read、Write、Close）返回的每个错误的描
述不仅仅包含错误的原因（如无权限，文件目录不存在）也包含文件名，这样调用者在构造
新的错误信息时无需再添加这些信息。
一般而言，被调函数f(x)会将调用信息和参数信息作为发生错误时的上下文放在错误信息中并
返回给调用者，调用者需要添加一些错误信息中不包含的信息，比如添加url到html.Parse返回
的错误中。
让我们来看看处理错误的第二种策略。如果错误的发生是偶然性的，或由不可预知的问题导
致的。一个明智的选择是重新尝试失败的操作。在重试时，我们需要限制重试的时间间隔或
重试的次数，防止无限制的重试。
gopl.io/ch5/wait
// WaitForServer attempts to contact the server of a URL.
// It tries for one minute using exponential back-off.
// It reports an error if all attempts fail.
func WaitForServer(url string) error {
const timeout = 1 * time.Minute
deadline := time.Now().Add(timeout)
for tries := 0; time.Now().Before(deadline); tries++ {
_, err := http.Head(url)
if err == nil {
return nil // success
}
log.Printf("server not responding (%s);retrying…", err)
time.Sleep(time.Second ...
var depth int
func startElement(n *html.Node) {
if n.Type == html.ElementNode {
fmt.Printf("%*s\n", depth*2, "", n.Data)
depth++
}
}
func endElement(n *html.Node) {
if n.Type == html.ElementNode {
depth--
fmt.Printf("%*s\n", depth*2, "", n.Data)
}
}
上面的代码利用fmt.Printf的一个小技巧控制输出的缩进。 中的 会在字符串之前填充一
%*s *
些空格。在例子中,每次输出会先填充 数量的空格，再输出""，最后再输出HTML标
depth*2
签。
如果我们像下面这样调用forEachNode：
forEachNode(doc, startElement, endElement)
函数值 182
gopl
与之前的outline程序相比，我们得到了更加详细的页面结构：
$ go build gopl.io/ch5/outline2
$ ./outline2 http://gopl.io
...
练习 5.7： 完善startElement和endElement函数，使其成为通用的HTML输出器。要求：输出
注释结点，文本结点以及每个元素的属性（）。使用简略格式输出没有孩子结点
的元素（即用 代替 ）。编写测试，验证程序输出的格式正确。（详见11
章）
练习 5.8： 修改pre和post函数，使其返回布尔类型的返回值。返回false时，中止
forEachNoded的遍历。使用修改后的代码编写ElementByID函数，根据用户输入的id查找第
一个拥有该id元素的HTML元素，查找成功后，停止遍历。
func ElementByID(doc *html.Node, id string) *html.Node
练习 5.9： 编写函数expand，将s中的"foo"替换为f("foo")的返回值。
func expand(s string, f func(string) string) string
函数值 183
gopl
5.6. 匿名函数
拥有函数名的函数只能在包级语法块中被声明，通过函数字面量（function literal），我们可
绕过这一限制，在任何表达式中表示一个函数值。函数字面量的语法和函数声明相似，区别
在于func关键字后没有函数名。函数值字面量是一种表达式，它的值被成为匿名函数
（anonymous function）。
函数字面量允许我们在使用函数时，再定义它。通过这种技巧，我们可以改写之前对
strings.Map的调用：
strings.Map(func(r rune) rune { return r + 1 }, "HAL-9000")
更为重要的是，通过这种方式定义的函数可以访问完整的词法环境（lexical environment），
这意味着在函数中定义的内部函数可以引用该函数的变量，如下例所示：
gopl.io/ch5/squares
// squares返回一个匿名函数。
// 该匿名函数每次被调用时都会返回下一个数的平方。
func squares() func() int {