2.3 Last Branch Record
The LBR is a new feature in Intel CPUs that logs in-
formation about recently taken branches (i.e., omitting
information about not-taken branches) without any perfor-
mance degradation, as it is separated from the instruction
pipeline [26, 32, 33]. In Skylake CPUs, the LBR stores
the information of up to 32 recent branches, including the
address of a branch instruction (from), the target address
(to), whether the branch direction or branch target was
mispredicted (it does not independently report these two
mispredictions), and the elapsed core cycles between LBR
entry updates (also known as the timed LBR). Without
filtering, the LBR records all kinds of branches, includ-
ing function calls, function returns, indirect branches,
and conditional branches. Also, the LBR can selectively
record branches taken in user space, kernel space, or both.
Since the LBR reveals detailed information of recently
taken branches, an attacker may be able to know the fine-
grained control flows of an enclave process if the attacker
can directly use the LBR against it, though he or she
still needs mechanisms to handle not-taken branches and
the limited capacity of the LBR. Unfortunately for the
attacker and fortunately for the victim, an enclave does
not report its branch executions to the LBR unless it is in
a debug mode [24] to prevent such an attack. However,
in §3, we show how an attacker can indirectly use the
LBR against an enclave process while handling not-taken
branches and overcoming the LBR capacity limitation.
3 Branch Shadowing Attacks
We explain the branch shadowing attack, which can in-
fer the fine-grained control flow information of an enclave.
We first introduce our threat model and depict how we can
attack three types of branches: conditional, unconditional,
and indirect branches. Then, we describe our approach to
synchronizing the victim and the attack code in terms of
execution time and memory address space.
3.1 Threat Model
We explain our threat model, which is based on the
original threat model of Intel SGX and the controlled-
channel attack [60]: an attacker has compromised the
operating system and exploits it to attack a target enclave
program.
First, the attacker knows the possible control flows
of a target enclave program (i.e., a sequence of branch
instructions and their targets) by statically or dynamically
analyzing its source code or binary. This is consistent with
the important use case of running unmodified legacy code
inside enclaves [5,6,51,57]. Unobservable code (e.g., self-
modifying code and code from remote servers) is outside
the scope of our attack. Also, the attacker can map the
target enclave program into specific memory addresses to
designate the locations of each branch instruction and its
target address. Self-paging [22] and live re-randomization
of address-space layout [15] inside an enclave are outside
the scope of our attack.
Second, the attacker infers which portion of code the
target enclave runs via observable events, e.g., calling
functions outside an enclave and page faults. The attacker
uses this information to synchronize the execution of the
target code with the branch shadow code (§3.8).
Third, the attacker interrupts the execution of the target
enclave as frequently as possible to run the branch shadow
code. This can be done by manipulating a local APIC
timer and/or disabling the CPU cache (§3.6).
Fourth, the attacker recognizes the shadow code’s
branch predictions and mispredictions by monitoring
hardware performance counters (e.g., the LBR) or mea-
suring branch misprediction penalty [3, 12, 13].
Last, the attacker prevents the target enclave from ac-
cessing a reliable, high-resolution time source to avoid
the detection of attacks because of slowdown. Probing
the target enclave for every interrupt or page fault slows
the enclave down such that the attacker needs to hide it.
SGX version 1 already satisfies such a requirement, as it
disallows RDTSC. For SGX version 2 (not yet released),
the attacker may need to manipulate model-specific regis-
ters (MSRs) to hook RDTSC. Although the target enclave
could rely on an external time source, it is also unreliable
because of the network delay and overhead. Further, the
attacker can intentionally drop or delay such packets.
3.2 Overview
The branch shadowing attack aims to obtain the fine-
grained control flow of an enclave program by 1) knowing
whether a branch instruction has been taken and 2) infer-
ring the target address of the taken branch. To achieve
this goal, an attacker first needs to analyze the source
code and/or binary of a victim enclave program to find
all branches and their target addresses. Next, the attacker
writes shadow code for a set of branches to probe their
branch history, which is similar to Evtyushkin et al.’s at-
tack using the BTB [13]. Since using the BTB and BPU
alone suffers from significant noise, branch shadowing
exploits the LBR, which allows the attacker to precisely
identify the states of all branch types (§3.3, §3.4, §3.5).
Because of the size limitations of the BTB, BPU, and
LBR, the branch shadowing attack has to synchronize the
execution of the victim code and the shadow code in terms
of execution time and memory address space. We ma-
560    26th USENIX Security Symposium
USENIX Association
++b;
...
1 if (a != 0) {
2
3
4 }
5 else {
--b;
6
...
7
8 }
9 a = b;
10 ...
nop; // never executed
...
}
1 ⋆ if (c != c) {
2
3
4
5 ⋆ else {
6 ⋆
7 ⋆
8 ⋆ }
9 ⋆ nop;
10 ⋆ ...
nop; // execution
...
(a) Victim code executed in-
side an enclave. According to
the value of a, either if-block
or else-block is executed.
(b) Shadow code aligned with
(a). The BPU predicts which
block will be executed accord-
ing to the branch history of (a).
Figure 1: Shadow code (b) against a victim’s conditional branch
(a). The execution time (i.e., running [1, 5-10], marked with
⋆ in (b)) of the shadowing instance depends on the branching
result (i.e., taken or not at [1] in (a)) of the victim instance.
nipulate the local APIC timer and the CPU cache (§3.6)
to frequently interrupt an enclave process execution for
synchronization, adjust virtual address space (§3.7), and
run shadow code to find a function the enclave process is
currently running or has just finished running (§3.8).
3.3 Conditional Branch Shadowing
We explain how an attacker can know whether a target
conditional branch inside an enclave has been taken by
shadowing its branch history. For a conditional branch,
we focus on recognizing whether the branch prediction
is correct because it reveals the result of a condition eval-
uation for if statement or loop. Note that, in this and
later sections, we mainly focus on a forward conditional
branch that will be predicted as not taken by a static
branch prediction rule (§2.2). Attacking a backward con-
ditional branch is basically the same such that we skip the
explanation of it in this paper.
Inferring through timing (RDTSC). First, we explain
how we can infer branch mispredictions with RDTSC. Fig-
ure 1 shows an example victim code and its shadow code.
The victim code’s execution depends on the value of a:
if a is not zero, the branch will not be taken such that
the if-block will be executed; otherwise, the branch will
be taken such that the else-block will be executed. In
contrast, we make the shadow code’s branch always be
taken (i.e., the else-block is always executed). Without
the branch history, this branch is always mispredicted be-
cause of the static branch prediction rule (§2.2). To make
a BTB entry collision [13], we align the lower 31 bits of
the shadow code’s address (both the branch instruction
and its target address) with the address of the victim code.
When the victim code has been executed before the
shadow code is executed, the branch prediction or mispre-
diction of the shadow code depends on the execution of
the victim code. If the conditional branch of the victim
code has been taken, i.e., if a was zero, the BPU predicts
that the shadow code will also take the conditional branch,
Correct prediction Misprediction
Mean
94.21
59.59
25.69
σ
806.56
RDTSCP
191.48
Intel PT CYC packets
10.52
LBR elapsed cycle
Table 1: Measuring branch misprediction penalty with RDTSCP,
Intel PT CYC packet, and LBR elapsed cycle (10,000 times).
We put 120 NOP instructions at the fall-through path. The LBR
elapsed cycle is less noisy than RDTSCP and Intel PT. σ stands
for standard deviation.
Mean
120.61
90.64
35.04
σ
13.10
14.44
9.72
which is a correct prediction so that no rollback will oc-
cur. If the conditional branch of the victim code either
has not been taken, i.e., if a was not zero, or has not been
executed, the BPU predicts that the shadow code will not
take the conditional branch. However, this is an incorrect
prediction such that a rollback will occur.
Previous branch-timing attacks try to measure such a
rollback penalty with the RDTSC or RDTSCP instructions.
However, our experiments show (Table 1) that branch
misprediction timings are quite noisy. Thus, it was diffi-
cult to set a clear boundary between correct prediction and
misprediction. This is because the number of instructions
that would be mistakenly executed because of the branch
misprediction is difficult to predict given the highly com-
plicated internal structure of the latest Intel CPUs (e.g.,
out-of-order execution). Therefore, we think that the
RDTSC-based inference is difficult to use in practice and
thus we aim to use the LBR to realize precise attacks,
since it lets us know branch misprediction information,
and its elapsed cycle feature has little noise (Table 1).
Inferring from execution traces (Intel PT). Instead of
using RDTSC, we can use Intel PT to measure a mispre-
diction penalty of a target branch, as it provides precise
elapsed cycles (known as a CYC packet) between each PT
packet. However, CYC packets cannot be used immedi-
ately for our purpose because Intel PT aggregates a series
of conditional and unconditional branches into a single
packet as an optimization. To avoid this problem, we
intentionally insert an indirect branch right after the target
branch, making all branches properly record their elapsed
time in separate CYC packets. Intel PT’s timing infor-
mation about branch misprediction has a much smaller
variance than RDTSCP-based measurements (Table 1).
Precise leakage (LBR). Figure 2 shows a procedure for
conditional branch shadowing with the BTB, BPU, and
LBR. We first explain the case in which a conditional
branch has been taken (Case 1). 1 A conditional branch
of the victim code is taken and the corresponding informa-
tion is stored into the BTB and BPU. This branch taken
occurs inside an enclave such that the LBR does not re-
port this information unless we run the enclave process in
a debug mode. 2 Enclave execution is interrupted and
USENIX Association
26th USENIX Security Symposium    561
mechanism to ignore every function call and all branches
in user space.
Next, we explain the case in which a conditional branch
has not been taken (Case 2). 1 The conditional branch
of the victim code is not taken, so either no information
is stored into the BTB and BPU or the corresponding
old information might be deleted (if there are conflict
missed in the same BTB set.) 2 Enclave execution is
interrupted and the OS takes control. 3 The OS enables
the LBR and then executes the shadow code. 4 The BPU
incorrectly predicts that the shadowed conditional branch
will not been taken, so the execution is rolled back to take
the branch. 5 Finally, by disabling and retrieving the
LBR, we learn that the shadowed conditional branch has
been mispredicted—it has been taken unlike the branch
prediction.
Initializing branch states. When predicting a condi-
tional branch, modern BPUs exploit the branch’s several
previous executions to improve prediction accuracy. For
example, if a branch had been taken several times and then
not taken only once, a BPU would predict that its next
execution would be taken. This would make the shadow
branching infer incorrectly a target branch’s execution
after it has been executed multiple times (e.g., inside a
loop). To solve this problem, after the final step of each
attack iteration, we additionally run the shadow code mul-
tiple times while varying the condition (i.e., interleaving
taken and not-taken branches) to initialize branch states.
3.4 Unconditional Branch Shadowing
We explain how an attacker can know whether a target
unconditional branch inside an enclave has been executed
by shadowing its branch history. This gives us two kinds
of information. First, an attacker can infer where the
instruction pointer (IP) inside an enclave currently points.
Second, an attacker can infer the result of the condition
evaluation of an if-else statement because an if block’s
last instruction is an unconditional branch to skip the
corresponding else block.
Unlike a conditional branch, an unconditional branch
is always taken; i.e., a branch prediction is not needed.
Thus, to recognize its behavior, we need to divert its
target address to observe branch target mispredictions,
not branch mispredictions. Interestingly, we found that
the LBR does not report the branch target misprediction
of an unconditional branch; it always says that each taken
unconditional branch was correctly predicted. Thus, we
use the elapsed cycles of a branch that the LBR reports to
identify the branch target misprediction penalty, which is
less noisy than RDTSC (Table 1).
Attack procedure. Figure 3 shows our procedure for
unconditional branch shadowing. Unlike the conditional
branch shadowing, we make the target of the shadowed
unconditional branch differ from that of the victim uncon-
(a) Case 1: The target conditional branch has been taken.
(b) Case 2: The target conditional branch has not been taken
(i.e., either not been executed or been executed but not taken).
Figure 2: Branch shadowing attack against a conditional branch
(i.e., Case 1 for taken and Case 2 for non-taken branches) inside
an enclave († LBR records the result of misprediction. For
clarity, we use the result of prediction in this paper.)
the OS takes control. We explain how a malicious OS
can frequently interrupt an enclave process in §3.6. 3
The OS enables the LBR and then executes the shadow
code. 4 The BPU correctly predicts that the shadowed
conditional branch will be taken. At this point, a branch
target prediction will fail because the BTB stores a target
address inside an enclave. However, this target mispre-
diction is orthogonal to the result of a branch prediction
though it will introduce a penalty in CPU cycles (§3.4).
5 Finally, by disabling and retrieving the LBR, we learn
that the shadowed conditional branch has been correctly
predicted—it has been taken as predicted. We think that
this correct prediction is about branch prediction because
the target addresses of the two branch instructions are
different; that is, the target prediction might be failed.
Note that, by default, the LBR reports all the branches
(including function calls) that occurred in user and ker-
nel space. Since our shadow code has no function calls
and is executed in the kernel, we use the LBR’s filtering