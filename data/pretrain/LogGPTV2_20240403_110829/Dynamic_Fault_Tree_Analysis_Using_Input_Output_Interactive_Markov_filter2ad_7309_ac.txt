37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007The I/O-IMC models discussed above have been gener-
alized (cf. [9] for details) to deal with any number of inputs.
performance measure of interest (see [2] for an efﬁcient al-
gorithm on analysing CTMDP).
4.4. Simultaneity and non-determinism
In earlier development of the DFT modeling formalism,
the semantics (i.e. the model interpretation) of some DFT
conﬁgurations where FDEP gates are used remained un-
clear. For instance, in Figure 6, the FDEP gate triggers (in
both conﬁgurations) the failures of two basic events. Does
this mean that the dependent events fail simultaneously and,
if so, what is the state of the PAND gate (in conﬁguration
a) and which spare gate gets the shared spare S (in conﬁg-
uration b)? These examples were also discussed in [8], and
we believe that this is an inherent non-determinism in these
models. In [8], these special cases are dealt with by system-
atically removing the non-determinism by transforming it
into a probabilistic (or deterministic) choice. In our frame-
work, we allow non-determinism and naturally provide a
mechanism for detecting it should this arise in a particu-
lar DFT conﬁguration. Moreover, if the non-determinism
was not intended, then its detection indicates that an error
occurred during the model speciﬁcation. Non-determinism
could also be an inherent characteristic of the system being
analyzed, and should therefore be explicitly modeled. An
example of such a system would be a repairman following
a ﬁrst failed ﬁrst repaired policy and being in charge of two
components. Now, if both components fail at the same time,
then we might decide to model the choice of which one to
pick ﬁrst for repair to be a non-deterministic choice made
by the repairman.
In the I/O-IMC formalism, the DFT conﬁgurations de-
picted in Figure 6 will be interpreted as follows: Whenever
the dependent events failure has been triggered, then the
trigger event (the cause) happened ﬁrst and was then im-
mediately (with no time elapsing) followed by the failure of
the dependent events (the effect). This adheres to the clas-
sical notion of causality. Moreover, the dependent events
FDEP
T
A
(a)
FDEP
T
B
SPARE GATE
SPARE GATE
WSP
WSP
A
(b)
B
S
Figure 6. The occurrence of non-determinism.
fail in a non-deterministic order (i.e. essentially consider
all combinations of ordering). In this case, the ﬁnal I/O-
IMC model is not a continuous-time Markov chain (CTMC)
but rather a continuous-time Markov decision process (CT-
MDP), which can be analysed by computing bounds of the
4.5. Conversion of a DFT into a community
of I/O-IMC
We have deﬁned the individual I/O-IMC models for each
of the DFT elements and some were described in the pre-
vious sub-sections. We can now convert any given DFT
into a corresponding set of I/O-IMC models. Moreover, we
need to match the inputs and outputs of all the models. The
mapping between the DFT and the I/O-IMC community is
a one-to-one mapping, except for some cases (e.g. spare ac-
tivation and functional dependency) where extra auxiliary
I/O-IMC are also used.
5. DFT analysis
Once the DFT has been converted into an I/O-IMC com-
munity, the compositional aggregation methodology can be
applied on the I/O-IMC community to reduce the com-
munity to a single I/O-IMC. The ﬁnal I/O-IMC reduces
in many cases to a CTMC9. This CTMC can be then
solved using standard methods [18] to compute perfor-
mance measures such as system unreliability. The full con-
version/analysis algorithm10 is as follows:
1. Map each DFT element to its corresponding (aggre-
gated) I/O-IMC and match all inputs and outputs. The
result of this step is an I/O-IMC community.
2. Pick two I/O-IMC and parallel compose them.
3. Hide output signals that won’t be subsequently used
(i.e. synchronized on).
4. Aggregate (using weak bisimulation as mentioned in
Section 3) the I/O-IMC obtained from the composition
of the two I/O-IMC picked in Step 2 and the hiding of
the output signals in Step 3.
5. Go to Step 2 if more than 1 I/O-IMC is left, otherwise
go to Step 6.
6. Analyse the aggregated CTMC (or CTMDP).
5.1. Example: The cardiac assist system
The cardiac assist system (CAS) model is taken from
[3] and is based on a real system. The DFT is shown in
Figure 7. The CAS consists of three separate and distinct
modules: The CPU unit, the motor unit and the pump unit.
9Occasionally to a CTMDP if some non-determinism remains.
10Note that this algorithm is amenable to parallelization.
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007system
system
CPU_fdep
CPU_unit
Motor_unit
Pump_unit
A
B
C
D
Trigger
P
B
MP
Motors
Pump_A
Pump_B
CS
SS
MS
MA
MB
PA
PS
PB
Figure 7. The cardiac assist system DFT.
There are two CPUs: a primary (P, λ = 0.5) and a warm
spare (B, λ = 0.5) with α = 0.5. Both are functionally
dependent on a cross switch (CS, λ = 0.2) and a system
supervision (SS, λ = 0.2), which means that the failure
of either these components will trigger the failure of both
CPUs. There are also two motors: a primary (MA, λ = 1)
and a cold spare (MB, λ = 1). The switching component
(MS, λ = 0.01) turns on the spare motor when the primary
fails. The MS is also subject to failure, but this failure is
only relevant if it occurs before the failure of the primary
motor. Finally, there are three pumps: two primary pumps
(PA and PB with λ = 1 for both) running in parallel and a
cold shared spare pump (PS, λ = 1). All three pumps must
fail for the pump unit to fail.
We have developed our own conversion tool which takes
as input a DFT speciﬁed in the Galileo DFT format [11],
and translates the DFT into its corresponding community of
I/O-IMC models in the format of the TIPP tool [13]. The
I/O-IMC models are then composed and aggregated using
the TIPP tool. Finally, the system unreliability is computed
also using the TIPP tool. Each of the aggregated I/O-IMC
models of the three modules had 6 states. This result was
comparable to the Galileo tool results, where the biggest
generated CTMC (the pump unit) had 8 states. The system
unreliability obtained using the TIPP tool was 0.6579 for a
mission time equals to 1 time unit. The result provided by
the Galileo DIFTree tool was identical. In the next section,
we show, through a second example, the enhanced modular
analysis that we attain using the I/O-IMC framework.
5.2. Modular analysis
In this section, we illustrate the lack of modularity (al-
ready pointed out in [1, 5] and which leads to a worsening of
the state-space explosion problem) in the DIFTree method-
ology with respect to dynamic modules. The example at
hand, shown in Figure 8, is called the cascaded PAND sys-
tem (CPS) for which a variation can be found in [5]. The
CPS consists of two PAND gates and three AND gates each
having four identical BE with a failure rate equals to 1. In
fact, the three AND gates constitute independent and identi-
Figure 8. The cascaded PAND system.
cal modules. However, since the top gate is a dynamic gate,
the DIFTree methodology does not modularize the tree into
ﬁve11 distinct modules; but it rather considers the whole tree
as a single module. The reason that DIFTree does not con-
sider, for instance, module A as an independent module is
because its parent gate (i.e.
the PAND gate System) is a
dynamic gate (cf. Section 2).
Thanks to the interactivity of I/O-IMC, we are able to
further modularize the CPS and generate the correspond-
ing I/O-IMC for each of the ﬁve modules. Moreover, since
A, C, and D are identical, we only need to generate the
I/O-IMC for one of these modules and reuse it by renaming
some of the activation and ﬁring signals. Figure 9 shows the
I/O-IMC of module A after parallel composition and aggre-
gation. The I/O-IMC is particularly small because all basic
events have the same failure rate and the order in which
they fail is irrelevant. Solving the CPS following this mod-
aA?
fA!
Figure 9. I/O-IMC of module A.
ular compositional aggregation analysis technique resulted
in 156 states and 490 transitions for the biggest generated
I/O-IMC. This result is to be contrasted with the DIFTree
solution which resulted in 4113 states and 24608 transi-
tions. The system unreliability, for a mission time equals
to 1 time unit, is the same in both cases and equals 0.00135.
The reason DIFTree performs so poorly is because the cor-
responding CTMC is generated for the whole tree (i.e. with
12 basic events) and at once, and in which even irrelevant
failure orders (such as for the BE belonging to module A)
are accounted for. The compositional aggregation approach
performs particularly well for this example due to the high
modularity of the system. However, the approach does not
perform as well for some examples we have worked on
where the DFT elements are highly connected (i.e. numer-
ous interdependencies/interactions between DFT elements),
which leads to the incapacity to effectively divide the sys-
tem into independent small modules.
11Each gate acts as an independent module.
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 20076. Modular model-building
Static fault trees are highly modular, i.e., any sub-tree
can be used as an input to another static gate. Unfortunately,
this modularity does not currently apply to dynamic trees.
Indeed, only BE are allowed as inputs to spare gates and
as dependent events of FDEP gates. In the I/O-IMC frame-
work, we increase the modularity of DFT by allowing: (1)
independent sub-trees to act as primary and spare compo-
nents and (2) FDEP gates to trigger any arbitrary element
(BE and gates).
This section and the CPS example of the previous sec-
tion show the enhanced modularity obtained in our frame-
work and the ability to reuse, without restrictions, indepen-
dent sub-modules within larger dynamic modules. Such
reusability, which was previously only fully implementable
in static FT, is a very powerful and useful concept in large
FT. Indeed, being able to ‘plug-in’ modules is a practical
feature when designing very large systems where the model
is build incrementally and/or various teams are working on
different parts of the system.
6.1. Spare modules extension
The system depicted in Figure 10.a is a typical system
we would like to be able to model using the DFT formal-
ism. The primary and spare components are not BE, but
rather more complex sub-systems. In the I/O-IMC frame-
work, we allow primary and spare components to be any
independent sub-system12. We enforce the independence
restriction because otherwise the activation of these compo-
nents becomes unclear.
This extension of primary and spare components re-
quires the reexamination of the concept of activation. The
intuition is as follows: In Figure 10.a, the activation of mod-
ule ‘spare’ simply means the activation of the two BE C and
D. The module’s (represented by its top-node AND gate)
dormancy is deﬁned by the dormancy of its BE. The AND
gate I/O-IMC model is not changed and has the same behav-
ior whether ‘spare’ is dormant or active. In fact, whenever
an activation signal is received by module ‘spare’, this same
activation signal is simply passed on to the next components
(which happen to be BE in this example), one level down the
tree. The behavior of all the gates (i.e. I/O-IMC models) is
unchanged whether they are used as spares or not. However,
the spare gate is an exception to this rule and does behave
differently when used as a spare. Figure 10.b illustrates this:
When ‘spare’ is not activated (i.e. ‘primary’ has not failed),
BE C and D are dormant; and even if C (being a warm
SPARE GATE
system
SPARE GATE
system
WSP
WSP
system
primary
spare
SPARE GATE
primary
SPARE GATE
spare
WSP
WSP
FDEP
T
A
A
B
C
D