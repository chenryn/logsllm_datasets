We found two vulnerabilities. First, we identiﬁed a
latent update capability in the media player that will
automatically recognize an ISO 9660-formatted CD with
a particularly named ﬁle, present the user with a cryptic
message and, if the user does not press the appropriate
button, will then reﬂash the unit with the data contained
therein.7 Second, knowing that the media player can
parse complex ﬁles, we examined the ﬁrmware for input
vulnerabilities that would allow us to construct a ﬁle that,
if played, gives us the ability to execute arbitrary code.
For the latter, we reverse-engineered large parts of the
media player ﬁrmware, identifying the ﬁle system code
as well as the MP3 and WMA parsers. In doing so, we
documented that one of the ﬁle read functions makes
strong assumptions about input length and moreover that
there is a path through the WMA parser (for handling
an undocumented aspect of the ﬁle format) that allows
7This is not the standard method that the manufacturer uses to
update the media player software and thus we believe this is likely a
vestigial capability in the supplier’s code base.
arbitrary length reads to be speciﬁed; together these allow
a buffer overﬂow.
This particular vulnerability is not trivial to exploit.
The buffer that is overﬂowed is not on the stack but
in a BSS segment, without clear control data variables
to hijack. Moreover, immediately after the buffer are
several dynamic state variables whose values are con-
tinually checked and crash the system when overwritten
arbitrarily.
To overcome these and other obstacles, we developed
a native in-system debugger that communicates over an
unused serial port we identiﬁed on the media player. This
debugger lets us dump and alter memory, set breakpoints,
and catch exceptions. Using this debugger we were
able to ﬁnd several nearby dynamic function pointers
to overwrite as well as appropriate contents for the
intervening state variables.
We modiﬁed a WMA audio ﬁle such that, when burned
onto a CD, plays perfectly on a PC but sends arbitrary
CAN packets of our choosing when played by our car’s
media player. This functionality adds only a small space
overhead to the WMA ﬁle. One can easily imagine many
scenarios where such an audio ﬁle might ﬁnd its way into
a user’s media collection, such as being spread through
peer-to-peer networks.
OBD-II. The OBD-II port can access all CAN buses in
the vehicle. This is standard functionality because the
OBD-II port is the principal means by which service
technicians diagnose and update individual ECUs in a
vehicle. This process is intermediated by hardware tools
(sold both by automobile manufacturers and third parties)
that plug into the OBD-II port and can then be used
to upgrade ECUs’ ﬁrmware or to perform a myriad of
diagnostic tasks such as checking the diagnostic trouble
codes (DTCs).
Since 2004, the Environmental Protection Agency
has mandated that all new cars in the U.S. support the
SAE J2534 “PassThru” standard — a Windows API
that provides a standard, programmatic interface to
communicate with a car’s internal buses. This is typically
implemented as a Windows DLL that communicates
over a wired or wireless network with the reprogram-
ming/diagnostic tool (hereafter we refer to the latter
simply as “the PassThru device”). The PassThru device
itself plugs into the OBD-II port in the car and from that
vantage point can communicate on the vehicle’s internal
networks under the direction of software commands sent
via the J2534 API. In this way, applications developed
independently of the particular PassThru device can be
used for reprogramming or diagnostics.
We studied the most commonly used PassThru device
for our car, manufactured by a well-known automotive
electronics supplier on an OEM basis (the same device
can be used for all current makes and models from
the same automobile manufacturer). The device itself
is roughly the size of a paperback book and consists
of a popular SoC microprocessor running a variant of
Linux as well as multiple network interfaces, including
USB and WiFi — and a connector for plugging into
the car’s OBD-II port.8 We discovered two classes of
vulnerabilities with this device. First, we ﬁnd that an
attacker on the same WiFi network as the PassThru
device can easily connect to it and, if the PassThru
device is also connected to a car, obtain control over
the car’s reprogramming. Second, we ﬁnd it possible to
compromise the PassThru device itself, implant malicious
code, and thereby affect a far greater number of vehicles.
To be clear, these are vulnerabilities in the PassThru
device itself, not the Windows software which normally
communicates with it. We experimentally evaluated both
vulnerability classes and elaborate on our analyses below.
After booting up, the device periodically advertises
its presence by sending a UDP multicast packet on each
network to which it is connected, communicating both
its IP address and a TCP port for receiving client requests.
Client applications using the PassThru DLL connect to
the advertised port and can then conﬁgure the PassThru
device or command it to begin communicating with the
vehicle. Communication between the client application
and the PassThru device is unauthenticated and thus
depends exclusively on external network security for
any access control. Indeed, in its recommended mode
of deployment, any PassThru device should be directly
accessible by any dealership computer. A limitation is
that only a single application can communicate with a
given PassThru device at a time, and thus the attacker
must wait for the device to be connected but not in use.
The PassThru device exports a proprietary, unauthen-
ticated API for conﬁguring its network state (e.g., for
setting with which WiFi SSID it should associate). We
identiﬁed input validation bugs in the implementation of
this protocol that allow an attacker to run arbitrary Bourne
Shell commands via shell-injection, thus compromising
the unit. The underlying Linux distribution includes pro-
grams such as telnetd, ftp, and nc so, having gained
entry to the device via shell injection, it is trivial for the
attacker to open access for inbound telnet connections
(exacerbated by a poor choice of root password) and then
transfer additional data or code as necessary.
To evaluate the utility of this vulnerability and make
it concrete, we built a program that combines all of these
steps. It contacts any PassThru devices being advertised
(e.g., via their WiFi connectivity or if connected directly
via Ethernet), exploits them via shell injection, and
8The manufacturer’s dealership guidelines recommend the use of
the WiFi interface, thereby supporting an easier tetherless mode of use,
and suggest the use of link-layer protection such as WEP (or, in the
latest release of the device, WPA2) to prevent outside access.
Figure 2: PassThru-based shell-injection exploit scenario.
The adversary gains access to the service center network
(e.g., by compromising an employee laptop), then (1)
compromises any PassThru devices on the network, each
of which compromise any cars they are used to service
(2 and 3), installing Trojan horses to be activated based
on some environmental trigger. The PassThru device also
(4) spreads virally to other PassThru devices (e.g., if a
device is loaned to other shops) which can repeat the same
process (5).
installs a malicious binary (modifying startup scripts so
it is always enabled). The malicious binary will send
pre-programmed messages over the CAN bus whenever
a technician connects the PassThru device to a car. These
CAN packets install malware onto the car’s telematics
unit. This malware waits for an environmental trigger
(e.g., speciﬁc date and time) before performing some
action. Figure 2 gives a pictorial overview of this attack.
To summarize, an attacker who can connect to a
dealership’s wireless network (e.g., via social engineering
or a worm/virus à la Stuxnet [7]) is able to subvert any
active PassThru devices that will in turn compromise any
vehicles to which they connect. Moreover, the PassThru
device is sufﬁciently general to mount the attack itself. To
demonstrate this, we have modiﬁed our program, turning
it into a worm that actively seeks out and spreads to other
PassThru devices in range. This attack does not require
interactivity with the attacker and can be fully automated.
4.3 Short-range wireless channels: Bluetooth
We now turn to short-range wireless channels and focus
on one in particular: Bluetooth. Like many modern cars,
ours has built-in Bluetooth capabilities which allow the
occupants’ cell phones to connect to the car (e.g., to
enable hands-free calling). These Bluetooth capabilities
are built into our car’s telematics unit.
Through reverse engineering, we gained access to
the telematics ECU’s Unix-like operating system and
identiﬁed the particular program responsible for handling
Bluetooth functionality. By analyzing the program’s
symbols we established that it contains a copy of a
popular embedded implementation of the Bluetooth
protocol stack and a sample hands-free application.
However, the interface to this program and the rest of the
telematics system appear to be custom-built. It is in this
custom interface code that we found evidence of likely
            Service Center WiFi NetworkLaptopPassThruDevice12345PassThruDevicevulnerabilities. Speciﬁcally, we observed over 20 calls
to strcpy, none of which were clearly safe. We inves-
tigated the ﬁrst such instance in depth and discovered an
easily exploitable unchecked strcpy to the stack when
handling a Bluetooth conﬁguration command.9 Thus, any
paired Bluetooth device can exploit this vulnerability to
execute arbitrary code on the telematics unit.
As with our indirect physical channel investigations,
we establish the utility of this vulnerability by making it
concrete. We explore two practical methods for exploiting
this attack and in doing so unearth two sub-classes of the
short-range wireless attack vector: indirect short-range
wireless attacks and direct short-range wireless attacks.
Indirect short-range wireless attacks. The vulnerabil-
ity we identiﬁed requires the attacker to have a paired
Bluetooth device. It may be challenging for an attacker to
pair her own device with the car’s Bluetooth system — a
challenge we consider in the direct short-range wireless
attacks discussion below. However, the car’s Bluetooth
subsystem was explicitly designed to support hands-free
calling and thus may naturally be paired with one or
more smartphones. We conjecture that if an attacker can
independently compromise one of those smartphones,
then the attacker can leverage the smartphone as a
stepping-stone for compromising the car’s telematics
unit, and thus all the critical ECUs on the car.
To assess this attack vector we implemented a simple
Trojan Horse application on the HTC Dream (G1) phone
running Android 2.1. The application appears to be in-
nocuous but under the hood monitors for new Bluetooth
connections, checks to see if the other party is a telemat-
ics unit (our unit identiﬁes itself by the car manufacturer
name), and if so sends our attack payload. While we
have not attempted to upload our code to the Android
Market, there is evidence that other Trojan applications
have been successfully uploaded [25]. Additionally, there
are known exploits that can compromise Android and
iPhone devices that visit malicious Web sites. Thus our
assessment suggests that smartphones can be a viable
path for exploiting a car’s short-range wireless Bluetooth
vulnerabilities.
Direct short-range wireless attacks. We next assess
whether an attacker can remotely exploit the Bluetooth
vulnerability without access to a paired device. Our
experimental analyses found that a determined attacker
can do so, albeit in exchange for a signiﬁcant effort in
development time and an extended period of proximity
to the vehicle.
There are two steps precipitating a successful attack.
First, the attacker must learn the car’s Bluetooth MAC
9Because the size of the available buffer is small, our exploit simply
creates a new shell on the telematics unit from which it downloads and
executes more complex code from the Internet via the unit’s built-in
3G data capabilities.
address. Second, the attacker must surreptitiously pair his
or her own device with the car. Experimentally, we ﬁnd
that we can use the open source Bluesniff [23] package
and a USRP-based software radio to sniff our car’s Blue-
tooth MAC address when the car is started in the presence
of a previously paired device (e.g., when the driver turns
on the car while carrying her cell phone). We were also
able to discover the car’s Bluetooth MAC address by
snifﬁng the Bluetooth trafﬁc generated when one of the
devices, which has previously been paired to a car, has its
Bluetooth unit enabled, regardless of the presence of the
car — all of the devices we experimented with scanned
for paired devices upon Bluetooth initialization.
Given the MAC address, the other requirement for
pairing is possessing a shared secret (the PIN). Under
normal use, if the driver wishes to pair a new device, she
puts the car into pairing mode via a well-documented
user interface, and, in turn, the car provides a random PIN
(regenerated each time the car starts or when the driver
initiates the normal pairing mode) which is then shown
on the dashboard and must then be manually entered into
the phone. However, we have discovered that our car’s
Bluetooth unit will respond to pairing requests even with-
out any user interaction. Using a simple laptop to issue
pairing requests, we are thus able to brute force this PIN
at a rate of eight to nine PINs per minute, for an average
of approximately 10 hours per car; this rate is limited
entirely by the response time of the vehicle’s Bluetooth
stack. We conducted three empirical trials against our car
(resetting the car each time to ensure that a new PIN was
generated) and found that we could pair with the car after
approximately 13.5, 12.5, and 0.25 hours, respectively.
The pairing process does not require any driver inter-
vention and will happen completely obliviously to any
person in the car.10 While this attack is time consuming
and requires the car(s) under attack to be running, it is
also parallelizable, e.g., an attacker could sniff the MAC
addresses of all cars started in a parking garage at the
end of a day (assuming the cars are pre-paired with at
least one Bluetooth device). If a thousand such cars leave
the parking garage in a day, then we expect to be able to
brute force the PIN for at least one car within a minute.
After completing this pairing, the attacker can inject on
the paired channel an exploit like the one we developed
and thus compromise the vehicle.
4.4 Long-range wireless channels: Cellular
Finally, we consider long-range wireless channels and,
in particular, focus on the cellular capabilities built into
our car’s telematics unit. Like many modern cars, our
car’s cellular capabilities facilitate a variety of safety
10As an artifact of how this “blind” pairing works, the paired device
does not appear on the driver’s list of paired devices and cannot be
unpaired manually.
and convenience features (e.g., the car can automatically
call for help if it detects a crash). However, long-range
communications channels also offer an obvious target
for potential attackers, which we explore here. In this
section, we describe how these channels operate, how
they were reverse engineered and demonstrate that
a combination of software ﬂaws conspire to allow a
completely remote compromise via the cellular voice
channel. We focus on adversarial actions that leverage
the existing cellular infrastructure, not ones that involve
the use of adversarially-controlled infrastructure; e.g., we
do not consider man-in-the-middle attacks.
Telematics connectivity. For wide-area connectivity,
our telematics unit is equipped with a cell phone interface
(supporting voice, SMS and 3G data). While the unit
uses its 3G data channel for a variety of Internet-based
functions (e.g., navigation and location-based services),
it relies on the voice channel for critical telematics
functions (e.g., crash notiﬁcation) because this medium
can provide connectivity over the widest possible service
area (i.e.,
including areas where 3G service is not
yet available). To synthesize a digital channel in this
environment, the manufacturer uses Airbiquity’s aqLink
software modem to covert between analog waveforms and
digital bits. This use of the voice channel in general, and
the aqLink software in particular, is common to virtually
all popular North American telematics offerings today.
In our vehicle, Airbiquity’s software is used to create a
reliable data connection between the car’s telematics unit
and a remote Telematics Call Center (TCC) operated by
the manufacturer. In particular, the telematics unit incor-
porates the aqLink code in its Gateway program which
controls both voice and data cellular communication.
Since a single cellular channel is used for both voice and
data, a simple, in-band, tone-based signaling protocol is
used to switch the call into data mode. The in-cabin audio
is muted when data is transmitted, although a tell-tale
light and audio announcement is used to indicate that a
call is in progress. For pure data calls (e.g., telemetry and
remote diagnostics), the unit employs a so-called “stealth”
mode which does not provide any indication that a call
is in progress.
Reverse engineering the aqLink protocol. Reverse
engineering the aqLink protocol was among the most
demanding parts of our effort, in particular because it
demanded signal processing skills not part of the typical
reverse engineering repertoire. For pedagogical reasons,
we brieﬂy highlight the process of our investigation.
We ﬁrst identiﬁed an in-band tone used to initiate “data
mode.” Having switched to data mode, aqLink provides
a proprietary modulation scheme for encoding bits. By
calling our car’s telematics unit (the phone number is
available via caller ID), initiating data mode with a tone
generator and recording the audio signal that resulted,
we established that the center frequency was roughly
700 Hz and that the signal was consistent with a 400 bps
frequency-shift keying (FSK) signal.
We then used LD_PRELOAD on the telematics unit
to interpose on the raw audio samples as they left the
software modem. Using this improved signal source, we
hunted for known values contained in the signal (e.g.,
unique identiﬁers stamped on the unit). We did so by en-
coding these values as binary waveforms at hypothesized
bitrates and cross-correlating them to the demodulated sig-
nal until we were able to establish the correct parameters
for demodulating digital bits from the raw analog signal.
From individual bits, we then focused on packet
structure. We were lucky to discover a debugging ﬂag in
the telematics software that would produce a binary log
of all packet payloads transmitted or received, providing
ground truth. Comparing this with the bitstream data,
we discovered the details of the framing protocol (e.g.,