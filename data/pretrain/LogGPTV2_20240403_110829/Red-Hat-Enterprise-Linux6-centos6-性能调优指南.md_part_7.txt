传输（或称 HT）互联，而 Intel 使用名为快速路径（或称 QPI）的互联。根据其物理连接到其他互联、内存
或者外设的情况该互联有所不同，但实际上他们就是可允许从另一台连接的设备对一个连接的设备进行透明
访问的开关。在这种情况下，透明指的是使用该互联没有特别的编程 API 要求，而不是“零成本”选项。
因为系统架构千变万化，因此具体指定由于访问非本地内存所致性能代偿是不切实节的。我们可以说每个跨
互联的中继段多少会产生一些相对恒定的性能代偿，因此参考距当前 CPU 两个互联的内存位置时至少会产
生 2N + 内存周期时间单位访问时间，其中 N 是每个中继段的代偿。
有这个性能代偿后，对性能敏感的程序应避免常规访问 NUMA 拓扑系统中的远程内存。应将程序设定为使用
特定的节点，并从那个节点为其分配内存。
要做到这一点，需要了解程序的一些情况：
1. 系统使用什么拓扑？
2. 该程序目前在哪里执行？
3. 最近的内存条在哪里？
4.1.2. 调调节节 CPU 性性能能
阅读本小节了解如何调整出更好的 CPU 性能，本小节中还介绍了几个用于此目的的工具。
NUMA 最初是用于将单一处理器连接到多个内存条中。因为 CPU 制造商改进了其工艺并缩小了芯片尺寸，
因此可在一个包装中包括多个 CPU 核。这些 CPU 核以集群形式寻租以便每个核都有相同的访问本地内存条
的时间，同时可在核之间共享缓存。但每个核、内存以及缓存中跨互联的‘中继段’都有一个小的性能代偿。
图 4.1 “NUMA 拓扑中的本地和远程内存访问” 中的示例系统包括两个 NUMA 节点。每个节点有 4 个 CPU，
25
红帽企业版 Linux 6 性能调节指南
一个内存条和一个内存控制器，节点中的任意 CPU 都可以直接访问那个节点中的内存条。根据节点 1 中的
箭头指示执行步骤如下：
1. CPU（0-3）给出到本地内存控制器的内存地址。
2. 内存控制器设置对内存地址的访问。
3. CPU 在那个内存地址执行读取或者写入操作。
图图 4.1. NUMA 拓拓扑扑中中的的本本地地和和远远程程内内存存访访问问
但如果一个节点中的 CPU 需要访问不同 NUMA 节点的内存条中的代码，则它要使用的路径就不那么直接：
1. CPU（0-3）给出到本地内存控制器的远程地址。
a. 会将对那个远程内存地址的 CPU 请求传递给远程内存控制器，到该节点的本地控制器包含那个
内存地址。
2. 远程内存控制器设置对远程内存地址的访问。
3. CPU 在那个远程内存地址执行读取或者写入操作。
每个动作都需要通过多个内存控制器，这样访问在尝试访问远程内存地址时时间会延长两倍以上。因此多核
系统中主要性能考量是保证以最有效的方式进行信息传递，即通过最短最迅速的路径。
要为优化 CPU 性能配置程序，您需要了解：
系统的拓扑（组件是如何连接的），
执行程序的核，以及
26
第 4 章 CPU
最接近的内存条位置。
红帽企业版 Linux 6 附带大量可以帮助您找到这个信息并根据您的发现调整系统的工具。以下小节对概述了
用于 CPU 性能调节有帮助的工具。
4.1.2.1. 使使用用 taskset 设设置置 CPU 亲亲和和性性
taskset 搜索并设定运行进程的 CPU 亲和性（根据进程 ID）。它还可用于启动给定 CPU 亲和性的进程，
这样就可将指定的进程与指定的 CPU 或者一组 CPU 捆绑。但 taskset 不保证本地内存分配。如果您需要
本地内存分配的额外性能利益，我们建议您使用 numactl，而不是 taskset。详情请查看 第 4.1.2.2 节 “使
用 numactl 控制 NUMA 策略”。
CPU 亲和性使用位掩码表示。最低位对应第一个逻辑 CPU，且最高位对应最后一个逻辑 CPU。这些掩码通
常是十六进制，因此 0x00000001 代表处理器 0，0x00000003 代表处理器 3 和 1。
要设定运行进程的 CPU 亲和性，请执行以下命令，使用处理器或者您要捆绑到的处理器掩码替换 mask，使
用您要更改亲和性的进程的进程 ID 替换 pid。
# taskset -p mask pid
要启动给定亲和性的进程，请运行以下命令，使用处理器或者您要捆绑的处理器的掩码替换 mask，使用程
序、选项以及您要运行的程序参数替换 program。
# taskset mask -- program
与其将处理器指定为位码，您还可以使用 -c 选项提供逗号分开的独立处理器，或者一组处理器列表，类似
如下：
# taskset -c 0,5,7-9 -- myprogram
有关 taskset 的详情请参考 man page：man taskset。
4.1.2.2. 使使用用 numactl 控控制制 NUMA 策策略略
numactl 使用指定的调度或者内存放置策略运行进程。所选策略是为那个进程及其所有子进程设
定。numactl 还可以为共享内存片段或者文件设定永久策略，并设定 CPU 亲和性和进程的内存亲和性。它
使用 /sys 文件系统决定系统拓扑。
/sys 文件系统包含有关 CPU、内存和外设是如何通过 NUMA 互联连接的。特别是
/sys/devices/system/cpu 目录中包含有关系统的 CPU 是如何互相连接的信
息。/sys/devices/system/node 目录包含有关系统中 NUMA 节点以及那些节点间相对距离的信息。
在 NUMA 系统中，处理器和内存条之间的距离越大，处理器访问那个内存条的速度就越慢。应将对性能敏感
的程序配置为可以从最接近的内存条分配内存。
还应将对性能敏感的程序配置为执行一组核，特别是在多线程程序的情况下。因为以及缓存一般都很小，如
果在一个核中执行多个线程，每个线程可有可能逐出由之前线程访问的缓冲的数据。当操作系统尝试在这些
线程间执行多任务，且线程继续逐出每个其他的缓存的数据时，则其执行时间的很大比例将用于缓存线替
换。这个问题也称缓存贬值。因此建议您将多线程的程序捆绑到节点而不是单一核，因为这样可以让线程在
多个层级（第一、第二和最后以及缓存）共享缓存线，并尽量减小缓存填充操作的需要。但如果所有线程都
访问同一缓存的数据，则将程序捆绑到单一核可能获得高性能。
numactl 可让您将程序捆绑到特定核或者 NUMA 节点，同时要将内存分配到与那个程序关联的核或者一组
核。numactl 提供的一些有用选项有：
27
红帽企业版 Linux 6 性能调节指南
--show
显示当前进程的 NUMA 策略设置。这个参数不需要进一步的参数，且可按以下方式使
用：numactl --show。
--hardware
显示系统中可用节点清单。
--membind
只从指定节点分配内存。当使用这个参数时，如果这些节点中的内存不足则分配会失败。这个参数
的用法为 numactl --membind=nodes program，其中 nodes 是您要从中分配内存的节点列
表，program 是要从那个节点分配内存的程序。节点号可以采用用逗号分开的列表、范围或者两者
的结合方式提供。有关详情请参考 numactl man page： man numactl
--cpunodebind
只执行属于指定节点的 CPU 中的命令（及其子进程）。这个参数的用法为 numactl --
cpunodebind=nodes program，其中 nodes 是指定程序（program）要捆绑的 CPU 所属节点
列表。节点号可以采用用逗号分开的列表、范围或者两者的结合方式提供。有关详情请参考
numactl man page： man numactl
--physcpubind
只执行指定 CPU 中的命令（及其子进程）。这个参数的用法为 numactl --physcpubind=cpu
program，其中 cpu 是用逗号分开的物理 CPU 号列表，这些数据在 /proc/cpuinfo 的
processor 字段中显示，program 是应只在哪些 CPU 中执行的程序。还要将 CPU 指定为与当前
cpuset 关联。详情请参考 numactl man page：man numactl。
--localalloc
指定永远要在当前节点中分配的内存。
--preferred
在可能的情况下分配到指定节点中的内存。如果内存无法分配到指定的节点，则返回其他节点。这
个选项只能有一个节点号，例如：numactl --preferred=node。详情请参考 numactl man
page：man numactl。
numactl 软件包中包含的 libnuma 程序库为内核支持的 NUMA 策略提供编程界面。这比 numactl 程序可
更详细地调节系统。有关详情请参考 man page：man numa(3)。
4.1.3. numastat
重重要要
之前 numastat 工具是由 Andi Kleen 编写的 Perl 脚本。在红帽企业版 Linux 6.4 中对其进行了重大
修改。
虽然默认命令（numastat，没有任何选项或者参数）可保持与之前版本的严格兼容性，但请注意在
这个命令中使用选项或者参数会极大更改输出结果内容及其格式。
28
第 4 章 CPU
numastat 显示进程以及每个 NUMA 节点中操作系统的内存统计数据（比如分配成功数和失败数）。默认
情况下，numastat 显示每个节点中的以下事件分类所占内存页数。
低 numa_miss 和 numa_foreign 值表示最佳 CPU 性能。
这个更新的 numastat 版本还显示是在系统间分配进程内存，还是使用 numactl 在具体的节点中集中使
用。
numastat 输出结果与每个 CPU top 输出结果对比确定进程线程在分配了内存的同一节点中运行。
默默认认跟跟踪踪分分类类
numa_hit
为这个节点成功的分配尝试数。
numa_miss
由于在目的节点中内存较低而尝试为这个节点分配到另一个节点的数目。每个 numa_miss 事件都
在另一个节点中有对应的 numa_foreign 事件。
numa_foreign
最初要为这个节点但最后分配个另一个节点的分配数。每个 每个 numa_foreign 事件都在另一
个节点中有对应的 numa_miss 事件。
interleave_hit
成功分配给这个节点的尝试交错策略数。
local_node
这个节点中的进程成功在这个节点中分配内存的次数。
other_node
这个节点中的进程成功在另一个节点中分配内存的次数。
提供任意以下选项可将显示内存单位更改为 MB（四舍五入为两位十进制数），并将其他具体 numastat 行
为更改如下。
-c
横向紧凑地显示信息表。这对有大量 NUMA 节点的系统很有用，但栏宽度以及栏间空间有时无法预
测。使用这个选项时，会将内存值四舍五入到最接近的 MB 数。
-m