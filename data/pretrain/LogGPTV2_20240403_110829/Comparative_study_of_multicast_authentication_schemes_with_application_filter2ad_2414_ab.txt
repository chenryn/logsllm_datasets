in all these metrics, the better the MA scheme. The next
section presents our description and analysis of BiBa, TV-
HORS, SCU+ and TSV+.
5. ANALYSIS OF MULTICAST AUTHENTI-
CATION SCHEMES
The MA schemes BiBa, TV-HORS, SCU+ and TSV+ are
analysed in terms of signing cost, veriﬁcation cost, signature
length, and security level.
For the assessment of security levels, the following models
are used: (i) random oracle model [2]: hash function out-
puts are uniformly distributed at random; (ii) Dolev-Yao
model [8]: an attacker can intercept, modify, fabricate mes-
sages. We add the condition that is implicit in the literature
(e.g., in [20]): an attacker cannot completely disrupt clock
synchronization; for example, an attacker can block all mes-
sages to a receiver, but cannot prevent the receiver from
advancing its clock from one epoch to the next.
For the evaluation of computational cost for signing, it is
assumed that a sender caches all non-intermediate one-way
chain elements–for BiBa and TV-HORS, this means all one-
Intermediate keys
way chain elements (“keys” hereafter).
are only applicable to SCU+ and TSV+, and are deﬁned in
Section 5.3 and 5.4 respectively. In practice, a sender would
employ algorithms like Coppersmith and Jakobsson’s [6] to
reduce the number of cached keys at the expense of higher
signing cost, but our assumption is meant to put all schemes
on an equal footing for comparison.
We emphasize that all formulas for Cσ, Cv , Lσ below have
been validated with simulations.
In Algorithms 1 to 4 below, we denote a private key tuple
by (s1, . . . , st), a public key tuple by (v1, . . . , vt), a message
by M , a counter by c, and a state tuple by (S1, . . . , St).
5.1 BiBa
Algorithm 1 shows the BiBa MTS scheme. Our strategy
is to determine S , Cσ, Cv and Lσ in turn.
Algorithm 1: The BiBa MTS scheme
B(n, t, k)
(cid:10)
| n(cid:11)
Ai| =
(cid:6)
(cid:7)(cid:6)
(cid:7)
i=1
n
1
t
k
(cid:2)
= number of elements of a signature tuple
k
Key generation(s1, s2, . . . , st):
Signing(M , s1, s2, . . . , st):
(v1, v2, . . . , vt) ← (PRF(s1, 0), PRF(s2, 0), . . . , PRF(st, 0))
c ← 0
repeat
if ∃I ⊆ {1, . . . , t} s.t. |I| = k, PRF(H (M (cid:5)c), si) is the same
∀i ∈ I then
{i1, i2, . . . , ik} ← I
return (c, si1 , si2 , . . . , sik )
end if
c ← c + 1
end repeat
Veriﬁcation(M , c, σ1, σ2, . . . , σk):
if σi (cid:8)= σj , ∀i (cid:8)= j, 1 ≤ i, j ≤ k and
∃i ∈ {1, . . . , t} s.t. PRF(σj , 0) = vi, ∀j ∈ {1, . . . , k} and
PRF(H (M (cid:5)c), σj ) is the same ∀j ∈ {1, . . . , k} then
return “accept”
else
return “reject”
end if
S and Cσ are related to PS, an essential parameter of
BiBa denoting “the probability that the sender can ﬁnd a
signature in one trial” [20], but this deﬁnition is imprecise.
There are 4 ways by which the sender can ﬁnd a signature:
1. increment c until there is exactly one bin with exactly
k balls;
2. increment c until there is exactly one bin with at least
k balls;
3. increment c until there is at least one bin with exactly
k balls;
4. increment c until there is at least one bin with at least
k balls.
Our validation of [20, Figure 5] suggests BiBa uses the 4th
method above, but [20, Appendix A] indicates the 3rd meth-
od is used instead. To simplify our evaluation, we assume
(cid:2)
the 3rd method is used, i.e., PS
= the probability of ﬁnding
at least one bin with exactly k balls. PS is related to B
(deﬁned in Lemma 1) as
PS = B(n, t, k)/nt,
(1)
where n is the cardinality of the range of PRF. Consistent
with our deﬁnition of PS, the original security analysis of
BiBa remains valid [20, p. 31], i.e.,
S = log2
.
(2)
(cid:2)
rk
k
(cid:3)
nrk−1
(n − 1)rk−k
Lemma 1. The number of ways to distribute t balls in n
bins with at least one bin having exactly k balls is
(cid:7)
(n − i)t−ik
(cid:6)
n
i
i−1(cid:8)
(cid:7)(cid:9)
(cid:6)
t − jk
j=0
k
.
(cid:5)
(cid:3)t/k(cid:4)(cid:4)
i=1
(cid:2)
=
(−1)i−1
Proof. Let Ai be the event that bin i has exactly k balls.
n
i=1 Ai is the event that at least one bin has exactly k balls.
Using the inclusion-exclusion principle, we have
n(cid:4)
i=1
|Ai| −
(n − 1)t−k −
(cid:4)
|Ai ∩ Aj| + ··· =
(cid:6)
(cid:7)(cid:6)
(cid:7)
t − k
k
(cid:7)(cid:6)
n
2
t
k
i,j
(n − 2)t−2k + ···
290There are at most (cid:10)t/k(cid:11) bins with exactly k balls, so there
are only (cid:10)t/k(cid:11) terms in the expression above.
To compute Cσ and Cv , we replace all
invocations of
PRF(K, M ) with H (K(cid:9)M ), which is valid provided H can
be modelled as a random oracle [2]. Using (1), and [20, Table
2],
Note that cmax ≥ 1 ⇐⇒  ≤ PS. If we want to use a short
string to represent cmax, then we should keep  low, e.g.,
10
−4, and make sure PS ≥ . With this consideration,
Lσ = (cid:16)log2(cmax + 1)(cid:17) + k lH
(cid:18)
(cid:16)
(cid:17)(cid:19)
=
log2
log1−PS
+ 2
+ k lH .
(5)

PS
Cσ = (1 + t)nt/B(n, t, k).
(3)
5.2 TV-HORS
During signature veriﬁcation, a message is (i) hashed once
together with a counter; (ii) the resultant hash is hashed
with each signature element; and (iii) each signature element
is veriﬁed against the last received signature element on the
same one-way chain. The number of hash operations for
item (iii) is given by Lemma 2. Therefore,
Cv = 1 + k +
k
r[1 − (1 − 1/t)k]
.
(4)
Lemma 2. Denote by r the number of signatures gener-
ated per epoch. In uniform chain traversal, to verify a single
signature element (of k in total), the expected number of hash
operations required is
(cid:2)
1 − (1 − 1/t)k
(cid:3)(cid:13)−1
(cid:12)
r
.
Proof. Without loss of generality, suppose a signature
contains s1,j . The corresponding public key element is one
of s1,0, s1,1, . . . , s1,j−1, with “distances” from s1,j being j, j−
1, . . . ,1 respectively. Let Ad be the event that the distance
is d (d = 1, . . . , j). First, consider A1, which only occurs if
1. s1,j has not been used in any signature in the current
xk, where
epoch yet: this has a probability of
x is the number of signatures that have already been
generated in the current epoch; and
t−1
t
2. s1,j−1 has been used in a signature last epoch: this has
a probability of
So Pr[A1] =
t−1
t
(cid:15)
.
(cid:15)
(cid:3)
rk
(cid:3)
rk
t−1
t
(cid:15)
rk
(cid:2)
(cid:14)
xk
(cid:3)
t−1
t
t−1
t
t−1
t
(cid:3)
1 −(cid:2)
(cid:14)
(cid:2)
1 −(cid:2)
(cid:14)
(cid:3)[x+(d−1)r]k
1 −(cid:2)
j(cid:4)
(cid:17)(x−r)k
(cid:17)
(cid:5)
Pr[Ad] =
distance (conditioned on x) can be computed as
E[d|x] = lim
(cid:16)
j→∞
d Pr[Ad]
(cid:16)
(cid:16)
(cid:9)
d=1
j(cid:4)
1 −
rk
t − 1
t
lim
j→∞
d
d=1
t − 1
t
=
. Similarly, we have
. Now, the expected
(cid:17)
drk
.
t − 1
t
Substituting q
expression above, we have
(cid:2)
= t−1
t and summing the inﬁnite series in the
(cid:2)
(cid:3)
and ﬁnally
E[d|x] = q
(x−r)k(1 − qrk)
r−1(cid:4)
E[d|x = x
(cid:7)
E[d] =
x(cid:2)=0
qrk
(1 − qrk)2 =
qxk
1 − qrk ,
] Pr[x = x
(cid:7)
] =
1
r(1 − qk)
.
A BiBa signature consists of a counter and k signature
elements. Let the maximum value of a counter be cmax,
(cid:2)
=(1− PS)cmax−1PS.
then cmax happens at a probability of 
Algorithm 2 shows the HORS/TV-HORS MTS scheme.
Our strategy is to determine Cσ, Lσ, Cv and S in turn.
Algorithm 2: The HORS/TV-HORS MTS scheme
(cid:2)
= intended number of elements of a signature tuple
k
Key generation(s1, s2, . . . , st):
Signing(M , s1, s2, . . . , st):
(v1, v2, . . . , vt) ← (H (s1), H (s2), . . . , H (st))
(i1, i2, . . . , ik) ← Splitk(H (M ))
Σ ← (si1 , si2 , . . . , sik ) with redundant elements removed
return Σ
Veriﬁcation(M , Σ):
(i1, i2, . . . , ik) ← Splitk(H (M ))
if ∃σ ∈ Σ s.t. H (σ) = vi, ∀i ∈ {i1, i2, . . . , ik} then
return “accept”
else
return “reject”
end if
TV-HORS’ signing cost is the same as HORS’, i.e.,
Cσ = 1.
Unlike BiBa, a HORS/TV-HORS signature may not al-
ways contain k distinct signature elements, because the sign-
ing function may produce redundant elements. According to
Lemma 3,
(cid:6)
(cid:7)(cid:20)
(cid:21)
Lσ =
lH
tk
ii!
t
i
k
i
.
(6)
k(cid:4)
i=1
(cid:22)
Lemma 3. The expected number of occupied bins if k balls
,
are randomly thrown into t empty bins is 1
tk
where
denotes a Stirling number of the second kind.
k
i=1 ii!
k
i
t
i
(cid:24)
(cid:23)·
·
Proof. Let Ai be the event that i bins are occupied.
(cid:2)
(cid:3)(cid:23)
ways to choose i from t empty bins, and
There are
ways to divide k balls into i bins. Furthermore, there are
i! ways to arrange the i chosen bins. Therefore, Pr[Ai] =
k
t
i=1 i Pr[Ai] gives us the expectation we need.
i
i!/tk.
(cid:24)
k
i
(cid:2)
t
i
(cid:3)
(cid:22)
(cid:2)
(cid:3)(cid:23)
(cid:23)
(cid:24)
(cid:24)
k
i
Nevertheless, as t/k → ∞, Lσ → k. Therefore to com-
pute Cv , we can re-use Lemma 2, i.e.,
Cv = 1 +
k
r[1 − (1 − 1/t)k]
.
(7)
For estimating S , suppose M att is the message whose
signature is to be forged. Let Ai denote the event that the
attacker has captured i signature elements from r signatures;
and Bj denote the event that H (M att) requires j signature
elements. The expected probability of forgery is
k(cid:4)
rk(cid:4)
(cid:16)
(cid:17)
j
i
t
j=1
i=1
Pr[Ai] Pr[Bj ],
291where Pr[Ai] and Pr[Bj ] are given by Lemma 3. Therefore,
S = (rk + k) log2 t
− log2
rk(cid:4)
k(cid:4)
i=1
j=1
(cid:2)
(cid:3)(cid:2)
(cid:3)(cid:23)
(cid:24)(cid:23)
(cid:24)
ij i!j!
t
i
rk
i
k
j
t
j
tj
(8)
.
When t = 1024, (8) requires k ≥ 14 for at least 80 bits of
security; whereas the widely used approximation [23] S =
k log2 t − k log2(rk) requires k ≥ 13.
5.3 SCU+