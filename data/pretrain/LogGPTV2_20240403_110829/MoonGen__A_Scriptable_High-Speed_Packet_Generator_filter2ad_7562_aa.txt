title:MoonGen: A Scriptable High-Speed Packet Generator
author:Paul Emmerich and
Sebastian Gallenm&quot;uller and
Daniel Raumer and
Florian Wohlfart and
Georg Carle
MoonGen: A Scriptable High-Speed Packet Generator
Paul Emmerich, Sebastian Gallenmüller, Daniel Raumer, Florian Wohlfart, and Georg Carle
Technische Universität München
Department of Computer Science
Chair for Network Architectures and Services
{emmericp|gallenmu|raumer|wohlfart|carle}@net.in.tum.de
ABSTRACT
We present MoonGen, a ﬂexible high-speed packet genera-
tor. It can saturate 10 GbE links with minimum-sized pack-
ets while using only a single CPU core by running on top
of the packet processing framework DPDK. Linear multi-
core scaling allows for even higher rates: We have tested
MoonGen with up to 178.5 Mpps at 120 Gbit/s. Moving
the whole packet generation logic into user-controlled Lua
scripts allows us to achieve the highest possible ﬂexibil-
ity. In addition, we utilize hardware features of commodity
NICs that have not been used for packet generators previ-
ously. A key feature is the measurement of latency with
sub-microsecond precision and accuracy by using hardware
timestamping capabilities of modern commodity NICs. We
address timing issues with software-based packet generators
and apply methods to mitigate them with both hardware
support and with a novel method to control the inter-packet
gap in software. Features that were previously only pos-
sible with hardware-based solutions are now provided by
MoonGen on commodity hardware. MoonGen is available
as free software under the MIT license in our git repository
at https://github.com/emmericp/MoonGen.
Categories and Subject Descriptors
C.4 [Performance of Systems]: Measurement techniques
Keywords
Packet generation; User space networking; Lua; DPDK
1.
INTRODUCTION
Tools for traﬃc generation are essential to quantitative
evaluations of network performance. Hardware-based so-
lutions for packet generation are expensive and in many
cases inﬂexible. Existing software solutions often lack per-
formance or ﬂexibility and come with precision problems [2].
The state of the art in packet generation, discussed fur-
ther in Section 2, motivated us to design MoonGen. Our
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
IMC’15, October 28–30, 2015, Tokyo, Japan.
c(cid:13) 2015 ACM. ISBN 978-1-4503-3848-6/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/2815675.2815692.
novel software packet generator is ﬂexible, fast, and precise
without relying on special-purpose hardware. Moving the
packet generation logic into user-controlled Lua scripts en-
sures ﬂexibility. We build on the JIT compiler LuaJIT [20]
and the packet processing framework DPDK [14]. Our ar-
chitecture and its implementation are described in detail in
Section 3. This combination allows us to send 14.88 Mpps,
line rate at 10 GbE with minimum-sized packets, from a sin-
gle CPU core while executing script code for each packet.
Explicit support for multi-core architectures allows us to
load multiple 10 GbE interfaces simultaneously: We have
tested MoonGen with 178.5 Mpps, line rate at 120 Gbit/s
using twelve 2 GHz CPU cores.
MoonGen is controlled through its API instead of con-
ﬁguration ﬁles. We explain the interface in Section 4 by
presenting code examples for typical use cases. The API al-
lows for applications beyond packet generation as it makes
DPDK packet processing facilities available to Lua scripts.
Section 5 evaluates the performance of our approach. We
show that running Lua code for each packet is feasible and
can even be faster than an implementation written in C.
Our packet generator can also receive packets and measure
round-trip latencies with sub-microsecond precision and ac-
curacy. We achieve this by using hardware features of Intel
commodity NICs that are intended for clock synchronization
across networks. Section 6 features a detailed evaluation.
Section 7 investigates diﬀerent methods for rate limiting
on NICs. It focuses on established methods for traﬃc rate
limiting by controlling the inter-departure times of pack-
ets based on either software mechanisms or explicit hard-
ware features on modern NICs. Aiming for a more generic
and more powerful approach to traﬃc limiting, Section 8
proposes a new mechanism introduced by MoonGen. This
solution allows generating complex traﬃc patterns without
additional hardware support.
MoonGen is available as free software under the MIT li-
cense [5]. Section 9 describes how to use the published code
to reproduce all experiments in this paper.
2. STATE OF THE ART
Packet generators face a tradeoﬀ between complexity and
performance. This is reﬂected in the available packet gener-
ators: Barebone high-speed packet generators with limited
capabilities on the one hand and feature-rich packet gen-
erators that do not scale to high data rates on the other
hand. While high-speed packet generators often only send
out pre-crafted Ethernet frames (e.g., pcap ﬁles), more ad-
vanced packet generators are able to transmit complex load
275patterns by implementing and responding to higher-layer
protocols (e.g., web server load tester). Consequently, there
is a lack of fast and ﬂexible packet generators. Besides mere
traﬃc generation, many packet generators also oﬀer the pos-
sibility to capture incoming traﬃc and relate the generated
to the received traﬃc.
The traditional approach to measure the performance of
network devices uses hardware solutions to achieve high
packet rates and high accuracy [2]. Especially their abil-
ity to accurately control the sending rate and precise time-
stamping are important in these scenarios. Common hard-
ware packet generators manufactured by IXIA, Spirent, or
XENA are tailored to special use cases such as performing
RFC 2544 compliant device tests [3]. They send predeﬁned
traces of higher-layer protocols, but avoid complex hardware
implementations of protocols. Therefore, these hardware ap-
pliances are on the fast-but-simple end of the spectrum of
packet generators. They are focused on well-deﬁned and
reproducible performance tests for comparison of network-
ing devices via synthetic traﬃc. However, the high costs
severely limit their usage [2].
NetFPGA is an open source FPGA-based NIC that can
be used as a packet generator [17]. Although costs are still
beyond commodity hardware costs, it is used more often
in academic publications. For example, in 2009, Coving-
ton et al. [4] described an open-source traﬃc generator based
on NetFPGA with highly accurate inter-packet delays. The
OFLOPS framework by Rotsos et al. [24] is able to measure
latencies with nanosecond accuracy via a NetFPGA.
Software packet generators running on commodity hard-
ware are widespread for diﬀerent use cases. Especially traﬃc
generators that emulate realistic traﬃc, e.g., Harpoon [26],
suﬀer from poor performance on modern 10 GbE links. We
focus on high-speed traﬃc generators that are able to satu-
rate 10 GbE links with minimum-sized packets, i.e., achieve
a rate of 14.88 Mpps. Bonelli et al. [1] implement a software
traﬃc generator, which is able to send 12 Mpps by using
multiple CPU cores. Software packet generators often rely
on frameworks for eﬃcient packet transmission [18, 23, 14]
to increase the performance further to the line rate limit.
Less complex packet generators can be found as example
applications for high-speed packet IO frameworks: zsend
for PF RING ZC [18] and pktgen for netmap [23]. Wind
River Systems provides Pktgen-DPDK [27] for DPDK [14].
Pktgen-DPDK features a Lua scripting API that can be
used to control the parameters of the generator, but the
scripts cannot modify the packets themselves. Further, ex-
isting tools for packet generation like Ostinato have been
ported to DPDK to improve their performance [19]. Previ-
ous studies showed that software solutions are not able to
precisely control the inter-packet delays [2, 4]. This leads to
micro-bursts and jitter, a fact that impacts the reproducibil-
ity and validity of tests that rely on a precise deﬁnition of
the generated traﬃc.
Ostinato is the most ﬂexible software packet solution of
the investigated options as it features conﬁguration through
Python scripts while using DPDK for high-speed packet IO.
However, its scripting API is limited to the conﬁguration of
predeﬁned settings, the scripts cannot be executed for each
packet. Precise timestamping and rate control are also not
supported. [19]
One has to make a choice between ﬂexibility (software
packet generators) and precision (hardware packet genera-
tors) with the available options. Today diﬀerent measure-
ment setups therefore require diﬀerent packet generators.
For example, precise latency measurements currently require
hardware solutions. Complex packet generation (e.g., test-
ing advanced features of network middleboxes like ﬁrewalls)
requires ﬂexible software solutions. We present a hybrid so-
lution with the goal to be usable in all scenarios.
3.
IMPLEMENTATION
We identiﬁed the following requirements based on our goal
to close the gap between software and hardware solutions by
combining the advantages of both. MoonGen must...
(R1) ...be implemented in software and run on commodity
hardware.
(R2) ...be able to saturate multiple 10 GbE links with mini-
mum-sized packets.
(R3) ...be as ﬂexible as possible.
(R4) ...oﬀer precise and accurate timestamping and rate
control.
The following building blocks were chosen based on these
requirements.
3.1 Packet Processing with DPDK
Network stacks of operating systems come with a high
overhead [23]. We found the performance too low to fulﬁll
requirement (R2). Packet IO frameworks like DPDK [14],
PF RING ZC [18], and netmap [23] circumvent the network
stack and provide user space applications exclusive direct
access to the DMA buﬀers to speed up packet processing. All
of them have been used to implement packet generators that
fulﬁll requirement (R2) [18, 23, 27]. We have investigated
the performance of these frameworks in previous work [6]
and found that DPDK and PF RING ZC are slightly faster
than netmap.
We chose DPDK for MoonGen as it supports a wide range
of NICs by multiple vendors (Intel, Emulex, Mellanox, and
Cisco), is well-documented, fast, and available under the
BSD license [14]. PF RING ZC was not considered further
as some parts of this framework, which are needed for high-
speed operation, require purchasing a license.
In netmap,
user space applications do not have access to the NIC’s reg-
isters. This is a safety precaution as a misconﬁgured NIC
can crash the whole system by corrupting memory [23]. This
restriction in netmap is critical as it is designed to be part of
an operating system: netmap is already in the FreeBSD ker-
nel [22]. However, MoonGen needs to access NIC registers
directly to implement requirement (R4).
3.2 Scripting with LuaJIT
MoonGen must be as ﬂexible as possible (R3). Therefore,
we move the whole packet generation logic into user-deﬁned
scripts as this ensures the maximum possible ﬂexibility. Lua-
JIT was selected because related work shows that it is suit-
able for high-speed packet processing tasks [7] at high packet
rates (R2). Its fast and simple foreign function interface al-
lows for an easy integration of C libraries like DPDK [20].
LuaJIT may introduce unpredictable pause times due to
garbage collection and compilation of code during run time.
276This can lead to exhausted receive queues or starving trans-
mission queues. Pause times introduced by the JIT com-
piler are in the range of “a couple of microseconds” [21].
The garbage collector (GC) works in incremental steps, the
pause times depend on the usage. All packet buﬀers are
handled by DPDK and are invisible to the GC. A typical
transmit loop does not allocate new objects in Lua, so the
GC can even be disabled for most experiments.
Pause times are handled by the NIC buﬀers: The currently
supported NICs feature buﬀer sizes in the order of hundreds
of kilobytes [11, 12, 13]. For example, the smallest buﬀer
on the X540 chip is the 160 kB transmit buﬀer, which can
store 128 µs of data at 10 GbE. This eﬀectively conceals short
pause times. These buﬀer sizes were suﬃcient for all of our
test cases.
3.3 Hardware Architecture
Understanding how the underlying hardware works is im-
portant for the design of a high-speed packet generator. The
typical operating system socket API hides important aspects
of networking hardware that are crucial for the design of
low-level packet processing tools.
A central feature of modern commodity NICs is support
for multi-core CPUs. Each NIC supported by DPDK fea-
tures multiple receive and transmit queues per network in-
terface. This is not visible from the socket API of the op-
erating system as it is handled by the driver [10]. For ex-
ample, both the X540 and 82599 10 GbE NICs support 128
receive and transmit queues. Such a queue is essentially a
virtual interface and they can be used independently from
each other. [12, 13]
Multiple transmit queues allow for perfect multi-core scal-
ing of packet generation. Each conﬁgured queue can be as-
signed to a single CPU core in a multi-core packet genera-
tor. Receive queues are also statically assigned to threads
and the incoming traﬃc is distributed via conﬁgurable ﬁlters
(e.g., Intel Flow Director) or hashing on protocol headers
(e.g., Receive Side Scaling). [12, 13] Commodity NICs also
often support timestamping and rate control in hardware.
This allows us to fulﬁll (R1) without violating (R4).
MoonGen does not run on arbitrary commodity hard-
ware, we are restricted to hardware that is supported by
DPDK [14] and that oﬀers support for these features. We
currently support hardware features on Intel 82599, X540,
and 82580 chips. Other NICs that are supported by DPDK
but not yet explicitly by MoonGen can also be used, but
without hardware timestamping and rate control.
3.4 Software Architecture
MoonGen’s core is a Lua wrapper for DPDK that provides
utility functions required by a packet generator. The Moon-
Gen API comes with functions that conﬁgure the underly-
ing hardware features like timestamping and rate control.
About 80% of the current code base is written in Lua, the
remainder in C and C++. Although our current focus is on
packet generation, MoonGen can also be used for arbitrary
packet processing tasks.
Figure 1 shows the architecture of MoonGen. It runs a
user-provided script, the userscript, on start-up. This script
contains the main loop and the packet generation logic.
The userscript will be executed in the master task initially
by calling the master function provided by the script. This
master function must initialize the used NICs, i.e., conﬁg-
t
p
i
r
c
s
r
e
s
U
n
e
G
n
o
o
M
W
H
Lua VM
Lua VM
Lua VM
Userscript
Userscript
Userscript
master
spawn
Userscript
slave
Conﬁg API
Data API
MoonGen Core
Conﬁg API
Data API
DPDK
Q0 ... Qn
NIC
NIC
Port
Port
Figure 1: MoonGen’s architecture
ure the number of hardware queues, buﬀer sizes and ﬁlters
for received traﬃc. It can then spawn new instances of it-
self running in slave tasks and pass arguments to them. A
slave task runs a speciﬁed slave function. It usually receives
a hardware queue as an argument and then transmits or
receives packets via this queue. Starting a new slave task
spawns a completely new and independent LuaJIT VM that
is pinned to a CPU core. Tasks only share state through
the underlying MoonGen library which oﬀers inter-task com-
munication facilities such as pipes. All functions related to
packet transmission and reception in MoonGen and DPDK
are lock-free to allow for multi-core scaling.
MoonGen comes with example scripts for generating load
with IPv4, IPv6, IPsec, ICMP, UDP, and TCP packets, mea-
suring latencies, measuring inter-arrival times, and generat-
ing diﬀerent inter-departure times like a Poisson process and
bursty traﬃc.
4. SCRIPTING API
Our example scripts in the git repository are designed to
be self-explanatory exhaustive examples for the MoonGen
API [5]. The listings in this section show excerpts from the
quality-of-service-test.lua example script. This script
uses two transmission tasks to generate two types of UDP
ﬂows and measures their throughput and latencies. It can
be used as a starting point for a test setup to benchmark
a forwarding device or middlebox that prioritizes real-time
traﬃc over background traﬃc.
The example code in this section is slightly diﬀerent from
the example code in the repository:
it has been edited for
brevity. Error handling code like validation of command-line
arguments is omitted here. The timestamping task has been
removed as this example focuses on the basic packet gener-
ation and conﬁguration API. Most comments have been re-
moved and some variables renamed. The interested reader
is referred to our repository [5] for the full example code