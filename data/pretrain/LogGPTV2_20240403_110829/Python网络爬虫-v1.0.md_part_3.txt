你为 URL 指定一个默认的用户名和密码。这将在你为特定 realm 提供一个其他组合时得到提供。我们通过给 re
alm 参数指定 None 提供给 add_password 来指示这种情况。
最高层次的 URL 是第一个要求验证的 URL。你传给 .add_password()更深层次的 URLs 将同样合适。说了这
么多废话，下面来用一个例子演示一下上面说到的内容。
我们建一个 urllib2_test12.py 来测试一下 info 的应用：
\# -*- coding: utf-8 -*-
import urllib2
\# 创建一个密码管理者
password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()
\# 添加用户名和密码
top_level_url = "http://example.com/foo/"
\# 如果知道 realm, 我们可以使用他代替 ``None``.
\# password_mgr.add_password(None, top_level_url, username, password)
password_mgr.add_password(None, top_level_url,'why', '1223')
\# 创建了一个新的handler
handler = urllib2.HTTPBasicAuthHandler(password_mgr)
\# 创建 "opener" (OpenerDirector 实例)
opener = urllib2.build_opener(handler)
a_url = 'http://www.baidu.com/'
\# 使用 opener 获取一个URL
opener.open(a_url)
\# 安装 opener.
\# 现在所有调用 urllib2.urlopen 将用我们的 opener.
urllib2.install_opener(opener)
注意：以上的例子我们仅仅提供我们的 HHTPBasicAuthHandler 给 build_opener。默认的 openers 有正常
状况的 handlers：ProxyHandler，UnknownHandler，HTTPHandler，HTTPDefaultErrorHandler，HTT
PRedirectHandler，FTPHandler， FileHandler， HTTPErrorProcessor。 代码中的 top\_level\_url 实际
上可以是完整 URL(包含"http:"，以及主机名及可选的端口号)。
例如： http://example.com/ 。也可以是一个“authority”(即主机名和可选的包含端口号)。
第 4 章 Opener 与 Handler 的介绍和实例应用 | 32
例如：“example.com” or “example.com:8080”。后者包含了端口号。
55
uurrlllliibb22 的的使使用用细细节节与与抓抓站站技技巧巧
第 5 章 urllib2 的使用细节与抓站技巧 | 34
前面说到了 urllib2 的简单入门，下面整理了一部分 urllib2 的使用细节。
第 5 章 urllib2 的使用细节与抓站技巧 | 35
##
Proxy 的设置
urllib2 默认会使用环境变量 http_proxy 来设置 HTTP Proxy。如果想在程序中明确控制 Proxy 而不受环境变
量的影响，可以使用代理。
新建 test14 来实现一个简单的代理 Demo：
import urllib2
enable_proxy = True
proxy_handler = urllib2.ProxyHandler({"http" : 'http://some-proxy.com:8080'})
null_proxy_handler = urllib2.ProxyHandler({})
if enable_proxy:
opener = urllib2.build_opener(proxy_handler)
else:
opener = urllib2.build_opener(null_proxy_handler)
urllib2.install_opener(opener)
这里要注意的一个细节，使用 urllib2.install_opener() 会设置 urllib2 的全局 opener 。 这样后面的使用会很方
便，但不能做更细致的控制，比如想在程序中使用两个不同的 Proxy 设置等。 比较好的做法是不使用 install_op
ener 去更改全局的设置，而只是直接调用 opener 的 open 方法代替全局的 urlopen 方法。
第 5 章 urllib2 的使用细节与抓站技巧 | 36
##
Timeout 设置
在老版 Python 中（Python2.6前），urllib2 的 API 并没有暴露 Timeout 的设置，要设置 Timeout 值，只能更
改 Socket 的全局 Timeout 值。
import urllib2
import socket
socket.setdefaulttimeout(10) # 10 秒钟后超时
urllib2.socket.setdefaulttimeout(10) # 另一种方式
在 Python 2.6 以后，超时可以通过 urllib2.urlopen() 的 timeout 参数直接设置。
import urllib2
response = urllib2.urlopen('http://www.google.com', timeout=10)
第 5 章 urllib2 的使用细节与抓站技巧 | 37
##
在 HTTP Request 中加入特定的 Header
要加入 header，需要使用 Request 对象：
import urllib2
request = urllib2.Request('http://www.baidu.com/')
request.add_header('User-Agent', 'fake-client')
response = urllib2.urlopen(request)
print response.read()
对有些 header 要特别留意，服务器会针对这些 header 做检查
• User-Agent : 有些服务器或 Proxy 会通过该值来判断是否是浏览器发出的请求
• Content-Type : 在使用 REST 接口时，服务器会检查该值，用来确定 HTTP Body 中的内容该怎样解
析。常见的取值有：
• application/xml ： 在 XML RPC，如 RESTful/SOAP 调用时使用
• application/json ： 在 JSON RPC 调用时使用
• application/x-www-form-urlencoded ： 浏览器提交 Web 表单时使用
在使用服务器提供的 RESTful 或 SOAP 服务时， Content-Type 设置错误会导致服务器拒绝服务
第 5 章 urllib2 的使用细节与抓站技巧 | 38
##
Redirect
urllib2 默认情况下会针对 HTTP 3XX 返回码自动进行 redirect 动作，无需人工配置。要检测是否发生了 redire
ct 动作，只要检查一下 Response 的 URL 和 Request 的 URL 是否一致就可以了。
import urllib2
my_url = 'http://www.google.cn'
response = urllib2.urlopen(my_url)
redirected = response.geturl() == my_url
print redirected
my_url = 'http://rrurl.cn/b1UZuP'
response = urllib2.urlopen(my_url)
redirected = response.geturl() == my_url
print redirected
如果不想自动 redirect，除了使用更低层次的 httplib 库之外，还可以自定义HTTPRedirectHandler 类。
import urllib2
class RedirectHandler(urllib2.HTTPRedirectHandler):
def http_error_301(self, req, fp, code, msg, headers):
print "301"
pass
def http_error_302(self, req, fp, code, msg, headers):
print "303"
pass
opener = urllib2.build_opener(RedirectHandler)
opener.open('http://rrurl.cn/b1UZuP')
第 5 章 urllib2 的使用细节与抓站技巧 | 39
##
Cookie
urllib2 对 Cookie 的处理也是自动的。如果需要得到某个 Cookie 项的值，可以这么做：
import urllib2
import cookielib
cookie = cookielib.CookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookie))
response = opener.open('http://www.baidu.com')
for item in cookie:
print 'Name = '+item.name
print 'Value = '+item.value
运行之后就会输出访问百度的 Cookie 值：
第 5 章 urllib2 的使用细节与抓站技巧 | 40
##
使用 HTTP 的 PUT 和 DELETE 方法
urllib2 只支持 HTTP 的 GET 和 POST 方法，如果要使用 HTTP PUT 和 DELETE ，只能使用比较低层的 htt
plib 库。虽然如此，我们还是能通过下面的方式，使 urllib2 能够发出 PUT 或DELETE 的请求：
import urllib2
request = urllib2.Request(uri, data=data)
request.get_method = lambda: 'PUT' # or 'DELETE'
response = urllib2.urlopen(request)
第 5 章 urllib2 的使用细节与抓站技巧 | 41
##
得到 HTTP 的返回码
对于 200 OK 来说，只要使用 urlopen 返回的 response 对象的 getcode() 方法就可以得到 HTTP 的返回
码。但对其它返回码来说，urlopen 会抛出异常。这时候，就要检查异常对象的 code 属性了：
import urllib2
try:
response = urllib2.urlopen('http://bbs.csdn.net/why')
except urllib2.HTTPError, e:
print e.code
第 5 章 urllib2 的使用细节与抓站技巧 | 42
##
Debug Log
使用 urllib2 时，可以通过下面的方法把 debug Log 打开，这样收发包的内容就会在屏幕上打印出来，方便调
试，有时可以省去抓包的工作
import urllib2
httpHandler = urllib2.HTTPHandler(debuglevel=1)
httpsHandler = urllib2.HTTPSHandler(debuglevel=1)
opener = urllib2.build_opener(httpHandler, httpsHandler)
urllib2.install_opener(opener)
response = urllib2.urlopen('http://www.google.com')
这样就可以看到传输的数据包内容了：
第 5 章 urllib2 的使用细节与抓站技巧 | 43
##
表单的处理
登录必要填表，表单怎么填？
首先利用工具截取所要填表的内容。比如我一般用 firefox+httpfox 插件来看看自己到底发送了些什么包。 以 ver
ycd 为例，先找到自己发的 POST 请求，以及 POST 表单项。可以看到 verycd 的话需要填 username，pass
word，continueURI，fk，login_submit这几项，其中fk是随机生成的（其实不太随机，看上去像是把 epoch
时间经过简单的编码生成的），需要从网页获取，也就是说得先访问一次网页，用正则表达式等工具截取返回数
据中的 fk 项。continueURI 顾名思义可以随便写，login_submit是固定的，这从源码可以看出。还有 usernam
e，password 那就很显然了：
# -*- coding: utf-8 -*-
import urllib
import urllib2
postdata=urllib.urlencode({
'username':'汪小光',
'password':'why888',
'continueURI':'http://www.verycd.com/',
'fk':'',
'login_submit':'登录'
})
req = urllib2.Request(
url = 'http://secure.verycd.com/signin',
data = postdata
)
result = urllib2.urlopen(req)
print result.read()
第 5 章 urllib2 的使用细节与抓站技巧 | 44
##
伪装成浏览器访问
某些网站反感爬虫的到访，于是对爬虫一律拒绝请求。这时候我们需要伪装成浏览器，这可以通过修改 http 包中
的 header 来实现。
\#…
headers = {
'User-Agent':'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6'
}
req = urllib2.Request(
url = 'http://secure.verycd.com/signin/*/http://www.verycd.com/',
data = postdata,
headers = headers
)
\#...
第 5 章 urllib2 的使用细节与抓站技巧 | 45
##
对付"反盗链"
某些站点有所谓的反盗链设置，其实说穿了很简单，就是检查你发送请求的 header 里面，referer 站点是不是他
自己，所以我们只需要像把 headers 的 referer 改成该网站即可，以 cnbeta 为例：
\#...
headers = {
'Referer':'http://www.cnbeta.com/articles'
}
\#...
headers 是一个 dict 数据结构，你可以放入任何想要的 header，来做一些伪装。 例如，有些网站喜欢读取 he
ader 中的 X-Forwarded-For 来看看人家的真实 IP，可以直接把 X-Forwarde-For 改了。
66
一一个个简简单单的的百百度度贴贴吧吧的的小小爬爬虫虫
第 6 章 一个简单的百度贴吧的小爬虫 | 47