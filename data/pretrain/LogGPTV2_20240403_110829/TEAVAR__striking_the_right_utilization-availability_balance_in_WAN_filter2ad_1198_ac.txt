“uncertainty” vectors, as described in §3, and (ii) a “loss function”
that provides fairness and avoids starvation across network flows.
The probabilistic failure model. We consider a general failure
model, consisting of a set of failure events Z. A failure event z ∈ Z
represents a single SRG becoming unavailable (the set of SRGs can
be constructed as described in [36, 54], ). Importantly, while failure
events in our formulation are uncorrelated, this does not preclude
modeling multiple links becoming concurrently unavailable in a cor-
related manner. Consider a failure event z representing a technical
failure in a certain link l and another failure event z′ representing
a technical failure in a switch, or, alternatively, a power outage,
which cause multiple links, including l, to become unavailable con-
currently. Even though link l is inactive whether z or z′ is realized,
z and z′ capture failures of different components and represent in-
dependent events. Thus, while there might be an overlap between
the sets of links associated with two different failure events, the
probabilities of the two events should still be independent if these
correspond to different SRGs (e.g., the probability of a technical
malfunction in a specific link and the probability of a failure in a
switch incident to it in the example above).
Each failure event z occurs with probability pz. As described
earlier, the failure probabilities are obtained from historical data
(see §5 for more details on failure estimation techniques, as well
as sensitivity analysis of inaccuracies in these estimations). By
q = (q1, . . . , q|Z |), we denote a network state, where each element
qz is a binary random variable, indicating whether failure event z
occurred (qz = 1) or not. For example, for a network with 15 SRGs,
SIGCOMM ’19, August 19–23, 2019, Beijing, China
Bogle et al.
(cid:0) ˆqzpz +(1− ˆqz)(1−pz)(cid:1). (1)
the possible set of events (Z) is the set of all Boolean vectors with 15
elements, where each element indicates whether the corresponding
SRG has failed or not. For example, ˆq = (0, . . . , 0, 1) captures the
network state in which only SRG_15 has failed. More formally, let
Q be the set of all possible states, and let p ˆq denote the probability
of state ˆq = (ˆq1, . . . ˆq|Z |) ∈ Q. The probability of network state ˆq
can be obtained using the following equation:
p ˆq = P(q1 = ˆq1, . . . , q|Z | = ˆq|Z |) = Πz
where ˆqz ∈ {0, 1} for every z.
The uncertainty vector specifies which tunnels are up. We
define y as a vector of size |R|, where R represents all possible
tunnels across all flows, and each vector element yr is a binary
random variable that captures whether tunnel r is available (yr = 1)
or not (yr = 0). This random variable depends on realizations of
relevant failure events. For example, yr will equal 0 if one of the
links or switches on the tunnel is down. Since each random variable
yr is a function of the random network state q, we often use yr(q),
and y(q) to denote the resulting vector of random variables, though
sometimes q is omitted to simplify exposition.
The control vector specifies how bandwidth is assigned to
tunnels. Recall that the output x in our WAN TE formulation
captures how much bandwidth is allocated to each flow on each of
its tunnels. This is the control vector for our CVaR-minimization.
As in TE schemes, such per-tunnel bandwidth assignment has to
ensure the edge capacities are respected, i.e., satisfy the following
constraint:
(2)
To account for potential failures, we allow the total allocated band-
Σe∈r xr ≤ ce , ∀e ∈ E.
width per user i,
i xr ∈Ri , to exceed its demand di.
The choice of loss function guarantees fairness across flows.
We define the loss function in two steps. First, we define a loss
function for each network flow. Then, we define a network-level
loss as a function of the per-flow loss.
Flow-level loss function. Recall that in our TE formulation, the
optimization objective is to assign the control variables xr (per-
tunnel bandwidth allocations) in a manner that maximizes the
concurrent flow, i.e., maximizes the value δ for which each flow
can send at least a δ-fraction of its demand. To achieve this, loss in
our framework is measured in terms of the fraction of demand not
satisfied (i.e., 1 − δ). Our goal thus translates into generating the
per-tunnel bandwidth assignments that minimize the fraction of
demand not satisfied for a specified level of availability β.
In our formulation, the maximal satisfied demand for flow i is
given by Σr ∈Ri xr yr(q). Thus, the loss for each flow i with respect
, where [z]+ =
to its demand di is captured by
max{z, 0}; note that the [+] operator ensures the loss is not negative
(hence, the optimization will not gain by sending more traffic than
the actual demand). This notion of per-flow loss captures the loss
of assigned bandwidth for a given network state q.
Network-level loss function. To achieve fairness, in terms of avail-
ability, we define the global loss function as the maximum loss
across all flows; i.e.,
1 − Σr∈Ri xr yr(q)
(cid:105) +
(cid:104)
di
L(x, y) = max
i
1 − Σr ∈Ri xr yr
di
.
(3)
(cid:20)
(cid:21) +
Although this loss function is nonlinear, we are able to transform
the optimization problem into a Linear Program (LP). Details can
be found in Appendix A.
Optimization formulation. To formulate the optimization ob-
jective, we introduce the mathematical definitions of V aRβ and
CV aRβ . For a given loss function L, the V aRβ(x) is defined as
Vβ(x) = min{ξ | ψ(x, ξ) ≥ β}, where ψ(x, ξ) = P(q | L(x, y(q)) ≤
ξ), and P(q | L(x, y(q)) ≤ ξ) denotes the cumulative probability
mass of all network states satisfying the condition L(x, y(q)) ≤ ξ.
CV aRβ is simply the mean of the β-tail distribution of L(x, y), or
put formally:
Cβ(x) = 1
1 − β
ΣL(x,y(q))≥Vβ(x)pqL(x, y(q)).
Note that the definition of CV aRβ utilizes the definition of V aRβ .
To minimize CV aRβ , we define the following potential function
Fβ(x, α) = α + 1
1 − β
= α + 1
1 − β
E[[L(x, y) − α]+]
Σqpq[L(x, y(q)) − α]+
.
.
∗
, α
, α
Cβ(x
∗
Vβ(x
∗) = Fβ(x
∗
∗) ≈ α
(4)
The optimization goal is to minimize Fβ(x, α) over X ,R, sub-
ject to (2) – (3). We leverage the following theorem, which states
that by minimizing the potential function, the optimal CV aRβ and
(approximately) also the corresponding V aRβ are obtained.
Theorem 4.1. [51] If (x∗, α∗) minimizes Fβ , then not only does
x∗ minimize the CV aRβ Cβ over X , but also
∗),
(5)
(6)
The beauty of this theorem is that although the definition of
CV aRβ uses the definition of V aRβ , we do not need to work di-
rectly with the V aRβ function Vβ(x) to minimize CV aRβ . This is
significant since, as mentioned above, Vβ(x) is a non-smooth func-
tion which is hard to deal with mathematically. The statement of
the theorem uses the notation ≈ to denote that with high proba-
bility, α∗ is equal to Vβ(x∗). When this is not so, α∗ constitutes an
upper bound on the V aRβ . The actual V aRβ can be easily obtained
from α∗, as discussed in Appendix B.
From loss minimization to bandwidth allocations. The total
bandwidth that flow i is permitted to utilize (across all tunnels in
Ri) is given by bi. Clearly, bi should not exceed flow i’s demand
di to avoid needlessly wasting capacity. However, we do not add
an explicit constraint for this requirement. Instead, we embed it
implicitly in the loss function (3). Once the solution is computed,
each flow i is given two values:
• the total allowed bandwidth, (1 − Vβ(x∗))-fraction of its de-
mand; i.e.,
bi = (1 − Vβ(x
∗)) × di .
(7)
x∗
• a weight assignment {wr }r ∈Ri , where wr =
Proportional assignment does not require global coordination
upon failures and can be easily implemented in the data plane
via (re-)hashing. The proportional assignment rule is not directly
encoded in the CVaR minimization framework, and so traffic re-
assignment might result in congestion, i.e., violating constraint (2).
Σr∈Ri x∗
.
r
r
Striking the Right Utilization-Availability Balance in WANs
SIGCOMM ’19, August 19–23, 2019, Beijing, China
follows: pqc ← pq · pz
1−pz
from Eq. (1).
. This update rule follows immediately
The pruned scenarios are used in the optimization as follows. To
provide an upper bound on the CVaR (equivalently, a lower bound
on the throughput), we collapse all the pruned scenarios into a
single scenario with probability equal to the sum of probabilities of
the pruned scenarios. We then associate a maximal loss of 1 with
that scenario. In Section 5.4, we evaluate the impact of our scenario
pruning algorithm on both run-time and accuracy.
Alternative loss functions. While the focus in this paper is on
max-concurrent flow, our CVaR-optimization framework can in-
corporate other objective functions of interest. For example, we
can have a loss function that corresponds to the objective of maxi-
mizing the total rate (or a weighted sum of user rates): LT (x, y) =
r ∈Ri xr yr]+, where vi > 0 is the priority (or weight)
assigned to user i. Minimizing LT can either replace our origi-
nal loss function or be added as an additional term (e.g., the loss
can be defined as L(x, y) + ϵLT (x, y), where ϵ is a positive con-
stant) and still result in a linear program; we omit the details
for brevity. More generally, defining loss functions of the form
(cid:1), where Fi are convex functions, will

i vi[di −
Lc(x, y) =
lead to convex programs that can be solved numerically. We note
that an additional post-processing step is required for these gener-
alizations to interpret the per-user guarantees from the obtained
solution; see Appendix B for details.
i Fi
r ∈Ri xr yr
(cid:0)
5 EVALUATION
In this section, we present our evaluation results for TeaVaR. We
begin by describing our experimental framework and our evaluation
methodology (§5.1). Our experimental results focus on the following
elements:
(1) Benchmarking TeaVaR’s performance against the state-of-the-
art TE schemes. (§5.2).
probabilities (§5.3).
(2) Examining TeaVaR’s robustness to noisy estimates of failure
(3) Quantifying the effect of scenario pruning on running time and
the quality of the solution (§5.4).
5.1 Experimental Setting
Topologies. We evaluate TeaVaR on four network topologies: B4,
IBM, ATT, and MWAN. The first three topologies (and their traffic
matrices) were obtained from the authors of SMORE [38]. MWAN
is short for Microsoft WAN and is derived from a subset of Azure’s
network topology. See Table 2 for a specification of network sizes.
Topology Name
B4
IBM
ATT
MWAN
#Nodes
12
18
25
≈ 30
#Edges
38
48
112
≈ 75
Table 2: Network topologies used in our evaluations. For
confidentiality reasons we do not report exact numbers for
the MWAN topology.
Figure 5: A diagram of the scenario-space pruning algo-
rithm. The algorithm visits the tree nodes in a depth-first
search order while updating pq at each level. The scenario
cutoff threshold, c, is set by the network operator. In our ex-
periments, we use 10−5 as the cutoff threshold.
Nevertheless, it turns out that this rather simple rule guarantees
such violation occurs with very low probability (upper-bounded by
1 − β). Formally,
Theorem 4.2. Under TeaVaR, each flow i is allocated bandwidth
(1 − Vβ(x∗))di , and link capacities are not exceeded with probability
at least β.
See Appendix C for the proof.
Scenario pruning. As discussed earlier, applying TeaVaR to a
large network is challenging because the number of network states,
which represent combinations of SRG failures, can increase ex-
ponentially with the network size. To deal with this, we devise a
scenario pruning algorithm to efficiently filter out scenarios that oc-
cur with negligible probability. The main idea behind the algorithm
is to use a tree representation of the different scenarios, and traverse
this tree to efficiently identify every scenario q with probability pq,