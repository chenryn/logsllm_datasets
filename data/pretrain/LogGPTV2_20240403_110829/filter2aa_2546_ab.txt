### Page 6 of 26

Files are the fundamental building blocks of the information we use and the way we use it. Specifically, file formats used as documents provide unique opportunities for client-side attacks, intelligence gathering, and exploitation.

#### Intelligence
Documents contain a wide variety of data, including text, images, videos, and other forms of information. This data can be highly valuable, containing sensitive information such as passwords, names, and other specifics that can be leveraged in a client-side attack.

#### Opportunity
Client-side attacks rely on specific opportunities that allow an attacker to compromise a target. Documents serve as both the delivery mechanism and the bait. By crafting a document that the victim is likely to open, the chances of a successful penetration are significantly increased.

#### Exploits
Documents offer multiple avenues for exploitation. These include social engineering, where the content of the document itself is used to manipulate the viewer, and more traditional exploits targeting vulnerabilities in document viewers like Acrobat Reader, Xpdf, and Foxit. File format parsing routines are particularly vulnerable, and new vulnerabilities are being discovered and exploited at a rapid rate.

There is also a distinction between file format infection and exploitation. Infection involves embedding malicious functionality directly into the document, while exploitation targets programming errors in the document viewer. Office and productivity files, such as corporate newsletters, conference announcements, and weather notifications, can be modified to include malicious content and then resent to the victims.

If the target has a relationship with another organization, documents from the second party can be used to target the first, and vice versa. The goal is to get the victim to open the document and exploit the reader. The process of acquiring and modifying these documents can be automated through scripting.

People generally trust documents like PDFs and those from their own organizations. With thorough reconnaissance, an attacker can select topics that are likely to interest the target or that are widely circulated to a large audience.

### Page 7 of 26

#### Why PDFs?
One might ask why clients have so much data in the form of documents. The answer is that documents, with their diverse file formats, provide a large attack surface, target intelligence, and a potential delivery mechanism.

PDFs are particularly advantageous because they support a significant amount of functionality, including JavaScript, code execution, nested PDFs, and dynamic content. According to Google, there are approximately 283,000,000 PDFs available on the internet.

PDFs can be easily infected through a process called incremental update. This can be a tedious process to do manually due to the complexity of the PDF file format. However, tools have been developed to automate this process. One such tool is `adobe_basic_social_engineering.rb`, a Metasploit module written in Ruby. This tool allows attackers to infect existing targeted PDFs with a malicious payload, making them less suspicious compared to newly generated malicious PDFs.

### Chapter 5: Web Spear Phishing

#### 5.1 Work Flow
The infrastructure for web-based spear phishing has several requirements. First, the ability to direct targets to the malicious site, which can be achieved through methods like IFRAMES, cross-site scripting, or other means. Next, the ability to gather information about the target using a web application is essential. A mechanism for socially engineering the target into believing everything they see is expected and acceptable should be considered. Finally, a method for executing code on the target via social engineering, malicious Java applets, or other means is needed. The attacker must also handle incoming shells and automate post-exploitation activities.

The authors have broken down this problem into several modular components:

- **Target Sieve**: A framework for enumerating the target and passing them off to the appropriate exploit.
  - Operating system detection
  - IP detection
  - Browser detection (Firefox, IE, Opera, Safari, etc.)
  - Decision-making based on enumeration results
  - Decloaking for gathering internal or natted network information
  - Cryptographically signed Java applications using "fake" certificates to trick the user
  - Obfuscation for IDS/HIDS evasion

This paper provides code examples for implementing these components into a framework. Several functions have been developed to perform each action (full code available in the appendix):

- `genHeader()`: Generate header, noscript to test JS
- `ipCheck()`: Get target IP and compare to scope
- `javaCheck()`: Verify Java is enabled
- `osDetect()`: Determine the operating system type
- `browserDetect()`: Determine the browser in use
- `jsDecloakIP()`: Get natted/internal IP using JavaScript
- `japdip()`: Get natted/internal IP using Java applet
- `Logger()`: Log captured info to a file

### Page 9 of 26

#### 5.2 Social Engineering and Malicious Java Applets
The authors have developed a proof-of-concept Java applet for downloading and executing Meterpreter. The client views a page that attempts to load the Java applet in the victim’s browser. The victim is presented with a window asking if they would like to run the applet. If the client clicks "run," the applet is loaded, causing the client to download a standalone Meterpreter executable from a specified website and execute it. The Meterpreter then sends a reverse shell over the specified port to the attacker's waiting server. The code for the applet is available in the appendix.

To make the Java applet more convincing, one can cryptographically sign it with self-signed or expired certificates, which many users are accustomed to accepting. An attacker can also set file names to reflect common elements in the target's infrastructure or even penetrate the target's web server to place these tools on a trusted server.

Here are the steps for cryptographically signing a malicious Java applet:

1. **Compile the applet**:
   ```sh
   javac MetaPhish.java
   ```

2. **Generate a class file**:
   ```sh
   jar -cf MetaPhish.jar MetaPhish.class
   ```

3. **Build a keystore and set the passwords/organization name**:
   ```sh
   keytool -genkey -alias signFiles -keystore msfkeystore -storepass msfstorepass -dname "cn=The Targets Org" -keypass msfkeypass
   ```

4. **Sign the files and create a "secured" jar**:
   ```sh
   jarsigner -keystore msfkeystore -storepass msfstorepass -keypass msfkeypass -signedjar sMetaPhish.jar MetaPhish.jar signFiles
   ```

5. **Create the certificate**:
   ```sh
   keytool -export -keystore msfkeystore -storepass msfstorepass -alias signFiles -file MetaPhishLLC.cer
   ```

6. **Import the certificate**:
   ```sh
   keytool -import -alias company -file MetaPhishLLC.cer -keystore msfkeystore -storepass msfstorepass
   ```

Once these steps are completed, you will have the following files:

- `MetaPhish.class` (Compiled Java)
- `MetaPhish.jar` (Compressed class)
- `MetaPhish.java` (Source code)
- `MetaPhishLLC.cer` (Certificate)
- `msfkeystore` (Key store)
- `sMetaPhish.jar` (Signed Jar)
- `windex.html` (Malicious web page)

The signed Java applet can be placed on a web page like this:
```html
<APPLET code="MetaPhish.class" archive="sMetaPhish.jar" width="1" height="1"></APPLET>
```

### Page 10 of 26

#### Example Page
Normally, you wouldn’t display output, but for demonstration purposes, the example page shows all the acquired target data.