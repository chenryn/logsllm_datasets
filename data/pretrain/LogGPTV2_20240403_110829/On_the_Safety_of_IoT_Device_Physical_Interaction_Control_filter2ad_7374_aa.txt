title:On the Safety of IoT Device Physical Interaction Control
author:Wenbo Ding and
Hongxin Hu
On the Safety of IoT Device Physical Interaction Control
Wenbo Ding
Clemson University
PI:EMAIL
Hongxin Hu
Clemson University
PI:EMAIL
applications (a.k.a. appified IoT platforms) to manage devices in
an unattended manner, for example, turning on lights when users
return home, monitoring users’ kids from afar, or locking home
doors while users drive away [38].
ABSTRACT
Emerging Internet of Things (IoT) platforms provide increased func-
tionality to enable human interaction with the physical world in
an autonomous manner. The physical interaction features of IoT
platforms allow IoT devices to make an impact on the physical
environment. However, such features also bring new safety chal-
lenges, where attackers can leverage stealthy physical interactions
to launch attacks against IoT systems. In this paper, we propose
a framework called IoTMon that discovers any possible physical
interactions and generates all potential interaction chains across
applications in the IoT environment. IoTMon also includes an as-
sessment of the safety risk of each discovered inter-app interaction
chain based on its physical influence. To demonstrate the feasibility
of our approach, we provide a proof-of-concept implementation
of IoTMon and present a comprehensive system evaluation on
the Samsung SmartThings platform. We study 185 official Smart-
Things applications and find they can form 162 hidden inter-app
interaction chains through physical surroundings. In particular, our
experiment reveals that 37 interaction chains are highly risky and
could be potentially exploited to impact the safety of the IoT envi-
ronment.
KEYWORDS
Safety; Internet of Things; Physical Interaction Control
ACM Reference Format:
Wenbo Ding and Hongxin Hu. 2018. On the Safety of IoT Device Physical
Interaction Control. In 2018 ACM SIGSAC Conference on Computer and
Communications Security (CCS ’18), October 15–19, 2018, Toronto, ON, Canada.
ACM, New York, NY, USA, 15 pages. https://doi.org/10.1145/3243734.3243865
1 INTRODUCTION
The rapid development of Internet of Things (IoT) technologies
brings true smart homes closer to reality. Nowadays, home automa-
tion has made a significant impact on the world economy, which is
expected to reach $79 billion in 2022 according to the Marketsand-
Markets [3]. Many commercial IoT platforms, such as Samsung’s
SmartThings [37], Apple’s HomeKit [12], Wink [43], and Google
Home [23], are readily available on the market. Other open source
IoT platforms, such as openHAB [32] and IoTivity [26], have also
emerged. Typically, these platforms have a hub controller to man-
age remote IoT devices, such as bulbs, cameras, and locks, and use
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
© 2018 Association for Computing Machinery.
ACM ISBN 978-1-4503-5693-0/18/10...$15.00
https://doi.org/10.1145/3243734.3243865
With the increased deployment of IoT devices, their security and
safety problems have recently attracted significant attention [25, 35].
For example, by exploiting over 600,000 vulnerable IoT devices (us-
ing common factory default usernames and passwords), a large-
scale Distributed Denial of Service (DDoS) attack was launched by
the Mirai malware, which caused a massive Internet outage [5, 42].
By exploiting a firmware flaw and using a malicious mobile applica-
tion, an attacker could conduct a multi-step attack to compromise a
local home network from the Internet [36]. It was also reported that,
by exploiting vulnerabilities in communication protocols, a worm
could exploit flaws in ZigBee [2] to spread among smart bulbs [34].
In addition, researchers have recently found design flaws in Sam-
sung’s SmartThings platform, which allow malicious third-party
applications to compromise the SmartThings platform [18]. Other
researchers have also explored the possibility of utilizing IoT de-
vices’ physical capabilities to conduct attacks and demonstrated
that a compromised smart bulb could sniff sensitive intranet infor-
mation and send it out by flashing the light stealthily [1].
Despite considerable recent research on improving IoT secu-
rity, existing research efforts have mainly focused on addressing
traditional security issues in the IoT environment, such as de-
vice firmware bugs [21, 36], communication protocol vulnerabili-
ties [22, 29, 34], malicious applications [18, 36], and system design
flaws [18, 20, 27, 44]. Distinctive from existing work, our study
reveals a new type of security problem that could happen due to
the specific features of IoT platforms. One such feature is the ability
for IoT devices to interact with their surroundings through physi-
cal interaction capabilities. Although such physical interactions of
IoT devices could bring significant convenience to end users, they
could also be potentially exploited by attackers to jeopardize IoT
environments. The physical interaction capabilities enable devices
to interact with each other through shared physical environments,
such as air, temperature, and humidity. Since IoT applications man-
age IoT devices on most existing platforms, an application that
controls devices to change physical environments may trigger cer-
tain executions of other applications. As a result, if the application is
not aware of all of its possible interactions with other applications,
some unexpected interactions could be exploited and triggered
by attackers. For example, suppose that an attacker has obtained
the access to a heater in an IoT network, which has installed a
temperature-related application [39] that can open windows when
the home temperature is higher than a given threshold. After turn-
ing on the heater for a period, the attacker can trigger the window
opening action and cause a potential problem of break-in.
In this paper, we propose a framework called IoTMon that can
capture all potential physical interactions across applications and
Session 5A: CyberphysicalCCS’18, October 15-19, 2018, Toronto, ON, Canada832enable safe interaction controls on IoT platforms. To address the
problems caused by unexpected physical interactions, IoTMon first
performs an intra-app interaction analysis using static program
analysis to extract necessary application information, including
triggers, devices, and actions, for building intra-app interactions. In
addition to the static analysis of applications, IoTMon also uses Nat-
ural Language Processing (NLP) techniques to analyze application
descriptions to identify physical channels on the IoT platform, and
then connect intra-app interactions through physical and system
channels to generate inter-app interaction chains. After identifying
all interaction chains, IoTMon uses a risk analysis mechanism to
evaluate the risk of identified inter-app interaction chains. Our
evaluation based on 185 official SmartThings applications shows
that 162 hidden interaction chains exist among these applications,
and 37 of them are highly risky and could be potentially exploited.
To the best of our knowledge, IoTMon provides the first solution to
identify and analyze hidden interaction chains among IoT applica-
tions, enabling the safe control of IoT device interactions.
The rest of the paper is organized as follows. Section 2 presents
threat model and problem scope. Section 3 gives a system overview
of IoTMon. Section 4 introduces the details about IoTMon design
and implementation. We describe the evaluation of IoTMon in
Section 5. Related work is discussed in Section 6 and Section 7
concludes our work.
2 THREAT MODEL & PROBLEM SCOPE
Figure 1: an Example of Inter-app Physical Interaction
One significant difference between IoT environments and con-
ventional networks is that IoT devices have functions to interact
with the surrounding physical environment, which makes it possi-
ble that IoT devices can interact with each other through physical
channels even without network communications. However, those
physical interactions cannot be seen directly from individual ap-
plications. As a result, an application, which has an impact on the
physical environment, may unintendedly trigger another applica-
tion to make unexpected reactions. Figure 1 shows an example of
inter-app physical interaction, where a heater control application
turns on a heater at a specific time, and a temperature control appli-
cation [7, 39] opens windows when the temperature is higher than
a pre-defined threshold. In this example, the temperature physical
channel can connect the heater and the temperature sensor to cre-
ate an inter-app interaction chain and lead to an unexpected action
of opening windows.
Threat Model: In this paper, we focus on application-level IoT
attacks on appified IoT platforms. Attackers attempt to misuse phys-
ical channels to trigger unexpected actions that may cause dam-
ages to the physical space. For example, a window opening action
demonstrated in Figure 1 may cause a break-in. Since unexpected
physical interactions exist among IoT applications, an attacker can
launch an attack through either (1) vulnerable applications, which
have design/implementation flaws that can be exploited by remote
attackers or co-located malicious applications to escalate their priv-
ileges and cause security or safety issues, such as an unauthorized
device control; or (2) malicious applications, which contain mali-
cious program logic that can perform hidden behaviors [18]. We
assume IoT devices are trustworthy. Hence, attacks targeting at
manipulating device firmware vulnerabilities are not considered in
this paper. We also assume that IoT platforms are trustworthy and
uncompromised. Thus, we trust the APIs, communications, and
management functions provided by IoT platforms.
Problem Scope: Since our design goal is to discover and ana-
lyze unexpected inter-app interactions on IoT platforms, attacks
without exploiting inter-app interactions are not in our scope. For
example, we do not investigate problems caused by devices or plat-
form vulnerabilities [18]. Attacks targeting protocols flaws [34] and
Denial-of-Service (DoS) behaviors [5] are also out of our scope. In
addition, the problem of sensitive information leakage [1, 18] is
also beyond the scope of this paper.
3 SYSTEM OVERVIEW
Our IoTMon system consists of three major components: i) Appli-
cation Analysis; ii) Interaction Chain Discovery; and iii) Risk Analy-
sis & Mitigation, as shown in Figure 2.
Application Analysis: This module includes two subcompo-
nents, Intra-app Analysis (§4.1) and Physical Channel Identification
(§4.2). The purpose of this module is to capture trigger-action con-
trol dependency of applications and discover physical channels that
can link multiple intra-app interactions to form inter-app interac-
tion chains. The intra-app interactions can be obtained through
static program analysis. The physical channel identification aims
at extracting channel related information from application descrip-
tions, which are typically provided by application developers. These
descriptions contain information about physical channels, such as
temperature, humidity, motion, and illumination, which can be mon-
itored or modified by the applications. In our design, we use NLP
techniques to extract these channel information from application de-
scriptions.
Interaction Chain Discovery (§4.3): This module takes all
inter-app trigger-action interactions and physical channel infor-
mation as input. The outputs are all possible inter-app interaction
chains, which are generated by connecting intra-app interactions
through proper physical channels.
Risk Analysis & Mitigation (§4.4): This module aims at pro-
viding a risk evaluation mechanism for inter-app interaction chains.
First, our system models all interaction behaviors by mapping them
into a high-dimensional space. In this space, we use intra-app in-
teractions derived from official applications or verified third-party
applications as the baseline of benign interactions to estimate risk
levels of discovered inter-app interaction chains. Our risk evalu-
ation mechanism calculates the distances between the inter-app
interaction chains and the baseline to measure risks, where a large
distance represents a high risk level. Based on risk levels of inter-
app interaction chains, our system can then provide guidance to
developers or users on risk mitigation.
Session 5A: CyberphysicalCCS’18, October 15-19, 2018, Toronto, ON, Canada833Figure 2: IoTMon System Overview
4 DESIGN AND IMPLEMENTATION
In this section, we present the detailed design and implementation
of IoTMon. We first introduce our approaches for the intra-app
analysis and the physical channel identification, respectively. Then,
we discuss the procedure of inter-app interaction chain discovery.
Finally, we describe our methods for risk analysis and mitigation.
4.1 Intra-app Analysis
4.1.1 General Policy Model. An IoT application’s policies usually
follow the “If-This-Then-That” (IFTTT) programing paradigm [30,
44]. Based on this observation, we propose a general policy model
for our intra-app analysis. In IFTTT, “This” corresponds to the
trigger capability and condition threshold. “That” represents the
triggered action, such as changing a device’s status. In IoT ap-
plications, we identify three important elements to describe the
trigger-action relationship, and present a general policy model as
shown in Listing 1.
Listing 1: A General Model for IoT Application Policies
1
2
3
We extract the following information from applications and map
them into our general policy model.
(1) Application description: This part is typically located at the
beginning of each application, which is provided by applica-
tion developers.
(2) Trigger condition and associated device: Trigger conditions of
an application are defined in the source code. For example, a
trigger condition can be defined as “whether the temperature
value is larger than a threshold”.
(3) Action and associated device: Triggered actions are also de-
fined in the source code. For example, a triggered action can
be defined to turn a specific device on/off.
Intra-app Interaction Analysis. Our tool analyzes an applica-
4.1.2
tion in three steps. First, an Abstract Syntax Tree (AST) is built for
the application. Second, our tool analyzes the preference section
in the code, where it claims all the capabilities and inputs of the
application. The preference section is designed to let users setup
proper devices and thresholds. Our tool traverses this section on
AST and builds a list of capabilities and inputs. Third, our tool
extracts triggers and actions of the application. Our tool identi-
fies trigger conditions by parsing “subscribe” functions, which are
defined for registering events on the platform to trigger actions.
The actions can be identified by analyzing “installed” and “updated”
functions. By tracing the control flows from subscribe functions
to action functions, our tool extracts intra-app interactions in an
application. We illustrate the detailed process of our static analysis
through several examples in Appendix A.
4.2 Physical Channel Identification
Physical channels in an IoT environment are closely related to
the physical interaction capabilities of IoT devices, e.g., changing
illuminance or increasing temperature. Several recent research
efforts [31, 40] have demonstrated the possibility of extracting
policy flows from application descriptions using NLP techniques.
We observe that it is also possible to discover potential physical
interactions of IoT devices through analyzing descriptions of an
application. In our design, we leverage NLP techniques to identify
physical channels from application descriptions.
We identify physical channels through three steps. First, we use
NLP techniques to extract channel entity keywords from applica-
tion descriptions. Then, we calculate similarities of extracted key-
words by using Word2Vec [11] with a widely used language model
(i.e., Google News Vectors) [40]. Finally, based on the similarities
of entity keywords, we cluster those entity keywords and iden-
tify physical channels based on entity keyword clusters. We next
demonstrate the detailed process of our physical channel identifi-
cation approach using an example application description: “Notify
me when the humidity rises above or falls below the given thresh-
old”, which is from the HumidityAlert application in the Samsung
SmartThings platform.
We first use the Stanford NLP tool [4] to parse this example
description as shown in Figure 3. An application description usually
contains information about its physical functions, e.g., this example
description in Figure 3 indicates that the application is related
to humidity. After identifying entity keywords in an application
Session 5A: CyberphysicalCCS’18, October 15-19, 2018, Toronto, ON, Canada834Table 1: Physical Channels Identified from Official Smart-
Things Applications
Physical
Channel
Temperature
Example
Applications
Keep Me Cozy
Humidity
Smart Humidity
Vent
Illumination
Brighten Dark
Places
Location
Lock It When
I Leave
Motion
Light My Path
Smoke
Smart Home
Monitor
Leakage
Flood Alert
Descriptions
Number of
Keywords
“Changes your thermo-
-stat settings automa-
-tically in response
to a mode change.”
“When the humidity
reaches a specified
level, activate one
or more vent fans.”
“Turn your lights on
when a open/close
sensor opens and
the space is dark.”
“Locks a deadbolt or
lever lock when a
SmartSense Presence
tag or smartphone
leaves a location.”
“Turn your lights
on when motion
is detected.”
“Get a push notifi-
-cation or text message
when water is detected
where it doesn’t belong.”
“Monitor your home
for intrusion, fire,
carbon monoxide, leaks,
and more.”
13
10
7
6
4
4
8
individual intra-app interaction. Algorithm 1 describes the proce-
dure of discovering inter-app interaction chains. Let APtr,ac denote
all trigger-action behavior tuples in applications. Let Cca,ch store
relationships between capabilities and channels, which can be ob-
tained during the process of physical channel identification. Let
Ss store all system channels. Algorithm 1 first reads all intra-app
interactions from APtr,ac as inputs. Then, it compares the channels
used in each interaction to identify whether two intra-app interac-
tions can be connected through the same channel. The outcome of
the algorithm is a 5-element tuple, which contains a chain of inter-
app interactions, i.e., (trigger1, action1, channel, trigger2, action2).
Finally, our algorithm generates all potential inter-app interaction
chains among applications.
4.4 Risk Analysis & Mitigation
In Section 2, we show that attackers can exploit inter-app inter-
action chains to achieve malicious purposes. In order to measure