func findMin(nums []int) int 
package leetcode
Output:0
Input: [4,5,6,7,0,1,2]
Output:1
//解法一二分
Input: [3,4,5,1,2]
low, high := 0, len(nums)-1
开始遍历，动态维护一个最小值即可，时间复杂度O(n)。
分搜索查找，需要查找的两个有序区间。时间复杂度 O(log n)。这一题也可以用暴力解法，从头
数值偏大的放到了数组的前部。求这个数组中最小的元素。
把数组切分后的两部分对调位置，
---
## Page 292
的一部分区间里 
区间里 
&& mid > 0 && nums[mid-1] > nums[mid] && nums[mid]  nums[0] {
if len(nums) == 1 {
return nums[low]
for low  nums[high] { // mid 在数值小
if nums[mid]>nums[low]&& nums[low]>nums[high]{ //mid 在数值大的—部分
if (mid == len(nums)-1 && nums[mid-1] > nums[mid]) Il (mid >1
 high = mid - 1
} else { 
if nums[mid]  >= nums [low] {
mid := low + (high-low)>>1
if nums[low] == nums[mid] {
 low = mid + 1
if nums[high] == nums[mid] { 
return nums[mid]
 return nums[low]
high = mid
low = mid + 1 
return nums[low] 
 high--
1ow++ 
---
## Page 293
注意数组中可能存在重复的元素。
[4,5,6,7,0,1,2])。请找出其中最小的元素。
假设按照升序排序的数组在预先未知的某个点上进行了旋转。（例如，数组[0,1,2,4,5,6,7] 可能变为
题目大意
Note:
Example 2:
Example 1: 
The array may contain duplicates.
Find the minimum element.
(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).
beforehand. 
Suppose an array sorted in ascending order is rotated at some pivot unknown to you 
题目
154. Find Minimum in Rotated Sorted Array ll
● This is a follow up problem to Find Minimum in Rotated Sorted Array.
● Would allow duplicates affect the run-time complexity? How and why?
Output:0
Input: [2,2,2,0,1]
Output: 1 
Input: [1,3,5]
func findmin2(nums []int) int {
//解法三暴力
return min
for -, num := range nums[1:] {
min := nums[o] 
return -1
if min > num {
min = num
---
## Page 294
 Example:
getMin() -- Retrieve the minimum element in the stack.
top() -- Get the top element.
pop() -- Removes the element on top of the stack.
push(x) -- Push element x onto stack.
time.
suo u suawala nwsui aun suaan pue 'don 'dod 'ysnd soddns peun ys e uisaa
题目
155. Min Stack
代码
解题思路
·给出一个原本从小到大排序过的数组，注意数组中有重复的元素。但是在某一个分割点上，把数组
func findMin154(nums []int) int {
package leetcode
索，只不过在相等元素上多增加一个判断即可。时间复杂度 O(log n)。
切分后的两部分对调位置，数值偏大的放到了数组的前部。求这个数组中最小的元素。
return nums[low]
for low  nums[low] {
mid := low + (high-low)>>1
high = mid
else {
low++
low = mid + 1 
 return nums[low] 
---
## Page 295
代码
按照题目要求实现即可。
解题思路
这道题是一个数据结构实现题。要求实现一个栈的类，实现 pushO、pop()、top()、getMin()。
题目大意
func (this *MinStack) Push(x int) { 
// Push define
func Constructor155() Minstack {
// Constructor155 define 
/** initialize your data structure here. */
type Minstack struct {
// minstack define
package leetcode
minStack.getMin();
minstack.top(); 
minstack.pop();
minStack.getMin();
minstack.push(-3):
minstack.push(0);
minstack.push(-2);
MinStack minStack = new Minstack();
 this.elements = append(this.elements, x)
 return Minstack{make([]int, O),make([]int, O)，0}
 elements, min []int
}6
if this.l == 0 { 
this.min = append(this.min, x)
}else { 
if x Returns -2.
--> Returns -3.
-> Returns 0.
---
## Page 296
Example 1: 
begin to intersect at node c1.
Write a program to find the node at which the intersection of two singly linked lists begins.
题目
160. Intersection of Two Linked Lists
B
func （this *MinStack) GetMin(） int {
func （this *MinStack) Top(） int {
func (this *MinStack) Pop() {
 return this.min[this.l-1] 
return this.elements[this.l-1]
this.elements = this.elements[:this.l]
this.min = this.min[:this.l]
this.l--
this.l++
叫
3
3
&
---
## Page 297
 Example 3: 
 Example 2: 
B
B
From the head of B, it reads as [3,2,4]. There are 3 nodes before the 
be 0 if the two lists intersect). From the head of A, it reads as [0,9,1,2,4]
Output: Reference of the node with value = 2
SkipB=1
Input: intersectVa] = 2,listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3,
be 0 if the two lists intersect). From the head of A, it reads as [4,1,8,4,5].
u a a      , t ue x 
Output: Reference of the node with value = 8 
2 , skipB = 3 
Input: intersectval = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 
intersected node in A; There are l node before the intersected node in B.
intersected node in A; There are 3 nodes before the intersected node in B.
5
0
0
9
3
工
8
2
4
4
5
---
## Page 298
代码
否相同。
接到A 后面，把 A 拼接到 B 后面。这样 2 个链表的长度都是A+B。再依次扫描比较 2 个链表的结点是
给定的 2个链表的长度如果一样长，都从头往后扫即可。如果不一样长，需要先"拼成"一样长。把B 拼
这道题的思路其实类似链表找环。
解题思路
找到2 个链表的交叉点。
题目大意
Notes:
package leetcode
 owaw (l)o Kuo asn pue aw (u)o ui unu Kiqeajad pinos apon sno ●
import "fmt"
● If the two linked lists have no intersection at all, return null.
Explanation: The two lists do not intersect, so return null.
be O, while skipA and skipB can be arbitrary values.
B, it reads as [1,5]. since the two lists do not intersect,
Input Explanation: From the head of A, it reads as [2,6,4]. From the head of
Output: nul1
 = 9 ' = 4 "'] =  ''9'] =  '0 =  
You may assume there are no cycles anywhere in the entire linked structure.
 The linked lists must retain their original structure after the function returns.
B
A
2
9
5
intersectval must
4
---
## Page 299
index.
Given an input array nums, where nums [i] = nums [i+1] , find a peak element and return its 
A peak element is an element that is greater than its neighbors.
题目
162. Find Peak Element
another linkedlist 
iteration 
func getIntersectionNode(headA, headB *ListNode) *ListNode 
* Definition for singly-linked list.
for a!= b{
//if a & b have different len, then we will stop the loop after second
return a
b := headB 
if headA == nil ll headB == nil {
/ /boundary check 
 //for the end of first iteration, we just reset the pointer to the head of
type ListNode struct { 
fmt.Printf("a = %v b = %v\n", a, b) 
if b == nil
 return nil 
} else { 
} else{ 
if a == nil
:= headA
 b = headA
 a = headB
b = b.Next
a = a.Next
Next *ListNode
Val int 
---
## Page 300
代码
解题思路
说明：
你可以假设 nums[-1] = nums[n] = -∞∞。
到峰值元素并返回其索引。数组可能包含多个峰值，在这种情况下，返回任何一个峰值所在位置即可。
峰值元素是指其值大于左右相邻值的元素。给定一个输入数组 nums，其中 nums[i] ≠ nums[i+1]，找
题目大意
Your solution should be in logarithmic complexity.
Note:
Example 2: 
Example 1:
You may imagine that nums [-1] = nums [n] = -∞.
fine.
The array may contain multiple peaks, in that case return the index to any one of the peaks is 
·这一题是第 852题的伪加强版，第 852题中只存在一个山峰，这一题存在多个山峰。但是实际上
·给出一个数组，数组里面存在多个"山峰"，(山峰的定义是，
·你的解法应该是 O(logN) 时间复杂度的。
func findPeakElement(nums []int)
//解法一二分
package leetcode
element is 2,
Explanation: Your function can return either index number 1 where the peak
output: 1 or 5
Input: nums = [1,2,1,3,5,6,4] 
number 2.
Explanation: 3 is a peak element and your function should return the index
Output: 2 
Input: nums = [1,2,3,1]
if len(nums) == 0 II len(nums) ==
搜索的代码是一样的，因为此题只要求随便输出一个山峰的下标即可。思路同第 852 题。
都要大)，找到这个"山峰"，并输出其中一个山峰的下标。
return 0
 or index number 5 where the peak element is 6.
 int 
：1
下标比i-1、i+1 位置上的元素
---
## Page 301
sorted form.
Given an unsorted array, find the maximum difference between the successive elements in its 
题目
164. Maximum Gap
= mid + 1 
func findPeakElementl(nums []int) int {
//解法二二分
(mid == 0 && nums[1]  nums[mid+1] {
 mid := low + (high-low)>>1
// 如果 mid 较大，则左侧存在峰值，high = m，如果 mid +1 较大，则右侧存在峰值，low 
mid := low + (high-low)>>l
if mid == high { 
if mid == low {
if mid > 0 && nums[mid-1] > nums[mid] {
if (mid == len(nums)-1 && nums[mid-1]  0 && 
if mid > 0 && nums[mid-1] < nums[mid] {
 high = mid
 high--
else { 
++MOL
low = mid + 1 
 return mid 
low = mid + 1
---
## Page 302
代码
这道题满足要求的做法是基数排序。
虽然使用排序算法可以 AC 这道题。先排序，然后依次计算数组中两两数字之间的间隔，找到最大的一
解题思路
在数组中找到 2个数字之间最大的间隔。要求尽量用 O(1)的时间复杂度和空间复杂度。
题目大意
Note:
Example 2: 
Example 1: 
 Return O if the array contains less than 2 elements.
个间隔输出即可。
//解法一
package leetcode
● Try to solve it in linear time/space.
func maximumGap(nums
Explanation: The array contains less than 2 elements, therefore return 0.
output:0
Input: [10]
Explanation: The sorted form of the array is [1,3,6,9], either
Output:3
Input: [3,6,9,1]
res := 0 
quicksort164(nums, 0, len(nums)-1)
if len(nums）<2{
 signed integer range.
 return o
(3,6) or (6,9) has the maximum difference 3.
[]int） int{
---
## Page 303
func maximumGapl(nums []int) int {
//解法二
func quicksort164(a []int, lo, hi int) 
func partition164(a []int, lo, hi int) int {
aux := make([]int, len(nums))
exp := 1 // 1, 10, 100, 1000 ...