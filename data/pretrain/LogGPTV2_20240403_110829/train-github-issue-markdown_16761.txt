### Description
I wrote my custom download middleware, which makes the request to my
service(it lives on a different domain than a requested domain). After I
receive a response from my service I replace URL in `response.url` and
`response.request.url` to the original URL. But the issue is in `parse`
function the URL in the `response.request` object is the URL from request to
my service.
### Steps to Reproduce
  1. Original URL - http://example.com/some_page
  2. URL of the cache request - http://my_service.com/?url=http://example.com/some_page
  3. I replace the URL in middleware for `request` and `response` from step 2 to step 1
  4. In `parse` function `response.url` is correct but `request.url` is from step 2
**Expected behavior:** request URL will be correct
**Actual behavior:** request URL isn't correct
**Reproduces how often:** each time
### Versions
1.8.0 - 2.1.0
### Additional context
Here is the code of my middleware
    class MyServiceDownloaderMiddleware:
        def process_request(self, request, spider):
            if request.meta.get('__service_search') or request.meta.get('__service_action'):
                return None
            elif request.url.startswith(spider.eligible_url):
                qs = {
                    'url': request.url,
                }
                request.meta['__service_search'] = True
                request.meta['__original_url'] = request.url
                new_request = request.replace(url=f'https://my_service.com/?{urlencode(qs)}')
                return new_request
            return None
        def process_response(self, request, response, spider):
            if request.meta.get('__service_action'):
                request = request.replace(url=request.meta['__original_url'])
                response = response.replace(url=request.meta['__original_url'], request=request)
                return response
            elif request.meta.get('__service_search'):
                b_attribute = response.css('div.b_attr:attr(u)').extract_first()
                if not b_attribute:
                    request = request.replace(url=request.meta['__original_url'])
                    request.meta.pop('__original_url')
                    request.meta.pop('__service_search')
                    response = response.replace(status=404, url=request.meta['__original_url'], request=request)
                    return response
                _, _, d, w = b_attribute.split('|')
                qs = {
                    'q': request.meta['__original_url'],
                    'd': d,
                    'w': w,
                }
                url = f'https://my_service.com/action/?{urlencode(qs)}'
                new_request = request.replace(url=url)
                new_request.meta['__service_action'] = True
                return new_request
            return response