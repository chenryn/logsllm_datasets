        tcand = cand[:]
        if rsi>=1050 and rdi 233:
            rsi -= n_itum[m][0]
            rdi -= n_itum[m][1]
            ncand.pop(-1)
            return
        tcand=cand[:]
        tcand.extend(g[m])
        tcand.sort()
        for k in tcand:
            if (k > m):
                find(k,tcand[:])
        rsi -= n_itum[m][0]
        rdi -= n_itum[m][1]
        ncand.pop(-1)
    find(0, [])
**solution2**
    table = [6274272, 6276416, 6277344, 6274656, 6275584, 6276768, 6276256, 6275424, 6274784, 6277152, 6275008, 6275232, 6276576, 6275968, 6276608, 6275200, 6277120, 6276352, 6276192, 6277312, 6275456, 6274816, 6275744, 6275040, 6276448, 6276960, 6275360, 6275264, 6276032, 6274336, 6276832, 6274592, 6274912, 6277408, 6276320, 6274304, 6276480, 6276864, 6275488, 6274848, 6277216, 6275648, 6276000, 6276640, 6275072, 6275712, 6275680, 6276992, 6275296, 6276096, 6276160, 6274624, 6276896, 6276128, 6276800, 6274944, 6274432, 6276224, 6274368, 6276736, 6275520, 6275616, 6274880, 6277248, 6277184, 6276672, 6275776, 6276064, 6277024, 6275328, 6274688, 6277056, 6274976, 6275904, 6274560, 6274464, 6275104, 6274400, 6276384, 6276544, 6277280, 6275808, 6275392, 6276512, 6275552, 6277088, 6275936, 6277376, 6276704, 6274720, 6274496, 6275136, 6276928, 6275840, 6274752, 6274528, 6277440, 6275168, 6276288, 6275872]
    itum = {6275072: [84, 17, 0, 6275040], 6275328: [12, 7, 0, 6275296], 6277152: [43, 17, 0, 6274656], 6277408: [19, 29, 0, 6277120], 6275584: [2, 18, 0, 6274272], 6275840: [11, 135, 0, 6275808], 6274592: [71, 2, 0, 6277120], 6276096: [36, 11, 0, 6276032], 6274272: [82, 6, 0, 0], 6276352: [30, 34, 0, 6275424], 6274912: [49, 8, 0, 6277120], 6276608: [75, 50, 0, 6275584], 6276864: [65, 22, 0, 6276192], 6275136: [59, 15, 0, 6275104], 6274400: [84, 28, 0, 6274368], 6277120: [6, 2, 0, 6276768], 6275296: [74, 40, 0, 6275264], 6277376: [64, 24, 0, 6274560], 6275552: [99, 5, 0, 6274688], 6275808: [49, 37, 0, 6275776], 6274656: [15, 10, 0, 6274272], 6276064: [29, 22, 0, 6275712], 6276320: [15, 29, 0, 6277120], 6274496: [66, 25, 0, 6274464], 6276576: [47, 34, 0, 6274656], 6274752: [70, 33, 0, 6274720], 6276832: [98, 44, 0, 6275200], 6275200: [54, 41, 0, 6276768], 6275520: [40, 36, 0, 6275488], 6277088: [45, 44, 0, 6277056], 6277344: [53, 40, 0, 6274272], 6275776: [8, 43, 0, 6275072], 6274720: [86, 12, 0, 6274464], 6276032: [54, 8, 0, 6275232], 6276288: [398, 68, 0, 6275840], 6276928: [19, 42, 0, 6274400], 6276544: [99, 37, 0, 6275520], 6276800: [54, 28, 0, 6274912], 6275264: [82, 32, 0, 6275232], 6274848: [14, 27, 0, 6274816], 6277056: [9, 34, 0, 6276128], 6275232: [46, 8, 0, 6274656], 6277312: [79, 11, 0, 6275424], 6275488: [13, 20, 0, 6275456], 6275744: [25, 1, 0, 6274784], 6274784: [1, 36, 0, 6274656], 6276000: [71, 13, 0, 6275744], 6276256: [54, 22, 0, 6276416], 6276512: [93, 46, 0, 6275328], 6274688: [73, 41, 0, 6274624], 6276768: [51, 22, 0, 6276416], 6274304: [61, 50, 0, 6277120], 6274944: [59, 28, 0, 6274912], 6277024: [20, 21, 0, 6276992], 6277280: [97, 8, 0, 6277248], 6275456: [44, 23, 0, 6275424], 6275712: [26, 4, 0, 6275360], 6274336: [71, 48, 0, 6275232], 6275968: [99, 17, 0, 6275584], 6276224: [4, 26, 0, 6274304], 6276480: [100, 5, 0, 6276352], 6276736: [35, 3, 0, 6274304], 6275392: [22, 10, 0, 6275328], 6275040: [82, 48, 0, 6274784], 6276992: [19, 17, 0, 6275264], 6275168: [82, 1, 0, 6275136], 6277248: [85, 34, 0, 6277216], 6275424: [14, 16, 0, 6276416], 6275680: [11, 34, 0, 6275264], 6276960: [16, 3, 0, 6275008], 6275936: [86, 3, 0, 6275904], 6276192: [56, 33, 0, 6275424], 6274368: [16, 25, 0, 6274304], 6276448: [4, 2, 0, 6275008], 6274624: [45, 50, 0, 6274592], 6276704: [91, 11, 0, 6274464], 6274432: [99, 6, 0, 6274304], 6275904: [86, 39, 0, 6274944], 6277216: [72, 28, 0, 6274816], 6275648: [46, 45, 0, 6274816], 6274464: [24, 27, 0, 6274432], 6276160: [79, 32, 0, 6274592], 6276416: [46, 31, 0, 6274272], 6276672: [31, 43, 0, 6276640], 6275008: [86, 6, 0, 6274656], 6274976: [100, 36, 0, 6274944], 6275104: [19, 16, 0, 6274432], 6277184: [18, 4, 0, 6275648], 6275360: [92, 15, 0, 6275008], 6277440: [37, 14, 0, 6275136], 6275616: [35, 19, 0, 6275488], 6275872: [480, 55, 0, 6275840], 6274528: [58, 34, 0, 6274496], 6276128: [7, 17, 0, 6274912], 6276384: [10, 20, 0, 6274368], 6274880: [19, 13, 0, 6274848], 6274560: [24, 41, 0, 6274432], 6276640: [59, 39, 0, 6275744], 6274816: [26, 43, 0, 6274784], 6276896: [81, 21, 0, 6274912]}
    def sort_fun(a):
        return itum[a][1]
    def Travel(source, new_p):
        global rsi, rdi
        if rdi > 233:
            return
        if rsi >= 1050:
            print([table.index(i) for i in new_p])
        ans = []
        for cur in table[table.index(new_p[-1])+1:]:
            if itum[cur][3] in new_p and cur not in new_p:
                ans.append(cur)
        ans.sort(key=sort_fun)
        for i in ans:
            rsi += itum[i][0]
            rdi += itum[i][1]
            Travel(i, new_p + [i])
            rsi -= itum[i][0]
            rdi -= itum[i][1]
    first_node = 6274272
    rsi = itum[first_node][0]
    rdi = itum[first_node][1]
    Travel(first_node, [first_node])
    两种方式均可，最后得到的index如下。
    1050 233
    [0, 1, 3, 5, 10, 11, 16, 25, 26, 28, 31, 32, 35, 52, 56, 59, 76, 91, 97]
###  ROPVM
rop实现的一个vm，初始化数据如下
    11 11 D0 AC C0 14 00 00 76 29 44 00 00 00 00 00
    49 6E 70 75 74 20 46 6C E6 15 40 00 00 00 00 00    Input Flag:                 6CD100
    08 D1 6C 00 00 00 00 00 C6 15 43 00 00 00 00 00
    76 29 44 00 00 00 00 00 61 67 3A 20 00 00 00 00
    E6 15 40 00 00 00 00 00 10 D1 6C 00 00 00 00 00
    C6 15 43 00 00 00 00 00 76 29 44 00 00 00 00 00
    43 6F 6E 67 72 61 74 75 E6 15 40 00 00 00 00 00    Congratulations!            6CD180 
    88 D1 6C 00 00 00 00 00 C6 15 43 00 00 00 00 00
    76 29 44 00 00 00 00 00 6C 61 74 69 6F 6E 73 21
    E6 15 40 00 00 00 00 00 90 D1 6C 00 00 00 00 00
    C6 15 43 00 00 00 00 00 76 29 44 00 00 00 00 00
    00 00 00 00 00 00 00 00 E6 15 40 00 00 00 00 00
    98 D1 6C 00 00 00 00 00 C6 15 43 00 00 00 00 00
    76 29 44 00 00 00 00 00 57 72 6F 6E 67 20 46 6C    Wrong Flag!                 6CD1C0
    E6 15 40 00 00 00 00 00 C8 D1 6C 00 00 00 00 00
    C6 15 43 00 00 00 00 00 76 29 44 00 00 00 00 00
    61 67 21 20 00 00 00 00 E6 15 40 00 00 00 00 00
    D0 D1 6C 00 00 00 00 00 C6 15 43 00 00 00 00 00    cipher ???
    76 29 44 00 00 00 00 00                        BE B2 DA 86 A8 16 6D 14      6CD200
    E6 15 40 00 00 00 00 00 08 D2 6C 00 00 00 00 00
    C6 15 43 00 00 00 00 00 76 29 44 00 00 00 00 00
                                                  52 DB 9E 3C 8F 65 F1 54 
    E6 15 40 00 00 00 00 00
    10 D2 6C 00 00 00 00 00 C6 15 43 00 00 00 00 00
    76 29 44 00 00 00 00 00                        43 26 C1 19 9D 69 33 2A
    E6 15 40 00 00 00 00 00 18 D2 6C 00 00 00 00 00
    C6 15 43 00 00 00 00 00 76 29 44 00 00 00 00 00
                                                  6B 9E CD 00 26 32 CE C1
    E6 15 40 00 00 00 00 00
    20 D2 6C 00 00 00 00 00 C6 15 43 00 00 00 00 00
    76 29 44 00 00 00 00 00 00 00 00 00 00 00 00 00
    E6 15 40 00 00 00 00 00 10 D3 6C 00 00 00 00 00    key:???
    C6 15 43 00 00 00 00 00 76 29 44 00 00 00 00 00    F14gF114gF11114g            6CD310
                                                  46 31 34 67 46 31 31 34
    E6 15 40 00 00 00 00 00
    18 D3 6C 00 00 00 00 00 C6 15 43 00 00 00 00 00
    76 29 44 00 00 00 00 00                        67 46 31 31 31 31 34 67
    E6 15 40 00 00 00 00 00 20 D3 6C 00 00 00 00 00
    C6 15 43 00 00 00 00 00 76 29 44 00 00 00 00 00
                                                  04 00 00 00 00 00 00 00      6CD608
    E6 15 40 00 00 00 00 00
    10 D6 6C 00 00 00 00 00 C6 15 43 00 00 00 00 00
    76 29 44 00 00 00 00 00                        00 D0 6C 00 00 00 00 00  pointer -> str    6CD610 
    E6 15 40 00 00 00 00 00 18 D6 6C 00 00 00 00 00
    C6 15 43 00 00 00 00 00 E6 15 40 00 00 00 00 00
    00 D1 6C 00 00 00 00 00 E0 FB 40 00 00 00 00 00    printf
    E6 15 40 00 00 00 00 00 00 00 00 00 00 00 00 00    sys_read  str，6CD610
  * 调用printf和sys_read，限制输入长度0x20
  * 最后设置两次大循环的结束地址，分别是6CD618，FOA:c68和6CD620，即FOA：e98 。
大循环处理部分注释如下：
    40 85 47 00 00 00 00 00 E6 15 40 00 00 00 00 00        set rax -> str
    F8 FF FF FF FF FF FF FF 33 61 42 00 00 00 00 00
    40 85 47 00 00 00 00 00 E6 15 40 00 00 00 00 00        rax = s[:8] 
    00 D0 6C 00 00 00 00 00 06 0E 47 00 00 00 00 00
    76 29 44 00 00 00 00 00                           rdx = 00 00 00 00 DF 59 37 5F
                                                     5f3759df
    E6 15 40 00 00 00 00 00 08 D3 6C 00 00 00 00 00
    C6 15 43 00 00 00 00 00 76 29 44 00 00 00 00 00        ...._Y7_01234567F14gF114gF11114g
    20 00 00 00 00 00 00 00 E6 15 40 00 00 00 00 00
    08 D6 6C 00 00 00 00 00 C6 15 43 00 00 00 00 00
    E6 15 40 00 00 00 00 00 0C D3 6C 00 00 00 00 00        20 00 00 00 00 00 00 00      6CD600
    20 69 41 00 00 00 00 00 49 48 47 00 00 00 00 00
    04 00 00 00 00 00 00 00                           rcx = 4