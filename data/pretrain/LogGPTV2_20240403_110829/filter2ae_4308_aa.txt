## 什么是Shiro
[Apache Shiro](https://shiro.apache.org/) is a powerful and easy-to-use Java
security framework that performs authentication(身份验证), authorization(授权),
cryptography(加密), and session management(会话管理). With Shiro’s easy-to-understand API, you can quickly and easily secure any application – from the
smallest mobile applications to the largest web and enterprise applications.
## 相关CVE
根据官方网站上的[漏洞通报](https://shiro.apache.org/security-reports.html)，`Shiro`
在历史上共通报了 `11` 个 `CVE`（以及最新披露的CVE），其中包含认证绕过、反序列化等漏洞类型，接下来我们来依次学习。
漏洞编号 | Shiro版本 | 配置 | 漏洞形式  
---|---|---|---  
`CVE-2010-3863` | `shiro  `/xx/..;/toJsonPOJO`  
`CVE-2020-11989`/ `SHIRO-782` | `shiro 
`%25%32%66` `/toJsonList/a%25%32%66a
->/toJsonList/a%2fa`；（小于1.5.3）`/;/shirodemo/alter/test ->
/shirodemo/alter/test` (`Shiro 
/hello/;a`  
`CVE-2020-17510` | `shiro 
/hello/.` (`/%2e`、`/%2e/`、`/%2e%2e`、`/%2e%2e/`都可以）  
`CVE-2020-17523` | `shiro 
/hello/%20`  
`CVE-2021-41303` | `shiro  /admin/page`  
`CVE-2022-32532` | `shiro  /alter/a%0aaa`;`/alter/a%0daa -> /alter/a%0daa`  
## CVE-2010-3863
### 漏洞信息
漏洞编号：[CVE-2010-3863](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-3863) /
[CNVD-2010-2715](https://www.cnvd.org.cn/flaw/show/CNVD-2010-2715)  
影响版本：`shiro < 1.1.0` 和`JSecurity 0.9.x`  
漏洞描述：`Shiro`进行权限验证前未进行路径标准化，导致使用时可能绕过权限校验  
漏洞补丁：[Commit](https://github.com/apache/shiro/commit/ab8294940a19743583d91f0c7e29b405d197cc34)
### 漏洞分析
先分析一下`Shiro`身份验证的流程：`Shiro`使用`org.apache.shiro.web.filter.mgt.PathMatchingFilterChainResolver#getChain`
方法获取和调用要执行的 `Filter`，逻辑如下：  
在`getPathWithinApplication()`方法中调用
`WebUtils.getPathWithinApplication()`方法，用来获取请求路径。  
其中`getContextPath(request)`方法获取 `Context` 路径  
`getRequestUri(request)` 方法获取`URI` 的值，并调用 `decodeAndCleanUriString()` 处理。  
在`decodeAndCleanUriString()`中对 `;` 进行了截取。  
此时`contextPath`值为`/samples_web_war`，`requestUri`值为`/samples_web_war/login.jsp`  
然后判断`requestUri`是否以`contextPath`开始，是的话将其替换为`/`
处理之后的请求 `URL` 将会使用 `AntPathMatcher#doMatch` 进行权限验证。  
此时发现，`Shiro`中对`URI`并没有进行路径的标准化处理，这样当`URI`中存在特殊字符时，就存在绕过风险
#### 复现
    [urls]
    /login.jsp = authc
    /logout = logout
    /account/** = authc
    /remoting.jsp = authc, perms["audit:list"]
    /** = anon
有了上面的配置，直接访问：`/remoting.jsp`，会因为没有权限而跳转至登陆界面。  
当访问 `/./remoting.jsp`，由于其不能与配置文件匹配，导致进入了 `/**` 的匹配范围，导致可以越权访问。  
### 漏洞修复
`Shiro` 在
[Commit](https://github.com/apache/shiro/commit/ab8294940a19743583d91f0c7e29b405d197cc34)
更新中添加了标准化路径函数。  
对 `/`、`//`、`/./`、`/../` 等进行了处理。
## CVE-2014-0074
### 漏洞信息
漏洞编号： [CVE-2014-0074](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0074) /
[CNVD-2014-03861](https://www.cnvd.org.cn/flaw/show/CNVD-2014-03861) /
[SHIRO-460](https://issues.apache.org/jira/browse/SHIRO-460)  
影响版本：`shiro 1.x < 1.2.3`  
漏洞描述 ：当程序使用`LDAP`服务器并启用非身份验证绑定时，远程攻击者可借助空的用户名或密码利用该漏洞绕过身份验证。  
漏洞补丁：[Commit](https://github.com/apache/shiro/commit/f988846207f98c98ff24213ee9063798ea5d9b6c)
### 漏洞分析
当使用了未经身份验证绑定的 `LDAP` 服务器时，允许远程攻击者通过空用户名或空密码绕过身份验证。
### 漏洞修复
`Shiro` 在
[f988846](https://github.com/apache/shiro/commit/f988846207f98c98ff24213ee9063798ea5d9b6c)
中针对此漏洞进行了修复
## CVE-2016-4437
### 漏洞信息
漏洞编号：[CVE-2016-4437](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-4437) /
[CNVD-2016-03869](https://www.cnvd.org.cn/flaw/show/CNVD-2016-03869) /
[SHIRO-550](https://issues.apache.org/jira/browse/SHIRO-550)  
影响版本：`shiro 1.x < 1.2.5`  
漏洞描述：利用硬编码的密钥构造`rememberMe`参数，进行反序列化攻击  
漏洞补丁：[Commit](https://github.com/apache/shiro/commit/4d5bb000a7f3c02d8960b32e694a565c95976848)  
参考： [Shiro 550反序列化漏洞分析](https://www.anquanke.com/post/id/225442)
### 漏洞分析
关键代码处于 `AbstractRememberMeManager#getRememberedPrincipals`
方法中，参数是用户的身份`Context`信息，如下图  
这个方法主要是把`SubjectContext` 转化成 `PrincipalCollection`
。该方法调用了`getRememberedSerializedIdentity` 和 `convertBytesToPrincipals` 方法。
其中`CookieRememberMeManager` 的`getRememberedSerializedIdentity` 的实现是获取 `Cookie`
并 `Base64` 解码  
将解码后的 `byte` 数组传入 `convertBytesToPrincipals` 中进行：`decrypt` 和
`deserialize`。`decrypt` 是使用 `AesCipherService` 进行解密。  
`deserialize` 调用 `deserialize()` 方法反序列化解密后的数据。  
反序列化得到的 `PrincipalCollection` 会被 `set` 到 `SubjectContext` 。  
解密的调用栈入下图所示  
此时就可以想象，如果我们有了加密密钥，使用密钥加密一个恶意序列化的`payload`，将`rememberMe`的值替换成`base64`后的`payload`传入服务器，那这样就可以触发漏洞了。关键点在于，我们如何获取加密密钥？
这就要提到`AbstractRememberMeManager`类，它是`RememberMeManager` 接口的实现。类中有几个关键变量：
  * `DEFAULT_CIPHER_KEY_BYTES`：对称密钥，使用`Base64`加密之后直接存在代码中
  * `serializer`：`Shiro` 提供的序列化器
  * `cipherService`：用来对数据加解密的类
#### 漏洞利用
编写一个`poc`
    package com.alter.Shiro;
    import com.alter.Deserialize.CommonsCollections6;
    import org.apache.shiro.crypto.AesCipherService;
    import org.apache.shiro.util.ByteSource;
    public class test {
        public static void main(String[] args) throws Exception {
            byte[] payloads = new CommonsCollections6().getPayload("/System/Applications/Calculator.app/Contents/MacOS/Calculator");
            AesCipherService aes = new AesCipherService();
            byte[] key = java.util.Base64.getDecoder().decode("kPH+bIxk5D2deZiIxcaaaA==");
            ByteSource ciphertext = aes.encrypt(payloads, key);
            System.out.printf(ciphertext.toString());
        }
将生成的`payload`赋值给`rememberMe`,但是发送过去后，服务器报错。  
下面根据`p师傅`的分析复现一下报错原因，发现是这个类：`org.apache.shiro.io.ClassResolvingObjectInputStream`的问题。可以看到，这是一个`ObjectInputStream`的子类，其重写了`resolveClass`方法（`resolveClass`是反序列化中用来查找类的方法）：  
对比一下它的父类，也就是正常的 `ObjectInputStream` 类中的 `resolveClass` 方法：  
区别就是前者用的是`org.apache.shiro.util.ClassUtils#forName`(实际上内部用到了`org.apache.catalina.loader.ParallelWebappClassLoader#loadClass`)，而后者用的是`Java`原生的`Class.forName`  
调试发现出现异常时加载的类名为`[Lorg.apache.commons.collections.Transformer;`这个类名看起来怪，其实就是表示`org.apache.commons.collections.Transformer`的数组。  
所以，网上很多文章就给出结论，`Class.forName`支持加载数组，`ClassLoader.loadClass`不支持加载数组，这个区别导致了问题。但`p师傅`在`Java`漫谈中否定了这一观点，并写出结论：如果反序列化流中包含非`Java`自身的数组，则会出现无法加载类的错误。这就解释了为什么`CommonsCollections6`无法利用了，因为其中用到了`Transformer`数组。  
`p师傅`在漫谈中分析讲解了两种`poc`，一个是[使用TemplatesImpl改造的无数组CCShiro反序列化链](https://alter1125.github.io/file/Shiro%20%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/Shiro550/CommonsCollectionsShiro.java)，这个链需要有`CC`依赖，另一个是[CB的无依赖Shiro反序列化链](https://alter1125.github.io/file/Shiro%20%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/Shiro550/CommonsBeanUtilsShiro.java)  
这两个`poc`都可以测试成功了。
#### 漏洞修复
`Shiro` 在 `1.2.5` 的
[Commit](https://github.com/apache/shiro/commit/4d5bb000a7f3c02d8960b32e694a565c95976848)
中对此漏洞进行了修复。系统在启动的时候会生成一个新`key`，用户也可以手动配置一个`cipherKey`。  
其实如果用户设置的密钥泄漏或者太简单的话，还是会被攻击成功。
其实在
[SHIRO-441](https://issues.apache.org/jira/browse/SHIRO-441)，就有人提出了硬编码可能带来的问题。
## CVE-2016-6802
### 漏洞信息
漏洞编号：[CVE-2016-6802](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6802) /
[CNVD-2016-07814](https://www.cnvd.org.cn/flaw/show/CNVD-2016-07814)  
影响版本：`shiro < 1.3.2`  
漏洞描述：`Shiro`未对`ContextPath`做路径标准化导致权限绕过  