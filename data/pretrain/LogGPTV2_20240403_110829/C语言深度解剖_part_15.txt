而变量作为右值时编译器只是取变量的值，所以运行并没有什么问题。不过我仍然警告你别
这么用。既然现在清楚了p3 和p4 都是指向整个数组的，那p3+1 和p4+1 的值就很好理解
了。
但是如果修改一下代码，会有什么问题？p3+1 和p4+1 的值又是多少呢？
int main()
{
char a[5]={'A','B','C','D'};
char (*p3)[3] = &a;
char (*p4)[3] = a;
return 0;
}
甚至还可以把代码再修改：
int main()
{
char a[5]={'A','B','C','D'};
char (*p3)[10] = &a;
char (*p4)[10] = a;
return 0;
}
这个时候又会有什么样的问题？p3+1 和p4+1 的值又是多少？
上述几个问题，希望读者能仔细考虑考虑。
4.4.4 地址的强制转换
先看下面这个例子：
struct Test
{
int Num;
char *pcName;
short sDate;
char cha[2];
short sBa[4];
}*p;
假设p 的值为0x100000。如下表表达式的值分别为多少？
p + 0x1 = 0x___ ?
(unsigned long)p + 0x1 = 0x___?
(unsigned int*)p + 0x1 = 0x___?
我相信会有很多人一开始没看明白这个问题是什么意思。其实我们再仔细看看，这个知
- 80 -
识点
似曾相识。一个指针变量与一个整数相加减，到底该怎么解析呢？
还记得前面我们的表达式“a+1”与“&a+1”之间的区别吗？其实这里也一样。指针变
量与一个整数相加减并不是用指针变量里的地址直接加减这个整数。这个整数的单位不是
byte 而是元素的个数。所以：
p + 0x1 的值为0x100000+sizof（Test）*0x1。至于此结构体的大小为20byte，前
面的章节已经详细讲解过。所以p +0x1 的值为：0x100014。
(unsigned long)p + 0x1 的值呢？这里涉及到强制转换，将指针变量p 保存的值强
制转换成无符号的长整型数。任何数值一旦被强制转换，其类型就改变了。所以这个表达式
其实就是一个无符号的长整型数加上另一个整数。所以其值为：0x100001。
(unsigned int*)p + 0x1 的值呢？这里的p 被强制转换成一个指向无符号整型的指
针。所以其值为：0x100000+sizof（unsigned int）*0x1，等于0x100004。
上面这个问题似乎还没啥技术含量，下面就来个有技术含量的：
在x86 系统下，其值为多少？
intmain()
{
int a[4]={1,2,3,4};
int *ptr1=(int *)(&a+1);
int *ptr2=(int *)((int)a+1);
printf("%x,%x",ptr1[-1],*ptr2);
return 0;
}
这是我讲课时一个学生问我的题，他在网上看到的，据说难倒了n 个人。我看题之后告
诉他，这些人肯定不懂汇编，一个懂汇编的人，这种题实在是小case。下面就来分析分析
这个问题：根据上面的讲解，&a+1 与a+1 的区别已经清楚。
ptr1：将&a+1 的值强制转换成int*类型，赋值给int* 类型的变量ptr，ptr1 肯定
指到数组a 的下一个int 类型数据了。ptr1[-1]被解析成*(ptr1-1)，即ptr1 往后退4 个
byte。所以其值为0x4。
ptr2：按照上面的讲解，(int)a+1 的值是元素a[0]的第二个字节的地址。然后把这
个地址强制转换成int*类型的值赋给ptr2，也就是说*ptr2 的值应该为元素a[0]的第二个
字节开始的连续4 个byte 的内容。其内存布局如下图：
好，问题就来了，这连续4 个byte 里到底存了什么东西呢？也就是说元素a[0],a[1]
- 81 -
里面的值到底怎么存储的。这就涉及到系统的大小端模式了，如果懂汇编的话，这根本就不
是问题。既然不知道当前系统是什么模式，那就得想办法测试。大小端模式与测试的方法在
第一章讲解union 关键字时已经详细讨论过了，请翻到彼处参看，这里就不再详述。我们
可以用下面这个函数来测试当前系统的模式。
int checkSystem( )
{
union check
{
int i;
char ch;
} c;
c.i = 1;
return (c.ch ==1);
}
如果当前系统为大端模式这个函数返回0；如果为小端模式，函数返回1。也就是说如
果此函数的返回值为1 的话，*ptr2 的值为0x2000000。
如果此函数的返回值为0 的话，*ptr2 的值为0x100。
4.5 多维数组不多级挃针
多维数组与多级指针也是初学者感觉迷糊的一个地方。超过二维的数组和超过二级的指
针其实并不多用。如果能弄明白二维数组与二级指针，那二维以上的也不是什么问题了。所
以本节重点讨论二维数组与二级指针。
4.5.1 二维数组
4.5.1.1 假想中的二维数组布局
我们前面讨论过，数组里面可以存任何数据，除了函数。下面就详细讨论讨论数组里面
存数组的情况。Excel 表，我相信大家都见过。我们平时就可以把二维数组假想成一个excel
表，比如：char a[3][4];
- 82 -
4.5.1.2 内存与尺子的对比
实际上内存不是表状的，而是线性的。见过尺子吧？尺子和我们的内存非常相似。一般
尺子上最小刻度为毫米，而内存的最小单位为1 个byte。平时我们说32 毫米，是指以零开
始偏移32 毫米；平时我们说内存地址为0x0000FF00 也是指从内存零地址开始偏移
0x0000FF00 个byte。既然内存是线性的，那二维数组在内存里面肯定也是线性存储的。
实际上其内存布局如下图：
以数组下标的方式来访问其中的某个元素：a[i][j]。编译器总是将二维数组看成是一
个一维数组，而一维数组的每一个元素又都是一个数组。a[3]这个一维数组的三个元素分
别为：a[0],a[1],a[2]。每个元素的大小为sizeof（a[0]）,即sizof(char)*4。由此可
以计算出a[0],a[1],a[2]三个元素的首地址分别为& a[0]，& a[0]+ 1*sizof(char)*4，
& a[0]+ 2*sizof(char)*4。亦即a[i]的首地址为& a[0]+ i*sizof(char)*4。这时候
再考虑a[i]里面的内容。就本例而言，a[i]内有4个char 类型的元素，其每个元素的首地
址分别为&a[i]，&a[i]+1*sizof(char)，&a[i]+2*sizof(char)，
&a[i]+3*sizof(char)，即a[i][j]的首地址为&a[i]+j*sizof(char)。再把&a[i]的值
用a 表示，得到a[i][j]元素的首地址为：a+ i*sizof(char)*4+ j*sizof(char)。同样，
可以换算成以指针的形式表示：*(*(a+i)+j)。
经过上面的讲解，相信你已经掌握了二维数组在内存里面的布局了。下面就看一个题：
#include 
intmain(int argc,char * argv[])
{
int a [3][2]={(0,1),(2,3),(4,5)};
int *p;
p=a [0];
printf("%d",p[0]);
}
问打印出来的结果是多少？
很多人都觉得这太简单了，很快就能把答案告诉我：0。不过很可惜，错了。答案应该
是1。如果你也认为是0，那你实在应该好好看看这个题。花括号里面嵌套的是小括号，而
不是花括号！这里是花括号里面嵌套了逗号表达式！其实这个赋值就相当于int a
[3][2]={ 1, 3,5};
所以，在初始化二维数组的时候一定要注意，别不小心把应该用的花括号写成小括号了。
- 83 -
4.5.1.3 &p[4][2] - &a[4][2]的值为多少？
上面的问题似乎还比较好理解，下面再看一个例子：
int a[5][5];
int (*p)[4];
p = a;
问&p[4][2] - &a[4][2]的值为多少？
这个问题似乎非常简单，但是几乎没有人答对了。我们可以先写代码测试一下其值，然
后分析一下到底是为什么。在Visual C++6.0 里，测试代码如下：
intmain()
{
int a[5][5];
int (*p)[4];
p = a;
printf("a_ptr=%#p,p_ptr=%#p\n",&a[4][2],&p[4][2]);
printf("%p,%d\n",&p[4][2] - &a[4][2],&p[4][2] - &a[4][2]);
return 0;
}
经过测试，可知&p[4][2] - &a[4][2]的值为-4。这到底是为什么呢？下面我们就来
分析一下：前面我们讲过，当数组名a 作为右值时，代表的是数组首元素的首地址。这里的
a 为二维数组，我们把数组a 看作是包含5 个int 类型元素的一维数组,里面再存储了一个
一维数组。如此，则a 在这里代表的是a[0]的首地址。a+1 表示的是一维数组a 的第二个
元素。a[4]表示的是一维数组a 的第5 个元素，而这个元素里又存了一个一维数组。所以
&a[4][2]表示的是&a[0][0]+4*5*sizeof(int) + 2*sizeof(int)。根据定义，p 是指
向一个包含4 个元素的数组的指针。也就是说p+1 表示的是指针p 向后移动了一个“包含4
个int 类型元素的数组”。这里1 的单位是p 所指向的空间，即4*sizeof(int)。所以，
p[4]相对于p[0]来说是向后移动了4 个“包含4 个int 类型元素的数组”，即&p[4]表示
的是&p[0]+4*4*sizeof(int)。由于p 被初始化为&a[0]，那么&p[4][2]表示的是
&a[0][0]+4*4*sizeof(int)+2* sizeof(int)。
再由上面的讲述，&p[4][2] 和&a[4][2]的值相差4 个int 类型的元素。现在，上面
测试出来的结果也可以理解了吧？其实我们最简单的办法就是画内存布局图：
这里最重要的一点就是明白数组指针p 所指向的内存到底是什么。解决这类问题的最好
办法就是画内存布局图。
- 84 -
4.5.2 二级挃针
4.5.2.1 二级指针的内存布局
二级指针是经常用到的，尤其与二维数组在一起的时候更是令人迷糊。例如：
char **p;
定义了一个二级指针变量p。p 是一个指针变量，毫无疑问在32 位系统下占4 个byte。
它与一级指针不同的是，一级指针保存的是数据的地址，二级指针保存的是一级指针的地址。
下图帮助理解：
我们试着给变量p 初始化：
A)，p = NULL;
B)，char *p2; p = &p2;
任何指针变量都可以被初始化为NULL（注意是NULL，不是NUL，更不是null），二级
指针也不例外。也就是说把指针指向数组的零地址。联想到前面我们把尺子比作内存，如果
把内存初始化为NULL，就相当于把指针指向尺子上0 毫米处，这时候指针没有任何内存可
用。当我们真正需要使用p 的时候，就必须把一个一级指针的地址保存到p 中，所以B）的
赋值方式也是正确的。
给p 赋值没有问题，但怎么使用p 呢？这就需要我们前面多次提到的钥匙（“*”）。
第一步：根据p 这个变量，取出它里面存的地址。
第二步：找到这个地址所在的内存。
第三步：用钥匙打开这块内存，取出它里面的地址，*p 的值。
第四步：找到第二次取出的这个地址。
第五步：用钥匙打开这块内存，取出它里面的内容，这就是我们真正的数据，**p 的
值。
我们在这里用了两次钥匙（“*”）才最终取出了真正的数据。也就是说要取出二级指
针所真正指向的数据，需要使用两次两次钥匙（“*”）。
至于超过二维的数组和超过二维的指针一般使用比较少，而且按照上面的分析方法同样
也可以很轻松的分析明白，这里就不再详细讨论。读者有兴趣的话，可以研究研究。
4.6 数组参数不挃针参数
我们都知道参数分为形参和实参。形参是指声明或定义函数时的参数，而实参是在调用
函数时主调函数传递过来的实际值。
- 85 -
4.6.1 一维数组参数
4.6.1.1 能否向函数传递一个数组？