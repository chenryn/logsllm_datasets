we compute the observed oﬀset or skew: s4
0) and likewise
0 ) − (t6
for each IPv6 packet, s6
i ≡ (T 4
i − T 4
i − t6
0).
Given a sequence of skews, we compute drift via the linear programming
solution in [13] to determine a line that is constrained to be under the data
points, but minimizes the distance to the data points. We obtain:
i ≡ (T 6
i − T 6
0 ) − (t4
i − t4
y4 = α4x + β4 and y6 = α6x + β6
I.e., two lines, one corresponding to the interrogation of I4 and one to I6 that
lower-bounds the set of oﬀset points observed. The angle θ between them is:
θ(α4, α6) = tan
−1
(cid:2)
(cid:2)
(cid:2)
(cid:2)
α4 − α6
1 + α4α6
(cid:2)
(cid:2)
(cid:2)
(cid:2)
If θ  100 then return false
17: return to Algorithm 1 at step 10.
if median ≤ range/10 then return true
else return false
The core reason the drift inference works is that, in the common-case, the
remote server’s TCP timestamp clock is less accurate than the prober host’s
packet capture clock. However, in contrast to prior work, we ﬁnd that for a
subset of the machines we probe, the TCP timestamps are set by a clock that is
as stable as that of the probing machine, such that the only source of skew comes
from probing latency variation (e.g. Fig. 2(a)). As an alternative, we compute
the median of the point distances (Sect. 3.4) in line 10 of Algorithm 2, and the
dynamic range of the skews, deﬁned as: the largest skew observed over time, for
either IPv4 or IPv6, minus the smallest skew, line 11. (In the plots of skew, the
range is the largest y-coordinate minus the smallest.) If the dynamic range is
below a threshold, we cannot obtain a reliable skew ﬁngerprint, as in Fig. 2(a),
and classify the relationship as unknown, line 12. Similarly, if either the IPv4 or
IPv6 slope (α4 or α6) is below a threshold minslope = 0.0001, we consider the
skew-based inference unreliable, line 13. In this case, if the median point distance
is an order of magnitude less than the dynamic range we associate the IPs (lines
14–15). Last, if the median point distance is >100 ms, we infer non-siblings.
A limitation of our technique is that we require the ability to negotiate a TCP
connection with the remote device, i.e. the remote machine must be listening on
a publicly accessible TCP port. As applied to common server infrastructure, e.g.
remote web or DNS servers, this does not present a practical limitation.
4 Results
This section analyzes results from deploying the aforementioned technique on
our datasets, including ground-truth and the larger IPv4 and IPv6 Internet.
4.1 Ground Truth Validation
To validate the accuracy of our technique, we examine the ground truth dataset