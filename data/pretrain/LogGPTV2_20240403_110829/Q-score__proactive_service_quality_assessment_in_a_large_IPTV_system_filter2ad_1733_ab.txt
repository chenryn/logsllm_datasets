3. Q-SCORE DESIGN
In this section, we introduce our proposed scheme, Q-score. The
high level idea is to extract a useful association between the noisy,
incomplete, and indeterminately-delayed user feedback and the var-
ious network (including the servers, transport and in-home devices)
performance indicators through an ofﬂine learning process, and
then transform the knowledge into an online monitoring system that
estimates/predicts user-perceived service quality based on the avail-
able network KPIs. We start by giving an overview of the Q-score
system architecture and then dive into details of each component.
3.1 Overview
Figure 2 presents the system architecture of Q-score. As shown
in the ﬁgure, Q-score takes input from network (including servers,
transport and in-home devices) performance indicators, which we
refer to as features, the user control activities, and the user feed-
back in the form of customer call service records. The output is
a series of Q-scores, one for each user of the service, quantify-
ing the received service quality. At a high level, our system is
composed of two components: (i) an ofﬂine learning component
and (ii) an online continuous monitoring component. The over-
all dataﬂow in Q-score system begins with the ofﬂine relationship
learning between user feedback on service quality and the mea-
surements from the network features and user activities. Ideally,
if there had been any accurate and ﬁne-grained user-level service
quality measure, we would use it to train a model for network fea-
ture selection. However, as stated earlier, the best available method
for discovering user-level service quality issue is through the lossy,
noisy and indeterminately-delayed calls to customer care centers.
Consequently, we need to carefully design the appropriate tempo-
ral and spatial aggregations to remedy the inherent loss, noise and
delay with user feedback. Furthermore, by applying statistical re-
gression over a large quantity of historical data between various
network KPIs and the user feedback, we obtain a set of regression
coefﬁcients which quantitatively capture their relationship. These
regression coefﬁcients are fed into the online monitoring compo-
nent.
With the regression coefﬁcients, we can turn the up-to-date net-
work KPI measurements into a single numerical score for each user
or groups of them within a given spatial region. The numerical
score, which we refer to as the Q-score, captures the likelihood of
any on-going service quality problem. Tracking the Q-score over
time enables many service management applications, as will be de-
scribed in Section 5.
3.2 Spatio-Temporal Feature Extraction
In order to discover possible correlation between user’s quality
of experience and IPTV system events, we apply a comprehensive
set of performance indicators ranging from provider network per-
formance indicators to home network component status logs, and
to user interaction logs with IPTV. On each of the network perfor-
mance indicators and user interaction indicators described in Sec-
tion 2.2, we apply the following series of transformations to obtain
a measurement matrix.
3.2.1 Transformations of Measurement Readings
Conversion to Fixed-Interval Time Bins. Network measurement
data collected from different sources and devices are bound to dif-
ferent time periods, posing challenge in correlating them. Some
data sets, such as CPU level of routers in SNMP MIBs, contain pe-
riodically collected measurement data, and the value represents the
average or total over the measurement interval. Some other data
sets, such as user activities to STB and STB crash logs, contain
events that take place at a single point of time, hence are intermit-
tent and have zero duration. Data sets such as STB audio and video
quality indicators contain data polled either on demand or at irreg-
ular intervals and represent the cumulative counters over a variable
time interval (e.g., due to channel switches clearing the diagnostic
counter entries).
To unify the data representation, we deﬁne a data point
d(m, l, s, e) = v as composed in a four dimensional speciﬁcation:
(i) metric m ∈ M where M is a set of metrics such as CPU level
of routers and count of video decoding errors at STBs. (ii) location
l ∈ L where L is a set of spatial location identiﬁers such as a set of
users, DSLAMs, or COs. (iii) beginning time for the data binding
interval s ∈ T , where T is the total time window, and (iv) end-
ing time of the data binding interval e ∈ T . v is the measurement
value that d contains. Note that for measurement data pertaining to
a single time point, s = e.
The above representation is comprehensive in capturing various
cases of periodic/intermittent or ﬁxed/variable duration measure-
ments. However, it requires a moderate amount of computation to
determine the overlaps among the time intervals, which becomes
prohibitively expensive for a large data set as in our case. To re-
duce the complexity, we convert all d(m, l, s, e) into a ﬁxed-size
time interval data representation b(m, l, s, δ) as follows:
b(m, l, s, δ) = {v | v = d(m, ¯l, ¯s, ¯e), where l = ¯l
and [¯s, ¯e] overlaps with [s, s + δ]}
(1)
198where δ is length of the feature time interval. Note that if there
exist two or more ds with matching measurement time to [s, s + δ],
there could also be multiple identical values for b – making b not
well deﬁned. We need to introduce the aggregation functions as
below.
Conversion to Derived Features. To deal with multiple ds collid-
ing into the same b (either due to time bin or spatial aggregation),
we deﬁne three types of aggregate data points, which we refer to as
the derived features. They contain (i) the minimum, (ii) the maxi-
mum, and (iii) the average of all the values for b respectively. For-
mally,
fm(m, l, s, δ) = min
l∈child(¯l)
fM (m, l, s, δ) = max
l∈child(¯l)
fa(m, l, s, δ) = avg
l∈child(¯l)
(∪(b(m, ¯l, s, δ))).
(∪(b(m, ¯l, s, δ))).
(∪(b(m, ¯l, s, δ))).
(2)
(3)
In this way we can limit the number of derived features to be three
regardless of the number of actual readings in b. Unless speciﬁed
otherwise, all features referred in the rest of the paper are the de-
rived features.
Feature Normalization. To identify a small set of network features
most relevant to customer feedback, we need to fairly compare each
network feature to others. However, the network features we con-
sider typically take numerical values, potentially having different
signs and across large range of scales. This makes it difﬁcult to
assess the signiﬁcance of their associated coefﬁcient under regres-
sion.
To deal with the diverse data values, we further normalize fea-
tures to be binary-valued by comparing to a threshold, which is
determined depending on the metric and location.
Consider a vector of features of the same metric and location
over different time and interval combinations:
(cid:3)fa(m, l) = (cid:4)fa( ¯m, ¯l, s, δ) where m = ¯m, l = ¯l(cid:5)
(4)
We need to identify a threshold value τ for (cid:3)fa. To do so, we
bring in the user feedback in the form of user call logs. We consider
the conditional distribution function of the metric value of interest
when (1) there is one or more entries of the user call log being as-
sociated with the location l and when (2) there is no such entry.
Ideally, a threshold τ can separate the instances between cases 1
and 2. When threshold τ is low, the chance of having instances in
case 1 passing the threshold increases, and when the threshold is
high, the chance of having instances in case 2 failing the threshold
increases. So, we set the threshold τ such that the two factors bal-
ance out. Using empirical CDFs of the case 1 (F1) and case 2 (F2),
we can deﬁne τ to be the intersecting point of F1 and 1 − F2 such
that
(5)
(6)
F1(τ ) = 1 − F2(τ ).
j
Once τ is determined, we can normalize of fa as follows.
fa(m, l, s, δ) =
1 if fa(m, l, s, δ) >= τ
0 otherwise.
Features fm and fM can be normalized in the same way.
3.2.2 Constructing Measurement Matrix
In order to support multi-scale analysis that accounts for the in-
determinate delay in user feedback, we construct the regression
input matrix X over all measurement metrics, location, and time
parameters as below.
3
2
3
2
66666666666666664
66666666666666664
2
fm(m1, l1, s1, δ)
fm(m1, l1, s2, δ)
...
fm(m1, l1, st, δ)
fm(m1, l2, s1, δ)
fm(m1, l2, s2, δ)
...
fm(m1, l2, st, δ)
...
77777777777777775
fM
fM
...
fM
fM
fM
...
fM
...
fa
fa
...
fa
fa
fa
...
fa
...
66666666666666664
fm(m2, l1, s1, δ)
fm(m2, l1, s2, δ)
...
fm(m2, l1, st, δ)
fm(m2, l2, s1, δ)
fm(m2, l2, s2, δ)
...
fm(m2, l2, st, δ)
...
fM
fM
...
fM
fM
fM
...
fM
...
fa
fa
...
fa
fa
fa
...
fa
...
3
77777777777777775
77777777777777775
···
X =
(7)
The columns of X represent different metrics of derived features.
Thus, each column has f with a unique mi, where i is an instance
of time bins. The rows of X represent all feature values during a
speciﬁc time (si, δ) at a speciﬁc location lj. Assuming there are
n locations, t different time bins, and k different KPI metrics and
feature aggregations, the number of rows in X is n × t and the
number of columns is k.
3.2.3 Multi-scale Temporal Level Aggregations
The time window parameter δ plays an important role in cap-
turing the extend of cause-effect delays. Large δ would include
cause-effect relationship with long delay. However, large δ would
make it insensitive to dense measurements with short cause-effect
delay, as the aggregation weakens the signiﬁcance of correlation.
Since different δ values have advantages over others, we adopt a
multi-scale analysis approach by including multiple time window
parameters into our consideration. Our matrix representation in Eq
(7) is ﬂexible enough to enable this – we append in columns the
X(δi)s with different time-intervals (δi).
XTemp.Comb. = [X(δ1) ··· X(δv)]
(8)
where v is the number of different values of the time window pa-
rameter.
3.2.4 Multi-scale Spatial Level Aggregation
Similarly to the temporal aggregation captured by the time win-
dow parameter, there can be multiple spatial aggregation levels
with an IPTV system architecture. Based on the hierarchical struc-
ture in Figure 1, we consider three different spatial aggregation lev-
els in Q-score, namely user, DSLAM, and CO levels.
Single-Scale Spatial Level Aggregation. We set the baseline spa-
tial aggregation level to per-user aggregation. This is because the
customer service report logs are associated with a household, which
we loosely refer to as a user. Matching the network features to the
household/user level, one of the following process is necessary: (i)
for features at ﬁner grained spatial level than user (such as STB re-
lated features since one household may have multiple STBs), we
take the maximum among different feature values for the more
speciﬁc locations as the representation for fM , the minimum for
fm, and the average for fa, at the user level; (ii) for features with
coarser grained spatial level than user (such as DSLAM and CO),
we replicate the coarser grained feature values for each associated
user within the hierarchy. In this way, we preserve the number of
samples to be n × t in each row of Xuser. The same spatial level
aggregation is applied for the DSLAM level and the CO level to
obtain XDSLAM and XCO respectively.
199Multi-Scale Spatial Level Aggregation. In parallel with the multi-
scale analysis with respect to time window parameter, different spa-
tial aggregation levels can be fed into regression altogether. The
idea is that the most prominent feature would be at a suitable spatial
aggregation level and would dominate the same features aggregated
at other spatial levels. We append in column the feature matrices
for different spatial levels to get the XSpat.Comb.:
XSpat.Comb. = [XuserID XDSLAM XCO].
(9)
3.3 Feedback Aggregation
As outlined in Section 2.2, we use the customer service call logs
as the user feedback regarding service quality. This feedback is
inherently unreliable.
It is incomplete as not all service quality
problems (e.g., video glitches) would be noticed and reported by
users. And there is an indeterminate delay ranging from minutes
to hours to even days between the service problem and the trouble
ticket log entry (i.e., entries of customer reporting issues to call
centers). All of these require some denoise processing for such
user feedback to be useful even in statistical sense.
We adopt the same principle applied in the spatio-temporal ag-
gregation with respect to network features. Let c be the predicate
of the presence of a matching entry in the feedback log (B):
j
c(l, u, γ) =
1 if ∃ b ∈ B during [u, u + γ];
0 otherwise.
(10)
where u is the beginning time for a feedback binding interval and
γ is the length of feedback time interval. Once c(l, u, γ) is deﬁned,
we can use the same spatio-temporal aggregation method for the
network features on c.
A network event or user activity is always a cause of user feed-
back but cannot be an effect. Thus we set u = s + δ so that when
we correlate ci to bi, we take account of the causal sequence be-
tween network (or user activity) events and user feedback. Let y be
a vector of feedback for different users over time
T
y = [c(l1, u1, γ), ..., c(l1, ut, γ), c(l2, u1, γ), ..., c(l2, ut, γ), ...]
.
The length of the vector y is determined by the number of locations
n and the number of time bins t, making it to be n × t which is the
same as the row count of X.
3.4 Regression
Given the measurements of network indicators X and user feed-
back y, we now aim to ﬁnd a coefﬁcient vector β that provides
a compressed representation of the relationship between X and
y. Note that, in the event of measurement or data collection error
which results in parts of X or y to have no values, we remove the
affected rows of X and y from consideration to eliminate possible
false correlation.
Such an optimization can be performed using regression. A base-
line regression model of linear regression [9], however, cannot pro-
vide the optimal solution as our system of equation Xβ = y is
over-constrained (i.e., the equation has far smaller number of un-
knowns than the number of equations (k (cid:7) (m ∗ n))). To prevent
β from over-ﬁtting due to high variance, we apply Ridge regres-
sion [11] that imposes a penalty λ on the complexity of model by
minimizing a penalized residual sum of squares RSS as follows
RSS(D, β) s.t.
min
β
i=1
nX
2 ≤ s.
β
(11)
We can state this optimization problem in Ridge regression as
where D is the set of observed data points D = xn, yn.
pX
(yi − β0 − pX
X
ˆβ = arg min
β
2
xijβj )
+ λ
2
j .
β
i
j=1
j=1
(12)
(13)
The Ridge coefﬁcient ˆβ becomes
ˆβ = (XTX + λI)
−1XTy.
where I is the identity matrix.
There are other regression methods we have explored including
l1-norm minimization and logistic regression. However, as our sys-
tem of equation has tens of thousands of equations and thousands
of unknowns, l1-norm minimization and logistic regression either
took excessive amounts of time in computation or failed to con-
verge to an answer. The complexity and scale of our system make
these other techniques infeasible.
Finding Signiﬁcant KPI Weights. From the β coefﬁcients, we can
identify key performance indicators (KPIs) that are more closely
related to user feedback. This involves sorting the regression co-
efﬁcients by their absolute value and identifying the top N KPIs
associated with them. Furthermore, by analyzing the commonal-
ity and difference of the same metric across different temporal and
spatial aggregation conﬁguration, we can gain insight on how each
of these KPIs impact the users’ quality of experience speciﬁc to the
most signiﬁcant spatio-temporal aggregation. The analytical results
on the most signiﬁcant KPIs in IPTV are presented in Section 5.1.
3.5 Compute Q-score in Runtime
Once the ofﬂine learning of β completes, we can compute from
the available key performance indicators the Q-scores either for in-
dividual users or groups of users aggregated spatially depending on
the feedback aggregation scheme used.
Detecting Signiﬁcant Q-score Changes. We apply β from the
ofﬂine learning to the current network measurement data X and ob-
tain Q-score that estimates per-user level service quality. Running
continuously as network KPI data streaming into Q-score, we track
the series of Q-scores over time. Since Q-scores are real-valued