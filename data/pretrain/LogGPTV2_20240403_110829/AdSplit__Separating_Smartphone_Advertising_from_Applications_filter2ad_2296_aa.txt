title:AdSplit: Separating Smartphone Advertising from Applications
author:Shashi Shekhar and
Michael Dietz and
Dan S. Wallach
AdSplit: Separating smartphone advertising from applications
Shashi Shekhar
PI:EMAIL
Michael Dietz
PI:EMAIL
Dan S. Wallach
PI:EMAIL
Abstract
A wide variety of smartphone applications today rely on
third-party advertising services, which provide libraries
that are linked into the hosting application. This situ-
ation is undesirable for both the application author and
the advertiser. Advertising libraries require their own
permissions, resulting in additional permission requests
to users. Likewise, a malicious application could sim-
ulate the behavior of the advertising library, forging the
user’s interaction and stealing money from the advertiser.
This paper describes AdSplit, where we extended An-
droid to allow an application and its advertising to run
as separate processes, under separate user-ids, eliminat-
ing the need for applications to request permissions on
behalf of their advertising libraries, and providing ser-
vices to validate the legitimacy of clicks, locally and re-
motely. AdSplit automatically recompiles apps to extract
their ad services, and we measure minimal runtime over-
head. AdSplit also supports a system resource that allows
advertisements to display their content in an embedded
HTML widget, without requiring any native code.
1
Introduction
The smartphone and tablet markets are growing in leaps
and bounds, helped in no small part by the availability of
specialized third-party applications (“apps”). Whether
on the iPhone or Android platforms, apps often come
in two ﬂavors: a free version, with embedded adver-
tising, and a pay version without. Both models have
been successful in the marketplace. To pick one exam-
ple, the popular Angry Birds game at one point brought
in roughly equal revenue from paid downloads on Ap-
ple iOS devices and from advertising-supported free
downloads on Android devices [10]. They now oﬀer
advertising-supported free downloads on both platforms.
We cannot predict whether free or paid apps will dom-
inate in the years to come, but advertising-supported ap-
plications will certainly remain prominent. Already, a
cottage industry of companies oﬀer advertising services
for smartphone application developers.
Today, these services are simply pre-compiled code li-
braries, linked and shipped together with the application.
This means that a remote advertising server has no way
to validate a request it receives from a user legitimately
clicking on an advertisement. A malicious application
could easily forge these messages, generating revenue for
its developer while hiding the advertisement displays in
their entirety. To create a clear trust boundary, advertis-
ers would beneﬁt from running separately from their host
applications.
In Android, applications must request permission at
install time for any sensitive privileges they wish to ex-
ercise. Such privileges include access to the Internet, ac-
cess to coarse or ﬁne location information, or even ac-
cess to see what other apps are installed on the phone.
Advertisers want this information to better proﬁle users
and thus target ads at them; in return, advertisers may
pay more money to their hosting applications’ develop-
ers. Consequently, many applications which require no
particular permissions, by themselves, suﬀer permission
bloat—being forced to request the privileges required by
their advertising libraries in addition to any of their own
needed privileges. Since users might be scared away
by detailed permission requests, application developers
would also beneﬁt if ads could be hosted in separate ap-
plications, which might then make their own privilege
requests or be given a suitable one-size-ﬁts-all policy.
Finally, separating applications from their advertise-
ments creates better fault isolation. If the ad system fails
or runs slowly, the host application should be able to
carry on without inconveniencing the user. Addressing
these needs requires developing a suitable software ar-
chitecture, with OS assistance to make it robust.
The rest of the paper is organized as follows: in Sec-
tion 2 we present a survey of thousands of Android ap-
plications, and estimate the degree of permission bloat
caused by advertisement libraries. Section 3 discusses
the design objectives of AdSplit and how we can borrow
ideas from how web advertisements are secured. Sec-
tion 4 describes our Android-based implementation, and
Section 5 quantiﬁes its performance. Section 6 provides
details about a simple binary rewriter to adapt legacy
apps to use our system. Section 7 considers how we
might eliminate native code libraries for advertisements
and go with a more web-like architecture. Finally, Sec-
tion 8 discusses a variety of policy issues.
2 App analysis
The need to monetize freely distributed smartphone ap-
plications has given rise to many diﬀerent ad provider
networks and libraries. The companies competing for
business in the mobile ad world range from established
web ad providers like Google’s AdMob to a variety of
dedicated smartphone advertising ﬁrms.
With so many options for serving mobile ads, many
app developers choose to include multiple ad libraries.
Additionally, there is a new trend of advertisement ag-
gregators that have the aggregator choose which ad li-
brary to use in order to maximize proﬁts for the devel-
oper.
While we’re not particularly interested in advertising
market share, we want to understand how these ad li-
braries behave. What permissions do they require? And
how many apps would be operating with fewer permis-
sions, if only their advertisement systems didn’t require
them? To address these questions, we downloaded ap-
proximately 10,000 free apps from the Android Market
and the Amazon App Store and analyzed them.
How many ad libraries? Fig 1 shows the distribution
of the number of advertisement libraries used by apps in
our sample. Of the apps that use advertisements, about
35% include two or more advertising libraries.
Permissions required. We found that some ad li-
braries need more permissions than those mentioned in
the documentation; also, the set of permissions may
change with the version of the ad library. Table 1 shows
some of the required and optional permission sets for a
number of popular Android ad libraries. The permissions
listed as optional are not required to use the ad library
but may be requested in order to improve the quality of
advertisements; for example, some ad libraries will use
location information to customize ads. A developer us-
ing such a library has the choice of including location-
targeted ads or not. Presumably, better targeted ads will
bring greater revenue to the application developer.
Figure 1: Number of apps with ad libraries installed.
Permission bloat.
In Android, an application requests
a set of permissions at the time it’s installed. Those per-
missions must suﬃce for all of the app’s needs and for
the needs of its advertising library. We decided to mea-
sure how many of the permissions requested are used ex-
clusively by the advertising library (i.e., if the advertising
library were removed, the permission would be unneces-
sary).
This analysis required decompiling our apps into dex
format [3] using the android-apktool [23]. For each app,
we then extracted a list of all API calls made. Since
advertising libraries have package names that are easy
to distinguish, it’s straightforward to separate their API
calls from the main application. To map the list of API
calls to the necessary permissions, we use the data gath-
ered by Felt et al. [18]. This allows us to compute the
minimal set of permissions required by an application,
with and without its advertisement libraries. We then
compare this against the formal list of permissions that
each app requests from the system.
There may be cases where an app speculatively at-
tempts to use an API call that requires a permission that
was never granted, or there may be dead code that ex-
ercises a permission, but will never actually run. Our
analysis will err on the side of believing that an applica-
tion requires a permission that, in fact, it never uses. This
means that our estimates of permission bloat are strictly
a lower bound on the actual volume of permissions that
are requested only to support the needs of the advertising
libraries.
Our results, shown in Fig. 2, are quite striking. 15% of
apps requesting Internet permissions are doing it for the
sole beneﬁt of their advertising libraries. 26% of apps re-
questing coarse location permissions are doing it for the
sole beneﬁt of their advertising libraries. 47% of apps
012345678Number of ad libraries installed.100101102103104Number of apps.44333253979489173751695e
g
a
r
o
t
S
l
a
n
r
e
t
x
E
e
t
i
r
W
(cid:88)
e
t
a
t
S
e
n
o
h
P
d
a
e
R
(cid:88)
(cid:88)
e
t
a
t
S
k
r
o
w
t
e
N
(cid:88)
(cid:88)
(cid:88)
◦
◦
(cid:88)
(cid:88)
t
e
n
r
e
t
n
Ad Library I
(cid:88)
AdMob [22]
Greystripe [25] (cid:88)
(cid:88)
Millennial
Media [36]
(cid:88)
InMobi [29]
MobClix [38] (cid:88)
(cid:88)
TapJoy [53]
JumpTap [32] (cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)(required), ◦ (optional)
e
n
o
h
P
l
l
a
C
◦
n
o
i
t
a
c
o
L
e
s
r
a
o
C
◦
◦
◦
Table 1: Diﬀerent advertising libraries require diﬀerent
permissions.
requesting permission to get a list of the tasks running
on the phone (the ad libraries use this to check if the
application hosting the advertisement is in foreground)
are doing it for the sole beneﬁt of their advertising li-
braries. These results suggest that any architecture that
separates advertisements from applications will be able
to signiﬁcantly reduce permission bloat. (In concurrent
work to our own, Grace et al. [24] performed a static
analysis of 100 thousand Android apps and found ad-
vertisement libraries uploading sensitive information to
remote ad servers. They also found that some advertise-
ment libraries were fetching and dynamically executing
code from remote ad servers.)
3 Design objectives
Advertisement services have been around since the very
beginnings of the web. Consequently, these services have
adapted to use a wide variety of technologies that should
be able to inﬂuence our AdSplit design.
3.1 Advertisement security on the web
Fundamentally, a web page with a third-page advertise-
ment falls under the rubric of a mashup, where multiple
web servers are involved in the presentation of a single
web page.
Many web pages isolate advertisements from con-
tent by placing ads in an iframe [55]. The content
hosted in an iframe is isolated from the hosting web-
page and browsers allow only speciﬁc cross frame in-
Figure 2: Distribution of types of permissions reduced
when advertisements are separated from applications.
teractions [6, 40], protecting the advertisement against
intrusions from the host page (although there have been
plenty of attacks [51, 47, 50]). Another valuable prop-
erty of the iframe is that it allows an external web server
to distinguish between requests coming from the adver-
tisement from requests that might be forged. Standard
web security mechanisms assist with this; browsers en-
force the same origin policy, restricting the host web
page from making arbitrary connections to the advertiser.
Defenses against cross site request forgery, like the Ori-
gin header [5], further aid advertisers in detecting fraud-
ulent clicks.
Adapting these ideas to a smartphone requires signiﬁ-
cant design changes. Most notably, it’s common for An-
droid applications to request the privilege to make arbi-
trary Internet connections. There is nothing equivalent
to the same origin policy, and consequently no way for a
remote server to have suﬃcient context, from any given
click request it receives, to determine whether that click
is legitimate or fraudulent. This requires AdSplit to in-
clude several new mechanisms.
3.2 Adapting these ideas to AdSplit
The ﬁrst and most prominent design decision of AdSplit
is to separate a host application from its advertisements.
This separation has a number of ramiﬁcations:
INTERNETACCESS_NETWORK_STATEACCESS_COARSE_LOCATIONREAD_PHONE_STATEGET_TASKSACCESS_FINE_LOCATION0100020003000400050006000700080009000Number of apps.7925436619763056560172267103369146027262971598Total requestedTotal usedSpeciﬁcation for advertisements. Currently the ad li-
braries are compiled and linked with their corre-
sponding host application.
If advertisements are
separate, then the host activities must contain the
description of of which advertisements to use. We
introduced a method by which the host activity can
specify the particular ad libraries to be used.
Permission separation. AdSplit allows advertisements
and host applications to have distinct and indepen-
dent permission sets.
Process separation. AdSplit advertisements run in sep-
arate processes, isolated from the host application.
Lifecycle management. Advertisements only need to
run when the host application is running, otherwise
they can be safely killed; similarly once the host
application starts running, the associated advertise-
ment process must also start running. Our system
manages the lifecycle of advertisements.
Screen sharing. Advertisements are displayed inside
host activity, so if advertisements are separated
there should be a way to share screen real estate be-
tween advertisements and host application. AdSplit
includes a mechanism for sharing screen real estate.
Authenticated user input. Advertisements
generate
revenue for their host applications; this revenue is
typically dependent on the amount of user interac-
tion with the advertisement. The host application
can try to forge user input and generate fraudulent
revenue, hence the advertisements should have a
way to determine that any input events received
from host application are genuine. AdSplit includes
a method by which advertising applications can
validate user input, validate that they are being
displayed on-screen, and pass that veriﬁcation, in
an unforgeable fashion, to their remote server.
In the next section, we will describe how AdSplit
achieves these design objectives.
4
Implementation
While many aspects of our design should be applicable
to any smartphone operating system, we built our system
on Android, and there are a number of relevant Android
features that are important to describe.
4.1 Background
Android applications present themselves to the user as