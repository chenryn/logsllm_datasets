# TaintART: A Practical Multi-level Information-Flow Tracking System for Android RunTime

**Authors:**
- Mingshen Sun, The Chinese University of Hong Kong
- Tao Wei, Baidu X-Lab
- John C.S. Lui, The Chinese University of Hong Kong

## Abstract
Mobile operating systems like Android have struggled to provide sufficient protection for personal data, making privacy leakage a significant concern. To understand security risks and privacy leaks, analysts must conduct data-flow analysis. In 2014, Android introduced a new runtime environment, Android RunTime (ART), in Android 5.0, which uses ahead-of-time (AOT) compilation, replacing the previous virtual-machine-based Dalvik. Many existing data-flow analysis systems, such as TaintDroid, were designed for the legacy Dalvik environment, rendering them ineffective for analyzing new apps and malware.

We present TaintART, a multi-level information-flow tracking system designed for the new Android ART environment. TaintART employs a multi-level taint analysis technique to minimize taint tag storage, allowing taint tags to be stored in processor registers for efficient taint propagation. We also customize the ART compiler to maximize performance gains from AOT compilation optimizations. Additionally, TaintART implements a multi-level privacy enforcement mechanism to prevent sensitive data leakage. Our experiments show that TaintART incurs less than 15% overhead on CPU-bound microbenchmarks and negligible overhead on built-in or third-party applications. Compared to the legacy Dalvik environment in Android 4.4, TaintART achieves approximately 99.7% faster performance for Java runtime benchmarks.

## 1. Introduction
Mobile devices, including smartphones, tablets, and wearables, are widely used for communication, photography, entertainment, and health monitoring. While many applications (apps) provide useful services, they may also send sensitive information to remote servers for data analytics, sometimes for profit. Malware can also steal sensitive information, such as contact lists, without user consent. This highlights the serious threat of privacy leakage to mobile users.

To address this, researchers have developed data-flow analysis techniques. Static methods, such as static taint analysis and symbolic execution, can derive possible data flows but cannot detect runtime disclosures due to techniques like Java reflection, code encryption, or dynamic code loading. Dynamic methodologies, such as dynamic taint analysis, track information flows at runtime by labeling (tainting) sensitive data and monitoring label transitions. If a tainted label is transmitted out of the device, it indicates a potential data leak.

TaintDroid, a well-known dynamic taint analysis system, customizes the Dalvik Virtual Machine to achieve taint storage and propagation. However, TaintDroid is incompatible with the new ART environment, which uses AOT compilation. This makes TaintDroid unsuitable for privacy tracking and malware analysis on the latest Android versions.

In this paper, we introduce TaintART, a dynamic information-flow tracking system for the latest Android runtime. TaintART uses a multi-level taint label to tag different taint sources and leverages processor registers for taint storage, achieving faster taint propagation. We implement TaintART on Android 6.0 "Marshmallow" and evaluate its performance extensively.

### Key Contributions:
- **Methodology:** We propose a novel method for efficient dynamic information-flow tracking on Android with AOT compilation. By instrumenting the compiler, we perform multi-level taint analysis on compiled apps, utilizing processor registers for fast taint storage and propagation.
- **Implementation:** TaintART is implemented on the latest Android system, supporting the new ART runtime. It tracks multi-level information flows within and across methods, and between apps. TaintART is open-sourced to support further research.
- **Performance:** TaintART incurs less than 15% overall Java runtime overhead compared to the original environment. It achieves 2.5% and 99.7% faster performance compared to the quick compiler backend ART runtime and Dalvik VM in Android 4.4, respectively. It also has negligible memory overhead and less than 5% IPC overhead.
- **Application to Privacy Leakage Analysis:** TaintART can discover and prevent privacy leakage issues in popular apps on Android 6.0. It also addresses compatibility issues found when using TaintDroid on newer Android versions.

The rest of the paper is organized as follows. Section 2 provides background on the Android runtime. Section 3 describes the design of TaintART, including taint storage, propagation, and logic. Section 4 details the implementation. Section 5 presents case studies, such as privacy tracking. Section 6 evaluates the performance and compatibility of TaintART. Section 7 discusses limitations and future work. Related work is presented in Section 8, and Section 9 concludes the paper.

## 2. Background
### 2.1 Android Overview
Android is based on the Linux kernel and provides a set of libraries, including database and app runtime libraries. The application framework offers APIs for developers, such as activity management, content management, and view systems. Apps and background services run on the device, supported by system services that provide fundamental functions like messaging, location services, and sensor data. Apps are primarily written in Java, but C/C++ can be embedded for performance, using Java Native Interface (JNI). Each app runs in an isolated environment, and inter-process communication (IPC) is managed through the binder mechanism.

### 2.2 Android App Environment
Developers compile Java source code into bytecode using `javac` and convert it to dex bytecode with `dx`. The dex file, along with other resources, is zipped into an APK for distribution. During installation, the dexopt tool optimizes the bytecode. At runtime, the app environment handles method calls and JNI interactions.

#### Dalvik Environment
Legacy Android systems (versions < 4.4) use the Dalvik environment, which interprets bytecode at runtime. The dexopt tool optimizes the bytecode, and the Dalvik VM interprets and executes native code. TaintDroid modified Dalvik VM modules to implement taint tracking.

#### ART Environment
Introduced in Android 4.4 and made default in Android 5.0, ART uses AOT compilation. The dex2oat tool compiles dex bytecode into native code during installation, storing it as an oat file. This allows for multiple optimization passes, improving performance. ART includes two compiler backends: "quick" and "optimizing."

![Comparison between Android Dalvik and ART environments](figure2.png)

This section provides the necessary background to understand the context and significance of TaintART.