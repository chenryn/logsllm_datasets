## PostgreSQL 9.6 检查点柔性优化(SYNC_FILE_RANGE) - 在单机多实例下的IO Hang问题浅析与优化
### 作者         
digoal          
### 日期        
2016-09-28       
### 标签        
PostgreSQL , 检查点 , sync_file_range      
----        
## 背景  
PostgreSQL检查点是将shared buffer中的脏页打标记，并集中将其刷到磁盘的动作（fsync）。（期间可能有刷盘的调度，降低当脏页很多时带来的IO影响）    
在检查点之外，平时bgwriter进程则会使用bufferio的方式（write）将脏页写到OS的dirty page。  
如果shared buffer非常大，而且数据库应用如果是频繁产生脏页的应用，那么检查点带来的性能影响会非常的明显。  
例如shared buffer有100G，活跃数据有100G，同时活跃数据在不停的被UPDATE（产生脏页），那么在发生检查点时，fsync的过程中，可能导致性能急剧下降。    
## 现象
接下来重现一下以上问题。  
单机开启100个PG实例，每个实例限制一定的内存，CPU，以及IO资源，其中日志盘IOPS限制4000，数据盘IOPS限制800。  
压测方法  
每个实例最大数据量1亿，对数据进行随机的UPSERT操作。    
```
  echo "\set id random(1,100000000)" > ~/test$i.sql
  echo "insert into test (id,info,crt_time) values (:id, md5(random()::text), now()) on conflict on constraint test_pkey do update set info=excluded.info, crt_time=excluded.crt_time;" >> ~/test$i.sql
```
因此全表都是热点。  
每个实例连4个连接，同时进行压测。  
测试用例参考  
[20160927_01.md](20160927_01.md)  
由于同时开启测试，每个节点几乎在同一时间点进入检查点状态。  
产生大量的Writeback内存。  
通过以下方法可以观察到    
```
while(true) ; do cat /proc/meminfo |grep -E "Dirty|Writeback"; sleep 0.5; done
Dirty:          24752872 kB
Writeback:      11312408 kB
WritebackTmp:          0 kB
```
解释  
```
Dirty — The total amount of memory, in kilobytes, waiting to be written back to the disk.
Writeback — The total amount of memory, in kilobytes, actively being written back to the disk.
```
在产生了大量的Writeback内存计数后，最后检查点调用fsync前，因为脏页没有完全落盘，导致实例的检查点在fsync的阶段需要耗费自己的IOPS进行刷盘，非常慢。  
甚至实例完全不可用。  
观察到的现象   
数据库整机IO很低（只有数据盘的IO，并且受到CGROUP限制），  
tps降到0  (更新块被堵塞)  ( shared buffer中没有剩余的块?  )    
```
progress: 1321.0 s, 0.0 tps, lat -nan ms stddev -nan
progress: 1322.0 s, 0.0 tps, lat -nan ms stddev -nan
progress: 1323.0 s, 0.0 tps, lat -nan ms stddev -nan
progress: 1324.0 s, 0.0 tps, lat -nan ms stddev -nan
progress: 1325.0 s, 0.0 tps, lat -nan ms stddev -nan
progress: 1326.0 s, 0.0 tps, lat -nan ms stddev -nan
progress: 1327.0 s, 0.0 tps, lat -nan ms stddev -nan
progress: 1328.0 s, 0.0 tps, lat -nan ms stddev -nan
progress: 1329.0 s, 0.0 tps, lat -nan ms stddev -nan
progress: 1330.0 s, 0.0 tps, lat -nan ms stddev -nan
```
需要等待实例的Writeback 全部刷盘后才能恢复。    
期间进程状态如下  
```
  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
49799 digoal  20   0 1300m 155m 155m S  0.0  0.0   0:00.59 postgres -B 1GB -c port=1922 -c listen_addresses=0.0.0.0 -c synchronous_commit=on -c full_page_writes=on -c wal_buffers=128MB -c wal_writer_flush_after=0 -c bgwriter_delay=10ms
49844 digoal  20   0 1300m 129m 128m S  0.0  0.0   0:09.01 postgres: wal writer process                                                                                                                                                    
49845 digoal  20   0 1300m 1952 1224 S  0.0  0.0   0:05.71 postgres: autovacuum launcher process                                                                                                                                           
49838 digoal  20   0  113m  892  460 S  0.0  0.0   0:00.03 postgres: logger process                                                                                                                                                        
16531 digoal  20   0 1300m 1.1g 1.1g D  0.0  0.2   1:22.71 postgres: postgres postgres 127.0.0.1(49777) INSERT                                                                                                                             
16534 digoal  20   0 1300m 1.1g 1.1g D  0.0  0.2   1:22.32 postgres: postgres postgres 127.0.0.1(49778) INSERT                                                                                                                             
16535 digoal  20   0 1300m 1.1g 1.1g D  0.0  0.2   1:22.73 postgres: postgres postgres 127.0.0.1(49780) INSERT                                                                                                                             
16537 digoal  20   0 1300m 1.1g 1.1g D  0.0  0.2   1:22.43 postgres: postgres postgres 127.0.0.1(49781) INSERT                                                                                                                             
49842 digoal  20   0 1301m 1.0g 1.0g D  0.0  0.2   0:23.70 postgres: checkpointer process                                                                                                                                                  
49846 digoal  20   0  115m 1048  552 D  0.0  0.0   0:12.83 postgres: stats collector process                                                                                                                                               
49843 digoal  20   0 1300m 978m 977m D  0.0  0.2   0:46.35 postgres: writer process
```
状态解释  
```
       w: S  --  Process Status
          The status of the task which can be one of:
             ’D’ = uninterruptible sleep
             ’R’ = running
             ’S’ = sleeping
             ’T’ = traced or stopped
             ’Z’ = zombie
```
进程stack信息    
checkpointer进程  
```
cat /proc/49842/stack 
[] generic_file_aio_write+0x71/0x100
[] ext4_file_write+0x43/0xe0 [ext4]
[] do_sync_write+0xfa/0x140
[] vfs_write+0xb8/0x1a0
[] sys_write+0x51/0x90
[] system_call_fastpath+0x16/0x1b
[] 0xffffffffffffffff
```
stats收集进程  
```
cat /proc/49846/stack 
[] start_this_handle+0x25a/0x480 [jbd2]
[] jbd2_journal_start+0xb5/0x100 [jbd2]
[] ext4_journal_start_sb+0x74/0x140 [ext4]
[] ext4_create+0x7a/0x150 [ext4]
[] vfs_create+0xb4/0xe0
[] do_filp_open+0xb10/0xdd0
[] do_sys_open+0x69/0x140
[] sys_open+0x20/0x30
[] system_call_fastpath+0x16/0x1b
[] 0xffffffffffffffff
```
bgwriter进程   
```
cat /proc/49843/stack 
[] start_this_handle+0x25a/0x480 [jbd2]
[] jbd2_journal_start+0xb5/0x100 [jbd2]
[] ext4_journal_start_sb+0x74/0x140 [ext4]
[] ext4_dirty_inode+0x2a/0x60 [ext4]
[] __mark_inode_dirty+0x3b/0x160
[] file_update_time+0xf2/0x170
[] __generic_file_aio_write+0x230/0x490
[] generic_file_aio_write+0x88/0x100
[] ext4_file_write+0x43/0xe0 [ext4]
[] do_sync_write+0xfa/0x140
[] vfs_write+0xb8/0x1a0
[] sys_write+0x51/0x90
[] system_call_fastpath+0x16/0x1b
[] 0xffffffffffffffff
```
backend process 进程    
```
cat /proc/16537/stack 
[] ext4_llseek+0x60/0x110 [ext4]
[] vfs_llseek+0x3a/0x40
[] sys_lseek+0x66/0x80
[] system_call_fastpath+0x16/0x1b
[] 0xffffffffffffffff
```
logger进程    
```
cat /proc/49838/stack 
[] start_this_handle+0x25a/0x480 [jbd2]
[] jbd2_journal_start+0xb5/0x100 [jbd2]
[] ext4_journal_start_sb+0x74/0x140 [ext4]
[] ext4_dirty_inode+0x2a/0x60 [ext4]
[] __mark_inode_dirty+0x3b/0x160
[] file_update_time+0xf2/0x170
[] __generic_file_aio_write+0x230/0x490
[] generic_file_aio_write+0x88/0x100
[] ext4_file_write+0x43/0xe0 [ext4]
[] do_sync_write+0xfa/0x140
[] vfs_write+0xb8/0x1a0
[] sys_write+0x51/0x90
[] system_call_fastpath+0x16/0x1b
[] 0xffffffffffffffff
``` 
wal writer进程    
```
cat /proc/49844/stack 
[] ep_poll+0x2ad/0x330
[] sys_epoll_wait+0xc5/0xe0
[] system_call_fastpath+0x16/0x1b
[] 0xffffffffffffffff
```
文件系统已使用data=writeback挂载  
```
/dev/mapper/vgdata01-lv01 on /u01 type ext4 (rw,noatime,nodiratime,nodelalloc,barrier=0,data=writeback)
/dev/mapper/vgdata01-lv02 on /u02 type ext4 (rw,noatime,nodiratime,nodelalloc,barrier=0,data=writeback)
```
## 原因分析
PostgreSQL 9.6的检查点改进如下  
1\. 阶段1(调用write + 检查点调度)   
2\. 阶段2(调用sync_file_range)  
实际上通过设置OS调度也能缓解，例如。   
```
vm.dirty_background_ratio = 0
vm.dirty_background_bytes = 102400000
vm.dirty_ratio = 95
vm.dirty_bytes = 0
vm.dirty_writeback_centisecs = 100
vm.dirty_expire_centisecs = 3000
```
3\. 阶段3(fsync)  
分析  
1\. 从检查点源码开始  
```
/*
 * CheckPointBuffers
 *
 * Flush all dirty blocks in buffer pool to disk at checkpoint time.
 *
 * Note: temporary relations do not participate in checkpoints, so they don't
 * need to be flushed.
 */
void
CheckPointBuffers(int flags)
{
        TRACE_POSTGRESQL_BUFFER_CHECKPOINT_START(flags);
        CheckpointStats.ckpt_write_t = GetCurrentTimestamp();
        BufferSync(flags);
        CheckpointStats.ckpt_sync_t = GetCurrentTimestamp();
        TRACE_POSTGRESQL_BUFFER_CHECKPOINT_SYNC_START();
        smgrsync();
        CheckpointStats.ckpt_sync_end_t = GetCurrentTimestamp();
        TRACE_POSTGRESQL_BUFFER_CHECKPOINT_DONE();
}
```
### 阶段1(write+检查点调度)
2\. 调用BufferSync  
```
/*
 * BufferSync -- Write out all dirty buffers in the pool.
 *
 * This is called at checkpoint time to write out all dirty shared buffers.
 * The checkpoint request flags should be passed in.  If CHECKPOINT_IMMEDIATE
 * is set, we disable delays between writes; if CHECKPOINT_IS_SHUTDOWN,
 * CHECKPOINT_END_OF_RECOVERY or CHECKPOINT_FLUSH_ALL is set, we write even
 * unlogged buffers, which are otherwise skipped.  The remaining flags
 * currently have no effect here.
 */
static void
BufferSync(int flags)
{
.....
        WritebackContextInit(&wb_context, &checkpoint_flush_after);
.....
        /*
         * Iterate through to-be-checkpointed buffers and write the ones (still)
         * marked with BM_CHECKPOINT_NEEDED. The writes are balanced between
         * tablespaces; otherwise the sorting would lead to only one tablespace
         * receiving writes at a time, making inefficient use of the hardware.
         */
        num_processed = 0;
        num_written = 0;
        while (!binaryheap_empty(ts_heap))
        {
......
                if (pg_atomic_read_u32(&bufHdr->state) & BM_CHECKPOINT_NEEDED)
                {
                        // 调用 write，产生os dirty page，同时记录writeback wb_context。   
			if (SyncOneBuffer(buf_id, false, &wb_context) & BUF_WRITTEN)    
                        {
                                TRACE_POSTGRESQL_BUFFER_SYNC_WRITTEN(buf_id);
                                BgWriterStats.m_buf_written_checkpoints++;
                                num_written++;
                        }
                }
.......
                /*
                 * Sleep to throttle our I/O rate.
                 */
                // 这里有一个检查点调度，通过GUC变量checkpoint_completion_target设置。    
		// 不展开，详见 src/backend/postmaster/checkpointer.c    
		// 这里只是write调度，并不是fsync的调度。  
		CheckpointWriteDelay(flags, (double) num_processed / num_to_scan);  
.....
        }
.....
        // 告诉操作系统内核，开始将dirty page write out到磁盘。  (异步)  
	/* issue all pending flushes */
        IssuePendingWritebacks(&wb_context);
.....
```
3\. 调用SyncOneBuffer  
```
...
        FlushBuffer(bufHdr, NULL);
...
        ScheduleBufferTagForWriteback(wb_context, &tag);
...
```
4\. 调用FlushBuffer  
```
...
        /*
         * bufToWrite is either the shared buffer or a copy, as appropriate.
         */
        smgrwrite(reln,
                          buf->tag.forkNum,
                          buf->tag.blockNum,
                          bufToWrite,
                          false);
...
```
5\. 调用mdwrite    
```
        nbytes = FileWrite(v->mdfd_vfd, buffer, BLCKSZ);  
```
6\. 调用FileWrite     
```
        returnCode = write(VfdCache[file].fd, buffer, amount);  
```
调用write产生dirty page    