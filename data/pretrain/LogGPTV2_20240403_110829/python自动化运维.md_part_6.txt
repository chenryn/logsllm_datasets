"""，"html"，"utf-8"）
msg['Subject'] = SUBJECT #邮件主题
msg['From']=FROM #邮件发件人，邮件头部可见
msg['To']=TO #邮件收件人，邮件头部可见
try：
server = smtplib.SMTP（） #创建一个SMTP（）对象
server.connect（HOST，"25"） #通过connect方法连接smtp主机
server.starttls（） #启动安全传输模式
server.login（"PI:EMAIL"，"mypassword"） #邮箱账号登录校验
server.sendmail（FROM， TO， msg.as_string（）） #邮件发送
server.quit（） #断开smtp连接
print "邮件发送成功！"
except Exception， e：
print "失败："+str（e）
代码运行结果如图2-6所示，我们将业务日志分析结果定期推送给管理员，
以方便管理员了解业务的服务情况。
图2-6 示例1运行结果
示例2：实现图文格式的服务器性能报表邮件。
示例1通过MIMEText类来实现HTML格式的邮件，当要求包含图片数据的邮
件内容时，需要引用MIMEImage类，若邮件主体由多个MIME对象组成，则同时
需引用MIMEMultipart类来进行组装。本示例通过MIMEText与MIMEImage类的组
合来实现图文格式的服务器性能报表邮件的定制，实现代码如下：
【/home/test/smtplib/simple3.py】
#coding： utf-8
import smtplib
from email.mime.multipart import MIMEMultipart #导入MIMEMultipart类
from email.mime.text import MIMEText #导入MIMEText类
from email.mime.image import MIMEImage #导入MIMEImage类
HOST = "smtp.gmail.com" #定义smtp主机
SUBJECT = u"业务性能数据报表" #定义邮件主题
TO = "PI:EMAIL" #定义邮件收件人
FROM = "PI:EMAIL" #定义邮件发件人
def addimg（src，imgid）： #添加图片函数，参数1：图片路径，参数2：图片id
fp = open（src， 'rb'） #打开文件
msgImage = MIMEImage（fp.read（）） #创建MIMEImage对象，读取图片内容并作为参
数
fp.close（） #关闭文件
msgImage.add_header（'Content-ID'， imgid） #指定图片文件的Content-
ID，
#标签src用到
return msgImage #返回msgImage对象
msg = MIMEMultipart（'related'） #创建MIMEMultipart对象，采用related定义内嵌资
源
#的邮件体
msgtext = MIMEText（""" #创建一个MIMEText对象，HTML元素包括表格及图片
：14px">
*官网性能数据 更多>>
：13px">
：13px">
"""，"html"，"utf-8"） #标签的src属性是通过Content-ID来引用的
msg.attach（msgtext） #MIMEMultipart对象附加MIMEText的内容
msg.attach（addimg（"img/bytes_io.png"，"io"）） #使用MIMEMultipart对象附加
MIMEImage
#的内容
msg.attach（addimg（"img/myisam_key_hit.png"，"key_hit"））
msg.attach（addimg（"img/os_mem.png"，"men"））
msg.attach（addimg（"img/os_swap.png"，"swap"））
msg['Subject'] = SUBJECT #邮件主题
msg['From']=FROM #邮件发件人，邮件头部可见
msg['To']=TO #邮件收件人，邮件头部可见
try：
server = smtplib.SMTP（） #创建一个SMTP（）对象
server.connect（HOST，"25"） #通过connect方法连接smtp主机
server.starttls（） #启动安全传输模式
server.login（"PI:EMAIL"，"mypassword"） #邮箱账号登录校验
server.sendmail（FROM， TO， msg.as_string（）） #邮件发送
server.quit（） #断开smtp连接
print "邮件发送成功！"
except Exception， e：
print "失败："+str（e）
代码运行结果如图2-7所示，我们将业务服务器性能数据定期推送给管理
员，以方便管理员了解业务的服务情况。
图2-7 示例2运行结果
示例3：实现带附件格式的业务服务质量周报邮件。
本示例通过MIMEText与MIMEImage类的组合，实现图文邮件格式。另通过
MIMEText类再定义Content-Disposition属性来实现带附件的邮件。我们可以利用
这些丰富的特性来定制周报邮件，如业务服务质量周报。实现代码如下：
【/home/test/smtplib/simple4.py】
#coding： utf-8
import smtplib
from email.mime.multipart import MIMEMultipart #导入MIMEMultipart类
from email.mime.text import MIMEText #导入MIMEText类
from email.mime.image import MIMEImage #导入MIMEImage类
HOST = "smtp.gmail.com" #定义smtp主机
SUBJECT = u"官网业务服务质量周报" #定义邮件主题
TO = "PI:EMAIL" #定义邮件接收人
FROM = "PI:EMAIL" #定义邮件发件人
def addimg（src，imgid）： #添加图片函数，参数1：图片路径，参数2：图片id
fp = open（src， 'rb'） #打开文件
msgImage = MIMEImage（fp.read（）） #创建MIMEImage对象，读取图片内容作为参数
fp.close（） #关闭文件
msgImage.add_header（'Content-ID'， imgid） #指定图片文件的Content-
ID，
#标签src用到
return msgImage #返回msgImage对象
msg = MIMEMultipart（'related'） #创建MIMEMultipart对象，采用related定义内嵌资
源
#的邮件体
#创建一个MIMEText对象，HTML元素包括文字与图片
msgtext = MIMEText（"官网业务周平均延时图表：详细内容见附件。"，"html"，"utf-8"）
msg.attach（msgtext） #MIMEMultipart对象附加MIMEText的内容
msg.attach（addimg（"img/weekly.png"，"weekly"）） #使用MIMEMultipart对象附加
# MIMEImage的内容
#创建一个MIMEText对象，附加week_report.xlsx文档
attach = MIMEText（open（"doc/week_report.xlsx"， "rb"）.read（）， "base64"， "utf-
8"）
attach["Content-Type"] = "application/octet-stream" #指定文件格式类型
#指定Content-Disposition值为attachment则出现下载保存对话框，保存的默认文件名使用
#filename指定
#由于qqmail使用gb18030页面编码，为保证中文文件名不出现乱码，对文件名进行编码转换
attach["Content-Disposition"] = "attachment； filename=\"业务服务质量周报（12
周）.xlsx\"".decode（"utf-8"）.encode（"gb18030"）
msg.attach（attach） #MIMEMultipart对象附加MIMEText附件内容
msg['Subject'] = SUBJECT #邮件主题
msg['From']=FROM #邮件发件人，邮件头部可见
msg['To']=TO #邮件收件人，邮件头部可见
try：
server = smtplib.SMTP（） #创建一个SMTP（）对象
server.connect（HOST，"25"） #通过connect方法连接smtp主机
server.starttls（） #启动安全传输模式
server.login（"PI:EMAIL"，"mypassword"） #邮箱账号登录校验
server.sendmail（FROM， TO， msg.as_string（）） #邮件发送
server.quit（） #断开smtp连接
print "邮件发送成功！"
except Exception， e：
print "失败："+str（e）
代码运行结果如图2-8所示，实现了发送业务服务质量周报的邮件功能。
图2-8 示例3的运行结果
参考提示
·2.3.1节smtplib模块的常用类与方法内容参考
https://docs.python.org/2.7/library/smtplib.html。
·2.3.2节email.mime常用类定义内容参考
https://docs.python.org/2.7/library/email.mime.html。
2.4 探测Web服务质量方法
pycurl（http://pycurl.sourceforge.net）是一个用C语言写的libcurl Python实
现，功能非常强大，支持的操作协议有FTP、HTTP、HTTPS、TELNET等，可以
理解成Linux下curl命令功能的Python封装，简单易用。本节通过调用pycurl提供
的方法，实现探测Web服务质量的情况，比如响应的HTTP状态码、请求延时、
HTTP头信息、下载速度等，利用这些信息可以定位服务响应慢的具体环节，下
面详细进行说明。
pycurl模块的安装方法如下：
easy_install pycurl #easy_install安装方法
pip install pycurl #pip安装方法
#源码安装方法
# 要求curl-config包支持，需要源码方式重新安装curl
# wget http：//curl.haxx.se/download/curl-7.36.0.tar.gz
# tar -zxvf curl-7.36.0.tar.gz
# cd curl-7.36.0
# ./configure
# make && make install
# export LD_LIBRARY_PATH=/usr/local/lib
#
# wget https：//pypi.python.org/packages/source/p/pycurl/pycurl-
7.19.3.1.tar.gz --no-check-certificate
# tar -zxvf pycurl-7.19.3.1.tar.gz
# cd pycurl-7.19.3.1
# python setup.py install --curl-config=/usr/local/bin/curl-config
校验安装结果如下：
>>> import pycurl
>>> pycurl.version
'PycURL/7.19.3.1 libcurl/7.36.0 OpenSSL/1.0.1e zlib/1.2.3'
2.4.1 模块常用方法说明
pycurl.Curl（）类实现创建一个libcurl包的Curl句柄对象，无参数。更多关于
libcurl包的介绍见http://curl.haxx.se/libcurl/c/libcurl-tutorial.html。下面介绍Curl对
象几个常用的方法。
·close（）方法，对应libcurl包中的curl_easy_cleanup方法，无参数，实现关
闭、回收Curl对象。
·perform（）方法，对应libcurl包中的curl_easy_perform方法，无参数，实现
Curl对象请求的提交。
·setopt（option，value）方法，对应libcurl包中的curl_easy_setopt方法，参数
option是通过libcurl的常量来指定的，参数value的值会依赖option，可以是一个
字符串、整型、长整型、文件对象、列表或函数等。下面列举常用的常量列
表：
c = pycurl.Curl（） #创建一个curl对象
c.setopt（pycurl.CONNECTTIMEOUT， 5） #连接的等待时间，设置为0则不等待
c.setopt（pycurl.TIMEOUT， 5） #请求超时时间
c.setopt（pycurl.NOPROGRESS， 0） #是否屏蔽下载进度条，非0则屏蔽
c.setopt（pycurl.MAXREDIRS， 5） #指定HTTP重定向的最大数
c.setopt（pycurl.FORBID_REUSE， 1） #完成交互后强制断开连接，不重用
c.setopt（pycurl.FRESH_CONNECT，1） #强制获取新的连接，即替代缓存中的连接
c.setopt（pycurl.DNS_CACHE_TIMEOUT，60） #设置保存DNS信息的时间，默认为120秒
c.setopt（pycurl.URL，"http：//www.baidu.com"） #指定请求的URL
c.setopt（pycurl.USERAGENT，"Mozilla/5.2 （compatible； MSIE 6.0； Windows NT 5.1； SV1； .NET CLR 1.1.4322； .NET CLR 2.0.50324）"） #
配置请求HTTP头的User-Agent
c.setopt（pycurl.HEADERFUNCTION， getheader） #将返回的HTTP HEADER定向到回调函数
getheader
c.setopt（pycurl.WRITEFUNCTION， getbody） #将返回的内容定向到回调函数getbody
c.setopt（pycurl.WRITEHEADER， fileobj） #将返回的HTTP HEADER定向到fileobj文
件对象
c.setopt（pycurl.WRITEDATA， fileobj） #将返回的HTML内容定向到fileobj文件对象
·getinfo（option）方法，对应libcurl包中的curl_easy_getinfo方法，参数option
是通过libcurl的常量来指定的。下面列举常用的常量列表：
c = pycurl.Curl（） #创建一个curl对象
c.getinfo（pycurl.HTTP_CODE） #返回的HTTP状态码
c.getinfo（pycurl.TOTAL_TIME） #传输结束所消耗的总时间
c.getinfo（pycurl.NAMELOOKUP_TIME） #DNS解析所消耗的时间
c.getinfo（pycurl.CONNECT_TIME） #建立连接所消耗的时间
c.getinfo（pycurl.PRETRANSFER_TIME） #从建立连接到准备传输所消耗的时间
c.getinfo（pycurl.STARTTRANSFER_TIME） #从建立连接到传输开始消耗的时间
c.getinfo（pycurl.REDIRECT_TIME） #重定向所消耗的时间
c.getinfo（pycurl.SIZE_UPLOAD） #上传数据包大小
c.getinfo（pycurl.SIZE_DOWNLOAD） #下载数据包大小
c.getinfo（pycurl.SPEED_DOWNLOAD） #平均下载速度
c.getinfo（pycurl.SPEED_UPLOAD） #平均上传速度
c.getinfo（pycurl.HEADER_SIZE） #HTTP头部大小
我们利用libcurl包提供的这些常量值来达到探测Web服务质量的目的。
2.4.2 实践：实现探测Web服务质量
HTTP服务是最流行的互联网应用之一，服务质量的好坏关系到用户体验以
及网站的运营服务水平，最常用的有两个标准，一为服务的可用性，比如是否
处于正常提供服务状态，而不是出现404页面未找到或500页面错误等；二为服务
的响应速度，比如静态类文件下载时间都控制在毫秒级，动态CGI为秒级。本示
例使用pycurl的setopt与getinfo方法实现HTTP服务质量的探测，获取监控URL返
回的HTTP状态码，HTTP状态码采用pycurl.HTTP_CODE常量得到，以及从HTTP
请求到完成下载期间各环节的响应时间，通过pycurl.NAMELOOKUP_TIME、
pycurl.CONNECT_TIME、pycurl.PRETRANSFER_TIME、pycurl.R等常量来实
现。另外通过pycurl.WRITEHEADER、pycurl.WRITEDATA常量得到目标URL的
HTTP响应头部及页面内容。实现源码如下：
【/home/test/pycurl/simple1.py】
# -*- coding： utf-8 -*-
import os，sys
import time
import sys
import pycurl
URL="http：//www.google.com.hk" #探测的目标URL
c = pycurl.Curl（） #创建一个Curl对象
c.setopt（pycurl.URL， URL） #定义请求的URL常量
c.setopt（pycurl.CONNECTTIMEOUT， 5） #定义请求连接的等待时间
c.setopt（pycurl.TIMEOUT， 5） #定义请求超时时间
c.setopt（pycurl.NOPROGRESS， 1） #屏蔽下载进度条
c.setopt（pycurl.FORBID_REUSE， 1） #完成交互后强制断开连接，不重用
c.setopt（pycurl.MAXREDIRS， 1） #指定HTTP重定向的最大数为1
c.setopt（pycurl.DNS_CACHE_TIMEOUT，30） #设置保存DNS信息的时间为30秒
#创建一个文件对象，以”wb”方式打开，用来存储返回的http头部及页面内容
indexfile = open（os.path.dirname（os.path.realpath（__file__））+"/content.txt"， "wb"）
c.setopt（pycurl.WRITEHEADER， indexfile） #将返回的HTTP HEADER定向到
indexfile文件对象