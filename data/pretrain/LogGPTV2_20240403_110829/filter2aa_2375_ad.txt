1 byte
Table 7: Logitech Encrypted Keystroke Payload
Logitech Unencrypted Keystroke Payload
Field
Length
Description
Unused
1 byte
Frame Type (0xC1)
1 bytes
Keyboard HID Data
7 bytes
Checksum
1 byte
Table 8: Logitech Unencrypted Keystroke Payload
17
Logitech Multimedia Key Payload
Field
Length
Description
Unused
1 byte
Frame Type
1 bytes
0xC3
Multimedia Key Scan Codes
4 bytes
USB HID multimedia key scan codes
Unused
3 bytes
Checksum
1 byte
Table 9: Logitech Multimedia Key Payload
Logitech Pairing Request 1 Payload
Field
Length
Description
ID
1 byte
temporary ID, randomly generated by the pairing device
Frame Type
1 bytes
frame type
Step
1 bytes
identiﬁes the current step in the pairing process
??
5 bytes
Some devices ﬁll this ﬁeld with their previously paired RF address, and others ﬁll it
with random data. The value does not appear to a↵ect the pairing process.
??
1 bytes
unknown usage, always observed as 0x08
Product ID
2 bytes
??
2 bytes
Device Type
2 bytes
this ﬁeld speciﬁes the USB HID device type; observed values include 02:0C (M510
mouse) and 01:47 (K830 keyboard)
??
5 bytes
??
1 byte
any nonzero value
Checksum
1 byte
Table 10: Logitech Pairing Request 1 Payload
18
Logitech Pairing Response 1 Payload
Field
Length
Description
ID
1 byte
temporary ID, randomly generated by the pairing device
Frame Type
1 bytes
Step
1 bytes
identiﬁes the current step in the pairing process
Address
5 bytes
new RF address assigned to the pairing device
??
1 bytes
unknown usage, always observed as 0x08
Product ID
2 bytes
??
4 bytes
Device Type
2 bytes
this ﬁeld speciﬁes the USB HID device type; observed values are 02:0C (M510) and
01:47 (K830)
??
6 bytes
Checksum
1 byte
Table 11: Logitech Pairing Response 1 Payload
Logitech Pairing Request 2 Payload
Field
Length
Description
Unused
1 byte
Frame Type
1 bytes
Step
1 bytes
identiﬁes the current step in the pairing process
Crypto
4 bytes
data potentially used during AES key generation; mice transmit 4 0x00 bytes, and
keyboards transmit 4 random bytes
Serial Number
4 bytes
device serial number
Capabilities
2 bytes
device capabilities; observed values are 04:00 (mouse) and 1E:40 (keyboard)
??
8 bytes
Checksum
1 byte
Table 12: Logitech Pairing Request 2 Payload
19
Logitech Pairing Response 2 Payload
Field
Length
Description
Unused
1 byte
Frame Type
1 bytes
Step
1 bytes
identiﬁes the current step in the pairing process
Crypto
4 bytes
data potentially used during AES key generation; appears to be randomly gener-
ated
Serial Number
4 bytes
device serial number
Capabilities
2 bytes
device capabilities; observed values are 04:00 (mouse) and 1E:40 (keyboard)
??
8 bytes
Checksum
1 byte
Table 13: Logitech Pairing Response 2 Payload
Logitech Pairing Request 3 Payload
Field
Length
Description
Unused
1 byte
Frame Type
1 byte
Step
1 byte
??
2 bytes
Device Name Length
1 byte
Device Name
16 bytes
Checksum
1 byte
Table 14: Logitech Pairing Request 3 Payload
Logitech Pairing Response 3 Payload
Field
Length
Description
Unused
1 byte
temporary ID, randomly generated by the pairing device
Frame Type
1 byte
Step
1 byte
Crypto
2 bytes
bytes 1-2 of the potential crypto setup data sent by the device
Crypto
4 bytes
bytes 0-3 of the potential crypto setup data sent by the dongle
Checksum
1 byte
Table 15: Logitech Pairing Response 3 Payload
20
Logitech Pairing Complete Payload
Field
Length
Description
Unused
1 byte
temporary ID, randomly generated by the pairing device
Frame Type
1 byte
Step
1 byte
??
6 bytes
bytes 1-2 of the potential crypto setup data sent by the device
Checksum
1 byte
Table 16: Logitech Pairing Complete Payload
6
Logitech G900
The Logitech G900 gaming mouse employs a protocol similar to Unifying, with several distinctions.
• No pairing support (mouse and dongle are permanently paired)
• Fewer and di↵erent RF channels
• More aggressive keepalive timeouts
The protocol and device behavior is otherwise the same as Unifying, and can be thought of as a permanently
paired Unifying dongle/device set.
Radio Conﬁguration
Channels (MHz)
2402, 2404, 2425, 2442, 2450, 2457, 2479, 2481
Data Rate
2Mbps (2MHz GFSK)
Address Length
5 bytes
CRC Length
2 bytes
ESB Payload Lengths
5, 10, 11, 22
Table 17: Logitech G900 radio conﬁguration
6.1
Vulnerabilities
6.1.1
Unencrypted Keystroke Injection (BN-0012)
The Logitech G900 includes functionality to transmit keystrokes in response to speciﬁc button clicks. When this
feature is used, the keystrokes are transmitted unencrypted, meaning that the dongle supports receiving unen-
crypted keystrokes.
Transmitting the following two packets to the RF address of a paired keyboard will generate a keypress of the let-
ter ’a’.
1
EA:E1:93:27:21
00:C1:00:04:00:00:00:00:00:3B
Unencrypted keypress packet with the HID scan code for ’a’ speciﬁed (04), transmitted from a malicious
device to a dongle at address EA:E1:93:27:21. Packet format is described in ﬁgure 6.
21
2
EA:E1:93:27:21
00:C1:00:00:00:00:00:00:00:3F
Unencrypted keypress packet with no HID scan codes speciﬁed (key release), transmitted from a malicious
device to a dongle at address EA:E1:93:27:21. Packet format is described in ﬁgure 6.
The second octet, 0xC1, indicates that this is a keyboard packet, and the fourth octet contains the keyboard scan
code. In this example, the ﬁrst packet represents the depressing the ’a’ key, and the second packet represents re-
leasing it. The ﬁnal octet in each packet is the checksum.
6.1.2
Malicious Macro Programming (BN-0016)
Using the Logitech Gaming Software, a user can customize their G900 mouse to trigger keystroke macros when-
ever they click a speciﬁed mouse button. The macros are stored on the mouse itself, and do not depend on any
software being installed on the host computer.
The communication between the mouse and dongle is unencrypted, making it possible for an attacker to program
arbitrary macros into the mouse. The G900 dongle communicates with the G900 mouse by attaching payloads
to ACK packets going from the dongle back to the mouse. In order to maliciously program a macro into a tar-
get mouse, an attacker can ACK packets transmitted by a mouse, attaching ACK payloads with the speciﬁc com-
mands.
The G900 macro programming works by ﬁrst transmitting data representing all of the available macro commands
to the mouse. Then, commands are transmitted to assign a speciﬁc macro to a speciﬁc mouse button.
The following exchange will program a macro to type the sequence ’abc’:
1
19:D3:AC:21:08
00 11 07 0E 6F 00 06 00 00 01 00 00 00 00 00 00 00 00 00 00 00 64
2
19:D3:AC:21:08
00 51 01 0E 6F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 31
3
19:D3:AC:21:08
00 11 07 0E 7F 43 00 04 44 00 04 43 00 05 44 00 05 43 00 06 44 AE
4
19:D3:AC:21:08
00 51 01 0E 7F 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20
5
19:D3:AC:21:08
00 11 07 0E 7F 00 06 FF FF FF FF FF FF FF FF FF FF FF FF FF FF 63
6
19:D3:AC:21:08
00 51 01 0E 7F 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1F
7
19:D3:AC:21:08
00 11 07 0E 7F FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF 6B
8
19:D3:AC:21:08
00 51 01 0E 7F 00 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1E
9
19:D3:AC:21:08
00 11 07 0E 7F FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF 6B
10
19:D3:AC:21:08
00 51 01 0E 7F 00 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1D
11
19:D3:AC:21:08
00 11 07 0E 7F FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF 6B
12
19:D3:AC:21:08
00 51 01 0E 7F 00 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1C
13
19:D3:AC:21:08
00 11 07 0E 7F FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF 6B
14
19:D3:AC:21:08
00 51 01 0E 7F 00 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1B