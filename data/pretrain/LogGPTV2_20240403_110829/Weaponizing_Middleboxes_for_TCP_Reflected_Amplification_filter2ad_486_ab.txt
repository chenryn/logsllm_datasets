like UDP [9] or TCP SYN-based [16] reﬂected ampliﬁcation
attacks—which take advantage of weaknesses in protocol
designs—we must ﬁnd weaknesses in TCP implementations.
Recent efforts have created automated ways to identify in-
put sequences that cause incorrect middlebox behavior [6,43].
In 2019, Bock et al. developed Geneva, an open-source au-
tomated tool for discovering packet manipulation sequences
(called “strategies”) to evade censorship [6]. Geneva uses a
genetic algorithm to evolve censorship-evasion techniques by
composing ﬁve packet-level actions: duplicate, tamper, frag-
ment, drop, and send. Over a series of discrete “generations,”
Geneva tests dozens of packet manipulation strategies directly
against real-world censors. Geneva evaluates strategies with a
ﬁtness function: a numeric score that captures how successful
a given strategy is at evading censorship. Strategies that re-
ceive a higher score are more likely to survive and pass their
“genetic code” to the next generation.
We make two modest changes to Geneva to ﬁnd new am-
pliﬁcation attacks against middleboxes:
Initial Packet Sequence Geneva operates by manipulating
an existing packet sequence, such as a real client’s packets
as it browses the web. To discover new ampliﬁcation attacks,
we use a single PSH+ACK packet with a well-formed HTTP
GET request with the Host: header set to a given URL (we
describe which URLs we use in §3.2). We chose HTTP as
USENIX Association
30th USENIX Security Symposium    3347
Strategy
(cid:104)SYN; PSH+ACK(cid:105)
(cid:104)SYN; PSH(cid:105)
PSH
PSH+ACK
SYN (with GET)
Response % Max Ampliﬁcation
69.5% 7,455×
24×
65.7%
14×
44.6%
21×
33.1%
572×
11.4%
Table 1: TCP-based reﬂected ampliﬁcation attacks discovered
against 184 Quack servers. Each packet with the PSH ﬂag set
includes an offending HTTP GET request in the payload.
and set the Host: header in the HTTP GET request to one of
the URLs that triggered interference to this IP address.
We let Geneva train for 10 generations with an initial popu-
lation of 1,000 randomly generated strategies3. Training took
approximately 25 minutes per IP address. To limit our im-
pact on the network, we spaced our experiments out over four
days; we sent each end-host just 2.8 Kbps of trafﬁc on average
(comparable to Quack’s scans).
Before each experiment, we repeated Quack’s methodol-
ogy to the destination IP address to conﬁrm it is still expe-
riencing interference, and we skipped IP addresses that we
did not experience interference. During our experiments, 25
of the 209 IP addresses (11.9%) stopped responding or no
longer experienced interference, consistent with the churn
rates seen in Quack’s original experiments [41]. This left 184
IP addresses with active censoring middleboxes that Geneva
trained against. Next, we present the packet sequences Geneva
discovered.
3.3 Discovered Ampliﬁcation Attacks
For 178 (96.7%) of the 184 IP addresses from the Quack
dataset, Geneva found at least one packet sequence that
elicited a response, and achieved an ampliﬁcation factor
greater than 1 for 169/178 (94.9%). Figure 2 shows the maxi-
mum ampliﬁcation factors we discovered across all of these
169 hosts. Some of the middleboxes provided high ampli-
ﬁcation factors: 17 (9.5%) had greater than 100×, and the
maximum ampliﬁcation factor was 7,455×.
We identify ﬁve unique packet sequences that elicit re-
sponses and ﬁve additional modiﬁcations to improve ampli-
ﬁcation factor. We summarize them in Table 1 and describe
them in turn below.
3.3.1 Amplifying Packet Sequences
(cid:104)SYN; PSH+ACK(cid:105) The most successful strategy we discov-
ered sends a SYN packet (with no payload) with sequence
number s, followed by a second PSH+ACK packet containing
sequence number s + 1 and the forbidden GET request. Al-
though this strategy comes at the cost of an entire additional
packet, we ﬁnd it to be highly effective at getting responses
3We forgo a full hyperparameter sweep to limit our impact on end hosts.
Figure 2: Rank order plot of maximum ampliﬁcation factor
from Quack-identiﬁed IP addresses. The maximum ampliﬁ-
cation factor was 7,455×.
the input trafﬁc because recent work demonstrated both how
widely deployed HTTP ﬁltering middleboxes are [31] and
that many HTTP censors inject large block pages in response
to small web requests [41].
Fitness Function Our goal is to ﬁnd packet sequences that
maximize ampliﬁcation from middleboxes. The straightfor-
ward approach would be to set the ﬁtness function to the
ampliﬁcation factor itself (number of bytes received divided
by the number of bytes sent). However, we found that this
sometimes encourages Geneva to try to elicit many small
(e.g., SYN+ACK) packets from the end-host, rather than larger
(e.g., block page) packets from middleboxes. To encourage
Geneva to elicit responses speciﬁcally from middleboxes, our
ﬁtness function is the ampliﬁcation factor, but ignoring all
incoming packets that have no application-level payload. This
optimization applies only to the ﬁtness function; we report on
all bytes sent and received in our results.
3.2 Training Methodology
Geneva trains on live networks, and thus requires destina-
tion IP addresses to train against. To identify destination IP
addresses that are likely to have middleboxes on the path
from our measurement machine to them, we use data from
Quack [41], a part of the Censored Planet [30] platform that
performs active measurements of censorship. Quack regularly
sends HTTP GET requests with potentially forbidden URLs
in the Host: header to echo servers around the world, and
detects injected censorship responses from middleboxes.
We use Quack’s daily reports [27] to ﬁnd endpoints that are
likely to have middleboxes on the path, and the URLs likely
to trigger them. We downloaded Quack’s March 28th, 2020
dataset and extracted the IP addresses that experienced HTTP
injection interference. This identiﬁed 209 IP addresses with
active censoring middleboxes on their path, along with the
offending URLs. We began training against them on March
29th.
To train Geneva with an IP address from Quack’s data, we
set the destination of the generated trafﬁc to the IP address,
3348    30th USENIX Security Symposium
USENIX Association
1101001,00010,000 0 20 40 60 80 100 120 140 160 180Amplification FactorIP Address Rankfrom middleboxes. It elicited responses from 128/184 (69.6%)
of the middleboxes, with a maximum ampliﬁcation factor of
7,455×.
From a middlebox’s perspective, this packet sequence
looks like a traditional TCP connection, missing the server’s
SYN+ACK and the client’s ACK. As with normal TCP connec-
tions, the sequence number of the SYN is one less than the
sequence number of the PSH+ACK. As discussed in §2, middle-
boxes must be resilient to asymmetric routes, so it is expected
that they would respond while missing the server’s SYN+ACK.
We note this sequence omits the client’s ACK in a typical
handshake, though the PSH+ACK may sufﬁce to replace it.
Geneva tried adding the client’s ACK, but eliminated it during
training—in follow-up experiments, we veriﬁed that adding
the ACK had no effect on how the middleboxes responded.
(cid:104)SYN; PSH(cid:105) This sequence sends a SYN with sequence num-
ber s (and no payload) followed by a PSH with sequence num-
ber s + 1 and the forbidden GET request as its payload. Note
that this is the same as the (cid:104)SYN; PSH+ACK(cid:105) strategy, but with
the ACK ﬂag cleared in the second packet.
(cid:104)SYN; PSH(cid:105) elicited responses from 121/184 (65.7%)
of middleboxes, with a maximum ampliﬁcation of 24×.
Most (118, or 97.5%) of these also responded to the
(cid:104)SYN; PSH+ACK(cid:105) sequence with the same ampliﬁcation fac-
tors: those middleboxes appear not to be sensitive to the pres-
ence of the ACK ﬂag on the packet containing the request.
However, 10 middleboxes responded only when the ACK ﬂag
was set and 3 middleboxes responded only when it was not.
We explore these differences more deeply with full IPv4 scans
in §5.
We also explored if an additional ACK packet between the
SYN packet and the PSH packet would improve response rate.
Like with the (cid:104)SYN; PSH+ACK(cid:105) sequence, we found it had no
effect on the middleboxes’ responses.
PSH This sequence sends only a single packet: a PSH with
the forbidden GET request. It elicited responses from 82
(44.6%) of middleboxes, with a maximum ampliﬁcation factor
of 14×. Note that this is the same as the (cid:104)SYN; PSH(cid:105) sequence,
without the SYN. All but one (98.8%) of the middleboxes
that responded to just the PSH also responded to (cid:104)SYN; PSH(cid:105),
indicating that the SYN was not necessary. For those hosts,
avoiding the SYN resulted in an increase in ampliﬁcation fac-
tor.
PSH+ACK This also sends a single packet: a PSH+ACK with
a forbidden GET request. No TCP-compliant host should re-
spond to this packet with anything besides an empty RST, as
there is no three-way handshake. Still, 61 (33.2%) middle-
boxes responded with injected responses, with a maximum
ampliﬁcation factor of 21×.
This strategy is identical to the (cid:104)SYN; PSH+ACK(cid:105) sequence,
minus the SYN packet. We ﬁnd that all of the middleboxes
that responded to a lone PSH+ACK also responded to the
(cid:104)SYN; PSH+ACK(cid:105), with the responses of the same size. For
those hosts, sending the additional SYN strictly decreases the
ampliﬁcation factor.
Most (51, or 83.6%) of the middleboxes that responded
to PSH+ACK also responded to PSH;
these middleboxes’
responses were the same for both strategies, indicating
no change in ampliﬁcation. 10 middleboxes responded to
PSH+ACK but not to PSH; these gave PSH+ACK its greatest am-
pliﬁcation factor. However, 31 middleboxes responded to PSH
but not PSH+ACK. Overall, PSH elicited more responses, but
PSH+ACK elicited larger ones.
SYN with Payload This strategy sends the forbidden GET
request as the payload of a single SYN packet. This elicited
the fewest responses—21 (11.4%) of the middleboxes—but
one of the largest ampliﬁcation factors: 527×.
It is not common to send payloads in SYN packets4, which
led us to hypothesize that the middleboxes that responded to
this might only be looking at the payloads. But this appears
not to be the case: only 3 (14.3%) of the middleboxes that
responded to SYN also responded to PSH+ACK, and only 6
(28.6%) also responded to PSH.
3.3.2 Packet Sequence Modiﬁcations
Geneva identiﬁed ﬁve additional modiﬁcations to the above
packet sequences that improve the ampliﬁcation factor for
some middleboxes. One of these (increasing TTLs) never
resulted in lower ampliﬁcations, and appear to be worth doing
against all middleboxes. Four improve ampliﬁcation for some
middleboxes but lower it for others; to use such modiﬁcations
in a practical setting, an attacker would ideally identify the
middleboxes it uses ahead of time.
Increased TTLs Every IP header includes a time-to-live
(TTL) ﬁeld to limit the number of hops a packet should take;
routers are supposed to decrement this at each hop, and drop
the packet if the TTL reaches zero. Against one middlebox,
Geneva learned to increase the TTL of both packets in the
(cid:104)SYN; PSH+ACK(cid:105) sequence to its maximum value (255) to
improve the ampliﬁcation factor. It is very surprising that the
TTL would have any impact on the ampliﬁcation factor; the
default TTL was already large enough to reach the destination.
To understand its root cause, we sent packet sequences to
this middlebox with TTLs ranging from 0 to 255, and counted
the number of responses for each. We ﬁnd a perfectly linear re-
lationship between TTL and ampliﬁcation factor: we received
t −13 block pages for all TTL values t ≥ 13. At the maximum
TTL value (255), it sent 242 copies of its block page!
This behavior can be explained by routing loops in the
network of the censoring middlebox. Each time the packet
sequence circles the routing loop, it re-crosses the censoring
middlebox, causing it to re-inject its block page. That this
only works for TTLs greater than 13 indicates that the routing
loop is 13 hops from our measurement host. We show in §5
4This is generally reserved for TCP Fast Open, which is rare in practice.
USENIX Association
30th USENIX Security Symposium    3349
that routing loops are surprisingly common on the Internet at
large, and they can be exploited by attackers for signiﬁcant
improvements to the ampliﬁcation factor.
We found that setting a high TTL on packets has no effect
on the response rate of any of the other packet sequences,
so this modiﬁcation can be made at no cost to freely exploit
routing loops for maximum ampliﬁcation.
Increased wscale Window scaling (or wscale) is a TCP
option that controls how large the TCP window can grow.
Geneva discovered an optimization that gets 7 (3.8%) more
middleboxes to respond to the (cid:104)SYN; PSH+ACK(cid:105) sequence:
setting the wscale TCP option in the SYN packet to an integer
greater than 12. Based on the block page these middleboxes
injected, we believe they are instances of Symantec’s Web
Gateway (SWG).
To understand this behavior, we sent the modiﬁed packet se-
quence 1,000 times to the candidate middleboxes in Quack’s
dataset, and repeated this experiment ﬁve times. Strangely,
in each case, the middleboxes responded only ∼25% of the
time. We could successfully ping the end-hosts behind each
SWG with innocuous requests, suggesting that packet drops
are not the root cause of the reduced response rate. Varying
the time between each packet sequence had no effect on the
response rate, indicating we were not overloading the SWGs.
The behavior is also not affected by packets sent by the end-
host: if we limit the TTL of all of our packets such that they
reach the middlebox but not the end-host, the middlebox still
injects content to 25% of requests. Finally, altering the actual
value of wscale had no effect on response rate. We do not
understand why SWG is sensitive to this option.
Like with increased TTLs, increasing wscale had no ad-
verse effect on response rates or sizes. However, because
wscale is a TCP option, it requires additional bytes, thereby
potentially lowering the ampliﬁcation factor.
TCP Segmentation One modiﬁcation Geneva identiﬁed
for some middleboxes is to simply segment the forbidden
GET request across multiple packets, either by adding an
additional packet to single-packet sequences, or across the
two packets in the (cid:104)SYN; PSH(cid:105) or (cid:104)SYN; PSH+ACK(cid:105) sequences.
Geneva discovered that 5/184 (2%) middleboxes would send
the block page a second time, once for each packet segment.
For these middleboxes, this serves as an optimization for the