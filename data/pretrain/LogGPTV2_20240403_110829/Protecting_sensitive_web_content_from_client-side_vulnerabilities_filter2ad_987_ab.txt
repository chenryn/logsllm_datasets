In this paper, we focus on providing two security guarantees on
integrity and
sensitive data processed in the client-side browser:
conﬁdentiality. Our design assumes that there are client-side vul-
nerabilities in web applications (including add-ons) and browsers,
but trusts the underlying OS, its windowing and graphics interfaces.
Our defenses preclude many vulnerabilities (outlined above) from
corrupting sensitive data or leaking unprotected sensitive data to
adversaries. For instance, attackers can exploit client-side vulner-
abilities to leak sensitive emails to remote adversaries. However,
1Gmail does not include external libraries and does not mix con-
tent from HTTP sites; nevertheless, several other web applications
we study in Section 4 include external libraries and mixed content,
which poses serious threat to sensitive information.
in our solution, those emails are in encrypted form and the decryp-
tion keys are inaccessible to attackers. Several attacks are outside
the scope of the guaranteed security properties; we discuss them in
Section 2.4.
2.2 CRYPTON: A New Abstraction
We introduce a new data protection abstraction called CRYPTON.
Conceptually, CRYPTONs are akin to classes in object-oriented lan-
guages, which encapsulate sensitive data together with the opera-
tions that can legitimately operate on it. CRYPTONs provide the
following 4 main capabilities.
Information isolation. We enable transparent isolation of sensi-
tive data from other data and code in web browsers. In our web-
mail example discussed earlier, the conﬁdentiality of the sensitive
corporate emails must be maintained by authenticated encryption.
Other examples include credit card numbers, contents of shopping
carts in e-commerce applications, user passwords in login pages,
payee accounts in online banking sites, and so on. Our assumption
is that preventing malicious code from running in the complex web
browser is not tractable; however, we aim to prevent unauthorized
leakage or tampering of sensitive data.
Controlled operations. If we isolate sensitive data from all com-
putation, it would severely disincentivize web applications from
outsourcing rich functionality to the client-side browser. There is a
trade-off between the information isolation guarantees and the rich-
ness of functionality that can operate on sensitive information. In
our webmail example, Alice should be able to use the webmail’s
interfaces on her corporate emails for reading, composing, format-
ting (conﬁguring fonts, colors, HTML formatting or alignments),
archiving, forwarding and so on. For practical usage, we aim to
allow such owner-speciﬁed operations to compute output from sen-
sitive data. However, such output must be protected from conﬁden-
tiality and integrity attacks by all other code in the browser, and
thus is encrypted by default. The data owner (e.g., the webmail
server) can also specify which operations reveal computed infor-
mation; however, we leave the design and choice of these functions
up to the owner. In this work, we make encryption possible on sim-
ple data types, such as strings and integers, to limit the TCB size
— of course, more complex data types (such as arrays, formatted
HTML) can still include encrypted data in them (see Section 3.4).
Certiﬁed user inputs. In this work, we focus on enabling users
to enter sensitive text strings via a trusted keyboard2. Speciﬁcally,
we provide a trusted path for user inputs between the OS keyboard
events and the trusted web application event handlers (speciﬁed as
CRYPTON functions), through the untrusted web browser. Our fo-
cus on keyboard events is guided by the observation that a signiﬁ-
cant fraction of sensitive data on the web pertains to user keyboard
inputs. In our webmail example, Alice signs in by using her pass-
word, composes a sensitive email by typing, and searches for key-
words also by using the keyboard.
Proof of impression. Malicious client-side code can attempt to
disable critical messages that are supposed to warn users of poten-
tial threats. For example, the webmail server may show a warn-
ing for emails suspected to be scams and banks may want to warn
of fraudulent activities. As another example, when the webmail
server detects suspicious login activities, such as simultaneous lo-
gins from different geolocations, it alerts users to change their pass-
words. Such messages are crucial, and may be helpful for users to
prevent attacks or to stop them at an early stage.
2Supporting trusted paths for other input devices, such as the
mouse, touch screen and stylus, is future work.
1313In this work, we focus on providing a “proof of impression” of
simple data types such as strings and byte streams. This includes
veriﬁable rendering of string content and bitmaps, during which
rendering of other untrusted content into the same region is tem-
porarily blocked for t seconds (t=3 by default) [36]. Such a guar-
antee is useful beyond the webmail example, such as online adver-
tisements (ads). Proof of impression can help advertisers that bill
publishers for ad impressions to disambiguate real ad impressions
from ad fraud with “laundered” trafﬁc [26].
2.3 Design Overview
Our design changes the monolithic trust model where web servers
trust the entire browser (including add-ons) and client-side appli-
cation code. In our design, developers encapsulate sensitive data,
such as corporate emails or bank statements, into CRYPTONs and
directly embed them in HTML documents. To enforce the security
guarantees and semantics of CRYPTONs, the web server trusts a
small, standalone engine at the client called the CRYPTON-KERNEL.
The CRYPTON-KERNEL executes outside the web browser and is
protected from a compromised browser by standard OS sandbox-
ing mechanisms, similar to those used by existing browsers such as
Google Chrome [56,57]. A CRYPTON-compliant web browser rec-
ognizes CRYPTONs during HTML document parsing and delegates
their handling to the CRYPTON-KERNEL, as detailed in Section 3.
The CRYPTON-KERNEL acts as a root-of-trust to protect sen-
sitive CRYPTONs at the client-side. Speciﬁcally, the CRYPTON-
KERNEL builds three trusted paths passing through the untrusted
browser: (a) a secure communication channel between the web
server and the CRYPTON-KERNEL, (b) a trusted path from the
CRYPTONs to the user’s screen (i.e., to the software rendering pixel
maps or the GPU display buffers), and (c) a trusted path between
the user’s keyboard inputs to CRYPTON functions that handle key-
board events. These trusted (data) paths run through the untrusted
browser code, reusing existing browser functionality. As we intro-
duce later, we use authenticated encryption to protect data on these
trusted paths [45].
Secure Channel to Server. At the start of a web session exchang-
ing sensitive data, the web server uses an HTTPS frontend to es-
tablish a secure channel with the trusted CRYPTON-KERNEL. This
secure channel enables the web server to share a session key set
K with the CRYPTON-KERNEL, used by both parties to encryp-
t/decrypt CRYPTONs in the session. To avoid bloating our TCB,
the CRYPTON-KERNEL delegates all network communication to
the untrusted browser. Thus, it is important to establish a secure
channel against man-in-the-middle attacks, in case the browser gets
compromised. We use the standard mutual SSL authentication pro-
tocol to establish this channel [28]. SSL certiﬁcate veriﬁcation for
server authentication is a common, backward-compatible mecha-
nisms for HTTPS sites today. To enable the server to authenticate
the CRYPTON-KERNEL’s certiﬁcate, we assume the CRYPTON-
KERNEL uses a certiﬁcate self-signed by an RSA private key stored
in the CRYPTON-KERNEL. The corresponding public key is up-
loaded by the user to the server via an out-of-band secure channel.
We discuss the potential usability challenges of this mechanism in
Section 3.5.
Secure Display. When being displayed to users, sensitive content,
such as corporate emails, must remain encrypted in the untrusted
browser until the ﬁnal rendering of the content. The CRYPTON-
KERNEL provides a trusted data path between the CRYPTON con-
tent received from the server to the GPU buffer [5], which ﬁnally
render bitmaps and pixels to the screen. This trusted path is im-
plemented as part of the CRYPTON-KERNEL. To maintain the
browser’s functionality, sensitive content must be given opaque ac-
cess to the untrusted browser, say for deciding the layout dimen-
sions or for storing them in the DOM or untrusted JavaScript heaps.
Hence, the CRYPTON-KERNEL encapsulates encrypted sensitive
content into opaque objects before passing them to the web browser.
These opaque objects (e.g. encrypted string class) allow the browser
to process sensitive data as opaque blobs of text, determine the
length of the underlying plaintext for layout, but do not permit any
malicious operation that would leak plaintext data. Opaque objects
are ﬁnally rendered by the CRYPTON-KERNEL using a “sandboxed
GPU buffer” mechanism [5], which enables it to ensure that sensi-
tive content is rendered on top for at least t seconds.
Trusted Path For User Input. For sensitive content generated at
the client, such as by user keyboard inputs, the CRYPTON-KERNEL
provides a trusted path between the OS keyboard events to the
CRYPTON functions designated to handle input events. To enable
it, the CRYPTON-KERNEL intercepts all keyboard events from the
OS, similar to Chrome’s sandboxing mechanism [5]. It uses opaque
string objects to establish the trusted data paths via the untrusted
browser code.
We expect the user Alice to recognize and enter sensitive key-
board inputs (e.g., passwords or email recipients in TO and CC
list) through the CRYPTON-enabled trusted path. To help users se-
curely interact on and across multiple CRYPTON-enabled sessions,
the CRYPTON-KERNEL displays two security indicators above the
untrusted browser UI. For distinguishing when her user inputs are
going to be encrypted (vs. when she is interacting with a non-
CRYPTON-enabled session), the CRYPTON-KERNEL displays a user-
selected secret image icon. This image icon indicates that the user’s
key events will be encrypted throughout the session. This indicator
informs users whether their sensitive keystrokes are going to be en-
crypted; we expect users to enter sensitive information only when
seeing the right image icon.
Second, the CRYPTON-KERNEL displays the URL of the web-
site whose keys are being used to encrypt the keystrokes, in a spe-
cial unspoofable URL bar above the browser chrome. This allows
Alice to distinguish between multiple CRYPTON sessions and iden-
tify to which of these sessions her present keystrokes are being de-
livered. This indicator informs the user of the intended recipient of
the encrypted keystrokes; users are expected to verify this URL in-
dicator and ensure that it is the right recipient for the sensitive data
they are about to enter.
Both UI indicators are securely rendered to the screen directly
by the CRYPTON-KERNEL and can not be overlaid by the attacker.
The CRYPTON-KERNEL does not allow the untrusted browser to
inject key sequences or read sensitive GPU buffers using standard
sandboxing techniques. We discuss more details in Section 3.
Assumptions. A CRYPTON-compliant server uses an HTTPS fron-
tend as the server-side interface to the CRYPTON-KERNEL. HTTPS
frontends often handle authentication and are commonly used for
load balancing, before delegating the session to backend server —
we believe our design can be deployed in existing HTTPS fron-
tends. CRYPTON-compliant servers default-deny access to pro-
tected sensitive content outside the secure channel established with
a trusted CRYPTON-KERNEL. Otherwise, this would incentivize
attackers to fool users into accessing the sensitive content over non-
CRYPTON-enabled sessions.
To protect the CRYPTON-KERNEL, our solution leverages OS
processes and system call sandboxing to isolate the untrusted browser
from the CRYPTON-KERNEL. Robust sandboxing mechanisms are
known and used by existing browsers such as Chrome [5]. For
additional protection, especially in emerging Web OS stacks [51,
55], hardware-assisted dynamic root of trust measurement (DRTM)
1314(such as those provided by Intel TXT [37, 52]) can be investigated
in the future to ensure dynamic code integrity of the CRYPTON-
KERNEL.
2.4 Out-of-scope Threats
Our focus is on providing the integrity and conﬁdentiality of
data. So, for example, our defenses cannot be used to protect
data used in server-side authorization such as CSRF tokens, ses-
sion cookies and authentication tokens (for single-sign on mecha-
nisms), as blocking these attacks require ensuring the authenticity
of the sender of sensitive data. Similarly, browser vulnerabilities
may be used to completely deny access to sensitive data (denial-
of-service); our defenses do not enforce data availability to the in-
tended recipient.
There are various attacks that can elicit sensitive information
from the user outside the trusted paths, say by confusing the user
with fake security indicators [39, 71], exploiting time-of-check-to-
time-of-use (TOCTTOU) windows in our security indicators, click-
jacking [3, 36], shoulder surﬁng or through social coercion [8]. We
recognize that these are important channels of information loss to
consider for guaranteeing end-to-end security; however, defenses
for these speciﬁc attacks are of independent interest [20, 58].
Moreover, we point out that our design requires developers to
carefully design CRYPTON functions to avoid direct data leakage
as well as side-channels via timing and control ﬂow, which are
declassiﬁcation interfaces to sensitive data. There are also well-
studied classes of attacks on information ﬂow and encryption sys-
tems [11, 15, 18]; tools to detect and minimize the capacity of side
channels are useful for developers [42].
3. DESIGN
We propose a novel solution with CRYPTON abstractions to pro-
tect sensitive data in an untrusted web browser. In this section, we
ﬁrst introduce the deﬁnition of the CRYPTON, which can be directly
programmed into web pages. Then we elaborate the design of the
CRYPTON-KERNEL, and security invariants it enforces.
3.1 CRYPTON Deﬁnition
More formally, we deﬁne a CRYPTON as a 5-tuple W =
The CRYPTON abstraction incorporates sensitive data protected
with integrity and conﬁdentiality, the operations permitted to de-
crypt and process the data, as well as the functional policy that
determines which keys to use for decrypting sensitive information
and for encrypting outputs.
( (cid:126)D, (cid:126)F,U,V,I). As deﬁned later, (cid:126)D is a sequence of informa-
tion blocks and (cid:126)F is a sequence of CRYPTON functions. U is the
web address URI of the CRYPTON-enabled web server, the HTTPS
frontend of the web server. The external veriﬁer V is the HTTPS
web URI for the proof-of-impression functionality, as we explain
shortly. I is a unique identiﬁer (ID) for the CRYPTON.
A CRYPTON W syntactically binds permitted operations and
sensitive data in its deﬁnition; this binding is signed by the SSL
public key corresponding to U and is veriﬁed and maintained by
the CRYPTON-KERNEL. When the CRYPTON-KERNEL ﬁrst pro-
cesses a CRYPTON, it communicates with U over a secure channel
and fetches a set of symmetric encryption keys K corresponding to
that speciﬁc CRYPTON. Note that CRYPTON keys K are not sent
as part of W, which would otherwise permit them to be read by
adversaries. The set K consists of a default encryption/decryption
key κ0, an HMAC key κhmac, and optionally other keys κ1, ..., κn,
for authenticated encryption using symmetric key ciphers (256-bit
AES-GCM). These keys are kept secret and known only to the
Figure 1: Overview of the CRYPTON-KERNEL, consisting of 4
components in gray, and the sandbox shown dashed.
CRYPTON-KERNEL; they are referenced by their key indices in
CRYPTON functions and information blocks as explained below.
Conceptually, each CRYPTON function Fi is a 3-tuple Fi =
(P,R, τF ). The syntactic deﬁnition of Fi binds tuple elements to-
gether; these bindings are signed to ensure their integrity. P : K ×
K is a set of policies deﬁned for each Fi over keys in K∪{⊥, κint
}, where ⊥ means public (no encryption)3, and κint is a CRYPTON-
KERNEL-speciﬁc key to protect user inputs, such as keystrokes.
Such a policy dictates how a CRYPTON function encrypts and de-
crypts sensitive data. A policy κ1 → κ2 for a function Fi indicates
that Fi decrypts sensitive data using the key κ1. Global or local
variables written during the function execution, arguments of calls
to the untrusted browser, as well as return values, are encrypted
with the key κ2. Policies are optional; the default policy enforced
is κ0 → κ0, i.e., decryption and encryption both with the default
key. We explain the semantics of the execution of each function
in detail in Section 3.4. R optionally lists the arguments to the
function and the return value. Finally, functions have a type ﬁeld
τF which separates 2 kinds of functions: (a) a proof-of-impression
(PoI) function that must be invoked to handle impression tokens,
and (b) all other functions. PoI functions compute encrypted mes-
sages over the nonce token and the impressions of sensitive mes-
sages and send them to the external veriﬁer V.
An information block is a 6-tuple Di = (I, κ,ID,A, τD,FD).
I and ID are identiﬁers for the owner CRYPTON and the informa-