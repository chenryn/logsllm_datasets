# COPYRIGHT Â©2006 McAfee Inc.
## Fuzzing XML-Based Protocols (SAML)
### Hacks-In-Taiwan 2006
**Yen-Ming Chen**  
Senior Principal Consultant  
Foundstone, A Division of McAfee

---

## Agenda
1. **Introduction**
   - SAML
   - OpenSAML
2. **Scenarios**
3. **Implementation**
4. **Conclusion**

---

## SAML
- **Security Assertion Markup Language (SAML)**
  - Developed by OASIS with contributions from MACE and others.
  - Defines XML schemas for authentication and attribute assertions, queries, responses, and use profiles such as Web Single Sign-On (SSO).
  - Specifies bindings to protocols for transport.
  - Version 2.0 expands on SAML and incorporates definitions from Shibboleth and the Liberty Alliance.

---

## SAML in a Nutshell
- An XML-based framework for exchanging security information:
  - **XML-encoded security assertions**
  - **XML-encoded request/response protocol**
  - **Rules for using assertions with standard transport and messaging frameworks**
- An OASIS standard (versions 1.0, 1.1, and 2.0):
  - Involvement from vendors and users.
  - OpenSAML implementation available.
  - Codifies existing system outputs rather than creating new technology.

---

## OpenSAML
- **OpenSAML** provides message and assertion formats, and protocol bindings based on Security Assertion Markup Language (SAML).
- **SAML** is a standard for the formation and exchange of authentication, attribute, and authorization data in XML format.
- **OpenSAML** is a set of open-source libraries in Java and C++ used to build, transport, and parse SAML messages.

---

## Technology
### Basic Concepts
- **Subject/Principal**: The user or application requesting access to a resource.
- **Assertion**: A set of statements about a subject.
- **Authority**: An entity that produces and/or consumes assertions.
- **Binding**: A specification for transporting assertions as protocol payloads.
- **Profile**: A specification describing rules for embedding, transferring, extracting, and processing assertions.

### Use Cases
- **Web Single Sign-On (SSO)**: A user logs into a source site and implicitly requests brokered logon to one or more destination sites with pre-existing trust relationships.
- **Authorization**: Once logged into trusted destinations via SSO, the user requests authorized access to various resources controlled by the destinations.
- **Back-Office Transactions**: A user attaches assertions to an electronic business document and transmits it to a relying party.

---

## SSO Use Case
```
Authenticate
Web User
Source
Web Site
Use Secured
Resource
Destination
Web Site
```

---

## Assertion
- **Statement Types**:
  - **Authentication Statement**
  - **Attribute Statement**
  - **Authorization Decision Statement**
- **Common Information**:
  - **Issuer and Issuance Timestamp**
  - **Assertion ID**
  - **Subject**: Name and security domain, with optional subject confirmation (e.g., public key).
  - **Conditions**: Validity conditions under which the assertion is valid.
  - **Advice**: Additional information, such as how the assertion was made.

---

## SAML Assertions
- **Types**:
  - **Authentication**: Declares that a subject was authenticated by a specific method at a given time.
  - **Attribute**: Provides attributes about a subject.
  - **Authorization Decision**: Indicates whether a subject is authorized to perform a specific action.
- **Extensibility**: You can create custom types of assertions.
- **Digital Signature**: Assertions can be digitally signed for security.

---

## SAML Message Exchange
- **SAML Requester** and **SAML Responder** within SAML-enabled entities (e.g., authentication authority, attribute authority, PDP, PEP).
- **SAML Request Message**: Specifies the type of assertion to be returned.
- **SAML Response Message**: Contains the requested assertion.
- **Security**: Messages can be digitally signed or sent over secure TLS channels.

---

## Binding with SOAP
- **SOAP Message Structure**:
  - **SOAP Header**
  - **SOAP Body**
  - **SAML Message** and **SAML Assertion** embedded within the SOAP body.

---

## SSO Pull Scenario
- **Authentication Authority** + **Attribute Authority**
- **Web User**
- **Source Web Site**
- **Destination Web Site**
- **Policy Decision Point (PDP) + Policy Enforcement Point (PEP)**
- **Steps**:
  1. Authenticate (out of band)
  2. Access inter-site transfer URL
  3. Redirect with artifact
  4. Get assertion consumer URL
  5. Request referenced assertion
  6. Supply referenced assertion
  7. Provide or refuse destination resource (out of band)

---

## Our Scenario
- **ACME.com** and **SiteB.com**

---

## Login
- **Request**:
  ```http
  POST https://www.acme.com/app/loginSubmit.jspx HTTP/1.1
  Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, */*
  Referer: https://www.acme.com/app/login.jspx
  Accept-Language: en-us
  Content-Type: application/x-www-form-urlencoded
  User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; .NET CLR 1.1.4322) Paros/3.2.10
  Host: www.acme.com
  Content-Length: 118
  Connection: Keep-Alive
  Cache-Control: no-cache
  referer=&userName=ymchen&password=ymchen&x=16&y=9
  ```

- **Response (Set-Cookie)**:
  ```http
  HTTP/1.1 302 Moved Temporarily
  Cache-Control: no-cache,no-store,max-age=0
  Pragma: No-cache
  Content-Type: text/html
  Expires: Thu, 01 Jan 1970 00:00:00 GMT
  Location: https://www.acme.com/app/welcome.jspx
  Set-Cookie: JSESSIONID=Gkfbl3YJ9MBdxzVLkRtPpXkYD6gMQkCQMCJVz3dYld7kPcdJG1LJ!239153226; path=/
  Date: Sat, 15 Jul 2006 23:17:15 GMT
  Connection: close
  ```

---

## Get SAML Assertion from ACME.com for SiteB
- **Request**:
  ```http
  GET https://www.acme.com/app/loginToSiteB.jspx HTTP/1.1
  Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, */*
  Cookie: CP=null*; JSESSIONID=Gkfbl3YJ9MBdxzVLkRtPpXkYD6gMQkCQMCJVz3dYld7kPcdJG1LJ!239153226
  User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; .NET CLR 1.1.4322) Paros/3.2.10
  Host: www.acme.com
  Connection: Keep-Alive
  Accept-Language: en-us
  Content-length: 0
  ```

- **Using ONLY JSESSIONID to get SAML Assertion**

---

## SAML Response
- **Header**
- **Digital Signature**:
  ```
  QNVCOOOsXzCDyl2mp6wZGhUBUCI=
  SgT0UDeIhUk2KYPk/N6TA2STerwDOTL/4paQ39odRhbngUwzfCizJwLCvZKHCqCwSY3btv9aj/kz1i0180VCnpMtytVR0UWWM8kzRf1AuPEB3gm5gCZkX1zp/UOnWyEkpdSRNGSquFilrMt9q7JoE7CqQjR1uDqdBwPsOGlmkcw=
  ```
- **Status**
- **Condition**: Valid for 5 minutes.
- **Subject**: `urn:oasis:names:tc:SAML:1.0:cm:bearer`
- **Attributes**: `123456789054321`

---

## Posting SAML Response
- **Request**:
  ```http
  POST https://www.siteb.com/actionb.dll?cmd=sson&pid=12345 HTTP/1.1
  Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, */*
  Referer: https://www.acme.com/app/loginToSiteB.jspx
  Content-Type: application/x-www-form-urlencoded
  Host: www.siteb.com
  Connection: Keep-Alive
  Cache-Control: no-cache
  SAMLResponse=
  ```

- **Response**:
  ```http
  HTTP/1.1 200 Ok
  Server: Microsoft-IIS/5.0
  Date: Thu, 29 Jun 2006 23:23:58 GMT
  P3P: policyref="/w3c/p3p.xml", CP="CAO DSP IND COR ADM CONo CUR CUSi DEV PSA PSD DELi OUR COM NAV PHY ONL PUR UNI"
  Connection: close
  Set-Cookie: RID=BLAHBLAH; path=/
  Content-Type: text/html
  Content-length: 12345
  ```

---

## Implementation
- **Read the XML File**:
  - Save the base64 decoded file as an XML file.
  - Use `System.XML` to read the XML file.
  - Determine NodeType (Element or Attribute).

- **Attack Patterns**:
  - Tested buffer overflow with patterns like 'Z' x 1024, 'Z' x 4096, or random data.
  - After generating the XML file, base64 encode it and generate an HTTP POST request.
  - File naming convention: `--.xml`, e.g., `ds:Signature-value-50k.xml`.
  - Covered 15 elements and their attributes, resulting in hundreds of test cases.

- **Issues**:
  - Determining results automatically by comparing HTTP response codes, content lengths, and checking for timeouts.
  - Look for anomalies by sending normal and test requests and comparing results.

- **Results**:
  - Found one buffer overflow where the program did not handle signature verification correctly.
  - Flawfinder identified 29 potential problems in OpenSAML.

---

## Future Works
- **Additional Attacks**:
  - XPATH Injection
  - XML memory corruption tests
  - Authorization tests
- **Correlation with Source Code Review**:
  - Prove or disprove flawfinder's results.
- **Unit Testing**:
  - Incorporate similar tests in unit testing, even earlier in Test-Driven Development (TDD).
- **Backend Process Testing**:
  - Extend testing to the backend processes.

---

## References
- **PROTOS**: [http://www.ee.oulu.fi/research/ouspg/protos/](http://www.ee.oulu.fi/research/ouspg/protos/)
- **SAML**: [http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=security](http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=security)
- **OPENSAML**: [http://www.opensaml.org/](http://www.opensaml.org/)

---

## Question & Answer
Thank you!

**Yen-Ming Chen**  
PI:EMAIL