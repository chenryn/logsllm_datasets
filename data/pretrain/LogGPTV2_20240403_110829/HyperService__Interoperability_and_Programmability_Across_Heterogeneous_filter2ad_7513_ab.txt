simple, yet elegant, it is, from developers’ perspective, to build a
universal call-option dApp that allows investors to natively exer-
cise options with the cryptocurrencies they prefer. The code snip-
pet shown in Figure 2 is the HSL implementation for the referred
dApp. In this dApp, both Option contracts deployed on blockchains
ChainY and ChainZ rely on the same Broker contract on ChainX to
provide the genuine strike price (lines 14 and 15 in Figure 2). Detailed
HSL grammar is given in Grammar 1.
2.3.2 HSL Program Compilation
The core of HyperService programming framework is the HSL
compiler. The compiler performs two major tasks: (i) enforcing
security and correctness checks on HSL programs and (ii) compiling
HSL programs into blockchain-executable transactions.
One of the key differentiations of HyperService is that it al-
lows dApps to natively define interactions and operations among
smart contracts deployed on heterogeneous blockchains. Since
these smart contracts could be written in different languages, HSL
provides a multi-language front end to analyze the source code
of those smart contracts. It extracts the type information of their
public state variables and functions, and then converts them into
the unified types defined by HSL (§ 3.1). This enables effective cor-
rectness checks on the HSL programs (§ 3.3). For instance, it ensures
that all the parameters used in a contract invocation operation are
compatible and verifiable, even if these arguments are extracted
from remote contracts written in languages different from that of
the invoking contract.
Once a HSL program passes the syntax and correctness checks,
the compiler will generate an executable for the program. The ex-
ecutable is structured in the form of a Transaction Dependency
Graph, which contains (i) the complete information for computing a
set of blockchain-executable transactions, (ii) the metadata of each
transaction needed for correct execution, and (iii) the preconditions
and deadlines of those transactions that honor the dependency
constraints specified in the HSL program (§ 3.4).
In HyperService, the Verifiable Execution Systems (VESes) are
the actual entities that own the HSL compiler and therefore re-
sume the aforementioned compiler responsibilities. Because of this,
VESes work as blockchain drivers that bridge our high-level pro-
gramming framework with the underlying blockchains. Each VES
is a distributed system providing trust-free service to compile and
execute HSL programs given by dApp clients. VESes are trust-free
because their actions taken during dApp executions are verifiable.
Each VES defines its own service model, including its reachabil-
ity (i.e., the set of blockchains that the VES supports), service fees
charged for correct executions, and insurance plans (i.e., the ex-
pected compensation to dApps if the VES’s execution is proven to
be incorrect). dApps have full autonomy to select VESes that satisfy
their requirements. In § 6.3, we lay out our visions for VESes.
Besides owning the HSL compiler, VESes also participate in the
actual executions of HSL executables, as discussed below.
2.4 Universal Inter-Blockchain Protocol (UIP)
To correctly execute a dApp, all the transactions in its executable
must be posted on blockchains for execution, and meanwhile their
preconditions and deadlines are honored. Although this executing
procedure is conceptually simple (thanks to the HSL abstraction),
it is very challenging to enforce correct executions in a fully trust-
free manner where (i) no trusted authority is allowed to coordinate
the executions on different blockchains and (ii) no mutual trust
between VESes and dApp clients are established.
To address this challenge, HyperService designs UIP, a cryptog-
raphy protocol between VESes and dApp clients to securely execute
HSL executables on blockchains. UIP can work on any blockchain
with public ledgers, imposing no additional requirements such as
their consensus protocols and contract execution environment. UIP
provides strong security guarantees for executing dApps such that
dApps are correctly executed only if the correctness is publicly ver-
ifiable by all stakeholders; otherwise, UIP holds the misbehaving
parties accountable, and financially reverts all committed transac-
tions to achieve financial atomicity.
UIP is powered by two innovative designs: the Network Status
Blockchain (NSB) and the Insurance Smart Contract (ISC). The NSB
is a blockchain designed by HyperService to provide objective and
unified views on the status of dApp executions. On the one hand,
the NSB consolidates the finalized transactions of all underlying
blockchains into Merkle trees, providing unified representations for
transaction status in form of verifiable Merkle proofs. On the other
hand, the NSB supports Proofs of Actions (PoAs), allowing both
dApp clients and VESes to construct proofs to certify their actions
taken during cross-chain executions. The ISC is a code-arbitrator. It
takes transaction-status proofs constructed from the NSB as input
to determine the correctness or violation of dApp executions, and
meanwhile uses action proofs to determine the accountable parities
in case of exceptions.
In § 4.6, we define the security properties of UIP via an ideal
functionality and then rigorously prove that UIP realizes the ideal
functionality in UC-framework [28].
2.5 Assumptions and Threat Model
We assume that the cryptographic primitives and the consensus pro-
tocol of all underlying blockchains are secure so that each of them
can have the concept of transaction finality. On Nakamoto consen-
sus based blockchains (typically permissionless), this is achieved by
assuming that the probability of blockchain reorganizations drops
exponentially as new blocks are appended (common-prefix prop-
erty) [35]. On Byzantine tolerance based blockchains (usually per-
missioned), finality is guaranteed by signatures from a quorum of
permissioned voting nodes. For a blockchain, if the NSB-proposed
definition of transaction finality for the blockchain is accepted by
users and dApps on HyperService, the operation (or trust) model
(e.g., permissionless or permissioned) and consensus efficiency (i.e.,
the latency for a transaction to become final) of the blockchain
have provably no impact on the security guarantees of our UIP
protocol. We also assume that each underlying blockchain has a
public ledger that allows external parties to examine and prove
transaction finality and the public state of smart contracts.
The correctness of UIP relies on the correctness of the NSB.
An example implementation of NSB is a permissioned blockchain,
where any information on NSB becomes legitimate only if a quo-
rum of consensus nodes that maintain the NSB have approved the
information. We thus assume that at least K consensus nodes of
the NSB are honest, where K is the quorum threshold (e.g., the
majority). In this design, an NSB node is not required to become
either a full or light node for any of the underlying blockchains.
We consider a Byzantine adversary that interferes with our UIP
protocol arbitrarily, including delaying and reordering network
messages indefinitely, and compromising protocol participants. As
long as at least one protocol participant is not compromised by the
adversary, the security properties of UIP are guaranteed.
3 PROGRAMMING FRAMEWORK
The design of the HyperService programming framework centers
around the HSL compiler. Figure 3 depicts the compilation work-
flow. The HSL compiler has two frond-ends: one for extracting
entities, operations, and dependencies from a HSL program and
one for extracting public state variables and methods from smart
contracts deployed on blockchains. A unified type system is de-
signed to ensure that smart contracts written in different languages
can be abstracted as interoperable entities defined in the HSL pro-
gram. Afterwards, the compiler performs semantic validations on
Table 2: Unified type mapping for Solidity, Vyper, and Go
Type
Boolean
Numeric
Go
bool
int, uint, uintptr, float
Solidity
bool
int, uint
Address
String
Array
Map
Struct
Function
Contract
address
string
array, bytes
mapping
struct
function, enum
Contract
Vyper
bool
int128, uint256, deci-
mal, unit type
address
string
array, bytes
map
struct
def
file
string
string
array, slice
map
struct
func
type
Figure 3: Workflow of HSL compilation.
all entities, operations and dependencies to ensure the security and
correctness of the HSL program. Finally, the compiler produces an
executable for the HSL program, which is structured in the form
of a transaction dependency graph. We next describe the details of
each component.
3.1 Unified Type System
The USM is designed to provide a unified virtualization layer for
developers to define invocation operations in their HSL programs,
without handling the heterogeneity of contract entities. Towards
this end, the programming framework internally defines a Unified
Type System so that state variables and methods of all contract
entities can be abstracted using the unified types when writing HSL
programs. This enables the HSL compiler to ensure that all argu-
ments specified in an invocation operation are compatible (§ 3.3).
Specifically, the unified type system defines nine elementary
types, as shown in Table 2. Data types that are commonly used in
smart contract programming languages will be mapped to these uni-
fied types during compilation. For example, Solidity does not fully
support fixed-point number, but Vyper (decimal) and Go (f loat)
do. Also, Vyper’s string is fixed-sized (declared via string[Inteдer]),
but Solidity’s string is dynamically-sized (declared as string). Our
multi-lang front-end recognizes these differences and performs
type conversion to map all the numeric literals including integers
and decimals to the Numeric type, and the strings to the Strinд
type. For types that are similar in Solidity, Vyper, and Go, such
as Boolean, Map, and Struct, we simply map them to the corre-
sponding types in our unified type system. Finally, Solidity and
Vyper provide special types for representing contract addresses,
which are mapped to the Address type. But Go does not provide a
type for contract addresses, and thus Go’s Strinд type is mapped
to the Address type. The mapping of language-specific types to
the unified type system is tabulated in Table 2. Our unified type
system is horizontally scalable to support additional strong-typed
programming languages. Note that the use of complex data types
as contract function parameters has not been fully supported yet
in production. We thus leave complex types in HSL to future work.
‘::’
‘=’
⟨chain_name⟩
⟨entity_name⟩
::= ⟨contract_type⟩ ‘(’ ⟨address⟩, (⟨unit⟩)? ‘)’
::= ‘account’ | ‘contract’
⟨hsl⟩
::= (⟨import⟩)+ (⟨entity_def ⟩)+ (⟨op_def ⟩)+ (⟨dep_def ⟩)*
Contract Imports:
⟨import⟩
::= ‘import’ ‘(’ ⟨file⟩ (‘,’ ⟨file⟩)* ‘)’
⟨file⟩
::= ⟨string⟩
Entity Definition:
⟨entity_def ⟩
::= ⟨entity_type⟩
⟨constructor⟩
⟨entity_name⟩ ::= ⟨id⟩
⟨chain_name⟩ ::= ‘Chain’ ⟨id⟩
⟨constructor⟩
⟨contract_type⟩ ::= ‘Account’ | ⟨id⟩
⟨entity_type⟩
Operation Definition:
::= ⟨op_payment⟩ | ⟨op_invocation⟩
⟨op_def ⟩
⟨op_payment⟩ ::= ‘op’ ⟨op_name⟩ ‘payment’ ⟨coin⟩ ⟨accts⟩ ⟨exchange⟩
::= ⟨id⟩
⟨op_name⟩
::= ⟨num⟩ ⟨unit⟩
⟨coin⟩
::= ‘from’ ⟨acct⟩ ‘to’ ⟨acct⟩
⟨accts⟩
::= ⟨id⟩
⟨acct⟩
⟨exchange⟩
::= ‘with’ ⟨coin⟩ ‘as’ ⟨coin⟩
⟨op_invocation⟩ ::= ‘op’ ⟨op_name⟩ ‘invocation’ ⟨call⟩ ‘using’ ⟨acct⟩
::= ⟨recv⟩ ‘.’ ⟨method⟩ ‘(’ (arg)*‘)’
⟨call⟩
⟨arg⟩
::= ⟨int⟩ | ⟨float⟩ | ⟨string⟩ | ⟨state_var⟩
::= ⟨varname⟩ ‘.’ ⟨prop⟩
⟨state_var⟩
Dependency Definition:
::= ⟨temp_deps⟩ | ⟨del_deps⟩
⟨dep_def ⟩
⟨temp_deps⟩
::= ⟨temp_dep⟩ (‘;’ ⟨temp_dep⟩)*
⟨temp_dep⟩
::= ⟨op_name⟩
⟨op_name⟩
(‘before’
⟨op_name⟩)*
::= ⟨del_dep⟩ (‘;’ ⟨del_dep⟩)*
⟨del_deps⟩
::= ⟨op_name⟩ (‘,’ ⟨op_name⟩)* ‘deadline’ ⟨del_spec⟩
⟨del_dep⟩
⟨del_spec⟩
::= ⟨int⟩ ‘blocks’| ‘default’ | ⟨int⟩ ⟨time_unit⟩
|
‘after’)
(‘,’
Grammar 1: Representative BNF grammar of HSL
3.2 HSL Language Design
The language constructs provided by HSL are coherent with USM,
allowing developers to straightforwardly specify entities, opera-
tions, and dependencies in HSL programs. One additional construct,
import, is added to import the source code of contract entities, as
discussed below. Grammar 1 shows the representative rules of HSL.
We omit the terminal symbols such as ⟨id⟩ and ⟨address⟩.
Contract Importing. Developers use the ⟨import⟩ rule to include
the source code of contract entities. Depending on the program-
ming language of an imported contract, HSL’s multi-lang front end
uses the corresponding parser to parse the source code, based on
which it performs semantic validation (§ 3.3). For security purpose,
the compiler should verify that the imported source code is consis-
tent with the actual deployed code on blockchain, for instance, by
comparing their compiled byte code.
Entity Definition. The ⟨entity_def⟩ rule specifies the definition of
an account or a contract entity. An entity is defined via constructor,
where the on-chain (⟨address⟩) of the entity is a required parameter.
An account entity can be initialized with an optional unit (⟨unit⟩) to
specify the cryptocurrency held by the account. All contract entities
must have the corresponding contract objects/classes in one of the
imported source code files. Each entity is assigned with a name
(⟨entity_name⟩) that can be used for defining operations.
HSLFront-EndUniﬁed TypesEntitiesOperationsDependenciesDependency ValidationOperation ValidationEntity ValidationHSL Front EndsHSLProgramMulti-languageFront-EndHSL Validation and Compilation…SolidityContractVyperContractGoContractTransaction CompilationTransaction Dependency GraphOperation Definition. The ⟨op_def⟩ rule specifies the definition
of a payment or an invocation operation. A payment operation