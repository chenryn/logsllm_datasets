a
c
5.5 Performance Overhead
Efficient Debloating.
On average, RAZOR takes 1.78
seconds to debloat CHISEL benchmarks, 8.51 seconds for de-
bloating Firefox, and 50.42 seconds to debloat FoxitReader
As a comparison, CHISEL has to spend one to 11 hours to
debloat the relatively small CHISEL benchmarks. Therefore,
RAZOR is a practical debloating tool.
Runtime Overhead. We measured the performance over-
head introduced by RAZOR to SPEC benchmarks and show
the result in Figure 13. On average, RAZOR introduces 1.70%
overhead to debloated programs, indicating its efficiency for
real-world deployment. The highest overhead occurs on the
debloated perlbench binary, which slows the execution by
16%. We inspected the debloated programs and confirmed
that the indirect call concretization is the main source of the
performance overhead. With the indirect call concretization,
one indirect call instruction is replaced by several comparison
and direct calls. For perlbench, some indirect call instruc-
tions have more than 100 targets. Correspondingly, RAZOR
introduces a large number of if-else there, leading to a high
performance overhead. We deployed the frequency-based
optimization and reduced the overhead from over 100% to the
current 16%. We plan to use binary search to replace current
one-by-one matching in order to further reduce the overhead.
5.6 Debloating Real-world Programs
To evaluate the practicality, we used RAZOR to debloat
two widely used software programs – the web browser
Firefox and the closed-sourced PDF reader FoxitReader.
For Firefox, we ran RAZOR to load the top 50 Alexa web-
sites [28]. We randomly picked 25 websites as the training
inputs and used the other 25 websites as the testing inputs.
For FoxitReader, we ran RAZOR to open and scroll 55 dif-
ferent PDF files that contain tables, figures, and JavaScript
code. We randomly picked 15 of them as the training inputs
and used the other 40 files as the testing inputs.
Code reduction and functionality. Table 4 shows the code
reduction rate and the number of failed cases of debloated
binaries with different path-finding heuristics. Both Firefox
1744    28th USENIX Security Symposium
USENIX Association
Heuristic
none
zCode
zCall
zLib
zFunc
FireFox
crash-sites
reduction
FoxitReader
crash-PDFs
reduction
13
13
2
0
0
67.6%
68.0%
63.1%
60.1%
60.0%
39
10
5
0
0
89.8%
89.9%
89.4%
87.0%
87.0%
Table 4: Debloating Firefox and FoxitReader with RAZOR, to-
gether with diffferent path-finding heuristics.
and FoxitReader require at least the zLib heuristic to obtain
crash-free binaries, with 60.1% and 87.0% code reduction,
respectively. Without heuristics, Firefox fails on 13 out of
25 websites and FoxitReader fails on 39 out of 40 PDF files.
The zCode heuristic helps reduce FoxitReader crashes to 10
PDF files and increases the code reduction by avoiding fault-
handling instrumentation. The zLib and the zFunc heuristic
eliminate all crashes. Compared with the non-heuristic de-
bloating, the zLib heuristic only decreases the code reduc-
tion rate by 7.5% for Firefox and by 2.8% for FoxitReader.
Therefore, it is worth using this heuristic to generate robust
binaries.
Performance overhead. We ran the debloated Firefox
(with zLib) on several benchmarks and found that RAZOR
introduces −2.1%, 1.6%, 0%, and 2.1% overhead to Octane
[33], SunSpider [34], Dromaeo-JS [30], and Dromaeo-DOM
[29] benchmarks. For FoxitReader, we did not find any
standard benchmark to test the performance. Instead, we used
the debloated binaries to open and scroll the testing PDF files
and did not find any noticeable slowdown.
Application – per-site browser isolation. As one applica-
tion of browser debloating, we can create minimal versions
that support particular websites, effectively achieving per-site
isolation [38, 21, 48] . For example, the bank can provide its
clients a minimal browser that only supports functionalities
required by its website while exposing the least attack surface.
To measure the benefit of the per-site browser, we applied RA-
ZOR on three sets of popular and security-sensitive websites:
banking websites, websites for electronic commerce, and so-
cial media websites. Table 6 shows the debloating result, the
used path-finding heuristic and the security benefits over the
general debloating in Table 4. As we can see, the banking
websites can benefit with at least 5.0% code reduction for
the per-site minimal browser. The E-commerce websites will
have around 3.0% extra code reduction, a little less because of
its high requirement on user interactions. Surprisingly, social
media websites can benefit by up to 8.5% extra code reduc-
tion and at least 4.2% when supporting all three websites. We
believe the minimal web browser through binary debloating
is a practical solution for improving web security.
Train/Test
20/30
25/25
ID
T10
T11
T12
T13
T14
T15
T16
T17
T18
T19
T00
T01
T02
T03
T04
T05
T06
T07
T08
T09
#Failed
Reduction
1
0
1
1
1
1
2
1
1
2
0
2
2
2
0
1
0
0
2
0
59.3%
59.3%
59.3%
59.3%
59.3%
59.5%
59.5%
59.3%
59.3%
59.6%
59.3%
59.1%
59.3%
59.1%
59.2%
59.1%
59.2%
59.1%
59.3%
59.1%
failed websites
wordpress.com
wordpress.com
twitch.tv
wordpress.com
wordpress.com
twitch.tv, wordpress.com
twitch.tv
twitch.tv
wordpress.com, twitch.tv
wordpress.com, twitch.tv
wordpress.com, twitch.tv
wordpress.com, twitch.tv
aliexpress.com
wordpress.com, twitch.tv
Table 5: N-fold validation of zLib heuristic on Firefox. First, we
randomly split Alexa’s Top 50 websites into five groups, and select
two groups (20 websites) as the training set and others (30 websites)
as the test set for 10 times. Second, we randomly split the 50 website
into 10 groups, and select five groups (25 websites) as the training
set, and others (25 websites) as the test set for 10 times.
5.6.1 N-fold Cross Validation of Heuristics
To further evaluate the effectiveness of our heuristics, we
conducted N-fold cross validation on Firefox with the zLib
heuristic, as it is the least aggressive heuristic that renders
Firefox crash-free.We performed two sets of evaluations and
show the result in Table 5. First, we randomly split Alexa’s
Top 50 websites into five groups, 10 websites per group.
We picked two groups (20 websites) for training and used
the remaining 30 websites for testing. We performed this
evaluation 10 times. The result in the table shows that during
one test with ID T11, the debloated Firefox successfully
loads and renders 30 testing websites. The debloated Firefox
fails two websites (6.7%) seven times and fails one website
(3.3%) two times. Second, we randomly split Alexa’s Top
50 websites into 10 groups, five websites per group. We
randomly picked five groups (25 websites) for training and
used the others (25 websites) for testing. We performed this
evaluation 10 times. The result shows that, in five times, the
debloated Firefox loads and successfully renders the tested
25 websites. The debloated Firefox fails one (4%) website
one time and fails two websites (8%) four times. The code
size reduction is consistently round 60%. These results show
that our heuristics are effective for inferring non-executed
code with similar functionalities of training inputs. Among all
the tests, only three websites trigger additional code and the
program gracefully exits with warning information. We plan
to check these websites to understand the failure reasons.
We also manually checked what code of Firefox
USENIX Association
28th USENIX Security Symposium    1745
Type
Banking
E-commerce
Social Media
Site
bankofamerica.com
chase.com
wellsfargo.com
all-3
amazon.com
ebay.com
ikea.com
all-3
facebook.com
instagram.com
twitter.com
all-3
Reduction Heuristic Benefits
+6.3%
+6.5%
+5.7%
+5.0%
69.4%
69.6%
68.8%
68.1%
zCall
zCall
zCall
zCall
71.4%
70.7%
70.6%
70.4%
70.8%
71.6%
74.0%
71.8%
none
none
none
none
zCall
zCall
none
none
+3.8%
+3.1%
+3.0%
+2.8%
+7.7%
+8.5%
+6.4%
+4.2%
Table 6: Per-site browser debloating
was removed. We find that code related to features
such as record/replay, integer/string conversion, compres-
sion/decompression are removed.
6 Discussions
Best-effort path inference. Mapping high-level functionali-
ties to low-level code is known to be challenging, especially
when source code is unavailable. RAZOR empirically adopts
control-flow-based heuristics to infer more related-code with
its best effort. We understand that such a heuristic cannot
guarantee the completeness or soundness of the path infer-
ence, and the debloated binary may miss necessary code (i.e.,
code for handling different environment variables) or include
unnecessary ones (like some initialization code). However,
we noticed that the heuristic-based method has been widely
used in binary analysis and rewriting [53, 52]. With the exe-
cution trace, RAZOR is able to mitigate some limitations of
these works, such as finding indirect call targets. Further, the
evaluation result demonstrates that our control-flow-based
heuristics are practically effective.
CFI and debloating. Control-flow integrity (CFI) enforces
that each indirect control-flow transfer (i.e., indirect call/jump
and return) goes to legitimate targets [1]. It prevents malicious
behaviors that are unexpected by program developers. In con-
trast, software debloating removes benign-but-unnecessary
code based on users’ requirements. For example, if function
A is designed to be a legitimate target of an indirect call i,
CFI will allow the transfer from i to A. However, if the user
does not need the functionality in A, software debloating will
disable the transfer and completely remove the function code.
In fact, CFI and debloating are complementary to each other.
On the one hand, debloating achieves a coarse-grained CFI
where an attacker can only divert the control-flow to remain-
ing code. It also simplifies the analysis required by some CFI
works [50, 37] because of a smaller code base. On the other
hand, existing CFI works provide fundamental platforms for
enforcing debloating. For example, RAZOR makes use of
several binary analysis techniques developed in binCFI [53]
for optimization.
Library debloating. We tried to use RAZOR to debloat sys-
tem libraries for each program. Our tool works well on some
libraries (e.g., libm.so and libgcc.so), but fails on others.
For example, the debloated libc.so triggers a different exe-
cution path even if we aggressively include more related-code
with the zFunc heuristic. After inspecting the failure cases on
libc.so, we found that its execution path is very sensitive to
the change of the execution environment. One reason is that
libc.so contains a lot of highly optimized code for memory
or string operations (e.g., memcmp), which, based on the argu-
ment value, choose the most efficient implementation. For
example, function strncmp implements 16 different subrou-
tines to process strings with different alignments. Another
reason is that it performs different executions according to
the process status. For example, for each memory allocation,
malloc searches a set of cached chunks and picks up the first
available one. Inputs with different sizes may cause malloc
to walk through a complete non-executed path. From such a
preliminary result, we plan to develop library-specific heuris-
tics to handle environment-sensitive executions. For example,
we can perform debloating on the function level instead of
the current basic block level. We also plan to explore existing
library debloating solutions that work on source code [40]
and port them into binaries if necessary.
Removing original code.
The current design of RAZOR
keeps the original code section inside the debloated program
and changes its permission to read-only to reduce the attack
surface. This design simplifies the handling of potential data
inside the code section, which the program may read for
special purposes. For example, LLVM will emit jump tables
in the code section to support efficient switch statements [11],
and the indirect jump instruction will obtain its targets by
reading the table. To further reduce the program size and
memory usage, we can completely remove the original code
section as follows: 1) during the execution tracing, we set
the original code section to execute-only [11] so that any
read from the code section will trigger the exception and
can be logged by Tracer; 2) we perform backward data-flow
analysis to identify the source of the data pointer used for each
logged memory access; 3) during the binary synthesization,
we relocate the data from the original code section to a new
data section and update the new code to visit the new location.
In this way, we are able to handle the challenging problem of
data relocation during binary rewriting. In fact, we performed
a study to understand the prevalence of these problems and
found that for all the programs tested in the paper, none of
them ever reads any data from the code section, given the
test cases we used. In these cases, we can simply remove the
original code section to minimize the file size and memory
footprint.
Future work. We will release the source code of RAZOR.
We plan to extend the platform to support binaries in more
1746    28th USENIX Security Symposium
USENIX Association
formats and architectures, including shared libraries, 32-bit
binaries, Windows PE programs, MacOS March-O programs,
and ARM binaries. At the same time, we will design more
security-related heuristics to make RAZOR support various
real-world situations.
7 Related Work
Library debloating.