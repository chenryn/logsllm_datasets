### Network and Web Defense Strategies

#### Network Defense
Effective network defense involves multiple layers of security, including:

- **Internet Service Provider (ISP)**
  - ISPs often have mixed capabilities for defending against DDoS attacks.
  - They can blacklist malicious IP addresses.
  - They can limit the number of packets, sessions, or bandwidth per second per IP.
  - They can blackhole specific protocols or ports (e.g., discarding traffic from UDP floods).

- **Intrusion Prevention Systems (IPS)**
  - IPS rules are ideal for dropping Layer 7 DDoS traffic before it reaches the web server.
  - For example, Snort can be used inline to drop such traffic.

- **Load Balancers (e.g., F5)**
  - iRules can be used to drop traffic and mitigate many Layer 7 DDoS attacks.

- **Firewalls (e.g., iptables)**
  - Firewalls can blacklist malicious IP addresses.
  - They can also limit the number of packets, sessions, or bandwidth per second per IP.

- **Geographic and Type-Based Blacklists**
  - These can be useful or useless depending on the adversaries.
  - For example, SX blacklists egihosting.com.

#### Network Defense Examples

- **Blocking VoxLulz1 with Snort Inline**
  ```snort
  drop tcp $EXTERNAL_NET any -> $HOME_NET $HTTP_PORTS (msg:"HTTP VoxLulz UA detected";  
  flow:to_server,established; 
  content:"User-Agent|3A 20|Fuck You motherfucker - TANGO DOWN (+http|3A|//twitter.com/VoXLulz1"; 
  http_header; fast_pattern:only; 
  reference:url,soldierx.com/defcon22/dont_ddos_me_bro-blake_cisc0ninja.ppt; 
  classtype:web-application-attack; sid:x; rev:1;)
  ```

- **Blocking VoxLulz1 with F5 iRules**
  ```tcl
  when HTTP_REQUEST {
      if {([HTTP::header "User-Agent"] matches "Fuck You motherfucker - TANGO DOWN (+http://twitter.com/
  VoXLulz1")}  {
          log local0. "HTTP VoxLulz UA detected [IP::client_addr]"
          drop
      }
  }
  ```

- **Blocking VoxLulz1 via egihosting.com Block**
  ```bash
  root@shinra:/# iptables -A INPUT -s 68.68.96.0/24 -j DROP
  ```

- **Limiting Connections with iptables**
  ```bash
  # Block IPs that do > 20 connections in 10 minutes:
  iptables -I INPUT -p tcp --dport 80 -i eth0 -m state --state NEW -m recent --set
  iptables -I INPUT -p tcp --dport 80 -i eth0 -m state --state NEW -m recent --update --seconds 600 --hitcount 20 -j DROP
  ```

- **Blocking TOR**
  - TOR can be a significant source of attacks. For example, it took hack3r.com offline.
  - Blocking TOR may be necessary for certain sites, such as shopping or banking sites.
  - Example script to block TOR exit nodes:
    ```bash
    #!/bin/bash
    IPTABLES_TARGET="DROP"
    IPTABLES_CHAINNAME="TOR"
    if ! iptables -L TOR -n >/dev/null 2>&1 ; then
        iptables -N TOR >/dev/null 2>&1
        iptables -A INPUT -p tcp -j TOR 2>&1
    fi
    cd /tmp/
    echo -e "\n\tGetting TOR node list from dan.me.uk\n"
    wget -q -O - "https://www.dan.me.uk/torlist/" -U SXTorBlocker/1.0 > /tmp/full.tor
    sed -i 's|^#.*$||g' /tmp/full.tor
    iptables -F TOR
    CMD=$(cat /tmp/full.tor | uniq | sort)
    for IP in $CMD; do
        let COUNT=COUNT+1
        iptables -A TOR -s $IP -j DROP
    done
    iptables -A TOR -j RETURN
    echo -e "\n\tiptables is now blocking TOR connections\n"
    rm /tmp/full.tor
    ```

#### Network Monitoring

- **Intrusion Detection Systems (IDS)**
  - IDS rules can be used for detection instead of blocking.
  - Example Snort rule:
    ```snort
    alert tcp $EXTERNAL_NET any -> $HOME_NET $HTTP_PORTS (msg:"HTTP VoxLulz UA detected";  
    flow:to_server,established; 
    content:"User-Agent|3A 20|Fuck You motherfucker - TANGO DOWN (+http|3A|//twitter.com/VoXLulz1"; 
    http_header; fast_pattern:only; 
    reference:url,soldierx.com/defcon22/dont_ddos_me_bro-blake_cisc0ninja.ppt; 
    classtype:web-application-attack; sid:x; rev:1;)
    ```

- **Load Balancers (e.g., F5)**
  - iRules can be used to log traffic of many Layer 7 DDoS attacks.
  ```tcl
  when HTTP_REQUEST {
      if {([HTTP::header "User-Agent"] matches "Fuck You motherfucker - TANGO DOWN (+http://twitter.com/
  VoXLulz1")}  {
          log local0. "HTTP VoxLulz UA detected [IP::client_addr]"
      }
  }
  ```

- **Monitoring Software (e.g., RoboAmp)**
  - Runs on a Raspberry Pi.
  - Usage example:
    ```bash
    ./RoboAmp -d -u https://www.soldierx.com/admin -s 'Site off-line' -g PI:EMAIL -t 120
    ./RoboAmp -p -u http://www.soldierx.com -g PI:EMAIL -t 300
    ```

#### Web Defense

- **Apache2 Configuration**
  - We will focus on Apache2, but many techniques are applicable to other web servers.
  - **.htaccess**
    - Protect files and directory listings.
    - Block user agents.
    - Redirect bad requests/user agents back to themselves or to a site like fbi.gov.
  - **mod_evasive**
    - Creates an internal dynamic hash table of IP addresses and URIs.
    - Limits the number of requests per file and overall site requests per time interval.
    - Returns 403 for the blocking period and can run a system command.
    - Notifies via email when attacks occur.
    - Increases attacker costs.

- **Web Defense – Know Your Enemy**
  - These methods have worked well for SX and others because they drive up the cost and complexity for attackers.

- **Web Defense – Apache2 Examples**

  - **.htaccess to Block User Agents**
    ```apache
    SetEnvIf User-Agent ".*Fuck.*" Skid=1
    Deny from env=Skid
    ```

  - **.htaccess + mod_rewrite to Redirect User Agents**
    ```apache
    RewriteCond %{HTTP_USER_AGENT} ^.*Fuck.*$
    RewriteRule .* http://%{REMOTE_ADDR}/ [R,L]
    ```

  - **.htaccess + mod_rewrite to Redirect to FBI**
    ```apache
    RewriteCond %{HTTP_USER_AGENT} ^.*Fuck.*$
    RewriteRule .* http://www.fbi.gov/ [R,L]
    ```

By implementing these strategies, you can significantly enhance the security and resilience of your network and web infrastructure.