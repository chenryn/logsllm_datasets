对比Shiro 1.5.1与Shiro 1.5.2版本的改动
由于Shiro
1.5.2版本中，在进行decodeAndCleanUriString方法之前会先进行uri解析，调用request.getServletPath()和request.getPathInfo()获取ServletPath
和PathInfo 并进行路径拼接，避开了decodeAndCleanUriString对于分号的处理，从而修复了此漏洞。
#### 4.2.2 Apache Shiro 身份验证绕过漏洞
**1.漏洞信息**
**1.1 漏洞简介**
  * 漏洞名称：Apache Shiro Authentication Bypass Vulnerability
  * 漏洞编号：CVE-2020-11989
  * 漏洞类型：Authentication Bypass
  * CVSS评分：【CVSS v2.0：7.5】【CVSS v3.1：9.8】
  * 漏洞危害等级：高危
**1.2 漏洞概述**
Apache Shiro
1.5.3之前的版本，由于Shiro拦截器与requestURI的匹配流程与Web框架的拦截器的匹配流程有差异，攻击者构造一个特殊的http请求，可以绕过Shiro的认证，未授权访问敏感路径。此漏洞存在两种攻击方式。
**1.3 漏洞利用条件**
**First Attack**
  * 无
**Second Attack**
  * 应用不能部署在根目录（1.5.1 
**2.漏洞复现**
**2.1 环境拓扑**
**2.2 应用协议**
8080/HTTP
**2.3 复现过程**
基于Windows平台，使用`环境`目录下的`shiro-basic.zip`环境，解压后，用Idea打开shiro-basic文件夹，下载maven资源，运行ShiroBasicApplication类，即可启动环境。效果如图。
**First Attack**  
构造HTTP请求，发送到服务器，完成身份验证绕过，效果如图
**Second Attack**  
构造HTTP请求，发送到服务器，完成身份验证绕过，效果如图
**3.漏洞分析**
**3.1 详细分析**
**3.1.1 漏洞利用过程**
**First Attack**  
获取到无权限访问的敏感路径，在authc认证路径后添加`%25%32%66`进行身份验证绕过。
**Second Attack**  
获取到无权限访问的敏感路径，在路径的头部添加`/;/`进行身份验证绕过。
**3.1.2 代码分析**
**First Attack**  
传入的payload首先被服务器接收，并传送给Shiro拦截器处理(org.apache.shiro.web.servlet.OncePerRequestFilter#doFilter方法作为入口)。  
调用createSubject方法创建Subject，并调用execute方法进入Shiro FilterChain中。
进入org.apache.shiro.web.filter.mgt.PathMatchingFilterChainResolver#getChain方法中，首先获取请求uri路径。
在Shiro1.5.2版本中，对于requestURI处理的方式存在一些不同，此处也是漏洞触发点所在。Shiro1.5.2使用的是request.getContextPath()，request.getServletPath()，request.getPathInfo()拼接的方式。由于getServletPath()方法会对requestURI进行一次url解码，在之后的decodeAndCleanUriString方法中进行第二次url解码。
回到getChain方法中，迭代获取拦截器的表达式。
这里重点关注`/hello/*`表达式。代码进入pathMatches方法，最终调用org.apache.shiro.util.AntPathMatcher#doMatch方法进行传入的requestURI与拦截器表达式进行匹配。
匹配过程中，分别将拦截器表达式与requestURI以`/`作为分隔符进行字符串到数组的转换，通过循环匹配数组中对应的元素，判断requestURI是否符合拦截器表达式匹配形式。
如果表达式中存在通配符`*`，会将containsStar标志位赋值为true，进入 `else if (patIdxEnd ==
0)`判断条件，返回true。
最终回到doMatch方法中，通过判断表达式数组的元素个数与requestURI的元素个数，以及表达式中是否包含`**`，完成后续的匹配。
跟进到Spring处理URI的代码，进入org.springframework.web.servlet.handler.AbstractHandlerMethodMapping#getHandlerInternal方法，获取requestURI。由于Spring获取requestURI时使用getRequestURI()方法，此方法不会进行URL解码。只会在decodeAndCleanUriString完成一次url解码。
进入lookupHandlerMethod方法，调用addMatchingMappings方法，获取Spring拦截器。
进入org.springframework.web.servlet.mvc.condition.PatternsRequestCondition#getMatchingCondition方法调用doMatch方法进行requestURI和拦截器表达式的匹配。
Spring拦截器匹配流程和Shiro大致相同，同样是将字符串转换为数组进行匹配。
由于Spring只进行了一次URL解码，所以将未完全解码的部分作为一个整体，从而完成了拦截器表达式与requestURI的匹配。
**Second Attack**  
漏洞触发点同样是Shiro在修复CVE-2020-1957漏洞时，使用request.getContextPath()，request.getServletPath()，request.getPathInfo()拼接的方式，进行requestURI的获取。  
直接跟踪到`uri = valueOrEmpty(request.getContextPath()) + "/" +
valueOrEmpty(request.getServletPath()) + valueOrEmpty(request.getPathInfo());`
在调用getContextPath()方法获取context-path时，会调用removePathParameter方法清除掉分号以及分号到下一个/中间的数据。
接下来进入for循环中匹配candidate与conotext-path是否相同
如果不同，则从传入的URL中继续读取下一级目录，直到condidate与context-path相同，返回从URL截取的目录作为contextPath。由于context-path获取方式和removePathparameters方法对URL的处理，攻击者可以请求，让contextPath变量获取到带有分号的非预期值。
在进行requestURI拼接时，构造出根路径带有分号的requestURI。利用CVE-2020-1957漏洞原理，经过decodeAndCleanUriString方法时，截断reqeustURI中分号后的数据，并返回。从而绕过了shiro权限控制。
**3.1.3 漏洞触发过程**
**First Attack**
**Second Attack**
**3.2.4补丁分析**
对比Shiro 1.5.2与Shiro
1.5.3版本的改动，在org.apache.shiro.web.util.WebUtils类中添加了删除requestURI结尾的`/`的代码。
补丁主要优化了getPathWithinApplication方法，并单独定义了getServletPath方法，getPathInfo方法。补丁修复后，调用getPathWithinApplication方法获取requestURI只会在进行getServletPath方法中进行一次url解码，保持与Spring获取requestURI过程中相同的url解码次数。防御了双重url编码绕过。
获取requestURI直接调用getServletPath方法和getPathInfo方法进行拼接，由于不需要与contextpath拼接，从而防御了First
Attack攻击。
#### 4.2.3 Apache Shiro 身份验证绕过漏洞
**1.漏洞信息**
**1.1 漏洞简介**
  * 漏洞名称：Apache Shiro Authentication Bypass Vulnerability
  * 漏洞编号：CVE-2020-13933
  * 漏洞类型：身份验证绕过
  * CVSS评分：【CVSS v2.0：5.0】【CVSS v3.1：7.5】
  * 漏洞危害等级：高危
**1.2 漏洞概述**
Apache Shiro
1.6.0之前的版本，由于Shiro拦截器与requestURI的匹配流程与Web框架的拦截器的匹配流程有差异，攻击者构造一个特殊的http请求，可以绕过Shiro的认证，未授权访问敏感路径。
**1.3 漏洞利用条件**
  * 无
**1.4 漏洞影响**
影响版本：  
Apache Shiro 
**2.漏洞复现**
**2.1 环境拓扑**
**2.2 应用协议**
8080/HTTP
**2.3 复现过程**
基于Windows平台，使用`环境`目录下的`shiro-basic.zip`环境，解压后，用Idea打开shiro-basic文件夹，下载maven资源，运行ShiroBasicApplication类，即可启动环境。效果如图。
构造HTTP请求，发送到服务器，完成身份验证绕过，效果如图
**3.漏洞分析**
**3.1 详细分析**
**3.1.1 漏洞利用过程**
获取到无权限访问的敏感路径，在authc认证路径后添加%3b进行身份验证绕过。
**3.1.2 代码分析**
传入的payload首先被服务器接收，并传送给Shiro拦截器处理(org.apache.shiro.web.servlet.OncePerRequestFilter#doFilter方法作为入口)。  
调用createSubject方法创建Subject，并调用execute方法进入Shiro FilterChain中。
进入org.apache.shiro.web.filter.mgt.PathMatchingFilterChainResolver#getChain方法中，首先获取请求uri路径。
在Shiro1.5.3版本中，对于requestURI处理的方式存在一些不同，虽然Shiro官方在此处做了很多优化，但是依然存在与Spring处理方式不一致的请求，导致漏洞的产生。在Shiro1.5.3版本中，requestURI直接调用getServletPath方法和getPathInfo方法进行拼接。并清除解码后的requestURI中分号之后的数据。
回到getChain方法中，迭代获取拦截器的表达式。
这里重点关注`/hello/*`表达式。代码进入pathMatches方法，最终调用org.apache.shiro.util.AntPathMatcher#doMatch方法进行传入的requestURI与拦截器表达式进行匹配。
匹配过程中，分别将拦截器表达式与requestURI以`/`作为分隔符进行字符串到数组的转换，通过循环匹配数组中对应的元素，判断requestURI是否符合拦截器表达式匹配形式。
由于解码后的requestURI被分号切割，导致pathDirs数组的元素个数少于pattDirs数组的元素个数。导致拦截器表达式与requestURI匹配失败，绕过认证
跟进到Spring处理URI的代码，进入org.springframework.web.servlet.handler.AbstractHandlerMethodMapping#getHandlerInternal方法，获取requestURI。由于Spring获取requestURI时使用getRequestURI()方法，此方法不会进行URL解码。
进入decodeAndCleanUriString方法，对未进行url解码的requestURI调用removeSemicolonContent方法进行分号截断操作。由于此时的requestURI处于未解码状态，因此编码后的分号是无法被解析的。
进入lookupHandlerMethod方法，调用addMatchingMappings方法，获取Spring拦截器。
进入org.springframework.web.servlet.mvc.condition.PatternsRequestCondition#getMatchingCondition方法调用doMatch方法进行requestURI和拦截器表达式的匹配。
Spring拦截器匹配流程和Shiro大致相同，同样是将字符串转换为数组进行匹配。
由于Spring对requestURI的先进行分号分割操作，再进行了一次URL解码。所以编码后分号之后的数据并不能被有效的分割，进行URL解码后，分号以及分号之后的数据成为了一个新的目录，从而完成了拦截器表达式与requestURI的匹配。
总结：Shiro对于requestURI的处理，先进行URL解码，再进行分号分割。Spring对于requestURI的处理，先进行分号分割，再进行URL解码。二者在解析requestURI时存在差异，因此导致漏洞出现。
**3.1.3 漏洞触发过程**
**3.2.4补丁分析**
对比Shiro 1.5.3与Shiro 1.6.0版本的改动，在Shiro
1.6.0版本中新增org.apache.shiro.web.filter.InvalidRequestFilter类。
在InvalidRequestFilter类中定义了SEMICOLON和BACKSLASH变量分别匹配路径中的`;`和`\`以及URL编码特征。调用isAccessAllowed方法，分别调用containsSemicolon，containsBackslash，containsNonAsciiCharacters方法进行`;`和`\`和不可见字符的检测。如果上述三个特征存在任意一个，则返回400状态。
在org.apache.shiro.web.filter.mgt.DefaultFilter类中添加InvalidRequestFilter拦截器。在org.apache.shiro.web.config.IniFilterChainResolverFactory类中添加/**拦截器表达式，并为所有拦截器表达式赋予invalidRequest，目的是让所有传入的路径都可以经过InvalidRequestFilter检测。
## 参考链接
1.  
2.  
3.  
4.  
5.[http://blog.orange.tw/2018/03/pwn-ctf-platform-with-java-jrmp-gadget.html  
7.  
* * *