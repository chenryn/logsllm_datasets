    void dbmfet(char * bin, int filesize, pone_tbl tbl, float T) {
        int n = tbl - >num;
        unsigned int * tb = tbl - >addr;
        unsigned int guess_base;
        int i,
        start;
        int thumb = 0,
        arm = 0;
        int debug = 0;
        if (tb[n - 1]  T) printf("OUTPUT: %p========%fn", guess_base, ((float) arm + (float) thumb) / (float) n);
                thumb = 0,
                arm = 0;
            }
        }
    }
**3、匹配/输出加载基址（boot模式）**
    void dbmfet_boot(char * bin, int filesize, pone_tbl tbl, float T, unsigned int boot_pc) {
        int n = tbl - >num;
        unsigned int * tb = tbl - >addr;
        unsigned int guess_base;
        int i,
        start;
        int thumb = 0,
        arm = 0;
        int debug = 0;
        if (tb[n - 1]  T) printf("OUTPUT: %p========%fn", guess_base, ((float) arm + (float) thumb) / (float) n);
                thumb = 0,
                arm = 0;
            }
        }
    }
**4、主函数**
    void find_load_base(char * filename, int wnd, int gap, float T, unsigned int f_gap_m, int f_rough, unsigned int boot, int f_clear) {
        F_GAP_MAX = f_gap_m;
        F_ROUGH = f_rough;
        F_CLEAR = f_clear;
        FILE * fid = fopen(filename, "rb");
        fseek(fid, 0, SEEK_END);
        long size = ftell(fid);
        rewind(fid);
        char * bin = (char * ) malloc(size + 1);
        fread(bin, 1, size, fid);
        PFET fet = find_fet(bin, 0, size, wnd, gap); //CTL5: 窗口 和 gap PFET ptr = fet->next; pone_tbl p_tbl; int i=0,j; do{ p_tbl = get_tbl(bin,ptr); if (boot == 0) dbmfet(bin,size,p_tbl,T); //CTL6: 阈值 else dbmfet_boot(bin,size,p_tbl,T,boot); //CTL6: 阈值 free(p_tbl->addr); free(p_tbl); ptr = ptr->next; i++; }while(ptr); printf("%dn", i); puts("end"); }
其他工作：
弄了dll，最开始想用swig转成python库，转的时候崩了。。。
最后用的ctypes导的dll，弄了个python模块。。GitHub链接放文末了。
## 五、工具运行测试
### Ⅰ. 扫描论文中给的固件
论文作者测试用的固件有16个，我找的好苦，16个我一共找到两个懒得再找了
#### 1、Sony SBH52固件
该固件就符合boot模式的要求，在ida中是这样：
可见芯片上电时PC寄存器的初始值为0x80bf029，因此我们：
运行结果如下：
可见基址为0x8040000（上千个结果，但是往下翻也是这个画风），与论文中的正确结果一致。
#### 2、iAudio 10 MP3固件
该固件不符合boot模式要求。而且体积较大，因此我们开启粗糙模式，并将匹配率阈值设为0.9：
运行结果如下：
可见，固件加载基址为0x20000000，与论文中的正确结果一致。
Ⅱ.扫描其他文件
我自个儿找了俩文件，都是ida自己能处理的标准elf文件，好像都是路由器里的程序：
第一个：
判定的基址为0x8000，载入ida确认：
第二个：
文件体积太小，匹配阈值0.6扫不出来，所以改成了0.3：
可见，加载基址就是0，丢ida验证：
后来又试了好几个elf，就一个失败了，失败的那个elf应该是因为太小了，只有10KB…
所以说大一点的文件效果会好一点，这也是统计特性决定的。
## 六、GitHub传送门