0 u(cid:96) +2k
0 v(cid:96) +2k
j vj = 0. Note that c(i)
0 , . . . , c(i)
0 , . . . , c(i)
j=1 c((cid:96))
j=1 c((cid:96))
j=1 c(i)
j=1 c(i)
k
0
We now prove Theorem 7.1. Assume that the set of out-
puts produced by the mix server is not a permutation of the
set of inputs but cheating is detected with probability less
8 − . We view the mix server as a polynomial-time
than 3
randomized algorithm, and construct an algorithm A that
uses the mix server to compute discrete logarithms in /.
Algorithm A takes as input two values g and h in / and
computes logg h as follows:
1. Algorithm A creates ElGamal public and private keys
(the public key will be used to encrypt the inputs to
the mix server). Algorithm A keeps the private key to
itself and gives the public key to the mix server. Note
that A is emulating the decryption servers.
2. A creates n inputs ai = gri ·hsi ∈ / for ri, si ∈ q cho-
sen independently at random. Let A = {a1, . . . , an}.
Algorithm A submits ElGamal encryptions of the in-
puts a1, . . . , an to the mix server.
3. The mix server produces an output set of n ElGamal
ciphertexts. Algorithm A decrypts these ciphertexts
to obtain the set B = {b1, . . . , bn} ⊆ / of outputs.
4. Algorithm A generates a random subsets S ⊆ A by in-
cluding every element of A independently at random
with probability half. It challenges the mix server to
reveal the subset F (S) ⊆ B of the outputs correspond-
ing to S. Recall that the mix server must produce a
subset F (S) ⊆ B such that |F (S)| = |S| and the prod-
uct of the elements of F (S) equals the product of the
elements of S. If the mix server does not reply to the
challenge, algorithm A rewinds it and queries it on a
diﬀerent random subset until the mix server produces
a reply. Since the mix server answers challenges with
probability at least 5
rewind the mix server less than twice on average.
8 + , the algorithm A needs to
5. Algorithm A repeats step 4 above n + 1 times, rewind-
ing the mix server between queries. It obtains inde-
pendent random subsets S1, . . . , Sn+1 of the inputs and
the corresponding replies F (S1), . . . , F (Sn+1) from the
mix server.
6. Let χ(S) ∈ {0, 1}n be the characteristic vector of S
for any subset S of A or B. We view χ(S) ∈ {0, 1}n
as a vector in n
If there exists an n-by-n matrix
q .
M ∈ GLn(q) such that for all i = 1, . . . , n + 1 the
equality χ(Si) = M · χ(F (Si)) holds, then algorithm A
reports failure.
7. Otherwise, there is no matrix M ∈ GLn(q) such that
χ(Si) = M · χ(F (Si)) holds for all i = 1, . . . , n + 1.
By Lemma 7.2, we can then ﬁnd in polynomial time
c1, . . . , cn+1 ∈ q such that:
ciχ(F (Si)) = (0, . . . , 0) mod q
But
ciχ(Si) (cid:54)= (0, . . . , 0) mod q
i=1 ciχ(Si) ∈ n
Let (e1, . . . , en) = 2n+1
tion of the mix server, we know that 3aj∈Si
3bj∈F (Si) bj for all i = 1, . . . , n + 1. By multiplying
q . By deﬁni-
aj =
these n + 1 relations, we get
(aj)ej =
(bj)ci = 1.
n+1;i=1 ;bj∈F (Si)
Recall that ai = gri · hsi . Therefore
n+1:i=1
n+1:i=1
n;j=1
n:j=1
ej(rj + sj(logg h)) = 0 mod q.
If 2n
j=1 ejsj = 0 then algorithm A reports failure.
This happens with probability at most 1/q. Otherwise
A outputs
logg h = − n:j=1
ejrj
/ n:j=1
ejsj
.
Proposition 7.3. Suppose the mix server produces out-
puts which are not a permutation of the inputs, yet manages
to reply to challenges with probability greater than 5
8 + .
Then algorithm A succeeds in computing discrete logarithm
with probability at least 2/128 − 1/q.
Proof. By assumption, the mix server correctly answers
a query with probability at least 5
8 +, where the probability
is taken over all 2n possible queries and the random bits
used by the mix server. By a standard counting argument,
if we randomly ﬁx the mix server’s random bits, then with
probability at least /2 the mix server answers correctly at
least 5
16  of all 2n queries.
8 + 13
74Once we ﬁx the mix server’s random bits, the set of queries
that the mix server answers correctly is a well deﬁned subset
5 ⊆ {0, 1}n. Furthermore, we can view the mix server as a
deterministic function F : 5 → {0, 1}n mapping subsets of
inputs to subsets of outputs. We know that |5| > 2n( 5
8 + 13
16 )
with probability at least /2. Assume for the rest of the
proof that |5| > 2n( 5
For i = 1, . . . , n, let ei ∈ {0, 1}n be the i-th unit vector
(i.e. zeroes everywhere and a one in the i-th coordinate).
The following lemma will be used several times:
8 + 13
16 ).
vectors.
Lemma 7.4. Suppose that |5| > 2n/2. Let i ∈ {1, . . . , n}.
There exist v0, v1 ∈ 5 such that v1 = v0 + ei.
Proof. Let U be the subset of {0, 1}n containing all vec-
tors with a one in position i. Let 50 = 5 ∩ ¯U and let
51 = 5 ∩ U . We deﬁne f : 50 → U to be the map that
sends v0 to v0 + ei. Since |f (50)| + |51| = |5| > |U|, there
exist v1 ∈ f (50)∩51. Then (v1− ei, v1) is the pair of desired

Next, we bound the probability that algorithm A aborts
in step 6. We separate our analysis of the bound in two
cases, depending on whether F (5) spans all of n
q or not.
q when |5| > 2n/2.
We prove ﬁrst that 5 must span all of n
Lemma 7.5. If |5| > (2n)/2 then the vectors in 5 span all
of n
q .
Proof. Let i ∈ {1, . . . , n}. By the previous lemma, there
exist v0, v1 ∈ 5 such that ei = v1 − v0. Therefore e1, . . . , en

are spanned by 5 and so 5 spans n
q .
Lemma 7.6. Let  ∈ [0, 1
If |5| >
2 + ), then n random and independent vectors from 5
2n( 1
will span n
Proof. Let v1, . . . , vc ∈ n
q be linearly independent vec-
tors where v1, . . . , vc ∈ {0, 1}n. We know that the linear
space spanned by v1, . . . , vc contains at most 2c vectors in
{0, 1}n. Therefore, if we are given c linearly independent
vectors v1, . . . , vc as above, the probability that a random
vector from 5 is linearly dependent on v1, . . . , vc is at most
2c/|5|. If follows that n random vectors from 5 span all of
n
q with probability at least
2 ] and 5 ⊆ {0, 1}n.
q with probability at least /4.
Since we assume |5| > (2n)( 1
  2n−1, we have
p =1 − 2
|5|
1 − 22
|5|
···1 − 2n−1
|5| 
log1 − 2i
log p = log1 − 2n−1
|5| 
 +
|5|
n−2:i=1
|5| 
 − 2
≥ log1 − 2n−1
n−2:i=1
|5| 
 − 2n
≥ log1 − 2n−1
2 + ), we get p ≥ 
2i
|5|
|5|
Lemma 7.7. If |5| > 2n( 1
all of n
probability at least /4.
2 + ) but F (5) does not span
q , then algorithm A does not abort in step 6 with
q . But since F (5) does not span all of n
Proof. By Lemma 7.6, we know that with probability at
least /4, the ﬁrst n vectors χ(S1), . . . , χ(Sn) ∈ {0, 1}n will
span all of n
q , the n
vectors χ(F (S1)), . . . , χ(F (Sn)) ∈ {0, 1}n do not span all of
q . Therefore there is no matrix M ∈ GLn(q) that maps
n
χ(F (Si)) to χ(Si) for all i = 1, . . . , n and so the algorithm

does not abort in step 6.
Next, we want to bound the probability of aborting in
step 6 when F (5) spans all of n
q . For that, we ﬁrst need
the following two lemmas which show that F cannot be a
linear map on 5. Recall that a permutation matrix is a
permutation of the rows of the identity matrix. Let us deﬁne
the L norm of a vector b = (b1, . . . , bn) ∈ {0, 1}n to be
L(b) =2n
i=1 bi.
q and F pre-
Lemma 7.8. Let |5| > (5/8)2n and F : 5 → {0, 1}n be a
linear function such that F (5) spans all of n
serves the L norm (i.e. L(F (v)) = L(v) for all v ∈ 5).
Then there exists a permutation matrix P ∈ GLn(q) such
that F (v) = P · v for all v ∈ 5.
Proof. If F : 5 → {0, 1}n is a linear function, we can ﬁnd
an n-by-n matrix P such that for all S ∈ 5, F (S) = P · S.
Note that the matrix P must be of full rank since F (5) spans
q . For i, j ∈ 1, . . . , n, we write pi,j the entry of P at
all of n
row i and column j.
We start by showing that pi,j ∈ {−1, 0, 1} for all i, j ∈
1, . . . , n. Recall that for i = 1, . . . , n we denote the i-th
unit vector by ei ∈ {0, 1}n. By Lemma 7.4, we can ﬁnd
v0, v1 ∈ 5 such that v1 = v0 + ei. Since v0, v1 ∈ 5, we know
that F (v0) = P v0 and F (v1) = P v1 are in {0, 1}n. But since
v1 = v0 + ei we have P ei = P v1 − P v0. This shows that
the vector P ei can be expressed as the diﬀerence between
two vectors in {0, 1}n and therefore all the coordinates of
P ei are in {−1, 0, 1}. But the vector P ei is exactly the i-th
column of the matrix P . Since this argument works for all
i = 1, . . . , n, we have shown that pi,j ∈ {−1, 0, 1} for all
i, j ∈ 1, . . . , n.
Recall the deﬁnition of the norm L given above. We have:
L(P ei) = L(P v1 − P v0) = L(P v1) − L(P v0)
= L(F (v1)) − L(F (v0)) = L(v1) − L(v0) = 1
This implies the following equality, which we will use later:
pi,j = n.
n:j=1
n:i=1
Let us now consider row Ri = (pi,1, . . . , pi,n) of the matrix
P for i ∈ 1, . . . , n. For any v ∈ 5, we know that the scalar
product Ri · v ∈ {0, 1} since F (v) = P v ∈ {0, 1}n. But |5| >
(5/8)2n by assumption. This implies that the vector Ri has
at most 11 non-zero elements (either 1 or −1). Indeed, if
Ri had z > 12 non-zero elements, it would map at most a
fraction 2 z/2
z/4/2z/2 < 5/8 of vectors in {0, 1}n to {0, 1}.
Up to a re-ordering of the columns of the matrix P , we can
assume that the z ≤ 11 non-zero coordinates of Ri are the
ﬁrst z coordinates. An exhaustive search among all 21 +
22 + . . . + 211 = 212 − 2 possibilities of all vectors that map
a fraction strictly greater than 5/8 of all vectors in {0, 1}n