allow
deny
allowed operations
never cause EPT 
violation
allow access, perform 
state transition, Multi-
HAP switch, and return
trigger protection 
alarm: illegal 
control transfer
Log the event, 
emulate the 
access instruction, 
and return
trigger protection 
alarm: illegal code/
data access
Figure 5. The EPT violation handling diagram
of HUKO.
IOMMU page tables with the multi-HAP page tables so that
IOMMU can utilize the guest-to-machine physical address
translation as well as access control enforcement provided
by the multi-HAP mechanism.
Supporting Exceptions. Given the complexity of com-
modity operating system kernels and the variety of enor-
mous extensions in the wild, it is necessary for HUKO to
support exceptions for access control enforcement. There
are three types of exceptions in HUKO. The ﬁrst type of-
fers an untrusted extension the privilege to write into spe-
ciﬁc objects in the kernel. The second type allows an un-
trusted extension to make certain calls to the kernel, but
not through trusted entry points. The third type of excep-
tion is about exporting write permissions in kernel stack
frames. These exceptions are provided by the administra-
tor to achieve speciﬁc needs on ﬂexibility and performance,
and they are stored and protected in the VMM memory
space. Section 5.1 provides a further discussion in Linux
OS.
In our current prototype implementation HUKO uses
mixed page labels to handle exceptions. Pages that con-
tain exception objects are labeled as “mixed exception”, and
the hypervisor will check the virtual address upon each vio-
lation to determine whether the event is an exception. This
approach has bad performance in case the number of excep-
tions is large or exceptions occur frequently. We have an
optimized design for handling exceptions and mixed pages.
In that scheme, HUKO copies all the exception objects onto
a set of allocated exception pages. By dynamic patching of
instructions, HUKO redirects all the operations accessing
exception objects to the corresponding copy on the excep-
tion pages at the run time. This method reduces the total
number of EPT violations on exception pages and mixed
pages. We plan to implement this optimization in our future
work.
4.6 Modiﬁcations to Xen
We implemented HUKO by modifying the Xen hyper-
visor (version 3.4.2 x86-64 HVM Guest), which is a full-
ﬂedged open source hypervisor commonly used in various
enterprise systems. The HAP mechanism used in the iso-
lation and labeling component is based on Intel’s EPT, yet
it does not require much effort to adapt AMD’s NPT. The
total amount of code added to the Xen hypervisor is approx-
imately 3,300 lines. And the Linux implementation of the
labeling helper trusted extension consists of about 450 lines
of code.
A major effort of our prototype implementation is to
extend the memory virtualization sub-system of Xen to
support the multi-HAP mechanism. In HUKO prototype,
each HAP table is essentially a four-level EPT paging
structure. The root-level index of each paging structure
is stored in an array named huko phys table index,
which is placed in the architecture-speciﬁc per-domain
structure arch domain. To construct multi-HAP tables,
HUKO ﬁrst traverses all the existing physical-to-machine
(p2m) mappings from the domain’s page list. Then
it allocates EPT entries using free pages maintained by
p2m freelist, which are Xen’s reserved pages for stor-
ing p2m mappings. The security label of each GFN is stored
in bits 61:57 of the corresponding EPT entry and man-
aged by the labeling component. HUKO then decides the
access rights of an EPT entry from its security label, the
MAC policy as well as the protection state which it belongs
to. HUKO keeps this allocation process until all HAP ta-
bles are established. During each state transition, HUKO
switches among multiple EPT paging structures by chang-
ing the EPTP pointer and associated VPID in the VMCS
ﬁelds.
For each protection state, we introduced a security con-
trol block (SCB) which is linked to the domain structure.
The SCB stores essential information for tracking a pro-
tection state, such as the identity of the current subject,
the virtual address range of the subject’s code and data,
the previous protection state, the address of the last en-
try point, a copy of stack pointers, and a link to its return
address stack. To achieve mediation and policy enforce-
ment, we added additional routines to the paging viola-
tion handler of EPT and the Vt-d pass-through (IOMMU)
driver, which are ept handle violation() and
iommu page fault(), respectively. We exported two
new hypercalls to the labeling helper for delivering run-time
information to the labeling component.
5 Evaluation
In this section, we describe the deployment and experi-
mental evaluation of the HUKO prototype. There are two
goals of our evaluation. The ﬁrst is to evaluate HUKO’s
effectiveness for defending against various real-world mali-
cious extensions that damage the OS kernel integrity in dif-
ferent ways. The second goal is to measure the performance
cost introduced by HUKO using both application-level and
micro benchmarks.
All experiments were conducted on a Dell PowerEdge
T310 Server with a 2.4GHz Intel Xeon X3430 and 4GB
memory. The Xen hypervisor version is 3.4.2. The dom0
system is fedora 12 with kernel version 2.6. We used a
64bit Ubuntu Linux (8.04.4) with kernel version 2.6.24 as
our guest OS. All Linux partitions were conﬁgured to use
the ext3 ﬁle system. For Windows experiment, we chose
Windows XP SP2 as our guest system.
5.1 Deploying HUKO
As stated in Section 3.1, HUKO is intended to mini-
mize the required effort for deploying the protection sys-
tem. Instead of establishing protection domains at the OS
layer [32] or at the hardware architecture layer [37], the
implementation of almost all the functionalities (i.e., mem-
ory protection and access control) in HUKO is at the vir-
tualization layer, which makes the protection mechanism
guest-independent, adaptive, and easy-to-undeploy. More-
over, HUKO does not enforce access control for speciﬁc
kernel objects, and it only has several generic types for ob-
ject labeling. While this approach sacriﬁces the beneﬁts
of semantic-rich access control at ﬁner granularity, it does
offer a much easier conﬁguration compared to rich-typed
protection system such as SELinux [7].
In the following
paragraphs we use the Linux OS as an example to brieﬂy
describe the deployment of HUKO.
The ﬁrst step is to set up the basic information about ker-
nel layout, objects and TEPs. In Linux, most of these in-
formation could be acquired from the kernel symbol table
associated with the speciﬁc kernel. For example, the ad-
dress range of Linux kernel code is determined by kernel
symbol text and etext. Similarly, the boundaries of
initialized and uninitialized kernel static data can be identi-
ﬁed by symbol edata and end. At runtime, the labeling
helper is responsible for collecting dynamic information for
object labeling. For instance, the code and data range for
an extension could be retrieved from the accounting data
structure module when the extension is being loaded into
the kernel.
In Linux, most kernel APIs and global data are exported
to the kernel symbol tables using the EXPORT SYMBOL
macro. The address of kernel symbols can also be retrieved
in the System.map ﬁle. In this way we could collect all
the entry addresses for exported kernel functions.
In our
current prototype, we treat all the exported kernel APIs as
the Trusted Entry Points (TEPs). In our future work, we are
expecting to extend HUKO to achieve the least privilege
property, by which we infer and enforce the set of kernel
APIs that a speciﬁc extension can call. We do a further dis-
cussion on this issue in Section 6.
Besides common settings, administrators sometimes also
need to provide extension-speciﬁc exceptions to make an
extension run correctly. There are mainly three types of ex-
ceptions in a HUKO system. The ﬁrst type of exceptions
consists of non-exported functions. In Linux, certain kernel
functions are not explicitly exported, instead, they are ac-
cessed by direct address reference or address assigning to
function pointers. Fortunately, these cases are not recom-
mended nowadays and getting rare in recent Linux kernels.
To deal with them, the administrator should manually spe-
ciﬁc the entry address of these kernel APIs as TEPs. The
second category of exceptions consists of OS kernel data
of which the kernel intentionally grants write permission
to extensions. In many cases, the shared data are used as
various kinds of buffers and caches in the kernel, and they
are usually still page-aligned. The labeling helper notiﬁes
the hypervisor when these data are allocated, and HUKO
assigns Shared Data type to these pages in the multi-
HAP table to allow write access for both OS kernel and
untrusted extension protection states. Shared data that are
not page-aligned with non-shared kernel data are required
to set up exceptions using mixed pages. Regarding write-
sharing for kernel global variables, the administrator could
specify their address in the exceptions according to the ker-
nel symbol table. The third category of exceptions belongs
to stack permission which OS kernel needs to grant exten-
sions write permission to its local variables on the stack. For
example, OS kernel could pass the address of a local vari-
able to an extension in parameters during a function call.
To address these situations, the administrator should spec-
ify the addresses of functions that require stack exceptions
and how many previous frames need to be modiﬁed by each
function. Then at the time that control returns to these func-
tions, instead of synchronizing only its own stack frames of
the extension, HUKO synchronizes all the necessary previ-
ous stack frames speciﬁed by the given exception.
Untrusted Extension
Behavior
EnyeLKM
all-root
adore-ng
hp
lvtes
add binary code to kernel
DKOM (modify task struct)
modify control data (sys call table)
modify function pointers
DKOM (modify task struct linked list)
call unauthorized function (module free)
return-oriented extension
FUTo (Windows)
TCPIRP (Windows)
basic int (Windows)
modify return addr. on the stack
DKOM (modify PspCidTable)
modify function pointers
add binary code to kernel
Violation Triggered
Illegal code access
Violating Object Label
OTHER OS CODE
Illegal data access
Illegal data access
Illegal data access
OS DATA
OS DATA
OS DATA
Invalid code execution
Invalid return address
OTHER OS CODE
Return addr. stack
Illegal data access
Illegal data access
Illegal code access
OS DATA
OS DATA
OTHER OS CODE
Table 2. Protection effectiveness of HUKO against a collection of malicious extensions.
5.2 Protection Effectiveness
We evaluated the effectiveness of HUKO for kernel in-
tegrity protection with a collection of malicious extensions
on both Windows and Linux. These extensions include 8
real-world rootkits and one self-implemented malicious ex-
tension for return-oriented attacks, which are shown in Ta-
ble 2. As a result, all of these malicious extensions triggered
protection alarms once they attempted to damage the kernel
integrity. In the following paragraphs we describe three rep-
resentative experiments in detail.
Code Integrity. EnyeLKM [3] is a Linux kernel rootkit
which modiﬁes the kernel
text by putting “salts” in-
side system call and sysenter entry handlers.
With HUKO protection, an illegal code modiﬁcation
alarm was triggered when either set idt handler or
set sysenter handler was called. Both functions
were trying to add binary text to kernel object labeled as
OTHER OS CODE.
Data Integrity. The all-root [1] rootkit is a simple
DKOM Linux kernel rootkit that modiﬁes both control and
non-control data to achieve privilege escalation. In its ini-
tialization routine init module, this rootkit replaces the
sys getuid entry of the sys call table with its own
function give root, which changes the uid, gid, euid and
egid ﬁeld of the current task struct to 0 (root). In this
attack, the ﬁrst modiﬁed data belongs to static control data
while the latter belongs to dynamic non-control data. When
we launched this attack in a system protected by HUKO,
it immediately triggered a protection alarm indicating an
illegal data access (caused by the ﬁrst modiﬁcation) from
untrusted extensions to an object labeled as OS DATA. In
order to test the second data modiﬁcation, we deliberately
made decisions to allow the ﬁrst modiﬁcation and let the
system continue to run. Then we executed a getuid sys-
tem call from the user space to trigger the malicious replace-
ment function. Again, HUKO triggered an illegal data ac-
cess alarm, which was also caused by directly modifying
dynamic non-control kernel data (labeled as OS DATA) at
the “untrusted extension” protection state.
Control Flow Integrity. Besides malicious extensions
that modify control-data (e.g., function pointers) or make
illegal call/jump to the kernel, the return-oriented attack is
another way of tampering control ﬂows in the kernel. To
evaluate HUKO’s effectiveness in countering such attacks,
we implemented a return-oriented malicious extension in
our experiment. Upon called, this extension modiﬁes its re-
turn address on the stack to an arbitrary point in the kernel
text area, which is recognized as a return-instruction gadget.
We loaded this extension to a Linux system protected by
HUKO. As a result, HUKO successfully prevented the con-
trol ﬂow diversion caused by the modiﬁed return address,
since the LIFO property of the return address stack was no
longer kept.
5.3 Performance Overhead
To measure the performance cost introduced by HUKO,
we ran a set of benchmarks to compare the performance
of a guest system protected by HUKO with one that does
not. For each benchmark, we labeled one or several rele-
vant kernel extensions as untrusted so that they were iso-
lated from the kernel. For all workloads we enforced the
sample policy showed in Table 1. To fully test HUKO’s
performance overhead under stressed conditions, we chose
two largest and most active kernel extensions in our Linux
system: 8139too and ext3. The 8139too is the net-
work interface card driver and the ext3 extension is the
ﬁle system module. These extensions are invoked multiple
times for each network I/O requests or ﬁle system opera-
tions so that they have the highest control transfer rates with
the OS kernel. Hence, marking them as untrusted generally
represents the worst-case performance of HUKO when the
Benchmark
Dhrystone 2
Whetstone
Lmbench
(pipe bandwidth)
Apache Bench
(throughput)
Kernel
Decompression
Kernel Build
Untrusted
Extensions
Number of
Protection State
Transitions
8139too + ext3 N/A
8139too + ext3 N/A
8139too + ext3 N/A
Native
Performance
10, 855, 484 lps
2, 270 MWIPS
2, 535 MB/s
HUKO
Performance
10, 176, 782 lps
2, 265 MWIPS
2, 213 MB/s
8139too
56, 037
2, 261 KB/s
1, 955 KB/s
ext3
ext3
17, 471, 989
148, 823, 045
35, 271 ms
2, 804 s
44, 803 ms
3, 106 s
Table 3. Performance results of application-level benchmarks.
Relative
Performance
0.94
1.00
0.87
0.86
0.79
0.90
system is performing I/O intensive tasks.
The application benchmarks and their conﬁguration are
presented as follows: (1) Dhrystone 2 of the Unix Bench
suite [8] using register variables.
(2) Double-Precision
Whetstone of the Unix Bench. (3) LmBench [6] pipe band-
width measuring the performance of IPC interface provided
by the kernel. (4) Kernel Decompression by extracting a
Linux 2.6.24 kernel gzipped tarball using tar -xzf com-
mand. (5) Building a 2.6.24 Linux kernel using default con-
ﬁgurations. (6) Apache Bench conﬁgured to have 5 con-
current clients issuing 20 http requests (16KB HTML) per
client.
Table 3 presents the results of these application level
benchmarks. The second column indicates which extension
is labeled as untrusted, while the third column shows the to-
tal number of protection state transitions in each workload.
Some numbers are not available because the corresponding
workload is part of a continuous benchmark suite. From the
results, we can see that the performance of HUKO system
is from 0.79 to 1.00 of the baseline. We also found that the
performance overhead added-on by HUKO largely depends
on the frequency of control transfers between untrusted ex-
tensions and the kernel. Hence, if the workload is CPU-
bound, the performance cost is minimal. The overhead gets