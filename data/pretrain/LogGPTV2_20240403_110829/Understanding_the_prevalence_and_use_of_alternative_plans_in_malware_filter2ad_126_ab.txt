game. The game decides whether to faithfully route the re-
sponse packet, or construct and send a spoofed packet, to
the sample. Games are run on the host machine in isolation
from the VMs, so malware cannot detect that its network ac-
tivity is being analyzed and modiﬁed. As discussed earlier,
all spoofed responses are RFC-compliant packets of the pro-
tocol currently being gamed making them indistinguishable
from legitimate responses. As any analysis technique gains
traction, malware authors will begin to attempt to circum-
vent it. Therefore, we discuss possible evasion techniques
and how to mitigate them in Section 6.2.
Figure 2: An overview of network traﬃc routing in
GZA. Multiple virtual machines (VMi) are run on a
host using GZA. Each VM is paired up with a game
G and a single sample is run against n + 1 games.
This includes Gnull to act as a baseline. Each VM’s
network is isolated from all others to prevent local
infection. VM network traﬃc is routed through its
paired game to perform the required packet trans-
formations. There can be multiple groups of these
on a single host to perform bulk sample analysis.
3.2
Implementation
GZA3 is a collection of Python scripts that run malware
samples inside a virtualized Windows XP instance in kvm
and route packets to implement the games described in Sec-
tion 2.2. All applications and services that could generate
DNS or TCP traﬃc automatically are disabled to ensure
that gamed packets are from the analyzed malware only.
Before packets are routed for gameplay, precautionary mea-
sures are performed to prevent malware from damaging ex-
ternal systems. All SMTP traﬃc is redirected to a spam trap
to prevent spamming and traﬃc to local systems is dropped
to prevent local infection of nearby machines or concurrently
running VMs. Each VM has its packets routed through the
host running kvm using iptables [23] with relevant packets
being forwarded to a Python script that runs a game. This is
done through the iptables NFQUEUE interface that redi-
rects each packet to a user-mode process which decides if
the packet should be accepted or dropped. If the game re-
turns the original packet, the NF_ACCEPT message is returned
to the host’s kernel and the packet is routed faithfully. If
the game returns a spoofed packet, NF_REJECT is sent to the
3https://github.com/ynadji/drop
VM1...G1...VM2G2VMnGnVM0GnullHostInternethost’s kernel and a forged packet is created and sent to the
VM using the packet manipulation library scapy [5].
Games are very short Python scripts that provide two
external functions: playgame and spoof. playgame instructs
the host’s kernel to route the original packet or to drop it;
spoof generates and sends a falsiﬁed packet to the VM if
the original packet was dropped. GZA allows for additional
games to be created and removed as its operator sees ﬁt.
The implementation of all six of the DNS and TCP games
took only 113 lines of code combined.
4. STUDY METHODOLOGY
Using the idea of playing games with malware, we design
and run two studies to understand alternative plans in mal-
ware. The ﬁrst goal of this study is to understand the preva-
lence of alternative plans in malware and determine which
games are the best in general; successful games force exe-
cuting malware to reveal the most additional information.
The second attempts to quantify how useful this previously
unknown information is by determining how long it takes for
newly discovered domain names and IP addresses to appear
on publicly available blacklists; coerced network information
is more useful the longer it takes to appear. We assume that
non-whitelisted network information contacted by malware
is malicious. Note that not all games use the whitelist, but
during our evaluation we ignore additional network infor-
mation that is whitelisted. For example, if Gdns1 caused
additional benign domains to be queried, it would not be
considered successful. For TCP-based games, we also ignore
additional A records returned by DNS requests. We validate
this assumption by providing DNS reputation scores for do-
main names. Furthermore, we show how this increase in
network information can improve the accuracy of network-
based clustering systems. In both studies presented, all sam-
ples are run for ﬁve minutes. We discuss timing based eva-
sion further in Section 6.2, but in short the issue is common
across all dynamic analysis systems and is orthogonal to the
problem we address in this paper.
4.1 Representative Study
We created a dataset, DR, of 2,191 distinct malware sam-
ples obtained between April 2010 and October 2010 from
a variety of sources, including:
low interaction honeypots,
web crawlers, mail ﬁlters and user submissions. We used
several sources to approximate the general malware popula-
tion as closely as possible. Additionally, all samples in DR
were ﬂagged as malicious by both Symantec and McAfee.
For all malware samples m ∈ DR, we run m in GZA against
each game described in Section 2.2. The astute reader will
notice that we run the risk of uncovering new information
by chance. Consider a malware sample that is analyzed at
two distinct times, t and t(cid:48) where t < t(cid:48). It is possible that
the malicious network infrastructure changed at some time
v where t < v < t(cid:48), which could taint our results. To elimi-
nate this possibility, a single sample is run against all games
at the same time.
Malware tend to rely on either domain names or IP ad-
dresses to communicate with their C&C. Using this assump-
tion, we can increase the throughput of GZA for the long-
term study by only using the two most successful games for
each protocol.
4.2 Long-term Study
In addition to measuring the prevalence of alternative
plans in malware, we want to determine how useful this in-
formation is the day a malware sample appears on a malware
feed. Detecting malicious domain names and IP addresses
before they have appeared in blacklists oﬀers a tangible im-
provement to companies and researchers that use domain
name and IP address reputation systems, perform network-
based malware clustering, or maintain domain name and IP
address blacklists.
Using the two games chosen from the previous study and
Gnull, we play games with malware samples provided by our
daily malware feeds over the course of three weeks. Each
day, we analyze all the samples we encounter on our feeds
using GZA. Samples that do not generate any network traﬃc
while executing under Gnull are removed from our results.
For each sample that is successfully gamed, we must evaluate
the usefulness of the newly obtained information. To do this,
we cross-reference the domain name or IP address against
eleven public blacklists [12, 20, 15, 16, 21, 35, 19, 13, 27,
29, 26]. The blacklists provide two dates: df , the ﬁrst day a
domain name or IP address appeared on the blacklist and dl,
the last day a domain name or IP address appeared on the
blacklist. For each additional piece of network information,
ni, and the day it was coerced, t, we place it into one of four
categories:
1. blacklisted:
if ni appears on any of the blacklists
after we coerced it on day t i.e., t < df .
2. decommissioned: if ni appears on any of the blacklists
before we coerced it but has since been decommissioned
i.e., df < dl < t.
3. campaigning:
if ni appears on any of the blacklists
and is currently being used i.e., df < t < dl.
4. never: if ni does not appear on any of the blacklists.
Each category provides interesting insight into a malware
campaign. blacklisted network information shows our strat-
egy can coerce domains that other parties eventually ﬂag
as malicious. decommissioned network information shows
that while malware may stop using a network resource, they
can quickly and easily resume using one. campaigning net-
work information are seen in samples that connect to multi-
ple network resources during normal operation. For exam-
ple, a sample randomly chooses which domain name to use
to contact its C&C. never network information is perhaps
the most interesting. These are domains and IP addresses
queried by malware that never appear on public blacklists
throughout our experiments. blacklisted and never are
the most useful categories of network information and pro-
vide the best improvements to systems that rely on such
information.
By comparing generated malware sets, we will extract new
relationships between malware originally thought to be un-
related. Consider two malware samples, m1 and m2 that
when run using Gnull they query domains d1 and d2, respec-
tively. However, when run using Gdnsw, they both query
d1 and d2. m1 and m2 are said to be strongly related in
Gdnsw. Strongly related samples have distinct sets of net-
work information when run in Gnull but identical sets when
run in any other game. For example, consider a malware
family that randomly chooses a C&C domain name to con-
nect to at runtime. MD5 distinct versions of this malware
family could have distinct game sets in Gnull but would have
identical game sets in Gdnsw. Strongly related samples are
likely to be related in some way, for example, they could be
members of the same botnet. More formally, two malware
samples, m1 and m2, are considered strongly related in Gi
iﬀ:
C(Gi,m1 ) = C(Gi,m2 ) and C(Gnull,m1 ) (cid:54)= C(Gnull,m2 )
where C is a function that returns either the subset of unique
domain names or unique IP addresses depending on the
game type of Gi i.e., C is either D or I from Table 1. Samples
could be related without being strongly related, however, we
focus only on strongly related samples in this paper. Us-
ing network games, we can improve malware clustering that
uses network features. Furthermore, we use the existing do-
main name reputation system, Notos [2], to validate that
our newly discovered domain names are actually malicious.
5. ANALYSIS
5.1 Representative Study
A summary of the results from the representative study
are available in Table 2. Of the 2,191 samples in our dataset,
17% were successfully gamed by at least one of the games
described in Section 2.2. Of the two types of games, DNS-
based and TCP-based, Gdnsw and Gtcpw were successful the
most often with 6.0% and 7.5% success rate, respectively. In
most cases, the increase in network information was between
one and three new domain names or IP addresses for alter-
native plans. A plot of network information gains is shown
in Figure 3. Both graphs are heavily skewed to the right
which shows that if a malware author had the foresight to
include an alternative plan they used few additional network
resources. For increases in IP addresses in Figure 3(a), we
see little diﬀerence between each individual strategy with re-
spect to the amount of information increase. Figure 3(b) is
similarly structured, but with a large spike at 14 additional
domain names for Gdnsw. DR contained 37 unique samples
of the same malware that all queried the same set of domain
names.
In addition to understanding the successes of each game
individually, examining cases where multiple games were
successful on an individual sample yield insight into under-
standing malware alternative plans. Table 3 shows this over-
lap by examining pairwise Jaccard Index [36] of the game
sets of each game. The large overlap of 0.93 between GDR
dns1
and the more successful GDR
dnsw show that a naive whitelist-
ing strategy is suﬃcient and improves upon hard-coding for
common patterns in malware. Gdnsw generalizes the behav-
ior captured by Gdns1. TCP-based games exhibit a much
smaller overlap, primarily due to the speciﬁc staged drop-
per the game targets i.e., Gtcp2 targets two staged droppers.
Game performance dropped from Gtcpw to Gtcp1 and Gtcp1
to Gtcp2. This shows that hardcoding for droppers is less
eﬀective than a whitelisting approach.
dns and GDR
Furthermore, the small overlap of 0.20 between all DNS-
based and TCP-based gamesets, GDR
tcp shows that
malware authors focus primarily on adding reliability us-
ing additional domain names or IP addresses for their C&C
servers, but rarely both. Since we can approximate our
DNS-based games with Gdnsw and Gtcpw is the best per-
former among TCP-based games, we will use these two games
in our long-term analysis.
Game % Gamed Min Gain Median Gain Max Gain
28
Gdns1
34
Gdnsw
Gtcpw
56
54
Gtcp1
36
Gtcp2
45
Gtcp3
Total
-
4.4%
6.0%
7.5%
6.3%
5.4%
5.4%
17.3%
2
3
2
1
1
1
-
1
1
1
1
1
1
-
Table 2: Summary of results of the representative
study of alternative plans in malware. The most
successful DNS and TCP strategies are highlighted.
GDR
1
0.93
-
dns1 GDR
dnsw GDR
0.93
1
-
-
-
1
-
-
-
-
-
-
-
-
0.50
0.45
0.46
-
GDR
dns1
GDR
dnsw
GDR
tcpw
GDR
tcp1
GDR
tcp2
GDR
tcp3
GDR
dns
tcpw GDR
tcp1 GDR
tcp2 GDR
-
-
0.50
1
0.36
0.41
-
-
-
0.45
0.36
1
0.43
-
tcp3 GDR
tcp
-
-
-
-
-
0.46
0.41
0.43
1
-
-
-
-
0.20
Table 3: Overlap in game strategies represented by
the Jaccard Index. GDR
tcp are the union of
the DNS and TCP game sets, respectively.
dns and GDR
5.2 Long-term Study
We ran approximately 4,000 malware samples a day through
GZA using three games {Gnull, Gdnsw, Gtcpw} from March
11th to March 31st. In general, nearly all coerced network
information was never blacklisted (category never) during
the course of our study. See Table 4 for an example of the
output for a single day of analysis that took place on March
15th. Of the unique domains and IP addresses coerced, ap-
proximately 96% and 99% never appear on public blacklists
by April 2nd, respectively. A small number were considered
blacklisted, decommissioned and campaigning. A break-
down of these categories for the entire study are shown in
Figure 4. As shown by the plot, almost all coerced network
features never appear on public blacklists.
Network feature Category
Blacklisted
Domains
Decommissioned
Domains
In Campaign
Domains
Never Blacklisted
Domains
Domains
Total
Blacklisted
IP
Decommissioned
IP