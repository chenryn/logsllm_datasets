attributes.  It  is  knowledge-driven  -  the  routing  system  itself 
incorporates  information  about  what  knowledge  is  most  useful  in 
different circumstances, and uses scalable distributed techniques to 
filter  observations  and  “attract''  the  most  relevant  observations 
towards  potential  customers.  It  understands  tradeoffs  -  it  may 
incorporate  the  concept  of  quality  -  reasoning  about  producing 
better or less good answers with correspondingly more or less effort, 
time, bandwidth, etc., rather than just producing “an” answer. 
4.1.4  Reasoning about Trust and Robustness 
The  KP's  combination  of  compositional  structure  and  global 
perspective creates challenges to achieving a robust and trustworthy 
design.  Because  a  functioning  KP  is  formed  at  any  time  from the 
composition  of  the  participating  networks,  the  architecture  must 
reflect the fact that parts of the KP may be corrupted or broken, that 
some  participants  may  lie  or  export deliberately flawed reasoning, 
and that system actions must be based on inputs that may be partial, 
outdated or wrong.  
This suggests that the KP may need to build, maintain, and reason 
about  trust  relationships  among  its  components  and  participants. 
Portions of the KP that misbehave may be deemed untrustworthy by 
other  portions,  and  this  information  may  be  propagated  among 
portions that have decided to trust each other. In this way, a web of 
trust  can  grow  that  identifies  KP  elements  that  seem  to  be 
trustworthy  and  shuns  elements  that  are  not.  This  introspection 
would likely require the development of trust models, and the use of 
(the 
last 
and 
learning 
scalable  techniques  (such  as  the  so-called  "small  world"  models 
[10]) to search a web of trust. 
5.  Creating a Knowledge Plane 
5.1  Possible Building Blocks 
There is substantial basic research that may be relevant to creating 
the KP.  Examples include epidemic algorithms [5] for distributing 
data, Bayesian networks for learning [4], rank aggregation to enable 
a  web  of  trust  [6],  constraint  satisfaction  algorithms  [21],  and 
policy-based  management  techniques  [23,24]. 
  All  of  these 
techniques  have  been  developed  in other networking contexts and 
seem likely to be relevant here. 
5.2  Challenges 
If we are to create a successful knowledge plane, we must grapple 
with and solve a number of challenging problems.  Because one of 
the goals of the knowledge plane is to give applications the ability to 
learn and reason about their environment, many of these problems 
sit at the boundaries of networking and artificial intelligence.2  This 
section  sketches  some  of  the  key  themes  that  run  through  these 
problems. 
How  do  we  represent  and  utilize  knowledge?  We  want  the 
knowledge  plane  to  support  reasoning  (figure  out  why  John  can’t 
reach  www.example.edu) 
time 
www.example.edu was unreachable, there was a DNS problem, so 
let’s  check  DNS  performance).    The  current  state  of  the  art  in 
reasoning and learning tells us that we need to build abstract models 
of the entities we seek to understand, and then use information to 
reason about, and potentially update, those models. Current research 
into schemes for representation, such as the  DAML Project3, may 
give us some insight into how to represent information about which 
we can reason.  However, we must also work out how to extract and 
process  all  the  valuable  information  that  presumably  is  not  in 
DAML  (or  whatever  form  we  pick)  but  in  SNMP  MIBs,  system 
logs,  and  other  disparate  places.  How  do  we  construct,  represent, 
and distribute the models that drive the reasoning? 
How  do  we  achieve  scalable  utility?  The  knowledge  plane  is  a 
building block for a network that is more reliable and more robust.  
Properly implemented, it should continue to improve the network, 
even as the network gets bigger and the knowledge plane itself gets 
bigger.    As  we  add  more  knowledge  and  new  applications  to  the 
knowledge  plane,  it  should  become  more  valuable  and  useful 
overall.  Those are hard goals: as the volume of data increases, or 
the  number  of  elements  in  a  system  grows,  we  all  too  commonly 
find bottlenecks and algorithms that do not scale. For example, if a 
network failure triggers a flood of messages into the KP, how are 
these  aggregated  and  controlled  so  that  parts  of  the  KP  are  not 
driven into overload?  We will likely find ourselves challenged to 
abstract data and impose compartments or hierarchy on portions of 
the knowledge plane to allow it to scale – how do we ensure that the 
abstraction  and  compartmentalization  adds  rather  than  subtracts 
value? 
2  For  a  general  overview  of  knowledge  representation  issues,  the  reader 
may wish to read [16]. 
3  The  DARPA  Agent  Markup  Language  is  a  set  of  extensions  to 
Extensible  Markup  Language  (XML)  and  the  Resource  Description 
Framework  to  support  ontologies  (statements  of  relationships between 
objects) for web objects.  See www.daml.org. 
How do we route knowledge?  Suppose the knowledge plane learns 
a valuable new fact, or comes to a valuable realization.  How is that 
fact  or  realization  disseminated?  Is it pushed out to all interested 
parties?  If so, how do we know who the interested parties are?  Is 
the  fact  simply  labeled  and  placed  into  the  knowledge  plane  for 
interested parties to discover?  If so, how do the interested parties 
know to look for it?  Are there ways to intelligently summarize data 
that make these push-pull tradeoffs easier? 
How do we provide the right economic incentives?  The networking 
community  has  come  to  learn  that  the  success  of  a  distributed 
system depends, in large part, on the economic incentives embedded 
in  the  system’s  design  [11,12].    The knowledge plane is rife with 
economic  challenges.    How  do  we  motivate  people  to  put 
information  into  the  knowledge  plane?    Much  of  the  data  in  the 
knowledge  plane  will  be  valuable  –  should  the  knowledge  plane 
provide  mechanisms  for  people  to  buy  and  sell  information  (or 
better,  “knowledge”)?    How  do  we  avoid  making  the  knowledge 
plane  protocols  a  point  of  economic  competition  (e.g.,  avoid  the 
vendor-specific enhancements to HTML problem)? 
How  do  we  deal  with  malicious  and  untrustworthy  components? 
There  is  no  way  that  we  can  expect  that  all  nodes  in  the  KP  are 
trustworthy,  competent  or  reliable.  Broken  nodes  may  inject 
malformed observations, some nodes may lie about their behavior, 
and some players may attempt to disrupt or confuse the KP, either as 
a way to attack the network as a whole, or to gain some advantage 
over others. How can the algorithms of the KP protect themselves, 
filter  out  bad  information,  and  reach  valid  conclusions  in  the 
presence of uncertainty and misrepresentation? The KP system will 
have to depend on approaches such as consensus, rating, and cross-
checking to detect mal-formed or malicious behavior. A design that 
is robust to inconsistent inputs is necessary for success. 
As proposed above, a model of trust should be a core building block 
of  the  KP.  Building  a  model  of  trust  requires  that  there  be  some 
persistent robust expression of identity. There is no requirement that 
the identity be linked to a actual person (although for some purposes 
this may be preferred); the minimum requirement is that identity not 
be forged or stolen, so that one can build up a consistent model of 
trust based on prior observations of that identity. 
6.  Summary 
This paper proposed to augment a network with a knowledge plane, 
a new higher-level artifact that addresses issues of “knowing what is 
going on” in the network. At an abstract level, this is a system for 
gathering  observations,  constraints  and  assertions,  and  applying 
rules  to  these  to  generate  observations  and  responses.  At  the 
physical level, this is a system built out of parts that run on hosts and 
servers within the network. It is a loosely coupled distributed system 
of global scope.   
The grander goal is to build a new generation of network, a network 
that  can  drive  its  own  deployment  and  configuration,  that  can 
diagnose  its  own  problems,  and  make  defensible  decisions  about 
how to resolve them.  
Previous attempts to do “high-level network management” have not 
been very successful; one possible reason is that previous projects 
have not been able to find the correct high-level abstractions. The 
hypothesis behind the KP is that there exist suitable ways to abstract 
detailed  behavior,  and  to  talk  about  goals,  plans,  constraints  and 
methods at a high level. The knowledge plane is much more than a 
data-base  of  facts—it  is  a  construct  that  embodies  cognitive  tools 
and learning 
7.  Acknowledgements 
This research was supported in part by the U.S. Defense Advanced 
Research  Projects  Agency  under  contracts  F30602-00-2-0553  and 
F30602-00-C-0087  (this  document  is  approved  for  public  release, 
distribution unlimited). The authors thank the SIGCOMM reviewers 
and the many participants in the DARPA Knowledge Plane Study 
for  discussions  and  comments  that  have contributed greatly to the 
development of our perspective. 
8.  REFERENCES 
[1]  D.D. Clark, “The Design Philosophy of the DARPA Internet 
Protocols,” Proc. ACM SIGCOMM ’88, pp.  102-111. 
[2]  D.S. Isenberg, “The Rise of the Stupid Network,” Computer 
Telephony, Aug 1997, pp. 16-26. 
J.  Pearl,  Probabilistic  Reasoning  in  Intelligent  Systems: 
Networks  of  Plausible  Inference.  Morgan  Kaufmann,  San 
Mateo, CA, 1988. 
[3] 
[4]  T.  Bayes,  “An  Essay  towards  solving  a  Problem  in  the 
Doctrine of Chances,” Philosophical Trans. Royal Society of 
London 53 (1763), pp. 370-418. 
[5]  A.  Demers,  D.  Greene,  C.  Hauser,  W.  Irish,  J.  Larson,  S. 
Shenker,  H.  Sturgis,  D.  Swinehart  and  D.  Terry,  “Epidemic 
Algorithms  for  Replicated  Database  Management,”  Proc. 
ACM PODC ’87, pp. 1-12. 
[6]  C.  Dwork,  R.  Kumar,  M.  Naor,  and  D.  Sivakumar,  “Rank 
aggregation methods for the Web,” Proc. 10th Intl. Conference 
on World Wide Web, pp. 613-622 (2001). 
J.  Wescott,  Automated  Network  Management,  BBN  Report 
No. 5641.  BBN Technologies (1984). 
[7] 
[8]  L.  Page,  S.  Brin,  R.  Motwani,  and  T.  Winograd,  The 
PageRank  Citation  Ranking:  Bringing  Order  to  the  Web.  
Stanford Digital Library Project (1998). 
[9]  V.  Paxson,  J.  Mahdavi,  A.  Adams  and  M.  Mathis,  “An 
Architecture  for  Large  Scale  Internet  Measurement,”  IEEE 
Communications Magazine 36 (1998), pp. 48-54. 
[10]  J.  Kleinberg,  “The  small-world  phenomena:  an  algorithmic 
perspective,”  Proc.  32nd  ACM  Symp.  Theory  of  Computing 
(2000), pp. 163-170. 
[11]  L.  McKnight  and  J.  Bailey,  ed.  Internet  Economics.    MIT 
Press (1997). 
[12]  D.D.  Clark,  J.  Wroclawski,  K.R.  Sollins,  and  R.  Braden, 
“Tussle in Cyberspace: Defining Tomorrow’s Internet,” Proc. 
ACM SIGCOMM 2002, pp. 347-356. 
[13]  M. Mathis, “Diagnosing Internet Congestion with a Transport 
Layer Performance Tool,” Proc. INET ‘96,  
[14]  J.  Padhye  and  S.  Floyd,  “Identifying  the  TCP  Behavior  of 
Web Servers,” Proc. ACM SIGCOMM 2001. 
[15]  V.N. Padmanabhan, L. Qiu and H.J. Wang, “Passive Network 
Tomography  Using  Bayesian  Inference”,  Proc.  Internet 
Measurement Workshop 2002. 
[16]  R. Davis, H. Shrobe, and P. Szolovits, “What is a Knowledge 
Representation?” AI Magazine, 14(1):17-33 (1993). 
[17]  S. Hangal and M. Lam, “Tracking down software bugs using 
International 
detection,”  Proc. 
automatic 
Conference on Software Engineering ’02. 
anomaly 
[18]  P.  Langley  and  J.  E.  Laird,  “Cognitive  Architectures:  
Research Issues and Challenges”. Draft of October 31, 2002. 
[19]  T.  Dietterich  and  P.  Langley,  “Machine  Learning  for 
Cognitive  Networks:    Technology  Assessment and Research 
Challenges”. Draft of May 11, 2003. 
[20]  T. Dietterich, “Learning and Reasoning”.  Unpublished article 
of May 26, 2003. 
[21]  V. Kumar, “Algorithms for Constraint Satisfaction Problems: 
A Survey”. The AI Magazine, 13, pp. 32-44 (1992). 
 P.  Stone  and  M.  Veloso,  “Multiagent  Systems:  A  Survey 
from a Machine Learning Perspective”, Autonomous Robots, 
8(3):345-383 (2000). 
[22] 
[23]  M. Sloman, “Policy Driven Management for Distributed 
Systems,” Jour. Network and Systems Management, vol 2, no 
4, Dec 1994, pp. 333-360. 
[24]  R. Chadha, G. Lapiotis, S. Wright, guest eds., "Policy-Based 
Networking", IEEE Network special issue, March/April 2002, 
Vol. 16 Issue 2.