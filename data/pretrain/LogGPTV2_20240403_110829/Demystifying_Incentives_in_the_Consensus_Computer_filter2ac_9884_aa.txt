title:Demystifying Incentives in the Consensus Computer
author:Loi Luu and
Jason Teutsch and
Raghav Kulkarni and
Prateek Saxena
Demystifying Incentives in the Consensus Computer
Loi Luu
School of Computing
National University of Singapore
PI:EMAIL
Jason Teutsch
School of Computing
National University of Singapore
PI:EMAIL
Raghav Kulkarni
Centre for Quantum Technologies
National University of Singapore
PI:EMAIL
Prateek Saxena
School of Computing
National University of Singapore
PI:EMAIL
ABSTRACT
Cryptocurrencies like Bitcoin and the more recent Ethereum
system allow users to specify scripts in transactions and con-
tracts to support applications beyond simple cash transac-
tions. In this work, we analyze the extent to which these
systems can enforce the correct semantics of scripts. We
show that when a script execution requires nontrivial com-
putation eﬀort, practical attacks exist which either waste
miners’ computational resources or lead miners to accept
incorrect script results. These attacks drive miners to an ill-
fated choice, which we call the veriﬁer’s dilemma, whereby
rational miners are well-incentivized to accept unvalidated
blockchains. We call the framework of computation through
a scriptable cryptocurrency a consensus computer and de-
velop a model that captures incentives for verifying com-
putation in it. We propose a resolution to the veriﬁer’s
dilemma which incentivizes correct execution of certain ap-
plications, including outsourced computation, where scripts
require minimal time to verify. Finally we discuss two dis-
tinct, practical implementations of our consensus computer
in real cryptocurrency networks like Ethereum.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General—
Security and protection; K.4.4 [Computers And Society]:
Electronic Commerce—Cybercash, digital cash
Keywords
Bitcoin; Ethereum; cryptocurrency; incentive compatibility;
veriﬁable computation; consensus computer
1.
INTRODUCTION
Cryptocurrencies such as Bitcoin [1] are attracting mas-
sive investments in computing power, and the power con-
sumed has been growing exponentially in recent years [2].
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’15, October 12–16, 2015, Denver, Colorado, USA.
c(cid:13) 2015 ACM. ISBN 978-1-4503-3832-5/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/2810103.2813659.
Bitcoin can be viewed as a large network of miners compet-
ing in a lottery that awards newly minted currency, called
Bitcoins,
in exchange for contributing computational
resources to solutions of cryptographic puzzles, or blocks.
Bitcoin miners collectively agree upon who receives the
minted Bitcoins and which transactions to accept. This pro-
cess of consensus, or agreement by majority, permanently
records decisions in a public ledger called the blockchain.
More than 50 cryptocurrencies use similar blockchain proto-
cols. While the core blockchain mechanism has been used for
establishing a public ledger of who-pays-whom transactions,
it has features that go beyond this function. Speciﬁcally, the
blockchain supports a light-weight scripting language, de-
signed primarily to allow conditional transactions which can
be repurposed for other applications. Emerging cryptocur-
rencies can now enable computation for applications such as
ﬁnancial back-oﬃces, prediction markets, distributed com-
putation (e.g.,, Gridcoin for BOINC [3]), and perhaps even
a decentralized Linux OS [4].
In Bitcoin, a transaction deﬁnes a particular activity in
the network, e.g., sending Bitcoin between users. Trans-
actions may include a script that speciﬁes a validity con-
dition. Figure 1 illustrates a basic transaction having a
script check whether the payee in the transaction has the
private key corresponding to the recipient’s Bitcoin wallet
address. More interestingly, next-generation cryptocurren-
cies such as Ethereum [5] introduce a Turing-complete script
language which allows users to encode arbitrary computa-
tion as scripts and support a variety decentralized applica-
tions. The large number of miners on the cryptocurrency
network, who both execute and verify computational tasks,
reach agreement through an established consensus protocol.
We therefore refer collectively to these miners as verifers,
and the computation framework of scriptable cryptocurren-
cies as a consensus computer. We wish to characterize the
classes of computation that users can trust a cryptocurrency
network to execute and verify correctly.
Miners have two separate functions in the consensus com-
puter: checking that blocks are correctly constructed, or
proof-of-work, and checking the validity of transactions in
each block. While verifying correct block construction re-
quires a relatively small amount of work (two SHA256 calcu-
lations), checking the validity of transactions contained in a
block can take much more time for two reasons. First, the
number of transactions per block may be large (≈ 800 in
Bitcoin at the time of writing, and its capacity may soon
be extended to support high transaction rates [6, 7]). Sec-
ond, expressive transaction scripts in emerging cryptocur-
rencies such as Ethereum can require signiﬁcant compu-
tational work to verify. These expressions create a new
dilemma for miners — whether the miners should verify
the validity of scripted transactions or accept them without
veriﬁcation. Miners are incentivized to verify all scripted
transactions for the “common good” of the cryptocurrency
so to speak. However, verifying scripts consumes compu-
tation resources and therefore delays honest miners in the
race to mine the next block. We argue that this dilemma
leaves open the possibility of attacks which result in unver-
iﬁed transactions on the blockchain. This means that some
computation tasks outsourced to cryptocurrency-based con-
sensus computers may not execute correctly.
Our work makes three new contributions. First, we de-
scribe the veriﬁer’s dilemma in emerging cryptocurrencies
which shows that honest miners have an ill-fated choice:
whether to validate a block’s transactions or not. In either
case, they are susceptible to a set of attacks from dishon-
est miners. We show that malicious miners can attack their
peers with zero ﬁnancial risk via the scriptability feature of
cryptocurrencies. Furthermore, our veriﬁer’s dilemma im-
plies that rational miners have incentive to skip the veriﬁ-
cation of expensive transactions to gain a competitive ad-
vantage in the race for the next block. However, this results
in an unvalidated blockchain containing unveriﬁed compu-
tation results.
Second, we propose a security model to formalize the con-
sensus computer. Our model allows us to study the incentive
structure and attacks that aﬀect the correctness of com-
putations performed on a consensus computer. Veriﬁable
computation methods on consensus computers diﬀer from
techniques that have been used on classical computers [8, 9,
10, 11, 12, 13, 14]. A consensus computer allows complete
decentralization of veriﬁcation — the puzzle giver need not
trust any individual veriﬁers on the network or the prover
who provides the solution. In our model, the network is as-
sumed to implicitly agree on correct transactions if and only
if the incentives donot advantage dishonest miners. Ver-
iﬁable computation techniques for classical setting have a
diﬀerent goal: that of producing an explicit cryptographic
proof of the correctness of the computation. Often, such
techniques require an involved key setup phase, and have
impractical computational overheads for the prover.
Previous works implicitly assume that the Bitcoin con-
sensus computer will always generate correct solutions, i.e.,
miners will verify and agree on correct transactions [15, 16,
17, 18, 19, 20, 21]. Our present model provides a formal
explanation as to why this assumption holds and suggests
potential constraints of consensus computation in cryptocur-
rencies with more expressive scripting languages. Speciﬁ-
cally, when the computational advantage of skipping veriﬁ-
cation is low, say ε, rational miners gain little by cheating
thus behaving honestly to give correct solutions. We call
a system restricted to such primitives an ε-consensus com-
puter and expect it to compute correctly.
We propose two mechanisms to realize an ε-consensus
computer on Ethereum. Our ﬁrst approach allows us to
achieve correctness by splitting the computation into sev-
eral smaller steps such that the consensus correctly veriﬁes
each step. This approach achieves exact correctness in re-
sults but with higher computational burden to the network.
P r e v i o u s T X : ID of p r e v i o u s t r a n s a c t i o n
Index : 0
s c r i p t S i g : Sign ( PubKey ) , PubKey
1 Input :
2
3
4
5
6 Output :
7
8
9
10
Value : 5 0 0 0 0 0 0 0 0 0
s c r i p t P u b K e y : % take S i g n a t u r e and PubKey as params
checkif Hash ( PubKey ) = Payee ’ s ID ,
checkif Sign ( PubKey ) is valid
Figure 1: Illustration of a simple transaction in Bitcoin. User’s
address is computed by hashing their public key. scriptPubKey is
the script that deﬁnes how the payee claims the recieved Bitcoin.
Our second mechanism allows for approximate correctness.
Speciﬁcally, we allow the approximation gap between sub-
mitted and correct results to be tunable to a negligible quan-
tity, at much lower computational cost. Whether one can
design a distributed, cryptocurrency system which permits
secure execution of a larger class of computations remains
an interesting open problem, as is the problem of determin-
ing the class of puzzles whose solutions admit light-weight
veriﬁcation.
Contributions. In summary, our work makes the follow-
ing contributions:
• Veriﬁer’s dilemma and attacks. We introduce a dilemma
in which miners are vulnerable to attacks regardless of
whether they verify a transaction or not. We further
show that miners are incentivized to skip the veriﬁca-
tion and perform an attack to get more advantage in
mining the next blocks.
• Security model for a Consensus computer. We for-
malize the computation and veriﬁcation by a consen-
sus computer. We investigate the incentive structure,
threat model and conditions under which a consensus
computer can realize correct outsourced computation.
• Techniques to realize an ε-consensus computer. We
propose techniques to realize our ε-consensus computer
in real cryptocurrency networks like Ethereum. We
illustrate the practical utility of our techniques with
examples from outsourced computation.
2. BACKGROUND: CRYPTOCURRENCIES
2.1 The consensus protocol
Most cryptocurrencies use a public peer-to-peer consen-
sus protocol known as Nakamoto consensus, named after
and introduced by the founder of Bitcoin [1], which does
not require a central authority. At the heart of this protocol
is a blockchain which acts as a public ledger and stores the
complete transaction history of the network. The security
of the blockchain is maintained by a cryptographic chain
of puzzles (or blocks). Miners validate and approve transac-
tions while generating, or mining, new blocks. Mining a new
block rewards newly minted coins to one of the miners that
demonstrates by consensus that it successfully solved a des-
ignated cryptographic puzzle. Figure 2 concisely illustrates
the structure of the blockchain data structure.
The protocol uses consensus in two places to make the
cryptocurrency robust. First, the network must agree on
the rules to verify valid blocks and transactions. Second,
Block
Block
PrevBlk
BlkHeader Nonce
PrevBlk
BlkHeader Nonce
Tx1
Tx2
...
Tx1
Tx2
...
Figure 2: The Blockchain in popular cryptocurrencies like Bitcoin
and Ethereum. Each block consists of several transactions (Txs).
the data in the blockchain must be consistent across miners,
so that everyone knows who owns what. Thus the blockchain
acts as a base to verify which transactions are valid.
2.2 Transactions & scriptability
A transaction in a cryptocurrency deﬁnes a particular ac-
tivity in the network of that currency. For example, Fig-
ure 1 is a basic transaction in Bitcoin which transfers Bit-
coins from sender to receiver. The scriptPubKey component
(Line 8) allows the sender to deﬁne the receiver’s address and
on which condition he can spend the Bitcoins. The sender
can dynamically program the scriptPubkey to support var-
ious use cases.
Transaction veriﬁcation. In order to verify a transaction,
one has to check whether the input provided in scriptSig
satisﬁes the logic encoded in the scritptPubkey of the Priv-
iousTX. For example, in Figure 1, miners will check if the
receiver is the intended payee (on Line 9) and he indeed
owns the payee’s address (on Line 10). The Bitcoin pro-
tocol states that the veriﬁcation of a transaction TX should
happen in two places, when:
• A new transaction is broadcast (step 1). When a user
broadcasts TX to a miner, the miner veriﬁes if the trans-
action is correct according to the latest blockchain
state. If so, he includes it in his block header to mine a
new block and propagates the transaction to his neigh-
bors.
• A new block is broadcast (step 2). When TX is included
in a newly found block, before accepting the block ev-
eryone will check the correctness of all transactions
contained in the block.
Incentivizing correctness
2.3