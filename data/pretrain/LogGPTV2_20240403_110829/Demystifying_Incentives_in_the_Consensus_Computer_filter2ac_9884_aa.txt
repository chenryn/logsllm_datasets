# Demystifying Incentives in the Consensus Computer

**Authors:**
- Loi Luu, School of Computing, National University of Singapore, PI:EMAIL
- Jason Teutsch, School of Computing, National University of Singapore, PI:EMAIL
- Raghav Kulkarni, Centre for Quantum Technologies, National University of Singapore, PI:EMAIL
- Prateek Saxena, School of Computing, National University of Singapore, PI:EMAIL

## Abstract
Cryptocurrencies like Bitcoin and Ethereum allow users to specify scripts in transactions and contracts to support applications beyond simple cash transactions. This work analyzes the extent to which these systems can enforce the correct semantics of scripts. We demonstrate that when a script execution requires significant computational effort, practical attacks exist that either waste miners' computational resources or lead miners to accept incorrect script results. These attacks create a dilemma, termed the "verifier's dilemma," where rational miners are incentivized to accept unvalidated blockchains. We refer to the framework of computation through a scriptable cryptocurrency as a consensus computer and develop a model that captures incentives for verifying computation. We propose a resolution to the verifier's dilemma that incentivizes correct execution of certain applications, including outsourced computation, where scripts require minimal time to verify. Finally, we discuss two distinct, practical implementations of our consensus computer in real cryptocurrency networks like Ethereum.

**Categories and Subject Descriptors:**
- C.2.0 [Computer-Communication Networks]: General—Security and protection
- K.4.4 [Computers And Society]: Electronic Commerce—Cybercash, digital cash

**Keywords:**
- Bitcoin, Ethereum, cryptocurrency, incentive compatibility, verifiable computation, consensus computer

## 1. Introduction
Cryptocurrencies such as Bitcoin [1] are attracting massive investments in computing power, with energy consumption growing exponentially in recent years [2]. Bitcoin can be viewed as a network of miners competing in a lottery that awards newly minted currency, called Bitcoins, in exchange for contributing computational resources to solve cryptographic puzzles, or blocks. Miners collectively agree on who receives the minted Bitcoins and which transactions to accept, recording decisions in a public ledger called the blockchain. Over 50 cryptocurrencies use similar blockchain protocols, extending their use beyond simple financial transactions to support lightweight scripting languages for conditional transactions. Emerging cryptocurrencies, such as Ethereum [5], introduce Turing-complete scripting languages, enabling arbitrary computations and supporting decentralized applications.

In Bitcoin, a transaction defines a specific activity, such as sending Bitcoins between users. Transactions may include a script that specifies a validity condition. Figure 1 illustrates a basic Bitcoin transaction, where a script checks if the payee has the private key corresponding to the recipient’s Bitcoin wallet address. In next-generation cryptocurrencies like Ethereum, a Turing-complete script language allows users to encode arbitrary computations, and the large number of miners on the network both execute and verify these tasks, reaching agreement through an established consensus protocol. We refer to these miners as verifiers, and the computation framework of scriptable cryptocurrencies as a consensus computer. Our goal is to characterize the classes of computation that users can trust a cryptocurrency network to execute and verify correctly.

Miners have two primary functions in the consensus computer: checking that blocks are correctly constructed (proof-of-work) and verifying the validity of transactions in each block. While verifying block construction requires minimal work (two SHA256 calculations), verifying transactions can be computationally intensive due to the large number of transactions per block and the complexity of expressive transaction scripts. This creates a new dilemma for miners: whether to verify the validity of scripted transactions or accept them without verification. Verifying scripts consumes computational resources, delaying honest miners in the race to mine the next block. This dilemma leaves open the possibility of attacks that result in unverified transactions on the blockchain, leading to potentially incorrect computation results.

Our work makes three key contributions:
1. **Verifier's Dilemma and Attacks:** We describe the verifier's dilemma in emerging cryptocurrencies, showing that honest miners face a difficult choice: whether to validate a block’s transactions or not. In either case, they are susceptible to attacks from dishonest miners. Malicious miners can attack their peers with zero financial risk via the scriptability feature of cryptocurrencies. Rational miners are incentivized to skip the verification of expensive transactions to gain a competitive advantage, resulting in an unvalidated blockchain containing unverified computation results.
2. **Security Model for a Consensus Computer:** We formalize the computation and verification by a consensus computer, allowing us to study the incentive structure and attacks that affect the correctness of computations. Our model assumes the network implicitly agrees on correct transactions if and only if the incentives do not favor dishonest miners. We propose an ε-consensus computer, where the computational advantage of skipping verification is low, ensuring correct solutions.
3. **Techniques to Realize an ε-Consensus Computer:** We propose two mechanisms to realize an ε-consensus computer on Ethereum. The first approach splits the computation into smaller steps, ensuring correct verification at each step but with higher computational burden. The second mechanism allows for approximate correctness, permitting a negligible approximation gap at much lower computational cost.

## 2. Background: Cryptocurrencies

### 2.1 The Consensus Protocol
Most cryptocurrencies use a public peer-to-peer consensus protocol known as Nakamoto consensus, introduced by the founder of Bitcoin [1]. At the heart of this protocol is a blockchain, a public ledger that stores the complete transaction history of the network. The security of the blockchain is maintained by a cryptographic chain of puzzles (blocks). Miners validate and approve transactions while generating new blocks. Mining a new block rewards newly minted coins to one of the miners that demonstrates by consensus that it successfully solved a designated cryptographic puzzle. Figure 2 illustrates the structure of the blockchain data structure.

The protocol uses consensus in two places to ensure robustness:
1. The network must agree on the rules to verify valid blocks and transactions.
2. The data in the blockchain must be consistent across miners, ensuring everyone knows who owns what.

### 2.2 Transactions & Scriptability
A transaction in a cryptocurrency defines a specific activity, such as transferring Bitcoins from sender to receiver. The `scriptPubKey` component allows the sender to define the receiver’s address and the conditions under which the receiver can spend the Bitcoins. For example, in Figure 1, miners check if the receiver is the intended payee and if they own the payee’s address. The Bitcoin protocol states that transaction verification should occur in two places:
1. When a new transaction is broadcast: A miner verifies the transaction according to the latest blockchain state and includes it in his block header to mine a new block.
2. When a new block is broadcast: Before accepting the block, everyone checks the correctness of all transactions contained in the block.

### 2.3 Incentivizing Correctness
To ensure the correctness of transactions, the protocol must provide appropriate incentives for miners to verify transactions. This is crucial for maintaining the integrity of the blockchain and preventing attacks.