commpage on x86:
(gdb) dump memory commpage.x86 0xffff0000 0xffff4000
Now you can search for useful sequences in the fi le commpage.x86 using
simple command-line tools. Recall that the exec-payload-from-heap stub from
earlier required the address of an instruction to transfer control to the address
stored in EAX. Either a jump or a call instruction indirect to EAX would work,
as would a push EAX instruction followed by a ret instruction. The following
listing shows the assembled machine code for these instructions.
00000000 FFD0 call eax
00000002 FFE0 jmp eax
00000004 50 push eax
00000005 C3 ret
Now you just need to search for the byte sequence FFD0, FFE0, or 50C3 in the
commpage. You can do so using hexdump and grep, as in the following code,
with a grep expression that matches any of the suffi cient two-byte sequences.
Note that this may miss some sequences that “wrap around” the ends of lines
in the hexdump, but it suffi ces for these purposes:
% hexdump commpage.x86 | grep -E ‘ff d0|ff e0|50 c3’
00002f0 00 17 ff ff ff d0 2b 05 70 00 ff ff 1b 15 74 00
0000860 1d 0e ff ff 51 56 57 b8 00 12 ff ff ff d0 83 c4
0001220 ff d0 83 c4 0c 8b 7d 08 8b 75 0c 8b 4d 10 01 de
00013e0 ae f8 85 c9 74 0d 51 56 57 b8 a0 07 ff ff ff d0
This simple search found several FFD0 (call EAX) sequences. The fi rst col-
umn of the hexdump output is the offset in the fi le. If you add that to the base
9955336633cc0077..iinndddd 118833 11//2255//0099 44::4411::4477 PPMM
184 Part III ■ Exploitation
address of the commpage, you will get the actual memory address of the useful
instruction sequence. For example, the third match, found at offset 0x1220 of the
commpage.x86 fi le, would be found in memory at address 0xffff1220. We chose
not to use this address because the last byte, 0x20, is also the ASCII byte value of
the space character, which sometimes causes problems if it is parsed by the target
program. The fourth match, at fi le offset 0x13ee, would be found in memory at
0xffff13ee, and this is the exact address that we used earlier to direct execution
into the EAX register in our exec-payload-from-heap stub described earlier.
Conclusion
This chapter explained how the stack is used in both the PowerPC and x86
architectures, the two most common architectures for binaries in Mac OS X
Leopard. In addition, we developed and demonstrated several techniques for
exploiting stack-buffer overfl ows on these architectures. These techniques
include the following:
■ Returning directly into the attack string on the stack (PowerPC)
■ Returning into a register-indirect branch to the attack string
(PowerPC)
■ R eturning into the system() function to execute a shell command line
(x86)
■ Returning multiple times to execute a copied payload from the heap
(x86)
The next chapter will continue focusing on exploit-injection vectors, focusing
on obtaining control when exploiting heap-buffer overfl ows.
References
Dai Zovi, Dino. “Mac OS Xploitation,” presented at HITBSecConf2008.
Hyde, Randall. The Art of Assembly Language, No Starch Press, 2003.
Solar Designer. “‘return-to-libc’ attack.” Bugtraq, Aug. 1997.
Spafford, Eugene, H. “The Internet Worm Program: An Analysis,” Purdue
Technical Report CSD-TR-823, 1988.
9955336633cc0077..iinndddd 118844 11//2255//0099 44::4411::4477 PPMM
CHAPTER
8
Exploiting Heap Overfl ows
Heap buffer overfl ow vulnerabilities are typically no more diffi cult to identify
in source code than are stack buffer overfl ows, and their exploitation is proving
to be as well understood as the exploitation of stack buffer overfl ow vulner-
abilities. In rich applications, such as network servers and web browsers, where
the remote attacker can infl uence heap allocation, skillful heap manipulation is
extremely important for crafting reliable exploits, and a good understanding of
how the heap works is crucial to being able to perform useful heap manipula-
tions. In this chapter we will dissect the default Mac OS X heap implementa-
tion and describe how an attacker may manipulate it to exploit heap buffer
overfl ows reliably.
The Heap
The heap is a memory management facility used to support dynamically allo-
cated memory. Chapter 7, “Exploiting Stack Overfl ows,” described the stack,
which is used for automatically allocated memory, typically for local function
variables. Memory for the function’s local variables stored in stack memory is
automatically allocated when the function is called and automatically freed
when the function returns. Memory allocated from the heap, by contrast, is freed
only when the program explicitly requests it. The heap is used to implement
185
9955336633cc0088..iinndddd 118855 11//2255//0099 44::4422::0099 PPMM
186 Part III ■ Exploitation
dynamic memory management in C, C++, and Objective-C using malloc()/
free(), new/delete, and alloc/release, respectively.
Mac OS X allows the heap allocator implementation to be chosen dynamically.
This is useful for employing special debugging heaps to assist in fi nding heap
memory–related software bugs. In addition, a process may use multiple heaps
and allocate memory selectively from each of them. These separate heaps are
called zones, and each zone may use a different heap allocator implementation.
A process may use a separate zone, for instance, if it knows that it will free a
large batch of memory at one time. Freeing the entire zone at once will be much
more effi cient than freeing each allocation individually. By default, a Mac OS X
process has a single zone, the MallocDefaultZone, and it uses the default alloca-
tor, the scalable zone allocator, which we describe in the next section.
The Scalable Zone Allocator
The default Mac OS X malloc implementation is called the scalable zone (or
szone) allocator. This allocator’s implementation can be found in scalable_malloc.c
in the Mac OS X Libc source-code project and, being exceptionally well com-
mented, it serves as its own best documentation. Alternatively, consult Amit
Singh’s Mac OS X Internals: A Systems Approach (Addison-Wesley, 2006) for an
extended discussion on the scalable zone allocator as it was implemented in
Tiger and previous Mac OS X releases. In addition, there has been some research
into exploiting the heap on prior Mac OS X releases, such as Nemo’s paper
“OS X Heap Exploitation Techniques” in Phrack 63. In our brief description
of the scalable zone allocator here, we will make explicit where the Leopard
implementation differs from previous versions. We will briefl y cover several
important scalable zone heap concepts, including regions, metadata headers,
free lists, and the last-free cache.
Regions
The szone allocator treats allocations of various sizes differently, categorizing
allocations as tiny, small, large, or huge. A tiny allocation is less than or equal to
496 bytes; a small allocation is greater than 496 but less than 15,360 (0x3c00)
bytes; a large allocation is greater than 15,360 but less than or equal to 16,773,120
(0xfff000) bytes; fi nally, a huge allocation is anything larger. Tiny and small
requests are allocated out of dedicated areas of memory called regions. Large
and huge requests are handled by allocating pages of memory from the kernel
with vm_allocate(). As most heap overfl ows occur in smaller-sized buffers, we
will limit our discussion here to the region-based small and tiny allocations in
32-bit processes.
9955336633cc0088..iinndddd 118866 11//2255//0099 44::4422::0099 PPMM
Chapter 8 ■ Exploiting Heap Overflows 187
The szone maintains a hash of tiny and small regions. Each region is essen-
tially a separate subheap for allocations of a certain size. The region consists of
an array of fi xed-size blocks (called quanta) of memory and some metadata to
record which quanta are in use and which are free. A single tiny region is 1MB,
uses an allocation quantum of 16 bytes, and is used for memory allocations
between 1 and 496 bytes. A small region is 8MB, uses an allocation quantum of
512 bytes, and is used for memory allocations between 497 and 15,359 bytes.
The metadata header includes a header bitfi eld where a set bit indicates that
the specifi ed quantum is the fi rst quantum in an allocated block. In addition,
the header uses an in-use bitfi eld where each bit refers to a specifi c quantum
within the region. More regions are allocated as needed and kept in the szone’s
region hash. The available memory across multiple regions is managed through
the szone’s free lists.
The szone maintains 32 free lists each for tiny and small allocations. There
are 31 free lists for free blocks of size 1 quantum through 31 quanta (recall that
a region is used for allocations of size 1 through 31 quanta). The fi nal free list is
for blocks that are larger than 31 quanta, which may occur when adjacent blocks
are coalesced, or joined together. To satisfy an allocation of a given size, the free
lists are searched for the fi rst free list that is not empty and contains blocks large
enough to satisfy the request. If the block on the free list is too large, it is split
into two blocks; one block is used to satisfy the memory-allocation request and
the other is placed back onto an appropriate free list.
The last-free cache is a single pointer set to the most recently freed block. If
an allocation request is made for the same size as the block in the last-free block,
it is returned immediately. Once another block is freed, the previous last-free
block is moved onto an appropriate free list.
To see how these management structures affect memory allocation and free-
ing, the next section will observe the behavior of the heap through some simple
test programs.
Freeing and Allocating Memory
To demonstrate how the heap uses the free lists, last-free cache, and coalescing,
we are going to write and run some simple test programs. Some care must be
taken in writing these programs because standard library functions like printf()
may make their own calls to malloc() and affect the state of the heap. For that
reason, we will examine values in the debugger rather than through print state-
ments. We are also going to examine the state of the heap in the reverse order
of what you’d expect. We’ll fi rst examine how freeing memory affects the heap,
and then what happens once previously freed memory is reallocated.
First we’ll demonstrate the heap free list. Figure 8-1 shows how a free
list normally works. The free lists are stored in an array, with each element
9955336633cc0088..iinndddd 118877 11//2255//0099 44::4422::0099 PPMM
188 Part III ■ Exploitation
corresponding to free blocks of different sizes in terms of the region quantum.
In the fi gure, there are three free blocks sized 1 quantum (16 bytes or less) and
no other free blocks. The three free blocks are linked together in a doubly linked
list. When a block is placed on the free list, the fi rst few bytes in the memory
block are used for heap metadata. In Leopard’s szone allocator, the heap uses
the fi rst few bytes in the memory block to store a pointer to the previous block
in the free list, a pointer to the next block in the free list, and the size of the
current block in number of quanta as an unsigned short value. To detect heap
memory corruption, the linked list pointers are checksummed by shifting their
values right by 2 bits and performing a bitwise OR operation with 0xC0000003.
Since all heap blocks are aligned by at least 16 bytes (the size of the tiny-region
quantum), these unused bits are used to try to detect accidental overwrites.
They do not, however, detect intentional overwrites as we will demonstrate later
in this chapter. The checksum operation is pretty important, so we’ll provide
some examples to make sure it is clear:
checksum(NULL) = (0 >> 2) | 0xc0000003 = 0xc0000003
checksum(0xdeadbeef) = 0x7ab6fbbc | 0xc0000003 = 0xfab6fbbf
unchecksum(0xfeedface) = (0xfeedface  32 * TINY_QUANTUM NULL
0x00: previous pointer
0x04: next pointer
0x08: block size
Free Block
0x00: previous pointer
0x04: next pointer
0x08: block size
NULL
Figure 8-1: The tiny region’s free lists
In Tiger, heap blocks on the free list look mostly the same. The notable differ-
ence is in the checksumming algorithm used to detect heap corruption. Whereas
Leopard’s szone encoded the pointers with the checksum, Tiger’s szone uses
the fi rst word in the free block to store a checksum computed by XORing the
free block’s previous pointer, the next pointer, and the magic constant 0x357B.
9955336633cc0088..iinndddd 118888 11//2255//0099 44::4422::0099 PPMM
Chapter 8 ■ Exploiting Heap Overflows 189
This does not require decoding the pointers, but is easily checked by the
following:
block->cksum == (block->prev ^ block->next ^ 0x357b)
We will examine the tiny region fi rst. Consider the test program in the fol-
lowing code. It simply allocates three identically sized buffers, but frees them
in a different order. We use identical sizes so that all the buffers are put onto
the same free list.
#include 
#include 
#define ALLOC_SIZE 496
int main(int argc, char* argv[])
{
unsigned long *ptr1, *ptr2, *ptr3;
ptr1 = (unsigned long*)calloc(ALLOC_SIZE,1);
ptr2 = (unsigned long*)calloc(ALLOC_SIZE,1);
ptr3 = (unsigned long*)calloc(ALLOC_SIZE,1);
_asm(“int3”);
free(ptr1); // Place ptr on free list
_asm(“int3”);
free(ptr3); // Place ptr3 on free list
_asm(“int3”);
free(ptr2); // Coalesce all three ptrs
_asm(“int3”);
return 0;
}
When this program is run in a debugger, it will automatically break between
invocations of free() due to the use of the int3 assembly instructions. In the
following example, we run it in a debugger and observe the values of the heap
metadata after each free().
% gdb tiny1
GNU gdb 6.3.50-20050815 (Apple version gdb-952) (Sat Mar 29 03:33:05 UTC
2008)
Copyright 2004 Free Software Foundation, Inc.
GDB is free software, covered by the GNU General Public License, and you
are
welcome to change it and/or distribute copies of it under certain
conditions.
Type “show copying” to see the conditions.
There is absolutely no warranty for GDB. Type “show warranty” for
9955336633cc0088..iinndddd 118899 11//2255//0099 44::4422::0099 PPMM
190 Part III ■ Exploitation
details.
This GDB was configured as “i386-apple-darwin”…Reading symbols for
shared libraries … done
(gdb) run
Starting program: /Volumes/Data/Users/ddz/Projects/LeopardHunting/
Chapters/08 Exploiting Heap Overflows/Code/tiny1
Reading symbols for shared libraries ++. done
Program received signal SIGTRAP, Trace/breakpoint trap.
main (argc=1, argv=0xbffff6c0) at tiny1.c:15
15 free(ptr1); // Place ptr on free list
(gdb) x/3x ptr1
0x100120: 0x00000000 0x00000000 0x00000000
At this point it has allocated ptr1 with calloc(), which clears memory, so the
fi rst bytes of the heap block are all NULL. Now we continue execution to call
the fi rst free().
(gdb) cont
Continuing.
Program received signal SIGTRAP, Trace/breakpoint trap.
main (argc=1, argv=0xbffff6c0) at tiny1.c:17
17 free(ptr3); // Place ptr3 on free list
(gdb) x/3x ptr1
0x100120: 0xc0000003 0xc0000003 0x0000001f
As you can see, the fi rst bytes of ptr1 have been overwritten and used for
heap metadata. The fi rst two longs (the previous and next pointers, respectively)
have been overwritten with the checksummed value of NULL. This means ptr1
is the only entry in the free list. The size fi eld is kept in the third word and has
the value of 0x1f, which shows that the heap block is 31 × 16 (the tiny-region
quantum size) or 496 bytes long. Notice that memory allocation requests are
always rounded up to the nearest multiple of the region quantum size. Now
observe what happens when ptr3 is freed:
(gdb) cont
Continuing.
Program received signal SIGTRAP, Trace/breakpoint trap.
main (argc=1, argv=0xbffff6c0) at tiny1.c:19
19 free(ptr2); // Coalesce all three ptrs
(gdb) x/3x ptr1
0x100120: 0xc0040143 0xc0000003 0x0000001f
(gdb) x/3x ptr3
0x100500: 0xc0000003 0xc004004b 0x0000001f
9955336633cc0088..iinndddd 119900 11//2255//0099 44::4422::0099 PPMM
Chapter 8 ■ Exploiting Heap Overflows 191
You can now see that both ptr1 and ptr3 are on the free list. The previous
pointer for ptr3 is NULL (checksummed). It is easy to tell that the next pointer
is not NULL, but you’ll have to decode it to determine where it points:
unchecksum(0xc004004b) = (0xc004004b << 2) & 0x3ffffffc =
0x10012c
The next pointer within ptr3 points to ptr1, so it is now the head of the list.
The next pointer for ptr1 is NULL, so it is at the tail of the list. Both blocks are
also the same size. Now, when the program frees ptr2, which was allocated in
between both ptr1 and ptr3 in the tiny region, something very interesting will
happen.
gdb) cont
Continuing.
Program received signal SIGTRAP, Trace/breakpoint trap.
main (argc=1, argv=0xbffff6c0) at tiny1.c:22
22 return 0;
(gdb) x/3x ptr2
0x100310: 0x00000000 0x00000000 0x00000000
(gdb) x/3x ptr1
0x100120: 0xc0000003 0xc0000003 0x0000005d