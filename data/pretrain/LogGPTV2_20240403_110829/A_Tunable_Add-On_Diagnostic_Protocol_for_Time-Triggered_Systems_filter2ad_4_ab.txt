round k
round k+1
round k+2
round k+3
(diagnosed round)
Node 1
Node 2
Node 3
Node 4
sending
slot
1
2
3
4
1
2
3
4
1
2
3
4
1
2
3
4
Internal scheduling of diagnostic jobs 
within nodes (unconstrained)
Global comm. scheduling
If a FAULT OCCURS in 
a slot of round k...
Phase 1
... each diagnostic job has the chance
to observe it  before the end of round k+1 ...
Phase 2
... to send its local syndrome
before the end of round k+2 ...
Phases 3, 4 and 5
... and to receive and analyze all local syndromes on round k before 
 the end of round k+3. Penalty/reward counters can be now updated
Figure 1: High level overview of the diagnostic protocol in a system with four nodes
The phases of the protocol are executed in consecutive
TDMA rounds, and phases of multiple instances of the pro-
tocol are interleaved at each execution of diagi (Fig. 1). The
pseudo code of the diagnostic job diagi, running on each
node i, is presented in Alg. 1.
Consistent location of faulty senders. Local detection
and aggregation entail reading the interface variables and
their validity bits. We do not constrain the scheduling of
the diagnostic jobs in a round. Thus, we need to consider
that, in a TDMA communication scheme, diagnostic jobs
running on different nodes can see different views of the in-
terface variables, as the freshness of the read data can vary.
Consider a diagnostic job diagi which, at round k, reads
from the interface variables the values of the diagnostic
messages dm1, . . . , dmN and their validity bits. As di-
agnostic messages are sent at every round, the read values
were sent (following the sending order) either on round k or
k−1. Hence there is a locally known integer li ∈ [0, N −1],
determined by the internal schedule of diagi within node i,
such that values of dm1, . . . , dmli were sent in round k,
while values dmli+1, . . . , dmN were sent in round k − 1
(the same holds for their validity bits)1. For all diagnostic
jobs executed in round k to consistently use aligned diag-
nostic messages (resp. validity bits) from round k − 1, the
protocol executes a read alignment operation (Fig. 2; Alg. 1,
Lines 3-6). Read alignment combines in variables al dmj
(al lsj ) values prev dm[1, i] (prev ls[1, i]) from the previ-
ous round and of curr dm[i+1, N ] (curr ls[i+1, N ]) from
the current. This requires buffering of messages and va-
lidity bits (lines 16-17), and introduces additional delays in
the communication.
For local detection, the validity bits are read (Alg. 1,
line 2) and combined using read alignment (lines 3-6). The
vector al ls contains in round k the local syndromes corre-
sponding to the messages sent in round k − 1.
During the dissemination phase a send alignment is also
needed to ensure that, despite unconstrained node schedul-
ing, all local syndromes sent in round k refer to a same
1If a diagnostic job diagi is executed after the last sending slot of a
round and can read data from round k from each node, we treat it as it was
executed in round k + 1 and set li = 0 accordingly.
previous diagnosed round, as required by the aggregation
phase executed in the following round. We deﬁne the pred-
icate send curr roundj to be true if, according to the in-
ternal schedule of node i, the diagnostic messages formed
by the diagnostic job diagj at round k can be sent in round
k (i.e., diagj is completed before the sending slot of the
node). If the predicate holds for all nodes, all current local
syndromes can be immediately written in the interface state
(line 7) and the latency of the protocol is reduced. However
this global condition may not hold, or it may be impossible
to locally evaluate it (e.g. if the node scheduling is dynamic,
see Sec. 10). In these cases, send alignment is used to deter-
mine the data to be written in the interface variables, which
will be later sent. If a job completes its execution before
the sending slot of its node, it writes the local syndromes
obtained in the previous round; otherwise the current local
syndromes are written (lines 8-10).
The aggregation phase ﬁrst reads the values of the local
syndromes sent by all diagnostic jobs through the diagnos-
tic messages (line 1). A special error value ε is assigned to
local syndromes whose validity bit is 0. Read alignment is
used to guarantee that all jobs executed in round k form a
diagnostic matrix using local syndromes sent in round k−1,
which refer to the same diagnosed round (lines 3-6); vector
al dmj represents the jth row of the matrix. The jth ele-
ment of the local syndrome sent by node i to node k can
assume three possible values: 0, if i was not able to receive
the message from node j in the slot of interest; 1, if i was
able to receive the message from j; ε, if k was not able to
receive the local syndrome from i correctly. For example,
Table 1 shows the diagnostic matrix formed in case node 3
Diagnostic messages (interface variables):
values read in round k-1
prev_dm1 prev_dm2
prev_dm3
prev_dm4
Aligned values 
(al_dmj)
k-1
k-1
k-2
k-2
values read in round k
Round of msg update
curr_dm1 curr_dm2
curr_dm3
curr_dm4
k
k
k-1
k-1
li = 2
Update order
Figure 2: Example of read alignment (round k, li = 2)
Table 1: Example diagnostic matrix (3-4 benign faulty)
Accuser node Local syndr.
Accused node
1
4
2
3
Node 1
Node 2
Node 3
Node 4
al dm1
al dm2
al dm3
al dm4
Voted cons hv
-
1
ε
ε
1
1
-
ε
ε
1
0
0
-
ε
0
0
0
ε
-
0
and 4 are two (coincident) benign faulty senders in both the
diagnosed round and the dissemination round.
As faults can occur during the dissemination phase of the
protocol, the diagnostic matrices can contain incorrect or
incomplete information, and different nodes can form dif-
ferent diagnostic matrices due to asymmetric faults. How-
ever, a consistent global view on faults in the diagnosed
round can be obtained by combining different local views
using a hybrid voting function H-maj(V ) (Eqn. 1) over the
columns V of the matrix. The opinion of a node about itself
is considered unreliable and discarded to tolerate asymmet-
ric faults (see Sec. 6). Thus, voting is executed over the
(N − 1)-tuple V of local syndromes representing the opin-
ions of the other nodes (lines 11-13). In order to tolerate
benign faults, a hybrid voting function excludes erroneous
votes ε from V (excl(V, ε)) before calculating the major-
ity [18] (see example in Table 1).
As for validity bits and local syndromes, the value 0 de-
notes a faulty node. In case no correct local syndrome is
available (|excl(V, ε)| = 0), the voting function can not
reach a decision. This can happen only if at least N − 1
nodes are not able to send their local syndrome and a node
is not able to determine whether it was faulty in the diag-
nosed round. In this case, the protocol cannot do anything
else than relying on the outcome of the collision detector in
the diagnosed round (line 14). The consistent health vector
cons hv is the outcome of the hybrid majority voting and
contains, at round k, the agreed view on the health of each
node at the diagnosed round, i.e., k − 3 or k − 2 (see Sec. 6).
H-maj(V ) =
⊥ if |excl(V, ε)| = 0
v
if v = maj(excl(V, ε))
and |excl(V, ε)| ≥ 1
1
else
(1)
Filtering unhealthy nodes. The consistent health vector
is given as an input (Alg. 1, line 15) to the penalty/reward
algorithm (Alg. 2), which is used to handle transient faults
and discriminate them from intermittent and permanent
faults. Each node keeps a penalty and a reward counter
for each node in the system in the vectors penalties and
rewards. They are both initially set to 0. Whenever the
node is detected as faulty, the corresponding penalty is in-
creased by each node depending on the criticality of the jobs
allocated on the node. Criticality levels for each node are
stored in the vector criticalities. We discuss the selection
Algorithm 1: Node i diagnostic job diagi
begin
// Phases 1 and 3 - Local detection and Aggregation
// (read alignment)
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
hcurr dm1, . . . , curr dmN i ←
read iface(dm1, . . . , dmN );
curr ls ← read vbits(dm1, . . . , dmN );
for j ← 1, . . . , li do
al dmj ← prev dmj ;
al ls[j] ← prev ls[j];
for j ← li + 1, . . . , N do
al dmj ← curr dmj ;
al ls[j] ← curr ls[j];
// Phase 2 - Dissemination
// (send alignment)
if ∀j : send curr roundj then write iface(al ls);
else if send curr roundi then
write iface(prev al ls);
else write iface(al ls);
// Phase 4 - Analysis
// (consistent location of benign faulty senders)
for j ← 1, . . . , N do
diag ← H-majhal dm1[j], . . . , al dmj−1[j],
al dmj+1[j], . . . , al dmN [j]i;
if diag 6= ⊥ then cons hv[j] ← diag;
else cons hv[j] ← coll-det(diagnosed round);
// Phase 5 - Update counters
// (decision on node isolation)
active ← active AND pen rew(cons hv);
// (buffering for read and send alignment)
hprev dm1, . . . , prev dmN i ←
hcurr dm1, . . . , curr dmN i;
prev ls ← curr ls;
prev al ls ← al ls;
end
of such criticality levels in Sec. 9. If no fault is successively
detected the reward is increased by one. The algorithm uses
two constants, a penalty threshold P and a reward thresh-
old R. After a bounded amount of time either of the two
thresholds is exceeded, resulting in isolation of the node or
reset of the counters respectively.
The two counters, and the corresponding thresholds,
represent two different kinds of information:
the reward
counter (threshold) indicates the (minimum) number of
consecutive fault-free slots a node needs to display be-
fore the memory of its previous faults is reset; the penalty
counter (threshold) indicates the (maximum) number of
consecutive faulty slots a node is allowed to display before
isolation.
As the health assessment of the system stored in vector
cons hv is consistently calculated in Alg. 1, the penalty and
reward counters are always consistently updated, and isola-
tions are decided in the same round by all obedient nodes.
The vector active contains the status of activity of each
node and represents the internal output of the diagnostic
protocol (Alg. 1, line 15). Eventual trafﬁc generated by
isolated nodes must be ignored by the communication con-
trollers of all other nodes. Upon reintegration of a node, the
value of the corresponding element is set back to the initial
Algorithm 2: The p/r algorithm
begin
for i ← 1, . . . , N do
curr act[i] ← 1;
if cons hv[i] = 0 then
penalties[i] ← penalties[i] + criticalities[i];
rewards[i] ← 0;
if penalties[i] ≥ P then curr act[i] ← 0;
else
if penalties[i] > 0 then
rewards[i] ← rewards[i] + 1;
if rewards[i] ≥ R then
penalties[i] ← 0;
rewards[i] ← 0;
return curr act;
end
value 1 (up) and the trafﬁc considered again. As the prob-
lem of reintegration is outside the scope of this paper, the
algorithm only sets activity bits to 0 (isolated).
6. Properties of the diagnostic protocol
In this section we prove the properties of the diagnostic
information stored in the consistent health vector cons hv.
We show the experimental evaluation used to practically
tune the parameters of the p/r algorithm in Sec. 9.
The properties of the consistent health vector are:
- Correctness: a correct sender is never diagnosed as
faulty by obedient nodes;
- Completeness: a benign faulty sender is always diag-
nosed as faulty by obedient nodes;
- Consistency: diagnosis is agreed by all obedient nodes.
Our protocol does not discriminate between node and
link faults. Transient external faults in the communication