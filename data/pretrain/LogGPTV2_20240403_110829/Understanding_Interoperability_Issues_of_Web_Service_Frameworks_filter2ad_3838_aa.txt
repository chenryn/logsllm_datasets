title:Understanding Interoperability Issues of Web Service Frameworks
author:Ivano Alessandro Elia and
Nuno Laranjeiro and
Marco Vieira
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Understanding Interoperability Issues of  
Web Service Frameworks 
Ivano Alessandro Elia, Nuno Laranjeiro, Marco Vieira 
CISUC, Department of Informatics Engineering 
University of Coimbra, Portugal 
{ivanoe, cnl, mvieira}@dei.uc.pt
the 
invocation  of  remote 
Abstract—Web  Services  are  a  set  of  technologies  designed  to 
support 
services  by  client 
applications,  with  the  key  goal  of  providing  interoperable 
application-to-application interaction while supporting vendor 
and platform independence. The goal of this work is to study 
the real level of interoperability provided by these technologies 
through a massive experimental campaign involving a wide set 
of  very  popular  frameworks  for  web  services,  implemented 
using seven different programming languages. We have tested 
the inter-operation of eleven client-side framework subsystems 
with 
server-side 
implementations,  each  one  hosting  thousands  of  different 
services.  The  results  highlight  numerous  situations  where  the 
goal  of  interoperability  between  different  frameworks  is  not 
met  due  to  problems  both  on  the  client  and  the  server  side. 
Moreover, we have identified issues also affecting interactions 
between  the  client  and  server  subsystems  of  the  same 
framework. 
the  most  widely  used 
three 
of 
Keywords-web  service;  interoperability;  WS-I  Basic  Profile; 
web service framework 
I. 
(WS)  are 
Web  services 
 INTRODUCTION  
this 
frequently  deployed 
in 
environments  where  application-level  interoperability  (i.e., 
the ability of making systems to operate in conjunction [1]) 
is  a  critical  feature.  Typical  deployment  environments 
include 
large-scale  business-to-business  collaborations, 
safety-critical  environments,  and  industrial  manufacturing, 
just 
type  of  environments, 
interoperability  issues  may  result  in  severe  financial  and 
reputation costs for the service providers [2]. 
to  name  a  few.  In 
 The  WS  technology  is  based  on  open  XML  standards 
and consists of self-describing components that can be used 
by  other  applications  across  the  web  in  a  platform-
independent manner, being supported by standard protocols 
such as SOAP and WSDL [3]. Platform independence is the 
key  goal  of  the  WS  technology,  which  defines  a  set  of 
mechanisms  to  assure  that  two  applications  are  able  to 
exchange  information,  even  if  they  have  been  built  using 
different languages (e.g., Java, C#, Python) or deployed on 
top of different WS frameworks (platforms for creating and 
deploying web services, such as Axis 2 or JBossWS for Java, 
gSOAP or Axis2/C for C, etc.). 
In  theory,  WS  frameworks  include  all  the  mechanisms 
needed to assure interoperable interaction, namely: 1) server-
side  interface  description  generation  tools  that  generate  a 
WSDL document, which is programming language agnostic 
and describes the interface of a service (i.e., it describes the 
list  of  available  operations,  input  and  output  parameters, 
among  other  aspects);  and  2)  client-side  artifact  generation 
tools that, in general, use the service description to produce 
code  that  in  turn  can  be  used  by  developers  to  invoke  the 
service.  In  general,  both  server-side  and  client-side  tools 
referred  are  subsystems  of  a  given  software  framework, 
which  also  provides  facilities  for  runtime  communication 
between client and server (e.g., processing of SOAP requests 
and responses after deployment). 
provides 
Although interoperability is the major goal of WS, field 
experience and previous research studies [4]–[8] suggest, in 
a  quite  sparse  manner,  that  not  only  full  interoperability  is 
difficult  to  reach,  but  also  that  it  has  not  yet  been  fully 
achieved  by  current  WS  frameworks.  This  is  supported  by 
the  Web  Services  Interoperability  Organization  (WS-I)  [9], 
which has been working, for many years now, on solving or 
mitigating the interoperability problems by polishing the WS 
specifications.  Despite  the  WS-I  major  effort,  experience 
weakly suggests that even web services that conform to WS-
I  profiles  may  also  present  interoperability  issues.  The 
problem  is  that  developers  many  times  create  and  deploy 
their web services assuming that the underlying framework 
they 
interoperability.  Thus, 
programmers  are  frequently  unaware  that  by  choosing  a 
specific  framework  to  deploy  their  services  they  might  be 
introducing interoperability issues and thus excluding some 
frameworks  from  inter-operating  with  their  service.  To  the 
best of our knowledge, a practical perspective that allows us 
to systematize this kind of knowledge is still missing. 
this  practical  experience  report  we  present  an 
experimental  study  that,  from  a  pragmatic  perspective, 
allows  getting  insights  on  how  interoperable  web  service 
frameworks are. The approach used in this study consists of 
two phases: 1) a Preparation Phase where we select a set of 
WS frameworks for the server and client sides, and create a 
set  of  services  for  testing;  2)  a  Testing  Phase  where  we 
generate  the  services  description  documents  and  then  use  a 
set  of  frameworks  at  the  client-side  to  generate  and  also 
compile  (when  required)  client  artifacts,  based  on  those 
service descriptions. 
The goal of this work is to understand if the client-side 
subsystem  of  all  client  frameworks  selected  for  testing  can 
actually inter-operate with the server-side sub-system of all 
server  frameworks  participating  in  the  tests.  For  the  time 
being,  we  assess  the  frameworks  interoperability  for  the 
generation  of  service  interface  descriptions,  generation  of 
choose 
full 
In 
978-1-4799-2233-8/14 $31.00 © 2014 IEEE
978-1-4799-2233-8/14 $31.00 © 2014 IEEE
978-1-4799-2233-8/14 $31.00 © 2014 IEEE
DOI 10.1109/DSN.2014.40
DOI 10.1109/DSN.2014.40
DOI 10.1109/DSN.2014.40
323
323
323
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:26:18 UTC from IEEE Xplore.  Restrictions apply. 
the 
critical 
Fig.  1  represents  a  typical  web  services  inter-operation 
scenario  using  two  different  frameworks  at  the  client  and 
server  sides,  which  are  placed  at  each  endpoint  of  the 
interaction.  In  the  scenario  represented,  the  client  uses  the 
client-side subsystem of framework B, while the server uses 
the  server-side  subsystem  of  framework  A,  however  these 
could also be two subsystems of the same framework. 
As shown, a set of five steps needs to be performed for a 
client to invoke a remote web service operation. These steps 
represent 
platform-level 
interoperability  issues  can  arise.  In  this  paper  we  focus  on 
the  first  three,  in  which  problems  may  prevent  any  further 
inter-operation  (the  analysis  of  the  Communication  and 
Execution steps is out of the scope of this paper). 
points  where 
The  Service  Description  Generation  Step  (1)  typically 
occurs  automatically  when  the  service  is  deployed  at  the 
server,  although  it  can  also  be executed  manually  by  using 
directly  the  WS  framework  tools  and  the  service  code  as 
input.  The  result  of  this  step  is  a  WSDL  document  that 
provides the information needed by a client using framework 
B  to  invoke  the  service  provided  by  framework  A.  During 
the  Client  Artifact Generation  step  (2)  the  client’s  artifacts 
are  produced  using  the  artifact  generation  tool  provided  by 
framework  B.  These  artifacts  are  pieces  of  code  that  will 
translate  application-level  calls  at  the  client  to  SOAP 
messages that will be delivered to the service. 
The  Client  Artifact  Compilation  step  (3)  is  necessary 
only  for  platforms  that  are  implemented  in  programming 
languages  that  require  compilation  of  the  code  before 
execution 
some 
languages/frameworks (e.g., Python) it may not be required, 
as  the  client-side  artifacts  are  generated  dynamically  at 
runtime. Obviously, the artifacts (that after this step may be 
compiled) only provide the methods for a client application 
to invoke the remote service, but do not actually invoke it. It 
is up to the developer to create the client application and then 
invoke  the  methods  that  allow  the  client  to  communicate 
with  the  server.  This  is  represented  by  the  Communication 
step (4) in Fig. 1, which ultimately sends a SOAP message to 
the server. This message will be processed by server during 
the Execution step (5) and a response SOAP message will be 
produced to deliver the result of the operation. 
Despite being created to support interoperable operations 
[3], research and field experience suggests that web services 
interoperability has been an issue, since the inception of this 
technology. In fact, since 2002 the WS-I organization [9] has 
(e.g., 
Java, 
C#), 
and 
in 
for 
client  artifacts,  and  compilation  of  artifacts,  which  are  key 
steps  in  which  problems  may  prevent  any  further  inter-
operation,  and  do  not  account 
later  possible
communication issues between the client and the server. This 
latter type of issues is out of the scope of this paper and will 
be tackled as future work.  
interoperable  are 
We carried out a massive experimental evaluation based 
on more than seven thousand services deployed on top of the 
server-side  sub-systems  of three  major  WS  frameworks: 
Oracle  Metro  2.3,  JBossWS  CXF  4.2.3,  Microsoft  WCF
.NET  4.0.30319.17929  (C#)  [10]–[12].  The  services  were 
hosted in major application servers, respectively GlassFish 4, 
JBoss AS 7.2, and Microsoft IIS 8.0.8418.0 (Express) [13]–
[15].  We  used  a  total  of  eleven  client-side  sub-systems  to 
understand  how 
frameworks, 
accounting  for  a  total  of  79629  executed  tests.  The  client-
side subsystems used are: Oracle Metro 2.3; Apache Axis1 
1.4;  Apache  Axis2  1.6.2;  Apache  CXF  2.7.6;  JBoss  6.1 
JBossWS 4.2.3; .NET Framework 4.0.30319.17929 (used for 
three languages: C#; Visual Basic. NET; and Jscript .NET); 
gSOAP  2.8.16  (C++);  Zend  Framework  1.9  (PHP);  and 
Python  suds  0.4  [10]–[12],  [16]–[21].  The  results  clearly 
show the presence of severe interoperability issues, even in 
very  popular  and  WS-I  compliant  service  interfaces,  which 
requires  urgent  attention  from  the  industry  and  research 
communities. 
these 
the 
assessing 
frameworks; 
The main contributions of the paper are as follows: 
•  A  programming  language  agnostic  approach  for 
interoperability  of  web  service 
•  A large experimental evaluation highlighting critical 
interoperability issues, even in widely used and very 
popular frameworks; 
•  A free tool [22] that implements the interoperability 
assessment approach and can be used by developers 
and researchers to extend this study. 
The outline of this paper is as follows. The next section
presents background and related work on web services and 
interoperability.  Section  III  presents  the  interoperability 
assessment approach. Section IV presents and discusses the 
results  of  the  experimental  evaluation  and  Section  V 
concludes this paper. 
II.  BACKGROUND AND RELATED WORK 
In a typical web services environment, the provider (i.e., 
the server) offers a well-defined interface to consumers (i.e., 
clients),  which  includes  a  set  of  operations  and  typed 
input/output  parameters.  Clients  and  servers 
typically 
interact by using a web service framework, which provides a 
set  of  mechanisms  to  guarantee  that:  i)  the  service  can  be
deployed  at  the  server,  along  with  a  service  interface 
description  (i.e.,  a  WSDL  is  published);  ii)  the  client 
developer can generate (and compile when required) client-
side artifacts to easily invoke the service operations; iii) both 
client and server applications can communicate, and they do 
so by exchanging SOAP messages that are produced by the 
framework on behalf of the client and the server [3].  
#%$  

 
 


	
#)$!

#($

























 
 





#&$



#'$

Figure 1.   A typical web services environment. 
324324324
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:26:18 UTC from IEEE Xplore.  Restrictions apply. 
been promoting best practices (i.e., Profiles) for web services 
interoperability  for  major  web  services  standards  across 
platforms, operating systems, and programming languages. 
to  a  high 
level  description  of 
A  set  of  interoperability  issues  in  the  web  services 
technology  is  analyzed  in  [4].  The  authors  identify  some 
situations  that  commonly  lead  to  interoperability  issues:
truncation  of  decimal  data  types,  conversion  to  and  from 
native  data  types,  and  the  representation  of  sequences  of 
elements  and  namespaces  in  WSDL  files.  The  analysis  is 
limited 
the  different 
interoperability issues but no concrete examples of errors are
detailed in the text. The authors also analyze how the WS-I 
Basic  Profile  1.0  [9],  [23]  tries  to  address  the  raised  issues
and  highlights 
the  WS-I  set  of 
interoperability  recommendations  (Basic  Profile).  These 
limitations  are  more  related  with  aspects  that  impact  the 
business logic of the applications (such as float or date and 
time precision) than with issues on the supporting platforms. 
Conclusions  include  the  fact  that  adhering  to  the  WS-I 
recommendations  helps 
the  web  services 
interoperability issues. However, a more extensive practical 
view is still missing, as the paper does not cover the support 
for interoperability provided by current WS frameworks. 
limitations  of 
in  reducing 
the 
The authors of [5] trace back the interoperability issues to 
the  use  of  a  non-formal  language  in  the  specifications,  but 
also  recognize  that  problems  can  occur  much  later  with 
improper implementations of the protocols. Authors propose
an  approach  based  in  models  (and  model-checking)  and  in 
message  conformance  checking  (at  runtime).  No  practical 
insight  is  provided  on  the  interoperability  of  different 
frameworks currently being used in the industry. 
technique 
[6]  authors  propose  a 
improve 
interoperability  of  web  services.  The  approach  is  quite 
complex,  making  use  of  an  enriched  information  model  as 
support for testing, Protocol State Machines and UML, and 