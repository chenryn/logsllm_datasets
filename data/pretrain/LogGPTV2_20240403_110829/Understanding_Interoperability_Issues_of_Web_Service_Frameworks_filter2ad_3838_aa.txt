# Understanding Interoperability Issues of Web Service Frameworks

**Authors:**
- Ivano Alessandro Elia
- Nuno Laranjeiro
- Marco Vieira

**Conference:**
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks

**Affiliation:**
CISUC, Department of Informatics Engineering, University of Coimbra, Portugal  
Emails: {ivanoe, cnl, mvieira}@dei.uc.pt

## Abstract
Web Services are a set of technologies designed to support the invocation of remote services by client applications, with the key goal of providing interoperable application-to-application interaction while supporting vendor and platform independence. This work aims to study the real level of interoperability provided by these technologies through an extensive experimental campaign involving a wide range of popular web service frameworks implemented using seven different programming languages. We tested the inter-operation of eleven client-side framework subsystems with server-side implementations, each hosting thousands of different services. The results highlight numerous situations where the goal of interoperability between different frameworks is not met due to problems on both the client and server sides. Additionally, we identified issues affecting interactions between the client and server subsystems of the same framework.

**Keywords:** Web service, interoperability, WS-I Basic Profile, web service framework

## 1. Introduction
Web services (WS) are frequently deployed in environments where application-level interoperability (i.e., the ability of making systems operate in conjunction [1]) is a critical feature. Typical deployment environments include large-scale business-to-business collaborations, safety-critical environments, and industrial manufacturing. In such environments, interoperability issues can result in severe financial and reputational costs for service providers [2].

The WS technology is based on open XML standards and consists of self-describing components that can be used by other applications across the web in a platform-independent manner, supported by standard protocols such as SOAP and WSDL [3]. Platform independence is the key goal of WS technology, which defines mechanisms to ensure that two applications can exchange information, even if they are built using different languages (e.g., Java, C#, Python) or deployed on different WS frameworks (platforms for creating and deploying web services, such as Axis 2 or JBossWS for Java, gSOAP or Axis2/C for C, etc.).

In theory, WS frameworks include all the mechanisms needed to ensure interoperable interaction:
1. **Server-side interface description generation tools** that generate a WSDL document, which is language-agnostic and describes the service interface (i.e., it lists available operations, input and output parameters, etc.).
2. **Client-side artifact generation tools** that use the service description to produce code that developers can use to invoke the service.

Both server-side and client-side tools are typically subsystems of a given software framework, which also provides facilities for runtime communication between client and server (e.g., processing of SOAP requests and responses after deployment).

Although interoperability is the major goal of WS, field experience and previous research studies [4]â€“[8] suggest that full interoperability is difficult to achieve. The Web Services Interoperability Organization (WS-I) [9] has been working for many years to solve or mitigate interoperability problems by refining WS specifications. Despite their efforts, experience suggests that even web services conforming to WS-I profiles may still present interoperability issues.

Developers often create and deploy their web services assuming that the underlying framework ensures full interoperability. As a result, programmers are frequently unaware that choosing a specific framework to deploy their services might introduce interoperability issues, thereby excluding some frameworks from inter-operating with their service. To the best of our knowledge, a practical perspective that allows us to systematize this kind of knowledge is still missing.

In this practical experience report, we present an experimental study that, from a pragmatic perspective, provides insights into the interoperability of web service frameworks. Our approach consists of two phases:
1. **Preparation Phase**: Select a set of WS frameworks for the server and client sides, and create a set of services for testing.
2. **Testing Phase**: Generate the service description documents and use a set of client-side frameworks to generate and compile (when required) client artifacts based on those service descriptions.

The goal of this work is to understand if the client-side subsystem of all selected client frameworks can actually inter-operate with the server-side subsystem of all participating server frameworks. For now, we assess the frameworks' interoperability for the generation of service interface descriptions, generation of client artifacts, and compilation of artifacts, which are key steps where problems may prevent further inter-operation. Communication issues between the client and the server, which are out of the scope of this paper, will be addressed in future work.

## 2. Background and Related Work
In a typical web services environment, the provider (i.e., the server) offers a well-defined interface to consumers (i.e., clients), which includes a set of operations and typed input/output parameters. Clients and servers typically interact using a web service framework, which provides mechanisms to ensure:
- The service can be deployed at the server, along with a service interface description (i.e., a WSDL is published).
- The client developer can generate (and compile when required) client-side artifacts to easily invoke the service operations.
- Both client and server applications can communicate, exchanging SOAP messages produced by the framework on behalf of the client and the server [3].

### Interoperability Issues
A set of interoperability issues in web services technology is analyzed in [4]. The authors identify common situations leading to interoperability issues, such as truncation of decimal data types, conversion to and from native data types, and the representation of sequences of elements and namespaces in WSDL files. The analysis is limited to a high-level description of the different interoperability issues, but no concrete examples of errors are detailed in the text. The authors also analyze how the WS-I Basic Profile 1.0 [9], [23] tries to address the raised issues and highlight the limitations of the WS-I set of interoperability recommendations (Basic Profile). These limitations are more related to aspects that impact the business logic of the applications (such as float or date and time precision) than with issues on the supporting platforms. Conclusions include the fact that adhering to the WS-I recommendations helps in reducing web services interoperability issues. However, a more extensive practical view is still missing, as the paper does not cover the support for interoperability provided by current WS frameworks.

### Previous Research
The authors of [5] trace back the interoperability issues to the use of a non-formal language in the specifications, but also recognize that problems can occur much later with improper implementations of the protocols. They propose an approach based on models (and model-checking) and message conformance checking (at runtime). No practical insight is provided on the interoperability of different frameworks currently being used in the industry.

In [6], authors propose a technique to improve the interoperability of web services. The approach is quite complex, making use of an enriched information model as support for testing, Protocol State Machines, and UML. 

## 3. Interoperability Assessment Approach
Figure 1 represents a typical web services inter-operation scenario using two different frameworks at the client and server sides, placed at each endpoint of the interaction. In the scenario, the client uses the client-side subsystem of framework B, while the server uses the server-side subsystem of framework A. These could also be two subsystems of the same framework.

As shown, a set of five steps needs to be performed for a client to invoke a remote web service operation. These steps represent points where platform-level interoperability issues can arise. In this paper, we focus on the first three steps, where problems may prevent any further inter-operation (the analysis of the Communication and Execution steps is out of the scope of this paper).

### Service Description Generation Step (1)
This step typically occurs automatically when the service is deployed at the server, although it can also be executed manually using the WS framework tools and the service code as input. The result is a WSDL document that provides the information needed by a client using framework B to invoke the service provided by framework A.

### Client Artifact Generation Step (2)
During this step, the client's artifacts are produced using the artifact generation tool provided by framework B. These artifacts are pieces of code that translate application-level calls at the client to SOAP messages that will be delivered to the service.

### Client Artifact Compilation Step (3)
This step is necessary only for platforms implemented in programming languages that require code compilation before execution (e.g., Java, C#). In some languages/frameworks (e.g., Python), it may not be required, as the client-side artifacts are generated dynamically at runtime. The compiled artifacts provide methods for a client application to invoke the remote service but do not actually invoke it. It is up to the developer to create the client application and then invoke the methods that allow the client to communicate with the server.

## 4. Experimental Evaluation
We carried out a massive experimental evaluation based on more than seven thousand services deployed on top of the server-side subsystems of three major WS frameworks: Oracle Metro 2.3, JBossWS CXF 4.2.3, and Microsoft WCF .NET 4.0.30319.17929 (C#) [10]â€“[12]. The services were hosted in major application servers, respectively GlassFish 4, JBoss AS 7.2, and Microsoft IIS 8.0.8418.0 (Express) [13]â€“[15]. We used a total of eleven client-side subsystems to understand how interoperable these frameworks are, accounting for a total of 79,629 executed tests. The client-side subsystems used are: Oracle Metro 2.3; Apache Axis1 1.4; Apache Axis2 1.6.2; Apache CXF 2.7.6; JBoss 6.1 JBossWS 4.2.3; .NET Framework 4.0.30319.17929 (used for three languages: C#; Visual Basic .NET; and Jscript .NET); gSOAP 2.8.16 (C++); Zend Framework 1.9 (PHP); and Python suds 0.4 [10]â€“[12], [16]â€“[21]. The results clearly show the presence of severe interoperability issues, even in very popular and WS-I compliant service interfaces, which requires urgent attention from the industry and research communities.

## 5. Main Contributions
- **Programming Language Agnostic Approach**: For assessing the interoperability of web service frameworks.
- **Large Experimental Evaluation**: Highlighting critical interoperability issues, even in widely used and very popular frameworks.
- **Free Tool**: [22] that implements the interoperability assessment approach and can be used by developers and researchers to extend this study.

## 6. Conclusion
This paper presents a comprehensive study on the interoperability of web service frameworks. Through a large-scale experimental evaluation, we identified significant interoperability issues, even in popular and WS-I compliant frameworks. The results underscore the need for continued research and industry efforts to address these challenges. Future work will focus on extending the study to include communication and execution steps, and to further refine the interoperability assessment tool.

---

**References:**
1. ...
2. ...
3. ...
4. ...
5. ...
6. ...
7. ...
8. ...
9. ...
10. ...
11. ...
12. ...
13. ...
14. ...
15. ...
16. ...
17. ...
18. ...
19. ...
20. ...
21. ...
22. ...
23. ...

**DOI: 10.1109/DSN.2014.40**

**Copyright Notice:**
978-1-4799-2233-8/14 $31.00 Â© 2014 IEEE

**Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021, at 08:26:18 UTC from IEEE Xplore. Restrictions apply.**