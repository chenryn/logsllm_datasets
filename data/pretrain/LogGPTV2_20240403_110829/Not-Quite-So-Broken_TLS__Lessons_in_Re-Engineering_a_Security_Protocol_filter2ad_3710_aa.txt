title:Not-Quite-So-Broken TLS: Lessons in Re-Engineering a Security Protocol
Specification and Implementation
author:David Kaloper-Mersinjak and
Hannes Mehnert and
Anil Madhavapeddy and
Peter Sewell
Not-Quite-So-Broken TLS:  
Lessons in Re-Engineering a Security Protocol 
Specification and Implementation
David Kaloper-Meršinjak, Hannes Mehnert, Anil Madhavapeddy, and Peter Sewell, 
University of Cambridge
https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/kaloper-mersinjak
This paper is included in the Proceedings of the 
24th USENIX Security Symposium
August 12–14, 2015 • Washington, D.C.
ISBN  978-1-939133-11-3
Open access to the Proceedings of  the 24th USENIX Security Symposium is sponsored by USENIXNot-quite-so-broken TLS: lessons in re-engineering a security protocol
speciﬁcation and implementation
David Kaloper-Merˇsinjak†, Hannes Mehnert†, Anil Madhavapeddy and Peter Sewell
University of Cambridge Computer Laboratory
PI:EMAIL
† These authors contributed equally to this work
Abstract
Transport Layer Security (TLS) implementations have a
history of security ﬂaws. The immediate causes of these
are often programming errors, e.g. in memory manage-
ment, but the root causes are more fundamental: the chal-
lenges of interpreting the ambiguous prose speciﬁcation,
the complexities inherent in large APIs and code bases,
inherently unsafe programming choices, and the impos-
sibility of directly testing conformance between imple-
mentations and the speciﬁcation.
We present nqsb-TLS, the result of our re-engineered
approach to security protocol speciﬁcation and imple-
mentation that addresses these root causes. The same
code serves two roles: it is both a speciﬁcation of TLS,
executable as a test oracle to check conformance of traces
from arbitrary implementations, and a usable implemen-
tation of TLS; a modular and declarative programming
style provides clean separation between its components.
Many security ﬂaws are thus excluded by construction.
nqsb-TLS can be used in standalone Unix applica-
tions, which we demonstrate with a messaging client,
and can also be compiled into Xen unikernels (spe-
cialised virtual machine image) with a trusted comput-
ing base (TCB) that is 4% of a standalone system run-
ning a standard Linux/OpenSSL stack, with all network
trafﬁc being handled in a memory-safe language; this
supports applications including HTTPS, IMAP, Git, and
Websocket clients and servers. Despite the dual-role de-
sign, the high-level implementation style, and the func-
tional programming language we still achieve reasonable
performance, with the same handshake performance as
OpenSSL and 73% – 84% for bulk throughput.
1
Introduction
Current mainstream engineering practices for specifying
and implementing security protocols are not ﬁt for pur-
pose: as one can see from many recent compromises of
sensitive services, they are not providing the security we
need. Transport Layer Security (TLS) is the most widely
deployed security protocol on the Internet, used for au-
thentication and conﬁdentiality, but a long history of ex-
ploits shows that its implementations have failed to guar-
antee either property. Analysis of these exploits typically
focusses on their immediate causes, e.g. errors in mem-
ory management or control ﬂow, but we believe their root
causes are more fundamental:
Error-prone languages:
historical choices of pro-
gramming language and programming style that tend to
lead to such errors rather than protecting against them.
Lack of separation:
the complexities inherent in
working with large code bases, exacerbated by lack of
emphasis on clean separation of concerns and modular-
ity, and by poor language support for those.
Ambiguous and untestable speciﬁcations:
the chal-
lenges of writing and interpreting the large and ambigu-
ous prose speciﬁcations, and the impossibility of di-
rectly testing conformance between implementations and
a prose speciﬁcation.
In this paper we report on an experiment in developing
a practical and usable TLS stack, nqsb-TLS, using a new
approach designed to address each of these root-cause
problems. This re-engineering, of the development pro-
cess and of our concrete stack, aims to build in improved
security from the ground up.
We demonstrate the practicality of the result in sev-
eral ways: we show on-the-wire interoperability with ex-
isting stacks; we show reasonable performance, in both
bulk transfer and handshakes; we use it in a test oracle,
validating recorded packet traces which contain TLS ses-
sions between other implementations; and we use it as
part of a standalone instant-messaging client. In addition
to use in such traditional executables, nqsb-TLS is us-
able in applications compiled into unikernels – type-safe,
single-address-space VMs with TCBs that run directly
USENIX Association  
24th USENIX Security Symposium  223
on a hypervisor [32]. This integration into a uniker-
nel stack lets us demonstrate a wide range of working
systems, including HTTPS, IMAP, Git, and Websocket
clients and servers, while sidestepping a further difﬁ-
culty with radical solutions in this area: the large body
of legacy code (in applications, operating systems, and
libraries) that existing TLS stacks are intertwined with.
We assess the security of nqsb-TLS also in several
ways: for each of the root causes above, we discuss why
our approach rules out certain classes of associated ﬂaws,
with reference to an analysis of ﬂaws found in previ-
ous TLS implementations; and we test our authentication
logic with a large corpus of certiﬁcate chains generated
by using the Frankencert fuzzer [8], which found ﬂaws
in several previous implementations. We have also made
the system publically available for penetration testing, as
a Bitcoin Pi˜nata, an example unikernel using nqsb-TLS.
This has a TCB size roughly 4% of that of a similar sys-
tem using OpenSSL on Linux.
We describe our overall approach in the remainder of
the introduction. We then brieﬂy describe the TLS pro-
tocol (§2), analyse ﬂaws previously found in TLS im-
plementations (§3), and the result of applying our ap-
proach, dubbed nqsb-TLS (§4). We demonstrate the du-
ality of nqsb-TLS next by using its speciﬁcation to vali-
date recorded sessions (§5) and executing its implemen-
tation to provide concrete services (§6). We evaluate the
interoperability, performance, and security (§7) of nqsb-
TLS, describe related work (§8), and conclude (§9).
nqsb-TLS is freely available under a BSD license
(https://nqsb.io), and the data used in this paper is
openly accessible [27].
1.1 Approach
A precise and testable speciﬁcation for TLS
In prin-
ciple, a protocol speciﬁcation should unambiguously de-
ﬁne the set of all implementation behaviour that it allows,
and hence also what it does not allow: it should be pre-
cise. This should not be confused with the question of
whether a speciﬁcation is loose or tight: a precise speciﬁ-
cation might well allow a wide range of implementation
behaviour. It is also highly desirable for speciﬁcations
to be executable as test oracles: given an implementa-
tion behaviour (perhaps a trace captured from a particu-
lar execution), the speciﬁcation should let one compute
whether it is in the allowed set or not.
In practice, the TLS speciﬁcation is neither, but rather
a series of RFCs written in prose [13, 14, 15]. An ex-
plicit and precise description of the TLS state machine
is lacking, as are some security-critical preconditions of
its transitions, and there are ambiguities in various semi-
formal grammars. There is no way such prose documents
can be executed as a test oracle to directly test whether
ASN.1
X.509
TLS
Trust 
Anchors
Nocrypto
CSPRNG
Flow
Entropy
Serialise
Parse
Policy 
Conﬁg
Figure 1: nqsb-TLS is broken down into strongly sep-
arated modules. The main part,
in bold boxes, has
pure value-passing interfaces and internals. The PRNG
maintains internal state, while Nocrypto includes C code
but has a pure effect-free interface. Arrows indicate
depends-on relationships.
implementation behaviour conforms to the speciﬁcation.
TLS is not unique in this, of course, and many other
speciﬁcations are expressed in the same traditional prose
style, but its disadvantages are especially serious for se-
curity protocols.
For nqsb-TLS, we specify TLS as a collection of pure
functions over abstract datatypes. By avoiding I/O and
shared mutable state, these functions can be considered
in isolation and each is deterministic, with errors re-
turned as explicit values. The top-level function takes an
abstract protocol state and an incoming message, and cal-
culates the next state and any response messages. To do
so, it invokes subsidiary functions to parse the message,
drive the state machine, perform cryptographic opera-
tions, and construct the response. This top-level function
can be executed as a trace-checker, on traces both from
our implementation and from others, such as OpenSSL,
to decide whether they are allowed by our speciﬁcation
or not. In building our speciﬁcation, to resolve the RFC
ambiguities, we read other implementations and tested
interoperability with them; we thereby capture the prac-
tical de facto standard.
Reuse between speciﬁcation and implementation
The same functions form the main part of our imple-
mentation, coupled with code for I/O and to provide en-
tropy. Note that this is not an “executable speciﬁcation”
in the conventional sense: our speciﬁcation is necessar-
ily somewhat loose, as the server must have the freedom
to choose a protocol version and cipher suite, and the
trace checker must admit that, while our implementation
makes particular choices.
Each version of the implementation (Unix, unikernel)
has a top-level Flow module that repeatedly performs I/O
and invokes the pure functional core; the trace-checker
has a top-level module of the same type that reads in a
trace to be checked ofﬂine.
224  24th USENIX Security Symposium 
USENIX Association
2
Separation and modular structure
This focus on
pure functional descriptions also enables a decomposi-
tion of the system (both implementation and speciﬁca-
tion) into strongly separated modules, with typed inter-
faces, that interact only by exchanging pure values, as
shown in Fig. 1. These modules and their interfaces are
arranged to ensure that localised concerns such as binary
protocol formats, ASN.1 grammars and certiﬁcate vali-
dation are not spread throughout the stack, with no im-
plicit dependencies via shared memory.
External resources are explicitly represented as mod-
ules, instead of being implicitly accessed, and each sat-
isﬁes a module type that describes collections of opera-
tions over an abstract type, and that can be instantiated
with any of several implementations. These include the
Nocrypto cryptography layer and our PRNG, which de-
pends on an external Entropy module type.
Communication with the outside world is factored out
into an I/O component, Flow, that passes a byte sequence
to the pure core, then transmits responses and handles
timeouts, and is used by the top-level but not by the TLS
engine itself. The pure TLS engine depends on some
external data, such as the policy conﬁg and trust anchors.
Choice of language and style
The structure we de-
scribe above could be implemented in many different
programming languages, but guarantees of memory and
type safety are desirable to exclude many common secu-
rity ﬂaws (lack of memory safety was the largest single
source of vulnerabilities in various TLS stacks through-
out 2014, as shown in our §3 vulnerability analysis), and
expressive statically checked type and module systems
help maintain the strongly separated structure that we
outlined. Our implementation of nqsb-TLS uses OCaml,
a memory-safe, statically typed programming language
that compiles to fast native code with a lightweight, em-
beddable runtime. OCaml supports (but does not man-
date) a pure programming style, and has a module sys-
tem which supports large-scale abstraction via ML func-
tors – modules that can depend on other modules’ types.
In OCaml, we can encode complex state machines (§4),
with lightweight invariants statically enforced by the
type checker (state machine problems were the second
largest source of vulnerabilities). Merely using OCaml
does not guarantee all the properties we need, of course
(one can write imperative and convoluted code in any
language); our speciﬁcation and programming styles are
equally important.
This is a signiﬁcant departure from normal practice, in
which systems software is typically written in C, but we
believe our evaluation shows that it is viable in at least
some compelling scenarios (§7).
Non-goals For nqsb-TLS we are focussed on the engi-
neering of TLS speciﬁcations and implementations, not
on the security protocol itself (as we recall in §3, some
vulnerabilities have been found there). We are also not
attempting to advance the state of the art in side-channel
defence, though we do follow current best practice. We
are focussed on making a stack that is usable in prac-
tice and on security improvements achievable with better
engineering processes, rather than trying to prove that a
speciﬁcation or implementation is correct or secure (see
§8 for related work in that direction).
Current state The entire set of TLS RFCs [13, 14, 15]
are implemented in nqsb-TLS, apart from minor rarely
used features, such as DSS certiﬁcates and anon and
pre-shared keys ciphersuites. As we demonstrate in
§7.1, nqsb-TLS can interoperate with many contempo-
rary TLS implementations, but we are not attempting to
support legacy options or those of doubtful utility. We
neither support SSLv3 [1], nor use RC4 in the default
conﬁguration [39]. The crypto wars are over: we have
not implemented ciphersuites to adhere to export restric-
tions, which gave rise to the FREAK and Logjam attacks.
nqsb-TLS is strict (see §7.2), which results in roughly
10% failing connections from legacy clients. But since
our main goal is to provide security, we are not willing to
make compromises for insecure implementations. In ad-
dition to TLS itself, we also implemented ASN.1, X.509
and crypto primitives. From a practical point of view, the
largest missing part is elliptic curve cryptography.
2 TLS Background
TLS provides the twin features of authentication and
conﬁdentiality. Clients typically verify the server’s iden-
tity, the server can optionally verify the client’s identity,