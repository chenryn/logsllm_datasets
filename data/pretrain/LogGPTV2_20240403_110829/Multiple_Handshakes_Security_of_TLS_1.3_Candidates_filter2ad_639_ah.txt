the forward secrecy property of the key exchange protocol. So
the security analysis in this paper can be more general.
V. (IN)SECURITY ANALYSIS OF TLS 1.2
In this section, we discuss how the triple handshake attack
of TLS 1.2 is captured in the multiple handshakes security
model. In TLS 1.2, there are three primary handshake modes,
full handshake (M1), session resumption (M2), and session
renegotiation (M3), where session resumption is similar to the
PSK/resumption in TLS 1.3 draft with little changes, and ses-
sion renegotiation handshake proceeds as the full handshake,
except that its messages are exchanged on the encrypted TLS
connection, for the purpose of authenticating the client without
privacy leakage or upgrading the ciphersuite. What’s more,
TLS 1.2 also features dependencies of multiple runs of the
handshake protocols.
As described in the introduction, it is impossible to prove
TLS 1.2 handshake protocol secure in any security model
based on key indistinguishability, like the multiple handshakes
security model from Section III, because the encryption and
MAC of the Finished messages provide a ‘check value’, that
can be exploited by an adversary to determine the bit btest
chosen by the Test oracle. Therefore, we consider a ‘truncated
TLS’ protocol as in [11] where the Finished messages are sent
in clear, and the truncated TLS full handshake has been proven
to be a secure AKE protocol.
Like TLS 1.3, we also view TLS 1.2 as a multi-stage key
exchange protocol, where in the ﬁrst stage the master secret
ms would be derived, and in the second stage the trafﬁc key
tkhs would be derived from ms. Then the Multi-Level&Stage
Security model can be applied to the truncated TLS 1.2 now.
Firstly, we recall the the triple handshake attack of TLS
1.2 proposed by Bhargavan et al. in 2014 [5]. Concretely, the
malicious server performs a man-in-the-middle attack on three
successive handshakes (full handshake, session resumption
and renegotiation) between the honest client and server, and
succeeds in impersonating the client on the third handshake.
The attack is described as follows:
Step 1. Synchronizing RSA/DHE. C deliberately connects to
a server A which malicious connects to the server
S. Due to the fact that only C contributes to the
key exchange in RSA and in DHE the attacker can
make C accept a group with non-prime order, A can
synchronize pms with C and S maliciously. Taking
RSA for example, A just takes the encrypted pms
generated by C and re-encrypt it to S. At the end of
this stage, A completes both handshakes to obtain two
new sessions, and these two sessions share the same
parameters (sid, ms).
Step 2. Synchronizing resumption. Once A has synchronized
the above two connections, suppose C attempts to
resume the session with A on a new connection,
and A can then resume its session with S on a new
connection and forward the abbreviated handshake
messages unchanged between C and S. Since the
abbreviated handshake only relies on the master secret
for authentication and does not mention client or
server identities, both handshakes complete success-
fully, resulting in the same session keys and the same
ﬁnished messages.
Step 3. Impersonating the client. Now, since the Renegotia-
tion Indication extension [9] in the Hello message
has been synchronized, if C or S initiates a client-
authenticated TLS renegotiation, A can simply for-
ward all messages between C and S. If C can accept
the new identity of the server, then, just like Ray and
Dispensa’s attack [8], A will successfully impersonate
C to S even though it has no idea about the connection
key in the renegotiation.
Note that, it is not difﬁcult to draw that this attack would
still be valid, though the ﬁnished messages are transmitted in
clear.
Formally, this attack is captured in our security model for
multiple handshakes protocol from Section III as follows.
We use Π to denote the composition of the full handshake,
resumption handshake, and the renegotiation handshake. Note
that Π is a multiple handshakes protocol with three levels
according the model deﬁnition. We assume during the attack
the client and the server both run a handshake protocol
label denoted by label and label(cid:2) respectively. Firstly, when
label.lev = label(cid:2).lev = 1, label.mode = label(cid:2).mode = M1,
label.sid1 (cid:9)= label(cid:2).sid1, label.sid2 (cid:9)= label(cid:2).sid2, however
label.K1 = label(cid:2).K1 and label.K2 = label(cid:2).K2, which means,
sessions with the different session identiﬁers for some stage
hold the same session keys at that stage. Thus, TLS 1.2 without
countermeasures is not a Multi-Level&Stage secure multiple
handshakes protocol.
Recently, IETF TLS working group developed RFC 7627
[30] to provide a countermeasure to the triple handshake
attack. This countermeasure contextually binds the master
secret to the full handshake by including a hash of handshake
500500
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:15:40 UTC from IEEE Xplore.  Restrictions apply. 
messages in the PRF computation. Intuitively, by such binding,
master secrets generated with different session identiﬁers
cannot be the same, and thus the triple handshake attack is
avoided. Due to the limited space, the detailed security proof
is omitted here.
VI. CONCLUSION
Although TLS handshake protocols for establishing secure
communications have been extensively studied in the literature
and are widely used in practice, this is the ﬁrst work to
consider the important practical issue of multiple handshakes,
in which parties run successive TLS handshakes over multiple
connections. The importance of correctly implementing multi-
ple handshakes was highlighted by the triple handshake attack
of Bhargavan et al. in 2014 [5].
We have developed a formal model for describing the securi-
ty of multiple handshakes protocol, covering all kinds of com-
positional interaction between the different TLS handshake
modes and providing reasonably strong security guarantees.
We have proved the security of multiple handshakes of TLS
1.3 candidates in combinational running setting, which further
conﬁrms the sound design of TLS 1.3 handshake protocol.
We have speciﬁcally analyzed TLS 1.2 handshake protocol
on a high level, identifying the triple handshake attack in our
model, and then showed that their countermeasure offers good
protection against multiple handshakes attack.
How to analyze the compositional security of other key
exchange protocols widely applied in practice such as SSH
protocol under our multiple handshakes security model is a
worthwhile direction. In addition, the overall security of TLS
1.3 still has many important open questions, including the
security of multi-ciphersuites and the formal analysis of other
complex functionality such as version negotiation.
ACKNOWLEDGMENT
This work was supported by the National Grand Fun-
damental Research (973) Program of China under Grant
2013CB338003, and the National Natural Science Foundation
of China (NSFC) under Grants U1536205, 61170279 and
61572485.
REFERENCES
[1] T. Dierks and E. Rescorla, “The Transport Layer Security (TLS) Protocol
Version 1.1,” IETF RFC 4346, April 2006.
[2] ——, “The Transport Layer Security (TLS) Protocol Version 1.2,” IETF
RFC 5246, August 2008.
[3] N. J. AlFardan, D. J. Bernstein, K. G. Paterson, B. Poettering, and
J. C. Schuldt, “On the Security of RC4 in TLS.” in USENIX Security.
USENIX, 2013, pp. 305–320.
and DTLS record protocols,” in IEEE S&P.
[4] N. J. Al Fardan and K. G. Paterson, “Lucky thirteen: Breaking the TLS
IEEE, 2013, pp. 526–540.
[5] K. Bhargavan, A. D. Lavaud, C. Fournet, A. Pironti, and P. Y. Strub,
“Triple handshakes and cookie cutters: Breaking and ﬁxing authentica-
tion over TLS,” in IEEE S&P.
IEEE, 2014, pp. 98–113.
[6] Codenomicon, “The Heartbleed Bug,” http://heartbleed.com, April 2014.
[7] E. Rescorla, “The Transport Layer Security (TLS) Protocol Version 1.3
- draft-ietf-tls-tls13-10,” https://tools.ietf.org/html/draft-ietf-tls-tls13-10,
October 2015.
[8] M. Ray and S. Dispensa, “Renegotiating TLS,” http://extendedsubset.
com/Renegotiating TLS.pdf, November 2009.
[9] E. Rescorla, M. Ray, S. Dispensa, and N. Oskov, “Transport Layer
Security (TLS) Renegotiation Indication Extension,” IETF RFC 5746,
February 2010.
[10] K. Bhargavan, A. Delignat-Lavaud, and A. Pironti, “Veriﬁed Contribu-
tive Channel Bindings for Compound Authentication,” in NDSS, 2015.
[11] T. Jager, F. Kohlar, S. Sch¨age, and J. Schwenk, “On the security of
Springer, 2012, pp.
TLS-DHE in the standard model,” in CRYPTO.
273–293.
[12] F. Kohlar, S. Sch¨age, and J. Schwenk, “On the Security of TLS-DH and
TLS-RSA in the Standard Model.” Cryptology ePrint Archive,Report
2013/367, 2013, https://eprint.iacr.org/2013/367.
[13] H. Krawczyk, K. G. Paterson, and H. Wee, “On the security of the
TLS protocol: A systematic analysis,” in CRYPTO. Springer, 2013, pp.
429–448.
[14] F. Giesen, F. Kohlar, and D. Stebila, “On the security of TLS renegoti-
ation,” in ACM CCS. ACM, 2013, pp. 387–398.
[15] Y. Li, S. Sch¨age, Z. Yang, F. Kohlar, and J. Schwenk, “On the Security
of the Pre-shared Key Ciphersuites of TLS,” in PKC. Springer, 2014,
pp. 669–684.
[16] K. Bhargavan, C. Fournet, M. Kohlweiss, A. Pironti, P.-Y. Strub, and
S. Zanella-B´eguelin, “Proving the TLS handshake secure (as it is),” in
CRYPTO 2014. Springer, 2014, pp. 235–255.
[17] C. Fournet, M. Kohlweiss, and P.-Y. Strub, “Modular code-based cryp-
tographic veriﬁcation,” in ACM CCS. ACM, 2011, pp. 341–350.
[18] K. Bhargavan, C. Fournet, M. Kohlweiss, A. Pironti, and P. Strub,
“Implementing TLS with veriﬁed cryptographic security,” in IEEE S&P.
IEEE, 2013, pp. 445–459.
[19] B. Dowling, M. Fischlin, F. G¨unther, and D. Stebila, “A cryptographic
analysis of the TLS 1.3 handshake protocol candidates,” in ACM CCS.
ACM, 2015, pp. 1197–1210.
[20] E. Rescorla, “The Transport Layer Security (TLS) Protocol Version 1.3
- draft-ietf-tls-tls13-05,” https://tools.ietf.org/html/draft-ietf-tls-tls13-05,
March 2015.
[21] ——,
“The Transport Layer Security (TLS) Protocol Version
1.3-draft-ietf-tls-tls13-dh-based,” https://github.com/ekr/tls13-spec/blob/
ietf92 materials/draft-ietf-tls-tls13-dh-based.txt, March 2015.
[22] M. Fischlin and F. G¨unther, “Multi-Stage Key Exchange and the Case of
Google’s QUIC Protocol,” in ACM CCS. ACM, 2014, pp. 1193–1204.
[23] E. Rescorla, “The Transport Layer Security (TLS) Protocol Version 1.3
- draft-ietf-tls-tls13-07,” https://tools.ietf.org/html/draft-ietf-tls-tls13-07,
July 2015.
[24] H. Krawczyk and H. Wee, “The OPTLS Protocol and TLS 1.3,”
Cryptology ePrint Archive, Report 2015/978, 2015, https://eprint.iacr.
org/2015/978.
[25] R. Canetti and H. Krawczyk, “Analysis of key-exchange protocols and
Springer,
their use for building secure channels,” in EUROCRYPT.
2001, pp. 453–474.
[26] A. Langley and W. Chang, “QUIC Crypto,” http://tinyurl.com/lrrjyjs,
June 2013.
[27] R. Lychev, S. Jero, A. Boldyreva, and C. Nita-Rotaru, “How secure and
quick is QUIC? Provable security and performance analyses,” in IEEE
S&P.
IEEE, 2015, pp. 214—231.
[28] M. Bellare and P. Rogaway, “Entity authentication and key distribution,”
in CRYPTO. Springer, 1993, pp. 232–249.
[29] C. Brzuska, M. Fischlin, B. Warinschi, and S. C. Williams, “Composabil-
ity of Bellare-Rogaway key exchange protocols,” in ACM CCS. ACM,
2011, pp. 51–62.
[30] K. Bhargavan, A. Delignat-Lavaud, A. Pironti, A. Langley, and M. Ray,
“Transport Layer Security (TLS) Session Hash and Extended Master
Secret Extension,” IETF RFC 7627, September 2015.
[31] H. Krawczyk, “Cryptographic extraction and key derivation: The HKDF
scheme,” in CRYPTO. Springer, 2010, pp. 631–648.
[32] H. Krawczyk and P. Eronen, “HMAC-based Extract-and-Expand Key
Derivation Function (HKDF),” IETF RFC 5869, May 2010.
[33] R. Canetti and H. Krawczyk, “Security analysis of IKE’s signature-based
key-exchange protocol,” in CRYPTO. Springer, 2002, pp. 143–161.
[34] C. Brzuska, “On the foundations of key exchange,” TU Darmstadt, 2013,
http://tuprints.ulb.tu-darmstadt.de/3414/.
501501
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:15:40 UTC from IEEE Xplore.  Restrictions apply. 
APPENDIX
A. The proof of Lemma 3
in the session label, so that
As Π is Multi-Level&Stage-secure, we just need to show
the Key Secrecy of the added session label(cid:2). Before giving
the detailed proof we need to show the relation between
label(cid:2) and label, where the session label
is included in
Π, and label(cid:2).prelid = label.lid. In order to enable 0-RTT
functionality of label(cid:2), TLS 1.3 draft suggests the server
sends a ServerConﬁguration message containing the semi-
static key gs associated with an unique Conﬁguration id
the client can
to the client
use that share in the 0-RTT handshake. Also,
the sever
also sends its ServerCertiﬁcate and ServerCertiﬁcateVerify
messages for authentication. Moreover, during 0-RTT hand-
shake, the concatenation of the ServerConﬁguration−1 and
ServerCertiﬁcate−1 messages are contained in the compu-
tation of handshake hash. Thus we can conﬁdently assert
that only the authenticated server knows the secret s since
the label is secure against Key Secrecy, unless the adversary
makes a Corrupt query. Above all, we can now focus on the
security of label(cid:2) as follows.
(The result for label(cid:2)): 0-RTT is secure against Key-Secrecy
in a key-independent and stage-2-forward-secret manner with
concurrent authentication properties AUTH = (unilateral,
unauth, unilateral, unilateral, unilateral), (unilateral, unilat-
eral, mutual, mutual, mutual) in the random oracle. Formal-
ly, for any efﬁcient adversary A against the Key Secrecy
there exist efﬁcient algorithms B1, ...,B10 described in later
games.
Remark 3: To prove the above result, we treat HKDF.Extract
as the random oracle when computing SS and ES and this
is a very common assumption for security analyses. While
it may not be appropriate in each case, the standard use of
HKDF.Extract with ﬁxed keys for the key derivation function
here seems ﬁne. In 0-RTT, it is important for the analysis
that the ﬁrst occurrence for SS is the random oracle. The
second one for ES may satisfy a weaker notion, but we treat
it as the random oracle for simplicity just like in the QUIC
security analysis [27].
Part 1: un-compromised s