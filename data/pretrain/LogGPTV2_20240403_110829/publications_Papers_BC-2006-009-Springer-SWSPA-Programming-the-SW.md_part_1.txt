Chapter 14
PROGRAMMING THE SEMANTIC WEB
Jorge Cardoso
1Department of Mathematics and Engineering,University of Madeira, 9000-390, Funchal,
Portugal – PI:EMAIL
1. INTRODUCTION
Many researchers believe that a new Web will emerge in the next
few years based on the large-scale ongoing research and developments
in the semantic Web. Nevertheless, the industry and its main players
are adopting a “wait-and-see” approach to see how real-world
applications can benefit from semantic Web technologies (Cardoso,
Miller et al. 2005). The success of the semantic Web vision (Berners-
Lee, Hendler et al. 2001) is dependant on the development of practical
and useful semantic Web-based applications.
While the semantic Web has reached considerable stability from
the technological point of view with the development of languages to
represent knowledge (such as OWL (OWL 2004)), to query
knowledge bases (RQL (Karvounarakis, Alexaki et al. 2002) and
RDQL (RDQL 2005)), and to describe business rules (such as SWRL
(Ian Horrocks, Peter F. Patel-Schneider et al. 2003)), the industry is
still skeptical about its potential. For the semantic Web to gain
considerable acceptance from the industry it is indispensable to
develop real-world semantic Web-based applications to validate and
explore the full potential of the semantic Web (Lassila and
McGuinness 2001). The success of the semantic Web depends on its
capability of supporting applications in commercial settings (Cardoso,
Miller et al. 2005).
2 Semantic Web Services, Processes and Applications
In several fields, the technologies associated with the semantic
Web have been implemented with considerable success. Examples
include semantic Web services (OWL-S 2004), tourism information
systems (Cardoso 2004), semantic digital libraries, (Shum, Motta et al.
2000), semantic Grid (Roure, Jennings et al. 2001), semantic Web
search (Swoogle 2005), and bioinformatics (Kumar and Smith 2004).
To increase the development of semantic Web systems and
solutions, in this chapter we will show how semantic Web
applications can be developed using the Jena framework.
2. THE SEMANTIC WEB STACK
The semantic Web identifies a set of technologies, tools, and
standards which form the basic building blocks of an infrastructure to
support the vision of the Web associated with meaning. The semantic
Web architecture is composed of a series of standards organized into a
certain structure that is an expression of their interrelationships. This
architecture is often represented using a diagram first proposed by
Tim Berners-Lee (Berners-Lee, Hendler et al. 2001). Figure 14-1
illustrates the different parts of the semantic Web architecture. It starts
with the foundation of URIs and Unicode. On top of that we can find
the syntactic interoperability layer in the form of XML, which in turn
underlies RDF and RDF Schema (RDFS). Web ontology languages
are built on top of RDF(S). The three last layers are the logic, proof,
and trust, which have not been significantly explored. Some of the
layers rely on the digital signature component to ensure security.
Trust
Our focus in
this chapter Proof
erutangiS
Logic latigiD
Ontologyvocabulary
RDF + rdfschema
XML + NS+ xmlschema
Unicode URI
Figure 14-1. Semantic Web stack (Berners-Lee, Hendler et al. 2001)
Programming the Semantic Web 3
In the following sections we will briefly describe these layers.
While the notions presented have been simplified, they provide a
reasonable conceptualization of the various components of the
semantic Web.
URI and Unicode. A Universal Resource Identifier (URI) is a
formatted string that serves as a means of identifying abstract or
physical resource. A URI can be further classified as a Uniform
Resource Locator (URL) or a Uniform Resource Name (URN). A
URL identifies resources via a representation of their primary access
mechanism. A URN remains globally unique and persistent even
when the resource ceases to exist or becomes unavailable.
Unicode provides a unique number for every character,
independently of the underlying platform or program. Before the
creation of unicode, there were various different encoding systems
making the manipulation of data complex and required computers to
support many different encodings.
XML. XML is accepted as a standard for data interchange on the
Web allowing the structuring of data but without communicating the
meaning of the data. It is a language for semi-structured data and has
been proposed as a solution for data integration problems, because it
allows a flexible coding and display of data, by using metadata to
describe the structure of data. While XML has gained much of the
world’s attention it is important to recognize that XML is simply a
way of standardizing data formats. But from the point of view of
semantic interoperability, XML has limitations. One significant aspect
is that there is no way to recognize the semantics of a particular
domain because XML aims at document structure and imposes no
common interpretation of the data (Decker, Melnik et al. 2000). Even
though XML is simply a data-format standard, it is part of the set of
technologies that constitute the foundations of the semantic Web.
RDF. At the top of XML, the World Wide Web Consortium
(W3C) has developed the Resource Description Framework (RDF)
(RDF 2002) language to standardize the definition and use of
metadata. RDF uses XML and it is at the base of the semantic Web, so
that all the other languages corresponding to the upper layers are built
on top of it. RDF is a simple general-purpose metadata language for
representing information in the Web and provides a model for
describing and creating relationships between resources. RDF defines
4 Semantic Web Services, Processes and Applications
a resource as any object that is uniquely identifiable by a URI.
Resources have properties associated with them. Properties are
identified by property-types, and property-types have corresponding
values. Property-types express the relationships of values associated
with resources. The basic structure of RDF is very simple and
basically uses RDF triples in the form of (subject, predicate, object).
RDF has a very limited set of syntactic constructs and no other
constructs except for triples is allowed.
RDF Schema. The RDF Schema (RDFS 2004) provides a type
system for RDF. Briefly, the RDF Schema (RDFS) allows users to
define resources (rdfs:Resource) with classes, properties, and values.
The concept of RDFS class (rdfs:Class) is similar to the concept of
class in object-oriented programming languages such as Java and
C++. A class is a structure of similar things and inheritance is allowed.
This allows resources to be defined as instances of classes. An RDFS
property (rdf:Property) can be viewed as an attribute of a class. RDFS
properties may inherit from other properties (rdfs:subPropertyOf), and
domain (rdfs:domain) and range (rdfs:range) constraints can be
applied to focus their use. For example, a domain constraint is used to
limit what class or classes a specific property may have and a range
constraint is used to limit its possible values. With these extensions,
RDFS comes closer to existing ontology languages.
Ontologies. An ontology is an agreed vocabulary that provides a
set of well-founded constructs to build meaningful higher level
knowledge for specifying the semantics of terminology systems in a
well defined and unambiguous manner. Ontologies can be used to
assist in communication between humans, to achieve interoperability
and communication among software systems, and to improve the
design and the quality of software systems (Jasper and Uschold 1999).
In the previous sections, we have established that RDF and RDFS
were the base models and syntax for the semantic Web. On the top of
the RDF/S layer it is possible to define more powerful languages to
describe semantics. The most prominent markup language for
publishing and sharing data using ontologies on the Internet is the
Web Ontology Language (OWL 2004). OWL adds a layer of
expressive power to RDF/S, providing powerful mechanisms for
defining complex conceptual structures, and formally describes the
semantics of classes and properties used in Web resources using, most
Programming the Semantic Web 5
commonly, a logical formalism known as Description Logic (DL
2005).
Logic, Proof, and Trust. The purpose of this layer is to provide
similar features to the ones that can be found in First Order Logic
(FOL). The idea is to state any logical principle and allow the
computer to reason by inference using these principles. For example, a
university may decide that if a student has a GPA higher than 3.8, then
he will receive a merit scholarship. A logic program can use this rule
to make a simple deduction: “David has a GPA of 3.9, therefore he
will be a recipient of a merit scholarship.”
The use of inference engines in the semantic Web allows
applications to inquire why a particular conclusion has been reached
(inference engines, also called reasoners, are software applications
that derive new facts or associations from existing information.).
Semantic applications can give proof of their conclusions. Proof traces
or explains the steps involved in logical reasoning.
Trust is the top layer of the Semantic Web architecture. This layer
provides authentication of identity and evidence of the trustworthiness
of data and services. While the other layers of the semantic Web stack
have received a fair amount of attention, no significant research has
been carried out in the context of this layer.
3. SEMANTIC WEB DEVELOPMENT
ENVIRONMENTS
Several frameworks supporting OWL ontologies are available. We
will briefly discuss the ones that are used the most by the developer
community, namely the Jena framework, Protégé-OWL API and the
WonderWeb OWL API, which are all available for Java language.
These three APIs are open-source and thus interested people can carry
out an in-depth study of their architecture. This is very important for
the current stage of semantic Web development since it is difficult to
know what the application’s scope of the semantic Web will be in the
near future. Therefore, open frameworks will allow for an easier
integration of semantic Web components into new projects.
Jena (Jena 2002; Jena 2005) is a Java framework for building
semantic Web applications developed by the HP Labs Semantic Web
Programme. It provides a programmatic environment for RDF, RDFS
and OWL, including a rule-based inference engine and a query
6 Semantic Web Services, Processes and Applications
language for RDF called RDQL (RDQL 2005). Since we are mostly
interested in ontology support, in subsequent sections we will discuss
the Jena 2 Ontology API included in the Jena toolkit. This API
supports several ontology description languages such as DAML,
DAML+OIL and OWL. However building ontologies in OWL W3C’s
language is strongly recommended because DAML and DAML+OIL
support may be removed in future releases of Jena. Because Jena 2
Ontology API is language-neutral, it should be easy to update existing
projects using Jena and other ontology languages to support OWL.
Jena OWL API supports all three OWL sublanguages, namely OWL
Lite, OWL DL and OWL Full. Specifying an URI to an OWL
ontology, Jena parses the ontology and creates a model for it. With
this model it is possible to manipulate the ontology, create new OWL
classes, properties or individuals (instances). The parsing of OWL
documents can be highly resource consuming, especially for
documents describing large ontologies. To address this particularity,
Jena provides a persistence mechanism to store and retrieve ontology
models from databases efficiently. As stated before, Jena includes an
inference engine which gives reasoning capabilities. Jena provides
three different reasoners that can be attached to an ontology model,
each of them providing a different degree of reasoning capability.
More capable reasoners require substantially more time to answer
queries. Therefore, developers should be very careful when choosing a
reasoner. Of course, it is possible to create a model with no reasoner
defined. An interesting aspect of Jena is that its inference engine is
written in a very generic way so that it allows developers to write their
own inference rules to better address their needs. This generic
implementation also allows for attaching any reasoner that is
compliant with the DIG interface, which is a standard providing
access to reasoners, such as Racer, FaCT, and Pellet. Another
important aspect is that it is very easy to find documentation and
practical programming examples for Jena.
Protégé (Protégé 2005) is a free, open-source platform that
provides a growing user community with a suite of tools to construct
domain models and knowledge-based applications with ontologies. It
was developed by the Stanford Medical Informatics Labs of the
Stanford School of Medicine. The Protégé-OWL API is an open-
source Java library for OWL and RDF(S). The API provides classes
and methods to load and store OWL files, to query and manipulate
OWL data models, and to perform reasoning (Protégé-API 2006).
This API, which is part of the Protégé-OWL plug-in, extends the
Programming the Semantic Web 7
Protégé Core System based on frames so that it can support OWL
ontologies and allows users to develop OWL plug-ins for Protégé or
even to create standalone applications. Protégé-OWL API uses Jena
framework for the parsing and reasoning over OWL ontologies and
provides additional support for programming graphical user interfaces
based on Java Swing library. The Protégé-OWL API architecture
follows the model-view pattern, enabling users to write GUIs (the
“view”) to manipulate the internal representation of ontologies (the
“model”). This architecture, together with the event mechanism also
provided, allows programmers to build interactive user interfaces in an
efficient and clean way. A community even stronger than Jena’s one
has grown around Protégé, making it very easy to find good
documentation, examples and support for this API.
WonderWeb OWL API (OWLAPI 2006) is another API providing
programmatic services to manipulate OWL ontologies. It can also
infer new knowledge once a reasoner is attached to the ontology
model. Pellet is one of the reasoners that is currently supported. One
should note that the current release of this API is still in working
progress. Consequently, there are some issues that need to be
corrected. Nevertheless, WonderWeb OWL API was successfully
used in several projects such as Swoop (SWOOP 2006) and Smore
(SMORE 2006), respectively, an ontology editor and a semantic
annotation tool, from the MIND LAB at the University of Maryland
Institute for Advanced Computer Studies. This demonstrates that this
API is mature enough to be considered when developing semantic
Web applications. One major drawback of the WonderWeb OWL API
is lack of documentation. Currently, Javadoc documentation and some
open-source applications that use this API, is what can be found about
it. It is very difficult to find practical examples. This fact may lead
developers to choose to discard this API.
4. OUR RUNNING ONTOLOGY
Our recent work has involved the development of a Semantic
Course Management System (S-CMS). Course management systems
(CMS) are becoming increasingly popular. Well-known CMSs include
Blackboard.com and WebCT.com whose focus has centered on
distance education opportunities. Typically, a CMS include a variety
of functionalities, such as class project management, registration tool
for students, examinations, enrolment management, test
8 Semantic Web Services, Processes and Applications
administration, assessment tools, and online discussion boards
(Meinel, Sack et al. 2002).
The S-CMS system that we have developed is part of the
Strawberry project 1 and explores the use of semantic Web
technologies to develop an innovative CMS. The S-CMS provides a
complete information and management solution for students and
faculty members. Our focus and main objective was to automate the
different procedures involved when students enroll or register for class
projects. Managing a large course and its class projects is a complex
undertaking. Many factors may contribute to this complexity, such as
a large number of students, the variety of rules that allow students to
register for a particular project, students’ background, and student’s
grades.
The development of a semantic Web application typically starts
with the creation of one or more ontology schema. For simplicity
reasons, in this chapter we will only present one ontology, the
University ontology. This ontology will be used in all the
programming examples that we will show. As with any ontology, our
ontology contains the definition of the various classes, attributes, and
relationships that encapsulate the business objects that model a
university domain. The class hierarchy of our simple ontology is
shown in Figure 14-1 using the OWL Viz Protégé plug-in (OWLViz
2006).
Figure 14-2. Class hierarchy
Some of the properties of our ontology are shown in Figure 14-2
using Protégé (Protégé 2005).
1 http://dme.uma.pt/jcardoso/Research/Projects/Strawberry/
Programming the Semantic Web 9
Class hierarchy
Properties
Figure 14-3. Classes and properties
5. USING JENA
Jena is a framework for building Semantic Web applications. It
provides a programmatic environment for RDF, RDFS and OWL. It
also includes a rule-based inference engine. Jena is open source and is
a development effort of the HP Labs Semantic Web Research
program. HP Labs have made considerable investments in Semantic
Web research since 2000 which lead to the development of standards