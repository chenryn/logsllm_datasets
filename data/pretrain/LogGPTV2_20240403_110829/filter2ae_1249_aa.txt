#### 基本数据结构
  * glibc通过fopen函数调用为用户返回一个FILE的描述符，该FILE实际是一个结构体。该结构被一系列流函数操作。该结构体大致分为三部分
    * _flags文件流的属性标志（fopen的mode参数决定）
    * 缓冲区（为了减少io的syscall掉用）
    * 文件描述符（文件流的唯一性，例如stdin=0，stout = 1）
        struct _IO_FILE {
      int _flags;        /* High-order word is _IO_MAGIC; rest is flags. */
    #define _IO_file_flags _flags
      /* The following pointers correspond to the C++ streambuf protocol. */
      /* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */
      char* _IO_read_ptr;    /* Current read pointer */
      char* _IO_read_end;    /* End of get area. */
      char* _IO_read_base;    /* Start of putback+get area. */
      char* _IO_write_base;    /* Start of put area. */
      char* _IO_write_ptr;    /* Current put pointer. */
      char* _IO_write_end;    /* End of put area. */
      char* _IO_buf_base;    /* Start of reserve area. */
      char* _IO_buf_end;    /* End of reserve area. */
      /* The following fields are used to support backing up and undo. */
      char *_IO_save_base; /* Pointer to start of non-current get area. */
      char *_IO_backup_base;  /* Pointer to first valid character of backup area */
      char *_IO_save_end; /* Pointer to end of non-current get area. */
      struct _IO_marker *_markers;
      struct _IO_FILE *_chain;
      int _fileno;
    #if 0
      int _blksize;
    #else
      int _flags2;
    #endif
      _IO_off_t _old_offset; /* This used to be _offset but it's too small.  */
    #define __HAVE_COLUMN /* temporary */
      /* 1+column number of pbase(); 0 is unknown. */
      unsigned short _cur_column;
      signed char _vtable_offset;
      char _shortbuf[1];
      /*  char* _save_gptr;  char* _save_egptr; */
      _IO_lock_t *_lock;
    #ifdef _IO_USE_OLD_IO_FILE
    };
    struct _IO_FILE_complete
    {
      struct _IO_FILE _file;
    #endif
    #if defined _G_IO_IO_FILE_VERSION && _G_IO_IO_FILE_VERSION == 0x20001
      _IO_off64_t _offset;
    # if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T
      /* Wide character stream stuff.  */
      struct _IO_codecvt *_codecvt;
      struct _IO_wide_data *_wide_data;
      struct _IO_FILE *_freeres_list;
      void *_freeres_buf;
    # else
      void *__pad1;
      void *__pad2;
      void *__pad3;
      void *__pad4;
    # endif
      size_t __pad5;
      int _mode;
      /* Make sure we don't get into trouble again.  */
      char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
    #endif
    };
  * 但实际上，glibc会在FILE结构外包一层IO_FILE_plus结构，就是多了一个vtable（虚拟函数表，类似C++虚拟函数表）
        struct _IO_FILE_plus
    {
      FILE file;
      const struct _IO_jump_t *vtable;
    };
  * 其中vtable保存着标准流函数底层调用的函数指针（32bit下在FILE结构偏移0x94处，64bits下在偏移0xd8处）
        void * funcs[] = {
          JUMP_FIELD(size_t, __dummy);
        JUMP_FIELD(size_t, __dummy2);
        JUMP_FIELD(_IO_finish_t, __finish);
        JUMP_FIELD(_IO_overflow_t, __overflow);
        JUMP_FIELD(_IO_underflow_t, __underflow);
        JUMP_FIELD(_IO_underflow_t, __uflow);
        JUMP_FIELD(_IO_pbackfail_t, __pbackfail);
        /* showmany */
        JUMP_FIELD(_IO_xsputn_t, __xsputn);
        JUMP_FIELD(_IO_xsgetn_t, __xsgetn);
        JUMP_FIELD(_IO_seekoff_t, __seekoff);
        JUMP_FIELD(_IO_seekpos_t, __seekpos);
        JUMP_FIELD(_IO_setbuf_t, __setbuf);
        JUMP_FIELD(_IO_sync_t, __sync);
        JUMP_FIELD(_IO_doallocate_t, __doallocate);
        JUMP_FIELD(_IO_read_t, __read);
        JUMP_FIELD(_IO_write_t, __write);
        JUMP_FIELD(_IO_seek_t, __seek);
        JUMP_FIELD(_IO_close_t, __close);
        JUMP_FIELD(_IO_stat_t, __stat);
        JUMP_FIELD(_IO_showmanyc_t, __showmanyc);
        JUMP_FIELD(_IO_imbue_t, __imbue);
    #if 0
        get_column;
        set_column;
    #endif
    };
  * IO_FILE_plus各种偏移
        0x0   _flags
    0x8   _IO_read_ptr
    0x10  _IO_read_end
    0x18  _IO_read_base
    0x20  _IO_write_base
    0x28  _IO_write_ptr
    0x30  _IO_write_end
    0x38  _IO_buf_base
    0x40  _IO_buf_end
    0x48  _IO_save_base
    0x50  _IO_backup_base
    0x58  _IO_save_end
    0x60  _markers
    0x68  _chain
    0x70  _fileno
    0x74  _flags2
    0x78  _old_offset
    0x80  _cur_column
    0x82  _vtable_offset
    0x83  _shortbuf
    0x88  _lock
    //IO_FILE_complete
    0x90  _offset
    0x98  _codecvt
    0xa0  _wide_data
    0xa8  _freeres_list
    0xb0  _freeres_buf
    0xb8  __pad5
    0xc0  _mode
    0xc4  _unused2
    0xd8  vtable
#### 攻击思路
  * ##### 针对vtable的利用思路
    * 改写vtable的函数指针，触发任意代码执行
    * 伪造vtable，即改写IO_FILE_plus的vtable指针指向我们的fake_vtable，在fake_vtable里布置我们的恶意操作函数。
    * 伪造整个FILE结构。
  * ##### FSOP(File-Stream-Oriented-Programming)
    * 由于所有的FILE结构是通过链表链接的。我们可以控制链表结构，伪造整个文件链。
      * _chain
      * _IO_list_all
    * 执行函数_IO_flush_all_lockp，会flush表上的所有的FILE。通过控制一些量，可以达到任意代码执行的目的。该函数会在以下情况下自行调用。
      * 产生abort时
      * 执行exit函数时
      * main函数返回时
  * ##### 高级利用方式（任意地址读、写）
    * 由于gblic的更新，很多对vtable的攻击方式不再适用，换个思路。不再只看向vtable，而是转向stream_buffer。
    * 通过控制_fileno，read_ptr、等等指针我们可以实现任意地址读和任意地址写操作。
  * #### IO缓冲区的攻击
    * ##### 利用fwrite进行任意地址读
      * 对目的fp的设置，以及绕过。
        * 设置_fileno为stdout，泄露信息到stdout。
        * 设置_flags & ~ IO_NO_WRITE
        * 设置_flags |= IO_CURENTLY_PUTTING
        * 设置 write_base指向leaked地址的起始，write_ptr指向leaked地址的结束。
        * 设置_IO_read_end == IO_wrie_base。
      * 相关的检查
        * _flags & ~ IO_NO_WRITE、__flags |= IO_currently_putting设置
                        if ((f->_flags & _IO_LINE_BUF) && (f->_flags & _IO_CURRENTLY_PUTTING))
                {
                 ..........................
              }
                }
              else if (f->_IO_write_end > f->_IO_write_ptr)
                count = f->_IO_write_end - f->_IO_write_ptr; /* Space available. */
              /* Then fill the buffer. */
              if (count > 0)
                {
               ......................
                }
              if (to_do + must_flush > 0)
                {
                ...................................
                  if (do_write)
              {
                count = old_do_write (f, s, do_write);
                to_do -= count;
                if (count _flags & _IO_IS_APPENDING)
                     /* On a system without a proper O_APPEND implementation,
                            you would need to sys_seek(0, SEEK_END) here, but is
                            not needed nor desirable for Unix- or Posix-like systems.
                            Instead, just indicate that offset (before and after) is