攻击手段与影响
接下来就让我们首先看一下两种利用文件下载的 XSS 攻击的手段。这里介绍的攻击方法能在 Internet Explorer（IE）中重现，而使用 IE 以外的浏览器则不一定能够重现，但由于 IE 的市场份额很高，而且使用此处介绍的方法开发的应用也同样适用于其他浏览器，因此这里我们以 IE 浏览器为例来进行讲述。
图像文件引起的 XSS
在某些情况下，将包含 HTML 或 JavaScript 代码的文件伪装成图像文件上传，就可能会形成跨站脚本（XSS）攻击。而且通过下面展示的例子也可以看到，即使已经实施了相应的对策来防止用户上传的脚本在服务器端被执行，在下载文件的时候还是有可能会遭受跨站脚本攻击。
虽然 IE8 及以后的版本中已经对利用图像的 XSS 攻击进行了防范，但考虑到 IE7 及之前的版本还有一定数量的用户，因此在应用中采取防范措施还是很有必要的。
在试验环境中打开 http://example.jp/4c/4c-001a.php
 ，或者在 http://example.jp/4c/
 的菜单中点击“2. 4c-001a: 文件上传（经过下载脚本）”链接，该上传页面已经实施过针对执行脚本的防范对策。
由于页面上会要求输入文件名，因此这里我们新建以下文本文件并将文件命名为 4c-901.png 后保存，然后再在页面上指定此文件名。
代码清单 4c-901.png
完成上传后，页面显示如下。由于 4c-901.png 并非标准的图像文件，因此页面上显示了一个红叉的记号。
图 4-108 上传了伪装成图像的文件
这时，点击 4c-901.png 链接，先前的伪装图像就会直接显示出来。如下图所示，IE7 执行了 JavaScript 代码，而 IE8 则只显示了文本信息。
图 4-109 在 IE7 及之前的版本中 XSS 攻击成功
在实际发动攻击时，攻击者上传包含恶意 JavaScript 代码的图像文件以后，还会将显示此图像的 URL 添加到恶意网站中。然而，由于使用 img 元素显示图像时 JavaScript 不会被执行，因此攻击者通常利用 iframe 等元素来让它以 HTML 的形式显示。
而 JavaScript 被执行后，网站的 HTTP 消息就如下图的 Fiddler 界面所示。
图 4-110 被执行 JavaScript 的网站的 HTTP 消息
可以看出 HTTP 响应中的 Content-Type 消息头准确无误地指定为了 image/png。然而 IE7 却对此视而不见，仍然将该响应判断为 HTML 类型，从而也就导致了 JavaScript 被执行。
利用图像文件的 XSS 所造成的影响与 4.3 节介绍的普通的 XSS 相同，即 Cookie 被窃取而造成伪装攻击、Web 功能被恶意使用、页面被篡改进而导致钓鱼攻击等。
PDF 下载引起的 XSS
除了图像服务网站之外，下面我们再来看一个提供 PDF 等应用文件下载服务的网站案例。这里的示例网站也就相当于存储服务网站的简略版。
示例脚本解说
首先我们来看一下示例脚本。该试验中的文件上传页面（4c-011.php）基本上直接沿用了 4c-001.php，只是将 action 的目标改为了 4c-012.php。
同样，在接收上传文件的页面（4c-012.php）和下载脚本（4c-013.php）中，将接收文件的类型更改为了 PDF。
代码清单 /4c/4c-012.php（开头和末尾）
">
已上传 
下面是下载脚本的源码。阴影部分为与 4c-003.php 的不同之处。
代码清单 /4c/4c-013.php
 'application/x-pdf');
$file = $_GET['file'];
$info = pathinfo($file);       // 取得文件信息
$ext = strtolower($info['extension']);     // 扩展名（统一为小写字母）
$content_type = $mimes[$ext]; // 取得 Content-Type
if (! $content_type) {
  die(' 只能上传扩展名为 pdf 的文件  ');
}
header('Content-Type: ' . $content_type);
readfile(UPLOADPATH . '/' . basename($file));
?>
首先看到的是正常情况下的页面跳转。在页面 4c-011.php 上指定恰当的 PDF 文件后点击上传按钮，页面显示如下。
图 4-111 上传 PDF 文件后的页面
这时点击下载链接就能下载 PDF 文件，页面显示如下图所示。
图 4-112 点击链接后下载 PDF
将 HTML 文件伪装成 PDF 而引起的 XSS
下面我们就不再使用正常的 PDF 文件，而是将仅包含 script 元素的 HTML 文件命名为 4c-902.pdf 后保存，然后再通过刚才的脚本（4c-011.php）将其上传。
代码清单 4c-902.pdf
上传此伪装 PDF 文件后，页面显示如下图所示。这时点击“4c-902.pdf 上传完毕”链接就会出现下载文件的对话框。
而以下就是攻击者生成恶意链接的手段。右击下载使用的链接，选择菜单中的“复制快捷方式”。
图 4-113 选择菜单中的“复制快捷方式”
接下来，将快捷方式（URL）粘贴在浏览器的地址栏上。这时理论上应该会出现类似于下面的 URL，但由于 file= 后面的文件名是随机生成的，因此在读者的环境中应该会显示为其他字符串。
http://example.jp/4c/4c-013.php?file=1af12536.pdf
此时，将字符串 /a.html 插入到 URL 中，如下面的阴影部分所示。插入的字符串被称为 PATHINFO，这是以貌似文件名的形式将参数添加到 URL 中的方法。由于文件 a.html 实际上并 不存在，因此该字符串会被作为参数传递给 4c-013.php 脚本。
http://example.jp/4c/4c-013.php/a.html
?file=1af12536.pdf
如果这时按下回车键，如下图所示，JavaScript 就会被执行。与伪装图像的情况不同，IE7 和 IE8 中都执行了 JavaScript 代码。
图 4-114 XSS 攻击成功
由此可见，将 HTML（JavaScript）文件伪装成 PDF 并上传后，只要在调用该文件的 URL 中添加 PATHINFO，就能使得攻击对象网站执行 JavaScript。
漏洞的根本原因是 Content-Type 不正确
伪装 PDF 之所以会引起 XSS 漏洞，其根本原因在于 Content-Type 有误。PDF 正确的 Content-Type 为 application/pdf，而如果 Content-Type 被错误地设置为了 application/x-pdf`，就会直接导致漏洞的产生。
安全隐患的产生原因
文件下载之所以会引起 XSS 是因为受到了 Internet Explorer 特性的影响。Internet Explorer 中判断文件类型时，除了基于 HTTP 响应的 Content-Type 消息头以外，还会参考 URL 中的扩展名和文件的内部数据。虽然具体的判断方法并没有对外公开，但目前能够得知的内部行为如下。
内容为图像时
文件内容为图像的情况下，IE 判断文件类型时除了基于响应头中的 Content-Type，还会用到图像文件的文件头。图像文件头是指位于文件开头的固定字符串，一般被用来识别文件类型。GIF、JPEG65
 、PNG 的文件头如下表所示。
表 4-20 图像文件的文件头
图像格式
文件头
GIF
GIF87a 或 GIF89a
JPEG
\xFF\xD8\xFF
PNG
\x89PNG\x0D\x0A\x1A\x0A
Internet Explorer（7 及以前版本）中默认按照以下方法判断文件类型。
Content-Type 和文件头一致时
这时采用 Content-Type 所示的文件类型。
Content-Type 和文件头不一致时
Content-Type 和文件头不一致时，两者都会被浏览器忽略。这时浏览器会根据文件的内容来推测文件类型。如果文件中包含 HTML 标签，该文件就可能会被判定为 HTML 文件 66
 。在“图像文件引起的 XSS”这一小节中介绍的伪装 PNG 文件就属于这类情况。该示例文件中虽然没有包含图像文件头，但根据笔者的试验，即使添加了图像文件头，如果与 Content-Type 矛盾也会被浏 览器无视 67
 。
内容不为图像时
图像文件以外的情况下，各 IE 版本都做如下处理。首先，根据浏览器是否能够处理接收到的 Content-Type，IE 的举动会有所不同。
如果IE能够处理收到的 Content-Type，就会按照 Content-Type 来处理。注册表 HKEY_CLASSES_ROOT\MIME\Database\Content Type 中保留了IE能够处理的所有 Content-Type。图 4-115 中列出了其中的一部分。如图所示，PDF 的 Content-Type 为 application/pdf，而非 application/x-pdf。
图 4-115 IE 能够处理的 Content-Type
如果收到的 Content-Type 不是 IE 能够处理的类型，那么 IE 就会根据 URL 中的扩展名进行判断。判断规则的详情非常复杂，有兴趣的读者可以参考长谷川阳介的文章《无法忽视：IE 中对 Content-Type 的忽视》[1]。在上面介绍的“将 HTML 文件伪装成 PDF 而引起的 XSS”这一小节中，生成用来攻击的 URL 时添加了作为 PATHINFO 的 /a.html，这就是恶意利用了 IE 会通过 URL 中的扩展名来判断文件类型的特性。
65
 JPEG 本来是图像压缩方法的名称，作为文件格式时的术语应该为 JFIF，然而由于 JPEG 也普遍被用来指代 JFIF 文件格式，因此本书也采用 JPEG 这个称呼。
66
 在以前（IE7 为止）的版本中，当文件满足上述条件时会被判定为 HTML 文件，而从 IE8 开始，满足上述同等条件的文件则会被视为文本文件（text/plain）。
67
 详情请参考笔者的博客文章《图像文件引起跨站脚本（XSS）的倾向与对策》[2]。
对策
应对文件下载所引起的 XSS 漏洞的方法可分为上传时的对策和下载时的对策，分别如下。
文件上传时的对策
上传文件时实施以下操作。
校验扩展名是否在允许范围内
图像文件的情况下确认其文件头
关于校验扩展名，4.12.2 节的对策已经详述过。PHP 可以使用 getimagesize
 函数来确认图像的文件头。
格式清单 getimagesize 函数
  array getimagesize(string $filename [, array &$imageinfo])
该函数将接收到的图像文件的文件名作为参数，并以数组的形式返回图像的长宽尺寸和图像格式等信息。下面是一些常见的图像格式所对应的整数值和常量。详情请参考 PHP 的文档 68
 。
表 4-21 getimagesize 函数返回的图像格式信息
值
常量
1
IMAGETYPE_GIF
2
IMAGETYPE_JPEG
3
IMAGETYPE_PNG
在之前的介绍中，我们已经了解到图像上传脚本的改良版 4c-002a.php 中存在 XSS 漏洞。而使用 getimagesize
 函数就可以消除 XSS 漏洞。假设改良后的脚本名为 4c-002b.php。检验图像文件的函数 check_image_type
 的定义如下。
代码清单 /4c/4c-002b（check_image_type 函数的定义）
    // function check_image_type($imgfile, $tofile)
    //   $imgfile : 校验对象的图像文件名
    //   $tofile : 文件名（用于校验扩展名）
    function check_image_type($imgfile, $tofile) {
      // 取得并校验扩展名
      $info = pathinfo($tofile);
      $ext = strtolower($info['extension']);  // 扩展名（统一为小写字母）
      if ($ext != 'png' && $ext != 'jpg' && $ext != 'gif') {
        die(' 只能上传扩展名为 gif、jpg 或 png 的图像文件 ');
      }
      // 取得图像类型
      $imginfo = getimagesize($imgfile);  // 取得图像信息的数组
      $type = $imginfo[2];  // 取出图像类型
      // 下面，如果是正常的组合就 return