SPARTA's  Phisherman  project  [26]  is  more 
closely  related  to  UnMask,  in  that  both  employ  a 
database  as  central  repository. 
the 
Phisherman project is a global effort to simply collect 
and archive data related particularly to phishing scams 
  However, 
and  disseminate  this  data  to  its  subscribers.    In 
contrast, our goal is to help users in a more direct way, 
i.e., provide them an automated tool to process emails.  
In the future, there may be a utility in integrating our 
work  with  the  Phisherman  project  services.  Our 
capability  of  correlating  multiple  emails  across 
multiple  users  or  retrieving  past  cases  can  be  easily 
scaled for global applications and some integration of 
UnMask  with  Phisherman  may  be  an  appropriate 
direction,  after  experience  with  the  deployment  of 
UnMask at law enforcement agencies. 
Organizations such as the Anti-Phishing Working 
Group (APWG) [1] provide public up-to-date statistics 
and maintain an extensive collection of phishing email 
messages. Through special arrangement with APWG, 
we  have  a  subset  of  their  phishing  email  collection 
and  are  using  these  emails  in  our  test  of  UnMask.   
The anti-phishing research group at Indiana University 
[6]  conducts  surveys  and  research  to  understand 
behavioral  aspects  related  to  phishing.  Studies  of 
phishing 
the 
idiosyncrasies of the current email system. 
some  of 
illustrate 
scams 
[7] 
3. Overview of UnMask 
In  this  section  we  present  a high-level  overview 
of  the  UnMask  system.  We  will  present  a  more 
detailed implementation of UnMask in Section 4.   
Figure 1: Overview of the UnMask System 
information  about 
As  a  system  to  automate  and  facilitate  email 
investigations  for  law  enforcement,  UnMask  must 
support  the  functionalities  to  adequately  parse  a 
submitted  email  and  automatically  collect  detailed 
forensic 
the  email.  Figure  1 
presents the basic architecture of the UnMask system. 
As shown in the figure, UnMask consists of three key 
components:  a  web-based  user  interface,  a  database 
system, and a UNIX Tools system. Users interact with 
UnMask via the web-based user interface to perform 
forensic tasks such as submitting an email message for 
analysis or generating email investigation reports.  
The  database  system  glues  all  components  of 
UnMask together. In particular, it parses and stores the 
submitted  email  messages,  and  interacts  with  the 
UNIX  Tools  system  to  gather  detailed  forensic 
information  about  the  email  messages.  The  UNIX 
Tools  system  component  provides  the  basic  forensic 
toolkit  to  implement  Internet  email  investigation.  In 
the  rest  of  this  section,  we  describe  in  further  detail 
the individual components and their interactions. 
3.1 UnMask web-based user interface 
law-enforcement 
UnMask users interact with the system via a web-
based user interface. UnMask allows users to perform 
a variety of automatic email investigation tasks. Users 
can submit a specific email message for analysis; they 
can  also  cross-examine  or  correlate  emails  with 
certain  properties  by  querying  the  system.      By 
default,  when  a  user  submits  an  email  message,  the 
UnMask  system  conducts  email  header  and  body 
forensic  analyses  similar  to  the  current  common 
practice  of 
investigators.  For 
example,  UnMask  helps  identify  the  ISP  and  its 
contact information associated with the email sender. 
UnMask  greatly  reduces  the  complexity  in  email 
forensics  by  automating  this  email  investigation 
process. When the analysis of the submitted message 
is  done,  the  user  can  obtain  a  forensic  report  of  the 
message via the same user interface. Alternatively, the 
user  can  also  specify  an  email  address  to  which  the 
report should be delivered.  The web-based interface 
supports  organizing  investigations  into  cases  and 
facilitates  maintaining  meta-information  such  as 
jurisdiction and investigator information. 
In addition to submitting and analyzing individual 
messages,  UnMask  users  can  also  cross-examine  or 
correlate  multiple  messages  by  querying  the  system. 
For  example,  users  may  wish  to  obtain  forensic 
information  of  all  messages  related  to  the  same 
investigation  case  or  all  messages  from  the  same 
sender within a certain period of time.  Via the web 
interface,  users  may  access  the  system  from  the 
internal  networks  of  law-enforcement  agencies,  or 
through  the  public  Internet.  Given  that  users  may 
access  UnMask via the public Internet, it is required 
that  the  connection  between  the  web-based  user 
interface and the UnMask database system be highly 
secure.  The web interface that we use is adapted from 
a  project  that  was  designed  as  a  highly  secure 
environment for investigators to upload password files 
to a code-breaking system [27]. 
3.2 UnMask database system 
At the heart of the UnMask system is a database 
system  that  glues  all  the  components  of  the  system 
together.  We  chose  to  use  the  PostgresSQL  [28] 
database  because  of  several  features  of  use  to  us, 
including triggers and stored procedures, and the fact 
that  it  is  freely  available  and  well  supported.    The 
database system implements three key functionalities 
to automate and facilitate the email forensic efforts of 
143143
law-enforcement investigators. First, when a message 
is submitted via the web interface, the message is fully 
parsed  to  obtain  all  the  atomic  elements  of  the 
message such as email addresses, mail server domain 
names,  mail  server  IP  addresses,  URLs  contained  in 
the  message  body,  and  so  on  [29].  These  atomic 
elements, along with the raw submitted message, are 
stored in the database.  
the  message.  The 
interaction  between 
Second, the  database  system  instructs  the  UNIX 
Tools  system  (see  Section  3.3)  to  launch  the  proper 
forensic tools to collect further information associated 
with 
the 
database  and  the  UNIX  Tools  system  is  initiated 
through an innovative use of the “trigger mechanism” 
of PostgreSQL, in conjunction with a simple protocol 
we  have  implemented  (called  UUTC)  between  the 
PostgreSQL  database  and  the  UNIX  Tools  system.  
The  database  system  can 
for  example, 
automatically signal the UNIX Tools system to gather 
the  location  and  contact  information  of  the  ISPs  in 
charge of the mail servers along the message delivery 
path  to  aid  the  email  investigation.  Such  forensic 
information  obtained  by  the  UNIX  Tools  is  in  turn 
stored back into the database system.  
thus, 
Third, 
the  database  system  also  provides 
mechanisms  for  supporting  cross-examination  and 
correlation  of  email  messages.  For  example,  users 
may  wish  to  obtain  forensic  information  of  all 
messages related to the same investigation case or all 
messages from the same sender within a certain period 
of  time.  Such  cross-examination  of  email  messages, 
however, is constrained by proper jurisdiction so that 
one investigator does not get access to information of 
another investigator unless properly authorized to do 
so.   
3.3 UnMask UNIX tools system 
The  UnMask  UNIX  Tools  system  provides  the 
basic forensic toolkit for email investigation. Based on 
the  current  common  practice  of  law  enforcement  in 
email investigations, the UNIX Tools system provides 
the  following  basic  functionalities:  1)  mapping 
between  domain  names  and 
IP  addresses;  2) 
identifying the DNS and mail servers associated with 
a domain; 3) identifying the contact information of the 
person(s) or organization responsible for maintaining 
an IP address or domain; 4) verifying the validity of 
email addresses;  and 5) reachability of and routes to 
an IP address or domain.      
The  UNIX  Tools  system  runs  as  a  background 
daemon  on  a  UNIX  machine  waiting  for  service 
requests from the database system. Upon receiving a 
request  from  the  database  system,  the  UNIX  Tools 
system  will  perform  the  corresponding  action(s)  and 
144144
return  the  results  to  the  database  system,  where  the 
results  may  be  further  parsed  and  stored.  For  better 
performance, multiple UNIX Tools machines may be 
deployed in an UnMask system.   
4. Detailed software architecture 
In  this  section,  we  describe  the  functionality  of 
two  important  aspects  of  the  UnMask  system:  the 
database  server  component,  including  the  parsing  of 
the emails; and the gathering of information from the 
Internet  by  the  UNIX  Tools  component.    Figure  2 
below  shows  the  interaction  of  the  Website,  the 
PostgreSQL database and the UNIX Tools system. 
Figure 2: UnMask Architecture 
4.1 The database server 
In implementing the UnMask system we chose to 
use  the  PostgreSQL  8.2  database.  Our  requirements 
for a database were the ability to: (1) store all email 
related data after parsing it to an appropriate level of 
granularity and (2) mechanisms to invoke a toolkit of 
various UNIX tools like traceroute, dig, whois, etc. to 
retrieve  additional  information  related  to  the  email 
from the Internet. 
4.1.1 Why PostgreSQL 
We  chose  PostgreSQL  over  other  relational 
database management systems because it is free / open 
source and it has excellent support for many features 
including the following: 
Native  Interfaces  for  Procedural  Languages: 
PostgreSQL  allows  user  defined  functions  to  be 
written in programming languages besides the native 
PL/pgSQL.    Currently  supported  languages  include 
Perl and C. We extensively use Perl in our database 
programming.   
Triggers  and  Stored  Procedures:  Triggers  are  a 
functional 
(user-defined) 
invoke 
mechanism 
to 
processing  initiated  by  database  commands  such  as 
inserting a record.  PostgreSQL has excellent version 
control  of  stored  procedures  (functions)  and  the 
procedures can be written in many languages. 
ACID  Transactional  Capabilities:  PostgreSQL 
has excellent support for atomic transactions. One can 
do  a  "begin  transaction"  and  then  issue  commands 
such  as  “create  table”,  and  “alter  table”  with  the 
assurance  that  concurrent  transactions  will  work 
properly.  The correct support for handling DDL (Data 
Description Language) statements within a transaction 
was very important to us. 
4.1.2 Email parsers 
In  UnMask,  we  iteratively  parse  an  email  into 
finer  and  finer  granularity.  We  have  organized  our 
parsing  related  code  as  several  (wrapper)  parsers 
described below. These parsers are used to deconstruct 
the raw email, analyze email header fields and email 
body, and extract specific components from the email 
such as IP addresses or machine domain names from 
subparts of the email. These parsers are written in Perl 
and  are  based  on  freely  available  email  and  HTML 
parsing  packages  from  the  CPAN  website  [30].  The 
email is deconstructed in several stages.  
Raw  Email  Parser:  This  parser  is  used  to  first 
deconstruct  the  raw  email  into  various  header  fields 
and  the  body  according  to  the  message  formats 
defined in [29].  
Email  Address  Parser:  This  parser  is  used  to 
extract  email  addresses  found 
in  header  fields.  
Examples  of  such  header  fields  are:  “From”,  “To”, 
“Cc”, “Bcc”, and “Sender.”  
Received  Field  Parser:  This  parser  is  used  to 
deconstruct  “Received”  fields  in  a  header  to  extract 
mail  relay  server  information.  There  may  be  several 
“Received” fields because each mail relay server will 
add its own information in the header.   
Body  Parser:  This  parser  is  used  to  analyze 
HTML  code and plain ASCII text in the email body 
and  extract  email addresses  and links.    In the  future 
we  are  also  planning  to  analyze  other  scripting 
systems such as embedded Java code and Macromedia 
Flash. 
4.2 UnMask database design 
the  email  are  “write  once.”  This  helps 
Our  database  is  designed  so  that  tables  that 
contain the raw email and deconstructed components 
of 
in 
maintaining  an  evidentiary 
trail  for  subsequent 
prosecution. 
  Header  fields 
that  allow  multiple 
instances  (such  as  several  Received  or Resent  fields) 
are maintained as separate tables.  All database inserts 
145145
and retrievals take place using functions to avoid SQL 
injection  [31].    When  inserts  occur  they  can  initiate 
other  database  activities  through  the  use  of  triggers.  
Activities  can  include  parsing  fields  of  records  in 
tables,  initiating  a  connection  to  the  UNIX  Tools 
Server and entering new records into tables.  Specific 
tables  are  used  to  store  data  that  is  returned  from 
actions of the UNIX Tools Server.   