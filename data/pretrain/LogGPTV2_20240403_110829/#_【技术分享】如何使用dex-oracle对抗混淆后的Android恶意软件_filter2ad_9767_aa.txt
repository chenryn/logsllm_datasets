# 【技术分享】如何使用dex-oracle对抗混淆后的Android恶意软件

##### 译文声明
本文是翻译文章，原文来源：rednaga.io  
原文地址：[请插入原始链接]  
译文仅供参考，具体内容表达及含义以原文为准。  
译者：[兴趣使然的小胃](http://bobao.360.cn/member/contribute?uid=2819002922)  
预估稿费：200 RMB  
投稿方式：发送邮件至linwei#360.cn，或登录网页版在线投稿

## 一、前言
大约一两个月前，有人请求我帮助分析一些经过混淆的Android恶意软件。最近，我终于找到了机会进行深入研究。最终，通过使用[dex-oracle](https://github.com/CalebFenton/dex-oracle)和一些技巧，我成功解除了部分恶意软件的混淆。在本文中，我将介绍我在去混淆过程中所使用的一些方法和技术。如果你需要处理大量混淆的Android应用，这篇文章可能会对你有所帮助。

在这个过程中，主要的问题在于dex-oracle无法直接使用，我们需要一些“黑科技”方法才能让它正常工作。具体来说，我修改了一个现有的去混淆插件，并创建了两个新的插件，同时对工具本身也进行了微调。创造一个完全通用的去混淆工具或其他高级工具是非常困难的，因此你需要了解这些工具的工作原理，并根据实际需求进行适当调整。

## 二、样本信息
样本的SHA256值如下所示：
```bash
$ shasum -a 256 xjmurla.gqscntaej.bfdiays.apk
d3becbee846560d0ffa4f3cda708d69a98dff92785b7412d763f810c51c0b091  xjmurla.gqscntaej.bfdiays.apk
```

## 三、整体分析
首先，我喜欢先对目标应用进行反编译，以便对其包结构有一个全面的了解。应用中包含的类如下所示：

有些类名已经被ProGuard处理过（如a、b、c等），但有些类名没有被混淆（如 **Ceacbcbf**）。未混淆的类名很可能是Android组件类（如Activity、Service、Broadcast Receiver等），因为这些组件必须在manifest文件中声明。如果某些工具想要自动化重命名这些类，它们必须在manifest文件中相应地进行重命名，这是一个相对复杂的过程。在这个应用中，这些类名可能被手动修改过。作者可能使用了一种家庭作坊式的混淆方法，部分工作由人工完成。

这意味着这很可能是一个恶意软件，因为合法的开发者通常会直接使用商用混淆工具来处理合法应用，而不会浪费时间手动修改类名为难以辨认的字符串（如Aeabffdccdac）。

应用代码经过了混淆处理。以下是其中一个经过混淆的类示例：
```java
// 混淆后的代码
```
你无法从中看到任何有意义的字符串或类名，这是非常令人头疼的事情。虽然[Simplify](https://github.com/CalebFenton/simplify)可以处理这个程序，但我们发现它并不奏效。没关系，我有很多好点子。我们可以尝试使用Smali，看看能得到什么结果。

## 四、字符串及类混淆方法
首先，我注意到一种“基于索引的字符串查找”类型的混淆方法。
```smali
const v2, 0x320fb26f
invoke-static {v2}, Lxjmurla/gqscntaej/bfdiays/f;->a(I)Ljava/lang/String;
move-result-object v2
```
这种模式在代码中出现了数百次。应用会选择某个数字，将其传递给 **f.a(int)** 方法，然后返回一个字符串。这种方法类似于“第一层”加密算法。应用中可能存在一个大型方法，用于构建字符串数组，并通过数字来索引这些字符串。

第二种混淆方法使用了类似的技术来隐藏类常量。
```smali
const v1, 0x19189b07
invoke-static {v1}, Lxjmurla/gqscntaej/bfdiays/g;->c(I)Ljava/lang/Class;
move-result-object v1
```
这段代码会将一个数字传递给 **g.c(int)** 方法，返回一个类对象（**const-class**）。

你可能会认为需要对这些查找方法进行逆向分析，但实际上并非如此。编写解密程序来深入分析复杂代码并完全掌握内部细节确实很酷，但我们更关心的是速度。我不想把时间浪费在恶意软件作者构造的这种“业余”混淆上。如果不逆向分析，我们可以假设这些“查找”方法都是静态方法。我们应该能够使用与代码中相同的输入来执行这些方法，从而得到解密后的输出。例如，在字符串解密方面，我可以执行 **f.a(0x320fb26f)** 来返回解密后的字符串。

当然，问题是如何执行这部分代码？我们的目标是一个APK文件，我们如何使用所需的输入数据从中执行特定的方法？答案有两个：
1. 使用[dex2jar](https://github.com/pxb1988/dex2jar)或[enjarify](https://github.com/google/enjarify)将目标DEX文件转换为JAR文件，然后将JAR文件导入Java应用中，并从Java应用中调用解码函数。
2. 创建一个插桩或驱动应用，用来接受命令行参数并通过反射调用DEX文件中的方法。然后，在模拟器上执行该应用和DEX文件。

实际上，我选择了第二种方法，并构建了[dex-oracle](https://github.com/CalebFenton/dex-oracle)工具来处理这种情况。这两种方法中，我更喜欢第二种，因为它不需要依赖反编译器，避免了引入逻辑问题。然而，我也多次使用过第一种方法，所以这里有必要简要介绍一下。我已经在dex-oracle中加入了对这类混淆机制的支持，相关插件可参考“[Add indexed string + class lookups](https://github.com/CalebFenton/dex-oracle/commit/cf44cd7aa5e81d5b0bc9588150b81a0fcdc575fe)”页面。

### dex-oracle工作过程
dex-oracle的工作过程非常简单。该工具包含一组插件，插件通过正则表达式提取关键信息，如调用方法及其参数。然后，它使用提取的参数构造真实的调用方法，并将这些方法传递给驱动程序，由驱动程序在模拟器上执行原始DEX文件。最后，插件定义了如何使用驱动程序的输出结果来修改调用方法。例如，正则表达式可以查找“数字常量、调用静态方法（静态方法接受数字并返回字符串）并将结果移动到寄存器的函数”。然后，驱动程序使用该数字执行该方法，返回解密后的字符串。最后，原始的字符串查找代码会被解密后的字符串替换。

你可以参考[TetCon 2016上有关Android去混淆方面的演讲](https://www.slideshare.net/tekproxy/tetcon-2016)来了解更多细节。

## 五、修改前的dex-oracle
不幸的是，即使使用新的插件，dex-oracle仍然无法得到正确的结果。为了便于调试，我禁用了除 **IndexStringLookup** 之外的所有插件，并只处理上图中的d类。
```bash
$ dex-oracle xjmurla.gqscntaej.bfdiays.apk --disable-plugins bitwiseantiskid,stringdecryptor,undexguard,unreflector,indexedclasslookup -i '/d'
Invalid date/time in zip entry
Invalid date/time in zip entry
Invalid date/time in zip entry
Invalid date/time in zip entry
Invalid date/time in zip entry
Invalid date/time in zip entry
Invalid date/time in zip entry
Invalid date/time in zip entry
Invalid date/time in zip entry
Optimizing 11 methods over 23 Smali files.
[WARN] 2017-10-28 12:28:45: Unsuccessful status: failure for Error executing 'static java.lang.String xjmurla.gqscntaej.bfdiays.f.a(int)' with 'I:839889519'
java.lang.reflect.InvocationTargetException
    at java.lang.reflect.Method.invokeNative(Native Method)
    at java.lang.reflect.Method.invoke(Method.java:515)
    at org.cf.oracle.Driver.invokeMethod(Driver.java:71)
    at org.cf.oracle.Driver.main(Driver.java:131)
    at com.android.internal.os.RuntimeInit.nativeFinishInit(Native Method)
    at com.android.internal.os.RuntimeInit.main(RuntimeInit.java:243)
    at dalvik.system.NativeStart.main(Native Method)
Caused by: java.lang.NullPointerException
    at xjmurla.gqscntaej.bfdiays.f.a(SourceFile:528)
    ... 7 more
// ** SNIP MANY SIMILAR ERRORS **
Optimizations: string_lookups=13
Invalid date/time in zip entry
// ** SNIP DUMB WARNINGS **
Invalid date/time in zip entry
Time elapsed 1.954255 seconds
```
上述结果中，“Invalid date/time in zip entry”提示信息是无用的噪音信息。可能是恶意应用作者试图混淆ZIP文件中的时间戳，这一点我不确定。

我关心的是“Unsuccessful status: failure for Error executing 'static java.lang.String xjmurla.gqscntaej.bfdiays.f.a(int)' with 'I:839889519'”这条信息。根据这条提示，工具在执行 **f.a(int)** 时遇到了 **NullPointerException**。