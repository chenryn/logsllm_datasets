• S(cid:48) = refresh(S, I): Given seed = (X, X(cid:48)), current state
S ∈ {0, 1}n, and a sample I ∈ {0, 1}n, output: S(cid:48) :=
S · X + I, where all operations are over F2n .
• (S(cid:48), R) = next(S): Given seed = (X, X(cid:48)) and a state
S ∈ {0, 1}n, ﬁrst compute U = [X(cid:48) · S]m
1 . Then output
(S(cid:48), R) = G(U ).
In [16], Dodis et al. proved the following theorem:
Theorem 6. Let k, m, (cid:96), n be integers, where n ≥ m+9k +1
and γ∗ = m + 8k + 1. Let G be deﬁned as above. Then G
is a ((t(cid:48), 2k, 2k, 2k), γ∗, 2k+1 · ε + 2−k)-robust PRNG, where
t(cid:48) ≈ t.
Theorem 6 shows that the PRNG G resists a total internal
state corruption. In [16], Dodis et al. give concrete values
for a concrete instanciation of the PRNG G; Namely, they
obtain, with G(U ) = (AESU (0), . . . , AESU (6)), n = 705,
m = (cid:96) = 128 and γ∗ = 641. As our analysis shows, the
implementation of the PRNG (and especially the way the
internal state is updated during PRNG operations) may be
used by an attacker to corrupt the PRNG. Then starting
from the deﬁnition of the PRNG G and its concrete instan-
ciation given with G, n, m and (cid:96) above, one can implement
a secure PRNG provided the internal state decomposition
and its update during PRNG operation are analyzed with
care to ensure that the implementation does not contain any
vulnerability.
5. CONCLUSION
We proposed a new security model for PRNG analysis,
where an attacker has partial access to the internal state
and we model the expected properties of the PRNG. This
new security model is based on the most recent and strongest
security model called robustness of PRNG and it is closely
related to its real-life use and implementation. It states that
the PRNG should continue to generate non predictable out-
puts even if its internal state is partially corrupted, and mod-
els real-life situations, where a PRNG environments may be
adversarial and running applications can be partially cor-
rupted.
We analyzed several widely used PRNG (from providers
OpenSSL, OpenJDK, Android, IBM and Bouncycastle) by
clearly describing their operations in the security model. In
particular, we showed that all of them are highly sensitive to
a relatively small corruption of their internal state. This vul-
nerability is due to the concrete implementation of their in-
ternal state that relies on several ﬁelds between which trans-
fers are done, controlled by internal values that can be set
by the attacker. Moreover, we showed that for two providers
(Android and Bouncycastle), internal state corruption is not
required to break the PRNG. This work shows that proper
implementation of PRNG requires a lot of attention and
should therefore rely on proven constructions.
6. ACKNOWLEDGMENTS
The authors would like to thank the anonymous reviewers
for their valuable comments and suggestions to improve the
quality of the paper. They are also grateful to Bart Preneel
for his helpful and constructive comments.
10137. REFERENCES
[1] Java Decompiler project. http://jd.benow.ca.
[2] Java Platform Debugger Architecture (JPDA).
http://docs.oracle.com.
[3] Orchid is a Tor client implementation and library
written in pure Java.
http://www.subgraph.com/orchid.html.
[4] The Bouncy Castle Crypto package is a Java
implementation of cryptographic algorithms.
http://www.bouncycastle.org/.
[5] The Tor Project. https://www.torproject.org.
[6] OpenSSL PRNG Is Not (Really) Fork-safe, Aug 21st,
2013.
http://emboss.github.io/blog/2013/08/21/openssl-
prng-is-not-really-fork-safe/.
[7] Some SecureRandom Thoughts, Aug 14st, 2013, 2013.
http://android-developers.blogspot.fr/2013/08/some-
securerandom-thoughts.html.
[8] Recent Fixes in IBM SecureRandom, 2014.
http://www.cigital.com/justice-league-
blog/2014/05/06/recent-ﬁxes-ibmsecurerandom/.
[9] The Heartbleed Bug, 2014. http://heartbleed.com.
[10] Argyros, G., and Kiayias, A. I forgot your
password: randomness attacks against PHP
applications. In Proceedings of the 21st USENIX
conference on Security symposium (Berkeley, CA,
USA, 2012), Security’12, USENIX Association,
pp. 6–6.
[11] Barak, B., and Halevi, S. A model and
architecture for pseudo-random generation with
applications to /dev/random. pp. 203–212.
[12] Biham, E., and Shamir, A. Diﬀerential fault analysis
of secret key cryptosystems. pp. 513–525.
[13] Boneh, D., DeMillo, R. A., and Lipton, R. J. On
the importance of eliminating errors in cryptographic
computations. 101–119.
[14] Burton, and Kaliski. IEEE P1363: A Standard for
RSA, Diﬃe-Hellman, and Elliptic-Curve Cryptography
(Abstract). In Security Protocols Workshop (1996),
T. M. A. Lomas, Ed., vol. 1189 of Lecture Notes in
Computer Science, Springer, pp. 117–118.
[15] Desai, A., Hevia, A., and Yin, Y. L. A
practice-oriented treatment of pseudorandom number
generators. In EUROCRYPT (2002), L. R. Knudsen,
Ed., vol. 2332 of Lecture Notes in Computer Science,
Springer, pp. 368–383.
[16] Dodis, Y., Pointcheval, D., Ruhault, S.,
Vergnaud, D., and Wichs, D. Security analysis of
pseudo-random number generators with input:
/dev/random is not robust. In ACM Conference on
Computer and Communications Security (2013), A.-R.
Sadeghi, V. D. Gligor, and M. Yung, Eds., ACM,
pp. 647–658.
[17] Dodis, Y., Shamir, A., Stephens-Davidowitz, N.,
and Wichs, D. How to eat your entropy and have it
too - optimal recovery strategies for compromised
rngs. In CRYPTO (2) (2014), J. A. Garay and
R. Gennaro, Eds., vol. 8617 of Lecture Notes in
Computer Science, Springer, pp. 37–54.
[18] Dorrendorf, L., Gutterman, Z., and Pinkas, B.
Cryptanalysis of the random number generator of the
Windows operating system. ACM Trans. Inf. Syst.
Secur. 13, 1 (2009).
[19] Digital Signature Standard (DSS), FIPS PUB 186-2
with Change Notice. National Institute of Standards
and Technology (NIST), FIPS PUB 186-2, U.S.
Department of Commerce, Jan. 2000.
[20] Erlingsson, ´U., Younan, Y., and Piessens, F.
Low-level software security by example. In Handbook
of Information and Communication Security. 2010,
pp. 633–658.
[21] Gutmann, P. Software generation of practically
strong random numbers. In In Proceedings of the 8th
USENIX Security Symposium (1998), pp. 243–257.
[22] Gutterman, Z., Pinkas, B., and Reinman, T.
Analysis of the Linux Random Number Generator. In
IEEE Symposium on Security and Privacy (2006),
IEEE Computer Society, pp. 371–385.
[23] Heninger, N., Durumeric, Z., Wustrow, E., and
Halderman, J. A. Mining your Ps and Qs: Detection
of widespread weak keys in network devices. In
Proceedings of the 21st USENIX Security Symposium
(Aug. 2012).
[24] Kelsey, J., Schneier, B., Wagner, D., and Hall,
C. Cryptanalytic attacks on pseudorandom number
generators. In FSE (1998), S. Vaudenay, Ed.,
vol. 1372 of Lecture Notes in Computer Science,
Springer, pp. 168–188.
[25] Kim, S. H., Han, D., and Lee, D. H. Predictability
of Android OpenSSL’s Pseudo Random Number
Generator. In Proceedings of the 2013 ACM SIGSAC
Conference on Computer Communications Security
(New York, NY, USA, 2013), CCS ’13, ACM,
pp. 659–668.
[26] Michaelis, K., Meyer, C., and Schwenk, J.
Randomly Failed! The State of Randomness in
Current Java Implementations. In CT-RSA (2013),
E. Dawson, Ed., vol. 7779 of Lecture Notes in
Computer Science, Springer, pp. 129–144.
[27] SecurityTracker Alert ID: 1028916. SecurityTracker,
2013.
[28] Secure Hash Standard. National Institute of Standards
and Technology, NIST FIPS PUB 180-1, U.S.
Department of Commerce, Apr. 1995.
[29] Szekeres, L., Payer, M., Wei, T., and Song, D.
Sok: Eternal war in memory. In Proceedings of the
2013 IEEE Symposium on Security and Privacy
(Washington, DC, USA, 2013), SP ’13, IEEE
Computer Society, pp. 48–62.
[30] Trevisan, L. Extractors and pseudorandom
generators. J. ACM 48, 4 (2001), 860–879.
[31] van der Veen, V., dutt Sharma, N., Cavallaro,
L., and Bos, H. Memory errors: The past, the
present, and the future. In Proceedings of the 15th
International Conference on Research in Attacks,
Intrusions, and Defenses (Berlin, Heidelberg, 2012),
RAID’12, Springer-Verlag, pp. 86–106.
APPENDIX
A. MEMORY CORRUPTION
Partial memory corruption in some cases may be easier
than corruption of the entire memory. For example, by ex-
1014JAVA_OPTIONS=‘-Xdebug -Xrunjdwp:transport=
dt_socket,address=8998,server=y,suspend=n’
Figure 2: Modiﬁcation of the Java Virtual Machine
Java Debug Interface Comments
stop at Class:line
set variable = value
Stop execution at line
Change local variable value
Figure 3:
Internal State Modiﬁcation
cessively incrementing or decrementing an array pointer in
a loop without proper bound checking a buﬀer overﬂow may
happen, which can be exploited to read or overwrite sensitive
data. Using this technique it is possible to get a partial or to-
tal information from the memory as the Heartbleed bug [9].
A complete survey of memory attacks has been written by
Szekeres et al. in [29].
A.1 Proof of Concept
As a proof of concept, we describe the technical details
of a malicious program that partially sets the memory of a
Java PRNG. In a ﬁrst stage we present how to interact with
the Java Virtual Machine and in a second stage we present
how to interact with the PRNG.
The Java Virtual Machine. Our work is based on Java
execution model, particularly the Java 7 update 51. Java
source code is compiled into Java Virtual Machine instruc-
tions (or bytecodes) and is executed in a abstract comput-
ing machine called Java Virtual Machine (JVM). The JVM
translates the bytecode into speciﬁc machine code instruc-
tions and manages the memory for Java applications. One
way to establish a connection between an application run-
ning inside the Virtual Machine and an external application
is the Java Platform Debugger Architecture (JPDA) which is
a set of protocols and interfaces that provide a standardized
infrastructure for third-party debuggers. The JDPA is fully
described in [2]:
it deﬁnes a set of instructions to control
the application execution and memory management. The
JPDA deﬁnes a communication protocol which is called the
Java Debug Wire Protocol (JDWP). Using this communica-
tion protocol, it is possible to debug a running application
remotely or locally, modify local variables, etc. To use this,
the Java options must be enabled in the operating system
environment as described in Figure 2. Hence using standard
instructions that are deﬁned in [2], the malicious program
can simulate a debugger, get access to all memory ﬁelds used
by a Java application and set them to chosen values.
Internal State Modiﬁcation using the Debugging Fa-
cilities. All Java implementations studied in this paper use
one or more private ﬁeld(s) that are available for modiﬁ-
cation with a debugger connected to the Java application
using a socket. Once connected, the malicious program in-
teracts with the application with the standard instructions.
Precisely, it only needs to use instruction stop at to stop
the execution of the application and instruction set to set
a variable used by the application to a chosen value. These
instructions are described in Table 3.
Attack Description. First decompile the Java bytecode
to convert it in source code. The decompiled binary can
be attached to a debugger process in order to ease code
inspection, examine variables and watch control ﬂow. Using
this, we propose some simple stealthy malware:
1. Select an application to attack.
2. Decompile it, extract the source code and check whether
is susceptible to be attacked.
3. Export the JVM options to enable remote debugging.
4. Attach the source code generated to the debugger and
add breakpoints.
5. Modify variables and internal states after breakpoints
are triggered.
6. Continue with application execution.
A.2 An Attack against a Java Tor Client.
To illustrate our attack, we use the previously described
malware2 to compromise the PRNG of a pure Java Tor
Client named Orchid. This Tor client is implemented us-
ing the speciﬁcations of the Tor protocol, as described in [5]
and in [3]. First, we downloaded the JAR ﬁle from de-
veloper’s website [3]. As usual, the JAR (Java ARchive)
ﬁle is a container of the bytecode, resources and metadata.
We decompiled the archive using the Java decompiler avail-
able from [1] and we analyzed the extracted source code
to identify the PRNG used, where we could set the break-
points in order to stop the program execution and which
ﬁelds to compromise. With all this information, the mal-
ware is crafted and is delivered to the computer’s victim.
The ﬁrst task of the malware is to modify the JVM op-
tions, adding the command option describes in Figure 2 to
the environment variables in Linux/Unix or modifying the
Windows Registry in Windows. When adding this entry
to the environment, the JVM is launched listening to the
port selected (in this case, 8998) for a remote connection.
The malware can then connect from the same computer via
sockets, hence it does not need to send information to out-
side, preventing detection from networking monitors. Us-
ing the source code extracted from the binary code, we de-
duced that the Tor client Orchid instances SHA1PRNG from
provider SUN (equal to SHA1PRNG from provider OpenJDK
deduced in Section 4.3) as PRNG inside the TorRandom class.
Then, as described in Figure 2 the high-level malware con-
nects to port 8998. When the debugger connects to the
application, it waits for the nextInt() method call for ob-
tain a new random Integer. This method calls internally
engineNextBytes(), which is the method for random gen-
eration and is the target of our attack. As we showed in Sec-
tion 4.3, the critical ﬁeld of the internal state of the PRNG
to modify is the integer remCount. Once the application
has stopped, the malware inspects the internal state of the
PRNG, modiﬁes the identiﬁed critical ﬁeld in the PRNG and
continues with the execution of the application without user
awareness. As explained, no remote interaction is require to
perform this attack so these operations are only local. In
the context of the Tor network, the client takes a random
pathway to route the data packets and randomness is re-
quired to ensure privacy of the client on the network. The
Tor client Orchid generates this pathway with the method
named getRandomlyOrderedListOfExitCircuits. It makes
a call to nextInt(). Compromising the PRNG by making
the output predictable, we can force to select always one
particular path (probably compromised) for all data com-
munications of the node.
2Also can be performed using a 0-day Java exploit or similar.
1015