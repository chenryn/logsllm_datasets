title:ASIST: architectural support for instruction set randomization
author:Antonis Papadogiannakis and
Laertis Loutsis and
Vassilis Papaefstathiou and
Sotiris Ioannidis
ASIST: Architectural Support for Instruction Set
Randomization
Antonis Papadogiannakis, Laertis Loutsis, Vassilis Papaefstathiou, Sotiris Ioannidis
Institute of Computer Science, Foundation for Research and Technology – Hellas
{papadog, laertis, papaef, sotiris}@ics.forth.gr
ABSTRACT
1.
INTRODUCTION
Code injection attacks continue to pose a threat to today’s comput-
ing systems, as they exploit software vulnerabilities to inject and
execute arbitrary, malicious code. Instruction Set Randomization
(ISR) is able to protect a system against remote machine code in-
jection attacks by randomizing the instruction set of each process.
This way, the attacker will inject invalid code that will fail to exe-
cute on the randomized processor. However, all the existing imple-
mentations of ISR are based on emulators and binary instrumen-
tation tools that (i) incur a signiﬁcant runtime performance over-
head, (ii) limit the ease of deployment of ISR, (iii) cannot protect
the underlying operating system kernel, and (iv) are vulnerable to
evasion attempts trying to bypass ISR protection.
To address these issues we propose ASIST: an architecture with
hardware and operating system support for ISR. We present the de-
sign and implementation of ASIST by modifying and mapping a
SPARC processor onto an FPGA board and running our modiﬁed
Linux kernel to support the new features. The operating system
loads the randomization key of each running process into a newly
deﬁned register, and the modiﬁed processor decodes the process’s
instructions with this key before execution. Moreover, ASIST pro-
tects the system against attacks that exploit kernel vulnerabilities
to run arbitrary code with elevated privileges, by using a separate
randomization key for the operating system. We show that ASIST
transparently protects all applications and the operating system ker-
nel from machine code injection attacks with less than 1.5% run-
time overhead, while only requiring 0.7% additional hardware.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—Invasive soft-
ware; C.0 [General]: Hardware/software interfaces; System archi-
tectures
Keywords
Instruction Set Randomization; Code Injection Attacks; Architec-
tural Support; Hardware Support; Security; Performance
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’13, November 4–8, 2013, Berlin, Germany.
Copyright 2013 ACM 978-1-4503-2477-9/13/11 ...$15.00.
http://dx.doi.org/10.1145/2508859.2516670.
Code injection attacks exploit software vulnerabilities to inject
and execute arbitrary malicious code, allowing the attacker to ob-
tain full access to the vulnerable system. There are several ways
to achieve arbitrary code execution through the exploitation of a
software vulnerability. The vast majority of code injection attacks
exploit vulnerabilities that allow the diversion of control ﬂow to
the injected malicious code. Arbitrary code execution is also pos-
sible through the modiﬁcation of non-control-data [17]. The most
commonly exploited vulnerabilities for code injection attacks are
buffer overﬂows [2]. Despite considerable research efforts [20, 21,
23, 25, 50], buffer overﬂow vulnerabilities remain a major security
threat [18]. Other vulnerabilities that allow the corruption of criti-
cal data are format-string errors [19] and integer overﬂows [51].
Remotely exploitable vulnerabilities are continuously being dis-
covered in popular network applications [7,8] and operating system
kernels [3, 4, 6, 16]. Thus, code injection attacks remain one of the
most common security threats [2], exposing signiﬁcant challenges
to current security systems. For instance, the massive outbreak of
the Conﬁcker worm in 2009 infected more than 10 million ma-
chines worldwide [40]. Like most of the Internet worms, Conﬁcker
was based on a typical code injection attack that exploited a vulner-
ability in Windows RPC [5]. Along with the continuous discovery
of new remotely exploitable vulnerabilities and zero-day attacks,
the increasing complexity and sophisticated evasive methods of at-
tack techniques [24, 37] has signiﬁcantly reduced the effectiveness
of attack detection systems.
Instruction Set Randomization (ISR) [9, 10, 13, 29, 31, 41] has
been proposed to defend against any type of code injection attack.
ISR randomizes the instruction set of a processor so that an attacker
is not able to know the processor’s “language” to inject meaning-
ful code. Therefore, any injected code will fail to accomplish the
desirable malicious behavior, probably resulting in invalid instruc-
tions. To prevent successful machine code injections, ISR tech-
niques encrypt the instructions of a possibly vulnerable program
with a program-speciﬁc key. This key actually deﬁnes the valid in-
struction set for this program. The processor decrypts at runtime
every instruction of the respective process with the same key. Only
the correctly encrypted instructions will lead to the intended code
execution after decryption. Any injected code that is not encrypted
with the correct key will result in irrelevant or invalid instructions.
Existing ISR implementations use binary transformation tools
to encrypt the programs. For runtime decryption they use emula-
tors [13,31], or dynamic binary instrumentation tools [9,10,29,41].
However, they have several limitations: (i) They incur a signiﬁ-
cant runtime performance overhead due to the software emulator
or instrumentation tool. This overhead is prohibitive for a wide
adoption of such techniques. (ii) Deployment is limited by the ne-
cessity of several tools, like emulators, and manual encryption of
the programs that are protected with ISR. (iii) They are vulnerable
to code injection attacks into the underlying emulator or instrumen-
tation tools. More importantly, they do not protect against attacks
targeting kernel vulnerabilities [3, 4, 6, 16], which are becoming an
increasingly attractive target for attackers. (iv) Most ISR imple-
mentations are vulnerable to evasion attacks aiming to guess the
encryption key and bypass ISR protection [48, 53].
To address these issues we propose ASIST: a hardware/software
scheme to support ISR on top of an unmodiﬁed ISA. Hardware
extensions to enhance security have been proposed in the past [23,
28, 44, 50]. We advocate that hardware support for ISR is essential
to guard against code injection attacks, at both user- and kernel-
level, without incurring signiﬁcant performance penalty at runtime.
ASIST uses distinct per-process keys and another key for the op-
erating system kernel’s code. To support runtime decryption at the
CPU, we propose the use of two new registers in the ASIST-enabled
processor: the oskey and usrkey registers, which contain the ker-
nel’s key and the user-level key of the running process. These regis-
ters are memory mapped and they are only accessible by the operat-
ing system via privileged instructions. Our implementation for the
SPARC architecture maps these registers into a new Address Space
Identiﬁer (ASI). The operating system is responsible for reading or
generating the key of each program at load time, and associating it
with the respective process. It is also responsible for storing at the
usrkey register the key of the next process scheduled for execution
at a context switch. Whenever a trap to kernel is called, the CPU
enters into supervisor mode and the value of the oskey register is
used to decrypt instructions. When the CPU is not in supervisor
mode, it decrypts each instruction using the usrkey register.
We explore two possible choices for implementing the decryp-
tion unit at the instruction fetch pipeline stage of the modiﬁed pro-
cessor. We also implement two different encryption algorithms,
(i) XOR and (ii) Transposition, and use different key sizes. Ad-
ditionally, we compare two alternative techniques for encrypting
the executable code: (i) statically, by adding a new section in ELF
that contains the key and encrypting all code sections with this key
using a binary transformation tool, and (ii) dynamically, by gener-
ating a random key at load time and encrypting with this key at the
page fault handler all the memory mapped pages that contain code.
The dynamic encryption approach can support dynamically linked
shared libraries, whereas static encryption requires statically linked
binaries. We discuss and evaluate the advantages of each approach
in terms of security and performance. Our modiﬁed processor can
also encrypt the return address at each function call and decrypt
it before returning to caller. This way, ASIST protects the system
from return-oriented programming (ROP) attacks [14, 45], but not
from jump-oriented programming (JOP) attacks [12].
To demonstrate the feasibility of our approach we present the
prototype implementation of ASIST by modifying the Leon3 SPARC
V8 processor [1], a 32-bit open-source synthesizable processor [26].
We also modiﬁed the Linux kernel 3.8 to support the implemented
hardware features for ISR and evaluate our prototype. Our ex-
perimental evaluation results show that ASIST is able to prevent
code injection attacks practically without any performance over-
head, while adding less than 1% of additional hardware to support
ISR with our design. Our results also indicate that the proposed
dynamic code encryption at the page fault handler does not impose
any signiﬁcant overhead, due to the low page fault rate for pages
with executable code. This outcome makes our dynamic encryp-
tion approach very appealing, as it is able to transparently encrypt
any executable program, it generates a different random key at each
execution, and it supports shared libraries with negligible overhead.
The main contributions of this work are:
• We propose ASIST: the ﬁrst hardware-based support for ISR
to prevent machine code injections without any performance
overhead. We demonstrate the feasibility of hardware-based
support for ISR by presenting the design, implementation,
and experimental evaluation of ASIST.
• We introduce a dynamic code encryption technique that trans-
parently encrypts pages with executable code at the page
fault handler, using a randomly generated key for each exe-
cution. We show that this technique supports shared libraries
and does not impose signiﬁcant overhead to the system.
• We explore different choices for the decryption unit in hard-
ware, we compare static and dynamic encryption, as well as
different encryption algorithms and key sizes in order to im-
prove the resistance of ISR against evasion attempts.
• We show that a hardware-based ISR implementation, like
ASIST, is able to protect the system against attacks that ex-
ploit OS kernel vulnerabilities.
• We evaluated our prototype implementation with hardware-
enabled ISR and we showed that it is able to prevent code
injection attacks with negligible overhead.
2.
INSTRUCTION SET RANDOMIZATION
In this section we describe our threat model, give some back-
ground on ISR, and discuss the main limitations of existing imple-
mentations that emphasize the need for hardware support.
2.1 Threat Model
Remote and local machine code injection attacks. The threat
model we address in this work is the remote or local exploitation of
any software vulnerability that allows the diversion of the control
ﬂow to execute arbitrary, malicious code. We address vulnerabili-
ties in the stack, heap, or BSS, e.g., any buffer overﬂow that over-
writes the return address, a function pointer, or any control data.
We focus on protecting the potentially vulnerable systems against
any type of machine code injection attacks.
Kernel vulnerabilities. Remotely exploitable vulnerabilities on
the operating system kernel [3, 4, 6, 16] are becoming an increas-
ingly attractive target for attackers. Our threat model includes code
injection attacks based on kernel vulnerabilities. We propose an ar-
chitecture that is capable of protecting the operating system kernel
as well. We also address attacks that use a kernel vulnerability to
run user-level code with elevated kernel privileges [32].
Return-to-libc and ROP attacks. Instead of injecting new code
into a vulnerable program, an attacker can execute existing code
upon changing the control ﬂow of a vulnerable system: re-direct
the execution to existing library functions, attacks typically known
as return-to-libc attacks [35], or use existing instruction sequences
ending with a ret instruction (called gadgets) to implement the at-
tack, a technique known as return-oriented programming (ROP) [14,
45]. Although ISR protects a system against any type of code in-
jection attacks, its threat model does not address return-to-libc and
ROP attacks. Existing implementations of ISR follow this threat
model. However, due to the rise of such attacks, we aim to protect
systems from them using the same hardware.
Key guessing attacks. Existing ISR implementations are vul-
nerable to key guessing or key stealing attacks [48, 53]. This way,
sophisticated attackers may be able to bypass the ISR protection
mechanism, by guessing the key and then injecting and executing
code that is correctly encoded with this key. In this work, we aim
to design and implement ISR in a way that it will be very difﬁcult
for attackers to guess or infer the code randomization key.
ISR Implementation
Bochs emulator [31]
Valgrind tool [9, 10]
Strata SDT [29]
EMUrand emulator [13]
Pin tool [41]
ASIST
Runtime
Overhead
Shared
Libraries
Self-modifying
Code
Hardware
Support
Encryption
Dynamic
Encryption
Kernel
Protection
ROP Prevention
High
High
Medium
Medium
Medium
Zero
No
Yes
No
No
Yes
Yes
No
API
No
No
Partially
API
No
No
No
No
No
Yes
XOR with 32-bit key
XOR with random key
AES with 128-bit key
XOR with 32-bit key
XOR with 16-bit key
XOR with 32-bit–128-bit key,
Transposition with 160-bit key
No
Yes
No
No
No
Yes
No
No
No
No
No
Yes
No
No
No
No
No
Yes
Table 1: Comparison of ASIST with existing ISR implementations. ASIST provides a hardware-based implementation of ISR without
runtime overhead, it supports the necessary features of current systems and protects against kernel vulnerabilities.
2.2 Defense with ISR
ISR protects a system against any native code injection attacks.
To accomplish this, ISR uses per-process randomized instruction
sets. This way, the attacker cannot inject any meaningful code into
the memory of the vulnerable program. The injected code will not
perform the intended malicious behavior and will probably crash
after just a few instructions [9]. To apply the ISR idea, existing im-
plementations ﬁrst encrypt the binary code of each program with
the program’s secret key before it is loaded for execution. The pro-
gram’s key deﬁnes the mapping of the encrypted instructions to the
real instructions supported by the CPU. Then, at runtime, the ran-
domized processor decrypts every instruction with the proper pro-
gram’s key before execution. Injected instruction sequences that
have not been correctly encrypted will result in irrelevant or invalid
instructions after the obligatory decryption. On the other hand, cor-
rectly encrypted code will be decrypted and executed normally.
2.3 Limitations of Existing Implementations
Existing ISR Implementations use binary transformation tools,
such as objcopy, to encrypt the code of user-level programs that
will be protected. For runtime decryption they use emulators [33]
or dynamic binary instrumentation tools [34, 36, 42]. In Table 1 we
list and compare all the existing ISR implementations.
Kc et al. [31] implemented ISR by modifying the Bochs emula-
tor [33] using XOR with a 32-bit key in their prototype. The use of
an emulator results in signiﬁcant slowdown, up to 290 times slower
execution on CPU intensive applications. Barrantes et al. [9,10] use
Valgrind [36] to decrypt applications’ code, which is encrypted
with XOR and a random key equal to the program’s length. This
prototype supports shared libraries by copying each randomized li-
brary per process, and offers an API for self-modifying code. How-
ever, the performance overhead with Valgrind is also very high, up
to 2.9 times slower than native execution. Hu et al. [29] imple-
mented ISR with a software dynamic translation tool [42] using
AES encryption with 128-bit key size. Dynamic translation results
in lower but still signiﬁcant performance overhead, that is close to
17% on average and as high as 250%. To reduce runtime overhead,
Boyd et al. [13] proposed a selective ISR that limits the emulated
and randomized execution only to code sections that are more likely
to contain a vulnerability. Portokalidis and Keromytis [41] imple-
mented ISR with shared libraries support using Pin [34]. The run-
time overhead ranges from 10% to 75% for popular applications,
while it has four-times slower execution when memory protection
is applied to Pin’s code.
The main limitations of the existing ISR implementations are:
1. High runtime performance overhead. All the existing im-
plementations of ISR have a considerable runtime overhead,
which becomes signiﬁcantly higher for CPU-intensive appli-
cations. This is because all the proposed systems use ex-
tra software to emulate or translate the instructions before
they are executed, which results to more instructions and in-
creased execution times. We argue that the most efﬁcient
approach is a hardware-based implementation of ISR.
2. Deployment difﬁculties. The need for several tools, such as
emulators and binary instrumentation tools, as well as the
need for manual encryption and the partial support for shared
libraries limit the ease of deployment of ISR. On the other
hand, we aim to build a system that will transparently protect
any program without modiﬁcations.
3. Cannot protect kernel vulnerabilities. None of the existing
ISR prototype implementations is able to defend against at-
tacks exploiting kernel vulnerabilities [3, 4, 6, 16, 32]. Such
attacks are getting increasingly popular and allow attackers
to run code with kernel privileges. Although Pin has been ex-
tended with PinOS to instrument kernel’s code as well [15],
it has not been used to implement ISR support for the kernel.
Even in this case, the code of PinOS would not be protected,
while the use of a virtual machine in PinOS would impose a
signiﬁcant performance overhead.
4. Cannot prevent ROP attacks. ISR cannot protect a vulner-
able program against ROP attacks [14, 45], which use ex-
isting code to harm the system. This is because ISR was
proposed to prevent code injection attacks, not code-reuse
attacks. However, due to the rise of such attacks recently,