module”, the key is the same one used for the NIST test vectors [? ].
The PRG implementation generates timestamps using a call to
do_gettimeofday() and produces a struct timeval containing the 64-
bit time to the nearest microsecond. This struct is copied twice into
a buffer to form a full 128-bit timestamp for the X9.31 generator.
4.4 The HTTPS Implementation
We also reverse engineered the implementations of the HTTPS
server for the administration panel and the IKE/IKEv2 daemon
used for VPNs. FortiOS v4 uses OpenSSL for TLS. When initializing
the library, it sets the random number generation method to the
system PRG, which is the X9.31 implementation.
The TLS server hello random consists of a four-byte timestamp
followed by two raw blocks of X9.31 PRG output truncated to
28 bytes, which permits a state recovery attack. However, the TLS
implementation does not seem to be vulnerable to a straightforward
key recovery attack for Diffie-Hellman cipher suites via the server
random because it uses ephemeral-static Diffie-Hellman. The secret
exponent is generated when the server is launched and reused until
shut down. In the case of RSA cipher suites, the client generates the
encrypted pre-master secret for each session. The PRG vulnerability
on the server does however affect initial RSA key generation.
4.4.1 RSA Key Generation. FortiOS generates the RSA keys used
in its TLS certificates using OpenSSL’s FIPS compliant routines
calling the system X9.31 PRG for randomness. The primes it gener-
ates conform to FIPS 186, Appendix B.3.6, “Generation of probable
primes with conditions based on auxiliary probable primes” [23].
For a 1024-bit modulus, each 512-bit prime factor p is generated
using additional primes p1 and p2 so that p1|(p − 1) and p2|(p + 1)|.
This is intended to protect against Pollard’s p − 1 and Williams’s
p + 1 factoring algorithms. This means that the primes that are
generated have the form p = rp + p0 where p0 is a 202-bit value
derived from p2 and p1, and rp, p1, and p2 are raw outputs from the
PRG.
We generated a certificate on our VM and verified that the most sig-
nificant bits of the RSA factors are related by Equation 2. However,
this does not seem to lead to an feasible state recovery attack from
the public modulus, since the attack requires raw PRG outputs. The
only other call to the PRG during certificate generation produces a
4-byte serial number, insufficient for state recovery.
4.5 The IKE Implementation
The IKE daemon appears to be a modified variant of the raccoon2
project, compiled with the GNU MP library. All randomness used
by the daemon is obtained by reading from /dev/urandom, and
thus uses the X9.31 module. We analyzed both the IKEv1 and IKEv2
implementations to see if any fields in the handshake packets con-
tained enough raw PRG output to permit state recovery.
In the IKEv1 implementation, the first block of PRG output is used to
generate the IKEv1 cookie by hashing it together with IP addresses,
ports, memory addresses, and the time since epoch, in seconds 5.
In the IKEv2 implementation, the SPI field, the equivalent of the
IKEv1 cookie, is eight raw bytes of PRG output. In both IKEv1
and IKEv2, the next block of PRG output was used to generate the
handshake nonce, which was 16 bytes long. This was generated
immediately before the PRG output blocks that are fed into the
Diffie-Hellman exponentiation.
For the case of Diffie-Hellman key exchange with the 1024-bit Oak-
ley Group 2 prime, FortiOS v4 generates an exponent using two
consecutive blocks from the PRG. In the virtual appliance’s imple-
mentation, random bytes are read directly into the Diffie-Hellman
exponent without modification. In the case of hardware devices
with a dedicated cryptographic processor, the raw bytes of PRG
output are fed along with the prime and the generator into a sys-
tem call that invokes the cryptographic processor. This processor
deterministically transforms the exponent in a way we were un-
able to reverse engineer, and outputs the result of the modular
exponentiation.
We were able to invoke this system call ourselves on our hardware
device to generate the Diffie-Hellman public key exchange values
and shared secrets from candidate PRG blocks.
4.6 State recovery in IKEv1
The state recovery attack outlined in Section 2.3 requires two blocks
of PRG output and the AES key to recover the state. The IKEv1 im-
plementation gives us one full block of output in the nonce, and one
block that is hashed together with a timestamp and nondeterminis-
tic pointers to create the cookie. The timestamp has a resolution of
5The IKEv1 cookie was SHA1(0x2020||mpz_d||src||dst||timestamp||nonce16). We
note the choice of SHA1 here over MD5 recommended in the RFC. Here mpz_d
represents a pointer to the buffer used by the linked gmp implementation that stores
the remainder of the data to be hashed. This appears to be a quirk of using gmp types
to store data, and not an intentional security measure on the part of the system imple-
menter. The address itself is heap allocated, and was inconsistent across connections
and restarts. The timestamp is seconds since epoch.
a second, so we assume it is known. However, the heap-allocated
pointer provides approximately 13 bits of entropy [35]. Rearranging
Equation 2, the first block of PRG output R0 that is fed into the hash
function to produce the cookie is D(D(R1) ⊕ E(T1)) ⊕ E(T0) where
the second block of PRG output R1 is known, and we estimate we
need to brute force 29 bits of timestamps T0 and T1, as described in
the next section. Thus an IKEv1 state recovery attack based on the
cookie would take around 242 hashes; which is feasible. However,
we found that IKEv2 state recovery was cheaper, and focused our
efforts on IKEv2 as described below.
The two blocks after the cookie and nonce are used to generate
the Diffie-Hellman private key, which ensures that following state
recovery, key recovery is straightforward.
4.7 State recovery in IKEv2
As discussed in Section 2.5.2, in order to recover the PRG state, we
need two consecutive blocks of the PRG output, an approximation
to the two timestamps used for the intermediate vectors, and the
AES key. The FortiOS IKEv2 implementation yields 1.5 consecutive
blocks of raw PRG output in the IKEv2 handshake: half a block in
the SPI field, and a full block in the nonce. We learned the static
key as described above by reverse-engineering the source code. We
use the capture time of an incoming handshake to approximate
the timestamps. From these, we use the approach described in
Section 2.3 to recover the PRG state. We found that searching within
a one-second window, or about 221 guesses for the first timestamp,
worked well on our hardware as well as scanned machines in the
wild. 6
We used our instrumented logging system to measure the time
difference between successive calls to the PRG for the SPI and
nonce fields that we needed to carry out state recovery on the
FortiGate 100D. We found an average difference of 145µs with a
standard deviation of 3.52µs.
Using a 1 second window for the first block (221 guesses), and
bounding the search space for the second timestamp to within 3σ
of our observed mean (25 guesses), yields a total state recovery
complexity of about 221 · 25 = 226 timestamp guesses.
Experimentally, this can be completed for either the virtual appli-
ance or our hardware appliance in under one second on 12 cores of
an Intel Xeon E5-2699 with parameters as above. For an expanded
search space of 100 microseconds for the second timestamp as de-
scribed in Section 5, successful runs completed in an average of 15
core minutes. Although we are verifying against only half a block of
raw output from the first block, the reduced size of our timestamp
search means that the expected number of false positive matches
in Equation 2 is small, with probability at most 226/264 = 2−38.
6The difference between the receive time of the first handshake packet received and the
timestamp generated by gettimeofday() in the PRG when it was called to generate
the SPI cookie is dependent on the time to execute the remainder of the packet creation
and sending routine after the call to generate the timestamp, the time taken along the
network to reach the attacking machine, the time taken by the attacking machine to
process and report the packet, and clock drift.
4.8 State recovery in TLS
State recovery for TLS uses the 28 random bytes of the server
random as 1.75 consecutive raw output blocks from the PRG. The
first four bytes of the server random are a timestamp that help
us fix a starting point for our search. Although we are verifying
Equation 2 with 1.75 blocks of raw output, the reduced size of
the timestamp search results means that false positives are very
unlikely. For a timestamp search space of 226, we expect a false
positive with probability 226/296 = 2−70.
4.9 Recovering the IKEv2 Keys
Once we have recovered the PRG state from the SPI (block R0 of
output) and nonce (block R1 of output), we can then wind forward
the PRG, successively guessing the two following timestamps and
applying Equation 1 to recover two more blocks R2 and R3 that will
be used to generate the Diffie-Hellman secret.
We calculate дR2||R3 mod p (where || denotes concatenation) and
check this value against the Diffie-Hellman public value in the
IKE_SA_INIT packet until we find a match.
We measured the time difference between the nonce PRG timestamp
and the first key block PRG timestamp and found a mean difference
of 154.4µs with a standard deviation of 32.2µs. We search 3σ out
from the average to find the timestamp, requiring a search over 28
timestamps.
We also measured the average difference between the first and
second calls to the PRG at 18.3µs with a standard deviation of
4.53µs for the Fortigate 100D and 1141µs for the virtual appliance.
Measurements were taken using 10 pairs of consecutive calls to the
PRG. Since the two key blocks are generated with a single read()
system call, we set our search space for each ‘second’ key PRG
block to begin 18 microseconds after the first, searching outwards
to a maximum of 32 microseconds after, corresponding to 3σ, or
25 timestamps. Combining the simultaneous search for the two
timestamps, the key recovery stage requires a search space of 28 ·
25 = 213 timestamps.
Since the FortiGate 100D hardware device offloads modular expo-
nentiation to a proprietary Fortigate ASIC (FortiASIC CP8) that uses
a transformation we weren’t able to reverse-engineer, our brute
force code makes a system call to the ASIC to test each candidate
pair of PRG outputs. Over 30 trials, the average time to carry out
this part of the attack was 3.88s on the hardware.
4.10 Recovering Traffic Keys
Once we have recovered the victim device’s public key value, we
can make another call to the ASIC with our recovered PRG inputs
and the other side’s public key exchange value to recover the IKEv2
Phase 1 Diffie-Hellman shared secret. For IKEv2, once the Diffie-
Hellman shared secret has been computed, all of the information
needed to compute the SKEYSEED value and derive the symmetric
encryption keys is present in the clear in the IKE_SA_INIT messages
exchanged by both the initiator and responder. We computed the
SKEYSEED as described in Section 2.5.2 and verified full passive
decryption against traffic to our FortiGate 100D.
5 MEASUREMENTS
We used ZMap to perform Internet-wide scans on port 443 (HTTPS)
and port 500 (IKEv2) to measure the population of vulnerable
Fortinet devices. Active scanning is an imperfect measure of the
scope of this type of vulnerability. It does not reflect the amount of
traffic vulnerable hosts receive. In addition, well-configured hosts
would be unlikely to expose either port on a public IP address.
5.1 HTTPS
We used several types of HTTP and HTTPS metadata to identify
affected hosts in the wild. Our scans targeted hosts exposing the
device’s admin panel on a public IPv4 address on port 443.
TLS version and cipher suites. In April 2017 we probed the full
public IPv4 address space on port 443 for publicly accessible HTTPS
hosts. With each host we performed a TLSv1.0 handshake, the
version supported by the vulnerable devices, and offered the cipher
suites listed in Table 5 in Appendix B. Our scan completed a full
handshake with 29,709,242 hosts. 7
Server certificate common name. In its default configuration,
FortiOS v4 serves a self-signed certificate with the model and serial
numbers for the common name and ‘Fortinet’ for the organization.
This does not identify the firmware or build number. We found
114,172 hosts with a matching certificate organization field; their
common names indentified 3,379 unique model numbers.
State recovery. Our state recovery attack was successful against
23,517 hosts, or 20.6% of hosts with default Fortinet certificates.
We attempted state recovery using a 1s window around the time
encoded in the server random. Figure 5 shows the distribution of
the number of timestamps guessed for successful state recoveries.
In Figure 6, we plot the distribution of the timestamp for the first
block of PRG output relative to the timestamp encoded in the TLS
server random. The near-uniform distribution may be due to the
fact that the server random has second granularity and the PRG
uses µsecond granularity.
Figure 4 shows the distribution of the gap between the timestamps
for the first and second PRG blocks in the TLS server random. We
brute forced up to an offset of 100 µs after the first timestamp, but
all our observed state recoveries had a gap of no more than 40 µs
between the first and second timestamps.
Specific HTTP files. Our hardware device’s administration panel
contained an image file located at /images/logon.gif that we
used as a rudimentary fingerprint for FortiOS. In our HTTPS scan,
we sent a GET request for this file. 605,950 hosts responded with
HTTP OK, and a corresponding image. The others returned a 404
error. We were unable to automatically validate these images, so
we used the techniques below to further narrow candidates.
7This is lower than the ˜40 million HTTPS hosts seen in scans offering a wider variety
of SSL/TLS versions and cipher suites.
Table 4: X9.31 state and key recovery in the wild
HTTPS hosts (TLS 1.0/port 443)
...with default Fortinet certificate
...and successful state recovery
...with known FortiOSv4 ETag
...and successful state recovery
IKEv2 hosts (port 500)
...with 128-bit nonces
...and private key recovery
...with TLS nonce state recovery
...and non-static IKE parameters
...and private key recovery
29,709,242
114,172
23,517
2,336
2,265
7,743,876
50,285
7
152
17
7
ETag headers. The HTTP ETag header uniquely identifies HTTP
server resources, and is used for web cache validation along with
conditional requests [27]. The RFC specifies that the value of the
header “is data known only to the server". In order to fingerprint
devices running vulnerable firmware versions, we matched headers
from our scan against known ETags for FortiOS v4.
The Equation Group leak [28] contained a list of 440 ETag suffixes
for some FortiOS device and firmware-build pairs, including 168
entries corresponding to 9 models and 26 builds of FortiOS v4. The
leak also contained a memory address for each entry, used for the
Egregious Blunder exploit with which it was packaged. The ETag
for our FortiGate 100D (5192dbfd) was not included in the database,
so we added it to our search.
Of 655,878 HTTP hosts responding with an ETag, 2,336 gave a
known FortiOS v4 ETag. The state recovery attack was successful
Figure 4: Subsesquent timestamp offset. We calculated the
difference between the first and second timestamps used to
generate the PRG blocks for the TLS nonce. This value was
brute forced from within a range of between zero and one
hundred microseconds. The average difference is 19.2 mi-
croseconds with a standard deviation of 10.1 microseconds.
version other than FortiOS v4 with a different underlying random
number generation vulnerability.
Limitations. The devices that responded to our HTTPS scans ex-
posed the administration panel on a public IPv4 address, which