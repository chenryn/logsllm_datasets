### Quantifying Switch Capacities and Count in Network Links

S. Alcock, A. McGregor, and R. Nelson propose a method to quantify the capacities of switches in network links and determine the number of switches. This approach leverages Virtual Path Switch (VPS) capacity estimation algorithms. For instance, if a VPS estimate suggests that a link contains 11 100 Mbps serializations, it is more likely that the link actually contains one 100 Mbps serialization and one 10 Mbps serialization. This assumption is valid because Ethernet device capacities typically differ by a factor of 10 (e.g., 10 Mbps, 100 Mbps, and 1 Gbps). If device capacities were more varied (e.g., 5 Mbps, 14 Mbps, 37 Mbps, 96 Mbps, and 112 Mbps), the estimation would be less straightforward.

The method assumes no more than ten switches per network layer hop, but this may not always hold true. In such cases, contextual information, such as topology data or prior knowledge of the network layout, can help correctly classify links with many switches.

### Implementation: pychar

To implement this method, a Python tool called pychar was developed. This tool probes links using a VPS capacity estimation algorithm, infers the number of serializations, and calculates the number of switches. Unlike existing tools like pchar, pychar is designed for easy modification and expansion, and it can be integrated into future topology discovery suites. pychar supports both ICMP and UDP for probing, ensuring compatibility with most Ethernet networks.

### Testing pychar on the WAND Emulation Network

The performance of pychar and the validity of its underlying theory were tested using the WAND emulation network. The test network consists of seven Linux 2.4.20 host machines, with three using Mikrotik 4-port Intel Pro100 Ethernet cards and four using single-port DSE Realtek 8139-based Ethernet cards. All cards operate at 100 Mbps, and the machines are connected via three Gigabyte 5-port mini switches, also operating at 100 Mbps. Each machine is within a single transport layer hop of each other, with the number of switches in each link ranging from one to three.

Table 1 shows the results of sending probes from Machine 1 to all other machines in the test network. The estimates, when rounded to the nearest whole number, match the actual number of serializations, confirming the method's accuracy. However, fractional components in the estimates could pose issues in environments with more varied device capacities.

### Topologically Equivalent Links and Capacity Estimates

Topologically equivalent links (i.e., those with the same number of serializations) should produce similar capacity estimates. Table 2 presents pychar estimates for several two-switch links in the test network. Despite having the same number of switches, these links produce different capacity estimates. This discrepancy is due to differences in the network interface cards used. Mikrotik to Mikrotik links and Realtek to Realtek links exhibit different round trip times for packets of the same size, leading to variations in the estimated capacities.

Figure 4 graphically illustrates these differences, showing that topologically equivalent links can have different slopes, resulting in different capacity estimates. This variation can be significant enough to suggest the presence of an extra 1 Gbps serialization, which can lead to incorrect classifications of identical topological links.

### Challenges and Future Work

One challenge with variable packet size capacity estimation is that the estimates may not perfectly match theoretical expectations. For example, a link with a nominal capacity of 100,000 Kbps and three serializations should theoretically produce a capacity estimate of 33,333 Kbps. However, the actual estimates vary slightly (e.g., 31,704 Kbps, 30,708 Kbps, and 30,764 Kbps). This slight difference can cause pychar to erroneously detect high-capacity devices, especially in environments with unknown device capacities.

To address these challenges, future work will focus on refining the estimation algorithms and accounting for the variations introduced by different network interface cards. This will enable the development of a more robust and accurate generic link layer topology discovery tool.