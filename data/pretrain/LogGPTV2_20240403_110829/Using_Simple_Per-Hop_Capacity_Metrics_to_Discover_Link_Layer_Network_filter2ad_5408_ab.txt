S. Alcock, A. McGregor, and R. Nelson
doing this, it is possible to quantify the capacities of the switches in the link, as
well as the number of switches. For example, if a VPS estimate suggests that a
link contains 11 100 Mbps serializations, it is more likely that the link contains
one 100 Mbps serialization and a single 10 Mbps serialization. Such assump-
tions work in practice because the capacities of Ethernet devices all diﬀer by
a factor of 10. This would not be as straightforward if devices had capacities
of 5 Mbps, 14 Mbps, 37 Mbps, 96 Mbps, and 112 Mbps, as opposed to Ethernet
where 10 Mbps, 100 Mbps and 1 Gbps are the most common device capacities.
The assumption that there will be no more than ten switches in any given net-
work layer hop does not always hold true in practice. In such cases, it may be
possible to use contextual information such as topology information regarding
neighbouring links or prior knowledge of the network layout to correctly classify
links with many switches.
Using the method described above, it is possible to create a tool that probes
links using a VPS capacity estimation algorithm, infers the number of serializa-
tions in the link using the above equation and calculates the number of switches
present in those links. Rather than adapt an existing VPS capacity estimation
utility, such as pchar, a Python implementation of the VPS algorithm called
pychar was written to perform the probing of links. This has the advantage of
providing a tool that supports easy modiﬁcation and expansion to suit the spe-
ciﬁc purposes of this project. pychar is also designed to be integrated into a
future topology discovery suite in an eﬃcient and straightforward manner. py-
char is capable of using either ICMP or UDP to perform the probing, at least
one of which should be available on any Ethernet network.
3
pychar Results
Using the WAND emulation network [8], the performance of the pychar tool
and the validity of the underlying theory has been tested. The test network
(see Fig. 3) consists of seven host machines, all running Linux 2.4.20. Three
of the host machines are using Mikrotik 4 port Intel Pro100 Ethernet cards,
while the remaining four are using single port DSE Realtek 8139 based Ethernet
cards. All the cards are operating at 100 Mbps. The machines are connected via
three Gigabyte brand 5-port mini switches which are also operating at 100 Mbps.
Hence, all the links have a nominal capacity of 100 Mbps. Each machine is within
a single transport layer hop of each other, but the number of switches in each link
is between one and three. There are no hosts directly connected without at least
one switch between them. It is signiﬁcant that all the devices at both the link
and network layers are operating at the same capacity, creating a straightforward
situation for initial testing. There is very little traﬃc operating on this network
at any given time, making it easy to gather minimum round trip time data that
is free of queuing delays.
Table 1 contains the results of sending probes from Machine 1 to all the other
machines in the test network. What these results show is that the basic theory
does prove to be correct in practice and that it is possible to approximate the
Using Simple Per-Hop Capacity Metrics
169
Fig. 3. The topology of the test network
number of switches in any of the links using the technique described earlier. The
serialization estimates are not perfect, as there is a fractional component to each
of the estimates seen in the table. This is not an issue in this case, as there is
prior knowledge that all the devices are operating at the same capacity so any
fractional remainders can be ignored. In an environment where device capacities
are more varied, this could become a problem. This situation will be discussed
in Sect. 4.
Table 1. The results of sending pychar probes from Machine 1 to all the other machines
in the test network. When rounded to the nearest whole number, the estimated number
of serializations is equal to the actual number of serializations. This is ideal in situations
where all the serialization delays are the same length
Destination
Machine
Estimated
Nominal
Estimated
Actual
Capacity (Kbps) Capacity (Kbps) Serializations Serializations
5
10
18
19
21
22
31704
24124
30708
44640
23540
30764
100000
100000
100000
100000
100000
100000
3.15
4.15
3.26
2.24
4.25
3.25
3
4
3
2
4
3
It is also important that topologically equivalent links, i.e. links that contain
the same number of serializations, produce equivalent capacity estimates when
probed by pychar. Table 2 presents pychar estimates for a number of diﬀerent
170
S. Alcock, A. McGregor, and R. Nelson
Table 2. pychar estimates for a selection of the two switch links in the test network.
The “From” column displays the machine number of the sending host and the “To”
column describes the receiving host. The letter in parentheses beside each machine
number represents the type of network card used by that host. M represents a Mikrotik
card whereas R represents a Realtek card. The rightmost column contains estimates
calculated where DAG cards were placed at both ends of the link to perform the timing.
This is discussed more in Sect. 5
From
To
1 (M)
5 (M)
10 (M)
1 (M)
10 (M)
18 (R)
21 (R)
5 (M)
1 (M)
5 (M)
18 (R)
18 (R)
21 (R)
18 (R)
Standard pychar
Estimate (Kbps)
31726
31860
31689
30721
30707
29786
29738
pychar Estimate Using
DAG Cards (Kbps)
49970
50023
50023
50010
50036
49984
49931
pchar Results for Topologically Equivalent Links
i
)
s
(
e
m
T
p
i
r
T
d
n
u
o
R
 0.0012
 0.0011
 0.001
 0.0009
 0.0008
 0.0007
 0.0006
 0.0005
 0.0004
 200
 400
 600
 800
 1000
 1200
 1400
 1600
Packet Size (bytes)
"ICMP_18to21"
"ICMP_5to1"
"ICMP_1to18"
Fig. 4. A graphical illustration of diﬀerent estimates provided by pychar for topolog-
ically equivalent links. Each link depicted in the graph contains two switches but the
slopes of the lines are diﬀerent, resulting in diﬀerent capacity estimates
two switch links in the test network. The results show that topologically equiva-
lent links are producing diﬀerent capacity estimates when probed by pychar. A
graphical view of this situation is presented in Fig. 4. Again, this is not an issue
in this particular case as it is known that all the devices are operating at the
same capacity. However, this problem will need to be dealt with to successfully
create a generic link layer topology discovery tool.
4
pychar Problems
Using Simple Per-Hop Capacity Metrics
171
One problem with variable packet size capacity estimation is that the estimates
produced are not exactly what one might expect for any given link. For exam-
ple, given the theory of underestimation due to extra serializations presented
earlier in this paper, it is expected that a link with a nominal capacity of
100000 Kbps that contains three serializations would produce a capacity esti-
mate of 33333 Kbps (one third of the nominal capacity). Looking at Table 1,
it is apparent that the three links that match this proﬁle give slightly diﬀerent
estimates - 31704 Kbps, 30708 Kbps, and 30764 Kbps respectively.
This becomes signiﬁcant when there is the possibility of higher capacity de-
vices being present in the link. A 1 Gbps serialization is one-tenth that of a
100 Mbps device. This means that a serialization quantity estimate of 3.25 for a
link with a nominal capacity of 100 Mbps, as seen in Table 1, not only suggests
three 100 Mbps devices, but also two 1 Gbps devices (and another ﬁve 10 Gbps
devices, if one has reason to believe devices of such a capacity might be present).
As a result, the slight diﬀerence between the ideal estimate and the actual esti-
mate can cause pychar to erroneously detect high capacity devices. In situations
similar to the test network, where there is prior knowledge that all the devices
are the same capacity, this is not a problem and the fractional component can
be rounded oﬀ and ignored. However, most topology discovery takes place in an
unknown environment so such an assumption cannot be made.
Table 2 highlights another problem that arose from the initial testing of
pychar. Some links, despite having the same number of switches present, produce
capacity estimates that vary. The links can be divided into three groups based on
the capacity estimate given by pychar. One group contains links from a host with
a Mikrotik Ethernet card to another host with a Mikrotik Ethernet card, one
contains links from a host with a Realtek Ethernet card to a host with another
Realtek card, and the ﬁnal group consists of links that have a Realtek card at
one end and a Mikrotik card at the other. In the latter case, it does not matter
which is the sending host. The important factor is that there are two diﬀerent
cards involved.
This eﬀect is explained by the notion that diﬀerent brands of network in-
terface card take diﬀerent amounts of time to put the packet onto the wire,
depending on the size of the packet. Equally sized packets have slightly diﬀerent
round trip times depending on the network interface cards involved in the link.
For Mikrotik card to Mikrotik card links, smaller sized packets have compara-
tively longer round trip times. Similarly, larger sized packets have longer round
trip times on Realtek to Realtek links. As a result, the variation in gradients
as seen in Fig. 4 occurs. This variation in slope translates into a variation in
capacity estimate. There can be a diﬀerence in excess of 1 Mbps between two
estimates for topologically equivalent links, which can be enough to suggest the
presence of an extra 1 Gbps serialization. The uncertainty is great enough that
links that are identical from a topological standpoint can be classiﬁed as diﬀerent