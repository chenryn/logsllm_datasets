# asm2
Reverse Engineering, 250 points
## Description:
> What does asm2(0xc,0x15) return? Submit the flag as a hexadecimal value (starting with '0x').
```assembly
asm2:
	:	push   ebp
	:	mov    ebp,esp
	:	sub    esp,0x10
	:	mov    eax,DWORD PTR [ebp+0xc]
	:	mov    DWORD PTR [ebp-0x4],eax
	:	mov    eax,DWORD PTR [ebp+0x8]
	:	mov    DWORD PTR [ebp-0x8],eax
	:	jmp    0x50c 
	:	add    DWORD PTR [ebp-0x4],0x1
	:	add    DWORD PTR [ebp-0x8],0xaf
	:	cmp    DWORD PTR [ebp-0x8],0xa3d3
	:	jle    0x501 
	:	mov    eax,DWORD PTR [ebp-0x4]
	:	leave  
	:	ret    
```
## Solution: 
This is how the stack looks after performing the `mov ebp,esp` command:
```
+---------+
| old ebp | :	push   ebp
	:	mov    ebp,esp
	:	sub    esp,0x10
```
The stack becomes:
```
+---------+
|         | :	mov    eax,DWORD PTR [ebp+0xc]  ; eax = 0x15
	:	mov    DWORD PTR [ebp-0x4],eax  ; local0 = 0x15
	:	mov    eax,DWORD PTR [ebp+0x8]  ; eax = 0xc
	:	mov    DWORD PTR [ebp-0x8],eax  ; local1 = 0xc
	:	jmp    0x50c 
```
The stack:
```
+---------+
|         | :	add    DWORD PTR [ebp-0x4],0x1      ; local0 = 0x16
	:	add    DWORD PTR [ebp-0x8],0xaf     ; local1 = 0xbb
	:	cmp    DWORD PTR [ebp-0x8],0xa3d3   ; Compare 0xbb to 0xa3d3
	:	jle    0x501               ; Jump is taken (since 0xbb  0xa3d3 (this takes 240 iterations). This means that we add `1` to `0x15` 240 times, bringing the value of `ebp - 0x4` to `0x105`.
Then:
```assembly
	:	mov    eax,DWORD PTR [ebp-0x4] ; eax = 0x105
	:	leave  
	:	ret    
```
The function returns with a return value of `0x105`.