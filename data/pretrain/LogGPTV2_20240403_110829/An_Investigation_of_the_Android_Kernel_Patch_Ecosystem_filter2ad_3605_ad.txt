patching
any
it
stopped
USENIX Association
30th USENIX Security Symposium    3659
6 Causes of Patch Delays
So far, we have quantiﬁed the patch delays in the
Android kernel ecosystem mostly in a “blackbox”
manner. However, other than blaming the long chain of
patch propagation, we have not explored the reasons
This can be
why the delays are so profound.
illuminating for
in patching
practices.
future improvements
To
this
collect
achieve
goal, we
additional
information to help explain the rationale behind the
patching practices by each participating party in the
ecosystem. Speciﬁcally, we will analyze the security
bulletins released by more organizations (Qualcomm),
extract more details related to each patch commit, and
reach out
information to the various parties
including Google, Qualcomm, and Samsung.
for
From an intent point of view, a security patch can be
applied in either of the two ways:
knowingly or
unknowingly. For example, an OEM vendor may be
notiﬁed by Google about a serious security vulnerability
and knowingly look for patches from upstream. On the
other hand, Google may be blindly applying all
upstream commits from Linux LTS to Android common
branches, not knowing which are important security
patches. Understanding the intent will provide valuable
insight into the patching delays.
Based on this basic framework, we propose the
following hypotheses to explain the slow patching.
(1) Even though the Android kernel ecosystem is
largely open-source,
the “knowledge of a security
vulnerability” is often lacking and does not traverse the
ecosystem fast enough, preventing security patches from
being recognized and “knowingly” picked up by those
who are affected (e.g., OEM vendors).
(2) A downstream kernel branch may have drifted
from the upstream (e.g., customization in downstream),
it is not always possible to blindly apply all upstream
commits (conﬂicts can arise). This may cause some
kernels to lower the frequency to “sync” with upstream
kernel
of
“unknowingly” patching a vulnerability in time.
possibility
branches,
reducing
the
To validate the hypotheses, we look into detailed
commit log of kernel repositories. As all kernel repos
(i.e., Linux, Qualcomm, and Android common) are
managed by git, we are able to differentiate through the
commit log whether an upstream patch is knowingly
“cherry-picked” or unknowingly “merged” (together
with a stream of commits) into a downstream kernel
branch.
They correspond to the command git
cherry-pick  and git merge
 respectively. The semantic of
cherry-pick is to pick a speciﬁc upstream commit and
port it over to downstream, whereas merge pulls all the
Figure 16: Case study: CVE-2019-2215
commits
.
since
last
divergence
up
to
inﬂuencing other
Cherry-pick is more ﬂexible as it can patch speciﬁc
vulnerabilities without
features.
However, it requires knowledge about which upstream
commit corresponds to an important security patch. In
other words,
the downstream must either be notiﬁed
about the patch or identify the security issue proactively.
Merge treats all upstream commits equally and does
not differentiate between security patches (severe or not)
and other bug ﬁxes.
If done frequently enough, patch
delays can be effectively reduced. The drawback is that
manual resolution is needed when merge conﬂicts occur.
fork is sometimes used by a
downstream to become a clone of an upstream. This
way,
the
patches applied in the upstream at the time of fork. The
drawback is
in
downstream, however, it needs to be ported over to the
newly forked branch.
the downstream automatically inherits all
any customization is made
Similar to merge,
if
Next, we use a case study of a known CVE to
demonstrate when these patch operations are performed,
and how they can help explain the patch delays.
Case study.
In Figure 16, we illustrate the above
patch operations using CVE-2019-2215, a serious
vulnerability that allows
rooting [25] which was
originally patched in Linux mainline on 2/1/2018. The
cherry-pick by Linux 4.4 LTS occurred on 10/7/2019
with a long delay. Notably, Google’s Android common
4.4 branch proactively cherry-picked the patch from
Linux mainline on 2/6/2018 (bypassing its direct
upstream). Unfortunately, Google does not appear to be
aware of how serious the vulnerability is, evident by the
extremely late Android security bulletin announcement
on 10/5/2019 (an 18 months delay) and Google’s public
statement admitting them being informed by the project
zero team on 9/26/2019 [24]. It is also worth noting that
no CVE was issued prior to the point. During this time,
Qualcomm was uninformed about
the vulnerability
either.
Its stable branch kernel.lnx.4.4.r27-rel
did not cherry-pick the patch, leaving the corresponding
Samsung S8-Oreo (Android 8.x) to be vulnerable all
3660    30th USENIX Security Symposium
USENIX Association
10-07-20192-01-20182-06-20183-07-201803-22-201910-1-2019MergeCherry-pickForkLinux mainlineNotificationGoogle ASBLinux 4.4.yAndroid 4.4Qual stable (Android P)Samsung S8-pQual stable (Android O)Samsung S8-opatchedunpatchedQual mainline09-08-20178-25-201804-11-2018this time [25].
On the other hand, Qualcomm stable branch
kernel.lnx.4.4.r35-rel,
representing the same
chipset with an upgraded Android Pie (9.x) had been
merging updates from android-4.4 periodically (merge
is preferred in Qualcomm stable prior to its release),
thus patching the vulnerability on 3/7/2018. Luckily,
when Samsung S8 upgraded its OS from Oreo to Pie, it
forked from this stable branch,
inheriting the patch
unknowingly. Unfortunately, other OEM phones using
the same chipset (and staying on Android Oreo) will
remain vulnerable unless they cherry-pick patches
elsewhere.
that
kernel.lnx.4.4.r27-rel never bothered to apply
the patch until the end of its lifetime on 1/22/2020.
fact, we
checked
have
In
The case study gives us good insight on how the
patching process is like in the ecosystem. Next, we will
generalize the insight by analyzing each step of the
propagation
and
suggestions on how to improve the ecosystem.
takeaways
closely
offer
and
1. Linux community. Linux vulnerabilities are
always ﬁrst patched in Linux mainline and then
cherry-picked by downstream branches. Since Linux
stable/LTS branches aim to operate as reliably and
stably as possible, there is a formal set of rules guiding
the cherry-pick of upstream patches [3], e.g., “it cannot
be bigger than 100 lines, with context; it must ﬁx a real
bug that bothers people, ... a real security issue”.
Thanks to the close collaboration between Linux
mainline and stable maintainers and the fact they belong
to the same community, patch delays between the two
are generally small. The outlier 3.18.y was noticeably
slower than others. It turns out that other than the fact
that it is an older branch, it was never meant to be an
LTS branch. However, due to popular demand from
Android kernels which decide to fork from 3.18.y, it
remains actively maintained for much longer
than
originally intended. This may partially explain the slow
cherry-pick of upstream patches. In other LTS branches,
patch delays are generally small despite a long tail.
Unfortunately, due to the general principle followed
by Linux that “a bug is a bug” [6], oftentimes the Linux
community does not realize whether a bug is truly an
exploitable security bug until much later.
By
convention, security patches in Linux are not labeled as
such in the public commit logs [23]. This creates a
situation where Linux LTS maintainers are not even
As
aware of the impact of those vulnerabilities.
supporting
Figure
15,
counterintuitively, CVEs that are (later) rated as critical
and high by Google turn out to take noticeably longer
indicating the lack of
time for Linux to patch,
knowledge by Linux.
In fact, we ﬁnd 17 out of 37
patches for critical vulnerabilities were initially missed
evidence
shown
in
Propagation step
LTS ->Android
4.14
3.18
63/106 74/105 70/74 30/31
Android ->Qualcomm 26/95 93/109 72/74 61/66
4.4
4.9
Table 4: The ratio of CVEs patched by merge
in the initial “train” of cherry-picked patches, as they
appear
other
cherry-picked patches.
“out-of-order” with
respect
to
mailing
reporting
Even when Linux is aware of a security vulnerability,
e.g., notiﬁed by an external party via the private
vulnerability
list,
PI:EMAIL, this knowledge may or may
not propagate internally to Linux LTS maintainers.
In
addition, as Linux’s commits are often intentionally
opaque [23],
the knowledge is almost deﬁnitely lost
outside of Linux, preventing downstream kernels from
cherry-picking the corresponding patches timely. The
only publicly available mechanism to document such
knowledge is the CVE database. However, it is known
to be incomplete and takes a long time to assign a CVE
number and to update the entry [6].
Therefore, a better mechanism to track security issues
is needed. Speciﬁcally, for the vulnerabilities that are
reported to Linux through its private mailing list, we
argue that it is a big missed opportunity where Linux
has already triaged the bug and can clearly label the
corresponding ﬁxes as security-critical
to help the
downstream kernel (this is much more efﬁcient than the
CVE mechanism). For other bug ﬁxes, we call for better
tools to automatically reason about the nature of a bug
and determine if it has serious security implications — a
recent tool has been developed by Wu et al. [36].
2. Google. Android common kernels are forked from
Linux stable/LTS initially and then add Android-speciﬁc
changes on top (sometimes referred to as “out-of-tree”
code). Over the years, Google has been upstreaming
much of its code to Linux mainline and reducing such
“out-of-tree” code [28]. This allows Android common
kernels to merge patches from Linux LTS with a delay
of 0 day, a week,
to a month sometimes, and only
occasionally cherry-pick from Linux mainline directly
for important security patches. This is evident in Table 4
which shows the exact numbers of patches merged vs.
cherry-picked. Note that 3.18 and 4.4 are exceptions as
most of the patches in the beginning were cherry-picked
from Linux mainline where the delays are less
predictable
delays
are
compared to Linux LST).
negative
creating
(some
In addition to keeping its own Android common
kernels up-to-date, Google has another
important
responsibility to notify OEM vendors about security
patches. While the exact notiﬁcation date is mostly not
made public, according to Google, it typically goes out
USENIX Association
30th USENIX Security Symposium    3661
Figure 17: Notiﬁcation delays of
Linux CVEs (by severity)
Figure 18: Notiﬁcation delays of
Qualcomm CVEs (by severity)
Figure 19: Post-notiﬁcation delays of
cherry-picked patches (by severity)
at least a month prior to the information appearing on
the security bulletin [2]. Surprisingly, as Figure 17
shows, in the majority of the CVEs, it takes anywhere
from 100 to 500 days for the details to appear on the
security bulletin (note that the actual notiﬁcation should
be at least 30 days earlier). In the extreme 20% of the
CVEs, it takes 500 days or more. We believe this is due
to the fact that Google is not really aware of which of
the merged patches are security-critical — indeed the
delays shown in the ﬁgure do not appear correlated with
the severity of vulnerabilities.
Indeed,
In the same ﬁgure, we also show the notiﬁcation
delays of CVEs where Google knowingly cherry-picked
important security patches.
the delays are
noticeably smaller. This indicates the lack of knowledge
is the culprit again, supporting our hypotheses. There is
still not too much difference based on vulnerability
severity levels. After ﬁnishing the analysis, we also
conﬁrmed with Google that this is expected as their
pipeline does not distinguish severity levels by design.
Every month, all issues rated above the threshold and
known to Google, e.g., moderate and above, are worked
on together in a batch. Exceptions occur only under
extraordinary circumstances where disclosure of a
serious vulnerability is imminent.
through merged
In general, for vulnerabilities that originate in Linux,
better and more automated vulnerability triage seems to
be a key capability that can beneﬁt Google. Manually
sifting
and
narrowing down to the handful that eventually appears
on the Android security bulletin can be prohibitively
expensive. Alternatively, if Linux has done the triage
already, Google
can beneﬁt directly from the
knowledge, e.g., through tighter collaboration.
upstream commits
For vulnerabilities
that originate in Qualcomm,
Google should have the ﬁrst-hand knowledge already —
they are almost always informed by either Qualcomm or
external parties about the speciﬁcs.
In such cases, the
notiﬁcation to OEM vendors should be as swiftly as
possible, which unfortunately is not the case as we will
discuss later in the section.
3. Qualcomm. Qualcomm maintains many more
branches compared to Linux and Google and the
overhead of patch tracking and management goes up.
However, we ﬁnd its mainline branches are maintained
in a similar fashion to Android common. As seen in
Table 4, mainlines primarily merge commits from
Android common and only occasionally cherry-picks
patches from Linux directly. One difference is the
merge frequency is generally lower than that of Android
common,
resulting in longer delays as shown in
Figure 7.
the
developers
On the other hand, Qualcomm stable branches are
maintained differently. After they are forked from a
mainline and labeled as “release”, only cherry-picks are
performed. This creates the same paradox that even
though Qualcomm mainlines merge patches relatively
timely,
the
security-critical nature of these patches. As a result, it
can take Qualcomm stables a long time to cherry-pick
the patches.
Indeed, Figure 8 illustrates the dramatic
delay.
to
Qualcomm about the delays, their response indicates
that
this is because stable branches often receive
Linux-speciﬁc patches only when customers ask for
them explicitly.
Shockingly enough, after we reach out
are
not
aware
of
vulnerabilities,
patching Linux
In principle, even if Qualcomm is interested in
proactively
the
knowledge gap needs to be bridged by Linux (e.g.,
labeling the security nature of a patch). However,
Qualcomm can do its part by merging more patches to
stable branches without distinguishing their nature,
despite the fact that Qualcomm stables are designed to
include bug ﬁxes only. This is because Qualcomm
stables are already based on Android common branches
and indirectly from Linux stable/LTS, which commit
3662    30th USENIX Security Symposium
USENIX Association
only
(no
bug
ﬁxes
new features).
necessary
Interestingly, we observe two recent stable branches
namely
based
Android
and
kernel.lnx.4.9.r34-rel
kernel.lnx.4.9.r30-rel in Qualcomm follow this
very strategy.
on
10,
In contrast,
for vulnerabilities that originate in
Qualcomm kernels, we know that
they are patched
much more timely in stable branches (see Figure 8). In
such cases, Qualcomm is likely already aware of the
nature of the bugs — most are described as externally
reported or internally discovered during auditing. Thus
Qualcomm should be able to notify OEM vendors as
soon as patches are available. Unfortunately, after
collecting data from Qualcomm’s security bulletin
(released monthly since Sep 2017), we found that the
delay between the earliest patch and its own notiﬁcation
date is not ideal (median delay: 63 days, mean delay:
130 days),
shown in Figure 18 (surprisingly
indiscriminative of the vulnerability severity again).
Note that we combine high/critical CVEs into one line
here because there are only three critical Qualcomm
kernel CVEs
since the inception of Qualcomm’s
security bulletin.
as
After conﬁrming with Qualcomm, we know that the
customer notiﬁcation is sent out (to all OEM vendors)
only after ﬁxes have been widely propagated on affected
branches. However, we believe the notiﬁcation process
can be more agile — a subset of OEM vendors can be
notiﬁed as soon as their corresponding branches have
the patches ready. Even better, oftentimes the patches
are not really different across branches, Qualcomm can
simply notify all customers as soon as the earliest patch
is ready and OEM vendors can make an early decision
(e.g., testing the patch independently before applying).
This way, the major bottleneck of late notiﬁcation can
be mitigated.
According to the same ﬁgure, there is another delay