System.Type
Represents a single type in an assembly and allows access
to information about its members
System.Reflection.Assembly
Allows access to loading and inspecting an assembly as
well as enumerating available types
System.Reflection.MethodInfo
Represents a method in a type
System.Reflection.FieldInfo
Represents a field in a type
System.Reflection.PropertyInfo
Represents a property in a type
System.Reflection.ConstructorInfo Represents a class’s constructor
Loading the Assembly
Before you can do anything with the types and members, you’ll need to load the assembly
using the Load() or the LoadFrom() method on the Assembly class. The Load() method takes an
assembly name, which is an identifier for the assembly that assumes the assembly file can be
found in the same location as the calling application. The LoadFrom() method takes the path
to the assembly file.
For the sake of simplicity, we’ll use LoadFrom(), which you can use in most cases. Listing
8-11 shows a simple example of how you might load an assembly from a file and extract a
type by name.
Assembly asm = Assembly.LoadFrom(@"c:\path\to\assembly.exe");
Type type = asm.GetType("ChatProgram.Connection");
Listing 8-11: A simple assembly loading example
The name of the type is always the fully qualified name including its namespace. For
example, in Listing 8-11, the name of the type being accessed is Connection inside the
ChatProgram namespace. Each part of the type name is separated by periods.
Technet24
||||||||||||||||||||
||||||||||||||||||||
How do you access classes that are declared inside other classes, such as those shown in
Listing 8-10? In C#, you access these by specifying the parent class name and the child
class name separated by periods. The framework is able to differentiate between
ChatProgram.Connection, where we want the class Connection in namespace ChatProgram, and the
child class 
Connection inside the class 
ChatProgram by using a plus (+) symbol:
ChatProgram+Connection represents a parent/child class relationship.
Listing 8-12 shows a simple example of how we might create an instance of an internal
class and call methods on it. We’ll assume that the class is already compiled into its own
assembly.
internal class Connection
{
  internal Connection() {}
  public void Connect(string hostname)
  {
    Connect(hostname, 12345);
  }
  private void Connect(string hostname, int port)
  {
    // Implementation...
  }
  public void Send(byte[] packet)
  {
    // Implementation...
  }
  public void Send(string packet)
  {
    // Implementation...
  }
  public byte[] Receive()
  {
    // Implementation...
  }
}
Listing 8-12: A simple C# example class
The first step we need to take is to create an instance of this Connection class. We could
do this by calling GetConstructor on the type and calling it manually, but sometimes there’s
an easier way. One way would be to use the built-in System.Activator class to handle creating
instances of types for us, at least in very simple scenarios. In such a scenario, we call the
method CreateInstance(), which takes an instance of the type to create and a Boolean value
that indicates whether the constructor is public or not. Because the constructor is not
public (it’s internal), we need to pass true to get the activator to find the right constructor.
Listing 8-13 shows how to create a new instance, assuming a nonpublic parameterless
constructor.
Type type = asm.GetType("ChatProgram.Connection");
object conn = Activator.CreateInstance(type, true);
||||||||||||||||||||
||||||||||||||||||||
Listing 8-13: Constructing a new instance of the Connection object
At this point, we would call the public Connect() method.
In the possible methods of the Type class, you’ll find the GetMethod() method, which just
takes the name of the method to look up and returns an instance of a MethodInfo type. If the
method cannot be found, null is returned. Listing 8-14 shows how to execute the method
by calling the Invoke() method on MethodInfo, passing the instance of the object to execute it
on and the parameters to pass to the method.
MethodInfo connect_method = type.GetMethod("Connect");
connect_method.Invoke(conn, new object[] { "host.badgers.com" });
Listing 8-14: Executing a method on a Connection object
The simplest form of GetMethod() takes as a parameter the name of the method to find,
but it will look for only public methods. If instead you want to call the private Connect()
method to be able to specify an arbitrary TCP port, use one of the various overloads of
GetMethod(). These overloads take a BindingFlags enumeration value, which is a set of flags you
can pass to reflection functions to determine what sort of information you want to look up.
Table 8-2 shows some important flags.
Table 8-2: Important .NET Reflection Binding Flags
Flag name
Description
BindingFlags.Public
Look up public members
BindingFlags.NonPublic Look up nonpublic members (internal or private)
BindingFlags.Instance
Look up members that can only be used on an instance of the class
BindingFlags.Static
Look up members that can be accessed statically without an instance
To get a MethodInfo for the private method, we can use the overload of GetMethod(), as
shown in Listing 8-15, which takes a name and the binding flags. We’ll need to specify
both NonPublic and Instance in the flags because we want a nonpublic method that can be
called on instances of the type.
MethodInfo connect_method = type.GetMethod("Connect",
                                   BindingFlags.NonPublic | BindingFlags.Instance);
connect_method.Invoke(conn, new object[] { "host.badgers.com", 9999 });
Listing 8-15: Calling a nonpublic Connect() method
So far so good. Now we need to call the Send() method. Because this method is public,
we should be able to call the basic GetMethod() method. But calling the basic method
generates the exception shown in Listing 8-16, indicating an ambiguous match. What’s
gone wrong?
Technet24
||||||||||||||||||||
||||||||||||||||||||
System.Reflection.AmbiguousMatchException: Ambiguous match found.
   at System.RuntimeType.GetMethodImpl(...)
   at System.Type.GetMethod(String name)
   at Program.Main(String[] args)
Listing 8-16: An exception thrown for the Send() method
Notice in Listing 8-12 the Connection class has two Send() methods: one takes an array of
bytes and the other takes a string. Because the reflection API doesn’t know which method
you want, it doesn’t return a reference to either; instead, it just throws an exception.
Contrast this with the Connect() method, which worked because the binding flags
disambiguate the call. If you’re looking up a public method with the name Connect(), the
reflection APIs will not even inspect the nonpublic overload.
We can get around this error by using yet another overload of GetMethod() that specifies
exactly the types we want the method to support. We’ll choose the method that takes a
string, as shown in Listing 8-17.
MethodInfo send_method = type.GetMethod("Send", new Type[] { typeof(string) });
send_method.Invoke(conn, new object[] { "data" });
Listing 8-17: Calling the Send(string) method
Finally, we can call the Receive() method. It’s public, so there are no additional overloads
and it should be simple. Because Receive() takes no parameters, we can either pass an empty
array or null to Invoke(). Because Invoke() returns an object, we need to cast the return value
to a byte array to access the bytes directly. Listing 8-18 shows the final implementation.
MethodInfo recv_method = type.GetMethod("Receive");
byte[] packet = (byte[])recv_method.Invoke(conn, null);
Listing 8-18: Calling the Receive() method
Repurposing Code in Java Applications
Java is fairly similar to .NET, so I’ll just focus on the difference between them, which is
that Java does not have the concept of an assembly. Instead, each class is represented by a
separate .class file. Although you can combine class files into a Java Archive (JAR) file, it is
just a convenience feature. For that reason, Java does not have internal classes that can
only be accessed by other classes in the same assembly. However, Java does have a
somewhat similar feature called package-private scoped classes, which can only be accessed
by classes in the same package. (.NET refers to packages as a namespace.)
The upshot of this feature is that if you want to access classes marked as package
scoped, you can write some Java code that defines itself in the same package, which can
then access the package-scoped classes and members at will. For example, Listing 8-19
shows a package-private class that would be defined in the library you want to call and a
simple bridge class you can compile into your own application to create an instance of the
||||||||||||||||||||
||||||||||||||||||||
class.
// Package-private (PackageClass.java)
package com.example;
class PackageClass {
    PackageClass() {
    }
    PackageClass(String arg) {
    }
    @Override
    public String toString() {
        return "In Package";
    }
}
// Bridge class (BridgeClass.java)
package com.example;
public class BridgeClass {
    public static Object create() {
        return new PackageClass();
    }
}
Listing 8-19: Implementing a bridge class to access a package-private class
You specify the existing class or JAR files by adding their locations to the Java classpath,
typically by specifying the -classpath parameter to the Java compiler or Java runtime
executable.
If you need to call Java classes by reflection, the core Java reflection types are very
similar to those described in the preceding .NET section: Type in .NET is class in Java,
MethodInfo is Method, and so on. Table 8-3 contains a short list of Java reflection types.
Table 8-3: Java Reflection Types
Class name
Description
java.lang.Class
Represents a single class and allows access to its members
java.lang.reflect.Method
Represents a method in a type
java.lang.reflect.Field
Represents a field in a type
java.lang.reflect.Constructor Represents a class’s constructor
You can access a class object by name by calling the Class.forName() method. For example,
Listing 8-20 shows how we would get the PackageClass.
Class c = Class.forName("com.example.PackageClass");
System.out.println(c);
Listing 8-20: Getting a class in Java
Technet24
||||||||||||||||||||
||||||||||||||||||||
If we want to create an instance of a public class with a parameterless constructor, the
Class instance has a newInstance() method. This won’t work for our package-private class, so
instead we’ll get an instance of the Constructor by calling getDeclaredConstructor() on the Class
instance. We need to pass a list of Class objects to getDeclaredConstructor() to select the correct
Constructor based on the types of parameters the constructor accepts. Listing 8-21 shows
how we would choose the constructor, which takes a string, and then create a new
instance.
   Constructor con = c.getDeclaredConstructor(String.class);
➊ con.setAccessible(true);
   Object obj = con.newInstance("Hello");
Listing 8-21: Creating a new instance from a private constructor
The code in Listing 8-21 should be fairly self-explanatory except perhaps for the line at
➊. In Java, any nonpublic member, whether a constructor, field, or method, must be set as
accessible before you use it. If you don’t call setAccessible() with the value true, then calling
newInstance() will throw an exception.
Unmanaged Executables
Calling arbitrary code in most unmanaged executables is much more difficult than in
managed platforms. Although you can call a pointer to an internal function, there’s a
reasonable chance that doing so could crash your application. However, you can
reasonably call the unmanaged implementation when it’s explicitly exposed through a
dynamic library. This section offers a brief overview of using the built-in Python library
ctypes to call an unmanaged library on a Unix-like platform and Microsoft Windows.
NOTE
There are many complicated scenarios that involve calling into unmanaged code using the
Python ctypes library, such as passing string values or calling C++ functions. You can find
several detailed resources online, but this section should give you enough basics to interest you in
learning more about how to use Python to call unmanaged libraries.
Calling Dynamic Libraries
Linux, macOS, and Windows support dynamic libraries. Linux calls them object files (.so),
macOS calls them dynamic libraries (.dylib), and Windows calls them dynamic link libraries
(.dll). The Python ctypes library provides a mostly generic way to load all of these libraries
into memory and a consistent syntax for defining how to call the exported function.
Listing 8-22 shows a simple library written in C, which we’ll use as an example throughout
the rest of the section.
||||||||||||||||||||
||||||||||||||||||||
#include 
#include 
void say_hello(void) {
  printf("Hello\n");
}
void say_string(const char* str) {
  printf("%s\n", str);
}
void say_unicode_string(const wchar_t* ustr) {
  printf("%ls\n", ustr);
}
const char* get_hello(void) {
  return "Hello from C";
}
int add_numbers(int a, int b) {
  return a + b;
}
long add_longs(long a, long b) {
  return a + b;
}
void add_numbers_result(int a, int b, int* c) {
  *c = a + b;
}
struct SimpleStruct
{
  const char* str;
  int num;
};
void say_struct(const struct SimpleStruct* s) {
  printf("%s %d\n", s->str, s->num);
}
Listing 8-22: The example C library lib.c
You can compile the code in Listing 8-22 into an appropriate dynamic library for the
platform you’re testing. For example, on Linux you can compile the library by installing a
C compiler, such as GCC, and executing the following command in the shell, which will
generate a shared library lib.so:
gcc -shared -fPIC -o lib.so lib.c
Loading a Library with Python
Moving to Python, we can load our library using the ctypes.cdll.LoadLibrary() method, which
returns an instance of a loaded library with the exported functions attached to the instance
as named methods. For example, Listing 8-23 shows how to call the say_hello() method
from the library compiled in Listing 8-22.
listing8-23.py
from ctypes import *
Technet24
||||||||||||||||||||
||||||||||||||||||||
# On Linux
lib = cdll.LoadLibrary("./lib.so")
# On macOS
#lib = cdll.LoadLibrary("lib.dylib")
# On Windows
#lib = cdll.LoadLibrary("lib.dll")
# Or we can do the following on Windows
#lib = cdll.lib
lib.say_hello()
>>> Hello
Listing 8-23: A simple Python example for calling a dynamic library
Note that in order to load the library on Linux, you need to specify a path. Linux by
default does not include the current directory in the library search order, so loading lib.so
would fail. That is not the case on macOS or on Windows. On Windows, you can simply
specify the name of the library after cdll and it will automatically add the .dll extension and
load the library.
Let’s do some exploring. Load Listing 8-23 into a Python shell, for example, by
running execfile("listing8-23.py"), and you’ll see that Hello is returned. Keep the interactive
session open for the next section.
Calling More Complicated Functions
It’s easy enough to call a simple method, such as say_hello(), as in Listing 8-23. But in this
section, we’ll look at how to call slightly more complicated functions including unmanaged
functions, which take multiple different arguments.
Wherever possible, ctypes will attempt to determine what parameters are passed to the
function automatically based on the parameters you pass in the Python script. Also, the
library will always assume that the return type of a method is a C integer. For example,
Listing 8-24 shows how to call the add_numbers() or say_string() methods along with the
expected output from the interactive session.
print lib.add_numbers(1, 2)
>>> 3
lib.say_string("Hello from Python");
>>> Hello from Python
Listing 8-24: Calling simple methods
More complex methods require the use of ctypes data types to explicitly specify what
types we want to use as defined in the ctypes namespace. Table 8-4 shows some of the
more common data types.
Table 8-4: Python ctypes and Their Native C Type Equivalent
Python ctypes
Native C types