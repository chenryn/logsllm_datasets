states is that as a group they should present both 1 and
0 digits in all FFs. The original STG is also connected
to the dummy STG and can utilize it as a black hole (de-
scribed more thoroughly in Subsection 6.2), if there is a
need to halt the IC.
6 Attack resiliency
This section ﬁrst identiﬁes several types of potential at-
tacks on the active hardware metering approach. Next,
we outline a number of mechanisms that must be added
to the basic active metering scheme to ensure its re-
siliency against the suggested attacks.
The adversary (Bob) may attempt to perform a set of
invasive or noninvasive attacks on the proposed active
metering scheme. Bob may do so by measuring and
probing one instance, or by statistically studying a col-
lection of instances. In this section, we ﬁrst identify and
describe the attacks. Next, we propose efﬁcient coun-
termeasures that can be taken to neutralize the effect of
potential adversarial acts.
We assume that Bob knows all the concepts of the
proposed hardware metering scheme, has the complete
knowledge of the design at all levels of abstraction pro-
vided to the foundry (e.g., logic synthesis level netlist,
and physical design GDS-II ﬁle, but no behavioral spec-
iﬁcation), can simultaneously observe all signals (data)
on all interconnects and ﬂip-ﬂops (FFs), and can mea-
sure, with no error, all timing characteristics of all gates
in the ICs.
6.1 Description of attacks
The starting point for development and evaluation of the
metering schemes is identiﬁcation and speciﬁcation of
several types of potential attacks:
(i) Brute-force attack. Bob aims to place the pertinent
IC into the initial state by systematically applying the
298
16th USENIX Security Symposium
USENIX Association
input sequences to the BFSM. The systematic applica-
tion may be a randomized strategy, or may be based on
scanning the FFs. Brute-force attack works by randomly
changing the inputs in hope of arriving at the reset state.
Scanning works by reading out the FF values for a few
ICs and storing them. The FFs in the current IC are then
monitored for the existence of a common state with the
stored ones. In case a state that was read in the previous
ICs is reached, Bob uses the same key for traversal to the
reset state.
(ii) Reverse engineering of FSM. Bob may try to scan
the FFs to extract the STG. The attempt would be to re-
move the added STG from the BFSM, to separate the
original and the added states.
(iii) Combinational redundancy removal. Bob may
use the combinational redundancy removal, a procedure
that attempts to remove the combinational logic that is
not necessary for the correct behavior of the circuit. The
proposed techniques of this class often take into account
the set of reachable states of the FSM under examination
[25]. Note that, the attacks that were described so far can
greatly beneﬁt from the ability to simultaneously moni-
tor the multitude of signals/values on the IC using laser
reading.
(iv) RUB emulation. The goal of this attack is to create a
reconﬁgurable implementation capable of realizing hard-
ware that has the identical functional and timing charac-
teristics to a RUB for which a legal key is already re-
ceived.
(v) Initial power-up state capturing and replaying
(CAR). Bob knows the initial power-up state of an un-
locked IC. He can use invasive methods to load the FFs
of other ICs to the same power-up state as the unlocked
IC and then utilize the same key to decode the new locks.
Note that, unless invasive methods are used, the only way
for Bob to alter the values in the FFs is to change the
states using the input pins. Without the knowledge of the
STG, the change of state can only be done as described
in the ﬁrst attack. This attack and the next two belong to
the class of replay attacks.
(vi) Initial reset state CAR. Bob scans the FF of an un-
locked IC and reads the code of the reset state. Next, he
employs invasive methods to load the FFs of other ICs to
unlock them.
(vii) Control signals CAR. In this attack, Bob attempts
to bypass the FSM by learning the control signals and
attempting to emulate them. Bob may completely bypass
FSM by creating a new FSM that provides control signals
to all functional units, and control logic (e.g. MUX’s and
FFs) in the datapath.
q1
q0
q5q6q7
h1
q2
q15….….….
h2
q3
q4
….….….
q29q30
h3
h4
Original 
STGAdded 
q31
STG
Blackhole 
STG
Figure 6: Example of a black hole FSM.
(viii) Creation of identical ICs using selective IC re-
lease. Bob only releases the ICs with similar character-
istics to Alice in the hope of ﬁnding the keys by correla-
tions. This attack is probably the most expensive because
it involves only a small percentage of manufactured ICs
by the untrusted foundry. Only the ICs that have simi-
lar RUBs are reported. Hence, if the attack is successful,
the design house supplies many keys for ICs with sim-
ilar RUBs; the birthday paradox shows that one of the
keys with relatively high likelihood can be used on the
unreported ICs. Note that, the way for Bob to determine
closeness of characteristics is by looking at the distances
of the initial power-up states.
(ix) Differential FF activity measurement. Bob may
start to investigate the differential activities of the FFs of
the unlocked designs for the same input, and then try to
eliminate the FFs that have different values.
6.2 Countermeasures
We propose a number of mechanisms to augment the
basic active metering scheme and preserve its security
against the above attacks. Two important observations
are that FSMs in modern industrial design are always a
very small part the overall design, well below 1%, and
that STG recovery is a computationally intractable prob-
lem [7, 10, 22]:
• Creating black holes FSMs. Alice may create a black
holes FSM inside the BFSM that makes the exit impos-
sible. Black holes are the states that cannot be exited
regardless of the used input sequence. Their design is
very simple as shown in Figure 6, where the black states
do not have a route back to the other states. Furthermore,
a designer can plan the black hole states to be perma-
nent if it is desirable: a small part may be added, so that
restarting the IC would not take it out of the black hole
states. This measure essentially eliminates the effective-
ness of the ﬁrst two attacks, because no random input
sequence leads to the initial state of the functional FSM:
USENIX Association
16th USENIX Security Symposium
299
once the black hole sub-FSM is entered, there is no way
out. A special case is creation of trapdoor black (gray)
holes FSMs that are designed in such a way that only
long speciﬁc sequence of input signals known just to the
designer can bring control out of this FSM and into the
initial functional state of the overall FSM. An issue that
needs to be carefully addressed here is preventing the IC
from powering-up in one of the black-hole states. This
can be easily ensured by adding extra logic to the black
hole parts that would disconnect the black hole states
from the power-up states.
• Merging the functional BFSM with the test and
other FSMs, (e.g. ones that can be used for debugging
and authentication). In a typical design, the functional
control circuits are not the only FSMs around. Alice,
with the the objective to make identiﬁcation of her func-
tional FSM more difﬁcult, can further intricate the BFSM
by co-synthesizing them with others. This augmenta-
tion makes the ﬁrst two and the three CAR attacks less
effective.
In particular, this merger would distract the
ability to simultaneously monitor the multitude of sig-
nals/values on the IC using laser reading.
• Similar FF activity for the unlocked ICs. The de-
signs would be made such that once an IC exits the
locked states and is in its functional states, all its FFs
have a deterministic behavior that is the same for all ICs.
Thus, the differential FF activity screening would not
yield any useful information.
• Creation of specialized functional FSMs (SFFSMs).
Alice can make the security much tighter by integrating
the RUBs not just to assign the initial power-up state, but
to alter the structure of the BFSM and make it a SFFSM.
Using this method, the reset state for FSM of each IC is
a function of its RUB. Each SFFSM operates correctly
only if it received a speciﬁc stream of signals from the
RUBs. Since there are exponentially many states with
respect to the number of FFs in FSM, we map a set of
blocks that share an identical subset of RUB outputs into
a single SFFSM. This countermeasure makes the ﬁrst
two attacks (i.e., brute-force attack and FSM reverse en-
gineering) much more difﬁcult and the ﬁrst two CAR
attacks (i.e., initial control signal CAR and initial reset
state CAR) almost impossible.
A simple example of this method is presented in Fig-
ure 7. On this ﬁgure, the added STG is shown by the
cloud on left, and the original STG is plotted in the right
cloud. The original STG has only 3 states: a reset state
two other states. Here, the original STG is replicated
twice: One replication is denoted by SFFSM’ and the
other one is denoted by SFFSM”. The scheme adds logic
to the added STG, so based on the bits in the RUB, it will
be categorized into three classes. Each of the classes will
?RUB 
?
q’2q’1
Group 2
SSFSM’
q’0
RUB 
Additional 
q’0
Group 1
States
q”2q”1
SSFSM”
q"0
RUB 
? Figure 7: A simpliﬁed SFFSM.
Group 3
transition to one of the reset states in one of the clouds:
original FSM, SFFSM’ or SFFSM”. This scheme will
cause confusion in FFs scanning methods that aim at
loading the reset state of an unlocked IC in the FFs of
a locked chip. Note that, the replicated states need not
all be unique, and maybe shared among the replicas to
reduce the overhead.
Original 
FSM
q2q1
The example is very small, but one can add the RUB-
dependent states at various stages to ensure that the at-
tacker is not able to break the system. A combination
of the SFFSM method and the state obfuscation and en-
coding would ensure a full security of the design against
the CAR attacks. Furthermore, using similar methods,
the RUBs can be also added to the obfuscation scheme
based on the dummy variables like the example presented
in Figure 5, so that the same inputs would have different
random obfuscation patterns.
Another use of SFFSM is for addressing the effect of
temporal changes in RUB. Recall that the actual appli-
cation of the new hardware metering scheme to indus-
trial designs requires mechanisms that ensure resiliency
against time-dependent permanent changes of transistors
as well as gate-level and transient changes due to the en-
vironmental conditions such as temperature and supply
voltage ﬂuctuations [4].
The exact reconstruction of the ﬁrst power-up state of
IC (the particular one for which the designer released the
key) for the purpose of defeating the variabilities is triv-
ial: Bob can just load the captured and saved outputs of
the ﬁrst power-up RUB for which he has obtained the
key. This mechanism makes the design susceptible to
reuse attacks, where Bob can reuse the key and the ini-
tial RUB for an unlocked IC to decipher another locked
IC. However, if Alice included SFFSM in her design, she
would be resilient against this attack. The only technical
issue that remains to be addressed is to ensure that the
SFFSM receives the correct data from the physical RUB,
exactly the same as the one that was ﬁrst received and for
300
16th USENIX Security Symposium
USENIX Association
which the key is available. Otherwise, the stored key will
fail.
In presence of temporal variations, ensuring that each
SFFSM receives the correct data from RUB requires
error-correction mechanisms. One solution is to em-
ploy standard error-correction codes (ECCs). An alterna-
tive hardware solution that encounters a lower overhead
compared to ECC is to create the speciﬁcations of each
SFFSM in such a way that it transitions into the correct
next states, even when one or up to a speciﬁed number of
the inputs from the RUB are altered by the environmental
conditions. Using the hamming distances of the RUBs,
we can group them into similar SFFSMs and synthesize
the results such that the error correction mechanisms are
inherently present. This mechanism is particularly effec-
tive for longer RUBs that are required for present indus-
trial designs. Note that, because the minterms for the
combinational logic that implements transitions are now
not smaller than for non-resilient versions of the SFFSM,
the hardware overhead is often zero or negative at the
expense of the lower resiliency against brute force at-
tacks [5]. However, since the probability of brute force
attack can be made arbitrarily small with very low over-
head (i.e., by using the black holes), this is a favorable
trade-off.
• Resiliency against combinational redundancy re-
moval. To overcome this attack, Alice must ensure the
inapplicability of the attack to typical large circuits and
the capability of this method to remove the added states.
In general, computing a set of reachable states, can only
be done for relatively small circuits, even when the im-
plicit enumeration techniques are used. Thus, the method
is only applicable to small circuits of small sizes.
• Statistical characterization of gates. Alice can go
one step further and attempt to derive the gate-level char-
acteristics of the manufactured ICs by measuring the in-
put/output signals and exploiting the controllability and
observability into the design. Essentially, knowing the
circuit diagram, she would be able to write a linear sys-
tems of equations that can be solved for obtaining the
approximate gate-level delay and power characteristics
of the gates. She may even go further to use the extracted
data to ﬁnd the distribution of variations across the dif-
ferent chips (e.g., by using methods such as expectation
maximization(EM)). Now, if the variations do not have
enough ﬂuctuations, then she will get suspicious and can
halt the unlocking. This computation would ensure that
the selective IC release would not be successful.
• Obfuscation of state activities and encodings. The
implementation of the BFSM presented in the previous
section renders it impossible to tell the difference be-
tween the original FSM FFs and the added states FFs.
This is because all of the FFs are changing all the time.
Therefore, even though two states of BFSM in two ICs
might be identical, the attacks based on scanning the
FFs would not notice that, since a subset of the bits
will be different.
In other word, the FFs not used in
the added FSM are randomly changing. Another ob-
fuscation method that has already been implemented is
that the states in the added STG are not in order and are
coded out of sequence by the synthesis tool. Thus, even
though there might be a direct transition (edge) between
two states, the methods based on FFs readings would not
notice the proximity of the two states, since there code
words are distant from each other.
Note that, the attacks that were described earlier, even
the ones that are computationally very expensive, will
not be able to unlock the ICs, if the countermeasures de-
scribed above are in place.
7 Experimental evaluations
To test the applicability of the method described earlier,
we implemented the active hardware metering on stan-
dard benchmark designs. In this section, we present the
experimental setup, followed by the overhead of imple-
menting BFSM on the considered benchmarks. After
that, we show quantitative analysis of the effectiveness
of the brute force attacks. We further show how the addi-
tion of black holes can make the scheme resilient against
this attack with a minimal overhead. Note that, many
of the attacks described earlier are assuming structural
countermeasures that are hard to quantify and evaluate.
7.1 Experiment setup
We used extended set of sequential benchmarks from the
ISCAS’89 to evaluate the impact of the active hardware
metering method [6]. Even though the ISCAS’89 bench-
marks are the latest comprehensive set of the gate-level
designs, they are dated compared to the complex circuits
in design, production and use today. Recall that follow-
ing the Moore’s law, the size and complexity of the cir-
cuits doubles approximately every 18 months. We use
the larger benchmarks from the set, and we project the
results to more complex circuits. Our projections show
that the power, area, and delay overheads diminish as we
increase the size and complexity. Simultaneously, the
locking complexity and resiliency against the attacks ex-
ponentially improves, due the multiplicity of states. We
synthesize the benchmarks using the Berkeley SIS tool
[26], that given a STG or a logic-level description of a se-
quential circuit produces an optimized netlist in the target
technology (cell library) while preserving the sequential
input-output behavior. We have written a C program that
modiﬁes the benchmarks by adding the extra states. The
USENIX Association
16th USENIX Security Symposium
301
program calls SIS to obtain the speciﬁcations of the syn-
thesized and mapped original and modiﬁed STGs. When
evaluating the overhead results, the important observa-
tion is that FSMs (i.e., the control circuitry) in modern
industrial design are always a very small part of the over-
all design, well bellow 1% [7, 10]. Thus, even doubling
the overhead, will have a minimal impact on the overall
circuit that is mostly occupied by memory, testing pins,
and data path circuitry.
7.2 Overhead of active hardware metering
Our ﬁrst set of experiments study the overhead of the in-
troduced scheme in terms of area, power, and delay. It
is worth noting here that our ultimate goal is to integrate
the active hardware metering method in the design ﬂow.
Thus we have considered testing the approach on manu-
factured ICs. However, the prohibitive cost of manufac-
turing a circuit in aggressive technologies (the quote we
got for fabricating a circuit in 65nm was $500K) limits
our experiments to synthesizing the benchmarks. Table 1
presents the results for the area overhead. Because of
the relatively small size of the circuits, we added STGs
with 12 FFs and 15 FFs overhead to the original STGs.
The ﬁrst column shows the name of the circuit from the
ISCAS’89 benchmark. The second column shows the
number of inputs to the circuit. The third column shows
the number of outputs to the circuits. Both the number
of inputs and the number of outputs do not change af-
ter adding the extra states. The fourth column shows the
number of FFs in the original circuit. The ﬁfth column
shows the area of the original circuit. Then we show both
the new area and the percentage overhead after adding 12
FFs and 15 FFs for the extra states. It can be seen that the
percentage area overhead is decreasing as the circuit size
increases. Thus, for larger circuit sizes, the area overhead
will be even less insigniﬁcant.
Table 2 shows the delay and power overheads. The
ﬁrst column contains the benchmark names. The second
and third columns show the delay and power estimates of
the original circuits. These are followed by both the de-
lay and the percentage delay overhead, and the power and
the percentage power overhead for adding both 12 FFs
and 15 FFs STGs respectively. The delay overheads are
universally small. With the exception of s27 that is too
small to be considered practical, it is interesting to see
that even other small benchmarks encountered no delay
overhead after the addition of the new STG. For the small