ser. PETS’10. Berlin, Heidelberg: Springer-Verlag, 2010, pp. 1–18.
[Online]. Available: http://dl.acm.org/citation.cfm?id=1881151.1881152
[8] “HTML Canvas 2D Context,” http://www.w3.org/TR/2dcontext/.
[9] “Emoji and Dingbats,” http://unicode.org/faq/emoji_dingbats.html.
[10] “WebGL Speciﬁcation,” https://www.khronos.org/registry/webgl/specs/
[13] “An Update on Flash Player and Android,” https://blogs.adobe.com/
ﬂashplayer/2012/06/ﬂash-player-and-android-update.html.
[14] J. Schuh, “Saying Goodbye to Our Old Friend NPAPI,” Septem-
ber 2013, https://blog.chromium.org/2013/09/saying-goodbye-to-our-
old-friend-npapi.html.
[15] “NPAPI deprecation: developer guide,” https://www.chromium.org/
developers/npapi-deprecation — The Netscape Plugin API (NPAPI) has
been permanently removed from Google Chrome since version 45. The
Pepper API (PPAPI) is one option but few plugins exist and it is not
proposed in the developer guide as an alternative.
[16] “Disallow enumeration of navigator.plugins (Mozilla bug tracker),”
https://bugzilla.mozilla.org/show_bug.cgi?id=757726.
[17] “NPAPI Plugins
in Firefox,” https://blog.mozilla.org/futurereleases/
2015/10/08/npapi-plugins-in-ﬁrefox/.
[18] “Extensive discussion about reducing the HTML battery API,” https:
//groups.google.com/forum/\#!topic/mozilla.dev.webapi/6gLD78z6ASI.
[19] L. Olejnik, G. Acar, C. Castelluccia, and C. Diaz, “The leaking battery:
A privacy analysis of the html5 battery status api,” Cryptology ePrint
Archive, Report 2015/616, 2015, http://eprint.iacr.org/.
[20] D. Fiﬁeld and S. Egelman, “Fingerprinting web users through font met-
rics,” in Proceedings of the 19th international conference on Financial
Cryptography and Data Security. Berlin, Heidelberg: Springer-Verlag,
2015.
[21] “Ghostery browser extension,” https://www.ghostery.com/our-solutions/
ghostery-browser-extention/.
[22] “Privacy Badger browser extension,” https://www.eff.org/privacybadger.
[23] “NoScript browser extension,” https://noscript.net/.
[24] “Design of
the Tor browser,” https://www.torproject.org/projects/
torbrowser/design/.
[25] “Release of Tor with a new defense against font enumeration,” https:
//blog.torproject.org/blog/tor-browser-55-released.
[26] T.-F. Yen, Y. Xie, F. Yu, R. P. Yu, and M. Abadi, “Host ﬁngerprinting
and tracking on the web: Privacy and security implications.” in NDSS,
2012.
[27] J. Spooren, D. Preuveneers,
“Mobile device
ﬁngerprinting considered harmful for risk-based authentication,” in
Proceedings of the Eighth European Workshop on System Security,
ser. EuroSec ’15. New York, NY, USA: ACM, 2015, pp. 6:1–6:6.
[Online]. Available: http://doi.acm.org/10.1145/2751323.2751329
and W.
Joosen,
[28] K. Boda, A. M. Földes, G. G. Gulyás, and S. Imre, “User tracking
on the web via cross-browser ﬁngerprinting,” in Information Security
Technology for Applications, ser. Lecture Notes in Computer Science,
P. Laud, Ed. Springer Berlin Heidelberg, 2012, vol. 7161, pp. 31–46.
[Online]. Available: http://dx.doi.org/10.1007/978-3-642-29615-4_4
[29] K. Mowery, D. Bogenreif, S. Yilek, and H. Shacham, “Fingerprinting
information in JavaScript implementations,” in Proceedings of W2SP
2011, H. Wang, Ed.
IEEE Computer Society, May 2011.
[30] M. Mulazzani, P. Reschl, M. Huber, M. Leithner, S. Schrittwieser,
E. Weippl, and F. C. Wien, “Fast and reliable browser identiﬁcation
with javascript engine ﬁngerprinting,” in Web 2.0 Workshop on Security
and Privacy (W2SP), vol. 5, 2013.
Technical
[31] “
,”
identiﬁcation-mechanisms.
analysis
identiﬁcation mechanisms
https://www.chromium.org/Home/chromium-security/client-
client
of
[32] “three.js ofﬁcial website, a JavaScript library to create 3D animations
using WebGL,” http://threejs.org/.
APPENDIX A
NORMALIZED SHANNON’S ENTROPY FOR ALL
AMIUNIQUE’S ATTRIBUTES
Attribute
User agent
List of plugins
List of fonts (Flash)
Screen resolution (JS)
Timezone
Cookies enabled
Accept
Content encoding
Content language
List of HTTP headers
Platform (JS)
Do Not Track
Use of local storage
Use of session storage
Canvas
Vendor WebGL
Renderer WebGL
AdBlock
All
0.580
0.656
0.497
0.290
0.198
0.015
0.082
0.091
0.351
0.249
0.137
0.056
0.024
0.024
0.491
0.127
0.202
0.059
Desktop Mobile
0.741
0.550
0.718
0.081
0.033
0.548
0.366
0.263
0.245
0.200
0.011
0.016
0.082
0.105
0.122
0.089
0.424
0.344
0.312
0.247
0.162
0.110
0.058
0.057
0.023
0.036
0.036
0.023
0.512
0.475
0.131
0.125
0.165
0.205
0.060
0.029
APPENDIX B
OUR ATTEMPT AT A WEBGL TEST
As reported by Mowery et al. [4], the WebGL API can be
used to render 3D forms in the browser. With the help of the
three.js JavaScript library [32], we aimed to have a test that
renders three different forms:
• a sphere
• a cube
• a Torus knot
However, after analyzing more than 40,000 ﬁngerprints, we
concluded that the test was too brittle and unreliable to draw
any conclusions from it. Indeed, if the user were to change the
size of its browser window or open the browser console, the
actual dimensions of the rendering context would be updated
inside the library and the rendering would differ with just a
simple page reload. Figure 10 shows three renderings of the
same test with three different window sizes on the same device.
APPENDIX C
ADDITIONAL FLASH ATTRIBUTES
For Flash, we also collected the following four attributes:
• Capabilities.language
• Capabilities.os
• Capabilties.screenResolutionX
• Capabilties.screenResolutionY
The language obtained through Flash is the devices main
language, but it is not as precise as the content language header
collected through HTTP. For the screen resolution, it can be
more interesting than the JavaScript value because Flash will
return the full resolution of a multi-screen setup and not the
resolution of a single screen. Finally, when analyzing the data
from the string collected from the OS property, it conﬁrmed
what has been observed by Nikiforakis et al. [1] in 2013.
Depending on the OS and the browser, the information is often
generic, returning “Windows" or “Linux", but in some cases
890890
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:16 UTC from IEEE Xplore.  Restrictions apply. 
on the tail on the right of Graph 11a, AmIUnique presents a
slightly lower number on Graph 11b with 79.4% of ﬁngerprints
that are unique in the database (ﬁngerprints with and without
JavaScript).
B. Distribution of browsers
Figure 12 shows the distribution of surprisal for different
categories of browsers. We can see that the overall trend is
similar in both graphs. The main noticeable difference is the
number of browsers in each category. While the Panopticlick
dataset was constituted of mainly Firefox browsers followed
by Chrome and Internet Explorer, our dataset put Chrome and
Firefox at the same level with all the other browsers behind.
This shows the rapid growth of the Chrome userbase over the
last 5 years and the decline of Internet Explorer.
C. Anonymity set sizes
(a) 1920x1200 window
(b) 960x1200 window
is,
the better it
the bigger an anonymity set
Figure 13 shows the size of anonymity sets for all attributes
if we consider them independently from each other. In our
is for
case,
privacy. If a value is in an anonymity set of size 1,
it
means that the observed value is unique and is not shared by
another ﬁngerprint. With all the attributes that we collected on
AmIUnique, we could not add all of them in Figure 13b for
readability reasons so we focused on attributes with the highest
level of entropy. If we look at the upper left part of both
Figure 13a and Figure 13b, we observe very similar results
and the most discriminating attributes on AmIUnique are still
the same as the ones observed by Eckersley (mainly fonts and
plugins) but with the addition of new efﬁcient techniques like
canvas ﬁngerprinting (see section III-A of the paper for more
information).
(c) 1080x600 window
Fig. 10. Different renderings of the WebGL test on the same device
it returns the type of the OS with the exact version of the
kernel (for example, “Mac OS 10.8.2" or “Linux 3.18.4-1-
ARCH"). This level of detail could be used to forge an attack
against a vulnerable system, and it is surprising that little has
changed since it was originally reported. In the end, we did not
keep this information for our study because it did not increase
the number of unique ﬁngerprints and would mainly serve to
detect inconsistencies (e.g., caused by User-Agent spoofers).
STATISTICS OF ADDITIONAL FLASH ATTRIBUTES
TABLE IV
Flash attribute
Screen resolution XxY
Language
Platform
Distinct
values
584
44
968
Unique
values
329
10
483
APPENDIX D
COMPARISON TO THE PANOPTICLICK STUDY
To complement section 2.3.2 of our paper that compares
our dataset with the one from Panopticlick [7], we recreated
the same graphs to show the impact of 5 years of browser
development on browser ﬁngerprinting.
A. Distribution of ﬁngerprints
If we compare both frequency distributions in Figure 11
w.r.t. anonymity set sizes, we can observe that the overall trend
is similar in both graphs with set sizes quickly dropping to
1. While Panopticlick has 83.6% of its ﬁngerprints located
891891
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:16 UTC from IEEE Xplore.  Restrictions apply. 
1000
e
z
i
S
t
e
S
y
t
i
m
y
n
o
n
A
r
o
y
c
n
e
u
q
e
r
F
100
10
1
1
10
100
409,296 Distinct Fingerprints
(a) Panopticlick distribution (Fig. 1 of [7])
1000
10000
100000
1000000
0
0
0
1
0
0
1
0
1
1
e
z
S
i
t
e
S
y
t
i
m
y
n
o
n
A
r
o
y
c
n
e
u
q
e
r
F
1
10
100
1000
10000
100000
142,023 distinct fingerprints
(b) AmIUnique distribution
Fig. 11. Distribution of ﬁngerprints w.r.t. anonymity set size
892892
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:16 UTC from IEEE Xplore.  Restrictions apply. 
Firefox (258,898)
MSIE (57,207)
Opera (28,002)
Chrome (64,870)
Android (1,446)
iPhone (6,907)
Konqueror (1,686)
BlackBerry (259)
Safari (35,055)
Text mode browsers (1,274)
10
12
14
16
18
Surprisal (bits)
(a) Panopticlick distribution (Fig. 2 of [7])
Firefox (52,395)
Chrome (47,698)
Safari (9,464)
IE (5,178)
Opera (2,740)
Others (2,343)
s
r
e
s
w
o
r
b
f
o
n
o
i
t
r
o
p
o
r
P
1.0
0.8
0.6
0.4
0.2
0.0
8
s
r
e
s
w
o
r
b
f
o
n
o
i
t
r
o
p
o
r
P
4
.
0
3
.
0
2
.
0
1
.
0
0
.
0
8
10
12
14
16
Surprisal (bits)
(b) AmIUnique distribution
Fig. 12. Surprisal distributions for different categories of browser
893893
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:16 UTC from IEEE Xplore.  Restrictions apply. 
v
hhh
s
tt
v
uuuuuuuuuu
v
h
vv
t
p
hh
h
t t
f
hh
s
c
t
vvvvvvvvvv
h
c
s
t
h
s
t t
v
s
f
p
s
u user_agent
p plugins
f fonts
v video
s supercookies
h http_accept
t timezone
c cookie_enabled
f
p
u
h
f
p
u
h
v v
100000
10000
1000
100
10
k
e
z
i
S
f
o
s
t
e
S
y