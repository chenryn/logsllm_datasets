When implementing `Drop` on a type that has type parameters (which requires
`#[unsafe_destructor])`, if the `Drop` impl is specialized to some concrete
type parameter, the specialization is ignored in the drop glue and the `Drop`
impl is instead run on all values of the outer type regardless of type
parameters.
Example:
    #![feature(unsafe_destructor)]
    extern crate debug;
    struct DropMe {
        _x: T
    }
    struct ImplDrop;
    #[unsafe_destructor]
    impl Drop for DropMe {
        fn drop(&mut self) {
            println!("DropMe.Drop: {:?}", *self);
        }
    }
    fn main() {
        let x = DropMe:: { _x: ImplDrop };
        println!("Dropping DropMe");
        drop(x);
        let y = DropMe:: { _x: 32 };
        println!("Dropping DropMe");
        drop(y);
    }
This should print
>
>     Dropping DropMe
>     Dropping DropMe
>     DropMe.Drop: DropMe{_x: ImplDrop}
>  
Instead it prints
>
>     Dropping DropMe
>     DropMe.Drop: DropMe{_x: ImplDrop}
>     Dropping DropMe
>     DropMe.Drop: DropMe{_x: ImplDrop}
>  
Note that it's calling the `Drop` impl on `DropMe`, even though the
`Drop` impl itself believes that the receiver type is `DropMe`.
* * *
It gets worse. If you add a second specialized `Drop` impl, that completely
overrides the first:
    #![feature(unsafe_destructor)]
    extern crate debug;
    struct DropMe {
        _x: T
    }
    struct ImplDrop;
    #[unsafe_destructor]
    impl Drop for DropMe {
        fn drop(&mut self) {
            println!("DropMe.Drop: {:?}", *self);
        }
    }
    #[unsafe_destructor]
    impl Drop for DropMe {
        fn drop(&mut self) {
            println!("DropMe.Drop: {:?}", *self);
        }
    }
    fn main() {
        let x = DropMe:: { _x: 32 };
        println!("Dropping DropMe");
        drop(x);
        let y = DropMe:: { _x: ImplDrop };
        println!("Dropping DropMe");
        drop(y);
    }
This prints:
>
>     Dropping DropMe
>     DropMe.Drop: DropMe{_x: 32}
>     Dropping DropMe
>     DropMe.Drop: DropMe{_x: 140734783283201}
>  
* * *
It gets worse. If you use a type parameter with bounds, it incorrectly
believes that it needs to call the `Drop` impl regardless of parameterization
(as it did before), even though it knows that the type doesn't conform to the
bounds. At least this time it's a compile-time error:
    #![feature(unsafe_destructor)]
    extern crate debug;
    struct DropMe {
        _x: T
    }
    struct ImplDrop;
    trait Foo {}
    impl Foo for ImplDrop {}
    #[unsafe_destructor]
    impl Drop for DropMe {
        fn drop(&mut self) {
            println!("DropMe.Drop: {:?}", *self);
        }
    }
    fn main() {
        let x = DropMe:: { _x: 32 };
        println!("Dropping DropMe");
        drop(x);
        let y = DropMe:: { _x: ImplDrop };
        println!("Dropping DropMe");
        drop(y);
    }
>
>     unnamed.rs:15:5: 17:6 error: failed to find an implementation of trait
> Foo for int
>     unnamed.rs:15     fn drop(&mut self) {
>     unnamed.rs:16         println!("DropMe.Drop: {:?}", *self);
>     unnamed.rs:17     }
>  
And of course if you add an `impl Drop for DropMe` then it complains
about duplicate implementations.