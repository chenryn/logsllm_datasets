title:ELAR: extremely lightweight auditing and repairing for cloud security
author:Tran Phuong Thao and
Kazumasa Omote
ELAR: Extremely Lightweight Auditing and Repairing for
Cloud Security
Tran Phuong Thao
KDDI R&D Laboratories
2-1-15 Ohara, Fujimino, Saitama, Japan
356-0003
PI:EMAIL
Kazumasa Omote
University of Tsukuba
1-1-1, Tennodai, Tsukuba, Japan
PI:EMAIL
305-8573
ABSTRACT
Cloud storage has been gaining in popularity as an on-line
service for archiving, backup, and even primary storage of
ﬁles. However, due to the data outsourcing, cloud stor-
age also introduces new security challenges, which require a
data audit and data repair service to ensure data availability
and data integrity in the cloud. In this paper, we present
the design and implementation of a network-coding-based
Proof Of Retrievability scheme called ELAR, which achieves
a lightweight data auditing and data repairing. In particu-
lar, we support direct repair mechanism in which the client
can be free from the data repair process. Simultaneously,
we also support the task of allowing a third party auditor
(T PA), on behalf of the client, to verify the availability and
integrity of the data stored in the cloud servers without the
need of an asymmetric-key setting. The client is thus also
free from the data audit process. T PA uses spot-checking
which is a very eﬃcient probabilistic method for checking a
large amount of data. Extensive security and performance
analysis show that the proposed scheme is highly eﬃcient
and provably secure.
CCS Concepts
•Security and privacy → Cryptography; Information-
theoretic techniques;
Keywords
Cloud Storage Security, Proof Of Retrievability (POR), Net-
work Coding, Message Authentication Code (MAC), Homo-
morphic MAC, Data Availability, Data Integrity
1.
INTRODUCTION
Since amount of data is increasing exponentially, data
storage and management become increasingly troublesome
tasks for data owners. To reduce the burdens for data own-
ers, the concept of remote storage known as cloud has been
proposed. A cloud is considered as a service through which
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC ’16, December 05-09, 2016, Los Angeles, CA, USA
c⃝ 2016 ACM. ISBN 978-1-4503-4771-6/16/12. . . $15.00
DOI: http://dx.doi.org/10.1145/2991079.2991082
clients can use to publish, access, manage and share their
data remotely and easily from anywhere via the Internet.
However, the shortcoming of this system is that, a cloud
storage provider could be untrustworthy. A cloud system
thus introduces three security challenges: availability, in-
tegrity and conﬁdentiality. Availability requires that the
data must be always retrievable even if some servers are
corrupted or out of service. Integrity requires that the data
must not be changed by the servers. Conﬁdentiality requires
that the data must not be disclosed to the cloud servers.
Since availability and integrity are the preconditions of the
existence of a system, they are more important than conﬁ-
dentiality. We thus focus on availability and integrity in this
paper.
Data Repair in Cloud Storage.
During the system lifetime, a server may be corrupted by
attacks or by accidents such as power outages or natural
disasters such as ﬁre. To repair corrupted data stored in
the server, the following techniques can be commonly used:
replication, erasure coding and network coding. Replication,
proposed in [1], allows the client to store a ﬁle replica on
each server. The client can perform periodic server checks.
When a corruption is detected, the client uses the replica
stored in one of the healthy servers to repair the data stored
in the corrupted server. The drawback of this technique,
however, is high storage cost because the client must redun-
dantly store a whole ﬁle copy on each server. Therefore,
erasure coding has been applied in distributed storage sys-
tems [2, 3] for optimal data redundancy. Instead of storing
ﬁle replicas in the servers as the replication, in this tech-
nique, the client stores ﬁle blocks (parts of the ﬁle) in each
server. Thus, erasure coding can reduce the storage cost of
replication. However, the drawback of this technique is that,
to repair a corrupted server, the client must reconstruct the
original ﬁle before repairing the corruption. Therefore, the
computation cost is increased during data repair. Network
coding was ﬁrstly proposed in network scenario [4–6]. To
address the drawback of erasure coding, network coding has
been applied for distributed storage systems [7,8] to improve
the eﬃciency in data repair. The client does not need to re-
construct the entire ﬁle before generating new coded blocks
as erasure coding. Instead, the client uses the coded blocks
which are collected from the healthy servers in order to gen-
erate new coded blocks. Therefore, in this paper, we focus
on network coding due to its eﬃciency.
Data Audit in Cloud Storage.
40
In order to check whether the data stored in the servers is
available and intact, the concepts of Provable Data Posses-
sion (PDP) [9,10] and Proof Of Retrievability (POR) [11–13]
are proposed. A POR audit guarantees that the server main-
tains knowledge of all of the client data, while a PDP audit
only ensures that the server is storing most of the client
data. Thus, POR is considered as a stronger protocol [14,
15]. Based on POR, research community has strived to ﬁnd
many auditing schemes [16–21]. However, these schemes
do not support data repair when an error occurs. Then,
erasure-coding-based POR schemes have been proposed [2,
3,22,23] to deal with not only data audit but also data repair.
Thereafter, since network coding has gained popularity due
to its eﬃciency and simplicity, network-coding-based POR
schemes have been proposed, e.g., [24–26] (using symmetric-
key setting) or [27–29] (using asymmetric-key setting). The
two papers [7, 8] mentioned in the previous paragraph only
focus on data repair not data audit. Because it is well-
known that a symmetric-key setting is more eﬃcient than
an asymmetric-key setting, we focus on a symmetric-key set-
ting in this paper.
Problem Statement.
As discussed above, we focus on network-coding-based PORs
in a symmetric-key setting. Only [24–26] schemes satisfy this
our scope. However, in these schemes, the client still incurs
high computation cost for data audit and data repair. Con-
cretely, in [24], the client must check the servers periodically.
When a corrupted server is detected, the client must require
the healthy servers to send their aggregated coded blocks
and aggregated MAC tags back to the client. The client
then checks the provided coded blocks using the tags, and
computes new coded blocks and new tags to replace the cor-
ruption. The client sends these new coded blocks and tags to
the new server. Such a repair mechanism (we call indirect re-
pair ) is a troublesome task for the client. Because data audit
and data repair are executed very often during the system
lifetime, the client thus incurs high computation and com-
munication costs. Therefore, [25] is proposed to overcome
these drawbacks. In this paper, the client delegates periodic
server checks to a Third Party Auditor (T PA) in order to
reduce the burden in data audit. Furthermore, when a cor-
rupted server is detected, this paper supports a new repair
mechanism to save the computation cost for the client and
the communication cost between the client and the server.
That is, the client instructs the healthy servers to send ap-
propriate coded blocks to the new server. The new server
then linearly combines them, according to the client instruc-
tion, to construct its own coded blocks. Although [25] is bet-
ter than [24], its repair mechanism is still not eﬃcient due to
4 reasons: (1) In order to help the healthy servers in comput-
ing aggregated blocks, the client must send the coeﬃcients to
healthy servers, (2) In order to help the new server to gener-
ate a new coded blocks, the client must send the new repair
coeﬃcients to the new server, and (3) The new server can
only compute coded blocks/tags for itself but cannot check
whether the provided coded blocks/tags are valid or not, and
(4) The client must ﬁnally send the coding coeﬃcients used
in (2) to T PA so that T PA can check the new server later.
We call this repair mechanism as uncompleted-direct-repair
because the client must also join in the repair process with-
out being free completely. Thereafter, [26] was proposed
to completely address all above drawbacks. In this scheme,
the client does nothing in both data audit and data repair.
We call the repair mechanism in this paper as direct-repair.
However, [26] still has the following 2 shortcomings. Firstly,
its POR has a restricted challenge-response. That is, T PA
does not generate challenges to send to the servers, and the
servers are assumed to compute their responses without any
challenges. Therefore, the security level is reduced because
the responses from the servers (provers) are independent on
the challenges from the T PA (veriﬁer). Secondly, the T PA
must check all coded blocks in each server; however, for a
large amount of data, checking all positions is not an eﬃcient
way. Instead, a spot-checking, which is a more lightweight
probabilistic method allowing to detect with high probabil-
In spot-checking, the T PA does not
ity, should be used.
need to check all coded blocks but randomly samples a num-
ber of coded blocks. The server then provides a proof based
on the sampled coded blocks and the corresponding veriﬁ-
cation metadata. Besides the three schemes ([24–26]) which
are in our scope, we are also interested in the paper [30]
which can deal with direct repair. Unfortunately, this paper
is based on replication, not network coding.
Contribution.
In this paper, we propose a lightweight data audit and
data repair network-coding-based POR scheme in a symmetric-
key setting called ELAR. Our scheme can simultaneously
deal with the following contributions:
• Direct-repairing: When a server is corrupted, the healthy
servers will provide their coded blocks and tags directly
to the new server without sending them back to the
client. Then, the new server can check the provided
coded blocks, and can compute the new coded blocks
and tags for itself. The client is thus free of the burden
of the repair process.
• Public auditing: A T PA is employed to check the
servers periodically on behalf of the client without learn-
ing any information about the client’s secret key. Thus,
the client is free of the burden of checking the servers.
• ELAR follows the proper challenge-response of a POR
unlike [26],which only support a restricted challenge-
response. That is, during the check phase, T PA al-
ways generates a challenge and the server being checked
computes a response which must be dependent on the
challenge. ELAR is thus stronger than [26] because all
the responses are constrained by the challenges. In ad-
dition, to enhance eﬃciency during data audit, T PA
only needs to check a number of random coded blocks
stored in a server, but still probabilistically guarantee
to detect corruptions.
• Besides the complexity analysis, we implemented ELAR
carefully with all parameter choices to show all possi-
ble results which may occur. We then recommend how
parameters should be chosen to obtain the best result.
The implementation result show that ELAR is very ef-
ﬁcient and applicable to a real system.
Our contributions are summarized in Table 1. Our concrete
costs and implementation results will be described later in
Section 6.
41
Table 1: Comparison with Previous Network-coding-based Schemes
Symmetric-key Spot-checking Direct-repairing Public auditing
challenge-response
setting
!
!
!
!
!
!
×
!
×
×
!
!
×
!
!
!
!
!
!
restricted
coded blocks in the servers (denoted by S1,··· ,Sn where
n denotes the number of servers) in a way that C can re-
construct F and can repair the coded blocks in a corrupted
server. Network coding in cloud storage is described as fol-
lows:
C ﬁrstly divides F into m blocks: F = v1||···||vm. vk ∈
q where k ∈ [1, m] and Fz
Fz
q denotes a z-dimensional ﬁnite
ﬁeld of a prime order q. C then augments vk with a vector
of length m which contains a single ‘1’ in the position k and
(m − 1) single ‘0’s elsewhere. The resulting block is called
augmented block (says, wk), and has the following form:
wk = (vk,
0,··· , 0, 1
m
(
&’
, 0,··· , 0) ∈ Fz+m
&
q
C randomly chooses m coeﬃcients α1,··· ,α m in Fq. C com-
putes coded blocks using linear combinations as follows:
%
’
k
(%
m)k=1
(1)
(2)
c =
αk · wk ∈ Fz+m
q
C distributes these coded blocks to S1,··· ,Sn. To recon-
struct F , any m coded blocks are required to solve m aug-
mented blocks w1,··· , wm using the accumulated coeﬃcients
contained in the last m coordinates of each coded block. Af-
ter w1,··· , wm are solved, C can obtain v1,··· , vm from the
ﬁrst coordinate of each augmented block. Finally, F is re-
covered as F = v1||···||vm. F can be recoverable if the
matrix consisting of coeﬃcients which are used to construct
any m coded blocks has full rank (i.e., rank m). As proved
in [6] by Koetter et al., if C chooses prime q large enough
and chooses the coeﬃcients randomly, the matrix has full
rank with a high probability. When a server Si is corrupted
(i ∈ [1, n]), C repairs coded blocks stored in Si by retrieving
coded blocks from other healthy servers and linearly com-
bining them to regenerate new coded blocks. An example of
data repair is given in Figure 1.
2.3 Homomorphic MAC