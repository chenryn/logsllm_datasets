前面分享了《一些BAT的XSS实例（一）
基础篇》、《一些BAT的XSS实例（二）进阶篇》和《一些BAT的XSS实例（三）中级篇》，主要详细的讲了下1~5题以及7~8题的思路，错过的朋友可以点击上面链接，去查看相应的文章，下面我们来看下其他的题。
背 景
我选了些N年前的BAT的XSS实例来聊聊构造和绕过思路。（这些实例，都是已经公开并且修补完毕的，这里只是以此为原型，并做了一定的修改，进行了一些XSS题目的设计而已。）  
先一次性把16道题发出来（弹框1就算成功，大部分的题都是一题多解，尽量给出多种思路，或者最短的解法。）  
（其他题目，将xsstest1依次改为xsstest2~xsstest16即可获取）  
有兴趣的朋友，可以先不看文章，自己尝试的做一做题目，有答案的话可以发到我的邮箱PI:EMAIL
并附上自己的ID，说不定下篇文章里面就会有你的绕过思路被收录。
正 文
◇ 1 先看看第九题  
看到源码如下图，通过源码变量命名，猜的得到了参数为px，然后看到源码如下
和第八题比较像，测试发现区别貌似就是，这里对双引号的过滤方式进行了改变，而且对2处html位置的输出点都做了html编码，并且同步限制了长度。所以想用第八题的方法直接写入标签，基本上是不可能的了。由于这里的特殊字符大多数都被反斜杠转义了，所以注释也就用不了了，想用第四题的方法也就不行了。那么这个应该怎么去解呢？
通过上面的分析可以发现，想要直接在js或者html中构造都是不太可能的，所以还是要用到前面提到的``的这个特性，来跳出script标签的限制。这点其实和第七题还是蛮像的，但是第七题是js中一处输出，html中一处输出，这个题两个位置都是2个输出，而且是属于同步的输出。所以看着差不多，但是在构造难度上，确是有着几何倍数的差别。  
前面友情提示过：后面的逻辑相对较复杂，在解第九题的时候，建议安装个Visual Studio Code方便调试。  
首先看到2处js输出点，我们肯定是先按照第四题的思路去试试
    http://px1624.sinaapp.com/test/xsstest9/?px=1\%27-`222
大概就是上面这个思路，用模板字符串，然后去变形下，如下。
    http://px1624.sinaapp.com/test/xsstest9/?px=1\%27-`;alert(1)//
如上图可以看到，直接这样肯定是不行的，因为注释符号的/被转义了，所以最后面的单引号肯定是处理不掉的，所以还是要先跳出script标签。这个我们前面讲过方法，利用``
的解析特性，可以成功调处script标签的限制，所以我们先试着像下面这样，去构造调试下。
    http://px1624.sinaapp.com/test/xsstest9/?px=1\%27-`222%3C!--%3Cscript%20%3E
这样直接去看源码，是很不明显的，所以我们将代码放到Visual Studio Code编辑器（简称vscode）里面进行调试和说明，后面的操作都会如此进行。
可以看到这样构造了的话，由于是同步输出，又不能直接去进行代码注释，所以上图箭头所指的这个位置还是会出问题。后面的部分没法处理，导致语法出错，那么怎么解决这个问题呢？我们尝试下再去构造一个模版字符串，然后去进行连接闭合下。这里直接给出构造payload的源码链接，如下：
    view-source:http://px1624.sinaapp.com/test/xsstest9/?px=1\%27-`222%3C!--%3Cscript%20%3E`-`aa
然后测试后发现，貌似并没有起到什么作用，还是会出现一样的问题，上图箭头的这个位置的语法还是会出错。这么看这个思路构造的话，无论如何都会出现这个问题，所以必须进行一个嵌套。那么如何进行模板字符串的嵌套呢，一般对字符串的嵌套都是内部的符号用了转义或者编码，但是这里明显这个思路是不行的，所以这里其实是需要用到js中的嵌套模板写法。
这个知识点，由于篇幅问题，这里就不再做详细的说明了，具体资料可以参考这里，对嵌套模板做了详细的解释说明。  
所以我们想到去这么去构造
    view-source:http://px1624.sinaapp.com/test/xsstest9/?px=1\%27-`222%3C!--%3Cscript%20%3E`-`aa${`44`}`
当然这么写肯定是不行的，这样连第一行的那个最后面单引号的限制都过不了。  
所以要把后面的这部分内容拆开写，从而去完成语法上的闭合，经过调试，发现把大括号放到下面这个位置比较合适。
    view-source:http://px1624.sinaapp.com/test/xsstest9/?px=1\%27-`}222%3C!--%3Cscript%20%3E`-`${`4
看样子貌似已经成功了，只需要在上图所指的这个`` 和 } 之间写入alert`
再把后面部分注释掉就搞定了啊，但是测试发现，这个位置根本就不能写入任何内容，因为会破坏上面模版的语法结构，而导致出错。  
所以这个构造思路看来是行不通的，所以重新回到这一步，重新考虑构造思路。
    view-source:http://px1624.sinaapp.com/test/xsstest9/?px=1\%27-`222%3C!--%3Cscript%20%3E`-`aa${`44`}`
这里考虑到大括号同步闭合的问题，我们写入的部分也必须有大括号，不然就会出现上面的那个情况，最终的构造点不能写东西。那么就想到了function(){} 和
if(){} 以及 {a:1} 这几种，从3者的构造灵活度上来看，无疑第三种的这个对象是最合适的，所以我们这里用对象进行构造
    view-source:http://px1624.sinaapp.com/test/xsstest9/?px=1\%27-`222%3C!--%3Cscript%20%3E`-{a:`aa${`44`}`}
当然这么写肯定也是不行的，原因前面提过，这里需要拆开写去闭合，经过调试，发现把大括号放到下面这个位置比较合适。
    view-source:http://px1624.sinaapp.com/test/xsstest9/?px=1\%27-`222%3C!--%3Cscript%20%3E4}`}-{a:`aa${`4
但是这样构造后会发现，后面部分的js语法虽然没问题了，前面这里又多出来了一个大括号 }
出来，所以我们再去把这个大括号的问题解决掉，但是同时又要保证不会破坏现有的构造结构和思路。所以我们继续用对象，给这里的外层再加个大括号，也就是以对象的方式去构造下。对象前面部分的大括号
{ 导致的同步输出问题，我们可以不用去管，因为这部分会被放在后面的模版里面，不会影响。
    view-source:http://px1624.sinaapp.com/test/xsstest9/?px=1\%27-{a:`222%3C!--%3Cscript%20%3E4}`}-{a:`aa${`4
到这里，js部分的两处输出的语法已经没问题了，但是发现后面html部分的2个输出点位置，由于长度限制的问题，语法还是会出问题。所以这里删除掉那些无用的，用来调试的字符，形成了如下的情况
    view-source:http://px1624.sinaapp.com/test/xsstest9/?px=\%27-{a:`%3C!--%3Cscript%20%3E}`}-{a:`${`
然后发现还是不行，script这部分占了太多长度的内容了，所以第一想法就是把``  
这部分整体放到后面去。
    view-source:http://px1624.sinaapp.com/test/xsstest9/?px=\%27-{a:`}`}-{a:`${`%3C!--%3Cscript%20%3E
到这一步貌似已经搞定了，只需要把后面注释掉，语法正确就OK了，所以我们想办法去往里面放个alert(1)进去。  
第一反应肯定是想着加到运算符位置，但是这样是肯定不行的，因为 / 被转义了，所以上面js部分的语法会直接错误。如下
    view-source:http://px1624.sinaapp.com/test/xsstest9/?px=\%27-{a:`}`}-alert(1)//{a:`${`%3C!--%3Cscript%20%3E
而且最后面的alert(1)后面由于长度限制问题，注释符也会被干掉一个 /
而导致注释失败，所以这样肯定是不行的，这时候我们要巧妙的去利用这个长度限制。让长度限制去把后面的那层 `} 干掉。
如上图情况，把后面的部分干掉后，这样的语意就会发生了变化，大括号对应的闭合也会进行重新的对应。按照这个思路，所以这个alert(1)应该写到下面的这个位置。
    view-source:http://px1624.sinaapp.com/test/xsstest9/?px=\%27-{a:`}-alert(1)//`}-{a:`${`%3C!--%3Cscript%20%3E