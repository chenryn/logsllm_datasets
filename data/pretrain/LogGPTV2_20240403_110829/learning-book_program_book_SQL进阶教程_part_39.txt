1 :=. fx,fx
2 :=fx,f/x)
3 = fx,f(f(fx)
冯·诺依曼等人活跃在十九世纪末至二十世纪初，那时抽象代数还没
有得到长足发展，因此他们并没有采用这种高度抽象的定义方式，而是采
用了在当时抽象度最高的集合来进行自然数的构建。
SQL的魔术与科学
在本节中，从使用SQL计算位次的实际操作到二十世纪初期的数学
史，我们进行了非常宽泛的讨论。是不是觉得跳跃性太强了呢？其实笔者
认为，理论和实践这种惊人的相近正是SQL和关系数据库充满魅力的地
方。在关系数据库这扇大门的背后，有着令人惊讶的广阔世界。而打开这
扇门的钥匙，当然就是我们的SQL语言。
一开始看到计算位次的查询语句时，我们可能完全不知道它要做些什
么，觉得它像咒语一样难以理解。但是当我们深入思考一下它的理论基础
之后，就会发现它其实是某个数学体系的一部分。而这个“从魔术到科学”
的理解过程，对于系统工程师和程序员来说，才是至上的乐趣。
---
## Page 269
——第2章关系数据库的世界
人类的逻辑学
浅谈湿辑学的历史
SQL采用的三值逻辑属于非古典逻辑这一比较新的逻辑学流派。在逻辑学的发展过程中，长期占据
统治地位的是古典逻辑学。它以二值逻辑为前提，认为对于命题，我们一定能够判断真假。但在二十世
纪二十年代，逻辑学又有了革命性的发展。本节将简单介绍一下三值逻辑诞生的历史背景。
适当地抛开命题的真假吧
为了兼容wULL，关系数据库选择了允许空值（unknown）的三值逻
辑来代替标准的二值逻辑。关于这个选择过程中的一些故事，1-3节曾详
细介绍过，想必大家都已经了解了。在一般的逻辑学中，命题只包含“真”
和“假”这两个可能值。而三值逻辑除了这两个值，还增加了表示“未知”
状态的第三个值。据说但丁途经的地狱之门上写着这样的话：“进入此门者，
先抛开所有的希望吧”。那么，三值逻辑的大门上大概写着这样的话吧：“进
入此门者，先适当地抛开命题的真假吧”。
本节，我们暂时把关系数据库摘置一边，来回顾一下三值逻辑这一奇
妙的理论体系的背景，即逻辑学的发展历史，借此从不同的角度深入理解
三值逻辑体系的意义，以及为什么SQL和数据库选择了这一体系等。
历史上最早提出三值逻辑（three-valued-logic）体系的是波兰的著名
逻辑学家卢卡西维茨（Jan Lukasiewicz,1878—1956）。他和提出模型论的塔
尔斯基（Alfred Tarski,1902—1983）及列斯湿夫斯基（Stanislaw Lesniewski,
1886—1939）等著名的数学家一道，开启了战争期间波兰数学和哲学发展
的黄金时期。函数式语言中用到的波兰式写法（把“3+2”写成“+32")
也是他提出的，他的一些其他贡献直到现在仍然被广泛应用着。
在二十世纪二十年代，他定义了“真”和“假”之外的第三个逻辑值
“可能”。此前的逻辑学中，命题取“真”“假”之外的其他值，根本就是
无法想象的。当时的主流观念认为，如果命题是一种描述事实的语句，那
图灵社区会员非洲铜(PI:EMAIL)专享尊重版权
---
## Page 270
2-8人类的逻辑学—257
么当然必须是有真假的。
如果阅读过卢卡西维茨的论文，我们会发现他用来表达第三个值的分
类其实包含在Codd提出的“未知”分类里。他曾举过这样一个例子：关
于未来某个时间自己在哪里的陈述，我们现在既无法确定它为真又无法它
为假。完整的表述有点长，但是由于这段内容非常关键，所以这里就直接
引用了。
载认为，明年的某一个时间点（比如12月21日正千）我是否在华沙，
在今天这一天看来无法肯定也无法否定，这井不矛质。因此在指定的时间
点我也许在华沙这件事是可能的，但却不是必然的。进而，“明年的12月
21日正午我也许在华沙”这个合题，在今天这一天看来既不可能是真也不
可能是假。…因此，在今天这一天，这个合题的值只能是一个全新的值，
不同于表示真的数值“1"，也不同于表示假的数值“0"。我们可以用“1/2"
来表示这个值。它的含义是“可能”，它是和“真”“假”并列的第三个值。
注0
在提出命题逻辑的三值逻辑体系的背后，有着上面这些思索。·
声卡西维发, Piy/losgphia) Rnsuris
Pngpestoel ogic, 1930 年-。
on Many-Valued Systemis of
这篇论文首次提出三值逻辑，非常有纪念意义。我们接下来解释一下
其中需要特别注意的两个论点。关于第一个论点，我们从前文也可以者出，
卢卡西维茨考虑的“可能”这一真值的本质，其实是对未来不确定性的描
述，丝毫没有Codd提出的“不适用”的含义。虽然不能断言，但是笔者
认为，可能对于卢卡西维茨来说，Codd认为“不适用”的那些命题是完
全没有意义的，所以他根本不会考虑用真值来描述吧。
第二个论点突破了一个命题只能有一个固定真值的观念，开拓出了新
，是第，，回“
能”→”假”这样的变化。这是站在传统逻辑学的立场上无法想象的革命
性的（或者说是超越常识的）的思考方式。虽然卢卡西维茨自身并没有写
明其思考延伸到了这么细致的地方，但是他确实表达过相近的观点，认为
命题的作用其实不在于表达事实，而在于反映人们对这件事实的认知。按
照这个观点理解，命题其实不存在于客观世界，而存在于我们的内心。
从提出这样一个心理学式命题理论的贡献来看，逻辑学家卢卡西维茨
确实可以说是Codd的前辈，为关系数据库奠定了理论基础
---
## Page 271
258—第2章关系数据库的世界
逻辑学的革命
那么，为什么三值逻辑刚好诞生于这个时期呢？这是因为，在逻辑学
时期".除了三值逻辑，还有布劳威尔（Luitzen Egbertus Jan Brouwer）和
海廷（Arend Heyting）等人创立的直觉主义逻辑学。三值逻辑通过导入第
三个真值，从语义学的角度对二值逻辑发起了挑战：而直觉主义逻辑从语
法学的角度对二值逻辑发起了挑战。自此以推枯拉朽之势一扫十九世纪后
期以来逻辑学停滞不前的阴霾，非古典逻辑学迎来了百花齐放的春天。
古典逻辑学最受批判的理论是排中律（AV一A），以及支撑它的二
值原理。排中律是一条公理，意思是“A或者非A总有一个成立”、二值
原理的意思是“一个命题必然有真假”。虽然二值原理非常简洁，但是对
于我们人类而言，并不能那么轻易地认同它。在这个充满不确定性的世界
里，无法判断真假的命题难道不是有很多吗（例如“神是存在的”“存在
死后的世界”“杀人是罪恶的")。
一方面，古典逻辑学这样回答这个问题：“神肯定知道所有命题的真
假”。作为神，无论多难的问题都能瞬间解决，精通开天辟地以来的全部
历史。只要愿意，神还能进行时空穿梭，因为神是全能全知的。因此古典
注0
逻辑学被称为“神的逻辑学"0。
把古典逐辑学和非古典逻载学分
别称为“神的逐辑学”和“人类
另一方面，很多人认为既然“神的逻辑学”超出了人类的认知范围，
久的著作（辑学的创立)1原
的漫辑学”的说法来白户田山和
那么为什么不能存在能够忠实反映人类有限认知能力的逻辑学呢？卢卡西
书名“埋单<” 尚无
中文液]
维茨和布劳威尔是最早公开支持这种逻辑学的学者。他们将逻辑学从神的
手里移交到了人类的手里，或者说是将逻辑学从神那里解放了出来。反过
来者，在神具有极高权威的时期，人类是没有能力否定二值原理的。过去，
在西方，像逻辑学家这样的知识分子大多同时也是神学家。因此，怀疑神
的全能性这样赛渎神的行为是不允许的。而非古典逻辑学是在近代，当人
类认识到神并不存在之后才诞生的。
因此不难想象，这种近代思维方式它招来了大量来自同时期的宗教保
守人士的反对。事实上，布劳威尔身上还发生过这样的趣事：在某次演讲
会上，他说出了自己的一个观点一“在圆周率π的小数部分，9将重复
出现10次”这个命题无法判断真假。有一位听众这样反驳：“也许我们人
---
## Page 272
2-8人类的逻辑单259
类无法判断，但是神肯定知道它的真假”。讲台上的布劳威尔这样回答：“但
是，我们没有他老人家的电话号码响”。
我们人类和神中断了联系一—布劳威尔和卢卡西维茨都生活在这样
个暗淡的时期。人类和神失去了联系之后，只能以有限的认知活在有限的
世界里。既然如此，多出一种与人类有限的认知相称并且能够适当地描述
这个充满未知的世界的新的逻辑学，难道不是一件好事吗？
人类的逻辑学
意义”“当前未知”“矛盾”等反映各种认知的值。于是诞生了三值逻辑，
而且允许三个以上的真值的多值逻辑学（many-valued logic）的研究也在
注0
进行中。没有神的逻辑学一人类的逻辑学诞生了。
多值逻相非常近合用末指述人类
含糊的认知，因此关于它的一个
数据库的使用者当然是人类，而不是神。因此，数据的表达方式也应
叫作模糖逻辑的分支，人们现在
还在研究者。在模糖反辑中，真
该基于有限而且不完善的人类的认知，而不是神的完美无缺的认知。这就
恤取的不量 1和0这样的离散
慎，而是连续的实数。它其实是
是关系数据库采用三值逻辑的原因。
无限多值逻辑的一种。站在真值
但是，这种面向人类的思维方式是一把双刃剑。确实，通过采用三值
三值逐辑和四值逐辑让人更好接
已经扩溪到无限个的今天来看，
逻辑（主要是NULL和unknown），正如 Codd所说，关系数据库变得非常
受了，难道不是吗？
接近人类的认知，而且具有非常灵活的表达能力。但讽刺的是，人类又不
得不引入许多不太直观的奇怪的逻辑运算。
图灵社区会员非洲钢(PI:EMAIL）专享尊重版权
---
## Page 273
—第2章关系数据库的世界
S
2
消灭NULL委员会
全世界的数据库工程师团结起来！
1-3节介绍了SQL中的三值逻辑的理论背景；2-8节又介绍了它的历史背景。本节将在此基础上讨
论一下如何在实际工作中处理NULL，并给出一些指南。
~告全体数据库工程师书~
成千上万的数据工程师们，你们好。笔者是消灭NULL委员会亚洲分
委会会长MICK。笔者知道，大家每天都在忙着搭建数据库、写SQL语句、
优化查询性能，以及帮不小心删除数据库表的新人擦屁股，斗志昂扬地支
撑着研发团队的运作。笔者今天写这封通告的目的是，让大家彻底了解昨
天在美国总部全员通过的消灭NULL基本宣言。
我们先来看一下NULL这个怪物最可怕的地方：一开始会让我们觉得
很好用，于是在设计系统时，我们会非常自然地保留它，但当注意到间题
的时候，系统已经变得非常复杂、低效、不符合预期了，开发和维护也变
得非常困难。为了避免NULL带来的问题，我们首先必须了解它的本质，
理解它是如何在我们不经意间迅速地给系统带来问题的。其实笔者已经想
到了一句能彻底揭示这个怪物的真面目的话。
本节将从NULL的间题讲起，主要介绍一些避免问题的具体方法。不
过这些方法执行起来非常简单，只需在设计的时候稍微注意一下就行，因
此这里不作详细讲解。本节将揭示这些方法，当然笔者也希望大家都加入
到消灭NULL的运动中来。
为什么NULL如此惹人讨厌
NULL惹人讨厌的原因，一般来说有以下5个。
1.在进行SQL编码时，必须考虑违反人类直觉的三值逻辑。
2.在指定ISNULL、ISNOT NULL的时候，不会用到索引I，因面
---
## Page 274
2-9消灭NULL委员会—261
SQL语句执行起来性能低下。
3.如果四则运算以及SQL函数的参数中包含NULL，会引起“NULL
的传播”。
4.在接收SQL查询结果的宿主语言中，NULL的处理方法没有统一标准。
5.与一般列的值不同，NULL是通过在数据行的某处加上多余的位
（bit）来实现的。因此NULL会使程序占据更多的存储空间，使得
检索性能变差。
第1个原因是笔者认为必须消除NULL的最重要的原因，1-3节已经讨
论过，这里就不再赞述了（笔者时不时就会听说有这样一群家伙：他们一
边肆意地使用NULL，一边又盲目地相信SQL是遵从二值逻辑的。我们必
须要尽快改变他们的错误想法）。第2个原因是优化性能方面必须要注意
的，这一点很多人都知道。对于第3个原因，我们来稍微解释一下。例如，
如果四则运算中包含NULL，那么运算结果也肯定都是NULL。
1 + NULL = NULL
2 -ULL=NULL
3 * NULL = NULL
4/NULL=BULL
NULL / 0 = BULL
从最后一个例子可以看出，就连除数为0的时候都不会出错。有很多
（NULL's propagate）。Propagate有“（杂草）丛生”的意思，一般作为贬
义词来使用，刚好适合形容NULL这个可恶的家伙。
关于第4个原因和第5个原因，是不是很少人知道呢？说实话，这两
个间题依赖于宿主语言和DBMS的实现方式，将来被解决掉的可能性很大。
但是，现在的宿主语言很多都不支持关系模型中的NULL，因此这两个仍
然是比较大的间题。既然 Oracle 不区分空字符串和 NULL，而Visual Basic
是区分的，那么我们就有足够的理由来消除NULL。
并不能完全消除NULL
分会长，也就是笔者的这句话让大家又感到疑惑了吧？其实在关系数
据库的世界里，NULL是很难完全消除掉的。此外，对于不那么重要的列，
即使存在NULL，在工作中系统工程师们也会忽视掉吧？
---
## Page 275
262—第2章关系数据库的世界
无法完全消除NULL的原因是它扎根于关系数据库的底层中。仅仅靠
在表中所有列加上NOT NULL的约束是不够的。因为即使这样做，在使用
外连接，或者 SQL-99 中添加I的带 CUBE或 ROLLUP 的 GROUP BY 时，还是很
实际上，如果合理利用，NULL还是有很多非常方便的用途的。但间题是，“合
理使用"NULL正是最困难的地方。NULL最恐怖的地方就在于即使你认为自
已已经完全驾驭它了，但还是一不小心就会被它在背后捅一刀。
正因为如此，一直以来NULL都是有识之士们争相议论的话题。Codd
坚持认为NULL是关系模型中不可或缺的要素。他的盟友，也是当前关系
数据库领域的领军人物CJ.Date却是消除NULL运动的超级积极分子，大
程度可以从下面的短文中清楚地感受到。
重要的是，如果存在nul1，那么我们讨论的就不是关系模型了（我也
不知道我们正在讨论的是什么，反正不是关系模型）nul1出现之后，之
注0
前已经构建好的体系立刻就崩塌了，一切就都回到了一张白纸的状态。·
Dataase  Depcn: Reatoner
Fheoy fpr Ractft:forers, 0′’Re1ly
Med lo, 2006
从个人心情上来讲，笔者很想成为CJDate的伙伴，加入激进派的
阵营。但是，作为一线的数据库工程师，笔者感觉还是Joe Celko的处理
方式更为稳妥。因此我们亚洲分委会决定将下面这段JoeCelko的话作为
我们的官方指南。
我们可以把NULL视为一种药品：适当使用可能有益，但溢用会导致毁灭。
注
最好的策略是尽可能地避免适用NIL，并在不得不使用时适当使用。·
指白 (S0L 双威指南 ( 第 4 涨 1)
1 人民都电出版社, 2012 年 x
请不要以为这是一种机会主义，毕竞人生的真理绝不存在于追求极端
纯粹的激进主张里。这是必须向现实妥协的地方。
那么，接下来我们分儿个场景来讨论一下消除NUL的具体做法
编号：使用异常编号
大家使用的数据库表中一定存储了各种各样的编号。例如，企业编号、
赖客编号、行政区划编号、性别编号，等等。像性别这样史多地被称作“标志
---
## Page 276
2-9消灭NULL委员会—263
的属性，我们也可以从广义上把它看成一种编号。标志这类编号通常只用来
表示两个值。像这类编号，一般都用于表中重要的列，很多时候会作为搜
索和连接的列来使用。因此，我们当然要把它作为消除NLL的首要目标。
解决方法很简单，分配异常编号就行了，例如ISO的性别编号中，除
常情况的编号。编号9可用于法人的情况。这真是一种很棒的解决方案，
注0
关于这个分类方法, 请鲁考 1-3 节。
并不是所有的情况都必须预留这两个编号，很多时候，有一个就足够
使用了，例如当必须往数据库中插入编号未知的顾客信息时，定义一个表
示未知的编号“XXXXX”就可以了。需要说明的是，请尽量避免使用
“99999”这样的编号作为异常编号。因为当编号个数很多的时候，使用数
字的话，有可能会出现用来表示异常的编号和真实的顾客编号重复的情况。
因此，编号列应该使用字符申类型。笔者偶尔会看到一些将编号列定义为
注9
数值型的表，这令笔者感到很难过。
编号列使用字特审类型的好处还
第一个是，很多时候编号的位数
有两个。
是固定的。因此前几位可能需要
名字：使用“无名氏”
补零。例如3位的编号可能会出
规 008,012。如果是数值型,那
大家使用的数据库表中一定存储了数量不亚于编号的各种各样的名
公前真的 0 会被忽路掉, 从药变