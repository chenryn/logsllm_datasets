of circuits that we will observe roughly correlates with the
amount of bandwidth that we contribute. Note that it is quite
affordable to run Tor relays in dedicated servers or as virtual
instances on the various low-cost cloud platforms available.
Furthermore, we only require local visibility of the network
because we can only observe circuits from clients that pick
our relays and cannot observe other activity. Figure 2 depicts
the position of the relay from which we perform the website
ﬁngerprinting that is the focus of this paper.
We desire to be able to utilize the machine learning
techniques we propose on common desktop hardware. This
means that along with the ability to collect data (described
in more detail in Section VI-D), we can also perform the
pre-processing and data cleansing, the training, and ﬁnally
the classiﬁcation tasks all on hardware commonly found on
desktop computers of today.
B. Ethical Considerations
We have contacted the Tor Research Safety Board2 for
advice on the ethical implications of this research and have
followed their recommendations. We also contacted the SNS
that we have taken as use case for this study for responsible
disclosure but did not receive any response from them. Since
we investigate a number of settings with varying levels of
risk for real users, we provide additional details about ethical
research throughout the paper.
IV. ADVANTAGES OF THE MIDDLE OF THE PATH
In this section, we discuss the beneﬁts of running middle
relays to analyze onion service trafﬁc as compared to relays
that are at the ingress and egress points of the network.
A. Exit
Exit relays make connections outside of the Tor network,
and an exit relay will never be chosen by Tor’s default path
selection algorithm in non-exit positions or in onion service
positions due to exit relay bandwidth scarcity. An exit relay
will thus not be useful for our purposes, given that it will not
route any onion-service visit.
B. Guard
Each client chooses a relay from the set of all relays with
the guard ﬂag and uses it as its ﬁrst hop entry into the Tor
network for all circuits it builds. A guard relay may serve
in both the ﬁrst-hop guard position and in the middle relay
positions, and its bandwidth is split among these two positions.
In order to be eligible to serve as a guard, a relay is required
to be stable and have high up-time relative to other relays.
Additionally, a guard relay will not be fully utilized when it
ﬁrst becomes a guard, because clients only drop their current
guard and rotate to new ones after two to three months (there
exists a proposal to increase this time to nine months [7]). As
a result, it will take several months to reach steady state, and
during that time the relay will observe less trafﬁc than in other
positions. A guard will observe many circuits, including onion
service circuits, from a smaller slowly churning set of clients.
C. Middle
A middle relay can be used for any circuit, and may
potentially observe the trafﬁc of any Tor user in the network,
given that enough circuits are made over time. This is in
contrast to guard relays that can only observe the trafﬁc of
users that have picked them as their ﬁrst hop.
We are particularly interested in regularly visited onion
services. The following equation shows that the probability of
a particular middle relay observing a client’s circuit increases
as the client builds more and more circuits over time, where
l is the likelihood of picking that middle for a single circuit
and c is the number of circuits that the client has made so far.
P (observed) = 1 − (1 − l)c
We investigate how the frequency of visits to an onion site,
t where f is the fraction of the number of visits c in a
f = c
given unit of time t, affects the probability of being observed
by a middle relay. Let’s assume that a user visits onion services
just once every unit of time, for instance once per day. From
the line labeled f = 1 in the left plot of Figure 3 we see
that this client will have an almost 80% chance of making at
2https://research.torproject.org/safetyboard.html
4
1
0.5
)
d
e
v
r
e
s
b
o
(
P
f = 10
f = 3
f = 10, guard
f = 1
f = 10
f = 3
f = 10, guard
f = 1
1
0.5
)
d
e
v
r
e
s
b
o
(
P
101 102 103 104 105
Time (t)
101
102
103
104
Time (t)
Fig. 3. Probability of a client making a circuit using a malicious node with
0.16% (2 MB/s) and 1.6% (20 MB/s), left and right plots respectively, of the
middle bandwidth. Plots are shown for various frequencies of visit within a
ﬁxed time interval.
least one circuit through the malicious middle relay after 1,000
days, or two years and nine months. In contrast, a user that
visits onion services ten times per day has the same chances in
just a little over three months. As point of reference a similarly
provisioned guard relay, shown as the rightmost line labeled
f = 10, guard, reaches similar levels of probability only after
two orders of magnitude of time later, 10,000 days.
This time may be shortened, for instance, by operating ten
identical relays—which is not an onerous burden on resources
nor difﬁcult to practically achieve—and then there is an 80%
chance that a user who connects to an onion service once per
day would take about 100 days and a user that connects ten
times per day will now only take about 10 days to create at
least one circuit through our middle relay (see lines labeled
f = 1 and f = 10 in the right plot of Figure 3). As reference,
a similarly provisioned guard in this setting, the rightmost line
labeled f = 10, guard, has the same probability of observing
that client only after two orders of magnitude later, 1,000 days.
The preceding illustrates that middle nodes can enumerate
more clients in a shorter time frame. We want to clarify that
both the guard relay and middle relay observe the same number
of circuits, but a different set of clients. The guard relay will
only observe circuits from a somewhat static subset of Tor
clients, but the guard observes all circuits from that subset.
In contrast, the middle relay will observe circuits from the
set of all clients but only some of the circuits built by those
clients (in the same time frame). However, when dealing with a
frequently visiting user, the middle relay will be able to obtain
a representative sample of these accesses, which provides it
qualitatively the same information as the guard. In this way
middles have a better overview of the entire onion service and
Tor userbase activity, albeit sampled at a known rate.
V. CIRCUIT PURPOSE AND POSITION FINGERPRINTING
We have argued that the middle relay position is advan-
tageous for obtaining a statistical sampling of client activities
across the Tor network. In this section, we show how machine
learning classiﬁcation techniques can be used by the middle
relay to determine which middle position and which circuit
purpose (i.e., onion service or general) it is serving, enabling
it further analyze only circuits that carry onion service trafﬁc.
A. Methodology
There are multiple middle onion service circuit positions
in which a middle relay could serve, and a middle relay will
also serve in non-onion service, general purpose circuits (see
Figure 1). To understand how a middle relay can detect its
position in a circuit and the circuit purpose, we ﬁrst generate a
large data set of circuits that were built using Tor. We modiﬁed
a Tor middle relay3 to log messages containing the information
necessary to perform the classiﬁcation, and we incorporated
a new signaling mechanism that enables the client to send
ground truth to the relay for evaluation purposes. We run our
modiﬁed Tor code under simulation in Shadow [18] as well
as on the live Tor network. For the latter, we need to be sure
that we do not capture any information from circuits that are
not under our control in order to protect real Tor users.
1) Circuit Signaling: In order to perform classiﬁcation, our
middle relay requires timing and ﬂow information from Tor
circuits. A middle relay and client under our control will not be
directly connected, however, and therefore we need a signaling
mechanism with which our client can identify to our middle
relay the circuits that we control and that are safe to analyze.
We added a new signaling cell to the Tor protocol and a
mechanism to allow the client to pin a relay as its R-C-M1
middle on all circuits. The signaling cell is inserted by our Tor
client into new circuits that it creates through our middle. The
new cell is encrypted for and sent to our middle relay through
the Tor circuit, and no other relay in the circuit can read it.
The new cell identiﬁes to our middle relay that the circuit on
which the cell is sent should be labeled as our own circuit
and therefore that it is safe to start tracing the circuit. The
signal cell may include an optional payload so that the client
can send ground truth information about the circuit (i.e., the
purpose and position of the relay), stream, and HTTP request
(i.e., the URL being fetched) to our middle relay.
2) Tracing Trafﬁc Patterns at the Middle Relay: Once our
middle relay has identiﬁed that a circuit is initiated at our
client, it begins collecting information about the circuit and
the cells transferred through it. This information is exported
through the Tor control protocol, which provides a well-deﬁned
interface [1] for other applications to request and consume
information about Tor (including information associated with
periodic events). For every circuit on which we receive a signal
from our client, the middle relay exports a unique circuit ID,
circuit creation time, as well as the IP address, ﬁngerprint, and
relay ﬂags of the previous and next hop relays. It also begins
logging information about each cell it sends and receives on
that circuit: it logs the direction of the cell (outbound or
inbound), how the cell was transferred (sent or received), the
time the cell was transferred, the unique ID of the circuit to
which the cell belongs, and the cell type and command (which
are used to instruct relays to, e.g., create, extend, and destroy
circuits or relay trafﬁc).
of RAM. We didn’t believe it was necessary to run a full-
scale Tor network because the features used by our purpose
and position classiﬁers are not sensitive to network congestion
or scale (we dont use any time-based features). Running
smaller networks means we can more effectively parallelize
our experiments, sample more initial random seeds, and more
quickly obtain results. Therefore, we generated a small private
Tor network conﬁguration with 50 relays, 128 web clients,
42 bulk clients, and 100 servers. We ran 83 experiments with
distinct seeds for one simulated hour each (83 simulated hours
in total) on a machine with a total of 40 Intel Xeon 3.20GHz
CPU cores (80 hyper-threads) running the latest CentOS 7
version of Linux. We ran 4 multi-threaded experiments at a
time, and each experiment took roughly 3.5 hours to complete.
During our experiments, the clients behave as follows. The
bulk clients continuously download 5 MiB ﬁles. The web
clients request data according to an HTTP model where the
size of the ﬁrst request and response, the number of embedded
objects per page, the size per embedded object request and
response, and the number of distinct domains per page are
all sampled from the HTTP Archive.4 Web clients pause for
a time drawn uniformly from 1 to 30 seconds after each full
web page has been downloaded before starting the download
of another page. Because HTTP Archive data is constructed
by downloading real websites from the Alexa top sites list, we
believe that the number of Tor circuits that are created when
clients use this model is representative of typical Tor circuit
usage. Finally, 8 of the web clients and 2 of the bulk clients
download their data from onion services, while the remainder
of each download their data over regular 3-relay-hop circuits.
We conﬁgured one middle relay to act as a middle mea-
surement relay. We enabled the signaling mechanism described
above on each client in the network, so that our measurement
middle relay would receive ground truth circuit information
and collect cell
through it. A
signiﬁcant advantage of using Shadow is that we are able to
inspect all such circuits without risking user privacy. During
our experiments our middle measurement relay collected trac-
ing information for 1,855,617 total circuits, 813,113 of which
were onion service circuits.
traces for all circuits built
B. Feature Extraction
We extracted features from our large corpus of circuits
based on the observation that cell meta-data, such as cell type
and relay command, leaks information to a relay about its
position in the circuit and the circuit type (see Figure 4). We
also make the following observations: (i) a relay will send
a different number of cells during the circuit construction
process depending on its position in a circuit; (ii) different
relay positions may receive different cell types and relay com-
mands during circuit construction (e.g., guards and middles
will extend circuits while exits will not); (iii) relays may
or may not connect to other known relays on either side
of a circuit (iv) onion service introduction circuits transfer
much less data than rendezvous circuits used to download web
content; and (v) asymmetric web content downloads would
result in more cells traveling toward the circuit originator
on client-side rendezvous circuits but away from the circuit
originator on service-side rendezvous circuits. To incorporate
the previous observations, we use as features the counts of
3) Collecting Data with Shadow: We ran our customized
Tor software under simulation in Shadow [18] in order to
generate a large corpus of circuits suitable for analysis. Shadow
is a discrete-event network simulator that directly executes Tor,
and therefore faithfully executes all of the logic associated
with building Tor circuits. Shadow allows us to construct and
run a private Tor network, complete with directory authorities,
relays, clients, servers, and onion services, and gives us full
control over our network. We run Shadow experiments in a
private, local environment free of privacy risks to real users.
Our primary goal is to collect a large sample of circuits
from the perspective of a middle relay, which could be done
either by running many smaller experiments in parallel or
fewer larger experiments sequentially using the same amount
3We branched Tor at version 0.2.7.6
4http://httparchive.org
5
with comparable accuracy but is tuned for relays in positions
between the guards of the client and onion service. Random
forests generalize better than simple decision trees, which tend
to overﬁt the training data, thus random forests are more robust
against small differences between training and testing settings.
We followed prior work on model selection and tuning [14],
[22] and, after a search of the parameter space, we found that
30 trees for the random forest provide the highest accuracy.
We trained separate random forest classiﬁers for circuit pur-
pose and circuit position using the pyborist and sklearn
python APIs on our Shadow-generated circuit dataset and
the features we previously described. For both classiﬁers,
we assume no prior knowledge about the circuit purpose or
position, so the classiﬁers could be run independently of one
another without affecting the accuracy. To ensure that the
classiﬁer does not overﬁt to our speciﬁc dataset, we used
standard machine learning procedures such as balancing the
dataset so that each class (i.e., rendezvous vs. other purpose,
and C-M1 vs. other position) has the same number of circuits.
We used k-fold cross validation (k = 10) to measure
how well the classiﬁers generalize to unseen data. During this
process, our original circuit sample is randomly partitioned
into k equally-sized subsamples. There are k phases in total:
in each phase, a distinct subsample is used as the testing set
while the remaining k − 1 subsamples are used as the training
set. To train, we convert each circuit from the training set into
a feature set labeled with the true class (the true purpose or
position) and pass that into the classiﬁer’s training function. To
test, we convert each circuit from the testing set into a feature
set (without the ground truth class label) and pass it into the
classiﬁer’s prediction function to predict the class label. We
evaluate prediction performance by measuring true and false
positives and negatives and computing standard related metrics
such as accuracy and precision.
D. Results
The evaluation results are shown in Table I. As shown, the
accuracy for the purpose classiﬁer is over 92 percent with a
standard deviation of 0.07 and the accuracy of the position