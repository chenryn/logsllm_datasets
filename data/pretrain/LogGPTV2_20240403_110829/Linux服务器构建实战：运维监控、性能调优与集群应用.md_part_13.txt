Linux公社（www.LinuxIDC.com）是专业的Linux系统门户网站，实时发布最新Linux资讯。
IO，其实现方式是基于事件的单进程和单线程的。使用libevent作为事件通知机制，多个服
后就一直处于等待处理客户端的连接状态。Memcached是由C语言来实现的，采用的是异步
地址、端口号以及使用多少内存来处理客户端的请求等几个关键参数。服务器端的服务启动
3.2.1
3.2
初始值赋为0。因此，应当进行错误检查，必要时加入初始化操作。
存新数据，这个功能可以防止缓存数据的不完整。但是set方法忽视该阻塞，会继续保存数据。
同时取得多个键值，其速度要比循环调用get方法快很多倍。
照LRU算法保存存入的数据。但这三个方法有一些区别：
Memcached是一种C/S模式，在服务器端启动服务守护进程，此时可以指定监听的IP
加一和减一都属于原子操作，进行这两个操作时若未对键值设置初始值，则不会自动将
my $return=$memcached->incr（'）;
可以把Memcached上某一个特定的键值作为计数器使用。
4.加一和减一方法
第一个参数指定要删除的数据的键，第二个参数指定一个时间值，以禁止使用同样的键保
Smemcached->delete（键，阻塞时间（秒））；
删除数据可以使用delete方法。
3.删除数据方法
如果想一次获取多条数据，可以使用get_multi方法。利用get_multi方法可以非同步地
my$value=$memcached->get_multi（‘1，键2，‘3）;
可以使用get和get_multi方法来获取数据，使用方法如下：
2.获取数据的方法
口replace，仅当存储空间中存在key相同的数据时才保存。
add，仅当存储空间中不存在key相同的数据时才保存。
set，无论在什么情况下都保存写入的数据。
向Memcached存数据时可以指定过期时间（秒），若不指定过期时间，Memcached则按
Memcached的工作过程
剖析Memcached的工作原理
$replace
www.Linuxidc.com
=$memcached->replace（'键
过期时间：）
过期时间：1；
71
---
## Page 92
Linux公社（www.LinuxIDC.com）是专业的Linux系统门户网站，实时发布最新Linux资讯。
配给新的key/value对。在某些情况下，如果不想使用LRU算法，那么可以通过“-M”参数
Memcached就会使用LRU算法来分配空间，删除最近最少使用的key/value对，将其空间分
不会在过期检测上浪费CPU资源。
过期，而是在获取key值时查看记录的时间戳，检查key/value对空间是否过期。这种策略
能通过key取出它的值，其存储空间被重新利用。
3.2.3Memcached的删除机制
这个参数来获得合适的设置值。
署。如果想优化Memcached对内存的使用，可以考虑重新计算数据的预期平均长度，调整
异。在应用中使用Memcached时，通常可以不重新设置这个参数，使用默认值1.25进行部
费。还有一种办法是，在启动时指定“-f”参数，能在某种程度上控制内存组之间的大小差
人一个Memcached服务器中，确保存入的数据大小相对均匀，这样就可以减少对内存的浪
用。避免浪费内存的办法是，预先计算出应用存入的数据大小，或把同一业务类型的数据存
一个200字节的数据存人一个300字节的内存块中，会有100字节内存被浪费掉，不能使
据大小，分配一个能存下这个数据的最小内存块。这种方式有时会造成内存浪费，例如：将
放，可以重复利用。
分配的内存分割成特定长度的内存块，再把尺寸相同的内存块分成组，这些内存块不会释
统对内存的管理效率。SlabAllocation机制不存在这样的问题，它按照预先规定的大小，将
完通过malloc分配的内存后通过free来回收内存。这种方式容易产生内存碎片并降低操作系
3.2.2SlabAllocation的工作机制
支持各种语言编写的客户端API，目前包括Perl、PHP、Python、Ruby、Java、C#和C等。
是为缓存而设计的服务器，因此在设计之初并没有过多考虑数据的永久性问题。Memcached
且当存储的容量达到启动时设定的值时，就自动使用LRU算法删除不用的缓存。Memcached
象进行持久性存储，因此在服务器端的服务重启之后存储在内存中的这些数据就会消失。而
据放置在内存中，并不会作为文件存储在磁盘上，所以存取速度非常快。由于没有对这些对
数据都有唯一的标识符key，存取操作通过这个key进行。保存到Memcached中的对象或数
据进行管理。客户端通过指定服务器的IP地址和端口进行通信。
务器端可以协同工作，但这些服务器端之间没有任何通信关系，每个服务器端只对自己的数
72
Memcached在分配空间时，优先使用已经过期的key/value对空间，当空间占满时，
Memcached使用的是一种LazyExpiration策略，自己不会监控存入的key/value对是否
Memcached服务器端保存着一个空闲的内存块列表，当有数据存入时根据接收到的数
Memcached利用SlabAllocation机制来分配和管理内存。传统的内存管理方式是：使用
需要被缓存的对象或数据以key/value对的形式保存在服务器端，每个被缓存的对象或
上一节已经介绍过，
第
www.Linuxidc.com
，Memcached不会释放已分配的内存空间，在数据过期后，客户端不
---
## Page 93
Linux公社（www.LinuxIDC.com）是专业的Linux系统门户网站，实时发布最新Linux资讯。
发送get命令。只要数据没有因为某些原因被删除，就能获得保存的值，如图3-4所示。
法，根据“键”来选择服务器。只要使用的算法相同，就能确定存入在哪一台服务器上，然后
value对时也要将要获取的键“tokyo”传递给函数库。函数库通过与存取数据操作相同的算
服务器再保存数据。
tokyo3”的过程都是先通过客户端的算法选择
“tokyo”及其值，如图3-3所示。
服务器，选定服务器后，就命令该服务器保存
据这个“键”来决定保存数据的Memcached
传给客户端程序后，客户端实现的算法就会根
图3-2所示。
服务器，应用程序要实现保存名为“tokyo”
其工作过程。
3.2.4
来启动Memcached，这样，Memcached在内存耗尽时，会返回一个报错信息。
接下来获取保存的数据。获取保存的key/
同样，存入“tokyo1”、“tokyo2”和“
向Memcached中存人“tokyo”，将“tokyo
假设有nodel、node2、node2三台Memcached
图3-3向Memcached中存人“tokyo”
nodel
前面已经介绍过，
Memcached的分布式算法
应用程序
set('tokyo'data)
www.Linuxidc.com
Memcached的分布式是通过客户端的程序库来实现的。下面举例描述
客户端程序
图3-4向Memcached获取“tokyo”的过程
图3-2向Memcached中存入数据的初始状态
获取tokyo
nodel
第量
应用程序
get(tokyo)
应用程序
Memicacied应用实战73
法
算法
node2
node2
择与获取数
客户端程序库
node3
客户端程序库
务器
务器列表
PDG
---
## Page 94
Linux公社（www.LinuxIDC.com）是专业的Linux系统门户网站，实时发布最新Linux资讯。
量问题时减小对数据库的影响。
规模部署Memcached时，容灾和扩容一定要使用一致性散列算法，以确保在出现故障或容
地点的逆时针方向的第一台服务器上的键会受到影响，如图3-6所示。
导致所有的缓存失效。但在采用一致性散列算法时，添加服务器后，只有在圆上增加服务器
余数分布式算法的余数结果也会发生巨大变化，几乎所有的键都找不到之前存人的服务器，
仍然找不到服务器，就会将数据保存到第一台Memcached服务器上。
从数据映射到的位置开始顺时针查找，将数据保存到查找到的第一个服务器上。如果超过22
0到2的32次方的圆上，然后用同样的方法算出存储数据的键的散列值并映射到圆上，最后
致性散列的原理如图3-5所示，先算出Memcached服务器（节点）的散列值，并将其分散到
增加或减少时，会导致几乎所有的缓存失效，所以在大规模部署中，很少使用这种方法。一
据余数来选择将键存放到哪一台服务器上。这种方法虽然计算简单，效率很高，但在服务器
散列算法来计算分布。根据余数分布式算法先求得键的整数散列值，再除以服务器台数，根
影响。
障无法连接时，只有分散到这台服务器上的key/values对不能访问，其他key/value对不受
Memcached服务器时，将键分散保存到这些服务器上，当某一台Memcached服务器发生故
74
一致性散列算法对数据的存储是不均匀的，但可以最大限度地减少缓存的失效量。在大
当需要添加一台Memcached服务器时，由于保存键的服务器的个数发生了变化，因此
目前有两种分布式算法使用得最多，一种是根据余数来计算分布，另一种是根据一致性
将不同的键保存到不同的服务器上，就实现了Memcached的分布式算法。部署多台
www.Linuxidc.com
计算
node3
计算散列值
计算散列值
信
列
图3-5
一致性散列算法的原理
计算散列值
计算散列位
计算散列值
node2
node1
---
## Page 95
Linux公社（www.LinuxIDC.com）是专业的Linux系统门户网站，实时发布最新Linux资讯。
执行stats 命令。具体过程如下：
行一些命令，通过这些命令的输入即可查看Memcached的运行状态。
3.3.1如何管理Memcached
3.3
例如，要查看Memcached的统计信息，执行“telnetip监听端口”命令，登录成功之后
口set|get,gets，前面已经介绍过，用来保存或获取数据。
stats items，显示slab中的item数目。
确定数据到底保存在哪个slab。
stats slabs，显示slabs信息。通过这个命令能获取每个 slabs的chunksize长度，从而
statsreset，重新统计数据。
stats，统计Memcached的各种信息。
管理Memcached的命令如下：
Memcached的管理相对比较容易，通过命令行登录到Memcached的监听端口，然后执
1.通过Memcached的监听端口进行管理
Memcached的管理与性能监控
www.Linuxidc.com
计算散列值
node3
图3-6
计算散列值
node4
计算散列值
在使用一致性散列算法时增加一台新服务器
node5
添加node5的
影响范围
计算散列值
计算散列值
node2
nodel
PDG
---
## Page 96
Linux公社（www.LinuxIDC.com）是专业的Linux系统门户网站，实时发布最新Linux资讯。
些信息可以分析出，当前Memcached的换人换出是否比较厉害，容量是否足够。
集9L
memcached-tool是Brad Fitzpatrick利用Perl编写的一个Memcached管理脚本。这个脚
2.利用memcached-tool管理Memcached
通过以上信息可以看到Memcached的状态、连接的次数、
STAT
STAT
STAT
STAT
STAT
STAT
STAT
STAT
STAT
STAT
STAT
STAT
STAT
STAT
STAT
STAT
STAT
STAT
STAT
STAT
STAT
STAT
STAT
STAT pid 19900
stats
Trying 192.168.1
[root@web181 -]# telnet 192.168.1.181 11211
reclaimed
evictions
total_items
bytes 149
conn_yields 0
listen_disabled_num 0
limit_maxbytes 33554432
bytes_written 129
bytes_read 157
auth_errors 0
auth_cmds0
cas_hits 0
cas_misses
decr_hits 0
decr_misses
incr_hits 0
incr_misses
delete_hits
delete_misses
get_hits 1
cmd_get 1
connection_structures 11
total_connections 16
rusage_system 0.001999
rusage_user 0.003999
pointer_size 64
version 1.4.5
time 1287937993
www.Linuxidc.com
Web应用篇
0
N
0
0
#执行的set命令的次数
#执行的get命令的次数
#Memcached启动的进程ID
.181
#get的非命中数
#get的命中数
#到日前为止启动了多少秒
(192.168.1.181).
#Memcached的版本信息
#总的连接数
#当前的并发连接数
#允许使用的最大内存容量
、当前的并发连接数。通过这
---
## Page 97
Linux公社（www.LinuxIDC.com）是专业的Linux系统门户网站，实时发布最新Linux资讯。
态信息、内存使用情况、hit/miss 的值。通过
的使用情况进行跟踪：监控Memcached的状
3.3.2
下，尽量减少对数据库的影响。
性散列算法来确保在扩容Memcached的情况
定期分析这些资源是否足够，以及利用一致
的资源，并且记录这些业务使用的端口资源，
Memcached服务，同一类型的业务使用相同
大规模部署时，需要根据业务分配不同的
机时，如何能保证后端的数据库压力不会
资源，以及在某一个Memcached服务器岩
的Memcached运行服务时），如何组织这些
运行100GB的数据容量或者有多台大容量
非常大（这里说的量是指由单个Memcached
服务器的维护相对容易，如果Memcached量
非常规整，如图3-7所示。
memcached-tool.
面的网h址下载memcached-tool：http://code.sixapart.com/svn/memcached/trunk/server/scripts/
本通过将之前的命令行进行封装，使输入的值更加规整，进而更便于分析查看。可以通过下
部署好Mamcached之后，需要对Mermcached
生瓶颈，这是需要考虑的问题。在进行
总的来说，对单个或少量的Memcached
以上过程格式化输出的 stats命令的信息
[root@web181 -]# perl memcached-tool 127.0.0.1:11211 display
[root@web181 ~]#perlmemcached-tool 127.0.0.1:11211
memcached-tool的执行示例如下：
Usage:
[root@web181 ~]# per]
下面是memcached-tool的基本用法：
Memcached的监控
1
1
memcached-tool
memcached-tool
memcached-tool
memcached-tool
96B
96B
emcached-tool
www.Linuxidc .
278S
278S
10.0.0.5:11211 move 7 9
10.0.0.5:11211 stats
10.0.0.5:11211
10.0.0.5:11211 display
memcached-tool
1
[mode]
#127.0.0.1:11211 F1eld
2
./memcached_tool 127.0.0.1:11211 stats
图3-7
total_connections