原文：
**简介**
* * *
在2018年初，我接触到了一个非生产型的Google App
Engine部署环境，在那里，我可以尽情鼓捣各种内部API，经过一番折腾后，竟然找到了一个得到Google承认的远程代码执行漏洞。为此，我获得了Google漏洞奖励计划颁发的36,337美元奖金。
**提示**
* * *
您可以尝试运行文中[Google App Engine应用](http://save-the-expanse.appspot.com/ "Google
App Engine应用")所涉及的一些概念的示例代码。您可以找到该应用程序的源代码，包括gRPC C++ 客户端的源代码和各个Protocol
Buffer的定义，这些都可以从本人提供的[GitHub存储库](https://github.com/ezequielpereira/GAE-RCE
"GitHub存储库")中找到。
不久之前，我注意到每个[Google App Engine](https://cloud.google.com/appengine/ "Google App
Engine")（GAE）应用程序都使用“X-Cloud-Trace-Context”头部来响应所有HTTP请求，所以，我觉得任何返回该头部的网站都可以在GAE上运行。
在这一想法的指引下，我发现“[appengine.google.com](http://appengine.google.com/
"appengine.google.com")”本身就是运行在GAE上的，但是，它却可以执行一些无法在其他地方完成的操作，以及一些普通用户应用程序无法执行的操作，这极大地激发了我的好奇心，所以，我决定搞清楚这到底是咋回事。
显然，它必须使用一些API、接口或者只有谷歌自己运行的应用才可以使用的东西，并且，也许我们还可以通过某种方式来访问它们，这正是我们要探索的。
首先，在考察GAE应用程序是如何执行内部操作（例如写日志或[获取OAuth令牌](https://cloud.google.com/appengine/docs/standard/java/appidentity#asserting_identity_to_google_apis
"获取OAuth令牌")）之后，我发现，在Java
8环境中，这些操作都是通过向位于
Buffer（PB）消息（采用[二进制线路层格式](https://developers.google.com/protocol-buffers/docs/encoding#structure "二进制线路层格式")）来实现的。
HTTP请求如下所示：
    POST /rpc_http HTTP/1.1
    Host: 169.254.169.253:10001
    X-Google-RPC-Service-Endpoint: app-engine-apis
    X-Google-RPC-Service-Method: /VMRemoteAPI.CallRemoteAPI
    Content-Type: application/octet-stream
    Content-Length: 
这里的PB消息实际上是一个“[apphosting.ext.remote_api.Request](https://github.com/ezequielpereira/GAE-RCE/blob/c58ccd52d9204a0e5b8c7cf9b82b8e6e06d524a8/protos/apphosting/ext/remote_api/remote_api.proto#L11
"apphosting.ext.remote_api.Request")”消息，包括：  
service_name = 要调用的API的名称  
method = 要调用的API方法的名称  
request = 内部PB请求的字节数据（以二进制线路层格式编码）  
request_id = 安全票据（随每个GAE请求一起提供给应用程序），虽然它被标记为可选，但必需提供
至于这个HTTP请求的响应，可能是与该API的回复相对应的PB消息，也可能是一个错误消息。
在Java 8运行时环境下，我们可以通过下列代码行获取相应的安全票据：
    import com.google.apphosting.api.ApiProxy;
    import java.lang.reflect.Method;
    Method getSecurityTicket = ApiProxy.getCurrentEnvironment().getClass().getDeclaredMethod("getSecurityTicket");
    getSecurityTicket.setAccessible(true);
    String security_ticket = (String) getSecurityTicket.invoke(ApiProxy.getCurrentEnvironment());
对于这个过程，我们可以通过一个例子进行说明：如果我想要取得一个可以在“
OAuth令牌，具体步骤如下所示：
1.生成一个“[apphosting.GetAccessTokenRequest](https://github.com/ezequielpereira/GAE-RCE/blob/c58ccd52d9204a0e5b8c7cf9b82b8e6e06d524a8/protos/apphosting/api/app_identity/app_identity_service.proto#L51
"apphosting.GetAccessTokenRequest")”消息：  
scope = [""]  
2.生成一个“[apphosting.ext.remote_api.Request](https://github.com/ezequielpereira/GAE-RCE/blob/c58ccd52d9204a0e5b8c7cf9b82b8e6e06d524a8/protos/apphosting/ext/remote_api/remote_api.proto#L11
"apphosting.ext.remote_api.Request")”消息：  
service_name = "app_identity_service"（该API用于访问GAE服务帐户）
method = "GetAccessTokenRequest"  
request = 上一步生成的PB消息的字节数据，以二进制线路层格式编码  
request_id = 安全票据  
3.发送HTTP请求  
4.对响应消息进行解码，该响应内容应该是“[apphosting.GetAccessTokenResponse](https://github.com/ezequielpereira/GAE-RCE/blob/c58ccd52d9204a0e5b8c7cf9b82b8e6e06d524a8/protos/apphosting/api/app_identity/app_identity_service.proto#L57
"apphosting.GetAccessTokenResponse")”消息
由于这个端点可以访问一些内部的东西，所以，我相信它与完成内部操作的“[appengine.google.com](http://appengine.google.com/
"appengine.google.com")”域肯定有关，遗憾的是，我在这个HTTP端点中没有找到任何有用的东西。
最初，我觉得它可能使用了位于同一服务器（169.254.169.253）中的其他端点，因此，我上传了一个静态链接版本的Nmap到GAE，并在该服务器上运行它（为了在GAE中运行二进制文件，我将其与应用程序一起上载，然后在运行时，将它们复制到/tmp目录中，并赋予它们执行权限——因为文件系统的其余文件都是只读的）。具体的例子，请参考[这里](http://save-the-expanse.appspot.com/nmap "这里")。
我发现，端口4是开放的，所以，我向该端口发送了一些东西。之后，它回复了一堆奇怪的数据，不过，其中也有一些可识别的字符串，在搜索引擎的帮助下，我发现这是一个[gRPC服务](https://grpc.io/about/
"gRPC服务")。
我曾经尝试构建一个在GAE上运行的Java
gRPC客户端，但是遇到了一个问题：一方面内置的gRPC库似乎不完整，另一方面，每当我上传一个完整的gRPC库后，它仍“固执地”使用内置的库。
所以，我构建了一个C++客户端，并在GAE上运行它。
经过反复试验之后，我发现gRPC服务就像HTTP端点一样，也运行了一个“[apphosting.APIHost](https://github.com/ezequielpereira/GAE-RCE/blob/c58ccd52d9204a0e5b8c7cf9b82b8e6e06d524a8/protos/apphosting/base/runtime.proto#L219
"apphosting.APIHost")”
API。当然，两者还是有所差异的，比如在PB消息的编码方面，它不仅提供了二进制编码选项，还提供了JSON编码选项，因此，它在测试方面要更容易一些。
对于该客户端，[这里](http://save-the-expanse.appspot.com/grpc?api=app_identity_service&method=GetDefaultGcsBucketName&req=%7B%7D&setPb=1
"这里")提供了一个实例。
由于在该服务器中没有发现其他东西，因此，我假定“[appengine.google.com](http://appengine.google.com/
"appengine.google.com")”在内部执行的操作，要么是借助其他服务器完成的，要么就是使用RPC服务（HTTP/gRPC）调用了某些隐式的API/方法。
于是，我通过Nmap查找与其有关的服务器，但只找到了[元数据服务器](https://cloud.google.com/compute/docs/storing-retrieving-metadata
"元数据服务器")，很明显，它不可能完成上述的操作，所以，我认为它肯定使用了隐式的API，但问题是——如何找到它们呢？
首先，我收集了所能找到的所有Protocol
Buffer的定义（这些可以从.JAR文件中找到的.CLASS文件以及在运行时找到的二进制文件中提取），并在其中搜索任何可能指向某些隐式API的Protocol
Buffer定义（如果读者有兴趣的话，可以从[这里](https://github.com/ezequielpereira/GAE-RCE/tree/master/protos "这里")下载我提取到的所有PB定义）。
在“[apphosting/base/appmaster.proto](https://github.com/ezequielpereira/GAE-RCE/blob/c58ccd52d9204a0e5b8c7cf9b82b8e6e06d524a8/protos/apphosting/base/appmaster.proto
"apphosting/base/appmaster.proto")”文件中，含有几个PB消息，看起来像是修改App
Engine内部设置的内部方法，还有一个名为“AppMaster”的API，其中定义了一些方法，这些都是我们所感兴趣的——但是，经过一番尝试之后，我仍然没有找到正确调用这些方法的途径。
由于在PB定义中没有找到任何隐式的API/方法，所以我不得不到其他地方寻找。
于是，我将搜索目标转移到二进制文件上面，问题是它们过于庞大，并且里面充满了无用或者无法理解的东西（我是通过字符串+grep来完成搜索的，因为我对逆向工程还不太熟悉），后来，我在一个主要的二进制文件即“java_runtime_launcher_ex”中发现了多命令行参数，这给了我很大的启发：何不考察在GAE环境中运行时会收到哪些参数呢？
刚开始的时候，我获取参数的方法是非常费劲的，因为需要将每个可以找到的Java变量与相应的参数联系起来，这几乎是不可能完成的任务。
然后，我尝试了一些更聪明的方法：用C++创建一个Java库，并使用一个方法来读取传递给启动程序的参数，然后将其返回。
这种获取参数的方式明显要轻松多了，这是我从一个[Stack Overflow帖子](https://stackoverflow.com/a/37358751
"Stack Overflow帖子")中学到的，其中用于获取参数的代码如下所示：
    int argc = -1;
    char **argv = NULL;
    static void getArgs(int _argc, char **_argv, char **_env) {
      argc = _argc;
      argv = _argv;
    }
    __attribute__((section(".init_array"))) static void *ctr = (void*) getArgs;
然后，通过一个简单方法将参数转换为Java数组，[这里](http://save-the-expanse.appspot.com/args
"这里")有一个具体的例子。
运行代码后，我得到了很多参数，其中包括下面这个（为了便于阅读，这里将其分成多行）：
    --api_call_deadline_map=
      app_config_service:60.0,
      blobstore:15.0,