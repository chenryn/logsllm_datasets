**作者：张汉东  
原文链接：  
相关阅读：[Rust生态安全漏洞总结系列 | Part 1](https://paper.seebug.org/1728/ "Rust生态安全漏洞总结系列
| Part 1")**
本系列主要是分析 **`RustSecurity`
安全数据库库**[1]中记录的`Rust`生态社区中发现的安全问题，从中总结一些教训，学习`Rust`安全编程的经验。
本期分析了下面六个安全问题：
  * RUSTSEC-2021-0067 : Cranelift 模块中代码生成缺陷导致可能的 WASM 沙箱逃逸
  * RUSTSEC-2021-0054：rkyv crate 可能包含未初始化的内存
  * RUSTSEC-2021-0041：parse_duration 通过用太大的指数解析 Payload 来拒绝服务(DOS)
  * RUSTSEC-2021-0053：算法库中 `merge_sort::merge()` 导致实现 Drop 的类型 双重释放（ double-free）
  * RUSTSEC-2021-0068: iced x86 版本中 不合理（Soundness） 的问题
  * RUSTSEC-2021-0037：Diesel 库的 Sqlite 后端 UAF(use-after-free) bug
看是否能给我们一些启示。
* * *
## RUSTSEC-2021-0067 : Cranelift 模块中代码生成缺陷导致可能的 WASM 沙箱逃逸
在 Cranelift 中发现了一个漏洞。具有未知输入的操作导致特权升级漏洞。CWe正在将问题分类为CWE-264。这将对机密性，完整性和可用性产生影响。
### 漏洞描述：
  * 漏洞类型：Vulnerability
  * 漏洞分类：code-execution/ memory-corruption/ memory-exposure
  * CVE 编号：CVE-2021-32629
  * 详细： **** [2]
  * 影响架构：x86
  * 补丁：`>=0.73.1` 和 `>=0.74.0`
Cranelift X64后端的`0.73.0`中有一个错误，可以创建一个可能导致 Webassembly 模块中的潜在沙箱逃逸(sandbox
escape )的场景。版本`0.73.0`的Cranelift的用户应升级到`0.73.1`或`0.74`，以修复此漏洞。
如果未使用旧的默认后端，则在`0.73.0`之前的 Cranelift 用户应该更新为`0.73.1`或`0.74`。
### 漏洞分析
此问题是在 Cranelift 新后端中引入的（Cranelift 经历过大的重构）。
>
> 一些背景：寄存器分配如果物理寄存器的数量不足以满足虚拟寄存器的需求，有些虚拟寄存器显然就只能映射到内存。这些虚拟寄存器称为溢出（spill）虚拟寄存器。寄存器分配算法的好坏直接决定了程序中寄存器的利用率。
> Cranelift 寄存器分配相关文章： ** isel-3/>** [3]该文章还详细介绍了该团队如何保证 Cranelift 生成正确的代码。即便如此，还是产生了逻辑 Bug。
这个 Bug 是一个逻辑 Bug:
原因是，寄存器分配器重新加载比 64位 窄的溢出（spill）整数值时，从栈上加载的值执行了符号扩展而不是零扩展。
这对另一个优化产生了糟糕的影响：当我们知道产生32位值的指令实际上将其目标寄存器的高32位置零时，指令选择器将选择一个32到64位的零扩展运算符。因此，我们依赖于这些归零位，但值的类型仍然是I32，并且溢出/重新加载将这些比特位重构为I32的MSB的符号扩展。
所以，在某些特定情况下，如果i32值为指针，则可能会出现沙箱逃逸的情况。为堆访问发出的常规代码对 WebAssembly
堆地址进行零扩展，将其添加到64位堆基，然后访问结果地址。如果零扩展成为符号扩展，则模块可以在堆开始之前向后访问并访问最大2GiB的内存。
> 符号扩充 (sign-extend): 指在保留数字的符号（正负性）及数值的情况下，增加二进制数字位数的操作。 零扩充（zero-> extend）：用于将无符号数字移动至较大的字段中，同时保留其数值。
该 Bug 的影响力依赖于堆的实现。具体而言：
如果堆有边界检查。并且，不完全依赖于保护页面。并且堆绑定为2GiB或更小。则该 Bug 无法用于从另一个 WebAssembly 模块堆访问内存。
如果使用此 Bug 可访问的范围中没有映射内存，例如，如果 WebAssembly 模块堆之前有 2 GiB 保护区域，则可以减轻此漏洞的影响。
  * 修复 PR: **** [4]
  * 点击查看详细内容，了解对 lucet 和 wastmtime的影响： **** [5]
## RUSTSEC-2021-0054：rkyv crate 可能包含未初始化的内存
### 漏洞描述：
  * 漏洞类型：Vulnerability
  * 漏洞分类：memory-exposure
  * CVE 编号：无
  * 详细： **** [6]
  * 补丁：`>=0.6.0`
rkyv是一个序列化框架 在序列化期间，可能无法初始化结构填充字节和未使用的枚举字节。这些字节可以写入磁盘或发送不安全的通道。
### 漏洞分析
补丁代码：
****
[7]
有问题的代码：
    unsafe fn resolve_aligned(
            &mut self,
            value: &T,
            resolver: T::Resolver,
        ) -> Result {
        // ...
        let mut resolved = mem::MaybeUninit::zeroed();
        // ...
    }
`mem::MaybeUninit::zeroed()`函数会创建一个新的`MaybeUninit`实例，并且该内存位会被填充`0`。但是这依赖于
`T`是否能被正确初始化。比如：`MaybeUninit::zeroed()`是初始化，但是`MaybeUninit::zeroed()`就没有被正确初始化。这是因为 Rust 里引用不能为空。
所以，现在这个 resolver 是个泛型 `T`，不一定能正确初始化，所以有未初始化的风险。
修复之后的代码：
        let mut resolved = mem::MaybeUninit::::uninit();
        resolved.as_mut_ptr().write_bytes(0, 1);
直接假设其没有正确初始化，然后使用`write_bytes`手工将其初始化，确保正确。
## RUSTSEC-2021-0041：parse_duration 通过用太大的指数解析 Payload 来拒绝服务(DOS)
### 漏洞描述：
  * 漏洞类型：Vulnerability
  * 漏洞分类：denial-of-service
  * CVE 编号：CAN-2021-1000007 / CVE-2021-29932
  * 详细： **** [8]
  * 补丁：无，作者放弃维护
### 漏洞解析
parse_duration 库用来将字符串解析为持续时间（duration）。
问题代码：
    if exp ** [9]
  * 补丁：暂无
### 漏洞分析
**algorithmica** [10]是 Rust 实现算法的教学库，网站为：
**** [11]。
该库中的归并排序的实现中，merge 函数导致 对列表元素持有双份所有权，所以会双重释放（double free）。
注意下面源码中，为 unsafe rust 实现。
     fn merge(list: &mut [T], start: usize, mid: usize, end: usize, compare: &F) 
     where 
         F: Fn(&T, &T) -> bool, 
     { 
         let mut left = Vec::with_capacity(mid - start + 1); 
         let mut right = Vec::with_capacity(end - mid); 
         unsafe { 
             let mut start = start; 
             while start <= mid { 
                 left.push(get_by_index(list, start as isize).read()); 
                 start += 1; 
             } 
             while start <= end { 
                 right.push(get_by_index(list, start as isize).read()); 
                 start += 1; 
             } 
         } 
         let mut left_index = 0; 
         let mut right_index = 0; 
         let mut k = start; 
         unsafe { 
             while left_index < left.len() && right_index < right.len() { 
                 if compare(&left[left_index], &right[right_index]) { 
                     // 通过 `list[k] = ` 这种方式重复持有元素所有权
                     list[k] = get_by_index(&left, left_index as isize).read(); 
                     left_index += 1; 
                 } else { 
                     list[k] = get_by_index(&right, right_index as isize).read(); 