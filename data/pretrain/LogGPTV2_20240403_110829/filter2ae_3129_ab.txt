【3】卡片首先用自己的秘钥key验证nR
，如果读卡器发送的nR错误，认证流程直接结束，所有的数据都会变成不可读。如果读卡器发送的nR正确，卡片会用自己的秘钥对读卡器的随机数nR计算后发送。  
整个过程如图所示：
有些卡是非加密卡，可以直接进行读取和模拟。  
值得一提的是，在只有存储功能的M1卡中，加解密算法以及key都使用电路硬件实现的，写死在卡片上。  
所以这就产生了一个问题，可以不断地重复，对秘钥进行爆破。因为M1卡没有记录秘钥尝试次数的功能。  
所以，只要有设备我们就可以对M1卡进行一个爆破了。  
然而，CPU卡 就复杂多了，内部有处理器，加密过程是通过CPU实现的。同时拥有记录尝试次数的逻辑判断，如果秘钥输入次数过多，卡片就会锁死。
# 3 M1卡片破解
M1卡 破解以及读写工具：
### 3.1 **最简单工具——带NFC功能的小米手机**
【1】硬件工具：NFC功能手机  
【2】软件：Mifare Classic Tools
### 3.2 **PN532 30￥左右**
PN532 淘宝价格大概30￥左右，
需要进行焊接或者用胶带粘起来
用USB连接电脑进行使用
**上位机安装miLazyCracker**
  1. 下载地址：
  2. CraptEV1文件可自行下载  
提取码: 7vjj*
  3. Linux上安装libnfc驱动，参考见这篇简书
  4. Linux上安装miLazyCracker，就一行命令：./miLazyCrackerFreshInstall.sh
安装完毕后，创建一个临时目录，既可以开始暴力破解了。
### 3.3 PM5PM6 100-110￥左右
大概长这样的：
有专门的M1卡服务程序：可以进行一键读写、爆破等。
设备之间的对比：现在某宝上已经可以买到PM6了，可以破解更多型号的卡片。
# 4 破解尝试——身边的卡片
首先第一个想到的是公司食堂饭卡，其次是公司的门禁卡，然后就是社保卡、身份证。  
本人全都试了。  
因为没有购买专门的破解设备，我就先用手机进行尝试：
### 4.1 公司卡：
看见上面有写SAK20，SAK20的卡是CPU卡，没有通用的破解工具，无法进行简单破解。毕竟是安全公司哈，安全性还是可以的。
### 4.2 接着看一下社保卡：
社保卡读取的数据全部都是空，我市的社保卡是有NFC功能，并且可以当做公交卡刷卡使用的。  
没有数据，有可能是因为是半加密的，也有可能是因为没有使用过NFC的功能，所以没有数据。
### 4.3 接着是二代身份证：
将卡片放置在手机NFC功能上，手机能感应到卡片，但是没有任何响应，甚至连标签Tag都没有出现。我猜测二代身份证是使用的CPU卡，到网上查找资料，是非接触式IC卡（typeB的带COS-芯片操作系统-的CPU卡），也就是我们说的RFID功能的CPU卡。  
但是为什么读不出来，就不清楚了，可能采用的芯片，MCT软件识别不出来，连卡片的UID都没有。
### 4.4 最后是某餐饮公司饭卡：
M1 是被动卡，需要读卡器为之供能，一旦读卡器切断电源，卡中临时数据就会丢失，所以无论试错多少次密码都不会被锁定因此容易被暴力破解。
**所有的数据都可以读出来**
可以观察到只有0-3这四个扇区有数据，别的扇区没数据。  
因为每天只有中午吃饭的时候用到这张饭卡，所以首先需要积累一定量的数据量。然后再进行分析。  
首先采集了两天的数据，每天刷一次卡，且知道卡的金额，对比。
Block0是卡片的信息数据。包括卡片本身的UID、型号厂商等信息。最后一行代表的是卡片的key  
很多不安全的卡片默认key为FFFFFFFFFFF。  
keyA和keyB的作用各不相同。后面解释一下
* * *
将扇区2-3的数据提取出来，5天的量。可以观察到扇区2的第一行四个十六进制代表的是卡片余额。  
如下：  
【255】  
9C630000000000000000001C3E000B00  
000000DC050000000000000000010000  
00000000000074290B1C0EC67400001A  
\------------FF078069FFFFFFFFFFFF  
【270】  
78690000000000000000004038000A00  
000000DC050000000000000000010000  
00000000000073290B2214C673000000  
\------------FF078069FFFFFFFFFFFF  
【285】  
546F0000000000000000006432000900  
000000DC050000000000000000010000  
00000000000072290B1E1BC6720000FA  
\------------FF078069FFFFFFFFFFFF  
【300】  
3075000000000000000000882C000800  
000000DC050000000000000000010000  
00000000000071290B1C03C67100001A  
\------------FF078069FFFFFFFFFFFF  
【315】  
0C7B000000000000000000AC26000700  
000000DC050000000000000000010000  
00000000000070290B1D00C6700000F9  
\------------FF078069FFFFFFFFFFFF
比如 255元，的9C63 实际上进行一个颠倒就是 63
9C，转换成十进制就是255.00。时精确到分的16进制表示。这个块的后面4个十进制数代表的一直意义不明。  
直到在网上查了M1卡开发指南，猜测是某种 **校验** 。后来将所有的数据中金额和后面16进制数加起来，发现结果都相同，验证了我的猜想。
69 78 +28 40=A1B8  
63 9C+ 3E 1C=A1B8  