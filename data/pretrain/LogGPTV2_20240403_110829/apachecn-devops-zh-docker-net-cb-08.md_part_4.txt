正如我们之前看到的，我们仍然指定一个网络。唯一的区别是我们提供了`host-gw`的`type`。将此插入`etcd`的命令如下:
```
user@docker1:~$ etcdctl set /coreos.com/network/config \
'{"Network":"10.100.0.0/16", "Backend": {"Type": "host-gw"}}'
```
在我们插入这个配置之后，Flannel 节点应该都获得了新的配置。让我们检查主机上 Flannel 的服务日志`docker4`来验证这一点:
```
user@docker4:~$ journalctl -r -u flanneld
-- Logs begin at Wed 2016-10-12 12:39:35 CDT, end at Wed 2016-10-12 12:55:38 CDT. --
Oct 12 12:55:06 docker4 flanneld[873]: I1012 12:55:06.797289 00873 network.go:83] Subnet added: 10.100.23.0/24 via 10.10.10.103
Oct 12 12:55:06 docker4 flanneld[873]: I1012 12:55:06.796982 00873 network.go:83] Subnet added: 10.100.20.0/24 via 10.10.10.101
Oct 12 12:55:06 docker4 flanneld[873]: I1012 12:55:06.796468 00873 network.go:83] Subnet added: 10.100.43.0/24 via 10.10.10.102
Oct 12 12:55:06 docker4 flanneld[873]: I1012 12:55:06.785464 00873 network.go:51] Watching for new subnet leases
Oct 12 12:55:06 docker4 flanneld[873]: I1012 12:55:06.784436 00873 manager.go:246] Lease acquired: 10.100.3.0/24
Oct 12 12:55:06 docker4 flanneld[873]: I1012 12:55:06.779349 00873 local_manager.go:179] Picking subnet in range 10.100.1.0 ... 10.100.255.0
```
### 注
`journalctl`命令对于查看与由`systemd`管理的服务相关的所有日志非常有用。在前面的例子中，我们传递了`-r`参数来以相反的顺序显示日志(顶部的最新日志)。我们还传递了`-u`参数来指定我们想要查看哪个服务的日志。
我们看到的最早的日志条目是该主机的 Flannel 服务挑选并注册了`10.100.0.0/16`子网内的一个范围。这与 UDP 和 VXLAN 后端的工作方式相同。接下来的三个日志条目显示 Flannel 正在检测其他三个 Flannel 节点范围的注册。由于`etcd`正在跟踪每个 Flannel 节点的外部 IP 地址及其注册范围，所有 Flannel 主机现在都知道可以使用什么外部 IP 地址来到达每个注册的 Flannel 范围。在覆盖模式(UDP 或 VXLAN)下，该外部 IP 地址被用作封装流量的目的地。在主机网关模式下，此外部 IP 地址用作路由目的地。如果我们检查路由表，我们可以看到每台主机的路由条目:
```
user@docker4:~$ ip route
default via 10.10.10.1 dev eth0 onlink
10.10.10.0/24 dev eth0  proto kernel  scope link  src 10.10.10.104
10.100.20.0/24 via 10.10.10.101 dev eth0
10.100.23.0/24 via 10.10.10.103 dev eth0
10.100.43.0/24 via 10.10.10.102 dev eth0
user@docker4:~$
```
在这种配置中，Flannel 仅仅依靠基本路由来提供到所有 Flannel 注册范围的可达性。在这种情况下，主机`docker4`具有到所有其他 Docker 主机的路由，以便到达它们的 Flannel 网络范围:
![How to do it…](img/B05453_08_04.jpg)
这不仅比处理覆盖网络要简单得多，而且比要求每台主机为覆盖网络进行封装要高效得多。这种方法的缺点是，每台主机都需要在同一网络上有一个接口才能工作。如果主机不在同一个网络上，Flannel 无法添加这些路由，因为它需要上游网络设备(主机的默认网关)也有关于如何到达远程主机的路由信息。虽然 Flannel 节点可以将静态路由指向其默认网关，但物理网络不知道`10.100.0.0/16`网络，因此无法传送流量。最终效果是主机网关模式限制了放置启用 Flannel 的 Docker 主机的位置。
最后，需要指出的是，在 Docker 服务已经运行之后，Flannel 可能已经改变了状态。如果是这种情况，您将需要重新启动 Docker，以确保它从 Flannel 中提取新的变量。如果您在重新配置主机的网络接口时重新启动主机，您可能只需要启动 Docker 服务。系统启动时，服务可能无法加载，因为缺少 Flannel 配置信息(现在应该有)。
### 注
Flannel 也有 GCE、AWS 等各种云提供商的后端。您可以查看他们的文档，以找到关于这些后端类型的更具体的信息。
# 指定 Flannel 选项
除了配置不同的后端类型，您还可以通过`etcd`以及 Flannel 客户端本身指定其他选项。这些选项允许您限制 IP 分配范围，并指定特定接口用作 Flannel 节点的外部 IP 端点。在本食谱中，我们将回顾您可以在本地和全球使用的其他配置选项。
## 做好准备
我们将继续构建上一章中配置主机网关后端的实验。但是，实验室拓扑将恢复到以前的配置，Docker 主机`docker3`和`docker4`位于`192.168.50.0/24`子网:
![Getting ready](img/B05453_08_05.jpg)
一旦您在此拓扑中配置了主机，我们将希望消除 Flannel 配置。为此，请执行以下步骤:
*   在运行`etcd`服务的主机上:
    ```
    sudo systemctl stop etcd
    sudo rm -rf /var/lib/etcd/default 
    sudo systemctl start etcd
    ```
*   在运行 Flannel 服务的所有主机上:
    ```
    sudo systemctl stop flanneld
    sudo ip link delete flannel.1
    sudo systemctl --no-block start flanneld
    ```
在某些情况下，我们所做的更改可能要求您具有对系统的根级访问权限。
## 怎么做…
前面的方法展示了几个如何指定整体 Flannel 网络或全局范围以及更改后端网络类型的示例。我们还看到一些后端网络类型允许额外的配置选项。除了我们已经看到的选项，我们还可以全局配置其他参数，这些参数决定 Flannel 的整体工作方式。还有三个其他主要参数会影响分配给 Flannel 节点的范围:
*   `SubnetLen`:该参数以整数的形式指定，并规定了分配给每个节点的作用域的大小。如我们所见，这默认为`/24`
*   `SubnetMin`:该参数以字符串的形式指定，并指示范围分配应该开始的起始 IP 范围
*   `SubnetMax`:该参数以字符串的形式指定，表示子网分配应该结束的 IP 范围的结束
在分配网络时，将这些选项与`Network`标志结合使用会给我们带来很大的灵活性。例如，让我们使用这种配置:
```
{  
   "Network":"10.100.0.0/16",
   "SubnetLen":25,
   "SubnetMin":"10.100.0.0",
   "SubnetMax":"10.100.1.0",
   "Backend":{  
      "Type":"host-gw"
   }
}
```
这定义了每个 Flannel 节点应该获得一个`/25`的范围分配，第一个子网应该在`10.100.0.0`开始，最后一个子网应该在`10.100.1.0`结束。您可能已经注意到，在这种情况下，我们在该分配中只有三个子网的空间:
*   `10.100.0.0/25`
*   `10.100.0.128./25`
*   `10.100.1.0/25`
这样做的目的是为了显示当 Flannel 在全局范围内耗尽空间时会发生什么。现在让我们使用以下命令将该配置置于`etcd`中:
```
user@docker1:~$ etcdctl set /coreos.com/network/config \
 '{"Network":"10.100.0.0/16","SubnetLen": 25, "SubnetMin": "10.100.0.0", "SubnetMax": "10.100.1.0", "Backend": {"Type": "host-gw"}}'
```
一旦就位，您应该看到大多数主机都收到了本地范围分配。但是，如果我们检查我们的主机，我们将看到一个主机未能收到分配。就我而言，那就是主持人`docker4`。我们可以在 Flannel 服务日志中看到这一点:
```
user@docker4:~$ journalctl -r -u flanneld
-- Logs begin at Wed 2016-10-12 12:39:35 CDT, end at Wed 2016-10-12 13:17:42 CDT. --
Oct 12 13:17:42 docker4 flanneld[1422]: E1012 13:17:42.650086 01422 network.go:106] failed to register network: failed to acquire lease: out of subnets
Oct 12 13:17:42 docker4 flanneld[1422]: I1012 13:17:42.649604 01422 local_manager.go:179] Picking subnet in range 10.100.0.0 ... 10.100.1.0
```
由于我们只允许在全局范围内为三个分配空间，第四个主机无法接收本地范围，将继续请求一个，直到有一个可用为止。这可以通过将`SubnetMax`参数更新为`10.100.1.128`并在未能接收到本地范围分配的主机上重新启动 Flannel 服务来解决。
正如我提到的，我们还可以将配置参数传递给每台主机上的 Flannel 服务。
### 注
Flannel 客户端支持多种参数，运行`flanneld --help`即可查看所有参数。其中涵盖了新的和即将推出的功能，以及与基于 SSL 的通信相关的配置，在您无法控制的基础架构上运行这些类型的服务时，审查这些配置非常重要。
从网络角度来看，最有价值的配置选项可能是`--iface`参数，该参数允许您指定希望将哪个主机接口用作 Flannel 的外部端点。要了解这一点的重要性，让我们看一下我们的多主机实验拓扑的快速示例:
![How to do it…](img/B05453_08_06.jpg)
如果您还记得，在主机网关模式下，Flannel 要求所有 Flannel 节点位于第 2 层相邻或同一网络上。这种情况下，左边的`10.10.10.0/24`网络上有两台主机，右边的`192.168.50.0/24`网络上有两台主机。为了相互交谈，他们需要通过多层交换机进行路由。像这样的场景通常需要一个覆盖后端模式，通过多层交换机隧道传输容器流量。但是，如果出于性能或其他原因需要主机网关模式，那么如果您能够为主机提供额外的接口，您可能仍然能够使用它。例如，假设这些主机实际上是虚拟机，我们可以相对容易地在每台主机上配置另一个接口，称之为`eth1`:
![How to do it…](img/B05453_08_07.jpg)
该接口可以专用于 Flannel 流量，允许每台主机仍然为 Flannel 流量而相邻第 2 层，同时仍然保持其通过`eth0`的现有默认路由。然而，仅仅提供接口是不够的。回想一下，默认情况下，Flannel 通过引用主机的默认路由来选择其外部端点接口。由于默认路由在此模型中没有变化，Flannel 将无法添加合适的路由:
```
user@docker4:~$ journalctl -ru flanneld
-- Logs begin at Wed 2016-10-12 14:24:51 CDT, end at Wed 2016-10-12 14:31:14 CDT. --
Oct 12 14:31:14 docker4 flanneld[1491]: E1012 14:31:14.463106 01491 network.go:116] Error adding route to 10.100.1.128/25 via 10.10.10.102: network is unreachable
Oct 12 14:31:14 docker4 flanneld[1491]: I1012 14:31:14.462801 01491 network.go:83] Subnet added: 10.100.1.128/25 via 10.10.10.102
Oct 12 14:31:14 docker4 flanneld[1491]: E1012 14:31:14.462589 01491 network.go:116] Error adding route to 10.100.0.128/25 via 10.10.10.101: network is unreachable
Oct 12 14:31:14 docker4 flanneld[1491]: I1012 14:31:14.462008 01491 network.go:83] Subnet added: 10.100.0.128/25 via 10.10.10.101
```
由于 Flannel 仍然使用`eth0`接口作为其外部端点 IP 地址，它知道另一个子网中的主机不能直接到达。我们可以通过将`--iface`选项传递给 Flannel 服务，告诉 Flannel 使用`eth1`界面来解决这个问题。
例如，我们可以通过更新 Flannel 服务定义(`/lib/systemd/system/flanneld.service`)来更改 Flannel 配置，如下所示:
```
[Unit]
Description=Flannel Network Fabric
Documentation=https://github.com/coreos/flannel
Before=docker.service
After=etcd.service
[Service]
Environment= 'DAEMON_ARGS=--etcd-endpoints=http://10.10.10.101:2379 --iface=eth1'
Type=notify
ExecStart=/usr/bin/flanneld $DAEMON_ARGS
Restart=always
RestartSec=10s
LimitNOFILE=65536
[Install]
WantedBy=multi-user.target
```
通过这种配置，Flannel 将使用`eth1`接口作为其外部端点，允许所有主机直接通过`10.11.12.0/24`网络进行通信。然后，您可以通过重新加载`systemd`配置并在所有主机上重新启动服务来加载新配置:
```
sudo systemctl daemon-reload
sudo systemctl restart flanneld
```
请记住，Flannel 使用外部端点 IP 地址来跟踪 Flannel 节点。更改此值意味着 Flannel 将为每个 Flannel 节点分配一个新的范围。最好在加入 Flannel 节点之前配置这些选项。在我们的例子中，由于`etcd`已经配置好了，我们想要再次删除现有的`etcd`配置并重新配置它，以便作用域变得可用:
```
user@docker1:~$ sudo systemctl stop etcd
user@docker1:~$ sudo rm -rf /var/lib/etcd/default
user@docker1:~$ sudo systemctl start etcd
user@docker1:~$ etcdctl set /coreos.com/network/config \
 '{"Network":"10.100.0.0/16","SubnetLen": 25, "SubnetMin": "10.100.0.0", "SubnetMax": "10.100.1.128", "Backend": {"Type": "host-gw"}}'
```
如果您检查一台主机，您现在应该看到它有三条 Flannel 路由——其他三台主机的每个分配范围一条:
```
user@docker1:~$ ip route
default via 10.10.10.1 dev eth0 onlink
10.10.10.0/24 dev eth0  proto kernel  scope link src 10.10.10.101
10.11.12.0/24 dev eth1  proto kernel  scope link src 10.11.12.101
10.100.0.0/25 via 10.11.12.102 dev eth1
10.100.1.0/25 via 10.11.12.104 dev eth1
10.100.1.128/25 via 10.11.12.103 dev eth1
10.100.0.128/25 dev docker0  proto kernel  scope link src 10.100.75.1 
user@docker1:~$
```
此外，如果您将通过 NAT 使用 Flannel，您可能还想查看`--public-ip`选项，该选项允许您定义节点的公共 IP 地址。这在云环境中尤其相关，在云环境中，服务器的真实 IP 地址可能隐藏在 NAT 之后。