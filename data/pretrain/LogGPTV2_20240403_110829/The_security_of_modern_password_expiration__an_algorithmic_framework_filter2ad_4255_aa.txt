title:The security of modern password expiration: an algorithmic framework
and empirical analysis
author:Yinqian Zhang and
Fabian Monrose and
Michael K. Reiter
The Security of Modern Password Expiration:
An Algorithmic Framework and Empirical Analysis
Yinqian Zhang
Fabian Monrose
Michael K. Reiter
University of North Carolina at
University of North Carolina at
University of North Carolina at
Chapel Hill
Chapel Hill, NC
Chapel Hill
Chapel Hill, NC
Chapel Hill
Chapel Hill, NC
PI:EMAIL
PI:EMAIL
PI:EMAIL
ABSTRACT
This paper presents the ﬁrst large-scale study of the success of pass-
word expiration in meeting its intended purpose, namely revoking
access to an account by an attacker who has captured the account’s
password. Using a dataset of over 7700 accounts, we assess the ex-
tent to which passwords that users choose to replace expired ones
pose an obstacle to the attacker’s continued access. We develop a
framework by which an attacker can search for a user’s new pass-
word from an old one, and design an efﬁcient algorithm to build
an approximately optimal search strategy. We then use this strat-
egy to measure the difﬁculty of breaking newly chosen passwords
from old ones. We believe our study calls into question the merit
of continuing the practice of password expiration.
Categories and Subject Descriptors
K.6.5 [MANAGEMENT OF COMPUTING AND INFORMA-
TION SYSTEMS]: Security and Protection—Authentication; H.1.2
[MODELS AND PRINCIPLES]: User/Machine Systems—Hu-
man factors
General Terms
Security, Human Factors
Keywords
User authentication, passwords, password expiration
1.
INTRODUCTION
The practice of regularly expiring passwords has been a sta-
ple of computer security administration for over a quarter century
(e.g., [5]). With few exceptions (e.g., [24, 3]), this practice is nearly
universally accepted as a basic tenet by which systems should be
protected, the common wisdom being:
Changing passwords frequently narrows the window
within which an account is usable to an attacker be-
forehe has totakeadditional steps tomaintain access.
... Passwordexpirationdoesnotofferanybeneﬁtwhen
an attacker wants to do all of the damage that he’s go-
ing to do right now. It does offer a beneﬁt when the
attacker intends to continue accessing a system for an
extended period of time. [2]
At this level of speciﬁcity, such an argument is unquestionably
sound. However, the process of reducing such intuition to a rea-
sonable password expiration policy would ideally be grounded in
measurements of what “additional steps” the policy hoists on an
attacker, so as to be certain that these “additional steps” are an im-
pediment to his continued access. Unfortunately, even to this day,
the security community has yet to provide any such measurements.
In this paper we provide the ﬁrst analysis of which we are aware
of the effectiveness of expiring passwords. Using a dataset of pass-
word histories for over 7700 defunct accounts at our institution, we
assess the success with which an attacker with access to one pass-
word for an account can break a future password for that account, in
either an ofﬂine fashion where the attacker can test many password
guesses or an online one where the attacker is limited to only a few.
Central to our analysis is the development of a transform-based al-
gorithmic framework that an attacker can employ for breaking fu-
ture passwords given preceding ones. Transform-based algorithms
build from the presumption that a typical user will generate her
next password by making systematic modiﬁcations to her current
one (i.e., by applying primitive transforms).
The conjecture that users tend to generate future passwords based
on old passwords is by no means new. The best evidence we have
found in the literature to support this conjecture is a study of pass-
word systems reported by Adams and Sasse [1], comprising 139
responses to a web-based questionnaire and 30 semi-structured in-
depth interviews. The hazard of primary concern in this paper was
documented there as follows:
Someusersdevisetheirownmethodsforcreatingmem-
orable multiple passwords through related passwords
(linking their passwords via some common element)
— 50% of questionnaire respondents employed this
method. Many users try to comply with security rules
byvaryingelementsintheselinkedpasswords(name1,
name2, name3, and soforth).
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’10, October 4–8, 2010, Chicago, Illinois, USA.
Copyright 2010 ACM 978-1-4503-0244-9/10/10 ...$10.00.
Although Adams and Sasse reveal that 50% of questionnaire re-
spondents reported “linking their passwords via some comment el-
ement”, it is left unresolved as to whether these linkages are typ-
ically of such a trivial variety. After all, many semantic linkages
(e.g., passwords developed from the ﬁrst names of the members of
a family with which the user is acquainted) may not be nearly so
simple to exploit in an automated fashion, while still representing
“related passwords” to the user. Quantifying the pervasiveness of
176easily exploited linkages between old and new passwords is at the
heart of what we explore in this paper.
Speciﬁcally, we consider the challenge of attacking future pass-
words from past ones for the same accounts using a transform-
based search strategy. Our key algorithmic contribution is showing
that an optimal strategy for searching out new passwords from old
ones (in our transform-based framework) is NP-hard to develop —
one of the few pieces of good news we have to offer defenders —
but is also efﬁciently approximable. We then apply this approxi-
mation algorithm to our dataset to generate approximately optimal
search strategies, and demonstrate the effectiveness of those search
strategies in breaking future passwords from past ones.
The high-order results of our study are alarming, albeit not sur-
prising in light of previous conjectures. We show, for example, that
by instantiating our transform-based algorithmic framework with a
particular class of transforms, we can break future passwords from
past ones in 41% of accounts on average in an ofﬂine attack with
expected effort of under 3 seconds per account on a 2.67GHz pro-
cessor. We also show that we can break 17% of accounts on av-
erage in an online attack, with fewer than 5 online guesses in ex-
pectation. Our study additionally reveals a complex relationship
between the susceptibility of accounts to transform-based attacks
and the strengths of passwords chosen in those accounts. In other
results, our study reveals that the previous use of syntactic trans-
forms in selecting passwords is a strong indicator of their future
use: among accounts exhibiting such a previous use of transforms
from a class that we will deﬁne, we can break future passwords
from past ones using the same class of transforms in 63% of ac-
counts on average in an ofﬂine attack with a similar level of effort.
We also study particular subclasses of transforms; here the results
are as much curious as they are alarming. For example, the past
substitution of characters by their “leet” equivalents (or vice versa)
or by characters residing on the same keyboard keys (e.g., “3” by
“#”) signals the future use of such substitutions in only 5% of ac-
counts, but predicts the future use of a broader class of substitutions
(that we will deﬁne) in 75% of accounts.
To summarize, the contributions of our paper are as follows. We
provide an algorithmic framework for attacking future passwords
from expired ones, show that ﬁnding the optimal search order in
that framework is NP-hard, and provide an efﬁcient algorithm for
generating an approximately optimal search order (§3). We then
apply these results to a large, real-world dataset to provide the ﬁrst
analysis of the utility of password expiration for its intended pur-
pose (§4). We close with a discussion of the implications of our
study (§5) and then conclude (§6).
2. RELATED WORK
Our study focuses on password choices over time, forced by ex-
piration. Others have focused on the relationships among users’
password choices in different scenarios. For example, several stud-
ies have examined how users choose passwords for multiple sites
during the same time period (e.g., [1, 12, 7, 28]). Since each user
is free to choose the same password for many sites, this scenario
presumably results in less password variation than the scenario we
consider, where the user is precluded from reusing an expired pass-
word (in our dataset, for a year; see §4). Shay et al. [22] stud-
ied password choices forced by a substantial change in password
policy, where one might suspect that users’ new passwords would
differ more from their old ones than in the scenario we evaluate
(where password policy remained constant over time). In addition
to exploring a different setting than the above works, our study con-
tributes by providing an algorithmic framework and empirical mea-
surement of the incremental cost of ﬁnding new passwords from
previous ones. Moreover, unlike studies conducted in a laboratory
environment (e.g., [7, 28]) or based on self-reported data (e.g., [1,
22]), ours directly employs user password choices in practice.
There are other hazards of password expiration that we do not
consider here. For example, Adams and Sasse [1] and Stanton et
al. [25] report that frequent password expiration causes users to
write down their passwords or to choose very simple passwords
that would be more easily broken by a dictionary attack. Lacking
a comparable dataset of passwords for a system that does not per-
form expiration, we have no baseline against which to evaluate the
second claim, in particular. Patterson [21] reported anecdotally that
a user circumvented a password expiration system that recorded a
ﬁxed number of each user’s most recent passwords to prevent their
reuse, by changing his password repeatedly until his favorite is cy-
cled off the list and so could be set again. Since the system from
which our data was obtained prevents the reuse of a password for a
year, it was not vulnerable to such practices.
More distantly related to our work are password strength or mem-
orability studies without speciﬁc attention to expiration (e.g., [18,
10, 9, 14]), proposals to help users memorize passwords (e.g., [16,
15, 13]), and proactive checking to force users to choose strong
passwords (e.g., [14, 23, 4, 27]). Algorithms for password crack-
ing (absent previous passwords for the same account) has also been
an active ﬁeld of research (e.g., [20, 19, 26]); as we will describe,
we utilized some of these techniques in order to initially crack pass-
words as a precursor to our study (see §4). To our knowledge, how-
ever, our study here is the most extensive algorithmic and quantita-
tive analysis to date of attacking new passwords from expired ones.
3. TRANSFORM-BASED ALGORITHMS
As discussed in §2, reports such as that by Adams and Sasse [1]
suggest that users often respond to password expiration by trans-
forming their previous passwords in small ways. In this section,
we use this insight to develop an algorithmic framework that takes
as input an old password σk for account k, and that searches for
the new password πk for that account. Our algorithmic framework
tries to guess πk by building from σk using a set T of primitive
transforms. If P denotes the password space, then each transform
t : P → P ∪ {⊥} is a deterministic algorithm that takes as in-
put a password and that produces a new password or ⊥ (failure).
Intuitively, we think of each transform as making a small modiﬁ-
cation to an existing password (e.g., change the ﬁrst “a” to “A”).
If the transform is not applicable to the existing password (e.g.,
the password has no “a”), then the transform produces ⊥. Let
T = Sd
ℓ=1 T ℓ be the set of all sequences of transforms up to length
d, which can be organized as a tree rooted at an additional, empty
sequence h·i and in which ancestors of any node ~t ∈ T are exactly
the preﬁxes of ~t. An example such tree is shown in Figure 1.
When searching T to generate πk, the adversary visits the nodes
of T in some order ~t1~t2... Visiting a new node ~ti requires the ap-
plication of a single additional primitive transform t ∈ T to extend
some ~ti′ earlier in the order, i.e., such that i′ < i. In doing so,
the adversary produces a new guess ~ti(σk) for πk. However, be-
cause it is possible that ~ti(σk) = ⊥ (i.e., ~ti(σk) fails) or ~ti(σk) ∈
Si′<i{~ti′ (σk)} (i.e., ~ti(σk) resulted in a duplicate guess), search-
ing T generally yields fewer than |T | unique guesses.
The order in which the adversary searches T can make a large
difference in the performance of the search to ﬁnd πk, particularly
since the size of T grows exponentially in d (speciﬁcally, |T | =
((|T|d+1 − 1)/(|T| − 1)) − 1).
In the rest of this section, we
explore algorithms for optimizing this order using old passwords
σ1..n and corresponding new passwords π1..n for a collection of
accounts 1..n as “training data”.
177σk ="password"
πk =
"pa$sword"?
πk =
"Password"?
s → $
p → P
s → $
p → P
s → $
p → P
πk =
πk =
πk =
"pa$$word"?
"Pa$sword"?
"Pa$sword"?
⊥
Figure 1: An example transform tree T . Each node repre-
sents the transform sequence ~t encountered on the path from
the root to this node, which in this case is composed of location-
independent transforms (i.e., TLI, see §3.3). Depth is d = 2. A
search begins at the root with an input password σk. Upon vis-
iting a node, the last transform in the corresponding sequence is
applied to the output (if not ⊥) of its parent node. Each output
is tested for equality with the target password πk by hashing it.
More speciﬁcally, consider a random account r R← {1..n}. Let
~t(σr) = πr denote the event that the sequence ~t ∈ T , applied in
order to a password σr, will produce πr, and so P `~t(σr) = πr´ is
the probability of this event under random choice of r. Let πr ∈
~t(σr) = πr, i.e., that there is some
T (σr) denote the event W~t ∈T
~t ∈ T such that ~t(σr) = πr. The sense in which we seek to
optimize the search order for the nodes of T is to minimize the
expected number of nodes of T that need to be searched, under
random choice r of account, conditioned on the event πr ∈ T (σr).
As such, we consider the following problem:
EXPECTED MIN TRANSFORM SEARCH (emts): Given is
a set T of transforms, a depth d, and collections σ1..n and
π1..n of old and new passwords, respectively, for accounts
1..n. Let T = Sd
ℓ=1 T ℓ, and let orderemts : T → {1..|T |}
be a bijection, such that for any distinct ~t, ~u ∈ T , if ~t is a
preﬁx of ~u, then orderemts(~t) < orderemts(~u). The objective
is to ﬁnd orderemts so as to minimize
E(min{i : ~ti(σr) = πr} | πr ∈ T (σr))
(1)
where ~ti = order−1
with respect to random selection of r R← {1..n}.
emts(i) and where the expectation is taken
paths from the root (transform sequences) both produce “Pa$sword”
from “password”; in this case, this occurs because the transform
sequences ~t and ~u that produce them are equivalent. This can hap-
pen even when ~t and ~u are not equivalent, such as if ~t replaces all
instances of “s” with “$”, ~u replaces the ﬁrst character (whatever
it is) with “$”, and the input password is σk = steve79#.
Such overlap in coverage is characteristic of set cover problems,
and in fact we can show the NP-hardness of emts by reducing from
the following NP-hard problem:
MIN SUM SET COVER (mssc) [11]: Given is a set U and
a collection S of subsets of U where SS ∈S S = U . Let
ordermssc : S → {1..|S|} be a bijection, and let covermssc :
U → {1..|S|} be deﬁned by
covermssc(j) = min
S ∋j
ordermssc(S),
covermssc(j).
i.e., covermssc(j) is the ﬁrst subset in the ordering to con-
tain j. The objective is to ﬁnd ordermssc so as to minimize
Pj∈U
Given an instance (U, S) of MIN SUM SET COVER, denote U =
{1..n}. We reduce this instance of mssc to an equivalent instance
of emts by creating, for each j ∈ U , an “account” with a pair of
old and new passwords, and for each S ∈ S, a transform that maps
the old passwords for the accounts corresponding to its elements to
their new passwords. Speciﬁcally, for each j, create an old pass-
word σj and a new password πj, such that σ1..n and π1..n comprise
2n distinct passwords. For each S ∈ S, create a primitive trans-
form tS such that tS (σj) = πj if j ∈ S and such that tS fails on
any other input. The set of |S| such primitive transforms comprise
the set T. Set depth d = 1.
Consider any orderemts for searching T . Set ordermssc(S) ←
orderemts(htSi). Then,
E(coveremts(r) | πr ∈ T (σr))
= E (coveremts(r)) since πk ∈ T (σk) for all k
=
=
n
X
i=1
n
X
i=1
n
=
X
i ·
i=1
1
n X
j∈U
=
i · P (coveremts(r) = i)
i ·
|{k ∈ {1..n} : coveremts(k) = i}|
n
|{j ∈ U : covermssc(j) = i}|
n
covermssc(j)
In words, the EXPECTED MIN TRANSFORM SEARCH problem
is to ﬁnd a search order for T that minimizes the expected cost
of ﬁnding πr from σr (when πr can be generated σr, i.e., when
πr ∈ T (σr)) for a randomly selected account r.
It will be convenient later to have the additional notation
coveremts(k) = min
~t:~t(σk)=πk
orderemts(~t)
for any πk ∈ T (σk). Then, we can equivalently write (1) as
E(coveremts(r) | πr ∈ T (σr))
3.1 NP-Hardness of emts
A challenging aspect of EXPECTED MIN TRANSFORM SEARCH
is that multiple transform sequences ~t can transform the same input
into the same output. One example is shown in Figure 1, where two
Thus, orderemts minimizes E(min{i : ~ti(σr) = πr} | πr ∈ T (σr))
if and only if ordermssc minimizes Pj∈U
covermssc(j).
3.2 Approximation Algorithm for emts
Feige et al. [11] provided an efﬁcient greedy algorithm Bmssc that
is a 4-approximation for mssc. Speciﬁcally, Bmssc deﬁnes its order
orderBmssc as follows: order−1
Bmssc(i) is the set S that includes the
Bmssc(i′).
most elements of U that are not included in Si′<i
The algorithm Bmssc can be used to build a 4d-approximation
algorithm Bemts for emts, as follows. Deﬁne for each ~t ∈ T the
set S~t ← {k : ~t(σk) = πk}, and let S ← {S~t }~t ∈T and U ←
S~t ∈T S~t . Bmssc(U, S) then induces an order orderBmssc on these
sets and, in turn, the corresponding transform sequences; if i =
orderBmssc(S~t ), then denote ~t by ~ui. Note that ~u1, ~u2, .., however,
might not constitute a feasible search order for T , since each ~ui
order−1
178might not be preceded by its preﬁxes. The algorithm Bemts thus
works by inserting the preﬁxes of ~ui just before ~ui, as needed.
ℓ=1 T ℓ
for ~t ∈ T do
S~t ← {k : ~t(σk) = πk}
Algorithm Bemts(T, d, σ1..n, π1..n):
1: T ← Sd
2:
3:
4: U ← S~t ∈T S~t ; S ← {S~t }~t ∈T
5: orderBmssc ← Bmssc(U, S)
6:
7:
8:
9:
10:
11:
12:
13: return orderBemts
~t ← ~u : orderBmssc (S~u ) = i′
for i′′ = 1..|~t| do
i ← i + 1
orderBemts (~t[1..i′′]) ← i
i ← 0
for i′ = 1..|T | do
if ~t[1..i′′] 6∈ {order−1
Bemts
(1)..order−1
Bemts
Figure 2: Search algorithm Bemts
More speciﬁcally, Bemts creates a new order orderBemts as shown
in Figure 2. It ﬁrst queries Bmssc(U, S) (line 5) using U and S cre-
ated as described above (lines 2–4). It then steps through the nodes
of T in the order that orderBmssc prescribes for their corresponding
sets S (lines 7–8). For each ~t considered, the algorithm inserts any
missing preﬁxes of ~t (lines 9–12) and, ﬁnally, ~t itself (lines 9–12
when i′′ = |~t|). Note that in line 10, the notation ~t[1..i′′] denotes
the length-i′′ preﬁx of ~t.
For any k such that πk ∈ T (σk), deﬁne
coverBmssc(k) = min
∋k
S~t
orderBmssc(S~t )
coverBemts(k) =
min
~t:~t(σk)=πk
orderBemts(~t)
mssc and cover∗
and let cover∗
emts denote the functions covermssc and
coveremts resulting from optimal solutions to mssc instance (U, S)
and emts instance (T, d, σ1..n, π1..n), respectively. Then,
E(coverBemts (r) | πr ∈ T (σr))
E(cover∗
emts(r) | πr ∈ T (σr))
·
E(coverBmssc (r) | πr ∈ T (σr ))
E(cover∗
emts(r) | πr ∈ T (σr ))