counts maintained by the Impostor proxy. By contrast,
knowing the KLASSP shared secret is worth little unless
the attacker observes a login session. This reduces the
required complexity of the shared secret considerably.
Cheswick [5] examines the use of Challenge-Response
authentication mechanisms to evade spyware. The ad-
vantage of such systems is that a spy who observes a
successful login session cannot perform a replay attack:
the challenge will be diﬀerent for each event and ob-
serving a single response helps the attacker very lit-
tle. Cheswick reviews a number of approaches from the
point of view of usability. The most secure approaches
require a user to carry a hardware device or a piece
of paper. The tradeoﬀ between usability and security
remains an open question.
Several one time password systems exist that limit the
phisher’s ability to exploit any information he obtains.
SecureID from RSA gives a user a password that evolves
over time, so that each password has a lifetime of only
a minute or so. This solution requires that the user be
issued with a physical device that generates the pass-
word. One time passwords can be based on an SKEY
approach [17]. This solution requires considerable in-
frastructure change on the server side, and has not seen
any signiﬁcant deployment to general users.
Florˆencio and Herley [7] describe a simple trick that
users can employ to confound keyloggers by obfuscat-
ing their passwords. We review the method in Section
2.1, and an elaboration of it forms the basis of one of
our approaches. Due to the relevance of that trick to
KLASSP, we give a brief overview of that trick.
2.1 Embedding the Password in Random Keys
Extracting a password from a sequence of keystrokes
is generally not hard. For example, here is a sequence
of keys typed while the browser had focus:
hotmail.comsarahj7@hotmail.comsnoopy2
(1)
Clearly, the ﬁrst characters were typed into the address
bar to navigate to the hotmail login page; the next
characters give out the userid and password of this user.
In [7] we show one way to make the attacker’s job
harder: embedding the actual password in a sequence
of random keys, typed outside the text ﬁeld of the login
page. Instead of the password snoopy2 the keylogger
now gets, for example:
laspqm5nsdgsos8gfsodg4dpuouuyhdg2
(2)
The password is now embedded in random keys, making
extracting it a lot harder. Note however that the server
is not confused by the extra characters; the browser will
diﬀerentiate between the legitimate characters (typed
when the password ﬁeld has focus) and the random
characters (typed somewhere else), and only forward
3
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006As with the client embedding case in Section 2.1 the
key question is how the proxy can determine which keys
belong to the true password, and which are random ad-
ditions. One possible solution is that the proxy prompts
the user when a password key should be typed. For ex-
ample, suppose the proxy displayed a prompt at every
key typed by the user: a 0 meaning that the next key
should be randomly chosen, and a 1 meaning that it
should be the next key of the password. This can eas-
ily be accomplished using JavaScript on the proxy login
page. The problem is that this is too easily defeated.
If the spyware does a screen capture at each keystroke
it will see the prompts, and it is a simple matter to
then determine which keys belong to the password and
which are fake. Anything we display on the untrusted
machine must be assumed to be visible to the spyware.
Our scheme works as follows. The user sets up an
account with the KLASSP server. She is assigned a
shared-secret. For example, a simple shared-secret would
be a symbol that will act as her prompt, and a position
in a symbol table where she will look for it. She also
enters the userids of the accounts that she may be ac-
cessing via the proxy server. Note that, after registra-
tion, access to the KLASSP webserver is not password
protected: when the user is using the proxy to login (for
example) to hotmail the userid PI:EMAIL
combined with the target login domain suﬃces to uniquely
identify her. This enables the proxy to determine the
unique prompt symbol and symbol table position for
that user.
Suppose we have M symbols and N positions in the
table. When entering the password the entire sym-
bol table will be refreshed every time a key is entered.
When the user sees her assigned symbol in her assigned
position she types the next key of her password; other-
wise she types a random key. Now, even assuming that
the spyware does a screencapture at every keystroke it
is not obvious which keys are which. The evolution of
the sample symbol table is shown in Figure 2. At each
key the table changes. When the user sees the assigned
symbol appear in the assigned position she types the
next key of the password; otherwise she types a ran-
dom key. After the last key of the password the user
clicks a submit button to indicate that the password is
complete (recall that neither the password nor its length
are stored at the proxy).
3.1.1 Analysis
To prevent spyware from determining which symbol
and which position in the table prompts the user to en-
ter a true password key we must be careful of the statis-
tics of the symbol changes. If we assume the average
password is 8 characters long, and that an average of
k random characters between successive keys is accept-
able, then a total of (k + 1)8 characters will be typed.
Figure 1: The basic design. All traﬃc from the browser
on the untrusted machine ﬂows through a MITM proxy.
The user enters the password using an obscuring method;
it is unobscured at the proxy. Once login is established
the proxy reverts to a passive rˆole.
the legitimate ones to the server.
This simply trick evades most current keyloggers. Un-
fortunately, as explained in [7], it is not a general so-
lution: keyloggers could be modiﬁed to log additional
information (e.g., mouse clicks or screen shots), that
would allow the attacker to recover the original pass-
word.
3. USING A MITM PROXY
While the method of [7] has a number of weaknesses,
the idea of embedding the actual password (signal) in
a large number of random keystrokes (noise) is a valu-
able one. The problem is that all of the information
the keylogger needed was present (albeit hard to get
at) on the compromised machine (this is also true of
on-screen keyboards and alternative login approaches).
Simply taking a screenshot at each keystroke would al-
low capturing of the password. Equally, an attacker
who instals a spyware plug-in in the browser would see
all of the encrypted traﬃc, including passwords, in the
clear.
To avoid leaving the password in any accessible form
on the untrusted machine we now explore the possibil-
ity of logging in via a MITM proxy. All traﬃc between
the user’s browser and the end login server will ﬂow
through the proxy as in Figure 1. Our goal is that
the user will enter an obscured version of the password,
and the proxy will unobscure before passing to the lo-
gin server. Thereafter the proxy reverts to a passive
rˆole, but remains in the middle. We’ll explore two main
approaches to obscuring the password: obfuscating it
by embedding it in random characters, and mapping it
using a simple encryption table. The key challenges in
designing an obscuring method achieving a good trade-
oﬀ between usability and security.
It is worth emphasizing that the proxy does not act
as a password management system; i.e. the user’s pass-
word is not stored on the proxy (recall from Section 2
that password management systems oﬀer no protection
against keyloggers).
3.1 Obscuring Using a Prompt Table
4
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006(a)
(b)
(c)
(d)
♣ ♣ ♠ ♦ ♥ ♣ ⊕ ♠ ♠ ⊕
♠ ♥ ♠ ♥ ⊕ ♦ ♣ ⊕ ♦ ♠
♦ ♠ ⊕ ♥ ♥ ♣ ♦ ♣ ⊕ ♥
look for the sequence ♣♠♦♥♣♠♦♣. That is she types
the ﬁrst character of the password on seeing ♣for the
ﬁrst time, the second on seeing ♠, and so on. The
shared-secret space now becomes N(k +1)8 for a length
8 password, which gives 39e6 possibilities for k = 4 and
a table of size 100.
⊕ ♦ ♦ ♠ ⊕ ♥ ⊕ ♥ ♥ ♠
3.2 Obscuring Using Known Images
Figure 2: Symbol table as the user types, where the table
is of size N = 10 and there are M = 5 symbols: ♣, ♦, ♥, ♠
and ⊕. The line (a) represents the prompt for the ﬁrst
key, (b) for the second and so on. A user who has been
assigned position 7 and the symbol ♦ would type random
characters for the ﬁrst, second and fourth prompt and a
true password key at the third. The sequence she sees is
⊕♣♦⊕· · · .
The assigned symbol must appear in the assigned posi-
tion 8 times. Any other symbol should appear the same
number of times over the course of the (k + 1)8 char-
acters. Hence, we can allow only M = k + 1 distinct
symbols to avoid compromising the scheme statistically.
Since the spyware does not know which position is as-
signed to the user there will be a total of N(k + 1) pos-
sible passwords for the spyware to check. If we assume
that an average of k = 4 random characters between
successive password keys is acceptable, and a table of
size N = 100 is not too large this leaves us with 500
passwords that the spyware must consider. We will ex-
amine in Section 3.3.1 what level of security this pro-
vides from an entropy point of view.
3.1.2 Other Shared-Secrets
In the simple shared secret example the size of the se-
cret space equals the size of the table times the number
of symbols; i.e. N(k + 1). We wish to have the largest
possible shared secret space to prevent entropy or brute
force attacks on the password (as in Section 3.3.1) while
making the proxy use-model simple. Too large a table
becomes diﬃcult to display. There are a number of sim-
ple possibilities to expand the shared-secret space with-
out enlarging the table. The ﬁrst we employ is asking
the user to look for her assigned symbol in two diﬀerent
positions: if it occurs in either she types the password
key, and if not she types a random key. This increases
the number of shared secrets to N 2(k + 1) where N is
the table size. Using again four random characters on
average between true passwords keys, and a size 100 ta-
ble this increases the shared-secret space to 50000. In
general if the user scans p positions for the symbol at
each character we can achieve a space of size N p(k + 1).
A second possibility is to ﬁx a single position, but
have the user look for a sequence of symbols rather
than a single assigned symbol. For example, for an
8-character password the user might be instructed to
5
There is a large number of possible passwords if we
use the prompt table and one of the shared secrets of
Section 3.1.2. However, entering the password becomes
harder and more error prone as the size of the possible
password space increases. We now explore the possibil-
ity of prompting the user with images with which they
are familiar.
At registration time the user uploads a number of im-
ages, at least equal to the length of the longest password
she will use, say L. These are her own personal images.
They can be pictures of friends, objects, travel scenes;
they can be taken by her personally or obtained else-
where, the only requirement is that she be able to dis-
tinguish her images from other randomly chosen ones.
Using this scheme the login procedure is much as in Sec-
tion 3.1, but instead of being presented with a prompt
table she is shown a new image after every keystroke.
The images are chosen randomly from a collection of
5L, where L are the images that she uploaded, and 4L
are images with which she has no association. On seeing
an image she types the next character of her password
if the image is one of hers, and a random character
otherwise.
It has been our experience that users en-
ter passwords more accurately and reliably using this
method than using the prompt table approach.
3.2.1 Analysis
Assuming that an attacker has no cues to help him
determine which images are the users there are (k + 1)p
possible passwords where p is the password length.
Obviously all 5L of the images must be stripped of all
metadata that might allow an attacker to classify which
L belong to the user. Further, the same 4L random
images should be used over and over again as the user
logs in many time. In a community of a large number
of users employing this login method each user might
be assigned the L images from each of 4 other users.
3.3 Attacks
The methods explored in Sections 3.1 and 3.2 rely
upon the insertion of random characters to confuse a
keylogger. This implies that the actual passwords char-
acters are still all present, allowing an attacker to use
entropy or collusion to try and recover the password.
We now analyze these attacks.
3.3.1 Entropy Attacks
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006Using the fact that actual passwords chosen by users
commonly have low entropy, an attacker may be able to