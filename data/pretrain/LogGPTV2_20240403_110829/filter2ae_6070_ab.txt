      }
      WindowsServer2016or2019 := []byte{
        0x03, 0x00, 0x00, 0x13, 0x0e, 0xd0, 0x00, 0x00, 0x12, 0x34, 0x00, 0x02,
        0x0f, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00,
      }
      signatures := map[string][]byte{
        "Windows 2000":                Windows2000,
        "WindowsServer2012R2":         WindowsServer2012R2,
        "Windows Server 2008":         WindowsServer2008,
        "Windows 7 or Server 2008 R2": Windows7OrServer2008R2,
        "Windows Server 2008 R2 DC":   WindowsServer2008R2DC,
        "Windows 10":                  Windows10,
        "Windows 8 or Server 2012":    WindowsServer2012Or8,
        "Windows Server 2016 or 2019": WindowsServer2016or2019,
      }
      for fingerprint, signature := range signatures {
        signatureLength := len(signature)
        if len(r.data) 
    -- @output
    -- PORT     STATE SERVICE
    -- 3389/tcp open  ms-wbt-server
    -- |   Security layer
    -- |     CredSSP (NLA): SUCCESS
    -- |     CredSSP with Early User Auth: SUCCESS
    -- |     Native RDP: SUCCESS
    -- |     RDSTLS: SUCCESS
    -- |     SSL: SUCCESS
    -- |   RDP Encryption level: High
    -- |     40-bit RC4: SUCCESS
    -- |     56-bit RC4: SUCCESS
    -- |     128-bit RC4: SUCCESS
    -- |     FIPS 140-1: SUCCESS
    -- |_  RDP Protocol Version:  RDP 5.x, 6.x, 7.x, or 8.x server
它实现获取Security layer，是遍历发送协议，如果返回包支持则支持。这个可以很容易实现。
在之前封装的返回包结构中加上获取支持协议的文本
    func (r *RdpResp) SupportProtocol() string {
      if r.Type == TYPE_RDP_NEG_FAILURE {
        return ""
      }
      switch r.Result {
      case PROTOCOL_HYBRID_EX:
        return "PROTOCOL_HYBRID_EX"
      case PROTOCOL_RDSAAD:
        return "PROTOCOL_RDSAAD"
      case PROTOCOL_HYBRID:
        return "PROTOCOL_HYBRID"
      case PROTOCOL_SSL:
        return "PROTOCOL_SSL"
      case PROTOCOL_RDP:
        return "PROTOCOL_RDP"
      case PROTOCOL_RDSTLS:
        return "PROTOCOL_RDSTLS"
      }
      return ""
    }
封装协议枚举函数
    // 获取RDP支持的协议
    func GetSupportProtocol(address string, port uint16, timeout time.Duration) []string {
      ret := make([]string, 0)
      for _, v := range []uint32{PROTOCOL_RDP, PROTOCOL_SSL, PROTOCOL_HYBRID, PROTOCOL_HYBRID_EX, PROTOCOL_RDSTLS, PROTOCOL_RDSAAD} {
        conn, err := DialTCP(address, port, timeout)
        if err != nil {
          panic(err)
        }
        rdp := NewReq(v, []byte("w8ay"))
        buff := rdp.Serialize()
        err = Send(conn, buff, timeout)
        if err != nil {
          continue
        }
        response, err := Recv(conn, timeout)
        if err != nil {
          continue
        }
        resp, _ := ParseRdpResp(response)
        if resp != nil {
          if resp.Type == TYPE_RDP_NEG_RSP {
            ret = append(ret, resp.SupportProtocol())
          }
        }
        time.Sleep(time.Millisecond * 100)
      }
      return ret
    }
不清楚fofa的flag是怎么实现的，相同的IP使用这种方式能识别出的协议更多。
RDP Protocol Version的获取要实现MCS结构，太麻烦不做了，资料在
[https://learn.microsoft.com/en-us/openspecs/windows\\_protocols/ms-rdpbcgr/379a020e-9925-4b4f-98f3-7d634e10b411](https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-rdpbcgr/379a020e-9925-4b4f-98f3-7d634e10b411
"https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-rdpbcgr/379a020e-9925-4b4f-98f3-7d634e10b411")
## NTLM 信息获取
> 大佬说： **tls连接后会进行ntlmssp的挑战响应，能够非常准确的提取出来主机名和操作系统的版本**
RDP文档中写道，为了安全考虑，可以直接走TLS协议并使用CredSSP进行验证。CredSSP可以使用ntlm验证进行信息获取。
nmap有一个脚本用于提取ntlm信息 
    -- @output
    -- 3389/tcp open     ms-wbt-server syn-ack ttl 128 Microsoft Terminal Services
    -- | rdp-ntlm-info:
    -- |   Target_Name: W2016
    -- |   NetBIOS_Domain_Name: W2016
    -- |   NetBIOS_Computer_Name: W16GA-SRV01
    -- |   DNS_Domain_Name: W2016.lab
    -- |   DNS_Computer_Name: W16GA-SRV01.W2016.lab
    -- |   DNS_Tree_Name: W2016.lab
    -- |   Product_Version: 10.0.14393
    -- |_  System_Time: 2019-06-13T10:38:35+00:00
    -    
文档：[https://learn.microsoft.com/en-us/openspecs/windows\\_protocols/ms-cssp/6aac4dea-08ef-47a6-8747-22ea7f6d8685?source=recommendations](https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-cssp/6aac4dea-08ef-47a6-8747-22ea7f6d8685?source=recommendations
"https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-cssp/6aac4dea-08ef-47a6-8747-22ea7f6d8685?source=recommendations")
请求体，negoToken字段是ntlm的结构，整个结构体要进行ASN.1编码。
嫌麻烦可以直接用nmap组好的数据包
它的返回信息见文档
[https://learn.microsoft.com/en-us/openspecs/windows\\_protocols/ms-nlmp/801a4681-8809-4be9-ab0d-61dcfe762786](https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-nlmp/801a4681-8809-4be9-ab0d-61dcfe762786
"https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-nlmp/801a4681-8809-4be9-ab0d-61dcfe762786")
里面值得关注的数据有 OSVersion，TargetName 以及以下的结构
    AvIDMap := map[uint16]string{
        1: "NetBIOSComputerName",
        2: "NetBIOSDomainName",
        3: "FQDN", // DNS Computer Name
        4: "DNSDomainName",
        5: "DNSTreeName",
        7: "Timestamp",
        9: "MsvAvTargetName",
      }
编写程序解析后就能获得想要的信息了。
获得的操作系统版本信息是基于` _Major-Minor-Build_ `的版本号，找到一个比较全的列表
写个爬虫就给爬下来了
再次运行下，就能得到操作系统的详细信息了。输出
    请求包
    00000000  03 00 00 2a 25 e0 00 00  00 00 00 43 6f 6f 6b 69  |...*%......Cooki|
    00000010  65 3a 20 6d 73 74 73 68  61 73 68 3d 77 38 61 79  |e: mstshash=w8ay|
    00000020  0d 0a 01 00 08 00 0b 00  00 00                    |..........|
    返回包
    00000000  03 00 00 13 0e d0 00 00  12 34 00 02 1f 08 00 08  |.........4......|
    00000010  00 00 00                                          |...|
    简单OS识别: Windows 10 
    支持协议 [PROTOCOL_RDP PROTOCOL_SSL PROTOCOL_HYBRID PROTOCOL_HYBRID_EX PROTOCOL_RDSTLS]
    NTLMSSP 返回包
    00000000  30 81 a8 a0 03 02 01 06  a1 81 a0 30 81 9d 30 81  |0..........0..0.|
    00000010  9a a0 81 97 04 81 94 4e  54 4c 4d 53 53 50 00 02  |.......NTLMSSP..|
    00000020  00 00 00 0c 00 0c 00 38  00 00 00 75 82 9a e2 5e  |.......8...u...^|
    00000030  53 34 ae 68 91 2c 56 00  00 00 00 00 00 00 00 50  |S4.h.,V........P|
    00000040  00 50 00 44 00 00 00 0a  00 61 4a 00 00 00 0f 53  |.P.D.....aJ....S|
    00000050  00 45 00 52 00 56 00 45  00 52 00 02 00 0c 00 53  |.E.R.V.E.R.....S|
    00000060  00 45 00 52 00 56 00 45  00 52 00 01 00 0c 00 53  |.E.R.V.E.R.....S|
    00000070  00 45 00 52 00 56 00 45  00 52 00 04 00 0c 00 53  |.E.R.V.E.R.....S|
    00000080  00 45 00 52 00 56 00 45  00 52 00 03 00 0c 00 53  |.E.R.V.E.R.....S|
    00000090  00 45 00 52 00 56 00 45  00 52 00 07 00 08 00 74  |.E.R.V.E.R.....t|
    000000a0  df 2b ea 65 14 d9 01 00  00 00 00                 |.+.e.......|
    NetBIOSComputerName:SERVER
    DNSDomainName:SERVER
    FQDN:SERVER
    Timestamp:2022-12-20 19:26:33
    Product_Version:10.0.19041
    Os_Verion:Windows 10, Version 2004/Windows Server, Version 2004
    TargetName:SERVER
    NetBIOSDomainName:SERVER
fofa中的信息
NTLM解析代码如下
    func RdpWithNTLM(conn net.Conn, timeout time.Duration) (map[string]any, error) {
      info := make(map[string]any)
      // CredSSP protocol - NTLM authentication
      // https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-cssp
      // https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-nlmp
      // http://davenport.sourceforge.net/ntlm.html
      NegotiatePacket := []byte{
        0x30, 0x37, 0xA0, 0x03, 0x02, 0x01, 0xff, 0xA1, 0x30, 0x30, 0x2E, 0x30, 0x2C, 0xA0, 0x2A, 0x04, 0x28,
        // Signature
        'N', 'T', 'L', 'M', 'S', 'S', 'P', 0x00,
        // Message Type
        0x01, 0x00, 0x00, 0x00,
        // Negotiate Flags
        0xF7, 0xBA, 0xDB, 0xE2,
        // Domain Name Fields
        0x00, 0x00, // DomainNameLen
        0x00, 0x00, // DomainNameMaxLen
        0x00, 0x00, 0x00, 0x00, // DomainNameBufferOffset
        // Workstation Fields
        0x00, 0x00, // WorkstationLen
        0x00, 0x00, // WorkstationMaxLen
        0x00, 0x00, 0x00, 0x00, // WorkstationBufferOffset
        // Version
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      }
      err := Send(conn, NegotiatePacket, timeout)
      if err != nil {
        return nil, err