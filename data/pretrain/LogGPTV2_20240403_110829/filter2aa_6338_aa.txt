# Proc 类
---
- https://www.kancloud.cn/imxieke/ruby-base/107309
---
# Proc 类是什么
所谓 `Proc`，就是使块对象化的类。`Proc` 与块的关系非常密切,下面，我们来看看如何创建与执行 `Proc` 对象。
- `Proc.new(...)`
- `proc{...}`
    创建 `Proc` 对象的典型方法是通过 `Proc.new` 方法，或者对 `proc` 方法指定块。
    ```ruby
    hello1 = Proc.new do |name|
    puts "Hello, #{name}."
    end
    hello2 = proc do |name|
    puts "Hello, #{name}."
    end
    hello1.call("World")    #=> Hello, World.
    hello2.call("Ruby")     #=> Hello, Ruby.
    ```
    利用 `Proc.new` 方法，或者对 `proc` 方法指定块，都可以创建代表块的 `Proc` 对象。
    通过调用 `Proc.call` 方法执行块。调用 `Proc.call` 方法时的参数会作为块变量，块中最后一个表达式的值则为 `Proc.call` 的返回值。`Proc.call` 还有一个名称叫 `Proc#[]`。
    ```ruby
    # 判断西历的年是否为闰年的处理
    leap = Proc.new do |year|
    year % 4 == 0 && year % 100 != 0 || year % 400 ==0
    end
    p leap.call(2000)    #=> true
    p leap[2013]         #=> false
    p leap[2016]         #=> true
    ```
    将块变量设置为 |* 数组 | 的形式后，就可以像方法参数一样，以数组的形式接收可变数量的参数。
    ```ruby
    double = Proc.new do |*args|
    args.map{|i| i * 2 }    # 所有元素乘两倍
    end
    p double.call(1, 2, 3)    #=> [2, 3, 4]
    p double[2, 3, 4]         #=> [4, 6, 8]
    ```
    除此以外，定义普通方法时可使用的参数形式，如默认参数、关键字参数等，几乎都可以被用于块变量的定义，并被指定给 `Proc.call` 方法。
**lambda**
`Proc.new`、`proc` 等有另外一种写法叫 `lambda`。与 `Proc.new`、`proc` 一样，`lambda` 也可以创建 `Proc` 对象，但通过 `lambda` 创建的 `Proc` 的行为会更接近方法。
第一个不同点是，`lambda` 的参数数量的检查更加严密。对用 `Proc.new` 创建的 `Proc` 对象调用 `call` 方法时，`call` 方法的参数数量与块变量的数量可以不同。但通过 `lambda` 创建 `Proc` 对象时，如果参数数量不正确，程序就会产生错误。
```ruby
prc1 = Proc.new do |a, b, c|
  p [a, b, c]
end
prc1.call(1, 2)    #=> [1, 2, nil]
prc2 = lambda do |a, b, c|
  p [a, b, c]
end
prc2.call(1, 2)    #=> 错误（ArgumentError）
```
第二个不同点是，`lambda` 可以使用 `return` 将值从块中返回。下面的代码中 `power_of` 方法会利用参数 `n` 返回“计算 x 的 n 次幂的 Proc 对象”。请注意，返回值并不是数值，而是进行运算的 `Proc` 对象。调用 `power_of(3)` 后，结果就会得到 call 方法参数值的 3 次幂的 `Proc` 对象。从 `lambda` 中返回值时使用了 `return`，这里的 `return` 会将 `lambda` 中的值返回。
```
def power_of(n)
  lambda do |x|
    return x ** n
  end
end
cube = power_of(3)
p cube.call(5)  #=> 125
```
接下来，我们尝试用 `Proc.new` 方法改写代码。使用 `Proc.new` 方法时，在块中使用 `return` 后，程序就会跳过当前执行块，直接从创建这个块的方法返回。在本例中，即虽然块内的 `return` 应该从 `power_of` 方法返回，但由于程序运行时 `power_of` 方法的上下文会消失，因此程序就会出现错误。
```ruby
def power_of(n)
  Proc.new do |x|
    return x ** n
  end
end
cube = power_of(3)
p cube.call(5)  #=> 错误（LocalJumpError）
```
不是 `lambda` 的普通块中的 `return`，会从正在执行循环的方法返回。下面代码中的 `prefix` 方法会比较参数 `ary` 中的元素是否与 `obj` 相等，相等就返回在此之前的所有元素，不相等则返回空数组。第 6 行中的 `return` 并不会从块返回，而是跳过块，并作为 `prefix` 方法整体的返回值返回。
```ruby
def prefix(ary, obj)
  result = []               # 初始化结果数组
  ary.each do |item|        # 逐个检查元素
    result  [1, 2, 3]
```
`break` 被用于控制迭代器的行为。这个命令会向接收块的方法的调用者返回结果值。如下所示，`break []` 会马上终止 `Array.collect` 方法，并将空数组作为 `collent` 方法的整体的返回值返回。
```ruby
[:a, :b, :c].collect do |item|
  break []
end
```
> 用 `Proc.new` 方法或者 `proc` 方法创建的 `Proc` 对象的情况下，由于这些方法都接收块，在调用 `Proc.call` 方法的时候并没有适当的返回对象，因此就会发生错误。而 `lambda` 的情况下则与 `return` 一样，将值返回给 `Proc.call` 方法。另一方面，由于 `next` 方法的作用在于中断 1 次块的执行，因此无论如何创建 `Proc` 对象，都可以将值返回给 `call` 方法。
`lambda` 有另外一种写法——“`->( 块变量 ){ 处理 }`”。块变量在 `{ ～ }` 之前，看上去有点像函数。使用 `->` 的时候，我们一般会使用 `{ ～ }` 而不是 `do ～ end`。
```ruby
square = ->(n){ return n ** 2}
p square[5]    #=> 25
```
**通过 Proc 参数接收块**
在调用带块的方法时，通过 `Proc` 参数的形式指定块后，该块就会作为 `Proc` 对象被方法接收。下面代码在 `total2` 方法中，调用 `total2` 方法时指定的块，可以作为 `Proc` 对象从变量 `block` 中获取。
```ruby
def total2(from, to, &block)
  result = 0               # 合计值
  from.upto(to) do |num|   # 处理从 from 到 to 的值
    if block               #   如果有块的话
      result +=            #     累加经过块处理的值
   block.call(num)
    else                   #   如果没有块的话
      result += num        #     直接累加
    end
  end
  return result            # 返回方法的结果
end
p total2(1, 10)                   # 从 1 到 10 的和 => 55
p total2(1, 10){|num| num ** 2 }  # 从 1 到 10 的 2 次冥的和 => 385
```
**to_proc 方法**
有些对象有 `to_proc` 方法。在方法中指定块时，如果以 & 对象的形式传递参数，对象 `.to_proc` 就会被自动调用，进而生成 `Proc` 对象。
其中，`Symbol.to_proc` 方法是比较典型的，并且经常被用到。例如，对符号 `:to_i` 使用 `Symbol.to_proc` 方法，就会生成下面那样的 `Proc` 对象。
```ruby
Proc.new{|arg| arg.to_i }
```
这个对象在什么时候使用呢？例如，把数组的所有元素转换为数值类型时，一般的做法如下：
执行示例
```ruby
>> %w(42 39 56).map{|i| i.to_i }
=> [42, 39, 56]
```