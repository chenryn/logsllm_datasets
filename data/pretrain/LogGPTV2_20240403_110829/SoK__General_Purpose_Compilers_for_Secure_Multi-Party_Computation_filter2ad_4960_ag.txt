145–161, 2003.
[79] Yuval Ishai, Eyal Kushilevitz, Rafail Ostrovsky, and Amit Sahai.
In Foundations of Computer Science,
Extracting correlations.
2009. FOCS’09. 50th Annual IEEE Symposium on, pages 261–
270. IEEE, 2009.
[80] Yuval Ishai, Manoj Prabhakaran, and Amit Sahai. Founding
Cryptography on Oblivious Transfer - Efﬁciently. In CRYPTO
’08, pages 572–591, 2008.
[81] Yuval Ishai, Manoj Prabhakaran, and Amit Sahai.
Arithmetic Computation with No Honest Majority.
pages 294–314, March 2009.
Secure
In TCC,
[82] Karthik A. Jagadeesh, David J. Wu, Johannes A. Birgmeier, Dan
Boneh, and Gill Bejerano. Deriving genomic diagnoses without
revealing patient genomes. Science, 357(6352):692–695, 2017.
[83] Bargav Jayaraman, Haina Li, and David Evans. Decentralized
certiﬁcate authorities. arXiv preprint arXiv:1706.03370, 2017.
[84] Somesh Jha, Louis Kruger, and Vitaly Shmatikov. Towards
practical privacy for genomic computation.
In Security and
Privacy, 2008. SP 2008. IEEE Symposium on, pages 216–230.
IEEE, 2008.
[85] Liina Kamm, Dan Bogdanov, Sven Laur, and Jaak Vilo. A new
way to protect privacy in large-scale genome-wide association
studies. Bioinformatics, 29(7):886–893, April 2013.
[86] Liina Kamm and Jan Willemson. Secure ﬂoating point arith-
International
metic and private satellite collision analysis.
Journal of Information Security, pages 1–18, 2014.
[87] Alan F Karr, Xiaodong Lin, Ashish P Sanil, and Jerome P
Reiter. Privacy-preserving analysis of vertically partitioned data
using secure matrix products.
Journal of Ofﬁcial Statistics,
25(1):125, 2009.
[88] Jonathan Katz, Alex J. Malozemoff, and Xiao Wang. Efﬁ-
ciently enforcing input validity in secure two-party compu-
tation. Cryptology ePrint Archive, Report 2016/184, 2016.
https://eprint.iacr.org/2016/184.
[89] Marcel Keller, Emmanuela Orsini, and Peter Scholl. Actively
secure OT extension with optimal overhead. In Annual Cryp-
tology Conference, pages 724–741. Springer, 2015.
[90] Florian Kerschbaum, Thomas Schneider, and Axel Schr¨opfer.
Automatic protocol selection in secure two-party computations.
In Ioana Boureanu, Philippe Owesarski, and Serge Vaudenay,
editors, Applied Cryptography and Network Security, pages
566–584, Cham, 2014. Springer International Publishing.
[91] Joe Kilian. Founding cryptography on oblivious transfer.
In
STOC ’88, STOC ’88, pages 20–31, New York, NY, USA, 1988.
ACM.
´Agnes Kiss, Jian Liu, Thomas Schneider, N Asokan, and Benny
Pinkas. Private set intersection for unequal set sizes with mobile
applications. Proceedings on Privacy Enhancing Technologies,
2017(4):177–197, 2017.
[92]
[93] Vladimir Kolesnikov and Thomas Schneider. Improved Garbled
Circuit: Free XOR Gates and Applications.
In Proceedings
of the 35th international colloquium on Automata, Languages
and Programming, Part II, ICALP ’08, pages 486–498, Berlin,
Heidelberg, 2008. Springer-Verlag.
[94] Enrique Larraia. Extending oblivious transfer efﬁciently. In In-
ternational Conference on Cryptology and Information Security
in Latin America, pages 368–386. Springer, 2014.
[95] Yehuda Lindell and Benny Pinkas. A Proof of Security of Yao’s
Protocol for Two-Party Computation. Journal of Cryptology,
22(2):161–188, 2009.
[96] Yehuda Lindell and Benny Pinkas. Secure Multiparty Com-
putation for Privacy-Preserving Data Mining. The Journal of
Privacy and Conﬁdentiality, 1(1):59–98, 2009.
[97] Chang Liu, Xiao Shaun Wang, Kartik Nayak, Yan Huang, and
Elaine Shi. ObliVM: A programming framework for secure
computation. In Proceedings of the 2015 IEEE Symposium on
Security and Privacy, SP ’15, pages 359–376, Washington, DC,
USA, 2015. IEEE Computer Society.
[98] Steve Lu and Rafail Ostrovsky. How to garble RAM programs.
In EUROCRYPT, pages 719–734. Springer, 2013.
[99] Dahlia Malkhi, Noan Nisan, Benny Pinkas, and Yaron Sella.
In
Fairplay – A Secure Two-Party Computation System.
USENIX Security Symposium ’04, 2004.
[100] Payman Mohassel and Peter Rindal. Aby3: A mixed protocol
framework for machine learning.
In Proceedings of the 2018
ACM SIGSAC Conference on Computer and Communications
Security, CCS ’18, pages 35–52, New York, NY, USA, 2018.
ACM.
[101] B. Mood, D. Gupta, H. Carter, K. Butler, and P. Traynor. Frigate:
A validated, extensible, and efﬁcient compiler and interpreter
for secure computation. In 2016 IEEE European Symposium on
Security and Privacy (Euro S&P), pages 112–127, March 2016.
[102] Moni Naor and Benny Pinkas. Oblivious polynomial evaluation.
SIAM Journal on Computing, 35(5):1254–1281, 2006.
[103] Jesper Buus Nielsen, Peter Sebastian Nordholt, Claudio Orlandi,
and Sai Sheshank Burra. A new approach to practical active-
secure two-party computation.
In Advances in Cryptology–
CRYPTO 2012, pages 681–700. Springer, 2012.
[104] Valeria Nikolaenko, Udi Weinsberg, Stratis Ioannidis, Marc
Joye, Dan Boneh, and Nina Taft. Privacy-preserving ridge
regression on hundreds of millions of records. In Security and
Privacy (SP), 2013 IEEE Symposium on, pages 334–348. IEEE,
2013.
[105] Jason Perry, Debayan Gupta, Joan Feigenbaum, and Rebecca N
Wright. Ssc protocol comparison tool. https://code.google.com/
archive/p/syssc-ui/. Accessed 2018-06-25.
[106] Jason Perry, Debayan Gupta, Joan Feigenbaum, and Re-
becca N Wright. Ssc protocol comparison tool. http://work.
debayangupta.com/ssc/. Accessed 2018-06-25.
[107] Jason Perry, Debayan Gupta, Joan Feigenbaum, and Rebecca N
Wright. Systematizing secure computation for research and
decision support. In International Conference on Security and
Cryptography for Networks, pages 380–397. Springer, 2014.
[108] Benny Pinkas, Thomas Schneider, Christian Weinert, and Udi
In
Wieder. Efﬁcient circuit-based psi via cuckoo hashing.
EUROCRYPT, pages 125–157. Springer, 2018.
[109] Pille Pullonen, Dan Bogdanov, and Thomas Schneider. The
design and implementation of a two-party protocol suite for
Sharemind 3. Cybernetica Research Reports T-4-17, 2012.
[110] Michael Rabin. How to exchange secrets by oblivious transfer.
Technical Report TR-81, Harvard University, 1981.
1235
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:48:10 UTC from IEEE Xplore.  Restrictions apply. 
[111] Aseem Rastogi, Matthew Hammer, and Michael Hicks. Wys-
teria: A Programming Language for Generic, Mixed-Mode
Multiparty Computations. In Security and Privacy (SP), 2014
IEEE Symposium on, pages 655–670. IEEE, May 2014.
[112] Aseem Rastogi, Nikhil Swamy, and Michael Hicks. Wys*: A
veriﬁed language extension for secure multi-party computations.
arXiv preprint arXiv:1711.06467, 2017.
[113] Microsoft Research.
Simple encrypted arithmetic library
https://www.microsoft.com/en-us/research/project/
(SEAL).
simple-encrypted-arithmetic-library/, 2016.
[114] Kurt Rohloff and Gerard Ryan. The PALISADE lattice cryp-
tography library. https://git.njit.edu/palisade/PALISADE, 2016.
https://github.com/rdragos/
[115] Drago Rotaru.
awesome-mpc.
awesome-mpc, 2018.
[116] Adi Shamir. How to share a secret. Commun. ACM, 22:612–
613, November 1979.
[117] Zihao Shan, Kui Ren, Marina Blanton, and Cong Wang. Practi-
cal secure computation outsourcing: A survey. ACM Computing
Surveys (CSUR), 51(2):31, 2018.
[118] Ebrahim M. Songhori, Siam U. Hussain, Ahmad-Reza Sadeghi,
Thomas Schneider, and Farinaz Koushanfar. TinyGarble: Highly
Compressed and Scalable Sequential Garbled Circuits. In IEEE
S & P, 2015.
[119] Lu Tian, Bargav Jayaraman, Quanquan Gu, and David Evans.
Aggregating private sparse learning models using multi-party
computation.
In NIPS Workshop on Private Multi-Party Ma-
chine Learning, Barcelona, Spain, 2016.
[120] Stefan Tillich and Nigel Smart. Circuits of basic functions
https://homes.esat.kuleuven.be/
suitable for mpc and fhe.
%7Ensmart/MPC. Accessed 21 June 2018.
[121] Marten Van Dijk. Secret key sharing and secret key generation.
PhD thesis, Eindhoven University of Technology, 1997.
[122] Xiao Wang, Alex J. Malozemoff, and Jonathan Katz. EMP-
toolkit: Efﬁcient MultiParty computation toolkit. https://github.
com/emp-toolkit, 2016.
[123] Xiao Wang, Alex J. Malozemoff, and Jonathan Katz. Faster
secure two-party computation in the single-execution setting.
In Advances in Cryptology - EUROCRYPT 2017 - 36th Annual
International Conference on the Theory and Applications of
Cryptographic Techniques, Paris, France, April 30 - May 4,
2017, Proceedings, Part III, pages 399–424, 2017.
[124] Xiao Wang, Samuel Ranellucci, and Jonathan Katz. Authenti-
cated garbling and efﬁcient maliciously secure two-party com-
putation. In Proceedings of the 2017 ACM SIGSAC Conference
on Computer and Communications Security, CCS ’17, pages
21–37, New York, NY, USA, 2017. ACM.
[125] Xiao Wang, Samuel Ranellucci, and Jonathan Katz. Global-
scale secure multiparty computation. In Proceedings of the 2017
ACM SIGSAC Conference on Computer and Communications
Security, CCS ’17, pages 39–56, New York, NY, USA, 2017.
ACM.
[126] Stephen Wiesner. Conjugate coding. SIGACT News, 15(1):78–
88, January 1983.
[127] Andrew Yao. Protocols for Secure Computations (Extended
Abstract). In FOCS ’82, pages 160–164, 1982.
[128] Andrew Yao. How to Generate and Exchange Secrets. In FOCS
’86, pages 162–167, 1986.
[129] Samee Zahur and David Evans. Obliv-C: A language for
extensible data-oblivious computation. IACR Cryptology ePrint
Archive 2015/1153, 2015.
[130] Samee Zahur, Mike Rosulek, and David Evans. Two halves
make a whole.
In Annual International Conference on the
Theory and Applications of Cryptographic Techniques, pages
220–250. Springer, 2015.
[131] Samee Zahur, Xiao Wang, Mariana Raykova, Adri`a Gasc´on,
Jack Doerner, David Evans, and Jonathan Katz. Revisiting
square-root oram: efﬁcient random access in multi-party com-
putation. In Security and Privacy (SP), 2016 IEEE Symposium
on, pages 218–234. IEEE, 2016.
[132] Nicholette Zeliadt. Cryptographic methods enable analyses
without privacy breaches. Nature Medicine, 20(6):563, June
2014.
[133] Yihua Zhang, Marina Blanton, and Ghada Almashaqbeh. Im-
plementing support for pointers to private data in a general-
purpose secure multi-party compiler. ACM Trans. Priv. Secur.,
21(2):6:1–6:34, December 2017.
[134] Yihua Zhang, Aaron Steele, and Marina Blanton. PICCO: A
general-purpose compiler for private distributed computation. In
Proceedings of the 2013 ACM SIGSAC Conference on Computer
& Communications Security, CCS ’13, pages 813–826, New
York, NY, USA, 2013. ACM.
APPENDIX A
INNER PRODUCT CODE
Here we include snippets of code that implement the
inner product function in each language. They have been
slightly modiﬁed from the versions on Github for length.
a) EMP-toolkit: Examples are contained in a single
ﬁle. They are compiled to a single executable using
CMake, which is executed by both parties.
void innerprod(int bits,
string inputs_a[],
string inputs_b[], int len) {
Integer sum(bits, 0, PUBLIC);
for( int i=0; i() input.size,1);
obliv int∗ v1 =
obliv int∗ v2 =
malloc(sizeof(obliv int) ∗ len);
malloc(sizeof(obliv int) ∗ len);
feedOblivIntArray(v1,
io->input.arr, len, 1);
feedOblivIntArray(v2,
io->input.arr, len, 2);
sum += v1[i] ∗ v2[i];
obliv int sum = 0;
for(int i = 0; i result), sum, 0);
c) ObliVM: Examples are a single ﬁle deﬁning the
secure computation. They are compiled and run using
several short scripts.
int main@n@m(int@n x, int@m y){
secure int32[public (n/32)] a;
secure int32[public (m/32)] b;
public int32 len = n/32;
for(public int32 i=0; iPutMULGate(s_x, s_y);
s_x = ac->PutSplitterGate(s_x);
for (i = 1; i set_wire_id(0,
ac->PutADDGate(s_x->get_wire_id(0),
s_x->get_wire_id(i)));
}
s_x->set_bitlength(1);
s_out = circ->PutOUTGate(s_x, ALL);
return s_out;
}
g) SCALE-MAMBA: A single ﬁle deﬁnes the se-
cure computation. To execute, one must deﬁne crypto-
graphic parameters, set up a certiﬁcate authority, and run
scripts to compile and execute the program.
sum = sint(0)
for i in range(3):
x1 = sint(i)
x2 = sint(i∗2)
prod = x1 ∗ x2
sum = sum + prod
print_ln("%s", sum.reveal())
h) Sharemind: Examples require a SecreC ﬁle that
deﬁnes the function and may include supporting ﬁles for
input and output. Execution depends on which platform
is used, but the provided VMs include scripts to compile
and execute supporting and secure code.
import shared3p;
domain pd_shared3p shared3p;
void main() {
pd_shared3p uint64 [[1]] a =
argument("a");
argument("b");
pd_shared3p uint64 [[1]] b =
pd_shared3p uint64 c = sum(a ∗ b);
publish("c", c);
}
i) PICCO: Examples require a function deﬁned
in PICCO’s C extension, two conﬁguration ﬁles, and
encoded input ﬁles. Execution is a multi-step process:
users must deﬁne certiﬁcates and running several custom
command-line tools.
PICCO includes an inner product operator.
public int LEN = 10;
public int main() {
int A[LEN], B[LEN];
smcinput(A,1,LEN);
smcinput(B,2,LEN);
int p = A @ B;
smcoutput(p,1);
return 0;
}
j) Frigate: Examples are contained in a single ﬁle
and compiled with a command-line tool.
int result = 0;
for(sint i=0; i<LEN; i++) {
result = result +
(alice.data[i] ∗ bob.data[i]);
}
output1 = result;
output2 = result;
k) CBMC-GC: Examples are contained in a C ﬁle
and compiled and simulated with a simple Make system.
product += INPUT_A.xs[i] ∗ INPUT_B.xs[i];
int product = 0;
for( int i=0; i<LEN; i++) {
}
return product;
1237
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:48:10 UTC from IEEE Xplore.  Restrictions apply.