the existing L2
against environment noises. In contrast,
cache based covert channels are sensitive to environment
noises. When other users access the cache, the contents in
the cache might be replaced. Thus, the protocol between
File11234110100Modify Page (Encoding)Test Write Time (Decoding)SenderReceiverHostShared PagesLoad File into MemoryLoad File into MemoryWait for System to Mergeload the same ﬁle into two memory regions. This would
result in every page of the ﬁle having an exact replica page
in the memory. If this is a virtualized environment where
memory deduplication works at the hypervisor level, the
memory deduplication mechanism will take effect on these
pages after some time, at which time, we can write to these
deduplicated pages and record their access time (t2), and we
should notice that t2 is clearly larger than t1 due to COW. By
contrast, in a non-virtualized environment without memory
deduplication enabled, there should not be any discernible
differences between t1 and t2.
III. KERNEL RUNTIME INTEGRITY MONITORING
Although we have demonstrated that the memory dedupli-
cation mechanism can be exploited by attackers, we found
that
it can also be used from a defender’s stand point.
In [2], the authors mentioned that page deduplication can be
leveraged to detect illegal applications and ﬁles on virtual
machines. Here we present one more scenario: using it to
monitor kernel read-only data’s integrity. Kernel read-only
data refers to the data that are not supposed to be changed
during kernel runtime, for example, system call table, which
is the target of many existing kernel rootkits.
As virtualization technologies have become more mature,
some defense mechanisms are shifted from the OS layer
to the hypervisor layer. By deploying defense tools at the
hypervisor level, we can detect rootkits that subvert the
guest OS kernel. However, existing virtual machine monitor
(VMM) based detectors have to cope with the semantic
gap between the low level information and the high level
OS abstractions. In other words, in order to monitor the
guest OS, the detailed knowledge of the guest OS kernel is
required. Over the past few years, although researchers have
proposed different approaches to overcoming this semantic
gap, the tools they have developed are still far from generic.
As OS kernels are upgrading in a relatively high frequency,
tools developed for one kernel version might not ﬁt for
another kernel version. This property severely inhibits the
development and deployment of virtualization based security
products. By contrast, the technique we are going to present
is more generic, and is applicable to multiple, if not all,
Linux kernel versions.
In modern Linux systems, when a kernel image is gen-
erated, read-only data are stored in the .rodata section of
the kernel executable and linkable format (ELF) binary.
Therefore, we can extract this section from a kernel image,
which is the same as the one used by the running guest
OS, and store the extracted content in a ﬁle. Then, we
write a C program to load this ﬁle into memory, creating
two copies of the read-only data stored in memory. One is
loaded with the guest OS kernel, the other is loaded by the
C program. Since these two copies are identical, we can
expect their pages to be merged on a system where memory
deduplication is being used. One might think that, once all
the pages corresponding to the ﬁle are merged, we can write
to each page of that ﬁle, and we record the write access time
to each page, we can do the above “load ->wait ->write -
>record” procedure periodically, once the write access time
decreases dramatically, it implies the corresponding pages
become non-deduplicated pages. Therefore, we know that
the kernel integrity might be broken and thus the system
might be compromised.
However, this solution can be easily bypassed by attack-
ers. If attackers are aware of the existence of the above
integrity checking system, they can modify the system call
table or anything else inside the kernel’s read-only data
section, and at the same time, load an unmodiﬁed copy
of the .rodata section into another memory region. In this
way, even if the original .rodata section has been changed,
very likely, the integrity checking system will fail to detect
the rootkit, because the additional copy might have been
merged with our reference copy before we write to each
page. Consequently, the write access time will not change.
We propose a new technique to monitor kernel read-
only data integrity. Unlike some existing techniques, our
approach does not require any changes in the kernel or
the hypervisor; and thus it is more practical to use. Our
technique mainly relies on a particular memory statistic term
(related to memory deduplication) maintained by the Linux
kernel. It is called PSS, which stands for “proportional set
size”. The PSS of a process describes the number of pages
the process has in memory weighted by how the pages
are deduplicated. For instance, if a process has 100 unique
pages and another 100 pages shared and deduplicated with
another process, its PSS should be 150, i.e., 100 + 100/2.
The Linux kernel exports this memory statistic in the ﬁle of
/proc/$pid/smaps. Basically, this ﬁle is used to show
memory consumption for each of the process’s mappings.
Here is an example:
00400000-00495000 r-xp 00000000 08:01 2097157
/bin/bash
Size: 596 kB
Rss: 496 kB
Pss: 38 kB
Shared Clean: 496 kB
Shared Dirty: 0 kB
Private Clean: 0 kB
Private Dirty: 0 kB
Referenced: 496 kB
Anonymous: 0 kB
Swap: 0 kB
KernelPageSize: 4 kB
MMUPageSize: 4 kB
We observe that by monitoring PSS value, we can detect
kernel rootkits that modify kernel read-only data such as the
Table I
SYSTEM CONFIGURATION
Components
Host CPU
Host Memory
Host OS
Host Kernel
Qemu
KVM
Guest CPU
Guest Memory
Guest OS
Guest Kernel
Intel Xeon 3.07GHz, Quad-Core
Speciﬁcation
4GB
openSuSE 11.4
2.6.37.6-0.11-desktop x86 64
0.14.0 rc1-1.4.2.x86 64
0.14.0.0-1.14.2.x86 64
QEMU Virtual CPU version 0.14.0
1GB
Fedora 16
3.1.0-7.fc16.i686
system call table.2 The idea is, we load the aforementioned
ﬁle (which just includes kernel read-only data section) into
the host memory and wait brieﬂy until memory deduplica-
tion takes effect on the pages corresponding to that ﬁle, and
then we turn off KSM, thereby preventing further memory
deduplication from happening. Thus, the PSS should be a
ﬁxed value and never be changed, unless the read only data
section of the guest OS is changed, which would result in the
shared pages become unshared. Therefore, by periodically
monitoring the PSS value, we can infer whether or not the
kernel read-only data is modiﬁed. To achieve this, just a
simple shell script would sufﬁce.3
Overall, our implementation just
includes a simple C
program and a simple shell script. The C program, being
responsible for loading the rodata ﬁle into host memory,
consists of less than one hundred lines of C code, and the
shell script, being in charge of checking PSS periodically,
is less than ten lines. Due to its simplicity, the overhead
of our approach is negligible. For the same reason, we can
expect an average system administrator being able to write
a similar program to load the kernel .rodata section and a
similar shell script to monitor the corresponding PSS, thus
monitoring the kernel runtime integrity.
IV. EXPERIMENTAL EVALUATION
Our experiments can be divided into three parts, with re-
spect to covert channel construction, virtualization detection,
and kernel integrity monitoring, respectively. The system
conﬁguration of our test machine is listed in Table 1.
A. Covert Channel Construction
To evaluate the feasibility of the memory deduplication
based covert channel, we ﬁrst verify that such a covert
channel does work well in a virtualized environment. We
2Note that this ﬁle is exported by the host OS, not by the guest OS,
and therefore, attackers who might have compromised the guest OS cannot
directly control or modify this ﬁle.
3Ideally, we can detect the modiﬁcations on the read only data section
regardless of turning off KSM or not, however, in reality, if KSM keeps
running, there might be some false positives; for example, it is possible that
some pages just happen to be the same as a read only data page, therefore,
they will be merged, and this might result in PSS change. In contrast, by
turning off KSM at this point, we can fully eliminate false positives.
boot two virtual machines on the same hypervisor. One
virtual machine is selected as the sender and the other is
set as the receiver. We load a ﬁle of size 1088KB (i.e., 272
4KB pages) into memory. In order to ensure the reliability
of deduplication, we set the sleeping time to 250 seconds.
We set up four sets of experiments. In each experiment, the
sender modiﬁes different pages to transfer different messages
to the receiver, and we record all the write access time
to these 272 pages at
the receiver side to see whether
information has been correctly delivered.
Figure 2 shows the experimental results. In the ﬁrst ex-
periment, the sender wants to send a 272-bit data beginning
with 00111 as the ﬁrst 5 bits followed by all 0s. Between
the sender and receiver, if a modiﬁed page denotes an 1
and an unmodiﬁed page denotes a 0, the sender would need
to modify the 3rd, 4th and 5th pages to encode such data.
For the other three experiments, the sender modiﬁes pages
260, 261 and 262 in the second experiment, pages 205,
206 and 207 in the third experiment, and pages 69, 70
and 71 in the last experiment. From Figure 2, we can see
although different experiments demonstrate different write
access spikes, the sender-modiﬁed pages always incur much
less write access time. This is because once the sender
modiﬁes a page, the page will become a non-deduplicated
page, and hence less time is required for the following write
access issued by the receiver. We also observe that, the time
of writing to a deduplicated page is always at least 6 times
longer than writing to a non-deduplicated page. This strong
signal-to-noise ratio implies that the covert channel can be
reliably established.
Next we evaluate the channel’s robustness and transfer
speed to see whether it is practical. As the covert channel
is based on memory deduplication, it is important to ﬁgure
out the relationship between the memory size used to build
the covert channel and the bit rate we can achieve. The bit
rate (R) is determined by the time needed to complete one
transmission (T), and the volume (V) of information that can
be delivered in one transmission: R=V/T. Moreover, since
the transmission time is dominated by the sleeping time (i.e.,
the transmission time is almost equivalent to the sleeping
time), we can use the sleeping time as the time required
to complete one transmission without losing accuracy. In
this set of experiments, we also set up two virtual machines
as the sender and the receiver, respectively. In each round,
the sender and the receiver load a ﬁle with a certain size
into memory to build the channel. We gradually increase
the sleeping time until it reaches a threshold such that the
information can be transferred through the covert channel
without any errors. We call such a threshold stable sleeping
time. Then, we gradually increase the size of the loaded
ﬁle and record the change of the stable sleeping time. After
obtaining the stable sleeping time for each different memory
size, we can calculate the bit rate using the formula of
R=V/T.
Figure 2.
Information Transferring in Covert Channel
Figure 3 illustrates the dynamics of achieved bit rate with
the change of memory size, in which the stable sleeping
time in each case is also marked. When the memory size
increases from 1MB to 100MB, we can easily observe that
the bit rate signiﬁcantly increases but the stable sleeping time
only modestly increases. When the memory size is 1MB,
or 256 4K pages, it takes our channel 205s to complete
the transmission. The bit rate under this case is merely
256b/205s=1.24bps. However, when the ﬁle size reaches
100MB, namely 25,600 pages, the covert channel only takes
around 280s to complete the transmission. In this way, the
bit rate can surge to above 90bps. This means that we
should select relatively large memory size for the covert
channel construction. Unfortunately, we cannot keep increas-
ing memory size indeﬁnitely. In one experiment, we load a
300MB ﬁle into memory to build the channel. However, the
result is, even when we increase the sleeping time to 3,600s,
the covert channel still cannot achieve 100% correctness.
This indicates that when the memory size reaches a certain
threshold, the covert channel will lose reliability. Moreover,
using too much memory might easily expose our covert
channel. Thus, a memory size in the range of 80MB to
100MB can be a good choice.
The performance of the covert channel is also dependent
upon the system workload. Given a certain memory size, we
run a set of experiments to study how the bit rate changes
when the system workload increases. In the experiments, we
ﬁrst boot two virtual machines as the sender and receiver,
and then we gradually increase the system workload by
launching more virtual machines and running CPU and
memory intensive benchmarks on the virtual machines.
Figure 4 illustrates the dynamics of the bit rate under
different system workloads, which can be divided into six
cases. For the ﬁrst ﬁve cases, the size of the leveraged