3m    3m    1  replicaset-controller      Normal    SuccessfulCreate  Created pod: nginx-2371676037-f2ndj
3m    3m    1  replicaset-controller      Normal    SuccessfulCreate  Created pod: nginx-2371676037-9lc8j
3m    3m    1  replicaset-controller      Normal    SuccessfulDelete  Deleted pod: nginx-2371676037-f2ndj
3m    3m    1  replicaset-controller      Normal    SuccessfulDelete  Deleted pod: nginx-2371676037-9lc8j
```
![](img/00040.jpeg)
Illustration of deployments
上图显示了部署的图示。在某个时间点，我们有两个(期望计数)和一个(`maxSurge`)PODS。在启动每个新的 Pod 后，Kubernetes 将等待三(`minReadySeconds`)秒，然后执行下一个动作。
如果我们使用命令`kubectl set image deployment nginx nginx=nginx:1.12.0 to previous version 1.12.0`，部署将为我们完成回滚。
# 服务
Kubernetes 中的服务是一个抽象层，用于将流量路由到一组逻辑单元。有了服务，我们不需要跟踪每个 pod 的 IP 地址。服务通常使用标签选择器来选择它需要路由到的 Pod (在某些情况下，服务是在没有选择器的情况下创建的)。服务抽象是强大的。它实现了解耦，并使微服务之间的通信成为可能。目前 Kubernetes 服务支持 TCP 和 UDP。
服务不关心我们如何创建 pod。就像复制控制器一样，它只关心 PODS 是否与其标签选择器相匹配，因此 PODS 可能属于不同的复制控制器。以下是一个示例:
![](img/00041.jpeg)
Service maps pods via label selector
在图中，所有的 pod 都与服务选择器相匹配，因此服务将负责将流量分配到所有的 pod 中，而无需显式分配。
**服务类型**
有四种类型的服务:集群 IP、节点端口、负载平衡器和外部名称。
![](img/00042.jpeg)
LoadBalancer includes the features of NodePort and ClusterIP
群集 IP
ClusterIP 是默认服务类型。它在群集内部的 IP 上公开服务。集群中的 Pods 可以通过 IP 地址、环境变量或 DNS 来访问服务。在下面的示例中，我们将学习如何使用本机服务环境变量和 DNS 来访问集群中服务背后的 pods。
在启动服务之前，我们希望创建两组 RC，如图所示:
```
// create RC 1 with nginx 1.12.0 version
# cat 3-2-3_rc1.yaml
apiVersion: v1
kind: ReplicationController
metadata:
 name: nginx-1.12
spec:
 replicas: 2
 selector:
 project: chapter3
 service: web
 version: "0.1"
template:
 metadata:
 name: nginx
 labels:
 project: chapter3
 service: web
 version: "0.1"
 spec:
 containers:
 - name: nginx
 image: nginx:1.12.0
 ports:
 - containerPort: 80
// create RC 2 with nginx 1.13.1 version
# cat 3-2-3_rc2.yaml
apiVersion: v1
kind: ReplicationController
metadata:
 name: nginx-1.13
spec:
 replicas: 2
 selector:
 project: chapter3
 service: web
 version: "0.2"
 template:
 metadata:
 name: nginx
 labels:
 project: chapter3
 service: web
 version: "0.2"
spec:
 containers:
- name: nginx
 image: nginx:1.13.1
 ports:
 - containerPort: 80  
```
然后，我们可以针对项目和服务标签制作 pod 选择器:
```
// simple nginx service 
# cat 3-2-3_service.yaml
kind: Service
apiVersion: v1
metadata:
 name: nginx-service
spec:
 selector:
 project: chapter3
 service: web
 ports:
 - protocol: TCP
 port: 80
 targetPort: 80
 name: http
// create the RCs 
# kubectl create -f 3-2-3_rc1.yaml
replicationcontroller "nginx-1.12" created 
# kubectl create -f 3-2-3_rc2.yaml
replicationcontroller "nginx-1.13" created
// create the service
# kubectl create -f 3-2-3_service.yaml
service "nginx-service" created  
```
Since `service` object might create a DNS label, service name must follow the combination of characters a-z, 0-9, or - (hyphen). A hyphen at the beginning or end of a label is not allowed.
然后我们可以使用`kubectl describe service `来检查服务信息:
```
// check nginx-service information
# kubectl describe service nginx-service
Name:      nginx-service
Namespace:    default
Labels:      
Annotations:    
Selector:    project=chapter3,service=web
Type:      ClusterIP
IP:      10.0.0.188
Port:      http  80/TCP
Endpoints:    172.17.0.5:80,172.17.0.6:80,172.17.0.7:80 + 1 more...
Session Affinity:  None
Events:      
```
One service could expose multiple ports. Just extend `.spec.ports` list in the service spec.
我们可以看到它是一个集群 IP 类型的服务，分配的内部 IP 是 10.0.0.188。端点显示我们在服务背后有四个 IP。可以通过`kubectl describe pods `命令找到 Pod  IP。Kubernetes 创建了一个`endpoints`对象和一个`service`对象，用于将流量路由到匹配的 Pod 。
当使用选择器创建服务时，Kubernetes 将创建相应的端点条目并不断更新，这将告诉服务路由到的目的地:
```
// list current endpoints. Nginx-service endpoints are created and pointing to the ip of our 4 nginx pods.
# kubectl get endpoints
NAME            ENDPOINTS                                               AGE
kubernetes      10.0.2.15:8443                                          2d
nginx-service   172.17.0.5:80,172.17.0.6:80,172.17.0.7:80 + 1 more...   10s  
```
ClusterIP could be defined within your cluster, though most of the time we don't explicitly use IP address to access clusters. Using `.spec.clusterIP` could do the work.
默认情况下，Kubernetes 将为每个服务公开七个环境变量。在大多数情况下，前两个将用于使用`kube-dns`插件为我们进行服务发现:
*   `${SVCNAME}_SERVICE_HOST`
*   `${SVCNAME}_SERVICE_PORT`
*   `${SVCNAME}_PORT`
*   `${SVCNAME}_PORT_${PORT}_${PROTOCAL}`
*   `${SVCNAME}_PORT_${PORT}_${PROTOCAL}_PROTO`
*   `${SVCNAME}_PORT_${PORT}_${PROTOCAL}_PORT`
*   `${SVCNAME}_PORT_${PORT}_${PROTOCAL}_ADDR`
在下面的例子中，我们将在另一个 Pod 中使用`${SVCNAME}_SERVICE_HOST`来检查我们是否能够访问我们的 nginx Pod :
![](img/00043.jpeg)
The illustration of accessing ClusterIP via environment variables and DNS names
然后我们将创建一个名为`clusterip-chk`的容器，通过`nginx-service`访问 nginx 容器:
```
// access nginx service via ${NGINX_SERVICE_SERVICE_HOST}
# cat 3-2-3_clusterip_chk.yaml
apiVersion: v1
kind: Pod
metadata:
 name: clusterip-chk
spec:
 containers:
 - name: centos
 image: centos
 command: ["/bin/sh", "-c", "while : ;do curl    
http://${NGINX_SERVICE_SERVICE_HOST}:80/; sleep 10; done"]  
```
我们可以通过`kubectl logs`命令检查`cluserip-chk`Pod 的`stdout`:
```
// check stdout, see if we can access nginx pod successfully
# kubectl logs -f clusterip-chk
% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                     Dload  Upload   Total   Spent    Left  Speed
100   612  100   612    0     0   156k      0 --:--:-- --:--:-- --:--:--  199k
 ...
Welcome to nginx!
    ...  
```
这种抽象层次分离了 Pod 之间的通信。PODS 是凡人。有了 RC 和服务，我们就可以构建强大的服务，而不用担心一个 pod 是否会影响所有的微服务。
启用`kube-dns`插件后，具有服务的同一个集群和同一个命名空间中的 pods 可以通过服务 DNS 记录访问服务。Kube-dns 通过观看 Kubernetes API 为新创建的服务创建 dns 记录。集群 IP 的 DNS 格式为`$servicename.$namespace`，端口为`_$portname_$protocal.$servicename.$namespace`。`clusterip_chk`Pod 的规格与环境变量 1 相似。在我们前面的例子中，只需将网址更改为 [`http://nginx-service.default:_http_tcp.nginx-service.default/`](http://nginx-service.default:_http_tcp.nginx-service.default/) ，它们的工作原理应该完全相同！
节点端口
如果将服务设置为 NodePort，Kubernetes 将在每个节点上的某个范围内分配一个端口。去往该端口上节点的任何流量都将被路由到服务端口。端口号可以由用户指定。如果未指定，Kubernetes 将随机选择 30000 到 32767 范围内的一个端口，不会发生冲突。另一方面，如果指定，用户应该负责自己管理冲突。节点端口包括集群 IP 的特性。Kubernetes 为服务分配一个内部 IP。在下面的示例中，我们将看到如何创建节点端口服务并利用它:
```
// write a nodeport type service
# cat 3-2-3_nodeport.yaml
kind: Service
apiVersion: v1
metadata:
 name: nginx-nodeport
spec:
 type: NodePort
 selector:
 project: chapter3
 service: web
 ports:
 - protocol: TCP
 port: 80
 targetPort: 80
// create a nodeport service
# kubectl create -f 3-2-3_nodeport.yaml
service "nginx-nodeport" created  
```
然后您应该可以通过`http://${NODE_IP}:80`访问该服务。节点可以是任何节点。`kube-proxy`监视服务和端点的任何更新，并相应地更新 iptables 规则(如果使用默认的 iptables 代理模式)。
If you're using minikube, you could access the service via the `minikube service [-n NAMESPACE] [--url] NAME` command. In this example, it's `minikube service nginx-nodeport`.
**负载平衡器**
此类型仅在云提供商支持下可用，如谷歌云平台([第 10 章](10.html#7BHQU0-6c8359cae3d4492eb9973d94ec3e4f1e)、*GCP*上的 Kubernetes)和亚马逊网络服务([第 9 章](09.html#6NGV40-6c8359cae3d4492eb9973d94ec3e4f1e)、*AWS*上的 Kubernetes)。通过创建负载平衡器服务，Kubernetes 将由云提供商向服务提供负载平衡器。
外部名称(kube DNS 版本> = 1.7)
有时我们在云中利用不同的服务。Kubernetes 足够灵活，可以混合使用。外部名称是为集群中的外部端点创建 **CNAME** 的桥梁之一。
**不带选择器的服务**
服务使用选择器匹配 Pod 来引导流量。但是，有时您需要实现一个代理，作为 Kubernetes 集群和另一个名称空间、另一个集群或外部资源之间的桥梁。在下面的例子中，我们将演示如何在集群中实现[http://www.google.com](http://www.google.com)的代理。这只是一个示例，而代理的来源可能是您的数据库或云中其他资源的端点:
![](img/00044.jpeg)
Illustration of how service without selector works
配置文件与上一个相似，只是没有选择器部分:
```
// create a service without selectors
# cat 3-2-3_service_wo_selector_srv.yaml
kind: Service
apiVersion: v1
metadata:
 name: google-proxy
spec:
 ports:
 - protocol: TCP
 port: 80
 targetPort: 80
// create service without selectors
# kubectl create -f 3-2-3_service_wo_selector_srv.yaml
service "google-proxy" created  
```
由于没有选择器，将不会创建 Kubernetes 端点。Kubernetes 不知道将流量路由到哪里，因为没有选择器可以匹配 PODS。我们必须自己创造。
在`Endpoints`对象中，源地址不能是 DNS 名称，所以我们将使用`nslookup`从域中找到当前的 Google IP，并将其添加到`Endpoints.subsets.addresses.ip`中:
```
// get an IP from google.com
# nslookup www.google.com
Server:    192.168.1.1
Address:  192.168.1.1#53
Non-authoritative answer:
Name:  google.com
Address: 172.217.0.238
// create endpoints for the ip from google.com
# cat 3-2-3_service_wo_selector_endpoints.yaml
kind: Endpoints
apiVersion: v1
metadata:
 name: google-proxy
subsets:
 - addresses:
 - ip: 172.217.0.238
 ports:
 - port: 80
// create Endpoints
# kubectl create -f 3-2-3_service_wo_selector_endpoints.yaml
endpoints "google-proxy" created  
```
让我们在集群中创建另一个 pod 来访问我们的 Google 代理:
```
// pod for accessing google proxy
# cat 3-2-3_proxy-chk.yaml
apiVersion: v1
kind: Pod