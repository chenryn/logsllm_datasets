# 八、构建我们自己的平台
在前面的章节中，我们花了大量时间在基础设施的各个部分上，在这里和那里构建小的独立部分，但是在这一章中，我们将尝试将尽可能多的概念放在一起，构建一个最低限度可行的**平台即服务** ( **PaaS** )。在以下几节中，我们将介绍这些主题:
*   **配置管理** ( **CM** )工装
*   **亚马逊网络服务** ( **AWS** )部署
*   持续集成/持续交付
当我们构建服务的核心时，我们将看到将一个小服务部署到真正的云中需要什么。
这里需要注意的一点是，本章仅作为快速入门和云中真实部署的基本示例提供，因为创建一个完整的带有所有花哨功能的 PaaS 基础架构通常非常复杂，需要大型团队几个月或几年才能解决所有问题。使问题复杂化的是，解决方案通常是专门为在此基础上运行的服务和编排工具的选择而定制的，因此，将您在本章中看到的内容视为当前生态系统的示例，您可以在自己的部署中使用，但其他工具可能更适合您的特定需求。
# 结构管理
对于依赖于大量类似配置的机器(无论是物理机器还是虚拟机器)的每一个系统，总是需要简单易行的重建工具来帮助自动化过去手工完成的大部分任务。在 PaaS 集群的情况下，理想情况下，基础架构的所有部分都能够在用户干预最少的情况下重建到所需的确切状态。在裸机 PaaS 服务器节点的情况下，这一点至关重要，因为您必须手动执行的任何操作都要乘以您拥有的节点数量，因此简化这一过程对于任何类型的生产就绪型集群基础架构都应该是至关重要的。
现在你可能会问自己，“为什么我们关心覆盖 CM 工装？”事实是，如果您的容器基础架构周围没有适当的 CM，您将保证自己在下班后接到紧急电话，原因是各种各样的问题，例如:节点从未加入集群、配置不匹配、未应用的更改、版本不兼容以及许多其他会让您抓狂的问题。因此，为了防止这种情况发生在您身上，我们将真正深入这个支持软件的生态系统。
解释完毕后，我们可以看到一些可供 CM 工具选择的选项:
*   ansi ble([https://www.ansible.com](https://www.ansible.com))
*   木偶([https://puppet.com](https://puppet.com))
*   厨师〔t 0〕https://www .厨师. io/厨师/
*   salt stack(https://salt stack . com
*   其他几个在功能和稳定性方面更弱。
由于 Puppet 和 Chef 都需要基于代理的部署，并且 SaltStack 在 Ansible 中的受欢迎程度相差甚远，因此对于我们在这里的工作，我们将把 Ansible 作为首选的 CM 工具，但是您的需求可能会有所不同。使用您自己的要求来选择最适合这项工作的工具。
As a relevant side note from my interactions with the DevOps online communities, it seems that at the time of writing this material, Ansible is becoming the de facto standard for CM tooling but it is not without its flaws. While I would love to recommend its use everywhere for a myriad of great features, expect complex edge cases of bigger modules to be marginally reliable and keep in mind that most bugs you will find are likely to have been already fixed by an unmerged pull request on GitHub that you might have to apply locally as needed. WARNING! Choice of configuration management tooling should not be taken lightly and you should weigh the pros and cons of each before committing to a single one as this tooling is the hardest to switch out once you have a few machines managed with it! While many IT and DevOps professionals treat this choice almost as a way of life (similar to polarization between `vim` and `emacs` users), make sure that you evaluate your options carefully and logically due to the high costs of switching to a different one down the road. I have personally never heard of a company switch CM tooling after running with one for a while though I am sure there are a few out there.
# Ansible
如果您以前没有使用过 Ansible，它有以下好处:
*   它相对容易使用(基于 YAML/Ninja2)
*   它只需要到目标的 SSH 连接
*   它包含大量可插拔模块来扩展其功能([https://docs . ansi ble . com/ansi ble/latest/modules _ by _ category . html](https://docs.ansible.com/ansible/latest/modules_by_category.html))，其中许多模块都在基本安装中，因此您通常不必担心依赖关系
如果这个列表听起来不够好，那么整个 Ansible 架构都是可扩展的，因此如果没有满足您需求的可用模块，那么它们在某种程度上很容易编写和集成，因此 Ansible 能够容纳您可能拥有或想要构建的几乎任何基础架构。在封面下，Ansible 使用 Python 和 SSH 直接在目标主机上运行命令，但是使用更高级别的**特定于域的语言** ( **DSL** )，这使得某人编写服务器配置变得非常容易和快速，而不是像 Bash 这样直接编写 SSH 命令。
The current Ubuntu LTS version (16.04) comes with Ansible 2.0.0.2, which should be adequate for most purposes, but using versions that are closer to upstream ones is often advised for both bug fixes and for new module additions. If you choose the latter route, make sure to have the version pinned to ensure consistently working deployments.
# 装置
要在大多数基于 Debian 的发行版上安装 Ansible，通常过程非常简单:
```
$ # Make sure we have an accurate view of repositories
$ sudo apt-get update 
Fetched 3,971 kB in 22s (176 kB/s) 
Reading package lists... Done
$ # Install the package
$ sudo apt-get install ansible 
Reading package lists... Done
Building dependency tree 
Reading state information... Done
The following NEW packages will be installed:
 ansible
0 upgraded, 1 newly installed, 0 to remove and 30 not upgraded.
Setting up ansible (2.0.0.2-2ubuntu1) ...
$ # Sanity check
$ ansible --version 
ansible 2.0.0.2
 config file = /home/user/checkout/eos-administration/ansible/ansible.cfg
 configured module search path = /usr/share/ansible
```
# 基础
项目的标准布局通常被分成定义功能片的角色，其余的配置基本上只支持这些角色。Ansible 项目的基本文件结构如下所示(尽管通常需要更复杂的设置):
```
.
├── group_vars
│   └── all
├── hosts
├── named-role-1-server.yml
└── roles
 ├── named-role-1
 │   ├── tasks
 │   │   └── main.yml
 │   ├── files
 │   │   └── ...
 │   ├── templates
 │   │   └── ...
 │   └── vars
 │       └── main.yml
 ...
```
让我们分解这个文件系统树的基本结构，看看每个部分在更大的图中是如何使用的:
*   `group_vars/all`:该文件用于定义用于您所有行动手册的变量。这些可用于具有可变扩展的行动手册和模板(`"{{ variable_name }}"`)。
*   `hosts/`:该文件或目录列出了您想要管理的主机和组，以及任何特定的连接细节，如协议、用户名、SSH 密钥等。在文档中，这个文件通常被称为清单文件。
*   `roles/`:这里有一个角色定义列表，可以以分层的方式应用到目标机器上。通常，它进一步细分为`tasks/`、`files/`、`vars/`，以及每个角色中的其他布局敏感结构:
    *   `/tasks/main.yml`:列出作为角色一部分要执行的主要步骤的 YAML 文件。
    *   `/files/...`:在这里，您可以添加静态文件，这些文件将被复制到不需要任何预处理的目标机器上。
    *   `/templates/...`:在这个目录中，可以添加角色相关任务的模板文件。这些通常包含将通过变量替换复制到目标机器的模板。
    *   `/vars/main.yml`:就像父目录暗示的那样，这个 YAML 文件保存角色特定的变量定义。
*   `playbooks/`:在这个目录中，你可以添加所有不适合角色定义的顶级辅助剧本。
# 使用
既然我们已经了解了 Ansible 的外观和工作原理，现在是时候用它做一些实际的事情了。此时，我们要做的是制作一个 Ansible 部署配置，以应用我们在上一章中介绍的一些系统调整，并在运行行动手册后让 Docker 在机器上为我们做好准备。
This example is relatively simple but it should show pretty well the ease of use and power of a decent configuration management tooling. Ansible is also a massive topic that a small section like this just can not cover in as much detail as I would like to but the documentation is relatively good and you can find it at [https://docs.ansible.com/ansible/latest/index.html](https://docs.ansible.com/ansible/latest/index.html). This example (and others) can be found at [https://github.com/sgnn7/deploying_with_docker/tree/master/chapter_8/ansible_deployment](https://github.com/sgnn7/deploying_with_docker/tree/master/chapter_8/ansible_deployment) if you want to skip the manual typing; however, it might be good practice to do it once to get the hang of the Ansible YAML file structure.
首先，我们需要创建保存文件的文件结构。我们将把我们的主要角色称为`swarm_node`，由于我们的整个机器将只是一个群节点，我们将把我们的顶层部署剧本命名为相同的名称:
```
$ # First we create our deployment source folder and move there
$ mkdir ~/ansible_deployment
$ cd ~/ansible_deployment/
$ # Next we create the directories we will need
$ mkdir -p roles/swarm_node/files roles/swarm_node/tasks
$ # Make a few placeholder files
$ touch roles/swarm_node/tasks/main.yml \
        swarm_node.yml \
        hosts
$ # Let's see what we have so far
$ tree
.
├── hosts
├── roles
│   └── swarm_node
│       ├── files
│       └── tasks
│           └── main.yml
└── swarm_node.yml
4 directories, 3 files
```
现在我们在顶层`swarm_node.yml`增加以下内容。这将是 Ansible 的主要入口点，它基本上只是定义了我们希望在其上运行的目标主机和角色:
```
---
- name: Swarm node setup
 hosts: all
 become: True
 roles:
 - swarm_node
```
YAML files are whitespace structured so make sure that you do not omit any spacing when editing this file. In general, all nesting levels are two spaces farther than the parent, key/values are defined with colons, and lists are itemized with a `-` (minus) prefix. For more information, about the YAML structure go to  [https://en.wikipedia.org/wiki/YAML#Syntax](https://en.wikipedia.org/wiki/YAML#Syntax).
我们在这里做的应该是显而易见的:
*   `hosts: all`:在清单文件中定义的所有服务器上运行。一般来说，这只是一个域名，但由于我们只有一个机器目标，`all`应该没问题。
*   `become: True`:由于我们使用 SSH 在目标上运行东西，而 SSH 用户通常不是 root，所以我们需要告诉 Ansible，它需要用`sudo`提升我们将要运行的命令的权限。如果用户需要密码才能使用`sudo`，您可以在调用带有`ansible-playbook -K`标志的剧本时指定，但是我们将在本章后面使用不需要密码的 AWS 实例。
*   `roles: swarm_mode`:这是我们想要应用到目标的角色列表，目前只是一个名为`swarm_node`的列表。该名称*必须与`roles/`中的文件夹名称*匹配。
下一个要定义的是我们的系统调整配置文件，我们在上一章中已经介绍过，比如增加文件描述符最大值、ulimits 和其他一些东西。将以下文件及其各自的内容添加到`roles/swarm_node/files/`文件夹中:
*   `conntrack.conf`:
```
net.netfilter.nf_conntrack_tcp_timeout_established = 43200
net.netfilter.nf_conntrack_max = 524288
```
*   `file-descriptor-increase.conf`:
```
fs.file-max = 1000000
```
*   `socket-buffers.conf`:
```
net.core.optmem_max = 40960
net.core.rmem_default = 16777216
net.core.rmem_max = 16777216
net.core.wmem_default = 16777216
net.core.wmem_max = 16777216
net.ipv4.tcp_rmem = 4096 87380 16777216
net.ipv4.tcp_wmem = 4096 87380 16777216
```
*   `ulimit-open-files-increase.conf`:
```
root soft nofile 65536
root hard nofile 65536
* soft nofile 65536
* hard nofile 65536
```
加上这些，我们的树现在应该看起来更像这样:
```
.
├── hosts
├── roles
│   └── swarm_node