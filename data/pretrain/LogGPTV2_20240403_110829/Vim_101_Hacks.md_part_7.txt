### Frequently, You Can Store Them in a File and Execute Them as Shown Below

```bash
$ vim –w repetitive_task.txt file_to_edit.txt
```

---

### Buyer: Xiujuan Lu (PI:EMAIL)  
**Transaction ID:** 85W16630AD8515549  
**Vim 101 Hacks** - [www.thegeekstuff.com](http://www.thegeekstuff.com)

---

### Hack 62: Skip Loading Plugins Temporarily

When opening a file, you can temporarily stop loading all plugins for that specific session using the following command:

```bash
$ vim --noplugin filename.txt
```

---

### Hack 63: Enter Restricted Mode in Vim

You can enter restricted mode in Vim using one of the following methods:

```bash
$ vim –Z filename
```
or
```bash
$ rvim filename
```

From `:help –Z`:
- **Restricted mode (-Z):** All commands that make use of an external shell are disabled. This includes suspending with `CTRL-Z`, `:sh`, filtering, the `system()` function, backtick expansion, etc.

---

### Chapter 10: gVim Hacks

gVim is an X-window based interface to the Vim editor.

#### Hack 64: Display and Hide gVim Menu and Toolbar

To get more screen real estate, you may want to disable gVim's menu bar, tool bar, scroll bar, or other visual components. This can be achieved using the `:set guioptions` command.

- **Disable the toolbar:**
  ```vim
  :set guioptions-=T
  ```

- **Enable the toolbar:**
  ```vim
  :set guioptions+=T
  ```

You can manipulate the following gVim GUI elements:

| UI Element Code | Description |
|-----------------|-------------|
| `:set guioptions+=TmrlRL` | Display all gVim GUI elements |
| `:set guioptions-=TmrlRL` | Hide all gVim GUI elements |
| `:set guioptions-=T` | Hide gVim Toolbar |
| `:set guioptions-=m` | Hide gVim Menu Bar |
| `:set guioptions-=r` | Hide gVim Right side scroll bar |
| `:set guioptions-=l` | Hide gVim Left side scroll bar |
| `:set guioptions-=R` | Hide gVim Right side scroll bar that appears when window is split vertically |
| `:set guioptions-=L` | Hide gVim Left side scroll bar that appears when window is split vertically |

#### Hack 65: Adding a Custom Menu or Menu Items to gVim

You can add your own menu and menu items to gVim for custom operations.

- **New Menu Item under an Existing Menu:**

  For example, you can add the following two menu items under the Tools menu:
  - **Hide Tool Bar** – This will hide the tool bar.
  - **View Tool Bar** – Once you’ve hidden the tool bar, use this to get it back.

  To add the `Tools -> Hide Tool Bar` menu item:
  ```vim
  :amenu Tools.&Hide-Tool-Bar :set guioptions-=T
  ```

  To add the `Tools -> View Tool Bar` menu item:
  ```vim
  :amenu Tools.&View-Tool-Bar :set guioptions+=T
  ```

  If you press `Alt+T` to drop down the tools menu, you can see `H` and `V` highlighted. This is because we placed an `&` in front of `H` and `V` when defining the menu items.

  - **Shortcuts:**
    - `ALT+T H` to Hide Tool Bar
    - `ALT+T V` to View Tool Bar

- **New Top Level Menu Bar:**

  The following example will add a new menu bar called `Bookmark` (with `Alt+K` key) and a menu item called `Windows Explorer` (with `Alt+K E`) that will launch Windows Explorer.

  ```vim
  :amenu Bookmar&k.Windows\ &Explorer :!explorer
  ```

  Note: The above command should be typed in a single line. There should be a space after `&Explorer`.

#### Hack 66: Change Font in gVim

You might not like the default font of gVim. You can change it using one of the following methods:

- **Method 1:**
  ```vim
  :set guifont=Courier\ New:h10
  ```
  This example sets the font type to `Courier New` and size to `10`. For this method, you should already know the name of the font.

- **Method 2:**
  ```vim
  :set guifont=*
  ```
  This will launch a font chooser UI, where you can select the font type and size.

  **Figure:** Font chooser on Windows gVim

---

### Chapter 11: Vim Look and Feel, Tabs, and Windows

#### Hack 67: Split Windows Horizontally and Vertically

- **Split the current Window:**
  - **Horizontally:**
    ```vim
    :split
    ```
  - **Vertically:**
    ```vim
    :vsplit
    ```

  To close a window that was created by `split`, type `:q` to close that window.

- **Open a different file in another window:**
  - **Horizontal split:**
    ```vim
    :split /etc/group
    ```
  - **Vertical split:**
    ```vim
    :vsplit /etc/group
    ```

- **Navigate Between Windows:**
  - **Jump to the window above:**
    ```vim
    CTRL-W k
    ```
  - **Jump to the window below:**
    ```vim
    CTRL-W j
    ```

- **Resize Split Windows:**
  - **Increase the size of the current window:**
    ```vim
    CTRL-W +
    ```
  - **Reduce the size of the current window:**
    ```vim
    CTRL-W -
    ```

- **Set the Size of a Window:**
  - **Vertical split with 25 columns:**
    ```vim
    :25 vsplit filename.txt
    ```
  - **Horizontal split with 3 lines:**
    ```vim
    :3 split filename.txt
    ```

#### Hack 68: Change Window Title

To change the text displayed in the title, do the following:
```vim
:set title titlestring=My\ Favorite\ File
```

The above will change the text in the Vim window title bar to "My Favorite File".

**Note:**
- The following example is shown in the Vim documentation, when you do `:help titlestring`:
  ```vim
  :set title titlestring=%<%F%=%l/%L-%P titlelen=70
  ```
  - `%F` – Name of the file in the current window
  - `%l` – Line number of the line where the cursor is located
  - `%L` – Total number of lines in the file
  - `%p` – Percentage of the file. For example, if the cursor is at the middle of the file, this will show `50%`

#### Hack 69: Change Vim Colors

First, view all available color schemes in your Vim editor:
```bash
:!ls $VIMRUNTIME/colors
```

For example, if you see `blue.vim` or `evening.vim` listed, you can change to those color schemes as shown below:
```vim
:colorscheme evening
```
or
```vim
:colorscheme blue
```

You can also download additional color schemes and put them under `$VIMRUNTIME/colors`. Get those from:
- [Vim Color Schemes](http://www.vim.org/scripts/script_search_results.php?keywords=&script_type=color+scheme&order_by=rating)
- [Vim Color Scheme Test](http://code.google.com/p/vimcolorschemetest/)

#### Hack 70: Edit Multiple Files in Tabs

One efficient way of editing multiple files in a single Vim session is by using tabs.

- **Open multiple files from the command line:**
  ```bash
  $ vim -p file1 file2 file3
  ```

  The following screenshot shows three files opened in tabs:
  ```bash
  $ vim –p helloworld.cc employee.txt /etc/passwd
  ```

  **Figure:** Three files opened in tabs

- **Tab Commands:**
  - **Open another file in a new tab under the current Vim session:**
    ```vim
    :tabedit FILENAME
    ```
    or
    ```vim
    :tabe FILENAME
    ```
  - **List all open tabs:**
    ```vim
    :tabs
    ```
  - **Go to the Nth tab:**
    ```vim
    :tabn N
    ```
  - **Close the current tab:**
    ```vim
    :tabclose
    ```
    or
    ```vim
    :tabc
    ```
  - **Execute a command in all tabs:**
    ```vim
    :tabdo CMD
    ```
  - **Go to the next tab:**
    ```vim
    :tabn
    ```
  - **Go to the previous tab:**
    ```vim
    :tabp
    ```

---

### Chapter 12: Additional Features in Vim Editor

#### Hack 71: Repeat an Operation N Number of Times

The "repeat operation" capability works with virtually all Vim operations. For example, to move down 10 lines at a time, you can type `10j` as shown below:
```vim
10j
```

- **Repeat Commands:**
  - `@@` – Repeat previously executed macro
  - `n` – Repeat the search in the same direction
  - `N` – Repeat the search in the opposite direction
  - `.` – Repeat the last edit command
  - `@:` – Repeat the last command line

#### Hack 72: Undo and Redo Action

- **Single Undo:**
  ```vim
  u
  ```

- **Multiple Undo:**
  ```vim
  5u
  ```

- **Undo All:**
  ```vim
  U
  ```

- **Redo Action:**
  ```vim
  :redo
  ```
  or
  ```vim
  CTRL-R
  ```

#### Hack 73: Open the File Whose Name is Under the Cursor

This hack is helpful in the following situations:
- To verify the filenames given inside configuration files are valid.
- While editing a text document, if you want to go to another file whose name is specified in the text document.
- While editing source code, to visit a local file which is included or imported by filename reference.

- **Open a file (in the same window) whose name is currently under the cursor:**
  ```vim
  gf
  ```

- **Open a file (in a new window) whose name is currently under the cursor:**
  ```vim
  CTRL-W f
  ```

- **Open a file (in a new tab) whose name is currently under the cursor:**
  ```vim
  CTRL-W gf
  ```

If the filename under the cursor doesn’t have a full or relative path specification included, Vim will search for the file under the current directory. For certain files, Vim will open the file even without the full path as Vim knows where to locate those files. For example:
- Header file included in a C program
- Perl module included in a Perl program

#### Hack 74: Edit Multiple Files Using the Traditional Method

Using this hack, you can edit multiple files in a single Vim session.

- **Open multiple files from the command line:**
  ```bash
  $ vim file1 file2 file3
  ```

- **Open another file when you are already in a Vim session:**
  ```vim
  :e another_file
  ```

- **List all open files in the current Vim session:**
  ```vim
  :ls
  ```
  Example output:
  ```
  1 %a "helloworld.cc" line 1
  2 "employee.txt" line 0
  3 "/etc/passwd" line 0
  ```

- **Go to the Nth file from the above `:ls` output:**
  ```vim
  :e #N
  ```

- **Toggle between two files:**
  ```vim
  CTRL-^
  ```

- **Moving Between Files While Editing Multiple Files:**
  - **Go to the next file:**
    ```vim
    :next
    ```
  - **Go to the previous file:**
    ```vim
    :previous
    ```

#### Hack 75: Saving Files Automatically

Vim normally gives an error message if you have unsaved changes when you try to switch buffers or files. To enable automatic writing of files when switching buffers/files, do the following:
```vim
:set autowrite
```

- **Write all files using a single command:**
  ```vim
  :wall
  ```

#### Hack 76: Encrypt File in Vim

- **Save and encrypt the current file:**
  ```vim
  :X
  ```
  Enter encryption key: ********  
  Enter same key again: ********

  Once you’ve encrypted a file using `:X`, the next time you open that file, Vim will prompt for the encryption key.

#### Hack 77: Save and Resume Vim Sessions

When you are editing files in a Vim session and need to perform some other task, you may have to close all files and Vim sessions. However, you may want to come back and continue the Vim sessions exactly where you left off earlier.

- **To save the current session:**
  ```vim
  :mksession
  ```

  When you have N files opened along with folds, multiple options set, and different configurations, all of the above information will be stored when you save your session. You can also customize and decide which options you prefer to have stored by the save session command.