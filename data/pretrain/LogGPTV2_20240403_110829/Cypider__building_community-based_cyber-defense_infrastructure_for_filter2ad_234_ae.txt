False Malware A2
True Benign A3
False Benign A4
2413
190
257
38
449
103
171
10
Table 3: Evaluation Using Apps Metrics (Mixed)
important to mention that all the detected benign commu-
nities are pure without any malware instance, which makes
the investigation much easier. Furthermore, according to
our analysis, most malware labels in the 2-mixed malicious
communities are just a naming variation of the same mal-
ware, which is caused by the name convention diﬀerences
between vendors. For example, in one 2-mixed community,
we found FakeInstaller and Opfake malware instances. Ac-
tually, these names point to the same malware [9], which is
FakeInstaller. Similarly, we found FakeInstaller and Tro-
janSMS.Boxer.AQ, which point to the same malware [3]
with diﬀerent vendor namings.
Apps Metrics
Detected C1
Pure Detected C2
2-Mixed C3
Benign C4
Drebin Mixed Genome Mixed
188
179
9
18
61
61
0
16
Table 4: Evaluation Using Community Metrics
Community Metrics Drebin Genome
True Malware A1
2223
449
Table 5: Evaluation Using Apps Metrics
Apps Metrics
Detected C1
Pure Detected C2
2-Mixed C3
Drebin Genome
170
161
9
45
45
0
Table 6: Evaluation Using Community Metrics
8.4 Results of Malware-only Datasets
Tables 5 and 6 present the performance results of Cypider
using the app metrics and community metrics utilizing mal-
ware only datasets. Since we use the same malware dataset
as the mixed dataset by only excluding the benign apps, we
obtained almost the same results. Cypider was able to detect
about 50% of all malware in one iteration. Moreover, nearly
all the recognized communities are pure. The precious result
is a signiﬁcant advantage of Cypider in malware investiga-
tion since the security analyst could automatically attribute
the family to a given suspicious community by only match-
ing one or two samples. Furthermore, the analysis com-
plexity dramatically decreased from 2413 detected malware
to only 188 discovered communities. We believe that this
could reduce the analysis window and help overcome the
overwhelming number of the daily detected Android mal-
ware. Notice that there are nine 2-mixed communities in the
Drebin dataset, which contain diﬀerent malware labeled for
the same actual malware, as mentioned before. Figure 5 de-
picts the similarity network of the Drebin malware dataset.
356
After applying the community detection algorithm, we end
up with the malicious communities, as depicted in Figure 6.
Figure 5: Cypider Network of Drebin Dataset
Figure 6: Detected Communities in Drebin Dataset
8.5 Community Fingerprint Results
The preliminary results of the community ﬁngerprint are
very promising, where we achieved, in best cases, a detec-
tion rate of 87% on new malware samples sharing the same
family with a given community ﬁngerprint in the signature
database. Moreover, its compact format (learning model
in binary format) could ﬁngerprint a whole Android fam-
ily, which implies a far more compressed signature database.
357
The performance of this ﬁngerprint signiﬁcantly varies with
the number of malware in the detected community. The
more malware instances are in the community, the higher
detection performance is. For this reason, we plan to set up
a threshold for the needed community cardinal to compute
the ﬁngerprint and store it in the signature database. How-
ever, determining such threshold requires more evaluations
of the proposed ﬁngerprint in diﬀerent communities, which
we leave for future work.
9. DISCUSSION
Cypider framework achieves a good result regarding the
percentage of the detected malware and purity of the com-
munities. However, we believe that the detection perfor-
mance of Cypider could be improved by considering more
content vectors. The more static coverage of the APK ﬁle
is, the more broad and accurate the suspicious communities
are. Fortunately, Cypider could easily add new vectors due
to the majority-voting mechanism to decide about the sim-
ilarity. Using only static features leads to the right results.
However, including dynamic features in Cypider’s detection
process could boost the detection since this covers Android
malware that download and execute the payload at runtime.
Cypider with only static features could be a complementary
solution to other detection approaches based on dynamic
features. As we have noticed in the evaluation results, there
are more detected communities than the number of the ac-
tual malware families. According to our analyses, multi-
ple communities could be part of the same malware family.
However, these communities could represent malware fam-
ily variants. For example, DroidKungFu family is consid-
ered as one family in Drebin dataset. However, there are
many variants for this family in the Genome dataset such as
DroidKungFu1, DroidKungFu2 and DroidKungFu4.
Moreover, we notice that some malware instances could have
various labels from the vendors. For example, certain in-
stances of FakeInst malware have their community with no
connection shared with the rest of the family. After a small
investigation using the hashes of the instances, we identi-
ﬁed a diﬀerent label (Adwo), which represents a diﬀerent
malware family. Moreover, the evaluation shows the eﬀec-
tiveness of Cypider in identifying Zero-day malicious apps
since the detection was without any prior knowledge of the
actual dataset. The unsupervised feature of Cypider frame-
work could make it handy for security practitioner.
The concept of the malicious community, which is pro-
posed by Cypider, could be similar to malware family con-
cept. However, there are some diﬀerences: i) One malware
family could be detected in multiple communities of mali-
cious apps. So, the community gives a more granular view
of the malicious app similarity based on a given statical fea-
tures.
ii) Security practitioner could decide about a given
malicious app family using manual analyses. However, the
community concept comes from a purely unsupervised au-
tomatic analysis. An important feature of Cypider’ detected
suspicious communities is the explainability, which facili-
tates deﬁning what exactly is shared among the apps of a
given community. The explainable results are due to the
multiple content similarity links between the apps. For ex-
ample, malware apps sharing the same IP addresses that
are hard-coded in the binary are most likely to be part of
a Command and Control (C&C) infrastructure and are the
sign of a botnet.
10. LIMITATION AND FUTURE WORK
Obfuscation is considered a big issue for malware detec-
tion systems including Cypider, where the adversary uses
an obfuscated content or transform attacks. The latter at-
tack, which could download the malicious code and execute
it at runtime is undetectable by Cypider unless the malware
instances share other covered contents. However, Cypider
attempts to deal with obfuscated apps with a range of tech-
niques. i) Cypider leverages multiple Android package con-
tents (such as permissions) which allow the system to be
more robust against obfuscation since it also uses other un-
obfuscated contents.
ii) In the case of Dex disassembly,
Cypider uses instruction opcode instead of the whole in-
struction to compute the N-grams. Therefore, the latter
would be more resilient to obfuscation in the instruction
operands. The previous techniques show their eﬀectiveness
in the evaluation since we used a real malware dataset in
addition to apps from Google play (where the apps are sup-
posedly obfuscated through ProGuard). Besides, Cypider
framework could be complementary to dynamic analysis so-
lutions to achieve better results.
Cypider’s detection process relies on a loop.
In each it-
eration, Cypider detects a portion of the malware sample
by deﬁning its communities. The size of the active dataset
is an important parameter that should be set according to
the computation resources, the hard line of the detection
window, and the usage scenario. Also, we consider other pa-
rameters related to similarity network building, as presented
in Section 6. However, once the parameters are deﬁned,
there is no need to adjust them as is the case of our eval-
uation. Furthermore, in the current implementation of the
proposed feature vectors, we did not include contents such as
the native library N-grams and manifest activities, a part of
the similarity computation using majority-voting technique.
We plan to consider these contents in future work, where
we focus on other Android malware that uses, for example,
C/C++ native code.
The current majority-voting mechanism is agnostic to the
content type. Hence, it considers all the content similarity
when deciding about a similarity link. However, a more ac-
curate representation could be achieved using weighted ma-
jority voting. For instance, the similarity in the opcode could
be more valuable than the similarity of strings in the re-
sources ﬁles. Similarly, malware instances with identical IP
addresses are more suspicious than URLs since IP addresses
are less used in benign apps and could indicate the existence
of a botnet. For the aforementioned reasons, we plan to im-
plement and evaluate the weighted majority voting in future
work.
11. RELATED WORK
Previous works on Android malware detection mainly use
two basic approaches: static and dynamic analyses. Static
analysis-based approaches [20, 39, 32, 52] rely on static fea-
tures extracted from the app, such as requested permissions
and APIs, to detect malicious apps. These methods are
generally not resistant to obfuscation. On the other hand,
dynamic analysis-based approaches [26, 46, 16, 54, 19, 50,
50, 37] aim to identify a behavioral signature or anomaly
of the running app. These methods are more resistant to
obfuscation than the static ones as there are many ways
to hide the malicious code, while it is diﬃcult to hide the
malicious behavior. However, the dynamic methods are lim-
ited in scalability as they incur additional costs in terms of
processing and memory in order to run the app. In addi-
tion, it is not known when the malicious behavior will oc-
cur, and hence each app requires a long-running time. The
hybrid analysis methods [53, 34, 22, 49] combine between
static and dynamic analyses. Some approaches [44, 40, 18]
do not oﬀer scalable analysis as they use multi-stage ma-
chine learning or employ program control graph. Cai and
Yap [24] perform a large-scale experiment on Android Anti-
Viruses (AVs). Their results show that a majority of AVs
detect malware using simple static features. Such features
can be easily obfuscated by renaming or encrypting strings
and data, making it easy to evade some AVs. Hoﬀmann et
al.
[36] present a new obfuscation framework that aims to
break the assumptions used by static and dynamic analyses
tools. Our work adopts the static analysis approach, but be-
ing diﬀerent from previous work, it uses a set of statistical
features that cover most of the static characteristics of the
APK. In this way, it is diﬃcult for an adversary to evade de-
tection as it has to obfuscate all the features. In some cases,
malicious apps, which belong to the same family, establish
connection with the same C&C server. The adversary can-
not change the server’s IP. Otherwise, the malicious activity
cannot be performed.
A signiﬁcant number of research work has been recently
proposed to detect repackaged apps by performing similarity
analysis. The latter either identiﬁes the apps that use the
same malicious code (i.e., detection of malware families) [41,
17, 30, 58, 33, 47, 38, 42, 31], or those that repackage the
same original app (i.e., code reuse detection) [27, 48, 56, 35,
28, 55, 29]. However, most of them use non-scalable tech-
niques such as control ﬂow graphs to detect similar codes.
Diﬀerently, our work is novel in the sense it represents an
app as a vector of contents. If one content is shared between
pair of apps, both of them are similar and are suspected to
be malicious.
12. CONCLUSION
In this paper, we have presented Cypider, an eﬃcient and
scalable framework for Android malware detection. The de-
tection mechanism relies on the community concept. Cypi-
der consists of a systematic framework that can generate
a ﬁngerprint for each community, and identify known and
unknown malicious communities. Cypider has been imple-
mented and evaluated on diﬀerent malicious and mixed data-
sets. Our ﬁndings show that Cypider is a valuable and promis-
ing approach in detecting application similarity and mali-
cious communities in Android applications. Cypider only