    type ReadableStreamReadResult =
      | ReadableStreamReadValueResult
      | ReadableStreamReadDoneResult;
    interface ReadableStreamDefaultReader {
      readonly closed: Promise;
      cancel(reason?: any): Promise;
      read(): Promise>;
      releaseLock(): void;
    }
    interface ReadableStreamReader {
      cancel(): Promise;
      read(): Promise>;
      releaseLock(): void;
    }
    interface ReadableByteStreamControllerCallback {
      (controller: ReadableByteStreamController): void | PromiseLike;
    }
    interface UnderlyingByteSource {
      autoAllocateChunkSize?: number;
      cancel?: ReadableStreamErrorCallback;
      pull?: ReadableByteStreamControllerCallback;
      start?: ReadableByteStreamControllerCallback;
      type: "bytes";
    }
    interface UnderlyingSource {
      cancel?: ReadableStreamErrorCallback;
      pull?: ReadableStreamDefaultControllerCallback;
      start?: ReadableStreamDefaultControllerCallback;
      type?: undefined;
    }
    interface ReadableStreamErrorCallback {
      (reason: any): void | PromiseLike;
    }
    interface ReadableStreamDefaultControllerCallback {
      (controller: ReadableStreamDefaultController): void | PromiseLike;
    }
    interface ReadableStreamDefaultController {
      readonly desiredSize: number | null;
      close(): void;
      enqueue(chunk: R): void;
      error(error?: any): void;
    }
    interface ReadableByteStreamController {
      readonly byobRequest: undefined;
      readonly desiredSize: number | null;
      close(): void;
      enqueue(chunk: ArrayBufferView): void;
      error(error?: any): void;
    }
    interface PipeOptions {
      preventAbort?: boolean;
      preventCancel?: boolean;
      preventClose?: boolean;
      signal?: AbortSignal;
    }
    interface QueuingStrategySizeCallback {
      (chunk: T): number;
    }
    interface QueuingStrategy {
      highWaterMark?: number;
      size?: QueuingStrategySizeCallback;
    }
    /** This Streams API interface provides┬áa built-in byte length queuing strategy
     * that can be used when constructing streams. */
    declare class CountQueuingStrategy implements QueuingStrategy {
      constructor(options: { highWaterMark: number });
      highWaterMark: number;
      size(chunk: any): 1;
    }
    declare class ByteLengthQueuingStrategy
      implements QueuingStrategy {
      constructor(options: { highWaterMark: number });
      highWaterMark: number;
      size(chunk: ArrayBufferView): number;
    }
    /** This Streams API interface represents a readable stream of byte data. The
     * Fetch API offers a concrete instance of a ReadableStream through the body
     * property of a Response object. */
    interface ReadableStream {
      readonly locked: boolean;
      cancel(reason?: any): Promise;
      getIterator(options?: { preventCancel?: boolean }): AsyncIterableIterator;
      // getReader(options: { mode: "byob" }): ReadableStreamBYOBReader;
      getReader(): ReadableStreamDefaultReader;
      pipeThrough(
        {
          writable,
          readable,
        }: {
          writable: WritableStream;
          readable: ReadableStream;
        },
        options?: PipeOptions
      ): ReadableStream;
      pipeTo(dest: WritableStream, options?: PipeOptions): Promise;
      tee(): [ReadableStream, ReadableStream];
      [Symbol.asyncIterator](options?: {
        preventCancel?: boolean;
      }): AsyncIterableIterator;
    }
    declare var ReadableStream: {
      prototype: ReadableStream;
      new (
        underlyingSource: UnderlyingByteSource,
        strategy?: { highWaterMark?: number; size?: undefined }
      ): ReadableStream;
      new (
        underlyingSource?: UnderlyingSource,
        strategy?: QueuingStrategy
      ): ReadableStream;
    };
    interface WritableStreamDefaultControllerCloseCallback {
      (): void | PromiseLike;
    }
    interface WritableStreamDefaultControllerStartCallback {
      (controller: WritableStreamDefaultController): void | PromiseLike;
    }
    interface WritableStreamDefaultControllerWriteCallback {
      (chunk: W, controller: WritableStreamDefaultController): void | PromiseLike;
    }
    interface WritableStreamErrorCallback {
      (reason: any): void | PromiseLike;
    }
    interface UnderlyingSink {
      abort?: WritableStreamErrorCallback;
      close?: WritableStreamDefaultControllerCloseCallback;
      start?: WritableStreamDefaultControllerStartCallback;
      type?: undefined;
      write?: WritableStreamDefaultControllerWriteCallback;
    }
    /** This Streams API interface provides┬áa standard abstraction for writing
     * streaming data to a destination, known as a sink. This object comes with
     * built-in backpressure and queuing. */
    declare class WritableStream {
      constructor(
        underlyingSink?: UnderlyingSink,
        strategy?: QueuingStrategy
      );
      readonly locked: boolean;
      abort(reason?: any): Promise;
      close(): Promise;
      getWriter(): WritableStreamDefaultWriter;
    }
    /** This Streams API interface represents a controller allowing control of a
     * WritableStream's state. When constructing a WritableStream, the underlying
     * sink is given a corresponding WritableStreamDefaultController instance to
     * manipulate. */
    interface WritableStreamDefaultController {
      error(error?: any): void;
    }
    /** This Streams API interface is the object returned by
     * WritableStream.getWriter() and once created locks the  {
      readonly closed: Promise;
      readonly desiredSize: number | null;
      readonly ready: Promise;
      abort(reason?: any): Promise;
      close(): Promise;
      releaseLock(): void;
      write(chunk: W): Promise;
    }
    declare class TransformStream {
      constructor(
        transformer?: Transformer,
        writableStrategy?: QueuingStrategy,
        readableStrategy?: QueuingStrategy
      );
      readonly readable: ReadableStream;
      readonly writable: WritableStream;
    }
    interface TransformStreamDefaultController {
      readonly desiredSize: number | null;
      enqueue(chunk: O): void;
      error(reason?: any): void;
      terminate(): void;
    }
    interface Transformer {
      flush?: TransformStreamDefaultControllerCallback;
      readableType?: undefined;
      start?: TransformStreamDefaultControllerCallback;
      transform?: TransformStreamDefaultControllerTransformCallback;
      writableType?: undefined;
    }
    interface TransformStreamDefaultControllerCallback {
      (controller: TransformStreamDefaultController): void | PromiseLike;
    }
    interface TransformStreamDefaultControllerTransformCallback {
      (
        chunk: I,
        controller: TransformStreamDefaultController
      ): void | PromiseLike;
    }
    interface DOMStringList {
      /** Returns the number of strings in strings. */
      readonly length: number;
      /** Returns true if strings contains string, and false otherwise. */
      contains(string: string): boolean;
      /** Returns the string with index index from strings. */
      item(index: number): string | null;
      [index: number]: string;
    }
    declare class DOMException extends Error {
      constructor(message?: string, name?: string);
      readonly name: string;
      readonly message: string;
    }
    type BufferSource = ArrayBufferView | ArrayBuffer;
    type BlobPart = BufferSource | Blob | string;
    interface BlobPropertyBag {
      type?: string;
      ending?: "transparent" | "native";
    }
    /** A file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format. The File interface is based on Blob, inheriting blob functionality and expanding it to support files on the user's system. */
    interface Blob {
      readonly size: number;
      readonly type: string;
      arrayBuffer(): Promise;
      slice(start?: number, end?: number, contentType?: string): Blob;
      stream(): ReadableStream;
      text(): Promise;
    }
    declare const Blob: {
      prototype: Blob;
      new (blobParts?: BlobPart[], options?: BlobPropertyBag): Blob;
    };
    interface FilePropertyBag extends BlobPropertyBag {
      lastModified?: number;
    }
    /** Provides information about files and allows JavaScript in a web page to
     * access their content. */
    interface File extends Blob {
      readonly lastModified: number;
      readonly name: string;
    }
    declare const File: {
      prototype: File;
      new (fileBits: BlobPart[], fileName: string, options?: FilePropertyBag): File;
    };
    declare const isConsoleInstance: unique symbol;
    declare class Console {
      indentLevel: number;
      [isConsoleInstance]: boolean;
      /** Writes the arguments to stdout */
      log: (...args: unknown[]) => void;
      /** Writes the arguments to stdout */
      debug: (...args: unknown[]) => void;
      /** Writes the arguments to stdout */
      info: (...args: unknown[]) => void;
      /** Writes the properties of the supplied `obj` to stdout */
      dir: (
        obj: unknown,
        options?: Partial
      ) => void;
      /** From MDN:
       * Displays an interactive tree of the descendant elements of
       * the specified XML/HTML element. If it is not possible to display
       * as an element the JavaScript Object view is shown instead.
       * The output is presented as a hierarchical listing of expandable
       * nodes that let you see the contents of child nodes.
       *
       * Since we write to stdout, we can't display anything interactive
       * we just fall back to `console.dir`.
       */
      dirxml: (
        obj: unknown,
        options?: Partial
      ) => void;
      /** Writes the arguments to stdout */
      warn: (...args: unknown[]) => void;
      /** Writes the arguments to stdout */
      error: (...args: unknown[]) => void;
      /** Writes an error message to stdout if the assertion is `false`. If the
       * assertion is `true`, nothing happens.
       *
       * ref: https://console.spec.whatwg.org/#assert
       */
      assert: (condition?: boolean, ...args: unknown[]) => void;
      count: (label?: string) => void;
      countReset: (label?: string) => void;
      table: (data: unknown, properties?: string[] | undefined) => void;
      time: (label?: string) => void;
      timeLog: (label?: string, ...args: unknown[]) => void;
      timeEnd: (label?: string) => void;
      group: (...label: unknown[]) => void;
      groupCollapsed: (...label: unknown[]) => void;
      groupEnd: () => void;
      clear: () => void;
      trace: (...args: unknown[]) => void;
      static [Symbol.hasInstance](instance: Console): boolean;
    }
    declare interface Crypto {
      readonly subtle: null;
      getRandomValues(
        array: T
      ): T;
    }
    type FormDataEntryValue = File | string;
    /** Provides a way to easily construct a set of key/value pairs representing
     * form fields and their values, which can then be easily sent using the
     * XMLHttpRequest.send() method. It uses the same format a form would use if the
     * encoding type were set to "multipart/form-data". */
    interface FormData extends DomIterable {
      append(name: string, value: string | Blob, fileName?: string): void;
      delete(name: string): void;
      get(name: string): FormDataEntryValue | null;
      getAll(name: string): FormDataEntryValue[];
      has(name: string): boolean;
      set(name: string, value: string | Blob, fileName?: string): void;
    }
    declare const FormData: {
      prototype: FormData;
      // TODO(ry) FormData constructor is non-standard.
      // new(form?: HTMLFormElement): FormData;
      new (): FormData;
    };
    interface Body {
      /** A simple getter used to expose a `ReadableStream` of the body contents. */
      readonly body: ReadableStream | null;
      /** Stores a `Boolean` that declares whether the body has been used in a
       * response yet.
       */
      readonly bodyUsed: boolean;
      /** Takes a `Response` stream and reads it to completion. It returns a promise
       * that resolves with an `ArrayBuffer`.
       */
      arrayBuffer(): Promise;
      /** Takes a `Response` stream and reads it to completion. It returns a promise
       * that resolves with a `Blob`.
       */
      blob(): Promise;
      /** Takes a `Response` stream and reads it to completion. It returns a promise
       * that resolves with a `FormData` object.
       */
      formData(): Promise;
      /** Takes a `Response` stream and reads it to completion. It returns a promise
       * that resolves with the result of parsing the body text as JSON.
       */
      json(): Promise;
      /** Takes a `Response` stream and reads it to completion. It returns a promise
       * that resolves with a `USVString` (text).
       */
      text(): Promise;
    }
    type HeadersInit = Headers | string[][] | Record;
    /** This Fetch API interface allows you to perform various actions on HTTP
     * request and response headers. These actions include retrieving, setting,
     * adding to, and removing. A Headers object has an associated header list,
     * which is initially empty and consists┬áof zero or more name and value pairs.
     * ┬áYou can add to this using methods like append() (see Examples.)┬áIn all
     * methods of this interface, header names are matched by case-insensitive byte
     * sequence. */
    interface Headers {
      append(name: string, value: string): void;
      delete(name: string): void;
      get(name: string): string | null;