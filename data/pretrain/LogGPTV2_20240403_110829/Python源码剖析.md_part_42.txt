第11章Python虚拟机中的函数机制
(PyTuple_GET_SIZE(co->co_freevars))（
for
int
图11-27
一深度探索动态语言核心技术
freevars[PyTuple_GET_sIzE(co->co_cellvars)+i]d
Pyobiect
PyFrameObject
=O;1co_Ereevars):1)（
设置cell对象之后的inner_func函数的PyFrameObject 对象
局部变量
一定是到_Iocalsplus中的free变量区域中获
celL对象
flocalsplus
(（(EyFunctionobiect)func）->
cell
obref
运行时栈
---
## Page 287
11.6.3
should_say（fune）”的一种包装形式，为了验证这一点，我们来看看两者编译之后的结
decoratorl.py的行为也非常好理解了。这个现象提示我们，decorator似乎就是“unc
图11-26和图11-27，Pyton中的closure定然能够了然于胸了。
果：
[decoratorl.py]
修改：
Eune()
def funie():
should_say
func()
def
[LOAD_DEREF]
funo-
//输出结果为：
/in fune
执行decoratorl.py，会发现输出的结果完全相同，同时，基于上面对closure的剖析，
print
实际上我们可以完全不用decorator，
在closure技术的基础上，Python实现了decorator。考虑下面的例子：
到现在，我们已经剖析完了closure从创建、传递到使用的全过程，再回顾一下图11-25、
return say
should
Decorator
=should_say(func)
fn(*args)
print say something...
infunc
bungut
x=freevars[oparg]：//获得ryCellobjedt对象
say(fn):
continue;
Pycell_Get(x):
PUSH(W)
//获得Pyce11object.obobi指向的对象
而实现相同的效果，只需要对Eunc进行小小的
11.6嵌套函数、闭包与decorator
Python源码剖析
深度探索动态语言核心技术
257
---
## Page 288
258
Python源码剖析
的一种包装方式，而理解decorator的关键，就在于理解Pyhon中的closure了。
编译后的字节码指令序列除了“LOAD_NAMEO”的位置不同，其余的都完全相同。
互为逆运算，可以删除，如此一来，decoratorl.py编译后的字节码指令序列和decoratot.py
2
def func(）:
[decorator.py]
第11章Python虚拟机中的函数机制
print
STORE_NAMEI(TunC)
CALL_FUNCTION 1
MAKE FUNCTIONO
一深度探索动态语言核心技术
()
2
func=should_say(func)
2
[decoratorl.py]
8
LOAD_coNsm L ()
STORENAME1(fUnC)
CALLFUNCTION1
LOADLNAME
STORE_NAME1
LOADNAME
print
(shoulasay)
(func)
---
## Page 289
12.1Python中的对象模型
需要定义一些术语，尝试用另一套结构对Python中的类机制建模。
时，用不了多久，不论是我，还是读者，都会发现自已的脑袋像浆糊一样了。所以，我们
来描述这种微妙区别的我来说，这真是一场灾难。当我在类、类对象、对象之间不断切换
但不幸的是，在Python中所有的东西都是对象，所以类也是一种对象：对于尝试用文字
这种统一后的类型机制，称之为newstyleclass机制。
补了内置type和用户自定义class之间的鸿沟，使这两者能够在概念上实现了完全一致。
建一个继承自dict的类MyDictPython的开发者们在Python2.2中花费了巨大的精力填
却不能被继承，也就是说你没有办法以类似于C++、Java中的继承方式那样，很自然地创
义的classA可以被继承，作为另一个classB的基类：但不幸的是，Python的内置type
如int，aict，与Python程序员定义的class并不是完全等同的。举一个例子，用户定
终将在Python中消失，所以在本章中，仅仅考察Python中new styleclass机制的实现。
大的差别，但是在实现上，两者有很大的区别。随着Python的不断演进，classicclass最
一套称为classicclass，而另一套称为new styleclass。虽然从使用上来看，两者并没有太
在面向对象的理论中，有两个核心的概念：类和对象。Pyhon中也实现了这两个概念
在Python2.2之前，Python中存在着一个巨大的裂缝，就是Python的内置type：
在Python2.2之前，Python中实际上存在三类对象：
本章将研究类机制在Python中的实现。从Python2.2开始，Python中有了两套类机制
Python虚拟机中的类机制
Python源码剖析
一深度探索动态语言核心技术
第
CHAPTER
比
---
## Page 290
Python源码剖析
12.1.1
260
一下推理，显然，a和object之间也存在is-instance-of关系，即a也是object的一个实例。
object的子类；而a和A之间存在is-instance-of关系，即a是A的一个实例。再稍微进行
有面向对象基础的读者一定马上能够指出，object和A之间存在is-kind-of关系，即A是
入细致地剖析Python对象模型的方方面面。
单地介绍了一下Python对象模型，主要关注了Python对象在C一级的组织。而本章将深
系。我们将这些对象和它们之间的联系称为类型系统或对象模型。在本书的开始，我们简
这个概念在Python中的实现。
A的class”或“classA”这样的说法。但是当我们使用“class对象”时，就与“class”
达。当然，术语class在某种情况下也表示“类型”，比如我们会采用“定义了一个名为
对于“实例对象a的类型是A”这样的说法，我们就可用“实例对象a的type是A”来表
对象，则采用来表示名为a的instance对象。
于class对象A，我们采用来表示名为A的class对象；而对于instance
表示Python2.2之前的“type对象”和“class对象”。并且我们采用一种表达形式，对
class A(object):
is-instance-of关系：这种关系对应于面向对象中类与实例之间的关系。
=A（
is-kind-of关系：这种关系对应于面向对象中的基类与子类之间的关系：
第12章Python虚拟机中的类机制
其中包含了三个对象：object（class对象），A（class对象）和a（instance对象）。
对象间的关系
同时，我们将采用术语type来表示“类型”（注意，不是类型对象）这个概念。比如
考虑下面的Python代码：
在Python的三种对象之间，存在着两种关系：
在class对象与class 对象之间，class对象与instance对象之间，存在着多种联
而在Python2.2之后，type和class已经统一，所以我们用“class对象”来统一地
paas
instance对象（实例对象）：表示由class对象创建的实例。
class对象：表示Python程序员定义的类型；
type对象：表示Python内置的类型；
深度探索动态语言核心技术
---
## Page 291
图12-1显示了利用这些方法探测和验证关系的例子：
两个内置方法issubclass和isinstanceof来判断两个对象间是否存在我们期望的关系，
内置的type方法可以探测一个对象和哪个对象存在is-instance-of关系：而通过对象的
间存在，而a是一个instance对象，显然不能拥有这种关系。
因为is-kind-of关系对应的是基类和子类的关系，显然只能在class对象与class对象之
bases_属性则可探测一个对象和哪个对象存在is-kind-of关系。此外，Python还提供
Python提供了一些方法可以用来探测这些关系，通过对象的
图12-2则更加形象和清晰地展示了这三个对象之间的关系：
bases
True
>>>isinstance(a,A)
AttributeError:A'object has no attribute_bases
type
ctype
>>object.
>issubclass(A,object)
True
class
File
的结果看出，并不是所有的对象都拥有is-kind-of关系。这也很合理，
object'>,)
bases
bases
main
main
is-imstance-of
Class
A'>
.A>
图12-1
图12-2对象关系图
iine
探测对象间的关系
1,in 
Python源码剖析
12.1Python中的对象模型
is-kind-of
深度探索动态语言核心技术
class
属性或Python
261
---
## Page 292
12.1.2
262
Python源码剖析
class对象，又是instance对象。说它是class对象，因为它可以通过实例化的动作创
我们说Python 中的对象分为class对象和instarce 对象，但中间这一列的对象既是
object>之间的关系。
到这种微妙的关系，同时，图12-3还探测了其他一些type对象与和这一个metaclass对象，而一般的class 对象，仍以
象能够成为其他class对象的type。这种特殊的class对象我们称之为metaclass对象，
“class对象”称之。在Python中，metaclass对象的意义非常重大，在后面的剖析中我
type'>。属于Python中的一种特殊的class对象，这种特殊的class对
马上我们就会看到。
ctype
ctype
>>>object.class
ctype
(Ktype
Ktype
为什么要将两种对象分为三列呢？因为最左边的这个对象非常特殊，
第12章Python虚拟机中的类机制
在和之间有非常微妙的关系，通过图12-3可以看
Python中还有一个特殊的class对象一
将object和放在一起是因为它们有一个共同的特点，即它们的type都是
Itypel>
class
深度探索动态语言核心技术
bases
class
bases
bases
图12-3探测对象之间的关系
--is-instance-of
metaciass
，在Python中，任何一
class对象
imstance对象
---
## Page 293
12.2
这种二相性对于理解后面的内容有着非常重要的意义。
化得到的，图12-3也显示出class对象和metaclass对象之间存在is-instance-of关系。
建新的instance对象：说它是instance对象，因为它确实是metaclass对象经过实例
我们来尝试一下：
之后的class对象还存在着差别。前面提到在Pyhon2.2之前不能继承内置类型，那好，
停留在Python2.2之前，前面说了，这时的pyInt_Type应该叫做type对象，跟Python2.2
是，也不是。听，至少目前还不是。目前我们对诸如PyInt_Type，PyLst_Type的认识还
结构体。那么我们之前看到过的PyInt_Type，PyList_Type，这些都是class对象了？
我们之前对这个对象早已司空见惯了。在Python内部，class对象其实就是一个pyobject
能被继承的原因。因为没有在type中寻找某个属性的机制。
是pyInt_Type.tp_as_number.nb_ada呢？这就是为什么Pyhon2.2之前的内置类型不
（int_ada）可以完成加法操作，但是，Pyhon虚拟机该怎么从int._aad_得知要调用的
会在正常加法结果的基础上再加上10。现在用我们的大脑模拟一下Python虚拟机，当a
class MyInt (int):
V
=MyInt (1)
从 type 对象到 class 对象
从内置的irt类型继承得到一个新的整数类型，这种类型的整数在进行加法操作时，
在Python中，实现“类”这个概念的是class对象，这个对象听上去神秘，实际上，
任何一个instance对象的type都是一个class对象，而任何一个class对象的type
现在我们可以总结一下：
def
PyBaseObjeat_Typee
Python内部，它实际上对应的就是pyType_Typea
return
int.
(self,other):
Python源码剖析
12.2从type对象到class对象
一深度探索动态语言核心技术
263
---
## Page 294
Python源码剖析
264
象a进行操作，