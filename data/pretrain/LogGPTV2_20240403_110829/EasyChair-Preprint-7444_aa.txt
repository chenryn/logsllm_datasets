### EasyChair Preprint
**â„– 7444**

**LogNG: An Online Log Parsing Method Based on N-gram**
Xiangrui Liu, Shi Ying, Xinquan Ge, Shengkang Hu, and Tiangang Li

**EasyChair Preprints** are intended for the rapid dissemination of research results and are integrated with the rest of the EasyChair platform.

**Publication Date:** February 8, 2022

---

**Authors:**
1. **Xiangrui Liu**
   - School of Computer Science, Wuhan University, Wuhan, China
   - Email: PI:EMAIL
2. **Shi Ying**
   - School of Computer Science, Wuhan University, Wuhan, China
   - Email: PI:EMAIL
3. **Xinquan Ge**
   - School of Computer Science, Wuhan University, Wuhan, China
   - Email: PI:EMAIL
4. **Shengkang Hu**
   - School of Computer Science, Wuhan University, Wuhan, China
   - Email: PI:EMAIL
5. **Tiangang Li**
   - School of Computer Science, Wuhan University, Wuhan, China
   - Email: tiangangli@whu.edu.cn

---

**Abstract:**
The first step in automatic log analysis is log parsing. The volume of logs has increased significantly with the growth in system size, making manual log analysis a challenging task. To address this issue, we propose **logNG**, an online log parsing method based on N-gram that can efficiently parse logs in a streaming manner without requiring historical data training. When log messages are input as a stream, we first divide them into different log groups based on their length. We use a simple assumption: if multiple continuous different tokens appear between log messages, these messages belong to different log templates. For each log group, we apply N-gram for template matching to further group the log messages. We evaluate and compare logNG with other log parsers using public datasets. The experimental results show that logNG achieves the highest accuracy and efficiency.

**Index Terms:**
- Log parsing
- Online algorithm
- N-gram

---

**Introduction:**
Logs play a crucial role in modern software systems, but extracting their value remains a significant challenge [1], [2], [3], [4]. Log parsing is the initial step in automatic log analysis, and its quality greatly influences downstream tasks [5], [6], [7]. Log parsing converts unstructured data into structured data [8], [9] by separating header information (e.g., date, time, level) and content (e.g., static text and dynamic variables) [10], [11], [12].

As shown in Figure 1, a log record statement generates a raw log message during system operation, typically consisting of header information and content. The header information includes the date, time, and level, while the content consists of static text and dynamic variables. Log parsing requires more than just filtering out header information; it also involves extracting the static text and dynamic variables from the content.

In this paper, we introduce **logNG**, an online automatic log parsing method that accurately and efficiently parses raw log messages in a streaming manner. logNG automatically extracts log templates from raw log messages without needing source code or historical log data.

We evaluated logNG and other log parsers on real log datasets collected by the LogPai team [14]. logNG achieved the highest results on most datasets and was also very fast in running time. Our work makes the following contributions:
- **Proposal of logNG:** An online automatic log parsing method that divides log messages into different groups based on their length and uses N-gram for template matching.
- **Efficiency and Accuracy:** Our method not only solves the problem of manually parsing log templates but is also an online method that does not require historical data for training.
- **Experimental Validation:** The results on real log datasets demonstrate the high accuracy and efficiency of logNG.

**Figure 1.** The Log Parsing Process of a Raw Log Message from Hadoop.

---

**Related Work:**
- **Rule-based Log Parsing:** This approach relies on heuristic rules (often in the form of regular expressions) to parse logs. However, it is not feasible due to the rapid increase in log size [15], [16], [17], [18], [19].
- **Source Code-based Log Parsing:** Some research supports log parsing based on source code [20], [21]. However, this method is impractical when the source code is unavailable.
- **Data Mining-based Log Parsing:** This approach does not require source code and uses various data mining techniques to separate dynamic variables and static text [22].
- **LKE Algorithm:** A representative offline log parsing algorithm that hierarchically clusters log messages using weighted edit distance and generates log keys from the clusters [23].
- **LogMine Framework:** An unsupervised framework that scans log messages once and iteratively generates a pattern hierarchy [24].
- **MoLFI Tool:** Solves the problem of log message format identification by reconstructing it as a multi-objective problem and using an evolutionary method [25].
- **SHISO Method:** An online method for mining log formats and retrieving log types and parameters by creating a structured tree from log messages [26].

---

**Methodology:**
- **Initial Log Group Creation:** When a log group is created for the first time, the content of the log message is directly assigned to the Template. At this stage, logNG has not yet distinguished between static text and dynamic variables.
- **Template Matching and Updating:** As new log messages arrive, they are matched with the existing Templates in the log groups. If a match is successful, logNG compares the Template with the new log message, recognizes the static text and dynamic variables, and updates the Template.
- **TemplateID Assignment:** The log group list starts empty. When a new log group is generated, logNG assigns it a TemplateID starting from 1. Each subsequent log group receives a new TemplateID, which is the previous TemplateID plus 1. This ensures that the TemplateID is equivalent to the sequence number of the log group in the list.
- **LogIDList Management:** Each log message has a corresponding log ID. When a log message matches a log group, its log ID is added to the LogIDList of that log group.

**Example:**
- **TemplateID: 13**
  - **Template:** Verification succeeded for
  - **Length:** 4
  - **LogIDList:** [1, 22, 56, 168, 245, ...]

This indicates that log messages with IDs 1, 22, 56, 168, 245, etc., match the Template with TemplateID 13.

---

**Conclusion:**
In summary, logNG is an efficient and accurate online log parsing method that can handle large volumes of log data in real-time. The experimental results on real log datasets validate the effectiveness of our approach. Future work will focus on further improving the performance and scalability of logNG.

---

**References:**
[1] Reference 1
[2] Reference 2
[3] Reference 3
[4] Reference 4
[5] Reference 5
[6] Reference 6
[7] Reference 7
[8] Reference 8
[9] Reference 9
[10] Reference 10
[11] Reference 11
[12] Reference 12
[13] Reference 13
[14] Reference 14
[15] Reference 15
[16] Reference 16
[17] Reference 17
[18] Reference 18
[19] Reference 19
[20] Reference 20
[21] Reference 21
[22] Reference 22
[23] Reference 23
[24] Reference 24
[25] Reference 25
[26] Reference 26

---

This version of the text is more structured, coherent, and professional, with clear sections and a logical flow of information.