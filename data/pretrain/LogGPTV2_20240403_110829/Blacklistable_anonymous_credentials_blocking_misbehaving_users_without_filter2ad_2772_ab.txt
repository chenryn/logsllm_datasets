We now give informal deﬁnitions of the various security
properties that a construction of the BLAC system must pos-
sess. The reader may refer to Appendix A for the formal
version of these deﬁnitions.
3.2.1 Mis-authentication Resistance
Mis-authentication occurs when an unregistered user suc-
cessfully authenticates herself to an SP. In a BLAC system
with mis-authentication resistance, SPs are assured to ac-
cept authentication only from registered users.
6We don’t deﬁne the equivalence of tickets here because it
is construction-dependent.
3.2.2 Blacklistability
Any SP Bob may blacklist a user, who has authenticated
successfully, at any later time. As a consequence, the black-
listed user will no longer be able to successfully authenticate
herself to Bob until the user is unblacklisted by Bob. In a
BLAC system with blacklistability, SPs are assured to accept
authentication only from well-behaving users, i.e., users who
are not blacklisted.
3.2.3 Anonymity
In a system with anonymity, all that SPs can infer about
the identity of an authenticating user is whether the user is
or was blacklisted at the time of protocol execution, regard-
less of whatever the SPs do afterwards, such as arbitrarily
manipulating their blacklists.
3.2.4 Non-frameability
A user Alice is framed if she is not currently blacklisted
by an honest SP Bob, but is unable to successfully au-
thenticate herself to Bob.
In a BLAC system with non-
frameability, well-behaving users can always successfully au-
thenticate themselves to honest SPs.
Security.
Any construction of the BLAC system must be secure:
Definition 2
the
BLAC system is secure if it has mis-authentication resis-
tance, blacklistability, anonymity and non-frameability.
(Security). A construction of
4. PRELIMINARIES
In this section we outline the assumptions and crypto-
graphic tools that we use as building blocks in our construc-
tion of the BLAC system.
4.1 Pairings
A pairing is a bilinear mapping from a pair of group el-
ements to a group element. Speciﬁcally, let G1, G2 and
GT be multiplicative cyclic groups of order p. Suppose P
and Q are generators of G1 and G2 respectively. A function
ˆe : G1 × G2 → GT is said to be a pairing if it satisﬁes the
following properties:
• (Bilinearity.) ˆe(Ax, By) = ˆe(A, B)xy for all A ∈ G1,
B ∈ G2 and x, y ∈ Zp.
• (Non-degeneracy.) ˆe(P, Q) 6= 1, where 1 is the identity
element in GT .
• (Eﬃcient Computability.) ˆe(A, B) can be computed
eﬃciently (i.e. in polynomial time) for all A ∈ G1 and
B ∈ G2.
4.2 Mathematical Assumptions
The security of our construction of the BLAC system re-
quires the following two assumptions:
Decisional
(DDH). The
Assumption 1
Diﬃe-
Hellman (DDH) problem in group G is deﬁned as
follows: On input of a quadruple (g, ga, gb, gc) ∈ G4,
output 1 if c = ab and 0 otherwise. We say that the DDH
assumption holds in group G if no probabilistic polynomial
time (PPT) algorithm has non-negligible advantage over
random guessing in solving the DDH problem in G.
Assumption 2
(q-SDH). The q-Strong Diﬃe-Hellman
(q-SDH) problem in (G1, G2) is deﬁned as follows: On input
0 ) ∈ G1 × Gq+1
of a (q + 2)-tuple (g0, h0, hx
,
output a pair (A, c) ∈ G1 × Zp such that A(x+c) = g0 where
|G1| = p. We say that the q-SDH assumption holds in
(G1, G2) if no PPT algorithm has non-negligible advantage
in solving the q-SDH problem in (G1, G2).
0 , · · · , hxq
0 , hx2
2
4.3 Proofs of Knowledge
In a Zero-Knowledge Proof of Knowledge (ZKPoK) proto-
col [23], a prover convinces a veriﬁer that some statement is
true without the veriﬁer learning anything except the valid-
ity of the statement. Σ-protocols are a special type of three-
move ZKPoK protocols, which can be converted into non-
interactive Signature Proof of Knowledge (SPK) schemes,
or simply signature schemes [24], that are secure under the
Random Oracle (RO) Model [5].
In the following, we review several Σ-protocols that will
be needed as building blocks in our construction. We fol-
low the notation introduced by Camenisch and Stadler [17].
For instance, P K{(x) : y = gx} denotes a Σ-protocol that
proves the knowledge of x ∈ Zp such that y = gx for some
y ∈ G. The corresponding signature scheme resulting from
the application of the Fiat-Shamir heuristic to the above
Σ-protocol is denoted by SP K{(x) : y = gx}(M ).
4.3.1 Knowledge and Inequalities of Discrete Loga-
rithms
Let g, b ∈ G and bi ∈ G for all i be generators of some
group G of prime order p such that their relative discrete
logarithms are unknown. One can prove in zero-knowledge
the knowledge of the discrete logarithm x ∈ Zp of y ∈ G in
base g by using the Σ-protocol:
P K {(x) : y = gx} ,
the construction of which ﬁrst appeared in Schnorr identiﬁ-
cation [30]. As we shall see, our BLAC construction requires
the SPK of this protocol to prove the correctness of tickets.
One can further prove in zero-knowledge that x does not
equal logb t, the discrete log of t ∈ G in base b, using the
Σ-protocol:
P K {(x) : y = gx ∧ t 6= bx} ,
the most eﬃcient construction of which is due to Camenisch
and Shoup [16, §5].
In our BLAC system construction we will need a gener-
alized version of the above Σ-protocol to prove that a user
is not currently on the blacklist. In particular, we need a
protocol that allows one to prove in zero-knowledge that, for
some n > 1 and for all i = 1 to n, x 6= logbi
ti, where ti ∈ G.
That is,
P K((x) : y = gx ∧  n
^i=1
ti 6= bx
i!) .
Such a Σ-protocol can be constructed by applying a tech-
nique due to Cramer et al. [19] to Camenisch and Shoup’s
construction mentioned above.7
7The technique describes a general method of constructing
proofs of disjunction or conjunction of any of the two state-
ments about knowledge of discrete logarithms.
4.3.2 BBS+ Signatures
Let g0, g1, g2 ∈ G1 and h0 ∈ G2 be generators of G1 and
G2 respectively such that g0 = ψ(h0) and their relative dis-
crete logarithms are unknown, where ψ is a computable iso-
morphism and (G1, G2) is a pair of groups of prime order p
in which the q-SDH assumption holds. Let e be a pairing
deﬁned over the pair of groups. One can prove possession of
a tuple (A, e, x, y) ∈ G1 × Z3
2 , or
equivalently, ˆe(A, whe
0 , by
the Σ-protocol:
1 gy
2 , h0), where w = hγ
p such that Ae+γ = g0gx
0) = ˆe(g0gx
1 gy
P K{(A, e, x, y) : Ae+γ = g0gx
1 gy
2 }.
The construction of this protocol can be found in [6, §4],
which is secure under the Decision-linear Diﬃe-Hellman as-
sumption. Au et al. [4] provide a modiﬁed construction that
does not need to rely on such an assumption. As ﬁrst pointed
out in [15], the protocol’s corresponding SPK is actually the
SDH-variant of CL signatures [14], which is referred to as
BBS+ Signatures in [4]. Our BLAC construction will need
this protocol as a building block for users to prove that they
are legitimate in the system. We will employ the construc-
tion given in [4] to avoid the need of less standard assump-
tions.
5. SYSTEM CONSTRUCTION
In this section, we detail our cryptographic construction
and assess its security and eﬃciency.
5.1 Description
5.1.1 Parameters
Let λ, ℓ be suﬃciently large security parameters. Let
(G1, G2) be a bilinear group pair with computable isomor-
phism ψ as discussed such that |G1| = |G2| = p for some
prime p of λ bits. Also let G be a group of order p where
DDH is intractable. Let g0, g1, g2 ∈ G1 and h0 ∈ G2 be
generators of G1 and G2 respectively such that g0 = ψ(h0)
and the relative discrete logarithm of the generators are un-
known.8 Let H0 : {0, 1}∗ → G and H : {0, 1}∗ → Zp be
secure cryptographic hash functions.
5.1.2 Setup
The GM randomly chooses γ ∈R Zp and computes w =
hγ
0 . The group secret key is gsk = (γ) and the group public
key is gpk = (w).
5.1.3 Registration
At the successful termination of this protocol between a
user Alice and the GM, Alice obtains a credential in the
form of (A, e, x, y) such that Ae+γ = g0gx
2 , and (A, e, x, y)
is known only to the user. The private input to the GM is
the group secret key gsk.
1 gy
1. The GM sends m to Alice, where m ∈R {0, 1}ℓ is a
random challenge.
2. Alice sends a pair (C, Π1) to the GM, where C =
p and Π1
2 ∈ G1 is a commitment of (x, y′) ∈R Z2
1 gy ′
gx
is a signature proof of knowledge of
SP K1n(x, y′) : C = gx
1 gy ′
2 o (m)
(1)
8This can be done by setting the generators to be the output
of a cryptographic hash function of some publicly known
seeds.
on challenge m, which proves that C is correctly
formed.
3. The GM returns as failure if the veriﬁcation of Π1
returns invalid. Otherwise the GM sends to Al-
ice a tuple (A, e, y′′), where e, y′′ ∈R Zp and A =
(g0Cgy ′′
2 )
e+γ ∈ G1.
4. Alice computes y = y′ + y′′. She returns as failure
2 , h0). Otherwise she outputs
if ˆe(A, whe
cred = (A, e, x, y) as her credential.
0) 6= ˆe(g0gx
1 gy
1
To prevent the possibility of a concurrent attack [20], we
require that users must be registered one after the other, as
opposed to concurrently.
5.1.4 Authentication
During an execution of this protocol between a user Alice
and an SP Bob, Alice’s private input is her credential cred =
(A, e, x, y). Let Bob ∈ {0, 1}∗ be the string that uniquely
identiﬁes Bob. When the protocol terminates, Bob outputs
success or failure, indicating whether Bob should consider
the authentication attempt successful.
1. (Challenge.) Bob sends to Alice a pair (BL, m),
where m ∈R {0, 1}ℓ is a random challenge and BL =
hτ1, . . . , τni is Bob’s current blacklist and τi = (si, ti) ∈
{0, 1}ℓ ×G, for i = 1 to n, is the i-th ticket in the black-
list.
2. (Blacklist Inspection.) Alice computes, for i = 1 to n,
the bases bi = H0(si||Bob). She returns as failure if
tag ti = bx
for some i (indicating that she is black-
i
listed). She proceeds otherwise.
3. (Proof Generation.) Alice returns to Bob a pair
(τ, Π2), where τ = (s, t) ∈ {0, 1}ℓ × G is a ticket
generated by randomly choosing a serial s ∈R {0, 1}ℓ
and computing the base b as H0(s||Bob) and then the
tag t as bx, and Π2 is a signature proof of knowledge of:
SP K2 (A, e, x, y) :
Ae+γ = g0gx
1 gy
2 ∧  n
^i=1
ti 6= bx
i! ∧ t = bxﬀ(m)
(2)
on the challenge m, which proves:
(a) Ae+γ = g0gx
1 gy
2 , i.e., Alice is a group member,
i=1 ti 6= H0(si||Bob)x, i.e., Alice is not currently
on Bob’s blacklist, and
(b) Vn
(c) t = H0(s||Bob)x,
i.e., the ticket τ is correctly
formed.
4. (Proof Veriﬁcation.) Bob returns as failure if the
veriﬁcation of Π2 returns invalid.9 Otherwise Bob
returns success.
The protocol transcript of a successful authentication at
Bob is thus trans = hBob, BL, m, τ, Π2i. As discussed, Bob
stores ticket τ extracted from the transcript, along with in-
formation logging Alice’s activity within the authenticated
session.
5.1.5 Blacklist Management
The three algorithms are all very simple and eﬃcient.
Extract(trans) returns ticket τ in the input transcript
9Bob also terminates with failure if the blacklist is being
updated concurrently. This behavior ensures that if a user
is blacklisted at time t, she cannot authenticate to the SP
after t or until she is unblacklisted.
trans = hBL, m, τ, Π2i. Add(BL, τ ) returns blacklist BL′,
which is the same as the input blacklist BL, except with
the input ticket τ appended to it. Remove(BL, τ ) returns
blacklist BL′, which is the same as the input blacklist BL,
except with all entries equal to the input ticket τ dropped.
5.2 SPK Instantiation
Both SP K1 and SP K2 presented above require instantia-
tion. We omit spelling out the relatively trivial instantiation
of SP K1. Now we instantiate SP K2 as follows.
5.2.1 Signing
To produce a proof Π2 for SP K2 on message m, do the
following.
1. Produce
auxiliary commitments
(A1, A2, A3,
˜A1, . . . , ˜An) by randomly picking ρ1, ρ2, ρ3, ρ4 ∈R Zp
and computing A1 = gρ1
1 gρ4
and, for all i = 1 to n, ˜Ai = (bx
2 , A2 = Agρ1
2 , A3 = gρ3
1 gρ2
i /ti)ρ3 .
2
2. Return Π2 as (A1, A2, A3, ˜A1, . . . , ˜An, Π3), where Π3
is a signature proof of knowledge of:
SP K3(e, x, y, ρ1, ρ2, ρ3, ρ4, α1, α2, β3, β4) :
A1 = gρ1
A3 = gρ3
1 gρ2
1 gρ4
2 ∧ 1 = A−e
2 ∧ 1 = A−x
1 ˆey+α1
1 gα1
3 gβ3
2 ∧
2 ∧
1 gα2
1 gβ4