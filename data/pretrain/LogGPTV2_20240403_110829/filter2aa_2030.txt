### Forward-Looking Statement Disclaimer

This presentation may contain forward-looking statements under applicable securities laws. All statements other than statements of historical fact are considered forward-looking. These statements are based on the information available to Jamf at the time they are made and reflect Jamf’s current expectations, projections, and plans regarding financial condition, results, objectives, future performance, and business. You can identify forward-looking statements by their use of terms such as "anticipate," "estimate," "expect," "project," "plan," "intend," "believe," "may," "will," "should," "can have," "likely," and similar expressions in discussions about future operating or financial performance or events.

All statements we make about our estimated and projected costs, expenses, cash flows, growth rates, and financial results are forward-looking. Additionally, our plans and objectives for future operations, growth initiatives, product plans, and product strategies are also forward-looking.

Various factors, risks, and uncertainties may cause Jamf’s actual results to differ materially from those expected in any forward-looking statements. These factors and risks are detailed in the documents Jamf files with the U.S. Securities and Exchange Commission (SEC), which are publicly available on the SEC’s website.

Forward-looking statements are not guarantees of future performance, and undue reliance should not be placed on them. Jamf is under no obligation to update any forward-looking statements made in this presentation.

### macOS Detections at Jamf Threat Labs

#### Introduction
- **Introduced in 10.15**: 
  - Replaced Kauth KPI, Mac kernel framework, and OpenBSM audit trail.
  - Kernel extensions are difficult to develop and maintain, and minor bugs often lead to kernel panics.

#### Endpoint Security Framework (ESF) System Extensions
- **Event Subscription**:
  - ESF System Extensions subscribe to system events such as `es_event_create_t`, `es_event_rename_t`, `es_event_exec_t`, and `es_event_fork_t`.
  - The kernel sends detailed information about these events to all subscribed system extensions.

- **Notification Events**:
  - Send detailed event information to subscribed system extensions.
  - Vendors can use this information for logging, applying detection logic, or displaying alerts.
  - Notification events are report-only and do not affect the execution of the event.

- **Authorization Events**:
  - Allow or prevent activity from proceeding.
  - Send event data to subscribed clients and await an approve/deny response.
  - Clients use their own logic to determine whether the event should proceed.
  - Authorization events on processes provide an opportunity for vendors to apply static detections at the moment of execution.

#### Behavioral Detections Powered by ESF

- **Fake File Extension**:
  - Attackers sometimes disguise malicious files by masquerading file extensions, e.g., renaming an executable as a PDF.
  - Detection logic can be applied at the time of file creation.

- **Plist Disguised as Apple**:
  - Attackers gain persistence via malicious launch agents and daemons, often disguising their plist by pre-pending the name with `com.apple`.
  - This can be detected by performing additional code signing checks on the executable at the path in the program arguments of the plist.
  - If the program is not signed by Apple, it should not be called from a plist labeled `com.apple`.

- **Behaviors and Processes**:
  - **Fileless Malware**:
    - Fileless malware uses `curl` to pipe scripts and binaries directly to interpreters like `osascript` to avoid leaving file artifacts.
    - Detection can be achieved by linking interpreter execution with a process group ID (pgid) pointing to `curl`.

- **Advanced Behavioral Detections**:
  - **Gatekeeper Bypass (CVE 2021-30657)**:
    - A bug in macOS Gatekeeper allowed unsigned code to pass checks if the app was missing an `info.plist` and had a script as the app executable.
    - Example: Shlayer abused this bypass, allowing it to run without additional checks or prompts.
  
  - **TCC Bypass (CVE 2022-22616)**:
    - XCSSET discovered piggybacking TCC permissions of legitimate apps.
    - Malicious apps nested inside legitimate apps inherited TCC permissions without user prompts.
    - Detection involves looking for nested app bundles and performing code signing checks.
    - In malicious cases, the inner app has either no code signature, an ad-hoc signature, or a team ID that does not match the outer app.

  - **Gatekeeper Bypass (CVE 2022-22616)**:
    - Legitimate apps hosted online bypassed Gatekeeper checks when auto-unzipped by Safari.
    - The top-level directory of the app bundle was missing the quarantine attribute.
    - When downloaded from a different browser and unzipped manually, the same app received the quarantine attribute.
    - The issue was traced to the Safari Sandbox broker, which failed to index the top level of the app bundle.
    - Detection looks for rename events handled by the Safari Sandbox Broker, confirms the movement of apps from a temp directory to Downloads, and performs an extended attribute lookup to confirm the quarantine bit.

By leveraging these advanced detection techniques, Jamf Threat Labs aims to enhance the security and integrity of macOS environments.