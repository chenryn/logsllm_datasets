should download new information regularly, but wait for a
given time threshold (say, an hour) before using any newly-
published nodes. Dummy trafﬁc to old nodes may also help
thwart trickle attacks.
Directory servers compile node availability and perfor-
mance information by sending trafﬁc through mixes in their
directories. This is currently similar to the current ping
servers [30], but in the future we can investigate integrat-
ing more complex and attack-resistant reputation metrics.
But even this reputation information introduces vulnerabil-
ities: for example, an adversary trying to do trafﬁc analy-
sis can get more trafﬁc by gaining a high reputation [11].
We can defend against these attacks by building paths from
a suitably large pool of nodes [12] to bound the probabil-
ity that an adversary will control an entire path, but there
6We recommend against retrieving anything less than a complete direc-
tory. Even if clients use the mix-net to anonymously retrieve a random sub-
set of the directory, an adversary observing the directory servers and given
two hops in a message’s path can take the intersection over recently down-
loaded directory subsets to guess the remaining hops in the path. Private
Information Retrieval [21] may down the road allow clients to efﬁciently,
securely, and privately download a subset of the directory.
will always be a tension between giving clients accurate and
timely information and preventing adversaries from exploit-
ing the directory servers to manipulate client behavior.
7. Nym management and single-use reply
blocks
Current nymservers, such as nym.alias.net [22],
maintain a set of hmailbox; reply blocki pairs to allow users
to receive mail without revealing their identities. When mail
arrives to , the nymserver at-
taches the payload to the associated reply block and sends
it off into the mix-net. Because these nymservers use the
Type I remailer network, these reply blocks are persistent or
long-lived nyms — the mix network does not drop replayed
messages, so the reply blocks can be used again and again.
Reply block management is much simpler in this model be-
cause users only need to replace a reply block when one of
the nodes it uses stops working.
The Mixminion design protects against replay attacks by
dropping messages with repeated headers — so its reply
blocks are necessarily single-use. Nonetheless, there are
still a number of approaches for building nymservers from
single-use reply blocks.
In the ﬁrst approach, nymservers keep a stock of reply
blocks for each mailbox, and use a new reply block (cid:11)i for
each incoming message. Suppose Alice wants to register a
pseudonym (cid:11) with signature and veriﬁcation keys S(cid:11); V(cid:11)
with the Nym server in order to receive messages from Bob.
In this case, the parties communicate as follows:
(cid:11) ! y : fRegie; (cid:11); V(cid:11); (cid:11)1 : : : (cid:11)gS(cid:11)
B ! y : (cid:11); 
(1)
y ! (cid:11)i : 
As long as the owner of the pseudonym keeps the
nymserver well-stocked, no messages will be lost. But it
is hard for the user to know how many new reply blocks to
send; indeed, under this approach, an attacker can deny ser-
vice by ﬂooding the mailbox to exhaust the available reply
blocks and block further messages from getting delivered.
A more robust design uses a protocol inspired by e-mail
retrieval protocols such as POP [27]: messages arrive and
queue at the nymserver, and the user periodically checks
the status of his mail and sends a sufﬁcient batch of reply
blocks so the nymserver can deliver that mail. In this case,
the parties communicate as follows:
(cid:11) ! y : fRegie; (cid:11); V(cid:11)gS(cid:11)
B ! y : (cid:11); 
(cid:11) ! y : f		ey; (cid:11); (cid:11)1 : : : (cid:11)gS(cid:11)
(2)
y ! (cid:11)i : 
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
In this case, the nymserver doesn’t need to store any re-
ply blocks. The above ﬂooding attack still works, but now
it is exactly like ﬂooding a normal POP mailbox, and the
usual techniques (such as allowing the user to delete mails
at the server or specify which mails to download and let the
others expire) work ﬁne. The user can send a set of indices
to the server after successfully receiving some messages, to
indicate that they can now be deleted.
Of course, there are different legal and security impli-
cations for the two designs. In the ﬁrst design, no mail is
stored on the server, but it must keep valid reply blocks on
hand. The second case is in some sense more secure be-
cause the server need not store any reply blocks, but it also
creates more liability because the server keeps mail for each
recipient until it is retrieved. The owner of the pseudonym
could provide a public key that the nymserver uses to imme-
diately encrypt all incoming messages to limit the amount
of time the nymserver keeps plaintext messages.
The best implementation depends on the situations and
preferences of the volunteers running the nymservers. We
hope that as we gain more experience with their needs and
the needs of their users, we will converge on a suitable
model.
8. Maintaining anonymity sets
8.1. Batching Strategy
Low-latency systems like Onion Routing aim to provide
anonymity against an adversary who is not watching both
Alice and Bob [39]. If the adversary watches both, he can
for instance count packets and observe packet timing to
become conﬁdent that they are communicating. Because
Mixminion aims to defeat even a global passive adversary,
we must address this end-to-end timing vulnerability.
Further, because our adversary can send and delay mes-
sages, he can manipulate the batch of messages entering a
mix so the only message unknown to him in the batch is
the target message. This approach is known as the blending
attack because the adversary blends his own recognizable
messages with the honest messages in the batch [36]. By
repeatedly attacking each mix in the path, the adversary will
link Alice and Bob.
Mixminion nodes use a timed dynamic-pool batching
strategy [36] adapted from Mixmaster. Rather than sim-
ply processing each message as soon as it arrives, each mix
keeps a pool of messages. New messages arrive, are de-
crypted, and enter the pool. The mix ﬁres every  seconds,
but only if the pool contains at least a threshold of messages.
If the mix ﬁres, it randomly chooses a constant fraction of
the pool messages (say, 60%) to deliver.
Since the number of messages delivered each round is
based on the rate of incoming messages, an attacker cannot
overﬂow the pool with sustained ﬂooding. These mixes also
increase the cost of the blending attack: while the number
of messages coming out increases as the rate of incoming
messages increases, the chance that any given message will
leave the pool remains constant. Thus it is impossible to ar-
range to completely ﬂush the mix with high probability in
one ﬂush. An adversary is forced to spend multiple inter-
vals (and thus delay other messages for considerable time)
ﬁrst to ﬂush the original honest messages from the mix, and
again to ﬂush the target message from the mix. This delay
can be noticed by the other mixes, because they communi-
cate over TLS with a heartbeat to detect delays.
This batching strategy also increases the cost of inter-
section attacks by providing large anonymity sets for each
message in the network. Because a message could plausibly
have been held in a pool for several rounds at each mix, the
set of possible senders when Bob receives the target mes-
sage is large.
8.2. Dummy policy
Dummy trafﬁc (sending extra messages that are not ac-
tually meant to be read or used, to confuse the adversary) is
an old approach to improving anonymity, but its efﬁcacy is
still not well analyzed.
One use for dummies is to weaken the intersection at-
tack, perhaps by letting mixes introduce dummies addressed
to actual users. But to do this, each mix must know all the
users in the system: if a mix only delivers dummies to a
subset of the users, an adversary can distinguish with bet-
ter than even probability between a dummy and a legitimate
message. While there is some initial research on the sub-
ject [5], we currently know no practical way to use dum-
mies to provably help against the intersection attack. Thus
Mixminion does not at present incorporate dummies to or
from users.
Instead, we incorporate mix-to-mix dummies to weaken
the blending attack. As described in Section 8.1 above, our
timed dynamic-pool batching strategy already increases the
cost of the blending attack because the adversary needs to
keep ﬂushing the mix until all honest messages are out —
but once the adversary has done so, he can be certain that
no honest messages remain. In the second phase of the at-
tack, he again needs to ﬂush until the target message comes
out, but once it does, he can be certain of recognizing it.
To prevent this, Mixminion employs the following dummy
policy, as suggested in [36]: each time the mix ﬁres, it also
sends out a number of dummies chosen from a geometric
distribution. These dummies travel a number of hops cho-
sen uniformly between 1 and 4. The blending attack is now
harder — the adversary can no longer single out the target
message in the outgoing batch, and so must track each of
the dummies along with the original target message.
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
During normal trafﬁc, these dummies have little effect
on anonymity. They aim to protect anonymity in times of
low trafﬁc — either when there are actually few messages
going through the mix, or when most messages are created
by the adversary.
8.3. Choosing paths when transmitting many mes-
sages
When Alice (the owner of a pseudonym) downloads her
mail from a nymserver, she will likely receive many sep-
arate messages. Similarly, if Alice uses Mixminion as a
transport layer for higher-level applications, sending a large
ﬁle means sending many Mixminion messages, because of
their ﬁxed size. Conventional wisdom suggests that she
should pick a different path for every message, but an ad-
versary that owns all the nodes in any of the paths could
learn her identity — without any work at all. Even an ad-
versary owning a small fraction of the network can perform
this attack, since each Mixminion payload is small.
Alice thus seems most likely to maintain her unlinkabil-
ity by sending all the messages over the same path. On the
other hand, a passive adversary can watch the ﬂood of mes-
sages traverse that path.
A compromise approach is to pick a small number of
paths and use them together. By sending out the messages
over time rather than all at once, and assuming more people
than just Bob are receiving many messages, the pool mixes
will create a large anonymity set of possible senders. How-
ever, a complete solution to the intersection attack remains
an open problem.
9. Attacks and Defenses
Below we summarize a variety of attacks and how well
our design withstands them.
1. Mix attacks
(cid:15) Compromise a mix. Messages traverse multiple
mixes, so compromising a single mix, even a
crossover point, does not gain much.
(cid:15) Compromise a mix’s private key. Again, control-
ling a single mix is of limited use. Further, peri-
odic mix key rotation limits the window of time
in which to attack the next mix in the target mes-
sage’s path.
(cid:15) Replaying messages. Mixes remember header
cryptographic checksums of previously seen
messages; after key rotation these old headers
can no longer be decrypted.
(cid:15) Delaying messages. The adversary can delay
messages and release them when certain network
parameters (eg trafﬁc volume) are different. The
efﬁcacy of this attack is poorly understood, but
it may well be quite damaging [36]. Imposing a
deadline on transmission at each hop may help
[11].
(cid:15) Dropping messages. The adversary can drop
messages with the hope that users will notice and
resend. If the user must resend, she should use
the same path, to prevent the adversary from forc-
ing her onto an adversary-controlled path (see
Section 8.3).
(cid:15) Tagging messages. Mixes detect modiﬁed head-
ers immediately using checksums. The payload
can still be tagged, but the “swap” step along with
SPRP encryption from Section 4.1 provide pro-
tection.
(cid:15) N 1 attack (trickle, ﬂooding) The “timed
dynamic-pool” batching strategy from Section
8.1, along with our dummy policy, limits the ef-
fectiveness of these blending attacks.
2. Passive attacks
(cid:15) Intersection attack. Our dynamic-pool batching
strategy from Section 8.1 spreads out the mes-
sages over time, increasing the set of possible
senders for a given received message and thus in-
creasing the cost of an intersection attack. How-
ever, a complete solution remains an open prob-
lem [5].
(cid:15) Textual analysis. Mixminion provides location
anonymity, not data anonymity. Users are re-
sponsible for making sure their messages do not
reveal identifying information. Such attacks are
practical, and therefore a real threat, as docu-
mented in [34].
3. Exit attacks
(cid:15) Partition trafﬁc by delivery method. We en-
courage recipients to use one of only a few de-
livery methods, so we can maintain sufﬁcient
anonymity sets for each.
(cid:15) Partition trafﬁc by exit capabilities. Delivery
methods should be standardized; users should be
suspicious of delivery methods only offered by a
few exit nodes.
(cid:15) Use the mix network to send hate mail, etc. We
allow recipients to opt out of receiving further
mail. Still, we must have enough nodes that
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
can withstand complaints stemming from abusive
email, or it will be too easy for an adversary to
monitor all exit nodes in the network.
reconstruct it at the recipient’s end. We can use retrans-
mission strategies or forward error correction codes to
recover if some messages are lost.
4. Directory attacks
(cid:15) Compromise a directory server.
Identical di-
rectory listings are served by a small group of
servers and signed by all. We assume that a
threshold of these directory servers will remain
honest.
(cid:15) Exploit differences in client directory knowledge.
By only updating directory information nightly,
by designing client software to pull updates as
soon as possible after their release, and by ensur-
ing that clients have the entire directory, we can
limit this attack.
(cid:15) Delay mix messages until directory information
changes. The fact that clients delay using new
information, along with dummy trafﬁc sent to de-