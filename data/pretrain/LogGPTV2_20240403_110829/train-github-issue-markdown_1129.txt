**I'm submitting a ...** (check one with "x")
    [X] bug report => search github for a similar issue or PR before submitting
    [ ] feature request
    [ ] support request => Please do not submit support request here, instead see https://github.com/angular/angular/blob/master/CONTRIBUTING.md#question
**Current behavior**  
Multiple inheritance from one class leads to multiple/shared metadata when the
base class has an annotation.
    import 'reflect-metadata';
    import { Injectable, Inject } from '@angular/core';
    class A {}
    class B {}
    class C {}
    // Enabling this decorator leads to same log output for booth classes
    //@Injectable()
    class BaseClass {
      constructor(protected a : A) {}
    }
    @Injectable()
    class Cls1 extends BaseClass {
      constructor(@Inject(B) protected b : B, @Inject(A) a : A) {
        super(a);
      }
    }
    @Injectable()
    class Cls2 extends BaseClass {
      constructor(@Inject(C) protected c : C, @Inject(A) a : A) {
        super(a);
      }
    }
    console.log(Reflect.getMetadata('parameters', Cls1))
    console.log(Reflect.getMetadata('parameters', Cls2))
**Expected behavior**  
The DI/Typescript-Metadata should affect only the classes where they are
present.
**Reproduction of the problem**  
Simple example project: https://github.com/draconisNoctis/angular2_di_issue
**What is the motivation / use case for changing the behavior?**  
Any larger project needs inheritance of components/services etc.
  * **Angular version:** 2.0.0-final
  * **Browser:** all & nodejs
  * **Language:** all | ES5