title:Practical Timing Side Channel Attacks against Kernel Space ASLR
author:Ralf Hund and
Carsten Willems and
Thorsten Holz
2013 IEEE Symposium on Security and Privacy
Practical Timing Side Channel Attacks Against Kernel Space ASLR
Ralf Hund, Carsten Willems, Thorsten Holz
Horst-Goertz Institute for IT Security
Ruhr-University Bochum
{ﬁrstname.lastname}@rub.de
Abstract—Due to the prevalence of control-ﬂow hijacking at-
tacks, a wide variety of defense methods to protect both user
space and kernel space code have been developed in the past years.
A few examples that have received widespread adoption include
stack canaries, non-executable memory, and Address Space Layout
Randomization (ASLR). When implemented correctly (i.e., a given
system fully supports these protection methods and no information
leak exists), the attack surface is signiﬁcantly reduced and typical
exploitation strategies are severely thwarted. All modern desktop
and server operating systems support these techniques and ASLR
has also been added to different mobile operating systems recently.
In this paper, we study the limitations of kernel space ASLR
against a local attacker with restricted privileges. We show that
an adversary can implement a generic side channel attack against
the memory management system to deduce information about the
privileged address space layout. Our approach is based on the
intrinsic property that the different caches are shared resources
on computer systems. We introduce three implementations of our
methodology and show that our attacks are feasible on four
different x86-based CPUs (both 32- and 64-bit architectures)
and also applicable to virtual machines. As a result, we can
successfully circumvent kernel space ASLR on current operating
systems. Furthermore, we also discuss mitigation strategies against
our attacks, and propose and implement a defense solution with
negligible performance overhead.
Keywords-Address Space Layout Randomization; Timing At-
tacks; Kernel Vulnerabilities; Exploit Mitigation
I. INTRODUCTION
Modern operating systems employ a wide variety of methods
to protect both user and kernel space code against memory
corruption attacks that leverage vulnerabilities such as stack
overﬂows [1], integer overﬂows [2], and heap overﬂows [3].
Control-ﬂow hijacking attempts pose a signiﬁcant threat and
have attracted a lot of attention in the security community due
to their high relevance in practice. Even nowadays, new vul-
nerabilities in applications, drivers, or operating system kernels
are reported on a regular basis. To thwart such attacks, many
mitigation techniques have been developed over the years. A few
examples that have received widespread adoption include stack
canaries [4], non-executable memory (e.g., No eXecute (NX) bit
and Data Execution Prevention (DEP) [5]), and Address Space
Layout Randomization (ASLR) [6]–[8].
Especially ASLR plays an important role in protecting com-
puter systems against software faults. The key idea behind
this technique is to randomize the system’s virtual memory
layout either every time a new code execution starts (e.g.,
upon process creation or when a driver is loaded) or on each
system reboot. While the initial implementations focused on
randomizing user mode processes, modern operating systems
such as Windows 7 randomize both user and kernel space.
ASLR introduces diversity and randomness to a given system,
which are both appealing properties to defend against attacks: an
attacker that aims to exploit a memory corruption vulnerability
does not know any memory addresses of data or code sequences
which are needed to mount a control-ﬂow hijacking attack.
Even advanced exploitation techniques like return-to-libc [9]
and return-oriented programming (ROP) [10] are hampered
since an attacker does not know the virtual address of memory
locations to which she can divert the control ﬂow. As noted
above, all major operating systems such as Windows, Linux,
and Mac OS X have adopted ASLR and also mobile operating
systems like Android and iOS have recently added support for
this defense method [7], [11]–[13].
Broadly speaking, successful attacks against a system that
implements ASLR rely on one of three conditions:
1) In case not all loaded modules and other mapped memory
regions have been protected with ASLR, an attacker can
focus on these regions and exploit the fact that the system
has not been fully randomized. This is an adoption problem
and we expect that in the near future all memory regions
(both in user space and kernel space) will be fully ran-
domized [14], [15]. In fact, Windows 7/8 already widely
supports ASLR and the number of applications that do
not randomize their libraries is steadily decreasing. Legacy
libraries can also be forced to be randomized using the
Force ASLR feature.
2) If some kind of information leakage exists that discloses
memory addresses [16]–[18], an attacker can obtain the
virtual address of speciﬁc memory areas. She might use
this knowledge to infer additional information that helps
her to mount a control-ﬂow hijacking attack. While such
information leaks are still available and often used in
exploits, we consider them to be software faults that will
be ﬁxed to reduce the attack surface [19], [20].
3) An attacker might attempt to perform a brute-force at-
tack [21]. In fact, Shacham et al. showed that user mode
ASLR on 32-bit architectures only leaves 16 bit of random-
ness, which is not enough to defeat brute-force attacks.
However, such brute-force attacks are not applicable for
kernel space ASLR. More speciﬁcally, if an attacker wants
to exploit a vulnerability in kernel code, a wrong offset will
1081-6011/13 $26.00 © 2013 IEEE
DOI 10.1109/SP.2013.23
191
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:55:20 UTC from IEEE Xplore.  Restrictions apply. 
typically lead to a complete crash of the system and thus
an attacker has only one attempt to perform an exploit.
Thus, brute-force attacks against kernel mode ASLR are
not feasible in practice.
In combination with DEP, a technique that enforces the W ⊕ X
(Writable xor eXecutable) property of memory pages, ASLR
signiﬁcantly reduces the attack surface. Under the assumption
that the randomization itself cannot be predicted due to im-
plementation ﬂaws (i.e., not fully randomizing the system or
existing information leaks), typical exploitation strategies are
severely thwarted.
In this paper, we study the limitations of kernel space ASLR
against a local attacker with restricted privileges. We introduce
a generic attack for systems running on the Intel Instruction
Set Architecture (ISA). More speciﬁcally, we show how a
local attacker with restricted rights can mount a timing-based
side channel attack against the memory management system to
deduce information about the privileged address space layout.
We take advantage of the fact that the memory hierarchy present
in computer systems leads to shared resources between user and
kernel space code that can be abused to construct a side channel.
In practice, timing attacks against a modern CPU are very
complicated due to the many performance optimizations used
by current processors such as hardware prefetching, speculative
execution, multi-core architectures, or branch prediction that
signiﬁcantly complicate timing measurements [22]. Previous
work on side-channels attacks against CPUs [23]–[25] focused
on older processors without such optimization and we had
to overcome many challenges to solve the intrinsic problems
related to modern CPU features [22].
We have implemented three different attack strategies that
are capable of successfully reconstructing (parts of) the kernel
memory layout. We have tested these attacks on different Intel
and AMD CPUs (both 32- and 64-bit architectures) on machines
running either Windows 7 or Linux. Furthermore, we show that
our methodology also applies to virtual machines. As a result,
an adversary learns precise information about the (randomized)
memory layout of the kernel. With that knowledge, she is
enabled to perform control-ﬂow hijacking attacks since she now
knows where to divert the control ﬂow to, thus overcoming
the protection mechanisms introduced by kernel space ASLR.
Furthermore, we also discuss mitigation strategies and show
how the side channel we identiﬁed as part of this work can
be prevented in practice with negligible performance overhead.
In summary, the contributions of this paper are the following:
• We present a generic attack to derandomize kernel space
ASLR that relies on a side channel based on the memory
hierarchy present in computer systems, which leads to tim-
ing differences when accessing speciﬁc memory regions.
Our attack is applicable in scenarios where brute-force
attacks are not feasible and we assume that no implemen-
tation ﬂaws exist for ASLR. Because of the general nature
of the approach, we expect that it can be applied to many
operating systems and a variety of hardware architectures.
• We present three different approaches to implement our
methodology. We successfully tested them against systems
running Windows 7 or Linux on both 32-bit and 64-bit
Intel and AMD CPUs, and also the virtualization software
VMware. As part of the implementation, we reverse-
engineered an undocumented hash function used in Intel
Sandybridge CPUs to distribute the cache among different
cores. Our attack enables a local user with restricted
privileges to determine the virtual memory address of key
kernel memory locations within a reasonable amount of
time, thus enabling ROP attacks against the kernel.
• We discuss several mitigation strategies that defeat our
attack. The runtime overhead of our preferred solution
is not noticeable in practice and successfully prevents
the timing side channel attacks discussed in this paper.
Furthermore, it can be easily adopted by OS vendors.
II. TECHNICAL BACKGROUND
We review the necessary technical background information
before introducing the methodology behind our attack.
A. Address Space Layout Randomization
As explained above, ASLR randomizes the system’s virtual
memory layout either every time a new code execution starts or
every time the system is booted [6]–[8], [26]. More speciﬁcally,
it randomizes the base address of important memory structures
such as for example the code, stack, and heap. As a result,
an adversary does not know the virtual address of relevant
memory locations needed to perform a control-ﬂow hijacking
attack (i.e., the location of shellcode or ROP gadgets). All
major modern operating systems have implemented ASLR. For
example, Windows implements this technique since Vista in
both user and kernel space [12], Linux implements it with the
help of the PaX patches [7], and MacOS ships with ASLR
since version 10.5. Even mobile operating systems such as
Android [11] and iOS [13] perform this memory randomization
nowadays.
The security gain of the randomization is twofold: First,
it can protect against remote attacks, such as hardening a
networking daemon against exploitation. Second, it can also
protect against local attackers by randomizing the privileged
address space of the kernel. This should hinder exploitation
attempts of implementation ﬂaws in kernel or driver code that
allow a local application to elevate its privileges, a prevalent
problem [27], [28]. Note that since a user mode application has
no means to directly access the kernel space, it cannot determine
the base addresses kernel modules are loaded to: every attempt
to access kernel space memory from user mode results in
an access violation, and thus kernel space ASLR effectively
hampers local exploits against the OS kernel or drivers.
Windows Kernel Space ASLR: In the following we describe
the kernel space ASLR implementation of Windows (both 32-
bit and 64-bit). The information presented here applies to Vista,
Windows 7, and Windows 8. We obtained this information by
192
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:55:20 UTC from IEEE Xplore.  Restrictions apply. 
kernel region (6mb, 3 large pages) 
ntoskrnl 
HAL 
HAL 
ntoskrnl 
… 
… 
(1) 
… 
(2) 
… 
… 
32 slots 
… 
32 slots 
Figure 1. ASLR for Windows kernel region (not proportional). Slot and
load order (either (1) or (2)) are chosen randomly
reverse-engineering the corresponding parts of the operating
system code.
During the boot process, the Windows loader is responsible
for loading the two core components of the OS, the kernel
image and the hardware abstraction layer (HAL), which is
implemented as a separate module. At ﬁrst, the Windows loader
allocates a sufﬁciently large address region (the kernel region)
for the kernel image and the HAL. The base address of this
region is constant for a given system. Then, it computes a
random number ranging from 0 to 31. This number is multiplied
by the page size (0x1000) and added to the base address
of the reserved region to form a randomized load address.
Furthermore, the order in which the kernel and the HAL are
loaded is also randomized. Both components are always loaded
consecutively in memory, there is no gap in between. This
effectively yields 64 different slots to which the kernel image
and the HAL each can be loaded (see also Figure 1). In
summary, the formula for computing the kernel base address
is as follows:
k base = kernel region + (r1 ∗ 0x1000) + (r2 ∗ hal size),
where r1 ∈ {0 . . .31} and r2 ∈ {0, 1} are random numbers
within the given ranges. Kernel and HAL are commonly mapped
using so called large pages (2 MB) which improves performance
by reducing the duration of page walks; both components
usually require three large pages (= 6 MB). An interesting
the randomization is already applied to
observation is that
the physical
load addresses of the image and that for the
kernel region, the formula
virtual address = 0x80000000 + physical address
holds. The lower 31 bits of virtual kernel addresses are thus
identical to the physical address. Again, this is only true for
addresses in the kernel region and does not generally apply
to kernel space addresses. For the rest of the paper, note that
we assume that the system is started without the /3GB boot
option that restricts the kernelspace to 1 GB. In this case, the
kernelspace base address would be 0xC0000000 instead.
kernel
subsequent
all
drivers are loaded by the kernel’s driver
load routine
MmLoadSystemImage. This mechanism contains a different
ASLR implementation to randomize the base address of drivers
initialized,
Once
the
is
in the subroutine MiReserveDriverPtes. The process
works as follows: the kernel ﬁrst reserves a memory region of
2 MB using standard 4 KB sized pages (a driver region). It
then randomly chooses one out of 64 page-aligned start slots
in this region where the ﬁrst driver is loaded to. All subsequent
drivers are then appended, until the end of the 2 MB region is
hit, which is when the next driver is mapped to the beginning
of the region (i.e., a wrap-around occurs). In case a region is
full, a new 2MB driver region with a random start slot is
allocated. For session-wide drivers such as win32k.sys, a
similar randomization with 64 slots for each driver image is
applied in a dedicated session driver region. We observed
that the loading order of drivers is always the same in practice.
B. Memory Hierarchy
There is a natural trade-off between the high costs of fast
computer memory and the demand for large (but inexpensive)
memory resources. Hence, modern computer systems are operat-
ing on hierarchical memory that is built from multiple stages of
different size and speed. Contemporary hierarchies range from
a few very fast CPU registers over different levels of cache to a
huge and rather slow main memory. Apparently, with increasing
distance to the CPU the memory gets slower, larger, and cheaper.
We focus on the different caches that are used to speed up
address translation and memory accesses for code and data.
As illustrated in Figure 2, each CPU core typically contains
one dedicated Level 1 (L1) and Level 2 (L2) cache and often
there is an additional Level 3 (L3) shared cache (also called
last level cache (LLC)). On level 1, instructions and data are
cached into distinct facilities (ICACHE and DCACHE), but on
higher stages uniﬁed caches are used. The efﬁciency of cache
usage is justiﬁed by the temporal and spatial locality property of
memory accesses [29]. Hence, not only single bytes are cached,
but always chunks of adjacent memory. The typical size of such
a cache line on x86/x64 is 64 bytes.
One essential question is where to store certain memory
content in the caches and how to locate it quickly on demand.
All described caches operate in an n-way set associative mode.
Here, all available slots are grouped into sets of the size n
and each memory chunk can be stored in all slots of one
particular set. This target set
is determined by a bunch of
cache index bits that are taken from the memory address.
As an example, consider a 32-bit address and a typical L3
cache of 8 MB that is 16-way set associative. It consists of