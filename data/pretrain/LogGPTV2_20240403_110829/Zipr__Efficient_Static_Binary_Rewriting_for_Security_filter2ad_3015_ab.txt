detects these immovable sequences and pins their addresses. For
example, if a return address is used for EH-driven stack unwind-
ing, Zipr must pin that return address, and a call instruction that
writes the address to the stack must be updated to write the pinned
address. We extended this functionality (in Zipr++) by supporting
EH-table rewriting, allowing the tool more flexibility in placement
of functions and the opportunity to generate more optimized code
sequences (Section 2.2).
IR	Database	IR	Manipula0on	IR	Construc0on	Disassembly	CFG	Construc4on	EH	Frame	IR	Construc4on	User-speciﬁed	Transforms	EH	Frame	Manipula4on	IR	Instan0a0on	Binary	Construc4on	Code	Layout	EH	Frame	IR	Instan4a4on	Func4ons	Instruc4ons	Data	EH	Frame	Binary	Modiﬁed	Binary	Session 1: Binary Rewriting and TransformationFEAST'17, November 3, 2017, Dallas, TX, USA10Figure 2: A simplified, high-level example of the exception handling information stored in an ELF binary.
section cannot be binary searched directly because of the variable
length encodings of fields.
Together, these individual tables and landing pads are used to
unwind the stack and invoke the proper destructors. Tables are gen-
erally indexed based on return address but may be indexed by other
program counters in the event of a forced unwinding, for example
from a signal handler or call to pthread_exit(). Additional detail
can be found in other publications [1, 12].
Because we were unable to find an existing, suitable library to
parse the ELF eh_frame sections, we built our own parser for it
that builds an abstract syntax tree style (AST) representation. We
use the AST to populate the initial IR with the aforementioned
information. Since many machine instructions typically share the
same trimmed DWARF program, the IR provides copy-on-write
and automatic de-duplication facilities to shield a transform writer
from the complexities of managing these fields.
2.3 EH Frame IR Manipulation
If a transformation is to be enacted by the binary rewriter, the
unwind and exception information must be updated. For example,
if the stack size is extended for security purposes (say, to store a
canary value), the unwind information must be updated accordingly,
otherwise the stack unwinder is going to give erroneous results if
an exception is thrown, likely resulting in a program crash.
Because we elide the complexities of directly encoding the ELF
tables in our IR, it is quite easy for a transform writer to update the
EH information. For example, if the transform writer wants to put
additional checks when catching an exception, it is easy for them
to find and adjust the landing pad to include new code. If they want
to add a catch all clause to a particular call site, they can simply add
the appropriate entry directly to the call’s action and type table.
Similarly, inserting new instructions can easily support exception
handling and unwinding by copying the EH information from an
adjacent instruction. If the newly inserted instructions modify the
stack (e.g., saves and restores a register), the DWARF program for
unwinding can be easily extended to restore the register.
Perhaps the most complicated case is when a transform decides
to change a function’s frame layout. In this case, the EH information
for every instruction in the program is likely to change. A transform
writer would have to iterate through all the function’s instructions,
and then update the DWARF program for each to reflect how the
stack has changed. Section 3.2 discusses a sample transform that
performs exactly these edits. The EH frame editing took about 250
additional lines of code to implement, much of it very simple code
to iterate the function’s instructions and edit the corresponding
DWARF programs.
Because of their dense, range-based encoding, it is difficult to do
small edits to these tables. For example, relocating a call instruction
to a new area requires that an FDE be split to accommodate the
new memory area, and the call site address in the call site table be
updated. But since the FDE, CS, action, and type table fields are
variable-length encoded and relative to the FDE’s starting address,
it is likely that the new call site table entry will have fields that
are longer or shorter than the previous entry. Changing a field size
requires shifting subsequent fields, which in turn forces updating
more offsets. A cascade of edits can occur, causing the entire table
to change.
Because a rewriter’s goal is to easily make adjustments to a
program, compose transformations, and create an output file that
is still efficient, we eschew an IR that directly deals with all these
complexities. Instead, we flatten the data structures and remove all
the fields used for space efficiency. Instead of using variable length
encodings, we used 32-bit fixed length encodings for most fields.
In particular, for each machine instruction in the program we are
rewriting, we record:
• The exact DWARF program for unwinding the stack (combin-
ing the CIE and FDE portions), stored as an array of DWARF
instructions. Since the CIE and FDE DWARF program is used
for all the machine instructions in the FDE’s range, some
DWARF instructions are unnecessary for unwinding at some
machine instruction. We trim DWARF programs accordingly.
• The instruction in the IR that represents the start of the
personality routine.
• If the instruction is in the call site table, we record the landing
pad, and relevant action and type table information necessary
to invoke the personality routine properly.
.eh_frame_hdr FDE 1 FDE 2 FDE 3 CIE:  Start: &func3 Size:  120 Program:   DP3   DP4   DP5 LSDA:  .eh_frame CIE 1 Personality: Program:   DP1   DP2  .text .gcc_except_table .rodata  cpp_personality:     … LSDA3 CS tab len: 1 CS table[0]:   CS Start:    CS Size: 5   Landing pad:    Action: Action table[0]:   Type:   Next: null Type Table[0]:   Type:  std::type_info  for int  func3:     call string()     …     call func1     …     ret  func3_lp:     call ~string()     …  &func3 FDE:  &func2 FDE:  &func1 FDE:  Session 1: Binary Rewriting and TransformationFEAST'17, November 3, 2017, Dallas, TX, USA112.4 EH Frame IR Instantiation
After the constructed IR has been manipulated to provide the user-
selected enhancements, a new ELF file must be constructed before
we can execute the program. As such, the IR must be mapped back
into the ELF eh_frame format. Since the information contained in
the tables is based on ranges of return addresses, we first layout
the code so that all instructions are assigned to final addresses in
the program.
Next, we construct an eh_frame. To achieve this goal, we first
create an abstract representation of each structure in memory.
We could create a new abstract FDE, CIE and LSDA for each
instruction in the output program, but the size overhead would be
undesirable. Instead, we start with an empty CIE and FDE and create
an LSDA for each FDE. Then we iterate through each instruction in
the program starting at low addresses and working towards high
addresses. At each instruction, we determine if the most recent CIE
and FDE can be extended to cover the instruction. To qualify as
being extendable, the CIE’s DWARF program must match, and the
FDE’s DWARF program must be a prefix of the under-consideration
instruction’s program, and the personality routine must match.
If the structures can be extended, they are. New call site table
entries, action table entries, and type table entries are added to the
FDE’s LSDA as appropriate. If the FDE or CIE structures cannot be
extended, a new abstract FDE or CIE is created and added to the
list.
Once the abstract representation is constructed, we concretize it
by emitting the abstract representation to a file as assembly code and
use the system assembler to create the encoded, compressed binary
representation. We use assembler labels for linking the structures
within the section, and absolute values for any code addresses (that
were previously assigned during code layout). The binary form is
extracted from the assembler’s output file, and added directly to
final ELF file.
This method has the benefit of re-using the same mechanism
the compiler uses for creating the unwind and EH tables, while
allowing the code layout algorithm to be selected by the rewriter.
The downside is that the code layout can dramatically affect the
size of the rewritten EH tables. In Section 3.1, we discuss the impact
of code layout on EH table size.
3 EXPERIMENTAL RESULTS
3.1 Performance and Filesize Evaluation
To measure the effectiveness of our EH-table rewriting, we per-
formed a number of experiments using the SPEC CPU2006 Bench-
mark suite [11]. The experiments were performed on an Intel
2.4GHz E4645 processor (12 cores) with 48Gb of main memory
running Ubuntu 14.04.2 LTS. The binaries were produced using
gcc, g++, gfortran version 4.8.4 with -O2 optimization level (with
the exception of perl and wrf, which require lower optimization
levels for the program to operate correctly before we apply any
rewriting). The benchmark DealII was not included because it does
not build correctly at any optimization level.
We measured the performance (runtime and disk file size) of four
configurations: 1) blocks of code are placed randomly, 2) blocks are
placed to improve locality, 3) random placement with EH frame
rewriting, and 4) optimized placement with EH frame rewriting.
In Figures 3, 4, and 5 performance results are normalized to the
performance of the original binary (i.e., less than 1.0 indicates
speedup/space decrease and greater than 1.0 indicates slowdown/size
increase).
Figure 3 shows the runtime overhead of the four configurations.
The difference between bars 1 and 3 shows that EH-table rewrit-
ing significantly improves performance (improves geometric mean
from 1.15 to 1.07). The improvement from EH-table rewriting comes
from two sources. First, because return addresses are not pinned
(Section 2.1), the rewriter can leverage the hardware’s call instruc-
tion to write the return address instead of having to emit a sequence
of instructions to write the return address into the proper place.
Using the hardware’s call instruction further improves performance
because the hardware’s branch predictor expects calls and returns
to be matched.
Second, because the new EH tables reflect the actual location
of return address targets in the rewritten code, these addresses no
longer need to be pinned giving greater flexibility to placement of
blocks of rewritten code. In the figure, we include bars 1, 2 and 3
to highlight the additional benefits of giving the code placement
algorithm more flexibility. Bars 1 and 2 show the benefit of using a
locality based code placement algorithm—an improvement of the
geometric mean from 1.15 to 1.11. The difference of the last two
bars show the benefit of locality when EH-table rewriting unpins
return addresses — the performance average drops from 1.07 to
1.03, just 3% above the original executable.
As noted in Section 2.4, the rewriting of the binary affects EH-
table size and thus the size of the binary. Figure 4 presents com-
parisons of the file size of the binaries. The first two bars show
the base effect of Zipr on file size. This overhead comes from two
sources: fragmentation due to pinning and the longer calling se-
quence when setting the return address to a pinned value. The last
two bars shows the effect of EH-table rewriting on size. Because
Zipr’s code layout algorithms are agnostic to EH table size con-
siderations, a much larger number of FDEs are created over the
baseline. Our measurements (not shown) indicated that with no
locality optimization there were on average 4.7 times more FDEs
than in the baseline configuration. The random placement results in
more FDEs because an FDE is inherently range based. By splitting
up code blocks covered by one FDE in the original, more FDEs are
required.
With locality optimization, the average number of FDEs dropped
to 3.2 times more FDEs than in the baseline configuration. This
drop is because the locality layout attempts to keep blocks from the
same function together. This inadvertently lowers the FDE count.
While file size is a secondary consideration for some application
areas, it can be important and optimizing FDE creation is an area
of future work. In the future, an FDE-aware layout algorithm can
likely make significant gains in reducing file size.
3.2 Case Study: Stack Layout Transformation
In the previous section we reported measurements of the perfor-
mance of simply rewriting a binary—in essence a null transform. In
the null transform it is not mandatory to modify the EH tables (i.e.,