# 前言
本文是[Kernel Driver mmap Handler
Exploitation](https://labs.mwrinfosecurity.com/assets/BlogFiles/mwri-mmap-exploitation-whitepaper-2017-09-18.pdf)的翻译文章。  
（文章有点长，请善用目录）
# 1\. 内核驱动程序简介
在实施Linux内核驱动程序期间，开发人员会注册一个设备驱动程序文件，该文件通常会在/dev/directory中注册。该文件可能支持普通文件的所有常规功能包括:opening，reading，writing，mmaping，closing等。
设备驱动程序文件支持的操作在`file_operations`结构中描述，其中包含许多函数指针，每个指针操作一个文件。内核4.9的结构定义可以在下面找到：
    struct file_operations {
        struct module *owner;
        loff_t(*llseek) (struct file *, loff_t, int);
        ssize_t(*read) (struct file *, char __user *, size_t, loff_t *);
        ssize_t(*write) (struct file *, const char __user *, size_t, loff_t *);
        ssize_t(*read_iter) (struct kiocb *, struct iov_iter *);
        ssize_t(*write_iter) (struct kiocb *, struct iov_iter *);
        int(*iterate) (struct file *, struct dir_context *);
        int(*iterate_shared) (struct file *, struct dir_context *);
        unsigned int(*poll) (struct file *, struct poll_table_struct *);
        long(*unlocked_ioctl) (struct file *, unsigned int, unsigned long);
        long(*compat_ioctl) (struct file *, unsigned int, unsigned long);
        int(*mmap) (struct file *, struct vm_area_struct *);
        int(*open) (struct inode *, struct file *);
        int(*flush) (struct file *, fl_owner_t id);
        int(*release) (struct inode *, struct file *);
        int(*fsync) (struct file *, loff_t, loff_t, int datasync);
        int(*fasync) (int, struct file *, int);
        int(*lock) (struct file *, int, struct file_lock *);
        ssize_t(*sendpage) (struct file *, struct page *, int, size_t, loff_t *,
        int);
        unsigned long(*get_unmapped_area)(struct file *, unsigned long, unsigned
        long, unsigned long, unsigned long);
        int(*check_flags)(int);
        int(*flock) (struct file *, int, struct file_lock *);
        ssize_t(*splice_write)(struct pipe_inode_info *, struct file *, loff_t *,
        size_t, unsigned int);
        ssize_t(*splice_read)(struct file *, loff_t *, struct pipe_inode_info *,
        size_t, unsigned int);
        int(*setlease)(struct file *, long, struct file_lock **, void **);
        long(*fallocate)(struct file *file, int mode, loff_t offset,loff_t len);
        void(*show_fdinfo)(struct seq_file *m, struct file *f);
    #ifndef CONFIG_MMU
        unsigned(*mmap_capabilities)(struct file *);
    #endif
        ssize_t(*copy_file_range)(struct file *, loff_t, struct file *, loff_t,
        size_t, unsigned int);
        int(*clone_file_range)(struct file *, loff_t, struct file *, loff_t,u64);
        ssize_t(*dedupe_file_range)(struct file *, u64, u64, struct file *, u64);
    };
如上所示，可以实现大量的文件操作，但为了本文的目的，我们将仅关注mmap处理程序的实现。
下面是一个`file_operations`结构和相关函数的设置示例  
（`/fs/proc/softirqs.c`）：
    static int show_softirqs(struct seq_file *p, void *v)
    {
        int i, j;
        seq_puts(p, " ");
        for_each_possible_cpu(i)
            seq_printf(p, "CPU%-8d", i);
        seq_putc(p, '\n');
        for (i = 0; i private_data = kzalloc(size, GFP_KERNEL);
        if (filep->private_data == NULL)
            return -1;
        return 0;
    }
    static int simple_mmap(struct file *filp, struct vm_area_struct *vma)
    {
        printk(KERN_INFO "MWR: Device mmap\n");
        if ( remap_pfn_range( vma, vma->vm_start, virt_to_pfn(filp->private_data),
                vma->vm_end - vma->vm_start, vma->vm_page_prot )
        )
        {
            printk(KERN_INFO "MWR: Device mmap failed\n");
            return -EAGAIN;
        }
        printk(KERN_INFO "MWR: Device mmap OK\n");
        return 0;
    }
在上面列出的驱动程序打开期间，会调用`dev_open`函数，它将简单地分配一个0x10000字节的缓冲区，并在`private_data`字段中存储一个指针。
之后，如果该进程在该文件描述符上调用mmap，则将使用`simple_mmap`函数来处理mmap调用。
该函数将简单地调用`remap_pfn_range`函数，这个函数会在进程地址空间中创建一个新的映射，该映射将`private_data`缓冲区链接到`vma->
vm_start`地址，其大小定义为`vma-> vm_end` \- `vma-> vm_start`。
在这个文件上请求mmap的示例用户空间程序如下：
    int main(int argc, char * const * argv)
    {
        int fd = open("/dev/MWR_DEVICE", O_RDWR);
        if (fd < 0)
        {
            printf("[-] Open failed!\n");
            return -1;
        }
        unsigned long * addr = (unsigned long *)mmap((void*)0x42424000, 0x1000,
    PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0x1000);
        if (addr == MAP_FAILED)
        {
            perror("Failed to mmap: ");
            close(fd);
            return -1;
        }
        printf("mmap OK addr: %lx\n", addr);
        close(fd);
        return 0;
    }
上面的代码在`/dev/MWR_DEVICE`驱动文件上调用mmap，大小等于0x1000，文件偏移设置为0x1000，目标地址设置为'0x42424000'。
成功的映射结果如下：
    # cat /proc/23058/maps
    42424000-42425000 rw-s 00001000 00:06 68639 /dev/MWR_DEVICE
### 2.2 空的mmap处理程序
到目前为止，我们已经看到了mmap操作的最简单实现，但是如果我们的mmap处理函数只是一个空函数，会发生什么呢？
来看下面的实现：
    static struct file_operations fops =
    {
        .open = dev_open,
        .mmap = empty_mmap,
        .release = dev_release,
         labs.mwrinfosecurity.com| © MWR InfoSecurity 5
    };
    static int empty_mmap(struct file *filp, struct vm_area_struct *vma)
    {
        printk(KERN_INFO "MWR: empty_mmap\n");
        return 0;
    }
正如我们所看到的，只有日志功能被调用，以便我们可以观察到处理程序被调用。
当调用`empty_mmap`函数时，假设没有任何事情会发生，mmap将会失败，因为没有调用`remap_pfn_range`函数或类似的东西。
然而，这并不是事实。
让我们来运行我们的用户空间代码并检查发生了什么：
    int fd = open("/dev/MWR_DEVICE", O_RDWR);
    unsigned long size = 0x1000;
    unsigned long * addr = (unsigned long *)mmap((void*)0x42424000, size, PROT_READ |
    PROT_WRITE, MAP_SHARED, fd, 0x1000);
在`dmesg`日志中，可以看到我们的空处理程序已按照我们的预期成功调用：
    [ 1119.393560] MWR: Device has been opened 1 time(s)
    [ 1119.393574] MWR: empty_mmap
查看内存映射会看到一些意外的输出：
    # cat /proc/2386/maps
    42424000-42426000 rw-s 00001000 00:06 22305
我们还没有调用`remap_pfn_range`函数，但映射的创建过程与之前的情况相同。
唯一的区别是这个映射是'无效'的，因为我们没有将任何物理内存映射到该地址范围。但是我们试图在该范围内访问内存，根据所使用的内核，这种mmap的实现会导致进程崩溃或整个内核崩溃。
来尝试使用以下代码访问该范围内的一些内存：
    int fd = open("/dev/MWR_DEVICE", O_RDWR);
    unsigned long size = 0x1000;
    unsigned long * addr = (unsigned long *)mmap((void*)0x42424000, size, PROT_READ |
    PROT_WRITE, MAP_SHARED, fd, 0x1000);
    printf("addr[0]: %x\n", addr[0]);
正如预期的那样，程序崩溃了：
    ./mwr_client
    Bus error
然而，据观察，在某些3.10 arm/arm64 Android内核中，类似的代码导致内核恐慌。
总之，作为一名开发人员，您不应该认为空处理程序会表现出可预测的性能，请始终使用正确的返回代码来处理内核中的给定情况
### 2.3带有vm_operations_struct的mmap处理程序
在mmap操作期间，可以使用`vm_operations_struct`结构为分配的内存区域上的多个其他操作（如处理未映射的内存，处理页面权限更改等）分配处理程序。
内核4.9的`vm_operations_struct`结构（`/include/linux/mm.h`）定义如下:
    struct vm_operations_struct {
        void(*open)(struct vm_area_struct * area);
        void(*close)(struct vm_area_struct * area);
        int(*mremap)(struct vm_area_struct * area);
        int(*fault)(struct vm_area_struct *vma, struct vm_fault *vmf);
        int(*pmd_fault)(struct vm_area_struct *, unsigned long address, pmd_t *,
    unsigned int flags);
        void(*map_pages)(struct fault_env *fe, pgoff_t start_pgoff, pgoff_t
    end_pgoff);
        int(*page_mkwrite)(struct vm_area_struct *vma, struct vm_fault *vmf);
        int(*pfn_mkwrite)(struct vm_area_struct *vma, struct vm_fault *vmf);
        int(*access)(struct vm_area_struct *vma, unsigned long addr, void *buf, int
    len, int write);
        const char *(*name)(struct vm_area_struct *vma);
    #ifdef CONFIG_NUMA
        int(*set_policy)(struct vm_area_struct *vma, struct mempolicy *new);
        struct mempolicy *(*get_policy)(struct vm_area_struct *vma, unsigned long