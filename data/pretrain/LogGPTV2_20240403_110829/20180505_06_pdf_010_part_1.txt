# Overview of Database Migration to PostgreSQL

## Presenters
- **Joe Conway**
  - Open Source: PostgreSQL (and Linux) user since 1999, Community member since 2000, Contributor since 2001, Committer since 2003.
  - Business: Currently President/CEO of credativ USA. Previously IT Director of a large company with wide experience in both closed and open source technologies.
  - Full profile: [LinkedIn](http://www.linkedin.com/in/josepheconway)

- **Michael Meskes**
  - Open Source: Involved in Free Software since 1993, Linux since 1994, Debian GNU/Linux since 1995, and PostgreSQL (mostly ECPG) since 1998.
  - Business: Ph.D. from 1992-1996, Project Manager from 1996-1998, Branch Manager from 1998-2000, and President of credativ Group since 2000.

## Why Migrate to PostgreSQL?
- **Free and Open Source Software**: No license costs.
- **Open Standards**: High-quality software and support.
- **White Box Testing**: Tailor-made standard software.
- **Independence**: Protection of investment.

## Introduction to Migration
- **Choose a Capable Manager**: Ensure the project is well-managed.
- **Create a Solid Planning Basis**: Design top-down, implement bottom-up.
- **Consider All Processes and Data Traffic**: Avoid interim or isolated solutions.
- **Redundancy**: Essential parts must be redundant.
- **Training, Maintenance, and Support**: Plan for these aspects.

## Challenges and Considerations
- **Porting Projects are Hard**: SQL standards and compatibility layers are not a panacea.
- **Success Can Pay Off Big**: However, almost anything is possible; we are looking for reasonable options.
- **Time Constraints**: 3 hours is not enough to cover this topic in depth.

## Best Case Scenario
- **Admins Know PostgreSQL**: Middleware supports PostgreSQL, and standard datatypes and SQL code are used.
- **Effort and ROI**: Only one hour of work, leading to an instant return on investment.

## Cost Analysis
- **Lots of Licenses**:
  - 600 installations, $5,000 per database server.
  - $150,000 up-front migration costs, $2,000 additional rollout costs.
  - 25 rollouts per month.
  - **ROI**: 2 months after the start of the rollout.

- **Lot of Migration Work**:
  - 1800 installations with 2 servers each, $2,000 per installation per year.
  - Migration costs $1,000,000, $1,000 additional rollout costs.
  - 125 rollouts per month.
  - **ROI**: 8 months after the start of the rollout.

## Inventory Your Requirements
- **Features in Use**: Identify which features of the incumbent database are in use by your application.
- **Unique Features**: Determine which features are unique and may need substitution.
- **PostgreSQL Benefits**: Consider what PostgreSQL-specific features would bring great benefits.
- **Upcoming Requirements**: Plan for future needs.

### Detailed Inventory
- **Data Types**: INTEGER, NUMERIC, DOUBLE PRECISION, CHARACTER (CHAR), CHARACTER VARYING (VARCHAR), TEXT, TIMESTAMP WITH[OUT] TIME ZONE, INTERVAL, BYTEA, BOOLEAN, BIT, large object, spatial, geometric, full text, XML, UUID, network address, composite, array, enumerated, others.
- **Database Object Types**: DATABASE, SCHEMA, USER, GROUP, ROLE, TABLE, INDEX, SEQUENCE, VIEW, FOREIGN FUNCTION, AGGREGATE, TRIGGER, RULE, OPERATOR, TYPE, DOMAIN, CAST, COLLATION, CONVERSION, EXTENSION, LANGUAGE, TABLESPACE, TEXT SEARCH.
- **SQL Syntax**: Identifiers, NULL value handling, sub-selects, target list, FROM clause, WHERE clause, correlated and uncorrelated queries, outer joins, WITH clause, WINDOW clause, UPSERT/MERGE.
- **Stored Functions and/or Procedures**: PostgreSQL supports stored functions but not stored procedures. PL/pgSQL is similar to PL/SQL and is available along with other languages like C, SQL, Perl, Python, Tcl, Java, PHP, Ruby, R, Shell, and others.
- **Client Libraries**: Interface available in virtually every programming language. Check syntax and semantics. Use database-agnostic interfaces like Perl DBI, ODBC, .Net, JDBC, ECPG.
- **Encodings**: Too many to list, but pay attention to server vs. client-only encodings, compatible conversions, and locale settings.
- **Replication and/or High Availability**: Covered separately later in the presentation.
- **Extensions**: Check equivalent PostgreSQL extension availability, leverage existing extensions, and write your own if necessary.

## Database Conversion
- **General Thoughts**: Practice, plan the final conversion well in advance, convert, check, and go live.
- **Practice**: Script your conversion, document the steps, automate data processing and checking, identify success criteria, and execute the script until it is consistently flawless.
- **Convert**: Possible methodologies include hard cutover (requires downtime but provides the cleanest result) and continuous cutover (uses external replication or manual sync, minimal downtime but tricky to do).

---

**Presented by Joe Conway and Michael Meskes at PostgresOpen 2011.**

For more information, visit the [PostgreSQL documentation](http://www.postgresql.org/docs/9.0/interactive/) and [PostGIS documentation](http://www.postgis.org/documentation/manual-1.5/).