is well known that the signals experience frequency diversity where
the amplitude and the phase of the channel measurements vary sig-
niﬁcantly with the Wi-Fi OFDM subcarriers. Similarly, multipath
issues result in similar variations across antennas. Thus, one would
expect that some of the Wi-Fi subcarriers and antennas experience
a stronger effect due to the reﬂections from the Wi-Fi Backscat-
ter tag. To empirically check this effect, Fig. 4 plots the probabil-
ity density functions (PDF) of the normalized channel values for
each adjacent pair of the 60 Wi-Fi subcarriers (resulting in 30 “sub-
channels”) available from the Intel card. The PDF is computed over
channel measurements taken across 42,000 Wi-Fi packets. Fig. 4
shows three main points: First, for about 30 percent of the Wi-Fi
sub-channels, we see two Gaussian signals centered at +1 and -1;
these represent the two-reﬂection states at the tag. Secondly, the
variance in the channel measurements, i.e., noise, changes signiﬁ-
cantly with the sub-channel being used. Finally, some of the sub-
channels do not see two distinct Gaussian signals. This corresponds
to frequencies where the effect of backscatter is very weak, due to
609l
e
n
n
a
h
C
-
b
u
S
i
F
-
i
W
 30
 25
 20
 15
 10
 5
 0
 0
 10
 20
 30
 40
 50
 60
 70
Distance between Wi-fi reader and prototype (in cm)
Figure 5—Wi-Fi sub-channels with BER < 10−2 at various dis-
tances. For each Wi-Fi sub-channel, the ﬁgure shows the experi-
ments where decoding using only that sub-channel achieves a bit
error rate less than 10−2. The plot shows that the set of good sub-
channels varies signiﬁcantly with the position (and therefore multi-
path proﬁle) of the Wi-Fi Backscatter tag.
multipath effects. Thus, we observe signiﬁcant frequency diversity
within the 30 Wi-Fi sub-channels even when the Wi-Fi Backscatter
tag is placed next to the Wi-Fi reader.
We exploit this frequency diversity to increase the reliability of
Wi-Fi Backscatter’s uplink communication. Speciﬁcally, the Wi-Fi
reader performs the following two steps:
Step 1: Identify the good Wi-Fi sub-channels/antennas. Ideally, if
the combination of a set of Wi-Fi sub-channels and antennas that
have a strong signal from the Wi-Fi Backscatter tag is consistent
across locations, then we could decode the information from the
tag using only that combination. The challenge however is that the
set of “good” sub-channels and antennas varies signiﬁcantly with
the position of the tag. To empirically see this, we place the Wi-Fi
Backscatter tag at different distances from the Wi-Fi reader and
measure the channel information on all the Wi-Fi sub-channels.
Fig. 5 shows the sub-channels where the Wi-Fi reader could de-
code the modulated information with a BER of less than 10−2 at a
given distance. The ﬁgure shows that, in general, there are no Wi-
Fi sub-channels that are consistently good. Thus, the Wi-Fi reader
should independently extract the good sub-channel information for
each uplink transmission.
To do this, the Wi-Fi reader uses correlation with a known pream-
ble from the tag; the preamble is used by the tag at the beginning
of each of its message transmission. Speciﬁcally, the Wi-Fi reader
correlates with the preamble along every sub-channel (treating mul-
tiple antennas as additional sub-channels), while waiting for an
incoming transmission from the tag. When a transmission arrives
(which is identiﬁed by a peak in the correlation), the Wi-Fi reader
sorts the sub-channels based on the correlation value. In particu-
lar, the sub-channels that correlate well with the preamble have a
better signal from the Wi-Fi Backscatter tag than those that corre-
late poorly. The Wi-Fi reader picks the top ten “good” sub-channels
based on this correlation method.
Step 2: Combining information across the good Wi-Fi sub-
channels. A naive approach to do this is to simply add up the in-
formation across all the sub-channels. This is, however, not op-
timal because the noise variance may vary even across the good
sub-channels. Instead the Wi-Fi reader combines the information
across the sub-channels by computing a weighted average where
sub-channels with low noise variance are given a higher weight,
while those with higher noise variance are given a lower weight.
More formally, say CSIi is the normalized CSI computed on the
ith good Wi-Fi sub-channel. The Wi-Fi reader performs a linear
combination of the normalized CSI across these sub-channels by
weighting them with the noise variance. Speciﬁcally, the reader
computes the following summation:
CSIweighted =
G
X
i=1
CSIi
σ2
i
2
i
where G is the total number of good sub-channels, and σ
is the
noise variance in the ith sub-channel. Effectively, the above equa-
tion gives a larger weight to Wi-Fi sub-channels where the noise
variance is low (and hence a higher conﬁdence). The above compu-
tation is similar to maximum ratio combining techniques [7] used in
traditional communication that are known to be optimal for Gaus-
sian noise. In scenarios where the Wi-Fi reader has multiple anten-
nas, the above computation can be performed for each antenna and
the summation can be taken across all the antennas.
(3) Decoding bits from the Wi-Fi Backscatter tag. To do this,
the Wi-Fi reader can use a simple thresholding mechanism on
CSIweighted. Speciﬁcally, if CSIweighted is greater than zero, the re-
ceiver outputs a ‘1’ and a ‘0’ otherwise. We note the following:
• The CSI information provided by the off-the-shelf Wi-Fi devices
is inherently noisy. To account for these noisy measurements, we
add redundancy to our transmissions. Speciﬁcally, each bit trans-
mitted by the tag corresponds to multiple channel measurements
(i.e., received Wi-Fi packets) at the receiver. The Wi-Fi reader
repeats the above procedure for all these channel measurements
and uses a simple majority vote to compute the transmitted bits.
• Since the Wi-Fi medium is shared and bursty in nature, it is un-
likely that every bit transmitted by the tag sees the same number
of Wi-Fi packets (and the corresponding channel measurements).
To account for this, we use the timestamp that is in every Wi-Fi
packet header to accurately group Wi-Fi packets belonging to the
same bit transmission. We then perform majority voting over the
corresponding channel measurements.
• Finally, the Intel cards used in our experiments report spurious
changes in the CSI once every so often. We see this behavior
even in a static network with no mobility. To account for this spu-
rious behavior, we use a hysteresis mechanism. Speciﬁcally, we
use two thresholds, Thresh0 and Thresh1, corresponding to the 0
and 1 bits. The receiver outputs a one (zero) bit only when the re-
ceived channel value is greater (smaller) than Thresh1 (Thresh0).
2, where µ and σ are the
We set the threshold values to be µ ± σ
mean and standard deviation of CSIweighted computed across pack-
ets. The above heuristic works effectively in our experiments.
3.3 Decoding Using RSSI
While the 802.11n Wi-Fi speciﬁcation requires per-subchannel
channel state information to be made available on newer Wi-Fi
chipsets, most existing chipsets only provide the RSSI informa-
tion [5]. RSSI is a single metric that provides a measure of the cu-
mulative Wi-Fi signal strength across all the sub-channels. In this
section, we describe how the Wi-Fi reader can decode the reﬂected
information from the Wi-Fi Backscatter tag using only RSSI.
To do this, we employ a decoding algorithm similar to that de-
scribed earlier. Speciﬁcally, we perform signal conditioning, hys-
teresis, and thresholding to decode the information exactly as in the
algorithm from §3.2. We note that depending on the Wi-Fi chipset,
the RSSI information available is either a single value per packet or
an RSSI value per antenna in the case of MIMO receivers. In sce-
narios with multiple RSSI channels (e.g., multiple antennas), we
select the best RSSI channel using the maximum correlation mech-
anism. In particular, the receiver correlates with the packet pream-
ble and picks the RSSI channel that has the maximum correlation
value. Finally, we note that since RSSI is a single value that repre-
610e
d
u
t
i
l
p
m
a
I
S
C
 16.5
 16
 15.5
 15
 14.5
 14
 13.5
 13
 0
 500
 1000
 1500
 2000
 2500
 3000
Packet Number
Figure 6—Raw CSI measurements for a single Wi-Fi sub-
channel in the presence of the Wi-Fi Backscatter tag one meter
away. The ﬁgure shows that at larger ranges, there are no longer
two distinct levels in the CSI measurements. Thus, we need to de-
sign a different decoding mechanism to achieve higher ranges.
sents all Wi-Fi sub-channels and the RSSI bit resolution is limited,
the BER performance is better with CSI information than RSSI.
3.4 Increasing Uplink Communication Range
The algorithm described so far assumes that the reﬂections from
the Wi-Fi Backscatter tag create a distinctive difference in the chan-
nel values between a one and a zero bit. While such an algorithm
is effective at small distances from the Wi-Fi reader (in our experi-
ments up to 65 centimeters), it breaks down at larger distances. To
see this, consider the channel measurements in Fig. 6, at a distance
of two meters between the Wi-Fi Backscatter tag and the Wi-Fi
reader. The ﬁgure shows that there are no two distinct levels in the
channel measurements, which is in contrast to Fig. 3.
Wi-Fi Backscatter uses coding to increase its uplink communi-
cate range. Speciﬁcally, the tag transmits two orthogonal codes of
length L each, to represent the one and the zero bits. The Wi-Fi
reader correlates the channel measurements with the two codes and
outputs the bit corresponding to the larger correlation value.
• Wi-Fi Backscatter repeats the above correlation operation on all
the frequency sub-channels and picks the Wi-Fi sub-channels
that provide the maximum correlation peaks.
• The communication range of the system can be increased by in-
creasing the code length, L. This is because correlation with a
L bit long code provides an increase in the SNR that is propor-
tional to L. Our evaluation shows that with a correlation length of
20 bits, the communication range can be increased to 1.6 meters.
The uplink communication range can be further increased to 2.1
meters by increasing the correlation length to 150 bits..
• Since the tag still only transmits bits (now the bit duration ex-
panded by L) and does not perform any decoding operations,
the power consumption of the tag does not increase. The Wi-
Fi reader on the other hand is a powered device and can perform
the above correlation operations.
4. WI-FI BACKSCATTER DOWNLINK
Next, we describe how Wi-Fi Backscatter enables communica-
tion on the downlink from the Wi-Fi reader to a Wi-Fi Backscat-
ter tag. The challenge in achieving this is that, on one hand, the
reader can only transmit Wi-Fi packets; on the other hand, a Wi-
Fi Backscatter tag cannot decode Wi-Fi transmissions. Instead, we
design a novel circuit for the tag that can detect the energy during
a Wi-Fi packet from a nearby transmitter. We then have the Wi-Fi
reader encode information in the presence and absence of Wi-Fi
packets. In the rest of this section, we describe the encoding mech-
anism at the Wi-Fi reader and the receiver design at the tag.
Figure 7—Encoding information on the downlink. the reader en-
codes a ‘1’ bit with presence of a Wi-Fi packet and a ‘0’ bit with
silence (i.e., the absence of Wi-Fi packets). The duration of the si-
lence period is set to be equal to that of the Wi-Fi packet. To enforce
other Wi-Fi devices in the vicinity to not transmit during the silence
periods, the Wi-Fi reader transmits a CTS_to_SELF packet before
transmitting the message. The message consists of both the pream-
ble bits and the payload bits (including the CRC).
4.1 Encoding at the Wi-Fi reader
The Wi-Fi reader encodes information using the presence or ab-
sence of a Wi-Fi packet. Speciﬁcally, as shown in Fig. 7, the reader
encodes a ‘1’ bit with presence of a Wi-Fi packet and a ‘0’ bit with
silence (i.e., the absence of Wi-Fi packets). The duration of the si-
lence period is set to be equal to that of the Wi-Fi packet. To force
other Wi-Fi devices in the vicinity to not transmit during the silence
periods, the Wi-Fi reader transmits a CTS_to_SELF packet [10] be-
fore transmitting the encoded bits. CTS_to_SELF is a Wi-Fi mes-
sage that forces 802.11-compliant devices to refrain for a speciﬁed
time period. Wi-Fi Backscatter leverages this message to reserve
the medium for the duration of its transmission to ensure that other
Wi-Fi devices, unaware of the Wi-Fi Backscatter protocol, do not
sense the medium as idle and transmit during the silence periods.
We note the following key points:
• The current 802.11 standard only allows Wi-Fi devices to reserve
the channel for up to a duration of 32 ms using the CTS_to_SELF
packet. Thus, to maximize the number of bits transmitted within
this duration, the Wi-Fi reader reduces the size of each Wi-Fi
packet and the corresponding silence period. The smallest packet
size possible on a Wi-Fi device is about 40 µs at a bit rate of
54 Mbps. Our receiver design in §4.2 can reliably detect Wi-Fi
packets as small as 50 µs to a distance of more than two meters.
Thus, the Wi-Fi reader can transmit a 64-bit payload message
with a 16-bit preamble in 4.0 ms. We can transmit more bits by
splitting them across multiple CTS_to_SELF packets.
• Since we assume a query-response model in this paper, if the Wi-
Fi Backscatter tag does not respond to the Wi-Fi reader’s query,
the reader re-transmits its packet until it gets a response. More
generally, the Wi-Fi Backscatter tag could also transmit ACK
packets back to the Wi-Fi reader using the uplink communication
in §3. The Wi-Fi Backscatter tag can reduce the overhead of the
ACK packet by dropping the preamble and the address ﬁelds, and
transmitting a single bit message.
• One may be worried that since Wi-Fi Backscatter’s downlink
messages occupy a considerable amount of time, they could af-
fect the efﬁciency of Wi-Fi networks. While this certainly is
a factor to be considered, there is growing evidence that Wi-
Fi networks in typical home and ofﬁce scenarios are under-
utilized [24]. Thus, we believe that the spare Wi-Fi bandwidth
can be used to communicate with Wi-Fi Backscatter devices.
4.2 Wi-Fi Backscatter tag receiver design
The goal of our receiver is to differentiate between the presence
and absence of a Wi-Fi packet and decode the bits transmitted by
the Wi-Fi reader. At a high level, we design a low-power Wi-Fi en-
ergy detection circuit that leverages the RF harvesting capabilities
of our device. Traditional energy detection approaches compute the
611average energy in the received signal and use a highly sensitive re-
ceiver to detect the presence of energy on the wireless medium. This
approach however is not suitable in our scenario since the receiver
is low power in nature and hence has a very low sensitivity. Further,
Wi-Fi transmissions are modulated using OFDM, which is known
to have a high peak to average ratio [20]. Said differently, the av-
erage energy in the Wi-Fi signal is small, with occasional peaks
spread out during the transmission.
Thus, the Wi-Fi Backscatter tag leverages a specially designed
RF energy detector based on peak detection to decode information
from the Wi-Fi Backscatter reader. As shown in Fig. 8, our receiver
circuit has four main components: an envelope detector, a peak
ﬁnder, a set-threshold circuit and a comparator. The role of the en-
velope detector circuit is to remove the carrier frequency (2.4 GHz)
of the Wi-Fi transmissions. This is a standard circuit design similar
to that used in RFID systems. We however tune the circuit elements
to be optimal over the whole 2.4 GHz Wi-Fi frequency ranges.
The peak detector circuit captures and holds the peak amplitude
of the received signal. It uses a diode, an operational ampliﬁer, and
a capacitor that can store the peak amplitudes as its charge. In order
to adapt to time-varying channel conditions, it however does not
hold this peak value indeﬁnitely; the resistor network that is part of
the set-threshold circuit allows the charge on the capacitor to slowly
dissipate, effectively “resetting” the peak detector over some rela-
tively long time interval. The output of this peak-detection circuit is
halved to produce the actual threshold; this is performed by the ca-
pacitor element in the set-threshold circuit. Finally, the comparator
takes two inputs: the threshold value and the received signal, and
outputs a one bit whenever the received signal is greater than the
threshold value and a zero bit otherwise.
We note that the receiver circuit described above can detect pack-
ets as small as 50 µs. Thus, it can differentiate Wi-Fi packet lengths
up to that resolution. Speciﬁcally, since longer packets can be in-
tuitively thought of as multiple small packets sent back-to-back
without any gap, the Wi-Fi Backscatter tag outputs a continuous
sequence of ones corresponding to each long packet. By counting
the number of ones, Wi-Fi Backscatter can resolve the length of a
Wi-Fi packet to a resolution of 50µs.
Further, the above circuit requires only a very small amount of
power to operate (around 1 µW), and can therefore be left ON at
all times. However, the microcontroller requires a relatively large
amount of power (several hundred µW) in its active mode. To re-
duce overall power consumption, the Wi-Fi Backscatter tag keeps
the microcontroller in a sleep state as much as possible by operating
under two main modes:
• Preamble detection mode. The receiver spends most of its time
in this mode detecting preambles at the beginning of potential
reader transmissions. To reduce the power consumption of doing
this, we leverage that there is no information in between the tran-