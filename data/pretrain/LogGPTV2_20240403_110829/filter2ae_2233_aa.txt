注：本篇文章是翻译文章，主要内容是讲解 SpiderMonkey
中的数据结构。链接：
## 前言
在开始之前，我想说很多内容来自[参考文献](https://vigneshsrao.github.io/play-with-spidermonkey/#references "参考文献")，这篇文章或多或少是关于我摆弄那里提到的内容。
## 构建 SpiderMonkey
要调试 SpiderMonkey，您可能需要先构建一个js shell。 JS shell 基本上是一个 js 解释器。
可以在[此处](https://wiki.mozilla.org/JavaScript:New_to_SpiderMonkey#Get_the_code
"此处")找到构建说明。 我将其包括在内以供参考。
    hg clone http://hg.mozilla.org/mozilla-central spidermonkey
    cp configure.in configure && autoconf2.13
    mkdir build_DBG.OBJ
    cd build_DBG.OBJ
    ../configure --disable-debug --disable-optimize #
    make ## or make -j8
    cd dist/bin/
    ./js
PS：我第一次在 [brucechen](https://twitter.com/bruce30262
"brucechen")的[文章](https://bruce30262.github.io/Learning-browser-exploitation-via-33C3-CTF-feuerfuchs-challenge/ "文章")中看到了这个。  
注意：我正在禁用调试选项，因为这将添加许多断点，将破坏我们的漏洞，一旦我们到达那个部分，但如果你只是在尝试调试 SpiderMonkey，那么你应该启用它。
## Representing Values
本节的大部分内容都基于[这篇 phrack 文章](http://www.phrack.org/issues/69/14.html "这篇 phrack
文章")。 作者非常清楚地解释了一切，绝对值得一读。
### JSValue
在JavaScript中，我们可以为变量赋值而不实际定义它们的“类型”。所以，我们可以这样做 a = "this is a string" or
a=1234" ，而不需要像 C 语言中一样指明 int a ， char a。那么 JS 如何跟踪变量的数据类型呢？  
这里，所有“类型”的数据都表示为 JS:Value 的对象。JS:Value/jsval 通过在一个单元中编码“type”和“value”来标示各种类型。  
在 jsval 中，前17位用于表示 jsval 类型的标记。低 47 位用于实际值。  
让我们看一个例子。 运行js shell并创建一个create数组来保存不同类型的值。
    js>  a=[0x11223344, "STRING", 0x44332211, true]
    [287454020, "STRING", 1144201745, true]
所以我们的数组就像 - [int，string，int，Boolean]。 现在让我们将附加gdb调试，并查看它们在内存中的形式。
    gdb -p $(pidof js)
    gdb-peda$ find 0x11223344 # Searching for the array - all elements will lie consecutively
    Searching for '0x11223344' in: None ranges
    Found 1 results, display max 1 items:
    mapped : 0x7f8e531980d0 --> 0xfff8800011223344
    gdb-peda$ x/4xg 0x7f8e531980d0
    0x7f8e531980d0: 0xfff8800011223344  0xfffb7f8e531ae6a0
    0x7f8e531980e0: 0xfff8800044332211  0xfff9000000000001
所以 int 0x11223344 存储为 0xfff8800011223344 。 以下是 js / public / Value.h 中的相关代码。
    enum JSValueType : uint8_t
    {
        JSVAL_TYPE_DOUBLE              = 0x00,
        JSVAL_TYPE_INT32               = 0x01,
        JSVAL_TYPE_BOOLEAN             = 0x02,
        JSVAL_TYPE_UNDEFINED           = 0x03,
        JSVAL_TYPE_NULL                = 0x04,
        JSVAL_TYPE_MAGIC               = 0x05,
        JSVAL_TYPE_STRING              = 0x06,
        JSVAL_TYPE_SYMBOL              = 0x07,
        JSVAL_TYPE_PRIVATE_GCTHING     = 0x08,
        JSVAL_TYPE_OBJECT              = 0x0c,
        /* These never appear in a jsval; they are only provided as an out-of-band value. */
        JSVAL_TYPE_UNKNOWN             = 0x20,
        JSVAL_TYPE_MISSING             = 0x21
    };
    ----    
    JS_ENUM_HEADER(JSValueTag, uint32_t)
    {
        JSVAL_TAG_MAX_DOUBLE           = 0x1FFF0,
        JSVAL_TAG_INT32                = JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_INT32,
        JSVAL_TAG_UNDEFINED            = JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_UNDEFINED,
        JSVAL_TAG_NULL                 = JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_NULL,
        JSVAL_TAG_BOOLEAN              = JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_BOOLEAN,
        JSVAL_TAG_MAGIC                = JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_MAGIC,
        JSVAL_TAG_STRING               = JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_STRING,
        JSVAL_TAG_SYMBOL               = JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_SYMBOL,
        JSVAL_TAG_PRIVATE_GCTHING      = JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_PRIVATE_GCTHING,
        JSVAL_TAG_OBJECT               = JSVAL_TAG_MAX_DOUBLE | JSVAL_TYPE_OBJECT
    } JS_ENUM_FOOTER(JSValueTag);
    ----    
    enum JSValueShiftedTag : uint64_t
    {
        JSVAL_SHIFTED_TAG_MAX_DOUBLE      = ((((uint64_t)JSVAL_TAG_MAX_DOUBLE)      proto_; // set by constructor
      /* Realm shared by objects in this group. */
      JS::Realm* realm_;; // set by constructor
      /* Flags for this group. */
      ObjectGroupFlags flags_; // set by constructor
      // If non-null, holds additional information about this object, whose
      // format is indicated by the object's addendum kind.
      void* addendum_ = nullptr;
      Property** propertySet = nullptr;
注释或多或少地解释了每个字段的使用，但是让我进入 clasp 成员，因为它提供了有趣的利用目标。
与注释说的一样，这定义了属于该组的所有对象共享的 JSClass，可用于标识该组。 我们来看看Class 结构。
    struct MOZ_STATIC_CLASS Class
    {
        JS_CLASS_MEMBERS(js::ClassOps, FreeOp);
        const ClassSpec* spec;
        const ClassExtension* ext;
        const ObjectOps* oOps;
        :
        :
    }
除了 ClassOps 之外，我对其他所有属性都不太了解，但是我会在这里更新它。 ClassOps
基本上是一个指向结构的指针，该结构包含许多函数指针，这些函数指针定义对象的特定操作是如何发生的。 我们来看看这个 ClassOps 结构。
    struct MOZ_STATIC_CLASS ClassOps
    {
        /* Function pointer members (may be null). */
        JSAddPropertyOp     addProperty;
        JSDeletePropertyOp  delProperty;
        JSEnumerateOp       enumerate;
        JSNewEnumerateOp    newEnumerate;
        JSResolveOp         resolve;
        JSMayResolveOp      mayResolve;
        FinalizeOp          finalize;
        JSNative            call;
        JSHasInstanceOp     hasInstance;
        JSNative            construct;
        JSTraceOp           trace;
    };
例如，addProperty 字段中的函数指针定义了在调用新属性时要调用的函数。
在[这篇文章](https://doar-e.github.io/blog/2018/11/19/introduction-to-spidermonkey-exploitation/ "这篇文章")中，很好地解释了这一切，特别是对于那些从 SpiderMonkey 开发的人而言，这是一篇非常好的文章。
回到这一点，这里有一个函数指针数组。 如果我们设法覆盖它们中的任何一个，就可以将任意写入转换为任意代码执行。
但这不是那么容易。 问题是这个包含函数指针的区域是一个 r-x 区域（没有写权限）。 但是，只要我们有任意写入，我们就可以轻松伪造整个 ClassOps
结构，并用指向伪结构的指针覆盖指向组字段中实际 ClassOps 的指针。
因此，只要我们有任意写入，我们就有了获取代码执行的方法。
### shape_ and slots_
那么 js 如何跟踪对象的属性呢？ 请考虑以下代码段。
    obj = {}
    obj.blahblah = 0x55667788
    obj.strtest = "TESTSTRING"
obj是一个数组，但它也有一些属性。 现在我们必须跟踪属性名称及其值。 为此，它使用对象的shape_ 和 slots_ 字段。 slots_
字段是包含与每个属性关联的值的字段。 它基本上是一个只包含值（无名称）的数组。 shape_ 包含属性的名称以及 slots_ array
的索引，其中将显示此属性的值。  
也许以下图片比我解释的更直观:)
好了，接下来让我们看看gdb调试下的内存情况。
    gdb-peda$ x/4xg 0x7f7f01b90120
    0x7f7f01b90120: 0x00007f7f01b8a310  0x00007f7f01bb18d0 ----> shape_
    0x7f7f01b90130: 0x00007f7f01844ec0  0x000000000174a490