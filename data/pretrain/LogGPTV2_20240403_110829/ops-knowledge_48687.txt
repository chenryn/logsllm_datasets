User: In a reputable book about Python network programming (not mentioning the title to not make the question thought as an advertisement for the book), explaining TCP, the author wrote:

Instead of using sequential integers (1, 2, 3...) to sequence packets, TCP uses a counter that
  counts the number of bytes transmitted. A 1,024-byte packet with a sequence number of 7,200,
  for example, would be followed by a packet with a sequence number of 8,224. This means that
  a busy network stack does not have to remember how it broke up a data stream into packets.
  If asked for a retransmission, it can break up the stream into new packets some other way
  (which might let it fit more data into a packet if more bytes are now waiting for transmission),
  and the receiver can still put the packets back together.

How does that numbering pattern (counting the bytes in the packet rather than adding 1 to every sequence packet) make it easier for the sender to retransmit a packet?
Assistant: It makes it easier because in essence each byte is numbered this way, letting you generate new sequence ids without having to worry about what higher sequence ids have already been used.
Lets say that transmission of the first 8,224 bytes succeeded, but the next 2 packets need to be resent. Moreover, those last 2 packets are not of optimal size, they are perhaps 2048 bytes long and 1024 bytes is a better packet size (perhaps a route was switched, or some other reason).
If the packets were numbered sequentially, you cannot break up those two packets as later packets already received already use the next numbers in the series. These two packets might be numbered 10 and 11, and you break them up and use 12 and 13 as well, because those numbers are already taken in this series of packets.
But if you used 8224 and 10272 instead, now you can break up the packets and send sequence numbers 8224, 9248, 10272 and 11296 without breaking the order of the whole sequence.