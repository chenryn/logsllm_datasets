# Kernel Pwn 学习之路(二)
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x01 前言
由于关于Kernel安全的文章实在过于繁杂，本文有部分内容大篇幅或全文引用了参考文献，若出现此情况的，将在相关内容的开头予以说明，部分引用参考文献的将在文件结尾的参考链接中注明。
Kernel的相关知识以及栈溢出在Kernel中的利用已经在Kernel Pwn
学习之路(一)给予了说明，本文主要介绍了Kernel中更多的利用思路以及更多的实例。
【传送门】：[Kernel Pwn 学习之路(一)](https://www.anquanke.com/post/id/201043)
## 0x02 关于x64下内核gdb连接失败的解决方案
我们在用GDB调试x64内核时可能会回显`Remote 'g' packet reply is too long:`的错误，形如：
那么在网上查到的大多数解决方案都是使用源码重编译安装`GDB`，然后修改`remote.c`，将其从
    if (buf_len > 2 * rsa->sizeof_g_packet)
        error (_("Remote 'g' packet reply is too long: %s"), rs->buf);
修改为：
    if (buf_len > 2 * rsa->sizeof_g_packet) {
    //error (_("Remote 'g' packet reply is too long: %s"), rs->buf);
        rsa->sizeof_g_packet = buf_len ;
        for (i = 0; i regs->pnum == -1)
                continue;
            if (rsa->regs->offset >= rsa->sizeof_g_packet)
                rsa->regs->in_g_packet = 0;
            else
                rsa->regs->in_g_packet = 1;
        } 
    }
但事实上我们只需要在连接前使用GDB命令设置架构即可成功连接：
    set architecture i386:x86-64:intel
## 0x03 关于4.15.*以上内核中kallsyms的新保护
首先，我们知道在`/proc/kallsyms`函数中将存放了大量关键的函数的真实地址，这无疑是十分危险的，而低版本内核也提供了一些保护措施如`kptr_restrict`保护，但是在4.15.*以上内核中，内核新增了一个保护机制，我们首先来跟进`/source/kernel/kallsyms.c`：
    /*
     * We show kallsyms information even to normal users if we've enabled
     * kernel profiling and are explicitly not paranoid (so kptr_restrict
     * is clear, and sysctl_perf_event_paranoid isn't set).
     *
     * Otherwise, require CAP_SYSLOG (assuming kptr_restrict isn't set to
     * block even that).
     */
    int kallsyms_show_value(void)
    {
        switch (kptr_restrict) {
        case 0:
            if (kallsyms_for_perf())
                return 1;
        /* fallthrough */
        case 1:
            if (has_capability_noaudit(current, CAP_SYSLOG))
                return 1;
        /* fallthrough */
        default:
            return 0;
        }
    }
可以发现，在4.15.*以上内核中，`kptr_restrict`只有`0`和`1`两种取值，此处我们不对`kptr_restrict=1`的情况分析，继续跟进`kallsyms_for_perf()`:
    static inline int kallsyms_for_perf(void)
    {
    #ifdef CONFIG_PERF_EVENTS
        extern int sysctl_perf_event_paranoid;
        if (sysctl_perf_event_paranoid count should
     *        protect the rest.
     *        allocated_ptys_lock handles the list of free pty numbers
     */
    static int ptmx_open(struct inode *inode, struct file *filp)
    {
        struct pts_fs_info *fsi;
        struct tty_struct *tty;
        struct dentry *dentry;
        int retval;
        int index;
        nonseekable_open(inode, filp);
        /* We refuse fsnotify events on ptmx, since it's a shared resource */
        filp->f_mode |= FMODE_NONOTIFY;
        retval = tty_alloc_file(filp);
        if (retval)
            return retval;
        fsi = devpts_acquire(filp);
        if (IS_ERR(fsi)) {
            retval = PTR_ERR(fsi);
            goto out_free_file;
        }
        /* find a device that is not in use. */
        mutex_lock(&devpts_mutex);
        index = devpts_new_index(fsi);
        mutex_unlock(&devpts_mutex);
        retval = index;
        if (index flags); /* LOCK THE SLAVE */
        tty->driver_data = fsi;
        tty_add_file(tty, filp);
        dentry = devpts_pty_new(fsi, index, tty->link);
        if (IS_ERR(dentry)) {
            retval = PTR_ERR(dentry);
            goto err_release;
        }
        tty->link->driver_data = dentry;
        retval = ptm_driver->ops->open(tty, filp);
        if (retval)
            goto err_release;
        tty_debug_hangup(tty, "opening (count=%d)n", tty->count);
        tty_unlock(tty);
        return 0;
    err_release:
        tty_unlock(tty);
        // This will also put-ref the fsi
        tty_release(inode, filp);
        return retval;
    out:
        devpts_kill_index(fsi, index);
    out_put_fsi:
        devpts_release(fsi);
    out_free_file:
        tty_free_file(filp);
        return retval;
    }
可以看到，tty结构体的申请在`Line 47`，通过`tty_init_dev(ptm_driver,
index);`来实现的，那么经过交叉引用的查看可以发现这个函数在`/source/drivers/tty/tty_io.c#L1292`中实现：
    struct tty_struct *tty_init_dev(struct tty_driver *driver, int idx)
    {
        struct tty_struct *tty;
        int retval;
        /*
         * First time open is complex, especially for PTY devices.
         * This code guarantees that either everything succeeds and the
         * TTY is ready for operation, or else the table slots are vacated
         * and the allocated memory released.  (Except that the termios
         * may be retained.)
         */
        if (!try_module_get(driver->owner))
            return ERR_PTR(-ENODEV);
        tty = alloc_tty_struct(driver, idx);
        if (!tty) {
            retval = -ENOMEM;
            goto err_module_put;
        }
        tty_lock(tty);
        retval = tty_driver_install_tty(driver, tty);
        if (retval port)
            tty->port = driver->ports[idx];
        WARN_RATELIMIT(!tty->port,
                "%s: %s driver does not set tty->port. This will crash the kernel later. Fix the driver!n",
                __func__, tty->driver->name);
        retval = tty_ldisc_lock(tty, 5 * HZ);
        if (retval)
            goto err_release_lock;
        tty->port->itty = tty;
        /*
         * Structures all installed ... call the ldisc open routines.
         * If we fail here just call release_tty to clean up.  No need
         * to decrement the use counts, as release_tty doesn't care.
         */
        retval = tty_ldisc_setup(tty, tty->link);
        if (retval)
            goto err_release_tty;
        tty_ldisc_unlock(tty);
        /* Return the tty locked so that it cannot vanish under the caller */
        return tty;
    err_free_tty:
        tty_unlock(tty);
        free_tty_struct(tty);
    err_module_put:
        module_put(driver->owner);
        return ERR_PTR(retval);
        /* call the tty release_tty routine to clean out this slot */
    err_release_tty:
        tty_ldisc_unlock(tty);
        tty_info_ratelimited(tty, "ldisc open failed (%d), clearing slot %dn",
                     retval, idx);
    err_release_lock:
        tty_unlock(tty);
        release_tty(tty, idx);
        return ERR_PTR(retval);
    }
继续分析可以发现程序在`Line 17`通过`alloc_tty_struct(driver,
idx);`来分配一个`tty_struct`结构体，经过交叉引用的查看可以发现这个函数在`/source/drivers/tty/tty_io.c#L2800`中实现：
    struct tty_struct *alloc_tty_struct(struct tty_driver *driver, int idx)
    {
        struct tty_struct *tty;
        tty = kzalloc(sizeof(*tty), GFP_KERNEL);
        if (!tty)
            return NULL;
        kref_init(&tty->kref);
        tty->magic = TTY_MAGIC;
        tty_ldisc_init(tty);
        tty->session = NULL;
        tty->pgrp = NULL;
        mutex_init(&tty->legacy_mutex);
        mutex_init(&tty->throttle_mutex);
        init_rwsem(&tty->termios_rwsem);
        mutex_init(&tty->winsize_mutex);
        init_ldsem(&tty->ldisc_sem);
        init_waitqueue_head(&tty->write_wait);
        init_waitqueue_head(&tty->read_wait);
        INIT_WORK(&tty->hangup_work, do_tty_hangup);
        mutex_init(&tty->atomic_write_lock);
        spin_lock_init(&tty->ctrl_lock);
        spin_lock_init(&tty->flow_lock);
        spin_lock_init(&tty->files_lock);
        INIT_LIST_HEAD(&tty->tty_files);
        INIT_WORK(&tty->SAK_work, do_SAK_work);
        tty->driver = driver;
        tty->ops = driver->ops;
        tty->index = idx;
        tty_line_name(driver, idx, tty->name);
        tty->dev = tty_get_device(tty);
        return tty;
    }
程序最终的分配函数是`kzalloc`函数，该函数定义在`/source/include/linux/slab.h#L686`。
    /**
     * kzalloc - allocate memory. The memory is set to zero.
     * @size: how many bytes of memory are required.
     * @flags: the type of memory to allocate (see kmalloc).
     */
    static inline void *kzalloc(size_t size, gfp_t flags)
    {
        return kmalloc(size, flags | __GFP_ZERO);
    }
可以看到，最后实际上还是调用了`kmalloc`函数。（关于`kmalloc`函数使用的`slab`分配器将会在之后的文章中给予说明）
`kmalloc`函数定义在`/source/include/linux/slab.h#L487`。
    /**
     * kmalloc - allocate memory
     * @size: how many bytes of memory are required.
     * @flags: the type of memory to allocate.
     *
     * kmalloc is the normal method of allocating memory
     * for objects smaller than page size in the kernel.
     *
     * The @flags argument may be one of:
     *
     * %GFP_USER - Allocate memory on behalf of user.  May sleep.
     *
     * %GFP_KERNEL - Allocate normal kernel ram.  May sleep.
     *
     * %GFP_ATOMIC - Allocation will not sleep.  May use emergency pools.
     *   For example, use this inside interrupt handlers.
     *
     * %GFP_HIGHUSER - Allocate pages from high memory.
     *
     * %GFP_NOIO - Do not do any I/O at all while trying to get memory.
     *
     * %GFP_NOFS - Do not make any fs calls while trying to get memory.
     *
     * %GFP_NOWAIT - Allocation will not sleep.
     *
     * %__GFP_THISNODE - Allocate node-local memory only.
     *
     * %GFP_DMA - Allocation suitable for DMA.
     *   Should only be used for kmalloc() caches. Otherwise, use a
     *   slab created with SLAB_DMA.
     *
     * Also it is possible to set different flags by OR'ing
     * in one or more of the following additional @flags:
     *
     * %__GFP_HIGH - This allocation has high priority and may use emergency pools.
     *
     * %__GFP_NOFAIL - Indicate that this allocation is in no way allowed to fail
     *   (think twice before using).
     *
     * %__GFP_NORETRY - If memory is not immediately available,
     *   then give up at once.
     *
     * %__GFP_NOWARN - If allocation fails, don't issue any warnings.
     *
     * %__GFP_RETRY_MAYFAIL - Try really hard to succeed the allocation but fail
     *   eventually.
     *
     * There are other flags available as well, but these are not intended
     * for general use, and so are not documented here. For a full list of
     * potential flags, always refer to linux/gfp.h.
     */
    static __always_inline void *kmalloc(size_t size, gfp_t flags)