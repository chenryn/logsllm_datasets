Java进程监听TCP端口7007，以及修改其他线程。随着Java Security Manager被构建到每个Java
JVM中，您可以简单地用您通常的命令行启动它，并使用另外两个参数：
    java -Djava.security.manager -Djava.security.policy=java-security-policy.txt
因此，在我们的例子中，我们用以下命令可以运行Kelinci Fuzzer服务器进程：
    java -Djava.security.manager -Djava.security.policy=java-security-policy.txt -Djava.io.tmpdir=/tmp/ -cp bin-instrumented:commons-imaging-1.0-instrumented.jar edu.cmu.sv.kelinci.Kelinci driver.Driver @@
在ApacheCommons JPEG解析器上运行了几个小时的Kelinci Fuzzer，没有从Java安全管理器获得任何新的结果。然而，我确信Java
Security Manager将把Java Fuzz带到更高的层次。让我们换一个目标来测试。
## 测试Apache Tika
几天后,我偶然发现了[Apache Tika] (
Lucene的一部分，我确信互联网上的许多用户上传的文件是由ApacheTika解析的。正如我目前正在维护的[另一个有关基于Web的文件上传功能(UploadScanner
Burp
extension)的相关研究](https://github.com/modzero/mod0BurpUploadScanner)。这让我更感兴趣了。
ApacheTika是一个内容分析工具包，可以从上千个不同的文件格式中提取文本内容。使用grep估算它在编译时有247 Java
JAR文件的依赖。Apache Tika
[在过去也有一些严重的安全问题](https://www.cvedetails.com/product/35375/Apache-Tika.html?vendor_id=45)。因此，作为一个测试目标，ApacheTika似乎很适合。另一方面，我也知道对这样一个大的代码库使用AFL会很麻烦。当检测到的代码太大时，AFL将或多或少地快速耗尽Fuzzing测试中的bitmap。之后，AFL将无法检测在一个有趣的代码路径中的结果是何时被写入的。我也不确定我是否能成功地使用JavaFuzz工具来测试大型ApacheTika项目。不过，我决定继续试一试。
我第一次尝试用Kelinci工作，遇到了
[多个](https://github.com/isstac/kelinci/issues/2)不同的[问题](https://github.com/isstac/kelinci/issues/6)，最终创建了一个"works-for-me" Kelinci fork。在kelinci运行之后，我也试图让JQF
Fuzz工具运行起来，然而，我遇到了[类似但不同的问题](https://github.com/rohanpadhye/jqf/issues/20)，因此决定在这一点上坚持Kelinci。对于Tika，我不得不采用Java安全管理器策略：
    grant {
        //Permissions required by Kelinci
        permission java.lang.RuntimePermission "modifyThread";
        permission java.net.SocketPermission "localhost:7007", "listen, resolve";
        permission java.net.SocketPermission "localhost:7008", "listen, resolve";
        permission java.net.SocketPermission "localhost:7009", "listen, resolve";
        permission java.net.SocketPermission "localhost:7010", "listen, resolve";
        permission java.net.SocketPermission "[0:0:0:0:0:0:0:1]:*", "accept, resolve";
        permission java.io.FilePermission "in_dir/*", "read";
        permission java.io.FilePermission "corpus/*", "read, write";
        permission java.io.FilePermission "crashes/*", "read";
        permission java.io.FilePermission "out_dir/*", "read, write";
        //Permissions required by Tika
        permission java.io.FilePermission "tika-app-1.17.jar", "read";
        permission java.io.FilePermission "tika-app-1.17-instrumented.jar", "read";
        permission java.io.FilePermission "/tmp/*", "read, write, delete";
        permission java.lang.RuntimePermission "getenv.TIKA_CONFIG";
        permission java.util.PropertyPermission "org.apache.tika.service.error.warn", "read";
        permission java.util.PropertyPermission "tika.config", "read";
        permission java.util.PropertyPermission "tika.custom-mimetypes", "read";
        permission java.util.PropertyPermission "org.apache.pdfbox.pdfparser.nonSequentialPDFParser.eofLookupRange", "read";
        permission java.util.PropertyPermission "org.apache.pdfbox.forceParsing", "read";
        permission java.util.PropertyPermission "pdfbox.fontcache", "read";
        permission java.util.PropertyPermission "file.encoding", "read";
        //When parsing certain PDFs...
        permission java.util.PropertyPermission "user.home", "read";
        permission java.util.PropertyPermission "com.ctc.wstx.returnNullForDefaultNamespace", "read";
        //When parsing certain .mdb files...
        permission java.util.PropertyPermission "com.healthmarketscience.jackcess.resourcePath", "read";
        permission java.util.PropertyPermission "com.healthmarketscience.jackcess.brokenNio", "read";
        permission java.util.PropertyPermission "com.healthmarketscience.jackcess.charset.VERSION_3", "read";
        permission java.util.PropertyPermission "com.healthmarketscience.jackcess.columnOrder", "read";
        permission java.util.PropertyPermission "com.healthmarketscience.jackcess.enforceForeignKeys", "read";
        permission java.util.PropertyPermission "com.healthmarketscience.jackcess.allowAutoNumberInsert", "read";
        permission java.util.PropertyPermission "com.healthmarketscience.jackcess.timeZone", "read";
    };
手动生成这个策略文件比Apache
Commons更令人讨厌。原因是我们的白名单需要的权限取决于输入文件。因此，如果将PNG文件注入到ApacheTika，它将需要其他运行时属性权限，而不是将PDF文件导入到ApacheTika中。这意味着我们必须先执行一次试运行，然后才能遍历文件的整个输入语料库，并用最小的策略文件运行一次。如果发生安全异常，白名单可能需要另一个权限。这个过程需要花费大量的时间。然而,[一篇2004年的文章](http://www2.sys-con.com/itsg/virtualcd/java/archives/0501/neville/index.html)指出:
> 目前没有工具可以自动生成特定代码的[Java安全]策略文件。
这就是为什么我写了另一个粗糙的黑客工具来生成Java安全策略文件的原因。因为它很粗糙，我给了它取了一个不太好听的名字 [TMSJSPGE on
github](https://github.com/floyd-fuh/TMSJSPGE)。然而，它能正常进行工作，并生成一个Java安全策略文件。它将向目标进程（本例中为Tika）提供每个语料库文件，并在安全策略中添加新规则。
看到上面的属性权限，我还是不知道他们在做什么。不过，我只是决定按照这样，让Tika去使用它们。
如果你使用不同的输入文件运行您的Fuzz工具，你可能需要使用Java安全策略，因为其他代码路径可能需要新的权限。因此，上面提到的Apache
Tika的安全策略很可能是不完整的。
## apache Tika中的发现
正如已经解释的那样，一个好的输入语料库对于fuzz运行成功至关重要。此外，我必须使用尽可能多的文件运行Tika，以确保Java安全策略涵盖了必要的大部分权限。多年来，我收集了许多输入样本文件（大约100'000），通过使用各种库和收集第三方文件运行Fuzz（这实际上是另一个话题了）。因此，我决定使用这100'000文件中的每一个文件运行TMSJSPGE工具，以创建最佳的安全策略。当我检查TMSJSPGE时，我看到这个工具不能给ApacheTika“投喂”某个文件。这意味着ApacheTika在进程挂起时未返回结果。说明在对Apache
Tika
1.17进行Fuzzing之前我已经发现了一些安全问题。删除导致挂起的文件，重新启动TMSJSPGE后，ApacheTika也挂起了其他几个文件。部分文件触发了相同的挂起，去重后，我向Apache
Tika报告了如下两个安全问题：
  * [CVE-2018-1338](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1338) \- DoS (Infinite Loop) Vulnerability in [Apache Tika's BPGParser](http://www.openwall.com/lists/oss-security/2018/04/25/6) (file 3_hang_and_uncaught_TiffProcessingException.bpg), 输入以上文件，代码不返回结果, 死循环。
  * [CVE-2018-1339](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1339) \- DoS (Infinite Loop) Vulnerability in [Apache Tika's ChmParser](http://www.openwall.com/lists/oss-security/2018/04/25/7) (file 1_100_percent_cpu_dos.chm), 输入以上文件导致CPU 100%占用。