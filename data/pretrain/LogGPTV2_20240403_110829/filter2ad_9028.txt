# 微软轻量级系统监控工具sysmon原理与实现完全分析（上篇）
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
****
作者：浪子_三少
Sysmon是微软的一款轻量级的系统监控工具，最开始是由Sysinternals开发的，后来Sysinternals被微软收购，现在属于Sysinternals系列工具。它通过系统服务和驱动程序实现记录进程创建、文件访问以及网络信息的记录，并把相关的信息写入并展示在windows的日志事件里。经常有安全人员使用这款工具去记录并分析系统进程的活动来识别恶意或者异常活动。而本文讨论不是如何去使用该工具，而是讲解该软件的原理与实现。
本文对Sysmon分两部分
1.ring3层的exe，
2\. Flt的minifilter
下面开始上篇的讲解，ring3实现对网络数据记录以及对驱动返回的数据进行解析，而驱动部分则返回进程相关的信息以及进程访问文件注册表的数据给ring3，我们首选讲解ring3的实现原理。
Sysmon的ring3执行原理
  1. 判断当前操作系统是否是64位，如果是就执行64位的sysmon
动态获取IsWow64Process的函数地址，然后调用IsWow64Process函数，判断当前是否是wow64，如果是就执行SysmonLunchIsAmd64(),进入SysmonLunchIsAmd64函数
通过GetNativeSystemInfo函数判断当前SystemInfo.wProcessorArchitecture !=
PROCESSOR_ARCHITECTURE_AMD64的值
如果是PROCESSOR_ARCHITECTURE_AMD64则释放资源节中id =
1001的资源到当前进程的所在目录，这是一个内嵌在资源里的64位版本的sysmon的exe，释放完毕后，就开始执行这个64的Sysmon。下面就是Symon的64位资源图
本文还是主要以32位的sysmon来讲解，我们继续往下讲解
  2. 参数的检查
接下来sysmon会对参数进行检查，检查是否config、configuration、h、–nologon、？、help，非这些参数后，然后会接着解析具体的参数，根据参数是否加载规则。
我们看SysmonAnalyzeInitArgv函数具体看看sysmon有哪些参数，
g_commandLine里固定存贮所有的sysmon参数，这里大概只列举出一部分，Install、i、Uninstall、Configuration、c、u、Manifest、m、DebugMode、nologo、AcceptEula、ConfigDefault、HashAlgorithms、NetworkConnect、ImageLoad、l、DriverName、ProcessAccess、CheckRevocation、PipeMonitoring等等。
如果是相应的参数就继续往下执行相应的动作。
通过检测参数sha、sha-1、md5、md-5、sha、sha256、imphash、imp-hash计算当前使用何种hash算法
Sha： 1算法 、Md5： 2算法、sha：3算法、imphash：4算法
接下来会加载内置在exe 内的Sysmonschema.xml
Sysmonschema.xml的configuration规定了一些进程参数的说明，而events描述说明一些记录信息事件，比如
就说明了SYSMON_CREATE_PROCESS创建进程上报信息的一些数据内容及说明。
如果参数是PrintSchema
则解析并获取Sysmonschema的version，然后打印Sysmonschema的信息
  3. 注册日志记录事件
Sysmon接着会通过EventRegister()函数注册一个GUID为{ _5770385F_
-C22A-43E0-BF4C-06F5698FFBD9}的日志事件。然后sysmon会通过系统的wevtutil.exe的程序去注册该GUID的系统日志trace类。
获取系统是否存在Microsoft-Windows-Sysmon的trace类，如果没有就加载exe资源中“SYSMONMAN”的资源到内存，然后释放写入系统临时目录下的文件名MANXXXX.tmp文件里
该文件是定义{5770385F-C22A-43E0-BF4C-06F5698FFBD9}的Microsoft-Windows-Sysmon的trace事件的provider，用于sysmon的后续数据解析。
最后调用系统的”wevtutil.exe im MANXXXX.tmp”去注册安装事件类
  4. 安装minifilter驱动
释放资源文件为1002的到系统目录Tmp/Sysmon.sys，资源1002文件是个pe文件，实际上是sysmon的文件注册表监控驱动。
接下来继续就是安装这个驱动
Sysmon还会设置minifilter驱动的Altitude值为385201
最后开启驱动服务
往驱动发送IO控制码： 0x8340008（该控制码是给驱动更新配置规则）
以上过程是大致的安装与启动的过程，接下来就是执行Sysmon服务的SysmonServiceMain例程。
下面开始执行取数据的工作了。
第一步： 文件进程注册表的事件监控
通过发送IO控制码: 0x83400000，打开文件驱动功能，接着sysmon会开启一个线程从驱动获取监控数据，通过发送IO控制码
：0x83400004，去反复获取
每隔500毫秒发送一次获取数据，堆大小0x400000,获取了数据后，则开始解析这raw data，这个raw数据的首四个字节是表示数据类型
    Typedef struct _Sysmon_Raw_Data
    {
      ULONG DataType;
    } Sysmon_Raw_Data;
Case 1: 上报进程创建
    ReportEventWriteEvent((int)&v147, (unsigned __int16 *)&g_CreateProcess, (int)v1, v17);
Case 2: 文件时间改变
    ReportEventWriteEvent((int)&v147, (unsigned __int16 *)&g_CreateFileTime, (int)v1, v30);
Case 3：进程关闭
    ReportEventWriteEvent((int)&v147, (unsigned __int16 *)&g_TerminateProcess, (int)v1, 0);
Case 5： 加载镜像
    ReportEventWriteEvent((int)&v146, & g_ImageLoad, (int)v1, v50);
Case 7：创建远程线程
    ReportEventWriteEvent((int)&v146, (unsigned __int16 *)&g_CreateRemoteThread, (int)v1, 0);
Case 8：文件读
    ReportEventWriteEvent((int)&v146, (unsigned __int16 *)&g_FileRead, (int)v1, 0);
Case 9：访问进程
    ReportEventWriteEvent((int)&v146, (unsigned __int16 *)&g_ProcessAccess, (int)v1, 0);
Case 10： 文件创建
    ReportEventWriteEvent((int)&v146, (unsigned __int16 *)&g_FileCreate, (int)v1, v32);
Case 11：文件流事件
    ReportEventWriteEvent((int)&v146, (unsigned __int16 *)&g_FileStreamCreate, (int)v1, v35);
Case 12：注册表相关的事件
Case 13：管道类事件
第二步：网络链接事件的监控
Sysmon还会创建一个ETW事件去监控网络连接的访问事件
Net Trace 名：L”SYSMON TRACE”; 或者使用系统的L”NT Kernel Logger”;
方法参考微软官方实例：
事件回调EventCallBack()接受数据
在解析数据时使用的是WMI Mof的方法来解析
可以参考微软的官方例子：
第三步：接受上报数据写入windows的Application日志
在第二部中我们可以看到通过ReportEventWriteEvent函数上报信息，在ReportEventWriteEvent函数里分两种情况系统API上报
通过ReportEvent或者EventWrite 两个其中一个API上报，而上报的事件IDD
类都是前面我们看到的Sysmon自己注册到系统的里
的Microsoft-Windows-Sysmon事件代理，这个会生成到windows日志的Application项目下，具体会使用哪个API是根据windows的版本来选择的
这里可以看到如果操作系统主版本，如果是vista之前的操作系统使用ReportEvent，如果是vista以及以上操作系统则使用EventWrite函数。
Sysmon记录上报了数据源通过注册的WMIEvent的wmi数据持久化过滤事件去过滤不会被记录的事件，我们下面看它如何实现的。
在之前的服务启动入口有一个函数RegisterWmiEvent，该函数就是注册过滤WmiEvent的函数，我们继续往下看
函数开头会创建实例IDD_WebCImv，class Id: IID_IWbemLocatorGUID2
链接”ROOT\\\Subscription”的服务
接着创建Stub插口
g_WMIListenerEvent接口类型是IWbemObjectSink,其定义如下
    MIDL_INTERFACE("7c857801-7381-11cf-884d-00aa004b2e24")
        IWbemObjectSink : public IUnknown
        {
        public:
            virtual HRESULT STDMETHODCALLTYPE Indicate(
                /* [in] */ long lObjectCount,
                /* [size_is][in] */ __RPC__in_ecount_full(lObjectCount) IWbemClassObject **apObjArray) = 0;
            virtual HRESULT STDMETHODCALLTYPE SetStatus(
                /* [in] */ long lFlags,
                /* [in] */ HRESULT hResult,
                /* [unique][in] */ __RPC__in_opt BSTR strParam,
                /* [unique][in] */ __RPC__in_opt IWbemClassObject *pObjParam) = 0;
        };
然后执行
    "SELECT * FROM __InstanceOperationEvent WITHIN  5  WHERE TargetInstance ISA '__EventConsumer' OR Tar"
                            "getInstance ISA '__EventFilter' OR TargetInstance ISA '__FilterToConsumerBinding'"
    g_WmiSubscriptProxy->lpVtbl->ExecNotificationQueryAsync(
               g_WmiSubscriptProxy,
               strQueryLanguage,
               strQuery,
               128,
               0,
               (IWbemObjectSink *)g_pIWebmObjectSink);
去设置WMiEvent的过滤事件，操作类型是所有操作InstanceOperationEvent，设置三种事件
EventConsumer’、EventFilter’、FilterToConsumerBinding’，查询时间是5秒一次，这样就注册了。
下面我们看g_WMIListenerEvent结构
过滤事件就是在Indicate函数中实现，会通过IWbemClassObject**
数组的形式输入，函数内会枚举数据，如果是要过滤的数据则循环枚举否则中断枚举。
至此第一篇对sysmon的ring3的大致原理流程我们分析完毕，通过对它分析，学习它的实现过程，可以自己完成实现一个sysmon（还有驱动部分第二篇讲解），当然也可以绕过sysmon的监控，这就需要读者自己去研究与发现，第二篇我会讲解驱动部分的分析。