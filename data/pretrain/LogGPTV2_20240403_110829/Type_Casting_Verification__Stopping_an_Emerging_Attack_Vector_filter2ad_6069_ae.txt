Total
0
0
963
41k
104
0
338
524k
24k
0
150k
511k
24k
0
151k
1,077k
Table 6: The number of traced objects and type castings verified by CAVER in our benchmarks. Under the Object Tracing column,
Peak and Total denote the maximum number of traced objects during program execution, and the total number of traced objects
until its termination, respectively. Global, Stack, and Heap under the Verified Casts represent object’s original types (allocation)
involved in castings. Note that Firefox heavily allocates objects on stack, compared to Chromium. Firefox allocated 4,134% more
stack objects, and performs 1,550% more type castings than Chromium.
500%
450%
100%
50%
0%
CAVER-NAIVE
CAVER
Octane
SunSpider
Dromaeo-JS
Dromaeo-DOM
Figure 5: Browser benchmark results for the Firefox browser.
On average, CAVER and CAVER-NAIVE showed 64.6% and
170.3% overhead, respectively.
optimization techniques in §4.4 provided a 23.1% per-
formance improvement. This performance improvement
is mostly due to the safe-allocation optimization, which
identified 76,381 safe-allocation types (81% of all types
used for Chromium) and opted-out to instrument alloca-
tion sites on such types. Compared to UBSAN, CAVER
is 13.8% faster even though it offers more wide detection
coverage on type casting. Thus, we believe this result
shows that CAVER’s THTable design and optimization
techniques are efficient in terms of runtime performances.
Browser benchmarks (Firefox). We applied CAVER
to the Firefox browser and measured the performance
overhead for the web benchmarks used in evaluating the
Chromium browser. On average, CAVER imposed 64.6%
overhead while CAVER-NAIVE imposed 170.3% over-
head (Figure 5). Similar to the Chromium case, most of
performance improvements are from safe-allocation op-
timization, which identified 21,829 safe-allocation types
(72% of all used types for Firefox). UBSAN was un-
able to run Firefox because it crashed due to the in-
ability of its RTTI to handle non-polymorphic types,
so we do not present the comparison number. Com-
pared to CAVER’s results on Chromium, the CAVER-
enhanced Firefox showed worse performance, mainly due
to the enormous amount of stack objects allocated by
Firefox (Table 6). In order words, the potential perfor-
mance impacts rely on the usage pattern of target appli-
cations, rather than the inherent overheads of CAVER’s
approaches.
Name
483.xalancbmk
450.soplex
Chromium
Firefox
Original
UBSAN
CAVER
Peak
Avg
9
2
376
165
8
2
311
121
Peak
crash
2
952
crash
Avg
crash
2
804
crash
Peak
Avg
14
5
878
208
12
5
738
157
Table 7: Runtime memory impacts (in KB) while running tar-
get programs. UBSAN crashed while running xalancbmk and
Firefox due to the non-polymorhpic typed classes. Peak and
Avg columns denote the maximum and average memory usages,
respectively, while running the program. CAVER used 137%
more memory on Chromium, and 23% more memory on Firefox.
UBSAN used 158% more memory on Chromium.
Memory overheads. UBSAN and CAVER achieve fast
lookup of the metadata of a given object by using a custom
memory allocator that is highly optimized for this purpose,
at the cost of unnecessary memory fragmentation. In our
benchmark (Table 7), UBSAN used 2.5× more memory
at peak and average; and CAVER used 2.3× more mem-
ory at peak and average, which is an 8% improvement
over UBSAN. Considering CAVER’s main purpose is a
diagnosis tool and the amount of required memory is not
large (< 1 GB), we believe that these memory overheads
are acceptable cost in practice for the protection gained.
7 Discussion
Integration with fuzzing tools. During our evaluations,
we relied on the built-in test inputs distributed with the tar-
get programs, and did not specifically attempt to improve
code coverage. Yet CAVER is capable of discovering
dozens of previously unknown bad-casting bugs. In the
future, we plan to integrate CAVER with fuzzing tools like
the ClusterFuzz [2] infrastructure for Chromium to im-
prove code coverage. By doing so, we expect to discover
more bad-casting vulnerabilities.
Optimization. In this paper, we focused on the correct-
ness, effectiveness, and usability of CAVER. Although
we developed several techniques to improve performance,
optimization is not our main focus. With more powerful
optimization techniques, we believe CAVER can also be
used for runtime bad-casting mitigation.
92  24th USENIX Security Symposium 
USENIX Association
12
For example, one direction we are pursuing is to use
static analysis to prove whether a type casting is always
safe. By doing so, we can remove redundant cast verifica-
tion.
Another direction is to apply alignment-based direct
mapping scheme for global and stack objects as well.
Please recall that red-black trees used for global and stack
objects show O(logN) complexity, while alignment-based
direct mapping scheme guarantees O(1) complexity. In
order to apply alignment-based direct mapping scheme for
global and stack objects together, there has to be radical
semantic changes in allocating stack and global objects.
This is because alignment-based direct mapping scheme
requires that all objects have to be strictly aligned. This
may not be difficult for global objects, but designing and
implementing for stack objects would be non-trivial for
the following reasons: (1) essentially this may involve
a knapsack problem (i.e., given different sized stack ob-
jects in each stack frame, what are the optimal packing
strategies to reduce memory uses while keeping a certain
alignment rule); (2) an alignment base address for each
stack frame has to be independently maintained during
runtime; (3) supporting variable length arrays (allowed
in ISO C99 [18]) in stack would be problematic as the
packing strategy can be only determined at runtime in this
case.
Furthermore, it is also possible to try even more ex-
treme approaches to apply alignment-based direct map-
ping scheme—simply migrating all stack objects to be
allocated in heap. However, this may result in another
potential side effects in overhead.
8 Related work
Bad-casting detection. The virtual function table check-
ing in Undefined Behavior Sanitizer (UBSAN-vptr) [42]
is the closest related work to CAVER. Similar to CAVER,
UBSAN instruments static_cast at compile time, and
verifies the casting at runtime. The primary difference is
that UBSan relies on RTTI to retrieve the type information
of an object. Thus, as we have described in §4, UBSAN
suffers from several limitations of RTTI . (1) Coverage:
UBSAN cannot handle non-polymorphic classes as there
is no RTTI for these classes; (2) Ease-of-deployments:
hardening large scale software products with UBSAN
is non-trivial due to the coverage problem and phantom
classes. As a result, UBSAN has to rely on blacklisting [9]
to avoid crashes.
RTTI alternatives. Noticing the difficulties in han-
dling complex C++ class hierarchies in large-scale soft-
ware, several open source projects use a custom form of
RTTI. For example, the LLVM project devised a custom
RTTI [27]. LLVM-style RTTI requires all classes to mark
its identity once it is created (i.e., in C++ constructors)
and further implement a static member function to re-
trieve its identity. Then, all type conversions can be done
with templates that leverage this static member function
implemented in every class. Because the static member
function can tell the true identity of an object, theoreti-
cally, all type conversions are always correct and have no
bad-casting issues. Compared to CAVER, the drawback
of this approach is that it requires manual source code
modification. Thus, it would be non-trivial to modify
large projects like browsers to switch to this style. More
alarmingly, since it relies on developers’ manual modifi-
cation, if developers make mistakes in implementations,
bad-casting can still happen [41].
Runtime type tracing. Tracing runtime type informa-
tion offers several benefits, especially for debugging and
profiling. [37] used RTTI to avoid complicated parsing
supports in profiling parallel and scientific C++ applica-
tions. Instead of relying on RTTI, [15, 28] instruments
memory allocation functions to measure complete heap
memory profiles. CAVER is inspired by these runtime
type tracing techniques, but it introduced the THTable, a
unique data structure to support efficient verification of
complicated type conversion.
Memory corruption prevention. As described in §2,
bad-casting can provide attackers access to memory be-
yond the boundary of the casted object. In this case, there
will be a particular violation (e.g., memory corruptions)
once it is abused to mount an attack. Such violations can
be detected with existing software hardening techniques,
which prevents memory corruption attacks and thus po-
tentially stop attacks abusing bad-casting. In particular,
Memcheck (Valgrind) [34] and Purify [23] are popularly
used solutions to detect memory errors. AddressSani-
tizer [36] is another popular tool developed recently by
optimizing the way to represent and probe the status of al-
located memory. However, it cannot detect if the attacker
accesses beyond red-zones or stressing memory alloca-
tors to abuse a quarantine zone [8]. Another direction
is to enforce spatial memory safety [14, 25, 32, 33, 48],
but this has drawbacks when handling bad-casting issues.
For example, Cyclone [25] requires extensive code mod-
ifications; CCured [33] modifies the memory allocation
model; and SVA [14] depends on a new virtual execution
environment. More fundamentally, most only support C
programs.
Overall, compared to these solutions, we believe
CAVER makes a valuable contribution because it detects
the root cause of one important vulnerability type: bad-
casting. CAVER can provide detailed information on how
a bad-casting happens. More importantly, depending on
certain test cases or workloads, many tools cannot detect
bad-casting if a bad-casted pointer is not actually used
to violate memory safety. However, CAVER can immedi-
ately detect such latent cases if any bad-casting occurs.
Control Flow Integrity (CFI). Similar to memory cor-
USENIX Association  
24th USENIX Security Symposium  93
13
ruption prevention techniques, supporting CFI [1, 49–51]
may prevent attacks abusing bad-casting as many exploits
hijack control flows to mount an attack. Furthermore,
specific to C++ domain, SafeDispatch [24] and VTV [45]
guarantee the integrity of virtual function calls to prevent
hijacks over virtual function calls. First of all, soundly
implementing CFI itself is challenging. Recent research
papers identified security holes in most of CFI implemen-
tations [6, 17, 19, 20]. More importantly, all of these solu-
tions are designed to only protect control-data, and thus it
cannot detect any non-control data attacks [7]. For exam-
ple, the recent vulnerability exploit against glibc [35] was
able to completely subvert the victim’s system by merely
overwriting non-control data—EXIM’s runtime configura-
tion. However, because CAVER is not relying on such
post-behaviors originating from bad-casting, it is agnostic
to specific exploit methods.
9 Conclusion
The bad-casting problem in C++ programs, which occurs
when the type of an object pointer is converted to an-
other that is incorrect and unsafe, has serious security
implications. We have developed CAVER, a runtime bad-
casting detection tool. It uses a new runtime type tracing
mechanism, the Type Hierarchy Table, to efficiently ver-
ify type casting dynamically. CAVER provides broader
coverage than existing approaches with smaller or com-
parable performance overhead. We have implemented
CAVER and have applied it to large-scale software in-
cluding the Chromium and Firefox browsers. To date,
CAVER has found eleven previously unknown vulnerabil-
ities, which have been reported and subsequently fixed by
the corresponding open-source communities.
Acknowledgment
The authors would like to thank the anonymous reviewers
for their helpful feedback, as well as our operations staff
for their proofreading efforts. We also would like to thank
Abhishek Arya, Kostya Serebryany, Alexey Samsonov,
Richard Smith, and Parisa Tabriz for their helpful feed-
back on the paper. This material is based upon work sup-
ported in part by the National Science Foundation under
Grants No. CNS-1017265, CNS-0831300, CNS-1149051
and DGE 1500084, by the Office of Naval Research un-
der Grant No. N000140911042, No. N000141512162,
by the Department of Homeland Security under contract
No. N66001-12-C-0133, by the United States Air Force
under Contract No. FA8650-10-C-7025, and by ETRI
MSIP/IITP[B0101-15-0644]. Any opinions, findings, and
conclusions or recommendations expressed in this mate-
rial are those of the authors and do not necessarily reflect
the views of the National Science Foundation, the Office
of Naval Research, the Department of Homeland Security,
or the United States Air Force.
References
[1] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti. Control-flow
integrity. In ACM Conference on Computer and Communications
Security (CCS), 2005.
[2] C. N. Abhishek Arya.
Chromium Blog).
04/fuzzing-for-security.html, 2012.
Fuzzing for Security (The
http://blog.chromium.org/2012/
[3] P. Akritidis, M. Costa, M. Castro, and S. Hand. Baggy Bounds
Checking: An Efficient and Backwards-Compatible Defense
against Out-of-Bounds Errors. In USENIX Security Symposium
(Security), 2009.
[4] Bad casting: From BasicThebesLayer to BasicContainerLayer.
Mozilla Bugzilla - Bug 1074280. https://bugzilla.mozilla.
org/show_bug.cgi?id=1074280, Nov 2014.
[5] Bad-casting from PRCListStr to nsSHistory. Mozilla Bugzilla -
Bug 1089438. https://bugzilla.mozilla.org/show_bug.
cgi?id=1089438, Nov 2014.
[6] N. Carlini and D. Wagner. ROP is still dangerous: Breaking
In USENIX Security Symposium (Security),
modern defenses.
2014.
[7] S. Chen, J. Xu, E. C. Sezer, P. Gauriar, and R. K. Iyer. Non-
control-data Attacks Are Realistic Threats. In USENIX Security
Symposium (Security), 2005.
[8] Chris Evans.
Using ASAN as a protection.
//scarybeastsecurity.blogspot.com/2014/09/