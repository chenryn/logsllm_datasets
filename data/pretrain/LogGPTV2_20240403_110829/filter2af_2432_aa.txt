作者：[Liang Chen
(@chenliang0817)](http://keenlab.tencent.com/zh/2017/08/02/CVE-2017-7047-Triple-Fetch-bug-and-vulnerability-analysis/)
昨天 Google Project Zero 的 Ian Beer 发布了 CVE-2017-7047 的漏洞细节，以及一个叫 Triple_Fetch
的漏洞利用 app，可以拿到所有 10.3.2
及以下版本的用户态Root+无沙盒权限，昨天我看了一下这个漏洞和利用的细节，总得来说整个利用思路还是非常精妙的。我决定写这篇文章，旨在尽可能地记录下
Triple_Fetch 以及 CVE-2017-7047 的每一个精彩的细节。
#### CVE-2017-7047 漏洞成因与细节
这是个 libxpc 底层实现的漏洞。我们知道，其实 libxpc 是在 macOS/iOS 的 mach_msg
基础上做了一层封装，使得以前一些因为使用或开发 MIG 接口的过程中因为对 MIG 接口细节不熟悉导致的漏洞变得越来越少。有关 MIG
相关的内容可以参考[我以前的文章](http://keenlab.tencent.com/en/2016/07/22/WindowServer-The-privilege-chameleon-on-macOS-Part-1/) ，这里不再详细叙述。
XPC 自己实现了一套类似于 CFObject/OSObject
形式的对象库，对应的数据结构为`OS_xpc_xxx`(例如`OS_xpc_dictionary`,
`OS_xpc_data`等)，当客户端通过XPC发送数据时，`_xpc_serializer_pack` 函数会被调用，将要发送的
`OS_xpc_xxx` 对象序列化成 binary 形式。注意到，如果发送的数据中存在 `OS_xpc_data` 对象(可以是作为
OS_xpc_array 或者 OS_xpc_dictionary 等容器类的元素)时，对应的 serialize 函数
`_xpc_data_serialize` 会进行判断：
    __int64 __fastcall _xpc_data_serialize(__int64 a1, __int64 a2)
    {
    ...
      if ( *(_QWORD *)(a1 + 48) > 0x4000uLL ) //这里判断data的长度
      {
        v3 = dispatch_data_make_memory_entry(*(_QWORD *)(a1 + 32)); //获取这块内存的send right
        ...
      }
    ...
    }
当 `OS_xpc_data` 对象的数据大于 0x4000 时，`_xpc_data_serialize`
函数会调用`dispatch_data_make_memory_entry`，`dispatch_data_make_memory_entry`
调用`mach_make_memory_entry_64`。`mach_make_memory_entry_64`
返回给用户一个`mem_entry_name_port` 类型的 send right, 用户可以紧接着调用 `mach_vm_map` 将这个 send
right 对应的 memory 映射到自己进程的地址空间。也就是说，对大于 0x4000 的 `OS_xpc_data` 数据，XPC
在传输的时候会避免整块内存的传输，而是通过传 port 的方式让接收端拿到这个 memory 的 send right，接收端接着通过
`mach_vm_map` 的方式映射这块内存。接收端反序列化 `OS_xpc_data` 的相关代码如下：
    __int64 __fastcall _xpc_data_deserialize(__int64 a1)
    {
      if ( _xpc_data_get_wire_value(a1, (__int64 *)&v8, &v7) ) //获取data内容
      {
        ...
      }
      return v1;
    }
    char __fastcall _xpc_data_get_wire_value(__int64 a1, _QWORD *a2, mach_vm_size_t *a3)
    {
    ...
      if ( v6 )
      {
        v7 = *v6;
        if ( v7 > 0x4000 )//数据大于0x4000时，则获取mem_entry_name_port来映射内存
        {
          v8 = 0;
          name = 0;
          v17 = 0;
          v19 = (unsigned int *)_xpc_serializer_read(a1, 0LL, &name, &v17); //获取mem_entry_name_port send right
          if ( name + 1 >= 2 )
          {
            v9 = v17;
            if ( v17 == 17 )
            {
              v10 = _xpc_vm_map_memory_entry(name, v7, (mach_vm_address_t *)&v19); //调用_xpc_vm_map_memory_entry映射内存
              ...
            }
          }
    ...
    }
之后就是最关键的 `_xpc_vm_map_memory_entry` 逻辑了，可以看到，在 macOS 10.12.5 或者 iOS 10.3.2
的实现中，调用 `mach_vm_map` 的相关参数如下：
    kern_return_t __fastcall _xpc_vm_map_memory_entry(mem_entry_name_port_t object, mach_vm_size_t size, _QWORD *a3)
    {
      result = mach_vm_map(
                 *(_DWORD *)mach_task_self__ptr,
                 (mach_vm_address_t *)&v5,
                 size,
                 0LL,
                 1,
                 object,
                 0LL, 
                 0, // Booleean copy
                 0x43,
                 0x43,
                 2u);
    }
`mach_vm_map` 的官方参数定义如下：
    kern_return_t mach_vm_map(vm_map_t target_task, mach_vm_address_t *address, mach_vm_size_t size, mach_vm_offset_t mask, int flags, mem_entry_name_port_t object, memory_object_offset_t offset, boolean_t copy, vm_prot_t cur_protection, vm_prot_t max_protection, vm_inherit_t inheritance);
值得注意的是最后第四个参数 boolean_t copy， 如果是 0 代表映射的内存与原始进程的内存共享一个物理页，如果是 1 则是分配新的物理页。
在 `_xpc_data_deserialize` 的处理逻辑中，内存通过共享物理页的方式(copy = 0)来映射，这样在客户端进程中攻击者可以随意修改
data 的内容从而实时体现到接收端进程中。虽然在绝大多数情况下，这样的修改不会造成严重影响，因为接收端本身就应该假设从客户端传入的 data
是任意可控的。但是如果这片数据中存在复杂结构(例如length等field)，那么在处理这片数据时就可能产生 double fetch 等条件竞争问题。而
Ian Beer
正是找到了一处”处理这个data时想当然认为这块内存是固定不变的错误”，巧妙地实现了任意代码执行，这部分后面详细叙述，我们先来看看漏洞的修复。
#### CVE-2017-7047 漏洞修复
这个漏洞的修复比较直观，在 `_xpc_vm_map_memory_entry` 函数中多加了个参数，指定 vm_map
是以共享物理页还是拷贝物理页的方式来映射：
    char __fastcall _xpc_data_get_wire_value(__int64 a1, _QWORD *a2, mach_vm_size_t *a3)
    {
    ...
        if ( v7 > 0x4000 )
        {
          v8 = 0;
          name = 0;
          v17 = 0;
          v19 = (unsigned int *)_xpc_serializer_read(a1, 0LL, &name, &v17);
          if ( name + 1 >= 2 )
          {
            v9 = v17;
            if ( v17 == 17 )
            {
              v10 = _xpc_vm_map_memory_entry(name, v7, (mach_vm_address_t *)&v19, 0);//引入第四个参数，指定为0
            }
          }
        }
    ...
    }
    kern_return_t __fastcall _xpc_vm_map_memory_entry(mem_entry_name_port_t object, mach_vm_size_t size, mach_vm_address_t *a3, unsigned __int8 a4)
    {
    ...
      result = mach_vm_map(*(_DWORD *)mach_task_self__ptr, 
                            &address, size, 0LL, 1, object, 0LL, 
                            a4 ^ 1, // 异或1后，变为1
                            0x43, 
                            0x43, 
                            2u);
    ...
    }
可以看到，这里把映射方式改成拷贝物理页后，问题得以解决。
#### Triple_Fetch利用详解
如果看到这里你还不觉得累，那么下面的内容可能就是本文最精彩的内容了（当然，估计会累）。
###### 一些基本知识
我们现在已经知道，这是个 XPC 底层实现的漏洞，但具体能否利用，要看特定 XPC 服务的具体实现，而绝大多数 XPC 服务仅仅将涉及
`OS_xpc_data` 对象的 buffer 作为普通数据内容来处理，即使在处理的时候 buffer
内容发生变化，也不会造成大问题。而即便找到有问题的案例，也仅仅是影响部分 XPC 服务。把一个通用型机制漏洞变成一个只影响部分 XPC