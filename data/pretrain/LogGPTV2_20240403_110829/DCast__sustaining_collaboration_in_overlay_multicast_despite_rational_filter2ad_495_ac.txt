blocks. Our earlier idea of proﬁtable interactions is achieved by
properly setting Dpay: Under proper Dpay, it will be proﬁtable for
a peer to issue/relay a doin, assuming that the doin is later properly
paid.
We will present later the protocol level details on doin circula-
tion, doin payment, and freeing up debt-links, as well as a formal
theorem. For now, let us ﬁrst obtain some intuition on the incen-
tives in this design.
4.3 DCast Intuition
For better understanding, we for now assume i) inﬁnite number
of intervals in the multicast session, ii) no message losses, and iii)
no control message overhead (i.e., a bit sent is a bit in either some
multicast block or some junk block). Section 4.4 will explain how
these assumptions can be removed.
We set the parameters in DCast such that max(1, σ) 
max(1, σ) and by properly re-using debt-links. Under such Dpay,
A makes some constant proﬁt each time a doin is issued/relayed
on a debt-link and then paid. Re-using the debt-link a sufﬁcient
number of times during the multicast session will then enable the
accumulated proﬁt to exceed the initial setup cost of the debt-link.
This in turn incentivizes A to accept debt-link establishments and
to send multicast blocks when non-deviators pull from them. In par-
ticular, such incentive also applies to deviators — while they might
be able to disseminate data among themselves more efﬁciently than
with non-deviators, under Dpay > max(1, σ), issuing doins and
then getting doin payments from non-deviators incur even smaller
cost.
DCast does not provide any mechanism for peers to negotiate
Dpay, for two reasons. First, we do not believe that it is practical
for users to negotiate the payment price. Second, setting a ﬁxed
price precludes the possibility of monopoly pricing. Namely, since
the non-deviators will only make payments by the system-set price,
4Strictly speaking, even when all peers are non-deviators, random
gossiping may still fail to achieve such a property, with some van-
ishingly small probability. It is however trivial to fully qualify our
discussion by adding a “with high probability” condition.
571x
y
z
D1
D2
D3
y
x
z
B
x,y,z
x,y,z
D1
x,y,z
x,y,z
D2
D3
x,z
y,z
x, y
B
x,y,z
all 3 links now occupied
all 3 links now freed
Figure 1: A non-deviator B pulls three blocks (x, y, and z),
together with three doins, from three deviators D1, D2, and
D3. B then uses these blocks to pay off the exact three doins
accompanying the three blocks under Dpay= 2. The arrows in
the ﬁgure are messages. The debt-links from D1, D2, and D3
to B are not shown in the ﬁgure.
the deviators simply will not get a payment (and will hurt their own
utilities) if they ask for a higher price.
Ability to pay debts. So far we have intuitively explained that a
peer has the incentive to pay for a doin. For the payment to actually
occur, the peer needs to have i) enough multicast blocks to offer to
the doin issuer, and ii) enough bandwidth to send those blocks. It
may not be immediately clear why peers will have enough blocks to
pay off their (potentially high-interest) debts. If we view each block
as a dollar and if Dpay= 2, then every dollar must be repaid with
two dollars and it seems that such an “economy” is impossible to
sustain. Fortunately, our situation is fundamentally different from a
real economy in that a peer B can send the same block to multiple
peers and thus use that same “dollar” to offset multiple debts. This
even makes it possible for B to purely rely on blocks pulled from
deviators to pay off the debts to those deviators, despite that pulling
those blocks will incur more debts. For example in Figure 1, B
starts without any blocks, and then pulls 3 blocks from 3 deviators
(D1, D2, and D3), respectively. Afterwards, B can use these 3
blocks to fully pay off the debts to the 3 deviators.
The example also illustrates what will happen if B does not have
enough (upload) bandwidth to pay off the debts. Conveniently, if B
does not have bandwidth to pay, then B will not have bandwidth to
establish new debt-links either. In fact, once B has available band-
width, it will prefer paying off the old debts instead of establishing
new debt-links. This avoids the undesirable situation where a peer
without enough bandwidth just keeps borrowing new debts without
paying off the old debts.
Rational sybil attacks. All our reasoning above applies to both
non-sybil peers and sybil peers, except for the discussion on the
peer list maintained by the root. Sybil attack enables one ratio-
nal user to occupy a large fraction of the peer list, with two ef-
fects. First, the sybil peers will be selected more often for receiv-
ing blocks directly from the root. But since Dlink < Droot, di-
rectly receiving the blocks from the root even exceeds the cost of
pulling them from other peers. Thus the user has no incentive to
create sybil identities to attract more blocks from the root. The sec-
ond effect is that the sybil peers will more likely be in the view of
other peers, and thus attract debt-link establishments. By our de-
sign, debt-link establishment by itself actually hurts a peer. Rather,
the peer makes a proﬁt only when it issues/relays doins and when
the doins are paid. Thus a rational user only has the incentive to
create as many sybil peers as they have enough bandwidth to is-
sue/relay doins. As long as the sybil peers do this, they will not
have any negative impact other than increasing the system size.
Small social cost. To sustain collaboration, peers in our DCast de-
sign sometimes need to send junk blocks. Our later experiments
will show that, as a nice property of DCast, the relative social cost
incurred by these junk blocks actually tends to zero over time in a
large scale system. At a high level, this is because i) the total num-
ber of debt links established quickly stabilizes and thus debt link
establishments largely only incur junk blocks at the beginning of
the multicast session, and ii) the number of junk blocks sent to the
root is dwarfed by the total amount of multicast blocks exchanged
in the whole system.
4.4 Practical Issues
This section explains how to remove the three assumptions in the
previous section, and also discusses the effects of malicious peers.
Finite number of intervals. Assuming inﬁnite number of intervals
enabled us to avoid the well-known end-game effect. For example,
if the peers know that there are exactly 10 intervals, then no peer
will issue doins in the 10th interval since they will not be paid back.
In turn, no peer will have incentive to pay the doins issued in the 9th
interval and free up the occupied debt-links. Backward induction
will cause such argument to cascade back to all the intervals. This
end-game effect is quite fundamental and applies to all previous
proposals [9, 13, 14, 15, 18, 22] on incentivizing overlay multicast,
as well as to all kinds of repeated games such as the iterated pris-
oner’s dilemma.
On the other hand, this effect is widely considered [16] to be an
artifact of modeling instead of a good prediction of how rational
peers will behave. There are many well-known ways [16] to avoid
this effect. For example, it sufﬁces [9] just to assume that in each in-
terval, the peers expect (which may or may not correspond to what
actually happens) that with constant positive probability, there will
be at least one more interval. Alternatively, one can invoke the ǫ-
Nash concept and assume that the extra small utility obtained by
not issuing doins in the very last interval does not give sufﬁcient
incentive for the peers to deviate [16]. Since these are largely or-
thogonal to DCast, to focus on DCast, our following discussion will
simply continue considering inﬁnite number of rounds.
Message losses and other unexpected events. Properly setting
the parameters in DCast can easily take care of potential message
losses. Let p be an upper bound on the probability of messages be-
ing lost. (Note that we do not require independent message losses.)
Then the incentives in the previous section will continue to hold as
long as max(1, σ) < (1 − p)Dpay < (1 − p)2 Dlink < (1 −
p)3Droot, as explained below.
Let us ﬁrst consider the incentive for doin payment. Previously
without message losses, Dpay < Dlink provided incentive for a
peer to pay a doin instead of establishing a new link. Now with
message losses, it is possible that the payment is lost and thus the
link remains occupied after payment. Furthermore, the doin issuer
and the doin holder may now have an inconsistent view regarding
whether the payment has been made. All these, however, will not
disrupt the incentive as long as Dpay < (1 − p)Dlink. Since the
payment successfully reaches the doin issuer with probability at
least (1 − p), each payment frees up at least (1 − p) debt-links on
expectation. If the peer instead chooses to establish (1 − p) new
debt-links, it needs to send at least (1 − p)Dlink junk blocks. Note
that the cost may be even higher if messages get lost during debt-
link establishments. Since Dpay < (1 − p)Dlink, the peer will
prefer paying for doins (while knowing that the payment may get
lost) instead of establishing new debt-links.
Similar arguments apply to the incentives for issuing/relaying
doins (provided max(1, σ) < (1 − p)Dpay) and the disincentives
for attracting blocks from the root (provided Dlink< (1−p)Droot).
Finally, similar arguments also apply to other unexpected events
such as peer failures: As long as we set the parameters properly
based on an upper bound on the probability of such events happen-
ing, peer failures will not disrupt our incentives.
5721. B sends 2.5 junk blocks
A
B
A
2. A sends 1 block
    and 1 doin
B
A
1. B indicates which
    multicast blocks B needs
2. A records the
    creation of this
    debt−link
3. A updates the
    debt−link state
    from "unoccupied"
    to "occupied"
B establishes a debt−link from A to B
B pulls a multicast block and a doin from A
1. B indicates which
    multicast blocks B has
2. A indicates which of
    those blocks A needs
3. B sends 2 blocks
B
4. A updates the
    debt−link state
    from "occupied"
    to "unoccupied"
B pays for the doin from A
Figure 2: Illustrating the key components of the basic one-hop protocol in Section 5.1. Here we use Dlink= 2.5 and Dpay= 2, and
only consider a single debt-link.
Control message overhead. Control message overhead is rather
easy to accommodate: We again only need to set Dpay, Dlink, and
Droot properly so that the gaps among σ, Dpay, Dlink, and Droot
are still preserved after taking control overhead into account.
Effects of malicious peers. The safety-net guarantee does not pro-
tect the utility of a non-deviator if malicious peers bring down its
utility (e.g., by sending it junk bits). Besides such direct DoS at-
tacks on individual peers, overlay multicast by deﬁnition has a sin-
gle root and thus is fundamentally vulnerable to DoS attacks on the
root. Defending against these DoS attacks is beyond the scope of
this work. However, we still aim to ensure that the attacker cannot
signiﬁcantly amplify its attack capacity (i.e., its attack bandwidth
budget) by exploiting our DCast design, as compared to directly