title:Constant Time Updates in Hierarchical Heavy Hitters
author:Ran Ben-Basat and
Gil Einziger and
Roy Friedman and
Marcelo Caggiani Luizelli and
Erez Waisbard
Constant Time Updates in Hierarchical Heavy Hitters
Ran Ben Basat
Roy Friedman
Gil Einziger
Nokia Bell Labs
PI:EMAIL
Technion
PI:EMAIL
Technion
PI:EMAIL
Marcelo C. Luizelli
UFRGS
PI:EMAIL
ABSTRACT
Monitoring tasks, such as anomaly and DDoS detection, require
identifying frequent flow aggregates based on common IP prefixes.
These are known as hierarchical heavy hitters (HHH), where the
hierarchy is determined based on the type of prefixes of interest
in a given application. The per packet complexity of existing HHH
algorithms is proportional to the size of the hierarchy, imposing
significant overheads.
In this paper, we propose a randomized constant time algorithm
for HHH. We prove probabilistic precision bounds backed by an
empirical evaluation. Using four real Internet packet traces, we
demonstrate that our algorithm indeed obtains comparable accu-
racy and recall as previous works, while running up to 62 times
faster. Finally, we extended Open vSwitch (OVS) with our algorithm
and showed it is able to handle 13.8 million packets per second. In
contrast, incorporating previous works in OVS only obtained 2.5
times lower throughput.
CCS CONCEPTS
• Networks → Network measurement;
KEYWORDS
Streaming, Heavy Hitters, Measurement, Monitoring
ACM Reference format:
Ran Ben Basat, Gil Einziger, Roy Friedman, Marcelo C. Luizelli, and Erez
Waisbard. 2017. Constant Time Updates in Hierarchical Heavy Hitters. In
Proceedings of SIGCOMM ’17, Los Angeles, CA, USA, August 21-25, 2017,
14 pages.
https://doi.org/10.1145/3098822.3098832
1 INTRODUCTION
Network measurements are essential for a variety of network functi-
onalities such as traffic engineering, load balancing, quality of ser-
vice, caching, anomaly and intrusion detection [2, 3, 8, 16, 18, 22,
29, 45]. A major challenge in performing and maintaining network
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
SIGCOMM ’17, August 21-25, 2017, Los Angeles, CA, USA
© 2017 Association for Computing Machinery.
ACM ISBN 978-1-4503-4653-5/17/08...$15.00
https://doi.org/10.1145/3098822.3098832
Erez Waisbard
Nokia Bell Labs
PI:EMAIL
Figure 1: A high level overview of this work. Previous algo-
rithms’ update requires Ω(H) run time, while we perform at
most a single O(1) update.
measurements comes from rapid line rates and the large number of
active flows.
Previous works suggested identifying Heavy Hitter (HH) flows [44]
that account for a large portion of the traffic. Indeed, approximate
HH are used in many functionalities and can be captured quickly
and efficiently [5–7, 20, 42]. However, applications such as anom-
aly detection and Distributed Denial of Service (DDoS) attack de-
tection require more sophisticated measurements [41, 46]. In such
attacks, each device generates a small portion of the traffic but their
combined volume is overwhelming. HH measurement is therefore
insufficient as each individual device is not a heavy hitter.
Hierarchical Heavy Hitters (HHH) account aggregates of flows
that share certain IP prefixes. The structure of IP addresses implies
a prefix based hierarchy as defined more precisely below. In the
DDoS example, HHH can identify IP prefixes that are suddenly
responsible for a large portion of traffic and such an anomaly may
very well be a manifesting attack. Further, HHH can be collected
in one dimension, e.g., a single source IP prefix hierarchy, or in
multiple dimensions, e.g., a hierarchy based on both source and
destination IP prefixes.
Previous works [14, 35] suggested deterministic algorithms whose
update complexity is proportional to the hierarchy’s size. These
SIGCOMM ’17, August 21-25, 2017, Los Angeles, CA, USA
R. Ben Basat, G. Einziger, R. Friedman, M.C. Luizelli, and E. Waisbard
algorithms are currently too slow to cope with line speeds. For
example, a 100 Gbit link may deliver over 10 million packets per
second, but previous HHH algorithms cannot cope with this line
speed on existing hardware. The transition to IPv6 is expected to
increase hierarchies’ sizes and render existing approaches even slo-
wer.
Emerging networking trends such as Network Function Virtuali-
zation (NFV) enable virtual deployment of network functionalities.
These are run on top of commodity servers rather than on custom
made hardware, thereby improving the network’s flexibility and re-
ducing operation costs. These trends further motivate fast software
based measurement algorithms.
1.1 Contributions
First, we define a probabilistic relaxation of the HHH problem.
Second, we introduce Randomized HHH (a.k.a. RHHH), a novel
randomized algorithm that solves probabilistic HHH over single and
multi dimensional hierarchical domains. Third, we evaluate RHHH
on four different real Internet traces and demonstrate a speedup of
up to X62 while delivering similar accuracy and recall ratios. Fourth,
we integrate RHHH with Open vSwitch (OVS) and demonstrate a
capability of monitoring HHH at line speed, achieving a throughput
of up to 13.8M packets per second. Our algorithm also achieves
X2.5 better throughput than previous approaches. To the best of our
knowledge, our work is the first to perform OVS multi dimensional
HHH analysis in line speed.
Intuitively, our RHHH algorithm operates in the following way,
as illustrated in Figure 1: We maintain an instance of a heavy-hitters
detection algorithm for each level in the hierarchy, as is done in [35].
However, whenever a packet arrives, we randomly select only a
single level to update using its respective instance of heavy-hitters
rather than updating all levels (as was done in [35]). Since the update
time of each individual level is O(1), we obtain an O(1) worst case
update time. The main challenges that we address in this paper are
in formally analyzing the accuracy of this scheme and exploring
how well it works in practice with a concrete implementation.
The update time of previous approaches is O(H), where H is
the size of the hierarchy. An alternative idea could have been to
simply sample each packet with probability 1
, and feed the sam-
H
pled packets to previous solutions. However, such a solution only
provides an O(1) amortized running time. Bounding the worst case
behavior to O(1) is important when the counters are updated in-
side the data path. In such cases, performing an occasional very
long operation could both delay the corresponding “victim” packet,
and possibly cause buffers to overflow during the relevant long
processing. Even in off-path processing, such as in an NFV setting,
occasional very long processing creates an unbalanced workload,
challenging schedulers and resource allocation schemes.
Roadmap. The rest of this paper is organized as follows: We
survey related work on HHH in Section 2. We introduce the problem
and our probabilistic algorithm in Section 3. For presentational
reasons, we immediately move on to the performance evaluation
in Section 4 followed by describing the implementation in OVS
in Section 5. We then prove our algorithm and analyze its formal
guarantees in Section 6. Finally, we conclude with a discussion in
Section 7.
(cid:16) H 2
The work of [31] introduced a single dimension algorithm that
2 RELATED WORK
In one dimension, HHH were first defined by [12], which also
introduced the first streaming algorithm to approximate them. Ad-
ditionally, [28] offered a TCAM approximate HHH algorithm for
one dimension. The HHH problem was also extended to multiple
dimensions [13, 14, 23, 35, 46].
(cid:17)space, where the symbol H denotes the size of the
(cid:17)space and update time1. In [14], the
(cid:16) H 3/2
(cid:16) H log(N ϵ)
(cid:17) space and requires O (H log(N ϵ))
requires O
hierarchy and ϵ is the allowed relative estimation error for each
single flow’s frequency. Later, [43] introduced a two dimensions
algorithm that requires O
trie based Full Ancestry and Partial Ancestry algorithms were pro-
posed. These use O
time per update.
ϵ
ϵ
ϵ
ϵ
(cid:16)
(cid:17).
The seminal work of [35] introduced and evaluated a simple
multi dimensional HHH algorithm. Their algorithm uses a separate
copy of Space Saving [34] for each lattice node and upon packet
arrival, all lattice nodes are updated. Intuitively, the problem of
finding hierarchical heavy hitters can be reduced to solving multiple
non hierarchical heavy hitters problems, one for each possible query.
This algorithm provides strong error and space guarantees and its
update time does not depend on the stream length. Their algorithm
requires O
while for weighted inputs it is O
(cid:17) space and its update time for unitary inputs is O (H)
(cid:16) H
The update time of existing methods is too slow to cope with
modern line speeds and the problem escalates in NFV environments
that require efficient software implementations. This limitation
is both empirical and asymptotic as some settings require large
hierarchies.
H log 1
ϵ
Our paper describes a novel algorithm that solves a probabilistic
version of the hierarchical heavy hitters problem. We argue that in
practice, our solution’s quality is similar to previously suggested
deterministic approaches while the runtime is dramatically impro-
ved. Formally, we improve the update time to O(1), but require a
minimal number of packets to provide accuracy guarantees. We
argue that this trade off is attractive for many modern networks
that route a continuously increasing number of packets.
3 RANDOMIZED HHH (RHHH)
We start with an intuitive introductory to the field as well as pre-
liminary definitions and notations. Table 2 summarizes notations
used in this work.
3.1 Basic terminology
We consider IP addresses to form a hierarchical domain with either
bit or byte size granularity. Fully specified IP addresses are the lowest
level of the hierarchy and can be generalized. We use U to denote
the domain of fully specified items. For example, 181.7.20.6 is a
fully specified IP address and 181.7.20.∗ generalizes it by a single
byte. Similarly, 181.7.∗ generalizes it by two bytes and formally, a
fully specified IP address is generalized by any of its prefixes. The
parent of an item is the longest prefix that generalizes it.
1Notice that in two dimensions, H is a square of its counter-part in one dimension.
Constant Time Updates in Hierarchical Heavy Hitters
SIGCOMM ’17, August 21-25, 2017, Los Angeles, CA, USA
Src/Dest
*
s1.*
s1.s2.*
s1.s2.s3.*
s1.s2.s3.s4
*
(*,*)
(s1.*,*)
(s1.s2.*,*)
(s1.s2.s3.*,*)
(s1.s2.s3.s4,*)
d1.*
(*,d1.*)
(s1.*,d1.*)
(s1.s2.*,d1.*)
(s1.s2.s3.*,d1.*)
(s1.s2.s3.s4,d1.*)
d1.d2.*
(*,d1.d2.*)
(s1.*,d1.d2.*)
(s1.s2.*,d1.d2.*)
(s1.s2.s3.*,d1.d2.*)
(s1.s2.s3.s4,d1.d2.*)
d1.d2.d3.*
(*,d1.d2.d3.*)
(s1.*,d1.d2.d3.*)
(s1.s2.*,d1.d2.d3.*)
(s1.s2.s3.*,d1.d2.d3.*)
(s1.s2.s3.s4,d1.d2.d3.*)
d1.d2.d3.d4
(*,d1.d2.d3.d4)
(s1.*,d1.d2.d3.d4)
(s1.s2.*,d1.d2.d3.d4)
(s1.s2.s3.*,d1.d2.d3.d4)
(s1.s2.s3.s4,d1.d2.d3.d4)
Table 1: An example of the lattice induced by a two dimensional source/destination byte hierarchy. The top left corner (*,*) is
fully general while the bottom right (s1.s2,s3.s4,d1.d2.d3.d4) is fully specified. The parents of each node are directly above it
and directly to the left.
In two dimensions, we consider a tuple containing source and
destination IP addresses. A fully specified item is fully specified in
both dimensions. For example, (⟨181.7.20.6⟩ → ⟨208.67.222.222⟩) is
fully specified. In two dimensional hierarchies, each item has two pa-
rents, e.g., (⟨181.7.20.∗⟩ → ⟨208.67.222.222⟩) and (⟨181.7.20.6⟩ →
⟨208.67.222.∗⟩) are both parents to
(⟨181.7.20.6⟩ → ⟨208.67.222.222⟩).
Definition 3.1 (Generalization). For two prefixes p, q, we denote
p ≼ q if in any dimension it is either a prefix of q or is equal to q.
We also denote the set of elements that are generalized by p with
Hp (cid:44) {e ∈ U | e ≼ p}, and those generalized by a set of prefixes P
by HP (cid:44) ∪p∈P Hp. If p ≼ q and p (cid:44) q, we denote p ≺ q.
In a single dimension, the generalization relation defines a vector
going from fully generalized to fully specified. In two dimensions,
the relation defines a lattice where each item has two parents. A
byte granularity two dimensional lattice is illustrated in Table 1.
In the table, each lattice node is generalized by all nodes that are
upper or more to the left. The most generalized node (∗,∗) is called
fully general and the most specified node (s1.s2.s3.s4, d1.d2.d3.d4)
is called fully specified. We denote H the hierarchy’s size as the
number of nodes in the lattice. For example, in IPv4, byte level one
dimensional hierarchies imply H = 5 as each IP address is divided
into four bytes and we also allow querying ∗.
Definition 3.2. Given a prefix p and a set of prefixes P, we define
G(p|P) as the set of prefixes:
(cid:8)h : h ∈ P, h ≺ p, (cid:64) h
′ ≺ p(cid:9) .
′ ∈ P s.t . h ≺ h
Intuitively, G(p|P) are the prefixes in P that are most closely
generalized by p. E.g., let p = and the set
P = {, }, then G(p|P) only con-
tains .
We consider a stream S, where at each step a packet of an item
e arrives. Packets belong to a hierarchical domain of size H, and
can be generalized by multiple prefixes as explained above. Given
a fully specified item e, fe is the number of occurrences e has in S.
Definition 3.3 extends this notion to prefixes.
is:
Definition 3.3. (Frequency) Given a prefix p, the frequency of p
fp (cid:44)
e∈Hp
fe .
Our implementation utilizes Space Saving [34], a popular (non
hierarchical) heavy hitters algorithm, but other algorithms can
also be used. Specifically, we can use any counter algorithm that
satisfies Definition 3.4 below and can also find heavy hitters, such
as [17, 30, 33]. We use Space Saving because it is believed to have
an empirical edge over other algorithms [10, 11, 32].
Symbol Meaning
S
N
H
V
Si
x
Sx
S
U
Stream
Current number of packets (in all flows)
Size of Hierarchy
Performance parameter, V ≥ H
Variable for the i’th appearance of a prefix x.
Sampled prefixes with id x.
Sampled prefixes from all ids.
Domain of fully specified items.
ϵ, ϵs , ϵa Overall, sample, algorithm’s error guarantee.