B)马上结束
A
---
## Page 250
参与者会将操作委托给Client参与者：
程会以 wait等待。如果RealData 参与者已经建立好了的话，就不会等待了。Future
而实际上Client参与者对Future参与者操作时，若RealData参与者还没建立好，线
使用的参与者。
Future（期货）参易者
序中，RealData 参与者是 RealData类。
ReaiData（实际数据）参与者
VirtualData 参与者是Data接口。
Virtua(Data（度拟畅数据）参易者
参与者是Host类，
Client 参与者（以 ViruriIData参与者的形式）返回Future参与者。范例程序中，Host
Future 参与者相对于Client 参与者而言，可以进行VirtualData 参与者的行为。
Future 是 Host 参与者传给Client 参与者，当作是 RealData 参与者的“提货单"
RealData 参与者用来表示实际的数据。建立这个对象需要花一些时间。范例程
VirtualData 是用来统一代表 Future 参与者和 RealData 参与者。范例程序中，
范例程序中，Future 参与者是 FutureData类。Future Pattere 的类图如图 9-4 所示。
新的线程建立山i RealIData 参与者后，会对Future 参与者设置 RealData 参与者。
client
Requests now 
图 9-4 Future Patterm 的类图
Uses in future 
Creates 
setRealData l guarded
method3[ guarded 1
method2{
methodl ( guarded
Tealdata
popienb)
Putur+
Creates
Future---
methcd?
tethodl
一先给您这张提货单
ne thod3
methodl
---
## Page 251
供了非摘置的I/O （nonbiocking I/O}。使用这些技术，可以写出不会在 I/O 时停顿的程序。
Java 的方法调用本身仍然是同步的。所以我们说是“仿真出”异步的方法调用。
类似异步的（asynchronous）方法调用。当然，就算使用Thread-Per-Message Pattern，
只能一直前进到方法执行完为止。
异步方法调用的“返回值”
序，实验对throughput有多少影响。
只是在等待亡作结束而已。对CPU而言，这时是“空闲时间”。若能将这些空闲时
访问的时候，并不是所有工作都是由CPU进行的。当硬盘读写数据的时候，CPU
该是不会提高throughput。因为就算是由多个线程分担运算，最后还是由一个CPU
理时间的是哪个线程”。
然说是多线程，可是处理所花的总时间还不是没有变短。”
线程或是多线程下执行，等到所有结果都运算完，花的时间还不是一样。所以，虽
处理的结果。
能够提升 throughput 吗
236
但是，
扩展思考方向的提示
注1：但有可能因为线程数的提高，使OS 分配给Java 执行环境整体的分割时间变长，要如
在单CPU上运行的Java 执行环境上，把单纯的·连串运算以多线程处理，应
只使用 Thread-Per-Message Pattern，并不能得到处理结果（也就是非同步方法
Java 提供的方法调用，都是同步的（synchronous）。也就是说，调用方法之后，
可是，可能有些读者会抱有疑问。“我可以接受程序的响应性能够提高这一点。
本章末的练习问题9-3，就要建立一支使用多线程从多个网页”获取数据的程
的确，程序写成多线程后，处理总时间并没有理由缩短。但问题在于“负拟处
Thread-Per-Message Patterm（第7章）中，我们无法得到处理的结果。可是，
关于这个疑问，可说是一半对--半错的。
，hroughput 不是没改变吗？为了考虑在最后能收到所有的结果，那无论在单
实际上是困难的。所以在这里写得比较概略一些。
---
## Page 252
当的返回值”。
变形——会改变的Future 参与者
以后，再调用一次 getContent 方法试试看。
就马上退出”。既然RealData 的实例还没做好，就先回去，稍微做一些自己的工作
要的信息。
没建立好，就使用Guarded Suspension Pattem（第3章），“等到建立好为止”。因为
变形一—不让人等待的Future参与者
回值”的情况。关于这点，我们留到本章末练习问题9-4研究。
们把多线程当作道具使用，就是在做这些事。
独自的操作（启动、执行、准备返回值、使用返回值），尝试分配给不同的线程。我
在不同的线程上处理。
范例程序中，建立RealData的操作就是“准备方法的返回值"，而调用getContent
分离“准备返回值”与“使用返回值”
做到异步方法调用的“返回值”。
调用的“返回值")。而使用 Future Patterm时，通过“稍后在设置真正的处理结果”，
(execution).
可是，getContent 方法事实上也可能设计成异步的。但不是在 getContent 方法
将调用方法的－-连中动作，像慢动作播放般逐一拆解。接着将分解出来的每个
通常我们只会对Future 参与者设置…次“返回值”。也就是说，Future 参与者是
范例程序中，当调用 FutureData 的 getContent 方法时，如果 RealData 的实例述
说到这里，关于方法调用，还有一种相关情况，就是“抛出异常时不会得到返
这是 Future Pattern 的一种变形。
在Worker Thread Pattern（第8章）中，我们讨论过“invocation与j execution 的
例如，假设我们现在要从网络获取图片。一开始要获取图片的长宽尺寸，接下
Future--
一先给您这张提货单
钟9章
237
---
## Page 253
参与者中必须加入一些程序代码，确保接收返回值时的安全性。
法。不过这样做的话，Client 参与者也必须考虑多线程了。具体来说，就是Client
所谓回调，是指处理完毕后，出 Host 参与者所启动的线程去调用 Cliemt 参与者的方
回调与 Future Pattern
补充说明：Open CallPattern
Future Pattern.
所以我们可以将现有的类套用 Future Pattern。章末的练习间题 9-3，就要练习套用
部分，都在Host 与FutureData 类内解决，对RealData 类则没有影响。因为这一点，
程的。
入“多线程相关的处理”呢？
章）
程序的响应性会下降。所以在这章望，我们通过 Thread-Per-Message Patterm（第7
程，是--个普通的类。RealData 会进行繁重的L作。如果 Host 类直接使用 RealData,
谁需要考虑到多线程[复用性]
化的Future 参与者。
来要获取概略的模糊图片，最后再取清晰的阁片。这种时候可能就适合使用会变
是当Host具有状态时，只对状态更新的部分加以防御的Pattern。
也可以说是 Open Call Patterm（参考附录 E[Lea]）的特殊形式。Open Call Pattem
问，也不会破坏安全性。可说是Immutable Pattern（第2章）的特殊形式。这
是因为Host类没有字段（也就是根本没有状态），所以就算同时被多条线程访
当我们想要在处理结束后，得到返回值，还可以使用回调（callback）的方式。
那么，请重新看－次 RealData 类，这个类并没有考虑多线程。与多线程有关的
那么 FutureData 类呢？FutureData 当然有考虑多线程。在 setRealData 方法与
关于“Host 类有考虑到多线程”这--点，还有一些需要说明的地方。Host
Host 类，使用 Thread-Per-Message Patterm，启动新的线程，所以是有考虑多线
的request方法虽然不是 synchronized，但是可以安全地由多条线程调用。这
Data接口，没有考虑多线程。
与FuturePattern，提高程序的响应性。
接下米，我们回过头来看范例程序的 RealData 类。RealData 并没有考虑到多线
这也是一种 Future Pattem 的变形。
---
## Page 254
高程序的响应性。不过，如果我们需要得到别的线程所处理的结果时，就行不通了。
有必要防止对 Future 参与者重复设置 RealData 参与者，可使月 Balking Pattern。
Balking Pattern(第 4 章）
Pattern 斯以防卫。防卫条件是“ReadData 参与者已经建立好了"。
Guarded Suspension Pattern （第 3 章）
与者获取 RealData 参与者时，才等待 RealData 参与者的完成。
参与者作为提货单。而由其他线程建立好 RealData 参与者，直到需要通过 Future 参
参与者作为代理者，尽可能代理·些工作。直到非需要RealSubject 参与者不可的时
Proxy Pattern （参考附录 E[GoFIIYuki01])
Future参与者去访问实际的成果。
Builder Pattern（参考附录 E [GoF][IYuki01])
候，再建立RealSubjcct 参与者（Virtual Proxy Pattern 的情况）。
们需要得到处理结果时，就要用Future Patterm：
Thread-Per-Message Pattern(第 7章)
重点回顾
相关Pattern
Thread-Per-Message Pattem（第7章）是将花费时间的工作交给别的线程，以提
Future 参与者是“只能指定一次值的变量"，可视为latcin（门门）的一-种。若
通过 Future 参与者访问 RealData参与者的方法，都使用了 Guarded Suspension
Future Patterm 忄i，因为建立 RealData 参与者需要花一些时间，所以加入Future
这章我们学习了Future Pattern。
Proxy Pattem中，因为建立 RealSubject 参与者需要花一些时间，所以加入 Proxy
Thread-Pcr-Message Pattem 是将花时间的工作交给新线程来作的 Patterm。当我
Future Pattern 会在开始组合的时刻，先建立一个 Future 参与者，之后再通过
BuilderPatterm 会在事后去获取组合好的成果。
Future-
一先给您这张提货单
9#
---
## Page 255
下面是一支指定URL以从网络上获取文件的程序。请将这支程序改成使用多线
范例程序运行时，有儿条线程在运行呢？（主线程除外）每条线程的工作各是
[请就您对范例程序的了解，阅读下列语句，正确的请回答○，不正确的请回答×。
240
者可通过Future 参与者得到处理的结果。
开始执行，却无法在第一时刻得知结果。
四。直到其他线程处理完以后，才将真正的结果设置给Future 参与者。Client 参!j
（API）的Future 参与者。接着，在开始处理时，先把 Future 参与者当作返问值返
练习问题
这种时候就要使用 Future Paterm。首先我们建立－个与处理结果具有相同接口
9-7）与Content接口（List 9-8）对包外公开。而实际上用来获取文件的则是
获取文件的部分，则放在content 这个包（package）里，其中Retriever类（List
测试用的 Main类如l List 9-6所示。
程的版本。
问题9-3（套用Future Pattern）
接F来，我们定义了可以获取byte数组的Content类。
Content content = Retriever.retriever ("http://www.yahoo.com/");
什么？
问题9-2（每条线程的工作）
问题9-1（基础知识的确认）
解答请见附录A
那么，就进入练习问题吧。
使目这个Pattern，可使响应性不降低，
若同步执行需要花一些时间的操作，会使程序响应性降低。但是，如果异步地
byte[] bytes = content.getBytes();
首先，我们建立出可以获取Yahoo!网页的Retriever 类。
（5）如果 request 方法被从数个线程调用出来的话，tequest 方法必须设为
（4）执行RealData类的getContent 方法的，是主线程。
（3）会调用 SetRealData 方法的是主线程。
（2）request 方法的返回值类型虽是Data接口，实际的返回值是FutureData 的
（1）调用出 request方法后，一个新的线程就会启动。
synchronized.
实例。
，并能得到想要的处理结果。
---
## Page 256
import java.io.IoException;
import content.Content;
import content.Retriever;
端口号Main
注意：
注意：一般来说，要开发公开包时，建议使用颠倒的网上域名作为包名称，
SyncContentlmpl类请保持原封不动。
写成可以使用AsyncContentImpl类的版本。Main 类、Content 接口、
线程获取文件。具体来说，就是建立出 AsyncContentImpl类，将 Retriever 类正
类以单线程获取文件。请以这支程序作为参考，修改这个包，使程序可使用多
那么，接下来就是问题了，现在的 Retriever类（List 9-7）使用 SyncContentrmpl
类图如图9-5所示，
SyncContentlmpl 类
List 9-6
saverorile
main
1.3、JDK 1.4的java 命令，可以下面方式设置之：
用企业、学校内部的局域网络时，可能需要设置HTTP代理服务器。JDK
若您的计算机没有连接到因特网上，这支程序无法正常运行。另外，使
而使用content作为包名称，
com.hyuki为首的包名称）。不过，这里为求简单化，就不遵照这个规范
确保在世界上是惟一的（例如笔者的网域是hyuki.com，就使用以
Main
Main 类（Main.java)
执行范例则如图9-6所示。
（List 9-9）。
图9-5
Retieves content 
问题9-3的类图（单线程版）
4 sasn!
retrieve
conteat
Retriover
Future-
Creates 
SyncContent I#p1
getBytes
contentbytes
getBytes
(>
3001001
一先给您这张提货单
模6费
以
---
## Page 257
242
public class Retriever ↑
package content;
content} 
public class Main 
import java.io.FileoutputStream;
2-6 1517
": Saving to " + filename};
private 
//将 content 的内容输出到名为 filename 的文件里
public static void mainiString args[l) ↑
} catch (IoException e) {
byte[] bytes = content.getByt.es();
:(u oasu, + (ateis - pue) + u=aura pasdeta)lutautid ano wensg
long end = System.currentTimeMillis();
saveTcFile("hyuki.html", content3);
saveToFile("google.html", content2);
SaveToFile("yahoo.html", contentl);
Content content3 = Retriever.retrieve("http://www.hyuki.com/") ;
Content content2 = Retriever.retrieve ("http: / /www.google.com/") ;
Content. contentl = Retriever.retrieve ("http: / /www.yahoo.com/") ;
long start = System.currentTimeMillis();
for （int i = O: i < bytes.length; i++) {
é.printstackTrace();
FileoutputStream out = new FileoutputStream (filename) ;
out.cl();
Retriever 类(Retriever.java)
 static void saveToFile(String 
out.writefbytes[i]);
filename,
 Content
---
## Page 258
Getting " + urlstr);
class SyncContentImpl implements Content {
package content;
import 
import 
public interface Content 
package content;
mport 
List 9-9
List 9-8
public SyncContentImpl(String urlstr) (
private byte[] contentbytes;
public abstract byte[l getBytesil;
// System.out.println("Enlarging buffer to " + buffer.length) ;
buffer = largerbuffer;
System.arraycopy (buffer, 0, largerbuffer,
byte[l largerbuffer = new byte[buffer.length * 2]: 
pyte[} buffer =
DataInputStream in = new DataInputStream (url.openstream()):
URL url = new URL(uristr);
public static Content retrieveiString urlstr) ↑
int index = 0;
 try { 
System.out.println(rhread.currentThreadl) .getName () + ":
 java,net.URL;
return new SyncContentImpl(urlstr):
java.io.EoFException;
java.io.DataInputStream;
F
[ SyncContentlmpl 类(SyncContentimp,.java)
Content 接口 (Retriever.java)
while (true)
if (buffer.length <= index) {
int c = in.readunsignedByte ();
new byte[1];
Future
0,index);
一先给您这张提货单
2
---
## Page 259
Java终线程设调模司
[下面程序故意对ReadData类（List 9-5）的构造器的 count 参数传入负值。
方法与 gelContent方法里 try...catch，都无法捕捉到这个异常。
常；会从 request 方法里启动的新线程中抛出。也就是说,无论我们怎么在 request
假如在建立 RealData 实例时，发生了NegativeAtraySizeException 异常。这个异
9-7）。因为负数长度的char[并无法分配。
new RealData(-l, 'N')
问题9-4（在FuturePattern处理异常）
from " + urlstr);
public byte[l getBytes() {
Elapsed time = 1903msec.
main: Saving to hyuki.html
main: Saving to google.html
main: Saving to yahoo.html
main: Getting http://www.hyuki.com/
main: Getting http://www.google.com/
main: Getting http://www.yahoo.com/
 return contentbytes;
catch (Exception e) {
e.printStackTrace();
System.arraycopy(buffer, C, contentbytes, O, index);
contentbytes
finally {
1catch (EoFException e){
in.clesetl;
 // System.out.print ("Getting " + index + " bytes 
buffer[index++] = (byte)c;
图9-6执行范例