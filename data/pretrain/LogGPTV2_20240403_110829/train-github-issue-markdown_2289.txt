  * I have searched the issues of this repository and believe that this is not a duplicate.
  * I have checked the FAQ of this repository and believe that this is not a duplicate.
### Environment
  * Dubbo version: 2.7.4.1
  * Operating System version: Linux 4.15.0-122-generic #124~16.04.1-Ubuntu SMP Thu Oct 15 16:08:36 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux
  * Java version: 1.8.0_201
### Steps to reproduce this issue
  1. Provide a method in service-side and return a large data( for example 4M).
  2. Create a fixed threadpool(fox example,with 100 threads), and invoke the remote method in a loop.
  3. After the loop finished, the memory about 400M was always kept by `InternalThreadLocalMap`.
### Expected Result
After all finished, memory kept by `InternalThreadLocalMap` will be revoked by
GC.
### Actual Result
The memory about 400M was always kept by `InternalThreadLocalMap`.
### More
The demo can reproduce this issue.  
Other information I can provided:  
The leak memory was created by `FutureContext#futureTL`, and data in
threadlocal can be traced by `InternalThreadLocal#VARIABLES_TO_REMOVE_INDEX`,
invoke method `InternalThreadLocal#removeAll` in consumer filter can free the
memory, but I can't find any usages of this method. Now I add
`InternalThreadLocal#removeAll` in an extended filter to solve this problem in
my program.  
If this is configuration error, thanks for your correction.