launch
Input pool entropy counter at Zygote
terms of its size and complexity. LPRNG depends on exter-
nal sources for randomness: utsname, ktime, and various de-
vice events, which are transferred by input_pool. However,
an Android device has no user inputs such as a mouse or a
keyboard, and has a few interrupts until Zygote is launched
at the system boot. It is therefore possible that input_pool
cannot transfer its entropy to /dev/urandom because of its
low entropy_counter at boot time. If this actually occurs,
and the complexities of the other entropy sources are low, we
can predict the internal states of APRNG. In this section, we
verify that these two hypotheses are true and demonstrate
their eﬀects on the vulnerability of the APRNG.
In the analysis, we conducted various experiments on an
Android test board with the following conﬁgurations:
(cid:15) Chip set: Exynos 4210
(cid:15) CPU: Dual-core ARM Cortex-A9
(cid:15) Memory: 1G Bytes
(cid:15) OS: Android ICS 4.0.4 (kernel 3.0.15)
We used adb tool [2] and trace32 [9] to analyze the internal
information of the board and applications.
4.1 Boot-time Entropy Hole of LPRNG
LPRNG is designed to be supplied with external entropy
when system events such as a disk I/O operation, user input,
and IRQ occur by calling the following functions: add_disk_
randomness(), add_input_randomness(), and add_interrupt_
randomness(). However, we found that add_interrupt_
randomness() is not used in an Android device, which was
already reported for other Linux platforms [11, 24]. The
add_input_randomness() is rarely used, and is not used
at boot time in an Android device. Thus, only disk I/O
events are entropy sources for LPRNG before the Zygote
launch. These events do not occur deterministically and are
dependent on the devices, OS versions, and communication
providers. We therefore need to conduct an experiment to
determine how much entropy is fed into LPRNG from the
disk events.
We measured the entropy_counter of input_pool when
Zygote initialized OpenSSL. Figure 6 shows the frequency
versus entropy_counter of input_pool for 100 test cases.
The ﬁgure shows that the entropy_counter of the input_
6644.2.4 UID and PID
The size of the UID is 4 bytes in the source code, but is
set to 0 in Android. The PID is assigned sequentially ac-
cording to the order that the application is running. The
PID has 15 bits of complexity in the source code. However,
Android’s initial processes and the manufacturer’s built-in
applications are executed in the order speciﬁed. Thus, the
Zygote PID is less than 3000 and is nearly ﬁxed in the the
same model devices. The PIDs of built-in applications, such
as Web browsers, e-mail, and YouTube, do not signiﬁcantly
change. For example, the PID of the Web browser on our
phone is on 2900(cid:24)2950. We can therefore estimate the com-
plexity of the Zygote PID on our phone as 0, and that of the
application PID as 6.
4.2.5 Time
The Time refers to gmt_unix_time, the unit of which is in
seconds. Since the application’s Time is almost equal to the
time shown in the ClientHello packet, we can predict it
exactly. The Zygote module is launched upon system boot,
and thus the Zygote Time can be approximated as the sys-
tem boot time. Phones are usually rebooted more than once
per week for battery changes or other reasons. Therefore,
we estimate the complexity of the Zygote Time of a general
phone as 20 bits. However, an attacker may obtain the ap-
proximate boot time of a targeted device through various
methods. Possible situations and scenarios are described in
the next subsection.
4.2.6 Buffer
The Buffer is the existing value of the RAM where the
output of RAND_byte() will be stored. Its complexity there-
fore depends on how the buﬀer is deﬁned and initialized in
the function that calls RAND_byte(). The buﬀer used to gen-
erate the ClientHello nonce is initialized to all zeros, and
we can therefore regard it as a ﬁxed constant. However, this
is not true for other cases such as PMS generation.
4.3 Vulnerability and Attack Strategy
So far, we have investigated the complexity of entropy
sources for APRNG until the ClientHello nonce is gener-
ated for org.webkit based applications. Table 2 shows a
summary of our analysis. In the second and third columns,
we describe the bit complexity of the entropy sources in gen-
eral devices and a ﬁxed device, respectively. The bit com-
plexities of our phone are given in the last column, where
t is the bit complexity for estimating the boot time. As
a conclusion, if we ﬁx a device and acquire its information
beforehand, they can be restored exactly except for ktime,
application’s PID, and Zygote Time.
The complexity of three unpredictable elements will be
diﬀerent according to chip speed, OS version, application,
and system boot time. We can expect their sum to 50 (cid:24) 55
bits on a ﬁxed device. However, Zygote Time is close to
If we can ﬁnd this value through 2t
a system boot time.
trials, the states of APRNG can be recovered with O(235+t)
computations. If t is 0, it can be accomplished in a few hours
using a single PC, as demonstrated in the next section. We
cannot say that it is impossible even if in the worst case
where t is 20. It is well known that a brute force attack on
DES with a key size of 56 bits can be accomplished within
a day [4]. Therefore, we can state at a minimum that the
APRNGs of applications based org.webkit are vulnerable.
Table 2: Entropy of APRNG (bit)
entropy
sources
utsname
ktime
CBN
UID
Zygote PID
Zygote Time
Application PID
Application Time
Buffer
Total
general
devices
43
31
8
0
12
20
15
0
0
129
a ﬁxed
device
25 (cid:24) 28
0
0
0
0
20
5 (cid:24) 7
0
0
50 (cid:24) 55
our
phone
0
26
0
0
0
t
6
0
0
32 + t
However, the problem does not end here. As we explained in
Section 3, every SSL application starts with the same initial
states of APRNG, which are updated by Zygote. Thus, if
an attacker can restore the APRNG states of any speciﬁc
application, he can obtain the states of all applications even
those that are implemented by other packages and will run
after the attack.
Now, we present a strategy for attacking APRNG of a
device. An attacker ﬁxes a target and obtains its information
by conducting experiments on another device of the same
model and OS version as the target.
If possible, the attacker obtains the time when the device
was last booted up. It will reduce the attack time. Possible
situations and scenarios can be considered are as follows: A
man engaged in air travel is more likely to reboot his phone
when arriving. There are many companies and organizations
where the visitors need to leave their phone at a help desk
according to the security policy. If the phone is not turned
oﬀ, a staﬀ member at the desk who wants to attack the
phone can reboot it. In these cases, the attacker can guess
the boot time of the phone.
Then, he collects ClientHello nonce packets of an org.
webkit application such as the Web browser generated on
the target. Finally, he computes a ClientHello nonce with
unknown external sources as variables. By exhaustively
searching for the variables within the ranges according to
the the preacquired information, he compares the output
with the real ClientHello nonce captured in the packet. If
he ﬁnds variables with which two values are matched, he can
restore the APRNG’s initial states of all applications.
This result shows that the APRNG is vulnerable from a
cryptographic perspective at least. More practical implica-
tions of this problem will be discussed in Section 6.
5. EXPERIMENT ON A PHONE
In this section, we present the results of experiments on
restoring the initial state of APRNG in a smartphone using
the attack strategy described in the previous section. We
used two phones of the same model, one as a target and the
other as a simulator, to obtain the information needed for
an attack on the target.
5.1 Pre-acquisition of the Device Information
To obtain the information needed for our attack, we used
the kernel log of the simulator phone by modifying the source
665Figure 7: A captured SSL packet on the experiment
Table 3: Searching Range of Variables in the Attack
variable
utsname
ktime
CBN
Zygote PID
Zygote Time
Application PID
Application Time
searching range
same to that of Section 5.1
780(cid:24)830 ms, 1230(cid:24)1240 ms
210
1845
0x511b7cce(cid:24)0x511b7ccf
2900(cid:24)2950
0x511b7dfa
Figure 8: ktimes on the experiment
Table 4: Values found on the experiment
variable
ktime (ns)
Zygote Time
Application PID
MD state
of SSL CTX
value
790212920
0x511b7cce
2939
c4 82 04 51 c6 e7 9a fe 3e 4a
85 f7 b6 e5 4f f7 67 17 b7 e9
code. We rebooted the phone 100 times and checked the
variables.
The OS version used was Android 4.0.4 Ice Cream Sand-
wich. The utsname was same as that presented in Section
4.2, except the release is ‘3.0.15-1042229’ and the version
is ‘#3 SMP PREEMPT Fri Aug 17 20:49:17 KST 2012’. We
could know the Zygote PID through the Android adb shell
command, which was 1845. We could also see that, in most
cases, the initialization of the LPRNG occurred at 770(cid:24)830
or 1298(cid:24)1230 ms after the system boot. This is the reason
that we estimated the entropy of ktime as 26 bits in Section
4.2. Finally, we found that CBN was 210 for most cases.
5.2 Restoring the APRNG States
We rebooted the target phone and used the boot time to
predict the Zygote Time, that is, we set t to 1. We then
activated HTTPS using a Web browser a few minutes af-
ter system started. At the same time, we captured the
ClientHello nonce of the SSL packets using Wireshark. We
set the application Time equal to the packet time.
We constructed an SW program to execute the attack
procedure described in Section 4.3. The variables are ﬁxed
or searched for within the range shown in Table 3, which are
set by the acquired information. We executed this program
on a PC conﬁgured with a Intel Core 3.60 GHz i7 CPU
with four cores. Since it can be operated with eight threads,
we parallelized the program by dividing the search range of
ktime into eight parts.
As a result, we succeeded in ﬁnding unﬁxed variables. The
captured ClientHello packet is shown in Figure 7, and the
found values and restored MD_state are given in Table 4. We
repeated the experiments 100 times on the same phone, and
successfully found the unknowns 74 times. Figure 8 shows
the distribution of ktimes of these cases.
6. EFFECT OF THE VULNERABILITY
As the main contribution of this paper, we showed that the
initial state of APRNG can be restored practically with high