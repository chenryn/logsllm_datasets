# Automated Analysis of Security-Critical JavaScript APIs

**Authors:**
- Ankur Taly, Stanford University
- Ulfar Erlingsson, Google Inc.
- John C. Mitchell, Stanford University
- Mark S. Miller, Google Inc.
- Jasvir Nagra, Google Inc.

**Conference:**
2011 IEEE Symposium on Security and Privacy

## Abstract
JavaScript is widely used to provide client-side functionality in web applications. To offer services such as maps and advertisements, web applications often incorporate untrusted third-party JavaScript code. The trusted portion of each application may expose an API to this untrusted code, interposing a reference monitor that mediates access to security-critical resources. However, a JavaScript reference monitor can only be effective if it cannot be circumvented through programming tricks or language idiosyncrasies. To verify complete mediation of critical resources, we define the semantics of a restricted version of JavaScript, devised by the ECMA Standards committee for isolation purposes, and develop and test an automated tool that can soundly establish that a given API cannot be circumvented or subverted. Our tool reveals a previously-undiscovered vulnerability in the widely-examined Yahoo! ADsafe filter and verifies confinement of the repaired filter and other examples from the Object-Capability literature.

**Keywords:** Language-Based Security, Points-to Analysis, APIs, JavaScript

## 1. Introduction
JavaScript is extensively used to provide client-side functionality in web applications. Many contemporary websites incorporate untrusted third-party JavaScript code into their pages to provide advertisements, Google Maps, gadgets, and applications on social networking sites. Since JavaScript code can manipulate the Document Object Model (DOM), steal cookies, and navigate the page, untrusted third-party JavaScript code poses a significant security threat to the hosting page.

While third-party code can be isolated using iFrames, this approach reduces performance and restricts interaction between the hosting page and third-party code. Instead, Facebook and other sites rely on language-based techniques to embed untrusted applications directly into the hosting page.

A common approach combines a language-based sandbox to restrict the power of untrusted JavaScript with trusted code that exports an API to untrusted code. In the API+Sandbox approach, used in Facebook FBJS, Yahoo! ADsafe, and Google Caja, the trusted code must encapsulate all security-critical resources behind an API that provides JavaScript methods to safely access these resources.

Although there has been significant progress toward provably-safe sandboxes for restricting access to the global object and other critical objects, little research has focused on rigorously analyzing API confinement. In this paper, we study and provide precise semantics for a subset of JavaScript that supports confinement, present an automated tool that provably verifies confinement, and use this tool to analyze code designed to provide confinement.

We consider a variant of a recently-standardized version of JavaScript that supports static scoping and hiding of nested local variables. Using this language, our static analysis method examines trusted code used in a hosting page, such as security-focused wrapping libraries, and determines whether it is secure against arbitrary untrusted code in the same language. Since trusted code enforcing a reference monitor is written by security-conscious programmers, we believe the authors of trusted code may be willing to structure their code to improve the precision of the analysis. Under these conditions, our automated method is sufficient to verify that no interleaved sequence of API method calls returns a direct reference to a security-critical object.

Given an implementation of an API reference monitor and a set of security-critical objects, our automated tool ENCAP soundly verifies API confinement. We used this tool to analyze the Yahoo! ADsafe library under the threat model defined in this paper and found a previously undetected security oversight that could be exploited to leak access to the document object (and hence the entire DOM tree). This demonstrates the value of our analysis, as ADsafe is a mature security filter that has been subjected to several years of scrutiny and even automated analysis. After repairing the vulnerability, our tool is sufficient to prove confinement of the resulting library under our threat model.

### A. API+Sandbox Examples
We illustrate the API+Sandbox approach using a simple example: a hosting page intends to provide a write-only log facility to untrusted code. It enforces this intent by creating an array to log data and an API object which has a single method `push` that only allows data to be pushed onto the array. The API object is then provided to untrusted code by placing it in a global variable `api`.

```javascript
var priv = criticalLogArray;
var api = { push: function(x) { priv.push(x); } };
```

Untrusted code is restricted so that the only global variable accessible to it is `api`. A necessary requirement in establishing the correctness of this mechanism is to verify that the API object does not leak a direct reference to `criticalLogArray`, as that would allow reading data from the array.

While the example above may suggest that the API confinement problem is easily solved, the addition of the following `store` method to the API may suggest otherwise:

```javascript
api.store = function(i, x) { priv[i] = x; }
```

Although a cursory reading shows that neither API method returns a reference to the array, the API fails to confine the array. A client may gain direct access to the `criticalLogArray` by calling methods of the API and mutating external state, as in the following code:

```javascript
var result;
api.store('push', function() { result = this[0]; });
api.push();
```

The exploit makes unanticipated use of the `store` method by supplying "push" as the first argument instead of a numeral. Our automated analysis detects this problem by effectively considering all possible invocations of all the API methods.

The foundations of the API+Sandbox approach lie in the object-capability theory of securing systems. In the context of capabilities, the methods of the API are capabilities supplied to untrusted code, and the sandbox is the loader that loads untrusted code only with a given set of capabilities. If API methods are viewed as capabilities, then the API Confinement Problem is also known as the Overt Confinement Problem for Capabilities.

### B. Confinement-Friendly JavaScript
One reason why prior work has not focused on verifying the correctness of APIs is that present JavaScript, based on the 3rd edition of the ECMA-262 standard, is not amenable to static analysis. Recognizing these difficulties, the ECMA Standards Committee (TC39) developed a strict mode (ES5S) in the 5th edition of the ECMAScript Standard (ES5) that supports static lexical scoping and closure-based encapsulation. ES5S, however, has two remaining limitations for confinement and static analysis: (1) ambient access to built-in objects may be used to subvert some of the checks in API implementations, and (2) `eval` allows dynamic code execution.

In this paper, we propose a variant, SESlight, of ES5S that supports static analysis and confinement by eliminating the two problems above. As discussed, SESlight is comparable to and more expressive than previous JavaScript sandboxing sublanguages. In SESlight, malicious use of built-in objects is restricted by making necessary objects immutable. For dynamic code execution, the language only supports a restrictive form of `eval`, which we call variable-restricted `eval`, that is amenable to static analysis. While a more permissive sublanguage, Secure EcmaScript (SES), is currently under proposal by the ECMA committee (TC39), the two languages are relatively close. The main difference between SES and SESlight is that SES supports getters/setters, and SESlight does not because they are not amenable to the analysis methods we considered practical in developing our approach. Since no current browser implements the SESlight semantics, we describe a way to enforce the SESlight semantics in an ES5S environment, using an initialization script that must be run at the beginning and a static verifier that must be applied to all code that runs subsequently. While we have implemented this method, our formal analysis is based on the independent semantics of SESlight.

### C. Static Analysis Method
The main technique used in our verification procedure is a conventional context-insensitive and flow-insensitive points-to analysis. We analyze the API implementation and generate a conservative Datalog model of all API methods. We encode an attacker as a set of Datalog rules and facts, whose consequence set is an abstraction of the set of all possible invocations of all the API methods. Our attacker encoding is similar to the encoding of the conventional Dolev-Yao network attacker, used in network protocol analysis. We prove the soundness of our procedure by showing that the Datalog models for the API and the attacker are sound abstractions of the semantics of the API and the set of all possible sandboxed untrusted code, respectively. The threat model is based on arbitrary untrusted SESlight code run with respect to the SESlight semantics after sandboxing.

### D. Contributions and Organization
In summary, the main contributions of this paper are:
- The syntax and semantics of the language SESlight, which supports a safe sandbox and is amenable to static analysis.
- A Datalog-based procedure for deciding confinement properties of SESlight APIs.
- A proof of semantic soundness of the procedure under the SESlight threat model.
- An implementation of the procedure in the form of an automated tool, ENCAP.
- Applications of the tool to demonstrate an attack on Yahoo! Adsafe, confinement properties of repaired Adsafe, and confinement properties of standard examples from the object-capability literature.

The remainder of this paper is organized as follows:
- Section 2 motivates the design of the language SESlight.
- Section 3 describes its syntax and semantics.
- Section 4 formally defines the Confinement problem for SESlight APIs.
- Section 5 presents a static analysis procedure for verifying API Confinement.
- Section 6 presents applications of the procedure on certain benchmark examples.
- Section 7 describes related work.
- Section 8 concludes.

## 2. From JavaScript to ES5-Strict to SESlight
We motivate the design of the language SESlight in two steps. We first describe the restrictions ES5S imposes on the form of JavaScript implemented in current browsers and then explain the added restrictions of SESlight over ES5S.

### A. JavaScript to ES5S
In December 2009, the ECMA committee released the 5th edition of the ECMA262 standard, which includes a "strict mode" that is approximately a syntactically and semantically restricted subset of the full language. Shifting from normal to strict mode is done by mentioning the "use strict" directive at the beginning of a function body, as in `function(){ "use strict"; ... }`. In this paper, we analyze the strict mode of ES5 as a separate programming language and assume that all code runs under a global "use strict" directive. Figure 1 summarizes the restrictions enforced by ES5S on JavaScript. The three language properties that hold for ES5S as a result are: Lexical Scoping, Safe Closure-based Encapsulation, and No Ambient Access to Global Object. For each of these properties, we briefly explain why they fail for JavaScript and hold for ES5S.

#### Lexical Scoping
Even though variable bindings in ES3 are almost lexically scoped, the presence of prototype chains on scope objects (or activation records) and the ability to delete variable names make a static scope analysis of variable names impossible. This makes ordinary renaming of bound variables (α-renaming) unsound and significantly reduces the feasibility of static analysis. For example, in the following code, it is impossible to decide the value returned by the call `f()` for an arbitrary expression `e`.

```javascript
Object.prototype[] = 24;
var x = 42;
var f = function foo() { return x; }; f();
```

If the evaluation of expression `e` returns "x," then the call `f()` returns 24; otherwise, it returns 42. Similar corner cases arise when code can potentially delete a variable name or can use the `with` construct to artificially insert objects on the scope chain. Recognizing these issues, ES5S forbids deletion on variable names and the use of the `with` construct. Furthermore, the semantics of ES5S models activation records using the traditional store data structure and therefore without any prototype inheritance.

#### Safe Closure-based Encapsulation
JavaScript implementations in most browsers support the `arguments.caller` construct, which provides callee code with a mechanism to access properties of the activation object of its caller function. This breaks closure-based encapsulation, as illustrated by the following example: a trusted function takes an untrusted function as an argument and checks possession of a secret before performing certain operations.

```javascript
function trusted(untrusted, secret) {
    if (untrusted() === secret) {
        // process secretObj
    }
}
```

Under standard programming intuition, this code should be secure. However, the `arguments.caller` construct can be used to break this encapsulation. ES5S forbids the use of `arguments.caller` and `arguments.callee` to ensure safe encapsulation.

| Restriction | Rationale |
|-------------|-----------|
| No delete on variable names | Lexical Scoping |
| No prototypes for scope objects | Lexical Scoping |
| No `with` | Lexical Scoping |
| No `this` coercion | Isolating Global Object |
| Safe built-in functions | Isolating Global Object |
| No `.callee`, `.caller` on `arguments` objects | Safe Encapsulation |
| No `.caller`, `.arguments` on function objects | Safe Encapsulation |
| No `arguments` and formal parameters aliasing | Safe Encapsulation |

**Figure 1. ES5S restrictions over JavaScript**

By addressing these issues, ES5S provides a more predictable and analyzable language, but it still has limitations for confinement and static analysis. SESlight further refines ES5S to address these limitations.