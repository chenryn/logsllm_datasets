with NGINX offloads work and provides the ability to stop unau‐
thenticated requests from reaching your application servers. Mod‐
ules available for NGINX Open Source include basic authentication
and authentication subrequests. The NGINX Plus exclusive module
for verfying JSON Web Tokens (JWTs) enables integration with
third-party authentication providers that use the authentication
standard OpenID Connect.
6.1 HTTP Basic Authentication
Problem
You need to secure your application or content via HTTP basic
authentication.
Solution
Generate a file in the following format, where the password is
encrypted or hashed with one of the allowed formats:
# comment
name1:password1
name2:password2:comment
name3:password3
61
The username is the first field, the password the second field, and
the delimiter is a colon. There is an optional third field, which you
can use to comment on each user. NGINX can understand a few dif‐
ferent formats for passwords, one of which is whether the password
is encrypted with the C function crypt(). This function is exposed
to the command line by the openssl passwd command. With
openssl installed, you can create encrypted password strings by
using the following command:
$ openssl passwd MyPassword1234
The output will be a string that NGINX can use in your password
file.
Use the auth_basic and auth_basic_user_file directives within
your NGINX configuration to enable basic authentication:
location / {
auth_basic "Private site";
auth_basic_user_file conf.d/passwd;
}
You can use the auth_basic directives in the HTTP, server, or loca‐
tion contexts. The auth_basic directive takes a string parameter,
which is displayed on the basic authentication pop-up window when
an unauthenticated user arrives. The auth_basic_user_file speci‐
fies a path to the user file.
Discussion
You can generate basic authentication passwords a few ways and in a
few different formats with varying degrees of security. The htpasswd
command from Apache can also generate passwords. Both the
openssl and htpasswd commands can generate passwords with the
apr1 algorithm, which NGINX can also understand. The password
can also be in the salted SHA-1 format that Lightweight Directory
Access Protocol (LDAP) and Dovecot use. NGINX supports more
formats and hashing algorithms; however, many of them are consid‐
ered insecure because they can easily be defeated by brute-force
attacks.
You can use basic authentication to protect the context of the entire
NGINX host, specific virtual servers, or even just specific location
blocks. Basic authentication won’t replace user authentication for
web applications, but it can help keep private information secure.
62 | Chapter 6: Authentication
Under the hood, basic authentication is done by the server returning
a 401 unauthorized HTTP code with the response header WWW-
Authenticate. This header will have a value of Basic realm="your
string". This response causes the browser to prompt for a user‐
name and password. The username and password are concatenated
and delimited with a colon, then base64-encoded, and then sent in a
request header named Authorization. The Authorization request
header will specify a Basic and user:password encoded string. The
server decodes the header and verifies against the provided
auth_basic_user_file. Because the username password string is
merely base64-encoded, it’s recommended to use HTTPS with basic
authentication.
6.2 Authentication Subrequests
Problem
You have a third-party authentication system for which you would
like requests authenticated.
Solution
Use the http_auth_request_module to make a request to the
authentication service to verify identity before serving the request:
location /private/ {
auth_request /auth;
auth_request_set $auth_status $upstream_status;
}
location = /auth {
internal;
proxy_pass http://auth-server;
proxy_pass_request_body off;
proxy_set_header Content-Length "";
proxy_set_header X-Original-URI $request_uri;
}
The auth_request directive takes a URI parameter that must be a
local internal location. The auth_request_set directive allows you
to set variables from the authentication subrequest.
6.2 Authentication Subrequests | 63
Discussion
The http_auth_request_module enables authentication on every
request handled by the NGINX server. The module makes a subre‐
quest before serving the original to determine if the request has
access to the resource it’s requesting. The entire original request is
proxied to this subrequest location. The authentication location acts
as a typical proxy to the subrequest and sends the original request,
including the original request body and headers. The HTTP status
code of the subrequest is what determines whether or not access is
granted. If the subrequest returns with an HTTP 200 status code,
the authentication is successful and the request is fulfilled. If the
subrequest returns HTTP 401 or 403, the same will be returned for
the original request.
If your authentication service does not request the request body, you
can drop the request body with the proxy_pass_request_body
directive, as demonstrated. This practice will reduce the request size
and time. Because the response body is discarded, the Content-
Length header must be set to an empty string. If your authentication
service needs to know the URI being accessed by the request, you’ll
want to put that value in a custom header that your authentication
service checks and verifies. If there are things you do want to keep
from the subrequest to the authentication service, like response
headers or other information, you can use the auth_request_set
directive to make new variables out of response data.
6.3 Validating JWTs
Problem
You need to validate a JWT before the request is handled with
NGINX Plus.
Solution
Use NGINX Plus’s HTTP JWT authentication module to validate the
token signature and embed JWT claims and headers as NGINX
variables:
location /api/ {
auth_jwt "api";
64 | Chapter 6: Authentication
auth_jwt_key_file conf/keys.json;
}
This configuration enables validation of JWTs for this location. The
auth_jwt directive is passed a string, which is used as the authenti‐
cation realm. The auth_jwt takes an optional token parameter of a
variable that holds the JWT. By default, the Authentication header
is used per the JWT standard. The auth_jwt directive can also be
used to cancel the effects of required JWT authentication from
inherited configurations. To turn off authentication, pass the key‐
word to the auth_jwt directive with nothing else. To cancel inher‐
ited authentication requirements, pass the off keyword to the
auth_jwt directive with nothing else. The auth_jwt_key_file takes
a single parameter. This parameter is the path to the key file in stan‐
dard JSON Web Key format.
Discussion
NGINX Plus is able to validate the JSON web signature types of
tokens as opposed to the JSON web encryption type, where the
entire token is encrypted. NGINX Plus is able to validate signatures
that are signed with the HS256, RS256, and ES256 algorithms. Hav‐
ing NGINX Plus validate the token can save the time and resources
needed to make a subrequest to an authentication service. NGINX
Plus deciphers the JWT header and payload, and captures the stan‐
dard headers and claims into embedded variables for your use.
Also See
RFC Standard Documentation of JSON Web Signature
RFC Standard Documentation of JSON Web Algorithms
RFC Standard Documentation of JSON Web Token
NGINX Embedded Variables
Detailed NGINX Blog
6.4 Creating JSON Web Keys
Problem
You need a JSON Web Key for NGINX Plus to use.
6.4 Creating JSON Web Keys | 65
Solution
NGINX Plus utilizes the JSON Web Key (JWK) format as specified
in the RFC standard. This standard allows for an array of key objects
within the JWK file.
The following is an example of what the key file may look like:
{"keys":
[
{
"kty":"oct",
"kid":"0001",
"k":"OctetSequenceKeyValue"
},
{
"kty":"EC",
"kid":"0002"
"crv":"P-256",
"x": "XCoordinateValue",
"y": "YCoordinateValue",
"d": "PrivateExponent",
"use": "sig"
},
{
"kty":"RSA",
"kid":"0003"
"n": "Modulus",
"e": "Exponent",
"d": "PrivateExponent"
}
]
}
The JWK file shown demonstrates the three initial types of keys
noted in the RFC standard. The format of these keys is also part of
the RFC standard. The kty attribute is the key type. This file shows
three key types: the Octet Sequence (oct), the EllipticCurve (EC),
and the RSA type. The kid attribute is the key ID. Other attributes to
these keys are specified in the standard for that type of key. Look to
the RFC documentation of these standards for more information.
Discussion
There are numerous libraries available in many different languages
to generate the JSON Web Key. It’s recommended to create a key ser‐
vice that is the central JWK authority to create and rotate your
JWKs at a regular interval. For enhanced security, it’s recommended
66 | Chapter 6: Authentication
to make your JWKs as secure as your SSL/TLS certifications. Secure
your key file with proper user and group permissions. Keeping them
in memory on your host is best practice. You can do so by creating
an in-memory filesystem like ramfs. Rotating keys on a regular
interval is also important; you may opt to create a key service that
creates public and private keys and offers them to the application
and NGINX via an API.
Also See
RFC standardization documentation of JSON Web Key
6.5 Authenticate Users via Existing OpenID
Connect SSO
Problem
You want to offload OpenID Connect authentication validation to
NGINX Plus.
Solution
Use the JWT module that comes with NGINX Plus to secure a loca‐
tion or server, and instruct the auth_jwt directive to use
$cookie_auth_token as the token to be validated:
location /private/ {
auth_jwt "Google Oauth" token=$cookie_auth_token;
auth_jwt_key_file /etc/nginx/google_certs.jwk;
}
This configuration directs NGINX Plus to secure the /private/ URI
path with JWT validation. Google OAuth 2.0 OpenID Connect uses
the cookie auth_token rather than the default bearer token. Thus,
you must instruct NGINX to look for the token in this cookie rather
than in the NGINX Plus default location. The auth_jwt_key_file
location is set to an arbitrary path, which is a step that we cover in
Recipe 6.6.
Discussion
This configuration demonstrates how you can validate a Google
OAuth 2.0 OpenID Connect JSON Web Token with NGINX Plus.
The NGINX Plus JWT authentication module for HTTP is able to
6.5 Authenticate Users via Existing OpenID Connect SSO | 67
validate any JSON Web Token that adheres to the RFC for JSON
Web Signature specification, instantly enabling any SSO authority
that utilizes JSON Web Tokens to be validated at the NGINX Plus
layer. The OpenID 1.0 protocol is a layer on top of the OAuth 2.0
authentication protocol that adds identity, enabling the use of JWTs
to prove the identity of the user sending the request. With the signa‐
ture of the token, NGINX Plus can validate that the token has not
been modified since it was signed. In this way, Google is using an
asynchronous signing method and makes it possible to distribute
public JWKs while keeping its private JWK secret.
NGINX Plus can also control the Authorization Code Flow for
OpenID Connect 1.0, enabling NGINX Plus as a Relay Party for
OpenID Connect. This capability enables integration with most
major identity providers, including CA Single Sign‑On (formerly
SiteMinder), ForgeRock OpenAM, Keycloak, Okta, OneLogin, and
Ping Identity. For more information and a reference implementation
of NGINX Plus as a relaying party for OpenID Connect authentica‐
tion, check out the NGINX Inc OpenID Connect GitHub Reposi‐
tory.
Also See
Detailed NGINX Blog on OpenID Connect
OpenID Connect
6.6 Obtaining the JSON Web Key from Google
Problem
You need to obtain the JSON Web Key from Google to use when
validating OpenID Connect tokens with NGINX Plus.
Solution
Utilize Cron to request a fresh set of keys every hour to ensure your
keys are always up-to-date:
0 * * * * root wget https://www.googleapis.com/oauth2/v3/ \
certs-O /etc/nginx/google_certs.jwk
This code snippet is a line from a crontab file. Unix-like systems
have many options for where crontab files can live. Every user will
68 | Chapter 6: Authentication
have a user-specific crontab, and there’s also a number of files and
directories in the /etc/ directory.
Discussion
Cron is a common way to run a scheduled task on a Unix-like sys‐
tem. JSON Web Keys should be rotated on a regular basis to ensure
the security of the key, and in turn, the security of your system. To
ensure that you always have the most up-to-date key from Google,
you’ll want to check for new JWKs at regular intervals. This Cron
solution is one way of doing so.
Also See
Cron
6.6 Obtaining the JSON Web Key from Google | 69
CHAPTER 7
Security Controls
7.0 Introduction
Security is done in layers, and there must be multiple layers to your
security model for it to be truly hardened. In this chapter, we go
through many different ways to secure your web applications with
NGINX and NGINX Plus. You can use many of these security meth‐
ods in conjunction with one another to help harden security. The
following are a number of security sections that explore features of
NGINX and NGINX Plus that can assist in strengthening your
application. You might notice that this chapter does not touch upon
one of the largest security features of NGINX, the ModSecurity 3.0
NGINX module, which turns NGINX into a Web Application Fire‐
wall (WAF). To learn more about the WAF capabilities, download
the ModSecurity 3.0 and NGINX: Quick Start Guide.
7.1 Access Based on IP Address
Problem
You need to control access based on the IP address of the client.
Solution
Use the HTTP access module to control access to protected
resources:
location /admin/ {
deny 10.0.0.1;
71
allow 10.0.0.0/20;
allow 2001:0db8::/32;
deny all;
}
The given location block allows access from any IPv4 address in
10.0.0.0/20 except 10.0.0.1, allows access from IPv6 addresses in the
2001:0db8::/32 subnet, and returns a 403 for requests originating
from any other address. The allow and deny directives are valid
within the HTTP, server, and location contexts. Rules are checked in
sequence until a match is found for the remote address.
Discussion
Protecting valuable resources and services on the internet must be
done in layers. NGINX provides the ability to be one of those layers.
The deny directive blocks access to a given context, while the allow
directive can be used to allow subsets of the blocked access. You can
use IP addresses, IPv4 or IPv6, CIDR block ranges, the keyword all,
and a Unix socket. Typically when protecting a resource, one might
allow a block of internal IP addresses and deny access from all.
7.2 Allowing Cross-Origin Resource Sharing
Problem
You’re serving resources from another domain and need to allow
cross-origin resource sharing (CORS) to enable browsers to utilize
these resources.
Solution
Alter headers based on the request method to enable CORS:
map $request_method $cors_method {
OPTIONS 11;
GET 1;
POST 1;
default 0;
}
server {
...
location / {
if ($cors_method ~ '1') {
add_header 'Access-Control-Allow-Methods'
'GET,POST,OPTIONS';
72 | Chapter 7: Security Controls
add_header 'Access-Control-Allow-Origin'
'*.example.com';
add_header 'Access-Control-Allow-Headers'
'DNT,
Keep-Alive,
User-Agent,
X-Requested-With,
If-Modified-Since,
Cache-Control,
Content-Type';
}
if ($cors_method = '11') {
add_header 'Access-Control-Max-Age' 1728000;
add_header 'Content-Type' 'text/plain; charset=UTF-8';
add_header 'Content-Length' 0;
return 204;
}
}
}
There’s a lot going on in this example, which has been condensed by
using a map to group the GET and POST methods together. The
OPTIONS request method returns a preflight request to the client
about this server’s CORS rules. OPTIONS, GET, and POST methods are
allowed under CORS. Setting the Access-Control-Allow-Origin
header allows for content being served from this server to also be
used on pages of origins that match this header. The preflight
request can be cached on the client for 1,728,000 seconds, or 20
days.
Discussion