---
tags: ['计算机网络']
books: [
  {name: '计算机网络:自顶向下方法'}
]
---
# 密码学
密码学最基础的分支：
- 单向散列函数
- 对称密码技术
- 非对称密码技术
现代密码学加密数据的安全性依赖于加密算法的质量和密钥的保密性，只有加密算法是公开的，安全性才能经受得住考验
密码学能做什么？
  - 机密性：如何使得某个数据自己能看懂，别人看不懂
  - 认证：如何确保数据的正确来源，如何保证通信实体的真实性
  - 完整性：如何确保数据在传输过程中没有被删改
  - 不可否认性：如何确保用户行为的不可否认性
## 基本概念
- 明文 ——要处理的数据
- 密文 ——处理后的数据
- 密钥 ——秘密参数
- 加密函数
- 解密函数
## 密码算法分类
- 根据用途
  - 加密算法
  - 杂凑函数
  - 数字签名
- 根据密钥 密码系统的安全性应该依赖于密钥的复杂性，而非算法的保密性
  - 对称
  - 非对称
## 密码分析学
### 密码体制的攻击
- 唯密文攻击：通过统计分析针对部分密文进行分析
- 已知明文攻击：已知密文与明文的匹配关系得到已知密文与未知明文的匹配关系
- 选择明文攻击：对于静态的加密方案 如果能让对方发送一串固定的数据，可以破解这个映射关系，在二战中就有一些情况故意散播虚假消息从而破解密码 但在现代的的加密方案，这行不通
无条件安全与计算安全
### 安全强度
加密算法的安全强度通常使用“位”（字节位）来表述，N 位的安全强度表示破解一个算法需要 2^N(2 的 N 次方) 次的运算
随着安全分析的进步，几乎所有密码学算法的安全强度都会衰减
安全强度（位）|NIST建议|BSI建议|ECRYPT-CSA建议
-|-|-|-
80|仅遗留系统可以使用，不建议用于新系统|不推荐|仅遗留系统可以使用，不建议用于新系统
112|仅可用于2030年之前|不推荐|不推荐
128|可以用于2030年之后|可以用于2020年之后|可以用于2028年之前
256|可以用于2030年之后|可以用于2020年之后|可以用于2068年之前
### 算法性能
使用的度量单位是每字节周期数（CPB，Cycles Per Byte），表示的是处理一个字节处理需要执行的微处理器的时钟周期数
每字节花费的时钟周期数越小，表示这个算法运算得越快，性能越好
影响计算性能的因素：
- 算法实现的内存使用影响
- 算法实现有没有使用优化的步骤，比如并行计算或者预运算
- 算法实现有没有使用硬件加速，比如使用 CPU 关于算法的扩展指令
## 对称加密
### 对称秘钥管理
对称密钥的长度是由对称密钥算法确定的，对称秘钥的强度取决于产生机制、分布是否均匀、是否不可预测
对称密钥来源于用户产生或者计算机产生，一种方式是通过password来进行生成，PBKDF2算法通过接受一个密码、一个salt、以及迭代次数和输出密钥长度作为输入，输出的是生成的密钥，使用弱的口令来保护强的密钥，然后使用强的密钥来保护私密数据，另外一种就是使用计算机生成的随机数来做密钥
一些对称密钥如 HTTPS 的端到端传输协议，密钥可以即用即弃，而另外一些环境，则需要对密钥做保存，密钥如何保存与分发的麻烦在于大量密钥的管理
kerberos 协议通过解决了集中认证的问题来解决两个可信实体之间密钥的协商。用户向KDC发出身份验证请求。如果验证成功，KDC会向用户颁发一个票据，该票据包含一个会话密钥。用户可以使用这个会话密钥来与所需要的服务进行通信的加解密
### 前向保密性
- 即使用来协商或者保护数据加密密钥的长期秘密泄漏，也不会导致数据加密密钥的泄漏
即口令+随机数 = 密钥 这个过程中，如果随机数完全丢失，就不能从口令推导出密钥
### 流密码
明文消息按字符或比特逐位加密，主要是基于硬件实现
每次加密都通过密钥生成一个密钥流，解密也是使用同一个密钥流，明文与同样长度的密钥流进行异或运算得到密文，密文与同样的密钥流进行异或运算得到明文
流密码的安全性主要取决于密钥序列的推导算法，而不用考虑数据分组带来的种种陷阱
- 密钥流产生器
参数为k的有限状态自动机
**二元序列的伪随机性**
#### 反馈移位寄存器
![批注 2020-06-05 102940](/assets/批注%202020-06-05%20102940.png)
#### 非线性序列
#### A5流密码算法
用于蜂窝式移动电话系统语音和数字加密
#### 流加密攻击
有些加密算法是将流中的每个字节逐个进行异或
这导致只需要知道两个加密后的密文，便解密密文
### 分组密码
```mermaid
stateDiagram-v2
  明文数据 --> 明文分组1
  明文数据 --> 明文分组2
  明文数据 --> 明文分组N（补齐数据）
  明文分组1 --> 加密函数
  明文分组2 --> 加密函数
  明文分组N（补齐数据） --> 加密函数
  初始向量 --> 中间结果1
  加密函数 --> 中间结果1
  加密函数 --> 中间结果2
  加密函数 --> 中间结果3
  中间结果1 --> 中间结果2
  中间结果2 --> 中间结果N
  中间结果1 --> 密文分组1
  中间结果2 --> 密文分组2
  中间结果N --> 密文分组N
  密文分组1 --> 密文数据: 合并
  密文分组2 --> 密文数据: 合并
  密文分组N --> 密文数据: 合并
```
每个分组的加密都要用到上一分组的输出作为输入，第一个分组没有上一个分组，所以使用初始向量来进行，通过各个分组加密的时候进行链接，可以确保雪崩效应能够延续
在一个对称密钥的生命周期里，初始化向量不能重复，所以大部分情况下都是使用随机数作为初始化向量，但随机数的获取，有时候不是一个有效率的运算。
发件人和收件人使用其共同拥有的单个密钥 ,这种密钥既用于加密，也用于解密
常见的对称加密算法：DES、3DES、DESX、Blowfish、IDEA、RC4、RC5、RC6和AES
- 混淆原则
  - 敌手即使获得了密文和明文，也无法求出密钥的任何信息；即使获得了密文和明文的统计规律，也无法求出明文的新的信息
- 扩散原则
  - 明文中的每一位影响密文中的尽可能多的位
**优点**
只需记忆一个密钥，就可用于加密、解密； 与非对称加密方法相比，加密解密的计算量小，速度快，简单易用，适合于对海量数据进行加密处理
**缺点**
如果密钥交换不安全，密钥的安全性就会丧失
分组加密算法改变分组密文的顺序，也将改变解密后的明文顺序，这很有可能将导致数据传输过程中关键数据被伪造
#### SP网络
- 代换
![批注 2020-06-06 103221](/assets/批注%202020-06-06%20103221.png)
#### Feistel密码
乘积密码指顺序地执行两个或多个基本密码系统，使得最后结果的密码强度高于每个基本密码系统产生的结果
#### DES
- 分组长度为64 bits (8 bytes)
- 密文分组长度也是64 bits。