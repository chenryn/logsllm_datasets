多维组合搜索
(任意字段组合查询)
阿里云
digoal
目录
• 任意字段组合查询
• 索引结构和原理
• 数据扫描方法
• 应用实践
• 128个字段，任意字段组合搜索 -gin,bitmapscan
• 任意字段组合搜索 -非字典化（ column_prefix） gin\rum倒排搜索
• 任意字段组合搜索 -字典化 gin\rum倒排搜索
• 时空、数组、标量等多维度搜索 (50倍提速 vs ES)
任意字段组合查询
select ... from xx
where
x=? and
典型应用场景：
y=? and
l ERP系统
l 搜索
z>=? or
l 拖拽式分析系统（任意维度过滤）
(a=? and b=?)
... ... - - 任意组合
order by c,d desc;
加速思路
• 扫描最少的索引块
• 扫描最少的表数据库块
• 过滤最少的不符合条件的记录
• 尽量避免对大量记录进行显示排序
• 核心
• 索引数据结构设计
• 索引存储组织形式
• 表存储组织形式
目录
• 任意字段组合查询
• 索引结构和原理
• 数据扫描方法
• 应用实践
• 128个字段，任意字段组合搜索 -gin,bitmapscan
• 任意字段组合搜索 -非字典化（ column_prefix） gin\rum倒排搜索
• 任意字段组合搜索 -字典化 gin\rum倒排搜索
• 时空、数组、标量等多维度搜索 (50倍提速 vs ES)
btree索引结构
• https://github.com/digoal/blog/blob/master/201605/20160528_01.md
• src/backend/access/nbtree/README
btree索引结构
btree索引结构
gin索引结构
• src/backend/access/gin/README
• 倒排结构
https://www.postgresql.org/docs/10/static/gin.html ctid(行号) ctid(行号)
• 多值类型 element tree
posting
• ctids (posting list or tree) posting list
tree
• 写入优化
• element pendinglist row1: array[key.....(s)]
• gin_pending_list_limit ...... posting list
• 大结果集查询优化 - fuzzy match
• gin_fuzzy_search_limit ...
metapage 倒排树
pending
list for
fast update
...
key,point key,point key,point
... ... ...
gin索引结构
• https://www.cybertec-postgresql.com/en/what-postgresql-full-text-search-has-to-do-with-vacuum/
• https://www.postgresql.org/docs/12/gin-implementation.html
gin索引结构
• https://www.cybertec-postgresql.com/en/what-postgresql-full-text-search-has-to-do-with-vacuum/
• https://www.postgresql.org/docs/12/gin-implementation.html
内窥GIN内容 https://www.postgresql.org/docs/11/pageinspect.html#id-
1.11.7.31.7
rum索引结构
• https://github.com/postgrespro/rum
• https://github.com/digoal/blog/blob/master/201907/20190706_01.md
额外信息（例如attach column's value, tsvector's 出现次数等）
hash索引结构
• hash值转换，hash值映射到某个bucket。
• bucket数量为2的N次方。至少包括2个bucket。
• metapage，pagezero。包括控制信息。
• 每个bucket内至少一个primarypage。放不下时，增加overflowpage。
• hashindex支持长字符串。page内存储的是HASHVALUE。
• 每个page内，hashvalue有序存放，支持binarysearch.跨page不保证有序。
• 分裂优化，增加bucket时，hashmapping会变化，需要分裂。2^n映射。有一定的优化策略 special
space
• (切成4个部分，增量进行split)。
• src/backend/access/hash/README
double
• src/backend/utils/hash/dynahash.c
link
meta
page
bucket1 bucket2
primary overflow primary overflow
page page(s) page page(s)
......
bitmap page:
标记overflow page 状态
bitmap bitmap (reuse,free)
page page
gist索引结构
spgist索引结构
• [空间分区]通用索引结构
• r-tree base on gist
• src/backend/access/gist/README
• src/backend/access/spgist/README
• https://github.com/digoal/blog/blob/master/201708/20170824_02.md
• https://github.com/digoal/blog/blob/master/201708/20170820_01.md
• https://github.com/digoal/blog/blob/master/201709/20170905_01.md
• https://github.com/digoal/blog/blob/master/201708/20170825_01.md
brin索引结构
• src/backend/access/brin/README
• 定义粒度
• N个连续的块
• 索引字段值在连续N个块内的边界值
• 普通边界
• RANGE边界
• 空间边界（BOUND BOX）
• PostgreSQL 11 优化(分段 bound box)
• https://github.com/digoal/blog/blob/master/201803/20180323_05.md
bloom索引结构
• bloom
• https://www.postgresql.org/docs/devel/static/bloom.html
• https://github.com/digoal/blog/blob/master/201605/20160523_01.md
• https://en.wikipedia.org/wiki/Bloom_filter
length, m值，即总共多少个bit位表示一个被索引的行。
Col1,col2,…，该列用几个bit表示，每个bit对应position是否设置为1由一个hash函数计算得到.
最多需要m个不同的hash函数，hash函数返回的值范围是0 ~ m-1 (即bit position).
假设col1=3， 则索引的第一列需要3个hash函数来计算出3个bit position上的值是1或0.
假设m=10
i1=‘abc’, hash1(‘abc’)=3, hash2(‘abc’)=5, hash3(‘abc’)=9, 那么m=0001010001
bloom索引结构
• bloom
• https://www.postgresql.org/docs/devel/static/bloom.html
• https://github.com/digoal/blog/blob/master/201605/20160523_01.md
• https://en.wikipedia.org/wiki/Bloom_filter
其他索引结构
• zombodb
• https://github.com/zombodb/zombodb
其他索引讲解文档
https://github.com/digoal/blog/blob/master/201908/20190816_01.md
目录
• 任意字段组合查询
• 索引结构和原理
• 数据扫描方法
• 应用实践
• 128个字段，任意字段组合搜索 -gin,bitmapscan
• 任意字段组合搜索 -非字典化（ column_prefix） gin\rum倒排搜索
• 任意字段组合搜索 -字典化 gin\rum倒排搜索
• 时空、数组、标量等多维度搜索 (50倍提速 vs ES)
扫描方法介绍
• seqscan
• index only scan
• index scan
• bitmap scan
• ctid scan
seqscan
表大小超过SB/4,加TAG
从0号数据块开始扫 BAS_BULKREAD
,优先淘汰
分批处理，并不会把shared buffer塞满
seqscan+synchronize_seqscans=on
表大小超过SB/4,加TAG
可能从中间开始扫，
BAS_BULKREAD
WRAP
,优先淘汰
多会话并行扫描单表，优化，尽量步调一致，一个BLOCK一次IO（尽量）
分批处理，并不会把shared buffer塞满
https://github.com/digoal/blog/blob/master/201804/20180414_02.md
index only scan
VM