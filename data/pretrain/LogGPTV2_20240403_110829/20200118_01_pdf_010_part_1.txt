# 多维组合搜索

## 任意字段组合查询
### 概述
多维组合搜索允许用户在多个字段中进行任意组合的查询。这种查询方式广泛应用于ERP系统、搜索引擎和拖拽式分析系统等场景。

### 示例
```sql
SELECT ... 
FROM xx
WHERE x = ? 
  AND y = ?
  AND z >= ?
  AND (a = ? AND b = ?)
ORDER BY c, d DESC;
```

### 典型应用场景
- **ERP系统**：通过多种条件筛选数据。
- **搜索引擎**：根据用户输入的不同关键词进行搜索。
- **拖拽式分析系统**：支持任意维度的过滤和排序。

## 加速思路
为了提高查询性能，可以采取以下策略：
- **最小化索引块扫描**：减少需要扫描的索引块数量。
- **最小化表数据库块扫描**：减少需要扫描的表数据库块数量。
- **减少不符合条件的记录过滤**：尽量在早期阶段过滤掉不符合条件的记录。
- **避免大量记录的显式排序**：尽量使用索引或其他方法避免对大量记录进行显式排序。

## 核心技术
- **索引数据结构设计**：选择合适的索引类型和结构。
- **索引存储组织形式**：优化索引的存储方式。
- **表存储组织形式**：优化表的存储方式以提高查询效率。

## 索引结构和原理
### B-Tree 索引
- **文档链接**：
  - [B-Tree 索引详解](https://github.com/digoal/blog/blob/master/201605/20160528_01.md)
  - [PostgreSQL 官方文档](src/backend/access/nbtree/README)

### GIN 索引
- **文档链接**：
  - [GIN 索引详解](src/backend/access/gin/README)
  - [PostgreSQL 官方文档](https://www.postgresql.org/docs/10/static/gin.html)
  - [GIN 索引实现细节](https://www.postgresql.org/docs/12/gin-implementation.html)
  - [GIN 索引与 VACUUM 的关系](https://www.cybertec-postgresql.com/en/what-postgresql-full-text-search-has-to-do-with-vacuum/)

### RUM 索引
- **文档链接**：
  - [RUM 索引详解](https://github.com/postgrespro/rum)
  - [RUM 索引实现细节](https://github.com/digoal/blog/blob/master/201907/20190706_01.md)

### Hash 索引
- **文档链接**：
  - [Hash 索引详解](src/backend/access/hash/README)
  - [动态哈希实现](src/backend/utils/hash/dynahash.c)

### GiST 索引
- **文档链接**：
  - [GiST 索引详解](src/backend/access/gist/README)
  - [SP-GiST 索引详解](src/backend/access/spgist/README)
  - [相关博客文章](https://github.com/digoal/blog/tree/master/201708)

### BRIN 索引
- **文档链接**：
  - [BRIN 索引详解](src/backend/access/brin/README)
  - [相关博客文章](https://github.com/digoal/blog/blob/master/201803/20180323_05.md)

### Bloom 索引
- **文档链接**：
  - [Bloom 索引详解](https://www.postgresql.org/docs/devel/static/bloom.html)
  - [相关博客文章](https://github.com/digoal/blog/blob/master/201605/20160523_01.md)
  - [Bloom Filter 维基百科](https://en.wikipedia.org/wiki/Bloom_filter)

### ZomboDB 索引
- **文档链接**：
  - [ZomboDB 项目主页](https://github.com/zombodb/zombodb)

## 数据扫描方法
### 序列扫描 (SeqScan)
- **优化策略**：
  - 表大小超过共享缓冲区 (SB) 的四分之一时，添加 TAG。
  - 从 0 号数据块开始扫描，优先淘汰。
  - 分批处理，避免填满共享缓冲区。
  - 使用 `synchronize_seqscans` 参数进行并行扫描优化。

### 仅索引扫描 (Index Only Scan)
- **文档链接**：
  - [虚拟内存管理](VM)

### 其他扫描方法
- **索引扫描 (Index Scan)**
- **位图扫描 (Bitmap Scan)**
- **CTID 扫描 (CTID Scan)**

## 应用实践
### 128个字段，任意字段组合搜索
- **技术方案**：使用 GIN 和 BitmapScan 进行高效搜索。

### 非字典化搜索
- **技术方案**：使用 column_prefix 和 GIN/RUM 倒排搜索。

### 字典化搜索
- **技术方案**：使用 GIN/RUM 倒排搜索。

### 多维度搜索
- **技术方案**：时空、数组、标量等多维度搜索，相比 Elasticsearch 提速 50 倍。

希望这些优化后的信息能帮助您更好地理解和应用多维组合搜索技术。