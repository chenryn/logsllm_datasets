ﬁnd that 47.7% of weak, and 51.3% of medium passwords have unique semantic
patterns, while 91% of strong passwords have unique patterns. This uniqueness
in semantic patterns may contribute to password strength.
Table 3 presents the top 10 most frequently used semantic patterns for each
group with the percentage of each tag occurrence. If we compare two tables, we
can clearly observe that a few digits followed by a noun (e.g. (dict)(num1),
(mname)(num4)) are the most commonly used semantic pattern in weak and
medium strength group. Further, there are many occurrences of either (dict) or
(name) tags in weak and medium groups, in addition to one other tag. On the
other hand, semantic patterns of strong passwords are more complex and diverse,
as shown in Table 3. Although these passwords also use dictionary words and
names, those are interleaved with complex symbol and digit sequences, result-
ing in non-common words and structures (e.g., KpieAT7894#). Therefore, we
should guide users towards more complex semantic patterns to improve password
strength.
There were 19.27% of weak passwords, which were fully matched with a
leaked password, and 54.1% of weak passwords used a leaked password segment
(e.g., ‘password9cq’). Further, medium-strength passwords had no full matches
but 33.2% of them contained a leaked password, in addition to other charac-
ters. On the other hand, 20.5% of strong passwords contained leaked password
segments but none of them fully matched with leaked passwords.
The More Segments, the Higher Strength: We investigate the number of
diﬀerent-tag segments in a password, which correlate with its semantic complex-
ity. We ﬁnd weak passwords have only 2.21 segments on the average, while the
medium-strength passwords have 3.44 segments, and the strong passwords have
on average 5.22 segments. Thus, we should guide users toward more semantic
segments to improve their password strength.
GuidedPass: Helping Users to Create Strong and Memorable Passwords
257
Table 3. Top 10 most frequent semantic patterns from diﬀerent strength groups
Weak
%
Medium
%
Strong
(dict)(num1)
11.0 (dict)(num4)
2.48 (char1)(dict)(char2)(num4)(sp1)
%
1.03
(fname)(num4)
7.34 (dict)(num3)
2.34 (char1)(pp1)(num1)(sp1)(num4)(char1)(pp1) 1.03
(dict)(num2)
6.42 (mname)(num4)
1.47 (sp1)(at)(dict)(jj)(num4)(sp1)
(mname)(num4) 6.42 (dict)(num1)(sp1) 1.23 (char1)(dict)(char2)(num2)(sp1)
(fname)(num2)
6.42 (fname)(num4)
1.06 (char4)(num2)(sp2)
(dict)(num3)
4.59 (dict)
0.83 (char6)(num3)(sp1)
(num8)
3.67 (dict)(num3)(sp1) 0.78 (dict)(num2)(sp1)
(dict)(num4)
3.67 (dict)(sp1)(num4) 0.78 (sp1)(dict)(dict)(num2)
(mname)(num2) 3.67 (dict)(sp1)(num2) 0.73 (num4)(char1)(sp1)(dict)(sp1)(char2)
(dict)
2.75 (dict)(num2)
0.69 (mname)(sname)(num2)(sp1)
0.91
0.8
0.57
0.46
0.34
0.34
0.34
0.23
4.3 Summary of Our Findings
We summarize our recommendations as follows:
– Uncommon or non-dictionary words. Even with the same semantic pat-
tern, e.g., (np1)(num4), a password can be in any of the three strength cate-
gories, depending on the commonality of the words in each segment. For exam-
ple, bella1234 is in weak, Alaska2011 is in medium, and u.s.-iraq6911 is
in strong group with the same (np1)(num4) structure) Thus we must steer
the users towards uncommon words. Creating uncommon words may not be
that hard. For example, we observe that strong passwords often consist of
a dictionary word, interleaved with digits or symbols, or being intentionally
misspelled.
– The longer, the more semantic segments, and the stronger Our sug-
gestions often involve addition of more words into the password to make
it longer and thus stronger. We also suggest insertion of diﬀerent character
classes to increase both the number of class changes and to create uncommon
segments from common ones.
– Multilingual passwords. We observe that some strong passwords include
words from foreign languages such as Spanish or Arabic. Research [2] has
shown that more than half of population on Earth are bilingual. We expect
that combining words from more than one language in unpredictable ways
can improve password strength without loss of memorability.
5 GuidedPass System Design
In this section, we describe how we designed and implemented suggestions in
GuidedPass, using the password suggestion model and templates.
5.1 Password Suggestion Model
We assume that users initially choose passwords based on certain strings that
have personal signiﬁcance to them, which makes them memorable. Then, our
258
S. S. Woo and J. Mirkovic
suggestions are generated to evolve and extend user’s existing password into a
stronger version without losing memorability. We formally deﬁne the password
suggestion model as follows:
P asswordnew = f(P asswordcurrent, Mnew),
(1)
where P asswordcurrent is the user’s current password string, Mnew are the new
words or characters to be added to P asswordcurrent, and f is a function that the
user performs to integrate Mnew with P asswordcurrent. We focus on functions
that an average person could easily perform, inspired by Blum et al. [3]. These
are addition, insertion, replacement without deletion, swapping, breaking, or
perturbing sequence and redistributing, separating, or moving segments as shown
in Table 4. We do not suggest deletion, since it reduces password length. Next,
we consider types of new information, Mnew, the user can enter. As we discussed
from the previous section, for strong passwords, Mnew should be chosen from
uncommon words. Users can also create uncommon strings or break up common
words or sequence structures, by interleaving them with digits or symbols.
Table 4. Example of  used in suggestion generation
Action (Operation)
Information
Quantiﬁer (Fuzzy
terms)
Add, insert, replace, swap (un)common name
Some, a few
Brake, move, perturb
(un)common word
Somewhere
Redistribute, separate
Word(s), digit(s),
symbol(s), sequence(s)
In the middle
With these options, we construct the  tem-
plates, as shown in Table 4. Suggestions can be constructed from any combina-
tion of action, information, and quantiﬁer, based on the user’s current input. We
provide multiple suggestions to the user, and they can choose the most suitable
suggestion in each step to extend their password. Our suggestions are intention-
ally designed to be high-level and non-speciﬁc. First, we want to allow suﬃcient
space and ﬂexibility for users to interpret these suggestions in a way that does
not interfere with password memorability. Second, we want to increase the search
space of guessing attacks. If suggestions were too speciﬁc, it would be easier for
attackers to perform rule-based attacks.
5.2 Suggestion Rules
To be able to provide suggestions in real time, we ﬁrst need to detect semantic
content and patterns of a user-entered password in real time. Using our POS
segmentation [28] and the zxcvbn [29] tool, we can detect dictionary words,
names, common sequences, and blacklisted passwords. Upon detecting problem-
atic content or patterns such as leaked passwords, and common ﬁrst name, we
immediately highlight them and generate targeted suggestions to avoid those.
Following summarizes the suggestions we generate for each case:
GuidedPass: Helping Users to Create Strong and Memorable Passwords
259
Table 5. A side-by-side comparison of generated suggestions between ours and Ur
et al.
User input
Category
GuidedPass
Ur et al. [26]
John
Top 1K popular
names
Password123
Leaked top 50K
passwords
12345
Sequence
aabbccaabbcc Repeating pattern
1. Add an uncommon name
2. Add a few numbers or
symbols in the middle of the
name
1. Add an uncommon word
2. Add a few numbers or
symbols in the middle of a
word
1. Perturb the sequence or
separate into a few segments
1. Add an uncommon word
2. Move a few numbers or
symbols to the middle of the
pattern to break repeating
pattern
defense
Popular dictionary
word
1. Add an uncommon word
2. Add a few numbers or
symbols in the middle of a
word
1. Contain 8+ charac-
ters
2. Not be an
extremely common
password
1. Not be an
extremely common
password
1. Contain 8+ charac-
ters
2. Not be an
extremely common
password
1. Don’t use words
used
on Wikipedia
(ccaa)
2. Avoid repeating sec-
tions (aabbcc)
3. Have more variety
than repeating the
same 3 characters (a,
b and c)
1. Don’t use
dictionary words
(defense)
6122017
Date
defense6122017 Simple structure
1. Perturb the sequence or
separate into a few segments
1. Avoid using dates
like 6122017
1. Add one of the following:
uncommon word, uncommon
name, or mix of symbols
1. Consider inserting
digits into the middle,
not just at the end
– Common word, name, sequence or dictionary word: Upon detecting a
dictionary word, a common sequence, a personal name [1] or a leaked password
we generate suggestions to: add uncommon personal name, a non-dictionary
word, or insert symbols/digits to modify the common/leaked segment into an
uncommon one. We provide the examples in Table 5.
– Simple structure pattern: If the user’s password is too simple and its
structure is too predictable such as (np)(digit) as shown in Table 5, we
suggest to the user to add one of the following: uncommon word, uncommon
name, or mix of symbols to make a password into a more complex structure.
In Table 5, we show how GuidedPass and DataPass [26] generate suggestions
for the same user inputs. This provides a side-by-side comparison to measure
260
S. S. Woo and J. Mirkovic
Table 6. Password creation approaches
Approach
Description
GuidedPass
Our approach with detailed textual suggestions with
strength enforcement
GuidedPass-NE GuidedPass with no strength enforcement
CMU-NE
Ur et al.’ [26] textual suggestions with no strength
enforcement
zxcvbn
zxcvbn meter [29] with strength enforcement
zxcvbn-NE
zxcvbn meter [29] with no strength enforcement
NewNIST
3class8
New NIST Proposal (800-63) [13] (minimum 8
characters and blacklist password enforcement)
3class8 creation policy (min. 8 characters with at least 3
classes from lowercase-letters, uppercase-letters,
symbols, and digits)
similarity and diﬀerence between these two approaches. Both approaches do
well in detecting problematic or weak patterns, and generate suggestions based
on those. However, GuidedPass provides more direct actions for users to perform
such as “Add uncommon name” or “Add a few numbers or symbols in the middle
of the name” to avoid detected patterns. Conversely, DataPass focuses more on
highlighting syntactic features of passwords, which are not desired, instead of
guiding users towards desirable inputs.
6 Experiment
We now describe user studies we employed to evaluate beneﬁts of GuidedPass
and compare it to competing approaches. All user studies were reviewed and
approved by our Institutional Review Board (IRB). We recruited participants
among Amazon Mechanical Turk workers.
6.1 Approaches
Our evaluation focus was to measure strength and recall of passwords created
with GuidedPass and other competing approaches. We did not suggest any spe-
ciﬁc password policy to users, unless required by an approach we evaluate. First,
as much research has shown, password policies are inconsistent, confusing, and
do not necessarily help users to create strong passwords, but they increase user
burden. Second, it is diﬃcult to isolate beneﬁts of a password suggestion sys-
tem in the presence of policy. Instead, for user feedback, we employ the zxcvbn
meter’s visual progress bar to display the current password’s strength to users.
As Crawford et al. [7] found, visual feedback on users’ progress can reduce the
perception of the online users’ task burden, and they can complete the task.
GuidedPass: Helping Users to Create Strong and Memorable Passwords
261
The descriptions of all evaluated approaches are summarized in Table 6. Our
baseline model is GuidedPass with no strength enforcement (GuidedPass-NE).
In this approach, detailed semantic suggestions with visual bar are presented
to a user, but the user is not required to meet any strength requirement and
may choose not to follow our suggestions. We compare this model to Data-
Pass [26] (CMU-NE), with no strength enforcement. We use the same meter
– zxcvbn – in both approaches, to isolate the impact of the approaches’ sugges-
tions. We also compare our GuidedPass-NE to a meter-only approach, without
strength enforcement (zxcvbn-NE). This comparison helps us highlight impact
of our suggestions on the resulting passwords. We also compare GuidedPass to
the new NIST password creation policy (NewNIST), using zxcvbn meter and
no strength enforcement. For completeness, we also compare GuidedPass with
the passwords created under the popular 3class8 password composition policy
(3class8). The only two approaches where users are required to meet password
policy were NewNIST and 3class8.
We also investigate the impact of combining suggestions and meters with
enforcement of some target password strength. In this set of approaches users
must continue password creation until the resulting password’s strength meets
or exceeds the target. We require that each password’s strength must meet or
exceed zxcvbn score of 5, which is equivalent to a password that cannot be