    In the configuration above you can see an example of a role mapping. Upon login, this configuration looks at the groups of which the current user is a member. If any of the specified group names are found, the user will be granted the resulting role in Grafana.
    In the example shown above, one of the specified group names is "Grafana Admins". If the user is a member of this group, they will be granted the "Admin" role in Grafana. If the user is not a member of the "Grafana Admins" group, it moves on to see if the user is a member of the "Grafana Editors" group. If they are, they are granted the "Editor" role. Finally, if the user is not found to be a member of either of these groups, it fails back to granting the "Viewer" role.
    Also make sure in your configuration that `root_url` is set correctly, otherwise your redirect url might get processed incorrectly. For example, if your grafana instance is running on the default configuration and is accessible behind a reverse proxy at https://grafana.company, your redirect url will end up looking like this, https://grafana.company/. If you get `user does not belong to org` error when trying to log into grafana for the first time via OAuth, check if you have an organization with the ID of 1, if not, then you have to add the following to your grafana config:
    ```ini
    [users]
    auto_assign_org = true
    auto_assign_org_id = 
    ```
    Once you've made sure that the oauth works, go to `/admin/users` and remove the `admin` user.
* New: [Configure grafana.](grafana.md#configure-grafana)
    Grafana has default and custom configuration files. You can customize your Grafana instance by modifying the custom configuration file or by using environment variables. To see the list of settings for a Grafana instance, refer to [View server settings](https://grafana.com/docs/grafana/latest/administration/stats-and-license/#view-server-settings).
    To override an option use `GF__`. Where the `section name` is the text within the brackets. Everything should be uppercase, `.` and `-` should be replaced by `_`. For example, if you have these configuration settings:
    ```ini
    instance_name = ${HOSTNAME}
    [security]
    admin_user = admin
    [auth.google]
    client_secret = 0ldS3cretKey
    [plugin.grafana-image-renderer]
    rendering_ignore_https_errors = true
    [feature_toggles]
    enable = newNavigation
    ```
    You can override variables on Linux machines with:
    ```bash
    export GF_DEFAULT_INSTANCE_NAME=my-instance
    export GF_SECURITY_ADMIN_USER=owner
    export GF_AUTH_GOOGLE_CLIENT_SECRET=newS3cretKey
    export GF_PLUGIN_GRAFANA_IMAGE_RENDERER_RENDERING_IGNORE_HTTPS_ERRORS=true
    export GF_FEATURE_TOGGLES_ENABLE=newNavigation
    ```
    And in the docker compose you can edit the `.env` file. Mine looks similar to:
    ```bash
    GRAFANA_VERSION=latest
    GF_DEFAULT_INSTANCE_NAME="production"
    GF_SERVER_ROOT_URL="https://your.domain.org"
    GF_DATABASE_TYPE=postgres
    DATABASE_VERSION=15
    GF_DATABASE_HOST=grafana-db:5432
    GF_DATABASE_NAME=grafana
    GF_DATABASE_USER=grafana
    GF_DATABASE_PASSWORD="change-for-a-long-password"
    GF_DATABASE_SSL_MODE=disable
    GF_AUTH_GENERIC_OAUTH_ENABLED="true"
    GF_AUTH_GENERIC_OAUTH_NAME="authentik"
    GF_AUTH_GENERIC_OAUTH_CLIENT_ID=""
    GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET=""
    GF_AUTH_GENERIC_OAUTH_SCOPES="openid profile email"
    GF_AUTH_GENERIC_OAUTH_AUTH_URL="https://authentik.company/application/o/authorize/"
    GF_AUTH_GENERIC_OAUTH_TOKEN_URL="https://authentik.company/application/o/token/"
    GF_AUTH_GENERIC_OAUTH_API_URL="https://authentik.company/application/o/userinfo/"
    GF_AUTH_SIGNOUT_REDIRECT_URL="https://authentik.company/application/o//end-session/"
    GF_AUTH_OAUTH_AUTO_LOGIN="true"
    GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH="contains(groups[*], 'Grafana Admins') && 'Admin' || contains(groups[*], 'Grafana Editors') && 'Editor' || 'Viewer'"
    ```
* New: [Configure datasources.](grafana.md#configure-datasources)
    You can manage data sources in Grafana by adding YAML configuration files in the `provisioning/datasources` directory. Each config file can contain a list of datasources to add or update during startup. If the data source already exists, Grafana reconfigures it to match the provisioned configuration file.
    The configuration file can also list data sources to automatically delete, called `deleteDatasources`. Grafana deletes the data sources listed in `deleteDatasources` before adding or updating those in the datasources list.
    For example to [configure a Prometheus datasource](https://grafana.com/docs/grafana/latest/datasources/prometheus/) use:
    ```yaml
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        # Access mode - proxy (server in the UI) or direct (browser in the UI).
        url: http://prometheus:9090
        jsonData:
          httpMethod: POST
          manageAlerts: true
          prometheusType: Prometheus
          prometheusVersion: 2.44.0
          cacheLevel: 'High'
          disableRecordingRules: false
          incrementalQueryOverlapWindow: 10m
          exemplarTraceIdDestinations: []
    ```
* New: [Configure dashboards.](grafana.md#configure-dashboards)
    You can manage dashboards in Grafana by adding one or more YAML config files in the `provisioning/dashboards` directory. Each config file can contain a list of dashboards providers that load dashboards into Grafana from the local filesystem.
    Create one file called `dashboards.yaml` with the next contents:
    ```yaml
    ---
    apiVersion: 1
    providers:
      - name: default # A uniquely identifiable name for the provider
        type: file
        options:
          path: /etc/grafana/provisioning/dashboards/definitions
    ```
    Then inside the config directory of your docker compose create the directory `provisioning/dashboards/definitions` and add the json of the dashboards themselves. You can download them from the dashboard pages. For example:
    - [Node Exporter](https://grafana.com/grafana/dashboards/1860-node-exporter-full/)
    - [Blackbox Exporter](https://grafana.com/grafana/dashboards/13659-blackbox-exporter-http-prober/)
    - [Alertmanager](https://grafana.com/grafana/dashboards/9578-alertmanager/)
* New: [Configure the plugins.](grafana.md#configure-the-plugins)
    To install plugins in the Docker container, complete the following steps:
    - Pass the plugins you want to be installed to Docker with the `GF_INSTALL_PLUGINS` environment variable as a comma-separated list.
    - This sends each plugin name to `grafana-cli plugins install ${plugin}` and installs them when Grafana starts.
    For example:
    ```bash
    docker run -d -p 3000:3000 --name=grafana \
      -e "GF_INSTALL_PLUGINS=grafana-clock-panel, grafana-simple-json-datasource" \
      grafana/grafana-oss
    ```
    To specify the version of a plugin, add the version number to the `GF_INSTALL_PLUGINS` environment variable. For example: `GF_INSTALL_PLUGINS=grafana-clock-panel 1.0.1`.
    To install a plugin from a custom URL, use the following convention to specify the URL: `;`. For example: `GF_INSTALL_PLUGINS=https://github.com/VolkovLabs/custom-plugin.zip;custom-plugin`.
* Correction: Improve installation method.
    Add more configuration values such as:
    ```
    GF_SERVER_ENABLE_GZIP="true"
    GF_AUTH_GENERIC_OAUTH_ALLOW_ASSIGN_GRAFANA_ADMIN="true"
    GF_LOG_MODE="console file"
    GF_LOG_LEVEL="info"
    ```
* Correction: [Warning when configuring datasources.](grafana.md#configure-datasources)
    Be careful to set the `timeInterval` variable to the value of how often you scrape the data from the node exporter to avoid [this issue](https://github.com/rfmoz/grafana-dashboards/issues/137).
### [Jellyfin](jellyfin.md)
* New: [Forgot Password. Please try again within your home network to initiate the password reset process.](jellyfin.md#forgot-password.-please-try-again-within-your-home-network-to-initiate-the-password-reset-process.)
    If you're an external jellyfin user you can't reset your password unless you are part of the LAN. This is done because the reset password process is simple and insecure.
    If you don't care about that and still think that the internet is a happy and safe place [here](https://wiki.jfa-go.com/docs/password-resets/) and [here](https://github.com/hrfee/jellyfin-accounts/issues/12) are some instructions on how to bypass the security measure.
    For more information also read [1](https://github.com/jellyfin/jellyfin/issues/2282) and [2](https://github.com/jellyfin/jellyfin/issues/2869).
### [Matrix](matrix.md)
* New: How to install matrix.
    ```bash
    sudo apt install -y wget apt-transport-https
    sudo wget -O /usr/share/keyrings/element-io-archive-keyring.gpg https://packages.element.io/debian/element-io-archive-keyring.gpg
    echo "deb [signed-by=/usr/share/keyrings/element-io-archive-keyring.gpg] https://packages.element.io/debian/ default main" | sudo tee /etc/apt/sources.list.d/element-io.list
    sudo apt update
    sudo apt install element-desktop
    ```
### [Mediatracker](mediatracker.md)
* Correction: [Update ryot comparison with mediatracker.](mediatracker.md#alternatives)
    [Ryot](https://github.com/IgnisDa/ryot) has a better web design, it also has a [jellyfin scrobbler](https://github.com/IgnisDa/ryot/pull/195), although it's not [yet stable](https://github.com/IgnisDa/ryot/issues/187). There are other UI tweaks that is preventing me from migrating to ryot such as [the easier media rating](https://github.com/IgnisDa/ryot/issues/284) and [the percentage over five starts rating system](https://github.com/IgnisDa/ryot/issues/283).
### [retroarch](retroarch.md)
* New: Install retroarch instructions.
    To add the stable branch to your system type:
    ```bash
    sudo add-apt-repository ppa:libretro/stable
    sudo apt-get update
    sudo apt-get install retroarch
    ```
    Go to Main Menu/Online Updater and then update everything you can:
    - Update Core Info Files
    - Update Assets
    - Update controller Profiles
    - Update Databases
    - Update Overlays
    - Update GLSL Shaders
### [Vim](vim.md)
* New: Update treesitter language definitions.
    To do so you need to run:
    ```vim
    :TSInstall 
    ```
    To update the parsers run
    ```vim
    :TSUpdate
    ```
* New: [Telescope changes working directory when opening a file.](vim.md#telescope-changes-working-directory-when-opening-a-file)
    In my case was due to a snippet I have to remember the folds:
    ```
    vim.cmd[[
      augroup remember_folds
        autocmd!
        autocmd BufWinLeave * silent! mkview
        autocmd BufWinEnter * silent! loadview
      augroup END
    ]]
    ```
    It looks that it had saved a view with the other working directory so when a file was loaded the `cwd` changed. To solve it I created a new `mkview` in the correct directory.
# Arts
## Dancing
### [Lindy Hop](lindy.md)
* New: New Charleston, lindy and solo jazz videos.
    Charleston:
    - The DecaVita Sisters:
       - [Freestyle Lindy Hop & Charleston](https://www.youtube.com/watch?v=OV6ZDuczkag)
       - [Moby "Honey"](https://www.youtube.com/watch?v=ciMFQnwfp50)
    Solo Jazz:
    - [Pedro Vieira at Little Big Swing Camp 2022](https://yewtu.be/watch?v=pmxn2uIVuUY)
    Lindy Hop:
    - The DecaVita Sisters:
       - [Compromise - agreement in the moment](https://youtu.be/3DhD2u5Eyv8?si=2WKisSvEB3Z8TVMy)
       - [Lindy hop improv](https://www.youtube.com/watch?v=qkdxcdeicLE)
## Maker
### [Vial](vial.md)
* New: Introduce Vial.
    [Vial](https://get.vial.today/) is an open-source cross-platform (Windows, Linux and Mac) GUI and a QMK fork for configuring your keyboard in real time.
    Even though you can use a [web version](https://vial.rocks/) you can install it locally through an [AppImage](https://itsfoss.com/use-appimage-linux/)
    - Download [the latest version](https://get.vial.today/download/)
    - Give it execution permissions
    - Add the file somewhere in your `$PATH`
    On linux you [need to configure an `udev` rule](https://get.vial.today/manual/linux-udev.html).
    For a universal access rule for any device with Vial firmware, run this in your shell while logged in as your user (this will only work with sudo installed):
    ```bash
    export USER_GID=`id -g`; sudo --preserve-env=USER_GID sh -c 'echo "KERNEL==\"hidraw*\", SUBSYSTEM==\"hidraw\", ATTRS{serial}==\"*vial:f64c2b3c*\", MODE=\"0660\", GROUP=\"$USER_GID\", TAG+=\"uaccess\", TAG+=\"udev-acl\"" > /etc/udev/rules.d/99-vial.rules && udevadm control --reload && udevadm trigger'
    ```
    This command will automatically create a `udev` rule and reload the `udev` system.
## Video Gaming
### [Age of Empires](age_of_empires.md)
* New: How to fight Vietnamese with Mongols.
    Gain early map control with scouts, then switch into steppe lancers and front siege, finally castle in the face when you clicked to imperial.
    - [Example Hera vs Mr.Yo in TCI](https://yewtu.be/watch?v=20bktCBldcw)
## [Gardening](gardening.md)
* New: [Fertilizing with manure.](gardening.md#fertilizing-with-manure)
    Manure is one of the best organic fertilizers for plants. It's made by the accumulation of excrements of bats, sea birds and seals and it usually doesn't contain additives or synthetic chemical components.
    This fertilizer is rich in nitrogen, phosphorus and potassium, which are key minerals for the growth of plants. These components help the regeneration of the soil, the enrichment in terms of nutrients and also acts as fungicide preventing plagues.
    Manure is a fertilizer of slow absorption, which means that it's released to the plants in an efficient, controlled and slow pace. That way the plants take the nutrients when they need them.
    The best moment to use it is at spring and depending on the type of plant you should apply it between each month and a half and three months. It's use in winter is not recommended, as it may burn the plant's roots.
    Manure can be obtained in dust or liquid state. The first is perfect to scatter directly over the earth, while the second is better used on plant pots. You don't need to use much, in fact, with just a pair of spoons per pot is enough. Apply it around the base of the plant, avoiding it's touch with leaves, stem or exposed roots, as it may burn them. After you apply them remember to water them often, keep in mind that it's like a heavy greasy sandwich for the plants, and they need water to digest it.
    For my indoor plants I'm going to apply a small dose (one spoon per plant) at the start of Autumn (first days of September), and two spoons at the start of spring (first days of March).