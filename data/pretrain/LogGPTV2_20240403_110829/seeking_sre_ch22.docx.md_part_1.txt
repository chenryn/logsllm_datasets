# SRE 作为一种成功文化
Kurt Andersen, LinkedIn
  如果你阅读了很多关于站点可靠性工程（SRE）的实践或站点可靠性工程师（也称为
SRE）讨论的专业问题，很快就会感觉到中心概念是失败、或失败的后果、或者更少失败，或避免分布式计算系统中的故障。但是，当专注于实现业务成功时，SRE
才是最有效率和最有价值的，而不是专注于预防或减轻故障。 Peter Senge
捕获了一些关键的心理变化，这些变化是网站可靠性工程的特征：
> 从关注零件到关注整体的思想转变，\...
> 从对面对现实的反应到创造未来。Senge, Peter
> M（1990年）。*第五门学科：学习型组织的艺术与实践*。伦敦：Random
> House。
释放 SRE
的全部优势涉及文化变革，使团队能够全方位优化服务生命周期，从而成功交付业务指标（服务级别），以取悦用户。当与支持性的企业文化保持一致时，SRE
团队和实践最为有效。为了从公司中的 SRE
工作中获得全部价值，确保在整个服务生命周期（从构思到停用）中主动考虑站点可靠性也很重要。
# SRE 是从哪里来的？
  SRE
的想法在2003年到2007年的某个时候开始显现。这与 "DevOps"运动的概念产生的时期差不多，而且两者都起源于硅谷的科技行业。虽然
DevOps 专注于如何可靠地创建软件并将其部署到生产中的前沿，但作为 SRE
概念缔造者的公司已经拥有了有效的实践，这些实践将被称为持续集成（CI）和持续部署（CD）。随着这些基本原则的到位，SRE
的实践能够在以后的价值链中关注客户利益。
> SRE
> 在软件和系统工程的交汇处工作，以维持高度可靠和可扩展的分布式系统工程，也有一些必要的机制来支持这种实践。Tim
> O\'Reilly[*未来是什么，为什么我们要影响它？*](https://www.oreilly.com/tim/wtf-book.html)
任何给定产品或服务的完整生态系统不仅包括用于提供服务的实用程序（设备、软件、第三方功能），还包括数据、其他服务提供商、用户以及所有这些组件。所有这些组件都位于成熟的
SRE 团队的职权范围内。为了完成工作，SRE
依靠测量和数据，而不是猜测或本能，遵循 开尔文勋爵的格言：
> 当你能衡量你所说的，并用数字表达它时，你就会知道一些关于它的东西。但是，当你不能衡量它，或者你不能用数字来表达它时，你的知识是微薄的，不能令人满意的；它可能是知识的开始，但在思想上几乎无法推进到科学的阶段，不管事情是什么。关于"电气测量单元"的演讲（1883
> 年 5 月 3
> 日），[*发表在《大众讲座》*，第I卷，第73页](https://archive.org/stream/popularlecturesa01kelvuoft#page/73/mode/1up%7C).
SRE
使用度量来定义和跟踪对服务级别目标（SLO）和领先指标的遵守情况，这些指标传统上称为 关键绩效指标（KPI）。直接衡量"用户满意度"仍然有些困难，但
SRE
最终侧重于通过提供适当的可靠性和响应级别来提高用户满意度和业务成功度，从而允许其余产品开发团队为用户提供持续改进的功能集。
 Tim O\'Reilly
在[*未来是什么，为什么我们要影响它？*](https://www.oreilly.com/tim/wtf-book.html)中描述了
SRE 的作用 \..."其核心是 debug 软件开发与操作之间的脱节 \...
建立新的结缔组织"。当系统从复杂领域转变为复杂/混乱作为分布式体系结构时，出现的复杂性尤其如此。即使这种特征是正确的（SREs
非常能够调试复杂的分布式系统）该功能是关注整个系统聚合的副产品，同时能够定位影响系统的行为和性能。在最有效的模式中，站点可靠性考虑从初始概念阶段被设计到服务中，就像[bug
在软件生命周期的早期最容易被修复一样](https://www.researchgate.net/figure/255965523_IBM-System-Science-Institute-Relative-Cost-of-Fixing-Defects)。
支持"在云中诞生"的服务交付模型的团体和组织中出现了 SRE
实践。这些组织的命脉是持续提供在线价值。使用在线服务，用户几乎实时受到系统更改的影响，而不是通过某些中间软件分发机制在时间和地点上被删除。如果站点未"启动"且以适当的响应速度正确运行，则它不可靠，并且无法为最终用户提供预期的好处。这种即时或接近实时的反馈回路有助于整个站点级的可靠性工程。大规模系统行为的快速反馈可实现一种质量上不同的方法，类似于单元测试和测试驱动设计
（TDD）
更改软件工程并提高单个软件件的可靠性的方式。可靠性工程是一门涵盖安全学科的更广泛的学科。应用于计算功能的
SRE 实践正在超越其云源文化，将在其他上下文中实施，包括面向内部的关键 IT
服务、银行、制造和其他细分市场。  
# SRE 的关键价值
 站点可靠性的实践有四个关键值。不同的组织可能会略微不同地表达它们或者有不同的相对排名，但它们在行业中广泛传播。如果不将这些作为基本的文化价值观，那么
SRE 就不会以目前已知的方式存在。正如[*有效的
DevOps*](http://shop.oreilly.com/product/0636920039846.do)
专注于"大规模建立协作，亲和力和工具文化"的至关重要性一样，SRE
不仅仅是一系列技术和实践。这些技术和实践有机地源于核心文化价值观。以下是这些基本价值观：
-   保持网站运行
-   使开发团队能够"做正确的事情"/分布式决策
-   将运维视为工程问题
-   通过做出、衡量和履行的承诺实现业务成功
## 保持网站运行
对于 SRE
团队而言，保持网站（或网站）"在线"是他们所有日常工作的最终目标。尽管在
SRE 中使用"站点在线"这一短语甚至"站点"一词的使用都回到了 SRE
实践的起源，但 SRE
的工作和技能正在不断增长，以保持服务、网络、内部和外部的基础架构、以及产品都可靠。正如"软件正在吞吃世界"
Marc Andreessen
所著[为何软件正在吞吃世界（付费阅读）](https://www.wsj.com/articles/SB10001424053111903480904576512250915629460)，在
[Andreessen
Horowitz](https://a16z.com/2016/08/20/why-software-is-eating-the-world/)
重新发表。曾经谈到的软件化的通用芯片如今何等重要，如今 SRE
实践变得比芯片组设计或组装正确的独特硬件组更重要。为了术语，我将在本章中坚持使用术语"站点"（或"网站"），但请在广泛包容的意义上理解该术语。SRE
实践的价值可以与 HTTP 对互联网的重要性相比。
正如"灰色失败：云扩展系统的致命问题"所指出的那样，Peng Huang, Chuanxiong
Guo, Lidong Zhou, Jacob R. Lorch, Yingnong Dang, Murali Chintalapati,
Randolph Yao, ["Gray Failure: The Achilles' Heel of Cloud-Scale
Systems"](https://www.microsoft.com/en-us/research/wp-content/uploads/2017/06/paper-1.pdf)对于现代网站而言，"在线"意味着什么，这可能存在很多细微差别。分布式系统可能以灾难性方式失败，例如2017年5月27日的英国航空公司事件，Jude
Karabus, [，"英国航空的全球 IT
系统故障是由于电压峰值超标"](http://www.theregister.co.uk/2017/05/27/ba_it_systems_failure_down_to_power_supply_issue/)。一周之后有了更详细的报告，Gareth
Corfield，["英国航空 IT
系统故障：不间断电源故障"](https://www.theregister.co.uk/2017/06/02/british_airways_data_centre_configuration/)。但通常情况下，可靠性工程的理念倾向于轻描淡写，可能更恰当地称为"灰色故障"或"黄了"而不喜欢用"停电"来描述故障影响。
SRE 用于尽可能保持功能可操作的一些技术包括：
-   故障域封闭
-   冗余系统
-   高负荷下的服务水平降级
### 故障域封闭
   如果站点是使用单一代码库和单个后备数据库构建的，那么如果这些单点故障中的任何一个遇到中断，它将很容易受到完全"停顿"的影响。为了防范这种情况，站点可靠性实践将对代码进行分段（使用微服务架构或跨不同故障域的功能分段）以及底层数据存储，以便任何关键组件中的故障都不会使一切都失效。请注意，在这方面，与其他各种方法一样，SRE正在将良好的软件工程实践扩展到"系统"或更"宏观"级别。在每个级别，类似的原则都适用，但可用的工具随着规模的变化而不同。
 高度可靠的系统设计包括持续的意识，以避免单点故障。随着在商品硬件上使用水平扩展服务变得比投资"铁架服务器"更经济和普遍，分布式系统原则对于正确执行系统变得更加重要。这些原则中最重要的可能是从[分布式计算的谬误](https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing)中得出的结论：任何时候任何事情都可能失败，即使是在较简单的环境中曾经被认为是坚如磐石的。大规模工作也会产生另一个后果：在处理数以亿计或数十亿事件时，问题仅影响"百万分之一"。在这样的环境中，最大限度地减少预期故障造成的损失成为关键的设计准则。目标必须从*避免故障*转向减少或遏制故障*影响*。
### 冗余系统
  就像硬件团队已经学会使用多个后备冗余一样，站点可靠性团队也使用冗余来保护他们的站点。冗余可以通过多个位置，多个数据副本以及为技术堆栈的每个级别引入多个服务提供商，从域名系统（DNS）到内容传递网络（CDN）。
### 性能降级
   并非所有功能都同等重要，并非所有用户都需要使用相同的功能集。作为工程可靠性能的一部分，可以进行经济和业务权衡，以确保最重要的功能继续运行，同时在环境中存在问题时牺牲不太重要的功能。理想情况下，"可牺牲"系统和"基本"系统之间存在设计良好的边界，并继续与开发团队合作，以确保在故障条件下的优雅降级是站点可靠性团队的关键功能。  
## 授权团队"做正确的事情"
  SRE
专注于分布式系统的运维，最好的团队能认识到他们自己也难免受到站点管理中的压力和失败模式的影响。为了实现扩展自己的团队和提高效率的终极目标，SRE
需要努力教育他们在开发团队的同伴，使他们能够找到正确的信息并做出正确的选择：围绕"站点在线"的重要性促进共享所有权。很多事情都是通过培养共同的价值观以及展示
SRE 团队不断带来的价值来实现的。