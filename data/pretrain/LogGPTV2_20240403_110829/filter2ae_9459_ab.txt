## 回到过去，一个（Runtime）链接
不过这里有一个很大的瓶颈：要运行其他程序，所有这些技术都使用标准的`execve`（2）（最后一种情况调用的也是相关的`execveat`（2））。定制的SELinux配置文件或syscall审计的存在可以很容易进行阻拦，并且在最近的强制启用SELinux的Android版本中，确实是这样。  
还有另一种叫做用户空间exec或`ul_exec`的技术;
然而它模仿了内核在执行`execve`期间是如何初始化进程的，并将控制权移交给运行时链接器：`ld.so`（8）。
这是该领域最早的技术之一，[由grugq开创](https://grugq.github.io/docs/ul_exec.txt)，它因为与以上技术相比较为繁琐而从未被推行过。
针对x86_64有一个[优化和重写的版本](http://www.stratigery.com/userlandexec.html)，但是它实现了自己的标准库，因此很难扩展并且无法在现代的堆溢出保护环境下编译。
Linux的世界与15年前这种技术首次发布时的情况截然不同了。
现在，默认有40多位地址空间和位置独立的可执行文件，将`execve`进程拼凑在一起更为直接。
当然，我们对堆栈地址进行硬编码并不能保证90%以上的可用率，但程序也不再依赖于它的常量，所以我们几乎可以把它放在任何地方并且少用内存地址。
Linux环境现在也比2004年更加普遍、有价值并且受到更受保护，因此在某些情况下，这种努力还是值得的。
### 过程
根据执行方法和环境，模拟`execve`的工作可能有两个要求。 首先，我们需要页面对齐的内存分配以及在填充后使内存可执行的能力。
因为它需要JIT、内置的library加载器`dlopen`（3）以及一些DRM实现，所以很难从系统中完全删除。
然而，SELinux可以限制可执行内存的分配，而一些像Android这样的自包含平台使用这些限制可以很好地控制未经批准的浏览器或DRM库。
接下来，我们要求能够任意跳入所述内存。
例如在C或shellcode中，它确实需要脚本语言中的一个完整的外部函数调用接口（FFI），排除非XS的Perl实现。
[grugq详述](https://grugq.github.io/docs/ul_exec.txt)的过程以一种微妙而有趣的方式发生了改变。
即使开发已经全部完成，但整体的步骤还是一样的。 现代GNU /
Linux用户空间的一个安全特性是它不太关心特定的内存地址，这使我们可以更灵活地实现我们的其他类型的安全特性。内核在辅助向量中传递给Runtime还有更多的[提示](http://man7.org/linux/man-pages/man3/getauxval.3.html)，可以查找到原始数据，但大多数程序在大多数操作系统架构中都可以使用简单的方法。
### 工具
许多工具的没落都是因为过时了，特别是在开源和安全领域。
`execve`模拟器没有其他方法了出现了，大家对两个`ul_exec`的实现也几乎没有兴趣，（据我所知）也很少有这方面的更新。
Linux
Meterpreter的实现目前不支持`execute`命令中常见的[`-m`选项](https://blog.rapid7.com/2012/05/08/eternal-sunshine-of-the-spotless-ram/)，这个选项在Windows上以合法的程序作为幌子，并完全在内存中执行恶意命令。使用这个和一个回退技术或者以上两个技术将为我们提供在内存运行上传的文件的功能，以及一些小窍门。例如：映射额外的合法文件，或在在将控制权交给上传的可执行文件之前更改进程名称，可以完全复制`-m`。一个很好的副作用是，这也将使构建和分发插件更容易，因为它们将不再需要在构建时制作成内存映像。
为了实现这一点，我正在创建一个与我们的Linux
Meterpreter共存的共享链接库`mettle`。它不依赖于任何Meterpreter代码，但默认情况下，它将使用其toolchain进行构建。它是免费的，可以打包成你想要的任何后渗透手法。如果您有任何问题或建议，请查看[pull
request](https://github.com/rapid7/mettle/pull/154)。
这里有一个示例，可以通过`strace`进行跟踪分析。使用该库。
为了减少普通跟踪调试相关输出的干扰，我们只使用`％process`跟踪表达式来仅查看与进程生命周期相关的调用，如`fork`，`execve`和`exit`。
在x86_64上，`％process`表达式还获取了`arch_prctl`系统调用，该调用仅用于x86_64，仅用于设置线程本地存储。
`execve`来自`strace`启动可执行文件，第一对`arch_prctl`调用来自库初始化。直到目标库启动自己的一对`arch_prctl`调用并打印出我们的消息。
    $ strace -e trace=%process ./noexec $(which cat) haxmas.txt
    execve("./noexec", ["./noexec", "/usr/bin/cat", "haxmas.txt"], 0x7ffdcbdf0bc0 /* 23 vars */) = 0
    arch_prctl(0x3001 /* ARCH_??? */, 0x7fffa750dd20) = -1 EINVAL (Invalid argument)
    arch_prctl(ARCH_SET_FS, 0x7f17ca7db540) = 0
    arch_prctl(0x3001 /* ARCH_??? */, 0x7fffa750dd20) = -1 EINVAL (Invalid argument)
    arch_prctl(ARCH_SET_FS, 0x7f17ca7f3540) = 0
    Merry, HaXmas!
    exit_group(0)                           = ?
    +++ exited with 0 +++
### 结束
有了Mettle的这个新库，我们希望提供一种长期，隐秘的方法，可以在攻陷的Linux机器上可靠地加载程序。 如果您有任何问题或建议，请查看我的[pull
request](https://github.com/rapid7/mettle/pull/154)的过程，我们*
nix的[payload](https://github.com/rapid7/mettle)，或在[Slack添上加我们](https://join.slack.com/t/metasploit/shared_invite/enQtMzg5NDk5MDYzNTM3LWQ5Y2Q2ODIyMTM3ZTA5OGE5OTA3NDk1OGY0ZDFiYjM1NjhjZjllN2E3OWQ4YTRmMTU3NmRkMmQ2ZDY3NDYzMWM)。