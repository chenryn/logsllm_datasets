outcome is determined by both the OS and DNS software (some-
times either one). In addition, we also explored historical versions
of OS and DNS software because a large fraction of resolvers on the
Internet may not be running the latest software. We then conduct a
measurement study to measure the vulnerable population of open
resolvers on the Internet that satisfy the vulnerable conditions.
Due to measurement constraints, we also conduct a small-scale
experiment on ICMP redirect attack (see Appendix A).
5.1 Conditions of Successful Attacks
Below we summarize the key necessary conditions for a resolver
to be considered exploitable.
an ICMP error before processing it. [OS]
• 𝐶1: Must check the port number in the embedded UDP packet of
• 𝐶2: Must cache the MTU or next-hop information. [OS]
• 𝐶3: Must not ignore the ICMP fragment needed or ICMP redirect
• 𝐶4: Must not shutdown or retransmit the query after receiving
messages in the kernel. [APP/OS]
In summary, for the latest versions of BIND and Unbound on the
latest kernels, their IPv6 sockets can be exploited for the ephemeral
port scan. In contrast, dnsmasq is always vulnerable as it does
not set any special socket option. Nevertheless, in practice, IPv6 is
gaining significant traction in deployment [28]. In fact, as we will
ICMP messages. [APP/OS]
For 𝐶1&𝐶2, they form the basis of side channels in the kernel. As
mentioned earlier, the latest Linux kernel satisfies both conditions.
For 𝐶3, interestingly the latest Linux kernel allows applica-
tions to pass special socket options (either IP_PMTUDISC_OMIT or
IP_PMTUDISC_INTERFACE) which will cause the kernel to ignore
the frag needed messages for the corresponding sockets. However,
this feature was introduced in Linux kernel 3.15. Therefore, whether
or not the condition is satisfied depends on both the kernel and DNS
application. Nevertheless, ICMP redirect messages are not affected
by any socket option and are always processed in the kernel.
For 𝐶4, it is a necessary condition because the port scan assumes
the ephemeral port stays the same after it is successfully detected.
If an application decides to shutdown the connection or retransmit
the query after receiving an ICMP message (embedding the correct
ephemeral port), then the detected ephemeral port will be effectively
forfeited. Interestingly, this is again determined by the OS kernel as
well as the application. First of all, the OS kernel has to expose the
ICMP error messages to the application layer (again ICMP redirect
never gets exposed). Secondly, an application may choose to react
to such errors in different ways.
In Table 1, we summarize the vulnerable combinations of Linux
kernel and DNS software according to the above conditions. We
break down the Linux kernel versions into three groups, represent-
ing three major changes that affect the above conditions. Similarly,
we break down BIND into two groups because of some key changes
in behaviors. As we can see, 𝐶1 is always satisfied in all recent
kernel versions. Regarding 𝐶2, the Linux kernel since 3.6 is vul-
nerable in IPv4 because of the introduced exception cache. It took
Linux some time until 4.15 to port the same exception cache to IPv6.
Therefore, IPv6 redirect attacks, which only require 𝐶1&𝐶2 to work,
are only exploitable on kernel versions newer than 4.15. Regarding
𝐶3, Since Linux 3.15, the socket options mentioned above become
available and BIND decides to use IP_PMTUDISC_OMIT since 9.12
for IPv4 sockets, leaving the condition satisfied for IPv6 sockets
only. For 𝐶4, since Linux 3.15 and BIND 9.12, IP_PMTUDISC_OMIT
on IPv4 sockets similarly causes the kernel to notify the application
regarding ICMP frag needed errors for sockets that have private-
facing ports (therefore does not apply to older Unbound versions
and dnsmasq). Furthermore, BIND will retransmit the query (with
a different ephemeral port) upon receiving such a notification. As
we can see, the interactions between the kernel and application
layer are very much inconsistent and evolving constantly. We will
discuss the reasoning behind them in §8.2.
Session 12C: Traffic Analysis and Side Channels CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3405Table 1: Exploitability of Different DNS Software and Kernel Versions
3.6-3.14
BIND
BIND
9.3-9.11
>9.12
6
4
4
✓
✓
✓
✗
✓
✓
✗ 𝑉𝑝𝑟𝑖𝑣
𝑉𝑝𝑟𝑖𝑣
✓
✓
✓
✓
✓
✓
✗ 𝑉𝑝𝑟𝑖𝑣
𝑉𝑝𝑟𝑖𝑣
✓
✓
3.15-4.14
BIND
BIND
>9.12
9.3-9.11
6
6
4
6
4
✓
✓ ✓ ✓
✓
✗ ✓ ✗
✗
✓
✗ 𝑉𝑝𝑟𝑖𝑣
✗
✓
✓
✓ ✗ ✓
✓ ✗ ✓
✓
✓
✗ 𝑉𝑝𝑟𝑖𝑣
✗
✓
✗
✗
✗
BIND
9.3-9.11
6
4
✓
✓
✓
✓
✗ 𝑉𝑝𝑟𝑖𝑣 𝑉𝑝𝑟𝑖𝑣
✓
✓
✗ 𝑉𝑝𝑟𝑖𝑣 𝑉𝑝𝑟𝑖𝑣
✓
✓
>4.15
BIND
>9.12
4
6
✓
✓
✓
✓
✗ 𝑉𝑝𝑟𝑖𝑣
✓
✗
✗
✓
✗ 𝑉𝑝𝑟𝑖𝑣
Unbound
>1.5.2
6
✓
✓
4
✓
✓
✗ 𝑉𝑝𝑟𝑖𝑣1
✗
✓
✗ 𝑉𝑝𝑟𝑖𝑣1
✓
✓
dnsmasq
ANY
4/6
✓
✓
𝑉𝑝𝑢𝑏
✓
✓
𝑉𝑝𝑢𝑏
✓
Kernel Version
DNS Software
Version
IP Version
Redir Vuln.
𝐶1
𝐶2
𝐶3
𝐶4
Frag Vuln.
Vuln. in Any
1: 𝑉𝑝𝑢𝑏 before 1.13.0.
Note: 𝑉𝑝𝑢𝑏 and 𝑉𝑝𝑟𝑖𝑣 indicate vulnerable to public-facing or private-facing port scans respectively.
✓
✓
✓
show in §5.2, half of the popular public DNS resolvers support IPv6.
Furthermore, our attack is fully capable of exploiting a dual-stack
(IPv4/IPv6) resolver, combined with techniques such as name server
muting (as will be discussed in §6.3).
Due to space constraints, we did not show the analysis results of
historic versions of dnsmasq and Unbound in Table 1. For dnsmasq,
it is vulnerable on all kernel versions since 3.6. For Unbound, it has
a similar road map as BIND and starts to use IP_PMTUDISC_OMIT
since 1.5.2. The only difference is that it used public-facing ports
in the past. This leads Unbound to be not only vulnerable in the
IPv4 of kernel versions between 3.15 and 4.14, but also IPv6 in the
same kernel ranges. This is because the public-facing ports can be
successfully scanned (as shown in Figure 3) as long as the MTU or
redirect information is stored somewhere in the kernel. In practice,
for kernel version 3.15 to 4.14, such info is stored in a tree which
can only time out as opposed to being forcefully evicted.
Other Operating Systems. We have additionally analyzed FreeBSD
(whose networking stack is also used by macOS) and Windows with
regard to the previously described conditions.
For FreeBSD, it is not vulnerable because 𝐶1&𝐶2 are broken for
ICMP frag needed and redirect respectively. For ICMP frag needed
messages, even though the OS will check the embedded four-tuple
and act accordingly, it does not store any PMTU information in any
kernel-maintained data structure and thus breaking 𝐶2. Instead, it
simply forwards the error to the application layer. This is actually
not compliant with RFC1191 [47] which explicitly states that "the
IP layer should associate each PMTU value that it has learned
with a specific path" and "it (a host) should be able to cache a per-
host route for every active destination". For ICMP redirect packets,
surprisingly, FreeBSD will blindly accept them without checking
the embedded four-tuple and therefore breaks 𝐶1.
For Windows, we reverse-engineered tcpip.sys and ntoskrnl
of a Windows 10 copy. We found that there is a similar hash table
storing the path information (including the MTU). However, we
did not find any eviction algorithm and it will only stop inserting
new exceptions after the kernel runs out of memory. Although
the attacker can still leverage this as a side channel, due to the
large and different memory configurations, it is hard to do so in
practice. However, lacking a cap on memory consumption of the
hash table would lead to a potential DoS attack on the entire system.
Interestingly, although this breaks the private-facing port scan, a
public-facing port scan is nevertheless feasible on Windows because
it does not rely on being able to evict exception entries in any shared
resources (See §4.4). On Windows Server 2019, the built-in Microsoft
DNS server uses public-facing ports which makes it vulnerable.
5.2 Open Resolvers
Now we move on to measure the vulnerable population in the
real world. Note in this section we focus on the attack leveraging
ICMP frag needed messages only. This is because ICMP redirect
based attacks require IP spoofing even for port scans, and we are
concerned that it is invasive to conduct such a large-scale IP spoof-
ing experiment. Instead, we defer to Appendix A for a small-scale
measurement of the conditions of the redirect-based attacks.
Setup and Dataset. Open resolvers represent hosts that provide
recursive DNS lookup services to the public. We obtain a list of
open resolvers from Censys.io [22], which contains 1.84M IPv4
addresses, serving as the dataset used in our measurement. Unfor-
tunately, the list does not contain IPv6 open resolver addresses.
Nevertheless, these IPv4 addresses only correspond to the fron-
tend IPs. In practice, most open resolvers will go through backend
servers that conduct the actual DNS query on behalf of the fron-
tend. Therefore, we design a method to solicit queries from IPv6
backend servers. Specifically, we control two domain names whose
NS records point to an IPv4 and an IPv6 address respectively. For
each frontend IP, we always send two queries asking for the IPv4
and IPv6 domain names respectively. For the domain where its NS
record points to an IPv6-only address, it will force a backend server
to use its IPv6 address to contact our name server. In the end, we
are able to receive 129,196 queries from IPv4 addresses and 27,541
from IPv6 addresses.
Methodology. When a backend server (either IPv4 or IPv6) con-
tacts our name server, we will perform the following four tests
that approximately correspond to the four conditions we discussed
earlier.
T1: The rejection of the ICMP error when the embedded source
port is incorrect. To verify 𝐶1 in §5.1, we first send a PING to the
resolver and record the reply. Then we craft an ICMP fragment