title:Efficiency improvements for signature schemes with tight security
reductions
author:Jonathan Katz and
Nan Wang
Efﬁciency Improvements for Signature Schemes
with Tight Security Reductions
Jonathan Katz
Dept. of Computer Science
University of Maryland
College Park, MD
Nan Wang∗
Dept. of Computer Science
University of Maryland
College Park, MD
PI:EMAIL
PI:EMAIL
ABSTRACT
Much recent work has focused on constructing eﬃcient dig-
ital signature schemes whose security is tightly related to
the hardness of some underlying cryptographic assumption.
With this motivation in mind, we show here two approaches
which improve both the computational eﬃciency and signa-
ture length of some recently-proposed schemes:
Diﬃe-Hellman signatures. Goh and Jarecki [18] recently
analyzed a signature scheme which has a tight security re-
duction to the computational Diﬃe-Hellman problem. Un-
fortunately, their scheme is less eﬃcient in both computation
and bandwidth than previous schemes relying on the (re-
lated) discrete logarithm assumption. We present a modiﬁ-
cation of their scheme in which signing is 33% more eﬃcient
and signatures are 75% shorter; the security of this scheme
is tightly related to the decisional Diﬃe-Hellman problem.
PSS. The probabilistic signature scheme (PSS) designed by
Bellare and Rogaway [3] uses a random salt to enable a tight
security reduction to, e.g., the RSA problem. Coron [12]
subsequently showed that a shorter random salt can be used
without impacting the security of the scheme. We show a
variant of PSS which avoids the random salt altogether yet
has an equally-tight security reduction. This furthermore
yields a version of PSS-R (PSS with message recovery) with
optimal message length. Our technique may also be used to
improve the eﬃciency of a number of other schemes.
Categories and Subject Descriptors
E.3 [Data Encryption]: Public-Key Cryptosystems
General Terms
Algorithms, Security, Theory
∗
Research supported in part by National Science Foundation
grant CCR-0208005.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’03, October 27–31, 2003, Washington, DC, USA.
Copyright 2003 ACM 1-58113-738-9/03/0010 ...$5.00.
Keywords
Digital Signatures
1.
INTRODUCTION
Beginning in the early 1980’s [19], the science of cryptog-
raphy has focused on constructing signature schemes that
can be rigorously proven secure based on speciﬁc compu-
tational assumptions. A proof of security for a given con-
struction generally proceeds by a reduction showing how an
adversary “breaking” the scheme in polynomial time can be
used to “solve” in polynomial time some underlying problem
assumed to be diﬃcult (e.g., RSA). Classically, results of this
sort have been asymptotic; i.e., the security reduction only
guarantees that, as the security parameter (e.g., key length)
increases, no poly-time adversary can forge signatures with
“suﬃciently high” probability. As ﬁrst emphasized by Bel-
lare and Rogaway [3], however, such results say little about
the security of a scheme in practice for a particular choice of
key size and against adversaries investing a speciﬁc amount
of computational eﬀort. Thus, for practical considerations
it is critical to focus on concrete security reductions which
give explicit bounds on an adversary’s success probability as
a function of their expended resources.
We provide a simpliﬁed example which we hope will pro-
vide further motivation (see [3, 11, 12, 18] for further discus-
sion). Assume a signature scheme (relying on some appro-
priate computational assumption) which an adversary ex-
pending 1 year of computational eﬀort can “break” with
probability at most a· 2
−b·κ, where κ is the key size and a, b
are constants. Under an asymptotic deﬁnition of security,
this scheme is secure. Yet, in practice, we do not know what
key size to choose unless a and b are known! Furthermore,
the values of a, b are crucial for determining the eﬃciency
of the scheme: for a desired security level (i.e., probability
−32 following 1 year of eﬀort, hav-
of adversary forgery) of 2
ing a ≈ 1 and b ≈ 1/10 means that κ should be roughly
320; on the other hand, if a ≈ 232 and b ≈ 1/20 then we
require κ ≈ 1280 with a concomitant decrease in eﬃciency
to achieve the same level of security.
The above discussion illustrates that comparisons of the
eﬃciency of two signature schemes must take into account
the relative security each scheme oﬀers; alternately, such a
comparison must take into account the eﬃciency of the secu-
rity reduction (recall, this shows how an adversary “break-
ing” the signature scheme can be used to “break” some prob-
lem assumed to be hard). In some sense, the most eﬃcient
155(cid:4) ≈ ε in time t
reduction we can hope for is one in which an adversary who
“breaks” a signature scheme with probability ε in time t can
be used to “break” the underlying computational problem
(cid:4) ≈ t; a reduction of this
with probability ε
sort is called tight. A scheme with a non-tight reduction will
necessarily require larger key sizes to provide the same secu-
rity as a scheme with a tight security reduction. Indeed, it
is often the case that obtaining a reasonable level of security
from a scheme with a non-tight reduction requires using a
key length which is completely impractical!
(cid:4) ≈ 2
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
to be 1 year and ε
These observations have sparked a signiﬁcant amount of
research aimed at developing eﬃcient signature schemes with
security reductions as tight as possible. As an example, con-
sider “hash-and-sign” signatures based on trapdoor permu-
tations (e.g., RSA). Let ε
be the probability of inverting
a speciﬁed trapdoor permutation (e.g., RSA with 1024-bit
moduli) in some time t
; in the discussion which follows, one
−60 for concreteness but
may take t
the argument is generally applicable. The full-domain-hash
(FDH) signature scheme [1, 3] bounds the probability of
forgery by ε ≈ (qs + qh)ε
for any adversary running in time
t ≈ t
, where qs (resp., qh) is the number of signatures (resp.,
hash function evaluations) obtained by the adversary. Since
signatures can only be obtained from the legitimate signer
while the adversary can evaluate the hash function on its
own, it has been suggested [3, 11, 12] to use qs ≈ 230 and
qh ≈ 260. But if we take ε
−60 then the security guaran-
tee provided by the signature scheme is meaningless (since
ε ≈ 1)! We stress that it is meaningless only for speciﬁc
−60; by choosing a diﬀer-
trapdoor permutations with ε
ent trapdoor permutation (say, RSA with 2048-bit moduli)
with smaller ε
, meaningful results can be obtained.
(cid:4) ≈ 2
(cid:4) ≈ 2
(cid:4)
This again illustrates the eﬀect of concrete security on
eﬃciency: In the above example, one must use a trapdoor
permutation with very low probability of inversion (e.g., by
using longer key sizes) in order to obtain any security at all.
Coron [11] has subsequently shown how to improve the
security reduction for FDH for the speciﬁc case when RSA
is used as the trapdoor permutation1. Coron’s results bound
the probability of forgery in this case by ε ≈ qsε
. Returning
to our above example, choosing our RSA key length so that
(cid:4) ≈ 2
−60 now gives a reasonable guarantee of security (i.e.,
ε
ε ≈ 2
−30).
(cid:4)
(cid:4)
To further improve the tightness of the security reduction
for “hash-and-sign”-type signatures, the probabilistic signa-
ture scheme (PSS) was introduced [3] and shown to achieve
tight security reduction ε ≈ ε
when RSA is used as the trap-
door permutation (although footnote 1 applies here as well).
The key feature distinguishing PSS from FDH is that in the
former there are multiple valid signatures corresponding to
any given message. This is used in an essential way in the
proof of security; indeed, it has been shown [12] that “hash-
and-sign” signature schemes without this property cannot
have a tight security reduction.
To ensure multiple valid signatures for a message, PSS
uses a “salt” r which is randomly generated and hashed
along with the message each time a signature is produced.
The original work [3] required |r| = 180 (for values of qs, qh
as above) to achieve a tight security reduction. Coron later
observed [12] that the length of the salt could be reduced to
|r| = 30 while obtaining essentially the same security bound
1Actually, this result can be generalized [11, 13] but this is
unimportant for the present discussion.
(Coron also shows [12] that this value of |r| is optimal for
PSS). Reducing the length of r is important since it reduces
the randomness used. More importantly, when extending
PSS to provide message recovery, the length of the recover-
able messages increases as the length of r decreases.
The above discussion concerns what may be termed “FDH-
like” schemes. In other related work, Micali and Reyzin [23]
improve the exact security of some signature schemes de-
rived using the Fiat-Shamir heuristic [16]. More recently,
Goh and Jarecki [18] analyzed a signature scheme with a
tight security reduction to the computational Diﬃe-Hellman
problem; interestingly, this scheme is the ﬁrst discrete-log
based scheme with tight security (in particular, the scheme
avoids the “forking lemma” of [24]). We stress that the goal
of achieving tight security reductions is not limited to signa-
ture schemes; the issue is critical for public-key encryption
(see, for example, [28, Section 1.3]) and there has been much
research in this area as well (e.g., [2, 5, 17, 27, 21]).
The above-mentioned schemes are all analyzed in the ran-
dom oracle model [16, 1], which is also used here. It is crucial
to note that a proof of security in the random oracle model
does not guarantee security when this oracle is instantiated
by any particular cryptographic hash function [9]. However,
a proof in this model does indicate that there are no “in-
herent” weaknesses in the scheme itself; thus, a scheme with
a proof of security in the random oracle model is clearly
preferable to a scheme with no proof of security at all.
1.1 Summary of Results
Motivated by the above line of research, we focus on eﬃ-
cient signature schemes with tight security reductions, and
improve the eﬃciency (both in terms of computation and
signature length) of a number of recently-proposed schemes.
Diﬃe-Hellman signatures. Various discrete-log based
signature schemes, providing alternatives to RSA-based sig-
natures, are known [14, 25, 15, 8]. Proofs of security for
these schemes — when available — are related to the hard-
ness of computing discrete logarithms in some underlying
group.
Interestingly, Goh and Jarecki [18] recently noted
that none of these schemes has a tight security reduction to
the discrete logarithm problem; this motivated their anal-
ysis of a signature scheme proposed previously [10] whose
security they show is tightly related to the hardness of the
computational Diﬃe-Hellman (CDH) problem in some un-
derlying group. They further argue [18] that basing security
on this, possibly stronger, assumption is not a severe draw-
back since for many cryptographic groups used in practice
the CDH problem is as hard as the discrete logarithm prob-
lem (using current techniques). Unfortunately, the scheme
they analyze is less eﬃcient than previous discrete-log based
schemes: signing requires 3 modular exponentiations, and
signatures are roughly 1400 bits long for the key sizes and
cryptographic groups they recommend.
We show here a simple modiﬁcation of their scheme which
results in much better eﬃciency: signing requires only 2 ex-
ponentiations (both of which may be computed “oﬀ-line” be-
fore the message is known) and signatures are only 320 bits
long. The security of our scheme is tightly related to the
hardness of the decisional Diﬃe-Hellman (DDH) problem
rather than the CDH problem. Although the DDH prob-
lem is possibly easier than the CDH problem in general, we
note (as in [18]) that these problems are equally hard for
many commonly-used groups as far as current techniques
are concerned. We discuss this further in Section 2.2.
PSS. Recall that PSS [3] is a probabilistic variant of FDH
which introduces a random salt r to achieve a tight security
reduction. (The general technique of using a random salt to
achieve a tight(er) security reduction is applicable to other
schemes also; for example, the technique may be used to
improve the exact security of the “short signatures” of [7]
and is explicitly used to obtain tight security in [18].) As
noted by Coron [12], the original analysis of Bellare and
Rogaway requires |r| ≥ 2 · log2 qh + log2 1/ε
(where the
notation is as in the previous section); taking qh ≈ 260 and
(cid:4) ≈ 2
−60 gives a salt length |r| of 180 bits. Reﬁning the
ε
analysis, Coron showed that a tight security reduction is
obtained even for |r| ≥ log2 qs; this leads to a substantial
improvement since, in practice, we have qs ≈ 230.
(cid:4)
Here, we show how to avoid the random salt altogether
while still obtaining a tight proof of security. This does not
contradict the result of Coron [12, Theorem 5] that a tight
security reduction is impossible for “FDH-like” schemes with
unique signatures since our scheme is constructed such that
every message has exactly two signatures. However, al-
though a given message has more than one valid signature,
only one of these will ever be produced by the legitimate
signer even if the message is signed multiple times. We ac-
complish this via a deterministic signing algorithm that does
not require the signer to maintain any state, It is interesting