# Efficiency Improvements for Signature Schemes with Tight Security Reductions

**Authors:**
- Jonathan Katz
- Nan Wang

**Affiliations:**
- Department of Computer Science, University of Maryland, College Park, MD

**Contact:**
- Email: PI:EMAIL (for both authors)

## Abstract

Recent research has focused on constructing efficient digital signature schemes whose security is tightly related to the hardness of underlying cryptographic assumptions. Motivated by this, we present two approaches that enhance both the computational efficiency and signature length of recently proposed schemes:

1. **Diffie-Hellman Signatures:** Goh and Jarecki [18] analyzed a signature scheme with a tight security reduction to the computational Diffie-Hellman problem. However, their scheme is less efficient in terms of computation and bandwidth compared to previous schemes based on the discrete logarithm assumption. We propose a modification that reduces signing operations by 33% and shortens signatures by 75%. The security of our modified scheme is tightly related to the decisional Diffie-Hellman problem.

2. **PSS (Probabilistic Signature Scheme):** Bellare and Rogaway [3] introduced PSS, which uses a random salt to enable a tight security reduction, for example, to the RSA problem. Coron [12] later showed that a shorter random salt could be used without compromising security. We present a variant of PSS that eliminates the need for a random salt while maintaining an equally tight security reduction. This also yields an optimal message length for PSS-R (PSS with message recovery). Our technique can be applied to improve the efficiency of other schemes as well.

**Categories and Subject Descriptors:**
- E.3 [Data Encryption]: Public-Key Cryptosystems

**General Terms:**
- Algorithms, Security, Theory

**Research Support:**
- This work was supported in part by the National Science Foundation grant CCR-0208005.

**Copyright:**
- Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
- CCS'03, October 27â€“31, 2003, Washington, DC, USA.
- Copyright 2003 ACM 1-58113-738-9/03/0010 ...$5.00.

**Keywords:**
- Digital Signatures

## 1. Introduction

Since the early 1980s [19], cryptography has focused on constructing signature schemes that can be rigorously proven secure based on specific computational assumptions. A proof of security typically involves a reduction showing how an adversary breaking the scheme in polynomial time can be used to solve some underlying hard problem (e.g., RSA) in polynomial time. Classically, such results are asymptotic, meaning they only guarantee that no polynomial-time adversary can forge signatures with "sufficiently high" probability as the security parameter increases. However, as emphasized by Bellare and Rogaway [3], such results provide little practical insight into the security of a scheme for a specific key size and against adversaries with a specific amount of computational effort. Therefore, it is crucial to focus on concrete security reductions that give explicit bounds on an adversary's success probability as a function of their expended resources.

To illustrate, consider a signature scheme (relying on some appropriate computational assumption) where an adversary expending one year of computational effort can break the scheme with probability at most \(a \cdot 2^{-b \cdot \kappa}\), where \(\kappa\) is the key size and \(a, b\) are constants. Under an asymptotic definition of security, this scheme is secure. However, in practice, we need to know the values of \(a\) and \(b\) to determine the appropriate key size. For example, if we desire a security level of \(2^{-32}\) after one year of effort, having \(a \approx 1\) and \(b \approx 1/10\) means \(\kappa\) should be around 320. Conversely, if \(a \approx 2^{32}\) and \(b \approx 1/20\), then \(\kappa\) should be approximately 1280, leading to a significant decrease in efficiency to achieve the same level of security.

This discussion highlights that comparisons of the efficiency of two signature schemes must account for the relative security each offers. The most efficient reduction we can hope for is one where an adversary who breaks a signature scheme with probability \(\epsilon\) in time \(t\) can be used to break the underlying computational problem with probability \(\epsilon' \approx \epsilon\) in time \(t' \approx t\); such a reduction is called tight. A scheme with a non-tight reduction will require larger key sizes to provide the same security as a scheme with a tight security reduction. Indeed, obtaining a reasonable level of security from a scheme with a non-tight reduction often requires impractical key lengths.

These observations have spurred significant research aimed at developing efficient signature schemes with the tightest possible security reductions. For instance, consider "hash-and-sign" signatures based on trapdoor permutations (e.g., RSA). Let \(\epsilon'\) be the probability of inverting a specified trapdoor permutation (e.g., RSA with 1024-bit moduli) in some time \(t'\). The Full-Domain-Hash (FDH) signature scheme [1, 3] bounds the probability of forgery by \(\epsilon \approx (q_s + q_h) \epsilon'\) for any adversary running in time \(t \approx t'\), where \(q_s\) (resp., \(q_h\)) is the number of signatures (resp., hash function evaluations) obtained by the adversary. Since signatures can only be obtained from the legitimate signer, while the adversary can evaluate the hash function on its own, it has been suggested [3, 11, 12] to use \(q_s \approx 2^{30}\) and \(q_h \approx 2^{60}\). If \(\epsilon' \approx 2^{-60}\), the security guarantee provided by the signature scheme is meaningless (since \(\epsilon \approx 1\)). By choosing a different trapdoor permutation (e.g., RSA with 2048-bit moduli) with smaller \(\epsilon'\), meaningful results can be obtained.

Coron [11] improved the security reduction for FDH when RSA is used as the trapdoor permutation, bounding the probability of forgery by \(\epsilon \approx q_s \epsilon'\). Choosing an RSA key length so that \(\epsilon' \approx 2^{-60}\) now gives a reasonable guarantee of security (i.e., \(\epsilon \approx 2^{-30}\)).

To further improve the tightness of the security reduction for "hash-and-sign"-type signatures, the Probabilistic Signature Scheme (PSS) was introduced [3] and shown to achieve a tight security reduction \(\epsilon \approx \epsilon'\) when RSA is used as the trapdoor permutation. The key feature distinguishing PSS from FDH is that in PSS, there are multiple valid signatures for any given message. This is essential for the proof of security; indeed, it has been shown [12] that "hash-and-sign" signature schemes without this property cannot have a tight security reduction.

To ensure multiple valid signatures for a message, PSS uses a "salt" \(r\) that is randomly generated and hashed along with the message each time a signature is produced. The original work [3] required \(|r| = 180\) (for values of \(q_s, q_h\) as above) to achieve a tight security reduction. Coron later observed [12] that the length of the salt could be reduced to \(|r| = 30\) while obtaining essentially the same security bound. Reducing the length of \(r\) is important because it decreases the randomness used and increases the length of recoverable messages when extending PSS to provide message recovery.

The above discussion concerns "FDH-like" schemes. In other related work, Micali and Reyzin [23] improved the exact security of some signature schemes derived using the Fiat-Shamir heuristic [16]. More recently, Goh and Jarecki [18] analyzed a signature scheme with a tight security reduction to the computational Diffie-Hellman problem; interestingly, this scheme is the first discrete-log-based scheme with tight security (avoiding the "forking lemma" of [24]). The goal of achieving tight security reductions is not limited to signature schemes; it is also critical for public-key encryption (see, for example, [28, Section 1.3]).

The mentioned schemes are analyzed in the random oracle model [16, 1], which is also used here. It is crucial to note that a proof of security in the random oracle model does not guarantee security when the oracle is instantiated by any particular cryptographic hash function [9]. However, a proof in this model indicates that there are no inherent weaknesses in the scheme itself, making it preferable to a scheme with no proof of security.

### 1.1 Summary of Results

Motivated by the above research, we focus on efficient signature schemes with tight security reductions and improve the efficiency (both in terms of computation and signature length) of several recently proposed schemes:

1. **Diffie-Hellman Signatures:** Various discrete-log-based signature schemes, providing alternatives to RSA-based signatures, are known [14, 25, 15, 8]. Proofs of security for these schemes, when available, are related to the hardness of computing discrete logarithms in some underlying group. Goh and Jarecki [18] noted that none of these schemes has a tight security reduction to the discrete logarithm problem. They analyzed a previously proposed scheme [10] whose security is tightly related to the hardness of the computational Diffie-Hellman (CDH) problem. They argue that basing security on this, possibly stronger, assumption is not a severe drawback since, for many cryptographic groups used in practice, the CDH problem is as hard as the discrete logarithm problem. Unfortunately, their scheme is less efficient, requiring 3 modular exponentiations and producing signatures of about 1400 bits for the recommended key sizes and cryptographic groups.

   We present a simple modification of their scheme that significantly improves efficiency: signing requires only 2 exponentiations (both of which can be computed offline before the message is known) and produces signatures of only 320 bits. The security of our scheme is tightly related to the hardness of the decisional Diffie-Hellman (DDH) problem rather than the CDH problem. Although the DDH problem is possibly easier than the CDH problem in general, we note (as in [18]) that these problems are equally hard for many commonly-used groups as far as current techniques are concerned. We discuss this further in Section 2.2.

2. **PSS (Probabilistic Signature Scheme):** Recall that PSS [3] is a probabilistic variant of FDH that introduces a random salt \(r\) to achieve a tight security reduction. The general technique of using a random salt to achieve a tighter security reduction is applicable to other schemes as well. As noted by Coron [12], the original analysis of Bellare and Rogaway requires \(|r| \geq 2 \cdot \log_2 q_h + \log_2 1/\epsilon'\) (where the notation is as in the previous section). Taking \(q_h \approx 2^{60}\) and \(\epsilon' \approx 2^{-60}\) gives a salt length \(|r|\) of 180 bits. Refining the analysis, Coron showed that a tight security reduction is obtained even for \(|r| \geq \log_2 q_s\), leading to a substantial improvement since, in practice, \(q_s \approx 2^{30}\).

   Here, we show how to avoid the random salt altogether while still obtaining a tight proof of security. This does not contradict the result of Coron [12, Theorem 5] that a tight security reduction is impossible for "FDH-like" schemes with unique signatures, as our scheme is constructed such that every message has exactly two signatures. However, although a given message has more than one valid signature, only one of these will ever be produced by the legitimate signer, even if the message is signed multiple times. We accomplish this via a deterministic signing algorithm that does not require the signer to maintain any state.