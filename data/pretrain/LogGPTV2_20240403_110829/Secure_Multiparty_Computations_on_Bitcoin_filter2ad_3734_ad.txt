not open the commitment by time t then every other party earns
d B. More precisely: for every honest Pi the Ledger contains
a transaction, whose value is d B, that can be redeemed with
a key known only to Pi.
Let us also comment on the formal aspects. To satisfy the
page limit, we do not provide the full formal model, however,
from the discussion above it should be clear how such a
model can be deﬁned. We allow negligible error probabilities
both in binding and in hiding. Also, the last security property
(concerning the deposits) has to hold only with overwhelming
probability. As these notions are asymptotic, this requires using
a security parameter, denoted by k. Of course, in reality the
parameter k is partially ﬁxed by the Bitcoin speciﬁcation
(e.g. we cannot modify the length of the outputs of the hash
functions).
A. The implementation
Our implementation can be based on any standard com-
mitment scheme as long as it is hash-based, by which we
mean that it has the following structure. Let H be a hash
function. During the commitment phase the committer sends
to the recipient some value denoted h (which essentially
constitutes his “commitment” to x), and in the opening phase
the committer sends to the recipient a value s, such that
H(s) = h. If H(s) (cid:7)= h then the recipient does not accept
the opening. Otherwise he computes x from s (there exists an
algorithm that allows him to do it efﬁciently). One example of
such a commitment scheme is as follows. Suppose x ∈ {0, 1}∗.
In the commitment phase C computes s := (x||r), where r
is chosen uniformly at random from {0, 1}k, and sends to
every recipient h = H(s). In the opening phase the committer
sends to every recipient s,
the recipient checks if indeed
h = H(s), and recovers x by stripping-off the last k bits from
s. The binding property of this commitment follows from the
collision-resistance of the hash function H, since to be able to
open the commitment in two different ways a malicious sender
would need to ﬁnd collisions in H. For the hiding property we
need to assume that H is a random oracle. We think that this
is satisfactory since anyway the security of the Bitcoin PoWs
relies on the random oracle assumption. Clearly, if H is a
random oracle then no adversary can obtain any information
about x if he does not learn s (which an honest C keeps private
until the opening phase).
The basic idea of our protocol is as follows. The committer
talk independently to each recipient Pi. For each of
will
them he will create in the commitment phase a transaction
Commit i with value d that normally will be redeemed by
him in the opening phase with a transaction Open i. The
transaction Commit i will be constructed in such a way that the
Open i transaction has to automatically open the commitment.
Technically it will be done by constructing the output script
of Commit i in such a way that the redeeming transaction has
to provide s (which will therefore become publicly known as
all transactions are publicly visible). Of course, this means
that the money of the committer is “frozen” until he reveals
s. However, to set a limit on the waiting time of the recipient,
we also require the committer to send to Pi a transaction
450
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:33 UTC from IEEE Xplore.  Restrictions apply. 
PayDeposit i that can redeem Commit i if time t passes. Of
course, Pi, after receiving PayDeposit i needs to check if it
is correct. The commitment scheme and the transactions are
depicted on Figure 1 (page 8). We now state the following
lemma, whose proof will appear in the extended version of
this paper.
Lemma 1: The CS scheme on Figure 1 is a Bitcoin-based
commitment scheme.
IV. THE LOTTERY PROTOCOL
As discussed in the introduction, as an example of an
application of the “MPCs on Bitcoin” concept we construct
a protocol for a lottery executed among a group of parties
P1, . . . , PN . We say that a protocol is a fair lottery protocol
if it is correct and secure. To deﬁne correctness assume all
the parties are following the protocol and the communication
channels between them are secure (i.e. it reliably transmits the
messages between the parties without delay).
We assume that before the protocol starts,
the Ledger
contains unredeemed standard transactions T 1, . . . , T N known
to all the parties, all of value 1 B and each T i can be redeemed
with a key known only to Pi. Moreover, since we will use
the commitment scheme from Section III, the parties need
to have money to pay the “deposits”. This money will come
j}, where i, j ∈ {1, . . . , N} and i (cid:7)= j,
from transactions {U i
such that each U i
j can be redeemed only by Pi and has value
d B (for some parameter d whose value will be determined
later). We assume that these transactions are on the Ledger
before the protocol starts. The protocol has to terminate in time
O(maxLedger) and at the moment of termination, the Ledger
has to contain a standard transaction with value N B which can
be redeemed with a key known only to Pw, were w is chosen
uniformly at random from the set {1, . . . , N}. The Ledger
also contains transactions for paying back the deposits, i.e. we
require that for each Pi there is an additional transaction (that
can be redeemed only by him) whose value is (N − 1)d B.
Of course, in the case of the non-zero fees these values will
be slightly smaller, but to keep things simple we assume here
that these fees are zero.
2 , . . . , U 1
in particular,
To deﬁne security, look at the execution of the protocol
from the point of view of one party, say P1 (the case of
the other parties is symmetric). Assume P1 is honest and
hence,
the Ledger contains the transactions
T 1, U 1
N , whose recipient is P1 and whose value is: 1 B
in case of T 1 and d B in case of the U 1
j ’s. Obviously, P1 has no
guarantee that the protocol will terminate successfully, as the
other party can, e.g., leave the protocol before it is completed.
What is important is that P1 should be sure that she will not
lose money because of this termination (in particular: the other
parties should not be allowed to terminate the protocol after he
learned that P1 won). This is formalized as follows: we deﬁne
the payoff of P1 in the execution of the protocol to be equal
to the difference between the money that P1 invested and the
money that he won. More formally, the payoff of P1 is equal
to X1 − ((N − 1) · d + 1) B, where X1 is deﬁned as the total
sum of the values of transactions from the execution of the
protocol (including T 1, U 1
N ) that P1 (and only him)
can redeem when the protocol terminates. (The payoff of any
other participant Pi is deﬁned symmetrically.)
2 , . . . , U 1
Ideally we would like to require that the expected payoff of
each honest player cannot be negative13. However, since the
security of our protocol relies on non-perfect cryptographic
primitives, such as commitment schemes, we have to take
into account a negligible probability of the adversary breaking
them. Hence, we require only that these values are “at least
negligible”14 in some security parameter k (that is used in the
crypto primitives). Formally, we say that the protocol is secure
if for any strategy of the adversary, that controls the network
and corrupts the other parties, (1) the execution of the protocol
terminates in time O(maxLedger), and (2) the expected payoff
of each honest party is at least negligible. The expected values
are taken over all the randomness in the experiment (i.e. both
the internal randomness of the parties and the adversary). We
also note that, of course, a dishonest participant can always
interrupt in a very early stage. This is not a problem if the
transaction fees are zero. In case of the non-zero transaction
fees this may cause the other parties to lose a small amount
of money. This problem is addressed in Section VI.
A. The protocol
Our protocol is built on top of the classical coin-tossing
protocol of Blum [9] that is based on cryptographic commit-
ments. The Blum’s scheme adapted to N parties is very simple
— each party Pi commits herself to an element bi ∈ ZN .
Then, the parties open their commitments and the winner is
Pw where w = (b1 + ··· + bN mod N ) + 1. As described in
the introduction, this protocol does not directly work for our
applications, and we need to adapt it to Bitcoin. In particular,
in our solution creating and opening the commitments are done
by the transactions’ scripts using double SHA-256 hashing15.
Due to the technical limitations of Bitcoin scripting language
in its current form16, instead of random numbers bi, the parties
themselves to strings si sampled with uniformly
commit
random length from S N
k := {0, 1}8k∪. . .∪{0, 1}8(k+N−1), i.e.
the set of strings of length k, . . . , (k + N − 1) bytes17, where
k is the security parameter. The winner is determined by the
winner choosing function f (s1, . . . , sN ) and in our protocol
i=1 |si| ≡ ((cid:4) − 1) mod N, where
f (s1, . . . , sN ) = P(cid:2) if
s1, . . . , sN are the secret strings chosen from S N
k and |si| is a
length of string si in bytes. Honest users ﬁrst randomly choose
length (in bytes) of their strings from the set {k, . . . , k+N−1}
(cid:2)N
13In principle it can be actually positive if the adversary plays against his
own ﬁnancial interest.
14Formally: a function α : N → R is at least negligible if there exists a
function β : N → R such that for every i we have α(i) ≥ β(i) and β is
negligible, i.e. its absolute value is asymptotically smaller than the inverse of
any polynomial.
15Notice that use of single SHA-256 would be insecure here, because
it is constructed using Merkle–Damgard transformation and therefore it is
susceptible to the length extension attack [21]. It this attack an adversary
which knows H(x) can compute a value H(x||y) for some string y controlled
by him without the knowledge of the original value x. It could allow to
completely compromise the lottery protocol, because the winner choosing
function (described later) highly depends on the lengths of the secrets.
16Most of the more advanced instructions (e.g. concatenation, accessing
particular bits in a string or arithmetic on big integers) have been disabled
out of concern that
the clients may have bugs in their implementation.
Therefore, computing length (in bytes), hashing and testing equality are the
only operations available for strings.
from SN
considered invalid, and the transaction is not evaluated.
17The transactions in the protocol will always check if their inputs are
k (whenever they are supposed to be from this set). If not, they are
451
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:33 UTC from IEEE Xplore.  Restrictions apply. 
and then generate a random string of the appropriate length.
It is easy to see that as long as one of the parties draws her
string’s length uniformly, then the output of f (s1, . . . , sN ) is
also uniformly random.
1) First attempt: For simplicity let us start with the case
of N = 2 parties, called Alice A and Bob B. Their key
pairs are A and B (resp.) and their unredeemed transactions
placed on the Ledger before the protocol starts are denoted
T A, U A and T B, U B. We start with presenting a naive and
insecure construction of the protocol, and then show how
it can be modiﬁed to obtain a secure scheme. The protocol
starts with Alice and Bob creating their new pairs of keys
(cid:3)A = ( (cid:3)A.sk , (cid:3)A.pk ) and (cid:3)B = ( (cid:3)B.sk , (cid:3)B.pk ), respectively. These
keys will be used during the protocol. It is actually quite
natural to create new keys for this purpose, especially since
many Bitcoin manuals recommend creating a fresh key pair
for every transaction. Anyway, there is a good reason to do
it in our protocol, e.g. to avoid interference with different
sessions of the same protocol. Both parties announce their
public keys to each other. Alice and Bob also draw at random
their secret strings sA and sB (respectively) from the set S 2
k
and they exchange the hashes hA = H(sA) and hB = H(sB).
Moreover Alice sends to the Ledger the following transaction:
PutMoney A
1 (in: T A)
([PutMoney A
1 ])
in-script: sigA
out-script(body, σ): ver (cid:2)A
val: 1 B
(body, σ)
Bob also sends to the Ledger a transaction PutMoney B
1 deﬁned
symmetrically (recall that T A and T B are standard transactions
that can be redeemed by Alice and Bob respectively). If at any
point later a party P ∈ {A, B} realizes that the other party is
cheating, then the ﬁrst thing P will do is to “take the money
and run”, i.e. to post a transaction that redeems PutMoney P
1 .
We will call it “halting the execution”. This can clearly be
done as long as PutMoney P
1 has not been redeemed by some
other transaction. In the next step one of the parties constructs
a transaction Compute 1 deﬁned as follows:
Compute 1(in: PutMoney A
1 , PutMoney B
1 )
in-script2: sig (cid:2)B
([Compute 1)]
in-script1: sig (cid:2)A
([Compute 1)]
out-script(body, σ1, σ2, ˆsA, ˆsB):
(ˆsA, ˆsB ∈ S2
∧ f (ˆsA, ˆsB) = A ∧ ver (cid:2)A
(ˆsA, ˆsB ∈ S2
∧ f (ˆsA, ˆsB) = B ∧ ver (cid:2)B
val: 2 B
k ∧ H(ˆsA) = hA ∧ H(ˆsB) = hB
(body, σ1)) ∨
k ∧ H(ˆsA) = hA ∧ H(ˆsB) = hB
(body, σ2))
Note that the body of Compute 1 can be computed from the
publicly-available information. Hence this construction can be
implemented as follows: ﬁrst one of the players, say, Bob com-
putes [Compute 1], and sends his signature sig (cid:2)B([Compute 1)]
on it to Alice. Alice adds her signature sig (cid:2)A([Compute 1)] and
posts the entire transaction Compute 1 to the Ledger.
The output script of Compute 1 is an alternative of two
conditions. Since they are symmetric (with respect to A and
B) let us only look at the ﬁrst condition (call it γ). To make it
evaluate to true on body one needs to provide as “witnesses”
(σ1, ˆsA, ˆsB) where ˆsA and ˆsB are the pre-images of hA and hB
(with respect to H) from S 2
k. Clearly the collision-resistance of
452
H implies that ˆsA and ˆsB have to be equal to sA and sB (resp.).
Hence γ can be satisﬁed only if the winner choosing function
f evaluates to A on input (sA, sB). Since only Alice knows
the private key of (cid:3)A, only she can later provide a signature
σ1 that would make the last part of γ (i.e.: “ver (cid:2)A(body, σ1)”)
evaluate to true.
Clearly before Compute 1 appears on the Ledger each party
P can “change her mind” and redeem her initial transaction
PutMoney P
1 , which would make the transaction Compute 1
invalid. As we said before, it is ok for us if one party interrupts
the coin-tossing procedure as long as she had to decide about
doing it before she learned that she lost. Hence, Alice and
Bob wait until Compute 1 appears on the Ledger before they
proceed to the step in which the winner is determined. This
ﬁnal step is simple: Alice and Bob just broadcast sA and sB,
respectively. Now: if f (sA, sB) = A then Alice can redeem
the transaction Compute 1 in a transaction ClaimMoney A
1
constructed as:
ClaimMoney A
1 (in: Compute 1)
([ClaimMoney A
in-script: sig (cid:2)A
out-script(body, σ): verA(body, σ)
val: 2 B