### Status Code Returned by the Operation
A status code of 0 is returned even if the named pipe does not exist.

### Examples

#### Sending Two Messages on a Pipe
```sql
DECLARE
    v_status INTEGER;
BEGIN
    v_status := DBMS_PIPE.CREATE_PIPE('pipe');
    DBMS_OUTPUT.PUT_LINE('CREATE_PIPE status: ' || v_status);
    
    DBMS_PIPE.PACK_MESSAGE('Message #1');
    v_status := DBMS_PIPE.SEND_MESSAGE('pipe');
    DBMS_OUTPUT.PUT_LINE('SEND_MESSAGE status: ' || v_status);
    
    DBMS_PIPE.PACK_MESSAGE('Message #2');
    v_status := DBMS_PIPE.SEND_MESSAGE('pipe');
    DBMS_OUTPUT.PUT_LINE('SEND_MESSAGE status: ' || v_status);
END;
```
**Output:**
```
CREATE_PIPE status: 0
SEND_MESSAGE status: 0
SEND_MESSAGE status: 0
```

#### Receiving and Unpacking the First Message
```sql
DECLARE
    v_item VARCHAR2(80);
    v_status INTEGER;
BEGIN
    v_status := DBMS_PIPE.RECEIVE_MESSAGE('pipe', 1);
    DBMS_OUTPUT.PUT_LINE('RECEIVE_MESSAGE status: ' || v_status);
    
    DBMS_PIPE.UNPACK_MESSAGE(v_item);
    DBMS_OUTPUT.PUT_LINE('Item: ' || v_item);
END;
```
**Output:**
```
RECEIVE_MESSAGE status: 0
Item: Message #1
```

#### Removing the Pipe
```sql
SELECT DBMS_PIPE.REMOVE_PIPE('pipe') FROM DUAL;
```
**Output:**
```
remove_pipe
-------------
0
(1 row)
```

#### Attempting to Retrieve the Next Message After Pipe Deletion
```sql
DECLARE
    v_item VARCHAR2(80);
    v_status INTEGER;
BEGIN
    v_status := DBMS_PIPE.RECEIVE_MESSAGE('pipe', 1);
    DBMS_OUTPUT.PUT_LINE('RECEIVE_MESSAGE status: ' || v_status);
END;
```
**Output:**
```
RECEIVE_MESSAGE status: 1
```

### 3.10.7 RESET_BUFFER
The `RESET_BUFFER` procedure resets the "pointer" to the session’s local message buffer back to the beginning of the buffer. This causes subsequent `PACK_MESSAGE` calls to overwrite any existing data in the message buffer.

#### Example
```sql
DECLARE
    v_status INTEGER;
BEGIN
    DBMS_PIPE.PACK_MESSAGE('Hi, John');
    DBMS_PIPE.PACK_MESSAGE('Can you attend a meeting at 3:00, today?');
    DBMS_PIPE.PACK_MESSAGE('If not, is tomorrow at 8:30 ok with you?');
    
    DBMS_PIPE.RESET_BUFFER;
    
    DBMS_PIPE.PACK_MESSAGE('Hi, Bob');
    DBMS_PIPE.PACK_MESSAGE('Can you attend a meeting at 9:30, tomorrow?');
    
    v_status := DBMS_PIPE.SEND_MESSAGE('pipe');
    DBMS_OUTPUT.PUT_LINE('SEND_MESSAGE status: ' || v_status);
END;
```
**Output:**
```
SEND_MESSAGE status: 0
```

#### Receiving and Unpacking the Message
```sql
DECLARE
    v_item VARCHAR2(80);
    v_status INTEGER;
BEGIN
    v_status := DBMS_PIPE.RECEIVE_MESSAGE('pipe', 1);
    DBMS_OUTPUT.PUT_LINE('RECEIVE_MESSAGE status: ' || v_status);
    
    DBMS_PIPE.UNPACK_MESSAGE(v_item);
    DBMS_OUTPUT.PUT_LINE('Item: ' || v_item);
    
    DBMS_PIPE.UNPACK_MESSAGE(v_item);
    DBMS_OUTPUT.PUT_LINE('Item: ' || v_item);
END;
```
**Output:**
```
RECEIVE_MESSAGE status: 0
Item: Hi, Bob
Item: Can you attend a meeting at 9:30, tomorrow?
```

### 3.10.8 SEND_MESSAGE
The `SEND_MESSAGE` function sends a message from the session’s local message buffer to the specified pipe.

#### Syntax
```sql
status := DBMS_PIPE.SEND_MESSAGE(pipename VARCHAR2, [timeout INTEGER], [maxpipesize INTEGER]);
```

#### Parameters
- `pipename`: Name of the pipe.
- `timeout`: Wait time in seconds. Default is 86400000 (1000 days).
- `maxpipesize`: Maximum capacity of the pipe in bytes. Default is 8192 bytes.
- `status`: Status code returned by the operation.

#### Possible Status Codes
| Status Code | Description |
|-------------|-------------|
| 0           | Success     |
| 1           | Time out    |
| 3           | Function interrupted |

### 3.10.9 UNIQUE_SESSION_NAME
The `UNIQUE_SESSION_NAME` function returns a name unique to the current session.

#### Example
```sql
DECLARE
    v_session VARCHAR2(30);
BEGIN
    v_session := DBMS_PIPE.UNIQUE_SESSION_NAME;
    DBMS_OUTPUT.PUT_LINE('Session Name: ' || v_session);
END;
```
**Output:**
```
Session Name: PG$PIPE$5$2752
```

### 3.10.10 UNPACK_MESSAGE
The `UNPACK_MESSAGE` procedure copies the data items of a message from the local message buffer to a specified program variable. The message must be placed in the local message buffer with the `RECEIVE_MESSAGE` function before using `UNPACK_MESSAGE`.

#### Syntax
```sql
DBMS_PIPE.UNPACK_MESSAGE(item OUT { DATE | NUMBER | VARCHAR2 | RAW });
```

#### Parameter
- `item`: Type-compatible variable that receives a data item from the local message buffer.

### 3.10.11 Comprehensive Example
The following example uses a pipe as a "mailbox". The procedures to create the mailbox, add a multi-item message to the mailbox (up to three items), and display the full contents of the mailbox are enclosed in a package named `mailbox`.

#### Package Definition
```sql
CREATE OR REPLACE PACKAGE mailbox
IS
    PROCEDURE create_mailbox;
    PROCEDURE add_message (
        p_mailbox VARCHAR2,
        p_item_1 VARCHAR2,
        p_item_2 VARCHAR2 DEFAULT 'END',
        p_item_3 VARCHAR2 DEFAULT 'END'
    );
    PROCEDURE empty_mailbox (
        p_mailbox VARCHAR2,
        p_waittime INTEGER DEFAULT 10
    );
END mailbox;

CREATE OR REPLACE PACKAGE BODY mailbox
IS
    PROCEDURE create_mailbox
    IS
        v_mailbox VARCHAR2(30);
        v_status INTEGER;
    BEGIN
        v_mailbox := DBMS_PIPE.UNIQUE_SESSION_NAME;
        v_status := DBMS_PIPE.CREATE_PIPE(v_mailbox, 1000, FALSE);
        
        IF v_status = 0 THEN
            DBMS_OUTPUT.PUT_LINE('Created mailbox: ' || v_mailbox);
        ELSE
            DBMS_OUTPUT.PUT_LINE('CREATE_PIPE failed - status: ' || v_status);
        END IF;
    END create_mailbox;

    PROCEDURE add_message (
        p_mailbox VARCHAR2,
        p_item_1 VARCHAR2,
        p_item_2 VARCHAR2 DEFAULT 'END',
        p_item_3 VARCHAR2 DEFAULT 'END'
    )
    IS
        v_item_cnt INTEGER := 0;
        v_status INTEGER;
    BEGIN
        DBMS_PIPE.PACK_MESSAGE(p_item_1);
        v_item_cnt := 1;
        
        IF p_item_2 != 'END' THEN
            DBMS_PIPE.PACK_MESSAGE(p_item_2);
            v_item_cnt := v_item_cnt + 1;
        END IF;
        
        IF p_item_3 != 'END' THEN
            DBMS_PIPE.PACK_MESSAGE(p_item_3);
            v_item_cnt := v_item_cnt + 1;
        END IF;
        
        v_status := DBMS_PIPE.SEND_MESSAGE(p_mailbox);
        
        IF v_status = 0 THEN
            DBMS_OUTPUT.PUT_LINE('Added message with ' || v_item_cnt || ' item(s) to mailbox ' || p_mailbox);
        ELSE
            DBMS_OUTPUT.PUT_LINE('SEND_MESSAGE in add_message failed - status: ' || v_status);
        END IF;
    END add_message;

    PROCEDURE empty_mailbox (
        p_mailbox VARCHAR2,
        p_waittime INTEGER DEFAULT 10
    )
    IS
        v_msgno INTEGER := 0;
        v_itemno INTEGER := 0;
        v_item VARCHAR2(100);
        v_status INTEGER;
    BEGIN
        v_status := DBMS_PIPE.RECEIVE_MESSAGE(p_mailbox, p_waittime);
        
        WHILE v_status = 0 LOOP
            v_msgno := v_msgno + 1;
            DBMS_OUTPUT.PUT_LINE('****** Start message #' || v_msgno || ' ******');
            
            BEGIN
                LOOP
                    v_status := DBMS_PIPE.NEXT_ITEM_TYPE;
                    EXIT WHEN v_status = 0;
                    
                    DBMS_PIPE.UNPACK_MESSAGE(v_item);
                    v_itemno := v_itemno + 1;
                    DBMS_OUTPUT.PUT_LINE('Item #' || v_itemno || ': ' || v_item);
                END LOOP;
                
                DBMS_OUTPUT.PUT_LINE('******* End message #' || v_msgno || ' *******');
                DBMS_OUTPUT.PUT_LINE('*');
                v_itemno := 0;
                v_status := DBMS_PIPE.RECEIVE_MESSAGE(p_mailbox, 1);
            END;
        END LOOP;
        
        DBMS_OUTPUT.PUT_LINE('Number of messages received: ' || v_msgno);
        v_status := DBMS_PIPE.REMOVE_PIPE(p_mailbox);
        
        IF v_status = 0 THEN
            DBMS_OUTPUT.PUT_LINE('Deleted mailbox ' || p_mailbox);
        ELSE
            DBMS_OUTPUT.PUT_LINE('Could not delete mailbox - status: ' || v_status);
        END IF;
    END empty_mailbox;
END mailbox;
```

#### Execution of Procedures in `mailbox`
1. **Creating a Mailbox:**
   ```sql
   EXEC mailbox.create_mailbox;
   ```
   **Output:**
   ```
   Created mailbox: PG$PIPE$13$3940
   ```

2. **Adding Messages to the Mailbox:**
   ```sql
   EXEC mailbox.add_message('PG$PIPE$13$3940', 'Hi, John', 'Can you attend a meeting at 3:00, today?', '-- Mary');
   ```
   **Output:**
   ```
   Added message with 3 item(s) to mailbox PG$PIPE$13$3940
   ```

   ```sql
   EXEC mailbox.add_message('PG$PIPE$13$3940', 'Don''t forget to submit your report', 'Thanks,', '-- Joe');
   ```
   **Output:**
   ```
   Added message with 3 item(s) to mailbox PG$PIPE$13$3940
   ```

3. **Emptying the Mailbox:**
   ```sql
   EXEC mailbox.empty_mailbox('PG$PIPE$13$3940');
   ```
   **Output:**
   ```
   ****** Start message #1 ******
   Item #1: Hi, John
   Item #2: Can you attend a meeting at 3:00, today?
   Item #3: -- Mary
   ******* End message #1 *******
   *
   ****** Start message #2 ******
   Item #1: Don't forget to submit your report
   Item #2: Thanks,
   Item #3: -- Joe
   ******* End message #2 *******
   *
   Number of messages received: 2
   Deleted mailbox PG$PIPE$13$3940
   ```

### 3.11 DBMS_PROFILER
The `DBMS_PROFILER` package collects and stores performance information about the PL/pgSQL and SPL statements executed during a profiling session. Use the functions and procedures listed below to control the profiling tool.

#### Functions and Procedures
- **FLUSH_DATA**: Flushes performance data collected in the current session without terminating the session (profiling continues).
- **GET_VERSION**: Returns the version number of the `DBMS_PROFILER` package.
- **INTERNAL_VERSION_CHECK**: Confirms that the current version of the profiler will work with the current database.
- **PAUSE_PROFILER**: Pauses data collection.
- **RESUME_PROFILER**: Resumes data collection.
- **START_PROFILER**: Starts data collection.
- **STOP_PROFILER**: Stops data collection and flushes performance data to the `PLSQL_PROFILER_RAWDATA` table.

#### Status Codes and Exceptions
| Status Code | Message | Exception | Description |
|-------------|---------|-----------|-------------|
| -1          | error version | version_mismatch | The profiler version and the database are incompatible. |
| 0           | success | n/a | The operation completed successfully. |
| 1           | error_param | profiler_error | The operation received an incorrect parameter. |
| 2           | error_io | profiler_error | The data flush operation has failed. |

### 3.11.1 FLUSH_DATA
The `FLUSH_DATA` function/procedure flushes the data collected in the current session without terminating the profiler session. The data is flushed to the tables described in the Advanced Server Performance Features Guide.

#### Function and Procedure Signatures
```sql
status INTEGER FLUSH_DATA
FLUSH_DATA
```

#### Parameters
- `status`: Status code returned by the operation.

### 3.11.2 GET_VERSION
The `GET_VERSION` procedure returns the version of `DBMS_PROFILER`.

#### Procedure Signature
```sql
GET_VERSION(major OUT INTEGER, minor OUT INTEGER)
```

#### Parameters
- `major`: The major version number of `DBMS_PROFILER`.
- `minor`: The minor version number of `DBMS_PROFILER`.

### 3.11.3 INTERNAL_VERSION_CHECK
The `INTERNAL_VERSION_CHECK` function confirms that the current version of `DBMS_PROFILER` will work with the current database.

#### Function Signature
```sql
status INTEGER INTERNAL_VERSION_CHECK
```

#### Parameters
- `status`: Status code returned by the operation.

### 3.11.4 PAUSE_PROFILER
The `PAUSE_PROFILER` function/procedure pauses a profiling session.

#### Function and Procedure Signatures
```sql
status INTEGER PAUSE_PROFILER
PAUSE_PROFILER
```

#### Parameters
- `status`: Status code returned by the operation.

### 3.11.5 RESUME_PROFILER
The `RESUME_PROFILER` function/procedure resumes a profiling session.

#### Function and Procedure Signatures
```sql
status INTEGER RESUME_PROFILER
RESUME_PROFILER
```

#### Parameters
- `status`: Status code returned by the operation.

### 3.11.6 START_PROFILER
The `START_PROFILER` function/procedure starts a data collection session.

#### Function and Procedure Signatures
```sql
status INTEGER START_PROFILER(run_comment TEXT := SYSDATE, run_comment1 TEXT := '', run_number OUT INTEGER)
START_PROFILER(run_comment TEXT := SYSDATE, run_comment1 TEXT := '', run_number OUT INTEGER)
```

#### Parameters
- `run_comment`: A user-defined comment for the profiler session. The default value is `SYSDATE`.
- `run_comment1`: An additional user-defined comment for the profiler session. The default value is an empty string.
- `run_number`: The session number of the profiler session.
- `status`: Status code returned by the operation.

### 3.11.7 STOP_PROFILER
The `STOP_PROFILER` function/procedure stops a profiling session and flushes the performance information to the `DBMS_PROFILER` tables and views.

#### Function and Procedure Signatures
```sql
status INTEGER STOP_PROFILER
STOP_PROFILER
```

#### Parameters
- `status`: Status code returned by the operation.

### 3.11.8 Using DBMS_PROFILER
The `DBMS_PROFILER` package collects and stores performance information about the PL/pgSQL and SPL statements executed during a profiling session. You can review the performance information in the tables and views provided by the profiler.

`DBMS_PROFILER` works by recording a set of performance-related counters and timers for each line of PL/pgSQL or SPL statement that executes within a profiling session. The counters and timers are stored in a table named `SYS.PLSQL_PROFILER_DATA`. When you complete a profiling session, `DBMS_PROFILER` writes a row to the performance statistics table for each line of PL/pgSQL or SPL code that executed within the session.

For example, if you execute the following function:
```sql
CREATE OR REPLACE FUNCTION getBalance(acctNumber INTEGER)
RETURNS NUMERIC AS $$
```

This setup and execution will generate detailed performance data that can be analyzed to optimize the function's performance.