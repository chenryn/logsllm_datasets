Status code returned by the operation. A status code of 0 is returned even if the
named pipe is non-existent.
Examples
Two messages are sent on a pipe:
DECLARE
v_status INTEGER;
BEGIN
v_status := DBMS_PIPE.CREATE_PIPE('pipe');
DBMS_OUTPUT.PUT_LINE('CREATE_PIPE status : ' || v_status);
DBMS_PIPE.PACK_MESSAGE('Message #1');
v_status := DBMS_PIPE.SEND_MESSAGE('pipe');
DBMS_OUTPUT.PUT_LINE('SEND_MESSAGE status: ' || v_status);
DBMS_PIPE.PACK_MESSAGE('Message #2');
v_status := DBMS_PIPE.SEND_MESSAGE('pipe');
DBMS_OUTPUT.PUT_LINE('SEND_MESSAGE status: ' || v_status);
END;
CREATE_PIPE status : 0
SEND_MESSAGE status: 0
SEND_MESSAGE status: 0
Receive the first message and unpack it:
DECLARE
v_item VARCHAR2(80);
v_status INTEGER;
BEGIN
v_status := DBMS_PIPE.RECEIVE_MESSAGE('pipe',1);
DBMS_OUTPUT.PUT_LINE('RECEIVE_MESSAGE status: ' || v_status);
DBMS_PIPE.UNPACK_MESSAGE(v_item);
DBMS_OUTPUT.PUT_LINE('Item: ' || v_item);
END;
RECEIVE_MESSAGE status: 0
Item: Message #1
Remove the pipe:
SELECT DBMS_PIPE.REMOVE_PIPE('pipe') FROM DUAL;
remove_pipe
-------------
0
(1 row)
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 115
Database Compatibility for Oracle® Developers
Built-in Package Guide
Try to retrieve the next message. The RECEIVE_MESSAGE call returns status code 1
indicating it timed out because the pipe had been deleted.
DECLARE
v_item VARCHAR2(80);
v_status INTEGER;
BEGIN
v_status := DBMS_PIPE.RECEIVE_MESSAGE('pipe',1);
DBMS_OUTPUT.PUT_LINE('RECEIVE_MESSAGE status: ' || v_status);
END;
RECEIVE_MESSAGE status: 1
3.10.7 RESET_BUFFER
The RESET_BUFFER procedure resets a “pointer” to the session’s local message buffer
back to the beginning of the buffer. This has the effect of causing subsequent
PACK_MESSAGE calls to overwrite any data items that existed in the message buffer prior
to the RESET_BUFFER call.
RESET_BUFFER
Examples
A message to John is written to the local message buffer. It is replaced by a message to
Bob by calling RESET_BUFFER. The message is sent on the pipe.
DECLARE
v_status INTEGER;
BEGIN
DBMS_PIPE.PACK_MESSAGE('Hi, John');
DBMS_PIPE.PACK_MESSAGE('Can you attend a meeting at 3:00, today?');
DBMS_PIPE.PACK_MESSAGE('If not, is tomorrow at 8:30 ok with you?');
DBMS_PIPE.RESET_BUFFER;
DBMS_PIPE.PACK_MESSAGE('Hi, Bob');
DBMS_PIPE.PACK_MESSAGE('Can you attend a meeting at 9:30, tomorrow?');
v_status := DBMS_PIPE.SEND_MESSAGE('pipe');
DBMS_OUTPUT.PUT_LINE('SEND_MESSAGE status: ' || v_status);
END;
SEND_MESSAGE status: 0
The message to Bob is in the received message.
DECLARE
v_item VARCHAR2(80);
v_status INTEGER;
BEGIN
v_status := DBMS_PIPE.RECEIVE_MESSAGE('pipe',1);
DBMS_OUTPUT.PUT_LINE('RECEIVE_MESSAGE status: ' || v_status);
DBMS_PIPE.UNPACK_MESSAGE(v_item);
DBMS_OUTPUT.PUT_LINE('Item: ' || v_item);
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 116
Database Compatibility for Oracle® Developers
Built-in Package Guide
DBMS_PIPE.UNPACK_MESSAGE(v_item);
DBMS_OUTPUT.PUT_LINE('Item: ' || v_item);
END;
RECEIVE_MESSAGE status: 0
Item: Hi, Bob
Item: Can you attend a meeting at 9:30, tomorrow?
3.10.8 SEND_MESSAGE
The SEND_MESSAGE function sends a message from the session’s local message buffer to
the specified pipe.
status SEND_MESSAGE(pipename VARCHAR2 [, timeout INTEGER ]
[, maxpipesize INTEGER ])
Parameters
pipename
Name of the pipe.
timeout
Wait time (seconds). Default is 86400000 (1000 days).
maxpipesize
Maximum capacity of the pipe in bytes. Default is 8192 bytes.
status
Status code returned by the operation.
The possible status codes are:
Table 7-3-3 SEND_MESSAGE Status Codes
Status Code Description
0 Success
1 Time out
3 Function interrupted
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 117
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.10.9 UNIQUE_SESSION_NAME
The UNIQUE_SESSION_NAME function returns a name, unique to the current session.
name VARCHAR2 UNIQUE_SESSION_NAME
Parameters
name
Unique session name.
Examples
The following anonymous block retrieves and displays a unique session name.
DECLARE
v_session VARCHAR2(30);
BEGIN
v_session := DBMS_PIPE.UNIQUE_SESSION_NAME;
DBMS_OUTPUT.PUT_LINE('Session Name: ' || v_session);
END;
Session Name: PG$PIPE$5$2752
3.10.10 UNPACK_MESSAGE
The UNPACK_MESSAGE procedure copies the data items of a message from the local
message buffer to a specified program variable. The message must be placed in the local
message buffer with the RECEIVE_MESSAGE function before using UNPACK_MESSAGE.
UNPACK_MESSAGE(item OUT { DATE | NUMBER | VARCHAR2 | RAW })
Parameters
item
Type-compatible variable that receives a data item from the local message buffer.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 118
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.10.11 Comprehensive Example
The following example uses a pipe as a “mailbox”. The procedures to create the mailbox,
add a multi-item message to the mailbox (up to three items), and display the full contents
of the mailbox are enclosed in a package named, mailbox.
CREATE OR REPLACE PACKAGE mailbox
IS
PROCEDURE create_mailbox;
PROCEDURE add_message (
p_mailbox VARCHAR2,
p_item_1 VARCHAR2,
p_item_2 VARCHAR2 DEFAULT 'END',
p_item_3 VARCHAR2 DEFAULT 'END'
);
PROCEDURE empty_mailbox (
p_mailbox VARCHAR2,
p_waittime INTEGER DEFAULT 10
);
END mailbox;
CREATE OR REPLACE PACKAGE BODY mailbox
IS
PROCEDURE create_mailbox
IS
v_mailbox VARCHAR2(30);
v_status INTEGER;
BEGIN
v_mailbox := DBMS_PIPE.UNIQUE_SESSION_NAME;
v_status := DBMS_PIPE.CREATE_PIPE(v_mailbox,1000,FALSE);
IF v_status = 0 THEN
DBMS_OUTPUT.PUT_LINE('Created mailbox: ' || v_mailbox);
ELSE
DBMS_OUTPUT.PUT_LINE('CREATE_PIPE failed - status: ' ||
v_status);
END IF;
END create_mailbox;
PROCEDURE add_message (
p_mailbox VARCHAR2,
p_item_1 VARCHAR2,
p_item_2 VARCHAR2 DEFAULT 'END',
p_item_3 VARCHAR2 DEFAULT 'END'
)
IS
v_item_cnt INTEGER := 0;
v_status INTEGER;
BEGIN
DBMS_PIPE.PACK_MESSAGE(p_item_1);
v_item_cnt := 1;
IF p_item_2 != 'END' THEN
DBMS_PIPE.PACK_MESSAGE(p_item_2);
v_item_cnt := v_item_cnt + 1;
END IF;
IF p_item_3 != 'END' THEN
DBMS_PIPE.PACK_MESSAGE(p_item_3);
v_item_cnt := v_item_cnt + 1;
END IF;
v_status := DBMS_PIPE.SEND_MESSAGE(p_mailbox);
IF v_status = 0 THEN
DBMS_OUTPUT.PUT_LINE('Added message with ' || v_item_cnt ||
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 119
Database Compatibility for Oracle® Developers
Built-in Package Guide
' item(s) to mailbox ' || p_mailbox);
ELSE
DBMS_OUTPUT.PUT_LINE('SEND_MESSAGE in add_message failed - ' ||
'status: ' || v_status);
END IF;
END add_message;
PROCEDURE empty_mailbox (
p_mailbox VARCHAR2,
p_waittime INTEGER DEFAULT 10
)
IS
v_msgno INTEGER DEFAULT 0;
v_itemno INTEGER DEFAULT 0;
v_item VARCHAR2(100);
v_status INTEGER;
BEGIN
v_status := DBMS_PIPE.RECEIVE_MESSAGE(p_mailbox,p_waittime);
WHILE v_status = 0 LOOP
v_msgno := v_msgno + 1;
DBMS_OUTPUT.PUT_LINE('****** Start message #' || v_msgno ||
' ******');
BEGIN
LOOP
v_status := DBMS_PIPE.NEXT_ITEM_TYPE;
EXIT WHEN v_status = 0;
DBMS_PIPE.UNPACK_MESSAGE(v_item);
v_itemno := v_itemno + 1;
DBMS_OUTPUT.PUT_LINE('Item #' || v_itemno || ': ' ||
v_item);
END LOOP;
DBMS_OUTPUT.PUT_LINE('******* End message #' || v_msgno ||
' *******');
DBMS_OUTPUT.PUT_LINE('*');
v_itemno := 0;
v_status := DBMS_PIPE.RECEIVE_MESSAGE(p_mailbox,1);
END;
END LOOP;
DBMS_OUTPUT.PUT_LINE('Number of messages received: ' || v_msgno);
v_status := DBMS_PIPE.REMOVE_PIPE(p_mailbox);
IF v_status = 0 THEN
DBMS_OUTPUT.PUT_LINE('Deleted mailbox ' || p_mailbox);
ELSE
DBMS_OUTPUT.PUT_LINE('Could not delete mailbox - status: '
|| v_status);
END IF;
END empty_mailbox;
END mailbox;
The following demonstrates the execution of the procedures in mailbox. The first
procedure creates a public pipe using a name generated by the UNIQUE_SESSION_NAME
function.
EXEC mailbox.create_mailbox;
Created mailbox: PG$PIPE$13$3940
Using the mailbox name, any user in the same database with access to the mailbox
package and DBMS_PIPE package can add messages:
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 120
Database Compatibility for Oracle® Developers
Built-in Package Guide
EXEC mailbox.add_message('PG$PIPE$13$3940','Hi, John','Can you attend a
meeting at 3:00, today?','-- Mary');
Added message with 3 item(s) to mailbox PG$PIPE$13$3940
EXEC mailbox.add_message('PG$PIPE$13$3940','Don''t forget to submit your
report','Thanks,','-- Joe');
Added message with 3 item(s) to mailbox PG$PIPE$13$3940
Finally, the contents of the mailbox can be emptied:
EXEC mailbox.empty_mailbox('PG$PIPE$13$3940');
****** Start message #1 ******
Item #1: Hi, John
Item #2: Can you attend a meeting at 3:00, today?
Item #3: -- Mary
******* End message #1 *******
*
****** Start message #2 ******
Item #1: Don't forget to submit your report
Item #2: Thanks,
Item #3: Joe
******* End message #2 *******
*
Number of messages received: 2
Deleted mailbox PG$PIPE$13$3940
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 121
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.11 DBMS_PROFILER
The DBMS_PROFILER package collects and stores performance information about the
PL/pgSQL and SPL statements that are executed during a performance profiling session;
use the functions and procedures listed below to control the profiling tool.
Function/Procedure Return Description
Type
FLUSH_DATA Status Code Flushes performance data collected in the current session
or Exception without terminating the session (profiling continues).
GET_VERSION(major OUT, minor OUT) n/a Returns the version number of this package.
INTERNAL_VERSION_CHECK Status Code Confirms that the current version of the profiler will work
with the current database.
PAUSE_PROFILER Status Code Pause data collection.
or Exception
RESUME_PROFILER Status Code Resume data collection.
or Exception
START_PROFILER(run_comment, Status Code Start data collection.
run_comment1 [, run_number OUT ]) or Exception
STOP_PROFILER Status Code Stop data collection and flush performance data to the
or Exception PLSQL_PROFILER_RAWDATA table.
The functions within the DBMS_PROFILER package return a status code to indicate
success or failure; the DBMS_PROFILER procedures raise an exception only if they
encounter a failure. The status codes and messages returned by the functions, and the
exceptions raised by the procedures are listed in the table below.
Status Code Message Exception Description
The profiler version and the database are
-1 error version version_mismatch
incompatible.
0 success n/a The operation completed successfully.
1 error_param profiler_error The operation received an incorrect parameter.
2 error_io profiler_error The data flush operation has failed.
3.11.1 FLUSH_DATA
The FLUSH_DATA function/procedure flushes the data collected in the current session
without terminating the profiler session. The data is flushed to the tables described in the
Advanced Server Performance Features Guide. The function and procedure signatures
are:
status INTEGER FLUSH_DATA
FLUSH_DATA
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 122
Database Compatibility for Oracle® Developers
Built-in Package Guide
Parameters
status
Status code returned by the operation.
3.11.2 GET_VERSION
The GET_VERSION procedure returns the version of DBMS_PROFILER. The procedure
signature is:
GET_VERSION(major OUT INTEGER, minor OUT INTEGER)
Parameters
major
The major version number of DBMS_PROFILER.
minor
The minor version number of DBMS_PROFILER.
3.11.3 INTERNAL_VERSION_CHECK
The INTERNAL_VERSION_CHECK function confirms that the current version of
DBMS_PROFILER will work with the current database. The function signature is:
status INTEGER INTERNAL_VERSION_CHECK
Parameters
status
Status code returned by the operation.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 123
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.11.4 PAUSE_PROFILER
The PAUSE_PROFILER function/procedure pauses a profiling session. The function and
procedure signatures are:
status INTEGER PAUSE_PROFILER
PAUSE_PROFILER
Parameters
status
Status code returned by the operation.
3.11.5 RESUME_PROFILER
The RESUME_PROFILER function/procedure pauses a profiling session. The function and
procedure signatures are:
status INTEGER RESUME_PROFILER
RESUME_PROFILER
Parameters
status
Status code returned by the operation.
3.11.6 START_PROFILER
The START_PROFILER function/procedure starts a data collection session. The function
and procedure signatures are:
status INTEGER START_PROFILER(run_comment TEXT := SYSDATE,
run_comment1 TEXT := '' [, run_number OUT INTEGER ])
START_PROFILER(run_comment TEXT := SYSDATE,
run_comment1 TEXT := '' [, run_number OUT INTEGER ])
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 124
Database Compatibility for Oracle® Developers
Built-in Package Guide
Parameters
run_comment
A user-defined comment for the profiler session. The default value is SYSDATE.
run_comment1
An additional user-defined comment for the profiler session. The default value is
''.
run_number
The session number of the profiler session.
status
Status code returned by the operation.
3.11.7 STOP_PROFILER
The STOP_PROFILER function/procedure stops a profiling session and flushes the
performance information to the DBMS_PROFILER tables and view. The function and
procedure signatures are:
status INTEGER STOP_PROFILER
STOP_PROFILER
Parameters
status
Status code returned by the operation.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 125
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.11.8 Using DBMS_PROFILER
The DBMS_PROFILER package collects and stores performance information about the
PL/pgSQL and SPL statements that are executed during a profiling session; you can
review the performance information in the tables and views provided by the profiler.
DBMS_PROFILER works by recording a set of performance-related counters and timers
for each line of PL/pgSQL or SPL statement that executes within a profiling session. The
counters and timers are stored in a table named SYS.PLSQL_PROFILER_DATA. When
you complete a profiling session, DBMS_PROFILER will write a row to the performance
statistics table for each line of PL/pgSQL or SPL code that executed within the session.
For example, if you execute the following function:
1 - CREATE OR REPLACE FUNCTION getBalance(acctNumber INTEGER)
2 - RETURNS NUMERIC AS $$