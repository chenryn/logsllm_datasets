说白了，就是从头开始找，直到第1个元素为止。由于这个算法的时间复杂度取
决于i的位置，当i=1时，则不需遍历，第一个就取出数据了，而当i=n时则遍历n-1
次才可以。因此最坏情况的时间复杂度是0（n）。
由于单链表的结构中没有定义表长，所以不能事先知道要循环多少次，因此也就
不方便使用for来控制循环。其主要核心思想就是“工作指针后移”，这其实也是很多
算法的常用技术。
此时就有人说，这么麻烦，这数据结构有什么意思！还不如顺序存储结构呢。
哈，世间万物总是两面的，有好自然有不足，有差自然就有优势。下面我们来看
一下在单链表中的如何实现“插入”和“删除”。
3.8单链表的插入与删除
3.8.1单链表的插入
先来看单链表的插入。假设存储元素e的结点为s，要实现结点p、p->next和s
之间逻辑关系的变化，只需将结点s插入到结点p和p->next之间即可。可如何插入
呢（如图3-8-1所示）？
p->next
图 3-8-1
根本用不着惊动其他结点，只需要让s->next和p->next的指针做一点改变即可。
61
---
## Page 86
大调数保结构
解读这两句代码，也就是说让p的后继结点改成s的后继结点，再把结点s变成
p的后继结点（如图3-8-2所示）。
p->next
 3-8-2
考虑一下，这两句的顺序可不可以交换？
如果先p->next=s；再s->next=p->next；会怎么样？哈哈，因为此时第一句会使
得将p->next给覆盖成s的地址了。那么s->next=p->next，其实就等于s->next=s，这
样真正的拥有ai1数据元素的结点就没了上级。这样的插入操作就是失败的，造成了
临场掉链子的尴尬局面。所以这两句是无论如何不能反的，这点初学者一定要注意。
插入结点s后，链表如图3-8-3所示。
st也就是p>next
对于单链表的表头和表尾的特殊情况，操作是相同的，如图3-8-4所示。
头指针
图 3-8-4
62
---
## Page 87
第3章线性表
单链表第1个数据插入结点的算法思路：
1.声明一结点p指向链表第一个结点，初始化1从1开始；
2.当jdata；
6.单链表的插入标准语句s->next=p->nextp->next=s;
7.返回成功。
实现代码算法如下：
/*初始条件：顺序线性表L已存在，1≤i≤ListLength（L）.*/
/*操作结果：在L中第1个位置之前插入新的数据元素e，L的长度加1*/
Status ListInsert（LinkList*L,int i,ElemType e)
int J1
LinkList p.8:
P-.L;
-1;
while（p66ji）
return ERROR;
1第1个元素不存在*/
8=（LinkList）malloc（sizeof（Node））:/*生成新结点（c标准品数）
s->data=e;
s->next=p->next;
/*将p的后继结点赋值给s的后继*/
p->next-s;
/将s赋值给p的后继*/
return OK;
在这段算法代码中，我们用到了C语言的mallkc标准函数，它的作用就是生成一
个新的结点，其类型与Node是一样的，其实质就是在内存中找了一小块空地，准备
---
## Page 88
大语数据结构
用来存放e数据s结点。
3.8.2单链表的删除
现在我们再来看单链表的删除。设存储元素a的结点为q，要实现将结点q删除
单链表的操作，其实就是将它的前继结点的指针绕过，指向它的后继结点即可，如图
3-8-5所示。
结点q或
结点q->next或
结点p
p->next
p->next->next
a.
81+
图3-8-5
我们所要做的，实际上就是一步，p->next=p->next>next，用q来取代p->next，
即是
/xounext，也可以叫q结点，妈妈的后继
的后继是儿子p->next>next，即q->next。当妈妈去牵儿子的手时，这个爸爸就已经
与母子俩没有牵手联系了，如图3-8-6所示。
结点p
结点q或
结点q-next或
p->next
p->next->next
妈
×爸x儿
图3-8-6
单链表第i个数据删除结点的算法思路：
1.声明一结点p指向链表第一个结点，初始化1从1开始；
64
---
## Page 89
第3章线性表
2.当ji时，就遍历链表，让p的指针向后移动，不断指向下一个结点，j累加
1;
3.若到链表末尾p为空，则说明第i个元素不存在；
4.否则查找成功，将欲删除的结点p->next赋值给q；
5.单链表的删除标准语句p->next=q->next;
6.将q结点中的数据赋值给e，作为返回；
7.释放q结点；
8.返回成功。
实现代码算法如下：
/*初始条件：顺序线性表L巴存在，1≤i≤ListLength（L）*/
/*操作结果：删除L的第1个数据元素，并用e返回其值，L的长度减1*/
Status ListDelete（LinkList*L,int i,ElemType *e）
intj;
LinkList p,q;
P-'L;
j-1;
while（p->next66jnext）11j>i）
return ERROR;
第个元素不存在*/
q-p->next;
p->next=q->next;
/*将q的后继赋值给p的后继*/
*e-q->data;
/*将q结点中的数据给e*/
free（q);
/*让系统回收此结点，释放内存*/
return OK;
这段算法代码里，我们又用到了另一个C语言的标准函数free。它的作用就是让
系统回收一个Node结点，释放内存。
65
---
## Page 90
大语数据结构
分析一下刚才我们讲解的单链表插入和删除算法，我们发现，它们其实都是由两
部分组成：第一部分就是遍历查找第1个元素；第二部分就是插入和删除元素。
从整个算法来说，我们很容易推导出：它们的时间复杂度都是0（n）。如果在我们
不知道第1个元素的指针位置，单链表数据结构在插入和删除操作上，与线性表的顺
序存储结构是没有太大优势的。但如果，我们希望从第1个位置，插入10个元素，对
于顺序存储结构意味着，每一次插入都需要移动n-i个元素，每次都是0（n）。而单
链表，我们只需要在第一次时，找到第i个位置的指针，此时为0（n)，接下来只是简
单地通过赋值移动指针而已，时间复杂度都是0（1）。显然，对于插入或副除数据越频
繁的操作，单链表的效率优势就越是明显。
3.9单链表的整表创建
回顾一下，顺序存储结构的创建，其实就是一个数组的初始化，即声明一个类型
和大小的数组并赋值的过程。而单链表和顺序存储结构就不一样，它不像顺序存储结
构这么集中，它可以很散，是一种动态结构。对于每个链表来说，它所占用空间的大
小和位置是不需要预先分配划定的，可以根据系统的情况和实际的需求即时生成。
起，依次建立各元素结点，并逐个插入链表。
单链表整表创建的算法思路：
1.声明一结点p和计数器变量i；
2.初始化一空链表L；
3.让L的头结点的指针指向NULL，即建立一个带头结点的单链表；
4.循环：
生成一新结点赋值给p；
·随机生成一数字赋值给p的数据域p->data;
·将p插入到头结点与前一新结点之间。
实现代码算法如下：
/随机产生n个元素的值，建立带表头结点的单链线性表L（头插法）/
void CreateListHead（LinkList*L,int n)
99
---
## Page 91
第3章线性表
LinkList p
inti;
srand（time（o））;
/*初始化随机数种子*/
*L-（LinkList）malloc（sizeof（Node））;
（*L）->next=NULL;
/*先建立一个带头结点的单链表*/
for（i-0;idata-rand（）s100+1;
/*随机生成100以内的数字/
p->next=（*L）->next;
（·L）->next-p1
/*插入到表头*/
这段算法代码里，我们其实用的是插队的办法，就是始终让新结点在第一的位
置。我也可以把这种算法简称为头插法，如图3-9-1所示。
L>sext
头折针
￥
P
图3-9-1
可事实上，我们还是可以不这样干，为什么不把新结点都放到最后呢，这才是排
队时的正常思维，所谓的先来后到。我们把每次新结点都插在终端结点的后面，这种
算法称之为尾插法。
实现代码算法如下：
/随机产生n个元素的值，建立带表头结点的单链线性表L（尾插法）/
void CreateListTail（LinkList *L,int n）
LinkList p.r;
int i;
srand（time（o））;
/*初始化随机数种子*
*L=（LinkList）malloc（sizeof（Node））：/*为整个线性表*/
67
---
## Page 92
大语
数据结构
r=*L;
/*r为指向尾部的结点
for（i=0:idata-rand（）100+1;
/*随机生成100以内的数字/
r->next=p:
/*将表尾终端结点的指针指向新结点*/
r-p;
/*将当前的新结点定义为表尾终端结点*/
r->next-NULL;
1表示当前链表结来*/
注意L与r的关系，L是指整个单链表，而r是指向尾结点的变量，r会随着循环
不断地变化结点，而L则是随着循环增长为一个多结点的链表。
这里需解释一下，r>next=p：的意思，其实就是将刚才的表尾终端结点r的指针指
向新结点p，如图3-9-2所示，当中①位置的连线就是表示这个意思。
P
图3-9-2
r->next=p：这一句应该还好理解，我以前很多学生不理解的就是后面这一句r=p：是
什么意思？请看图3-9-3。
r->next
图3-9-3
它的意思，就是本来r是在a：元素的结点，可现在它已经不是最后的结点了，现
在最后的结点是a，所以应该要让将p结点这个最后的结点赋值给r。此时r又是最
终的尾结点了。
循环结束后，那么应该让这个链表的指针域置空，因此有了“r->next=NULL；”
68
---
## Page 93
第3章线性表
以便以后遍历时可以确认其是尾部。
3.10单链表的整表删除
当我们不打算使用这个单链表时，我们需要把它销毁，其实也就是在内存中将它
释放掉，以便于留出空间给其他程序或软件使用。
单链表整表删除的算法思路如下：