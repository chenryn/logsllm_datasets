# 【技术分享】Windows内核池漏洞利用技术
|
##### 译文声明
本文是翻译文章，文章来源：samdb.xyz
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
译者：[华为未然实验室](http://bobao.360.cn/member/contribute?uid=2794169747)
预估稿费：300RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
本文将介绍如何利用[HackSys Team Extremely Vulnerable
Driver](https://github.com/hacksysteam/HackSysExtremeVulnerableDriver)中的释放后重用和池溢出问题。为此我们需要对Windows内核内存管理有所了解。因此，本文将涵盖以下内容：
1\. Windows内核内存分配概述
2\. Windows内核池风水演练
3\. 利用HackSys Team Extremely Vulnerable Driver的释放后重用
4\. 通过两种不同的方法利用HackSys Team Extremely Vulnerable Driver的池溢出
本文专注于windows 7 sp1（32位）。
**Windows内核池**
了解内存管理的基础知识有所帮助，如果你不曾了解虚拟内存和分页，那么有必要快速阅读以下内容：
1\. [内存程序剖析](http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory/)
2\. [内核如何管理你的内存](http://duartes.org/gustavo/blog/post/how-the-kernel-manages-your-memory/)
Windows内核使用两种动态大小的“池”来分配系统内存，这些内核等同于用户模式下的堆。我只介绍理解利用方法原理所需的详情，更多信息请查看：
1. [Windows 7 内核池利用](https://media.blackhat.com/bh-dc-11/Mandt/BlackHat_DC_2011_Mandt_kernelpool-wp.pdf)，作者：Tarjei Mandt
2\. 《Windows Internals》第7版第1部分第5章或《Windows Internals》第6版第2部分第10章——内存管理
3\.  [Windows驱动程序的内存管理](https://msdn.microsoft.com/en-us/library/windows/hardware/ff554389\(v=vs.85\).aspx)
Windows中有两种关键类型的池——非分页池和分页池。还有特殊池（我将在介绍释放后重用利用方法时介绍）和win32k使用的会话池（本文不作介绍）。
**分页池对比非分页池**
非分页池由保证总是存储在物理内存中的内存组成，而分页池中分配的内存可以被分页。这是必需的，因为某些内核结构需要在高于可满足缺页中断的[IRQL](https://blogs.technet.microsoft.com/askperf/2008/01/22/what-is-irql-and-why-is-it-important/)可访问。有关IRQL的更多详细信息以及各级别支持的操作，请参阅“[管理硬件优先级](https://msdn.microsoft.com/en-us/library/windows/hardware/ff554368\(v=vs.85\).aspx)”。
这意味着非分页池用于存储进程、线程、信号量等关键控制结构。而分页池用于存储文件映射、对象句柄等。分页池实际上由几个单独的池组成，而在Windows
7中，只有一个非分页池。
为了分配池内存，驱动程序和内核通常使用ExAllocatePoolWithTag函数，其定义如下：
PoolType参数包含一个POOL_TYPE枚举中的值。这定义了正在请求什么类型的池内存，我们将主要看到其用0调用，这对应于非分页池。
第二个参数是所需的池内存的字节数，最后的PoolTag参数是一个32位值，其被完全视为用于标记内存用途的4个字符，这在调试时非常方便，并且也被大量内核内存instrumentation使用——跟踪使用某个标签进行了多少分配，当内存分配到某个标签时中断，等等。
为了释放分配的池内存，通常使用[ExFreePoolWithTag](https://msdn.microsoft.com/en-us/library/windows/hardware/ff544593\(v=vs.85\).aspx)函数。
这只需要一个指向有效池分配的指针，池元数据将给予所有其他所需的东西，在标准条件下，提供的池标签将不会被验证。但是，启用正确的调试设置后，标签将被验证，如果其不匹配，则会触发一个BSOD。现在我们来看看这些函数的工作原理。
**分配内存**
反编译器 ExAllocatePoolWithTag 乍看之下很吓人。
还好，Tarjei Mandt已经在其[论文](https://media.blackhat.com/bh-dc-11/Mandt/BlackHat_DC_2011_Mandt_kernelpool-wp.pdf)中将函数转化为伪代码，这可以作为一个很好的指导。我将使用他的伪代码和IDA中的一些检查等，并通过windbg来解释函数的工作原理。他的解释可能更好、更准确，本节中的所有代码片段都来自其论文。
首先，函数检查请求的字节数是否超过4080字节，如果是，则调用Big Pool 分配器。
此处，esi包含请求的字节数，如果高于0xff0，则转到nt!ExpAllocateBigPool。否则采取true分支，处理继续。
在这一点上，[esp+48h+var_20]持有末尾为1的PoolType。所以如果该值等于0，则其是一个非分页池，跳过上面的if语句并转到随即显示的else，同时，如果类型是用于分页池内存，则采取true分支。
在true分支上，其检查池类型是否用于会话池。
其随后立即检查请求的字节数是否高于32。
同时，在false分支上，其还检查分配是否高于32字节。
如果任一检查通过，逻辑会有点麻烦，更多详情可见[Tarjei的论文](https://media.blackhat.com/bh-dc-11/Mandt/BlackHat_DC_2011_Mandt_kernelpool-wp.pdf)。该函数将尝试通过在相关池的Lookaside列表中找到一个条目来分配请求的块。Lookaside列表是每个池的每处理器结构，对它的引用存储在[内核处理器控制块](http://www.codemachine.com/article_kernelstruct.html#KPCR)中。Lookaside列表由通常请求的内存大小的单链表组成，对于一般池内存，这是频繁进行的小分配。使用Lookaside列表可以使这些频繁的分配更快地进行。对于非常频繁进行的固定大小的分配，存在其他更具体的lookaside列表。
如果两个大小检查均未通过，或者从lookaside列表分配内存失败，则分页池描述符被锁定，这与用于非分页池的结构相同，并且以相同的方式使用，所以我稍后将对此进行描述。
现在我们有了请求的分配是非分页池类型时运行的代码，此处我们在上面的loc_518175处采取了false分支。
接下来，代码将检查请求的块大小是小于还是等于32字节，如下所示。如上所述，如果分配足够小，其将尝试使用lookaside列表，如果成功则返回true。
如果lookaside列表不能使用或请求的块大小大于32字节，则非分页池描述符将被锁定。首先将获取非分页池描述符的指针，如果有超过1个的非分页池，将进行查找。
首先，将根据可用的非分页池数量和“本地节点”（论文解释了这一点，但出于性能原因，多核系统中的每个处理器都可以有首选本地内存）来计算ExpNonPagedPoolDescriptor表中的索引：
此处eax最终持有所选索引。然后从表中读取引用：
这与分页池的逻辑相同，计算索引然后获得引用：
此时，分页和非分页分配的代码路径已达到同一点。分配器将检查页面描述符是否被锁定，如果没有锁定则获取锁定。
现在描述符结构实际上包含什么？还好，其包含在Windows 7的公共符号中。
我们刚刚看到，(Non)PagedLock字段在函数明确获取描述符锁定之前被检查。PoolType是自解释的，PoolIndex字段指示可以在内核导出的ExpPagedPoolDescriptor或ExpNonPagedPoolDescriptors表中找到哪些条目。我们真正关心的其他字段是PendingFrees
和PendingFreeDepth（在下一节中解释），以及我们需要现在看一看的ListHeads。
ListHeads是8个字节倍数到大分配的空闲内存块列表。每个条目包括一个LIST_ENTRY结构，其是相同大小的块的链表的一部分。列表由请求的块大小+
8（以给POOL_HEADER留出空间，稍后描述）索引，除以8以获得字节数。分配器将从所需的确切大小的条目开始通览列表，查找要使用的有效块，如果不能精确匹配，则其查找更大的条目并将其拆分。伪代码如下：
因篇幅限制，此处我们有所删减，不过我们可以更详细地介绍函数实际上成功找到正确大小的内存块时会发生什么。分配器进行的分配是请求的数量+8字节，以给之前提到的POOL_HEADER留出空间。该结构包含在Windows
7的公共符号中，如下所示：
PreviousSize字段是内存中先前分配的大小，这是在释放分配以检查损坏时使用的。如前所述，PoolIndex字段可用于查找分配的POOL_DESCRIPTOR。BlockSize是包括header在内的分配的总大小，最后，PoolType是来自分配的POOL_TYPE枚举的值，如果块不空闲，则为2。PoolTag是自解释的。
最后，如果函数在已分配的内存页中找不到分配空间，则其将调用MiAllocatePoolPages，以创建更多，并返回新内存中的地址。
如下所示：
**  
**
**释放内存**
这一次我只提供了一些关于[Tarjei Mandt](https://media.blackhat.com/bh-dc-11/Mandt/BlackHat_DC_2011_Mandt_kernelpool-wp.pdf)的反转代码的评论，我不知道程序集片段有多大用处，希望我的补充有作用。这只包括与漏洞利用有关的组件，所有代码和细节请参阅原论文。
块大小应等于下一个池对象头中的上一个大小字段，如果不是，则内存已损坏，BugCheck被触发。当覆盖这个结构时，我们需要确保用正确的值覆盖块大小，否则会蓝屏。
然后检查分页池类型，我跳过了会话部分。
如果启用了延迟释放，则查看等待列表是否有>= 32个条目，如果有，则全部释放，并将当前条目添加到列表中。
我们只查看允许DefferedFree的系统，所以我将跳过旧的合并逻辑。ExDeferredFreePool中的逻辑相当直观，函数定义如下。
其接收一个指向POOL_DESCRIPTOR的指针，该指针先前被ExFreePoolWithTag锁定。然后其循环通过PendingFrees，并释放每个条目。如果上一个或下一个条目被释放，则其将与当前被释放的块合并。
**Windows内核池风水**
为了执行内核池风水，我们需要在正确类型的池中分配对象，及哪些是对我们有用的大小。我们知道，关键的内核数据结构（如信号量）存储在非分页池（也因所有基于池的挑战而被HackSys驱动程序使用）中。要开始，我们需要找出一些在非分页池中分配的内核结构及其大小。实现此目标的简单方法是分配一些控件对象，然后使用内核调试器来查看相应的池分配。我使用以下代码来做到这一点。
编译并运行此代码得到如下输出，然后敲击回车键后，我们附带的内核调试器应该中断。
使用调试器，我们可以找到每个结构驻留在内存中的位置以及为其分配了多少内存。在windbg中，可以输入!handle命令来获取对象的详细信息。此处我正在检索Reserve对象的详细信息。
一旦我们知道对象地址，我们就可以使用!pool命令查找其池详细信息。作为其第二个参数解析2意味着其只显示我们感兴趣的确切分配，删除2将显示内存页内的周围分配。
这里我们可以看到，Reserve对象被分配了一个'IoCo'标签，占用了60个字节。为其他对象重复此过程得到以下结果。