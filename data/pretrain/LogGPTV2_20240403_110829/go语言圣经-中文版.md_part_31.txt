var _ io.Writer = (*bytes.Buffer)(nil)
非空的接口类型比如io.Writer经常被指针类型实现，尤其当一个或多个接口方法像Write方法
那样隐式的给接收者带来变化的时候。一个结构体的指针是非常常见的承载方法的类型。
但是并不意味着只有指针类型满足接口类型，甚至连一些有设置方法的接口类型也可能会被
Go语言中其它的引用类型实现。我们已经看过slice类型的方法(geometry.Path, §6.1)和map类
型的方法(url.Values, §6.2.1)，后面还会看到函数类型的方法的例子(http.HandlerFunc,
§7.7)。甚至基本的类型也可能会实现一些接口；就如我们在7.4章中看到的time.Duration类型
实现了fmt.Stringer接口。
一个具体的类型可能实现了很多不相关的接口。考虑在一个组织出售数字文化产品比如音
乐，电影和书籍的程序中可能定义了下列的具体类型：
Album
Book
Movie
Magazine
Podcast
TVEpisode
Track
我们可以把每个抽象的特点用接口来表示。一些特性对于所有的这些文化产品都是共通的，
例如标题，创作日期和作者列表。
type Artifact interface {
Title() string
Creators() []string
Created() time.Time
}
实现接口的条件 238
gopl
其它的一些特性只对特定类型的文化产品才有。和文字排版特性相关的只有books和
magazines，还有只有movies和TV剧集和屏幕分辨率相关。
type Text interface {
Pages() int
Words() int
PageSize() int
}
type Audio interface {
Stream() (io.ReadCloser, error)
RunningTime() time.Duration
Format() string // e.g., "MP3", "WAV"
}
type Video interface {
Stream() (io.ReadCloser, error)
RunningTime() time.Duration
Format() string // e.g., "MP4", "WMV"
Resolution() (x, y int)
}
这些接口不止是一种有用的方式来分组相关的具体类型和表示他们之间的共同特定。我们后
面可能会发现其它的分组。举例，如果我们发现我们需要以同样的方式处理Audio和Video，
我们可以定义一个Streamer接口来代表它们之间相同的部分而不必对已经存在的类型做改
变。
type Streamer interface {
Stream() (io.ReadCloser, error)
RunningTime() time.Duration
Format() string
}
每一个具体类型的组基于它们相同的行为可以表示成一个接口类型。不像基于类的语言，他
们一个类实现的接口集合需要进行显式的定义，在Go语言中我们可以在需要的时候定义一个
新的抽象或者特定特点的组，而不需要修改具体类型的定义。当具体的类型来自不同的作者
时这种方式会特别有用。当然也确实没有必要在具体的类型中指出这些共性。
实现接口的条件 239
gopl
7.4. flag.Value接口
在本章，我们会学到另一个标准的接口类型flag.Value是怎么帮助命令行标记定义新的符号
的。思考下面这个会休眠特定时间的程序：
gopl.io/ch7/sleep
var period = flag.Duration("period", 1*time.Second, "sleep period")
func main() {
flag.Parse()
fmt.Printf("Sleeping for %v...", *period)
time.Sleep(*period)
fmt.Println()
}
在它休眠前它会打印出休眠的时间周期。fmt包调用time.Duration的String方法打印这个时间
周期是以用户友好的注解方式，而不是一个纳秒数字：
$ go build gopl.io/ch7/sleep
$ ./sleep
Sleeping for 1s...
默认情况下，休眠周期是一秒，但是可以通过 -period 这个命令行标记来控制。flag.Duration
函数创建一个time.Duration类型的标记变量并且允许用户通过多种用户友好的方式来设置这
个变量的大小，这种方式还包括和String方法相同的符号排版形式。这种对称设计使得用户交
互良好。
$ ./sleep -period 50ms
Sleeping for 50ms...
$ ./sleep -period 2m30s
Sleeping for 2m30s...
$ ./sleep -period 1.5h
Sleeping for 1h30m0s...
$ ./sleep -period "1 day"
invalid value "1 day" for flag -period: time: invalid duration 1 day
因为时间周期标记值非常的有用，所以这个特性被构建到了flag包中；但是我们为我们自己的
数据类型定义新的标记符号是简单容易的。我们只需要定义一个实现flag.Value接口的类型，
如下：
flag.Value接口 240
gopl
package flag
// Value is the interface to the value stored in a flag.
type Value interface {
String() string
Set(string) error
}
String方法格式化标记的值用在命令行帮组消息中；这样每一个flag.Value也是一个
fmt.Stringer。Set方法解析它的字符串参数并且更新标记变量的值。实际上，Set方法和String
是两个相反的操作，所以最好的办法就是对他们使用相同的注解方式。
让我们定义一个允许通过摄氏度或者华氏温度变换的形式指定温度的celsiusFlag类型。注意
celsiusFlag内嵌了一个Celsius类型(§2.5)，因此不用实现本身就已经有String方法了。为了实
现flag.Value，我们只需要定义Set方法：
gopl.io/ch7/tempconv
// *celsiusFlag satisfies the flag.Value interface.
type celsiusFlag struct{ Celsius }
func (f *celsiusFlag) Set(s string) error {
var unit string
var value float64
fmt.Sscanf(s, "%f%s", &value, &unit) // no error check needed
switch unit {
case "C", "°C":
f.Celsius = Celsius(value)
return nil
case "F", "°F":
f.Celsius = FToC(Fahrenheit(value))
return nil
}
return fmt.Errorf("invalid temperature %q", s)
}
调用fmt.Sscanf函数从输入s中解析一个浮点数（value）和一个字符串（unit）。虽然通常必
须检查Sscanf的错误返回，但是在这个例子中我们不需要因为如果有错误发生，就没有switch
case会匹配到。
下面的CelsiusFlag函数将所有逻辑都封装在一起。它返回一个内嵌在celsiusFlag变量f中的
Celsius指针给调用者。Celsius字段是一个会通过Set方法在标记处理的过程中更新的变量。
调用Var方法将标记加入应用的命令行标记集合中，有异常复杂命令行接口的全局变量
flag.CommandLine.Programs可能有几个这个类型的变量。调用Var方法将一
个 参数赋值给一个flag.Value参数,导致编译器去检查 是否有必须
*celsiusFlag *celsiusFlag
的方法。
flag.Value接口 241
gopl
// CelsiusFlag defines a Celsius flag with the specified name,
// default value, and usage, and returns the address of the flag variable.
// The flag argument must have a quantity and a unit, e.g., "100C".
func CelsiusFlag(name string, value Celsius, usage string) *Celsius {
f := celsiusFlag{value}
flag.CommandLine.Var(&f, name, usage)
return &f.Celsius
}
现在我们可以开始在我们的程序中使用新的标记：
gopl.io/ch7/tempflag
var temp = tempconv.CelsiusFlag("temp", 20.0, "the temperature")
func main() {
flag.Parse()
fmt.Println(*temp)
}
下面是典型的场景：
$ go build gopl.io/ch7/tempflag
$ ./tempflag
20°C
$ ./tempflag -temp -18C
-18°C
$ ./tempflag -temp 212°F
100°C
$ ./tempflag -temp 273.15K
invalid value "273.15K" for flag -temp: invalid temperature "273.15K"
Usage of ./tempflag:
-temp value
the temperature (default 20°C)
$ ./tempflag -help
Usage of ./tempflag:
-temp value
the temperature (default 20°C)
练习 7.6： 对tempFlag加入支持开尔文温度。
练习 7.7： 解释为什么帮助信息在它的默认值是20.0没有包含°C的情况下输出了°C。
flag.Value接口 242
gopl
7.5. 接口值
概念上讲一个接口的值，接口值，由两个部分组成，一个具体的类型和那个类型的值。它们
被称为接口的动态类型和动态值。对于像Go语言这种静态类型的语言，类型是编译期的概
念；因此一个类型不是一个值。在我们的概念模型中，一些提供每个类型信息的值被称为类
型描述符，比如类型的名称和方法。在一个接口值中，类型部分代表与之相关类型的描述
符。
下面4个语句中，变量w得到了3个不同的值。（开始和最后的值是相同的）
var w io.Writer
w = os.Stdout
w = new(bytes.Buffer)
w = nil
让我们进一步观察在每一个语句后的w变量的值和动态行为。第一个语句定义了变量w:
var w io.Writer
在Go语言中，变量总是被一个定义明确的值初始化，即使接口类型也不例外。对于一个接口
的零值就是它的类型和值的部分都是nil（图7.1）。
一个接口值基于它的动态类型被描述为空或非空，所以这是一个空的接口值。你可以通过使
用w==nil或者w!=nil来判读接口值是否为空。调用一个空接口值上的任意方法都会产生panic:
w.Write([]byte("hello")) // panic: nil pointer dereference
第二个语句将一个 类型的值赋给变量w:
*os.File
w = os.Stdout
这个赋值过程调用了一个具体类型到接口类型的隐式转换，这和显式的使用
io.Writer(os.Stdout)是等价的。这类转换不管是显式的还是隐式的，都会刻画出操作到的类型
和值。这个接口值的动态类型被设为 指针的类型描述符，它的动态值持有
*os.Stdout
接口值 243
gopl
os.Stdout的拷贝；这是一个代表处理标准输出的os.File类型变量的指针（图7.2）。
调用一个包含 类型指针的接口值的Write方法，使得 方法被调用。
*os.File (*os.File).Write
这个调用输出“hello”。
w.Write([]byte("hello")) // "hello"
通常在编译期，我们不知道接口值的动态类型是什么，所以一个接口上的调用必须使用动态
分配。因为不是直接进行调用，所以编译器必须把代码生成在类型描述符的方法Write上，然
后间接调用那个地址。这个调用的接收者是一个接口动态值的拷贝，os.Stdout。效果和下面
这个直接调用一样：
os.Stdout.Write([]byte("hello")) // "hello"
第三个语句给接口值赋了一个*bytes.Buffer类型的值
w = new(bytes.Buffer)
现在动态类型是*bytes.Buffer并且动态值是一个指向新分配的缓冲区的指针（图7.3）。
Write方法的调用也使用了和之前一样的机制：
w.Write([]byte("hello")) // writes "hello" to the bytes.Buffers
这次类型描述符是*bytes.Buffer，所以调用了(*bytes.Buffer).Write方法，并且接收者是该缓冲
区的地址。这个调用把字符串“hello”添加到缓冲区中。
最后，第四个语句将nil赋给了接口值：
接口值 244
gopl
w = nil
这个重置将它所有的部分都设为nil值，把变量w恢复到和它之前定义时相同的状态图，在图
7.1中可以看到。
一个接口值可以持有任意大的动态值。例如，表示时间实例的time.Time类型，这个类型有几
个对外不公开的字段。我们从它上面创建一个接口值,
var x interface{} = time.Now()
结果可能和图7.4相似。从概念上讲，不论接口值多大，动态值总是可以容下它。（这只是一
个概念上的模型；具体的实现可能会非常不同）
接口值可以使用＝＝和！＝来进行比较。两个接口值相等仅当它们都是nil值或者它们的动态
类型相同并且动态值也根据这个动态类型的＝＝操作相等。因为接口值是可比较的，所以它
们可以用在map的键或者作为switch语句的操作数。
然而，如果两个接口值的动态类型相同，但是这个动态类型是不可比较的（比如切片），将
它们进行比较就会失败并且panic:
var x interface{} = []int{1, 2, 3}
fmt.Println(x == x) // panic: comparing uncomparable type []int
考虑到这点，接口类型是非常与众不同的。其它类型要么是安全的可比较类型（如基本类型
和指针）要么是完全不可比较的类型（如切片，映射类型，和函数），但是在比较接口值或
者包含了接口值的聚合类型时，我们必须要意识到潜在的panic。同样的风险也存在于使用接
口作为map的键或者switch的操作数。只能比较你非常确定它们的动态值是可比较类型的接口
值。
当我们处理错误或者调试的过程中，得知接口值的动态类型是非常有帮助的。所以我们使用