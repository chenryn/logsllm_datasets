current += string(char)
switch s[i] {
continue
stack = append(stack, S[i])
continue 
stack = stack[l:］
ans += current[1 : len(current)-1]
now--
 now++
case
case '（':
counter--
res += "("
counter++
')':
---
## Page 983
解题思路
回 false。假设两个玩家都以最佳状态参与游戏。
如果玩家无法执行这些操作，就会输掉游戏。
的回合，玩家需要执行以下操作：
爱丽丝和鲍勃一起玩游戏，
题目大意
Note:
 Example 2:
Example 1: 
Return True if and only if Alice wins the game, assuming both players play optimally.
Also, if a player cannot make a move, they lose the game.
consisting of:
Initially, there is a number N on the chalkboard. On each player's turn, that player makes a move
Alice and Bob take turns playing a game, with Alice starting first.
题目
1025. Divisor Game
·用N-×替换黑板上的数字 N。
·选出任一×，满足0<×<N且 N%×== 0 。
1. 1 <= N <= 1000
Input: 3 
● Replacing the number N on the chalkboard with N - x.
● Choosing any × with O < x < N and N % x == 0.
Explanation: Alice chooses 1, Bob chooses 1, and Alice has no more moves.
Output: false 
Explanation: Alice chooses l, and Bob has no more moves.
Output: true
Input: 2 
return res
，他们轮流行动。爱丽丝先手开局。最初，黑板上有一个数字N。在每个玩家
只有在爱丽丝在游戏中取得胜利时才返回 True，否则返
---
## Page 984
 Example 1:
of B.）
(A node A is an ancestor of B if either: any child of A is equalto B, or any child of A is an ancestor
nodes A and B where V = IA.val - B.vall and A is an ancestor of B.
Given the root of a binary tree, find the maximum value V for which there exists different 
题目
Ancestor
1026. Maximum Difference Between Node and
代码
func divisorGame(N int) bool {
·两人相互玩一个游戏，游戏初始有一个数N，开始游戏的时候，任一方选择一个数×，满足〇〈×
package leetcode
 return N%2 == 0 
的策略。
获得胜利。所以经过分析可得，初始数字如果是偶数，有必胜策略，如果初始数字是奇数，有必输
奇数，他就会输。初始如果 为奇数，N=1的时候直接输了，N为其他奇数的时候，我们也只
脑的人。初始如果 为偶数，我就选择×=1，对手拿到的数字就是奇数。只要最终能让对手拿到
× ==〇 的条件了。必胜策略就是把对方逼至=1 的情况。题目中假设了对手也是一个很有头
这一题当 N= 1 的时候，那一轮的人必输。因为没法找到一个数字能满足 〇< ×〈N 并且  %
拿到的数字又是奇数。对手只要一直保证我们拿到奇数，最终肯定会逼着我们拿到1，最终他就会
游戏，给出N 的时候，能否直到这局你是否会必胜或者必输？
择数字，两人相互轮流选择。直到某一方再也没法选择数字的时候，输掉游戏。问如果你先手开始
< N 并且 N % × == 〇 的条件，然后 N-× 为下一轮开始的数。此轮结束，该另外一个人继续选 
了)，对手由于是一个很有头脑的人，
能选择一个奇数×，（因为 N % × == 〇，N 为奇数，×一定不会是偶数，因为偶数就能被 2 整除
当我们选完N－×是偶数的时候，他就选择1，那么轮到我们
---
## Page 985
提示：
是 B 的祖先)
A 是B的祖先。
给定二叉树的根节点 root，找出存在于不同节点A和 B 之间的最大值V，其中√=|A.val-B.vall，
题目大意
Note:
●树中的节点数在2到5000之间。
2. Each node will have value between 0 and 10ooo0.
1. The number of nodes in the tree is between 2 and 5000.
Among all possible differences,
We have various ancestor-node differences, some of which are given below :
Explanation:
Output: 7 
Input: [8,3,10,1,6,null,14,null,null,4,7,13]
110- 13|= 3
8-1l=7
18 - 3| = 5
每个节点的值介于0 到100000之间。
4
（如果A的任何子节点之一为 B，或者A的任何子节点是B的祖先，那么我们认为 A
3
， the maximum value of 7 is obtained by l8 - 1l 
9
8
0
3
目
---
## Page 986
If a node has only one child, that child is guaranteed to be the left child.
The depth of the root node is 0.)
output the value of this node. (If the depth of a node is D, the depth of its immediate child is D+1.
At each node in this traversal, we output D dashes (where D is the depth of this node), then we
We run a preorder depth first search on the root of a binary tree.
题目
1028. Recover a Tree From Preorder Traversal
代码
解题思路
·DPS 深搜即可。每个节点和其所有孩子的最大值来自于3个值，节点本身，递归遍历左子树的最
·给出一颗树，要求找出祖先和孩子的最大差值。
root.val))
max(leftMax, rightMax))))
func dfsAncestorDiff(root *TreeNode, res *int) (int, int) {
func maxAncestorDiff(root *TreeNode) int { 
 return max(leftMax, max(rightMax, root.Val)), min(leftMin, min(rightMin,
*res = max(*res, max(abs(root.val-min(leftMin, rightMin)), abs(root.Val-
if root == nil {
rightMax, rightMin := dfsAncestorDiff(root.Right, res)
if leftMax == -1 && leftMin == -l { 
leftMax, leftMin := dfsAncestorDiff(root.Left, res) 
return res
dfsAncestorDiff(root, &res)
res := 0 
值，深搜的过程中动态维护最大差值即可。
归遍历左子树的最小值，递归遍历右子树的最小值。依次求出自身节点和其所有孩子节点的最大差
大值，递归遍历右子树的最大值；每个节点和其所有孩子的最小值来自于3个值，节点本身，递
leftMax = root.val
 return -l,-1
rightMin = root.Val
rightMax = root.Val
leftMin =
:root.Val
 rightMin == -l {
---
## Page 987
Example 2: 
Example 1:
Given the output S of this traversal, recover the tree and return its root.
Output: [1,2,5,3,4,6,7]
Input: "1-2--3--4-5--6--7"
3
2
4
9
5
---
## Page 988
Example3:
Output: [1,2,5,3,null,6,null,4,null,7]
Input:
4
3
乙
9
5
---
## Page 989
提示：
节点，那么保证该子节点为左子节点。给出遍历输出 S，还原树并返回其根节点root。
（如果节点的深度为 D，则其直接子节点的深度为D+1。根节点的深度为 0）。如果节点只有一个子
在遍历中的每个节点处，我们输出D 条短划线（其中 D 是该节点的深度)
我们从二叉树的根节点root开始进行深度优先搜索。
题目大意
Note:
● Each node will have a value between 1 and 10^9.
● The number of nodes in the original tree is between 1 and 1000.
Output: [1,401,null,349,88,90]
Input: "1-401--349---90--88"
）每个节点的值介于1和10~9 之间。
原始树中的节点数介于1和1000 之间。
6
349
401
8
8
然后输出该节点的值。
---
## Page 990
代码
解题思路
·给出一个字符串，字符串是一个树的先根遍历的结果，其中破折号的个数代表层数。请根据这个字
(newIndex *int） { 
func dfsBuildPreorderTree(S string, index, level *int, cur *TreeNode)
func recoverFromPreorder(S string) *TreeNode {
import（
package leetcode
if *index == len(s) {
if len(s) == 0 { 
"strconv"
符串生成对应的树。
if *index == 0 && *level == 0 {
return root.Right 
dfsBuildPreorderTree(S, &index, &level, cur)
cur := root 
root, index, level := &TreeNode{}, O,0
 type TreeNode struct { 
 Definition for a binary tree node.
意的是每次深搜时，扫描字符串的 index 需要一直保留，回溯也需要用到这个 index。
点是否属于本层。如果不属于本层，回溯到之前的根节点，添加叶子节点以后再继续深搜。需要注
这一题解题思路比较明确，用 DFS 就可以解题。边深搜字符串，边根据破折号的个数判断当前节
 return index 
num, - := strconv.Atoi(s[*index:i])
for i = *index; i < len(s); i++ { 
i:=0
return &TreeNode{}
if !isDigital(s[i]） {
Right *TreeNode
Val int 
 break
Left *TreeNode
---
## Page 991
 Additionally, we are given a cell in that matrix with coordinates (ro, co).
where O <= r < R and O <= c < C.
We are given a matrix with R rows and C columns has cells with integer coordinates (r, c),
题目
1030. Matrix Cells in Distance Order
return index
if *level == i-*index { 
for i = *index; i < len(s); i++ {
} else if cur.Right == nil {
for j =i; j<len(s); j++ { 
j:=0 
if isDigital(s[i]）{
:=0
if cur.Left == nil {
num, - := strconv.Atoi(s[i:j]) 
index = dfsBuildPreorderTree(S, index, &nLevel, tmp)
tmp := &TreeNode{val: num, Left: nil, Right: nil}
index = dfsBuildPreorderTree(S, &i, &nLevel, tmp) 
cur.Right = tmp 
tmp := &TreeNode{val: num, Left: nil, Right: ni]}
index = dfsBuildPreorderTree(S, index, level, cur)
cur.Left = tmp 
if !isDigital(s[j]）{
break
index = dfsBuildPreorderTree(s, index, level, cur)
index = dfsBuildPreorderTree(S, &j, &nLevel, tmp)
cur.Right = tmp 
index = dfsBuildPreorderTree(S, &j, &nLevel, tmp) 
nLevel := *level + 1 
 break
---
## Page 992
解题思路
答案。）
c1)和(r2,c2)之间的距离是曼哈顿距离，|r1-r2|+|c1- c2|。
返回矩阵中的所有单元格的坐标，并按到(r0,c0)的距离从最小到最大的顺序排，其中，两单元格(r1,
该矩阵中给出了一个坐标为(r0,cO)的单元格。
给出 R行 C 列的矩阵，其中的单元格的整数坐标为 (r,c)，满足O<=r<R且O<= c< C。另外，我们在
题目大意
Note:
Example 3: 
 Example 2: 
Example 1:
order that satisfies this condition.)
c2) is the Manhattan distance, Ir1 - r2l + Ic1 - c2]. (You may return the answer in any
smallest distance to largest distance. Here, the distance between two cells (r1, c1) and (r2,
Return the coordinates of all cells in the matrix, sorted by their distance from (r0, c0) from
·按照题意计算矩阵内给定点到其他每个点的距离即可
4. 0 <= c0 <C
2. 1 <= C<= 100
1. 1 <= R <= 100
[[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]].
There are other answers that would also be accepted as correct, such as
     (     
Output: [[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]] 
Input: R = 2， C = 3， r0 = 1， c0 = 2 
The answer [[o,l],[1,1],[0,0],[1,0]] would also be accepted as correct.
Explanation: The distances from (r0,
Output: [[0,1],[0,0],[1,1],[1,0]] 
Input: R = 2, C = 2，r0 = 0， c0 = 1
Explanation: The distances from (r0, cO) to other cells are: [0,1]
Output: [[0,0],[0,1]] 
Input: R = 1，C = 2， r0 = 0， c0 = 0 
0 <= r0 < R
 cO) to other cells are: [0,1,1,2]
（你可以按任何满足此条件的顺序返回
---
## Page 993
 Example 2:
Example 1: 
 Given a list of three points in the plane, return whether these points are a boomerang.
A boomerang is a set of 3 points that are all distinct and not in a straight line.
题目
1037. Valid Boomerang
代码
Output: false
Input: [[1,1],[2,2],[3,3]]
Output: true
Input: [[1,1],[2,3],[3,2]]
cO))，make([][]int，O)
func allcellsDistorder(R int, C int,
package leetcode
longRow, longcol, result := max(abs(r0-0), abs(R-r0)), max(abs(c0-0), abs(C-
return result
for r := O; r < R; r++ {
for i := O; i <= maxDistance; i++ { 
bucket := make([][][]int, maxDistance+l)
maxDistance := longRow + longCol 
for i := O; i <= maxDistance; i++ {
for -, buk := range bucket[i] {
for c := O; c< C; c++ {
 bucket[i] = make([][]int, O) 
result = append(result, buk)
bucket[distance] = append(bucket[distance], tmp)
distance := abs(r-r0) + abs(c-c0)
tmp := []int{r，c} 
 r0 int,
cO int）[][]int {
---
## Page 994
made? Return the answer as an length 2 array: answer = [minimum_moves, maximum_moves]
positions.
at position 5, since moving it to any position (such as 0, or 3) will stillkeep that stone as an
s susodpua aun aow souun no 's'z't] = suons 'es ie ae sauons aun j!'eined ui
Each turn, you pick up an endpoint stone and move it to an unoccupied position so that it is no 
endpoint stone if it has the smallest or largest position.
On an infinite number line, the position of the i-th stone is given by stones [i] . Call a stone an 
题目
1040. Moving Stones Until Consecutive I
The game ends when you cannot make any more moves, ie. the stones are in consecutive 
endpoint stone.
longer an endpoint stone. 
代码
解题思路
些点是否可以构成回旋镖。
回旋镖定义为一组三个点，这些点各不相同且不在一条直线上。给出平面上三个点组成的列表，判断这
题目大意
Note:
·判断给出的3 组点能否满足回旋镖。
3. 0 <= points[i][j] <= 100
[0]-points[2][0]]*(points[0][1]-points[1][1]]
func isBoomerang(points [][]int) boo] {
package leetcode
·简单题。判断3个点组成的 2 条直线的斜率是否相等。由于斜率的计算是除法，还可能遇到分母
 return (points[O][0]-points[1][O]]*(points[O][1]-points[2][1]] != (points[0]
. points.length == 3
了，代码也简洁成一行了。
为〇的情况，那么可以转换成乘法，交叉相乘再判断是否相等，就可以省去判断分母为〇的情况
points[i] .length == 2
---
## Page 995
解题思路
提示：
answer = [minimum_moves, maximum_moves] 。
要使游戏结束，你可以执行的最小和最大移动次数分别是多少？以长度为2的数组形式返回答案
何移动时，即，这些石子的位置连续时，游戏结束。
点石子，因为无论将它移动到任何位置（例如〇或3），该石子都仍然会是端点石子。当你无法进行任
再是一颗端点石子。值得注意的是，如果石子像 stones =[1,2,5] 这样，你将无法移动位于位置 5 的端
子被称作端点石子。每个回合，你可以将一颗端点石子拿起并移动到一个未占用的位置，使得该石子不
在一个长度无限的数轴上，第i颗石子的位置为 stones[i]。如果一颗石子的位置最小V最大，那么该石
题目大意
Note:
Example 3: 
Example 2: 
 Example 1: 
3． stones[ij] 的值各不相同。
1. 3 <= stones.length <= 10^4 
3. stones [i] have distinct values.