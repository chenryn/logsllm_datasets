string of a’s of length i. That is, vc maps s to a string of a’s
precisely as long as the string mapped by v.
We note that vc is manifestly benign and non-attacking for
any program. Hence substituting this valuation in the sym-
bolic query must yield the intended query structure for the
control-path executed on v. Consequently, if this intended
query structure does not match the query the program com-
putes on v, then we can raise an alarm and prevent the query
from executing.
The fact that the candidate valuation vc may not follow
the same control path as v is not important as in any case
we will not follow the control path dictated by vc, but rather
simply substitute vc in the symbolic expression obtained on
the control path exercised on v. Intuitively, we are forcing
the program P to take the same path on vc as it does on
v to determine the intended query structure that the path
generates. We will justify this claim using several practical
examples below.
Consider our running example again (Fig. 3). The pro-
gram on input v : hn← 0, s← “Jim ′ OR 1 = 1 − −′′i exe-
cutes the if-block, and hence generates the symbolic query
exp:
“SELECT * FROM employdb WHERE name=’” + s+“ ’ ”
Substituting the input values in this expression yields
Q1:
SELECT * FROM employdb WHERE name=’Jim’ OR 1=1- -’
Consider the valuation vc : hn← 1, s← “aaaaaaaaaa” i. The
program on this path follows a diﬀerent control path (going
through the else-block), and generates a query whose struc-
ture is quite unlike the query structure obtained by pursuing
the if-block. However, substituting vc in the symbolic ex-
pression exp yields
Q2:
SELECT * FROM employdb WHERE name=’aaaaaaaaaa’
which is indeed the correct query structure on pursuing the
if-block. Since the query structures of Q1 and Q2 diﬀer, we
detect that the query input is an SQL-injection attack. Note
that an input assigning hn← 0, s← “Jane”i will match the
structure of the candidate query.
The above argument leads us to an approximate notion
of SQL injection:
Definition 4. Let P be a program, and v be an input
valuation, and vc the benign candidate input valuation corre-
sponding to v. An input valuation v for P is a SQL-injection
attack if
• the symbolic expression exp for the query string s0
on the path exercised by v results in diﬀerent query
structures when evaluated on v and vc (i.e., exp(v) 6≈
exp(vc)).
The above scheme is clearly implementable as we can build
the symbolic expression for the query on the input to the
program, and check the structure of the computed query
with the structure of the query obtained by substituting
candidate non-attacking values in the symbolic query. How-
ever, we choose a simpler way to implement this solution: we
transform the original program into one that at every point
computes values of variables both for the real input as well
as the candidate input, and hence evaluates the symbolic
query on the candidate input in tandem with the original
program.
4. THE CANDID TRANSFORMATION
In this section, we discuss the transformation procedure
for the dynamic candidate evaluation technique described
in the earlier section. We accomplish this using a simple
program transformation of the web application.
For every string variable v in the program, we add a vari-
able vc that denotes its candidate. When v is initialized
from the user-input, vc is initialized with a benign candi-
date value that is of the same length as v. If v is initialized
Original
Program
Source
Transformer
SQL parse tree
Checker
Instrumented
Web application
HTTP 
request
Instrumented
Web application
SQL Database
Figure 4: Overview of Candid (a) oﬄine view (b) run-time view
by the program(e.g. by a constant string like an SQL query
fragment), vc is also initialized with the same value. For
every program instruction on v, our transformed program
performs the same operation on the candidate variable vc.
For example, if x and y are two variables in the program,
the operation:
“SELECT * FROM employdb WHERE name=” + x + y
results in the construction of a query, or a partial query
string. The transformer performs a similar operation imme-
diately succeeding this operation on the candidate variables:
“SELECT * FROM employdb WHERE name=” + xc + yc
The operation on the candidate variables thus mirror the
operations on their counterparts. The departure to this
comes in handling conditionals, where the candidate compu-
tation needs to be forced along the path dictated by the real
inputs. Therefore, our translator does not modify the con-
dition expression on the if-then-else statement. At run-
time, the conditional expression is then only evaluated on
the original program variables, and therefore dictates can-
didate computation along the actual control path taken by
the program. The transformation for the while statements
are similar.
Function calls are transformed by adding additional ar-
guments for candidate samples. Due to the type safety
guarantees of our target language (Java), we only maintain
candidates for string variables. We also do not transform
expressions that do not involve string variables. For those
expressions that involve use of non-string variables in string
expressions, we directly use the original variable’s values for
the candidate.
The
transformation for
the SQL query statement
sql.execute calls a procedure compare-parse-trees that
compares the real and candidate parse trees. This procedure
throws an exception if the parse trees are not isomorphic.
Otherwise, the original query is issued to the database.
Figure 4 gives the transformed code for the program illus-
trated in Figure 1. The actual transformation rules for the
while language presented in the previous section is presented
in Figure 6.
Our tool, Candid, is implemented to defend applications
written in Java, and works for any web application im-
plemented through Java Server Pages or as Java servlets.
Figure 4 gives an overview of our implementation. Candid
consists of two components: an oﬄine Java program trans-
former that is used to instrument the application, and an
(online) SQL parse tree checker.
The program transformer is implemented using the
SOOT [23] Java transformation tool. The SQL parse-tree
checker is implemented using the JavaCC parser-generator.
4.1 Resilience of CANDID
The transformation of programs to dynamically detect in-
tentions of the programmer using candidate inputs as pre-
sented above is remarkably resilient in a variety of scenarios.
We outline some interesting input manipulations Web appli-
cations perform, and illustrate how Candid handles them.
Several approaches in the recent literature for preventing
SQL injection attacks fail in these simple scenarios (see Sec-
tion 6).
Conditional queries. Conditional queries are diﬀerential
queries constructed by programs depending on predicates
on the input. For example, a program may form diﬀerent
query structures depending on a boolean input (such as in
Fig 1), or perhaps even on particular values of strings. The
candidate input may not match the real queries on these
predicates, and hence may take a diﬀerent path than the
real input. However, in the Candid approach, conditionals
are always evaluated on the real inputs only, and hence the
candidate query is formed using the same control path the
real input exercises. An illustrative example: consider a pro-
gram that issues an INSERT-query if the input string mode is
“ADD” and issues a DELETE-query if mode is “MODIFY”.
For a real query with mode=“ADD”, the candidate query will
assign mode=“aaa” which, being an invalid mode, may actu-
ally cause the program to throw an exception. However,
the test for mode is done on the real string and hence the
candidate query will be an INSERT-query with appropriate
values of the candidate input substituted for the real input
in the query.
Input-splitting. Programs may not atomically embed in-
puts into queries. For example, a program may take an input
string name, which contains two words, such as “Alan Tur-
ing”, and may issue a SELECT query with the clauses
FIRSTNAME=’Alan’ and LASTNAME=’Turing’.
In this case,
the candidate input is a string of a’s of length 11, and though
it does not have any white-space, the conditional on where
to split the input is done on the real query, and the can-
didate query will have the clauses FIRSTNAME=’aaaa’ and
LASTNAME=’aaaaaa’, which elicits the intended query struc-
ture.
void process-form(string uname, string uname_c, string pwd, string pwd_c, bool modify,
string phonenum, string phonenum_c) {
if (modify == false){
/* Path 1. only display */
query = "SELECT * from phonebook WHERE username = ’" +
uname + "’ AND password = ’ " + pwd + "’";
query_c = "SELECT * from phonebook WHERE username = ’" +
uname_c + "’ AND password = ’ " + pwd_c + "’";
}
else{
/* modify telephone number */
if (phonenum == ""){
/* Path 2. delete entry */
query = "DELETE from phonebook WHERE username=’" + uname + "’ AND password = ’" + pwd + " ’ ";
query_c = "DELETE from phonebook WHERE username=’" + uname_c + "’ AND password = ’" + pwd_c + " ’ ";
}
else{
/* Path 3. update entry */
query = "UPDATE phonebook SET phonenumber =" + phonenum + "WHERE username = ’ "
+ uname +
"’ AND password = ’" + pwd + "’";
query_c = "UPDATE phonebook SET phonenumber =" + phonenum_c + "WHERE username = ’ " + uname_c
+ "’ AND password = ’" + pwd_c + "’";
}
}
compare-parse-trees(query,query_c); /* throw exception if no match */
sql.execute(query);
}
Figure 5: Transformed source for the example in Figure 1
Grammar Production
defn
stmt
ae
se
be
sql.execute(se)
→
|
|
|
|
→
|
|
|
|
|
→
|
|
→
|
|
→
|
|
→
int n
str s
defn1 ; defn2
input-int n
input-str s
skip
s := se
n := ae
stmt1 ; stmt2
if be stmt1 else stmt2
while be stmt1
c
n
fi(t1,. . .,tk)
cstr
s
gi(t1,. . .,tk)
false
true
hi(t1,. . .,tk)
sql.execute(se)
{
{
{
{
{
{
{
{
{
{
{
{
{
{
{
{
{
{
{
{
{
Deﬁnition of the function Γ()
int n
str sc; str s
Γ(defn1) ; Γ(defn2)
input-int n
input-str s ; str sc := str-candidate-val(s)
skip
sc := Γ(se) ; s := se
n := ae
Γ(stmt1); Γ(stmt2)
let t-stmt1 = Γ(stmt1) in
let t-stmt2 = Γ(stmt2) in
if be t-stmt1 else t-stmt2
let t-stmt1 = Γ(stmt1) in
while be t-stmt1
c
n
fi(t1,. . .,tk)
cstr
sc
gi(Γ(t1),. . .,Γ(tk))
false
true
hi(t1,. . .,tk)
let t-se = Γ(se) in
compare-parse-trees(se,t-se); sql.execute(se)
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}