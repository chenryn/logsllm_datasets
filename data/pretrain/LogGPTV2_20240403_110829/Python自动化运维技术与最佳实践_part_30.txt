228第三部分案例篇
从图13-2可以看出系统的三个层次，首先管理员向OMServer平台所在Web服务器
发起HTTP请求，OMServer接收HTTPPOST的数据并采用“RC4+b64encode+密钥key”
进行加密，再作为rpyc客户端向rpyc服务器发送加密指令串，rpyc服务器端同时也是
Saltstack、Ansible、Func等的主控端，主控端将接收到的数据通过“RC4+b64decode+密钥
key”进行解密，解析成OMServer调用的任务模块，结合 Saltstack、Ansible或Func 向目标
业务服务器集群发送执行任务，执行完毕后，将返回的执行结果加解密处理，最后逐级返回
给系统管理员，整个任务模块分发执行流程结束。
13.3
数据库结构设计
13.3.1
数据库分析
OMServer平台采用了开源数据库MySQL作为数据存储，将数据库命名为OMServer，
该数据库总共有4张表，表信息说明如下。
server_fun_categ：服务功能分类表。
server_app_categ：服务应用分类表。
server_list：服务器列表。
module_list：模块列表。
13.3.2
数据字典
server_fun_categ服务功能分类表。
字段名
数据类型
默认值
允许非空
自动递增
备注
ID
int(11)
NO
是
服务功能分类ID
char(20)
NO
服务功能分类名称
server_app_categ服务应用分类表。
字股名
数据类型
默认值
允许非空
自动递增
备注
ID
int(11)
NO
是
服务应用分类ID
server_categ_id
int(11)
服务功能分类ID
app_categ_name
char(30)
NO
服务应用分类名称
server_list服务器列表。
---
## Page 250
第13章从零开始打造B/S自动化运维平台229
字段名
数据类型
默认值
允许非空
自动递增
备注
server_name
char( 13)
NO
主机名称
server_wip
char(15)
NO
主机外网IP
server_lip
char(12)
NO
主机内网IP
server_op
char(10)
NO
主机操作系统
server_app_id
int(11)
NO
服务应用分类ID
module_list模块列表。
字段名
数据类型
默认值
允许非空
自动递增
备注
ID
int(11)
NO
是
模块ID号
module_name
char(20)
NO
模块名称
module_caption
char(255)
NO
模块功能措述
varchar(2000)
NO
模块前端扩展
13.3.3数据库模型
在ITIL体系中有一种比较典型的资产定义方法，即采用“功能分类”作为根类，其
次关系的定义，例如，Linux.Web（一级功能类别），bbs.domain.com（二级应用类别）.
10.11.100.10（服务器归bbs.domain.com类别），详见图13-3所示的数据库模型图。
moe
TBB(1)
two-fen/apeea c
1B8(10
madle,
raptas-ONAR(25S)
1BM(0
arer_olegjtIN[11]
图13-3数据库模型
从模型关系图中可以看出，server_list表中的 server_app_id字段被设置为外键，与
server_app_categ表中的ID字段进行关联；server_app_categ表中的 server_categ_id字段被设
置为外键，与server_fun_categ表中的ID字段进行关联。
---
## Page 251
230第三部分案例篇
13.4系统环境部署
13.4.1系统环境说明
OMServer 采用 Django-1.4.9、nginx-1.5.9、uwsgi-2.0.4、rpyc-3.2.3 等开源组件来构建。
为了便于读者理解，下面对平台的运行环境、安装部署、开发环境优化等进行详细说明。环
境设备角色表如表13-1所示。
表13-1系统环境说明表
角色
主机名
IP
环境说明
主控编
SN2013-08-020
192.168.1.20
Saltstack | Ansible |Fume 主控编、rpye 服务器端
Wieb Server
SN2012-07-010
192.168.1.10
Django+uwsgi、rpye 客户编
13.4.2系统平台搭建
OMServer平台涉及两个角色，其中一个为Web服务端，运行Django及rpye环境，另
一角色为主控端，需要部署Saltstack、Ansible或Func主控端环境，可参与本书第9~11章
内容，本节不予详细介绍。另外同样需要部署rpye环境。
（1）Django 环境部署
本示例部署主机为192.168.1.10（SN2012-07-010）。
obue[a/tteeus/9uo/ po s9 obueCa/re2eut/8aou/ d- x1pxw 
 cd /hone
创建安装包目录
 mkdir -p /data/1ogs/
·创建uwsgI目志目录
1）安装pcre。pcre是一个轻量级的正则表达式函数库，Nginx的HTTPRewrite 模块会
用到，最新版本为8.34（对于OMServer平台环境来说非必选项）。
wget ftp://ftp, csx,cam.ac uk/pub/softvare/programming/pcre/pcre=8.34,tar-gz
tar -zxvf pcre-8.34.tar.gz
 cd pcre-8.34
 make 4& make instal1
 . /configure
#cd -*
2）安装Nginx。Nginx是最流行的高性能HTTP服务器，最新版本为1.5.9。
wget http1//nginx.org/download/nginx1.5. 9.tar -gz
tar =zxvf nginx1.5 9.tar,gz
 cd nginx=1.5.9
---
## Page 252
第13章从零开始打造B/S自动化运维平台231
 wget http://nginx.org/down1oad/nginx-1.5. 9,tar gz
 tar -zxvf nginx-1.5.9,tar.gz
 cd nginx-1.5.9
dssu-uata--xuybu/teoot/aen/=xgead--Apogou=dnoab-- Apoqou=aesn-- ounfguoo/*+
stub_status_module ==vith-cc=opt=′=03* ==with=cpu=opt=opteron
 make s6 make insta11
+ cd ..
3）安装MySQL-python。MySQL-python是Python访间MySQL数据库的第三方模块库，
最新版本为1.2.3c1。
yum insta11 -y MySgL=python
yun安展方式
 wget https//nchc.d1 .sourceforge .net/project/mysql-python/mysql-python/1 .2.2/
 tar -zxvf MySQL-python-1.2.2.tar.gz
源码安装方式
 cd MySQL=python=1 .2.2
 python setup-py insta11
 cd ..
4）安装uwsgi。uwsgi是一个快速的、纯C语言开发的、自维护、对开发者友好的
WSGI服务器，旨在提供专业的PythonWeb应用发布和开发功能，最新版本为2.0.4。
 wget http://projects,unbit,it/downloads/uwsgi=2.0.4.tar gz
 tar -zxvf uusgi2,0.4.tar.gz
 cd uxsg1-2.0.4
make
uTq/xsn/ Tbsxn do 
 cd ..
5）安装Django。Django是一个Python最流行的开源Web开发框架，最新版本为1.6.5。
考虑到兼容与稳定性，本示例使用1.4.9版本进行开发。
 wget https://ww.djangoproject.com/m/releases/1.4/Django-1.4.9,tar.gz
tar -2xvf Django-1.4.9.tar,gz
 cd Django-1.4.9
 python setup-py insta11
6）配置Nginx。修改/usr/local/nginx/conf/nginx.conf，添加以下 server 域配置：
server [
1isten 80;
server_name omserver.domain.com/
location / {
usgi_pass 192.168.1.10:9000;
include uvsgi_params:
uwsgi_paran UWSGI_SCRIPT django_wsgi;
uusgi_param UMSGI_CHDIR /data/www/OMservezweb;
access_log off;
---
## Page 253
232第三部分案例篇
I tar (mid(midi |wav|rtf impeg) $ (
1ocation ~* ^, +\ . (mpg1av↓/mp3|svf |zip| tgz|gz|zaz |bz2 |doc|x1sIexelppt |txt
root /data/ww/oMserverweb/static
目录，可以根据具体环境进行修改。
7）配置uwsgi。创建uwsgi 配置文件/usr/local/nginx/conf/uwsgi.ini，详细内容如下：
[wwsg1]
socket=0.0.0.0：9000登听的地址及墙口
master = true 
自幼主进程
pidfile = /usr/local/nginx/uwsgi -pid
processes = 8
uMsgi开启的进程数
chdir = /data/www/oMserverweb
客日年日
pythonpath = /data/www
profiler=true
memory-report=true
enable-threads = true
logdate=true
1imit-as=6048
daemonize=/data/logs/django .1og
启动uwsgi与nginx服务，建议配置成服务自启动脚本，便于后续的日常维护。详细启
动脚本这里不展开说明，有兴题的读者可参阅互联网上已经存在的相关资源。
/usr/bin/uwsg1 -=In1 /usr/Loca1/nginx/conf/uwsgi. ini
/usr/1ocal/nginx/sbin/nginx
访间http://omserver.domain.com，出现如图4-4所示的页面说明Django+uwsgi环境部署
成功！
It worked!
Congratulations on your first Djangopewered page.
图13-4Django 默认首页
---
## Page 254
第13章从零开始打造B/S自动化运维平台233
（2）rpye模块安装。
rpyc（RemotePythonCall）是Python提供分布式计算的基础服务平台，可以理解成封装
程度更高的Socket编程，最新版本为3.3。本示例需要部署rpyc模块的主机为192.168.1.20
(SN2013-08-020)、192.168.1.10 (SN2012-07-010)。
ou-- 26.xe*c*2*c-odz/dz/1/eoxnos/aoexoed/6xo*uoqddd//1edua6 +
tar -zxvf xpye-3.2.3.tar.gz
check-certificate
cd xpyc-3.2.3
python setup.py insta11
13.4.3开发环境优化
开发环境相对于生产环境更注重调试便捷性，好的调试工具对软件开发将起到事半功倍
的作用，方便高效地定位问题。本节介绍Django必备调试工具django-debug-toolbar的安装
与配置，同时介绍如何实现一种Django代码自动刷新生效的方法。
(1 ） django-debug-toolbar 的安装
 get https://github,com/robhudson/django-debug-too1bar/archive/master.z1p
 unzip master
 cd django-debug-toolbar-nastez/
 python setup·py insta11
修改Django的 setting.py配置，关键参数如下：
INTERNAL_IPS = (*127,0.0.1′, *192.168.1.101′,)
添加启动调试器的来源IP
MIDDLEWARE_CLASSES -( + MIDDLEWARE_CLASSES 添加以下行
*debug_toolbar ,middlevare.DebugToolbarMiddleware′,
INSTALLED_APPS = (
INSTALLED_APPS 添加以下行
'debug_toolbar′,
TEMPLATE_DIRS = (
TEMPLATE_DIRS 添加以下行，注意与Python 的安装路径保持一最
bnqap/66a*9*zds*8*01eqtoo6nqepobue/eebexoed-a1ts/9*zuoqad/att/x8n/,
*,/eedm/zeqt00
务必要谊染一个模板，这样debug_toolbar才会自动附加调试信息到当前的页面，否则
看不到debug_tool的界面。debug_toolbar在业务前端页面设计成可伸缩展示，展开后的调试
界面如图13-5所示。
---
## Page 255
234第三部分案例篇
Settings from OMserverweb.settings
Settis
ts,m8,Net1
Velot
IE,LIB
Lsbartt
(tistiad', “lists
ytf-F
图 13-5debug_toolbar 界面
（2）Django源码自动重载（reload）方案
本方案结合uwsgi的“--touch-reload”参数来实现，参数格式：-touch-reload”文件"
即当该参数值指定的文件发生变化（修改或touch操作）时，uwsgi进程将自动重载（reload），
从面使我们的项目代码刷新生效。另外，如何保证一旦更新项目源码立即触发变更--touch