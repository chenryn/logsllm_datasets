Who am I?
• Seth Fogie, VP Airscanner
• Airscanner Mobile Security
– Mobile AntiVirus
– Mobile Encrypter
– and more coming…
• Author
– Security Warrior
– Maximum Wireless Security
– InformIT.com Security Section
Overview
• Basic Security Issues
• Conceal A Backdoor Wizard
• Keyboard Logger
• Reverse Engineering Overview
• The Invisible Spy
• The Backdoor FTP Server
• Hard Reset Code Extract
• Window Mobile Buffer Overflow
• Miscellaneous Attacks
• Protections and Preventions
Basic Security Issues
• Intrinsically lacking in security
• Lost/stolen/repaired/Sold PDA’s 
• Password issues:
– Stored in reg. Cpl swap. Bruteforce. 
• Biometrics
• Bluetooth/IR issues
• Wi-Fi issues
• ActiveSync DoS connect/disconnect on port 5679
• Network DoS attacks – ping –i .001 
• Forensics Programs ‘copy’ RAM/ROM image
• Hard Reset/Soft Reset DoS (more on this later)
• Autorun fun with folder 2577 (demos)
Conceal A Backdoor Wizard (Cabwiz) 
• Trojan wrapper
– Conceals Trojan install files & registry settings
– Consolidates installation process into one step
– Self extracting and self executing 
– CAB files self destructs
– Created by Microsoft…guaranteed to work
• Steps
– Create Trojan files & determine registry settings
– Msdn.microsoft.com for instructions
– .inf file contains all relevant information
– C:\Cabwiz fungame.inf = fungame.cab
What is a PDA Keyboard
• What is a Windows Mobile 
Keyboard?
– Large bitmap
– Code to define what section to load
– Key array to define key press 
behavior
• Character to be ‘typed’
• Button coordinates to be ‘pushed’
– Packaged as core DLL (MSIM.DLL)
– Configured via registry settings
Keyboard Logger?
• Challenges
– Requires creation of custom alternate keyboard
– Installable DLL with registry settings
– OS and OEM variations
• Creation
– Soft Input Panel Starters: 
• Programming CE .NET (sample numerical keyboard)
• Platform Builder (sample SIP)
• EVC4
– SIP Code + (CreateFile, SetFilePointer, WriteFile)
Keyboard Logger Details
• The Code
– HANDLE hfile;
– hfile=CreateFile(TEXT("\\logfile.txt"), GENERIC_WRITE, 
FILE_SHARE_WRITE, NULL, OPEN_ALWAYS, 
FILE_ATTRIBUTE_HIDDEN, 0);
– SetFilePointer(hfile, 0, NULL, FILE_END);
– WriteFile(hfile, keyValue, keyValueSize, &dwordValue, 
NULL);
– CloseHandle(hfile);
• Registry Settings:
– IsSIPInputMethod disabled for real keyboard
• CLSID: 42429667-ae04-11d0-a4f8-00aa00a749b9 (set 1 to 0)
– ‘Keyboard’ name & icon borrowed by keylogger.dll
– New keyboard has own CLSID with settings
– HKCU\ControlPanel\SIP\DefaultIM\{CLSID}
Keyboard Logger!
• Install with help of cabwiz (demo)
• Difficult to detect
– Hidden attribute set on WriteFile = invisible file
– Process practically invisible
RVE Overview
• OS & Hardware specifics
• Legal Issues
• RVE tools and techniques
• ARM Fundamentals
• Windows 2000 Kernel with 32 process limit
• Memory
– RAM (Registry, Programs, Databases)
– ROM (OS)
• eXecute In Place – Save memory (No Compression)
• Can’t break executing DLL code
• Graphics, Windowing and Event Subsystem
• Scheduler
– Multitasking
– Thread level vs. process level scheduling
Windows CE Overview
RVE Legal Issues
• Laws
– No person shall circumvent a technological measure that 
effectively controls access to a work protected under this title.
– to ''circumvent a technological measure'' means to descramble a 
scrambled work, to decrypt an encrypted work, or otherwise to 
avoid, bypass, remove, deactivate, or impair a technological 
measure, without the authority of the copyright owner;
• Encryption Research & Security Testing
– identify and analyze flaws and vulnerabilities of encryption 
technologies applied to copyrighted works
– accessing a …computer system…solely for the purpose of 
…investigating… a security flaw or vulnerability…
• I have obtained permission to RVE these programs…
• Prerequisites
– ASM (concept)
– Hex to Binary to ASCII to Decimal
– ARM Processor
• Registers
• Opcodes
Binary
Decimal
HEX
ASCII
01001011
01000011
01000001
01001100
01000010
075
067
065
076
066
4B
43
41
4C
42
K
C
A
L
B
Reverse Engineering Fundamentals
• Registers
– 37 Total @ 32 bit each
– Register purpose changes depending on mode
– R0 – R14 + PC(R15)
– R15(PC): Program Counter – Next address of 
execution
– R14: Link Register (LR) – Hold sub routine 
return address.
– R13: Stack Pointer (SP)
– Status Flags (NZCO)
• Negative / Less Than
• Zero (Equal)
• Carry / Borrow / Extend
• Overflow 
ARM Registers
ARM Registers
• Move (MOV) – XX XX A0 EX
– MOV R3, R1:
01 30 A0 E1
– MOV R2, #1:
01 20 A0 E3 
• Compare (CMP) – XX XX 5X EX
– CMP R2, R3:
03 00 52 E1
– CMP R4, #1:
01 00 54 E3
ARM Opcodes – MOV, CMP
• Status Flags
– CMP R0, R1
– MOVS R0, R1  /  ANDS R0, R1, 0xFF
R0>=R11
R0=R11
R0 >= R10
C
Z
N
Pass through
R1 = 0  1
R1 < 0  1
C
Z
N
ARM Status Flags
•HI: C set and Z clear unsigned 
higher
•LS: C clear or Z set unsigned 
lower or same
•GE: N equals V greater or equal
•LT: N not equal to V less than
•GT: Z clear AND (N equals V) 
greater than
•LE: Z set OR (N not equal to V) 
less than or equal
•AL: (ignored) always
•EQ: Z set equal
•NE: Z clear not equal
•CS: C set unsigned higher or 
same
•CC: C clear unsigned lower
•MI: N set negative
•PL: N clear positive or zero
•VS: V set overflow
•VC: V clear no overflow
ARM Status Flags
• Branch (B) - XX XX XX EA
– BEQ: If Z = 1 (XX XX XX 0A)
– BNE: If Z = 0 (XX XX XX 1A)
– BMI: If N = 1 (XX XX XX 4A) 
• Branch Link (BL) - XX XX XX EB
– BLEQ: If Z = 1 (XX XX XX 0B)
– BLNE: If Z = 0 (XX XX XX 1B)
ARM Opcodes – B, BL
•
Load Register (LDR) / Store Register (STR)
– STR R1, [R4, R6]
Store R1 in R4+R6
– STR R1, [R4,R6]!
Store R1 in R4+R6 and write the 
address in R4
– STR R1, [R4], R6
Store R1 at R4 and write back 
R4+R6 to R4
– STR R1, [R4, R6, LSL#2]
Store R1 in R4+R6*2 
(LSL discussed next)
– LDR R1, [R2, #12]
Load R1 with value at R2+12.
– LDR R1, [R2, R4, R6]
Load R1 with R2+R4+R6
•
LDM/STM 
– STMFD   SP!, {R4,R5,LR}
– LDMFD   SP!, {R4,R5,LR}
•
LDRB/STRB
ARM Opcodes – LDR / STR
• Hex Editor
– Needed to make changes to program files
– UltraEdit32
• Disassembler
– Converts program file into ASM code
– IDA Pro
• Debugger
– USB connection SLOW! (Pocket Hosts + W/LAN)
– Allows real time execution and walk through of code
– Microsoft eMbedded Visual C++ 3/4
Reverse-engineering Tools
The Invisible Spy
• vRemote 3.0 (permission obtained to RVE)
– Remotely control or view PDA from PC (VNC)
• Legit program with valid purpose…
– Standard installer
– Registry settings
– Listed in Running Programs List
• …but what if I don’t want it to be visible!
The Invisible Spy - RVE ex. 1.1
•
Locate window create functions (DEMO START)
•
CreateWindowEx
– HWND CreateWindow( 
LPCTSTR lpClassName, 
LPCTSTR lpWindowName, 
DWORD dwStyle, 
int x, int y, int nWidth, int nHeight, 
HWND hWndParent, 
HMENU hMenu, 
HANDLE hInstance, 
PVOID lpParam );
•
dwStyle
– WS_MAXIMIZE, WS_MINIMIZE, WS_POPUP, WS_VISIBLE, etc.
•
Winuser.h
• #define WS_MAXIMIZE
0x1000000
• #define WS_MINIMIZE
0x20000000
• #define WS_POPUP
0x80000000
• #define WS_VISIBLE
0x10000000
The Invisible Spy - RVE ex. 1.2
• General RVE process
– Load it in Disassembler
– Locate needed files!
– Note names of functions
• CreateWindowEx
• MessageBoxW
• wcscmp
• Wcslen
– Find target (demo-CreateWindowEx)
– Change Visible to Minimize
The Invisible Spy – NOP
• NOP does not technically exist
– 0x90 = UMULLS
– Opcode that does nothing?