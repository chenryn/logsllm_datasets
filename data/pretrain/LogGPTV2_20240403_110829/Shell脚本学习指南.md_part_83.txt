值较适合，可副除所有除了所有者（与root）以外的访问。
需要非默认权限时，Shell脚本应于开始处明白地直接下达umask命令，这个换作必须
在所有文件建立之前做。不过，像这样的设置不会影响在命令行上被重定向的那些文件，
因为它们在瞬本起始时，已被打开。
第二个重要的工具就是chmod命令了：你应该好好了解它，即便是在开放所有人读取的
公开环境下，文件与目录仍应多作限制。包括邮件文件、网页浏览器历史记录与缓存、
www.TopSage.com
---
## Page 490
478
附象B
两
私有信件、财务与个人数据、营销计划等。邮件客户端与浏览器通常使用的是默认的限111
制性权限，但你以文本编辑器建立的文件就必须自行使用chmod变更了。如果你想要更
谨慎行事，那么请不要使用文本编辑程序建立文件：你可以先以touch建立空文件，执
行chmod后再编辑它。
你应该还记得，系统管理员拥有你文件系统的完整访问权，他可以读取任何文件。虽然
大部分的系统管理员认为未经文件所有者的允许，查看用户文件是不道德的，但部分组
织却认为，所有计算机文件，包括电子邮件，都属于公司财产，应24小时监控，这点的
合法性其实很模，且世界各国标准不一。
加密与数据安全性
如果你希望存储的文件除了你之外（几乎）没有任何人可以读取，那么就需要用到
加要，由于各国政府的输出条例将加需工具视为或器，国此大部分UNIX厂商不会
件之前，我们有以下几点建议：
安全性是一个程序，而非产品。有本书可以让你有更深入的了解：《Secrets
and Lies: Digital Security in a Networked World) (Wiley).
你是否曾志记你的加要密钥，或是离职员工留下的密钥不正确，这都可能漏
失你的数据：良好的加密方式，通常无法在你要的时间之内破解。
就像员工离职你可能会换门锁一样，你应该相信使用前职员的加害密钥是不
可言的，你应该使用新的要钥重新加害普以先前的要钥加要过的所有文件。
如某加雾文件提升安全性，使将用户额不方使，它们可能会直接停用加需。
如果你怒了解更多与加害算法相美的历史，建议你从《TheCodeBook：The
Evolution of Secrecy from Mary. Queen of Scots, to Quantum Cryptography)
（Doubleday）这本书开始。如果你党得很有兴趣，怒了解更多其法的细节，你可以
继续看 《Applied Cryptography:Protocols,Aigorithms,and Source Code in C)
（Wiley）。http://www.math.utah.eda/pub/rex/bib/index-table.hrml里，还有变多相
关学术议题的参考文献供你研究。
最后，在这个网络计算机的时代，你很可能会被网络与文件系统或是操作系统分开，除
非你的网络通信确定相当安全，否则你的数据其实很危险。无线网络的弱点又更多，软
件可以无声无息地窃听你的网络通信，利用现行无线加密通信协议的弱点，解出加密的
通信数据。远端访问你的电子邮件，还有互动式的信息系统，可能都是不安全的。如果
www.TopSage.com
---
## Page 491
文件与文件系统
你还在使用telnet，或非匿名式的ftp连接计算机，请立即切换为安全的Shell（secure
Shell）（注23）。旧式的这些通信软件会以明码文本传递所有数据，包括用户名称与密
码：网络攻击者可以轻松地取得这类数据。secureShell软件使用健金的公钥加密，完
成安全交换数据的操作，它会以随机产生长的加密密钥与其他许多较简单与较快的加密
算法一起使用。
用户的数据会等到加密通道建立才开始传送，而标准的加密方法也经过深度的考虑，普
追相信是十分安全的。攻击者看到你的封包时，是经过随机字节组流加密后的样子，不
过来源与目地端地址都看得到，也可能拿来分析.secure Shell也会为XWindowSystem
的数据建立安全通道，不过如果攻击者在你和你的计算机间动手脚，这么做也是于事无
补的。网吧、键盘探测、无线网络等等，都可能让攻击大行其道，而令secureShell无
用武之地。
UNIX扩展文件名惯例
有些操作系统，使用主要名称、一个点号，及1一3个字符的文件类型或文件扩展作为文
件名的形式。这些扩展有其重要目的：指出文件内容属于哪种特定的数据类型。例如，
扩展文件名为pas指的是文件内容为Pascal的源代码，而exe指的则为二进制可执行
文件。
这里并不保证文件扩展必会反映文件内容，不过大部分用户觉得这么做很好用，便遵循
这一惯例，
UNIX也提供不少的通用文件扩展，但UNIX的文件名并未强制必须有一个点号。有时，
文件扩展只是个惯例而已（对大部分的脚本语言来说），但编译器通常会要求特定的文
件扩展及使用主文件名（截去扩展部分），以形成其他相关文件的名称。较常见的几种
扩展见表B-1。
表B-1：常见的UNIX文件扩展
数字的1。手册页的Section1（用户命令）
程序库打包文件
awk
awk语言原始文件
注23：
  hp://www,.colambia.edu/kermisl/, hrtp:/www.ssh.com/aj http://www.openssh.org/,
要史入了期 SSH,可本考《The Secure Shell: The Definitive Guide}（O'Reilly)$
www.TopSage.com
---
## Page 492
480
附录B
表B-1：常见的UNIX文件扩展（续）
bz2
以bzip2压缩的文件
C
C语言原始文件
cc C cpp cxx
C++语言原始文件
eps ps
PostScript页面描述语言原始文件
f
Fortran 77语言原始文件
gz
由gzip压缩的文件
f90
Fortran90/95/200x语言原始文件
h
C语言标头文件
html htm
超文本标记语言（HyperText MarkupLanguage）文件
0
目标文件（来自大部分编译程序语言）
pdf
可移植式文件格式文件
9
汇编语言源文件（例如，编译器的输出，以反映符号编码选项-S）
sh
Bourne系列 Shell 脚本
: - 11
50
共享对象库（部分系统称之为动态载人库）
tar
磁带打包文件（产生自tar工具程序）
,V.
cvs与rcs的历史文件
以pack压缩的文件（极少见）
以compress压缩的文件
展文件名，且允许在使用程序时，省略扩展文件名。但UNIX本身并未在可执行文件上
应用任何特定的扩展（文件权限已经做了这件事了），UNIX的软件极少允许省略文件名
扩展。
有些UNIX文本编辑程序提供用户建立临时备份文件，这么一来，就算是在编辑较久的
通信期中，也能每隔一段时间就将文件记录在文件系统里，对这类备份文件的命名，使
用惯例有几种：将（#）或（一）字符前置于文件开头或后置于文件结尾，或以加上数
字的方式编排，例如，1”、.2~等等。后者的文件名产生编号方式模仿其他文件系统
所提供的，UNIX本身并未提供这样的功能，不过其实UNIX的文件命名规则相当弹性，
用户可以自行这么设置。
文件产生编号在其他系统下可保留文件的多个版本，而省略编号通常指的就是最高编号。
UNIX提供更好的方式，处理文件版本的历史记录：通过软件工具，保留与主文件不同
www.TopSage.com
---
## Page 493
文件与文件系统
481
广网
部分的历史记录，并附上注释性的描述，说明改变部分。这类的包一开始是AT&T的
.com
Source Code Control System（sccs），现今则为Revision Control System（rcs）（见
附录C“其他程序”）与ConcurrenrVersionsSystem（cvs）较常见。
小结
我们带你将UNIX的文件系统完整看过一遍，现在，你应该对下面这些功能已经相当熟
悉了：
文件为0至多个8位字节的流，文本文件里的行只能以换行字符来标示行界限。
字节通常以ASCII字符解释，但UTF-8编号与Unicode字符集让UNIX文件系统、
管道与网络通信，能支持全世界书写世界上数百万种不同字符，且大部分现存文件
或软件也能有效使用。
文件有属性，例如时间藏、所有权与权限。这可以让我们更有效地设置访问控制层
级及隐私权，提供比其他桌面环境操作系统更好的支持，并剔除大部分计算机病毒
的问题。
可以在目录的单一节点设置适当权限，控制整个目录树的访问。
极大的文件几乎不会造成什么问题，而在现行技术下，新的文件系统设计也能容许
越来越大的文件。
文件名与路径名称的最大长度，已超出你会用到的最大长度。
简明的层级式目录架构，辅以斜杠分隔的路径组成部分，搭配mount命令的使用，
几乎可以拥有无限大小的逻辑式文件系统。
尽可能地将所有数据看成文件，且鼓助这么做，可以简化人为的数据处理与使用。
文件名可使用NUL与斜杠以外的所有字符，但实务上，为了可移植性、可靠度，及
Shell通配字符的考虑，大大地限制了应该可被使用的字符。
文件名的字母大小写将视为不同（除了MacOSX的非UNIXHFS文件系统）。
虽然文件系统本身并未规定文件名结构，但许多程序仍预期文件名应有·加上扩展
名称，并利用此扩展建立相关文件。Shell通过它们对通配字符样式的支持，如
ch01.*与*.xml，来鼓励此实现。
文件名存储在目录文件里，而与文件相关的信息、文件metadata则另存储于inode
实体记录中。
在相同文件系统内的文件与目录要移动或更名是相当快的，因为只有它们包含的目
录实体需被更新，文件数据块本身则不会被访问。
www.TopSage.com
---
## Page 494
482
附录B
硬连接与软连接允许同一实体文件拥有多个名称，硬连接只限在单一实体文件系统
里才能做，但软违接则可指向逻辑文件系统的任一位置。
inode表格大小为文件系统安装时就已固定，所以文件系统即使仍有空间置放文件
数据，也可能出现已满的状态。
www.TopSage.com
---
## Page 495
附录C
重要的UNIX命令
现今UNIX系统都随附相当多命令。很多是特殊用途，也有很多是日需处理使用的，它
们都能应用在交互模式下，或写在Shell脚本里。不过，我们不可能包括得了系统里所
有的命令，也没有这么做的必要（像UNIXinaNutshell》的书籍对此部分有非常深
入的描述）。
我们仍尽可能地找出有用的命令，也就是UNIX的用户或程序设计人员首先应了解的那
些，简单数个介绍。这里也可能包括早期UNIX使用的旧式命令，本附录只是当你有志
于成为UNIX的开发者时，建议你研究的命令列表。为求简洁，我们重新做了分类，用
表这些命令列表，并进行简单的说明。
Shell与内置命令
首先，我们先了解Bourne Shell的部分，特别是POSIX整理过的那些，bash与ksh93
都为POSIX兼容，面另外还有一些Shell在语法上也与Bourne Shell一致：
bash
GNU Project 的 Bourne-Again Shell,
ksh
KornShell—原始版本或分支体系版本，视操作系统而定。
pdksh
Public Domain Korn Shell,
sh
原始Bourne Shell，特别是在商用的UNIX系统上。
2sh
Z-Shell,
你应该了解Shell内置命令的运作方式：
在当前Shell下，读取与执行给定的文件。
break
切断 for、select、until 或while循环。
cd
更改当前的目录。
483
www.TopSage.com
---
## Page 496
484
command
规避函数的查找，直接执行正规的内置命令.
continue
开始for、select、until，或while循环的下一个重复。
.com
eva1
将给定的文本视为Shell命令。
exec
无参数的情况下，改变Shell打开的文件。如带有参数，则以其他程序置
换Shell,
exit
退出Shell脚本，可选地带有特定的退出码。
export
将变量导出到接下来的程序环境中。
false
什么事也不做，指非成功的状态，用于Shell循环中。
getopts
处理命令行选项。
read
将输入行读进一个或多个Shell变量里。
readonly
将变量标记为只读，例：不可更改的。
return
返回自Shell函数而来的值。
set
显示Shell变量与变量值、设置Shell选项、设置命令行参数（S1、S2、-）。
shift
一次移动一个或多个命令行参数。
test
计算表达式，检测其为字符串、数字或文件属性相关的。
trap
管理操作系统信号：
true
什么事也不做，指成功的状态。用于Shell循环中。
type
指出命令的特性（关键字、内置命令、外部命令等等）。
typeset