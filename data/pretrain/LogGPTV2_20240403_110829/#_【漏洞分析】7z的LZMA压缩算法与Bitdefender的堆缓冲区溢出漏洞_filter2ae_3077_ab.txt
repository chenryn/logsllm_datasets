在SZ_AllocBuffer返回了处理结果之后，函数LzmaDecode将会被调用：
    LzmaDecode(Byte *dest, SizeT *destLen, const Byte *src, SizeT *srcLen, /* further arguments omitted */)
需要注意的是，dest是SZ_AllocBuffer函数分配的一个缓冲区，而destLen应该是一个指向缓冲区大小的指针。
在引用实现中，SizeT被定义成了size_t。有趣的是，Bitdefender的7z模块同时使用了32位和64位版本的SizeT，而这两个版本都存在安全漏洞。我怀疑Bitdefender的开发人员这样做的目的是为了给32位和64位引擎提供不同的功能行为而设计的。
接下来，LZMA解码器会提取出参数中给定的src流数据，然后将*destLen字节数据写入到dest缓冲区中，其中的*destLen是7z
EncodedHeader中的一个64位unpackSize，而最终的结果就是一个堆缓冲区溢出漏洞。
**触发漏洞**
为了触发这个漏洞，我们所创建的7z LZMA流数据中包含了我们需要写入堆内存中的数据。接下来，我们构建了一个7z
EncodedHeader（unpackSize大小为(1 g !Heap block at 1F091472D40 modified at 1F091472D51 past requested size of 1 (2f8.14ec): Break instruction exception - code 80000003 (first chance) ntdll!RtlpNtMakeTemporaryKey+0x435e: 00007ff9`d849c4ce cc int 3 0:000> db 1F091472D51 000001f0`91472d51 59 45 53 2c 20 54 48 49-53 20 57 4f 52 4b 53 ab YES, THIS WORKS.
**攻击者如何控制并利用该漏洞？**
攻击者可以在完全不受任何限制的情况下向堆内存中写入任意数据。一个文件系统的过滤器可以用来扫描所有需要存放在本地磁盘上的文件，而这将导致攻击者能够轻松地远程利用这个漏洞，例如攻击者可以通过向目标用户发送一封包含了特殊附件的恶意邮件来发动攻击。
除此之外，该引擎并不在沙盒环境中运行，而且正常的运行权限为NT
AuthoritySYSTEM。因此，这个漏洞就是一个影响非常严重的高危漏洞了。但是，由于Bitdefender采用了ASLR和DEP，所以如果攻击者想要成功地利用该漏洞实现远程代码执行的话，则需要其他漏洞（例如信息披露漏洞）的配合来绕过ALSR才可以。
还需要注意的是，很多不同的反病毒厂商都在使用Bitdefender的引擎，因此这个安全漏洞的影响范围将会非常的大。
**漏洞修复**
数修复后的SZ_AllocBuffer函数代码如下所示：
    1E0CEA52AE0 SZ_AllocBuffer proc near
    1E0CEA52AE0
    1E0CEA52AE0 mov     [rsp+8], rbx
    1E0CEA52AE5 mov     [rsp+10h], rsi
    1E0CEA52AEA push    rdi
    1E0CEA52AEB sub     rsp, 20h
    1E0CEA52AEF mov     esi, 0FFFFFFFFh
    1E0CEA52AF4 mov     rdi, rdx  //
2.[https://landave.io/2017/08/f-secure-anti-virus-arbitrary-free-vulnerability-via-tnef/](https://landave.io/2017/08/f-secure-anti-virus-arbitrary-free-vulnerability-via-tnef/)
3.[https://sourceforge.net/projects/sevenzip/files/7-Zip/17.00/7z1700-src.7z/download](https://sourceforge.net/projects/sevenzip/files/7-Zip/17.00/7z1700-src.7z/download)
4.[https://news.ycombinator.com/item?id=15075242](https://news.ycombinator.com/item?id=15075242)
5.[https://www.reddit.com/r/netsec/comments/6vajy2/bitdefender_antivirus_heap_buffer_overflow_via_7z/](https://www.reddit.com/r/netsec/comments/6vajy2/bitdefender_antivirus_heap_buffer_overflow_via_7z/)