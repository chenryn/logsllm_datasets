title:An Eventually Perfect Failure Detector for Networks of Arbitrary Topology
Connected with ADD Channels Using Time-To-Live Values
author:Karla Vargas and
Sergio Rajsbaum
2019 49th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
An Eventually Perfect Failure Detector for Networks of Arbitrary Topology
Connected with ADD Channels Using Time-To-Live Values
Karla Vargas and Sergio Rajsbaum
Instituto de Matem´aticas
Universidad Nacional Aut´onoma de M´exico
Mexico City 04510, Mexico
PI:EMAIL, PI:EMAIL
Abstract—We present an implementation of an eventually
perfect failure detector in an arbitrarily connected, partition-
able network. We assume ADD channels: for each one there
exist constants K, D, not known to the processes, such that for
every K consecutive messages sent in one direction, at least one
is delivered within time D. The best previous implementation
used messages of bounded size, but exponential
in n, the
number of nodes. The main contribution of this paper is a
novel use of time-to-live values in the design of failure detectors,
obtaining a ﬂexible implementation that uses messages of size
O(n log n).
Keywords-Failure detector; ADD channel; time-to-live value;
arbitrarily connected network
I. INTRODUCTION
A. Context
Developing fault-tolerant distributed systems is one of
the most difﬁcult challenges in information science and
technology. Managing timeouts is a matter of the utmost
importance for fault-tolerance. If a process of some machine
remotely invokes an operation on a process running on a
different machine, and the latter machine fails, an exception
is raised when a timeout expires. Timeouts are important in
many other situations. For instance, as a thread waits for a
connection to be established it cannot do any useful work.
Programming with timeouts is notoriously difﬁcult and
it hampers portability. The adequate way of choosing the
duration of a timeout is very difﬁcult. If very large time-
outs are chosen, the system has less false suspicions, but
its overall performance is slowed down. Smaller timeouts
increase performance at the cost of mistakes. It is difﬁcult
to perform experiments to estimate good timeouts, for many
reasons, including the well-known phenomenon of very high
variability of delays in practice. Furthermore, delays may
dynamically depend on the load of the system. Portability is
made difﬁcult by new hardware and software versions, and
general environment conditions and loads.
Basically, failure detectors are a layer of abstraction that
separates low-level timing and failure detection concerns,
while hiding this highly technical details from the software
developer that sees only an interface that offers information
about the operational status of processes in the distributed
system. It is impossible however, to design perfect failure
detectors in realistic situations, as it is unavoidable to have
from time to time delays that surpass a timeout expectation.
Chandra and Toueg formalized the notion of unreliable
failure detector in 1996 [1], and uncovered a whole world
of possible ways of informing about process failures.
In this paper we are concerned with the eventually perfect
failure detector class, ♦P , deﬁned by the following two
properties:
Strong Completeness: Every crashed process is eventually
permanently suspected by every correct process.
Eventual Strong Accuracy: Every correct process is even-
tually not suspected by any correct process.
The ♦P oracle is of interest because it
is relatively
powerful, and yet realistically implementable. First, there are
several important problems which are solvable in a partially
synchronous system when this failure detector is used. For
instance, ♦P is more than sufﬁcient to solve consensus [1]. It
is sufﬁciently powerful to solve harder problems like stable
leader election [2], quiescent reliable communication [3],
wait-free non-blocking contention management [4], wait-
free eventual weak exclusion [5], crash-locality-1 dining
philosophers [6], and wait-free eventually k-bounded sched-
ulers under eventual weak exclusion [7].
Second, ♦P is realistically implementable. Among other
relatively powerful oracles — such as the Perfect (P) [1],
Strong (S) [1], and Marabout [8] detectors, ♦P is the
only oracle implementable in partially synchronous systems.
This result is from [9], where Larrea, et al., prove that
failure detectors with perpetual accuracy (including P, S,
and Marabout) cannot be implemented in classical models
of partial synchrony [1], [10].
B. Motivation
Initial research on failure detector implementations con-
centrated in the case where there is a direct link between
each pair of processes. More recently there has been interest
in failure detectors for arbitrarily connected networks, given
that real networks are not fully connected. Notice that using
a routing algorithm to simulate a fully connected network
is problematic because the routing algorithm may need
978-1-7281-0057-9/19/$31.00 ©2019 IEEE
DOI 10.1109/DSN.2019.00038
264
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:55:15 UTC from IEEE Xplore.  Restrictions apply. 
information about crashes, precisely the information a failure
detector provides. Additionally, a routing layer increases the
uncertainty about timing and may hinder the performance
of the failure detector.
For arbitrarily connected networks, the deﬁnitions of com-
pleteness and accuracy need to be extended [11]. Informally,
the strong completeness requires that each process eventu-
ally suspects all processes that are not in its partition, while
the eventual strong accuracy requires the failure detector of
every processor to eventually stop suspecting all processes
that are in its partition. Further generalizations to dynamic
networks can be found in [12].
Hutle [13] proposes a ♦P implementation, for arbitrarily
connected networks, in a model where processes do not
need to know a bound on the communication delay between
arbitrary processes but only a bound on the jitter on the
communication between neighbors.
A different, very weak model of ADD channels was
proposed by Sastry and Pike [14], as a realistic partially
synchronous model of ill-behaved channels that can lose
and reorder messages. Each channel guarantees that some
subset of the messages sent on it will be delivered in
a timely manner and such messages are not too sparsely
distributed in time. More precisely, for each channel there
exist constants K, D, not known to the processes (and not
necessarily the same for all channels), such that for every K
consecutive messages sent in one direction, at least one is
delivered within time D. Sastry and Pike describe a ♦P
implementation for a fully connected network, which is
later extended to an arbitrarily connected network of ADD
channels by Kumar and Welch [15].
Implementations are usually based on heartbeat style
failure detectors [11]. The implementation by Hutle [13]
mentioned above works even if all processes are not known
in advance, and hence deﬁnitions of completeness and
accuracy properties need to be extended appropriately. In this
implementation, every process p has, for every other process
q it knows, a heartbeat table including heartbeat counters
and distance counters, and hence the size of a message
is unbounded, O(log n + log t), where n is the number
of nodes, and t is the round number. The implementation
of Kumar and Welch [15] also uses heartbeats, but uses
more detailed path information,
to achieve messages of
bounded size. However, the size is exponential in n, namely
O((n + 1)!) bits.
Our motivation is to ﬁnd an implementation of ♦P using
messages of size polynomial in n (and independent of t,
the number of rounds), in an arbitrary connected network.
We select for our implementation the ADD model, as an
interesting realistic model to test our ideas, but we look for
a ﬂexible, novel implementation, that can be adapted to other
models, in particular not requiring knowledge on the total
number of processes. And we aim towards more dynamic
scenarios [12], but this is beyond the scope of this paper.
C. Contribution
We describe an implementation of ♦P using messages of
size O(n log n), in an arbitrarily connected network of ADD
channels. We are inspired by the networking technique of
time-to-live (TTL) values to design a very ﬂexible, novel
failure detector.
TTL’s are commonly used for limiting the lifetime of
packets in a network or the number of hops a packet can
take [16], [17]. We use this idea in our ♦P implementation,
to solve the challenge of sending messages of small size.
We implement the following analogy. Each process p emits
heartbeats at a certain frequency, and with maximal intensity.
The intensity is encoded by a TTL value. These heart-
beats are propagated echoing through the network, perhaps
varying the frequency, due to the K, D bounds of each
channel they traverse. As they are propagated through the
network, they lose intensity. They lose intensity as they go
farther away from its origin p. Ifp crashes its heartbeats
eventually fade out. But if p remains alive, all processes (in
the connected component of p) keep on hearing from p’s
heartbeats, although perhaps with low intensity, if a process
is far away.
In more detail (but still very roughly), each process p
periodically sends a set of up to n elements. Each element
is a pair (r, m) consisting a process identiﬁer r and a TTL
integer value m between 1 and n − 1. Thus, a maximum of
n log n bits in total. The m component of a pair contains
the current intensity of the heartbeat of process r. For itself,
process p sends a pair with intensity n − 1. Thus, this set
indicates that p is alive, and summarizes what p knows about
other processes. The intensity value n − 1 is strong enough
to guarantee that the heartbeats of p can reach all the nodes
in the network.
Whenever a node q receives a set with TTL values from
one of its neighbors, it must update its own knowledge
(in a somewhat delicate way), and send the new set to its
neighbors, making sure that the TTL values received are
resent with an intensity decremented by one. In particular,
the node takes the largest TTL value it learns about another
process r, and resends it. But it cannot resend it only once,
because an ADD channel could lose it. Thus, it repeatedly
resends it, until due to some suspicion, it starts to accept
lower TTL values for that node, r. The ﬁrst challenge
is that if a process r crashes, eventually its TTL values
should disappear and everyone will suspect it. The opposite
challenge is to make sure that if r does not crash, eventually
nobody suspects it. For this, a node p that learns a TTL
value from r must resend it repeatedly to make sure the
information is not lost by an ADD channel, since particular
messages on an ADD channel may be lost. Our algorithm
is carefully tuned, to balance these two challenges, and to
make sure r stops resending the TTL of p if it does not
eventually get fresh information from which it can deduce
265
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:55:15 UTC from IEEE Xplore.  Restrictions apply. 
that p remains alive.
D. Related work
Failure detectors were introduced by Chandra and
Toueg [1]. They are classiﬁed by completeness and accuracy
properties, for non-partitionable networks. Some classes of
failure detectors of this hierarchy output a list of processes
that are suspected to be failed, but there are many other
classes of failure detectors.
Aguilera, Chen and Toueg [18] propose the Heartbeat
failure detector, not in the original hierarchy of Chandra
and Toueg. The failure detector module of every process
does not output a suspect list, instead the output is a vector
with unbounded counters. The network model assumes that
channels connecting processes may fail by dropping mes-
sages or by disconnecting processes, producing partitions
of the network, into maximal connected components. The
completeness and accuracy properties were adapted for
partitionable networks.
In [9] the implementability of different classes of failure
detectors in several models of partial synchrony is studied.
It is shown that no failure detector with perpetual accuracy
(namely, P , Q, S, and W ) can be implemented in these
models in systems with even a single failure. Also, in these
models of partial synchrony, a majority of correct processes
is necessary to implement a failure detector of the class θ
proposed by Aguilera et al. Finally, a family of distributed
algorithms is presented that implement the four classes of
unreliable failure detectors with eventual accuracy (namely,
♦P , ♦Q, ♦S, and ♦W ). The algorithms are based on a
to deﬁne the
logical ring arrangement of the processes,
monitoring and failure information propagation pattern.
Another ♦P algorithm for arbitrarily connected networks
is presented in [13]. This algorithm uses unbounded heart-
beat counters and timeouts. In this algorithm, every process
does not need to know the name of all processes in the net-
work, but it needs to know which processes are its neighbors.
Also, it needs to know the bound on the variability of the
delays on the communication between neighbors.
Algorithms that implement failure detectors in partially
synchronous systems are presented in [19]. A ♦P optimal
implementation in terms of the number of bidirectional links
used forever is described. Observe that, if (uni)directional
links are considered, ♦P can be implemented even if only
n directional links carry messages forever [20].
The Average Delayed/Dropped (ADD) channels were in-
troduced in [14]. They provide a very weak communication
model. An algorithm for implementing ♦P on a complete
network connected by ADD channels is proposed in the
same paper. An implementation of the eventually perfect
failure detector in an arbitrary, partitionable network com-
posed of ADD channels using messages of size O((n + 1)!)
bits is described in [15]. In [21] necessary and sufﬁcient con-
ditions for crash-quiescent failure detection are established
in a system with ADD channels.
E. Organization
In Section II we describe the network model and its ADD
channels. Section III describes the eventually perfect failure
detector algorithm. Section IV describes an adaptation of
the algorithm to the case that a node knows initially only its
neighbors. Final conclusions and further work are discussed
in Section V.
II. MODEL
The system consists of a set of processes Π =
{1, 2, ..., n}. Every process has a local clock, which we
assume for simplicity that it generates ticks at a constant
rate. Our algorithms work also if clocks have bounded drifts.
Some of the processes are connected by ADD channels
in both directions as speciﬁed by an undirected graph
G = (V, E) with V = Π.
A. Channels
An ADD channel from p to q has associated constants
K, D, such that the following properties are satisﬁed:
1) The channel does not create or duplicate messages.
2) For every K consecutive messages sent by p to q, at
least one is delivered to q within time D.
The other messages can either be lost or can experience
arbitrary delays. The constants K and D are not known by