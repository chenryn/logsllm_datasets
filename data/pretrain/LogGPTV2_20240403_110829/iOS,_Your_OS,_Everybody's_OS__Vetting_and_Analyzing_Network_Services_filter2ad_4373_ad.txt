# Analysis and Vulnerabilities of iOS Network Services

## Introduction
This document discusses the vulnerabilities identified in iOS applications, particularly focusing on network services. The analysis is based on a large-scale examination of 1,300 seed apps and 168,951 additional iOS apps. We categorize the vulnerabilities and provide detailed insights into specific cases, such as Waze, Now, and QQBrowser.

## Libraries and Frameworks
The following libraries and frameworks were analyzed for potential security issues:
- **PDRCoreHttpDaemon**
- **Ionics_Webview**
- **CocoaHTTPServer**
- **Happy_DNS**
- **MongooseDaemon**
- **CocoaAsyncSocket**
- **Tapjoy-CocoaHTTPServer-Extension**
- **TencentVideoHttpProxy**
- **Platinum_UPnP**
- **GCDWebServer**
- **DIAL_UPnP**
- **WebRTC**
- **SmartDeviceLink**
- **Connect_SDK_Core_(iOS)**
- **FunTV**
- **Unreal_Engine_4**
- **UnityEngine.iOS**
- **upnpx**
- **Game_Kit_(2)**
- **DNS library (demonstrated in Figure 10)**

## Common Issues
- **Undocumented API Usage**: The DNS library leads to the prevalent usage of undocumented APIs like `_res_9_nquery` in iOS apps.
- **Network Service Integration**: Ionic's Webview is built on top of GCDWebServer. Recent versions of Ionic's Webview have been adjusted to use the loopback interface when integrating GCDWebServer, reducing the need to check apps using both libraries.

## Determining iOS App Vulnerabilities

### 7.1 Vulnerabilities in Seed Apps
The 11 vulnerabilities identified among the 1,300 seed apps fall into four categories:
1. **Connected with an IoT Device with No/Weak Access Control**:
   - **Waze and SCOUT GPS LINK**: These apps provide network services in the LAN interface for the IVI system but offer little to no access control.
     - **Waze**: Starts network service on port 12345 through the LAN interface, accepting any connection attempts. Potential threats include remote command execution, denial-of-service, and memory corruption.
2. **Served as a Command Server to Execute Commands per Client Request**:
   - **QQBrowser, Taobao4iPhone, and Youku**: These apps can execute commands from clients, leading to potential remote command execution and data leakage.
3. **Served as a File Server to Share Files Between a Desktop Computer and an iOS Device**:
   - **Now**: Provides network service on port 8080, setting the root folder to the data container directory. Weak authorization allows unauthorized access to credentials within the app.
4. **Served as a Content Distribution Network (CDN) Node to Share Videos with Other Peer Devices**:
   - **Amazon Prime Video, QQSports, etc.**: These apps share video clips, which are generally considered low risk as the content is non-private.

### 7.2 Extensible Vulnerabilities of Affected Network Service Libraries
Through lightweight large-scale analysis, we identified apps that use system APIs or integrate third-party libraries for network services. Static analysis of 2,116 apps revealed an additional 92 vulnerabilities, categorized as follows:
1. **Using Vulnerable Libraries**:
   - **WebLink Library**: Used by apps like WebLink for KENWOOD, WebLink for JVC, and WebLink Host. This library creates a virtual app screen on IVI systems, allowing remote manipulation and crashing of the app.
2. **Abusing Out-of-Date Vulnerable Libraries**:
   - **libupnp**: Several exploitable vulnerabilities exist in older versions of libupnp, affecting routers and media servers. Google requires new versions for Android apps, but there is no such requirement for iOS.
3. **Misuse of Libraries**:
   - **GCDWebServer**: Misuse of this library exposes privacy and functionality to adversaries. Factors leading to misuse include using the LAN interface, setting the root folder to the data container directory, and using built-in file listing functionality.

## Case Studies

### 7.1.1 Remote Command Execution and Denial-of-Service
- **Waze**: The app starts a network service on port 12345, accepting any connection attempts. Potential threats include remote command execution, denial-of-service, and memory corruption.
- **SCOUT GPS LINK**: Similar to Waze, this app provides network services with weak access control, allowing remote manipulation and crashing.

### 7.1.2 Data Leakage
- **Now**: The app provides network service on port 8080, setting the root folder to the data container directory. Weak authorization allows unauthorized access to credentials within the app.

### 7.1.3 Remote Command Execution
- **QQBrowser, Taobao4iPhone, and Youku**: These apps can execute commands from clients, leading to potential remote command execution and data leakage.

## Related Work
- **Vetting the Security of Network Services**: Previous work has focused on vetting the security of network services and hunting security bugs and malicious behaviors in Android apps. However, the different programming languages and ecosystems make it challenging to apply these methods directly to iOS.
- **Third-Party Library Identification**: Current methodologies for identifying third-party libraries include text-based, token-based, tree-based, and semantics-based approaches. CRiOS is the only work focusing on third-party library identification in iOS.
- **Software Testing Techniques on iOS**: Dynamic and static analysis techniques have been developed for iOS, including tools like Szydlowski et al.'s approach, ICRAWLER, DIOS, IRIS, PIOS, MoCFI, and Feichtner et al.'s static analysis using LLVM IR.

## Concluding Remarks
This paper presents the first methodology for conducting a large-scale security analysis of iOS apps' network services. Our findings highlight the importance of using the loopback interface, enforcing access control, and implementing stricter firewall strategies to mitigate vulnerabilities. We hope our findings will motivate iOS app developers to focus more on the security of their network services.

## Acknowledgments
We thank William Enck and the anonymous reviewers for their valuable feedback. We also thank Cameron Ballard and Benjamin Zhao for proofreading the early version of this paper. Special thanks to Xiaobo Chen, Tao Huang, and Jian Zhang from PWNZEN InfoTech Co., LTD, for their assistance in manual analysis. This work was supported by the National Key Research and Development Program of China and the National Science Foundation of China.

## References
[1] Linux, sdk. for UPnP Devices (libupnp).
[2] Wormhole. http://xlab.baidu.com/wp-content/uploads/2016/01/wormhole_external_final.pdf.
[3] libupnp vulnerability. https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=libupnp.
[4] How to fix apps with the portable SDK for UPnP library vulnerabilities. https://support.google.com/faqs/answer/6346109?hl=en-GB.
[5] CVE-2018-6344. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-6344.
[6] Clutch. https://github.com/KJCracks/Clutch.
[7] Cocoahttpserver. https://github.com/robbiehanson/CocoaHTTPServer.
[8] Frida. https://www.frida.re/.
[9] Dagger. http://dagger.repzret.org/.
[10] dumpdecrypted. https://github.com/stefanesser/dumpdecrypted.
[11] CVE-2019-14924. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-14924.
[12] libimobiledevice. https://github.com/libimobiledevice/ideviceinstaller.
[13] iTunes search API. https://affiliate.itunes.apple.com/resources/documentation/itunes-store-web-service-search-api/.
[14] jtool. http://www.newosxbook.com/tools/jtool.html.
[15] Waze. https://www.waze.com/.
[16] Weblink. https://www.abaltatech.com/press/weblink-from-abalta-technologies-brings-popular-waze-smartphone-app-into-the-connected-car.
[17] CVE-2019-3568. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-3568.
[18] Dancing line. https://apps.apple.com/us/app/dancing-line-music-game/id1177953618.
[19] Rules of survival. https://apps.apple.com/us/app/rules-of-survival/id130796175.
[20] frida-ios-dump. https://github.com/AloneMonkey/frida-ios-dump.
[21] L. O. Andersen. Program analysis and specialization for the C programming language. PhD thesis, University of Copenhagen, 1994.
[22] D. Antonioli, N. O. Tippenhauer, and K. Rasmussen. Nearby threats: Reversing, analyzing, and attacking Google’s ‘nearby connections’ on Android. In NDSS, 2019.
[23] Make and receive calls on your Mac, iPad, or iPod touch. https://support.apple.com/en-hk/HT209456.
[24] Objective-C runtime. https://developer.apple.com/documentation/objectivec/objective-c_runtime?language=objc.