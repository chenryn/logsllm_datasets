PDRCoreHttpDaemon
Ionics_Webview
CocoaHTTPServer
Happy_DNS
Ionics_Webview
wangxin.taobao
#
1
2
3
4
5
6
7 MAASDK
8
9
10 MongooseDaemon
11 CocoaAsyncSocket
12 Tapjoy-CocoaHTTPServer-Extension
13 CocoaHTTPServer
14 TencentVideoHttpProxy
15 Platinum_UPnP
16 GCDWebServer
17
18 DIAL_UPnP
19 WebRTC
20 SmartDeviceLink
21 Connect_SDK_Core_(iOS)
22 FunTV
23 Unreal_Engine_4
24 TencentVideoHttpProxy
25 wangxin.taobao
26 UnityEngine.iOS
upnpx
_CFSocketSetAddress
GCDWebServer
CocoaAsyncSocket
_res_9_nquery
CocoaAsyncSocket
_bind
_CFSocketSetAddress
_bind
_bind
_bind
_bind
CocoaAsyncSocket
_bind
_bind
_bind
_bind
_bind
_bind
DIAL
CocoaAsyncSocket
Game_Kit_(2)
CocoaHTTPServer
_bind
_bind
DNS library (demonstrated in Figure 10) in China leads to the
prevalent usage of undocumented API usage _res_9_nquery
in iOS apps (line 6). Based on the relation of network ser-
vice libraries, we ﬁnd that the widely used Ionic’s Webview
is built on top of the GCDWebServer. As the most recent ver-
sion of Ionic’s Webview has been adjusted to use loopback
interface when integrating GCDWebServer, we can skip check-
ing the apps using both GCDWebServer and Ionic’s Webview
libraries.
7 Determining iOS App Vulnerabilities
In this section, we ﬁrst closely examine the network service
vulnerabilities discovered after vetting the 1,300 seed apps.
We summarize four categories of vulnerabilities, and explain
the details of two real-world vulnerable apps acknowledged
by vendors, which are Waze, Now, and QQBrowser. Note that
the acknowledgment of some vulnerabilities is pending. We
ﬁnally scrutinize the vulnerabilities of 3 typical network ser-
vice libraries in 168,951 iOS apps and discuss the underlying
reason.
7.1 Vulnerabilities in Seed Apps
Previous 11 vulnerabilities identiﬁed among the 1,300 seed
apps fall into four categories: (i) Connected with an IoT device
with no/weak access control (Waze and SCOUT GPS LINK).
(ii) Served as a command server to execute command per the
client’s request (QQBrowser, Taobao4iPhone, and Youku).
(iii) Served as a ﬁle server to share ﬁles between a desk-
top computer and an iOS device (Now). (iv) Served as a con-
tent distribution networks (CDN) node to share videos with
other peer devices. We regard these vulnerable apps (Amazon
Prime Video, QQSports, etc.) of this category as low risks
since the video clips shared are usually non-private.
(i) Remote Command Execution and Denial-of-Service:
A case of an iOS app connected with an IoT device with
no/weak access control. To connect with an IoT device, vul-
nerable apps always turn the iOS device to be a server. Two
vulnerable apps, Waze and SCOUT GPS LINK, provide net-
work services in the LAN interface for the IVI system, but
these apps provide little to no access control. For example,
Waze is a popular community-based trafﬁc and navigation
app in the United States. Dynamic analysis reveals that the
app starts network service on port 12345 through the LAN
interface. We also ﬁnd that the network service on port 12345
accepts any connection attempts, and processes remote com-
mand messages in which a valid command message starts
with “WL”. The potential threats with the Waze network ser-
vice are as follows. (i) For any incoming message (see M4
listed in Figure 2) starting with “WL”, Waze will cache the
message until the memory resource is exhausted (see M3
listed in Figure 2). Attackers can then drain the network traf-
ﬁc to crash the app remotely (A3). (ii) A message with format
“WL|msgID|msgSize|msg” can be accepted by Waze and a
malformed overlong message will lead to remote memory
corruption, including OOB (out-of-boundary) access or UAF
(use-after-free) (A3). (iii) The message “msgID” set to 48 can
be used to send touch events to manipulate the app. The mes-
sage can further reset the destination to maliciously navigate
an end-user to alternative places (A1). The network service is
pervasive, such that an attacker can even probe and attack iOS
device with Waze running in cellular networks (A4). We have
to mention that this vulnerability only exists in the iOS ver-
sion of Waze since the Android version does not provide these
network services. We reported the vulnerability to Waze com-
pany acquired by Google, Waze ﬁxed this security issue three
days after we reported, and Google ﬁnally acknowledged the
vulnerability.
(ii) Data Leakage: A case of sharing ﬁles between a desk-
top computer and an iOS device. The current inconvenient
ﬁle sharing of the iTunes client provides a chance for de-
velopers to ease the sharing process for users. Some apps
turn an iOS device to be a web server for ﬁle sharing. The
privacy-preserving sharing should be considered for access
control but Now breaks the rule for ﬁle sharing. Now is a live
broadcast and a popular social networking app in China. Dy-
namic analysis discovers that the app provides the network
service on port 8080. Static analysis later reveals that the app
sets the root folder of the network service to data container
directory when using the third-party library GCDWebServer
USENIX Association
29th USENIX Security Symposium    2427
On top of the HTTP server, the iOS app provides the net-
work service for two commands (i.e., “url” and “installurl”).
Apart from the “installurl” command that drives the app to
navigate to the items in iTunes, there are 9 additional sub
commands behind “url” that provide more functionality, such
as “tel” for dialing a speciﬁc number and “sms” for sending
sms message (M1). These sub commands are enclosed in the
body of a post request. In order to ensure the validity of each
post request for the network service, the app enforces a Triple
DES encryption to each post request and body data. However,
the key (kM7hYp8lE69UjidhlPbD98Pm) for decryption is hard-
coded in the app code (M2). This weak authorization can be
bypassed by building a valid request for an attacker (A2). We
demonstrate an example that the valid request would trigger
the app to dial “10086”: requests.post(http://+ip+:13145/
+encrypt_3des(data=send?uuid=a8f349666b833151a861e8beb6
11f21a&type=url, key = key), data = encrypt_3des(data
=‘tel:10086’, key = key), headers=headers). We have
reported this vulnerability to “Tencent Security Response
Center,” which has ranked this security issue as a high risk.
This vulnerability has already been patched in the most recent
version.
7.2 Extensible Vulnerabilities of Affected Net-
work Service Libraries
Through the lightweight large-scale analysis, we identify apps
that use system APIs or integrate third-party libraries for net-
work services. To have a better understanding of the network
service vulnerabilities in the wild, we carry out static anal-
ysis of 2,116 apps, ﬁltered out from the whole dataset, by
using only the signatures of WebLink (3 apps), libupnp (16
apps), and GCDWebServer (2,097 apps). In the C library (e.g.,
WebLink and libupnp) vetting process, we manually verify
the vulnerability; for Objective-C library, GCDWebServer for
instance, we perform static analysis by using our static anal-
ysis tool. Dynamic analysis acts as an auxiliary for manual
conﬁrmation. We further identify an additional 92 vulnera-
bilities, and summarize them into three categories: (i) using
vulnerable libraries, (ii) the abuse out-of-date vulnerable li-
braries, and (iii) the misuse of libraries.
(i) Using the vulnerable WebLink library. WebLink li-
brary, which renders the Waze app vulnerable, is used by
another 3 apps: WebLink for KENWOOD, WebLink for JVC,
and WebLink Host. In order to project a smart phone’s screen
to in-vehicle infotainment (IVI) systems, the WebLink library
creates a virtual app screen on the IVI systems. To receive
the commands from the virtual screen, it turns the iOS device
into a server. By using this library, the app can capture user
interactions on IVI systems. After studying this service, we
ﬁnd developers of the WebLink library make two mistakes
in the design of the library. (i) Vendors mistakenly take the
virtual screen and the smartphone as two logically separate
devices as they use the LAN interface for connection (M4).
(a) Now app exposes content in
its data container
Figure 12: Safari web-browser used to access the network service
in the same host and Wi-Fi network.
(b) Libby app starts a web server
on the loopback interface
(see Figure 7). With this service, the app allows an unau-
thorized attacker (M2) to access the credentials within the
data container directory of the app (M1). Data exposed by
the app is depicted in Figure 12(a). By downloading creden-
tials from the victim and uploading the acquired credentials
to the attacker’s device, the attacker can sign in the app us-
ing the victim’s identity to perform in-app purchases with
the pre-deposit money (A1). Similar to the Waze vulnerabil-
ity, the attacker can scan the cellular network to identify the
victims (A4). The vendor of this app, “Tencent Technology
(Shenzhen) Company Limited,” ranked this security issue as
a high risk. This vulnerability was patched by switching off
the relevant functionality remotely after we reported.
(iii) Remote Command Execution: A case of an iOS app
executing command per the client’s request. iOS apps may
provide network services for end-users to manage the apps.
However, the weak authorization may expose the services
to any host in the same network with the victim. For exam-
ple, an attacker can remotely compromise an iOS device by
exploiting the ﬂaw, e.g., the “exit” command disables the net-
work service in Youku or “set” command controls UDID of
Taobao4iPhone. Besides these two apps, a high risk vulner-
ability is discovered in the QQBrowser app. QQBrowser is
a popular app, especially in China. Previous work showed
the QQBrowser network service vulnerability in the Android
app [32]. By exploiting the vulnerability discovered in the
Android app, an attacker can remotely perform unauthorized
sensitive data access (e.g., obtain the app list or app setup) on
the Android device. However, the same vulnerability has not
been patched for the iOS counterpart. The port 8786 is used
for connecting for Android, whereas the port 13145 is for iOS.
Android implements the network service on NanoHTTPD library,
whereas the iOS network service is established through an
open source repository CocoaHTTPServer.
2428    29th USENIX Security Symposium
USENIX Association
In fact, the virtual screen is a projector of the smartphone. (ii)
There is no authorization required for executing the restricted
functionality (M2), such that adversaries can remotely con-
nect the smartphone via these apps and send touch events to
manipulate (A1) or crash the app (A3).
(ii) Abusing the out-of-date vulnerable portable UPnP li-
brary. UPnP is a protocol that enables discovery, event noti-
ﬁcation, and control of devices over a network, independent
of the operating system, programming language, or physi-
cal network connection. Portable UPnP SDK as known as
libupnp [1] implements UPnP. Many projects, such as HD
Network DVD Media Player, aMule CVS tarballs, are
built on top of libupnp, which sets up a UDP network service
on port 1900. Per CVE [3], several exploitable vulnerabilities
exist in libupnp’s old versions. These vulnerabilities would
affect routers, media servers, etc. [64]. To patch these vulner-
abilities, Google requires that the apps submitted to Google
Play Store should adopt a new version (higher than version
1.6.18) of libupnp [4]; however, there is no warning for iOS
apps. To quantify the impact of the Portable UPnP library vul-
nerability (i.e., # apps affected), we search this library among
our collected dataset by using a signature. The result shows
that 16 apps integrate the libupnp library, among 13 apps
using out-of-date libupnp, 6 apps are seriously impacted by
this library, these vulnerable apps have been installed millions
of times. Interestingly, we ﬁnd that the vendor “Flipps Media
Inc.” has upgraded the library in the product iMediaShare,
whereas other products, Flipps TV (version 6.3.8) and FITE
TV (version 2.1), are still using the vulnerable version of the
library (e.g., “1.6.13.”). The impacted apps are veriﬁed vul-
nerable by using module “multi/upnp/libupnp_ssdp_overﬂow”
of Metasploit [58], which can crash the app remotely (A3) .
(iii) Misuse of the GCDWebServer library. The misuse of
the GCDWebServer library exposes privacy or functionality to
adversaries. To locate the misuse of this library, we look into
the interface of the library and analyze how apps use this
library.2 We highlight that multiple factors lead to the mis-
use of this library. In the case of a vulnerable “ﬁle listing
service” when using this library, the following three factors
constitute a rule for locating the misuse issue. (i) Arguments
are passed to the library, indicating the use of the LAN inter-
face. (ii) The root folder is set to the data container direc-
tory. (iii) The built-in ﬁle listing functionality is used by this
app. The query result reveals that 2,097 apps integrate the
GCDWebServer library. By using the association rule shown
in Table 5, the app integrating GCDWebServer which is a sup-
port for other libraries, is excluded. Finally, 517 apps are
screened out, meaning they use this library exclusively. After
checking these 517 apps using both static data-ﬂow analy-
sis, dynamic analysis and manual conﬁrmation, 83 apps that
misuse the GCDWebServer library are veriﬁed vulnerable. Note
2The automated static analysis process and results are available at https:
//sites.google.com/site/iosappnss/home.
that, static analysis helps us to ﬁnd more vulnerabilities be-
hind user interaction. For instance, with the vulnerability in
GCDWebServer library (CVE-2019-14924 [11]), the vulnera-
bility in the JDRead app arises when a user is turning on the
ﬁle sharing functionality of the app, and the QQMail exposes
attachment to the adversary in the same Wi-Fi network when
a user is reviewing the attachment in an email.
8 Related Work
Vetting the security of network services. There has been
a plethora of work dedicated to vetting the security of net-
work services [22, 32, 55, 80] as well as hunting security
bugs [35, 38] and malicious behaviors [34, 36, 37] of An-
droid apps. However, the analyzer for Android apps cannot
be squarely applied to iOS due to the different programming
language (e.g., Java and Objective-C). In addition, much work
focuses on other security aspects of iOS apps, such as the se-
cure usage of TLS/SSL certiﬁcates of iOS apps [67] and the
cryptographic misuse of iOS apps [49]. Kobold [44] exam-
ines access control ﬂaws on iOS. However, security vetting
for network services of iOS apps has not been extensively
explored.
Third-party library identiﬁcation. The current third-party
library identiﬁcation methodology falls into four categories:
text-based [29], token-based [57], tree-based [30], as well as
semantics-based [60]. Android researchers have contributed
widely to the third-party library identiﬁcation [27, 48, 76].
CRiOS [67] is the only work focusing on third-party library
identiﬁcation in iOS. They clustered and studied the depen-
dencies of classes in iOS apps in order to identify third-party
libraries. CRiOS requires building all the third-party library
repositories, whereas ours only builds a small portion of third-
party network service libraries.
Software testing techniques on iOS. (i) Dynamic analysis
of iOS apps. Szydlowski et al. [75] proposed an approach to
tracking sensitive API calls by using debugger breakpoints
and tried to automate the process by simulating the interaction
with the identiﬁed UI views. ICRAWLER [56] explored the UI
states of iOS apps by hooking techniques to inspect the UI
elements. DIOS [61] utilized UI automation to retrieve the UI
hierarchy and interact with UI elements to cover more code
paths of iOS apps. IRIS [41] transported the instrumentation
framework, termed VALGRIND [66], to iOS to vet private
API abuse. (ii) Static analysis of iOS apps. PIOS [47] per-
formed data-ﬂow analysis to build the CFG and static taint
analysis on top of the IDA [53] to track the privacy trans-
ferred. MoCFI [40] extracted the CFG of an app on top of the
PiOS [47] and checked whether the instructions that change
an execution ﬂow are valid at runtime. Chen et al. [33] studied
libraries in iOS and Android apps by considering invariant
features between the two. We cross check the vulnerabili-
ties identiﬁed and ﬁnd none of these vulnerabilities exist in
Android apps. Feichtner et al. [49] proposed static analysis
USENIX Association
29th USENIX Security Symposium    2429
by using LLVM IR for iOS apps; however, the methodology
needs to be adopted at scale.
To the best of our knowledge, this is the ﬁrst paper to sys-
tematically examine the security of iOS apps’ network ser-
vices on a large scale. We believe the vetting methodology
and the results in this paper can inform security researchers
as they closely inspect the iOS security in the future, and
in particular, inform app developers and network operators
on whether the policy of using the LAN network should be
rectiﬁed.
9 Concluding Remarks
Thanks to its open source framework, much work has already
tested the security of Android apps. Unfortunately, Apple’s
closed ecosystem makes vetting iOS systems much more difﬁ-
cult. This paper proposes the ﬁrst methodology for conducting
a large-scale security analysis of iOS apps’ network services.
When applied to the top 1,300 iOS apps, our proposed ap-
proach found 11 apps with vulnerabilities, three of which
were acknowledged by their vendors. Extending our analysis
to 168,951 apps found an additional 92 vulnerabilities and
showed that the most popular provenance for an iOS device
remote attack involves turning the device into a server.
With hindsight that the inconsistent functionalities between
Apple and Google will potentially trigger vulnerabilities,3 for
mitigation, we therefore recommend app developers to use
the loopback interface as much as possible to avoid unneces-
sary use of the LAN interface, and to enforce the deliberately
designed access control when using the LAN interface. Fur-
thermore, to mitigate the attack via public Wi-Fi or cellular
networks, we recommend network operators to implement
stricter ﬁrewall strategies and block unknown connection at-
tempts originating from the same LAN network. System ven-
dors such as Apple should also apply a host-based ﬁrewall,
such as the one adopted by the OS X system, to the iOS sys-
tem. We hope that our ﬁndings can motivate iOS app devel-
opers to focus more on the security of their network services
and that our methodology for determining faulty libraries can
be used by stakeholders to vet the apps they choose to use or
make.
Acknowledgments
We thank William Enck and the anonymous reviewers for their
valuable feedback. We thank Cameron Ballard and Benjamin
Zhao for proofreading the early version of this paper. We
thank Xiaobo Chen, Tao Huang, and Jian Zhang, afﬁliated to
PWNZEN InfoTech Co., LTD, for their valuable assistance
of our manual analysis. This work was supported, in part,
3One example is that Android provides cast functionality to project smart-
phone’s screens to third-party screens while iOS developers must adopt an
error-prone TCP-relay to implement such functionality.
by the National Key Research and Development Program of
China (2018YFE0126000, 2017YFB0802901) as well as the
National Science Foundation of China (61972453, 61672350).
Haojin Zhu (PI:EMAIL) is the corresponding
author of this paper.
References
[1] Linux, sdk. for UPnP Devices (libupnp).
[2] Wormhole. http://xlab.baidu.com/wp-content/uploads/2016
/01/wormhole_external_final.pdf.
[3] libupnp vulnerability. https://cve.mitre.org/cgi-bin/cvekey
.cgi?keyword=libupnp.
[4] How to ﬁx apps with the portable SDK for UPnP library vulnerabilities.
https://support.google.com/faqs/answer/6346109?hl=en-G
B.
[5] CVE-2018-6344. https://cve.mitre.org/cgi-bin/cvename.cg
i?name=CVE-2018-6344.
[6] Clutch. https://github.com/KJCracks/Clutch.
[7] Cocoahttpserver. https://github.com/robbiehanson/CocoaHTT
[8] Frida. https://www.frida.re/.
[9] Dagger. http://dagger.repzret.org/.
[10] dumpdecrypted. https://github.com/stefanesser/dumpdecry
PServer.
pted.
[11] CVE-2019-14924. https://cve.mitre.org/cgi-bin/cvename.
cgi?name=CVE-2019-14924.
[12] libimobiledevice. https://github.com/libimobiledevice/idev
iceinstaller.
[13] iTunes search API. https://affiliate.itunes.apple.com/res
ources/documentation/itunes-store-web-service-search
-api/.
[14] jtool. http://www.newosxbook.com/tools/jtool.html.
[15] Waze. https://www.waze.com/.
[16] Weblink. https://www.abaltatech.com/press/weblink-from-
abalta-technologies-brings-popular-waze-smartphone-a
pp-into-the-connected-car.
[17] CVE-2019-3568. https://cve.mitre.org/cgi-bin/cvename.cg
i?name=CVE-2019-3568.
[18] Dancing line. https://apps.apple.com/us/app/dancing-line
-music-game/id1177953618.
[19] Rules of survival. https://apps.apple.com/us/app/rules-of-s
urvival/id130796175.
[20] frida-ios-dump. https://github.com/AloneMonkey/frida-ios
-dump.
[21] L. O. Andersen. Program analysis and specialization for the C pro-
gramming language. PhD thesis, University of Cophenhagen, 1994.
[22] D. Antonioli, N. O. Tippenhauer, and K. Rasmussen. Nearby threats:
Reversing, analyzing, and attacking Google’s’ ‘nearby connections’ on
Android. In NDSS, 2019.
[23] Make and receive calls on your Mac, iPad, or iPod touch. https:
//support.apple.com/en-hk/HT209456.
[24] Objective-c runtime. https://developer.apple.com/documentat
ion/objectivec/objective-c_runtime?language=objc.