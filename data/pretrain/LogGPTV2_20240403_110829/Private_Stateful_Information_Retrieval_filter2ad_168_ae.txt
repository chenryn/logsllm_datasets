### Experimental Evaluation of PSIR Schemes

#### Query Servicing and Re-Initialization
We have conducted an experimental evaluation to determine the optimal number of queries our PSIR schemes can handle before re-initializing the client state using `PSIR.Init`. Our experiments considered databases with sizes \( n \in \{2^{16}, 2^{18}, 2^{20}\} \) and a parameter \( k = 2n \). For each experiment, we randomly selected \( c \) subsets of \( k - 1 \) records as the client's side information. We then evaluated random query sequences to determine the maximum number of queries that could be serviced by the \( c \) blocks of side information. The experiments were repeated 1,000,000 times, and we report the average and minimum number of queries serviced.

| Database Size (n) | Parameter (c) | Average Number of Queries Serviced | Minimum Number of Queries Serviced |
|-------------------|---------------|------------------------------------|------------------------------------|
| \( 2^{16} \)      | 425           | 421.97                             | 420                                |
| \( 2^{18} \)      | 850           | 846.57                             | 844                                |
| \( 2^{20} \)      | 1725          | 1722.52                            | 1719                               |

Our results indicate that, on average, fewer than 5 blocks of side information are wasted. Additionally, the minimum number of queries encountered over all 1,000,000 experiments is greater than \( c - 6 \) in all three scenarios. Based on these empirical findings, we have chosen to re-initialize the client state after \( c - 25 \) queries.

#### Latency Analysis
To understand the total time required for private retrieval, we measured the latency of retrieving a 288-byte element from databases of sizes \( n \in \{2^{16}, 2^{18}, 2^{20}\} \). The client and server machines were set up on the same LAN network, and we used Linux Traffic Control to configure the bandwidth. We considered three scenarios: querying between two data centers, using a home network, and using a mobile network. The bandwidths were configured as follows:
- Data center: 800 Mbps
- Home network: 18.7 Mbps
- Mobile network: 10 Mbps

The results are reported in Figure 3. "Amortized latency" refers to the online latency plus the latency of `PSIR.Init` and `PSIR.UpdateState` spread over multiple queries. Both PaillierPSIR and XPSIR showed lower latency compared to XPIR.

### Cost of Ring-LWE Based PSIR

#### Implementation and Parameters
Our first implementation of PSIR was in C++ using the APIs provided by the open-source XPIR [2] implementation. The parameters for the Ring-LWE-based FHE schemes used by XPIR were based on the analysis by Albrecht et al. [6], similar to those used in previous implementations of XPIR [5] and SealPIR [7]. Specifically, we used 2048-degree polynomials and a 60-bit coefficient modulus, with the recommended modulus of the form \( 2^{61} - i \cdot 2^{14} + 1 \) for different values of \( i \).

We packed \( \alpha = 14 \) records into a single ciphertext, so XPIR viewed the database as \( n/\alpha \) records of \( 288 \cdot \alpha \) bytes. We constructed PSIR using the XPIR scheme with \( d = 2 \) levels of recursion, denoted as XPSIR. We also estimated the costs of PSIR with SealPIR (SealPSIR) using previously reported results [7].

#### Performance Comparison
- **XPSIR**: The results for XPSIR show up to 12x reduction in server CPU, 7x reduction in online network costs, and 6x reduction in total amortized network costs compared to XPIR. For the 1M items case, XPSIR introduced a half-second increase in client CPU but offset this by decreasing server CPU time by at least 4.5 seconds.
- **SealPSIR**: Our estimates for SealPSIR indicate up to a 10x reduction in server CPU costs, as the PSIR framework reduces the client database to \( n/2 \) records. In exchange, SealPSIR introduces a 13% increase in online network costs, a 68% increase in total amortized network costs, and a significant increase in client CPU.

### Detailed Costs

| Database Size (n) | Client State (KB) | Client CPU (sec) | Server CPU (sec) | Network (KB) |
|-------------------|-------------------|------------------|------------------|--------------|
| \( 2^{16} \)      | N/A               | 0.15             | 0.35             | 675          |
| \( 2^{18} \)      | 65,536            | 0.08             | 0.35             | 675          |
| \( 2^{20} \)      | 262,144           | 0.04             | 0.35             | 675          |
| \( 2^{22} \)      | 1,048,576         | < 0.01           | 0.35             | 675          |

The detailed breakdown of the costs for XPIR and XPSIR is provided in Table 3. The costs for SealPSIR are shown in Table 2, and the costs for OCP are provided in Appendix A.