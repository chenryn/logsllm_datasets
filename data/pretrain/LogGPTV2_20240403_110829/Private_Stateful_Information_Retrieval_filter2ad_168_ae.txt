64
256
N/A
320
N/A
320
 0 and suﬃciently large c. We have performed experimental evaluation
√
to determine the correct number of queries our PSIR schemes will service before running PSIR.Init to re-
initialize client state. We consider database sizes of n ∈ {216, 218, 220} with the parameters k = 2
n. In our
experiments, we pick c random subsets of k − 1 records as the client’s side information. We consider random
query sequences and determine the maximum number of queries that may be serviced by the c blocks of side
information. We run the above experiment 1,000,000 times and report on the average and minimum queries
serviced.
Database Size (n)
Parameter (c)
Average Number of Queries Serviced
Minimum Number of Queries Serviced
216
425
421.97
420
218
850
846.57
844
220
1725
1722.52
1719
We see that, on average, less than 5 blocks of side information are wasted. Furthermore, the minimum en-
countered over all 1,000,000 experiments is greater than c−6 in all three scenarios. Therefore, we empirically
choose that c− 25 queries will be serviced by our PSIR scheme before running PSIR.Init to re-initialize client
state.
Latency. To understand the total time required to perform a private retrieval, we measure the latency of
retrieving one 288 byte element from databases of n ∈ {216, 218, 220} records. We set up our client and server
machines on the same LAN network and utilize the Linux Traﬃc Control [1] to conﬁgure the bandwidth on
both machines. We consider the following three scenarios also used in [7]: querying between two datacenters,
using a home network and using a mobile network. We conﬁgure our machines to maintain 800 Mbps for
queries between data centers. For the home and mobile network, we choose 18.7 Mbps and 10 Mbps for each
setting based on Akamai’s latest reports [3]. The results are reported in Figure 3. Amortized latency refers
to online latency and the latency of PSIR.Init and PSIR.UpdateState spread over queries. PaillierPSIR and
XPSIR have smaller latency than XPIR.
7.2 Cost of Ring-LWE based PSIR
Our ﬁrst implementation of PSIR is in C++ on top of the APIs provided by the open sourced XPIR [2]
implementation.
We choose the parameters for Ring-LWE based FHE schemes used by XPIR based on the analysis by
Albrecht et al. [6]. Similar parameters are used in previous instantiations of XPIR [5] and SealPIR [7]. For
XPIR, we use 2048 degree polynomials and 60 bit coeﬃcient modulus. In particular, we use the recommended
modulus of the form 261 − i · 214 + 1 for diﬀerent i. We will pack α = 14 records to be downloaded and ﬁt α
records into a single ciphertext. Therefore, XPIR will view the database as n/α records of 288 · α bytes.
We construct PSIR using the XPIR scheme with d = 2 levels of recursion, which we denote XPSIR. In
addition, we estimate costs of PSIR with SealPIR (SealPSIR) using previously reported results [7]. We note
our experimental setup is worse than the one chosen in [7] in terms of number of cores, RAM size and CPU
version. The means of 10 experiment runs are reported for XPSIR in Table 3. Our estimated costs for
SealPSIR are shown in Table 2. The costs of OCP are shown in Appendix A.
XPSIR. The results for XPSIR show up to 12x reductions in server CPU, 7x reductions in online network
costs and 6x reductions in total amortized network costs compared to XPIR. For the 1M items case, XPSIR
introduces up a half second increase in client CPU, but oﬀsets the gain by decreasing server by at least 4.5
seconds.
SealPSIR. Our estimates for SealPSIR indicate up to 10x reduction in server CPU costs since the PSIR
n/2 records. In exchange, SealPSIR introduces a 13% increase in
framework reduces the client database to
online network costs, a 68% increase in total amortized network costs and a signiﬁcant increase in client CPU.
√
21
XPIR (d = 2)
XPIR (d = 3)
0.15
< 0.01
N/A
5.08
N/A
5.08
65,536
0.08
N/A
1.37
N/A
1.37
65,536
N/A
262,144
N/A
1,048,576
N/A
262,144
N/A
1,048,576
N/A
0.04
< 0.01 < 0.01
N/A
< 0.05 < 0.09 < 0.16
Database Size (n)
Client State (KB) N/A
Client CPU (sec)
XPIR query
XPIR extract
OCP.GenerateSeed
total
Server CPU (sec)
XPIR
0.35
OCP.ExtractPartition N/A
total
0.35
Network (KB)
XPIR query
393
XPIR answer
262
OCP seed
20
online total
675
StreamPBSR
92
amortized total
767