52(28)
107(52)
121(66)
#
Products
71
57
26
154
107
31
158
296
450
#
Patches
105
88
35
228
106
40
177
323
551
#
Exploits
0
0
0
0
21
12
35
68
68
Figure 4: Dataset summary. The number inside brackets is
#CVE-IDs where we were able to find at least one tp date.
vendor security advisories, blog posts, and mailing list archives, ei-
ther using the current page online or from the Internet Archive [12]
if a page was no longer available.
(3) Patched Versions. The procedure to collect patched versions
started off similarly the above, i.e., we first extracted from NVD,
JVN, and vendor security advisories. In addition, we also extracted
from the release notes of vendor patches and, in a few cases, resorted
to manual investigation using search engines.
(4) Public Disclosure Date. The public disclosure date of a vul-
nerability, denoted td, is the earliest date when the vulnerability
was disclosed in a publicly accessible resource. Although the NVD
does not contain this information, we were able to extract this in-
formation from JVN, thanks to the curation effort of JPCERT/CC
and Information-technology Promotion Agency (IPA) [13].
(5) Exploit Release Date. For each included vulnerability, we have
also attempted to collect the earliest release date of a publicly-
known exploit when one is available in either Exploit Database
(EDB) [23] or Metasploit [25]. We denote this date by te and it is
our best-effort estimation of the exploit release date.
(6) Patch Release Date. When we extracted the patched version
of an included vulnerability from a release note, we also attempted
to collect the patch release date tp. To our surprise, some release
notes either do not contain a date or, in the case of Buffalo US,
contain dates of the source documents from which the notes were
translated. When this happened, we resorted to using the first date
among the following as a best-effort estimation of tp: (i) the release
date listed by the vendor website, or the Internet Archive if the
page no longer exists, (ii) the file date of the release note if it is
in an archive, (iii) the file date of the archive, and (iv) the latest of
other file dates in the same archive, unpacked using binwalk [5].
4 ANALYSIS OF PATCH RELEASE BEHAVIOR
4.1 Dataset Overview
Figure 4 summarizes our dataset, which contains 283 CVE entries
spanning 2006–2017, involving 450 products, 551 patches, and 68
published exploits. Compared with Figure 2, we dropped 15 entries
that are unrelated to consumer IoT devices and 10 entries where
we were unable to fill in at least one missing field.
To help us understand the severity of the included vulnerabilities,
columns 4 to 6 shows the breakdown using Common Vulnerability
Scoring System (CVSS) v2. We see that vulnerabilities of medium
severity form the majority in both our JP (62%) and US (47%) datasets.
In addition, both datasets also contain a significant percentage of
high-severity vulnerabilities (26% and 47% respectively).
Session 6A: IoT SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand4874.2 Characterizations of Patch Releases
In this section, we will analyze the patch releases and characterize
the vendor behaviors in our dataset. Throughout, we will pay special
attention in contrasting between the JP and US datasets. In §4.3, we
will provide our explanation for several of these differences.
4.2.1 Patch Availability Delay. Figure 6 shows the patch availability
delay (tp − td) of each vendor as a box-plot. We can classify a
vendor based on when it tends to release security patches w.r.t. the
corresponding public disclosure dates: (i) around: IO-DATA and
D-Link; (ii) before: Buffalo, NEC (Aterm), and Linksys; and (iii) after:
Netgear. Of particular note, the median delay for Netgear in our
dataset is 23 days and the maximum delay is well over 3 years.
4.2.2 Minimum Exploit Window. Closely related is the minimum
exploit window (tp − te) of the included vulnerabilities, for which
we found 7 exploits that were released before their corresponding
patches. Although all 7 are in the US dataset, this may be because
both exploit databases we used are international and thus may have
regional bias. (We are not aware of any JP-focused exploit database.)
Incremental Patch Release. Our dataset shows all 6 vendors
4.2.3
practiced incremental patch release, which refers to releasing a series
of patches to the same vulnerability but for different devices over
time. This reflects the common phenomenon that many consumer
IoT devices share software components and thus also vulnerabilities.
In our dataset, 62.4% of the patches were released incrementally
and they are associated with 40 CVE IDs.
Unfortunately, during an incremental patch release, attackers
may race to discover the vulnerability in similar devices and exploit
it before the vendor releases patches for those other devices. This is
effectively a form of 1-day exploitation. To characterize this risk, we
have measured the time between the last and the first patch releases
(tpL − tpF ) for each included CVE ID involved in an incremental
patch release. Our measurement showed that the average number
of days between the first and last patch releases was 122.5 days,
with a median of 36 days and a maximum of 1, 399 days. This is
visualized in Figure 7, which reveals two cases where an exploit
was released amid an incremental patch release.
4.2.4 Patch Release Timeliness Over Time. Following [27], we mea-
sured the timeliness of patch releases with a breakdown on CVSS
severity (L/M/H) over the covered period in order to detect any
temporal trend. We categorize the patch release timing into: (i)
before: tp  td. Fig-
ure 5a shows the trend in our dataset. We see that patches released
after disclosure (darkest) account for a large portion across all 3
categories, and that there is unfortunately no sign of reduction over
time. Interestingly, once we break down the dataset by markets,
Figures 5b and 5c show that timings of category (iii) are largely due
to the US dataset. This sparked our investigation in §4.3.
4.2.5 Overall Patch Release Timing. Simplifying Figure 5, Figure 9
shows the number of included patches based on their timeliness,
followed by breakdowns for JP and US. We see that over 1/2 of the
included patches were released pre-disclosure and about 1/3 were
released post-disclosure. Again, we see a stark contrast where the
overwhelming majority of the included patches in the JP dataset
were released pre-disclosure.
Fix Prioritization. We also investigated whether high-severity
4.2.6
vulnerabilities were patched quicker, which was addressed in [17]
for open-source software. Our dataset shows no discernible priori-
tization, as demonstrated in Figure 8a, which shows the cumulative
distribution functions (CDFs) of the patch availability delay (tp −td)
for each severity category. Specifically, the CDF for high-severity
vulnerabilities remains around 0.9 well into 1 year post-disclosure,
while the CDFs for the other two categories have already reached
1.0 at that time. As an extreme example, Netgear released the patch
for CVE-2013-4775 (CVSS 7.8) 1, 247 days years post-disclosure.
4.3 Contrasting Between JP and US
In §4.2, we witnessed that the overwhelming majority of the patches
in our JP dataset were released either concurrently or before public
disclosures, whether in relative proportion (Figure 5) or in absolute
number (Figure 9). We therefore hypothesized that the finders in
our JP dataset tended to perform coordinated disclosures. To check
this hypothesis, we have spent a significant amount of effort to
classify every disclosure in our dataset as Coordinated Disclosures,
Full Disclosures, or Unknown. (Our procedure is documented in [20].)
Figure 10 depicts our result. Confirming our hypothesis, over
97% of the vulnerabilities in our JP dataset were disclosed via Coor-
dinated Disclosures. In contrast, the corresponding figure is 55.8%
for our US dataset, where a staggering 37.5% of the included vul-
nerabilities were disclosed via Full Disclosures instead.
To explain the above, we observed a characteristic of the finders
in our JP dataset. Specifically, while a simple scan of our US dataset
shows a diverse set of finders, the finders of 30 of the 53 CVE entries
in our JP dataset declared affiliations with a local security company
“Mitsui Bussan Secure Directions, Inc.” Their declarations led us to
believe that they were operating as white-hat hackers, which is a
likely explanation to why they performed coordinated disclosures.
5 SIGNIFICANT 1-DAY RISKS UNCOVERED
Our data collection effort has led us to uncover three alarming
vendor practices, all of which may pose significant risks of 1-day
exploits. Here we will describe these practices and provide high-
lights of our findings. Our full data analysis can be found in [20].
Incremental Patch Release. This risk behind this practice was
already discussed in §4.2.3. While potentially dangerous, it is debat-
able whether this risk is avoidable because of the inherent conflict
between releasing patches as early as possible and delaying patches
until the patches for all vulnerable products are ready.
Unsynchronized Patch Release. When researching the included
vulnerabilities, we noticed that the regional subsidiaries of some
vendors would often release a patch against the same vulnerability
on different dates. Since the knowledge of exploit generation from
patches is now wide-spread and may even be automated (e.g., [4]),
this practice likely represents a significant 1-day risk for customers
in regions that receive their patches late. We dub this risk “geo-
graphical arbitrage”—the potential to generate 1-day exploits by
using a patch that was already released in another region.
To characterize this risk, we extended our dataset to include the
following subsidiaries of the included vendors: Buffalo US, D-Link
DE, D-Link AU, and Netgear CN. Among the patches shared with
the US subsidiaries, we found that Buffalo JP leads Buffalo US in
Session 6A: IoT SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand488Vendor Region
Buffalo
D-Link
Japan
Germany
Australia
China
Netgear
#Patches
12
103
62
51
Average Median Maximum
1 days
-0.58 days
366 days
23.7 days
218 days
2.5 days
31 days
346 days
0.5 days
2 days
-1 day
8 days
Table 1: Statistics of patch release gap on patches shared
among the US subsidiaries and other included subsidiaries.
Positive duration means the US subsidiary lags behind.
50% of the patches, D-Link US is behind D-Link DE in 58.3% of the
patches but leads D-Link AU in 59.7% of the patches, and Netgear
CN leads Netgear US in 59.6% of the patches. This shows the patch
releases by these subsidiaries are indeed often unsynchronized.
Table 1 shows the statistics of the patch release gaps among
the shared patches. Alarmingly, for both D-Link and Netgear, we
were able to identify a shared patch where the corresponding US
subsidiary is over 200 days behind. A more detailed investigation is
presented in Table 2, which shows 15 CVE entries and the affected
products where an included US subsidiary is at least 30 days behind.
Finally, we also identified 5 exploits that were released amid a
patch release gap. Although we do not have any evidence to believe
any of these exploits was a result of geographical arbitrage, we
believe the timing of their releases indisputably demonstrates that
geographical arbitrage can pose a real threat.
Implicit End-of-Support (EoS). During our research, we also ob-
served many regional subsidiaries appear to stop releasing patches
to products that were still being supported in at least one other
region but posted no EoS announcement. This involves 15 patches,
which are shown in Table 3. Among the subsidiaries included in this
paper, we were not able to discover EoS information from Buffalo
US, D-Link AU, Netgear US, and Netgear CN. Unfortunately, this
practice of implicit EoS also poses a serious risk to the end users in
a similar manner as in unsynchronized patch releases.
6 RELATED WORK
Many previous studies have leveraged information on vulnera-
bilities and patches to study various aspects of the vulnerability
lifecycle and its management. Here we will discuss a few lines of
these related works, grouped by the target of the studies.
The first and most-related line of work aims to study the vendor
patch release behavior. In their landmark study, Frei et al. [8] have
performed a large-scale study using over 80, 000 security advisories
published between 1995 and 2006 to analyze the temporal relations
among vulnerability discoveries, disclosures, and patch releases. A
follow-up study to this was published in 2008 [9], which specifically
focused on contrasting between Apple and Microsoft. In 2010, a
large-scale study leveraging 420 vulnerabilities was published by
Arora et al. [2]. However, the vulnerabilities were sampled from the
period of 2000-09 to 2003-08, which was ∼7 years old at the time
of its publication. In 2012, Shahzad et al. [27] published another
large-scale study using 46, 310 vulnerabilities disclosed between
1988 and 2011. Their focus included 7 major software vendors and
11 of their products. In comparison, our study focused on consumer
IoT vendors and our dataset has the natural benefit of being able to
cover more recent vulnerabilities. A notable finding of our work is
that we do not observe any improvement by the included vendors in
terms of patch availability delay over the covered period, whereas
[27, Fig. 9] shows a marked improvement starting around 2006.
Another line of related work focused on characterizing patches
and vulnerabilities. Leveraging the WINE dataset and public data,
Bilge and Tudor [3] identified 18 zero-day vulnerabilities, of which
11 were not previously known to have been used in zero-day attacks.
Similarly, Nappa et al. [21] characterized patch deployments of 10
popular client software packages and their vulnerabilities due to
shared code. In contrast, several previous works relied on public
data only. In addition to the aforementioned study by Shahzad et al.,
we are also aware of [11, 24, 30], which all focused on individual
open-source projects. Most recently, Li and Paxson [17] published a
large-scale study on 682 open-source projects, characterizing over
4, 000 bug fixes for over 3, 000 vulnerabilities. Sharing a similarity
with our study, their study also revealed a significant information
leak. In particular, the authors observed that the patches to many
vulnerabilities in open-source projects were publicly visible before
disclosure, which poses significant risks of 1-day exploits.
Finally, we note that there is a long line of work on notification,
which is related to our study because a natural next step to our study
is to investigate the mechanisms and the effectiveness of notifying
consumers in regards to vulnerable devices. For this direction, we
refer interested readers to five most recent works we are aware of
and the references therein: [15, 16, 28, 29, 31].
7 DISCUSSIONS
Data Quality. First, we sincerely thank JVN for providing curated
public disclosure dates. Although some previous works used the
entry creation date in the NVD as a best-effort estimation (e.g., [27]
and [21]), we are aware that these two dates may differ greatly.
Thus, we believe future studies should consider using JVN as a
more accurate source for public disclosure dates.
Aside from vulnerability databases such as NVD and JVN, patch
release notes are arguably the most important information source
in vulnerability lifecycle management. Unfortunately, we encoun-
tered much irregularity in this source during our study. While some
release notes do not contain a date (§3.4), some others do not men-
tion the CVE ID of the vulnerability being fixed even when the
patch is for a published CVE ID. This suggests future studies may
consider leveraging natural language processing techniques.
Data Size. At present, vendors may silently patch a vulnerability
discovered internally. This hinders any study that uses information
about patch releases to measure the vendors in their vulnerability
management. We believe policy makers may consider requiring
vendors to publicly disclose the dates of all discovered vulnerabili-
ties in a way akin to data breach disclosures, which in turn creates
incentives for vendors to create products that are more secure.
Vendor Behaviors. Our result shows that vendors who operate
regional subsidiaries should consider coordinating among their
subsidiaries to synchronize their patch releases and publish End-
of-Support information in every region. We believe the former is
particularly important because consumers may not be able to sim-
ply install a firmware from another region onto their devices due to
region-specific technicalities, such as the use of specific wireless fre-
quencies. Although these practices likely require additional invest-
ments, we believe they are much-needed improvements—indeed,
mainstream software vendors and smartphone vendors have long
Session 6A: IoT SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand489adopted these best practices and consumers would (rightly) expect
them from every vendor.
Finally, we recommend vendors to consider maintaining perma-
nent machine-readable security feeds, such as release notes with
JSON/XML metadata and advisories in RSS. Together with adequate
disclosures suggested above, we believe these feeds would create
values for participating vendors by, e.g., enabling researchers to
create better tools to help the customers of participating vendors to
scan and defend their networks after a vulnerability is discovered.
8 CONCLUSION
Using a dataset that covers 283 CVE entries and 450 products, we