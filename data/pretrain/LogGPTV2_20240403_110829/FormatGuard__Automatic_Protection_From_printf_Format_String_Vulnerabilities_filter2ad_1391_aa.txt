title:FormatGuard: Automatic Protection From printf Format String Vulnerabilities
author:Crispin Cowan and
Matt Barringer and
Steve Beattie and
Greg Kroah-Hartman and
Michael Frantzen and
Jamie Lokier
USENIX Association
Proceedings of the
10th USENIX Security
Symposium
Washington, D.C., USA
August 13–17, 2001
© 2001 by The USENIX Association
Phone: 1 510 528 8649
FAX: 1 510 548 5738
THE ADVANCED COMPUTING SYSTEMS ASSOCIATION
All Rights Reserved
Email: PI:EMAIL
For more information about the USENIX Association:
WWW: http://www.usenix.org
Rights to individual papers remain with the author or the author's employer.
 Permission is granted for noncommercial reproduction of the work for educational or research purposes.
This copyright notice must be included in the reproduced paper. USENIX acknowledges all trademarks herein.
FormatGuard: Automatic Protection From printf Format String 
Vulnerabilities
Crispin Cowan, Matt Barringer, Steve Beattie, and Greg Kroah-Hartman
WireX Communications, Inc. http://wirex.com/
Mike Frantzen
Purdue University
Jamie Lokier
CERN
Abstract
In June 2000, a major new class of vulnerabilities called
“format bugs” was discovered when an vulnerability in
WU-FTP appeared that acted almost like a buffer over-
flow,  but  wasn’t.  Since  then,  dozens  of  format  string
vulnerabilities have appeared. This paper describes the
format  bug  problem,  and  presents  FormatGuard:  our
proposed  solution.  FormatGuard  is  a  small  patch  to
glibc that provides general protection against format
bugs. We show that FormatGuard is effective in protect-
ing  several  real  programs  with  format  vulnerabilities
against  live  exploits,  and  we  show  that  FormatGuard
imposes minimal compatibility and performance costs.
1  Introduction
In June 2000, a major new class of vulnerabilities called
“format bugs” was discovered when an interesting vul-
nerability in WU-FTP appeared that acted almost like a
buffer  overflow,  but  wasn’t  [22].  Rather,  the  problem
was  the  sudden  realization  that  it  is  unsafe  to  allow
potentially hostile input to be passed directly as the for-
mat string for calls to printf-like functions. The dan-
ger  is  that  creative  inclusion  of  %  directives  in  the
format string coupled with the lack of any effective type
or argument counting in C’s varargs facility allows the
attacker to induce unexpected behavior in programs.
This vulnerability is made particularly dangerous by the
%n  directive,  which  assumes  that  the  corresponding
argument to  printf is of type “int  *”, and writes
back the number of bytes formatted so far. If the attacker
crafts the format string, then they can use the %n direc-
tive to write an arbitrary value to an  arbitrary  word in
the  program’s  memory.  This  makes  format  bugs  every
bit as dangerous as buffer overflows [8]: the attacker can
send  a  single  packet  of  data  to  a  vulnerable  program,
and  obtain  a  remote  (possibly  root)  shell  prompt  for
their  trouble.  Since  June  2000,  format  bugs  have
eclipsed  buffer  overflow  vulnerabilities  for  the  most
common form of remote penetration vulnerability.
There  are  several  obvious  solutions  to  this  problem,
which unfortunately don’t work:
Remove the %n feature: The printf %n directive is
the most dangerous, because it induces printf to
write data back to the argument list. It has been pro-
posed that the %n feature simply be removed from the
printf  family  of  functions.  Unfortunately,  there
exist real programs that actually use the %n feature
(which is in the ANSI C specification [12]) so this
would break an undesirable amount of software.
Permit Only Static Format Strings: Format bugs occur
because  the  printf  tolerates  dynamic  format
strings. It has been proposed that printf be modi-
fied to insist that the format string be static. This ap-
proach fails because a large number of programs, es-
pecially those using the GNU internationalization li-
brary,  generate  format  strings  dynamically,  so  this
too would break an undesirable amount of software.
Count the Arguments to printf: Because %n treats
the corresponding argument as an int  * an effec-
tive format bug attack must walk back up the stack to
find a word that points to the right place, and/or out-
put a sufficient number of bytes to affect the %n val-
ue. Thus the attacker nearly always must provide a
format string that does not match the actual number
of arguments presented to printf. If it can be done,
this approach is effective in stopping format bug at-
tacks. Unfortunately, the varargs mechanism that C
employs to permit a variable number of arguments to
a given function does not permit any kind of check-
ing of either the type or count of the arguments with-
This work supported in part by DARPA contract N66001-00-C-8032.
out breaking the standard ABI for printf. Varargs
permits the receiving functions to “pop” an arbitrary
number and type of arguments off the stack, relying
on the function itself to correctly interpret the con-
tents of the stack. A “safe varargs” that passes either
an argument count or an argument terminator could
be  built.  However,  this  modified  varargs  protocol
would not be compatible with any existing dynamic
or static libraries and programs.
FormatGuard, our proposed solution to the format bug
problem, uses a variation on argument counting. Instead
of trying to do argument counting on varargs, Format-
Guard  uses  particular  properties  of  GNU  CPP  (the  C
PreProcessor) macro handling of variable arguments to
extract the count of actual arguments. The actual count
of arguments is then passed to a safe printf wrapper.
The wrapper parses the format string to determine how
many arguments to expect, and if the format string calls
for  more  arguments  than  the  actual  number  of  argu-
ments, it raises an intrusion alert and kills the process.
The rest of this paper is organized as follows. Section 2
elaborates  on  the  printf  format  string  vulnerability.
Section  3  describes  FormatGuard;  our  solution  to  this
problem. We present security testing in Section 4, com-
patibility testing in Section 5, and  performance  testing
in  Section  6.  Section  7  relates  FormatGuard  to  other
defenses for printf format string vulnerabilities. Sec-
tion 8 presents our conclusions.
2  printf Format String Vulnerabilities
The first known discovery of format bugs was by Tymm
Twillman while auditing the source code for ProFTPD
1.2.0pre6.  Basic  details  were  released  to  the  ProFTPD
maintainers  and  a  Linux  security  mailing  list  in  early
September  1999,  and 
then  publicly  released  via
BugTraq  [23]  later  that  month.  Other  individuals  then
wrote a few other format bug exploits, but they were not
immediately released to the public. It wasn't until June
2000 [22] that format bugs became widely recognized,
when numerous exploits for  various common software
packages started to surface on security mailing lists.
Format  bugs  occur  fundamentally  because  C’s  varargs
mechanism  is  type  unsafe.  Varargs  provides  a  set  of
primitives  for  “popping”  arguments  off  the  stack.  The
number  of  bytes  “popped”  depends  on  the  type  of  the
expected argument. At no time is either the type or the
existence of the argument checked: the function receiv-
ing the arguments is entirely responsible for popping the
correct number, type, and sequence of arguments.
The  printf family of functions (syslog, printf,
fprintf, sprintf, and snprintf) use varargs to
support the ability to output a variable number of argu-
ments. The format string tells the function the type and
sequence of arguments to pop and then format for out-
put.  The  vulnerability  occurs  if  the  format  string  is
bogus, as is the case when the format string is actually
provided by the attacker. 
“printf(str)” 
An example of this situation occurs when a programmer
writes 
for
“printf(“%s”,  str)”. Because this idiom is per-
fectly functional, and easier to type, it has been used for
many  years.  Unfortunately,  it  is  also  vulnerable  if  the
attacker inserts spurious % directives in the str string.
short-hand 
as 
a 
The  %n  directive  is  particularly  dangerous:  it  assumes
that the corresponding argument to printf is of type
“int *”, and writes back the number of bytes format-
ted so far into the storage pointed to by the int *. The
result  of  spurious  %n  directives  in  printf  format
strings is that the attacker can “walk” back up the stack
some number of words by inserting some number of %d
directives, until they reach a suitable word on the stack,
and treating that word as an int  *, use a %n to over-
write  a word  nearly  anywhere  in the  victim program’s
address space, creating substantial security problems. If
buffers are of appropriate size, the attacker can also use
the buffer itself as a source of words to use as the int
* pointer, making it even easier for the attacker to use
%n to modify an arbitrary word of memory.
language, 
the  %n  directive 
Thus the essential features that create format vulnerabil-
ities are the basic lack of type safety in the C program-
ming 
induces
unexpected side-effects in printf calls, and the casual
use of un-filtered user-input as a printf format string
due to the common assumption that this is a safe prac-
tice.  Detailed  descriptions  of 
the  exploitation  of
printf vulnerabilities have  been  written by  Boucha-
reine [3, 4] and Newsham [14].
that 
3  FormatGuard: Protection from Funny 
Format Strings
An essential part of the format string attack described in
Section 2 is that the attacker provides some number of
spurious % directives in user-input that is subsequently
used as a format string for a printf call. FormatGuard
defends  against  format  bug  attacks  by  comparing  the
number  of  actual  arguments  presented  to  printf
against the number of arguments called for by the for-
mat string. If the actual number of arguments is less than
the number of arguments the format string calls for, then
#define printf                  mikes_print(&cnt, print0
#define print0(x, args...) x ,print1(## args)
#define print1(x, args...) x+(++cnt-cnt) ,print2(## args)
#define print2(x, args...) x+(++cnt-cnt) ,print3(## args)
...
void mikes_print(int *args, char *format, ...);
Figure 1  Frantzen’s Argument Counter
FormatGuard deems this call to be an attack, syslog’s
the attempt, and aborts the program. As previously dis-
cussed,  C’s  varargs  mechanism  does  not  permit  argu-
ment counting, and so the trick is to find a way to count
the arguments. Section 3.1 describes how FormatGuard
implements  argument  counting  with  GNU  CPP,  and
Section 3.2 describes how FormatGuard uses the argu-
ment count to implement a protected printf wrapper. 
3.1 Counting Arguments
Frantzen  first  proposed  the  CPP  method  on  July  25,
2000 [10]. This method exploits the way that CPP (the C
PreProcessor) handles variable argument lists. Using the
macro production shown in Figure 1, CPP can count the
arguments  by  stripping  the  leading  argument  away  in
each production, similar to the Lisp CAR/CDDR idiom.
On  September  25,  2000  Lokier  [13]  proposed  an
improved method of using CPP variable argument syn-
tax  for  argument  counting.  Lokier’s  method  allowed
WireX to develop argument counting for FormatGuard
that is recursive, reentrant, and thus thread safe, shown
in Figure 2. This code function as follows:
1. The  __formatguard_counter 
production
serves  to  capture  the  zero-case,  so  that  calls  to
printf  containing  only  a  null  argument  list  are
handled correctly.
2. The  __formatguard_count1  production  ap-
pends a sequence of counter place holding arguments
5, 4, 3, 2, and 1. It does so by compresses the variable
argument  list  from  __formatguard_counter
into a single token y.
3. Finally,  __formatguard_count2  re-expands
the  compressed  variable  argument  group  y  from
__formatguard_count1, but in doing so maps
the trailing  counter  place holding  arguments to  an-
other series of place holders, such that the first place
holder 
is
mapped to the argument n, which in turn is the sole
output of this sequence of productions.
from  __formatguard_count1 
The  result of the  above  three  productions  is  that place
holding counter arguments are shifted to the right in pro-
portion  to  the  number  of  arguments  presented  to
printf 
therefore
__formatguard_counter()  returns  the  count  of
the number of arguments presented.
place, 
first 
and 
the 
in 
of 
the 
format 
The  “-1”  is  a kludge factor to accommodate  the  exist-
ence 
The
__PRETTY_FUNCTION__ macro is inserted to allow
meaningful error reporting. Figure 3 presents an exam-
ple, expanding an argument list of two elements: (a, b)
to return a value of 2.
string 
itself. 
3.1, 
3.2 Protected printf
Figure  2  shows  a  definition  for  a  printf  macro  that
includes a call to the argument counter described in Sec-
tion 
a
__protected_printf  function.  The  purpose  is  to
prevent  the  attacker  from  injecting  spurious  %  direc-
tives into an un-filtered format statements, by ensuring
that the number of % directives is less than or equal to
the actual number of arguments provided.
passes 
count 
this 
and 
to 
Parsing  printf  format  strings  can  be  difficult.  For-
matGuard  determines  the  number  of  %  directives  in  a
#define __formatguard_counter(y...) __formatguard_count1 ( , ##y)
#define __formatguard_count1(y...) \
   __formatguard_count2 (y, 5,4,3,2,1,0)
#define __formatguard_count2(_,x0,x1,x2,x3,x4,n,ys...)  n
#define printf(x...)    \
    __protected_printf (__PRETTY_FUNCTION__, \
        __formatguard_counter(x) - 1 , ## x)
Figure 2  FormatGuard Implementation, Simplifed to Handle 5 or Fewer Arguments