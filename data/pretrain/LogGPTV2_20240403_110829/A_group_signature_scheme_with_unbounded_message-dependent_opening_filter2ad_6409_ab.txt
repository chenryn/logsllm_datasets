(cid:3)
(cid:3)
Token Query II. A continues to query tokens.
(cid:3)
In this
which is submitted
phase A is forbidden to query M
in challenge phase.
Guess. A outputs a bit b
′
. The advantage of A is de(cid:12)ned
by the absolute diﬀerence between the probability that
′
b
is equal to b and 1=2.
Admitter Anonymity.
Definition 2. We say that a GS-MDO scheme (cid:5) = (GKg;
GSig; GVf; Td; Open) has admitter anonymity if for all prob-
abilistic polynomial-time adversaries A, the success proba-
bility of A in the following game between a challenger is
negligible in the security parameter (cid:21).
Setup. The challenger runs GKg(1(cid:21); 1n) and obtain (gpk;
ok; ak; (gski)1(cid:20)i(cid:20)n). Then the challenger sends (gpk;
ak; (gski)1(cid:20)i(cid:20)n) to A.
Open Query I. A is allowed to interact with an open ora-
cle. For an open query for (M; (cid:27)), the challenger runs
Td(gpk; ak; M ) to obtain tM and return Open(gpk; ok;
M; (cid:27); tM ) to A.
Challenge. At some point A requests a challenge for i0; i1 2
. The challenger chooses
f1; : : : ; ng and a message M
a random bit b, and return GSig(gpk; gskib ; M
Open Query II. A continues to query tokens. In this phase
which is submitted in chal-
A is forbidden to query (cid:27)
lenge phase.
).
(cid:3)
(cid:3)
(cid:3)
Guess. A outputs a bit b
. The advantage of A is de(cid:12)ned
by the absolute diﬀerence between the probability that
′
b
is equal to b and 1=2.
′
Traceability.
Even the opener and the admitter collude, they should
not be able to produce any forged signature or untraceable
signature. This requirement is formalized by the following
de(cid:12)nition.
Definition 3. We say that a GS-MDO scheme (cid:5) = (GKg;
GSig; GVf; Td; Open) has traceability if for all probabilistic
polynomial-time adversaries A, the success probability of A
in the following game between a challenger is negligible in
the security parameter (cid:21).
Setup. The challenger runs GKg(1(cid:21); 1n) and obtain (gpk;
ok; ak; (gski)1(cid:20)i(cid:20)n). Then the challenger sends (gpk;
ok; ak; (gski)1(cid:20)i(cid:20)n) to A.
Private Key Query. A is allowed to interact with a pri-
vate key oracle. For a private key query for i, the
challenger returns gski to A.
Signing Query. A is allowed to interact with signing or-
acle. For a signing query for (i; M ), the challenger
returns GSig(gpk; i; gski; M ) to A.
Forge. A outputs a message-signature pair (M
; (cid:27)
(cid:3)
; (cid:27)
). The
) = ⊤ and
(cid:3)
adversary wins the game if GVf(gpk; M
one of the following conditions (a) and (b) holds: (a)
)) = ?, or (b)
Open(gpk; ok; M
(cid:3) ̸= ? and
Open(gpk; ok; M
)) = i
(cid:3)
both the signing key of the user i
and a signature on
(cid:3)
) are never queried to the above oracles. The
(i
advantage of A is de(cid:12)ned by the probability that A wins
the game.
; Td(gpk; ak; M
; Td(gpk; ak; M
; (cid:27)
; (cid:27)
; M
(cid:3)
(cid:3)
(cid:3)
(cid:3)
(cid:3)
(cid:3)
(cid:3)
(cid:3)
(cid:3)
The admitter should be unable to identify the signer of any
group signature without cooperation with the opener, even
if some group members are corrupted. This requirement is
formalized by the following game. Note that, in order to
model anonymity against the admitter, we give the message
speci(cid:12)cation key to the adversary in this game.
2.3 The Computational Assumptions
Let G be a probabilistic polynomial-time algorithm that
takes a security parameter 1(cid:21) as input and generates a pa-
rameter (p; G; GT ; e; g) of bilinear groups, where p is a (cid:21)-bit
prime, G and GT are groups of order p, e is a bilinear map
519from G (cid:2) G to GT , and g is a generator of G. We then
describe several computational assumptions on which the
proposed scheme is based.
The q-strong Difﬁe-Hellman Assumption.
Let (p; G; GT ; e; g)
$ (cid:0) G(1(cid:21)), (cid:13) $ (cid:0) Z and Ai   g(cid:13)i
for
i = 0; : : : ; q. The q-strong Diﬃe-Hellman problem in G is
stated as follows: given (g; (Ai)0(cid:20)i(cid:20)q), output (c; g1=((cid:13)+c))
where c 2 Z(cid:3)
p. The advantage of an algorithm A against the
q-strong Diﬃe-Hellman problem is de(cid:12)ned as
Advq-SDHA
((cid:21)) = Pr[A(g; (Ai)0(cid:20)i(cid:20)q) = (c; g1=((cid:13)+c)) ^ c 2 Zp]:
We say that the q-strong Diﬃe-Hellman assumption holds if
Advq-SDHA
time algorithm A.
((cid:21)) is negligible in (cid:21) for any probabilistic polynomial-
The Decision Linear Assumption.
Let u, v, h $ (cid:0) G, (cid:11), (cid:12), r $ (cid:0) Zp and g1   u(cid:11); g2   v(cid:12).
The decision linear problem in G is stated as follows: given
(u; v; h; u(cid:11); v(cid:12); z), output 1 if z = h(cid:11)+(cid:12), otherwise 0 if z =
hr. The advantage of an algorithm A against the decision
linear problem is de(cid:12)ned as
AdvDLINA
((cid:21)) = jPr[A(u; v; h; u(cid:11); v(cid:12); z) = 1 j z = h(cid:11)+(cid:12)]
(cid:0) Pr[A(u; v; h; u(cid:11); v(cid:12); z) = 1 j z = hr]j:
We say that the decision linear assumption holds if AdvDLINA
is negligible in (cid:21) for any probabilistic polynomial-time algo-
rithm A.
((cid:21))
The Decision Bilinear Difﬁe-Hellman Assumption.
Let (p; G; GT ; e; g)
$ (cid:0) G(1(cid:21)) and a, b, c, r $ (cid:0) Zp. The
decision linear problem in (G; GT ) is stated as follows: given
(g; ga; gb; gc; z), output 1 if z = e(g; g)abc, otherwise 0 if
z = e(g; g)r. The Advantage of an algorithm A against the
decision bilinear Diﬃe-Hellman problem is de(cid:12)ned as
AdvDBDHA
((cid:21)) = jPr[A(g; ga; gb; gc; z) = 1 j z = e(g; g)abc]
(cid:0) Pr[A(g; ga; gb; gc; z) = 1 j z = e(g; g)r]j:
cryption is designed to ensure that only when both the PKE
and the IBE are decrypted, can the entire ciphertext be
decrypted. Such multiple-encryption can be accomplished
using a simple 2-out-of-2 secret sharing.
This feature enables us to realize the MDO functionality.
If the opener only possesses the decryption key of the PKE
and the admitter holds the master secret of the IBE, the
decryption key of the IBE (under a certain ID) can serve
as the message-dependent token. The multiple encryption
ensures that the opener cannot identify the originator of a
signature even if the opener has the decryption key of the
PKE scheme. Furthermore, if the opener receives the token,
which is merely a derived decryption key of the IBE, the
opener, using both his own decryption key and the message-
speci(cid:12)c decryption key received from the admitter, is able
to decrypt the ciphertext included in the group signature,
thereby identifying the originator of the signature.
Our Construction.
GKg(1(cid:21); 1n). The proposed scheme uses two hash functions
H1 : f0; 1g(cid:3) ! G and H2 : f0; 1g(cid:3) ! Zp. They are
modeled as random oracles in the security analysis.
Given a security parameter 1(cid:21), the algorithm runs
G(1(cid:21)) to generate a parameter of bilinear group (p;
G; GT ; e; g). Then the algorithm selects a random el-
ement u, v, h $ (cid:0) G n f1g and random integers (cid:24)1, (cid:24)2,
(cid:24)3, (cid:16), (cid:13) $ (cid:0) Zp, sets g1   u(cid:24)1 h(cid:24)3 , g2   v(cid:24)2 h(cid:24)3 , y   g(cid:16),
and w   g(cid:13). The algorithm then select xi
$ (cid:0) Zp
and sets Ai   g1=((cid:13)+xi) for each user i (1 (cid:20) i (cid:20) n).
Finally the algorithm outputs the group public key
gpk   (p; G; GT ; e; g; u; v; h; g1; g2; y; w; H1; H2), the
message-speci(cid:12)cation key ak   (cid:16), the opening key
ok   ((cid:24)1; (cid:24)2; (cid:24)3; (e(Ai; g))1(cid:20)i(cid:20)n), and the users’ sign-
ing keys (gsk i)1(cid:20)i(cid:20)n   (Ai; xi)1(cid:20)i(cid:20)n.
GSig(gpk ; i; gsk i; M ). Given an input (gpk ; i; gsk i; M ), the
algorithm generates a group signature as follows: choose
random (cid:11), (cid:12), (cid:26), (cid:17) $ (cid:0) Zp, computes
(T1; T2; T3; T4)   (u(cid:11); v(cid:12); h(cid:11)+(cid:12); g(cid:11)
1 g(cid:12)
2 Aig(cid:17))
We say that the decision bilinear Diﬃe-Hellman assumption
holds if AdvDBDHA
((cid:21)) is negligible in (cid:21) for any probabilistic
polynomial-time algorithm A.
and
(T5; T6)   (g(cid:26); e(y; H1(M ))(cid:26)e(g; g)
(cid:0)(cid:17)):
3. THE PROPOSED SCHEME
In this section we describe the proposed scheme and its
security.
Underlying Idea.
Our proposed scheme is based on the BBS group signa-
ture, in which each group member is provided with a (Boneh-
Boyen) signature [6], to certify the membership of the owner.
The group signature consists of two parts: the (cid:12)rst part is
the linear encryption of the certi(cid:12)cate, while the second part
is the \signature of knowledge" of the encrypted certi(cid:12)cate.
The decryption key for the linear encryption, which is held
by the opener, is used to revoke the anonymity of any group
signature.
We extend the BBS group signature scheme by replacing
the linear encryption with a certain type of 2-out-of-2 mul-
tiple encryption of ordinary PKE and IBE. The multiple en-
$ (cid:0) Zp, compute
Then choose random r(cid:11), r(cid:12), r(cid:26), r(cid:17), rx, r(cid:11)x, r(cid:12)x, r(cid:26)x,
r(cid:17)x
R1   ur(cid:11) ;
R2   vr(cid:12) ;
R3   hr(cid:11)+r(cid:12) ;
R4   e(T4; g)rx e(g1; w)
(cid:0)r(cid:11) e(g1; g)
(cid:0)r(cid:11)x
(cid:0)r(cid:12)x e(g; w)
(cid:0)r(cid:17) e(g; g)
(cid:0)r(cid:17)x ;
(cid:1) e(g2; w)
(cid:0)r(cid:12) e(g2; g)
R5   gr(cid:26) ;
R6   e(y; H1(M ))r(cid:26) e(g; g)
R7   T rx
1 u
R8   T rx
2 v
R9   T rx
5 g
R10   T rx
6 e(y; H1(M ))
(cid:0)r(cid:11)x ;
(cid:0)r(cid:12)x ;
(cid:0)r(cid:26)x ;
(cid:0)r(cid:17) ;
(cid:0)r(cid:26)x e(g; g)r(cid:17)x ;
520compute c   H2(M; T1; : : : ; T6; R1; : : : ; R10), and fur-
ther computes
s(cid:11)   r(cid:11) + c(cid:11);
s(cid:12)   r(cid:12) + c(cid:12);
s(cid:26)   r(cid:26) + c(cid:26);
s(cid:17)   r(cid:17) + c(cid:17);
sx   rx + cxi;
s(cid:11)x   r(cid:11)x + c(cid:11)xi;
s(cid:12)x   r(cid:12)x + c(cid:12)xi;
s(cid:26)x   r(cid:26)x + c(cid:26)xi;
s(cid:17)x   r(cid:17)x + c(cid:17)xi:
Finally let (cid:27) be
(T1; : : : ; T6; c; s(cid:11); s(cid:12); s(cid:26); s(cid:17); sx; s(cid:11)x; s(cid:12)x; s(cid:26)x; s(cid:17)x)
and output (cid:27) as the group signature.
Remark 1. The above R1, : : : ,R10, c, s(cid:11), s(cid:12), s(cid:26), s(cid:17), sx,
s(cid:11)x, s(cid:12)x, s(cid:26)x, and s(cid:17)x come from a Schnorr-type protocol
that proves knowledge (cid:11), (cid:12), (cid:26), (cid:17), and x satisfying the equa-
tions
T1 = u(cid:11);
T2 = v(cid:12);
T3 = h(cid:11)+(cid:12);
e(g; g) = e(T4g1
(cid:0)(cid:11)g2
(cid:0)(cid:12)g
(cid:0)(cid:17); wgx);
T5 = g(cid:26);
T6 = e(y; H1(M ))(cid:26)e(g; g)
(cid:0)(cid:17):
More concretely, introducing four intermediate variables (cid:14)1,
(cid:14)2, (cid:14)3, and (cid:14)4 (which are intended to be (cid:14)1 = (cid:11)x, (cid:14)2 =
(cid:12)x, (cid:14)3 = (cid:26)x, and (cid:14)4 = (cid:17)x), the underlying protocol proves
knowledge (cid:11), (cid:12), (cid:26), (cid:17), x, (cid:14)1, (cid:14)2, (cid:14)3, and (cid:14)4 satisfying the
equations
T1 = u(cid:11);