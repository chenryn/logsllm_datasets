vulnerability from a memory corruption vulnerability. Let’s use an example of a heap
memory corruption vulnerability. We can reliably overwrite an arbitrary number of bytes
after a heap allocation, which can in turn be used to disclose the contents of memory using
a heap overflow like so: one common structure that might be allocated on the heap is a
buffer containing a length-prefixed string, and when the string buffer is allocated, an
additional number of bytes is placed at the front to accommodate a length field. The string
data is then stored after the length, as shown in Figure 10-10.
Technet24
||||||||||||||||||||
||||||||||||||||||||
Figure 10-10: Converting memory corruption to information disclosure
At the top is the original pattern of heap allocations ➊. If the vulnerable allocation is
placed prior to the string buffer in memory, we would have the opportunity to corrupt the
string buffer. Prior to any corruption occurring, we can only read the 5 valid bytes from
the string buffer.
At the bottom, we cause the vulnerable allocation to overflow by just enough to modify
only the length field of the string ➋. We can set the length to an arbitrary value, in this
case, 100 bytes. Now when we read back the string, we’ll get back 100 bytes instead of only
the 5 bytes that were originally allocated. Because the string buffer’s allocation is not that
large, data from other allocations would be returned, which could include sensitive
memory addresses, such as VTable pointers and heap allocation pointers. This disclosure
gives you enough information to bypass ASLR.
Exploiting ASLR Implementation Flaws
The implementation of ASLR is never perfect due to limitations of performance and
available memory. These shortcomings lead to various implementation-specific flaws,
which you can also use to disclose the randomized memory locations.
Most commonly, the location of an executable in ASLR isn’t always randomized
between two separate processes, which would result in a vulnerability that could disclose
the location of memory from one connection to a networked application, even if that
might cause that particular process to crash. The memory address could then be used in a
subsequent exploit.
On Unix-like systems, such as Linux, this lack of randomization should only occur if
the process being exploited is forked from an existing master process. When a process
forks, the OS creates an identical copy of the original process, including all loaded
executable code. It’s fairly common for servers, such as Apache, to use a forking model to
service new connections. A master process will listen on a server socket waiting for new
||||||||||||||||||||
||||||||||||||||||||
connections, and when one is made, a new copy of the current process is forked and the
connected socket gets passed to service the connection.
On Windows systems, the flaw manifests in a different way. Windows doesn’t really
support forking processes, although once a specific executable file load address has been
randomized, it will always be loaded to that same address until the system is rebooted. If
this wasn’t done, the OS wouldn’t be able to share read-only memory between processes,
resulting in increased memory usage.
From a security perspective, the result is that if you can leak a location of an executable
once, the memory locations will stay the same until the system is rebooted. You can use
this to your advantage because you can leak the location from one execution (even if it
causes the process to crash) and then use that address for the final exploit.
Bypassing ASLR Using Partial Overwrites
Another way to circumvent ASLR is to use partial overwrites. Because memory tends to be
split into distinct pages, such as 4096 bytes, operating systems restrict how random layout
memory and executable code can load. For example, Windows does memory allocations on
64KB boundaries. This leads to an interesting weakness in that the lower bits of random
memory pointers can be predictable even if the upper bits are totally random.
The lack of randomization in the lower bits might not sound like much of an issue,
because you would still need to guess the upper bits of the address if you’re overwriting a
pointer in memory. Actually, it does allow you to selectively overwrite part of the pointer
value when running on a little endian architecture due to the way that pointer values are
stored in memory.
The majority of processor architectures in use today are little endian (I discussed
endianness in more detail in “Binary Endian” on page 41). The most important detail to
know about little endian for partial overwrites is that the lower bits of a value are stored at
a lower address. Memory corruptions, such as stack or heap overflows, typically write from
a low to a high address. Therefore, if you can control the length of the overwrite, it would
be possible to selectively overwrite only the predictable lower bits but not the randomized
higher bits. You can then use the partial overwrite to convert a pointer to address another
memory location, such as a ROP gadget. Figure 10-11 shows how to change a memory
pointer using a partial overwrite.
Technet24
||||||||||||||||||||
||||||||||||||||||||
Figure 10-11: An example of a short overwrite
We start with an address of 0x07060504. We know that, due to ASLR, the top 16 bits
(the 0x0706 part) are randomized, but the lower 16 bits are not. If we know what memory
the pointer is referencing, we can selectively change the lower bits and accurately specify a
location to control. In this example, we overwrite the lower 16 bits to make a new address
of 0x0706BBAA.
Detecting Stack Overflows with Memory Canaries
Memory canaries, or cookies, are used to prevent exploitation of a memory corruption
vulnerability by detecting the corruption and immediately causing the application to
terminate. You’ll most commonly encounter them in reference to stack memory
corruption prevention, but canaries are also used to protect other types of data structures,
such as heap headers or virtual table pointers.
A memory canary is a random number generated by an application during startup. The
random number is stored in a global memory location so it can be accessed by all code in
the application. This random number is pushed onto the stack when entering a function.
Then, when the function is exited, the random value is popped off the stack and compared
to the global value. If the global value doesn’t match what was popped off the stack, the
application assumes the stack memory has been corrupted and terminates the process as
quickly as possible. Figure 10-12 shows how inserting this random number detects danger,
like a canary in a coal mine, helping to prevent the attacker from gaining access to the
return address.
||||||||||||||||||||
||||||||||||||||||||
Figure 10-12: A stack overflow with a stack canary
Placing the canary below the return address on the stack ensures that any overflow
corruption that would modify the return address would also modify the canary. As long as
the canary value is difficult to guess, the attacker can’t gain control over the return address.
Before the function returns, it calls code to check whether the stack canary matches what it
expects. If there’s a mismatch, the program immediately crashes.
Bypassing Canaries by Corrupting Local Variables
Typically, stack canaries protect only the return address of the currently executing
function on the stack. However, there are more things on the stack that can be exploited
than just the buffer that’s being overflowed. There might be pointers to functions, pointers
to class objects that have a virtual function table, or, in some cases, an integer variable that
can be overwritten that might be enough to exploit the stack overflow.
If the stack buffer overflow has a controlled length, it might be possible to overwrite
these variables without ever corrupting the stack canary. Even if the canary is corrupted, it
might not matter as long as the variable is used before the canary is checked. Figure 10-13
shows how attackers might corrupt local variables without affecting the canary.
In this example, we have a function with a function pointer on the stack. Due to how
the stack memory is laid out, the buffer we’ll overflow is at a lower address than the
function pointer f, which is also located on the stack ➊.
When the overflow executes, it corrupts all memory above the buffer, including the
return address and the stack canary ➋. However, before the canary checking code runs
Technet24
||||||||||||||||||||
||||||||||||||||||||
(which would terminate the process), the function pointer f is used. This means we still get
code execution ➌ by calling through f, and the corruption is never detected.
Figure 10-13: Corrupting local variables without setting off the stack canary
There are many ways in which modern compilers can protect against corrupting local
variables, including reordering variables so buffers are always above any single variable,
which when corrupted, could be used to exploit the vulnerability.
Bypassing Canaries with Stack Buffer Underflow
For performance reasons, not every function will place a canary on the stack. If the
function doesn’t manipulate a memory buffer on the stack, the compiler might consider it
safe and not emit the instructions necessary to add the canary. In most cases, this is the
correct thing to do. However, some vulnerabilities overflow a stack buffer in unusual ways:
for example, the vulnerability might cause an underflow instead of an overflow, corrupting
data lower in the stack. Figure 10-14 shows an example of this kind of vulnerability.
Figure 10-14 illustrates three steps. First, the function DoSomething() is called ➊. This
function sets up a buffer on the stack. The compiler determines that this buffer needs to be
protected, so it generates a stack canary to prevent an overflow from overwriting the
return address of DoSomething(). Second, the function calls the Process() method, passing a
pointer to the buffer it set up. This is where the memory corruption occurs. However,
instead of overflowing the buffer, Process() writes to a value below, for example, by
referencing p[-1] ➋. This results in corruption of the return address of the Process()
method’s stack frame that has stack canary protection. Third, Process() returns to the
corrupted return address, resulting in shell code execution ➌.
||||||||||||||||||||
||||||||||||||||||||
Figure 10-14: Stack buffer underflow
Final Words
Finding and exploiting vulnerabilities in a network application can be difficult, but this
chapter introduced some techniques you can use. I described how to triage vulnerabilities
to determine the root cause using a debugger; with the knowledge of the root cause, you
can proceed to exploit the vulnerability. I also provided examples of writing simple shell
code and then developing a payload using ROP to bypass a common exploit mitigation
DEP. Finally, I described some other common exploit mitigations on modern operating
systems, such as ASLR and memory canaries, and the techniques to circumvent these
mitigations.
This is the final chapter in this book. At this point you should be armed with the
knowledge of how to capture, analyze, reverse engineer, and exploit networked
applications. The best way to improve your skills is to find as many network applications
and protocols as you can. With experience, you’ll easily spot common structures and
identify patterns of protocol behavior where security vulnerabilities are typically found.
Technet24
||||||||||||||||||||
||||||||||||||||||||
NETWORK PROTOCOL ANALYSIS TOOLKIT
Throughout this book, I’ve demonstrated several tools and libraries you can use in
network protocol analysis, but I didn’t discuss many that I use regularly. This appendix
describes the tools that I’ve found useful during analysis, investigation, and exploitation.
Each tool is categorized based on its primary use, although some tools would fit several
categories.
Passive Network Protocol Capture and Analysis Tools
As discussed in Chapter 2, passive network capture refers to listening and capturing
packets without disrupting the flow of traffic.
Microsoft Message Analyzer
Website http://blogs.technet.com/b/messageanalyzer/
License Commercial; free of charge
Platform Windows
The Microsoft Message Analyzer is an extensible tool for analyzing network traffic on
Windows. The tool includes many parsers for different protocols and can be extended with
a custom programming language. Many of its features are similar to those of Wireshark
except Message Analyzer has added support for Windows events.
||||||||||||||||||||
||||||||||||||||||||
TCPDump and LibPCAP
Website 
http://www.tcpdump.org/; 
http://www.winpcap.org/ 
for 
Windows
implementation (WinPcap/WinDump)
License BSD License
Platforms BSD, Linux, macOS, Solaris, Windows
The TCPDump utility installed on many operating systems is the grandfather of network
packet capture tools. You can use it for basic network data analysis. Its LibPCAP
development library allows you to write your own tools to capture traffic and manipulate
PCAP files.
Technet24
||||||||||||||||||||
||||||||||||||||||||
Wireshark
Website https://www.wireshark.org/
License GPLv2
Platforms BSD, Linux, macOS, Solaris, Windows
Wireshark is the most popular tool for passive packet capture and analysis. Its GUI and
large library of protocol analysis modules make it more robust and easier to use than
TCPDump. Wireshark supports almost every well-known capture file format, so even if
you capture traffic using a different tool, you can use Wireshark to do the analysis. It even
includes support for analyzing nontraditional protocols, such as USB or serial port
communication. Most Wireshark distributions also include tshark, a replacement for
TCPDump that has most of the features offered in the main Wireshark GUI, such as the
protocol dissectors. It allows you to view a wider range of protocols on the command line.
||||||||||||||||||||
||||||||||||||||||||
Active Network Capture and Analysis
To modify, analyze, and exploit network traffic as discussed in Chapters 2 and 8, you’ll
need to use active network capture techniques. I use the following tools on a daily basis
when I’m analyzing and testing network protocols.
Canape
Website https://github.com/ctxis/canape/
License GPLv3
Platforms Windows (with .NET 4)
I developed the Canape tool as a generic network protocol man-in-the-middle testing,
analyzing, and exploitation tool with a usable GUI. Canape contains tools that allow users
to develop protocol parsers, C# and IronPython scripted extensions, and different types of
man-in-the-middle proxies. It’s open source as of version 1.4, so users can contribute to its
development.
Technet24
||||||||||||||||||||
||||||||||||||||||||
Canape Core
Website https://github.com/tyranid/CANAPE.Core/releases/
License GPLv3
Platforms .NET Core 1.1 and 2.0 (Linux, macOS, Windows)
The Canape Core libraries, a stripped-down fork of the original Canape code base, are
designed for use from the command line. In the examples throughout this book, I’ve used
Canape Core as the library of choice. It has much the same power as the original Canape
tool while being usable on any OS supported by .NET Core instead of only on Windows.
Mallory
Website https://github.com/intrepidusgroup/mallory/
License Python Software Foundation License v2; GPLv3 if using the GUI
Platform Linux
Mallory is an extensible man-in-the-middle tool that acts as a network gateway, which
||||||||||||||||||||
||||||||||||||||||||
makes the process of capturing, analyzing, and modifying traffic transparent to the
application being tested. You can configure Mallory using Python libraries as well as a
GUI debugger. You’ll need to configure a separate Linux VM to use it. Some useful
instructions 
are 
available 
at
https://bitbucket.org/IntrepidusGroup/mallory/wiki/Mallory_Minimal_Guide/.
Network Connectivity and Protocol Testing
If you’re trying to test an unknown protocol or network device, basic network testing can
be very useful. The tools listed in this section help you discover and connect to exposed
network servers on the target device.
Hping
Website http://www.hping.org/
License GPLv2
Platforms BSD, Linux, macOS, Windows
The Hping tool is similar to the traditional ping utility, but it supports more than just
ICMP echo requests. You can also use it to craft custom network packets, send them to a
target, and display any responses. This is a very useful tool to have in your kit.
Netcat
Website Find the original at http://nc110.sourceforge.net/ and the GNU version at
http://netcat.sourceforge.net/
License GPLv2, public domain
Platforms BSD, Linux, macOS, Windows
Netcat is a command line tool that connects to an arbitrary TCP or UDP port and allows
you to send and receive data. It supports the creation of sending or listening sockets and is
about as simple as it gets for network testing. Netcat has many variants, which, annoyingly,
all use different command line options. But they all do pretty much the same thing.
Nmap
Website https://nmap.org/
License GPLv2
Platforms BSD, Linux, macOS, Windows
Technet24
||||||||||||||||||||
||||||||||||||||||||
If you need to scan the open network interface on a remote system, nothing is better than
Nmap. It supports many different ways to elicit responses from TCP and UDP socket
servers, as well as different analysis scripts. It’s invaluable when you’re testing an unknown
device.
Web Application Testing
Although this book does not focus heavily on testing web applications, doing so is an
important part of network protocol analysis. One of the most widely used protocols on the
internet, HTTP is even used to proxy other protocols, such as DCE/RPC, to bypass
firewalls. Here are some of the tools I use and recommend.
Burp Suite
Website https://portswigger.net/burp/
License Commercial; limited free version is available
Platforms Supported Java platforms (Linux, macOS, Solaris, Windows)
Burp Suite is the gold standard of commercial web application–testing tools. Written in
||||||||||||||||||||
||||||||||||||||||||
Java for maximum cross-platform capability, it provides all the features you need for
testing web applications, including built-in proxies, SSL decryption support, and easy
extensibility. The free version has fewer features than the commercial version, so consider
buying the commercial version if you plan to use it a lot.
Zed Attack Proxy (ZAP)
Website https://www.owasp.org/index.php/ZAP
License Apache License v2
Platforms Supported Java platforms (Linux, macOS, Solaris, Windows)
If Burp Suite’s price is beyond reach, ZAP is a great free option. Developed by OWASP,
ZAP is written in Java, can be scripted, and can be easily extended because it’s open source.
Mitmproxy
Technet24
||||||||||||||||||||
||||||||||||||||||||
Website https://mitmproxy.org/
License MIT
Platforms Any Python-supported platform, although the program is somewhat limited
on Windows
Mitmproxy is a command line–based web application–testing tool written in Python. Its
many standard features include interception, modification, and replay of requests. You can
also include it as a separate library within your own applications.
Fuzzing, Packet Generation, and Vulnerability Exploitation
Frameworks
Whenever you’re developing exploits for and finding new vulnerabilities, you’ll usually
need to implement a lot of common functionality. The following tools provide a
framework, allowing you to reduce the amount of standard code and common
functionality you need to implement.
American Fuzzy Lop (AFL)
||||||||||||||||||||
||||||||||||||||||||
Website http://lcamtuf.coredump.cx/afl/
License Apache License v2
Platforms Linux; some support for other Unix-like platforms
Don’t let its cute name throw you off. American Fuzzy Lop (AFL) may be named after a
breed of rabbit, but it’s an amazing tool for fuzz testing, especially on applications that can