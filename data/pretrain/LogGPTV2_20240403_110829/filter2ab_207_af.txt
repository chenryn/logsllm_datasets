```
#### Example
```shell script
redis> SET mykey "Hello"
"OK"
redis> EXPIRE mykey 10
(integer) 1
redis> TTL mykey
(integer) 10
redis> SET mykey "Hello World"
"OK"
redis> TTL mykey
(integer) -1
```
Set a key's time to live in seconds
### EXPIREAT 
``` {.wrap}
EXPIREAT key timestamp
```
#### Example
```shell script
redis> SET mykey "Hello"
"OK"
redis> EXISTS mykey
(integer) 1
redis> EXPIREAT mykey 1293840000
(integer) 1
redis> EXISTS mykey
(integer) 0
```
Set the expiration for a key as a UNIX timestamp
### KEYS 
``` {.wrap}
KEYS pattern
```
#### Example
```shell script
redis> MSET firstname Jack lastname Stuntman age 35
"OK"
redis> KEYS *name*
1) "firstname"
2) "lastname"
redis> KEYS a??
1) "age"
redis> KEYS *
1) "firstname"
2) "age"
3) "lastname"
```
Find all keys matching the given pattern
### PERSIST 
``` {.wrap}
PERSIST key
```
#### Example
```shell script
redis> SET mykey "Hello"
"OK"
redis> EXPIRE mykey 10
(integer) 1
redis> TTL mykey
(integer) 10
redis> PERSIST mykey
(integer) 1
redis> TTL mykey
(integer) -1
```
Remove the expiration from a key
### PEXPIRE 
``` {.wrap}
PEXPIRE key milliseconds
```
#### Example
```shell script
redis> SET mykey "Hello"
"OK"
redis> PEXPIRE mykey 1500
(integer) 1
redis> TTL mykey
(integer) 1
redis> PTTL mykey
(integer) 1499
```
Set a key's time to live in milliseconds
### PEXPIREAT 
``` {.wrap}
PEXPIREAT key milliseconds-timestamp
```
#### Example
```shell script
redis> SET mykey "Hello"
"OK"
redis> PEXPIREAT mykey 1555555555005
(integer) 1
redis> TTL mykey
(integer) -2
redis> PTTL mykey
(integer) -2
```
Set the expiration for a key as a UNIX timestamp specified in milliseconds
### PTTL 
``` {.wrap}
PTTL key
```
#### Example
```shell script
redis> SET mykey "Hello"
"OK"
redis> EXPIRE mykey 1
(integer) 1
redis> PTTL mykey
(integer) 1000
```
Get the time to live for a key in milliseconds
### RENAME 
``` {.wrap}
RENAME key newkey
```
#### Example
```shell script
redis> SET mykey "Hello"
"OK"
redis> RENAME mykey myotherkey
"OK"
redis> GET myotherkey
"Hello"
```
Rename a key
### RENAMENX 
``` {.wrap}
RENAMENX key newkey
```
#### Example
```shell script
redis> SET mykey "Hello"
"OK"
redis> SET myotherkey "World"
"OK"
redis> RENAMENX mykey myotherkey
(integer) 0
redis> GET myotherkey
"World"
```
Rename a key, only if the new key does not exist
### TOUCH 
``` {.wrap}
TOUCH key [key ...]
```
#### Example
```shell script
redis> SET key1 "Hello"
"OK"
redis> SET key2 "World"
"OK"
redis> TOUCH key1 key2
(integer) 2
```
Alters the last access time of a key(s). Returns the number of existing keys specified.
### TTL 
``` {.wrap}
TTL key
```
#### Example
```shell script
redis> SET mykey "Hello"
"OK"
redis> EXPIRE mykey 10
(integer) 1
redis> TTL mykey
(integer) 10
```
Get the time to live for a key
### TYPE 
``` {.wrap}
TYPE key
```
#### Example
```shell script
redis> SET key1 "value"
"OK"
redis> LPUSH key2 "value"
(integer) 1
redis> SADD key3 "value"
(integer) 1
redis> TYPE key1
"string"
redis> TYPE key2
"list"
redis> TYPE key3
"set"
```
Determine the type stored at key
### UNLINK 
``` {.wrap}
UNLINK key [key ...]
```
#### Example
```shell script
redis> SET key1 "Hello"
"OK"
redis> SET key2 "World"
"OK"
redis> UNLINK key1 key2 key3
(integer) 2
```
Delete a key asynchronously in another thread. Otherwise it is just as DEL, but non blocking.
Redis Connection command{.cols-3}
------------
### Misc
| -                                                             | -                                                                          |
|---------------------------------------------------------------|----------------------------------------------------------------------------|
| [AUTH ](https://redis.io/commands/auth)                       | Authenticate to the server                                                 |
| [CLIENT CACHING ](https://redis.io/commands/client-caching)   | Instruct the server about tracking or not keys in the next request         |
| [CLIENT KILL ](https://redis.io/commands/client-kill)         | Kill the connection of a client                                            |
| [CLIENT LIST ](https://redis.io/commands/client-list)         | Get the list of client connections                                         |
| [CLIENT GETNAME](https://redis.io/commands/client-getname)    | Get the current connection name                                            |
| [CLIENT GETREDIR](https://redis.io/commands/client-getredir)  | Get tracking notifications redirection client ID if any                    |
| [CLIENT PAUSE ](https://redis.io/commands/client-pause)       | Stop processing commands from clients for some time                        |
| [CLIENT REPLY ](https://redis.io/commands/client-reply)       | Instruct the server whether to reply to commands                           |
| [CLIENT SETNAME ](https://redis.io/commands/client-setname)   | Set the current connection name                                            |
| [CLIENT TRACKING ](https://redis.io/commands/client-tracking) | Enable or disable server assisted client side caching support              |
| [CLIENT UNBLOCK ](https://redis.io/commands/client-unblock)   | Unblock a client blocked in a blocking command from a different connection |
| [HELLO ](https://redis.io/commands/hello)                     | switch Redis protocol                                                      |
| [QUIT](https://redis.io/commands/quit)                        | Close the connection                                                       |
| [RESET](https://redis.io/commands/reset)                      | Reset the connection                                                       |
| [SELECT ](https://redis.io/commands/select)                   | Change the selected database for the current connection                    |
### CLIENT ID
``` {.wrap}
CLIENT ID
```
#### Example
```shell script
redis> CLIENT ID
ERR Unknown or disabled command 'CLIENT'
```
Returns the client ID for the current connection
### CLIENT INFO
``` {.wrap}
CLIENT INFO
```
#### Example
```shell script
redis> CLIENT INFO
"id=55542 addr=127.0.0.1:58710 laddr=127.0.0.1:6379 fd=8 name= age=114920 idle=0 flags=N db=0 sub=0 psub=0 multi=-1 qbuf=26 qbuf-free=40928 argv-mem=10 obl=0 oll=0 omem=0 tot-mem=61466 events=r cmd=client user=default redir=-1\n"
```
Returns information about the current client connection.
### ECHO 
``` {.wrap}
ECHO message
```
#### Example
```shell script
redis> ECHO "Hello World!"
"Hello World!"
```
Echo the given string
### PING 
``` {.wrap}
PING [message]
```
#### Example
```shell script
redis> PING
"PONG"
redis> PING "hello world"
"hello world"
```
Ping the server
Redis Stream command{.cols-2}
------------
### Misc
| -                                                   | -                                                                                                                                                                                  |
|-----------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [XINFO ](https://redis.io/commands/xinfo)           | Get information on streams and consumer groups                                                                                                                                     |
| [XDEL ](https://redis.io/commands/xdel)             | Removes the specified entries from the stream. Returns the number of items actually deleted, that may be different from the number of IDs passed in case certain IDs do not exist. |
| [XREAD ](https://redis.io/commands/xread)           | Return never seen elements in multiple streams, with IDs greater than the ones reported by the caller for each stream. Can block.                                                  |
| [XGROUP ](https://redis.io/commands/xgroup)         | Create, destroy, and manage consumer groups.                                                                                                                                       |
| [XREADGROUP ](https://redis.io/commands/xreadgroup) | Return new entries from a stream using a consumer group, or access the history of the pending entries for a given consumer. Can block.                                             |
| [XCLAIM ](https://redis.io/commands/xclaim)         | Changes (or acquires) ownership of a message in a consumer group, as if the message was delivered to the specified consumer.                                                       |
| [XPENDING ](https://redis.io/commands/xpending)     | Return information and entries from a stream consumer group pending entries list, that are messages fetched but never acknowledged.                                                |
### XADD 
``` {.wrap}
XADD key [MAXLEN [=|~] length] [NOMKSTREAM] *|ID field value [field value ...]
```
#### Example
```shell script
redis> XADD mystream * name Sara surname OConnor
"1609040574632-0"
redis> XADD mystream * field1 value1 field2 value2 field3 value3
"1609040574632-1"
redis> XLEN mystream
(integer) 2
redis> XRANGE mystream - +
1) 1) "1609040574632-0"
   2) 1) "name"
      2) "Sara"
      3) "surname"
      4) "OConnor"
2) 1) "1609040574632-1"
   2) 1) "field1"
      2) "value1"
      3) "field2"
      4) "value2"
      5) "field3"
      6) "value3"
```
Appends a new entry to a stream
### XTRIM 
``` {.wrap}
XTRIM key MAXLEN [=|~] length
```
#### Example
```shell script
redis> XADD mystream * field1 A field2 B field3 C field4 D
"1609040575750-0"
redis> XTRIM mystream MAXLEN 2
(integer) 0
redis> XRANGE mystream - +
1) 1) "1609040575750-0"
   2) 1) "field1"
      2) "A"
      3) "field2"
      4) "B"
      5) "field3"
      6) "C"
      7) "field4"
      8) "D"
```
Trims the stream to (approximately if '~' is passed) a certain size
### XRANGE 
``` {.wrap}
XRANGE key start end [COUNT count]
```
#### Example
```shell script
redis> XADD writers * name Virginia surname Woolf
"1609040578002-0"
redis> XADD writers * name Jane surname Austen
"1609040578002-1"
redis> XADD writers * name Toni surname Morrison
"1609040578003-0"
redis> XADD writers * name Agatha surname Christie
"1609040578003-1"
redis> XADD writers * name Ngozi surname Adichie
"1609040578003-2"
redis> XLEN writers
(integer) 5
redis> XRANGE writers - + COUNT 2
1) 1) "1609040578002-0"
   2) 1) "name"
      2) "Virginia"
      3) "surname"
      4) "Woolf"
2) 1) "1609040578002-1"
   2) 1) "name"
      2) "Jane"
      3) "surname"
      4) "Austen"
```
Return a range of elements in a stream, with IDs matching the specified IDs interval
### XREVRANGE 
``` {.wrap}
XREVRANGE key end start [COUNT count]
```
#### Example
```shell script
redis> XADD writers * name Virginia surname Woolf
"1609040579130-0"
redis> XADD writers * name Jane surname Austen
"1609040579130-1"
redis> XADD writers * name Toni surname Morrison
"1609040579130-2"
redis> XADD writers * name Agatha surname Christie
"1609040579131-0"
redis> XADD writers * name Ngozi surname Adichie
"1609040579131-1"
redis> XLEN writers
(integer) 5
redis> XREVRANGE writers + - COUNT 1
1) 1) "1609040579131-1"
   2) 1) "name"
      2) "Ngozi"
      3) "surname"
      4) "Adichie"
```
Return a range of elements in a stream, with IDs matching the specified IDs interval, in reverse order (from greater to smaller IDs) compared to XRANGE
### XLEN 
``` {.wrap}
XLEN key
```
#### Example
```shell script
redis> XADD mystream * item 1
"1609040580250-0"
redis> XADD mystream * item 2
"1609040580250-1"
redis> XADD mystream * item 3
"1609040580251-0"
redis> XLEN mystream
(integer) 3
```
Return the number of entries in a stream
### XACK 
``` {.wrap}
XACK key group ID [ID ...]
```
#### Example
```shell script
redis> XACK mystream mygroup 1526569495631-0
ERR Unknown or disabled command 'XACK'
```
Marks a pending message as correctly processed, effectively removing it from the pending entries list of the consumer group. Return value of the command is the number of messages successfully acknowledged, that is, the IDs we were actually able to resolve in the PEL.
Miscellaneous {.cols-2}
------------
### Cluster
| -                                                                                         | -                                                                |
|-------------------------------------------------------------------------------------------|------------------------------------------------------------------|
| [CLUSTER ADDSLOTS ](https://redis.io/commands/cluster-addslots)                           | Assign new hash slots to receiving node                          |
| [CLUSTER BUMPEPOCH](https://redis.io/commands/cluster-bumpepoch)                          | Advance the cluster config epoch                                 |
| [CLUSTER COUNT-FAILURE-REPORTS ](https://redis.io/commands/cluster-count-failure-reports) | Return the number of failure reports active for a given node     |
| [CLUSTER COUNTKEYSINSLOT ](https://redis.io/commands/cluster-countkeysinslot)             | Return the number of local keys in the specified hash slot       |
| [CLUSTER DELSLOTS ](https://redis.io/commands/cluster-delslots)                           | Set hash slots as unbound in receiving node                      |
| [CLUSTER FAILOVER ](https://redis.io/commands/cluster-failover)                           | Forces a replica to perform a manual failover of its master.     |
| [CLUSTER FLUSHSLOTS](https://redis.io/commands/cluster-flushslots)                        | Delete a node's own slots information                            |
| [CLUSTER FORGET ](https://redis.io/commands/cluster-forget)                               | Remove a node from the nodes table                               |
| [CLUSTER GETKEYSINSLOT ](https://redis.io/commands/cluster-getkeysinslot)                 | Return local key names in the specified hash slot                |
| [CLUSTER INFO](https://redis.io/commands/cluster-info)                                    | Provides info about Redis Cluster node state                     |
| [CLUSTER KEYSLOT ](https://redis.io/commands/cluster-keyslot)                             | Returns the hash slot of the specified key                       |
| [CLUSTER MEET ](https://redis.io/commands/cluster-meet)                                   | Force a node cluster to handshake with another node              |
| [CLUSTER MYID](https://redis.io/commands/cluster-myid)                                    | Return the node id                                               |
| [CLUSTER NODES](https://redis.io/commands/cluster-nodes)                                  | Get Cluster config for the node                                  |
| [CLUSTER REPLICATE ](https://redis.io/commands/cluster-replicate)                         | Reconfigure a node as a replica of the specified master node     |
| [CLUSTER RESET ](https://redis.io/commands/cluster-reset)                                 | Reset a Redis Cluster node                                       |
| [CLUSTER SAVECONFIG](https://redis.io/commands/cluster-saveconfig)                        | Forces the node to save cluster state on disk                    |
| [CLUSTER SET-CONFIG-EPOCH ](https://redis.io/commands/cluster-set-config-epoch)           | Set the configuration epoch in a new node                        |
| [CLUSTER SETSLOT ](https://redis.io/commands/cluster-setslot)                             | Bind a hash slot to a specific node                              |
| [CLUSTER SLAVES ](https://redis.io/commands/cluster-slaves)                               | List replica nodes of the specified master node                  |
| [CLUSTER REPLICAS ](https://redis.io/commands/cluster-replicas)                           | List replica nodes of the specified master node                  |
| [CLUSTER SLOTS](https://redis.io/commands/cluster-slots)                                  | Get array of Cluster slot to node mappings                       |
| [READONLY](https://redis.io/commands/readonly)                                            | Enables read queries for a connection to a cluster replica node  |
| [READWRITE](https://redis.io/commands/readwrite)                                          | Disables read queries for a connection to a cluster replica node |
### Transactions
| -                                            | -                                                                   |
|----------------------------------------------|---------------------------------------------------------------------|
| [DISCARD](https://redis.io/commands/discard) | Discard all commands issued after MULTI                             |
| [EXEC](https://redis.io/commands/exec)       | Execute all commands issued after MULTI                             |
| [MULTI](https://redis.io/commands/multi)     | Mark the start of a transaction block                               |
| [UNWATCH](https://redis.io/commands/unwatch) | Forget about all watched keys                                       |
| [WATCH ](https://redis.io/commands/watch)    | Watch the given keys to determine execution of the MULTI/EXEC block |
### Scripting 
| -                                                         | -                                                    |
|-----------------------------------------------------------|------------------------------------------------------|
| [EVAL ](https://redis.io/commands/eval)                   | Execute a Lua script server side                     |
| [EVALSHA ](https://redis.io/commands/evalsha)             | Execute a Lua script server side                     |
| [SCRIPT DEBUG ](https://redis.io/commands/script-debug)   | Set the debug mode for executed scripts.             |
| [SCRIPT EXISTS ](https://redis.io/commands/script-exists) | Check existence of scripts in the script cache.      |
| [SCRIPT FLUSH](https://redis.io/commands/script-flush)    | Remove all the scripts from the script cache.        |
| [SCRIPT KILL](https://redis.io/commands/script-kill)      | Kill the script currently in execution.              |
| [SCRIPT LOAD ](https://redis.io/commands/script-load)     | Load the specified Lua script into the script cache. |
### Pubsub 
| -                                                       | -                                                                          |
|---------------------------------------------------------|----------------------------------------------------------------------------|
| [PSUBSCRIBE ](https://redis.io/commands/psubscribe)     | Listen for messages published to channels matching the given patterns      |
| [PUBSUB ](https://redis.io/commands/pubsub)             | Inspect the state of the Pub/Sub subsystem                                 |
| [PUBLISH ](https://redis.io/commands/publish)           | Post a message to a channel                                                |
| [PUNSUBSCRIBE ](https://redis.io/commands/punsubscribe) | Stop listening for messages posted to channels matching the given patterns |
| [SUBSCRIBE ](https://redis.io/commands/subscribe)       | Listen for messages published to the given channels                        |
| [UNSUBSCRIBE ](https://redis.io/commands/unsubscribe)   | Stop listening for messages posted to the given channels                   |