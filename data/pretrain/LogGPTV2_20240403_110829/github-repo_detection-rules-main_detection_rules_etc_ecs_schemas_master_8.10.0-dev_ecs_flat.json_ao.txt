{"observer.geo.region_name": {"dashed_name": "observer-geo-region-name", "description": "Region name.", "example": "Quebec", "flat_name": "observer.geo.region_name", "ignore_above": 1024, "level": "core", "name": "region_name", "normalize": [], "original_fieldset": "geo", "short": "Region name."}}
{"observer.geo.timezone": {"dashed_name": "observer-geo-timezone", "description": "The time zone of the location, such as IANA time zone name.", "example": "America/Argentina/Buenos_Aires", "flat_name": "observer.geo.timezone", "ignore_above": 1024, "level": "core", "name": "timezone", "normalize": [], "original_fieldset": "geo", "short": "Time zone."}}
{"observer.hostname": {"dashed_name": "observer-hostname", "description": "Hostname of the observer.", "flat_name": "observer.hostname", "ignore_above": 1024, "level": "core", "name": "hostname", "normalize": [], "short": "Hostname of the observer."}}
{"observer.ingress": {"dashed_name": "observer-ingress", "description": "Observer.ingress holds information like interface number and name, vlan, and zone information to classify ingress traffic.  Single armed monitoring such as a network sensor on a span port should only use observer.ingress to categorize traffic.", "flat_name": "observer.ingress", "level": "extended", "name": "ingress", "normalize": [], "short": "Object field for ingress information", "type": "object"}}
{"observer.ingress.interface.alias": {"dashed_name": "observer-ingress-interface-alias", "description": "Interface alias as reported by the system, typically used in firewall implementations for e.g. inside, outside, or dmz logical interface naming.", "example": "outside", "flat_name": "observer.ingress.interface.alias", "ignore_above": 1024, "level": "extended", "name": "alias", "normalize": [], "original_fieldset": "interface", "short": "Interface alias"}}
{"observer.ingress.interface.id": {"dashed_name": "observer-ingress-interface-id", "description": "Interface ID as reported by an observer (typically SNMP interface ID).", "example": 10, "flat_name": "observer.ingress.interface.id", "ignore_above": 1024, "level": "extended", "name": "id", "normalize": [], "original_fieldset": "interface", "short": "Interface ID"}}
{"observer.ingress.interface.name": {"dashed_name": "observer-ingress-interface-name", "description": "Interface name as reported by the system.", "example": "eth0", "flat_name": "observer.ingress.interface.name", "ignore_above": 1024, "level": "extended", "name": "name", "normalize": [], "original_fieldset": "interface", "short": "Interface name"}}
{"observer.ingress.vlan.id": {"dashed_name": "observer-ingress-vlan-id", "description": "VLAN ID as reported by the observer.", "example": 10, "flat_name": "observer.ingress.vlan.id", "ignore_above": 1024, "level": "extended", "name": "id", "normalize": [], "original_fieldset": "vlan", "short": "VLAN ID as reported by the observer."}}
{"observer.ingress.vlan.name": {"dashed_name": "observer-ingress-vlan-name", "description": "Optional VLAN name as reported by the observer.", "example": "outside", "flat_name": "observer.ingress.vlan.name", "ignore_above": 1024, "level": "extended", "name": "name", "normalize": [], "original_fieldset": "vlan", "short": "Optional VLAN name as reported by the observer."}}
{"observer.ingress.zone": {"dashed_name": "observer-ingress-zone", "description": "Network zone of incoming traffic as reported by the observer to categorize the source area of ingress traffic. e.g. internal, External, DMZ, HR, Legal, etc.", "example": "DMZ", "flat_name": "observer.ingress.zone", "ignore_above": 1024, "level": "extended", "name": "ingress.zone", "normalize": [], "short": "Observer ingress zone"}}
{"observer.ip": {"dashed_name": "observer-ip", "description": "IP addresses of the observer.", "flat_name": "observer.ip", "level": "core", "name": "ip", "normalize": ["array"], "short": "IP addresses of the observer.", "type": "ip"}}
{"observer.mac": {"dashed_name": "observer-mac", "description": "MAC addresses of the observer.\nThe notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.", "example": "[\"00-00-5E-00-53-23\", \"00-00-5E-00-53-24\"]", "flat_name": "observer.mac", "ignore_above": 1024, "level": "core", "name": "mac", "normalize": ["array"], "pattern": "^[A-F0-9]{2}(-[A-F0-9]{2}){5,}$", "short": "MAC addresses of the observer."}}
{"observer.name": {"dashed_name": "observer-name", "description": "Custom name of the observer.\nThis is a name that can be given to an observer. This can be helpful for example if multiple firewalls of the same model are used in an organization.\nIf no custom name is needed, the field can be left empty.", "example": "1_proxySG", "flat_name": "observer.name", "ignore_above": 1024, "level": "extended", "name": "name", "normalize": [], "short": "Custom name of the observer."}}
{"observer.os.family": {"dashed_name": "observer-os-family", "description": "OS family (such as redhat, debian, freebsd, windows).", "example": "debian", "flat_name": "observer.os.family", "ignore_above": 1024, "level": "extended", "name": "family", "normalize": [], "original_fieldset": "os", "short": "OS family (such as redhat, debian, freebsd, windows)."}}
{"observer.os.full": {"dashed_name": "observer-os-full", "description": "Operating system name, including the version or code name.", "example": "Mac OS Mojave", "flat_name": "observer.os.full", "ignore_above": 1024, "level": "extended", "multi_fields": [{"flat_name": "observer.os.full.text", "name": "text", "type": "match_only_text"}], "name": "full", "normalize": [], "original_fieldset": "os", "short": "Operating system name, including the version or code name."}}
{"observer.os.kernel": {"dashed_name": "observer-os-kernel", "description": "Operating system kernel version as a raw string.", "example": "4.4.0-112-generic", "flat_name": "observer.os.kernel", "ignore_above": 1024, "level": "extended", "name": "kernel", "normalize": [], "original_fieldset": "os", "short": "Operating system kernel version as a raw string."}}
{"observer.os.name": {"dashed_name": "observer-os-name", "description": "Operating system name, without the version.", "example": "Mac OS X", "flat_name": "observer.os.name", "ignore_above": 1024, "level": "extended", "multi_fields": [{"flat_name": "observer.os.name.text", "name": "text", "type": "match_only_text"}], "name": "name", "normalize": [], "original_fieldset": "os", "short": "Operating system name, without the version."}}
{"observer.os.platform": {"dashed_name": "observer-os-platform", "description": "Operating system platform (such centos, ubuntu, windows).", "example": "darwin", "flat_name": "observer.os.platform", "ignore_above": 1024, "level": "extended", "name": "platform", "normalize": [], "original_fieldset": "os", "short": "Operating system platform (such centos, ubuntu, windows)."}}
{"observer.os.type": {"dashed_name": "observer-os-type", "description": "Use the `os.type` field to categorize the operating system into one of the broad commercial families.\nIf the OS you're dealing with is not listed as an expected value, the field should not be populated. Please let us know by opening an issue with ECS, to propose its addition.", "example": "macos", "expected_values": ["linux", "macos", "unix", "windows", "ios", "android"], "flat_name": "observer.os.type", "ignore_above": 1024, "level": "extended", "name": "type", "normalize": [], "original_fieldset": "os", "short": "Which commercial OS family (one of: linux, macos, unix, windows, ios or android)."}}
{"observer.os.version": {"dashed_name": "observer-os-version", "description": "Operating system version as a raw string.", "example": "10.14.1", "flat_name": "observer.os.version", "ignore_above": 1024, "level": "extended", "name": "version", "normalize": [], "original_fieldset": "os", "short": "Operating system version as a raw string."}}
{"observer.product": {"dashed_name": "observer-product", "description": "The product name of the observer.", "example": "s200", "flat_name": "observer.product", "ignore_above": 1024, "level": "extended", "name": "product", "normalize": [], "short": "The product name of the observer."}}
{"observer.serial_number": {"dashed_name": "observer-serial-number", "description": "Observer serial number.", "flat_name": "observer.serial_number", "ignore_above": 1024, "level": "extended", "name": "serial_number", "normalize": [], "short": "Observer serial number."}}
{"observer.type": {"dashed_name": "observer-type", "description": "The type of the observer the data is coming from.\nThere is no predefined list of observer types. Some examples are `forwarder`, `firewall`, `ids`, `ips`, `proxy`, `poller`, `sensor`, `APM server`.", "example": "firewall", "flat_name": "observer.type", "ignore_above": 1024, "level": "core", "name": "type", "normalize": [], "short": "The type of the observer the data is coming from."}}
{"observer.vendor": {"dashed_name": "observer-vendor", "description": "Vendor name of the observer.", "example": "Symantec", "flat_name": "observer.vendor", "ignore_above": 1024, "level": "core", "name": "vendor", "normalize": [], "short": "Vendor name of the observer."}}
{"observer.version": {"dashed_name": "observer-version", "description": "Observer version.", "flat_name": "observer.version", "ignore_above": 1024, "level": "core", "name": "version", "normalize": [], "short": "Observer version."}}
{"orchestrator.api_version": {"dashed_name": "orchestrator-api-version", "description": "API version being used to carry out the action", "example": "v1beta1", "flat_name": "orchestrator.api_version", "ignore_above": 1024, "level": "extended", "name": "api_version", "normalize": [], "short": "API version being used to carry out the action"}}
{"orchestrator.cluster.id": {"dashed_name": "orchestrator-cluster-id", "description": "Unique ID of the cluster.", "flat_name": "orchestrator.cluster.id", "ignore_above": 1024, "level": "extended", "name": "cluster.id", "normalize": [], "short": "Unique ID of the cluster."}}
{"orchestrator.cluster.name": {"dashed_name": "orchestrator-cluster-name", "description": "Name of the cluster.", "flat_name": "orchestrator.cluster.name", "ignore_above": 1024, "level": "extended", "name": "cluster.name", "normalize": [], "short": "Name of the cluster."}}
{"orchestrator.cluster.url": {"dashed_name": "orchestrator-cluster-url", "description": "URL of the API used to manage the cluster.", "flat_name": "orchestrator.cluster.url", "ignore_above": 1024, "level": "extended", "name": "cluster.url", "normalize": [], "short": "URL of the API used to manage the cluster."}}
{"orchestrator.cluster.version": {"dashed_name": "orchestrator-cluster-version", "description": "The version of the cluster.", "flat_name": "orchestrator.cluster.version", "ignore_above": 1024, "level": "extended", "name": "cluster.version", "normalize": [], "short": "The version of the cluster."}}
{"orchestrator.namespace": {"dashed_name": "orchestrator-namespace", "description": "Namespace in which the action is taking place.", "example": "kube-system", "flat_name": "orchestrator.namespace", "ignore_above": 1024, "level": "extended", "name": "namespace", "normalize": [], "short": "Namespace in which the action is taking place."}}
{"orchestrator.organization": {"dashed_name": "orchestrator-organization", "description": "Organization affected by the event (for multi-tenant orchestrator setups).", "example": "elastic", "flat_name": "orchestrator.organization", "ignore_above": 1024, "level": "extended", "name": "organization", "normalize": [], "short": "Organization affected by the event (for multi-tenant orchestrator setups)."}}
{"orchestrator.resource.annotation": {"dashed_name": "orchestrator-resource-annotation", "description": "The list of annotations added to the resource.", "example": "['key1:value1', 'key2:value2', 'key3:value3']", "flat_name": "orchestrator.resource.annotation", "ignore_above": 1024, "level": "extended", "name": "resource.annotation", "normalize": ["array"], "short": "The list of annotations added to the resource."}}
{"orchestrator.resource.id": {"dashed_name": "orchestrator-resource-id", "description": "Unique ID of the resource being acted upon.", "flat_name": "orchestrator.resource.id", "ignore_above": 1024, "level": "extended", "name": "resource.id", "normalize": [], "short": "Unique ID of the resource being acted upon."}}
{"orchestrator.resource.ip": {"dashed_name": "orchestrator-resource-ip", "description": "IP address assigned to the resource associated with the event being observed. In the case of a Kubernetes Pod, this array would contain only one element: the IP of the Pod (as opposed to the Node on which the Pod is running).", "flat_name": "orchestrator.resource.ip", "level": "extended", "name": "resource.ip", "normalize": ["array"], "short": "IP address assigned to the resource associated with the event being observed.", "type": "ip"}}
{"orchestrator.resource.label": {"dashed_name": "orchestrator-resource-label", "description": "The list of labels added to the resource.", "example": "['key1:value1', 'key2:value2', 'key3:value3']", "flat_name": "orchestrator.resource.label", "ignore_above": 1024, "level": "extended", "name": "resource.label", "normalize": ["array"], "short": "The list of labels added to the resource."}}