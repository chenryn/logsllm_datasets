Please:
  * Check for duplicate issues.
  * Provide a complete example of how to reproduce the bug, wrapped in triple backticks like this:
I wanted to define a `custom_vjp` for a function that takes a string to
indicate what operations are to be conducted. Since `str` is not a validate
type for JAX whereas any objects that can be flatten and unflatten as a
`pytree` is, I thought of this hacky way to define my own string object:
    import jax
    import jax.numpy as jnp
    from functools import partial
    OP_TO_IDX, IDX_TO_OP = {"add": 0, "mul": 1}, {0: "add", 1: "mul"}
    @jax.tree_util.register_pytree_node_class
    class OpStr(object):
        def __init__(self, op):
            assert op in OP_TO_IDX, "can only be one of the ops"
            self.op = op
        def __eq__(self, other):
            return self.op == other
        def __hash__(self):
            return hash(self.op)
        def tree_flatten(self):
            return ([OP_TO_IDX[self.op]]), None
        @classmethod
        def tree_unflatten(cls, aux_data, children):
            idx = int(children[0])
            return cls(op=IDX_TO_OP[idx])
    @partial(jax.custom_vjp, nondiff_argnums=(2,))
    def op(x, y, op):
        if op == "add": z = x + y
        if op == "mul": z = x * y
        return z
    def op_fwd(x, y, op):
        cache = (x, y, op)
        if op == "add": z = x + y
        if op == "mul": z = x * y
        return z, cache
    def op_bwd(cache, dz):
        x, y, op = cache
        if op == "add": dz_dx = dz_dy = 1.0
        if op == "mul": dz_dx, dz_dy = y, x
        return dz_dx, dz_dy
    op.defvjp(op_fwd, op_bwd)
    grad_op = jax.grad(op)
    grad_op(1.0, 1.0, OpStr("add"))
  * If applicable, include full error messages/tracebacks.
But this gives me
    Traceback (most recent call last):
      File "/Users/wangy1/Documents/GitHub/dgl/tests/jax/test_op_str.py", line 47, in 
        grad_op(1.0, 1.0, OpStr("add"))
      File "/Users/wangy1/Documents/GitHub/dgl/tests/jax/test_op_str.py", line 24, in tree_unflatten
        idx = int(children[0])
    TypeError: int() argument must be a string, a bytes-like object or a real number, not 'NoneType'
Which is not expected since the flattened tree shouldn't be `None`.