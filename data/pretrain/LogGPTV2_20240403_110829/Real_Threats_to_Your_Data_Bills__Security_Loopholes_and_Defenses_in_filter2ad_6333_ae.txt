and this should be sufﬁcient for common usage. In case when this
limit is reached, rules can be merged or the new ﬂow is denied.
4.3 Feedback-Based Mischarge Correction
To avoid charge errors, we enable runtime feedback to mini-
mize accounting inaccuracy caused by the open-loop MDC design.
We ﬁrst focus on overcharge, but come back to under-billing later.
Three problems are addressed. (1) When to issue a feedback? (2)
How to use this feedback? (3) How to avoid new threats while
using the feedback from the user?
Runtime feedback is realized through two phases of accounting
alert and correction. The alert phase is to determine whether any
suspicious accounting behavior occurs and determines when to is-
sue a feedback. An alert is triggered when certain event occurs.
These events cover two categories: (1) direct packet drops/losses;
For example, the base station or the gateway observe unsent, unac-
knowledged, or discarded packets for each served UE (e.g., in the
TTL-based attack); and (2) events that might incur packet losses
(e.g., handoff or lost radio connectivity [28]). At the correction
phrase, two mechanisms, mischarge prevention and compensation,
are introduced to handle those two types of events, respectively. If
direct packet losses are observed, the alert with such trafﬁc volume
is sent to the mischarge handler at the gateway (e.g., P-GW), so that
the reported amount is refunded. If suspicious events are detected,
the alert message is sent to the handler. The handler then freezes all
ongoing ﬂows for the UE. They are resumed after the detected sce-
nario disappears. Such designs seek to minimize accounting errors
in MDC while keeping the feedback overhead in check.
Our solution further prevents user cheating behaviors. The cor-
rection function is adopted only in the trustworthy network infras-
tructure while the alert function is enabled on both the UE and net-
work components. The UE is only allowed to report abnormal con-
ditions, but not to submit the refund volume. Therefore, he has no
incentive to cheat, since the only action that he can trigger is to
suspend data ﬂows (via explicit on-demand de-authorization). In
fact, in case of real overcharges, it can be detected and veriﬁed by
the network infrastructure. Note that attackers cannot misuse this
mechanism by reporting that they have not received the packets.
The base station knows exactly what packets have been success-
fully delivered to a mobile phone via its Layer-2 acknowledgments.
Undercharging correction.
The undercharging can also be de-
tected and avoided by the accounting alerter and corrector respec-
tively. It favors mobile users so that the users usually have no in-
centive to help out. User feedback becomes of little value. The
alerting and correction have to reside at the infrastructure side. As-
sume that volume counting does not go wrong. Undercharging is
usually caused by the practice of diversiﬁed charging policy, for
example, free rides via free DNS services [28] or free TCP retrans-
mission [22]. The defense key is to verify whether the ﬂow is a
genuine data service that is eligible for some speciﬁc policy. To
minimize the overhead, alerting is used to ﬁlter out suspicious traf-
ﬁc. For example, an alert is triggered when the free volume reaches
a threshold; the normal trafﬁc portion for DNS and TCP retransmis-
sion is usually very small (<2.5% [19, 22]). The threshold can be
set accordingly. For suspicious ﬂows, deep packet inspection (DPI)
can be further used (certainly, the overhead is big). Once the abuse
is detected, certain action will be taken, such as normal billing,
ﬂow de-authorization, SMS warning, blacklist and etc.. The under-
charging may not be limited to only these two types of trafﬁc due to
charging policy diversity. Technically, others can still be prevented
by our secure framework.
Implementation using 3G/4G mechanisms. We reuse or imple-
ment an additional module for the alerting and correction at the
735infrastructure side. For example, the base station can reuse the
“Unsent Data Volume” ﬁeld [4] to send the feedback to the
gateway. The gateway may need to add one function to record the
dropped packet volume if it is not available. The UE adds event
callback functions to detect suspicious events (e.g., handoff and in-
sufﬁcient coverage). To detect handoffs, the UE exploits the hand-
off request or complete messages received on the RRC (radio re-
source control) layer. To freeze and resume ongoing trafﬁc, we still
reuse Resource Modification Request to communicate
with the gateway.
Note that our solution may require per-ﬂow state, but the over-
head is not big. At most two states for a ﬂow are kept at the gate-
way. A base station does not need to add new per-ﬂow states. It is
to record the volume not sent out per phone. To support user feed-
back, it adds one more state per phone to identify whether the user
reports abnormality. The gateway needs to add two states of sta-
tus and volume per ﬂow. It records whether wrong volume is used
and how much volume should be offset. Our evaluation shows that,
the gateway can process fast enough without incurring much delay,
compared with the current processing of each packet.
4.4 Defense Incentive
As potential victims, mobile users always have incentives to de-
ploy at least the local defense measures (e.g., local detector, event
alerter) to protect themselves. On the operator side, it might be
true that operators have no immediate incentive to ﬁx overcharg-
ing attacks (e.g., spamming, hit-but-no-touch attacks). However,
they are held responsible for ﬁxing the threats since these attacks
do exploit the MDC loopholes in the cellular infrastructure. Users
did nothing wrong (within their capability). Under the pressure of
public disclosure, user complaints and even possible lawsuits, we
believe that operators would deploy defense measures to serve as
responsible carriers.
5. PROTOTYPE AND EVALUATION
We now describe the prototype of our solution, and its evaluation
in a variety of malicious and normal usage scenarios. The results
partially conﬁrm its effectiveness and low overhead.
Prototype.
Figure 13 shows our secure MDC prototype. With-
out access to the operator’s gateways, we deploy a proxy outside
the cellular network to emulate the core gateway. All trafﬁc ﬂows
from the device to the Internet go through this proxy. We imple-
ment all proposed secure components for the UE at the phone, and
other components in the cellular infrastructure (except secure bind-
ing) at the proxy. Without access to Layer-2 information in cellular
networks, we assume that secure binding is already in place. All
the event-triggered functions are implemented by callback func-
tions. The proxy uses a Dell Inspiron 660 machine, which runs
Ubuntu 12.04 on a Intel Core i3 CPU at 3.4GHz and with 4GB
memory. An Android smartphone serves as the UE in our experi-
ments. Speciﬁcially, we develop two modules of fraud detector and
event alerter at the phone. At the proxy, we develop the following
components: (1) charging function, (2) coordinated runtime access
control, (3) event alerter and volume corrector, and (4) mischarging
handler (mainly for overcharging).
Evaluation summary. We assess our solution in various sce-
narios of malicious and normal usages, including three proposed
attacks, two attacks in the literature, as well as an overcharging sce-
nario and two normal settings without attacks. The evaluation vali-
dates the effectiveness of our solution. The system is able to iden-
tify all the spamming attacks and the overcharging occurrences,
containing the charging error within 35 KB (depending on the at-
UE
Gateway
Attacker
OP Network
Server
Coordinated Runtime Access Control
On-demand Explicit De-authorization
Mischarging Handler
Charging 
Function
Fraud Detector
Event Alerter
Event Alerter and Volume Corrector
Figure 13: Secure MDC Prototype.
OP-I
current
w/ Secure MDC
)
B
M
(
g
n
i
g
r
a
h
c
r
e
v
O
)
B
M
(
g
n
i
g
r
a
h
c
r
e
v
O
4
3
2
1
0
4
3
2
1
0
N/A
2K 3K 30K 0K
0K 0K
106K
0K 0K
A
B
C
D
E
F
G
H
OP-II
current
w/ Secure MDC
29K 2K 2K 28K 0K 88K 0K 0K
0K 0K
A
B
C
D
E
F
G
H
The
(min/med/max) overcharging volume
Figure 14:
with/without the secure MDC solution in two carrier net-
works: OP-I (top) and OP-II (bottom).
tack and defense parameters; more details are given later). We also
examine the extra overhead on runtime access control, local de-
tector, alerter and corrector. Note that most mechanisms are event
driven (i.e., on-demand triggered). The results show that our solu-
tion is light-weight and the overhead is usually negligible.
5.1 Defense Effectiveness
We test our prototype in various scenarios. They include four
spamming attacks (two in the literature), two over-accounting cases
and two normal settings without attacks. Speciﬁcally, they are
(A) spamming via MMS, (B) spamming via IP spooﬁng,(C) spam-
ming via Skype [27], (D) spamming via TCP retransmissions (i.e.,
usage-inﬂation attack [22]), (E) Hit-but-no-touch attack, (F) Over-
accounting in insufﬁcient coverage [28], (G) light-trafﬁc setting
(Web browsing), and (H) heavy-trafﬁc setting (Youtube). In (A)-
(F), each test lasts 2 minutes, and we generate 200Kbps downlink
data to the phone. The total trafﬁc volume is 3 MB. For the above
TCP-based spamming threats (A and D), we generate TCP spam
packets via Raw Socket programming. In E, the proxy ﬁrst per-
forms charging and then discards those packets with their TTL be-
ing zero. In F, the UE is carried from one location with good radio
signal to another without signal, and the duration in the no-signal
zone is 1 minute. For comparison purposes, we test two normal us-
age scenarios: reading CNN homepage (∼39 KB) in G and watch-
ing a Youtube video (∼3 MB) in H, both at spots with excellent
coverage. We do not run the free-uplink attack, but assume it is
ﬁxed once secure binding is enforced.
We conﬁgure our defense solution as follows. For the fraud de-
tector at the UE, spamming is inferred under any of the following
conditions: (1) when one ICMP PORT UNREACHABLE packet
(θICM P = 1) is observed, or (2) when the transport-layer packet
dropping exceeds γdrop = 10% or θdrop = 100kbps per ﬂow
within the detection time window (say, 1 second), or (3) when ac-
736cumulative packet dropping exceeds Vdrop = 500 KB per ﬂow. If
either of Conditions (1) and (2) is met, de-authorization is auto-
matically activated. However, to prevent false positives, the device
asks for user feedback when taking actions if Condition (3) is met.
Since we are unable to access the base station, we emulate its event
alert at the gateway. It detects the UE’s status by monitoring the
keep-alive packets periodically generated by the UE, instead of the
Layer-2 ACK packets. When no keep-alive packet is observed for
10 seconds, the alert for insufﬁcient coverage is triggered.
Figure 14 plots the charging volumes with/without our defense
in all scenarios. It conﬁrms that our mechanism successfully de-
fends against malicious abuse and overcharge. For spamming via
IP spooﬁng (B) and Skype (C), the overcharge volume is always
below 3 KB in both carriers. This is because the UE immediately
activates its de-authorization to the gateway when the ﬁrst spam
packet arrives (i.e., an ICMP message is created). The charging er-
rors are only affected by the round-trip time between the UE and
the gateway (mostly below 0.1second in Figure 17). For spamming
via MMS (A) and TCP retransmissions (D), the overcharge errors
are a little larger but still below 30KB. This is because detection
delay is affected by the detection time window (here, 1sec). In the
TTL-based attack (E), the overcharging volume is 0, since the vol-
ume corrector requests the handler to refund the dropped volume.
For insufﬁcient coverage (F), the medium values of overcharging
volume are 106 KB and 88 KB for two operators, respectively. In
fact, such overcharging could be avoided, if the volume corrector
were deployed at the base station, which reports unsent and unac-
knowledged volume. This is not available in our prototype.
Given the set of parameters, we are unable to test all attack
cases. These defense parameters may not be appropriate in all set-
tings. The detection parameters serve as the tuning knob to balance
between false-positive and false-negative errors, as well as detec-
tion delay. For example, the smaller the spam detection threshold,
the more likely the false-positive error; The larger the errors, the
longer the time for detection, the more likely the false-negative er-
ror. These parameters can be conﬁgured as user-speciﬁc proﬁles or
application-adaptive patterns. Our evaluation focuses on validat-
ing the basic mechanism, while leaving ﬁne tuning of parameters
as the future work. Note that, however, no noticeable difference
is observed in case of continuous spamming and large overcharg-
ing errors. Once it imposes nonnegligible damage to the UE, it is
detected. For example, when the adversary reduces the spamming
speed (e.g., <10kbps), it just prolongs the detection duration un-
der the current defense setting. In this case, our defense still limits
the overcharging volume. We also run large numbers of tests for
common usage. We rarely observe ICMP PORT UNREACHABLE
packets and never have relatively large fraction (e.g. 10%) of pack-
ets discarded by the transport layer. Therefore, the false-positive
error hardly occurs. Even in such rare cases, it may still resort to
user decision.
5.2 Defense Overhead and Impact Factors
Our solution incurs both message and processing overhead. The
extra messages come from the fraud detector, the event alert and
the volume corrector, all of which are triggered on-demand. The
message overhead is thus in proportion to the number of abnormal
(suspicious) ﬂows. In the above tests, it never incurs extra messages
in normal usage and introduces 1-2 extra messages per ﬂow under
malicious abuse or abnormal usage.
The processing overhead stems from those lightweight monitor
functions and event-triggered processing components. Under nor-
mal trafﬁc, only those monitor functions run. Figure 15(a) com-
pares the CPU usage at the UE when our defense module is at three
)