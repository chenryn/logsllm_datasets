function randomization (i.e., basic block shuffling without
crossing function boundaries), which removes the need for fine-
grained pointer tracking [16]. Shuffler [51], CodeArmor [15],
and ReRanz [50] route control-flow transfers through an in-
direction mechanism which either simplifies the code pointer
updating problem by isolating code pointers from the rest of
the program’s address space [15, 51], or by enabling on-the-fly
pointer adjustments [50]. RuntimeASLR uses dynamic in-
strumentation tools to generate pointer tracking policies [35].
Morpheus uses memory tagging and a customized RISC-V
processor core to tag code, data, and pointers thereto. Mor-
pheus relies on these tags to periodically rerandomize and
re-encrypt pointers in hardware [23]. OS-level ASR [25] and
TASR [9] are the most similar to CoDaRR since we also
modify the compiler to generate location information for
our masks. Shapeshifter [49] employs rerandomization of the
data layout of “whitelisted” security-critical data objects
and variables. Their rerandomization scheme triggers ran-
domization based on number of accesses to the “whitelisted”
objects. This means, their security policy only applies to (and
protects) this subset of the data plane. In contrast to this,
CoDaRR continuously rerandomizes the masks and updates
all program data accordingly
Other approaches to protecting non-control data include
Data Space Randomization (DSR) [7, 8, 11], Data-Flow In-
tegrity [13, 45], Write Integrity Testing [2], safe language
dialects [21, 29, 37], and memory safety techniques [46].
9 CONCLUSION
Data-only attacks continue to pose significant security chal-
lenges for real-world applications. Consequently, many exploit
mitigations have been proposed in prior work. One of these
mitigations, Data Space Randomization (DSR), diversifies
the memory representation of applications by masking data
values with randomly chosen keys. Unfortunately, we were
able to show that all existing DSR approaches can be by-
passed by leaking keys through direct memory disclosure
or speculative execution attacks. For this reason, we pre-
sented the design of CoDaRR, a novel DSR scheme with a
fully dynamic key schedule. CoDaRR is, to the best of our
knowledge, the first scheme to enable rerandomization of
data memory. CoDaRR can continuously rerandomize pro-
tected applications at periodic randomization intervals, as
well as on-demand using event-based triggers. Our evalua-
tion confirms that CoDaRR is practical, incurring limited
run-time overhead in standard benchmarks, and is able to
handle complex, real-world applications, such as Nginx and
thttpd. Furthermore, CoDaRR is resilient against informa-
tion disclosure attacks, such as our presented attacks based
on memory corruption and speculative execution.
ACKNOWLEDGMENTS
We thank Joshua Cao for helping us automate the evaluation
experiments. This material is based upon work partially sup-
ported by the Defense Advanced Research Projects Agency
under contract FA8750-16-C-0260, by the United States Of-
fice of Naval Research under contract N00014-17-1-2782, and
by the National Science Foundation under award CNS-161921.
Any opinions, findings, and conclusions or recommendations
expressed in this material are those of the authors and do
not necessarily reflect the views of the Defense Advanced
Research Projects Agency or its Contracting Agents, the
Office of Naval Research or its Contracting Agents, the Na-
tional Science Foundation, or any other agency of the U.S.
Government.
REFERENCES
[1] Mart´ın Abadi, Mihai Budiu, ´Ulfar Erlingsson, and Jay Ligatti.
2009. Control-Flow Integrity Principles, Implementations, and
Applications. ACM Trans. Inf. Syst. Secur. 13, 1, Article Article
4, 40 pages. https://doi.org/10.1145/1609956.1609960
[2] P. Akritidis, C. Cadar, C. Raiciu, M. Costa, and M. Castro.
2008. Preventing Memory Error Exploits with WIT. In 2008
IEEE Symposium on Security and Privacy (sp 2008). 263–277.
https://doi.org/10.1109/SP.2008.30
[3] Amogh Akshintala, Bhushan Jain, Chia-Che Tsai, Michael Fer-
dman, and Donald E. Porter. 2019. X86-64 Instruction Usage
among C/C++ Applications. In Proceedings of the 12th ACM
International Conference on Systems and Storage (SYSTOR
’19). 68–79. https://doi.org/10.1145/3319647.3325833
[4] Lars Ole Andersen. 1994. Program analysis and specialization
for the C programming language. Ph.D. Dissertation. University
of Cophenhagen.
[5] Dzintars Avots, Michael Dalton, V Benjamin Livshits, and Mon-
ica S Lam. 2005. Improving software security with a C pointer
analysis. In Proceedings of the 27th international conference on
Software engineering. ACM, 332–341.
[6] Michael Backes, Thorsten Holz, Benjamin Kollenda, Philipp
Koppe, Stefan N¨urnberger, and Jannik Pewny. 2014. You Can Run
but You Can’t Read: Preventing Disclosure Exploits in Executable
Code. In Proceedings of the 2014 ACM SIGSAC Conference on
Computer and Communications Security (CCS ’14). 1342–1353.
https://doi.org/10.1145/2660267.2660378
[7] Brian Belleville, Hyungon Moon, Jangseop Shin, Dongil Hwang,
Joseph M. Nash, Seonhwa Jung, Yeoul Na, Stijn Volckaert, Per
Larsen, Yunheung Paek, and Michael Franz. 2018. Hardware
Assisted Randomization of Data. In Research in Attacks, In-
trusions, and Defenses, Michael Bailey, Thorsten Holz, Manolis
Stamatogiannakis, and Sotiris Ioannidis (Eds.). 337–358.
[8] Sandeep Bhatkar and R. Sekar. 2008. Data Space Randomiza-
tion. In Detection of Intrusions and Malware, and Vulnerability
Assessment, Diego Zamboni (Ed.). 1–22.
[9] David Bigelow, Thomas Hobson, Robert Rudd, William Streilein,
and Hamed Okhravi. 2015. Timely Rerandomization for Miti-
gating Memory Disclosures. In Proceedings of the 22nd ACM
SIGSAC Conference on Computer and Communications Se-
curity (CCS ’15). 268–279. https://doi.org/10.1145/2810103.
2813691
[10] A. Bittau, A. Belay, A. Mashtizadeh, D. Mazi`eres, and D. Boneh.
2014. Hacking Blind. In 2014 IEEE Symposium on Security and
Privacy. 227–242. https://doi.org/10.1109/SP.2014.22
[11] Cristian Cadar, Periklis Akritidis, Manuel Costa, Jean-Phillipe
Martin, and Miguel Castro. 2008. Data randomization. Technical
Report. Technical Report MSR-TR-2008-120, Microsoft Research.
[12] Claudio Canella, Jo Van Bulck, Michael Schwarz, Moritz Lipp,
Benjamin Von Berg, Philipp Ortner, Frank Piessens, Dmitry Ev-
tyushkin, and Daniel Gruss. 2019. A systematic evaluation of
transient execution attacks and defenses. In 28th USENIX Secu-
rity Symposium (USENIX Security 19). 249–266.
[13] Miguel Castro, Manuel Costa, and Tim Harris. 2006. Securing
software by enforcing data-flow integrity. In Proceedings of the 7th
symposium on Operating systems design and implementation.
147–160.
[14] Shuo Chen, Jun Xu, Emre Can Sezer, Prachi Gauriar, and Rav-
ishankar K Iyer. 2005. Non-Control-Data Attacks Are Realistic
Threats. In USENIX Security Symposium. 177–192.
[15] X. Chen, H. Bos, and C. Giuffrida. 2017. CodeArmor: Virtualizing
the Code Space to Counter Disclosure Attacks. In 2017 IEEE
European Symposium on Security and Privacy (EuroS P). 514–
529. https://doi.org/10.1109/EuroSP.2017.17
[16] Yue Chen, Zhi Wang, David Whalley, and Long Lu. 2016. Remix:
On-Demand Live Randomization. In Proceedings of the Sixth
ACM Conference on Data and Application Security and Pri-
vacy (CODASPY ’16). 50–61. https://doi.org/10.1145/2857705.
2857726
[17] Long Cheng, Hans Liljestrand, Md Salman Ahmed, Thomas Ny-
man, Trent Jaeger, N Asokan, and Danfeng Yao. 2019. Exploita-
tion techniques and defenses for data-oriented attacks. In 2019
IEEE Cybersecurity Development (SecDev). IEEE, 114–128.
[18] Mauro Conti, Stephen Crane, Lucas Davi, Michael Franz, Per
Larsen, Marco Negro, Christopher Liebchen, Mohaned Qunaibit,
and Ahmad-Reza Sadeghi. 2015. Losing Control: On the Ef-
fectiveness of Control-Flow Integrity under Stack Attacks. In
Proceedings of the 22nd ACM SIGSAC Conference on Com-
puter and Communications Security (CCS ’15). 952–963. https:
//doi.org/10.1145/2810103.2813671
[19] S. Crane, C. Liebchen, A. Homescu, L. Davi, P. Larsen, A. Sadeghi,
S. Brunthaler, and M. Franz. 2015. Readactor: Practical Code
Randomization Resilient to Memory Disclosure. In 2015 IEEE
Symposium on Security and Privacy. 763–780. https://doi.org/
10.1109/SP.2015.52
[20] Lucas Davi, David Gens, Christopher Liebchen, and Ahmad-
Reza Sadeghi. 2017. PT-Rand: Practical Mitigation of Data-only
Attacks against Page Tables. In Symposium on Network and
Distributed System Security (NDSS).
[21] Archibald Samuel Elliott, Andrew Ruef, Michael Hicks, and David
Tarditi. 2018. Checked C: Making C Safe by Extension. In IEEE
Cybersecurity Development (SecDev).
[22] Tommaso Frassetto, David Gens, Christopher Liebchen, and
Ahmad-Reza Sadeghi. 2017. JITGuard: Hardening Just-in-Time
Compilers with SGX. In Proceedings of the 2017 ACM SIGSAC
Conference on Computer and Communications Security (CCS
’17). 2405–2419. https://doi.org/10.1145/3133956.3134037
[23] Mark Gallagher, Lauren Biernacki, Shibo Chen, Zelalem Birhanu
Aweke, Salessawi Ferede Yitbarek, Misiker Tadesse Aga, Austin
Harris, Zhixing Xu, Baris Kasikci, Valeria Bertacco, and et al.
2019. Morpheus: A Vulnerability-Tolerant Secure Architecture
Based on Ensembles of Moving Target Defenses with Churn. In
Proceedings of the Twenty-Fourth International Conference on
Architectural Support for Programming Languages and Operat-
ing Systems (ASPLOS ’19). 469–484. https://doi.org/10.1145/
3297858.3304037
[24] Jason Gionta, William Enck, and Peng Ning. 2015. HideM: Pro-
tecting the Contents of Userspace Memory in the Face of Disclo-
sure Vulnerabilities. In Proceedings of the 5th ACM Conference
on Data and Application Security and Privacy (CODASPY ’15).
325–336. https://doi.org/10.1145/2699026.2699107
[25] Cristiano Giuffrida, Anton Kuijsten, and Andrew S. Tanenbaum.
2012. Enhanced Operating System Security Through Efficient and
Fine-grained Address Space Randomization. In Presented as part
of the 21st USENIX Security Symposium (USENIX Security 12).
475–490. https://www.usenix.org/conference/usenixsecurity12/
technical-sessions/presentation/giuffrida
[26] Hong Hu, Zheng Leong Chua, Sendroiu Adrian, Prateek Saxena,
and Zhenkai Liang. 2015. Automatic Generation of Data-Oriented
Exploits. In 24th USENIX Security Symposium (USENIX
Security 15). 177–192.
https://www.usenix.org/conference/
usenixsecurity15/technical-sessions/presentation/hu
[27] H. Hu, S. Shinde, S. Adrian, Z. L. Chua, P. Saxena, and Z. Liang.
2016. Data-Oriented Programming: On the Expressiveness of Non-
control Data Attacks. In 2016 IEEE Symposium on Security and
Privacy (SP). 969–986. https://doi.org/10.1109/SP.2016.62
[28] Kyriakos K. Ispoglou, Bader AlBassam, Trent Jaeger, and Mathias
Payer. 2018. Block Oriented Programming: Automating Data-
Only Attacks. In ACM Conference on Computer and Communi-
cations Security (CCS).
[29] Trevor Jim, J Gregory Morrisett, Dan Grossman, Michael W
Hicks, James Cheney, and Yanling Wang. 2002. Cyclone: A Safe
Dialect of C. In USENIX Annual Technical Conference.
[30] Paul Kocher, Jann Horn, Anders Fogh, , Daniel Genkin, Daniel
Gruss, Werner Haas, Mike Hamburg, Moritz Lipp, Stefan Man-
gard, Thomas Prescher, Michael Schwarz, and Yuval Yarom. 2019.
Spectre Attacks: Exploiting Speculative Execution. In IEEE Sym-
posium on Security and Privacy (S&P).
[31] William Landi and Barbara G Ryder. 1991. Pointer-induced alias-
ing: A problem classification. In ACM Symposium on Principles
of Programming Languages (POPL).
[32] Per Larsen, Andrei Homescu, Stefan Brunthaler, and Michael
Franz. 2014. SoK: Automated software diversity. In IEEE Sym-
posium on Security and Privacy (S&P).
[33] Chris Lattner, Andrew Lenharth, and Vikram Adve. 2007. Making
context-sensitive points-to analysis with heap cloning practical for
the real world. In ACM SIGPLAN Conference on Programming
Language Design and Implementation (PLDI).
[34] Fangfei Liu, Yuval Yarom, Qian Ge, Gernot Heiser, and Ruby B
Lee. 2015. Last-level cache side-channel attacks are practical. In
2015 IEEE Symposium on Security and Privacy. IEEE, 605–622.
[35] Kangjie Lu, Wenke Lee, Stefan N¨urnberger, and Michael Backes.
2016. How to Make ASLR Win the Clone Wars: Runtime Re-
Randomization. In Symposium on Network and Distributed Sys-
tem Security (NDSS).
[36] Microsoft. 2006. Data Execution Prevention (DEP). http://
support.microsoft.com/kb/875352/EN-US.
[37] George C Necula, Scott McPeak, and Westley Weimer. 2002.
CCured: Type-safe retrofitting of legacy code. In ACM SIGPLAN
Notices, Vol. 37. ACM.
[38] Taemin Park, Julian Lettner, Yeoul Na, Stijn Volckaert, and
Michael Franz. 2018. Bytecode Corruption Attacks Are Real—
And How to Defend Against Them. In Detection of Intrusions
and Malware, and Vulnerability Assessment, Cristiano Giuffrida,
S´ebastien Bardin, and Gregory Blanc (Eds.). 326–348.
[39] PaX Team. 2001. Address Space Layout Randomization (ASLR).
https://pax.grsecurity.net/docs/aslr.txt.
[40] Colin Percival. 2005. Cache missing for fun and profit.
[41] Ganesan Ramalingam. 1994. The Undecidability of Aliasing.
ACM Transactions on Programming Languages and Systems
(TOPLAS) 16, 5 (1994), 1467–1471.
[42] rinon. 2018. Multicompiler DataRando. https://github.com/
securesystemslab/multicompiler/tree/master/lib/DataRando.
[43] Michael Schwarz, Martin Schwarzl, Moritz Lipp, Jon Masters, and
Daniel Gruss. 2019. NetSpectre: Read Arbitrary Memory over
Network. In Computer Security – ESORICS 2019, Kazue Sako,
Steve Schneider, and Peter Y. A. Ryan (Eds.). 279–299.
[44] Kevin Z. Snow, Fabian Monrose, Lucas Davi, Alexandra
Dmitrienko, Christopher Liebchen, and Ahmad-Reza Sadeghi.
2013. Just-In-Time Code Reuse: On the Effectiveness of Fine-
Grained Address Space Layout Randomization. In IEEE Sympo-
sium on Security and Privacy (S&P).
[45] Chengyu Song, Hyungon Moon, Monjur Alam, Insu Yun, By-
oungyoung Lee, Taesoo Kim, Wenke Lee, and Yunheung Paek.
2016. HDFI: Hardware-assisted data-flow isolation. In IEEE
Symposium on Security and Privacy (S&P).
[46] Dokyung Song, Julian Lettner, Prabhu Rajasekaran, Yeoul Na,
Stijn Volckaert, Per Larsen, and Michael Franz. 2019. SoK: Sani-
tizing for Security. In IEEE Symposium on Security and Privacy
(S&P).
[47] Bjarne Steensgaard. 1996. Points-to analysis in almost linear time.
In ACM Symposium on Principles of Programming Languages
(POPL).
[48] Eran Tromer, Dag Arne Osvik, and Adi Shamir. 2010. Efficient
Cache Attacks on AES, and Countermeasures. Journal of Cryp-
tology (2010).
[49] Ye Wang, Qingbao Li, Zhifeng Chen, Ping Zhang, and Guimin
Zhang. 2019. Shapeshifter: Intelligence-Driven Data Plane Ran-
domization Resilient to Data-Oriented Programming Attacks.
Computers & Security (2019), 101679.
[50] Zhe Wang, Chenggang Wu, Jianjun Li, Yuanming Lai, Xiangyu
Zhang, Wei-Chung Hsu, and Yueqiang Cheng. 2017. Reranz:
A light-weight virtual machine to mitigate memory disclosure
attacks. In International Conference on Virtual Execution En-
vironments (VEE).
[51] David Williams-King, Graham Gobieski, Kent Williams-King,
James P Blake, Xinhao Yuan, Patrick Colp, Michelle Zheng,
Vasileios P Kemerlis, Junfeng Yang, and William Aiello. 2016.
Shuffler: Fast and Deployable Continuous Code Re-Randomization.
In USENIX Symposium on Operating Systems Design and Im-
plementation (OSDI).
[52] Yuval Yarom and Katrina Falkner. 2014. FLUSH+RELOAD: A
High Resolution, Low Noise, L3 Cache Side-Channel Attack. In
USENIX Security Symposium.