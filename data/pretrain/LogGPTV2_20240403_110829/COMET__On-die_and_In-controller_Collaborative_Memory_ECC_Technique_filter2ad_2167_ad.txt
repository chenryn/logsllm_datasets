DBEs. I.e., COMET achieves 99.9997% double-bit error
correction. The step-by-step correction mechanism of DBEs
by COMET is shown in Figure 6. A similar correction
outcome is expected if there is link error instead of single-bit
error in the data signals of the other chips. The probability
of double-bit error striking two different DRAM chips
within the same beat transfer boundary is less than 2×10−10
with BER of 10−4. Therefore, we only consider upto single
bit error in the other DRAM chips.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:36 UTC from IEEE Xplore.  Restrictions apply. 
130
Figure 5: The different scenarios possible when one chip has double-bit error and another chip has single bit error that aligns
in a way leading to multiple DRAM chips modifying data during DBE correction
For example, A[2:0] = “010” would send beat number 2 ﬁrst
followed by beats 3, 0, 1, 6, 7, 4, 5, while A[2:0] = “101”
would send beat 5 ﬁrst followed by beats 6, 7, 4, 1, 2, 3, 0.
The same address bits can be used in our special command
to denote the target beat in which DUE had occurred and
the DRAM device would correct and send data accordingly.
Similarly, in LPDDR4 protocol [13], [20], C[4:0] of the
10-bit column address (C0 to C9) is used to determine the
beat ordering during read operation and can be re-purposed
in our special command to send the target beat number. Also,
both protocols support burst chop, which allows the DRAM
devices to send reduced number of beats during the memory
transaction. Since we need only a single beat post correction
from the DRAMs, the special command can enable burst
chop. In DDR4, BC n is set to LOW for a burst size of 4
beats instead of the standard 8 beats. In LPDDR4, the CA5
pin in the ﬁrst cycle can be set to LOW for the shortest burst
length. For DRAM devices that do not guarantee the COMET-
SEC-DBC construction, the special command to correct
double-bit errors can be turned off in the memory controller.
A. Reliability Evaluation
VI. RESULTS
We evaluate the impact of double-bit errors and silent
data corruption caused by these errors on system-level
reliability through a comprehensive error injection study.
While, in most cases, SDCs corrupt the ﬁnal result or
lead to unexpected crashes and hangs during the run of
an application, some SDCs might get masked and would
eventually have no impact on the ﬁnal output. Since COMET
Figure 6: Step-by-step COMET double-bit error correction
mechanism.
C. Implementation of COMET command
The DBE correction mechanism in COMET requires
the controller to send a special correction command to the
DRAMs to initiate the on-die correction. This command will
need to send the exact beat number during which the DUE
was ﬂagged along with the rest of the column address. In
DDR4/LPDDR4 standards, there are typically one or more
spare command sequences that are reserved for future use
(RFU). One such RFU command sequence can be used to
support this special command.
In Table I we have listed a command sequence for DDR4
and LPDDR4 protocols that can be used for COMET
DBE correction. In DDR4 it will be a single cycle single
command sent on the rising edge of the clock while in
LPDDR4 it will be a multi-cycle multi-command sent on
successive rising clock edges like their standard read/write
operations. In DDR4, address bits A[2:0] determine how
the beats would be ordered when sending the data from a
particular column address [19], [27] during a read operation.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:36 UTC from IEEE Xplore.  Restrictions apply. 
131
Table I: COMET DBE Correction Command Sequence in DDR4 and LPDDR4 protocols
Signals
Clock Edge
COMET special
Signals
COMET special
R1
Signals
Clock Edge
COMET special-1
COMET special-2
R1
R2
R1
R2
Prev. CKE
/Pres. CKE
H
BG[1:0]
BG
CS
H
L
H
L
CS n
L
BA[1:0]
BA
CA0
L
BA0
L
DDR4
ACT n
H
C[2:0]
Valid Signal
LPDDR4
CA1
H
BA1
H
C2 (Target Beat)
C3 (Target Beat)
C4 (Target Beat)
RAS n/A16
CAS n/A15
WE n/A14
L
A12/BC n
L
CA2
L
BA2
L
H
A10/AP
L
CA3
H
C0 (Target Beat)
H
C5
H
A[2:0]
A[13, 11]
Valid Signal
A[9:3]
Target Beat number
Column Address
CA4
L
C9
H
C6
CA5
BL (L)
C1 (Target Beat)
C8
C7
ensures that none of the double-bit errors result in SDC,
our objective is to understand the severity of on-die ECC
induced SDCs in the event of a double-bit error without
COMET in order to evaluate the usefulness of COMET.
We selected a random implementation of a (136, 128) SEC
on-die code that obeys the basic constraints of a Hamming
code and only ensures single-bit error correction. For the
in-controller ECC, we selected a conventional (72, 64) Hsiao
SECDED code [18] that is known to be widely used. Since ap-
proximation tolerant applications are expected to mask SDCs
and be least impacted by them, we used benchmarks from
the AxBench suite [44] for this study. Any standard approx-
imation intolerant application is expected to strictly beneﬁt
more from COMET. We built AxBench against GNU/Linux
for the open-source 64-bit RISC-V (RV64G) instruction set
v2.0 [43] using the ofﬁcial tools [30]. Each benchmark is
executed on top of the RISC-V proxy kernel [41] using the
Spike simulator [42] that we modiﬁed to inject errors. We
use our modiﬁed version of Spike to run each benchmark to
completion 5000 times. During each run, a load operation
is randomly chosen and a double-bit error is injected in a
128-bit word. The 128-bit SEC code decodes the erroneous
codeword ﬁrst, followed by the (72, 64) SECDED decoder.
The chosen SEC and SECDED decoder combination has an
overall 20.65% probability (average calculated across 100,000
random 136-bit codewords) of not ﬂagging a DUE and
resulting in a DBE-induced SDC because of miscorrections.
We observe the effects on program behavior for the cases
where DUE is not ﬂagged and, therefore, corrupted data is
sent over to the processor. The results are shown in Figure 7.
Overall, without COMET, on an average, ∼80% of the
double-bit errors are ﬂagged as DUE while less than 2%
of the times the resulting SDC gets successfully masked by
the application. ∼12%, on an average, result in erroneous
output with a non-negligible impact on output quality and
for the rest of the cases, the program either hangs or crashes.
SEC-COMET or SECDED-COMET code constructions
completely eliminate SDCs converting the unwanted output
errors or crashes in the 18% of cases to more acceptable
DUEs. SEC-COMET-DBC corrects nearly all of these
double-bit errors, i.e., 98% point improvement in DBE
reliability (no improvement in the 2% cases where the
application masks the SDC caused by DBE).
Figure 7: The impact of on-die ECC induced SDC (when
running without SEC-COMET/SECDED-COMET)
in the
event of double-bit error on the program behavior when
running applications from the AxBench suite.
B. Effectiveness of COMET Double-bit Error Correction
We evaluate the reliability of a system with 128GB DRAM
with three different error correction schemes: no on-die ECC,
standard SEC ECC and SEC-COMET-DBC scheme. We used
fault simulator MEMRES [40] with real world ﬁeld data from
[37] and [40]. We took into account scaling induced bit
error rate of 10−4 for this study. Our system has 2 channels,
each containing dual ranked DIMM of 64GB capacity with
18 x8 DRAMs. In all three systems we have considered
in-controller SECDED protection. We perform Monte Carlo
simulations for a 5 year period and consider both undetected
as well as detected-but-uncorrectable errors as system failures.
For details on each failure mode, we refer the reader to [40].
Overall, we see that adding on-die SEC coding signiﬁcantly
helps in improving device failure by 35% over the system
without any on-die coding. The main failure mode that on-die
ECC takes care of is single bit permanent fault intersecting
with a single-bit transient fault(SBT) in the array or the bus.
The SBT in the array is taken care of by the occasional
scrubbing that is enabled in the DRAMs. With scrubbing en-
abled, the DRAM dies, when idle, occasionally activate rows,
check for errors in the row using the on-die SEC mechanism,
correct (if possible) and write the data back. The intersection
with bus faults is taken care by the on-die and in-controller
ECCs. With COMET-SEC-DBC, we can achieve a 8.2%
reduction in system faults over standard SEC, which translates
to more than 150 lesser failures per year. This improvement
in memory resiliency comes from double-bit correction which
helps to reduce single-row failures and single-word failures.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:36 UTC from IEEE Xplore.  Restrictions apply. 
132
SEC-random SEC-best case
168
331.452
512
2.12E-05
165
318.168
508
1.93E-05
SEC-COMET-DBC
(x16)
170
332.91
520
2.12E-05
Table II: Synthesis Results for Different x8 SEC Decoder
Implementations in Commercial 28nm Library
SEC-COMET-DBC
(x8)
170
328.374
517
2.09E-05
Gate Count
Area (μm2)
Latency (ps)
Power (W)
C. Impact on Encoder/Decoder Area, Energy and Latency
COMET code constructions do not require additional
redundancy bits. But the encoder and decoder circuitry
overheads varies based on the exact code implementation. The
added constraints in COMET do not allow simpliﬁcations
that could be done in other SEC codes to reduce
encoder/decoder overheads.
to evaluate our
proposed SEC code overheads, we synthesized few different
SEC implementations along with our construction using
a commercial 28nm library. 1 We considered the SEC
code with the minimum possible sum of the weight of the
columns in the parity check matrix H as the most efﬁcient
implementation in terms of gate count. We also compared
against a random SEC implementation which satisﬁes the
basic Hamming code constraints required for single error
correction. Based on the results in Table II, we see that
the difference in area (<5%), latency (<2.5%) and power
(<9.7%) among the different SEC decoders is minimal and
negligible. Furthermore, on-die ECC consumes a very small
fraction of the overall DRAM active power (∼5-7% [4]).
D. Performance Impact of COMET schemes
In order
SEC-COMET/SECDED-COMET has no performance
impact. SEC-COMET-DBC incurs additional latency only
when a double-bit error occurs. In a system using x8
DDRx protocol based DRAMs with an elevated bit error
rate of 10−4 and on-die (136, 128)SEC-COMET-DBC
mechanism, a double-bit error in a 572-bit memory line
that causes the (72,64)SECDED decoder to ﬂag a DUE can
happen once every ∼17,000 read operations. This is the
probability of DBE occurring within a 136-bit SEC dataword
where both error bits are either in the same 8-bit chunk
belonging to the 64-bit half that is read from the chip or the
mis-corrected bit coincides with one of the two erroneous
bits. Only in this rare case, SEC-COMET-DBC uses
additional cycles to correct the DBE. For all other read/write
operations, SEC-COMET-DBC’s encoding/decoding latency
is comparable to any other on-die SEC code.
To evaluate SEC-COMET-DBC’s DBE correction
mechanism’s impact on performance, we used cycle based
simulation of 18 SPEC CPU 2017 benchmarks [1], 8 Parsec
benchmarks [6] and 4 applications from the GAP suite [5]
on the Gem5 simulator [7]. These are the applications that
we could successfully compile and run using Gem5. We used
a 2GHz single-core processor with a private 32KB I-cache,
64KB D-cache, shared 512KB L2 cache and shared 2MB L3
cache. For once every 17000 read operations, we doubled the
read latency and added worst-case 9 memory cycle penalty
1Though DRAM technology is different compared to logic technology,
the comparison between different implementations should still hold.
for the DBE correction. We evaluated the DDR4-2400-x8
memory conﬁguration with a 64b data channel for 2-billion
instructions. The overall performance impact was less than
0.8% compared to an oracular case with no memory errors.
This is because one additional memory read every 17k reads
is still rare and has negligible impact on queuing delay and
overall execution time. Of course, the impact on overall
performance reduces with reduction in BER (<0.1% for
BER of 10−8). Note that, in absence of SEC-COMET-DBC,
these DBEs would require frequent checkpoint-recovery,
the performance cost of which is extraordinarily high (30
minutes to restore a checkpoint [38]).
VII. DISCUSSION AND RELATED WORK
A. Independent design of on-die and in-controller codes
All three COMET schemes proposed allow within-DRAM
SBE correction that is invisible to the rest of the system.
Two of the schemes (SEC-COMET and SEC-COMET-DBC)
allow independent code constructions by DRAM and CPU
vendors. SEC-COMET and SEC-COMET-DBC require the
DRAM vendors to add constraint(s) while constructing the
on-die SEC. But the CPU vendors can design any SECDED
code independently without requiring any knowledge of
the on-die SEC implementation. We proposed in-controller
SECDED-COMET for
the case where SEC-COMET
construction is not guaranteed by the DRAM vendor.
SECDED-COMET guarantees protection from DBE-induced
SDCs only for those DRAMs that have the on-die SEC
implementation used for SECDED-COMET construction.
B. Why Not Use Stronger On-die Codes?
SECDED code [18] has the ability to detect double-bit
errors, not correct them. Having on-die SECDED would
prevent DBE-induced miscorrections. However, as DRAM
vendors prefer check bits in multiples of 8 [32], the on-die
ECC would be (72, 64)SECDED. This would double the
parity storage overhead from 6.25% in (136, 128) SEC to
12.5%. Even after doubling the parity overhead, the code
will only be capable of avoiding miscorrections due to DBE,
it will not be able to correct the DBE. Our proposed COMET
schemes have the same parity overhead (6.25%) as today’s
on-die SEC code while eliminating all DBE-induced SDCs
and correcting almost all (99.9997%) DBEs. Thus, there is
absolutely no advantage for using 2x higher parity overhead
SECDED over COMET-SEC and hence, is not practical
for DRAM manufacturers to prefer SECDED over SEC-
COMET/SEC-COMET-DBC. On the other hand, double error
correcting requires twice the number of parity bits per 128-bit
of dataword while also signiﬁcantly increasing the latency,
area and power overhead of the encoder/decoder circuitry. As
a result it would negate some of the density scaling beneﬁts.
C. Why Not Use Stronger In-controller ECC?
Using a double-error correcting, triple error detecting
(DECTED) scheme in the memory controller will require
additional storage and data lines to transfer the extra parity
bits. For every 64-bits of dataword, DECTED requires 7