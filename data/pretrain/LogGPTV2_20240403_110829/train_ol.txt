.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br getspent_r (),
.br getspnam_r (),
.br fgetspent_r (),
.br sgetspent_r ():
.nf
    since glibc 2.19:
        _default_source
    glibc 2.19 and earlier:
        _bsd_source || _svid_source
.fi
.sh description
long ago it was considered safe to have encrypted passwords openly
visible in the password file.
when computers got faster and people
got more security-conscious, this was no longer acceptable.
julianne frances haugh implemented the shadow password suite
that keeps the encrypted passwords in
the shadow password database
(e.g., the local shadow password file
.ir /etc/shadow ,
nis, and ldap),
readable only by root.
.pp
the functions described below resemble those for
the traditional password database
(e.g., see
.br getpwnam (3)
and
.br getpwent (3)).
.\" fixme . i've commented out the following for the
.\" moment.  the relationship between pam and nsswitch.conf needs
.\" to be clearly documented in one place, which is pointed to by
.\" the pages for the user, group, and shadow password functions.
.\" (jul 2005, mtk)
.\"
.\" this shadow password setup has been superseded by pam
.\" (pluggable authentication modules), and the file
.\" .i /etc/nsswitch.conf
.\" now describes the sources to be used.
.pp
the
.br getspnam ()
function returns a pointer to a structure containing
the broken-out fields of the record in the shadow password database
that matches the username
.ir name .
.pp
the
.br getspent ()
function returns a pointer to the next entry in the shadow password
database.
the position in the input stream is initialized by
.br setspent ().
when done reading, the program may call
.br endspent ()
so that resources can be deallocated.
.\" some systems require a call of setspent() before the first getspent()
.\" glibc does not
.pp
the
.br fgetspent ()
function is similar to
.br getspent ()
but uses the supplied stream instead of the one implicitly opened by
.br setspent ().
.pp
the
.br sgetspent ()
function parses the supplied string
.i s
into a struct
.ir spwd .
.pp
the
.br putspent ()
function writes the contents of the supplied struct
.i spwd
.i *p
as a text line in the shadow password file format to
.ir stream .
string entries with value null and numerical entries with value \-1
are written as an empty string.
.pp
the
.br lckpwdf ()
function is intended to protect against multiple simultaneous accesses
of the shadow password database.
it tries to acquire a lock, and returns 0 on success,
or \-1 on failure (lock not obtained within 15 seconds).
the
.br ulckpwdf ()
function releases the lock again.
note that there is no protection against direct access of the shadow
password file.
only programs that use
.br lckpwdf ()
will notice the lock.
.pp
these were the functions that formed the original shadow api.
they are widely available.
.\" also in libc5
.\" sun doesn't have sgetspent()
.ss reentrant versions
analogous to the reentrant functions for the password database, glibc
also has reentrant functions for the shadow password database.
the
.br getspnam_r ()
function is like
.br getspnam ()
but stores the retrieved shadow password structure in the space pointed to by
.ir spbuf .
this shadow password structure contains pointers to strings, and these strings
are stored in the buffer
.i buf
of size
.ir buflen .
a pointer to the result (in case of success) or null (in case no entry
was found or an error occurred) is stored in
.ir *spbufp .
.pp
the functions
.br getspent_r (),
.br fgetspent_r (),
and
.br sgetspent_r ()
are similarly analogous to their nonreentrant counterparts.
.pp
some non-glibc systems also have functions with these names,
often with different prototypes.
.\" sun doesn't have sgetspent_r()
.ss structure
the shadow password structure is defined in \fi\fp as follows:
.pp
.in +4n
.ex
struct spwd {
    char *sp_namp;     /* login name */
    char *sp_pwdp;     /* encrypted password */
    long  sp_lstchg;   /* date of last change
                          (measured in days since
                          1970\-01\-01 00:00:00 +0000 (utc)) */
    long  sp_min;      /* min # of days between changes */
    long  sp_max;      /* max # of days between changes */
    long  sp_warn;     /* # of days before password expires
                          to warn user to change it */
    long  sp_inact;    /* # of days after password expires
                          until account is disabled */
    long  sp_expire;   /* date when account expires
                          (measured in days since
                          1970\-01\-01 00:00:00 +0000 (utc)) */
    unsigned long sp_flag;  /* reserved */
};
.ee
.in
.sh return value
the functions that return a pointer return null if no more entries
are available or if an error occurs during processing.
the functions which have \fiint\fp as the return value return 0 for
success and \-1 for failure, with
.i errno
set to indicate the error.
.pp
for the nonreentrant functions, the return value may point to static area,
and may be overwritten by subsequent calls to these functions.
.pp
the reentrant functions return zero on success.
in case of error, an error number is returned.
.sh errors
.tp
.b eacces
the caller does not have permission to access the shadow password file.
.tp
.b erange
supplied buffer is too small.
.sh files
.tp
.i /etc/shadow
local shadow password database file
.tp
.i /etc/.pwd.lock
lock file
.pp
the include file
.i 
defines the constant
.b _path_shadow
to the pathname of the shadow password file.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lb lb lbx
l l l.
interface	attribute	value
t{
.br getspnam ()
t}	thread safety	t{
mt-unsafe race:getspnam locale
t}
t{
.br getspent ()
t}	thread safety	t{
mt-unsafe race:getspent
race:spentbuf locale
t}
t{
.br setspent (),
.br endspent (),
.br getspent_r ()
t}	thread safety	t{
mt-unsafe race:getspent locale
t}
t{
.br fgetspent ()
t}	thread safety	t{
mt-unsafe race:fgetspent
t}
t{
.br sgetspent ()
t}	thread safety	t{
mt-unsafe race:sgetspent
t}
t{
.br putspent (),
.br getspnam_r (),
.br sgetspent_r ()
t}	thread safety	t{
mt-safe locale
t}
t{
.br lckpwdf (),
.br ulckpwdf (),
.br fgetspent_r ()
t}	thread safety	t{
mt-safe
t}
.te
.hy
.ad
.sp 1
in the above table,
.i getspent
in
.i race:getspent
signifies that if any of the functions
.br setspent (),
.br getspent (),
.br getspent_r (),
or
.br endspent ()
are used in parallel in different threads of a program,
then data races could occur.
.sh conforming to
the shadow password database and its associated api are
not specified in posix.1.
however, many other systems provide a similar api.
.sh see also
.br getgrnam (3),
.br getpwnam (3),
.br getpwnam_r (3),
.br shadow (5)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/list.3
.so man3/hypot.3
.so man3/cosh.3
.\" copyright (c) bruno haible 
.\"
.\" %%%license_start(gplv2+_doc_onepara)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\" %%%license_end
.\"
.\" references consulted:
.\"   gnu glibc-2 source code and manual
.\"   dinkumware c library reference http://www.dinkumware.com/
.\"   opengroup's single unix specification http://www.unix-systems.org/online.html
.\"   iso/iec 9899:1999
.\"
.th iswspace 3  2021-03-22 "gnu" "linux programmer's manual"
.sh name
iswspace \- test for whitespace wide character
.sh synopsis
.nf
.b #include 
.pp
.bi "int iswspace(wint_t " wc );
.fi
.sh description
the
.br iswspace ()
function is the wide-character equivalent of the
.br isspace (3)
function.
it tests whether
.i wc
is a wide character
belonging to the wide-character class "space".
.pp
the wide-character class "space" is disjoint from the wide-character class
"graph" and therefore also disjoint from its subclasses "alnum", "alpha",
"upper", "lower", "digit", "xdigit", "punct".
.\" note: unix98 (susv2/xbd/locale.html) says that "space" and "graph" may
.\" have characters in common, except u+0020. but c99 (iso/iec 9899:1999
.\" section 7.25.2.1.10) says that "space" and "graph" are disjoint.
.pp
the wide-character class "space" contains the wide-character class "blank".
.pp
the wide-character class "space" always contains at least the space character
and the control
characters \(aq\ef\(aq, \(aq\en\(aq, \(aq\er\(aq, \(aq\et\(aq, \(aq\ev\(aq.
.sh return value
the
.br iswspace ()
function returns nonzero if
.i wc
is a wide character
belonging to the wide-character class "space".
otherwise, it returns zero.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br iswspace ()
t}	thread safety	mt-safe locale
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2001, posix.1-2008, c99.
.sh notes
the behavior of
.br iswspace ()
depends on the
.b lc_ctype
category of the
current locale.
.sh see also
.br isspace (3),
.br iswctype (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man2/sigpending.2
.so man3/circleq.3
.so man3/updwtmp.3
.so man3/fts.3
.so man3/setbuf.3
.so man3/open_memstream.3
.\" copyright (c) 2007 michael kerrisk 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th bsd_signal 3 2021-03-22 "" "linux programmer's manual"
.sh name
bsd_signal \- signal handling with bsd semantics
.sh synopsis
.nf
.b #include 
.pp
.b typedef void (*sighandler_t)(int);
.pp
.bi "sighandler_t bsd_signal(int " signum ", sighandler_t " handler );
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br bsd_signal ():
.nf
    since glibc 2.26:
        _xopen_source >= 500
.\"    || _xopen_source && _xopen_source_extended
            && ! (_posix_c_source >= 200809l)
    glibc 2.25 and earlier:
        _xopen_source
.fi
.sh description
the
.br bsd_signal ()
function takes the same arguments, and performs the same task, as
.br signal (2).
.pp
the difference between the two is that
.br bsd_signal ()
is guaranteed to provide reliable signal semantics, that is:
a) the disposition of the signal is not reset to the default
when the handler is invoked;
b) delivery of further instances of the signal is blocked while
the signal handler is executing; and
c) if the handler interrupts a blocking system call,
then the system call is automatically restarted.
a portable application cannot rely on
.br signal (2)
to provide these guarantees.
.sh return value
the
.br bsd_signal ()
function returns the previous value of the signal handler, or
.b sig_err
on error.
.sh errors
as for
.br signal (2).
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br bsd_signal ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
4.2bsd, posix.1-2001.
posix.1-2008 removes the specification of
.br bsd_signal (),
recommending the use of
.br sigaction (2)
instead.
.sh notes
use of
.br bsd_signal ()
should be avoided; use
.br sigaction (2)
instead.
.pp
on modern linux systems,
.br bsd_signal ()
and
.br signal (2)
are equivalent.
but on older systems,
.br signal (2)
provided unreliable signal semantics; see
.br signal (2)
for details.
.pp
the use of
.i sighandler_t
is a gnu extension;
this type is defined only if the
.b _gnu_source
feature test macro is defined.
.sh see also
.br sigaction (2),
.br signal (2),
.br sysv_signal (3),
.br signal (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/pow10.3
.\" copyright 2002 walter harms (PI:EMAIL)
.\"
.\" %%%license_start(gpl_noversion_oneline)
.\" distributed under gpl
.\" %%%license_end
.\"
.th csqrt 3 2021-03-22 "" "linux programmer's manual"
.sh name
csqrt, csqrtf, csqrtl \- complex square root
.sh synopsis
.nf
.b #include 
.pp
.bi "double complex csqrt(double complex " z ");"
.bi "float complex csqrtf(float complex " z ");"
.bi "long double complex csqrtl(long double complex " z ");"
.pp
link with \fi\-lm\fp.
.fi
.sh description