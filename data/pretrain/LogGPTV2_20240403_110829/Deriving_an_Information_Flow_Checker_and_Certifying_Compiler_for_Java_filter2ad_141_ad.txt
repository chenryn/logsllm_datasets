ﬁnes the handlers protecting points of the program’s body.
We let T P [i] be the ith instruction in T P and write T P [i..j]
for the subsequence from i to j inclusive. We let PP be
the set of program points, i.e., {1, . . . , N}. A handler is a
triple (cid:16)i, j, t(cid:17); it transfers control to address t if an excep-
tion is thrown by an instruction in the interval [i, j). We de-
ﬁne partial function Handler : PP (cid:3) PP that, given a pro-
gram point in the program’s body, returns its inner-most
handler if it exists.
Type system. The analysis is expressed as an abstract tran-
sition system that is parameterized by a function tregion
deﬁned on program points of branching instructions, i.e.,
on the set PP (cid:3) = {i ∈ PP | T P [i] = ifeq j ∨ T P [i] =
putﬁeld f ∨ T P [i] = getﬁeld f}.
The successor relation (cid:13)→⊆ PP × PP of a program T P
is deﬁned by the clauses:
– if P [i] = goto j, then i (cid:13)→ j;
– if P [i] = ifeq j, then i (cid:13)→ i + 1 and i (cid:13)→ j;
– if P [i] = return, then i has no successors, which we write
– p[i] = throw and Handler(i) = t, then i (cid:13)→ t; otherwise,
– if p[i] = putﬁeld f, or p[i] = getﬁeld f then i (cid:13)→ i + 1, and
– otherwise, i (cid:13)→ i + 1.
i (cid:13)→;
i (cid:13)→;
if Handler(i) = t, then i (cid:13)→ t.
(cid:2)(cid:2) = junc(i);
(cid:2)(cid:2), and i
(cid:2), and i
(cid:2) ∈ tregion(i) or i
(cid:2) = i, then i
(cid:2) ∈ PP (cid:3) ∩ tregion(i) then tregion(i
In Deﬁnition 6 we use the source analysis to give a spe-
ciﬁc tregion function, but the target rules are deﬁned for
any tregion : PP (cid:3) → ℘(PP) and junc : PP (cid:3) (cid:3) PP that re-
spectively compute the control dependence region and the
junction point of an instruction at a given program point,
provided these functions satisfy the following safe over ap-
proximation property (SOAP) [7].
Property 1 (SOAP Property) Let i ∈ PP (cid:3).
(cid:2)(cid:2) ∈
(cid:13)→ i
(cid:2)
– If i
tregion(i) or i
(cid:2)) ⊆
– If i (cid:13)→(cid:2) i
tregion(i);
– If junc(i) is deﬁned, then junc(i) (cid:8)∈ tregion(i) and for all
(cid:2) such that i (cid:13)→(cid:2) i
i
The abstract transition system manipulates stack types,
st, which record the security level of values in the operand
stack, and constrains the security environment, se, which
maps program points to security levels. An abstract tran-
sition, written i (cid:3) st, se ⇒ st
(cid:2)
, se, constrains an instruc-
tion T P [i] and its successor T P [j] where i (cid:13)→ j. The rules
also constrain instructions without successors, i.e., return
and unhandled exceptions.
(cid:2) (cid:13)→(cid:2) junc(i) or junc(i) (cid:13)→(cid:2) i
(cid:2).
(cid:2) then i
Constraints on the transitions prevent bad direct ﬂows
and also indirect ﬂows (by forbidding assignments to low
variables in high regions). The abstract transition rules are
shown in Figure 6.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 05:58:21 UTC from IEEE Xplore.  Restrictions apply. 
Γ(yH ) = H
yH : H
0 : L
Γ(xL) = L
xL : L
xL : H
Γ(yH ) = H
Γ(yH ) = H
1 : L
yH = 0 : H
yH := xL : H , L
yH := 1 : H , L
if yH = 0 then yH = xL else yH := 1 : H , L
new C : L
ﬁeldlevel(fL) = L
3 : L
if yH = 0 then yH = xL else yH := 1 : L , L
new C.fL := 3 : L, L
(cid:2) if yH = 0 then yH := xL else yH := 1 ; new C.fL := 3 : L, L
Figure 5. Derivation for Example 5.1, using high level rules.
Γ(yH ) = H
Γ(xL) = L
yH : H
0 : L
yH = 0 : H
xL : L
xL : H
E(9) ≤ H
1 : L
yH := xL : E
[yH := 1]9 : E
E = liftH (E, sregion(4))
3 : L
new C : L
E(12) ≤ ﬁeldlevel(fL)
E = liftL(E, sregion(12))
sHandler(12) ↑⇒ E(12) = L
[if yH = 0 then yH = xL else yH := 1]4 : E
Γ (cid:2) [if yH = 0 then [yH := xL]6 else [yH := 1]9 ]4; [new C.fL := 3]12 : E
[new C.fL := 3]12 : E
Figure 6. Derivation for Example 5.2, using intermediate rules.
Low assignments in high regions are prevented by the
constraint se = liftk(se, tregion(i)) in the rules for ifeq and
for exception-throwing instructions.
A program T P is typable, denoted (cid:3) T P , if there is an se
such that a dataﬂow analysis based on the abstract transi-
tion system yields a solvable system of constraints on stack
types. Moreover, there is an assignment of stack types st to
program points, such that for all i, j ∈ PP and all ﬂows
i (cid:13)→ j we have i (cid:3) sti, se ⇒ stj, se and if i (cid:13)→ then
i (cid:3) sti, se ⇒. Note, e.g., that getﬁeld has a normal ﬂow
and also an exceptional ﬂow if there is a handler; diﬀer-
ent rules cater to these cases.
The type system presented in this section is very simi-
lar to the one in [7], with the following diﬀerences. First,
there are some simpliﬁcations since we omit method calls
(cf. the rule for return. A second diﬀerence is the con-
straint se = liftk(se, tregion(i)) appearing in the rules (Fig-
ure 7). In the type system of [7], se is not ﬁxed but rather
changed though the abstract transitions, to facilitate calcu-
lating it by data ﬂow algorithms. Here we simplify the sys-
tem by ﬁxing se, since it is derived from E; ﬁxing it clar-
iﬁes the connection between the intermediate type system
and the target type system. (We retain the before/after no-
tation to make it easier to compare the two sets of rules.)
Thirdly, in the type system of [7], types are polyvariant, i.e.
for each program point in the program is assigned a set of
stack types. We do not need polyvariance, since programs
obtained by compilation have the property that operand
stacks at junction points are always empty.
Compilation. Compilation is done by a function, W, from
source programs to target programs. The compiler is based
on [17].
The compilation function from source programs to tar-
get programs W : Prog → Progc is deﬁned from a compila-
tion function on expressions E : Expr → Instr(cid:2), and a com-
pilation function on commands S : Comm → Instr(cid:2). Their
formal deﬁnitions are given in Figure 8. The compilation
of every labeled command includes a primary instruction
—e.g., getﬁeld is the primary instruction for a ﬁeld access
[x := e.f]n— and these are indicated in the deﬁnition of the
compiler. Exception tables are deﬁned in Figure 9. In or-
der to enhance readability, we use :: both for consing an el-
ement to a list and concatenating two lists, and we omit
details of calculating program points (we use pc to repre-
sent current program point) in the clauses for while and if
expressions. We also use # to denote the length of a list.
we deﬁne the compilation W(P ) to be S(c; return e).
For a complete source program P with body c; return e,
We assume label compatibility: the label of a source com-
mand is the same as the label of the program point of the
primary instruction in its compilation, e.g., if getﬁeld is ob-
tained by compilation of [x := e.f]n, its corresponding pro-
gram point in the target program is n. This implies that
LL(cid:3) = PP (cid:3) for a source program and its compilation. The
simplifying assumption loses no generality since source la-
bels can be read oﬀ the compilation (as was done in the ex-
ample just after Deﬁnition 1).
Given the deﬁnition of regions for the source program,
we obtain regions for its compilation as follows.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 05:58:21 UTC from IEEE Xplore.  Restrictions apply. 
E(x) = load x
E(n) = push n
(cid:2)) :: prim op
(cid:2)) = E(e) :: E(e
E(e op e
S(x := e.f) = E(e) :: getﬁeld f :: store x
E(new C) = new C
S(x := e) = E(e) :: store x
S(c1; c2) = S(c1) :: S(c2)
S(while e do c) = let
S(if e then c1 else c2) = let
in
(cid:2)) = E(e
in goto (pc + #lc + 1) :: lc :: le :: ifeq (pc − #lc − #le)
le = E(e); lc = S(c);
le = E(e); lc1 = S(c1); lc2 = S(c2);
le :: ifeq (pc + #lc2 + 2) :: lc2 :: goto (pc + #lc1 + 1) :: lc1
S(e.f := e
S(throw e) = E(e) :: throw
(cid:2)) :: E(e) :: putﬁeld f
S(try c1 catch (X x) c2) = let
in
lc1 = S(c1); lc2 = S(c2);
lc1 :: goto (pc + #lc2 + 1) :: store x :: lc2
S(return e) = E(e) :: return
Figure 8. Compilation function. Primary instructions are underlined.
X (c1; c2) = X (c1) :: X (c2)
X (if e then c1 else c2) = X (c1) :: X (c2);
X (while e do c) = X (c)
X (try c1 catch (X y) c2) = let
lc1 = S(c1); lc2 = S(c2);
in X (c1) :: X (c2) :: (cid:16)1, #lc1 + 1, #lc1 + 2(cid:17)
X ( ) = 
Figure 9. Deﬁnition of exception table.
(cid:2)]n(cid:2)
Deﬁnition 6 (compiler for regions) Suppose [c
is
a branching command in source program SP . Then deﬁne
(cid:2)) to be the union, over all [c]n with n ∈ sregion(n
(cid:2))
tregion(n
(in the source language), of {i..j} where T P [i..j] is the com-
pilation of c. That is, all program points in the compilation
of commands in the (source) region of some branching com-
(cid:2) are included in the (target) region of the
mand with label n
compiled program for the branching instruction n
(cid:2).
Furthermore
• if n
(cid:2) is a command of the form if e then c1 else c2, and
#lc2 is the length of the compilation of command c2, then
(cid:2) + lc2 + 1 ∈ tregion(n) (note that n
(cid:2) + lc2 + 1 corre-
n
sponds to the goto instruction).
• if n
(cid:2)
an exception-throwing
is
command with
(cid:2)) = t, then program points t and t − 1
sHandler(n
corresponding to goto and store instructions in the com-
pilation of a try-catch with label t, are also included in
region of n
(cid:2).
• if n is a while command, then n ∈ tregion(n).
We will use regions for the target language deﬁned as in
Deﬁnition 6 for proofs of preservation, in next section. The
following lemma claims that regions deﬁned as in Deﬁni-
tion 6 have the SOAP property.
Lemma 6.1 Let n ∈ PP (cid:3) be a program point in a target
program P and let tregion(n) be deﬁned as in Deﬁnition 6
from compilation of a command [c]n. Then SOAP holds for
tregion(n).
7. Connecting the intermediate and target
type systems
The main result is that compilation preserves typing.
That is, given a typing derivation for a source program
in the high level system, a corresponding security type for
bytecode can be obtained. We show that the deﬁned secu-
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 05:58:21 UTC from IEEE Xplore.  Restrictions apply. 
T P [i] = push n
i (cid:3) st, se ⇒ se(i) :: st, se
T P [i] = prim op
i (cid:3) k1 :: k2 :: st, se ⇒ k1 (cid:6) k2 (cid:6) se(i) :: st, se
T P [i] = load x
i (cid:3) st, se ⇒ (Γ(x) (cid:6) se(i)) :: st, se
T P [i] = store x se(i) (cid:6) k ≤ Γ(x)
i (cid:3) k :: st, se ⇒ st, se
T P [i] = ifeq j
se = liftk(se, tregion(i))
i (cid:3) k :: st, se ⇒ liftk(st), se
T P [i] = goto j
i (cid:3) st, se ⇒ st, se
T P [i] = return
i (cid:3) k :: st, se ⇒
se(i) (cid:6) k = L
Handler(i) ↑
k ≤ ﬁeldlevel(f)
i (cid:3) k :: k
T P [i] = putﬁeld f
(cid:2)) = L
(se(i) (cid:6) k
(cid:2) :: st, se ⇒ st, se
k (cid:6) se(i) (cid:6) k
T P [i] = putﬁeld f
(cid:2)
Handler(i) = i
se = liftk(cid:2)(se, tregion(i))
(cid:2) :: st, se ⇒ se(i
i (cid:3) k :: k
k (cid:6) se(i) (cid:6) k
se = liftk(cid:2)(se, tregion(i))
(cid:2) ≤ ﬁeldlevel(f)
(cid:2)) :: , se
(cid:2) ≤ ﬁeldlevel(f)
T P [i] = putﬁeld f
Handler(i) ↓
i (cid:3) k :: k
(cid:2) :: st, se ⇒ liftk(cid:2)(st), se
T P [i] = getﬁeld f
(se(i) (cid:6) k) = L
Handler(i) ↑
i (cid:3) k :: st, se ⇒ ﬁeldlevel(f) :: st, se
k ≤ ﬁeldlevel(f)
T P [i] = getﬁeld f
(cid:2)
Handler(i) = i
se = liftk(se, tregion(i))