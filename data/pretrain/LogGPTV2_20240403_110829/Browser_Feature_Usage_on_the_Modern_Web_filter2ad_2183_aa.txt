# Title: Browser Feature Usage on the Modern Web

## Authors:
- Peter Snyder
- Lara Ansari
- Cynthia Taylor
- Chris Kanich

### Contact Information:
{psnyde2, lansar2, cynthiat, ckanich}@uic.edu  
Chicago, IL 60607  
Department of Computer Science  
University of Illinois at Chicago

---

## Abstract
Modern web browsers are incredibly complex, with millions of lines of code and over one thousand JavaScript functions and properties available to website authors. This study investigates how these browser features are used on the modern, open web. We find that JavaScript features vary widely in popularity, with over 50% of provided features never used on the web’s 10,000 most popular sites according to Alexa.

We also examine how popular ad and tracking blockers affect the features used by sites, identifying a set of approximately 10% of features that are disproportionately blocked (prevented from executing by these extensions at least 90% of the time they are used). In the presence of these blockers, over 83% of available features are executed on less than 1% of the most popular 10,000 websites.

Additionally, we measure other aspects of browser feature usage, including the number of features used by websites, the relationship between the age of a browser feature and its usage, and the number of security vulnerabilities associated with related browser features.

---

## 1. Introduction
The web is the world’s largest open application platform. Initially developed for simple document delivery, it has grown to become the most popular way of delivering applications to users. Along with this growth in popularity, there has been a corresponding increase in complexity, as the web has acquired more capabilities over time.

This growth in complexity has been guided by both browser vendors and web standards. Many new web capabilities are provided through new JavaScript APIs (referred to in this paper as features). These capabilities are organized into collections of related features published as standards documents (in this paper, we refer to these collections of APIs as standards).

To maximize compatibility between websites and web browsers, browser vendors rarely remove features from browsers. They aim to provide website authors with new features without breaking sites that rely on older browser features. The result is an ever-growing set of features in the browser.

Many web browser features have been controversial and even actively opposed by privacy and free software activists due to the significant costs imposed on users, such as information leakage or loss of control. For example, the WebRTC standard has been criticized for revealing users’ IP addresses, and protesters have taken to the streets to oppose the Encrypted Media Extensions standard, which gives content owners more control over how their content is experienced within the browser. Such features can prevent users from exerting control over their browsing experience.

While some aspects of web complexity are understood, such as the number of resources web sites request, other aspects remain unclear. These include how much of the available functionality in the browser gets used, by which sites, how often, and for what purposes. Other related questions include whether recently introduced features are as popular as older features, whether popular websites use different features than less popular sites, and how the use of popular extensions, like those that block advertisements and online tracking, impact which browser features are used.

This paper answers these questions by examining the use of browser features on the web. We measure which browser features are frequently used by site authors and which are rarely used by examining the JavaScript feature usage of the ten thousand most popular sites on the web. We find, for example, that 50% of the JavaScript-provided features in the web browser are never used by the ten thousand most popular websites.

We also measure browser feature use in the presence of popular ad and tracking blocking extensions to determine their effect on browser feature use. We find that installing advertising and tracking blocking extensions not only reduces the amount of JavaScript users execute when browsing the web but also changes the kinds of features browsers execute. We identify a set of browser features (approximately 10%) that are used by websites but which ad and tracking blockers prevent from executing more than 90% of the time. Similarly, we find that over 83% of features available in the browser are executed on less than 1% of websites in the presence of these popular extensions.

We have published the data described in this work, including the JavaScript feature usage of the Alexa 10k.

---

## 2. Background
In this section, we discuss the complexity of the modern web browser and the use of ad and tracking blockers.

### 2.1 Modern Web Features
The functionality of modern web browsers has grown to encompass countless use cases. While the core functionality embodied by the combination of HTML, CSS, and JavaScript is largely stable, many features have been added in recent years to enable new use cases. Figure 1 shows the number of standards available in modern browsers, using data from W3C documents and Can I Use. Figure 1 also shows the total number of lines of code for Firefox and Chrome. One relevant point of note in the figure is that in mid-2013, Google moved to the Blink rendering engine, which entailed removing at least 8.8 million lines of code from Chrome related to the formerly-used WebKit engine.

Vendors are very wary of removing features from the browser, even if they are used by a very small fraction of all websites. Because the web is evolving and competing with native applications, browser vendors are incentivized to continue adding new features to the web browser and not remove old features. This is exacerbated by browsers typically having a unified code base across different types of computers, including mobile devices, browser-based computers such as Google Chromebooks, and traditional personal computers.

### 2.2 Ads and Tracking Blocking
Researchers have previously investigated how people use ad blockers. Pujol et al. measured AdBlock usage and discovered that while a significant fraction of web users use AdBlock, most users primarily use its ad-blocking features, rather than its privacy-preserving features.

User tracking is a more insidious aspect of the modern web. Recent work by Radler found that users were much less aware of cross-website tracking than they were about data collection by single sites such as Facebook and Google, and that users who were aware of it had greater concerns about unwanted access to private information than those who weren’t aware. Tracking users' web browsing activity across websites is largely unregulated, and a complex network of mechanisms and businesses has sprung up to provide services in this space. Krishnamurthy and Willis found that the aggregation of user-related data is both growing and becoming more concentrated, i.e., being conducted by a smaller number of companies.

Traditionally, tracking was done via client-side cookies, giving users a measure of control over how much they are tracked (i.e., they can always delete cookies). However, a wide variety of non-cookie tracking measures have been developed that take this control away from users, and these are what tracking blockers have been designed to prevent. These include browser fingerprinting, JavaScript fingerprinting, Canvas fingerprinting, clock skew fingerprinting, history sniffing, cross-origin timing attacks, ever-cookies, and Flash cookie respawning. A variety of these tracking behaviors have been observed in widespread use in the wild.

Especially relevant to our work is the use of JavaScript APIs for tracking. While some APIs, such as Beacon, are designed specifically for tracking, other APIs were designed to support various other functionalities and co-opted into behaving as trackers. Balebako et al. evaluated tools that purport to prevent tracking and found that blocking add-ons were effective.

---

## 3. Data Sources
This work draws on several existing sets of data. This section details how we determined which websites are popular and how often they are visited, the current JavaScript-exposed feature set of web browsers, the web standards these features belong to and when they were introduced, the known vulnerabilities in the web browser, and the browser extensions we used as representative of common browser modifications.

### 3.1 Alexa Website Rankings
The Alexa rankings are a well-known ordering of websites ranked by traffic. Typically, research that uses Alexa relies on their ranked list of the worldwide top one million sites. Alexa also provides other data about these sites, including global and local rankings, breakdowns of which sub-sites are most popular, and monthly visitor counts.

We used the 10,000 top-ranked sites from Alexa’s list of the one-million most popular sites, which collectively represent approximately one-third of all web visits, as representative of the web in general.

### 3.2 Web API Features
We define a feature as a browser capability that is accessible through calling a JavaScript method or setting a property on a JavaScript object.

We determined the set of JavaScript-exposed features by reviewing the WebIDL definitions included in the Firefox version 46.0.1 source code. WebIDL is a language that defines the JavaScript features web browsers provide to web authors. In the case of Firefox, these WebIDL files are included in the browser source.

In the common case, Firefox’s WebIDL files define a mapping between a JavaScript-accessible method or property and the C++ code that implements the underlying functionality. We examined each of the 757 WebIDL files in Firefox and extracted 1,392 relevant methods and properties implemented in the browser.

### 3.3 Web API Standards
Web standards are documents defining functionality that web browser vendors should implement. They are generally written and formalized by organizations like the W3C, though occasionally, standards organizations delegate responsibility for writing standards to third parties, such as the Khronos group, which maintains the current WebGL standard.

Each standard contains one or more features, generally designed to be used together. For example, the WebAudio API standard defines 52 JavaScript features that together allow page authors to do programmatic sound synthesis.

There are also web standards that cover non-JavaScript aspects of the browser (such as parsing rules, tags, and attributes in HTML documents). This work focuses only on web standards that define JavaScript-exposed functionality.

We identified 74 standards implemented in Firefox and associated each with a standards document. We also found 65 API endpoints implemented in Firefox that are not found in any web standard document, which we associated with a catch-all "Non-Standard" categorization.

In the case of extremely large standards, we identify sub-standards, which define a subset of related features intended to be used together. For example, we treat the subsections of the HTML standard that define the basic Canvas API or the WebSockets API as their own standards.

Because these sub-standards have their own coherent purpose, it is meaningful to discuss them independently of their parent standards. Furthermore, many have been implemented in browsers independent of the parent standard (i.e., browser vendors added support for "websockets" long before they implemented the full "HTML5" standard).

Some features appear in multiple web standards. For example, the `Node.prototype.insertBefore` feature appears in the Document Object Model (DOM) Level 1 Specification, DOM Level 2 Core Specification, and DOM Level 3 Core Specification standards. In such cases, we attribute the feature to the earliest published standard.

### 3.4 Historical Firefox Builds
We determined when features were implemented in Firefox by examining the 186 versions of Firefox released since 2004 and testing when each of the 1,392 features first appeared. We treat the release date of the earliest version of Firefox that a feature appears in as the feature’s "implementation date."

Most standards do not have a single implementation date, as it could take months or years for all features in a standard to be implemented in Firefox. We therefore treat the introduction of a standard’s currently most popular feature as the standard’s implementation date. For ties (especially relevant when no feature in a standard is used), we default to the earliest feature available.

### 3.5 Common Vulnerabilities and Exposures (CVEs)
We collected information about browser vulnerabilities by finding all Common Vulnerabilities and Exposures (CVEs) related to Firefox that have been documented in the last three years.

The CVE database lists 470 issues from the last three years that mention Firefox. On manual inspection, we found that 14 of these were not actually issues in Firefox but issues in other web-related software where Firefox was used to demonstrate the vulnerability.

Of the remaining 456 CVEs, we were able to manually associate 111 CVEs with a specific web standard. For example, CVE-2013-0763 describes a potential remote execution vulnerability introduced in Firefox’s implementation of the WebGL standard, and CVE-2014-1577 documents a potential information-disclosing bug related to Firefox’s implementation of the Web Audio API standard.

We note that this work only considers CVEs associated with JavaScript-accessible features and does not include CVEs reporting vulnerabilities in other parts of the browser. For example, if a CVE reported a vulnerability due to the implementation of an SVG-manipulating JavaScript function, we included it in our analysis. If, however, the CVE dealt with some other issue in Firefox’s SVG handling, such as parsing the text of an SVG document, we did not consider it in this work.

### 3.6 Blocking Extensions
Finally, this work draws from commercial and crowd-sourced browser extensions, which are popularly used to modify the browser environment.