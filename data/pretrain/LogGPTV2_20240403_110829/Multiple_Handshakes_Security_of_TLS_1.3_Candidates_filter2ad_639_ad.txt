. stage-l mutual authentication: the keys of stage i are
unauthenticated for i  stage, or testedi = true, then
return ⊥. Otherwise, set stkey,i to revealed and provide the
adversary with Ki.
If there is a tuple (label(cid:2), V , U, role(cid:2), mode, lev, kidV ,
kidU , psd(cid:2)
V,U,k, st(cid:2)
key,
i and stage(cid:2) ≥ i, then
tested(cid:2)) in ListS with sidi = sid(cid:2)
st(cid:2)
key,i is set to revealed as well. This means the i-th session
keys of all partnered sessions (if already established) are
considered revealed too.
exe, stage(cid:2), auth(cid:2), sid(cid:2), cid(cid:2), K(cid:2), st(cid:2)
As above, in the case of stage key dependency, since
subsequent keys in the same session label depend on the
revealed key, we cannot ensure their security anymore (nei-
ther in this session in question, nor in partnered sessions).
Therefore, if label.stkey,i = revealed, set label.stkey,j =
revealed for all j > i, as they depend on the revealed
key. For the same reason, if a partnered session label(cid:2) with
label.sidi = label(cid:2).sidi, then set label(cid:2).stkey,j = revealed
for all j > i. Note that if however label(cid:2).stage > i, then
keys label(cid:2).Kj for j > i derived in the partnered session are
not considered to be revealed by this query since they have
been accepted previously, i.e., prior to Ki being revealed in
this query.
Similarly, in the case of level key dependency, if label(cid:2)
has key dependence on label in stage i and label.stkey,i =
revealed, then set label(cid:2).stkey,1 = revealed. Also, for the
partner session label(cid:2)(cid:2) of session label(cid:2), set label(cid:2)(cid:2).stkey,1 =
revealed.
. Corrupt (U, V , k): Provides (semi) long-term secret key or
pre-shared key to the adversary.
In the case of full handshake mode, V and k will be empty,
and the secret key skU will be provided to the adversary.
No further queries are allowed to sessions owned by U.
In the case of 0-RTT mode, V will be empty, and the
493493
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:15:40 UTC from IEEE Xplore.  Restrictions apply. 
leakage of semi-static key s after the handshake is allowed,
so skU and the k-th semi-static key s will be provided to
the adversary. No further queries are allowed to sessions
owned by U.
In the case of PSK/resumption and PSK/resumption-
(EC)DHE modes, the k-th pre-shared key by U and V will
be provided to the adversary. No further queries are allowed
to resumed sessions owned by U and V .
In the case of not providing forward secrecy, for each
session label owned by U and each stage i, set label.stkey,i
to revealed. In this case, all previous and future session
keys are considered to be disclosed. Speciﬁcally, if the
pre-shared resumption master key is corrupted in some
PSK/resumption session label owned by U and V , then
for each PSK/resumption session label(cid:2) owned by U and
V such that label(cid:2).prelid = label.prelid which means they
share the same resumption master key, and for each stage
i, set label(cid:2).stkey,i = label.stkey,i = revealed.
In the case of stage-j forward secrecy, label.stkey,i is set
to revealed only if i stage. This means that
session keys before the j-th stage as well as keys that have
not yet been established are potentially disclosed.
. Test (label,i): Tests the session key of stage i in the session
with label label. In the security game this oracle is given
a uniformly random test bit btest as state which is ﬁxed
throughout the game.
exe
U,V,k, st(cid:2)
i, but st(cid:2)
exe, stage(cid:2), auth(cid:2), sid(cid:2), cid(cid:2), K(cid:2), st(cid:2)
If there is no tuple (label, U, V , role, mode, lev,
kidU , kidV , psidU,V,k, stexe, stage, auth, sid, cid, K, stkey,
tested) in ListS or if label.stexe (cid:9)= acceptedi, return ⊥. If
there is a tuple (label(cid:2), V , U, role(cid:2), mode, lev, kidV , kidU ,
psid(cid:2)
key, tested(cid:2))
(cid:9)= acceptedi, set the
in ListS with sidi = sid(cid:2)
ﬂag lost = true. This ensures that keys can only be tested
if they have just been accepted but not used yet, including
ensuring that keys can only be tested if they have already
established this key but not used yet.
If label.authi = unauth or if label.authi = unilateral and
label.role = responder, but there is no tuple (label(cid:2), V ,
U, role(cid:2), mode, lev, kidV , kidU , psid(cid:2)
exe, stage(cid:2),
key, tested(cid:2)) (for label (cid:9)= label(cid:2)) in
auth(cid:2), sid(cid:2), cid(cid:2), K(cid:2), st(cid:2)
ListS with cidi = cid(cid:2)
i, then set lost = true. This ensures
that having an honest contributive partner is a prerequisite
for testing responder sessions in an unauthenticated or
unilaterally authenticated stage and for testing an initiator
session in an authenticated stage.
V,U,k, st(cid:2)
to true. If the test bit btest
If label.testedi = true, return Ki, ensuring that repeat-
ed queries will be answered consistently. Otherwise, set
label.testedi
is 0, sample
$←− D at random from the session key distribution
label.Ki
D. This means that we substitute the session key by a
random and independent key which is also used for future
deployments within the key exchange protocol. Moreover, if
there is a tuple (label(cid:2), V , U, role(cid:2), mode, lev, kidV , kidU ,
psid(cid:2)
key, tested(cid:2))
i, also set label(cid:2). Ki ← label. Ki and
in ListS with sidi = sid(cid:2)
exe, stage(cid:2), auth(cid:2), sid(cid:2), cid(cid:2), K(cid:2), st(cid:2)
V,U,k, st(cid:2)
label(cid:2). tested(cid:2)
i = true to ensure consistency in the special
case that both label and label(cid:2) are in stage acceptedi and,
hence, either of them can be tested ﬁrst. Return label.Ki.
Remark 1: Note that in TLS 1.3 tkapp is used to encrypt
the NewSessionTicket, which may violate the key indis-
tinguishability property as in TLS 1.2. However, our model
allows the adversary to test the accepted key only before it
has been used as described above, and thus tkapp used later
can be consistent with the key tested before, which can capture
that problem.
D. Security Deﬁnition
The security properties for multiple handshakes protocols
are split in two games, following Fischlin et al. [22] and
Brzuska et al. [29][34], match security and key secrecy.
Match Security ensures that
the session identiﬁers sid
effectively match the partnered sessions in the sense that
Same mode and same level
1. sessions with the same session identiﬁer for some stage
hold the same session key at that stage,
2. sessions with the different session identiﬁers for some stage
hold the different session keys at that stage,
3. sessions with the same session identiﬁer for some stage
agree on the authentication mode of the stage,
4. sessions with the same session identiﬁer for some stage
share the same contributive identiﬁer at that stage,
5. sessions are partnered with the intended (authenticated)
participant and share the same key index for mutual au-
thentication,
6. session identiﬁers do not match across different stages,
7. at most two sessions have the same session identiﬁer at any
stage,
Across modes
8. session identiﬁers do not match across different protocol
modes, and
Across levels
(semi-static)
9. session identiﬁers do not match across different levels.
Deﬁnition 1 (Match Security). Let MH be a multiple hand-
shakes protocol and A a PPT adversary interacting with MH
via the queries deﬁned in III − C within the following game
MH,A:
GMatch
Setup. The challenger generates
long-term
public/private-key pairs for each participant U ∈ U.
Query. The adversary A receives the generated public
keys and has access to the queries NewSession, Send,
NewTempKey, NewPreshareKey, Reveal, and Corrupt.
Stop. At some point, the adversary stops with no output.
We say that A wins the match security game, denoted by
GMatch