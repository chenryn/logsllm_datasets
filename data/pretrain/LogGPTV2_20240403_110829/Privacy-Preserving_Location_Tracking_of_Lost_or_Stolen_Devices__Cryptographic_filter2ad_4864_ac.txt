We implemented three different location-ﬁnding mech-
anisms: light, medium, and full. The light mechanism
just determines the internal IP address and the externally-
facing IP address. (The latter being the IP as reported by
an external server.) The medium mechanism addition-
ally performs traceroutes to 8 randomly-chosen Planet-
Lab nodes. These traceroutes provide additional infor-
mation about the device’s current surrounding network
topology. The full mechanism employs a protocol that
adapts state-of-the-art geolocationing techniques to our
setting. Here, geolocationing refers to determining (ap-
proximate) physical locations from network data. Tradi-
tional approaches utilize a distributed set of landmarks
to actively probe a target [18]. These probes, combined
with the knowledge of the physical locations of the land-
marks, allows approximate geolocationing of the target.
We ﬂip this approach around, using the active-client na-
ture of our setting to have the client itself ﬁnd nearby
passive landmarks.
Concretely, we utilize Akamai [2] nodes as landmarks:
they are numerous, widespread, and often co-located
within ISPs (ensuring some node is usually very close
to the device). Akamai is purported to have about 25 000
hosts distributed across 69 countries [2]. In a one-time
pre-processing step, we can enumerate as many of their
nodes as possible and then apply an existing virtual net-
work coordinate system, Vivaldi [12], to assign them co-
ordinates. The location-ﬁnding module chooses several
nodes randomly out of this set, probes them to obtain
round-trip times, then uses these values and the nodes’
pre-computed virtual coordinates to determine the de-
vice’s own virtual coordinates. Based on this, the module
determines an additional set of landmarks that are close
to it in virtual coordinate space and issues network mea-
surements (pings and traceroutes) to these close land-
marks. These measurements, in addition to the device’s
current internal- and external-facing IP addresses, are
submitted to the core module as the current location in-
formation. After retrieval, this information can be used
to geolocate the device, by potentially contacting the ISP
hosting the edge routers.
Putting it all together. We describe the Adeona system
in its entirety. A state of the client consists of the main
cryptographic seed, the cache and its seed, and a time
stamp. The main seed is used with an FSPRG to gener-
ate values associated to each state: the DHT indices, an
encryption key, and an inter-update time. It also gener-
ates the next state’s main seed and the next state’s cache
seed. The time stamp represents the time at which the
current state should be used to send location information
to the remote storage.
• (Initialization) The owner initializes the client by
choosing random seeds and recording the time of ini-
tialization as the ﬁrst state’s time stamp. The cache is
ﬁlled with random bits.
• (Active use) The main loop of the client proceeds as
follows. The client, when executed, reads the current
state and retrieves the current time (from, for example,
the system clock). The client then transitions forward
to the state that should be used to send the next update,
based on the current time and the states’ scheduled
send times. The location cache uses its seed to ap-
propriately encrypt each new location update received
from the location module. At the scheduled send time,
the main seed is used to generate several indices and
an encryption key. The latter is used to encrypt the en-
282 
17th USENIX Security Symposium 
USENIX Association
tire cache. The result is inserted into OpenDHT under
each index. The client then transitions to the next state.
This means generating the next state’s seed, the next
state’s cache seed, and the scheduled update time (the
sum of the current update time and the inter-update
delay). The old state data, except the cache, is erased.
• (Retrieval) To perform retrieval, the owner can use his
or her copy of the initial state to recompute the se-
quence of states, their scheduled send times, and their
associated indices and keys. From this information,
he or she can determine the appropriate indices to
search the remote storage (being careful to avoid in-
dices from before the device went missing). After re-
trieving the caches, the owner can decrypt as described
in Section 3.
5 Security Analysis
The Adeona system is designed to ensure location pri-
vacy, while retaining as much as possible the tracking
abilities of solutions that provide weaker or no privacy
properties. While we discuss other security evaluations
and challenges inline in other sections, we treat here sev-
eral key issues.
Location privacy. We discuss privacy ﬁrst. We assume
a privacy set of at least two participating devices, and
do not consider omniscient adversaries that, in particu-
lar, can observe trafﬁc at all locations visited by the de-
vice. (Such a powerful adversary can trivially compro-
mise location privacy, assuming the device uses a persis-
tent hardware MAC address.) The goal of adversaries is
to use the Adeona system to learn more than their a pri-
ori knowledge about some device’s visited locations. Be-
cause updates are anonymous and unlinkable, outsiders
that see update trafﬁc and the storage provider will not
be able to associate the update to a device. The storage
provider might associate updates that are later retrieved
by the owner. This does not reveal anything about other
updates sent by the owner’s device. The randomized
schedule obscures timing-related information that might
otherwise reveal which device is communicating an up-
date. Note also that the landmarks probed in our geolo-
cationing module only learn that some device is prob-
ing them from an IP address. The thief cannot break the
owner’s location privacy due to our forward privacy guar-
antees.
Outsiders and the storage provider do learn that some
device is at a certain location at a speciﬁc time (but not
which device). Also, the number of devices currently us-
ing the system can be approximately determined (based
on the rate of updates received), which could, for ex-
ample, reveal a rough estimate of the number of de-
vices behind a shared IP address. Moreover, these adver-
saries might attempt active attacks. For example, upon
seeing an incoming update, the provider could immedi-
ately try to ﬁnger-print the source IP address [24]. Dis-
tributing the remote storage as with OpenDHT naturally
makes such an attack more difﬁcult to mount. There
are also known preventative measures that mitigate a de-
vice’s vulnerability to such attacks [24]. Finally, all of
this could be protected against by sending updates via a
system like Tor [14] (in deployment settings that would
allow its use), which obfuscates the source IP address.
See Section 8.4.
We remark that custom settings for Adeona’s various
parameters might reduce a device’s privacy set. For ex-
ample, if a client utilizes a cache size distinct from oth-
ers, then this will serve to differentiate that client’s up-
dates. Likewise if a client submits more (or less) copies
of each update to the remote storage, then the storage
provider or outsiders might be able to differentiate its up-
dates from those of other devices. Finally, a rate parame-
ter signiﬁcantly different from other clients’ could allow
tracking of the device.
Device tracking. We now discuss the goal of device
tracking, which just means a system’s ability to en-
sure updates about a missing device are retrieved by the
owner. As mentioned previously, the goal here is for
Adeona to engender the same tracking functionality as
systems with weaker (or no) privacy guarantees. We
therefore do not consider attacks which would also dis-
able a normal tracking system: disabling the client, cut-
ting off Internet access, destroying the device, etc. (Ex-
isting approaches to mitigating these attacks, like clever
software engineering and/or hardware or BIOS support,
are also applicable to our designs.) Nevertheless, Adeona
as described in the previous section does have some lim-
itations in this regard.
• OpenDHT does not provide everlasting persistence.
This means that tracking fails for location updates
more than a week old. Note that the location cache
mechanism can be used to extend this time period.
An alternate remote storage facility could also be used
(see Section 7).
• Adeona schedules its updates at random times. If the
device has Internet access for only a short time, this
means that Adeona could miss a chance to send its
update. We can trivially mitigate this by increasing
the rate of our exponentially-distributed inter-update
times (i.e., increase the frequency of updates), but at
the cost of efﬁciency since this would mean sending
more updates.
• The absolute privacy of retrieval relies on the device
having a clock that the owner is loosely synchro-
nized against. The client relies on the system clock
to schedule updates. The thief could abuse this by,
USENIX Association  
17th USENIX Security Symposium 
283
for example, forcing the device’s system clock to not
progress.
In the current implementation this would
disrupt sending updates. Solutions for this are dis-
cussed in Section 8.1.
• Adeona relies on a stored state, and a thief could dis-
able Adeona by tampering with it. For example, ﬂip-
ping even a single bit of the state will make all future
updates unrecoverable. To ensure that the thief has to
disable the client itself (and not just modify its state)
we can use a tamper-evident FSPRG in conjunction
with a “panic” mode of operation. See Sections 8.2
and 8.3.
For some of these bullets, we recall that many thieves
will be unsophisticated. Therefore, in the common case
the likelihood of the above attacks are small. (And, in-
deed, a sophisticated attacker could also compromise the
tracking functionality of existing commercial, central-
ized alternatives.)
We also brieﬂy mention that Adeona, like existing
tracking systems, might not compose with some other
mobile device security tools. For example, using a secure
full-disk encryption system could render all software on
the system unusable, including tracking software. We
leave the question of how to securely combine tracking
with other security mechanisms to future work.
Finally, while not a primary goal of our design, it turns
out that Adeona’s privacy mechanisms can actually im-
prove tracking functionality. For one, the authentication
of updates provided by our encryption mode means the
owner knows that any received update was sent using
the keys on the device, preventing in-transit tampering
by outsiders or the storage provider. That updates are
anonymous makes targeted Denial-of-Service attacks —
in which the storage provider or an outsider attempts to
selectively block or destroy an individual’s updates —
exceedingly difﬁcult, if not impossible.
6
Implementation and Evaluation
To investigate the efﬁciency and practicality of our
system, we have implemented several versions of the
Adeona system as user-land applications for both Linux
and Mac OS X. In all the versions, we used AES to im-
plement the FSPRG. Encryption was performed using
AES in counter mode and HMAC-SHA1 [3] in a stan-
dard Encrypt-then-MAC mode [4]. The OpenSSL crypto
library8 provided implementations of these primitives.
We note that HMAC was used for convenience only;
an implementation using AES for message authentica-
tion would also be straightforward. The rpcgen compiler
was used to generate the client-side stubs for OpenDHT’s
put-get interface over the Sun RPC protocol. We also
used Perl scripts to facilitate installation. We focus on
three main versions.
• adeona-0.2.1 implements the core functionality de-
scribed in Sections 3 and 4.
It uses the medium
location-ﬁnding module of Section 4. The source
code for adeona-0.2.1, not including the libraries men-
tioned above, consists of 7 091 lines of unoptimized C
code. (Count includes comments and blank lines, i.e.
calculated via wc -l *.[ch].) This version is being read-
ied for public release.
• adeona-0.2.0 is a slightly earlier version of adeona-
0.2.1 that differs in that it uses a simpler version of
the forward-private location cache. Its cache only han-
dles locations observed during scheduled updates (as
opposed to more frequent checks for a change in lo-
cation, meaning that locations could be missed if ill-
timed). The source code for adeona-0.2.0 consists of
5 231 lines of unoptimized C code. This version was
deployed in the ﬁeld trial described in Section 6.3.
• adeona-0.1 uses the same ciphertext cache mech-
anism as adeona-0.2.0, and additionally includes
the tamper-evident FSPRG that will be described in
Section 8.2, the panic mode that will be described in
Section 8.3, and the full location-ﬁnding mechanism
described in Section 4. The tamper-evident FSPRG
is implemented using the signature scheme associated
to the Boneh-Boyen identity-based encryption (IBE)
scheme [7] and the anonymous IBE scheme is imple-
mented using Boneh-Franklin [8] in a hybrid mode
with the Encrypt-then-MAC scheme described above.
The two schemes rely on the same underlying elliptic
curves that admit efﬁciently computable bilinear pair-
ings. It relies on the Stanford Pairings-Based Crypto
(PBC) library version 0.4.11 [25] and speciﬁcally the
“Type F” pairings. Not counting the PBC library, this
version is implemented in 9 723 lines of C code.
The oldest version was mainly for experimenting with
the extensions discussed in Section 8 and the new geolo-
cation technique discussed in Section 4, while the newer
two versions were largely re-writes to prepare for public
use. The source code for any version is directly available
from the authors.
6.1 Performance
We ran several benchmarks to gauge the performance of
our design mechanisms. The system hosting the experi-
ments was a dual-core 3.20 GHz Intel Pentium 4 proces-
sor with 1GB of RAM. It was connected to the Internet
via a university network.
Basic network operations. Table 2 gives the Wall-clock
time in milliseconds (calculated via the gettimeofday sys-
tem call) to perform each basic network operation: an
OpenDHT put of a 1024-byte payload, an OpenDHT
284 
17th USENIX Security Symposium 
USENIX Association
Put
Get
Min
207
2
Mean Median
1 021
240
470
77
Loc medium
Loc full
5 642
17 446
13 270
36 802
15 531
36 197
Max
11 463
11 238
30 381
63 916
T/O
2
3
–
–
Table 1: Wall clock time in milliseconds/operation to per-
form basic network operations: DHT put, DHT get, a medium
location-ﬁnding operation, and a full location-ﬁnding opera-
tion.
adeona-0.2.1
Owner state
Client state (light)
Update (light)
Client state (medium)
Update (medium)
r = 0
75
75
36
75
1 348
r = 10
r = 100
75
876
400
75
8 076
4000
27 116
13 520
270 476
135 200
adeona-0.1
Owner state
Client state (full)
Update (full)
r = 0
3 544
1 779
1 452
r = 10
3 545
30 824
14 520
r = 100
3 548
292 184
145 200
Table 2: Typical sizes in bytes of state and update data used by
adeona-0.2.1 and adeona-0.1 on a 32-bit system, for different
sizes of the ciphertext cache speciﬁed by r.
get of a 1024-byte payload, the time to do the 8 tracer-
outes used in the medium location-ﬁnding mechanism,
and the time to do the full location-ﬁnding operation (as
described in Section 4). Each operation was performed
100 times; shown is the min/mean/median/max time over
the successful trials. The number of time outs (failures)
for the put trials and get trials are shown in the column
labeled T/O. The time out for OpenDHT RPC calls was
set to 15 seconds in the implementation. For the location
mechanisms, hop timeouts for traceroutes and timeouts
for pings were set to 2 seconds (here an individual probe
time out does not signify failure of the operation).
Space utilization. Table 2 details the space requirements
in bytes of adeona-0.2.1 (adeona-0.2.0 has equivalent
sizes) with light and medium location mechanisms and
adeona-0.1 with the full location mechanism. Here, and
below, the parameter r speciﬁes the size of the cipher-
text cache used. When r = 0 this means that no cache
was used (only the current location is inserted during an
update). For ease-of-use (i.e., so one can print out or
copy down state information) we encoded all persistently
stored data in hex, meaning the sizes of stored state are
roughly twice larger than absolutely necessary. The use
of asymmetric primitives by adeona-0.1 for the tamper-
evident FSPRG functionality and the IBE scheme ac-
count for its larger space utilization.
Microbenchmarks. Space constraints limit the amount
of data we can report, and so our focus here is on adeona-
0.1. It uses more expensive cryptographic primitives (el-
liptic curves supporting bilinear pairings), and we want
to assess whether the extensions relying on them hinder
performance signiﬁcantly. Table 3 gives running times
in milliseconds/operation for the basic operations used
by adeona-0.1.