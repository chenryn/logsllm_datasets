**Author: Hcamael@Knownsec 404 Team**  
**Chinese Version:**
# Overview
Last Week, Linux fixes 4 kernel CVE vulnerabilities[1]. Among them,
CVE-2019-11477 makes me feel like a very powerful Dos vulnerability. However,
because there are other things interrupted, my research progress is slower.
For now, there have been some related analysis article in the Internet.[2][3]
In the process of trying to reproduce the CVE-2019-11477 vulnerability, I
encountered a problem in setting the MSS in the first step, and I could not
achieve the expected results. However, the current published analytical
article did not elaborate on this part. So this article will analyze the MSS
mechanism of TCP through the Linux kernel source code.
# Test Environment
##### 1\. Targets with Vulnerabilities
OS: Ubuntu 18.04
Kernel: 4.15.0-20-generic
IP address: 192.168.11.112
Kernel Source Code:
    $ sudo apt install linux-source-4.15.0
    $ ls /usr/src/linux-source-4.15.0.tar.bz2
Kernel Binary with symbols:
    $ cat /etc/apt/sources.list.d/ddebs.list
    deb http://ddebs.ubuntu.com/ bionic main
    deb http://ddebs.ubuntu.com/ bionic-updates main
    $ sudo apt install linux-image-4.15.0-20-generic-dbgsym
    $ ls /usr/lib/debug/boot/vmlinux-4.15.0-20-generic
Close Kernel Address Space Layout Randomization(KALSR):
    # because the Kernel is started by grup，we can modify grup config to add "nokaslr" to kernel started argv.
    $ cat /etc/default/grub |grep -v "#" | grep CMDLI
    GRUB_CMDLINE_LINUX_DEFAULT="nokaslr"
    GRUB_CMDLINE_LINUX=""
    $ sudo update-grub
Use Nginx for testing:
    $ sudo apt install nginx
##### 2\. Host
OS: MacOS
Wireshark: Capture traffic
VM: VMware Fusion 11
Use VM to Deubg Linux:
    $ cat ubuntu_18.04_server_test.vmx|grep debug
    debugStub.listen.guest64 = "1"
Compile gdb：
    $ ./configure --build=x86_64-apple-darwin --target=x86_64-linux --with-python=/usr/local/bin/python3
    $ make
    $ sudo make install
    $ cat .zshrc|grep gdb
    alias gdb="~/Documents/gdb_8.3/gdb/gdb"
Use gdb for remote debug：
    $ gdb vmlinux-4.15.0-20-generic
    $ cat ~/.gdbinit
    define gef
    source ~/.gdbinit-gef.py
    end
    define kernel
    target remote :8864
    end
##### 3\. Attacker
OS: Linux
IP Address: 192.168.11.111
If you're accustomed to Python, install a Scapy to send TCP package.
# Customize SYN MSS Option
There are three ways to set the MSS value of the TCP SYN packet.
##### 1\. iptable
    # Add rules
    $ sudo iptables -I OUTPUT -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --set-mss 48
    # delete rules
    $ sudo iptables -D OUTPUT -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --set-mss 48
##### 2\. ip route
    # show router information
    $ route -ne
    $ ip route show
    192.168.11.0/24 dev ens33 proto kernel scope link src 192.168.11.111 metric 100
    # modify route table
    $ sudo ip route change 192.168.11.0/24 dev ens33 proto kernel scope link src 192.168.11.111 metric 100 advmss 48
##### 3\. use scapy to send packet
PS: Using Scapy to send TCP packet needs ROOT permissions.
    from scapy.all import *
    ip = IP(dst="192.168.11.112")
    tcp = TCP(dport=80, flags="S",options=[('MSS',48),('SAckOK', '')])
The "S" in the flags option indicates "SYN"; "A" indicates "ACK" and "SA"
indicates "SYN, ACK".
The TCP options table that can be set via Scapy is as follows:
    TCPOptions = (
    { 
        0 : ("EOL",None),
        1 : ("NOP",None),
        2 : ("MSS","!H"),
        3 : ("WScale","!B"),
        4 : ("SAckOK",None),
        5 : ("SAck","!"),
        8 : ("Timestamp","!II"),
        14 : ("AltChkSum","!BH"),
        15 : ("AltChkSumOpt",None),
        25 : ("Mood","!p"),
        254 : ("Experiment","!HHHH")
    },
    { 
        "EOL":0,
        "NOP":1,
        "MSS":2,
        "WScale":3,
        "SAckOK":4,
        "SAck":5,
        "Timestamp":8,
        "AltChkSum":14,
        "AltChkSumOpt":15,
        "Mood":25,
        "Experiment":254
    })
But there will be a problem after sending a SYN package with Python: kernel
will automatically send a RST packet. After checking some papers, it's found
out that:
> Since you haven't completed the full TCP handshake, your operating system
> might try to take control and start sending RST(reset) packets.
The solution is to use iptable to filter the RST package:
    $ sudo iptables -A OUTPUT -p tcp --tcp-flags RST RST -s 192.168.11.111 -j DROP
# In-depth Research of the MSS Mechanism
The details of the vulnerability have been analyzed in many other articles.
Here is a brief summary that the vulnerability is a uint16 integer overflow:
    tcp_gso_segs uint16
    tcp_set_skb_tso_segs:
    tcp_skb_pcount_set(skb, DIV_ROUND_UP(skb->len, mss_now));
    skb->len the largest value is 17 * 32 * 1024
    mss_now minimum value is 8
    >>> hex(17*32*1024//8)
    '0x11000'
    >>> hex(17*32*1024//9)
    '0xf1c7'
Therefore, an integer overflow will occur only when mss_now is less than or
equal to 8.
Having conducted the following test, I met a problem.
Having set the MSS value to 48 via `iptables/iproute` command , the attack
machine uses curl to request the HTTP service of the Target machine, and then
the Host use wireshark to capture traffic. It is found that the HTTP packet
returned by the server is divided into small blocks, but it's only as small as
36, and my expected value is 8.
At this time, I chose to analyse and debug Linux Kernel source code to sort
out the reason why the MSS failed to reach my expected value, and what
happened during the process of setting the MSS value in the SYN packet to
mss_now in the code.
Backtrack the overflow function `tcp_set_skb_tso_segs`:
    tcp_set_skb_tso_segs  tcp_sync_mss:
    mss_now = tcp_mtu_to_mss(sk, pmtu);
    tcp_mtu_to_mss:
    /* Subtract TCP options size, not including SACKs */
    return __tcp_mtu_to_mss(sk, pmtu) -               (tcp_sk(sk)->tcp_header_len - sizeof(struct tcphdr));
    __tcp_mtu_to_mss:
    if (mss_now < 48)
        mss_now = 48;
    return mss_now;
Having read the part of the source code, we will have a deeper understanding
of the meaning of MSS. Firstly, we need know the TCP protocol.
The TCP protocol includes protocol headers and data. The protocol header
includes fixed-length 20-byte and 40-byte optional parameters. That is to say,
the TCP protocol header has a maximum length of 60 bytes and a minimum length
of 20 bytes.
The `mss_now` in the `__tcp_mtu_to_mss` function is the MSS set for SYN
package, from which we can see that the minimum MSS is 48. Through the
understanding of the TCP protocol as well as the code, we can know about the
MSS in the SYN packet. The minimum value of 48 bytes indicates that the TCP
header optional parameter has a maximum length of 40 bytes and the minimum
length of data is 8 bytes.
But `mss_now` in the source code represents the length of the data, then let's
look at the calculation formula of the value.
tcphdr struct：
    struct tcphdr {
        __be16  source;
        __be16  dest;