### Alarm Compression and Correlation in Telecommunication Networks

The final compression rate achieved by the system is 590,307 alarms, which represents an 87.9% reduction from the original 4,481,273 alarms. This significant reduction can greatly decrease the workload for network operators.

To provide context, the compression achieved using alarm correlation rules was compared with that obtained using rules found by AABD (Alarm Analysis Based on Dependency). While the proposed framework can identify three main types of rules (cross-domain, cross-device, and single-device), AABD only finds single-device rules in the RAN (Radio Access Network) domain. Therefore, the comparison was made using only single-device rules. Using AABD, 39,603 alarms were removed, whereas 44,548 alarms were removed using the proposed framework. This indicates that the proposed method removes 12.5% more alarms than AABD for single-device compression.

If the other types of rules identified by the proposed framework are also utilized, a much greater compression can be achieved. For example, if cross-domain rules are used, the proposed framework removes 162,744 alarms, which is 123,141 more than AABD. If both cross-domain and cross-device rules, as well as single-device rules from all domains (not just RAN), are utilized, 284,463 more alarms are removed compared to AABD. It is worth noting that AABD could potentially be used to find rules in other domains, but such rules were not provided.

#### Table 3: Remaining Alarms Count After Applying Each Compression Procedure

| Compression Procedure | Remaining Alarms Count |
|-----------------------|------------------------|
| Original alarms count  | 6,199,650 (100%)       |
| Available alarms on topology | 4,481,273 (72.2%)   |
| After pre-processing   | 992,966 (16.0%)        |
| After cross-domain compression | 874,770 (14.1%)   |
| After cross-device compression | 756,316 (12.2%)   |
| After single-device compression (microwave domain) | 634,855 (10.2%) |
| After single-device compression (RAN domain) | 590,307 (9.5%) |

### Conclusion

To discover interesting correlations between triggered alarms in telecommunication networks, we modeled the network as a dynamic attributed graph where alarms are viewed as device (node) attributes. A framework was designed to extract correlation rules for a single device, between different devices, and across different domains. For this, a novel correlation measure named ACOR (Alarm CORrelation) was developed. By considering the network topology, the rules can reveal relationships between alarms that were not found by previous approaches. The solution was applied to data from a large telecommunication network, and it was found that the patterns can provide greater alarm compression than the state-of-the-art AABD system. This reduces the number of alarms to be analyzed by network operators, thereby lowering the costs of network maintenance. In future work, we plan to extract more complex graph-based patterns to reveal other types of interesting information from network alarm logs and design distributed algorithms for processing very large alarm logs.

### References

1. Dusia, A., Sethi, A.S.: Recent advances in fault localization in computer networks. IEEE Commun. Surv. Tutor. 18(4), 3030–3051 (2016)
2. Ding, J., Kramer, B., Xu, S., Chen, H., Bai, Y.: Predictive fault management in the dynamic environment of IP networks. In: 2004 IEEE International Workshop on IP Operations and Management, pp. 233–239 (2004)
3. Wang, J., et al.: Efficient alarm behavior analytics for telecom networks. Inf. Sci. 402, 1–14 (2017)
4. Costa, R., Cachulo, N., Cortez, P.: An intelligent alarm management system for large-scale telecommunication companies. In: Lopes, L.S., Lau, N., Mariano, P., Rocha, L.M. (eds.) EPIA 2009. LNCS (LNAI), vol. 5816, pp. 386–399. Springer, Heidelberg (2009). https://doi.org/10.1007/978-3-642-04686-5_32
5. Klemettinen, M., Mannila, H., Toivonen, H.: Rule discovery in telecommunication alarm data. J. Netw. Syst. Manage. 7(4), 395–423 (1999)
6. Hatonen, K., Klemettinen, M., Mannila, H., Ronkainen, P., Toivonen, H.: TASA: telecommunication alarm sequence analyzer or how to enjoy faults in your network. In: Proceedings of NOMS 1996 - IEEE Network Operations and Management Symposium, vol. 2, pp. 520–529. IEEE (1996)
7. Lozonavu, M., Vlachou-Konchylaki, M., Huang, V.: Relation discovery of mobile network alarms with sequential pattern mining. In: 2017 International Conference on Computing, Networking and Communications (ICNC), pp. 363–367. IEEE (2017)
8. Mannila, H., Toivonen, H., Verkamo, A.I.: Discovering frequent episodes in sequences. In: Proceedings of 1st International Conference on Knowledge Discovery and Data Mining (1995)
9. Ao, X., Shi, H., Wang, J., Zuo, L., Li, H., He, Q.: Large-scale frequent episode mining from complex event sequences with hierarchies. ACM Trans. Intell. Syst. Technol. (TIST) 10(4), 1–26 (2019)
10. Fournier-Viger, P., Wang, Y., Yang, P., Lin, J.C.-W., Yun, U.: TKE: mining top-K frequent episodes. In: Proceedings of 33rd International Conference on Industrial, Engineering and Other Applications of Applied Intelligent Systems, pp. 832–845 (2020)
11. Luna, J.M., Fournier-Viger, P., Ventura, S.: Frequent itemset mining: a 25 years review. Wiley Interdisc. Rev. Data Min. Knowl. Disc. 9(6), e1329 (2019)
12. Pei, J., et al.: Mining sequential patterns by pattern-growth: the PrefixSpan approach. IEEE Trans. Knowl. Data Eng. 16(11), 1424–1440 (2004)
13. Truong, T., Duong, H., Le, B., Fournier-Viger, P.: FMaxCloHUSM: an efficient algorithm for mining frequent closed and maximal high utility sequences. Eng. Appl. Artif. Intell. 85, 1–20 (2019)
14. Tsang, S., Koh, Y.S., Dobbie, G.: Finding interesting rare association rules using rarepatterntree. Trans. Large-Scale Data Knowl. Centered Syst. 8, 157–173 (2013)
15. Liu, F., Deng, Y.: Determine the number of unknown targets in Open World based on Elbow method. IEEE Trans. Fuzzy Syst. (2020)
16. Kaytoue, M., Pitarch, Y., Plantevit, M., Robardet, C.: Triggering patterns of topology changes in dynamic graphs. In: IEEE/ACM International Conference on Advances in Social Networks Analysis and Mining (ASONAM 2014) (2014)
17. Fournier-Viger, P., et al.: A survey of pattern mining in dynamic graphs. Wiley Interdisc. Rev. Data Min. Knowl. Disc. 10, e1372 (2020)
18. Fournier-Viger, P., Cheng, C., Cheng, Z., Lin, J.C.W., Selmaoui-Folcher, N.: Finding strongly correlated trends in dynamic attributed graphs. In: International Conference on Big Data Analytics and Knowledge Discovery, pp. 250–265 (2019)
19. Desmier, E., Plantevit, M., Robardet, C., Boulicaut, J.F.: Granularity of co-evolution patterns in dynamic attributed graphs. In: International Symposium on Intelligent Data Analysis, pp. 84–95 (2014)

### Resource Sharing in Public Cloud Systems with Evolutionary Multi-agent Artificial Swarm Intelligence

**Authors:**
- Beiran Chen¹
- Yi Zhang²
- George Iosifidis¹

**Affiliations:**
- ¹ Trinity College Dublin, Dublin, Ireland
- ² Huawei Technologies, Dublin, Ireland

**Abstract:**

Artificial Intelligence for IT Operations (AIOps) is an emerging research area for public cloud systems. Research topics in AIOps have expanded from robust and reliable systems to general cloud resource allocation. In this paper, we propose a resource sharing scheme between cloud users to minimize resource utilization while guaranteeing Quality of Experience (QoE) for the users. We utilize the concept of recently emerged Artificial Swarm Intelligence (ASI) for resource sharing between users, using AI-based agents to mimic human user behaviors. Additionally, with the variation of real-time resource utilization, the swarm of agents share their spare resources with each other according to their needs and Personality Traits (PT).

In this paper, we first propose and implement an Evolutionary Multi-robots Personality (EMP) model, which considers the constraints from the environment (resource usage states of the agents) and the evolution of two agents' PT at each sharing step. We then implement a Single Evolution Multi-robots Personality (SEMP) model, which only evolves the agents' PT and neglects the resource usage states. For benchmarking, we also implement a Nash Bargaining Solution Sharing (NBSS) model, which uses game theory but does not involve PT or risks of usage states. The objective of our proposed models is to ensure all agents get sufficient resources while reducing the total amount of excessive resources. The results show that our EMP model performs the best, with the least iteration steps leading to convergence and the best resource savings.

**Keywords:**
- Artificial Swarm Intelligence
- AIOps
- Resource sharing
- Reinforcement learning

### 1. Introduction

Artificial Intelligence for IT Operations (AIOps) has become one of the most industrial-favorite research areas in recent years, especially in public cloud systems. The scope of AIOps has extended from conventional fault monitoring and recovery problems to the optimization of cloud resources, i.e., avoiding sub-optimal resource utilization and preventing potential failures related to it. In public cloud services, cloud hardware resources, such as CPU, memory, disk, and networking, are virtualized before being provided to customers. These virtualized resources are abstracted as one layer above the physical infrastructure layer and exposed to the customers. With this resource virtualization, customers worldwide share the same pool of resources in the cloud. In public cloud, customer usage patterns are highly dynamic and asynchronous because customers are located in different time zones. Therefore, there are opportunities for cloud operators (IT operation teams) to re-allocate resources between users dynamically to save overall resource usage. Recent literature suggests resource sharing to save resources in the cloud, e.g., [6, 15]. From the service providers' perspective, a business model that encourages sharing excessive resources between customers helps save overall cloud resources for the service providers. Since these shared resources are excessive, the QoE of users is not compromised. This concept of resource sharing provides a new option for IT operation teams to optimize the resource utilization of the cloud.

A successful sharing scheme includes the following key points:
1. Provide enough reward to the users who share.
2. Ensure that users do not experience service disruptions while sharing.
3. Give resources back to users when they need extra resources in some circumstances.

In public cloud systems, the major challenges for designing an optimal sharing scheme are:
1. Real-time user demands for cloud resources, such as CPU, memory, and network bandwidth, are asynchronous, dynamic, and hard to predict, making the amount of excessive resources uncertain.
2. Users have different personalities, either conservative or generous, which affect their choices of sharing or requesting resources.
3. Traditional centralized resource allocation algorithms are inefficient due to the difficulty of tracking and grouping large numbers of users. Decentralized user-to-user sharing is more effective.

To address the resource sharing problem for a large scale of cloud users, we introduce the concept of Artificial Swarm Intelligence (ASI), a recently emerged research field under the umbrella of reinforcement learning. The goal of ASI is to provide solutions with AI agents to imitate human/animal behaviors/personalities in a swarm and make optimal decisions in a decentralized way. ASI is a multi-agent-based reinforcement learning solution that achieves collaborative goals with a swarm of agents. By applying ASI in the cloud resource allocation system, the AIOps team of public cloud systems can achieve optimal resource utilization without compromising the QoE of the customers.

To implement ASI, in this paper, we design an EMP model for our sharing system, which is an evolutionary multi-agent model. The goal of this sharing procedure is to dynamically allocate spare resources from one agent to another who needs that resource simultaneously. We define that each agent has Personality Traits (PT) that lead them to have different preferences in different situations. The evolution of their PT during the sharing procedure causes them to make different actions at each iteration step to achieve the goal of sharing, i.e., all agents have sufficient resources and QoE is guaranteed. During the sharing procedure, we use the Nash Bargaining method in game theory to obtain optimal policies.

Our contributions in this paper are:
1. Building a multi-agent EMP model based on Artificial Swarm Intelligence for user resource sharing in the public cloud system.
2. Applying PT and game theory for the EMP model to optimize the sharing policy.
3. Comprehensive analysis of the performance of our algorithm by comparing our EMP model (including EMP with Asymmetric Nash Bargaining strategy (EMP-A) and EMP with Fixed-step strategy (EMP-F)) with two other baseline models, SEMP and NBSS. This paper provides a new scope of optimal resource allocation for the AIOps research field in public cloud systems.

### 2. Background and Related Work

Swarm Intelligence is a concept of designing decentralized and self-organized systems for collective behaviors, first introduced in 1989 in the field of cellular robotics [1]. This concept was derived from natural animal behaviors in swarms and later applied in the Artificial Intelligence field to establish the research area of ASI since 2015 [9]. The goal of ASI is to design robotics to optimize the performance of a self-organized system involving a group of AI agents. Since its emergence, the ASI system has been used in many research areas. For instance, in intelligent transportation and logistics systems, the authors in [13] presented a model to track and chase a target by designing an algorithm to control a swarm of autonomous robots to move in a 2-D space. Other research areas using ASI include "human swarming" for financial market forecasting [11] and disease diagnosing [8].

In the meantime, the evolution of personalities and the corresponding effects on collaboration of agents have also been brought to the swarm intelligence research. For example, the authors in [2] used personality evolution to build a self-organized algorithm to research a problem of multiple robots leaving a room in a self-organized way. The authors in [10] proposed a game-theory-based approach for swarm robots to collaborate and chase a target. The authors in [3] dealt with the evolved control of a swarm of robots to decide the signaling and connectivity of communications with each other. The authors in [14] used ASI to build a SWARM AI platform to measure the personalities of human groups.

In this paper, we bring the concept of the evolution of the personality of swarm agents to solve our resource sharing problem in cloud systems. Additionally, we use game theory when defining rewards in the system for the agents to take optimal actions. Our paper uses ASI to address the resource sharing problem in cloud systems, providing a novel scope for AIOps researchers to optimize resource allocation when operating public cloud systems.

### 3. System Model

As mentioned in previous sections, our system encourages public cloud users to share spare resources with each other, while AI-based agents act as advisors to perform the sharing. In this section, we design the EMP model, which is based on ASI and considers the personalities of the agents. In the EMP model, we design two algorithms, EMP-A and EMP-F, considering both PT and the risk of running short of resources. We then design two algorithms as control groups for benchmarking: one is SEMP, in which every agent only cares about its own PT at each iteration step without considering the risk of shortage of resources; the other is NBSS, which uses the Nash Bargaining Solution (NBS) for agents without involving the agents' PT in the sharing.

#### 3.1 The EMP Model

In the EMP model, we focus on the cooperation between the agents without considering competition, aligning with the service scenario in Infrastructure as a Service (IaaS) of public cloud, where users should not realize any competition between them when sharing resources. To quantify the personality of agents in EMP, we introduce PT, which describe agents' intentions in selecting their sharing behaviors (i.e., actions).

We set all agents in our system as homogeneous agents, with the only difference being the parameter settings based on the agents' PT.