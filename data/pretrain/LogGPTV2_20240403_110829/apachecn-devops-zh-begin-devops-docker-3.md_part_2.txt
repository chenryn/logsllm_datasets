![Adding Workers to our Swarm](img/image03_16.jpg)
## 查看集群的状态
我们使用这个命令来查看集群的状态:
```
docker node ls
```
我们使用这个命令来查看集群的状态。该命令在管理器节点上运行，显示我们集群中的所有节点及其状态和可用性。在我们的管理器节点上运行它会显示类似于以下内容的输出:
![Viewing a Cluster's Status](img/image03_17.jpg)
## 活动 1 —向集群添加节点
确保您有一个管理器节点和节点邀请命令。
让你熟悉`ssh`和集群管理。
您被要求连接到至少两个节点，并将它们添加到群集。
1.  `Ssh` into your first node:
    ![Activity 1 — Adding Nodes to a Cluster](img/image03_18.jpg)
2.  Run the invite command on the node to join the cluster. Remember, we got this command when we first initialized our manager node:
    ![Activity 1 — Adding Nodes to a Cluster](img/image03_19.jpg)
3.  Exit the node, `ssh` into another, and run the command:
    ![Activity 1 — Adding Nodes to a Cluster](img/image03_20.jpg)
4.  `Ssh` into the manager node to check the cluster status through `docker node ls:`
    ![Activity 1 — Adding Nodes to a Cluster](img/image03_21.jpg)
# 管理集群中的服务和应用
现在我们的集群已经准备好了，是时候在我们的集群上安排一些服务了。如前所述，管理器节点的作用是接受 Docker 命令并对集群应用它们。因此，我们将在管理器节点上创建服务。
### 注
在这一点上，人们在工作节点上真的无能为力，因为它们完全在管理器的控制之下。
## 创建服务
该命令用于创建服务:
```
docker service create --replicas  -p : --name  
```
如前所述，我们对经理进行了调查。我们将使用上一课中构建的 WordPress 示例。由于我们已经在本地拥有了这个映像，因此从集线器中拉出它不会有任何麻烦。
我们的副本数量将为三个，因为我们当前有三个工作节点；通过运行`docker node ls`确认您的节点号。
### 注
我们不创建副本计数；这介绍了以下主题。`-p :`将在我们计算机定义的港口上建造的容器映射到容器港口。我们不需要有与我们的节点号相同数量的副本。其他节点可以处理不同的应用层，例如数据库:
![Creating a Service](img/image03_22.jpg)
我们基于 WordPress 映像创建了一个网站，并将主机端口`80`映射到容器端口`80`。
## 挂牌服务
该命令用于查看当前运行的服务:
```
docker service ls
```
此命令用于查看当前运行的服务和更多信息，如副本、映像、端口等。
从下面的输出中，我们可以看到刚刚启动的服务和相关信息:
![Listing Services](img/image03_23.jpg)
## 服务状态
此命令用于了解我们的服务是否正常运行:
```
docker service ps 
```
查看服务列表不会为我们提供所有需要的信息，例如我们的服务部署在哪些节点上。但是，我们可以了解我们的服务是否可以运行，以及遇到的错误(如果有的话)。当我们在我们的管理器上运行该程序时，我们会得到以下输出:
![Service Status](img/image03_24.jpg)
### 注
查看状态非常重要。当我们在节点上运行升级或更新时，运行`docker ps`会通知我们节点的状态。在理想的 Docker Swarm 设置中，当一个节点发生故障时，管理器会将流量重新分配给可用的节点，因此，除非监控可用，否则很难注意到停机时间。在使用节点之前，请始终运行该命令来检查节点的状态。
## 我们如何知道我们的站点正在运行？
我们可以通过在浏览器上打开任何工人的 IP 地址来验证 WordPress 是否正在运行:
![How Do We Know Our Site is Running?](img/image03_25.jpg)
以下是 WordPress 在我们浏览器上的显示截图:
![How Do We Know Our Site is Running?](img/image03_26.jpg)
### 注
打开运行 WordPress web 服务的任何 IP 地址，包括管理器节点，都会打开相同的地址。
## 活动 2 —在群集上运行服务
确保有一个管理器节点正在运行。
让你熟悉群体中的服务管理。
您被要求向群中添加新的`postgres` 服务。
1.  Create a new node and name it `dbworker`:
    ```
    docker-machine create --driver virtualbox dbworker
    ```
    ![Activity 2 — Running Services on a Swarm](img/image03_27.jpg)
2.  Add the new worker to the swarm:
    ![Activity 2 — Running Services on a Swarm](img/image03_28.jpg)
3.  Create a new database service and name it `db`, using the postgres image as the base:
    ```
    docker service create --replicas 1 --name db postgres
    ```
    下面是输出的截图:
    ![Activity 2 — Running Services on a Swarm](img/image03_29.jpg)
4.  通过以下步骤验证`postgres`正在运行:
    1.  Map the `postgres` container running in `dbworker node` to your computer:
        ```
        docker run --name db -e POSTGRES_PASSWORD=postgres -d -p 5432:5432 postgres
        ```
        ![Activity 2 — Running Services on a Swarm](img/image03_30.jpg)
    2.  Run `docker ps` to list running containers; this should have our `postgres` container and the status should be `UP`:
        ![Activity 2 — Running Services on a Swarm](img/image03_31.jpg)
    3.  Exit and stop the container through the following:
        ![Activity 2 — Running Services on a Swarm](img/image03_32.jpg)
# 向上和向下扩展服务
随着进入应用的请求数量的增加或减少，将需要扩展基础架构。我们最近使用了运行我们制作的相同 WordPress 安装的节点副本。
### 注
这是生产级设置的一个非常基本的例子。理想情况下，我们需要更多的管理器节点和副本，但是由于我们正在运行一个演示，这就足够了。
扩展包括根据应用的流量增加和减少资源。
## 扩展我们的数据库服务
我们将扩展我们的数据库服务，作为如何扩展服务的一个例子。在现实场景中，诸如谷歌云平台和亚马逊网络服务之类的云服务可能定义了自动扩展服务，其中创建了多个副本，并通过被称为负载平衡的服务在副本之间分配流量。我们将在下一个活动中深入探讨这一点。首先，我们从基础了解缩放是如何工作的。缩放数据库的命令采用以下格式:
```
docker service scale =
```
要扩展服务，请输入我们在创建服务时提供的服务名称以及您想要增加的副本数量。
### 注
`--detach=false`允许我们查看复制进度。命令是`docker service scale =:`
![Scaling Our Database Service](img/image03_33.jpg)
从上面的输出中，我们可以看到我们的`db`服务已经被复制了。我们现在有两个数据库服务在`dbworker`节点上运行。
## 【Swarm 如何知道在哪里安排服务？
我们之前介绍了调度模式；它们包括以下内容:
*   随意
*   传播
*   大包
Docker Swarm 的默认调度策略是`spread`，它为资源最少**的节点分配新的服务。**
 **### 注
如果群集中没有额外未分配的节点，您想要扩展的服务将在当前运行的节点上复制。
群管理器将使用传播策略并根据资源进行分配。
然后，我们可以使用`docker service ls`命令验证该操作是否确实成功，我们可以看到副本的数量是两个:
![How Does Swarm Know Where to Schedule a Service?](img/image03_34.jpg)
缩小与放大非常相似，只是我们传递的副本数量比以前少。从以下输出中，我们缩小到一个复制副本，并验证复制副本数量为 1:
![How Does Swarm Know Where to Schedule a Service?](img/image03_35.jpg)
## 【Swarm 如何平衡副本之间的负载请求？
负载平衡器有助于处理和管理应用中的请求。在应用处理大量请求的情况下，可能在不到 5 分钟的时间内处理 1000 个请求，我们需要在应用上有多个副本和一个负载平衡器，特别是逻辑(后端)部分。负载平衡器有助于分发请求，防止实例过载，最终导致停机。
当在云平台上部署进行生产时，如**谷歌云平台**或**亚马逊网络服务**，您可以利用外部负载平衡器将请求路由到集群主机。
Docker Swarm 包括一个内置的路由服务，即使节点上没有运行任何服务，该服务也能使群中的每个节点接受到已发布端口的传入连接。`postgres` 服务默认使用端口`5432`。
## 活动 3 —在群集上扩展服务
确保你有一个至少有一个管理器、两个服务和三个工作者节点的群。
让您熟悉扩展服务和复制节点。
您被要求将 web 服务扩展到四个副本，将数据库服务扩展到两个副本。
1.  创建三个新的工作节点，两个用于 web 服务，一个用于数据库服务。
2.  连接到管理器节点并扩展 web 和数据库服务。
3.  使用 docker 服务确认服务副本计数；最终结果应该如下:
    *   WordPress 网络服务应该有两个副本计数
    *   Postgres 数据库服务应该有四个副本计数
# 总结
在本课中，我们完成了以下工作:
*   谈到了编排，并提到了几个示例工具
*   讨论了集群及其重要性，尤其是在生产级设置中
*   通过在 VirtualBox 上运行 Docker Machines 了解虚拟主机
*   浏览 Docker Swarm 以及如何创建和管理节点集群
*   引入了示例服务，包括运行在我们的群上的 Wordpress
*   获得了与`docker-machine cli`一起工作的高级理解
*   谈到了负载平衡以及 docker swarm manager 如何做到这一点
祝贺你到达终点线！这是我们从课程中学到的知识的摘要。
在本书中，我们讲述了以下内容:
*   谈及 DevOps 以及 Docker 如何为工作流程做出贡献
*   了解如何在 Dockerfiles 上创建应用模板
*   构建映像和容器，并将其推送到 Docker Hub
*   通过`docker-compose`管理的容器
*   了解了如何通过 Docker Swarm 编排我们的应用**