77
第9章 AWK 介 绍
下载
当然可以创建新域，并赋给其更有意义的变量名。例如：
7. 增加列值
为增加列数或进行运行结果统计，使用符号 + =。增加的结果赋给符号左边变量值，增加
到变量的域在符号右边。例如将 $ 1加入变量t o t a l，表达式为t o t a l + = $ 1。列值增加很有用。许
多文件都要求统计总数，但输出其统计结果十分繁琐。在 a w k中这很简单，请看下面的例子。
将所有学生的‘目前级别分’加在一起，方法是 t o t + = $ 6，t o t即为a w k浏览的整个文件的
域6结果总和。所有记录读完后，在 E N D部分加入一些提示信息及域 6总和。不必在a w k中显
示说明打印所有记录，每一个操作匹配时，这是缺省动作。
如果文件很大，你只想打印结果部分而不是所有记录，在语句的外面加上圆括号（）即
可。
8. 文件长度相加
在目录中查看文件时，如果想快速查看所有文件的长度及其总和，但要排除子目录，使
用ls -l命令，然后管道输出到a w k，a w k首先剔除首字符为d（使用正则表达式）的记录，然后
将文件长度列相加，并输出每一文件长度及在E N D部分输出所有文件的长度。
本例中，首先用ls -l命令查看一下文件属性。注意第二个文件属性首字符为 d，说明它是
一个目录，文件长度是第5列，文件名是第9列。如果系统不是这样排列文件名及其长度，应
适时加以改变。
下面的正则表达式表明必须匹配行首，并排除字符 d，表达式为^ [ ^ d ]。
使用此模式打印文件名及其长度，然后将各长度相加放入变量 t o t中。
加入java编程群：524621833
78
第二部分 文本过滤
下载
9.2.9 内置的字符串函数
a w k有许多强大的字符串函数，见表9 - 4。
表9-4 awk内置字符串函数
g s u b ( r, s ) 在整个$ 0中用s替代r
g s u b ( r, s , t ) 在整个t中用s替代r
i n d e x ( s , t ) 返回s中字符串t的第一位置
l e n g t h ( s ) 返回s长度
m a t c h ( s , r ) 测试s是否包含匹配r的字符串
s p l i t ( s , a , f s ) 在f s上将s分成序列a
s p r i n t ( f m t , e x p ) 返回经f m t格式化后的e x p
s u b ( r, s ) 用$ 0中最左边最长的子串代替s
s u b s t r ( s , p ) 返回字符串s中从p开始的后缀部分
s u b s t r ( s , p , n ) 返回字符串s中从p开始长度为n的后缀部分
g s u b函数有点类似于s e d查找和替换。它允许替换一个字符串或字符为另一个字符串或字
符，并以正则表达式的形式执行。第一个函数作用于记录 $ 0，第二个g s u b函数允许指定目标，
然而，如果未指定目标，缺省为$ 0。
i n d e x（s，t）函数返回目标字符串s中查询字符串t的首位置。l e n g t h函数返回字符串s字符
长度。m a t c h函数测试字符串s是否包含一个正则表达式r定义的匹配。s p l i t使用域分隔符f s将
字符串s划分为指定序列a。s p r i n t函数类似于p r i n t f函数（以后涉及），返回基本输出格式f m t的
结果字符串e x p。s u b（r，s）函数将用s替代$ 0中最左边最长的子串，该子串被（ r）匹配。
s u b（s，p）返回字符串s在位置p后的后缀。s u b s t r（s，p，n）同上，并指定子串长度为n。
现在看一看a w k中这些字符串函数的功能。
1. gsub
要在整个记录中替换一个字符串为另一个，使用正则表达式格式， /目标模式/，替换模式
/。例如改变学生序号4 8 4 2到4 8 9 9：
2. index
查询字符串s中t出现的第一位置。必须用双引号将字符串括起来。例如返回目标字符串
B u n n y中n y出现的第一位置，即字符个数。
3. length
返回所需字符串长度，例如检验字符串 J . Tr o l l返回名字及其长度，即人名构成的字符个
数。
还有一种方法，这里字符串加双引号。
加入java编程群：524621833
79
第9章 AWK 介 绍
下载
4. match
m a t c h测试目标字符串是否包含查找字符的一部分。可以对查找部分使用正则表达式，返
回值为成功出现的字符排列数。如果未找到，返回 0，第一个例子在A N C D中查找d。因其不
存在，所以返回0。第二个例子在A N C D中查找D。因其存在，所以返回A N C D中D出现的首位
置字符数。第三个例子在学生J . L u l u中查找u。
5. split
使用s p l i t返回字符串数组元素个数。工作方式如下：如果有一字符串，包含一指定分隔
符 - ，例如A D2 - K P 9 - J U 2 - L P - 1，将之划分成一个数组。使用s p l i t，指定分隔符及数组名。此
例中，命令格式为( " A D 2 - K P 9 - J U 2 - L P - 1 "，p a r t s _ a r r a y，" - "），s p l i t然后返回数组下标数，这
里结果为4。
还有一个例子使用不同的分隔符。
这个例子中，s p l i t返回数组m y a r r a y的下标数。数组m y a r r a y取值如下：
本章结尾部分讲述数组概念。
6. sub
使用s u b发现并替换模式的第一次出现位置。字符串 S T R包含‘poped popo pill’，执行下
列s u b命令s u b（/ o p /，" o p "，S T R）。模式o p第一次出现时，进行替换操作，返回结果如下：
‘pO Ped pope pill’。
本章文本文件中，学生J . Tr o l l的记录有两个值一样，“目前级别分”与“最高级别分”。只
改变第一个为2 9，第二个仍为2 4不动，操作命令为s u b（/ 2 6 /，" 2 9 "，$ 0），只替换第一个出现
2 4的位置。注意J . Tr o l l记录需存在。
7. substr
s u b s t r是一个很有用的函数。它按照起始位置及长度返回字符串的一部分。例子如下：
上面例子中，指定在域1的第一个字符开始，返回其前面5个字符。
加入java编程群：524621833
80
第二部分 文本过滤
下载
如果给定长度值远大于字符串长度， a w k将从起始位置返回所有字符，要抽取 L Ta n s l - e y
的姓，只需从第3个字符开始返回长度为7。可以输入长度9 9，a w k返回结果相同。
s u b s t r的另一种形式是返回字符串后缀或指定位置后面字符。这里需要给出指定字符串及
其返回字串的起始位置。例如，从文本文件中抽取姓氏，需操作域 1，并从第三个字符开始：
还有一个例子，在B E G I N部分定义字符串，在 E N D部分返回从第t个字符开始抽取的子
串。
8. 从s h e l l中向a w k传入字符串
本章开始已经提到过，a w k脚本大多只有一行，其中很少是字符串表示的。本书大多要求
在一行内完成a w k脚本，这一点通过将变量传入a w k命令行会变得很容易。现就其基本原理讲
述一些例子。
使用管道将字符串s t a n d - b y传入a w k，返回其长度。
设置文件名为一变量，管道输出到a w k，返回不带扩展名的文件名。
设置文件名为一变量，管道输出到a w k，只返回其扩展名。
9.2.10 字符串屏蔽序列
使用字符串或正则表达式时，有时需要在输出中加入一新行或查询一元字符。
打印一新行时，（新行为字符\ n），给出其屏蔽序列，以不失其特殊含义，用法为在字符
串前加入反斜线。例如使用\ n强迫打印一新行。
如果使用正则表达式，查询花括号（{ }），在字符前加反斜线，如/ \ { /，将在a w k中失掉其
特殊含义。
表9 - 5列出a w k识别的另外一些屏蔽序列
表9-5 awk中使用的屏蔽序列
\ b 退格键 \ t t a b键
\ f 走纸换页 \ d d d 八进制值
\ n 新行 \ c 任意其他特殊字符，例如\ \为反斜线符号
\ r 回车键
加入java编程群：524621833
81
第9章 AWK 介 绍
下载
使用上述符号，打印May Day，中间夹t a b键，后跟两个新行，再打印May Day，但这次
使用八进制数1 0 4、1 4 1、1 7 1、分别代表D、a、y。
注意，\ 1 0 4为D的八进制A S C I I码，\ 1 4 1为a的八进制A S C I I码，等等。
9.2.11 awk输出函数printf
目前为止，所有例子的输出都是直接到屏幕，除了 t a b键以外没有任何格式。a w k提供函
数p r i n t f，拥有几种不同的格式化输出功能。例如按列输出、左对齐或右对齐方式。
每一种p r i n t f函数（格式控制字符）都以一个 %符号开始，以一个决定转换的字符结束。
转换包含三种修饰符。
p r i n t f函数基本语法是p r i n t f（[格式控制符]，参数），格式控制字符通常在引号里。
9.2.12 printf修饰符
表9-6 awk printf修饰符
- 左对齐
Wi d t h 域的步长，用0表示0步长
. p r e c 最大字符串长度，或小数点右边的位数
表9-7 awk printf格式
% c A S C I I字符
% d 整数
% e 浮点数，科学记数法
% f 浮点数，例如（1 2 3 . 4 4）
% g a w k决定使用哪种浮点数转换e或者f
% o 八进制数
% s 字符串
% x 十六进制数
1. 字符转换
观察A S C I I码中6 5的等价值。管道输出6 5到a w k。p r i n t f进行A S C I I码字符转换。这里也加
入换行，因为缺省情况下p r i n t f不做换行动作。
当然也可以按同样方式使用a w k得到同样结果。
所有的字符转换都是一样的，下面的例子表示进行浮点数转换后‘ 9 9 9’的输出结果。整
数传入后被加了六个小数点。
2. 格式化输出
加入java编程群：524621833
82
第二部分 文本过滤
下载
打印所有的学生名字和序列号，要求名字左对齐， 1 5个字符长度，后跟序列号。注意 \ n
换行符放在最后一个指示符后面。输出将自动分成两列。
最好加入一些文本注释帮助理解报文含义。可在正文前嵌入头信息。注意这里使用 p r i n t
加入头信息。如果愿意，也可使用p r i n t f。
3. 向一行a w k命令传值
在查看a w k脚本前，先来查看怎样在a w k命令行中传递变量。
在a w k执行前将值传入a w k变量，需要将变量放在命令行中，格式如下：
awk 命令变量=输入文件值
（后面会讲到怎样传递变量到a w k脚本中）。
下面的例子在命令行中设置变量 A G E等于1 0，然后传入a w k中，查询年龄在1 0岁以下的
所有学生。
要快速查看文件系统空间容量，观察其是否达到一定水平，可使用下面 a w k一行脚本。因
为要监视的已使用空间容量不断在变化，可以在命令行指定一个触发值。首先用管道命令将
df -k传入a w k，然后抽出第 4列，即剩余可利用空间容量。使用 $ 4 ~ / ^ [ 0 - 9 ] /取得容量数值
（1 0 2 4块）而不是d f的文件头，然后对命令行与‘i f ( $ 4 < T R I G G E R )’上变量T R I G G E R中指定
的值进行查询测试。
在系统中使用df -k命令，产生下列信息：
如果系统中d f输出格式不同，必须相应改变列号以适应工作系统。
当然可以使用管道将值传入 a w k。本例使用w h o命令，w h o命令第一列包含注册用户名，
这里打印注册用户，并加入一定信息。
a w k也允许传入环境变量。下面的例子使用环境变量 L O G N A M E支持当前用户名。可从
w h o命令管道输出到a w k中获得相应信息。
加入java编程群：524621833
83
第9章 AWK 介 绍
下载
如果r o o t为当前登录用户，输出如下：
root you are connected to ttyp1
4. awk脚本文件
可以将a w k脚本写入一个文件再执行它。命令不必很长（尽管这是写入一个脚本文件的主
要原因），甚至可以接受一行命令。这样可以保存 a w k命令，以使不必每次使用时都需要重新
输入。使用文件的另一个好处是可以增加注释，以便于理解脚本的真正用途和功能。
使用前面的几个例子，将之转换成a w k可执行文件。像原来做的一样，将学生目前级别分
相加awk ‘（t o t + = $ 6）END{print "club student total points：" t o t }’g r a d e . t x t。
创建新文件s t u d e n t _ t o t . a w k，给所有a w k程序加入a w k扩展名是一种好习惯，这样通过查
看文件名就知道这是一个a w k程序。文本如下：
第一行是！/bin/awk -f。这很重要，没有它自包含脚本将不能执行。这一行告之脚本系统
中a w k的位置。通过将命令分开，脚本可读性提高，还可以在命令之间加入注释。这里加入头
信息和结尾的平均值。基本上这是一个一行脚本文件。
执行时，在脚本文件后键入输入文件名，但是首先要对脚本文件加入可执行权限。