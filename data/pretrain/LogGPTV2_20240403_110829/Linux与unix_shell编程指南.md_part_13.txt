### 第9章 AWK 介绍

#### 7. 增加列值
在AWK中，可以轻松地对列值进行累加。使用 `+=` 运算符可以将右侧的值累加到左侧变量中。例如，要将第一列 `$1` 的值累加到变量 `total` 中，可以使用以下表达式：
```awk
total += $1
```
这种累加操作在统计文件中的总和时非常有用。例如，如果需要计算所有学生“当前级别分”的总和，可以使用 `tot += $6`，其中 `tot` 将存储整个文件中第六列的总和。当所有记录处理完毕后，在 `END` 部分输出结果和提示信息。默认情况下，AWK会打印每条匹配的记录，但如果你只想打印最终结果而不是所有记录，可以在语句外加上圆括号。

#### 8. 文件长度相加
若想快速查看目录下所有文件（不包括子目录）的总大小，可以结合 `ls -l` 和AWK命令。首先用 `ls -l` 列出文件属性，然后通过管道传递给AWK，剔除以 `d` 开头（表示目录）的行，并累加第五列（文件大小）。最后，在 `END` 部分输出总和。注意：确保你的系统中文件名和大小的位置与示例一致；如果不一致，请调整列索引。
```bash
ls -l | awk 'NR==1 || !/^d/ {sum += $5} END {print "Total size: " sum}'
```

### 9.2.9 内置字符串函数
AWK提供了多种强大的字符串处理函数，如表9-4所示：

| 函数                  | 描述                                         |
|---------------------|--------------------------------------------|
| `gsub(r, s)`         | 在整个`$0`中用`s`替换所有匹配`r`的子串      |
| `gsub(r, s, t)`      | 在`t`中用`s`替换所有匹配`r`的子串           |
| `index(s, t)`        | 返回`s`中首次出现`t`的位置                   |
| `length(s)`          | 返回`s`的长度                                 |
| `match(s, r)`        | 测试`s`是否包含正则表达式`r`，返回匹配位置    |
| `split(s, a, fs)`    | 按`fs`分割`s`，存入数组`a`                    |
| `sprintf(fmt, exp)`  | 根据格式`fmt`返回`exp`的字符串形式            |
| `sub(r, s)`          | 用`s`替换`$0`中最左边最长的匹配`r`的子串       |
| `substr(s, p)`       | 返回从位置`p`开始的`s`的后缀部分               |
| `substr(s, p, n)`    | 返回从位置`p`开始长度为`n`的`s`的后缀部分      |

#### 示例
1. **gsub**
   替换记录中的某个字符串：
   ```awk
   gsub(/old/, "new")
   ```

2. **index**
   查找字符串中子串的位置：
   ```awk
   index("Bunny", "ny")
   ```

3. **length**
   获取字符串长度：
   ```awk
   length("J. Troll")
   ```

4. **match**
   检查字符串是否包含指定模式：
   ```awk
   match("ANCD", /D/)
   ```

5. **split**
   分割字符串并存储到数组中：
   ```awk
   split("AD2-KP9-JU2-LP-1", parts_array, "-")
   ```

6. **sub**
   替换第一个匹配项：
   ```awk
   sub(/26/, "29", $0)
   ```

7. **substr**
   提取子串：
   ```awk
   substr($1, 1, 5)
   ```

### 9.2.10 字符串转义序列
在AWK中，某些特殊字符需要使用反斜杠 `\` 来转义，以便保留其特殊含义。表9-5列出了一些常用的转义序列：

| 转义序列 | 描述           |
|----------|--------------|
| `\b`     | 退格键         |
| `\t`     | Tab 键         |
| `\f`     | 换页符         |
| `\n`     | 新行           |
| `\r`     | 回车键         |
| `\ddd`   | 八进制值       |
| `\\`     | 反斜杠本身     |

#### 示例
打印带有Tab和新行的字符串：
```awk
BEGIN { print "May\tDay\n" }
```

### 9.2.11 输出函数 `printf`
`printf` 函数允许格式化输出，支持多种格式控制符。表9-6和表9-7分别列出了修饰符和格式类型。

#### 示例
1. **字符转换**
   将ASCII码转换为字符：
   ```bash
   echo 65 | awk '{ printf "%c\n", $1 }'
   ```

2. **格式化输出**
   左对齐名字并显示序号：
   ```awk
   BEGIN { print "Name\tID" }
   { printf "%-15s %s\n", $1, $2 }
   ```

3. **传递变量**
   在命令行中传递变量：
   ```bash
   awk -v AGE=10 '$3 < AGE { print $0 }' students.txt
   ```

### 9.2.12 `printf` 修饰符
`printf` 支持多种修饰符来控制输出格式。表9-6和表9-7列出了这些修饰符和格式类型。

#### 示例
左对齐名字并显示序号：
```awk
{ printf "%-15s %s\n", $1, $2 }
```

### 9.2.13 使用脚本文件
可以将AWK命令写入文件并执行。这样不仅便于复用，还可以添加注释以提高可读性。例如，创建一个名为 `student_tot.awk` 的文件，内容如下：
```awk
#!/bin/awk -f
{
    total += $6
}
END {
    print "Total points: " total
}
```
保存文件并设置可执行权限后，运行该脚本：
```bash
chmod +x student_tot.awk
./student_tot.awk grades.txt
```

这样就可以方便地重复使用和维护AWK脚本了。