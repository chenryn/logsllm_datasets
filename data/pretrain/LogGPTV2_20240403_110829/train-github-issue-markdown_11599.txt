  1. What version of Go are you using (`go version`)?  
`go version go1.6 linux/amd64`  
and  
`go version devel +ea4b785 Tue Mar 15 08:43:34 2016 +0000 linux/amd64`
  2. What operating system and processor architecture are you using (`go env`)?
    GOARCH="amd64"
    GOBIN=""
    GOEXE=""
    GOHOSTARCH="amd64"
    GOHOSTOS="linux"
    GOOS="linux"
    GOPATH="/home/justinn/Workspace/go"
    GORACE=""
    GOROOT="/usr/lib/go"
    GOTOOLDIR="/usr/lib/go/pkg/tool/linux_amd64"
    GO15VENDOREXPERIMENT="1"
    CC="gcc"
    GOGCCFLAGS="-fPIC -m64 -pthread -fmessage-length=0"
    CXX="g++"
    CGO_ENABLED="1"
  1. What did you do?
Benchmarked (a function that calls) strings.Join and looked at the memory
allocations with pprof. (With `go test -bench Join -benchmem -memprofile
mem.pprof -memprofilerate 1 -run ^$`)
Benchmarks for strings.Join: http://play.golang.org/p/R7snLsnFmg
Benchmark results:
    BenchmarkJoin0-8    500000000            3.21 ns/op        0 B/op          0 allocs/op
    BenchmarkJoin1-8    500000000            3.66 ns/op        0 B/op          0 allocs/op
    BenchmarkJoin2-8    20000000            80.8 ns/op         6 B/op          2 allocs/op
Memory profile for strings.Join (`go tool pprof --alloc_objects 
mem.pprof`):
       1204055    1204055 (flat, cum)   100% of Total
             .          .    358:   n := len(sep) * (len(a) - 1)
             .          .    359:   for i := 0; i string conversion in strings.Join (on line 369) allocates a new
string, although the []byte could be reused as there can never be a reference
to the []byte after the function returns and the []byte is already on the
heap¹.
¹ Calling 'go build -gcflags="-m" in the strings package confirms this:
    ./strings.go:363: make([]byte, n) escapes to heap
    ./strings.go:369: string(b) escapes to heap
(Line numbers are from tip)