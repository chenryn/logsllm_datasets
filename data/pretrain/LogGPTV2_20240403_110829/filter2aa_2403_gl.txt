          mov   
ebp,  esp 
          push 
ecx 
          push 
ecx 
          push 
esi 
          lea  
eax, DWORD PTR $T2[ebp] 
          push 
eax 
          lea  
eax, DWORD PTR $T1[ebp] 
          push 
eax 
          push 
1 
          push 
1 
          push 
2147483646                                    ; 7ffffffeH 
          push 
0 
          call 
__vcomp_for_static_simple_init 
          mov  
esi, DWORD PTR $T1[ebp] 
          add  
esp, 24                                        ; 00000018H 
          jmp  
SHORT $LN6@main$omp$1 
$LL2@main$omp$1: 
          push 
esi 
          call 
_check_nonce 
          pop  
ecx 
          inc  
esi 
$LN6@main$omp$1: 
          cmp  
esi, DWORD PTR $T2[ebp] 
          jle  
SHORT $LL2@main$omp$1 
          call 
__vcomp_for_static_end 
          pop  
esi 
          leave 
          ret  
0 
_main$omp$1 ENDP 
这个函数会启动 n 个并发线程，其中 n 就是 CPU 核芯（cores）的总数。函数 vcomp_for_static_simple_init()
计算当前线程里 for() 结构体的区间，而区间的间隔则由当前线程的总数决定。循环计数器的起始值和结束
值分别存储于局部变量$T1 和$T2。细心的读者可能注意到函数 vcomp_for_static_simple_init() 的一个参数为
0x7ffffffeh（即 2147483646）——它是整个循环体的迭代次数，最终会被 n 整除。 
接下来程序发起了调用函数 check_nonce() 的循环，完成余下的工作。 
我在源代码的 check_nonce() 函数中有意添加了统计代码，用来统计参数被调用的次数。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 92 章  OpenMP 
857 
整个程序的运行结果如下： 
threads=4 
... 
checked=2800000 
checked=3000000 
checked=3200000 
checked=3300000 
found (thread 3): [hello, world!_1611446522]. seconds spent=3 
__min[0]=0x00000000 __max[0]=0x1fffffff 
__min[1]=0x20000000 __max[1]=0x3fffffff 
__min[2]=0x40000000 __max[2]=0x5fffffff 
__min[3]=0x60000000 __max[3]=0x7ffffffe 
计算结果的前 3 个字节确实是零： 
C:\...\sha512sum test 
000000f4a8fac5a4ed38794da4c1e39f54279ad5d9bb3c5465cdf57adaf60403 
df6e3fe6019f5764fc9975e505a7395fed780fee50eb38dd4c0279cb114672e2 *test 
在笔者的 4 核 Intel Xeon E3-1220 3.10Ghz CPU 上运行这个程序，总耗时大约 2～3 秒。我们可以在任
务管理器中看到 5 个线程：1 个主线程和 4 个子线程。虽然理论上它还有精简的空间，但是我没有对程序
源代码进行深度优化。深度优化应当可以大幅度提升它的运行效率。另外，因为我的 CPU 有 4 个内核，所
以它发起了 4 个子线程——这完全符合 OpenMP 规范。 
通过程序输出的统计数据，我们可以清楚地观察到整个穷举空间被划分为大致相等的四个部分。严格
地说，考虑到最后一个比特位，这四个区间确实并非完全相等。 
OpenMP 还提供了保障模块 crtomic（原子性）的 Prugms 指令。顾名思义，被标记为原子性的代码不
会被拆分为多个子线程运行。我们来看看这段代码： 
          #pragma omp atomic 
          checked++; 
          #pragma omp critical 
          if ((checked % 100000)==0) 
                    printf ("checked=%d\n", checked); 
经 MSVC 2012 编译，上述代码对应的汇编指令如下所示。 
指令清单 92.3  MSVC 2012 
          push     edi 
          push     OFFSET _checked 
          call     __vcomp_atomic_add_i4 
; Line 55 
          push     OFFSET _$vcomp$critsect$ 
          call     __vcomp_enter_critsect 
          add      esp, 12                                        ; 0000000cH 
; Line 56 
          mov      ecx, DWORD PTR _checked 
          mov      eax, ecx 
          cdq 
          mov      esi, 100000                                    ; 000186a0H 
          idiv     esi 
          test     edx, edx 
          jne      SHORT $LN1@check_nonc 
; Line 57 
          push     ecx 
          push     OFFSET ??_C@_0M@NPNHLIOO@checked?$DN?$CFd?6?$AA@ 
          call     _printf 
          pop      ecx 
          pop      ecx 
$LN1@check_nonc: 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
858 
逆向工程权威指南（下册） 
          push     DWORD PTR _$vcomp$critsect$ 
          call     __vcomp_leave_critsect 
          pop      ecx 
封装在vcomp*.dll里的函数vcomp_atomic_add_i4() 只是一个使用了LOCK XADD指令的小函数。
①
函数vcomp_enter_critsect() 调用的是Win32 API函数EnterCriticalSection()
②
92.2  GCC 
。 
经 GCC 4.8.1 生成的程序，其统计结果和上面的程序一样。所以 GCC 分割区间的方法与 MSVC 相同。 
指令清单 92.4  GCC 4.8.1 
          mov       edi, OFFSET FLAT:main._omp_fn.0 
          call      GOMP_parallel_start 
          mov       edi, 0 
          call      main._omp_fn.0 
          call      GOMP_parallel_end 
由 GCC 编译生成的程序，会发起 3 个新的线程，原有线程扮演第 4 进程的角色。所以，总体上 GCC 的进
程数是 4，MSVC 的进程数是 5。 
其中，函数 main._omp_fn.0 的代码如下所示。 
指令清单 92.5  GCC 4.8.1 
main._omp_fn.0: 
          push 
rbp 
          mov  
rbp, rsp 
          push 
rbx 
          sub  
rsp, 40 
          mov  
QWORD PTR [rbp-40], rdi 
          call 
omp_get_num_threads 
          mov  
ebx, eax 
          call 
omp_get_thread_num 
          mov  
esi, eax 
          mov  
eax, 2147483647 ; 0x7FFFFFFF 
          cdq 
          idiv 
ebx 
          mov  
ecx, eax 
          mov  
eax, 2147483647 ; 0x7FFFFFFF 
          cdq 
          idiv 
ebx 
          mov  
eax, edx 
          cmp  
esi, eax 
          jl   
.L15 
.L18: 
          imul 
esi, ecx 
          mov  
edx, esi 
          add  
eax, edx 
          lea  
ebx, [rax+rcx] 
          cmp  
eax, ebx 
          jge  
.L14 
          mov  
DWORD PTR [rbp-20], eax 
.L17: 
          mov  
eax, DWORD PTR [rbp-20] 
          mov  
edi, eax 
          call 
check_nonce 
          add  
DWORD PTR [rbp-20], 1 
          cmp  
DWORD PTR [rbp-20], ebx 
① 有关 LOCK 前缀的详细说明，请参见本书附录 A.6.1。 
② 请参见本书 68.4 节。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 92 章  OpenMP 
859 
          jl   
.L17 
          jmp  
.L14 
.L15: 
          mov  
eax, 0 
          add  
ecx, 1 
          jmp  
.L18 
.L14: 
          add  
rsp, 40 
          pop  
rbx 
          pop  
rbp 
          ret 
上述指令清晰地显示出：程序通过调用函数 omp_get_num_threads() 和另一个函数 omp_get_thread_num() 获
取当前线程的总数以及当前线程的编号，然后分割循环体。之后，它再运行 check_nonce()。 
GCC 在代码中直接使用 LOCK ADD 指令，而 MSVC 则是调用另一个 DLL 文件中的独立函数。 
指令清单 92.6  GCC 4.8.1 
          lock add         DWORD PTR checked[rip], 1 
          call 
GOMP_critical_start 
          mov  
ecx, DWORD PTR checked[rip] 
          mov  
edx, 351843721 
          mov  
eax, ecx 
          imul 
edx 
          sar  
edx, 13 
          mov  
eax, ecx 
          sar  
eax, 31 
          sub  
edx, eax 
          mov  
eax, edx 
          imul 
eax, eax, 100000 
          sub  
ecx, eax 
          mov  
eax, ecx 
          test 
eax, eax 
          jne  
.L7 
          mov  
eax, DWORD PTR checked[rip] 
          mov  
esi, eax 
          mov  
edi, OFFSET FLAT:.LC2 ; "checked=%d\n" 
          mov  
eax, 0 
          call 
printf 
.L7: 
          call 
GOMP_critical_end 
以 GOMP 开头的函数来自于 GNU OpenMP Library。您可在 GitHub 下载到它的源文件（https://github.com/ 
gcc-mirror/gcc/tree/master/libgomp）。不过，微软的 vcomp*.dll 文件没有源代码可查。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 9933 章
章    安
安  腾
腾  指
指  令
令  
就市场来讲，安腾（Itanium）处理器几乎是失败产品。但是它的 Intel Itanium（IA64）架构非常值得
研究。乱序执行（OOE）CPU 理念，侧重于让 CPU 重新划分指令的片段和顺序，再把重组后的指令组分
派到并联计算单位进行并行计算。而英特尔（Intel）安腾架构推出的并行计算技术（Explicitly Parallel 
Instruction Code，EPIC），则主张让编译器在编译的早期阶段实现指令分组。 
厂商推出了配合这种并行计算技术的编译器。不过，这些编译器因异常复杂而颇受争议。 
本章从 Linux 内核（3.2.0.4）摘录了部分 IA64 指令。这段程序用于实现某加密机制。其源代码如下所示。 
指令清单 93.1  Linux kernel 3.2.0.4 
#define TEA_ROUNDS                 32 
#define TEA_DELTA                  0x9e3779b9 
static void tea_encrypt(struct crypto_tfm *tfm, u8 *dst, const u8 *src) 
{ 
          u32 y, z, n, sum = 0; 
          u32 k0, k1, k2, k3; 
          structtea_ctx *ctx = crypto_tfm_ctx(tfm); 
          const __le32 *in = (const __le32 *)src; 
          __le32 *out = (__le32 *)dst; 
          y = le32_to_cpu(in[0]); 
          z = le32_to_cpu(in[1]); 
          k0 = ctx->KEY[0]; 
          k1 = ctx->KEY[1]; 
          k2 = ctx->KEY[2]; 
          k3 = ctx->KEY[3]; 
          n = TEA_ROUNDS; 
          while (n-- > 0) { 
                   sum += TEA_DELTA; 
                   y += ((z > 5) + k1); 
                   z += ((y > 5) + k3); 
          } 
          out[0] = cpu_to_le32(y); 
          out[1] = cpu_to_le32(z); 
}  
其编译结果如下所示。 
指令清单 93.2  Linux Kernel 3.2.0.4 for Itanium 2（McKinley） 
0090|                                         tea_encrypt: 
0090|08 80 80 41 00 21             