# Costs and Encoding Size for Different Values of Î»

The costs for the complaint originate from the length of the concise proof of misbehavior, denoted as \( \pi \), which must be sent to the contract and evaluated on-chain. The size of \( \pi \) is calculated as follows:

\[
|\pi| = |zin1| + |zin2| + |zout| + |\rho_{in}| + |\rho_{out}|
\]

\[
|\pi| \leq 2\mu \times \lambda + \mu + 2\delta \times \mu
\]

Figure 7 illustrates that even for very large file chunk sizes, the cost for optimistic execution remains nearly constant at approximately 1.73 USD, while the cost for pessimistic execution increases linearly with the length of the file chunks. It is worth noting that using different cryptocurrencies can further reduce the price of execution. For instance, in Ethereum Classic, a well-known fork of the Ethereum blockchain, the cost for optimistic execution is only a fraction of a cent.

## Performance Analysis

The protocol's heavy computations occur in rounds 1 and 3, executed by both the sender and the receiver through the algorithms `Extract` and `Encode`. We will focus on the sender's performance, as the receiver performs similar computations in reverse order.

To encode a file \( x = (x_1, \ldots, x_n) \), the sender first generates the Merkle tree \( M = M_{\text{tree}}(x) \) and stores all intermediate hashes. This results in \( n - 1 \) elements of size \( \mu \). Next, the sender encrypts each file chunk, requiring \( n \times \lambda \) hashes in total, and each hash from the Merkle tree \( M \) (an additional \( n - 1 \) hashes). Finally, the sender computes the Merkle root of the combined encoding \( r_z = M_{\text{tree}}(z_1, \ldots, z_m) \), which requires hashing \( 2m \) elements. The following estimates are derived:

\[
|z| = |x| + (n - 1) \times 32 \text{ Bytes} = n \times \lambda \times 32 \text{ Bytes}
\]

\[
\text{Runtime of Extract} = n \times \lambda \times O(H)
\]

The size of \( z \) serves as an indicator for the performance of the `Extract` algorithm and affects the communication complexity, as it needs to be transferred in the first protocol message, which is the longest message in the protocol. Our implementation of the `Encode` and `Extract` algorithms, though not optimized for runtime, achieves an encoding throughput of approximately 2 MB per second in a straightforward Node.js implementation running on a single core of a 2.67 GHz Intel Core i7 CPU with 8 GB of RAM. These estimations suggest that the protocol performs optimally for small values of \( \lambda \). Figure 7 illustrates the trade-off between the protocol's costs and its performance, measured in the overhead of encoding size relative to the file length \( \frac{|z|}{|x|} \).

## Protocol Execution

The protocol can be executed in four rounds, with each round requiring a message to be sent to the blockchain. A round ends when the message is accepted by the miners and included in a block. Cryptocurrencies ensure that a correct message (with sufficient fees) is eventually included in the blockchain, but this process may take some time. We denote the maximal round duration as \( \Delta \), and the judge contract will have timeouts \( \Delta \) to measure whether a message has been sent. The exact value of \( \Delta \) is chosen by the parties and depends on the congestion of the blockchain, the amount of fees they are willing to pay, their availability, and the number of blocks required to consider a transaction valid. The minimum duration of the protocol is four rounds, which in Ethereum can be executed in just a few minutes if both parties agree.

## Repeated Fair Exchange

For reasonably small values of \( \lambda \), the main cost for running a fair file sale consists of the deployment costs. If two parties want to repeatedly run the protocol, they can save costs by slightly modifying the contract to decouple the deployment of code and the initialization function. This allows them to reuse the same contract for repeated executions of file sales. Deploying such a modified contract costs 0.20 USD more than the standalone file sale, but each subsequent repetition of the protocol reusing the same contract only costs 1.60 USD to execute. However, even 1.60 USD is a high price to pay for fees in distributed file sharing, where these fees would need to be paid for every file transfer. Additionally, the protocol requires four slow blockchain interactions, meaning the execution will likely last at least a few minutes.

To minimize gas costs and confirmation time for repeated execution, we propose running the judge contract off-chain in a state channel. State channels allow users to execute arbitrary smart contracts off-chain without requiring interaction with the blockchain. Constructions for state channels have been proposed in earlier works, e.g., [36, 20]. In our basic system, the seller and buyer open a state channel by blocking money in a contract such that the money can only be paid out (before some timeout) if both parties agree or by forcing the execution of the judge contract. Since the parties want to execute multiple file sales, they freeze enough money in the channel.

Now, the users can run multiple fair exchange executions without costly and time-consuming interactions with the blockchain. If one party behaves maliciously (e.g., a sender does not provide the secret key for the i-th repetition of the protocol), the parties can always execute the contract for that repetition on-chain and settle their disagreement fairly. The contract is executed on the blockchain, and the funds are distributed within a predefined time.

### State Channel Networks

The above approach suffers from the drawback that when S and R want to run a fair exchange, they first need to open a state channel between each other on the blockchain. In a system with many senders and receivers who may take different roles, this would result in large overheads because opening a state channel requires a costly interaction with the blockchain. To minimize these costs, we can integrate our system into a state channel network. A state channel network allows composing multiple state channels into new, longer state channels without interacting with the blockchain. For example, if Alice has a state channel with Bob, and Bob has a state channel with Carol, Alice then also has an "implicit" state channel with Carol via Bob. Using state channel networks, a sender Alice can execute a fair exchange with Carol instantaneously via Bob without explicitly opening a state channel with Carol on the blockchain. Note that state channel networks are currently under development, and no fully functioning system has been deployed yet. Integrating fair file sale within a state channel network is an interesting direction for future research.

## Fault Attribution and Denial of Service Attacks

As soon as the judge contract is active, S can abort the protocol execution without being penalized. In the simplified version of the protocol, this does not hold for sending a false witness, allowing the sender to force R to freeze coins. The sender could initiate the protocol without knowing the actual file being sold, which cannot be prevented because R is only allowed to learn the file at the end of the protocol when the key is revealed. However, R needs to freeze his money at the beginning. A solution is to penalize S when he misbehaves. This can be achieved by letting S also freeze some money for the execution of the contract. If S behaves correctly, the money is returned; otherwise, it is sent to R. This means the contract itself allows fault attribution and compensates attacked parties.

Even with penalties, R could still run a Denial of Service (DoS) attack towards S. While DoS attacks cannot be completely prevented, adding penalties makes them more expensive and ensures the attacked parties are compensated. The receiver can request multiple files from senders without accepting the execution of the contract, forcing the sender to deploy and initialize the contract on the blockchain and compute \( z = \text{Extract}(\phi(x)) \). The financial risk of the sender can be mitigated by changing the protocol to let R deploy the contract and thus pay the fees, but this only shifts the risk to R. To mitigate the risk of attack, we propose that the sender precomputes \( z \) and uses the same encoding/key combination for all protocol executions (as long as the key was not revealed). Therefore, if R repeatedly aborts after the first round, S only has the overhead of computing \( z \) once.

## Conclusion

In this paper, we presented a protocol for the fair sale of a witness, where a judge smart contract verifies concise proofs of misbehavior. These proofs are short statements generated by the receiver if the delivered witness does not satisfy a circuit \( \phi \). We present three algorithms: `Encode`, `Extract`, and `Judge`. The `Encode` algorithm is used by the sender S to generate an encoding of \( x \) and each step of the evaluation of the circuit \( \phi(x) \). Using this encoding and the decryption key \( k \), the receiver can run `Extract` to learn the witness \( x \). If this witness does not satisfy the circuit, i.e., \( \phi(x) \neq 1 \), `Extract` outputs a concise proof of misbehavior, which can be sent to the judge contract. We show that the verification of this proof reveals if \( \phi(x) \neq 1 \), and the contract uses this information to pay out the money correctly. We argue why our protocol satisfies sender and receiver fairness and terminates after at most five rounds. In the appendix, we provide a formal proof of security in the GUC model and show that our construction securely realizes the ideal functionality for fair exchange \( F_{\text{L}}^{\text{cfe}} \). We also provide an implementation of the judge contracts and demonstrate that our protocol works efficiently for large files and can be executed at low costs.

## References

[1] Eytan Adar and Bernardo A Huberman. Free riding on gnutella. First Monday, 5(10), 2000.

[2] Ian Allison. Ethereumâs Vitalik Buterin explains how state channels address privacy and scalability, July 2016. https://tinyurl.com/n6pggct.

[3] Marcin Andrychowicz, Stefan Dziembowski, Daniel Malinowski, and Lukasz Mazurek. Secure multiparty computations on Bitcoin. In 2014 IEEE Symposium on Security and Privacy, pages 443â458, Berkeley, California, USA, May 18â21, 2014. IEEE Computer Society Press.

[4] The Internet Archive. Over 1,000,000 torrents of downloadable books, music, and movies, 2012. https://blog.archive.org/2012/08/07/over-1000000-torrents-of-downloadable-books-music-and-movies/.

[5] N. Asokan, Victor Shoup, and Michael Waidner. Optimistic fair exchange of digital signatures (extended abstract). In Kaisa Nyberg, editor, Advances in Cryptology â EUROCRYPTâ98, volume 1403 of Lecture Notes in Computer Science, pages 591â606, Espoo, Finland, May 31 â June 4, 1998. Springer, Heidelberg, Germany.

[6] Christian Badertscher, Ueli Maurer, Daniel Tschudi, and Vassilis Zikas. Bitcoin as a transaction ledger: A composable treatment. In CRYPTO 2017, pages 324â356, 2017.

[7] Waclaw Banasik, Stefan Dziembowski, and Daniel Malinowski. Efficient zero-knowledge contingent payments in cryptocurrencies without scripts. In ESORICS 2016: 21st European Symposium on Research in Computer Security, Part II, Lecture Notes in Computer Science, pages 261â280. Springer, Heidelberg, Germany, September 2016.

[8] Mihir Bellare, Georg Fuchsbauer, and Alessandra Scafuro. NIZKs with an untrusted CRS: Security in the face of parameter subversion. In Advances in Cryptology â ASIACRYPT 2016, Part II, Lecture Notes in Computer Science, pages 777â804. Springer, Heidelberg, Germany, December 2016.

[9] Eli Ben-Sasson, Alessandro Chiesa, Eran Tromer, and Madars Virza. Scalable zero knowledge via cycles of elliptic curves. In Juan A. Garay and Rosario Gennaro, editors, Advances in Cryptology â CRYPTO 2014, Part II, volume 8617 of Lecture Notes in Computer Science, pages 276â294, Santa Barbara, CA, USA, August 17â21, 2014. Springer, Heidelberg, Germany.

[10] Iddo Bentov and Ranjit Kumaresan. How to use Bitcoin to design fair protocols. In Juan A. Garay and Rosario Gennaro, editors, Advances in Cryptology â CRYPTO 2014, Part II, volume 8617 of Lecture Notes in Computer Science, pages 421â439, Santa Barbara, CA, USA, August 17â21, 2014. Springer, Heidelberg, Germany.

[11] Manuel Blum, Paul Feldman, and Silvio Micali. Non-interactive zero-knowledge and its applications (extended abstract). In 20th Annual ACM Symposium on Theory of Computing, pages 103â112, Chicago, Illinois, USA, May 2â4, 1988. ACM Press.

[12] Sean Bowe. Pay-to-sudoku, 2016.

[13] Christian Cachin and Jan Camenisch. Optimistic fair secure computation. In Mihir Bellare, editor, Advances in Cryptology â CRYPTO 2000, volume 1880 of Lecture Notes in Computer Science, pages 93â111, Santa Barbara, CA, USA, August 20â24, 2000. Springer, Heidelberg, Germany.

[14] Jan Camenisch, Manu Drijvers, Tommaso Gagliardoni, Anja Lehmann, and Gregory Neven. The wonderful world of global random oracles. Cryptology ePrint Archive, Report 2018/165, 2018. https://eprint.iacr.org/2018/165.

[15] Matteo Campanelli, Rosario Gennaro, Steven Goldfeder, and Luca Nizzardo. Zero-knowledge contingent payments revisited: Attacks and payments for services. In ACM CCS 17: 24th Conference on Computer and Communications Security, pages 229â243. ACM Press, 2017.

[16] Ran Canetti. Security and composition of multiparty cryptographic protocols. Journal of Cryptology, 13(1):143â202, 2000.

[17] Ran Canetti, Abhishek Jain, and Alessandra Scafuro. Practical UC security with a global random oracle. In Gail-Joon Ahn, Moti Yung, and Ninghui Li, editors, ACM CCS 14: 21st Conference on Computer and Communications Security, pages 597â608, Scottsdale, AZ, USA, November 3â7, 2014. ACM Press.

[18] Ran Canetti, Ben Riva, and Guy N. Rothblum. Practical delegation of computation using multiple servers. In ACM Conference on Computer and Communications Security, pages 445â454. ACM, 2011.

[19] Alessandro Chiesa, Eran Tromer, and Madars Virza. Cluster computing in zero knowledge. In Elisabeth Oswald and Marc Fischlin, editors, Advances in Cryptology â EUROCRYPT 2015, Part II, volume 9057 of Lecture Notes in Computer Science, pages 371â403, Sofia, Bulgaria, April 26â30, 2015. Springer, Heidelberg, Germany.

[20] Stefan Dziembowski, Lisa Eckey, Sebastian Faust, and Daniel Malinowski. Perun: Virtual payment hubs over cryptocurrencies. Cryptology ePrint Archive, Report 2017/635, 2017. https://eprint.iacr.org/2017/635, accepted to IEEE S&P 2019.

[21] Marc Fischlin, Anja Lehmann, Thomas Ristenpart, Thomas Shrimpton, Martijn Stam, and Stefano Tessaro. Random oracles with(out) programmability. In Masayuki Abe, editor, Advances in Cryptology â ASIACRYPT 2010, volume 6477 of Lecture Notes in Computer Science, pages 303â320, Singapore, December 5â9, 2010. Springer, Heidelberg, Germany.

[22] Irene Giacomelli, Jesper Madsen, and Claudio Orlandi. ZKBoo: Faster zero-knowledge for boolean circuits. In USENIX Security Symposium, pages 1069â1083. USENIX Association, 2016.

[23] Oded Goldreich. Foundations of Cryptography: Volume 1. Cambridge University Press, New York, NY, USA, 2006.

[24] Oded Goldreich, Silvio Micali, and Avi Wigderson. How to play any mental game or A completeness theorem for protocols with honest majority. In Alfred Aho, editor, 19th Annual ACM Symposium on Theory of Computing, pages 218â229, New York City, New York, USA, May 25â27, 1987. ACM Press.

[25] Marek Jawurek, Florian Kerschbaum, and Claudio Orlandi. Zero-knowledge using garbled circuits: How to prove non-algebraic statements efficiently. In Ahmad-Reza Sadeghi, Virgil D. Gligor, and Moti Yung, editors, ACM CCS 13: 20th Conference on Computer and Communications Security, pages 955â966, Berlin, Germany, November 4â8, 2013. ACM Press.

[26] Murat Karakaya, Ä°brahim KÃ¶roÄlu, and ÃzgÃ¼r Ulusoy. Counteracting free riding in peer-to-peer networks. Computer Networks, 52(3):675â694, 2008.

[27] Jonathan Katz, Ueli Maurer, BjÃ¶rn Tackmann, and Vassilis Zikas. Universally composable synchronous computation. In Amit Sahai, editor, TCC 2013: 10th Theory of Cryptography Conference, volume 7785 of Lecture Notes in Computer Science, pages 477â498, Tokyo, Japan, March 3â6, 2013. Springer, Heidelberg, Germany.

[28] Aggelos Kiayias, Hong-Sheng Zhou, and Vassilis Zikas. Fair and robust multi-party computation using a global transaction ledger. Cryptology ePrint Archive, Report 2015/574, 2015. Accepted to EUROCRYPTâ16, http://eprint.iacr.org/.

[29] Aggelos Kiayias, Hong-Sheng Zhou, and Vassilis Zikas. Fair and robust multi-party computation using a global transaction ledger. In EUROCRYPT 2016, pages 705â734, 2016.

[30] Ranjit Kumaresan and Iddo Bentov. Amortizing secure computation with penalties. In ACM CCS 16: 23rd Conference on Computer and Communications Security, pages 418â429. ACM Press, 2016.

[31] Ranjit Kumaresan, Vinod Vaikuntanathan, and Prashant Nalini Vasudevan. Improvements to secure computation with penalties. In ACM CCS 16: 23rd Conference on Computer and Communications Security, pages 406â417. ACM Press, 2016.

[32] Alptekin KÃ¼pÃ§Ã¼ and Anna Lysyanskaya. Usable optimistic fair exchange. Computer Networks, 56(1):50â63, 2012.

[33] Morgan G. I. Langille and Jonathan A. Eisen. BioTorrents: A file sharing service for scientific data. PLoS ONE, 5(4):1â5, 04 2010.

[34] Henry Z. Lo and Joseph Paul Cohen. Academic Torrents: Scalable data distribution. CoRR, abs/1603.04395, 2016.

[35] Lee Mathews. Windows 10 lets you torrent updates and apps, 2015. http://www.geek.com/microsoft/windows-10-lets-you-torrent-updates-and-apps-1618036.

[36] Andrew Miller, Iddo Bentov, Ranjit Kumaresan, and Patrick McCorry. Sprites: Payment channels that go faster than lightning. CoRR, abs/1702.05812, 2017.

[37] Jesper Buus Nielsen. Separating random oracle proofs from complexity theoretic proofs: The non-committing encryption case.