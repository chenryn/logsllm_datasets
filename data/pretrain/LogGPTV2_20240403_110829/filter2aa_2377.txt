Towards a Trusted Immutable Kernel Extension (TIKE) for Self-Healing Systems:
a Virtual Machine Approach
Julian B. Grizzard, Eric R. Dodson, Gregory J. Conti, John G. Levine, Henry L. Owen
Georgia Institute of Technology; Atlanta, Georgia 30332–0250
Phone: 404.894.2955 Fax: 404.894.9959 Email: PI:EMAIL (presenter)
Abstract—
The conventional method to restore a compromised sys-
tem is to wipe the system clean, install from known good
media, and patch with the latest updates: a costly, restric-
tive, and ineﬃcient method.
An alternative method is to
monitor the host and restore trust if a compromise occurs.
When this method is automated, the system is said to be
self-healing.
One critical requirement of a self-healing sys-
tem is that the self-healing mechanism itself must not be
compromised. Our solution to this requirement is a Trusted
Immutable Kernel Extension (TIKE) by way of a virtual
machine. Using a host operating system as a trusted plat-
form, we discuss a self-healing system that uses existing
intrusion detection systems and corresponding self-healing
mechanisms to automatically heal the guest operating sys-
tem once a compromise has occurred.
I. Overview
The conventional method to recover from a system com-
promise is to wipe the system clean and perform a fresh
installation. As an alternative, it has been suggested that
computers can model the human immune system [1]. Our
method is to automatically re-establish trust in the com-
promised system or to build a self-healing system. How-
ever, in most existing systems the entire state, including
the kernel, can be altered to an untrusted state once an at-
tacker has gained root-level privileges [2]. Hence, even the
self-healing mechanism itself could be compromised. In or-
der to further explore the notion of self-healing systems,
a core foundation of trust is needed.
Our solution is a
Trusted Immutable Kernel Extension (TIKE), and we ex-
plore this concept with a virtual machine approach. TIKE
can be used as a safe haven for self-monitoring and self-
healing a system. Eventually this work can be extended to
the distributed environment to extend the work of Ostro-
vsky and Yung [3] so that an entire computer network can
model the human immune system.
Figure 1 shows an overview of the TIKE Architecture.
The guest system is considered to be the production system.
The guest applications include common user applications
such as email programs, web browsers, system tools, and
so forth. The TIKE applications are the tools that monitor
and repair the guest system. The TIKE applications run in
the host system and are therefore isolated from the guest
system. We assume the integrity of the host machine will
not be compromised. Therefore, the host system should
Virtual Machine
Proxy Calls
Self−Heal / IDS Calls
Host Kernel
TIKE Applications
Host User Space
Physical Machine
Guest User Space
Applications
Guest
Guest Kernel
Fig. 1.
Overview of TIKE Architecture
be completely transparent, isolated, and inaccessible from
inside the guest system. Terra is an example of other work
that uses virtual machines for isolation and security [4].
II. Design Principles
A. TIKE Requirements
The requirements of TIKE are embedded in its name, a
Trusted Immutable Kernel Extension. Below, we describe
the three core requirements of TIKE.
• Trusted – TIKE must report accurate information about
the state of a host, which means the information can be
trusted to be true.
Furthermore, in the realm of self-
healing, TIKE must be trusted to correctly self-heal the
system.
• Immutable – In order for TIKE to be trusted, it must
be immutable. If an attacker compromises a system, the
attacker must not be able to compromise TIKE. Further,
the attacker must not be able to disable TIKE’s services.
• Kernel Extension – In order to monitor the entire state
of the system, TIKE must exist at the kernel level.
In addition to the requirements listed above, TIKE must
have the capability to examine and modify any state within
the host. Furthermore, TIKE should have a small impact
on system performance that is not noticeable to the user
under normal operations.
B. TIKE Virtual Machine Architecture and Operation
The TIKE virtual machine architecture consists of a host
operating system and a guest operating system. The host
operating system is considered the core element of trust
that is immutable, or the Trusted Immutable Kernel Ex-
tension. Normal users (even those with root access) are
not provided access to the host operating system.
The
host operating system has complete visibility of the entire
guest system. Normal users will have accounts with the
required level of access on the guest operating system.
The host operating system boots up on the physical
hardware.
After the host operating system is loaded, it
then loads the guest operating system.
Once the guest
operating system is running, TIKE applications can be
launched on the host operating system to monitor, repair,
or otherwise control the guest operating system.
One of the key ideas to note is that there is a small well
deﬁned interface between the guest operating system and
the host operating system. From a remote location, there
is no other interface to the host operating system (i.e. the
host O.S. is isolated from the network). The problem of
proving whether or not it is possible for the host operating
system (i.e. TIKE) to be compromised is thus greatly re-
duced to proving that a very simple interface is correct and
that the TIKE applications are correct, which is arguably
more feasible than proving that an entire operating system
is correct.
III. Self-Monitoring and Self-Healing
Using the TIKE architecture, self-monitoring and self-
healing mechanisms can be installed on the host operat-
ing system, isolated from the guest or production system.
These mechanisms can monitor the production system and
repair or heal any compromises that occur. Existing intru-
sion detection systems can be used for both real-time and
post-intrusion analysis.
One of the diﬃculties with this architecture is that vis-
ibility inside the guest operating system is limited. It is
possible to see the entire state of the guest operating sys-
tem from the host operating system but some complexities
exists.
For example, it is possible to read the guest ﬁle
system but it proves diﬃcult to read I/O caches since this
may require parsing the guest operating system’s kernel
data structures. We will continue to look at solutions to
this problem.
IV. Limitations
The TIKE architecture we have described is a step for-
ward towards building a Trusted Immutable Kernel Exten-
sion. However there are some limitations that we would like
to note. First, one assumption that we make is that there
are no vulnerabilities in the layer between the guest operat-
ing system and the host operating system. If this assump-
tion is false, then the whole model dissolves. However, our
argument is that this interface is suﬃciently simple, which
should enable substantially easier veriﬁability than say a
full blown operating system. Another limitation is perfor-
mance. With a virtual machine architecture, system per-
formance will be eﬀected. However, the argument is that
many production systems in use today and the foreseeable
future have far more power than is required. A ﬁnal limi-
tation that we will point out is that this architecture alone
oﬀers no protection from physical security. The architec-
ture focuses on protecting systems from remote attackers.
A local attacker could, for instance, boot the system from
a cdrom or other bootable medium and obtain full control
over the system.
V. Closing and Future Work
We have provided an overview for a Trusted Immutable
Kernel Extension by way of a virtual machine. The guest
operating system is considered the production system and
the host operating system is considered TIKE. The TIKE
architecture is an enabling architecture that can provide
self-monitoring and self-healing mechanisms with a safe
haven so that the mechanisms themselves are not compro-
mised. Future work will include a more rigorous examina-
tion of the interface between guest operating system and
host operating system, methods to increase visibility in-
side the guest operating system, guest kernel self-healing
mechanisms, and methods to withstand local attacks. Fi-
nally, we realize that other architectures exists other than
the virtual machine approach that meet the requirements
of TIKE, such as implementing a hardware module.
VI. Acknowledgments
The authors would like to thank Dr. Karsten Schwan
for his valuable guidance and direction, Ivan Ganev for his
suggestions, Dr. Wenke Lee for his insights into intrusion
detection systems, and Dr. Mustaque Ahamad for his crit-
ical review and comments on trusted computing systems.
We would also like to extend our thanks to the anonymous
reviewers for their valuable comments.
References
[1] S. Forrest, S. A. Hofmeyr, and A. Somayaji, “Computer Immunol-
ogy,” Commun. ACM, vol. 40, no. 10, pp. 88–96, 1997.
[2] J. Levine, J. Grizzard, and H. Owen, “A Methodology to Detect
and Characterize Kernel Level Rootkit Exploits Involving Redi-
rection of the System Call Table,” in 2nd IEEE International
Information Assurance Workshop, pp. 107–125, IEEE, 2004.
[3] R. Ostrovsky and M. Yung, “How to Withstand Mobile Virus
Attacks (extended abstract),” in Proceedings of the tenth An-
nual ACM Symposium on Principles of Distributed Computing,
pp. 51–59, ACM Press, 1991.
[4] T. Garﬁnkel, B. Pfaﬀ, J. Chow, M. Rosenblum, and D. Boneh,
“Terra: a Virtual Machine-Based Platform for Trusted Comput-
ing,” in Proceedings of the nineteenth ACM Symposium on Op-
erating Systems Principles, pp. 193–206, ACM Press, 2003.