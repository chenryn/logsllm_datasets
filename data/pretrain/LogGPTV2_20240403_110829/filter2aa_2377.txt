# Towards a Trusted Immutable Kernel Extension (TIKE) for Self-Healing Systems: A Virtual Machine Approach

**Authors:**
- Julian B. Grizzard
- Eric R. Dodson
- Gregory J. Conti
- John G. Levine
- Henry L. Owen

**Institution:**
- Georgia Institute of Technology, Atlanta, Georgia 30332–0250
- Phone: 404.894.2955
- Fax: 404.894.9959
- Email: PI:EMAIL (presenter)

## Abstract

The traditional method for restoring a compromised system involves wiping the system clean, reinstalling from known good media, and applying the latest updates. This approach is costly, restrictive, and inefficient. An alternative method is to monitor the host and automatically restore trust if a compromise occurs, creating a self-healing system. A critical requirement for a self-healing system is that the self-healing mechanism itself must remain uncompromised. Our solution, the Trusted Immutable Kernel Extension (TIKE), leverages a virtual machine to ensure the integrity of the self-healing mechanism. Using the host operating system as a trusted platform, we discuss how existing intrusion detection systems and corresponding self-healing mechanisms can be used to automatically heal the guest operating system once a compromise has been detected.

## 1. Overview

The conventional method for recovering from a system compromise involves wiping the system clean and performing a fresh installation. As an alternative, it has been suggested that computers can model the human immune system [1]. Our approach is to automatically re-establish trust in a compromised system, or to build a self-healing system. However, in most existing systems, the entire state, including the kernel, can be altered to an untrusted state once an attacker gains root-level privileges [2]. Therefore, even the self-healing mechanism itself could be compromised. To address this, we propose a Trusted Immutable Kernel Extension (TIKE) using a virtual machine approach. TIKE serves as a safe haven for self-monitoring and self-healing. This work can be extended to a distributed environment, building on the research by Ostrovsky and Yung [3], to enable an entire computer network to model the human immune system.

Figure 1 provides an overview of the TIKE architecture. The guest system is the production system, running common user applications such as email programs, web browsers, and system tools. The TIKE applications, which run in the host system, are responsible for monitoring and repairing the guest system. We assume the host machine's integrity will not be compromised, ensuring that the host system remains transparent, isolated, and inaccessible from within the guest system. Terra [4] is an example of other work that uses virtual machines for isolation and security.

![Overview of TIKE Architecture](fig1.png)

## 2. Design Principles

### 2.1 TIKE Requirements

The requirements for TIKE are embedded in its name: a Trusted Immutable Kernel Extension. The three core requirements are:

- **Trusted:** TIKE must provide accurate information about the state of the host, ensuring that the information can be trusted. In the context of self-healing, TIKE must be trusted to correctly heal the system.
- **Immutable:** For TIKE to be trusted, it must be immutable. An attacker who compromises the system should not be able to compromise TIKE or disable its services.
- **Kernel Extension:** To monitor the entire state of the system, TIKE must operate at the kernel level.

Additionally, TIKE must have the capability to examine and modify any state within the host. It should also have a minimal impact on system performance, remaining unnoticeable to the user under normal operations.

### 2.2 TIKE Virtual Machine Architecture and Operation

The TIKE virtual machine architecture consists of a host operating system and a guest operating system. The host operating system is the core element of trust, considered immutable and referred to as the Trusted Immutable Kernel Extension. Normal users, even those with root access, do not have access to the host operating system. The host operating system has complete visibility of the entire guest system, while normal users have accounts with the necessary access levels on the guest operating system.

The host operating system boots up on the physical hardware. After loading, it then loads the guest operating system. Once the guest operating system is running, TIKE applications can be launched on the host operating system to monitor, repair, or control the guest operating system.

A key feature of this architecture is the small, well-defined interface between the guest and host operating systems. The host operating system is isolated from the network, reducing the problem of proving its integrity to verifying a simple interface and the correctness of TIKE applications, which is more feasible than proving the correctness of an entire operating system.

## 3. Self-Monitoring and Self-Healing

Using the TIKE architecture, self-monitoring and self-healing mechanisms can be installed on the host operating system, isolated from the guest or production system. These mechanisms can monitor the production system and repair or heal any compromises that occur. Existing intrusion detection systems can be used for both real-time and post-intrusion analysis.

One challenge with this architecture is the limited visibility inside the guest operating system. While the host operating system can see the entire state of the guest, some complexities exist. For example, reading the guest file system is possible, but reading I/O caches may require parsing the guest operating system's kernel data structures. We are continuing to explore solutions to this problem.

## 4. Limitations

The TIKE architecture represents a step forward in building a Trusted Immutable Kernel Extension, but there are some limitations. First, we assume there are no vulnerabilities in the layer between the guest and host operating systems. If this assumption is false, the entire model fails. However, we argue that this interface is sufficiently simple, making it easier to verify than a full operating system. Another limitation is performance; the virtual machine architecture may affect system performance. However, many production systems today and in the foreseeable future have more power than required. Finally, this architecture does not protect against physical security threats; it focuses on protecting systems from remote attackers. A local attacker could, for instance, boot the system from a CD-ROM or other bootable medium and gain full control.

## 5. Closing and Future Work

We have provided an overview of a Trusted Immutable Kernel Extension using a virtual machine approach. The guest operating system is the production system, and the host operating system is TIKE. The TIKE architecture enables self-monitoring and self-healing mechanisms in a secure environment, ensuring that the mechanisms themselves are not compromised. Future work will include a more rigorous examination of the interface between the guest and host operating systems, methods to increase visibility inside the guest operating system, guest kernel self-healing mechanisms, and methods to withstand local attacks. We also recognize that other architectures, such as hardware modules, could meet the requirements of TIKE.

## 6. Acknowledgments

The authors would like to thank Dr. Karsten Schwan for his valuable guidance and direction, Ivan Ganev for his suggestions, Dr. Wenke Lee for his insights into intrusion detection systems, and Dr. Mustaque Ahamad for his critical review and comments on trusted computing systems. We also extend our thanks to the anonymous reviewers for their valuable comments.

## References

[1] S. Forrest, S. A. Hofmeyr, and A. Somayaji, “Computer Immunology,” Commun. ACM, vol. 40, no. 10, pp. 88–96, 1997.

[2] J. Levine, J. Grizzard, and H. Owen, “A Methodology to Detect and Characterize Kernel Level Rootkit Exploits Involving Redirection of the System Call Table,” in 2nd IEEE International Information Assurance Workshop, pp. 107–125, IEEE, 2004.

[3] R. Ostrovsky and M. Yung, “How to Withstand Mobile Virus Attacks (extended abstract),” in Proceedings of the Tenth Annual ACM Symposium on Principles of Distributed Computing, pp. 51–59, ACM Press, 1991.

[4] T. Garfinkel, B. Pfaff, J. Chow, M. Rosenblum, and D. Boneh, “Terra: A Virtual Machine-Based Platform for Trusted Computing,” in Proceedings of the Nineteenth ACM Symposium on Operating Systems Principles, pp. 193–206, ACM Press, 2003.