#include  
#include  
#include  
#include  
#define C1 0x5D7E0D1F2E0F1F84 
#define C2 0x388D76AEE8CB1500 
#define C3 0xD2E9EE7E83C4285B 
uint64_t hash(uint64_t v) 
{ 
        v*=C1; 
        v=_lrotr(v, v&0xF); // rotate right 
        v^=C2; 
        v=_lrotl(v, v&0xF); // rotate left 
        v+=C3; 
        v=_lrotl(v, v % 60); // rotate left 
        return v; 
}; 
int main()  
{ 
        printf ("%llu\n", hash(...)); 
}; 
除了密码专家之外，没什么人能够根据 hash 值逆推原始数据。旋转位左/右移指令足以令人望而却步——
它能够保证映射函数不是单满射函数，而且还保留了碰撞的可能性；说得直白一些就是“多个输入可能产生
同一个输出”。 
由于这个函数采用了 64 位因子，所以暴力破解也不太现实。 
77.2  Z3 SMT 求解法 
在加密学知识不足的情况下，我们可以使用微软研究团队发布的Z3 工具
①
① http://z3.codeplex.com/。 
尝试破解。虽然它只是个形
异步社区会员 dearfuture(15918834820) 专享 尊重版权
726 
逆向工程权威指南（下册） 
式验证工具，但是我们将用它来作SMT求解。也就是说，我们要用Z3 来求解巨型方程式。 
我们使用的 Python 源代码如下： 
 1  from z3 import * 
 2 
 3  C1=0x5D7E0D1F2E0F1F84 
 4  C2=0x388D76AEE8CB1500 
 5  C3=0xD2E9EE7E83C4285B 
 6 
 7  inp, i1, i2, i3, i4, i5, i6, outp = BitVecs('inp i1 i2 i3 i4 i5 i6 outp', 64) 
 8 
 9  s = Solver() 
10  s.add(i1==inp*C1) 
11  s.add(i2==RotateRight (i1, i1 & 0xF)) 
12  s.add(i3==i2 ^ C2) 
13  s.add(i4==RotateLeft(i3, i3 & 0xF)) 
14  s.add(i5==i4 + C3) 
15  s.add(outp==RotateLeft (i5, URem(i5, 60))) 
16 
17  s.add(outp==10816636949158156260) 
18 
19  print s.check() 
20  m=s.model() 
21  print m 
22  print (" inp=0x%X" % m[inp].as_long()) 
23  print ("outp=0x%X" % m[outp].as_long()) 
程序的第 7 行声明了各个变量。这些都是 64 位变量。其中，i1～i6 都是中间变量（形参），在各个指
令之间传递寄存器的值。 
第 10～15 行之间是我们添加的约束条件。这些条件之中，第 17 行限定的约束条件最为重要：在使用
这个函数时，我们要查找输出值为 10816636949158156260 的输入值。 
本质上说，基于 SMT 的求解方法可以搜索满足全部限定条件的所有输入值。 
上述程序中的 RotateRight、RotateLeft 和 URem 都是 Z3 提供的 Python API。它们都不是 Python 语言提供的
标准指令。 
然后运行上述程序： 
...>python.exe 1.py 
sat 
[i1 = 3959740824832824396, 
 i3 = 8957124831728646493, 
 i5 = 10816636949158156260, 
 inp = 1364123924608584563, 
 outp = 10816636949158156260, 
 i4 = 14065440378185297801, 
 i2 = 4954926323707358301] 
 inp=0x12EE577B63E80B73 
outp=0x961C69FF0AEFD7E4 
程序输出中的“sat”是“satisfiable（满足条件的值）”的缩写。这就是说，我们的求解方法至少可以
找到一个解。程序用方括号把最终解标注了出来。屏幕输出的最后两行是用 16 进制显示的输入、输出值。
如果把 0x12EE577B63E80B73 代入原函数的输入变量，那么它的输出值与我们指定的值相符。 
另外需要注意的是，因为原函数不是单满射函数，所以可能存在多个符合条件的输入值。不过，网上
公开的 Z3 SMT 求解程序只会计算出一组解。为此，我们对上面的程序稍加修改，添加了第 19 行，让程
序“探寻其他的解”： 
 1  from z3 import * 
 2 
 3  C1=0x5D7E0D1F2E0F1F84 
 4  C2=0x388D76AEE8CB1500 
 5  C3=0xD2E9EE7E83C4285B 
 6 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 77 章  人工反编译与 Z3 SMT 求解法 
727 
 7  inp, i1, i2, i3, i4, i5, i6, outp = BitVecs('inp i1 i2 i3 i4 i5 i6 outp', 64) 
 8 
 9  s = Solver() 
10  s.add(i1==inp*C1) 
11  s.add(i2==RotateRight (i1, i1 & 0xF)) 
12  s.add(i3==i2 ^ C2) 
13  s.add(i4==RotateLeft(i3, i3 & 0xF)) 
14  s.add(i5==i4 + C3) 
15  s.add(outp==RotateLeft (i5, URem(i5, 60))) 
16 
17  s.add(outp==10816636949158156260) 
18 
19  s.add(inp!=0x12EE577B63E80B73) 
20 
21  print s.check() 
22  m=s.model() 
23  print m 
24  print (" inp=0x%X" % m[inp].as_long()) 
25  print ("outp=0x%X" % m[outp].as_long()) 
这样一来，它就可以求得另一组解： 
...>python.exe 2.py 
sat 
[i1 = 3959740824832824396, 
 i3 = 8957124831728646493, 
 i5 = 10816636949158156260, 
 inp = 10587495961463360371, 
 outp = 10816636949158156260, 
 i4 = 14065440378185297801, 
 i2 = 4954926323707358301] 
 inp=0x92EE577B63E80B73 
 outp=0x961C69FF0AEFD7E4 
人工排除已知解的方法不太先进。其实程序可以自动地修改约束条件，并且自行排除已知解，以便自
动化地求得所有解。自行求得全部解的程序十分精巧： 
 1  from z3 import * 
 2 
 3  C1=0x5D7E0D1F2E0F1F84 
 4  C2=0x388D76AEE8CB1500 
 5  C3=0xD2E9EE7E83C4285B 
 6 
 7  inp, i1, i2, i3, i4, i5, i6, outp = BitVecs('inp i1 i2 i3 i4 i5 i6 outp', 64) 
 8 
 9  s = Solver() 
10  s.add(i1==inp*C1) 
11  s.add(i2==RotateRight (i1, i1 & 0xF)) 
12  s.add(i3==i2 ^ C2) 
13  s.add(i4==RotateLeft(i3, i3 & 0xF)) 
14  s.add(i5==i4 + C3) 
15  s.add(outp==RotateLeft (i5, URem(i5, 60))) 
16 
17  s.add(outp==10816636949158156260) 
18 
19  # copypasted  from http://stackoverflow.com/questions/11867611/z3py-checking-all-solutions-for-equation 
20  result=[] 
21  while True: 
22       if s.check() == sat: 
23            m = s.model() 
24            print m[inp] 
25            result.append(m) 
26            # Create a new constraint the blocks the current model 
27            block = [] 
28            for d in m: 
29                 # d is a declaration 
30                 if d.arity() > 0: 
31                      raise Z3Exception("uninterpreted functions are not supported") 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
728 
逆向工程权威指南（下册） 
32                 # create a constant from declaration 
33                 c=d() 
34                 if is_array(c) or c.sort().kind() == Z3_UNINTERPRETED_SORT: 
35                      raise Z3Exception("arrays and uninterpreted sorts are not supported") 
36                 block.append(c != m[d]) 
37            s.add(Or(block)) 
38       else: 
39                 print "results total=",len(result) 
40                 break 
运行上述程序，可得： 
1364123924608584563 
1234567890 
9223372038089343698 
4611686019661955794 
13835058056516731602 
3096040143925676201 
12319412180780452009 
7707726162353064105 
16931098199207839913 
1906652839273745429 
11130024876128521237 
15741710894555909141 
6518338857701133333 
5975809943035972467 
15199181979890748275 
10587495961463360371 
results total= 16 
可见，总共有 16 个输入值满足条件“输出值为 0x92EE577B63E80B73”。 
第二个解是 1234567890。在编写本文时，笔者使用的输入值正是这个数。 
接下来，我们要更深入地讨论程序的算法。在这些解里面，有没有低 32 位与输出值的低 32 位相等的解？ 
为此，我们修改本章的第一个脚本程序，对第 17 行的限定条件进行修改： 
 1  from z3 import * 
 2  
 3  C1=0x5D7E0D1F2E0F1F84 
 4  C2=0x388D76AEE8CB1500 
 5  C3=0xD2E9EE7E83C4285B 
 6 
 7  inp, i1, i2, i3, i4, i5, i6, outp = BitVecs('inp i1 i2 i3 i4 i5 i6 outp', 64) 
 8 
 9  s = Solver() 
10  s.add(i1==inp*C1) 
11  s.add(i2==RotateRight (i1, i1 & 0xF)) 
12  s.add(i3==i2 ^ C2) 
13  s.add(i4==RotateLeft(i3, i3 & 0xF)) 
14  s.add(i5==i4 + C3) 
15  s.add(outp==RotateLeft (i5, URem(i5, 60))) 
16 
17  s.add(outp & 0xFFFFFFFF == inp & 0xFFFFFFFF) 
18 
19  print s.check() 
20  m=s.model() 
21  print m 
22  print (" inp=0x%X" % m[inp].as_long()) 
23  print ("outp=0x%X" % m[outp].as_long()) 
上述程序证明，确实存在这种解： 
sat 
[i1 = 14869545517796235860, 
 i3 = 8388171335828825253, 
 i5 = 6918262285561543945, 
 inp = 1370377541658871093, 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 77 章  人工反编译与 Z3 SMT 求解法 
729 
 outp = 14543180351754208565, 
 i4 = 10167065714588685486, 
 i2 = 5541032613289652645] 
 inp=0x13048F1D12C00535 
outp=0xC9D3C17A12C00535 
在此基础上，我们再添加一个约束条件——验证是否存在“最后 16 位是 0x1234”的解： 
 1  from z3 import * 
 2 
 3  C1=0x5D7E0D1F2E0F1F84 
 4  C2=0x388D76AEE8CB1500 
 5  C3=0xD2E9EE7E83C4285B 
 6 
 7  inp, i1, i2, i3, i4, i5, i6, outp = BitVecs('inp i1 i2 i3 i4 i5 i6 outp', 64) 
 8 
 9  s = Solver() 
10  s.add(i1==inp*C1) 
11  s.add(i2==RotateRight (i1, i1 & 0xF)) 
12  s.add(i3==i2 ^ C2) 
13  s.add(i4==RotateLeft(i3, i3 & 0xF)) 
14  s.add(i5==i4 + C3) 
15  s.add(outp==RotateLeft (i5, URem(i5, 60))) 
16 
17  s.add(outp & 0xFFFFFFFF == inp & 0xFFFFFFFF) 
18  s.add(outp & 0xFFFF == 0x1234) 
19 
20  print s.check() 
21  m=s.model() 
22  print m 
23  print (" inp=0x%X" % m[inp].as_long()) 
24  print ("outp=0x%X" % m[outp].as_long()) 
即使有如此苛刻的约束条件，程序仍然算出了一个解： 
sat 
[i1 = 2834222860503985872, 
 i3 = 2294680776671411152, 
 i5 = 17492621421353821227, 
 inp = 461881484695179828, 
 outp = 419247225543463476, 
 i4 = 2294680776671411152, 
 i2 = 2834222860503985872] 
 inp=0x668EEC35F961234 
outp=0x5D177215F961234 
Z3 函数的破解速度非常快。这说明原始算法十分脆弱，根本算不上加密算法。业余人员自制的算法多
数都是这样。 
这种方法是否可以破解那些真正专业的加密算法呢？虽然像 AES、RSA 这样的加密算法都同样属于大
规模方程组，但是其计算规模非常之大，以至于未来几年的计算机系统都不可能对其进行破解。当然，加
密学专家非常清楚这件事。 
总而言之，SMT/SAT 求解程序（例如 Z3）可以处理非专业的加密算法。 
另外，我还写过一篇与 Z3 有关的博客。有兴趣的读者可查阅参考文献[Yur12]。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 7788 章
章    加
加    密
密    狗
狗  
78.1  例 1：PowerPC 平台的 MacOS Classic 程序 
本例研究的是一款运行在 PowerPC 平台上的 MacOS Classic 程序。研发这款程序的公司早已经不知去向，
所以买家十分害怕加密狗出什么意外。 
在不插入加密狗的情况下，程序会显示“Invalid Security Device”信息。非常幸运的是，这个字符串就
在程序的可执行文件里。 
虽然那时我即不熟悉 Mac OS Classic 系统，也没怎么用过 PowerPC，但是还是放手一搏。 
IDA 可以毫无困难地打开这个程序。它判断该文件类型为“PEF (Mac OS or Be OS executable)”。标准
的 Mac OS Classic 的程序文件的确采用了这种文件格式。 
接下来，在文件里搜索错误信息的字符串时，我找到了下述指令： 
... 
seg000:000C87FC 38 60 00 01 
li      %r3, 1 
seg000:000C8800 48 03 93 41   
bl      check1 
seg000:000C8804 60 00 00 00   
nop 
seg000:000C8808 54 60 06 3F   
clrlwi. %r0, %r3, 24 
seg000:000C880C 40 82 00 40   
bne     OK 
seg000:000C8810 80 62 9F D8   
lwz     %r3, TC_aInvalidSecurityDevice 
... 
这些都是 PowerPC 平台的指令。这款 CPU 是 20 世纪 90 年代出产的一款典型的 32 位 RISC CPU。它
的每条指令都占用 4 个字节（与 MIPS 和 ARM 的指令相似），指令名称还与 MIPS 指令相似。 
为了便于演示，我把函数名称改为 check1()。BL 是 Brach Link 指令，常用于调用子函数。上述程序的关
键点是 BNE 指令，在程序通过了加密狗认证的情况下进行跳转，否则就会在 r3 寄存器里加载字符串，然后
报错。 
在参阅了参考文献［SK95］之后，我发现 r3 寄存器用于存储返回值。如果返回值是 64 位数据，那么
r4 寄存器也会用于回传返回值。 
另外，CLRLWI指令
①
① CLRLWI 是 Clear left word immediate 的缩写，用于清除指定的高/前 n 位，再把结果复制到目标操作符。 
还是当时的盲点。后来我阅读了参考文献［IBM00］，获悉它是清除和传递数据
的复合指令。本例的这个指令会清除r3 寄存器的高 24 位，把结果存储在r0 寄存器里。所以，它不仅相当于x86
的MOVZX指令（可参见本书 15.1.1 节），而且还能设置相应标识位，向后面的BNE指令传递标识信息。 
接下来，我们探索一下 check 1()函数： 
seg000:00101B40         
check1: # CODE XREF: seg000:00063E7Cp 
seg000:00101B40                  
   # sub_64070+160p ... 
seg000:00101B40  