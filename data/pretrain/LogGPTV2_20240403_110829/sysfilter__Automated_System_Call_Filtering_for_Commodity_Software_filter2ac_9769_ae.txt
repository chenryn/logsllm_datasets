### Syscall Usage and FCG Approximation

We observe that certain libraries, such as `libgcrypt` and `libcrypto`, directly invoke specific syscalls like `getrandom` and `keyctl` to handle cryptographic operations. This direct invocation is often due to the unavailability or insufficiency of existing wrappers. Additionally, other low-level system calls, such as `futex` and `gettid`, are also frequently used.

#### Effectiveness of FCG Approximation

Figure 7 illustrates the number of syscalls extracted from each binary using three FCG approximation methods: DCG, DCG ∪ ACG, and VCG. The binaries are sorted by the syscall count for the VCG method. Each binary is represented by three points on the figure, one for each method. For our dataset, the VCG method consistently provides a safe, tight over-approximation of the FCG, with the syscall count always falling between that of DCG and DCG ∪ ACG.

#### Dataset and Processing

Our analysis includes packages from the three major Debian repositories: `main`, `contrib`, and `nonfree`. At the time of writing, the Debian sid distribution contains over 50,000 packages for the x86-64 architecture. We exclude packages that do not contain executable code, such as documentation, development headers, and debug symbols. We also exclude meta-packages, virtual packages, and architecture-agnostic packages without x86-64 binaries. Shared libraries and other excluded packages can be installed as dependencies during processing. In total, we processed 33,829 binaries across 8,922 packages, with 30,398 (91.3%) being analyzed successfully. The median runtime for the extraction tool is about 30 seconds per binary, with 90% of binaries completing within 200 seconds. For a single FCG pass, the median runtime is reduced to about 10 seconds per binary.

#### Syscall Distribution

Many binaries use only a small portion of the syscall API. Figure 6 shows the distribution of the number of syscalls used by each binary. The median number of syscalls per binary is relatively low, indicating that most applications do not require extensive syscall functionality.

#### CVE Analysis

Table 2 presents an analysis of the effectiveness of our approach in identifying binaries that use syscalls related to known vulnerabilities. The table lists various CVEs, the associated syscalls, the type of vulnerability, and the number (and percentage) of binaries that use the relevant syscalls. For example, CVE-2019-11815, which involves memory corruption, affects 19,558 (64.34%) of the binaries. Underlined entries correspond to vulnerabilities that involve namespaces.

#### Value-Tracking Approach

By employing our value-tracking approach, `sysfilter` can resolve approximately 89% of all `dlsym` arguments, 37% of all `dlopen` arguments, and 30% of all `execve` arguments. We observed a few cases where value-tracking fails, particularly in common libraries. For instance, about 50% of `dlsym` failures relate to NSS functionality, while about 5% of `dlopen` failures involve Kerberos plugins. In two isolated cases, `sysfilter` was unable to construct syscall sets: Qemu and stress-ng contain arbitrary syscall dispatchers, which is expected given their functionality. Otherwise, syscall sites follow the pattern `mov $SYS_NR, %eax; syscall`.

### Related Work

#### Syscall-Usage Analysis

Tsai et al. [88] conducted a similar study on Ubuntu v15.04 to characterize the usage of the syscall API, as well as other APIs like `ioctl`, `fcntl`, `prctl`, and pseudo-filesystem APIs. Their focus was on quantifying API complexity and security-related usage trends. Our study, on the other hand, specifically targets the syscall API to evaluate our extraction tool. We aim to make the analysis more scalable, precise, and complete. Unlike Tsai et al., our call graph construction approach considers initialization/finalization code and identifies AT functions in global struct/union/C++ object initializers.

#### Static System Call Filtering

Syscall filtering has been extensively studied in various contexts. Wagner and Dean [89] used static analysis techniques to model sequences of valid syscalls as a non-deterministic finite automaton (NDFA). Their work, along with others from the same era [22], aimed to build models of program execution for intrusion detection. In contrast, `sysfilter` focuses on building optimized (OS-enforceable) seccomp-BPF filters by determining the total set of syscalls, independent of ordering. This provides a more compact representation and eliminates the challenges related to control flow modeling. `sysfilter` employs binary analysis, whereas Wagner and Dean's work requires recompiling target binaries and shared libraries, limiting deployability.

Shredder [55] performs static analysis on Windows binaries to identify API calls and arguments used by applications. Unlike Shredder, `sysfilter` safely over-approximates a program’s true syscall set, ensuring it does not break program execution.

#### seccomp-BPF in Existing Software

Applications like Firefox [57], Chrome [8], and OpenSSH [63] use seccomp-BPF to sandbox themselves with manually-crafted policies. Container runtimes, such as Docker and Podman, allow the use of seccomp-BPF policies to filter container syscalls. By default, Docker applies a filter that disables 44 syscalls [15], and Podman supports dynamic syscall tracing with `ptrace` to build profiles for containers. Both fully support user-specified filters [75]. `sysfilter` can be seamlessly integrated with such software, providing the apparatus for generating the respective syscall sets automatically and precisely.

#### Binary Debloating

`sysfilter` shares goals and analysis approaches with recent software debloating techniques. Quach et al. [71] propose a compiler-based approach that embeds dependency information into programs, and uses a custom loader to selectively load only required portions of shared libraries. TRIMMER [80] specializes LLVM bytecode based on a user-defined configuration, while Koo et al. [39] use coverage information to remove code based on feature directives. C-Reduce [74], Perses [85], and CHISEL [27] use delta-debugging techniques to compile minimized programs. Razor [70] uses a dynamic tracer to reconstruct the program’s FCG from test cases. Nibbler [1] is the most similar to `sysfilter`, but it requires symbols, whereas `sysfilter` operates on stripped binaries.

### Conclusion

We presented `sysfilter`: a static (binary) analysis-based framework that automatically limits what OS services attackers can (ab)use by enforcing the principle of least privilege and reducing the attack surface of the OS kernel. We introduced a set of program analyses for constructing syscall sets in a scalable, precise, and complete manner. We evaluated our prototype using 411 binaries from various real-world C/C++ projects and ≈38.5K tests to stress-test their functionality when armored with `sysfilter`. We also assessed the impact of our syscall enforcement mechanisms using SPEC CINT2006, Nginx, and Redis, demonstrating minimal runtime slowdown. Finally, we conducted a large-scale study on the syscall profile of ≈30K C/C++ applications (Debian sid). We believe `sysfilter` is a practical and robust tool that provides a solution to the problem of unlimited access to the syscall API.

### Availability

The prototype implementation of `sysfilter` is available at: [https://gitlab.com/brown-ssl/sysfilter](https://gitlab.com/brown-ssl/sysfilter)

### Additional Notes

- **Conﬁne [20]**: A (mostly) static analysis-based system for automatically extracting and enforcing syscall policies on containerized (Docker) applications. Conﬁne requires access to C library code and relies on `objdump` for disassembly. `sysfilter` can operate on stripped binaries and produces tighter syscall sets.
- **Zeng et al. [98]**: Identify valid sets of syscalls using binary analysis but lack soundness in their call graph approximation method. They enforce policies using a customized Linux kernel, whereas `sysfilter` uses seccomp-BPF, available in stock Linux kernel v3.5 or later.
- **Dynamic System Call Filtering**: Systrace [69] uses dynamic tracing to generate system call policies and implements a userspace daemon for enforcement. Mutz et al. [58] and Maggi et al. [51] develop statistical models for host-based intrusion detection, which can give false negatives. Ostia [18] provides a system call sandboxing mechanism that delegates policy decisions to per-process agents. `sysfilter` does not rely on dynamic syscall tracing or statistical models, avoiding incomplete policies.