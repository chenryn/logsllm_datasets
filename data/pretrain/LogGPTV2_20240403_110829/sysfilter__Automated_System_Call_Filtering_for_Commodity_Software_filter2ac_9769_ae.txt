tion available, such as futex, and gettid. We also observe
many libraries directly invoking syscalls speciﬁc to their core
functionality, perhaps to handle circumstances where exist-
ing wrappers are unavailable or insufﬁcient. For instance,
we note cryptographic libraries, such as libgcrypt and
libcrypto, directly invoking cryptographic-related syscalls,
like getrandom and keyctl.
Effectiveness of FCG Approximation Figure 7 shows the
number of syscalls we extract from each binary using the three
FCG approximation methods (§ 3.1.2): DCG, DCG ∪ ACG,
and VCG, sorted by the count for the VCG. Each binary rep-
resents three points on the ﬁgure (i.e., one for each method).
Figure 6: Number of Syscalls per Binary.
We consider packages from the three major Debian reposi-
tories, namely main, contrib, and nonfree. At the time of
writing, the Debian sid distribution contains over 50K pack-
ages listed for the x86-64. We exclude, however, packages
that do not contain executable code, such as documentation
packages (*-doc), development headers (*-dev), and debug
symbols (*-dbg, *-dbgsym); meta-packages and virtual pack-
ages; architecture-agnostic packages that do not include x86-
64 binaries; and packages containing only shared libraries.
Note that shared libraries and other excluded packages can be
installed during processing, as dependencies of main applica-
tion packages. We processed a total of 33829 binaries across
8922 packages, 30398 (91.3%) of which could be analyzed
successfully. The median runtime for the extraction tool is
about 30s per binary, with 90% of binaries completing within
200s. For a single FCG pass, the median runtime is reduced
to about 10s per binary.
Number of Syscalls per Binary Many binaries only use a
small portion of the syscall API. Figure 6 shows the distribu-
tion of the number of syscalls used by each binary processed.
468    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
1KiB100KiB1MiBRequestsize0.00.20.40.60.81.0NormalizedThroughputLinearLinear+JITBinaryBinary+JITGETSETOperation0.00.20.40.60.81.0NormalizedThroughputLinearLinear+JITBinaryBinary+JIT050100150200250300350SyscallCount0.00.10.20.30.40.50.60.70.80.91.0CDFAllsyscallsMaximumnumberofsyscallsusedbyasinglebinaryCVE
Syscall(s) Involved
Vulnerability Type
Binaries (%)
CVE-2019-11815
CVE-2013-1959
CVE-2015-8543
CVE-2017-17712
CVE-2013-1979
CVE-2016-4998
CVE-2016-4997
CVE-2016-3134
CVE-2017-18509
CVE-2018-14634
CVE-2017-14954
CVE-2014-5207
CVE-2018-12233
CVE-2016-0728
CVE-2014-9529
CVE-2019-13272
CVE-2018-1000199
CVE-2014-4699
CVE-2014-7970
CVE-2019-10125
CVE-2017-6001
CVE-2016-2383
CVE-2018-11508
Memory corruption
clone, unshare
Direct privilege escalation
write
Type confusion
socket
Memory corruption
sendto, sendmsg
Direct privilege escalation
recvfrom, recvmsg
Memory disclosure
setsockopt
Memory corruption
setsockopt
Memory corruption
setsockopt
setsockopt, getsockopt Memory corruption
execve, execveat
waitid
mount
setxattr
keyctl
keyctl
ptrace
ptrace
fork, clone, ptrace
pivot_root
io_submit
perf_event_open
bpf
adjtimex
19558 (64.34)
19558 (64.34)
19128 (62.93)
19057 (62.69)
18968 (62.40)
17360 (57.11)
17360 (57.11)
17360 (57.11)
17416 (57.29)
Memory corruption on suid program 16775 (55.18)
14064 (46.27)
Memory disclosure
11412 (37.54)
Direct privilege escalation
Memory corruption
3356 (11.04)
2827 (9.30)
Memory corruption
2827 (9.30)
Memory corruption
127 (0.42)
Direct privilege escalation
127 (0.42)
Memory corruption
Register value corruption
121 (0.40)
79 (0.26)
DoS
58 (0.19)
Memory corruption
51 (0.17)
Direct privilege escalation
Memory corruption
35 (0.12)
26 (0.09)
Memory disclosure
Table 2: Effectiveness Analysis. The column “Binaries” indicates the number (and percentage) of binaries observed in the large
scale analysis on Debian sid applications that use the system calls related to the respective vulnerability. (Underlined entries
correspond to vulnerabilities that involve namespaces.)
For all binaries, the count for the VCG is always in between
that of DCG and DCG ∪ ACG. Thus, for our dataset, VCG
represents a safe, tight over-approximation of the FCG.
dl{open, sym} and execve By employing our value-
tracking approach (see § 3.1.3), sysfilter can resolve
≈89% of all dlsym arguments, ≈37% of all dlopen argu-
ments, and ≈30% of all execve arguments. We observed a
few cases in common libraries where value-tracking fails,
which may beneﬁt from special handling (§ A): e.g., ≈50%
of dlsym failures relate to NSS functionality, while ≈5% of
dlopen failures involve Kerberos plugins. Lastly, we found
two isolated cases where sysfilter was unable to construct
syscall sets: Qemu and stress-ng contain arbitrary syscall
dispatchers (like glibc’s syscall()), which is expected
given their functionality. Otherwise, we ﬁnd that syscall sites
follow strictly the pattern ‘mov $SYS_NR, %eax; syscall’.
6 Related Work
Syscall-usage Analysis Tsai et al. [88] performed a study
similar to ours (on binaries in Ubuntu v15.04) to character-
ize the usage of the syscall API, as well as that of ioctl,
fcntl, prctl, and pseudo-ﬁlesystem APIs. Their study fo-
cuses on quantifying API complexity and security-related
usage trends, such as unused syscalls and adoption of secure
APIs over the legacy ones. Our study focuses speciﬁcally on
the syscall API as a means of evaluating our extraction tool.
We consider this work complementary, and focus on making
the analysis more scalable, precise, and complete. Speciﬁcally,
and in antithesis to sysfilter, the call graph construction
approach of Tsai et al. does not consider initialization/ﬁnal-
ization code nor does it identify AT functions that are part of
global struct/union/C++ object initializers.
Static System Call Filtering Syscall ﬁltering has been ex-
tensively studied in the past, in various contexts. Indeed,
sysfilter shares many of the problems, and proposed so-
lutions, with the seminal work by Wagner and Dean [89],
which uses static analysis techniques to model sequences of
valid syscalls as a non-deterministic ﬁnite automaton (NDFA).
This work, as well as others from its era [22], aim at building
models of program execution for intrusion detection purposes.
In contrast, sysfilter focuses on building optimized (OS-
enforceable) seccomp-BPF ﬁlters by determining the total set
of syscalls, independent of ordering, which provides a more
compact representation and eliminates the challenges related
to control ﬂow modeling. Moreover, sysfilter employs
binary analysis, whereas Wagner and Dean’s work requires re-
compiling target binaries and shared libraries, which severely
limits the deployability of their scheme.
Shredder [55] performs static analysis on Windows bina-
ries to identify API calls, and arguments, used by applications.
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    469
instead, sysfilter safely over-approximates a program’s
true syscall set and thus will not break program execution.
seccomp-BPF in Existing Software
Firefox [57],
Chrome [8], and OpenSSH [63] use seccomp-BPF to sand-
box themselves using manually-crafted policies, while con-
tainer runtimes, such as Docker and Podman, allow the use
seccomp-BPF policies to ﬁlter container syscalls. By default,
Docker applies a ﬁlter that disables 44 syscalls [15], and Pod-
man has support for tracing syscalls dynamically with ptrace
to build a proﬁle for containers. Both also fully support user-
speciﬁed ﬁlters [75]. sysfilter can be seamlessly integrated
with such software, providing the apparatus for generating
the respective syscall sets automatically/precisely.
Binary Debloating sysfilter shares goals and analy-
sis approaches with recent software debloating techniques.
Quach et al. [71] propose a compiler-based approach that em-
beds dependency information into programs, and uses a cus-
tom loader to selectively load only required portions of shared
libraries in memory. TRIMMER [80] specializes LLVM byte-
code based on a user-deﬁned conﬁguration, while the work of
Koo et al. [39] utilizes coverage information to remove code
based on feature directives. C-Reduce [74], Perses [85], and
CHISEL [27] use delta-debugging techniques to compile min-
imized programs using a series of provided test cases. Unlike
previous approaches, Razor [70] does not require source code,
and implements a dynamic tracer to reconstruct the program’s
FCG from a set of test cases. The analysis used by Nibbler [1]
is the most similar to sysfilter. However, Nibbler requires
symbols, whereas sysfilter operates on stripped binaries.
7 Conclusion
We presented sysfilter: a static (binary) analysis-based
framework that automatically limits what OS services attack-
ers can (ab)use, by enforcing the principle of least privilege,
and reduces the attack surface of the OS kernel, by restrict-
ing the syscall set available to userland processes. We in-
troduced a set of program analyses for constructing syscall
sets in a scalable, precise, and complete manner, and evalu-
ated our prototype in terms of correctness using 411 binaries,
from various real-world C/C++ projects, and ≈38.5K tests to
stress-test their functionality when armored with sysfilter.
Moreover, we assessed the impact of our syscall enforce-
ment mechanism(s) using SPEC CINT2006, Nginx, and Re-
dis, demonstrating minimal run-time slowdown. Lastly, we
concluded with a large scale study about the syscall proﬁle
of ≈30K C/C++ applications (Debian sid). We believe that
sysfilter is a practical and robust tool that provides a solu-
tion to the problem of unlimited access to the syscall API.
Availability
The prototype implementation of sysfilter is available at:
https://gitlab.com/brown-ssl/sysfilter
Figure 7: Syscall Count for Different FCG Construction
Methods. The number of syscalls reported for each binary is
shown, sorted by the count for the VCG.
Speciﬁcally, it restricts calls to syscall wrapper functions, via
trampolines, but requires CFI for effective protection. Inde-
pendently and concurrently to our work, Ghavamnia et al. pro-
posed Conﬁne [20]: a (mostly) static analysis-based system
for automatically extracting and enforcing syscall policies on
“containerized” (i.e., Docker) applications. Conﬁne requires
access to C library code (e.g., glibc or musl), while its call
graph construction approach considers every function in non-
libc code within scope. In addition, it relies on objdump, and,
hence, requires symbols for precise disassembly. sysfilter
can operate on stripped binaries, while our FCG construction
approach produces much tighter syscall sets.
Similar to sysfilter, Zeng et al. [98] identify valid sets
of syscalls using binary analysis, but their approach lacks
soundness: its call graph approximation method relies, in part,
on points-to analysis to resolve the targets of function pointers.
In antithesis, sysfilter identiﬁes all address-taken functions
in order to avoid the impression issues associated with this
method. Further, Zeng et al. perform the enforcement using a
customized Linux kernel to provide per-process system call
tables, whereas our seccomp-BPF based approach is available
in stock Linux kernel v3.5 or later.
Dynamic System Call Filtering Systrace [69] uses dynamic
tracing to generate system call policies and implements a
userspace daemon for enforcement. Mutz et al. [58] and
Maggi et al. [51] develop statistical models for host-based
intrusion detection, which as a design choice inherently gives
false negatives, potentially impeding valid program execution.
Ostia [18] provides a system call sandboxing mechanism
that delegates policy decisions to per-process agents, while
a plethora of earlier work on container debloating [90], and
sandboxing [42, 90], also relies on dynamic tracing. In con-
trast, sysfilter does not rely on dynamic syscall tracing or
statistical models, which can generate incomplete policies—
470    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association