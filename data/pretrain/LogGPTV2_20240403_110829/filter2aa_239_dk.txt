    public class Job
    {
      private SharedState _sharedState;
      public Job(SharedState sharedState)
      {
        _sharedState = sharedState;
      }
      public void DoTheJob()
      {
        for (int i = 0; i  new Job(state).DoTheJob());
        }
        Task.WaitAll(tasks);
        WriteLine($"summarized {state.State}");
      }
    }
多次运行应用程序的结果如下所示：
    summarized 424687
    summarized 465708
    summarized 581754
    summarized 395571
    summarized 633601
每次运行的结果都不同，但没有一个结果是正确的。如前所述，调试版本和发布版本
的区别很大。根据使用的CPU类型，结果也不一样。如果将循环次数改为比较小的值，就
会多次得到正确的值，但不是每次都正确。这个应用程序非常小，很容易看出问题，但该
问题的原因在大型应用程序中就很难确定。
必须在这个程序中添加同步功能，这可以用lock关键字实现。用lock语句定义的对象
表示，要等待指定对象的锁定。只能传递引用类型。锁定值类型只是锁定了一个副本，这
没有什么意义。如果对值类型使用了lock语句，C#编译器就会发出一个错误。进行了锁定
后——只锁定了一个线程，就可以运行lock语句块。在lock语句块的最后，对象的锁定被
解除，另一个等待锁定的线程就可以获得该锁定块了。
    lock (obj)
    {
      // synchronized region
    }
要锁定静态成员，可以把锁放在object类型或静态成员上：
    lock (typeof(StaticClass))
    {
    }
使用lock关键字可以将类的实例成员设置为线程安全的。这样，一次只有一个线程能
访问相同实例的DoThis（）和DoThat（）方法。
    public class Demo
    {
      public void DoThis()
      {
        lock (this)
        {
        // only one thread at a time can access the DoThis and DoThat methods
        }
      }
      public void DoThat()
      {
        lock (this)
        {
        }
      }
    }
但是，因为实例的对象也可以用于外部的同步访问，而且我们不能在类自身中控制这
种访问，所以应采用SyncRoot模式。通过SyncRoot模式，创建一个私有对象_syncRoot，
将这个对象用于lock语句。
    public class Demo
    {
      private object _syncRoot = new object();
      public void DoThis()
      {
        lock (_syncRoot)
        {
        // only one thread at a time can access the DoThis and DoThat methods
        }
      }
      public void DoThat()
      {
        lock (_syncRoot)
        {
        }
      }
    }
使用锁定需要时间，且并不总是必须的。可以创建类的两个版本，一个同步版本，一
个异步版本。下一个示例通过修改Demo类来说明。Demo类本身并不是同步的，这可以在
DoThis（）和DoThat（）方法的实现中看出。该类还定义了IsSynchronized属性，客户可
以从该属性中获得类的同步选项信息。为了获得该类的同步版本，可以使用静态方法
Synchronized（）传递一个非同步对象，这个方法会返回SynchronizedDemo类型的对象。
SynchronizedDemo实现为派生自基类Demo的一个内部类，并重写基类的虚成员。重写的
成员使用了SyncRoot模式。
    public class Demo
    {
      private class SynchronizedDemo: Demo
      {
        private object _syncRoot = new object();
        private Demo _d;
        public SynchronizedDemo(Demo d)
        {
        _d = d;
        }
        public override bool IsSynchronized => true;
        public override void DoThis()
        {
        lock (_syncRoot)
        {
          _d.DoThis();
        }
        }
        public override void DoThat()
        {
        lock (_syncRoot)
        {
          _d.DoThat();
        }
        }
      }
      public virtual bool IsSynchronized => false;
      public static Demo Synchronized(Demo d)
      {
        if (! d.IsSynchronized)
        {
        return new SynchronizedDemo(d);
        }
        return d;
      }
      public virtual void DoThis()
      {
      }
      public virtual void DoThat()
      {
      }
    }
必须注意，在使用SynchronizedDemo类时，只有方法是同步的。对这个类的两个成员
的调用并没有同步。
首先修改异步的SharedState类，以使用SyncRoot模式。如果试图用SyncRoot模式锁定
对属性的访问，使SharedState类变成线程安全的，就仍会出现前面描述的争用条件。
    public class SharedState
    {
      private int _state = 0;
      private object _syncRoot = new object();
      public int State // there's still a race condition,
                    // don't do this!
      {
        get { lock (_syncRoot) { return _state; }}
        set { lock (_syncRoot) { _state = value; }}
      }
    }
调用方法DoTheJob（）的线程访问SharedState类的get存取器，以获得state的当前值，
接着get存取器给state设置新值。在调用对象的get和set存取器期间，对象没有锁定，另一
个线程可以获得临时值（代码文件SynchronizationSamples/Job.cs）。
    public void DoTheJob()
    {
      for (int i = 0; i  _state;
      public int IncrementState()
      {
        lock (_syncRoot)
        {
        return ++_state;
        }
      }
    }
锁定状态的递增还有一种更快的方式，如下节所示。
22.4 Interlocked类
Interlocked类用于使变量的简单语句原子化。i++不是线程安全的，它的操作包括从内
存中获取一个值，给该值递增1，再将它存储回内存。这些操作都可能会被线程调度器打
断。Interlocked类提供了以线程安全的方式递增、递减、交换和读取值的方法。
与其他同步技术相比，使用Interlocked类会快得多。但是，它只能用于简单的同步问
题。
例如，这里不使用lock语句锁定对someState变量的访问，把它设置为一个新值，以防
它是空的，而可以使用Interlocked类，它比较快：
    lock (this)
    {
      if (_someState == null)
      {
        _someState = newState;
      }
    }
这个功能相同但比较快的版本使用了Interlocked.CompareExchange（）方法：
    Interlocked.CompareExchange(ref someState, newState, null);
不是像下面这样在lock语句中执行递增操作：
    public int State
    {
      get
      {
        lock (this)
        {
        return ++_state;
        }
      }
    }
而使用较快的Interlocked.Increment（）方法：
    public int State
    {
      get
      {
        return Interlocked.Increment(ref _state);
      }
    }
22.5 Monitor类
lock语句由C#编译器解析为使用Monitor类。下面的lock语句：
    lock (obj)
    {
      // synchronized region for obj
    }
被解析为调用Enter（）方法，该方法会一直等待，直到线程锁定对象为止。一次只有一
个线程能锁定对象。只要解除了锁定，线程就可以进入同步阶段。Monitor类的Exit（）方
法解除了锁定。编译器把Exit（）方法放在try块的finally处理程序中，所以如果抛出了异
常，就会解除该锁定。
  注意： try/finally块详见第14章。
    Monitor.Enter(obj);
    try
    {
      // synchronized region for obj
    }
    finally
    {
      Monitor.Exit(obj);
    }
与C#的lock语句相比，Monitor类的主要优点是：可以添加一个等待被锁定的超时
值。这样就不会无限期地等待被锁定，而可以像下面的例子那样使用TryEnter（）方法，
其中给它传递一个超时值，指定等待被锁定的最长时间。如果obj被锁定，TryEnter（）方
法就把布尔型的引用参数设置为true，并同步地访问由对象obj锁定的状态。如果另一个线
程锁定obj的时间超过了500毫秒，TryEnter（）方法就把变量lockTaken设置为false，线程
不再等待，而是用于执行其他操作。也许在以后，该线程会尝试再次获得锁定。
    bool _lockTaken = false;
    Monitor.TryEnter(_obj, 500, ref _lockTaken);
    if (_lockTaken)
    {
      try
      {
        // acquired the lock
        // synchronized region for obj
      }
      finally
      {
        Monitor.Exit(obj);
      }
    }
    else