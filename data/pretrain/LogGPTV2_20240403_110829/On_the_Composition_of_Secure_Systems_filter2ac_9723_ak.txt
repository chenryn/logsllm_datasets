correction does not exist.
Since l 1 and l 2 are connected rename this composite event to l
Let t =a
low level event defined above and b
events such that f 1 and f 2 must be true at l
.
.
 be a trace of the composite system.  Where a is a sequence of events l
 is the
 is a sequence of events that contains any low  level
Consider a perturbation a ’l
 that makes f 1 false.
Since  there  is  no  way  to  make  both  f 1  and  f 2  true  the  preconditions  for  l
satisfied.
  cannot  be
\ No correction can be found for the trace
We will prove each case by contradiction.  For each case below assume that for a trace t
and a perturbation s no correction exists.  If no correction exists then by Lemma 5.1 there
must exist a low level event in t such that a perturbation has meant that the precondition
for it cannot be satisfied. Assume that the event whose condition can not be satisfied is f.
Case 1:  f is not a communication event.
Assume f is an event of component S0.  The following is applicable if f is an event of S1 by
changing the appropriate subscripts.  Since f is not a communication event any correction
to  f  need  only  effect  events  in  S0.    The  addition  or  removal  of  events  might  involve
communication  events.    These  will  appear  as  a  perturbation  to  S1.  The  corrections  for
these perturbations can be postponed until after f.  This leads to a contradiction that the
condition for f could not be satisfied.
- 66 -
(cid:222)
l
b
b
(cid:220)
Case 2:  One (or both) of the conditions required for the low level event to occur are not
satisfied at the occurrence of the event but some time before it.
Assume f1 is to be evaluated before the occurrence of f.  Once again with the appropriate
changes this is applicable to the other case.  The correction to make f 1 true must occur
 will be evaluated.  This correction may make f 2 false but the correction
before the point f 1
for this can wait until after f 1 is evaluated but before f.  When f 2 is corrected f 1 may have
been made false but f 1 has already been evaluated and hence f can occur.  All remaining
corrections  can  wait  until  after  f.    This  lead  to  a  contradiction  that  the  condition  for  f
could not be satisfied.
Case  3:  If  f 1  or  f 2  is  made  false  it  is  always  possible  to  make  f 1  and  f 2  true
simultaneously.
The  existence  of  a  trace  follows  immediately  since  the  conditions  for  f  are
guaranteed to be satisfied.
Since for each case we have reached a contradiction if a trace does not have a correction
then the conditions of the theorem must hold.
G
The  system  designer  now  has  all  the  tools  required  to  determine  if  a  system
composed of GNI secure components is GNI secure.  The following procedure can be used
to determine if the system is GNI secure.
1.  Construct the system graph.
2.  If the graph has no 2-cycles then the system is GNI secure.
3.  For each 2-cycle examine the low level connections to see if the low level output event
of one component must satisfy a condition at its occurrence while the low level input
event of the other must also satisfy a condition at its occurrence.
4.  If no such case exists then the system is GNI secure.
5.  For all cases that do exist ensure that the conditions required for the low level events
can be satisfied.
The checking to ensure that the alternation of conditions does not occur may not
be trivial in a complex component.  Therefore, we suggest that if it is discovered that the
- 67 -
composition of two low level events requires two conditions to be satisfied for the event
to occur, a dummy component be inserted in the feedback path.
5.5.3. Why Dummy Components?
In  this  section  we  wish  to  investigate  why  a  three  cycle  in  the  system  graph  is
sufficient  for  the  system  to  satisfy  GNI.    Specifically,  why  does  inserting  a  dummy
component, a component that does nothing except copy its inputs to its outputs, ensures
that the system satisfies GNI?
The  definition  of  composition  requires  that  an  output  of  one  component
immediately becomes an input at the other.  Inserting another component between the two
components  allows  other  system  events  to  occur  between  the  output  event  of  one
component and the corresponding input event.  One may argue that the timing of events in
the system is important.  If the dummy component copies the event as quickly  as  it  can
then no other system event would be able to occur.  This might be true but since GNI is a
possibilistic property the dummy component provides the possibility of a correction.  That
is  not  to  say  that  in  a  system  with  processing  delays  the  system  will  have  a  correction.
However, it can be argued that any possibilistic property has this problem since processing
delays  are  not  considered  in  the  models  of  the  properties.    This  leads  to  the  situation
where  a  system  is  pronounced  secure  but  really  is  not  secure.    The  pros  and  cons  of
possibilistic properties are beyond the scope of this work.
Another  way  to  view  the  effects  of  the  dummy  component  is  that  it  breaks  the
synchronization between the components it is connected to.  The definition of composition
only  allows  for  synchronized  communication.    Since  the  composition  with  the  dummy
component allows other system events to occur between the output and the corresponding
input event it can be viewed as non-synchronized communication.
As mentioned in section 3.4 both forms of communication might be required.  If
non-synchronized communication is required, then the component depicted in Figure 5.7
can  be  used.    The  benefits  of  using  this  form  of  communication  are  obvious.    If  all
components  use  this  form  of  communication  and  all  components  satisfy  GNI,  then  the
whole system satisfies GNI.
- 68 -
Dummy
SD=
Figure 5.7: A  Component 
Communication.
that  can  be  used 
to  Model  Non-Synchronized
5.5.4. Emergent Properties in the Presence of Feedback
In  section  5.4  we  discussed  the  conditions  under  which  a  property  may  emerge
under composition.  In that section it was shown that if the property  satisfied a stability
requirement then very specific predictions could be make about its emergent potential. The
necessary  condition  presented  in  that  section  applies  here  also.    The  externally  visible
portion must satisfy the property.  In the feedback case, however, it is much more difficult
to ensure that the communication events are compatible.
5.5.5. Why Certain Properties Compose
With the necessary and sufficient conditions for GNI to compose, some insight can
be gained into why certain properties and techniques ensure that the composition of two
components  preserves  the  property.    This  insight  will  give  system  designers  and
researchers  a  better  understanding  of  what  the  security  property  is  attempting  to
accomplish.
After McCullough demonstrated that GNI was not a composable security property
he  proposed  a  property  he  called  Restrictiveness.  Restrictiveness  is  GNI  with  the  added
stipulation that high level outputs cannot be fixed up arbitrarily soon after a modified high
level input.  High level output correcting must wait until any immediately following low
level  inputs.    Examining  the  Restrictiveness  condition  on  GNI  it  can  be  seen  why  it
composes.  Restrictiveness ensures that low level inputs  never  require  a  condition  to  be
true  for  future  low  level  events  to  be  possible11.    The  condition  of  the  theorem  above
11 
The  possibility  of  a  low-level  input  can  never  be  dependent  on  the  high  level  state.    The  only
condition  possible  is  for  future low  level  events  to  be  dependent  on  the  high  level  state  at  the
occurrence of the low level input.
- 69 -
a
b
b
requires that an input event have a condition associated with it.  Since Restrictiveness does
not allow such a condition it is composable.
Johnson and Thayer’s [Johnson & Thayer88] n-Forward Correctability composes
for  the  exact  same  reason  as  Restrictiveness.    This  should  not  be  a  surprise  since
Restrictiveness and n-Forward Correctability are so similar.  The only difference being that
while Restrictiveness must wait until after all low level inputs following a perturbation to
begin  a  correction  n-Forward  Correctability  need  only  wait  n  low  level  input  events.
Notice that 1-Forward Correctability is the weakest condition of any property that solely
eliminates the possible of there being a condition on a low level input event.  This follows
immediately from the theorem because the synchronization affects at most one low-level
event at a time.
Both  Restrictiveness  and  n-Forward  Correctability  rely  on  eliminating  all
components that require input conditions on the low level events.  With Theorem 5.2 it is
possible to construct many security properties that are composable.  It is also possible to
construct  a  composable  security  property  stronger  than  1-Forward  Correctability.  GNI
secure  components  can  be  used,  but  in  interconnecting  them  a  check  must  be  done  to
ensure that two low level events are not connected such that each satisfies a condition at
the time of its occurrence.  This property enforces the same rule (albeit differently) as 1-
Forward Correctability but only in the cases where a problem may exist.
Zakinthinos and Lee [Zakinthinos & Lee95] proposed a technique that allows GNI
secure systems to be composed with feedback.  This technique is based on the use of non-
synchronized communication for communication events.  This is modeled by using a delay
component  in  the  feedback  path.    The  reason  why  this  technique  works  follows  from
Theorem 5.1.  Since the delay component is inserted in the feedback  path, the  feedback
path  contains  three  components.  Theorem  5.1  also  gives  guidance  as  to  how  long  the
delay should be.  In Zakinthinos and Lee’s paper a feedback event must be delayed until
the next low level event.  Theorem 5.1 indicates that any (even a fixed) delay is sufficient.
- 70 -
5.6.  Summary and Conclusions
We began this chapter by considering how  to  determine  the  result  of  composing
two  components  with  known  security  properties.    We  demonstrate  how  to  use  our
formalism to determine what property the resulting system satisfies.  Then we considered
under what conditions a property may emerge under composition.  We showed that if the
property satisfies a stability requirement  then specific predictions can be made about the
emergence of the property.
After  considering  cascade  composition  we  examined  feedback  composition.    We
proved that the only structures of a system that can cause Generalized Noninterference to
fail  are  those  that  involved  feedback  between  two  components.    We  then  presented
necessary  and  sufficient  conditions  for  Generalized  Noninterference  to  compose  with
feedback.  These results were then used to analyzed why certain properties and techniques
were composable and others were not.
- 71 -
6.  Comparison To Selective Interleaving
Functions
Science moves, but slowly slowly, creeping on from point to point.
Alfred, Lord Tennyson (1809-1892)
English Poet.
6.1. 
Introduction
The  only  other  general  framework  for  the  specification  and  analysis  of  security
properties is McLean’s Selective Interleaving Functions.  In this chapter we compare our
framework  to  McLean’s.    Specifically,  we  will  compare  the  expressability  of  the  two
frameworks and the results one can obtain from each.
McLean defines a framework for  the  analysis  of  Selective  Interleaving  Functions
(SIF).    Selective  Interleaving  Functions  can  be  used  to  express  properties  that  are  an
interleaving  of  two  traces  of  the  system.    The  justification  for  using  SIFs  is  McLean’s
observation that certain security properties are “a closure property with respect to  some
function that takes two traces and interleaves them to form a third trace” [McLean94].  If
a  security  property  cannot  be  so  expressed,  then  the  results  of  McLean’s  work  are  not
applicable.  It may be argued that if the security properties that cannot be handled by SIFs
are “uninteresting” then SIFs are all that is required.  We will show that at least one of the
security properties presented in the literature cannot be handled by SIFs.
Definition 6.1 defines SIF.  Our definition is different than McLean’s because our
model of components is different then McLean’s.
Definition 6.1: Selective Interleaving Functions
Let  S=  be  a  component.    Partition  the  set  of  input  events  I
into m disjoint subsets.  Ix will be used to refer to the xth subset. Similarly,
partition  the  set  of  output  events  O  into  n  disjoint  subsets.    Ox  will  be
used  to  refer  to  the  xth  subset.  Let  i˛ {0,1,2}m
,  and  j˛ {0,1,2}n,  the
notation  i[x],  j[x]  will  be  used  to  refer  to  the  xth  coordinate  of  i  or  j
- 72 -
 T is a selective interleaving function
respectively.  A function f: T· T ﬁ
of type Fi,j if and only if f(t1,t2) = t implies:
for all x such that i[x] = 1 : t|Ix = t1|a Ix,
for all x such that i[x] = 2 : t|Ix = t2|a Ix,
for all x such that j[x] = 1 : t|Ox = t1|a Ox and
for all x such that j[x] = 2 : t|Ox = t2|a Ox.
The  definition  of  SIFs  is  intended  to  be  general  and  encompasses  more  than
security properties.    This  can  be  seen  from  examining  the  partitioning  of  I  and  O.    The
definition  allows  an  arbitrary  partitioning.    In  the  case  of  security  properties  this
partitioning will be into high and low level event classes.  In demonstrating that SIFs can
be expressed in our framework we will partition I and O into two sets, the set high level
events  and  the  set  of  low  level  events.    This  partitioning  is  also  used  by  McLean  in
demonstrating the use of SIFs.
6.2.  Comparison of Expressability
We  will  now  consider  the  expressability  of  our  framework  versus  SIFs.    First,
consider the following examples of the Separability property (section 4.4.4) as defined in
our framework and McLean’s:
:traces(S)|L(cid:215)
SEPARABILITY( B ) ”
(cid:215) SEPARABILITY(Blow(t, S))
t:traces(S)|H(cid:215) interleave(t,t
 "
vs.
low):B
F,: T ·
 T, such that interleave(t1,t2) = t implies
highin(t) = highin(t1)
lowin(t) = lowin(t2)
highout(t) = highout(t1)
lowout(t) = lowout(t2)
if a system is closed under interleave then it satisfies Separability
Expressing the property as a SIF (F, ) requires the system designer to
take many steps before he arrives at such a definition.  Also, the intent of the property is
not  clear  when  expressed  as  an  SIF.    The  intended  property  is  clearer,  however,  in  the
expanded version.  We believe that neither form captures the notion of a security property.
- 73 -
"
t
We believe our formalism, which is  based  on  what  the  low  level  user  can  infer  from  an
observation, is more natural.
We will now demonstrate that SIFs can be expressed in our formalism.  We will do
this for the subset of SIFs that have the lowin and lowout from one trace and the highin
and highout from the other.  All of the security properties examined by McLean have this
property.  Furthermore, it is not clear how the events can come from different traces and
still have a useful system.
Given a SIF of type F, x, y˛ {0,1} consider the following property:
:traces(S)|L(cid:215)
(cid:215)  P(Blow(t, S))
t:traces(S)|Z(cid:215) interleave(t,t
Z
low):B
P( B ) ”
 "
x
0
0
1
1
y
0
1
0
1
HO
HI
H
The  implication  of  the  above  is  that  only  4  types  of  security  properties  can  be
achieved using SIF.  This is partially true.  To achieve others the domain of the interleave
can  be  restricted.    For  example,  Generalized  Noninference  is  the  SIF  F} ·
general then that considered here.  The partitioning can be more complex then the simple