test
test
8.3.4 If the HTTP request contains several parameters that may be being
placed into a SOAP message, try inserting the opening comment char-
acter
into another parameter. Then switch these (because you have no way
of knowing in which order the parameters appear). This can have the
effect of commenting out a portion of the server’s SOAP message, which
may change the application’s logic or result in a different error condition
that may divulge information.
8.4 Test for LDAP Injection
8.4.1 In any functionality where user-supplied data is used to retrieve infor-
mation from a directory service, target each parameter in turn to test
for potential injection into an LDAP query.
8.4.2 Submit the * character. If a large number of results are returned, this is
a good indicator that you are dealing with an LDAP query.
8.4.3 Try entering a number of closing parentheses:
))))))))))
This input invalidates the query syntax, so if an error or other anomalous
behavior results, the application may be vulnerable (although many
other application functions and injection situations may behave in the
same way).
8.4.4 Try entering various expressions designed to interfere with different
types of queries, and see if these allow you to infl uence the results being
cc2211..iinndddd 883399 88//1199//22001111 1122::2222::0055 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 840
840 Chapter 21 n A Web Application Hacker’s Methodology
returned. The cn attribute is supported by all LDAP implementations
and is useful if you do not know any details about the directory you are
querying:
)(cn=*
*))(|(cn=*
*))%00
8.4.5 Try adding extra attributes to the end of your input, using commas to
separate each item. Test each attribute in turn. An error indicates that
the attribute is not valid in the present context. The following attributes
are commonly used in directories queried by LDAP:
cn
c
mail
givenname
o
ou
dc
l
uid
objectclass
postaladdress
dn
sn
8.5 Test for XPath Injection
8.5.1 Try submitting the following values, and determine whether they result
in different application behavior without causing an error:
‘ or count(parent::*[position()=1])=0 or ‘a’=’b
‘ or count(parent::*[position()=1])>0 or ‘a’=’b
8.5.2 If the parameter is numeric, also try the following test strings:
1 or count(parent::*[position()=1])=0
1 or count(parent::*[position()=1])>0
8.5.3 If any of the preceding strings causes differential behavior within the
application without causing an error, it is likely that you can extract
arbitrary data by crafting test conditions to extract 1 byte of information
at a time. Use a series of conditions with the following form to determine
the name of the current node’s parent:
substring(name(parent::*[position()=1]),1,1)=’a’
cc2211..iinndddd 884400 88//1199//22001111 1122::2222::0055 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 841
Chapter 21 n A Web Application Hacker’s Methodology 841
8.5.4 Having extracted the name of the parent node, use a series of conditions
with the following form to extract all the data within the XML tree:
substring(//parentnodename[position()=1]/child::node()[position()=1]
/text(),1,1)=’a’
8.6 Test for Back-End Request Injection
8.6.1 Locate any instance where an internal server name or IP address is
specifi ed in a parameter. Submit an arbitrary server and port, and
monitor the application for a timeout. Also submit localhost, and
fi nally your own IP address, monitoring for incoming connections on
the port specifi ed.
8.6.2 Target a request parameter that returns a specifi c page for a specifi c
value, and try to append a new injected parameter using various syntax,
including the following:
%26foo%3dbar (URL-encoded &foo=bar)
%3bfoo%3dbar (URL-encoded ;foo=bar)
%2526foo%253dbar (Double URL-encoded &foo=bar)
If the application behaves as if the original parameter were unmodifi ed,
there is a chance of HTTP parameter injection vulnerabilities. Attempt
to attack the back-end request by injecting known parameter name/
value pairs that may alter the back-end logic, as described in Chapter 10.
8.7 Test for XXE Injection
8.7.1 If users are submitting XML to the server, an external entity injection
attack may be possible. If a fi eld is known that is returned to the user,
attempt to specify an external entity, as in the following example:
POST /search/128/AjaxSearch.ashx HTTP/1.1
Host: mdsec.net
Content-Type: text/xml; charset=UTF-8
Content-Length: 115
 ]>
&xxe;
If no known field can be found, specify an external entity of
“http://192.168.1.1:25” and monitor the page response time. If the
page takes signifi cantly longer to return or times out, it may be vulnerable.
cc2211..iinndddd 884411 88//1199//22001111 1122::2222::0055 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 842
842 Chapter 21 n A Web Application Hacker’s Methodology
9 Test for Logic Flaws
9.1. Identify key attack surface
9.2. 9.3. 9.4. 9.5.
Multistage Incomplete Trust Transaction
processes input boundaries logic
Figure 21-10: Testing for logic flaws
9.1 Identify the Key Attack Surface
9.1.1 Logic fl aws can take a huge variety of forms and exist within any aspect
of the application’s functionality. To ensure that probing for logic fl aws
is feasible, you should fi rst narrow down the attack surface to a reason-
able area for manual testing.
9.1.2 Review the results of your application mapping exercises, and identify
any instances of the following features:
n Multistage processes
n Critical security functions, such as login
n Transitions across trust boundaries (for example, moving from being
anonymous to being self-registered to being logged in)
n Context-based functionality presented to a user
n Checks and adjustments made to transaction prices or quantities
9.2 Test Multistage Processes
9.2.1 When a multistage process involves a defi ned sequence of requests,
attempt to submit these requests out of the expected sequence. Try
skipping certain stages, accessing a single stage more than once, and
accessing earlier stages after later ones.
9.2.2 The sequence of stages may be accessed via a series of GET or POST
requests for distinct URLs, or they may involve submitting different
sets of parameters to the same URL. You may specify the stage being
cc2211..iinndddd 884422 88//1199//22001111 1122::2222::0055 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 843
Chapter 21 n A Web Application Hacker’s Methodology 843
requested by submitting a function name or index within a request
parameter. Be sure to understand fully the mechanisms that the applica-
tion is employing to deliver access to distinct stages.
9.2.3 In addition to interfering with the sequence of steps, try taking param-
eters that are submitted at one stage of the process and submitting them
at a different stage. If the relevant items of data are updated within the
application’s state, you should investigate whether you can leverage
this behavior to interfere with the application’s logic.
9.2.4 If a multistage process involves different users performing operations
on the same set of data, try taking each parameter submitted by one user
and submitting it as another. If they are accepted and processed as that
user, explore the implications of this behavior, as described previously.
9.2.5 From the context of the functionality that is implemented, try to under-
stand what assumptions the developers may have made and where the
key attack surface lies. Try to identify ways of violating those assump-
tions to cause undesirable behavior within the application.
9.2.6 When multistage functions are accessed out of sequence, it is common
to encounter a variety of anomalous conditions within the application,
such as variables with null or uninitialized values, partially defi ned or
inconsistent state, and other unpredictable behavior. Look for inter-
esting error messages and debug output, which you can use to better
understand the application’s internal workings and thereby fi ne-tune
the current or a different attack.
9.3 Test Handling of Incomplete Input
9.3.1 For critical security functions within the application, which involve
processing several items of user input and making a decision based on
these, test the application’s resilience to requests containing incomplete
input.
9.3.2 For each parameter in turn, remove both the name and value of the
parameter from the request. Monitor the application’s responses for
any divergence in its behavior and any error messages that shed light
on the logic being performed.
9.3.3 If the request you are manipulating is part of a multistage process, follow
the process through to completion, because the application may store
data submitted in earlier stages within the session and then process this
at a later stage.
cc2211..iinndddd 884433 88//1199//22001111 1122::2222::0055 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 844
844 Chapter 21 n A Web Application Hacker’s Methodology
9.4 Test Trust Boundaries
9.4.1 Probe how the application handles transitions between different types
of trust of the user. Look for functionality where a user with a given
trust status can accumulate an amount of state relating to his identity.
For example, an anonymous user could provide personal information
during self-registration, or proceed through part of an account recovery
process designed to establish his identity.
9.4.2 Try to fi nd ways to make improper transitions across trust boundaries
by accumulating relevant state in one area and then switching to a
different area in a way that would not normally occur. For example,
having completed part of an account recovery process, attempt to
switch to an authenticated user-specifi c page. Test whether the appli-
cation assigns you an inappropriate level of trust when you transition
in this way.
9.4.3 Try to determine whether you can harness any higher-privileged func-
tion directly or indirectly to access or infer information.
9.5 Test Transaction Logic
9.5.1 In cases where the application imposes transaction limits, test the
effects of submitting negative values. If these are accepted, it may be
possible to beat the limits by making large transactions in the opposite
direction.
9.5.2 Examine whether you can use a series of successive transactions to bring
about a state that you can exploit for a useful purpose. For example, you
may be able to perform several low-value transfers between accounts
to accrue a large balance that the application’s logic was intended to
prevent.
9.5.3 If the application adjusts prices or other sensitive values based on criteria
that are determined by user-controllable data or actions, fi rst understand
the algorithms used by the application, and the point within its logic
where adjustments are made. Identify whether these adjustments are
made on a one-time basis, or whether they are revised in response to
further actions performed by the user.
9.5.4 Try to fi nd ways to manipulate the application’s behavior to cause it to
get into a state where the adjustments it has applied do not correspond
to the original criteria intended by its designers.
cc2211..iinndddd 884444 88//1199//22001111 1122::2222::0055 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 845
Chapter 21 n A Web Application Hacker’s Methodology 845
10 Test for Shared Hosting Vulnerabilities
10.1. Test segregation in shared infrastructures
10.2. Test segregation between ASP-hosted applications
Figure 21-11: Testing for shared hosting vulnerabilities
10.1 Test Segregation in Shared Infrastructures
10.1.1 If the application is hosted in a shared infrastructure, examine the access
mechanisms provided for customers of the shared environment to update
and manage their content and functionality. Consider the following
questions:
n Does the remote access facility use a secure protocol and suitably
hardened infrastructure?
n Can customers access files, data, and other resources that they do not
legitimately need to access?
n Can customers gain an interactive shell within the hosting environ-
ment and execute arbitrary commands?
10.1.2 If a proprietary application is used to allow customers to confi gure and
customize a shared environment, consider targeting this application as
a way to compromise the environment itself and individual applications
running within it.
10.1.3 If you can achieve command execution, SQL injection, or arbitrary fi le
access within one application, investigate carefully whether this provides
any way to escalate your attack to target other applications.
10.2 Test Segregation Between ASP-Hosted Applications
10.2.1 If the application belongs to an ASP-hosted service composed of a
mix of shared and customized components, identify any shared com-
ponents such as logging mechanisms, administrative functions, and
database code components. Attempt to leverage these to compromise
the shared portion of the application and thereby attack other individual
applications.
cc2211..iinndddd 884455 88//1199//22001111 1122::2222::0055 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 846
846 Chapter 21 n A Web Application Hacker’s Methodology
10.2.2 If a common database is used within any kind of shared environment,
perform a comprehensive audit of the database confi guration, patch level,
table structure, and permissions using a database scanning tool such as
NGSSquirrel. Any defects within the database security model may pro-
vide a way to escalate an attack from within one application to another.
11 Test for Application Server Vulnerabilities
11.1. Test for default credentials
11.2. Test for default content
11.3. Test for dangerous HTTP methods
11.4. Test for proxy functionality
11.5. Test for virtual hosting misconfiguration
11.6. Test for web server software bugs
11.7. Test for web application firewalling
Figure 21-12: Testing for web server vulnerabilities
11.1 Test for Default Credentials
11.1.1 Review the results of your application mapping exercises to identify the
web server and other technologies in use that may contain accessible
administrative interfaces.
11.1.2 Perform a port scan of the web server to identify any administrative
interfaces running on a different port than the main target application.
11.1.3 For any identifi ed interfaces, consult the manufacturer’s documentation
and common default password listings to obtain default credentials.
11.1.4 If the default credentials do not work, use the steps listed in section 4
to attempt to guess valid credentials.
11.1.5 If you gain access to an administrative interface, review the available
functionality and determine whether it can be used to further compro-
mise the host and attack the main application.
cc2211..iinndddd 884466 88//1199//22001111 1122::2222::0055 PPMM
Stuttard c21.indd V3 - 08/16/2011 Page 847
Chapter 21 n A Web Application Hacker’s Methodology 847
11.2 Test for Default Content
11.2.1 Review the results of your Nikto scan (step 1.4.1) to identify any default
content that may be present on the server but that is not an integral part
of the application.
11.2.2 Use search engines and other resources such as www.exploit-db.com and
www.osvdb.org to identify default content and functionality included
within the technologies you know to be in use. If feasible, carry out a
local installation of these, and review them for any default functionality
that you may be able to leverage in your attack.
11.2.3 Examine the default content for any functionality or vulnerabilities that
you may be able to leverage to attack the server or the application.
11.3 Test for Dangerous HTTP Methods
11.3.1 Use the OPTIONS method to list the HTTP methods that the server states
are available. Note that different methods may be enabled in different
directories. You can perform a vulnerability scan in Paros to perform
this check.
11.3.2 Try each reported method manually to confi rm whether it can in fact be
used.
11.3.3 If you fi nd that some WebDAV methods are enabled, use a WebDAV-
enabled client for further investigation, such as Microsoft FrontPage or
the Open as Web Folder option in Internet Explorer.
11.4 Test for Proxy Functionality
11.4.1 Using both GET and CONNECT requests, try to use the web server as a
proxy to connect to other servers on the Internet and retrieve content
from them.