### 优化后的文本

#### 摘要
本文介绍了一种基于编译器的系统，该系统通过跟踪程序中的动态数据流来实施安全策略。我们展示了系统的通用性，通过它来实施两种安全策略：一种防止不必要的文件泄露，另一种防止格式字符串攻击。我们的系统在计算密集型应用程序和I/O密集型服务器应用程序中均表现出低开销。

#### 1. 引言
我们提出了一种基于编译器的系统，通过跟踪程序中的动态数据流来实施安全策略。本系统能够有效地防止格式字符串攻击和文件泄露攻击，并且在性能上优于现有的软件解决方案。

#### 2. 系统概述
我们的系统通过静态分析和动态跟踪相结合的方法，确保程序的安全性。具体来说，我们使用静态分析来消除一些潜在的漏洞，并通过动态跟踪来监控数据流，从而检测和防止攻击。

#### 3. 实验结果
表5展示了我们在标准SPEC工作负载上的实验结果。在所有基准测试中，我们的系统相对于现有基于软件的系统表现出显著的性能提升。平均开销为12.9%，远低于之前报道的最佳平均值75-260% [48, 39]。此外，在大多数情况下，即使应用程序包含漏洞，我们的系统对计算密集型应用的开销也几乎为零。因此，我们的方法受CPU密集型程序的影响较小，优于当前所有的软件技术。

gzip基准测试是污点跟踪系统的一个最坏情况 [44, 48, 39, 17]，因为它具有复杂的行为并且对内存带宽非常敏感。它广泛地操作字符数据并传播污点数据，减少了系统可以静态消除的数据流，从而影响了性能。尽管如此，我们的系统开销为51%，明显优于之前的软件系统（编译器系统开销为106% [48]，动态插桩系统开销超过600% [39]），并且与最新的硬件解决方案（开销为31% [17]）相比也非常有利。

#### 4. 文件泄露攻击
除了污点跟踪外，我们还评估了系统防止文件泄露攻击的能力。表6显示了我们的结果。对于pfingerd，我们的静态分析确定其不包含类似FTP的行为，因此无需进行任何插桩。对于muh和bind，系统无法排除这种可能性，因此插入了少量额外代码。然而，响应时间的延迟非常小，难以一致测量。

这些结果突显了我们系统的优势。首先，在某些情况下，所有插桩都可以被消除，实现0%的开销。其次，在需要跟踪的情况下，我们的分析能够将额外代码保持在最小限度，只施加很小或可忽略的开销。最后，这个例子表明，无需重写编译器或其静态分析，我们的系统可以应用于污点跟踪无法直接处理的复杂问题。此外，如果现有的污点跟踪系统扩展到覆盖更丰富的问题，它们将需要大量的内存来跟踪更多的数据位，而我们的系统不会因这些更丰富的策略而增加内存使用。

#### 5. 策略注释负担
我们简要评估了提供系统所需策略注释的工作量。我们的注释分为三类：(1)指针注释，描述指针关系；(2)分析注释，定义数据流分析；(3)策略注释，利用数据流分析的结果来实施策略。

指针注释是所有策略共有的，因为它们描述了每个函数参数的指针关系，指定了函数访问和修改的内容；这些信息用于指针分析。一旦库被注释（在我们的例子中是标准C库），除非库接口发生变化，否则指针注释不需要重写。对于标准C库，有116个过程的指针注释，中位数大小为3行，平均大小为4.68行。

分析和策略注释可能因不同的安全策略而异。对于格式字符串策略，有44个此类注释，中位数大小为6行，平均大小为5.75行。然而，绝大多数这些注释实际上是重复的。例如，printf家族函数的每个成员的注释几乎是相同的。当消除这些“复制粘贴”重复后，总数只有21个。对于文件泄露策略，有65个这样的注释，中位数大小为7行，平均大小为6.52行。同样，大部分这些注释也是重复的。当考虑这些重复时，只有36个唯一的注释。

为了理解分析注释和策略注释之间的区别，我们讨论了几个不同的用例。在最简单的情况下，所需的策略已经存在，无需修改任何注释文件。在其他情况下，安全专家可能希望修改现有策略，例如，在检测到违规时调用一个净化函数。此时，只需更改策略注释以适应净化代码。最后，在最侵入性的情况下，必须定义一个新的数据流分析，这时需要编写新的分析和策略注释。

注释本身并不难编写。我们的注释文件仅使用七个主要结构，因此语言易于理解。所有这些结构都在第4.3.1节的例子中展示，所示的注释代表了必须编写的注释类型。无论如何，注释提供的信息是任何策略实施系统所必需的；在我们的系统中，这些信息由注释文件指定，而不是嵌入在代码中。

#### 6. 结论
本文介绍了一种基于编译器的系统，通过跟踪程序中的动态数据流来实施安全策略。我们展示了系统的通用性，通过它来实施两种安全策略：一种防止不必要的文件泄露，另一种防止格式字符串攻击。我们还展示了在计算密集型应用程序和I/O密集型服务器应用程序中，我们的系统具有低开销。

虽然我们目前的实现是一个针对C语言的源到源转换器，但我们的技术也适用于其他现代语言甚至二进制代码。例如，我们的静态数据流分析可以在静态二进制重写系统中实现，生成一个保护二进制代码免受攻击的系统，同时使用静态分析来减少运行时成本。然而，这样的系统需要解决构建控制流图的困难（即发现所有指令的难度），因此在许多情况下，它可能无法达到本文报告的低开销。

#### 致谢
这项工作得到了NSF资助CNS-0509354、空军研究实验室合同FA8750-07-C-0035以及Intel Research Council的资助。感谢Vitaly Shmatikov、Lili Qiu和E Lewis对本文的宝贵意见。

#### 参考文献
[此处列出参考文献]

---

以上是对原文的优化，使其更加清晰、连贯和专业。希望这对你有所帮助！