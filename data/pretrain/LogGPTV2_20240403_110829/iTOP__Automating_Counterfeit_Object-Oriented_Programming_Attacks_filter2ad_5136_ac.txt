Conditional Memory Write. To demonstrate how to write at
an arbitrary address, we present Listing 7 containing a gadget
used to write to an arbitrary address. For conditional memory
writes, iTOP leverages, for example, the function v8::internal::
Value Deseria lizer :: ReadRawBytes(unsigned long, void
const**). For this function to serve as a conditional memory write
to an attacker-controlled target, register rdx has to contain the
desired memory write destination. Using the method outlined in
Section 5.2, rdx can be initialized to hold the desired value. The dis-
patcher gadget does not modify rdx or rsi, and thus the resulting
payload leads to a memory write only if rsi had the desired value
before executing the exploit.
Candidate Gadget Classification. ESL payloads are independent
from the target binary or architecture. Thus, ESL statements have to
be mapped to functions in the actual program. This consists of the
following two steps. First, a pre-filtering step based on matching
instructions is performed in order to make the set of candidates
6
more manageable and to enable callsite analysis. Secondly, a pre-
cise, symbolic execution-based classification step, as described in
Section 5.5, is performed.
For the first step, iTOP considers all functions in the target binary,
filtering them and assigning potential gadget categories to them
using a semantic approach. While this first analysis is rather per-
missive, frequently marking potential gadgets as usable that cannot
really be used, this step is needed: (1) to allow for elimination of
dispatcher gadgets with incomplete calltarget sets, and (2) to consid-
erably reduce the time needed for simulation and chaining: 50 gad-
gets/sec can be checked using semantics vs. 1 gadget/sec using sym-
bolic execution. Next, we illustrate some candidate gadget examples.
Table 1 presents how functions are filtered and grouped into gad-
get categories. The function’s machine instructions are compared to
a set of Semantic Filter Patterns. An intermediate representation of
the function that closely resembles the machine instructions is gen-
erated using the Capstone engine. The function has to match at least
one of the filters to be considered a potentially usable candidate
gadget. To eliminate functions containing unwanted instructions
that would significantly increase evaluation complexity such as
call or unconstrained jump instructions, we use a general blocklist.
While the blocklist can be modified for individual gadget categories,
we use the same list for all categories not relying on unconstrained
calls or jumps. Further, for each type of gadget, iTOP builds a set
of candidate functions, Fд. A single function can be a candidate for
multiple gadget types. In larger programs, there can be hundreds
of thousands of functions that have to be checked; as a result, per-
formance in this step is more important than precision. Lastly, note
that whether a gadget is actually usable or not is determined in
Section 5.5.
5.3 Searching for Dispatcher Gadgets
In this section, we show how to construct an attack by tricking the
target program into executing the gadgets defined by the attacker in
a specific order. The gadget searching process is depicted in Figure 1
at step ❻. To achieve this, iTOP uses a COOP type dispatch mech-
anism, such as: (1) a loop calling functions from an array of func-
tion pointers, (2) a loop dispatching virtual functions for attacker-
controlled objects, or (3) overwriting return addresses on the stack.
While we also implemented a proof-of-concept dispatch mechanism
Table 1: Mapping ESL statements to machine code gadgets. Statement: goal description; ESL Representation: ESL specification;
Semantic Filter: examples of how gadgets are pre-filtered by matching assembler instructions. Constraints: post-conditions
applied to the simulated state of the symbolic execution engine after a gadget has been completely stepped through. reдα :
Target register, C: Constant value, A: Address, R: Register; Example: machine code matching the filter and constraints. The
memory address from where data is read, loaded or written into is depicted in the adjacent Machine Code column examples.
Statement
Register Assignment
ESL Representation Semantic Filter (ex.) Constraints
LOAD
reдα == target
Register Modification MANIPULATE
READ
Memory Write
Call
WRITE
EXECUTE
Conditional Jump
IF (cond) GOTO
mov reдα , C
mov reдα , [A ∪ R]
mov reдα , [A]
inc reдα
add reдα , C ∪ R
mov [A], C ∪ R
call C ∪ R
call [A ∪ R]
test R ∪ C, R ∪ C
Machine Code
1 movzx rsi, 7h
reдα == mem[target]
reдαbef or e != reдα
mem[A] == target
regs.rip == target
1 mov rsi, DWORD PTR [rdi+8]
1 inc rsi
1 mov [rdi+8] rsi
1 call DWORD PTR [rdi]
if cond: regs.rip == target
1 test rsi, r8
2 jnz addr
based on function pointer arrays, the focus in this work is on COOP
and COOP-like attacks (i.e., type (2) above). Further, keep in mind
that within a COOP attack, a dispatcher gadget either iterates over
an array or linked list of objects and calls a virtual function on each
one, or the dispatcher gadget first calls a virtual function and virtu-
ally dispatches itself, calling one virtual function per recursion step.
Figure 2: Different types of dispatcher gadgets.
Thus, CFI techniques can limit the set of calltargets a dispatcher
gadget can reach.To understand the different types of existing dis-
patcher gadgets, we use Figure 2 to show the inclusion relationship
between different dispatcher gadget types. Note that in general
mainloops are a subset of dispatcher gadgets, and dispatcher gad-
gets are a subset of all callsites. As such, mainloops are a subset of
all dispatcher gadgets, fulfilling conditions (1)-(3), while dispatcher
gadgets only fulfill conditions (2)-(3). The set of all callsites is even
less strict; only condition (2) applies. While identifying the set of all
callsites is a simple task, extracting the set of useful dispatcher gad-
gets requires extensive analysis. The more specific the requirements
for a dispatcher gadget are, the less probable it is that a compatible
dispatcher gadget exists. For each dispatcher gadget, the set of avail-
able calltargets is compared against the set of gadgets generated
in the previous step. As a consequence, if the intersection between
the two sets is empty for any gadget required for the attack, the
dispatcher gadget is eliminated.
To illustrate how not only the number of dispatcher gadgets but
also the number of calltargets is influenced by selecting a specific
CFI policy we use Figure 3. It shows a virtual table hierarchy and
how different CFI policies can limit the set of calltargets available to
a dispatcher mainloop gadget that calls the C2::function2(). Note
how virtual tables: C1-C3, and D1 (right side) map to virtual table
hierarchy nodes (see tree nodes in the left side marked with C1-C3,
and D1) depicted in the left side. Black shaded dots represent classes,
7
Figure 3: Left: virtual table hierarchy; Right: virtual tables.
left edges between nodes mean inheritance. Bottom children classes
inherit from top father classes. Functions marked with an asterisk
(right) override the parent class’ function, while functions without
are inherited (arrows). For example, when no CFI policy is enforced,
all functions depicted in Figure 3, and other functions including
non-virtual functions, can be reached and called during an attack.
Further, if the virtual table hierarchy/island (Marx CFI policy [39])
is used, all virtual functions depicted in Figure 3 would be valid
calltargets. In constrast, a strong policy such as ShrinkWrap’s [23]
CFI policy allows only to target the functions marked in green by
using fake objects to be invoked by the dispatcher gadget. Further,
note that not every dispatcher gadget is suitable, since it has to
match the specifications required by the attack type. For COOP’s
mainloop dispatcher gadgets, the requirements include: (1) having a
loop containing a (2) virtual function dispatch contained within the
loop, with the loop iterating over (3) an attacker-controlled array of
fake objects that are invoked by the dispatcher gadget. Lastly, also
note that not all calltargets are usable during attack construction.
To demonstrate which calltargets are usable during attack con-
struction for different deployed CFI policies, we use Figure 4, which
shows, from top to bottom, the process of gadget filtering based
on the target set of virtual table entries which in turn is based on
the deployed CFI policy. An arrow depicts virtual table inheritance
direction. Each circle represents a virtual table which has at least
one virtual table entry (a virtual function). Note that the number of
entries grows from top to bottom due to virtual table inheritance.
The top node contains a dispatcher gadget. The other nodes are
MainloopsDispatchersAll callsitesBaseC1C2C3D1C1 vtablefunction1()function2()C2 vtablefunction1()function2()*function3()*D1 vtablefunction1()*function2()function3()*C3 vtablefunction1()function2()*function3()function4()*1
2
4
3
4
6
4
6
6
7
8
9
5
7
Figure 4: From root node (i.e., 1) to bottom nodes the attack
gadget filtering process is described. Nodes can have the
same number (i.e., 4) inside. A number in the node repre-
sents the total number functions that can be called from
that particular class. More specifically, the number repre-
sents the sum of virtual and non-virtual table entries (i.e.,
functions), and the functions inherited along a single inheri-
tance path from the root node down to a particular leaf node.
other types of gadgets. A black circle denotes that it contains at
least one virtual table entry which can serve as gadget. A red circle
indicates there is no virtual table entry which can serve as gadget.
And a blue circle shows a virtual table denoting the end of a virtual
table inheritance path; it may or may not contain a useful gadget.
A green circle shows there is a virtual table gadget which can be
used as gadget but this is not reachable due to a CFI policy in-place;
thus, everything what follows after this node is not reachable, too.
For example, path: 1− 2− 4− 7 represents a valid gadget chain if
the functionality contained in this path is sufficient for an attack to
be performed. This path is a complete gadget chain. The difference
between a complete and partial gadget chain is that the first consti-
tutes a complete attack while the second is not a complete end-to-
end attack. Further, path: 1−2−3−4 is not valid as the virtual table
4 is not usable and also everything which follows in this particular
inheritance path after node 3 is not reachable, too. Path: 1−4−6−8
is a valid chain that reaches the end of a virtual table inheritance
tree path, but everything which follows after node 4 is not reachable.
Lastly, in the path 1−4−5−7 everything which follows after virtual
table 4 is not reachable; thus it cannot be used during attack chain
construction, even though node 7 is useful and node 5 is not useful.
Building Dispatcher Gadget Matching Sets. To understand the
notation used within this paper, we use Table 2 which depicts the
Table 2: Used symbol descriptions.
Symbol
IRpy
IRanдr
Fд
Src
CF I
Ds
Cs
δs
Ch
Obj
Description
payload representation in Python
binary representation in ANGR
set of all working gadgets for all categories
source code of target binary
static CFI policies to apply
set of potential dispatcher gadgets
set of potential calltargets per callsite
delta set of callsites and reachable gadgets
gadget chain
a list of object layouts that implement the payload
used notation along their descriptions. As such, note that only after
the candidate set has been built, usable dispatcher gadgets can be
identified. The set of calltargets for the dispatcher gadget has to
8
be compatible with the candidate sets Fд. Further, iTOP identifies
calltargets for each callsite by analyzing the source code Src of the
target binary. This data is then translated into a dispatcher gadget
set Ds, and legal calltarget sets for each dispatcher gadget Cs. The
intersection Cs ∩ Fд between the candidate gadgets and the avail-
able gadgets is called the delta set δs. The delta set contains the
candidates for every gadget type that are still reachable from the
dispatcher gadget with CFI policies in place. If the delta set is empty
for any gadget required to build the attack, the dispatcher gadget
is immediately discarded. A potential dispatcher gadget’s machine
code is then further analyzed to identify whether it is compatible
with the attack type.
Further, we describe the steps needed to find a main loop gadget.
First, a virtual function from the virtual table is called. The virtual
function’s offset is saved and later used during payload generation.
Second, the virtual table address is returned from an array. Third,
the function iterates over the array. Fourth, all the previous instruc-
tions are enclosed in a loop. Fifth, functions with compatible delta
sets that fulfill these conditions are considered usable dispatcher
gadgets. Lastly, in case none are found, the algorithm halts.
5.4 Assembling a Gadget Chain
In this section, we show how a combination of gadgets fulfilling
the attacker’s goals that are available to the dispatcher gadget is
determined. The gadget assembly phase is depicted in Figure 1
and consists of analysis step ❼ and step ❽. ESL allows to define
alternatives for blocks of gadgets, which is leveraged to create mul-
tiple equivalent Ch alternatives, thus increasing the probability of
discovering usable attacks.
Searching for Optimal Gadget Chains. Equation 1 presents iTOP’s
chain ranking formula (S = score). The chain ranking is based on
difficulty (Diff.) (i.e., a rating between 0 and 1 that an experienced
analyst can use to estimate the probability that a random function is
actually usable as a gadget of a certain required type), average time
to check a gadget (i.e., obtained from our gadget checking analysis),
and total availability of a gadget (i.e., how often that gadget type
is found within the analyzed program). Given the delta set δs and
the intermediate representation of the payload IRanдr , chains of
gadgets that encode the payload have to be generated.
S(Chain) =
min
Gadget∈Chain
|Gadget|
Diff.(Gadget) × Time(Gadget)
(1)
iTOP leverages the alternative chain definition feature of ESL to
generate chain variants, and then orders those by likelihood of suc-
cess. Metrics used to rank chains can include length, mean number
of candidate gadgets, minimum number of candidate gadgets, and
gadget difficulty. Depending on the analyst’s goals, several rank-
ings can make sense. First, a ranking that tries shortest chains will
produce the smallest payload. Second, a ranking based on difficulty
might yield faster results. iTOP leverages information obtained in
the simulation step (see Section 5.5 for more details). In case iTOP
attempts to build a chain and fails, the information obtained is used
to eliminate chains that will fail for similar reasons, and statistics
about usable gadget discovery rates can be used to reorder the chain
ranking.
Figure 5: iTOP’s gadget chain alternative building. Black box: gadgets for this statement exist. Blue box: no further gadgets ex-
ist. After a blue box follows always a red arrow indicating that the analysis cannot continue. For e.g., for SHELL(), 3 alternatives
(count arrows) are specified in the payload definition. For LOADVAL(&binsh), 2 alternatives are predefined in the ESL library.
To further understand how attack chains are specified by an an-
alyst, we use Figure 5 which shows how, for the goal of spawning
a shell, 3 different alternatives (count number of arrows starting
from SHELL()) can be specified by the analyst. The last 2 chains,
in turn, use the LOADVAL(...) function, for which 2 alternatives
are already predefined in the ESL libraries. Thus, note that the ESL
standard library provides a wide array of alternatives for register
initialization and execution of arbitrary functions. As such, differ-
ent chains for spawning a shell can be generated. Further, Figure 5
depicts 2 alternatives for SHELL() which use the same function: _r1
= LOADVAL(system);. Since this block is fully independent from
the surrounding blocks, valid subchains or the information that no
such chain exists can be reused and only has to be calculated once.
This way, even when hundreds of chains are possible, the search
space and thus runtime stays manageable.
5.5 Simulation and Payload Generation
In this section, we show how each gadget chain is simulated using
ANGR [46] in order to check whether it fulfills all constraints re-
quired by the gadget definition and whether it is compatible with
the gadgets contained so far in the chain. The gadget simulation
and payload generation phases are depicted in Figure 1 and consist
of analysis step ❾ and step ❿.
Figure 5 depicts this process. More specifically, dispatcher gadget
EXECUTE(system, &binsh), the first gadget in category
one (ESL Alternatives), cannot be linked (i.e., one red arrow
goes out) to any gadget in category 2 (ESL Libraries), and is thus
unusable. This can happen, for example, when gadgets can only
initialize registers with certain ranges of values, with the second
gadget requiring the value to be outside the range. In contrast,
the second candidate for gadget one, _r1 = LOADVAL(&binsh),
can be linked (i.e., two black arrows go out), and a valid chain is
found. If there are no suitable gadget combinations for a chain, iTOP
backtracks and and a different gadget chain will be used instead.
Gadget Chain Simulation. To understand how each gadget chain
is constructed and simulated, we use Algorithm 1 which depicts,
based on ANGR’s symbolic execution, how a chain of gadgets and
its dispatcher gadget are combined and simulated. For example,