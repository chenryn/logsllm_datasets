    key = 'lctf2018lctf2018'
    block_size = 16
    def random_str(length=5):
        random.seed(None)
        return ''.join((random.choice(string.ascii_letters + string.digits) for _ in range(length)))
    def get_username():
        username = random_str(length=5)
        if username != 'admin':
            return username
        else:
            return get_username()
    def check_token(token):
        if token == '' or token is None:
            return False
            try:
                token = str.replace(token, ' ', '+')
                token = base64.b64decode(token)
                cipher = AES.new(key, AES.MODE_ECB)
                token = cipher.decrypt(token)
                token = unpad(token, block_size)
                token = str(token, 'utf-8')
            except Exception as e:
                try:
                    return False
                finally:
                    e = None
                    del e
            token = str.split(token, '@')
            if len(token) != 4:
                return False
                try:
                    w = int(token[0])
                    h = int(token[1])
                    ua = token[2]
                    ts = datetime.datetime.fromtimestamp(int(token[3][:-3]))
                except Exception as e:
                    try:
                        return False
                    finally:
                        e = None
                        del e
                if w  now - (datetime.timedelta(minutes=3)):
                        return True
                    return False
# RE
### 拿去签到吧朋友
===================================
先是把输入的数据构建了一个二叉树，每一个节点是一个结构体
struct Bitree{
int data;
int subscript;//下标
Bitree *lchild;
Bitree *rchild;
};
构建的时候采取递归的方法，函数0040174C是构建二叉树的函数。比节点数据大的作为右孩子，小的作为左孩子，如果左（右）孩子存在了，则以此节点为参数继续执行0040174C函数，作为递归。
之后004017DD是二叉树的先序遍历函数，内存0040B610存放先序遍历的结果，内存0040B640存放对应数据的下标，至此初始化完成。
函数sub_401D6E为加密及校验函数。先把先序遍历转成二进制（每个字节的内容放进八个字节内，作为二进制表示），再对八个字节的二进制数进行一些swap和xor操作。大概可以猜到是DES，key是`fa1conn`。des之后得到36字节的密文，作为一个6*6的矩阵和另一个6*6的常矩阵相乘，得到的结果再跟常量矩阵对比。由此，可以解出先序遍历的结果。
    from numpy import*
    from Crypto.Cipher import DES
    A=[[0x17,0x41,0x18,0x4E,0x2B,0x38],[0x3B,0x43,0x15,0x2B,0x2D,0x4C],[0x17,0x36,0x4C,0x0C,0x41,0x2B],[0x59,0x28,0x20,0x43,0x49,0x39],[0x17,0x2D,0x1F,0x36,0x1F,0x34],[0x0D,0x18,0x36,0x41,0x22,0x18]]
    mA=matrix(A)
    B=[[0x0AA92,0x0C006,0x0A815,0x0C920,0x0D095,0x0CAD1],[0x7004,0x9B3C,0x68A1,0x0A2C1,0x8B5B,0x9EB5],[0x7E37,0x7AA2,0x4F95,0x0A344,0x82AC,0x8C00],[0x432B,0x71F7,0x732D,0x6E76,0x70A1,0x6F34],[0x0B465,0x0E401,0x0AF37,0x0DAD2,0x0DF89,0x0ECFA],[0x657D,0x6838,0x5FCE,0x977C,0x71F4,0x759E]]
    mB=matrix(B)
    mX=mB*mA.I
    X=matrix.tolist(mX)
    cipher=''
    for i in range(6):
        for j in range(6):
            X[i][j]=int(round(X[i][j]))
            cipher+=hex(X[i][j])[2:].zfill(2)
    cipher+='733CF57C'
    print(cipher)
    cipher=cipher.decode('hex')
    key='fa1conn\x00'
    des = DES.new(key, DES.MODE_ECB)
    plain=des.decrypt(cipher)
    print(plain)
LC-+)=1234@AFETRS{the^VYXZfislrvxyz}
之后在`00401ACC`比对了前半部分的下标，至此可以解出前半部分。
后面又有一个smc，把先序遍历数值做seed。接出来可以得到后半部分下标，就能得到完整flag了。
### MSP430
拿到手是一个接线图，一个hex文件，一个hex转成elf的.out，一个输出的内容图片
出题人已经告诉我们了单片机型好MSP430G2553。用ida打开lctf.out，在processor
type中选择MSP430，就可以反汇编了。但是ida对msp430的分析优化不足，有些东西会缺失（也可能是hex转成的elf出了问题），只能连蒙带猜的做。
先去找一份msp430的指令集，对着指令集看汇编。
函数名和一些全局变量名都保留了，还是有突破口的，现在函数名内浏览一遍，发现了RC keygen main
等函数，大概猜到用的是RC4。先从main函数开始看。先call keygen函数，参数是全局变量key的地址（R12），这里应该是key初始化的函数。
分析这个keygen函数，先把一个0x28地址的内容放到R15，我猜这里是出了问题的，所以并不知道地址里放了什么东西，假设这个数据为i，后面几句就比较清晰了，key[4]=i*3,
key[5]=i*2,key[6]=i&0x74,key[7]=i+0x50;这里只得到了后四位key,剩下的部分暂时不知道。
接下来回到main继续。在RC4_code的参数中有8，猜测是key的长度。找一下字符串，看到只有`0123456789abcdefLCTF0000`这个字符串，最后四位都是0，感觉是把之前的四位填进去了，所以猜测key是LCTFxxxx。后四位都是从一个byte数据得到的，所以可以尝试爆key。脚本如下：
    from Crypto.Cipher import ARC4
    cipher = "2db7b1a0bda4772d11f04412e96e037c370be773cd982cb03bc1eade".decode("hex")
    for i in xrange(0x100):
        k4 = (i * 3) & 0xFF
        k5 = (i * 2) & 0xFF
        k6 = ((i & 0x74) * 2) & 0xFF
        k7 = (i + 0x50) & 0xFF
        key = "LCTF" + chr(k4) + chr(k5) + chr(k6) + chr(k7)
        arc4 = ARC4.new(key)
        plain = arc4.decrypt(cipher)
        if(plain.find("CTF") != -1):
            print(plain)
直接可以得到flag，也是比较幸运
### easyvm
Vm题
603080开始是三段bytecode
sub_4009D2函数分三次对三段bytecode操作，sub_401722和sub_4017C2是对寄存器的赋值与还原，中间的sub_401502函数是操作函数，详细分析bytecode，可以得出它的操作过程：
1.计算输入长度，校验是否等于0x1C
2.将输入的每一位ch进行如下操作:
    ch=((ch*0x3f)+0x78)%0x80
3.与常量校验
把flag爆破出来就行了
    a=[0x3E,0x1A,0x56,0x0D,0x52,0x13,0x58,0x5A,0x6E,0x5C,0x0F,0x5A,0x46,0x07,0x09,0x52,0x25,0x5C,0x4C,0x0A,0x0A,0x56,0x33,0x40,0x15,0x07,0x58,0x0F]
    a.reverse()
    b=[]
    for i in range(28):
        b.append(0)
    for i in range(28):
        for j in range(0x7F):
            if ((j *0x3f)+0x7B)%0x80==a[i]:
                b[i]=j
    s=''
    for i in range(28):
        s+=chr(b[i])
        print(s)
lctf{He11o_Virtual_Machine!}
### b2w
    from struct import unpack
    f = open("./out.wav", "rb")
    header = f.read(0xC)
    fmt = f.read(0x18)
    data = f.read(0x8)
    buf = f.read()
    f.close()
    channel = 2
    rate = 48000
    length = 90000
    key = bytearray("LCTF{LcTF_1s_S0Oo0Oo_c0o1_6uT_tH1S_iS_n0t_fL4g}")
    ln = len(key)
    tmp = bytearray(buf)
    k = 0
    n = 0
    for i in xrange(length):
        for j in xrange(channel):
            m = key[n % ln]
            tmp[k + 0] ^= m
            tmp[k + 1] ^= m
            n += m
            k += 2
    buf = str(tmp)
    f = open("./dec.wav", "wb")
    f.write(header + fmt + data + buf)
    f.close()
解密之后用`GoldWave`的`x-y`模式就能看到flag.
`LCTF{NOW_YOU_GOT_A_OSCILLOSCOPE_MEDIA_PLAYER}`
### enigma
改bin使之输出加密的结果.
> 0000559A22B498A0 -> 48 89 FE 48 C7 C0 0F 00 00 00 90 90 90 90 90 90 90 90 90
> 90 90 90 90 90 90 90 90 90 90 90 90 90
    from pwn import *
    context.log_level = "warn"
    secret = "DQYHTONIJLYNDLA"
    flag = ""
    for i in xrange(len(secret)):
        cc = " "
        for ch in "ABCDEFGHIJKLMNOPQRSTUVWXYZ":
            p = process("./enigma1")
            p.sendline((flag + ch).ljust(15, "A"))
            t = p.recvline(False)
            p.close()
            if(t.startswith(secret[:i + 1])):
                cc = ch
                break
        flag += cc
        print(flag)
`LCTF{DOUBLEBUTTERFLY}`
### maze
改bin使之输出加密的结果.
> 000055C60F62A568 -> 75 F8 90 90 90 90 90 90 90  
>  000055C60F62A8A8 -> 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
    from pwn import *
    context.log_level = "warn"
    secret = "IQURUEURYEU#WRTYIPUYRTI!WTYTE!WOR%Y$W#RPUEYQQ^EE"
    flag = ""
    for i in xrange(0, len(secret), 2):
        cc = " "
        for j in xrange(0x20, 0x7F):
            ch = chr(j)
            p = process("./maze1")
            p.sendlineafter("Input your Flag:\n", (flag + ch).ljust(24, "A"))
            t = p.recvline(False)
            p.close()
            if(t.startswith(secret[:i + 2])):
                cc = ch
                break
        assert(cc != " ")
        flag += cc
        print(flag)
`LCTF{Y0ur_fl4g_1s_wr0ng}`
### game
打开后是一个游戏，提示说赢了就能得到flag，直接在判定输赢的地方设断点，直接跳到赢就可以得到falg了
000000000040248F改成jmp
00000000004024B2nop掉
00000000004024C2nop掉
然后打开游戏按个空格就有flag了
# 总结
好好学习，天天向上。