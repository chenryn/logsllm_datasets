](https://images.seebug.org/content/images/2019/12/739f54e3-4596-45f5-bca6-74abb5607a7d.png-w331s)
在浏览器插件的世界里，相应的事件触发被划分为多个层级，每个层级逐一执行处理。
由于这个api下的接口太多，这里拿其中的一个举例子
    chrome.webRequest.onBeforeRequest.addListener(
        function(details) {
          return {cancel: details.url.indexOf("://www.baidu.com/") != -1};
        },
        {urls: [""]},
        ["blocking"]);
当访问baidu的时候，请求会被block
![
](https://images.seebug.org/content/images/2019/12/1fa3e81b-4453-4d90-a1bc-280769dc0964.png-w331s)
当设置了redirectUrl时会产生相应的跳转
    chrome.webRequest.onBeforeRequest.addListener(
        function(details) {
            if(details.url.indexOf("://www.baidu.com/") != -1){
                return {redirectUrl: "https://lorexxar.cn"};
            }
        },
        {urls: [""]},
        ["blocking"]);
此时访问www.baidu.com会跳转lorexxar.cn
在文档中提到，通过这些api可以直接修改post提交的内容。
## chrome.bookmarks
chrome.bookmarks是用来操作chrome收藏夹栏的api，可以用于获取、修改、创建收藏夹内容。
在manifest中需要申请bookmarks权限。
当我们使用这个api时，不但可以获取所有的收藏列表，还可以静默修改收藏对应的链接。
![
](https://images.seebug.org/content/images/2019/12/cb89e63a-6c4b-45af-9ace-9b50f3a21590.png-w331s)
![
](https://images.seebug.org/content/images/2019/12/badc2467-5c17-4797-b357-3fe26e85a910.png-w331s)
## chrome.downloads
chrome.downloads是用来操作chrome中下载文件相关的api，可以创建下载，继续、取消、暂停，甚至可以打开下载文件的目录或打开下载的文件。
这个api在manifest中需要申请downloads权限，如果想要打开下载的文件，还需要申请downloads.open权限。
    {
        "name": "My extension",
        ...
        "permissions": [
          "downloads",
          "downloads.open"
        ],
        ...
      }
在这个api下，提供了许多相关的方法
  * download - chrome.downloads.download(object options, function callback)
  * search - chrome.downloads.search(object query, function callback)
  * pause - chrome.downloads.pause(integer downloadId, function callback)
  * resume - chrome.downloads.resume(integer downloadId, function callback)
  * cancel - chrome.downloads.cancel(integer downloadId, function callback)
  * getFileIcon - chrome.downloads.getFileIcon(integer downloadId, object options, function callback)
  * open - chrome.downloads.open(integer downloadId)
  * show - chrome.downloads.show(integer downloadId)
  * showDefaultFolder - chrome.downloads.showDefaultFolder()
  * erase - chrome.downloads.erase(object query, function callback)
  * removeFile - chrome.downloads.removeFile(integer downloadId, function callback)
  * acceptDanger - chrome.downloads.acceptDanger(integer downloadId, function callback)
  * setShelfEnabled - chrome.downloads.setShelfEnabled(boolean enabled)
当我们拥有相应的权限时，我们可以直接创建新的下载，如果是危险后缀，比如.exe等会弹出一个相应的危险提示。
![
](https://images.seebug.org/content/images/2019/12/6ac909e8-99a5-437d-8440-05e145c54561.png-w331s)
除了在下载过程中可以暂停、取消等方法，还可以通过show打开文件所在目录或者open直接打开文件。
但除了需要额外的open权限以外，还会弹出一次提示框。
![
](https://images.seebug.org/content/images/2019/12/ef6ffe60-3a71-46aa-b121-6e24bf257658.png-w331s)
相应的其实可以下载`file:///C:/Windows/System32/calc.exe`并执行，只不过在下载和执行的时候会有专门的危险提示。
反之来说，如果我们下载的是一个标识为非危险的文件，那么我们就可以静默下载并且打开文件。
## chrome.history && chrome.sessions
chrome.history
是用来操作历史纪录的api，和我们常见的浏览器历史记录的区别就是，这个api只能获取这次打开浏览器中的历史纪律，而且要注意的是，只有关闭的网站才会算进历史记录中。
这个api在manfiest中要申请history权限。
     {
        "name": "My extension",
        ...
        "permissions": [
          "history"
        ],
        ...
      }
api下的所有方法如下，主要围绕增删改查来
  * search - chrome.history.search(object query, function callback)
  * getVisits - chrome.history.getVisits(object details, function callback)
  * addUrl - chrome.history.addUrl(object details, function callback)
  * deleteUrl - chrome.history.deleteUrl(object details, function callback)
  * deleteRange - chrome.history.deleteRange(object range, function callback)
  * deleteAll - chrome.history.deleteAll(function callback)
浏览器可以获取这次打开浏览器之后所有的历史纪录。
![
](https://images.seebug.org/content/images/2019/12/03404ab3-0444-4d06-9836-c84c8206ce23.png-w331s)
在chrome的api中，有一个api和这个类似- **chrome.sessions**
这个api是用来操作和回复浏览器会话的，同样需要申请sessions权限。
  * getRecentlyClosed - chrome.sessions.getRecentlyClosed( Filter filter, function callback)
  * getDevices - chrome.sessions.getDevices( Filter filter, function callback)
  * restore - chrome.sessions.restore(string sessionId, function callback)
通过这个api可以获取最近关闭的标签会话，还可以恢复。
## chrome.tabs
chrome.tabs是用于操作标签页的api，算是所有api中比较重要的一个api，其中有很多特殊的操作，除了可以控制标签页以外，也可以在标签页内执行js，改变css。
无需声明任何权限就可以调用tabs中的大多出api，但是如果需要修改tab的url等属性，则需要tabs权限，除此之外，想要在tab中执行js和修改css，还需要activeTab权限才行。
  * get - chrome.tabs.get(integer tabId, function callback)
  * getCurrent - chrome.tabs.getCurrent(function callback)
  * connect - runtime.Port chrome.tabs.connect(integer tabId, object connectInfo)
  * sendRequest - chrome.tabs.sendRequest(integer tabId, any request, function responseCallback)
  * sendMessage - chrome.tabs.sendMessage(integer tabId, any message, object options, function responseCallback)
  * getSelected - chrome.tabs.getSelected(integer windowId, function callback)
  * getAllInWindow - chrome.tabs.getAllInWindow(integer windowId, function callback)
  * create - chrome.tabs.create(object createProperties, function callback)
  * duplicate - chrome.tabs.duplicate(integer tabId, function callback)
  * query - chrome.tabs.query(object queryInfo, function callback)
  * highlight - chrome.tabs.highlight(object highlightInfo, function callback)
  * update - chrome.tabs.update(integer tabId, object updateProperties, function callback)
  * move - chrome.tabs.move(integer or array of integer tabIds, object - moveProperties, function callback)
  * reload - chrome.tabs.reload(integer tabId, object reloadProperties, function callback)
  * remove - chrome.tabs.remove(integer or array of integer tabIds, function callback)
  * detectLanguage - chrome.tabs.detectLanguage(integer tabId, function callback)
  * captureVisibleTab - chrome.tabs.captureVisibleTab(integer windowId, object options, function callback)
  * executeScript - chrome.tabs.executeScript(integer tabId, object details, function callback)
  * insertCSS - chrome.tabs.insertCSS(integer tabId, object details, function callback)
  * setZoom - chrome.tabs.setZoom(integer tabId, double zoomFactor, function callback)
  * getZoom - chrome.tabs.getZoom(integer tabId, function callback)
  * setZoomSettings - chrome.tabs.setZoomSettings(integer tabId, ZoomSettings zoomSettings, function callback)
  * getZoomSettings - chrome.tabs.getZoomSettings(integer tabId, function callback)
  * discard - chrome.tabs.discard(integer tabId, function callback)
  * goForward - chrome.tabs.goForward(integer tabId, function callback)
  * goBack - chrome.tabs.goBack(integer tabId, function callback)
一个比较简单的例子，如果获取到tab，我们可以通过update静默跳转tab。
![
](https://images.seebug.org/content/images/2019/12/312906ce-7698-41e5-bce6-d16a24e8c253.png-w331s)
同样的，除了可以控制任意tab的链接以外，我们还可以新建、移动、复制，高亮标签页。
当我们拥有activeTab权限时，我们还可以使用captureVisibleTab来截取当前页面，并转化为data数据流。
同样我们可以用executeScript来执行js代码，这也是popup和当前页面一般沟通的主要方式。
![
](https://images.seebug.org/content/images/2019/12/309fe7dc-f4a2-4dd7-9b0f-1a40a4ee6436.png-w331s)
这里我主要整理了一些和敏感信息相关的API，对于插件的安全问题讨论也将主要围绕这些API来讨论。
# chrome 插件权限体系
在了解基本的API之后，我们必须了解一下chrome
插件的权限体系，在跟着阅读前面相关api的部分之后，不难发现，chrome其实对自身的插件体系又非常严格的分割，但也许正是因为这样，对于插件开发者来说，可能需要申请太多的权限用于插件。
所以为了省事，chrome还给出了第二种权限声明方式，就是基于域的权限体系。
在权限申请中，可以申请诸如：
  * `"http://*/*",`
  * `"https://*/*"`
  * `"*://*/*",`
  * `"http://*/",`
  * `"https://*/",`
这样针对具体域的权限申请方式，还支持``直接替代所有。
在后来的权限体系中，Chrome新增了`activeTab`来替代``，在声明了`activeTab`之后，浏览器会赋予插件操作当前活跃选项卡的操作权限，且不会声明具体的权限要求。
  * 当没有activeTab 
  * 当申请activeTab后 
当activeTab权限被声明之后，无需任何其他权限就可以执行以下操作：
  * 调用tabs.executeScript 和 tabs.insertCSS
  * 通过tabs.Tab对象获取页面的各种信息
  * 获取webRequest需要的域权限
换言之，当插件申请到activeTab权限时，哪怕获取不到浏览器信息，也能任意操作浏览的标签页。
更何况，对于大多数插件使用者，他们根本不关心插件申请了什么权限，所以插件开发者即便申请需要权限也不会影响使用，在这种理念下，安全问题就诞生了。 ![
](https://images.seebug.org/content/images/2019/12/b0a9aff8-4d61-436f-99b0-1246b765fba4.png-w331s)
# 真实世界中的数据
经过粗略统计，现在公开在chrome商店的chrome ext超过40000，还不包括私下传播的浏览器插件。
为了能够尽量真实的反映真实世界中的影响，这里我们随机选取1200个chrome插件，并从这部分的插件中获取一些结果。值得注意的是，下面提到的权限并不一定代表插件不安全，只是当插件获取这样的权限时，它就有能力完成不安
全的操作。
这里我们使用Cobra-W新增的Chrome ext扫描功能对我们选取的1200个目标进行扫描分析。
     python3 cobra.py -t '..\chrome_target\' -r 4104 -lan chromeext -d
# ``
当插件获取到``或者`*://*/*`等类似的权限之后，插件可以操作所有打开的标签页，可以静默执行任意js、css代码。
我们可以用以下规则来扫描：
    class CVI_4104:
        """
        rule for chrome crx
        """
        def __init__(self):
            self.svid = 4104
            self.language = "chromeext"
            self.author = "LoRexxar"
            self.vulnerability = "Manifest.json permissions 要求权限过大"
            self.description = "Manifest.json permissions 要求权限过大"
            # status
            self.status = True
            # 部分配置
            self.match_mode = "special-crx-keyword-match"
            self.keyword = "permissions"
            self.match = [
                "http://*/*",
                "https://*/*",
                "*://*/*",
                "",
                "http://*/",
                "https://*/",
                "activeTab",
            ]
            self.match = list(map(re.escape, self.match))
            self.unmatch = []
            self.vul_function = None
        def main(self, regex_string):
            """
            regex string input
            :regex_string: regex match string
            :return:
            """
            pass
在我们随机挑选的1200个插件中，共585个插件申请了相关的权限。 ![
](https://images.seebug.org/content/images/2019/12/976e4922-940d-4427-8f63-5f17eef21b32.png-w331s)
其中大部分插件都申请了相对范围较广的覆盖范围。
## 其他
然后我们主要扫描部分在前面提到过的敏感api权限，涉及到相关的权限的插件数量如下：
![
](https://images.seebug.org/content/images/2019/12/c350ecd7-86d8-4582-a15a-642f25ff9702.png-w331s)
# 后记
在翻阅了chrome相关的文档之后，我们不难发现，作为浏览器中相对独立的一层，插件可以轻松的操作相对下层的会话层，同时也可以在获取一定的权限之后，读取一些更上层例如操作系统的信息...
而且最麻烦的是，现代在使用浏览器的同时，很少会在意浏览器插件的安全性，而事实上，chrome商店也只能在一定程度上检测插件的安全性，但是却没办法完全验证，换言之，如果你安装了一个恶意插件，也没有任何人能为你的浏览器负责...安全问题也就真实的影响着各个浏览器的使用者。
# ref
  * 
* * *