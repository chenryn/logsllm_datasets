.IX Item "qx/STRING/"
.IP "qw/STRING/" 8
.IX Item "qw/STRING/"
.PD
Generalized quotes.  See \*(L"Regexp Quote-Like Operators\*(R" in perlop.
.IP "quotemeta \s-1EXPR\s0" 8
.IX Item "quotemeta EXPR"
.PD 0
.IP "quotemeta" 8
.IX Item "quotemeta"
.PD
Returns the value of \s-1EXPR\s0 with all non\-\*(L"word\*(R"
characters backslashed.  (That is, all characters not matching
\&\f(CW\*(C`/[A\-Za\-z_0\-9]/\*(C'\fR will be preceded by a backslash in the
returned string, regardless of any locale settings.)
This is the internal function implementing
the \f(CW\*(C`\eQ\*(C'\fR escape in double-quoted strings.
.Sp
If \s-1EXPR\s0 is omitted, uses \f(CW$_\fR.
.IP "rand \s-1EXPR\s0" 8
.IX Item "rand EXPR"
.PD 0
.IP "rand" 8
.IX Item "rand"
.PD
Returns a random fractional number greater than or equal to \f(CW0\fR and less
than the value of \s-1EXPR\s0.  (\s-1EXPR\s0 should be positive.)  If \s-1EXPR\s0 is
omitted, the value \f(CW1\fR is used.  Currently \s-1EXPR\s0 with the value \f(CW0\fR is
also special-cased as \f(CW1\fR \- this has not been documented before perl 5.8.0
and is subject to change in future versions of perl.  Automatically calls
\&\f(CW\*(C`srand\*(C'\fR unless \f(CW\*(C`srand\*(C'\fR has already been called.  See also \f(CW\*(C`srand\*(C'\fR.
.Sp
Apply \f(CW\*(C`int()\*(C'\fR to the value returned by \f(CW\*(C`rand()\*(C'\fR if you want random
integers instead of random fractional numbers.  For example,
.Sp
.Vb 1
\&    int(rand(10))
.Ve
.Sp
returns a random integer between \f(CW0\fR and \f(CW9\fR, inclusive.
.Sp
(Note: If your rand function consistently returns numbers that are too
large or too small, then your version of Perl was probably compiled
with the wrong number of \s-1RANDBITS\s0.)
.IP "read \s-1FILEHANDLE\s0,SCALAR,LENGTH,OFFSET" 8
.IX Item "read FILEHANDLE,SCALAR,LENGTH,OFFSET"
.PD 0
.IP "read \s-1FILEHANDLE\s0,SCALAR,LENGTH" 8
.IX Item "read FILEHANDLE,SCALAR,LENGTH"
.PD
Attempts to read \s-1LENGTH\s0 \fIcharacters\fR of data into variable \s-1SCALAR\s0
from the specified \s-1FILEHANDLE\s0.  Returns the number of characters
actually read, \f(CW0\fR at end of file, or undef if there was an error (in
the latter case \f(CW$!\fR is also set).  \s-1SCALAR\s0 will be grown or shrunk 
so that the last character actually read is the last character of the
scalar after the read.
.Sp
An \s-1OFFSET\s0 may be specified to place the read data at some place in the
string other than the beginning.  A negative \s-1OFFSET\s0 specifies
placement at that many characters counting backwards from the end of
the string.  A positive \s-1OFFSET\s0 greater than the length of \s-1SCALAR\s0
results in the string being padded to the required size with \f(CW"\e0"\fR
bytes before the result of the read is appended.
.Sp
The call is actually implemented in terms of either Perl's or system's
\&\fIfread()\fR call.  To get a true \fIread\fR\|(2) system call, see \f(CW\*(C`sysread\*(C'\fR.
.Sp
Note the \fIcharacters\fR: depending on the status of the filehandle,
either (8\-bit) bytes or characters are read.  By default all
filehandles operate on bytes, but for example if the filehandle has
been opened with the \f(CW\*(C`:utf8\*(C'\fR I/O layer (see \*(L"open\*(R", and the \f(CW\*(C`open\*(C'\fR
pragma, open), the I/O will operate on \s-1UTF\-8\s0 encoded Unicode
characters, not bytes.  Similarly for the \f(CW\*(C`:encoding\*(C'\fR pragma:
in that case pretty much any characters can be read.
.IP "readdir \s-1DIRHANDLE\s0" 8
.IX Item "readdir DIRHANDLE"
Returns the next directory entry for a directory opened by \f(CW\*(C`opendir\*(C'\fR.
If used in list context, returns all the rest of the entries in the
directory.  If there are no more entries, returns an undefined value in
scalar context or a null list in list context.
.Sp
If you're planning to filetest the return values out of a \f(CW\*(C`readdir\*(C'\fR, you'd
better prepend the directory in question.  Otherwise, because we didn't
\&\f(CW\*(C`chdir\*(C'\fR there, it would have been testing the wrong file.
.Sp
.Vb 3
\&    opendir(DIR, $some_dir) || die "can't opendir $some_dir: $!";
\&    @dots = grep { /^\e./ && -f "$some_dir/$_" } readdir(DIR);
\&    closedir DIR;
.Ve
.IP "readline \s-1EXPR\s0" 8
.IX Item "readline EXPR"
Reads from the filehandle whose typeglob is contained in \s-1EXPR\s0.  In scalar
context, each call reads and returns the next line, until end-of-file is
reached, whereupon the subsequent call returns undef.  In list context,
reads until end-of-file is reached and returns a list of lines.  Note that
the notion of \*(L"line\*(R" used here is however you may have defined it
with \f(CW$/\fR or \f(CW$INPUT_RECORD_SEPARATOR\fR).  See \*(L"$/\*(R" in perlvar.
.Sp
When \f(CW$/\fR is set to \f(CW\*(C`undef\*(C'\fR, when \fIreadline()\fR is in scalar
context (i.e. file slurp mode), and when an empty file is read, it
returns \f(CW''\fR the first time, followed by \f(CW\*(C`undef\*(C'\fR subsequently.
.Sp
This is the internal function implementing the \f(CW\*(C`\*(C'\fR
operator, but you can use it directly.  The \f(CW\*(C`\*(C'\fR
operator is discussed in more detail in \*(L"I/O Operators\*(R" in perlop.
.Sp
.Vb 2
\&    $line = ;
\&    $line = readline(*STDIN);           # same thing
.Ve
.Sp
If readline encounters an operating system error, \f(CW$!\fR will be set with the
corresponding error message.  It can be helpful to check \f(CW$!\fR when you are
reading from filehandles you don't trust, such as a tty or a socket.  The
following example uses the operator form of \f(CW\*(C`readline\*(C'\fR, and takes the necessary
steps to ensure that \f(CW\*(C`readline\*(C'\fR was successful.
.Sp
.Vb 8
\&    for (;;) {
\&        undef $!;
\&        unless (defined( $line = <> )) {
\&            die $! if $!;
\&            last; # reached EOF
\&        }
\&        # ...
\&    }
.Ve
.IP "readlink \s-1EXPR\s0" 8
.IX Item "readlink EXPR"
.PD 0
.IP "readlink" 8
.IX Item "readlink"
.PD
Returns the value of a symbolic link, if symbolic links are
implemented.  If not, gives a fatal error.  If there is some system
error, returns the undefined value and sets \f(CW$!\fR (errno).  If \s-1EXPR\s0 is
omitted, uses \f(CW$_\fR.
.IP "readpipe \s-1EXPR\s0" 8
.IX Item "readpipe EXPR"
\&\s-1EXPR\s0 is executed as a system command.
The collected standard output of the command is returned.
In scalar context, it comes back as a single (potentially
multi\-line) string.  In list context, returns a list of lines
(however you've defined lines with \f(CW$/\fR or \f(CW$INPUT_RECORD_SEPARATOR\fR).
This is the internal function implementing the \f(CW\*(C`qx/EXPR/\*(C'\fR
operator, but you can use it directly.  The \f(CW\*(C`qx/EXPR/\*(C'\fR
operator is discussed in more detail in \*(L"I/O Operators\*(R" in perlop.
.IP "recv \s-1SOCKET\s0,SCALAR,LENGTH,FLAGS" 8
.IX Item "recv SOCKET,SCALAR,LENGTH,FLAGS"
Receives a message on a socket.  Attempts to receive \s-1LENGTH\s0 characters
of data into variable \s-1SCALAR\s0 from the specified \s-1SOCKET\s0 filehandle.
\&\s-1SCALAR\s0 will be grown or shrunk to the length actually read.  Takes the
same flags as the system call of the same name.  Returns the address
of the sender if \s-1SOCKET\s0's protocol supports this; returns an empty
string otherwise.  If there's an error, returns the undefined value.
This call is actually implemented in terms of \fIrecvfrom\fR\|(2) system call.
See \*(L"\s-1UDP:\s0 Message Passing\*(R" in perlipc for examples.
.Sp
Note the \fIcharacters\fR: depending on the status of the socket, either
(8\-bit) bytes or characters are received.  By default all sockets
operate on bytes, but for example if the socket has been changed using
\&\fIbinmode()\fR to operate with the \f(CW\*(C`:utf8\*(C'\fR I/O layer (see the \f(CW\*(C`open\*(C'\fR
pragma, open), the I/O will operate on \s-1UTF\-8\s0 encoded Unicode
characters, not bytes.  Similarly for the \f(CW\*(C`:encoding\*(C'\fR pragma:
in that case pretty much any characters can be read.
.IP "redo \s-1LABEL\s0" 8
.IX Item "redo LABEL"
.PD 0
.IP "redo" 8
.IX Item "redo"
.PD
The \f(CW\*(C`redo\*(C'\fR command restarts the loop block without evaluating the
conditional again.  The \f(CW\*(C`continue\*(C'\fR block, if any, is not executed.  If
the \s-1LABEL\s0 is omitted, the command refers to the innermost enclosing
loop.  This command is normally used by programs that want to lie to
themselves about what was just input:
.Sp
.Vb 16
\&    # a simpleminded Pascal comment stripper
\&    # (warning: assumes no { or } in strings)
\&    LINE: while () {
\&        while (s|({.*}.*){.*}|$1 |) {}
\&        s|{.*}| |;
\&        if (s|{.*| |) {
\&            $front = $_;
\&            while () {
\&                if (/}/) {      # end of comment?
\&                    s|^|$front\e{|;
\&                    redo LINE;
\&                }
\&            }
\&        }
\&        print;
\&    }
.Ve
.Sp
\&\f(CW\*(C`redo\*(C'\fR cannot be used to retry a block which returns a value such as
\&\f(CW\*(C`eval {}\*(C'\fR, \f(CW\*(C`sub {}\*(C'\fR or \f(CW\*(C`do {}\*(C'\fR, and should not be used to exit
a \fIgrep()\fR or \fImap()\fR operation.
.Sp
Note that a block by itself is semantically identical to a loop
that executes once.  Thus \f(CW\*(C`redo\*(C'\fR inside such a block will effectively
turn it into a looping construct.
.Sp
See also \*(L"continue\*(R" for an illustration of how \f(CW\*(C`last\*(C'\fR, \f(CW\*(C`next\*(C'\fR, and
\&\f(CW\*(C`redo\*(C'\fR work.
.IP "ref \s-1EXPR\s0" 8
.IX Item "ref EXPR"
.PD 0
.IP "ref" 8
.IX Item "ref"
.PD
Returns a true value if \s-1EXPR\s0 is a reference, false otherwise.  If \s-1EXPR\s0
is not specified, \f(CW$_\fR will be used.  The value returned depends on the
type of thing the reference is a reference to.
Builtin types include:
.Sp
.Vb 7
\&    SCALAR
\&    ARRAY
\&    HASH
\&    CODE
\&    REF
\&    GLOB
\&    LVALUE
.Ve
.Sp
If the referenced object has been blessed into a package, then that package
name is returned instead.  You can think of \f(CW\*(C`ref\*(C'\fR as a \f(CW\*(C`typeof\*(C'\fR operator.
.Sp
.Vb 9
\&    if (ref($r) eq "HASH") {
\&        print "r is a reference to a hash.\en";
\&    }
\&    unless (ref($r)) {
\&        print "r is not a reference at all.\en";
\&    }
\&    if (UNIVERSAL::isa($r, "HASH")) {  # for subclassing
\&        print "r is a reference to something that isa hash.\en";
\&    }
.Ve
.Sp
See also perlref.
.IP "rename \s-1OLDNAME\s0,NEWNAME" 8
.IX Item "rename OLDNAME,NEWNAME"
Changes the name of a file; an existing file \s-1NEWNAME\s0 will be
clobbered.  Returns true for success, false otherwise.
.Sp
Behavior of this function varies wildly depending on your system
implementation.  For example, it will usually not work across file system
boundaries, even though the system \fImv\fR command sometimes compensates
for this.  Other restrictions include whether it works on directories,
open files, or pre-existing files.  Check perlport and either the
\&\fIrename\fR\|(2) manpage or equivalent system documentation for details.
.IP "require \s-1VERSION\s0" 8
.IX Item "require VERSION"
.PD 0
.IP "require \s-1EXPR\s0" 8
.IX Item "require EXPR"
.IP "require" 8
.IX Item "require"
.PD
Demands a version of Perl specified by \s-1VERSION\s0, or demands some semantics
specified by \s-1EXPR\s0 or by \f(CW$_\fR if \s-1EXPR\s0 is not supplied.
.Sp