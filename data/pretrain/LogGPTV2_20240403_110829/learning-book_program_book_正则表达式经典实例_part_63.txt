正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
326第6章
www.TopSage.com
---
## Page 343
对上一个正则表达式进行修改，使之可以匹配在一大段文本中的数字：
[-+} ?(\b[0-9]+(\. [0-9]*) ?1\. [0-9]+) ([eE] [-+]?[0-9]+\b) ?
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby\
讨论
这里的所有正则表达式两边都添加了定位符（实例2.5），以确保我们会检查整个输人
是一个浮点数，而不是在更大的字符串中的一个浮点数。如果你想要在一大段文本中
查找浮点数，那么可以按照在实例6.1中的讲解使用单词边界或者环视。
的内容。我们使用字符类（实例2.3）来匹配符号、数字和e。其中的加号和问号量词
（实例2.12）充许出现任意多个数字和一个可选的指数符号。
如果只是把符号和整数部分变为可选的也比较容易。在表示符号的字符类之后添加一
个问号就可以把它变成可选的。而把加号量词替换为星号就可以充许对整数数字重复0
次或多次，而不是1次或多次。
当我们需要把符号、整数和小数部分都变成可选的时候，就会遇到比较复杂的情况。
虽然单个来讲，它们都是可选的，但是它们不能同时都不出现，而空字符串显然不是
一个合法的浮点数。如果采用最简单的解答形式，[-+]？[0-9]*.？[0-9]*>，它也可以匹配
所有合法的浮点数，但是也能匹配到空字符串。而且由于略掉了定位符，所以正则式
会匹配到目标文本中在任意两个字符之间的长度为0的字符串。如果用这个正则式和
替代文本{$&>对字符串123abc456执行查找和替换，你会得到{123）{a{b{}c{456}）。
正则式可以正确匹配123和456，但是它还会在每次其他匹配尝试中都找到一个长度为
0的匹配。
如果你要创建一个有可能所有内容都可选的正则表达式，那么就需要考虑一下如果其
中一个部分实际上被略去之后，其他所有内容是否还真的是可选的。例如，浮点数就
必须拥有至少一个数字。
这个实例的解决方案中清楚地说明了当整数和小数部分都是可选的时候，二者之一依
然是必需的。它们同样还明确说明了123.到底是一个带小数点的浮点数，还是一个整
数之后跟着一个不属于数字的点号。例如，在有些编程语言中，整数之后的点号可以
是一个连接操作符，或者是由两个点号表示的区间操作符中的第一个点号。
要实现整数和小数部分不能同时被省略的要求，我们在一个分组（实例2.9）中使用了
多选结构（实例2.8）来把两种情形都列出来。会匹配一个必需的整
数部分和可选的小数部分。八.[0-9]+会只匹配一个小数部分。
把二者组合起来，就可以覆盖所有3种情形。第一个选择分
支覆盖了包含整数和小数部分的浮点数，以及不包含小数部分的数字。第二个选择分
数字327
www.TopSage.com
---
## Page 344
支则只匹配了小数部分。因为多选操作符的优先级是最低的，所以在我们把它们添加
到一个更长的正则表达式之前，必须把这两个选择分支放到一个分组中。
要求在略去小数部分的时候，也同样要略去小数点。如果即
使没有小数数字，也可以出现小数点，那么我们可以使用。在
这个正则式的第-个选择分支中，小数部分还是被放到了一个问号量词的分组中，这
样它就成为可选的。区别是现在小数部分数字本身也是可选的。我们把加号（1次或多
次）替换为了星号（0次或多次)。造成的结果是这个正则式中的第一个选择分支会匹
配包含可选小数部分的整数，而小数部分则可以是带数字的小数部分，或署只是一个
小数点。第二个选择分支没有改变。
前面所给的最后一个示例的意义在于我们要求修改的是一个东西，而在正则式中改动
的却是另外一个地方。要求修改的是可以让小数点自已出现，而不用一定要和小数部
分的数字一起出现。为了达到这个自的，我们修改的是用于小数部分数字的学符类之
上的量词。之所以这样做，是因为小数点和字符类都已经被放到了一个分组中，可以
让二者同时都成为可选的。
参见
实例2.3、实例2.8、实例2.9和实例2.12。
6.8含有千位分隔符的数
问题描述
你想要匹配使用逗号来作为千位分隔符，点号作为小数分隔符的数字。
解决方案
整数和小数部分都是必需的：
[0-9]{1,3}(,[0-9]3})*\.[0-9]+$
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
整数和小数部分是必需的。如果略掉小数部分就必须略去小数点：
[0-9]{1,3}(,[0-9]{3}) *(\.[0-9]+) ?$
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
整数和小数部分是可选的。如果略掉小数部分就必须略去小数点。
([0-9]{1,3}(,[0-9](3})*(\.[0-9]+)？1\.[0-9]+)$
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
328第6章
www.TopSage.com
---
## Page 345
对上一个正则式进行修改，从而可以用于在一大段文本中查找数字：
\b[0-9](1,3}(,[0-9](3}) *(\.[0-9]+)？\b1\.[0-9]+\b
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
讨论
因为所有这些正则表达式都会匹配浮点数，所以它们使用的技巧与上一个实例是相同
的。唯一的区别是，在匹配整数部分的时候，我们用的不再是简单的[0-9]+>，而是
[0-9]{1,3}（[0-9](3}）*）。这个正则表达式可以匹配1～3个数字，然后是0个或多个包
含逗号和3个数字的分组。
要把整数部分变成可选的，我们并不能用[0-9]{0,3}（[0-9]{3})*>，这是因为它会匹配
到包含一个前导逗号的数字，例如，123。这个陷阱同我们在上一个实例中讲解的把所
有内容都变成可选的情形是相同的。要把整数部分变成可选的，我们并不去修改正则
式中用于整数的组成部分，而是把它整个都改成可选的。这个解答中的最后两个正则
式使用了多选结构来完成这个任务。在多选结构中包含了整数部分必需和小数部分可
选的正则式，与匹配不带整数部分的小数部分的正则式。这样就可以产生一个充许整
数和小数部分可选，但是又不能同时被省略的正则表达式。
参见
实例2.3、实例2.9和实例2.12。
6.9罗马数字
问题描述
你想要匹配罗马数字，例如IV、XIII和MVIII。
解决方案
不进行合法性验证的罗马数字：
[MDCLXVI]+$
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
严格的现代罗马数字：
(？= [MDCLXVI])M*(C[MD]ID?C{0,3}) (X[CL] 1L？X{0,3})(I[XV]1V?I{0,3}) $
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
灵活的现代罗马数字：
数字
329
www.TopSage.com
---
## Page 346
(?=[MDCLXVI])M*(C[MD]ID?C*)(X[CL]IL?X*)(I[XV] IV?I*) S
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
简单的罗马数字：
^(?=[MDCLXVI])M*D?C{0, 4}L?X{0, 4}V?I{0, 4} $
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
讨论
罗马数字中使用的是字母M、D、C、L、X、V和I，它们代表的数值分别是1000、500、
100、50、10、5和1。第一个正则式匹配包含这些字母的任意字符串，而不去检查这
些字母的顺序或者数量是否能够构成一个正确的罗马数字。
在现代（也就是说过去的几百年间），罗马数字通常都会遵守一个严格的规则集。这些
规则会为每个数字正好对应一个罗马数字。例如，4总是会被写作是IV，而不能是IIII。
在解决方案中的第二个正则表达式只能匹配遵守这些现代规则的罗马数字。
十进制数中每个非0的数字都会在罗马数字中单独进行表示。例如，1999会被写作
MCMXCIX，其中，M代表1000，CM代表900，XC代表90，而IX则代表9。我们
不能把它表示成MIM或者IMM。
千位比较容易匹配：一个M代表一千，因此很容易用会匹配DCCC、DCC、DC、
D、CCC、CC、C以及空串，它们分别代表800、700、600、500、300、200、100和
空。这样我们就可以匹配百位的所有10个数字。
我们用X[CL]L?X{0,3}>来匹配十位，用来匹配个位。它们的语法与
百位的表示是相同的，但是使用了不同的数字。
这个正则式中的所有4个组成部分充许所有内容都是可选的，因为每个数字都可以为0。
罗马人没有用来表示0的符号或者单词。因此，在罗马数字中无法表示0。虽然正则式
中的每个部分实际上都是可选的，但是它们却不允许同时被省略掉。我们必须要确保
正则式不能匹配长度为0的匹配。要想实现这样的功能，我们在正则式之前添加了顺
序环视（?=[MDCLXVI])>。在实例2.16中讲解过，这个顺序环视可以确保在正则匹配
中至少包含一个字母。顺序环视并不会消费它匹配到的字母，因此正则式的剩余部分
还可以再次匹配该字母。
第3个正则式则要稍微灵活一些。它在接受IV的同时，还会接受类似IIII这样的数字。
第4个正则式只允许使用不带减法的数字，因此所有的字母都必须按照降序出现。例
如4必须被写作是IIII，而不是IV。罗马人自已通常是这样来写数字的。
330第6章
www.TopSage.com
---
## Page 347
提示
所有正则表达式都被包在定位符（实例2.5）之间，从而可以保证我们检
查整个输入是不是一个罗马数字，而不是在一个更大的字符串之中的一
个浮点数。如果你想要在一大段文本中查找罗马数字的话，那么你可以
把(和S替换为单词边界\b)。
把罗马数字转换为十进制
下面的Perl函数使用了这个实例中的“严格”正则表达式，来检查一个输人是否是一
个合法的罗马数字。如果是的话，它会使用正则式[MDLV]IC[MD]?|X[CL]?II[XV]?>遍
历该数字中的所有字母，并把它们的值加起来。
sub roman2decimal{
my $roman = shift;
if （$roman =
m/~(?=[MDCLXVI])
(M*)
#1000
(C[MD]1D?C{0,3})
100
(X[CL] 1L?X{0, 3})
#10
(I[xV]1V?I{0, 3})
#1
$/ix)
Roman numeral found
4,
'V'=>
5，'IX'=>
9,
'X'
=>
10,
'XL'
=>
40,
'L'
=>
50,
100,
'CD'=>400，
'D'=>500，'CM'=>900，
'M'=>1000）;
my $decimal=0;
while ($roman =~
m/[MDLV]1C[MD]?|X[CL]?|I[XV]?/ig){
$decimal += $r2d{uc($&)};
return $decimal;
}else{
#Not a Roman numeral
return 0;
参见
实例2.3、实例2.8、实例2.9、实例2.12、实例2.16、实例3.9和实例3.11。
数字
331
www.TopSage.com
---