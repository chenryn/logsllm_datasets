We now describe how some previously known attacks against
congestion control were ineffective against BBR. (Readers
can refer to Appendix C for a visual representation fo these
attacks.)
Acknowledgment Bursts. In this attack, the attacker accu-
mulates n acknowledgment packets from the receiver before
forwarding them to the sender in a single burst. In [29], this
attack caused New Reno to send data in bursts because TCP
is ACK-clocked meaning its sending behavior closely mim-
ics the acknowledgment behavior. In BBR, acknowledgment
bursts do not cause data to be sent in bursts because even
though the delivery rate samples computed for the ﬁrst n− 1
ACKs in the burst are deﬂated, the delivery rate sample for
the nth (last) ACK in the burst is no different than without an
attack. Since the delivery rate samples for the ﬁrst n−1 ACKs
are always less than the nth (last) ACK, the ACKs arrive at the
same time and larger delivery rate samples take precedence,
this attack does not impact BBR’s BtlBw estimate.
234    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
Acknowledgment Division. In this attack, a single ACK
acknowledging m bytes is divided into n valid ACKs each
acknowledging roughly m/n bytes. In [36], this attack caused
cwnd to grow n times as fast because for each ACK, cwnd
increased by one segment. Depending on how the attacker
injected the divided ACKs, this attack had no effect on BBR’s
sending rate for different reasons. If the attacker sent the
divided ACKs at the same time as the valid ACK (the ACK
being divided), then the attack would not be effective for the
exact same reason as to why the acknowledgment burst attack
did not affect BBR’s sending rate. If the attacker sent the
divided ACKs at the same time as the last ACK (the ACK
before the one that is being divided), then the ACK rate would
be clamped by BBR’s current sending rate. If the attacker
performed this during BBR’s probing phase, then it would
be identical to attack 1 where the sender’s sending rate is
increased. If the attacker evenly spaced each divided ACK,
then the ACK rate of the divided ACKs would be no different
than the ACK rate without the attack.
Duplicate Acknowledgments. In this attack, n duplicate
acknowledgments are injected for every acknowledgment
packet from the receiver. In congestion control schemes such
as CUBIC and New Reno that use packet loss to detect con-
gestion, when ≥ 3 duplicate acknowledgments were injected,
Fast Recovery was entered to re-transmit the lost segment.
This caused a decreased sending rate because upon entering
Fast Recovery, the congestion window is halved causing data
to be sent at a slower rate. Although BBR is not loss-based, it
still includes a mechanism for dealing with packet loss (by de-
tecting duplicate acknowledgments) by entering a Recovery
state. The reason this attack is not effective against BBR is
because BBR does not backoff from the network upon packet
loss. Instead, BBR sets cwnd to in_flight and re-transmits
the lost segment until all outstanding data when Recovery
was entered is acknowledged.
5 Defenses
Most of our attacks rely on being able to modify acknowledge-
ment information in TCP packets. The best defense against
these attacks is to encrypt or authenticate this information.
QUIC, a new transport protocol initially developed by Google
but currently being standardized by the IETF, takes this ap-
proach. Unfortunately, adding this kind of authentication to
TCP is impractical due to backwards compatibility issues.
Similarly, prior work [39] has suggested adding a nonce to
TCP acknowledgements to prevent optimistic ACK attacks.
This suffers from similar backwards compatibility issues. Fi-
nally, some attacks, like the Delayed ACK attack, require only
the ability to delay/reorder packets and appear to be inherent
in trying to infer model parameters from delivered packets.
6 Related Work
Congestion Control Attacks. The work in [36] demonstrates
how a misbehaving receiver can undermine congestion control
making senders sent data at a faster pace without compromis-
ing reliability. It is shown how TCP is susceptible to divided,
duplicate and optimistic acknowledgment attacks.
Much work has gone into off-path attackers who have
write-only access to a ﬂow. Sequence numbers can be pre-
dicted [5, 7, 18, 23, 33–35] to inject malicious content into a
victim’s connection. The work in [35] shows how sequence
numbers can be leaked to unprivileged, on-device malware
to coordinate with an off-path attacker, yielding connection
hijacking in under one second. The work in [5] aims for better
initial sequence number generation to make it more difﬁcult
for off-path attackers to succeed.
Protocol Fuzzing. Program analysis by automatically gen-
erating inputs has long been used to test for security, robust-
ness and reliability. Instead of generating random inputs, the
work in [22] takes an approach by generating relevant tests
tailored to all possible source code paths. Similar approaches
have been used for network protocol analysis. MAX [32] dis-
covers attacks in network protocols however requires source
code to be annotated where vulnerabilities are likely to exist,
yielding thorough manual analysis. This motivated model-
guided testing [19, 20, 29] where a protocol’s state machine is
used to discover relevant attacks which has been applied to a
variety protocols. KiF [1], SNOOZE [4] and SNAKE [28] all
take model-guided approaches to discover relevant and effec-
tive attack strategies in network protocols. TCPWN [29] takes
a model-guided approach for discovering acknowledgement-
based manipulation attacks in TCP congestion control imple-
mentations. As discussed in Section 3, TCPWN can not be
directly applied to BBR.
7 Conclusion
We identiﬁed 5 classes of attacks from on-path attackers
that caused BBR to send data a high, slow and stalled rates.
We found that due to how BBR multiplicatively probes for
bandwidth, an attacker who optimistically acknowledges data
caused BBR to increase its sending rate by 13x in under 1
second. We showed that the combination of gain cycling and
delayed acknowledgments by an attacker caused BBR to se-
quentially decrease its sending rate. We also showed that an
attacker that prevented new data from being acknowledged
caused re-transmission timeouts and for BBR to reset and
rediscover the network path model each time. We also identi-
ﬁed two attacks that stall data transmission: an attacker who
prevents new data from being acknowledged and an attacker
that optimistically acknowledges lost data causing sequence
numbers to desynchronize. Finally, we show how the burst,
divide and duplicate acknowledgment attacks against prior
congestion control schemes are not effective against BBR.
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    235
References
[1] Humberto J. Abdelnur, Radu State, and Olivier Festor.
KiF: A Stateful SIP Fuzzer. In Proceedings of the 1st
International Conference on Principles, Systems and
Applications of IP Telecommunications, pages 47–56,
New York, NY, USA, 2007. ACM.
[2] Amit Aggarwal, Stefan Savage, and Thomas Anderson.
Understanding the Performance of TCP Pacing. Pro-
ceedings - IEEE INFOCOM, 01 2000.
[3] Jong Suk Ahn, Peter B. Danzig, Zhen Liu, and Limin
Yan. Evaluation of TCP Vegas: Emulation and Experi-
ment. SIGCOMM Comput. Commun. Rev., 25(4):185–
195, October 1995.
[4] G. Banks, M. Cova, V. Felmetsger, K. Almeroth, R. Kem-
merer, and G. Vigna. SNOOZE: Toward a stateful net-
work protocol fuzzer. In International Conference on
Information Security, pages 343–358. 2006.
[5] S. Bellovin. Defending Against Sequence Number
https://tools.ietf.org/html/rfc1948,
Attacks.
1996.
[6] Lawrence S. Brakmo, Sean W. O’malley, and Larry L.
Peterson. Tcp vegas: New techniques for congestion
detection and avoidance. In In SIGCOMM, 1994.
[7] Yue Cao, Zhiyun Qian, Zhongjie Wang, Tuan Dao,
Srikanth V. Krishnamurthy, and Lisa M. Marvel. Off-
path TCP Exploits: Global Rate Limit Considered Dan-
gerous. In Proceedings of the 25th USENIX Conference
on Security Symposium, SEC’16, pages 209–225, Berke-
ley, CA, USA, 2016. USENIX Association.
[8] N. Cardwell, J. Priyaranjan, E. Dumazet, K. Yang,
D. Miller, and Y. Seung. Linux TCP BBR. https:
//git.kernel.org/pub/scm/linux/kernel/git/
davem/net-next.git/tree/net/ipv4/tcp_bbr.c,
2018.
[9] Neal Cardwell, Yuchung Cheng, C. Stephen Gunn,
Soheil Hassas Yeganeh, and Van Jacobson. BBR:
Congestion-Based Congestion Control. ACM Queue,
2016.
[10] Neal Cardwell, Yuchung Cheng, C.
Stephen
Gunn, Soheil Hassas Yeganeh, and Van
Ja-
cobson.
https:
//www.ietf.org/proceedings/97/slides/slides-
97-iccrg-bbr-congestion-control-02.pdf,
November 2016.
BBR Congestion Control.
[11] Neal Cardwell, Yuchung Cheng, C. Stephen Gunn,
Soheil Hassas Yeganeh, and Van Jacobson. BBR Con-
gestion Control: An Update. https://www.ietf.org/
proceedings/98/slides/slides-98-iccrg-an-
update-on-bbr-congestion-control-00.pdf,
March 2017.
[12] Neal Cardwell, Yuchung Cheng, C. Stephen Gunn,
Soheil Hassas Yeganeh, Ian Swett, Jana Iyengar,
Victor Vasiliev, and Van Jacobson. BBR Congestion
Control: IETF 100 Update: BBR in shallow buffers.
https://datatracker.ietf.org/meeting/100/
materials/slides-100-iccrg-a-quick-bbr-
update-bbr-in-shallow-buffers,
2017.
November
[13] Neal Cardwell, Yuchung Cheng, C. Stephen Gunn,
Iyen-
Soheil Hassas Yeganeh, Ian Swett, Jana
BBR
gar, Victor Vasiliev, and Van Jacobson.
Congestion Control:
IETF 99 Update.
https:
//www.ietf.org/proceedings/99/slides/slides-
99-iccrg-iccrg-presentation-2-00.pdf,
July
2017.
[14] Neal Cardwell, Yuchung Cheng, C. Stephen Gunn,
Soheil Hassas Yeganeh, Ian Swett, Jana Iyengar, Victor
Vasiliev, Priyaranjan Jha, Yousuk Seung, and Van
Jacobson. BBR Congestion Control Work at Google:
IETF 101 Update. https://datatracker.ietf.org/
meeting/101/materials/slides-101-iccrg-an-
update-on-bbr-work-at-google-00, March 2018.
[15] Neal Cardwell, Yuchung Cheng, C. Stephen Gunn,
Soheil Hassas Yeganeh, Ian Swett, Jana Iyengar,
Victor Vasiliev, Priyaranjan
Jha, Yousuk Seung,
Kevin Yang, Matt Mathis, and Van Jacobson. BBR
Congestion Control Work at Google: IETF 101 Update.
https://datatracker.ietf.org/meeting/102/
materials/slides-102-iccrg-an-update-on-
bbr-work-at-google-00, July 2018.
[16] Neal Cardwell, Yuchung Cheng, Soheil Hassas
Yeganeh, and Van Jacobson. BBR Congestion Control.
https://tools.ietf.org/id/draft-cardwell-
iccrg-bbr-congestion-control-00.html, 2017.
[17] Neal Cardwell, Yuchung Cheng, Soheil Hassas
Yeganeh, and Van Jacobson. Delivery Rate Estimation.
https://tools.ietf.org/html/draft-cheng-
iccrg-delivery-rate-estimation-00, 2018.
[18] Weiteng Chen and Zhiyun Qian. Off-Path TCP Exploit:
How Wireless Routers Can Jeopardize Your Secrets. In
27th USENIX Security Symposium (USENIX Security
18), pages 1581–1598, Baltimore, MD, 2018. USENIX
Association.
[19] C. Cho, D. Babic, P. Poosankam, K. Chen, E. Wu, and
D. Song. MACE: Model-inference-Assisted Concolic
Exploration for Protocol and Vulnerability Discovery.
In USENIX Conference on Security, 2011.
236    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
[20] Joeri de Ruiter and Erik Poll. Protocol State Fuzzing of
TLS Implementations. In 24th USENIX Security Sym-
posium (USENIX Security 15), pages 193–206, Wash-
ington, D.C., 2015. USENIX Association.
[21] Defense Advanced Research Projects Agency. Trans-
mission Control Protocol. https://tools.ietf.org/
html/rfc793, 1981.
[22] Joe W. Duran and Simeon Ntafos. A report on ran-
dom testing. In Proceedings of the 5th International
Conference on Software Engineering, ICSE ’81, pages
179–183, Piscataway, NJ, USA, 1981. IEEE Press.
[23] Yossi Gilad and Amir Herzberg. Off-path Attacking the
Web. In Proceedings of the 6th USENIX Conference on
Offensive Technologies, WOOT’12, pages 5–5, Berkeley,
CA, USA, 2012. USENIX Association.
[24] University of Southern California Information Sci-
ences Institute. Transmission Control Protocol. https:
//tools.ietf.org/html/rfc793, 1981.
[25] J. Iyengar, Ed and Fastly and M. Thomas, Ed and
Mozilla. QUIC: A UDP-Based Multiplexed and Secure
Transport.
https://tools.ietf.org/html/draft-
ietf-quic-transport-18, 2019.
[26] Van Jacobson. Congestion Avoidance and Control.
ACM SIGCOMM Computer Communication Review,
18(4):314–329, 1988.
[27] R. Jain. A delay-based approach for congestion avoid-
ance in interconnected heterogeneous computer net-
works. SIGCOMM Comput. Commun. Rev., 19(5):56–
71, October 1989.
[28] S. Jero, H. Lee, and C. Nita-Rotaru. Leveraging State
Information for Automated Attack Discovery in Trans-
In IEEE/IFIP Inter-
port Protocol Implementations.
national Conference on Dependable Systems and Net-
works, 2015.
[29] Samuel Jero, Endadul Hoque, David Choffnes, Alan
Mislove, and Cristina Nita-Rotaru. Automated Attack
Discovery in TCP Congestion Control Using a Model-
guided Approach. In Proc. of Network & Distributed
System Security Symposium (NDSS), 2018.
[30] Laurent Joncheray. A simple active attack against TCP.
In USENIX Security Symposium, 1995.
[31] L Kleinrock. Power and deterministic rules of thumb
for probabilistic problems in computer communications.
01 1979.
Manipulation Attacks.
2011.
In SIGCOMM, pages 26–37,
[33] Robert T. Morris. A Weakness in the 4.2BSD Unix
TCP/IP Software, 1985.
[34] Z. Qian and Z. M. Mao. Off-path TCP Sequence Num-
ber Inference Attack - How Firewall Middleboxes Re-
duce Security. In 2012 IEEE Symposium on Security
and Privacy, pages 347–361, May 2012.
[35] Zhiyun Qian, Z. Morley Mao, and Yinglian Xie. Col-
laborative TCP sequence number inference attack: how
In ACM
to crack sequence number under a second.
Conference on Computer and Communications Security,
2012.
[36] Stefan Savage, Neal Cardwell, David Wetherall, and
Tom Anderson. TCP Congestion Control with a Misbe-
having Receiver. ACM SIGCOMM Computer Commu-
nication Review, 29(5), 1999.
[37] V.
Jacobsen and LBL and R. Braden and ISI.
https://
TCP Extensions for Long-Delay Paths.
tools.ietf.org/html/rfc1072, October 1988.
[38] David X. Wei, Cheng Jin, Steven H. Low, and San-
FAST TCP: Motivation, Architecture,
IEEE/ACM Trans. Netw.,
jay Hegde.
Algorithms, Performance.
14(6):1246–1259, December 2006.
[39] Lixia Zhang, Scott Shenker, and Daivd D. Clark. Ob-
servations on the Dynamics of a Congestion Control
Algorithm: The Effects of Two-way Trafﬁc. SIGCOMM
Comput. Commun. Rev., 21(4):133–147, August 1991.
A Attack Strategy Categorization
Attack strategy categorization algorithm is shown in Algo-
rithm A1.
B Illustrations of Malicious Actions Used by
our Attacks Strategies against BBR
See Figure B1.
C Illustrations of Ineffective Attacks against
BBR