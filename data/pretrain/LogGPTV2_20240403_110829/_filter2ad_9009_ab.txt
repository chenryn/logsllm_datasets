这个时候，神奇的事情出现了，在调试器中，程序默认停留在了003897F5
而不是我们在IDA中看到的winMain地址：00403340
这就是IDA的基地址和OD加载时候的基地址不对应造成的。
IDA加载的时候，会默认以00400000作为基地址，而调试器加载的时候，基地址由操作系统决定。
我们在最开始的时候说过，win7开始，微软增加了地址随机化的功能，所以基地址往往不是默认的00400000.
这个时候，我们就需要修改IDA的基地址显示，使得IDA中的地址可以和x32dbg对应起来。
我们在IDA中选择 Edit->Segments->Rebase Program
此时的基地址位00400000，我们修改为00380000以对应调试器中的基地址。
修改完成之后，IDA中程序的地址会自动改变，winMain地址已经变成了00383340
但是此时还是与调试器默认停留的地址不符合，我们在IDA中按G，跳转到调试器的地址看看：
程序来到了start函数，通常来说，vc编译器编译的程序，有winMain的情况下，start函数属于编译器生成的函数。
我们直接在x32dbg中Ctrl+G，跳转到winMain的入口点并按下F2设置断点：
断点设置成功之后，最前面会显示红色。
此时按下F9，程序就会跑过来，命中断点，停留在winMain函数开始的地方：
这个EIP表示程序当前运行的位置。
我们找到之前在IDA中分析到的加密函数，此时由于我们修改了基地址，该函数已经变成了sub_381040
地址是00381240，我们可以用同样的方法，Ctrl + G跳转过去并设置断点。
断点设置好之后F9运行过来，成功命中断点：
此时，我们可以看到，我们之前在IDA中看到的可疑字符串在ecx中，且edx的地址为：0021F9C4
按照我们之前的推算，该函数运行后会计算ecx的字符串，将解密结果放入到edx。
我们在左下角的内存窗口中按Ctrl + G ，跳转到0021F9C4，此时是空白内存：
F8往下走了之后，可以看到0021F9C4处的确存放了一个解密出来的值。WININET.dll
由此也证明了我们的推算是正确的，我们不必要去详细看sub_381040这个函数的具体实现，只需要知道它的功能是解密参数1，放入到参数2即可。我们回到IDA对调试得到的结果分别进行标注。首先是对sub_381040进行重命名，然后是对上面解密出来的字符串进行标注。
所以这里是判断是否能通过LoadLibrary成功加载WININET.dll。
如果可以成功加载，则跳转到loc_381279，跟到loc_381279之后发现，这下面一大片_memset赋值操作，然后调用了多次我们刚才看到解密函数解密字符串。
解密成功之后调用了多次GetProcAddress，说明这里解密的字符串很有可能是具体的API名称，我们也可以在调试器中进行验证。
我们注意到，这里第二次调用解密函数，是在003813E0这里，于是我们在调试器中对该地址设置断点并跑过来(也可以直接鼠标点中这个地址，然后F4运行过来)
根据我们之前的分析已经知道，调用这个函数的时候，会把ecx的值解密然后放入到edx中。
于是我们在下面的内存窗口中，Ctrl +G 输入 edx，直接跳转到当前edx所指向的地址，这里提示了是0021EF9C
然后我们F8单步执行完这个解密函数，可以看到edx所指的这个地址已经成功解密出了urlmon.dll
解密出urlmon.dll之后，同样的会通过call esi（这里esi存放的是LoadLibraryA的地址）来加载解密出的urlmod.dll
接着程序会来到003813FB这个地方，继续调用解密函数
调用完成之后同样的会将解密得到的字符串放入edx，这里是解密了一个InternetOpenA的API
且我们可以发现，edx的值都是通过[ebp – xxxx] 得到的，在内存窗口中，这些解密的地址值相差的也不远。
我们就直接F8单步往下走，尝试将这一大段的字符串都解密出来，在API和dll都解密成功之后，程序将分别尝试通过LoadLibrary和GetProcAddress来加载dll和获取指定API的地址。
这里同样是通过[ebp-xxxx]的方式来取到刚才解密出的API/dll名称。
来到程序最后，在00381577这里还有一个call，该call执行完之后，就会调用ret结束函数。
我们在IDA中按G键跳转到00381577这个地址，发现该函数调用的是[@__security_check_cookie](https://github.com/__security_check_cookie
"@__security_check_cookie")[@4](https://github.com/4 "@4")
这是编译器为了检查cookie的安全性而生成的，我们暂时可以不用看，直接F8单步过去。然后继续F8往下走，执行retn ，返回到上一层。
至此，我们就分析完了sub_3811E0(修改基地址之前是sub_4011E0)的功能，我们可以回到IDA中对其进行标注。
我们可以看到，sub_3811E0调用完成之后，会通过test eax,eax判断eax的值是否为0，如果eax为0
则跳转到loc_3833BD，跳转过来之后结束winMain的运行。
很明显，eax是不为0的，因为我们在代码中可以看到，sub_3811E0函数的最后，通过mov eax,1的方式给eax赋值为了1，所以此时eax等于1.
eax等于1，那么程序就会连着执行四个call，分别是sub_383600、sub_381580、sub_381770、sub_382790。  
我们先跟进到sub_383600。
###  sub_383600
IDA中双击进入到函数，熟悉的_memset内存分配
然后通过call SHGetFolderPathA获取系统路径，具体获取的值由参数决定。
通过对SHGetFolderPathA的文档查询我们可以知道，该API会根据CSIDL的值来获取不同的路径。
而在本程序中，CSIDL的值是：1Ah，也就是16+10=26
通过IDA最下面的python输入框或计算器都可以很好的进行进制转换，比如在python输入框中输入int(0x1A)，即会输出对应的十进制数据。
所以话说回来，我们可以去搜索一下SHGetFolderPathA的CSIDL为26时会获取到哪个路径。
答案就是我们在行为分析中看到的%appdata%路径。
SHGetFolderPathA调用完成之后，程序会调用GetModuleFileNameA以获取当前进程的完整路径，GetModuleFileNameA这个API我们遇到过多次了，这里不再重复讲解。
并且在GetModuleFileNameA调用之后，程序push了三个参数到sub_383320函数。
其中第一个是[ebp + pszPath] ，也就是SHGetFolderPath函数获取到的路径。
第二个参数是aSEsetUpdateExe，IDA已经自动识别出来是%seset_update.exe
第三个参数是[ebp+NewFileName]
这里第二个参数前面的%s比较关键，基本可以推测sub_383320用于将push的第一个参数和第二个参数拼接起来放到第三个参数，也就是[ebp+NewFileName]。这里为什么不猜测sub_383320用于将应用程序拷贝到%appdata%路径并且重命名为eset_update.exe。
是因为我们可以看到GetModuleFileNameA获取到的路径会存放在[ebp+Filename]中，而在调用sub_383320的时候，并没有将[ebp+Filename]作为参数传入，所以sub_383320的功能应该是路径拼接：
跟进到sub_383320之后，发现和我们推算的一致，程序会通过_vsprintf_s进行拼接。
在sub_383320调用完成之后，[ebp+NewFileName]将会存放 %appdata%eset_update.exe
路径拼接之后，程序会通过lea指令，分别将[ebp+Filename](%E7%A8%8B%E5%BA%8F%E5%BD%93%E5%89%8D%E8%BF%90%E8%A1%8C%E8%B7%AF%E5%BE%84)和[ebp+NewFileName](%E6%8B%BC%E6%8E%A5%E5%87%BA%E6%9D%A5%E7%9A%84%E6%96%B0%E8%B7%AF%E5%BE%84)赋值给ecx和eax，在后面可以看到，程序会循环对比eax和ecx的值，检查是否匹配，如果匹配，则说明当前程序运行的路径就是%appdata%eset_update.exe。
如果不匹配程序则会在003836D4这里通过jzn short loc_3836F0 跳转到后面继续执行。
跳转过来之后程序会通过sbb 错位运算和 | 1 的运算操作eax。
注意看，此时的eax还是上面的的存放的新路径的值。
这里应该是用于判断拼接的新路径是否成功，如果成功则后面的test eax,eax不为0
计算通过之后，将[ebp+NewFileName]和 [ebp+Filename]作为参数传入到CopyFileA函数中
很明显，这里是准备将程序拷贝过去了
执行拷贝函数之后，程序会尝试将密文XTKYFWJaRnhwtxtkyansit|xaHzwwjsy[jw通过ReName_DecodeSrings函数解密存放到[ebp+SubKey]并且通过下面的RegOpenKeyExA操作该键值。
我们直接在调试器中鼠标点在0038371E这里，F4运行过来，然后在下面的内存窗口中跟随edx
F8单步执行完该函数之后，edx(0054F48C)处的地址成功被赋值为SOFTWAREMicrosoftWindowsCurrentVersionRun
这个键值已经不陌生了，该键值用于操作开机自启动项。
解密成功之后，程序会通过call RegOpenKeyEx打开该键值，如果打开失败则跳转到loc_383782，如果打开成功则继续往后执行。
成功打开的话，程序会将[ebp+NewFileName]的值赋值给ecx，然后通过一个短循环读取ecx到al。
循环读取完成之后，程序就会将[ebp+NewFileName]作为路径写入到上面的注册表键值中以建立一个开机自启动项目。写入的键值名称是后面的eset_update。
写入成功之后通过RegCloseKey关闭注册表。
我们在调试器中在0038377C设置断点并运行过来，然后F8单步往下走一步
此时，我们在注册表编辑器中打开SOFTWAREMicrosoftWindowsCurrentVersionRun，查看是否成功设置，Win+R打开运行窗口，然后输入regedit
一层一层找下来，可以看到已经成写入了开机自启动的注册表中。
成功设置好开机自启动之后，程序会调用GetModuleHandleA和MessageBoxIndirectA以创建一个消息提示框，提示框的标题和显示内容如红框所示，跟我们在行为分析中看到的一样。
成功创建后，该函数结束。
所以该函数的功能是将自身赋值到%appdata%目录下并重命名为eset_update.exe，然后将该路径写入到开机自启动中，键名称为eset_update。最后创建一个对话框以迷惑用户。
我们回到该函数头部，交叉引用回到WinMain函数中并对该函数进行标注：
###  sub_381580
现在来看第二个函数sub_381580:
在sub_381580函数最开始，程序会通过GetAdaptersInfo来获取当前计算机的网卡信息。
如果获取失败，则跳转到loc_3816E8执行
在loc_3816E8处则会调用GetVolumeInformationA获取磁盘序列号。这里是获取C盘。