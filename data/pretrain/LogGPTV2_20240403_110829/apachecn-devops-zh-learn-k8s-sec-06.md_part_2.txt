```
$ps aux | grep kube-controller-manager
root      3927  1.8  4.5 209520 90072 ?        Ssl  01:03   0:11 kube-controller-manager --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf --bind-address=0.0.0.0 --client-ca-file=/var/lib/minikube/certs/ca.crt --cluster-signing-cert-file=/var/lib/minikube/certs/ca.crt --cluster-signing-key-file=/var/lib/minikube/certs/ca.key --controllers=*,bootstrapsigner,tokencleaner --kubeconfig=/etc/kubernetes/controller-manager.conf --leader-elect=true --requestheader-client-ca-file=/var/lib/minikube/certs/front-proxy-ca.crt --root-ca-file=/var/lib/minikube/certs/ca.crt --service-account-private-key-file=/var/lib/minikube/certs/sa.key --use-service-account-credentials=true
```
接下来，让我们谈谈保护 CoreDNS。
# 保护核心域名
`kube-dns`是 Kubernetes 集群的默认**域名系统** ( **域名系统**)服务器。DNS 服务器帮助内部对象(如服务、容器和容器)相互定位。`kube-dns`由三个容器组成，详细如下:
*   `kube-dns`:这个容器使用 SkyDNS 来执行 DNS 解析服务。
*   `dnsmasq`:轻量级 DNS 解析器。它缓存来自 SkyDNS 的响应。
*   `sidecar`:监控的运行状况，并处理域名系统的指标报告。
`kube-dns`从 1.11 版本开始就被取代了，因为 dnsmasq 的安全漏洞和 SkyDNS 的性能问题。CoreDNS 是提供`kube-dns`所有功能的单一容器。
要编辑 CoreDNS 的配置文件，可以使用`kubectl`，如下所示:
```
$ kubectl -n kube-system edit configmap coredns
```
默认情况下，Minikube 上的 CoreDNS 配置文件如下所示:
```
# Please edit the object below. Lines beginning with a '#' 
# will be ignored, and an empty file will abort the edit. 
# If an error occurs while saving this file will be
# reopened with the relevant failures.
apiVersion: v1
data:
  Corefile: |
    .:53 {
        errors
        health {
           lameduck 5s
        }
        ready
        kubernetes cluster.local in-addr.arpa ip6.arpa {
           pods insecure
           fallthrough in-addr.arpa ip6.arpa
           ttl 30
        }
        prometheus :9153
        forward . /etc/resolv.conf
        cache 30
        loop
        reload
        loadbalance
    }
```
要保护 CoreDNS，请执行以下操作:
*   **确保健康插件没有被禁用**:`health`插件监控核心域名系统的状态。它用于确认 CoreDNS 是否已启动并运行。通过在`Corefile`的待启用插件列表中添加`health`来启用。
*   **为 CoreDNS 启用 istio**:`istio`是一个服务网格，Kubernetes 使用它来提供服务发现、负载平衡和身份验证。默认情况下，它在 Kubernetes 中不可用，需要作为外部依赖项添加。您可以通过启动`istio`服务并将`istio`服务的代理添加到配置文件中来将`istio`添加到您的集群中，如下所示:
    ```
    global:53 {
             errors
             proxy . {cluster IP of this istio-core-dns service}
        }
    ```
现在我们已经了解了集群组件的不同配置，重要的是要认识到，随着组件变得更加复杂，将会添加更多的配置参数。集群管理员不可能记住这些配置。因此，接下来，我们讨论一种工具，它可以帮助集群管理员监控集群组件的安全状态。
# 对集群的安全配置进行基准测试
**互联网安全中心** ( **CIS** )发布了 Kubernetes 的基准，集群管理员可以使用该基准来确保集群遵循推荐的安全配置。发布的 Kubernetes 基准测试超过 200 页。
`kube-bench`是一个用 Go 编写并由 Aqua Security 发布的自动化工具，运行 CIS 基准测试中记录的测试。测试用 **YAML 非标记语言** ( **YAML** )编写，很容易进化。
`kube-bench`可以直接使用`kube-bench`二进制在节点上运行，如下所示:
```
$kube-bench node --benchmark cis-1.4
```
对于在`gke`、`eks`和`aks`上托管的集群，`kube-bench`作为一个 pod 运行。一旦 pod 完成运行，您可以查看日志以查看结果，如以下代码块所示:
```
$ kubectl apply -f job-gke.yaml
$ kubectl get pods
NAME               READY   STATUS      RESTARTS   AGE
kube-bench-2plpm   0/1     Completed   0          5m20s
$ kubectl logs kube-bench-2plpm
[INFO] 4 Worker Node Security Configuration
[INFO] 4.1 Worker Node Configuration Files
[WARN] 4.1.1 Ensure that the kubelet service file permissions are set to 644 or more restrictive (Not Scored)
[WARN] 4.1.2 Ensure that the kubelet service file ownership is set to root:root (Not Scored)
[PASS] 4.1.3 Ensure that the proxy kubeconfig file permissions are set to 644 or more restrictive (Scored)
[PASS] 4.1.4 Ensure that the proxy kubeconfig file ownership is set to root:root (Scored)
[WARN] 4.1.5 Ensure that the kubelet.conf file permissions are set to 644 or more restrictive (Not Scored)
[WARN] 4.1.6 Ensure that the kubelet.conf file ownership is set to root:root (Not Scored)
[WARN] 4.1.7 Ensure that the certificate authorities file permissions are set to 644 or more restrictive (Not Scored)
......
== Summary ==
0 checks PASS
0 checks FAIL
37 checks WARN
0 checks INFO
```
调查状态为`FAIL`的支票非常重要。你的目标应该是零检查失败。如果由于任何原因这是不可能的，您应该为失败的检查制定一个风险缓解计划。
`kube-bench`是监控遵循安全最佳实践的集群组件的有用工具。建议添加/修改`kube-bench`规则以适合您的环境。大多数开发人员在启动一个新集群时运行`kube-bench`，但是定期运行它来监控集群组件是否安全是很重要的。
# 摘要
在本章中，我们查看了每个主节点和节点组件的不同安全敏感配置:`kube-apiserver`、`kube-scheduler`、`kube-controller-manager`、`kubelet`、CoreDNS 和`etcd`。我们学习了如何保护每个组件。默认情况下，组件可能不会遵循所有的安全最佳实践，因此集群管理员有责任确保组件的安全。最后，我们看一下`kube-bench`，它可以用来了解您运行的集群的安全基线。
理解这些配置并确保组件遵循这些清单以减少妥协的机会非常重要。
在下一章中，我们将研究 Kubernetes 中的身份验证和授权机制。我们在这一章中简要地讨论了一些准入控制者。我们将深入探讨不同的准入控制器，最后讨论如何利用它们来提供更细粒度的访问控制。
# 问题
1.  什么是基于令牌的身份验证？
2.  什么是`NodeRestriction`入场控制器？
3.  如何确保数据在`etcd`静止时加密？
4.  为什么 CoreDNS 取代了`kube-dns`？
5.  如何在一个**埃拉斯蒂克 Kubernetes 服务** ( **EKS** )集群上使用`kube-bench`？
# 进一步阅读
有关本章所涵盖主题的更多信息，您可以参考以下链接:
*   独联体基准:[https://www.cisecurity.org/benchmark/kubernetes/](https://www.cisecurity.org/benchmark/kubernetes/)
*   github(“t0”):1231 t1]https://github . com/aqua security/kube-bench*