If you just want the default conversion, such as decimal for integers, you can use the
catchall format %v (for “value”); the result is exactly what Print and Println would produce.
Moreover, that format can print any value, even arrays, slices, structs, and maps. Here is a
print statement for the time zone map defined in the previous section.
若你只想要默认的转换，如使用十进制的整数，你可以使用通用的格式 %v（对应 “值”）；其
结果与 Print 和 Println 的输出完全相同。此外，这种格式还能打印任意值，甚至包括数组、
结构体和映射。 以下是打印上一节中定义的时区映射的语句。
fmt.Printf("%v\n", timeZone) // or just fmt.Println(timeZone)
which gives output
map[CST:-21600 PST:-28800 EST:-18000 UTC:0 MST:-25200]
fmt.Printf("%v\n", timeZone) // 或只用 fmt.Println(timeZone)
这会输出
52
数据
map[CST:-21600 PST:-28800 EST:-18000 UTC:0 MST:-25200]
For maps the keys may be output in any order, of course. When printing a struct, the
modified format %+v annotates the fields of the structure with their names, and for any value
the alternate format %#v prints the value in full Go syntax.
当然，映射中的键可能按任意顺序输出。当打印结构体时，改进的格式 %+v 会为结构体的每
个字段添上字段名，而另一种格式 %#v 将完全按照 Go 的语法打印值。
type T struct {
a int
b float64
c string
}
t := &T{ 7, -2.35, "abc\tdef" }
fmt.Printf("%v\n", t)
fmt.Printf("%+v\n", t)
fmt.Printf("%#v\n", t)
fmt.Printf("%#v\n", timeZone)
prints
将打印
&{7 -2.35 abc def}
&{a:7 b:-2.35 c:abc def}
&main.T{a:7, b:-2.35, c:"abc\tdef"}
map[string] int{"CST":-21600, "PST":-28800, "EST":-18000, "UTC":0, "MST":-25200}
(Note the ampersands.) That quoted string format is also available through %q when applied
to a value of type string or []byte. The alternate format %#q will use backquotes instead if
possible. (The %q format also applies to integers and runes, producing a single-quoted rune
constant.) Also, %x works on strings, byte arrays and byte slices as well as on integers,
generating a long hexadecimal string, and with a space in the format (% x) it puts spaces
between the bytes.
（请注意其中的 & 符号）当遇到 string 或 []byte 值时， 可使用 %q 产生带引号的字符串；而
格式 %#q 会尽可能使用反引号。 （%q 格式也可用于整数和符文，它会产生一个带单引号的
符文常量。） 此外，%x 还可用于字符串、字节数组以及整数，并生成一个很长的十六进制
字符串， 而带空格的格式（% x）还会在字节之间插入空格。
Another handy format is %T, which prints the type of a value.
另一种实用的格式是 %T，它会打印某个值的类型.
53
数据
fmt.Printf("%T\n", timeZone) prints
会打印
map[string] int
If you want to control the default format for a custom type, all that's required is to define a
method with the signature String() string on the type. For our simple type T, that might look
like this.
若你想控制自定义类型的默认格式，只需为该类型定义一个具有 String() string 签名的方法。
对于我们简单的类型 T，可进行如下操作。
func (t *T) String() string {
return fmt.Sprintf("%d/%g/%q", t.a, t.b, t.c)
}
fmt.Printf("%v\n", t)
to print in the format
会打印出如下格式：
7/-2.35/"abc\tdef"
(If you need to print values of type T as well as pointers to T, the receiver for String must be
of value type; this example used a pointer because that's more efficient and idiomatic for
struct types. See the section below on pointers vs. value receivers for more information.)
（如果你需要像指向 T 的指针那样打印类型 T 的值， String 的接收者就必须是值类型的；上
面的例子中接收者是一个指针， 因为这对结构来说更高效而通用。更多详情见 指针 vs. 值接
收者 一节.）
Our String method is able to call Sprintf because the print routines are fully reentrant and
can be wrapped this way. There is one important detail to understand about this approach,
however: don't construct a String method by calling Sprintf in a way that will recur into your
String method indefinitely. This can happen if the Sprintf call attempts to print the receiver
directly as a string, which in turn will invoke the method again. It's a common and easy
mistake to make, as this example shows.
我们的 String 方法也可调用 Sprintf， 因为打印例程可以完全重入并按这种方式封装。不过要
理解这种方式，还有一个重要的细节： 请勿通过调用 Sprintf 来构造 String 方法，因为它会无
限递归你的的 String 方法。
54
数据
type MyString string
func (m MyString) String() string {
return fmt.Sprintf("MyString=%s", m) // Error: will recur forever.
}
type MyString string
func (m MyString) String() string {
return fmt.Sprintf("MyString=%s", m) // 错误：会无限递归
}
It's also easy to fix: convert the argument to the basic string type, which does not have the
method.
要解决这个问题也很简单：将该实参转换为基本的字符串类型，它没有这个方法。
type MyString string
func (m MyString) String() string {
return fmt.Sprintf("MyString=%s", string(m)) // OK: note conversion.
}
type MyString string
func (m MyString) String() string {
return fmt.Sprintf("MyString=%s", string(m)) // 可以：注意转换
}
In the initialization section we'll see another technique that avoids this recursion.
在 初始化 一节中，我们将看到避免这种递归的另一种技术。
Another printing technique is to pass a print routine's arguments directly to another such
routine. The signature of Printf uses the type ...interface{} for its final argument to specify
that an arbitrary number of parameters (of arbitrary type) can appear after the format.
另一种打印技术就是将打印例程的实参直接传入另一个这样的例程。Printf 的签名为其最后的
实参使用了 ...interface{} 类型，这样格式的后面就能出现任意数量，任意类型的形参了。
func Printf(format string, v ...interface{}) (n int, err error) {
Within the function Printf, v acts like a variable of type []interface{} but if it is passed to
another variadic function, it acts like a regular list of arguments. Here is the implementation
of the function log.Println we used above. It passes its arguments directly to fmt.Sprintln for
55
数据
the actual formatting.
在 Printf 函数中，v 看起来更像是 []interface{} 类型的变量，但如果将它传递到另一个变参函
数中，它就像是常规实参列表了。 以下是我们之前用过的 log.Println 的实现。它直接将其实
参传递给 fmt.Sprintln 进行实际的格式化。
// Println prints to the standard logger in the manner of fmt.Println.
func Println(v ...interface{}) {
std.Output(2, fmt.Sprintln(v...)) // Output takes parameters (int, string)
}
// Println 通过 fmt.Println 的方式将日志打印到标准记录器。
func Println(v ...interface{}) {
std.Output(2, fmt.Sprintln(v...)) // Output 接受形参 (int, string)
}
We write ... after v in the nested call to Sprintln to tell the compiler to treat v as a list of
arguments; otherwise it would just pass v as a single slice argument.
在该 Sprintln 嵌套调用中，我们将 ... 写在 v 之后来告诉编译器将 v 视作一个实参列表，否则
它会将 v 当做单一的切片实参来传递。
There's even more to printing than we've covered here. See the godoc documentation for
package fmt for the details.
还有很多关于打印知识点没有提及。详情请参阅 godoc 对 fmt 包的说明文档。
By the way, a ... parameter can be of a specific type, for instance ...int for a min function that
chooses the least of a list of integers:
顺便一提，... 形参可指定具体的类型，例如从整数列表中选出最小值的函数 min，其形参可
为 ...int 类型。
func Min(a ...int) int {
min := int(^uint(0) >> 1) // largest int
for _, i := range a {
if i > 1) // 最大的 int
for _, i := range a {
if i = YB:
return fmt.Sprintf("%.2fYB", b/YB)
case b >= ZB:
return fmt.Sprintf("%.2fZB", b/ZB)
case b >= EB:
return fmt.Sprintf("%.2fEB", b/EB)
case b >= PB:
return fmt.Sprintf("%.2fPB", b/PB)
case b >= TB:
return fmt.Sprintf("%.2fTB", b/TB)
case b >= GB:
return fmt.Sprintf("%.2fGB", b/GB)
case b >= MB:
return fmt.Sprintf("%.2fMB", b/MB)