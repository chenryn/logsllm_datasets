Injecting RDS-TMC Traffic Information Signals
 Injecting RDS-TMC Traffic 
Information Signals
 Copyright 2007 Inverse Path Ltd.
DEFCON 15
Las Vegas, August 3-5 2007
Andrea Barisani
Chief Security Engineer
http://www.inversepath.com
Daniele Bianco
Hardware Hacker
Introduction
DISCLAIMER:
All the scripts and/or commands and/or configurations and/or 
schematics provided in the presentation must be treated as examples, 
use the presented information at your own risk.
Copyright 2007 Inverse Path Ltd.
               Andrea Barisani  
               Daniele Bianco  
This work is released under the terms of the Creative Commons 
Attribution-NonCommercial-NoDerivs License available at 
http://creativecommons.org/licenses/by-nc-nd/3.0.
Injecting RDS-TMC Traffic Information Signals
 Copyright 2007 Inverse Path Ltd.
What's this all about ?
● Modern In-Car Satellite Navigation systems are capable of 
receiving dynamic traffic information
● One of the systems being used throughout Europe and 
North America is RDS-TMC (Radio Data System – Traffic 
Message Channel)
● One of the speakers bought a car featuring one of these 
SatNavs...he decided to play with it...just a little...
● We'll show how RDS-TMC information can be hijacked and 
falsified using homebrew hardware and software
Injecting RDS-TMC Traffic Information Signals
 Copyright 2007 Inverse Path Ltd.
Why bother ?
● First of all...hardware hacking is fun and 0wning a car is 
priceless ;-P
● it's so 80s
● ok seriously...Traffic Information displayed on SatNav is 
implicitly trusted by drivers, nasty things can be attempted
● more important: chicks will melt when you show this...
Injecting RDS-TMC Traffic Information Signals
 Copyright 2007 Inverse Path Ltd.
The Radio Data System
● RDS is used for transmitting data over FM (1187.5 bits/s)
● Described in European Standard EN50067 (April 1998)
● Its most prominent function is showing FM Channel Name 
on the radio display, also used for Alternate Frequencies, 
Programme Type, News override, etc.
Injecting RDS-TMC Traffic Information Signals
                        15k 19k 23k               38k                 53k     57k     Freq (Hz)
       Mono (L+R)                         Stereo (L-R)
19kHz Pilot Tone
RDS Signal
 Copyright 2007 Inverse Path Ltd.
RDS-TMC Introduction
● First introduced around 1997 (Germany), implemented 
around Europe in the following years
(Italy got it in 2004, Australia will get it in 2007)
● Described in ISO 14819-1
● TMC uses RDS for transmission over FM broadcasts
Injecting RDS-TMC Traffic Information Signals
 Copyright 2007 Inverse Path Ltd.
RDS-TMC
Implementation
● Despite being a 10 year old protocol, implementation has 
been slow, SatNav systems have been fully supporting
RDS-TMC only in the last few years
● implemented on most in-car SatNav shipped by the original 
manufacturer
● External and portable SatNav offer jacks for external FM 
receivers which add RDS-TMC capabilities
● RDS-TMC is available in both free and commercial services
● TMC can also be transmitted over DAB or satellite radio
Injecting RDS-TMC Traffic Information Signals
 Copyright 2007 Inverse Path Ltd.
RDS-TMC Terminal
Injecting RDS-TMC Traffic Information Signals
 Copyright 2007 Inverse Path Ltd.
The Issue
● there's no form of authentication of the data (encryption is 
supported for commercial services but irrelevant to our 
goals, more on that later)
● We tested the feasibility of decoding and injecting arbitrary 
TMC messages against our “victim”
● Off-the-shelf components and cheap electronics have been 
used
● ...you'll be the judge of our results...
Injecting RDS-TMC Traffic Information Signals
 Copyright 2007 Inverse Path Ltd.
The Victim
Injecting RDS-TMC Traffic Information Signals
 Copyright 2007 Inverse Path Ltd.
Sniffing RDS
● We need to get a “raw” FM signal (MPX), there's a number 
of tuners that provide an accessible pin for that
● We use the FM1216 module from Philips available on many 
PCI TV cards (http://pvrhw.goldfish.org)
● Once we have the signal we decode the RDS sub-carrier 
using a TDA7330B RDS Demodulator (which samples the 
1.11875 kHz signal), a PIC for serial conversion and 
decoding software (sRDSd)
● Using custom hardware and software allowed us to fully 
understand the protocol and decode TMC (alternatively 
http://rdsd.berlios.de looks like the most promising project)
Injecting RDS-TMC Traffic Information Signals
 Copyright 2007 Inverse Path Ltd.
Sniffing RDS
Injecting RDS-TMC Traffic Information Signals
 Copyright 2007 Inverse Path Ltd.
MPX
Sniffing RDS
● Main components:
 1x TDA7330B
 1x PIC16F84
 1x MAX232
Injecting RDS-TMC Traffic Information Signals
  VHF Tuner
  TDA7330B
MPX
Serial Input
RDS Decoder
Analog Signal
Digital Signal (Serial)
  PIC16F84
 Copyright 2007 Inverse Path Ltd.
Assembly
Injecting RDS-TMC Traffic Information Signals
 Copyright 2007 Inverse Path Ltd.
Sniffing Circuit
Injecting RDS-TMC Traffic Information Signals
 Copyright 2007 Inverse Path Ltd.
PIC Programming
Injecting RDS-TMC Traffic Information Signals
● We program the PIC for converting RDS Demodulator data 
and send it to the serial port
● custom PIC programmer, a variation of the well known JDM 
one (http://www.semis.demon.co.uk/uJDM/uJDMmain.htm)
● output are 0 and 1, bad quality data is shown with * and + 
(either ignore sequences with bad data or replace them with 
0 and 1 if you feel lucky) 
● http://dev.inversepath.com/rds/pic_code.asm
 Copyright 2007 Inverse Path Ltd.
The Output
Injecting RDS-TMC Traffic Information Signals
# cat /dev/ttyS0
 Copyright 2007 Inverse Path Ltd.
RDS Protocol
Group structure (104 bits):
 --------------------------------------- 
| Block 1 | Block 2 | Block 3 | Block 4 |
 ---------------------------------------
Block structure (26 bits):
 ---------------- ---------------------
| Data (16 bits) | Checkword (10 bits) |
 ---------------- ---------------------
Block 1: 
  ---------------------              
 | PI code | Checkword |             
  --------------------- 
Block 2:
  ---------------------------------------------------
 | Group code | B0 | TP | PTY |  | Checkword |
  ---------------------------------------------------
Injecting RDS-TMC Traffic Information Signals
PI code    = 16 bits
Group code = 4 bits
B0         = 1 bit
TP         = 1 bit
PTY        = 5 bits
Checkword  = 10 bits
 Copyright 2007 Inverse Path Ltd.
TMC / Alert-C
Protocol
Block 1:
 ---------------------
| PI code | Checkword |
 ---------------------
Block 2:                                      
 -----------------------------------------------------
| Group code | B0 | TP | PTY | T | F | DP | Checkword |
 -----------------------------------------------------
Block 3:
 -------------------------------------
| D | PN | Extent | Event | Checkword |
 -------------------------------------
Block 4:
 ----------------------
| Location | Checkword |
 ----------------------
Injecting RDS-TMC Traffic Information Signals
T          = 1 bit
F          = 1 bit
DP         = 3 bits
D          = 1 bit
PN         = 1 bit
Extent     = 3 bits
Event      = 11 bits
Location   = 16 bits
Checkword  = 10 bits
 Copyright 2007 Inverse Path Ltd.
TMC / Alert-C
Injecting RDS-TMC Traffic Information Signals
PI code => Programme Identification
Group code => message type identification
B0 => version code
TP => Traffic Program
PTY => Programme Type
T, F, D => Multi Group messages 
DP => Duration and Persistence
D => Diversion Advice
PN => +/- direction
Extent => event extension
Event => event code (see also TMDD – Traffic Management Data Dictionary)
Location => location code (DAT Location Table - TMCF-LT-EF-MFF-v06)
 Copyright 2007 Inverse Path Ltd.
srdsd
Simple RDS Decoder
Injecting RDS-TMC Traffic Information Signals
● Our custom tool for RDS decoding:
● ISC-style licensed
● performs nearly full RDS-TMC (and basic RDS) decoding
● text and HTML output with Google Map links of GPS data
● http://dev.inversepath.com/rds/srdsd
Simple RDS-TMC Decoder 0.1     || http://dev.inversepath.com/rds
Copyright 2007 Andrea Barisani || 
Usage: ../srdsd/srdsd [-h|-H|-P|-t] [-d ] [-p 
] 
   -t display only tmc packets
   -H HTML output (outputs to /tmp/rds-/rds-*.html) 
   -p PI number
   -P PI search
   -d location db path
   -h this help
Note: -d option expects a DAT Location Table code according to
      TMCF-LT-EF-MFF-v06 standard (2005/05/11)
 Copyright 2007 Inverse Path Ltd.
srdsd – PI Search
Injecting RDS-TMC Traffic Information Signals
● We must “lock” parsing to the relevant PI
● Every FM Channel has its own code (google knows)
● You can guess the PI code by finding the most recurring
16-bit string:
# ./srdsd -P rds_dump.raw | tail
0010000110000000: 4140 (2180)
1000011000000001: 4146 (8601)
0001100000000101: 4158 (1805)
1001000011000000: 4160 (90c0)
0000110000000010: 4163 (0c02)
0110000000010100: 4163 (6014)
0011000000001010: 4164 (300a)
0100100001100000: 4167 (4860)
1010010000110000: 4172 (a430)
0101001000011000: 4185 (5218)
# ./srdsd -p 5218 -d ~/loc_db/ rds_dump.raw
 Copyright 2007 Inverse Path Ltd.
srdsd output – 0A Group
Injecting RDS-TMC Traffic Information Signals
Got RDS message (frame 75)
        Programme Identification: 0101001000011000 (5218)
        Group type code/version: 0000/0 (0A  - Tuning)
        Traffic Program: 1
        Programme Type: 01001 (9  - Varied Speech)
        Decoded 0A group:
                Traffic Announcement: 0
                Music Speech switch: 0
                Decoder Identification control: 100
                (Dynamic Switch / PS char 1,2)
                Alternative Frequencies: 10101010, 10101111
                (104.5, 105)
                Programme Service name: 0101001001010100 (RT)
                Collected PSN: RTL102.5
        Raw dump | Data             Checkword  Hex
        Block 1: | 0101001000011000 0000010100 5218
        Block 2: | 0000010100101100 0010101101 052c
        Block 3: | 1010101010101111 1010100110 aaaf
        Block 4: | 0101001001010100 0100110101 5254
 Copyright 2007 Inverse Path Ltd.
srdsd output – 8A Group
Injecting RDS-TMC Traffic Information Signals
Got RDS message (frame 76)
        Programme Identification: 0101001000011000 (5218)
        Group type code/version: 1000/0 (8A  - TMC)
        Traffic Program: 1
        Programme Type: 01001 (9  - Varied Speech)
        Decoded 8A group:
                Bit X4: 0 (User message)
                Bit X3: 1 (Single-group message)
                Duration and Persistence: 000 (no explicit duration given)
                Diversion advice: 0
                Direction: 1 (-)
                Extent: 011 (3)
                Event: 00001110011 (115 - slow traffic (with average speeds Q))
                Location: 0000110000001100 (3084)
                Decoded Location:
                        Location code type: POINT
                        Name ID: 11013 (Sv. Grande Raccordo Anulare)
                        Road code: 266 (Roma-Ss16)
                        GPS: 41.98449 N 12.49321 E
                        Link: 
http://maps.google.com/maps?ll=41.98449,12.49321&spn=0.3,0.3&q=41.98449,12.49321
        Raw dump | Data             Checkword  Hex
        Block 1: | 0101001000011000 0000010100 5218
        Block 2: | 1000010100101000 1110000111 8528
        Block 3: | 0101100001110011 0001011001 5873
        Block 4: | 0000110000001100 0111000011 0c0c
 Copyright 2007 Inverse Path Ltd.
srdsd output – 3A Group
Injecting RDS-TMC Traffic Information Signals
Got RDS message (frame 181)
        Programme Identification: 0101001000011000 (5218)