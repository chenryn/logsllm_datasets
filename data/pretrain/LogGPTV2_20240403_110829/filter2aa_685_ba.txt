That’s all there is to it. You can now log in to Tweeter, create messages, follow other
users using a direct link to their timeline, and see on your own timeline the messages
of users that you’re following.
TESTING TWEETER
Without the ability to log out, it’s a bit difficult to test
Tweeter. But you can log in using two different accounts by either using a dif-
ferent web browser or by creating a new private browsing window.
Listing 7.32
The /follow route
If either of the usernames 
isn’t present in the database, 
responds with an error
Retrieves the current user and the 
target user to follow from the database
Calls the follow procedure, 
which will store follower 
information in the database  
The redirect procedure is used
to redirect the user’s browser
back to the user page.
Licensed to   
219
Deploying the web application
Currently, Tweeter may not be the most user-friendly or secure application. Demon-
strating and explaining the implementation of features that would improve both of
those aspects would take far too many pages here. But despite the limited functional-
ity you’ve implemented in this chapter, you should now know enough to extend
Tweeter with many more features.
 As such, I challenge you to consider implementing the following features:
 The ability to unfollow users
 Authentication with passwords
 Better navigation, including a button that takes the user to the front page
 The ability to log out 
7.6
Deploying the web application
Now that the web application is mostly complete, you may wish to deploy it to a server.
 When you compile and run a Jester web application, Jester starts up a small HTTP
server that can be used to test the web application locally. This HTTP server runs on
port 5000 by default, but that can be easily changed. A typical web server’s HTTP
server runs on port 80, and when you navigate to a website, your web browser defaults
to that port.
 You could simply run your web application on port 80, but that’s not recom-
mended because Jester’s HTTP server isn’t yet mature enough. From a security point
of view, it’s also not a good idea to directly expose web applications like that.
 A more secure approach is to run a reliable HTTP server such as NGINX, Apache,
or lighttpd, and configure it to act as a reverse proxy.
7.6.1
Configuring Jester
The default Jester port is fine for most development work, but there will come a time
when it needs to be changed. You may also wish to configure other aspects of Jester,
such as the static directory.
 Jester can be configured easily using a settings block. For example, to change the
port to 80, simply place the following code above your routes.
settings:
port = Port(80)
Other Jester parameters that can be customized can be found in Jester’s documenta-
tion: https://github.com/dom96/jester#readme. 
7.6.2
Setting up a reverse proxy
A reverse proxy is a piece of software that retrieves resources on behalf of a client from
one or more servers. In the case of Jester, a reverse proxy would accept HTTP requests
from web browsers, ensure that they’re valid, and pass them on to a Jester application.
The Jester application would then send a response to the reverse proxy, and the
Listing 7.33
Configuring Jester
Licensed to   
220
CHAPTER 7
Building a Twitter clone
reverse proxy would pass it on to the client web browser as if it generated the
response. Figure 7.24 shows a reverse proxy taking requests from a web browser and
forwarding them to a Jester application.
 When configuring such an architecture, you must first decide how you’ll get a work-
ing binary of your web application onto the server itself. Keep in mind that binaries
compiled on a specific OS aren’t compatible with other OSs. For example, if you’re
developing on a MacBook running Mac OS, you won’t be able to upload the binary to
a server running Linux. You’ll either have to cross-compile, which requires setting up
a new C compiler, or you can compile your web application on the server itself.
 The latter is much simpler. You just need to install the Nim compiler on your
server, upload the source code, and compile it.
 Once your web application is compiled, you’ll need a way to execute it in the back-
ground while retaining its output. An application that runs in the background is
referred to as a daemon. Thankfully, many Linux distributions support the manage-
ment of daemons out of the box. You’ll need to find out what init system your Linux
distribution comes with and how it can be used to run custom daemons.
 Once your web application is up and running, all that’s left is to configure your
HTTP server of choice. This should be fairly simple for most HTTP servers. The follow-
ing listing shows a configuration suitable for Jester web applications that can be used
for NGINX.
server {
server_name tweeter.org;
location / {
proxy_pass http://localhost:5000;
proxy_set_header Host $host;
proxy_set_header X-Real_IP $remote_addr;
}
}
All you need to do is save that configuration to /etc/nginx/sites-enabled/tweeter.org
and reload NGINX’s configuration, and you should see Tweeter at http://tweeter.org.
That’s assuming that you own tweeter.org, which you most likely don’t, so be sure to
modify the domain to suit your needs.
Listing 7.34
NGINX configuration for Jester
Jester
Web browser
HTTP
HTTP
HTTP
HTTP
Figure 7.24
Reverse proxy in action
Licensed to   
221
Summary
 Other web servers should support similar configurations, including Apache and
lighttpd. Unfortunately, showing how to do this for each web server is beyond the
scope of this book. But there are many good guides online that show how to configure
these web servers to act as reverse proxies. 
7.7
Summary
 Web applications are typically modeled after the model-view-controller pattern.
 A route is a block of code that’s executed whenever a certain HTTP path is
requested.
 Jester is a Nim web microframework inspired by Sinatra.
 Nim’s standard library offers connectivity to the MySQL, SQLite, and Postgre-
SQL databases.
HTML can be generated in two ways: using the htmlgen module and using fil-
ters.
 Filters are expanded at compile time. They allow you to mix literal text and
Nim code in the same file.
 A Jester web application should be deployed behind a reverse proxy.
Licensed to   
Licensed to   
Part 3
Advanced concepts
The concepts and examples become a bit more difficult in this last part, but
they should also prove to be a lot more fun.
 Chapter 8 looks at Nim’s foreign function interface, which allows you to use
libraries written in other programming languages. You’ll learn how to interface
with a C library called SDL and then use it to draw some 2D shapes on the screen.
You’ll also see the JavaScript backend in this chapter, and you’ll learn how to rec-
reate the same 2D shapes in the web browser using the Canvas API.
 Chapter 9 is on metaprogramming. It will teach you about the three different
metaprogramming constructs in Nim: generics, templates, and macros. It will also
show you how to create a domain specific language for configuration parsing.
Licensed to   
Licensed to   
225
Interfacing with
other languages
For many years, computer programmers have been writing software libraries in var-
ious programming languages. Many of these libraries have been in development
for a very long time, accumulating features and maturing over the years. These
libraries are not typically written in Nim; instead, they’ve been written in older pro-
gramming languages such as C and C++.
 When writing software, you might have required an external C library to per-
form a task. A good example of this is the OpenSSL library, which implements the
SSL and TLS protocols. It’s primarily used for securely transferring sensitive data
over the internet, such as when navigating to a website using the HTTPS protocol.
This chapter covers
 Getting to know Nim’s foreign function interface
 Distinguishing between static and dynamic linking
 Creating a wrapper for an external C library
 Using the JavaScript backend
 Wrapping JavaScript APIs
Licensed to   
226
CHAPTER 8
Interfacing with other languages
 Many of the HTTP client modules in the standard libraries of various programming
languages, including Nim’s, use the C library to transfer encrypted data to and from
HTTP servers securely. It’s easy to forget that this library is used, because it’s usually
invoked behind the scenes, reducing the amount of work the programmer needs to do.
 The Nim standard library takes care of a lot of things for you, including interfacing
with other languages, as is the case with the OpenSSL library. But there will be times
when you’ll need to interface with a library yourself.
 This chapter will prepare you for those times. First, you’ll learn how to call proce-
dures implemented in the C programming language, passing data to those procedures
and receiving data back from them. Then, you’ll learn how to wrap an external library
called SDL, and you’ll use your wrapper to create a simple SDL application that draws
on the screen. (A wrapper is a thin layer of code that acts as a bridge between Nim code
and a library written in another programming language, such as C.) Last, you’ll work
with the JavaScript backend, wrapping the Canvas API and drawing shapes on the
screen with it.
 Nim makes the job of calling procedures implemented in the C programming lan-
guage particularly easy. That’s because Nim primarily compiles to C. Nim’s other com-
pilation backends, including C++, Objective-C, and JavaScript, make using libraries
written in those languages easy as well.
8.1
Nim’s foreign function interface
Nim’s foreign function interface (FFI) is the mechanism by which Nim can call proce-
dures written in another programming language. Most languages offer such a mecha-
nism, but they don’t all use the same terminology. For example, Java refers to its FFI as
the Java Native Interface, whereas Common Language Runtime languages such as C#
refer to it as P/Invoke.
 In many cases, the FFI is used to employ services defined and implemented in a
lower-level language. This lower-level language is typically C or C++, because many
important OS services are defined using those languages. Nim’s standard library
makes extensive use of the FFI to take advantage of OS services; this is done to perform
tasks such as reading files or communicating over a network.
 In recent years, the web has become a platform of its own. Web browsers that
retrieve and present web pages implement the JavaScript programming language,
allowing complex and dynamic web applications to be run inside the browser easily. In
order to run Nim applications in a web browser and make use of the services provided
by the browser, like the DOM or WebGL, Nim source code can be compiled to Java-
Script. Accessing those services and the plethora of JavaScript libraries is also done via
the FFI. Figure 8.1 shows an overview of Nim’s FFI.
 It’s important to note that the FFI allows you to interface with C, C++, and Objective-C
libraries in the same application, but you can’t interface with both C and JavaScript
libraries at the same time. This is because C++ and Objective-C are both backward com-
patible with C, whereas JavaScript is a completely different language.
Licensed to   
227
Nim’s foreign function interface
8.1.1
Static vs. dynamic linking
Before looking at the FFI in more detail, let’s look at the two different ways that C,
C++, and Objective-C libraries can be linked to your Nim applications.
 When using an external library, your application must have a way to locate it. The
library can either be embedded in your application’s binary or it can reside some-
where on the user’s computer. The former refers to a statically linked library, whereas
the latter refers to a dynamically linked library.
 Dynamic and static linking are both supported, but dynamic linking is favored by
Nim. Each approach has its advantages and disadvantages, but dynamic linking is
favored for several reasons:
 Libraries can be updated to fix bugs and security flaws without updating the
applications that use the libraries.
 A development version of the linked library doesn’t need to be installed in
order to compile applications that use it.
 A single dynamic library can be shared between multiple applications.
The biggest advantage of static linking is that it avoids dependency problems. The
libraries are all contained in a single executable file, which simplifies the distribution
and installation of the application. Of course, this can also be seen as a disadvantage,
because these executables can become very big.
 Dynamically linked libraries are instead loaded when the application first starts.
The application searches special paths for the required libraries, and if they can’t be
found, the application fails to start. Figure 8.2 shows how libraries are loaded in stati-
cally and dynamically linked applications.
 It’s important to be aware of the dynamically linked libraries that your application
depends on, because without those libraries, it won’t run.
Nim compiler  
C/C++/Obj C FFI
JavaScript FFI 
printf() 
std::srand 
[ NSUserNotification new] 
getElementById() 
new WebSocket()
WebGLRenderingContext 
Figure 8.1
Using the Nim FFI, you can take advantage of services in other languages. Nim 
offers two versions of the FFI: one for C, C++, and Objective-C; and a second one for JavaScript. 
Both can’t be used in the same application.
Licensed to   
228
CHAPTER 8
Interfacing with other languages
With these differences in mind, let’s look at the process of creating wrappers in Nim. 
8.1.2
Wrapping C procedures
In this section, we’ll wrap a widely used and fairly simple C procedure: printf. In C,
the printf procedure is declared as follows:
int printf(const char *format, ...);
What you see here is the procedure prototype of printf. A prototype specifies the pro-
cedure’s name and type signature but omits its implementation. When wrapping
procedures, the implementation isn’t important; all that matters is the procedure
prototype. If you’re not familiar with this procedure, you’ll find out what it does later
in this section.
 In order to wrap C procedures, you must have a good understanding of these pro-
cedure prototypes. Let’s look at what the previous procedure prototype tells us about
printf. Going from left to right, the first word specifies the procedure’s return type,
in this case an int. The second specifies the procedure name, which is printf. What
follows is the list of parameters the procedure takes, in this case a format parameter of
type const char * and a variable number of arguments signified by the ellipsis.
Static linking
Dynamic linking
handshake()
encrypt()
OpenSSL
CreateWindow()
RenderClear()
SDL
./app
handshake()
encrypt()
OpenSSL
CreateWindow()
RenderClear()
SDL
./app
Application
executed
Find libraries
/usr/lib/libsdl.so
/usr/lib/libssl.so
Libraries found
Load libraries
Libraries
missing
Could not load: libssl.so
Application
executed
When a library can’t be
found, the application
fails with an error.
When the libraries are
loaded, the application
can start its execution.
The libraries are embedded
in the application binary and
so are loaded into memory
before it’s executed.
Libraries need 
to be found and 
loaded before the 
application can start.
Figure 8.2
Static vs. dynamic linking
Licensed to   
229
Nim’s foreign function interface
 Table 8.1 summarizes the information defined by the printf prototype.
This prototype has two special features:
 The const char * type represents a pointer to an immutable character.
 The function takes a variable number of arguments.
In many cases, the const char * type represents a string, as it does here. In C,
there’s no string type; instead, a pointer that points to the start of an array of charac-
ters is used.
 When wrapping a procedure, you need to look at each type and find a Nim equiva-
lent. The printf prototype has two argument types: int and const char *. Nim
defines an equivalent type for both, cint and cstring, respectively. The c in those
types doesn’t represent the C programming language but instead stands for compatible;
the cstring type is therefore a compatible string type. This is because C isn’t the only
language supported by Nim’s FFI. The cstring type is used as a native JavaScript
string as well.
 These compatible types are defined in the implicitly imported system module,
where you’ll find a lot of other similar types. Here are some examples:
cstring
cint, cuint
pointer
clong, clonglong, culong, culonglong
cchar, cschar, cuchar
cshort, cushort
cint
csize
cfloat
cdouble, clongdouble
cstringArray
Let’s put all this together and create the wrapper procedure. Figure 8.3 shows a
wrapped printf procedure.
 The following code shows how the procedure can be invoked:
proc printf(format: cstring): cint {.importc, varargs, header: "stdio.h".}
discard printf("My name is %s and I am %d years old!\n", "Ben", 30)
Table 8.1
Summary of the printf prototype
Return type
Name
First parameter type
First parameter name
Second parameter
int
printf
const char *
format
Variable number of 
arguments
Licensed to   
230
CHAPTER 8
Interfacing with other languages
Save the preceding code as ffi.nim. Then compile and run it with nim c -r ffi.nim.
You should see the following output:
My name is Ben and I am 30 years old!
The printf procedure takes a string constant, format, that provides a description of
the output. It specifies the relative location of the arguments to printf in the format
string, as well as the type of output that this procedure should produce. The parame-
ters that follow specify what each format specifier in the format string should be
replaced with. The procedure then returns a count of the printed characters.
 One thing you might immediately notice is the discard keyword. Nim requires
return values that aren’t used to be explicitly discarded with the discard keyword.
This is useful when you’re working with procedures that return error codes or other
important pieces of information, where ignoring their values may lead to issues. In the
case of printf, the value can be safely discarded implicitly. The {.discardable.}
pragma can be used for this purpose:
proc printf(format: cstring): cint {.importc, varargs, header: "stdio.h",
discardable.}
printf("My name is %s and I am %d years old!\n", "Ben", 30)
What really makes this procedure work is the importc and header pragmas. The header
pragma specifies the header file that contains the imported procedure. The importc pragma
asks the Nim compiler to import the printf procedure from C. The name that’s
imported is taken from the procedure name, but it can be changed by specifying a dif-
ferent name as an argument to the importc pragma, like so:
proc displayFormatted(format: cstring): cint {.importc: "printf", varargs,
header: "stdio.h", discardable.}
displayFormatted("My name is %s and I am %d years old!\n", "Ben", 30)
That’s pretty much all there is to it. The printf procedure now wraps the printf pro-
cedure defined in the C standard library. You can even export it and use it from other
modules. 
Maps to a 
const char*
Maps to C’s 
int
Allows proc to take a
variable number of
arguments
Standard procedure declaration
Imports printf from C
Note the lack 
of = here because 
C provides the 
implementation
Specifies where 
printf
is defined.
Figure 8.3
printf wrapped in Nim
Licensed to   
231
Nim’s foreign function interface
8.1.3