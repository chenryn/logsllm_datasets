requests. Although it may be possible to decipher some of the string-based data
simply by inspecting the raw serialized data, in general you need to unpack the
serialized data before it can be fully understood. And if you want to modify the
data to interfere with the application’s processing, fi rst you need to unpack the
serialized content, edit it as required, and reserialize it correctly. Simply edit-
ing the raw serialized data will almost certainly break the format and cause a
parsing error when the application processes the message.
Each browser extension technology comes with its own scheme for serializing
data within HTTP messages. In general, therefore, you can infer the serializa-
tion format based on the type of client component that is being employed, but
the format usually is evident in any case from a close inspection of the relevant
HTTP messages.
Java Serialization
The Java language contains native support for object serialization, and Java
applets may use this to send serialized data structures between the client and
server application components. Messages containing serialized Java objects
usually can be identifi ed because they have the following Content-Type header:
Content-Type: application/x-java-serialized-object
Having intercepted the raw serialized data using your proxy, you can deserialize
it using Java itself to gain access to the primitive data items it contains.
DSer is a handy plug-in to Burp Suite that provides a framework for viewing
and manipulating serialized Java objects that have been intercepted within Burp.
This tool converts the primitive data within the intercepted object into XML
format for easy editing. When you have modifi ed the relevant data, DSer then
reserializes the object and updates the HTTP request accordingly.
cc0055..iinndddd 113366 88//1199//22001111 1122::0055::4422 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 137
Chapter 5 n Bypassing Client-Side Controls 137
You can download DSer, and learn more about how it works, at the follow-
ing URL:
http://blog.andlabs.org/2010/09/re-visiting-java-de-serialization-it.html
Flash Serialization
Flash uses its own serialization format that can be used to transmit complex
data structures between server and client components. Action Message Format
(AMF) normally can be identifi ed via the following Content-Type header:
Content-Type: application/x-amf
Burp natively supports AMF format. When it identifi es an HTTP request or
response containing serialized AMF data, it unpacks the content and presents
this in tree form for viewing and editing, as shown in Figure 5-5. When you have
modifi ed the relevant primitive data items within the structure, Burp reserial-
izes the message, and you can forward it to the server or client to be processed.
Figure 5-5: Burp Suite supports AMF format and lets you view and edit the
deserialized data
cc0055..iinndddd 113377 88//1199//22001111 1122::0055::4422 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 138
138 Chapter 5 n Bypassing Client-Side Controls
Silverlight Serialization
Silverlight applications can make use of the Windows Communication Foundation
(WCF) remoting framework that is built in to the .NET platform. Silverlight client
components using WCF typically employ Microsoft’s .NET Binary Format for
SOAP (NBFS), which can be identifi ed via the following Content-Type header:
Content-Type: application/soap+msbin1
A plug-in is available for Burp Proxy that automatically deserializes NBFS-
encoded data before it is displayed in Burp’s interception window. After you
have viewed or edited the decoded data, the plug-in re-encodes the data before
it is forwarded to the server or client to be processed.
The WCF binary SOAP plug-in for Burp was produced by Brian Holyfi eld
and is available to download here:
www.gdssecurity.com/l/b/2009/11/19/wcf-binary-soap-plug-in-for-burp/
Obstacles to Intercepting Traffi c from Browser Extensions
If you have set up your browser to use an intercepting proxy, you may fi nd that
requests made by browser extension components are not being intercepted by
your proxy, or are failing. This problem usually is due to issues with the com-
ponent’s handling of HTTP proxies or SSL (or both). Typically it can be handled
via some careful confi guration of your tools.
The fi rst problem is that the client component may not honor the proxy con-
fi guration you have specifi ed in your browser or your computer’s settings. This
is because components may issue their own HTTP requests, outside of the APIs
provided by the browser itself or the extension framework. If this is happen-
ing, you can still intercept the component’s requests. You need to modify your
computer’s hosts fi le to achieve the interception and confi gure your proxy to
support invisible proxying and automatic redirection to the correct destination
host. See Chapter 20 for more details on how to do this.
The second problem is that the client component may not accept the SSL
certifi cate being presented by your intercepting proxy. If your proxy is using a
generic self-signed certifi cate, and you have confi gured your browser to accept it,
the browser extension component may reject the certifi cate nonetheless. This may
be because the browser extension does not pick up the browser’s confi guration
for temporarily trusted certifi cates, or it may be because the component itself
programmatically requires that untrusted certifi cates should not be accepted.
In either case, you can circumvent this problem by confi guring your proxy to
use a master CA certifi cate, which is used to sign valid per-host certifi cates for
each site you visit, and installing the CA certifi cate in your computer’s trusted
certifi cate store. See Chapter 20 for more details on how to do this.
In some rare cases you may fi nd that client components are communicating
using a protocol other than HTTP, which simply cannot be handled using an
cc0055..iinndddd 113388 88//1199//22001111 1122::0055::4433 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 139
Chapter 5 n Bypassing Client-Side Controls 139
intercepting proxy. In these situations, you still may be able to view and modify
the affected traffi c by using either a network sniffer or a function-hooking tool.
One example is Echo Mirage, which can inject into a process and intercept calls
to socket APIs, allowing you to view and modify data before it is sent over the
network. Echo Mirage can be downloaded from the following URL:
www.bindshell.net/tools/echomirage
HACK STEPS
1. Ensure that your proxy is correctly intercepting all traffic from the browser
extension. If necessary, use a sniffer to identify any traffic that is not
being proxied correctly.
2. If the client component uses a standard serialization scheme, ensure that
you have the tools necessary to unpack and modify it. If the component
is using a proprietary encoding or encryption mechanism, you need to
decompile or debug the component to fully test it.
3. Review responses from the server that trigger key client-side logic. Often,
timely interception and modification of a server response may allow you
to “unlock” the client GUI, making it easy to reveal and then perform
complex or multistaged privileged actions.
4. If the application performs any critical logic or events that the client com-
ponent should not be trusted to perform (such as drawing a card or rolling
dice in a gambling application), look for any correlation between execu-
tion of critical logic and communication with the server. If the client does
not communicate with the server to determine the outcome of the event,
the application is definitely vulnerable.
Decompiling Browser Extensions
By far the most thorough method of attacking a browser extension component
is to decompile the object, perform a full review of the source code, and if nec-
essary modify the code to change the object’s behavior, and recompile it. As
already discussed, browser extensions are compiled into bytecode. Bytecode is a
high-level platform-independent binary representation that can be executed by
the relevant interpreter (such as the Java Virtual Machine or Flash Player), and
each browser extension technology uses its own bytecode format. As a result,
the application can run on any platform that the interpreter itself can run on.
The high-level nature of bytecode representation means that it is always
theoretically possible to decompile the bytecode into something resembling the
original source code. However, various defensive techniques can be deployed to
cause the decompiler to fail, or to output decompiled code that is very diffi cult
to follow and interpret.
cc0055..iinndddd 113399 88//1199//22001111 1122::0055::4433 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 140
140 Chapter 5 n Bypassing Client-Side Controls
Subject to these obfuscation defenses, decompiling bytecode normally is the
preferable route to understanding and attacking browser extension components.
This allows you to review business logic, assess the full functionality of the
client-side application, and modify its behavior in targeted ways.
Downloading the Bytecode
The fi rst step is to download the executable bytecode for you to start working
on. In general, the bytecode is loaded in a single fi le from a URL specifi ed within
the HTML source code for application pages that run the browser extension.
Java applets generally are loaded using the  tag, and other components
generally are loaded using the  tag. For example:
In some cases, the URL that loads the bytecode may be less immediately obvi-
ous, since the component may be loaded using various wrapper scripts provided
by the different browser extension frameworks. Another way to identify the
URL for the bytecode is to look in your proxy history after your browser has
loaded the browser extension. If you take this approach, you need to be aware
of two potential obstacles:
n Some proxy tools apply fi lters to the proxy history to hide from view items
such as images and style sheet fi les that you generally are less interested
in. If you cannot fi nd a request for the browser extension bytecode, you
should modify the proxy history display fi lter so that all items are visible.
n Browsers usually cache the downloaded bytecode for extension components
more aggressively than they do for other static resources such as images.
If your browser has already loaded the bytecode for a component, even
doing a full refresh for a page that uses the component may not cause
the browser to request the component again. In this eventuality, you may
need to fully clear your browser’s cache, shut down every instance of the
browser, and then start a fresh browser session to force your browser to
request the bytecode again.
When you have identifi ed the URL for the browser extension’s bytecode, usu-
ally you can just paste this URL into your browser’s address bar. Your browser
then prompts you to save the bytecode fi le on your local fi lesystem.
TIP If you have identifi ed the request for the bytecode in your Burp Proxy
history, and the server’s response contains the full bytecode (and not a ref-
erence to an earlier cached copy), you can save the bytecode directly to fi le
cc0055..iinndddd 114400 88//1199//22001111 1122::0055::4433 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 141
Chapter 5 n Bypassing Client-Side Controls 141
from within Burp. The most reliable way to do this is to select the Headers tab
within the response viewer, right-click the lower pane containing the response
body, and select Copy to File from the context menu.
Decompiling the Bytecode
Bytecode usually is distributed in a single-fi le package, which may need to be
unpacked to obtain the individual bytecode fi les for decompilation into source
code.
Java applets normally are packaged as .jar (Java archive) fi les, and Silverlight
objects are packaged as .xap fi les. Both of these fi le types use the zip archive
format, so you can easily unpack them by renaming the fi les with the .zip
extension and then using any zip reader to unpack them into the individual fi les
they contain. The Java bytecode is contained in .class fi les, and the Silverlight
bytecode is contained in .dll fi les. After unpacking the relevant fi le package,
you need to decompile these fi les to obtain source code.
Flash objects are packaged as .swf fi les and don’t require any unpacking
before you use a decompiler.
To perform the actual bytecode decompilation, you need to use some specifi c
tools, depending on the type of browser extension technology that is being used,
as described in the following sections.
Java Tools
Java bytecode can be decompiled to into Java source code using a tool called
Jad (the Java decompiler), which is available from:
www.varaneckas.com/jad
Flash Tools
Flash bytecode can be decompiled into ActionScript source code. An alternative
approach, which is often more effective, is to disassemble the bytecode into a
human-readable form, without actually fully decompiling it into source code.
To decompile and disassemble Flash, you can use the following tools:
n Flasm — www.nowrap.de/flasm
n Flare — www.nowrap.de/flare
n SWFScan — www.hp.com/go/swfscan (this works for Actionscript 2 and 3)
Silverlight Tools
Silverlight bytecode can be decompiled into source code using a tool called
.NET Refl ector, which is available from:
www.red-gate.com/products/dotnet-development/reflector/
cc0055..iinndddd 114411 88//1199//22001111 1122::0055::4433 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 142
142 Chapter 5 n Bypassing Client-Side Controls
Working on the Source Code
Having obtained the source code for the component, or something resembling
it, you can take various approaches to attacking it. The fi rst step generally is
to review the source code to understand how the component works and what
functionality it contains or references. Here are some items to look for:
n Input validation or other security-relevant logic and events that occur
on the client side
n Obfuscation or encryption routines being used to wrap user-supplied
data before it is sent to the server
n “Hidden” client-side functionality that is not visible in your user interface
but that you might be able to unlock by modifying the component
n References to server-side functionality that you have not previously identi-
fi ed via your application mapping
Often, reviewing the source code uncovers some interesting functions
within the component that you want to modify or manipulate to identify
potential security vulnerabilities. This may include removing client-side
input validation, submitting nonstandard data to the server, manipulating
client-side state or events, or directly invoking functionality that is present
within the component.
You can modify the component’s behavior in several ways, as described in
the following sections.
Recompiling and Executing Within the Browser
You can modify the decompiled source code to change the component’s behav-
ior, recompile it to bytecode, and execute the modifi ed component within your
browser. This approach is often preferred when you need to manipulate key
client-side events, such as the rolling of dice in a gaming application.
To perform the recompilation, you need to use the developer tools that are
relevant to the technology you are using:
n For Java, use the javac program in the JDK to recompile your modifi ed
source code.
n For Flash, you can use flasm to reassemble your modifi ed bytecode or
one of the Flash development studios from Adobe to recompile modifi ed
ActionScript source code.
n For Silverlight, use Visual Studio to recompile your modifi ed source code.
Having recompiled your source code into one or more bytecode fi les, you
may need to repackage the distributable fi le if required for the technology
being used. For Java and Silverlight, replace the modifi ed bytecode fi les in your
cc0055..iinndddd 114422 88//1199//22001111 1122::0055::4433 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 143
Chapter 5 n Bypassing Client-Side Controls 143
unpacked archive, repackage using a zip utility, and then change the extension
back to .jar or .xap as appropriate.
The fi nal step is to load your modifi ed component into your browser so that
your changes can take effect within the application you are testing. You can
achieve this in various ways:
n If you can fi nd the physical fi le within your browser’s on-disk cache that
contains the original executable, you can replace this with your modifi ed
version and restart your browser. This approach may be diffi cult if your
browser does not use a different individual fi le for each cached resource
or if caching of browser extension components is implemented only in
memory.
n Using your intercepting proxy, you can modify the source code of the
page that loads the component and specify a different URL, pointing to
either the local fi lesystem or a web server that you control. This approach
normally is diffi cult because changing the domain from which the com-
ponent is loaded may violate the browser’s same origin policy and
may require reconfi guring your browser or other methods to weaken
this policy.
n You can cause your browser to reload the component from the original
server (as described in the earlier section “Downloading the Bytecode”),
use your proxy to intercept the response containing the executable, and
replace the body of the message with your modifi ed version. In Burp
Proxy, you can use the Paste from File context menu option to achieve
this. This approach usually is the easiest and least likely to run into the
problems described previously.
Recompiling and Executing Outside the Browser
In some cases, it is not necessary to modify the component’s behavior while it
is being executed. For example, some browser extension components validate
user-supplied input and then obfuscate or encrypt the result before sending
it to the server. In this situation, you may be able to modify the component to
perform the required obfuscation or encryption on arbitrary unvalidated input
and simply output the result locally. You can then use your proxy to intercept the
relevant request when the original component submits the validated input, and
you can replace this with the value that was output by your modifi ed component.
To carry out this attack, you need to change the original executable, which is
designed to run within the relevant browser extension, into a standalone pro-
gram that can be run on the command line. The way this is done depends on
the programming language being used. For example, in Java you simply need
to implement a main method. The section “Java Applets: A Worked Example”
gives an example of how to do this.
cc0055..iinndddd 114433 88//1199//22001111 1122::0055::4444 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 144
144 Chapter 5 n Bypassing Client-Side Controls
Manipulating the Original Component Using JavaScript
In some cases, it is not necessary to modify the component’s bytecode. Instead,
you may be able to achieve your objectives by modifying the JavaScript within
the HTML page that interacts with the component.
Having reviewed the component’s source code, you can identify all its public
methods that can be invoked directly from JavaScript, and the way in which