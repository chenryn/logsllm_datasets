N2813-88-021:
gtrk:
root:
:0te-20-2182
nginx:
oot:
图10-18不同分组的pillar 差异信息
10.7.4配置state
定义入口 top.sls：
[ /srv/salt/top.sls 
base1
1 *' ;
- ng1nx
下面定义nginx包、服务状态管理配置sls，其中，salt:/nginx/nginx.conf为配置模板
文件位置，-enable:True检查服务是否在开机自启动服务队列中，如果不在则加上，等价于
chkconfignginxon命令“reload:True”，表示服务支持reload 操作，不加则会默认执行restart
---
## Page 202
第10章集中化管理平台Saltstack详解181
操作。watch一则检测/etc/nginx/nginx.conf是否发生变化，二则确保nginx已安装成功。
[ /srv/salt/nginx.sls ]
ngi.nx1
pkg :
= installed
file,nanaged:
- source: salt://nginx/nginx.conf
= nanei /etc/nginx/nginx.conf
user: root
- group: root
- template1jinja
service, running:
- enable: True
- reload: True
= watch:
- file: /etc/nginx/nginx,conf
- pkg: nginx
定制Nginx配置文件jinja模板，各参数的引用规则如下：
worker_processes参数采用grains[num_cpus]上报值（与设备CPU核数一致）；
worker_cpu_affinity分配多核CPU，根据当前设备核数进行匹配，分别为2、4、8、
核或其他：
 worker_rlimit_nofile、worker_connections 参数理论上为 grainsmax_open_file'];
root 参数为定制的 pillar[nginx][root']值。
[ /srv/salt/nginx/nginx.conf 】
 For more information on configuration, see:
vorker_processes{{ grains[*num_cpus*]1}
2980
nginx:
{$ if grains[*num_cpus*] = 2 %}
vorker_cpu_aftinity 01 10}
{$elif grains[*num_cpus*] == 4 $)
worker_cpu_affinity 100o 0100 0010 00011
($ elif grains[*num_cpus*] >= 8 4)
worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000
01000000 10000000;
($ else %)
worker_cpu_affinity 1000 0100 0010 0001:
worker_rlimit_nofile (( grains[*max_open_ile*] 1}/
{t endif )
error_1og /var/1og/nginx/error.1og
---
## Page 203
182第二部分高级篇
terror_log
/var/1og/nginx/error.1og notice;
terror_1og
/var/log/nginx/error.1og info1
pid
/var/run/nginx:pid;
events (
worker_cc
nections
{( grains ['max_open_file*] 1]:
http(
inelude
/etc/nginx/mime.types;
default_type
application/octet-stream;
1og_fornat
main
*Sremote_addr - $remote_user [Stime_local] "$request" 
*Sstatus Sbody_bytes_sent *shttp_referer*
*"shttp_user_agent" *Shttp_x_forwarded_for"';
access_1og
/var/1og/nginx/access.1ogmain;
yendou"do3#
sendfi1e
on7
on:
#keepalive_tineout 0;
keepalive_timeout 65/
#gzip on;
 Load config files from the /etc/nginx/conf.d directory
# The default server is in conf,d/default.conf
include /etc/nginx/conf.d/*,conf;
server (
1isten
80 default_server1
server_nane
#charset koi8-r:
access_log 1ogs/host.access.1og main;
location / {
root
(([,oox,1[,xuybu,1zettvd 1}
Index
index.html index.htm:
error_page
404
/404.html;
1ocation = /404.html (
root
/ust/share/nginx/btm1;
 redirect server error pages to the static page /50x.htm1
error_page
#
500 502 503 504 /50x.htnl1
---
## Page 204
第10章集中化管理平台Saltstack详解183
1ocation = /50x,htn] (
root
*/usr/share/nginx/htn1;
执行刷新 state 配置，结果如图10-19所示。
110s [-020-98182Sa100u]
State:
dff:Nefite
File
Stote:
Tnue
nx:-ne
1.0.15-5.e16
Lote:
Result:
nginx: Teue
图10-19刷新state返回结果（部分截图）
10.7.5校验结果
登录weblgroup组的一台服务器，检查Nginx的配置，尤其是变量部分的参数值，配置
片段如下：
[ /etc/nginx/nginx.conf 
user
nginx}
worker_processes2;
worker_cpu_affinity 01 10:
---
## Page 205
184第二部分高级
worker_rlimit_nofile 65535;
error_1og /var/log/nginx/error, 1og
#error_1og /var/log/nginx/error.1og
notice;
error_log
/var/1og/nginx/error.1og
infoj
pid
/var/run/nginx,pid:
events (
worker_connections 65535;
location / {
index index.html index.htm,
root
1
再登录web2group组的一台服务器，检查Nginx的配置，对比web1group组的服务器差
异化，包括不同硬件配置、内核参数等，配置片段如下：
[/etc/nginx/nginx.conf 】
user
worker_processes4:
nginx
worker_cpu_affinity 1000 0100 0010 0001;
worker_r1init_nofile 65535;
error_1og/var/1og/nginx/error.1og;
terror_1og/var/1og/nginx/error.1og
/var/log/nginx/error.1og
notice;
terror_log
/var/run/nginx.pid;
info;
p1d
vorker_connections65535:
1
location /(
root
/data;
Index Index.html index.htm
至此，一个模拟生产环境Web服务集群的配置集中化管理平台已经搭建完成，大家可以
利用这个思路扩展到其他功能平台。
10.1至10.6节的 Saltstack介绍可参考官网文档http://docs.saltstack.com/en/latest/。
---
## Page 206
第11章
Clopder
统一网络控制器Func详解
Func（Fedora Unified Network Controller）是由红帽子公司以Fedora平台构建的统
网络控制器，是为解决集群管理、监控问题面设计开发的系统管理基础框架，官网地址为
https:/fedorahosted.org/func。它是一个能有效简化多服务器系统管理工作的工具，它易于学
习、使用和扩展，功能强大，只需要极少的配置和维护操作。Func 分为master和 slave 两部
分，master为主控端，slave 为被控端。Func 具有以下特点。
口支持在主控机上管理任意多台服务器，或任意多个服务器组。
口支持命令行方式发送远程命令或者远程获取数据。
Func通信基于XMLRPC 和 SSL标准协议，具有模块化的可扩展的特点。与Saltstack
认证方式一致。
口可以通过Kickstart预安装Func到系统中，自动注册到主控服务器端。
口任何人都可以通过Func提供的PythonAPI轻松编写自己的模块，以实现具体功能扩
展。而且任何Func命令行能完成的工作，都能通过API编程实现。
口提供封装大量通用的服务器管理命令模块
口Func平台没有与数据库关联，不需要复杂的安装与配置，服务器间安全证书的分发
都是自动完成的。
Func与Saltstack在主、被控端建立信任机制是一样的，都采用了证书+签名的方式。
相比Saltstack或Ansible，Func在文件配置、状态管理方面还是空白，但在远程命令执行、
API支持、配置简单等方面还是能体现出其优势，适合中小型服务集群的远程命令执行、文
件分发的工作，同时API支持跨语言，可以与现有运营平台打通，实现交互式更强、体验更
---
## Page 207
186第二部分高级篇
好的自动化运营平台。
11.1Func的安装
Func需要在主控端、被控端部署环境，建议读者采用yum的方式实现部署。目前Func
最新版本为0.28，由func、certmaster、pyOpenSSL三个组件组成。下面详细讲解Func的安
装步骤。
11.1.1业务环境说明
为了方便读者理解，笔者通过虚拟化环境部署功能服务器来进行演示，操作系统版本为
CentOS release 6.4，自带 Python 2.6.6。相关服务器信息如表11-1所示。
表11-1业务环境表说明
角色
主机名
IP
Master
SN2013-08-020
192.168.1.20
mintion
SN2013-08-021
192.168.1.21
minion
SN2013-08-022
192.168.1.22
11.1.2安装Func
1.主控端服务器安装
主控端部署在主机名为SN2013-08-020的设备上，通过yum方式安装，如下：
yum insta11 func -y
/sbin/chkconfig --level 345 certmaster on
在设备通信上Func要求使用主机名来识别，在没有内部域名解析服务的情况下，可通
过配置主机hosts来解决主机名的间题。主控端hosts配置如下：
[/ete/hosts 】
192.168.1.21
SN201308021
192.168.1.22
SN201308022
192.168.1.20
func.master server,com
修改/etc/certmaster/minion.conf的certmaster参数，指向证书服务器，即主控端服务器，
func命令用到此配置，如：
---
## Page 208
第11章统一网络控制器Func详解187
[/etc/certmaster/minion.conf】
 configuration for minlons
[nain]
certnaster = func.master.server.com
certnaster_port - 51235
0083 =t60
cert_dir = /etc/pki/certmaster
启动证书服务：
/sbin/service certmaster start
配置iptables，开通192.168.1.0/24网段访问证书服务51235（certmaster服务）端口。
至此，主控端配置完毕。
2.被控端服务器安装
被控端部署在主机名为SN2013-08-021、SN2013-08-022的设备上，同样通过yum方式
安装，如下：
 yum instal1 func =y
 /sbin/chkconfig --level 345 fuscd on
配置hosts信息：
192.168.1.20  func.master.server.com
修改/etc/certmaster/minion.conf的certmaster参数，以便指向证书服务器发出签名请求，
建立信任关系，如：
[ /etc/certmaster/minion.conf 】
 configuration for minions
[main]
certmaster - func.master.server.con
certmaster_port - 51235
1og_leve1 = DE8UG
cert_dir = /etc/pki/certmaster
修改/etc/func/minion.conf的minion_name参数，作为被控主机的唯一标识，一般使用主
机名，以SN2013-08-021主机为例，配置如下：
---
## Page 209
188第二部分高级
configuration for minions
1og_leve1 = INFO
[utew]
ac1_dir = /etc/func/minion=ac1,d
listen_port - 51234
1isten_addr =
minion_name = SN201308-021
method_log_dir = /var/1og/func/methods/