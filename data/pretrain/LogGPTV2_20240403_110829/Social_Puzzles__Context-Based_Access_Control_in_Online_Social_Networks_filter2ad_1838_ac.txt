each correctly answered question qσ(j) to u. In addition
to this, SP also sends U RLO to u. Otherwise, if less
than k veriﬁcations are successful, then SP does not
send anything and ends the protocol with the user u.
σ(j)(cid:9), . . . , U RLO ): On receiv-
ing U RLO, the user u ∈ RO downloads the encrypted
object OKO from U RLO. The user u further obtains
σ(j)⊕aσ(j)).
the k shares d
Once k shares are obtained, u reconstructs the object-
speciﬁc secret MO by using Lagrange basis polynomi-
als as discussed in III-B. Once the object-speciﬁc secret
MO is reconstructed, u computes KO = H(MO) and
obtains the object O = D(OKO , KO), where D is the
decryption function of the symmetric cryptosystem.
σ(j) by computing aσ(j)⊕(d
• Access ((cid:8)σ(j), aσ(j) ⊕ d
MO
).
MO
MO
MO
B. Construction 2
Our second construction is shown in Fig. 2. As we have
already summarized CP-ABE in III-C, here we only outline
304304304
how we utilize CP-ABE to construct efﬁcient social puzzles.
Before providing details, let us describe the access tree
Storage Service (DH) 
࡯ࢀ’ 
7. AccessData 
Service Provider 
(SP) 
࣎’, PK, MK 
3. Perturb ࣎ 
2. Encrypt 
1. Setup 
Sharer (S) 
Data (O) 
n
e
G
y
e
K
.
9
Sharer’s Social 
Network (ST) 
Figure 2. Construction 2
used in this construction. In CP-ABE, an access control
policy is encoded as an access tree where non-leaf nodes
are represented by threshold gates. Each threshold gate is
described by its children and a threshold value (threshold
value is less than or equal to the number of children). The
leaf nodes describe attributes and have a threshold of one.
A leaf node is satisﬁed if the attribute input by the user
matches the attribute assigned to the leaf node. A non-leaf
node is satisﬁed when at least a threshold of its children
nodes are satisﬁed. An access tree is satisﬁed if and only
if the root node is satisﬁed. Further details can be found in
[19]. We now present the details of our second construction.
As before, let’s assume that S wants to share an ob-
ject O with all users in her social network ST who
know the context CO about that object. Let the context
CO be deﬁned by a total of N question-answer pairs
{(cid:8)q1, a1(cid:9),(cid:8)q2, a2(cid:9), . . . ,(cid:8)qN , aN(cid:9)}. The sharer S chooses a
threshold k for the object O and creates an access tree
structure τ. The access tree τ is a monotonic tree structure
of height 1, as shown in Fig. 3, with a root node and N leaf
nodes, where the attributes of each leaf node τq(i) are set to
the values qi and ai. The sole purpose of τ is to enable S to
encrypt object O with context attributes (qi, ai). S encrypts
the object O using the CP-ABE Encrypt(P K, O, τ) routine
to produce the ciphertext CT , as outlined in III-C.
In order to effectively use CP-ABE in our proposal, a
minor tweak is required. The access tree τ in our proposal is
ﬁrst perturbed by replacing the answer attributes ai with the
corresponding hash values H(ai) to produce the perturbed
(cid:3), as illustrated in Fig. 4. Then, S replaces the
access tree τ
access tree τ encoded in the cipher text CT by the perturbed
(cid:3) to produce the ciphertext CT
(cid:3). As we will see
access tree τ
later, this is done to prevent the DH from learning the actual
access tree τ containing the answers (required to know the
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:24:09 UTC from IEEE Xplore.  Restrictions apply. 
context CO). S then uploads τ
key M K to SP , and CT
with all users, including the ST .
(cid:3), public key P K and master
(cid:3) to DH. SP shares P K and M K
Max. = N 
Threshold = k 
Root node 
Max. = 1 
Threshold = 1 
Attr 1 = q1 
Attr 2 = a1 
Max. = 1 
Threshold = 1 
Attr 1 = q2 
Attr 2 = a2 
….. 
Max. = 1 
Threshold = 1 
Attr 1 = qN 
Attr 2 = aN 
N leaf nodes 
Figure 3. Access tree structure τ for Construction 2
SP then displays the questions qi in τ
(cid:3) to users in ST . On
viewing these questions, users in ST can choose to respond
(cid:3) containing the corresponding hashed answer
with a set S
(cid:3) (sent
attributes. The SP matches the hashed answers in S
(cid:3). If the
by some user in ST ) to the hashes of answers in τ
number of matches satisﬁes the threshold ζO (= k), the SP
(cid:3) stored in DH.
replies back with U RLO that points to CT
(cid:3), the receiving user in ST attempts
After downloading CT
(cid:3)), by replacing
(cid:3) in CT
to (partially) reconstruct τ (from τ
(cid:3) with their
at least k hashed answer attributes H(ai) in τ
respective real answers ai. This reconstructed access tree is
(cid:3) obtained
(cid:3) in the CT
denoted by ˆτ. The receiver replaces τ
from the DH with ˆτ to obtain ˆ
CT (or reconstructed CT ).
Max. = N 
Threshold = k 
Root node 
Max. = 1 
Threshold = 1 
Attr 1 = q1 
Attr 2 = H(a1) 
Max. = 1 
Threshold = 1 
Attr 1 = q2 
Attr 2 = H(a2) 
….. 
Max. = 1 
Threshold = 1 
Attr 1 = qN 
Attr 2 = H(aN) 
N leaf nodes 
Figure 4. Pertubed access tree structure τ(cid:2)
The receiver then runs the publicly known KeyGen(M K,
S) algorithm with the real answer attribute set S and master
key M K to obtain the private key SK that identiﬁes with
the set S. With ˆ
CT and SK computed from the previous
step, users can run Decrypt( ˆ
CT , SK) subroutine to reveal
the original shared object O. Below, we only describe
the two new algorithms in our construction 2, namely,
305305305
Perturb and Reconstruct, because the CP-ABE algorithms
Setup, Encrypt, KeyGen and Decrypt are used without
any changes. Moreover, DisplayPuzzle, AnswerPuzzle and
Verify operate in a similar fashion as the ﬁrst construction.
• Perturb (τ): It takes as input a monotonic tree τ of
height 1 with N leaf nodes, and each leaf node con-
taining one question attribute qi and the corresponding
answer attribute ai. It replaces the ai in each leaf node
with its cryptographically secure hash value H(ai). The
(cid:3) is sent to SP and embedded
resulting perturbed tree τ
(cid:3) which is sent to the DH.
in cipher text CT
(cid:3),
(cid:3)): On receiving the perturbed tree τ
this algorithm (partially) reconstructs τ by correctly
replacing at least k H(ai)s with their corresponding
(cid:3) in cipher
ai. This reconstructed tree ˆτ then replaces τ
text CT
(cid:3), which can then be used for decryption.
• Reconstruct (τ
VI. SECURITY ANALYSIS
In this section, we analyze our constructions under semi-
honest and malicious adversarial scenarios. As the two con-
structions are similar, except the secret key reconstruction
and encryption/decryption part, we initially focus only on
construction 1. Later, we outline major differences from the
security perspective with construction 2.
A. Adversarial Service Provider
For a puzzle ZO, ﬁrst let us consider the semi-honest case
where SP honestly executes the protocol, but wants to reveal
the object O. As SP knows U RLO, she can download the
encrypted object OKO from the storage service DH. If the
SP knows the context CO, i.e., knows at least ζO = k
answers to the puzzle, she like any other user in RO can
reconstruct the encryption key KO and reveal the object O.
But if SP does not know the context, she will be unable
to reconstruct the key KO (and thus unable to reveal the
object O) due to the information-theoretic security of the
Shamir’s secret sharing scheme. Due to the cryptographic
security of the hash function H, the SP is unable to recover
the individual answers ai from the hash values H(ai, KZO
)
(both, the ones provided by the sharer in ZO and the replies
received from the receivers) and KZO. Moreover, as the
are randomly generated, and unknown to the
shares d
SP , she is unable to recover the individual answers ai from
the blinded values ai ⊕ d
. The SP does not receive
any other information, either directly or indirectly due to
protocol execution, from the participants which could be
used to decrypt the encrypted object OKO.
MO
i
MO
i
Next,
let us consider a few scenarios where the SP
behaves maliciously. As O is not located on the SP , she
cannot remove it. But, she can modify U RLO in ZO to
cause a denial of service (DOS). Such DOS attacks can be
prevented by signing the U RLO in ZO with the sharer’s
private key, which can be veriﬁed by the recipients before
downloading the encrypted object OKO. The SP can also
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:24:09 UTC from IEEE Xplore.  Restrictions apply. 
modify the questions qi and the puzzle-speciﬁc key KZO
resulting in a denial of service. For example, modifying KZO
will just change the hash values H(ai, KZO
) provided by the
receivers, and will give no advantage to the SP in recovering
ai from the corresponding hash values. Such unauthorized
modiﬁcations by the SP can be overcome by including the
sharer’s signature for each of these components within ZO.
B. Adversarial Storage Service
Similar to the SP , the DH cannot recover the object O
from the encrypted object OKO without the secret encryption
key KO (or the object-speciﬁc secret MO). Moreover, the
security of Shamir’s secret sharing scheme will prevent the
DH from reconstructing the secret MO, and thus the en-
cryption key KO, without the knowledge of the context CO.
However, a malicious DH can tamper, remove or modify
OKO resulting in a DOS attack. Unauthorized modiﬁcation
of the encrypted object can be detected by means of a
signature (generated using the sharer’s private key) that can
be stored within the puzzle ZO.
C. Collusion Attacks
First, let us consider collusion between entities who do
not know the context (e.g., SP , DH and users in ST − RO)
and those who know it (e.g., users in RO). In this case, those
who know the context CO (at least ζO correct answers), the
encryption key KO or the decrypted object O can trivially
share these with others through a covert communication
channel. Such a form of collusion is extremely difﬁcult to
protect against. Sharers can periodically modify the puzzle
ZO and/or the encryption key KO (by re-encrypting the
object) to partially protect against such collusion attacks.
Next, let us consider collusion between users who do not
know the context CO (i.e., users in ST −RO) and a malicious
service provider SP who also does not know the context.
More speciﬁcally, each user in ST − RO may not know the
context CO completely, but they may partially know it, i.e.,
less than ζO correct answers. Then, a malicious SP can
collude with a set of these users in ST − RO and let them
know through a covert channel the responses that veriﬁed
correctly (despite the fact that each user would have less
than ζO correct responses). On receiving the veriﬁcation,
this set of users could collaboratively determine a list of at
least ζO correct answers, which can be then used to retrieve
the object-speciﬁc secret MO, and thus,
the decryption
key KO. We assume a semi-honest SP that follows the
protocol truthfully, and thus, our scheme is not secure against
this extremely strong collusion scenario. Nevertheless, our
scheme is secure against collusion among users in ST −RO,
provided the service provider SP honestly executes the
protocol. Our construction is also secure against collusion
between SP and DH, provided they collectively do not
know the context CO and they do not collude with any users.
The above analyses for non-colluding SP and DH also
holds for construction 2, especially in the semi-honest case.
As the DH and SP only possess the perturbed access
(cid:3), the security of the cryptographic hash function will
tree τ
prevent efﬁcient reconstruction of the original access tree
τ without the knowledge of the context CO. Moreover, we
rely on the security guarantee of CP-ABE [19], which will
prevent correct construction of the private key SK, and
thus decryption of the ciphertext CT , without knowledge
of the context CO. Both SP and DH can act maliciously
and achieve denial of service by manipulating the perturbed
(cid:3), public key P K, master key M K and the perturbed
tree τ
(cid:3). Nevertheless, DOS attacks are beyond the
ciphertext CT
scope of the current work. In the case when SP colludes
with users in ST −RO, Construction 2 suffers from the same
weakness as construction 1. However, similar to construction
1, it is secure against collusion between the SP and the DH,
provided they both collectively do not know the context.
VII. IMPLEMENTATION
In this section, we outline implementation details of our
constructions. We have implemented both constructions as
third-party Facebook applications hosted on Amazon EC2
[20]. It should be noted that for demonstration purposes our
application is hosted on a third-party provider such as Ama-
zon EC2, rather than on an actual OSN provider. However,
such an access control service can also be easily adopted
(and hosted) by a popular OSN provider such as Facebook.
Until
then, existing Facebook users can take advantage
of the proposed access control mechanisms by means of
our publicly-available third-party application which can be
hosted on a third-party provider of their choice.
Common features: Both implementations are interfaced
with a Facebook canvas application. The sharer is required
to grant permission to the application in order to post objects
on Facebook. For simplicity, currently in our implementa-
tions the service provider SP and the storage service DH
are located on the same server, but it can be easily extended
to have both of them on physically separate servers. In order
to provide conﬁdentiality and authentication, all communi-
cations between users and our application on Amazon EC2
is carried over HTTPS.