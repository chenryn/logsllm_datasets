User: I make heavy use of virtualenv to isolate my development environments from the system-wide Python installation. Typical work-flow for using a virtualenv involves running source /path/to/virtualenv/bin/activate to set the environment variables that Python requires to execute an isolated runtime. Making sure my Python executables use the current active virtualenv is as simple as setting the shebang to #!/usr/bin/env python
Lately, though, I've been writing some C code that embeds the Python runtime. What I can't seem to figure out is how to get the embedded runtime to use the current active virtualenv. Anybody got a good example to share?
Assistant: Seems to be not an answer, but still might be useful in other contexts.

Have you tried running bin/activate_this.py from your Python virtualenv? The comment in this file of my virtualenv reads:

By using execfile(this_file, dict(__file__=this_file)) you will
  activate this virtualenv environment.
This can be used when you must use an existing Python interpreter, not
  the virtualenv bin/python

You should achieve the desired result if you execute the runtime equivalent of the above code.