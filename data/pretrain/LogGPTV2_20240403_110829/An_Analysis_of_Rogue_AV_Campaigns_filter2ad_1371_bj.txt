etext
Beginning of Domain 0’s kernel code
End of Domain 0’s kernel code
Kernel’s Interrupt Descriptor Table
kernel’s System Call Table
Beginning of kernel code
End of kernel code
Kernel’s Interrupt Descriptor Table
Windows PCR→idt
Xen
Dom0
Linux
KiServiceTable Kernel’s System Call Table
6.2 Detection
To verify whether HyperCheck can detect attacks against the hypervisor, we imple-
mented DMA attacks [40] on Xen hypervisor and then tested HyperCheck-I’s response
on testbed 1. We ported the HDD DMA attacks to modify the Xen hypervisor and
HyperCheck: A Hardware-Assisted Integrity Monitor
171
Domain 0. There are four attacks to Xen hypervisor and two attacks to Domain 0. We
also modiﬁed the pcnet network card in QEMU to perform the DMA attack from the
hardware directly. The modiﬁed pcnet NIC is used to attack Linux and Windows operat-
ing systems. There are three attacks to Linux 2.6.18 kernel and two attacks to Windows
XP SP2 kernel, each targeting one control table or the code. They can modify the IDT
table and other tables of the kernel. HyperCheck-I correctly detected all these attacks
by reporting the contents of memory in the target machine are changed.
6.3 Monitoring Overhead
The primary source of overhead is coming from the transmission of the memory con-
tents to the external monitoring machine. In addition, to ensure the memory contents
have not been tampered with, HyperCheck needs to remain in SMM and wait until
the NIC ﬁnished. Otherwise, the attacker may control the OS and modify the memory
contents or the transmit descriptor in the main memory while transmitting. Initially,
we measured the time to transmit a single packet varying its payload size. The packet
ﬂushed out when the Transmit Descriptor Head register (TDH) is equal to Transmit
Descriptor Tail register (TDT). We calculated the elapsed time using the rdtsc in-
struction to read the time stamp before and after each operation. As expected, the time
linearly increases as the size of the packet increases.
Next, we measured the bandwidth by using different packet sizes to send out a ﬁxed
amount of data: 2881 KB memory (the size of Xen code plus Domain 0 code). The result
is depicted in the Figure 3: when the packet size is less than 7 KB, the time required
to send the data similar to a constant value. When the packet size becomes 8KB, the
overhead increases dramatically and it remains high. The reason is that the internal NIC
transfer FIFO is 16KB. Therefore, when the packet size becomes 8KB or larger, the
NIC cannot hold two packets in the FIFO at the same time and this introduces delay.
Since HyperCheck can be used to monitor different sized hypervisors and OSes,
we measured the time required to send different amount of data and the results are in
Figure 4. In this set of experiments, we use 7KB as the packet size since it introduced
shortest delay in our testbed. We can see that the time also nearly linearly increased with
Fig. 3. Network overhead for variable
packet size
Fig. 4. Network overhead for variable data size
172
J. Wang, A. Stavrou, and A. Ghosh
Fig. 5. Overhead of the operations in SMM
1000
800
600
400
200
0
)
s
e
l
c
y
c
(cid:3)
u
p
c
(cid:3)
n
o
i
l
l
i
M
(
e
m
T
i
1
2
3
Data(cid:3)size(MB)
4
Fig. 6. Overhead of the XOR data in SMM
the amount of memory. In addition to PCI scanning, HyperCheck also triggers SMI
interrupt every one second and checks the registers in SMM. To measure the overall
overhead of entering SMM, executing SMM code and return from SMM, we wrote a
kernel module running in Domain 0.
The tests were conducted on testbed 2 (HyperCheck-II) and each test is repeated
many times. Here we present the average of the results. The overall time is composed
of four parts. First, the time taken to XOR the data with the secret key. Second, the time
to access the memory. Third, the time to conﬁgure the card and switch from protected
mode to SMM and back. Finally, the time to send out the data through the NIC. To ﬁnd
out how much time was spent in each part, we wrote two more test programs. One is a
dummy SMM code which does nothing but just returns from SMM to CPU protected
mode. The other one does not access the main memory but just use the registers to sim-
ulate the veriﬁcation of IDTR and CR3. Then we tested the running time for these two
HyperCheck: A Hardware-Assisted Integrity Monitor
173
Table 2. Time overhead of HyperCheck and other methods
Execution Time(ms)
TPM
1022
>1022
> 972
>1022
>1022
Size(MB) HC SMM
31 203
40 274
28 183
36 244
33 223
2.0
2.7
1.8
2.4
2.2
Code base
Linux
Xen+Dom0
Window XP
Hyper-V
VMWare ESXi
SMM codes. From the ﬁrst one, we can get the time for switching between protected
mode and SMM and then switch back. From the second one, we can get the time for
the CPU computation part of the veriﬁcation of IDTR and CR3.
The results are presented in Figure 5. The most of the time is spent in sending the
data, which is 73 Million cycles. Next is the time to accessing the main memory : 5.28
Million cycles. Others took a very small portion. The total time is 80 Million cycles.
Since the CPU of the testbed 2 is 2 GHz. Therefore, the SMM code consumes 4.0% of
the CPU cycles, and takes 40 ms.
We also measured the code size of our SMM code, which is just about 300 Bytes.
On the monitor machine, the overhead for reading the memory contents and comparing
them with previous state took 230 ms, including 49 ms for only comparing the data.
Note it is possible to reduce the time for reading the memory contents from the ﬁle, if
we use pipe or other memory sharing based communication between tcpdump and the
perl script.
In contrast, previous research suggests using SMM to read the memory and hashing
it on the target machine. We call this SMM only method. To compare our approach with
SMM only method, we wrote a program to XOR the memory in SMM with different
sizes. The result is shown in Figure 6.
The time for XOR data is linearly increased with the amount of data and typically
uses hundreds of Million CPU cycles. Also, we compare our approach with a TPM based
approach [23] which can also be used to monitor the integrity of the kernels. The result
is shown in the Table 2. HC stands for HyperCheck. We can see that the overhead of
HyperCheck is one magnitude lower than SMM-only and TPM based method. For SMM-
only, it has to hash the entire data to check its integrity, while HyperCheck only hashes
Table 3. Comparison between HyperCheck and other methods
Memory Registers Overhead
HyperCheck
SMM
PCI
TPM
x
x
x
x
x
x
x
Low
High
Low
High
174
J. Wang, A. Stavrou, and A. Ghosh
a random portion of the data and then sends the entire data out using an Ethernet card.
For TPM based method, the most expensive operation is TPM quote, which alone took
972 ms. Note that the test machine of TPM based method is better than our testbed 2. An
overall comparison between HyperCheck and other methods is shown in Table 3. We can
see that only HyperCheck can monitor both memory and registers with low overhead.
7 Security Analysis and Limitations
HyperCheck aims to detect the modiﬁcations to the control data and the codes of the
hypervisors or OS kernels. These kinds of attacks are realistic and have a signiﬁcant
impact on the system. HyperCheck can detect these attacks by using an Ethernet card
to read the physical memory via DMA and then analyze it. For example, if the attackers
control the hypervisor and make some modiﬁcations, HyperCheck can detect that change
by reading the physical memory directly and compare it with previous pristine value.
In addition, HyperCheck also uses SMM to monitor CPU registers, which provides
further protection. Some previous research works only rely on the symbol table in the
symbol ﬁle to ﬁnd the physical address of the kernel code and data. Nonetheless, there
is no binding between the addresses in the symbol table and the actual physical address
of these symbols [22]. For example, one potential attack is to modify the IDTR register
of CPU to point to another address. Then the malware can modify the new IDT table,
keeping the old one untouched. Another potential attack is to keep the IDTR register
untouched, but modify the page tables of the kernel so that the virtual address in the
IDTR will actually point to a different physical address. HyperCheck can detect these
cases by checking CPU registers in SMM. In SMM, HyperCheck read the content of
IDTR and CR3 registers used by the operating system. IDTR should never change after
booting. If it changed, SMM will send a warning through the Ethernet card to the mon-
itor machine. From CR3, HyperCheck can ﬁnd the actual physical address given the
virtual ones. The offset between the virtual addresses and the physical addresses should
be static. If some offsets changed, HyperCheck will generate a warning too. Moreover,
PCI devices including the Ethernet card alone can be cheated to get a different view of
the physical memory [32]. With SMM, we could avoid this problem by checking the
corresponding settings in SMM.
The network card driver of HyperCheck is put into the SMM code to avoid malicious
modiﬁcations. Also, to prevent replay attacks, we use a key to hash a portion of the data
randomly and then send them out to the analysis module. Since the key is private and
locked in the SMRAM, the attacker cannot get it and cannot generate the same hash.
Attacker can still try to disable the Ethernet card or the SMM code, but we can detect it
through an out-of-band monitor, such as Dell remote access controller.
In addition, the attacker may try to launch a fake reboot attack to get a private key
from the monitor machine. It can mimic the SMM NIC driver and send a request for
a new key. For this event, we have two options: ﬁrst, we could use Trusted Platform
Module (TPM) based remote attestation to verify the running state of the target machine
[23]. We only need to verify whether the OS has been started or not. If it is already
started, the monitor machine should refuse to send the key. If the target machine does
not have a TPM, the second method is to send another reliable reboot signal to the target
machine when it asks for the key to make sure the SMM code is running.
HyperCheck: A Hardware-Assisted Integrity Monitor
175
However, HyperCheck also has its limitations. It cannot detect the changes which
happen between the two consecutive memory and register scans. Although the time
window between the scans is just one second in the current prototype, malware can still
potentially make some changes in the time interval and restore it before the next scan.
To address this problem, we could randomize the scan interval to increase the chances
for detection. In addition, we could use high bandwidth devices, such as PCI Express,
which is able to reach 5GT/s transfer rate [29], to minimize the scan interval.
In addition, if the memory mappings of the hypervisor do not hold the three proper-
ties (linear mapping, persistence and static nature), the current version of HyperCheck
cannot deal with it. We will try to address these problems in the future.
8 Conclusions
In this paper, we introduced HyperCheck, a hardware-assisted tamper detection frame-
work. Hypercheck is designed to protect the code integrity of software running on com-
modity hardware. This includes VMMs and Operating Systems. To achieve that, we
rely on the CPU System Managed Mode (SMM) to securely generate and transmit the
full state of the protected machine to an external server. HyperCheck does not rely on
any software running on the target machine beyond BIOS. Moreover, HyperCheck is
robust against attacks that aim to disable or block its operation.
To demonstrate the feasibility of our approach, we implemented two prototypes one
using QEMU and another one using an Ethernet card on a commodity x86 machine.
Our experimental results indicate that we can successfully identify alterations of the
control data and the code on many existing systems. More speciﬁcally, we tested our
approach in part of the Xen hypervisor, the Domain 0 in Xen, and the control structures
of other operating systems, such as Linux and Windows. HyperCheck operation is rel-
atively lightweight: it can produce and communicate a scan of the state of the protected
software in less than 40ms.
Acknowledgements
We would like to thank the CSIS students Nelson Nazzicari, Zhaohui Wang, Quan
Jia, and MeiXing Le, for their comments on our early draft. Moreover, Spyros Pana-
giotopoulos helped us with the DMA attack code. We also thank the anonymous RAID
reviewers for their constructive comments. This material was supported in part by
DARPA contract FA8650-09-C-7956, AFOSR grant FA9550-07-1-0527, and NSF grant
CNS-TC 0915291.
References
[1] Adamyse, K.: Handling interrupt descriptor table for fun and proﬁt. Phrack 59 (2002)
[2] Baliga, A., Ganapathy, V., Iftode, L.: Automatic inference and enforcement of kernel data
structure invariants. In: ACSAC 2008: Proceedings of the 2008 Annual Computer Security
Applications Conference, Washington, DC, USA, pp. 77–86. IEEE Computer Society, Los
Alamitos (2008)
176
J. Wang, A. Stavrou, and A. Ghosh
[3] Bellard, F.: QEMU, a fast and portable dynamic translator. In: Proceedings of the USENIX
Annual Technical Conference, FREENIX Track, pp. 41–46 (2005)
[4] Bovet, D., Cesati, M.: Understanding the Linux kernel, 3rd edn. O’Reilly Media, Sebastopol
(2005)
[5] BSDaemon, coideloko, and D0nAnd0n. System Management Mode Hack: Using SMM for
“Other Purpose”. Phrack Magazine (2008)
[6] Bulygin, Y., Samyde, D.: Chipset based approach to detect virtualization malware a.k.a.
DeepWatch. Blackhat USA (2008)
[7] Burdach, M.: Digital forensics of the physical memory. Warsaw University (2005)
[8] Carrier, B.D., Grand, J.: A hardware-based memory acquisition procedure for digital inves-
tigations. Digital Investigation 1(1), 50–60 (2004)
[9] Chisnall, D.: The deﬁnitive guide to the Xen hypervisor. Prentice Hall Press, Upper Saddle
River (2007)
[10] G. Coker. Xen security modules (xsm). Xen Summit (2006)
[11] Dragovic, B., Fraser, K., Hand, S., Harris, T., Ho, A., Pratt, I., Warﬁeld, A., Barham, P.,
Neugebauer, R.: Xen and the art of virtualization. In: Proceedings of the ACM Symposium
on Operating Systems Principles (2003)
[12] Duﬂot, L., Etiemble, D., Grumelard, O.: Using CPU System Management Mode to Circum-
vent Operating System Security Functions. In: Proceedings of the 7th CanSecWest Confer-
ence, Citeseer (2001)
[13] Duﬂot, L., Etiemble, D., Grumelard, O.: Security issues related to pentium system manage-
ment mode. In: Cansecwest Security Conference Core 2006 (2006)
[14] Duﬂot, L., Levillain, O., Morin, B., Grumelard, O.: Getting into the SMRAM: SMM
Reloaded. In: CanSecWest, Vancouver, Canada (2009)
[15] Embleton, S., Sparks, S., Zou, C.: SMM rootkits: a new breed of OS independent malware.
In: Proceedings of the 4th International Conference on Security and Privacy in Communi-
cation Netowrks, p. 11. ACM, New York (2008)
[16] Garﬁnkel, T., Rosenblum, M.: A virtual machine introspection based architecture for intru-
sion detection. In: Proc. Network and Distributed Systems Security Symposium, pp. 191–
206 (2003)
[17] Hewlett-Packard, Intel, Microsoft, Phoenix, and Toshiba. ACPI,
[18] Hiremane, R.:
http://www.acpi.info/
Technology c(cid:4) Intel Magazine 4(10) (2007)
Intel R(cid:4) Virtualization Technology for Directed I/O (Intel R(cid:4) VT-d).
sional, Reading (2005)
[19] Hoglund, G., Butler, J.: Rootkits: Subverting the Windows Kernel. Addison-Wesley Profes-
[20] Intel. Intel R(cid:4) 64 and ia-32 architectures software developer’s manual volume 1
[21] Jiang, X., Wang, X., Xu, D.: Stealthy malware detection through vmm-based out-of-the-box
semantic view reconstruction. In: Proceedings of the 14th ACM Conference on Computer
and Communications Security, p. 138. ACM, New York (2007)
[22] Litty, L., Lagar-Cavilla, H.A., Lie, D.: Hypervisor support for identifying covertly execut-
ing binaries. In: SS 2008: Proceedings of the 17th Conference on Security Symposium,
Berkeley, CA, USA, pp. 243–258. USENIX Association (2008)
[23] McCune, J., Parno, B., Perrig, A., Reiter, M., Isozaki, H.: Flicker: An execution infrastruc-
ture for TCB minimization. In: Proceedings of the 3rd ACM SIGOPS/EuroSys European
Conference on Computer Systems 2008, pp. 315–328. ACM, New York (2008)
[24] McCune, J.M., Li, Y., Qu, N., Zhou, Z., Datta, A., Gligor, V., Perrig, A.: TrustVisor: Efﬁ-
cient TCB reduction and attestation. In: Proceedings of the IEEE Symposium on Security
and Privacy (May 2010)
[25] MITRE. Cve-2007-4993
HyperCheck: A Hardware-Assisted Integrity Monitor
177
[26] Murray, D., Milos, G., Hand, S.: Improving Xen security through disaggregation. In: Pro-
ceedings of the Fourth ACM SIGPLAN/SIGOPS International Conference on Virtual Exe-
cution Environments, pp. 151–160. ACM, New York (2008)
[27] National Institute of Standards, NIST. National vulnerability database,
http://nvd.nist.gov
[28] Payne, B., de Carbone, M., Lee, W.: Secure and ﬂexible monitoring of virtual machines.
In: Twenty-Third Annual Computer Security Applications Conference, ACSAC 2007, pp.
385–397 (December 2007)
[29] PCI-SIG. PCI Express 2.0 Frequently Asked Questions
[30] Petroni Jr., N.L., Fraser, T., Molina, J., Arbaugh, W.A.: Copilot - a coprocessor-based kernel
runtime integrity monitor. In: SSYM 2004: Proceedings of the 13th Conference on USENIX
Security Symposium, Berkeley, CA, USA, p. 13. USENIX Association (2004)
[31] Riley, R., Jiang, X., Xu, D.: Guest-transparent prevention of kernel rootkits with vmm-
based memory shadowing. In: Lippmann, R., Kirda, E., Trachtenberg, A. (eds.) RAID 2008.
LNCS, vol. 5230, pp. 1–20. Springer, Heidelberg (2008)
[32] Rutkowska, J.: Beyond the CPU: Defeating hardware based RAM acquisition. In: Proceed-
ings of BlackHat DC 2007 (2007)
[33] Rutkowska, J., Wojtczuk, R.: Preventing and detecting Xen hypervisor subversions. Black-
hat Brieﬁngs USA (2008)
[34] Sailer, R., Valdez, E., Jaeger, T., Perez, R., Van Doorn, L., Grifﬁn, J., Berger, S.: sHype:
Secure hypervisor approach to trusted virtualized systems. IBM Research Report RC23511
(2005)
[35] Schreiber, S.: Undocumented Windows 2000 secrets: a programmer’s cookbook. Addison-