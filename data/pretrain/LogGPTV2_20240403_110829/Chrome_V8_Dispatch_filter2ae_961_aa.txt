# 连载《Chrome V8 原理讲解》第十一篇 字节码调度 Dispatch机制
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 1 摘要
Dispatch（调度）负责字节码的调度，每条字节码执行完后由Dispatch负责调度下一条字节码执行，相当于寄存器EIP++、执行下一条字节码。Dispatch是V8维护的全局指令调度机制，它由调度表（dispatch
table）、一个物理寄存器和调度函数`Dispatch()`组成，每条字节码处理程序（Bytecode
handler）执行结束后不执行下一条字节码，而是执行函数`Dispatch()`，由它负责调用下一条字节码。本文讲解Dispatch机制的源码、数据结构和`Dispatch()`调度方法。
本文内容组织方式：讲解Dispatch机制具体实现（章节2）；`Dispatch()`调度下一条字节码的源码分析（章节3）。
## 2 Dispatch机制
字节码处理程序的地址存储在`Dispatch table`中，使用物理寄存器维护。`Dispatch
table`是指针数组，数组元素是`Code`类型指针，指向一个字节码处理程序。
    1.  class Code : public HeapObject {
    2.   public:
    3.    NEVER_READ_ONLY_SPACE
    4.    using Flags = uint32_t;
    5.  #define CODE_KIND_LIST(V)   \
    6.    V(OPTIMIZED_FUNCTION)     \
    7.    V(BYTECODE_HANDLER)       \
    8.    V(STUB)                   \
    9.    V(BUILTIN)                \
    10.   V(REGEXP)                 \
    11.    V(WASM_FUNCTION)          \
    12.    V(WASM_TO_CAPI_FUNCTION)  \
    13.    V(WASM_TO_JS_FUNCTION)    \
    14.    V(JS_TO_WASM_FUNCTION)    \
    15.    V(JS_TO_JS_FUNCTION)      \
    16.    V(WASM_INTERPRETER_ENTRY) \
    17.    V(C_WASM_ENTRY)
    18.    enum Kind {
    19.  #define DEFINE_CODE_KIND_ENUM(name) name,
    20.      CODE_KIND_LIST(DEFINE_CODE_KIND_ENUM)
    21.  #undef DEFINE_CODE_KIND_ENUM
    22.          NUMBER_OF_KINDS
    23.    };
    24.    static const char* Kind2String(Kind kind);
    25.  #ifdef ENABLE_DISASSEMBLER
    26.    const char* GetName(Isolate* isolate) const;
    27.    V8_EXPORT_PRIVATE void Disassemble(const char* name, std::ostream& os,
    28.                                       Address current_pc = kNullAddress);
    29.  #endif
    30.  //.................省略很多代码....................
    31.  //.................省略很多代码....................
    32.  };
**注意：** 在Isolate中，还有另一个数据表，用于管理所有Builtin，表项也是`Code`类型。本文的`Dispatch
table`数据表，只包含`Code`类型为`BYTECODE_HANDLER`的Builtin地址。  
字节码调度由`Builtin`方法实现，其外层的入口函数为`BuildWithMacroAssembler()`，代码如下：
    1.  Code BuildWithMacroAssembler(Isolate* isolate, int32_t builtin_index,
    2.                               MacroAssemblerGenerator generator,
    3.                               const char* s_name) {
    4.    HandleScope scope(isolate);
    5.    // Canonicalize handles, so that we can share constant pool entries pointing
    6.    // to code targets without dereferencing their handles.
    7.    CanonicalHandleScope canonical(isolate);
    8.    constexpr int kBufferSize = 32 * KB;
    9.    byte buffer[kBufferSize];
    10.   MacroAssembler masm(isolate, BuiltinAssemblerOptions(isolate, builtin_index),
    11.                        CodeObjectRequired::kYes,
    12.                        ExternalAssemblerBuffer(buffer, kBufferSize));
    13.    masm.set_builtin_index(builtin_index);
    14.    DCHECK(!masm.has_frame());
    15.    generator(&masm);
    16.    int handler_table_offset = 0;
    17.    // JSEntry builtins are a special case and need to generate a handler table.
    18.    DCHECK_EQ(Builtins::KindOf(Builtins::kJSEntry), Builtins::ASM);
    19.    DCHECK_EQ(Builtins::KindOf(Builtins::kJSConstructEntry), Builtins::ASM);
    20.    DCHECK_EQ(Builtins::KindOf(Builtins::kJSRunMicrotasksEntry), Builtins::ASM);
    21.    if (Builtins::IsJSEntryVariant(builtin_index)) {
    22.      handler_table_offset = HandlerTable::EmitReturnTableStart(&masm);
    23.      HandlerTable::EmitReturnEntry(
    24.          &masm, 0, isolate->builtins()->js_entry_handler_offset());
    25.    }
    26.    //.....................................................
    27.    //................省略很多.............................
    28.  }
`BuildWithMacroAssembler()`的分析方法参见第九篇文章，直接给出它的重要参数：`builtin_index`值为65，是Builtin编号，`generator`为`Generate_InterpreterEnterBytecodeDispatch`，下面是源码：
    1.  static void Generate_InterpreterEnterBytecode(MacroAssembler* masm) {
    2.    // Set the return address to the correct point in the interpreter entry
    3.    // trampoline.
    4.    Label builtin_trampoline, trampoline_loaded;
    5.    Smi interpreter_entry_return_pc_offset(
    6.        masm->isolate()->heap()->interpreter_entry_return_pc_offset());
    7.    DCHECK_NE(interpreter_entry_return_pc_offset, Smi::kZero);
    8.    // If the SFI function_data is an InterpreterData, the function will have a
    9.    // custom copy of the interpreter entry trampoline for profiling. If so,
    10.   // get the custom trampoline, otherwise grab the entry address of the global
    11.    // trampoline.
    12.    __ movq(rbx, Operand(rbp, StandardFrameConstants::kFunctionOffset));
    13.    __ LoadTaggedPointerField(
    14.        rbx, FieldOperand(rbx, JSFunction::kSharedFunctionInfoOffset));
    15.    __ LoadTaggedPointerField(
    16.        rbx, FieldOperand(rbx, SharedFunctionInfo::kFunctionDataOffset));
    17.    __ CmpObjectType(rbx, INTERPRETER_DATA_TYPE, kScratchRegister);
    18.    __ j(not_equal, &builtin_trampoline, Label::kNear);
    19.    __ movq(rbx,
    20.            FieldOperand(rbx, InterpreterData::kInterpreterTrampolineOffset));
    21.    __ addq(rbx, Immediate(Code::kHeaderSize - kHeapObjectTag));
    22.    __ jmp(&trampoline_loaded, Label::kNear);
    23.    __ bind(&builtin_trampoline);
    24.    // TODO(jgruber): Replace this by a lookup in the builtin entry table.
    25.    __ movq(rbx,
    26.            __ ExternalReferenceAsOperand(
    27.                ExternalReference::
    28.                    address_of_interpreter_entry_trampoline_instruction_start(
    29.                        masm->isolate()),
    30.                kScratchRegister));
    31.    __ bind(&trampoline_loaded);
    32.    __ addq(rbx, Immediate(interpreter_entry_return_pc_offset.value()));
    33.    __ Push(rbx);
    34.    // Initialize dispatch table register.
    35.    __ Move(
    36.        kInterpreterDispatchTableRegister,
    37.        ExternalReference::interpreter_dispatch_table_address(masm->isolate()));
    38.    // Get the bytecode array pointer from the frame.
    39.    __ movq(kInterpreterBytecodeArrayRegister,
    40.            Operand(rbp, InterpreterFrameConstants::kBytecodeArrayFromFp));
    41.    if (FLAG_debug_code) {
    42.      // Check function data field is actually a BytecodeArray object.
    43.      __ AssertNotSmi(kInterpreterBytecodeArrayRegister);
    44.      __ CmpObjectType(kInterpreterBytecodeArrayRegister, BYTECODE_ARRAY_TYPE,
    45.                       rbx);
    46.      __ Assert(
    47.          equal,
    48.          AbortReason::kFunctionDataShouldBeBytecodeArrayOnInterpreterEntry);
    49.    }
    50.    // Get the target bytecode offset from the frame.
    51.    __ movq(kInterpreterBytecodeOffsetRegister,
    52.            Operand(rbp, InterpreterFrameConstants::kBytecodeOffsetFromFp));
    53.    __ SmiUntag(kInterpreterBytecodeOffsetRegister,
    54.                kInterpreterBytecodeOffsetRegister);
    55.    // Dispatch to the target bytecode.
    56.    __ movzxbq(r11, Operand(kInterpreterBytecodeArrayRegister,
    57.                            kInterpreterBytecodeOffsetRegister, times_1, 0));
    58.    __ movq(kJavaScriptCallCodeStartRegister,
    59.            Operand(kInterpreterDispatchTableRegister, r11,
    60.                    times_system_pointer_size, 0));
    61.    __ jmp(kJavaScriptCallCodeStartRegister);
    62.  }
    63.  //================================分隔线=========================
    64.  //================================分隔线=========================
    65.  //================================分隔线=========================
    66.  void Builtins::Generate_InterpreterEnterBytecodeDispatch(MacroAssembler* masm) {
    67.    Generate_InterpreterEnterBytecode(masm);
    68.  }
上述代码由两部分组成，`Generate_InterpreterEnterBytecodeDispatch()`是字节码调度程序的入口，`Generate_InterpreterEnterBytecode()`是调度的具体实现，下面给出几点重要概念：
**（1）**
`Generate_InterpreterEnterBytecodeDispatch()`是`Builtin`方法。它的index为65号（V8版本不同，index可能略有不同）。
**（2）** V8使用物理寄存器保存`Dispatch
table`地址，寄存器名字为`kInterpreterDispatchTableRegister`，在实际运行时映射到物理寄存器。使用物理寄存器可以避免指令调度时的入栈出栈，简化指令设计，提高效率。
下面解释代码的重要语句：
**（1）** 代码35行把`dispatch
table`地址移动到`kInterpreterDispatchTableRegister`寄存器，`ExternalReference::interpreter_dispatch_table_address(masm->isolate())`负责从`isolate`中取出基址，`interpreter_dispatch_table_address`的源码如下：
    1.  ExternalReference ExternalReference::interpreter_dispatch_table_address(
    2.      Isolate* isolate) {
    3.    return ExternalReference(isolate->interpreter()->dispatch_table_address());