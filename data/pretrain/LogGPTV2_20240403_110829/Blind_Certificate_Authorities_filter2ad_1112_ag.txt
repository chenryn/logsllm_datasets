### In Cryptology

1. **Rivest, R. L., Shamir, A., and Tauman, Y. (2001).** How to leak a secret. In ASIACRYPT.
2. **Sobuno (2016).** Zkboo. <https://github.com/Sobuno/ZKBoo>.
3. **Tonicelli, R., Nascimento, A. C. A., Dowsley, R., Müller-Quade, J., Imai, H., Hanaoka, G., and Otsuka, A. (2015).** Information-theoretically secure oblivious polynomial evaluation in the commodity-based model. *Int. J. Inf. Sec.*, 14(1):73–84.
4. **Trevp (2016).** TLS Lite version 0.4.9. <https://github.com/trevp/tlslite>.
5. **Wang, X., Ranellucci, S., and Katz, J. (2017).** Authenticated garbling and efficient maliciously secure two-party computation. In ACM CCS.
6. **Wikipedia (2016).** Open mail relay. <https://en.wikipedia.org/wiki/Open_mail_relay>.
7. **Yao, A. (1986).** How to generate and exchange secrets. In 27th Annual Symposium on Foundations of Computer Science.
8. **Zhu, H. and Bao, F. (2005).** Augmented oblivious polynomial evaluation protocol and its applications. In ESORICS.

---

### APPENDIX

#### A. Using Generic MPC

We provide a preliminary analysis of the potential performance impact of using generic MPC to build our applications.

In anonymous PAOs, a naive implementation to compute the TLS record directly for a message of size 512 bytes would result in a circuit with 0.94 M+ AND gates (6,800 for one AES operation and 90,825 for one SHA-256 operation; 32 AES and 8 SHA-256 operations in total). In contrast, our protocol only performs MPC for 4 AES operations (27,200 AND gates) as opposed to 32 AES operations in generic MPC. This means that if using the same MPC technique, computing a TLS record directly would introduce more than 8x overhead compared to our protocol.

Moreover, our 2P-HMAC protocol does not require MPC at all and only transfers 512 bits of data, regardless of the input size. In contrast, state-of-the-art MPC techniques take 10 ms (9 KB data transferred) in the online phase to compute SHA-256 with 256-bit inputs from both parties in a LAN setting. HMAC requires two rounds of SHA-256 and 512-byte input in our application [46, 58].

During certificate generation, at least 6 AES and 8 SHA-256 operations are needed for reconstructing the commitment and generating the certificate hash. With a naive implementation, this process would result in a circuit of approximately 0.95 M+ AND gates. Using the technique from [58], the total data (including all phases) that needs to be sent from the prover to the verifier will exceed 460 MB, which is significantly more than the 85 MB CA proof sent in our protocol. Although this might be tolerable for the client as certificate generation is a one-time process, such overhead would place a heavier burden on the CA in practice. Note that our estimations here are simplified and may underestimate the cost of generic MPC. The actual overhead on commodity hardware will be higher.

#### B. TLS with AES-GCM

To broaden the usage of SCI, we implemented SCI atop AES-GCM, another widely-supported TLS ciphersuite that is gaining more users [45].

For higher efficiency, we allow the corrupted client to "shift" the message of the proxy. Specifically, we modify Functionality 1 and define the following "weaker" SCI functionality, allowing a corrupted client to send some message Δ to the functionality (in addition to \(M_p^t\)). The output of the server is \((M_p^t, M^* + \Delta, M_s^t)\). To formalize that the input of the proxy is taken from a high-entropy source, we let the trusted party (in case of an honest proxy) choose the input for it. The functionality is formally described in Functionality 6. In this section, when we refer to secure channel injection, we do so with respect to Functionality 6. We adopt Definition 2 similarly, and refer to it with respect to this functionality.

**Functionality 6: Weak Message Injection (parameterized with a message template: \(M_t = (|M_p^t|, |M^*|, |M_s^t|))**

- **Input:** The client holds some input prefix message \(M_p^t \in \{0, 1\}^{|M_p^t|}\). The server has no input. We assume that the message template is known to the client and the proxy.
- **Honest proxy (and corrupted client):** The proxy has no input. The functionality chooses \(M^* \in \{0, 1\}^{|M^*|}\) uniformly at random. The corrupted client inputs some \(M_p^t\) and \(\Delta \in \{0, 1\}^{|M^*|}\).
- **Corrupted proxy (and honest client):** The proxy sends some \(M^* \in \{0, 1\}^{|M^*|}\) to the functionality. The client sends some \(M_p^t \in \{0, 1\}^{|M_p^t|}\), suffix \(M_s^t \in \{0, 1\}^{|M_s^t|}\), and the functionality defines \(\Delta = 0^{|M^*|}\).
- **Output:** The server outputs \((M_p^t, M^* + \Delta, M_s^t)\) and the proxy outputs \(M^*\).

Note that this functionality is weaker than Functionality 1 but suffices for our applications. Specifically, as the client is later responsible for "revealing" the challenge \(M^*\), it can extract it from \(M^* + \Delta\) as it knows \(\Delta\).

#### 1. 2P-CTR and 2P-GMAC

**2P-CTR.** We now show how to compute a counter mode encryption over \(M_p^t || M^* || M_s^t\) given a secret key \(K\). The client holds \(K\), messages \(M_p^t = (M_1, ..., M_q)\), and \(M_s^t = (M_{q+r+1}, ..., M_t)\), while the proxy holds \(M^* = (M_{q+1}, ..., M_{q+r})\), where each \(M_i \in \{0, 1\}^n\).

The counter mode on message \(M = (M_1, ..., M_t)\) is defined as follows. IV is chosen uniformly at random from \(\{0, 1\}^{96}\), and we set the counter \(J_0 = IV || 0^{31} || 1\). We define \(inc_s(X)\) to be the function that increments the right-most \(s\) bits of the string \(X\), mod \(2^s\); the left-most \(|X| - s\) bits remain unchanged, and define \(inc_i^s(X) = inc_s(inc_{i-1}^s(X))\), with \(inc_1^s(X) = inc_s(X)\). Then, each message \(C_i = AES_K(J_i) \oplus M_i\) for \(i = 1, ..., t\).

The 2P-CTR protocol is simple. The client sends the proxy the IV together with the ciphertexts \((C_1, ..., C_q)\) corresponding to its messages. Additionally, the client computes the "key stream" for the proxy, consisting of all keys \(AES_K(J_{q+1}), ..., AES_K(J_{q+r})\). The proxy can then compute the ciphertexts \(C_{q+1}, ..., C_{q+r}\) using its own messages. The output of the proxy is all ciphertexts \((C_1, ..., C_t)\). We denote this protocol as:

\[ 2P-CTR((IV, M_p^t, M^*), M_s^t) = (((C_1, ..., C_q), (C_{q+r+1}, ..., C_t)), (C_{q+1}, ..., C_{q+r})) \]

We note that this protocol allows the client to manipulate the ciphertexts of \(M^*\) and add some \(\Delta\). However, as we will see below, this addition can be extracted, and the client knows the "shift" it adds to the proxy's message, which suffices for our applications.

**2P-GMAC.** For \(IV\), \(X = (X_1, ..., X_t)\) where each \(X_i\) is of size \(n\) bits, we define the function \(GHASH_H(X) = Y_{t+1}\), where \(Y_{t+1}\) is defined as follows. For \(i = 0\), we define \(Y_0 = 0\), and for \(i = 1, ..., t+1\), we define \(Y_i\) recursively as:

\[ Y_i = (Y_{i-1} \oplus X_i) \cdot H \]

This is equivalent to evaluating the polynomial \(p(x)\) at the point \(H\), where the polynomial is defined as \(p(x) = \sum_{i=1}^t X_i \cdot x^{t-i+1}\). The summation and multiplications are performed in \(GF(2^{128})\).

In our case, we are interested in evaluating this polynomial at the point \(H\), where the client holds \(X_p = (X_1, ..., X_q)\) and \(X_s = (X_{q+r+1}, ..., X_t)\), and the proxy holds \(X^* = (X_{q+1}, ..., X_{q+r})\). We can write the polynomial \(p(x)\) as a sum of the following three polynomials, representing the different parts:

1. \(p_p(x) = X_1 \cdot x^t + ... + X_q \cdot x^{t-q+1}\)
2. \(p^*(x) = X_{q+1} \cdot x^{t-q} + ... + X_{q+r} \cdot x^{t-q-r+1}\)
3. \(p_s(x) = X_{q+r+1} \cdot x^{t-q-r} + ... + X_t \cdot x\)

Thus, \(p(x) = p_p(x) + p^*(x) + p_s(x)\). The client knows \(p_p(\cdot)\), \(p_s(\cdot)\), and the point \(H\), whereas the proxy knows only \(p^*(\cdot)\). Therefore, we can reduce this computation to oblivious polynomial evaluation. Formally, let:

\[ F_{ObvPoly}(H, p^*) := (p^*(H), \lambda) \]

be the two-party functionality in which the client holds a point \(H\), the proxy holds a polynomial \(p^*(\cdot)\), and the client receives the evaluation of \(p^*(H)\).

Using GHASH, we define \(GMAC(K, IV, X) = GHASH_H(X) \oplus AES_K(IV || 0^{31} || 1)\), where \(H = AES_K(0^{128})\). We describe the two-party protocol that computes GMAC. The protocol 2P-GMAC (Protocol 7) is described in the \(F_{ObvPoly}\)-hybrid model, and we discuss how to implement the \(F_{ObvPoly}\) functionality after.

**Protocol 7: 2P-GMAC ((K, IV, X_p, X_s), Y^*) in the \(F_{ObvPoly}\)-hybrid model**

- **Input:** The client holds \(K\), \(IV\), and the blocks \(X_p = (X_1, ..., X_q)\), and \(X_s = (X_{q+r+1}, ..., X_t)\); the proxy holds \(X^* = (X_{q+1}, ..., X_{q+r})\), where each \(X_i \in \{0, 1\}^n\).
- **The protocol:**
  1. The proxy defines the polynomial \(p^*(x) = \sum_{j=1}^r X_{q+j} \cdot x^{r-j+1}\). It then chooses a random field element \(\alpha\) and defines \(p'(x) = p^*(x) + \alpha\).
  2. The parties invoke the functionality \(F_{ObvPoly}(H, p') = (p'(H), \lambda)\) where the client inputs the point \(H = AES_K(0^{128})\), and the proxy inputs the polynomial \(p'(x)\). The client receives the point \(p'(H) = p^*(H) + \alpha\).
  3. Using the values \(H\), \(X_1, ..., X_q\), the client computes \(p_p(H)\). Using the values \(H\), \(X_{q+r+1}, ..., X_t\), the client computes \(p_s(H)\).
  4. The client sends the proxy the tag \(T' = p_p(H) + p'(H) + p_s(H) + AES_K(IV || 0^{31} || 1) = p(H) + \alpha + AES_K(IV || 0^{31} || 1)\). The proxy removes the mask \(\alpha\) and obtains the tag \(T = p(H) + AES_K(IV || 0^{31} || 1)\).
- **Output:** The proxy outputs \(T\).

The protocol requires \(O(t)\) OTs (or exponentiations), where \(t\) is the degree of the polynomial (in our case, the number of blocks). In anonymous PAOs, the number of OTs is at most 32, which can be done efficiently. For additional oblivious polynomial evaluation protocols based on other assumptions in the malicious setting, see [29, 30, 43]. For protocols in the semi-honest settings, see [15, 36, 56, 61]. Unlike our TLS with CBC and HMAC, where the proxy must inject at least two blocks, there is no such restriction here, and we can allow the injection of a single block. In that case, the functionality \(F_{ObvPoly}\) is, in fact, oblivious linear evaluation (OLE), which can be realized using highly efficient protocols (see [26]).

**The SCI Protocol.** We are now ready to describe our solution for SCI with TLS, where the proxy wants to inject a message at some designated point into the stream of encrypted client-to-server message data. Let \(Q_1, ..., Q_u^*, ..., Q_v\) be the sequence of TLS plaintext fragments sent from the client to the server in separate record layer encryptions, with \(Q_u^*\) representing the fragment to be injected.