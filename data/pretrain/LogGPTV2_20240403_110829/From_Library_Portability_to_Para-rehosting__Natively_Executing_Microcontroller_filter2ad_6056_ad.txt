N
N
N
N
N
N
N
N
N
N
N
N
N
N
Y
Y
Late
Late
Y
Y
Partially
Y
Y
Y
Y
Y
heap3 only
Y
N
N
Conﬁg
Conﬁg
N
N
N
N
Partially
N
Partially
Partially
heap4 only
Y
N
N
N
N
Conﬁg means certain hardware feature needs to be enabled to observe the crash. Late means the
crash is not immediately observable but can be observed later. Partially means the observability
depends on the concrete context. heap4 and heap3 are FreeRTOS speciﬁc. They are two different
heap implementations.
ﬁrmware on real devices. As mentioned before, we observed
the same phenomenon. In this section, we try to conduct
experiments to better understand the bug observability gap on
Linux machines and real MCU devices.
Our approach is to feed the same test-cases that trigger
bugs on the rehosted programs to the real device. This only
applies for part 1 and 2 of the dataset because part 3 does not
need any input. For bug ID 11 and 28, any test-case can trigger
the UAF vulnerability. As shown in Table V, most bugs can be
observed immediately on the rehosted programs thanks to the
ASAN support while most bugs cannot be observed on real
devices. In that follows, we explain some interesting ﬁndings.
Div by Zero. By default, diving by zero yields zero on the
FRDM-K64F board. As a result, the board will continue exe-
cution without crashing. We later found that ARM processor
needs to explicitly enable div by zero detection by setting the
10
Conﬁguration and Control Registers (CCR). After the register
was set properly, we could observe this bug instantly.
Stack Overﬂow. On the rehosted programs, we could observe
stack overﬂow with the help of ASAN easily. On the real
board, with the default conﬁguration, the ﬁrmware will con-
tinue execution. However, this problem can be mitigated by
conﬁguring stack overﬂow detection.
it provides
For FreeRTOS,
a macro called con-
figCHECK_FOR_STACK_OVERFLOW to enable stack over-
ﬂow detection [26]. When conﬁgured to 1, the FreeRTOS
kernel will check if the processor stack pointer remains within
the valid stack space when the task is swapped out. When
conﬁgured to 2, the FreeRTOS kernel will initialize known
values at the end of the stack. When the task is swapped
out, the kernel checks whether the known values have been
corrupted. Obviously, both mechanisms cannot guarantee to
catch all stack overﬂows, and may delay the detection until
the task is swapped out.
The Mbed OS provides stack overﬂow detection via stack
stats tracking [40]. When enabled, stack overﬂow can be
observed by monitoring stack usage.
Null Pointer Dereference. On rehosted programs, we could
observe null pointer dereferences easily because accessing
memory at zero always causes a segment fault – the OS
maps the corresponding virtual pages as unpresent. On a real
board, in particular the ARM Cortex-m MCU devices, read
and write to NULL address lead to different results. This is
because address zero is typically where the ROM resides.
Therefore, reading from it is allowed while writing to it causes
an escalated hard fault. For example, when we fed the test-
case triggering CVE-2019-17210 to the real device, the real
device never crashed. However, the ﬁrmware execution had
been in a false state.
VII. COMPARISON WITH OTHER WORK
To examine the security of MCU ﬁrmware, several ap-
proaches have been discussed. We categorize them into four
classes.
2)
1) On-device Analysis: This approach requires real
devices to do the testing. It gets the most authentic
results, but is less scalable and lack visibility. It is
hard to collect execution information on a bare-metal
machine.
Full Emulation: To overcome the performance and
scalability issues on real hardware, researchers pro-
posed using a full emulator, such as QEMU,
to
emulate ﬁrmware execution. The main challenge is to
emulate different peripherals and there has been some
efforts towards this goal [25], [28]. Theoretically, this
approach achieves better visibility to the ﬁrmware
execution. Unfortunately, as far as we know, no
existing work is able to precisely support previously-
unknown devices. Therefore, at the current state, this
approach only exists in an idealistic setting.
Peripheral Forwarding: As a middle ground solu-
tion, a hybrid approach forwards peripheral accesses
to real devices and runs the ﬁrmware inside an
3)
4)
emulator [60], [43], [34]. However, performance and
scalability issues are still unsolved due to the depend-
ence on real hardware.
Semi-rehosting:
In semi-rehosting solutions like
Halucinator [16],
the main logic of the ﬁrmware
is still executed inside an emulator. However, high-
level HAL functions are identiﬁed and replaced with
rehosted handlers on the host. As such, complex
modeling of diverse peripherals is avoided.
Comparison. In Figure 4, we compare our approach (para-
rehosting) with existing work from different dimensions. Note
that a perfect full emulation solution that can precisely emulate
arbitrary MCU devices does not exist so far.
In terms of performance, even high-end MCUs run at a
lower frequency. Therefore, on-device testing could be less
efﬁcient. Moreover, parallelism is limited on real devices. To
add a system under test (SUT), a new real device must be
integrated and be coordinated with others properly. As for
peripheral forwarding, frequent rebooting of the device and
signal forwarding are both time-consuming. Emulation-based
approaches (including semi-rehosting) can run multiple SUTs
simultaneously on the host, but instruction translation incurs
unavoidable overhead. Our approach enables native testing
on the host, fully beneﬁting from the parallelism and high
performance of modern hardware.
Regarding software testability, we mean the capability to
observe the behavior of an SUT. For example, being able
to observe a crash is vital for fuzzing. As another example,
collecting the run-time execution path can aid fuzzing by
generating high-quality test-cases. To improve testability, in-
strumentation is often used. Instrumentation allows for collect-
ing more context-rich information. In fuzzing, instrumentation
tools like ASAN [50] can improve the crash identiﬁcation
capability signiﬁcantly. On a real device, it is nearly impossible
to collect ﬁrmware execution information, unless non-intrusive
hardware debugging features, such as ETM are in-place [9].
Peripheral forwarding, full emulation, and semi-rehosting all
rely on an emulator such as QEMU. With an indirection
layer, testability can be greatly improved. However, it is still
incomparable with native rehosting. Speciﬁcally, in practice,
emulation-based approaches can only extract information in
the context of the emulated machine, whereas native rehosting
enables information collection in the context of the program it-
self, e.g., by instrumentation. In our evaluation (section VI-C),
we have demonstrated how ASAN could improve the bug
ﬁnding capability. For all the bugs we identiﬁed using our tool
except one (CVE-2019-17210), if ASAN was not enabled, the
bugs became invisible.
In terms of hardware-independence, both on-device ana-
lysis and peripheral forwarding require a real device, whereas
para-rehosting and emulation-based approaches do not depend
on any real device. As such, they are more scalable.
As for code coverage, all
the approaches could cover
hardware-independent code, which is enclosed in red lines in
Figure 1. However, because para-rehosting and semi-rehosting
replace hardware-dependent code with native implementations,
they cannot ﬁnd problems with low-level hardware related code
(e.g., drivers), which is enclosed in green lines in Figure 1.
11
Figure 4: Comparison of different approaches in terms of performance, software testability, hardware independence and
covered code base.
Full emulation has the potential to cover the whole software
stack. However, P2IM [25], a representative full emulation
approach, only provides approximate emulation, which does
not sufﬁce for discovering driver bugs. On the other hand, peri-
pheral forwarding and on-device analysis can capture hardware
behaviors with high ﬁdelity and therefore can support testing
diver code.
Last but not least, due to the nature of cross-compilation
and the need for instrumentation, our approach requires the
source code, while others can work directly on the binary. As
such, para-rehosting is most suitable for chip vendors or third-
party MCU OS vendors to do in-house testing, rather than for
hackers or researchers to ﬁnd bugs in binaries. Note that even
if these vendors have access to the source code, they often lack
an efﬁcient dynamic testing tool in their arsenal (e.g., ASAN
for MCU code). Our tool bridges this gap.
VIII. RELATED WORK
A. MCU OS Simulator
To create a smooth and pleasant experience for MCU
developers, some MCU OSs provide a simulator that enables
developers to write, run, and debug code without acquiring
real hardware. Typically, there are three methods adopted.
1) Web-based Simulator: Mbed OS 5 provides a cross-
compile simulator based on Emscripten [21] and Node.js. In
essence, C/C++ code is translated to WebAssembly that can
run on browsers. This approach provides the most convenience
since the developers do not need to install the simulator en-
vironment. However, it is incompatible with existing dynamic
testing tools.
2) QEMU-based Emulator: Typically, QEMU-based emu-
lators only emulate a speciﬁc board. Supporting arbitrary
boards requires more engineering efforts, which is unman-
ageable given the huge amount of MCU chips. As a result,
to allow the developers to fully test the APIs of the RTOS,
the provided emulation board should emulate a wide range
of supported peripherals, which is not the case in practice.
For example, we found that only a tiny portion of OS APIs
can be tested on the RT-Thread emulator [58]. QEMU-based
approach is compatible with (patched) AFL [46] with reduced
speed. But ASAN cannot be fully supported. This approach is
adopted by RT-Thread [58] and Zephyr [63].
3) Native Simulator: Sometimes, the MCU OS developers
provide a simulator that when compiled with the application
and the kernel, can generate a native application on the host
OS. This kind of simulator typically accommodates speciﬁc
characteristics of the target MCU OS and has certain op-
timizations to it. The introduced optimization may inﬂuence
the intended behavior of the ﬁrmware. For example, to bring
a deterministic environment for developing and debugging,
the native simulator provided by Zephyr [47] models native
execution to be inﬁnitely fast. As a result, interrupts, including
timers, cannot arbitrarily suspend a thread. The ﬁrmware
has to explicitly unmask them if they were pending. This
indicates this modeling cannot faithfully simulate the complex
interactions between the ﬁrmware and hardware. Race con-
dition issues caused by concurrency and scheduling cannot
be discovered faithfully by this approach. On the contrary,
our work faithfully simulates the non-deterministic nature of
the hardware and allows interrupts to kick in at any time.
Therefore, it can capture various real-world software issues.
Ad-hoc simulator development does not consider general-
ization and the developed simulator cannot work for another
MCU OS. For example, we found that the Zephyr simulator
has a hardware model adaptation layer that is deeply coupled
with the Zephyr drivers and thus cannot be easily re-used to
simulate other MCU OSs. Our work abstracts common be-
haviors of the hardware and correspondingly provides uniﬁed
backends to simulate the ﬁrmware execution, minimizing the
needed re-engineering effort to support other OSs. In addition,
para-rehosting not only enables the simulation of the MCUs,
but also peripherals. Finally, para-rehosting shares two key
beneﬁts with other native simulators: 1) improved execution
speed for efﬁcient testing, and 2) better instrumentation capab-
ility to disclose program issues. Native simulator is supported
by NuttX [56], FreeRTOS [4], Zephyr [47], etc.
B. Generic Firmware Emulation
In P2IM [25], the authors propose to abstract a model for
a class of MCUs based on device datasheets or processor
documentation. Then P2IM instantiates the abstract model
automatically with the ﬁrmware-speciﬁc information. As such,
P2IM is oblivious to peripheral designs and generic to ﬁrmware
implementations. Moreover, it channels inputs from the AFL to
continuously fuzz the emulated ﬁrmware. PRETENDER [28]
“learns” the interaction model between the original hard-
ware and the ﬁrmware, and automatically creates models of
12
PerformanceSoftware Testability On-devicePeripheralForwardingFull EmulationPara-rehostingHardware IndependenceCovered Code BaseOn-devicePeripheralForwardingFull EmulationPara-rehosting / Semi-rehostingSemi-rehostingperipherals. Laelaps [13] addresses a similar problem using
symbolic execution. HALucinator [16] avoids the problem of
peripheral emulation by replacing the high-level HAL function
with a host implementation. All these solutions rely QEMU
for architectural emulation and therefore suffer from lower
performance and bad testability. Since they directly test the
binary-form ﬁrmware, no source code is needed.
Conceptually, both HALucinator and para-rehosting re-
place HAL functions with native implementations. However,
the motivation and method are quite different. HALucinator
directly matches and hooks HAL functions in binaries. It is
helpful for third-party researchers to ﬁnd bugs in binaries.
To build the function matching database, it needs the HAL
source code to calculate the signatures of the underlying
HAL functions before-hand. The matching results are subject
to inaccuracy caused by collision, missing functions, etc.
Para-rehosting inherently needs the source code and relies
on some human efforts to craft glue layers. However, we
alleviate this problem by providing ready-to-use glue layers
for popular HALs. For others, common para-APIs and tem-
plates are provided. In evaluation, we have demonstrated the
tremendous performance advantage to HALucinator brought
by native rehosting. Moreover, we found that all the tested
sample in HALucinator are baremetal. It remains unknown
whether HALucinator can handle more complex OS libraries.
For example,
to support RIOT OS,
they had to manually implement the context switching as a
handler. To facilitate fuzzing, they also need to write additional
modules to accommodate testcase input, monitor execution
results, increase crash visibility (e.g., an ASAN-fashioned heap
memory tracker), etc.
the authors state that
C. Peripheral Forwarding
Researchers also propose a hybrid emulation approach
in which the real hardware is used to handle peripheral
operations. Avatar [60] and Avatar2 [42] propose a dynamic
analysis framework that executes the ﬁrmware in QEMU until
an I/O request is encountered. In this case, the request is
forwarded to the real hardware. PROSPECT [32] introduces
a novel approach that involves the partial emulation of an
embedded device’s ﬁrmware during a fuzzing experiment. By
forwarding system calls that are likely to access peripherals,
this approach can emulate Linux-based embedded systems.
SURROGATES [34] improves Avatar by using a custom, low-
latency FPGA bridge between the host’s PCI Express bus and
the system under test. It also allows the emulator full access
to the system’s peripherals. These approaches still rely on real
hardware and thus is not scalable. The performance cannot
exceed those achieved by QEMU- or rehosting-based solutions.
D. Firmware Analysis
Symbolic execution is commonly used in analyzing MCU
ﬁrmware. FIE [18] leverages the KLEE [12] symbolic exe-
cution engine to provide an extensible platform for detecting
ﬁrmware bugs. FIE does not simulate hardware interaction.
That is, writes to a peripheral are ignored and reads return
unconstrained symbolic values. Moreover,
is speciﬁc to
the MSP430 family microcontrollers. FirmUSB [29] analyzes
embedded USB devices and uses domain knowledge to speed
it
up the symbolic execution of ﬁrmware. Compared to un-
constrained symbolic execution, FirmUSB can improve the
performance by a factor of seven. Inception [17] is another
KLEE-based system aiming at testing a complete ﬁrmware
image. It symbolically executes LLVM-IR merged from source
code, assembly, and binary libraries. To handle peripherals,
it either follows the approach of FIE or redirects the read
operation to a real device. Both para-rehosting and Inception
need the source code. Although we only used fuzzing to ﬁnd
bugs in this work, there is no technical obstacle of using
symbolic execution tools such as angr [53] to analyze the
rehosted program or even use hybrid fuzzing [59], [54] to
improve efﬁciency.
Previous work has made tremendous progress in analyzing
Linux-based ﬁrmware [14], [64]. The high-level idea is to
design a generic kernel for all the devices. This approach
leverages the abstract layer offered by the Linux kernel, but
cannot work for the MCU ﬁrmware where the kernel and
tasks are mingled together. Finally, for PLCs, Almgren et
al. developed several mutation-based and generational-based
fuzzers against various PLCs and smart meters [2]. They
discovered several known and unknown denial of service
vulnerabilities.
E. OS Customization
The need for better performance and security has pushed
OS customization techniques in recent years [22], [37], [10],
[45]. For example, Exokernel [22] provides a minimal set of
hardware-level interfaces for multiplexing hardware resources
among applications. On top of it, each application imple-
ments a library OS (libOS) that include a customized and
optimized OS abstraction. Similarly, Unikernel [37] compiles
a highly specialized libOS with the application, removing
unnecessary functions in commodity OSs. The approach used
in para-rehosting is aligned with this new trend in OS design.
Speciﬁcally, we also abstract a common and minimal set of
hardware interfaces for MCU OSs. Each MCU OS implements
its designed functionality based on this common hardware
interface in different ways.
IX. CONCLUSIONS
In-house security testing of MCU ﬁrmware is crucial for
IoT security. However, due to the different testing environment,
sophisticated tools in x86 are not available for MCU ﬁrmware.
Re-compiling the ﬁrmware to the native x86 host can directly
address this problem. However, ad-hoc porting is daunting,
prone to errors and sometimes impossible. We therefore pro-
pose para-rehosting to ease this process. The portable MCU is
able to model the common functions of an MCU while para-
APIs facilitate HAL-based peripheral function replacement to
deal with peripherals. Rehosting MCU OSs directly addresses
fundamental
issues (performance, scalability and visibility)
faced by existing solutions. We have implemented our idea
and rehosted nine OSs for MCU. We did security testing for
libraries of Amazon FreeRTOS, ARM Mbed OS, Zephyr and
LiteOS. Most libraries shipped with these OSs can be tested
by off-the-shelf dynamic analysis tools, including AFL and
ASAN. Our experiments suggested that the bugs in the real
ﬁrmware are re-producible in rehosted ﬁrmware. And the bugs
13
are more observable on rehosted ﬁrmware. Running our tool
with fuzzing, previously-unknown bugs have been discovered.
ACKNOWLEDGMENT
We would like to thank the anonymous reviewers and our
shepherd Dave (Jing) Tian for constructive comments and
feedback. The work reported in this paper was supported
in part by JFSG from the University of Georgia Research
Foundation, Inc., NSF IIS-2014552, DGE-1565570, NSA Sci-
ence of Security Initiative H98230-18-D-0009 and the Ripple
University Blockchain Research Initiative.
REFERENCES
“FunkOS,” https://sourceforge.net/projects/funkos/.
[1]
[2] M. Almgren, D. Balzarotti, J. Stijohann, and E. Zambon, “D5. 3 report
on automated vulnerability discovery techniques,” 2014.
[3] Amazon, “amazon-freertos,” https://github.com/aws/amazon-freertos,
2020.
[4] Amazon Web
Service,
“FreeRTOS Windows
Port,”
https:
//www.freertos.org/FreeRTOS-Windows-Simulator-Emulator-for-V
isual-Studio-and-Eclipse-MingW.html, 2020.
[5] Amazon Web Services, “The FreeRTOS Kernel,” https://www.freertos
.org/, 2019.
[6] AnySilicon, “MCUs (Microcontrollers) Sales History and Forecast
2016-2022,” https://anysilicon.com/mcus-microcontrollers-sales-history
-forecast-2016-2022/, 2018.
arm Developer, “Data Watch Trace,” https://developer.arm.com/docu
mentation/ddi0439/b/Data-Watchpoint-and-Trace-Unit/DWT-functiona
l-description?lang=en, 2020.
[7]
[8] Arm Holding, “Mbed OS 5,” https://os.mbed.com/, 2019.
[9] Arm Holdings, “Embedded Trace Macrocell, ETMv1.0 to ETMv3.5,”
http://infocenter.arm.com/help/topic/com.arm.doc.ihi0014q/IHI0014Q
etm architecture spec.pdf, 2011.
[10] A. Belay, G. Prekas, A. Klimovic, S. Grossman, C. Kozyrakis, and
E. Bugnion, “IX: A protected dataplane operating system for high
throughput and low latency,” in 11th USENIX Symposium on Operating
Systems Design and Implementation (OSDI 14).
Broomﬁeld, CO:
USENIX Association, Oct. 2014, pp. 49–65.
[11] P. Burr, “Arm Cortex-M3 processor - the core of the Internet of Things
(IoT),” Arm Community Processors Blog, February 2018.
[12] Cadar, Cristian and Dunbar, Daniel and Engler, Dawson R and others,
“Klee: Unassisted and automatic generation of high-coverage tests for
complex systems programs.” in OSDI, vol. 8, 2008, pp. 209–224.
[13] C. Cao, L. Guan, J. Ming, and P. Liu, Device-Agnostic Firmware
Execution is Possible: A Concolic Execution Approach for Peripheral
Emulation. New York, NY, USA: Association for Computing
Machinery, 2020, p. 746–759. [Online]. Available: https://doi.org/10.1
145/3427228.3427280
[14] D. D. Chen, M. Woo, D. Brumley, and M. Egele, “Towards auto-
mated dynamic analysis for linux-based embedded ﬁrmware.” in NDSS,
vol. 16, 2016, pp. 1–16.
[15] A. Clements, E. Gustafson, T. Scharnowski, P. Grosen, D. Fritz,
C. Kruegel, G. Vigna, S. Bagchi, and M. Payer, “Halucinator - ﬁrmware
rehosting through abstraction layer modeling.” https://github.com/emb
edded-sec/halucinator, 2019.
[16] Clements, Abraham and Gustafson, Eric and Scharnowski, Tobias and
Grosen, Paul and Fritz, David and Kruegel, Christopher and Vigna, Gio-
vanni and Bagchi, Saurabh and Payer, Mathias, “Halucinator: Firmware
re-hosting through abstraction layer emulation,” 2020.
[17] N. Corteggiani, G. Camurati, and A. Francillon, “Inception: System-
wide security testing of real-world embedded systems software,” in 27th
USENIX Security Symposium (USENIX Security 18), 2018, pp. 309–
326.
[18] D. Davidson, B. Moench, T. Ristenpart, and S. Jha, “Fie on ﬁrmware:
Finding vulnerabilities in embedded systems using symbolic execution,”
in 22nd USENIX Security Symposium (USENIX Security 13), 2013, pp.
463–478.
[19] Dmitry Frank, “TNeo,” https://github.com/dimonomid/tneo, 2019.
[20] Eclipse
“IoT Developer
Foundation,
Survey
2019 Results,”
https://iot.eclipse.org/community/resources/iot-surveys/assets/iot-d
eveloper-survey-2019.pdf, 2019.
[21] Emscripten Contributors, “Emscripten,” https://emscripten.org/, 2015.
[22] D. R. Engler and M. F. Kaashoek, “The exokernel operating system
architecture,” Ph.D. dissertation, USA, 1998.
[23] D. Evans, “The internet of things: How the next evolution of the internet
is changing everything,” CISCO white paper, vol. 1, no. 2011, pp. 1–11,
2011.
fabricio godoi, barriquello, gustavowd, “brtos,” https://github.com/brtos
/brtos, 2016.
[24]
[25] B. Feng, A. Mera, and L. Lu, “P2IM: Scalable and Hardware-
independent Firmware Testing via Automatic Peripheral Interface Mod-
eling,” in 29th USENIX Security Symposium (USENIX Security 20).
Boston, MA: USENIX Association, Aug. 2020.
[26] FreeRTOS, “Stack Usage and Stack Overﬂow Checking,” https://www.
freertos.org/Stacks-and-stack-overﬂow-checking.html, 2018.
[27] FreeRTOS, “FreeRTOS+TCP Open source and thread safe TCP/IP stack
for FreeRTOS,” https://www.freertos.org/FreeRTOS-Plus/FreeRTOS P
lus TCP/index.html, 2019.
[28] E. Gustafson, M. Muench, C. Spensky, N. Redini, A. Machiry,
Y. Fratantonio, D. Balzarotti, A. Francillon, Y. R. Choe, C. Kruegel,
and G. Vigna, “Toward the analysis of embedded ﬁrmware through
automated re-hosting,” in 22nd International Symposium on Research
in Attacks, Intrusions and Defenses (RAID 2019). Chaoyang District,
Beijing: USENIX Association, Sep. 2019, pp. 135–150.
[29] G. Hernandez, F. Fowze, D. J. Tian, T. Yavuz, and K. R. Butler,
“FirmUSB: Vetting USB Device Firmware Using Domain Informed
Symbolic Execution,” in 2017 ACM SIGSAC Conference on Computer
and Communications Security (CCS ’17). New York, NY, USA: ACM,
2017, pp. 2245–2262.
[30] Huawei, “Huawei LiteOS,” https://github.com/LiteOS/LiteOS, 2020.
[31] V. Jacobson, C. Leres, and S. McCanne, “The tcpdump manual page,”
Lawrence Berkeley Laboratory, Berkeley, CA, vol. 143, 1989.
[32] M. Kammerstetter, C. Platzer, and W. Kastner, “Prospect: peripheral
proxying supported embedded code testing,” in 9th ACM symposium
on Information, computer and communications security. ACM, 2014,
pp. 329–340.
[33] O. Karliner, “FreeRTOS TCP/IP Stack Vulnerabilities – The De-
tails,” https://blog.zimperium.com/freertos-tcpip-stack-vulnerabilities-
details/, December 2018.
[34] K. Koscher, T. Kohno, and D. Molnar, “SURROGATES: Enabling near-
real-time dynamic analyses of embedded systems,” in 9th USENIX
Workshop on Offensive Technologies (WOOT 15). Washington, D.C.:
USENIX Association, Aug. 2015.
[35] K. Lawson, “Atomosher,” http://atomthreads.com/, 2020.
[36] C.-K. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser, G. Lowney,
S. Wallace, V. J. Reddi, and K. Hazelwood, “Pin: Building Custom-
ized Program Analysis Tools with Dynamic Instrumentation,” in 2005
ACM SIGPLAN Conference on Programming Language Design and
Implementation (PLDI’05), 2005.
[37] A. Madhavapeddy, R. Mortier, C. Rotsos, D. Scott, B. Singh, T. Ga-
zagnaire, S. Smith, S. Hand, and J. Crowcroft, “Unikernels: Library
operating systems for the cloud.” New York, NY, USA: Association
for Computing Machinery, 2013, p. 461–472.
[38] B. Matas, “Mcu market on migration path to 32-bit and arm-based
devices,” Research Bulletin, pp. 32–35, 2013.
[39] mbed, “Open source Python library for programming and debugging
Arm Cortex-M microcontrollers using CMSIS-DAP,” https://github.c
om/mbedmicro/pyOCD, 2019.
[40] mbed, “Tracking memory usage with Mbed OS,” https://os.mbed.com/