the tally protocol that reveals the sums xi without a modu-
lar reduction by m. This may be suﬃcient when the number
of voters is much larger than the number of candidates. At
the cost of a few extra steps (masking the sums by adding
random multiples of m), this small information leakage can
be avoided. Note: the tally stage uses as subprotocols some
zero-knowledge proofs. These are based on standard tech-
niques, and we omit them here due to lack of space.
.
(cid:3)
i
1. Authority A1 computes, for all 1 ≤ i ≤ n: di
`
xi, r1,i,bi,1,ti + r2,i,bi,2,xi−ti
´
.
=
s1,i · s2,i = C
. It chooses
a random permutation σ1 : [n] (cid:3)→ [n], random values
u1,1, . . . , u1,n ∈R R and publishes to the public bul-
letin board, for all 1 ≤ i ≤ n: d
= dσ1(i) · C (0, u1,i).
(cid:3)
n
2. Authority A1 proves in zero-knowledge that d
3. Authority A2 sends, for all 1 ≤ i ≤ n: e
is a valid shuﬄe of d1, . . . , dn.
(R)
i = Epk (r2,i,xi−ti ) to A1 (note that A2 uses its
and e
own public-keys for encryption). It also proves in zero
(M)
knowledge that e
is an encryption of a value in the
range {0, . . . , m − 1}.
i
4. For all 1 ≤ i ≤ n, authority A1 sends over the pri-
=
(cid:3)
1, . . . , d
σ1(i) · Epk
(M)
(cid:3)(M)
i
(M)
i
and
= e
´
σ1(i) · Epk
(R)
`
vate channel to A2: e
xσ1(i)
Epk
(cid:3)(R)
“
i = e
r2,σ1(i),xσ1(i)−tσ1(i) + r1,σ1(i),tσ1(i) + u1,i
“
r1,σ1(i),tσ1(i) + u1,i
”
tσ1(i)
”
`
´
=
= Epk (xi − ti)
.
e
d
(cid:3)(cid:3)
i
. (i.e. A1
(cid:3)(cid:3)
n is a valid shuﬄe of d
Epk
reconstructs the complete votes and commitment ran-
domness using the homomorphic property of the en-
cryption, then shuﬄes them in the same way it origi-
nally shuﬄed the commitments).
5. Authority A2 chooses a random permutation σ2 : [n] (cid:3)→
[n], random values u2,1, . . . , u2,n ∈R R and publishes
to the public bulletin board, for all 1 ≤ i ≤ n: d
.
=
σ2(i) · C (0, u2,i).
(cid:3)
d
(cid:3)(cid:3)
1 , . . . , d
6. Authority A2 proves in zero-knowledge shuﬄe that
1, . . . , d
7. For all i ∈ [n], authority A2 decrypts e
(cid:3)(R)
σ2(i), getting the values xσ1(σ2(i)) and
e
r2,σ1(σ2(i)),xσ1(σ2(i))−tσ1(σ2(i)) +r1,σ1(σ2(i)),tσ1(σ2(i)) +u1,σ2(i),
respectively. The decrypted values are the messages
and randomness of the commitments d
1, . . . , d
n. Au-
thority A2 can now compute the messages and ran-
(cid:3)(cid:3)
n by itself: A2
domness of the commitments d
.
publishes to the public bulletin board ξi
= xσ1(σ2(i))
and
.
= r2,σ1(σ2(i)),xσ1(σ2(i))−tσ1(σ2(i)) +r1,σ1(σ2(i)),tσ1(σ2(i)) +
ρi
u1,σ2(i) + u2,i. Note that ξ1, . . . , ξn is equivalent (mod
m) to a permutation of the votes.
(cid:3)
n.
(cid:3)(M)
σ2(i) and
(cid:3)(cid:3)
1 , . . . , d
(cid:3)
(cid:3)
(cid:3)
5.4 Universal Veriﬁcation and Output
The veriﬁcation can be performed by anyone with access
to the public bulletin board.
1. The veriﬁer checks that the commitment key was gen-
erated correctly.
2. The veriﬁer checks for all unvoted ballots that the
opened commitments match the published permuta-
tions
3. The veriﬁer computes the vector d1, . . . , dn (by per-
forming the computation di = s1,i · s2,i with the pub-
lished commitments s1,i · s2,i)
4. The veriﬁer checks that the HVZK proofs of commit-
ment shuﬄe published in steps 2 and 6 of the tally
phase are correct.
i = C (ξi, ρi) for all i ∈ [n].
(cid:3)(cid:3)
5. The veriﬁer checks that d
6. If an error was found, the veriﬁer outputs ⊥. Oth-
erwise, the veriﬁer computes and outputs the tally
s0, . . . , sm−1, where sj = |{i ∈ [n] | ξi ≡ j (mod m)}|.
6. DISCUSSION AND OPEN PROBLEMS
Multiple Questions on a Ballot. As shown in the “illus-
trated example”, our voting protocol can be easily adapted
to use multiple questions on the same ballot. If there are
many questions, the pattern of votes on a single ballot may
uniquely identify a voter, hence tallying the questions to-
gether may violate voter privacy.
In this case, the tally
protocol should be performed separately for each question
(or for each small group).
More than Two Authorities. We described the protocol
using two authorities. The abstract protocol can easily be
extended to an arbitrary number of authorities. However,
the main stumbling block is the human element: even for two
authorities this protocol may be diﬃcult for some users. Di-
viding a vote into three parts will probably be too complex,
without additional ideas in the area of human interface.
Receipt-Freeness with a Corrupt Authority. The current
protocol is not receipt-free if even one of the authorities
is corrupt. Note that this is not a problem in the proof,
but in the protocol itself (if the voter does not know which
authority is corrupt): the voter can’t tell which of the ballots
the coercer will have access to, so she risks getting caught if
she lies about the permutation she erased from the ballot. It
is an interesting open question whether this type of attack
can be prevented.
Better Human Interface. Probably the largest hurdle to
implementing this protocol is the human interface. Devising
a simple human interface for modular addition could prove
useful in other areas as well.
7. REFERENCES
[1] B. Adida and R. L. Rivest. Scratch & vote:
self-contained paper-based cryptographic voting. In
WPES ’06, pages 29–40, 2006.
[2] Y. Aumann, Y. Z. Ding, and M. O. Rabin. Everlasting
security in the bounded storage model. IEEE Trans.
on Information Theory, 48(6):1668–1680, 2002.
[3] J. Benaloh and D. Tuinstra. Receipt-free secret-ballot
elections. In STOC ’94, pages 544–553, 1994.
[4] J. W. Bryans and P. Y. A. Ryan. A simpliﬁed version
of the Chaum voting scheme. Technical Report CS-TR
843, University of Newcastle, 2004.
[5] R. Canetti. Universally composable security: A new
paradigm for cryptographic protocols. Cryptology
ePrint Archive, Report 2000/067, 2000.
[6] R. Canetti and R. Gennaro. Incoercible multiparty
computation. In FOCS ’96, pages 504–513.
[7] D. Chaum. Untraceable electronic mail, return
addresses, and digital pseudonyms. Communications
of the ACM, 24(2):84–88, 1981.
[8] D. Chaum. E-voting: Secret-ballot receipts: True
voter-veriﬁable elections. IEEE Security & Privacy,
2(1):38–47, Jan./Feb. 2004.
[9] D. Chaum, 2006. http://punchscan.org/.
[10] J. D. Cohen(Benaloh) and M. J. Fischer. A robust
and veriﬁable cryptographically secure election
scheme. In FOCS ’85, pages 372–382.
[11] R. Cramer, M. Franklin, B. Schoenmakers, and
M. Yung. Multi-authority secret-ballot elections with
linear work. In Eurocrypt ’96, pages 72–83.
[12] R. Cramer, R. Gennaro, and B. Schoenmakers. A
secure and optimally eﬃcient multi-authority election
scheme. In Eurocrypt ’97, pages 103–118.
[13] A. Fujioka, T. Okamoto, and K. Ohta. A practical
secret voting scheme for large scale elections. In
AUSCRYPT ’92, pages 244–251.
[14] M. Hirt and K. Sako. Eﬃcient receipt-free voting
based on homomorphic encryption. In Eurocrypt ’00,
pages 539+.
[15] T. Moran and M. Naor. Basing cryptographic
protocols on tamper-evident seals. In ICALP ’05,
pages 285–297.
[16] T. Moran and M. Naor. Receipt-free
universally-veriﬁable voting with everlasting privacy.
In CRYPTO, pages 373–392, 2006.
http://www.wisdom.weizmann.ac.il/~talm/papers/
MN06-voting.pdf.
[17] M. Naor and A. Shamir. Visual cryptography. In
Eurocrypt ’94, volume 950 of LNCS, pages 1–12, 1995.
[18] C. A. Neﬀ. Practical high certainty intent veriﬁcation
for encrypted votes, October 2004.
http://www.votehere.net/vhti/documentation/
vsv-2.0.3638.pdf.
[19] S. Popoveniuc and B. Hosp. An introduction to
punchscan, 2006. http://punchscan.org/papers/
popoveniuc_hosp_punchscan_introduction.pdf.
[20] M. O. Rabin. Transaction protection by beacons.
J.Computer and System Sciences, 27(2):256–267, 1983.
[21] D. J. Reynolds. A method for electronic voting with
coercion-free receipt. Presentation:
http://www.win.tue.nl/~berry/fee2005/
presentations/reynolds.ppt.
[22] P. Y. A. Ryan. A variant of the Chaum voter-veriﬁable
scheme. In WITS ’05, pages 81–88, 2005.
[23] A. Shamir. Cryptographers panel, RSA conference,
2006. Webcast: http:
//media.omediaweb.com/rsa2006/1_5/1_5_High.asx.
APPENDIX
A. HOMOMORPHIC COMMITMENT AND
ENCRYPTION SCHEMES OVER
IDENTICAL GROUPS
Our voting scheme requires a perfectly private commit-
ment scheme with “matching” semantically-secure encryp-
tion schemes. The commitment scheme’s message and ran-
domizer spaces must both be groups, and the commitment
scheme must be homomorphic (separately) in each of the
groups. There must be a matching encryption scheme for
each group, such that the encryption scheme’s message space
is homomorphic over that group.
To meet these requirements, we propose using the stan-
dard Paillier encryption scheme, where the plaintext is in
the group Zn for n = p1p2, a product of two safe primes.
For the commitment scheme, we propose a modiﬁed version
of the Pedersen commitment scheme where both messages
and randomness are also in the group Zn. Below we give
the details of this construction.
A.1 Modiﬁed Pedersen
The abstract version of Pedersen commitment has a public
key consisting of a cyclic group G and two random genera-
tors g, h ∈ G such that logg h is not known to the committer.
The cryptographic assumption is that logg h is infeasible to
compute.
The message and randomizer spaces for this scheme are
.
both Z|G|. C (m, r)
= gmhr. Since g and h are both gener-
ators of the group, for any m, gmhr is a random group ele-
ment when r is chosen at random. Therefore, this scheme is
perfectly hiding. If an adversary can ﬁnd (m1, r1) (cid:7)= (m2, r2)
such that gm1 hr1 = gm2 hr2 , then it can compute logg h =
m2−m1
r1−r2 , violating the cryptographic assumption. Hence the
scheme is computationally binding. It is easy to see that the
scheme is homomorphic.
Finally, if we choose g, h = gx, where g is chosen randomly
and x is chosen randomly such that gx is a generator, we get
an identically distributed public key, but knowing x it is easy
to equivocate.
In the “standard” implementation of Pedersen, G is taken
∗
p, where p = 2q + 1 and
to be the order q subgroup of Z
both p and q are prime (i.e., p is a safe prime). g and h
are randomly chosen elements in this group. The discrete
logarithm problem in G is believed to be hard when p is a
safe prime chosen randomly in (2n, 2n+1).
Our modiﬁed version of Pedersen takes G to be the order
∗
n = p1p2 subgroup of Z
4n+1, where p1 and p2 are safe primes
and 4n + 1 is also prime (we can’t use 2n + 1, since that
is always divisible by 3 when p1 and p2 are safe primes).
The computational assumption underlying the security of
the commitment scheme is that, when p1 is a random safe
prime and g and h are random generators of G, computing
logg h is infeasible. Note that it is not necessary to keep
the factorization of n secret (in terms of the security of the
commitment scheme), but knowing the factorization is not
required for commitment.
A.2 Choosing the Parameters
The connection between the keys for the commitment and
encryption schemes makes generating them slightly tricky.
On one hand, only one of the authorities can know the pri-
vate key for the encryption scheme (since its purpose is to
hide information from the other authority). On the other
hand, the security of the commitment must be publicly veri-
ﬁable (even if both authorities are corrupt), hence we cannot
allow the authorities to choose the parameters themselves.
Moreover, for the commitment to be binding, n must have a
large random prime factor, and g and h must be chosen ran-
domly. Using a random beacon, this can be done securely,
but we leave the details to the full version of the paper.