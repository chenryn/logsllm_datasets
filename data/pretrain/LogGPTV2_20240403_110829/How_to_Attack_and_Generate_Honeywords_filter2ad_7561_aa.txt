title:How to Attack and Generate Honeywords
author:Ding Wang and
Yunkai Zou and
Qiying Dong and
Yuanming Song and
Xinyi Huang
8
9
5
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
2
2
0
2
2022 IEEE Symposium on Security and Privacy (SP)
How to Attack and Generate Honeywords
Ding Wang, Yunkai Zou, Qiying Dong
{wangding, zouyunkai, dqy}@nankai.edu.cn
Nankai University
Yuanming Song
Peking University
PI:EMAIL
Xinyi Huang
Fujian Normal University
PI:EMAIL
Abstract—Honeywords are decoy passwords associated with
each user account to timely detect password leakage. The key
issue lies in how to generate honeywords that are hard to be
differentiated from real passwords. This security mechanism was
ﬁrst introduced by Juels and Rivest at CCS’13, and has been
covered by hundreds of media and adopted in dozens of research
domains. Existing research deals with honeywords primarily in
an ad hoc manner, and it is challenging to develop a secure
honeyword-generation method and well evaluate (attack) it. In
this work, we tackle this problem in a principled approach.
We ﬁrst propose four theoretic models for characterizing the
attacker A’s best distinguishing strategies, with each model
based on a different combination of information available to
A (e.g., public datasets, the victim’s personal information and
registration order). These theories guide us to design effective
experiments with real-world password datasets to evaluate the
goodness (ﬂatness) of a given honeyword-generation method.
Armed with the four best attacking theories, we develop the
corresponding honeyword-generation method for each type of
attackers, by using various representative probabilistic password
guessing models. Through a series of exploratory investigations,
we show the use of these password models is not straightforward,
but requires creative and signiﬁcant efforts. Both empirical
experiments and user-study results demonstrate that our meth-
ods signiﬁcantly outperform prior art. Besides, we manage to
resolve several previously unexplored challenges that arise in the
practical deployment of a honeyword method. We believe this
work pushes the honeyword research towards statistical rigor.
I. INTRODUCTION
Password-based authentication remains the most widely-
used mechanism for authenticating users in computer systems
since its advent in the 1970s. Ample of studies have revealed
its security issues (e.g., guessing [14], reuse [56] and key-
logging [37]) and usability problems (e.g., creation [42], mem-
orization [26], typing [22]), various alternative authentication
methods (e.g., graphical passwords [9], multi-factor authen-
tication [36] and behavior biometrics [46]) have also been
proposed. However, passwords stubbornly survive and are
proliferating with almost every new web service. Gradually,
a consensus is being reached in both research [15], [16], [48]
and industry [3], [17], [49] that password-based authentication
is likely to keep its place in the foreseeable future.
In password-based authentication systems, the server needs
to maintain a sensitive password ﬁle of all users. This ﬁle
provides attackers/insiders with a rich target for compromise.
These years we seem to get accustomed to catastrophic
password data breaches from high-proﬁle sites (e.g., 3 billion
Yahoo leak [2] and 68 million Dropbox leak [33]). Once
this ﬁle is somehow obtained by the attacker A, users’
passwords are subject to ofﬂine guessing in which A can
employ dedicated password-cracking hardware like GPU [29]
and even cloud services like Amazon EC2 [8]. To address this
issue, the research community has given much attention to
how to store this ﬁle securely [7], [39] and why developers
get password storage wrong [45], [51], and nice progress has
also been made on how to measure [28], [43] and increase
[10], [12] the ofﬂine guessing attacker’s workload.
Relatively little attention has been given to how to timely de-
tect the password-ﬁle leakage. It is a rare piece of good news in
password research that users do tend to change their passwords
when notiﬁed about password breaches [41]. However, without
a timely detection mechanism, responsive countermeasures are
impossible. Unsurprisingly, hundreds of popular web services
have recently suffered large-scale password leaks, and most of
them (e.g., Yahoo [2], MyFitnessPal [13], LiveJournal [23],
Dropbox [33] and MyHeritage [38]) ask users to change
passwords 1∼8 years after the leaks originally occurred.
This provides attackers enough time to crack/exploit user
passwords, making the question of how to timely detect
password-ﬁle compromise increasingly important.
A promising approach, named honeywords, to achieving
timely password breach detection was ﬁrst proposed by Juels
and Rivest at CCS’13 [35]. Honeywords are decoy passwords
generated for each user account, and they are stored together
with the user’s real password. The index of the real passwords
is stored in another server of minimalist design (called honey-
checker). To successfully log in, the attacker A has to tell
the real password apart from a set of k-1 honeywords (e.g.,
k=20 as recommended [35]). Login with a honeyword signals
a password-ﬁle leakage. The key issue lies in, when given a
user account, how to generate a set of honeywords that cannot
be easily distinguished from the real password.
Juels and Rivest [35] divided honeyword-generation meth-
ods into two categories: legacy user-interface (UI) based ones
and modiﬁed-UI based ones. In legacy-UI based methods,
there is no change at the user side and usability is maintained;
in the modiﬁed-UI based methods, the user needs to change
behavior. Because the cost of “requiring users to change
behavior” is generally highly expensive [16], legacy-UI based
methods are much more promising. In addition, the generation
of perfect honeywords for modiﬁed-UI is straightforward (see
Sec. 4.2 of [35]). Hence, in this work we mainly focus on
legacy-UI based honeyword-generation methods.
A. Design challenges
Juels and Rivest [35] classify the legacy-UI based methods
into two categories (i.e., chafﬁng-by-tweaking and chafﬁng-
with-a-password-model), and three of
four primary
their
© 2022, Ding Wang. Under license to IEEE.
DOI 10.1109/SP46214.2022.00029
966
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:19:56 UTC from IEEE Xplore.  Restrictions apply. 
legacy-UI methods belong to “chafﬁng-by-tweaking”. As
shown by Wang et al. [53], these four methods are all highly
vulnerable. In a passing comment (see Sec. 4.1.2 of [35]),
Juels and Rivest [35] do mention the possibility of using a
password model to build honeywords. However, the use of
password models looks deceptively simple, but actually it is
rather challenging. The following explains why.
Firstly,
it
is virtually impossible to employ a password
model to generate honeywords with the same probability as the
user’s password. User passwords are revealed well following
the Zipf-like distribution [52], and this ﬁnding has been
corroborated by evidence from 70 million Yahoo passwords
[12]. Therefore, it is inherently impossible to generate enough
candidate honeywords (at
least 103 to mitigate denial-of-
service attacks) that are equally probable with a relatively
popular real password. This inequality gives chances to A to
distinguish real passwords by using probabilistic approaches.
Secondly, each of the state-of-the-art password models
has its own, inherent weaknesses. As brieﬂy mentioned in
[53] and in-depth investigated in this work, the PCFG-based
model [56], [58] underestimates the probability of interleaving
passwords (e.g., 1a2b3c4d and 1qa2ws3ed); the Markov-
based model [40] underestimates long but meaningful pass-
words (e.g., password123 and 110120130);
the List-
based model (see Sec. II-D) underestimates all passwords that
do not appear in the given password list (e.g., the 3 billion
Yahoo list [2]), while every password list is of limited space
and each service has its unique password distribution (see Fig.
3 of [56]). Such weaknesses make it improper to always use
a single password model to generate honeywords, but when
and how to integrate these password models to overcome the
identiﬁed weaknesses has not been systematically explored.
Thirdly, the attacker A is powerful (yet realistic). Following
to assume that A
the Kerckhoffs’s principle,
knows which password model is used by the server to generate
honeywords. As hundreds of sites have leaked their passwords
(see [1]), and even many sites have leaked their passwords
more than once (e.g., Yahoo [2], Phpbb, Ubuntu and Anthem
[47]), it is also realistic to assume that A knows some infor-
mation about the password distribution of the target service. In
addition, A may exploit not only users’ behavior of selecting
popular passwords but also the victims’ personally identiﬁable
information (PII). In reality, a large fraction of users build
passwords using their own PII (e.g., 36.95%∼51.43% [53]),
while a user’s PII can often be easily learned from social
networks [20] and unending data breaches [4], [27], [47].
For instance, in April 2021, the personal data of 533 million
Facebook users was made freely available [34], such as name,
birthday, location, phone # and email; in June 2021, personal
data of 700 million LinkedIn users was sold online for $5,000
[44], including name, email, location, phone #, gender, etc.
Moreover, the registration order of users is useful for A.
This piece of info is often explicitly stored in the leaked
password ﬁle (e.g., Forbes, QNB and Tianya) or implicitly
reﬂected by the monotonically increasing user registration
number. Even if it is unavailable from the leaked password ﬁle,
is natural
it
it can often be crawled from user proﬁles in some applications
(e.g., social/programmer forums and discussion boards), or it
can be largely determined by the time when the user ﬁrst
participates in discussions, posts questions/answers, etc. We
will show that this capability is especially useful for A against
adaptive password-model based honeyword methods, of which
the training set keeps updating as new user registers.
B. Related work
In 2015, Chakraborty and Mondal [21] pointed out that
all of Juels-Rivest’s honeyword methods [35] are random-
replacement based, and thus are inherently unable to resist
semantic-aware attackers. They provided some typical counter-
example passwords (e.g., bond007 and john1981) to show
this. Further,
they suggested a new, heuristic modiﬁed-UI
honeyword method. At ACSAC’15, Almeshekah et al. [7]
pointed out that the honeyword mechanism still cannot com-
pletely eliminate ofﬂine password guessing, and proposed the
ErsatzPasswords scheme that employs a machine-dependent
function to store passwords. Though this makes ofﬂine pass-
word guessing impossible, scalability issues arise.
In 2016, Erguler [24] also used some typical counter-
example passwords to “give some remarks” about the inse-
curity of Juels-Rivest’s four methods [35]. Since the key goal
of a honeyword method is to generate honeywords indistin-
guishable from the user’s real password, Erguler presented a
new heuristic method (called “Honeyindex”) that uses pass-
words of other users in the system as honeywords. However,
the evaluation of Honeyindex is still in an ad hoc manner.
Unsurprisingly, as shown in Appendix B, “Honeyindex” [24]
has critical security and deployment issues.
At NDSS’18, Wang et al. [53] used heuristic experiments to
reveal that the four honeyword methods by Juels-Rivest [35]