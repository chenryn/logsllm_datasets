partitioned into keys in the following order3 (Dierks & Rescorla, 2008):
• Client MAC key
• Server MAC key
• Client write key
• Server write key
• Client (write) IV
• Server (write) IV
The implications of this for the thesis are that there will be multiple
matching symmetric keys on either side of the connection (at least for the duration
of the connection), in addition to a ﬁxed-length master key that may exist.
3Not all cipher suites will use the IVs, which is noted in the RFC
17
2.2.4 Session Resumption
TLS session resumption is a feature designed to enhance performance by
enabling an abridged negotiation on subsequent reconnects between the same client
and server. This is useful in situations when multiple connections may be made
between the same hosts over a period of time (or even between a given client and
cluster of servers). The general premise is that after an initial full key negotiation,
some portion of the “state” of the connection, including at minimum a unique
session identiﬁer and the master key, is cached. When the client wishes to reconnect
to the same server (or cluster of servers), it sends the unique identiﬁer from its
cache with the client hello message. If both parties have access to the master key
tied uniquely to the session identiﬁed provided by the client, a willing server would
send a “change cipher spec” message indicating that the symmetric cipher will be
now be used, and the session resumes without another key exchange (Dierks &
Allen, 1999; Freier et al., 2011; Salowey, Zhou, Eronen, & Tschofenig, 2008). The
abridged handshake can be seen in Figure 2.4.
18
Figure 2.4. TLS session resumption abridged Handshake
There are two widely supported forms of unique identiﬁer – the session ID,
which is a component of the standard TLS implementations, and the session ticket,
which is currently a TLS extension (Freier et al., 2011; Salowey et al., 2008). The
session ID was described while discussing the TLS handshake, and is a ﬁxed-length
identiﬁer of 32 bytes ﬁrst introduced in SSL. The session ticket, conversely, is
variable length because it is actually an encrypted composite structure of values
representing the state.
The premise behind session tickets per RFC 5077, is that a server can create
a “ticket” out of the state information typically saved in the cache, encrypt this
state, and send it to the client for keeping. The advantage to the server is several
fold: it no longer has to maintain the state in its cache, freeing up resources, and
technically it does not have to be the server that the client resumes the connection
with. Consider that a cluster of servers can share the key used to encrypt tickets,
19
and thereby all resume sessions created by any of the servers, allowing for more
e↵ective load balancing.
session tickets are “opaque” to the client, meaning that the client does not
know the contents of the tickets (nor does it need to know that information to
resume the session). The client therefore caches the ticket with the master secret, as
it would when using a session ID as a unique identiﬁer. The exact elements that
make up the ticket and “state” of which the opaque ticket is composed are not
mandated by the RFC. A ticket construction put forward in the RFC is detailed in
Figure 2.5.
struct {
opaque key_name[16];
opaque iv[16];
opaque encrypted_state;
opaque mac[32];
} ticket;
Figure 2.5. Session Ticket per RFC 5077
It’s important to bear in mind that session tickets remain an extension of
TLS, meaning that clients that are TLS compliant may elect not to use this
extension and should still be able to inter-operate with Servers playing by the
RFCs. It is at the client’s option to initiate the use of session tickets by passing the
extension in the client hello message. RFC 5077 also alters the standard handshake
by introducing a “NewSessionTicket” message that the server sends after the
ClientKeyExchange is ﬁnished.
Session tickets are intended to be mutually exclusive of a session ID. If the
server intends to use session tickets, then, importantly, it should include an empty
session ID in the server hello message. The client, likewise, should discard any
session ID passed to it if the client receives a session ticket from the server (Salowey
et al., 2008). Curiously, the RFC states that if a client sends a session ID during a
20
session resumption, the server is supposed to respond with that same ID
(presumably for consistent behaviour). This is purported to aide the client in
di↵erentiating when a server is resuming the session or performing a full handshake.
Wireshark currently supports decryption of sessions that employ session
tickets based on the client random. That is to say that Wireshark requires the
initial handshake and associated client random value to pair the master secret to a
session using tickets. Wireshark is a well-known network analysis tool that will be
leveraged in the thesis for PoC decryption of sessions. The implication of this is
that the client random will need to be explicitly linked to the master secret in cases
where the session ID is not present for ease of decryption (or, alternatively, the
ticket will need to be decrypted).
Another point of interest is the Extended Master Secret SSL/TLS extension.
This extension is proposed in RFC 7627 as a result of a weakness in the way session
resumption works. The weakness is called a “triple handshake attack,” essentially
amounting to a man-in-the-middle attack that allows decryption of the PMK or
session keys in a speciﬁc scenario (Bhargavan, Delignat-Lavaud, Pironti, Langley, &
Ray, 2015). The ﬁx, according to the RFC is to “contextually [bind] the master
secret to a log of the full handshake that computes it, thus preventing such attacks”
(Bhargavan et al., 2015, p. 1). Importantly for the thesis, this is implemented by
changing the values seeded to the pseudo-random function to be more connection
parameter speciﬁc; it does nothing to e↵ect how the master key, once computed, is
stored. The RFC does mention “shredding” of the PMK in memory as soon as
possible.
Incidentally, RFC 7627 also mentions RFC 5077 (session tickets), indicating
that the extended master secret does not necessarily cover session tickets.
Speciﬁcally, “[...] if the client and server support the session ticket extension
[RFC5077], the session hash does not cover the new session ticket sent by the server.
Hence, a man-in-the-middle may be able to cause a client to store a session ticket
that was not meant for the current session” (Bhargavan et al., 2015, p. 12).
21
As mentioned, Wireshark is a well-known and industry standard tool for
network protocol analysis. It performs semi-automated analysis and protocol
parsing through the use of “dissectors.” This information is relevant because public
and static values implemented in the RFCs can be seen in the source code of the
SSL protocol dissector (Wireshark, 2015). These values, along with others discussed
in the ensuing section on Windows implementation, will provide important context
during searches for connection speciﬁc values and secrets.
2.3 Windows Internals
This section will review the components of the Windows operating system
that may have a bearing on the thesis. Memory management is reviewed brieﬂy to
point out mechanisms that may e↵ect design decisions that are incorporated into
the methodology. The TLS implementation is also reviewed, looking at potential
artifacts that should exist within the implementation, and where those artifacts may
be found.
2.3.1 Memory Management
One of the most important aspects of memory management is how to
eﬃciently virtualize the relatively constrained resource that is physical main
memory and present the illusion to each process that it has it’s own full, contiguous
address space. This is generally accomplished through two mechanisms: Paging and
Segmentation. These concepts are implemented through a combined e↵ort of the
hardware and operating system working in tandem.
The Windows operating systems expressly forgo segmentation per the
Microsoft documentation. It is not actually possible to disable segmentation on
32-bit Intel hardware without disabling “protected-mode,” the mode required to
enable paging. Windows therefore takes advantage of the “ﬂat model” of
segmentation, in which a single contiguous segment is presented to the operating
22
system and applications (in reality, there are at least two overlaid contiguous
segments for code and data) (Intel Corporation, 2015). In contrast, Intel 64
architecture (ostensibly IA-32e) does not implement segmentation (Intel
Corporation, 2015, p. 5-5).
Paging is supported from the Windows perspective through the storage of
the Directory Table Base (DTB) and associated physical pages. This is a value
stored within the EPROCESS structure of each process and is the physical address
of the process’s page directory table. This value is what gets loaded into the CR3
hardware register during a context switch, and is an essential component of
rebuilding a process’s virtual address space forensically.
Windows extends paging further thorough a mechanism dubbed Virtual
Address Descriptors (VADs). A VAD represents a given contiguous allocation of
virtual memory pages (Ligh et al., 2014). This contiguous allocation can provide
interesting insight, as it represents another layer of abstraction beyond the page
table, functionally grouping address ranges into items like ﬁles and heaps.
The relevance of VADs to the thesis speciﬁcally is that they also provide
access control information as to whether the VAD is readable, writable, and
executable (amongst other states). When scanning for artifacts in a process address
space, one could possibly narrow the scan to all read-writable pages. This would
signiﬁcantly improve performance by passing over regions that are not writable and
would not contain a committed ephemeral structure.
2.3.1.1. Virtual Address Space
An important concept to grasp when considering any operating system
forensics is the relationship between the underlying executive processes of the OS
and the guest process that they service and supervise. The two roles of supervisor
and guest are separated by privileges and typically denoted as “Kernel-mode” and
23
“User-mode” processes respectively. When a user-mode process wishes to perform a
privileged action, such as accessing the hardware for I/O, it “traps” into the
“Kernel-mode” OS process, which performs this action on its behalf.
In order to accomplish the task above, Windows splits the virtual address
space of each process into two parts. The ﬁrst part of the virtual address space is
for the process itself as a user-mode address space, unique to each process and
isolated. On 32-bit systems this is a value of 2GB by default, extensible to 3GB,
and on 64-bit systems the user-mode space can be 8TB by default (Microsoft,
n.d.-e). The second part, however, is the kernel address space, which contains both
process speciﬁc structures and components that are mapped across all processes4.
This is actually a relic of the design from VAX/VMS, which shared one of the main
developers of Windows NT (one David N. Cutler) (Russinovich, Solomon, &
Allchin, 2005).
The relevance this bears to the thesis is several fold. The ﬁrst reason is that
pointers are address, so scanning physical memory will only be so helpful before it
becomes important to identify the virtual address space of the process. A physical
page can also be mapped into multiple virtual address spaces, meaning that a single
physical match could actually be relevant to multiple user-mode processes. The
second is that processes share a writable portion of the kernel-mode address space
in the form of “pools” which are essentially system heaps. The third is that
user-mode process dumps do not include the kernel-mode portion of the virtual
address space, so scanning the kernel-address space may become an important
separate component of the methodology.
4there is also the concept of session space, which is mapped across all processes within the same
session, but is functionally similar to “system space” and contained within the kernel-mode part of
the virtual address space (Russinovich, Solomon, & Ionescu, 2012)
24
2.3.1.2. Virtual Memory Allocation
Data of arbitrary size is often allocated on the “heap” (or heaps), an area
explicitly designated for such operations. In the Windows implementation, the
kernel mode “ EPROCESS” structure contains a sub-component known as the
Process Execution Block (PEB). The PEB contains two members of interest: a
pointer “ProcessHeaps” and a numeric ﬁeld “NumberOfHeaps.” The ProcessHeaps
pointer references an array of pointers to the heaps (the number of which is kept in
the NumberOfHeaps member) (Microsoft, n.d.-h).
It may at ﬁrst seem as though this would be the only information required,
and knowledge of the pages or VADs would be superﬂuous to the task of scanning
the address space eﬃciently. This assumption, however, is ﬂawed because the heap
is not the only place an application can store or load writable data. A speciﬁc
example is that any memory allocated with “VirtualAlloc()” will not be part of the
heap (Ligh et al., 2014, p. 192).
Windows also contains the concept of “Pools,” which can essentially be
thought of as Kernel-mode heaps. There are two types of pools: Paged and
Non-Paged. As the name states, the paged pool contains elements that can be
paged to the page ﬁle, whereas the non-paged pool contains elements which should
and will not be paged (Microsoft, n.d.-f). Each pool contains sections identiﬁed by a
“pool tag,” which is composed of four characters. If the keys generated by the cache
are in someway shared between processes, then they may exist in one of the pools,
and may further be marked by a unique pool tag.
2.3.2 TLS Implementation
Microsoft implements TLS through the aptly named “Secure Channel”
(Schannel) Security Support Provider (SSP). According to Microsoft:
25
“The TLS protocols, SSL protocols, DTLS protocol, and the Private
Communications Transport (PCT) protocol are based on public key
cryptography. The Schannel authentication protocol suite provides these
protocols.” (Microsoft, 2015d)
Schannel then relies on several underlying cryptographic providers to handle key
generation and management. The entire suite of cryptographic providers is part of
the CryptoAPI Next Generation (CNG).
CNG provides a host of features, including Pseudo-Random Number
Generators (PRNGs), NSA Suite B support, process isolation for “long-term keys”
and kernel-mode cryptography that extend services like S/MIME, Key Storage, the
Data Protection API (DPAPI) used for secure secret storage like Certiﬁcates, and of
course the cipher suites leveraged by TLS. CNG was introduced in Windows Vista
and will eventually completely replace the CryptoAPI which has provided such
services previously, though the documentation claims that CNG will continue to
provide legacy support (Microsoft, 2014a).
2.3.2.1. DPAPI
The DPAPI is a central component to the cryptographic services provided by
Windows to developers, allowing encryption of arbitrary secrets as “blobs” through
a very simple interface. The entire scheme leveraged by DPAPI is outside of the
scope of this literature review, but it bears relevance in that Private Certiﬁcates that
are stored persistently on disk are protected via this mechanism (Microsoft, 2014b).
Private Keys are stored embedded within the certiﬁcate in a DPAPI blob,
though the rest of the certiﬁcate (including the public key) remains unencrypted
(Picod, 2016). A lot of great work has been done on reversing DPAPI, which is
discussed in the “prior work” section of this literature review.
26
2.3.2.2. Key Isolation
The CNG documentation explicitly devotes a section to key isolation,
perhaps the most important detail of the implementation. Microsoft explicitly
states the following requirement: “To comply with common criteria (CC)
requirements, the long-lived keys must be isolated so that they are never present in
the application process” (Microsoft, 2014b). To meet this criteria, keys are isolated
into a single process; ﬁttingly, the LSASS process was chosen.
Furthermore, the documentation states that access to all private keys is
handled by the “key storage router,” the functionality of which is placed exclusively
within Ncrypt.dll (Microsoft, 2014b). This revelation is critical as it suggests that
any key negotiations for SSL/TLS will route through Ncrypt. Key isolation is
enabled by default beginning with Windows Vista/Server 2008. The model for this
isolation from Microsoft can be seen in Figure 2.6
27
Figure 2.6. Microsoft Key Isolation paradigm (Microsoft, 2014b)
2.3.2.3. Schannel
Schannel is loaded into LSASS, along with the process that is leveraging TLS
to encrypt and decrypt data. The request for key material is passed to the LSASS
28
process through another user-mode DLL within the requesting process. This ﬂow is
depicted in ﬁgure 2.7 from Microsoft.
Figure 2.7. Schannel SSP architecture (Microsoft, 2015d)
A few points of interest pertaining to the Schannel implementation were
scattered throughout the documentation. The pertinent questions about capability
of Schannel for the thesis surrounds three main topics:
1. Support for session resumption
2. Order of preference for cipher suites
3. Schannel-speciﬁc constants
Microsoft states that they added support for RFC 5077 session resumption in
Windows 8 and Server 2012 R2. This extends to clients like Windows phone and
29
Windows RT. The article also makes an interesting statement that RFC 5077
support would allow a cluster of servers to resume each others tickets (Microsoft,
2014d), indicating that somehow the key to decrypt these session tickets must be
shared between servers.
The order for preference of cipher suites is listed in a section of the Schannel
SSP documentation, and is shown as consistent from Vista forward (the point at
which CNG, and thus AES cipher suites, were introduced) (Microsoft, 2014c). This
document shows a preference for RSA key exchanges. Separate documentation
indicates that the cipher suite preference can be changed through group policy or
programmatically and can be queried using “BCryptEnumContextFunctions,”
which returns them in the order of priority. Incidentally, this function denotes
bcrypt as a library of interest. It is described by Microsoft at the “Windows