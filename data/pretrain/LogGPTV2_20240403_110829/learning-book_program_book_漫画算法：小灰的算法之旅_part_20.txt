7.
return null;
8.
9.
//2.把逆序区域的前一位和逆序区域中刚刚大于它的数字交换位置
10.
//复制并入参，避免直接修改入参
11.
int[] numbersCopy = Arrays.copyof(numbers, numbers.leng
12.
exchangeHead(numbersCopy,index);
13.
//3.把原来的逆序区域转为顺序
14.
reverse(numbersCopy, index);
15.
return numbersCopy;
16.}
17.
18. private static int findTransferPoint(int[] numbers){
19.
for(int i=numbers.length-1; i>θ; i--){
20.
if(numbers[i]> numbers[i-1]){
21.
return i;
22.
}
23.
24.
return 0;
---
## Page 363
25.}
26.
27. private static int[] exchangeHead(int[] numbers, int index)
{
28.
int head = numbers[index-1];
29.
for(int i=numbers.length-1; i>0; i--){
30.
if(head 1）。
---
## Page 373
127093
1270936
很好，那么接下来呢？从刚才的结果
1270936中再删除一个数字，能得到的最小值是多少？
这一次的情况略微复杂，因为10，所以被删除的数字应该是7！
---
## Page 374
不错，这里每一步都要求得到删除一
个数字后的最小值，经历3次，相当于求出了删除k（k=3）个数字
后的最小值。
像这样依次求得局部最优解，最终
得到全局最优解的思想，叫作贪心算法。
小灰，按照这个思路，你尝试用代码
来实现一下吧。
---
## Page 375
好的，我来写一写试试吧。
1. /**
2.*删除整数的k个数字，获得删除后的最小值
3.*@param num
原整数
4.
*@param k
删除数量
5.
*/
6.public static String removeKDigits(String num, int k) {
7.
String numNew = num;
8.
for(int i=0; i numNew.charAt(j+1)){
13.
numNew = numNew. substring(0, j) +
numNew.substring(j+1, numNew.length(
14.
hasCut = true;
15.
break;
16.
17.
---
## Page 376
18.
//如果没有找到要删除的数字，则删除最后一个数字
19.
if(!hasCut){
20.
numNew = numNew.substring(0, numNew.length()-1)
21.
22.
//清除整数左侧的数字0
23.
numNew = removeZero(numNew);
24.
25.
//如果整数的所有数字都被删除了，直接返回0
26.
if(numNew.length() == 0){
27.
return "o";
28.
29.
return numNew;
30.}
31.
32. private static String removeZero(String num){
for(int i=0; i1，从而删除4。
以目前的代码逻辑，下一轮循环时，还要从头并始遍历，再次重复遍历
大部分数字，一直遍历到数字3，发现3>2，从而删除3。
事实上，我们应该停留在上一次删除的位置继续进行比较，而不是再次
从头开始遍历。
2.subString方法本身性能不高。
---
## Page 378
subString方法的底层实现，涉及新字符串的创建，以及逐个字符的复
制。这个方法自身的时间复杂度是O(n)。
因此，我们应该避免在每删除一个数字后就调用subString方法。
哎呀，那应该怎么来优化呢？
以k作为外循环，遍历数字作为内循
环，需要额外考虑的东西非常多。
所以我们换一个思路，以遍历数字作
为外循环，以k作为内循环，这样可以写出非常简洁的代码，让我
们来看一看。
1./**
2.*删除整数的k个数字，获得删除后的最小值
---
## Page 379
3.*@param num
原整数
4.*@param k
删除数量
5.
*/
6.
public static String removeKDigits(String num, int k){
7.
//新整数的最终长度=原整数长度-k
8.
int newLength = num.length() -k;
9.
//创建一个栈，用于接收所有的数字
10.
char[] stack = new char[num.length()];
11.
int top =0;
12.
for （int i = 0;i0 &&stack[top-1]>c &&k>θ）{
17.
top -= 1;
18.
k -= 1;
19.
}
20.
//遍历到的当前数字入栈
21.
stack[top++]= c;
22.
23.
//找到栈中第1个非零数字的位置，以此构建新的整数字符串
24.
int offset = 0;
25.
while （offset< newLength && stack[offset]==‘o'）{
---
## Page 380
26.
offset++;
27.
28.
offset,newLength - offset);
29.}
30.
31.
32. public static void main(String[] args）{
34.
System.out.println(removeKDigits("3020o",1));
35.
System.out .println(removeKDigits("1o", 2));
36.
System.out.println(removeKDigits("541270936",3));
37.}
上述代码非常巧妙地运用了栈的特性，在遍历原整数的数字时，让所有
数字一个一个入栈，当某个数字需要删除时，让该数字出栈。最后，程
序把栈中的元素转化为字符串类型的结果。
下面仍然以整数541270936，k=3为例。
当遍历到数字5时，数字5入栈。
原整数
5