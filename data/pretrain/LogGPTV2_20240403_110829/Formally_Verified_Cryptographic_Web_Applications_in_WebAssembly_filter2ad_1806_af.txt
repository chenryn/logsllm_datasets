to compute a Difﬁe-Hellman
shared secret with gs, which it then combines with rk 0
to obtain a new root key (rk 1) and a sender chaining
key (ck i
0) for message sent from I to R.
● Encrypt: I uses the sender chaining key to derive authen-
ticated encryption keys (ek 0, mk 0) that it uses to encrypt
its ﬁrst message m0 to R. It also derives a fresh sender
chaining key (ck i
1) for use in subsequent messages.
On receiving this message, the responder R performs the
dual operations (Respond, ReceiveRatchet, Decrypt) to de-
rive the same sequence of keys and decrypts the ﬁrst message.
At this point, we have established a unidirectional channel
from I to R. To send messages back from R to I, R calls
SendRatchet to initialize its own sender chaining key ck r
0,
and then calls Encrypt to encrypt messages to I.
At the end of the ﬁrst two messages, both I and R have
a session that consists of a root key (rk), two chaining keys,
one in each direction (cki, ckr), and ephemeral Difﬁe-Hellman
keys (gx0 , gy0) for each other.
Per-Message Key Update (Double Ratchet). In the second
phase of the conversation (Figure 16), both I and R send
sequences (or ﬂights) of encrypted messages to each other. At
the beginning of each ﬂight, the sender calls SendRatchet to
trigger a fresh Difﬁe-Hellman computation that mixes new key
material into the root key. Then, for each message in the ﬂight,
the sender calls Encrypt, which updates the chaining key (and
hence encryption keys) with each message. The receiver of the
ﬂight symmetrically calls RecvRatchet for each new ﬂight,
followed by Decrypt for each message.
This mechanism by which root keys, chaining keys, and
encryption keys are continuously updated is called the Double
Ratchet algorithm [3]. Updating the chaining key for every
message provides a ﬁne-grained form of forward secrecy:
even if a device is compromised by a powerful adversary, the
keys used to encrypt previous messages cannot be recovered.
Updating the root key for every ﬂight of message provides a
form of post-compromise security [36]: if an adversary gains
temporary control over a device and obtains all its keys, he
can read and tamper with the next few messages in the current
ﬂight, but loses this ability as soon as a new ﬂight of messages
is sent or received by the device.
Specifying Signal in Pure F∗. We formally specify the Signal
protocol in a purely functional (and terminating) subset of
F*. Appendix B shows the full F∗ module Spec.Signal.Core
with the main functions of this speciﬁcation: initiate, respond,
ratchet, encrypt, and decrypt.
The main difference between these functions and the pro-
tocol operations in Figures 15 and 16 (except for the change
of syntax) is that our F∗ code is purely functional and so
it cannot generate fresh random values, such as ephemeral
keys. Instead, each function is explicitly given as additional
arguments all the fresh key material it may need. With this
change, the code for sendRatchet and recvRatchet becomes
the same, and is implemented as a single ratchet function.
Spec.Signal.Core in turn relies on two other speciﬁcation
modules: (1) Spec.Signal.Crypto speciﬁes the cryptographic
constructions used in Signal, by building on the formal crypto
specs in HACL∗; (2) Spec.Signal.Messages speciﬁes serializ-
ers for protocol messages. For example, the function encrypt
in Appendix B calls the hmac and hkdf3 functions to derive
new keys, and calls aes enc and mac whisper message to
encrypt and then MAC the message; all these functions are
from Spec.Signal.Crypto. To serialize the encrypted message
it calls serialize whisper message (from
before MACing,
Spec.Signal.Messages).
Linking the F∗ speciﬁcation to a security proof. Various
aspects of the Signal protocol have been previously studied
in a variety of cryptographic models, using both manual
proofs [37]–[40] and automated tools [16]. One of our goals
is to bridge the gap between these high-level security anal-
yses and the concrete low-level details of how LibSignal is
implemented and deployed in messaging applications today.
Although our Signal speciﬁcation is written in the syntax of
F*, it is quite similar to protocol models written in other formal
languages. For example, we were able to easily transcribe our
speciﬁcation in the input language for the ProVerif symbolic
protocol analyzer [17]. We analyzed the resulting model for all
the security goals targeted by Signal: conﬁdentiality, mutual
authentication, forward secrecy, and post-compromise security.
To simplify automatic veriﬁcation, we proved these properties
separately for the X3DH protocol and the subsequent Double-
Ratchet phase, and we limited each ﬂight to 2 messages.
Our veriﬁcation results for this model closely mirror previous
results in [16], which used ProVerif to analyze a non-standard
variant of Signal. Hence, our analysis serves both as a sanity
1267
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:34 UTC from IEEE Xplore.  Restrictions apply. 
check on our speciﬁcation, and as a conﬁrmation that the
expected security guarantees do hold for the standard version
of Signal implemented in LibSignal.
B. Implementing Signal in Low∗
An implementation of the Signal protocol needs to not just
encode the protocol logic depicted in Figures 15 and 16 but
also make choices on what cryptographic primitives to use,
how to format messages, and how to provide a usable high-
level API to a messaging application like WhatsApp. Since we
aim to build a drop-in replacement for LibSignal-JavaScript,
we mostly adopt the design decisions of that library.
Crypto Algorithms from HACL*. To implement message
encryption, LibSignal uses a combination of AES-CBC and
HMAC-SHA256 to implement a custom (but relatively stan-
dard) scheme for authenticated encryption with associated
data (AEAD). To derive keys, LibSignal implements HKDF,
again using HMAC-SHA256. For both AES-CBC and HMAC-
SHA256, LibSignal-JavaScript relies on the WebCrypto API.
For Difﬁe-Hellman, LibSignal relies on the Curve25519
elliptic curve, and for signatures, it relies on a non-standard
signature scheme called XEdDSA [41]. Neither of these prim-
itives are available in WebCrypto. So, LibSignal-JavaScript
includes a C implementation of these constructions, which
is compiled to JavaScript using Emscripten. As discussed
in Section IV-C,
is vulnerable to
timing attacks. And even if Curve25519 is added to We-
bCrypto, XEdDSA is unlikely to be included in any standard
API. Hence, high-assurance WebAssembly implementations
for these primitives appear to be needed for LibSignal.
the resulting JavaScript
Most of these primitives were already available in HACL*,
except for AES-CBC and XEdDSA. We extended HACL*
with formal speciﬁcations and veriﬁed implementations for
these primitives and compiled them to WebAssembly.
Formatting Messages using Protocol Buffers. To deﬁne its
concrete message formats, LibSignal uses the ProtoBuf for-
mat, known for its compactness. Hence, LibSignal-JavaScript
includes an efﬁcient ProtoBuf parser and serializer written
in JavaScript. Parsing protocol messages is an error-prone
task, and verifying efﬁcient parsers can be time-consuming.
So instead, we treat the ProtoBuf library as untrusted code
(under the control of the adversary) and reimplement a veriﬁed
serializer for the one case in LibSignal where the security of
the protocol relies on the message formatting.
When user messages are encrypted in LibSignal, they are
ﬁrst enciphered using AES-CBC, then the ciphertext is format-
ted with a ProtoBuf format called WhisperMessage, and the
resulting message is HMACed for integrity. Consequently, the
formatting of WhisperMessages becomes security-critical: if
the ProtoBuf library has a bug in the serialization or parsing of
these messages, an attacker may be able to bypass the HMAC
and tamper with messages sent between devices.
We specify and implement a veriﬁed serializer for the
WhisperMessage ProtoBuf format. This code includes generic
serializing functions for variable-size integers (varint) and
bytearrays (bytes), and a specialized function for converting
a WhisperMessage into a sequence of bytes. This serializer
is called during both message encryption and decryption.
Notably, we do not implement a veriﬁed WhisperMessage
parser, which would be signiﬁcantly more complex. Instead,
we require that the (unveriﬁed) application code at the re-
cipient parses the encrypted message and call the decrypt
function with the message components. To verify the MAC,
our code re-serializes these components using our veriﬁed
serializer. This design choice imposes a small performance
penalty during decryption, but yields protocol code that is
simpler and easier to verify.
Implementing the Core Protocol Functions. We closely
followed our formal speciﬁcation to reimplement the core
functionality of LibSignal in Low*. The main difference is
that our code is stateful:
it reads and writes from arrays
that are allocated by the caller, and it stores and modiﬁes
local variables and arrays on the stack. (In the compiled
WebAssembly, all these arrays are allocated within the WASM
memory.) We present in Appendix C. the Low∗ implementation
for the ratchet function of the Signal Protocol. The full Low∗
codebase for Signal, including the ProtoBuf serializer and all
protocol functions, consists of 3500 lines of code, compared
to 570 lines of F∗ speciﬁcations.
We prove that our low-level code matches the high-level
spec (functional correctness), and that it never reads and writes
arrays out-of-bounds (memory safety). Furthermore, we prove
secret independence for the whole protocol layer: our Signal
code treats all inputs as secret and hence never branches on
secret values or reads memory at secret indices. Note that
the application code outside our veriﬁed core may well leak
identity keys and message contents, but our proof guarantees
that these leaks will not come from our protocol code.
A Wrapped WebAssembly Module for Signal. We compile
our Signal code to WebAssembly functions where all inputs
and outputs are expected to be allocated in the WASM
memory. For instance, the initiate function, which in Low∗
takes ﬁve pointers and a boolean, is now a WASM export
that wants ﬁve WASM addresses along with a 32-bit integer
for the boolean. It returns an error code, also a 32-bit integer.
Impl Core initiate” (func 34))
JavaScript applications
(type 34 (func (param i32 i32 i32 i32 i32 i32) (result i32)))
(func 34 (type 34) (local ...))
(export ”Signal
typical
However,
like LibSignal-
JavaScript would use JavaScript arrays and records to pass
around session state, ephemeral key material, and parsed
messages. To properly embed our WebAssembly code within
a JavaScript application, we automatically generate a wrapper
module in JavaScript that provides functions to translate back
and forth between the two views by encoding and decoding
JavaScript ArrayBuffers in the WASM memory. For example,
the JavaScript wrapper code for calling a WebAssembly func-
tion that expects a list of buffer objects is in Figure 14.
Extending the Protocol Module to Full LibSignal*. Lib-
Signal encapsulates all
the protocol functionality within a
1268
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:34 UTC from IEEE Xplore.  Restrictions apply. 
function callWith(f) {
// Saves the stack pointer value before the function call
var m32 = new Uint32Array(FStarSignal.Kremlin.mem.buffer);
var sp = m32[0];
// Calls the function
var ret = f();
// Restores thae value of the stack pointer
m32[0] = sp;
return ret;
}
function callWithBuffers(args, func) {
callWith(() => {
// Allocates arguments in the Wasm memory and grows the stack pointer
var pointers = args.map((arg) => grow(new Uint8Array(arg)));
// Calls the function with the pointers to the allocated zones
var result = func(pointers);
for (var i = 0; i < args.length; i++) {
// Copying the contents back to Javascript
args[i].set(read memory(pointers[i], args[i].byteLength));
}
return result;
});
}
}
// Example of function using the combinator
function FStarGenerateKeyPair() {
var keyPair = {privKey: new ArrayBuffer(32), pubKey: new ArrayBuffer(33)};
callWithBuffers(
[keyPair.privKey, keyPair.pubKey],
function([privKeyPtr, pubKeyPtr]
) {
FStarSignal.Module.Signal Impl Core generate key pair(
);})
return keyPair;
privKeyPtr, pubKeyPtr
JavaScript wrapper for calling a WebAssembly function func that
Fig. 14.
expects a list of ArrayBuffer objects encoded in the WebAssembly memory.
small set of JavaScript functions that provide a simple session-
based API to the user application. At any point, the user may
ask LibSignal to either (a) initiate a new session, or (b) to
respond to a session request it has received, or (c) to encrypt
a message for a session, or (d) to decrypt a message received
for a session. In addition, periodically, the application may ask
LibSignal to generate signed and onetime prekeys.
The code for these functions needs to manage a session
data structure, and load and store it from long-term storage;
it needs to implement message formats, handle message loss
and retransmission, and respond gracefully to a variety of
errors. In LibSignal-JavaScript, all this code is interleaved with
the core cryptographic protocol code for Signal. We carefully
refactored the JavaScript code to separate out the protocol
code as a separate module, and then replaced this module with
our veriﬁed WebAssembly implementation. Hence, we obtain
a modiﬁed LibSignal* library that meets the same API as
LibSignal-JavaScript, but uses a veriﬁed WebAssembly code
for both the protocol operations and the cryptographic library.
Protecting Signal against JavaScript bugs. In LibSignal,
the application stores the device’s long-term private identity
key, but all other session secrets, including the Difﬁe-Hellman
private keys, session root keys, chaining keys, and pending
message encryption keys, are stored locally by LibSignal using
the web storage API. Although the user application is not
entrusted with this data, due to the inherent lack of isolation
So what security guarantees can we expect
in JavaScript, any bug in the JavaScript code of LibSignal, the
user application, or any of the modules they depend on may
leak these session secrets, breaking the guarantees of Signal.
to preserve
when we embed our veriﬁed WebAssembly code within an
unveriﬁed application like LibSignal-JavaScript? The isolation
guarantees of WebAssembly mean that bugs in the surround-
ing JavaScript cannot affect the functional behavior of our
veriﬁed code. However, the JavaScript still has access to the
WebAssembly memory, and so any bug can still corrupt or
leak all our protocol secrets.
To protect against such bugs, we write our JavaScript
wrapper in a defensive style: it hides the WASM memory in a
closure that only reveals a functional API to the rest of LibSig-
nal. Since all the cryptographic functionality is implemented
as WebAssembly modules loaded within this wrapper, short-