2022/3/17 16:07
Evernote Export
file:///C:/Users/jiushi/Desktop/k8s未授权.html
1/20
介绍
k8s全称kubernetes，是一个由google开源的，用于自动部署，扩展和管理容器化应用程序的开源系统。通过k8s可跨多台主机进行容器编排、快速按需扩展容器化应用及其资源、
对应用实施状况检查、服务发现和负载均衡等。
组件介绍
如图所示，k8s集群由主控节点（Master node，以下简称master）和工作节点（Worker Node，以下简称node）组成：
 master节点负责资源调度，调度应用，维护状态和应用扩容等。 
node节点上跑着应用服务，每个Node节点有一个kubelet，负责node与master之间的通信。
Master node组件
1. APIserver集群统一入口，以restful方式，交给etcd存储。用户端一般通过kubectl命令行工具与kube-apiserver进行交互。
2. .Controller-manager 处理集群中常规后台任务，通常一个资源对应一个控制器。
3. Scheduler 节点调度，选择node节点应用部署，负责决定将Pod放在哪个Node上。会对各个节点的负载、性能、数据考虑最优的node。 
4. Etcd 存储系统，用于保存集群中相关的数据。
Worker node组件
1. Kubelet Master派到node节点的agent，管理本机容器的各种操作。 
2. Kube-proxy 提供网络代理，用来实现负载均衡等操作。 
3. Pod 是k8s中的最小部署单元，一组容器的集合，一个pod中的容器是共享网络的。主要是基于docker技术来搭建的。
用户端命令下发通常流程如下：
（1）客户端根据用户需求，调用kube-apiserver相应api；
 （2）kube-apiserver根据命令类型，联动master节点内的kube-controller-manager和kube-scheduler等组件，通过kubelet进行下发新建容器配置或下发执行命令等给到对应
node节点； 
（3）node节点与容器进行交互完成下发的命令并返回结果； 
（4）master节点最终根据任务类型将结果持久化存储在etcd中。
安全机制
访问k8s集群的时候，需要经过三个安全步骤完成具体操作。过程中都要经过apiserver，apiserver做统一协调。
第一步 认证，判断用户是否为能够访问集群的合法用户。 
第二步 鉴权，通过鉴权策略决定一个API调用是否合法。
 第三步 准入控制，就算通过了上面两步，客户端的调用请求还需要通过准入控制的层层考验，才能获得成功的响应。大致意思就是到了这步还有一个类似acl的列表，如果列表有请
求内容，就通过，否则不通。它以插件的形式运行在API Server进程中，会在鉴权阶段之后，对象被持久化etcd之前，拦截API Server的请求，对请求的资源对象执行自定义（校
验、修改、拒绝等）操作。
序号
认证方式
认证凭据
1
匿名认证
Anonymous requests
2
白名单认证
BasicAuth认证
3
Token认证
Webhooks、ServiceAccount Tokens、OpenID Conne
ct Tokens等
4
X509证书认证
匿名认证一般默认是关闭的。
白名单认证一般是服务启动时加载的basic用户配置文件，并且通常没有更多设置的话basic认证仅仅只能访问但是没有操作权限。 
token认证更涉及到对集群和pod的操作，这是我们比较关注的。 
X509证书认证是kubernetes组件间内部默认使用的认证方式，同时也是kubectl客户端对应的kube-config中经常使用到的访问凭证，是一种比较安全的认证方式。
当API Server内部通过用户认证后，就会执行用户鉴权流程，即通过鉴权策略决定一个API调用是否合法，API Server目前支持以下鉴权策略
序号
鉴权方式
描述
1
Always
当集群不需要鉴权时选择AlwaysAllow
2
ABAC
基于属性的访问控制
3
RBAC
基于角色的访问控制
2022/3/17 16:07
Evernote Export
file:///C:/Users/jiushi/Desktop/k8s未授权.html
2/20
4
Node
一种对kubelet进行授权的特殊模式
5
Webhook
通过调用外部REST服务对用户鉴权
Always策略光看描述就知道，生产环境中必定不会存在。
ABAC虽然功能强大，但是难以理解且配置复杂已经被RBAC替代。 
RBAC是目前k8s中最主要的鉴权方式。 
而Node鉴权策略主要是用于对kubelet发出的请求进行访问控制，限制每个Node只访问它自身运行的Pod及相关Service、Endpoints等信息。 当RBAC无法满足某些特定需求时
候，可自行编写鉴权逻辑并通过Webhook方式注册为kubernetes的授权服务，以实现更加复杂的授权规则。
RBAC、角色、账号、命名空间
RBAC，基于角色的访问控制（Role-Based Access Control）在RBAC中，权限与角色相关联，用户通过成为适当角色的成员而得到这些角色的权限。这就极大地简化了权限的管
理。这样管理都是层级相互依赖的，权限赋予给角色，而把角色又赋予用户
在k8s中，只有对角色的权限控制，访问主体都必须通过角色绑定，绑定成k8s集群中对应的角色，然后根据绑定的角色去访问资源。而每种角色又只能访问它所对应的命名空间中的
资源。 k8s支持多个虚拟集群，它们底层依赖于同一个物理集群。这些虚拟集群被称为命名空间（namespace）。 每个k8s资源只能在一个命名空间中。命名空间是在多个用户之间
划分集群资源的一种方法
命名空间->该空间绑定的系统角色
系统默认4个命名空间:
default--没有指明使用其它名字空间的对象所使用的默认名字空间
kube-system-- Kubernetes 系统创建对象所使用的名字空间
kube-public--此命名空间下的资源可被所有人访问（包括未授权用户） 
kube-node-lease--集群之间的心跳维护
RBAC中一直强调角色，这里角色也分为两种，一种是普通角色role，一种是集群角色clusterrole。普通角色role用于平常分配给运行的容器，而集群角色更多承担管理工作
kubectl get ns #查看命名空间
查看普通角色，没有特别指明的话查看都是在default空间中。没有配置的话默认没有
kubectl get role #查看普通角色
指定kube-system空间，可以看到很多系统自带的角色
kubectl get role kube-system
集群角色。集群角色在default和kube-system中都是一样的
kubectl get clusterrole
2022/3/17 16:07
Evernote Export
file:///C:/Users/jiushi/Desktop/k8s未授权.html
3/20
集群中有个最高权限角色cluster-admin，它的拥有集群所有资源的所有权限。因此如果访问主体绑定到该角色的话，就会引发很大的安全问题
kubectl describe clusterrole cluster-admin -n kube-system
普通的admin权限也比较大，但是比起cluster-admin还是差了太多
kubectl describe clusterrole admin -n kube-system
2022/3/17 16:07
Evernote Export
file:///C:/Users/jiushi/Desktop/k8s未授权.html
4/20
常见的命令
绑定账号:
比如在集群范围将cluster-admin ClusterRole授予用户user1，user2和group1
kubectl create clusterrolebinding cluster-admin --clusterrole=cluster-admin --user=user1 --user=user2 --group=group1
给服务账号绑定角色
kubectl create clusterrolebinding default-admin --clusterrole=cluster-admin --serviceaccount=kube-system:default
查看所有节点
kubectl get nodes
查看secret
kubectl get secret
查看系统的kubeconfig (查看当前的用户认证)
kubectl config view
2022/3/17 16:07
Evernote Export
file:///C:/Users/jiushi/Desktop/k8s未授权.html
5/20
 列出当前命名空间下的所有 services
kubectl get svc
查看某个service的详细信息
kubectl describe svc kubernetes
切换用户
kubectl config use-context klvchen@kubernetes
secret存储token查询
kubectl describe secret
获取指定secret的token
(账号名在-token前，就叫default)
kubectl describe secret default-token-8h165 -n kube-system
获取管理员用户
kubectl get clusterrolebinding -n kube-system
2022/3/17 16:07
Evernote Export
file:///C:/Users/jiushi/Desktop/k8s未授权.html
6/20
k8s攻击
未授权访问
未授权访问端口
功能
利用方式
6443，8080
kube-apiserver
未授权访问获取kube-system的token，通过kubectl使用kube-system的token获取pod列表。之
后可进一步创建pod或控制已有pod进行命令执行等操作。
10250，10255
kubelet
kubeletctl批量获取pod等信息，尝试获取pod内/var/run/secrets/kubernetes.io/serviceaccou
n/的token
2379
etcd
导出全量etcd配置，获取k8s认证证书等关键信息，进而通过kubectl创建恶意pod或控制已有po
d，后续可尝试逃逸至宿主机
30000以上
dashboard
配置问题导致可跳过认证进入后台
2375
docker
Docker daemon默认监听2375端口且未鉴权，我们可以利用API来完成Docker客户端能做的所有
事情。
kube-apiserver未授权
6443和8080端口区别
1）本地主机端口
HTTP服务
默认端口8080，修改标识–insecure-port
默认IP是本地主机，修改标识—insecure-bind-address
在HTTP中没有认证和授权检查
主机访问受保护
2）Secure Port