解决方案：
    PersistenceManager pm = getPM();
    Query q = pm.newQuery("select * from Users where name = nameParam");
    q.declareParameters("String nameParam");
    q.execute(input);
引用(JDO)：  
[JDO: Object Retrieval](https://db.apache.org/jdo/object_retrieval.html)  
引用（sql注入）  
[WASC-19: SQL
Injection](http://projects.webappsec.org/w/page/13246963/SQL%20Injection)  
[CAPEC-66: SQL Injection](http://capec.mitre.org/data/definitions/66.html)  
[CWE-89: Improper Neutralization of Special Elements used in an SQL Command
('SQL Injection')](http://cwe.mitre.org/data/definitions/89.html)  
[OWASP: Top 10
2013-A1-Injection](https://www.owasp.org/index.php/Top_10_2013-A1-Injection)  
[OWASP: SQL Injection Prevention Cheat
Sheet](https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet)  
[OWASP: Query Parameterization Cheat
Sheet](https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet)
# 潜在的sql/JPQL注入(JPA)
漏洞特征： SQL_INJECTION_JPA  
输入进sql查询的数据应该通过严格的检查。在预编译中绑定参数可以更容易的缓解sql注入带来的危害。  
有漏洞的代码：
    EntityManager pm = getEM();
    TypedQuery q = em.createQuery(
        String.format("select * from Users where name = %s", username),
        UserEntity.class);
    UserEntity res = q.getSingleResult();
解决方案：
    TypedQuery q = em.createQuery(
        "select * from Users where name = usernameParam",UserEntity.class)
        .setParameter("usernameParam", username);
    UserEntity res = q.getSingleResult();
引用 (JPA)  
[The Java EE 6 Tutorial: Creating Queries Using the Java Persistence Query
Language](http://docs.oracle.com/javaee/6/tutorial/doc/bnbrg.html)  
引用（sql注入）  
[WASC-19: SQL
Injection](http://projects.webappsec.org/w/page/13246963/SQL%20Injection)  
[CAPEC-66: SQL Injection](http://capec.mitre.org/data/definitions/66.html)  
[CWE-89: Improper Neutralization of Special Elements used in an SQL Command
('SQL Injection')](http://cwe.mitre.org/data/definitions/89.html)  
[OWASP: Top 10
2013-A1-Injection](https://www.owasp.org/index.php/Top_10_2013-A1-Injection)  
[OWASP: SQL Injection Prevention Cheat
Sheet](https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet)  
[OWASP: Query Parameterization Cheat
Sheet](https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet)
# 潜在的JDBC注入(Spring JDBC)
漏洞特征：SQL_INJECTION_SPRING_JDBC  
输入进sql查询的数据应该通过严格的检查。在预编译中绑定参数可以更容易的缓解sql注入带来的危害。或者，每一个参数应该被正确的转义。  
有漏洞的代码：
    JdbcTemplate jdbc = new JdbcTemplate();
    int count = jdbc.queryForObject("select count(*) from Users where name = '"+paramName+"'", Integer.class);
解决方案：
    JdbcTemplate jdbc = new JdbcTemplate();
    int count = jdbc.queryForObject("select count(*) from Users where name = ?", Integer.class, paramName);
引用 (Spring JDBC)  
[Spring Official Documentation: Data access with
JDBC](http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/jdbc.html)  
引用（sql注入）  
[WASC-19: SQL
Injection](http://projects.webappsec.org/w/page/13246963/SQL%20Injection)  
[CAPEC-66: SQL Injection](http://capec.mitre.org/data/definitions/66.html)  
[CWE-89: Improper Neutralization of Special Elements used in an SQL Command
('SQL Injection')](http://cwe.mitre.org/data/definitions/89.html)  
[OWASP: Top 10
2013-A1-Injection](https://www.owasp.org/index.php/Top_10_2013-A1-Injection)  
[OWASP: SQL Injection Prevention Cheat
Sheet](https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet)  
[OWASP: Query Parameterization Cheat
Sheet](https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet)
# 潜在的JDBC注入
漏洞特征：SQL_INJECTION_JDBC  
输入进sql查询的数据应该通过严格的检查。在预编译中绑定参数可以更容易的缓解sql注入带来的危害。  
有漏洞的代码：
    Connection conn = [...];
    Statement stmt = con.createStatement();
    ResultSet rs = stmt.executeQuery("update COFFEES set SALES = "+nbSales+" where COF_NAME = '"+coffeeName+"'");
解决方案：
    Connection conn = [...];
    conn.prepareStatement("update COFFEES set SALES = ? where COF_NAME = ?");
    updateSales.setInt(1, nbSales);
    updateSales.setString(2, coffeeName);
引用 (JDBC)  
[Oracle Documentation: The Java Tutorials > Prepared
Statements](http://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html)  
引用（sql注入）  
[WASC-19: SQL
Injection](http://projects.webappsec.org/w/page/13246963/SQL%20Injection)  
[CAPEC-66: SQL Injection](http://capec.mitre.org/data/definitions/66.html)  
[CWE-89: Improper Neutralization of Special Elements used in an SQL Command
('SQL Injection')](http://cwe.mitre.org/data/definitions/89.html)  
[OWASP: Top 10
2013-A1-Injection](https://www.owasp.org/index.php/Top_10_2013-A1-Injection)  
[OWASP: SQL Injection Prevention Cheat
Sheet](https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet)  
[OWASP: Query Parameterization Cheat
Sheet](https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet)
# 潜在的Scala Slick注入
漏洞特征：SCALA_SQL_INJECTION_SLICK  
输入进sql查询的数据应该通过严格的检查。在预编译中绑定参数可以更容易的缓解sql注入带来的危害。  
有漏洞的代码：
    db.run {
      sql"select * from people where name = '#$value'".as[Person]
    }
解决方案：
    db.run {
      sql"select * from people where name = $value".as[Person]
    }
引用（sql注入）  
[WASC-19: SQL
Injection](http://projects.webappsec.org/w/page/13246963/SQL%20Injection)  
[CAPEC-66: SQL Injection](http://capec.mitre.org/data/definitions/66.html)  
[CWE-89: Improper Neutralization of Special Elements used in an SQL Command
('SQL Injection')](http://cwe.mitre.org/data/definitions/89.html)  
[OWASP: Top 10
2013-A1-Injection](https://www.owasp.org/index.php/Top_10_2013-A1-Injection)  
[OWASP: SQL Injection Prevention Cheat
Sheet](https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet)  
[OWASP: Query Parameterization Cheat
Sheet](https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet)
# 潜在的Scala Anorm注入
漏洞特征：SCALA_SQL_INJECTION_ANORM  
输入进sql查询的数据应该通过严格的检查。在预编译中绑定参数可以更容易的缓解sql注入带来的危害。  
有漏洞的代码：
    val peopleParser = Macro.parser[Person]("id", "name", "age")
    DB.withConnection { implicit c =>
      val people: List[Person] = SQL("select * from people where name = '" + value + "'").as(peopleParser.*)
    }
解决方案：
    val peopleParser = Macro.parser[Person]("id", "name", "age")
    DB.withConnection { implicit c =>
      val people: List[Person] = SQL"select * from people where name = $value".as(peopleParser.*)
    }
引用（sql注入）  
[WASC-19: SQL
Injection](http://projects.webappsec.org/w/page/13246963/SQL%20Injection)  
[CAPEC-66: SQL Injection](http://capec.mitre.org/data/definitions/66.html)  
[CWE-89: Improper Neutralization of Special Elements used in an SQL Command
('SQL Injection')](http://cwe.mitre.org/data/definitions/89.html)  
[OWASP: Top 10
2013-A1-Injection](https://www.owasp.org/index.php/Top_10_2013-A1-Injection)  
[OWASP: SQL Injection Prevention Cheat
Sheet](https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet)  
[OWASP: Query Parameterization Cheat
Sheet](https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet)
# 潜在的安卓sql注入
漏洞特征：SQL_INJECTION_ANDROID  
输入进sql查询的数据应该通过严格的检查。在预编译中绑定参数可以更容易的缓解sql注入带来的危害。  
有漏洞的代码：
    String query = "SELECT * FROM  messages WHERE uid= '"+userInput+"'" ;
    Cursor cursor = this.getReadableDatabase().rawQuery(query,null);
解决方案：
    String query = "SELECT * FROM  messages WHERE uid= ?" ;
    Cursor cursor = this.getReadableDatabase().rawQuery(query,new String[] {userInput});
引用 (Android SQLite)  
[InformIT.com: Practical Advice for Building Secure Android Databases in
SQLite ](http://www.informit.com/articles/article.aspx?p=2268753&seqNum=5)  
[Packtpub.com: Knowing the SQL-injection attacks and securing our Android
applications from them](https://www.packtpub.com/books/content/knowing-sql-injection-attacks-and-securing-our-android-applications-them)
[Android Database Support (Enterprise Android: Programming Android Database
Applications for the
Enterprise)](https://books.google.ca/books?id=SXlMAQAAQBAJ&lpg=PR1&pg=PA64#v=onepage&q&f=false)
[Safe example of Insert, Select, Update and Delete queryies provided by
Suragch](https://stackoverflow.com/a/29797229/89769)
引用（sql注入）  
[WASC-19: SQL
Injection](http://projects.webappsec.org/w/page/13246963/SQL%20Injection)  
[CAPEC-66: SQL Injection](http://capec.mitre.org/data/definitions/66.html)  
[CWE-89: Improper Neutralization of Special Elements used in an SQL Command
('SQL Injection')](http://cwe.mitre.org/data/definitions/89.html)  
[OWASP: Top 10
2013-A1-Injection](https://www.owasp.org/index.php/Top_10_2013-A1-Injection)  
[OWASP: SQL Injection Prevention Cheat
Sheet](https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet)  
[OWASP: Query Parameterization Cheat
Sheet](https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet)
# 潜在的LDAP注入
漏洞特征：LDAP_INJECTION  
就像sql，所有进入到ldap查询的语句都必须要保证安全。不幸的是，ldap没有像sql那样的预编译接口。所以，现在的主要防御方式是，在参数进入ladp查询之前对其进行严格的检验。  
有漏洞的代码：
    NamingEnumeration answers = context.search("dc=People,dc=example,dc=com",
            "(uid=" + username + ")", ctrls);
引用：  
[WASC-29: LDAP
Injection](http://projects.webappsec.org/w/page/13246947/LDAP%20Injection)  
[OWASP: Top 10
2013-A1-Injection](https://www.owasp.org/index.php/Top_10_2013-A1-Injection)  
[CWE-90: Improper Neutralization of Special Elements used in an LDAP Query
('LDAP Injection') ](http://cwe.mitre.org/data/definitions/90.html)  
[LDAP Injection Guide: Learn How to Detect LDAP Injections and Improve LDAP
Security](http://www.veracode.com/security/ldap-injection)