request.getParameter (*input") + ") WHERE field = " + request.
我们发现第89行和第139行的SQL语句是由用户控制的输入构造而成的。该语句并未验
证通过HTTPWeb表单提交的input参数的值。我们现在已经跟踪到了应用程序中的用户输入，
可以明确判定是否存在漏润，并且能够提供证据来支持目己的论断了。
如果想识别渗入源以便有效跟踪受感染数据的初始位置，可使用下列命令：
(\lgetHeader (\IgetHeaders (\IgetRequestedSessionId (\IgetCookies
86
---
## Page 101
第3章复查代码中的SQL注入
*$2"\nmatch: "$3"\n\n*)*
能够熟练地复查PHP和Java代码中的SQL注入漏洞后，现在我们将该技术应用到C#程
序中以测试我们的熟练程度。
3.跟踪C#中的数据
可以使用下列命令递归地搜索一个C#源文件的目录，在文件中寻找使用了SqlCommandO、
SqlParameterO、 OleDbCommandO、 OleDbParameterO、 OracleCommandO、 OracleParameterO
OdbcCommandO和 OdbcParameterO的位置：
wexeaqgato1) pueumoqceto1\) xeeuexegtbg1)pueumotbguadaxb s
eter (\ IOracleCommand (\IOracleParameter (\IOdbcCommand (\IOdbcParam
filename: src/SQLiMSSQLVuln.cs
1ine: 29
WHERE field - *" + request.getParameter ("input*) + "**, conn) 
filename: src/SQLiOracleVuln.cs
1ine: 69
match: OracleCommand command = new OracleCommand(sq], conn) ;
必须对第69行作进一步审查，因为还不知道sql变量的值。它可能包含要执行的SQL语
句，但我们不知道该语句是否是由用户输入构造而成的或者是否受到感染。所以我们目前无法
判断是否存在漏洞，需要跟踪sql变量。不过我们发现第29行的SQL语句是由用户控制的输
入构造面成的。该语句并未验证通过HTTPWeb表单提交的input参数的值，所以它受到了感
染。我们可以声明第209行易受到SQL注入攻击，但要花点功夫审查第69行。尝试使用下列
grep命令以识别代码中构造动态SQL语句并将其分配给sql变量的位置点：
filename: sre/SQLiOracleVuln.cs
1ine: 68
. -     .  -   
.=+(_1nduT。)xoqowezedo6*eonbo2
我们发现第68行的SQL语句是由用户控制的输人构造面成的.该语句并未验证通过HTTP
Web表单提交的input参数的值，所以容易受到感染。我们现在已经跟踪到了应用中的用户输
入，可以明确判定是否存在漏润，并且能够提供证据来支持目己的论断了。
如果想识别渗人源以使有效跟踪易受感染数据的初始位置，可使用下列命令：
ring\IServerVariables\IUr1\IUserAgent\/UserHostAddress\/UserHost
(_u\u\s
现实中我们可能要多次修改grep字符串，排除那些因为特定开发人员使用不明确的命名
方案所导致的结果。应该遵循应用中的执行流程，还可能要分析很多文件以及包含的内容和类。
87
---
## Page 102
SQL注入攻击与防御（第2版）
不过这里介绍的技术对实践很有帮助。
3.2.4复查Android应用程序代码
自本书第1版以来，智能手机应用程序—比如那些为Android平台编写的应用程序
已经在企业界迅速增长。很多公司都已经采纳了Android平台，要么在该平台上开发定制的、
机构内部使用的商业应用程序，要么购买第三方开发的Android应用程序在企业内部使用，笔
者曾经对所有主流移动平台（iOS、BlackberryOS和Android等）上的应用程序实施过安全评估。
在对Android设备和应用程序进行评估时，笔者不断发现Android内容提供程序（Content-Provider)
中的一些漏洞。这些漏洞与在Web应用程序安全评估中发现的漏洞常常是类似的。特别是SQL
点关注SQL注入问题。内容提供商存储并获取数据，并使应用程序可以访间这些数据
(http:/developer.android.com/guide/topics/providers/content-providers.html)
MWR InfoSecurity 的同事 Nils 开发了—款名为 WebContentResolver(http://labs.mwrinfosecurity.
com/tools/android_webcontentresolver)的工具，它可以运行在Android设备（或模拟器）上，并向
测试漏洞，并充分利用各种工具的强大功能米发现和利用内容提供程序中的漏洞一比如
Sqlmap(http://sqlmap.sourceforge.net)。如果你正在对Android应用程序进行安全评估，建议你试
一试这个工具。
在前面的内容中，我们学习了如何在使用Java、PHP和.NET编写的传统Web应用程序中
寻找SQL注入漏洞。在本节中，将介绍如何充分利用与之相同的技术，在SQLite数据库的Android
应用程序（Java）中寻找SQL注入漏洞。当想验证你的发现，并为利用发现的漏洞创建概念验证
(Proofof Concept，PoC)时，WebContentResolver 实用工具是非常有价值的。第4章将详细介绍
如何使用该工具在Android应用程序中发现和利用SQL注入漏洞。
如果无法获得Android应用程序的源代码，那么还需要一个繁琐的处理过程才能查看到应
用程序的源代码。Android平台以 Dalvik Executable（.dex）格式运行应用程序，使用诸如l dex2jar
(http:/code.google.com/p/dex2jar)这样的工具可以轻面易举地将Android应用程序的包文件（APK)
转换为Java Archive(JAR)文件。然后，可以采用某种Java 反汇编程序—比如 jdgui(http:/java
decompiler.free.fr/7q=jdgui)或jad(www.varaneckas.com/jad)，反编译应用程序并查看源代码。
我们首先需要熟悉“危险函数”—Android开发人员使用两个类与SQLite数据库进行交
互:SQLiteQueryBuilder 类和 SQLiteDatabase 类。 android.database.sqlite.SQLiteQueryBuilder
是一个便捷类，用于创建发送给 SQLiteDatabase对象的 SQL查询(http://developer.android.com
reference/android/database/sqlite/SQLiteQueryBuilder.html)。 android.database.sqlite.SQLiteDatabase 炎
则提供了用于管理 SQLite 数据库的各种方法(htp://developer.android.com/reference/android/database
sqlite/SQLiteDatabase.html)。下面列出了这两个类中的一些重要方法：
//android,database,sqlite.SQLiteQueryBui1der
//构造一条SELECr语句，该语句适合作为 bui1dUnionQuery中通过UNION操作符连接的语句组中
/ /的 SELECT 语句]
buildQuery(String[1 projectionIn, String selection, String groupBy,
String having, String sortorder, String linit)
//用指定的子甸构造一个SQL查询字符串
88
---
## Page 103
第3章复查代码中的SQL注入
buildQueryString (boolean distinct, String tables, String[] columns,
String where, String groupBy, String having, String orderBy, String limit)
//给定一组子查询，其中每一个都是SELECT语句，构造一个union所有这些子查询返回结果的查询
buildUnionQuery (String[] subQueries, String sortOrder, String limit)
//构造一条SELECT语句，该语句适合作为 bui1dUnionQuery 中通过UNION操作符连接的语句组中
//的 SELECT 语甸
bui1dUnionSubQuery(String typeDiscriminatorColumn, String[]
unionColumns, Set columnsPresentInTable, int
computedColumnsOffset, String typeDiscriminatoxValue, String
selection, String groupBy, String having)
//结合所有当前设置和传递给该方法的信息，这些一个查询
query (sQLiteDatabase db, String[] projectionIn, String selection,
String[] selectionArgs, String groupBy, String having, String
sort0rder, String limit)
/ /android.database.sqlite.SQLiteDatabase
//在数据库中删除行的简便方法
delete (String table, String whereClause, String[] whereArgs)
//执行单个SQL语句，该SQL语句既不是SELECT语句，也不是任何其他返回数据的SQL语句
execSQL (Stzing sql)
//执行单个 SQL 语句，该SQL语句不是SELECT/INSERT/UPDATE/DELETE 语句
execSQL(String sql, Object[] bindArgs)
//向数据库插入一行数据的便捷方法
insert (String table, String nullColumnHack, ContentValues values)
//向数据库插入一行数据的便捷方法
insertOrThrow(String table, String nul1ColumnHack, ContentValues values)
//向数据库插入一行数据的通用方法
insertWithOnConflict (String table, String nullColumnHack, ContentValues
initia1Values, int conflictAlgorithm)
//查询指定的表，返回结果集上的一个谢标（Cursor)
query(String table, String[] columns, String selection, String[]
selectionArgs, String groupBy, String having, String orderBy,
String limit)
//查询指定的URL，返回结果集上的一个游标
queryWithFactory(sQLiteDatabase.CursorFactory cursorFactory, boolean
distinct, String table, String[] columns, String selection, String[]
selectionArgs, String groupBy, String having, String orderBy, String limit)
//运行指定的SQL语句，返同结果集上的一个游标
rawQuery(String sql, String[] selectionArgs)
//运行指定的SQL语句，返回结果集上的一个游标
rawQueryWithFactory (SQLiteDatabase.CursorFactory cursorFactory,
String sql, String[] selectionArgs, String editTable)
//替换数据库中数据行的便捷方法
replace (String table, String nullColumnHack, ContentValues
initialValues)
68
---
## Page 104
SQL注入攻击与防御（第2版）
//替换数据库中数据行的便捷方法
replaceOrThrow(String table, String nul1ColumnHack, ContentValues
initialValues)
//更新数据库中数据行的便捷方法
update (String table, ContentValues values, String whereClause,
String[] whereArgs)
//更新数据库中数据行的便捷方法
updateWithOnConflict (String table, ContentValues values, String
whereClause, String[1 whereArgs, int conflictAlgorithm)
下面这行shell命令可以递归搜索文件系统，查找源代码中引用了上述类方法的源代码文件：
0oe,ugTmxanxex1) Axannex1) AxoqoezuaTxxenb 1) Axanb1) 4oTtguou
ry (\I replace (\IreplaceOrThrow (\ I update (\ I updateWithonConf1ict (\ Ibu
1dQuery (\ |bui1dQueryString (\ |bui1dUnionQuery(\ |bui1dUnionSubQuezy (\
:qeuu\$ :ouu\T1oueuoT。 quad), 1aye 1/ox _)xonb1
(_uu\
与前面讨论的一样，我们常常需要跟踪应用程序中的数据，上面这行命令的输出结果可能
已经直接标识了一个显而易见的漏洞，或者它只搜索到了一个变量，需要进一步跟踪该变量才
能确定它是否是由易受感染的数据构造面成。为了提高效率，可以使用下面的命令搜索那些包
含了动态SQL语句的字符串声明：
如何将这些技术应用于真实的Android应用程序，下面给出了一个实际的例子（为简洁起见，
省略了一些输出内容)：
$ svn checkout http://android-sap-note-viewer googlecode.com/svn/trunk/
sap-note-viever
$ grep -r -n "delete (\lexecSQt (\linsert (\IinsertOrThrow(\IinsertWithOn
Conflict (\ Iquery (\IqueryWithFactory (\ | rawQuery (\IravQueryHithFactory
(\1replace (\|replaceOrThrow (\lupdate (\lupdateWithOnConflict (\Ibui1dQ
uery (\Ibui1dQuezyString (\Ibui1dUnionQuezy (\Ibui1dUnionSubQuery (\Ique
nmatch: *$3"\n\n*)*
filename: sap-note-viewer/SAPNoteView/src/org/sapmentors/sapnoteview/
db/SAPNoteProvider . java
line: 106
match: public Cursor query (Uri uri, String[] projection, String
selection, String[] selectionArgs, String sortOrder) (
filename: sap-note-viewer/SAPNoteView/src/org/sapmentors/sapnoteview/
db/SAPNoteProvider . java
line: 121
match: Cursor c = qBuilder.query(db, projection, selection,
selectionArgs, null, null, sortOrder) ;
可以看到，找到了两行我们感兴趣的代码。Content-Provider的参数列表包含下列参数：
90
---
## Page 105
第3章复查代码中的SQL注入
·Uri：所请求的URI
·Stringlprojection：表示要获取的各个列（投影）
●String[] selection：在WHERE子句中包含的列
●String selectionArgs：所选列的值
●String sortOrder:ORDER BY 子句
从下面的源代码可以看到，用户的输入被隐含地认为是可信的，因此这是一个SQL注入
漏洞：
@Override
public Cursor query (Uri uri, String[] projection, String selection,
String[] selectionArgs, String sortOrder) (
SQLiteQueryBuilder qBuilder = new SQLiteQueryBuilder () ;
qBu11der setTab1es (DATABASE_TABLE) ;
//如果搜索为空，就添加一个通配符，在内容之前和之后添加通配符
if (selectionArgs!=nu11l &6 selectionArgs [0] .length()==0) {
 = [0]sxyuo4oot9s
else if (selectionArgs!=nul1 66 selectionArgs [0] .length()>0) (
+[0]s5xyuo999+=[0]s6xyuoo99s
//将内部字段映射到 SearchManager 理解的字段
SQLiteDatabase db = dbHelper,getReadableDatabase () ;
qBui1der setProjectionMap (NOTE_PROJECTION_MAP) ;
//执行查询
Cursor c = qBuilder.query(db, projection, selection, selectionArgs,
null, null, sort0zder); return cf
为了证明该漏洞的可利用性，应该将WebContentResolver实用工具与有漏洞的应用程序安
装在一起。该工具向所有已经安装的内容提供程序（Content-Provider）暴露了一个WebService接
口。可以用WebContentResolver实用工具列出所有可访间的内容提供程序，比如下面的例子：
$ cur1 http://127.0.0.1:8080/1ist
package: org.sapmentors.sapnoteview
authority: org.sapmentors,sapnoteviev,noteprovider
exported: true
readPerm: nul1
vritePerm: nul1
然后可以对这些内容提供程序执行查询：
$ cur1 http://127.0.0.1:8080/query?a=org.sapmentors.sapnoteview,
noteprovider?4se1Name=_id6selId=11223