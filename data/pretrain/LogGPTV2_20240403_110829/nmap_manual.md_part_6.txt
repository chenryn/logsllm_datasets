\--version-all (尝试每个探测)
:   \--version-intensity 9的别名， 保证对每个端口尝试每个探测报文。
\--version-trace (跟踪版本扫描活动)
:   这导致Nmap打印出详细的关于正在进行的扫描的调试信息。
    它是您用\--packet-trace所得到的信息的子集。
-sR (RPC扫描)
:   这种方法和许多端口扫描方法联合使用。
    它对所有被发现开放的TCP/UDP端口执行SunRPC程序NULL命令，来试图
    确定它们是否RPC端口，如果是，
    是什么程序和版本号。因此您可以有效地获得和**rpcinfo -p**一样的信息，
    即使目标的端口映射在防火墙后面(或者被TCP包装器保护)。Decoys目前不能和RPC
    scan一起工作。 这作为版本扫描(-sV)的一部分自动打开。
    由于版本探测包括它并且全面得多，-sR很少被需要。
[]{#9}
## 操作系统探测
Nmap最著名的功能之一是用TCP/IP协议栈fingerprinting进行远程操作系统探测。
Nmap发送一系列TCP和UDP报文到远程主机，检查响应中的每一个比特。
在进行一打测试如TCP
ISN采样，TCP选项支持和排序，IPID采样，和初始窗口大小检查之后，
Nmap把结果和数据库nmap-os-fingerprints中超过
1500个已知的操作系统的fingerprints进行比较，如果有匹配，就打印出操作系统的详细信息。
每个fingerprint包括一个自由格式的关于OS的描述文本，
和一个分类信息，它提供供应商名称(如Sun)，下面的操作系统(如Solaris)，OS版本(如10)，
和设备类型(通用设备，路由器，switch，游戏控制台， 等)。
如果Nmap不能猜出操作系统，并且有些好的已知条件(如
至少发现了一个开放端口和一个关闭端口)，Nmap会提供一个
URL，如果您确知运行的操作系统，您可以把fingerprint提交到那个URL。
这样您就扩大了Nmap的操作系统知识库，从而让每个Nmap用户都受益。
操作系统检测可以进行其它一些测试，这些测试可以利用处理
过程中收集到的信息。例如运行时间检测，使用TCP时间戳选项(RFC 1323)
来估计主机上次重启的时间，这仅适用于提供这类信息的主机。另一种
是TCP序列号预测分类，用于测试针对远程主机建立一个伪造的TCP连接
的可能难度。这对于利用基于源IP地址的可信关系(rlogin，防火墙过滤等)
或者隐含源地址的攻击非常重要。这一类哄骗攻击现在很少见，但一些
主机仍然存在这方面的漏洞。实际的难度值基于统计采样，因此可能会有
一些波动。通常采用英国的分类较好，如"worthy challenge"或者 "trivial
joke"。在详细模式(-v)下只以
普通的方式输出，如果同时使用-O，还报告IPID序列产生号。
很多主机的序列号是"增加"类别，即在每个发送包的IP头中 增加ID域值，
这对一些先进的信息收集和哄骗攻击来说是个漏洞。
[http://nmap.org/book/osdetect.html](http://nmap.org/book/osdetect.html){target="_top"}
文档使用多种语言描述了版本检测的方式、使用和定制。
采用下列选项启用和控制操作系统检测:
-O (启用操作系统检测)
:   也可以使用-A来同时启用操作系统检测和版本检测。
\--osscan-limit (针对指定的目标进行操作系统检测)
:   如果发现一个打开和关闭的TCP端口时，操作系统检测会更有效。
    采用这个选项，Nmap只对满足这个条件的主机进行操作系统检测，这样可以
    节约时间，特别在使用-P0扫描多个主机时。这个选项仅在使用 -O或-A
    进行操作系统检测时起作用。
\--osscan-guess; \--fuzzy (推测操作系统检测结果)
:   当Nmap无法确定所检测的操作系统时，会尽可能地提供最相近的匹配，Nmap默认
    进行这种匹配，使用上述任一个选项使得Nmap的推测更加有效。
[]{#10}
## 时间和性能
Nmap开发的最高优先级是性能。在本地网络对一个主机的默认扫描(**nmap
*\***)需要1/5秒。而仅仅眨眼的
时间，就需要扫描上万甚至几十万的主机。此外，一些特定的扫描选项会明显增
加扫描时间，如UDP扫描和版本检测。同样，防火墙配置以及特殊的响应速度限制也会
增加时间。Nmap使用了并行算法和许多先进的算法来加速扫描，用户对Nmap如何
工作有最终的控制权。高级用户可以仔细地调整Nmap命令，在满足时间要求的同时获得他们所关心的信息。
改善扫描时间的技术有：忽略非关键的检测、升级最新版本的Nmap(性能增强不断改善)。
优化时间参数也会带来实质性的变化，这些参数如下。
\--min-hostgroup \; \--max-hostgroup \ (调整并行扫描组的大小)
:   Nmap具有并行扫描多主机端口或版本的能力，Nmap将多个目标IP地址
    空间分成组，然后在同一时间对一个组进行扫描。通常，大的组更有效。缺
    点是只有当整个组扫描结束后才会提供主机的扫描结果。如果组的大小定义
    为50，则只有当前50个主机扫描结束后才能得到报告(详细模式中的补充信息
    除外)。
    默认方式下，Nmap采取折衷的方法。开始扫描时的组较小，
    最小为5，这样便于尽快产生结果；随后增长组的大小，最大为1024。确切的
    大小依赖于所给定的选项。为保证效率，针对UDP或少量端口的TCP扫描，Nmap
    使用大的组。
    \--max-hostgroup选项用于说明使用最大的组，Nmap不
    会超出这个大小。\--min-hostgroup选项说明最小的组，Nmap
    会保持组大于这个值。如果在指定的接口上没有足够的目标主机来满足所
    指定的最小值，Nmap可能会采用比所指定的值小的组。这两个参数虽然很少使用，
    但都用于保持组的大小在一个指定的范围之内。
    这些选项的主要用途是说明一个最小组的大小，使得整个扫描更加快速。通常
    选择256来扫描C类网段。对于端口数较多的扫描，超出该值没有意义。对于
    端口数较少的扫描，2048或更大的组大小是有帮助的。
\--min-parallelism \; \--max-parallelism \ (调整探测报文的并行度)
:   这些选项控制用于主机组的探测报文数量，可用于端口扫描和主机发现。默认状态下，
    Nmap基于网络性能计算一个理想的并行度，这个值经常改变。如果报文被丢弃，
    Nmap降低速度，探测报文数量减少。随着网络性能的改善，理想的探测报文数量会缓慢增加。
    这些选项确定这个变量的大小范围。默认状态下，当网络不可靠时，理想的并行度值
    可能为1，在好的条件下，可能会增长至几百。
    最常见的应用是\--min-parallelism值大于1，以加快
    性能不佳的主机或网络的扫描。这个选项具有风险，如果过高则影响准确度，同时
    也会降低Nmap基于网络条件动态控制并行度的能力。这个值设为10较为合适，
    这个值的调整往往作为最后的手段。
    \--max-parallelism选项通常设为1，以防止Nmap在同一时间
    向主机发送多个探测报文，和选择\--scan-delay同时使用非常有用，虽然
    这个选项本身的用途已经很好。
\--min-rtt-timeout \， \--max-rtt-timeout \， \--initial-rtt-timeout \ (调整探测报文超时)
:   Nmap使用一个运行超时值来确定等待探测报文响应的时间，随后会放弃或重新
    发送探测报文。Nmap基于上一个探测报文的响应时间来计算超时值，如果网络延迟比较显著
    和不定，这个超时值会增加几秒。初始值的比较保守(高)，而当Nmap扫描无响应
    的主机时，这个保守值会保持一段时间。
    这些选项以毫秒为单位，采用小的\--max-rtt-timeout值，使
    \--initial-rtt-timeout值大于默认值可以明显减少扫描时间，特别
    是对不能ping通的扫描(-P0)以及具有严格过滤的网络。如果使用太
    小的值，使得很多探测报文超时从而重新发送，而此时可能响应消息正在发送，这使得整个扫描的时
    间会增加。
    如果所有的主机都在本地网络，对于\--max-rtt-timeout值来
    说，100毫秒比较合适。如果存在路由，首先使用ICMP
    ping工具ping主机，或使用其
    它报文工具如hpings，可以更好地穿透防火墙。查看大约10个包的最大往返时间，然后将
    \--initial-rtt-timeout设成这个时间的2倍，\--max-rtt-timeout
    可设成这个时间值的3倍或4倍。通常，不管ping的时间是多少，最大的rtt值不得小于100ms，
    不能超过1000ms。
    \--min-rtt-timeout这个选项很少使用，当网络不可靠时，
    Nmap的默认值也显得过于强烈，这时这个选项可起作用。当网络看起来不可靠时，Nmap仅将
    超时时间降至最小值，这个情况是不正常的，需要向nmap-dev邮件列表报告bug。
\--host-timeout \ (放弃低速目标主机)
:   由于性能较差或不可靠的网络硬件或软件、带宽限制、严格的防火墙等原因，
    一些主机需要*很长*的时间扫描。这些极少数的主机扫描往往占
    据了大部分的扫描时间。因此，最好的办法是减少时间消耗并且忽略这些主机，使用
    \--host-timeout选项来说明等待的时间(毫秒)。通常使用1800000
    来保证Nmap不会在单个主机上使用超过半小时的时间。需要注意的是，Nmap在这半小时中可以
    同时扫描其它主机，因此并不是完全放弃扫描。超时的主机被忽略，因此也没有针对该主机的
    端口表、操作系统检测或版本检测结果的输出。
\--scan-delay \; \--max-scan-delay \ (调整探测报文的时间间隔)
:   这个选项用于Nmap控制针对一个主机发送探测报文的等待时间(毫秒)，在带宽
    控制的情况下这个选项非常有效。Solaris主机在响应UDP扫描探测报文报文时，每秒
    只发送一个ICMP消息，因此Nmap发送的很多数探测报文是浪费的。\--scan-delay
    设为1000，使Nmap低速运行。Nmap尝试检测带宽控制并相应地调整扫描的延迟，但
    并不影响明确说明何种速度工作最佳。
    \--scan-delay的另一个用途是躲闭基于阈值的入侵检测和预防
    系统(IDS/IPS)。
-T \ (设置时间模板)
:   上述优化时间控制选项的功能很强大也很有效，但有些用户会被迷惑。此外，
    往往选择合适参数的时间超过了所需优化的扫描时间。因此，Nmap提供了一些简单的
    方法，使用6个时间模板，使用时采用-T选项及数字(0 - 5)
    或名称。模板名称有paranoid (0)、sneaky (1)、polite (2)、normal(3)、
    aggressive (4)和insane
    (5)。前两种模式用于IDS躲避，Polite模式降低了扫描