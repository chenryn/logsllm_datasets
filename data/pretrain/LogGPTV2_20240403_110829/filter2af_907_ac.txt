    }
### 4.2 标识符unicode编码
标识符节点名为`Identifier`
先`path.node.name`获取原始数据，再将原始值转变为ascii数字后加入`\u`前缀
    function string2unicode(str){  // 字符串转unicode
        let ret ="";
        for(let i=0; i 变化后的代码涉及到新增一个解密函数，如果以明文形式下发该函数容易被解析，还需要对其进行额外的混淆
### 4.4 数值位异或加密
将数值字面量转变为两层嵌套的异或二项式
首先将原始数字转变为减法运算式，然后把减法运算式左右两边数字转变成异或表达式，最后再`t.replaceWith()`替换原始节点
    function num2xor(num){  // 转化为异或表达式
        let key = parseInt(Math.random() * 999999, 10);  // 生成随机数
        let cipherNum = key ^ num;
        return [key, cipherNum];
    }
    function num2add(num){  // 转化为减法运算表达式
        let key = parseInt(Math.random() * 999999, 10);  // 生成随机数
        let cipherNum = key - num;
        return [key, cipherNum];
    }
    const visitor = {
        NumericLiteral(path){
            const src_value = path.node.value;  // 获取原始值
            let xxx = num2add(src_value);  // 将原始值分解成减法运算表达式
            let xxx_2 = num2xor(xxx[0]);  // 将减法运算表达式左边的值转变为异或表达式
            let xxx_3 = num2xor(xxx[1]);  // 将减法运算表达式右边的值转变为异或表达式
            path.replaceWith(t.binaryExpression('-',   // 替换原始数字字面量
                t.binaryExpression('^', t.NumericLiteral(xxx_2[0]), t.NumericLiteral(xxx_2[1])), 
                t.binaryExpression('^', t.NumericLiteral(xxx_3[0]), t.NumericLiteral(xxx_3[1]))
            ));
            path.skip();
        }
    }
生成的表达式动态变化
### 4.5 数组混淆
创建一个大数组，将代码中的字符串写入到数组中，后续使用下标的方式来访问
将`StringLiteral`变化成`CallExpression`
    let strList = [];  // 创建一个大数组
    let visitor = {
        StringLiteral(path){
            let srcValue = double_b64_encode(path.node.value);  // 双重base64编码原始数据
            let index = strList.indexOf(srcValue);  // 字符串的indexOf方法查询srcValue是否已存在
            if (index == -1){  // 不存在时将srcValue加入数组
                let length = strList.push(srcValue);  // 数组的push方法会将值加入最后并返回数组长度
                index = length - 1;  // 数组以0开始计数，-1则表示最后一个值得位置
            }
            path.replaceWith(t.CallExpression(
                t.identifier('double_b64_decode'),
                [t.memberExpression(
                    t.identifier('Arr'),
                    t.numericLiteral(index),  // 写入数组下标
                    true
                    )]
                ));
        }
    }
    traverse(ast, visitor);
但此时新生成的js代码没有`double_b64_encode()`与`Arr`，还需要创建函数和数组
    // 增加Arr数组
    strList = strList.map(function(sss){  // 将数组转化为节点形式
        return t.StringLiteral(sss);
    })
    let var_tion = t.variableDeclaration('var',
        [t.variableDeclarator(
            t.identifier('Arr'),
            t.arrayExpression(strList)
        )]
    )
    ast.program.body.unshift(var_tion);
    // 增加double_b64_decode函数
    let fun_tion = t.functionDeclaration(
        t.identifier('double_b64_decode'),
        [t.identifier('sss')],
        t.blockStatement(
            [t.returnStatement(
                t.CallExpression(
                    t.identifier('atob'),
                    [t.CallExpression(
                        t.identifier('atob'),
                        [t.identifier('sss')]
                        )]
                    )
            )]
        )
    )
    ast.program.body.unshift(fun_tion);
成功运行：
### 4.6 二项式转花指令
将二项式用函数包装
先将二项式转化为调用表达式，再在根节点新增一个该表达式函数
    function randomString(len) {  // 生成随机字符串
      len = len || 32;
      var $chars = 'ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678';
      var maxPos = $chars.length;
      var pwd = '';
      for (i = 0; i 
## 五、参考
  * 
  * 
  * 
  * 
  * 