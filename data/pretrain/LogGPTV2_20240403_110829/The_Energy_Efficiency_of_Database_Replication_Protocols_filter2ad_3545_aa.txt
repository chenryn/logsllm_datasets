title:The Energy Efficiency of Database Replication Protocols
author:Nicolas Schiper and
Fernando Pedone and
Robbert van Renesse
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
The Energy Efﬁciency of
Database Replication Protocols
Nicolas Schiper∗
Robbert van Renesse∗
∗Cornell University, USA † University of Lugano, Switzerland
Fernando Pedone†
requirements of many current online applications paired
with mounting concerns about the amount of electricity
drawn by data centers worldwide call for techniques that
accommodate both redundancy and energy efﬁciency.
Abstract—Replication is a widely used technique to pro-
vide high-availability to online services. While being an
effective way to mask failures, replication comes at a price:
at least twice as much hardware and energy are required
to mask a single failure. In a context where the electricity
drawn by data centers worldwide is increasing each year,
there is a need to maximize the amount of useful work done
per Joule, a metric denoted as energy efﬁciency.
In this paper, we review commonly-used database repli-
cation protocols and experimentally measure their energy
efﬁciency. We observe that the most efﬁcient replication
protocol achieves less than 60% of the energy efﬁciency
of a stand-alone server on the TPC-C benchmark. We
identify algorithmic techniques that can be used by any
protocol to improve its efﬁciency. Some approaches improve
performance, others lower power consumption. Of partic-
ular interest is a technique derived from primary-backup
replication that implements a transaction log on low-power
backups. We demonstrate how this approach can lead to
an energy efﬁciency that is 79% of the one of a stand-
alone server. This constitutes an important step towards
reconciling replication with energy efﬁciency.
Keywords-Fault-tolerance, database replication, energy ef-
ﬁciency
I. INTRODUCTION
Replication is a widely used technique to boost avail-
ability and sometimes performance of applications. De-
spite the interest received from the research community
and the extensive literature that has resulted from this
effort, an angle that remains relatively unexplored is that
of energy efﬁciency of replication, or the amount of
useful work done per Joule. In the context of a replicated
database, energy efﬁciency is measured by the number
of committed transactions per Joule, or equivalently, the
throughput of committed transactions per Watt.
The design of replicated databases (and systems in gen-
eral) should adhere to the principle of proportionality [1]:
the power consumption of a replicated database should
be proportional to its performance. Energy efﬁciency cap-
tures the principle of proportionality but is more general:
two systems may be power-proportional although one is
more energy-efﬁcient than the other.
At ﬁrst, replication and energy efﬁciency seem con-
tradictory: replication typically requires hardware redun-
dancy, and the more components there are in a system, the
more energy it will consume. However, high availability
This paper makes three contributions: First, we review
commonly used replication protocols and experimentally
measure their energy efﬁciency. Second, we assess the
impact of several software techniques designed for im-
proving energy efﬁciency. Third, we compare the im-
provements on energy efﬁciency from software techniques
to hardware techniques (e.g., using low-power servers as
opposed to high performance servers).
We consider three classes of replication protocols used
to replicate a database service: state machine replication
(SMR), primary-backup replication (PBR), and deferred-
update replication (DUR). State machine replication is
a well-established technique that executes every opera-
tion at each replica in the same order. SMR requires
equal participation of every replica in the execution, and
sequential execution of each operation. Primary-backup
replication differs from state machine replication in im-
portant aspects in our context: operations are executed
by a single server, the primary; the other servers, the
backups, simply apply state changes forwarded by the
primary. Deferred update replication allows execution of
operations in parallel, thereby enabling better utilization
of the computing resources. Due to lack of coordination
during execution, some operations may have to be rolled
back.
We consider two techniques to enhance efﬁciency of
replication protocols: one improves performance of DUR,
the other decreases the energy consumption of PBR. We
have chosen to focus on deferred update replication and
primary-backup replication as these techniques proved
to be the most efﬁcient ones, with PBR sporting lower
energy cost than DUR. Although these techniques are
presented in the context of two particular approaches, they
are general enough to be applied to other protocols.
Energy awareness has been previously addressed in
distributed systems by using low-power servers (see Sec-
tion VII). However, to be best of our knowledge no prior
work has considered improving energy efﬁciency using
algorithmic modiﬁcations to replication protocols. In this
paper, we carry out an extensive evaluation of the energy
978-1-4799-2233-8/14 $31.00 © 2014 IEEE
978-1-4799-2233-8/14 $31.00 © 2014 IEEE
978-1-4799-2233-8/14 $31.00 © 2014 IEEE
DOI 10.1109/DSN.2014.46
DOI 10.1109/DSN.2014.46
DOI 10.1109/DSN.2014.46
407
407
407
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:33:14 UTC from IEEE Xplore.  Restrictions apply. 
efﬁciency of various replication protocols intended for
database applications and propose techniques to enhance
their efﬁciency.
Experimental evaluations of the protocols on the TPC-C
benchmark conﬁrm the common belief that maximum
efﬁciency is obtained at peak load. This is because current
servers are not power-proportional: idle servers draw a
signiﬁcant proportion of the power they draw at peak
load [1]. Our ﬁndings also suggest that while efﬁciency
can be gained via software techniques (algorithmic mod-
iﬁcations to protocols), the best efﬁciency is obtained
with a hybrid approach that we denote as PBR∗
hyb, a pro-
tocol derived from primary-backup replication. PBR∗
hyb
combines algorithmic modiﬁcations of primary-backup
with a high-end server as the primary, and low-power
devices as the backups. Thanks to its hybrid design, this
protocol reaches a maximum efﬁciency that is 79% of the
maximum efﬁciency of a stand-alone server on the TPC-C
benchmark.
The gains in energy efﬁciency provided by the pro-
posed techniques will naturally depend on the considered
workload. However, we believe that hybrid approaches
constitute a promising solution to reconciling energy
efﬁciency with replication.
The remainder of the paper is structured as follows.
Section II deﬁnes our system model and reviews some def-
initions. Section III presents common replication protocols
and highlights their main differences. We experimentally
measure the energy efﬁciency of the considered protocols
in Section IV, and propose energy-aware algorithmic
modiﬁcations in Section V. We present our hybrid ap-
proach and measure its efﬁciency in Section VI. We
discuss related work in Section VII and conclude with
Section VIII.
II. SYSTEM MODEL AND DEFINITIONS
We consider a system composed of a set of client
processes and a set of database server processes. We as-
sume the crash failure model (e.g., no Byzantine failures).
A process, either client or server, that never crashes is
correct, otherwise it is faulty. In the replication protocols
we present in the paper, up to f process are faulty.
Processes communicate using either one-to-one or one-
to-many communication. One-to-one communication uses
primitives send(m) and receive(m), where m is a mes-
sage. Links can lose messages but are fair-lossy: if both
the sender and the receiver are correct, then a message
sent inﬁnitely often will be received inﬁnitely often. One-
to-many communication relies on atomic broadcast, with
primitives a-bcast(m) and a-deliver(m). Atomic broadcast
ensures three properties: (1) if message m is a-delivered
by a process, then every correct process eventually a-
delivers m; (2) no two messages are a-delivered in dif-
ferent order by their receivers; and (3) a message that is
a-bcast by a correct process will eventually be a-delivered
by that process.
The system is partially synchronous:
the execution
goes through asynchronous and synchronous periods. In
asynchronous periods, there are no bounds on the time
it takes for messages to be transmitted and actions to be
executed. In synchronous periods, such bounds exist but
are unknown. We assume that the synchronous periods are
long enough for the replicated system to make progress.
III. REPLICATION PROTOCOLS
In this section we present three database replication
protocols, each one representative of a different class
of protocols: state machine replication, primary-backup
replication, and deferred-update replication. These proto-
cols ensure strict serializability [2]: the execution of client
transactions against the replicated service is equivalent
to a sequential execution on a single server, where each
transaction seems to have been executed instantaneously
at some point between its invocation and response.
In the discussion that follows, we assume that clients
interact with the replicated system by means of stored
procedures. Stored procedures are installed in the servers
before they are instantiated by the clients. Clients create
a transaction by selecting an existing stored procedure
and providing the parameters needed by the procedure.
Stored procedures enable efﬁcient transactions, executed
with one round of communication between clients and
servers. These transactions are typical in online transac-
tion processing workloads since they avoid the cost of
client stalls.
A. State Machine Replication
State machine replication is a technique typically used
to replicate a (non-transactional) service [3]. It provides
clients with the abstraction of a highly available service
by replicating the servers and regulating how client com-
mands are propagated to and executed by the replicas: (i)
every correct replica must receive every command; (ii)
replicas must agree on the order of received and executed
commands; and (iii) the execution of commands must
be deterministic (i.e., a command’s changes to the state
and results depend only on the replica’s state and on the
command itself).
State machine replication has been generally considered
too expensive in database settings [4] since it requires each
replica to execute transactions sequentially in order to
guarantee deterministic execution. Concurrent execution
is important to hide the latency of disk operations (e.g.,
fetching a data item from disk). Forcing transactions to
execute sequentially, therefore, could result in unaccept-
able stalls due to I/O. If the database ﬁts in the main
memory of servers and disk accesses can be avoided dur-
ing transaction execution, however, then a single-threaded
408408408
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:33:14 UTC from IEEE Xplore.  Restrictions apply. 
model becomes a viable option, as demonstrated by early
and recent work on in-memory databases (e.g., [5], [6]).
In our state machine replication protocol, clients submit
transactions by atomically broadcasting to all replicas a
stored procedure’s unique identiﬁer and the parameters
that correspond to the stored procedure. Upon delivering
such a request, each replica executes a local transaction
and responds to the client. The client completes the
request as soon as it receives the ﬁrst response.
B. Primary-Backup Replication
In typical primary-backup replication [7], only the
primary server receives transaction requests and executes
transactions. After executing one or more transactions,
the primary propagates to the backups the changes in
state created by the transactions. Backups receive the
state changes from the primary and apply them without
re-executing the transactions. After the backups have
acknowledged the processing of the state changes, the pri-
mary responds to the client. Primary-backup has two ad-
vantages with respect to state machine replication: trans-
action execution at the primary can be multi-threaded,
which may be important in multicore servers, and backups
do not have to execute the transaction, which is advanta-
geous from an energy standpoint in case of transactions
that execute many read operations and update operations
over a small dataset.
In the absence of failures and failure suspicions (i.e.,
“normal cases”), our primary-backup protocol handles a
transaction T using a procedure similar to typical primary-
backup protocols, as described above: (i) the client sends
T to the primary database, (ii) upon reception of T , the
primary executes T , commits T ’s changes to its local
database, and forwards T ’s update statements (expressed
as a stored procedure) to the backups, (iii) the backups,
upon receipt of the updates, execute and locally commit
them before sending an acknowledgment back to the pri-
mary, (iv) the primary waits to receive an acknowledgment
from all backups and notiﬁes the client of the transaction’s
success. The notiﬁcation contains the transaction’s result,
if any.
To ensure that backups process transactions in the
order deﬁned by the primary, transactions are tagged with
sequence numbers. Transaction execution is concurrent
at the primary and sequential at the backups. To avoid
deadlocks at the primary in the presence of concurrent
transaction execution, we may have to abort certain trans-
actions. When this happens, the primary forwards an abort
notiﬁcation (a no-op) to the backups. This notiﬁcation is
sent back to the client after all backups have acknowl-
edged it, similarly to how a normal transaction is handled.
In doing so, we ensure agreement on the outcome of the
transaction, even in the case of a failure at the primary.
When an operational node, the primary or a backup,
suspects the failure of a node, it stops accepting new
transactions and requests a membership change excluding
the suspected node [8]. Membership changes are handled
by an atomic broadcast service to ensure that replicas
agree on the sequence of group conﬁgurations, and the
primary tags each transactions with the identiﬁer of the
current membership. In doing so, we avoid situations
where backups would handle transactions from old pri-
maries.
Since our protocol is speculative, i.e., the primary com-
mits transactions locally before receiving the acknowl-
edgments from backups, the newly elected primary must
ensure that all replicas in the new membership resume
normal operations in the same state. Where possible,
the new primary sends missing update statements and
abort notiﬁcations to those backups that need to catch
up (the new primary is either the primary or a backup of
the previous group conﬁguration). If this is not possible
(each replica only caches a limited number of executed
transactions), the new primary sends a snapshot of its
entire database. If a failure occurs during recovery, the
procedure is restarted.
C. Deferred-Update Replication
replication is
a
Deferred-update
“multi-primary”
database replication protocol, where every replica can
both execute transactions and apply the state changes
resulting from the execution of a transaction in a remote
node [4]. To execute a transaction, a client chooses one
replica and submits the transaction to this server—as
discussed previously, in our protocol, the client submits
a stored procedure’s unique identiﬁer and corresponding
stored procedure’s parameters.
is executed,
During the execution of the transaction, there is no
coordination among different replicas. After the last trans-
action statement
the transaction’s updates
are atomically broadcast to all replicas. Atomic broadcast
ensures that all replicas deliver the updates in the same
order and can certify the transaction in the same way.
Hence, transaction certiﬁcation is a sequential procedure
that is carried out in the order deﬁned by atomic broadcast.
Certiﬁcation guarantees that the database remains con-
sistent despite the concurrent execution of transactions at
different replicas. A transaction T passes certiﬁcation and
commits at a replica only if T can be serialized with other
committed transactions, that is, only if the items read by
T have not been modiﬁed in the meantime; otherwise
T is aborted. Determining whether the items read by T
have been overwritten in the meantime is achieved by
considering the sequence of transactions that committed
between the time T started its execution and until it is
delivered by the atomic broadcast service. DUR protocols
usually certify update transactions only [9], in contrast, we
certify both update and read-only transactions to ensure
409409409
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:33:14 UTC from IEEE Xplore.  Restrictions apply. 
	! 

!
!
	" 
"



#

"

	!

	"

	#


! 


" 


! 

" 
(a) State Machine Replication

!

"
!
!
"
	
	!
	"


! 
#


" 
$



"
	

! 

		
 
(b) Primary-Backup Replication
	
	


	

	

	
	
	 

			
!
	
	
 
			
	

(c) Deferred-Update Replication
Figure 1. An illustration of the replication protocols in the normal case, where T1 and T2 are two stored procedures.