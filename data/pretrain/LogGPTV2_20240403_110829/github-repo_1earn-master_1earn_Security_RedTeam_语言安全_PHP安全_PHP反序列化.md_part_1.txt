# PHP反序列化
---
**相关文章 & Source & Reference**
- [Web安全 | PHP反序列化入门这一篇就够了](https://mp.weixin.qq.com/s/HvyRjbLVPaMg7DBfdYmdJw)
- [php反序列化练习题](https://www.cnblogs.com/th0r/p/14152102.html)
- [php反序列化知识点总结](https://www.cnblogs.com/th0r/p/14071894.html)
**相关工具**
- [php 在线反序列化工具](https://www.w3cschool.cn/tools/index?name=unserialize)
---
PHP 对不同类型的数据用不同的字母进行标示
```
a - array
b - boolean
d - double
i - integer
o - common object
r - reference
s - string
C - custom object
O - class
N - null
R - pointer reference
U - unicode string
```
---
## 什么是序列化
php 中, 使用函数 `serialize()` 来返回一个包含字节流的字符串来表示
比如:
```php
class S{
public $test="sd";
}
$s=new S(); //创建一个对象
serialize($s); //把这个对象进行序列化
```
序列化的结果是:
```
O:1:"S":1:{s:4:"test";s:2:"sd";}
```
代表的含义依次是:
```
O:代表object
1:代表对象名字长度为一个字符
S:对象的名称
1:代表对象里面有一个变量
s:数据类型(string)
4:变量名称的长度
test:变量名称
s:数据类型
2:变量值的长度
sd:变量值
```
反序列化就是把被序列化的字符串还原为对象,然后在接下来的代码中继续使用。
使用unserialize()函数
```php
$u=unserialize("O:1:"S":1:{s:4:"test";s:2:"sd";}");
echo $u->test; //得到的结果为sd
```
序列化和反序列化本身没有问题,但是如果反序列化的内容是用户可以控制的,且后台不正当的使用了PHP中的魔法函数,就会导致安全问题
**案例**
以 pikachu 靶场为例
输入:
```
O:1:"S":1:{s:4:"test";s:2:"sd";}
# 显示 sd
O:1:"S":1:{s:4:"test";s:30:"";}
# 显示 
```
查看源码
```php
class S{
    var $test = "pikachu";
    function __construct(){
        echo $this->test;
    }
}
//O:1:"S":1:{s:4:"test";s:29:"";}
$html='';
if(isset($_POST['o'])){
    $s = $_POST['o'];
    if(!@$unser = unserialize($s)){
        $html.="大兄弟,来点劲爆点儿的!";
    }else{
        $html.="{$unser->test}";
    }
}
```
从源码可以看到反序列化的变量是 post 请求的, post 请求变量名为 o, 通过抓包发现我们输入框输入的值, 正好赋值给 Post 变量 o
![](../../../../../assets/img/Security/RedTeam/语言安全/PHP安全/PHP反序列化/1.png)
然后源码中实现了 `unserialize()` 函数,进行了反序列化,同时,S 类中的 `__construct()` 函数被调用。
最后没有对传参进行过滤，否则无法构成目的 Payload。
实战中要更具情况来构造 payload, 能利用的漏洞也远不止 xss,我们可以利用 `phar://` 协议触发反序列化,前提是完全可控的文件名。
---
## phar://伪协议
**基础知识**
- [伪协议](./伪协议.md#phar://)
**相关文章**
- [blackhat议题深入 | phar反序列化](https://cloud.tencent.com/developer/article/1350367)
**案例**
根据 phar 文件结构我们来自己构建一个 phar 文件，php 内置了一个 Phar 类来处理相关操作。
```php
startBuffering();
    $phar->setStub(""); //设置stub
    $o = new TestObject();
    $o -> data='abc';
    $phar->setMetadata($o); //将自定义的meta-data存入manifest
    $phar->addFromString("test.txt", "test"); //添加要压缩的文件
    //签名自动计算
    $phar->stopBuffering();
?>
```
注意：要将 php.ini 中的 phar.readonly 选项设置为 Off，否则无法生成 phar 文件
访问该 php 页面, 会在文件当前目录下生成一个 phar 文件
![](../../../../../assets/img/Security/RedTeam/语言安全/PHP安全/PHP反序列化/2.png)
很明显的序列化特征，TestObject 这个类已经以序列化形式储存
![](../../../../../assets/img/Security/RedTeam/语言安全/PHP安全/PHP反序列化/3.png)
### 直接利用
* 有可利用函数
* 有可直接利用的魔法方法或pop链
* 函数参数可控，并且可以输入特殊字符 :、/、phar
```php
data.'';
	}
}
include('phar://test.phar');
?>
```
### 绕过幻术头检测
phar 在设计时, 只要求前缀为 `__HALT_COMPILER();` 而后缀或者内容并未设限, 可以构造文件绕过上传
```php
startBuffering();
    $phar->setStub("GIF89a",""); //设置stub，增加gif文件头
    $o = new TestObject();
    $o->data='sd!';
    $phar->setMetadata($o); //将自定义meta-data存入manifest
    $phar->addFromString("test.txt", "test"); //添加要压缩的文件
    //签名自动计算
    $phar->stopBuffering();
?>
```
```php
data;
    }
}
?>
```
成功将 meta-data 中 data 数据反序列化出来
![](../../../../../assets/img/Security/RedTeam/语言安全/PHP安全/PHP反序列化/4.png)
### 哈希表碰撞攻击
在 PHP 内核中，数组是以哈希表的方式实现的，攻击者可以通过巧妙的构造数组元素的 key 使哈希表退化成单链表（时间复杂度从 O(1) => O(n)）来触发拒绝服务攻击。
构造一串恶意的 serialize 数据（能够触发哈希表拒绝服务攻击），然后将其保存到 phar 文件的 metadata 数据区，当文件操作函数通过 phar:// 协议对其进行操作的时候就会触发拒绝服务攻击漏洞。
```php
hacker = $array;
    $p = new Phar(__DIR__ . '/avatar.phar', 0);
    $p['hacker.php'] = '';
    $p->setMetadata($new_obj);
    $p->setStub('GIF');
?>
```
---
## 反序列化字符逃逸
```php
';
	var_dump(unserialize($s));
	$s_1 = $s.'abcd';
	echo ''.$s_1.'';
	var_dump(unserialize($s_1));
?>
```
```
O:6:"person":2:{s:4:"name";s:3:"Bob";s:3:"age";i:18;}
object(person)#2 (2) { ["name"]=> string(3) "Bob" ["age"]=> int(18) }
O:6:"person":2:{s:4:"name";s:3:"Bob";s:3:"age";i:18;}abcd
object(person)#2 (2) { ["name"]=> string(3) "Bob" ["age"]=> int(18) }
```
在序列化后的字符串后面加任意字符并不影响反序列化后的输出
在反序列化时，底层代码是以 `;` 作为字段的分隔，以 `}` 作为结尾(字符串除外)，并且是根据长度判断内容的 ，同时反序列化的过程中必须严格按照序列化规则才能成功实现反序列化 。
```php
';
	$s = 'O:6:"person":2:{s:5:"name";s:3:"Bob";s:3:"age";i:18;}';
	unserialize($s);
?>
```
```
输出：
O:6:"person":2:{s:4:"name";s:3:"Bob";s:3:"age";i:18;}
Notice: unserialize(): Error at offset 26 of 53 bytes in /serialize.php on line 11
```
当长度与字符实际长度不符 会报错
```php
';
	$s = 'O:6:"person":3:{s:4:"name";s:3:"Bob";s:3:"age";i:18;s:6:"height";i:180;}';
	var_dump(unserialize($s));
?>
```
```
O:6:"person":2:{s:4:"name";s:3:"Bob";s:3:"age";i:18;}
object(person)#2 (3) { ["name"]=> string(3) "Bob" ["age"]=> int(18) ["height"]=> int(180) }
```
可以反序列化类中不存在的元素
### 字符串变长