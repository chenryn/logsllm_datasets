Although the tape-out Rocket Core chip can operate on
1GHz or higher, the synthesized FPGA on the ZC706 board can
only operate at the maximum frequency of 50MHz. In addition,
because the L2 cache is not mature enough for memory-mapped
IO [47], we only evaluated with the L1 caches. In place of the
L2 cache, we used the L2BroadcastHub that interconnects the
L1 caches and the outer memory system. Due to the above
limitation and the memory limitation of the evaluation board,
2Attacking a OpenSSL-powered HTTPS server cannot always reveal the
private key because the buffer used to store the privately may at a lower
address, so it cannot be read by a buffer over read.
1111
we were not able to run most SPEC CINT 2006 benchmarks,
so we used the much lighter SPEC CINT 2000 [68]. For SPEC
CINT 2000, some benchmarks (gzip and bzip) cannot run
successfully with the reference inputs. For these benchmarks,
we adjusted the parameters of the reference inputs to reduce
the size of the buffer they use to 3MB. We have annotated the
results to clarify this.
We used pseudo-LRU (Least Recently Used) as the replace-
ment policy for both tag and meta tag caches, and set the size
of each cache to 1KB, allowing up to 16 entries of 512-bit
cachelines.
A. Veriﬁcation
HDFI passes the RISC-V veriﬁcation suite provided by the
RISC-V teams, which means our modiﬁcations to the RISC-V
complies with the RISC-V standard so unmodiﬁed programs
can still run correctly on our modiﬁed hardware.
B. Performance Overhead
In this subsection, we evaluate the performance impact of
our hardware extension, as well as the effectiveness of our
optimization techniques. This evaluation includes two part:
the impact of new instructions on the processor core and the
impact on memory access. Since HDFI did not introduce many
changes to the pipeline of the processor core, the focus will
be on memory access.
1) Pipeline: The sdset1 and two ldchk instructions are
treated identically to their normal store and load counterparts
in the pipeline, with the exception of ldchk doing a comparison
at the end of the memory stage. These three instructions can
stall the pipeline in the same manner as their counterparts.
However, the special register dedicated to mvwtag for preserving
tags introduces a structural hazard to the pipeline. Because
there is only one special register available, a series of mvwtag
instructions have to wait for the previous mvwtag to ﬁnish,
stalling the pipeline. Other memory instructions do not have
to wait on previous ones to issue memory requests.
2) Memory Access: While the ISA extension does not
affect the performance of the processor core, HDFI inevitably
introduces additional memory accesses to fetch/update the tag
table.
Micro benchmark. To measure the performance impact of
these additional memory accesses and the logics to deal with
them, we used lat_mem_rd from LMBench [49] to measure
memory access latency and STREAMBench [48] to measure
memory bandwidth. Table IV shows the result of the ﬁve
conﬁgurations. The ﬁrst row shows that HDFI does not affect
the cache access latency. As the system operates at 50MHz,
the 40ns latency means that it takes two clock cycles to read
from the L1 cache. The second column shows that HDFI does
increase the memory access latency. When TVB is enabled,
DFITAGGER simply bypasses the incoming memory read access
unless it explicitly requests the tag bits. However, the access
should be examined by the Acquire Distributor and the Grant
Distributor (Figure 2), which adds 2 clock cycles latency. For
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:12:03 UTC from IEEE Xplore.  Restrictions apply. 
Benchmark
L1 hit
L1 miss
Copy
Scale
Add
Triad
Baseline
40ns
760ns
1081MB/s
857MB/s
1671MB/s
818MB/s
Tagger
(0%)
40ns
870ns (14.47%)
939MB/s (13.14%)
766MB/s (10.62%)
(4.37%)
1598MB/s
(9.66%)
739MB/s
TVB
(0%)
40ns
800ns (5.26%)
1033MB/s (4.44%)
816MB/s (4.79%)
1650MB/s (1.26%)
802MB/s (1.96%)
MTT
TVB+MTT
(0%)
40ns
870ns (14.47%)
953MB/s (11.84%)
(9.45%)
776MB/s
(4.13%)
1602MB/s
(8.8%)
764MB/s
(0%)
40ns
800ns (5.26%)
1035MB/s (4.26%)
817MB/s (4.67%)
(1.2%)
1651MB/s
803MB/s (1.83%)
TABLE IV: Impact on memory bandwidth and read latency, with different optimization techniques. The load does not include tag check and
store does not include tag set.
Benchmark
164.gzip
175.vpr
181.mcf
197.parser
254.gap
256.bzip2
300.twolf
Baseline
963s
14404s
8397s
21537s
4224s
716s
22240s
Tagger
TVB
MTT
1118s (16.09%)
18649s (29.51%)
11495s (36.89%)
25005s (16.11%)
4739s (12.19%)
820s (14.52%)
28177s (26.71%)
984s (2.18%)
14869s (3.26%)
8656s (3.08%)
22025s (2.27%)
4268s (1.04%)
735s (2.65%)
22896s (2.97%)
(6.85%)
1029s
(7.71%)
15513s
9544s (13.66%)
(7.61%)
23177s
(6.53%)
4500s
(3.63%)
742s
(7.37%)
23883s
TVB+MTT
(1.87%)
981s
(1.43%)
14610s
8388s (−0.11%)
(1.53%)
21866s
(0.71%)
4254s
(0.84%)
722s
(0.36%)
22323s
TABLE V: Performance overhead of a subset of SPEC CINT 2000 benchmarks. Due to the limited computing power of the Rocket Chip on
FPGA, we chose relatively lighter benchmark. In addition, to be fair, we included relatively memory bound benchmarks. According to a
paper [37], 181.mcf, 175.vpr and 300.twolf are memory bound and showing higher overhead. We used reduced version of reference input to
run 164.gzip and 256.bzip2.
memory bandwidth, our results also show that the optimizations
we implemented can effectively reduce overhead.
SPEC CINT 2000.
In addition to the micro benchmarks,
we also ran a subset of SPEC CINT 2000 benchmarks
on the ﬁve conﬁgurations of HDFI, without any security
applications (i.e., no load check and no sdset1). Table V
shows that even though the unoptimized version of HDFI
causes non-negligible performance overhead, our optimizations
successfully eliminated a large portion of overhead. Speciﬁcally,
since there is no load check, TVB eliminated all read access
requests to the tag table; and since there is no sdset1, MTT
eliminated all the write access to the tag table. Table VI shows
the number of memory accesses reduced by TVB and MTT.
Please note that the 0.11% performance gain on mcf is due to
ﬂuctuations.
C. Security Experiments
In this subsection, we evaluate the effectiveness of HDFI-
powered protection mechanisms. We evaluated all the security
applications described in §V, with synthesized attacks described
in §VI-D. The evaluation result is shown in Table VII, all HDFI-
powered protection mechanisms can successfully mitigate the
corresponding attack(s).
RIPE benchmark. With our ported RIPE benchmark, there
are 112 possible combinations, with 54 that could proceed and
58 are not possible. Please note that although we did not port
all combinations, all attack targets are supported except the
frame pointer, which behaves quite differently on RISC-V. The
supported targets are: return address, stack function pointer,
heap function pointer, .bss section function pointer, .data
section function pointer, jmp_buf on stack, jmp_buf as stack
parameter, jmp_buf in heap, jmp_buf in .bss section, jmp_buf
in .data section, function pointer in a structure on stack, in
heap, in .bss section and in .data section. With our ported
CPS, we can prevent all 54 attacks.
Heap exploit. Without protection, our basic version of heap
attack targeting newlibc (a lightweight
libc) was able to
overwrite the return address to launch a return-to-libc attack
to invoke the “evil” function. With our enhanced library, we
were able to stop the attack.
VTable hijacking. Without protection, our simple VTable
hijacking attack was able to invoke the “evil” function. With
our VTable protection mechanism, we were able to prevent
the loading of attacker-crafted vfptr.
Format string exploit. Without protection, our format string
exploit can overwrite the GOT table entry and the exit handler
to invoke the “evil” function. With our enhanced library, both
attacks were stopped.
Kernel exploit. Without protection, the exploit can change
the uid of the attack process to a arbitrary number. With our
protection, the attack causes a kernel panic when trying to
access the uid.
Heartbleed. : without protection, we can leak the decoy secret
by exploiting the Heartbleed vulnerability. With our protection,
the attack was stopped when constructing the response buffer.
D. Impact on Existing Security Solutions
As a ﬁne-grained hardware-based isolation mechanism, we
expect HDFI to provide the following beneﬁts:
I Security: HDFI should provide non-bypassable protection
for the isolated data;
II Efﬁciency: HDFI should provide the protection with low
performance overhead;
III Elegance: HDFI should enable the building of elegant secu-
rity solutions, e.g., no data shadowing, which as discussed
in the introduction, has many drawbacks;
1212
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:12:03 UTC from IEEE Xplore.  Restrictions apply. 
Benchmark
164.gzip
175.vpr
181.mcf
197.parser
254.gap
256.bzip2
300.twolf
Type
Read
Write
Read
Write
Read
Write
Read
Write
Read
Write
Read
Write
Read
Write
Baseline
590M
380M
799M (35.25%)
1,217M (220.26%)
9,816M 17,200M (75.15%)
7,908M 37,480M (373.83%)
9,778M 14,310M (46.35%)
5,588M 23,720M (324.33%)
12,770M 17,610M (37.9%)
8,290M 27,490M (231.6%)
2,872M (28.61%)
2,233M
4,237M (165.81%)
1,594M
390M (71.05%)
228M
249M
896M (259.84%)
13,600M 22,350M (64.34%)
13,680M 48,650M (255.63%)
Tagger
TVB
606M (2.71%)
453M (19.21%)
10,930M (11.35%)
12,420M (57.06%)
10,503M (7.41%)
8,490M (1.11%)
13,220M (3.52%)
9,640M (16.28%)
2,239M (0.27%)
1,701M (6.71%)
268M (17.54%)
407M (63.45%)
15,820M (16.32%)
22,510M (64.55%)
MTT
589M (−0.17%)
1,017M (167.63%)
9,760M (−0.57%)
31,890M (303.16%)
9,778M
(0%)
20,300M (263.15%)
12,850M (0.63%)
24,440M (194.81%)
2,225M
(0%)
3,926M (146.3%)
229M (0.44%)
730M (193.17%)
13,600M
(0%)
38,090M (178.43%)
TVB+MTT