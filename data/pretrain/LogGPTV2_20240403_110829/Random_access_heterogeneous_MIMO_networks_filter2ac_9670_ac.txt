its orthogonal space
receivers of ongoing streams and receivers of tx respectively
the pre-coding vector of stream i
Table 1—Terms used in the description of the protocol.
nulling and alignment. For ease of exposition, we will describe it
for the case of data packets.
(a) Deﬁnitions: Consider a scenario where there are K concur-
rent streams (i.e., K transmissions) on the medium. Let tx be an
M-antenna transmitter that wants to transmit in the presence of the
ongoing streams. Let m be the maximum number of concurrent
streams that tx can transmit without interfering with the ongoing
streams. For each stream that tx transmits, si, tx sends ~visi, where ~vi
is an M-element pre-coding vector and each element vij describes
the scaling factor for stream si transmitted from antenna j. Thus,
1 si~vi.
the signal that tx transmits can be expressed asPm
Let R be the set of receivers of the ongoing streams, and R′ be
the set of receivers of tx. Each receiver, rx, is interested in decoding
the streams destined to itself, which we call the wanted streams. An
N-antenna receiver, rx, that wants n ≤ N streams receives signals
in an N-dimensional space, a subset of which is wanted and the rest
is the unwanted space. We will use the matrix U to represent the
unwanted space and U⊥ to represent the space orthogonal to U.
Table 1 summarizes our deﬁnitions.
(b) Protocol: The goal of our protocol is to compute the pre-
coding vectors such that tx delivers its streams to its receivers with-
out interfering with any of the ongoing streams. Our protocol pro-
ceeds in three steps as follows:
Step 1: Deciding whether to align or null. How does the transmit-
ter, tx, decide whether to perform interference alignment or nulling
at a particular receiver? The answer is simple. If the receiver has an
unwanted space (i.e., N > n), it does not hurt to align the new inter-
ference in the unwanted space. However, if the wanted streams oc-
cupy the whole N-dimensional space in which rx receives signals,
the transmitter has to null its interference at the receiver. Thus:
CLAIM 3.1
(WHERE TO NULL AND WHERE TO ALIGN).
To avoid interfering with the n wanted streams at an N-antenna
receiver, rx, the transmitter nulls all of its streams at rx if n = N,
and aligns its streams in rx’s unwanted space, otherwise.
Step 2: Computing the maximum number of concurrent
streams that tx can transmit. The number of concurrent streams
that tx can transmit is given by the following claim:
CLAIM 3.2
(NUMBER OF TRANSMITTED STREAMS). A
transmitter with M antennas can transmit as many as m = M − K
different streams concurrently without interfering with the ongoing
K streams.
The proof to this claim leverages the following two results:
CLAIM 3.3
(SATISFYING THE NULLING CONSTRAINT). A
transmitter can null its signal at an N-antenna receiver with n
wanted streams (where n = N) by satisfying:
∀i = 1, . . . , m,
HN×M~vi = ~0n×1,
(5)
CLAIM 3.4
(SATISFYING THE ALIGNMENT CONSTRAINT).
A transmitter can align its signal in the unwanted space, U, of an
N-antenna receiver with n wanted streams by satisfying:
∀i = 1, . . . , m,
U⊥
n×N HN×M~vi = ~0n×1,
(6)
where HN×M is the channel matrix from tx to rx.
The proofs of Claims 3.3 and 3.4 follow directly from the deﬁ-
nitions of nulling and alignment. These two claims articulate the
linear equations that tx’s pre-coding vectors must satisfy. Eqs. 5
and 6 show that, independent of nulling or alignment, a receiver
rxj ∈ R that wants nj streams results in a matrix equation of nj
rows. Hence, tx’s pre-coding vectors have to satisfy a total num-
ber of linear equations equal to P nj, where the sum is taken over
the receivers in R. This sum is simply the total number of ongoing
streams K. Further, these equations are independent because of the
independence of the channel matrices, the H’s. Given that tx has M
antennas and its pre-coding vectors have to satisfy K independent
linear equations, there are exactly M − K linearly independent such
vectors. Thus, the number of different streams that tx can send is
m = M − K.
Step 3: Computing the pre-coding vectors. Next, tx has to com-
pute the pre-coding vectors. If tx has a single receiver, this task is
fairly simple. tx combines the various nulling and alignment equa-
tions into one matrix equation as follows:
[HT
1 HT
2 . . . (U⊥
j Hj)T . . .]T~v = ~0,
where [.]T is the matrix transpose. The solutions to this equation are
the basis vectors of the null space of the matrix. Since the matrix
dimensions are K × M, there are M − K such vectors.
If tx however has multiple receivers, as in Fig. 4, it needs to
ensure that a stream that it sends to one receiver does not inter-
fere with a stream that it sends to another receiver. For example,
in Fig. 4, AP2 had to align the stream sent to each client in the
unwanted space of the other client. This process however is sim-
ilar to aligning at the receivers of ongoing streams expressed in
claim 3.4. Speciﬁcally, say stream i is destined to receiver rx∈ R′.
For every receiver rxj ∈ R′, different from rx, and whose unwanted
j~vi = ~0. Note that con-
space is U′
straints for nulling or aligning at the receivers of ongoing streams
are shared among all of tx’s streams, whereas the constraints for
nulling/aligning at tx’s other receivers differ across tx’s streams de-
pending on the receiver of each stream. Combining all these con-
straints, tx can compute its pre-coding vectors as follows:
j , tx needs to ensure that U′⊥
j H′
(COMPUTING THE CODING VECTORS). Let
CLAIM 3.5
n×N be the space orthogonal
U⊥
to the unwanted space at an
N-antenna receiver, rx. For a receiver where the unwanted space is
null, i.e., n = N, U⊥ becomes the identity matrix, I. An M-antenna
transmitter that wants to transmit m streams to receivers in R′,
while avoiding interference with receivers in R, has to pick its
coding vectors to satisfy:
U⊥
1 H1
.
.
.
U⊥
|R|H|R|
− − −−
1 H′
U′⊥
.
.
.
1
U′⊥
|R′|H′
|R′|
0
BBBBBBBBBB@
1
CCCCCCCCCCAM×M
[~v1 . . .~vm]M×m =
0
BBBBBBB@
0 . . . 0
. . .
0 . . . 0
− − −
I
1
CCCCCCCAM×m
,
(7)
where HN×M is the channel matrix from tx to rx.
where |.| is the cardinality of the set.
interference-free 
projection
q’
q
p
θ
(a) A small θ reduces the
achievable bitrate
y
interference-free 
projection
q’
q
y
θ
p
(b) A larger θ allows a higher
bitrate
Figure 7—The bitrate depends on the projection direction used
to decode, and changes with the set of concurrent transmitters.
The proof follows directly from the discussion above. Thus, tx
uses Eq. 7 to compute the pre-coding vectors. To do so, tx needs
the channel matrices, H, which it obtains using reciprocity (as de-
scribed in §2), and the alignment matrices, U⊥, which are in the re-
ceivers’ CTS messages. Once tx has the pre-coding vectors, it trans-
1 si~vi, which does not interfere with the wanted
mits its signal Pm
streams of any receiver.
3.4 Bitrate Selection
We discuss how a transmitter picks the best bitrate in the pres-
ence of ongoing transmissions. The challenge in this case is that
bitrate selection has to be done on a per-packet basis because dif-
ferent packets share the channel with different sets of transmitters
and hence require different bitrates. This constraint is very differ-
ent from the standard assumptions made by today’s bitrate selection
algorithms, which use historical performance to predict the best bi-
trate.
We use a simple example to illustrate why the optimal bitrate
of a MIMO node depends on concurrent transmitters. Consider a
2-antenna receiver that is interested in decoding a signal q in the
presence of a concurrent transmission p. The 2-antenna receiver re-
ceives the combined signal y in a 2-dimensional space as shown in
Fig. 7. To decode q, it uses the standard MIMO decoding algorithm
called zero-forcing [32] to project the received signal y on a direc-
tion orthogonal to p. This projection removes all interference from
p and yields a signal q′ = q sin θ, where θ is the angle between the
two signals p and q. The signal after projection is a scaled version
of the original signal of interest and hence can be decoded using
any standard decoder. The problem however is that, depending on
the value of θ, the projected signal q′ might have a large or small
amplitude. A larger amplitude yields a higher SNR (signal-to-noise
ratio) and hence a higher bitrate. A smaller amplitude yields a lower
SNR and hence a lower bitrate.
In
all
traditional MIMO systems where
concurrent
streams/transmissions are from the same transmitter, p and q
come from the same node and hence the angle between them does
not change as long as the channels themselves do not change.
However, when concurrent streams/transmissions are from differ-
ent nodes, the angle changes from one packet to the next, as the set
of concurrent transmitters changes, even if the channels themselves
did not change. Thus, such a system requires a per-packet bitrate
selection mechanism.
In n+, each receiver uses the light-weight RTS of a packet to
estimate the effective SNR (ESNR) after projection on the space
orthogonal to ongoing transmissions. ESNR is a novel SNR-related
metric that was recently proposed by Halperin et al [16]. Intuitively,
the ESNR is similar to the SNR in that it captures the link quality;
however, it is more useful for computing the best bitrate since it
takes into account the impact of frequency selectivity. Given the
ESNR, the receiver then chooses a valid bitrate using a table that
maps ESNR to the optimal bitrate as shown by [16], and sends this
decision back to the transmitter in the light-weight CTS message.
Note that a key characteristic of the above approach to bitrate se-
DIFS
SIFS
(a) 802.11
data
data
header
header
data
ACK
ACK
header ACK
header
time
DIFS
SIFS
SIFS
SIFS
(b) n+
data
data
header
header
ACK
ACK
header
header
data
ACK
time
Figure 8—The Light-Weight RTS-CTS used in n+: (a) a DATA-
ACK exchange in 802.11n; (b) a DATA-ACK exchange in n+,
showing that n+ does not send RTS-CTS, it rather separates the
headers from the packets and sends all headers early on.
lection is that a node can pick the optimal bitrate at the time it wins
the contention without worrying about future contention winners.
This is because transmitters that join ongoing transmissions avoid
creating interference to existing receivers. This means that a single-
antenna transmitter that wins the ﬁrst degree of freedom observes
a link quality that is unaffected by concurrent transmissions, and
hence can use any standard bitrate selection algorithm to decide its
best bitrate. A transmitter that wins contention in the presence of
ongoing transmissions needs to pick the best bitrate given the cur-
rent transmissions, but needs not worry about additional concurrent
transmissions.
3.5 Light-Weight RTS-CTS
Before data exchange, n+ needs the receiver to inform its sender
of the best bitrate, and broadcast the alignment space to nodes that
are interested in concurrent transmissions. This objective can be
achieved by preceding each packet with an RTS-CTS handshake.
RTS-CTS frames, however, would introduce a relatively high over-
head. n+ adopts a different design that achieves the goal but without
sending any control frames. To do so, n+ uses a recent design called
the light-weight handshake, described in [20]. A light-weight hand-
shake is based on the observation that 802.11 channel coefﬁcients
do not change for periods shorter than multiple milliseconds [32].
Hence, one can split a packet header from the packet body, and
make the sender and receiver ﬁrst exchange the data and ACK head-
ers and then exchange the data and ACK bodies without additional
headers. Fig. 8 compares this process with a standard data-ack ex-
change in 802.11.
The empirical study in [20] shows that the impact of separat-
ing a packet’s header from its body is insigniﬁcant on decodability,
namely the packet loss rate increases on average by 0.0005, which
is negligible for a wireless network.
The overhead of a light-weight handshake is minimal. Speciﬁ-
cally, the overhead is two SIFS intervals, as shown in Fig. 8, and
a per header checksum. In addition, each protocol may augment
the standard data or ACK header with protocol-speciﬁc ﬁelds. In
the case of n+, the standard data and ACK headers already contain
most of the needed information. Speciﬁcally, they contain a pream-
ble for computing the channels, the packet length which implies
its duration given a bitrate, the number of antennas, and the sender
and receiver MAC addresses. In addition, n+ augments the ACK
header with the bitrate and the alignment space. Since n+ performs
nulling and alignment on each OFDM subcarrier independently, a
receiver needs to send the alignment space for each of the 802.11’s
64 OFDM subcarriers. n+ leverages that the channel coefﬁcients
change slowly with OFDM subcarriers [9], and hence the align-
ment space in consecutive subcarriers is fairly similar. Thus, n+
sends the alignment space U of the ﬁrst OFDM subcarrier, and the
alignment difference (Ui − Ui−1) for all subsequent subcarriers.
Our results from a testbed of USRP2 radios in both line-of-sight
and non-line-of-sight locations (see Fig. 10) show that differential
encoding can on average compress the alignment space into three
OFDM symbols. Since the CRC and bitrate values ﬁt within one
OFDM symbol, the header size in n+ increases by four OFDM
symbols in the case of an ACK, and one OFDM symbol in the case
of a data packet.
Thus, the total overhead from the light-weight handshake is 2
SIFS plus 4 OFDM symbols, which is about 4% overhead for a
1500-byte packet transmitted at 18 Mb/s. We note that these results
are for USRP2 channels which have a 10 MHz width. 802.11 chan-
nels span 20 MHz and hence are likely to show more variability
in the alignment space of different OFDM subcarrier. Hence, the
number above should be taken as a rough estimate that indicates
that the overhead is signiﬁcantly smaller than the gain.
Finally, to support scenarios like the one in Fig. 4 where a single
node transmits concurrently to multiple receivers, we allow a single
light-weight RTS (i.e., the data header) to contain multiple receiver
addresses along with the number of antennas used for each receiver.
The receivers send their light-weight CTS’s (i.e., their ACK head-
ers), one after the other, in the same order they appear in the light-
weight RTS.
4. PRACTICAL SYSTEM ISSUES
This section addresses a few practical issues.
Hidden Terminals and Decoding Errors: The light-weight hand-
shake mechanism used by n+ has the side-effect of providing the
functionality of RTS-CTS which alleviates the hidden terminal
problem. Further, in n+, if a node misses or incorrectly decodes
one of the RTS or CTS messages from prior contention winners or
its own exchange, it does not transmit concurrently. Operationally
this is similar to missing a traditional RTS or CTS.
Retransmissions: When an n+ node transmits a packet, it keeps
the packet in its queue until the packet is acked. If the packet is not
acked, the next time the node wins the contention, it considers the
packet for transmission. However, since the node always needs to
ﬁnish with other concurrent transmissions, the packet may be frag-
mented differently or aggregated with other packets for the same
receiver.
Multipath: Our discussion has been focused on narrowband chan-
nels. However, the same description can be extended to work with
wideband channels which exhibit multipath effects. Speciﬁcally,
such channels use OFDM, which divides the bandwidth into or-
thogonal subcarriers and treats each of the subcarriers as if it was an
independent narrowband channel. Our model naturally ﬁts in this
context. Speciﬁcally, like today’s 802.11, n+ treats each OFDM
subcarrier as a narrowband channel and performs nulling and align-
ment for each OFDM subcarrier separately.
Frequency Offset: To avoid inter-carrier interference, concurrent
transmitters should have the same carrier frequency offset (CFO)
with respect to every receiver. Thus, n+’s senders compensate for
their frequency offset in a manner similar to that used in [28, 30].
Speciﬁcally, as they decode the RTS from the transmitter that won
the ﬁrst degree of freedom, all concurrent transmitters naturally es-
timate their frequency offset with respect to the ﬁrst transmitter.
They compensate for that frequency offset by multiplying their dig-