      len = strncpy_from_user(kbuf,pathname,255);
      if (strcmp(kbuf, "/data/local/tmp/nowyouseeme") == 0) {
        printk("Hiding file!n");
        return -ENOENT;
      }
      kfree(kbuf);
      return real_openat(dirfd, pathname, flags);
    }
    int init_module() {
      sys_call_table = (void*)0xc000f984;
      real_openat = (void*)(sys_call_table[__NR_openat]);
    return 0;
    }
为了构建内核模块，需要内核资源和工具链，因为之前编译了内核，一切就绪。用以下内容创建makefile文件：
    KERNEL=[YOUR KERNEL PATH]
    TOOLCHAIN=[YOUR TOOLCHAIN PATH]
    obj-m := kernel_hook.o
    all:
            make ARCH=arm CROSS_COMPILE=$(TOOLCHAIN)/bin/arm-eabi- -C $(KERNEL) M=$(shell pwd) CFLAGS_MODULE=-fno-pic modules
    clean:
            make -C $(KERNEL) M=$(shell pwd) clean
运行make编译代码，得到文件kernel_hook.ko。复制这个文件到设备并用insmod命令加载它。用lsmod命令验证模块是否加载成功。
    $ make
    (...)
    $ adb push kernel_hook.ko /data/local/tmp/
    [100%] /data/local/tmp/kernel_hook.ko
    $ adb shell su -c insmod /data/local/tmp/kernel_hook.ko
    $ adb shell lsmod
    kernel_hook 1160 0 [permanent], Live 0xbf000000 (PO)
**  
**
**0x04 修改系统调用表**
现在，我们访问/dev/kmem来用我们注入的函数地址来覆盖sys_call_table中的原始函数的指针（这也能直接在内核模块中做，但是用/dev/kmem更加简单）。我参考了Dong-Hoon You的文章，但是我用文件接口代替nmap()，因为我发现会引起一些内核警告。用下面代码创建文件kmem_util.c：
    #include  
    #include 
    #include  
    #include  
    #include 
    #define MAP_SIZE 4096UL
    #define MAP_MASK (MAP_SIZE - 1)
    int kmem;
    void read_kmem2(unsigned char *buf, off_t off, int sz)
    {
      off_t offset; ssize_t bread;
      offset = lseek(kmem, off, SEEK_SET);
      bread = read(kmem, buf, sz);
      return; 
    }
    void write_kmem2(unsigned char *buf, off_t off, int sz) {
      off_t offset; ssize_t written;
      offset = lseek(kmem, off, SEEK_SET);
      if (written = write(kmem, buf, sz) == -1) { perror("Write error");
        exit(0);
      } 
      return;
    }
    int main(int argc, char *argv[]) {
      off_t sys_call_table;
      unsigned int addr_ptr, sys_call_number;
      if (argc   
用下面的命令修改系统调用表指向我们的新函数。
    berndt@osboxes:~/Host/Research/SoftToken/Android/Kernel/msm$ adb shell su -c /data/local/tmp/kmem_util c000f984 322 bf000000
    Original value: c017a390
    New value: bf000000
假设一切正常，/bin/cat应该不能看见这个文件。
    berndt@osboxes:~/Desktop/Module$ adb shell su -c cat /data/local/tmp/nowyouseeme
    tmp-mksh: cat: /data/local/tmp/nowyouseeme: No such file or directory
现在通过所有的用户进程已经无法看见隐藏的文件了（但是为了隐藏文件有许多需要做的，包括挂钩stat，access和其他系统调用，还有在文件夹中隐藏）。
文件隐藏的教程只是一个小例子：你可以完成一大堆事，包括绕过启动检测，完整性校验和反调试技巧。
尽管代码覆盖使用符号执行是一个好的方法，但它是个复杂的任务。路径遍历意味着内存消耗，并且一些情况下要计算的表达式太过复杂。目前，判定器非常慢，判定表达式非常慢。
**0x05 总结**
hook系统调用对于Android逆向分析是一个有用的技术。为了使用它，需要用自定义内核构建自己的逆向工程沙盒。这个文章介绍了如何在Nexus5运行Lollipop，其他AOSP设备也是类似的。