    return si == len(sample)
def solve(file: str, expected_output: str = None):
    exp_output = list(expected_output) if expected_output is not None else [None]
    match_count = 0
    with open(file) as f:
        j = json.loads(f.read())
        for expected_char, arr in zip_longest(exp_output, j):
            values = []
            for char in ALPHABET:
                for a in arr:
                    if len(a) > 0:
                        byte = "".join([str(x) for x in a])
                        if not is_ordered_subset(format(ord(char), 'b').zfill(8), byte):
                            break
                else:
                    values.append(char)
            if expected_char is not None:
                print(f"[{expected_char}] | ", end='')
                if expected_char in values:
                    match_count += 1
            print(values)
    if expected_output is not None:
        print("Match count: {}/{}".format(match_count, len(exp_output)))
if __name__ == "__main__":
    solve(*sys.argv[1:])
```
We should test this theory against the sample data:
```console
root@kali:/media/sf_CTFs/checkpoint/SETI/SETI# python3 solve.py first_signal.txt "Bang, zoom, straight to the moon!"
[B] | ['B', 'E']
[a] | ['1', 'a', 'b', 'c', 'e', 'i', 'q', 'Q']
[n] | ['n']
[g] | ['g']