# Title: Towards SmartFlow: Case Studies on Enhanced Programmable Forwarding in OpenFlow Switches

## Authors
Felicián Németh, Ádám Stipkovits, Balázs Sonkoly, and András Gulyás  
HSN Lab, Department of Telecommunications and Media Informatics  
Budapest University of Technology and Economics  
{nemethf, stipkovits, sonkoly, gulyas}@tmit.bme.hu

## Abstract
The limited computational capabilities of OpenFlow switches make it challenging to implement unorthodox routing and forwarding mechanisms. Our primary goal is to explore the potential for enhancing these switches to support experimental technologies while maintaining performance. We demonstrate this with Bloom filters, greedy routing, and network coding, showing that even a minimal increase in computational capability can enable native support for these technologies. The source code and a ready-to-use virtual machine (VM) image are provided to facilitate further research and evaluation.

## Categories and Subject Descriptors
C.2.6 [Computer-Communication Networks]: Internetting—routers

## Keywords
SDN, OpenFlow, Bloom filters, Greedy routing, Network Coding

## 1. Introduction
Since its introduction, OpenFlow (OF) has become a key driver of innovation in networking. Numerous applications have been developed on top of OF, addressing various issues in packet-switched networks, including protocols, routing, traffic engineering, and security. These applications typically follow the standard OF philosophy, where forwarding tasks are executed by the switches, and control-specific operations are managed by the controller. While this approach is effective for many applications, it falls short when supporting unorthodox network technologies.

In our demonstration, we present OF testbeds for experimental technologies with significant future potential. These testbeds require enhanced functionality from the OF switches. We show that Bloom filter-based forwarding, greedy or geographical routing, and inter-session network coding can be implemented in a standard manner over OF, but with slight modifications. Our case studies indicate that introducing lightweight and low-level enhancements can make numerous networking operations available in OF. For a universal treatment of such enhancements, we envision a generic language for switch computations, similar to vertex shading languages in graphics processing.

## 2. Case Studies

### Stateless Multicast with Bloom Filters
We assign Bloom IDs to switch ports and embed a Bloom filter containing the packet's path into the destination Ethernet address field. The Bloom filter is generated by OR-ing the Bloom IDs of the ports the packet needs to pass through.

Our testbed demonstrates that a switch can be configured to follow a Bloom filter-based forwarding mechanism using only the standard OF 1.1 protocol. However, we need to deviate slightly from the regular use of flow entries. Instead of configuring flow entries for specific sets of flows, we proactively set up a separate flow table for each port. The first entry in the table matches if the packet's Bloom filter contains the port's Bloom ID. If there is a match, the switch forwards the packet via the corresponding port. Regardless of the match result, the packet is matched against the next port's flow table, enabling stateless multicast switching.

### Fixed-Sized Flow Tables with Greedy Routing
Greedy routing relies on assigning coordinates to switches in a predefined metric space. A switch then forwards packets to the neighbor closest to the packet's destination. With knowledge of the topology and the coordinates of each node, the controller can configure the flow tables of the switches. Afterward, routing operates without controller supervision.

To enable greedy routing, we introduce two simple extra actions. These experimenter actions assume that the metadata register holds two values: a distance and a port number. The `update-distance` action calculates the distance between its first argument and the packet's destination address. If the distance is smaller than the one stored in the metadata register, it updates the register with the new distance and port number. The `output-by-metadata` action forwards the packet to the port stored in the metadata.

While the routing decision can be implemented as a controller application without protocol extensions, this approach results in slower connection setup and error recovery. Additionally, the flow table size is proportional to the number of flows. By using enhanced switches, the table size is proportional only to the number of ports, and the forwarding speed is independent of the traffic load.

### 200% Link Utilization with Network Coding
Network coding (NC) can mix or encode packets before forwarding, improving resource efficiency and robustness. Implementing NC as an OF controller logic is impractical because every packet would need to be sent back and forth to the controller for encoding and decoding.

We extended the OF protocol with three simple actions to support XOR-based mixing of two flows. NC metadata is sent in three MPLS labels, following the format proposed in [5]. The outermost label is a flow identifier used as a matching condition in the flow table. Sequence numbers can be prepended to packets using the `set-mpls-label-from-counter` action, and two flows can be combined with the `XOR-encode` action. This action creates a copy of the packet and places it in the encoding queue. If there is a pending packet from the other flow, it mixes them, replaces the MPLS flow-id, and sends the resulting packet through the pipeline. The `XOR-decode` action works similarly but searches for matching sequence numbers when dequeuing a packet from the decoding queue.

These three new OF actions are simple yet general enough to support several NC use-cases, such as intersession multicasting, delay minimization, and energy minimization. To our knowledge, this is the first NC implementation in OF, and we hope it will stimulate further developments and discussions about NC-OF integration.

## 3. Demo Scenario
For the demonstration, we have integrated our extensions into the OpenWRT firmware and built a testbed with TP-Link devices. The demo topology, shown in Figure 2, can accommodate all our testbeds. Video streams are sent using different forwarding schemes in a configurable manner. Changing the active controller allows switching among the three network operations.

## 4. References
[1] N. McKeown et al. OpenFlow: Enabling Innovation in Campus Networks. ACM SIGCOMM CCR, 38(2), 2008.
[2] P. Jokela et al. LIPSIN: Line Speed Publish/Subscribe Internetworking. ACM SIGCOMM CCR, 39(4), 2009.
[3] M. Boguna, F. Papadopoulos, and D. Krioukov. Sustaining the Internet with Hyperbolic Mapping. Nature Communications, 1(6), 2010.
[4] P. A. Chou and Y. Wu. Network Coding for the Internet and Wireless Networks. IEEE Signal Processing Magazine, 24(5), 2007.
[5] T. Biermann, A. Schwabe, and H. Karl. Creating Butterflies in the Core – A Network Coding Extension for MPLS/RSVP-TE. In Proc. of Networking, 2009.

**Note:** Our implementation extends the OF 1.1 software switch by TrafficLab, Ericsson Research.