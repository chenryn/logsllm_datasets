a
e
l
Z
Z
(a) (Gjc,L,H)-hybrid world execution of Π with
S,R and A
(b) Execution of F L
˜R and Sim
cfe with dummy parties ˜S and
Figure 9: Setup of a Simulation with honest parties
jc
C GUC security proof
In order to prove Theorem 1 we need to show that the ideal world (the execution of F L
cfe with
dummy parties ˜S and ˜R and the ideal adversary Sim) is indistinguishable from the hybrid world.
In our case the hybrid world is the execution of Π with parties S, R and an adversary A where
each party interacts with the hybrid functionalities GL,H
and H. Figure 9 depicts the setup of the
security proof. The environment Z acts as a ppt algorithm, which distinguishes whether it interacts
with the hybrid world execution of the protocol Π (c.f. Figure 9 (a)) or the with the ideal execution
cfe (c.f. Figure 9 (b)). In the ideal world the parties ˜R and ˜S are so called
of the functionality F L
dummy parties which only forward the in- and outputs of Z to the ideal functionality F L
cfe whereas
in the hybrid world the parties run the code of protocol Π. Z can use the leakage information
from the adversary A (respectively the ideal adversary Sim) or actively inﬂuence the execution to
distinguish the two worlds. Additionally, it selects the inputs for the two parties and learns its
outputs. Lastly Z can corrupt any of the parties (using the adversary) to learn any internal values,
and all messages send to and from the party. We will consider these cases in detail later.
To prevent Z from distinguishing the executions we need to construct a simulator, that outputs
all messages such that it looks like the hybrid world execution to the Environment Z. Speciﬁcally,
Sim needs to ensure that the outputs of the parties are identical in the hybrid world and the
simulation. Even with corrupted parties he needs to generate an indistinguishable transcript of
the real world execution while ensuring that the global functionality L blocks or unblocks money
In order to formally prove Theorem 1 we need to consider four cases, the
in the same rounds.
protocol execution with two honest parties, execution with a malicious sender S∗, execution with a
dishonest receiver R∗ and the case where both parties are corrupt. All of the described termination
cases (c.f. Section 4) provide seller and buyer fairness as deﬁned in section 3.2.
33
jc
jc
Simpliﬁcations and Notation. Whenever the simulator Sim simulates the execution of GL,H
on some input of message m we write m(cid:48) ← GL,H
(m) to indicate that the m(cid:48) is the output of GL,H
after m was received. Simulation of this execution includes leaking these message m, m(cid:48) to the
environment and sending m(cid:48) to the corrupted parties according to the behavior of GL,H
. Note, that
GL,H
is only internally simulated by Sim and does not freeze/unfreeze coins in L.
Whenever parties send messages to F L
, the environment (over the adversary) has
the power to delay these messages by time ∆. We won’t argue about this power in detail during
the simulation since we make the following simplifying assumption. In every round (1) - (5) the
adversary may instruct the ideal functionality (over the inﬂuence port) by how much time the
message is delayed. Using this knowledge Sim will ensure that F L
cfe is always delayed by the same
amount of time as the GL,H
functionality would be. This ensures that Z cannot distinguish the
real world for the simulation, using this inﬂuence. This simpliﬁcation allows us to construct the
simulators without mentioning this inﬂuence explicitly in every step.
cfe and GL,H
jc
jc
jc
jc
jc
To simplify complex steps in our proofs we sometimes use a sequence of simulation games. This
technique is often used in simulation based proofs that show indistinguishability. Instead of showing
indistinguishability of the real world execution Π and ideal world simulation with Sim immediately,
we construct the experiments Game 0, . . . , Game n. We call the real world execution Game 0 and
Game n is the ﬁnal UC simulation. The intermediate games are hybrid simulations, where each
Game is one step closer to the ideal world simulation, but the Simulator in these intermediate
games additionally controls the in- and outputs of the honest parties. By showing that for each
i ∈ [n − 1] that Game i is computationally indistinguishable from Game i+1 we show that the real
world execution is indistinguishable from the ideal world simulation, i.e. Game 0 ≈c Game n.
C.1 Simulation without corruptions
Simulation of the protocol execution with an honest seller and honest receiver is special case, in
which the dummy parties ˜S and ˜R will forward all messages from Z to F L
cfe in the ideal world (as
depicted in Figure 9 (a)). The simulation in this case is straight forward since Sim honest will be
only required to generate a transcript of all messages of the execution of Π towards the adversary
and thus Z. This includes the simulation of the ﬁrst protocol message, send from S to R and all
following interactions with GL,H
and H. Note, that the communication between the honest S and
R is private and Z cannot read the content of this message, but only see if a message was sent.
Claim 1. There exists a eﬃcient algorithm Sim honest such that for all ppt environments Z, that do
not corrupt any party it holds that the execution of Π in the (Gjc,L,H)-hybrid world in presence
of adversary A is computationally indistinguishable from the ideal world execution of F L
cfe with the
ideal adversary Sim honest.
Proof. We deﬁne a simulator Sim honest, which internally runs GL,H
and has oracle access to H.
jc
jc
Simulator Sim honest without corruptions
1. If S starts the execution in with F L
cfe in the ﬁrst round Sim honest learns id , p, φ from F L
cfe.
Then Sim honest, selects k ← {0, 1}µ, sets x∗ = 1n×λ and computes Encode(x∗, k, φ) = z. He
computes rφ = root(Mtree(φ)), rz = root(Mtree(z)) and (c, d) ← Commit(k). Now he sim-
ulates the execution of Π by running (initialized , id , p, c, rφ, rz) ← GL,H
(init, id , p, c, rφ, rz).
cfe in the second round, Sim honest runs
2. If R sends (buy, id ,R) in the execution with F L
jc
34
(Gjc,L,H)-Hybrid World
A
leakage
inﬂuence
H
GL,H
jc
e
g
a
k
a
e
l
e
c
n
e
u
ﬂ
n
i
S
secure channel
R
R
t
u
o
R
n
i
Ideal World
SimS
e
g
a
k
a
e
l
e
c
n
e
u
ﬂ
n
i
˜S∗
inS
outS
F L
cfe
Z
Z
in
R
o
u
t
R
˜R
(a) (Gjc,L,H)-hybrid world execution of Π with
S,R and A
(b) Execution of F L
˜R and SimS
cfe with dummy parties ˜S and
Figure 10: Simulation against Z with corrupted sender S∗ and honest receiver R
(ﬂ, id ) ← GL,H
message in the ideal world, Sim honest simulates the automatic refund of p coins in GL,H
terminates the simulation.
(accept, id ) to simulate the acceptance by R. If instead R does not send this
and
jc
jc
3. In the reveal phase, Sim honest runs (revealed , id , d, k) ← GL,H
4. In the payout phase, Sim honest waits for F L
(reveal , id , d, k).
cfe to unfreeze the coins. If F L
cfe unfroze them
in favor of S, Sim honest simulates the execution of (sold , id ) ← GL,H
(ﬁnalize, id ). On the
other hand, if the coins are unfrozen in the name of R, Sim honest simulates a complain by
R. Speciﬁcally, he generates a complain about the output of φ i.e., that the output of gm
does not equal 1a. Then terminate the simulation.
jc
jc
aSpeciﬁcally, π = ((φm, Mproof (m, φm, Mtree(φ))) , (0, Mproof (m, 0, Mtree(z))))
Running Sim honest in the F L
cfe ideal world is indistinguishable from the (Gjc,L,H)-hybrid world
execution to Z unless Z learns z and decrypts it to X(cid:48) (cid:54)= X (using k, which he learns in the reveal
phase). But we can show that this only happens if z breaks the hiding property of the Merkle tree
commitment, which is computationally hard, as explained in Section B. This way z does not learn
any decryption of z, except for the last element which equals 0 if Sim honest simulates a complaint
by R.
C.2 Simulation with a malicious sender
Simulation with a corrupted sender is slightly more tricky than the simulation with two honest
parties. The simulator in this case needs to simulate the transcript of Π and additionally all
outputs of the corrupted sender towards F L
cfe and Z. This means whenever the Z sends a message
35
through the corrupted dummy party ˜S∗ it is send to SimS directly. Using these inputs SimS
cfe in the name of S∗. Figure 10
internally simulates the execution of Π while interacting with F L
shows the setup of this simulation.
Claim 2. There exists a eﬃcient algorithm SimS such that for all ppt environments Z, that only
corrupt the sender it holds that the execution of Π in the (Gjc,L,H)-hybrid world in presence
of adversary A is computationally indistinguishable from the ideal world execution of F L
cfe with the
ideal adversary SimS.
Proof. Since the simulation in presence of a corrupted sender is not straight forward, we construct
a sequence of two simulation games Game 1 and Game 2, where the simulator of Game 2 equals
the simulator SimS from the ideal world execution. But before we construct this ideal adversary,
we will start with a slightly modiﬁed Experiment Game 1, in which the simulator SimS
1 holds the
private inputs of the honest receiver and generates messages on his behalf. We will ﬁrst sketch this
1 and argue that the execution of Π in the (Gjc,L,H)-hybrid world is indistinguish-
simulator SimS
able to the execution of Game 1 and then show how to change the simulator, such that it runs in
the ideal world (Game 2) and again show indistinguishability.
Simulator SimS
1
1. Upon receiving message (init, id , p, c, rz, rφ) in the ﬁrst round, SimS simulates the execution
of the hybrid functionality by sending (initialized , p, c, rφ, rz) = GL,H
(init, id , p, c, rz, rφ) to
˜S∗. If S∗ did not send the message (init), SimS aborts the simulation. Otherwise, if message
(sell , id , z, φ, c) was also received from ˜S∗ in the ﬁrst round, SimS
1 sets x∗ = 1n×λ and sends
(init, id , φ, p, x∗) to F L
cfe.
2. In the second round SimS
cfe, which means that the p
coins were frozen in L. To simulate that this was performed by the judge smart contract,
SimS
cfe was received in round 2,
SimS
1 waits to receives (buy, id ,R) from F L
(accept, id ). If no message from F L
1 runs (active, id ) = GL,H
1 terminates the simulation.
jc
jc
jc
3. Upon receiving (reveal , id , d, k) from ˜S∗ in round 3, such that Open(c, d, k) = 1, SimS
1 runs (revealed , id , d, k) ← GL,H
1 triggers
cfe to output of x∗ to R. Additionally SimS
F L
(reveal , id , d, k)
1 controls the in- and outputs of R, he will exchange
to simulate the execution of Π. Since SimS
the output message to the environment from (bought, id , x∗) to (bought, id , x), where x is the
extracted witness (x, π) ← Extract(φ, z, k). If no message (reveal , id , d, k) from ˜S∗ is received,
send (abort, id ) to F L
cfe in the name of S∗ and simulate the refund in the hybrid world by
running GL,H
until it terminates.
1 simulates the acceptance by an honest receiver by running (sold , id ) ←
cfe. He immediately triggers the unfreezing of S
1 needs to simulate
(complain, id , π) and letting F L