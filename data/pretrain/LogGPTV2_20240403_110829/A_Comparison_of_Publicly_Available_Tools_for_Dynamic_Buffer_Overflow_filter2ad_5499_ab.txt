have been suggested—ﬁrstly the random canary which
consists of a random 32-bit value calculated at run-time,
and secondly the terminator canary which consists of all
four kinds of string termination sequences, namely Null,
Carriage Return, -1 and Line Feed. In the ran-
dom canary case the attacker has to guess, or somehow
retrieve, the random value at run-time. In the terminator
canary case the attacker has to input all the termination
sequences to keep the canary intact during the overﬂow.
This is not possible since the string function receiving the
input will terminate on one of the sequences.
Note that these techniques only stop overﬂow attacks
that overwrite everything along the stack, not general at-
tacks against the return address. The attacker can still
abuse a pointer, making it point at the return address and
writing a new address to that memory position. This
shortcoming of StackGuard was discovered by Mariusz
Woloszyn, alias “Emsi” and presented by Bulba and
Kil3er [4]. The StackGuard team has addressed this prob-
lem by not only saving the canary value but the XOR of
the canary and the correct return address. In this way an
abused return address with an intact canary preceding it
would still be detected since the XOR of the canary and
the return address has changed. If the XOR scheme is used
the canary has to be random since the terminator canary
XORed with an address would not terminate strings any-
more.
3.3.2 Random Canaries Unsupported
While testing StackGuard we noticed that the compiler did
not respond to the ﬂag set for random canary. We e-mailed
Crispin Cowan and according to him: “There is only one
threat that the XOR canary defeats, and the terminator ca-
nary does not: Emsi’s attack. However, if you have a vul-
nerability that enables you to deploy Emsi’s attack, then
you have many other targets to attack besides function re-
turn address values. Therefore, we dropped support for
random canaries [8]”. We agree that the return address is
not the only attack target but it is the most popular and un-
like function pointers and longjmp buffers, the return ad-
dress is always present. According to Cowan’s e-mail and
a WireX paper a better solution is on its way called Point-
Guard which will protect the integrity of pointers in gen-
eral with the same kind of canary solution [11]. This im-
plies that PointGuard will protect against all attack forms
overﬂowing pointers (See attack forms 3a–f and 4a–f in
section 4).
StackGuard is available for download at http://
www.immunix.org/
3.4 Stack Shield
Stack Shield is a compiler patch for GCC made by Ven-
In the current version 0.7 it implements
dicator [33].
three types of protection, two against overwriting of the
return address (both can be used at the same time) and
one against overwriting of function pointers.
3.4.1 Global Ret Stack
The Global Ret Stack protection of the return address is
the default choice for Stack Shield. It is a separate stack
for storing the return addresses of functions called during
execution. The stack is a global array of 32-bit entries.
Whenever a function call is made, the return address being
pushed onto the normal stack is at the same time copied
into the Global Ret Stack array. When the function re-
turns, the return address on the normal stack is replaced
by the copy on the Global Ret Stack. If an attacker had
overwritten the return address in one way or another the
attack would be stopped without terminating the process
execution. Note that no comparison is made between the
return address on the stack and the copy on the Global Ret
Stack. This means only prevention and no detection of an
attack. The Global Ret Stack has by default 256 entries
which limits the nesting depth to 256 protected function
calls. Further function calls will be unprotected but exe-
cute normally.
3.4.2 Ret Range Check
A somewhat simpler but faster version of Stack Shield’s
protection of return addresses is the Ret Range Check. It
uses a global variable to store the return address of the
current function. Before returning, the return address on
the stack is compared with the stored copy in the global
variable. If there is a difference the execution is halted.
Note that the Ret Range Check can detect an attack as
opposed to the Global Ret Stack described above.
3.4.3 Protection of Function Pointers
Lower address
Stack Shield also aims to protect function pointers from
being overwritten. The idea is that function pointers nor-
mally should point into the text segment of the process’
memory. That’s where the programmer is likely to have
implemented the functions to point at. If the process can
ensure that no function pointer is allowed to point into
other parts of memory than the text segment, it will be im-
possible for an attacker to make it point at code injected
into the process, since injection of data only can be done
into the data segment, the BSS segment, the heap, or the
stack.
Stack Shield adds checking code before all function
calls that make use of function pointers. A global vari-
able is then declared in the data segment and its address
is used as a boundary value. The checking function en-
sures that any function pointer about to be dereferenced
points to memory below the address of the global bound-
ary variable. If it points above the boundary the process
is terminated. This protection will give false positives if
the programmer has intended to use dynamically allocated
function pointers.
Stack Shield is available for download at http://
www.angelfire.com/sk/stackshield/
3.5 ProPolice
Hiroaki Etoh and Kunikazu Yoda from IBM Research in
Tokyo have implemented the perhaps most sophisticated
compiler protection called ProPolice [15].
3.5.1 The ProPolice Concept
Etoh’s and Yoda’s GCC patch ProPolice borrows the main
idea from StackGuard (see section 3.3)—they use canary
values to detect attacks on the stack. The novelty is the
protection of stack allocated variables by rearranging the
local variables so that char buffers always are allocated
at the bottom, next to the old base pointer, where they
cannot be overﬂown to harm any other local variables.
Local variables
and pointers
Local char buffers
Guard value
Old base pointer
Return address
Arguments
Higher address
Figure 6. The ProPolice stack frame.
be detected. When an attack is detected the process is ter-
minated.
When testing ProPolice we noticed some irregularities
in when and was not the buffer overﬂow protection was
included. It seems like small char buffers (e.g. 5 bytes)
confuse ProPolice, causing it to skip the protection even
if the user has set the protector ﬂag. This gives the overall
impression maybe that ProPolice is somewhat unstable.
ProPolice is available for download at http://www.
trl.ibm.com/projects/security/ssp/
3.6 Libsafe and Libverify
Another defense against buffer overﬂows presented by
Arash Baratloo et al [1] is Libsafe. This tool actually
provides a combination of static and dynamic intrusion
prevention. Statically it patches library functions in C
that constitute potential buffer overﬂow vulnerabilities. A
range check is made before the actual function call which
ensures that the return address and the base pointer cannot
be overwritten. Further protection has been provided [2]
with Libverify using a similar dynamic approach to Stack-
Guard (see Section 3.3).
3.5.2 Building a Safe Stack Frame
3.6.1 Libsafe
After a program has been compiled with ProPolice the
stack frame of functions look like that shown in ﬁgure 6.
No matter in what order local variables, pointers, and
buffers are declared by the programmer, they are rear-
ranged in stack memory to reﬂect the structure shown
above. In this way we know that local char buffers can
only be overﬂown to harm each other, the old base pointer
and below. No variables can be attacked unless they are
part of a char buffer. And by placing the canary which
they call the guard between these buffers and the old base
pointer all attacks outside the char buffer segment will
The key idea behind Libsafe is to estimate a safe bound-
ary for buffers on the stack at run-time and then check
this boundary before any vulnerable function is allowed
to write to the buffer. Vulnerable functions they consider
to be the ones in table 1 below.
As a boundary value Libsafe uses the old base pointer
pushed onto the stack after the return address. No local
variable should be allowed to expand further down the
stack than the beginning of the old base pointer. In this
way a stack-based buffer overﬂow cannot overwrite the
return address.
Function
strcpy(char *dest, const char *src)
strcat(char *dest, const char *src)
getwd(char *buf)
gets(char *s)
[vf]scanf(const char *format, ...)
realpath(char *path, char resolved_path[])
[v]sprintf(char *str, const char *format, ...) May overﬂow str
Vulnerability
May overﬂow dest
May overﬂow dest
May overﬂow buf
May overﬂow s
May overﬂow arguments
May overﬂow path
Table 1. Vulnerable C functions that Libsafe adds protection to.
Lower address
Local variables
Boundary address Old base pointer
Return address
Arguments
Higher address
Figure 7. The Libsafe stack frame.
This boundary is enforced by overloading the functions
in table 1 with wrapping functions. These wrappers ﬁrst
compute the length of the input as well as the allowed
buffer size (i.e. from the buffer’s starting point to the old
base pointer) and then performs a boundary check. If the
input is within the boundary the original functionality is
carried out. If not the wrapper writes an alert to the sys-
tem’s log ﬁle and then halts the program. Observe that
overﬂows within the local variables on the stack, such as
function pointers, are not stopped.
3.6.2 Libverify
Libverify is an enhancement of Libsafe, implementing re-
turn address veriﬁcation similar to StackGuard. But since
this is a library it does not require recompilation of the
software. As with Libsafe the library is pre-loaded and
linked to any program running on the system.
The key idea behind Libverify is to alter all functions in
a process so that the ﬁrst thing done in every function is to
copy the return address onto a canary stack located on the
heap, and the last thing done before returning is to verify
the return address by comparing it with the address saved
on the canary stack. If the return address is still correct the
process is allowed to continue executing. But if the return
address does not match the saved copy, execution is halted
and a security alert is raised. Libverify does not protect
the integrity of the canary stack. They propose protecting
it with mprotect() as in RAD (see section 3.7) but as
in the RAD case this will most probably impose a very
serious performance penalty [6].
To be able to do this, Libverify has to rearrange the code
quite a bit. First each function is copied whole to the heap
(requires executable heap) where it can be altered. Then
the saving and verifying of the return address is injected
into each function by overwriting the ﬁrst instruction with
a call to wrapper entry and all return instructions with
a call to wrapper exit. The need for copying the code
to the heap is due to the Intel CPU architecture. On other
platforms this could be solved without copying the code
[2].
Libverify is needed to give a more complete protection
of the return address since Libsafe only addresses standard
C library functions (as pointed out by Istvan Simon [32]).
With Libsafe vulnerabilities could still occur where the
programmer has implemented his/her own memory han-
dling.
Libsafe and Libverify are available for download
http://www.research.avayalabs.com/
at
project/libsafe/
3.7 Other Dynamic Solutions
The dynamic intrusion prevention techniques presented
above are not the only ones. Other researchers have had
similar ideas and implemented alternatives.
Tzi-cker Chiueh and Fu-Hau Hsu from State University
of New York at Stony Brook have presented a compiler
patch for protection of the return address [6]. They call
their GCC patch Return Address Defender, or RAD for
short. The key idea behind RAD is quite similar to the re-
turn address protection of Stack Shield described in Sec-
tion 3.4. Every time a function call is made and a new
stack frame is created, RAD stores a copy of the new re-
turn address. When a function returns, the return address
about to be dereferenced is ﬁrst checked against its copy.
RAD is not publicly available.
The GCC patch StackGhost [25] by Mike Frantzen and
Mike Shuey makes use of system speciﬁc features of the
Sun Sparc Station to implement a sophisticated protec-
tion of the return address. They propose both XORing a
random value with the return address (as StackGuard) as
well as keeping a separate return address stack (as Stack
Shield, RAD and Libverify). They also suggest using
cryptographic methods instead of XOR to enhance secu-
rity.
CCured and Cyclone are two recent research projects
aiming to signiﬁcantly enhance type and bounds checking
in C. They both use a combination of static analysis and
run-time checks.
CCured [27, 26] is an extension of the C program-
ming language that distinguishes between various kinds
of pointers depending on their usage. The purpose of
this distinction is to be able to prevent improper usage of
pointers and thus to guarantee that programs do not access
memory areas they shouldn’t access. CCured will change
C programs slightly so that they are type safe. CCured
does not change code that does not use pointers or arrays.
Cyclone [21] is a C dialect that prevents safety vio-
lations such as buffer overﬂows, dangling pointers, and
format string attacks by ruling out certain parts of ANSI
C and replacing them with safer versions. For instance
setjmp() and longjmp() are unsupported (in some
cases exceptions are used instead). Also pointer arith-
metic is restricted. An average of 10% of the lines of code
have to be changed when porting programs from C to Cy-
clone.
Richard Jones and Paul Kelly 1997 presented a GCC
compiler patch in which they implemented run-time
bounds checking of variables [22]. For each declared stor-
age pointer they keep an entry in a table where the base
and limit of the storage is kept. Before any pointer arith-
metic or pointer dereferencing is made, the base and limit
is checked in the table. While not explicitly aimed for se-
curity, this technique would effectively stop all kinds of
buffer overﬂow attacks. Sadly their solution suffered both
from performance penalties of more than 400 %, as well as
incompatibilities with real-world programs (according to
Crispin Cowan et al [9]). Because of the bad performance
and compatibility we considered Jones’ and Kelly’s so-
lution less interesting for software development and ex-
cluded it from our test.
It is also possible to have support for dynamic in-
trusion prevention in the operating system. A popular
idea is the non-executable stack. This would make in-
jection of attack code into the stack useless. But there
are many ways around this protection. A few exam-
ples include using code already linked into the program
from libraries (for instance calling system() with the
parameter "/bin/sh"), injecting the attack code into
other memory structures such as environment variables,
or by exploiting buffer overﬂows on the heap or in the
BSS/data segment. The Linux kernel patch from the
Openwall Project is publicly available and implements a
non-executable stack as well as protection against attacks
using library functions [13]. Since it is a kernel patch it is
up to the user and not the producer of software to install
it. Therefore we did not include it in our test.
David Wagner and Drew Dean have presented an in-
teresting approach for intrusion detection that relates to
the functionality of the tools described in this paper [34].
They model the program’s correct execution behavior via
static analysis of the source code, building up callgraphs
or even equivalent context-free languages deﬁning the set
of possible system call traces. Then these models are used
for run-time monitoring of execution. Any deviation from
the deﬁned ’good’ behavior will make the model enter an
unaccepting state and trigger the intrusion alarm. As the
metric for precision in intrusion detection they propose
the branching factor of the model. A low branching factor
means that the attacker has few choices of what to do next
if he or she wants to evade detection.
4 Comparison of the Tools
Here we deﬁne our testbed of twenty buffer overﬂow at-
tack forms and then present the outcome of our empirical
and theoretical comparison of the tools from section 3.2.
We deﬁne an attack form as a combination of a tech-
nique, a location, and an attack target. As described in
section 2.3 we have identiﬁed two techniques, two types
of location and four attack targets:
Techniques. Either we overﬂow the buffer all the way to
the attack target or we overﬂow the buffer to redirect
a pointer to the target.
Locations. The types of location for the buffer overﬂow
are the stack or the heap/BSS/data segment.
Attack Targets. We have four targets—the return ad-
dress, the old base pointer, function pointers, and
longjmp buffers. The last two can be either variables
or function parameters.
Considering all practically possible combinations gives
us the twenty attack forms listed below.
1. Buffer overﬂow on the stack all the way to the target:
(a) Return address
(b) Old base pointer
(c) Function pointer as local variable
(d) Function pointer as parameter
(e) Longjmp buffer as local variable
(f) Longjmp buffer as function parameter
2. Buffer overﬂow on the heap/BSS/data all the way to
the target:
(a) Function pointer
(b) Longjmp buffer
Development Tool
StackGuard Terminator Canary
Stack Shield Global Ret Stack
Stack Shield Range Ret Check
Stack Shield Global & Range
ProPolice
Libsafe and Libverify
Attacks
prevented
0 (0%)
5 (25%)
0 (0%)
6 (30%)
8 (40%)
0 (0%)
Attacks
halted
3 (15%)
0 (0%)
0 (0%)