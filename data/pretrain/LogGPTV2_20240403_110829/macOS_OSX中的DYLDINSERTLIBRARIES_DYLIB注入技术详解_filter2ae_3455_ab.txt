### 优化后的文本

在旧版本的源代码中，`return false;` 和 `#endif` 是相关代码的一部分。然而，在最新版的 [dyld.cpp](https://opensource.apple.com/source/dyld/dyld-635.2/src/dyld.cpp.auto.html) 中，代码结构有所变化，但基本原理保持一致。以下是新版代码的相关片段：

```cpp
static void configureProcessRestrictions(const macho_header* mainExecutableMH)
{
    uint64_t amfiInputFlags = 0;
#if TARGET_IPHONE_SIMULATOR
    amfiInputFlags |= AMFI_DYLD_INPUT_PROC_IN_SIMULATOR;
#elif __MAC_OS_X_VERSION_MIN_REQUIRED
    if (hasRestrictedSegment(mainExecutableMH))
        amfiInputFlags |= AMFI_DYLD_INPUT_PROC_HAS_RESTRICT_SEG;
#elif __IPHONE_OS_VERSION_MIN_REQUIRED
    if (isFairPlayEncrypted(mainExecutableMH))
        amfiInputFlags |= AMFI_DYLD_INPUT_PROC_IS_ENCRYPTED;
#endif

    uint64_t amfiOutputFlags = 0;
    if (amfi_check_dyld_policy_self(amfiInputFlags, &amfiOutputFlags) == 0) {
        gLinkContext.allowAtPaths              = (amfiOutputFlags & AMFI_DYLD_OUTPUT_ALLOW_AT_PATH);
        gLinkContext.allowEnvVarsPrint         = (amfiOutputFlags & AMFI_DYLD_OUTPUT_ALLOW_PRINT_VARS);
        gLinkContext.allowEnvVarsPath          = (amfiOutputFlags & AMFI_DYLD_OUTPUT_ALLOW_PATH_VARS);
        gLinkContext.allowEnvVarsSharedCache   = (amfiOutputFlags & AMFI_DYLD_OUTPUT_ALLOW_CUSTOM_SHARED_CACHE);
        gLinkContext.allowClassicFallbackPaths = (amfiOutputFlags & AMFI_DYLD_OUTPUT_ALLOW_FALLBACK_PATHS);
        gLinkContext.allowInsertFailures       = (amfiOutputFlags & AMFI_DYLD_OUTPUT_ALLOW_FAILED_LIBRARY_INSERTION);
    } else {
#if __MAC_OS_X_VERSION_MIN_REQUIRED
        // 支持旧内核中的 chrooting
        bool isRestricted = false;
        bool libraryValidation = false;

        // 任何设置了 setuid 或 setgid 位或包含 __RESTRICT 段的进程都会受到限制
        if (issetugid() || hasRestrictedSegment(mainExecutableMH)) {
            isRestricted = true;
        }

        bool usingSIP = (csr_check(CSR_ALLOW_TASK_FOR_PID) != 0);
        uint32_t flags;
        if (csops(0, CS_OPS_STATUS, &flags, sizeof(flags)) != -1) {
            // 在 macOS 上，CS_RESTRICT 表示程序使用了权限签名
            if ((flags & CS_RESTRICT) && usingSIP) {
                isRestricted = true;
            }
            // 库验证放宽搜索，但要求所有内容都进行代码签名
            if (flags & CS_REQUIRE_LV) {
                isRestricted = false;
                libraryValidation = true;
            }
        }

        gLinkContext.allowAtPaths                = !isRestricted;
        gLinkContext.allowEnvVarsPrint           = !isRestricted;
        gLinkContext.allowEnvVarsPath            = !isRestricted;
        gLinkContext.allowEnvVarsSharedCache     = !libraryValidation || !usingSIP;
        gLinkContext.allowClassicFallbackPaths   = !isRestricted;
        gLinkContext.allowInsertFailures         = false;
#else
        halt("amfi_check_dyld_policy_self() failed\n");
#endif
    }
}

bool processIsRestricted()
{
#if __MAC_OS_X_VERSION_MIN_REQUIRED
    return !gLinkContext.allowEnvVarsPath;
#else
    return false;
#endif
}
```

如果满足以下条件之一，代码会将 `gLinkContext.allowEnvVarsPath` 设置为 `false`：
1. 主执行程序中包含受限段。
2. 设置了 setuid/setgid 位。
3. 启用了 SIP（系统完整性保护），并且程序设置了 `CS_RESTRICT` 标志（在 macOS 上表示程序使用了权限签名）。

然而，如果设置了 `CS_REQUIRE_LV` 标志，则会清除这个标志。`CS_REQUIRE_LV` 标志的作用是确保加载器识别并验证应用程序中的每个动态库是否使用与主程序相同的密钥进行签名。这意味着只有同一个开发者开发的应用程序才能注入这些动态库。

另一种保护应用程序的方法是启用 [Hardened Runtime](https://developer.apple.com/documentation/security/hardened_runtime_entitlements)，然后根据需要确定是否启用 [DYLD 环境变量](https://developer.apple.com/documentation/bundleresources/entitlements/com_apple_security_cs_allow-dyld-environment-variables)。上述代码可以追溯到 2013 年，而 Hardened Runtime 选项从 Mojave（10.14）才开始引入，该系统版本于 2018 年发布，因此在源码中没有找到相关信息。

CS 标志对应的值如下（参考 [cs_blobs.h](https://opensource.apple.com/source/xnu/xnu-4903.221.2/osfmk/kern/cs_blobs.h.auto.html)）：
```c
#define CS_RESTRICT      0x0000800  /* 告诉 dyld 处理受限 */
#define CS_REQUIRE_LV    0x0002000  /* 要求库验证 */
#define CS_RUNTIME       0x00010000 /* 应用硬化运行时策略 */
```

### 实际测试

为了验证这些理论，我创建了一个 Xcode 项目，并根据需要修改了配置信息。首先，我们测试 SUID 位的效果：

```sh
# 设置所有权
$ sudo chown root test
$ ls -l test
-rwxr-xr-x  1 root  staff  8432 Jul 8 16:46 test

# 设置 suid 标志并运行，可以看到动态库未被加载
$ sudo chmod +s test
$ ls -l test
-rwsr-sr-x  1 root  staff  8432 Jul 8 16:46 test
$ ./test 
Hello world
$ DYLD_INSERT_LIBRARIES=inject.dylib ./test
Hello world

# 移除 suid 标志并运行
$ sudo chmod -s test
$ ls -l test
-rwxr-xr-x  1 root  staff  8432 Jul 8 16:46 test
$ DYLD_INSERT_LIBRARIES=inject.dylib ./test
Hello from dylib!
Hello world
```

有趣的是，之前有一个本地提权（LPE）漏洞，它没有正确处理某个环境变量和 SUID 文件，从而导致权限提升。详细信息可以参考 [这篇文章](https://www.sektioneins.de/blog/15-07-07-dyld_print_to_file_lpe.html)。

接下来，我创建了一个空白的 Cocoa App 来测试其他防护效果，并导出了环境变量以避免每次都在命令行中指定：

```sh
export DYLD_INSERT_LIBRARIES=inject.dylib
```

编译程序后，以默认状态运行，可以看到动态库会被注入：

```sh
$ ./HelloWorldCocoa.app/Contents/MacOS/HelloWorldCocoa 
Hello from dylib!
```

如果想设置受限段，可以在 Build Settings -> Linking -> Other linker flags 中添加以下值：

```sh
-Wl,-sectcreate,__RESTRICT,__restrict,/dev/null
```

重新编译后，我们会看到一系列错误，提示动态库已被忽略：

```sh
dyld: warning, LC_RPATH @executable_path/../Frameworks in /Users/csaby/Library/Developer/Xcode/DerivedData/HelloWorldCocoa-apovdjtqwdvhlzddnqghiknptqqb/Build/Products/Debug/HelloWorldCocoa.app/Contents/MacOS/HelloWorldCocoa being ignored in restricted program because of @executable_path
```

我们的动态库没有被加载，这符合预期。可以通过 `size` 命令验证应用中存在相关段：

```sh
$ size -x -l -m HelloWorldCocoa.app/Contents/MacOS/HelloWorldCocoa
Segment __PAGEZERO: 0x100000000 (vmaddr 0x0 fileoff 0)
Segment __TEXT: 0x2000 (vmaddr 0x100000000 fileoff 0)
...
Segment __RESTRICT: 0x0 (vmaddr 0x100003000 fileoff 12288)
    Section __restrict: 0x0 (addr 0x100003000 offset 12288)
    total 0x0
Segment __LINKEDIT: 0x6000 (vmaddr 0x100003000 fileoff 12288)
total 0x100009000
```

同样，也可以使用 `otool -l [path to the binary]` 命令来完成同样的任务，输出结果略有不同。

接下来，我们启用 [hardened runtime](https://developer.apple.com/documentation/security/hardened_runtime_entitlements)。可以通过 Build Settings -> Signing -> Enable Hardened Runtime 或 Capabilities 来设置。设置完成后重新编译，运行程序会看到以下错误信息：

```sh
dyld: warning: could not load inserted library 'inject.dylib' into hardened process because no suitable image found.  Did find:
    inject.dylib: code signature in (inject.dylib) not valid for use in process using Library Validation: mapped file has no cdhash, completely unsigned? Code has to be at least ad-hoc signed.
    inject.dylib: stat() failed with errno=1
```

但如果使用相同的证书对动态库进行签名，运行结果如下：

```sh
codesign -s "Mac Developer: PI:EMAIL (RQGUDM4LR2)" inject.dylib
$ codesign -dvvv inject.dylib 
Executable=inject.dylib
Identifier=inject
Format=Mach-O thin (x86_64)
CodeDirectory v=20200 size=230 flags=0x0(none) hashes=3+2 location=embedded
Hash type=sha256 size=32
CandidateCDHash sha256=348bf4f1a2cf3d6b608e3d4cfd0d673fdd7c9795
Hash choices=sha256
CDHash=348bf4f1a2cf3d6b608e3d4cfd0d673fdd7c9795
Signature size=4707
Authority=Mac Developer: PI:EMAIL (RQGUDM4LR2)
Authority=Apple Worldwide Developer Relations Certification Authority
```

通过这些步骤，我们可以更好地理解 dyld 的行为及其在不同条件下的限制。