128Bot
P2P App
Before Overlaying (Bot)
After Overlaying (Bot+P2PApp)
Waledac1
Waledac2
Storm1
Storm2
Storm3
Storm4
Storm5
Storm6
Emule1
BT2@C
Limewire1
BT3@C
Bittorrent2
Skype4@C
Skype1
Ares1
# of ﬂows
341784
319119
200237
275451
133955
171471
164917
220459
# of DstIPs
850
760
6390
7319
5584
7277
6686
6618
avg ﬂow size
12829
11372
1342
1337
1344
1280
1328
1307
# of ﬂows
452645
361135
429458
310667
432464
199101
214548
238063
# of DstIPs
15338
1359
16635
8307
23261
7520
13137
8543
avg ﬂow size
55688
348708
1714
3381
172945
1266
1307
6244
Table IX: Bot Traces Overlaid with P2P Application Traces
1
2
3
4 −
FP
TP
Data
100% 0.2% 𝐷1
100% 0.2% 𝐷2
100% 0.2% 𝐷′
0.2% 𝐷′
Description
bots overlaid with host
bots overlaid with P2P host
only two bots
a “clean” network
Table X: Experimental Results
2
1
1000
Total: 953
# of hosts for each step
800
600
400
200
0
After traffic 
reduction : 316
P2P: 34
Persistent
P2P: 31
Bots: 18
)
s
r
u
o
h
n
i
(
n
o
i
t
p
m
u
s
n
o
C
e
m
T
i
50hr
29hr
50
40
30
20
10
2.5hr
5hr
0
2000
4000
Cnt
birch
8000
10000
(a) Number of hosts identiﬁed by
each step (on 𝐷1)
(b) System Performance For Dif-
ferent 𝐶𝑛𝑡𝑏𝑖𝑟𝑐ℎ
Figure 4: Performance Evaluation
C. Experimental Results
Table X summarizes the experimental results in Sec-
tion IV-C2, IV-C3 and IV-C4, where we set the parameters
as Θ𝑏𝑜𝑡 = 0.95 and 𝐶𝑛𝑡𝑏𝑖𝑟𝑐ℎ = 4000. The effect of varying
Θ𝑏𝑜𝑡 and 𝐶𝑛𝑡𝑏𝑖𝑟𝑐ℎ is discussed in Section IV-C5.
1) Identifying and Proﬁling P2P Applications
We applied our detection system on data set 𝐷1. The
number of hosts kept after each step is presented in Fig-
ure 4(a). Trafﬁc reduction using DNS trafﬁc signiﬁcantly
reduced the number of hosts and the number of ﬂows we
needed to process, thereby greatly reducing the workload for
the coming steps. For example, as illustrated in Figure 4(a),
other components only need to process approximately one-
third of the hosts (316 out of 953) after trafﬁc reduction.
Our system identiﬁed 34 hosts as P2P clients in total.
These 34 hosts are composed of i) all 16 P2P bots, ii) all
10 hosts with 5 popular P2P applications we have tested,
and iii) 8 other hosts in the college networks. For those
8 hosts, 3 are Bittorrent-related hosts (a.k.a, BT1@C,
BT2@C and BT3@C), which have been veriﬁed by the
content-based signatures. The remaining 5 identiﬁed hosts
do not match any content-based signature. We present their
ﬁngerprint cluster summaries (𝑃 𝑘𝑡𝑠, 𝑃 𝑘𝑡𝑟, 𝐵𝑦𝑡𝑒𝑠, 𝐵𝑦𝑡𝑒𝑟,
proto) in Table XI and Table XII.
The ﬁngerprint cluster summaries for 3 Bittorrent
clients are presented in Table XI. For BT1@C and BT2@C,
“(1 1 145 319 UDP)” is consistent with one ﬁngerprint
cluster of a sample Bittorrent trace described in Ta-
ble IV. The ﬁngerprint of BT3@C is different from other
Trace
BT1@C
Fingerprints
1 1 109 100, UDP
1 1 109 91, UDP
1 1 104 178, UDP
1 1 319 145, UDP
1 1 145 319, UDP
1 1 145 319, UDP
1 1 75 75, UDP
1 1 65 65, UDP
BT3@C
7 6 1118 1767, TCP
Table XI:
Fingerprint
Cluster Summaries for 3
Bittorrent Clients
BT2@C
Trace
Storm1
Waledac1
Fingerprints
2 2 94 554, UDP
2 2 94 1014, UDP
2 2 94 278, UDP
. . .
4 3 224 170, TCP
3 3 186 162, TCP
5 4 286 224, TCP
. . .
Trace
Skype1@C
Skype2@C
Skype3@C
Skype4@C
Fingerprints
1 1 73 60, UDP
1 1 76 60, UDP
1 1 75 60, UDP
1 1 72 60, UDP
1 1 74 60, UDP
1 1 75 60, UDP
1 1 74 60, UDP
1 1 76 60, UDP
1 1 72 60, UDP
1 1 74 60, UDP
1 1 79 60, UDP
1 1 76 60, UDP
1 1 73 60, UDP
1 1 74 60, UDP
1 1 75 60, UDP
Skype5@C
Table XII: Fingerprint
Cluster Summaries for 5
Potential Skype Clients
Trace
Storm2
Waledac2
Fingerprints
2 2 94 554, UDP
2 2 94 1014, UDP
2 2 94 278, UDP
. . .
4 3 224 170, TCP
3 3 186 162, TCP
5 4 285 224, TCP
. . .
Table XIII: Fingerprint Cluster Summaries for P2P Bots
two, which may represent another version implementation
of the Bittorrent protocol.
The ﬁngerprint cluster summaries for the remaining 5
unknown P2P hosts are presented in Table XII. By referring
to Table IV, their ﬁngerprint cluster summaries are very
close to those of the Skype trace. For example, “(1 1 75
60, UDP)” is shared by most of these clients and the sample
Skype trafﬁc. This indicates that these 5 hosts are mostly
likely Skype clients.
Some ﬁngerprint cluster summaries for Storm and
Waledac are presented in Table XIII. P2P bots in the
same botnet exhibit great similarity on ﬁngerprint clusters,
while their ﬁngerprint clusters are different compared to
those of another P2P botnet and legitimate P2P applications
(e.g., Bittorrent and Skype). We apply our system
on 𝐷2 to investigate whether our system can effectively
proﬁle different P2P applications if a bot-compromised
host
is also running a legitimate P2P application. Ta-
ble XIV presents several ﬁngerprint cluster summaries
for two bots overlaid with legitimate P2P applications,
Waledac2+BT2@C and Storm4+Skype4@C. For the ex-
ample of Waledac2+BT2@C, we can ﬁnd that its ﬁnger-
print clusters come from two applications, where “(1 1 145
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:47:04 UTC from IEEE Xplore.  Restrictions apply. 
129Trace
Waledac2+BT2@C
Storm4+Skype4@C
Fingerprints
1 1 145 319, UDP (Bittorrent)
4 3 224 170, TCP (Waledac)
3 3 185 162, TCP (Waledac)
1 1 75 75, UDP (Bittorrent)
. . .
2 2 94 554, UDP (Storm)
2 2 94 1014, UDP (Storm)
1 1 73 60, UDP (Skype)
. . .
Table XIV: Fingerprints for Storm and Waledac
139, UDP)” and “(1 1 75 75, UDP)” are from Bittorrent
protocol (referring to the second row in Table XI), and “(4
3 224 170, TCP)” together with “(3 3 185 162, TCP)” are
from Waledac (referring to Table XIII).
These experimental results demonstrate that our system
can effectively identify hosts engaging in P2P communi-
cations. In addition, the generated ﬁngerprint clusters can
effectively proﬁle P2P applications.
2) Detecting P2P Bots
We applied our system on 𝐷1 to detect P2P bots. As we
discuss in Section IV-C1, the system identiﬁed 34 P2P hosts.
By estimating the active time of the P2P application for each
of the 34 hosts, our system identiﬁed 31 hosts exhibiting
persistent P2P communications.
For these 31 hosts, our system constructs a hierarchical
tree (Figure 5(a)) by evaluating the distance (𝑑𝑖𝑠𝑡(ℎ𝑎, ℎ𝑏)
deﬁned in Section III-D) between P2P hosts. P2P bots share
same P2P protocol and have large overlap of the peer IP
addresses in ﬁngerprint clusters, thereby resulting in small
distances and dense clusters in consequence. As shown in
the Figure 5(a), both Storm and Waledac bots have small
distances to each other and form dense clusters respectively.
We cut the tree at Θ𝑏𝑜𝑡 ∗ ℎ𝑒𝑖𝑔ℎ𝑡𝑚𝑎𝑥 = 0.475 (Θ𝑏𝑜𝑡 = 0.95)
to identify dense clusters. As a consequence, three clusters
are identiﬁed and therefore a total of 18 hosts were labeled as
suspicious. All 16 P2P bots were detected, resulting in a high
detection rate of 100% and a low false positive rate of 0.2%
(2/953). The false positives appear to be two Skype clients.
The reason for these two false positives is the conservatively
conﬁgured value of Θ𝑏𝑜𝑡, which is close to 1.
3) Detecting P2P Bots Overlaid with P2P Applications
We applied our detection system on data set 𝐷2 to
evaluate the detection accuracy when a bot-compromised
host happens to run a legitimate P2P application. Table IX
presents some statistics of the bot traces before and after
overlaying legitimate P2P application traces. Some of bot-
compromised hosts’ trafﬁc proﬁles are signiﬁcantly distorted
after trafﬁc overlaying. For example, after overlaying BT2@C
(a real P2P client identiﬁed in the college network) trafﬁc
to the Waledac2 trafﬁc, the average ﬂow size is increased
from 11372 to 348708 and the number of destination IP
addresses, which are involved in the successful outgoing
connections,
is
because the Bittorrent application could be actively
is also increased from 760 to 1359. It
𝐶𝑛𝑡𝑏𝑖𝑟𝑐ℎ
2000
4000
8000
-
DR
FP
DR
FP
DR
FP
DR
FP
0.1
0
0
2/16
0
2/16
0
0.3
0
0
3/16
0
3/16
0
0.5
2/16
0
3/16
0
3/16
0
Θ𝑏𝑜𝑡
0.7
3/16
0