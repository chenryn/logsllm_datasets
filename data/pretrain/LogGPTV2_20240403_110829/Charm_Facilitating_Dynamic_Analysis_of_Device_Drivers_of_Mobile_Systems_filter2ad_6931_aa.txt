# Charm: Facilitating Dynamic Analysis of Device Drivers in Mobile Systems

## Authors
- Seyed Mohammadjavad Seyed Talebi, UC Irvine
- Hamid Tavakoli, UC Irvine
- Hang Zhang, UC Riverside
- Zheng Zhang, UC Riverside
- Ardalan Amiri Sani, UC Irvine
- Zhiyun Qian, UC Riverside

## Publication Information
- **Conference:** 27th USENIX Security Symposium
- **Dates:** August 15–17, 2018
- **Location:** Baltimore, MD, USA
- **ISBN:** 978-1-939133-04-5
- **Link:** [Proceedings](https://www.usenix.org/conference/usenixsecurity18/presentation/talebi)

## Abstract
Mobile systems, such as smartphones and tablets, incorporate a diverse set of I/O devices, including cameras, audio devices, GPUs, and sensors. This results in a large number of diverse and customized device drivers running in the operating system kernel of mobile systems. These device drivers often contain bugs and vulnerabilities, making them prime targets for kernel exploits. Unfortunately, security analysts face significant challenges in analyzing these device drivers to find, understand, and patch vulnerabilities. Current dynamic analysis techniques, such as interactive debugging, fuzzing, and record-and-replay, are difficult, inefficient, or even inaccessible for these drivers.

In this paper, we present Charm, a system that facilitates dynamic analysis of device drivers in mobile systems. Charm's key technique is remote device driver execution, which allows the device driver to run in a virtual machine on a workstation. Charm achieves this by using the actual mobile system only for servicing low-level and infrequent I/O operations through a low-latency, customized USB channel. Charm does not require any specialized hardware and is immediately available to analysts. We demonstrate the feasibility of applying Charm to various device drivers, including camera, audio, GPU, and IMU sensor drivers, across different mobile systems like LG Nexus 5X, Huawei Nexus 6P, and Samsung Galaxy S7. Our extensive evaluation shows that Charm enhances the usability of fuzzing, enables record-and-replay of driver execution, and facilitates detailed vulnerability analysis. These capabilities have enabled us to find 25 bugs in device drivers, analyze 3 existing ones, and even build an arbitrary-code-execution kernel exploit using one of them.

**Charm is open-sourced and available at: [https://trusslab.github.io/charm/](https://trusslab.github.io/charm/)**

## Introduction
Today, mobile systems, such as smartphones and tablets, incorporate a diverse set of I/O devices, including cameras, displays, sensors, accelerators like GPUs, and various network devices. These I/O devices are crucial for product differentiation in a competitive market. With over a thousand Android device manufacturers and more than 24,000 distinct Android devices seen in 2015, each vendor strives to stand out by incorporating unique features, such as powerful cameras or fingerprint scanners.

This diversity has a significant implication for the operating system of mobile systems: a large number of highly diverse and customized device drivers are required to power these I/O devices. Device drivers run in the kernel of the operating system and are known to be a source of many serious vulnerabilities, such as root vulnerabilities. Therefore, security analysts invest significant effort in finding, analyzing, and patching vulnerabilities in these drivers. However, they face important deficiencies in doing so.

Performing dynamic analysis on device drivers in mobile systems is difficult, inefficient, or even impossible depending on the analysis. For example, some dynamic analyses, such as introspecting the driver and kernel state with a debugger (e.g., GDB) and record-and-replay, require the driver to run within a controlled environment, such as a virtual machine. Unfortunately, this is not possible for device drivers running in the kernel of mobile systems. Additionally, kernel fuzzers, such as kAFL and Google Syzkaller, can be used to find various types of bugs in the operating system kernel, including device drivers. However, fuzzing device drivers in mobile systems faces several disadvantages, such as the requirement for x86-based virtual machines, which is not feasible for mobile drivers.

## Key Contributions
### Remote Device Driver Execution
Charm's key contribution is a system solution for executing mobile I/O device drivers within a virtual machine on a different physical machine, such as a workstation. This capability overcomes the aforementioned deficiencies by allowing the analyst to use various dynamic analyses, including manual interactive debugging, record-and-replay, and enhanced fuzzing.

Executing a mobile system's device driver within a workstation virtual machine is typically impossible because the driver requires access to the exact hardware of the I/O device in the mobile system. Charm solves this problem using a technique called remote device driver execution. With this technique, the device driver's attempts to interact with its I/O device are intercepted in the virtual machine by the hypervisor and routed to the actual mobile system over a customized, low-latency USB channel. While the actual mobile system is needed for the execution of infrequent, low-level I/O operations, the device driver runs fully within a virtual machine and can thus be analyzed.

### Addressing Challenges
Remote device driver execution raises two important challenges:
1. **Time-Sensitive Interactions:** Interactions between a device driver and its corresponding I/O device are time-sensitive. The added latency of communications between the workstation and mobile system can result in various timeout problems. Charm addresses this challenge with a customized USB channel, which does not require any specialized hardware.
2. **Interactions with Resident Modules:** In addition to interacting with the I/O device's hardware, a device driver interacts with several other modules in the operating system kernel, such as bus drivers, power management, and clock management. These "resident modules" cannot be moved to the virtual machine since they are needed in the mobile system for the USB channel. Charm addresses this challenge with a Remote Procedure Call (RPC) interface for the remote driver to interact with these modules in the mobile system. The RPC solution is built at the boundary of common Linux APIs, reducing the engineering effort to apply Charm to new device drivers.

## Implementation and Evaluation
We implemented Charm's prototype using an Intel Xeon-based workstation and three smartphones: LG Nexus 5X, Huawei Nexus 6P, and Samsung Galaxy S7. We implemented remote device driver execution for the camera and audio drivers in Nexus 5X, the GPU driver in Nexus 6P, and the Inertial Measurement Unit (IMU) sensor driver in Samsung Galaxy S7. These drivers encompass 129,000 lines of code. We chose four distinct device drivers from three vendors to demonstrate Charm's ability to support a diverse set of device drivers in various mobile systems. We have released the source code of Charm and the kernel images configured for the supported drivers, enabling security analysts to support new device drivers and immediately apply different dynamic analysis techniques.

Our current prototype of Charm supports only open-source device drivers. Fortunately, kernel source code, including drivers, is often available for Android devices. Vendors often release the kernel soon after launch, and custom Android projects (such as LineageOS) provide bootable Android images and instructions to unlock the bootloader on supported devices. Therefore, Charm is useful for many (if not most) Android devices. However, there are still a large number of closed-source device drivers, which Charm cannot currently support. As part of our future work, we plan to support closed-source drivers in Charm.

### Evaluation Results
- **Feasibility:** It is feasible to add support for new device drivers in Charm in a reasonable amount of time.
- **Performance:** Despite the overhead of remote device driver execution, Charm's performance is on par with actual mobile systems. A fuzzer can execute about the same number of fuzzing programs and achieve similar code coverage.
- **Bug Discovery:** Charm enabled us to find 25 bugs in drivers, including 14 previously unknown bugs (several of which we have already reported) and two bugs detected by a kernel sanitizer not available on the corresponding mobile system's kernel.
- **Record-and-Replay:** Charm enables the recording and replaying of device driver execution, which helps in recreating bugs without needing the mobile system's hardware.
- **Debugging:** It is feasible to use a debugger (e.g., GDB) to analyze various vulnerabilities in these drivers. Using this ability, we have analyzed three publicly reported vulnerabilities and managed to build an arbitrary-code-execution kernel exploit using one of them.

## Motivation
Our efforts to build Charm were motivated by our previous struggles to analyze device drivers of mobile systems to find and understand vulnerabilities. We discuss three important dynamic analysis techniques—manual interactive debugging, record-and-replay, and fuzzing—and the current challenges in applying them to device drivers of mobile systems. Charm overcomes these challenges by enabling the device driver to run within a virtual machine, thereby facilitating the use of these techniques.

### Manual Interactive Debugging
Security analysts often use debuggers like GDB to analyze vulnerabilities or reported exploits. Debuggers enable the analyst to set breakpoints, inspect memory, and monitor data structures. However, performing these actions on device drivers running in the kernel of mobile systems is typically infeasible. Kernel debuggers like KGDB try to address this but are either infeasible, difficult to use, or require specialized adapters. Charm solves this problem by enabling the security analyst to analyze the device driver within a virtual machine. We have used GDB to analyze three vulnerabilities in the Nexus 5X camera driver and to help construct an exploit that can gain arbitrary code execution in the kernel using one of these vulnerabilities.

### Record-and-Replay
Record-and-replay is a valuable tool for analyzing program behavior, including device drivers. It enables an analyst to record the execution of a device driver and replay it when needed. Recreating a crash, especially one due to a race condition, can be non-trivial. However, if the execution is recorded, it can be simply replayed and analyzed. Charm implements its own solution, recording all interactions of the driver with the remote I/O device in the hypervisor and replaying them when needed.

### Fuzzing
Fuzzing is a dynamic analysis technique that finds bugs in software by providing various inputs. For device drivers, inputs are provided through system calls like `ioctl` and `read`. Fuzzing often suffers from low code coverage when inputs are randomly selected. Feedback-guided fuzzing techniques, such as kAFL and Syzkaller, collect execution information to guide the input generation process. kAFL uses the Intel Processor Tracer (PT) hardware, which is not available on ARM processors in most mobile devices. By running the driver in a virtual machine on an x86 machine, Charm enables the use of kAFL. Syzkaller, which uses a compiler-based coverage information collector, can be used directly on mobile systems. However, using Syzkaller with Charm provides additional advantages, such as enhanced fuzzing and better code coverage.

## Conclusion
Charm is a system that facilitates dynamic analysis of device drivers in mobile systems, overcoming the challenges faced by security analysts. By enabling remote device driver execution, Charm makes it possible to use dynamic analysis techniques like interactive debugging, record-and-replay, and fuzzing. Our evaluation demonstrates that Charm is effective in finding and analyzing vulnerabilities in device drivers, making it a valuable tool for security analysts.