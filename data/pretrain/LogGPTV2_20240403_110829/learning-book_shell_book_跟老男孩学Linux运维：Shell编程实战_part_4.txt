下面是Linux中常用脚本开头的写法，不同语言的脚本在开头一般都要加上如下标
识内容：
1#1/bin/sh
2 #1/bin/bash
x/uq/xn/1
4+1/bin/sed
51/usr/bin/tel
dx/uq/x8n/19
te8t.8h <==编辑test.sh脚本文供。
输人“echoIamoldboy””内容后按回车键，然后再按Ctrl+d组合键结束编辑。此
操作为特殊编辑方法，这里是作为cat用法的扩展知识（通过使用来记亿是个好习惯）。
现在使用第1种方法实践，命令如下：
---
## Page 35
第2章Shel脚本初步入门
[oldboy@oldboy -]s sh test.sh
oqpowI.o
<=使用第1种方式的sh命令执行teBt.sh脚本文件。
I an oldboy
[oldboyoldboy-]sbash test.sh #<==使用第1种方式的bash命令执行test.sh聊本文件。
I am oldboy
这里使用第1种方法的bash和sh，均可以执行脚本并得到预期的结果。
使用第2种方法实践，命令如下：
[oldboy@oldboy ~]s 1s -1 test.sh
-rw-rw-r--1 oldboy oldboy 19 Apr 30 02:46test.sh
[oldboyeoldboy-]$./test.sh
<=m使用第2种方式“./”在多前目录下执行test.sh
脚本文件，细心的读者可以发现，这个地方无法自动补全，这是因为没有权限所导致的。
-bash:./test.sh: Permission denied
<==提示：强制执行会提示权限拒绝，此处是
因为没有执行权限。
虽然没有权限的test.sh脚本不能直接被执行，但是可以用source或“.”（点号）来
执行，如下：
[oldboy8oldboy -]$.test.sh
<请注意开头的“后面有空格。
I an oldboy
[oldboy@oldboy -1$ source test.8h
I an oldboy
提示：“.”或source命令的功能相同，都是读入脚本并执行脚本。
给test.sh添加可执行权限，命令如下：
[oldboyeoldboy -]s.chmod u+x test.sh
[oldboy@oldboy -]$./test.sh
I am oldboy
可以看到，给test.sh加完可执行权限后就能执行了。前面也提到了，这种方法在使
用前每次都需要给定执行权限，但容易被忘记，且多了一些步骤，增加了复杂性。
使用第3种方法实践时，会将source或“.”执行的脚本中的变量值传递到当前的
Shell中，如下：
echo处理更方便
[oldboy@oldboy -]s cat testsource,sh
pad、=Itpxasn
<=定义了一个命令变量，内容是打印出前路径。注意，打印命令用反引号
[oldboyeoldboy -]s sh test8ource.8h
<==采用sh命令执行脚本
---
## Page 36
跟老男孩学Linux运维：Shell编程实战
(oldboyθoldboy -]$ echo Suserdir
<==此处为空，井没有出现多前路径/home/oldboy的输出，这是为什么
根据上面的例子可以发现，通过sh或bash命令执行过的脚本，若在脚本结束之后，
在当前Shell窗口中查看userdir变量的值，会发现值是空的。现在以同样的步骤改用
source或“.”执行，然后再看看userdir变量的值：
[oldboy@oldboy-]ssource testsource.sh<==采用source执行周一房本
/home/oldboy<==此处输出了当前路径/home/oldboy，这又是为什么呢
来了解一下系统NFS服务的脚本是如何使用“.”的：
Source function library.
-/etc/init.d/functions
<==通过·.·加载系统函数库functions
说明：操作系统及服务自带的脚本是我们学习的标杆和参考（虽然有时感觉这些脚
本也不是十分规范）。
结论：通过source或“.”加载执行过的脚本，由于是在当前Shell中执行脚本，因
此在脚本结束之后，脚本中的变量（包括函数）值在当前Shell中依然存在，而sh和
bash执行脚本都会启动新的子Shell执行，执行完后退回到父Shell。因此，变量（包括
函数）值等无法保留。在进行Shell脚本开发时，如果脚本中有引用或执行其他脚本的
内容或配置文件的需求时，最好用“.”或source先加载该脚本或配置文件，处理完之
后，再将它们加载到脚本的下面，就可以调用source加载的脚本及配置文件中的变量及
函数等内容了。
以下采用第4种方法来实践：
oqpo--oqpox]
[rootgoldboy-]cat oldboy.ah
-rw-r--r--,1root root 28Nov 1815:52oldboy.sh
echo'I am oldboy teacher.*
[rootaoldboy -]#sh<oldboy.sh
I am oldboy teacher.
<==尽量不要使用这种方法
[root@oldboy-]cat oldboy.shlbash
#<=这种方法在命令行拼接字特申命令后，
要执行时就会用到
I am oldboy teacher.
提示：代码中提到的两种执行方法相当于shscripts-name，效率很高，但是初学
署用得少
范例2-5：已知如下命令及返回结果，请问echoSuser的返回的结果为（）。
---
## Page 37
第2章Shel脚本初步入门
[oldboyetest -]s cat test.sh
[oldboyetest-]s sh test.sh
[oldboyetest ~]s echo Suser
参考的选择项如下：
a）当前用户
b)oldboy
c）空（无内容输出）
这是某互联网公司Linux运维职位的笔试题。在这里e）是正确答案，原因前面已
经讲过了，即使用sh执行脚本会导致当前Shell无法获得变量值。
通过上述面试题可得出如下的结论：
口儿子Shell脚本会直接继承父亲Shell脚本的变量、函数（就好像是儿子随父亲
姓，基因也会继承父亲的）等，反之则不可以。
口如果希望反过来继承（就好像是让父亲随儿子姓，让父亲的基因也继承儿子的），
就要用source或“.”在父亲Shell脚本中事先加载儿子Shell脚本。
2.6.3Shell脚本开发的基本规范及习惯
Shell脚本的开发规范及习惯非常重要，虽然这些规范不是必须要遵守的，但有了
好的规范和习惯，可以大大提升开发效率，并能在后期降低对脚本的维护成本。当多人
协作开发时，大家有一个互相遵守的规范就显得更重要了。即使只是一个人开发，最好
也采取一套固定的规范，这样脚本将会更易读、更易于后期维护，最重要的是要让自己
养成一个一出手就很专业和规范的习惯。下面来看看有哪些规范，这些规范在第14章
也会提及，以便于大家进一步巩固。
1）Shell脚本的第一行是指定脚本解释器，通常为：
1/bin/bash
/bin/h
2）Shell脚本的开头会加版本、版权等信息：
Date:16:292012-3-30
Author:Created by oldboy
Blog:http://oldboy.blog.51cto.con
Description:This scripts function is....
Veraion1.1
说明：以上两点在Linux系统场景中不是必需的，只属于优秀规范和习惯，第16
章有自动加载此内容的方法，读者可以做进一步了解。
---
## Page 38
2跟老男孩学 Linux运维：Shell编程卖战
可修改“~/.vimre”配置文件配置vim编辑文件时自动加上以上信息的功能。
3）在Shell脚本中尽量不用中文（不限于注释）。
尽量用英文注释，防止本机或切换系统环境后中文乱码的困扰。如果非要加中文，
请根据自身的客户端对系统进行字符集调整，如：exportLANG="zh_CN.UTF-8"，并在
脚本中，重新定义字符集设置，和系统保持一致。
4）Shell脚本的命名应以.sh为扩展名。
例： script-name.sh
5）Shell脚本应存放在固定的路径下
例如：/server/scripts
以下则是Shell脚本代码书写的良好习惯。
1）成对的符号应尽量一次性写出来，然后退格在符号里增加内容，以防止遗漏。
这些成对的符号包括：
0、、、
说明：这部分也可以配置.vimrc实现自动添加，但是老男孩不推荐这样做，因为
养成良好的习惯很重要。
2）中括号（D）两端至少要有1个空格，因此，键人中括号时即可留出空格[]，然
后再退格键人中间的内容，并确保两端都至少有一个空格，即先键人一对中括号，然后
退1格，输人两个空格，再退1格，双中括号（[）的写法也是如此。
3）对于流程控制语句，应一次性将格式写完，再添加内容。
比如，一次性完成if语句的格式，应为：
it条件内容
内容
一次性完成for循环语句的格式，应为：
for
do
done
内容
提示：while和until，case等语句也是一样。
---
## Page 39
第2章Shel瞬本初步入门a
4）通过缩进让代码更易读，比如：
i条件内容
then
内容
fi
5）对于常规变量的字符串定义变量值应加双引号，并且等号前后不能有空格，需
要强引用的（指所见即所得的字符引用），则用单引号（），如果是命令的引用，则用反
引号（）。例如：
OLDBOY_PILB=*te8t.txt*
6）脚本中的单引号、双引号及反引号必须为英文状态下的符号，其实所有的Linux
字符及符号都应该是英文状态下的符号，这点需要特别注意。
说明：好的习惯可以让我们避免很多不必要的麻烦，提升工作效率。
有关Shell开发规范及习惯的更多内容，感兴趣的读者可参考本书的第14章。很多
开发习惯也可以通过配置vim的功能来实现，例如实现自动缩进、自动补全成对符号、
自动加人起始解释器及版权信息等，这部分的知识可参考本书第16章。对于一些开发
规范和习惯，在新手人门学习期间，我们不建议将其搞得太傻瓜化、智能化，这会让我
们产生情性，所以有关Shell的开发规范及习惯的知识放在第14章来讲解，有关搭建高
效的Shell开发环境的知识放在第16章讲解！
---
## Page 40
nux
第3章
Shell变量的核心基础知识与实践
3.1什么是Shell变量
1.什么是变量
在小学或初中时，我们开始接触数学方程式，例如：已知x=1，y=x+1，那么y等于
多少？
在上述问题中，等号左边的x和y当时被称为未知数，但在Shell编程里它们是变
量名，等号右边的1和x+1则是变量的内容（变量的值）。注意，这里的等号符号被称为
赋值，面不是等号。
通过上面的例子可以得出一个变量概念的小结论：简单地说，变量就是用一个固定
的字符串（也可能是字符、数字等的组合）代替更多、更复杂的内容，该内容里可能还
会包含变量、路径、字符串等其他的内容。
变量是暂时存储数据的地方及数据标记，所存储的数据存在于内存空间中，通过正
确地调用内存空间中变量的名字就可以取出与变量对应的数据。使用变量的最大好处就
是使程序开发更为方便，当然，在编程中使用变量也是必须的，否则就很难完成相关的
程序开发工作。
下面是定义变量和打印变量的示例：
[rootθoldboy-]oldboy=*Iamoldboy<定义变量，名字为oldboy，对应的内靠
为“Iamoldboy”。
[root@oldboy ~]echo $oldboy
<打印变量的值。
I am oldboy
---
## Page 41
第3章Shell变量的核心基础知识与实践23
变量的赋值方式为：先写变量名称，紧接着是“=”这个字符，最后是值，中间无
任何空格，通过ccho命令加上Soldboy即可输出oldboy变量的值，变量的内容一般要
加双引号，以防止出错，特别是当值里的内容之间有空格时。
2.Shell变量的特性
默认情况下，在bashShell中是不会区分变量类型的，例如：常见的变量类型为整
数、字符串、小数等。这和其他强类型语言（例如：Java/C语言）是有区别的，当然，
如果需要指定Shell变量的类型，也可以使用declare显示定义变量的类型，但在一般情
况下没有这个需求，Shell开发者在开发脚本时需要自行注意Shell脚本中变量的类型，
这对新手来说是个重点也是个难点，别害怕，跟着老男孩走，一切都不是事。
3.变量类型
变量可分为两类：环境变量（全局变量）和普通变量（局部变量）。
环境变量也可称为全局变量，可以在创建它们的Shell及其派生出来的任意子进程
Shell中使用，环境变量又可分为自定义环境变量和bash内置的环境变量。
普通变量也可称为局部变量，只能在创建它们的Shell函数或Shell脚本中使用。普
通变量一般由开发者在开发脚本程序时创建。
3.2环境变量
环境变量一般是指用export内置命令导出的变量，用于定义Shell的运行环境，保
证Shell命令的正确执行。Shell通过环境变量来确定登录用户名、命令路径、终端类型、
登录目录等，所有的环境变量都是系统全局变量，可用于所有子进程中，这包括编辑