[20] Wikimedia Foundation. 2017. Wikimedia Downloads. https://dumps.wikimedia.
org[online]. (2017).
[21] L. George. 2011. Advanced HBase Schema Design. Technical Report. In Hadoop
[22] E. Goh. 2003. Secure Indexes. IACR Cryptology ePrint Archive 2003 (2003), 216.
[23] IBTA. 2017.
InfiniBand Specification. http://www.infinibandta.org/[online].
World 2011.
(2017).
Figure 9: HXT Scalability test in various dataset, the test
is running in four cases: (a) constant small (10) result set;
(b) constant medium-size (10000) result set; (c) proportional
small result set; (d) proportional medium result set;
evaluation, but we introduce more variable terms {vn}, n ∈ [1, 5]
as xterms in the conjunctive query. As shown in Fig. 8, the query
delay increases if the query has more keywords. The underlying
reason is that the size of m′ is proportional to the size of keyword
list, and HXT server is required to have more I/O operation with
the increasing size of m′. However, such delay is affordable: the
HXT prototype has only 8% and 21% additional cost when the query
has two and six keywords, respectively.
7.3.3
Scalability of HXT. We leverage three EDBs we generated
from Wikimedia Downloads [20] to demonstrate the scalability
of the HXT protocol. We follow the the same evaluation method
in [12] to inject artificial query terms to randomly selected docu-
ments. Fig. 9 shows that the implementation of HXT preserves the
scalability of OXT protocol even when the database sizes exceed
the memory we assigned for database query. The query time of
HXT is independent of the size of the database. Instead, it is linear
to the size of result set.
We also evaluate the query delay for different sizes of datasets
as well as the bandwidth communication, which are given in Ap-
pendix C.
8 CONCLUSION
In this paper, we propose a new searchable encryption protocol to
obtain better security than to the current existing OXT protocol at
the cost of slightly increasing the communication and computation
overhead.
In particular, we have introduced hidden cross-tags (HXT) pro-
tocol by employing Bloom filters (BF) and newly introduced light-
weight symmetric hidden vector encryption (SHVE). It is similar to
OXT [12] except that we replace the XSet by an SHVE encryption
of BF. The search algorithm re-constructs the search tokens and
performs SHVE query algorithm instead of an XSet membership
test. It has been shown that our SHVE is selectively simulation-
secure, and our HXT is computationally correct, semantically secure
against selective adversaries. Implementation and experiments have
been conducted to compare the efficiency of the SHVE with those
pairing-based HVEs and HXT versus OXT accordingly.
3e+073e+083e+09Database size as total number of (id, w) pairs0.00010.001 0.01  0.1   1     10    100   Time (sec)(a)c_small(b)c_medium(c)p_small(d)p_medium[24] V. Iovino and G. Persiano. 2008. Hidden-Vector Encryption with Groups of Prime
[25] M.S. Islam, M. Kuzu, and M. Kantarcioglu. 2012. Access Pattern Disclosure on
Order. In Pairing 2008. 75–88.
Searchable Encryption: Ramification, Attack and Mitigation. In NDSS’12.
Hall/CRC Press.
[26] J. Katz and Y. Lindell. 2007. Introduction to Modern Cryptography. Chapman and
[27] J. Katz, A. Sahai, and B. Waters. 2013. Predicate Encryption Supporting Dis-
junctions, Polynomial Equations, and Inner Products. J. Cryptology 26, 2 (2013),
191–224.
[28] K. Liang, C. Su, J. Chen, and J.K. Liu. 2016. Efficient Multi-Function Data Sharing
and Searching Mechanism for Cloud-Based Encrypted Data. In ASIACCS’16.
83–94.
[29] J.K. Liu, M.H. Au, W. Susilo, K. Liang, R. Lu, and B. Srinivasan. 2015. Secure
Sharing and Searching for Real-time Video Data in Mobile Cloud. IEEE Network
29, 2 (2015), 46–50.
[30] M. Naveed, S. Kamara, and C.V. Wright. 2015. Inference Attacks on Property-
[31] A. Nikitin. 2016. Bloom Filter Scala. https://alexandrnikitin.github.io/blog/
Preserving Encrypted Databases. In ACM CCS’15. 644–655.
bloom-filter-for-scala/[online]. (2016).
[32] T. Okamoto and K. Takashima. 2012. Adaptively Attribute-Hiding (Hierarchical)
Inner Product Encryption. In EUROCRYPT 2012. 591–608.
[33] R.A. Popa, C.M.S. Redfield, N. Zeldovich, and H. Balakrishnan. 2011. CryptDB:
Protecting Confidentiality with Encrypted Query Processing. In ACM SOSP’11.
85–100.
[34] K. Shvachko, H. Kuang, S. Radia, and R. Chansler. 2010. The Hadoop Distributed
[35] D.X. Song, D. Wagner, and A. Perrig. 2000. Practical Techniques for Searches on
File System. In IEEE MSST’10. 1–10.
Encrypted Data. In IEEE S&P 2000. 44–55.
[36] S. Sun, J.K. Liu, A. Sakzad, R. Steinfeld, and T.H. Yuen. 2016. An Efficient Non-
interactive Multi-client Searchable Encryption with Support for Boolean Queries.
In ESORICS 2016. 154–172.
//www.bouncycastle.org[online]. (2007).
[37] The Legion of the Bouncy Castle. 2007. Bouncy Castle Crypto APIs. https:
[38] M. Zaharia, M. Chowdhury, M.J. Franklin, S. Shenker, and I. Stoica. 2010. Spark:
Cluster Computing with Working Sets. In HotCloud’10.
[39] Y. Zhang, J. Katz, and C. Papamanthou. 2016. All Your Queries Are Belong to
Us: The Power of File-Injection Attacks on Searchable Encryption. In USENIX
Security 16. 707–720.
A HARDNESS ASSUMPTIONS
The security of our construction relies on the hardness of the de-
cisional Diffie-Hellman (DDH) problem [15], the security and cor-
rectness of a PRF, and IND-CPA of a symmetric encryption. We
next briefly recall the formal definitions of these primitives and
refer the interested reader to [26] for further details.
Definition 2 (DDH). Let G be a cyclic group of prime order p, the
DDH problem is to distinguish the ensembles {(g, ga , gb , gab)} from
{(g, ga , gb , gz)}, where the elements g ∈ G a, b, z ∈ Zp are chosen
uniformly at random. Formally, the advantage AdvDDHD,G(λ) for any
PPT distinguisher D is defined as
(cid:12)(cid:12)(cid:12)Pr[D(g, ga , gb , gab) = 1] − Pr[D(g, ga , gb , gz) = 1](cid:12)(cid:12)(cid:12) .
We say that the DDH assumption holds if for any PPT distinguisher
D, its advantage AdvDDHD,G(λ) is negligible in λ.
Definition 3 (PRFs). LetX andY be two sets, and let F : {0, 1}λ×
X → Y be a function. We say that F is a pseudorandom function
(PRF) if for all efficient adversaries A, AdvCorPRF
F ,A(λ) is negligible,
for AdvCorPRF
(cid:12)(cid:12)(cid:12)Pr[AF(κ ,·)(1λ) = 1] − Pr[Af (·)(1λ) = 1](cid:12)(cid:12)(cid:12) ,
F ,A(λ) defined as
where the probability is over the randomness of A, and κ is chosen
randomly from {0, 1}λ, and f is chosen randomly from the set of all
functions with domain X to range Y.
Definition 4 (Symmetric Encryption). A symmetric encryp-
tion scheme Sym consists of a randomised encryption algorithm
Sym.Enc, which takes a key κ ∈ {0, 1}λ and a message µ ∈ {0, 1}∗
and returns a ciphertext c, and a deterministic decryption procedure
Sym.Dec, which accepts the same key κ and the ciphertext c and
outputs a message µ.
A symmetric encryption scheme Sym is called IND-CPA if for
all PPT adversaries A, the AdvIND−CPA
A,Sym (λ) defined as
| Pr[AO(κ ,0,·,·)(1λ) = 1] − Pr[AO(κ ,1,·,·)(1λ) = 1]|,
is negligible in λ, where κ is chosen at random from {0, 1}λ and
the oracle O(κ, b, µ0, µ1) returns ⊥ if |µ0| (cid:44) |µ1|, and otherwise it
samples Sym.Enc(κ, µb) and returns the result. The correctness is
defined as usual.
B PROOFS
Proof of Theorem 2:
We first show a construction for the simulator S in the simula-
tion experiment. The simulator models the symmetric encryption
scheme (Sym.Enc, Sym.Dec) as an ideal cipher. In particular, the
adversary A either issues encryption queries of the form (κ, µ) or
decryption queries of the form (κ, c). The simulator S maintains a
table of the form (κ, µ, c). Upon receipt of an encryption/decryption
query, it looks up the table, and either returns an already existing
entry, or adds a uniformly random entry to the table and returns
the same. The simulator operates as follows:
vj
$←− {0, 1}λ+log λ for l ∈ [m].
α(vj) =(cid:0)αj ,1, . . . , αj ,m
• Setup phase: Suppose the adversary A chooses an attribute
vector x ∈ Σm. The simulator S sets M = {‘True’} and
provides the same to A. It additionally randomly chooses
cl
• Query phase 1: The adversary adaptively chooses pred-
, for j ∈ [q1]. For each such predicate, the
icates P SHVE
simulator S receives the corresponding wildcard pattern
S then does the following:
– S computes Sj = {li ∈ [m] | αj ,li
{l1, l2, . . . , l|Sj |}.
– If β(vj , x) = 1, it randomly samples K
Next, for i ∈ [|Sj|], it sets the following :
(cid:1) and the decryption pattern β(vj , x).
$←− {0, 1}λ+log λ.
= 1}. Let Sj =
(cid:16)⊕i∈[|Sj |]cli
(cid:17) ⊕ K .
dj ,0 =
Finally, it sets dj ,1 = Sym.Enc(K , 0λ+log λ). Note that since
(Sym.Enc, Sym.Dec) is modeled as an ideal cipher, all the
aforementioned Sym.Enc operations are essentially imple-
mented via table-look-up operations.
$←−
– Otherwise, if β(vj , x) = 0, the simulator sets dj ,0, dj ,1
– Finally, the simulator sets the decryption key:
{0, 1}λ+log λ.
(cid:1) .
sj =(cid:0)dj ,0, dj ,1, Sj
(cid:17).
(cid:16){cl}l ∈[m]
This decryption key is subsequently provided to the ad-
versary A.
• Challenge phase: The simulator S provides A with the
challenge ciphertext c =
• Query phase 2: The adversary runs a protocol identical to
Query phase 1, and S responds with sj for q1 + 1 ≤ j ≤ q2
as described above.
The indistinguishability of the ciphertext c and the secret keys
sj for j ∈ [q2] from the real experiment follows directly from the
following facts:
vj
• The payload message is ‘True’ by default in the predicate-
only version of the scheme. Now, for each j ∈ [q2] such
(x) = 1, decrypting c using sj returns ‘True’. On
that P SHVE
the other hand, for each j ∈ [q2] such that P SHVE
(x) = 0,
decrypting c using sj returns ‘True’ with only negligible
probability.
• The encryption and decryption outputs of (Sym.Enc, Sym.
Dec) are indistinguishable from uniformly random since
they are modeled in the ideal cipher model.
• The outputs of the PRF F0 are indistinguishable from random
to a PPT distinguisher D that can guess the master secret
key msk with only negligible probability (Definition 3) .
vj
(cid:16)
gFp(κX ,wi)·Fp(κI ,id)(cid:17), so by
Proof of Theorem 3:
Let G0 denote the original game CorHXTA (λ). We want to show
Pr[G0 = 1] ≤ (1 − e−k·N/m)k + negl(λ). We modify G0 to obtain
G1 by replacing the employed PRFs F and Fp with keys κX , κI
with random functions. From the security of the PRFs against PPT
adversaries and the fact that |DB| is polynomial in λ, we conclude
that Pr[G1 = 1] − Pr[G0 = 1] ≤ negl(λ). We now find an upper
bound on Pr[G1 = 1]. By correctness of T-Set Γ, we know that
the simulated server will retrieve the correct set DB(w1) of id’s
matching the sterm. Also, for all id ∈ DB(w1), which match the
query (i.e id ∈ DB(wi) for 2 ≤ i ≤ n), the encrypted Bloom fil-
ter will have 1’s in positions uj = Hj
correctness of HVE, the client result set S contains the desired re-
sult set DB(ψ(w)). Hence the game can only be won due to false
positives, i.e. id ∈ DB(w1) which does not match the query (i.e
id (cid:60) DB(wi) for some 2 ≤ i ≤ n) but is still returned by the
server. By correctness of HVE, such false positives can happen
only if the encrypted Bloom filter will have 1’s in positions uj =
Hj(gFp(κX ,wi)·Fp(κI ,id)) for such id (cid:60) DB(wi). There are two sub-
cases. The first is that gFp(κX ,wi)·Fp(κI ,id) = gFp(κX ,w′)·Fp(κI ,id′)
for some other (id′, w′) (cid:44) (id, w) and id′ ∈ DB(w′). This happens
with negligible probability O(N
4/p). The second subcase is that
(id, wi) is a false positive for the Bloom filter, but this happens with
probability ≤ (1 − e−k·N/m)k for each id ∈ DB(w1) and hence by a
union bound with overall probability ≤ |DB(w1)| · (1 − e−k·N/m)k.
We conclude that Pr[G1 = 1] ≤ |DB(w1)|·(1−e−k·N/m)k +negl(λ),
as required.
Proof of Theorem 4:
First of all, we describe that leakage function L which consists
of two components: LHXT, the leakage from the HXT protocol, and
LT, the T-set leakage function. On input a database DB and a set of
search queries (s, x2, . . . , xn) ∈ Wn, the leakage function L can be
computed similarly as in [12]: For every w ∈ W, randomly choose
a key κ ∈ {0, 1}λ and initiates t as an empty vector; For a counter
c, choose a non-zero random y ∈ Zp and compute an encryption
of constant string Sym.Enc(κ, 0λ) and put this ciphertext along
function is output as(cid:0)(LHXT(DB, s, x2, . . . , xn)), LT(T, s), T[s](cid:1).
with y in the c-th component of t; Once the counter reaches its
end (Tw = |T[w]|), put t into the w-th entry of T. Then the leakage
Next, we show the proof of Theorem 4. The proof is structured
through a sequence of games. In all games, the adversary supplies
a database DB and a list of search queries q = (s, x2, . . . , xn) at the
beginning, where s and xi are the list of query sterms and xterms,
respectively. The first game Game0 is designed to have the same
distribution as RealΠA(λ), where we neglect all false positives of
both TSet and BF for simplifying the proof, and the last one can be
easily simulated by an efficient algorithm SHXT. By showing that
the distributions of each two successive games are (computation-
ally) indistinguishable, we get the simulator SHXT that meets the
requirements of the security definition, thus completing the proof
of the theorem. In the following, we use Pr[Gi = 1] to denote the
probability that Gamei outputs 1.
Game0: this game is slightly modified from the real game to
make the analysis easier, the details of which are shown in Algo-
rithm 3. With (DB, s, x2, . . . , xn) as input, the game starts to sim-
ulate encrypted database EDB(1), then it computes a vector of size Q
of stags called STags. Particularly STags[i] ← TSet.GenTag(κT, s[i]),
for 1 ≤ i ≤ Q. Second, it computes BF similar to that of Algorithm 1
and finally inputs c into EDB(2). It finally computes the transcript ar-
ray tr, with tr[i] being(Res, ResInds,((STags[i], xtoken[i], token[i])))
for 1 ≤ i ≤ Q, by running the last loop of Algorithm 3. Note that
the obtained ResInds in t is computed by looking up the corre-
ℓ=2 DB(xℓ[i]), instead of de-
crypting the results returned by SE.Search in the real game. As-
suming no false positives happening, the distribution of the ex-
plained game is exactly the same as the real game. Therefore,
Pr[G0 = 1] ≤ Pr[RealHXTA (λ) = 1] + negl(λ).
Game1: in this game we replace the PRFs F and Fp with ran-
dom functions. The details of which are shown in Algorithm 4.
Note that since F(κS , ·) is only evaluated on the same input once,
its evaluations can be replaced with random selections from the
appropriate range. As to Fp(κX , ·), Fp(κI , ·) and Fp(κZ , ·), they are
replaced by fX , fI and fZ , respectively. A standard hybrid argument
implies that there exist efficient adversaries B1,1 and B1,2 such that
Pr[G1 = 1] − Pr[G0 = 1] ≤ AdvPRF
sponding id values in DB(s[i]) ∩n
F ,B1,1(λ) + 3AdvPRF
Fp ,B1,2(λ).
Game2: this game replaces only the encryption of document
identifiers with that of constant string 0λ. In the game, the encryp-
tion is operated for polynomial, say poly(λ), times, so by a standard
hybrid argument we can see that the indistinguishability between