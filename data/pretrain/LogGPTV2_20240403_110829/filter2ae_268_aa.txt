原文：https://www.secjuice.com/hiding-javascript-in-png-csp-bypass/
**将JavaScript代码隐藏在PNG图像中，利用XSS绕过CSP对网站攻击测试研究**
# tl;dr
利用HTML
Canvas可以将恶意JavaScript代码转化为PNG图像，达到隐藏恶意代码的目的。然后，图像可以上传到正规网站，如Twitter或Google(通常由CSP列入白名单)，最后，利用canvas
`getImageData`方法，从图像中提取“隐藏的JavaScript代码”并执行。
Content-Security-Policy响应头被广泛用来缓解XSS，点击劫持和代码注入攻击。许多网站为了避免误报，通常会配置比较宽松的策略，将整个域都放进白名单中。  
[Mike Parsons的一篇文章](https://hackernoon.com/host-a-web-app-on-twitter-in-a-single-tweet-9aed28bdb350 "Mike Parsons的一篇文章")展示了如何使用HTML
Canvas将JavaScript代码“存储”到PNG图像中，作者突然想到，通过利用恶意JavaScript“存储”到PNG图像，我们可以获得一个完美的CSP绕过技术。
具体方法CanvasRenderingContext2D中的putImageData和getImageData，并使用String.charCodeAt表示隐藏文本字符串的每个字符。  
Canvas 2D
API的CanvasRenderingContext2D.putImageData()方法将给定ImageData对象中的数据绘制到画布上。如果提供了脏矩形，则只绘制该矩形中的像素。方法不受canvas变换矩阵的影响  
Canvas 2D
API的CanvasRenderingContext2D方法getImageData()返回表示画布指定部分的底层像素数据的ImageData对象。如果指定的矩形延伸到画布边界之外，则画布外部的像素在返回的ImageData对象zho为透明黑色。
# 使用Canvas在PNG图像中隐藏文本
下面是一个隐藏文本的示例：
    (function() {
        function encode(a) {
            if (a.length) {
                var c = a.length,
                    e = Math.ceil(Math.sqrt(c / 3)),
                    f = e,
                    g = document.createElement("canvas"),
                    h = g.getContext("2d");
                g.width = e, g.height = f;
                var j = h.getImageData(0, 0, e, f),
                    k = j.data,
                    l = 0;
                for (var m = 0; m = e) {
                if (1 === c.length) return e;
                var f = c.charCodeAt(1);
                return 1024 * (e - 55296) + (f - 56320) + 65536
            }
            return 56320 = e ? e : e
        },
        d = document,
        b = d.body,
        img = new Image;
        var stringenc = "Hello, World!";
        img.src = encode(stringenc), b.innerHTML = "", b.appendChild(img)
    })();
上面的代码使用`putImageData`方法创建一个图像，用RGB色彩模式表示"Hello,
World!"字符串（每三个一组），在控制台中运行后，浏览器左上角会显示一个图像：  
上面图像的每个像素代表“隐藏字符串”的3个字符。使用charCodeAt函数，可以将每个字符转换为0到65535之间的整数，在单个像素中，第一个转换的字符用于红色通道，第二个字符用于绿色通道，最后一个字符用于蓝色通道，第四个值是Alpha通道，在本文的例子中始终为255。
    r = "H".charCodeAt(0)
    g = "e".charCodeAt(0)
    b = "l".charCodeAt(0)
    a = 255
    j.data = [r,g,b,a,...]
下图可以更好地解释字符串的字符是如何分布到ImageData数组中的：
现在我们有了一个表示“Hello, World!”字符串的PNG图像。可以利用下面这段代码，将生成的PNG图像转换为原始字符串：
    t = document.getElementsByTagName("img")[0];
    var s = String.fromCharCode, c = document.createElement("canvas");
    var cs = c.style,
        cx = c.getContext("2d"),
        w = t.offsetWidth,
        h = t.offsetHeight;
    c.width = w;
    c.height = h;
    cs.width = w + "px";
    cs.height = h + "px";
    cx.drawImage(t, 0, 0);