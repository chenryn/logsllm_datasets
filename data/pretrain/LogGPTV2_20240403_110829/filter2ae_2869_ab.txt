          goto INFINITE_LOOP;
        }
      }
      if ( !strcmp(packet_buf, "PoWeRdOwN") )
      {
        goto POWERDOWN;
      }
      if ( !strcmp(packet_buf, "PrEaMbLe") )
      {
        memcpy(transaction_data.response_buffer, "AcKnOwLeDgMeNt", 15);
        goto SEND_RESPONSE;
      }
      if ( !strcmp(packet_buf, "PrObE") )
      {
        memcpy(transaction_data.response_buffer, log_location_buf, log_location_buf_size);
        goto SEND_RESPONSE;
      }
      ...
      dump_start_addr = strtol(packet_buf, NULL, 16);
      dump_end_addr = strtol(packet_buf + 9, NULL, 16);
      ...
      (some length checks)
      ...
      memcpy(transaction_data.response_buffer, dump_start_addr,   dump_end_addr - dump_start_addr);
      goto SEND_RESPONSE;
这是个相当基础的协议，用于设备的内存转储。发送一系列初始化数据包后，只需再发送转储起始地址和结束地址，然后通过 USB 恢复转储。
这对调试和逆向分析很有用，因为我们可以在崩溃之后转储内存，查看寄存器和堆栈，然后弄清发生了什么。当然还可以 dump
全部内存以帮助我们逆向。我们将会看到这种能力在文章第二部分很有用。
由于我们没有找到公开的工具用来通过上传模式转储
RAM，然后[我自己写了个](https://github.com/nitayart/sboot_dump)。
### Fuzzing Odin
这时，我们回到 Odin 协议，希望找到一个可利用的 bug。进入新的攻击面之时，我们要写出基本的 fuzz 工具，以便尽快达成目标。
实施证明 S-Boot 还是有点难度的，因为它使用 CDC
ACM（一种串口形式）的专有协议，很难使其正常运行。一些小细节至关重要：比如，你必须在每个标准数据包后发送一个空包，一些数据包需要 1024
字节，即使它实际只包含 4 个字节的有效数据。时间有限，从零开始 fuzz 就太慢了。
Benjamin Dobell 的 [Heimdall](https://github.com/Benjamin-Dobell/Heimdall)
此处就该登场了。Heimdall 是个开源的 Odin 客户端协议交互工具，它辅助处理与 Odin BootLoader 交互的部分，所以我们将其作为
fuzzer 的基础，然后进行一些扩展。
我们添加了一个名为 “fuzz” 的命令行选项，仅需一些原始数据包，可以使用 Python
预先生成，然后将它们依次发送至设备，同时处理底层细节。[点此下载](https://github.com/nitayart/heimdall_fuzz)
我们使用这种方法在 Odin 中发生了一些有趣的崩溃，但貌似不能利用。此时我们决定花一些时间扩展 Odin 应用，那么就需要更深入的研究
Odin。下面是我们的一些有趣的发现。
### The UART Console
搜索二进制，我们在 0x8F08BD78 处找到一些可疑的字符串指针。
 The
possible command list
看起来像是配对的命令名称和描述，可能是某种终端用于诊断的命令 - 在其他嵌入式项目中挺常见的，但此处并不是我们想要的。
要是有某种串口，能使我们连接到这个终端就好了，我们发现 XDA 的成员已经[做到了这一步](https://forum.xda-developers.com/showthread.php?t=1901376)。
事实证明，三星已经留下了一个 UART 终端，可以通过 BootLoader
打开，通过它暴露了一些低级的命令用户服务诊断。其中一些命令可以使用特殊参数启动内核，从存储器读取或写入，并触发各种 USB 模式。
然而，自从 2012 年 XDA 发布以来，还没有人对这些终端的输入做公开报告，使很多研究人员以为这个借口已被切断。我们想要对这一假设进行测试。
进一步阅读后，尤其是 [Michael Ossmann和Kyle Osborn 2013年的Black
Hat](https://media.blackhat.com/us-13/US-13-Ossmann-Multiplexed-Wired-Attack-Surfaces-WP.pdf) 演示，我们意识到三星手机以及所有的 Google Nexus手机都有一个多路复用 IC（MUIC），它位于 USB
连接器和 USB 控制器之间。通过检测 USB 连接器上的 ID 和接地直接的电阻，多路复用器在设备上切换了不同的连接路径。
公开文档有记录这两个路径的是普通的 USB 和 USB OTG。另一种模式，在公共文档中没有提到的是 UART。
The Samsung Anyway
然后调整设置，以获取该没有公开记录的 UART 的连接方式。调用的第一个端口便是[Samsung Anyway Jig](https://www.xda-developers.com/what-is-the-samsung-anyway-jig/)，这是三星比较隐秘的一个设备。这个东西通常只有三星工程师使用，很难搞到，尽管它每一段时间就会出现在 eBay 上。
显然，Anyway 只是为ID 引脚设置了几个预定义的电阻电平，并将 D+/D- 线分接到 DBUS 连接器，然后就可以通过串口 USB 适配器连接到
PC。
在 eBay 上收了个二手的，然后我测试了各种开关组合，试着让 MUIC 切换到 UART 终端模式。这在旧三星机器上管用，而我们只是成功获取到输入交互 -我们从 BootLoader 和内核获取日志，但是并没有得到终端。
在此阶段，我们决定自己制作一条临时的 UART 电缆，类似于 Joshua Drake 的 [Nexus 4 UART
](https://www.optiv.com/blog/building-a-nexus-4-uart-debug-cable)电缆。我们从 XDA
收集了一些关于 ID 引脚电阻以及相关制造商的各种数据，还从内核 DTS 文件中得到一些提示。下面假想电路图：
Our makeshift jig
由于需要控制一系列电阻，我们使用了一个可变电阻，将其设为需要的值（万用表测量），并将其连接到 S7。
jig 相当简单：RS232-to-USB 的TX / RX线连接到micro USB连接器的D/D- USB线，ID 引脚通过可变电阻连接接地引脚。
结果正确的电阻值是 619K 欧姆。设置成此电阻的时候，能够在启动设备时得到一些输出。但是并不完美，输出几行后就没反应了 - 我们仍然无法得到一个终端。
The initial UART output. Logs went silent after ifconn_com_to_open
为了深入理解问题的根源，来看看标记为 `get_initial_uart_str（0x8F006ECC` 的函数。似乎 UART
控制台只有在此函数返回非空时才会启动：
get_initial_uart_str
这里特别是 LABEL_9 ，我们可以看到 BootLoader 要求在进入控制台模式之前至少有四个连续的回车。
此时一目了然：通过连接 jig 启动时按下 “回车” 键，同时按下音量和电源按钮，我们试着清除了 `ifconn_com_to_open`
的检测和终端校验。
最后，我们的付出得到了回报：
如你所见，控制台暴露了一些非常有趣的命令。而下一篇文章将会更加有趣。
* * *