title:Practicality of accelerometer side channels on smartphones
author:Adam J. Aviv and
Benjamin Sapp and
Matt Blaze and
Jonathan M. Smith
Practicality of Accelerometer Side Channels
on Smartphones
Adam J. Aviv, Benjamin Sapp, Matt Blaze and Jonathan M. Smith
University of Pennsylvania
{aviv,bensapp,blaze,jms}@cis.uepnn.edu
ABSTRACT
Modern smartphones are equipped with a plethora of sensors that
enable a wide range of interactions, but some of these sensors can
be employed as a side channel to surreptitiously learn about user in-
put. In this paper, we show that the accelerometer sensor can also
be employed as a high-bandwidth side channel; particularly, we
demonstrate how to use the accelerometer sensor to learn user tap-
and gesture-based input as required to unlock smartphones using
a PIN/password or Android’s graphical password pattern. Using
data collected from a diverse group of 24 users in controlled (while
sitting) and uncontrolled (while walking) settings, we develop sam-
ple rate independent features for accelerometer readings based on
signal processing and polynomial ﬁtting techniques. In controlled
settings, our prediction model can on average classify the PIN en-
tered 43% of the time and pattern 73% of the time within 5 attempts
when selecting from a test set of 50 PINs and 50 patterns. In uncon-
trolled settings, while users are walking, our model can still classify
20% of the PINs and 40% of the patterns within 5 attempts. We ad-
ditionally explore the possibility of constructing an accelerometer-
reading-to-input dictionary and ﬁnd that such dictionaries would be
greatly challenged by movement-noise and cross-user training.
Categories and Subject Descriptors
I.5 [Pattern Recognition]: Applications
General Terms
Security, Design, Experimentation, Measurement, Performance
Keywords
Smartphone Security, Accelerometer, Side Channels
1.
INTRODUCTION
Smartphone motion sensors measure the movement and orienta-
tion of the phone in space, and sensors have been used in a wide
variety of tasks, notably in gaming applications. Applications are
generally granted access to these sensors without much concern and
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’12 Dec. 3-7, 2012, Orlando, Florida USA
Copyright 2012 ACM 978-1-4503-1312-4/12/12 ...$15.00.
41
without notifying the user; however, certain sensors may be able to
measure much more than just the user’s intention within a single
application.
It has recently been shown that the gyroscopic motion sensor,
which measures the smartphone’s orientation (e.g., pitch or roll), is
capable of inferring where on a touchscreen a user taps/touches [6,
34]. Such inferences constitute a side channel, potentially convey-
ing secure input intended for a foreground application to a back-
ground application that has access to the sensor. This new class
of smartphone side channels are a direct result of the new com-
puter interaction layer promoted by smartphones. As compared to
traditional computer platforms, smartphones are tactile, hand-held
devices, and users provide input by physically touching and ges-
turing on the touchscreen. These actions implicitly shift and adjust
the device in measurable (and machine predictable) ways.
In this paper, we continue this line of investigation into sensor-
based side channels by focusing on the smartphone’s accelerometer
sensor’s capability in this domain. The key question we investigate
is: Considering a background application with access to the ac-
celerometer, what can the background application learn about user
input to the foreground application via the accelerometer readings?
We show that the accelerometer is sensitive to user input and can
function as a side channel, and in applicable comparisons, we found
that accelerometer based techniques perform nearly as well, or bet-
ter, than gyroscopic based techniques.
We focus on inferring two common smartphone secure input
types using the accelerometer sensor: four-digit PINs (tap/touching)
and the Android password pattern (gesturing/swiping). We col-
lected accelerometer readings from 24 users, 12 entering PINs and
12 entering patterns. Using standard machine learning techniques,
we show that accelerometer measurements reliably identify the PIN
or pattern that was entered.
In our experiments, when selecting
from a uniform test set of 50 possible PINs or patterns, our models
can predict the PIN entered 43% and pattern 73% of the time within
5 guesses. Further, when we introduce movement noise caused
by users walking while providing input, our models can still pre-
dict PINs 20% of the time and patterns 40% of the time within 5
guesses. We also employ a Hidden Markov Model (HMM) to pre-
dict variable-length sequences of digits pressed in a PIN or swipes
in a password pattern. On this considerably harder sequence predic-
tion problem (where the random chance of being correct is roughly
0.01%), we can predict PINs 40% of the time and patterns 26% of
the time within 20 guesses
To summarize, this paper makes the following contributions:
• We perform a large user study of sensor-based side channels
(24 users and over 9,600 samples); the ﬁrst study to con-
sider both controlled (users sitting) and uncontrolled settings
(users walking).
• We develop novel machine learning features for accelerom-
eter readings that are sample-rate independent and based on
signal processing and polynomial ﬁtting techniques.
• We demonstrate that the accelerometer sensor is a highly
capable side channel against security-sensitive input, such
as PINs and password patterns, and general input based on
touch/tapping or gesture/swiping. In comparisons to previ-
ous results, where applicable, accelerometer data performs
nearly as well, or better, than gyroscopic data.
• We observe that there is reasonable consistency across users
and devices; however, movement noise and user variance
may be too great to construct an accelerometer-reading to
input dictionary mapping.
Finally, based on these results, and previous sensor-based side
channel results [6, 7, 22, 24, 34], it is clear that the security model
for smartphones with respect to on-board sensors should be recon-
sidered.
In this paper, we also propose context-based [23, 9, 4]
sensor access revocation policy for smartphones, such that applica-
tions with access to sensors either block (or fail) when attempting
to read from such sensors while sensitive input is being provided.
2. RELATED WORK
Gyroscopic Smartphone Side Channels. Cai et al. ﬁrst proposed
using on-board smartphone sensors as a side channel to learn users’
input [6]. Their system, touchlogger, describes a side channel that
employs the gyroscopic orientation sensor to determine broadly
where a user touches on a large keypad. Their results were very
encouraging, and in controlled settings, were able to infer which
of the 10 regions a user touched with 70% accuracy. Similarly, in
taplogger, Xu et al. reﬁned the techniques for inferring user input
from gyroscopic data [34]1, and were able to predict PIN-like in-
put based on a telephone key pad. Xu et al.’s models detected all
the digits of the PIN within three inference steps; that is, upon the
successive, non-overlapping predictions for each digit, all digits of
the PIN were covered. However, Xu et al. does not detail a process
for choosing a permutation of the predicted labels. For example,
after three predictions, there are three possible values for each digit
in a four-digit PIN, thus requiring, in the worst case, 81 possible
guesses to predict the input. Surprisingly, Xu et al. does not apply
standard sequence prediction techniques, such as Hidden Markov
Models (HMM), to link each individual prediction together.
In work parallel
to our own, Milluzo et al.
developed
TapPrints [22] which uses a combination of gyroscopic and ac-
celerometer data to infer tap events and location of tap events on
tablet and smartphone keyboards. Additionally, in parallel, Cai et
al. developed further techniques using both the accelerometer and
gyroscope to infer numeric and soft-keyboard input on tablets and
smartphones [7].
Our work differs from these previous and parallel techniques
in that we investigate using only the accelerometer sensor to in-
fer user input. Additionally, we demonstrate that input based on
swipe gesturing as well as input based taps/touches are suscepti-
ble to sensor-based side channels. We also explore the use of new
sample-rate independent features, and ﬁnally, we investigate the
effects of motion-noise, such as a user walking, which can have a
considerable effect on the accuracy of motion-based inference tech-
niques.
Accelerometer Smartphone Side Channels.
ACCessory [24]
by Owusu et al. is closer to our work. In ACCessory, the authors
1 Xu et al. do investigate accelerometer data in taplogger for pur-
poses other than inferring the location of tap events on the screen.
demonstrate that the accelerometer can be used as a basic side chan-
nel to infer short sequences of touches on a soft keyboard, and that
standard machine learning techniques can be employed to infer in-
put like passwords. Similarly, we show that the accelerometer can
be used to infer secure input, and we also demonstrate that input
can be classiﬁed with a sequence predictor.
Our work differs from Owusu et al. in that we also demonstrate
that swiping can be inferred from accelerometer data in addition
to touch input. We additionally show that certain touch input, like
PIN entry, can be classiﬁed at a much higher rate and with fewer
guesses than suggested by Owusu et al.. ACCessory was able to
classify input strings of length 6 with 60% accuracy, but needed
212 guesses to achieve that result. In a similar experiment with PIN
entry, we showed that the PIN entered can be classiﬁed with 40%
accuracy within 20 guesses on average (see Figure 15).
In interesting related work, Marquardt et al. showed that smart-
phone accelerometers can infer more than input occurring on the
phone. They developed (sp)iphone that collected accelerometer
readings while the smartphone is placed next to a keyboard [20].
The vibrations of a user typing on the keyboard is recorded by
the phone and generally interpreted to predict what was typed on
the keyboard. This technique is similar to acoustic keyboard side-
channels that use audio recordings to surreptitiously learn user in-
put [1, 35], as well as keystroke timing techniques [31].
Smartphone Side Channels. Side channels against secure smart-
phone input have been previously demonstrated for the Android
password pattern input. In earlier work, we described smudge at-
tacks that are based on observing the oily residues remaining on
touchscreens after a pattern is entered [2]. The side channel de-
scribed here has a similar goal, but is based on internal sensors
rather than external observations. An additional observation made
in [2] is that the Android password pattern is more susceptible to
the side-channel than other secure input types, such as PINs or
text-based passwords. Our conclusion is that inferring password
patterns using the accelerometer is generally more effective than
inferring PINs, but in speciﬁc situations such as sequence predic-
tion, PINs can be slightly easier to infer.
Other sensors and recording devices have been proposed as side
channels on smartphones. Shlegel et al. proposed Soundcomber [30]
and demonstrated that a malicious app that has access to the micro-
phone can learn the difference between general chatter and tone
dialing, effectively learning the numbers a user calls. Similarly, Xu
et al. considered information that can be leaked if a malicious app
has access to the smartphone’s camera [33], and Cai et al. inves-
tigate snifﬁng sensors including the microphone, camera, and GPS
receiver [8].
3. BACKGROUND
PINs. Both Apple iOS and Android based smartphones support
PINs as a screen lock mechanism. PINs are the primary iOS screen
lock interface, but Android provides two other options: a graphical
password pattern (see below) or a pass-phrase consisting of both
numbers and letters. A PIN consists of a sequence of four digits, 0-
9, and digits may repeat. Thus, there are a total of 10,000 possible
PINs, and iOS will lock down the phone after 10 failed attempts,
while Android allows for 20 failed attempts. In addition to securing
the device, PINs are also used in banking applications, particularly
Google Wallet [13] requires a user to enter a PIN to conﬁrm trans-
actions.
Password Pattern. The Android password pattern is a graphical
password scheme that requires users to enter a sequence of swipes
that connect contact points in a three-by-three grid. The user must
maintain contact with the screen while entering a pattern, and a
42
Figure 1: Android Password
Pattern Instructions
Figure 2: Accelerometer Axis
of Measurement (Source [10])
user’s pattern must minimally contact four points (see Figure 1).
Android allows for 20 failed pattern entry attempts before lock-
ing the device permanently. Despite its seeming complexity, only
389,112 possible patterns exist [2], and likely, many of those pat-
terns are completely unusable for general daily use: in our experi-
ence (see Section 5), using a randomly chosen pattern as a security
credential will be too difﬁcult to enter reliably. The number of
actual human-usable patterns remains an interesting question; we
hypothesize that it is at least an order of magnitude less than the
total of available patterns.
Accelerometer Sensor. The accelerometer sensor measures linear
movements in three dimensions, side-to-side, forward-and-back,
and up-and-down (labeled x, y, and z respectively in Figure 2).
Upon each reading, a data element is provided that contains the ac-
celeration reading in all three linear directions, and the units are
in m/s2 with the force of gravity considered. Note that the ac-
celerometer sensor measures different movement than the gyro-
scopic sensor, which senses the orientation of the phone, i.e., the
pitch and roll angles. Although certain movements can be mea-
sured in both, e.g., tilting the phone forward and back, others are
only measured by one sensor or the other, e.g., holding the phone
face up and moving it left would only be measured by the ac-
celerometer sensor.
Accelerometers have been previously studied in the computer
science community, and researchers have shown that accelerometer
readings can provide a rich source of information about the actions
of individuals [3, 18, 21, 28, 29]. Using accelerometers as a user in-
terface (UI) enhancement has also been proposed [18, 19, 27]. The
accelerometer sensor is used in many applications, for example in
the Bump application [32], an application to quickly exchange con-
tact information by “bumping” smartphones together. More light
weight applications also make use of the accelerometer, for exam-
ple applications that simulate a “light saber” use the accelerometer
to determine when to play a sound effect [14].
4. ATTACK SCENARIO
We consider an attacker who wishes to learn the secure input of
smartphone users via an accelerometer side channel. An attacker
may gain access to accelerometer data in a wide variety of ways
– e.g., the attacker ﬁnds a phone where an application has written
accelerometer data to the device storage. We consider a more active
attacker who distributes a malicious smartphone application that
can run in the background, has access to the accelerometer, and can
communicate over the network. As an example of the kinds of input
an attacker may be able to learn, we focus on the information that
is leaked by two common input types, entering a PIN or Android
password pattern that is used to lock the smartphone.
To this end, the malicious application is aware when the phone
initially wakes and, thus, the smartphone will prompt a user for a
PIN or password pattern while the malicious application is running
in the background. The application then activates the accelerometer
sensor, recording measurements for a short time period. We found
that it takes 2.4 seconds to enter a pattern and 1.3 seconds to enter
a PIN, on average, so the accelerometer does not need to be active
for very long. The accelerometer measurements are eventually sent
over the network to be analyzed ofﬂine.
The attacker’s goal at this point is to develop a method for com-
paring the captured accelerometer data to a corpus of labeled ac-
celerometer data2. That is, the attacker has at his/her disposal ac-
celerometer data that he/she knows was collected when a particu-
lar PIN or pattern is entered. The problem of identifying the PIN
or pattern entered reduces to a classic machine learning problem:
Given previously labeled input, what is the label of the unknown
input? In this scenario, the label is the PIN or pattern of the victim.
We consider two scenarios in our experiments for the attacker’s
capabilities to make this comparison to the corpus at his/her dis-
posal. In the ﬁrst scenario, we assume that the attacker has a large
corpus, and samples of the PIN or pattern he/she is trying to learn
can be found in the corpus. In the second scenario, we assume that
the attacker does not have samples in the corpus, or not enough to
generate a strong model. Instead the attacker has a limited set of la-
beled samples of individual swipes or touch events, such as a swipe
from left to right on the screen or the touch of a particular digit.
In our experiments, we model these two scenarios by ﬁrst con-
sidering a sample set of 50 patterns and 50 PINs. Here the goal
of the experiment is to measure how accurately a pattern and PIN
can be identiﬁed based on previously seen input. In the second sce-
nario, where the attacker does not have sufﬁcient labeled data, the
goal of the experiment is to measure the accuracy of a sequence
predictor that tries to identify a pattern by making a sequence of
smaller predictions (e.g., a single swipe or digit press). We present
more details of our machine learning setup in Section 6.
Of course, an important question is: What can an attacker do
with the information learned? Clearly, if the attacker has learned a
user’s password pattern, it is only useful if the attacker gains phys-
ical access to the victim’s phone at some later point because the
Android password pattern is not a widely used security mechanism.
Granted, this is a reasonable attack scenario. However, learning a
user’s smartphone unlock PIN may be applicable in other settings
if the user reuses his/her PIN, such as an ATM PIN or in an online
banking application [5].
More broadly, we focus on PINs and Android password patterns
because they represent a larger set of user input on touchscreens
that is composed of point touching and gesturing. Demonstrating
an accelerometer side channel against these input types is an exam-
ple of a broader family of sensitive touchscreen inputs that may be
susceptible to this side channel.
5. DATA COLLECTION
We built two applications to model the attacker’s perspective
and determine if a background application with access to the ac-
celerometer can infer input to the foreground one. The ﬁrst appli-
cation prompts users to enter a PIN, and records accelerometer data
in the background; similarly, the other application prompts the user
to enter a pattern while recording accelerometer data in the back-
ground. A visual of the applications can be found in Figure 3.
We recruited 24 users to participate in the core study: 12 users
entered password patterns, and 12 users entered PINs. The users
in our experiment were surprisingly diverse. Two users were left
2The attacker could build such a corpus by distributing an appli-
cation that requires users to enter patterns for other purposes, such
as [11, 15, 26].
43
Model Name
Nexus One
G2
Nexus S
Droid Incredible
Chipset