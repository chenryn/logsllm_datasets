### Figure 6: Overcoming MP-HoL Blocking with Reduced Cost Overhead in Fast-Changing Wireless Environments

- **(a) Network Traces**: Path traces used in the experiment.
- **(b) Vanilla-MP**: Dynamics of the client’s buffer occupancy level (cached bytes) and server’s re-injection packets (in bytes).
- **(c) Re-injection without QoE Control**: Dynamics of the client’s buffer occupancy level and server’s re-injection packets.
- **(d) Re-injection with QoE Control**: Dynamics of the client’s buffer occupancy level and server’s re-injection packets.

**Key Design Points:**
1. **Path Identification**: Different paths are identified by the sequence number of connection IDs (CIDs). To facilitate packet loss detection and recovery, each path uses a separate packet number space.
2. **QUIC Header Compatibility**: QUIC packet header formats remain unchanged to avoid potential blocking by middle-boxes.
3. **Encryption Key Sharing**: All paths within a single connection share the same encryption key, but each path can obtain a unique nonce in AEAD.
4. **Multi-Path Functionality and QoE Feedback**: PATH_STATUS and ACK_MP extension frames are incorporated to support multi-path functionality and QoE feedback mechanisms.

### Multi-Path Initialization
The multi-path initialization process is illustrated in Figure 9. XLINK initializes the primary path similarly to single-path QUIC, with the addition of an `enable_multipath` transport parameter during the first handshake. If the server responds with the `enable_multipath` parameter, both end-hosts recognize that multi-path is supported; otherwise, they revert to single-path QUIC.

Before initializing a new path, the client must provide at least one unused available CID (e.g., C1 with sequence number 1), and the server must provide at least one unused available CID. The client then selects an available Connection ID (S2) as the Destination Connection ID for the new path. The exchange of CIDs is facilitated using the `NEW_CONNECTION_ID` frame defined in QUIC [34]. To prevent path spoofing attacks, XLINK employs `PATH_CHALLENGE` and `PATH_RESPONSE` frames [34].

Once multi-paths are initialized, XLINK uses the `ACK_MP` frame instead of the standard `ACK` frame to send acknowledgments.

### Frame Extensions
- **PATH_STATUS Frame**: Used to manage multi-paths by informing the peer of the current status of a path. Available values include `Abandon(0)`, `Standby(1)`, and `Available(2)`. Endpoints use the sequence number of the CID used by the peer to describe the sender’s path identifier.
- **ACK_MP Frame**: Facilitates convenient loss detection and supports QoE feedback. This frame allows for more efficient congestion control, especially when using Cubic, as faster ACK returns help the congestion window grow more rapidly, leading to better throughput.

### Protocol and Implementation
XLINK extends QUIC to support multi-path with minimal modifications. Unlike previous proposals that heavily relied on the "uni-flow" concept, XLINK builds on the bidirectional paths, which naturally fit into cellular and Wi-Fi links. This design simplifies implementation while reusing most of the existing QUIC transport design, with the addition of three new frames. Importantly, XLINK supports QoE feedback, enabling dynamic scheduling based on user experience.

### Deployment
- **APIs for Applications**: XLINK provides APIs for applications like video players to pass information (e.g., cached bytes, current bit-rate, frame-rate) to QUIC. The test package can be released weekly on the client side.
- **CDN Servers**: A XLINK server, implemented in C (also in XQUIC [45]), is deployed in a multi-process architecture CDN server. Consistent hashing on the process ID encoded in the CID ensures that received packets are delivered to the correct process. Algorithm parameters can be updated within hours.

### Evaluation
**Online Evaluation:**
- **Real-World Data**: Data from real users who upgraded to the Taobao Android app with XLINK. We examined the client-side video player’s buffer-level distribution and redundant traffic cost versus the choice of double thresholds.
- **Large-Scale A/B Tests**: Day-to-day comparisons between single-path QUIC and XLINK, involving over 100K participants and 3 million video plays. Participants using multi-path enjoyed zero-rated cellular data. Results included video request completion time and QoE metrics, focusing on rebuffer rate and first frame delivery time improvements.

**Controlled Evaluation:**
- **High Mobility Evaluations**: Performance comparison of XLINK and other multi-path solutions under extreme mobility scenarios.
- **Energy Consumption**: Measured energy consumption on cellphones when downloading video files of various sizes.

**Congestion Control:**
- **Algorithms Used**: Cubic for experiments, with "decoupled" congestion control for vanilla-MP, MPTCP, and XLINK, typical for mobile multi-path transport [46, 47].

### Buffer-Level and Cost Overhead vs. Double Thresholds
We investigated the choice of double thresholds in the QoE control algorithm by varying the upper and lower thresholds. Figure 10 shows the client’s buffer occupancy levels and traffic cost overhead for different threshold settings. Key observations:
- **Re-injection Necessity**: Re-injection was essential; without it, buffer levels dropped significantly.
- **QoE Control Necessity**: Without QoE control, the traffic overhead reached 15%.
- **Overhead Cost Bounds**: The overhead cost was lower-bounded by \(\beta(1 - X)\) and upper-bounded by \(\beta(1 - Y)\), where \(\beta \approx 15\%\).
- **Moderate Thresholds**: Moderate threshold values (e.g., (95, 80)) achieved good performance with minimal cost. Further increasing the threshold provided diminishing returns.
- **Delivery-Time Comparison**: Useful in reducing unnecessary re-injection cases to control costs, as seen in (90, 80) vs. (90, 60) and (60, 50) vs. (60, 1).

**Table 2: Percentage Reduction of Buffer Levels < 50ms**
| Threshold | Improvement (%) |
|-----------|-----------------|
| 95-80     | 66.14           |
| 90-80     | 57.59           |
| 90-60     | 55.65           |
| 60-50     | 78.87           |
| 60-1      | 64.74           |
| 1-1       | 62.23           |

### Large-Scale A/B Test
**Video Request Completion Time:**
- **A/B Test Results**: Median, 95th, and 99th percentile request completion times (RCT) of video chunks. XLINK consistently outperformed SP in both median and tail RCT, showing 2.3% to 8.9%, 9.4% to 34%, and 19% to 50% day-to-day improvements, respectively. The large improvement at high percentiles was due to the reliability and diversity of multi-paths.

**QoE Metric #1: Video Rebuffer Rate:**
- **Reduction in Rebuffer Rate**: Table 3 shows the reduction in client-side video rebuffer rate over one week. The rebuffer rate, defined as the total rebuffer time normalized by the total play time, was significantly reduced, ranging from 23.8% to 67.6%. These results align with the video request completion time, demonstrating XLINK's effectiveness in improving user-perceived quality.