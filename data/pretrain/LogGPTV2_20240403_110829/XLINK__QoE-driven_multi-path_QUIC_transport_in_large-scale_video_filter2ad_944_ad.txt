(a) Network traces
(b) Vanilla-MP
(c) Re-injection wo. QoE
(d) Re-injection w. QoE
Figure 6: Example of how Alg. 1 overcomes MP-HoL blocking with reduced cost overhead in fast changing wireless environments: (a) Path
traces used in this experiment. (b-d) Dynamics of client’s buffer occupancy level (cached bytes) and server’s re-injection packets (in bytes) for
(b) vanilla-MP, (c) re-injection without QoE control, and (d) re-injection with QoE control.
The key design points are: (1) Different paths are identified by
the sequence number of connection IDs (CIDs). To make packet loss
detection and recovery convenient, we use separate packet number
space for each path. (2) We keep QUIC packet header formats un-
changed to avoid the risk of packet being blocked by middle-boxes.
(3) All paths that belong to one connection share the same encryp-
tion key, but we incorporate a mechanism to enable each path to
obtain a unique nonce in AEAD. (4) We incorporate PATH_STATUS
and ACK_MP extension frames to support multi-path functionality
and QoE feedback mechanism.
Multi-path initialization. The multi-path path initialization pro-
cess is shown in Fig. 9. XLINK first initializes the primary path in
the same way that single-path QUIC does, except that during the
first handshake, the client includes a 𝑒𝑛𝑎𝑏𝑙𝑒_𝑚𝑢𝑙𝑡𝑖𝑝𝑎𝑡ℎ transport
parameter. If the server replies with a 𝑒𝑛𝑎𝑏𝑙𝑒_𝑚𝑢𝑙𝑡𝑖𝑝𝑎𝑡ℎ parame-
ter, then both end-hosts know that multi-path is supported. If not,
they fall back to single-path QUIC. Before initializing a new path,
the client needs to provide at least one unused available CID (e.g.
C1 with sequence number 1), and the server needs to provide at
least one unused available CID14. In order to setup a new path,
the client chooses an available Connection ID S2 as the Destina-
tion Connection ID in the new path. The exchange of CID is done
with the 𝑁 𝐸𝑊 _𝐶𝑂𝑁 𝑁 𝐸𝐶𝑇 𝐼𝑂𝑁 _𝐼𝐷 frame defined in QUIC [34].
To avoid path spoofing attack, XLINK uses 𝑃𝐴𝑇 𝐻_𝐶𝐻𝐴𝐿𝐿𝐸𝑁𝐺𝐸
and 𝑃𝐴𝑇 𝐻_𝑅𝐸𝑆𝑃𝑂𝑁 𝑆𝐸 frames defined in [34]. Once multi-paths
are initialized, XLINK uses ACK_MP frame instead of ACK frame
to send acknowledgement.
Frame extension. We use the PATH_STATUS frame and ACK_MP
frame to support multi-path functionality and QoE feedback. The
PATH_STATUS frame is used to help manage multi-paths, which
informs the peer of the current status of a path, and the peer should
send packets according to the preference expressed in these frames.
Available values of PATH_STATUS are Abandon(0), Standby(1), and
Available(2). Endpoints use the sequence number of the CID used
by the peer for PATH_STATUS frames (describing the sender’s
path identifier). The ACK_MP frame allows for convenient loss
14When client wants to start a new path, it checks whether there are unused
available CIDs on each side, and chooses an available CID S2 as the DCID in the new
path.
Figure 7: First-video-frame delivery time when starting a connec-
tion from a 5G or a Wi-Fi interface.
Figure 8: ACK_MP path selection strategies with Cubic congestion
control: shortest-path (min-RTT) vs. original path.
of a 4MB load by changing the path RTT ratio between two paths
of equal bandwidth with Mahimahi. As the delay ratio becomes
larger, ACK_MP on the fastest path begins to show advantages. The
reason is that for Cubic, faster ACK return helps the congestion
window grow faster, which yields better throughput.
6 PROTOCOL AND IMPLEMENTATION
We describe the protocol and implementation of XLINK in this
section. We start with how XLINK extends QUIC to multi-path,
followed by the integration of XLINK into android apps and video
services. XLINK is implemented based on our multi-path QUIC
draft [11], which extends IETF QUIC to multi-path with smallest
possible modifications. Different from past proposals [7] that heav-
ily relied on the "uni-flow" concept, we extend multi-path on top
of the concept of the bidirectional paths, which readily fits into
the nature of both cellular and wifi links that cover the majority of
multi-path applications in QUIC while keeping the design simple
and easy to implement. In doing so, we are able to re-use most of the
current QUIC transport design with the sole addition of three new
frames. More importantly, our design supports QoE feedback that
is needed to enable XLINK’s feedback-based dynamic scheduling.
425
 0 7 14 21 28 350123456Throughput (Mbps)Time (s)Path1Path20.00.71.42.12.83.501234560.00.51.01.52.02.5Buffer level (MB)Re-inject bytes (MB)Time (s)Buffer level0.00.71.42.12.83.501234560.00.51.01.52.02.5Re-injectionafter first frameBuffer level (MB)Re-inject bytes (MB)Time (s)Re-injectBuffer levelRe-inject bytes0.00.71.42.12.83.501234560.00.51.01.52.02.5Re-injectionafter first frameBuffer level (MB)Re-inject bytes (MB)Time (s)Re-injectBuffer levelRe-inject bytes 0 100 200 300 400 500128K256K512K1M2M Time (ms)First frame size (B)WiFi primary5G primary01231:12:13:14:15:16:17:18:1 Time (s)RTT ratio between two pathsminRTT pathOriginal pathXLINK: QoE-Driven Multi-Path QUIC Transport in Large-scale Video Services
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
XLINK offers APIs for applications such as video players to pass
information (e.g., cached bytes, cached frames, current bit-rate, and
frame-rate) to QUIC. The test package can be released weekly on
the client-side.
Deployment in CDN servers. A XLINK server is also written in
C(also implemented in XQUIC [45]), and is deployed in a multi-
process architecture CDN server. To deliver received packets to the
right process that holds the context of a QUIC connection, we use
consistent hashing on a process ID that is encoded in the reserved
bytes in the CID. The algorithm parameters of XLINK are added as
configuration items that can be updated in hours.
7 EVALUATION
In this section, we present the evaluation of XLINK, which consists
of two parts: online evaluation and controlled evaluation.
Online evaluation: In this part, we report data from real users who
upgraded to Taobao Android app with XLINK. We start by examin-
ing the change of client-side video player’s buffer-level distribution
and the corresponding redundant traffic cost vs. the choice of dou-
ble thresholds. Then, we report the results from our large-scale A/B
tests, where we conducted day-to-day comparisons between two
contrast groups (single-path QUIC and XLINK) running in parallel.
The total number of participants was over 100K and our measure-
ments consisted of over 3-million video plays. In collaboration with
a mobile carrier, the participants who used multi-path in the ex-
periment enjoyed zero-rated cellular data 15. Our A/B test results
include both video request completion time and QoE metrics. In
the QoE metric part, we focused on the rebuffer rate improvement
and first frame delivery time improvement.
Controlled evaluation: In this part, we conduct measurements
in controlled environments which allowed us to compare different
methods with repeatable network conditions. We first conducted
high mobility evaluations where we compared the performance
of XLINK and other multi-path solutions with network traces col-
lected in extreme mobility scenarios. Then, we measured energy
consumption of using XLINK on cellphones when downloading
video files of various sizes.
Unless otherwise specified, the congestion control algorithms used
in experiments were Cubic. For vanilla-MP, MPTCP, and XLINK,
we used "decoupled" congestion control, which was the typical
configuration for mobile multi-path transport [46, 47]. We also
discuss congestion control issues in Sec. 9.
7.1 Buffer-level and cost overhead vs. double
thresholds.
We start by investigating the choice of double thresholds in the
QoE control algorithm by changing the upper and lower thresholds
in Alg. 1. To determine the threshold values, we first measured
the play-time left distribution from QoE feedbacks 16 when the
control was off. Then we chose thresholds (𝑡ℎ(𝑋), 𝑡ℎ(𝑌)), where
𝑡ℎ(𝑋) and 𝑡ℎ(𝑌) denoted the 𝑋-th and 𝑌-th percentile values in
the distribution (e.g., 𝑃𝑟𝑜𝑏[𝑥 > 𝑡ℎ(𝑋)] = 𝑋%) 17. Fig. 10 shows the
15Zero-rated data means the mobile carrier does not count the data used by a user
for a specific app.
16We measured the buffer level after the video start-up phases.
17E.g, if 𝑋 is 90, 90% of the play-time left values are greater than 𝑡ℎ(𝑋).
Figure 9: XLINK’s path initialization process
detection and recovery on each path by incorporating a path in-
dex field (CID sequence number). In our experiments, it also sup-
ports QoE feedback between a client and a server by incorpo-
rating the 𝑄𝑜𝐸_𝐶𝑜𝑛𝑡𝑟𝑜𝑙_𝑆𝑖𝑔𝑛𝑎𝑙 field. The structure of ACK_MP
is shown Appx. C. In our draft [11], we further introduce the
QOE_CONTROL_SIGNAL frame extension, which allows us to
send the QoE feedback independently without being restricted by
ACK frequency.
Path close. Both client and server can close a path, by sending
PATH_STATUS frame which abandons the path with a correspond-
ing Path Identifier. Once a path is marked as "abandon", it means
that the resources related to the path can be released. In scenarios
such as client detects the network environment change (client’s
4G/Wi-Fi is turned off, Wi-Fi signal is fading to a threshold), or
endpoints detect that the quality of RTT or loss rate is becoming
worse, client or server can terminate a path immediately.
Packet protection. The general principles of packet protection are
not changed for QUIC Multipath. No changes are needed for setting
packet protection keys, initial secrets, header protection, use of
0-RTT keys [11]. However, the use of multiple number spaces for 1-
RTT packets requires changes in AEAD usage. For QUIC multipath,
the construction of the nonce starts with the construction of a 96
bit path-and-packet-number, composed of the 32 bit Connection ID
Sequence Number in byte order, two zero bits, and the 62 bits of the
reconstructed QUIC packet number in network byte order. If the IV
is larger than 96 bits, path-and-packet-number is left-padded with
zeros to the size of the IV. The exclusive OR of the padded packet
number and the IV forms the AEAD nonce.
Work with Load Balancers. XLINK works with load balancers
that implement the routing algorithm specified in QUIC-LB draft [44].
We use consistent hashing on Connection IDs in load balancers to
ensure that multiple paths are routed to the same real servers. In
order to do so, a real server encodes a server ID in the CID issued
to the client.
Integration with android apps. A XLINK client, written in C, is
implemented in XQUIC [45], which is the Alibaba’s implementation
of the IETF QUIC, and is integrated into Taobao Android App.
426
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
Z. Zheng et al.
Figure 10: Client’s buffer occupancy levels and traffic cost over-
head vs. different threshold settings.
levels dropped significantly.
client’s buffer level improvements over SP vs. threshold settings,
where (𝑡ℎ(𝑋),𝑡ℎ(𝑌)) is simplified as (𝑋,𝑌). We also plot the cost
associated with these threshold settings in Fig. 10. We observed the
following:
• Re-injection was necessary. When re-injection was off, the buffer
• QoE control was necessary. When it was off in the setting (1, 1),
the traffic overhead reached 15%.
• The overhead cost was lowered bounded by 𝛽(1 − 𝑋) and upper
bounded by 𝛽(1−𝑌), where 𝛽 can be approximated as 15%, which
was expected (see Sec. 5.2.2).
• A moderate threshold value achieved good performance with
small cost (e.g., (95, 80)). Further increasing the threshold saw
diminished returns.
• Comparing delivery-time was useful in ruling out unnecessary
re-injection cases to control cost when the upper threshold was
large, as can be seen in (90, 80) vs. (90, 60) and also (60, 50) vs.
(60, 1).
We further calculated the percentage of samples whose play-time
left was smaller than 50ms, which is considered as a danger level
that could lead to possible video rebuffer. The reduction of such
percentage is shown in Table 2, where the threshold settings are the
same as Fig. 10. The percentage reduction of the buffer levels smaller
than 50ms correlated with the improvement of the 99𝑡ℎ percentile
buffer level and a lower-threshold at 𝑡ℎ(95) was sufficient to cover
the poor network conditions. Therefore, the most cost-efficient
combination was (95, 80), which achieved 66% improvement in the
re-buffering probability with an overhead cost of 2.1% (See Fig. 10).
Further increasing the cost saw the same level of improvements,
despite the daily variations due to the still limited experiment size.
These results prove the effectiveness of Alg. 1 and show that we
can balance performance and cost-efficiency with the proposed
algorithm.
Table 2: Percentage reduction of buffer levels < 50ms
Thresh. #
Improv. (%)
95-80
66.14
90-80
57.59
90-60
55.65
60-50
78.87
60-1
64.74
1-1
62.23
7.2 Large-scale A/B test
Video request completion time. We report A/B test result of
video request completion time over the course of two weeks. Fig. 11
shows the median, 95𝑡ℎ and 99𝑡ℎ percentile request completion
427
Figure 11: A/B test results (XLINK vs. SP) on request completion
time.
time (RCT) of video chunks. As discussed earlier in Sec. 3, vanilla-
MP underperformed SP at times. In contrast, XLINK consistently
outperformed SP in both the median and the tail RCT because
it was able to overcome multi-path HoL blocking with the QoE-
driven multi-path scheduling and management. We observed 2.3%
to 8.9%, 9.4% to 34% and, 19% to 50% day-to-day improvements in
the median, 95th, and 99th percentile RCT, respectively 18. The
large improvement at high percentiles was contributed by more
reliability and diversity gain of multi-paths at tail distribution.
QoE metric #1: video rebuffer rate. The reduction (improve-
ment) of client-side video rebuffer rate observed through the course
of one week is shown in Table 3. The video rebuffer rate, which mea-
sures video playback smoothness, is defined as the total amount
of video rebuffer time normalized by the total amount of video
play time. In other word, the video rebuffer rate is calculated as
sum(rebuffer time)/sum(play time). Compared to SP QUIC, XLINK
consistently outperformed SP in video rebuffer rate. The observed
rebuffer rate reduction was significant, which ranged from 23.8%
to 67.6%. Such a result was in accordance with the video request
completion time shown in Fig. 11. The evaluation results showed
that XLINK was effective in improving the quality of user-perceived