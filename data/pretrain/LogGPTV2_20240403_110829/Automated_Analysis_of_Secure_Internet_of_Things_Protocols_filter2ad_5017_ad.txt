based on this protocol. We also implemented key security
veriﬁcation under D-Y, eCK, and PFS.
Table 2 shows our case studies including SigFox, LoRa,
JPAKE, MQTT, and CoAP. Based on our initial implemen-
tation, service providers and vendors can further extend the
analysis according to their application settings. We plan
to continue formal analysis of other IoT protocols and will
release our implementations.
5 DOS ATTACK VULNERABILITY OF
IOT PROTOCOLS
IoT applications face emerging adversaries working for dif-
ferent motives. Thus, introducing new attack models in the
formal analysis is essential for practical IoT applications. In
this section, we used DoS attacks as an example of introduc-
ing emerging attack models in the IoT. Vulnerability to DoS
attacks is a classic problem. We present our DoS attack mod-
elling using our approach to formal security analysis. This
will be a base for introducing application-speciﬁc adversary
models.
We usually assume the adversary’s goals to be to disrupt,
subvert, or destroy a network, resulting in diminished or
eliminated capability. A DoS attack does not require as much
eﬀort as other cryptographic attacks, but it works very well
in the IoT [45]. DoS attacks can occur on the physical layer
all the way to routing and application layer. However, we
only consider cryptographic DoS attacks in IoT applications
here. Cryptographic DoS attacks are extremely eﬀective in
terms of depleting/exhausting constrained resources such as
computation, communication, and energy of battery-powered
devices [47]. The crucial advantage cryptographic DoS attacks
enjoy is that they cause intensive computation.
DoS attacks targeting IoT devices. To show the im-
pact of cryptographic DoS attacks, we performed extensive
Operation
Multiplication
Exponentiation
Pairing
ECDSA generation
ECDSA veriﬁcation
AES-256 (200 byte)
SHA-256 (200 byte)
Radio (127 byte)
Energy
Time
269 ms, 24.3 mA
13.7 mJ
695 ms, 24.3 mA 35.4 mA
1,964 ms, 25.1 mA 103.5 mJ
4,104 ms, 23.6 mA 203.3 mJ
2,631 ms, 23.6 mA 130.3 mJ
1.8 ms, 20.8 mA
78.6 µJ
3.1 ms, 20.8 mA 135.4 µJ
67.7 mJ
1,301 ms, 24.8 mA
Table 3: Computation overhead summary on Open-
mote using NIST P-256 elliptic curve. RSA will
cause signiﬁcantly higher overheads.
experiments on a constrained IoT device, Openmote [9]. Open-
mote represents our battery-running constrained IoT device,
as it features Cortex-M3 processors with up to 32 Mhz clock,
256/512 kB ROM, 16/32 kB RAM, and tamper-resistant key
storage. Even lightweight Elliptic Curve Digital Signature Al-
gorithm (ECDSA) signature veriﬁcation/generation requires
2.6 and 4.1 seconds, respectively, on Openmote (see Table 3).
In such an environment, simply ﬂooding the network with
fake signatures or session re-initialization requests can ac-
complish the goal of a DoS on IoT devices. DoS attacks on
IoT servers aim for ampliﬁcation by transmitting handshake
(re)initialization and service requests.
DoS attacks on JPAKE. Although the security of
JPAKE was initially proved by Hao et al. [29] and later
thoroughly by Abdalla et al. [19], they both emphasized that
DoS attacks are a rare but a powerful attack on JPAKE.
This is due to the intrinsic nature of PAKE protocols, where
the password is the only secret between two parties and it
is a low-entropy secret. Thus, there is practically no way to
verify the legitimacy of a party until the key between the two
parties is established.
Since the original JPAKE implementation is too heavy
for constrained IoT devices, THREAD proposes to use an
elliptic curve variant of JPAKE (EC-JPAKE) [2], using the
NIST P-256 elliptic curve. EC-JPAKE is a more suitable
choice for IoT applications since Elliptic Curve Cryptography
(ECC) requires signiﬁcantly shorter keys than RSA for the
same level of security (e.g., 256 bit ECC ≡ 3072 bit RSA),
resulting in lower performance and memory requirements for
constrained IoT devices. ECC-based security schemes have
been a favourable choice for IoT and WSNs applications, as
they can provide higher security even on constrained devices.
Although the original JPAKE consists of 4 ﬂights in to-
tal, EC-JPAKE contracts it to 3 ﬂights for communication
eﬃciency (see Fig. 9). Each EC-JPAKE party must per-
form 14 exponentiations and 8 multiplications to derive the
shared key with 3 protocol ﬂights. We measured the com-
putation/communication cost of the EC-JPAKE handshake
on Openmote using the 802.15.4 radio. One EC-JPAKE
245Result
Attack on key establishment
Protocol
JPAKE
JPAKE with our SP Proof
Proof
CoAP-PSK
CoAP-PKC
Attack on signature
Attack on signature
MQTT
Attack on signature
SigFox
LoRa
Proof
Table 5: Overview of DoS attack veriﬁcations.
Approach
One-way hash [44]
Cookie [1]
Time lock [40]
Client puzzle [31]
Our approach
Lightweight Hardness control Communication
O
O
X
O
O
X
X
O
O
O
O
X
O
X
O
Table 6: Comparison of DoS attack countermeasures.
force this step an unlimited number of times, this is a DoS at-
tack vulnerability. We deﬁne lemma DoS protection to verify
whether there are B Send actions without a legitimate sender
with veriﬁed signature. This lemma will be falsiﬁed if any
contradictory case is found. The lemma DoS protection guar-
antees that there is no such exhaustion in the rule Send back.
However, if we extend this to the rule Receive, where sig-
nature veriﬁcation is performed, this lemma will ﬁnd DoS
attacks.
The same approach can be applied to the other aforemen-
tioned protocols. We summarize the result of DoS vulnera-
bilities in Table 5.
6 OUR DOS COUNTERMEASURE
In this section, we propose our countermeasure against DoS
attacks for EC-JPAKE. Although EC-JPAKE is used as an
example, the countermeasure can be used generally in other
protocols since it does not rely on any internal parameters
of EC-JPAKE and uses standard AES/HMAC.
The intrinsic DoS weakness of EC-JPAKE comes from
the juggling and ZKP to hide the low-entropy shared pass-
word. Neither party can verify the legitimacy of the other
party without key establishment. EC-JPAKE is resistant to
oﬀ-line dictionary attacks since g(x1+x3+x4) and (x2 · s) are
random elements in group G (under the decisional Diﬃe-
Hellman assumption). Adversaries cannot distinguish be-
tween (x1 + x2 + x3) or (x1 + x3 + x4) under the discrete
logarithm assumption. The main challenge arises here since
the protocol must not leak any information on the password
before the key veriﬁcation. To rephrase, we cannot leverage
the shared password for DoS attack protection, otherwise we
will compromise the principle of the JPAKE design.
Challenge of existing countermeasures. As men-
tioned in Section 2, existing countermeasures pose drawbacks
in the IoT. The one-way hash function is lightweight, but
no longer secure in the event of a node compromise [44]; the
cookie approach is only secure against attacks from spoofed
Figure 9: EC-JPAKE protocol overview.
Operation Computation
Flight 1
Flight 2
Flight 3
Total computation 14 ex + 8 m 11.8 s 606.2 mJ
Including radio activities
Time Energy
3.3 s
169.3 mJ
366.0 mJ
7.1 s
1.3 s
70.9 mJ
4ex + 2m
8ex + 6m
2ex
20.5 s 1195.2 mJ
Table 4: Average EC-JPAKE overhead of Alice
on Openmote. Each EC-JPAKE session requires
20.5 seconds and consumes 1195.2 mJ (0.14 % of
a CR-2032 battery capacity).
handshake consumes 11.8 seconds for computation and 20.5
seconds with communication included. One handshake con-
sumes 1195.2 mJ, which is 0.14% of a new CR-2032 battery
capacity (see Table 4). Exploiting the fault-tolerant nature
of IoT devices, continuous false authentication requests can
deplete the device energy or can interfere with legitimate
operations.
Modelling DoS attacks. We now show how to model
such DoS attacks using the Tamarin prover. To the best of
our knowledge, this is the ﬁrst modelling of DoS attacks in
the IoT using a formal security veriﬁcation tool. We reuse the
SigFox PKC example here for its simplicity and because all
SigFox packets carry a signature. In rule Receive, we deﬁned
a state fact ST B 1(B, ltkB, pkA, A,na) that can be used in
later steps. Let us assume Bob’s return message is crypto-
graphically heavy (an ECDSA signature generation itself is
indeed heavy on Openmote. 4.1 seconds). If an adversary can
rule Send back:
1.[St B 1(B,ltkB, pkA, A,na, pkB),Fr(~nb)]--
2.[B Send(B,aenc(, pkB)),
DoS Protection(aenc(, pkB))]
3.->[Out(sign(,ltkB))]
lemma DoS protection:
”All m #i. DoS Protection(m) @i ==> (Ex A #j. Send(A,m)
@j & Honest(A)@j) | (Ex A #r. Reveal(A)@r & Hon-
est(A)@i& r<i)”
Figure 10: Our DoS attack veriﬁcation implementa-
tion.
Alice (Device)Bob (Server)(cid:1)1 ∈ (cid:2), (cid:3)1 = g(cid:1)1(cid:1)2 ∈ (cid:2), (cid:3)2 = g(cid:1)2(cid:3)1, (cid:3)2 ZKP for ((cid:1)1, (cid:1)2)Verify ZKP for ((cid:1)1, (cid:1)2)Verify if (cid:3)2  0(cid:1)3 ∈ (cid:2), (cid:3)3 = g(cid:1)3(cid:1)4 ∈ (cid:2), (cid:3)4 = g(cid:1)4(cid:3)5 = ((cid:3)1(cid:3)2(cid:3)3)(cid:1)4⋅s(cid:3)3, (cid:3)4,	(cid:3)5, ZKP for ((cid:1)3, (cid:1)4), ZKP for (cid:1)4⋅s Flight 1Flight 2Verify ZKP for ((cid:1)3, (cid:1)4)Verify if (cid:3)4  0(cid:3)6 = ((cid:3)1(cid:3)3(cid:3)4)(cid:1)2⋅sVerify ZKP for (cid:1)4⋅s K =(cid:3)4(cid:1)2⋅s(    )(cid:3)5(cid:1)2KA                = g((cid:1)1 + (cid:1)3)⋅(cid:1)2⋅(cid:1)4⋅s  Session key = h(KA)(cid:3)6, ZKP for (cid:1)2⋅sFlight 3Verify ZKP for (cid:1)2⋅s K =(cid:3)2(cid:1)4⋅s(    )(cid:3)6(cid:1)4KB= g((cid:1)1 + (cid:1)3)⋅(cid:1)2⋅(cid:1)4⋅s  Session key = h(KB)*ZKP : Zero-Knowledge Proof*s : pre-shared password 246IP addresses [1]. Time-lock puzzles can adaptively control
the hardness according to the adversary capability, but heavy
puzzle generation can be a pitfall on constrained IoT de-
vices [40]. As observed in Table 3, radio activities consume as
much energy as cryptographic computations. Since computa-
tion and communication are at a premium in the majority of
IoT applications, causing excessive packets by client puzzles
can be a pitfall too. In particular, in low-power multi-hop net-
works such as 802.15.4 [17], where the MTU is 127B, packet
fragmentation can cause more issues. To avoid this, much
eﬀort has been invested in outsourcing puzzle generation [46],
but it remains a challenge in practice. As shown in Table 6,
the majority of IoT protocols are vulnerable to DoS attacks.
6.1 Our Approach
One beneﬁt of our DoS modelling is that it can detect ex-
actly which step of the protocol is vulnerable. Our proposed
countermeasure is lightweight for issuing and verifcation, and
the issuer (device) can set the exact hardness adaptively
according to the adversary capability. We propose to use an
AES-brute-force-based server puzzle (SP) that can dynami-
cally adjust the hardness in case of consecutive DoS attack
attempts and advanced adversaries. We further use the cookie
approach as an option to defend against DoS attack based
on IP spooﬁng. Our server puzzle is similar to the traditional
hash-inversion-based client puzzle, but we base it on AES
encryption.
Puzzle construction. Our construction is similar to
Propagating Cipher Block Chaining (PCBC), but we use
multiple keys to generate the next plain text. At a high level,
SP consists mainly of k-bits AES brute force problems, where
k-bits control the base hardness. Similar to a client puzzle’s
sub-puzzle structure, we use i-round block-chain-style sub-
puzzles for accurate hardness control. This is due to the
exponential hardness increment of the brute force problem.
For instance, an 35-bit AES-128 brute force problem required
an average 117 minutes to solve, while 36-bit required an
average of 940 minutes (measured on a moderately strong
laptop with Intel i-5, 4-core, 3.2 GHz clock, 4GB memory,
and no background processes, NIST Known Answer Test
(KAT) vectors [18]).
The ﬁrst puzzle starts with i=0 and increases the number
of rounds or k bits upon consecutive requests or advanced
adversaries. The ﬁrst plain text (P0) is generated by concate-
nating the request (R), the current time (T ), and a random
vector (RV ∈ {0, 1}∗) as padding. Here, we use the notation