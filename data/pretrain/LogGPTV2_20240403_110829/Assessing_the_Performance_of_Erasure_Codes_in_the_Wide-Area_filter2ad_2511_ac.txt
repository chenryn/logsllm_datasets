the impact of these subtleties on download performance.
12
80
60
s
p
b
M
40
20
80
60
s
p
b
M
40
20
Reed-Solomon
LDPC
80
60
s
p
b
M
40
20
Reed-Solomon
LDPC
Reed-Solomon
LDPC
0
0
20
60
40
N (and M)
Hodgepodge
80
100
0
0
20
60
40
N (and M)
Regional
80
100
0
0
20
80
100
60
40
N (and M)
Slow Regional
Figure 6. Reed-Solomon vs. LDPC coding (performance including both download and decoding times)
6.2 The Trade-off between Download and Decode
The best performing instances of Reed-Solomon and LDPC coding are shown in Figure 6. LDPC coding
performs no better than, and in some cases much worse than Reed-Solomon coding when n is less than 50;
however, when n is greater than 50, LDPC coding vastly outperforms Reed-Solomon coding. As n increases
past 20, the performance of Reed-Solomon coding steadily declines, while the performance of LDPC coding
tends to improve, as in the hodgepodge distribution, or level off, as in the regional distribution. The fact that
the hodgepodge distribution is able to improve as the size of the set increases while the regional distribution
is not reinforces the observation from section 5.4 that the lack of topographical relationship between the
blocks in the hodgepodge distribution allows this distribution to take advantage of the fast servers without
being penalized for regional interference between servers. Concerning the best overall performance, the best
data point over all set sizes in the hodgepodge distribution occurs at n = m = 100 for LDPC coding, while
in both the regional and the slow regional distributions, Reed-Solomon achieves the best data point over all
at n = m = 5 and n = m = 10, respectively.
When judging the merits of either type of coding scheme in this particular application, it is important to
remember that any size set can scale to arbitrarily large ﬁles without incurring additional overhead per set.
In general, given an application and a choice between Reed-Solomon or LDPC coding it is probably best to
choose the scheme and set n,m that:
(cid:15) Is able to scale in the future along with the application.
(cid:15) Does not exceed physical storage limitations.
13
Table 4. Block Preferences
Distribution n; m
Slow Regional 5,5
Slow Regional 10,10
Slow Regional 20,20
Slow Regional 50,50
Slow Regional 100,100
Hodgepodge 5,5
Hodgepodge 10,10
Hodgepodge 20,20
Hodgepodge 50,50
Hodgepodge 100,100
Regional 5,5
Regional 10,10
Regional 20,20
Regional 50,50
Regional 100,100
LDPC preference RS preference
dont-care
dont-care
dont-care
db-ﬁrst
dont-care
dont-care
dont-care
dont-care
db-ﬁrst
dont-care
db-ﬁrst
db-ﬁrst
db-ﬁrst
db-ﬁrst
db-ﬁrst
dont-care
dont-care
dont-care
dont-care
dont-care
dont-care
dont-care
dont-care
db-ﬁrst
db-ﬁrst
db-ﬁrst
db-ﬁrst
dont-care
db-ﬁrst
db-ﬁrst
(cid:15) Meets desired levels of fault tolerance; note that Reed-Solomon coding has stronger guarantees than
LDPC coding in this respect.
(cid:15) Satisﬁes each of the three previous criteria with the best performance where performance consists of
both download time and decoding time.
6.3 Block Preferences
In these experiments, blocks can be downloaded selectively based on their type. Data blocks are gen-
erally preferable to check blocks since fewer data blocks require less decoding, but when check blocks are
much closer than data blocks, sometimes the advantage of getting close blocks is worth the decoding penalty.
Table 4 shows which block preference algorithm is used in the best performing instances of the codes over
the three distributions. A trade-off between download time and decoding time is apparent: the dont-care
algorithm is favored in the Slow Regional distribution and in the Hodgepodge distribution, since the penalty
of retrieving slow blocks is greater than the computational cost of decoding. In the Regional distribution, the
db-ﬁrst algorithm is favored — since the majority of blocks are closer to the server, the penalty for selecting
blocks that require no decoding is small. In addition, when n (cid:21) 50 (i.e., the decoding time is greater), the
db-ﬁrst algorithm is slightly favored. To illustrate this trade-off further, Figures 7 and 8 show the total time
14
Reed-Solomon
LDPC
60
40
20
i
e
m
T
d
a
o
l
n
w
o
D
l
a
t
o
T
Reed-Solomon
LDPC
60
40
20
60
40
20
i
e
m
T
d
a
o
l
n
w
o
D
l
a
t
o
T
i
e
m
T
d
a
o
l
n
w
o
D
l
a
t
o
T
0
0
20
60
40
N (and M)
Hodgepodge
80
100
0
0
20
60
40
N (and M)
Regional
80
100
0
0
20
Reed-Solomon
LDPC
80
100
60
40
N (and M)
Slow Regional
Figure 7. Total Download Time (beginning of ﬁrst IBP load to ending of last) in Best Performances
i
)
s
(
e
m
T
g