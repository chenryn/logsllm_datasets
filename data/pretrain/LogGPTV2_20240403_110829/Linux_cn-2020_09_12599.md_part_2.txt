$ nmcli connection down ethernet-enp0s8
Connection 'ethernet-enp0s8' successfully deactivated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/4)
$ nmcli connection up ethernet-enp0s8
Connection successfully activated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/6)
```
假如你想将连接设置为使用 DHCP，则需要将上面的 `manual` 改为 `auto`（自动）：
```
$ nmcli connection modify ethernet-enp0s8 ipv4.method auto
```
### 设备管理
`nmcli` 命令中的 `device` 子命令允许你管理安装在你电脑中的网络接口。
#### 检查设备状态
可以使用下面的命令来快速检查所有网络接口的状态：
```
$ nmcli device status
DEVICE  TYPE      STATE      CONNECTION        
enp0s3  ethernet  connected  Wired connection 1
enp0s8  ethernet  connected  ethernet-enp0s8    
enp0s9  ethernet  connected  Wired connection 3
lo      loopback  unmanaged  --  
```
#### 显示设备详情
为了检查某个网络接口的详情，可以使用 `device` 子命令中的 `show` 操作。假如你不提供某个设备的名称，那么会获取并展示所有设备的详情。你可以上下翻动来查看这些信息。
要查看你最近添加的连接所对应的设备 `enp0s8`，你可以使用下面的命令，请注意验证它使用的 IP 地址是否为先前你要求设置的那个：
```
$ nmcli device show enp0s8
GENERAL.DEVICE:                         enp0s8
GENERAL.TYPE:                           ethernet
GENERAL.HWADDR:                         08:00:27:81:16:20
GENERAL.MTU:                            1500
GENERAL.STATE:                          100 (connected)
GENERAL.CONNECTION:                     ethernet-enp0s8
GENERAL.CON-PATH:                       /org/freedesktop/NetworkManager/ActiveConnection/6
WIRED-PROPERTIES.CARRIER:               on
IP4.ADDRESS[1]:                         192.168.4.26/24
IP4.GATEWAY:                            --
IP4.ROUTE[1]:                           dst = 192.168.4.0/24, nh = 0.0.0.0, mt = 103
IP6.ADDRESS[1]:                         fe80::6d70:90de:cb83:4491/64
IP6.GATEWAY:                            --
IP6.ROUTE[1]:                           dst = fe80::/64, nh = ::, mt = 103
IP6.ROUTE[2]:                           dst = ff00::/8, nh = ::, mt = 256, table=255
```
上面的输出非常细致，它主要显示了下面这些内容：
* **网络接口名称**，在这个示例中是 `enp0s8`，它是 [udev](https://en.wikipedia.org/wiki/Udev) 分配的
* **网络连接类型**，在这个示例中是物理的 Ethernet 连接
* 设备的 媒介访问控制   media access control （MAC）地址，它被用来在网络中识别该设备
* [最大传输单元](https://en.wikipedia.org/wiki/Maximum_transmission_unit)，在单个传输中最大协议数据单位的大小，任何大于这个大小的数据将被分为多个包来进行传输
* 该设备**当前已经处于连接状态**
* 这个设备使用的连接名称是 `ethernet-enp0s8`
* 这个设备使用的 IP 地址如上面所要求的那样，被设置为 `192.168.4.26/24`
其他的信息则是与这个设备连接的网络相关的默认路由和网关设置信息。
#### nmcli 的交互式编辑器
尽管 `nmcli` 是一个命令行工具，但它还包含一个基本的交互式编辑器，`edit` 子命令将为你指定的连接打开一个交互式编辑器，例如：
```
$ nmcli connection edit ethernet-enp0s8
```
它将显示少量的帮助文字，接着是 `nmcli` 的命令提示符：
```
===| nmcli interactive connection editor |===
Editing existing '802-3-ethernet' connection: 'ethernet-enp0s8'
Type 'help' or '?' for available commands.
Type 'print' to show all the connection properties.
Type 'describe [.]' for detailed property description.
You may edit the following settings: connection, 802-3-ethernet (ethernet), 802-1x, dcb, sriov, ethtool, match, ipv4, ipv6, tc, proxy
nmcli>
```
假如你输入 `print` 然后敲击 `Enter` 键， `nmcli` 将列举出与这个接口相关的所有属性。这些属性有很多，你可以上下翻动来查看这个列表：
```
===============================================================================
                 Connection profile details (ethernet-enp0s8)
===============================================================================
connection.id:                          ethernet-enp0s8
connection.uuid:                        09d26960-25a0-440f-8b20-c684d7adc2f5
connection.stable-id:                   --
connection.type:                        802-3-ethernet
connection.interface-name:              enp0s8
connection.autoconnect:                 yes
connection.autoconnect-priority:        0
connection.autoconnect-retries:         -1 (default)
connection.multi-connect:               0 (default)
connection.auth-retries:                -1
connection.timestamp:                   1593967212
connection.read-only:                   no
connection.permissions:                 --
connection.zone:                        --
connection.master:                      --
connection.slave-type:                  --
connection.autoconnect-slaves:          -1 (default)
connection.secondaries:                 --
```
如果你想将你的连接改为 DHCP，则请输入 `goto ipv4` 然后敲 `Enter` 键：
```
nmcli> goto ipv4
You may edit the following properties: method, dns, dns-search, dns-options, dns-priority, addresses, gateway, routes, route-metric, route-table, routing-rules, ignore-auto-routes, ignore-auto-dns, dhcp-client-id, dhcp-iaid, dhcp-timeout, dhcp-send-hostname, dhcp-hostname, dhcp-fqdn, dhcp-hostname-flags, never-default, may-fail, dad-timeout
nmcli ipv4>
```
你想改变的属性是 `method`，再继续敲 `set method auto` 然后敲 `Enter` 键：
```
nmcli ipv4> set method auto
Do you also want to clear 'ipv4.addresses'? [yes]:
```
假如你想让这个连接清除掉这个静态 IP 地址，则请敲 `Enter` 键，如果要保留，则输入 `no` 然后敲 `Enter` 键。假如你想在将来再次使用它，你可以保留这个 IP 地址。即便存储了一个静态的 IP 地址，如果 `method` 被设置为 `auto` ，它仍然会使用 DHCP。
最后输入 `save` 来保存你的更改：
```
nmcli ipv4> save
Connection 'ethernet-enp0s8' (09d26960-25a0-440f-8b20-c684d7adc2f5) successfully updated.
nmcli ipv4>
```
输入 `quit` 来离开 `nmcli` 的交互式编辑器窗口。假如你不想离开，可以输入 `back` 来回到最开始的命令行提示符界面，然后继续使用这个编辑器。
### nmcli 的更多内容
浏览交互式编辑器，你就可以看到 `nmcli` 有多少设定和每个设定有多少属性。交互式编辑器是一个简洁的工具，但如果需要在命令行或者在脚本中使用 `nmcli`，你还是需要使用常规的命令行版本。
现在你有了这些基础知识，你还可以查看 `nmcli` 的 [man 页面](https://developer.gnome.org/NetworkManager/stable/nmcli.html) 来查看它还可以提供什么更多功能。
---
via: 
作者：[Dave McKay](https://opensource.com/users/davemckay) 选题：[lujun9972](https://github.com/lujun9972) 译者：[FSSLC](https://github.com/FSSlc) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出