### 优化后的文本

#### 类和字段描述
```plaintext
$class
    CF$UID
    7
NS.base
    CF$UID
    0
NS.relative
    CF$UID
    6
http://www.google.com
$classes
    NSURL
    NSObject
$classname
    NSURL
```

`NS.base` 和 `NS.relative` 字段用于构造 `NSURL` 实例。`NS.relative` 字段引用字符串 `http://www.google.com`，表示 URL 的位置。字典中的 `$classes` 和 `$classname` 字段描述了实例的类，这些类由第一个字典的 `$class` 字段引用。在反序列化此实例时，解码器将调用 `[NSURL initWithCoder:]` 方法，该方法会反序列化 `NS.base` 和 `NS.relative` 字段，并使用它们初始化 `NSURL`。

`NSKeyedArchiver` 可以序列化或反序列化任何实现了 `initWithCoder:` 的 Objective-C 类。它还具有名为 `NSSecureCoding` 的安全功能，允许开发人员限制解码的内容。

首先，实现 `initWithCoder:` 的类还必须实现 `requiresSecureCoding`，以便在启用 `NSSecureCoding` 时启用反序列化。这可以防止开发人员在安全上下文中意外暴露反序列化代码。其次，`NSSecureCoding` 要求所有反序列化调用提供一个允许反序列化的类列表，并且不允许其他类。然而，允许的类列表并不一定是序列化期间可以调用 `initWithCoder:` 方法的完整列表。

例如，`[NSURL initWithCoder:]` 的伪代码如下：
```objc
- (instancetype)initWithCoder:(NSCoder *)decoder {
    NSData *bookmark = [decoder decodeObjectOfClass:[NSData class] forKey:@"NS.minimalBookmarkData"];
    if (bookmark) {
        return [self URLByResolvingBookmarkData:bookmark];
    }
    NSString *base = [decoder decodeObjectOfClass:[NSString class] forKey:@"NS.base"];
    NSString *relative = [decoder decodeObjectOfClass:[NSString class] forKey:@"NS.relative"];
    return [NSURL URLWithString:base relativeToURL:relative];
}
```
对于非书签的 URL，该方法需要为 `NS.relative` 和 `NS.base` 字段反序列化 `NSString` 的实例，并且在反序列化中允许 `NSString` 类。如果序列化数据包含 `NS.minimalBookmarkData` 字段，则会反序列化 `NSData` 的实例。尽管限制了反序列化的类，但这并不完全限制攻击面，但仍然减少了攻击面。

有几种方法可以创建 `NSKeyedUnarchiver` 实例或反序列化对象，默认情况下并非所有方法都启用了 `NSSecureCoding`。默认启用 `NSSecureCoding` 的方法包括：
- `initForReadingFromData:unarchivedObjectOfClasses:fromData:error:`

而以下方法则没有启用：
- `initWithData:`
- `unarchiveObjectWithData:error:`
- `initForReadingWithData:`

这些方法的名字并没有明确表明是否启用了 `NSSecureCoding`，特别是 `initForReadingFromData:` 和 `initForReadingWithData:`。我们首次尝试查找漏洞是在 iMessage 中寻找一个未启用 `NSSecureCoding` 的地方，希望能够利用它来反序列化 `WebKit` 实例，并找到一种加载包含 `WebKit` 漏洞的网页的方法。不幸的是，我们在未启用 `NSSecureCoding` 的地方没有发现任何反序列化。

接下来，我们研究了扩展。扩展是一个相对较新的功能，因此我们希望找到扩展如何处理 `bp` 字段中的序列化数据的错误。有时可以在没有用户交互的情况下执行该处理。扩展程序可以支持预览，在这种情况下，`SpringBoard` 会在扩展程序中调用 `previewSummary` 而无需用户交互。某些版本的 iOS 还通过调用 `initWithPluginPayload` 来处理整个输入，但每个版本上并不一致。这种情况在测试版本 `12.1.2` 中出现，但在更高版本中不存在。

我们在 `Digital Touch` 扩展程序中发现了一个漏洞（CVE-2019-8624），该扩展允许用户发送包含绘图和其他可视元素的消息。扩展允许使用自定义编码，只要它们通知 `SpringBoard` 不尝试解码 `bp` 字段。`Digital Touch` 使用 `protobuf` 解码其有效负载。它解码了几个字节数组，并且有一种情况是，在复制之前错误地检查字节数组的长度，从而导致越界读取。这个问题很可能无法被利用，但产生 bug 的路径很有趣。

`Link Presentation` 扩展显示在消息中发送链接时的链接预览。它的工作原理是在发件人设备上加载 `WebKit` 中的链接，生成预览文本和图像，然后将其发送到目标设备。我们详细分析了这个扩展，寻找在接收设备上生成 `WebKit` 实例的方法，但没有找到。`WebKit` 处理似乎总是由发件人完成。

然后我们决定在 `initWithCoder` 中查找漏洞，`SpringBoard` 在生成消息预览时允许反序列化的类的方法。Ian Beer 发现了几种类型的问题，允许权限提升。

`SpringBoard` 解码 `bp` 字段时允许的类包括：`NSDictionary`、`NSString`、`NSData`、`NSNumber`、`NSURL`、`NSUUID` 和 `NSValue`。还允许这些类的所有子类。我们回顾了 `initWithCoder:` 的这些类及其子类的实现。该分析发现了三个漏洞：

1. **CVE-2019-8663**：反序列化 `SGBigUTF8String` 类（`NSString` 的子类）的漏洞。这个类的 `initWithCoder:` 实现反序列化一个字节数组，然后将其视为以 null 结尾的 UTF-8 字符串，即使它可能没有 null。这可能导致创建一个包含越界内存的字符串。

2. **CVE-2019-8661**：`[NSURL initWithCoder:]` 中的漏洞，仅影响 Mac。当反序列化 URL 时，通常会解码 `NSString` 的实例，但也可以对 `NSData` 实例进行反序列化，然后将其视为书签。仅在 Mac 上，此书签可能采用 `alis` 格式（已弃用）。此格式由 `CarbonCore` 框架处理，该框架使用许多不安全的字符串处理函数来处理别名文件。该漏洞是由于对 `strcat` 的不安全调用导致的堆内存破坏引起的。值得注意的是，`iMessage` 永远不会合法使用此书签功能。它存在是因为 `NSURL` 反序列化在整个系统中是通用的，因此 `initWithCoder` 实现必须支持所有输入可能性，甚至是在特定攻击面上永远不会遇到的可能性。