目标：利用dl_resolve执行libc内任意gadget（不需泄露libc地址）  
实验代码下载地址：  
分析：0CTF的题目blackhole2，很简单的栈溢出，但是远程不允许回显，所以不能泄露libc_base，不能返回shell。程序本身所含有的gadget有限，所以能不能不泄露libc_base就能使用libc中任意地址的gadget呢？  
再构造ROP，读取flag，根据爆破flag。
* * *
## 1.dl_resolve原理——不用泄露地址
#### （1）节表认识
查看节表命令：`readelf -d bof` `readelf -S bof`
查看JMPREL（.rel.plt）：`readelf -r bof`
查看SYMTAB（.dynsym）：`readelf -s bof`
STRTAB——.dynstr 存字符串
SYMTAB——.dynsym 存动态链接符号表，结构如下Elf32_Sym：
JMPREL——.rel.plt 函数重定位
存Elf32_Rel{r_offset+r_info}（r_offset指向got表(.got.plt节全局函数偏移表)地址，r_info存偏移——第几个，根据r_info来找这个函数在.dynsym中是第几个）
REL—— .rel.dyn 变量重定位
PLTGOT—— .got.plt 常说的GOT表
.plt节 过程链接表，每个函数占0x10字节。过程链接表把位置独立的函数调用重定向到绝对位置。
    typedef uint32_t Elf32_Addr;
        typedef uint32_t Elf32_Word;
        typedef struct
        {
            Elf32_Word st_name;     // Symbol name(string tbl index)  表示在.dynstr中的偏移
            Elf32_Addr st_value;    // Symbol value
            Elf32_Word st_size;     // Symbol size
            unsigned char st_info;  // Symbol type and binding
            unsigned char st_other; // Symbol visibility under glibc>=2.2
            Elf32_Section st_shndx; // Section index
        } Elf32_Sym;
    typedef struct {
            Elf32_Addr r_offset;    // 对于可执行文件，此值为虚拟地址
            Elf32_Word r_info;      // 符号表索引,  r_info高8位表示index，低8位表示条目类型
        } Elf32_Rel;
        #define ELF32_R_SYM(info) ((info)>>8)
        #define ELF32_R_TYPE(info) ((unsigned char)(info))
        #define ELF32_R_INFO(sym, type) (((sym):        jmp    DWORD PTR ds:0x804970c
           0x80482f6 :      push   0x0
           0x80482fb :     jmp    0x80482e0   #跳到.plt开头！！
        gdb-peda$ x/wx 0x804970c   #got表
           0x804970c :       0x080482f6
        gdb-peda$ x/2i 0x80482e0   #plt[0]，plt开头
           0x80482e0:   push   DWORD PTR ds:0x8049704  
           0x80482e6:   jmp    DWORD PTR ds:0x8049708
（1）jmp
PI:EMAIL会跳回read@plt，将read的重定位偏移（在.rel.plt也就是JMPREL（存{r_offset(指向got表)+r_info}）中的偏移）压栈，跳到plt[0]也即plt（.plt—plt表，jmp那一块儿）开头（0x80482e0正好和read位置0x80482f0相差0x10），再将(.got.plt+4)（GOT[1]—got表，链接器的标识信息）压栈并跳到(.got.plt+0x8)（GOT[2]动态连接器中的入口点），相当于调用以下函数：
`_dl_runtime_resolve(link_map,
rel_offset);`（link_map—got[4]，rel_offset—JMPREL节，函数地址是got[8]）。
`_dl_runtime_resolve`会完成具体解析、填充结果和调用的工作。(即将真实的write函数地址写入其GOT条目中，随后把控制权交给write函数。)
（2）根据rel_offset找到重定位条目JMPREL（8字节）：
`Elf32_Rel * rel_entry = JMPREL + rel_offset;`
（3）再根据rel_entry中的符号表条目编号，得到对应符号信息结构SYMTAB（16字节）：
`Elf32_Sym *sym_entry = SYMTAB[ELF32_R_SYM(rel_entry->r_info)];`
（4）再找到符号名称。STRTAB
`char *sym_name = STRTAB + sym_entry->st_name;`
（5）最后，根据名称，搜索动态库。找到地址后，填充到.got.plt对应位置，最后调整栈，调用这一解析得到的函数。
#### （3）_dl_fixup函数流程
源码，_dl_fixup是在glibc-2.23/elf/dl-runtime.c实现（dl_runtime_resolve函数内部调用了dl_fixup）：
    59  DL_FIXUP_VALUE_TYPE
        60  attribute_hidden __attribute ((noinline)) ARCH_FIXUP_ATTRIBUTE
        61  _dl_fixup (
        62  # ifdef ELF_MACHINE_RUNTIME_FIXUP_ARGS
        63             ELF_MACHINE_RUNTIME_FIXUP_ARGS,
        64  # endif
        65             struct link_map *l, ElfW(Word) reloc_arg)
        66  {
        67    const ElfW(Sym) *const symtab
        68      = (const void *) D_PTR (l, l_info[DT_SYMTAB]);
        69    const char *strtab = (const void *) D_PTR (l, l_info[DT_STRTAB]);
        70  // 1.首先通过参数reloc_arg计算重定位入口，这里的JMPREL即.rel.plt，reloc_offset即reloc_arg
        71    const PLTREL *const reloc
        72      = (const void *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);
            // 2.然后通过reloc->r_info找到.dynsym中对应的条目
        73    const ElfW(Sym) *sym = &symtab[ELFW(R_SYM) (reloc->r_info)];
        74    const ElfW(Sym) *refsym = sym;
        75    void *const rel_addr = (void *)(l->l_addr + reloc->r_offset);
        76    lookup_t result;
        77    DL_FIXUP_VALUE_TYPE value;
        78  
        79    /* Sanity check that we're really looking at a PLT relocation.  */
            // 3.这里还会检查reloc->r_info的最低位是不是R_386_JUMP_SLOT=7
        80    assert (ELFW(R_TYPE)(reloc->r_info) == ELF_MACHINE_JMP_SLOT);
        81  
        82     /* Look up the target symbol.  If the normal lookup rules are not
        83        used don't look in the global scope.  */
        84    if (__builtin_expect (ELFW(ST_VISIBILITY) (sym->st_other), 0) == 0)
        85      {
        86        const struct r_found_version *version = NULL;
        87  
        88        if (l->l_info[VERSYMIDX (DT_VERSYM)] != NULL)
        89          {
        90            const ElfW(Half) *vernum =
        91              (const void *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);
        92            ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc->r_info)] & 0x7fff;
        93            version = &l->l_versions[ndx];
        94            if (version->hash == 0)
        95              version = NULL;
        96          }
        97  
        98        /* We need to keep the scope around so do some locking.  This is
        99           not necessary for objects which cannot be unloaded or when
        100          we are not using any threads (yet).  */
        101       int flags = DL_LOOKUP_ADD_DEPENDENCY;
        102       if (!RTLD_SINGLE_THREAD_P)
        103         {
        104           THREAD_GSCOPE_SET_FLAG ();
        105           flags |= DL_LOOKUP_GSCOPE_LOCK;
        106         }
        107 
        108 #ifdef RTLD_ENABLE_FOREIGN_CALL
        109       RTLD_ENABLE_FOREIGN_CALL;
        110 #endif
        111 // 4.接着通过strtab+sym->st_name找到符号表字符串，result为libc基地址
        112       result = _dl_lookup_symbol_x (strtab + sym->st_name, l, &sym, l->l_scope,
        113                                     version, ELF_RTYPE_CLASS_PLT, flags, NULL);
        114 
        115       /* We are done with the global scope.  */
        116       if (!RTLD_SINGLE_THREAD_P)
        117         THREAD_GSCOPE_RESET_FLAG ();
        118 
        119 #ifdef RTLD_FINALIZE_FOREIGN_CALL
        120       RTLD_FINALIZE_FOREIGN_CALL;
        121 #endif
        122 
        123       /* Currently result contains the base load address (or link map)
        124          of the object that defines sym.  Now add in the symbol
        125          offset.  */
            // 5.value为libc基址加上要解析函数的偏移地址，也即实际地址
        126       value = DL_FIXUP_MAKE_VALUE (result,
        127                                    SYMBOL_ADDRESS (result, sym, false));
        128     }
        129   else
        130     {
        131       /* We already found the symbol.  The module (and therefore its load
        132          address) is also known.  */
        133       value = DL_FIXUP_MAKE_VALUE (l, SYMBOL_ADDRESS (l, sym, true));
        134       result = l;
        135     }
        136 
        137   /* And now perhaps the relocation addend.  */
        138   value = elf_machine_plt_value (l, reloc, value);
        139 
        140   if (sym != NULL
        141       && __builtin_expect (ELFW(ST_TYPE) (sym->st_info) == STT_GNU_IFUNC, 0))
        142     value = elf_ifunc_invoke (DL_FIXUP_VALUE_ADDR (value));
        143 
        144   /* Finally, fix up the plt itself.  */
        145   if (__glibc_unlikely (GLRO(dl_bind_not)))
        146     return value;
        147 // 6.最后把value写入相应的GOT表条目中
        148   return elf_machine_fixup_plt (l, result, refsym, sym, reloc, rel_addr, value);
        149 }
主要流程如下：
    _dl_fixup(struct link_map *l, ElfW(Word) reloc_arg)
        {
            // 1.首先通过参数reloc_arg计算重定位入口，这里的JMPREL即.rel.plt，reloc_offset即reloc_arg
            const PLTREL *const reloc = (const void *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);
            // 2.然后通过reloc->r_info找到.dynsym中对应的条目
            const ElfW(Sym) *sym = &symtab[ELFW(R_SYM) (reloc->r_info)];
            // 3.这里还会检查reloc->r_info的最低位是不是R_386_JUMP_SLOT=7
            assert (ELFW(R_TYPE)(reloc->r_info) == ELF_MACHINE_JMP_SLOT);
            // 4.接着通过strtab+sym->st_name找到符号表字符串，result为libc基地址
            result = _dl_lookup_symbol_x (strtab + sym->st_name, l, &sym, l->l_scope, version, ELF_RTYPE_CLASS_PLT, flags, NULL);
            // 5.value为libc基址加上要解析函数的偏移地址，也即实际地址
            value = DL_FIXUP_MAKE_VALUE (result, sym ? (LOOKUP_VALUE_ADDRESS (result) + sym->st_value) : 0);
            // 6.最后把value写入相应的GOT表条目中
            return elf_machine_fixup_plt (l, result, reloc, rel_addr, value);
        }
#### （4）利用libc中的gadget
可以在源码中看到，在第3步之后，当.dynsym节中Elf32_Sym结构的st_other值为非0时，会进入另一个不常见的分支，最终跳到（l->l_addr+sym->st_value）。
    /* Look up the target symbol.  If the normal lookup rules are not
                  used don't look in the global scope.  */
        if (__builtin_expect (ELFW(ST_VISIBILITY) (sym->st_other), 0) == 0)
        {
        }
        else
        {
            /* We already found the symbol.  The module (and therefore its load
              address) is also known.  */
            value = DL_FIXUP_MAKE_VALUE (l, l->l_addr+sym->st_value);
            result = l;
        }
说明：l是link_map结构，link_map结构第一个变量就是l_addr。（应该没有检查，伪造的话）。以下是解析read地址时跳到got[8]时的link_map结构，可见l_addr==0：
利用方法：
  1. 可以伪造link_map结构。
  2. 使l_addr或st_value其中之一恰好落到某个地址解析已完成的GOT表处，另一个变量设置为可控偏移。
  3. 这样就能跳到libc中任意地址（libc_func+offset）。
  4. 我们可以利用libc中任意gadget。
* * *
## 2\. 32位dl_resolve
#### （1）32位dl_resolve构造模板
参见代码stage6_original.py
漏洞代码：
    #include 
        #include 
        #include 
        void vuln()
        {
            char buf[100];
            setbuf(stdin, buf);
            read(0, buf, 256);
        }
        int main()
        {
            char buf[100] = "Welcome to XDCTF2015~!\n";
            setbuf(stdout, buf);
            write(1, buf, strlen(buf));
            vuln();
            return 0;
        }
利用步骤：
  1. 控制eip为PLT[0]的地址，只需传递一个index_arg参数
  2. 控制index_arg的大小，使reloc的位置落在可控地址内
  3. 伪造reloc的内容，使sym落在可控地址内
  4. 伪造sym的内容，使name落在可控地址内
  5. 伪造name为任意库函数，如system
**利用第一阶段：**
把rop写入bss段，劫持栈并跳转过去。
    #!/usr/bin/python
        from pwn import *
        elf = ELF('bof')
        offset = 112
        read_plt = elf.plt['read']