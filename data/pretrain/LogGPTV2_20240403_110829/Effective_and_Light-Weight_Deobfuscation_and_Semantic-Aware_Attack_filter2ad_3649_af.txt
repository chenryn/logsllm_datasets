subtree and train the obfuscated detector. The deobfuscated script
can be used with existing static detection systems, such as [26], for
better detection results.
7.2 Possible Evasion Attacks
Anti-debugging. Anti-debugging is a common approach for mal-
ware to evade detection [23, 57, 69]. The primary methods include
“logic bombs”, “time bombs”, etc., which means that the obfuscated
scripts will only be recovered at specific branches. More advanced
methods may involve a machine-specific value, or an online value
can only be acquired at a specific time as the decryption key, which
means that the scripts can only be recovered on the particular ma-
chine or at a specific moment. These methods work for all offline
analysis approaches, no matter they are dynamic or static. For the
primary methods, static approaches, including our approach, can
achieve better results than dynamic ones by traversing all branches.
For the more advanced methods, the only chance is to capture script
behaviours during the attack time, and thus our approach cannot
work. However, advanced anti-debugging methods significantly in-
crease the cost of the attack. Therefore, we believe that such attacks
are only likely to occur in attacks on high-value targets. For these
high-value targets, it is necessary to apply more strict execution
strategies and early review of scripts.
Logical obfuscation. In this paper, we mainly focus on string-
based obfuscation (listed in §2), which regards the scripts or script
pieces as strings and obfuscate them. Logical obfuscation is another
type of obfuscation targeted at disrupting the control flow and
the data flow. Recovery of such obfuscation is orthogonal to that
of string-based obfuscations [61] and thus is not covered in this
paper. Actually, it is difficult to recover control flow and data flow
only through static analysis [25, 67]. However, since PowerShell’s
functions and commands themselves contain enough semantic for
detection or analysis, it is highly difficult for logical obfuscation
alone to evade our detection.
8 RELATED WORK
8.1 Script-based Malware Detection
As shown in Table 9, the malware detection methods for scripting
languages can be divided into three categories.
Dynamic detection. Cova et al. present a system JSAND [25],
where suspicious scripts are further analyzed with the emulator
Table 9: Comparison of script-based malware detection
methods
Light-
weight
no
yes
yes
yes
True
Positive
high
low
low
high
True
Negative
Semantic
Awareness
Anti-
obfuscation
high
high
low
high
yes
no
no
yes
yes
no
yes
yes
Dynamic det.
Static det.
Obfuscation det.
Our approach
to collect runtime characteristics. Rieck et al. [51] describe Cujo,
which combines static and dynamic features in a classifier based on
support vector machines and extract Q-gram of tokens as signatures.
The common disadvantages of dynamic methods are that they bring
extra runtime overhead and thus are inefficient.
Static detection. Canali et al. [20] present Prophiler, which em-
ploys multi-layer features to quickly filter non-malicious web pages.
Curtsinger et al. propose ZOZZLE [26], a mostly static approach,
leverage AST for fast signature matching. Similar approaches are
also employed in PowerShell detection. [32] leverage deep learn-
ing at characters level for malicious classification. Similarly, [53]
uses features extracted from AST. These studies are not resistant
to obfuscation and thus are not accurate enough . Our automatic
deobfuscation approach can potentially increase the accuracy of
such techniques by exposing the actual logic of the code.
Obfuscation detection. To overcome the effect of obfuscation,
researchers propose to use detection obfuscation instead of detect-
ing malicious scripts. [14, 35, 38] extract features from different
level for obfuscation detection in JavaScript. The closest work is
proposed by Bohannon [17], which extracted 4098 features for Pow-
erShell obfuscation detection. However, such approaches assume
that all obfuscated scripts are also malicious. This assumption is
too strong and will bring a lot of false positives. Besides, these
approaches focus only on the obfuscation detection of entire scripts
which may be bypassed by partial obfuscation.
8.2 Deobfuscation Approaches
Deobfuscation for binary. Obfuscation techniques, especially
run-time packers, have been widely used by malware authors for
a long time as a means of evading static detection. The security
community proposed many different solutions to detect and clas-
sify packing techniques. Accurate identification of packing is the
first step towards solving the packing problem. Signature-based
approaches [46, 58] searching for unique patterns of known packers
in executable files. However, such methods fail to detect new pack-
ers. To deal with unknown packers, researchers [34, 47, 49, 62, 63]
employ multiple features for obfuscation detection. We employ a
similar method to locate obfuscation at AST subtrees level, which
is fine-grained and makes our system more flexible.
Automatic unpacking relies on the observation that hidden code
is naturally revealed and then executed for the majority of packed
malware. Thus, different approaches are proposed to determine
the right moment to dump the hidden code [61]. These approaches
[27, 37, 44, 52] focus on different techniques for monitoring the
execution of binary. These dynamic approaches suffer from high
overhead and low program coverage. Nevertheless, a few static
and hybrid approaches are proposed. Coogan et al. [23] propose to
locate the transition point with control flow and alias analysis and
extract unpacking logic with backward slicing. Caballero et al. [19]
propose a hybrid approach to extract self-contained transformation
functions. However, because of the different language characteristic,
we employ divergent heuristics and statistical methods, e.g., subtree-
based obfuscation detection and unique feature selection (§4.3).
Other approaches [24, 56, 67] focus on simplifying logical struc-
ture such as data flow control flow. However, logic obfuscation is
rare for PowerShell since it is not effective for evading detection.
Deobfuscation for scripts Recently, several deobfuscation ap-
proaches for script-based language are proposed. The overall com-
parison is shown in the Table 1. Specifically, Liu et al. [41] present
PSDEM, a mostly manual approach for PowerShell deobfuscation.
They analyzed several most commonly used obfuscation techniques.
Then they write obfuscation detection and deobfuscation tools for
every kind of obfuscation. In comparison, our approach is better in
terms of obfuscation detection accuracy and automation as shown
in §6.2.1. Abdelkhalek [13] propose JSDES, a hybrid approach to
identify suspected functions involved in obfuscation and then deob-
fuscate with these functions. However, obfuscation does not have
to involve functions. It cannot cover obfuscation using basic oper-
ations. Lu et al. [42] present a semantics-based approach, which
uses dynamic analysis and program slicing techniques to simplify
away the obfuscation. The common problem of such dynamic ap-
proaches is low code coverage. Besides, our approach is generally
faster than these dynamic methods, since we only need to execute
deobfuscation part of the script, most of which is string operation.
9 CONCLUSION
In this paper, we design the first effective and light-weight de-
obfuscation approach for PowerShell scripts. To address the key
challenge of precisely identifying the recoverable script pieces, we
design a novel subtree-based deobfuscation method that performs
obfuscation detection and emulation-based recovery at the level of
subtrees. Building upon this new deobfuscation method, we further
design the first semantic-aware PowerShell attack detection system
with 31 newly-identifies OOA rules. Based on a collection of 6483
PowerShell script samples, our deobfuscation method is shown to
be both efficient and effective. Furthermore, with our deobfuscation
applied, the attack detection rates for Windows Defender and Virus-
Total increase substantially from 0.3% and 2.65% to 75.0% and 90.0%.
Also our semantic-aware attack detection system outperforms both
Windows Defender and VirusTotal with a 92.3% true positive rate
and a 0% false-positive rate on average.
ACKNOWLEDGMENTS
We would like to thank the anonymous reviewers for providing
valuable feedback on our work. This work is supported by the
Key Research and Development Program of Zhejiang Province
(2018C01088).
REFERENCES
[1] 2018. Empire is a PowerShell and Python post-exploitation agent.: EmpirePro-
ject/Empire. https://github.com/EmpireProject/Empire original-date: 2015-08-
05T18:25:57Z.
[2] 2018. Free Automated Malware Analysis Service - powered by Falcon Sandbox -
Viewing online file analysis results for ’50e8e369b6be8077fd8b53c6dbfe3814.doc’.
Retrieved March 13, 2019 from https://www.hybrid-analysis.com/sample/
4b4b8b13c264c8f7d7034060e0e4818a573bebc576a94d7b13b4c1741591687f?
environmentId=100
[3] 2018. Technique: PowerShell - MITRE ATT&CKâĎć. Retrieved May 10, 2019 from
https://attack.mitre.org/techniques/T1086/
[4] 2018. TIOBE Index | TIOBE - The Software Quality Company. Retrieved May 10,
2019 from https://www.tiobe.com/tiobe-index/
[5] 2019.
. Retrieved September 20, 2019 from https://github.com/li-zhenyuan/
PowerShellDeobfuscation
[6] 2019. A collection of malware samples and relevant dissection information. Re-
trieved August 10, 2019 from https://github.com/InQuest/malware-samples/tree/
master/2019-03-PowerShell-Obfuscation-Encryption-Steganography
[7] 2019. Github.
Retrieved May 10, 2019 from https://github.com/search?q=
powershell
home/upload
[8] 2019. Malware Sandbox & Automated Analysis - Falcon Sandbox | CrowdStrike.
Retrieved May 10, 2019 from https://www.crowdstrike.com/endpoint-security-
products/falcon-sandbox-malware-analysis/
[9] 2019. PowerSploit: A PowerShell Post-Exploitation Framework - PowerShellMafi-
a/PowerSploit. https://github.com/PowerShellMafia/PowerSploit original-date:
2012-05-26T16:08:48Z.
[10] 2019. Submit a file for malware analysis - Microsoft Security Intelligence. Retrieved
May 10, 2019 from https://www.microsoft.com/en-us/wdsi/filesubmission
[11] 2019. VirusTotal. Retrieved May 10, 2019 from https://www.virustotal.com/#/
[12] 2019. Web Scraper. Retrieved May 10, 2019 from https://www.webscraper.io/
[13] Moataz AbdelKhalek and Ahmed Shosha. 2017.
JSDES: An Automated De-
Obfuscation System for Malicious JavaScript. In Proceedings of the 12th Interna-
tional Conference on Availability, Reliability and Security - ARES ’17. ACM Press,
Reggio Calabria, Italy, 1–13. https://doi.org/10.1145/3098954.3107009
[14] Simon Aebersold, Krzysztof Kryszczuk, Sergio Paganoni, Bernhard Tellenbach,
and Timothy Trowbridge. 2016. Detecting obfuscated javascripts using ma-
chine learning. In ICIMP 2016 the Eleventh International Conference on Internet
Monitoring and Protection, Valencia, May 22-26, 2016, Vol. 1. Curran Associates,
11–17.
[15] Daniel Bohannon. 2017. AbstractSyntaxTree-Based PowerShell Obfuscation -
cobbr.io. Retrieved April 2, 2019 from https://cobbr.io/AbstractSyntaxTree-
Based-PowerShell-Obfuscation.html
[16] Daniel Bohannon. 2017. ObfuscatedEmpire - Use an obfuscated, in-memory Power-
Shell C2 channel to evade AV signatures - cobbr.io. Retrieved May 10, 2019 from
https://cobbr.io/ObfuscatedEmpire.html
[17] Daniel Bohannon. 2019. PowerShell Obfuscation Detection Framework. Contribute
to danielbohannon/Revoke-Obfuscation development by creating an account on
GitHub. https://github.com/danielbohannon/Revoke-Obfuscation original-date:
2017-07-11T01:20:48Z.
[18] Christian Borgelt. 2005. An Implementation of the FP-growth Algorithm. In
Proceedings of the 1st international workshop on open source data mining: frequent
pattern mining implementations. ACM, 1–5.
[19] Juan Caballero, Noah M Johnson, Stephen McCamant, and Dawn Song. 2009. Bi-
nary code extraction and interface identification for security applications. Technical
Report. CALIFORNIA UNIV BERKELEY DEPT OF ELECTRICAL ENGINEERING
AND COMPUTER SCIENCE.
[20] Davide Canali, Marco Cova, Giovanni Vigna, and Christopher Kruegel. 2011.
Prophiler: a fast filter for the large-scale detection of malicious web pages. In
Proceedings of the 20th international conference on World wide web. ACM, 197–206.
[21] Wueest Candid. 2016. The Increased Use of PowerShell in Attacks. Retrieved May
10, 2019 from https://www.symantec.com/content/dam/symantec/docs/security-