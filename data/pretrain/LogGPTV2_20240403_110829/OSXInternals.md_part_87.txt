ctr1=953278876 ctr2=938172399
$ ./thread_precedence_policy -127 127
ctr1=173546131 ctr2=1201063747
7.4.3.4. ThrEAD_TIME_CONSTRAINT_POLICY
This is a real-time scheduling policy intended for threads with real-time constraints on their execution.
Using this policy, a thread can specify to the scheduler that it needs a certain fraction of processor time,
perhaps periodically. The scheduler will favor a real-time thread over all other threads, except perhaps
other real-time threads. The policy can be applied to a thread using thread_policy_set() with the
following policy-specific parameters: three integers (period, computation, and constraint) and a Boolean
(preemptible). Each of the three integer parameters is specified in absolute-time units. A nonzero period
value specifies the nominal periodicity in the computationthat is, the time between two consecutive
processing arrivals. The computation value specifies the nominal time needed during a processing span.
The constraint value specifies the maximum amount of real time that may elapse from the start of a
processing span to the end of the computation. Note that the constraint value cannot be less than the
computation value. The difference of the constraint and the computation values is the real-time latency.
Finally, the preemtible parameter specifies whether the computation may be interrupted.
Note that the real-time policy does not require special privileges to be used. Therefore, it must be used
with care, given that it raises a thread's priority above that of several kernel threads. For example, using a
real-time thread may be beneficial if the thread has a time-critical deadline to meet and latency is an issue.
However, if the thread consumes too much processor time, using the real-time policy can be
counterproductive.
The scheduler includes a fail-safe mechanism for nontimesharing threads whose processor usage exceeds
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 88 of 107
an unsafe threshold. When such a thread's quantum expires, it is demoted to being a timesharing thread,
and its priority is set to DEPRESSPRI. However, in the case of a real-time thread, the scheduler remembers
the thread's erstwhile real-time desires. After a safe release duration, the thread is promoted to being a
real-time thread again, and its priority is set to BASEPRI_RTQUEUES.
The maximum unsafe computation is defined as the product of the standard quantum and the
max_unsafe_quanta constant. The default value of max_unsafe_quanta is MAX_UNSAFE_QUANTA, defined
to be 800 in osfmk/kern/sched_prim.c. An alternate value can be provided through the unsafe boot-
time argument.
The following are examples of the use of ThrEAD_TIME_CONSTRAINT_POLICY:
 The dynamic_pager program
Multimedia applications such as GarageBand, iTunes, MIDI Server, QuickTime Player, and the
Core Audio layer in general
The I/O Kit's FireWire family
 The WindowServer program
 The IIDCAssistant program, which is part of the audio plug-in for Apple's iSight camera
You can use the lstasks program from Figure 721 to display the scheduling policy of a task's threads.
$ sudo ./lstasks -v
...
Task #70
BSD process id (pid) = 605 (QuickTime Player)
...
thread 2/4 (0x16803) in task 70 (0x5803)
...
scheduling policy = TIME_CONSTRAINT
period = 0
computation = 166650
constraint = 333301
preemptible = TRUE
...
The program in Figure 754 is a crude example of time-constrained processing. It creates a thread that
performs a periodic computation that involves sleeping for a fixed duration followed by processing for a
fixed duration. We use mach_absolute_time() to measure the approximate difference between the time
the thread wished to sleep for and the actual sleeping time. If the difference is more than a predefined
threshold, we increment an error count. If the program is run with no command-line arguments, it will not
modify the thread's scheduling policy. If one or more command-line arguments are provided, the program
will set the policy to ThrEAD_TIME_CONSTRAINT_POLICY using predefined parameters. Thus, we can
compare the number of errors in the two cases. Moreover, we can run other programs to load the system.
For example, we can run an infinite loopsay, through a command such as perl -e 'while (1) {}'.
Figure 754. Experimenting with the ThrEAD_TIME_CONSTRAINT_POLICY scheduling policy
// thread_time_constraint_policy.c
#include 
#include 
#include 
#include 
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 89 of 107
#include 
#include 
#include 
#define PROGNAME "thread_time_constraint_policy"
#define SLEEP_NS 50000000 // sleep for 50 ms
// if actual sleeping time differs from SLEEP_NS by more than this amount,
// count it as an error
#define ERROR_THRESH_NS ((double)50000) // 50 us
static double abs2clock;
static unsigned long long nerrors = 0, nsamples = 0;
static struct timespec rqt = { 0, SLEEP_NS };
// before exiting, print the information we collected
void
atexit_handler(void)
{
printf("%llu errors in %llu samples\n", nerrors, nsamples);
}
void *
timestamper(void *arg)
{
int ret;
double diff_ns;
u_int64_t t1, t2, diff;
while (1) {
t1 = mach_absolute_time(); // take a high-resolution timestamp
ret = nanosleep(&rqt, NULL); // sleep for SLEEP_NS seconds
t2 = mach_absolute_time(); // take another high-resolution timestamp
if (ret != 0) // if sleeping failed, give up
exit(1);
diff = t2 - t1; // how much did we sleep?
// the "error" (in nanoseconds) in our sleeping time
diff_ns = ((double)SLEEP_NS) - (double)diff * abs2clock;
if (diff_ns  ERROR_THRESH_NS)
nerrors++;
nsamples++;
}
return NULL;
}
int
main(int argc, char **argv)
{
int ret;
kern_return_t kr;
pthread_t t1;
static double clock2abs;
mach_timebase_info_data_t tbinfo;
thread_time_constraint_policy_data_t policy;
ret = pthread_create(&t1, (pthread_attr_t *)0, timestamper, (void *)0);
ret = atexit(atexit_handler);
(void)mach_timebase_info(&tbinfo);
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 90 of 107
abs2clock = ((double)tbinfo.numer / (double)tbinfo.denom);
// if any command-line argument is given, enable real-time
if (argc > 1) {
clock2abs = ((double)tbinfo.denom / (double)tbinfo.numer) * 1000000;
policy.period = 50 * clock2abs; // 50 ms periodicity
policy.computation = 1 * clock2abs; // 1 ms of work
policy.constraint = 2 * clock2abs;
policy.preemptible = FALSE;
kr = thread_policy_set(pthread_mach_thread_np(t1),
THREAD_TIME_CONSTRAINT_POLICY,
(thread_policy_t)&policy,
THREAD_TIME_CONSTRAINT_POLICY_COUNT);
if (kr != KERN_SUCCESS) {
mach_error("thread_policy_set:", kr);
goto OUT;
}
}
ret = pthread_detach(t1);
printf("waiting 10 seconds...\n");
sleep(10);
OUT:
exit(0);
}
$ gcc -Wall -o thread_time_constraint thread_time_constraint.c
$ ./thread_time_constraint
waiting 10 seconds...
117 errors in 189 samples
$ ./thread_time_constraint enable_real_time
0 errors in 200 samples
7.4.3.5. Priority Recomputation on Policy Change
When thread_policy_set() is used to change a thread's scheduling policy, or to modify the parameters
of an existing policy in effect, the kernel recomputes the thread's priority and importance values, subject
to the thread's maximum and minimum priority limits. Figure 755 shows the relevant calculations.
Figure 755. Recomputing a thread's priority on a scheduling-policy change
// osfmk/kern/thread_policy.c
static void
thread_recompute_priority(thread_t thread)
{
integer_t priority;
if (thread->sched_mode & TH_MODE_REALTIME)
priority = BASEPRI_RTQUEUES; // real-time
else {
if (thread->importance > MAXPRI) // very important thread
priority = MAXPRI;
else if (thread->importance importance;
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 91 of 107
priority += thread->task_priority; // add base priority
if (priority > thread->max_priority) // clip to maximum allowed
priority = thread->max_priority;
else if (priority p_comm
char *ip_tws_cache_name; // task working set cache
struct vfs_context*ip_vfs_context; // VFS context
struct nameidata *ip_ndp; // current nameidata
thread_t ip_vfork_thread; // thread created, if vfork()
};
Figure 757. The operation of the execve() system call
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 93 of 107
execve() ensures that there is exactly one thread within the current task, unless it is an execve()
preceded by a vfork(). Next, it allocates a block of pageable memory for holding its arguments and for
reading the first page of the program executable. The size of this allocation is (NCARGS + PAGE_SIZE),
where NCARGS is the maximum number of bytes allowed for execve()'s arguments.[19]
[19] As we will see in Chapter 8, an argument list longer than the maximum allowed size will
result in an E2BIG error from the kernel.
// bsd/sys/param.h
#define NCARGS ARG_MAX
// bsd/sys/syslimits.h
#define ARG_MAX (256 * 1024)
execve() saves a copy of its first argumentthe program's path, which may be relative or absoluteat a
specifically computed offset in this block. The argv[0] pointer points to this location. It then sets the
ip_tws_cache_name field of the image parameter block to point to the filename component of the
executable's path. This is used by the kernel's task working set (TWS) detection/caching mechanism,
which we will discuss in Chapter 8. However, execve() does not perform this step if TWS is disabled (as
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 94 of 107
determined by the app_profile global variable) or if the calling process is running chroot()'ed.
execve() now calls namei() [bsd/vfs/vfs_lookup.c] to convert the executable's path into a vnode. It
then uses the vnode to perform a variety of permission checks on the executable file. To do so, it retrieves
the following attributes of the vnode: the user and group IDs, the mode, the file system ID, the file ID
(unique within the file system), and the data fork's size. The following are examples of the checks
performed.
Ensure that the vnode represents a regular file.
Ensure that at least one execute bit is enabled on the file.
Ensure that the data fork's size is nonzero.
If the process is being traced, or if the file system has been mounted with the "nosuid" option,