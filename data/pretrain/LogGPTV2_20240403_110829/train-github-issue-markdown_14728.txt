 **Moshe Moshe** opened **SPR-7980** and commented
Hi,
It seems that the `AdvisedSupport.MethodCacheKey.equals()` compares methods by
reference and not using `Method.equals()`.  
This means if 2 Methods instances are `equals()` the `AdvisedSupport` will add
both of them to the `methodCache` Map.
This can be easily recreated if you get the Method instance using reflection
`Class.getMethod()` because it duplicates the method before returning it,
meaning each call to `Class.getMethod()` returns a new instance of `Method`.
please see sample code:
    static public Object invokeMethod(Object obj, String methodName,
                Object[] args) {
            if (AopUtils.isJdkDynamicProxy(obj)) {
                if (args == null) {
                    args = new Object[0];
                }
                int arguments = args.length;
                Class parameterTypes[] = new Class[arguments];
                for (int i = 0; i < arguments; i++) {
                    parameterTypes[i] = args[i].getClass();
                }
                Class _targetClass = AopUtils.getTargetClass(obj);
                Class[] _targetInterfaces = _targetClass.getInterfaces();
                Method method = null;
                for (Class _targetInterface : _targetInterfaces) {
                    method = org.apache.commons.beanutils.MethodUtils.getMatchingAccessibleMethod(_targetInterface, methodName,
                                    parameterTypes);
                    if (method != null) {
                        break;
                    }
                }
                try {
                    return java.lang.reflect.Proxy.getInvocationHandler(obj)
                            .invoke(obj, method, args);
                } catch (Throwable e) {
                    throw new RuntimeException(e);
                }
            } 
            return null;
        }
If you call this in a loop you can see the `methodCache` map size growing and
growing up to OutOfMemory.
I believe that the correct code should be:
    private static class MethodCacheKey {
    	private final Method method;
    	private final int hashCode;
    	public MethodCacheKey(Method method) {
    		this.method = method;
    		this.hashCode = method.hashCode();
    	}
    	public boolean equals(Object other) {
    		if (other == this) {
    			return true;
    		}
    	   MethodCacheKey otherKey = (MethodCacheKey) other;
                return this.method == otherKey.method || this.method.equals(otherKey.method);
            }
    	public int hashCode() {
    		return this.hashCode;
    	}
    }
Thank you.
* * *
**Affects:** 3.0.5