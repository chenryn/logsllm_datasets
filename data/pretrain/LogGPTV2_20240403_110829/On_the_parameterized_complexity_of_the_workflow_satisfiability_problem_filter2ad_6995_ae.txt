=
(cid:3)k
i=0
(cid:5)
(cid:4)
k
i
2i = 3k.
6Note that
864icant block V . Then(cid:6)
(cid:2)O(mV ) =
(cid:6)
V ∈V
O(mV log
b
mV )
V ∈V
b
b
mV log
V ∈V log
mV (cid:2) max
for some b (cid:3) 0. But
(cid:6)
V ∈V
(cid:3)
V ∈V (cid:2)O(m2
time taken to compute φV for all V is (cid:2)O(cn2k + n23k).
V ∈V (cid:2)O(mV ) = (cid:2)O(n). Similarly, we can show that
V ) = (cid:2)O(n2). Hence, we conclude that the total
(cid:6)
V ∈V
mV = O(n log
Hence
(cid:3)
mV
n) = (cid:2)O(n).
b
5. EXTENSIONS TO WSP
The workﬂow satisﬁability problem studied in this paper
was deﬁned by Wang and Li, which, in turn, was based on
the workﬂow model proposed by Crampton [5]. Wang and
Li’s formulation of the problem diﬀers in two crucial aspects
from that of Crampton. Both aspects are related to the
deﬁnition of constraints. On the one hand, Wang and Li
make the constituent sets of the constraints more complex:
where Crampton assumed that both sets were singletons,
Wang and Li allow at most one of those sets to have car-
dinality greater than one; this means that more complex
relationships between the users that perform the steps can
be speciﬁed using constraints. On the other hand, Wang
and Li ignore the partial ordering on workﬂow steps when
deﬁning constraints, whereas Crampton made a distinction
between the constraints (ρ, s1, s2) and (ρ, s2, s1) and disal-
lowed a constraint of the form (ρ, s2, s1) if s1  s
. Moreover, a plan was required to specify an
execution order for the steps in the workﬂow (in addition
to the assignment of steps to users). This, in turn, means
that Crampton’s deﬁnition of constraint satisfaction (and
hence of the workﬂow satisﬁability problem) is more com-
plex. More formally, we have the following deﬁnitions.
(cid:3)
Definition 8. Let W = (S, U, (cid:2), A, C) be a workﬂow
comprising k steps. A tuple (s1, . . . , sk) is an execution
schedule for W if {s1, . . . , sk} = S and, for all 1 (cid:2) i <
j (cid:2) k, si (cid:2)(cid:3) sj.7 We say si precedes sj in an execution
schedule if i < j.
For the workﬂow depicted in Figure 1, (s2, s1, . . .) is not
an execution schedule, for example, but (s1, s2, s3, s5, s4, s6)
and (s1, s2, s3, s4, s5, s6) are.
Definition 9. The (Type 1) constraint (ρ, s, s
) is satis-
ﬁed by execution schedule σ and plan π if one of the follow-
)) ∈ ρ; (ii) s
(cid:3)
ing holds: (i) s precedes s
precedes s in σ.
in σ and (π(s), π(s
(cid:3)
(cid:3)
(cid:3)
(cid:3)
The intuition here is that a constraint (ρ, s, s
) is well-
(cid:3)
formed only if s could precede s
in the execution of some
or s (cid:4) s
instance of the workﬂow (that is, either s < s
).
(cid:3)
Moreover, if s does occur before s
, then the execution of
(cid:3)
s
is constrained by ρ and the identity of the user that per-
formed s. A modiﬁed version of WSP, based on the above
deﬁnitions, is deﬁned in the following way.
(cid:3)
(cid:3)
Ordered WSP (OWSP)
Input: A constrained workﬂow authorization schema
(S, U, (cid:2), A, C).
Output: True if there exists an execution schedule σ
and a plan π that satisfy all constraints in C,
and False otherwise.
Note that it may not be possible to ﬁnd a valid plan π for
a particular execution schedule σ. Conversely, there may be
a plan π for which there exist schedules σ and σ
such that
(σ, π) satisﬁes all constraints but (σ
, π) does not.
(cid:3)
(cid:3)
Example 2. Suppose S = {s1, s2, s3, s4}, such that s1 <
s2 < s4, s1 < s3 < s4 and s2 (cid:4) s3, and C = {((cid:2)=, s2, s3)}.
Then we may deﬁne a plan π with the property that π(s2) =
π(s3), in which case ((s1, s2, s3, s4), π) is not a solution to
OWSP (since there is a restriction on the user that performs
7In other words, an execution schedule is a linear extension
or topological sort of (S, (cid:2)).
865s3 once the identity of the user that performs s2 has been
ﬁxed), whereas ((s1, s3, s2, s4), π) is a solution (since there is
no restriction on the user that performs s2 if s3 is performed
ﬁrst).
In other words, there exist workﬂows for which a plan π
is not a solution to WSP, but for which (σ, π) is a solution
to OWSP for certain choices of σ. Crampton introduced
the notion of a well-formed workﬂow, which has the follow-
for all si (cid:4) sj, (ρ, si, sj) ∈ C if and only if
ing property:
(˜ρ, sj, si) ∈ C. To ensure that the workﬂow in the above ex-
ample is well-formed, we would add the constraint ((cid:2)=, s3, s2)
to C. It is easy to see that OWSP for well-formed work-
ﬂows and WSP are essentially equivalent, since a valid plan
for one execution schedule will be a valid plan for any exe-
cution schedule [5, Lemma 9]. However, there are practical
examples of workﬂows that are not well-formed [6].
Note that OWSP is only deﬁned for Type 1 constraints
(see Deﬁnition 9). Since WSP is shown to be W[1]-hard even
if only Type 1 constraints are used [17] and since OWSP is
a generalization of WSP provided only Type 1 constraints
are used, OWSP is W[1]-hard. However, we can prove the
following analog of Theorem 2. (We can also prove a similar
analog of Theorem 4.)
Proposition 3. OWSP(=,(cid:2)=) is FPT.
Proof. The crucial point is that the number of linear ex-
tensions of (S, (cid:2)) (and hence possible execution schedules)
is determined only by k. Speciﬁcally, the number of linear
extensions is no greater than k!. Then for each linear ex-
tension, we ﬁrst eliminate any constraints that are rendered
irrelevant by that linear extension and then solve an instance
of WSP(=,(cid:2)=) for the remaining constraints. Thus the com-
plexity of OWSP(=,(cid:2)=) is that of WSP(=,(cid:2)=) multiplied by
a function f (k) dominated by k!.
It is also worth noting that Crampton’s constraints in-
cluded the option of restricting the set of users to which the
constraint applied. A constraint of the form (D, ρ, s1, s2)
(D ⊆ U is the domain of the constraint) is satisﬁed by a
plan π : S → U if one of the following conditions holds:
(i) π(s1) (cid:2)∈ D; (ii) (π(s1), π(s2)) ∈ ρ. In other words, the
constraint on the execution of s2 only applies if s1 is per-
formed by a user in D; users in U \ D are exempt. This
allows us to specify that certain senior (trusted) users are
not subject to separation-of-duty constraints, for example.
Some entries in the table indexed by users and subsets
of S will be set to 1 rather than 0 with this extended form
of constraints. It is easy to see, therefore, that the use of
such constraints does not increase the complexity of WSP
provided that we can test whether a user belongs to the
domain of a constraint in time polynomial in n.
6. CONCLUDING REMARKS
6.1 Related Work
Work on computing plans for workﬂows that must simul-
taneously satisfy authorization policies and constraints goes
back to the seminal paper of Bertino et al. [2]. This work
considered linear workﬂows and noted the existence of an
exponential algorithm for computing valid plans.
Crampton extended the model for workﬂows to partially
ordered sets (equivalently, directed acyclic graphs) and to
directed acyclic graphs with loops [5]. Wang and Li further
extended this model to include Type 2 constraints and es-
tablished the computational complexity and, signiﬁcantly,
the existence of ﬁxed-parameter tractable algorithms for
WSP(=,(cid:2)=) [17]. Moreover, they established that WSP is
W[1]-hard, in general.
Recent work by Basin et al. [1] introduces the notion of
release points to model certain types of workﬂow patterns
and deﬁnes the concept of obstruction, which is related to the
notion of unsatisﬁability. They prove that the enforcement
process existence problem (EPEP), which is analogous to
WSP for this extended notion of unsatisﬁability, is NP-hard
with complexity doubly-exponential in the number of users
and constraints.
Independently of the work on authorization in workﬂows,
there exists a vast literature on constraint satisfaction prob-
lems. In this context, Fellows et al. [10] studied WSP((cid:2)=) for
Type 1 constraints and proved that this problem is ﬁxed-
parameter tractable.
Our work improves on that of Wang and Li and of Fel-
lows et al. by establishing a tighter bound on the exponen-
tial factor of the ﬁxed-parameter complexity for the rele-
vant instances of WSP (Theorem 2). Moreover, our work
establishes that it is unlikely that our bound can be sig-
niﬁcantly improved (Theorem 3). We extend the type of
constraints that can be deﬁned, introducing Type 3 con-
straints and demonstrating that WSP(=,(cid:2)=) remains ﬁxed-
parameter tractable (Theorem 5).
In addition, we extend
the set of binary relations that can be used to specify autho-
rization constraints. Speciﬁcally, we introduce a model for
hierarchical organizations – suitable for organizations that
are organized into mutually disjoint departments, or similar
organizational units – and prove that WSP remains ﬁxed-
parameter tractable when such constraints are used (Theo-
rem 4).
6.2 Future Work
There are many opportunities for further work in this
area, both on the more theoretical complexity analysis and
on extensions of WSP to richer forms of workﬂows.
It is
not hard to see that the function f (k), in the complexity of
the algorithm described in Proposition 3, equals 2O(k log k).
Is there an algorithm such that the term in k has complex-
ity 2O(k)? Note that such a reduction may be impossible to
achieve (unless the Exponential Time Hypothesis fails), as
in some problems considered by Lokshtanov et al. [13]. Does
OWSP generalize in a natural way to Type 2 and Type 3
constraints? Are the resulting instances of OWSP(=,(cid:2)=)
FPT?
There exists a sizeable body of work on workﬂow patterns.
Many workﬂows in practice require the ability to iterate a
subset of steps in a workﬂow, or to branch (so-called OR-
forks and AND-forks) and to then return to a single ﬂow