**Author：RickGray@Knownsec 404 Team**  
**Chinese Version:**
Now there is a phenomenon that once a PoC with a high-risk vulnerability is
detected or an EXP is released, there will be a large group of people trying
to verify it, and so do I.
In this interlocking vulnerability emergency life cycle: from the disclosure
of vulnerabilities to researchers’ analysis and verification, to PoC writing,
and then to large-scale scanning and testing, I think the most critical part
should be regarded as PoC writing and vulnerability detection:
  * **PoC Writing** \- Reproduce the vulnerability environment and recur the vulnerability in the process of coding.
  * **Vulnerability Detection** – By using the finished PoC to verify whether the test target has a vulnerability. It is important to note that this process (or when writing a PoC) needs to be safe, effective, and harmless, and avoid unrecoverable impact on the host computer in the scanning process as much as possible. 
PoC writing, in my opinion, is the most basic work of security researchers or
vulnerability analysts. The programmer describes the process of vulnerability
verification and analysis by code, and writes the corresponding PoC according
to different types of vulnerabilities. Based on the accumulated experience of
writing PoC, the criteria are summarized as follows:
  * Randomness 
  * Certainty 
  * Versatility 
## PoC Writing Guidelines & Examples
### 1\. Randomness
The key variables or data involved in PoC should be random. Don’t use a fixed
variable value to generate Payload and produce randomly as much as possible,
such as the file name of uploaded file, webshell password, string of Alert,
the value of MD5 and so on. What has been widely used in examples is pocsuite
PoC framework.
The code shown above is a key part of the validation code for arbitrary file
upload vulnerability caused by a topic in WordPress, in which "kstest.php" is
used as the name of upload file each time. It’s obvious that the fixed file
name violates the principle of randomness mentioned above. I don’t mean that
there is something wrong with using fixed variables or data in PoC, instead,
being able to randomize data can reduce the risks involved in the process of
scanning and testing.
According to the principle of randomness, the code can be modified as follows:
The modified name of the uploaded file is a randomly generated 6-bit character
each time, which I think that to some extent, the possibility of scanning
detection interaction data being tracked is reduced.
### 2\. Certainty
By means of the returned contents after the test, PoC can find a unique
identifier to indicate whether the vulnerability exists, and this
identification needs to be targeted. Don’t use too ambiguous conditions to
determine such as return status of HTTP request, the controllable content of
fixed page. It can be illustrated by the following examples:
What’s shown above is a vulnerability verification code which is injected with
a "UNION" type SQL for a Web application. The code is directly injected by
writing `-1' union select 1,md5(1) –`. Because there is data echo in this
vulnerability, and if the test is successfully injected, the value of md5(1)
will be printed on the page with `c4ca4238a0b923820dcc509a6f75849b`. This PoC
doesn't seem to have any problems, but combined with the principle of
Randomness, it would be better to use `md5(rand_num)` as the identifier,
because the accuracy is higher after randomization.
It's not a joke here. In case there is no vulnerability in a certain site,
there is `c4ca4238a0b923820dcc509a6f75849b` on the page.
Speaking of this, let's discuss problems that the users of Python "requests"
library might neglect. Sometimes, when we get a request to return an object,
we will make a pre-judgment like the following code:
Some people may say that the conditional judgment in Python is either null or
true, but is this the real case? After practicing and testing, the conditional
judgment of the "Response" object is determined by the returning status code
via HTTP. When the status code range is between "[400, 600]", the conditional
judgment returns "False".
The reason why I mention this point is that sometimes when we test the
vulnerability or send Payload, the target may return "500" because of the
back-end processing logic error. However, at this time, there is already a
vulnerability in the page. If you have previously made a conditional judgment
on the "Response" object by the way mentioned before, it will result in
underreporting.
### 3\. Versatility
The Payload or the included detection code used in PoC should balance with
both environment and platform. If you can construct a generic Payload, never
use a single target detection code. Don't just consider the environment in
which the vulnerability is reproduced such as path form contained in the file
and the executed command. The following image is about an arbitrary file
download vulnerability caused by a plugin in WordPress:
Simply to say, the logic above is to read contents of `/etc/passwd` file
through the arbitrary file download vulnerability and determine whether the
returned file contains key strings or identifiers. Obviously, this Payload
only works in the *nix environment and does not work on Windows platforms. The
better approach is to find a mark that reflects the existence of the
vulnerability based on the environment of the vulnerability application. Here,
we can make a judgment by using configuration file `wp-config.php` in
WordPress (maybe the final way of judgment is not very perfect):
With this change, Payload has taken multiple platform environments into
account and become more universal.
## Vulnerability Detection Methods & Examples
In my opinion, according to the characteristics and forms of Web
vulnerabilities, the methods of vulnerability detection can be divided into
two categories: direct judgment and indirect judgment.
  * **Direct judgment** : By sending a request with Payload, it is possible to directly match the corresponding status from the returned content.
  * **Indirect judgment** : It cannot judge directly by the returned content, and it needs to use other tools to indirectly reflect the trigger of vulnerability.
### 1\. Direct judgment
#### i. SQLi(with echo)
For SQL injection with echo, the detection method is fixed and you can just
follow the principles of “randomness” and “certainty”.
**Error Based SQL Injection**
    payload: "... updatexml(1,concat(":",rand_str1,rand_str2),1) ..."
    condition: (rand_str1 + rand_str2) in response.content
For error injection, the Payload constructed with randomness can identify
vulnerabilities more stably and accurately, while fixed strings will cause
mistakes due to some rare events. Simply to say, Payload contains random data
with predictable results. You only need to verify whether the predictable
result exists or not.
**UNION SQL Injection**
    payload1: "... union select md5(rand_num) ..."
    condition1: md5(rand_num) in response.content
    payload2: "... union select concat(rand_str1, rand_str2) ..."
    condition2: (rand_str1 + rand_str2) in response.content
It’s very easy to understand `md5(rand_num)`. MySQL has its own function. When
Payload executes successfully, it has a hash value of `md5(rand_num)` on the
page because of the echo. Due to the randomness of Payload, the error rate is
low.
#### ii. XSS（with echo）
    payload: "... var _=rand_str1+rand_str2;confirm(_); ..."
    condition: (rand_str1 + rand_str2) in response.content
Because I haven’t studied the XSS in depth, try to sense the meaning by your
own imagination.
#### iii. Local File Inclusion/Arbitrary File Download(with echo)
What is the biggest difference between local file inclusion and arbitrary file
download? A local file inclusion can not only obtain the file content but also
dynamically include the execution code of script file, while arbitrary file
download can only get the file content and cannot execute the code.
Therefore, when testing for such vulnerabilities, you need to find a fixed
file relevant to the web application as a test vector when performing file
inclusion or download testing:
    payload: "... ?file=../../../fixed_file ..."
    condition: (content_flag_in_fixed_file) in response.content
For example, under the application path of WordPress, the `./wp-config.php`
file is the default configuration file, and usually the special string
identifier `require_once(ABSPATH . 'wp-settings.php');` will not be changed.
When scanning a file, you only need to try to download `./wp-config.php` file
and check whether the content contains a feature string to determine whether
there is a vulnerability.
#### iv. Remote Code/Command Execution(with echo)
Both remote code and command execution are about performing, and the usual
practice to do the harmless scanning is to print a random string, or run the
feature function, and then check whether the returned page exists a featured
identifier to confirm the vulnerability.
    payload: "... echo md5(rand_num); ..."
    condition: (content_flag) in response.content
Of course, performing what kind of feature commands needs to combine with the
specific vulnerability environment.
#### v. SSTI/ELI(with echo)
Compared with traditional SQLi and XSS, template injection and expression
language injection should be regarded as problems in the process of open