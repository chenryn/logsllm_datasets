# Exploitation of XNU Port Type Confusions

## Speaker
Tielei Wang

## Background
- **iOS 14.2**, released on November 5, 2020, fixed an in-the-wild exploit reported by Google Project Zero.
- This was the first in-the-wild exploit since iOS 14.
- The exploit chain included:
  - **Safari Remote Code Execution (RCE)** (CVE-2020-27930)
  - **Kernel Information Leak** (CVE-2020-27950)
  - **Kernel Type Confusion** (CVE-2020-27932)

### Context of the Talk
- During the analysis of CVE-2020-27932, a new variant issue in the XNU kernel was discovered: a port type confusion vulnerability.
- At Zer0Con 2021, the root cause of this vulnerability was analyzed, and a method to gain root privilege on macOS Big Sur on Apple Silicon M1 was presented.
- This talk will focus on sharing additional attempts to exploit the port type confusion issue.

## A Brief Introduction to Mach Ports
- **XNU**: Hybrid kernel combining elements from:
  - **Mach**: Microkernel
  - **BSD**: Unix-like system
  - **IOKit**: Device driver framework

### Inter-Process Communication (IPC) in Mach
- **Mach Port** vs. **UNIX File**
  - **Userspace Representation**:
    - Mach Port: Integer
    - UNIX File: Integer
  - **Usage**:
    - Mach Port: `mach_msg_send`, `mach_msg_receive`
    - UNIX File: `write`, `read`
  - **Permissions**:
    - Mach Port: Send right, Receive right, Send-once right
    - UNIX File: `O_RDONLY`, `O_WRONLY`, `O_RDWR`
  - **Namespace**:
    - Mach Port: Per-task
    - UNIX File: Per-process
  - **Kernel Representation**:
    - Mach Port: `struct ipc_port`
    - UNIX File: `struct fileproc`
  - **Opaque Objects**:
    - Mach Port: Task, thread, voucher, etc.
    - UNIX File: Vnode, socket, device, etc.

### Mach Port Characteristics
- **Complexity and Power**:
  - A Mach port is a kernel-maintained message queue.
  - Supports multiple senders and a single receiver.
  - Mach messages can carry port rights, memory, and inline raw data.
- **Message Structure**:
  - **Header**: Contains destination and port rights.
  - **Body**: Optional, can include descriptors and inline data.
  - **Trailer**: Used for auditing information.

### Port Types and io_bits
- **io_bits**:
  - **Regular Port**: `0x80000000` (e.g., `IO_BITS_ACTIVE`)
  - **Userclient Port**: `0x8000081d` (e.g., `IO_BITS_ACTIVE`, `IO_BITS_KOBJECT`, `IKOT_IOKIT_CONNECT`)
  - **Voucher Port**: `0x80000825` (e.g., `IO_BITS_ACTIVE`, `IO_BITS_KOBJECT`, `IKOT_VOUCHER`)

### Powerful Interfaces
- **Task Management**:
  - `task_suspend`, `task_resume`, `task_set_exception_ports`, `task_get_exception_ports`, `thread_create`
- **Thread Management**:
  - `thread_set_state`, `thread_suspend`, `thread_resume`
- **Memory Management**:
  - `mach_vm_read`, `mach_vm_write`, `mach_vm_allocate`, `mach_vm_protect`
- **IOKit**:
  - `IOConnectCallMethod`
- **Host and Processor Management**:
  - `host_info`, `host_get_io_master`, `host_processors`, `processor_info`, `processor_control`, `processor_assign`
- **Miscellaneous**:
  - Clock, voucher, semaphore

### IPC, Send Rights, and More
- **Inheritance**:
  - Tasks inherit send rights to special ports from their parent.
- **Bootstrap Port**:
  - Managed by `launchd`.
  - `bootstrap_lookup` provides send rights to services.
- **Sandboxing**:
  - The kernel adds a trailer to indicate the sender's auditing information.
  - `launchd` performs sandbox checks based on `pid` and `p_idversion`.

### No-More-Senders (NMS) Notification
- **Purpose**:
  - To clean up kernel objects when no tasks hold a send right to them.
- **Mechanism**:
  - Kernel objects can register for NMS notification (`IPC_KOBJECT_ALLOC_NSREQUEST`).
  - When no tasks hold a send right, the kernel sends an NMS notification to deallocate/destroy the object.

### The Bug
- **CVE-2020-27932**:
  - Caused by special reply ports.
  - Special reply ports are used to prevent thread priority loss when receiving replies.
- **Exploit Scenario**:
  - Sending a special reply port to itself and using it as a reply port.
  - Sending a null port with the special reply port as the reply port.
  - Receiving from the destination port.

### Root Cause Analysis
- **Key Steps**:
  1. **Sending with MACH_MSG_TYPE_MOVE_RECEIVE**:
     - `ipc_kmsg_copyin_body` sets `special_reply_port`'s `ip_tempowner` to 1.
  2. **Circularity Check**:
     - Sending a port to itself triggers a circularity check, setting `MACH_MSGH_BITS_CIRCULAR`.
     - The message is destroyed due to the circularity check.
  3. **Destination Port Inactivation**:
     - The destination port becomes inactive, leading to a panic.

This detailed analysis highlights the complexity and power of Mach ports and the potential for vulnerabilities in their implementation.