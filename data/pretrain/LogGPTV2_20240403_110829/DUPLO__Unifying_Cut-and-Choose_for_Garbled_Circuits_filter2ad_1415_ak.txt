ACM SIGPLAN-SIGACT Symposium on Principles of Programming
Languages, ser. POPL ’09. New York, NY, USA: ACM, 2009, pp.
90–101.
[33] G. Barthe, B. Grégoire, S. Heraud, and S. Z. Béguelin, “Computer-
aided security proofs for the working cryptographer,” in Advances in
Cryptology - CRYPTO 2011 - 31st Annual Cryptology Conference, Santa
Barbara, CA, USA, August 14-18, 2011. Proceedings, 2011, pp. 71–90.
[34] J. B. Almeida, M. Barbosa, G. Barthe, F. Dupressoir, B. Grégoire,
V. Laporte, and V. Pereira, “A fast and veriﬁed software stack for
secure function evaluation,” in Proceedings of the 2017 ACM SIGSAC
Conference on Computer and Communications Security, CCS 2017,
2017, pp. 1989–2006.
[35] B. Li and D. Micciancio, “Symbolic security of garbled circuits,”
Cryptology ePrint Archive, Report 2018/141, 2018, https://eprint.iacr.
org/2018/141.
[36] D. Beaver, S. Micali, and P. Rogaway, “The round complexity
of secure protocols,” in Proceedings of
the Twenty-second Annual
ACM Symposium on Theory of Computing, ser. STOC ’90. New
York, NY, USA: ACM, 1990, pp. 503–513.
[Online]. Available:
http://doi.acm.org/10.1145/100216.100287
[37] A. Beimel, “Secret-sharing schemes: A survey,” in Coding and Cryptol-
ogy - Third International Workshop, IWCC 2011, Qingdao, China, May
30-June 3, 2011. Proceedings, 2011, pp. 11–46.
[38] V. Vinod, A. Narayanan, K. Srinathan, C. P. Rangan, and K. Kim, “On
the power of computational secret sharing,” in Progress in Cryptology
- INDOCRYPT 2003, 4th International Conference on Cryptology in
India, New Delhi, India, December 8-10, 2003, Proceedings, 2003, pp.
162–176.
[39] B. Li and D. Micciancio, “Equational security proofs of oblivious
transfer protocols,” in Public-Key Cryptography - PKC 2018 - 21st
IACR International Conference on Practice and Theory of Public-Key
Cryptography, Rio de Janeiro, Brazil, March 25-29, 2018, Proceedings,
Part I, 2018, pp. 527–553.
APPENDIX
YAO’S SECRET SHARING SCHEME
Here we show how to extend our symbolic framework with
the xor expressions to give a sound symbolic security proof
of Yao’s secret sharing scheme [37], [38].
Formally, we extend the syntax of 𝐄𝐱𝐩(𝕂) as:
𝐄𝐱𝐩(𝕂) → 𝐊𝐞𝐲 ∣ 𝐄𝐱𝐩(𝕂) ⊕ 𝐄𝐱𝐩(𝕂) ∣ 𝖢0 ∣ 𝖢1 ∣ 𝖢2 ∣ ⋯
𝐊𝐞𝐲 → 𝖪𝑖 ∣ 𝖦0(𝐊𝐞𝐲) ∣ 𝖦1(𝐊𝐞𝐲)
160
where 𝖪𝑖 ranges over 𝐊, and 𝖢0, 𝖢1, 𝖢2, … are new constant
modify the grammar rule of 𝐄𝐱𝐩(⦃𝑠⦄) as:
symbols representing keys in {0, 1}𝜅
𝐄𝐱𝐩(⦃𝑠⦄) →⦃𝐄𝐱𝐩(𝑠)⦄𝐊𝐞𝐲
. At the same time, we
Note that the encryption expressions remain the same as in
Section II, and 𝐊𝐞𝐲 = 𝖦∗(𝐊) = 𝐊∗ is the set of possible
encryption keys. So symbolic properties on pseudorandom
keys do not change. For all 0 ≤ 𝑖 < 2𝜅
be
the binary representation of 𝑖. Any computational evaluation
function 𝜎 can be extended in the obvious way:
, let 𝑖 ∈ {0, 1}𝜅
𝜎(𝑘0 ⊕ 𝑘1) = 𝜎(𝑘0) ⊻ 𝜎(𝑘1),
𝜎(𝖢𝑖) = 𝑖,
We extend the congruence relation ≡ with the following
, let
where ⊻ is the bitwise xor operation on bitstrings.
rules: For all 𝑘, 𝑘′, 𝑘′′ ∈ 𝐏𝐚𝐭(𝕂) and for all 0 ≤ 𝑖, 𝑗 < 2𝜅
(𝑘 ⊕ 𝑘′) ⊕ 𝑘′′ ≡ 𝑘 ⊕ (𝑘′ ⊕ 𝑘′′),
𝑘 ⊕ 𝑘 ≡ 𝖢0,
𝑘 ⊕ 𝑘′ ≡ 𝑘′ ⊕ 𝑘,
𝑘 ⊕ 𝖢0 ≡ 𝑘,
𝖢𝑖 ⊕ 𝖢𝑗 ≡ 𝖢ℎ for some 0 ≤ ℎ < 2𝜅
such that 𝑖 ⊻ 𝑗 = ℎ.
Pseudorandom bit renamings and pseudorandom key renam-
ings remain the same. We consider an additional mapping
𝛼⊕ ∶ 𝐏𝐚𝐭(𝕂) → 𝐏𝐚𝐭(𝕂) such that it is compatible with ≡,
i.e., 𝛼⊕(𝑘 ⊕ 𝑘′) ≡ 𝛼⊕(𝑘) ⊕ 𝛼⊕(𝑘′) for all 𝑘, 𝑘′ ∈ 𝐏𝐚𝐭(𝕂).
Moreover, we require that, for all 𝑘 ∈ 𝐏𝐚𝐭(𝕂):
∙
∙
∙
if 𝑘 = 𝖢𝑖 for some 𝖢𝑖, then 𝛼⊕(𝑘) = 𝑘;
if 𝑘 ∈ 𝐊𝐞𝐲, then 𝛼⊕(𝑘) = 𝑘 ⊕ 𝖢𝑗 for some 𝖢𝑗 ;
if 𝑘 = 𝑘′ ⊕ 𝑘′′, then 𝛼⊕(𝑘) = 𝛼⊕(𝑘′) ⊕ 𝛼⊕(𝑘′′).
Then for all 𝑘, 𝑘′ ∈ 𝐏𝐚𝐭(𝕂), 𝑘 ≡ 𝑘′ if and only if 𝛼⊕(𝑘) ≡
𝛼⊕(𝑘′). We extend 𝛼⊕ to all patterns in the obvious way. It is
easy to check that for any pattern 𝑒 the distributions (cid:2)𝑒(cid:3) and
(cid:2)𝛼⊕(𝑒)(cid:3) are the same. Now, a pseudorandom renaming is a
triple 𝛼 = (𝛼𝐵, 𝛼𝐾 , 𝛼⊕), and we write 𝛼(𝑒) = 𝛼⊕(𝛼𝐾(𝛼𝐵(𝑒)))
To compute the pattern of an expression, we keep the
deﬁnitions of 𝐩, 𝐊𝐞𝐲𝐬, and 𝐏𝐚𝐫𝐭𝐬 unchanged. For any set 𝑆
of keys, let 𝑆⊕
be the closure of 𝑆 under ⊕. Then we modify
the deﬁnition of 𝐫 to include keys that can be derived using
the xor operation:
𝐫(𝑒) = 𝖦∗
For any 𝑒 ∈ 𝐏𝐚𝐭, the key recovery operator 𝑒 ∶ ℘(𝐏𝐚𝐭(𝕂)) →
℘(𝐏𝐚𝐭(𝕂)) has the same deﬁnition as in Section II: for any
𝑆 ⊆ 𝐏𝐚𝐭(𝕂), 𝑒(𝑆) = 𝐫(𝐩(𝑒, 𝑆)). One can check that the
conditions in Theorem 2 (with 𝐊 replaced by 𝐏𝐚𝐭(𝕂)) still hold
with these changes, and thus the extended symbolic framework
is sound.
({
𝑘 ∈ 𝐊𝐞𝐲𝐬(𝑒) ∣ (𝑘 ⋐ 𝑒 ∨ ∃𝑘′ ∈ 𝐊𝐞𝐲𝐬(𝑒).𝑘 ≺ 𝑘′)
})⊕ .
A secret sharing scheme Π for 𝑛 parties 𝑝1, … , 𝑝𝑛 consists
of a pair of algorithms (𝚜𝚑𝚊𝚛𝚎, 𝚛𝚎𝚌𝚘𝚗) and an access structure
deﬁned by a boolean circuit 𝐶 ∶ {0, 1}𝑛 → {0, 1}. Any
set 𝑃 of parties can be encoded using a boolean vector
𝑥𝑃 ∈ {0, 1}𝑛
𝑖 = 1 if and only of 𝑝𝑖 ∈ 𝑃 . The
probabilistic algorithm 𝚜𝚑𝚊𝚛𝚎 takes a circuit 𝐶 and a secret
𝑦 ∈ {0, 1}𝑛
𝑖=1, one for
, and it produces 𝑛 secret shares { ̃𝑦𝑖}𝑛
such that 𝑥𝑃
𝑖=1
𝑖=1
each party; the algorithm 𝚛𝚎𝚌𝚘𝚗 takes a set of secret shares,
and it outputs 𝑦′ ∈ {0, 1}𝑛
. The scheme Π is correct if for
any set 𝑃 of parties with 𝐶(𝑥𝑃 ) = 1 and any 𝑦 ∈ {0, 1}𝑛
,
← 𝚜𝚑𝚊𝚛𝚎(𝐶, 𝑦), then 𝚛𝚎𝚌𝚘𝚗({ ̃𝑦𝑗}𝑝𝑗∈𝑃 ) = 𝑦. It
if { ̃𝑦𝑖}𝑛
is computationally secure if for any 𝑦0, 𝑦1 ∈ {0, 1}𝑛
if
← 𝚜𝚑𝚊𝚛𝚎(𝐶, 𝑦ℎ) for ℎ ∈ {0, 1}, then for any set
{ ̃𝑦ℎ,𝑖}𝑛
𝑃 of parties such that 𝐶(𝑥𝑃 ) = 0, the distributions { ̃𝑦0,𝑗}𝑝𝑗∈𝑃
and { ̃𝑦1,𝑗}𝑝𝑗∈𝑃 are computationally indistinguishable.
Yao’s secret sharing scheme Π is a computational secret
sharing scheme for monotone boolean circuits, i.e., circuits
that consist of AND and OR gates and have a single bit output.
To describe such circuits in our inductive circuit notation, we
remove 𝐍𝐀𝐧𝐝 and add 𝐀𝐧𝐝 and 𝐎𝐫 circuits: both of 𝐀𝐧𝐝
and 𝐎𝐫 have two input wires and one output wire, and they
compute the boolean and and or functions, respectively. In the
symbolic settings, we can describe 𝚜𝚑𝚊𝚛𝚎 as follows:
,
𝚜𝚑𝚊𝚛𝚎 :: Circuit(𝑠, ◦) × {0, 1}𝑛 → 𝐄𝐱𝐩
𝚜𝚑𝚊𝚛𝚎(𝐶, 𝑦) = ((𝚌𝚝, 𝑘1), … , (𝚌𝚝, 𝑘𝑛)) where
(𝚌𝚝, 𝑣) = 𝚜𝚑(𝐶, 𝖢𝑦)
(𝑘1, … , 𝑘𝑛) = 𝑣
𝚜𝚑 :: Circuit(𝑠, 𝑡) × 𝐄𝐱𝐩 → 𝐄𝐱𝐩
𝚜𝚑(𝐀𝐧𝐝, 𝑘) = (𝜖, (𝖪ℎ, 𝑘 ⊕ 𝖪ℎ)) where
𝚜𝚑(𝐎𝐫, 𝑘) = (𝜖, (𝑘, 𝑘))
𝚜𝚑(𝐃𝐮𝐩, (𝑘𝑖, 𝑘𝑗)) = ((⦃𝑘𝑖⦄𝖪ℎ
ℎ ← new
,⦃𝑘𝑗⦄𝖪ℎ), 𝖪ℎ) where
ℎ ← new
𝚜𝚑(𝐒𝐰𝐚𝐩, (𝑢, 𝑣)) = (𝜖, (𝑣, 𝑢))
𝚜𝚑(𝐀𝐬𝐬𝐨𝐜, (𝑢, (𝑣, 𝑤))) = (𝜖, ((𝑢, 𝑣), 𝑤))
𝚜𝚑(𝐔𝐧𝐚𝐬𝐬𝐨𝐜, ((𝑢, 𝑣), 𝑤)) = (𝜖, (𝑢, (𝑣, 𝑤)))
𝚜𝚑(𝐶0 ⋙ 𝐶1, 𝑤) = ((𝚌𝚝0, 𝚌𝚝1), 𝑢) where
(𝚌𝚝1, 𝑣) = 𝚜𝚑(𝐶1, 𝑤)
(𝚌𝚝0, 𝑢) = 𝚜𝚑(𝐶0, 𝑣)
(𝚌𝚝, 𝑢) = 𝚜𝚑(𝐶, 𝑣)
𝚜𝚑(𝐅𝐢𝐫𝐬𝐭(𝐶), (𝑣, 𝑤)) = (𝚌𝚝, (𝑢, 𝑤)) where
Due to space constraint, the deﬁnition of 𝚛𝚎𝚌𝚘𝚗 is omitted
here and can be found in the full version [35].
To show that this scheme is secure, let us ﬁx any mono-
tone boolean circuit 𝐶 with 𝑛 input wires and a set 𝑃 =
, … , 𝑝𝑖𝑚} of 𝑚 parties such that 𝐶(𝑥𝑃 ) = 0. One can show
{𝑝𝑖1
that the following lemma holds:
Lemma 9. For any 𝑦 ∈ {0, 1}𝑛, let ((𝚌𝚝, 𝑘1), … , (𝚌𝚝, 𝑘𝑛)) =
𝚜𝚑𝚊𝚛𝚎(𝐶, 𝑦), and let 𝑒 = (𝚌𝚝, (𝑘𝑖1
, … , 𝑘𝑖𝑚)). If 𝖢𝑦 ⊕ 𝑘 ∈
Fix(𝑒) for some 𝑘 ∈ 𝐏𝐚𝐭(𝕂), then 𝑘 ∉ Fix(𝑒).
)). If 𝖢𝑦0
. For ℎ ∈ {0, 1},
Fix any 0 ≤ 𝑦0, 𝑦1 < 2𝑛
⊕ 𝑘 ⋐ 𝑒0 then let 𝛼0
let
𝑛)) = 𝚜𝚑𝚊𝚛𝚎(𝐶, 𝑦ℎ), and let 𝑒ℎ =
1), … , (𝚌𝚝ℎ, 𝑘ℎ
((𝚌𝚝ℎ, 𝑘ℎ
(𝚌𝚝ℎ, (𝑘ℎ
, … , 𝑘ℎ
⊕ be such
𝑖1
𝑖𝑚
that 𝛼0
⊕(𝑘) ≡ 𝑘 ⊕ 𝖢𝑦0 ; otherwise let 𝛼0
⊕ be the identity map
on 𝑘. Similarly we can deﬁne 𝛼1
⊕ for 𝑒1. Let 𝛼𝐵 and 𝛼𝐾
⊕(𝐏𝐚𝐭𝐭𝐞𝐫𝐧(𝑒0)) ≡
be identity maps. One can check that 𝛼0
⊕(𝐏𝐚𝐭𝐭𝐞𝐫𝐧(𝑒1)), and thus 𝐏𝐚𝐭𝐭𝐞𝐫𝐧(𝑒0) and 𝐏𝐚𝐭𝐭𝐞𝐫𝐧(𝑒1) are
𝛼1
equivalent up to the pseudorandom renaming 𝛼. Therefore Π
is computationally secure.
161