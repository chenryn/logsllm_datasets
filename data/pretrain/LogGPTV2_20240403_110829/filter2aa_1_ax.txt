      dirsearch_scan
      ;; 
    crt-only) 
      crt_scan
      ;;
    *)       
      nmap_scan
      dirsearch_scan
      crt_scan
      ;; 
  esac
  echo "Generating recon report for $DOMAIN..."
  TODAY=$(date)
  echo "This scan was created on $TODAY" > $DIRECTORY/report
  if [ -f $DIRECTORY/nmap ];then
    echo "Results for Nmap:" >> $DIRECTORY/report
    grep -E "^\s*\S+\s+\S+\s+\S+\s*$" $DIRECTORY/nmap >> $DIRECTORY/report
  fi
  if [ -f $DIRECTORY/dirsearch ];then
    echo "Results for Dirsearch:" >> $DIRECTORY/report
    cat $DIRECTORY/dirsearch >> $DIRECTORY/report
  fi
  if [ -f $DIRECTORY/crt ];then
    echo "Results for crt.sh:" >> $DIRECTORY/report
    jq -r ".[] | .name_value" $DIRECTORY/crt >> $DIRECTORY/report
  fi
done
    Using a library can be super useful when you’re building multiple tools that require the same functionalities. For example, you might build multiple networking tools that all require DNS resolution. In this case, you can simply write the functionality once and use it in all of your tools.
    使用库可以在构建多个需要相同功能的工具时非常有用。例如，您可能会构建多个网络工具，它们都需要DNS解析。在这种情况下，您只需编写一次功能，然后在所有工具中使用它。
    Building Interactive Programs
    What if you want to build an interactive program that takes user input during execution? Let’s say that if users enter the command line option,
     -i
    , you want the program to enter an interactive mode that allows you to specify domains to scan as you go:
    如果您想建立一个交互式程序，在执行期间接受用户输入怎么办？假设用户输入命令行选项 -i，则希望该程序进入交互模式，允许您按需指定要扫描的域：
./recon.sh -i -m nmap-only
    For that, you can use
     read
    . This command reads user input and stores the input string into a variable:
    为此，您可以使用read命令。该命令读取用户输入并将输入字符串存储到变量中：
echo "Please enter a domain!"
read $DOMAIN
    These commands will prompt the user to enter a domain, then store the input inside a variable named
     $DOMAIN
    .
    这些命令会提示用户输入域名，并将输入存储在名为$DOMAIN的变量中。
    To prompt a user repeatedly, we need to use a
     while
    loop, which will keep printing the prompt asking for an input domain until the user exits the program. Here’s the syntax of a
     while
    loop. As long as the
     CONDITION
    is true, the
     while
    loop will execute the code between
     do
    and
     done
    repeatedly:
    要重复提示用户，我们需要使用while循环，它将不断打印提示以要求输入域，直到用户退出程序。以下是while循环的语法。只要条件为真，则while循环将在do和done之间重复执行代码。
while CONDITION
do
  DO SOMETHING
done
    We can use a
     while
    loop to repeatedly prompt the user for domains until the user enters
     quit
    :
    我们可以使用while循环来重复提示用户输入域名，直到用户输入quit为止。
while [ $INPUT != "quit" ];do
  echo "Please enter a domain!"
  read INPUT 
  if [ $INPUT != "quit" ];then
    scan_domain $INPUT
    report_domain $INPUT
  fi
done
    We also need a way for users to actually invoke the
     -i
     option, and our
     getopts
     command isn’t currently doing that. We can use a
     while
     loop to parse options by using
     getopts
     repeatedly:
    我们还需要一种让用户实际调用“-i”选项的方法，而目前我们的getopts命令还没有实现这一点。我们可以使用while循环，通过重复使用getopts来解析选项。
while getopts "m:i" OPTION; do
  case $OPTION in
    m)  
        MODE=$OPTARG
        ;; 
    i)  
        INTERACTIVE=true
        ;;
  esac
done
     Here, we specify a
     while
     loop that gets command line options repeatedly. If the option flag is
     -m
     , we set the
     MODE
     variable to the scan mode that the user has specified. If the option flag is
     -i
     , we set the
     $INTERACTIVE
     variable to
     true
    . Then, later in the script, we can decide whether to invoke the interactive mode by checking the value of the
     $INTERACTIVE
     variable. Putting it all together, we get our final script:
    在这里，我们指定一个while循环，重复获取命令行选项。如果选项标志是“-m”，我们将MODE变量设置为用户指定的扫描模式。如果选项标志是“-i”，我们将$INTERACTIVE变量设置为true。然后，在脚本的后面，我们可以通过检查$INTERACTIVE变量的值来决定是否调用交互模式。把它全部结合起来，我们得到了最终的脚本：
#!/bin/bash
source ./scan.lib
while getopts "m:i" OPTION; do
  case $OPTION in
    m)  
      MODE=$OPTARG
      ;; 
    i)  
      INTERACTIVE=true
      ;;
  esac
done
scan_domain(){
  DOMAIN=$1
  DIRECTORY=${DOMAIN}_recon
  echo "Creating directory $DIRECTORY."
  mkdir $DIRECTORY
  case $MODE in
    nmap-only)
      nmap_scan
      ;;
    dirsearch-only)
      dirsearch_scan
      ;;
    crt-only)
      crt_scan
      ;;
    *)       
      nmap_scan
      dirsearch_scan
      crt_scan
      ;;     
  esac
}
report_domain(){
  DOMAIN=$1
  DIRECTORY=${DOMAIN}_recon
  echo "Generating recon report for $DOMAIN..."
 TODAY=$(date)
  echo "This scan was created on $TODAY" > $DIRECTORY/report
  if [ -f $DIRECTORY/nmap ];then
   echo "Results for Nmap:" >> $DIRECTORY/report
    grep -E "^\s*\S+\s+\S+\s+\S+\s*$" $DIRECTORY/nmap >> $DIRECTORY/report
  fi
  if [ -f $DIRECTORY/dirsearch ];then
    echo "Results for Dirsearch:" >> $DIRECTORY/report
    cat $DIRECTORY/dirsearch >> $DIRECTORY/report
  fi
  if [ -f $DIRECTORY/crt ];then
    echo "Results for crt.sh:" >> $DIRECTORY/report
    jq -r ".[] | .name_value" $DIRECTORY/crt >> $DIRECTORY/report
  fi
}
if [ $INTERACTIVE ];then 1
  INPUT="BLANK"
  while [ $INPUT != "quit" ];do 2
    echo "Please enter a domain!"
    read INPUT 
    if [ $INPUT != "quit" ];then 3
      scan_domain $INPUT
      report_domain $INPUT
    fi
  done
else
  for i in "${@:$OPTIND:$#}";do
    scan_domain $i
    report_domain $i
  done
fi
    In this program, we first check if the user has selected the interactive mode by specifying the
     -i
     option
     1
     . We then repeatedly prompt the user for a domain by using a
     while
     loop
     2
     . If the user input is not the keyword
     quit
     , we assume that they entered a target domain, so we scan and produce a report for that domain. The