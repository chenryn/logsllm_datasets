Unix Time in the ‘TimeDateStamp’ rubric. In this case, the date is ‘GMT Sunday, July 13, 2008, 6:47:12 PM’.
FIGURE 4: CFF EXPLORER – COMPILATION DATE CHECK
NB: The information regarding the compilation date of the sample extracted from the PE Header can
help the analyst answer questions related to incident handling.
12
By analysing the section header rubric, the analyst can identify whether the malware is packed or not.
Packers tend to change section names from the regular names (.text, .data, .rsrc, etc.) to other names, such as
UPX1, for example. In the example presented below, the sample is not packed.
FIGURE 5: CFF EXPLORER – SECTION HEADERS
The CFF Explorer features list includes: Process viewer, Hex Editor, Drivers viewer, PE and Memory
Dumper, PE integrity checks, among others.
NB: At the time of writing, CFF Explorer could be downloaded from the following link:
https://ntcore.com/?page_id=388
13
Resource Hacker
Resource Hacker is a free application that can be used for extracting, modifying or adding resources
(images, dialogs, menus, etc.) from Windows binaries.
FIGURE 6: RESOURCE HACKER – BINARY RESOURCES (ICON, MANIFEST)
Using Resource Hacker can help in analysing dropper samples that have an additional PE file inside their
resources. The tool can also be accessed from the command line without having to open the Resource Hacker
GUI.
NB: At the time of writing, Resource Hacker could be downloaded from the following link:
http://www.angusj.com/resourcehacker/
PeStudio
PeStudio is a tool used to find suspicious artefacts within executable files to accelerate the initial
malware assessment. By using this tool, the analyst can easily spot the functionalities that are commonly used
for malicious activities by the malware creators.
When the analyst opens the malicious sample inside the program, general information regarding the
file, such as MD5 hash and entropy, is obtained. The hash value of the sample will then be checked on VirusTotal,
and the result of the lookup will be listed inside the program. The picture presented below shows the result of
the query:
14
FIGURE 7: PESTUDIO – VIRUSTOTAL CHECK
In the ‘Section tab’, the analyst can see the MD5 hash for each section, entropy value and entry-point
address (the address from where the process starts executing), and also the read, write, and/or execute
permission for each section. If the ‘.rsrc’ section is abnormally large, the application can ‘drop’ another file on
the disk. In this case, it is recommended that, during runtime analysis, the analyst pays close attention to the
files that are written on the disk.
FIGURE 8: PESTUDIO –HEADERS SECTIONS
‘Import sections’ contain the imported function names. By searching each function on
MSDN.microsoft.com, the analyst can identify what that function is doing. PeStudio has a list of ‘blacklisted’
imports, where all the imports that can be used for malicious activities are listed.
In the sample presented below, an inspection of the ‘Imports’ section can give the analyst an
overview of the principal imported libraries used by the malware for malicious activities and blacklisted by the
PeStudio application. For example, the imports ‘connect’, ‘gethostbyname’, ‘socket’, ‘memcpy’, ‘send’ and
‘GetAsyncKeyState’ give the malware analyst some idea of the basic functionalities of the analysed sample.
The ‘Exports section’ presents the functions that the PE file is exporting for other PE files to use. In the
example presented, there are no exports.
15
FIGURE 9: PESTUDIO – IMPORTS SECTION
The ‘resources section’ usually stores the UI information (icons or custom window elements). If the
malicious application has dropper5 functionalities, the files that are written on the disk could be stored in the
‘.rsrc’ section.
The section ‘tls-callback’ contains the code that will set up the environment so the application can run.
This code will be executed before the entry-point. Using this functionality, the malware creator can hide code
inside the TLS (Thread Local Storage) that will be executed before Windows OS creates the process.
The ‘strings section’ is also a useful source of information for the analyst. All the strings from the
executable are parsed and placed in this section. In examining the ‘strings section’, the analyst is trying to identify
readable strings, such as IPs and URLs, and filenames that can be used during the investigation. When the number
of readable characters is reduced, the application could be packed or obfuscated. The ‘strings section’ of the
sample analysed is presented below:
5 Dropper is a generic name for trojans that drop additional artefacts on the affected system.
16
FIGURE 10: PESTUDIO – STRINGS SECTION
Another important area when analysing malware is the ‘certificate section’, which contains the
certificate used for signing the application. Usually, malicious applications are not signed or use a certificate from
a certificate authority that is untrusted or has been compromised.
The PeStudio tools can also create and export an XML report for the executable being analysed. The
XML output report can be used for further analysis by third-party analysis tools.
NB: At the time of writing, PeStudio could be downloaded from the following link: https://www.winitor.com
17
4. Disassembly (IDA & Ghidra)
A disassembler is a very helpful tool for exploring a compiled executable file and giving a general
understanding of what it does. Executable files contain a machine code in the form of binary data. Disassemblers
translate machine code into more convenient assembly language.
4.1 IDA free
An IDA6 disassembler is a ‘standard’ tool used by malware researchers and reverse engineers. This
handbook focuses only on the IDA freeware version (not for commercial use).
Using IDA for malware analysis simply as a disassembler (opening files, disassembly and reading code)
does not infect the workstation. Regarding IDA’s debugging capabilities, it is highly recommended for the analyst
to work in a separate LAB dedicated to malicious file processing to prevent unwanted infection of the business
working environment, which may occur by accidentally running malicious code in IDA debugger. See Chapter 2
(How to set up a LAB environment) for more details.
IDA can display the assembly code in essential text view (address, instruction, parameters and
comments; row by row) or in graph view, which draws the assembly code in logic blocks. The division into blocks
is based on jumps, conditions and loops. Relationships between blocks are illustrated by arrows. The graph view
is available only for valid functions. The type of view can be changed by pressing the space bar.
FIGURE 11: IDA TEXT VIEW (ON THE LEFT) & GRAPH VIEW (ON THE RIGHT)
Recommended first steps after opening an executable in IDA are to familiarise yourself with the basic
properties of the executable – strings, functions, imports, exports and names. All are accessible in the menu
‘View’ > ‘Open subviews’ > ‘Strings’ (Functions, Imports, Exports and Names are in the same location) if not
6 https://www.hex-rays.com/products/ida/
18
already opened as a tab in the main working window.
FIGURE 12: IDA DISASSEMBLER
Strings – a list of string (text) representations occurring in an executable which can help in gaining a better
understanding of the purpose of an executable, e.g. IP address, URL or domain name point to network activity.
Imports – a list of API functions loaded from external libraries (most often part of the operating system) and
used by an executable. An API function is a predefined code that an executable can call without having it
implemented in its code. From the list of imported functions, it is possible to identify how an executable interacts
with the operating system and its resources (Filesystem, registry, networking, encryption, etc.).
Exports – a list of functions that are offered from an executable to the external environment. Exported functions
can be called and executed by an external program.
Names – a list of all entity names (library function, regular function, instruction, string literal, data, imported
name).
Functions – a list of all functions incorporated in the code of an executable. In addition, the F.L.I.R.T. (Fast Library
Identification and Recognition Technology) feature allows the IDA to recognise standard library functions
generated by supported compilers and greatly improves the usability and readability of generated
disassemblies.7
It is generally advisable to focus on networking, encryption and filesystem when analysing strings and
imports. If interesting items are found in above-mentioned lists, they should be investigated thoroughly. For
example, in an investigation of imported function ‘InternetConnectA’:
7 https://www.hex-rays.com/products/ida/tech/flirt/
19
1. Double-click on it (or single-click and press ENTER) to lead the assembly view to the address (address)
where the function declaration is stored.
2. Highlight the function name (single-click on it) and press ‘x’ (or right-click > ‘Jump to xref to operand…’),
to show a table with a list of items where the function is referenced.
3. Double-clicking on items switches the view to the code with interest ‘InternetConnectA’ function and
enables the context to be analysed.
FIGURE 13: WORKING WITH IDA (A – IMPORTS, B – HOW TO GET CROSS-REFERENCES, C- A LIST OF CROSS-REFERENCES,
D – CODE AREA WITH INTEREST API FUNCTION)
The ‘InternetConnectA’ function is activated by the ‘CALL’ instruction. According to the official
documentation provided by Microsoft,8 the ‘InternetConnectA’ function has 8 parameters. The particular
parameters are assigned to the function through ‘PUSH’ instructions. IDA is able to recognise parameters of
known functions and mark them by a comment which helps analysts to orientate better within the code and
understand it. As seen above (Figure 2-D), parameters are passed by the ‘PUSH’ instruction in reverse order to
the stack – ‘dwContext’ (the 8th parameter of the function) is PUSHed as the first one. Conversely, ‘hInternet’
(the 1st parameter of the function) is PUSHed as the last one.
How to understand the code? Parameter ‘dwService’ determines the type of service: value 3 = HTTP;
value 50h in ‘nServerPort’ means the standard TCP port 80 is used (50 hexadecimal = 80 decimal) and
8 https://docs.microsoft.com/en-us/windows/win32/api/wininet/nf-wininet-internetopena
20
‘szServerName’ contains ‘C2.malware.info’ which is the hardcoded domain name of the destination server.
As such code analysis is a very slow, time-consuming process, it is advisable not to analyse the entire
code, instruction by instruction, from the beginning. A better approach is to identify interesting blocks of code
(based on strings, imports and functions) and analyse these thoroughly.
The functionality of IDA can easily be extended by the use of programmable plug-ins. Plugins may be
written to automate routine tasks, for example to enhance the analysis of hostile code, or to add specific
functionality to our disassembler. Plugins should be written in C++. They may be linked to hotkeys or menu items
and have full access to the IDA database and may examine or modify the program or use I/O functions.9 Some
plugins are available only for registered users with an active subscription for the commercial version; others are
available as a paid extension (e.g. the Hex-Rays decompiler) and there are also open-source plugins. One of the
most widely used plugins is IDAPython, which enables the writing of custom scripts for IDA in Python.
4.2 Ghidra
Ghidra10 is a disassembler developed by NSA and released as an open-source tool in 2019.
FIGURE 14: GHIDRA WINDOW (A – MENU; B – PROGRAM STRUCTURE; C – IMPORTS, EXPORTS, FUNCTIONS;
D – ASSEMBLY; E – DECOMPILER)
9 https://www.hex-rays.com/products/ida/tech/plugin/
10 https://ghidra-sre.org/
21
In comparison with IDA in terms of usage, Ghidra initially seems less user-friendly, perhaps because of
its appearance. It must be taken into account that IDA is a professional tool with commercial development and
significant history in the field of reverse-engineering, while Ghidra is a new tool published only recently.
Ghidra has similar functionalities to IDA free, as described in the previous chapter. This chapter shows
its additional properties. For the malware analyst, the ability to show a graphical interpretation of code structure
similar to a block diagram (code blocks, branches, conditions, etc.) enables better understanding of an algorithm.
To access this function, click on the ‘Display Function Graph’ icon located in the main panel or go to the menu
‘Window’ > 'Function Graph’.
FIGURE 15: GHIDRA - FUNCTION GRAPH
Ghidra surpasses the IDA free version with its capable decompiler. While IDA also offers a decompiler
functionality, this is only included in its commercial version and as an extension subject to additional payment.
Decompilers translate assembly code into a high-level programming language, which reduces the
analysis time considerably. High-level language is more familiar than assembly code so requires less time to read;
the code is well structured, and the logic of the algorithm is more obvious.
Ghidra decompiles assembly code into C language natively. There are both disassembled and
decompiled code interpretations in the default Ghidra window. They are synchronised: when scrolling either
through the assembly code or the C code, the cursor highlights identical parts of code in green simultaneously in
both windows, as illustrated in Figures 16 and 17 on the next page.
22
FIGURE 16: GHIDRA - ASSEMBLY CODE
FIGURE 17: GHIDRA - DECOMPILED C CODE
23
5. Dynamic analysis
5.1 Description
Unlike static malware analysis, dynamic malware analysis is conducted by analysing the code while it is
running. To study the behaviour of the executable, running it inside a virtual lab environment is recommended.
To understand the functionality of the malware and prevent it from spreading, reverse engineers use debuggers
when performing advanced dynamic malware analysis.
5.2 Behaviour analysis tools
Process Monitor
Process Monitor is used to monitor the creation or termination of a process or give the analyst more
information about a specific process. The tool combines the features of two Sysinternals utilities (Regmon and
Filemon) and adds filtering capabilities. These features make Process Monitor an essential tool that every analyst
should include in his malware hunting toolkit.
The process monitor has the capability of monitoring, capturing and filtering multiple artefacts, as
detailed below, from the Microsoft website:11
• More data captured for operation input and output parameters;
• Non-destructive filters allow you to set filters without losing data;
• Reliable capture of process details, including image path, command line, user and session ID;
• Filters can be set for any data field, including fields not configured as columns;
• Process tree tool shows the relationship of all processes referenced in a trace;
• Native log format preserves all data for loading in a different Process Monitor operation;
• Boot time logging of all operations.
NB: to obtain all the events from processes and registry, the analyst has to run the Process Monitor tool
with administrator rights.
In the picture presented below, using the Process monitor filter capability and applying a filter that
contains the name of the sample we want to analyse (malware.exe in this case), the analyst can see and make
correlations based on the events caused by the sample, after the execution.
11 https://docs.microsoft.com/en-us/sysinternals/downloads/procmon
24
FIGURE 18: PROCESS MONITOR – FILTER AFTER PROCESS NAME
In the example presented, after examining the events, the analyst will have a better picture of what the
malware is trying to do. For example, in the picture presented below, the executable ‘malware.exe’ is reading
registry keys, creating files and initiating network connections.
Checking all the actions of the malware on a system can give the analyst some idea of the purpose and
the intentions of the malicious executable. This type of analysis should be conducted before proceeding to a
deeper analysis of the code using Static Malware analysis techniques in the IDA disassembler.
FIGURE 19: PROCESS MONITOR – FILTER AFTER ‘MALWARE.EXE’ PROCESS
Since having the right filters is very important when you have multiple events and want to follow just
the important ones, the Microsoft webpage 12 has a link to the file ‘Malware Analysis.PMF’ which has multiple
filters already pre-configured.
12 https://docs.microsoft.com/en-us/archive/blogs/motiba/process-monitor-for-dynamic-malware-analysis
25
Included Filters:
· TCP/UDP Send and Receive - any connections that the malware may try to use while it is running;
· Load Image – DLL/Executable loading;
· Create File – new files being created;
· Write/Delete/Rename File – any changes to files;
· Registry activities – Run entries used for malware persistence.
Excluded Filters that are not usually relevant for malware analyses:
· Procmon/Procmon64/Autoruns/Sysmon: These will exclude any events related to the Sysinternals tools;
· Disposition: Open – used to filter any call for creating file used to open a file rather than creating a file;
· Page File – the page file is less/not relevant when conducting malware analysis.
The user can load the filter into the Process Monitor by using the Filter->Organize Filters menu and
then import.
FIGURE 20: PROCESS MONITOR – CONFIG MALWARE ANALYSIS FILTER
Process Monitor is part of the SysInternals Suite package and, at the time of writing, can be downloaded
from the following website: https://docs.microsoft.com/en-us/sysinternals/downloads/procmon
26
Process Explorer
Process Explorer is a powerful process management utility used to provide insight into all running
processes. The processes that are running on the system are shown in a tree structure that displays child and
parent relationships.
The Process Explorer graphic interface and colour code are shown below:
FIGURE 21: PROCESS EXPLORER – COLOUR SELECTION FILTER
The initial display gives the user a set of columns that include:13
• Process – the file name of the executable along with the icon if one exists;
• CPU – the percentage of CPU time in the last second (or whatever the update speed is set to);
• Private Bytes – the amount of memory allocated to this program alone;
• Working Set – the amount of actual RAM allocated to this program by Windows;
• PID – the process identifier;
• Description – the description, if the application has one;
• Company Name – this one is more useful than you think. If something is not quite right, start by looking
for processes that are not produced by Microsoft.
13 https://www.howtogeek.com/school/sysinternals-pro/lesson2/
27
Process Explorer Features:
• The default tree view shows the hierarchical parent relationship between processes, and displays these
using colours for easy understanding at a glance;
• Very accurate CPU-usage tracking for processes;
• Can add multiple tray icons to monitor CPU, Disk, GPU, Network and more;
• Identifies which process has loaded a DLL file;
• Identifies which process is running an open window;
• Enables view of complete data about any process, including threads, memory usage, handles, objects
and any other salient information;
• Can kill an entire process tree, including any processes started by the one you choose to kill;