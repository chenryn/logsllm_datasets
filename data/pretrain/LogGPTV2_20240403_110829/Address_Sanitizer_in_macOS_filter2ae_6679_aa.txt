# Address Sanitizer in macOS
|
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
# Address Sanitizer in macOS
  * [简介](http://mahua.jser.me/proxy.html#1)
  * [asan原理](http://mahua.jser.me/proxy.html#2)
  * [asan实现](http://mahua.jser.me/proxy.html#3)
  * [参考](http://mahua.jser.me/proxy.html#4)
## 简介
##  
前几天， Keen
Team的@marcograss在其博客上[发布](https://marcograss.github.io/bug/2016/08/03/libtidy-global-bof.html)了一个使用Address Sanitizer(aka asan) 找到的堆溢出漏洞。在这里讨论一下asan的具体实现。
### 本文涉及的环境
###  
  1. macOS 10.11.6
  2. Xcode 7.3.1 ( **确保使用苹果官方的clang， 其与开源clang生成的IR有些不同** )
  3. [clang-703.0.31](http://opensource.apple.com/source/clang/clang-703.0.31/)
### 什么是asan
###  
asan是一个基于LLVM、由Google开发的快速查找内存错误的探测器。 在编译的时候插入相关的辅助和检测代码， 以此完成探测的工作。
后面将更加详细地介绍asan的结构。 asan很早就合并到了LLVM开源分支中， 并在Xcode7.0中正式合并到苹果的编译器中，
作为开发者调试c++代码并及时发现相应的内存错误的手段之一。
目前可以检测源代码中的几乎全部的栈内存和堆内存错误。
### asan的使用
###  
先写一个简单的含有栈溢出的程序：
    // test.c  
    #include   
    void f(char c)  
    {  
            printf("%c", c);  
    }  
    int main(void)  
    {  
        char a[32];  
        char b[32];  
        char c[50];     
        a[1]='1';  
        b[32]='a';        //stack overflow  
        c[100]='c';        //stack overflow      
        return 0;  
    }
使用如下的命令编译这个程序：
    clang test.c -o test -fsanitize=address  
运行程序， 将得到如下的结果：
在asan给出的报告中， 可以得到如下的信息： 1. 当前错误是一个栈溢出的问题。 2. 当前栈上有三个对象， 在访问第二个对象的时候， 发生了栈溢出。
3\. asan在正常的栈对象周围放置了一部分的检测对象， 用来作为检测手段。
## asan原理
##  
在前一个小节中， 讨论过asan是一个基于LLVM的开源组件。 在这里， 将会详细地讨论asan的原理。
### asan检测方式
###  
C语言在做内存访问的时候， 没有任何安全可言。 这就导致了程序员在编写代码的时候， 会遇到很多奇奇怪怪的问题，同时也为软件安全带来了很多的挑战。
### 内存布局
###  
通过上述的介绍， asan检测非法地址访问的方式是通过“影子内存”作为判断某个虚拟内存地址是否是“中毒”的。asan在内存分配的时候， 大致的内存分布如下：
可以看到，一个进程的内存被划分为三种类型： (1) normal mmeory:待分配或者已经分配的内存； (2) shadow
memory:内存索引区域; (3) bad memory(memory gap)。
使用先前编译出来的test再加上一些逆向工程，可以得到在真实环境下三种内存真实的大小：
#### 影子内存（Shadow Memory）
####  
asan提供了一种有效的内存安全验证方式：使用辅助的内存追踪表来判断当前内存是否是合法有效的。这种内存追踪表被称作影子内存（shadow memory)。
这种机制有着显而易见的好处： 可以知道每个地址的状态。 每次访问地址前， 只要检测一下shadow memory， 就可以知道当前地址是否是合法的。 同样，
如果发生了溢出或者非法的访问， asan也会在第一时间知道发生溢出的地址。
非法内存在asan中被称作“中毒”；而合法内存则被称为“无毒”。asan中将8个字节表示为1个字节的索引值。如果索引值是0，代表8个字节是“无毒”的；
如果索引值是1，代表最后一个地址是“中毒”的（无法访问）；如果8个字节都是“中毒”的， 那么这个索引值是一个负数。
#### 访问内存操作的改变
####  
在不同的C程序中， 访问内存一般是这样的：
        *address=xxx  
或者是
        xxx=*address  
在编译的时候， asan更改了访问代码， 将如上的操作变成了这样：
        if (IsPoisoned(address))   
        {  
           ReportError(address, kAccessSize, kIsWrite);  
        }  
        *address = xxx;  // or: xxx = *address;
经过如上的修改， 每次程序访问指针之前， 都将检查地址是否中毒， 如果中毒将抛出异常。
### 检测栈内存
###  
asan相比其他的检测工具而言，栈内存检查是其拥有的一个很明显的优势。 这和asan工作的位置有关。为了更好的理解asan对栈的检测原理，
在这里需要介绍一下LLVM的工作原理。
#### LLVM工作原理
####  
LLVM是Chris Lattner在2000年发起的新一代编译器项目。历经十几年的发展， LLVM已经成为成熟度很高的编译器项目。
苹果在其macOS平台引入了LLVM， 并作为其主力的编译器。
LLVM的工作流程如下所示：
LLVM在结构上可以分为编译器前端和编译器后端。 前后端使用LLVM IR作为识别的语言。 前端主要将各种不同的语言（C/C++/Swift）转化成LLVM
IR中间语言；后端使用一系列的Pass组件对LLVM IR进行一系列优化，最后将其转成对应架构的汇编语言(x86, x86/64, arm, arm64,
etc)。
#### LLVM Pass组件
####  
在LLVM的前端将LLVM IR代码提交给后端的时候， 后端将调用事先注册的Pass组件， 对获得的IR流进行一系列优化。不过这里可以这样说，
开发人员可以注册一系列pass组件， 在pass组件中插入一些辅助的代码到IR中，
这样可以改变原来代码的一些行为。asan中的栈检测正是基于这种方式实现的。
#### asan检测栈内存的方式
####  
假设有如下的代码：
    void foo() {  
      char a[8];  
      ...  
      return;  
    }
如果开发者在编译程序的时候启用了asan， 那么asan将会把以上的代码更改为：
    void foo() {  
      char redzone1[32];  // 32-byte aligned  
      char a[8];          // 32-byte aligned  
      char redzone2[24];  
      char redzone3[32];  // 32-byte aligned  
      int  *shadow_base = MemToShadow(redzone1);  
      shadow_base[0] = 0xffffffff;  // poison redzone1  
      shadow_base[1] = 0xffffff00;  // poison redzone2, unpoison 'a'  
      shadow_base[2] = 0xffffffff;  // poison redzone3  
      ...  
      shadow_base[0] = shadow_base[1] = shadow_base[2] = 0; // unpoison all  
      return;  
    }
asan在申请的栈数据周围用“下毒”的警戒区包围住。 当发生越界访问的时候， 该错误将会被asan侦测到。
### 检测堆内存
###  