lar example, our attacker-controlled quiescent state cor-
responds to that of an idle web server waiting for new
requests. Once the second request is served, many parts
of memory can be inﬂuenced either explicitly or implic-
itly. At one point, processing of the request triggers some
memory-allocation function which serves as an oracle.
It is important to stress that, depending on the server’s
logic, parts of memory are overwritten (through succes-
sive allocations), while the request is processed. These
parts cannot be generally controlled by the attacker us-
ing her arbitrary read/write primitives. However, the at-
tacker still controls all the memory which was available
in the original quiescent state (before the second request
takes place). As long as memory of that state reaches a
memory-allocation function, then the attacker can suc-
cessfully use the oracle. Therefore, what we need to de-
termine is the memory locations that inﬂuence memory-
allocation sites and are still attacker-controlled, once the
second HTTP request triggers memory-allocation func-
tions.
Practically, this model can be easily realized using
DFT. For our purposes, we use Memory-allocation Prim-
itive Scanner (MAPScanner), a custom scanner based
on libdft [20]. We start an application instrumented by
MAPScanner, with all memory untainted, with no taint
sources, and with all memory-allocation functions de-
ﬁned as sinks. Once the application is idle, we signal
MAPScanner to taint all memory. At this point, the target
quiescent state is deﬁned and we assume that all mem-
ory is attacker-controlled. We then proceed and send a
request to the server application. Any subsequent mem-
ory allocations that are triggered by the second request,
since we have deﬁned zero taint sources, wash out the
taint of previous attacker-controlled memory. While the
request is processed, MAPScanner reports all memory-
allocation functions which are initiated with input from
still-tainted, and therefore, still-controlled memory.
Notice, that, depending on the selected quiescent state
and the input request, the attacker can discover more or
fewer primitives. Using several complicated quiescent
states, for example, those between handling two succes-
sive requests or between accepting the socket and receiv-
ing data, may uncover additional primitive candidates.
Once primitive instances are found, the attacker sim-
USENIX Association  
25th USENIX Security Symposium  127
7
ply needs to locate the controlling data in memory (often
a buff_size global variable originating from the con-
ﬁguration ﬁle), corrupt the data (and thus the allocation
size) with an arbitrary memory write primitive, and mon-
itor the execution for side effects. To classify a potential
primitive as an EAP or PAP, the attacker will need to use
the source or runtime experimentation to determine the
lifetime of the corresponding allocated object along dif-
ferent program paths. Further, manual investigation is
required to eliminate primitives that might not be usable
because the value in memory is subject to additional va-
lidity checks in the attacker controlled paths.
In practice, we found that even when selecting the
simplest quiescent state (i.e., idle server) and input (i.e.,
simple client request), an attacker can locate sufﬁcient
usable primitives to mount our end-to-end attacks (see
Section 7).
6 Exploiting Timing Side Channels
Not all discovered primitives may automatically guar-
antee a realistic and crash-free attack. Certain types of
primitives may not have any directly observable side ef-
fects (e.g., the server transparently recovering from allo-
cation failures), making exploitation more complicated.
Other types of primitives may result in program crashes
(e.g., the server failing internal consistency checks), typ-
ically in both successful and unsuccessful cases, again
making it difﬁcult for an attacker to distinguish the two
cases via direct observation. In both scenarios, however,
an attacker can still infer the allocation behavior (success
or failure) by measuring the time it takes to handle every
particular request. We exemplify timing attack strategies
for both the imperfect primitives presented above.
Even when a primitive has no directly observable side
effects, allocation of memory and failure to allocate
memory normally take a different amount of time. On
Linux, for instance, a successful allocation is typically
satisﬁed by a small VMA cache, avoiding lengthy walks
of the red-black tree of virtual memory area (VMA)
structures. However, on a VMA cache miss, before
declaring an allocation failure, the kernel needs to walk
all the nodes in the red-black tree in a compute-intensive
loop, which takes measurably longer time to complete
generating a timing side channel [21]. In fact, many ker-
nel optimizations, such as VMA merging [22], explicitly
seek to reduce the run-time impact of such expensive red-
black tree walks. The timing signal becomes stronger for
programs maintaining many VMAs and much stronger
if the attacker can lure the program into allocating even
more VMAs (however, VMA merging normally makes
this difﬁcult even for a PAP-enabled attacker). Even
stronger timing side channels may be generated by the
program itself. For example, to transparently recover
from allocation failures, the program may employ com-
plex and time-consuming error-handling logic or log the
event to persistent storage.
When a primitive results in program crashes in suc-
cessful and unsuccessful cases, in turn, the presence
and the strength of timing side channels is entirely sub-
ject to the internal cause of the crash.
Interestingly,
we found that the leading cause of crashes results in a
very strong side channel. In fact, successful allocation-
induced crashes are most commonly induced by a server
attempting to fully initialize (or access) the huge allo-
cated block, resulting in several time-consuming page
faults before leading to the ﬁnal out-of-memory error. As
shown in Section 7, timing attacks which rely on crashes
are remarkably effective in practice.
7 Evaluation
7.1 Primitive Discovery Results
We apply MAPScanner to a variety of well-known and
popular server software. In particular, we consider BIND
9.9.3 (a DNS server), lighttpd 1.4.37 and nginx 1.6.2
(two popular web servers), as well as mysql 5.1.65 (a
widely deployed database server). We built all programs
using their default options (i.e. optimizations were en-
abled).
Since the presented applications have the form of a
server accepting and servicing requests, we select, as the
(simplest possible) attacker-controlled quiescent state,
the point when the server is idle waiting for incom-
ing connections, and, as the (simplest possible) attacker-
controlled input, a default request to the server (Section
5). Of course, motivated attackers can carry out similar
analyses starting from several additional quiescent states
and inputs, so our results here are actually an (already
sufﬁcient) underapproximation of the real-world attack
surface. Notice, ﬁnally, that we assume each server is
being protected by an information-hiding-based defense
mechanism which thwarts direct exploitation attempts
(e.g., control-ﬂow diversion).
Table 2 presents all the primitives discovered by our
analysis. We name each instance of a primitive after the
variable that an attacker needs to corrupt in memory to
craft the corresponding allocation oracle. For each of
the primitives, we report the type width of the memory-
resident value that inﬂuences the allocation site. While
32-bit ﬁelds are only sufﬁcient to bypass 32-bit (and
not 64-bit) information hiding, we believe their avail-
ability can be indicative of the risks for 64-bit defense
mechanisms—e.g., code refactoring changing an alloca-
tion size type to the common 64-bit size_t type may
inadvertently introduce allocation oracles.
128  25th USENIX Security Symposium 
USENIX Association
8
Table 2: For each particular application, we report the number of primitives found, the width of the allocation value,
whether the primitive forces a crash, whether timing is necessary to determine success and if the primitive can be
persistent as well. The “RE” (Residual Entropy) column assumes an attacker can reliably exploit the associated timing
side channels. Values marked with (*) refer to lighttpd conﬁgured in forking mode.
RE (bits)
1
0
0∗
0∗
0∗
0
1
1
0
0
0
1
1
bind
lighttpd
nginx
mysql
Primitive
mgr->bpool
heap->size
buffer->size#1
buffer->size#2
conﬁg_context->used
ls->pool_size
client_header_buffer_size
request_pool_size
net->max_packet
net_buffer_length
connection_attrib
query_prealloc_size
records_in_block
Size
64-bit
32-bit
64-bit
64-bit
64-bit
64-bit
64-bit
64-bit
32-bit
32-bit
64-bit
64-bit
32-bit
Crash-free Timing-dependent EAP







































PAP

Primarily











Additionally, we checked whether utilizing a primi-
tive carried a risk of crashes (“crash-free” column). For
primitives that did not provide directly observable side
effects, the “timing-dependent” column indicates that the
attacker needs to conduct a timing side channel attack
to craft her primitives (we provide an example in Sec-
tion 7.3). The EAP and PAP columns specify that the
primitive can be used to perform an ephemeral and per-
sistent allocation (respectively). Finally, we quantify the
residual entropy after we perform the best attack at the
attacker’s disposal for each primitive.
For each of these applications, our simple methodol-
ogy was sufﬁcient to discover 64-bit primitives able to
quickly locate hidden objects with no residual entropy.
In most cases, the discovered primitives were crash-free
and could function as both EAPs and PAPs.
nginx and mysql are the best examples. They both
provide ideal EAP+PAP attack primitives to stealthily
bypass 64-bit information hiding with little effort. It is
also worth noting that the connection_attrib prim-
itive in mysql involves overwriting the requested stack
size in a pthread_attr_t struct. As such, we ex-
pect a similar primitive to be available in all servers
that create threads to service clients (either overwriting
an application-speciﬁc attribute structure or the one in
glibc).
For lighttpd, the server’s default conﬁguration only al-
lows the EAP-only attack, but, when the server is conﬁg-
ured with forked worker processes, an attacker can suc-
cessfully conduct the side-channel attack exempliﬁed in
Section 7.3 to eliminate all entropy and bypass informa-
tion hiding.
Bind stands out as, depending on the server conﬁg-
uration, the heap->size primitive might be usable as
an EAP or may effectively only function as a PAP. The
reason for this behavior is that the effected allocation be-
comes part of a relatively long-lived cache. Hence, its
lifetime is determined by administrator choices and per-
formance considerations. When cached objects are not
eagerly expired, the primitive may only be usable as a
PAP for the duration of a practical attack.
Overall, our simple analysis shows that real-world
information-hiding-protected applications stand very lit-
tle chance against attackers armed with allocation ora-
cles.
7.2 EAP+PAP attack on nginx
To illustrate how the combined EAP+PAP attack works
in practice, we consider the ls->pool_size primitive
discovered during our investigation of the nginx web
server (Table 2).
When
servicing
new connection,
function
allocates
nginx’s
a
a
per-
ngx_event_accept()
connection memory pool (c->pool) using the size
stored in the listening socket data structure associ-
ated to the socket
the accept() originated from.
ngx_event_accept() instantiates the pool by calling
out to ngx_create_pool(), which eventually allocates
the required memory by means of posix_memalign().
Using our primitive discovery methodology, we were
easily able to determine that
to
posix_memalign() originated from a value resident in
live memory for our idle attacker-controlled quiescent
state. This means that an arbitrary memory write vul-
nerability in any of the code that processes untrusted in-
the size argument
USENIX Association  
25th USENIX Security Symposium  129
9
put can be used to overwrite this value with an attacker-
selected size, once the memory location is known.
triv-
We then veriﬁed that ls->pool_size is
ially accessible by following the ls ﬁeld of
the
ngx_connection_t structure, a pointer to which is
always available on various stack locations while the
server is executing request-processing code.
Using this information, the attacker is able to craft an