## 文章前言
本篇文章主要对FastJSON
AutoType的校验原理，以及绕过方式进行简单的分析介绍，跟多的是学习记录，文章涉及的绕过方式都是"站在巨人的肩膀上"看风景的，很后悔当初去看了Jackson-databind而丢弃了fastJSON，哎....，悔不当初呀~
## 校验原理
FastJSON中的checkAutoType()函数用于对反序列化的类进行黑白名单校验，我们首先来看一下checkAutoType()函数的检查流程：  
代码位置：fastjson-1.2.68\src\main\java\com\alibaba\fastjson\parser\ParserConfig.java  
checkAutoType函数默认需要传递三个参数：  
String typeName：被序列化的类名  
Class expectClass：期望类()  
int features：配置的feature值  
这里的expectClass(期望类)的目的是为了让一些实现了expectClass这个接口的类可以被反序列化，可以看到这里首先校验了typeName是否为空、autoTypeCheckHandlers是否为null，之后检查safeMode模式是否开启(在1.2.68中首次出现，配置safeMode后，无论白名单和黑名单都不支持autoType)、typeName的长度来决定是否开启AutoType：
    public Class checkAutoType(String typeName, Class expectClass, int features) {
            if (typeName == null) {
                return null;
            }
            if (autoTypeCheckHandlers != null) {
                for (AutoTypeCheckHandler h : autoTypeCheckHandlers) {
                    Class type = h.handler(typeName, expectClass, features);
                    if (type != null) {
                        return type;
                    }
                }
            }
            final int safeModeMask = Feature.SafeMode.mask;
            boolean safeMode = this.safeMode
                    || (features & safeModeMask) != 0
                    || (JSON.DEFAULT_PARSER_FEATURE & safeModeMask) != 0;
            if (safeMode) {
                throw new JSONException("safeMode not support autoType : " + typeName);
            }
            if (typeName.length() >= 192 || typeName.length()  clazz;
            final long BASIC = 0xcbf29ce484222325L;
            final long PRIME = 0x100000001b3L;
            final long h1 = (BASIC ^ className.charAt(0)) * PRIME;
            if (h1 == 0xaf64164c86024f1aL) { // [
                throw new JSONException("autoType is not support. " + typeName);
            }
            if ((h1 ^ className.charAt(className.length() - 1)) * PRIME == 0x9198507b5af98f0L) {
                throw new JSONException("autoType is not support. " + typeName);
            }
            final long h3 = (((((BASIC ^ className.charAt(0))
                    * PRIME)
                    ^ className.charAt(1))
                    * PRIME)
                    ^ className.charAt(2))
                    * PRIME;
            long fullHash = TypeUtils.fnv1a_64(className);
            boolean internalWhite = Arrays.binarySearch(INTERNAL_WHITELIST_HASHCODES,  fullHash) >= 0;
            if (internalDenyHashCodes != null) {
                long hash = h3;
                for (int i = 3; i = 0) {
                        throw new JSONException("autoType is not support. " + typeName);
                    }
                }
            }
            if ((!internalWhite) && (autoTypeSupport || expectClassFlag)) {
                long hash = h3;
                for (int i = 3; i = 0) {
                        clazz = TypeUtils.loadClass(typeName, defaultClassLoader, true);
                        if (clazz != null) {
                            return clazz;
                        }
                    }
                    if (Arrays.binarySearch(denyHashCodes, hash) >= 0 && TypeUtils.getClassFromMapping(typeName) == null) {
                        if (Arrays.binarySearch(acceptHashCodes, fullHash) >= 0) {
                            continue;
                        }
                        throw new JSONException("autoType is not support. " + typeName);
                    }
                }
            }
白名单列表如下：
    INTERNAL_WHITELIST_HASHCODES = new long[] {
                    0x82E8E13016B73F9EL,
                    0x863D2DD1E82B9ED9L,
                    0x8B2081CB3A50BD44L,
                    0x90003416F28ACD89L,
                    0x92F252C398C02946L,
                    0x9E404E583F254FD4L,
                    0x9F2E20FB6049A371L,
                    0xA8AAA929446FFCE4L,
                    0xAB9B8D073948CA9DL,
                    0xAFCB539973CEA3F7L,
                    0xB5114C70135C4538L,
                    0xC0FE32B8DC897DE9L,
                    0xC59AA84D9A94C640L,
                    0xC92D8F9129AF339BL,
                    0xCC720543DC5E7090L,
                    0xD0E71A6E155603C1L,
                    0xD11D2A941337A7BCL,
                    0xDB7BFFC197369352L,
                    0xDC9583F0087CC2C7L,
                    0xDDAAA11FECA77B5EL,
                    0xE08EE874A26F5EAFL,
                    0xE794F5F7DCD3AC85L,
                    0xEB7D4786C473368DL,
                    0xF4AA683928027CDAL,
                    0xF8C7EF9B13231FB6L,
                    0xD45D6F8C9017FAL,
                    0x6B949CE6C2FE009L,
                    0x76566C052E83815L,
                    0x9DF9341F0C76702L,
                    0xB81BA299273D4E6L,
                    0xD4788669A13AE74L,
                    0x111D12921C5466DAL,
                    0x178B0E2DC3AE9FE5L,
                    0x19DCAF4ADC37D6D4L,
                    0x1F10A70EE4065963L,
                    0x21082DFBF63FBCC1L,
                    0x24AE2D07FB5D7497L,
                    0x26C5D923AF21E2E1L,
                    0x34CC8E52316FA0CBL,
                    0x3F64BC3933A6A2DFL,
                    0x42646E60EC7E5189L,
                    0x44D57A1B1EF53451L,
                    0x4A39C6C7ACB6AA18L,
                    0x4BB3C59964A2FC50L,
                    0x4F0C3688E8A18F9FL,
                    0x5449EC9B0280B9EFL,
                    0x54DC66A59269BAE1L,
                    0x552D9FB02FFC9DEFL,
                    0x557F642131553498L,
                    0x604D6657082C1EE9L,
                    0x61D10AF54471E5DEL,
                    0x64DC636F343516DCL,
                    0x73A0BE903F2BCBF4L,
                    0x73FBA1E41C4C3553L,
                    0x7B606F16A261E1E6L,
                    0x7F36112F218143B6L,
                    0x7FE2B8E675DA0CEFL
            };
黑名单列表：
    denyHashCodes = new long[]{
                    0x80D0C70BCC2FEA02L,
                    0x86FC2BF9BEAF7AEFL,
                    0x87F52A1B07EA33A6L,
                    0x8EADD40CB2A94443L,
                    0x8F75F9FA0DF03F80L,
                    0x9172A53F157930AFL,
                    0x92122D710E364FB8L,
                    0x941866E73BEFF4C9L,
                    0x94305C26580F73C5L,
                    0x9437792831DF7D3FL,
                    0xA123A62F93178B20L,
                    0xA85882CE1044C450L,
                    0xAA3DAFFDB10C4937L,
                    0xAC6262F52C98AA39L,
                    0xAD937A449831E8A0L,
                    0xAE50DA1FAD60A096L,
                    0xAFFF4C95B99A334DL,
                    0xB40F341C746EC94FL,
                    0xB7E8ED757F5D13A2L,
                    0xBCDD9DC12766F0CEL,
                    0xC00BE1DEBAF2808BL,
                    0xC2664D0958ECFE4CL,
                    0xC7599EBFE3E72406L,
                    0xC8D49E5601E661A9L,
                    0xC963695082FD728EL,
                    0xD1EFCDF4B3316D34L,
                    0xD54B91CC77B239EDL,
                    0xD8CA3D595E982BACL,
                    0xDE23A0809A8B9BD6L,
                    0xDEFC208F237D4104L,
                    0xDF2DDFF310CDB375L,
                    0xE09AE4604842582FL,
                    0xE1919804D5BF468FL,
                    0xE2EB3AC7E56C467EL,
                    0xE603D6A51FAD692BL,
                    0xE9184BE55B1D962AL,
                    0xE9F20BAD25F60807L,
                    0xF3702A4A5490B8E8L,
                    0xF474E44518F26736L,
                    0xF7E96E74DFA58DBCL,
                    0xFC773AE20C827691L,
                    0xFD5BFC610056D720L,
                    0xFFA15BF021F1E37CL,
                    0xFFDD1A80F1ED3405L,
                    0x10E067CD55C5E5L,
                    0x761619136CC13EL,
                    0x3085068CB7201B8L,
                    0x45B11BC78A3ABA3L,
                    0x55CFCA0F2281C07L,
                    0xB6E292FA5955ADEL,
                    0xEE6511B66FD5EF0L,
                    0x100150A253996624L,
                    0x10B2BDCA849D9B3EL,
                    0x144277B467723158L,
                    0x14DB2E6FEAD04AF0L,
                    0x154B6CB22D294CFAL,
                    0x17924CCA5227622AL,
                    0x193B2697EAAED41AL,
                    0x1CD6F11C6A358BB7L,
                    0x1E0A8C3358FF3DAEL,
                    0x24D2F6048FEF4E49L,
                    0x24EC99D5E7DC5571L,
                    0x25E962F1C28F71A2L,
                    0x275D0732B877AF29L,
                    0x2ADFEFBBFE29D931L,
                    0x2B3A37467A344CDFL,
                    0x2D308DBBC851B0D8L,
                    0x313BB4ABD8D4554CL,
                    0x327C8ED7C8706905L,
                    0x332F0B5369A18310L,
                    0x339A3E0B6BEEBEE9L,
                    0x33C64B921F523F2FL,
                    0x34A81EE78429FDF1L,
                    0x3826F4B2380C8B9BL,
                    0x398F942E01920CF0L,
                    0x3B0B51ECBF6DB221L,
                    0x42D11A560FC9FBA9L,
                    0x43320DC9D2AE0892L,
                    0x440E89208F445FB9L,
                    0x46C808A4B5841F57L,
                    0x49312BDAFB0077D9L,
                    0x4A3797B30328202CL,
                    0x4BA3E254E758D70DL,
                    0x4BF881E49D37F530L,
                    0x4DA972745FEB30C1L,
                    0x4EF08C90FF16C675L,
                    0x4FD10DDC6D13821FL,
                    0x527DB6B46CE3BCBCL,
                    0x535E552D6F9700C1L,
                    0x5728504A6D454FFCL,