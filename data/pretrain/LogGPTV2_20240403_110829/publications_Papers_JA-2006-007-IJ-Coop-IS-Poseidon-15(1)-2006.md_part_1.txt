Cardoso, J., "Poseidon: A framework to assist Web process design based on business cases", International Journal of Cooperative
Information Systems (IJCIS), World Scientific Publishing, Vol. 15, No. 1, pp. 23-55, March 2006.
Poseidon: A framework to assist Web process
design based on business cases
Jorge Cardoso
PI:EMAIL
Department of Mathematics and Engineering
University of Madeira
9000-390 - Funchal
Abstract.
Systems and infrastructures are currently being developed to support Web
services and Web processes. One prominent solution to manage and
coordinate Web services is the use of workflow technology. For more than
two decades now, workflow management systems architectures, language
specifications, and workflow analysis techniques have been extensively
studied. While these areas of research have made the development of
sophisticated workflow systems possible, one important research area that has
been overlooked is the lifecycle of process application development. As a
result, current process management systems support the analysis, enactment,
and ad-hoc design of workflows, but they lack the tools and methods to assist
process design. The purpose of our study is to present a framework to assist
and guide process analysts and designers in their task. The Poseidon
framework includes a participative and an analytical design method. The
participative phase uses a clean sheet approach and starts by constructing a
business case table which captures all the business cases represented by a
process. Afterward, an analytical design phase is followed where scheduling
functions are derived from the business case table and are used to build the
structure of a process.
1 Introduction
With the maturity of infrastructures that support e-commerce, it will be possible for
organizations to incorporate Web services as part of their business processes. While in
some cases Web services may operate in an isolated form, it is natural to expect that
Web services will be integrated as part of workflows (Fensel and Bussler 2002).
Workflow systems are a valuable asset for managing e-commerce applications that
span multiple organizations (Sheth, Aalst et al. 1999), since they are capable of
integrating business objects for setting up e-services in an amazingly short time and
with impressively little cost (Shegalov, Gillmann et al. 2001).
A wide spectrum of workflow system architectures has been developed to support
various types of business processes. With small changes, these systems can also
manage Web processes. Cardoso, Bostrom et al. (2004) report that more than 200
workflow products are available in the market. Most of the systems provide a set of
tools which include a graphical application to design workflows and an engine or
enactment system to manage the execution of workflow instances.
1
Research has targeted three main areas: workflow architectures, specification
languages, and process analysis. The workflow architectures developed include fully
distributed (Kochut, Sheth et al. 1999), database oriented (Ceri, Grefen et al. 1997),
web-based (Miller, Palaniswami et al. 1998), message-based (Alonso, Mohan et al.
1994), and agent-based (Jennings, Faratin et al. 1996) architectures. Workflow
research has also contributed to the creation of various specification languages to
model processes. The most well-known included PIF, PSL, BPML, WPDL, WSFL,
BPEL4WS, and DAML-S. Finally, another area of interest has been the analysis of
processes. Since design errors can result in runtime errors which need to be repaired
at high cost, it is important for organizations to check the properties (e.g. correctness
and quality of service) of process definitions before they become operational.
Significant work on Petri-nets and Petri-net-based analysis techniques have been used
to establish the correctness of processes (Aalst 1998). Simulation has also been one of
the selected approaches (Chandrasekaran, Silver et al. 2002) for process analysis.
Recently an increased interest has led to research on the analysis of non-functional
properties of processes (Eder, Panagos et al. 1999; Sadiq, Marjanovic et al. 2000; Son,
Kim et al. 2001; Cardoso, Sheth et al. 2002).
As can be seen from the previous paragraph, workflow architectures, specification
languages, and process analysis have been the major focus of the industry and
research. These areas of research are of recognized importance for the construction of
sophisticated and robust workflow systems. Nevertheless, one important area has been
overlooked, the research of the lifecycle of process application development.
Studies on the lifecycle of process development have been reduced and are almost
inexistent. In 1996, Sheth, Georgakopoulos et al. (1996) established that workflow
and process modeling was one of the outstanding research issues which should be
investigated. Several years later, Casati, Fugini et al. (2002) recognized that despite
the diffusion of workflow systems, methodologies covering the phases of workflow
application development are still missing.
The lifecycle of workflow applications development is comparable to the lifecycle
of software development (Sommerville 2000). It starts with the identification of
requirements and goes on through the design of workflows. Later phases include the
implementation, testing, and documentation of the developed applications. The use of
adequate methodologies to assist the lifecycle of processes development is a key
determinant to the success of any workflow project and requires the availability of
specific tools – different from the ones used in software development – to model each
phase of the cycle.
In this paper, we argue that better methodological support for stepwise creation of
Web processes and workflows that can ensure the fulfillment of business processes’
strategic goals is necessary. The design of processes can be a challenging task,
especially when they are complex. The design methodology needs to guarantee that
the created process definitions are correct and meets the real needs of its users. There
is a call for frameworks and tools which can assist the process analyst and designer to
manage the inherent complexity in Web process applications.
Casati et al. (2002) have undertaken one of the most comprehensive studies on
workflow development. They present a methodology for developing workflow
applications from analysis to implementation. The methodology uses UML, UML
extensions for business process modeling, and introduces new extensions to model
particular features of workflows, such as exception handling and transaction
management. Their work aims to supply an integrated and uniform method to cover
2
the whole workflow development lifecycle. Casati et al. (2002) also reports that some
workflow systems vendors have started to provide methodological support to the
design of workflows, such as AdminFlow provided by HP.
Reijers et al. (Reijers 2003; Reijers, Limam et al. 2003) present a method to design
or redesign a process from a product-based approach. An example given of a product
that can derive a process production is the Bill of Materials (BOM). The method
presented can be used to design a process based on an existing process, from a clean-
sheet approach, or using a reference model. Once one of these three approaches has
been selected, an analytical technique is followed using formal theory to derive a
process design.
Sadiq and Orlowska (1999) propose a framework for workflow modeling based on
layers. The idea is to partition workflows into several graph layers rather than
modeling all the workflow constraints on a single graph. The first phase of the
modeling framework – the structural modeling – captures the flow of execution.
According to Sadiq and Orlowska this is the primary and, perhaps, the most important
aspect of a workflow model. Unfortunately, in their work no methodology is proposed
to drive and guide the structural modeling phase. Only an overall discussion on the
basic elements of workflow graphs (i.e., tasks, conditions, sequences, choice, nesting,
iterations, splits and joins) is given.
Cardoso and Teixeira (1998) describe how a graphical process modeling language
(STRIM (Ould 1995)) can be use to model workflows. Later, Cardoso and Sheth
(2003) worked on the development of mechanisms and algorithms to facilitate the
composition of workflows that model Web process applications. Their approach relies
on the use of the emerging Semantic Web and ontologies to overcome some of the
integration problems, such as the interoperability of heterogeneous Web services.
Compared to Casati et al. (2002), our work targets, not the modeling of the various
phases of the lifecycle of workflow development, but the development of a
framework to assist process analysts and designers to design Web processes and
workflows. The framework, named Poseidon, is to be used during the requirement
and design phase. Poseidon can be viewed as a methodology which structures a
comprehensive set of steps that drives the design of workflows based on requirements
gathered from communication with staff, managers, and experts.
Compared to Reijers et al. (Reijers 2003; Reijers, Limam et al. 2003) work, our
approach is not dominantly analytical and includes a participative and an analytical
design method. The process design is not driven by a product, but by business cases.
In contrast to Sadiq and Orlowska’s work (Sadiq and Orlowska 1999), we have
proposed a framework that not only describes the basic elements of a process, but also
provides instructions to guide process developers to place and organize the various
elements of a process graph. Compared to our previous research (Cardoso and
Teixeira 1998; Cardoso and Sheth 2003), the work presented in this paper is
complementary. In (Cardoso and Teixeira 1998) we target the graphical
representation of processes and workflows (i.e., design phase), then in (Cardoso and
Sheth 2003) our intention is to assist the designer to map tasks to Web services (i.e.,
implementation phase). Now, our objective is to develop a solution to semi-
automatically create a process design from the information gathered during the
requirement phase. The framework facilitates the construction of workflows through
complexity decomposition. In our approach, firstly, business cases are identifies, and
then sequential and parallel building blocks are created, whereupon conditional blocks
are established, before, finally simplifying and implementing the workflow.
3
This paper is structured in the following way. Section 2 presents the requirements
and methodology of our framework. In section 3, we describe the design analysis
phase of workflows and present the Poseidon framework. Section 4 gives the
evaluation of the framework and presents future work. Finally, section 5 presents our
conclusions.
2 Poseidon: Requirements and Methodology
In organizations where business processes are repetitive and predictable, such as
banking and insurance, workflow systems are becoming of critical economic
importance. The importance of workflow systems is also becoming clear in the
context of Web services and Web process. Nevertheless, experience in designing and
deploying workflows has shown that methods to support process development are
practically inexistent.
Thus, new techniques and methods for the specification, design, implementation,
integration, testing, and maintenance are necessary to increase the quality of
workflows and reduce the effort required to produce them.
Due to the lack of suitable tools to assist the development and deployment of Web
processes and workflows, we have created the Poseidon framework. The framework
is to be used by process analysts and designers during the two first phases of the
process development lifecycle, i.e. the requirement gathering and design phases. In
the next two sections we enumerate the initial specifications that have originated the
Poseidon framework and give a brief overview of the methodology and rationale
behind the tool.
2.1 Framework Requirements
The Poseidon framework is a basic conceptual structure composed of steps,
procedures, and algorithms that determine how process design is to be approached.
An organization can select different frameworks to design different types of Web
processes. There is no such a thing as a ‘right’ or ‘wrong’ process development
framework. Nevertheless, some frameworks are more suitable than others for some
type of process application development. If an inadequate framework is selected and
used, this will probably reduce the value and utility of the Web process application
deployed.
Since we recognize that one-size-fits-all frameworks cannot meet the needs of
diverse organizations, we have customized and developed Poseidon bearing the
following requirements in mind:
(cid:1) Simplicity and ease of use. The methodology should be easily understood
by its end users, i.e., process analysts and designers and interviewees
possibly without workflow expertise (e.g. CEOs, managers, and employees.)
(cid:1) Business process size. The framework should support the modeling of small
and medium size business processes. We approximately classify small
workflows as having up to 15 tasks and medium size workflow as having
roughly 30 tasks.
4
(cid:1) Business process structure. The framework should be better suited for
production and administrative processes (McCready 1992) – than to ad hoc
ones – since they are more structured, predictable, and repetitive.
(cid:1) Degree of automation. Based on one of the main advantages and aims of
workflow systems – automation – we hope to develop a methodology which
automates as many of its steps as possible. This will allow for faster process
development with lower design costs.
2.2 Methodology
The intention of this section is to give an overall description of our framework to
construct process graphs based on the knowledge gathered from interviews, group
brainstorming sessions, and meetings (in this paper we will use the term ‘interview’ to
designate these three methods of gathering knowledge).
The interviews are essentially carried out between process analysts and people who
have the expertise and knowledge of the processes’ business logic. The latter group
might, typically include people such as administrative staff, department managers,
and mid-range managers, and even CEOs.
Our framework involves four main phases and for each one we present a
mechanism to support and assist its concretization. In the first phase, by means of
interviews, we build a business case table. The table captures the various cases that a
business process describes. The basic property of a process is that it is case-based
(Aalst 1998). This means that every task is executed for a specific case.
In the second phase, we extract a set of scheduling functions from the business
case table. For each task, a scheduling function is extracted. A scheduling function is
a Boolean function for which the parameters are business variables from the business
case table. Each function models the scheduling of a task at runtime, i.e. for a given
set of business variables and their assertion, the function indicates if a task is
scheduled at runtime or not.
The third phase consists of using the scheduling functions from the previous phase
and identifying the sequential and parallel building blocks (Figure 1) that will make
up the process in development. In Figure 1, nodes represent tasks/activities and
arrows represent transitions. In this phase, we also establish the non-deterministic
routing of a process, i.e. the conditional building blocks.
Sequential Parallel Conditional
B condition B
1 1 1
and-split and-join or-split or-join
A B A B 2 C A B 2 C
condition
2
B condition B
n n n
Figure 1. Example of basic process building blocks
The current framework captures the five basic patterns described in (Aalst, Barros et
al. 2000): sequential routing, AND-split, AND-join, XOR-split, and XOR-join. Those
are the most important patterns, since most process languages are able to model
5
sequential, parallel, and conditional routing. Tasks associated with sequential and
parallel building blocks are executed in a deterministic fashion, while conditional
blocks are examples of non-deterministic routing. Conditional blocks indicate that the
scheduling of a task depends on the evaluation of a Boolean condition or expression
(see Figure 1).
The framework can be extended to include and model additional patterns (Aalst
describes 21 different patterns). Nevertheless, this extension may transform the
framework into a difficult tool to understand. Since one of the principal requirements,
expressed in section 2.1, was simplicity, it is important to analyze the benefits and
costs of adding new patterns to the framework.
In the last phase, we integrate the basic building blocks previously identified with
the non-deterministic blocks. The process is cleanup of any dummy (null) tasks and, if
necessary, the process may be slightly restructured or modified for reasons of clarity.
3 Poseidon framework
The input of the framework presented in this paper is a set of task names, and the
output is a process model or workflow. The process models include tasks or Web
services, transitions, control flow variables, and control flow conditions. The
framework relies heavily on interviews to supply the knowledge which cannot be
inferred automatically.
As already explained, the framework has four major steps which are discussed
individually in the following sections. These are the construction of business case
tables, extraction of scheduling functions, identification of basic block structures, and
the cleaning and implementation of the process graph.
3.1 Business case table
To capture all the cases represented in a process, we introduce the concept of business
case table (a partial example of such a table is shown in Figure 2). The table has the