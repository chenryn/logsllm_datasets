“ lfence \n"
“ rdtsc \n"
“ subl %%esi, %%eax \n"
);
return time_re f resh;
(cid:46) Eviction_set[1]
(cid:46) Eviction_set[w-2]
(cid:46) Time value on %eax
Figure 6: Sequence of possible cache set states during the
attack for the mode 1 or the newest generations, starting with
all elements in the set with age 2.
4.1 Noise tolerance
The proposed attack relies on the order in which the elements
are inserted into the cache set to both avoid misses on the
victim side and to learn information about the data that has
been accessed. If other processes are running and using data
that maps to the same cache slice (introducing noise), the efﬁ-
ciency of the attack can be lessened and also some detection
mechanisms can be triggered.
As mentioned before, the refresh step can reveal such situ-
ations. Then, the attacker can slightly change the approach.
Assuming that only one address is being used by the noise-
generating process, the attacker can easily handle noise, avoid
detection and still gain information about the victim. The
trick to deal with noise is placing the target on a different
place within the set (the second place in this example). In
case somebody else uses any data mapping to that set, the
replaced data belongs to the attacker; speciﬁcally it is the data
placed in ﬁrst place in the set. When the attacker forces a
miss, the eviction candidate will be either the target address
(if the victim did not use it) or the element inserted in third
place (the victim did use the target data). The attacker can
gain information about the victim by reloading the target ad-
dress, and he must begin by refreshing the third element of
the eviction set and ﬁnish with the ﬁrst one which will evict
the “noise” from the cache, so the age of all the blocks is set
to 2 again.
5 Comparison with previous approaches
5.1 Covert channel
In order to study the resolution of the proposed technique
and to characterize it, as well as to compare it with previous
approaches (FLUSH+RELOAD and PRIME+PROBE) we
construct a covert channel between two processes (referred as
sender and receiver) in a similar way as previous works have
done [15, 20, 43]. 2
The sender transmits a 1 by accessing a memory location
from a shared library and a 0 by not-accessing it. Once the
memory location is accessed, he waits for a ﬁxed time and
reads that data again. The receiver monitors the cache utiliza-
tion using each of the aforementioned techniques and deter-
mines whether a 1 or a 0 was transmitted. That is, whether the
victim has used the data or not. The sender and the receiver
are not synchronized.
2The source code for this test can be found at https://github.com/
greenlsi/reload_refresh
1976    29th USENIX Security Symposium
USENIX Association
5) The attacker has to revert the changes. To ensure the Target gets age 2 and its placed in the “ﬁrst” position,             has to be ﬂushed, as it has to be the Target, then the Target is reloaded and ﬁnally        is loaded  22222ev1ev2evw−2Targetev012222ev1ev2evw−2evw−1Targetev01) The attacker ﬁlls the set with the Target address and all the elements of the eviction set except one2) The attacker waits. The next state of the cache depends on whether the victim accesses (a) or not (b) the target address22222ev1ev2evw−2Targetev0a)b)3) The attacker forces a miss by reading             . The evicted element depends on whether the victim had accessed (a) or not (b) the Target.22333ev1ev2evw−223333ev1ev2evw−2ev0a)b)evw−1Targetevw−14) The attacker now reloads the Target address, it will be placed in diﬀerent positions depending on the previous accesses.12333ev1ev2evw−222333ev1ev2evw−2ev0a)b)evw−1Targetevw−1Target22333ev1ev2evw−222333ev1ev2evw−2a)b)TargetTargetevw−1ev0ev06) Accessing the remaining elements of the set will allow the attacker to get the cache as it was on the beginning.22222ev1ev2evw−222222ev1ev2evw−2a)b)TargetTargetev0ev0In each of the experiments executed, the sender reads the
target memory location once during each ﬁxed window of
time. That is, it accesses one memory location (sends 1) and
then waits (transmits 0) for a ﬁxed time before the follow-
ing access. We consider as true positives when the sender
accesses a piece of data and the receiver detects that access.
Similarly, true negatives are non-accesses that are classiﬁed
as 0. In some situations, the processor appears to be perform-
ing other tasks that do not allow the retrieval of information.
Since we do not get these samples, we cannot classify them
and we do not consider them for evaluation.
The PRIME+PROBE attack can be conducted following
different approaches. We do not use the zig-zag pattern that
was intended to avoid changes in the replacement policy [15].
Accessing the elements in a cache set this way increases the
number of false positives since it sometimes fails to remove
the data from the cache. We access the eviction set of size
W always in the same order, and the elements are accessed
as a linked list. If the initial state of the cache is known, this
means that at most we need 2 probes to evict the data from the
cache, in the case when the access to the target happens in the
middle of a probing stage. We have also tested the proposal of
Gruss et al. [20] with the conﬁguration parameters S=W , C=2
and D=2. This approach is faster than accessing the elements
in the eviction set as a linked list and thus, presents better
time resolution. In scenarios where victim and attacker do not
interfere with each other (such as the attack against AES in
section 5.2), the eviction rate of this approach is around 99%.
However, in a different scenario where interference is possible,
as in the case of the attack against RSA (section 5.3) or when
the interval between monitored accesses is low, the number
of false positives slightly increases with this approach. In any
case, both approaches yield to comparable results. We include
in this and the following subsections, results referring to the
PRIME+PROBE attack when the eviction set is accessed as a
linked list.
The results of these experiments in terms of the F-Score
for each ﬁxed time window are presented in Table 2. These
experiments were performed in the i5-7600K machine (Ta-
ble 1). The statistics for each waiting time are computed for
50000 windows. As a result, the number of samples collected
for each experiment is different. Note that when the wait-
ing time between samples is low, both PRIME+PROBE and
RELOAD+REFRESH are not able to distinguish between 1
and 0. PRIME+PROBE presents a slightly better resolution
in our test system. Note that, in this case, we sometimes do
not get two samples for each window (access and idle), we
do not consider as false positives the samples classiﬁed as 1
in that window.
Even when RELOAD+REFRESH has lower resolution
than other attacks, it can be used to retrieve secret keys of
cryptographic implementations. We demonstrate this state-
ment and replicate two published attacks: one against the
T-Table implementation of AES (section 5.2) and one against
Table 2: F-Score for the different attacks when the sender
accesses the data at different and ﬁxed intervals (ns). R+R
stands for RELOAD+REFRESH F+R for FLUSH+RELOAD
and P+P for PRIME+PROBE
Times >
R+R
F+R
P+P
50000
0.988
0.999
0.934
10000
0.975
0.995
0.911
1000
0.925
0.996
0.873
750
0.684
0.991
0.716
500
-
0.989
0.548
250
-
0.981
-
the square and multiply exponentiation implementation in-
cluded in RSA (section 5.3). Although both implementations
have been replaced by new ones, we use them for comparison.
5.2 Attacking AES
The T-Table implementation used to be a popular software
implementation of AES. While still available, this implemen-
tation is not the default option when compiling the OpenSSL
library due to its susceptibility to microarchitectural attacks.
This implementation replaces the SubBytes, ShiftRows and
MixColumns operations with table lookups (memory accesses)
and XOR operations. Since the accesses to the T-Tables de-
pend on the secret key, an attacker monitoring just one line of
each T-Table is able to recover the full AES key.
Our scenario is similar to the one described by Irazoqui et
al. [7], which was later replicated by Briongos et al. [11]. They
focused on retrieving information about the last round of the
AES encryption process, in which the ciphertext is obtained by
performing one XOR operation between an element contained
in the tables and the secret key. As the content of the tables
is publicly available from the source code, they obtained the
secret ﬁnal round key by xoring the table content hold in the
cache line, with the ciphertext.
Besides performing the attack against the AES T-Table
implementation (OpenSSL 1.0.1f compiled with gcc and the
no-asm and no-hw ﬂags) using the RELOAD+REFRESH
(R+R) technique, we have performed the same attack using
the FLUSH+RELOAD (F+R) and PRIME+PROBE (P+P)
techniques, to provide a fair comparison regarding the number
of traces required to obtain the key. In order to retrieve the
whole key, the attacker has to monitor at least one line of each
T-Table. The attacker can monitor from one up to four lines at
a time. For this comparison, we monitor one table at a time.
Table 3 shows the results for each of the approaches. In this
scenario, the attacker performs one operation, then the vic-
tim performs the encryption, and ﬁnally the attacker retrieves
the information about the victim. That is, the victim and the
attacker do not interfere with each other while doing the dif-
ferent operations. To obtain the key we use cache misses [11],
so false positives are measured misses when the victim used
the data in the T-Table. We repeated each experiment until we
have recovered the key 1000 times.
USENIX Association
29th USENIX Security Symposium    1977
Table 3: Mean number of samples required to retrieve each
four byte group of the whole AES key when monitoring one
line per encryption, and the corresponding F-Score.
Attack
Samples
F-Score
R+R F+R
3800
3500
0.98
0.99
P+P
3900
0.97
e
g
a
t
n
e
c
r
e
P
15
10
5
0
no attack
R+R
F+R
P+P
600
700
Cycles
800
900
Figure 7: Distribution of the number of misses induced in the
victim process by the different attacks, and with no attack.
Each includes 1 million of samples
5.2.1 Measurement of LLC misses
RELOAD+REFRESH is able to retrieve an AES key with
a negligible impact on the victim process. We compare the
number of L3 cache misses that the victim suffers per encryp-
tion performed, for all the attacks and for normal executions.
We use the PAPI software interface [46] to read the counters
referring to the victim process. PAPI allows us to insert one in-
struction just before, and another one just after the encryption
process ending to read the L3 cache misses counter, which
is mainly the information used so far for cache attack detec-
tion [10, 13, 36, 64]. Figure 7 shows the resulting distribution
of the number of misses the victim sees for each attack and
for the normal execution of the encryption.
As implied by Figure 7, our attack cannot be distinguished
from the normal performance of the AES encryption process
by measuring the number of L3 cache misses. As we did
for the analysis of the covert channel, when performing the
PRIME+PROBE attack against AES, we access the data in
the same order every time. The reason is that in previous
experiments that we have conducted, the eviction rate we
achieved with the zig-zag pattern was below 80% using just
one probe per measurement.
Additionally, we use the rdtsc instruction to measure the
time it takes to complete each encryption and show the re-
sults in Figure 8. The differences observed in Figure 8 be-
tween the normal encryption and the RELOAD+REFRESH
approach are not signiﬁcant, especially when compared with
the other attacks. The mean encryption time when there
is no attack is 595 cycles, whereas it increases up to 623
cycles when attacked with the RELOAD+REFRESH tech-
nique. This time difference exists because, when suffering the
RELOAD+REFRESH attack, the victim has to load the data
Figure 8: Distribution of the encryption times in different
situations. Each distribution includes 1 million of samples.
(if used) from the L3 cache instead of loading it from the L1
or L2 caches.
5.3 Attacking RSA
RSA is the most widely used public key crypto system for
data encryption as well as for digital signatures. Its security
is based on the practical difﬁculty of the factorization of the
product of two large prime numbers. RSA involves a public
key (used for encryption) and a private key (used for decryp-
tion). There are many algorithms suitable for computing the
modular exponentiation required for both encryption and de-
cryption. In this work we focus on the square and multiply
exponentiation algorithm [17] as Yarom et al. did [61]. As
in the case of AES, this implementation has been replaced
by implementations with no key-dependent memory accesses
that attempt to achieve constant execution times.
Square and multiply computes x = be mod m as a sequence
of Square and Multiply operations that depend on the bits of
the exponent e. If the bit happens to be a 1, then the Square
operation is followed by a Multiply operation. If the bit is
a 0, only a Square operation is executed. As a consequence,
retrieving the sequence of operations executed means recov-
ering the exponent; that is, the key.
As a difference with the attack against AES, we monitor in-
structions instead of data. Additionally, an attack against RSA
needs to have enough time resolution to correctly retrieve
the sequence of operations. As we did before, we performed
the attack using our stealthy technique as well as using the
FLUSH+RELOAD and PRIME+PROBE techniques.
The targeted crypto library is libgcrypt version 1.5.0, which
includes the aforementioned square and multiply implementa-
tion. The key length in our experiments was 2048 bits, and we
collected information for 1000 decryptions per attack. When
attacking RSA, it is possible to monitor all the functions im-
plied in the exponentiation or just one. When monitoring
all the instructions, the attacker is able to reconstruct the se-
quence of observations. If the attacker monitors only one
instruction, he has to use the differences of times between
occurrences of the monitored event to retrieve the key. We
only monitor the Multiply operation.
1978    29th USENIX Security Symposium
USENIX Association
Figure 9 compares part of a trace retrieved using the
RELOAD+REFRESH approach with the real execution of a
RSA decryption operation (we collect timestamps). The trace
corresponding to the real sequence of squares and multiplies
is represented as blue bars with different values: 800 means
a Square was executed and 700 it was a Multiply. The slight
misalignment between the two traces occurs because the RSA
execution timestamp is collected after each exponent bit has
been processed, and the timestamp of the attack samples after
the reload operation has ﬁnished.
The results of our experiments are summarized in table 4.
As in the case of the characterization of the covert channel,
we do not classify as false positive or false negative the sam-
ples that are lost, that is, not collected in time. This situation
happens for about 1-2% of the samples. Since we try to detect
Multiply operations, false positives refer to the situation in
which a Multiply was detected but not executed. The accuracy
is given as the number of correctly classiﬁed samples (True
positives+True negatives) divided by the number of collected
samples during the RSA decryption.
Table 4: Percentage of samples correctly retrieved and false
positives generated by each approach when attacking RSA.