# Volume and Count of Type-1 Port 139 Scanners

Figure 7 illustrates the volume and count of type-1 port 139 scanners over a 24-hour period on December 14, 2003. The left panel shows the number of sources (peaking at 100, with a total of 2,177 sources), while the right panel depicts the volume of type-5 port 139 scanners. Additionally, vertical lines indicate less common short-duration spikes of SYN/ACK and SYN/ACK/RST packets. ICMP TTL exceeded packets may be attributed to routing loops or DoS floods with a low initial TTL.

## Summary of Active Sources of Backscatter Traffic

Table 3 provides a summary of the number of active sources of backscatter traffic, which represents the estimated count of victims of spoofed source attacks. These numbers are averaged over 12 hours, as shown in Figure 5, with each sample taken every 5 minutes. The distribution of backscatter scan types is consistent with previous research [19], and backscatter made up a small percentage (under 5%) of the overall traffic observed on our service-provider sink.

## Controlled Experiment: Infection of a Windows 2000 Host

We conducted a controlled experiment to infect a Windows 2000 host running on VMware with the LovGate worm. The worm uses a dictionary attack, so we expected a machine with a blank administrative password to be easily infected. However, NetBIOS sessions were continually rejected due to name mismatches. We modified the lmhosts file to accept the name *SMB-SERVER, enabling us to capture the worm.

### Verification of LovGate's Scanning Process
We verified that LovGateâ€™s NetBIOS scanning process matched the profile of the type-1 scanners. Disassembling the binary was not possible due to its compressed self-extracting nature. Monitoring the scans from the infected host revealed two key characteristics:
1. The scanning process is deterministic, repeating the same scanning order after every reboot.
2. There are several 5-10 minute intervals during the day where the scanning stops. We conjecture that these gaps occur due to synchronized clocks in the wide area, producing the observed periodicity.

## SMTP Hot-Spot Analysis

The analysis of SMTP (Simple Mail Transfer Protocol) scans in the service provider sink demonstrated the capabilities of an active sink. We identified an SMTP hot-spot, where one IP address attracted a disproportionately large number of SMTP scans (20-50 scans per second). Over a 10-day period in December, we observed over 4.5 million scans from around 14,000 unique IP addresses, all bound to one destination IP within our monitor. A cursory analysis suggested that these scans were from cable-modem and DSL subscribers, with an uncommon TCP SYN fingerprint (win 8192, mss 1456).

### Source of the SMTP Hot-Spot
The possibility of spam software was ruled out due to the non-standard TCP fingerprint. We hypothesized that the source could be a specific cable-modem or DSL device. Setting up an SMTP responder on the target IP address and capturing the incoming email revealed that the source was misconfigured wireless-router/firewall systems from a major vendor. The emails were actual firewall logs.

### Examination of Firmware
To better understand the reasons behind this SMTP hot-spot, we examined the firmware of the firewall system. Using the unarj utility, we extracted the compressed binary but found no match for the hot-spot IP address string. Further examination revealed that the SMTP server entry was left blank by default, leading us to conjecture that the target IP address was the result of an uninitialized garbage value converted to a network-ordered IP address. Each byte in the hot-spot address is a printable ASCII character, and we found a match for this four-byte ASCII string in almost all versions of the firmware.

## Experiences with Recent Worms

Our iSink deployment has been useful in detecting recent worms such as Sasser. Without active response capability, it would be impossible to distinguish existing worm traffic on commonly exploited ports (e.g., port 445) from new worm activity. Our active response system enabled accurate detection of Sasser and more fine-grained classification of several variants. Prior to the release of Sasser, we also observed early exploits on the lsarpc service, which could be attributed to certain strains of Agobot. Figures 8 and 9 illustrate the interaction of RBOT.CC, a more recent virus that exploits the lsarpc vulnerability, with the Active Sink.

## Basic Performance

One of the primary objectives of the iSink design is scalability. We performed scalability tests using both TCP and UDP packet streams. The experimental setup involved four 2GHz Pentium 4 PCs connected in a common local area network. Three PCs were designated as load generators, and the fourth was the iSink system that responded to all ARP requests destined to any address within one class A network. Figure 10 demonstrates the scalability of LaBrea and the Click-based Active Sink under TCP and UDP stress tests. The primary difference between the TCP and UDP tests is that the TCP connection requests cause the iSink machine to respond with acknowledgments, while the UDP packets do not elicit a response. Ideally, the number of outbound packets should equal the number of inbound packets. The Click-based Active Sink scales well to TCP load with virtually no loss up to about 20,000 packets (connection attempts) per second, while LaBrea performance starts to degrade at about 2,000 packets. For the UDP test, both LaBrea and the Active Sink performed well, with LaBrea experiencing a 2% loss rate at about 15,000 packets/sec.

## Sampling

Connection sampling can greatly benefit an iSink architecture for three reasons: reduced bandwidth requirements, improved scalability, and simplified data management and analysis. We considered two different resource constraint problems in the passive portion of the iSink and evaluated the use of sampling to address these constraints.

### Memory Constrained iSink Sampling
The method used for memory-constrained iSink sampling is called Sample and Hold [6]. This method accurately identifies flows larger than a specified threshold (i.e., heavy hitters). It involves simple random sampling and a hash table to maintain flow IDs and byte counts. Incoming packets are randomly sampled, and entries in the hash table are created for each new flow. After an entry is created, all subsequent packets belonging to that flow are counted. While this approach can result in false positives and negatives, its accuracy is high in workloads with varied characteristics. We apply sample and hold in iSink to identify the worst offending source addresses based on the observed number of scans.

### Bandwidth Constrained iSink Sampling
In the bandwidth-constrained scenario, the sampling design problem is to select a set of subnets from the total address space available for monitoring on the iSink. The selection of the number of subnets to monitor is based on the bandwidth constraints. We assume knowledge of the mean and variance for traffic volume on a typical class B or class C address space. We then divide the available bandwidth by this value to determine the number of subnets that can be monitored. The next step is to select specific subnets within the entire space to minimize the error introduced in estimates of probe populations.