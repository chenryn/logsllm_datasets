Module 2
Typical goals of malware and their 
implementations
https://github.com/hasherezade/malware_training_vol1
Dissecting a Banking Trojan
Banking Trojans - families
• Zbots – (a family of various forks of the ZeuS code)
• IcedID
• Tinba
• Gozi (and Gozi-based)
• Kronos
• TrickBot (some of the modules)
• ...and others
Elements of a Banking Trojan
• Classic banking trojans modify the content of selected websites (related to banking  
transactions)
• Webinjects
• Webgrabbers
• An important element of a banking trojan is MITB proxy (Man-In-The-Browser)
• MITB proxy is a local proxy via which the traffic is bypassed and modified
• Sometimes to bypass the protections used by banks, the operator needs to remotely 
access and use the victim machine (using Hidden VNC)
Elements of a Banking Trojan
Malicious implant
Malware core module
Communicate 
with the C2 
server
Browser process
A process running malware core
Elements of a Banking Trojan
• Malware can run its own Proxy server to which the browser will connect, whenever it 
tries to connect with the target address
• The redirection is implemented by hooking the function responsible for establishing the 
connection
• The traffic that bypassed by the malicious proxy is parsed, and may be augmented with 
webinjects
Operation of a Banking Trojan
• Instead of connecting directly to the remote server, the browser connects to the local 
proxy, run by the malware’s core module
infected
Operation of a Banking Trojan
• The requested page is first processed by the malicious proxy...
original
Operation of a Banking Trojan
• The proxy uses a special template to know where to implant the webinjects
• When the pattern is found, the malicious code is implanted
infected
MiTB Proxy - implementation
• Run a local proxy able to parse HTTP/HTTPS traffic
• Requires generating your own certificate
• Redirect all the HTTP/HTTPS traffic via the local proxy:
• Hook functions in the browser:
• 1) the functions responsible for establishing the connection
• 2) the functions responsible for accepting the certificate
• Parse and augment the traffic
MiTB Proxy – hooks example
• The functions responsible for establishing connection:
• The functions responsible for accepting the certificate
Ws2_32.connect
Nss32.SSL_AuthCertificateHook
Example: Iced ID (Firefox)
MiTB Proxy – hooks example
• The functions responsible for establishing connection:
• The functions responsible for accepting the certificate
Ws2_32.connect
mswsock.dll + RVA:0x7852
Crypt32.CertGetCertificateChain
Crypt32.CertVerifyCertificateChainPolicy
Example: Iced ID (IExplore)
MiTB Proxy – hooks example
• The functions responsible for establishing connection:
• The functions responsible for accepting the certificate
Ntdll.NtDeviceIoControlFile -> args: AFD_CONNECT, AFD_X32_CONNECT
Crypt32.CertGetCertificateChain
Crypt32.CertVerifyCertificateChainPolicy
Example: SilentNight Zbot 
(IExplore)
MiTB Proxy – hooks example
• The functions responsible for establishing connection:
• Instead of API hooking, the certificate is installed by Certutil
Ntdll.NtDeviceIoControlFile -> args: AFD_CONNECT, AFD_X32_CONNECT
Example: SilentNight Zbot 
(Firefox)
Traffic redirection–examples
• We are given a dump of the implants found in the browser process by PE-sieve. Analyze 
what hooks have been installed and how do they implement the traffic redirection 
Case-study time...
Webinjects – implementation
• The definitions of Webinjects following the ZeuS standard:
set_url https://* G
data_before
data_end
data_after
data_end
data_inject
INJECT
data_end
P - run on POST request.
G - run on GET request.
L - if this symbol is specified, then the 
launch occurs as an HTTP grabber, if not
specified, then as an HTTP injection.
H - complements the "L" character, saves 
content without HTML tag clipping. In normal
mode, all HTML tags are deleted, and some are 
converted to the newline or space
character.
I - compare the case-sensitive url parameter 
(for the English alphabet only).
C - compare case insensitive (for the English 
alphabet only).
B - block execution of the injection.
Webinjects – implementation
• The webinjects are installed following a configuration file, that is usually downloaded from 
the C2 server
Example:Silent Night Zbot (Internet Explorer)
Webinjects – implemantation
• After decrypting the traffic we can see the familiar patterns:
Example:Silent Night Zbot (Internet Explorer)
Webinjects - implementation
• The definitions of Webinjects in the malware configuration file:
https://gist.github.com/hashereware/07b9c2a8624498030a942fccf277bbdb#file-webinjects1-txt-L80
Webinjects - implementation
• This is where the observed script came from...
Hidden VNC – the idea
• In order to perform some banking operations, the attackers need to use a VNC on the 
victim machine
• In a normal case, the victim could see the attacker’s movements on their desktop
• In order to hide it, the attackers use the feature of alternative desktops
• this feature is well-known to Linux users, but not common – yet feasible - on Windows
• You can create an alternative Desktop on Windows, and switch some applications to be 
displayed there
• Example: https://github.com/MalwareTech/CreateDesktop/
Hidden VNC – overwiew
Send screenshots
Clicks, movements
Send screenshots
HiddenVNC module
The malware operator
Create the Hidden Desktop
Perform the actions on the Hidden 
Desktop
Get updated state
Render a local view
Perform the actions on the local view
Update the local view
Hidden VNC - rendering
• Windows renders only the elements for the currently active desktop – so, using the 
alternative desktop simultaneously is not easy: requires manual implementation of the 
rendering
• EnumDesktopWindows – get list of all Windows running on the Desktop
• PrintWindow – render the window to a bitmap
• messages: WM_PRINT, WM_PRINTCLIENT
• Some applications don’t handle those messages: so, the malware has to hook them, and 
provide its own implementations
• It can be implemented i.e. by hooking user32.dll, or window subclassing 
(SetWindowLong , SetWindowLongPtr)
Hidden VNC – user input
• The messages about the user input (keyboard, mouse, etc) will be send only the active 
Desktop
• The Hidden VNC module has to implement emulation of a virtual keyboard and mouse
• It requires keeping track of every window on the Hidden Desktop, each locations, and on 
which of them the mouse cursor is
• Sending PostMessage to the active window to emulate the user input
Hidden VNC – examples
• Many Banking trojans use Hidden VNC as a separate module
• IcedID („helpdesk” module)
• 2959091ac9e2a544407a2ecc60ba941b – helpdesk.dll
• Silent Night Zbot (hvnc32.dll/hvnc64.dll) 
• 7ee0fd4e617d98748fbf07d54925dc12 – hvcn32.dll
Case-study time: open the provided Hidden VNC sample in IDA 
Further readings...
• The “Silent Night” Zloader/Zbot:
• https://resources.malwarebytes.com/files/2020/05/The-Silent-Night-Zloader-Zbot_Final.pdf