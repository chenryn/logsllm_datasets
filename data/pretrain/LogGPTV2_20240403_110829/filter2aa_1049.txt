### Module 2: Typical Goals of Malware and Their Implementations

#### Dissecting a Banking Trojan

**Banking Trojans - Families:**
- **Zbots:** A family of various forks of the ZeuS code.
- **IcedID**
- **Tinba**
- **Gozi (and Gozi-based)**
- **Kronos**
- **TrickBot (some modules)**
- ...and others

**Elements of a Banking Trojan:**
- **Website Content Modification:** Classic banking trojans modify the content of selected websites related to banking transactions.
- **Webinjects:** Code injected into web pages to steal or manipulate data.
- **Webgrabbers:** Tools that capture and exfiltrate sensitive information from web sessions.
- **MITB Proxy (Man-In-The-Browser):** A local proxy through which traffic is redirected and modified. This is a crucial element for bypassing bank protections.
- **Remote Access:** In some cases, the operator needs to remotely access and use the victim's machine using Hidden VNC to perform complex operations.

**Malicious Implant Structure:**
- **Malware Core Module:** The main component that communicates with the C2 server.
- **Browser Process:** A process running the malware core.
- **Proxy Server:** The malware can run its own proxy server, to which the browser connects whenever it tries to connect to the target address. This redirection is implemented by hooking the function responsible for establishing the connection.
- **Traffic Parsing and Augmentation:** The traffic that bypasses the malicious proxy is parsed and may be augmented with webinjects.

**Operation of a Banking Trojan:**
1. **Connection Redirection:** Instead of connecting directly to the remote server, the browser connects to the local proxy run by the malware’s core module.
2. **Page Processing:** The requested page is first processed by the malicious proxy.
3. **Webinject Implantation:** The proxy uses a special template to know where to implant the webinjects. When the pattern is found, the malicious code is implanted.

**MiTB Proxy Implementation:**
- **Local Proxy Setup:** Run a local proxy capable of parsing HTTP/HTTPS traffic. This requires generating your own certificate.
- **Traffic Redirection:** Redirect all HTTP/HTTPS traffic via the local proxy by hooking functions in the browser:
  - Functions responsible for establishing the connection.
  - Functions responsible for accepting the certificate.
- **Traffic Parsing and Augmentation:** Parse and augment the traffic as needed.

**MiTB Proxy - Hooks Example:**
- **Iced ID (Firefox):**
  - Connection: `Ws2_32.connect`
  - Certificate: `Nss32.SSL_AuthCertificateHook`
- **Iced ID (IExplore):**
  - Connection: `Ws2_32.connect`, `mswsock.dll + RVA:0x7852`
  - Certificate: `Crypt32.CertGetCertificateChain`, `Crypt32.CertVerifyCertificateChainPolicy`
- **SilentNight Zbot (IExplore):**
  - Connection: `Ntdll.NtDeviceIoControlFile -> args: AFD_CONNECT, AFD_X32_CONNECT`
  - Certificate: `Crypt32.CertGetCertificateChain`, `Crypt32.CertVerifyCertificateChainPolicy`
- **SilentNight Zbot (Firefox):**
  - Connection: `Ntdll.NtDeviceIoControlFile -> args: AFD_CONNECT, AFD_X32_CONNECT`
  - Certificate: Installed by `Certutil` instead of API hooking.

**Traffic Redirection - Examples:**
- Analyze the hooks installed in the browser process using PE-sieve. Understand how they implement traffic redirection.

**Webinjects - Implementation:**
- **Configuration File:** Webinjects are installed following a configuration file, usually downloaded from the C2 server.
- **ZeuS Standard Definitions:**
  - `set_url https://* G`: Defines the URL and request type (GET).
  - `data_before`, `data_end`, `data_after`: Define the injection points.
  - `P`: Run on POST request.
  - `G`: Run on GET request.
  - `L`: If specified, the launch occurs as an HTTP grabber; otherwise, as an HTTP injection.
  - `H`: Complements the "L" character, saving content without HTML tag clipping.
  - `I`: Compare the case-sensitive URL parameter (for the English alphabet only).
  - `C`: Compare case-insensitive (for the English alphabet only).
  - `B`: Block execution of the injection.

**Hidden VNC - Overview:**
- **Purpose:** Attackers need to use a VNC on the victim's machine to perform some banking operations.
- **Visibility Issue:** In a normal case, the victim could see the attacker’s movements on their desktop.
- **Alternative Desktops:** To hide the VNC, attackers use the feature of alternative desktops, which is well-known to Linux users but less common on Windows.
- **Implementation:**
  - Create an alternative desktop.
  - Switch some applications to be displayed there.
  - Example: [CreateDesktop GitHub Repository](https://github.com/MalwareTech/CreateDesktop/)

**Hidden VNC - Operation:**
- **Rendering:**
  - Windows renders only the elements for the currently active desktop, so using an alternative desktop simultaneously requires manual implementation of rendering.
  - Use `EnumDesktopWindows` to get a list of all windows running on the desktop.
  - Use `PrintWindow` to render the window to a bitmap.
  - Handle messages like `WM_PRINT` and `WM_PRINTCLIENT`.
  - Hook user32.dll or use window subclassing (`SetWindowLong`, `SetWindowLongPtr`) for applications that don’t handle these messages.
- **User Input:**
  - Messages about user input (keyboard, mouse) are sent only to the active desktop.
  - The Hidden VNC module must emulate a virtual keyboard and mouse.
  - Keep track of every window on the hidden desktop, their locations, and the mouse cursor position.
  - Send `PostMessage` to the active window to emulate user input.

**Hidden VNC - Examples:**
- Many banking trojans use Hidden VNC as a separate module.
- **IcedID (Helpdesk Module):** `helpdesk.dll` (MD5: 2959091ac9e2a544407a2ecc60ba941b)
- **Silent Night Zbot:** `hvnc32.dll/hvnc64.dll` (MD5: 7ee0fd4e617d98748fbf07d54925dc12)

**Case Study:**
- Open the provided Hidden VNC sample in IDA for analysis.

**Further Readings:**
- [The “Silent Night” Zloader/Zbot Report](https://resources.malwarebytes.com/files/2020/05/The-Silent-Night-Zloader-Zbot_Final.pdf)

For more detailed information and examples, refer to the [GitHub repository](https://github.com/hasherezade/malware_training_vol1).