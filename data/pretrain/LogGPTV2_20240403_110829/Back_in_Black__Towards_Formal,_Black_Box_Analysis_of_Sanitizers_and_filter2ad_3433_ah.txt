case where one produces a large number of candidate
attack strings, but no bypass is found. Then, the audi-
tor is left with no additional information for the ﬁlter,
other than it rejected the set of strings that was tested.
One approach would be to try to infer the structure of
an automaton from that set of strings. Unfortunately,
inferring the minimal automaton which is consistent
with a set of strings is NP-Hard to approximate even
within any polynomial factor [47]. On the other hand,
as we demonstrate our GOFA algorithm is able to
recover on average 90% of the states of the target
ﬁlter in cases where no attack exists and an expressive
enough grammar is given as input.
B. Approximating a Complete Equivalence Oracle
Although the GOFA algorithm is a suitable equivalence
oracle implementation in the case the goal is to audit a target
ﬁlter, in some cases one would like to recover a complete
model of the target ﬁlter/sanitizer. In such cases, ﬁnding a
bypass is not enough. Since we only assume black-box access
to the target ﬁlter, in order for this problem to be even solvable
we have to assume an upper bound on the size of the target
ﬁlter. In this case, The Vasilevskii-Chow(VC) algorithm [44]
exists for checking compliance between a DFA and a target
automaton given black-box access to the second.
However, if the DFA at hand has n states and the upper
bound given is m then the VC algorithm is exponential
in m − n. Moreover, the algorithm suffers from the same
limitations in the alphabet size as DFA learning algorithms
since every possible transition of the black-box automaton
must be checked. Creating a symbolic version of the VC
algorithm may be possible however, we will again only get
probabilistic guarantees on the correctness of our equivalence
oracle.
Another option is to construct a context free grammar
describing the input protocol under which the sanitizer should
operate and then use random sampling from that grammar
to test whether the hypothesis and the target programs are
complying. For example, when we test HTML Encoders we
might want to construct a grammar with a number of different
character sequences such as encoded HTML entities or special
characters and test the behavior of the encoder under these
strings. We employ this approach in our experiments.Finally,
static analysis techniques [7] can be used to generate a CFG
describing the output of another implementation of the same
Fig. 9. General structure of a BEK program.
sanitizer or ﬁlter and then cross check the generated CFG with
the target sanitizer using our ﬁngerprint algorithm.
C. Converting Transducers to BEK Programs
In this section we will describe our algorithm to convert
ﬁnite state transducers into BEK programs. The assumptions
we have is that the transducers given to our algorithm are
single-valued transducers with bounded lookahead and domain
∗. Due to lack of space, we won’t describe here the full
Σ
speciﬁcation of the BEK language. We urge the interested
reader to refer to the original BEK paper [8] as well as to
the online tutorial [48].
Figure 9 presents the general template of a BEK program.
In a nutshell
the BEK language allows one to deﬁne an
iterator over the input string. In addition, a predeﬁned number
of registers taking integer values can be used. Inside the
iterator loop an outer switch-case statement is placed, with
guards deﬁned by the programmer. Inside each case loop the
programmer is allowed to place an if-then-else statement with
an arbitrary number of else-if statements and a ﬁnal else
statement. In order to produce an output symbol the yield
statement is used, which can also produce multiple output
symbols. After the main iteration over the input is over, a BEK
program can have a ﬁnal series of case statements which will
be evaluated over the register variables deﬁned on the program
after exiting the input iteration. We call these statements the
end part of the iterator.
The overall construction is straightforward in the case the
transducer is determinstic: We deﬁne a register s which at
each point of the computation holds the current state of the
transducer. The outer case loop of the program checks the
state number while, an internal if-then-else chain matches the
current input character and afterwards, sets the next state and
yields the corresponding symbol of the transition, if any.
Unfortunately, when a bounded lookahead is present a
more complicated situtation arises, because the BEK language
cannot process more than one input characters at each iteration.
Thus, the program needs to manually store a buffer and keep
track of all the alternative states the transducer might be in
until a lookahead is matched or discarded.
In fact, as we demonstrate in appendix E, this complexity
can easily lead to errors in BEK programs. Indeed, we found
a problem in an HTML decoder program which was given
as an example in the BEK tutorial. The problem occured
because the BEK program was not taking into account all
possibilities when a lookahead string was partially matched
and then discarded.
The overall structure of a BEK program with lookahead
transitions is similar with the basic structure. However, we add
107107
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:12:23 UTC from IEEE Xplore.  Restrictions apply. 
additional guards in all states that can be part of a lookahead
transition as follows:
Consider each path starting in a ﬁnal state qsrc and ending
in a ﬁnal state qdst through a path of non ﬁnal states, while
consuming an input string r, |r| = k and generating an output
o. In other words this path is a lookahead transition which
consumes the input string r and produces the string o. Then
we perform the following:
1)
2)
3)
For each preﬁx of r, ri for all i  γ
(cid:2)
i aiχi ≥ θ means that, for all (cid:7)χ ∈ Σ
x  0 this means that at a previous stage of the binary
search process, jleft was a middle point and a decision to go
right was made. In turn this implies that γjleft = γ0. However
by assumption γj (cid:11)= γ0 and thus there must be an index in
[jleft, j − 1] that belongs to J ∗, a contradiction.
Proof: (Sketch) (of Theorem 3) The algorithm starts with
the empty string as the sole access string and attempts to
close the observation table by issuing transduction queries.
Eventually the table will become closed, possibly with the
109109
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:12:23 UTC from IEEE Xplore.  Restrictions apply.