### 优化后的文本

#### 房屋选择的类比
以购房为例，如果您的选房标准始终是市中心、交通便利且价格适中，那么符合条件的房子非常稀少，通常在您发现时已经被他人购买。不妨转变思路，考虑市郊的房产。尽管交通可能稍逊一筹，但价格更为亲民，且您或许可以买到更大、质量更好的房子。通过调整选房策略，您可以更快找到满意的房源。

#### 散列表中的多重散列函数
对于散列表，我们可以预先准备多个散列函数：
\[ f(key) = RH_i(key) \quad (i=1,2,\ldots,k) \]
这里 \(RH\) 表示不同的散列函数，例如除留余数法、折叠法和平方取中法等。当发生散列冲突时，切换到下一个散列函数进行计算，直到找到一个不冲突的位置。这种方法能够避免关键字聚集，但会增加计算时间。

#### 链地址法
另一种解决冲突的方法是链地址法。将所有具有相同散列值的关键字存储在一个单链表中，称为同义词子表。散列表中仅存储这些子表的头指针。例如，对于关键字集合 \([12, 67, 56, 16, 25, 37, 22, 29, 15, 47, 48, 34]\)，使用12为除数的除留余数法，可得到如图8-11-1所示的结构。此时，无论有多少冲突，都只是在当前位置向单链表添加节点的问题。

![链地址法](图8-11-1)

链地址法确保了即使在高冲突情况下也能找到存储位置，但查找时需要遍历单链表，可能会带来性能损耗。

#### 公共溢出区法
公共溢出区法更为直观：将所有冲突的关键字集中存储在一个单独的溢出区。例如，若关键字 \([37, 48, 34]\) 与之前的位置冲突，则将其存储在溢出表中，如图8-11-2所示。

![公共溢出区法](图8-11-2)

在查找时，首先通过散列函数计算出散列地址，然后与基本表中的相应位置比较。如果不相等，则在溢出表中顺序查找。如果冲突数据较少，公共溢出区法的查找性能仍然很高。

#### 散列表查找实现
接下来，我们看看散列表查找的具体实现代码。

##### 定义散列表结构
```c
#define SUCCESS 1
#define UNSUCCESS 0
#define HASHSIZE 12
#define NULLKEY -32768

typedef struct {
    int *elem; // 数据元素存储基址，动态分配数组
    int count; // 当前数据元素个数
} HashTable;

int m = 0; // 散列表长度，全局变量
```

##### 初始化散列表
```c
Status InitHashTable(HashTable *H) {
    H->count = m;
    H->elem = (int*)malloc(m * sizeof(int));
    for (int i = 0; i < m; i++) {
        H->elem[i] = NULLKEY;
    }
    return OK;
}
```

##### 散列函数
```c
int Hash(int key) {
    return key % m; // 除留余数法
}
```

##### 插入关键字
```c
void InsertHash(HashTable* H, int key) {
    int addr = Hash(key); // 计算散列地址
    while (H->elem[addr] != NULLKEY) { // 如果不为空，则冲突
        addr = (addr + 1) % m; // 线性探测
    }
    H->elem[addr] = key; // 插入关键字
}
```

##### 查找关键字
```c
Status SearchHash(HashTable H, int key, int *addr) {
    *addr = Hash(key); // 计算散列地址
    while (H.elem[*addr] != key) { // 如果不为空，则冲突
        *addr = (*addr + 1) % m; // 线性探测
        if (*addr == Hash(key)) { // 如果循环回到原点
            return UNSUCCESS; // 关键字不存在
        }
    }
    return SUCCESS;
}
```

#### 散列表查找性能分析
最后，我们简要分析散列表查找的性能。理想情况下，如果没有冲突，散列查找的时间复杂度为 \(O(1)\)。然而，在实际应用中，冲突不可避免。影响平均查找长度的因素包括：

1. **散列函数的均匀性**：好的散列函数能减少冲突频率。
2. **处理冲突的方法**：不同方法（如线性探测、二次探测、链地址法）对平均查找长度有不同影响。
3. **散列表的装填因子**：装填因子 \(\alpha = \frac{已填入记录数}{散列表长度}\) 标志着散列表的满程度。装填因子越大，冲突可能性越高。

为了保持高效的查找性能，通常会选择合适的装填因子，并设置较大的散列表空间。

#### 总结回顾
本章围绕“查找”主题展开讨论，介绍了查找表、记录、关键字等概念。顺序查找虽然简单，但它是许多其他查找方法的基础。折半查找、插值查找和斐波那契查找在有序查找中表现出色。索引技术广泛应用于文件检索、数据库和搜索引擎等领域。二叉排序树和平衡二叉树（AVL树）是动态查找的重要数据结构。B树和B+树针对内外存之间的存取进行了优化。散列表是一种高效的查找数据结构，适用于对查找性能要求高且记录间无关联的数据。

#### 结尾语
我们的“Search”技术探索之旅结束了，但您的探索才刚刚开始。当前流行的搜索引擎虽强大，但仍存在不足。例如，搜索关键词不够精确时，结果可能不尽如人意。未来搜索技术的发展方向值得我们进一步探讨。