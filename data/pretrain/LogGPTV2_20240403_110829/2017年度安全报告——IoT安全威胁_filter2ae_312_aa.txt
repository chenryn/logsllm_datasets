# 2017年度安全报告——IoT安全威胁
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## Internet of Things — Security
> 近年来，物联网技术的普及和快速发展让越来越多设备智能化，在公共领域，智慧环境 ( 家庭，办公，工厂 )
> 领域，个人和社会领域等方面都有深入应用，新的技术和设备引入也带来了新的安全和隐私风险。该报告将探讨2017 年整年关于 IoT(Internet of
> Things) 设备相关的安全问题。
通过对市面设备的分析和已爆发的 IoT 安全事件回顾，我们观察到以下问题。
#### 安全漏洞
安全漏洞是一个必然存在的问题，但必要的安全开发规范和习惯会减少漏洞的产生。
#### 不安全通信
很多现有成熟的安全功能设计是可以复用到 IoT 设备中的，但依旧存在以下不安全通信的问题。
  * 未经认证的通信
  * 未加密的通信
  * 验证授权问题
  * 缺乏必要的网络隔离
#### 数据泄露
很多物联网设计方案依托于云端， 设备和云端处理通信，也会设备之间互相通信，均可能存在数据泄漏风险 ( 用户信息，隐私， keychain 等 )。
#### 云端泄漏
云端服务面临传统云安全挑战， 但因为和物联网的融合， 一旦云端沦陷， 将影响接入的物联网安全。  
设备之间泄漏
#### 开发设计安全意识
由于开发设计阶段人员安全意识不足，导致设备原生就存在安全弱点，易被攻击。
#### 硬编码问题
由于开发过程不规范，导致私钥，API KEY，链接服务端密码被硬编码到固件，导致信息泄露所带来的安全问题。
#### 默认身份认证凭据 ( 密码，口令 )
许多 IoT 设备使用相同的默认密码， 且用户无法主动修改密码。
#### 硬件安全
IoT 设备一定会涉及嵌入式设备硬件， 硬件本身安全性也应考虑其中， 如串口， 一旦缺乏必要的认证机制， 暴露给攻击者， 攻击者可以很容易查找到敏感信息，
dump 固件， 从而导致上述任意一环安全问题。
由这些安全问题， 整个 IoT 生态也爆发了一系列安全事件曝光于眼前， 也有大量没有曝光， 依旧暗藏于互联网空间中。
#### IoT 设备的严重碎片化
由于 IoT 暂时属于新生事物， 各个厂商有不同的设备功能， 实现， 版本， 难免出现众多安全问题。
#### Nday 重复利用
同一厂商的不同产品由于实现类似功能时复用代码， 有可能已披露的漏洞在某一产品修复但依然可以攻击另一产品。
#### 不安全的第三方
引用不安全的第三方库引发对自身产品的安全影响。
#### 完整性和签名校验
对于 IoT 设备来说， 完整性校验和签名校验可以有效的对抗漏洞利用， 涉及到从 BootLoader 到 OTA 的各个阶段， 甚至可以到网络通信过程。
  * 易感染恶意代码
  * 易被篡改功能通信实现 IoT 设备本身的恶意行为
  * 获取敏感信息，隐私等
#### Mirai 及其变种
2016 年爆发的 Mirai 事件经过一年的沉淀， 依旧对互联网产生着影响， 尤其是作者公开源代码后， 各种 Mirai变种 ” 百花齐放 “，
不少变种比 Mirai 原本更具有攻击性。
#### IoT_reaper
IoT_reaper 脱胎于 Mirai， 但在诸多方面更是优于 Mirai， 放弃弱口令攻击模式， 转而直接对 IoT 设备进行漏洞利用。
#### Satori
Satori 同样源于 Mirai， 除了在利用漏洞方面青出于蓝胜于蓝外， Satori 还有自扫描模块， 更加方便蠕虫的传播。
#### Hajime
Hajime 和 Mirai 不 同 的 是， 这 是 一 个 低 调 的 P2P botnet， 产生后并没有在公众视野过于张扬， 只是藏于暗处闷声发财，
由于是一个 P2P botnet， 安全人员很难通过黑名单对Hajime sinkhole。
#### IoT 挖矿
随着匿名货币龙头 BTC 的暴涨， 整个匿名数字货币水涨船高， 其匿名， 安全， 无法追踪的特性， 给网络黑产滋生带来了春天， 从今年 5 月的
SambaCry 漏洞后， 我们观察到大量野外利用攻击 IoT 设备进行 CPU 算力货币挖掘 (XMR 门罗币 )，IoT
设备的数量优势以及漏洞修复推送不及时等原因让其成为挖矿黑产里的新贵。
#### DDoS
无论是 Mirai 还是变种或任意 IoT botnet， 其变现要么挖矿， 要么 DDoS。
## IoT 安全方向讨论
IoT 设备所直面的安全和隐私风险挑战最终会在用户使用设备时完全体现， 由于 IoT 设备比传统的 PC 设备或服务器设备更加贴近用户态，
关联到的隐私数据或财产数据比传统设备更多， 这也使得攻击者青睐于这一新兴事物 ; 其次， IoT
设备通常不会提供清晰完整的控制部署文档，也不会告知再部署设备时有可能带来的风险， 这使得用户对设备完全处于黑箱状态， 当安全和隐私收到威胁时感知度不高。
#### 用户心态
大多用户都是非技术人员或者对技术不感兴趣的群体， 这样的最终用户不具备评估隐私和安全的专业能力， 所以导致弱口令泛滥， 版本不升级等情况。
#### 互联网接入
大量暴露在公网的 IoT 设备， 带来了恶意软件和漏洞利用的落地入口。
#### 设备基数
IoT 设备由于大部分价格成本较低， 所以数量庞大， 大量的IoT 设备基数也就使得易被攻击的比例增多，
数量庞大的设备能带来的变现能力和攻击能力更是不能小觑， 2016 年的 Mirai 事件就是最好证明。
#### 设备功能特性
很多 IoT 设备贴合用户隐私， 如摄像头， 麦克风， 门锁，医疗设备， 智能穿戴支付等， 和用户贴合越密切， 越容易泄露敏感信息， 偷听， 偷窥，
远程打开门锁， 盗刷支付等。
#### 易攻击性
许多 IoT 设备都不遵循安全性的最佳实现， 这使得攻击 IoT设备门槛变低， 单带来的影响却变高。
## IoT 威胁分析
这一部分我们会针对不同切入点从技术角度讨论 IoT 的安全性，并将通过回顾 2017 一整年事件作为表现方式。
### IoT 不安全通信
在厂商与厂商的合作之间势必会相互开放接口或者通信密钥以及一系列相关资源，这就导致了，但凡有一家合作厂商的安全做的不够出色，这就导致了短板效应的出现而拉低了众多厂商的安全等级。A
厂商和 C 厂商的合作使得 A 厂商几乎只承担的了集成 SDK 的成本就获得了一项智能家居产品，而 C 厂商也仅仅是提供了
SDK就拓宽了自己的销售渠道，这样的合作模式肯定受到双方欢迎的，但是这之间的安全问题是值得关注的。
  * 通信的密钥
  * 身份 TOKEN
  * 完整的设备信息
  * 完整的控制请求
根据上述的问题，再结合一定的分析往往就能很容易的得出一份令人满意的漏洞。
#### 认证绕过导致接管设备
智能硬件的人机交互很多由 APP 控制，如果 APP 存在安全问题，这就会导致许多隐患：
  * 通信模型设计不当
  * 验证认证流程存在绕过，或极不完善
  * 查询接口权限认证粗糙
  * 涉及服务器敏感信息泄露
逆向某智能家居 APK
通过简单的认证流程模拟，由一个手机号即可获取大量设备关键信息，甚至控制密码。
通过手机获取设备信息
再根据已掌握的信息，进行设备控制指令的生成也是十分简单进而完全控制设备。
完全控制设备
在远程控制解决方案上，互联网层面多由 XMPP 协议进行通信，但部分厂商在使用上仅仅着手于 XMPP
协议的及时性和开放性，对于一些必要的安全措施并没有进行良好的设计。某厂商该特意设计了一个控制服务器，来接受和记录设备的绑定以及设备状态查询的服务，该服务器没有任何权限设置，也没有token
校验，可以抓包后任意重放，从而获得任意设备 mac 所绑定的用户手机号，同时，还有以下安全问题 ：
  * 在服务器上存储用户设备控制密码
  * 对设备控制权限变更⽆校验，任何人可以在任何情况下对设备进行重新绑定，解绑，添加信任用户等危险操作
  * 并在特殊的构造下，可以直接获取到任意设备的控制密码
在通信过程中消息内容采用固定格式：
    wan_phone%015bee58-xxxx-xxxx-xxxx-31598127xxxx%password%open%relay
在 局 域 网 内 设 备 采 用 UDP 无 连 接 通 信， 通 过 向 设 备 发 送 连 续UDP 报获取设备信息，通过构造控制指令，变换 mac
地址即可批量完全控制设备。
#### 小结
由于设备不安全通信 , 攻击者对现有用户会产生用户敏感信息泄露 和IoT 设备为攻击者大开方便之门的安全问 题 .
最终甚至危害到广大用户的人身以及财务安全。
#### 已有的改进
  * 尽量避免了将设备直接暴露在公网中
  * 已有一些通信上的加密措施 , 不再是任何⼈都可以向设备发送消息
  * 避免 IoT 设备的固件开发下载