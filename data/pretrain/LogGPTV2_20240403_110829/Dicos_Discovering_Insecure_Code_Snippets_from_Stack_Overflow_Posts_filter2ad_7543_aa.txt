title:Dicos: Discovering Insecure Code Snippets from Stack Overflow Posts
by Leveraging User Discussions
author:Hyunji Hong and
Seunghoon Woo and
Heejo Lee
Dicos: Discovering Insecure Code Snippets from Stack Overflow
Posts by Leveraging User Discussions
Hyunji Hong
Seunghoon Woo
Department of Computer Science and
Department of Computer Science and
Engineering, Korea University
PI:EMAIL
Engineering, Korea University
PI:EMAIL
Heejo Lee∗
Department of Computer Science and
Engineering, Korea University
PI:EMAIL
ABSTRACT
Online Q&A fora such as Stack Overflow assist developers to solve
their faced coding problems. Despite the advantages, Stack Over-
flow has the potential to provide insecure code snippets that, if
reused, can compromise the security of the entire software.
We present Dicos, an accurate approach by examining the change
history of Stack Overflow posts for discovering insecure code snip-
pets. When a security issue was detected in a post, the insecure
code is fixed to be safe through user discussions, leaving a change
history. Inspired by this process, Dicos first extracts the change
history from the Stack Overflow post, and then analyzes the his-
tory whether it contains security patches, by utilizing pre-selected
features that can effectively identify security patches. Finally, when
such changes are detected, Dicos determines that the code snippet
before applying the security patch is insecure.
To evaluate Dicos, we collected 1,958,283 Stack Overflow posts
tagged with C, C++, and Android. When we applied Dicos on the
collected posts, Dicos discovered 12,458 insecure posts (i.e., 14,719
insecure code snippets) from the collected posts with 91% precision
and 93% recall. We further confirmed that the latest versions of 151
out of 2,000 popular C/C++ open-source software contain at least
one insecure code snippet taken from Stack Overflow, being discov-
ered by Dicos. Our proposed approach, Dicos, can contribute to
preventing further propagation of insecure codes and thus creating
a safe code reuse environment.
CCS CONCEPTS
• Security and privacy → Software and application security.
KEYWORDS
Q&A forum; Insecure code snippet discovery; Software security.
ACM Reference Format:
Hyunji Hong, Seunghoon Woo, and Heejo Lee. 2021. Dicos: Discovering
Insecure Code Snippets from Stack Overflow Posts by Leveraging User
Discussions. In Annual Computer Security Applications Conference (ACSAC
’21), December 6–10, 2021, Virtual Event, USA. ACM, New York, NY, USA,
13 pages. https://doi.org/10.1145/3485832.3488026
∗Heejo Lee is the corresponding author
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8579-4/21/12...$15.00
https://doi.org/10.1145/3485832.3488026
1 INTRODUCTION
Developers commonly leverage online Q&A fora such as Stack
Overflow and Quora [1, 7, 35], because copying and pasting code
snippets from Stack Overflow are being considered as improving
productivity and providing more stable code. However, this can
cause problems when developers reuse code snippets without under-
standing the code implications, such as the propagation of insecure
code snippets. In 2018, for example, there was an issue that Docker
could not be worked when Razor Synapse was running in the back-
ground [3]. According to a Reddit post, this issue was caused by
reusing the insecure code snippet from Stack Overflow [20].
The approach to resolving such issues consists of two steps: (1)
discovering insecure code snippets from Stack Overflow and (2)
detecting software containing the insecure code snippets. The prob-
lem is that the process of discovering insecure code snippets is
challenging, as opposed to the second step, which can be accom-
plished with techniques such as code clone detection [10, 11, 21, 30].
Existing approaches are limited in terms of the discovery cover-
age; most of them were only able to discover insecure code snip-
pets containing selected security-related APIs (e.g., cryptographic
APIs) [7, 23, 32, 34]. By contrast, unknown security patch detection
approaches [15, 18, 25] that can be used to discover insecure code
snippets, yield many false alarms owing to ineffective feature selec-
tion, e.g., they consider only the fragmentary characteristics of the
security patch [15] (details are introduced in section 7).
To overcome such shortcomings, we present Dicos (Discovering
Insecure COde Snippets), which is an accurate approach by exam-
ining the change history of Stack Overflow posts for discovering
insecure code snippets. The key idea of Dicos, unlike previous
approaches that have discovered insecure code snippets consider-
ing only the latest revision of a post, is the analysis of the change
history of a post based on user discussions.
Our approach. Dicos first selects effective features and then
discovers insecure code snippets by leveraging user discussions in
Stack Overflow.
Selecting effective features that prominent only in insecure codes
is challenging. The features used in existing approaches were either
too finer or too coarse, and thus not guarantee efficient insecure
code snippet discovery (see section 7). To address this challenge,
Dicos first collects a number of features that are used in previous
approaches, and then verifies their effectiveness using Common
Vulnerabilities and Exposures (CVE). In particular, Dicos attempted
to identify features that predominantly appear in CVE patches.
As a result, Dicos determines that the following three features
could be utilized effectively in discovering insecure code snippets:
(1) security-sensitive APIs, (2) security-related keywords, and (3)
control flow information (see section 3).
194ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Hyunji Hong, Seunghoon Woo, and Heejo Lee
Next, to discover insecure code snippets, Dicos leverages user
discussions in Stack Overflow. When a security issue was detected
in the code snippet, the insecure code is fixed to a safe one through
user discussions, leaving a change history (see subsection 2.1). In-
spired by this, Dicos first extracts the change history from the post,
analyzes the change history using selected three features, and then
determines whether the post contains insecure code snippets.
Dicos extracts the change history from the answer post; we pay
attention to the changes in description, comments, and code snip-
pets, which mainly changed when a security issue was reported and
fixed. In particular, extracting change history from code snippets is
error-prone because a post can contain multiple code snippets; com-
pletely different code snippets can be paired between the two post
revisions. To resolve this issue, Dicos cleaves each code snippet:
if a code snippet contains a function, Dicos extracts the function
and considers it as a new code snippet. Dicos then detects the most
similar code snippets between the two revisions of the post, deter-
mines them as a code snippet pair, and then extracts the change
history from the paired code snippets (see subsection 4.1).
Thereafter, Dicos analyzes the change history whether it con-
tains a security patch by using the three selected features. Dicos
determines that a change was a security patch if: (1) control flows
or (2) security-sensitive APIs of the code snippet were changed,
or (3) security-related keywords were added to the description or
comments. Finally, Dicos determines the older revision of a post
(i.e., before applying the detected security patch) containing two or
more features in its change history as the insecure post, and the code
snippet included in the insecure post as the insecure code snippet.
Evaluation. To evaluate Dicos, we collected 1,958,283 Stack
Overflow answer posts tagged with C, C++, and Android from
the SOTorrent dataset [2], of which 668,520 posts contained the
change history. In the experiment, Dicos discovered 12,458 inse-
cure posts (2%) with 14,719 insecure code snippets. To verify the
discovery results, we manually reviewed the following five groups
for C/C++ and Android insecure posts, respectively: (1) all posts
with three features, (2) the top 200 posts with two features (ranked
by #votes), (3) randomly selected 100 posts with two features (to
prevent biased validation results), (4) the top 200 posts with only
one feature, and (5) the top 100 posts without any features. Conse-
quently, we confirmed that Dicos discovered insecure code snippets
with 93% precision and 94% recall for C/C++ posts, with 86% pre-
cision and 89% recall for Android posts (details are presented in
subsection 5.2).
We then compared the discovery results of Dicos to those of
the closely related approaches [7, 23]. First, Dicos discovered 2,454
Android insecure posts in the same dataset with Fischer et al. [7],
which is 9 times more than that reported by their approach (i.e.,
278 insecure posts). Among their results, 62 were targets of Dicos
(i.e., posts containing code change history), and Dicos was able
to cover 50 out of 62 insecure posts (81%). Next, Dicos discovered
7,241 C/C++ insecure posts in the same dataset with Verdi et al. [23],
which is 105 times more than that discovered by them (i.e., 69
insecure posts). Among their results, 36 were targets of Dicos, and
Dicos was able to discover 22 of them (61%) as insecure. The result
Figure 1: Example Stack Overflow post (#122721). We divide
a post into three parts: question, answer, and comments; the
answer is further subdivided into code snippet and descrip-
tion (i.e., narrative part excluding code snippets).
demonstrates the effectiveness of Dicos as it can cover a large pro-
portion of the insecure posts discovered by the existing approaches
while discovering more hidden insecure posts (see subsection 5.3).
We further detected propagated insecure code snippets in the
latest versions of 2,000 popular C/C++ open-source software (OSS)
using the existing code clone detection technique [21]. As a re-
sult, we confirmed that 151 OSS (8%) were reusing insecure code
snippets; we reported cases where the insecure code snippet could
adversely affect the software to the vendors (see subsection 6.4).
This paper makes the following three contributions:
• We propose Dicos, an accurate approach for discovering
insecure code snippets in Stack Overflow posts by leveraging
user discussions in Stack Overflow.
• We extracted features that prevalent in security patches
(i.e., changes in security-sensitive APIs, control flows, and
security-related keywords), which can be used for discover-
ing insecure code snippets.
• We demonstrated the effectiveness of Dicos using 1,958,283
Stack Overflow posts; Dicos discovered 14,719 insecure code
snippets with 91% precision and 93% recall.
2 BACKGROUND AND MOTIVATION
In this section, we introduce the background of discussions in Stack
Overflow, provide a motivating example of this paper, and then
describe an overview of Dicos.
2.1 Discussions in Stack Overflow
Developers actively discuss software development through Stack
Overflow. Figure 1 presents an example post on Stack Overflow.
The entire discussion flow can be categorized into three steps: (1)
QuestionAnswerCommentsCode snippetDescription195Dicos: Discovering Insecure Code Snippets from Stack Overflow Posts by Leveraging User Discussions
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
asking a question, (2) answering the question, and (3) commenting
or voting on both the questions and answers. The details of each
step are as follows.
(1) Asking a question: The questioner posts a question to Stack
Overflow. Questions belong to various categories: a user can
ask about developing a source code that performs a specific
functionality or about addressing an error that occurs when
compiling specific software.
(2) Answering the question: Multiple users suggest answers
to the posted question (i.e., answerers). A user answers the
question in a narrative form (i.e., the “description” part in
Figure 1), or often provides an actual source code snippet
(i.e., the “code snippet” part in Figure 1).
(3) Commenting or voting: Any Stack Overflow users can
comment, vote, and score for both questions and answers.
Users tend to add comments, especially when there are issues
with answerers’ code snippets (e.g., a flaw was detected) [33].
Questions, answers, and comments can be edited at any time after
the initial registration. All questions, answers, and comments are
released publicly, including their revisions. Many developers refer
to this information in their software development, or even reuse
the source code contained in the answer post [7, 35].
2.2 Motivating example
In this paper, we focus on the problems that arise when code snip-
pets within the post are insecure. As an example, we introduce
Stack Overflow post #122721, a post on how to trim trailing spaces
from strings in C language1. The first answer to this question was
posted in September 2008; the post provided the “trimwhitespace”
function, which can trim leading and trailing spaces in strings in C
language (see Listing 1).
Listing 1: The original answer code snippet in post #122721.
char *end;
// Trim leading space
while(isspace(*str)) str++;
1 char *trimwhitespace(char *str) {
2
3
4
5
6
7
8
9
10
11
12
13 }
// Write new null terminator character
*(end+1) = 0;
return str;
// Trim trailing space
end = str + strlen(str) - 1;
while(end > str && isspace(*end)) end--;
However, multiple Stack Overflow users commented in the an-
swer post that the following two code parts could be insecure:
(1) “isspace()” may cause undefined behavior. If the isspace()
function (i.e., line #4 in Listing 1) receives a negative value, the
compiler changes the value to a sign-extended value. As a result,
unexpected results would be obtained.
(2) “*str” may cause a null pointer dereference. If the length
of “*str” is 0, the string “end” becomes “str-1”, with which
the value could be invalid pointer. This typically causes a crash
or exit, e.g., a race condition vulnerability.
1https://stackoverflow.com/questions/122721
Figure 2: High-level overview of the workflow of Dicos.
After confirming the comments, the answerer edited the post to
fix the insecure code snippet. The changes are shown in Listing 2.
Specifically, they addressed the isspace() issue by casting char to
unsigned char (see the related documentation [16]), as shown in
lines #5 and #13 in Listing 2, and they added the exception handling
code to lines #7-8 in Listing 2 to handle the *str issue.
Listing 2: A code change history for post #122721.
return str;
char *end;
// Trim leading space
- while(isspace(*str)) str++;
+ while(isspace((unsigned char)*str)) str++;
+ if(*str == 0) // All spaces?
+
1 char *trimwhitespace(char *str) {
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19 }
// Write new null terminator character
- *(end+1) = 0;
+ end[1] = ’0’;
return str;
// Trim trailing space
end = str + strlen(str) - 1;
- while(end > str && isspace(*end)) end--;
+ while(end > str && isspace((unsigned char)*end)) end--;
If this insecure code snippet is reused in a software program, the
entire security and functionality of the software program can be
compromised. Therefore, it is important to discover insecure code