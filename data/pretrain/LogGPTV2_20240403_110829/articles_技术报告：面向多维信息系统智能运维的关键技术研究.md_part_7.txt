#### 事件关联关系挖掘
依赖事件之间的关系挖掘拓扑结构是另一种根因分析的实现思路。根因分析也叫做异常溯源，在大量系统节点中，运维人员更关心的是异常事件经常发生的节点。根据事件关系发现的关系结构可能不是完整的结构，但一定是故障诊断中可信度更高的关系结构，前提是异常检测要准确可靠。常见用于关联关系挖掘的算法有
Apriori、FP-growth 等。
关联关系挖掘算法的目的是从一系列事件中发掘出“事件 X 发生时事件 Y
发生的可能性较大”这样的关联规则。算法需要的历史数据集由连续的事件窗口中的项集组成。一个事件窗口是一个时间段，在这个时间段中发生的所有事件被认为是同时发生的，它们组成一个项集。关联规则的强度可以用它的支持度（support）和置信度（confidence）来度量。支持度确定规则可以用于给定数据集的频繁程度，而置信度确定
Y 在包含 X
的事件窗口中出现的频繁程度。基于这两个定义，一般关联规则挖掘算法可以分成两个子任务：
1\.
寻找频繁项集：发现满足最小支持度阈值的所有项集，这些项集被称为频繁项集。
2\.
寻找关联规则：从频繁项集中提取满足最小置信度阈值的规则，这些规则成为强规则。
-   优化算法
有很多成熟的算法对挖掘过程做了优化，使其不再是暴力枚举。但是效果依然依赖于事件窗口、最小支持度和最小置信度这三个参数的选择。
算法最终挖掘到的强规则，是类似于 X ---\> Y
的蕴含表达式。通过这样的关系，理论上可以构造出一个具有拓扑层级的结构图来，并在异常溯源时依据结构图推测可能的根因节点。
使用循环神经网络挖掘关联关系也是一种思路。对于某些故障引起的大量异常事件之间，存在着时间相关性，因此可以使用
LSTM （Long short-term
memory）或其他考虑时序因素的神经网络算法建立分析模型。例如，LSTM
将历史数据中的派生事件作为输入，将根源事件作为输出，这样可以学习到同源派生事件的内在特征。在异常发生时，模型可以根据异常事件的特征推荐其根源事件，帮助用户快速定位问题。
4.2.4选用方案
4.2.4.1 基于系统间业务逻辑关联分析的方法
将从不同机器、不同业务模块收集到的数据进行梳理,同时按照实际业务流程梳理一个完整的业务处理链（比如一笔业务首先经过业务模块1、业务模块2、......）,按照业务顺序节点实现不同业务之间的关联规则查询，检索以业务为导向的整个交易、处理过程的全部数据，人工梳理筛选哪些系统之间的数据存在关联性。
![截屏2020-06-03%20下午9.52.53.png](media/image12.png){width="5.986805555555556in"
height="2.365972222222222in"}
图 6 基于系统间业务逻辑的关联分析示意图
利用机器学习算法，自动对两两相关的系统字段进行自动匹配，如果匹配到相同的字段值越多，则两条日志之间的关联性越高，会对两条日志实现自动撮合，最终将所有两两之间关联性最高的日志全部查找出来，实现两两模块之间的参数（比如流水号、报文号）自动关联流程，从而达到完整的跨系统故障智能关联定位的目的。
![](media/image13.png){width="5.930555555555555in"
height="2.9770833333333333in"}
图 7 跨系统日志交易串联关系示意图
从上面可以看到，以电力信息系统的营销系统为例，一笔交易会贯穿防火墙、负载均衡、apache中间件、esb消息总线、营销系统，各个模块都会存在大量的日志，一旦出现问题，没有高效的关联分析方法，很难定位是哪个节点的问题导致，有了跨系统故障智能关联定位方法，会自动计算各个模块日志之间的相似度，从而给出与交易失败相关的完整业务流程日志，这样就能快速查看是哪个模块的问题。
4.2.4.2 基于自然语言处理技术的日志聚类和日志异常定位的方法
基于自然语言处理技术的日志聚类和日志异常定位的方法可构建一种可动态添加分支的频繁项前缀树结构，准确从日志消息中提取日志所代表的事件，支持增量式学习，高效地将日志消息映射到模板上，从而应对日志规模巨大、设备变更后产生新类型日志、日志结构复杂且多样带来的挑战。
![](media/image14.png){width="5.722916666666666in"
height="2.001388888888889in"}
图 8 日志处理流程图
首先，从历史日志消息中构建频繁项前缀树以学习消息模板，从而构建模板库。基于模板库，可以将历史日志消息映射到对应的模板上。然后，基于模板库将实时日志消息映射到对应的模板上。如果发现实时日志消息无法映射到任一模板上，则自动地、增量式地从该日志消息中学习模板，并扩充到模板库中。
借鉴频繁模式树（frequent pattern tree,
FP-tree）的思想，构建一种可动态添加分枝的频繁项前缀树结构来表示设备或应用日志消息模板。其基本思想是，系统日志消息中详细信息字段的子类型通常是频繁出现的单词的最长组合。因此，提取模板等价于从系统日志消息中识别出频繁出现单词的最长组合。本系统为每一个消息类型的日志消息构建一棵基于日志消息中单词频率的前缀树，从而实现自动地获取消息模板。该前缀树的根节点为日志消息的消息类型。通过剪枝的方式，消息模板中需要被遮挡的部分被
通过一种日志异常检测机制，能够准确、高效地解析日志，且自动、准确地检测数据中心各种型号设备或应用的多语法语义的单条异常日志和异常日志序列，主动发现设备或应用的异常以及时采取应对措施，从而提高数据中心的稳定性，针对基于监控指标时序数据的异常检测无法获知异常根因的问题，本方法基于日志自动、准确地对数据中心设备或应用进行异常检测，以便于后续的异常定位和根因分析。
1.  构建时许序列
> ![](media/image15.png){width="4.699305555555555in"
> height="1.8881944444444445in"}
将异常时间周围的日志三元组序列转化为以模版为单位的窗口序列，形成模板1，模板2\...\...
模板n
2.  突增现象的检测
> 针对窗口序列的突增现象检测是一个一维序列的异常检测问题，我们使用经典的基于正态分布的一元离群点检测方法来检测这种异常。设当前处理的模版是
> 𝑇𝑦𝑝𝑒，其窗口序列为 y，长度为Nw，我们根据 $y_{1}$ ∼ $y_{i}$
> 的情况来判断
> $y_{i + 1}$是否出现突增。在基于正态分布的检测方法中，我们假设 y1 ∼ yi
> 符合正态分布，求出它们的均值和方差:
![](media/image16.png){width="3.8465277777777778in"
height="0.9819444444444444in"}
> 若出现 $y_{i}$+1 \> Mean + A×Std （A为参数，通常是 3），则说明
> $y_{i}$+1 已经远高于 $y_{1}$ ∼ $y_{i}$
> 的平均水平，我们认为发生了突增现象。由于平均值受异常值影响较大，为了增强算法的鲁棒性，我们使用
> $y_{1}$ ∼ $y_{i}$ 的中位数 Middle 代替 Mean。对每一个模版
> Type的窗口序列 xType
> 进行一遍扫描，标记所有被检测出来出现突增的窗口，我们称他们为异常窗口。
3.  计算模板在日志数量层面上的异常程度
> 通过异常窗口的检测，我们标记在异常时间周围的窗口序列
> xType中存在异常窗口的模版Type
> 为异常模版（以日志数量为标准的异常），对于每一个异常模版，我们会计算出一个严重度
> xType，表示该模版在日志数量上的异常程度，严重度可以用来将异常模版排序，也可以让运维人员对于每一个异常模版的异常表现产生一个定量的参考。
>
> 我们基于两个标准来计算一个模版 xType严重度 stType：
-   该模版的日志在正常时段出现的越少，该模版的严重度越大。
-   该模版在异常时段处异常窗口中日志越多，该模版严重度越大。
该方法可以准确从日志消息中提取日志所代表的事件，通过增量式学习，高效地将日志消息映射到模板上，从而应对日志规模巨大、设备变更后产生新类型日志、日志结构复杂且多样带来的挑战。通过这种日志异常检测机制，能够准确、高效地解析日志，且自动、准确地检测数据中心跨系统的各种型号设备或应用的多语法语义的单条异常日志和异常日志序列，主动发现设备或应用的异常以及时采取应对措施，针对基于监控指标时序数据的异常检测无法获知异常根因的问题，可以基于日志自动、准确地对数据中心设备或应用进行异常检测，以便于后续的异常定位和根因分析。
## 4.3 业务趋势异常预警方法
![](media/image17.jpeg){width="5.55in" height="4.00625in"}
本次研究利用实时采集技术，采集集群进程相关性指标，根据所匹配的AI检测算法，实时进行进程健康度检测，并将各集群健康度结果根据权重值反应至整个业务，从而实现业务趋势预警。
![图形用户界面, 图示
描述已自动生成](media/image18.png){width="5.888194444444444in"
height="2.795138888888889in"}
图 9 业务趋势预警实现流程图
异常检测是智能运维中发展较成熟的场景之一。"异常"可以被定义为不符合常规模式的行为或事件，例如异常的网络环境会导致服务器的响应变慢，从而导致某一时间点的延迟增高、失败率增加等等。在运维系统中，
数据大体上可以分为两种模式，一种是文本类型、一种是时序指标类型。
异常检测关注数值的变化，所以时序指标是它的主要应用载体。时序指标数据是由监控系统按等时间间隔采样的数值数据，在运维领域中又称为关键性能指标（Key
Performance Indicator，简称 KPI）。
异常检测的目的是区分指标的正常模式和异常模式。难点在于，许多情况下，即使是专业的运维人员也很难去定义什么是正常和异常。时序数据早期的异常检测方式是凭经验设定一条阈值线，高于或低于阈值被判定为异常，但是这种方式的弊端很多：
第一，凭经验设定的阈值可能不理想；
第二，这种方式无法适应指标未来可能发生的模式变动；
第三，监控大批量指标时需要耗费很大的人力成本；
第四，这种方式只能监控简单的数值异常，而无法检测到模式上的异常。
为了解决这些问题，依赖于机器学习算法的异常检测应运而生。不同种类的指标需要针对性地设计不同种类的算法，例如对于有周期的业务指标，设计算法时需要考虑其周期性；对于机器指标，要更加关注它波动模式的变化。所以不存在一个通用的算法可以应对所有情况，更何况一个高度泛化的算法也是很难训练的。另外，算法依赖数据，规范有效的历史数据也是必不可少的。在真实的运维环境中，有异常标签的时序指标数据十分稀少，所以大部分的异常检测算法都是无监督的，这对算法的选择有了一些限制。既然难以获得有标签的数据，算法需求的训练数据就要更多更广，且能够覆盖各种特殊的正常模式和异常模式。总之，无论是使用统计方法还是机器学习的方法去实现异常检测，数据的多样性和代表性都是十分重要的。
趋势预测在智能运维中的常见场景有瓶颈预测、故障预测、容量预测等。智能运维中的趋势预测，能够为此提供一个智能化的解决方案。例如，有效地预测到某一段时间，或周期性的资源使用规律，从而为程序实时调整配额，规避风险。
在数据源丰富的情况下，预测问题可以考虑一些被预测数值之外的相关特征，使用常见的机器学习回归方法或深度学习解决。而对于时间序列本身来说，很多基于时间序列的统计方法同样可以挖掘出序列的潜在特征并实现预测。例如传统的时序建模方法ARIMA，Holt-Winter
等，或以时序分解为基础的方法。这些方法相比于机器学习方法复杂性较低，可解释性较强，但是大部分的模型因为遵从平稳性假设，所以无法解决模式迁移的问题。
时序分解法是分析时间序列的典型方法。时间序列可以以加性模型或乘性模型分解为趋势项、季节项和噪音项三个部分。趋势项代表了时间序列的整体趋势随时间的变化。通常，由于其他影响因素带来的全局上的增长或下降会在这一部分体现出来。季节项代表着时间在固定周期上的波动。通常它与业务的性质有关，如很多面向客户的业务指标都具有以天为周期和以周中周末为周期的固定模式。如果数据不符合常见的周期模式，使用自相关函数或傅里叶级数等方法也可以挖掘出潜在的周期。噪音项是由随机的影响因素带来的，根据具体的场景，噪音项可以被假设为符合一定的先验分布。
对于一些业务场景，节假日的影响也需要考虑。节假日往往会产生大幅度的模式迁移，这也是很多预测场景必须解决的痛点问题。对于节假日的模式，考虑根据历史数据进行特殊建模，并充分考虑可能的影响因素，面对不同场景需要根据不同的业务理解指定有针对性的解决方案。
总而言之，若想建立一个高精度的预测模型，下面几点是必不可少的。
第一，高质量的历史数据。如果只是基于时间序列本身挖掘特征，那么数据必须是有一定潜在生成过程的、采样均匀的样本，正所谓数据决定模型的上限。
第二，模型的抗噪能力。数据的生成过程越复杂，无关的外部因素就越多，这些都是数据中噪声的来源。高全局准确度的模型很容易训练，但是否能抵抗随机事件的干扰，是否能自动辨别异常数据，更能体现一个模型的质量。
第三，模型的快速迭代能力。在实际场景中，数据的模式一定是不断变化的，能够在生产中一直发挥作用的模型，也一定具有快速适应变化的能力。这一点是工程上和模型设计上都需要考虑的。
根据应用场景的不同，异常检测可以被分为单指标异常检测和多指标异常检测。单指标异常检测注重检测某一条指标的异常，它的输入是一个一维的时序数据。多指标异常注重基于一系列相关联的指标来检测异常，它的输入是一个多维的时序数据。
常见的基础告警监控一般基于固定规则类告警，无法覆盖所有指标类型，容易引起误报和漏报。根据kpi监控指标历史，提供智能的异常检测告警，免调参自动判断其异常及严重性。
4.3.1 单指标异常检测
在实际的网络业务数据中，会存在各类数据指标。这些监控指标往往有具体的对应含义，对运维人员监控整体业务走势、分析人员获取业务反馈有着至关重要的作用。指标的走势和数值往往是其所对应含义的最直接表示，因此指标本身的检测就变得非常重要。在智能运维技术架构中，指标异常检测是核心技术中重要的一环。通过指标监控的无人化、自动化、智能化，最终可以实现智能的指标检测系统，大幅减轻运维人员的监控压力，同时也可以为分析人员提供更精确的业务反馈信息。
按照指标的来源，指标可分为业务指标和系统指标。
业务指标：指的是实际业务的监测数据，如交易量、成功率、访问次数、业务额等等。这些数据的特点是由业务本身产生，来源于人的操作。因此业务型指标往往具有符合人作息的周期性，在每天会呈现出有规律的高峰和低谷，在每周会呈现出工作日和休息日的差异，在年、季度、月的层面上也会有一定的周期性差异。另一类
系统指标：指的是由支撑业务运行的物理设备产生的监测数据，如CPU使用率、内存使用量、网络成功率、吞吐量、响应时间等等。这些数据由机器产生，与人的操作行为关系不大，更多的是受物理环境的影响。因此系统型指标往往不具有很强的周期性，更多的受到网络设备和自身硬件设备的影响（如Java、Python的定期GC会导致内存和CPU占用的间歇性升高）。系统指标虽然不直接反映业务状况，但是对于系统故障导致的业务异常却可以通过系统指标快速定位。系统故障往往会由系统关键指标异常导致，定位到具体机器有助于运维人员尽快恢复系统的正常运作。