niques to compute gradients over programs. PGA is more
precise than dynamic taint tracking and provides more
ﬁne grained information about program behavior. We
provide a prototype implementation of PGA based on
the LLVM framework and show that it outperforms three
state-of-the-art DTA systems in accuracy while adding
less than 5% overhead on average. Finally, we show PGA
is an eﬀective tool for security analysis, identifying rele-
vant dataﬂows for 19 diﬀerent CVEs, discovering 22 bugs,
and detecting 2 side-channel leaks in 7 real world pro-
grams. We hope that our approach to program analysis
will motivate other researchers to explore new techniques
exploiting the rich non-smooth analysis literature.
Acknowledgements
We thank our shepherd Lujo Bauer and the anonymous
reviewers for their constructive and valuable feedback.
The ﬁrst author is supported by an NDSEG Fellow-
ship, and the second author is supported by an NSF
Graduate Fellowship. This work is sponsored in part
by NSF grants CNS-18-42456, CNS-18-01426, CNS-16-
17670; ONR grant N00014-17-1-2010; an ARL Young
Investigator (YIP) award; a NSF CAREER award; a
Google Faculty Fellowship; and a Capital One Research
Grant, as well as European Union Marie Sklodowska-
USENIX Association
30th USENIX Security Symposium    1623
Curie grant agreement 690972 (PROTASIS) and inno-
vation programme under grant agreement No. 786669
(ReAct). Any opinions, ﬁndings, conclusions, or recom-
mendations expressed herein are those of the authors,
and do not necessarily reﬂect those of the US Govern-
ment, European Union, ONR, ARL, NSF, Google, or
Capital One.
References
[1] Pin - A Dynamic Binary Instrumentation Tool.
https://software.intel.com/en-us/articles/
pin-a-dynamic-binary-instrumentation-tool,
2019.
[9] Swarat Chaudhuri and Armando Solar-Lezama.
Smoothing a program soundly and robustly.
In
Computer Aided Veriﬁcation, pages 277–292, Berlin,
Heidelberg, 2011. Springer Berlin Heidelberg.
[10] Peng Chen and Hao Chen. Angora: Eﬃcient fuzzing
by principled search. In 2018 IEEE Symposium on
Security and Privacy (SP), pages 711–725. IEEE,
2018.
[11] Shuo Chen, Rui Wang, XiaoFeng Wang, and Ke-
huan Zhang. Side-channel leaks in web applications:
A reality today, a challenge tomorrow. In IEEE
Symposium on Security and Privacy, pages 191–206.
IEEE, 2010.
[2] Martín Abadi, Ashish Agarwal, Paul Barham, Eu-
gene Brevdo, and Zhifeng Chen. TensorFlow: Large-
scale machine learning on heterogeneous systems,
2015. Software available from tensorﬂow.org.
[12] Zheng Leong Chua, Yanhao Wang, Teodora Baluta,
Prateek Saxena, Zhenkai Liang, and Purui Su. One
engine to serve’em all: Inferring taint rules without
architectural semantics. 2019.
[3] Mário S Alvim, Konstantinos Chatzikokolakis,
Annabelle McIver, Carroll Morgan, Catuscia
Palamidessi, and Geoﬀrey Smith. Additive and mul-
tiplicative notions of leakage, and their capacities.
In 2014 IEEE 27th Computer Security Foundations
Symposium, pages 308–322. IEEE, 2014.
[4] Steven Arzt, Siegfried Rasthofer, Christian Fritz,
Eric Bodden, Alexandre Bartel, Jacques Klein,
Yves Le Traon, Damien Octeau, and Patrick Mc-
Daniel. Flowdroid: Precise context, ﬂow, ﬁeld,
object-sensitive and lifecycle-aware taint analysis for
android apps. Acm Sigplan Notices, 49(6):259–269,
2014.
[5] David Baehrens, Timon Schroeter, Stefan Harmel-
ing, Motoaki Kawanabe, Katja Hansen, and Klaus-
Robert Müller. How to explain individual classi-
ﬁcation decisions. Journal of Machine Learning
Research, 11:1803–1831, 2010.
[6] Davide Balzarotti, Marco Cova, Vika Felmetsger,
Nenad Jovanovic, Engin Kirda, Christopher Kruegel,
and Giovanni Vigna. Saner: Composing static and
dynamic analysis to validate sanitization in web
applications. In IEEE Symposium on Security and
Privacy (S&P), pages 387–401. IEEE, 2008.
[7] Erik Bosman, Asia Slowinska, and Herbert Bos.
Minemu: The world’s fastest taint tracker. In RAID,
2011.
[8] Swarat Chaudhuri and Armando Solar-Lezama.
Smooth interpretation. ACM Sigplan Notices,
45(6):279–291, 2010.
[13] Frank H Clarke. Optimization and nonsmooth anal-
ysis, volume 5. Siam, 1990.
[14] James Clause, Wanchun Li, and Alessandro Orso.
Dytan: a generic dynamic taint analysis framework.
In International Symposium on Software Testing
and Analysis, pages 196–206. ACM, 2007.
[15] James Clause, Wanchun Li, and Alessandro Orso.
Dytan: A generic dynamic taint analysis framework.
2007.
[16] R Dennis Cook. Assessment of local inﬂuence.
Journal of the Royal Statistical Society. Series B
(Methodological), pages 133–169, 1986.
[17] Goran Doychev, Boris Köpf, Laurent Mauborgne,
and Jan Reineke. Cacheaudit: A tool for the static
analysis of cache side channels. ACM Transac-
tions on Information and System Security (TIS-
SEC), 18(1):4, 2015.
[18] William Enck, Peter Gilbert, Byung-Gon Chun, Lan-
don P. Cox, Jaeyeon Jung, Patrick McDaniel, and
Anmol N. Sheth. Taintdroid: An information-ﬂow
tracking system for realtime privacy monitoring on
smartphones. In Proceedings of the 9th USENIX
Conference on Operating Systems Design and Im-
plementation, OSDI’10, 2010.
[19] Barbara Espinoza and Geoﬀrey Smith. Min-entropy
as a resource. Information and Computation, 226:57–
75, 2013.
[20] Vijay Ganesh, Tim Leek, and Martin Rinard. Taint-
based directed whitebox fuzzing. In Proceedings of
1624    30th USENIX Security Symposium
USENIX Association
the 31st International Conference on Software En-
gineering, pages 474–484. IEEE Computer Society,
2009.
[21] Ian J Goodfellow, Jonathon Shlens, and Christian
Szegedy. Explaining and harnessing adversarial
examples. arXiv preprint arXiv:1412.6572, 2014.
[22] Andreas Griewank. Automatic directional diﬀer-
In
entiation of nonsmooth composite functions.
Recent Developments in Optimization, pages 155–
169. Springer, 1995.
[23] Jonathan Heusser and Pasquale Malacaria. Quanti-
fying information leaks in software. In Proceedings
of the 26th Annual Computer Security Applications
Conference, pages 261–269. ACM, 2010.
[24] Suman Jana and Vitaly Shmatikov. Memento:
Learning secrets from process footprints. In IEEE
Symposium on Security and Privacy, pages 143–157.
IEEE, 2012.
[25] Vasileios P. Kemerlis, Georgios Portokalidis,
Kangkook Jee, and Angelos D. Keromytis. Libdft:
Practical dynamic data ﬂow tracking for commod-
ity systems. In Proceedings of the 8th ACM SIG-
PLAN/SIGOPS Conference on Virtual Execution
Environments, VEE ’12, 2012.
[26] Boris Köpf and Andrey Rybalchenko. Approxima-
tion and randomization for quantitative information-
ﬂow analysis. In 2010 23rd IEEE Computer Security
Foundations Symposium, pages 3–14. IEEE, 2010.
[27] Chris Lattner and Vikram Adve. Llvm: A compi-
lation framework for lifelong program analysis &
transformation. In Proceedings of the International
Symposium on Code Generation and Optimization:
Feedback-directed and Runtime Optimization, CGO
’04, pages 75–, Washington, DC, USA, 2004. IEEE
Computer Society.
[28] Stephen McCamant and Michael D Ernst. Quanti-
tative information ﬂow as network ﬂow capacity. In
ACM SIGPLAN Notices, volume 43, pages 193–205.
ACM, 2008.
[29] Jiang Ming, Dinghao Wu, Jun Wang, Gaoyao Xiao,
and Peng Liu. Straighttaint: Decoupled oﬄine sym-
bolic taint analysis.
In Proceedings of the 31st
IEEE/ACM International Conference on Automated
Software Engineering, ASE, New York, NY, USA,
2016. ACM.
[30] Andrew C. Myers and Andrew C. Myers. Jﬂow:
Practical mostly-static information ﬂow control. In
Proceedings of the 26th ACM SIGPLAN-SIGACT
Symposium on Principles of Programming Lan-
guages, POPL ’99, 1999.
[31] Yu Nesterov. Lexicographic diﬀerentiation of nons-
mooth functions. Mathematical programming, 104(2-
3):669–700, 2005.
[32] Nicholas Nethercote and Julian Seward. Valgrind:
a framework for heavyweight dynamic binary in-
strumentation. ACM Sigplan notices, 42(6):89–100,
2007.
[33] James Newsome, Stephen McCamant, and Dawn
Song. Measuring channel capacity to distinguish un-
due inﬂuence. In Proceedings of the ACM SIGPLAN
Fourth Workshop on Programming Languages and
Analysis for Security, pages 73–85. ACM, 2009.
[34] James Newsome and Dawn Xiaodong Song. Dy-
namic taint analysis for automatic detection, anal-
ysis, and signature generation of exploits on com-
modity software. In NDSS, volume 5, pages 3–4.
Citeseer, 2005.
[35] Ryan O’Donnell. Analysis of boolean functions.
Cambridge University Press, 2014.
[36] Neal Parikh, Stephen Boyd, et al. Proximal algo-
rithms. Foundations and Trends in Optimization,
1(3):127–239, 2014.
[37] Kexin Pei, Yinzhi Cao, Junfeng Yang, and Suman
Jana. Deepxplore: Automated whitebox testing of
deep learning systems. In proceedings of the 26th
Symposium on Operating Systems Principles, pages
1–18. ACM, 2017.
[38] Sanjay Rawat, Vivek Jain, Ashish Kumar, Lu-
cian Cojocar, Cristiano Giuﬀrida, and Herbert Bos.
VUzzer: Application-Aware Evolutionary Fuzzing.
In Proceedings of the 2008 Network and Distributed
Systems Security Conference, 2017.
[39] D. Richtmeyer and K.W. Morton. Diﬀerence Meth-
ods for Initial Value Problems. Wiley, 2nd edition,
1967.
[40] R Tyrrell Rockafellar and Roger J-B Wets. Vari-
ational analysis, volume 317. Springer Science &
Business Media, 2009.
[41] Gabriel Ryan, Justin Wong, Jianan Yao, Ronghui
Gu, and Suman Jana. Cln2inv: Learning loop in-
variants with continuous logic networks. In Inter-
national Conference on Learning Representations,
2019.
USENIX Association
30th USENIX Security Symposium    1625
[42] Edward J Schwartz, Thanassis Avgerinos, and David
Brumley. All you ever wanted to know about dy-
namic taint analysis and forward symbolic execution
(but might have been afraid to ask). In IEEE Sympo-
sium on Security and Privacy (S&P), pages 317–331.
IEEE, 2010.
[43] Dongdong She, Yizheng Chen, Baishakhi Ray, and
Suman Jana. Neutaint: Eﬃcient dynamic taint
analysis with neural networks.
arXiv preprint
arXiv:1907.03756, 2019.
[44] Dongdong She, Rahul Krishna, Lu Yan, Suman Jana,
and Baishakhi Ray. Mtfuzz: Fuzzing with a multi-
task neural network. Foundations of Software En-
gineering, 2020.
[45] Dongdong She, Kexin Pei, Dave Epstein, Junfeng
Yang, Baishakhi Ray, and Suman Jana. NEUZZ:
Eﬃcient Fuzzing with Neural Program Smoothing.
In IEEE Symposium on Security and Privacy (S&P),
2019.
[46] Avanti Shrikumar, Peyton Greenside, and Anshul
Kundaje. Learning important features through
propagating activation diﬀerences. arXiv preprint
arXiv:1704.02685, 2017.
[47] Karen Simonyan, Andrea Vedaldi, and Andrew Zis-
serman. Deep inside convolutional networks: Visual-
ising image classiﬁcation models and saliency maps.
arXiv preprint arXiv:1312.6034, 2013.
[48] Asia Slowinska and Herbert Bos. Pointless tainting?
evaluating the practicality of pointer tainting. In
Proceedings of the 4th ACM European conference
on Computer systems, pages 61–74. ACM, 2009.
[49] Asia Slowinska and Herbert Bos. Pointer tainting
still pointless:(but we all see the point of tainting).
ACM SIGOPS Operating Systems Review, 44(3):88–
92, 2010.
[50] Geoﬀrey Smith. Quantifying information ﬂow using
min-entropy. In 2011 Eighth International Confer-
ence on Quantitative Evaluation of SysTems, pages
159–167. IEEE, 2011.
[51] Yuchi Tian, Kexin Pei, Suman Jana, and Baishakhi
Ray. Deeptest: Automated testing of deep-neural-
network-driven autonomous cars. In Proceedings
of the 40th international conference on software
engineering, pages 303–314, 2018.
[52] Doug Ward. Chain rules for nonsmooth functions.
Journal of Mathematical Analysis and Applications,
158(2):519–538, 1991.
[53] R. E. Wengert. A simple automatic derivative eval-
uation program. Commun. ACM, 7(8):463–464,
August 1964.
[54] Babak Yadegari and Saumya Debray. Bit-level taint
analysis. In 2014 IEEE 14th International Working
Conference on Source Code Analysis and Manipula-
tion, pages 255–264. IEEE, 2014.
[55] LK Yan, A Henderson, X Hu, H Yin, and S McCa-
mant. On soundness and precision of dynamic taint
analysis. Dep. Elect. Eng. Comput. Sci., Syracuse
Univ., Tech. Rep. SYR-EECS-2014–04, 2014.
[56] Lok Kwong Yan and Heng Yin. Droidscope: Seam-
lessly reconstructing the os and dalvik semantic
views for dynamic android malware analysis.
In
USENIX Security), pages 569–584, 2012.
[57] Jianan Yao, Gabriel Ryan, Justin Wong, Suman
Jana, and Ronghui Gu. Learning nonlinear loop
invariants with gated continuous logic networks. In
Proceedings of the 41st ACM SIGPLAN Conference
on Programming Language Design and Implemen-
tation, pages 106–120, 2020.
[58] Heng Yin, Dawn Song, Manuel Egele, Christopher
Kruegel, and Engin Kirda. Panorama: Capturing
system-wide information ﬂow for malware detection
and analysis. In Proceedings of the 14th ACM Con-
ferences on Computer and Communication Security
(CCS), 2007.
[59] Insu Yun, Sangho Lee, Meng Xu, Yeongjin Jang,
and Taesoo Kim. QSYM: A Practical Concolic
Execution Engine Tailored for Hybrid Fuzzing. In
Proceedings of the 27th USENIX Security Sympo-
sium (Security), Baltimore, MD, August 2018.
Opt 0
Opt 1
Opt 2
dfsan grsan dfsan grsan dfsan grsan
0.39
0.36
0.62
0.76
0.52
0.33
0.53
0.51
0.65
0.66
0.88
0.67
0.60
0.68
0.39
0.31
0.52
0.74
0.47
0.31
0.51
0.45
0.63
0.62
0.81
0.68
0.61
0.69
0.57
0.69
0.64
0.92
0.71
0.63
0.74
0.42
0.29
0.56
0.73
0.48
0.31
0.52
minigzip
djpeg
mutool
xmllint
objdump
strip
size
Eﬀect compiler optimization levels on
Table 5:
dataﬂow F1 accuracy. The table shows grsan has sig-
niﬁcantly higher F1 accuracy than dfsan for all three
measured optimization levels (> 18% average)
1626    30th USENIX Security Symposium
USENIX Association
A Additional Accuracy Experiments
We describe the additional accuracy evaluations summa-
rized in Section 5.2.1 here. Speciﬁcally, the ablation of
gradient information, the eﬀects of compiler optimization,
PGA vs. Neutaint in coarse grained dataﬂow prediction,
analysis of 0 gradients, and a comparison with QIF.
Gradient Ablation. We measure the eﬀect of the gra-
dient information on determining accurate dataﬂows by
performing an ablation with binary valued gradients.
The ablation uses the same proximal gradient propaga-
tion rules, but rounds all gradients to 0 or 1. In eﬀect,
this converts PGA into DTA with PGA propagation.
Results of the comparison are shown in Table 2. PGA