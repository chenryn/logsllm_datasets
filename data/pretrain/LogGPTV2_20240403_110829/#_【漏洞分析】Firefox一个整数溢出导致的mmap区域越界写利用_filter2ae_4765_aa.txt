# 【漏洞分析】Firefox一个整数溢出导致的mmap区域越界写利用
|
##### 译文声明
本文是翻译文章，文章来源：saelo.github.io
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
****
翻译：[beswing](http://bobao.360.cn/member/contribute?uid=820455891)
稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**  
**
**TL;DR**
这个文章将探讨一个很有趣的漏洞—CVE-2016-9066 ，一个很简单但是很有趣的可以导致代码执行的Firefox漏洞。
中的代码中存在一个整数溢出漏洞，导致加载的mmap区域越界。有一种利用这一点的方法是，将JavaScrip的堆放在缓冲器后面，随后溢出到其元数据中以创建假空闲单元。然后可以将ArrayBuffer创建的实例放在另一个ArrayBuffer的内联数据中。然后可以任意修改内部ArrayBuffer，产生任意的读和写。并可以很容易的实现代码的执行。完整的漏洞报告可以在[这里](https://github.com/saelo/foxpwn)找到，这对MacOS
10.11.6上的Firefox
48.0.1进行了测试。Bugzilla的漏洞报告可以在[这里](https://github.com/saelo/foxpwn)找到。
**  
**
**The Vulnerability**
下面的代码用于加载脚本标记的数据:
    result
    nsScriptLoadHandler::TryDecodeRawData(const uint8_t* aData,
                                          uint32_t aDataLength,
                                          bool aEndOfStream)
    {
      int32_t srcLen = aDataLength;
      const char* src = reinterpret_cast(aData);
      int32_t dstLen;
      nsresult rv =
        mDecoder->GetMaxLength(src, srcLen, &dstLen);
      NS_ENSURE_SUCCESS(rv, rv);
      uint32_t haveRead = mBuffer.length();
      uint32_t capacity = haveRead + dstLen;
      if (!mBuffer.reserve(capacity)) {
        return NS_ERROR_OUT_OF_MEMORY;
      }
      rv = mDecoder->Convert(src,
                             &srcLen,
                             mBuffer.begin() + haveRead,
                             &dstLen);
      NS_ENSURE_SUCCESS(rv, rv);
      haveRead += dstLen;
      MOZ_ASSERT(haveRead Convert然后在缓冲区的结尾写超过8GB的数据（数据在浏览器中存储为char16_t），这将由一个mmap块（一个普通的，很大的mmap
区块）支持下完成。
补丁也很简单：
       uint32_t haveRead = mBuffer.length();
    -  uint32_t capacity = haveRead + dstLen;
    -  if (!mBuffer.reserve(capacity)) {
    +
    +  CheckedInt capacity = haveRead;
    +  capacity += dstLen;
    +
    +  if (!capacity.isValid() || !mBuffer.reserve(capacity.value())) {
         return NS_ERROR_OUT_OF_MEMORY;
       }
首先，看起来没有那么可靠。 例如，它需要发送和分配多个千兆字节的内存。
但是，我们会看到，该bug事实上可以被很可靠的利用的，并且在我的2015年版本的MacBook Pro上打开页面后大约一分钟内就能完成漏洞的触发。
我们现在将首先探讨如何利用这个bug在macOS上弹出一个计算器，然后提高漏洞利用的可靠性，并使用较少的带宽（我们将使用HTTP压缩数据）。
**  
**
**漏洞利用**
    #include 
    #include 
    const size_t MAP_SIZE = 0x100000;       // 1 MB
    int main()
    {
        char* chunk1 = mmap(NULL, MAP_SIZE, PROT_READ | PROT_WRITE, MAP_ANONYMOUS | MAP_PRIVATE, -1, 0);
        char* chunk2 = mmap(NULL, MAP_SIZE, PROT_READ | PROT_WRITE, MAP_ANONYMOUS | MAP_PRIVATE, -1, 0);
        printf("chunk1: %p - %pn", chunk1, chunk1 + MAP_SIZE);
        printf("chunk2: %p - %pn", chunk2, chunk2 + MAP_SIZE);
        return 0;
    }
上面的程序的打印结果，能告诉我们能通过简单的mmap ，映射内存直到存有的空间都被填充，然后通过mmap分配一个内存块，来分配溢出缓冲区后面的东西。
要验证这一点，我们将执行以下操作：
加载脚本(包含payload.js,将导致溢出的代码) 和一些异步执行的JavaScrip代码(code.js，用来执行下面的步骤3和步骤5)
当浏览器请求payload.js时，让服务器回复Content-Length为0x100000001，但只发送数据的第一个0xffffffff字节
然后，让JavaScript代码分配多个足够大的（1GB）ArrayBuffers（内存不一定会使用，直到实际写入缓冲区）
让webserver发送payload.js的剩余两个字节
检查每个ArrayBuffer的前几个字节， 有一个应该包含由webserver发送数据
为了实现这一点，我们将需要在浏览器中运行的JavaScript代码和web服务器之间的某种同步原语。
为此，我在python的asyncio库上面写了一个小的[web服务器](https://github.com/saelo/foxpwn/blob/master/server.py)
，它包含一个方便的[事件对象](https://docs.python.org/3/library/asyncio-sync.html#event)
，用于同步协同。 创建两个全局事件可以向服务器发信号通知客户端代码已完成其当前任务，并且现在正在等待服务器执行下一步骤。 /sync的处理程序如下所示：
    async def sync(request, response):
        script_ready_event.set()
        await server_done_event.wait()
        server_done_event.clear()
        response.send_header(200, {
            'Content-Type': 'text/plain; charset=utf-8',
            'Content-Length': '2'
        })
        response.write(b'OK')
        await response.drain()
**获取目标 Hunting for Target Objects**
因为malloc （以及C ++中的new操作符）在某些时候将使用mmap请求更多的内存，所以分配给它们的任何内容都可能对我们的漏洞利用有帮助。
我走了一条不同的路线。 我最初想检查是否可能溢出到JavaScript对象，例如损坏数组的长度或类似的东西。
因此，我开始探索JavaScript分配器以查看JSObject存储在哪里。
Spidermonkey（Firefox中的JavaScript引擎）将JSObjects存储在两个独立的区域中：
终止堆。 更长的活动中的对象以及几个选定的对象类型在这里分配。 这是一个相当经典的堆，跟踪自由点，然后重新用于之后的分配。
The Nursery。 这是一个包含短暂对象的内存区域。
大多数JSObject在这里首先被分配，然后在下一个GC循环期间被移动到永久堆中（这包括更新它们的所有指针，因此需要gargabe收集器知道它的对象的所有指针）。
Nursery不需要自由列表或类似的：在GC循环之后，Nursery简单地被声明为自由的，因为所有活动的对象已经被移出它的区域。
有关Spidermonkey内部的更深入的讨论，请参阅[这篇文章](http://phrack.com/issues/69/14.html#article)。
堆中的对象存储在名为Arenas的容器中：
    /*
    * Arenas are the allocation units of the tenured heap in the GC. An arena
    * is 4kiB in size and 4kiB-aligned. It starts with several header fields
    * followed by some bytes of padding. The remainder of the arena is filled
    * with GC things of a particular AllocKind. The padding ensures that the
    * GC thing array ends exactly at the end of the arena:
    *
    *  = ArenaSize bytes
    * +---------------+---------+----+----+-----+----+
    * | header fields | padding | T0 | T1 | ... | Tn |
    * +---------------+---------+----+----+-----+----+
    *  = first thing offset
    */
    class Arena
    {
     static JS_FRIEND_DATA(const uint32_t) ThingSizes[];
     static JS_FRIEND_DATA(const uint32_t) FirstThingOffsets[];
     static JS_FRIEND_DATA(const uint32_t) ThingsPerArena[];
     /*
      * The first span of free things in the arena. Most of these spans are
      * stored as offsets in free regions of the data array, and most operations
      * on FreeSpans take an Arena pointer for safety. However, the FreeSpans
      * used for allocation are stored here, at the start of an Arena, and use
      * their own address to grab the next span within the same Arena.
      */
     FreeSpan firstFreeSpan;
     // ...
注释已经给出了一个相当好的概括： [Arenas](https://github.com/mozilla/gecko-dev/blob/40ae52a2c349f978a462a38f770e4e35d49f6563/js/src/gc/Heap.h#L450)只是容器对象，其中分配了[相同大小](https://github.com/mozilla/gecko-dev/blob/40ae52a2c349f978a462a38f770e4e35d49f6563/js/src/gc/Heap.h#L83)的JavaScript对象。
它们位于容器对象（ Chunk结构）内部 ，该结构本身通过mmap直接分配。
有趣的部分是Arena类的firstFreeSpan成员：它是Arena对象的第一个成员（并且因此位于mmap-ed区域的开始），并且基本上指示该Arena内的第一个自由单元的索引。 这是FreeSpan实例的样子：
    class FreeSpan
    {
     uint16_t first;
     uint16_t last;
     // methods following
    }
first和last是到Arena的字节索引，指示freelist的头部。
这打开了一个有趣的方式来利用这个bug：通过溢出到Arena的firstFreeSpan字段，我们可以分配一个对象在另一个对象内，最好在某种类型的可访问的内联数据内。
然后我们可以任意修改“内部”对象。
这种技术有几个好处：
能够在Arena内部的选定偏移处分配JavaScript对象直接产生存储器读/写，正如我们将看到的
我们只需要溢出以下块的4个字节，因此不会损坏任何指针或其他敏感数据
Arenas / Chunks可以通过分配大量的JavaScript对象
事实证明，大小为96字节的ArrayBuffer对象将把它们的数据存储在对象header之后。 他们也将跳过nursery ，因此位于Arena内。
这使得它们是我们的漏洞利用的理想选择。 我们会这样