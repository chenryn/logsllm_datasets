latter is better for efﬁcient sVOLE-based ZK proofs and also
compatible with the above conversion between arithmetic and
Boolean circuits.
Our conversion uses the commitment scheme in a non-
black-box way: a prover P ﬁrst authenticates to a veriﬁer V
the committed values as well as the decommitment, and then
proves in zero-knowledge that the authenticated values satisfy
the opening of the public commitment. This establishes a
connection between a public commitment and privately au-
thenticated values. The efﬁciency of the protocol crucially
relies on the size of the circuit to represent the opening of a
commitment scheme. If we use cryptographic hash functions
like SHA-256, it would require more than 22,000 AND gates
to commit a 512-bit message, averaging to 42 gates per bit.
One can also use LowMC [2] as a block cipher with the 256-
bit key and 256-bit block length, where LowMC allows much
less AND gates than standard block ciphers such as AES.
When being modeled as an ideal cipher, LowMC can be con-
verted to a suitable hash function using the Merkle–Damgård
structure. However, the computation complexity in this case
could be very high as we need to calculate a lot of matrix
multiplications with random bits.
To minimize the circuit size, we use a “hybrid commit-
ment” scheme: to commit a set of messages {xxxi}i∈[1,(cid:96)] with
xxxi ∈ {0,1}m, we ﬁrst pick a random key sk ← {0,1}λ, commit
to this key by using a slow commitment scheme (e.g., H(sk,r)
for a random oracle H and a randomness r), and then commit
the messages as ccci := PRF(sk,i)⊕xxxi for i ∈ [1, (cid:96)], where PRF
is a standard pseudorandom function. The security of this hy-
brid commitment scheme can be reduced to the security of the
slow commitment scheme as well as the pseudo-randomness
of PRF. What’s more, if the slow commitment scheme is
extractable, then the overall commitment scheme is also ex-
tractable. Note that we cannot equivocate xxxi to any vector if
we use the natural “open” algorithm with sending sk and xxxi,
as the function PRF is ﬁxed. However, we can make this com-
mitment scheme equivocal in an interactive way: we prove
knowledge of sk and xxxi such that all relationships hold, and
convert the committed value to an authenticated value in zero
knowledge. Besides, we easily extend the above hybrid com-
mitment scheme to support committed values over any ﬁeld
Fq by extending the output range of PRF to Fm
q .
To reduce the number of AND gates for PRF, we choose to
use LowMC to instantiate PRF. To obtain faster computation,
we adopt a smaller block size (i.e., 64 bits). As a result, our
protocol can convert 18,000 64-bit committed values (144
KB in total) to authenticated values in a second.
3.3 Optimizations for ML Applications
To make ZK proofs of ML applications practical, we also pro-
pose several optimizations speciﬁcally to reduce the overhead
of some key ML components and to integrate with Tensor-
Flow [1]. Detailed descriptions can be found in Section 6.
Matrix multiplication. Directly proving matrix multiplica-
tion in zero knowledge would require O(n3) number of multi-
plications, which could be improved to O(n2.8) (or even lower)
based on a better algorithm [48]. Although the prover time
has to be linear to this complexity, we could reduce the circuit
size for ZK proofs signiﬁcantly. Suppose in a certain stage of
the ZK protocol, a prover P wants to prove the relation that
A·B = C with A ∈ Fn×m
, where A,B,C
have been committed using authenticated values resulting
in [A], [B], [C]. By generalizing the Freivalds algorithm [31],
we use a random-linear-combination approach to prove that
A· B = C holds. Speciﬁcally, we can let a veriﬁer V sample
two uniformly random vectors uuu ∈ (Fqk )n,vvv ∈ (Fqk )(cid:96). Instead
of directly proving [A]· [B] = [C], we can prove:
,B ∈ Fm×(cid:96)
q
,C ∈ Fn×(cid:96)
q
q
uuu(cid:62) · [A]· [B]· vvv = uuu(cid:62) · [C]· vvv.
Now, the parties can locally compute vectors of authenti-
cated values [xxx](cid:62) = [uuu(cid:62) · A] ∈ (Fqk )m, [yyy] = [B· vvv] ∈ (Fqk )m
and [z] = [uuu(cid:62) · C· vvv] ∈ Fqk. Thus, they only need to prove in
506    30th USENIX Security Symposium
USENIX Association
2 , p−1
2 , p−1
2s+1 ≤ x ≤ p−1
zero-knowledge that [xxx](cid:62)· [yyy] = [z], which takes only the com-
munication of O(k logq) bits using the latest ZK proof [54],
where k is an integer satisfying qk > 2ρ. Note that this ZK
protocol [54] allows to prove the statements over Fqk.
Fixed-point and ﬂoating-point conversions. The above
matrix-multiplication protocol only works over a ﬁeld. How-
ever, in the neural-network inference, all operations are for
real numbers. To address this discrepancy, we use both ﬁxed-
point and ﬂoating-point encodings of real numbers at different
stages of our protocol. Firstly, we encode a signed, ﬁxed-
point number x with − p−1
2s+1 into a ﬁeld element in
[− p−1
2 ] by computing (cid:98)2s · x(cid:99), where p > 2 is a prime
and s ∈ N is a precision parameter. Then we easily encode
ﬁeld elements in [− p−1
2 ] into ﬁeld elements in [0, p− 1].
In this way, the addition and multiplication of ﬁxed-point num-
bers are the same as addition and multiplication over ﬁeld Fp,
as long as there is no overﬂow. One caveat is that overﬂow can
happen quickly if the multiplication depth is high. Fortunately,
for matrix multiplication, the multiplication depth is 1. After
linear layers, we usually need to perform many non-linear op-
erations like Batch Normalization (which needs square root
and inverse), SoftMax (which additionally needs exponentia-
tion), ReLU (which additionally needs comparison), etc. To
support these operations efﬁciently and accurately, we con-
vert between ﬁxed-point numbers and IEEE-754 compliant
ﬂoating-point numbers using functionality FauthZK with only
circuit-based commands, such that non-linear operations can
be performed in zero-knowledge.
Integration with TensorFlow. To easily implement compli-
cated neural networks, we integrated our backend protocol
with TensorFlow [1], so that existing TensorFlow neural net-
work implementations can be directly executed in our proto-
col, while keeping the TensorFlow interfaces unchanged. In
particular, we implemented a set of common operators that
are needed and hook them with TensorFlow using a dynamic
pass. Due to our use of ﬂoating-point numbers in the non-
linear layers, adding more operators is fairly straightforward.
See Section 6.3 for more details.
4 Arithmetic-Boolean Conversion for Zero-
Knowledge Proofs
In this section, we provide full details on how to construct
ZK-friendly extended doubly authenticated bits (zk-edaBits)
efﬁciently, and then show how to use them to securely realize
conversions between arithmetic and Boolean circuits.
4.1 Extended Doubly Authenticated Bits for
Zero-Knowledge Proofs
As described in Section 3.1, zk-edaBit is a key tool in this
work to efﬁciently perform conversions between arithmetic
Functionality Fzk-edaBits
This functionality is parameterized by a prime p > 2 and
an integer k ≥ 1 with pk ≥ 2ρ. Let m = (cid:100)log p(cid:101).
Initialize: On input (init) from P and V , sample ∆ ←
2λ and Γ ← Fpk if V is honest, and receive ∆ ∈ F
F
2λ
and Γ ∈ Fpk from the adversary otherwise. Store two
global keys (∆,Γ) and send them to V , and ignore all
subsequent (init) commands.
Generate random ZK-friendly edaBits: On input
(random, id, id0, . . . , idm−1) from two parties P and V
where id, id0, . . . , idm−1 are fresh identiﬁers, generate a
random zk-edaBit ([r0]2, . . . , [rm−1]2, [r]p) with ri ∈ F2
for i ∈ [0,m) and r = ∑m−1
1. If P is honest, sample r ← Fp. Otherwise, receive r ∈
Fp from the adversary. Decompose r to (r0, . . . ,rm−1)
such that r = ∑m−1
i=0 ri · 2i ∈ Fp as follows:
i=0 ri · 2i mod p.
2. Execute [ri]2 ← Auth(ri,2) for i ∈ [0,m) and
[r]p ← Auth(r, p), where the macro Auth(·) is de-
scribed in Figure 4. Thus, the two parties obtain
([r0]2, . . . , [rm−1]2, [r]p).
3. Store (id, p, [r]p) and (idi,2, [ri]2) for i ∈ [0,m).
Figure 5: Functionality for ZK-friendly extended doubly
authenticated bits.
and Boolean circuits. A zk-edaBit consists of a set of m au-
thenticated bits ([r0]2, . . . , [rm−1]2) along with a random au-
thenticated value [r]p such that r = ∑m−1
h=0 rh · 2h ∈ Fp. We
provide the ideal functionality for zk-edaBits in Figure 5.
A prover P and a veriﬁer V can generate faulty zk-edaBits
by calling functionality FauthZK, and then use a “cut-and-
bucketing” technique to check the consistency of resulting
zk-edaBits. Recall that the overview of our technique has
been described in Section 3.1. Thus, we directly provide the
details of our zk-edaBits protocol in Figure 6. In this protocol,
the prover and veriﬁer use FauthZK with only circuit-based
commands to compute a Boolean circuit AdderModp, which
efﬁciently realizes the module-addition computation that adds
two m-bit integers and then modules a prime p.
Theorem 1. Protocol Πzk-edaBits shown in Figure 6 UC-
realizes functionality Fzk-edaBits
in the presence of a
static, malicious adversary with statistical error at most
(cid:18)N(B− 1) + c
(cid:19)−1
+ 1
pk in the FauthZK-hybrid model.
B− 1
The proof of this theorem can be found in the full ver-
sion [53]. Given the number N of zk-edaBits, we can choose
suitable parameters B and c such that
(cid:18)N(B− 1) + c
B− 1
(cid:19)−1 ≤
USENIX Association
30th USENIX Security Symposium    507
Protocol Πzk-edaBits
Parameters: Let p > 2 be a prime, m = (cid:100)log p(cid:101) and
k ∈ N with pk ≥ 2ρ. Two parties want to generate N
zk-edaBits. Let B,c be some parameters to be speciﬁed
later and (cid:96) = NB + c.
Initialize: P and V send (init) to FauthZK, which returns
two uniform global keys to V .
Generating random zk-edaBits:
1. The parties generate random authenticated values
[ri]p for i ∈ [1, (cid:96)]. Then, for i ∈ [1, (cid:96)], P decomposes ri
h · 2h mod p.
to (ri
2 to FauthZK,
m−1) such that ri = ∑m−1
h=0 ri
m−1) ∈ Fm
2. For i ∈ [1, (cid:96)], P inputs (ri
0]2, . . . , [ri
m−1]2) to the parties.
0, . . . ,ri
0, . . . ,ri
which returns ([ri
3. Place the ﬁrst N zk-edaBits into N buckets in order,
where each bucket has exactly one zk-edaBit. Then,
V samples a random permutation π and sends it to P .
Use π to permute the remaining (cid:96)− N zk-edaBits.
4. The parties check that the last c zk-edaBits are cor-
rectly computed and abort if not. Divide the remain-
ing N(B− 1) (unopened) zk-edaBits into N buckets
accordingly, such that each bucket has B zk-edaBits.
5. For each bucket, both parties choose the ﬁrst
zk-edaBit ([r0]2, . . . , [rm−1]2, [r]p) (that is placed into
the bucket in the step 3), and for every other zk-edaBit
([s0]2, . . . , [sm−1]2, [s]p) in the same bucket, execute
the following check:
(a) Compute [t]p := [r]p + [s]p, and then execute
:= AdderModp([r0]2, . . . ,
([t0]2, . . . , [tm−1]2)
[rm−1]2, [s0]2, . . . , [sm−1]2) by calling func-
tionality FauthZK, where AdderModp is the
h=0 th · 2h
modular-addition
= ∑m−1
circuit, and ∑m−1
h=0 sh · 2h mod p.
h=0 rh · 2h + ∑m−1
(b) Execute the BatchCheck procedure on ([t0]2,
. . . , [tm−1]2) to obtain (t0, . . . ,tm−1), and then
compute t(cid:48) := ∑m−1
h=0 th · 2h mod p.
(c) Execute the CheckZero procedure on [t]p −t(cid:48) to
verify that t = t(cid:48).
6. If any check fails, V aborts. Otherwise, the parties
output the ﬁrst zk-edaBit from each of the N buckets.
Figure 6: Protocol for generating ZK-friendly edaBits in
the FauthZK-hybrid model.
2−ρ. For example, when N = 106, we can choose B = 3 and
c = 2, and achieve at least 40-bit statistical security.
Protocol ΠA2B
Convert
Let p > 2 be a prime and m = (cid:100)log p(cid:101).
Initialize: P and V send (init) to Fzk-edaBits, which re-
turns two uniform global keys to V .
Input: The parties have an authenticated value [x]p.
Convert: P and V convert an authenticated value over
ﬁeld Fp into m authenticated bits as follows:
1. Call funcationality Fzk-edaBits, which returns ([r0]2,
. . . , [rm−1]2, [r]p) to the parties.
2. Compute [z]p := [x]p − [r]p, and then execute the
BatchCheck procedure on [z]p to obtain z.
3. Decompose z as (z0, . . . ,zm−1) such that z = ∑m−1
h=0 zh·
2h mod p, and then compute ([x0]2, . . . , [xm−1]2) :=
AdderModp(z0, . . . ,zm−1, [r0]2, . . . , [rm−1]2) by call-
ing FauthZK where z0, . . . ,zm−1 are public constants.
4. Output ([x0]2, . . . , [xm−1]2).
Figure 7: Protocol for converting from arithmetic to
Boolean circuits in the (Fzk-edaBits,FauthZK)-hybrid model.
4.2 Arithmetic-Boolean Conversion Protocols
Using functionality Fzk-edaBits efﬁciently realized in the pre-
vious sub-section, we propose two efﬁcient protocols to con-
vert authenticated wire values from an arithmetic circuit to a
Boolean circuit and to convert in another direction. In the two
protocols, the prover and veriﬁer would also use functional-