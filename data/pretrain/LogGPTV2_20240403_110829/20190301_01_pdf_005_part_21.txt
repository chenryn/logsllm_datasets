Day Full mixed-case day name
day Full lowercase day name
DY Abbreviated uppercase day name (3 chars in English, localized lengths vary)
Dy Abbreviated mixed-case day name (3 chars in English, localized lengths vary)
dy Abbreviated lowercase day name (3 chars in English, localized lengths vary)
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 250
Database Compatibility for Oracle® Developers
Reference Guide
Pattern Description
DDD Day of year (001-366)
DD Day of month (01-31)
D Day of week (1-7; Sunday is 1)
W Week of month (1-5) (The first week starts on the first day of the month)
WW Week number of year (1-53) (The first week starts on the first day of the year)
IW ISO week number of year; the first Thursday of the new year is in week 1
CC Century (2 digits); the 21st century starts on 2001-01-01
SCC Same as CC except BC dates are prefixed by a minus sign
J Julian Day (days since January 1, 4712 BC)
Q Quarter
RM Month in Roman numerals (I-XII; I=January) (uppercase)
rm Month in Roman numerals (i-xii; i=January) (lowercase)
First 2 digits of the year when given only the last 2 digits of the year. Result is based upon an
algorithm using the current year and the given 2-digit year. The first 2 digits of the given 2-
digit year will be the same as the first 2 digits of the current year with the following
exceptions:
RR
If the given 2-digit year is = 50, then the first
2 digits for the given year is 1 greater than the first 2 digits of the current year.
If the given 2-digit year is >= 50 and the last 2 digits of the current year is '
TO_CHAR(485, 'L999') '$ 485'
TO_CHAR(485, 'RN') ' CDLXXXV'
TO_CHAR(485, 'FMRN') 'CDLXXXV'
TO_CHAR(5.2, 'FMRN') 'V'
TO_CHAR(12, '99V999') ' 12000'
TO_CHAR(12.4, '99V999') ' 12400'
TO_CHAR(12.45, '99V9') ' 125'
2.4.7.1 IMMUTABLE TO_CHAR(TIMESTAMP, format) Function
There are certain cases of the TO_CHAR function that can result in usage of an
IMMUTABLE form of the function. Basically, a function is IMMUTABLE if the function
does not modify the database, and the function returns the same, consistent value
dependent upon only its input parameters. That is, the settings of configuration
parameters, the locale, the content of the database, etc. do not affect the results returned
by the function.
For more information about function volatility categories VOLATILE, STABLE, and
IMMUTABLE, please see the PostgreSQL Core documentation at:
https://www.postgresql.org/docs/11/static/xfunc-volatility.html
A particular advantage of an IMMUTABLE function is that it can be used in the CREATE
INDEX command to create an index based on that function.
In order for the TO_CHAR function to use the IMMUTABLE form the following conditions
must be satisfied:
 The first parameter of the TO_CHAR function must be of data type TIMESTAMP.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 253
Database Compatibility for Oracle® Developers
Reference Guide
 The format specified in the second parameter of the TO_CHAR function must not
affect the return value of the function based on factors such as language, locale,
etc. For example a format of 'YYYY-MM-DD HH24:MI:SS' can be used for an
IMMUTABLE form of the function since, regardless of locale settings, the result of
the function is the date and time expressed solely in numeric form. However, a
format of 'DD-MON-YYYY' cannot be used for an IMMUTABLE form of the
function because the 3-character abbreviation of the month may return different
results depending upon the locale setting.
Format patterns that result in a non-immutable function include any variations of spelled
out or abbreviated months (MONTH, MON), days (DAY, DY), median indicators (AM, PM), or
era indicators (BC, AD).
For the following example, a table with a TIMESTAMP column is created.
CREATE TABLE ts_tbl (ts_col TIMESTAMP);
The following shows the successful creation of an index with the IMMUTABLE form of the
TO_CHAR function.
edb=# CREATE INDEX ts_idx ON ts_tbl (TO_CHAR(ts_col,'YYYY-MM-DD HH24:MI:SS'));
CREATE INDEX
edb=# \dS ts_idx
Index "public.ts_idx"
Column | Type | Definition
---------+-------------------+---------------------------------------------------------
----
to_char | character varying | to_char(ts_col, 'YYYY-MM-DD HH24:MI:SS'::character
varying)
btree, for table "public.ts_tbl"
The following results in an error because the format specified in the TO_CHAR function
prevents the use of the IMMUTABLE form since the 3-character month abbreviation, MON,
may result in different return values based on the locale setting.
edb=# CREATE INDEX ts_idx_2 ON ts_tbl (TO_CHAR(ts_col, 'DD-MON-YYYY'));
ERROR: functions in index expression must be marked IMMUTABLE
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 254
Database Compatibility for Oracle® Developers
Reference Guide
2.4.8 Date/Time Functions and Operators
Table 2-26 shows the available functions for date/time value processing, with details
appearing in the following subsections. The following table illustrates the behaviors of
the basic arithmetic operators (+, -). For formatting functions, refer to Section 2.4.7. You
should be familiar with the background information on date/time data types from Section
2.2.4.
Table 2-25 Date/Time Operators
Operator Example Result
+ DATE '2001-09-28' + 7 05-OCT-01 00:00:00
+ TIMESTAMP '2001-09-28 13:30:00' + 3 01-OCT-01 13:30:00
- DATE '2001-10-01' – 7 24-SEP-01 00:00:00
- TIMESTAMP '2001-09-28 13:30:00' - 3 25-SEP-01 13:30:00
TIMESTAMP '2001-09-29 03:00:00' -
- @ 1 day 15 hours
TIMESTAMP '2001-09-27 12:00:00'
In the date/time functions of the following table the use of the DATE and TIMESTAMP
data types are interchangeable.
Table 2-26 Date/Time Functions
Return
Function Description Example Result
Type
ADD_MONTHS(DATE, Add months to a date; see ADD_MONTHS('28-FEB-97', 31-MAY-97
DATE
NUMBER) Section 2.4.8.1 3.8) 00:00:00
Current date; see Section
CURRENT_DATE DATE CURRENT_DATE 04-JUL-07
2.4.8.8
Returns the current date
04-JUL-07
CURRENT_TIMESTAMP TIMESTAMP and time; see Section CURRENT_TIMESTAMP
15:33:23.484
2.4.8.8
EXTRACT(hour FROM
EXTRACT(field FROM DOUBLE Get subfield; see Section
TIMESTAMP '2001-02-16 20
TIMESTAMP) PRECISION 2.4.8.2
20:38:40')
Returns the last day of the
month represented by the
given date. If the given
30-APR-98
LAST_DAY(DATE) DATE date contains a time LAST_DAY('14-APR-98')
00:00:00
portion, it is carried
forward to the result
unchanged.
Current date and time
LOCALTIMESTAMP [ (start of current 04-JUL-07
TIMESTAMP LOCALTIMESTAMP
(precision) ] transaction); see Section 15:33:23.484
2.4.8.8
Number of months
MONTHS_BETWEEN(DATE, MONTHS_BETWEEN('28-FEB-
NUMBER between two dates; see 3
DATE) 07', '30-NOV-06')
Section 2.4.8.3
NEXT_DAY(DATE, DATE Date falling on NEXT_DAY('16-APR- 20-APR-07
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 255
Database Compatibility for Oracle® Developers
Reference Guide
Return
Function Description Example Result
Type
dayofweek) dayofweek following 07','FRI') 00:00:00
specified date; see Section
2.4.8.4
NEW_TIME(TO_DATE
NEW_TIME(DATE, Converts a date and time 2005/05/29
DATE '2005/05/29 01:45',
VARCHAR, VARCHAR) to an alternate time zone 21:45:00
'AST', 'PST')
Converts a number to a
SELECT
NUMTODSINTERVAL(NUMB specified day or second 4 days
INTERVAL numtodsinterval(100,
ER, INTERVAL) interval; see Section 04:00:00
„hour‟);
2.4.8.9.
Converts a number to a
SELECT
NUMTOYMINTERVAL(NUMB specified year or month 8 years 4
INTERVAL numtoyminterval(100,
ER, INTERVAL) interval; see Section mons
„month‟);
2.4.8.10.
Date rounded according to
ROUND(DATE [, format ROUND(TO_DATE('29-MAY- 01-JUN-05
DATE format; see Section
]) 05'),'MON') 00:00:00
2.4.8.6
SYS_EXTRACT_UTC(CAST('24
SYS_EXTRACT_UTC(TIME
Returns Coordinated -MAR-11 12:30:00PM - 24-MAR-11
STAMP WITH TIME TIMESTAMP
Universal Time 04:00' AS TIMESTAMP WITH 16:30:00
ZONE)
TIME ZONE))
Returns current date and 01-AUG-12
SYSDATE DATE SYSDATE
time 11:12:34
01-AUG-12
Returns current date and
SYSTIMESTAMP() TIMESTAMP SYSTIMESTAMP 11:11:23.665
time
229 -07:00
Truncate according to 01-MAY-05
TRUNC(TO_DATE('29-MAY-
TRUNC(DATE [format]) DATE format; see Section
05'), 'MON')
2.4.8.7 00:00:00
2.4.8.1 ADD_MONTHS
The ADD_MONTHS functions adds (or subtracts if the second parameter is negative) the
specified number of months to the given date. The resulting day of the month is the same
as the day of the month of the given date except when the day is the last day of the month
in which case the resulting date always falls on the last day of the month.
Any fractional portion of the number of months parameter is truncated before performing
the calculation.
If the given date contains a time portion, it is carried forward to the result unchanged.
The following are examples of the ADD_MONTHS function.
SELECT ADD_MONTHS('13-JUN-07',4) FROM DUAL;
add_months
--------------------
13-OCT-07 00:00:00
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 256
Database Compatibility for Oracle® Developers
Reference Guide
(1 row)
SELECT ADD_MONTHS('31-DEC-06',2) FROM DUAL;
add_months
--------------------
28-FEB-07 00:00:00
(1 row)
SELECT ADD_MONTHS('31-MAY-04',-3) FROM DUAL;
add_months
--------------------
29-FEB-04 00:00:00
(1 row)
2.4.8.2 EXTRACT
The EXTRACT function retrieves subfields such as year or hour from date/time values.
The EXTRACT function returns values of type DOUBLE PRECISION. The following are
valid field names:
YEAR
The year field
SELECT EXTRACT(YEAR FROM TIMESTAMP '2001-02-16 20:38:40') FROM DUAL;
date_part
-----------
2001
(1 row)
MONTH
The number of the month within the year (1 - 12)
SELECT EXTRACT(MONTH FROM TIMESTAMP '2001-02-16 20:38:40') FROM DUAL;
date_part
-----------
2
(1 row)
DAY
The day (of the month) field (1 - 31)
SELECT EXTRACT(DAY FROM TIMESTAMP '2001-02-16 20:38:40') FROM DUAL;
date_part
-----------
16
(1 row)
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 257
Database Compatibility for Oracle® Developers
Reference Guide
HOUR
The hour field (0 - 23)
SELECT EXTRACT(HOUR FROM TIMESTAMP '2001-02-16 20:38:40') FROM DUAL;
date_part
-----------
20
(1 row)
MINUTE
The minutes field (0 - 59)
SELECT EXTRACT(MINUTE FROM TIMESTAMP '2001-02-16 20:38:40') FROM DUAL;
date_part
-----------
38
(1 row)
SECOND
The seconds field, including fractional parts (0 - 59)
SELECT EXTRACT(SECOND FROM TIMESTAMP '2001-02-16 20:38:40') FROM DUAL;
date_part
-----------
40
(1 row)
2.4.8.3 MONTHS_BETWEEN
The MONTHS_BETWEEN function returns the number of months between two dates. The
result is a numeric value which is positive if the first date is greater than the second date
or negative if the first date is less than the second date.
The result is always a whole number of months if the day of the month of both date
parameters is the same, or both date parameters fall on the last day of their respective
months.
The following are some examples of the MONTHS_BETWEEN function.
SELECT MONTHS_BETWEEN('15-DEC-06','15-OCT-06') FROM DUAL;
months_between
----------------
2
(1 row)
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 258
Database Compatibility for Oracle® Developers
Reference Guide
SELECT MONTHS_BETWEEN('15-OCT-06','15-DEC-06') FROM DUAL;
months_between
----------------
-2
(1 row)
SELECT MONTHS_BETWEEN('31-JUL-00','01-JUL-00') FROM DUAL;
months_between
----------------
0.967741935
(1 row)
SELECT MONTHS_BETWEEN('01-JAN-07','01-JAN-06') FROM DUAL;
months_between
----------------
12
(1 row)
2.4.8.4 NEXT_DAY
The NEXT_DAY function returns the first occurrence of the given weekday strictly greater
than the given date. At least the first three letters of the weekday must be specified - e.g.,