I'm trying to implement server side rendering with react/redux. My components
use `componentWillMount` to start fetching data from a REST API and I use a
simple counter in my redux store to see how many fetching requests are
pending. I then have this code server side:
      ReactDOM.renderToString(rootEle)
      store.subscribe(() => {
        const state = store.getState()
        if (state.wait === 0) {
          const html = ReactDOM.renderToString(rootEle)
          res.render(html)
        }
      })
which would work except for the fact that the second
`ReactDOM.renderToString(rootEle)` fires all the componentWillMount events
again, which increase the wait counter, which results in an infinite loop. So
ideally, I was wondering if there was a way to call `const something =
ReactDOM.render(rootEle)`, wait a few seconds for my wait counter to go down
to zero and `res.render(something.toString())`.
**Edit:** As a temporary fix, I'm unsubscribing from the redux store when I
reach wait === 0:
      ReactDOM.renderToString(rootEle)
      const unsubscribe = store.subscribe(() => {
        const state = store.getState()
        if (state.wait === 0) {
          unsubscribe()
          const html = ReactDOM.renderToString(rootEle)
          res.send(html)
        }
      })
though it still does a bunch of useless async calls because that second
renderToString calls the componentWillMount methods again.