ensures we can test the IDN policies without using resolvable
domain names. Third, browsers will display the Punycode
after an IDN policy is triggered7. Chrome is the only browser
that has an additional warning page for “look-alike URLs” [9].
This warning only applies to IDNs that look like a predeﬁned
set of popular domain names (P3 “skeleton-rule”). We will
further discuss this warning mechanism later in Section 7.
5.2 Results: Desktop Browsers
We start with the latest versions of desktop browsers. In Ta-
ble 5, we report a failure rate which is the ratio of IDNs that
are displayed as Unicode over all the tested IDNs. Display-
ing Unicode indicates that the browser has failed to block
the IDN. In Figure 1, we show the failure rate for each test-
ing category. Note that the failure rate has slightly different
meanings for categories 1–6 and 7-10. For categories 1–6, it
means the browser does not fully execute the claimed policies,
which gives attackers the opportunity to create homograph
IDNs. For categories 7-10, since all the testing IDNs are al-
ready homograph IDNs, the failure rate indicates risks more
directly.
Chrome and Edge (Chromium).
The ﬁrst observation is
Chrome and Edge have identical numbers in both Table 5 and
Figure 1. This indicates Edge has the same polices as Chrome
due to the use of Chromium. As such, we use Chrome as an
example to discuss them together.
Table 5 shows that Chrome has the strictest policies com-
pared to Firefox and Safari. Only 1,963 out of 9,519 IDNs
(20.62%) are displayed in Unicode by Chrome. Noticeably,
Chrome (and all other browsers) has a failure rate of 0% under
category-1 (Figure 1). It means browsers enforced the rule to
prevent the mixing of Latin, Cyrillic or Greek characters.
However, for the other nine categories, Chrome’s failure
rate is non-zero. The result of categories 2–6 suggests that
Chrome does not fully enforce the rules as claimed. Category-
3 has the highest failure rate (85.3%). It turns out that Chrome
allows whole-script confusables from Cyrillic to be combined
with common TLDs such as .com and .net. The other 14.7%
IDNs in category-3 are blocked because they have triggered
other rules (e.g.skeleton rule). The results in categories 4 and
7Note that other types of domain squatting (e.g., typo-squatting [4],
combo-squatting [29]) do not trigger such Punycode displaying since these
squatting domains do not use Unicode characters.
e
t
a
R
e
r
u
l
i
a
F
 1
 0.8
 0.6
 0.4
 0.2
 0
Safari
Firefox
Chrome
Edge
Case1
Case2
Case3
Case4
Case5
Case6
Case7
Case8
Case9
Case10
Figure 1: Failure rates of the 10 testing categories for the latest version of four browsers.
6 indicate Chrome does not fully cover Unicode confusables
in the Unicode documentation and all the ASCII look-alike
scripts. Category-5 has a failure rate of 13.3% (skeleton rule),
indicating the skeleton comparison cannot perfectly capture
all the confusable characters in the top domains.
For categories 7–10, the results conﬁrm that our strategies
to bypass Chrome policies are largely successful. In category-
7, by using a more extensive confusable character table, we
can cause more failures to the skeleton rule. In category-8, we
focus on target domain names that are not in the top domain
list (e.g., those under .edu, .gov, .mil, .org, and .net), and
Chrome fails to capture 40% of the homograph IDNs. Certain
Unicode blocks are consistently missed. For example, when
using confusable characters from the “Latin Extended-A” to
impersonate these domain names, the failure rate is 100%.
For categories 9 and 10, while the failure rates are lower, the
results still indicate there are exceptions in the current mixing
rule. For example, full-Substitution with “Latin Extended-A”
causes a 100% failure rate, followed by a full-Substitution
with “Cyrillic.” Also, certain blocks within the Latin can be
mixed without alerting Chrome (e.g., mixing “Latin Extended-
A” and “Latin-1 Supplement”).
Safari.
Safari has a failure rate of 42.91% overall. Com-
pared to Chrome, Safari does not implement as many rules.
For the rule that Safari did implement (e.g., the rule corre-
sponds to category-6), Safari does not make any mistakes.
In addition, Safari blocks all the IDNs in category-1 (mix-
ing script) and category-3 (whole-script Cyrillic). This is
because Safari’s allowed scripts have already excluded Latin
look-alike scripts such as Greek and Cyrillic. Even so, it is
still feasible to create homograph IDNs to bypass Safari. As
shown in Figure 1, Safari has a failure rate over 60% on the
homograph IDNS in categories 7, 8 and 9.
Firefox.
Firefox has a higher failure rate of 44.46% among
tested browsers. In particular, Firefox does not implement
the skeleton rule, and thus the corresponding testing cases
(categories 5, 7, 8) all have relatively higher failure rates.
Case Studies.
So far, we have discovered several strate-
gies to bypass existing IDN policies. Some of the strategies
are more useful than others to craft high-quality homograph
IDNs. To illustrate the differences, in Table 6, we present
example homograph IDNs crafted for Chrome, based on the
mistakes Chrome made in each category (except for category-
Category Example IDNs to Bypass Chrome
Test-2
Test-3
Test-4
Test-5
Test-6
Test-7
Test-8
Test-9
Test-10
Table 6: Example homograph IDNs that can bypass Chrome’s
policies to be displayed in Unicode.
1 where Chrome has no failure). We ﬁnd that it is easy to craft
homograph IDNs for categories 3, 5, 7 and 8. For category-4,
most of the dangerous patterns are mimicking non-English
letters and symbols (such as slash). This limits the ability
to generate homograph IDNs. For category-6, although we
have found a large number of individual characters from dif-
ferent Unicode scripts missed by Chrome, it is not easy to
craft high-quality homograph IDNs due to other rules (e.g.,
non-mixing rules, skeleton rules). For categories 9 and 10,
although we can easily ﬁnd homograph IDNs, the IDNs need
to be whole-script (i.e., all the characters need to be replaced),
and thus might sacriﬁce the quality of impersonation. Overall,
the exception rules identiﬁed for categories 3, 5, 7 and 8 are
the most effective ways to craft homograph IDNs.
5.3 Results: Mobile Browsers
We perform the same analysis on the mobile browsers includ-
ing Android Chrome and iOS Safari. After analyzing their
latest and historical versions, we ﬁnd that the results are ex-
actly the same as the corresponding web versions (Chrome
and Safari). As such, we use “Chrome” and “Safari” to rep-
resent both the web and mobile versions. Note that mobile
browsers present additional challenges for users to recognize
web domain names due to the limited screen size. Some mo-
bile browsers would only display part of the URLs or even
hide the whole URLs in the address bar [38,39], which height-
ens the security risks. The user interface (UI) design, however,
is beyond the scope of this paper.
Safari
Firefox
Chrome
Edge
e
t
a
R
e
r
u
l
i
a
F
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
Safari
Firefox
Chrome
Edge
e
t
a
R
e
r
u
l
i
a
F
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
Jan
15
Jul
15
Jan
16
Jul
16
Jan
17
Jul
17
Jan
18
Jul
18
Jan
19
Jul
19
Jan
20
Jul
20
Jan
15
Jul
15
Jan
16
Jul
16
Jan
17
Jul
17
Jan
18
Jul
18
Jan
19
Jul
19
Jan
20
Jul
20
(a) Testing categories 1–6
(b) Testing categories 7–10
Figure 2: Failure rates over time for different browser versions from January 2015 to April 2020.
5.4 Browser Policy Changes Over Time
Next, we analyze the historical browser versions to understand
how their IDN policies change over time. Given a browser,
we sort all its versions by the release dates. Then we select the
most updated version for each quarter (4 quarters per year) to
report their failure rates. As shown in Figure 2, we break down
the results for categories 1–6 (Figure 2(a)) and categories
7–10 (Figure 2(b)) since their failure rates have different
meanings. We have merged the curve for Edge Chromium
and Edge Legacy since their release times do not overlap. We
have also tested IE, but all the testing cases are displayed as
Punycode. As such, we omit IE from Figure 2 for brevity.
Overall, most browsers follow a similar trend. First, the
failure rates were initially at 0% because the browser did not
support IDN yet in the early versions. All the testing IDNs are
displayed as Punycode. These include Chrome browsers be-
fore version 51.0 (released in June 2016), Firefox browsers be-
fore version 61.0 (released in June 2018), and Edge browsers
before 80.0 (released in February 2020). Second, once the
browser started to support IDNs, the failure rates immediately
jumped to a high level due to a lack of defense policies. Third,
for browsers such as Chrome and Safari, their failure rates
were gradually decreasing afterward as browsers added new
IDN policies. For example, starting in March 2017, Chrome
had a series of updates that signiﬁcantly decreased the failure
rate (mostly for categories 2, 5, 8, 9, and 10). In comparison,
Firefox’s failure rate has stayed at a similar level, indicating
fewer or no updates of its IDN policies. As mentioned be-
fore, Edge changed to use Chromium in early 2020, and has
followed Chrome’s IDN policies since then.
One interesting observation (see Figure 2(b)) is that
Chrome’s failure rate went higher at the end of 2019, indi-
cating certain policies were revoked. A further inspection
shows the blocking decisions on many testing cases in cate-
gories 5, 7 and 8 were reversed — the new Chrome version
re-allowed certain homograph IDNs to be displayed as Uni-
code. These re-allowed homograph IDNs contain characters
from three main Unicode blocks: “Latin Extended-A,” “Latin
Extended-B,” and “Latin-1 Supplement”. Homograph IDNs
such as a´rmy.mil, ya´le.edu, uchìcago.edu, cano´n.com,
and babbl˛e.com can be displayed in the updated Chrome
even though they were blocked by earlier versions. The rea-
sons behind this are not clear. We have checked the Chromium
commit histories but did not ﬁnd the information that can
explain the reasons behind these changes. If they were not
implementation errors, one possible explanation is that block-
ing these characters might hurt legitimate domain names with
such characters.
6 User Study
We have shown that web browsers cannot block all the homo-
graph IDNs. Next, we present a user study to examine how
end users perceive the homograph IDNs in web browsing.
In particular, we want to compare the homograph IDNs that
browsers (e.g., Chrome) block and those that can bypass exist-
ing policies. We focus on Chrome in this user study because
Chrome has the strictest policies compared to other browsers.
Our study aims to answer three research questions:
• RQ1: Would users fall for homograph IDNs (i.e., incor-
rectly treating them as the real domain names)?
• RQ2: Would users have different rates of detecting IDNs
that are blocked vs. not blocked by Chrome?
• RQ3: What factors are associated with users’ rates of de-
tecting IDNs? (association rather than causality)
6.1 Study Design
To answer these questions, we conducted an online experi-
ment via Amazon Mechanical Turk (MTurk). Our study was
approved by the IRB. The participation of the study was
anonymous and voluntary. We also did not collect any per-
sonal identiﬁable information (PII) from the participants. Par-
ticipants can choose to withdraw their data at anytime.
We presented the study as a generic survey on web brows-
ing. We did not mention “security” or “phishing” in the study
description to avoid priming users. Before the study started,
we gave participants a short tutorial to explain what “domain
name” and “browser address bar” are to ensure they can under-
stand our terminology in the study. Upon ﬁnishing the study,
we debriefed the participants by providing detailed explana-
tions for the speciﬁc purpose of the study, and information on
how homograph IDN is used for phishing8.
Each participant was asked to browse a series of screen-
shots of website landing pages. As shown in Figure 3, a
screenshot contains both the address bar9 and the real landing
page. Some of these screenshots impersonated domain names
with homograph IDNs (e.g., www.bankofamerl,ca.com in
Figure 3), while the rest showed the real domain names. To
see whether people can detect homograph IDNs, for each
screenshot, we asked the participant a question about the au-
thenticity of the website.
A key challenge was to determine how to phrase the ques-
tion to the participants. At a high-level, we need to make sure
users are making decisions based on the controlled informa-
tion (e.g., whether the domain name is a homograph IDN).
This means we need to draw users’ attention to the address
bar. At the same time, we also wish to avoid over-priming
users which will likely make the study unrealistic. In practice,
users are often caught off-guard by phishing websites when
they are not paying attention. Thus over-priming users could
over-estimate users’ ability to detect security threats [59].
Pilot Studies.
To explore the design space, we have con-
ducted 4 pilot studies with 77 participants. We refer interested
readers to Appendix-A for details. Here, we only brieﬂy sum-
marize our ﬁndings, and describe our ﬁnal chosen design. The