### Ensuring Robust IDN Policy Testing and Browser Behavior Analysis

To test Internationalized Domain Name (IDN) policies effectively, we avoid using resolvable domain names. Additionally, when an IDN policy is triggered, browsers display the Punycode version of the domain. Chrome is unique in providing an additional warning page for "look-alike URLs" [9], which applies to IDNs that resemble a predefined set of popular domain names (P3 "skeleton-rule"). This warning mechanism will be discussed further in Section 7.

#### 5.2 Results: Desktop Browsers

We begin with the latest versions of desktop browsers. In Table 5, we report the failure rate, defined as the ratio of IDNs displayed in Unicode to the total number of tested IDNs. Displaying Unicode indicates that the browser failed to block the IDN. Figure 1 illustrates the failure rates for each testing category. Note that the failure rate has slightly different meanings for categories 1-6 and 7-10. For categories 1-6, it indicates the browser's incomplete execution of claimed policies, allowing attackers to create homograph IDNs. For categories 7-10, since all tested IDNs are already homograph IDNs, the failure rate directly indicates the risk.

**Chrome and Edge (Chromium):**
The first observation is that Chrome and Edge have identical numbers in both Table 5 and Figure 1, indicating that Edge follows the same policies as Chrome due to its use of Chromium. Therefore, we use Chrome as an example to discuss their behavior together.

Table 5 shows that Chrome has the strictest policies compared to Firefox and Safari. Only 1,963 out of 9,519 IDNs (20.62%) are displayed in Unicode by Chrome. Notably, all browsers, including Chrome, have a 0% failure rate under category-1 (Figure 1), meaning they enforce the rule to prevent the mixing of Latin, Cyrillic, or Greek characters.

However, for the other nine categories, Chrome’s failure rate is non-zero. Categories 2-6 suggest that Chrome does not fully enforce the rules as claimed. Category-3 has the highest failure rate (85.3%), indicating that Chrome allows whole-script confusables from Cyrillic to be combined with common TLDs like .com and .net. The remaining 14.7% of IDNs in category-3 are blocked because they trigger other rules (e.g., skeleton rule). The results in categories 4 and 6 show that Chrome does not fully cover Unicode confusables in the Unicode documentation and all ASCII look-alike scripts. Category-5 has a 13.3% failure rate (skeleton rule), indicating that the skeleton comparison cannot perfectly capture all confusable characters in top domains.

For categories 7-10, our strategies to bypass Chrome policies are largely successful. In category-7, using a more extensive confusable character table causes more failures to the skeleton rule. In category-8, focusing on target domain names not in the top domain list (e.g., those under .edu, .gov, .mil, .org, and .net) results in Chrome failing to capture 40% of the homograph IDNs. Certain Unicode blocks, such as "Latin Extended-A," consistently cause a 100% failure rate. For categories 9 and 10, while the failure rates are lower, there are still exceptions in the current mixing rule. For example, full-substitution with "Latin Extended-A" and "Cyrillic" causes a 100% failure rate, and certain blocks within the Latin can be mixed without alerting Chrome (e.g., mixing "Latin Extended-A" and "Latin-1 Supplement").

**Safari:**
Safari has an overall failure rate of 42.91%. Compared to Chrome, Safari implements fewer rules. For the rules Safari did implement (e.g., the rule corresponding to category-6), Safari does not make any mistakes. Safari blocks all IDNs in category-1 (mixing script) and category-3 (whole-script Cyrillic) because its allowed scripts exclude Latin look-alike scripts such as Greek and Cyrillic. Despite this, it is still possible to create homograph IDNs to bypass Safari. As shown in Figure 1, Safari has a failure rate over 60% for homograph IDNs in categories 7, 8, and 9.

**Firefox:**
Firefox has the highest failure rate among tested browsers at 44.46%. Specifically, Firefox does not implement the skeleton rule, leading to higher failure rates in categories 5, 7, and 8.

**Case Studies:**
We have identified several strategies to bypass existing IDN policies. Some strategies are more effective than others in crafting high-quality homograph IDNs. Table 6 presents example homograph IDNs crafted for Chrome based on the mistakes it made in each category (except category-1, where Chrome has no failure). We find that it is easy to craft homograph IDNs for categories 3, 5, 7, and 8. For category-4, most dangerous patterns mimic non-English letters and symbols, limiting the ability to generate homograph IDNs. For category-6, although many individual characters from different Unicode scripts are missed by Chrome, it is not easy to craft high-quality homograph IDNs due to other rules (e.g., non-mixing rules, skeleton rules). For categories 9 and 10, while homograph IDNs can be easily found, they need to be whole-script, potentially sacrificing the quality of impersonation. Overall, the exception rules identified for categories 3, 5, 7, and 8 are the most effective ways to craft homograph IDNs.

#### 5.3 Results: Mobile Browsers

We perform the same analysis on mobile browsers, including Android Chrome and iOS Safari. After analyzing their latest and historical versions, we find that the results are exactly the same as the corresponding web versions (Chrome and Safari). Thus, we use "Chrome" and "Safari" to represent both web and mobile versions. Note that mobile browsers present additional challenges for users to recognize web domain names due to limited screen size. Some mobile browsers only display part of the URLs or hide them entirely in the address bar, increasing security risks. However, the user interface (UI) design is beyond the scope of this paper.

#### 5.4 Browser Policy Changes Over Time

Next, we analyze historical browser versions to understand how their IDN policies have changed over time. For each browser, we sort all versions by release date and select the most updated version for each quarter to report their failure rates. Figure 2 breaks down the results for categories 1-6 (Figure 2(a)) and categories 7-10 (Figure 2(b)), as their failure rates have different meanings. We have merged the curve for Edge Chromium and Edge Legacy since their release times do not overlap. We also tested IE, but all testing cases were displayed as Punycode, so we omit IE from Figure 2 for brevity.

Overall, most browsers follow a similar trend. Initially, the failure rates were 0% because the browsers did not support IDN in early versions. All testing IDNs were displayed as Punycode. This includes Chrome before version 51.0 (released in June 2016), Firefox before version 61.0 (released in June 2018), and Edge before version 80.0 (released in February 2020). Once the browsers started supporting IDNs, the failure rates immediately jumped to a high level due to a lack of defense policies. For browsers like Chrome and Safari, their failure rates gradually decreased as new IDN policies were added. For example, starting in March 2017, Chrome had a series of updates that significantly reduced the failure rate (mostly for categories 2, 5, 8, 9, and 10). In contrast, Firefox’s failure rate has remained relatively stable, indicating fewer or no updates to its IDN policies. As mentioned, Edge switched to Chromium in early 2020 and has followed Chrome’s IDN policies since then.

One interesting observation (see Figure 2(b)) is that Chrome’s failure rate increased at the end of 2019, indicating certain policies were revoked. Further inspection shows that blocking decisions for many testing cases in categories 5, 7, and 8 were reversed. The new Chrome version re-allowed certain homograph IDNs to be displayed as Unicode. These re-allowed homograph IDNs contain characters from three main Unicode blocks: "Latin Extended-A," "Latin Extended-B," and "Latin-1 Supplement." Homograph IDNs such as a´rmy.mil, ya´le.edu, uchìcago.edu, cano´n.com, and babbl˛e.com can now be displayed in the updated Chrome, even though they were blocked by earlier versions. The reasons behind this are unclear. We checked the Chromium commit histories but did not find information explaining these changes. If not implementation errors, one possible explanation is that blocking these characters might affect legitimate domain names with such characters.

### 6. User Study

We have shown that web browsers cannot block all homograph IDNs. Next, we present a user study to examine how end users perceive homograph IDNs in web browsing. We focus on Chrome because it has the strictest policies compared to other browsers. Our study aims to answer three research questions:

- **RQ1:** Would users fall for homograph IDNs (i.e., incorrectly treating them as the real domain names)?
- **RQ2:** Would users have different rates of detecting IDNs that are blocked vs. not blocked by Chrome?
- **RQ3:** What factors are associated with users’ rates of detecting IDNs? (association rather than causality)

#### 6.1 Study Design

To answer these questions, we conducted an online experiment via Amazon Mechanical Turk (MTurk). Our study was approved by the IRB, and participation was anonymous and voluntary. We did not collect any personally identifiable information (PII) from participants, and they could withdraw their data at any time.

We presented the study as a generic survey on web browsing, avoiding terms like "security" or "phishing" to prevent priming users. Before the study, we provided a short tutorial to explain "domain name" and "browser address bar" to ensure participants understood the terminology. Upon completion, we debriefed participants with detailed explanations of the study's purpose and information on how homograph IDNs are used for phishing.

Each participant was asked to browse a series of screenshots of website landing pages. A screenshot contained both the address bar and the real landing page. Some screenshots impersonated domain names with homograph IDNs (e.g., www.bankofamerl,ca.com), while others showed real domain names. To assess whether participants could detect homograph IDNs, we asked a question about the authenticity of the website for each screenshot.

A key challenge was phrasing the question to ensure users made decisions based on the controlled information (e.g., whether the domain name is a homograph IDN) without over-priming them. Over-priming could overestimate users' ability to detect security threats.

**Pilot Studies:**
To explore the design space, we conducted four pilot studies with 77 participants. Interested readers can refer to Appendix-A for details. Here, we summarize our findings and describe the final chosen design.