title:PEGASUS: Bridging Polynomial and Non-polynomial Evaluations in Homomorphic
Encryption
author:Wen-jie Lu and
Zhicong Huang and
Cheng Hong and
Yiping Ma and
Hunter Qu
3
4
0
0
0
.
1
2
0
2
.
1
0
0
0
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
5
-
4
3
9
8
-
1
8
2
7
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
1
2
0
2
2021 IEEE Symposium on Security and Privacy (SP)
PEGASUS: Bridging Polynomial and Non-polynomial Evaluations in Homomorphic
Encryption
Wen-jie Lu∗, Zhicong Huang∗, Cheng Hong∗, Yiping Ma† and Hunter Qu∗
∗ Gemini Lab, Alibaba Group, † University of Pennsylvania
Abstract—Homomorphic encryption (HE) is considered as
one of the most important primitives for privacy-preserving
applications. However, an efﬁcient approach to evaluate both
polynomial and non-polynomial functions on encrypted data
is still absent, which hinders the deployment of HE to real-
life applications. To address this issue, we propose a practical
framework PEGASUS. PEGASUS can efﬁciently switch back
and forth between a packed CKKS ciphertext and FHEW ci-
phertexts without decryption, allowing us to evaluate arithmetic
functions efﬁciently on the CKKS side, and to evaluate look-up
tables on FHEW ciphertexts. Our FHEW → CKKS conversion
algorithm is more practical than the existing methods. We
improve the computational complexity from linear to sublinear.
Moreover,
the size of our conversion key is signiﬁcantly
smaller, e.g., reduced from 80 gigabytes to 12 megabytes.
We present extensive benchmarks of PEGASUS,
including
sigmoid/ReLU/min/max/division, sorting and max-pooling. To
further demonstrate the capability of PEGASUS, we developed
two more applications. The ﬁrst one is a private decision tree
evaluation whose communication cost is about two orders of
magnitude smaller than the previous HE-based approaches.
The second one is a secure K-means clustering that is able
to run on thousands of encrypted samples in minutes that
outperforms the best existing system by 14× – 20×. To the best
of our knowledge, this is the ﬁrst work that supports practical
K-means clustering using HE in a single server setting.
Keywords-Homomorphic Computation, Floating Point Com-
putation, CKKS/FHEW
I. INTRODUCTION
Homomorphic encryption (HE) is a cryptosystem that
enables homomorphic operations on encrypted data and is
considered as one of the most important building blocks
for privacy-preserving applications. A potential application
of HE is secure outsourcing [3], [36], where all the data
comes from clients. That is, the client(s) encrypts his/her
data using HE and uploads the ciphertexts to the server
that performs all the computations over encrypted data. The
server then returns the result in the form of ciphertext to the
client that can decrypt to get the computed result. Another
potential application of HE is secure two-party computation.
The difference from secure outsourcing is that the server also
holds its private databases, and the clients send encrypted
queries to the server. Many applications fall into this setting,
e.g., the private information retrieval [42] and the decision-
tree evaluation [37], [51].
† Yiping participated in this work as an internship at Alibaba.
Most of the current HE schemes can be categorized into
word-wise HE (such as BFV [26], BGV [8] and CKKS [14])
and bit-wise HE (such as FHEW [24] and TFHE [18]). Each
type has particular advantages and disadvantages. Word-
wise HEs support efﬁcient single-instruction-multiple-data
(SIMD) style homomorphic operations (i.e., addition and
multiplication) by packing multiple plaintexts into a single
ciphertext [49]. However, it becomes difﬁcult to compute
non-polynomial functions such as sigmoid, min/max, and
division on the ciphertexts of word-wise HEs. As a compro-
mise, the existing word-wise HE-based approaches approxi-
mate non-polynomial functions using low-degree polynomi-
als [29], [39] or simply avoid them, e.g. replacing the max-
pooling with average-pooling [22]. Moreover, in applications
such as K-means clustering,
inevitable non-
polynomial functions (i.e., min-index and division) that are
hard to approximate via low-degree polynomials.
there exist
Contrary to word-wise HEs, bit-wise HEs support arbi-
trary functions presented as boolean circuits by encrypting
each bit of the plain values using some representatives from
their message space. However, as shown in [17], [18], bit-
wise HEs are barely practical for addition and multiplication
circuits, especially when the boolean circuit consists of thou-
sands of fan-in bits and a large circuit depth. For example,
[18] took about a half minute to multiply two encrypted
16-bit integers. Also, the expansion ratio of bit-wise HEs is
usually several orders of magnitude larger than the word-
wise HEs which could lead to a higher communication cost.
When applying HEs to real-world applications such as
secure neural network inferences [22], [29], the problem
is even more challenging. That is because the inference
procedure computes many instances of arithmetic functions
such as convolution, and non-polynomial functions such
as sigmoid and max-pooling. It is then natural to ask the
following question:
Can we evaluate both polynomial
functions and non-
polynomial functions on encrypted data efﬁciently and ef-
fectively?
Unfortunately,
there are few practical approaches and
frameworks that achieve this target.
A. Related Work
Cheon et al. [15], [16] presented an efﬁcient (in the
amortized sense) method to compute min/max over the
© 2021, Wen-jie Lu. Under license to IEEE.
DOI 10.1109/SP40001.2021.00043
1057
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:25:55 UTC from IEEE Xplore.  Restrictions apply. 
Table I: Memory cost and computation costs (number of
polynomial multiplications) of the repacking algorithms. N
(resp. n) denotes the dimension of RLWE (resp. LWE). q is
the ciphertext modulus and (cid:96) denotes the number of LWE
ciphertexts to repack. We have 1 ≤ (cid:96) ≤ N/2 and N (cid:29) n.
Space (bit-size)
Computation
[7]
O(N n log q)
[11, §3.4] O(N log N log q)
Ours
O(N log q)
O(min(
n,
O(n)
√
O((cid:96) + log(N/(cid:96)))
√
(cid:96) + log((cid:100)n/(cid:96)(cid:101))))
CKKS scheme. Their method is suitable to compute the
min/max on a large batch (e.g., > 216) of encrypted integer
pairs, but is less suitable for a recursive comparison such
as sorting an encrypted vector. Moreover, their method is
designed speciﬁcally for the min/max operations, and it is
not clear how to use it to compute other non-polynomial
functions, e.g., square-root and division.
Micciancio et al. [43] presented a ﬂexible method for non-
polynomial functions by evaluating look-up tables (LUT) on
ciphertexts. Indeed, their method uses a learning-with-error
(LWE) -based HE scheme. However, their method demands
the plaintext modulus to be a divisor of the LWE dimension,
which is usually chosen as a small value (e.g., an integer of
10–12 bits) for the sake of efﬁciency. As a result, one can
not apply their LUT methods to the scenario that requires a
large plaintext domain. Not to mention that LWE-based HE
schemes do not support SIMD style arithmetic computations.
The most relevant study is by [7]. They designed the
CHIMERA framework to switch between TFHE ciphertexts
and ciphertexts of the torus variant of CKKS/BFV schemes.
On one hand, CHIMERA enables to perform SIMD style
arithmetic operations on the CKKS/BFV side, and to com-
pute LUTs with a large domain on the TFHE side. However,
their conversion TFHE → CKKS/BFV (designated as
repacking) is costly in terms of key size and computation
costs. Although a concurrent work from [11] can improve
the computation efﬁciency of CHIMERA, this improvement
is limited to a small repacking size, i.e., (cid:96) = Ω(log N ).
The computation costs of [11, §3.4] are still high when
(cid:96) ≈ N (see Table I). Moreover, CHIMERA uses multi-
precision ﬂoating-point values of hundreds of bits to main-
tain a proper precision when exporting CKKS/BFV to the
torus. As a result, CHIMERA needs Multi-Precision Fast
Fourier Transform (MP-FFT) for the polynomial operations
in its torus variant of CKKS/BFV, which can signiﬁcantly
deteriorate the efﬁciency of their framework. MP-FFT can be
several orders of magnitude slower compared to their integer
counterparts using Number Theoretic Transform (NTT) and
Residue Number System (RNS).
In Table II, we summarize the insufﬁciency of the current
arts for evaluating polynomial functions and non-polynomial
functions on encrypted data. A practical approach that
Table II: Insufﬁciency of existing approaches. The efﬁciency
in the last column is considered as “high” if the method pro-
vides either a high throughput or a low latency computation.
SIMD?
Flexibility
Key
Efﬁciency
[16]
[43]
[7]
Yes
No
Yes
Yes
Ours
† In the sense of amortization.
Very limited
(min/max)
Limited (LUT on
a small domain)
High (LUT on
large domains)
High (LUT on
large domains)
≈ 4GB
> 5GB
(cid:29) 10GB