# php parser与lexical scanner分析
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
目的：学习语义分析工具的编写原理从而实现自己编写语义分析工具。
读完本文只需要记得phpparser基于zend’s lexical scanner，zend’s lexical
scanner基于re2c。下一次我们会分析一下re2c看看究竟抽象化是怎么通过代码实现的。
## 简单的例子入手
从readme中的例子入手
###  抽象化
    create(ParserFactory::PREFER_PHP7);
    try {
        $ast = $parser->parse($code);
    } catch (Error $error) {
        echo "Parse error: {$error->getMessage()}\n";
        return;
    }
    $dumper = new NodeDumper;
    echo $dumper->dump($ast) . "\n";
    ?>
首先引用了Error NodeDumper ParserFactory
code是\
new一个parserfactory执行create
那么我们打开parserfactory文件查看create函数
函数原型是public function create(int $kind, Lexer $lexer = null, array
$parserOptions = []) : Parser {
同时文件开头定义PHP7为1
也就是kind=1
进入函数内部，lexer=null所以new一个emulative
switch return new multiple参数是new php7和 php5
php7参数是lexer 和parseroptions
lexer=new emulative parseroptions=null
所以parser的值是multiple
然后下一句 ast = parser->parse(code)
转到parser，函数原型public function parse(string $code, ErrorHandler $errorHandler =
null)：
    public function parse(string $code, ErrorHandler $errorHandler = null) {
            if (null === $errorHandler) {
                $errorHandler = new ErrorHandler\Throwing;
            }
            list($firstStmts, $firstError) = $this->tryParse($this->parsers[0], $errorHandler, $code);
            if ($firstError === null) {
                return $firstStmts;
            }
            for ($i = 1, $c = count($this->parsers); $i tryParse($this->parsers[$i], $errorHandler, $code);
                if ($error === null) {
                    return $stmts;
                }
            }
            throw $firstError;
        }
调用tryparse函数，调用parserabstract的parse函数。
    public function parse(string $code, ErrorHandler $errorHandler = null) {
            $this->errorHandler = $errorHandler ?: new ErrorHandler\Throwing;
    ​    $this->lexer->startLexing($code, $this->errorHandler);
    ​    $result = $this->doParse();
    ​    // Clear out some of the interior state, so we don't hold onto unnecessary
    ​    // memory between uses of the parser
    ​    $this->startAttributeStack = [];
    ​    $this->endAttributeStack = [];
    ​    $this->semStack = [];
    ​    $this->semValue = null;
    ​    return $result;
    }
调用lexer的startlexing
    public function startLexing(string $code, ErrorHandler $errorHandler = null) {
            if (null === $errorHandler) {
                $errorHandler = new ErrorHandler\Throwing();
            }
    ​    $this->code = $code; // keep the code around for __halt_compiler() handling
    ​    $this->pos  = -1;
    ​    $this->line =  1;
    ​    $this->filePos = 0;
    ​    // If inline HTML occurs without preceding code, treat it as if it had a leading newline.
    ​    // This ensures proper composability, because having a newline is the "safe" assumption.
    ​    $this->prevCloseTagHasNewline = true;
    ​    $scream = ini_set('xdebug.scream', '0');
    ​    $this->tokens = @token_get_all($code);
    ​    $this->postprocessTokens($errorHandler);
    ​    if (false !== $scream) {
    ​        ini_set('xdebug.scream', $scream);
    ​    }
    }
执行token_get_all
使用 Zend 引擎的词汇扫描仪将给定字符串解析为 PHP 语言令牌
实现了将不同格式的代码转换成通用语言令牌。
随后执行postprocesstokens对token进行处理，记录每一部分的位置，并进行划分。
再执行doparse
对每个token都只记录开始和结束。
随后记录状态，和数据流分析一样，要记录每一句代码执行之前的状态和执行之后的状态，而这些状态存储在statestack中，也就是抽象堆中。
随后执行getnexttoken函数，记录代码所在起始和结束行，token起始和结束位置，所在文件起始和结束位置。
随后判断这个token在不在我们当前分析的代码块中，并将token插入到AST中的执行位置
返回结果
最后dump输出结果
    array(
        0: Stmt_Function(
            byRef: false
            name: Identifier(
                name: test
            )
            params: array(
                0: Param(
                    type: null
                    byRef: false
                    variadic: false
                    var: Expr_Variable(
                        name: foo
                    )
                    default: null
                )
            )
            returnType: null
            stmts: array(
                0: Stmt_Expression(
                    expr: Expr_FuncCall(
                        name: Name(
                            parts: array(
                                0: var_dump
                            )
                        )
                        args: array(
                            0: Arg(
                                value: Expr_Variable(
                                    name: foo
                                )
                                byRef: false
                                unpack: false
                            )
                        )
                    )
                )
            )
        )
    )
stmt__function记录函数定义，identifier标记name是test，params记录函数参数。Expr_variable表示变量，name记录变量名，stmts是函数内部代码。stmt_expression记录表达式，expr_Funccall表示调用函数，name记录函数名，args记录参数
###  实现
    use PhpParser\Node;
    use PhpParser\Node\Stmt\Function_;
    use PhpParser\NodeTraverser;
    use PhpParser\NodeVisitorAbstract;
    $traverser = new NodeTraverser();
    $traverser->addVisitor(new class extends NodeVisitorAbstract {
        public function enterNode(Node $node) {
            if ($node instanceof Function_) {
                // Clean out the function body
                $node->stmts = [];
            }
        }
    });
    $ast = $traverser->traverse($ast);
    echo $dumper->dump($ast) . "\n";
将抽象函数enternode定义，执行traverse函数
    public function traverse(array $nodes) : array {
            $this->stopTraversal = false;
    ​    foreach ($this->visitors as $visitor) {
    ​        if (null !== $return = $visitor->beforeTraverse($nodes)) {
    ​            $nodes = $return;
    ​        }
    ​    }
    ​    $nodes = $this->traverseArray($nodes);
    ​    foreach ($this->visitors as $visitor) {
    ​        if (null !== $return = $visitor->afterTraverse($nodes)) {
    ​            $nodes = $return;
    ​        }
    ​    }
    ​    return $nodes;
    }
执行$nodes = $this->traverseArray($nodes);
    protected function traverseArray(array $nodes) : array {
            $doNodes = [];
    ​    foreach ($nodes as $i => &$node) {
    ​        if ($node instanceof Node) {
    ​            $traverseChildren = true;
    ​            $breakVisitorIndex = null;
    ​            foreach ($this->visitors as $visitorIndex => $visitor) {
    ​                $return = $visitor->enterNode($node);
    ​                if (null !== $return) {
    ​                    if ($return instanceof Node) {
    ​                        $this->ensureReplacementReasonable($node, $return);
    ​                        $node = $return;
    ​                    } elseif (self::DONT_TRAVERSE_CHILDREN === $return) {
    ​                        $traverseChildren = false;
    ​                    } elseif (self::DONT_TRAVERSE_CURRENT_AND_CHILDREN === $return) {
    ​                        $traverseChildren = false;
    ​                        $breakVisitorIndex = $visitorIndex;
    ​                        break;
    ​                    } elseif (self::STOP_TRAVERSAL === $return) {
    ​                        $this->stopTraversal = true;
    ​                        break 2;
    ​                    } else {
    ​                        throw new \LogicException(
    ​                            'enterNode() returned invalid value of type ' . gettype($return)
    ​                        );
    ​                    }
    ​                }
    ​            }
    ​            if ($traverseChildren) {
    ​                $node = $this->traverseNode($node);
    ​                if ($this->stopTraversal) {
    ​                    break;
    ​                }
    ​            }
    ​            foreach ($this->visitors as $visitorIndex => $visitor) {
    ​                $return = $visitor->leaveNode($node);
    ​                if (null !== $return) {
    ​                    if ($return instanceof Node) {
    ​                        $this->ensureReplacementReasonable($node, $return);
    ​                        $node = $return;
    ​                    } elseif (\is_array($return)) {
    ​                        $doNodes[] = [$i, $return];
    ​                        break;
    ​                    } elseif (self::REMOVE_NODE === $return) {
    ​                        $doNodes[] = [$i, []];
    ​                        break;
    ​                    } elseif (self::STOP_TRAVERSAL === $return) {
    ​                        $this->stopTraversal = true;
    ​                        break 2;
    ​                    } elseif (false === $return) {
    ​                        throw new \LogicException(
    ​                            'bool(false) return from leaveNode() no longer supported. ' .
    ​                            'Return NodeTraverser::REMOVE_NODE instead'
    ​                        );
    ​                    } else {
    ​                        throw new \LogicException(
    ​                            'leaveNode() returned invalid value of type ' . gettype($return)
    ​                        );
    ​                    }
    ​                }
    ​                if ($breakVisitorIndex === $visitorIndex) {
    ​                    break;
    ​                }
    ​            }
    ​        } elseif (\is_array($node)) {
    ​            throw new \LogicException('Invalid node structure: Contains nested arrays');
    ​        }
    ​    }
    ​    if (!empty($doNodes)) {
    ​        while (list($i, $replace) = array_pop($doNodes)) {
    ​            array_splice($nodes, $i, 1, $replace);
    ​        }
    ​    }
    ​    return $nodes;
    }
实现进入子节点并记录
其中因为我们补充的enternode是$node->stmts = [];
所以最终结果是
    array(
        0: Stmt_Function(
            byRef: false
            name: Identifier(
                name: test
            )
            params: array(
                0: Param(
                    type: null
                    byRef: false
                    variadic: false
                    var: Expr_Variable(
                        name: foo
                    )
                    default: null
                )
            )
            returnType: null
            stmts: array(
            )
        )
    )
也就是仅仅记录函数本身不包括其中内容和操作。
所以结论就是phpparser的抽象化是由token_get_all实现的，生成AST是其主要部分，代码分析操作由接口实现。
###  Zend engine’s lexical scanner
我们看看Zend engine’s lexical scanner的源码，来学习一下词汇扫描仪是怎么抽象化代码的。
####  初始化
    ZEND_API zend_result open_file_for_scanning(zend_file_handle *file_handle)
    {
        char *buf;
        size_t size;
        zend_string *compiled_filename;
    if (zend_stream_fixup(file_handle, &buf, &size) == FAILURE) {
        /* Still add it to open_files to make destroy_file_handle work */
        zend_llist_add_element(&CG(open_files), file_handle);
        file_handle->in_list = 1;
        return FAILURE;
    }
    ZEND_ASSERT(!EG(exception) && "stream_fixup() should have failed");
    zend_llist_add_element(&CG(open_files), file_handle);
    file_handle->in_list = 1;
    /* Reset the scanner for scanning the new file */
    SCNG(yy_in) = file_handle;
    SCNG(yy_start) = NULL;
    if (size != (size_t)-1) {
        if (CG(multibyte)) {
            SCNG(script_org) = (unsigned char*)buf;
            SCNG(script_org_size) = size;
            SCNG(script_filtered) = NULL;
    ​        zend_multibyte_set_filter(NULL);
    ​        if (SCNG(input_filter)) {
    ​            if ((size_t)-1 == SCNG(input_filter)(&SCNG(script_filtered), &SCNG(script_filtered_size), SCNG(script_org), SCNG(script_org_size))) {
    ​                zend_error_noreturn(E_COMPILE_ERROR, "Could not convert the script from the detected "
    ​                        "encoding \"%s\" to a compatible encoding", zend_multibyte_get_encoding_name(LANG_SCNG(script_encoding)));
    ​            }
    ​            buf = (char*)SCNG(script_filtered);
    ​            size = SCNG(script_filtered_size);
    ​        }
    ​    }
    ​    SCNG(yy_start) = (unsigned char *)buf;
    ​    yy_scan_buffer(buf, size);
    } else {
    ​    zend_error_noreturn(E_COMPILE_ERROR, "zend_stream_mmap() failed");
    }
    if (CG(skip_shebang)) {
        BEGIN(SHEBANG);
    } else {
        BEGIN(INITIAL);
    }
    if (file_handle->opened_path) {
        compiled_filename = zend_string_copy(file_handle->opened_path);
    } else {
        compiled_filename = zend_string_copy(file_handle->filename);
    }
    zend_set_compiled_filename(compiled_filename);
    zend_string_release_ex(compiled_filename, 0);
    RESET_DOC_COMMENT();
    CG(zend_lineno) = 1;
    CG(increment_lineno) = 0;
    return SUCCESS;
    }
首先初始化SCNG的内容然后调用BEGIN，BEGIN在最开始定义为#define BEGIN(state)
YYSETCONDITION(STATE(state))
YYSETCONDITION的定义是#define YYSETCONDITION(s) SCNG(yy_state) = s
也就是设置state = s
随后执行
zend_set_compiled_filename(compiled_filename);
zend_set_compiled_filename的定义是
    ZEND_API zend_string *zend_set_compiled_filename(zend_string *new_compiled_filename)
    {
        CG(compiled_filename) = zend_string_copy(new_compiled_filename);