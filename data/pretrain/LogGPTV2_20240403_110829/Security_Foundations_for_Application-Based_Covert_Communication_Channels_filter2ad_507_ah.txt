changes made by Embedwire in order to provide Sink with
inputs that won’t trigger a distinguishable response.
To capture this intuition more precisely, we’d like to iso-
late the distinguishing advantage that is derived from changes
in the behavior of Sink alone. In Figure 4, we present the
sink-gap (sg) oracle, which behaves exactly as the cc oracle
with one slight modification: instead of providing Sink with
the output of Extractwire, we pass it the original output of
Source.
Definition 12 (Sink indistinguishability). Fix App, User, ξ, Π
as in Definition 11, then let SG be the game instantiated by
App,User,Π,ξ. For a fixed adversary A, define the sink-gap
Expsg
advantage as
Advsg
App,User,Π,ξ(A) = ∆(CC, SG).
We say that ABCC Π is (t, q, µ, ϵ)-sink-indistinguishable
relative to App, User, ξ if, for all A ∈ A(t, q, µ), the sink-gap
♢
advantage is bounded from above by ϵ.
For user-only ABCCs, the sink-gap experiment is equiva-
lent to the cc experiment. For wire-only ABCCs, however, the
sink-gap cleanly captures a hybrid split between the cc and
oc experiments: the wc component of each query response is
identical to the oc oracle output, while the ws component is
identical to the cc oracle output. Observing that
∆(CC, OC) = ∆(CC, SG) + ∆(SG, OC),
(4)
we informally refer to ∆(SG, OC) as the wire advantage. Put
simply, a wire-only ABCC achieves sink-indistinguishability
when it can ensure that the behavior of Sink does not mea-
surably change as a result of the embedding and extraction
of covert messages. To see how this notion is targeted in the
design of concrete ABCCs, we consider two examples.
Example. Consider Protozoa. Its Embedwire discards the entire
media content of each video frame, keeping only the frame
header which indicates the type of frame (key or delta) and
video resolution. Covert message bits are written in place
of the media content, filling the same amount of space as
the original frame. Extractwire then recovers the covert mes-
sage, and restores the frame with properly formatted dummy
video content from a local source. Then, to achieve sink-
indistinguishability, Protozoa would have to demonstrate that
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:38 UTC from IEEE Xplore.  Restrictions apply. 
1980
user
Oracle Ocs( )
x ←← Userγ (NEXT)
x ←← Π.EmbedMsgBuf(PULL,·)
wc ←← App.Sourceγ (x, ws)
wc ←← Π.EmbedMsgBuf(PULL,·)
(w′
(ws, ) ←← App.Sinkγ (w′
c)
return ($(wc), $(ws))
wire
c, ) ←← Π.Extractwire(K, γ, h, wc)
(K, γ, h, wc)
(K, γ, h, x)
Oracle Oos( )
x ←← Userγ (NEXT)
wc ←← App.Sourceγ (x, ws)
(ws, ) ←← App.Sinkγ (wc)
return ($(wc), $(ws))
Oracle Osg( )
x ←← Userγ (NEXT)
x ←← Π.EmbedMsgBuf(PULL,·)
wc ←← App.Sourceγ (x, ws)
(ws, ) ←← App.Sinkγ (wc)
wc ←← Π.EmbedMsgBuf(PULL,·)
return (wc, ws)
wire
user
(K, γ, h, x)
(K, γ, h, wc)
Fig. 4: Hybrid oracles used in the decomposition of pcc advantage: “covert shape” (cs), “overt shape” (os), and “sink gap” (sg). Recall from
Figure 3 that each oracle defines an associated experiment (Expcs
App,User,Π,ξ, respectively) when placed in
the generic experiment Expxx
App,User,Π,ξ, Expsg
App,User,Π,ξ, Expos
App,User,Π,ξ.
the observable behavior of Sink (i.e.
the streaming video
application) is essentially independent of the actual video
stream, so long as the content of each frame is consistent
with its header description.
♯
Example. Consider Balboa. By only embedding covert mes-
sages into traffic that appears in a shared table of replaceable
traffic, Embedwire ensures that Extractwire will recover the
exact message that was originally output by Source. Balboa
clearly achieves sink-indistinguishability; in fact Balboa is
perfectly sink-indistinguishable for any class of adversary,
including those with unbounded resources.
♯
Both Protozoa and Balboa leverage a secure channel
established by the underlying application, which allows us to
derive a bound for the wire advantage term. We also note that
both Protozoa and Balboa are careful to ensure that the exact
shape of the traffic from Source is preserved. This leads us
to define the shape preservation property, which turns out to
be required for a direct reduction from the wire advantage
(∆(SG, OC)) to the security of the underlying transport.
Definition 13 (Shape preservation). Let Π be an App-based
covert channel. We say Π is shape-preserving if for any state
of the message buffer oracle MsgBuf, for any valid K, γ, h,
x, and ws, and for all outputs x′ ←← EmbedPULL
user (K, γ, h, x),
wc ←← Sourceγ(x′, ws), and w′
c ←← EmbedPULL
wire (K, γ, h, wc),
the following conditions hold:
(i) #(wc) = #(w′
(ii) |wc[i]| = |w′
♢
In §VII-C we will use this property, along with the
approach implied by Equation 4, to prove security bounds
for generic “Balboa/Protozoa-like” ABCCs utilizing secure
channels.
c[i]| for all 1 ≤ i ≤ #(wc).
c), and
C. Plaintext ABCCs
We now consider these technical notions in the context of
a “plaintext” application, i.e., one that does not generically use
a secure channel as message transport. In the wire-only case,
our previous approach is still reasonable for establishing the
security of specific instantiations. Namely, consider the distin-
guishability of Sink-bound network messages (from Source vs.
Embedwire) and the Sink-responses, separately, then combine
those results. Bounds for these distinguishing probabilities
may be linked to cryptographic assumptions, associated to the
primitives used to instantiate the ABCC algorithms; or by non-
cryptographic assumptions, supported by empirical testing and
observation of the target deployment environment. We can see
this pattern in the security analysis of Rook, which starts each
session by observing traffic to build up a shared dictionary
of “safe” values which are frequently encountered within
particular fields in the application messages. These values are
then used to encode covert bits, with the dual assumptions
that (i) these values will continue to appear frequently in overt
traffic, and (ii) the server will not respond in an unusual way
as long as the values are valid.
App,User,Π,ξ and Expos
On the other hand, our approach for analyzing non-
trivial user-side schemes is probably only suitable in the
secure-channel setting. In particular, the hybrid experiments
Expcs
App,User,Π,ξ defined in Figure 4 were
tailored to work with the IND-CPFA security notion. One can
still separate out the user advantage from the pcc advantage in
such a setting, as in Equation 1, but any further decomposition
will need to be guided by the details of the ABCC construction
itself. In light of this, it is worth noting that nearly all user-
only schemes have been designed around applications which
use secure transport.
VII. SECURITY OF GENERIC CONSTRUCTIONS
In this section we use the tools just described to prove
theorems regarding necessary preconditions on ABCCs in
order for them to be secure according to Definition 9. That
is, we identify the particular properties required for a scheme
in a particular paradigm to be secure.
A. Generic secure-transport ABCCs
Given any application channel App and a stream-based
channel SC, let App[SC] denote the application channel con-
structed according to Figure 5, top. Source runs the underlying
application, then passes its output to the stream-based channel
sender, always setting the flush flag to 1 on the last string
in the sequence. Sink first passes its input to the stream-
based channel receiver, then passes the resulting sequence to
the underlying application and returns its output. Note that
Init leaks the application context generated by the underlying
application, such that the initial state of SC is the only secret
shared by Source and Sink.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:38 UTC from IEEE Xplore.  Restrictions apply. 
1981
Init(ξ)
(ˆγ, ) ←← App.Init(ξ)
r) ←← SC.Init()
(st0
γ ← (ˆγ, st0
s, st0