an input validation needs to involve comparisons (for
3
 1 public void onClick(DialogInterface arg7, int arg8) { 2     String v2 = ""; 3     View v0 = this.a; 4     int v3 = 0; 5     while(v3 < ((ViewGroup)v0).getChildCount()) { 6         View v1 = ((ViewGroup)v0).getChildAt(v3); 7         if(v1 != null && v1.getId() == 2131624072) 8             v2 = ((EditText)v1).getText().toString(); 9         ++v3;10     }11     if(v2.equals(this.b) | v2.equals("b***1")) {12         ... // viewing files13     } else {14         Toast.makeText(this,"Incorrect password", 1).show();15     }                                                 16 } 1 public boolean onKey(View arg4, int arg5, KeyEvent arg6) { 2     this.d = this.findViewById(2131296464); 3     int v0 = 66;  4     ... 5     if(arg5 == v0 && arg4 == this.d && arg6.getAction() == 0){ 6         if((this.d.getText().toString().equals("q***d"))                  && this.a != null) { 7             this.a.setVisibility(8); // hide advertisements 8             return 0; 9         }   10         // normal translation actions    11         return 1;  12     ...    13 }     1 private void validate_nickname(String arg3, Dialog arg4) { 2     if(!TextUtils.isEmpty(((CharSequence)arg3))) { 3         String v0 = this.a.getText().toString(); 4         if(StringUtil.isInterceptedNickName(this.e, v0)) { 5             String v1 = "Nickname contains illegal   6                          characters!"; 7             ann.a(this.e).a(v4, v1); 8         } else ... 9 public static boolean isInterceptedNickName10                              (Context arg5, String arg6) {11     boolean v0 = false;12     String v0_0 = "intercepted_word";13     String v1 = StringUtil.readAssetsTxt(arg5, v0_0);14     if(!TextUtils.isEmpty(((CharSequence)v1))) {15         String[] v2 = v1.split("\\|");16         int v3 = v2.length;17         int v1_1 = 0;18         while(v1_1 < v3 && !v0) {19             if(TextUtils.equals(v2[v1_1], arg6)) {20                 v0 = true;21             } 22         }23     }24     return v0;25 }File Location: /assets/intercepted_word.txt      whitelist/blacklist, syntatics/semantics checks), an app
can contain many comparison instructions and these
comparisons can be implemented in completely different
ways across different apps (or even within the same
app). Moreover, some checks are not related to hidden
functionality (e.g., format checks). Therefore, it is a chal-
lenge to pinpoint secret-exposing validations from a large
number of comparison instructions, especially without
having false positives and compromising scalability.
• C2: How to resolve the compared content in val-
idations. After detecting the user input validations of
the next step is to resolve the content (e.g.,
interest,
censorship keywords) used in the validation. In some
cases, it may be trivial to resolve the content by directly
inspecting an instruction that compares with a literal
value. However, the content used in the validation could
come from a variety of sources, such as hardcoded values,
ﬁle inputs, or server responses, some of which cannot be
resolved via static analysis (e.g., server responses cannot
be retrieved without actually connecting to the server).
On the other hand, even when compared content can be
resolved from the code alone (e.g., hardcoded values), it
may be the result of a series of computations, e.g., string
concatenations, that cannot be resolved directly.
• C3: How to identify input-triggered secrets. Having
detected the user input validation and resolved the con-
tent used in the corresponding validations, we still need
to identify whether a validation exposes input-triggered
secrets. However, this is by no means trivial because
a validation between the same pair of user input and
content could lead to completely different conclusions.
For instance, an app may check whether the user provided
password is “123456”. If this occurs in user registration,
it could be just checking whether a user-provided pass-
word is a blacklisted weak password. However, if this
occurs at login, then it could be a backdoor. Therefore,
identifying these different cases is another challenge.
After analyzing mobile app code manually, we have ob-
tained the following insights to solve the above challenges.
• S1: Using taint analysis to pinpoint the input vali-
dation of interest. While an app can contain numerous
and different types of comparison, we notice user input
validation often starts from input, followed by string
conversions if necessary,5 and then performs the com-
parison with another object using standard APIs (e.g.,
equals as shown in the two motivating examples in
§II-C). Therefore, we can use static taint analysis to taint
the user input and monitor whether it propagates to system
APIs (i.e., the taint sinks) to detect user input validations
in mobile apps at scale.
• S2: Using backward slicing and string value analysis
to resolve the compared content in validation. With
taint analysis, we are able to identify the taint sinks, from
which we can identify the compared content. Note that
the secrets in this study are often in the form of strings. If
the compared string content is directly visible at the type
sink, we directly extract its value. Otherwise, we perform
5Note that we have not observed other types of data such as integer or
ﬂoating point. This is likely because backdoors or censorship blacklist secrets
are often stored as strings.
backward slicing to identify how the compared string is
generated. If it is from external remote input, our analysis
will produce no concrete value since we do not perform
real execution of the app (but we can output that the
type of the content is from remote input). Otherwise, if it
originates from internal input, e.g., a ﬁle, we then open the
ﬁle and follow the execution path identiﬁed by the back-
ward slicing to retrieve the string. If there are any string
operations (e.g., concatenation or substrings), we simulate
these operations to obtain the ﬁnal computed values.
• S3: Using the comparison contexts of validation
to identify input-triggered secrets. After
resolving
the compared content used in the validation, we have
to identify whether
this validation exposes a secret
of interest. Our key insight is to use the comparison
contexts of the validation extracted from the app code to
solve this problem. More speciﬁcally, we can construct
a comparison context of
input validation using two
orthogonal pieces of information: (i) the type of either
the user input (e.g., a password) or the compared content
(e.g., a hardcoded string) used in the validation, and (ii)
the code dispatch behavior associated with the result
of the validation. For example, as shown in Figure 1,
the type of content for validation is a hardcoded value
compared with a user input type password,6 and the
code dispatch has two actions: the true branch, which
overlaps with the comparison to this.b, and the false
branch, which rejects invalid passwords. Based on this
code execution context, we can conclude it is a master
password secret, since a hardcoded secret can cause the
same action as a legitimate password. We derive a number
of such execution context-based policies to identify other
type of input-triggered secrets, detailed in §IV-C.
B. INPUTSCOPE Overview
An overview of INPUTSCOPE is presented in Figure 4.
There are four key components: (i) Input Validation Detection
detects the existence of validation behavior with static taint
analysis; using the taint sinks, our (ii) Compared Content
Resolution performs backward slicing to identify the sources of
compared content and then uses the slice to compute the ﬁnal
String type value. Next, (iii) Comparison Context Recovery
takes the types of user input and compared content, and
recovers its code dispatch behavior such as one-to-two, many-
to-two, or many-to-many. Finally, using both the comparison
context and compared content, (iv) the Secret Uncovering
component uses each speciﬁc policy to ﬁnd secrets of interest
such as backdoors or censorship keywords.
C. Scope and Assumptions
In this paper we focus on input validation that can lead to
the identiﬁcation of backdoors or blacklist secrets; other types
of input validation, such as those that may lead to XSS or SQL
injection, have been covered extensively in prior work and are
out of scope of this paper. INPUTSCOPE analyzes mobile apps
for the Android platform and, in our prototype, we only focus
on input validation at the Java bytecode level, and exclude
input validation in native libraries.
6The UI widget of the user input for this particular case is password type.
4
Fig. 4: Overview of INPUTSCOPE.
In addition, we only focus on the user input that is provided
by users via keystrokes, namely EditText. Moreover, we
assume the user input ﬁeld is implemented using Android
UI widgets that allow app to read user input by invoking
system APIs (e.g., EditText.getText). Other input such
as network-input triggered behavior is out of scope as well.
Also, since the secrets of our interest are all concrete
values, we particularly focus on the taint sinks that use the
equals type of comparison. That is, we do not focus on
other comparisons (e.g., using regular expressions) for two
reasons: (i) scalability (we do not want to track too many
taint paths), and (ii) the nature of our problem (the secrets are
concrete string values that are entered from EditText from
the input perspective, or stored somewhere inside the app from
the compared target perspective).
INPUTSCOPE is resilient to many common types of obfus-
cation (such as variable/class renaming), but can miss some
cases where the app’s use of system APIs is obfuscated (e.g.,
through reﬂection), or where an app uses private APIs to
implement
its string operations and comparison. Although
we hope to cover such cases in future work, such heavily-
obfuscated apps are also out of scope for our current work.
IV. DETAILED DESIGN
In this section, we present the detailed design of each
component of INPUTSCOPE. Based on the execution order,
we ﬁrst describe how to detect user input validation of interest
in §IV-A, then describe our approach to resolve compared
content and recover comparison contexts in §IV-B and §IV-C,
respectively. Finally, we explain how to uncover backdoors
and blacklist secrets based on the information we collected
and policies we deﬁned in §IV-D.
A. Input Validation Detection
The key objective of INPUTSCOPE is to uncover hidden
behaviors from input validations at scale. Since there are a
variety of comparisons in app code, we use static taint analysis
to taint user input and monitor its propagation to identify
user input validations as discussed in §III-A. Today, there are
many open source implementations of static taint analysis,
e.g., FlowDroid [7], Amandroid [38], and DroidSafe [21].
We therefore leverage these open source implementations to
solve our input validation identiﬁcation problem instead of
developing from scratch.
Type
Class
API
Sources
Sinks
EditText
EditText
Editable
Object
String
String
String
String
String
getText()
getEditableText()
toString()
equals(Object)
equals(Object)
indexOf(String)
lastIndexOf(String)
equalsIgnoreCase(String)
contentEquals(StringBuffer)
StringBuffer
StringBuffer
indexOf(String)
lastIndexOf(String)
TextUtils
HashMap
Map
equals(CharSequence, CharSequence)
containsKey(java.lang.Object)
get(java.lang.Object)
TABLE I: The list of primary taint sources and sinks used in
the detection of user-input validation.
Since static taint analysis with mobile apps has been well
studied, we omit
its technical details for brevity here. In
the following, we only describe how we customize its taint
sources and taint sinks in our particular problem. These sources
and sinks have been derived by systematically examining all
Android framework APIs.
• Taint Sources. We only focus on user input that comes
from local user keystrokes. In Android,
this type of
user input is obtained by invoking a few speciﬁc system
APIs. There are three such APIs: EditText.getText,
EditText.getEditableText,
and Editable.
toString, as shown in Table I. Therefore, these system
APIs are our taint sources.
• Taint Sinks. As discussed in §III-C, we only focus on the
system APIs that are used for equivalence checks between
strings; this set of APIs is detailed in Table I. Note that,
in addition to the APIs that directly check the equivalence
(e.g., equals), we also include the APIs that can be used
for this type of checking indirectly (e.g., Map.get).
B. Compared Content Resolution
After the detection of user input validation of interest
in a mobile app, next we need to resolve the compared
content. Since the secrets in this study are often in the form
of concrete strings, the primary objective of our Compared
Content Resolution is to resolve the compared string values.
5
Input Validation DetectionCompared ContentUser InputCompared Content ResolutionComparison Context RecoverySecret UncoveringHardcoded ValueLocal StorageExternal Input1 - 2Access KeysM - 2BlacklistsM - MCommandsPoliciesReportsHowever, these values are not always directly visible at taint
sinks. Therefore, we ﬁrst perform a backward slicing on the
bytecode to identify how a the string is generated, and then
use string value analysis to obtain the ﬁnal computed values.
Static Backward Slicing. We use static backward slicing to
identify how a compared string is generated. Similar to static
taint analysis, static backward slicing is performed on the inter-
procedural data-ﬂow graph (IDFG), which is derived from the
inter-procedural control-ﬂow graph (ICFG), where the nodes
are instructions and the edges are control-ﬂow transfers, but in
the opposite direction (since it is backward). At a high level, it
starts from where a targeted variable is used and ends at where
it is generated. Since a compared string could come from a
variety of sources and its value can be generated in different
ways (e.g., from a local ﬁle, or a remote server response), we
have to resolve them accordingly.
In particular, if it comes from external input (either external
local input or external remote input), our backward slicing will
produce no concrete string value because the value of these
external inputs can only be obtained with real executions (e.g.,
by connecting to remote servers to fetch them). However, if it is
from internal input, which is statically carried within a mobile
app, either in its program code (i.e., hardcoded values) or its
resource ﬁles, we use the following policies to identify them.
• String values from program code. Since the values
from program code are typically hardcoded strings in our
focused problem, our backward slicing will stop at APIs
such as getString. Then we will perform string value
analysis (described below) along the data path from where
the compared string is generated to where it is used in our
taint sinks, to ﬁnally resolve the string values.
• String values from resource ﬁle. There are three types
of resource ﬁles that contain string values: ﬁles (e.g.,
text ﬁles, JSON ﬁles), databases (e.g., SQLite databases),
and key-value stores (e.g., sharedPereferences).
Because different
types of ﬁle store data in different
formats, we have to resolve their values accordingly. At
a high level, we ﬁrst resolve its name and ﬁle-speciﬁc
semantics, and then resolve the values of interest. For
example, in order to resolve a value from a key-value
data SharedPereference object, we need to resolve
the name of this ﬁle and the corresponding “key” to
eventually reach the generation of the string.
Meanwhile, to ease the effort for string value analysis in
the next step, during the backward slicing, we also maintain an
inter-procedural data-dependency graph (IDDG). This IDDG
is used to record the computation sequences of relevant string
values along the data-ﬂow paths. These sequences are impor-
tant to reproduce the ﬁnal string value of the compared content.
String Value Analysis. During the backward slicing, we have
obtained a set of targeted string values to resolve. Next, we use
a static string value analysis technique we developed earlier in
LeakScope [46] (which has been open sourced) to reproduce
these string values without actually running the program but
simulating the string related computations. In particular, with
the IDDG that is maintained during the backward slicing, we
forwardly calculate the string value of the target variable by
following its original execution order captured in IDDG. Dur-
ing this calculation, we simulate the same operation deﬁned
Sources
Class
API
e
g