tion might have been used. The other queried for a single
conﬁguration data block and some unusual SSL entries. They
mention three attempted attacks in their blog [4]: adversaries
tried to stop program execution, modify memory areas and
adjust the system clock. Overall it seems that the honeypot
of ICS Security Workspace allows greater interactivity than
the two we discussed before but still does not support inter-
action with simulated PLC programs. Based on this limited
information, we categorize their honeypot as low-interactive.
4. THE XPOT HONEYPOT
We actively develop a medium to high interactive honeypot
that simulates a Siemens SIMATIC S7 314C-2 PN/DP, our
reference model. It is also possible to simulate almost any
other S7-300/400 model, since all the models in this family are
rather similar. In what follows we summarize our adversarial
model and we highlight two distinctive properties that set
our honeypot XPOT apart from other related projects.
Model of the Adversary.
We target an adversary model that allows adversaries to
interact with the honeypot freely. In particular, we expect
that adversaries will attempt the following interactions in
order to quickly determine whether they are presented with
a low-interactive honeypot: (1) perform an Nmap scan, (2)
connect to the honeypot with Step7 software or the TIA
portal software, (3) read the complete conﬁguration and
state, (4) download and upload programs, (5) debug running
programs, (6) inspect and modify memory areas. Obviously,
an adversary will defeat our honeypot if he probes features
of a genuine PLC that XPOT does not support. XPOT will
be defeated as well if its supported features are measurably
diﬀerent from those of a genuine PLC. This yields two classes
of adversaries: those operating within the set of supported
features and those operating without.
TCP/IP Stack Manipulation.
In order to avoid identiﬁcation by OS ﬁngerprinting soft-
ware, we process all incoming and outgoing TCP/IP connec-
tions so that they appear equal to our reference model. The
manipulations we make involve adjustments to TCP sequence
numbers, ACK numbers, and TCP options, to name a few
examples. We achieve a ﬁngerprint for XPOT that is nearly
identical to that of our reference model. For example, Nmap
will report the same OS for XPOT and our reference model.
Our implementation builds on nfqueue, a project that redi-
rects network packets that traverse the kernel packet ﬁlter
into a queue that is processed by a userspace application.
Programmability.
In order to achieve high interactivity according to our clas-
siﬁcation, we support the execution of PLC programs that an
adversary may load onto XPOT using, for example, Siemens’
TIA portal. PLC programs consist of blocks of bytecode
encoded in the proprietary MC7 format. MC7 resembles
an assembler language with an instruction set comparable
to Instruction List (IL) as standardized in IEC 61131-3 [5].
MC7 consists of 1900 opcodes, which yield 146 diﬀerent in-
structions of which we currently support more than 100. A
Siemens PLC can execute MC7 instructions fairly fast, which
makes it attractive to compile bytecodes to native code. The
downside is that compiling the bytecode takes a few seconds
up to minutes, depending on the underlying platform and the
size of the compiled program. A real PLC starts to execute
new programs immediately and therefore adversaries could
easily tell XPOT apart from a genuine PLC. In order to
avoid this, we interpret the bytecode until its compilation
has ﬁnished. Towards this end we leverage LLVM’s capa-
bilities. Interpretation and compilation build on the same
LLVM Intermediate Representation (IR) implementation of
MC7 semantics, which avoids the duplication of eﬀorts. The
IR representation lends itself to potential future uses such
as code analysis and model checking.
5. EVALUATION
Pilot Experiments.
We regularly oﬀer a hands-on course on PLC programing
and hacking at our university and we conducted a pilot study
with students who completed our course. The course typi-
cally lasts three weeks of which one week focuses on PLC
programming skills using our reference PLCs. At the end
of our most recent course (10 participants), we asked six
randomly picked participants to distinguish a genuine PLC
from XPOT. Our objective was to explore how one might
study the resistance of PLC honeypots against adversaries
with diverse skill sets. For this reason, we separated the
experiment into diﬀerent stages. We gave participants two
IPs (one for the honey pot and one for the reference PLC)
but participants did not know which was which. We started
with simple tasks and restricted the sets of PLC features we
asked students to explore. In subsequent stages, we gradu-
ally extended the features and the freedom given to students.
As might be expected, they were not successful in earlier
stages but became increasingly successful in later stages. All
students succeeded in the last stage when we removed all
limitations to the tools and features they could use. The dif-
ferences participants found ranged from non-working exploits
to missing features and diﬀerent PLC diagnostic output. Not
all diﬀerences led to a correct identiﬁcation of the honeypot,
participants were sometimes unsure what constituted correct
behavior. The results we obtained were consistent with a
comparable pilot study we had conducted in the year before.
The outcomes indicate that it is diﬃcult to fool adversaries
who have an understanding of PLC programming and who
suspect that they encountered a high-interactive honeypot.
Highly interactive honeypots must therefore support a fairly
complete set of the features of a genuine PLC in order to
remain convincing for extended periods of time.
Cursory Internet Exposure.
We made XPOT publicly available on the Internet for
one month using a dynamic consumer DSL link, that is,
a connection not associated with our university.
In this
experiment, our motivation was curiosity rather than the
intent to conduct a formal study. We observed several full
S7comm handshakes and queries for typical identiﬁcation
entries. Beyond that we did not observe suspicious activity.
These results are similar to those of CryPLH [1].
6. CONCLUSION
If Internet-facing PLCs of the Siemens variety are attacked
then it appears that adversaries are selective in their choices
of targets. This is only to be expected given the stakes at
hand. The barrier of entry for careless amateurs is high, on
the other hand, because PLC programming is a comparably
obscure topic. Any attempts that go beyond simple applica-
tions of the tools that can be found on the Internet require
considerable eﬀort and bear the risk of serious investigations.
Perhaps for these reasons we have not registered attacks by
amateurs either.
XPOT is still an early prototype even though it provides
signiﬁcantly enhanced interactivity and indistinguishability
compared to related eﬀorts. Despite our ongoing eﬀort,
there still remain numerous features and opportunities for
adversaries to distinguish XPOT from a genuine Siemens
PLC. However, doing so requires some degree of determined
probing for uncommon features or knowledge of a particular
feature that XPOT does not yet support, which we consider
a step forward towards our goal.
Of course, the accurate simulation of a PLC is only one
aspect of a convincing honeypot. Determined adversaries
may scrutinize the process that the PLC appears to control,
perhaps even to the point that they disturb the process
slightly in order to measure whether or not sensors register
the eﬀect. In order to make this more diﬃcult for adversaries,
we are in the process of attaching XPOT to simulations of
industrial processes.
7. REFERENCES
[1] D. I. Buza, F. Juh´asz, G. Miru, M. F´elegyh´azi, and
T. Holczer. CryPLH: Protecting Smart Energy Systems
from Targeted Attacks with a PLC Honeypot. In Smart
Grid Security - Second International Workshop, 2014.
[2] Z. Durumeric, D. Adrian, A. Mirian, M. Bailey, and
J. A. Halderman. A Search Engine Backed by
Internet-Wide Scanning. In Proc. of the 22nd ACM
CCS, Oct. 2015.
[3] ICS Security Workspace. ICS/SCADA Honeypot Log.
http://plcscan.org/blog/dataanalysis/icsscada-
honeypot-log/.
[4] ICS Security Workspace. Security Analysis from
Siemens S7 PLC CPU Buﬀer [chinese].
http://plcscan.org/blog/2016/03/security-analysis-
from-siemens-s7-plc-cpubuﬀer/.
[5] IEC. IEC 61131-3 International Standard,
Programmable controllers. Part 3: Programming
Languages. 2003.
[6] M. H. L´opez and C. F. L. Res´endez. Honeypots: Basic
Concepts, Classiﬁcation and Educational Use as
Resources in Information Security Education and
Courses. In Proc. of the Informing Science and IT
Education Conference, 2008.
[7] J. Matherly. Shodan. https://www.shodan.io/.
[8] I. Mokube and M. Adams. Honeypots: Concepts,
Approaches, and Challenges. In Proc. of the 45th
annual southeast regional conference, 2007.
[9] D. Nardella. Snap7. http://snap7.sourceforge.net/.
[10] L. Rist et al. Conpot. http://conpot.org/.
[11] C. Seifert, I. Welch, and P. Komisarczuk. Taxonomy of
Honeypots, 2006.