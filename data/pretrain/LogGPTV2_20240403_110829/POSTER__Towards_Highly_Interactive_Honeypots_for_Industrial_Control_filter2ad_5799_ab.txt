### 4. THE XPOT HONEYPOT

We are actively developing a medium to high-interactive honeypot that simulates a Siemens SIMATIC S7 314C-2 PN/DP, our reference model. This honeypot can also simulate almost any other S7-300/400 model, as all models in this family share similar characteristics. In the following sections, we summarize our adversarial model and highlight two distinctive properties that set our honeypot, XPOT, apart from other related projects.

#### Model of the Adversary

Our adversary model allows adversaries to interact freely with the honeypot. We anticipate that adversaries will attempt the following interactions to quickly determine whether they are interacting with a low-interactive honeypot:
1. Perform an Nmap scan.
2. Connect to the honeypot using Step7 software or the TIA portal software.
3. Read the complete configuration and state.
4. Download and upload programs.
5. Debug running programs.
6. Inspect and modify memory areas.

If an adversary probes features of a genuine PLC that XPOT does not support, or if the supported features differ measurably from those of a genuine PLC, our honeypot will be defeated. This leads to two classes of adversaries: those operating within the set of supported features and those operating outside it.

#### TCP/IP Stack Manipulation

To avoid identification by OS fingerprinting software, we process all incoming and outgoing TCP/IP connections to make them appear identical to our reference model. The manipulations include adjustments to TCP sequence numbers, ACK numbers, and TCP options. This results in a fingerprint for XPOT that is nearly identical to that of our reference model. For example, Nmap will report the same OS for both XPOT and the reference model.

Our implementation uses `nfqueue`, a project that redirects network packets traversing the kernel packet filter into a queue processed by a userspace application.

#### Programmability

To achieve high interactivity, we support the execution of PLC programs that adversaries may load onto XPOT using, for example, Siemens' TIA portal. PLC programs consist of blocks of bytecode encoded in the proprietary MC7 format, which resembles an assembler language with an instruction set comparable to Instruction List (IL) as standardized in IEC 61131-3. MC7 consists of 1900 opcodes, yielding 146 different instructions, of which we currently support more than 100.

A Siemens PLC can execute MC7 instructions quickly, making it attractive to compile bytecodes to native code. However, compilation can take a few seconds to several minutes, depending on the platform and the size of the program. A real PLC starts executing new programs immediately, so to avoid detection, we interpret the bytecode until its compilation is complete. We leverage LLVM's capabilities for this, using the same LLVM Intermediate Representation (IR) for both interpretation and compilation, which avoids duplication of efforts. The IR representation also lends itself to potential future uses such as code analysis and model checking.

### 5. EVALUATION

#### Pilot Experiments

We regularly offer a hands-on course on PLC programming and hacking at our university and conducted a pilot study with students who completed the course. The course typically lasts three weeks, with one week focused on PLC programming skills using our reference PLCs. At the end of our most recent course (10 participants), we asked six randomly selected participants to distinguish a genuine PLC from XPOT. Our objective was to explore how one might study the resistance of PLC honeypots against adversaries with diverse skill sets.

The experiment was divided into different stages, starting with simple tasks and gradually increasing the complexity and freedom given to students. As expected, students were not successful in earlier stages but became increasingly successful in later stages. All students succeeded in the final stage when all limitations on tools and features were removed. The differences they found ranged from non-working exploits to missing features and different PLC diagnostic output. Not all differences led to correct identification, as some participants were unsure about what constituted correct behavior. The results were consistent with a comparable pilot study conducted the previous year, indicating that it is difficult to fool adversaries who have a good understanding of PLC programming and suspect they are dealing with a high-interactive honeypot.

#### Cursory Internet Exposure

We made XPOT publicly available on the Internet for one month using a dynamic consumer DSL link, not associated with our university. Our motivation was curiosity rather than a formal study. We observed several full S7comm handshakes and queries for typical identification entries but did not observe any suspicious activity. These results are similar to those of CryPLH [1].

### 6. CONCLUSION

If Internet-facing PLCs of the Siemens variety are attacked, it appears that adversaries are selective in their choice of targets. This is expected given the high stakes involved. The barrier to entry for careless amateurs is high because PLC programming is a relatively obscure topic. Any attempts beyond simple applications of readily available tools require considerable effort and risk serious investigations. For these reasons, we have not registered attacks by amateurs.

XPOT is still an early prototype, even though it provides significantly enhanced interactivity and indistinguishability compared to related efforts. Despite our ongoing efforts, there are still numerous features and opportunities for adversaries to distinguish XPOT from a genuine Siemens PLC. However, doing so requires determined probing for uncommon features or knowledge of specific unsupported features, which we consider a step forward towards our goal.

Accurate simulation of a PLC is just one aspect of a convincing honeypot. Determined adversaries may scrutinize the process that the PLC appears to control, possibly even disturbing the process slightly to measure sensor responses. To make this more difficult, we are in the process of attaching XPOT to simulations of industrial processes.

### 7. REFERENCES

[1] D. I. Buza, F. Juh´asz, G. Miru, M. F´elegyh´azi, and T. Holczer. CryPLH: Protecting Smart Energy Systems from Targeted Attacks with a PLC Honeypot. In Smart Grid Security - Second International Workshop, 2014.

[2] Z. Durumeric, D. Adrian, A. Mirian, M. Bailey, and J. A. Halderman. A Search Engine Backed by Internet-Wide Scanning. In Proc. of the 22nd ACM CCS, Oct. 2015.

[3] ICS Security Workspace. ICS/SCADA Honeypot Log. http://plcscan.org/blog/dataanalysis/icsscada-honeypot-log/.

[4] ICS Security Workspace. Security Analysis from Siemens S7 PLC CPU Buffer [Chinese]. http://plcscan.org/blog/2016/03/security-analysis-from-siemens-s7-plc-cpubuffer/.

[5] IEC. IEC 61131-3 International Standard, Programmable controllers. Part 3: Programming Languages. 2003.

[6] M. H. L´opez and C. F. L. Res´endez. Honeypots: Basic Concepts, Classification and Educational Use as Resources in Information Security Education and Courses. In Proc. of the Informing Science and IT Education Conference, 2008.

[7] J. Matherly. Shodan. https://www.shodan.io/.

[8] I. Mokube and M. Adams. Honeypots: Concepts, Approaches, and Challenges. In Proc. of the 45th annual southeast regional conference, 2007.

[9] D. Nardella. Snap7. http://snap7.sourceforge.net/.

[10] L. Rist et al. Conpot. http://conpot.org/.

[11] C. Seifert, I. Welch, and P. Komisarczuk. Taxonomy of Honeypots, 2006.