# 运算符
---
- https://www.kancloud.cn/imxieke/ruby-base/107296
---
Ruby 的运算符能通过定义方法的方式来改变其原有的含义。
# 赋值运算符
正如我们之前所介绍的那样，Ruby 的变量是在首次赋值的时候创建的。之后，程序可能会对变量引用的对象做各种各样的处理，甚至再次给变量赋值。例如，对 a 变量加 1，对 b 变量乘 2，如下所示：
```ruby
a = a + 1
b = b * 2
```
上面的表达式可被改写为以下形式：
```ruby
a += 1
b *= 2
```
大部分的二元运算符 op 都可以做如下转换。
```ruby
var op= val
↓
var = var op val
```
将二元运算符与赋值组合起来的运算符称为赋值运算符。
- `&&=`
- `||=`
- `^=`
- `&=`
- `|=`
- `<>`
- `>>=`
- `+=`
- `-=`
- `\*=`
- `/=`
- `%=`
- `\*\*=`
除了变量之外，赋值运算符也同样适用于经由方法的对象操作。下面两个表达式是等效的。
```ruby
$stdin.lineno += 1
$stdin.lineno = $stdin.lineno + 1
```
请读者注意，上面的式子调用的是 `$stdin.lineno` 和 `$stdin.lineno=` 这两个方法。也就是说，使用赋值运算符的对象必须同时实现 reader 以及 writer 存取方法。
# 逻辑运算符的应用
在介绍逻辑运算符的应用例子之前，我们需要先来了解一下逻辑运算符的以下一些特征。
- 表达式的执行顺序是从左到右
- 如果逻辑表达式的真假已经可以确定，则不会再判断剩余的表达式
- 最后一个表达式的值为整体逻辑表达式的值
```ruby
条件 1``|| 条件 2
```
上面的表达式一定会按照条件 1、条件 2 的顺序来判断表达式的值。条件 1 的判断结果为真时，不需要判断条件 2 的结果也可以知道整体表达式的结果为真。反过来说，只有当条件 1 的判断结果为假时，才需要判断条件 2。也就是说，Ruby 的逻辑运算符会避免做无谓的判断。下面我们来进一步扩展该逻辑表达式：
```ruby
条件 1``|| 条件 2``|| 条件 3
```
这种情况下，只有当条件 1 和条件 2 两者都为假的时候，才会进行条件 3 的判断。这里的条件表达式指的是 Ruby 中所有的表达式。
```
var || "Ruby"
```
在上面的表达式中，首先会判断 `var` 的真假值，只有当 `var` 为 `nil` 或者 `false` 时，才会判断后面的字符串 `"Ruby"` 的真假值。之前我们也提到过，逻辑表达式的返回值为最后一个表达式的返回值，因此这个表达式的返回值为：
- `var` 引用对象时，`var` 的值
- `var` 为 `nil` 或者 `false` 时，字符串 `"Ruby"`
接下来，我们再来讨论一下 `&&`。基本规则与 `||` 是一样的。
```ruby
条件 1``&& 条件 2
```
与 `||` 刚好相反，只有当条件 1 的判断结果为真时，才会判断条件 2。
下面是逻辑运算符的应用例子。假设希望给变量 `name` 赋值，一般我们会这么做：
```ruby
name = "Ruby"    # 设定 name 的默认值
if var           # var 不是 nil 或者 false 时
  name = var     # 将 var 赋值给 name
end
```
使用 || 可以将这 4 行代码浓缩为一行代码。
```ruby
name = var || "Ruby"
```
下面我们稍微修改一下程序，假设要将数组的首元素赋值给变量。
```ruby
item = nil       # 设定 item 的初始值
if ary           # ary 不是 nil 或者 false 时
  item = ary[0]  # 将 ary[0] 赋值给 item
end
```
如果 `ary` 为 `nil`，则读取 `ary[0]` 时就会产生程序错误。在这个例子中，预先将 `item` 的值设定为了 `nil`，然后在确认 `ary` 不是 `nil` 后将 `ary[0]` 的值赋值给了 `item`。像这样的程序，通过使用 `&&`，只要像下面那样一行代码就可以搞定了：
```ruby
item = ary && ary[0]
```
在确定对象存在后再调用方法的时候，使用 `&&` 会使程序的编写更有效率。从数学的角度上来看，下面的逻辑表达式表达的是一样的意思，但是从编程语言的角度来看却并不是一样的。
```ruby
item = ary[0] && ary    # 错误的写法
```
最后，我们来看看 `||` 的赋值运算符。
```ruby
var ||= 1
```
和
```ruby
var = var || 1
```
的运行结果是一样的。只有在 `var` 为 `nil` 或者 `false` 的时候，才把 1 赋值给它。这是给变量定义默认值的常用写法。
# 条件运算符
条件运算符 `?:` 的用法如下：
```ruby
条件 ? 表达式 1 : 表达式 2
```
上面的表达式与下面使用 `if` 语句的表达式是等价的：
```ruby
if 条件
 表达式 1
else
 表达式 2
end
```
例如，对比 `a` 与 `b` 的值，希望将比较大的值赋值给 `v` 时，程序可以像下面这样写：
```ruby
a = 1
b = 2
v = (a > b) ? a : b
p v    #=> 2
```
如果表达式过于复杂就会使程序变得难懂，因此建议不要滥用此写法。条件运算符也称为三元运算符。
# 范围运算符
在 Ruby 中有表示数值范围的范围（range）对象。例如，我们可以像下面那样生成表示 1 到 10 的范围对象。
```ruby
Range.new(1, 10)
```
用范围运算符可以简化范围对象的定义。以下写法与上面例子的定义是等价的：
```ruby
1..10
```
范围运算符有 `..` 和 `...` 两种。`x..y` 和 `x...y` 的区别在于，前者的范围是从 x 到 y；而后者的范围则是从x 到 y 的前一个元素。
对 `Range` 对象使用 `to_a` 方法，就会返回范围中从开始到结束的值。下面就让我们使用这个方法来确认一下 `..` 和 `...` 有什么不同。
```ruby
p (5..10).to_a    #=> [5, 6, 7, 8, 9, 10]
p (5...10).to_a   #=> [5, 6, 7, 8, 9]
```
如果数值以外的对象也实现了根据当前值生成下一个值的方法，那么通过指定范围的起点与终点就可以生成 `Range` 对象。例如，我们可以用字符串对象生成 `Range` 对象。
```ruby