A = 4. Our prototype uses a verbose XML-like message
format, so we expect that storage space requirements could
be reduced signiﬁcantly.25
Chaff. We refer to votes containing invalid and duplicate
credentials as chaff because they are eliminated during tab-
ulation. Because chaff increases the number of votes in a
block, it increases tabulation time similarly to increasing
anonymity parameter K. Figure 2(d) shows how tabulation
25Note that voters do not need to download the entire bulletin board to
verify inclusion of their votes. Rather, a voter would need to download only
the list of votes (about 160 kB) used as input to the tabulation protocol, then
check that his vote is in this list.
time varies as a function of the percentage of chaff votes in
each block. With fraction c chaff (split between invalid and
duplicate credentials), there are M = V
1−c votes in a block.
All the other graphs in this study assume c = 0.
Cost. A government election in a stable Western democ-
racy currently costs $1 to $3 per voter [38]. Civitas would
increase the cost of computing equipment but could reduce
the costs associated with polling places and paper ballots. A
dual-core version of our experiment machines is currently
available for about $1,500, so the machine cost to tabulate
votes from 500 voters in ﬁve hours (with K = 100 and
A = 4) is at worst $12 per voter, and this cost could be
amortized across multiple elections. Moving to multicore
CPUs would also be likely to reduce tabulation time, since
tabulation is CPU-bound (utilization is about 70–85% dur-
ing our experiments), has a small memory footprint, and can
be split into parallel threads that interact infrequently. Costs
could be reduced dramatically if trust requirements permit
a tabulation teller to lease compute time from a provider.26
One provider currently offers a rate of $1 per CPU per hour
on processors similar in performance to our experiment ma-
26Essentially, this means trusting the provider with the teller’s El Gamal
private key share for that election so the provider can compute decryption
shares. To avoid giving the provider the key share, computation might be
split between the provider and teller, with the teller computing only these
decryption shares. This would result in the teller performing only about
10% of the total number of modular exponentiations.
364
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:14:20 UTC from IEEE Xplore.  Restrictions apply. 
01002003004005006007008009001000012345678910VWall clock (hr.)1234567800.511.522.53AWall clock (hr.)050100150200250300012345678910KWall clock (hr.)01020304050607011.522.533.544.55% ChaffWall clock (hr.)chines [71]. At this rate, tabulation for 500 voters would cost
about 4¢ per voter—clearly in the realm of practicality.
Reducing security parameters also reduces cost. For ex-
ample, halving K approximately quarters tabulation time.
So for a ten-hour, K = 50, A = 3 election, the cost per voter
would be about ten times smaller than a ﬁve-hour, K = 100,
A = 4 election. El Gamal key lengths also have a signiﬁ-
cant impact. Figure 2(c) shows that, for 224-bit keys from a
2048-bit group, K can be as high as 200 while maintaining a
tabulation time of under ﬁve hours. With 160-bit keys from
a 1024-bit group (secure, according to NIST, from 2007–
2010 [3]), K can be increased to 400. Using 256-bit keys
from a 3072-bit group (secure until after 2030) currently re-
quires decreasing K to 125.
Real-world estimates.
In the 2004 general election for
President of the United States, just under 2.3 million votes
were reported by the City of New York Board of Elec-
tions [17]. Using the worst-case estimate we developed
above, $12 per voter, the one-time hardware cost for us-
ing Civitas to tabulate this election would be at most $27.6
million.
In comparison, Diebold submitted an estimate
in 2006 of $28.7 million in one-time costs to replace the
city’s mechanical lever voting machines with optical scan
machines [23]; hardware and software costs accounted for
$10.2 million of this estimate [24]. Although we cannot
make any strong comparisons, the cost of Civitas does seem
to be about the same order of magnitude.
9. Related Work
Voting schemes. Cryptographic voting schemes can be di-
vided into three categories, based on the technique used to
anonymize votes: homomorphic encryption [6, 20, 37, 65],
blind signatures [31,58,59], and mix networks [4,11,52,66].
JCJ and Civitas are both based on mix networks.
To optimize JCJ, Smith [70] proposes replacing PETs
with reencryption into a deterministic, distributed cryptosys-
tem. However, the proposed construction is insecure. The
proposed encryption function is Enc(m; z) = mz, where
z is a secret key distributed among the tellers. But to test
whether s is a real private credential, the adversary can in-
ject a vote using s2 as the private credential. After the pro-
posed encryption function is applied during invalid creden-
tial elimination, the adversary can test whether any submit-
ted credential is the square of any authorized credential. If
so, then s is real with high probability. Ara´ujo et al. [1] are
studying another possible replacement for PETs, based on
group signatures.
Civitas differs from JCJ in the following ways:
• JCJ assumes a single trusted registration authority; Civ-
itas factors this into a registrar and a set of mutually
distrusting registration tellers. As part of this, Civitas
introduces a construction of credential shares.
• JCJ does not specify a means of distributing creden-
tials; Civitas introduces a protocol for this and proves
its security.
• JCJ has voters post votes to the bulletin board; Civitas
introduces ballot boxes for vote storage.
• JCJ supports plurality voting; Civitas generalizes this
to include approval and ranked voting methods.
• JCJ left many of the cryptographic components de-
scribed in Section 5 unspeciﬁed (though JCJ also pro-
vided helpful suggestions for possible implementa-
tions); Civitas provides concrete instantiations of all the
cryptographic components in the voting scheme.
• JCJ, as a voting scheme, did not study the scalability
of tabulation or conduct experiments; Civitas, as both
a scheme and a system, introduces blocking, studies its
scalability, and reports experimental results.
Voting systems. To our knowledge, Civitas offers stronger
coercion resistance than other implemented voting systems.
Sensus [21], based on a blind signature scheme known as
FOO92 [31], offers no defense against coercion. Neither
does EVOX [36], also based on FOO92. Both systems al-
low a single malicious election authority to vote on behalf
of voters who abstain. EVOX-MA [27] addresses this by
distributing authority functionality. REVS [44, 50] extends
EVOX-MA to tolerate failure of distributed components, but
does not address coercion. ElectMe [69] is based on blind
signatures and claims to be coercion resistant, but it assumes
the adversary cannot corrupt election authorities. If the ad-
versary learns the ciphertext of a voter’s “ticket,” the scheme
fails to be receipt-free. ElectMe also is not universally ver-
iﬁable. Voters can verify their votes are recorded correctly,
but the computation of the tally is not publicly veriﬁable.
Adder [47] implements a homomorphic scheme in which
voters authenticate to a “gatekeeper.” If the adversary were
to corrupt this single component, then Adder would fail to
be coercion-resistant.
Kiayias [47] surveys several voting systems from the
commercial world. These proprietary systems do not gener-
ally make their implementations publicly or freely available,
nor do they appear to offer coercion resistance. The Cali-
fornia top-to-bottom review [73] of commercial electronic
voting systems suggests that these systems offer completely
inadequate security.
The W-Voting system [49] offers limited coercion resis-
tance. It requires voters to sign votes, which appears sus-
ceptible to attacks in which a coercer insists that the voter
abstain or submit a vote prepared by the coercer. It also al-
lows voters to submit new votes, which replace older votes.
So unlike Civitas, an adversary could successfully coerce a
voter by forcing the voter to submit a new vote, then keeping
the voter under surveillance until the end of the election.
365
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:14:20 UTC from IEEE Xplore.  Restrictions apply. 
Prˆet `a Voter 2006 [64] offers a weak form of coercion re-
sistance, if voting is supervised. The construction of ballots
depends on non-uniformly distributed seeds, which might
enable the adversary to learn information about how voters
voted. In remote settings, Prˆet `a Voter offers no coercion re-
sistance. The adversary, by observing the voter during vot-
ing, will learn what vote was cast.
VoteHere [57] offers coercion resistance, assuming a
supervised voting environment. Removing this assump-
tion seems non-trivial, since the supervised environment in-
cludes a voting device with a trusted random number gener-
ator. This generator could be subverted in a remote setting,
enabling the adversary to learn the voter’s vote.
The primary goal of Punchscan [61] is high integrity ver-
iﬁcation of optical scan ballots. Punchscan does not claim to
provide coercion resistance. Instead, under the assumption
that voting takes place in a supervised environment, Punch-
scan offers a weaker property: The adversary learns nothing
by observing data revealed during tabulation. This assump-
tion rules out coercion-resistant remote voting. For conﬁ-
dentiality, Punchscan assumes that the election authority is
not corrupted, even partially, by the adversary.
10. Toward a Secure Voting System
Some open technical problems must be solved before Civi-
tas, or a system like it, could be used to secure national elec-
tions. Two such problems are that Civitas assumes a trusted
voting client, and that in practice, the best way to satisfy two
of the Civitas trust assumptions is in-person registration.
We did not address availability in this work. However,
the design of Civitas accommodates complementary tech-
niques for achieving availability. To improve the availability
of election authorities, they could be implemented as Byzan-
tine fault-tolerant services [10, 60]. Also, the encryption
scheme used by Civitas could be generalized from the cur-
rent distributed scheme to a threshold scheme. This would
enable election results to be computed even if some tabu-
lation tellers become unresponsive or exhibit faulty behav-
ior, such as posting invalid zero-knowledge proofs.27 For a
threshold scheme requiring k out of n tabulation tellers to
participate in decryption, no more than k − 1 tellers may be
corrupted, otherwise coercion resistance could be violated.
For availability, a new trust assumption must be added: At
least k tellers do not fail.28
Application-level denial of service is particularly prob-
lematic, because an adversary could insert chaff to inﬂate
tabulation time. A possible defense, in addition to standard
techniques such as rate-limiting and puzzles, would be to
27Recovery from these faults would need to ensure that the adversary
cannot exploit any partial information from aborted subphases.
28The adversary could increase tabulation time by forcing at most n −
k restarts. But as long as no more than k − 1 tellers are corrupted, the
adversary cannot successfully cause tabulation to be aborted.
require a block capability in each submitted vote. The ad-
versary would need to learn the capability for each block,
individually, to successfully inﬂate tabulation time for that
block. Another possible defense is to weaken coercion resis-
tance so that chaff votes could be detected without requiring
PETs. These defenses are left as future work.
We have not investigated the usability of Civitas, al-
though usability is more important than security to some vot-
ers [35]. Management of credentials is an interesting prob-
lem for the use of Civitas. Voters might ﬁnd generating fake
credentials, storing and distinguishing real and fake creden-
tials (especially over a long term), and lying convincingly to
an adversary to be quite difﬁcult. Recovery of lost creden-
tials is also an open problem.
There are open non-technical problems as well; we give
three examples. First, some people believe that any use
of cryptography in a voting system makes the system too
opaque for the general public to accept.29 Second, remote
electronic voting requires voters to have access to comput-
ers, but not all people have such access now. Third, some
real-world attacks, such as attempts to confuse or misinform
voters about the dates, signiﬁcance, and procedures of elec-
tions, are not characterized by formal security models. Mit-
igation of such attacks is important for real-world deploy-
ments, but beyond the scope of this paper.
Finally, a report on the security of a real-world remote
voting system, SERVE, identiﬁes a number of open prob-
lems in electronic voting [42]. These problems include
transparency of voter clients, vulnerability of voter clients
to malware, and vulnerability of the ballot boxes to denial-
of-service attacks that could lead to large-scale or selective
disenfranchisement. However, Civitas does address other
problems raised by the report: the voter client is not a DRE,
trust is distributed over a set of election authorities, voters
can verify their votes are counted, spooﬁng of election au-
thorities is not possible due to the use of digital signatures,
vote buying is eliminated by coercion resistance, and elec-
tion integrity is ensured by veriﬁability.
11. Conclusion
This paper describes the design, implementation, and eval-
uation of Civitas, a remote voting system whose underly-
ing voting scheme is proved secure under carefully articu-
lated trust assumptions. To our knowledge, this has not been
done before. Civitas provides stronger security than previ-
ously implemented electronic voting systems. Experimental
results show that cost, tabulation time, and security can be
practical for real-world elections.
Civitas is based on a previously-known voting scheme,
but elaborating the scheme into an implemented system led
29Our stance is that it is unnecessary to convince the general public di-
rectly. Rather, we need to convince experts by using principled techniques
that put security on ﬁrm mathematical foundations.
366
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:14:20 UTC from IEEE Xplore.  Restrictions apply. 
to new technical advances: a secure registration protocol and
a scalable vote storage system. Civitas thus contributes to
both the theory and practice of electronic voting. But per-
haps the most important contribution of this work is evi-
dence that secure electronic voting could be made possible.
We are optimistic about the future of electronic voting sys-
tems constructed, like Civitas, using principled techniques.
Website
The accompanying technical report and prototype source
code are available from:
http://www.cs.cornell.edu/projects/civitas
Acknowledgments
We thank Michael George, Anil Nerode, Nathaniel Nys-
trom, Tom Roeder, Peter Ryan, Fred B. Schneider, Tyler