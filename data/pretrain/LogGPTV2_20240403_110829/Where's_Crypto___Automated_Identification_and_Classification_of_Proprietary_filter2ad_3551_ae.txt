(cid:88) CAST_ecb_encrypt
(cid:88) gosthash94_digest
(cid:88) DES_encrypt2
N/A
N/A
N/A
N/A
N/A
N/A
N/A
N/A
N/A
N/A
N/A
N/A
(cid:88) SHA3_absorb
N/A
N/A
N/A
N/A
N/A
N/A
N/A
N/A
N/A
(cid:88) hmac_ripemd160_update
(cid:88) des_encrypt
(cid:88) md2_update
11.2.1 Discussion of invalid results
Table 2 and Figure 8c contain several false positives and false
negatives. In order to gain insights in the limitations of our
approach, we highlight those instances here.
False negatives RC2 uses a regular addition, i.e. with carry
over, rather than XOR, whereas the Feistel signature high-
lighted in Section 10.2 relies on the XOR operation being
present. Therefore, RC2 is not identiﬁed as a Feistel cipher.
Furthermore, SHA512 is consistently among the false neg-
atives for the sequential block permutation class of primitives.
This is due to a DFG consisting of n (i.e. 4) instances of
SHA512 being required for successful identiﬁcation. How-
ever, said DFG consists of over 1,000,000 vertices, and causes
the construction phase to exceed ttimeout. Increasing this value
successfully mitigates the issue. However, it also affects the
total analysis time. The exact same issue applies to SHA3
with d ≥ 3, causing the Keccak-F function to be inlined, and
consequently the construction to exceed ttimeout.
Twoﬁsh is a Feistel cipher with a complex round func-
tion. The Feistel signature used throughout the analysis sup-
ports a round function consisting of up to 8 consecutive
arithmetic/logical operations, whereas the complexity of the
Twoﬁsh round function goes beyond that. Unfortunately,
extending the signature beyond 8 consecutive operations
severely impacts the running time of our implementation.
False positives The AES key schedule is identiﬁed as a
Feistel network. This is due to the fact that its structure can
actually be formulated as one, i.e. each round Li+1 = Ri, and
Ri+1 = Li ⊕ F(Ri,Ki), where i denotes the round number for
some function F. This is a perfect example to illustrate that
the taxonomical tree of cryptographic primitives is not neces-
sarily clear-cut. Rather, a degree of ‘fuzziness‘ exists among
different classes.
RC4 and ChaCha, both stream ciphers, are identiﬁed as
sequential block permutations. Inspection reveals that both
implementations keep an internal state of some size b. The
state is used directly as the cipher’s keystream. After the inter-
nal state is fully consumed, a new internal state is generated.
As such, the structure can be viewed as a special case of a
block cipher with a block size of b bytes.
566    30th USENIX Security Symposium
USENIX Association
Algorithm
Type Description
CRYPTO1
HITAG2
A5-1
A5-2
A5-GMR
RED PIKE
COMP128
KASUMI
MULTI2
DST40
KEELOQ
1 Positive match for d ≥ 4
Stream Cipher used in the Mifare Classic family of RFID tags.
Stream Cipher used in vehicle immobilizers.
Stream Provides over-the-air privacy for communication in GSM.
Stream GSM export cipher.
Stream Cipher used in GMR, a standard for satellite phones. Heavily inspired by A5/2.
Block
Hash
Block
Block A block cipher used for broadcast scrambling in Japan.
Block Digital Signature Transponder cipher, often found in vehicle immobilizers.
Block cipher used in remote keyless entry systems and home automation.
Block
Classiﬁed UK government encryption algorithm.
Family of algorithms used for session key and MAC generation in GSM.
Feistel cipher used for the conﬁdentiality and integrity of 3G.
Reverse-
engineered
[32, 54]
[72]
[16]
[16]
[26]
[23]
[15, 63]
-
-
[14]
[51]
Cryptanalysis
[20, 25, 32, 33, 49]
[22, 59, 60, 62, 68]
[6, 10, 48]
[34]
[26, 27]
-
[17]
[8, 28, 41]
[2]
[14]
[7, 12, 21, 29]
Table 3: Analysis result for proprietary samples
Original Target signature
source
6
7
8
8
9
10
11
12
13
14
15,16
(cid:88) (N)LFSR1
(cid:88) (N)LFSR1
(cid:88) (N)LFSR1
(cid:88) (N)LFSR1
(cid:88) (N)LFSR1
 Feistel cipher
(cid:88) Block permutation
(cid:88) Feistel cipher
(cid:88) Feistel cipher
(cid:88) (N)LFSR
(cid:88) (N)LFSR
Algorithm
signature CWM0576 CWX0470
1,344 KB
size
1,717 KB
analysis time 88m14s
45m53s
DES
feistel
AES
aes
bl.perm.
MD5
md5
bl.perm.
MEGAMOS
(n)lfsr
(cid:88) Match
(cid:88) Match
(cid:88) Match
(cid:88) Match
(cid:88) Match
(cid:88) Match
(cid:88) Match
N/A
N/A
(cid:88) Match
N/A
N/A
M340
4,133 KB
83m11s
VW
512 KB
11m45s
N/A
N/A
N/A
(cid:88) Match
(cid:88) Match
N/A
N/A
N/A
N/A
N/A
N/A
 No match
Table 4: Analysis result for various ﬁrmware images
Finally, CAST, ARIA and SM4 are all misidentiﬁed as
AES. This is due to the fact that for all three primitives, either
the algorithm itself, or its key schedule, is implemented by
means of lookup tables in a fashion similar to that of AES.
Ultimately, the transform completely depends on these tables,
rather than information ﬂows.
11.3 Performance on proprietary algorithms
Next, we turn our attention to various proprietary algorithms.
Most algorithms were originally conﬁdential, but have been
leaked to the public or reverse engineered. As such, source
code for all samples is publicly available. Due to uncertainty
over the legality of redistribution, we point to the original
sources for reference. Table 3 depicts the analysis results
these algorithms. A description, the analysis result, and other
relevant information is condensed into a single table due to
6https://github.com/nfc-tools/mfcuk/blob/master/src/crypto1.c
7http://cryptolib.com/ciphers/hitag2/
8https://cryptome.org/gsm-a512.htm
9https://github.com/marcelmaatkamp/gnuradio-osmocom-gmr/blob/master/src/l1/a5.c
10https://en.wikipedia.org/wiki/Red_Pike_(cipher)
11https://github.com/osmocom/libosmocore/blob/master/src/gsm/comp128.c
12https://github.com/osmocom/libosmocore/blob/master/src/gsm/kasumi.c
13https://github.com/OP-TEE/optee_os/blob/master/core/lib/libtomcrypt/src/ciphers/multi2.c
14https://github.com/jok40/dst40/blob/HEAD/software/dst40test/dst40.c
15https://github.com/hadipourh/KeeLoq
16http://cryptolib.com/ciphers/keeloq/
space restrictions. All signatures target a generic class of
primitives and none were pre-constructed to ﬁt a particular
sample. All algorithms are successfully identiﬁed, with the
exception of Red Pike. Similar to RC2 from Section 11.2.1,
Red Pike uses addition instead of exclusive-or, and is therefore
not identiﬁed as a Feistel cipher.
Finally, the test set of representative real-world ﬁrmwares
consists of images for the Emerson ControlWave Micro RTU,
Emerson ControlWave XFC ﬂow computer, Schneider Elec-
tric M340 PLC and Volkswagen IPC. The size, nature and
complexity of these images ensure test-set realism. Table 4
depicts the analysis result for all the ﬁrmwares. To the best of
our knowledge, the table covers all cryptographic algorithms
present in the sample set of ﬁrmware images. The images are
‘ﬂat’ binaries and hence symbol names are absent. The results
show that all the cryptographic primitives were identiﬁed,
except for the Megamos cipher. Verdult et al. [69] revealed
that the Megamos cipher contains an NLFSR, and thus, the
analysis should point this out. Further examination reveals
that the non-linear feedback function is implemented as a
subroutine, and the shift register is updated depending on its
return value via an if-statement. This is a direct violation of
the implicit ﬂow limitation inherent to DFG-based approaches
discussed in Section 2.
12 Conclusions
Despite the ubiquitous availability of royalty-free, publicly
documented, and peer-reviewed cryptographic primitives
and implementations, proprietary alternatives have persisted
across many industry verticals, especially in embedded sys-
tems. Due to the undocumented and proprietary nature of
said primitives, subjecting them to security analysis often re-
quires locating and classifying them in often very large binary
images, which is a time-consuming, labor-intensive effort.
In order to overcome this obstacle in an automated fashion,
a solution should have the capability of identifying as-of-yet
unknown cryptographic algorithms, support large, real-world
ﬁrmware binaries, and not depend on peripheral emulation.
USENIX Association
30th USENIX Security Symposium    567
As of yet, no prior work exists that satisﬁes these criteria.
Our novel approach combines DFG isomorphism with sym-
bolic execution, and introduces a specialized DSL in order to
enable identiﬁcation of unknown proprietary cryptographic
algorithms falling within well-deﬁned taxonomical classes.
The approach is the ﬁrst of its kind, is architecture and plat-
form agnostic, and performs well in terms of both accuracy
and running time on real-world binary ﬁrmware images.
Future work DFGs do not allow for the expression of code
ﬂow information. Potentially valuable indicators, such as
whether two nodes originate from the same execution ad-
dress, hinting to a round function, are therefore lost. We leave
the incorporation of code ﬂow information for future work.
13 Acknowledgements
This work was funded by the Deutsche Forschungsgemein-
schaft (DFG, German Research Foundation) under Germany’s
Excellence Strategy - EXC 2092 CaSa - 390781972.
References
[1] Ross Anderson, Mike Bond, Jolyon Clulow, and Sergei
Skorobogatov. Cryptographic processors-a survey. Pro-
ceedings of the IEEE, 94(2):357–369, 2006.
[2] Jean-Philippe Aumasson, Jorge Nakahara, and Pouyan
Sepehrdad. Cryptanalysis of the isdb scrambling al-
gorithm (multi2). In International Workshop on Fast
Software Encryption, pages 296–307. Springer, 2009.
[3] Luigi Auriemma. Signsrch tool.
signatures inside ﬁles, 2013.
tool for searching
[9] Fabrizio Biondi, Sébastien Josse, Axel Legay, and
Thomas Sirvent. Effectiveness of synthesis in con-
colic deobfuscation. Computers & Security, 70:500–
515, 2017.
[10] Alex Biryukov, Adi Shamir, and David Wagner. Real
time cryptanalysis of a5/1 on a pc. In International Work-
shop on Fast Software Encryption, pages 1–18. Springer,
2000.
[11] Tim Blazytko, Moritz Contag, Cornelius Aschermann,
and Thorsten Holz. Syntia: Synthesizing the semantics
of obfuscated code. In Proceedings of the 26th USENIX
Security Symposium, pages 643–659, 2017.
[12] Andrey Bogdanov. Cryptanalysis of the keeloq block
cipher. IACR Cryptology ePrint Archive, 2007:55, 2007.
[13] Wouter Bokslag. An assessment of ecm authentication
in modern vehicles.
[14] Steve Bono, Matthew Green, Adam Stubbleﬁeld, Ari
Juels, Aviel D Rubin, and Michael Szydlo. Security
analysis of a cryptographically-enabled rﬁd device. In
USENIX Security Symposium, volume 31, pages 1–16,
2005.
[15] Marc Briceno, Ian Goldberg, and David Wagner. An
implementation of comp128. 1998. http://www.iol.
ie/kooltek/a3a8.txt.
[16] Marc Briceno, Ian Goldberg, and David Wagner. A peda-
gogical implementation of the gsm a5/1 and a5/2 “voice
privacy” encryption algorithms. Originally published
at http://www. scard. org, mirror at http://cryptome.
org/gsm-a512. htm, 26, 1999.
[4] Roberto Avanzi. A salad of block ciphers. IACR Cryp-
tology ePrint Archive, 2016:1171, 2016.
[17] Billy Brumley. A3/a8 & comp128. T-79.514 Special
Course on Cryptology, pages 1–18, 2004.
[5] BBC News. Car key immobiliser hack revelations
blocked by uk court. 2013. https://www.bbc.com/
news/technology-23487928.
[6] Eli Biham and Orr Dunkelman. Cryptanalysis of the
a5/1 gsm stream cipher. In International Conference on
Cryptology in India, pages 43–51. Springer, 2000.
[7] Eli Biham, Orr Dunkelman, Sebastiaan Indesteege,
Nathan Keller, and Bart Preneel. How to steal cars
a practical attack on keeloq. In EUROCRYPT, pages
1–18, 2008.
[8] Eli Biham, Orr Dunkelman, and Nathan Keller. A
related-key rectangle attack on the full kasumi. In In-
ternational Conference on the Theory and Application
of Cryptology and Information Security, pages 443–461.
Springer, 2005.
[18] Juan Caballero, Pongsin Poosankam, Christian Kreibich,
and Dawn Song. Dispatcher: Enabling active botnet inﬁl-
tration using automatic protocol reverse-engineering. In
Proceedings of the 16th ACM conference on Computer
and communications security, pages 621–634, 2009.
[19] Joan Calvet, José M Fernandez, and Jean-Yves Marion.
Aligot: cryptographic function identiﬁcation in obfus-
cated binary programs. In Proceedings of the 2012 ACM
conference on Computer and communications security,
pages 169–182, 2012.
[20] Nicolas T Courtois. The dark side of security by obscu-
rity and cloning mifare classic rail and building passes,
anywhere, anytime. 2009.
[21] Nicolas T Courtois, Gregory V Bard, and David Wagner.
Algebraic and slide attacks on keeloq. In International
568    30th USENIX Security Symposium
USENIX Association
Workshop on Fast Software Encryption, pages 97–115.
Springer, 2008.
[22] Nicolas T Courtois, Sean O’Neil, and Jean-Jacques
Quisquater. Practical algebraic attacks on the hitag2
stream cipher. In International Conference on Informa-
tion Security, pages 167–176. Springer, 2009.
[23] Gmane Cypherpunk mailing list. Red pike cipher.
2004. http://permalink.gmane.org/gmane.comp.
security.cypherpunks/3680.
[24] Robin David. Formal Approaches for Automatic Deob-
fuscation and Reverse-engineering of Protected Codes.