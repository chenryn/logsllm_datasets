DOM-based XSS. The system executes programs with
dynamic taint analysis to identify vulnerable program
points and verifies them by generating exploits. DexterJS
then infers benign DOM templates to create patches that
can mitigate such exploits.
JavaScript code instrumentation.
Proxy-based
instrumentation frameworks have been proposed be-
fore [23, 14].
JavaScript can be considered as self-
modifying code since a running program can generate in-
put code for its own execution. This renders complete in-
strumentation prior to execution impossible since writes
to code cannot be covered. Hence, programs must be in-
strumented before execution and all subsequent writes to
program code must be processed by separate instrumen-
tation steps.
Anomaly detection. Anomaly detection has found
wide application in security research.
For instance,
Daikon [13] is a system that can infer likely invariants.
The system applies machine learning to make observa-
tions at runtime. Daikon supports multiple programming
languages, but can also be used over arbitrary data as
CSV files.
In ZigZag, we extended Daikon with new
invariants specific to JavaScript applications for runtime
enforcement.
DIDUCE [24] is a tool that instruments Java bytecode
and builds hypotheses during execution. When violations
to these hypotheses occur, they can either be relaxed or
raise an alert. The program can be used to help in tracking
down bugs in programs semi-automatically.
teraction and the functionality of a complex web applica-
tion is not easily quantifiable, we added manual quantita-
tive testing to augment automated tests. The testers were
familiar with the websites before using the instrumented
version, and we performed live instrumentation using the
proxy-based prototype.
For YouTube and Vimeo, the testers browsed the sites
and watched multiple videos, including pausing, resum-
ing, and restarting at different positions. Facebook was
tested by scrolling through several timelines and using
the chat functionality in a group setting. The testers also
posted to a timeline and deleted posts. For Google Docs,
the testers created and edited a document, closed it, and
re-opened it. For d3.js, the testers opened several of
the example visualizations and verified that they ran cor-
rectly. Finally, the testers sent and received emails with
Gmail and live.com.
In all cases, no enforcement violations were detected
when running the instrumented version of these web ap-
plications.
7 Related Work
In this section, we discuss ZigZag in the context of related
work.
Client-side validation vulnerabilities. CSV vulnera-
bilities were first highlighted by Saxena et al. [3]. In their
work, the authors propose FLAX, a framework for CSV
vulnerability discovery that combines dynamic taint anal-
ysis and fuzzing into taint-enhanced blackbox fuzzing.
The system operates in two steps. JavaScript programs
are first translated into a simplified intermediate language
called JASIL. Then, the JavaScript application under test
is executed to dynamically identify all data flows from
untrusted sources to critical sinks such as cookie writes,
eval, or XMLHttpRequest invocations. This flow in-
formation is processed into small executable programs
called acceptor slices. These programs accept the same
inputs as the original program but are reduced in size.
Second, the acceptor slices are fuzzed using an input-
aware technique to find inputs to the original program
that can be used to exploit a bug. A program is consid-
ered to be vulnerable when a data flow from an untrusted
source to a critical sink can be established.
Later, the same authors improved FLAX by replacing
the dynamic taint analysis component with a dynamic
symbolic execution framework [4]. Again, the goal of
the static analysis is to find unchecked data flows from
inputs to critical sinks. This method provides no com-
pleteness and can hence miss vulnerabilities.
The main difference between ZigZag and FLAX is
that FLAX focuses on detecting vulnerabilities in appli-
cations, while ZigZag is intended to defend unknown vul-
nerabilities against attacks.
ClearView [25] uses a modified version of DAIKON
to create patches for high-availability binaries based on
learned invariants. The focus of the system is to de-
tect and prevent memory corruption through changing the
program code at runtime. However, the embedded mon-
itors do not extend to detecting errors in program logic.
Attacks on the workflow of PHP applications have
been addressed by Swaddler [10]. Not all attacks on sys-
tems produce requests or, more generally, external be-
USENIX Association  
24th USENIX Security Symposium  749
havior that can be detected as anomalous. These attacks
can be detected by instrumenting the execution environ-
ment and generating models that are representative of be-
nign runs. Swaddler can be operated in three modes:
training, detection, and prevention. To model program
execution, profiles for each basic block are generated, us-
ing univariate and multivariate models. During training,
probability values are assigned to each profile by storing
the most anomalous score for benign data, a level of “nor-
mality” is established. In detection and prevention mode,
an anomaly score is calculated based on the probability of
the execution data being normal using a preset threshold.
Violations are assumed to be attacks. The results sug-
gest that anomaly detection on internal application state
allows a finer level of attack detection than exclusively
analyzing external behavior.
While Swaddler focuses on the server component of
web applications, ZigZag characterizes client-side be-
havior. ZigZag can protect against cross-domain at-
tacks within browsers that Swaddler has no visibility into.
Swaddler invokes detection for every basic block, while
we use a dynamic level of granularity based on the types
of sinks in the program, resulting in a dramatic reduction
in enforcement overhead.
Client-side policy enforcement. ICESHIELD [26] is
a policy enforcement tool for rules based on manual anal-
ysis. By adding JavaScript code before all other content,
ICESHIELD is invoked by the browser before other code
is executed. Through ECMAScript 5 features, DOM
properties are frozen to maintain the integrity of the de-
tection code. ICESHIELD protects users from drive-by
downloads and exploit websites. In contrast, ZigZag per-
forms online invariant detection and prevents previously
unknown attacks.
ConScript [27] allows developers to create fine-
grained security policies that specify the actions a script
is allowed to perform and what data it is allowed to access
or modify. Conscript can generate rules from static anal-
ysis performed on the server as well as by inspecting dy-
namic behavior on the client. However, it requires modi-
fications to the JavaScript engine, which ZigZag aims to
avoid.
browser. CSP can be effective at preventing signifi-
cant classes of code injection in web applications if ap-
plied correctly (e.g., without the use of unsafe-inline
and unsafe-eval) and if appropriate rules are enforced.
However, CSP does not defend against general CSV at-
tacks, and therefore we view it and other systems with
similar goals as complementary to ZigZag. In particular,
CSP could be highly useful to prevent code injection and
thereby protect the integrity of ZigZag in the browser.
Web standards. Although Barth et al. [30] made the
HTML5 postMessage API more secure, analysis of web-
sites suggests that it is nevertheless used in an insecure
manner. Authentication weaknesses of popular websites
have been discussed by Son et al. [9]. They showed that
84 of the top 10,000 websites were vulnerable to CSV
attacks, and moreover these sites often employ broken
origin authentication or no authentication at all. Their
proposed defenses rely on modifying either the websites
or the browser.
In ZigZag, we aim for a fine-grained, automated,
annotation-free approach that dynamically secures appli-
cations against unknown CSV attacks in an unmodified
browser.
8 Conclusion
Most websites rely on JavaScript to improve the user ex-
perience on the web. With new HTML5 communica-
tion primitives such as postMessage, inter-application
communication in the browser is possible. However,
these new APIs are not subject to the same origin policy
and, through software bugs such as broken or missing in-
put validation, applications can be vulnerable to attacks
against these client-side validation (CSV) vulnerabilities.
As these attacks occur on the client, server-side secu-
rity measures are ineffective in detecting and preventing
them.
In this paper, we present ZigZag, an approach to au-
tomatically defend benign-but-buggy JavaScript applica-
tions against CSV attacks. Our method leverages dy-
namic analysis and anomaly detection techniques to learn
and enforce statistically-likely, security-relevant invari-
ants. Based on these invariants, ZigZag generates as-
sertions that are enforced at runtime. ZigZag’s design
inherently protects against unknown vulnerabilities as it
enforces learned, benign behavior. Runtime enforcement
is carried out only on the client-side code, and does not
require modifications to the browser.
ZigZag can be deployed by either the website oper-
ator or a third party. Website owners can secure their
JavaScript applications by replacing their programs with
a version hardened by ZigZag, thereby protecting all
users of the application. Third parties, on the other hand,
can deploy ZigZag using a proxy that automatically hard-
The dynamic nature of JavaScript renders a purely
static approach infeasible. Chugh et al. propose a staged
approach [28] where they perform an initial analysis of
the program given a list of disallowed flow policies,
and then add residual policy enforcement code to pro-
gram points that dynamically load code. The analysis of
dynamically loaded code can be performed at runtime.
These policies can enforce integrity and confidentiality
properties, where policies are a list of tuples of disal-
lowed flows (from, to).
Content Security Policy (CSP) [29, 11] is a frame-
work for restricting JavaScript execution directly in the
750  24th USENIX Security Symposium 
USENIX Association
ens any website visited using it. This usage model of
ZigZag protects all users of the proxy, regardless of the
web application.
We evaluated ZigZag using a number of real-world
web applications, including complex examples such as
online word processors and video portals. Our evalua-
tion shows that ZigZag can successfully instrument com-
plex applications and prevent attacks while not impair-
ing the functionality of the tested web applications. Fur-
thermore, it does not incur an unreasonable performance
overhead and, thus, is suitable for real-world usage.
Acknowledgements
This work was supported by the Office of Naval Research
(ONR) under grant N00014-12-1-0165, the Army Re-
search Office (ARO) under grant W911NF-09-1-0553,
the Department of Homeland Security (DHS) under grant
2009-ST-061-CI0001, the National Science Foundation
(NSF) under grant CNS-1408632, and SBA Research.
We would like to thank the anonymous reviewers for
their helpful comments. Finally, we would like to thank
the Marshall Plan Foundation for partially supporting this
work.
References
[1] Internet World Stats, “Usage and Population Statis-
tics,” http://www.internetworldstats.com/stats.htm,
2013.
[2] N. Jovanovic, C. Kruegel, and E. Kirda, “Pixy: A
Static Analysis Tool for Detecting Web Application
Vulnerabilities (Short Paper),” in IEEE Symposium
on Security and Privacy (Oakland), 2006.
[3] P. Saxena, S. Hanna, P. Poosankam, and D. Song,
“FLAX: Systematic Discovery of Client-side Val-
idation Vulnerabilities in Rich Web Applications,”
in ISOC Network and Distributed System Security
Symposium (NDSS), 2010.
[4] P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCa-
mant, and D. Song, “A Symbolic Execution Frame-
work for JavaScript,” in IEEE Symposium on Secu-
rity and Privacy (Oakland), 2010.
[5] D. Crockford, “JSLint: The JavaScript Code Qual-
ity Tool,” April 2011, http://www.jslint.com/.
[6] M. Samuel, P. Saxena, and D. Song, “Context-
sensitive Auto-sanitization in Web Templating
Languages using Type Qualifiers,” in ACM Con-
ference on Computer and Communications Security
(CCS), 2011.
[7] M. S. Miller, M. Samuel, B. Laurie, I. Awad,
and M. Stay, “Safe Active Content in Sanitized
JavaScript,” Google, Inc., Tech. Rep., 2008.
[8] S. Maffeis and A. Taly, “Language-based Isolation
of Untrusted JavaScript,” in IEEE Computer Secu-
rity Foundations Symposium, 2009.
[9] S. Son and V. Shmatikov, “The Postman Always
Rings Twice: Attacking and Defending postMes-
sage in HTML5 Websites,” in ISOC Network and
Distributed System Security Symposium (NDSS),
2013.
[10] M. Cova, D. Balzarotti, V. Felmetsger, and G. Vi-
gna, “Swaddler: An Approach for the Anomaly-
based Detection of State Violations in Web Appli-
cations,” in International Symposium on Recent Ad-
vances in Intrusion Detection (RAID), 2007.
[11] “Content Security Policy 1.1,” 2013. [Online].
https://dvcs.w3.org/hg/content-securit
Available:
y-policy/raw-file/tip/csp-specification.dev.html
[12] G. F. Cretu, A. Stavrou, M. E. Locasto, S. J. Stolfo,
and A. D. Keromytis, “Casting out Demons: San-
itizing Training Data for Anomaly Sensors,” in
IEEE Symposium on Security and Privacy (Oak-
land), 2008.
[13] M. D. Ernst, J. H. Perkins, P. J. Guo, S. McCamant,
C. Pacheco, M. S. Tschantz, and C. Xiao, “The
Daikon System for Dynamic Detection of Likely
Invariants,” Science of Computer Programming,
2007.
[14] H. Kikuchi, D. Yu, A. Chander, H. Inamura, and
I. Serikov, “JavaScript Instrumentation in Prac-
tice,” in Asian Symposium on Programming Lan-
guages and Systems (APLAS), 2008.
[15] F. Groeneveld, A. Mesbah, and A. van Deursen,
“Automatic Invariant Detection in Dynamic Web
Applications,” Delft University of Technology,
Tech. Rep., 2010.
[16] “Closure Compiler,” 2013. [Online]. Available:
https://developers.google.com/closure/compiler
[17] “ctemplate - Powerful but simple template language
for C++,” 2013. [Online]. Available: https://code.g
oogle.com/p/ctemplate/
[18] “Handlebars.js: Minimal Templating on Steroids,”
2007. [Online]. Available: http://handlebarsjs.com/
[19] “Squid Internet Object Cache,” http://www.squid-
cache.org, 2005.
USENIX Association  
24th USENIX Security Symposium  751
[20] A. Klein, “DOM Based Cross Site Scripting or XSS
of the Third Kind,” Web Application Security Con-
sortium, Articles, 2005.
[21] B. Stock, S. Lekies, T. Mueller, P. Spiegel, and
M. Johns, “Precise Client-side Protection against
DOM-based Cross-Site Scripting,” USENIX Secu-
rity Symposium, 2014.
[22] I. Parameshwaran, E. Budianto, S. Shinde, H. Dang,
A. Sadhu, and P. Saxena, “Auto-Patching DOM-
based XSS At Scale,” Foundations of Software En-
gineering (FSE), 2015.
[23] D. Yu, A. Chander, N. Islam, and I. Serikov,
“JavaScript Instrumentation for Browser Security,”
in Principles of Programming Languages (POPL),
2007.
ACM Symposium on Operating Systems Principles
(SIGOPS), 2009.
[26] M. Heiderich,
T. Frosch,
and T. Holz,
“ICESHIELD: Detection
of
Malicious Websites with a Frozen DOM,” in
International Symposium on Recent Advances in
Intrusion Detection (RAID), 2011.
and Mitigation
[27] L. A. Meyerovich and B. Livshits, “Conscript:
Specifying and Enforcing Fine-grained Security
Policies for JavaScript in the Browser,” in IEEE
Symposium on Security and Privacy (Oakland),
2010.
[28] R. Chugh, J. A. Meister, R. Jhala, and S. Lerner,
“Staged Information Flow for JavaScript,” in ACM
Sigplan Notices, 2009.
[24] S. Hangal and M. S. Lam, “Tracking Down Soft-
ware Bugs Using Automatic Anomaly Detection,”
in International Conference on Software Engineer-
ing (ICSE), 2002.
[29] S. Stamm, B. Sterne, and G. Markham, “Reining
in the Web with Content Security Policy,” in Inter-
national Conference on World Wide Web (WWW),
2010.
[25] J. H. Perkins, S. Kim, S. Larsen, S. Amaras-
inghe, J. Bachrach, M. Carbin, C. Pacheco, F. Sher-
wood, S. Sidiroglou, G. Sullivan et al., “Automat-
ically Patching Errors in Deployed Software,” in
[30] A. Barth, C. Jackson, and J. C. Mitchell, “Securing
Frame Communication in Browsers,” Communica-
tions of the ACM, 2009.
752  24th USENIX Security Symposium 
USENIX Association