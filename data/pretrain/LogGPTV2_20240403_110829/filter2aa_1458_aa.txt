Windows 本地提权在野 0day 狩猎之旅 
Quan Jin  
DBAPPSecurity 
Black Hat USA 2022 
注：本文是作者在今年 Black Hat USA 2022 演讲议题的中文版 
摘要 
本文将讲述我们如何在 2020-2021 两年间狩猎 Windows 本地提权在野 0day 的故事：为什
么我们觉得这件事可行，我们如何研究历史案例，我们如何用学到的经验开发一套检测系统，
以及我们如何改进这套系统使之变得更准确。通过使用这套系统，我们成功捕获了两个
Windows 本地提权在野 0day 和一个 Windows 本地提权在野 1day。 
此外，我们也将比较几种不同狩猎方法的优点和缺点，并给出一些对未来 Windows 本地提
权在野 0day 的趋势预测。 
背景 
从下图可以看出，从 2017 年到 2021 年，微软一共披露了 28 个在野的 Windows 本地提权
0day，它们中的大部分是 Windows 内核漏洞。这些漏洞通常被顶级 APT 组织使用，并且会
造成巨大危害。对安全厂商来说，捕获一个这样的在野 0day 是一件非常有挑战性的事情。 
Windows 本地提权在野 0day (2017-2021) 
是否有可能捕获一个 Windows 本地提权在野 0day？ 
为了回答这个问题，我们需要思考另外两个问题： 
1. 
如何获取有价值的数据源（可能含有在野 0day 的数据源）？ 
2. 
如何开发一套有效的检测方法？ 
对于第一个问题，我们有一些自己的数据集。此外，历史案例表明像 VirusTotal 这类的公共
平台有可能出现 0day。因此，通过使用私有和公有数据集，我们可以解决第一个问题。 
对于第二个问题，有两种方法可以从海量样本中捕获一个 0day：动态检测和静态检测。 
a) 
动态检测是指的是在真实环境中进行检测，或在沙箱中进行模拟执行，并通过异常行为
过滤出 0day 样本（典型代表是杀毒软件和沙箱） 
b) 
静态检测是指使用静态特征匹配出样本（典型代表是 YARA） 
两种方法都有其优点和缺点。我们对两种方法都进行了一些思考和尝试。测试结果表明，静
态检测方法更适合我们。我们将在后文详细描述这个过程。 
接下来，我将解释为什么我们花了大量时间研究历史上的 Windows 本地提权在野 0day。 
从历史（和当下）中学习 
为什么我们应当从历史中学习？ 
有三个原因： 
1. 
一些漏洞利用手法在一段时间内具有连续性 
2. 
从攻击者视角进行思考可以帮助我们更好地防御 
3. 
历史案例已经被整个安全社区仔细研究过（我们可以站在巨人的肩膀上） 
我们如何学习历史案例？ 
为了从历史中学习，我们研究了超过 50 个 CVE 漏洞，涵盖了从 2014 年到 2021 年期间几乎
所有的 Windows 本地提权在野 0day 和部分 1day。 
我们仔细统计了这些漏洞的发现厂商、使用组织、修补周期、初始披露文章、使用场景、被
攻击的系统版本、漏洞模块、漏洞类型、利用手法、公开的分析博客、公开的利用代码、原
始样本（如果有）和其他信息。 
这里我想重点说明其中的几个关键点。 
使用场景： 
a) 
样本是作为独立提权组件使用的，还是作为一个利用链的一部分？ 
b) 
利用代码是基于无文件形式使用的（例如 dll reflection），还是包含在一个落地文件中？ 
这些信息会直接影响我们对不同检测方案的选取。 
被攻击的系统版本： 
许多 Windows 本地提权样本在使用前会检测操作系统版本，并且只能在一些特定的版本中
利用或触发。 
这个信息在制作沙箱环境或漏洞复现环境时尤其有用。 
漏洞模块： 
通过统计历史样本的漏洞模块，我们可以得知哪个组件最多次被攻击，哪个攻击面在一段特
定时间内最受攻击者青睐。 
这些信息可以帮助我们预测接下来最可能出现的漏洞。 
漏洞类型： 
通过统计历史样本的漏洞类型，我们可以推断攻击者最喜欢使用的漏洞类型，这个信息可以
帮助我们制作正确的复现环境（例如，是否需要配置 Driver Verifier）。这个信息也可以告诉
我们不同漏洞类型的流行程度（例如竞争条件漏洞在最近几年逐渐增多）。 
利用手法： 
我认为这是最重要的信息。我们统计了大多数 Windows 本地提权在野 0day 的漏洞利用手
法。基于这部分统计，我们得出了一些有价值的结论。例如，“bServerSideWindowProc”手
法在 2015 年到 2016 年很流行；使用“Previous Mode”手法去实现任意地址读写的手法从
2018 开始变得越来越流行；使用“HMValidateHandle”来泄露内核信息的手法在过去 5 年
很流行。 
公开的分析博客和利用代码： 
公开的分析博客和利用代码包含整个社区的研究成果。吸收这些已存在的知识就像站在
巨人的肩膀上，对我们帮助很大。 
原始样本（如果有）： 
我们仔细收集了历史 Windows 本地提权在野 0day 的原始样本（如果有）。这些原始样
本的文件、哈希和利用手法都是第一手资料，如果我们能检测到这些样本，我们也能捕
获到未来出现的相似样本。 
为什么我们需要从当下学习？ 
除了从历史中学习，我们也应当从最新的漏洞和利用手法中学习。原因如下： 
1. 
一个新披露的漏洞可能会有变种（例如 CVE-2022-21882 漏洞是 CVE-2021-1732 的变
种） 
2. 
一个最新被攻击的模块可能会被整个社区 fuzz 或审计（例如 clfs.sys） 
3. 
一个攻击者也许还有一些相似的漏洞正在使用或还未使用（例如，卡巴斯基基于 CVE-
2021-1732 发现了 CVE-2021-28310） 
4. 
一种新的利用手法可能很快会被攻击者使用（例如“Scoop the Windows 10 pool!”这篇
文章中的 Pipe Attribute 手法） 
接下来，我将描述我们如何比较不同的检测方法，并从中选择一个作为主要检测方法。 
一条大路通罗马 
选择合适的工具 
据我们所知，有三种可选的具体方法可以捕获一个在野的 Windows 本地提权漏洞： 
1. 
杀毒软件（或其他类似工具） 
2. 
沙箱（或其他类似工具） 
3. 
YARA（或其他类似工具） 
杀毒软件是最强有力的工具。它部署在大规模真实环境中，可以实时检测到威胁，并且有机
会提取被加密的提权组件。在过去几年，卡巴斯基曾用他们的杀毒软件捕获了若干在野的
Windows 本地提权 0day。然而，不是每个厂商的杀毒软件都可以做到像卡巴斯基那样好。
同时，杀毒软件经常会被绕过或被检测到，这些都增加了开发一套基于杀毒软件的本地提权
漏洞狩猎方法的难度。 
沙箱是另一个可以用来狩猎在野 0day 的工具。我曾有过一些使用沙箱成功捕获 Office 在野
0day 的经验。感兴趣的读者可以参考我之前在 Bluehat Shanghai 2019 上的演讲。 
不像杀毒软件，沙箱环境高度可控，并且可以自由配置。此外，沙箱基于行为的检测使其结
果十分准确。 
然而，我认为沙箱在某种程度上不适合狩猎 Windows 本地提权 0day。不像 Office，许多本
地提权漏洞利用会进行系统版本检测以避免不必要的蓝屏，这使得它们在面对沙箱时显得更
隐蔽。你也许会觉得可以通过制作更多的环境来解决这个问题，但现今每日新增的 PE 文件
数量巨大，每个样本都投递到一个新环境意味着巨大的资源开销，不是所有厂商都有足够的
资金去供得起这种开销。 
此外，基于沙箱的检测方法在狩猎 Windows 本地提权样本时还存在一些其他缺点： 
1. 
一些样本需要参数（例如，一个进程 id），但沙箱默认无法提供合理的参数 
2. 
一些样本只会导致蓝屏，而没有其他行为，这使得它们较难被检测到 
3. 
沙箱的开发和部署存在一个周期，这会导致错过一些最新漏洞样本的最佳检测周期 
YARA 是第三种可以狩猎 Windows 本地提权在野 0day 的方法。它在检测含有特定特征的恶
意样本方面有着很好的效果。 
YARA 基本上没有技术壁垒，且 YARA 的规则无惧各种形式的检测（版本检测、绕过检测等）。
YARA 的另一个优势是它在开发和部署上非常灵活。当一种新的漏洞利用手法出现，我们可
以迅速将其转换为规则，并将其部署到检测系统。最后，YARA 规则的成本比杀毒软件和沙
箱都低。 
但 YARA 规则也有一些缺点，例如它可以轻易导致漏报和误报。因此，如果我们使用 YARA
去狩猎本地提权在野 0day，我们需要对历史案例非常熟悉，而这一点我们在之前已经完成。 
以上，我们对比了三种方法在狩猎 Windows 本地提权 0day 方面的优缺点，基于这些比对并
结合实际情况，我们最终选择了 YARA 作为我们的主要狩猎手法，对于 Windows 本地提权
在野 0day 狩猎来说，它最容易上手、最灵活并且成本最低。 