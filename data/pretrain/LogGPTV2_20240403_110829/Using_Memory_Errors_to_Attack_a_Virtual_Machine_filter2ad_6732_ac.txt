IBM’s JVM allowed the applet to allocate up to 60% of
the physical memory, but not more. The JVM reveals suf-
ﬁcient information about the address of the object to com-
pute the cousin number for each object. We optimized the
attack to use this information. We refer the reader to the
appendix for details about the optimization.
Software-injected in-process faults:
The JVM permitted a process address space of 467
megabytes on a machine with 1 GB of memory. We
were able to allocate 422066 objects. A bit ﬂip in
any of the bits 2 : : :27 of any pointer resulted in a
successful attack; that is, K = 26.
Thus we were able to use 42206624926
bit ﬂips in the program address space.
8467220 = 0:70 of the
8128220
Software-injected anywhere-in-physical-memory faults:
We were able to allocate N = 57;753 objects on
a machine with 128 MB RAM. We ﬂipped a ran-
dom memory bit in the physical memory using the
/dev/mem interface. We expect a success probability
of 57753249log257753249
= 0:32. We ran 3,032 trials
of the experiment. By comparing the pointer fetched
from the memory with a pointer to the object, we
detected that a bit ﬂipped in 1353 trials. Of these
1353 times, we were able to take over the JVM 998
times (the remainder were in an unexploitable bit of
the word, and hence the JVM crashed). In 1679 tri-
als, the bit ﬂip was not detected by our program; of
these trials, there were 23 where the operating sys-
tem crashed, and at most 22 trials where our JVM
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
follows:
32
28
10
2
If the bits ﬂipped are in the bits 2 : : :27, then derefer-
encing the ﬂipped pointer is safe. If the ﬂipped bits are
in the bits 10 : : :27, the new pointer should point to one
of the B objects. Thus, we can detect if the bits ﬂipped
are in the bits 10 : : :27 by comparing the ﬂipped pointer
with each of the B objects. The program has no safe way
to distinguish a ﬂip in the bits 2 : : : 9 from a ﬂip in the
bits 0 : : : 1 and 28 : : :31. Thus, if we have ﬂips in the bits
not known to be in 10 : : :27, we have to dereference the
pointer and hope it is safe to dereference.
By comparing against the B objects and detecting if
the bits ﬂipped are in the bits 10 : : :27, and using only
these safe ﬂipped pointers for the attack, though our ef-
ﬁciency is lower, we have a better win-before-lose-ratio.
In this case q, the probability that an individual memory
error crashes the JVM or the operating system drops to
45/3032 and hence the probability that the successful ex-
ploit occurs before a machine crash is p=p q = 93.7%.
In this version, where we do not use the ﬂips in the bits
2 : : :9 (corresponding to the interior offset of the ﬁelds
in the object), the optimal object size for our exploit is
smaller. Smaller object size would allow us to use ﬂips
in more bits per word, while increasing the object header
overhead. Our analysis shows that for a JVM that uses 2
header words per object, the optimal object size is 128,
with the win-before-loss ratio for this object size being
94.6%.
6 Susceptibility of DRAM chips
To attack machines without physical access, the at-
tacker can rely on natural memory errors. Memory er-
rors are characterized as hard or soft. Hard errors are
caused by defects in the silicon or metalisation of the
DRAM package and are generally permanent (or intermit-
tent) once they manifest. Soft errors are typically caused
by charged particles or radiation and are transient. A
memory location affected by a soft error does not man-
ifest error upon writing new data.
Soft errors have been studied extensively by the avion-
ics and space research communities. They refer to soft er-
rors as “single event upset” (SEU). In the past, soft errors
were primarily caused by alpha particles emitted by the
impurities in the silicon, or in the plastic packaging ma-
terial [21]. This failure mode has been mostly eliminated
today due to strict quality control of packaging material
by DRAM vendors.
Recent generations of DRAM chips have been made
more resistant to memory errors by avoiding the use of
boron compounds, which can be stimulated by thermal
neutrons to produce alpha particles [11]. Currently the
probable primary source of soft errors in DRAM is elec-
trical disturbance caused by terrestrial cosmic rays, which
are very high-energy subatomic particles originating in
outer space.
It is hard to ﬁnd good recent quantitative data on the
susceptibility of DRAM chips to radiation-induced faults.
The most informative paper we came across is from IBM,
and is for memory technologies several generations old
[14];
in 1996 one might have expected one error per
month in a typical PC.
Since then, changes in DRAM technology have re-
duced its radiation-induced fault rate. Dynamic RAMs
are implemented with one capacitor to hold the state of
each bit of memory. The susceptibility of a DRAM cell
to faults is proportional to its size (cross-section to cos-
mic rays), and inversely proportional to its capacitance.
As new capacitor geometries have implemented the same
capacitance in less chip area, the fault rate per bit has sig-
niﬁcantly decreased [16]. Even though these technology
changes were not made with the primary intent of reduc-
ing the error rate, they cause DRAMs to be much more
reliable than a decade ago. It appears that one will have to
wait for several months on a desktop machine for an error.
DRAMs are most susceptible when the data is being
transferred in and out of the cells. An attack program
would do well to (miss the cache and) frequently access
the DRAM chips.
In the near future, we may expect errors not just from
cosmic rays but from the extremely high clock speeds
used on memory busses [15]. The faults will not occur
in the bits while they are sitting in memory, but on the
way to and from the memory.
Our attack will work regardless of the source of the
error. Once we fetch a bad value into a local variable
(typically implemented as a register in the processor), it
doesn’t matter whether the value became bad on to way
from the processor to the cache, on the way from the
cache to the memory, while sitting in main memory, on
the way main memory to cache, or from cache to pro-
cessor. All that we need is a local Java pointer variable
containing slightly bad data.
Given the rarity of memory errors, an attack based on
naturally occurring errors would have to attack many ma-
chines at once, hoping to catch a cosmic ray in one of
them. This could be done by hiding the attack in an ap-
plication program that is loaded on many machines. Be-
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
cause the attack requires very large amounts of memory
to operate efﬁciently, the application in which it’s hidden
would itself have to be a memory hog. Fortunately for the
attacker, few users are surprised these days when appli-
cations use hundreds of megabytes to accomplish trivial
tasks.
Attacks on Static RAM
New generations of SRAMs are increasingly suscepti-
ble to memory errors [17]. SRAM error rates are orders
of magnitude higher than DRAM error rates [6]. SRAMs
are used for cache memory, often on the processor chip
itself. Error detection is essential.
Our exploit should work against the data cache, al-
though we have not measured it. In this case, we still need
to allocate tens or hundreds of megabytes rather than just
the cache size. The program address space should be large
so that a ﬂip in the maximum number of bits in each word
can be used.
7 Physical fault injection
If the attacker has physical access to the outside of the
machine, as in the case of a smart card or other tamper-
resistant computer, the attacker can induce memory er-
rors. We considered attacks on boxes in form factors rang-
ing from a credit card to a palmtop to a desktop PC.
We considered several ways in which the attacker
could induce errors.4
Alpha particles are helium nuclei that are typically
formed as a byproduct of radioactive decay of heavy
elements. Obtaining an alpha-particle source from
a scientiﬁc supply house might not be too difﬁcult,
or one could obtain a weak source by taking apart a
smoke detector. However, alpha particles don’t pen-
etrate even a millimeter of plastic very well; histor-
ically, when alpha particles have been a signiﬁcant
source of memory errors it has been when radioac-
tive sources have contaminated the chip packaging
material itself. Alpha particles might be used to at-
tack a computer in the form factor of a credit card,
but anything thicker should be resistant.
Beta rays are high-energy electrons. They interact suf-
ﬁciently strongly with plastic and metal packaging
material that beta rays resulting from decay of ra-
dioactive nuclei would not be useful to an attacker.
4We gratefully acknowledge a useful discussion with Dr. Eugene
Normand [12] that helped rule out several classes of attacks.
X-rays or other high-energy photons might penetrate the
packaging material, but interact weakly with DRAM
circuitry – they simply don’t have enough energy
per particle. A dentist’s X-ray or an airport baggage
scanner would be very unlikely to induce memory
errors. A “hard” (very high energy) X-ray source
might possibly do the job.
High-energy protons and neutrons, such as those pro-
duced by large particle accelerators, are similar to
those cosmic rays that penetrate the atmosphere, and
interact similarly with DRAM chips. Such accelera-
tors are often used to test the resistance of electronic
components to cosmic radiation, especially compo-
nents to be used on aircraft and spacecraft. Few
attackers — indeed, few nation-states — have ac-
cess to such accelerators. However, an Americium-
Beryllium source (such as is used in oil explo-
ration) produces neutrons that could very likely in-
duce memory errors [13]. Access to such sources is
regulated; an attacker could gain access by purchas-
ing a small oil-drilling company, or by becoming em-
ployed at such a company.
Infrared radiation produces heat, and it is well known
that electronic components become unreliable at
high temperatures.
Since we lacked the time or inclination to learn the oil-
drilling trade, we decided to use heat. We induced mem-
ory errors in a desktop PC by opening the box and shining
light on the memory chips. We used a clip-on lamp with
a ﬂexible gooseneck, equipped with a 50-watt spotlight
bulb.
At ﬁrst we varied the heat input by varying the distance
of the bulb from the chips. At about 100 degrees Celsius,
the memory chips start generating faults. We were able to
control the temperature so that errors were introduced in
at most ten words, with errors in about 10 bits per word.
As we were ﬁne-tuning this experiment, we found that
introducing large numbers of memory errors would of-
ten cause the operating system not only to crash, but to
corrupt the disk-resident software so that reboot was im-
possible without reinstallation of the operating system. To
solve this problem, we arranged to boot Linux from a CD-
ROM, without relying on the magnetic disk at all. The
attacker would not have this luxury, of course; he would
have to ﬂip just a few bits the very ﬁrst time.
For a successful exploit we wanted ﬁner control over
the temperature, so we controlled the lamp wattage with
a variable AC power supply, and put the spotlight about
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
memory chips by exercising them; the CMOS latch and
datapath sections of the memory consume power mostly
when changing state.
8 Countermeasures
Parity checking to detect single-bit memory errors, and
more sophisticated error-correcting codes (ECC) to cor-
rect single-bit errors and detect multiple-bit errors, have
been known and deployed for decades. The cost is small:
to implement detection of 1-bit and 2-bit errors, it is suf-
ﬁcient to use 72 bits to represent every 64-bit word of
memory, a memory overhead of 12.5%.
However, many or most mainstream desktop personal
computers are sold without memory error detection hard-
ware. One possible explanation is the price competition
and low proﬁt margins in the commodity PC business. If
memory chips account for a quarter of the cost of a PC,
and error detection adds a 12.5% overhead to the cost of
the memory, then error detection adds a 3% overhead to
the cost of the entire box; this is likely to be larger than
the proﬁt margin of the PC assembler/reseller.
Static RAM (SRAM) used in cache memory can also
be a source of memory errors. Fortunately, in a typical
desktop PC the cache may be on the processor chip, where
there is no means or incentive for the assembler/reseller to
omit ECC. Unfortunately, not all processors include ECC
in cache datapath.
A fairly effective and obvious defense against our at-
tack is to use a PC with ECC memory. However, a typical
ECC design is meant to protect against naturally occur-
ring faults, not against a coordinated attack. Therefore,
there are additional considerations.
Multiple-bit errors. ECC memory can detect all 1-bit
and 2-bit errors. The probability that a bit ﬂips in the
memory should be extremely small. Otherwise, we may
have bit ﬂips in the control space of the applet, and hence
the applet may crash. For the adversary to successfully
take over the virtual machine, the adversary should create
a multiple bit error without creating 1-bit and 2-bit errors.
If single-bit errors are rare and uniformly randomly dis-
tributed, then the likelihood of a 3-bit error without ECC
detecting any 2-bit or 1-bit errors is vanishingly small.
However, ECC itself cannot provide a complete defense.
Total datapath coverage. Our attack works regardless
of where on the datapath the error occurs. If there is a
bus between processor and memory that is not covered
Figure 3. Experimental setup to induce
memory errors, showing a PC built from sur-
plus components, clip-on gooseneck lamp,
50-watt spotlight bulb, and digital
ther-
mometer. Not shown is the variable AC
power supply for the lamp.
2 centimeters from the memory chips. We found a grad-
ual rise in temperature in the region of 80–100Æ Celsius
would cause isolated, random, intermittent soft failures
in the memory. As section 5 explains, we expected that if
we can induce isolated errors, the probability of a success-
ful attack on the IBM JVM before the machine crashes is
71.4%.
This heat attack was successful against both the IBM
and Sun JVMs. It takes about one minute to heat the mem-
ory in a successful exploit. In about 15 trials against the
IBM JVM the proportion of successful attempts was ap-