is the number of FI campaigns that result in SDCs among all
the FI campaigns. Ntotal is the total number of FI campaigns.
Equation 1 can be expanded to the equivalent equations shown
in Equation 2. Pi
is the SDC probability of each (static)
instruction that is chosen for FI, Ni is the amount of times
that the static instruction is chosen for injection over all FI
campaigns. i to n indicates all the distinct static instructions
that are chosen for injection.
n(cid:88)
= (
i=1
Poverall = NSDC/Ntotal
Pi ∗ Ni)/Ntotal =
Pi ∗ (Ni/Ntotal)
n(cid:88)
i=1
(1)
(2)
In Equation 2, we can see that Ni/Ntotal and Pi are the
two relevant factors in the calculation of the overall SDC
probability of the program. Ni/Ntotal can be interpreted as the
probability of the static instruction being sampled during the
program execution. Because the faults are uniformly sampled
during the program execution, Ni/Ntotal is statistically equiv-
alent to the ratio between the number of dynamic executions of
the chosen static instruction, and the total number of dynamic
instructions in the program execution. We call this ratio the
dynamic execution footprint of the static instruction. The larger
the dynamic execution footprint of a static instruction, the
higher the chance that it is chosen for FI.
Therefore, we identify two kinds of volatilities that affect
the variation of Poverall when program inputs are changed
from Equation 2: (1) INSTRUCTION-SDC-VOLATILITY, and
(2) INSTRUCTION-EXECUTION-VOLATILITY. INSTRUCTION-
SDC-VOLATILITY represents the variation of Pi across
the program inputs, INSTRUCTION-EXECUTION-VOLATILITY
is equal
to the variation of dynamic execution footprints,
Ni/Ntotal, across the program inputs. We also deﬁne the
variation of Poverall as OVERALL-SDC-VOLATILITY. As ex-
plained above, INSTRUCTION-EXECUTION-VOLATILITY can
be calculated by proﬁling the number of dynamic instruc-
tions when inputs are changed, which is straight-forward to
derive. However, INSTRUCTION-SDC-VOLATILITY is difﬁ-
cult to identify as Pi requires a large number of FI cam-
paigns on every such instruction i with different
inputs,
which becomes impractical when the program size and the
number of inputs become large. As mentioned earlier, prior
work investigating OVERALL-SDC-VOLATILITY considers
only the INSTRUCTION-EXECUTION-VOLATILITY, and ig-
nores INSTRUCTION-SDC-VOLATILITY [7], [10]. However,
as we show in the next section, this can lead to signiﬁcant
inaccuracy in the estimates. Therefore, we focus on deriving
INSTRUCTION-SDC-VOLATILITY efﬁciently in this paper.
IV.
INITIAL FI STUDY
In this
section, we design experiments
to show
how INSTRUCTION-SDC-VOLATILITY and INSTRUCTION-
EXECUTION-VOLATILITY contribute to OVERALL-SDC-
VOLATILITY, then explain the variation of INSTRUCTION-
SDC-VOLATILITY across programs.
TABLE I: Characteristics of Benchmarks
Benchmark
Suite/Author
Description
Molecular dynamics al-
gorithms and workloads
17136.62
trans-
2D fast Fourier
form
Graph traversal in opera-
tional research
6.37
0.15
A. Experiment Setup
1) Benchmarks: We choose nine applications in total for
our experiments. These are drawn from standard benchmark
Total
Dynamic
Instructions
(Millions)
6238.55
564.63
6.71
3907.70
3382.79
11324.17
nonlinear
global
method
sequence
Simulation of quantum
computing
A
optimization
for
DNA
alignments
Use dynamic program-
ming to ﬁnd a path on a
2-D grid
Dense Linear Algebra
Science and engineering
problems that use mod-
eling hydrodynamics
Measurement of HPC
performance impacts
Libquantum
SPEC
Nw
Rodinia
Pathﬁnder
Rodinia
Streamcluster Rodinia
Lulesh
Lawrence
Livermore National
Laboratory
Lawrence
Livermore National
Laboratory
Lawrence
Livermore National
Laboratory
Open Source
Open Source
Clomp
CoMD
FFT
Graph
suites, as well as from real world applications. Note that there
are very few inputs provided with the benchmark applications,
and hence we had to generate them ourselves. We search
the entire benchmark suites of Rodinia [3], SPLASH-2 [32],
PARSEC [2] and SPEC [16], and choose applications based
on two criteria: (1) Compatibility with our toolset (i.e., we
could compile them to LLVM IR and work with LLFI), and
(2) Ability to generate diverse inputs for our experiments. For
the latter criteria, we choose applications that take numeric
values as their program inputs, rather than binary ﬁles or ﬁles
of unknown formats, since we cannot easily generate different
inputs in these applications. As a result, there are only three
applications in Rodinia and one application in SPEC meeting
the criteria. To include more benchmarks, we pick three HPC
applications (Lulesh, Clomp, and CoMD) from Lawrence Liv-
ermore National Laboratory [17], and two open-source projects
(FFT [19] and Graph [18]) from online repositories. The nine
benchmarks span a wide range of application domains from
simulation to measurement, and are listed in Table I.
2) Input Generation: Since all the benchmarks we choose
take numerical values as their inputs, we randomly generate
numbers for their inputs. The inputs generated are chosen
based on two criteria: (1) The input should not lead to any
reported errors or exceptions that halt the execution of the
program, as such inputs may not be representative of the
application’s behavior in production, And (2) The number of
dynamic executed instructions for the inputs should not exceed
50 billion to keep our experimental time reasonable. We report
the total number of dynamic instructions generated from the
10 inputs of each benchmark in Table I. The average number
of dynamic instructions per input is 472.95 million, which is
signiﬁcantly larger than what have been used in most other
prior work [9], [21], [24], [33], [34]. We consider large inputs
to stress VTRIDENT and evaluate its scalability.
3) FI methodology: As mentioned before, we use
LLFI [31] to perform the FI experiments. For each application,
we inject 100 random faults for each static instruction of the
application – this yields error bars ranging from 0.03% to
0.55% depending on the application for the 95% conﬁdence
intervals. Because we need to derive SDC probabilities of
every static instruction, we have to perform multiple FIs on
every static instruction in each benchmark. Therefore, to bal-
ance the experimental time with accuracy, we choose to inject
100 faults on each static instruction. This adds up to a total
number of injections ranging from 26,000 to 2,251,800 in each
benchmark, depending on the number of static instructions in
the program.
B. Results
and
III,
We
relationship
in Section
OVERALL-SDC-VOLATILITY.
1) INSTRUCTION-EXECUTION-VOLATILITY
ﬁrst
and
OVERALL-SDC-VOLATILITY:
investigate
INSTRUCTION-EXECUTION-
the
between
As
VOLATILITY
mentioned
INSTRUCTION-EXECUTION-
VOLATILITY is straight-forward to derive based on the
execution proﬁle alone, and does not require performing any
FIs. If it
is indeed possible to estimate OVERALL-SDC-
VOLATILITY on the basis of INSTRUCTION-EXECUTION-
VOLATILITY alone, we can directly plug in INSTRUCTION-
EXECUTION-VOLATILITY to Ni and Ntotal
in Equation 2
when different inputs are used and treat Pi as a constant
(derived based on a single input) to calculate the overall SDC
probabilities of the program with the inputs.
We proﬁled INSTRUCTION-EXECUTION-VOLATILITY in
each benchmark and use it
to calculate the overall SDC
probabilities of each benchmark across all its inputs. To show
OVERALL-SDC-VOLATILITY, we calculate the differences
between the highest and the lowest overall SDC probabili-
ties of each benchmark, and plot them in Figure 1. In the
ﬁgure, Exec. Vol. represents the calculation with the vari-
ation of INSTRUCTION-EXECUTION-VOLATILITY alone in
Equation 2, treating Pi as a constant, which are derived by
performing FI on only one input. FI indicates the results
derived from FI experiment with the set of all inputs of each
benchmark. As can be observed, the results for individual
benchmark with OVERALL-SDC-VOLATILITY estimated from
Exec. Vol. alone are signiﬁcantly lower than the FI results (up
to 24x in Pathﬁnder). The average difference is 7.65x. This
shows that INSTRUCTION-EXECUTION-VOLATILITY alone is
not sufﬁcient to capture OVERALL-SDC-VOLATILITY, mo-
tivating the need for accurate estimation of INSTRUCTION-
SDC-VOLATILITY. This is the focus of our work.
1: OVERALL-SDC-VOLATILITY
by
Fig.
INSTRUCTION-EXECUTION-VOLATILITY Alone
(Y-axis:
OVERALL-SDC-VOLATILITY, Error Bar: 0.03% to 0.55% at
95% Conﬁdence)
Calculated
to
Leading
2) Code Patterns
INSTRUCTION-SDC-
VOLATILITY: To ﬁgure out the root causes of INSTRUCTION-
SDC-VOLATILITY, we analyze the FI results and their error
propagation based on the methodology proposed in our prior
work [11]. We identify three cases leading to INSTRUCTION-
SDC-VOLATILITY.
Case 1: Value Ranges of Operands of Instructions
Different program inputs change the values that individual
instructions operate with. For example, in Figure 2a, there
are three instructions (LOAD, CMP and BR) on a straight-
line code sequence. Assume that under some INPUT A, R1
is 16 and R0 is 512, leading the result of the CMP (R3) to
be FALSE. Since the highest bit of 512 is the 9th bit, any
bit-ﬂip at the bit positions that are higher than 9 in R1 will
modify R1 to a value that is greater than R0. This may in turn
cause the result of the CMP instruction (R3) to be TRUE. In
this case, the probability for the fault that occurred at R1 of
the LOAD instruction to propagate to R3 is (32-9)/32=71.88%
(assuming a 32-bit data width of R1). In another INPUT B,
assume R1 is still 16, but R0 becomes 64 of which the highest
bit is the 6th bit. In this case, the probability for the same
fault to propagate to R3 becomes (32-6)/32=81.25%. In this
example, the propagation probability increases by almost 10%
for the same fault for a different input. In other words, the
SDC volatility of the LOAD instruction in the example is
changed by about 10%. We ﬁnd that in the nine benchmarks,
the proportion of instructions that fall into this pattern varies
from 3.07% (FFT) to 15.23% (Nw) - the average is 6.98%.
The instructions exhibit different error propagation even if the
control ﬂow does not change.
B (8-2=6). If the SDC probability of the STORE instruction
stays the same with the two inputs, INPUT B triples (6/2=3)
the probability for the fault to propagate through the missing
STORE instruction, causing the SDC volatility. In the nine
benchmarks, we ﬁnd that 90.21% of the loops execute different
numbers of iterations when the input is changed.