把选中session的简要说明复制到剪贴板中。简要说明中包括请求方法、URL、响应
Terse summary
的状态码以及状态信息。如果响应是HTTP/3xX重定向，文本中也会包括响应头中
Location字段的内容。当光标位于WebSession列表时，按下CTRL+SHIFT+T键也会
执行该命令
把Session的请求头复制到剪贴板中。成可以以纯文本格式，也可以以HTML格式复制，
Headers only
所以，在仅处理纯文本（如notepad）的编辑器和支持富文本（如Word）的编辑器中，
复制结果会不同。由于这是“默认”命令，双击子菜单Copy命令会复制请求头。如果
光标定位在WebSession列表中，按下CTRL+SHIFT+C键也会执行该命令
把整个Session列表复制到剪贴板。支持以纯文本和HTML这两种格式进行复制，所
Session
以当粘贴到只支持纯文本的编辑器和支持富文本的编辑器中时，显示结果会有差别。
当光标定位在WebSession列表时，还可以按下CTRL+SHIFT+S键来执行该命令
把Web Session列表中显示的信息复制到剪贴板。各个列通过tab分隔，这便于你把
Full Summary
信息粘贴到Excel或其他编辑器中、当光标定位在WebSession列表时，按下CTRL+C
键会执行该命令
Save子菜单中包含了用于把流量保存到文件中的一些选项，如表2-5所示。
16
---
## Page 17
2.2FIDDLER用户界面
表2-5
Save菜单项
All Sessions
把Web Session列表中的所有session都复制到 SAZ文件中
.and Open
把选中Session的response bodies分别保存到独立的文件中，然后根据响应的文件类型找到对
应的handler来打开文件。如果操作该选项时按住CTRL键，Windows会提示你使用哪个
as Local File
应用来打开该文件
In ArchiveZip
把Web Session列表中选中的 Session保存到SAZ文件中
Selected
把选中的所有Session一起保存到一个文本文件中
Sessions
As Text (Headers only)
把选中Session的请求头和响应头一起保存到一个文本文件中
Entire Request
把选中Session的请求头和请求体分别保存到独立的文件中
Request
Request Body
把选中的Session的请求体保存到独立的文件中
把选中Session的响应头和响应体保存到独立的文件中
Entire Response
如果需要创建的响应文件后续可以通过AutoRe-sponder进行重
Response
放，可以启用该选项
把选中session的请求体保存到独立的文件中。如果你希望在另
Response Body
一个程序单独打开响应体（如图像），面不受其HTTP响应头干
扰，可以启用该选项
Remove有三个子菜单可以用于从WebSession列表中删除全部、选中的或未选中的
Sessions。当光标定位在WebSession列表时，按下CTRL+X、Delete或Shift+Delete键可以
分别激活这几个命令。
Comment...菜单命令支持为一个或多个选中的WebSession增加或修改注释。
Mark子菜单支持选择一种颜色来标记WebSession列表中的Session。Session的字体会根据
选项相应加粗和着色。Unmark选项会取消对选中的Session进行加粗，并把颜色恢复为默认颜色
Replay子菜单提供命令支持播放当前选中的请求，如表2-6所示。
表2-6
把选中的请求以原来的形式重新发送。如果执行该命令时也按下了Shift键，Fiddler会
Reissue
弹出一个对话框，可以输入希望执行的次数。把光标置于WebScssion列表中并按下R
Requests
键就会执行该命令
17
---
## Page 18
第2章探索Fiddler
续表
如果需要无条件地反复发送选中的请求，增加请求头If-Modified-Since和If-None-Match
Reissue
可以告诉服务端不要返回HTTP/304响应。如果在调用该命令时也按下SHIFT键，Fidler
Unconditionally
会弹出对话框，提示输入希望该请求被执行的次数。把光标定位到WebSession列表中
并按下U键也会执行该命令
把选中的请求以原来的形式重新发送，在每个新的Session中设置请求断点，在请求被
Rcissue and Edit
发送到服务器之前，使用Fiddler的Inspcctor修改请求
在IE中把每个选中的请求导航到请求URL，注意IE在导航时总是使用GET方法，而
Revisit in IE
且使用自己的header和 cookie，不管 session中提供的是什么HTTP方法和请求头
Select子菜单支持使用当前选中的Session来选择其他Session，如表2-7所示。
表2-7
Select子菜单
ParentReques选项会尝试使用请求的Referer头和请求ID米查找当前请求的来源
Parent Request
Session。举个例子，假设你通过JavaScript执行该命令，选中的Session通常会是下载
该JavaSeript文件的HTML页面。当光标定位在WebSession列表时，按下P键可以执
行该命令
ChildRequests选项会使用该请求的URL和请求ID来查找请求。例如，如果你在HTML
Child Requests
Session中执行该命令，通过该选项选中的Session通常是HTML标记中的CSS、JS和
图像文件的访问请求。当光标定位在WebSession列表时，按下C键也会执行该命令
Duplicate
选中Web Session列表中和当前Session的URL和HTTP方法相同的所有Session
Requests
Compare命令只有当WebSession列表中仅选中两个Session时才可用。当选中该命令，
会把选中的这两个Session保存到临时文件中，然后启动配置好的比较工具，从面比较请求和
响应。
COMETPeek命令会保留正在执行的响应的“快照”，在响应完成前就可以查看部分内容。
当Web应用采用COMET模式以流式向客户端返回数据时，可以使用该命令。由于“流式
的含义就是永不结束，只有当服务端停止连接后，Fiddler才会返回响应。
18
---
## Page 19
2.3FIDDLER主莱单
AbortSession命令会终止正在执行的请求，中断客户端和服务器之间的连接。
CloneResponse命令只有当WebSession列表中选中两个Session，并且其中一个Session
在断点处中止，而另一个Session已经运行完时才可用。该命令会把已经完成的Session的响
应拷贝给暂停运行的Session。借助这个功能可以复制之前捕捉到的（或修改的）响应并返回
给后续的请求。
UnlockforEditing菜单命令会释放某个选中的Session，支持通过Inspector编辑已经执
行完的Session的请求和响应。当光标定位在WebSession列表，可按下F2键来执行该命令。
InspectinNewWindow命令会打开一个SessionInspector窗口，从而使你在独立窗口中查
看Session的请求、响应和属性。
Properties...命令会打开Session属性窗口，显示当前选中的Session的信息，包括计时器、
Session标志位以及请求如何被转发的等信息。
2.3FIDDLER主菜单
主菜单被设计为可以启动几乎所有的Fiddler功能。菜单系统可以通过FiddlerScript或
Extensions进行扩展和增强，本节将要探讨Fiddler本身默认的菜单命令。
2.3.1File菜单
File（文件夹）菜单中的命令主要支持完成通过Fiddler来启动和停止Web流量的捕获
（capture），也可以加载或存储捕获的流量。
CaptureTrafic是个开关，可以控制是否把Fiddler注册为系统代理。当把Fiddler注册为
系统代理时，所有依赖于WinINET代理的应用（如IE浏览器和很多其他浏览器）会把Web
请求发送给Fiddler.Firefox的FiddlerHook附加组件也可以识别该菜单选项。即使Fiddler没
有被注册为系统代理，Fiddler仍然可以显示和处理其接收到的任何请求。
LoadArchive用于重新加载之前捕获的以SAZ文件格式保存的流量。
Save子菜单中的选项支持以多种方式把流量保存到文件中：该菜单选项和WebSession
列表中的上下文菜单中的选项相同。
ImportSessions...支持导入从其他工具捕获的流量，也支持导入以其他格式存储的流量。
61
---
## Page 20
第2章探索Fiddler
ExportSessions菜单支持把Fiddler捕捉到的Session以多种文件格式保存。在其子菜单中
可以选择All Sessions...或SelectedSessions..
Exit菜单命令会取消把Fiddler注册为系统代理，并关闭工具栏。
2.3.2Edit菜单
Edit菜单中的绝大多数命令都需要作用于WebSession中当前选中的Session，因此除非
选中一个或多个Session，否则大多数命令都不可用。
Copy下面的儿个子菜单分别支持复制选中Session的某些信息。该菜单中的命令和
Session列表的右键菜单中的命令相同。
Remove下面的子菜单分别支持从WebSession列表中删除全部、选中的或未选中的Session。
当光标在Session列表中时，CTRL+X、Delete或Shif+Delete键组合可以分别激活这儿个命令。
SelectAll命令选中Sessions列表的所有内容。光标置于Session列表中，并按下CTRL+A
键也可以激活该命令。
PasteFiles asSessions命令会基于剪贴板上的内容，生成一个或多个模拟的WebSession。
如果剪贴板包含文本串，而且在前64个字符中含有DataURI，可以通过标识解析出该
DataURI，创建新的Session并添加到WebSession列表中。当你通过Fiddler检查包含DataURI
编码的图像的标识，并且想要看看图片看起来如何时，该功能很有用。只需要从标识中拷页
DataURI，使用Paste FilesasSessions命令生成新的Session，然后再在ImageView中查看该
Session即可。
如果剪贴板中包含的是一张二进制的图片（比如，使用屏幕截图热键Alh+PrintScm截取的激
活窗口的一个截图），将会根据这张图片创建一个虚拟的Session，并将其添加到Session列表中。
如果剪贴板包含一个或多个文件（比如是在WindowsExplorer中复制的），每个文件可以
触发生成一个虚拟的Session并添加到WebSession列表中。当你想要创建一个准备发送给别
人的SAZ文件，并且想要添加一个没有在网络中实际传输过的文件时，就可以使用该功能。
举个例子，利用Fiddler捕获了一个ASPX页面的内容后，Web开发人员可以借助这个功能将
页面的源代码以一个虚拟Session的形式添加到Session列表中，并一起以SAZ的格式导出。
Mark子菜单支持选择一种颜色来标记WebSession列表中选中的Session.Session的字体
是租体的，并根据你选中的颜色进行着色。Unmark选项会取消选中租体，并重新设置成默认
20
---
## Page 21
2.3FIDDLER主菜单
的字体颜色
UnlockforEditing菜单命令会对某个选中的WebSession解锁，支持使用Inspectors编辑
Session的所有请求和响应，你可以把光标定位在WebSession列表中，并按下F2键来激活命令。
FindSessions...命令会打开FindSession窗口，搜索捕获到的数据流。你可以按下CTRL+F
键来激活该命令。
2.3.3Rules菜单
Rules菜单很容易扩展，其中的大多数命令是通过FiddlerScript文件生成的。
HideImageRequests触发器控制是否在WebSession列表中显示图像类Session。
HideCONNECTs触发器控制是否在WebSession列表中显示使用CONNECT请求方法的
Session.客户端通过CONNECT方法构建到服务器的“原始”连接，发送HTTPS或WebSocket
流量请求。
AutomaticBreakpoints子菜单控制Fiddler是否会自动在BeforeRequests或AfterResponses
处断点。IgnoreImage触发器控制这些断点是否作用于图片请求。
CustomizeRules...菜单命令会使用配置的脚本编辑器打开当前的FiddlerScript文件。
如果选中RequireProxyAuthentication菜单项，所有未提交Proxy-Authorization请求头的
请求会返回HTTP/407响应，要求客户端安装证书。该规则可以用于测试HTTP客户端，确
保这些规则在有证书的客户端服务器上可以正常工作。
如果选中ApplyGZIPEncoding菜单项，只要请求包含具有gzip标识的Accept-Encoding
请求头，就会对除了图片以外的所有响应使用GZIPHTTP进行压缩。该规则用于测试使用
GZIP选项支持的客户端是否真正对内容进行压缩。该选项还支持性能调优，并且计算传输的
压缩后的数据流的字节数。
如果选中RemoveAllEncodings，会删除所有请求和响应的HTTP内容编码和传输编码。
该功能也可以通过Fiddler工具栏中的Decode按钮来调用。
该菜单中的其他命令都是用FiddlerScript实现的，因此菜单中的命令和默认的
FiddlerScript命令不同。你可以通过点击Rules菜单中的CustomizeRules...选项来查看这些命
令的实现（并添加自己的实现）。
Hide304s选项会隐藏包含HTTP/304NotModified状态的响应的所有Session
21
---
## Page 22
第2章探索Fiddler
RequestJapaneseContent选项会把所有请求的Accept-Encoding请求头设置或替换成ja标
识，表示客户端希望响应以日语形式发送。
User-Agents子菜单支持把所有请求的User-Agent请求头设置或替换成指定值。你可以在
提供的值中进行选择，也可以使用菜单底部的Custom...选项指定想要的选项值。
Performance子菜单
Performance子菜单提供影响Web性能的简单选项。
如果选中SimulateModemSpeeds选项，它会设置所有后续Session的Flag。把request-
trickle-delay标志位设置成300，所有上传数据将延迟300毫秒/KB.同理，如果把response-trickle-delay
标志位设置成150，会使所有下载数据延迟150毫秒/KB。
如果选中DisableCaching选项，会删除所有If-None-Match和If-Modified-Since请求头，并
添加Pragma：no-cache请求头。选中该选项还会删除响应中的所有Expires头，并把Cache-Control
响应头设置成no-cache。该选项无法阻止浏览器重用在选用该选项之前所缓存的响应。在选中该
选项后，为了得到最佳结果，最好清空浏览器中的缓存（CTRL+SHIFT+DELETE）。
ShowTime-to-Last-Byte会在WebSession列表的Custom列中显示Fiddler接收到所有响
应所花费的时间，以微秒表示。
同样，ShowResponseTimestamp选项会在WebSession列表中Custom列显示，Fiddler
接收到服务器的所有响应的时间截。
CacheAlwaysFresh选项会自动响应所有包含HTTP/304响应的有条件HTTP请求，表示
客户端缓存是最新的。当访问的站点无法正确地设置缓存失效日期时，该选项可以极大地提
高性能。尽管有该选项，但在浏览器中按下CTRL+F5键仍可以保证重新从服务器加载数据，
因为浏览器会对要求强制更新的请求忽略If-Modified-Since和If-None-Match头。
2.3.4Tools菜单
WinINET Options...打开 IE的Intermet Options窗口。
ClearWinINETCache选项会清空IE和很多其他应用中所使用的WinINET缓存中的所有文件。
ClearWinINETCookies选项会清空IE和很多其他应用所发送的WinINETcookie。Session
的Cookies还是保持不变。
22
---
## Page 23
2.3FIDDLER主菜单