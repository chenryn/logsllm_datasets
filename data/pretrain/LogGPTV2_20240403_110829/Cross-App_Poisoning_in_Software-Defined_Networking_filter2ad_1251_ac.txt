read from or write to all objects.
Consider the example cross-app information flow graph in Fig-
ure 2. Continuing the example from Section 1, suppose that app a1
is a host-tracking app that has been compromised by an adversary;
o1 is the host store; a2 is a routing app that has not been compro-
mised; and o2 is the flow entry store. The adversary does not have
the ability to directly modify object o2, because the app does not
have permission to do so; if it did, an edge would exist from a1 to
o2. However, the adversary can poison object o1, since it is allowed
to do so (i.e., by permission p1). Later, the routing app a2, which
has permissions that the adversary seeks (i.e., any edge into o2),
reads from o1 and uses information from o1 to write to o2.
4.4 Cross-App Poisoning Gadgets
Our methodology in Sections 4.1–4.3 conservatively captures how
apps could influence data flowing through the shared control plane
state, subject to a specified RBAC policy. Put simply, what are the
apps allowed to influence if they can read and write to such shared
state? However, such influences, represented as cross-app attack
vectors, may not always exist in practice, since an app’s source of
data from the shared control plane state may not always causally
influence what the app later writes to the control plane.
To account for that, we use static analysis techniques to identify
relevant data flows present in apps that read from a permissioned
data source and write to a permissioned data sink. We call such
data flows cross-app poisoning gadgets, as one or more gadgets can
be used to build sophisticated CAP attacks. CAP gadgets require
a triggering app to start the chain reaction. We explain our spe-
cific methodology and implement proof-of-concept attacks for the
Security-Mode ONOS SDN controller in Section 5.
5 CROSS-APP POISONING CASE STUDY:
SECURITY-MODE ONOS
To show how prevalent CAP attacks are in practice, we study the
Security-Mode ONOS SDN controller [61, 89]. We chose the ONOS
framework because it is a representative example of a popular,
production-quality controller used in industry by telecommunica-
tion service providers [62], among others. The ONOS framework
is Java-based with publicly available source code4 bundled with
4Throughout the paper, we use the ONOS v1.10.0 source code available at [60].
5
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
B. Ujcich et al.
open-sourced apps. Security-Mode ONOS is a variant of the ONOS
SDN controller with additional support for RBAC.
5.1 CAP Model for Security-Mode ONOS
5.1.1 Apps. The v1.10.0 release includes 64 bundled reference
apps [59] as part of the ONOS codebase. Each app is an OSGi bundle
that can be loaded into or removed from the controller at runtime
as an internal app. Example apps include a reactive forwarding app
(fwd), a routing app (routing), and a DHCP server (dhcp).
5.1.2 Permissions. By default, ONOS runs without any RBAC
policies or enforcement; this makes execution of CAP attacks trivial,
because nothing prevents an app from influencing any object in
the shared control plane state. Instead, for the remainder of this
paper, we evaluate Security-Mode ONOS, because it allows app
developers to specify which permissions their apps need, and se-
curity practitioners can write RBAC policies that specify which
roles apps have and what permissions each role has. Security-Mode
ONOS includes 56 permissions named with *_READ, *_WRITE, and
*_EVENT suffixes. We incorporate *_READ permissions into PR and
*_WRITE permissions into PW . *_EVENT permissions register and
de-register apps from event handlers, so we treat these permissions
as equivalent to both read and write permissions.
5.1.3 Objects. ONOS follows the pattern of providing a “service
class” (e.g., FlowRuleService) that serves as an API for apps. Each
service class has a respective “manager class” (e.g., FlowRuleMan-
ager) that implements the service class. When the manager class is
instantiated, it instantiates a respective “store class” (e.g., FlowRule-
Store) that stores the actual shared control plane state. That state is
composed of “data class” instantiations (e.g., objects of the classes
FlowRule and FlowEntry). Each store is protected by limiting access
via the manager class’s methods (e.g., getFlowEntries()), and, when
apps call such methods, Security-Mode ONOS performs permission
checks (e.g., “Does the app have the FLOWRULE_READ permission
according to the RBAC policy?”). ONOS also includes manager
classes for the southbound API (e.g., OpenFlowPacketContext).
We let each manager class represent an object in our model,
given that a manager class encapsulates the methods and stores
that represent access to and storage of the shared control plane
state, respectively. As Security-Mode ONOS specifies permissions
at the method level of granularity rather than at the “data class”
level of granularity, we map these methods back to the manager
classes when building the RBAC policy in the next section. For
instance, an app that calls the getFlowEntries() method would need
the FLOWRULE_READ permission, so our model would show an edge
labeled with that permission from the FlowRuleManager object to
the app in the cross-app information flow graph.
5.1.4 RBAC Policy. We assume that a practitioner sets up an
RBAC policy of least privilege such that each app has the minimum
set of permissions needed in order to carry out its functionality cor-
rectly. The 64 apps included with ONOS do not list the permissions
that they would need if they were run with Security-Mode ONOS.
We wrote a script that statically analyzed the ONOS codebase to
find in which methods Security-Mode ONOS checked permissions.
From there, we analyzed which apps used those methods in order
to map the permissions that each app would need.
Figure 3: Cross-App Information Flow Graph GO N OS using
the 64 apps included with ONOS. Large points represent
apps; small points represent objects in the shared SDN con-
trol plane state; and arrows represent permissions for apps
to read from or write to objects.
Figure 4: App to object accessibility (via shortest paths) in
GO N OS with 63 apps. Paths begin at a given app a.
Our result is a security reference policy for ONOS apps that
enforces least privilege using RBAC and is called RO N OS . We
found that Security-Mode ONOS permissions were enforced on
212 methods protected across 39 manager classes through the use
of 38 of the available 56 permissions. Each manager class may
implement more than one service class, so we included 67 service
classes. (See Table 3 in Appendix A.2 for additional details.)
5.1.5 Cross-App Information Flow Graph. Using the security
reference policy, we applied Algorithm 1 to generate the cross-app
information flow graph GO N OS for ONOS with all apps included.5
Figure 3 shows the complete GO N OS with 88 nodes6 and 564 edges.
To understand the connectivity of GO N OS , we looked at how many
objects each app could directly and indirectly access (Figure 4) and
how many apps each object could be accessed by, either directly
or indirectly (Figure 5).7 For both analyses, we removed an app
named test from consideration, since it is used for testing ONOS
functionality.
5We imagine that a practitioner would only load some subset of apps into the controller,
so apps that have not been loaded should be removed from GO N OS for analysis.
6Manager classes whose methods were not called by any app were not included in the
cross-app information flow graph; thus, |A| + |O | (cid:44) 88.
7A shortest path in G of length 3, for instance, corresponds to indirect accessibility
via 1 app in Figure 4 or 1 object in Figure 5.
6
flowanalyzerpimcord-supportmobilityfaultmanagementintentsyncsdnipsegmentroutingreactive-routingoptical-modelymscastorroadmkafka-integrationvtncipdhcprelaydhcpproxyarpbmv2-demoeventsroutingbgproutervirtualbngtetopologynetwork-troubleshoottetunnelofagentinfluxdbmetricsrouting-apiopenstacknetworkingmetricscpmanopticalyang-guilearning-switchopenstacknodescalablegatewaymfwddrivermatrixmlbmappingmanagementfwdconfiggraphitemetricsrabbitmqacll3vpnnewopticalyangvrouterpathpaintervplsgangliametricspceApp a05101520# objects accessible by aDirectlyVia 1 appVia 2 appsCross-App Poisoning in Software-Defined Networking
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
broken, faulty or malicious apps can cause systemic damage
through CAP attacks even if they have no permission to take
such actions themselves.
(2) Five gadgets use the FLOWRULE_WRITE sink permission. This
would be expected, since most flow rule operations in ONOS
are event-driven based on actions in the NB and SB APIs.
(3) Some objects are not affected by CAP attacks. We expect
objects that are not related to maintaining network state
(e.g., objects for gathering statistics) to be unaffected.
Figure 5: Object to app accessibility (via shortest paths) in
GO N OS with 63 apps. Paths begin at a given object o.
5.2 CAP Gadgets in Security-Mode ONOS
We further refine the results from Figures 4 and 5 by identifying a set
of CAP gadgets in ONOS apps. Fortunately, all of the apps bundled
with the ONOS codebase have publicly available source code that
can be analyzed; while this is not strictly required to identify CAP
gadgets, it simplifies the process. We used static analysis techniques
to identify data flows that can be used to build CAP gadgets to
instigate CAP attacks.
5.2.1 Methodology. We used JavaParser [82] to build an abstract
syntax tree (AST) representation of each of the 63 ONOS apps,
excluding the test app. Using the ASTs as inputs, we wrote a script
to determine data flows within apps’ methods from “sources” to
“sinks” of interest through field-sensitive interprocedural data flow
analysis. Such data flows represent an app’s use of one control plane
object to generate another control plane object. We defined sources
as API read calls to permission-protected methods (i.e., requiring
a permission in PR), and sinks as API write calls to permission-
protected methods (i.e., requiring a permission in PW ). We used
PR, PW , and the list of 212 permission-protected methods found
from our earlier analysis. We mapped the permission-protected
methods to their respective permissions so that each source or sink
is represented by a permission.
Although we used Java-specific tools to generate ASTs for ONOS
apps, other tools such as CAST [76] for C/C++ or ast [25] for Python
exist for controllers and apps in other languages.
5.2.2 Results. Table 1 shows the resulting cross-app poisoning
gadgets, represented as (source, app, sink ) tuples. One can chain
gadgets together to form complex cross-app information flows. At
a minimum, only one gadget is needed; any app that can write to a
single gadget’s source can launch a CAP attack. We summarize the
behavioral takeaways and their consequences below:
(1) Five gadgets use the APP_READ source permission. In in-
specting the apps’ code, we found that the apps use the
CoreService’s methods to look up the mapping between the
app’s name (e.g., org.onosproject.fwd) and a unique app
ID (e.g., id=70), and that the apps then subsequently use this
app ID to take other control plane actions (e.g., deleting all
flow rules with the app ID id=70). If such assumptions about
the trustworthiness of the app name and ID mapping are
5.3 Example Attack: Packet Modification and
Flow Rule Insertion for Data Plane DoS
We now consider a proof-of-concept CAP attack that leverages the
reactive forwarding app fwd to insert corrupted flow rules. We
performed the attack using Security-Mode ONOS enabled with
ONOS v1.10.0. (See Appendix A.1 for configuration details.)
5.3.1 Approach. We wrote a triggering app (trigger) to poison
the view of the reactive forwarding app (fwd) so as to cause data
plane denial-of-serivce (DoS). Our approach is similar to the attacks
proposed by Dhawan et al. [15] and Lee et al. [39] to poison the view
of the network, though we assume that malicious apps, rather than
malicious switches or end hosts, cause the poisoning. Our triggering
app minimally requires PACKET_* permissions and does not require
FLOWRULE_* permissions. (See Appendix B for additional details.)
The attack works as follows:
(1) The triggering app, to register itself with ONOS to receive
incoming packets, uses its PACKET_EVENT permission. Upon
receiving particular ARP requests, the app changes the ARP
and Ethernet source addresses to an attacker’s address.
(2) The forwarding app also registers for incoming packets. The
forwarding app reads the packet by using the PACKET_READ
permission to decide whether to generate flow rules.
(3) The forwarding app inserts the flow rule into the control
plane using its FLOWRULE_WRITE permission. As a result, the
flow rule becomes associated with the forwarding app be-
cause of fwd’s appId.
5.3.2 Results. The flow rule based on corrupted information
causes a data plane DoS attack from the victim’s perspective. Be-
cause the forwarding app inserted the flow rule, ONOS identifies
fwd as being responsible for the corresponding flow rule in its flow
rule database. Thus, a practitioner investigating the DoS outage
may incorrectly assign full blame to fwd, particularly since trigger
is not assumed to have the ability to insert flow rules.
5.4 Remarks
We were able to systematically detect CAP gadgets (as described in
Section 5.2) because the apps’ source code was available, but this
detection may not be an option with closed-source “black box” apps.
Thus, practitioners need further insight into how apps behave in
practice once they are activated within the SDN controller.
It is much easier to bypass RBAC permissions when apps are
reading from or writing to many of the same shared SDN control
plane state’s objects. What is needed is a way to track information
flow to capture how data are used after RBAC authorization is
granted. By making access control decisions based not only on
7
ApplicationManagerStorageManagerDefaultPacketContextHostManagerComponentConfigManagerEdgeManagerNetworkConfigManagerDriverManagerIntentManagerSimpleClusterStoreDefaultOpenFlowPacketContextUiExtensionManagerTopologyManagerCodecManagerMastershipManagerPacketManagerFlowObjectiveCompositionManagerProxyArpManagerFlowRuleManagerCoreManagerClusterManagerClusterCommunicationManagerDeviceManagerResourceManagerPathManagerDriverRegistryManagerFlowObjectiveManagerClusterMetadataManagerLinkManagerLogicalClockManagerNettyMessagingManagerGroupManagerObject o010203040# apps accessible by oDirectlyVia 1 objectVia 2 objectsCCS ’18, October 15–19, 2018, Toronto, ON, Canada
B. Ujcich et al.
Table 1: Static Analysis Results of CAP Gadgets for Security-Mode ONOS Apps.
Source (p ∈ PR)
APP_READ
APP_READ
App (a ∈ A)
openstacknetworking
openstacknode
Sink (p ∈ PW )
FLOWRULE_WRITE
CLUSTER_WRITE
APP_READ
APP_READ
APP_READ
DEVICE_READ
DEVICE_READ
DEVICE_READ
HOST_READ
PACKET_READ
PACKET_READ
openstacknode
routing
sdnip
newoptical
vtn
vtn
vtn
fwd
learning-switch
GROUP_WRITE
CONFIG_WRITE
CONFIG_WRITE
RESOURCE_WRITE