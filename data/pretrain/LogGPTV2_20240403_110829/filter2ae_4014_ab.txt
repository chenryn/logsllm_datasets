            int256 R = ((int256)(2) * one) +
                (z*(c2 + (z*(c4 + (z*(c6 + (z*c8/one))/one))/one))/one);
            exp = (uint256) (((R + a) * one) / (R - a));
            if (scale >= 0)
                exp >= -scale;
            return exp;
        }
        /*function destroy() external {
            selfdestruct(owner);
        }*/
        function () payable public {
            if (msg.value > 0)
                buy();
            else
                withdrawOld(msg.sender);
        }
    }
下面我们针对这个合约进行关键函数的分析。
对于代币合约，我们将从 **代币购买、股份奖励、利息提取** 等进行依次分析。
首先看合约变量：
    uint256 public totalSupply;
        // amount of shares for each address (scaled number)
        mapping(address => uint256) public balanceOfOld;
        // allowance map, see erc20
        mapping(address => mapping(address => uint256)) public allowance;
        // amount payed out for each address (scaled number)
        mapping(address => int256) payouts;
        // sum of all payouts (scaled number)
        int256 totalPayouts;
        // amount earned for each share (scaled number)
        uint256 earningsPerShare;
这些变量以此代表：合约中代币总和、用户的代币余额、津贴数量（ERC20变量）、用户分红金额、总分红金额、每股获得的收益。
下面我们来看用户如何购买代币：
    function fund()
          public
          payable 
          returns (bool)
        {
          if (msg.value > 0.000001 ether)
                buy();
            else
                return false;
          return true;
        }
首先用户可以调用`fund()`函数。在函数中要求用户传入`msg.value > 0.000001`，之后进入`buy()`函数。
    function buy() internal {
            if (msg.value  1000000 ether)
                revert();
            var sender = msg.sender;
            // 5 % of the amount is used to pay holders.
            var fee = (uint)(msg.value / 10);
            // compute number of bought tokens
            var numEther = msg.value - fee;
            // 计算用户购买金额对应的股份
            var numTokens = getTokensForEther(numEther);
            var buyerfee = fee * PRECISION;
            if (totalSupply > 0) {
                // compute how the fee distributed to previous holders and buyer.
                // 计算持有股份的人获得的金额
                // The buyer already gets a part of the fee as if he would buy each token separately.
                var holderreward =
                    (PRECISION - (reserve() + numEther) * numTokens * PRECISION / (totalSupply + numTokens) / numEther)
                    * (uint)(CRRD) / (uint)(CRRD-CRRN);
                var holderfee = fee * holderreward;
                buyerfee -= holderfee;
                // Fee is distributed to all existing tokens before buying
                var feePerShare = holderfee / totalSupply;
                earningsPerShare += feePerShare;
            }
            // add numTokens to total supply
            totalSupply += numTokens;
            // add numTokens to balance
            balanceOfOld[sender] += numTokens;
            // fix payouts so that sender doesn't get old earnings for the new tokens.
            // also add its buyerfee
            var payoutDiff = (int256) ((earningsPerShare * numTokens) - buyerfee);
            payouts[sender] += payoutDiff;
            totalPayouts += payoutDiff;
        }
在这个函数中，首先要求用户传入的金额有一定的范围。`msg.value  1000000
ether`。
之后合约提取了用户的百分之十的金额来作为手续费（这里的注释中写的是5%，但是这里的代码是
/10，而其他地方同样没有减少这个值，所以我认为应该还是百分之十）。
`var fee = (uint)(msg.value / 10);`。
之后合约将剩下的钱传入`getTokensForEther()`进行处理（这里是合约自行设计的转换函数，将固定数量的以太币转换为相对应的股份），得到`numTokens`。
    var numEther = msg.value - fee;
            // 计算用户购买金额对应的股份
            var numTokens = getTokensForEther(numEther);
`if (totalSupply > 0)`。如果这不是第一个用户参与合约，那么进入下面的处理。（如果是第一个用户，那么`totalSupply +=
numTokens;`直接在总代币上进行相加。）
    if (totalSupply > 0) {
                // compute how the fee distributed to previous holders and buyer.
                // 计算持有股份的人获得的金额
                // The buyer already gets a part of the fee as if he would buy each token separately.
                var holderreward =
                    (PRECISION - (reserve() + numEther) * numTokens * PRECISION / (totalSupply + numTokens) / numEther)
                    * (uint)(CRRD) / (uint)(CRRD-CRRN);
                var holderfee = fee * holderreward;
                buyerfee -= holderfee;
                // Fee is distributed to all existing tokens before buying
                var feePerShare = holderfee / totalSupply;
                earningsPerShare += feePerShare;
            }
上述函数中主要是针对`earningsPerShare`进行更新。每次有新用户加入合约并传入一定以太币均会调用此函数，之后`var feePerShare
= holderfee / totalSupply; earningsPerShare += feePerShare;`。
而每次`earningsPerShare`变量更新后，老用户均可以提升自己的利息。
下面我们来看提取分红的函数。
    function withdraw(uint tokenCount) // the parameter is ignored, yes
          public
          returns (bool)
        {
            var balance = dividends(msg.sender);
            payouts[msg.sender] += (int256) (balance * PRECISION);
            totalPayouts += (int256) (balance * PRECISION);
            msg.sender.transfer(balance);
            return true;
        }
函数中的`balance`赋值为`dividends(msg.sender)`。而这是分红函数：
    function dividends(address _owner) public constant returns (uint256 amount) {
            return (uint256) ((int256)( earningsPerShare * balanceOfOld[_owner]) - payouts[_owner]) / PRECISION;
        }
其中具体的值不用我们深究，其分工的具体的金额与股份的单价、用户的余额以及已获得分红有关。
我们继续回到`withdraw()`函数。在计算完成分红金额后，合约将分红转给用户`msg.sender.transfer(balance)`。
而这里的`transfer()`函数同样是封装好的函数：
    function transfer(address _to, uint256 _value) public {
            transferTokens(msg.sender, _to,  _value);
        }
    function transferTokens(address _from, address _to, uint256 _value) internal {
            if (balanceOfOld[_from] 
  * 
  * 
  * 
  * 
**本稿为原创稿件，转载请标明出处。谢谢。**