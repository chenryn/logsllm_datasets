0.77
0
0
99.23
99.81
99.94
Support Vector Machines
Prototype
Fiat 500
Porsche Panamera
Prototype
Fiat 500
Porsche Panamera
0
100
1
0
0
100
1
0.21
0
99.99
1
0.51
Naive Bayes
0
1
0
1
0
1
100
0
100
0
99.31
2.31
0
100
0
99.79
0.01
99.49
0
100
0
100
0.69
97.69
Suspicious
Frames
0.01
0.16
0
0.03
0.03
0.64
0
0
0.03
0.18
0
0.26
0
0
0
0
0
1.93
frames and the number of frames after which such an attack
should be detected, the parameters for the detection must be
determined. For the Fiat 500, we identiﬁed a suspicious frame
rate of about 0.06, which means that every 1666 frames such a
frame erroneously occurs. Therefore, we increment the counter
by 1 for each suspicious frame and decrement it by 0.006
for a normal frame. In addition, it is assumed that an alarm
should be triggered after 10 fake frames, which is why the
alarm threshold is set to 10. Figure 5 shows the course of the
counter for suspicious frames. It can be seen, that it increases
rapidly when the sender changes from ECU 6 to ECU 7 after
frame 851. As conﬁgured, an alarm is triggered after 10 forged
frames sent from the unmonitored ECU.
Fig. 5: Suspicious counter of ECU 6 from the Fiat 500 during
unmonitored ECU attack.
9
For detection evaluation of simple additional ECUs, the
data set of the Fiat 500 was used. Initially, the system was
trained with signals from an unmodiﬁed bus,
i.e. without
ECU 6 and ECU 7 being connected to the bus. Both data sets
were recorded one after another under the same conditions.
Only the DSO was connected via the OBD-II port. After
500 signals were processed by the system, the data set was
changed to signals of the changed bus. In order to detect
this attack, the counters of the suspicious frames of all ECUs
are considered. If the sum of the counters exceeds the set
threshold value, an alarm is triggered. The threshold for the
detection of additional ECUs is #ECU
times the threshold for
the detection of unknown ECUs. The course of the summed
counter is shown in Figure 6. The attack was detected after
86 frames have been processed by the system. The difference
to the detection of attacks via unmonitored ECUs is that by
changing the bus topology the detection rates of all ECUs
decrease, i.e. the number of suspicious frames increases at
several ECUs. This makes the detection of this manipulation
independent of forged messages.
2
Fig. 6: Summed suspicious counter of all ECUs from the Fiat
500 during additional ECU attack.
E. Detecting Voltage-aware Attacker
For the simulation of this attack we have scaled the existing
signals of an attacker in such a way that its voltage level is
similar to the signal to be forged. The exact adaptation to
an existing signal is not possible in real conditions without
physical access, since an attacker has no information about
the characteristics of the ECU which has been taken over
or is to be forged. Even if the characteristics of an ECU
could be measured exactly at the point of bus access, they
are not identical with the characteristics measured by EASI.
This is due to the different channels between the observed
ECU and the two measurement points. This can be seen in
Figure 7, where the same rising and falling edge of one frame
is displayed, recorded at different bus positions.
It can also be assumed that an ECU has no possibility of
making such a ﬁne adjustment. The attacker simulated here
is therefore more powerful than it can be assumed in reality.
ECU 6 and ECU 7 of the Fiat 500 were used to evaluate the
detection of this attack, as they are identical in construction
and use the same power supply, which makes them more
difﬁcult to distinguish. 300 signals from ECU 7 have been
adapted so that their voltage levels match the voltage level
of ECU 6. The identiﬁer has also been adapted accordingly
to ECU 6. The system was trained with the original data and
 0 10 20 0 100 200 300 400 500 600 700 800 900Suspicious counterFramesCounterThreshold 0 20 40 60 0 100 200 300 400 500 600 700 800Suspicious counterFramesCounterThresholddifferences in the voltage level of over 20 mV and signal
deviations are visible, the robust selection of diverse features
ensures that tampering had no effect. Here, only a single frame
showed irregularities, but due to the threshold approach this
does not lead to a false alarm.
H. One Week Drive
For the analysis of environmental factors as well as the
effect of electrical consumers in the vehicle on the signal
characteristics, we performed another series of measurements
with the Fiat. Data from a total of nine half-hour trips were
recorded over a period of one week. The vehicle was in
the original state and the DSO was connected to the bus
via the OBD-II port. The measurements were carried out in
winter with rain, wetness and drought at ambient temperatures
between -2◦C (28.4◦F) and 10◦C (50◦F). During the journey,
different consumers were used, such as lights, turn signals,
windscreen wipers, heating and also the start-stop automatic
of the vehicle. Altogether more than 65,000 frames were
recorded.
Again, the ﬁrst 200 frames per ECU of the ﬁrst trip were
used to train the model while 10 % of the test frames were han-
dled as attacks. During the analysis we noticed another striking
feature, the distance between the overshoot and the lowest
point of the subsequent oscillation. We replaced this feature
with the variance in order to keep the amount of features. With
this adjustment we achieved a identiﬁcation rate of 99.98 %
instead of 99.96 % and a false positive rate of 0 % instead
of 0.01 % for the unadjusted feature set. With a detection of
99.6 % of the malicious frames we could also show that the
attack detection still works while driving. Again, no update was
necessary during operation. Overall, the measurements show
that a model can maintain a high identiﬁcation rate even under
changing conditions over a longer period of time.
V. MICROCONTROLLER IMPLEMENTATION
In order to estimate the performance requirements of
the approach on limited hardware,
the ﬁngerprint genera-
tion, classiﬁcation, model training and update mechanism was
implemented on an STM32 NUCLEO-F446RE [59], a 14 $
development board. The MCU used runs at a clock frequency
of 180 MHz, offers 512 kB ﬂash and 128 kB SRAM, provides
a ﬂoating point unit (FPU) and also a digital signal processor
(DSP). This platform is quite comparable with MCUs used in
today’s vehicles, which include the STM SPC58 [58] with up
to 3x180 MHz and the Inﬁneon TriCore TC3x [30] with up to
6x300 MHz. These automotive MCUs also offer an HSM to
realize the requested security measures, like Secure Boot [52].
A. Signal Gathering
Fig. 7: Exemplary parallel measuring difference.
has subsequently processed the 300 manipulated signals. The
change has reduced the average probability of ECU 7 by more
than 3 %. However, the distinction between ECU 6 and ECU 7
remains, so that 95 % of the forged and adapted messages
could be correctly detected as an attack. All the undetected
forged messages were marked as suspicious, which indicates
that this attack should also be considered when determining
the thresholds. The simulation shows that adjusting the voltage
level is not enough to circumvent the system dependably. Apart
from that, the monitoring was able to detect the drop of the
probabilities while maintaining the functionality of the system.
This makes it possible to adapt to a change at an early stage.
F. Varying Conditions
For the evaluation of the performance of the approach un-
der changing conditions, additional analyses were performed.
Three datasets of the Fiat in its original state, i.e. without
having the Raspberry Pis connected, were used, which were
recorded via the OBD-II port of the vehicle. The ﬁrst data
set was recorded at an ambient temperature of approximately
25◦C (77◦F) while the engine was switched off and cold. The
ﬁrst 200 frames per ECU of the set were used for the initial
training and the remaining 5685 frames of the data set were
classiﬁed completely correct. After the start of the vehicle the
second data set was recorded, which contains data of a trip
of approximately 30 minutes at an ambient temperature of
over 32◦C (89.6◦F). After the vehicle was completely heated
up, it was parked in an underground garage at approximately
23◦C (73.4◦F). All of the 6672 frames were correctly classiﬁed
using the already trained classiﬁers. The recording of the third
data set was started after a cooling phase of three hours while
the vehicle was switched off. After a short time the vehicle
was started and driven for another 20 minutes at an ambient
temperature of approximately 36◦C (96.8◦F). The 4863 frames
recorded were fully classiﬁed except for one, but due to the
proposed threshold approach a false positive was prevented.
During the whole process no re-training of the models was
necessary and an identiﬁcation rate of 99.99 % was achieved.
G. Manipulation of the Power Supply
We also performed a fourth measurement with 6885 frames
while the engine of the vehicles was switched off but with a
battery pack connected in order to analyze the behavior of
the system when manipulating the power supply. This data
set was used in a second evaluation as training data set.
Subsequently, the remaining frames and the three data records
from Section IV-F were processed by the system. Although
To achieve a realistic comparison we have used the sig-
nals of the Fiat 500 as already done in Section IV. The
representative rising edges, each consisting of 20 samples,
were ﬁrst determined on the PC and then transmitted via
UART together with the associated identiﬁer to the evaluation
platform. For the sampling on the actual device, a fast-
compare channel or automotive capable high-speed comparator
can be used to control the internal ADC according to the
description in Section IV. The SPC58 and the TC3x series
10
 0 0.5 1 1.5 2 0 50 100 150 200 250Voltage (V)SamplesOBD-IITrunkalso offer Generic Timer Modules (GTMs) [57], mainly used
for powertrain tasks [38], which are free programmable and
designed to process repetitive task. Such a module can be
utilized to control the internal ADC and thus to generate a
representative edge without using the actual MCU. Thus, the
MCU must be used for feature calculation and classiﬁcation
only after the edge has been captured.
B. Characteristic Derivation
The features listed in Table I are ﬁrst calculated from
each transmitted edge using the CMSIS DSP Software Li-
brary [1]. The resulting features are stored temporarily as
ﬂoating point numbers for further processing. This already
offers optimization potential by switching the approach to
integer arithmetic. Calculating the features requires 16,730
cycles, which corresponds to a duration of 92.94 µs. This also
includes the normalization of the features with 2,283 cycles,
which improves Logistic Regression.
C. Model Generation
Before classiﬁcation is possible,
the model has to be
trained. Here we use Logistic Regression with L2 regulariza-
tion. In order to achieve a low memory utilization, a mini-
batch approach was implemented. Instead of using 200 frames
per ECU at once, a new mini-batch with 8 frames per ECU
is used after each iteration. Altogether the training consists
of 25 iterations, whereby in each iteration 20 minimization
steps using the conjugate gradient method are performed.
For each ECU 2,348,400 cycles are required per iteration,
which corresponds to 13,046 µs. Accordingly, the learning time
requires 2.61 seconds for the given training set of 200 frames
per ECU.
D. Sender Identiﬁcation and Intrusion Decision
After the training phase, the classiﬁers can be used for
sender identiﬁcation. For each classiﬁer, 663 cycles or 3.68 µs
are needed for the calculation of the probabilities. In the
optimum case, i.e. with a high probability of detection, a
total duration of 96.62 µs per signal was achieved. Making the
decision about an intrusion requires with 468 cycles further
2.6 µs. If all probabilities have to be calculated,
the total
duration was 124.98 µs. A CAN frame with 8 bytes of payload
occupies the bus for minimum 222 µs with an automotive
typical bandwidth of 500 kB/s [32]. Therefore, the presented
approach is capable to process the signals sufﬁciently fast
in order to identify the sender on a 100 % loaded bus, as
illustrated in Figure 8. However, in practice the load is much
lower to ensure safety requirements.
Regarding the performance on the system, an identiﬁcation
rate of 99.94 % and a false negative rate of 0.03 % was
achieved for the Fiat 500 data set from Section IV-A. As in
the previous evaluations, no false positives occurred.
E. Naive Bayes
We have also implemented and analyzed Naive Bayes on
the considered platform. As expected, the training of the model
is less computationally expensive, which is reﬂected in an
approximately 20 times faster training time. The classiﬁcation
achieves similar good results, whereby the estimation of the
origin of a frame takes more than three times as long compared
to Logistic Regression. In addition, with the NB classiﬁer the
calculation cannot be carried out only for a single ECU, which
leads to the fact, that in contrast to LR, it require almost the
entire time.
Fig. 8: Worst case timings on the resource-constrained plat-
form.
F. Model Adjustment
Since it is of interest whether the presented update mech-
anism is able to maintain a consistently high identiﬁcation
rate even with very strong changes, the update mechanism
was evaluated with LR and NB. However, since almost no
real signal changes occurred during the measurements, the
evaluation was performed with simulated changes. After the
analysis of 1000 unchanged frames,
the voltages of 4000
randomly selected frames were scaled incrementally to 80 %,
followed by 3000 frames, which were scaled to 110 % of their
original value. Fig. 9 shows the identiﬁcation rates for LR and
NB with and without the update mechanism. Obviously, even
with such strong changes of up to 30 % after frame 5000 in a
very short period of time, the LR is able to maintain a high
identiﬁcation rate with the proposed update procedure.
Fig. 9: Comparison of model updates for the Fiat 500 set.
Besides the evaluation of incremental drifts, it is also of
interest how to handle the model adaptation to abrupt changes.
Therefore it was examined whether it is more efﬁcient to
adapt
the existing model or to create it from scratch, by
comparing the number of required iterations, i.e. mini-batches.
For comparison with the existing model, it was ﬁrst trained
with unchanged data. In the following, randomly selected
frames were scaled by a factor of 0.8 to simulate the abrupt
11
CAN FrametTrailertHeadertPayloadtCAN FrameHeadert+1Payloadt+1222µsLogistic RegressionCANBusNaiveBayesSender Identiﬁcation & Intrusion DetectionSignalGatheringSignalGatheringCharacteristicDerivationCharacteristicDerivationSender Identiﬁcation & Intrusion Detection92.9µs29.4µs124.9µs80.2µs112.8µs195.7µs 40 60 80 100 0 1000 2000 3000 4000 5000 6000 7000 8000Identification RateFramesLRLR (update)NBNB (update)drift. Afterwards, the two approaches were analyzed for both
machine learning algorithms. While it is an advantage for the
LR to adjust the existing model, it is more efﬁcient for NB
to train a new model, as it takes longer for the changes to
be fully adopted. In contrast to the complete training with 25
iterations, only 4 iterations are necessary for the adjustment
with LR, which takes less than one second on the system used
here. In such a situation, the secure labeling of the data for
which we exchanged keys in the initial training phase must
be guaranteed. Summarizing, it was shown that the sender
identiﬁcation can be maintained during incremental drifts with
a high detection rate, and that the model can be adapted to
abrupt drifts.
VI. RELATED WORK
Cryptographic measures, such as MACs, are the most
suitable methods to ensure authenticity. Since AUTOSAR
4.2.1, cryptographic algorithms are provided by the SecOC
module [3]. In order to prevent collisions, the general rec-
ommendation for the minimum length of the MAC tag is
64 bit [15]. However, this also corresponds to the maximum
payload of a CAN message, which is why tags are strongly
truncated. But even with an exemplary length of 24 bits
plus 8 bits as freshness counter, the available bandwidth is
reduced by more than 50 %, as regular synchronization of