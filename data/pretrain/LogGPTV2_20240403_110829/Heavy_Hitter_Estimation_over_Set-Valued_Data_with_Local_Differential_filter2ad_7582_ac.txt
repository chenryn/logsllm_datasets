munication overhead and noisy results mainly due to the fact
that each user possesses l items. In particular, naive RAP-
POR has a sensitivity proportional to l, and naive SH divides
the privacy budget into l shares; the amount of transmissions
in naive SH is also O(l). Observe that if we can reduce l,
then we can eﬀectively reduce the noise of both naive solu-
tions as well as the transmission cost of naive SH. The main
idea of the two-phase framework is to ﬁrst ﬁlter the items
and select kmax = O(k) candidate heavy hitters in the ﬁrst
phase, and then focuses on reﬁning the frequency estimates
of these candidates in the second phase. Note that k is usu-
ally considerably smaller than l, as explained in Section 3.
Figure 2 illustrates the proposed framework in LDPMiner.
Speciﬁcally, LDPMiner splits the privacy budget  at each
user into two parts 1 and 2, and allocates them to Phase I
and Phase II respectively. The whole process satisﬁes -LDP
according to the sequential composition property described
in Section 2.1. Phase I addresses exactly the same problem
as the original one, i.e., each user possesses a set of l items
and reports them under 1-diﬀerential privacy, and the data
collector computes the top kmax items with the highest fre-
quency, and outputs these items as the candidate set. After
the ﬁrst phase ﬁnishes, the data collector broadcasts the set
of candidate items to all users.
The task in Phase II also resembles the original prob-
lem, with the key diﬀerence that the universe of items be-
comes the kmax candidates, instead of the full set of d items.
In other words, the ﬁnal result consists of top-k heavy hit-
ters that are chosen exclusively among the candidates; any
item outside the kmax candidates are essentially considered
a dummy item in Phase II, and LDPMiner does not compute
the frequency of such an item. Another important distinc-
tion from Phase II and the original problem is that in the
former, each user has already transmitted data in Phase I,
and there can be overlap in the information released between
the two phases. As we show later in Section 4.4, LDPMiner
exploits such overlap between the two phases to further im-
prove accuracy.
Note that the two-phase framework in LDPMiner is ﬂex-
ible:
if we set 1 = , 2 = 0 and kmax = k, then the
second phase does not occur, and LDPMiner reduces to a
single-phase approach. In our experiments, we compare the
proposed two-phase LDPMiner with this single-phase alter-
Users Collector Top-k Heavy Hitters Randomized Data Potential Heavy Hitters Phase 1 Phase 2 Randomized Data Analysis of naive RAPPOR. According to Section 3, the
biased coin used in naive RAPPOR has probability
e/2l+1
to turn heads. Using this probability into the similar deduc-
tion of original RAPPOR’s utility analysis, we obtain
1
Proposition 1. For the private frequency estimation un-
der naive RAPPOR and its estimator given above, for all ,
l, and n:
E(cid:104)(cid:107) ˜f − f(cid:107)2
2
(cid:105)
=
/2l
n(e/2l − 1)2
Analysis of naive SH. Under naive SH, for the simplicity
and analysis, we assume that every item gets assigned to
an interference-free channel. Hence, in each one of these
channels, we run a frequency oracle and use the resulting
frequency oracle to estimate the frequencies of all the items
on the above list, which is an ideal scenario for SH. Based
on the randomization procedures described in [3], we have
the following result:
Proposition 2. For the private frequency estimation un-
(cid:18)
der naive SH, for all , l, and n:
E(cid:107) ˜f − f(cid:107)2
/l − 1(cid:1) + 4 (l − f )2 n2
f n(cid:0)c2
1
n2
log(d)+log(2/β) (/l)2n, c/l = e/l+1
e/l−1
where m = log(d+1) log(2/β)
conﬁdence parameter in SH.
2 =
(cid:19)
e/l
m(e/l + 1)2
, and β is a
Sampling RAPPOR and sampling SH. Unlike the naive
approaches, in sampling-randomizer-based methods the ran-
domizer enjoys full privacy budget , as well as the same sen-
sitivity as in the single-item setting. We have the following
result:
Proposition 3. For the private frequency estimation un-
der sampling RAPPOR and its estimator given, for all , l,
and n:
E(cid:107) ˜f − f(cid:107)2
2 =
l2/2
n(e/2 − 1)2
Proposition 4. For the private frequency estimation un-
der sampling SH, for all , l, and n:
(cid:32)
(cid:0)c2
 − 1(cid:1) + 4
(cid:18)
(cid:19)2
E(cid:107) ˜f − f(cid:107)2
2 =
l2
n2
f n
l
1 − f
l
n2
e
m(e + 1)2
(cid:33)
where m = log(d+1) log(2/β)
log(d)+log(2/β) ()2n, and c = e+1
e−1 ,
Figure 3 plots the frequency estimation error obtained
through the above analyses as a function of the privacy
budget . Note that the vertical axis (i.e., the error) is
in logarithmic scale. According the results, the sampling-
randomizer-based methods have clear and consistent per-
formance advantages over their naive counterparts. In par-
ticular, sampling RAPPOR obtains the lowest error in its
reported frequency estimates.
In terms of communication costs, both versions of RAP-
POR require each user to transmit a length-d bit vector to
the data collector, leading to a communication cost of O(d).
Naive SH incurs O(l) transmissions as explained in Section
3. Sampling SH, on the other hand, achieves constant com-
munication cost since it invokes SH exactly once. There-
fore, sampling RAPPOR and sampling SH provide diﬀerent
Figure 3: Error in the frequency estimates of basic solutions
tradeoﬀs between result accuracy and communication costs.
Hence, we use both sampling-randomizer-based methods as
basic building blocks in LDPMiner.
4.3 Design of Phase I
Phase I of LDPMiner can be implemented using either
sampling RAPPOR or sampling SH, described in Section
4.2. We choose sampling SH since its communication cost is
O(1); sampling RAPPOR, on the other hand, incurs O(d)
transmissions which is prohibitively expensive for large do-
mains.
Algorithm 2 shows the complete sampling SH algorithm.
Note that the SH component is similar to the SH algo-
rithm presented in [3], and here we present the full algo-
rithm for completeness. In particular, in step 4, the random
projection matrix Φ is generated by utilizing the Johnson-
Lindenstrauss (JL) lemma [20], which states that any set
of d points in a high dimensional space can be obliviously
embedded into a pace of dimension O(log(d)) such that this
embedding preserves pairwise distances with probability at
least 1 − β, where β is the conﬁdence parameter. For this
instance, m = log(d+1) log(2β)2
1n
√
√
. Note that an element in
m or −1/
x = Φbv is either 1/
m. And the utilization of
JL transform requires for the columns of Φ to be min(n, d)-
wise independent.
log(ed/β)
After that, the data collector aggregates each submitted
individual reports zt in its corresponding position t together:
n(cid:88)
i=1
zi
¯z =
1
n
and constructs a frequency oracle F O = (Φ, ¯z). An item
v ∈ V whose frequency can be estimated through ˆf (v) =
(cid:10)Φxi, ¯zl(cid:11) − γ, where γ is an approximation parameter. We
refer the reader to [3] for further details, including certain
parameter setting of frequency estimator.
Analysis. The following theorem establishes the correct-
ness of sampling SH.
Theorem 4.1. The construction of the frequency oracle
F O described above is 1-LDP.
012345678910Epsilon-2-4 02468Log(Estimated Error)n=200,000, l=100, d = 10000Naive RAPPOR Sampling RAPPOR Naive SHSampling SHAlgorithm 2: Sampling SH
Input : Privacy parameter 1, l-dimensional vector vi.
Output: Report pair (zj, j).
1 Uniformly pick an element v from vi;
2 Uniformly pick a position t from 1 to m;
3 if v (cid:54)=⊥ then
x = Φbv;
Randomize the t-th bit xt as follows:
4
5
(cid:40)
zt =
c1 mxt with probability e1
e1 +1
−c1 mxt with probability
1
e1 +1
where c1 = e1 +1
e1−1 ;
Uniformly pick zt ∈ {−c1
6 else
7
8 end
9 Return the pair (zt, t);
√
√
m};
m, c1
Proof. Let v1 and v2 be two arbitrary sets of items
such that |v1| = |v2| = l. Let A denote Algorithm 2,
and (zt, t) be any possible output of A. Note that zt ∈
√
m} and t ∈ {1, 2, . . . , m}. We will prove the
{−c1
theorem by showing that
m, c1
√
Pr[A(v1) = (zt, t)]
Pr[A(v2) = (zt, t)]
≤ e1 .
Let Pr[t(cid:48) | vi] denote the probability that Algorithm 2
picks t = t(cid:48) in Line 2, when vi is the input. We have Pr[t(cid:48) |
t | t(cid:48) ∧ vi] denote
vi] = 1/m for any t(cid:48). In addition, let Pr[z(cid:48)
the probability that, after Algorithm 2 picks t = t(cid:48) in Line 2
given vi as the input, it outputs (z(cid:48)
t, t(cid:48)) eventually. We have
1
e1 + 1
≤ Pr[z
t | t
(cid:48)
(cid:48) ∧ vi] ≤
e1
e1 + 1
.
Therefore,
Pr[A(v1) = (zt, t)]
Pr[A(v2) = (zt, t)]
Pr[zt | t ∧ v1] · Pr[t | v1]
Pr[zt | t ∧ v2] · Pr[t | v2]
Pr[zt | t ∧ v1]
≤ e1 .
Pr[zt | t ∧ v2]
=
=
Thus, the theorem is proved.
To quantify the proposed solution’s utility, we use a stan-
dard notion of approximation for frequent item mining. We
use γ as an additive error to frequency f and fk as the fre-
quency of the k-th most frequent item in the dataset. Given
β > 0, with probability at least 1 − β, the algorithm is
(γ, β, η)-approximate, if (1) Soundness: no item in the out-
put has true frequency less than fk − γ, (2) Completeness:
all items with true frequency greater than fk + γ is in the
output, and (3) Accuracy: The noisy frequency estimated
diﬀers at most η from the true frequency.
The following theorem establishes the soundness and com-
pleteness of sampling SH, and analyzes its accuracy.
Theorem 4.2. For all β > 0, with probability at least
1 − β, all items estimated by sampling SH mechanism in
Phase I have their true frequencies > ˆfk − γ, and all items
with true frequency > ˆfk − γ are in the list, where γ =
2(e1 +1)
e1−1
·(cid:113) log(d/β)l
n
.
4.4 Design of Phase II
For Phase II, we can simply use sampling SH as in Phase
I. Meanwhile, since the universe of items becomes the kmax
candidates as explained in Section 4.1, sampling RAPPOR
also becomes a viable solution, whose communication cost
is now O(kmax) (cid:28) d. We refer to LDMiner with sampling
SH (resp. RAPPOR) in the second phase as LDPMiner-SH
(resp. LDP-RAPPOR).
One complication in Phase II is that the trimming of users’
answer still needs to be handled carefully. For example, the
change of item set length after trimming also contains pri-
vate information. Since user excludes non-candidate items
from their answers, the change of item set length indicates
the number of frequent items in a user’s answer. This in-