数据丨191
---
## Page 206
目标射击一样。虽然逐字节地比较是百分之百地精确，但也无法匹敌MD5检验和这个重
MD5校验和比较
校验，在接下来一节中我们将介绍MD5校验。
对两个目录进行比较，并使用之前介绍的os.listdir复制唯一的结果。还可以使用MD5
进行复制将会效率更高。一个合理而简单的解决方法是使用filecmp模块的dircmp函数来
你可以直接复制一个目录中的文件到目标目录，然后对目录进行复制，但是在第一步不
要把一个目录树的内容合并到另一-个目录树，而不创建任何副本时，这是经常会出现的
如果不想简单地对数据文件进行比较，而是想对两个目录树进行合并，该怎么办呢？当
合并数据
192
下面是一个选代示例，该示例在IPython中使用该函数对两个文件进行比较：
import hashlib
例6-7：执行文件MD5校验和
量级武器。例6-7显示了该函数如何获得指定文件路径，并返回校验和。
对一个文件执行MD5检验和（checksum）并拿它与另一个文件比较就像是使用火箭筒向
问题。
In [5]: if createChecksum("image1") == createChecksum("image_unique"):
In [2]: from checksum import createChecksum
returnchecksum
fp.close()
while True:
True
checksum
fp = open(path)
Reads in file. Creates checksum of file line by line.
：
第6章
 checksum.update(buffer)
buffer =fp.read(8192)
print "True"
=hashlib.md5()
= checksum.digest()
www.TopSage.com
PDG
---
## Page 207
:(,duz/, = yzed)sadnaput+ ap
示了如何实现。
法。如果存在，将文件加人重复列表。现在，将代码分为可再次使用的若干段。例6-9显
然后使用一个关键字来存储产生的校验结果，这是用来判断检验和是否已存在的简单方
这段代码中，仅有一段在之前的示例中没有介绍过，也就是line[8]。创建一个空字典，
In [7]: record = {}
In [4]: files = d.enumeratePaths()
In [3]: d = diskwalk('/tmp/duplicates_directory')
In [2]: from diskwalk_api import diskwalk
In [1]: from checksum import createChecksum
例6-9：查找重复
In [6]: dup = []
例6-8：执行目录MD5 校验和以查找重复
6-8展示了查找重复的代码。
fromchecksumimportcreate_checksum
['/tmp/duplicates_directory/image2']
In[
通过IPython交互测试我们的解决方案，如果证明确实可行，就可以创建另一个模块。例
该代码返回路径列表，对目录树进行迭代比较并得到副本数。此外，还可以创建API,
在示例中，文件的校验是通过手工对比完成的。但是我们也可以使用之前编写的代码，
record
dup = []
=diskwalk(path)
[9]: print dup
else:
compound_key = (getsize(file),create_checksum(file))
[8]:for file in files:
....
dup.append(file)
12
record[compound_key]= file
www.TopSage.com
数据丨193
PDG
---
## Page 208
/tmp目录中有一个10MB大小的文件，我们使用os.remove(file)删除其中的一个：
正如你可以使用os.remove (file)一样，在Python中删除文件非常简单。这个示例中，在
一步，实现自动删除重复的功能。
块，可以取得目录树并返回所有重复文件的列表。这用起来非常方便。接下来我们再进
从这里你可以看到，哪怕是非常小的一段代码也可以复用成功。现在有了一个通用模
执行该脚本时，得到的输出如下：
for dup in dupes:
if
return dup
在IPython中测试交互代码十分简单，我们写一个test函数，然后进行测试：
记住这一点，可以实现一个简单的方法来删除重复的文件，之后再对其进行修改。由于
的名称。os.remove (file)方法是静态的、持久的。这或许是你希望的，但也可能不是。
值得注意的是，IPython中的tab自动完成功能允许我们查看匹配并为我们显示图像文件
for file in files:
194丨第6章
 print "Duplicate: %s" % dup
_name_
In [1]: from find_dupes import findDupes
Duplicate:/tmp/duplicates_directory/image2
[ngift@Macintosh-7][H:10157][J:0]# python find dupes.py
In [2]: dupes = findDupes("/tmp")
In [2]: os.remove("10mbfile.1")
10mbfile.5 10mbfile.6 10mbfile.7 10mbfile.8
10mbfile.0 10mbfile.1 10mbfile.2 10mbfile.3 10mbfile.4
In [2]: os.remove("10
In[1]:import os
In [3]: def delete(file):
else:
compound_key
record[compound_key] = file
#print "Creating compound key record:", compound_key
dup.append(file)
os.remove(file)
print
= (getsize(file),create_checksum(file)
import os
"deleting %s" % file
www.TopSage.com
X
---
## Page 209
例6-10：删除模块
何内容。参见例6-10。
可以作为一个file对象，执行相关删除操作。它甚至不需要查找重复，可以用来删除任
已经创建了不少可复用的代码，但不会马上停止。下一步还要创建另一个模块，该模块
在这个示例中，通过添加打印自动删除文件的语句，增加了delete模块的复杂度。我们
def delete(self):
def_init_(self，file):
#!/usr/bin/env python
importos
deleting
deleting
deleting
deleting
deleting
delete(dupe)
In [4]: for dupe in dupes:
....
self.file =file
""Performs. a delete on a file, with additional conditions
return
print "Dry Run: %s [NOT DELETED]" % self.file
return
else:
input = raw_input("Do you really want to delete %s [N]/y" % self.file)
print "Skipping: %s" % self.file
/tmp/10mbfile.8
/tmp/10mbfile.4
/tmp/10mbfile.3
delete(dupe)
/tmp/10mbfile.7
www.TopSage.com
数据丨195
ODG
---
## Page 210
196
方法。下面的示例演示了每一方法的执行过程：
件。在模块的底部，有一个被注释掉的示例，该示例展示了如何使用这三种不同的删除
Dry run方法模拟了删除操作。实际上，该方法最终执行了删除方法，能够永久地删除文
时这是非常好的保护措施。
每一个即将删除的文件进行确认。这似乎有点烦人，但是当其他程序员维护或升级代码
在这个模块中，你将看到三种不同的删除类型。交互（interactive）删除方法提示用户对
Dry run
Delete
Interactive
#delete.interactive()
#delete.dryrun()
except Exception,err:
try:
pxint "DELETING: %s" % self.file
#delete.delete()
name
第6章
DELETING:
Do you really want to delete /tmp/10mbfile.3 [N]/Y
DELETING:
DELETING:
Do you really want to delete /tmp/10mbfile.2 [N]/Y
Dry Run:
DELETING:
DELETING:
ngift@Macintosh-7][H:10197][J:0]# python delete.py
return status
status=os.remove(self.file)
Run:
Run:
Run:
Run:
Run:
Run:
Run:
/tmp/10mbfile.2
/tmp/10mbfile.1
/tmp/10mbfile.8
/tmp/10mbfile.4
/tmp/10mbfile.1
/tmp/10mbfile.6
/tmp/10mbfile.5
/tmp/10mbfile.4
/tmp/10mbfile.3
/tmp/10mbfile.3
/tmp/10mbfile.2
_main_
[NOT DELETED]
[NOT DELETED]
NOT
NOT
NOT
www.TopSage.com
DELETED
DELETED]
DELETED
DELETED]
DELETED]
---
## Page 211
In [7]: os.chdir("/tmp")
In [6]: import os
In [5]: from glob import glob
/tmp/file.txt
In [4]: for file in files:
In [3]: from fnmatch import fnmatch
In [2]: files = diskwalk("/tmp")
In [1]: from diskwalk_api import diskwalk 
例6-11：分别使用fnmatch和glob查找文件匹配
diskwalk复用之前的代码。
例6-1l演示了fnmatch和glob是如何使用的。这里将通过从diskwalk_api模块加载
请参考第3章以获得更多关于使用正则表达式来匹配模式的说明。
回匹配模式的路径列表。作为选择，正则表达式可以用来创建一些更复杂的匹配工具。
这两个模块之间的主要差异是，对于Unix通配符，fnmatch返回True或False，而glob返
是复制某一类型的文件。在Pyton中，最直接的方法是使用fnmatch模块或是glob模块。
系统管理员们有一个常见的问题要解决，那就是他们需要追踪、删除、移动、重命名或
单但却功能强大的复用工具。
式匹配也十分简单。这一节将介绍通用模式匹配的问题，应用之前使用的技术来创建简
与之前的技术联合使用。正如Python中的其他操作一样，对文件扩展名或文件名执行模
等操作。要掌握了目录树之后，接下来要学习使用模式进行匹配，不论是单独使用还是
对文件和目录的模式匹配
得文件对象并应用某种形式的压缩。我们实际上仅介绍了该示例的一小部分。
删除重复文件，创建了一个普通的查找和删除文件的模块。还可以创建另一个工具来获
象现有的工作，使问题一般化，从而避免可能出现的新问题。在这种情况下，为了自动
在处理数据的时候，你或许会发现使用封装技术非常简便。因为这样可以通过充分地抽
到目前为止，
DELETING:
DELETING:
DELETING:
DELETING:
if fnmatch(file,"*.txt"):
，已经介绍了如何处理目录和文件，并执行查找重复、
print file
/tmp/10mbfile.8
/tmp/10mbfile.7
/tmp/10mbfile.6
/tmp/10mbfile.5
www.TopSage.com
、删除目录、移动目录
数据丨197
款乎
ODG
---
## Page 212
 In [1]: from diskwalk_api import diskwalk
我们就可以解决一个经典的系统管理问题，即对目录树中的所有匹配文件重命名。记
有用。在处理目录树时，你往往会对匹配某些模式的文件进行处理。明白这一点之后，
的函数。对于差异比较而言，两者都是非常有用的工具。
同，它是严格地“全局”匹配一个模式，并返回全路径。glob是一个比fnmatch更高级
在示例中，复用了之前的diskwalk模块后得到一个列表，列表中包含/tmp目录中的全路
Out[8]: ['file.txt',
In [5]: for file in files:
In [4]: files = diskwalk("/tmp")
In [3]: from fnmatch import fnmatch
In [2]: from shutil import move
例6-12：将目录树中全部MP3 文件重命名为文本文件
2
住，重命名实际上与删除、压缩或对文件进行处理一样简单。其模式如下：
当与其他代码联合使用，创建一个在目录树中搜索数据的过滤器时，fnmatch函数尤其
想象一下，有一个生产文件服务器，具有高性能的I/O存储功能，但却容量有限。由于一
From Hell中任何一个章节的系统管理员，那么，可能对这些代码没有明显的感觉。
树中的全部文件重命名为文本文件。如果你是一个没有阅读过BOFH或Bastard Operator
通过使用上面的示例，我们只用了四行简单的Python代码，就将一个由mp3组成的目录
In[6]:1s-1/tmp/
3.
两个不良用户在里面放了几百GB的MP3文件导致它的空间经常被占满。你可以对每一
rw-r--I--1 ngiftwheel 0 Apr 121:50 file.txt
198
-I--I-MI
-I--I-MI
totalo
-I--I-MI
在过滤器上执行操作，包括复制、删除，压缩，读取等。例6-12演示了这操作。
执行某种过滤器的可选类别；这会涉及许多过滤器，如文件名、扩展名、大小、唯
取得目录中某个文件的路径。
一值等。
第6章
ngift wheel0 Apr 1 22:45 music3.mp3.txt
ngiftwheel0
ngift
‘image.iso','music.mp3']
Apr
21:50 music.mp3.txt
www.TopSage.com