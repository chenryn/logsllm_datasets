Directery
exaap/es4-dehugme
Bostnese
6
Passgord
 Save setvork settings as defaslt
OK
Casce1
Help
Fig, 5.53 Debug application setup
confirmation, see Fig. 5.53. The “Debugger  Process options" menu can also
open this setup window.
J ue3e uesoad a 3u38nqap ues o An m vI *XO, xo dn Suas 1oyy
you no longer want to debug, click *Cancel*.
IDA does not automatically set a breakpoint at the program’s entry point. Users
need to manually set the breakpoint in advance.
Note that IDA 7.0’s 32-bit local debugging seems to have a known bug that
triggers Intemal Error 1491. If you need to debug a 32-bit Windows program, you
can use IDA 6.8 or other versions.
3. Setting breakpoints
IDA’s breakpoints can be set with the shortcut key F2, or by clicking on the small
blue dot on the left side of the graphical interface. After seting breakpoints, the
background color of the corresponding line will be red to highlight it.
At the same time, IDA supports debugging with decompiled pseudocode and also
supports breakpoints on decompiled pseudocode lines. There are blue dots to the left
of the line number in the pseudo-code window. These dots have the same function as
the blue dots on the left of the disassembly window, which are used to switch the
state of breakpoints. By clicking these blue dots, the corresponding line of the
pseudo-code will be changed to a red background, similar to the breakpoints in the
disassembly window.
For 4-debugme, set a breakpoint on the main function, see Fig. 5.54, and then run
the program to debug the pseudocode. After running, the program will automatically
break and open the pseudocode window. If the pseudocode window is not opened,
click the button on the menu bar to switch to the pseudocode window. In the pseudo-
code window, the line of code to be executed will be highlighted, see Fig. 5.55.
---
## Page 356
342
5 Reverse Engineering
1signed int main()
2
char *v0;//esi
signed int result; // eax
char*v2;//ecx
char*v3;//eax
unsigned _int8 v5; // d1
bool v4; // cf
const char*v6;//ecx
10
int outlen;//[esp+4h][ebp-108h]
char input[256];//[esp+8h][ebp-1e4h]
13
14
memset（input,0,θx1eeu）;
15
scanf("%s", input);
 16
v0 = base64_decode(@x24u, (const char *)&outlen);
outlen = 0;
17
18
1f ( v0 )
19
28
if (strlen(input)= outlen )
22
21
v2 = vθ;
Fig, 5.54 IDA breakpoint
15
14
printf("Input your answer:
16
memset_0（Dst,0,0x100ui64）;
P):
17
scanf("%s", Dst);
18
v3 =0;
Fig, 5.55 IDA debug stop in breakpoint
4. View Variables
When the program is suspended (e.g. a breakpoint is triggered), select the °Debugger
→ Debugger windows  Locals" menu to open a window for viewing local vari-
ables, see Fig. 5.56.
By default, the Locals window is displayed with the pseudocode window, see
Fig. 5.57, and can be dragged to the side to be viewed side-by-side with the
pseudocode, see Fig. 5.58.
Single-step the program to pass scanf and you will see that the program enters a
running state, where it is waiting for user input. After entering something into the
program, the program will be suspended again. Now the Dst variable in the Locals
window displays the value you just entered (in this case, aab), see Fig. 5.59. The red
color indicates that the values of these variables have changed (the same behavior as
in Visual Studio)
---
## Page 357
5.3 Dynamic Debugging and Analysis
343
Fteu
DebuagerQptlensgiedousHelp
Qulck debug vleu
Ctrl+2
Qebooger ulndous
章
frserol registers
fueti
Breokgolots
Seoment registers
Motches
Fpo registers
Troclng
章
e reglsters
rgc,
Cestlaue precess
F
xrm reolsters
Attech to precess...
章Qbuoer indou
CtrL+ALt+C
Precess gptlans...
国
Ihreod List
Douse process
Lecss
Module List
rax
Lernlsote pracess
Ctrl+F2
Detoca fren grocess
Stsck vleo
1/edx
//c
Befresh nenory
Stock troce
CtrL+ALt+5
Toke menery snopshet
+28h
Latch vieo
B
Step Iate
Step eger
F7
F8
Run satIL return
CtrL+F7
Rut to gurser
F4
Sultch to gaurce
Ose seurce-evel erbuolng
Opes sourc+ file...
Debgoger optlons...
Sultch debugger...
Fig, 5.56 Open locals variables window
口
口
1H1
TEE
54
1
Fig, 5.57 Locals Window
After continuing the execution to base64_decode, we can see that v5 has changed
to another value, see Fig. 5.60. However, v5 is actually a string that holds the correct
input. So, how do we get the contents of the string v5 points to?
There are two options for viewing v5's content.
---
## Page 358
344
5 Reverse Engineering
Fig, 5.58 Locals Window and decompiler window
口
111
Fig, 5.60 The v5 value after changed
Fig, 5.61 RDI value
RDI 00800175650CBAD0  debug012:00080175650CBAD0
① In the Location column of the Locals window, we can see that v5 is stored in RDI.
Click the button to the right of the value (of RDI) to jump to the corresponding
location in the disassembly window, see Fig. 5.61.
You can see that the flag is right in front of you, see Fig. 5.62. Continue with the data
type conversion operation described earlier: press a’ to convert it to a string, see
Fig. 5.63.
② Modify the type of v5 from _BYTE * to char *. HexRays will think that v5 is a
string and display it in Locals. In the pseudo-code window, press Y to change v5
---
## Page 359
5.3 Dynamic Debugging and Analysis
345
RAX
debug012:00000175650CBACF
db
3Fh ;?
RDI
debug012:00000175650CBAD0
db
66h
f
debug012:00000175650CBAD1
db
6Ch
；1
debug012:00000175650CBAD2
db
61h
ja
debug012:00000175650CBAD3
db
67h
8
debug012:00000175650CBAD4 db
7Bh;
debug012:00000175650CBAD5
db
44h
D
debug012:00000175650CBAD6
db
65h
ie
debug012:00000175650CBAD7
db
62h
75h ;u
；b
debug012:00000175650CBAD8db
debug012:00000175650CBAD9
db
67h
debug012:00000175650CBADA
db
5Fh
debug012:00000175650CBADB db
77h ; w
debug012:00000175650CBADC
db
69h ;i
debug012:00000175650CBADD
db
6Ch
；1
debug012:00000175650CBADE
db
6Ch
；1
debug012:00000175650CBADF
db
5Fh
；
debug012:00000175650CBAE0
db
62h
；b
debug012:00000175650CBAE1
db
65h
；e
debug012:00000175650CBAE2 db
5Fh ;
debug012:00000175650CBAE3
db
65h
ie
debug012:00000175650CBAE4
db
61h
ja
debug012:00000175650CBAE5
db
73h
；S
debug012:00000175650CBAE6
db
69h
debug012:00000175650CBAE7
；i
db
65h
；
e
debug012:00000175650CBAE8
db
72h
r
debug012:00000175650CBAE9 db
7Dh ；}
debug012:00000175650CBAEA db
Fig, 5.62 The flag char
debug012:00000175650CBACE db
UAX
debug012:00000175650CBACF db 3Fh ;?
debuge12:eoooo17565ec8ADe aFlagDebugHi118 db *flag{Debug_wi11_be_easier)*,0
debug012:00000175650C8AEC db 0ABh
debug012:00000175650C8AE8 db 0ABh
Fig, 5.63 The flag string
---
## Page 360
346
5 Reverse Engineering
LA
0164
Int
etx
v
0x175650C8Ab016:*fLog/lebug_o1Gs_b_es1er)*
0xECC10F0C2F0060166
-_/t4
rcx
chsr k
rd1
result
0x650C8A00164
v7
0x175650C8A00164
slqoed
Iet
_lot64
FGx
Fig, 5.64The flag in Locals window
 > no1oS cC:) > Pregron F1Les > I08 7,0 > dbgorv
20期
肉型
小
 endrele_server
2017$18 15:01
文律
576 03
 sedrel4_s*rver,sep1e
$0511.102
560 C3
 oedrelc_server64
2817-0-14 15:08
1,215 E8
 endrele_x54_sereer
2017$-14 15:03
1,246 03
 sndrele_sl6_server
20170914 15:01
560 c3
 ernl1eex_server
2817-00-14 15:08
文
725 t3
 4rnac5lsux_server
2817-09-14 15:08
201709-14 15:01
952 C3
S 16o_kestut.o
5 03
Lingx_server
2817-09-14 15:08
2017-00-14 15:08
文作
660 ca
710 03
 nsc_server
6051#100C182
652 08
nec_server54
20179-14 15:01
文作
665 03
 oin32_remote.or
2813-09-14 15:01
569 c3
E olo54_renat*64.ese
60°5101-09-.182
2817-09-14 15:01
应南维序
672 E3
 olnce,rmett_srn.oL
(12 03
 olnce_renote_tcg_ern,
28126614 15:08
由命唯序
16 t3
Fig, 5.65 dbgsrv folder
to char* and confirm, then right-click and select Refresh in the Locals window,
the result is shown in Fig. 5.64.
So far, we have successfully used debugging to find the flag in memory. Note that
the behavior of variables in IDA is not exactly the same as that of variables in
C. Variables in IDA have a special life cycle, especially those stored in registers.
After a certain range, their values will be overwritten by other values, which is
unavoidable. Therefore, the values of variables in Locals are not reliable when they
are far from the referenced location. Trust the values shown in Locals only when the
variable is referenced or when the lifetime of the variable is clearly known.
5. Remote Debugging Configuration
This section uses IDA 7.0 for Windows and the file 2-simpleCrackme.
This section explains in detail how to use the Remote Debugging tool. Remote
debugging is similar to local debugging, except that the executable file to be
debugged runs on a remote computer. IDA's remote debugging server is located in
the dbgsrv directory of IDA's installation directory, see Fig. 5.65.
---
## Page 361
5.3 Dynamic Debugging and Analysis