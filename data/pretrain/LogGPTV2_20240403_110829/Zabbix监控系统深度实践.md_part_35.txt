(1） http://localhost/login
有一个邮箱服务，它有以下几个URL。
先从一个例子开始。
“{“sid”：”XXX”}”，只有使用这个 sid才能
第19章Zabbix2.2新功能介绍
·281°
---
## Page 297
●282°
个subgroup
而在Zabbix2.2中，增加了一个参数一
是否有包含的字符串，Item的key如下：
记录了“status=ok”，只需要看这个URL有没有返回这个字符串就知道应用是否正常了。
19.4网页字符串匹配
射为“ERROR"。在abbix2.2之前，如果使用字符串，是会报错的，如图19-5所示。
不正常。Zabbix在2.2之前，只支持将数字映射成字符串，如图19-4所示。
19.3
Zabbix监控系统深度实践
Zabbix 很早就提供了一个全新的 Item，叫做 web.page.regexp，用来判断返回的 Web 页面
在开发中都会使用一个ok,jsp（或者类似的文件），里面会记录一些应用的健康信息。比如
假设ok.jsp 返回如下：
但是如果匹配出多个满足条件的字符串，就没办法了，我们不能指定需要返回的是哪一个
web.page.regexp[host,，,,]
数据映射的作用就是把不可读的数据转换成可读的数据。比如“0”表示正常，“1”表示
从Zabbix2.2开始，还增加了对字符串的映射，如将“GOOD”映射为“OK"，
数据映射
一子组的概念，它用来选择匹配得到的结果中的哪一个。
Mappings
Value
2013Feb2011503k（(）
2013Feb201157:03ok(3)
2013.Feb.20 11 58.03
2013.Feb.2011:59.03highTemperature(5)
Rezeknes UPs:Battery status
一output。熟悉正则表达式的朋友知道，正则匹配中有一
图19-5
Differentil
图19-4
Mapped to
ok（3）
Value
Remove
，“BAD”映
---
## Page 298
文件的关键字匹配中，也进行了增强。
19.5
为“2:1”，那么返回值就是“1014:1013”，相当于使用“1”来表示第一个子组。
一行日志。使用这个key 的格式为：
可无的。但如果例子如下，那么就需要这个参数了，因为使用正则表达式，能匹配出两个结果。
结果，它们分别是两个子组。在这个例子中，只能匹配出一个，所以最后的参数“1”是可有
比如对于字符串“a=1，a=2”，使用正则表达式“a=（[0-9]+)”，
（2）支持在文件中的某两行之间的范围内查找匹配。
（1）支持只返回匹配到的内容。
vfs.file.regexp [file,
“vfs.file.regexp”这个key是对于一个文件进行关键字匹配，如果匹配成功，那么就返回
在Zabbix2.2中，增加如下两个功能。
上一小节中，介绍了Zabbix 对待网页内容的正则匹配，除了在网页内容的扩展，在日志
如果子组不存在，那么就返回空字符串。“0”表示返回整个字符串。
最后的output 参数，除了能定义选择的子组外，还可以重新组织数据，比如将 output 设置
application.cache.free=425
application.sessions.active=1014
application.sessions.active=1013
application.sessions.free=685
“\1”表示只要匹配出的结果的第一个。在正则表达式中，
需要写的key如下：
application.cache.free=425
application.sessions.active=1013
application.sessions.free=685
日志文件监控
regexp,
]
，能匹配出“1”和“2”这两个
使用括号表示的是组的概念
第19章Zabbix2.2新功能介绍
·283°
---
## Page 299
·284°
因为只安装了Zabbix 2.2，所以笔者怀疑在以前的版本中，单击加号展开一个Appliation是将
19-6所示。
看Latest Data是最常用的功能了。我们在看的时候，肯定是要展开某个Application的，如图
19.6
能和上面提到的完全一致。
志文件的两个监控，key 分别是log 和 logrt。log 和 logrt在Zabbix 2.2中添加了“”，功
如果从头匹配到末尾的话，就浪费了资源而且效率极低。大家应该记得Zabbix有专门针对日
如某个配置文件。而对于日志文件，它的体积是非常庞大的，而且每次更新都是在末尾，所以
file.regexp”一样的两个功能。
file.regmatchpl",当匹配到的时候，返回1,没找到则返回0。在Zabbix 2.2中,它也增加了和“vsf
到第5行寻找出现的数字，返回第一个子组。
Zabbix监控系统深度实践
这是个非常简单的新特性，但又是非常重要的新特性。在以前使用 Zabbix 的过程中，查
本节是对于整个文件的一个正则匹配，它适用于一个文件不大、内容不太改变的文件，比
每当单击一个Application将其打开时，Zabbix 会刷新整个页面，这是个非常奇怪的机制。
有时，大家的需求可能只是返回一个是否找到的结果，Zabbix 也提供了这样的key：“vfs.
我们看个例子：vfs.file.regexp[/some/file,"（[0-9]+）Y",3,5,1]，即在“/some/ile”的第3行
和表示从日志的哪一行开始，到哪一行结束，中间进行匹配。
其中：
vfs.file.regexp[file, regexp, , , , ]
的设置和上一小节中的配置类似，这里不做赘述。
key 的格式也变为：
LatestData局部刷新
Zabok.onm.MyQL(5 tes)
Numberofnunning processesmysqd
MySQLSELECTstatementspersecond09May201319:37:016.81qps
MySQL INSERT stalements per second
MSQLDEETEstnts percnd0May201319：37:030qs
ySQL UPDATEstatementspersecond
图19-6
09 May 201319:35:571
d09 May201319:37:023.36ops
09May201319:37:04366.13mxps
---
## Page 300
来说，使用动态可载人模块在性能上的收获可能远小于找人开发这些模块的成本。我觉得更合
于目前互联网行业的兄弟们来说，应该算是个比较冷门的语言。而且对于一般使用Zabbix的
它们的用法如下。
符合规范的 SO 文件，就可以像Zabbix内置的那些 Items一样使用了。
文件提供。SO是 shared object 的全称，可以简单理解为Python 中被 import 的模块。只要编写
它不具备可移植性。比如我写的脚本会依赖我自己的环境，从而直接发送给别人，别人无法使用。
行用户自定义的脚本的时候，它是fork出一个进程来处理的，这显然对性能是有影响的。而且
控数据的。但是在规模较大或者监控项较多的情况下，就会有问题了。因为当 Zabbix Agent 执
的监控项。一般情况下，通过定义“user parameters”是可以做到用户自己写监控脚本，来监
19.7动态载入模块
Application都不会载入新的数据。
面了。从原理上，Zabbix在打开Latest Data页面的时候，已经将数据全部载人了，展开或关闭
能上来说，每次刷新页面都要载入重复的数据，对数据库也是重复的开销。
操作真的是噩梦，每次一点就要刷新页面，而且刷新后还要找到之前单击的Application。从性
在 zabbix_agentd.conf和 zabbix_server.conf 中需要配置的参数有 LoadModulePath和 LoadModule，
幸好，在Zabbix 2.2中，已经把这个给改掉了，单击Application展开的时候不会再刷新页
毫无疑问动态可载人模块这是一个非常棒的特性，但是开发这个需要使用C语言，这个对
mariadb.so就是我们写的模块了。
LoadModule=dummy.so
LoadModule=apache.so
LoadModulePath=/usr/local/lib/zabbix/agent/
基于上面这些理由，Zabbix在2.2版本迎来了动态载人模块的新功能。一个模块以一个SO
动态载入模块的英文名字是“loadable modules”，它的出现使得我们可以自己编写Zabbix
LoadModule=kernel.so
LoadModule=mariadb.so
这个是Zabbix2.2的重量级新特性，但是使用的范围还非常窄。
第19章Zabbix2.2新功能介绍
·285
---
## Page 301
·286°
是正常的。
真正设置返回值的是“SET_UI64_RESULT（result,1)”。return 这一句只是告诉Zabbix这次调用
就是返回的“1”了，其实，这个SYSINFO_RET_OK是在include/module.h中定义的，值为0。
目录结构如下。
公司相关的库，这样就能做到监控脚本的通用性了。
适的方法是大家遵从一套开发Zabbix 监控脚本的规范即可，除了语言自带的库，不要去依赖
Zabbix监控系统深度实践
char *param;
int zbx_module_dummy_echo (AGENT_REQUEST *request, AGENT_RESULT *result)
再看 dummy.echo 的逻辑，如下。
dummy.ping的逻辑异常简单，大家可能一看这“return SYSINFO_RET_OK”就认为这个值
return SYSINFO_RET_OK;
SET_UI64_RESULT（result, 1）;
int zbx_module_dummy_ping (AGENT_REQUEST *request, AGENT_RESULT *result)
先看 dummy.ping 的实现，如下。
（2）dummy.echo[paraml]：返回第一个参数，比如 dummy.echo[ABC]返回的是“ABC"。
-rw-rw-r--1alex alex
-rw-rw-r--
-rw-rw-r--
alex@alex:~/path/to/zabbix/src/modules/dummy$ ls -1
下面使用在官方博客上提供的一个例子来向大家说明。这里要开发的模块叫做dummy.so，
dummy提供了三个key，分别是：
一个可载人模块的例子
1alexalex
1 alex alex 9019 Apr 24 17:54 dummy.c
245 Apr 2417:54 README
67Apr 24 17:54Makefile
---
## Page 302
>params[num]
第0个参数，
REQUEST结构体自带的 nparam了，这个变量是参数的个数，AGENT_REQUEST的定义如下：
int zbx_module_dummy_random (AGENT_REQUEST *request, AGENT_RESULT *result)
最后看看最复杂的dummy.random，代码如下。
SET_STR_RESULT和return与前面类似。
核心的逻辑是“get_rparam（request,0)”，它是在 module.h 中定义的宏，用来获取参数中的
AGENT_REQUEST;
typedef struct
由于dummy.echo需要一个参数，所以开始就要先判断是不是有参数，这里就要使用AGENT
return SYSINFO_RET_OK;
SET_STR_RESULT(result, Strdup (param）);
param = get_rparam(request, 0);
return SYSINFO_RET_FAIL;
/*set optional error message*/
if (1 != request->nparam)
char
int
zbx_uint64_t lastlogsize;
char
int
char
，定义如下。
*paraml,
NULL)
*
*param2;
mtime;
**params;
nparam;
*key;
snbaxuexedu-sanba
第19章Zabbix2.2新功能介绍
●287·
---
## Page 303
·288°
到to 之间的一个随机数了。
Zabbix监控系统深度实践
randO是返回一个随机数，然后再根据to和 from的值取模。再加上from，就能获取到 from
SET_UI64_RESULT(result,
核心逻辑是以下几个。
to =atoi（param2）;
from = atoi（paraml）;
/* there is no strict validation of parameters for simplicity sake */
param2 = get_rparam(request, 1) ;
return SYSINFO_RET_OK;
SET_UI64_REsULT(result， from + rand（）%（to - from + 1));
if（from >to）
to = atoi(param2）;
from = atoi (paraml) ;
/* there is no strict validation of parameters for simplicity sake */
param2 = get_rparam (request, 1) ;
paraml
if (request->nparam != 2)
int from,to;
return SYSINFO RET_FAIL;
SET_MSG_RESULT (result, strdup ("Incorrect range given")) ;
return SYSINFO RET_FAIL;
SET_MSG_RESULT(result, Strdup("Invalid number of parameters")) ;
= get_rparam (request,
*
set optionalerror message
rand（）（to
0）
*
---
## Page 304
图19-7所示。
可以使用SNMPv3的context。
这时候可以使用context来区分后面的这些UPS设备。从Zabbix2.2开始，在下面这些地方都
程中增加了SHA和AES的验证方式。
19.8SNMP监控改进
了很多个UPS设备，但它暴露的只有一个SNMP接口，对于一个监控信息只有一个OID，那么
19.8.1SNMPv3相关的增强
另外，原来的Zabbix只支持MD5、DES，Zabbix 2.2中添加了对SHA和AES的支持，如
（3）Ild的 Item原型
（2）lld规则
（1）普通Items
SNMPv3的context是用来区分一个SNMP后面的多个设备的。比如一个UPS工作站连接
对于SNMPv3，Zabbix2.2增加了两个功能：一个是对Context 的支持，另一个是在验证过
（4）network侦测
Zabbix支持很多SNMP类型的监控，Zabbix2.2对SNMP做了一些增强。
AddCancel
Pmvacy pasphrase
Authentication protocol
Authentication passphrase
Authentication protocol
Secuntyleve!
Secuntyname
Cantext name
SNMPOID
Pont range
Check type
图19-7
161
SNMPv3agent
IthPm
AE
第19章Zabbix 2.2新功能介绍
·289·
---
## Page 305
·290°
“7.0”。在Zabbix 2.2中，会对完整的 OID 进行处理。
0和1两个OID,因为上面三条OID的最后一个值是“0”、“1”、“0”。而真实情况是“6.0"、“6.1"
index会发生问题，比如下面这种。
则不会重试。
于SNMP网络设备的自动侦测的效率非常低。
使用Net-SNMP库中的默认值—超时时间为1秒，重试5次。这样几乎需要6秒的时间，对
Zabbix监控系统深度实践
19.8.3lld的复杂OIDs
19.8.2
CISCO-POP-MGMT-MIB::cpmDS1ActiveDS0s.7.0
CISCO-POP-MGMT-MIB::cpmDS1ActiveDS0s.6.0
在 Zabbix 2.2之前，对于一个OID，Zabbix只会取其最后一个值来做lld，这样对于很长的
从Zabbix2.2开始，使用“Timeout”参数来设定超时时间，默认为3秒，而且一旦失败，
在Zabbix2.2之前，SNMP类型的监控是不能自己设置重试次数和超时时间的，Zabbix会
CISCO-POP-MGMT-MIB::cpmDS1ActiveDS0s.6.1
SNMP重试和超时机制改进
---
## Page 306
有不同的监控，具体是在 src/libs/zbxsysinfo/SYSTEM_TYPE/hostname.c中，其中SYSTEM_TYPE
ITEM, "system.hostname") ;
get system hostname from [&s])",CONFIGHOSTNAME_ITEM）;
HOSTNAME_ITEM,"system.hostname");
HOSTNAME,NULL};
zabbix_agent/zabbix_agentd.c:zabbix_log (LOG_LEVEL_WARNING,
从 grep 出的结果，我们基本就能确定代码的位置了。从目录来看，Zabbix 对于不同的系统