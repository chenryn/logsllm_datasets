considerable business ramiﬁcations. While it would not
compromise the general operation of the carrier, it would
affect their revenue. The inability to receive a phone call
will not only leave angry customers, it further impacts
the generated billing as subscribers are charged when
a call is connected.
If any subscriber is able to place
phone calls, but nobody is able to receive services, no
proﬁt is created. An exception here are short messages,
as SMS operates in store-and-forward fashion and does
not create billing on delivery of a message, but on its
submission.
36  22nd USENIX Security Symposium 
USENIX Association
Mobile Terminated Impersonation. The second threat
considers an attacker who aims to hijack a mobile ter-
minated service. As a result, the service would be de-
livered to the attacker instead of the victim. This turns
a passive adversary, who is able to observer air trafﬁc,
into an active attacker who can accept the mobile termi-
nated service and impersonate the victim. For example
an attacker could be interested in hijacking the delivery
of an SMS message. Consequently, it is possible to read
its content and at the same time prevent its submission
to the victim. In practice this could, for example, allow
an attacker to steal a mobile TAN (mTAN), which is of-
ten used as two-factor authentication for online banking,
or any other valuable secret from the message. We also
consider an attacker who wants to impersonate a victim
that is being called. By hijacking the MT call setup, it
is almost impossible for the calling person to verify the
callee’s identity by means other than the voice.
3.2 Paging Response Attack Description
Our attack is inspired by two speciﬁc properties of GSM
networks and its protocols.
Network State: GSM networks involve complex state
machines [4] and face high amounts of trafﬁc while op-
erating on tight radio resource constraints. Consequently,
it is desirable to keep states as short as possible.
Broadcast Information: the paging procedure is initi-
ated on a broadcast medium, namely the PCH portion
of the CCCH, and more importantly is performed before
any authentication or cipher setup takes place. This im-
plies that any subscriber, including an adversary phone,
is able to observe paging requests for other subscribers,
plus the inherent inability of the network to distinguish
between a fake paging response and a genuine one.
As a net result, it is possible to exploit these aspects
to send paging response messages on behalf of a victim
being paged. The network stack can under no circum-
stances determine which of the replies is the legitimate
paging response by the intended subscriber.
Denial of Service. The GSM documents do not specify
the network behavior in such a situation. Therefore, the
behavior of such a race condition is implementation de-
pendent and may be exploitable. However, the state ma-
chine nature of GSM protocols suggest that if an attacker
is able to answer a paging request faster than the intended
subscriber, it will no longer be in a state in which it ex-
pects a paging response and thus will ignore the message
of a victim. Consequently, the victim will receive a chan-
nel release message from the network. Next, the service
setup will not succeed if the attacker does not provide the
correct cryptographic keys required to complete authen-
tication and cipher setup. Accordingly, the service setup
cannot proceed and for example, a call will be dropped.
The result is a novel and powerful denial of service attack
against MT services that 1. does not rely on frequency
jamming; 2. does not rely on resource exhaustion; and
3. is very hard to detect.
We veriﬁed that it
is indeed possible to win the
race for the fastest paging response time, as we will
demonstrate. We were able to carry out such an attack
in all major German operator networks including O2,
Vodafone, T-Mobile, and E-Plus.
MT Session Hijacking. Exploiting the paging proce-
dure does not only allow to disturb communication. It
is important to note that in certain network conﬁgura-
tions, this attack could be abused beyond performing de-
nial of service attacks. Not all countries properly au-
thenticate each service and use encryption. For example,
only under 20% of the networks analyzed by the gsmmap
project [41] authenticate mobile terminated phone calls
100% of the time. 50% of the tested networks only au-
thenticate 10% of the services [28].
In such a network, an adversary can effectively
takeover any MT service that is not authenticated and
impersonate a victim. We assume a network without en-
cryption and insufﬁcient authentication as above. If the
attacker is able to successfully exploit the race condition
on the air interface, it is possible to directly hijack an
MT service by following the protocol speciﬁcations. The
paging response attack proceeds as in the DoS scenario.
However, in this case, by winning the race, an attacker
can accept, e.g., a victim’s phone call or short message.
The victim of such an attack is thus faced with two
consequences. For a mobile terminated call, it is not safe
to assume that the called party is indeed the desired per-
son. For short messages this implies that a message may
not reach the victim, but additionally also that its con-
tents cannot be considered secret.
Even if the network is conﬁgured to use encryption, an
attacker is merely required to perform an additional step.
In an encrypted network without proper authentication,
the paging procedure is followed by the cipher setup.
During this process to create an encrypted channel, the
network sends a cipher mode command message to no-
tify the MS of the encryption algorithm to be used. The
cipher mode complete response from the MS indicates a
completion of the cipher setup. In a network that uses
encryption, this response has to be encrypted using the
session key Kc as input to the A5 encryption algorithm.
This session key is derived from a secret key Ki that is
stored on the SIM card issued by the operator and a ran-
dom challenge RAND sent from the network to the MS.
Due to the lack of perpetual authentication, an attacker
can fully impersonate the victim after cracking the ses-
sion key Kc and sending the cipher mode complete mes-
USENIX Association  
22nd USENIX Security Symposium  37
sage. The cracked session key then allows to decrypt the
subsequent communication that follows the cipher setup.
In practice, essentially both commonly used GSM ci-
pher algorithms, A5/2 and A5/1, have been broken and
demonstrated to be cryptographically weak [17, 18, 23,
39]. The session key can be acquired before hijacking
the service by snifﬁng air trafﬁc and using the kraken
tool [40]. Also, some networks are conﬁgured to still
use A5/0 [26], which does not provide any encryption.
This further simpliﬁes such an attack in those commer-
cially deployed networks. Furthermore, for the subse-
quent paging response attack, an attacker does not even
require physical proximity to a victim, because, as ex-
plained earlier, the carrier network is paging throughout
an entire location area. In order to exploit this, an at-
tacker requires a mobile device that enables him to ob-
serve trafﬁc on the air interface and send arbitrary mes-
sages to the network. Additionally, a practical attack re-
quires the fake response to arrive prior to the victim’s
message. Therefore, the attack is signiﬁcantly challeng-
ing in terms of timing.
We successfully implemented both, the MT service
hijacking and the denial of service attack. For the sake
of simplicity, we obtained the session key through the
SIM browser in the engineering mode of a Blackberry
phone. Nevertheless, as outlined before this step, it can
be trivially obtained by a 3rd party by using a tool like
kraken [40]. Cracking of Kc is merely a step that has
to be performed prior to our attack, but is not part of
the problem itself, which is the race condition. Given
a known Kc, our code to take over an MT session, can
hijack the transmission of a short message delivery in a
real network.
It is important to note that the main reason for evaluat-
ing the paging race condition in GSM was the availability
of freely modiﬁable hardware and software. However,
modern telecommunication standards such as UMTS or
LTE are making use of exactly the same paging proce-
dure principles [11,14,15]. Insufﬁcient cryptography and
authentication further escalate the problem, but the root
cause does not only pertain to GSM.
We will continue to examine the requirements, bound-
ary conditions, and feasibility of mounting such an attack
in practice.
3.3 Experimental Setup
Launching such an attack requires hardware and soft-
ware to interact with GSM base stations. More precisely,
the attack relies on a device which allows us to mod-
ify its baseband (BB) implementation in order to con-
trol its radio communication. Traditionally this has been
very difﬁcult due to the closed nature of the GSM indus-
try (phone manufacturers, baseband vendors, infrastruc-
ture equipment suppliers). For many years there existed
no freely modiﬁable radio communication hardware with
GSM stack implementations. While the GSM speciﬁca-
tions are publicly available (very comprehensive though,
over 1000 PDF documents), there are very few manufac-
turers of GSM equipment who have released any public
documentation.
However, this situation has changed in the last years
with the availability of inexpensive hardware such as
the Universal Software Radio Peripheral (USRP) [22]
and various software implementations around the Osmo-
com [45] project. Additionally, in 2004 the source code
of the Vitelcom TSM30 mobile phone was uploaded
to a Sourceforge project [37] which allowed a broader
audience to study a GSM phone stack for the ﬁrst time.
Hardware Selection. There are basically three possi-
ble choices when it comes to the hardware selection of
our desired radio device: USRP, Vitelcom TSM30, and
certain TI Calypso chipset based phones. All of these
devices can be utilized as GSM radio transceivers with
software modiﬁcations. Yet some of these come with in-
trinsic disadvantages. First, for the USRP there is cur-
rently no GSM baseband implementation that allows the
device to be used as a handset. While we could have
implemented this, it would have been a very demanding
task. Second, even though available, the TSM30 source
code is a full-featured baseband implementation, which
is too complex for our needs. Moreover, the availabil-
ity of TSM30 devices is sparse and they are not easy to
obtain.
Instead we used Motorola C123 and Motorola C118
phones, which are based on the TI Calypso chipset.
These phones are inexpensive (around 20 Euros), easy
to obtain in quantity, and more importantly can be
used in combination with the Free Software baseband
implementation OsmocomBB [47]. This enables us
to receive over-the-air trafﬁc and send arbitrary GSM
frames.
Implementation. OsmocomBB implements a simpliﬁed
version of the GSM stack. The GSM physical layer (L1)
ﬁrmware runs on the phone, while the data-link layer
(L2) and Layer 3 (L3) run on a computer as an appli-
cation (layer23). L1 and layer23 communicate with each
other via a UART serial connection. Layer 2 implements
a modiﬁed version of the Link Access Protocol for the D
channel (LAPD) used in ISDN, called Link Access Pro-
tocol on the Dm channel (LAPDm). Layer 3 comprises
three sublayers: Radio Resource management, Mobility
Management, and Connection Management. As our at-
tack is based on paging, which is part of Layer 3, we
required a modiﬁed version of the layer23 application.
38  22nd USENIX Security Symposium 
USENIX Association
mobile application and introduced functionality that is-
sues n (where n is 10-20) phone calls in a row. Next,
the application terminates the connection before the tar-
get phone is ringing, but late enough so that the network
generates a paging request. The victim phone does not
ring during this early stage of the protocol ﬂow, because
it does not know yet what type of service is incoming. In
our tests we empirically determined that, e.g., a time of
3.7 seconds after the CC-Establishment conﬁrmed state
has the desired effect in the O2 network. The exact tim-
ing may differ slightly, depending on the network that
is used to initiate the call and the network in which the
victim resides.
At the same time, a second phone is monitoring the
PCH of any BTS within the target location area for pag-
ing requests. All TMSIs contained in the observed pag-
ing requests are logged together with a precise timestamp
of the event. It makes sense to choose the ARFCN with
the best signal reception to minimize errors and possible
delays. By ﬁrst limiting the resulting log to time ranges
in which our calls were initiated, we can extract a num-
ber of candidate TMSIs. Further ﬁltering the result set
for TMSIs occurring in repeating patterns that reﬂect our
call pattern yields to a very small set of candidate TM-
SIs or even single TMSIs. This process can be repeated
to narrow down the set of candidate TMSIs to a man-
ageable number. If the network uses IMSIs for identi-
ﬁcation, then an attacker could use the same process to
determine the subscriber’s identity. Alternatively, an at-
tacker could use a Home Location Register query service
to obtain the IMSI directly [1].
By default, the monitoring phone does not react to any
paging request. After obtaining the victim TMSI, we
transfer the TMSI via HDLC over the serial connection
to the monitoring phone. This also changes the phone’s
role from a solely passive listener to an attacker. It starts
to compare TMSIs contained in paging request with the
supplied victim TMSI. On every match, the attacking
phone promptly initiates the previously introduced pag-
ing protocol procedure to respond ﬁrst. As a result, the
paging response by the victim will be ignored and the
call will be dropped unless we fully accept the service.
At this point, it is not possible to reach the victim any-
more. To block MT services over a longer period of time,
the subscriber identiﬁcation procedure needs to be reis-
sued due to TMSI reallocations over time [4].
3.5 Feasibility
The success of such an exploit depends essentially on
the response time of the attacker and victim devices. To
achieve maximum impact, an attacker phone needs to re-
spond faster than the “average” customer device. The
response time of the phone depends on a number of fac-
Figure 3: Experimental setup: Motorola C1XX phones
with custom ﬁrmware, GPS receivers, and a laptop for
serial communication.
In practice our attack is particularly time critical, be-
cause we have to win a race condition on the air inter-
face. It became evident that a layer23 implementation
that runs on a computer is far too slow to win the race
given the bottlenecks such as queueing between multiple
layers, scheduling, and the use of UART serial communi-
cation. Consequently, we reimplemented a minimal ver-
sion of LAPDm and Layer 3 directly in the L1 ﬁrmware
to allow it to run solely on the phone. Speciﬁcally this
includes the paging protocol, which is part of the radio
resource sublayer.
Figure 3 shows our experimental setup consisting of
a notebook and several OsmocomBB phones. The serial
cables are required in order to ﬂash the ﬁrmware. Using
this implementation we can camp on speciﬁc ARFCNs,
observe paging requests within a location area, and send
arbitrary GSM layer2/layer3 messages in a timely man-
ner. Additionally, we used OpenBTS [20] in combina-
tion with a USRP as a BTS to test our setup and perform
various measurements as later described in Section 3.5.
3.4 Targeted Attacks
Attacking individual persons requires our OsmocomBB
phone to observe air trafﬁc and respond to speciﬁc pag-
ing requests. In particular paging requests that contain
the victims mobile identity. For privacy reasons, most
network operators use TMSIs as mobile identities rather
than the static IMSI. The TMSI is only valid within a lo-
cation area and is subject to frequent changes [9]. There-
fore, we need to determine the presence and the TMSI of
a victim in a given location area.
For this we implemented the method proposed by
Kune et al.
to reveal the mapping between TMSI and
subscriber [30]. We modiﬁed OsmocomBB’s layer23
USENIX Association  
22nd USENIX Security Symposium  39
Table 1: List of tested phones, baseband chipset, and base-
band vendor.
Phone model
BB chipset
BB vendor
Blackberry Curve 9300 Marvell PXA930
Marvell
iPhone 4s
Samsung Galaxy S2
Nokia N900
Nokia 3310
Motorola C123
SciPhone Dream G2
Sony Ericsson W800i
MDM6610
XMM 6260
TI Rapuyama
TI MAD2WDI
TI Calypso
MT6235
DB2010
Qualcomm
Inﬁneon
Nokia
Nokia
OsmocomBB1
Mediatek
Ericsson
Sony Xperia U
NovaThor U8500
ST-Ericsson
1 Layer1 paging attack code and modiﬁed layer23 application.
tors that are difﬁcult to measure. This includes signal
quality, weather, network saturation, application proces-
sor operating system, GSM time slots, and others. Yet,
most of these parameters only have very little impact on
the overall response time.
As the baseband chipset and its GSM stack imple-
mentation handles all radio communication, including
the upper layer GSM logic, we suspect it to be a key
contributor to a fast response time. We validate this
claim by measuring the timing of various phones with
different baseband vendors. Referring to a market
report [2], Qualcomm and Intel alone account for 60%
of the baseband revenue in 2011. Yet, relevant baseband
chips and stacks that are currently available in mobile
phones on the market are Qualcomm, Intel (formerly
Inﬁneon), Texas Instruments, ST-Ericsson, Renesas
(formerly Nokia), Marvell, and Mediatek. We tested
timing behavior for different phones for each of these
vendors. Additionally, we also tested the response time
for the OsmocomBB layer23 application to back up our
claim that this implementation is too slow to perform
our attack. Table 1 lists the tested phone models, chipset
names, and the corresponding baseband vendor.
Timing Measurements. It is not feasible to modify the
tested devices itself for measurements, as we only have
access to the operating system on the application pro-
cessor, and not the baseband. Furthermore, the phone
could only guess when its response hits the serving net-