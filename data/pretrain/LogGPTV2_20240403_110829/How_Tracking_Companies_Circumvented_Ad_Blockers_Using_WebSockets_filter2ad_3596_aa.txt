# How Tracking Companies Circumvent Ad Blockers Using WebSockets

## Authors
Muhammad Ahmad Bashir, Sajjad Arshad, Engin Kirda, William Robertson, Christo Wilson  
Northeastern University  
{ahmad, arshad, ek, wkr, cbw}@ccs.neu.edu

## Abstract
In this study of 100,000 websites, we document how Advertising and Analytics (A&A) companies have used WebSockets to bypass ad blockers, exfiltrate user tracking data, and deliver advertisements. Specifically, we leverage a long-standing bug in Chrome (the world’s most popular browser) in the `chrome.webRequest` API that prevented blocking extensions from intercepting WebSocket connections. We conducted large-scale crawls of top publishers before and after this bug was patched in April 2017 to examine which A&A companies were using WebSockets, what information was being transferred, and whether companies altered their behavior after the patch. Our findings indicate that a small but persistent group of A&A companies use WebSockets, and several engage in troubling behaviors such as browser fingerprinting, exfiltrating the DOM, and serving advertisements, which would have circumvented blocking due to the Chrome bug.

## I. Introduction
The use of techniques to block online ads and prevent tracking on the web has proliferated in recent years. Measurement studies estimate that Adblock Plus is used by roughly 16–37% of web users [41], [30], and numerous other extensions like Ghostery, Disconnect, Privacy Badger, and uBlock Origin have devoted user bases.

In response to the proliferation of blocking and privacy tools, online Advertising and Analytics (A&A) companies have fought back in various ways. This includes industry self-regulation such as the Ad Choices initiative [3], as well as technological mechanisms like anti-adblocking scripts [33], [36]. Most alarmingly, some companies have attempted to circumvent privacy tools, with the most famous case being Google’s evasion of Safari’s third-party cookie blocking policy, which resulted in a $22.5M settlement with the FTC [12].

In August 2016, privacy-conscious users began to notice ads appearing on specific websites on Chrome, despite the use of ad-blocking extensions [21], [42]. Online sleuths determined that (1) these ads were being downloaded via WebSockets because (2) a long-dormant bug in the `chrome.webRequest` API in Chromium [23] allowed WebSocket connections to bypass ad-blocking extensions. We refer to this issue as the `webRequest Bug` (WRB). Google patched the WRB in Chrome 58, released on April 19, 2017 [40].

In this paper, we study the behavior of A&A companies with respect to the WRB. Prior to April 19, 2017, there existed a five-year window in which blocking extensions in Chrome (the world’s most popular web browser [48]) could be circumvented through the use of WebSockets. We ask the following questions: which A&A companies, if any, decided to leverage this bug? Similarly, after the release of Chrome 58, did A&A companies continue to use WebSockets, or did they revert to HTTP/S? These questions are important, as they speak to the lengths that A&A companies are willing to go to track users and monetize impressions.

To answer these questions, we performed four crawls of the top Alexa websites: two just prior to the release of Chrome 58, and two after. Our crawls were conducted using stock Chrome coupled with custom instrumentation to record the inclusion tree of resources within each webpage [4], [7], [29] (see Section III for details).

Using this data, we make the following key findings:
- Although we find that WebSocket usage is rare across the web (∼2% of publishers), 55–61% of WebSockets are related to tracking and advertising in some way. Furthermore, we find that A&A sockets are more prevalent on Alexa top-10K publishers.
- We observe 91 A&A domains initiating and 17 A&A domains receiving WebSocket connections, including some of the largest players in the online advertising ecosystem (e.g., Google and Facebook).
- The overall frequency of WebSockets use by A&A domains did not change after the release of Chrome 58, although the number of unique initiators dropped from 72 to 19, as major ad networks (e.g., Google) discontinued their use.
- We find sensitive information being sent over WebSockets to A&A companies. 33across collects browser fingerprints [43], [35], [1], [25], [15], while Hotjar collects the entire DOM, which can contain sensitive information such as search queries, unsent messages, etc., within the given webpage. Lockerdome was using WebSockets to serve URLs to ads. These results highlight that the WRB did enable A&A companies to circumvent blocking extensions in ways that users may find objectionable.

## II. Background
We begin by providing an overview of WebSockets, the `webRequest` API, and a brief timeline of the WRB.

### A. WebSockets
The WebSocket protocol, standardized by RFC 6455 in 2011, gave JavaScript developers access to a bidirectional, socket-like network interface, where client-side JavaScript can open a WebSocket connection (with or without TLS encryption) to a server. This protocol enables developers to create web applications that receive real-time information or "pushed" messages from the server-side, without wasting bytes or incurring latency due to the constant construction of new TCP connections.

### B. `webRequest` API
As of 2017, major browser vendors like Firefox and Edge support the Chrome extension API. One of its key capabilities is the `chrome.webRequest` API, which allows extensions to inspect, modify, and even drop outgoing network requests. The `chrome.webRequest.onBeforeRequest` callback is often used by ad blockers and privacy-preserving tools to filter undesirable outgoing network requests [23].

### C. The Rise and Fall of a Bug
In May 2012, users created a bug report in the Chromium issue tracker after observing that WebSocket connections did not trigger the `chrome.webRequest.onBeforeRequest` callback [23]. We refer to this as the `webRequest Bug` (WRB). The WRB remained unpatched for four years. In late 2014, AdBlock Plus users began to report that unblockable ads were appearing on specific webpages, but only in Chrome [2]. By mid-2016, EasyList and uBlock Origin users were also observing unblockable ads [21], [42]. Users investigated and determined that the ads were being loaded via WebSockets, i.e., the WRB was being leveraged by some ad networks to circumvent blockers. Blocking extensions implemented complicated workarounds to mitigate the WRB in the absence of a permanent bug fix [2], [20]. The bug was finally patched in Chrome 58, released on April 19, 2017 [40]. Figure 1 shows the timeline of the key events related to the WRB.

## III. Methodology
The goal of our study is to analyze the usage of WebSockets on the web and to determine whether A&A companies are using them to bypass ad blockers. In this section, we outline our data collection methodology. We also describe the inclusion trees produced by our crawler and explain how we use these to detect WebSockets.

### A. Inclusion Tree
To determine which A&A companies are using WebSockets to circumvent ad blocking, we are not only interested in determining the existence of a WebSocket on a webpage but also in figuring out which parties established the socket in the first place. Prior studies have shown that relying on HTTP requests to figure out resource inclusions can be misleading due to dynamic code (e.g., JavaScript, Flash, etc.) from third parties [7]. This occurs because the HTTP Referer header is set to the first-party domain, even if the resource making the request originated from a third party. Furthermore, using DOM trees to capture resource inclusions also does not work because the DOM captures syntactic structures rather than semantic relationships between resource inclusions.

To solve this problem, we use inclusion trees, originally introduced by Arshad et al. [4]. Inclusion trees capture the semantic relationship between resource inclusions in websites. Figure 2 shows a sample DOM tree and its corresponding inclusion tree. We capture inclusion trees from Chrome by leveraging the Chrome Debugging Protocol [11]. Specifically, to capture the inclusion relationships within Chrome using the Debugger domain, we track JavaScript by collecting the `scriptParsed` events, which are triggered by the execution of inline and remote scripts. We observe further resource requests via the `requestWillBeSent` and `responseReceived` events in the Network domain. Using these two events, we can capture most of the dynamic inclusion chains. To capture the inclusion of iframes, we collect `frameNavigated` events in the Page domain.

### B. WebSocket Detection and Labeling
A main distinguishing feature of our tool from previous work [4], [7], [29] is its ability to detect WebSocket implementation requests initiated by JavaScript. In our implementation, we treat WebSockets as child nodes of the JavaScript node responsible for initiating them. Figure 2 shows how `adnet/data.ws` becomes the child of `ads/script.js`. To identify WebSocket requests, we capture a number of events in the Network domain: `webSocketCreated`, `webSocketWillSendHandshakeRequest`, `webSocketFrameSent` for initiation; `webSocketHandshakeResponseReceived` and `webSocketFrameReceived` for data collection; and `webSocketClosed` for socket termination.

**Detecting A&A Resources:**
To determine whether a socket was initiated by scripts or objects that originated from A&A domains, we first derive a set of A&A domains from the inclusion chains provided by Bashir et al. [7]. Each resource in [7] is tagged as A&A or non-A&A using the EasyList and EasyPrivacy rule lists; from this dataset, we extract a set of all 2nd-level domains \( D \). Let \( a(d) \) and \( n(d) \) be the number of times a given 2nd-level domain \( d \in D \) was labeled as A&A and non-A&A, respectively. We construct our final A&A set \( D' \) containing all \( d \in D \) where \( a(d) \geq 0.1 \times n(d) \), i.e., we filter out 2nd-level domains that are labeled as A&A less than 10% of the time to eliminate false positives.

To detect WebSockets that were initiated by A&A resources, we descend the branch of the inclusion tree that includes the socket. If the domains of any of the parent resources are present in \( D' \), we consider the socket to be included by an A&A resource. We refer to such sockets as A&A sockets.

### C. Data Collection
As an initial seed of websites to crawl, we collected 1.8 million unique websites from 17 distinct categories provided by Alexa Top Categories. We sampled the top 5.8K websites from each category. Additionally, we sampled 5.8K websites from Alexa’s top 1 million. This approach gives us a wide diversity of popular and unpopular websites across many different categories. After removing duplicates, around 100K websites remained, which we used for our crawls.

We built a crawler on top of the Chrome Remote Debugging Protocol to drive the Chrome browser. The crawler works as follows: for every website \( w \) in our list, it visits the homepage. It then proceeds to extract all links \( L \) from the homepage that point to \( w \). Our crawler randomly visits 15 links from \( L \), waiting one minute between subsequent visits.

Overall, we performed four crawls over our sampled 100K websites. Two crawls were performed just prior to the release of Chrome 58 (which included the patch for the WRB bug) [40] between April 2–April 5 and April 11–April 16, 2017. To observe if the patch affected the usage of WebSockets by websites and A&A companies, we ran two more crawls after the release of Chrome 58. The first of these crawls was performed right after the patch between May 7–May 12, 2017. The second crawl was performed between October 12–October 16, 2017. Table I shows the high-level statistics for all four crawls in our study.

## IV. Analysis
In this section, we analyze our dataset to understand the usage of WebSockets, the A&A companies involved, and the content being sent and received over the socket.

### A. Overall WebSocket Usage
We begin by providing an overview of WebSocket usage in Table I. We observe that only ∼2% of the websites use WebSockets (column 2), with 6–12 WebSocket connections on average per website that uses the technology.

Among the WebSockets we observe, >90% contact a third-party domain (i.e., the WebSocket was cross-origin) and 55–73% contact an A&A domain (column 5). Across all four crawls, we observe 383 unique third-party domains and 17 A&A domains being contacted through WebSockets. Similarly, 55–61% of the WebSockets are initiated by a resource from an A&A domain (column 3). In total, we observe resources from 91 unique A&A domains initiating WebSockets.

Figure 3 shows the CDF of the number of WebSocket connections with respect to initiators and receivers. We see that A&A initiators and receivers are involved in an order of magnitude more WebSocket connections than non-A&A initiators and receivers. This reinforces our findings from Table I: of the domains that use WebSolvers, the heaviest users are involved in A&A.

Figure 4 shows the CDF of the number of unique parties contacted by initiators and contacting receivers. We see that A&A initiators contact only a few select partners, whereas A&A receivers are contacted by many parties. More than 47% of the A&A receivers were contacted by ≥10 parties. This accords with the results from Table I: there is dramatic fan-in from the 91 A&A initiators to the 17 A&A receivers.

Our overall observations about WebSocket usage are similar to those of Snyder et al. [44]. In [44], the authors crawled the Alexa Top-10K websites in 2016 and observed 544 (5.4%) sites using WebSockets, while 65% of those connections were blocked by AdBlock Plus1. Contrasting this to our results in Table I, we observed fewer websites using WebSockets, and a somewhat lower fraction of A&A sockets. These differences may be due to the larger sample size and broader coverage of less popular websites in our crawls.

**Publishers:**
Now that we know that WebSockets are being used by some A&A domains, we ask: Is this practice widespread across publishers? To answer this question, we plot Figure 5, showing the fraction of A&A and non-A&A WebSockets observed over publishers sorted by Alexa rank. We see that the fraction of A&A sockets is twice that of non-A&A sockets across all ranks. We also see that both types of WebSockets are most prevalent on highly-ranked domains, with a drop occurring between 10K and 20K. The fraction of A&A sockets in top 10K publishers is 4.5 times higher than in the next 10K publishers.

### B. Top WebSocket Initiators and Receivers
Table II and Table III show the top 15 WebSocket initiators and receivers, respectively, sorted by the total number of unique receivers and initiators. A&A initiators and receivers are highlighted in bold.

## V. Conclusion
In conclusion, our study reveals that a small but persistent group of A&A companies have used WebSockets to bypass ad blockers, exfiltrate user tracking data, and deliver advertisements. The `webRequest Bug` in Chrome, which was patched in April 2017, enabled this behavior. Our findings highlight the need for continued vigilance in the development and maintenance of browser security features to protect user privacy and control over their browsing experience.