PUT ON YOUR TINFO_T HAT
MIAUBIZ  
DEFCON 23 
AUGUST 7TH 2015
C++ templates
template  
Type max(Type a, Type b) { 
    return a > b ? a : b; 
}
specialized
char max(char a, char b) { 
    return a > b ? a : b; 
}
specialized
uint32_t max(uint32_t a, uint32_t b) 
{ 
    return a > b ? a : b; 
}
C++ Templates
`anonymous 
namespace'::OpenBSDTargetInfo::getOSDeﬁnes(
clang::LangOptions const&,llvm::Triple 
const&,clang::MacroBuilder &)
templates
std::__1::list,std::__1::allocator>,std::_
_1::allocator,std::__1::allocator>>>::er
ase(std::__1::__list_const_iterator,std::__1::all
ocator>,void 
*>,std::__1::__list_const_iterator,std::__1::allo
cator>,void *>)
THREE WAYS TO FIX THIS.
SOLUTION 1
idc.GetTinfo
Python> idc.GetTinfo(idc.here()) 
('\x0cp\x05\x03\xffA\n=\x04#
\x99m\n=\x04#\x95v', '\x05this
\x01')
idc.GetTinfo
the type: “\x0cp\x05\x03\xffA
\n=\x04#\x99m\n=\x04#\x95v”  
the args: “\x05this\x01”
idc.ApplyType
idc.ApplyType(ea, idc.GetTinfo(ea)) 
True
reverse the IDA
\x0cp\x05\x03\xffA\n=\x04#
\x99m\n=\x04#\x95v
the juicy bit
\n= \x04 # \x99m 
\n= \x04 # \x95v
* etc
length
ordinal 
follows
the ordinal
Local Type Ordinals
get ordinal by name
decode the ordinal
\x99m -> 0x996d 
decode the ordinal
0x996d ->   
(0x99&0x7f) * 0x40 + 
(0x6d & ~0x40) 
-> 1645 
decode the ordinal
\x95v -> 0x9575
decode the ordinal
0x9575 ->  
(0x95 & 0x7f) * 0x40 + 
(0x76 & ~0x40) 
-> 1398
so 1645 and 1398
encode an ordinal
((ordinal >> 6) & 0xff | 0x80) + 
(ordinal & 0x3f | 0x40)
reconstitute the string
Python> 
idc.ApplyType(idc.here(), 
('\x0cp\x05\x03\xffA\n=\x04#AA
\n=\x04#bb', '\x05this\x01')) 
True
SOLUTION 2: 
TYPES CAN HAVE ANY NAME
types can have any name
rename all types
rename all involved types to benign 
names
set types
rename types back
this API does what it says
idaapi.rename_named_type(
idaapi.cvar.idati, 
CURRENT_NAME, NEW_NAME, 
idaapi.NTF_TYPE);
SOLUTION 3: 
TINFO_T APIS
tinfo_t yeah
vdui = get_tform_vdui(get_current_tform()) 
de = idaapi.decompile(idc.here()) 
lvar = de.arguments[0] 
a_type = idaapi.tinfo_t() 
a_type.get_named_type(idaapi.cvar.idati, 
“some>”); 
ptr_type = tinfo_t() 
ptr_type.create_ptr(a_type) 
vdui.set_lvar_type(lvar, ptr_type)
tinfo_t yeah
a_type = idaapi.tinfo_t() 
a_type.get_named_type( 
idaapi.cvar.idati, 
“some>”) 
tinfo_t yeah
vdui.set_lvar_type( 
  lvar, a_type)
and the return type?
there is no lvar that changes the 
return type of a function
can’t add / remove arguments
SOLUTION 3.1: 
CREATE AN ARBITRARY FUNCTION TYPE
create a function type
_, tp, _ = idc.ParseType( 
“static volatile OWORD* 
__fastcall lol(static volatile 
unsigned double);”, PT_TYP) 
use weird marker types no real person would use. 
put in the number of arguments you want.
create a function type
tp_replaced = 
do_stuff_from_solution1(tp)
create a function type
fn_tinfo = tinfo_t() 
fn_tinfo.deserialize(cvar.idati, 
                tp_replaced, “”) 
create a function type
apply_tinfo2(ea, 
fn_tinfo, TINFO_DEFINITE 
(apply_tinfo doesn’t apply tinfo)
create a function type
_, tp, _ = idc.ParseType(“static volatile 
OWORD *__fastcall lol(static volatile 
unsigned double);”, PT_TYP) 
tp_replaced = do_stuff_from_solution1(tp) 
fn_tinfo = tinfo_t() 
fn_tinfo.deserialize(cvar.idati, 
tp_replaced, “”) 
apply_tinfo2(ea, fn_tinfo, TINFO_DEFINITE)