the attack is ﬁnished. Since the attack is not continuously received uniformly by
all the nodes, because of their mobility, there are some gaps during which the
alarms are enabled and counted as false positives. The continuous attacks are
longer and present more of these gaps. This shows, once again, the complexity
of the performance accounting using these metrics.
Anomaly Detection and Mitigation for Disaster Area Networks
357
Table 1. Detection performance for the continuous attacks
# Adversaries
Draining Attack
Grey Hole Attack
per
partition
2
1
0
Best
Worst Average
Average
DR FPR DR FPR DR FPR DR FPR DR FPR DR FPR
94% 6% 95% 6% 93% 8% 63% 8% 70% 5% 60% 10%
90% 5% 97% 3% 85% 7% 44% 4% 55% 2% 40% 7%
58% 5% 93% 4% 45% 8% 29% 6% 66% 3% 11% 9%
Worst
Best
6 Conclusions
In this article we have presented a holistic anomaly detection and mitigation ap-
proach for dissemination protocols for intermittently connected networks. The
approach has been integrated and evaluated in the Random Walk Gossip dis-
semination protocol applied within a disaster area scenario.
We have adopted a statistical-based detector algorithm to combat the typical
resource constraints associated with the devices with respect to CPU power used
for learning and detection. The threat model for which the approach has been
validated focuses on making a big impact on fair nodes with little invested energy
by the adversary. Moreover, the adversary behaviour is so similar to the normal
behaviour that is hard to distinguish the attacks by creation of constraints,
signatures or rules. So this environment is indeed a challenging environment.
Taking into account this threat model we have had to add a mitigation mode
to the basic protocol operation. When in this mode, small modiﬁcations in the
protocol create a chance of deciding when the own behaviour has to be changed
due to a suspected attack. This is diﬀerent from earlier works where identiﬁcation
of the culprit and individual isolation or speciﬁc treatment is the response. The
integrated protocol can of course be run in the original no-mitigation mode
when no attacks are expected and then no protection is provided either. Hence,
the added detection-mitigation algorithm can be seen as an enhancement of an
earlier protocol that works in a fair-play scenario. We believe this way of thinking
can be generalised and applied in other dissemination protocols too.
Furthermore, our approach assumes full knowledge of the adversary about the
protocol and even the anomaly detection scheme. The adversary cannot easily
adapt to avoid detection by the algorithm due to the unpredictability of what
learning has accomplished in the normality model. This is a simple and powerful
aspect of our scheme.
The evaluation of the approach has demonstrated its eﬀectiveness by show-
ing resistance to the attacks using network performance metrics. In two attack
modes, transient and continuous, we have shown that mitigation brings back the
network to performance levels close to pre-attack scenarios. The analysis has also
highlighted the complexity of using the classic metrics, detection rate and false
positive rate, in highly partitioned networks. These metrics are not appropriate
to measure the detection performance on a global basis in highly partitioned
networks.
358
J. Cucurull, M. Asplund, and S. Nadjm-Tehrani
Future work includes identifying the applicability of the methods to more at-
tack types, an intermittent version of the current attacks, and the addition of
new threat models. It is also interesting to explore which parts of this resilience to
attacks can be beneﬁcially integrated into the dissemination algorithm. Current
work includes the addition of two new components to the detection-mitigation
loop. First, a diagnosis element that runs in parallel with a general (early) mit-
igation. This would be useful to adapting the mitigation without pinpointing
attacker nodes. Second, an adaptive component that decides when and how to
end a given mitigation phase, and a return to the less careful mode.
Another aspect in which more research is required is the study of impact of
mitigation actions. When a node enables the mitigation, in some cases this may
change the behaviour of the system and can be detected as an anomaly creating
a recursive chain of alarms among the nodes. This is a complex problem because
the behaviour of the system can be aﬀected by the mitigation actions applied
by all the nodes.
Acknowledgements
This work was supported by a grant from the Swedish Civil Contingencies
Agency (MSB) and the national Graduate school in computer science (CUGS).
References
1. Denning, P.J.: Hastily formed networks. Communications of the ACM 49(4), 15–20
(2006)
2. Steckler, B., Bradford, B.L., Urrea, S.: Hastily formed networks for complex hu-
manitarian disasters after action report and lessons learned from the naval post-
graduate school’s response to hurricane katrina. Technical Report, Naval Postgrad-
uate School (2005)
3. Asplund, M., Nadjm-Tehrani, S.: A partition-tolerant manycast algorithm for dis-
aster area networks. In: IEEE Symposium on Reliable Distributed Systems, pp.
156–165 (2009)
4. Aschenbruck, N., Gerhards-Padilla, E., Gerharz, M., Frank, M., Martini, P.: Mod-
elling mobility in disaster area scenarios. In: MSWiM 2007: Proceedings of the 10th
ACM Symposium on Modeling, Analysis, and Simulation of Wireless and Mobile
Systems, pp. 4–12. ACM, New York (2007)
5. Ye, N., Chen, Q.: An anomaly detection technique based on a chi-square statistic for
detecting intrusions into information systems. Quality and Reliability Engineering
International 17(2), 105–112 (2001)
6. Yang, H., Luo, H., Ye, F., Lu, S., Zhang, L.: Security in mobile ad hoc networks:
challenges and solutions. IEEE Wireless Communications 11(1), 38–47 (2004)
7. Prasithsangaree, P., Krishnamurthy, P.: On a framework for energy-eﬃcient secu-
rity protocols in wireless networks. Computer Communications 27(17), 1716–1729
(2004)
8. Farrell, S., Cahill, V.: Security considerations in space and delay tolerant networks.
In: Second IEEE International Conference on Space Mission Challenges for Infor-
mation Technology, Washington, DC, USA, pp. 29–38. IEEE, Los Alamitos (2006)
Anomaly Detection and Mitigation for Disaster Area Networks
359
9. Liu, Y., Li, Y., Man, H., Jiang, W.: A hybrid data mining anomaly detection
technique in ad hoc networks. International Journal of Wireless and Mobile Com-
puting 2(1), 37–46 (2007)
10. Garc´ıa-Teodoro, P., D´ıaz-Verdejo, J., Maci´a-Fern´andez, G., V´azquez, E.: Anomaly-
based network intrusion detection: Techniques, systems and challenges. Computers
& Security 28(1-2), 18–28 (2009)
11. Nakayama, H., Kurosawa, S., Jamalipour, A., Nemoto, Y., Kato, N.: A dynamic
anomaly detection scheme for AODV-based mobile ad hoc networks. IEEE Trans-
actions on Vehicular Technology 58(5), 2471–2481 (2009)
12. Cabrera, J.B., Gutirrez, C., Mehra, R.K.: Ensemble methods for anomaly detec-
tion and distributed intrusion detection in mobile ad-hoc networks. Information
Fusion 9(1), 96–119 (2008)
13. Chuah, M., Yang, P., Han, J.: A ferry-based intrusion detection scheme for sparsely
connected ad hoc networks. In: Fourth Annual International Conference on Mobile
and Ubiquitous Systems: Networking & Services, pp. 1–8. IEEE, Los Alamitos
(2007)
14. Scalavino, E., Russello, G., Ball, R., Gowadia, V., Lupu, E.C.: An opportunistic
authority evaluation scheme for data security in crisis management scenarios. In:
ASIACCS 2010: Proceedings of the 5th ACM Symposium on Information, Com-
puter and Communications Security, pp. 157–168. ACM, New York (2010)
15. Thamilarasu, G., Balasubramanian, A., Mishra, S., Sridhar, R.: A cross-layer based
intrusion detection approach for wireless ad hoc networks. In: IEEE International
Conference on Mobile Adhoc and Sensor Systems Conference, pp. 854–861. IEEE,
Los Alamitos (2005)
16. Sun, B., Wu, K., Pooch, U.W.: Zone-based intrusion detection for ad hoc networks.
International Journal of Ad Hoc & Sensor Wireless Networks. Old City Publishing
(2004)
17. Tseng, C.H., Wang, S.H., Ko, C., Levitt, K.: DEMEM: Distributed evidence-driven
message exchange intrusion detection model for MANET. In: Zamboni, D., Kr¨ugel,
C. (eds.) RAID 2006. LNCS, vol. 4219, pp. 249–271. Springer, Heidelberg (2006)
18. Huang, Y.a., Lee, W.: A cooperative intrusion detection system for ad hoc net-
works. In: SASN 2003: Proceedings of the 1st ACM Workshop on Security of Ad
Hoc and Sensor Networks, pp. 135–147. ACM, New York (2003)
19. Deodhar, A., Gujarathi, R.: A cluster based intrusion detection system for mo-
bile ad hoc networks. Technical Report, Virginia Polytechnic Institute & State
University
20. Wang, S.H., Tseng, C.H., Levitt, K., Bishop, M.: Cost-sensitive intrusion responses
for mobile ad hoc networks. In: Kruegel, C., Lippmann, R., Clark, A. (eds.) RAID
2007. LNCS, vol. 4637, pp. 127–145. Springer, Heidelberg (2007)
21. Moore, D.S., Cabe, G.P.M.: Introduction to the practice of statistics, 5th edn. W.
H. Freeman, New York (2005)
Community Epidemic Detection Using
Time-Correlated Anomalies
Adam J. Oliner, Ashutosh V. Kulkarni, and Alex Aiken
{oliner,ashutosh.kulkarni,aiken}@cs.stanford.edu
Stanford University(cid:2)
Abstract. An epidemic is malicious code running on a subset of a com-
munity, a homogeneous set of instances of an application. Syzygy is an
epidemic detection framework that looks for time-correlated anomalies,
i.e., divergence from a model of dynamic behavior. We show mathemati-
cally and experimentally that, by leveraging the statistical properties of
a large community, Syzygy is able to detect epidemics even under adverse
conditions, such as when an exploit employs both mimicry and polymor-
phism. This work provides a mathematical basis for Syzygy, describes
our particular implementation, and tests the approach with a variety of
exploits and on commodity server and desktop applications to demon-
strate its eﬀectiveness.
Keywords: epidemic detection, anomalies, community.
1 Introduction
Consider a set of instances of an application, which we call a community. Two
examples of communities are all the mail servers in an organization or all the
browsers on a cluster of workstations. Assume some subset of these instances,
or clients, are compromised and are running malicious code. The initial breach
(or breaches) went undetected and the existence of the exploit is unknown, so
the malicious code may continue running indeﬁnitely, perhaps quietly stealing
computing resources (as in a zombie network), spooﬁng content, denying service,
etc. We present a method for detecting such situations by using properties of
the aggregate behavior of the community to reliably identify when a subset of
the community is not behaving properly.
A client is either healthy and exhibits correct behavior or infected and exhibits
incorrect behavior; our method detects epidemics, meaning when a subset of the
community is infected. The user speciﬁes what constitutes correct operation for
individual clients by providing a model, which may be incomplete (omit correct
behaviors), or unsound (admit incorrect behaviors), or both. For example, a
community of web servers may be modeled by the typical distribution of response
times each provides. The class of attacks we want to detect are those that cause
(cid:2) This work was supported in part by NSF grants CCF-0915766 and CNS-050955, and
by the DOE High-Performance Computer Science Fellowship.
S. Jha, R. Sommer, and C. Kreibich (Eds.): RAID 2010, LNCS 6307, pp. 360–381, 2010.
c(cid:2) Springer-Verlag Berlin Heidelberg 2010
Community Epidemic Detection Using Time-Correlated Anomalies
361
undesirable deviation from normal behavior, regardless of the attack vector (e.g.,
buﬀer overrun, insider attack, or hardware tampering). Our focus is on detecting
epidemics in a community composed of instances of a speciﬁc application, rather
than the entire system or individual clients in the community, and this distinction
leads to a diﬀerent approach.
We describe an implementation of an epidemic detector, called Syzygy, that
applies two main insights: (i) even if a single noisy model cannot reliably judge
the health of a client, we can reduce the noise by averaging the judgements of
many independent models and (ii) epidemics exhibit time-correlated behavior
that is impossible to detect on a single client. Our method eﬀectively leverages
the statistical properties of a large community to turn noisy models into reliable
community detectors and uses the temporal properties of an epidemic as a means
for better detecting it.
Syzygy monitors each client’s behavior and reports anomaly scores, which
quantify the divergence of recent behavior from the model. For example, a client
whose recent response times are unusually high may report a score that is above
average (anomalous). Syzygy then computes the numerical average of all clients’
scores and checks whether this community score exceeds a threshold. By doing
these computations properly (see Section 3), we can make strong theoretical
guarantees about our ability to overcome model noise and detect epidemics.
Intuitively, we expect anomalies on individual clients in a large community to
be common, but we do not expect anomaly scores from multiple clients to be
strongly correlated in time, absent an epidemic.
We describe and analyze Syzygy’s detection algorithm mathematically in Sec-
tion 3. In our evaluation, we focus on the following questions:
—Can Syzygy detect epidemics under realistic conditions? In Section 4, we
demonstrate that our method can leverage the community to detect a variety
of epidemics in a cluster of commodity web servers even given noisy, incom-
plete client models. Syzygy does not require source code or specially compiled
binaries.
—How do client and community characteristics aﬀect performance (i.e., false
positives)? In Section 5, we deploy Syzygy on the web browsers of a campus
network and show that, despite very diﬀerent client systems and user behav-
iors, healthy community behavior is a stable, reliable signal that is unlikely to
generate excessive false positives (our deployments generated none). Indeed, as
the community grows, Syzygy approaches a 100% detection rate with no false
positives; given a suﬃciently large training set and community, one can specify
an acceptable false positive rate a priori and with high conﬁdence. Even com-
munities of only a dozen clients exhibit desirable properties. See Sections 3.3,
4.2, and 5.2–5.3.
—What kinds of epidemics can Syzygy detect? In Section 6, we conduct sim-
ulation experiments using commercial, oﬀ-the-shelf software and artiﬁcially
powerful exploits (e.g., capable of nearly perfect mimicry) and demonstrate
that the community enables Syzygy to detect epidemics under a variety of
adverse conditions. Exploits may change their source code, perform diﬀerent
362
A.J. Oliner, A.V. Kulkarni, and A. Aiken
malicious actions, or even use a diﬀerent vector of infection across clients
(see Section 3.2).
—How good must client models be and how easy is it to acquire such models?
Syzygy works on top of existing client-based anomaly detectors, dampening noise
and providing sensitivity to time-correlated behavior. Syzygy requires only that
anomaly scores are mostly independent across healthy clients and higher, on
average, for infected clients; the method is agnostic to what measurements are
used to construct these scores.
Throughout the paper—using math, deployments, and simulations—we show
that, in a large community, even simple, noisy models are suﬃcient for reliable
epidemic detection. We conclude with a discussion of the issues involved with
building a larger-scale deployment (Section 7). Many real security infrastructures
are a constellation of tools; working in concert with other detection and response
tools, and with low overhead and few practical requirements, Syzygy provides
both new and more reliable information about epidemics.
2 Related Work
Syzygy detects malicious software running on clients in a community (epidemics)
even under typical real-world constraints: the client model is incomplete, informa-
tion about communication (network activity) is unavailable, and measurements
are noisy. It may be impossible, given social engineering and insider attacks, to
prevent all security breaches; a strength of Syzygy is that it can detect the bad be-
havior that follows a breach. In situations where the total damage is integral over
time and the size of the infected community—such as when an exploit is stealing
resources—the ability to detect such epidemics is crucial.
Anomaly-based intrusion detection has a long history [5, 27, 28, 29, 31, 35]. A
commonly held view is that anomaly detection is fundamentally limited by the
mediocre quality of the models that can be obtained in practice and therefore
must necessarily generate excessive false positives in realistic settings (see, e.g.,
[2]). We agree with the gist of this argument for single clients, but we show in
this paper that an appropriate use of a community can make strong guarantees
even with noisy models.
Crucial, however, is how the community is used. Most previous systems that
use a community at all use it only to correlate alarms generated locally on each
client—the diﬃculty is that the alarm/no alarm decision is still made on the basis
of a single client. Alert-correlation systems then try to suppress the resulting false
alarms by correlating alarms from other clients or diﬀerent detectors [4, 13, 36].
Other collaborative detection eﬀorts that raise alarms only on individual clients
include heterogeneous network overlays [44] and network anomaly detectors, such
as by using cumulative triggers [15, 16] or alarm aggregation and correlation
[1, 17, 32, 41]. Some work also uses correlation to characterize attack scenarios
and causal ﬂow [19, 26, 34].
Community Epidemic Detection Using Time-Correlated Anomalies
363
Syzygy is fundamentally diﬀerent from all of these systems in that it uses the
aggregate behavior of the community to decide whether to raise an alarm for
the community, not individual clients. The ability to make alert decisions based
on analyzing the combined behavior of multiple clients is what gives Syzygy
strong theoretical and practical properties that are absent from all previous work.
There is prior work for ﬁle systems [43] and peer-to-peer networks [22, 23] that
generate alerts based on aggregate behavior, but these do so without utilizing
the statistical beneﬁts of a large community.
Another category of work uses the community simply to gather data more
quickly or to spread the burden of monitoring among many clients. For example,
the Application Communities project [21] uses the community to distribute work;
everything could be done on a single client, given more time. Syzygy uses the
community in both these ways, as well; in contrast, however, it also looks for
time-correlated deviations from normal behavior, which is not possible on a
single client.
Syzygy was originally a detection component of the VERNIER security archi-
tecture [20]. Syzygy’s role is to monitor instances of a target application for signs
of infection: attacks on the security infrastructure or other applications within
the client system, problem diagnosis, and reaction to the intrusion are all the
responsibility of other VERNIER components. Among the various VERNIER
detectors, Syzygy is speciﬁcally looking for time-correlated activity, as might be
expected from a propagating worm or a coordinated attack. This specialization
allows Syzygy to be small, lightweight, and asymptotically ideal while using the
community in a novel way.
There are also uses of the community for tasks other than detection, such
as diagnosing problems by discovering root causes [39] and preventing known
exploits (e.g., sharing antibodies) [2, 3, 25]. Although other parts of VERNIER
employ such measures, our focus is on detection.
3 Syzygy
Consider a community of n clients in which we wish to detect epidemics. During
training, Syzygy observes the normal operation of the clients and builds a model
(see Section 3.1). It is important to note that the speciﬁc choice of model is
independent from the rest of Syzygy’s operation; the only requirement is that
the model produces an anomaly signal according to the constraints in Section 3.2.
While subsequently in monitoring mode, Syzygy periodically collects the most
recent value of the anomaly signal (the anomaly score) from each client and
checks whether the community’s average anomaly score exceeds a threshold V .
If so, Syzygy reports an epidemic. The properties of the anomaly signal are such
that, given a large community, Syzygy can compute the threshold automatically
at runtime and is insensitive to minor variations in this parameter. We explain
these properties mathematically in Section 3.3 and support them experimentally
in Sections 5.2 and 6.3.
364
A.J. Oliner, A.V. Kulkarni, and A. Aiken
X (healthy)
Y (infected)
δδ
μμX
μμY
y
t
i
s
n
e
D
8