The Object Manager recognizes references to handles from the kernel handle table when the high 
bit of the handle is set—that is, when references to kernel-handle-table handles have values greater 
 The kernel handle table also serves as the handle table for the System and minimal processes, and as 
such, all handles created by the System process (such as code running in system threads) are implicitly ker-
nel handles because the ObpKernelHandleTable symbol is set the as ObjectTable of the EPROCESS structure 
the DuplicateHandle API to extract a kernel handle out into user mode, but this attack has been mitigated 
since Windows Vista with the introduction of protected processes, which were described in Part 1.
any handle created by a kernel driver, with the previous mode 
-
vent handles from inadvertently leaking to user space applications.
EXPERIMENT: Viewing the handle table with the kernel debugger
The !handle command in the kernel debugger takes three arguments:
!handle   
!handle 4
handle entry,” bit 1 means “display free handles (not just used handles),” and bit 2 means “display 
information about the object that the handle refers to.” The following command displays full 
details about the handle table for process ID 0x1540:
lkd> !handle 0 7 1540 
PROCESS ffff898f239ac440 
    SessionId: 0  Cid: 1540    Peb: 1ae33d000  ParentCid: 03c0 
    DirBase: 211e1d000  ObjectTable: ffffc704b46dbd40  HandleCount: 641. 
    Image: com.docker.service 
Handle table at ffffc704b46dbd40 with 641 entries in use 
0004: Object: ffff898f239589e0  GrantedAccess: 001f0003 (Protected) (Inherit) Entry: 
ffffc704b45ff010 
EXPERIMENT: Viewing the handle table with the kernel debugger
The !handle command in the kernel debugger takes three arguments:
!handle   
!handle 4
handle entry,” bit 1 means “display free handles (not just used handles),” and bit 2 means “display 
information about the object that the handle refers to.” The following command displays full 
details about the handle table for process ID 0x1540:
lkd> !handle 0 7 1540
PROCESS ffff898f239ac440
    SessionId: 0  Cid: 1540    Peb: 1ae33d000  ParentCid: 03c0
    DirBase: 211e1d000  ObjectTable: ffffc704b46dbd40  HandleCount: 641.
    Image: com.docker.service
Handle table at ffffc704b46dbd40 with 641 entries in use
0004: Object: ffff898f239589e0  GrantedAccess: 001f0003 (Protected) (Inherit) Entry: 
ffffc704b45ff010
150 
CHAPTER 8 System mechanisms
Object: ffff898f239589e0  Type: (ffff898f032e2560) Event 
    ObjectHeader: ffff898f239589b0 (new version) 
HandleCount: 1  PointerCount: 32766 
0008: Object: ffff898f23869770  GrantedAccess: 00000804 (Audit) Entry: ffffc704b45ff020 
Object: ffff898f23869770  Type: (ffff898f033f7220) EtwRegistration 
    ObjectHeader: ffff898f23869740 (new version) 
HandleCount: 1  PointerCount: 32764
Instead of having to remember what all these bits mean, and convert process IDs to hexa-
decimal, you can also use the debugger data model to access handles through the Io.Handles 
dx @$curprocess.Io.Handles[4] 
handle for the current process, including the access rights and name, while the following com-
mand displays full details about the handles in PID 5440 (that is, 0x1540):
lkd> dx -r2 @$cursession.Processes[5440].Io.Handles 
@$cursession.Processes[5440].Io.Handles
    [0x4]
Handle
: 0x4 
Type
: Event 
GrantedAccess    : Delete | ReadControl | WriteDac | WriteOwner | Synch | 
QueryState | ModifyState 
Object
[Type: _OBJECT_HEADER] 
    [0x8]
Handle
: 0x8 
Type
: EtwRegistration 
GrantedAccess    
Object
[Type: _OBJECT_HEADER] 
    [0xc]
Handle
: 0xc 
Type
: Event 
GrantedAccess    : Delete | ReadControl | WriteDac | WriteOwner | Synch | 
QueryState | ModifyState 
Object
[Type: _OBJECT_HEADER]
You can use the debugger data model with a LINQ predicate to perform more interesting 
searches, such as looking for named section object mappings that are Read/Write:
lkd> dx @$cursession.Processes[5440].Io.Handles.Where(h => (h.Type == "Section") && 
(h.GrantedAccess.MapWrite) && (h.GrantedAccess.MapRead)).Select(h => h.ObjectName) 
@$cursession.Processes[5440].Io.Handles.Where(h => (h.Type == "Section") && 
(h.GrantedAccess.MapWrite) && (h.GrantedAccess.MapRead)).Select(h => h.ObjectName)
    [0x16c]
: "Cor_Private_IPCBlock_v4_5440" 
    [0x170]
: "Cor_SxSPublic_IPCBlock" 
    [0x354]
: "windows_shell_global_counters" 
    [0x3b8]
: "UrlZonesSM_DESKTOP-SVVLOTP$" 
    [0x680]
: "NLS_CodePage_1252_3_2_0_0"
Object: ffff898f239589e0  Type: (ffff898f032e2560) Event
    ObjectHeader: ffff898f239589b0 (new version)
HandleCount: 1  PointerCount: 32766
0008: Object: ffff898f23869770  GrantedAccess: 00000804 (Audit) Entry: ffffc704b45ff020
Object: ffff898f23869770  Type: (ffff898f033f7220) EtwRegistration
    ObjectHeader: ffff898f23869740 (new version)
HandleCount: 1  PointerCount: 32764
Instead of having to remember what all these bits mean, and convert process IDs to hexa-
decimal, you can also use the debugger data model to access handles through the Io.Handles 
dx @$curprocess.Io.Handles[4] 
handle for the current process, including the access rights and name, while the following com-
mand displays full details about the handles in PID 5440 (that is, 0x1540):
lkd> dx -r2 @$cursession.Processes[5440].Io.Handles
@$cursession.Processes[5440].Io.Handles
    [0x4]
Handle
: 0x4
Type
: Event
GrantedAccess    : Delete | ReadControl | WriteDac | WriteOwner | Synch | 
QueryState | ModifyState
Object
[Type: _OBJECT_HEADER]
    [0x8]
Handle
: 0x8
Type
: EtwRegistration
GrantedAccess   
Object
[Type: _OBJECT_HEADER]
    [0xc]
Handle
: 0xc
Type
: Event
GrantedAccess    : Delete | ReadControl | WriteDac | WriteOwner | Synch | 
QueryState | ModifyState
Object
[Type: _OBJECT_HEADER]
You can use the debugger data model with a LINQ predicate to perform more interesting 
searches, such as looking for named section object mappings that are Read/Write:
lkd> dx @$cursession.Processes[5440].Io.Handles.Where(h => (h.Type == "Section") && 
(h.GrantedAccess.MapWrite) && (h.GrantedAccess.MapRead)).Select(h => h.ObjectName)
@$cursession.Processes[5440].Io.Handles.Where(h => (h.Type == "Section") && 
(h.GrantedAccess.MapWrite) && (h.GrantedAccess.MapRead)).Select(h => h.ObjectName)
    [0x16c]
: "Cor_Private_IPCBlock_v4_5440"
    [0x170]
: "Cor_SxSPublic_IPCBlock"
    [0x354]
: "windows_shell_global_counters"
    [0x3b8]
: "UrlZonesSM_DESKTOP-SVVLOTP$"
    [0x680]
: "NLS_CodePage_1252_3_2_0_0"
CHAPTER 8 System mechanisms
151
EXPERIMENT: Searching for open files with the kernel debugger
a system remotely. You can instead use the !devhandles command to search for handles opened to 
1.
Device object. You can use the !object command as shown here:
lkd> !object \Global??\C:
Object: ffffc704ae684970  Type: (ffff898f03295a60) SymbolicLink
    ObjectHeader: ffffc704ae684940 (new version) 
    HandleCount: 0  PointerCount: 1 
    Directory Object: ffffc704ade04ca0  Name: C: 
    Flags: 00000000 ( Local ) 
    Target String is '\Device\HarddiskVolume3' 
    Drive Letter Index is 3 (C:)
2.
Next, use the !object command to get the Device object of the target volume name:
1: kd> !object \Device\HarddiskVolume1
Object: FFFF898F0820D8F0 Type: (fffffa8000ca0750) Device
3.
Now you can use the pointer of the Device object with the !devhandles command.
lkd> !devhandles 0xFFFF898F0820D8F0
Checking handle table for process 0xffff898f0327d300 
Kernel handle table at ffffc704ade05580 with 7047 entries in use 
PROCESS ffff898f0327d300 
    SessionId: none  Cid: 0004    Peb: 00000000  ParentCid: 0000 
    DirBase: 001ad000  ObjectTable: ffffc704ade05580  HandleCount: 7023. 
    Image: System 
019c: Object: ffff898F080836a0  GrantedAccess: 0012019f (Protected) (Inherit) 
(Audit) Entry: ffffc704ade28670 
Object: ffff898F080836a0  Type: (ffff898f032f9820) File 
    ObjectHeader: ffff898F08083670 (new version) 
HandleCount: 1  PointerCount: 32767 
Directory Object: 00000000  Name: \$Extend\$RmMetadata\$TxfLog\ 
$TxfLog.blf {HarddiskVolume4}
achieve the same effect with a LINQ predicate, which instantly starts returning results:
lkd> dx -r2 @$cursession.Processes.Select(p => p.Io.Handles.Where(h => 
h.Type == "File").Where(f => f.Object.UnderlyingObject.DeviceObject ==
(nt!_DEVICE_OBJECT*)0xFFFF898F0820D8F0).Select(f =>
f.Object.UnderlyingObject.FileName))
@$cursession.Processes.Select(p => p.Io.Handles.Where(h => h.Type == "File"). 
EXPERIMENT: Searching for open files with the kernel debugger
a system remotely. You can instead use the !devhandles command to search for handles opened to
1.
Device object. You can use the !object command as shown here:
lkd> !object \Global??\C:
Object: ffffc704ae684970  Type: (ffff898f03295a60) SymbolicLink
    ObjectHeader: ffffc704ae684940 (new version)
    HandleCount: 0  PointerCount: 1
    Directory Object: ffffc704ade04ca0  Name: C:
    Flags: 00000000 ( Local )
    Target String is '\Device\HarddiskVolume3'
    Drive Letter Index is 3 (C:)
2.
Next, use the !object command to get the Device object of the target volume name: 
1: kd> !object \Device\HarddiskVolume1
Object: FFFF898F0820D8F0 Type: (fffffa8000ca0750) Device
3.
Now you can use the pointer of the Device object with the !devhandles command. 
lkd> !devhandles 0xFFFF898F0820D8F0
Checking handle table for process 0xffff898f0327d300
Kernel handle table at ffffc704ade05580 with 7047 entries in use
PROCESS ffff898f0327d300
    SessionId: none  Cid: 0004    Peb: 00000000  ParentCid: 0000
    DirBase: 001ad000  ObjectTable: ffffc704ade05580  HandleCount: 7023.
    Image: System
019c: Object: ffff898F080836a0  GrantedAccess: 0012019f (Protected) (Inherit) 
(Audit) Entry: ffffc704ade28670
Object: ffff898F080836a0  Type: (ffff898f032f9820) File
    ObjectHeader: ffff898F08083670 (new version)
HandleCount: 1  PointerCount: 32767
Directory Object: 00000000  Name: \$Extend\$RmMetadata\$TxfLog\
$TxfLog.blf {HarddiskVolume4}
achieve the same effect with a LINQ predicate, which instantly starts returning results:
lkd> dx -r2 @$cursession.Processes.Select(p => p.Io.Handles.Where(h => 
h.Type == "File").Where(f => f.Object.UnderlyingObject.DeviceObject ==
(nt!_DEVICE_OBJECT*)0xFFFF898F0820D8F0).Select(f =>
f.Object.UnderlyingObject.FileName))
@$cursession.Processes.Select(p => p.Io.Handles.Where(h => h.Type == "File").
152 
CHAPTER 8 System mechanisms
Where(f => f.Object.UnderlyingObject.DeviceObject == (nt!_DEVICE_OBJECT*) 
0xFFFF898F0820D8F0).Select(f => f.Object.UnderlyingObject.FileName))
   [0x0]
   [0x19c]    : "\$Extend\$RmMetadata\$TxfLog\$TxfLog.blf" [Type: _UNICODE_STRING] 
   [0x2dc]    : "\$Extend\$RmMetadata\$Txf:$I30:$INDEX_ALLOCATION" [Type: _UNICODE_STRING] 
   [0x2e0]    : "\$Extend\$RmMetadata\$TxfLog\$TxfLogContainer00000000000000000002" 
[Type: _UNICODE_STRING]
Reserve Objects
-
cations and kernel code to create objects is essential to the normal and desired runtime behavior of any 
piece of Windows code. If an object allocation fails, this usually causes anything from loss of functional-
-
tion object). Worse, in certain situations, the reporting of errors that led to object creation failure might 
themselves require new objects to be allocated. Windows implements two special reserve objects to 
deal with such situations: the User APC reserve object and the I/O Completion packet reserve object. 
Note that the reserve-object mechanism is fully extensible, and future versions of Windows might add 
other reserve object types—from a broad view, the reserve object is a mechanism enabling any kernel-
mode data structure to be wrapped as an object (with an associated handle, name, and security) for 
later use.
As was discussed earlier in this chapter, APCs are used for operations such as suspension, termina-
tion, and I/O completion, as well as communication between user-mode applications that want to 
provide asynchronous callbacks. When a user-mode application requests a User APC to be targeted 
to another thread, it uses the QueueUserApc NtQueueApcThread 
system call. In the kernel, this system call attempts to allocate a piece of paged pool in which to store 
the KAPC control object structure associated with an APC. In low-memory situations, this operation 
fails, preventing the delivery of the APC, which, depending on what the APC was used for, could cause 
loss of data or functionality.
To prevent this, the user-mode application, can, on startup, use the NtAllocateReserveObject system 
call to request the kernel to preallocate the KAPC structure. Then the application uses a different sys-
tem call, NtQueueApcThreadEx, that contains an extra parameter that is used to store the handle to the 
reserve object. Instead of allocating a new structure, the kernel attempts to acquire the reserve object 
(by setting its InUse bit to true
the reserve object is released back to the system. Currently, to prevent mismanagement of system 
resources by third-party developers, the reserve object API is available only internally through system 
guarantee that asynchronous callbacks will still be able to return in low-memory situations.
A similar scenario can occur when applications need failure-free delivery of an I/O completion port 
message or packet. Typically, packets are sent with the PostQueuedCompletionStatus
dll, which calls the NtSetIoCompletion API. Like the user APC, the kernel must allocate an I/O manager 
structure to contain the completion-packet information, and if this allocation fails, the packet cannot 
Where(f => f.Object.UnderlyingObject.DeviceObject == (nt!_DEVICE_OBJECT*)
0xFFFF898F0820D8F0).Select(f => f.Object.UnderlyingObject.FileName))
   [0x0]
   [0x19c]    : "\$Extend\$RmMetadata\$TxfLog\$TxfLog.blf" [Type: _UNICODE_STRING]
   [0x2dc]    : "\$Extend\$RmMetadata\$Txf:$I30:$INDEX_ALLOCATION" [Type: _UNICODE_STRING]
   [0x2e0]    : "\$Extend\$RmMetadata\$TxfLog\$TxfLogContainer00000000000000000002" 
[Type: _UNICODE_STRING]
CHAPTER 8 System mechanisms
153
be created. With reserve objects, the application can use the NtAllocateReserveObject API on startup 
to have the kernel preallocate the I/O completion packet, and the NtSetIoCompletionEx system call 
APC reserve objects, this functionality is reserved for system components and is used both by the RPC 
library and the Windows Peer-To-Peer BranchCache service to guarantee completion of asynchronous 
I/O operations.
Object security
object or opens a handle to an existing object, the process must specify a set of desired access rights—
that is, what it wants to do with the object. It can request either a set of standard access rights (such as 
Similarly, it might require the ability to suspend or terminate a thread object.
When a process opens a handle to an object, the Object Manager calls the security reference moni-
tor
access the process is requesting. If it does, the reference monitor returns a set of granted access rights 
that the process is allowed, and the Object Manager stores them in the object handle it creates. How 
the security system determines who gets access to which objects is explored in Chapter 7 of Part 1.
Manager can quickly check whether the set of granted access rights stored in the handle corresponds 