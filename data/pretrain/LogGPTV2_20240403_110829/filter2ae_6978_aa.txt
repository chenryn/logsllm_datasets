# 引言
本次分析的样本是一款比较简单的android锁屏病毒，通过设备管理器来进行锁屏功能，并利用开机广播和服务的结合实现开机锁屏，解锁方式通过电话拨入，对资源文件进行解密出字符串和来电电话进行匹配的方式进行解锁。我们主要是从者一款比较简单的病毒中熟悉一下smali语法
# 文件简介
App应用名称： 红包强盗(后台版)  
**md5** : F3ADAADC7A8CB0D16A1AD05AADC8B1F2  
**包名** ： com.cjk
# 详细分析
  1. 第一步，直接先上模拟器，看看大概是个什么毒。从截图看出它想申请设备管理员权限，然后就弹出锁屏界面，一枚锁品病毒  
  2. 看看apk包内的文件，在`res\raw`目录下发现四个可疑文本文件，内容是`Cj09QU80TVRu`、`Cj1rRE0xY3puMllqTTVuVE0=`这些有可能是加密过的字符串，还在`res\drawable`目录下，发现下面这个qq二维码，也没什么so文件，也不会加固过  
  1. 主要从从AndroidManifest.xml文件中看四大组件，一般样本都会将恶意行为放在服务组件，需要重点关注
  2. 1)`s`服务  
根据服务生命周期表可以知道，针对两种不同方式启动的服务，调用的方法是不同的,因为下面onbind方法并没有任何操作，如果要开启这个服务只会走startService方法，所以我们顺着onCreate->onStartCommand来看
    //onBind方法，参数为Intent类实例化的对象
    .method public onBind(Intent)IBinder
              //onBind方法方法中用到了6个寄存器
              .registers 6
               //注解，就是java中的@Override
              .annotation runtime Override
              .end annotation
    // 将参数p0(this)赋值给变量v0
    00000000  move-object         v0, p0
    //将参数p1(传入的Intent类型参数)赋值给变量v1
    00000002  move-object         v1, p1
    00000004  const/4             v3, 0
    //检查v3是否可以转化成IBinder类
    00000006  check-cast          v3, IBinder
    0000000A  move-object         v0, v3
    //返回一个null对象
    0000000C  return-object       v0
    .end method
在看oncreate之前，在他的构造方法中，可以看见有几个敏感的数据，`QQ号`，`昵称`，并且将这串字符串进行静态方法MD5Util->getMD5String的处理，下面主要看看这个处理过程
    .method public constructor ()V
              .registers 5
    00000000  move-object         v0, p0
    00000002  move-object         v2, v0
    //直接调用Service的构造方法super()，(这种调用不存在被覆盖，编译时静态确认)
    00000004  invoke-direct       Service->()V, v2
    0000000A  move-object         v2, v0
    0000000C  const-string        v3, "by:彼岸花 qq:127****738"
    //将v3的字符串存放在v2中，并且v2=s->bahk:String(this.bahk)
    00000010  iput-object         v3, v2, s->bahk:String
    //使用this清空v2，v3
    00000014  move-object         v2, v0
    00000016  move-object         v3, v0
    //获取s->bahk:String的值放入v3，然后让s->bahk:String指向v3
    00000018  iget-object         v3, v3, s->bahk:String
    //调用静态方法（不需要对象，所以少一个参数），看名称应该是获取md5字符串
    0000001C  invoke-static       MD5Util->getMD5String(String)String, v3
    00000022  move-result-object  v3
    //最后让经过处理的字符串v3放入this.Lycorisradiata
    00000024  iput-object         v3, v2, s->Lycorisradiata:String
    00000028  return-void
    .end method
处理函数getMD5String，它将字符串`by:彼岸花
qq:127****738`，先进行了md5摘要计算，得到一个第一次加密过的字节数组，然后在new一个长度是其2倍的char型数组，接着第一次加密过的字节数组的每一个字节经过2次加密，生成不同的字符，填入到new出来的char型数组中，最终将其转化成字符串返回
    .method public static final getMD5String(String)String
              .registers 19
    //静态方法，没有引用对象，所以p0=参数String
    00000000  move-object/from16  v0, p0
    //v12 = char[16] 创建16长度的char型数组，将其赋给v12
    00000004  const/16            v12, 0x0010
    00000008  new-array           v12, v12, [C
    //将EC指向的2字节长度的char数据填入数组
    0000000C  fill-array-data     v12, :EC
    //v2 = char[16] ，v12=this，将数组赋给v2，用this清空v12
    00000012  move-object         v2, v12  # v2 = charArray1 =  new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}
    00000014  move-object         v12, v0
    :16
    //v12.getBytes()将字符串转化成字节数组，调用虚方法，也就是v12是被引用的对象
    //然后使用MD5信息摘要算法对这个字节数组进行计算，将hash值在00000040地址赋给v12
    00000016  invoke-virtual      String->getBytes()[B, v12
    0000001C  move-result-object  v12
    0000001E  move-object         v3, v12
    00000020  const-string        v12, "MD5"
    00000024  invoke-static       MessageDigest->getInstance(String)MessageDigest, v12
    0000002A  move-result-object  v12
    //因为v12（信息摘要对象）在00000032  位置做被引用的参数对象，所以将其赋给v4来接收update方法更改后的摘要对象
    0000002C  move-object         v4, v12
    0000002E  move-object         v12, v4
    00000030  move-object         v13, v3
    00000032  invoke-virtual      MessageDigest->update([B)V, v12, v13
    00000038  move-object         v12, v4
    0000003A  invoke-virtual      MessageDigest->digest()[B, v12
    00000040  move-result-object  v12
    00000042  move-object         v5, v12  # v5 = md5ByteArray 字节数组类型的信息摘要
    00000044  move-object         v12, v5
    //带有信息摘要的字节数组长度赋给v12，然后将这个长度乘以2，利用这个长度再实例化一个char型数组给v7
    00000046  array-length        v12, v12
    00000048  move                v6, v12
    0000004A  move                v12, v6  # v6 = len_of_md5ByteArray
    0000004C  const/4             v13, 2
    0000004E  mul-int/lit8        v12, v12, 2
    00000052  new-array           v12, v12, [C
    00000056  move-object         v7, v12  # v7 = charArray2 = new char[2 * len_of_md5ByteArray]
    00000058  const/4             v12, 0
    0000005A  move                v8, v12  # v8 = 0
    0000005C  const/4             v12, 0
    0000005E  move                v9, v12
    :60
    //v12=v9=0，v13=v6=md5字节数组的长度
    //如果v12([C)V, v13, v14  # v12 = v13 = new String(charArray2)
    00000080  move-object         v0, v12
    :82
    00000082  return-object       v0
    :84
    00000084  move-object         v12, v5
    00000086  move                v13, v9
    00000088  aget-byte           v12, v12, v13
    0000008C  move                v10, v12  # v10 =  md5ByteArray[v9]
    0000008E  move-object         v12, v7  # v12 = v7 = charArray2
    00000090  move                v13, v8  # v13 = v8
    00000092  add-int/lit8        v8, v8, 1  # ++v8
    00000096  move-object         v14, v2  # v2 = charArray1
    00000098  move                v15, v10
    0000009A  const/16            v16, 4
    0000009E  ushr-int/lit8       v15, v15, 4
    000000A2  const/16            v16, 15
    000000A6  and-int/lit8        v15, v15, 15
    000000AA  aget-char           v14, v14, v15
    000000AE  aput-char           v14, v12, v13  # charArray2[v13] = charArray1[md5ByteArray[v9] >> 4 & 15]
    000000B2  move-object         v12, v7
    000000B4  move                v13, v8  # v13 = v8
    000000B6  add-int/lit8        v8, v8, 1  # ++v8
    000000BA  move-object         v14, v2
    000000BC  move                v15, v10
    000000BE  const/16            v16, 15
    000000C2  and-int/lit8        v15, v15, 15
    000000C6  aget-char           v14, v14, v15
    000000CA  aput-char           v14, v12, v13  # charArray2[v13] = charArray1[md5ByteArray[v9] & 15]
    :CE
    000000CE  add-int/lit8        v9, v9, 1
    000000D2  goto                :60
    :D4
    000000D4  move-exception      v12
    000000D6  move-object         v3, v12
    000000D8  move-object         v12, v3
    000000DA  invoke-virtual      Exception->printStackTrace()V, v12
    000000E0  const/4             v12, 0
    000000E2  check-cast          v12, String
    000000E6  move-object         v0, v12
    000000E8  goto                :82
              .catch Exception {:16 .. :CE} :D4
    :EC
    000000EC  .array-data 2 x 0x10
                  0x30
                  0x31
                  0x32
                  0x33
                  0x34
                  0x35
                  0x36
                  0x37
                  0x38
                  0x39
                  0x41
                  0x42
                  0x43
                  0x44
                  0x45
                  0x46
              .end array-data
    .end method
这里将注释集合起来，大概是这样的加密过程，这里主要是大致预览加密逻辑
    charArray1 =  new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}
    string = "by:彼岸花 qq:1279525738";
    byte[] v3 = string.getBytes();
    MessageDigest v4 = MessageDigest.getInstance("MD5");
    v4.update(v3);
    byte[] v5 = md5ByteArray = v4.digest() //字节数组类型的信息摘要