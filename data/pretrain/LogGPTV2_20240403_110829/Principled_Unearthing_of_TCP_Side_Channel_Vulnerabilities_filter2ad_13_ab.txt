cution model that we build. Dierent from previous work relating
to the use of model checking with an abstracted state machine
of either TCP or the network stack (e.g., [33, 34]), we check for
possible violations of the non-interference property in real TCP im-
plementations. Our model is much more complicated since we have
to look at verifying a property relating to connection interactions
(as discussed later our model contains 4 live TCP connections with
6 dierent sockets). Furthermore, we need to address challenges
relating to making the model self-contained (to ensure that it can
be used with an o-the-shelf model checker) and concise (without
which the complexity of the code will make it untenable to the
model checker). Unfortunately, even just the core TCP stack imple-
mentation is too complex for the model checker to exhaustively
check all possible states of the code. For this reason, we can only
perform bounded model checking and therefore the conclusions
(existence or absence of violations) are only applicable to a bounded
set of states instead of the entire code base.
In-window seq
Server1 Client1
Oﬀ-path	
a)acker
Out-of-window seq
Server2
Client2
RST
RST
ACK	
count		
=	100
Drop
ACK	
count	
=	100
ACK	
count	
=	99
ACK	
count
=	0
Challenge
ACK
Challenge
99	
ACKs
100	RSTs
100	RSTs
Challenge
100	
ACKs
ACK	
count
=	0
Figure 2: An illustrative TCP Side-Channel Vulnerability.
3 THREAT MODEL
Our threat model is that of an o-path TCP attacker as shown
in Figure 1. We consider 3 hosts viz., a victim client, a victim server,
and an o-path attacker. The attacker can either send packets on
its own connection to the server, or send spoofed packets with the
victim client’s IP address or a victim server’s IP address. Dierent
from a Man-in-the-Middle (MITM) attack, the o-path attacker can
neither eavesdrop nor inject packets into the victim connection.
Instead, it attempts to exploit a side-channel vulnerability to infer
the state of the victim connection based on the packets sent/received
on its own connection. Specically, it could target the inference of
(a) the port number of the victim client (the server’s port number
is usually known), (b) the sequence (SEQ) number from the client,
and/or (c) the acknowledgement (ACK) number expected by the
server. By inferring just the port number, the attacker can determine
if there is an established victim connection between the server and
the client. With the port number and the SEQ number expected by
the server inferred, the attacker can launch a DoS attack by sending
a packet with the reset (RST) ag (and correct SEQ number) to
terminate the victim’s connection. If all the three attributes are
inferred, the attacker can hijack the victim connection and inject
malicious payloads as shown in [7]. Note that any machine around
the world can launch an o-path attack, as long as it is able to send
spoofed packets with the victim client’s (or server’s) IP address.
Previous TCP inference attacks [7, 11, 37, 38] follow a “guess-
then-check” strategy. Specically, during the guess phase, a spoofed
packet is sent with a guessed value (for either or a combination
of the port number, SEQ number and/or ACK number). A correct
guess will be “accepted” by the TCP state machine thus causing
it to transit into a state that is dierent from that due to wrong
guesses. During the subsequent check phase, the attacker exploits
the side-channel vulnerability to leak the state transition of the
victim’s connection, which allows the attacker to tell whether the
guess is correct or not. Like in these eorts, the focus of this work
is on identifying similar “software-induced”2 side-channels but by
using a more principled approach.
An illustrative TCP side-channel vulnerability. To illustrate
how an o-path attacker can exploit a side channel vulnerability to
determine the state of a victim connection (in terms of port number,
2Other types of side channels, such as timing based ones [11], are out of the scope.
SEQ number or ACK number) consider the recent example from [7].
Figure 2 captures this example wherein the o-path attacker infers
the expected SEQ number of the victim connection to the server.
To understand how the attack works, consider two cases. In the
rst case, the SEQ number guessed by the attacker is within the
“receive window” (in-window) of the server while in the second case,
the SEQ number is out-of-window. The attacker sends a spoofed
RST packet with a guessed SEQ number. If the number is in-window,
the server responds to the victim with a “Challenge ACK” packet
to ask the client to conrm the RST. Since the victim client did not
really send the RST packet, it will simply discard the Challenge ACK
packet. To control how many Challenge ACKs can be sent within
a time period, the Linux kernel maintains a global shared counter
(equal to 100 prior to the work in [7]). Thus, when the attacker
subsequently sends in-window RST packets on its own connection
(one after the other as shown in the bottom part of the gure), it
gets back 99 Challenge ACKs; in contrast, if the spoofed RST packet
is out-of-window, the attacker will receive 100 Challenge ACKs.
This dierence/side-channel can then be used to infer whether the
guess is correct or not.
What is evident in the above example is that, by observing the
number of Challenge ACK responses from the server on its own
connection, the attacker can distinguish between two cases with
regards to its spoofed packet viz., whether the SEQ number guessed
is within the server’s receive window or not. Thus, this is a viola-
tion of the non-interference property i.e., the state of the client’s
connection inuences how many Challenge ACKs are received by
the o-path attacker.
4 SCENT OVERVIEW
In this section, we provide an overview of our system SCENT and
its core innovation.
4.1 Workow
Figure 3 shows the overall workow of SCENT. Specically,
• Taking the source code of a commodity OS kernel as input,
the Model Generator (§5) generates a self-contained model3
amenable for application of an o-the-shelf model checker and
pushes this initial model into a queue.
• The Non-interference Checker (§6), at each step, takes one self-
contained TCP model from the queue, constructs an attack sce-
nario, and executes bounded model checking to verify the non-
interference property between connections.
• If violations are found by the model checker, validated counter-
examples are output as the proof-of-concepts for possible TCP
side-channel vulnerabilities inside the kernel’s TCP stack imple-
mentation.
• Finally, to mitigate the limited code coverage of bounded model
checking, the Model Transformer (§7) automatically generates
a new, downscaled model and pushes it into the queue for the
next round of analysis.
3Note that we only abstract code irrelavent to TCP stack; previous work abstracts the
TCP stack itself.
Figure 3: Overview of SCENT’s workow.
4.2 Automated downscaling
While applying bounded model checking to TCP implementation
as a way to nd non-interference violations is not entirely new,
SCENT solves an important and non-trivial problem. In principle
one will need to send an extremely large sequence (⇡ 1) of packets
in order to excavate all possible violations of the non-interference
property. Unfortunately, we point out that due to the complexity of
commodity kernels’ TCP implementations, even a relatively small
sequence of TCP packets can lead to an explosion of the state space
that cannot be explored by the model checker with limited com-
putation resources (CPU time and/or memory). As a result, the
bound we can aord is considerably small (e.g., only 3 packets in
our evaluations); otherwise, the model checker will either exhaust
memory or take a prohibitively long time to nish. This further
translates to limited code coverage and impacts the eectiveness
of SCENT (i.e., it cannot detect side-channel vulnerabilities in un-
covered code). For example, the vulnerability illustrated in Figure 2
cannot be detected as triggering it requires sending 100 RST packets.
In fact, side-channels are more likely than not, triggered by such
uncommon sequences of packets. SCENT copes with this scalability
issue via a novel technique we call automated downscaling.
Our observation is that the TCP code base contains many checks
(branches) that compare attacker-controlled variables against ei-
ther some constant values or variables that remain the same during
model checking. Due to the limited input bound, those attacker-
controlled variables have limited value ranges. When the attacker-
controlled value range does not overlap with the xed value (cover
both sides), only one branch can be covered. However, such linear
relationships between an attacker value and a xed value can be
satised easily by downscaling the xed value (i.e., moving it tor-
wards the attacker-controlled value range). More importantly, this
transformation will not change the fundamental behavior of the
TCP implementation: without downscaling, the relationship can
still be satised, but simply takes signicantly longer inputs and
therefore times.
To further elucidate this observation, let us revisit the example
from Figure 2. The side-channel relies on the global Challenge
ACK rate limit (a variable with xed value 100) and the attacker
has to send 100 packets in total (one spoofed and 99 on its own
connection in the example), to trigger the information leakage.
To nd this vulnerability, intuitively, the model checker will have
to examine what happens when the TCP code base has received
dierent numbers of packets which have the RST ag set and are
in-window (it has to perform 100 such checks). Unfortunately, this
is not possible during our bounded model checking because we
can only increase the counter from 0 to 3. However, if we were to
simply (articially) change this rate limit to say 2, then we will be
able to trigger this vulnerability and observe the dierence.
Furthermore, the advantage of this approach is that it also inher-
ently reduces the required input space we need to enumerate. For
example, one can reduce the space of possible SEQ numbers (from
232 to a much smaller value) by downscaling other xed constants
(e.g., the receive window size). This also contributes to a drastic
reduction in the time-complexity associated with our analysis.
Practical Realization. To practically realize automated downscal-
ing, we pursue an iterative approach (alluded to in the workow
described in § 4.1). This approach is driven by the key insight that
there is a tight coupling between the input space (i.e., length of our
input packet sequence and the space of the elds in the TCP header
such as SEQ number space) and the values to which the limits in
the code are to be changed. In the example above, changing the
limit to 2 requires the attacker to send a sequence of two packets. If
on the other hand, we knew that the attacker had a packet sequence
of length 5, the limit could be anywhere from 2 to 5.
Given this, for ease of realization, to begin with, we x the length
of the input packet sequence and the sizes of the header elds in
each, but do not modify the TCP code that is input to the model
checker. During the model checking phase, we log information
relating to what parts of the code (what branches) are not covered
because of control statements relating to such limits. We then use
concolic execution to establish transformations of such constraints
(guided by the constraints imposed on the input packet sequence)
that may make such coverage viable (using the program transformer
module shown in Fig. 3). The transformed model is then considered
for bounded model checking. We iterate the process until we either
(a) do not nd any additional transformations that we can perform
or (b) we exceed a pre-specied time limit.
5 MODEL GENERATOR
In this section, we describe in detail how we address the challenges
in constructing a standalone TCP code base that can be input to
the model checker and how we initialize variables to ensure that
the model begins with a valid and consistent TCP state.
In principle, one can apply the design principles from [24] to
construct a test model, which combines a test-harness and the real
kernel code with an initial state. Given this initial state, the test
harness would enumerate a sequence of packets as input, and calls
the TCP packet reception code to explore the set of reachable states.
Here, the state of the model is dened as the union of internal
states at a host, and is determined by the values of global variables
and heap objects that are reachable by the connection object (i.e.,
the socket). Unfortunately, applying model checking directly on a
kernel code in its entirety, is not practical. This is because model
checking has high associated time complexity, and using the entire
kernel code base as the model can make the analysis prohibitively
costly. More importantly, many of the paths explored by the model
checker will have no bearing on what we seek to analyze. Last
but not least, there is signicant non-determinism in real TCP
implementations which will interfere with the model checking.
Figure 4: Workow of the Model Generator.
Therefore, assembling a standalone TCP implementation without
any kernel dependencies becomes important for the feasibility of
our approach. However, extracting the TCP code from a kernel is
challenging given the fact that the TCP code interacts with the rest
of the kernel via complex interfaces. We solve this challenge by
identifying boundaries where the code can be pruned and manually
constructing stub implementations to close the boundaries.
In addition to generate a self-contained TCP code base for the
model checker, another challenge is how to properly initialize the
model. SCENT solves this challenge by automatically extracting
correct values from a memory snapshot.
5.1 Building a Standalone TCP Model
The high-level guideline for building a standalone TCP code base is
that we want to make sure that all the code related to the TCP stack
remains exactly the same as in the target kernel, while code not
related to the TCP stack should be minimized/abstracted. Following
this guideline, we use a simple worklist-based, semi-automated
approach to gradually grow the code base until the whole TCP
stack is included.
(1) We initialize the worklist with the entry function of the TCP
layer when a packet is received (e.g., tcp_v4_rcv in Linux and
tcp_input in FreeBSD).
(2) We try to remove one function from the worklist. If the worklist
is empty, we terminate the process; otherwise we move on to
the next step.
(3) We check if the current function belongs to the TCP layer (based
on our domain knowledge). If so, we copy the whole function to
the standalone mode and move on to the next step; otherwise
we manually write a stub function to abstract it and go back to
Step (2).
(4) We nd all the callees of the current function and add them
into the worklist and go back to Step (2). For indirect calls, we
manually resolve the target based on domain knowledge.
Note that because in our attack scenario (§6.2) we keep the victim
connection idling, our current model excludes functions relating to
sending packets on that connection.
5.2 Initializing the Standalone TCP Model
Because our TCP model is built using partial kernel code starting at
an entry function, we need to initialize what we call environmental
variables at this entry point. This is to ensure that the initial state
provided to the model checker is correct and consistent with TCP