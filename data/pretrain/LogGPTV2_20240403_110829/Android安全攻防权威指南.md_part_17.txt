网站提交解锁令牌
解镇门户网站验证
令牌，并发运解镇
用户使用提供的解
密钥
镇密钥与fastboot来
解锁设备
用户
图3-4解锁引导加载程序的一般流程
3.5.3对软root进行持久化
如果你拥有一个rootshell（软root），要实现永久的root访问权限是非常简单的。在没有开
启NAND锁的手机上，你只需要对系统分区的写权限。如果手机有NAND锁，那么首先需要移
除掉它（参见3.5.2节）
NAND锁被移除之后，你就可以简单地以读写模式重新挂载系统分区，放置一个设置set-uid
root权限的su二进制程序，然后再次以只读模式挂载。当然，你也可以选择安装一个su程序的
包装应用，如 SuperUser或 SuperSU。
对上述流程进行自动化的一个常用方法是，在连接到启用了USB调试模式的Android设备
的宿主计算机上运行如下命令：
adb shel1 mount -o remount,zw /ayatem
adb shel1 chowm 0.0/aystem/xbin/su
adb adb push su /aystem/xbin/su
adb she11 chmod 06755 /sy8ten/xbin/su
adb shell mount -o remount,ro /system
adb install Superuser.apk
保留持久性root访问权限的另一种方法是将定制恢复镜像写人恢复分区中，可以在Android
设备上使用dd命令做到这点。这相当于通过fastboot或下载模式刷人一个定制的恢复镜像，这
---
## Page 72
56第3章rootAndroid设备
个过程在3.4节中已经介绍过。
首先，你需要确定设备上恢复分区的位置。例如：
1rwxwxrwx root root 2012-1120 14:53 recovery -> /dev/block/mmcb1k0p7
前面的输出显示了恢复分区在这个设备上位于/dev/block/mmcblk0p7处。
现在，你可以将一个定制恢复锁像复制到SD卡上，然后写入恢复分区：
adb shel1 dd if=/sdcard/cuetom-recovery.ing of=/dev/block/mmcblk0p7
adb shel1 push custom-recovery.ing /sdcard/
最后，你需要重新启动，进人定制恢复模式，并应用su更新包。
adb reboot recovery
3.6历史上的一些已知攻击
本节将讨论获取Android设备root访问权限的许多先前已知的方法。通过展示这些安全漏洞，
我们希望让你了解获得Android设备root访问权限的各种可能途径。虽然其中的一些安全漏润影
响到更大的Linux生态圈，但大部分是Android系统特有的。其中许多安全漏洞在无法访问ADB
shell时不能利用。在每个案例中，我们都将讨论安全漏洞的根源，以及如何利用漏洞的关键细节。
注意细心的读者可能会注意到，以下安全漏洞中有几个是由多个不同的团队在互不知晓的情
况下独立发现的。虽然这种情况（“撞润”）并不是很普遍，但的确会时不时地发生。
本节中提供的一些漏洞利用细节具有很强的技术性。如果你无法理解，或者你已经非常熟悉
这些攻击的内部工作原理，你可以直接跳过它们。对于每一个案例，本节只大致说明这些漏润利
用，第8章会就其中儿个漏润利用介绍更多细节。
3.6.1内核：Wunderbar/asroot
这个漏润是由谷歌安全团队的TavisOrmandy和JulienTinnes发现的，并被编号为
CVE-2009-2692:
Linux 内核从2.6.0至2.6.30.4版本，以及2.4.4至2.4.37.4版本，没有为 proto_ops
结构中套接字操作的所有函数指针进行初始化，导致本地用户可以触发空指针引用，以
及通过使用mmap来映射zero页面，在zero页面上放置任意代码，然后调用一个不可用
的操作来获得权限。该遇润通过 PF_PPPOX套接字上的 sendpage 操作（sock_sendpage
函数）进行了验证。
---
## Page 73
3.6历史上的一些已知攻击57
Brad Spengler（spender）为x86/x86_64架构编写了该安全漏润的利用程序Wunderbar，这也
让这个漏润得到了它响亮的名字。然面为Android（ARM架构上的Linux操作系统）编写的利用
程序是由 Christopher Lais（Zinx）发布的，命名为 asroot，并公开在httpc//g1files.webs.com/Zinx/
android-root-20090816.tar.gz上。该利用程序对于所有使用存在漏润内核的Android版本都适用。
asroot利用程序在地址0处引人了一个新的.NULL节，正好拥有一个内存页面的大小。这个
节中包含着将当前用户ID（UID）和用户组ID（GID）设置为root的代码。接下来，利用程序
调用 sendfile 函数，导致在PF_BLUETOOTH套接字上的一个 sendpage 操作，然而缺少了对
proto_ops结构的初始化。这会导致.NULL节中的代码以内核模式执行，最终获取一个rootshell。
3.6.2恢复：Volez
Android2.0和2.0.1版本的恢复镜像所使用的签名验证机制中有个“手抖”的错误，使得恢
复进程在一个已签名的更新zip文件中错误地检测EndofCentralDirectory（EOCD）记录。这个
安全漏洞导致可以修改已签名OTA恢复包中的内容。
这个签名验证机制的漏洞是由Mike Baker（[mbm]）发现的，并被用于在摩托罗拉Droid设
备的第一个官方OTA包发布时对该设备进行root。通过创建一个特别构造的zip文件，可以将一
个su二进制程序注入已签名的OTAzip文件中。之后，ChristopherLais（Zinx）编写了Volez，用来
从一个合法签名的更新zip文件中创建出定制的更新zip文件，这一工具可从htp:/zenthought.org
content/project/volez下载到]。
3.6.3udev:Exploid
这个安全漏润影响了Android 2.1及之前的所有版本。它最初在x86Linux系统使用的udev
守护进程中被发现，并被编号为CVE-2009-1185。后来，谷歌又在用于处理Android中udev功能
的init守护进程中引人了这一漏洞。
它的漏洞利用程序依赖于udev代码验证NETLINK消息来源的失效，这一失效允许用户空
间进程发送一个号称来源于受信任内核的 udev事件。由 SebastianKrahmer（The Android Exploid
Crew）最初发布的Exploid利用程序，必须从设备上一个可写并可执行的目录中运行。
第一步，漏洞利用程序创建了一个域为PF_NETLINK、家族为NETLINK_KOBJECT
UEVENT（发往用户空间事件的内核消息）的套接字；第二步，它在当前目录中创建一个hotplug
文件，该文件包含到exploid二进制程序的路径；第三步，它在当前路径创建一个指向
/proc/sys/kernel/hotplug的符号链接data；第四步，它向NETLINK套接字发送一条伪造的消息。
init进程在接收到这条消息，验证其来源失败后，它将继续处理，将hotplug文件中的内容复
制到data文件中。他是以root权限进行的这些操作。当下一次hotplug事件发生时（比如断开和
重新连接Wi-Fi接口）.内核将以root权限执行exploid二进制程序。
在这一时间点上，漏洞利用程序将检测到它以root权限运行，随后重新以读写模式挂载系统
分区，并在路径/system/bin/rootshell 上创建一个 set-uid的 root shell。
---
## Page 74
58第3章rootAndroid设备
3.6.4 adbd:RageAgainstTheCage
如前所述，在3.5.1节中，ADB守护进程（adbd进程）以root权限开始启动，然后降权至shell
用户。在Android2.2及之前的版本中，ADB守护进程在降权时不会检查setuid润用的返回值。
SebastianKrahmer利用了adbd中这一检查缺失的安全漏洞，开发了RageAgainstTheCage利用程
序( 下 载地hl为http:/stealth.openwall.net/xSports/RageAgainstTheCage.tgz )。
这一漏洞利用程序必须通过ADBshell在shellUID用户环境下运行。基本原理是：利用程序
一直fork进程直至fork调用失败，这意味着该用户的进程创建数已经达到极限。这是内核实施
的强制限制，称为RLIMIT_NPROC，它指定了可以为调用进程的真实UID创建的最大进程（或
线程）数。在这一时间点上，漏洞利用程序杀掉adbd，导致它以root权限重新启动。遗憾的是，
这时adbd无法降权到shell，因为对于shell用户的进程限制已经达到了。Setuid 调用会失败，
但adbd并不检测这个失败，所以仍然继续以root权限运行。一旦攻击成功，adbd将会通过adb
shel1命令提供root shell
3.6.5Zygote:Zimperlich和Zysploit
第2章介绍过，所有的Android应用是由Zygote进程fork分支后启动的。你可能已经猜到，
Zygote进程是以root权限运行的。在fork之后，新的进程将使用setuid调用降权至目标应用的UID。
与RageAgainstTheCage利用的漏洞类似，Android 2.2及之前版本的Zygote进程没有对降权
时的 setuid 调用返回值进行检查。同样，在耗尽目标程序UID 的最大进程数之后，Zygote便
无法降低它的权限，然后就以root权限启动应用了。
Joshua Wise 的Unrevoked解锁工具早期发行版本利用了该漏洞。后来，在SebastianKrahmer
将Zimperlich 利用程序源码公开到http://c-skills.blogspot.com.es/2011/02/zimperlich-sources.html贞
面上后，JoshuaWise 也公开了他的Zysploit 利用程序实现，可以从https:/github.com/unrevoked/
zysploit获取。
3.6.6ashmem:KillinglnTheNameOf和psneuter
Android的共享内存（ashmem）子系统是一个共享内存分配器。它类似于POSIX共享内存
（SHM）.但是行为不同，并且其基于文件的API也更为简单。共享内存可以通过mmap或者文
件I/O进行访间。
两个流行的root提权利用使用了Android2.3之前版本的ashmem实现中的一个安全漏洞。在
受影响的版本中，ashmem允许任何用户重新映射属于init进程的共享内存，将包含系统属性地
址空间的内存进行共享，面这是Android操作系统的关键全局数据存储。这个安全漏洞的CVE
编号为CVE-2011-1149。
由SebastianKrahmer开发的KillinglnTheNameOf利用程序将系统属性空间重新映射为可写，
并将ro.secure属性设置为0。在重新启动系统或者重新运行adbd后，ro.secure属性的修
---
## Page 75
3.6历史上的一些已知攻击59
改会允许通过ADB shell取得root访问权限。可以从http:/ce-skills.blogspot.com.es/2011/01/adb
trickery-again.html页面下载到这个利用程序。
psneuter利用程序是由ScotWalker（scotty2）开发的，它使用同一个安全漏洞来限制对系统
属性空间的权限。通过这个操作，adbd将无法读取ro，secure属性的值来确定是否降权至shel
用户。在无法确定ro.secure属性值的时候，利用程序会假设ro.secure的值为0，并且不降
权。同样，这使得可以通过ADB shell获得root访问权限。可以从https:/github.com/tmzt/g2root-
 usdnausd/oos/osono
3
3.6.7vold:GingerBreak
这个安全漏洞被编号为 CVE-2011-1823，由SebastianKrahmer在GingerBreak利用程序中首
次演示，GingerBreak 利用程序可以从http://c-skills.blogspot.com.es/2011/04/yummy-yummy-
gingerbreak.html页面下载到。
在Android3.0版本和2.3.4之前的 2.x版本上的volume守护进程（vold）由于信任
从PF_NETLINK委接字接收到的消息，因此允许以root权限执行任意代码，利用方法
是通过一个负数索引绕过只针对最大值的有符号整数检查。
在触发这个安全漏洞之前，利用程序会从系统中收集各种信息。首先，它打开/proc/net/netlink
提取vold进程的进程标志符（PID），然后检查系统的C库（libc.so）来找到system和strcmp的
符号地址，接下来它将解析vold可执行程序的ELF文件头，来定位全局偏移表（GOT）分节，
随后它将解析vold.fstab文件来找到设备的/sdcard挂载点，最后，为了发现正确的负数索引值，
它会在监视logcat输出的同时故意让服务崩溃。
在收集信息后，利用程序会通过发送包含经过计算的负数索引值的恶意NETLINK消息，来
触发安全漏洞。这会导致vold修改在它自己GOT表中的条目，以指向system函数。一且目标
GOT表中的一个条目被覆盖，vold将以root权限执行GingerBreak二进制程序。
这个利用程序检测到它已经在root权限下运行后，便会进人到最后一个阶段，在这时，利用
程序首先重新挂载/data以移除nosuid标志位，然后将/data/local/tmp/sh修改为set-uidroot，最后
它将退出以root权限运行的新进程，并从原始的利用程序进程中执行最新创建的set-uidrootshell。
该安全漏洞的案例研究详见8.2.1节。
3.6.8PowerVR:levitator
2011年 10 月，Jon Larimer 和 Jon Oberheide 在 http:/jon.oberheide.org/files/levitator.c上发布了
levitator利用程序。这个利用程序使用了两个不同的安全漏洞，它们会影响使用PowerVRSGX
芯片组的Android设备。Android2.3.5及之前版本的PowerVR驱动中存在着如下两个安全漏润。
---
## Page 76
60第3章rootAndroid设备
CVE-2011-1350：PowerVR驱动对一次ioctl系统调用返因响应数据到用户模式时提
供的长度参数验证失效，导致可以泄露最大1MB的内核内存。CVE-2011-1352：内核内
存破坏安全漏润，导致任意可访问/dev/pvrsrvkm的用户对前述泄露内存具有写权限
levitator利用程序结合使用了这两个安全漏洞，巧妙地对内核内存进行破坏。在达成权限提
升之后，它产生出一个rootshell。对这个安全漏洞的案例研究详见第10章。
3.6.9libsysutils:zergRush
Revolutionary团队在2011年10月发布了流行的zergRush利用程序，源代码可以从
https://github.com/revolutionary/zergRush获取，该利用的安全漏润被编号为CVE-2011-3874，具体
捐述如下：
Android 2.2.2及之前的 2.2.x版本，以及2.3.6及之前的2.3.x版本的libsysutils库中
存在栈缓冲区溢出漏润，允许用户协助的远程攻击者通过一个应用程序调用
FrameworkListener：：dispatchCommand方法并提供错误数量的参数，从而导致任
意代码执行。在zergRush利用程序申演示了触发一个释放后重用的安全漏洞。
该利用程序使用了Volume管理守护进程来触发这个安全漏洞，因为它链接了libsysutils.so
库并以root权限运行。因为栈是不可执行的，所以利用程序使用libc.so库中的一些gadget，构建
了一个面向返回编程（ROP）的代码链。然后它传递给vold一个特殊构造的FrameworkCommand
对象，使得RunCommand指向利用程序的ROP载荷。这将使得载荷以root权限执行，并由载荷
生成一个rootshell，并将ro.kernel.qemu属性改为1。正如前面所提过的那样，这会导致ADB
重启之后获得root权限。
对这个安全漏洞的案例研究详见第8章。
3.6.10内核：mempodroid
这个安全漏洞是由JuriAedla发现的，并被编号为CVE-2012-0056：
Linux 内核 2.6.39及其他版本中的mem_write 品数，当ASLR被禁用时，在对
/proc//mem进行写操作时没有恰当地检查权限，从而免许本地用户通过修改进程
内存获取权限。该安全漏润通过Mcmpodipper利用程序进行了演示。
/proc//mem的文件系统条目是一个可用来访问进程内存页面的接口，访间方式是通过
POSIX标准文件操作（如open、read、Iscck等）完成的。在Linux内核版本2.6.39中，对其他进