the condition ends with, specifying the value .exe:
Figure 2.18 – Filter by Path followed by the .exe extension
Now that we have seen how to work with tools regarding system processes, such as 
Process Explorer and Process Monitor, let's learn how to work with more tools that will 
give us more antivirus research leads.
32     Before Research Begins
Working with Autoruns
As in all operating systems, Windows contains many places where persistence may be 
used, and just as malware authors do, antivirus companies want to make use of persistence 
to start their processes when the operating system starts up.
In Windows, there are many places where it is possible to place files that will be started 
when the operating system starts up, such as the following:
• HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run
• HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\
CurrentVersion\RunOnce
• HKLM\System\CurrentControlSet\Services
• HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\
CurrentVersion\Policies\Explorer\Run
• %AppData%\Microsoft\Windows\Start Menu\Programs\Startup
But you will not need to memorize all these locations, because there is a tool called 
Autoruns (https://docs.microsoft.com/en-us/sysinternals/
downloads/autoruns) for exactly this purpose.
Using Autoruns, we can display all the locations where persistence can take place within 
the operating system.
And for each location, we can create a list of files that start up with the operating system. 
Using these lists, we can gather even more leads for antivirus research.
When we run Autoruns, we can also use filters, and this time as well, we are going to 
specify a string, which is the name of the antivirus software – AVG:
Figure 2.19 – Filter by AVG results in Autoruns
Working with Regshot     33
After filtering the string of AVG, Autoruns displays dozens of AVG files that start up with 
the operating system. Besides the name of the file, each line also includes the location of 
the file, its description, publisher name, and more.
The files displayed by Autoruns can include critical AVG files and, if a particular file 
doesn't run, the antivirus program can't work properly. So, it is only logical that these are 
the files we should choose to focus on for future research, and we will gather these files as 
leads to make our research more efficient. 
Working with Regshot
While gathering leads to conduct antivirus research, we also need to understand which 
registry values the antivirus software has added to help us figure out which files and 
registry values it has added. To gather this information, we're going to use the Regshot 
tool.
Regshot is an open source tool that lets you take a snapshot of your registry, then compare 
two registry shots, before and after installing a program.
To take the first shot, we open the tool, define whether we want the output in HTML or 
plain text format, define the save location of the file, and then click 1st shot:
Figure 2.20 – The 1st shot button in Regshot
34     Before Research Begins
Only after taking the first shot will we install the antivirus software we are interested in 
researching. After completing the installation, go back into Regshot and click 2nd shot:
Figure 2.21 – The 2nd shot button in Regshot
After taking the second shot, you can then click Compare.
This will create an output file of the type selected by the user (plain text or HTML). This 
output file will display all registry changes that took place after installing the antivirus 
software:
Working with Regshot     35
Figure 2.22 – AVG Antivirus Regshot diff results
Obviously, in order to gather leads, we have to gather these locations of registry values, 
but what's interesting is that these are mainly EXE and DLL files. If we search within this 
output file for DLL and EXE files, we can get even more valuable results:
Figure 2.23 – Accessing the registry via PowerShell
36     Before Research Begins
Also, it is good to know that you do not have to use Regedit or any other third-party 
tools like Regshot to access and search the registry; you can use PowerShell as seen in the 
preceding screenshot.
Third-party engines
Finally, it is important to realize that some antivirus software companies use third-party 
engines produced by other companies.
Here's a full list of vendors and the third-party engines they use (https://www.
av-comparatives.org/list-of-consumer-av-vendors-pc/):
Table 2.1 – Antivirus third-party static engines
Understanding which antiviruses share third-party engines means that when you are 
gathering leads for one antivirus software, you can shorten your research time and use the 
same leads for another antivirus software.
Summary     37
Summary
Gathering leads is a critical step in the process of preparing to research antivirus software. 
In this chapter, we have demonstrated several tools from the Sysinternals suite as well as 
the Regshot utility. Using these, we can gather up leads to get ready for this research.
We recommend continuing to look for more tools to help locate additional leads. There 
are also other excellent dynamic malware analysis tools you can use.
In the next chapter, we will discuss our two antivirus bypass approaches, the fundamentals 
of the Windows operating system, the protection rings model, and more.
3
Antivirus Research 
Approaches
In this chapter, you will learn about the Windows operating system protection rings 
concept, we will introduce two of our real-life bypass examples, and you will also learn the 
basic three vulnerabilities that can be used to bypass antivirus software.
After explaining what leads are, how they help us, and how to gather them to start 
conducting antivirus research, we have now come to the stage where it is time to choose 
which approach is most appropriate for conducting research on antivirus software and 
then starting to research the leads we found in the previous chapter.
In this chapter, we will go through the following topics:
• Understanding the approaches to antivirus research
• Introducing the Windows operating system
• Understanding protection rings
• Protection rings in the Windows operating system
• Windows access control list
40     Antivirus Research Approaches
• Permission problems in antivirus software
• Unquoted Service Path
• DLL hijacking
• Buffer overflow
Understanding the approaches to antivirus 
research
There are two main approaches to antivirus research. Both ultimately need to lead to the 
same result, which is always bypassing antivirus software and running malicious code on 
the user's endpoint.
The two antivirus research approaches are the following:
• Finding a vulnerability in antivirus software
• Using a detection bypass method
As with any code, antivirus software will also contain vulnerabilities that can be taken 
advantage of. Sometimes, these vulnerabilities may allow controlling the antivirus 
software's means of detection, prevention, or both.
In upcoming sections, we will look at a few possible vulnerabilities that can help us bypass 
antivirus software.
Important note
There are a lot of vulnerabilities that we can use to bypass antivirus software, 
beyond the vulnerabilities we have mentioned in this chapter. For a more 
comprehensive list of vulnerabilities, check the following link: https://
cve.mitre.org/cgi-bin/cvekey.cgi?keyword=antivirus.
Introducing the Windows operating system 
As in this book we are discussing bypassing Windows-based antivirus software, we will 
now discuss the Windows operating system and its security protection mechanisms.
The earliest Windows operating systems were developed for specific CPUs and other 
hardware specifications. Windows NT introduced a new breed of Windows, a process-
independent operating system that also supports multiprocessing, a multi-user 
environment, and offers a separate version for workstations and servers.
Introducing the Windows operating system      41
Initially, Windows NT was written for 32-bit processors, but it was later expanded to a 
broader architecture range, including IA-32, MIPS, Itanium, ARM, and more. Microsoft 
also added support for 64-bit CPU architectures along with major new features such as 
Windows API/Native API, Active Directory, NTFS, Hardware Abstraction Layer, security 
improvements, and many more.
Over the years, many parties criticized Microsoft for its lack of emphasis on information 
security in the Windows operating systems. For example, in the following screenshot, we 
can see that even the authors of the Blaster malware complained about the security of the 
Windows OS:
Figure 3.1 – Blaster malware asks Bill "billy" Gates to fix his software
With time, Microsoft decided to change its approach and implement several security 
mechanisms against common attacks that exploited built-in operating system-level 
vulnerabilities. The prominent implemented security mechanisms are as follows:
• ASLR – Address Space Layout Randomization
• DEP – Data Execution Prevention
• SEHOP – Structured Exception Handling Overwrite Protection
42     Antivirus Research Approaches
The ASLR security mechanism prevents malware from exploiting security vulnerabilities 
that are based on expected memory locations in the operating system. ASLR does this by 
randomizing the memory address space and loads crucial DLLs into memory addresses 
that were randomized at boot time:
Figure 3.2 – ASLR illustration
In the preceding screenshot, you can see that DLL files are loaded into ASLR-randomized 
memory locations at boot time.
The DEP memory security mechanism prevents code from executing on specific memory 
regions that are marked as a non-executable memory page. This in turn prevents or at 
least hardens exploitation attempts of buffer overflow vulnerabilities.
The SEHOP runtime security mechanism prevents the exploitation attempts of malicious 
code by abusing the SEH operating system structure by using the exploitation technique 
of SEH overwrite. This security mechanism can also be deployed by a Group Policy setting 
of Process Mitigation Options.
After the introduction of the Windows operating system and its security mechanisms, let's 
continue with protection rings. 
Understanding protection rings 
Before we explain vulnerabilities that can be exploited because of permission problems, it 
is important to understand the concept of protection rings in operating systems.
The term protection ring refers to a hierarchical mechanism implemented on CPUs and 
utilized by operating systems such as Windows to protect the system by providing fault 
tolerance and, of course, to better protect from malicious activity and behavior. Each ring 
in this mechanism has a unique role in the overall functioning of the operating system, as 
seen in the following illustration:
Protection rings in the Windows operating system     43
Figure 3.3 – Protection ring layers
The lower the number of the ring, the closer it is to the hardware and, therefore, the higher 
its privilege level. As you can see in the illustration, Ring 0 is the operating system kernel, 
which provides "back-to-back" access to the hardware from the higher rings and vice 
versa. Antivirus software tends to deploy its inspection mechanisms in the lower rings, 
mostly as a driver. The lower rings offer more visibility to the antivirus engine, letting it 
inspect actions conducted on the operating system, including malicious actions.
Protection rings in the Windows operating 
system
The lower the ring, the more privileges and visibility it has in the overall operating system. 
As the wise saying goes, "With great power comes great responsibility". Here are brief 
descriptions of the roles of each of these rings, moving from the outside in:
• Ring 3 – This ring is also known as "user mode", "userland", or "userspace". As 
the name suggests, this ring is where the user interacts with the operating system, 
mainly through the GUI (Graphical User Interface) or command line.
Any action taken by a program or process in the operating system is actually 
transferred to the lower rings. For example, if a user saves a text file, the operating 
system handles it by calling a Windows API function such as CreateFile(), 
which, in turn, transfers control to the kernel (Ring 0). The kernel, in turn, handles 
the operation by transferring the logical instructions to the final bits, which are then 
written to a sector in the computer's hard drive.
44     Antivirus Research Approaches
• Rings 2 and 1 – Ring 2 and 1 are designed generally for device drivers. In a modern 
operating system, these rings are mostly not used.
• Ring 0 – Ring 0, the kernel, is the lowest ring in the operating system and is 
therefore also the most privileged. For malware authors, accessing this lowest 
layer of the operating system is a dream come true, offering the lowest-to-highest 
visibility of the operating system to get more critical and interesting data from 
victim machines. The main goal of the kernel is to translate actions in a "back-to-
back" manner issued by the higher rings to the hardware level and vice versa. For 
instance, an action taken by the user such as viewing a picture or starting a program 
ultimately reaches the kernel.
The following diagram demonstrates the Windows API execution flow from user to kernel 
space:
Figure 3.4 – The execution flow of the CreateFileW Windows API to the kernel
Some believe that antivirus software must be installed in Ring 0, the kernel level of the 
operating system. This is actually a common misconception because, ideally, the only 
programs running in Ring 0 will be drivers or other software strictly related to hardware.
As previously explained, in order for antivirus software to gain visibility of operating 
system files, it needs to be installed in a lower ring than ring 3 as well as to be protected 
from specific user interactions.
Every antivirus software has Ring 3 components, especially detection components that 
can be configured insufficiently to allow a regular user (non-admin user) to discover 
permissions-based vulnerabilities.
Windows access control list     45
The following table shows the permission levels of the Windows operating system 
Discretionary Access Control List (DACL):
Table 3.1 – The Windows permission levels
As can be seen in the preceding table, we have a list of permissions and each one of them 
has a unique capability in the operating system, such as writing and saving data to the 
hard disk, reading data from a file, the execution of files, and more.
Windows access control list
Each file in the operating system, including executables, DLL files, drivers, and other 
objects, has permissions based on the configured Access Control List (ACL).
The ACL in the Windows operating system is referred as the DACL and it includes two 
main parts:
• The first part is the security principal that receives the relevant permissions. 
• The second part is the permissions that the object receives in addition to other 
inherited permissions.
46     Antivirus Research Approaches
Each of these objects is considered as a define acronym in the Access Control List. In the 
following screenshot, we can see an example of such an acl:
Figure 3.5 – File security properties (DACL)
In the preceding screenshot, we can see the entities or the security principal objects that 
will receive the relevant permissions.
Permission problems in antivirus software     47
Permission problems in antivirus software
The following are two examples of permission problems that can arise with antivirus 
software.
Insufficient permissions on the static signature file
During our research, we found antivirus software whose static signature file had 
insufficient permissions. This meant that any low-privileged user could erase the contents 
of the file. When the antivirus software then scanned files, it would be comparing them to 
an empty signature file.
We notified the antivirus vendor about this vulnerability and they released an update with 
a patch that fixed the vulnerability.
Improper privileges
Permission problems can occur not only in antivirus software but in all kinds of security 
solutions. In one of our research journies, we researched a Data Loss Prevention (DLP) 
security solution of company named Symantec. This software's primary goal is to block 
and prevent the leakage of sensitive data from the organization's network endpoints by 
means of storage devices such as external hard drives, USB thumb drives, or file upload to 
servers outside the network.
After a simple process of lead gathering, we found the process name of the DLP solution 
and the full paths of these loaded processes in the file system along with their privilege 
level. We discovered that the Symantec DLP agent had been implemented with improper 
privileges. This means that a user (mostly administrative-privileged user) with escalated 
privileges of NT AUTHORITY\SYSTEM could exploit the potential vulnerability and 
delete all files within the DLP folder.
In this case, after we had escalated our privileges from Administrator to SYSTEM 
(using the Sysinternals-PSexec utility), and after we had gathered sufficient 
leads indicating the full path of the DLP folder (using the Sysinternals-Process 
Explorer utility), we deleted the folder contents and rebooted the machine. With this 
accomplished, we were able to successfully exfiltrate data from the organization's machine, 
utterly defeating the purpose of this costly and complicated DLP solution.
We contacted Symantec regarding this vulnerability and they released a newer version 
where the vulnerability is patched and fixed.
Permission problems can also manifest as an an Unquoted Service Path vulnerability.
48     Antivirus Research Approaches
Unquoted Service Path
When a service is created within the Windows operating system whose executable path 
contains spaces and is not enclosed within quotation marks, the service will be susceptible 
to an Unquoted Service Path vulnerability.
To exploit this vulnerability, an executable file must be created in a particular location in 
the service's executable path, and instead of starting up the antivirus service, the service 
we created previously will load first and cause the antivirus to not load during operating 
system startup.
When this type of vulnerability is located on an endpoint, regardless of which antivirus 
software is in place, it can be exploited to achieve higher privileges with the added value of 
persistence on the system.
For antivirus bypass research, this vulnerability can be used for a different purpose, to 
force the antivirus software to not load itself or one of its components so it will potentially 
miss threats and in that way, the vulnerability can bypass the antivirus solution.
In December 2019, we publicized an Unquoted Service Path vulnerability in Protegent 
Total Security version 10.5.0.6 (Protegent Total Security 10.5.0.6 - Unquoted Service Path 
– https://cxsecurity.com/issue/WLB-2019120105):
Figure 3.6 – Protegent Total Security 10.5.0.6 – Unquoted Service Path vulnerability
Another vulnerability that could help us bypass antivirus software is DLL preloading/
hijacking. 
DLL hijacking     49
DLL hijacking
This vulnerability takes advantage of the insecure DLL loading mechanism in the 
Windows operating system.
When software wants to load a particular DLL, it uses the LoadLibraryW() Windows 
API call. It passes as a parameter to this function the name of the DLL it wishes to load.
We do not recommend using the LoadLibrary() function, due to the fact that it is 
possible to replace the original DLL with another one that has the same name, and in that 
way to cause the program to run our DLL instead of the originally intended DLL.
In non-antivirus software, this vulnerability can have a low/medium severity level, but 
in the context of antivirus software, this vulnerability could reach critical severity, since 
we could actually cause the antivirus to load and run a malicious DLL. In certain cases, it 
could even cause the DLL to disable the antivirus itself or even aid in bypassing white-list 
mechanisms.
Important note
In order to exploit a DLL hijacking vulnerability in antivirus software, many 
times you will need to achieve high privileges before the exploitation can take 
place. 
In recent years, many vulnerabilities of this type have emerged in antivirus software from 
leading vendors, such as AVG and Avast (CVE-2019-17093) (https://nvd.nist.
gov/vuln/detail/CVE-2019-17093), Avira (CVE-2019-17449) (https://
nvd.nist.gov/vuln/detail/CVE-2019-17449), McAfee (CVE-2019-3648) 
(https://nvd.nist.gov/vuln/detail/CVE-2019-3648), Quick Heal (CVE-
2018-8090) (https://nvd.nist.gov/vuln/detail/CVE-2018-8090), and 
more.
Another vulnerability that can help us to bypass antivirus software is buffer overflow.
50     Antivirus Research Approaches
Buffer overflow
A buffer overflow (or overrun) is a very common and well-known attack vector that is 
mostly used to "overflow" vulnerable programs. This involves sending a large amount 
of data, which is handled without proper input validation, causing the program to fail 
in one of a number of ways. Once this vulnerability has been exploited, it can be used 
to inject malicious shellcode and take full control of the victim's device. Over the years, 