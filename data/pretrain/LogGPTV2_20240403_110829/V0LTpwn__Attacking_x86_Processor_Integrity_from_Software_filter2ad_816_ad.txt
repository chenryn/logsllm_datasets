are rare at higher voltages. On the 8700K, cores 2 and 4
can function at the same low voltage as core 1 or even
lower, but they only have a success rate of up to 30%
and 16% respectively.
All in all, this shows that benign, real-world enclave
code is susceptible to faults that can be provoked from
software. This can be especially devastating from a secu-
rity perspective during secret key generation. Since the
computational security of public-key cryptography relies
on the assumption that some mathematical problem is
computationally hard, ﬂipping a bit in one of the inter-
mediate results could potentially weaken the security of
the underlying cipher to enable real-world brute-forcing
attacks.2 Further, a number of recent works leverage
TEEs to implement higher-level smart contract proto-
cols [12, 13] or multi-party computation [18, 42]. Both
of these use cases depend heavily on cryptography and
we expect them to be highly aﬀected by the V0LTpwn
attack.
2Further attack possibilities include denial of service when
encrypting data, such that decryption becomes impossible due to
a faulty key being used by the enclave.
Figure 5: Success rate of our OpenSSL HMAC attack
on various cores. The top graph refers to a payload size
of 32B, the bottom one 1KB.
authentication code (HMAC) using the cryptographic
hash function SHA256.
We evaluated this attack on a Core i7-7700K and a
Core i7-8700K processor. The microarchitecture of the
former is Kaby Lake, that of the latter is Coﬀee Lake. We
evaluated diﬀerent message sizes and physical cores, while
running the stressor from Listing 2 on the logical partner
core. The results are summarized in Table 1, which
reports the expected number of successes per 10 000 tries
USENIX Association
29th USENIX Security Symposium    1453
0%20%40%60%80%100%SuccessRate(32Bpayload)7700Kc07700Kc17700Kc27700Kc38700Kc08700Kc18700Kc28700Kc38700Kc48700Kc50%20%40%60%80%100%SuccessRate(1KBpayload)6 Evaluation and Results
In this section, we evaluate our V0LTpwn attack. In
particular, we analyze at which voltage levels faults
occur, how they manifest in memory (e.g., with respect
to locality), and how reliably bit ﬂips can be exploited
within SGX.
6.1 Tested Platforms and Conﬁgura-
tions
For the evaluation we used multiple Intel processors from
diﬀerent generations. In detail, we used the i7-7700 and
i7-7700K with the Kaby Lake microarchitecture and the
i7-8700K from the Coﬀee Lake generation3.
We conducted preliminary testing on these platforms
which we found to be prone to non-recoverable, software-
induced processor faults due to undervolting. Our plat-
forms are running the oﬃcial Intel SGX SDK, PSW and
drivers in version 2.5 released in May 2019 for Ubuntu
18.04 (minimal installation).
We created an example SGX enclave which we build
in Hardware-PreRelease mode.
6.2 Fault-Inducing Voltage Level
To demonstrate that bit ﬂips can be reproduced at arbi-
trary P-states, we evaluated the set {0x8, 0x10, 0x1B,
0x20, 0x24, 0x2A} on our test processors. We used the
same setup as described in Section 4 and executed a pro-
gram containing the vulnerable code pattern (Listing 3)
on every core. For every run, we measured the earliest
fault-prone voltage level. In Table 2, we present the re-
sults for the i7-7700K processors. In general, we observe
that every P-state has custom fault-prone voltage levels.
Depending on the P-state, the voltage oﬀset, which has
to be applied to MSR 0x150, ranges between 250 mV
and 300 mV. For every P-state, we measure diﬀerences
of 5 to 10 mV between the cores.
Repeating the same procedure on the other processors
yields the same observations. However, every processor
model has individual fault-prone voltage levels. We
assume the cause lies in variations in the manufacturing
process and source materials. Regarding the V0LTpwn
attack, the result implicate that an attacker has to adapt
the attack parameters for every target processor.
P-state T (°C) Core 0 Core 1 Core 2 Core 3
0.545
0.585
0.705
0.775
0.835
0.935
0.540
0.585
0.700
0.765
0.825
0.930
0x08
0x10
0x1B
0x20
0x24
0x2A
32
33
37
41
42
50
0.545
0.585
0.710
0.775
0.835
0.935
0.535
0.580
0.705
0.770
0.835
0.930
Table 2: Fault-prone voltage levels (V) for diﬀerent P-
states and cores of i7-7700K processor.
Figure 6: Reliability results of our proof-of-concept on
the i7-7700K processor: success rate of the PoC exploit
in Listing 4.
6.3 Evaluation of the Control-ﬂow Devi-
ation PoC
We evaluated our proof-of-concept control ﬂow deviation
exploit (described in Section 5.1) on all cores of our i7-
7700K processor, spanning the whole range of available
P-states. We created an SGX enclave which runs the
code in Listing 4 10 000 times. We then tried running the
enclave in various undervolted environments for 100 000
times. Figure 6 shows the success rate of the attack, i.e.,
the percentage of runs in which the diﬀerent branch was
executed in Listing 4. We tested two diﬀerent stressors:
the stressor from Listing 2 and an AVX implementation
of the Twoﬁsh cipher [25]. The best-performing stressor
is the code from Listing 2; while using this stressor,
cores 1, 2, and 3 achieved success rates of 99%, 96% and
99% respectively at 700 mV and P-state 0x1B. Using
the Twoﬁsh code as a stressor, we could only achieve
up to 8% success rate on core 1 at P-state 0x1B, 6% at
P-state 0x20, and 2.5% on P-state 0x24. Cores 2 and 3
3Intel uses Stepping codes to diﬀerentiate between diﬀerent
revisions of a microarchitecture. Our Kaby Lake processor has
Stepping 9 and our Coﬀee Lake has Stepping 10.
1454    29th USENIX Security Symposium
USENIX Association
700725750775800825850Corevoltage(mV)0%20%40%60%80%100%Successrate0x1B45°C0x2050°C0x2453°C0x1B43°CCore0,TwoﬁshstressorCore1,TwoﬁshstressorCore2,TwoﬁshstressorCore3,TwoﬁshstressorCore0,Listing2stressorCore1,Listing2stressorCore2,Listing2stressorCore3,Listing2stressorProcessor Core 1 BF 2 BF 3+ BF
12
92
151
23
0
5
21
0
26
998
136
0
4
147
83
199
444
122
66
7
67
3
32
0
275
1
410
239
905
709
405
855
934
988
912
997
942
2
589
999
586
614
0
1
2
3
0
1
2
3
0
1
2
3
4
5
i7-7700
i7-7700K
i7-8700K
Table 3: Breakdown of 1000 faults on various cores and
processors: for every core, the table shows how many
faults led to one bit ﬂip, two bit ﬂips, and three or more
bit ﬂips
Figure 7: Heat map of the location of bit ﬂips inside
a 128-bit word, for 1000 faults on each core of each
processors.
reached a success rate of 2.5%. Core 0 did not show a
signiﬁcant number of faults.
6.4 Fault Manifestation
We could only obtain faults in P-states between 0x1B
(2700 MHz) and 0x24 (3600 MHz). Lower P-states yield
practically no successful attacks but only lead to recov-
erable errors. This is reasonable, since a lower P-state
eﬀectively means that the processor is running at a lower
frequency (e.g., 800 MHz for P-state 0x8 and 1600 MHz
for P-state 0x10), and hence, requires overall less power
to execute instructions. Therefore, lowering the voltage
supply is not an eﬀective measure to produce faults on
the lower frequency domain — at least not within the
limits available from software. Pushing the system to-
wards the high frequency limits did not produce better
exploit reliability after a certain point. While perhaps
counter-intuitive at ﬁrst, this can be explained by two
facts: ﬁrst, higher frequency domains naturally require
higher voltage levels. This means that the base voltage
that is supplied to the cores in that state will be higher.
However, the voltage oﬀset the attacker is able to set
to reduce the voltage supply from software is limited
to a ﬁxed range, and hence, aﬀecting core voltage from
software in this way is less eﬀective in the higher fre-
quency domain. Second, it has been known for a long
time that hardware becomes generally less stable as clock
frequency increases [51]. This means, any physical eﬀect
interfering with normal processor execution has more
severe consequences for the overall system at higher clock
frequencies. For instance, in our tests we observed that
the system will more easily produce a hard crash than
issue machine-check exceptions in the higher frequency
domain.
Being able to induce faults in a reproducible way from
software allowed us to study the behavior and details
behind the generated faults. We analyzed the faults with
regards to their position on our three processors: i7-7700,
i7-7700K, and i7-8700K. We made several interesting
observations: ﬁrst, all faults we observed manifested as
bit ﬂips in the result of computation or memory trans-
fers. Second, bit ﬂips aﬀected diﬀerent byte positions
within the respective 128-bit word used by the faulting
instructions (Figure 7). Since the minimal, vulnerable in-
struction patterns VP1 and VP2 utilize vector operations,
we focused on 128-bit words used by AVX instructions
in our subsequent analysis. Our tests show that faults
are signiﬁcantly more likely for certain byte positions,
while other locations were never aﬀected. The aﬀected
bytes are diﬀerent for each physical core we tested: for
instance, on core 3 of the 8700K faults were heavily
localized within byte 4, while the remaining cores were
aﬀected by bit ﬂips throughout several diﬀerent byte po-
sitions. In contrast to this, core 1 was aﬀected by bit ﬂips
within all byte position. Interestingly, the number of bit
ﬂips produced per fault also varied between cores (Ta-
ble 3). On the 7700K, physical cores were likely to yield
only a single bit ﬂip, while on the 7700 we observed a
larger number of multi-bit errors. On the 8700K, we
observed both single-bit and multi-bit faults.
Perhaps most crucially, the aﬀected byte locations
remained stable for a given physical core: the bit ﬂip
positions were reproducible on each core at diﬀerent
times and also consistent across diﬀerent P-states.
USENIX Association
29th USENIX Security Symposium    1455
0123456789101112131415Byteina128-bitword7700,c07700,c17700,c27700,c37700K,c07700K,c17700K,c27700K,c38700K,c08700K,c18700K,c28700K,c38700K,c48700K,c5Processormodelandcoreid1021990215334149932691297511161241411892983372494161290862064279131531010006233151915164999299910592639989989989981000998998998998998998998998998998998722184816151114772100017499912161196104498877 Discussion
Being able to compromise the integrity of computations
is a powerful tool in the hands of software adversaries.
So far, we were able to conﬁrm successful fault-injection
attacks from software against certain vulnerable code
patterns, which have to be part of the victim code (List-
ing 3). These susceptible pieces of code we identiﬁed
are naturally used in many implementations, e.g., to
optimize the performance using SIMD instructions.
7.1 Fault-Susceptible Instructions
We also conducted another series of tests using non-
temporal instructions, such as movnti and movntq fol-
lowed by an sfence instruction as replacement. These
non-temporal instructions bypass the caches and access
memory directly. Our results showed that we still were
able to achieve reproducible bit ﬂips and the patterns
did not change due to non-temporal move instructions.
We conclude that bit ﬂips in the result must have been
introduced by the physical core as opposed to one of the
caching structures, e.g., execution units, the register ﬁle,
read or write buﬀers, or possibly one of the buses.
In our analysis we identiﬁed the respective, susceptible
vector operations in many real-world implementations