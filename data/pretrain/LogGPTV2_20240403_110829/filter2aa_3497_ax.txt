A more serious problem occurs when an application has hardcoded credentials that can
be changed only by rebuilding the application. These credentials may have been added for
debugging purposes during development and not removed before final release. Or they
could be an intentional backdoor added with malicious intent. Listing 9-6 shows an
example of authentication compromised by hardcoded credentials.
 def process_authentication()
 {
➊ string username = read_string();
   string password = read_string();
   // Check for debug user, don't forget to remove this before release
➋ if(username == "debug")
   {
     return true;
   }
   else
   {
  ➌ return check_user_password(username, password);
   }
}
Listing 9-6: An example of default credentials
Technet24
||||||||||||||||||||
||||||||||||||||||||
The application first reads the username and password from the network ➊ and then
checks for a hardcoded username, debug ➋. If the application finds username debug, it
automatically passes the authentication process; otherwise, it follows the normal checking
process ➌. To exploit such a default username, all you’d need to do is log in as the debug
user. In a real-world application, the credentials might not be that simple to use. The login
process might require you to have an accepted source IP address, send a magic string to
the application prior to login, and so on.
User Enumeration
Most user-facing authentication mechanisms use usernames to control access to resources.
Typically, that username will be combined with a token, such as a password, to complete
authentication. The user identity doesn’t have to be a secret: usernames are often a
publicly available email address.
There are still some advantages to not allowing someone, especially unauthenticated
users, to gain access to this information. By identifying valid user accounts, it is more likely
that an attacker could brute force passwords. Therefore, any vulnerability that discloses
the existence of valid usernames or provides access to the user list is an issue worth
identifying. A vulnerability that discloses the existence of users is shown in Listing 9-7.
 def process_authentication()
 {
   string username = read_string();
   string password = read_string();
➊ if(user_exists(username) == false)
   {
  ➋ write_error("User " + username " doesn't exist");
   }
   else
   {
  ➌ if(check_user_password(username, password))
     {
       write_success("User OK");
     }
     else
     {
    ➍ write_error("User " + username " password incorrect");
     }
   }
}
Listing 9-7: Disclosing the existence of users in an application
The listing shows a simple authentication process where the username and password
are read from the network. It first checks for the existence of a user ➊; if the user doesn’t
exist, an error is returned ➋. If the user exists, the listing checks the password for that user
➌. Again, if this fails, an error is written ➍. You’ll notice that the two error messages in ➋
and ➍ are different depending on whether the user does not exist or only the password is
||||||||||||||||||||
||||||||||||||||||||
incorrect. This information is sufficient to determine which usernames are valid.
By knowing a username, an attacker can more easily brute force valid authentication
credentials. (It’s simpler to guess only a password rather than both a password and
username.) Knowing a username can also give an attacker enough information to mount a
successful social-engineering attack that would convince a user to disclose their password
or other sensitive information.
Incorrect Resource Access
Protocols that provide access to resources, such as HTTP or other file-sharing protocols,
use an identifier for the resource you want to access. That identifier could be a file path or
other unique identifier. The application must resolve that identifier in order to access the
target resource. On success, the contents of the resource are accessed; otherwise, the
protocol throws an error.
Several vulnerabilities can affect such protocols when they’re processing resource
identifiers. It’s worth testing for all possible vulnerabilities and carefully observing the
response from the application.
Canonicalization
If the resource identifier is a hierarchical list of resources and directories, it’s normally
referred to as a path. Operating systems typically define the way to specify relative path
information is to use two dots (..) to indicate a parent directory relationship. Before a file
can be accessed, the OS must find it using this relative path information. A very naive
remote file protocol could take a path supplied by a remote user, concatenate it with a base
directory, and pass that directly to the OS, as shown in Listing 9-8. This is known as a
canonicalization vulnerability.
   def send_file_to_client()
   {
➊   string name = read_string();
    // Concatenate name from client with base path
➋   string fullPath = "/files" + name;
➌   int fd = open(fullPath, READONLY);
    // Read file to memory
➍   byte data[] read_to_end(fd);
    // Send to client
➎   write_bytes(data, len(data));
   }
Listing 9-8: A path canonicalization vulnerability
This listing reads a string from the network that represents the name of the file to
Technet24
||||||||||||||||||||
||||||||||||||||||||
access ➊. This string is then concatenated with a fixed base path into the full path ➋ to
allow access only to a limited area of the filesystem. The file is then opened by the
operating system ➌, and if the path contains relative components, they are resolved.
Finally, the file is read into memory ➍ and returned to the client ➎.
If you find code that performs this same sequence of operations, you’ve identified a
canonicalization vulnerability. An attacker could send a relative path that is resolved by the
OS to a file outside the base directory, resulting in sensitive files being disclosed, as shown
in Figure 9-4.
Even if an application does some checking on the path before sending it to the OS, the
application must correctly match how the OS will interpret the string. For example, on
Microsoft Windows backslashes (\) and forward slashes (/) are acceptable as path
separators. If an application checks only backslashes, the standard for Windows, there
might still be a vulnerability.
||||||||||||||||||||
||||||||||||||||||||
Figure 9-4: A normal path canonicalization operation versus a vulnerable one
Although having the ability to download files from a system might be enough to
Technet24
||||||||||||||||||||
||||||||||||||||||||
compromise it, a more serious issue results if the canonicalization vulnerability occurs in
file upload protocols. If you can upload files to the application-hosting system and specify
an arbitrary path, it’s much easier to compromise a system. You could, for example, upload
scripts or other executable content to the system and get the system to execute that
content, leading to remote code execution.
Verbose Errors
If, when an application attempts to retrieve a resource, the resource is not found,
applications typically return some error information. That error can be as simple as an
error code or a full description of what doesn’t exist; however, it should not disclose any
more information than required. Of course, that’s not always the case.
If an application returns an error message when requesting a resource that doesn’t exist
and inserts local information about the resource being accessed into the error, a simple
vulnerability is present. If a file was being accessed, the error might contain the local path
to the file that was passed to the OS: this information might prove useful for someone
trying to get further access to the hosting system, as shown in Listing 9-9.
 def send_file_to_client_with_error()
 {
➊ string name = read_string();
   // Concatenate name from client with base path
➋ string fullPath = "/files" + name;
➌ if(!exist(fullPath))
   {
  ➍ write_error("File " + fullPath + " doesn't exist");
   }
   else
   {
  ➎ write_file_to_client(fullPath);
   }
}
Listing 9-9: An error message information disclosure
This listing shows a simple example of an error message being returned to a client when
a requested file doesn’t exist. At ➊ it reads a string from the network that represents the
name of the file to access. This string is then concatenated with a fixed base path into the
full path at ➋. The existence of the file is checked with the operating system at ➌. If the
file doesn’t exist, the full path to the file is added to an error string and returned to the
client ➍; otherwise, the data is returned ➎.
The listing is vulnerable to disclosing the location of the base path on the local
filesystem. Furthermore, the path could be used with other vulnerabilities to get more
access to the system. It could also disclose the current user running the application if, for
example, the resource directory was in the user’s home directory.
||||||||||||||||||||
||||||||||||||||||||
Memory Exhaustion Attacks
The resources of the system on which an application runs are finite: available disk space,
memory, and processing power have limits. Once a critical system resource is exhausted,
the system might start failing in unexpected ways, such as by no longer responding to new
network connections.
When dynamic memory is used to process a protocol, the risk of overallocating
memory or forgetting to free the allocated blocks always exists, resulting in memory
exhaustion. The simplest way in which a protocol can be susceptible to a memory
exhaustion vulnerability is if it allocates memory dynamically based on an absolute value
transmitted in the protocol. For example, consider Listing 9-10.
 def read_buffer()
 {
   byte buf[];
   uint32 len;
   int i = 0;
   // Read the number of bytes from the network
➊ len = read_uint32();
   // Allocate memory buffer
➋ buf = malloc(len);
   // Allocate bytes from network
➌ read_bytes(buf, len);
   printf("Read in %d bytes\n", len);
 }
Listing 9-10: A memory exhaustion attack
This listing reads a variable-length buffer from the protocol. First, it reads in the length
in bytes ➊ as an unsigned 32-bit integer. Next, it tries to allocate a buffer of that length,
prior to reading it from the network ➋. Finally, it reads the data from the network ➌. The
problem is that an attacker could easily specify a very large length, say 2 gigabytes, which
when allocated would block out a large region of memory that no other part of the
application could access. The attacker could then slowly send data to the server (to try to
prevent the connection from closing due to a timeout) and, by repeating this multiple
times, eventually starve the system of memory.
Most systems would not allocate physical memory until it was used, thereby limiting
the general impact on the system as a whole. However, this attack would be more serious
on dedicated embedded systems where memory is at a premium and virtual memory is
nonexistent.
Storage Exhaustion Attacks
Technet24
||||||||||||||||||||
||||||||||||||||||||
Storage exhaustion attacks are less likely to occur with today’s multi-terabyte hard disks
but can still be a problem for more compact embedded systems or devices without storage.
If an attacker can exhaust a system’s storage capacity, the application or others on that
system could begin failing. Such an attack might even prevent the system from rebooting.
For example, if an operating system needs to write certain files to disk before starting but
can’t, a permanent denial-of-service condition can occur.
The most common cause of this type of vulnerability is in the logging of operating
information to disk. For example, if logging is very verbose, generating a few hundred
kilobytes of data per connection, and the maximum log size has no restrictions, it would be
fairly simple to flood storage by making repeated connections to a service. Such an attack
might be particularly effective if an application logs data sent to it remotely and supports
compressed data. In such a case, an attacker could spend very little network bandwidth to
cause a large amount of data to be logged.
CPU Exhaustion Attacks
Even though today’s average smartphone has multiple CPUs at its disposal, CPUs can do
only a certain number of tasks at one time. It is possible to cause a denial-of-service
condition if an attacker can consume CPU resources with a minimal amount of effort and
bandwidth. Although this can be done in several ways, I’ll discuss only two: exploiting
algorithmic complexity and identifying external controllable parameters to cryptographic
systems.
Algorithmic Complexity
All computer algorithms have an associated computational cost that represents how much
work needs to be performed for a particular input to get the desired output. The more
work an algorithm requires, the more time it needs from the system’s processor. In an
ideal world, an algorithm should take a constant amount of time, no matter what input it
receives. But that is rarely the case.
Some algorithms become particularly expensive as the number of input parameters
increases. For example, consider the sorting algorithm Bubble Sort. This algorithm inspects
each value pair in a buffer and swaps them if the left value of the pair is greater than the
right. This has the effect of bubbling the higher values to the end of the buffer until the
entire buffer is sorted. Listing 9-11 shows a simple implementation.
def bubble_sort(int[] buf)
{
  do
  {
    bool swapped = false;
    int N = len(buf);
    for(int i = 1; i  buf[i])
||||||||||||||||||||
||||||||||||||||||||
      {
        // Swap values
        swap( buf[i-1], buf[i] );
        swapped = true;
      }
    }
  } while(swapped == false);
}
Listing 9-11: A simple Bubble Sort implementation
The amount of work this algorithm requires is proportional to the number of elements
(let’s call the number N) in the buffer you need to sort. In the best case, this necessitates a
single pass through the buffer, requiring N iterations, which occurs when all elements are
already sorted. In the worst case, when the buffer is sorted in reverse, the algorithm needs
to repeat the sort process N 2 times. If an attacker could specify a large number of reverse-
sorted values, the computational cost of doing this sort becomes significant. As a result, the
sort could consume 100 percent of a CPU’s processing time and lead to denial-of-service.
In a real-world example of this, it was discovered that some programming
environments, including PHP and Java, used an algorithm for the hash table
implementations that took N 2 operations in the worst case. A hash table is a data structure
that holds values keyed to another value, such as a textual name. The keys are first hashed
using a simple algorithm, which then determines a bucket into which the value is placed.
The N 2 algorithm is used when inserting the new value into the bucket; ideally, there
should be few collisions between the hash values of keys so the size of the bucket is small.
But by crafting a set of keys with the same hash (but, crucially, different key values), an
attacker could cause a denial-of-service condition on a network service (such as a web
server) by sending only a few requests.
BIG-O NOTATION
Big-O notation, a common representation of computational complexity, represents
the upper bound for an algorithm’s complexity. Table 9-1 lists some common Big-O
notations for various algorithms, from least to most complex.
Table 9-1: Big-O Notation for Worst-Case Algorithm Complexity
Notation
Description
O(1)
Constant time; the algorithm always takes the same amount of time.
O(log N)
Logarithmic; the worst case is proportional to the logarithm of the
number of inputs.
O(N)
Linear time; the worst case is proportional to the number of inputs.
Quadratic; the worst case is proportional to the square of the number of
Technet24
||||||||||||||||||||
||||||||||||||||||||
O(N 2)
inputs.
O(2N)
Exponential; the worst case is proportional to 2 raised to the power N.
Bear in mind that these are worst-case values that don’t necessarily represent real-
world complexity. That said, with knowledge of a specific algorithm, such as the
Bubble Sort, there is a good chance that an attacker could intentionally trigger the
worst case.
Configurable Cryptography
Cryptographic primitives processing, such as hashing algorithms, can also create a
significant amount of computational workload, especially when dealing with authentication
credentials. The rule in computer security is that passwords should always be hashed using
a cryptographic digest algorithm before they are stored. This converts the password into a
hash value, which is virtually impossible to reverse into the original password. Even if the
hash was disclosed, it would be difficult to get the original password. But someone could
still guess the password and generate the hash. If the guessed password matches when
hashed, then they’ve discovered the original password. To mitigate this problem, it’s
typical to run the hashing operation multiple times to increase an attacker’s computational
requirement. Unfortunately, this process also increases computational cost for the
application, which might be a problem when it comes to a denial-of-service condition.
A vulnerability can occur if either the hashing algorithm takes an exponential amount of
time (based on the size of the input) or the algorithm’s number of iterations can be
specified externally. The relationship between the time required by most cryptographic
algorithms and a given input is fairly linear. However, if you can specify the algorithm’s
number of iterations without any sensible upper bound, processing could take as long as
the attacker desired. Such a vulnerable application is shown in Listing 9-12.
   def process_authentication()
   {
➊   string username = read_string();
     string password = read_string();
➋   int iterations = read_int();
     for(int i = 0; i < interations; ++i)