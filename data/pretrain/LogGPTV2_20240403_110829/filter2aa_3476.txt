# DNS Data Exfiltration Using SQL Injection

## Author
Bob Ricks  
G2, Inc.

## Overview of SQL Injection
- **Assumed Knowledge**: Basic understanding of how SQL injection works.
- **Types of Data Exfiltration**:
  - **Verbose**: Data is displayed on the page.
  - **Error-based**: Exploits error messages to extract data.
  - **Blind**: No direct output; relies on timing or HTTP request changes.
  - **Timing**: Measures response times to infer data.
  - **HTTP Request**: Detects changes in the page content.
  - **DNS Exfiltration**: Uses DNS queries to exfiltrate data.

## Related Work on DNS Exfiltration
- **References**:
  - [Pentestmonkey: MSSQL DNS Exfiltration](http://pentestmonkey.net/blog/mssql-dns/)
  - David Litchfield: *The Oracle Hacker's Handbook: Hacking and Defending Oracle*
  - Squeeza: [Attacking Oracle](http://www.sensepost.com/research/squeeza/dc-15-attacking-oracle)

- **Oracle Considerations**:
  - Until Oracle 11g, access to `UTL_INADDR` was enabled by default and unprotected. Access to `UTL_HTTP` is also enabled by default, but Oracle recommends disabling it unless necessary.

## Why Use DNS for Data Exfiltration?
- **Availability**: DNS is usually available even when HTTP connections are blocked.
- **Path Availability**: There is often a DNS path available, even if the database has no outbound communication.
- **Speed**: Timing-based or change-in-page extraction methods can be slow, typically extracting about 1 bit per injection.
- **Completeness**: Can handle non-standard table and column names and various data types.

## Our Tool
- **Functionality**:
  - Exfiltrates arbitrary data from Oracle databases.
  - Automatically generates injection strings.
  - Receives and processes DNS queries.
  - Requests additional information based on database responses.

## Design
- **Query Submission**:
  - Multiple queries are submitted in each round.
  - The position in the DNS request identifies which subquery each field matches.
  - Configurable number of subqueries and maximum length of each return value.
  - Uses random characters plus query numbers.
  - Utilizes a short domain name, e.g., `xg2.us`.
  - Example: `0414243.DATABASE.sal0.xg2.us`

## Lessons Learned
- **DNS Restrictions**:
  - Total size limit: 248 characters, including overhead.
  - Requires use of the entire domain and a custom domain name.
  - Each field must be between 1 and 63 characters.
  - Each subquery must return one column and one row.

## Data Type Processing
- **RAW**:
  - Uses approximately twice as many characters.
  - No conversion needed; all characters are valid.
- **Character Strings**:
  - Good for characters and numbers.
  - Needs conversion if spaces are present.
  - Marker to determine truncation.
- **Numbers**:
  - Directly handled.

## Tool Application on HR Schema
- **Standard HR Schema**:
  - Extracted all data in 5 minutes.
  - Displayed schema with user attributes and table details.

### Example Output
- **User: HR**
  - Attributes: 
    - Authentication: DATABASE
    - Username: HR
    - Web Server IP: 127.0.0.1
    - Language: AMERICAN_AMERICA.WE8MSWIN1252
    - Database IP: 192.168.10.93
    - Language: US
    - Web Host: hawker
  - Tables:
    - **USERS**: 2 columns, 1 row
      - Columns: USERNAME (VARCHAR2), PASSWORD (VARCHAR2)
    - **COUNTRIES**: 3 columns, 25 rows
      - Columns: COUNTRY_ID (CHAR), COUNTRY_NAME (VARCHAR2), REGION_ID (NUMBER)
    - **EMPLOYEES**: 11 columns, 107 rows
      - Columns: EMPLOYEE_ID (NUMBER), FIRST_NAME (VARCHAR2), LAST_NAME (VARCHAR2), EMAIL (VARCHAR2), PHONE_NUMBER (VARCHAR2), HIRE_DATE (DATE), JOB_ID (VARCHAR2), SALARY (NUMBER), COMMISSION_PCT (NUMBER), MANAGER_ID (NUMBER), DEPARTMENT_ID (NUMBER)
    - ... (4 More Tables)

## Performance Comparison
- **Absinthe**:
  - Initialization, schema name, and table names took 5 minutes.
  - High CPU utilization.
- **Our Tool**:
  - Extracted similar data in 6 seconds.

## Additional Examples
- **Table: USERS**
  - Example data: "admin", "password"; "bob", ";alfkjsdj023jr;oajsdc890asfdja023j"
- **Table: COUNTRIES**
  - Example data: "USERNAME", "PASSWORD" with various entries.

## What the Tool Does Not Do
- **SQL Injection Sites**: Does not find them for you.
- **Long Data Types**: Cannot process due to function limitations.
- **Functions Used**:
  - LENGTH()
  - SUBSTR()
  - UTL_RAW cast to raw()

## Future Work
- **Retry Failed Queries/Fields**.
- **GUI Front End**.
- **Web Server Integration**: Control a domain for better management.
- **Harden the Tool**.

## Prevention
- **Revoke Privileges**: On `UTL_INADDR` for web users.
- **Block Outgoing DNS Requests**: From the DMZ.
- **Fix SQL Injection Sites**.
- **Input Validation**: Always check all input from users, including strings, passwords, and cookies.

## Summary
- **SQL Injection**: A significant security risk.
- **DNS Exfiltration**: Highly effective for data exfiltration.
- **DBA Recommendations**: Block DNS for web users.
- **Web Programmer Recommendations**: Guard against SQL injection using parameterized SQL.

## Extra Slides
- **String Strategy**:
  - If possible and starts with non-'0', pull as is.
  - Convert to '0' plus raw (hex) if necessary.
  - Ask for substring of allowable length.
  - Check for maximum length and ask for length if needed.
- **Additional Data Tables**:
  - Examples include tables with non-standard names and varying data types.

### Example Tables
- **Table: EMPTY**
  - Data: "BLANK", "EMPTY", "NONE", "NIL"
- **Table: COMMENTS**
  - Data: Various entries with comments and keys.
- **Table: “Valid Table Name”**
  - Data: Valid and weird column names with numeric values.
- **Table: “VALID ``$@!()%$`` TABLE NAME”**
  - Data: Non-standard table and column names with mixed data types.

This document provides a comprehensive overview of DNS data exfiltration using SQL injection, including the tool's design, performance, and future work.