JS调用原生控件或者事件绑定
## 前端开发规范
### 通用规范
- 三层结构分离：js css html 分离
- 缩进保持一致
- 内容编码：为html指定utf8编码
- 注意大小写的使用场景
  - html属性名一律使用小写以-分割
  - 属性值可以使用驼峰命名
- 代码单行长度限制
- 注释可以参考java
  - 代码自描述
- 删除行尾空格及符号
### HTML规范
- 文档类型定义统一使用HTML5的!DOCTYPE 避免使用HTML4的DTD定义
- head必须定义title keyword description等基本SEO字段 移动端注意定义viewport
- 引入style标签或者script标签可以省略type属性
- 标签属性值统一使用双引号
- 诸如readonly disabled等属性的属性值可以省略
- 元素标签必须正确嵌套 尽量使用语义化标签
- 非自闭和标签需要添加关闭标识 自闭和标签无需添加（img br）
- 避免img的alt属性为空
- label标签经历增加for属性与输入域进行关联
- 按模块添加注释 start end
- 标签元素格式：块级元素另起一行 行内元素根据情况内联或者换行
### CSS规范
- 尽量使用外部样式文件，避免使用内联样式
- 命名：避免过于笼统，根据功能和内容进行命名，可以根据需要统一添加某种前缀
- 简写
  - 值为0可以省略单位
  - 0.x的单位可以省略0
  - 颜色尽量缩写到3位
- 属性书写顺序：优先写布局元素，然后再写元素的内容属性
- 避免CSS奇淫技巧
- 若要兼容多种浏览器私有样式 则私有样式写前 标准样式写后
- 避免类名或ID与类选择器组合使用 会造成冗余
- 使用简短的CSS实现 合并写法
- 元素之间存在继承关系时 提取公共部分 避免重复定义
- 使用预处理来提高编码效率
### ES5规范
- 语句添加分号结束可以使语句之间关系更清晰
- 在合适的地方添加空格
- 代码块后留空一行，使内容块更有层次
- 字符串最外层统一使用单引号
- 变量命名参考JAVA
- 对象属性名不需要引号
- 对象属性过多可以使用缩进的方式书写
- 代码块必须加花括号
- 不适用undefined直接进行判断 可以使用typeof
- 避免使用 != ==
- 禁止在条件语句或者循环语句里声明函数
- for-in循环访问属性前要判断 避免访问不存在的属性报错
- 避免在Array Date基础类库对象原型添加方法 否则会污染JS内置对象
### ES6规范
- 正确使用变量声明let const
- 字符串拼接尽量使用模板字符串
- 解构赋值尽量只使用一层
- 数据拷贝使用...来高效简洁实现
- 数组循环遍历优先使用for...of
- 尽量使用ES6的class实现oop
- 模块化多变量导出尽量使用对象结构 不要讲import和export写在同一行
- 导出类时，保持模块名称和文件名相同
- 生成器yield使用时需要注意对异常的处理
- 使用Promise代替回调
- 尽量避免使用迭代器 性能太差
- 推荐使用async await
### 防御性编程规范
- 对于外部传入的数据 需要做校验 避免为空导致的模板报错
- 注意错误处理
## 前端组件规范
### UI组件规范
- 统一的页面布局方案
- 基础UI结构和样式实现
- 组件化UI结构和样式实现
- 响应式布局
- UI可扩展性
### 模块化规范
- AMD 浏览器端的模块化异步加载规范
- CMD 用到模块才会执行
- CommonJS Node端使用的模块化规范
- import/export ES6定义的规范
### 项目组件化规范
- Web Component 组件化
- MVVM框架组件化 每个组件以单文件的形式引入模块 通过构建或者动态解析的方式注入到页面
- 虚拟DOM组件化 reactjs为代表的jsx
- 基于目录管理的通用组件化
组件化规范应该解决的问题：
1. 组件之间独立 松耦合
2. 组件可以嵌套使用
3. 组件通信问题
4. 组件公用部分设计
5. 组件构建打包
6. 异步组件加载
7. 组件继承与复用
8. 私有组件的管理
## 自动化构建
目的：对源项目文件或资源进行文件级处理 将文件或资源处理成最佳输出结构和形式
![屏幕截图 2020-12-08 100242](/assets/屏幕截图%202020-12-08%20100242.png)
### 构建工具的设计
- 模块分析引入：通过分析依赖调用生成AST，生成依赖字典
- 模块化规范支持：目前较多的构建工具都是将ES6转换为ES5 构建工具应尽可能支持较多标准
- CSS编译 图片合并
- 资源压缩优化
- 路径分析替换
- 环境区分
- 异步文件打包
- 文件目录白名单
## 前端用户数据分析
### 用户访问统计
- PV
- UV
  - IP配合其他手段
- VV:对用户访问网站多次跳转统计为一次VV
- IP
### 用户行为分析
- 页面点击量
  - 页面某个区域点击量
- 用户点击流
  - 在用户一次VV记录用户的点击行为
- 用户访问路径
- 用户点击热力图
- 用户转化率：访问用户与注册用户之比
- 导流转化率：原页面与导流页面之比
- 访问时长
### 前端日志上报
- 性能日志上报
- 错误日志上报
获取错误日志方式：
- try catch：无法捕获语法错误 无法捕捉不同作用域
- window.onerror：功能比try catch全 ，但无法处理跨域情况
错误信息上传：
- 如果访问量大 注意按一定条件上传
错误排查：
- 对错误归类 注意版本问题
## 前端跨栈技术
### 后端：node
  - web框架：koa，express
  - 后端数据渲染
  - 前后端同构
    - 基于模板：不同的请求渲染不同的模板
    - 基于MVVM：在服务端对MVVM模板语法直接渲染
    - 基于虚拟DOM
### 跨终端
- 前端为主:直接将前端页面打包进安装包 主要执行这些页面
- Native和Web结合：分别实现自己最擅长的
  - 自己设计交互协议
- Web资源离线和更新
  - serviceWorker
  - localStorage
  - 基于增量文件
  - 基于文件代码块
- Native与Web资源离线和更新
  - 根据时机向服务端主动拉取 否则使用本地缓存
- 资源覆盖率统计
  - 日志上报
### 其他
- 前端代码编译为Native
- 桌面应用
## 趋势
- 标准技术趋向于稳定
- 工具仍会持续不断发展
- 浏览器平台新特性未来应用的可能
- 前端开发生态
  - 效率
  - 维护成本
  - 性能
  - 扩展性
- 前端新领域
  - 物联网
  - AI
  - VR