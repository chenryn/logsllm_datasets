guarantee the safe execution of the linked payment. In such a case,
having to take longer paths because of skewness puts an increased
collateral cost on payment routing. In some situations, it could be
considered bene(cid:27)cial for a payment channel that charges fees to
o(cid:29)er negative routing fees in one direction as to promote that direc-
tion’s use and cause the channel to be slowly rebalanced [18]. Such
a sacri(cid:27)cial strategy would become unnecessary in case Revive is
e(cid:28)ciently adopted.
3.2 System Model
Our rebalancing scheme is designed within the context of a de-
centralized blockchain that allows the trusted execution of smart
contracts capable of supporting an o(cid:29)-chain payment network that
contains a set of reasonably connected payment routers.
3.2.1 Blockchain. In our scheme, the blockchain is considered
as an integrity protected and immutable root of trust that comprises
a decentralized database containing a global view of accounts, their
balances and transactions, and extra associated data. Each account
1as in Lightning and Raiden
2Unspent Transaction Output
in the ledger is controlled by its own private key, that only the
owner of the account should know. A transaction from any ac-
count cannot be authorized without possession of its respective
private key. Authorized modi(cid:27)cations to the ledger are considered
to be globally available after a block is generated, on average every
predetermined block time T.
3.2.2
Smart Contracts. In addition to primitive ledger transac-
tions that transfer balance from one account to another, our scheme
also requires a smart contract execution environment, such as found
in Ethereum [17]. Recall that Ethereum’s smart contracts are al-
lowed to hold a balance in the ledger, and control it according to
their code. We assume that once a smart contract is published, it
cannot be modi(cid:27)ed, nor can a result outside the bounds of its correct
execution be accepted on the global ledger.
3.2.3 O(cid:27)-chain Payment Network. Our work is meant to be
adapted to pre-existing o(cid:29)-chain payment network solutions to
extend them with a safe rebalancing approach. In our view of the
system, we require the existence of an o(cid:29)-chain payment solution
that allows a pair of peers to keep track of their own two-way
ledgers o(cid:29)-chain. This o(cid:29)-chain ledger is assumed to be pegged to
an on-chain smart contract that requires an initial funding from the
two peers. The contract is assumed to only allow peers to withdraw
balances that they have both agreed on using their signatures. Of
course, the sum of the two o(cid:29)-chain balances may not exceed the
total deposit in the on-chain contract at any given time.
3.2.4 Payment Network Topology. The payment channel con-
nectivity between the participants of a rebalancing is a core element
to the e(cid:28)cacy of applying Revive. For a rebalancing to take place
among a set of channel owners, each channel owner is expected
to make a set of outgoing payments which are compensated by
another set of incoming payments, through the same payment chan-
nels that connect the channel owners participating in a rebalancing.
This means that, when modeling the participants as nodes and the
payment channels among them as edges, any such graph that con-
tains no cycles3 is not rebalanceable. On the other hand, the more
possible cycles present in the graph, the more potential rebalancing
transactions there are to be found.
An example is presented in Figure 3, whereby the network pre-
sented in Figure 3a contains no cycles and thus no rebalancing can
take place, and the network presented in Figure 3b contains a few
cycles that can be utilized. Moreover, all cycles can be utilized in
parallel if the balances in the intersecting channels are su(cid:28)cient.
In Figure 3b, the channel between A and E appears in two such
cycles, and the assumption when utilizing both cycles to enact a re-
balancing is that E carries su(cid:28)cient balance with A in that channel
to compensate for the funds A gives to B and C.
3.2.5 Communication Network. For the purpose of the rebal-
ancing scheme we assume an underlying communication network,
where all the participants can communicate directly o(cid:29)-chain (e.g.
via a TCP connection). Given that the participants had previously
established o(cid:29)-chain payment channels, prior to needing to rebal-
ance them, we assume that the line of communication that was
used for channel establishment can be reused by our protocol.
3A sequence of vertices starting and ending at the same vertex.
A
B
C
A
B
C
F
E
D
(a) An example network with a
tree structure. Since no cycles
exist in the graph, no viable re-
balancing transactions can be
found.
F
E
D
(b) A example network con-
taining cycles. Rebalancing
payments can take paths such
as: (A, B, D, E, A) and (C, E, B,
D, E, A, C).
Figure 3: Example payment channel network topologies
demonstrating when a rebalancing is possible.
3.2.6 Adaptability. The algorithm for calculating a set of rebal-
ancing transactions is independent from the enforcement mech-
anism of the transaction set. Therefore, to adapt Revive to any
blockchain satisfying our system model, one only needs to adapt
the rebalancing protocol to support the target smart contract frame-
work. For example, implementing the smart contracts provided in
our paper for Ethereum (cf. Section 9.2) in the Rootstock [19] smart
contract platform for Bitcoin, would provide the same on-chain
enforcement mechanism required to settle disputes and atomically
execute a transaction set. The o(cid:29)-chain peer to peer communica-
tions can then be directly made compliant.
3.3 Rebalancing Protocol
The protocol steps in Figure 4 outline how the rebalancing group
is expected to proceed in order to atomically execute a set of trans-
actions.
3.3.1 Leader Election. Before the protocol can commence, a
leader needs to be elected to act as a point of synchronization for
the protocol, and upon receiving enough information about channel
balances, calculate a set of rebalancing transactions according to
the speci(cid:27)cations we discuss later. This leader does not need to
be a stakeholder in any of the payment channels that are to be
rebalanced, therefore, it may even be a third party chosen by the
participants.
For our purposes, we adopt a leadership rotation strategy whereby
all participants are identi(cid:27)ed by their public addresses in the global
ledger, which we assume to be unique and numeric. We refer to
the set of participants as P and denote the public identi(cid:27)er of a
participant p ∈ P as ID(p). Moreover, we assume that rebalancing
rounds happen, among a (cid:27)xed set of participants, in series. We refer
to the point in time at which the participants formed a network
that rebalances itself as Ts.
At Ts, the (cid:27)rst leader is chosen as the participant p with the
smallest identi(cid:27)er ID(p) such that ∀q (cid:44) p ∈ P: ID(p)  ID(p). If no such
successor s exists, then leadership is passed back to the (cid:27)rst ever
Leader
Blockchain
Participant
Signal Rebalancing
Rebalancing Init Req.
Participation Con(cid:27)rmation
Channel Freeze Request
Frozen Channels Con(cid:27)rmation
Rebalance Objectives
Full Rebalancing Transaction Set
Signed Commitment
Full Signed Commitment Set
Dispute
Figure 4: Protocol Sequence Diagram. Solid lines with (cid:27)lled
arrows require a response for the leader to proceed with
the participant in the protocol. Dashed lines with arrow
heads are the participant’s responses. Solid lines with arrow
heads do not require a response, and are not required for the
sender or recipient to proceed.
elected leader, which has the smallest identi(cid:27)er in the participant
set.
In other cases, it might be preferable to allow only a subset of
participants, perhaps even only one, to attain leadership due to, for
example, their increased reliability or performance. Revive can be
adapted to any leader election strategy as the remaining protocol
steps are decoupled from how the leader was chosen.
3.3.2 Triggering. At (cid:27)rst, the currently elected leader waits for
rebalancing initiation requests from participants in the sub-network.
When enough requests are received (past an arbitrarily de(cid:27)ned
threshold), the leader sends an initiation request to all participants
asking for con(cid:27)rmation of their participation in this round of re-
balancing. This triggering phase is customizable and serves to set
a threshold past which a rebalancing is considered to be worth
executing. This allows the protocol to scale its utility according
to the size and requirements of the participants in a rebalancing
group.
3.3.3 Participation. In response to the initialization request, the
participants reply with a participation con(cid:27)rmation which allows
the leader to construct a list of who will be partaking in rebalancing
this round. This list is later on used to enable the safe execution
of the rebalancing. After receiving the con(cid:27)rmations, the leader
announces to the involved participants which nodes are con(cid:27)rmed
in the current round, and asks them to freeze the relevant payment
channels they wish to rebalance.
3.3.4 Transaction Set Generation. Participants are then expected
to respond with which channels they have frozen, along with their
respective balances and objectives for the challenge. Mutual agree-
ment by both owners of a payment channel on the freezing and
the balances should be expected. Moreover, the participants may
submit rebalancing objectives, which specify whether they wish
to gain or lose credit in each channel. Mutual agreement by both
peers on the direction of rebalance in a channel should also be
expected here. For example, if A wishes to gain credit in its chan-
nel with B, then B must be willing to lose credit in its channel
with A. The leader then proceeds to calculate a set of transactions
that should conserve everyone’s total balances, and abide by the
participants’ preferences for each channel. The generation is done
through solving a linear program described below that produces a
set of rebalancing transactions.
3.3.5 Consensus. The transaction set, along with a list of par-
ticipating members, is then sent in the form of a commitment to all
nodes for veri(cid:27)cation and signing. The commitment is composed
of the merkle-tree root [20] of all rebalancing transactions, and
a hash of all the participants’ public addresses (identities), both
hashed together. When participants receive this commitment from
the leader, they verify the proper construction of the hashes, and
that the rebalancing transactions are correctly generated. Each par-
ticipant then responds to the leader with its own signature on the
commitment. Once all signatures are obtained by the leader, they
are multicast to the involved participants. They can then consider
the payment channels unfrozen, because the complete consensus
on the transaction set can safely be considered as a binding state
update for each payment channel.
3.3.6 Dispute. If the complete signature collection is withheld
from some participant, it can issue an on-chain subsidized availabil-
ity challenge for it. The response to that answer will be comprised
of the complete rebalancing round data, which includes the set of
participants, their signatures and the merkle root of the transaction
set. If this challenge is not answered in some prede(cid:27)ned amount of
time, the rebalancing round is considered annulled, and participants
can safely assume that the latest state prior to the rebalancing is
valid. We discuss this issue in more detail in the security analysis
presented in Section 4.
3.4 Rebalancing Objectives
Participants can specify how they would like to shift the balances of
their payment channels in a rebalancing instance, or an averaging
method can be employed to automatically determine an equilibrium
seeking set of objectives.
3.4.1 Notation. We denote the maximum balance shift that a
node u is willing to sustain in its payment channel with a node v
by ∆u,v , while δu,v denotes the balance that node u is going to
gain in its payment channel with v as a result of the rebalancing
transactions set.
3.4.2 Linear Programming Model. In our work, we model the
rebalancing problem as a linear program. Several solving strategies
for linear programs have been proposed and proven in various
literature. We forgo a detailed examination of these methods and
instead point the interested reader to sources such as [21], and the
short discussion on linear programming in Section 7.
The generation of a set of rebalancing transactions can be for-
mulated as a linear program. In this model, participants may only
specify for each channel a maximum amount they are willing to
either gain or lose, but not both. If both peers of a payment channel
agree on its direction of transfer, one variable denoting the positive
direction of transfer is added to the linear program.
Linear Program: Maximize: Σu,v δu,v Subject to:
(1) ∀u, v : ∆u,v > 0 ∧ ∆v,u < 0 ⇔ 0 ≤ δu,v ≤ min(∆u,v ,−∆v,u)
(2) ∀u : Σv δv,u = Σv δu,v
The objective of the linear program is to maximize the amount
of funds moved between channels while the constraints serve to
maintain the sanity and fairness of the generated transaction set.
The (cid:27)rst constraint de(cid:27)nition introduces linear constraints on the
program as long as the two parties connected by the payment
channel agree on the direction of balance change that they are
willing to have in the channel. If A wishes to dispose of balance in
the AB channel, and B wishes to gain balance in the same channel,
then the δa,b variable is given an appropriate upper bound. The
second constraint enforces the conservation of balance, such that
the set of resulting transactions is a zero sum rebalance, whereby no
party gains or loses any money by executing the set of transactions
relevant to its payment channels.
It is assumed that ∆u,v ≤ balu,v for all inputs ∆u,v such that no
payment channel is used past its total funding. It is also important
that for any pair of (a,b), if δa,b is de(cid:27)ned in the program, then
δb,a is not, as that breaks the semantics of the constraints and the
objective function.
3.4.3 Channel Averaging Strategy. In an automated setting where
manual entry of rebalancing objectives is impractical, a strategy
for automatically determining a set of objectives for each channel
is required. To simplify the process of adopting our model in such a
setting, we suggest the use of a straightforward strategy: averaging.
More formally, in this strategy, each two peers of a payment channel
that is going to be rebalanced submit their rebalancing objectives
as follows: ∀u, v : ∆u,v = 1
2(balu + balv) − balu. This strategy
can be followed using the linear model previously speci(cid:27)ed, since
both peers would automatically agree on the direction of balance
shift that seeks equilibrium. We conjecture that this strategy, due to
its nature, would improve the e(cid:28)cacy of a payment network after
rebalancing in the average case. In cases where a channel imbalance
in one direction is a favored outcome, then this strategy would lead
to sub-optimal rebalances.
3.4.4 Numerical Precision. In all of the aforementioned solu-
tions, the numerical accuracy of the program solving methods is a
crucial detail to keep in mind. We do not employ integer program-
ing methods for performance reasons, and allow fractional results
to occur. Therefore, the resulting balance transfers from the linear
program solution may very likely have a decimal precision beyond
that of the underlying global ledger. For this reason we resolve to
simply rounding down the resulting transactions from our rebalanc-
ing schemes and assume that all losses incurred as a consequence
are negligible. We justify this by examining the current smallest
units that are exchangeable using Bitcoin and Ethereum, and their
respective prices in US dollars as of the writing of this paper.
Until the writing of this paper, the maximum trading price of 1
Bitcoin is on the order of 1,000 U.S. dollars, while the smallest ex-
changeable unit, a satoshi, is equal to 10−8 Bitcoin. As for Ethereum,
the maximum trading price as of yet is on the order of 100 U.S. dol-
lars, while the smallest unit, wei, is equal to 10−18 Ether. This puts
the maximum possible loss incurred in each rebalancing transac-
tion at a marginal fraction of a cent. If the trading values of these
currencies at some point increase at least a million fold, then any
non-integer solution would lead to some losses. However, we con-
jecture that if such an event occurs, then the global ledgers of these
currencies will have to be extended to allow higher precision trans-
actions, as to always be viable for micropayments and a realistic
representation of monetary value.
3.5 Optimality
According to the rebalancing objectives de(cid:27)ned in Section 3.4, we
de(cid:27)ned the objective functions of the mathematical programming
models to represent the total amount of funds shifted between pay-
ment channels, or, rebalanced. When using Revive to improve the
routing of future payments within a network, the optimal solution
under such a de(cid:27)nition would therefore be one that eliminates
the most skewness in the network where possible. For o(cid:29)-chain
payment networks comprised of at least a few hundred payment
routing nodes, it would be rather di(cid:28)cult to coordinate a successful
global rebalancing where all network members are participants in
a single Revive rebalancing instance. Therefore, it would be more
feasible to run multiple ’local’ rebalances that ameliorate skew-
ness in smaller sub-networks within the network in parallel. More
importantly, we conjecture that through running these multiple
smaller instances, a globally optimal rebalancing can be approxi-
mated. We mainly base our argument on the expected outcome of
running Revive in multiple local instances on networks similar to
the hypothetical network in topology in Figure 5.
While a local, sub-optimal solution may fail to rebalance as many
payment channels as e(cid:29)ectively as a global optimal solution would,
the combination of multiple local Revive solutions to global net-
work would still lead to a more balanced global set of ledgers. Unless
a very high degree of global coordination can be achieved, users
of Revive would have to make this trade-o(cid:29) in optimality. More-
over, even after a global run, some payment channels may remain
skewed, because they could have signi(cid:27)cantly larger deposits in
them than their peers’ other payment channels, and thus there
aren’t enough funds to route to them.
3.6 Atomic Enforceability