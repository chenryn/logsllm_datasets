:
= X‚.
and PK
{ Make-GPK operates as follows: given a set of user public keys S =
fx1; : : : ; xtg and the parameters (‚; u; f; D), it sets the group public key
:
= f (u; S).
of S to be the (unique) accumulated value of S over u i.e., gpkS
Note that thanks to the quasi-commutativity property of f , Make-GPK is
indeed order-independent.
{ Make-GSK operates as follows: given the set of user public keys S 0
:
=
fx1; : : : ; xtg, a user secret key/public key pair (z; x) and the system pa-
rameters param = (‚; u; f; D; W ), it ﬂrst computes the accumulated value
:
= f (u; S 0), and then sets the group secret key gsk to be the tuple (x; z; w)
w
:
= S 0 [ fxg). Observe that w is a witness for x in f (u; S 0), and that
(where S
GSK
:
= X‚ £ Z‚ £ Uf and GPK
:
= Uf .
{ Anon-IDP and Anon-IDV are obtained generically as the §-protocol corre-
sponding to the following NP-relation Rparam ‰ GPK £ GSK:
Rparam
:
= '¡v; (x; z; w)¢ j ¡(x; z) 2 R‚¢ ^ ¡f (w; x) = v¢“
It is easy to see that the above relation is polynomial-time veriﬂable: indeed,
given v and (x; z; w), one can check in time polynomial in jvj whether (x; z) 2
R‚ (by verifying that D(x; z) = 1), and whether w is indeed a witness for x
in v (by verifying that f (w; x) = v). Thus, by Theorem 1, we can construct
a §-protocol (P; V ) for the NP-relation Rparam. In the resulting protocol,
the common input to the prover and the veriﬂer is the accumulated value v
(i.e. a group public key) and the additional input to the prover is a tuple of
the form (x; z; w) (i.e., a group secret key). Hence, the protocol (P; V ) meets
the speciﬂcation of the Anon-ID protocol.
As for the correctness of the above construction, observe that relation Rparam
is essentially equivalent to the › relation. Consequently, a prover holding a
:
= v
group secret key gsk
given as input to the veriﬂer, possesses a tuple belonging to the relation Rparam,
so that the execution of the Anon-ID protocol will terminate with the veriﬂer
outputting 1, with overwhelming probability.
:
= (x; z; w) ›-related to the group public key gpk
Soundness. Intuitively, the soundness of the above generic construction stems
from the following considerations. The Special Honest-Veriﬂer Zero-Knowledge
property of the §-protocol Anon-ID guarantees that the Transcript Oracle
doesn’t leak any information to the adversary that she could not compute her-
self. By the Special Soundness property, in order to make the honest dealer ac-
cept (with non-negligible probability) a run of the Anon-ID protocol in which the
:
= v consists solely of the aggregation of public keys of non-
group public key gpk
:
corrupted users, A should posses a tuple gsk
= (x; z; w) such that (x; z) 2 R‚
and w is a witness of x in v. Now, the collision resistance of the accumulator
implies that the user public key x must indeed have been accumulated within v,
which means (by the third caveat of the soundness attack game in Section 3.2)
that x belongs to a non-corrupted user. Hence, the adversary didn’t obtain the
pre-image z via the user corruption oracle, which implies that A was able to ﬂnd
it by herself, contradicting the one-wayness of the accumulator’s domain.
The above intuition could be turned into a rigorous reduction argument: we
refer the reader to the full version [25] for a formal proof.
:
= (x1; z1; w1) and gsk2
Anonymity. In attacking the anonymity of the proposed scheme, the adver-
:
sary basically chooses a group public key gpk
= v and two group secret keys
:
gsk1
= (x2; z2; w2), both ›-related to gpk. To subvert
anonymity, the adversary should then be able (cfr. Section 3.3) to tell whether
gsk1 or gsk2 was used in producing the (honest) \challenge" transcript. Since
in the generic construction above the Anon-ID protocol is implemented as a
§-protocol, this would mean that the adversary is able to tell which \witness"
(gsk1 or gsk2) was used by the prover to show that v belongs to the NP-language
Lparam associated to the NP-relation Rparam. In other words, a successful adver-
sary would break the Witness Indistinguishability of the Anon-ID protocol, which
contradicts the fact that Anon-ID enjoys Special Honest-Veriﬂer Zero-Knowledge.
The reader is referred to [25] for a formalization of the above argument.
4.1 Adding ID Escrow
The generic construction described above can be extended to deal with Identity
Escrow as follows. During the initialization, the Setup algorithm additionally
runs the key generation algorithm K of some CCA2-secure encryption scheme
(K; E; D). The resulting public key pkIE is included in the system parameters
param, and the secret key skIE is given to the Identity Escrow Authority (IEA).
As for the user registration phase, each new user, after choosing his user secret
:
= (z; x), registers his public key with the IEA, which
key/public key pair (sk; pk)
simply stores his identity and public key in a publicly-available database DB.
The Anon-ID protocol is also changed to be the §-protocol corresponding to
the following NP-relation RIE
param:
param
RIE
:
= '¡(v; ˆ); (x; z; w)¢ j ¡(x; z) 2 R‚¢ ^¡f (w; x) = v¢ ^¡ˆ decrypts to x¢“
In other words, the prover now additionally encrypts his public key x under the
IEA’s public key pkIE, and proves to the veriﬂer that he did so correctly.
Finally, the Extract algorithm, on input a transcript …, recovers the ciphertext
ˆ from … and decrypts ˆ, thus obtaining the identity of the user that played the
role of the prover.
It is not hard to check that the above changes do not aﬁect the soundness
and anonymity properties of the generic construction: in particular, the CCA2-
security of the encryption scheme (which is needed since a malicious party could
trick the IEA into acting as a decryption oracle) guarantees that honest tran-
scripts cannot be modiﬂed so as to alter the prover identity hidden under the
ciphertext ˆ. See [25] for a security analysis of the extended scheme.
5 E–cient Implementation
5.1 Construction of an Accumulator with One-way Domain
An e–cient construction of a collision-resistant accumulator was presented in
[15], based on earlier work by [4] and [7]. Based on this construction, we present
an e–cient implementation of an accumulator with one-way domain.
For ‚ 2 N, the family F‚ consists of the exponentiation functions modulo
‚-bit rigid integers:
f : (Z⁄
n)2 £ Zn=4 ! (Z⁄
f : (u; x) 7! ux mod n
n)2
where n 2 Rig‚ and (Z⁄
n)2 denotes the set of quadratic residues modulo n.
The accumulator domain fX‚g‚2N is deﬂned by:
X‚
:
= ne prime j ‡ e ¡ 1
2
2 RSA‘· ^ ¡e 2 S(2‘; 2„)¢o
where S(2‘; 2„) is the integer range (2‘ ¡ 2„; 2‘ + 2„) that is embedded within
(0; 2‚) with ‚ ¡ 2 > ‘ and ‘=2 > „ + 1. The pre-image domain fZ‚g‚2N and the
one-way relation fR‚g‚2N are deﬂned as follows:
:
= f(e1; e2) j e1; e2 are distinct ‘=2-bit primes and e2 2 S(2‘=2; 2„)g
Z‚
R‚
:
= f¡x; (e1; e2)¢ 2 X‚ £ Z‚ j ¡x = 2e1e2 + 1¢g
The collision resistance of the above construction can be based on the Strong
RSA Assumption, as showed in [15]. Regarding the added one-wayness of the
domain, assuming the hardness of factoring RSA integers, it is easy to see that
the NP-relation R‚ satisﬂes our one-wayness requirement (cfr. Section 2.2):
hence, the above construction yields a secure accumulator with one-way domain.
5.2 E–cient proof of witnesses for the Accumulator
The generic construction described in Section 4 derives algorithms Anon-IDP and
Anon-IDV from the §-protocol corresponding to some NP-relation Rparam: for
our RSA-based accumulator with one-way domain, the relation is deﬂned as:
RRSA
param
:
= '¡v; (x; (e1; e2); w)¢ j ¡wx · v mod n¢ ^ ¡x 2 S(2‘; 2„)¢
^ ¡x ¡ 1 = 2e1e2¢ ^ ¡e2 2 S(2‘=2; 2„)¢“
However, the protocol generically obtained in virtue of Theorem 1, though
polynomial time, is not e–cient enough to be useful in practice; thus, below we
describe how a practical §-protocol for relation RRSA
param could be constructed,
exploiting the framework of discrete-log relation sets [31], which provides a sim-
ple method to construct complex proofs of knowledge over groups of unknown
order. A discrete-log relation set R is a set of vectors of length m deﬂned over
Z [ fﬁ1; : : : ; ﬁrg (where the ﬁj’s are called the free variables of the relation)
n)2. For any vector
and involves a sequence of base elements A1; : : : ; Am 2 (Z⁄
ai
hai
j
j=1 A
i = 1. The con-
junction of all the relations is denoted as R(ﬁ1; : : : ; ﬁr). In [31], an e–cient §-
protocol is presented for any discrete-log relation set R, by which the prover can
prove of knowledge of a sequence of witnesses x1; : : : ; xr, with xi 2 S(2‘i ; 2„i )
that satisfy R(x1; : : : ; xr) ^ ‡ ^r
i=1 (xi 2 S(2‘i ; 2†(„i+k)+2)·, where † > 1; k 2 N
are security parameters. Note that the tightness of the integer ranges can be in-
creased by employing the range proofs of [10], nevertheless the tightness achieved
above is su–cient for our purposes, and incurs a lower overhead.
mi the corresponding relation is deﬂned as Qm
1; : : : ; ai
In order to prove the relation RRSA
param, we assume that the public parameters
n)2 with unknown relative discrete-
param include the elements g; h; y; t; s 2 (Z⁄
logarithms. In order to construct the proof, the prover provides a sequence of
public values T1; T2; T3; T4; T5 such that T1 = gr; T2 = hrgx; T3 = srge2; T4 =
wyr; T5 = trg2e1, where r Rˆ [0; bn=4c ¡ 1].
The proof is constructed as a discrete-log relation set that corresponds to
the equations T1 = gr, T2 = hrgx, (T1)x = ga1, (T1)e2 = ga2, T3 = srge2
(T4)x = vya1, (T5)e2 g = ta2 gx, for the free variables r; x; e2; a1; a2 such that
x 2 S(2‘; 2„); e2 2 S(2‘=2; 2„), a1 = rx and a2 = re2. The matrix of the discrete-
log relation set is shown below:
2
66666666664
g h y t s v T ¡1
T1 = gr : r 0 0 0 0 0 1
T2 = hrgx : x r 0 0 0 0 0
(T1)x = ga1 : a1 0 0 0 0 0 x
T3 = srge2 : e2 0 0 0 r 0 0
(T1)e2 = ga2 : a2 0 0 0 0 0 e2
(T4)x = vya1 : 0 0 a1 0 0 1 0
(T5)e2 g = ta2gx : x 0 0 a2 0 0 0
4 T ¡1
3 T ¡1
2 T ¡1
1 T ¡1
5
0
0
0
0
0
0
0
1
0
0
0
0
0
0
1
0
0
0
0
0
0
x
0
0
0
0
0