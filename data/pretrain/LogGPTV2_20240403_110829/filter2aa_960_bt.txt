sniffing, 178–180
client implants, 323–325, 327–329
Client struct, 53–54
cloned sites, 90–93
Close() method, 25
closed ports, 22
Cmd, 41
CNAME records, 109–111
Cobalt Strike, 118–124, 278
A
A records, 104, 109–111
Abstract Syntax Notation One (ASN.1) 
encoding, 133–135, 137–138
acme/autocert, 235
Add(int), 27
Address Resolution Protocol (ARP) 
poisoning, 178
Advanced Encryption Standard (AES) 
algorithm, 242
ancillary chunks, 302
anonymous functions, 126
API interaction
overview, 51–53
Bing scraping, 68–76
Metasploit, 59–68
Shodan, 51–59
APIInfo struct, 55
append() function, 11
ARP (Address Resolution Protocol) 
poisoning, 178
ASN.1 (Abstract Syntax Notation One) 
encoding, 133–135, 137–138
assembly, 216
asymmetric algorithms, 234
asymmetric cryptography, 245. See also 
encryption
Atom, GitHub, 4–5
authentication, 67, 86–88, 239–241
B
backticks, 19
base workspace directory, 2
Base64 encoding, 215–216
bcrypt hashing, 235, 237–239
Beacon, 121
Berkeley Packet Filter (BPF), 175, 181. 
See also tcpdump
best practices
coding, 19, 49, 66, 185, 195, 329
security, 96, 236
332   Index
COFF File Header, 282–283
collision, 234
Command() function, 41
commands
build command, 7
cross-compiling, 7–8
go commands, 6–9
set command, 3
complex data types, 10–11
concurrency, 16–17, 37
concurrent scanning, 26–32
Conn, 35–38
connections, 24–25, 35, 327
constraints, 7–8
control structures, 14–16
convenience functions, 46–47, 140
Copy() function, 40
createChunkCRC() method, 304–305
CreateRemoteThread() Windows 
function, 275–276
credential-harvesting attacks, 90–93
critical chunks, 302
cross-compiling, 7–8
cross-site scripting, 94
crypto package, 197, 235
cryptography
overview, 234–235
hashing, 234–239
curl, 40, 79
D
Data Directory, 285–287
data mapping, 71–73, 125
data types
channels, 16
maps, 11
primitive, 10–11
slices, 11
database miners, 161–170
debug package, 197
decoder function, 300
decoding process, 308
decryption, 234. See also encryption
DefaultServerMux, 78–79
defer, 49
DELETE requests, 47–48
dep tool, 9
development environment set up, 1–10
Dial() method, 24
dialects, 132–133
directives, 19
Dirty COW, 201–204
DNS clients, 104–117
DNS proxies, 124–127
DNS servers, 117–129
DNS tunneling, 121
do loops, 15
Docker, 90, 118–122, 154–158
document metadata, 69
Document Object Model (DOM), 74
domain fronting, 98
DOS Header, 281
DWORD, 271
E
echo servers, 32, 35–37
Empire, 121
Encode() method, 65
encodeDecode() function, 308
encoding package, 197
encoding process, 308
encryption, 234, 242–252
endianness function, 299
error handling, 17–18
error messages, 51
Exclusive OR (XOR), 307–312
Executable and Linkable Format 
(ELF), 203
exploitation, 196–212
export address table (EAT), 279
F
field tags, 19–20, 139
filesystems, 170–171
filetype filter, 73
filtered ports, 22
filtering search results, 73–76
firewalls, 22–23
fixed field tag, 140
Flusher, 42
fmt package, 25
FOCA, 69
Foo struct, 19
for loop, 15
formatting
data, 38, 113–114
source code, 9
Frida, 278
fully qualified domain name 
(FQDN), 104
fuzzing, 188–196
Index   333
G
gaping security holes, 41
Get() function, 46
get() HTTP function, 227–229
GetLoadLibAddress() function, 275
GetProcessAddress() Windows 
function, 275
getRegex() function, 163
GetSchema() function, 163, 165
Gieben, Miek, 104
GitHub Atom, 4–5
GNU Compiler Collection (GCC), 290
go build command, 6–7
Go DNS package, 104
go doc command, 8
go fmt command, 9
go get command, 8–9
Go Playground execution 
environment, 10
go run command, 6
Go Syntax
complex data types, 10–11
concurrency, 16–17
control structures, 14–16
data types, 10–11
interface types, 13
maps, 11
patterns, 12–14
pointers, 12
primitive data types, 10–11
slices, 11
struct types, 12–13
go vet command, 9
GOARCH constraint, 7–8
GoLand, 5–6
golint command, 9
GOOS constraint, 7–8
gopacket package, 174
gopacket/pcap subpackage, 174–175
GOPATH environment variable, 2–3
goquery package, 69
gorilla/mux package, 82–83, 84, 101
gorilla/websocket package, 96
GOROOT environment variable, 2–3
goroutines, 16–17, 26–32
gRPC framework, 316–319
gss package, 138
H
HandleFunc() method, 82
handler() function, 75–76
handles, 271. See also tokens
handshake process, 22–23
hash-based authentication, 147–150
hashing, 234–239
Head() function, 46
head() HTTP function, 226–227
hex transform, 214
hexadecimal 198, 281, 297
HMAC (Keyed-Hash Message 
Authentication Code) 
standard, 240–241
Holt, Matt, 127
host search, 55–57
HTTP clients
overview, 46–51
Bing scraping, 68–76
Metasploit interaction, 59–68
Shodan interaction, 51–59
HTTP servers
overview, 78–90
credential-harvesting attacks, 
90–93
multiplexing, 98–102
WebSocket API (WebSockets), 
93–98
http.HandleFunc(), 78–79
I
if statements, 18
implant code, 323–325, 327–329
import address table (IAT), 279
indexing metadata, 68–76
infinite loops, 37
init() function, 101
input/output (I/O) tasks, 32–35
instreamset filter, 73
integrated development environments 
(IDEs), 3–6
interface{} type, 97
interface types, 13
io package, 32, 197
io.Pipe() function, 43
io.ReadCloser, 49
io.Reader, 32–35, 46
ioutil.ReadAll() function, 49
io.Writer, 32–35
J
Java, 118–120
JavaScript, 94–95
JBoss, 198
334   Index
JetBrains GoLand, 5–6
jQuery package, 69
JS Bin, 94
JSON, 19, 50, 54, 139, 159
K
Kerberos, 133
Kernel32.dll, 275
Keyed-Hash Message Authentication 
Code (HMAC) standard, 
240–241
keylogging, 93–98
Kozierok, Charles M., 22
L
lab environments, 118–121
len field tag, 140
libraries, 2
lightweight threads, 16–17
loadLibraryA() function, 275
Login() method, 66
Logout() method, 66, 68
loops, 15, 37
Lua plug-ins, 225–232
Luhn checks, 253–254
M
madvise() function, 205
magic bytes, 296
main() function, 17
main package, 6
make() function, 11
Mandatory Integrity Control, 271
mapping data, 71–73, 125
maps, 11
Marshal() method, 19
marshalData() method, 305
marshaling interfaces, 135
MD5 hashes, 236–237
memory, 273–274
message authentication, 239–241. 
See also authentication
message authentication codes 
(MACs), 234
MessagePack, 60
metadata, 69, 138–139
Metasploit Framework, 59–68, 213
Meterpreter, 61, 98–102
Microsoft API documentation, 263–265
Microsoft SQL (MSSQL) Server 
databases, 157–158, 160–161
Microsoft Visual Studio Code, 5
middleware, 80–81, 83–88
MinGW-w64, 290
mod tool, 9
MongoDB databases, 154–156, 158–160
MsfVenom, 213, 278
Msg struct, 106–107
MSYS2, 290
multichannel communication, 30–32
multiplexing, 98–102
mutex, 129
mutual authentication, 248–252
MySQL databases, 156–157, 160–161
N
named functions, 126
native plug-ins, 218–224
negroni package, 83–88
Nessus vulnerability scanner, 217
net package, 24–25, 197
Netcat, 40–44
net.Conn, 35
net/http standard package, 46, 48
New() helper function, 53–54
NewProperties() function, 72–73
NewRequest() function, 48
Nmap, 225
nonconcurrent scanning, 25–26
NoSQL databases, 154, 158
NT LAN Manager (NTLM) 