𝜎′
=
if SFPK.Verify(pk′
SFPK)
, aid, Sig′
AAEQ.Verify(ipk, {(Attr𝑖, 𝑣Attr𝑖)}, 𝜎′
SFPK
,
asig
SFPK
AIDGen(Attr, nonce). Return 0
return
=
, pk′
SFPK).
and compute aid
Attr).
, 𝜎′
(pk′
signature 𝜎′
0. Otherwise
the
, Sig′
SFPK
=
Attr
, Sig′
SFPK
SFPK
SFPK
Attr
Scheme 4: Our Generic Construction of CHAC
710 processor and 6GB RAM running Android 10.0. To make the
evaluation more comprehensive, we executed the same helper de-
vice code on a laptop with Intel i7-7660U CPU @ 2.50 GHz with
16GB RAM running Windows 10.
We instantiate the bilinear groups using BN-256 curves [4] where
the group G1 is a standard curve defined over F𝑝, G2 is a curve
defined over the extension field F𝑝2 and the target group is F𝑝12.
5.2 Implementing SFPK on a Smart Card
On a high level, to implement the core device part of the con-
struction in Section 4.2 we have to implement the SFPK key gen-
eration (SFPK.KeyGen) and signing algorithms (SFPK.Sign1 and
SFPK.Sign2). They involve the following elliptic curve operations:
SFPK.KeyGen: standard elliptic curve key generation,
SFPK.Sign1: point multiplication in G1 and G2,
SFPK.Sign2: point multiplication, addition, hashing in G1.
Below we describe three principles and explain in detail how we
implemented the above algorithms on-card. What is more impor-
tant, the described principles explain the design choices we made
in the construction of our CHAC system.
Standardized operations. Multi-app smart cards usually provide
a high-level programming API with standardized cryptographic
algorithms and some basic operations like memory copying. We
decided on Multos smart cards because they provide API access to
modular arithmetic, which is not the case for the popular Java Card
technology-based cards [64]. The main limitation of smart cards
is that algorithms implemented directly are strongly inefficient in
comparison to the ones provided by the API, e.g., Bichsel et. al. [10]
used API based exponentiation (via the RSA algorithm) and the
equation (𝑎 + 𝑏)2 = 𝑎2 + 2𝑎𝑏 + 𝑏2 to implement multiplication.
The Gemalto Multos card we used for our evaluation supports
elliptic curves, but it is limited to standard curves over F𝑝. There
is also no support for low-level operations like point addition
and multiplication. Instead, the API provides access to an ellip-
tic curve Diffie-Hellman (ECDH) algorithm that outputs only the
x-coordinate of the resulting point. Implementing point addition
using the API provided modular arithmetic is sufficiently efficient.
To implement SFPK.Sign1 and SFPK.Sign2 we do not need an
actual point multiplication algorithm because the scalar in both
cases is random and chosen by the core device. Therefore, we can
leverage the API provided elliptic curve key generation algorithm
that outputs the full representation of the public key. What is more,
the parameters of the curve can be easily changed and therefore
we can use an arbitrary group generator that allows us to compute,
e.g., H(𝑚)𝑟 by replacing the group generator by H(𝑚).
It remains to discuss how one can implement operations in G2,
since elliptic curves over an extension field F𝑝2 are not supported.
In this case there are no API level algorithms that could be used to
make a custom implementation faster. This is the main reason why
we divide the SFPK signing process and included a pre-computation
step SFPK.Sign1. Since the generation of the core’s device secret
key is a one-time operation and can take more time than the online
signing process. Thus, point multiplication for curves over F𝑝2 can
be implemented using the API provided modular arithmetic.
Reusable Code. Smart cards are not only constrained in terms
of computation power but also in terms of memory. Usually the
card provided around 100 KB for applications which consist of
compiled code and defined data structured (e.g., secret keys). We
took this into account while designing our construction by limiting
the operations of the core device. This is also the main reason why
CShow executes CObtain and on a high level, both algorithms are
just SFPK.Sign2. What is more, this is also the reason why the core
device performs operations that are independent, in some sense,
of the attributes shown/obtained which allowed us to store the
credentials on the helper device.
Helper device characteristics. In CHAC we consider the helper
device somewhat trusted, i.e., it should be unable to use credentials
without the core device but otherwise, it is considered trusted (i.e.,
w.r.t. privacy). We abuse this in our implementation. The first idea
we introduce is how to hash the aid value to a point in G1. Usually,
one would use techniques like Icart’s function [51] to do this, but
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2014The point H(aid) is used in computing Sig1 = 𝑌 𝑥
since we put some trust in the helper we can use a simpler algorithm.
The idea is to limit the aid space to only values for which computing
SHA-256 give a valid x-coordinate in G1. We also assume that the
helper provides a valid 𝑦-coordinate. This approach can be easily
shown to be secure.
1 · H(aid)𝑟 . We
can use the API provided EC key generation algorithm to generate
𝑟 as the secret key and H(aid)𝑟 as the public key. The benefit of
computing H(aid)𝑟 this way is that the algorithm checks if the
point H(aid) is actually on the curve and returns an error if it is
not. The only way the helper device can abuse this is by sending
−𝑦 instead of the correct 𝑦. This would mean the card would return
1 · H(aid)−𝑟 . However, such a value can be easily obtained
Sig1 = 𝑌 𝑥
by the helper device by computing (Sig1, Sig−1
3 ) and therefore
gives no additional advantage.
1 (stored
on the card as an EC point). To do this we use our custom imple-
mentation of point addition. To make this operation more efficient
we only compute the x-coordinate of the result and let the helper
device recompute 𝑦 and −𝑦. This saves us some operation in F𝑝
on-card and the helper device can easily find the correct value using
the SFPK verification procedure.
It remains to show how to compute Sig1 using the key 𝑌 𝑥
2 , Sig−1
Algorithm
ECDSA
ECDH
ECKeyGen
CObtain/CShow
ECDAA [24]
Time
150
210
222
468
970
Algorithm PC Phone
HObtain
HShow
Verify
Verify∗
Issue
93
189
1003
945
-
7
15
140
109
156
On-card execution time
cred with 10 Attributes
Algorithm PC
7
HObtain
15
HShow
200
Verify
Verify∗
109
1024
Issue
Phone
93
190
1770
954
-
Algorithm PC
7
HObtain
15
HShow
851
Verify
Verify∗
110
10047
Issue
Phone
93
192
9363
960
-
cred with 100 Attributes
cred with 1000 Attributes
Table 3: Average execution time in milliseconds for BN-256
curve (𝑁 = 100). Worst case scenario for all algorithms. Bi-
linear pairings implemented using bnpairings Java library
based on BigIntegers. In algorithm Verify∗ we assume that the
verifier uses pre-computed values 𝐻Attr(𝑣Attr) ∈ G2.
5.3 Results
Various smart cards differ in computational power and available
algorithms, which influences the efficiency of custom cryptographic
algorithms. Thus, a comparison with results in related work would
not present meaningful data about the efficiency. However, an easy
way to assess the efficiency is to compare the algorithms execution
time to other well-known cryptographic algorithms. In Table 3
we compare our implementation of CObtain/CShow with elliptic
curve DSA, Diffie-Hellman, and key generation algorithms. All
algorithms are provided by the Multos API and work on the used
smart card. Additionally, we provide a prototype implementation
of the FIDO ECDAA algorithm [24, Chapter 3.5.2]. Note that the
efficiency of 𝑞-SDH based DAA schemes referenced in Table 1 are
close. This is due to the same number of point multiplications which
is the dominant computational factor. The execution time of our
ECDAA implementation can be used as a good estimator of the
execution time of the other algorithms in Table 1.
The numbers given in Table 3 correspond to an average of 100
executions. It is easy to see that our algorithms are roughly two
times slower than securely generating an elliptic curve key pair
on-card which is one of the basic operations used in practice. A
ECDAA implementation is two times slower than the smart card
part of our scheme. What is more, even a full showing of credentials
for CHAC is faster than just the smart card part of ECDAA.
To perform a comprehensive evaluation we created a simple
android application that naively implements the algorithms used
by the helper device and verifier. The core bilinear group opera-
tions were implemented using the Java based bnpairings library [5].
The only optimization used was the quaternary window method for
point multiplication with pre-computation. We used pre-computation
for group generators 𝑔1, 𝑔2 and the core device’s SFPK public key
which is the same for each invocation of HObtain/HShow.
Size: bits
Data type
areq - credential request
asig - show token
cred - credential
apreq - partial request
apsig - partial token
Table 4: Size of data types for credential cred with 𝐿 attributes.
Bit size is presented for the BN-256 curve.
Size: group elements
4 · [G1]+[G2]
6 · [G1]+3 · [G2]
2𝐿 · [G1]+2𝐿 · [G2]
4 · [G1]+[G2] + [Z𝑝]
4 · [G1]+[G2] + [Z𝑝]
1536
3072
𝐿 · 1536
1792
1792
In our implementation, we used the standard Java based SHA-256
to implement the used pseudo-random function and for hashing to
both curves, where we assume that the system is setup in a way that
the hashed values always correspond to a x-coordinate on the curve.
This is similar to the hash to point function that we introduced
for the smart card implementation. We executed the same code
on a PC (laptop) with Intel i7-7660U CPU @ 2.50 GHz with 16GB
RAM. We also implemented the algorithm used by the issuer. For
showing a credential we consider the worst-case scenario which
for our construction is showing all attributes in a given credential.
The results are given in Table 3. It is easy to see that our construc-
tion is practical, since proving possession of even 1000 attributes