are n > 1 participating parties. Denote by tr the transcript
of all broadcast messages. We seek a veriﬁer V and
simulator S that satisfy variants of the above properties:
(1) distributional correctness: if at least one party is
honest and V (tr) = 1, pp equals C((cid:4)α) · G for a random
(cid:4)α; and (2) zero knowledge: if at least one party is honest
and V (tr) = 1, tr reveals no information beyond pp in
the sense that S(pp) is indistinguishable from tr.
Ideally, we would still set tr := (pp, π) where π
is a NIZK proof for the NP statement “there exists
(cid:4)α such that pp = C((cid:4)α) · G”. However, now there is
no single party that knows the witness (cid:4)α. Each party
holds a multiplicative share of every coordinate of (cid:4)α:
party i holds (cid:4)σi = (σi,1, . . . , σi,m) ∈ Fm
(cid:2)
r and αj equals
n
i=1 σi,j.
Nevertheless, we show that it is still possible to factor
the NP statement into a collection of sub-statements,
each one involving a contribution of one share, that,
when carefully scheduled, allow the n parties to jointly
assemble π by producing suitable sub-proofs. More
generally, our construction has two steps. First, we
transform the circuit C in CS into a new circuit ˜C in a
new circuit class CE; second, we construct a multi-party
protocol for securely evaluating any circuit in CE. More
details follow.
The circuit class CE differs from CS in two ways.
First, the inputs of a circuit ˜C ∈ CE are partitioned into
slots; we write ˜C : Fm1×···×Fmn → Fh to express that
the ﬁrst m1 inputs are in the ﬁrst slot, the next m2 in the
second, and so on; the integers m1, . . . , mn are part of
˜C’s description. Second, the restriction on the possible
inputs of multiplication gates is relaxed to account for
input slots. CE poses the following restrictions on ˜C
(with difference from CS emphasized): (i) the output of
each (addition or multiplication) gate is an output of the
circuit; (ii) the inputs of each addition gate are outputs
of the circuit; (iii) the two inputs of each multiplication
gate are, respectively, a circuit output and either a circuit
input, or a circuit output computable from inputs from a
single slot. Figure 1b is an example of a circuit in CE.
The transformation from C ∈ CS to ˜C ∈ CE is as
follows. The m inputs of C are multiplicatively shared
among n parties to obtain n·m inputs for ˜C; the slot i of
˜C contains the m shares of party i. Each multiplication
gate in C is mapped to O(n) multiplication gates in
˜C tasked with assembling all the relevant shares; each
addition gate in C is mapped to a corresponding addition
gate in ˜C. A crucial feature of the transformation is depth
efﬁciency (see below).
The multi-party protocol for circuits in CE is a
generalization of the one that we described above for
a single party. Essentially, the class CE ensures that at
each multiplication gate there is one party that knows the
“local” witness for producing a NIZK proof of correct
evaluation of the gate. Thus, the protocol proceeds in
rounds, and at each round every party proves correct
evaluation of any gate ready to be processed (and so on
until no more gates need to be processed).
Depth matters. The round complexity of securely
evaluating ˜C ∈ CE is depthE( ˜C) + O(1), where
depthE( ˜C) is the E-depth and (roughly) corresponds
to the maximum number of gate-ownership alternations
along any input-to-output path; ownership refers to which
party provides the input share to a gate. (See Figure 1b
for a comparison of depth and E-depth for an example in
CE.) Intuitively, while going down a path in the circuit,
every change in gate ownership means that a party needs
to wait on another one to process the previous gate,
thereby costing an extra round.
Therefore, it is crucial that the transformation from
C to ˜C is efﬁcient in terms of E-depth of ˜C. By
292292
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:37 UTC from IEEE Xplore.  Restrictions apply. 
carefully combining the sub-circuits in ˜C, we ensure
that depthE( ˜C) = n · depthS(C), where depthS(C) is
the S-depth of C and denotes the maximum number of
alternations between addition and multiplication gates
along any input-to-output path. (Figure 1a compares
depth and S-depth for an example in CS.)
II. PRIOR WORK
Secure generation of parameters. Generating public
parameters for NIZKs has been studied before, partic-
ularly in the setting where parameters merely consist
of a random string. For example, [9], [10], [48] study
various aspects of this problem. There are also other
cryptographic primitives that require a set of public
parameters to be known to every party in the system,
and various works have explored distributed generation
of such parameters for various distributions [49]–[51].
Secure multi-party computation. The area of secure
multi-party computation has seen rapid recent progress,
both in terms of theoretical results and concrete imple-
mentations. Yet, the existing generic implementations do
not support, or inefﬁciently support, the setting that we
consider: many parties, dishonest majority, and evaluation
of a circuit with large (standard) circuit depth.
For example, many implementations consider the case
of two parties [52], where they achieve outstanding
efﬁciency [53], [54], and can process billions of boolean
gates while spending only tens of CPU cycles on each.
Most of the approaches in this setting are based on Yao’s
seminal work on garbled circuits [55], [56].
Some implementations consider the case of arbitrary
number of parties, but they suffer from other limitations.
For example, [57] consider adversaries that are honest
but curious. Other protocols [13], [58] consider mali-
cious adversaries but require an honest majority. There
are known constant-round MPC protocols for a fully-
malicious, dishonest majority [59], [60], but these require
expensive ZK proofs and have not been implemented.
When requiring security against dishonest majorities
(with at least one honest party), implementations have a
round complexity that depends linearly on the depth of
the circuit being computed [61]–[65]. The applications
that we consider in this paper involve circuit depths that
exceed hundreds of thousands, resulting in large round
complexities; such round complexities are at best very
expensive when considering network latencies on the
Internet and at worst prohibitive if one of the participating
parties uses an air gap as a precaution. While theoretical
results do achieve sublinear round complexity [66], [67],
they rely on “heavy artillery” such as fully-homomorphic
encryption and program obfuscation, unlikely to yield
efﬁcient implementations in the near future.
III. DEFINITIONS
A. Basic notation
We denote by λ the security parameter; f = Oλ(g)
means that there exists c > 0 such that f = O(λcg). The
power set of a set S is denoted 2S. Vectors are denoted
by arrow-equipped letters (e.g., (cid:4)a); their entries carry an
index but not the arrow (e.g., a1, a2). Concatenation of
vectors (and scalars) is denoted by the operator ◦.
Implicit inputs. To simplify notation, the input 1λ is
implicit to all cryptographic algorithms; similarly, we do
not make explicit adversaries’ auxiliary inputs.
Distributions. We write {y | x1 ← D1 ; x2 ←
D2 ; . . .}E to denote the distribution over y obtained
by conditioning on the event E and sampling x1 from
D1, x2 from D2, and so on, and then computing
(cid:4),
y := y(x1, x2, . . . ). Given two distributions D and D
(cid:4) to denote that the statistical distance
negl
we write D
= D
(cid:4) is negligible in the security parameter
between D and D
λ. A distribution D is efﬁciently sampleable if there
exists a probabilistic polynomial-time algorithm A whose
output follows the distribution D.
Groups. We denote by G a group, and consider only
groups that are cyclic and have a prime order r. Group
elements are denoted with calligraphic letters (such as
P,Q). We write G = (cid:3)G(cid:4) to denote that the element
G generates G, and use additive notation for group
arithmetic. Hence, P + Q denotes addition of the two
elements P and Q; a · P denotes scalar multiplication
of P by the scalar a ∈ Z; and O := 0 · P denotes the
identity element. Since r · P = O, we can equivalently
think of a scalar a as belonging to the ﬁeld of size r.
Given a vector (cid:4)a = (a1, . . . , an), we use (cid:4)a · P as a
shorthand for the vector (a1 · P, . . . , an · P).
Fields. We denote by F a ﬁeld, and by Fn the ﬁeld
of size n; we consider only ﬁelds of prime order. Field
elements are denoted with Greek letters (such as α, β, γ).
B. Commitments
A commitment scheme is a pair COMM = (COMM.Gen,
COMM.Ver) with the following syntax.
• COMM.Gen(x) → (cm, cr): On input data x, the
commitment generator COMM.Gen probabilistically
samples a commitment cm of x and corresponding
commitment randomness cr.
• COMM.Ver(x, cm, cr) → b: On input data x, com-
mitment cm, and commitment randomness cr, the
commitment veriﬁer COMM.Ver outputs b = 1 if
293293
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:37 UTC from IEEE Xplore.  Restrictions apply. 
d
(cid:3)
the cardinalities of wires(C), gates(C), inputs(C), and
outputs(C) respectively. The size of C is size(C) :=
#inputs(C) + #gates(C).
Gate types. A gate g of C is an addition gate
gadd, of the form α0 +
j=1 αjwj, or a (2-input)
multiplication gate gmul, of the form αwLwR. For addition
gates, inputs(gadd) := {w1, . . . , wd} are the input wires
and coeﬀs(gadd) := (α0, . . . , αd) are the coefﬁcients.
For multiplication gates, L-input(gmul) := wL is the
left input, R-input(gmul) := wR is the right input, and
coeﬀs(gmul) := (α) is the coefﬁcient. For both gate types,
output(g) := w is the output wire; also, gw is the gate
for which w = output(gw). We deﬁne type(g) to be
add for addition gates, and mul for multiplication gates;
constant gates (implicit in ﬁgures) are a special case of
addition gates.
Further notions for circuits with partitioned domains.
We also consider F-arithmetic circuits C for which the
m inputs of the circuits are partitioned into n disjoint
slots; in such a case, we write C : Fm1 × ··· × Fmn →
Fh to express that the ﬁrst m1 inputs belong to the
ﬁrst slot, the next m2 to the second, and so on; the
integers m1, . . . , mn are then also part of C’s description.
For i = 1, . . . , n: we denote by inputs(C, i) the input
wires that belong to the i-th slot, and by gates(C, i) the
gates that take as input an input wire in inputs(C, i);
the notations #inputs(C, i) and #gates(C, i) denote the
cardinalities of these sets; and we deﬁne size(C, i) :=
#inputs(C, i) + #gates(C, i). For every w ∈ inputs(C),
input-slot(C, w) is w’s slot number, i.e., the index i such
that w ∈ inputs(C, i).
cm is a valid commitment of x with respect to the
randomness cr.
The scheme COMM satisﬁes the standard completeness,
(computational) binding, and (statistical) hiding proper-
ties. We do not assume that cm hides |x|.
C. Non-interactive zero-knowledge proofs of knowledge
A non-interactive zero-knowledge proof of knowledge
(NIZK) for an NP relation R in the common random
string model is a tuple NIZKR = (NIZKR.P, NIZKR.V,
NIZKR.E, NIZKR.S) with the following syntax.
• NIZKR.P(crs, x, w) → π: On input common random
string crs, instance x, and witness w, the prover
NIZKR.P outputs a non-interactive proof π for the
statement “there is w such that (x, w) ∈ R”.
• NIZKR.V(crs, x, π) → b: On input common ran-
dom string crs, instance x, and proof π, the veriﬁer
NIZKR.V outputs b = 1 if π is a convincing proof for
the statement “there is w such that (x, w) ∈ R”.
Above, crs is a random string of Oλ(1) bits (the exact
length is prescribed by NIZKR). The remaining two
components are each pairs of algorithms, as follows.
• NIZKR.E1 → (crsext, trapext):
The extractor’s
generator NIZKR.E1 samples a string crsext (indis-
tinguishable from crs) and corresponding trapdoor
trapext. NIZKR.E2(crsext, trapext, x, π) → w: On
input crsext, trapext, instance x, and proof π, the
extractor NIZKR.E2 outputs a witness w for the
instance x.
• NIZKR.S1 → (crssim, trapsim): The simulator’s
generator NIZKR.S1 samples a string crssim (indis-
tinguishable from crs) and corresponding trapdoor
trapsim. NIZKR.S2(crssim, trapsim, x) → π: On
input crssim, trapsim, and instance x (for which
∃ w s.t. (x, w) ∈ R), the simulator NIZKR.S2 outputs
π that is indistinguishable from an “honest” proof.
NIZKR satisﬁes the standard completeness, (computa-
tional, adaptive) proof-of-knowledge, and (statistical,
adaptive, multi-theorem) zero-knowledge properties.
D. Arithmetic circuits
We consider arithmetic, rather than boolean, circuits.
Given a ﬁeld F, an F-arithmetic circuit C takes as input
elements in F, and its gates output elements in F. We
write C : Fm → Fh if C takes m inputs and produces h
outputs.
Wires, inputs, gates, and size. We denote by wires(C)
and gates(C) the wires and gates of C; also, we denote
by inputs(C) and outputs(C) the subsets of wires(C)
consisting of C’s input and output wires. We denote by
#wires(C), #gates(C),#inputs(C), and #outputs(C)
Finally, to assist in stating the deﬁnition of E-depth
(see below), we introduce the dependency set ds(w) of
a wire w; roughly, it denotes the subset of {1, . . . , n}
denoting which slots individually carry enough infor-
mation (in terms of inputs) to compute the value of w.
The formal deﬁnition of ds(w) is quite technical, and is
Figure 2.
Two classes of circuits. We consider the following two
circuit classes CS and CE.
• CS is the class of F-arithmetic circuits C : Fm →
Fh for which every gate g in gates(C) is such that:
(i) output(g) ∈ outputs(C); (ii) if type(g) = add,
then inputs(g)∩ inputs(C) = ∅; and (iii) if type(g) =
mul, then L-input(g) (cid:14)∈ inputs(C) and R-input(g) ∈
inputs(C).
• CE is the class of F-arithmetic circuits C : Fm1 ×···×
Fmn → Fh for which every gate g in gates(C) is such
(i) output(g) ∈ outputs(C); (ii) if type(g) =
that:
add, then inputs(g) ∩ inputs(C) = ∅; and (iii) if
type(g) = mul, then L-input(g) (cid:14)∈ inputs(C) and, for
294294
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:37 UTC from IEEE Xplore.  Restrictions apply. 
every w, w
and w
(cid:4) ∈ inputs(C), if R-input(g) depends on w
(cid:4) then input-slot(C, w) = input-slot(C, w
).
(cid:4)