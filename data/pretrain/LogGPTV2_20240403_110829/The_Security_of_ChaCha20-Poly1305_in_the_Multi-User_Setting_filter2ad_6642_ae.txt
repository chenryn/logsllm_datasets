encompasses the case where 𝑦1 = 𝑦2 and 𝑥1 ≠ 𝑥2, which is
impossible in the real world. From this case, we can define
the following simplified bad transcript description:
Bad2: There are two entries (prim, 𝑥, 𝑦, ·) and (enc, 𝑖, 𝑁 ,
𝐴𝐷, 𝑀, 𝐶∥𝑇 , 𝑉0∥ · · · ∥𝑉ℓ) such that 𝑦 ∈ {𝑉0 (32)− (𝑍∥𝐾𝑖∥0∥𝑁),
. . . , 𝑉ℓ
(32)− (𝑍∥𝐾𝑖∥ℓ∥𝑁)}.
Case 3 (𝑥1, 𝑦1), (𝑥2, 𝑦2) ∈ 𝑆2(𝜏) where 𝑥1 = 𝑥2. In this case, in the
real world, two calls are made to the ideal permutation on
the same input, through one or two encryption queries.
This case also encompasses the case where 𝑥1 = 𝑥2 and
𝑦1 ≠ 𝑦2, which is impossible in the real world. From this
case, we can define the following simplified bad transcript
description:
Bad3: There are two entries (enc, 𝑖, 𝑁 , 𝐴𝐷, 𝑀, 𝐶∥𝑇 , 𝑉) and
(enc, 𝑗, 𝑁 ′, 𝐴𝐷′, 𝑀′, 𝐶′∥𝑇 ′, 𝑉 ′) with 𝑁 = 𝑁 ′ (block counter
values do not overlap across different nonces), 𝑖 ≠ 𝑗 (be-
cause nonce reuse is not allowed for the same user) and
𝐾𝑖 = 𝐾𝑗.
Case 4 (𝑥1, 𝑦1), (𝑥2, 𝑦2) ∈ 𝑆2(𝜏) where 𝑦1 = 𝑦2. In this case, in the
real world, two calls with the same output are made to the
ideal permutation, through one or two encryption queries.
The case where 𝑦1 = 𝑦2 and 𝑥1 = 𝑥2 being already con-
sidered in the previous point, we can restrict this case to
𝑦1 = 𝑦2 and 𝑥1 ≠ 𝑥2, which in fact is impossible in the real
world. From this case, we can define the following simpli-
fied bad transcript description:
Bad4: There are two entries (enc, 𝑖, 𝑁 , 𝐴𝐷, 𝑀, 𝐶∥𝑇 , 𝑉0∥ · · ·
∥𝑉ℓ) and (enc, 𝑗, 𝑁 ′, 𝐴𝐷′, 𝑀′, 𝐶′∥𝑇 ′, 𝑉 ′
ℓ′) such that
(𝐾𝑖, 𝑠, 𝑁) ≠ (𝐾𝑗 , 𝑡, 𝑁 ′) and𝑉𝑠
(32)−(𝑍∥𝐾𝑗 ∥
𝑡∥𝑁 ′) for 0 ≤ 𝑠 ≤ ℓ and 0 ≤ 𝑡 ≤ ℓ′.
0 ∥ · · · ∥𝑉 ′
(32)−(𝑍∥𝐾𝑖∥𝑠∥𝑁) = 𝑉 ′
𝑡
Case 5 (𝑥, 𝑦) ∈ 𝑆1(𝜏) and (vf, 𝑖, 𝑁 , 𝐴𝐷, 𝐶∥𝑇 , false) ∈ 𝜏 where 𝑥 =
(𝑍∥𝐾𝑖∥0∥𝑁) and ∃𝑟 ∈ {0, 1}𝑡 ,𝑊 ∈ {0, 1}𝑛−2𝑡 such that
(32)+𝑥 = (𝑟∥(𝑇 (𝑡)−𝐻𝑟 (𝐴𝐷, 𝐶))∥𝑊 ). This case corresponds to an
𝑦
impossible transcript in the real world. As in the real world
𝜋(𝑥) = 𝑦 and from this case we obtain 𝜋(𝑍∥𝐾𝑖∥0∥𝑁) (32)+
(𝑍∥𝐾𝑖∥0∥𝑁) = (𝑟∥(𝑇 (𝑡)− 𝐻𝑟 (𝐴𝐷, 𝐶))∥𝑊 ). Therefore, trunc(
CC_block(𝐾𝑖, 𝑁 , 0), 2𝑡) = 𝑟∥(𝑇 (𝑡)−𝐻𝑟 (𝐴𝐷, 𝐶)). Thus (𝑁 , 𝐴𝐷,
𝐶∥𝑇) is a valid nonce/AD/ciphertext triplet under key 𝑖, and
in the real world, the verification query considered would
have returned true. From this case, we can define the fol-
lowing simplified bad transcript description:
Bad5: There are two entries (vf, 𝑖, 𝑁 , 𝐴𝐷, 𝐶∥𝑇 , false) and
(prim, 𝑥, 𝑦, ·) such that 𝑥 = (𝑍∥𝐾∥0∥𝑁), 𝐾𝑖 = 𝐾 and ∃𝑟 ∈
{0, 1}𝑡 ,𝑊 ∈ {0, 1}𝑛−2𝑡 such that 𝑦
(32)+𝑥 = (𝑟∥(𝑇 (𝑡)−𝐻𝑟 (𝐴𝐷, 𝐶))
∥𝑊 ).
Case 6 (𝑥, 𝑦) ∈ 𝑆2(𝜏) and (vf, 𝑖, 𝑁 , 𝐴𝐷, 𝐶∥𝑇 , false) ∈ 𝜏 where 𝑥 =
(𝑍∥𝐾𝑖∥0∥𝑁) and ∃𝑟 ∈ {0, 1}𝑡 ,𝑊 ∈ {0, 1}𝑛−2𝑡 such that
(32)+ 𝑥 = (𝑟∥(𝑇 (𝑡)− 𝐻𝑟 (𝐴𝐷, 𝐶))∥𝑊 ). This case corresponds
𝑦
to an impossible transcript in the real world, for a similar
reason as the previous case, i.e., in the real world, the veri-
fication query considered would have returned true. From
this case, we can define the following simplified bad tran-
script description:
Bad6: There are two entries (vf, 𝑖, 𝑁 , 𝐴𝐷, 𝐶∥𝑇 , false) and
(enc, 𝑗, 𝑁 , 𝐴𝐷′, 𝑀′, 𝐶′∥𝑇 ′, 𝑉 ′
𝑢) such that 𝐾𝑗 = 𝐾𝑖
and ∃𝑟 ∈ {0, 1}𝑡 ,𝑊 ∈ {0, 1}𝑛−2𝑡 such that 𝑉 ′
0 = (𝑟∥(𝑇 (𝑡)−
𝐻𝑟 (𝐴𝐷, 𝐶))∥𝑊 ).
0 ∥ · · · ∥𝑉 ′
Then 𝑇bad =6
For 𝑗 ∈ {1, . . . , 6}, let Bad𝑗 be the set of attainable transcripts satis-
fying the 𝑗-th simplified bad transcript description defined above.
𝑗=1 Bad𝑗. Note that Bad1, Bad2, and Bad3 contain
attainable transcripts calling more than one time the ideal permu-
tation on the same input-output during primitive and encryption
queries, and Bad4, Bad5, and Bad6 contain attainable transcripts
impossible in the real world.
6.4 Good Transcript Ratio (H-Coefficient)
An attainable transcript that is not in 𝑇bad is called good, and the
set of all good transcripts is denoted by 𝑇good. In the H-coefficient
technique, we need to bound the probability ratio of a good tran-
script being generated in the real world with respect to that of it
being generated in the ideal world.
Anomalous transcripts that result in a weak H-coefficient or that
make it hard to evaluate have been weeded out as bad transcripts in
the previous section. Roughly, these were transcripts that resulted
in different multi-set cardinalities across the two worlds and tran-
scripts with a real-world probability of zero. Consequently, we can
now easily bound the H-Coefficient (of good transcripts) through
a simple counting argument which yields the bound specified in
Proposition 6.2. Its proof can be found in Appendix B.1.
Proposition 6.2 (Probability of good transcripts). For any
good transcript 𝜏 ∈ 𝑇good it holds that:
Preal(𝜏)
Pideal(𝜏) ≥ 1 − 2𝑞𝑣
2𝑡 .
6.5 Bad Transcript Probabilities
We now bound the probability that Tideal ∈ 𝑇bad, i.e., the probability
that a transcript generated in the ideal world is bad.
The probabilities of events Tideal ∈ Bad𝑗, for 𝑗 ∈ {1, . . . , 6} are
bounded in Lemmas B.2–B.7, the proofs of which can be found in
Appendix B.2. The corresponding bounds are reproduced below
as inequalities (1)–(6). Proposition 6.3 is then obtained by a direct
application of the union bound and substituting terms through
inequalities (1)–(6). We notably use our improved balls-into-bins
theorem to obtain the inequalities (2), (5), and (6).
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1989.
+ 1
2𝑛−𝑘
.
Pr[Tideal ∈ Bad1] ≤ 𝑝𝑑
2𝑘
Pr[Tideal ∈ Bad2] ≤ 𝑝 · 2(𝑛 − 𝑘) 𝜎𝑒
2𝑘
Pr[Tideal ∈ Bad3] ≤ 𝑞𝑒(𝑑 − 1)
Pr[Tideal ∈ Bad4] ≤ (𝜎𝑒 + 𝑞𝑒)2
2𝑛+1
Pr[Tideal ∈ Bad5] ≤ 𝑞𝑣 · 2(cid:16)(𝑛 − 𝑘) 𝑝 + 2𝑡 𝑝(cid:17)
2𝑘
.
.
2𝑘
(1)
(2)
(3)
(4)
+
1
2𝑛−𝑘−1 +
1
22𝑡−1 .
(5)
2𝑡 + 𝑞𝑣 · 𝑐 · ℓ𝑚
Pr[Tideal ∈ Bad6] ≤ 𝑞𝑣
(6)
Proposition 6.3 (Probability of bad transcripts). Let Tideal
be the random variable representing the transcript generated by A in
the ideal game. It then holds that:
+ 𝑞𝑣 · 2 · 2𝑡 𝑑
+ 1
22𝑡
2𝑘
2𝑡
.
2𝑡
2𝑘
2𝑘
1
Pr[Tideal ∈ 𝑇bad] ≤ 𝑞𝑣 · (𝑐 · ℓ𝑚 + 1)
+ 𝑞𝑣 · 2(cid:16)(𝑛 − 𝑘) 𝑝 + 2𝑡 𝑝 + 2𝑡 𝑑(cid:17)
+ 𝑑(𝑝 + 𝑞𝑒)
2𝑘
+ (𝜎𝑒 + 𝑞𝑒)2
(cid:108)
+ 1
22𝑡−2 +
2𝑛+1
again using the shorthand notation 𝑖 𝑞
max(1,𝑖−log2(2𝑞))
𝑖
+ 2 · 𝑝(𝑛 − 𝑘) 𝜎𝑒
(cid:109)
= 0, for any 𝑖, 𝑞 ∈ N.
Theorem 6.1 is obtained by combining Propositions 6.2 and 6.3
with Theorem 2.2, where Proposition 6.2 yields 𝜖1 and Proposi-
tion 6.3 yields 𝜖2.
2𝑛−𝑘−2 ,
and
=
0
𝑖
7 IMPLICATIONS OF THE MAIN RESULT
In this section, we give some properties and implications of our
multi-user security theorem from Section 6. Succinctly, we prove
the tightness of the bound and extend the security result to the
nonce-randomized setting. Then we explain how our bounds im-
prove over previous results and how they compare and contrast
with the security profile of GCM. We further discuss the security
limits of ChaCha20-Poly1305 induced by the dominant term in our
bound and propose a potential variant scheme that overcomes these
limitations.
7.1 Tightness
We establish the tightness of the bound in Theorem 6.1 by provid-
ing several attacks matching the theorem bounds via the Proposi-
tions 7.1–7.6 below. To the best of our knowledge, the attacks in
Propositions 7.1 and 7.6 are new in this context and do not seem
to be covered elsewhere in the literature. For space reasons, their
details are deferred to Appendix C. Details for the other attacks
establishing the stated propositions can be found in the full version
of the paper.
Note that all our attacks are valid against the original multi-user
game and not only against the augmented version used in the proof.
Moreover, for all our attacks except the one in Proposition 7.6,
we only need the underlying ChaCha20 permutation 𝜋 to be a
permutation over {0, 1}𝑛 and not necessarily an ideal permutation.
Hash key recovery / forgery attack. The main idea of the following
attack is to retrieve the hash key of Poly1305_Mac and create a
forgery, in a similar way as was done for GCM [1, 27]. For this, the
attacker tests a set of ℓ𝑚 possible hash keys through each verifica-
tion query; if the correct hash key is in this set, the forgery attempt
will be valid, distinguishing the real from the ideal game.
The attack is described in the multi-user setting but is also valid
in the single-user setting as it queries only one user. The main
difference with forgery attacks on GCM is that in Poly1305_Mac,
128-bit messages/ciphertexts blocks are encoded (padded with 1)
before being transformed into coefficients of a polynomial modulo
2130 − 5, preventing us from accessing the full range of coefficients.
We use here the technique from [17] as a workaround, reducing the
coefficients of our forgery polynomial by looking for the shortest
vector of a carefully constructed lattice.
Proposition 7.1. Let 𝑡 be the tag size of Poly1305_Mac and 𝐻
its associated 𝑐-almost Δ-universal hash function. Let ℓ𝑚 ≥ 5 be the
maximal number of 𝑡-bit input blocks in an encryption or verification
query to the ChaCha20-Poly1305 AEAD scheme. There exists an ad-
versary A making one encryption query and 𝑞𝑣 verification queries
such that:
muAE
ChaCha20-Poly1305[𝜋](A) ≥ 𝑞𝑣 · 𝑐 · (ℓ𝑚 − 5)
2𝑡+4
.
Adv
For simplicity, we queried only one user for a specific encryption
query in our attack. The approach can be extended to an attack
querying multiple users, which then requires at least one encryption
query per user. Moreover, the encryption query we use, in fact, only
authenticates the associated data 𝐴𝐷 = 0𝑡·(ℓ𝑚−1); the message 𝑀
queried is empty. The attack should be extendable to arbitrary
values 𝐴𝐷 and 𝑀 of maximum length ℓ𝑚 by considering a closest
vector (CVP) algorithm rather than a shortest vector (SVP) one.
Key recovery attack. The main idea of the two following attacks
is to use offline computations (via the permutation oracle in our
model) to try to recover one of the user keys. For this, the attacker
makes 𝑑 encryption queries on the same input (𝑁 , 𝑀, 𝐴𝐷) across
𝑑 different users. It then makes 𝑝 permutation queries on guessed
keys to construct corresponding ciphertext for that input, checking
if any ciphertexts match.
Proposition 7.2. Let
the
ChaCha20-Poly1305 AEAD scheme. There exists a 𝑑-repeating ad-
versary A, that makes 𝑝 permutation queries and 𝑑 ≤ 2𝑘
𝑝 encryption