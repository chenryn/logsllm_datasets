title:CoDisasm: Medium Scale Concatic Disassembly of Self-Modifying Binaries
with Overlapping Instructions
author:Guillaume Bonfante and
Jos&apos;e M. Fernandez and
Jean-Yves Marion and
Benjamin Rouxel and
Fabrice Sabatier and
Aur&apos;elien Thierry
CoDisasm: Medium Scale Concatic Disassembly of
Self-Modifying Binaries with Overlapping Instructions
Guillaume Bonfante
Université de Lorraine, CNRS
and INRIA
Jose Fernandez
Ecole Polytechnique de
Montréal
Jean-Yves Marion
Université de Lorraine, CNRS
and INRIA
Benjamin Rouxel
Université de Lorraine, CNRS
and INRIA
Fabrice Sabatier
and INRIA
Université de Lorraine, CNRS
Université de Lorraine, CNRS
PI:EMAIL
Aurélien Thierry
and INRIA
ABSTRACT
Fighting malware involves analyzing large numbers of sus-
picious binary ﬁles. In this context, disassembly is a crucial
task in malware analysis and reverse engineering. It involves
the recovery of assembly instructions from binary machine
code. Correct disassembly of binaries is necessary to pro-
duce a higher level representation of the code and thus al-
low the analysis to develop high-level understanding of its
behavior and purpose. Nonetheless, it can be problematic in
the case of malicious code, as malware writers often employ
techniques to thwart correct disassembly by standard tools.
In this paper, we focus on the disassembly of x86 self-
modifying binaries with overlapping instructions. Current
state-of-the-art disassemblers fail to interpret these two com-
mon forms of obfuscation, causing an incorrect disassembly
of large parts of the input. We introduce a novel disas-
sembly method, called concatic disassembly, that combines
CONCrete path execution with stATIC disassembly. We
have developed a standalone disassembler called CoDisasm
that implements this approach. Our approach substantially
improves the success of disassembly when confronted with
both self-modiﬁcation and code overlap in analyzed bina-
ries. To our knowledge, no other disassembler thwarts both
of these obfuscations methods together.
Categories and Subject Descriptors
D.4.6 [Security and Protection]: Invasive software
General Terms
Security
Keywords
Disassembler; Malware; Dynamic Analysis; Overlapping In-
structions; Self-Modifying Codes
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’15, October 12–16, 2015, Denver, Colorado, USA.
c(cid:13) 2015 ACM. ISBN 978-1-4503-3832-5/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/2810103.2813627.
1.
INTRODUCTION
This paper focuses on malicious binary code, and more
speciﬁcally x86-binaries. Nowadays there are two opposite
core problems that we have to face in order to ﬁght mali-
cious binary code. On the one hand, each day a high volume
of (executable) ﬁles are observed and processed. Google re-
ceives more than 300 000 ﬁles per day and has a collection
of 400 million malware samples. All these ﬁles must be an-
alyzed and classiﬁed in order to build defenses against mal-
ware threats. It is a necessity to devise tools that are able
to correctly handle very large collections of machine code.
On the other hand, malware is quite often well-crafted soft-
ware that is heavily protected against analysis. As a result,
accurate and automatic malware analysis represents a true
challenge. Moreover, current tools available are not neces-
sarily well adapted to process large amounts of code, because
most of them are designed for reverse engineering and often
involve complex computations. The main objective of this
paper is to develop methods to disassemble and to construct
control ﬂow graphs of binary codes, that are robust and able
to process eﬃciently a quite large amount of binary code.
Disassembly and pitfalls. Disassembly is the ﬁrst step
in the analysis of malware binaries and it is an essential
one as all subsequent steps crucially depend on the accu-
racy of the disassembly. Indeed, it is from the disassembly
of a binary that we can reconstruct the control ﬂow graph
(CFG) in order to perform further reverse engineering anal-
ysis tasks. It is also from the disassembly that we develop
decompilers in order to extract relevant high-level semantic
information. However, there are several inherent diﬃculties
in devising a disassembly process. It has been reported [21]
that up to 65% of the code is typically incorrectly disas-
sembled. One diﬃculty is that it is almost impossible, to
separate machine code from data. Both are mixed in a long
sequence of bytes. Instructions such as jmp may skip data,
jumping from one piece of code to another one. Moreover,
these jumps are not statically predictable. An illustration
of this fact is an indirect jump like the instruction jmp eax.
To pursue static analysis, it is then necessary to determine
the range of values in the register eax, or at least a good
approximation of the eax values.
It is worth noting that
determining the destination of an indirect jump is undecid-
able, which implies that separating code from data is also an
uncomputable task. Most previous work [31, 22, 33, 20, 19]
has tried to solve the problem of indirect jumps employing
static analysis methods. That said, there are other signif-
745icant issues.
In this paper, we focus on two of them: (i)
self-modifying code, and (ii) overlapping instructions. Both
obfuscation techniques are designed to protect code against
human and automated analysis, and are in fact widespread
in malware.
The second issue concerns overlapping instructions, which
is a typical feature of x86 machine code and a common anti-
disassembling mechanism. Consider for instance the follow-
ing execution sequence of bytes extracted from the packer
tELock0.99
mov ecx , 0 x1dc2
loop :
; data size
01006 e62
; ebx is the pointer on the block to decrypt
; ebx=0x1005090
01006 e67
01006 e 6 f
01006 e73
01006 e76
01006 e7a
01006 e7d
01006 e80
; jump to the decrypted data
inc ebx
r o l byte ptr [ ebx+ecx ] , 0 x5
add byte ptr [ ebx+ecx ] , c l
xor byte ptr [ ebx+ecx ] , 0 x67
inc byte ptr [ ebx+ecx ]
dec ecx
j n l e loop
01006 e82
jmp 0 x01005090
Figure 1: Decryption loop of tELock of data from
address 0x01005090 to 0x01006e52
Nowadays, malware is almost always self-modifying. Gen-
erally, this kind of code protection consists of a sequence of
complex and intertwined unpacking/decryption and protec-
tion routines. For example, the packer tELock 0.99 uses 18
layers to unpack and to protect the original code. In Fig-
ure 1, we present a simple —but commonly seen in malware—
example of a decryption loop based dynamic analysis on a
one-time pad cipher inside a layer of the packer tELock. The
encrypted code is run after decryption at address 0x01005090.
Packers and malware authors protect in a very eﬀective man-
ner the original code by mostly avoiding potential dynamic
analysis that attempt to analyse malware behavior. Com-
monly found protection methods may be quickly classiﬁed in
two categories. The ﬁrst category combines anti-debbuging,
anti-virtualization, and anti-disassembly mechanisms in var-
ious forms in order to evade system monitoring. For exam-
ple, the packer tELock contains several anti-debugging rou-
tines. The second category employs obfuscations and “code
slicing” methods in order to reveal the original code. A
packer has the ability to show just slices of the original code
and to hide the rest of the code. For example, the packer
ACProctect interleaves the original code with its code and
unpacks library calls only when it is required.
Generic unpackers were not designed to deal with all these
protections. Most of them [25, 17, 30, 13] perform dynamic
analysis and have heuristics to ﬁnd the unpacking layer that
contains the original code. One exception is that of the static
analysis-based unpacker proposed by Coogan et al. [9]. Ac-
cording to Ugarte et al. [32], generic unpackers can be de-
ceived, and therefore fail, because (i) they rely on speciﬁc
packer families, (ii) malware authors use handmade packers,
and (iii) they are based on assumptions that are no longer
valid. Indeed, nowadays packers combine the original code
with their own code. As a result, the original code is often
not totally available in memory and we cannot take a sin-
gle memory snapshot to capture it. Moreover, packers may
use several processes or threads to run the original code.
For these reasons, we develop a dynamic analysis system to
trace processes and threads. Thanks to our model of self-
modifying code, we take a sequence of memory snapshots
containing at least all the instructions of the original code
that are executed.
fe 04 0b eb ff c9 7f e6 8b c1
occurring in the code snippet in Figure 2. The correct con-
trol ﬂow graph is given in Figure 3. The instruction at the
01006 e7a
01006 e7d
01006 e 7 e
01006 e80
01006 e82
f e 04 0b
eb f f
f f c9
7 f e6
8b c1
inc byte [ ebx+ecx ]
jmp +1
dec ecx
jg 01006 e68
mov eax , ecx
Figure 2: Overlapping assembly in tELock0.99
address 01006e7d is jmp +1. This instruction is encoded by
two bytes and it jumps to the second byte of its opcode
at address 01006e7d+1, which corresponds to an instruction
dec ecx. The opcode of dec ecx is ff c9 which shares the
byte ff at address 01006e7d+1 with the jmp +1 opcode. As
a result, both instructions jmp +1 and dec ecx overlap each
other.
The overlap is just there to obfuscate the code. Figure 4
displays the disassembly result respectively output by IDA
Pro (v6.3) [11] which is incorrect. The reason is that oﬀ-the-
shelf disassemblers make the assumption that instructions
do not overlap and so misinterpret the execution sequence
above. There is one important exception: the Jakstab disas-
sembler proposed by Kinder [18], which handles overlapping
instructions but not self-modiﬁcation.
It is worth mentioning that tELock combines self-modi-
ﬁcation and overlapping instruction obfuscation techniques.
For explanatory reasons, we choose to separate and display
them in two independent snippets in Figure 1 and 3.
Objectives. The ﬁrst objective of our work is to devise
a disassembler of x86-malware code.
Inputs are stripped
binary code, with no information of any kind, and that are
usually heavily obfuscated. In particular, we have focused
on (i) self-modifying binaries, and (ii) on binaries containing
overlapping instructions. An important point is that we
make the assumption that slices of the original code may
be executed in any wave (i.e. unpacking layer) when the
Figure 3: Control ﬂow graph for the tELock sample
inc byte [ebx+ecx]jmp+1
dec excinstruction !overlappingLayer 1Layer 2jg 01006e68mov eax,ecxfe 04 0b eb ff c9 7f e6 8b c1incjmpdecjgmov74601006E7A inc byte ptr [ ebx+ecx ]
01006E7D jmp loc 1006E7D+1
01006E7D ; —————–
01006E7F db 0C9h ;
01006 E80 db 7Fh ;
01006 E81 db 0E6h ;
01006 E82 db 8Bh ;
01006 E83 db 0C1h ;
Figure 4: Disassembly of tELock example with IDA
Pro (v6.3)
analyzed code is packed. In other words, we do not assume
that the original code is entirely visible at some point of the
unpacking process. The second objective is to develop an
eﬀective complete disassembly architecture that is able to
automatically process each binary code ﬁle in a reasonable
amount of time.
The concept of code waves. We consider that each in-
put binary is self-modifying code. That is, the execution of
a binary will usually deploy diﬀerent waves of code. Thus,
an execution might be viewed as a sequence of waves, where
a wave is produced by previous waves. Most of the time, a
wave is produced by unpacking or by decrypting some data.
For example, tELock generates 18 waves and the misalign-
ment given in Figure 3 occurs at Wave 3. Each wave is
determined by an execution level. We begin with Wave 1
in which the starting code is run. Then, there is Wave 2
for which the executed code has been written by Wave 1.
Next, the process repeats itself and switches from Wave k
to k + 1 each time we run data written during Wave k. No-
tice that the code run at Wave k + 1 can be generated by
several previous waves (not only by Wave k).We found such
an example in the packer UPolyX, which we observed in a
Hupigon sample: hupigon.eyf. The execution of UPolyX
consists of a ﬁrst wave that generates a second unpacking
routine and part of the payload. The second wave starts with
the execution of the second unpacking routine that calls the
ﬁrst unpacking routine and generates the remainder of the
payload. Finally, the third wave is triggered and executes
the payload.
In this example, we see that the payload is
written at Waves 1 and 2.
Our model is closely related to the one suggested by Guiza-
ni et al. [12], which is why we use the same terminology.
The main diﬀerence is that we simplify the wave computa-
tion and we use a monotonic numbering, which allows us to
take a memory snapshot at the right time to dump a wave.
Debray and Patel [10] deﬁne the notion of phase. The def-
inition of a phase is closely related to the notion of wave.
Dalla Preda et al. [28] deﬁne a ﬁxed-point semantics of self-
modifying programs, which is also similar.
The method in a nutshell. The disassembly method
proceeds in two steps. In the ﬁrst step, we perform dynamic
analysis. We instrument a binary (see Section 3.2), and run
it in a sandbox. The code instrumentation is able to bypass
some anti-analysis evasion mechanisms. We follow threads
and processes created by the binary by instrumenting them
on the ﬂy. We collect execution traces of all threads and pro-
cesses. Then, we determine a sequence of waves as explained
in Section 3 and we take memory snapshots to disassemble
the code of each wave in the second step.
In the second step, described in Section 4, we disassem-
ble each wave. Each wave provides a memory snapshot and
a (sub-)trace. This step consists in identifying and in dis-
assembling the code in each wave with the executed trace
as a hint. For this, we implement a recursive disassembler
that follows the trace. The trace indicates a sequence of ex-
ecuted addresses but of course the memory snapshot of the
wave also contains “dormant” instructions, that have not
been executed but that will also be disassembled by CoDis-
asm Nonetheless, this trace will be our guide to perform
a recursive traversal disassembly.
In fact, the instruction
addresses gathered in the trace are starting points for dis-
assembly. For example, the packer PE Spin has 58 indirect
jumps which are immediately solved by using the trace.
We now have to face the second issue: overlapping instruc-
tions. Our approach is to split the memory analyzed in lay-
ers. Each layer corresponds to an overlap. To illustrate this
idea, let us go back to the tELock example. The memory is
constituted of 10 bytes: fe 04 0b eb ff c9 7f e6 8b c1.
As shown in Figure 6, this deﬁnes two layers fe 04 0b eb ff
and ff c9 7f e6 8b c1. Our approach can also thwart
obfuscations such as those shown by J¨amthagen et al. [16].
Other obfuscation techniques may be also resolved from
the trace. For example, a trace gives the return address of
a call even if the return address has been modiﬁed. Notice
that this information is easily available in dynamic analysis,
unlike in static analysis.
The results. We propose a simple model of self-modifying
program executions, dubbed wave semantics, that allows us
to reconstruct the original code. We also generalize the no-
tion of control ﬂow graph to deal with self-modifying code
with overlapping instructions.
From this model, we have developed a two step disassem-
bler called CoDisasm. In the ﬁrst step, CoDisasm collects an
execution trace of a stripped binary. This trace is analyzed
and split into code waves. At the end, CoDisasm outputs a
set of layers for each wave, where each layer contains a set of