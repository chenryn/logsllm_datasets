tion speciﬁc to the (user, product) pair. In previous work, the survival function
for number of hosts without a security patch has been modeled as an exponen-
tial decay process [21,23]. We note that a geometric distribution for a user’s
delay in applying a software update leads to the same model for the survival
function. We independently test this assumption by performing a chi-squared
goodness-of-ﬁt test between each sequence and a geometric distribution whose
parameter is calculated using a maximum likelihood estimate. The output of
the test is a p-value: small p-values reject the null hypothesis “The samples are
drawn from a geometric distribution”. Table 2 summarizes our results, for each
product we have included the number of users tested, and the percentage with
p-values higher than signiﬁcance levels of 5% and 1%. For the test, we ignore
users with fewer than 20 update events. Our results show that for the majority
of users the geometric distribution is a good ﬁt.
The above results suggest that the users’ response to new product releases are
fairly “simple-minded”, in the sense that they can be well-modeled using a one-
parameter distribution. In what follows, we examine the relationship between
118
A. Sarabi et al.
Table 2. Chi-squared test results over user update delays. We cannot reject the hypoth-
esis that these sequences are drawn from a geometric distribution.
Product
Chrome
Firefox
Users >0.05 >0.01
167592 87.8% 97.6%
21174 74.6% 93.0%
Flash Player
7722 98.2% 99.9%
Thunderbird
1857 86.5% 97.5%
patch delays and vulnerability states. Note that due to this single-parameter
characterization, the average patching delay is suﬃcient for summarizing user
behavior, and we shall only rely on sorting users by this measure.
3.2 Vulnerability State
We take the fraction of time that a host remains susceptible to at least one
known vulnerability as an indicator of its security posture or vulnerability state.
Figures 2a, c, and e display scatter plots of this measure for Chrome, Firefox, and
Flash Player, respectively. For each ﬁgure we have randomly selected 5000 users,
where each point represents one user. A point’s x and y coordinates correspond
to the average patch delay of that host, and its measured vulnerability state. The
histogram at the bottom of each plot shows the distribution of users with respect
to their average patch time; generated for users with an observation interval of at
least one year, resulting in 140,588 sample points for Chrome, 64,016 for Firefox,
and 55,042 for Flash Player. Note that the majority of hosts are observed for
intervals smaller than 3 years, and we have omitted hosts with less than 10
update events (see Sect. 2). Therefore, our study does not capture users with
average patch delays greater than roughly 100 days; longer observation windows
are required to accurately assess the behavior of such users.
Vulnerability state as a function of average patch delay. We further
group users with similar behavior by sorting them according to their estimated
patch delay, and create bins consisting of 500 users. We calculate the median
vulnerability duration, and the ﬁrst and third quartiles in each bin; the results
are illustrated in Figs. 2b, d, and f. We observe that a user with equal delays
in each product experiences similar vulnerability duration. At 20 days, the user
will remain vulnerable for 60% of the time, at 40 days this increases to 80%.
Across the three products, Chrome users clearly are more likely to have a
lower patch delay (as shown in the histograms), likely the eﬀect of silent updates,
whereas Flash users are the most tardy. However, given the same average delay,
the amount of vulnerabilities a user faces is very consistent across all products.
Outliers. In Fig. 2c we see high variability in vulnerability durations for users
with similar patch times. Upon further inspection, we discovered two vulnera-
bilities for Firefox, CVE-2010-0654 and CVE-2010-1585, that were published on
Patch Me If You Can: A Study on the Eﬀects of Individual User Behavior
119
1
n
o
i
t
a
r
u
d
y
t
i
l
i
b
a
r
e
n
u
V
l
0.8
0.6
0.4
0.2
0
0
1
n
o
i
t
a
r
u
d
y
t
i
l
i
b
a
r
e
n
u
V
l
0.8
0.6
0.4
0.2
0
0
20
40
60
80
(a)
Median
First quartile
Third quartile
60
80
40
20
Patch delay (days)
1
0.8
0.6
0.4
0.2
0
0
1
0.8
0.6
0.4
0.2
0
0
20
40
60
80
(c)
Median
First quartile
Third quartile
60
80
40
20
Patch delay (days)
1
0.8
0.6
0.4
0.2
0
0
1
0.8
0.6
0.4
0.2
0
0
20
40
60
80
(e)
Median
First quartile
Third quartile
60
80
40
20
Patch delay (days)
(b)
Chrome
(d)
Firefox
(f)
Flash Player
Fig. 2. Scatter plots of normalized vulnerability duration vs. average user delay in days
(top), and the mean, and ﬁrst and third quartiles for diﬀerent user types (bottom).
Each point in the scatter plots corresponds to a single user. In c the yellow/red dots
are users active in 2010/only active starting 2011. (Color ﬁgure online)
“2010-02-18” and “2010-04-28”, but ﬁrst patched on “2010-07-20” and “2011-
03-01”, respectively. As a result, users that have been observed during 2010,
have remained vulnerable for most of that year, regardless of their behavior. In
Fig. 2c, we have used a lighter color to display hosts that have been observed
at any time during 2010. The rest of the hosts (those that have opted in after
2010), exhibit similar variability to Chrome and Flash Player users.
Comparison across products. We further calculated the average vulnerabil-
ity duration, over all users of each application. Note that these values are aﬀected
by the following properties of each product: (i) the distribution of diﬀerent user
types (the histograms in Fig. 2), and (ii) the expected vulnerability duration for
each user type (Figs. 2b, d, and f). For Chrome, Firefox, Flash Player, and Thun-
derbird, the average host was susceptible to at least one vulnerability for 53.5%,
59.9%, 68.7%, and 55.7% of days. It follows that the improvement provided by
diﬀerent updating mechanisms in these applications is marginal.
A host’s vulnerability state is inﬂuenced by two conditions. First, for a single
vulnerability, the patch should be applied before the vulnerability is publicly dis-
closed. Nevertheless, even if the user misses the disclosure date, the damage can
be minimized by prompt patching. However, when taking into account successive
vulnerabilities, if the user does not apply the patch before the next vulnerability
is disclosed, the clock is reset, and now they will have to apply a new patch
to secure their machine. Quantitatively, for Chrome and Firefox, our data set
120
A. Sarabi et al.
includes 124, and 114 vulnerability disclosures between 2010 and 2012, resulting
in an average of approximately 10 days between successive disclosures. However,
our estimated results show that the average patch times for users of Chrome and
Firefox, is 9.9 and 15.6 days, respectively, meaning that users often cannot patch
a vulnerability before the next one is discovered. For Chrome, adopting silent
updates does not seem to provide the necessary margin to see any signiﬁcant
eﬀect on the vulnerability duration of hosts.
Breakdown of the vulnerability window. Note that the vulnerability of a
machine can be caused due to the vendor’s failure to release a patch before a vul-
nerability is disclosed, or the user’s negligence in installing the patch. We found
that, summed over all users, for Chrome, Flash Player, Firefox, and Thunder-
bird, 59.3%, 61.6%, 47.9% and 55.7% of days where a machine was susceptible
to a known vulnerability was caused by user negligence.
3.3 Susceptibility to Vulnerability Exploits
Being prone to known vulnerabilities does not necessarily translate into an immi-
nent threat, as the machine can only be breached through a real exploit. We
perform a similar study on the percentage of days that a host remains suscepti-
ble to an exploitable vulnerability. Figures 3a and b display the scatter plot and
vulnerability trends for 15 exploits of Flash Player. We did not have a suﬃcient
amount of exploits for Chrome and Firefox, we were only able to ﬁnd one known
exploit for Chrome, and 2 for Firefox. Comparing these plots to 2a–f, we observe
the same correlation between average patch times and vulnerability states. How-
ever, for similar patching delays, we generally see lower risk for known exploits.
This is due to the small number of exploited vulnerabilities for Flash. Neverthe-
less, we observe that many hosts are susceptible to exploits more than 50% of
the time, highlighting the threat exploit kits present to end-hosts.
1
0.8
0.6
0.4
0.2
n
o
i
t
a
r
u
d
y
t
i
l
i
b
a
r
e
n
u
V
l
0
0
1
0.8
0.6
0.4
0.2
0
0
80
Median