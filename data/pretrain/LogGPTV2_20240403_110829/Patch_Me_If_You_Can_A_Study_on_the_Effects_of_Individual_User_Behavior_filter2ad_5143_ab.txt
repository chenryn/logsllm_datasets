### Specific Considerations for (User, Product) Pairs

In previous research, the survival function for the number of hosts without a security patch has been modeled as an exponential decay process [21, 23]. We note that a geometric distribution for a user's delay in applying a software update also leads to the same model for the survival function. To independently test this assumption, we performed a chi-squared goodness-of-fit test between each sequence and a geometric distribution, with the parameter calculated using maximum likelihood estimation. The test output is a p-value: small p-values indicate rejection of the null hypothesis that "The samples are drawn from a geometric distribution." Table 2 summarizes our results, showing the number of users tested for each product and the percentage with p-values higher than significance levels of 5% and 1%. For the test, we excluded users with fewer than 20 update events. Our results show that for the majority of users, the geometric distribution is a good fit.

### User Response to New Product Releases

These results suggest that users' responses to new product releases can be modeled using a one-parameter distribution, indicating a relatively simple behavior. In the following sections, we examine the relationship between patch delays and vulnerability states. Due to this single-parameter characterization, the average patching delay is sufficient for summarizing user behavior, and we will rely on sorting users by this measure.

### Vulnerability State

We define the vulnerability state as the fraction of time a host remains susceptible to at least one known vulnerability. Figures 2a, c, and e display scatter plots of this measure for Chrome, Firefox, and Flash Player, respectively. Each figure includes 5000 randomly selected users, with each point representing one user. The x and y coordinates correspond to the average patch delay and the measured vulnerability state. The histograms at the bottom of each plot show the distribution of users with respect to their average patch time, generated for users with an observation interval of at least one year. This results in 140,588 sample points for Chrome, 64,016 for Firefox, and 55,042 for Flash Player. Note that most hosts were observed for intervals smaller than three years, and we excluded hosts with fewer than 10 update events (see Sect. 2). Therefore, our study does not capture users with average patch delays greater than approximately 100 days; longer observation windows are required to accurately assess such users.

#### Vulnerability State as a Function of Average Patch Delay

To further group users with similar behavior, we sorted them according to their estimated patch delay and created bins consisting of 500 users. We calculated the median vulnerability duration and the first and third quartiles in each bin, as shown in Figs. 2b, d, and f. We observe that a user with equal delays in each product experiences similar vulnerability duration. At 20 days, the user will remain vulnerable for 60% of the time, increasing to 80% at 40 days. Across the three products, Chrome users are more likely to have lower patch delays, likely due to silent updates, whereas Flash users are the most tardy. However, given the same average delay, the amount of vulnerabilities a user faces is consistent across all products.

#### Outliers

In Fig. 2c, we see high variability in vulnerability durations for users with similar patch times. Upon further inspection, we discovered two vulnerabilities for Firefox, CVE-2010-0654 and CVE-2010-1585, published on "2010-02-18" and "2010-04-28," but first patched on "2010-07-20" and "2011-03-01," respectively. As a result, users observed during 2010 remained vulnerable for most of that year, regardless of their behavior. In Fig. 2c, we used a lighter color to display hosts observed at any time during 2010. The rest of the hosts (those who opted in after 2010) exhibit similar variability to Chrome and Flash Player users.

#### Comparison Across Products

We calculated the average vulnerability duration for all users of each application. These values are influenced by the distribution of different user types (the histograms in Fig. 2) and the expected vulnerability duration for each user type (Figs. 2b, d, and f). For Chrome, Firefox, Flash Player, and Thunderbird, the average host was susceptible to at least one vulnerability for 53.5%, 59.9%, 68.7%, and 55.7% of days, respectively. This suggests that the improvement provided by different updating mechanisms in these applications is marginal.

### Factors Influencing Host Vulnerability

A host's vulnerability state is influenced by two conditions. First, for a single vulnerability, the patch should be applied before the vulnerability is publicly disclosed. Even if the user misses the disclosure date, prompt patching can minimize damage. However, for successive vulnerabilities, if the user does not apply the patch before the next vulnerability is disclosed, the clock is reset, and they must apply a new patch to secure their machine. For Chrome and Firefox, our dataset includes 124 and 114 vulnerability disclosures between 2010 and 2012, resulting in an average of approximately 10 days between successive disclosures. However, our estimated results show that the average patch times for Chrome and Firefox users are 9.9 and 15.6 days, respectively, meaning that users often cannot patch a vulnerability before the next one is discovered. For Chrome, adopting silent updates does not seem to provide a significant margin to reduce vulnerability duration.

### Breakdown of the Vulnerability Window

The vulnerability of a machine can be caused by the vendor's failure to release a patch before a vulnerability is disclosed or the user's negligence in installing the patch. Summed over all users, for Chrome, Flash Player, Firefox, and Thunderbird, 59.3%, 61.6%, 47.9%, and 55.7% of days where a machine was susceptible to a known vulnerability were caused by user negligence.

### Susceptibility to Vulnerability Exploits

Being prone to known vulnerabilities does not necessarily translate into an imminent threat, as the machine can only be breached through a real exploit. We performed a similar study on the percentage of days that a host remains susceptible to an exploitable vulnerability. Figures 3a and b display the scatter plot and vulnerability trends for 15 exploits of Flash Player. We did not have a sufficient number of exploits for Chrome and Firefox, finding only one known exploit for Chrome and two for Firefox. Comparing these plots to Figs. 2aâ€“f, we observe the same correlation between average patch times and vulnerability states. However, for similar patching delays, we generally see lower risk for known exploits, likely due to the small number of exploited vulnerabilities for Flash. Nevertheless, many hosts are susceptible to exploits more than 50% of the time, highlighting the threat exploit kits present to end-hosts.