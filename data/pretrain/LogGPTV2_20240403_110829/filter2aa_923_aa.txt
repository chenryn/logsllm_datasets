# MAC(b) Times and Forensic Timelines: An In-Depth Guide
## Grayson Lenik – Trustwave
@handlefree  
Copyright © Trustwave 2010  
Confidential

### Biography
- **Security Consultant** for Trustwave’s SpiderLabs.
- **Author** of the Digital Forensics blog, "An Eye on Forensics."
- **Certifications:**
  - GIAC Certified Forensic Analyst (GCFA)
  - Microsoft Certified Systems Engineer (MCSE)
  - Qualified Security Assessor (QSA)

## Agenda
1. What are MAC(b) times?
2. Where are they stored?
3. What is a forensic timeline?
4. Why is it useful?
5. Why do it my way?
6. Doing it my way
7. My way just got easier
8. Timestamp alteration (Timestomping)
9. Defeating timestamp alteration
10. Case studies and examples
11. Tools
12. Conclusion

## MAC(b) Times
### What Do They Stand For?
MAC(b) times are derived from file system metadata and stand for:
- **Modified**: The last time the file's contents were modified.
- **Accessed**: The last time the file was accessed.
- **Changed ($MFT Modified)**: The last time the file's metadata in the Master File Table (MFT) was changed.
- **Birth (file creation time)**: The time the file was created.

The (b) is in parentheses because not all file systems record a birth time. This presentation focuses on the NTFS file system, which is the most common in our investigations.

## Where Are They Stored?
MAC(b) times are stored in two places within the Master File Table (MFT):

1. **$STANDARD_INFO Attribute**:
   - Stores file metadata such as flags, the file SID, the file owner, and a set of MAC(b) timestamps.
   - This attribute is used by Windows Explorer, `fls`, `mactime`, `timestomp`, `find`, and other utilities to display timestamps.
   - **Reference**: [NTFS Time Stamps](http://blogs.technet.com/b/ganand/archive/2008/02/19/ntfs-time-stamps-file-created-in-1601-modified-in-1801-and-accessed-in-2008.aspx)

2. **$FILE_NAME Attribute**:
   - Contains the filename in Unicode and another set of MAC(b) timestamps.
   - **Difference**: 
     - **$STANDARD_INFO** can be modified by user-level processes like `timestomp`.
     - **$FILE_NAME** can only be modified by the system kernel. No known anti-forensics utilities can modify this attribute.

## What Is a Forensic Timeline?
A forensic timeline is a sequence of digital events sorted into a human-readable format. It can include events from a single source, such as the file system, or from multiple sources like the system registry, log files, and event logs. It provides a high-level overview of the events that occurred on a machine during a specific time frame.

## Why Is It Useful?
Forensic timelines are invaluable for pinpointing intruder activity at a given point in time. They help in:
- Identifying periods of intruder activity.
- Determining the starting point of an intrusion, which is crucial for finding malware and other activities.
- Providing a more complete picture when combined with registry timeline information, including code drops and service creations.
- Potentially identifying the user ID used to compromise the system.

## Why Do It My Way?
- **Fast**: Quickly generate timelines.
- **Easy**: Simple to implement.
- **Easily Searchable**: Use precise search methods instead of broad ones.
- **Free (or Nearly Free)**: Generate a timeline, including full file system data and registry hives, and search for keywords before popular GUI-based forensic tools have loaded and verified an image.

## Doing It My Way
### Generating a Bodyfile with `fls`
`fls` is an open-source tool available as part of The Sleuthkit (TSK).

#### Command:
```sh
fls -m C: -f ntfs -r \\.\Z: > fs_bodyfile
```
- `-m`: Output in standard format (timemachine format).
- `C:`: Mount point (can be D:, /var, etc.).
- `-f ntfs`: File system type.
- `-r`: Display directories recursively.
- `\\.\Z:`: Logical device.
- `> fs_bodyfile`: Output to a file called `fs_bodyfile`.

This can also be done on a live file system using F-response (the only non-free part, but highly valuable).

### Running `fls` Against a Static Image
#### Command:
```sh
fls -m C: -o 63 -r > fs_bodyfile
```
- `-o 63`: Offset.
- For a split image:
  ```sh
  fls -m C: -o 63 -r , , > fs_bodyfile
  ```

### Converting `fls` Output to a Human-Readable Format
Use `mactime.pl` (also part of TSK) to convert the bodyfile into a readable format.

#### Command:
```sh
perl mactime.pl -d -b fs_bodyfile > fs_timeline.csv
```
- `-d`: Output in comma-delimited format.
- `-b fs_bodyfile`: Input bodyfile.
- `> fs_timeline.csv`: Output to a CSV file.

### Adding Information to Create a "Super" Timeline
- **Registry Times**: Use `regtime.pl` (part of the SANS Incident Response and Forensics Toolkit, SIFT).
- **Log2timeline**: A utility by Kristinn Gudjonsson for adding Windows event logs, Dr. Watson logs, IIS, Apache logs, and more. The latest version includes 32 input modules.

### Process
1. Extract the registry hives from `%systemroot%/Windows/System32/config` and `ntuser.dat` files from their respective profiles.
2. Use `regtime.pl` to add registry MAC times.

#### Command:
```sh
perl regtime.pl -m -r
```

This approach allows for a comprehensive and efficient forensic analysis, providing a clear and detailed timeline of events.