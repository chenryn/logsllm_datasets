最后三个是保留项，暂时没有使用。
fastbin 顾名思义，它分配堆块的速度很快，且仅仅保存很小的堆块，fastbin chunk 的两个特点是没有 bk 指针并且 PREV_INUSE
标志位一定是 1，也就是说 fastbin chunk 不会和其他堆块合并(在特殊情况下还是会发生合并)。另外，fastbin 采用 LIFO
策略，从头部插入，头部取出，这样可以进一步提高分配效率。
附：fastbin 链表大致结构
第二类是 smallbin，这也是很常用的链表，smallbin chunk 近似于一个标准格式的 chunk，结构如下
    +-----------------+-----------------+
    |                 |                 |
    |     prev_size   |      size       |
    |                 |                 |
    +-----------------------------------+
    |                 |                 |
    |        fd       |       bk        |
    |                 |                 |
    +-----------------------------------+
    |                                   |
    |                                   |
    |            user data              |
    |                                   |
    |                                   |
    +-----------------+-----------------+
相比于 fastbin chunk，这里多出了 bk 指针，需要注意的是 fd 和 bk 指针(以及 fd_nextsize、bk_nextsize
指针)都是可以作为用户数据被覆盖的，它们只会在堆块空闲时发挥作用。
smallbin 的范围在 0x10 ~ 0x1f0(0x20 ~ 0x3f0 if OS is 64 bit)，smallbin 和 fastbin
有一部分是重合的，其实 fastbin 中的堆块在一定情况下可以进入到 smallbin 中(当发生 consolidate 时)。一些 smallbin
chunk 相互串联形成了一条双向链表
附：smallbin 链表大致结构
smallbin 链表从头部插入，尾部取出。
第三类是 largebin，专门用来保存一些较大的堆块，范围从 0x200 开始。一个 largebin chunk 结构可能如下
    +---------------+---------------+
    |               |               |
    |   prev_size   |    size       |
    |               |               |
    +-------------------------------+
    |               |               |
    |      fd       |      bk       |
    |               |               |
    +-------------------------------+
    |               |               |
    |   fd_nextsize |  bk_nextsize  |
    |               |               |
    +---------------+---------------+
    |                               |
    |                               |
    |            user_data          |
    |                               |
    +-------------------------------+
largebin共63个，组织方法如下：
32个bin 每64个字节一个阶层，比如第一个512-568字节，第二个576 – 632字节……
16个bin 每512字节一个阶层
8个bin每4096字节一个阶层
4个bin每32768字节一个阶层
2个bin每262144字节一个阶层
最后一个bin包括所有剩下的大小。不同于其他链表，largebin 每一个表项保存的是一个范围，所以会用到 fd_nextsize &
bk_nextsize 指针。fd 和 bk 指针的功能和 smallbin 的相同，但是 fd_nextsize & bk_nextsize
就有些复杂，fd_nextsize 指向第一个比当前堆块大的堆块，bk_nexisize 反之。
第四类是 unsortedbin，这个链表比较特殊，它没有针对大小进行排序，这一点从名字也能看出来，它可以被视为 smallbin 和 largebin
的缓冲区，当用户释放一个堆块之后，会先进入 unsortedbin，再次分配堆块时，ptmalloc
会优先检查这个链表中是否存在合适的堆块，如果找到了，就直接返回给用户(这个过程可能会对 unsortedbin
中的堆块进行切割)，若没有找到合适的，系统会清空这个链表，将堆块插入对应的链表中。下面引用 malloc.c 中的注释
    Unsorted chunks
        All remainders from chunk splits, as well as all returned chunks,
        are first placed in the "unsorted" bin. They are then placed
        in regular bins after malloc gives them ONE chance to be used before
        binning. So, basically, the unsorted_chunks list acts as a queue,
        with chunks being placed on it in free (and malloc_consolidate),
        and taken off (to be either used or placed in bins) in malloc.
        The NON_MAIN_ARENA flag is never set for unsorted chunks, so it
        does not have to be taken into account in size comparisons.
###  内存分配流程
前置基础知识大概就那些，还有一部分关于多线程的东西会放在后面，下面看一下 malloc 的分配流程，当程序第一次启动起来，heap
尚未初始化，这时如果去访问 heap 位置的内存会触发段错误，具体原因和上面说的类似，还没有绑定物理地址。
首先找到 malloc 函数的入口，在 glibc 的源代码中是找不到 malloc 这个函数的，当执行 malloc 时核心函数是
_int_malloc，新版本的 glibc 修改了 malloc 的外壳函数。为了方便，暂时不分析新版本，切换 glibc 到老版本
(2.12.1)，外壳函数为 public_mALLOc()
    Void_t* public_mALLOc(size_t bytes)
    {
      mstate ar_ptr;
      Void_t *victim;
      __malloc_ptr_t (*hook) (size_t, __const __malloc_ptr_t)
        = force_reg (__malloc_hook);
      if (__builtin_expect (hook != NULL, 0))
        return (*hook)(bytes, RETURN_ADDRESS (0));    // 检查是否存在 hook
      arena_lookup(ar_ptr);
      arena_lock(ar_ptr, bytes);    // 尝试获取分配区并加锁
      if(!ar_ptr)
        return 0;    // 失败退出
      victim = _int_malloc(ar_ptr, bytes);    // 加锁成功，调用核心函数分配内存
      if(!victim) {    // 如果分配失败，可能是 mmap 区域用光了
        /* Maybe the failure is due to running out of mmapped areas. */
        if(ar_ptr != &main_arena) {    // 判断当前分配区是不是主分配区
          (void)mutex_unlock(&ar_ptr->mutex);    // 不是主分配区， 将当前分配区解锁
          ar_ptr = &main_arena;
          (void)mutex_lock(&ar_ptr->mutex);    // 尝试锁定主分配区
          victim = _int_malloc(ar_ptr, bytes);    // 再次尝试分配内存
          (void)mutex_unlock(&ar_ptr->mutex);    // 解锁主分配区
        } else {    // 当分配区是主分配区，并且内存分配失败，可能是 sbrk 出了问题
    #if USE_ARENAS
          /* ... or sbrk() has failed and there is still a chance to mmap() */
          ar_ptr = arena_get2(ar_ptr->next ? ar_ptr : 0, bytes);  // 检查是否还有非主分配区
          (void)mutex_unlock(&main_arena.mutex);  // 解锁主分配区
          if(ar_ptr) {    // 如果成功找到了一个非主分配区，就继续尝试分配内存
        victim = _int_malloc(ar_ptr, bytes);
        (void)mutex_unlock(&ar_ptr->mutex);   // 解锁非主分配区
          }
    #endif
        }
      } else
        (void)mutex_unlock(&ar_ptr->mutex);  // 分配结束，解锁分配区。
      assert(!victim || chunk_is_mmapped(mem2chunk(victim)) ||
         ar_ptr == arena_for_chunk(mem2chunk(victim)));
      return victim;
    }
    #ifdef libc_hidden_def
    libc_hidden_def(public_mALLOc)
    #endif
外壳函数逻辑比较简单，主要是处理分配区的问题，尽量成功分配内存给用户，接下来是核心函数 _int_malloc()
> 补： 关于 arena 的问题，ptmalloc 可以有多个 arena，用来给不同的线程使用，外壳代码中调用了 arena_lookup
> 来寻找一个可用的 arena，其流程大概是首先判断一下当前线程最后一次使用的 arena
> 是否空闲(先查看线程私有对象中是否已经存在一个分配区)，如果不是，就循环遍历 arena 链表，尝试找到一个空闲的
> arena，如果找不到，就判断一下当前 arena 的总数，若小于最大值，就创建一个新的 arena，并且把新的 arena
> 插入到全局分配区循环链表并且加锁。新建的分配区一定是 non_main_arena，因为主分配区是从父进程继承的。
核心函数很长，就不贴所有代码了，有兴趣的同学可以去官网下载 glibc 的源代码。
首先是声明必要的变量，将所有要用的变量声明在函数头部可以方便后续的修改(此处代码不涉及逻辑)。
接着调用了函数
    checked_request2size(bytes, nb);
bytes 是用户传入的数字，nb 是真实 chunk 的大小，调用这个函数的目的是通过用户的输入计算出需要分配的 chunk
大小。这是由于对齐的原因，正常分配的 chunk 并不是输入的大小是多少就分配多少，而是会 SIZE 字节对齐，例如在 64 位系统下
malloc(1)，系统返回给我们的堆块实际上最多能容纳 16 个字节。
从这里开始 malloc 会分成 3 条路。
**第一条：** 当 nb 属于 fastbin chunk 时
     /*
        If the size qualifies as a fastbin, first check corresponding bin.
        This code is safe to execute even if av is not yet initialized, so we
        can try it without checking, which saves some time on this fast path.
      */
      if ((unsigned long)(nb) fd, victim))
           != victim);
    #else
        victim = *fb;    // 将取出的堆块给 victim
    #endif
        if (victim != 0) {    // 判断取出的堆块是否为空
          if (__builtin_expect (fastbin_index (chunksize (victim)) != idx, 0))  // 检查堆块的 size
        {
          errstr = "malloc(): memory corruption (fast)";
        errout:
          malloc_printerr (check_action, errstr, chunk2mem (victim));