nt color=\"blue\" face=\"Georgia, Arial\" size=8>HA Webpage Visit Results");
for pair in request:
if pair[0] == host:
guest = "LOCAL: "+pair[0]
else:
guest = pair[0]
200
使用
if (time_now-datetime.strptime(request[pair][1],'%Y-
%m-%d %H:%M:%S')).seconds #"+ str
(request[pair][1]) +": "+str(request[pair][0
])+ " requests " + "from &lt"+guest+
"&gt to WebServer &lt"+pair[1]+"&gt")
else:
file.write("#"+ str
(request[pair][1]) +": "+str(request[pair
][0])+ " requests " + "from &lt"+gue
st+"&gt to WebServer &lt"+pair[1]+"&gt")
file.write(" ");
file.close()
pickle.dump(request,open("pickle_data.txt","w"))
if __name__ == '__main__':
try:
ServerClass = BaseHTTPServer.HTTPServer
Protocol = "HTTP/1.0"
addr = len(sys.argv) ...] [options] [COMMAND] [ARGS...]
命令选项
-f, --file FILE 指定使用的 Compose 模板文件，默认为 docker-
compose.yml ，可以多次指定。
-p, --project-name NAME 指定项目名称，默认将使用所在目录名称作为
项目名。
--x-networking 使用 Docker 的可拔插网络后端特性（需要 Docker 1.9 及
以后版本）。
--x-network-driver DRIVER 指定网络后端的驱动，默认为 bridge （需
要 Docker 1.9 及以后版本）。
--verbose 输出更多调试信息。
-v, --version 打印版本并退出。
命令使用说明
build
格式为 docker-compose build [options] [SERVICE...] 。
构建（重新构建）项目中的服务容器。
206
命令说明
服务容器一旦构建后，将会带上一个标记名，例如对于 web 项目中的一个 db 容
器，可能是 web_db。
可以随时在项目目录下运行 docker-compose build 来重新构建服务。
选项包括：
--force-rm 删除构建过程中的临时容器。
--no-cache 构建镜像过程中不使用 cache（这将加长构建过程）。
--pull 始终尝试通过 pull 来获取更新版本的镜像。
help
获得一个命令的帮助。
kill
格式为 docker-compose kill [options] [SERVICE...] 。
通过发送 SIGKILL 信号来强制停止服务容器。
支持通过 -s 参数来指定发送的信号，例如通过如下指令发送 SIGINT 信号。
$ docker-compose kill -s SIGINT
logs
格式为 docker-compose logs [options] [SERVICE...] 。
查看服务容器的输出。默认情况下，docker-compose 将对不同的服务输出使用不
同的颜色来区分。可以通过 --no-color 来关闭颜色。
该命令在调试问题的时候十分有用。
pause
格式为 docker-compose pause [SERVICE...] 。
暂停一个服务容器。
port
207
命令说明
格式为 docker-compose port [options] SERVICE PRIVATE_PORT 。
打印某个容器端口所映射的公共端口。
选项：
--protocol=proto 指定端口协议，tcp（默认值）或者 udp。
--index=index 如果同一服务存在多个容器，指定命令对象容器的序号（默
认为 1）。
ps
格式为 docker-compose ps [options] [SERVICE...] 。
列出项目中目前的所有容器。
选项：
-q 只打印容器的 ID 信息。
pull
格式为 docker-compose pull [options] [SERVICE...] 。
拉取服务依赖的镜像。
选项：
--ignore-pull-failures 忽略拉取镜像过程中的错误。
restart
格式为 docker-compose restart [options] [SERVICE...] 。
重启项目中的服务。
选项：
-t, --timeout TIMEOUT 指定重启前停止容器的超时（默认为 10 秒）。
rm
格式为 docker-compose rm [options] [SERVICE...] 。
208
命令说明
删除所有（停止状态的）服务容器。推荐先执行 docker-compose stop 命令来
停止容器。
选项：
-f, --force 强制直接删除，包括非停止状态的容器。一般尽量不要使用该
选项。
-v 删除容器所挂载的数据卷。
run
格式为 docker-compose run [options] [-p PORT...] [-e KEY=VAL...]
SERVICE [COMMAND] [ARGS...] 。
在指定服务上执行一个命令。
例如：
$ docker-compose run ubuntu ping docker.com
将会启动一个 ubuntu 服务容器，并执行 ping docker.com 命令。
默认情况下，如果存在关联，则所有关联的服务将会自动被启动，除非这些服务已
经在运行中。
该命令类似启动容器后运行指定的命令，相关卷、链接等等都将会按照配置自动创
建。
两个不同点：
给定命令将会覆盖原有的自动运行命令；
不会自动创建端口，以避免冲突。
如果不希望自动启动关联的容器，可以使用 --no-deps 选项，例如
$ docker-compose run --no-deps web python manage.py shell
将不会启动 web 容器所关联的其它容器。
选项：
209
命令说明
-d 后台运行容器。
--name NAME 为容器指定一个名字。
--entrypoint CMD 覆盖默认的容器启动指令。
-e KEY=VAL 设置环境变量值，可多次使用选项来设置多个环境变量。
-u, --user="" 指定运行容器的用户名或者 uid。
--no-deps 不自动启动关联的服务容器。
--rm 运行命令后自动删除容器， d 模式下将忽略。
-p, --publish=[] 映射容器端口到本地主机。
--service-ports 配置服务端口并映射到本地主机。
-T 不分配伪 tty，意味着依赖 tty 的指令将无法运行。
scale
格式为 docker-compose scale [options] [SERVICE=NUM...] 。
设置指定服务运行的容器个数。
通过 service=num 的参数来设置数量。例如：
$ docker-compose scale web=3 db=2
将启动 3 个容器运行 web 服务，2 个容器运行 db 服务。
一般的，当指定数目多于该服务当前实际运行容器，将新创建并启动容器；反之，
将停止容器。
选项：
-t, --timeout TIMEOUT 停止容器时候的超时（默认为 10 秒）。
start
格式为 docker-compose start [SERVICE...] 。
启动已经存在的服务容器。
stop
格式为 docker-compose stop [options] [SERVICE...] 。
210