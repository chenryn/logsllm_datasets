One of the common idioms in JavaScript is using a getter function that takes
string of a property name of an object and returns the value of the property.
For example:
    var obj = {a: 1, b: '2'};
    var model = new Backbone.Model(obj);
    var a = mode.get('a'); // a is number
Right now, the `get` function can only be defined as returning `any`, because
we can't annotate it with anything better. It would be nice to be to define
the return type based on the properties of an interface for example:
    declare interface Model {
      a: number;
      b: string;
    }
    declare function get(keyArg: string): T; // syntax is for conveying idea only
    get('a'); // number
    get('b'); // string
    get('c'); // any
    declare function get2(keyArg: string): T2; // generic version
    get2('setTimeout'); // function
    get2('nonsense'); // any
    declare function get3(keyArg: any): T; // compile error, only support string and maybe number.
    declare function set(keyArg: string, value: T): void; // set syntax for the same thing
This would allow better definitions a lot of functions in common libraries
like `Lodash`/`Underscore`, `Immutable.js`, `Backbone`.
* * *
Currently TypeScript supports specialized overload signature. For example
    declare function get(key: string): any;
    declare function get(key: 'key'): string;
The suggestion above can already be partially implemented at application level
by using specialized overload signature with code generator. The suggestion
would allow this to be implemented more generally (especially for libraries).
* * *
Potential implementation may also be used to refine `{ [key: string]: someType
}`, but that might be more complex as it requires self referencing.