这是强网杯拟态防御线下赛遇到的web题目，本来是不打算分享Writeup的，但是由于问的人很多，于是这里分享给大家。
ez_upload这题算是非常经典的堆叠black
trick的题目，算是比较典型的ctf式题目（虽然现在大家都很抵制这样的题目），这里主要是分享Writeup以及我们队在完成题目时的思考流程。
# ez_upload 思考流程
最开始我先描述一下题目逻辑。  
1、login.php，登陆页面，只获取了username，没有任何限制，username会在转义后进入session。  
2、index.php，页面输出了username，ip（可以被xff覆盖），以及上传文件列表（不完整，只有10位）。  
3、upload.php，上传文件，要求必须上传php，但是又过滤很多，没办法绕过限制。
在拿到题目后，我们可以得到以下信息：
1、登陆无任何限制，只输入用户名，但单引号、双引号、反斜杠会被转义。  
aaa' => aaa\'  
1）hint提到数据库中username的长度为25
2、登陆后，index.php获取ip，这个ip可以被xff覆盖，而且是每次都会获取。  
1）xff受到waf限制，形似。
    $ip = get_ip_from_xff();
    echo $ip; 
    waf($ip);
但这里只拦截包括单引号、反斜杠
3、上传文件，要求必须上传php，但会被waf拦截。  
1）代码形似：
    waf($_FILES);
所以和ip那里触发不一致
2）看上去对php的验证在前，在最早的测试中，只有在触发waf的情况下才能被认为是php（猜测）
                ")
        index2 = r2.text[index-20:index].rfind("")
        return r2.text[index-17+index2:index].replace('....','')
    get_content(url)
获取到文件名就可以访问webshell，直接获取flag了
# 回顾题目
在完成题目之后，我拿到了题目的源码，重新回顾源码后发现一些有趣的东西。
    upload.php
     0) {
            switch ($file ['error']) {
                case 1 :
                    $mes = 'The uploaded file exceeds the value of the upload_max_filesize option in the PHP configuration file';
                    break;
                case 2 :
                    $mes = 'Exceeded the size of the form MAX_FILE_SIZE limit';
                    break;
                case 3 :
                    $mes = 'File section was uploaded';
                    break;
                case 4 :
                    $mes = 'No upload file selected';
                    break;
                case 6 :
                    $mes = 'No temporary directory found';
                    break;
                case 7 :
                case 8 :
                    $mes = 'System error';
                    break;
            }
            die($mes);
        }
        $content = file_get_contents($file['tmp_name']);
        checkMIME($file);
        if (checkContent($content) && checkExts($file['name'])) {
            upload($file);
        } else {
            die('attack detected');
        }
    } else {
        die('file not found');
    }
    function upload($file)
    {
        $savepath = dirname(__file__) . '/uploads/';
        $filename = explode('.', $file['name']);
        $newname = rand_name() . "." . trim(end($filename));
        $finalname = $savepath . $newname;
        if (move_uploaded_file($file['tmp_name'], $finalname)) {
            $db = new Database();
            //,1,(select substring(filename,10,10) from(select filename from picture limit 0,1)x))#
            if ($db->insert($_SESSION['username'], getip(), $newname)) {
                header('location: index.php');
                exit();
            }
        }
    }
    function rand_name($l = 64)
    {
        $str = null;
        $Pool = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz_";
        $max = strlen($Pool) - 1;
        for ($i = 0; $i < $l; $i++) {
            $str .= $Pool[rand(0, $max)];
        }
        return $str;
    }
    function checkExts($filename)
    {
        $AllowedExt = array('php', 'php3', 'php4', 'php5', 'pht', 'phtml', 'inc');
        $filename = explode('.', $filename);
        if (in_array(strtolower($filename[count($filename) - 1]), $AllowedExt)) {
            return false;
        }
        return true;
    }
    function checkMIME($file)
    {
        // text/php text/x-php
        $php_ext = array("text/php", "text/x-php");
        $type = mime_content_type($file['tmp_name']);
        if(!in_array(strtolower($type), $php_ext)){
            die("i need php file");
        }
    }
    function checkContent($content)
    {
        if (stripos($content, '<?') === 0) {
            return false;
        }
        return true;
    }
upload中我们一直认为是悖论的过滤，是通过`mime_content_type`来判断的，这也是为什么我们可以用`#!/usr/bin/php`绕过的原因，蛮有意思的一个点