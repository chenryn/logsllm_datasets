title:Hacking in Darkness: Return-oriented Programming against Secure Enclaves
author:Jae-Hyuk Lee and
Jin Soo Jang and
Yeongjin Jang and
Nohyun Kwak and
Yeseul Choi and
Changho Choi and
Taesoo Kim and
Marcus Peinado and
Brent ByungHoon Kang
Hacking in Darkness: Return-oriented 
Programming against Secure Enclaves
Jaehyuk Lee and Jinsoo Jang, KAIST; Yeongjin Jang, Georgia Institute of Technology; 
Nohyun Kwak, Yeseul Choi, and Changho Choi, KAIST; Taesoo Kim, Georgia Institute of 
Technology; Marcus Peinado, Microsoft Research; Brent Byunghoon Kang, KAIST
https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/lee-jaehyuk
This paper is included in the Proceedings of the 26th USENIX Security SymposiumAugust 16–18, 2017 • Vancouver, BC, CanadaISBN 978-1-931971-40-9Open access to the Proceedings of the 26th USENIX Security Symposium is sponsored by USENIXHacking in Darkness: Return-oriented Programming against Secure
Enclaves
Jaehyuk Lee† Jinsoo Jang† Yeongjin Jang⋆ Nohyun Kwak† Yeseul Choi† Changho Choi†
Taesoo Kim⋆ Marcus Peinado∤ Brent Byunghoon Kang†
†KAIST
⋆Georgia Institute of Technology
∤Microsoft Research
Abstract
Intel Software Guard Extensions (SGX) is a hardware-
based Trusted Execution Environment (TEE) that is
widely seen as a promising solution to traditional security
threats. While SGX promises strong protection to bug-
free software, decades of experience show that we have
to expect vulnerabilities in any non-trivial application. In
a traditional environment, such vulnerabilities often allow
attackers to take complete control of vulnerable systems.
Efforts to evaluate the security of SGX have focused on
side-channels. So far, neither a practical attack against
a vulnerability in enclave code nor a proof-of-concept
attack scenario has been demonstrated. Thus, a funda-
mental question remains: What are the consequences and
dangers of having a memory corruption vulnerability in
enclave code?
To answer this question, we comprehensively analyze
exploitation techniques against vulnerabilities inside en-
claves. We demonstrate a practical exploitation technique,
called Dark-ROP, which can completely disarm the se-
curity guarantees of SGX. Dark-ROP exploits a memory
corruption vulnerability in the enclave software through
return-oriented programming (ROP). However Dark-ROP
differs significantly from traditional ROP attacks because
the target code runs under solid hardware protection. We
overcome the problem of exploiting SGX-specific prop-
erties and obstacles by formulating a novel ROP attack
scheme against SGX under practical assumptions. Specif-
ically, we build several oracles that inform the attacker
about the status of enclave execution. This enables him
to launch the ROP attack while both code and data are
hidden. In addition, we exfiltrate the enclave’s code and
data into a shadow application to fully control the exe-
cution environment. This shadow application emulates
the enclave under the complete control of the attacker,
using the enclave (through ROP calls) only to perform
SGX operations such as reading the enclave’s SGX crypto
keys.
The consequences of Dark-ROP are alarming; the at-
tacker can completely breach the enclave’s memory pro-
tections and trick the SGX hardware into disclosing the
enclave’s encryption keys and producing measurement
reports that defeat remote attestation. This result strongly
suggests that SGX research should focus more on tradi-
tional security mitigations rather than on making enclave
development more convenient by expanding the trusted
computing base and the attack surface (e.g., Graphene,
Haven).
1
Introduction
Computer systems have become very complex. Even
simple, security-sensitive applications typically inherit the
huge trusted computing base (TCB) of the platforms they
run on. Trusted execution environments such as ARM
TrustZone [2] or Intel TXT [14] were invented to allow
small programs to run in isolation from the much larger
underlying platform software. However, the adoption of
these systems has been limited, as they were either closed
or required trusted hypervisors or operating systems that
have not materialized in the mass market.
Intel Software Guard Extensions (SGX) [16] is a new
processor feature that isolates security-critical applica-
tions from system software such as hypervisors, operating
systems, or the BIOS. SGX has been integrated into re-
cent Intel processor models and is seeing mass-market
deployment.
It is widely seen as the technology that
can finally enable applications with a small TCB in the
mass market. A number of systems have been using
SGX to protect applications from threats ranging from
untrusted cloud providers to compromised operating sys-
tems [3, 6, 17, 27, 30, 36, 39].
Recent work has explored the practical limitations of
this vision. Several authors [26, 33, 38] have identified
side channels that can leak large amounts of sensitive
information out of the application’s isolated execution
USENIX Association
26th USENIX Security Symposium    523
environment (enclave). A synchronization bug has been
shown to lead to a breakdown in enclave security [37].
However, a fundamental question about the security of
SGX remains unanswered: What is the effect of having a
memory-corruption vulnerability in an enclave and how
dangerous is it?
This question is important, as such vulnerabilities have
been found in a wide range of applications, including
security applications [4, 12, 13]. Furthermore, a major
branch of SGX-based system design runs unmodified
legacy applications and their complex operating system
support inside enclaves [6, 36]. The enclave software
of such systems is bound to have memory corruption
vulnerabilities.
In a regular environment, such vulnerabilities often re-
sult in an attack that changes the control flow of a victim
program to execute arbitrary code. However, enclaves
in SGX differ from such environments in several impor-
tant ways. In particular, SGX protects the entire memory
contents of the enclave program. Memory values and
registers that are required to launch an attack are com-
pletely hidden from attackers. More important, recent
SGX-based systems even keep the enclave code secret
from attackers. For example, under VC3 [30], the pro-
gram binaries are encrypted. This poses a problem for
ROP attacks [8, 9, 32], as the attacker needs to find a
vulnerability and gadgets in the victim’s code.
In this paper, we comprehensively analyze the af-
termath of exploiting a vulnerability in enclave code
by demonstrating a practical attack, called Dark-ROP.
Dark-ROP can completely disarm the security guarantees
of SGX. In essence, Dark-ROP exploits a control-flow
hijacking vulnerability in the enclave software through
return-oriented programming (ROP). Since SGX prevents
all access to enclave code and data from outside the en-
clave, we cannot directly apply typical ROP attacks.
To overcome these challenges, we construct a novel
method for finding a vulnerability and useful ROP gad-
gets in fully encrypted binaries (unknown code) running
under SGX. The method constructs three oracles that (a)
detect the number of register pops before a ret instruc-
tion, (b) reveal enclave register values, and (c) leak the
secret enclave memory contents. The method requires
no knowledge of the content of the binary running in the
enclave. Dark-ROP can chain the gadgets found in this
way and utilize them to invoke security-critical functions
such as data sealing and generating measurement reports
for remote attestation.
In addition, we construct a shadow application (i.e.,
SGX Malware) that runs outside an enclave but fully em-
ulates the environment of an SGX enclave. This demon-
strates the ability of Dark-ROP to fully control the en-
clave program. Dark-ROP utilizes ROP chains to copy
the complete enclave state, including both code and data
to unprotected memory. In addition to breaching enclave
confidentiality, this also enables Dark-ROP to emulate the
enclave software. It can run the enclave’s code outside the
enclave, except for a small number of SGX instructions.
The latter are used for attestation and for obtaining the
enclave’s crypto keys. Dark-ROP emulates these instruc-
tions by invoking ROP calls into the victim enclave.
The shadow application runs in unprotected memory
under the control of the attacker. When a remote server
requests a measurement report to check the integrity of
the victim enclave, the shadow application first receives
the request (as a man-in-the-middle), and then invokes an
ROP call that generates the correct measurement report in
the victim enclave and sends a reply to the remote party
to complete the attestation protocol. This man-in-the-
middle construction allows attackers to have complete
flexibility in executing any code of their choice in the
shadow application because it is not protected by SGX at
all. At the same time, the remote party cannot detect the
attack through the remote attestation because the shadow
application can use the real enclave to generate the correct
measurement report.
We summarize the contributions of the Dark-ROP at-
tack as follows:
1. First ROP demonstration against an SGX pro-
gram on real hardware. The Dark-ROP attack can
completely disarm the security guarantees of SGX.
This includes 1) exfiltrating secret code and data
from enclave memory, 2) bypassing local and re-
mote attestation, and 3) decrypting and generating
the correctly sealed data.
2. New ROP techniques. We devise a new way to
launch a code-reuse attack by 1) blindly finding a
vulnerability and useful gadgets from an encrypted
program in the enclave and 2) constructing a shadow
enclave that poses as a man-in-the-middle to mas-
querade the entire application of the enclave.
3. Informing the community. There is a tempta-
tion to focus on convenience (e.g., running unmod-
ified programs on SGX via library OSes [3, 6, 36])
rather than security (e.g., verification of enclave pro-
grams [34, 35]).
While SGX-like execution environments may make
exploitation more difficult, software vulnerabilities
continue to be a real threat. Thus, there is a need for
well-studied security mechanisms that are tailored
to the SGX environment.
We organize the rest of the paper as follows. §2 pro-
vides background on SGX. §3 discusses the challenges
and the threat model of Dark-ROP. §4 illustrates the de-
sign of Dark-ROP. §5 describes various ways to further
524    26th USENIX Security Symposium
USENIX Association
develop this attack for malicious uses. In §7, we discuss
the feasibility and effectiveness of our attack. §8 covers
related work. We conclude in §9.
2 Background
In this section, we present the background on SGX that is
necessary to further the understanding of Dark-ROP.
Intel SGX. Intel Software Guard Extensions (SGX) is
an extension of the x86 instruction set architecture (ISA),
which enables the creation of trusted execution environ-
ments (TEE), called enclaves. An enclave has an isolated
memory space and execution runtime. SGX protects pro-
grams running in enclaves from attacks that undermine
the integrity and the confidentiality of code and data of
the program. For example, SGX prevents enclaves from
being tampered with by privileged software (e.g., kernel),
and from many physical attacks such as the cold-boot
attacks.
2.1 Security Features of SGX
Memory encryption/isolation in SGX. SGX provides
hardware-based access control mechanism and memory
encryption to strongly guarantee the confidentiality and
integrity of the entire memory used by an enclave program
(Enclave Page Cache (EPC)).
The SGX processor enforces an access control policy
that restricts all access to an enclave’s memory to code
running inside that enclave. That is, no other software,
including the operating system, can read or write enclave
memory. This access restriction is enforced by the Mem-
ory Management Unit (MMU) integrated in the processor
package, which cannot be manipulated by the system soft-
ware. Specifically, page miss handler (PMH) [23] checks
an access permission of the EPC pages when any software
requests read or write access to the enclave memory.
In addition, a memory encryption engine (MEE) [11,
15] that is a extension of the memory controller encrypts
enclave code and data before they are being written to
main memory. This reduces the hardware TCB of SGX
to the processor package and prevents a variety of attacks
such as cold boot or DMA attacks.
Ensuring program integrity through attestation. At-
testation is a secure assertion mechanism that confirms
the correct application has been properly instantiated on
a specific platform [1].
The purpose of attestation in SGX is twofold: ensur-
ing that an enclave is running an expected program on a
certified SGX platform with a correct configuration and
securely sharing a secret to build a secure communication
channel between an enclave and a remote entity (e.g., the
owner of the enclave).
A complete end-to-end SGX attestation involves a long
series of steps, most of which are not relevant for this
paper. The one step that is relevant to Dark-ROP is that
an enclave needs to obtain a cryptographic message au-
thentication code (MAC) from the processor as part of the
attestation. The enclave calls the EREPORT instruction
to obtain the MAC. EREPORT computes the MAC over
a data structure that includes the calling enclave’s crypto-
graphic identity (digest) with a processor key that is not
revealed to the caller.
Data sealing.