## Page 230
JavaScript
function validate(phone)(
var regex =/^\+(?:[0-9] ?)(6,14}[0-9]$/;
if (regex.test(phone))(
// Valid international phone number
}else{
// Invalid international phone number
其他编程语言
如果读者希望了解如何在其他编程语言中实现这个正则表达式，请参考实例3.5中的
讲解。
讨论
国际电话号码使用的规则和约定在全球不同地区有显著的不同，因此，除非你采用一
种严格的格式，否则就很难对国际电话号码提供有意义的合法性验证。幸运的是，ITU-T
E.123规定了一种简单的、符合产业标准的格式。这种格式要求国际电话号码包含一个
前导的加号（被称为国际前缀符号），然后只允许使用空格来分隔数字分组。虽然根据
标准，否定字符（tilde，～）可以出现在电话号码中，用来说明存在一个额外的拨号音
（dialtone），但是在上述正则表达式中我们并没有考虑它，因为它只是一个过程性的元
素（换句话说，它并不会出现在实际拨号中），而且并不常用。根据国际电话编码方案
（ITU-TE.164），电话号码中不能包含超过15个数字。目前使用中的最短的国际电话号
码中只包含7个数字。
当理解了所有这些之后，我们再把这个正则表达式拆开来看看。因为这个版本使用的
是宽松排列模式，所以字面的空格被替换为了x20>：
A
#判断字符串的开始位置
\+
#匹配一个字母的“+”字符
(? :
#分组但是不捕获...
[0-9]
#
匹配一个数字
x20
#
匹配一个空格字符...
？
0次或1次
）
#非捕获分组的结束
{6, 14}
重复之前的分组6~14次
[6-0]
#匹配一个数字
$
#判断字符串的结尾位置
正则选项：宽松排列
正则流派：.NET、Java、PCRE、Perl、Python、Ruby
位于正则表达式两边的定位符和$>会保证它能匹配整个目标字符串。非捕获分组
214
第4章
www.TopSage.com
---
## Page 231
也就是？:)之间的内容-一会匹配单个数字，然后是一个可选的空白字符。使用区
间量词{6，14>来重复这个分组会执行关于最小和最大数字个数的规则，同时充许
在数字中的任何地方出现空格分隔符。字符类[0-9]>的第二个实例完成了关于数字个
数的规则（把字符总数从6～14增加到7～15），并保证电话号码不会以空格结束。
变体
检查EPP格式的国际电话号码
\+[0-9]{1,3}\. [0-9]{4, 14} (?:x.+) ?S
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
这个正则表达式遵守的是由ExtensibleProvisioningProtocol（EPP）规定的国际电话号
码格式。EPP是一个相对较新的协议（2004年才正式确定），它的设计目的是为了域名
注册中心和注册人员之间进行通信。它已经被用于越来越多的域名注册中心，其中包
括.com、.info、.net、.org和.us。它之所以重要，是因为EPP风格的国际电话号码被越
来越多的人使用和认可，因此它也就提供了用来存储（和验证）国际电话号码的一种
较好的替代格式。
EPP风格的电话号码使用的格式是+CCC.NNNNNNNNNNxEEEE，其中C是1～3位的
国家代码，N最多可以用14位，而E是（可选的）分机号。前导加号和国家代码之启
的点号是必需的。字面的“x”字符只有当需要提供分机号的时候才是需要的。
参见
实例4.2中提供了对北美电话号码进行合法性验证的更多选择。
ITU-T推荐标准E.123（“Notationfor national and international telephone numbers,e-mail
addressesandWebaddresses"）可以从http://www.itu.int/rec/T-REC-E.123下载。
ITU-T推荐标准E.164（“Theinternational public telecommunication numbering plan"）可
以从http://www.itu.int/rec/T-REC-E.164下载。
全国编码方案可以从http://www.itu.int/lTU-T/inr/nnp下载。
RFC4933标准定义了EPP联系标识符（其中包括了国际电话号码）的语法和语义。可
以从http://tools.ietf.org/html/rfc4933下载RFC4933。
4.4传统日期格式的合法性验证
问题描述
你想要检查传统格式的日期：mm/d/yy、mm/dd/yyyy、dd/mm/yy和dd/mm/yyyy。你
合法性验证和格式化
215
www.TopSage.com
---
## Page 232
想要使用一个简单的正则表达式检查输人看起来是否像一个日期，而不用设法排除像
February31st这样的日期。
解决方案
匹配任意的上述日期格式，并允许省略前导0：
[0-3]?[0-9]/[0-3]?[0-9]/(?:[0-9]{2})?[0-9]{2}$
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
匹配任意的上述日期格式，要求必须使用前导0：
[0-3][0-9]/[0-3][0-9]/(?:[0-9][0-9])?[0-9][0-9]$
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
匹配m/d/yy和mm/dd/yyyy，允许为日和月使用一个或两个数字，年使用两个或4个数
字的任意组合：
(1[0-2]10?[19]) /(3[01] 1[12][0-9]10?[1-9]) /(?:[0-9]{2})?[0-9]{2}$
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
匹配mm/dd/yyyy，要求必须使用前导0：
(1[0-2]10[1-9]) /(3[01]1[12][0-9]10[1-9]) /[0-9]{4}$
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
匹配d/m/yy和dd/mm/yyyy，允许为日和月使用一个或两个数字、年使用两个或4个数
字的任意组合：
(3[01]1[12] [0-9]10?[1-91)/ (1[02]10?[1-9])/(? :[0-9]{2})?[0-9]{2}$
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
匹配dd/mm/yyyy，要求必须使用前导0：
6-0]/(6-]01-0])/(6-]016-0]]10])
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
更严格地匹配任意的上述日期格式，允许省略前导0：
(?:(1[0-2]10?[1-9])/(3[01]1[12][0-9]10?[1-9]) 1
(3[01]1[12]{0-9]10?[1-9])/(1[0-2]10？[1-9]))/(？:[0-9]{2})?[0-9]{2}$
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
更严格地匹配任意的上述日期格式，要求必须使用前导0：
(?:(1[0-2]10[1-9]) /(3[01]1[12] [0-9]10[1-9])1
(3[01]1[12][0-9]10[1-9]) / (1[0-2]10[1-9])) /[0-9]{4}$
216
第4章
www.TopSage.com
---
## Page 233
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
如果使用宽松排列选项，可以使最后两个正则表达式变得更加易读：
^(？ :
#m/dor mm/dd
(1[0 2]10?[1 9]) / (3 [01]1[12][0 9]10? [1 9])
#d/mordd/mm
(6-]01[-)/(6]016]]1])
)
/yy or/yyyy
/ (? : [0-9](2}) ?[09] (2) $
正则选项：宽松排列
正则流派：.NET、Java、PCRE、Perl、Python、Ruby
:)
mm/ad
（6-]016-0][]10])/(6-]01-0])
#dd/mm
（6]01[-0])/(6-]0160]]10])
）
KKKK/#
/[0-9]{4} $
正则选项：宽松排列
正则流派：.NET、Java、PCRE、Perl、Python、Ruby
讨论
你可能会认为像日期这样概念上很简单的格式对正则表达式来说应当很简单。但是
事实并非如此，这有两个原因。因为日期是大家每天都要用到的，所以人们对于日
期都比较随意。4/1对你来说可能是愚人节。但是对其他人来说，如果元旦是星期
五的话，那么它可能就是一年的第一个工作日。这里给的解答可以匹配一些最常见
的日期格式。
另外一个问题是正则表达式并不会直接处理数字。举例来说，你不能告知一个正则表
达式“匹配1～31之间的一个数字”。正则表达式会挨个字符进行处理。我们使用
。这是因为数字0～9的字符在ASCⅡI和Unicode字符表中占据的位置是连续的。
第6章中会介绍关于使用正则表达式匹配各种数字的更多细节。
正因为此，你必须在正则表达式的简单程度和精确程度之间做出选择。如果已经知道你
的目标文本中不包含任何非法数据，就可以使用一个简单的正则式：（\d{2}/d{2}/d{4}>。
合法性验证和格式化217
www.TopSage.com
---
## Page 234
标文本中，所以并没有关系。你可以很快就写出这样一个简单的正则式，而且它的执
行速度也很快。
这个实例的前两个解答也很简单迅速，虽然它们也会匹配不合法的日期，比如0/0/00
和31/31/2008。它们只使用了字面字符来匹配日期分隔符，并使用字符类（参见实例
2.3）来把某些数字变成可选的。允许日期包含两位或四位数字。
会刚好匹配两位数字。匹配0～2个数字。其中的非捕获分组
（参见实例2.9）是必需的，因为问号需要被应用到字符类和量词{2}>的组合之上。
和一样，也会正好匹配两个数字。没有这个分组的话，问号就
会把量词变成懒情的，因为（{2}>不能重复多余两次或者少于两次，那么问号起始不
会起作用。
第3～6个解答中把月份限制为了1～12的数字，日期限制为了1～31的数字。我们在
-个分组中使用了多选结构（参考实例2.8）匹配不同的数字对，从而可以组成两位数
字的一个范围。我们在这里使用了捕获分组，因为你一般总是会有需要把日和月的取
值抓取下来。
最后两个解答则更为复杂一些，所以我们分别使用了紧凑和宽松排列模式来解释它
们。这两种形式的唯一区别是可读性。JavaScript并不支持宽松排列。最后的两个解
决方案支持所有的日期格式，这和最前面的两个例子是一样的。区别是最后两个会
使用额外的多选结构来把日期限制为12/31和31/12，其中去掉了不合法的月份，例
如31/31。
变体
如果想要在更大的文本范围中查找日期，而不是检查一个输入是否是一个日期，那么
你就不能再使用定位符。只是简单地把定位符从正则表达式中删掉也不是正确
的解决方案。举例来说，这样做会允许前面列出的正则表达式可以匹配在9912/12/
200199中的12/12/2001。因此，我们的做法不是把正则匹配定位到目标字符串的开始
和结尾，而是必须规定日期不能作为更长数字序列的一部分。
这可以很容易地使用一对单词分界符来完成。在正则表达式中，数字都是被当作字符
来处理的，因此它们可以作为单词的一部分。对这个问题的解答需要把和都替
换为。例如：
\b(1[02]10[1-9]) / (3[01]1[12][0-9]10[1-9]) / [0-9]{4) \b
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
参见
实例4.5、4.6和4.7。
218第4章
www.TopSage.com
---
## Page 235
4.5对传统日期格式进行精确的合法性验证
问题描述
你想要验证传统格式的日期：mm/dd/yy、mm/dd/yyyy、dd/mm/yy和dd/mm/yyyy。你
还想去掉像February31st这样不合法的日期。
解决方案
#