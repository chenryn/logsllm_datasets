different parameters and set-up.
The external threats mainly stem from the choice of malware
samples for FODA. Currently, our malware samples for FODA are
only from GENOME. As GENOME originated from 2010, it may
contain lots of out-of-date malware. To ensure the timeliness of
malware, we need to further investigate what malicious behaviors
are contained in other malware collections. Another threat is due to
the public availability of the AMTs that we can audit. Especially,
(B1) onReceive() Global Variable ICC (A1) onCreate() SOURCE(IMEI) (A1) onCreate() STORE (A1) onStart() SINK(HTTP) (B2) onReceive() SOURCE(SMS) (B2) onReceive() STORE (A2) onCreate() ICC (A2) onCreate() SINK(HTTP) 374for tools based on dynamic analysis, the source code is required for
better debugging and testing the malware. At this moment, we only
have the source code of TAINTDROID. In future, we plan to audit
more AMTs based on dynamic analysis.
8.2 Countermeasure for Generated Malware
According to our experiments on generated malicious apps and
the detection results of AMTs, we present three suggestions for
future research on Android malware detection.
• A Reﬁned Source&Sink Pattern. Generally, the recognition
of sources and sinks is the ﬁrst step for static- and dynamic-
analysis tools. Consequently, they need to track the ﬂow of
information (obtained by sources) in either the program or the
runtime environment. However, most of existing works [8, 20,
27, 34] identify sources and sinks by doing a matching with
Android APIs, such as SUSI [40]. However, there exist some
sources which cannot be represented as APIs. For example, the
number of incoming calls can be obtained from the context of
(cid:104)PhoneStateListener(cid:105)onCallStateChanged. Although SUSI includes
the methods getLatitude and getLongitude as sources, malware can
use the method toString instead to fetch the speciﬁc latitude and
longitude to bypass AMTs’ tracking, and these kinds of sources
exist in our benchmark. Hence, one reﬁned pattern for sources
and sinks facilitate the detection of privacy leakage.
• Full Consideration of Communication Channels. There ex-
ist many communication channels in Android, through which
information is transmitted. Besides ICC provided by Android,
malicious apps can communicate via system memory or persis-
tent storage. In addition, there emerge side channel attacks in
Android [15]. All of these advanced techniques hinder the detec-
tion of malware. Therefore, modern detection approaches should
follow the development of attacks ﬁrmly and supplement domain
knowledge from time to time.
• Correct Understanding of Malicious Behaviors. Current ap-
proaches based on machine learning lack an understanding of
essences of malicious behaviors. Features extracted from apps
are usually separated or not directly relevant to malicious be-
haviors. Although machine learning tools achieve 91.4% on
accuracy in the training, they can only detect less than 9.5% of
generated malware in reality (§ 7.3). Therefore, with a tolera-
ble loss of efﬁciency, machine learning based approaches can
learn the essences of malicious behaviors deeply to increase their
performance on Android apps in the wild. For example, they
can employ static analysis to extract the relationship between
different features [25, 51, 52].
9. RELATED WORK
Android Malware Generation Aydogan and Sen [10] propose an
approach to generate Android malware with a genetic algorithm.
The newly generated malware originate from the crossover and
mutation of malware in GENOME [55], and they conducted experi-
ments to show that the new malware variants can easily bypass the
detection of anti-virus tools. Cani et. al. [12] employ µ GP to auto-
matically create new malware which is undetectable for anti-virus
tools, and injects it into a benign app to construct a Trojan horse.
Malware Evasion Techniques. Christodorescu et al. [16] ﬁrstly
give a formal deﬁnition for obfuscation, and these techniques can be
used by hackers to modify their malware to evade the detection of
anti-virus tools and analysis of security analysts. In order to hinder
dynamic analysis of Android malware, Petsas et al. [39] proposes
three heuristics to check if malware is running on an emulated
device or a real device, thereby decide whether to execute malicious
behaviors. The three heuristics contains-static heuristics, such as
IMEI code, routing table; dynamic heuristics, such as sensor data,
and; hypervisor heuristics, such as QEMU scheduling.
Anti-malware Auditing. Christodorescu and Jha [16] leverage
four types of obfuscation techniques to test the capabilities of com-
mercial anti-virus tools. In addition, they propose an algorithm
to extract the unique signature by which anti-virus tools use to
identify malware. ADAM [53] is an automatic and extensible plat-
form to test and audit Android anti-virus tools. It employs several
transformation techniques to generate polymorphic malware, and
test 10 prestigious anti-virus tools. DROIDCHAMELEON [41, 42]
collects three types of transformation attacks in Android, and the
authors have used these attacks to audit the off-the-shelf detection
tools. Huang et al. [29] assess the detection capabilities of 30 top
anti-virus tools from two aspects: malware scanning and engine
updating. They reveal hazards of evasion in malware scanning, and
null-protection windows during the update of engine.
10. CONCLUSION
We propose a feature model to describe the behaviors in malware
for the ease of understanding and detection. We present MYSTIQUE,
an Android malware generation framework to automatically gen-
erate malware with speciﬁc features. The generated malware is
used to explore the agressivity of attack features, and efﬁciency of
evasion techniques. We provide 10,000 generated malicious apps
which can be used to evaluate the emerging AMTs and thereby help
to enhance the security of Android ecosystem.
Acknowledgments
This work is supported by the National Research Foundation, Sin-
gapore under its National Cybersecurity R&D Program (Award
NRF2014NCR-NCR001-30). This work is also sponsored by the
National Science Foundation of China (No. 61572349, 61272106).
References
[1] Mystique | Evolving Android Malware for Auditing
https://sites.google.com/site/
Anti-Malware Tools.
malwareevolution/.
https://www.virustotal.com, 2015.
[5] Y. Aafer, W. Du, and H. Yin. DroidAPIMiner: Mining API-
Level Features for Robust Malware Detection in Android. In
SecureComm, 2013.
[6] K. Allix, T. F. Bissyandé, J. Klein, and Y. L. Traon. Machine
Learning-Based Malware Detection for Android Applications:
History Matters! Technical Report 978-2-87971-132-4, 2014.
[7] D. Arp, M. Spreitzenbarth, M. Hübner, H. Gascon, and
K. Rieck. Drebin: Effective and Explainable Detection of
Android Malware in Your Pocket. In NDSS, 2014.
[8] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein,
Y. Le Traon, D. Octeau, and P. McDaniel. FlowDroid: Precise
Context, Flow, Field, Object-sensitive and Lifecycle-aware
Taint Analysis for Android Apps. In PLDI, pages 259–269,
2014.
[9] V. Avdiienko, K. Kuznetsov, A. Gorla, and A. Zeller. Mining
Apps for Abnormal Usage of Sensitive Data. In ICSE, 2015.
[10] E. Aydogan and S. Sen. Automatic Generation of Mobile
Malwares Using Genetic Programming. In Applications of
Evolutionary Computation, volume 9028, 2015.
[11] I. Burguera, U. Zurutuza, and S. Nadjm-Tehrani. Crowdroid:
Behavior-based Malware Detection System for Android. In
SPSM, pages 15–26, 2011.
[2] VirusShare. http://www.virusshare.com.
[3] 10 Years of Mobile Malware Whitepaper.
//www.fortinet.com/sites/default/ﬁles/whitepapers/
10-Years-of-Mobile-Malware-Whitepaper.pdf, 2014.
[4] VirusTotal - Free Online Virus, Malware and URL Scanner.
http:
375[12] A. Cani, M. Gaudesi, E. Sanchez, G. Squillero, and A. Tonda.
Towards Automated Malware Creation: Code Generation and
Code Integration. In SAC, pages 157–160, 2014.
[13] K. Chen, P. Liu, and Y. Zhang. Achieving Accuracy and
Scalability Simultaneously in Detecting Application Clones
on Android Markets. In ICSE, pages 175–186, 2014.
[14] K. Z. Chen, N. M. Johnson, V. D’Silva, S. Dai, K. MacNa-
mara, T. R. Magrino, E. X. Wu, M. Rinard, and D. X. Song.
Contextual Policy Enforcement in Android Applications with
Permission Event Graphs. In NDSS, 2013.
[15] Q. A. Chen, Z. Qian, and Z. M. Mao. Peeking into Your
App without Actually Seeing It: UI State Inference and Novel
In USENIX Security, pages 1037–1052,
Android Attacks.
2014.
[16] M. Christodorescu and S. Jha. Testing Malware Detectors. In
ISSTA, pages 34–44, 2004.
[17] P. Clements and L. Northrop. Software Product Lines: Prac-
tices and Patterns. Addison-Wesley Professional, 3rd edition,
Aug. 2001.
[18] K. Czarnecki and U. W. Eisenecker. Generative Programming
- Methods, Ttools and Applications. Addison-Wesley, 2000.
[19] S. Dai, A. Tongaonkar, X. Wang, A. Nucci, and D. Song. Net-
workProﬁler: Towards Automatic Fingerprinting of Android
Apps. In IEEE INFOCOM, pages 809–817, 2013.
[20] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung, P. Mc-
Daniel, and A. N. Sheth. TaintDroid: An Information-ﬂow
Tracking System for Realtime Privacy Monitoring on Smart-
phones. In OSDI, pages 1–6, 2010.
[21] W. Enck, M. Ongtang, and P. D. McDaniel. On Lightweight
Mobile Phone Application Certiﬁcation. In CCS, pages 235–
245, 2009.
[22] Essam Al Daoud and Iqbal H. Jebril and Belal Zaqaibeh. Com-
puter Virus Strategies and Detection Methods. 1(2), 2008.
[23] Y. Feng, S. Anand, I. Dillig, and A. Aiken. Apposcopy:
Semantics-based Detection of Android Malware Through
Static Analysis. In FSE, pages 576–587, 2014.
[24] A. P. Fuchs, A. Chaudhuri, and J. S. Foster. Checking
Interation-Based Declassiﬁcation Policies for Android Using
Symbolic Execution. Technical report, 2009.
[25] J. Garcia, M. Hammad, B. Pedrood, A. Bagheri-Khaligh, and
S. Malek. Obfuscation-Resilient, Efﬁcient, and Accurate De-
tection and Family Identiﬁcation of Android Malware. Techni-
cal Report GMU-CS-TR-2015-10, 2015.
[26] H. Gascon, F. Yamaguchi, D. Arp, and K. Rieck. Structural
Detection of Android Malware Using Embedded Call Graphs.
In AISec, pages 45–54, 2013.
[27] M. I. Gordon, D. Kim, J. H. Perkins, L. Gilham, N. Nguyen,
Information Flow Analysis of Android
and M. C. Rinard.
Applications in DroidSafe. In NDSS, 2015.
[28] H. Gunadi and A. Tiu. Efﬁcient Runtime Monitoring with Met-
ric Temporal Logic: A Case Study in the Android Operating
System. CoRR, abs/1311.2362, 2013.
[29] H. Huang, K. Chen, C. Ren, P. Liu, S. Zhu, and D. Wu. To-
wards Discovering and Understanding Unexpected Hazards in
Tailoring Antivirus Software for Android. In AsiaCCS, pages
7–18, 2015.
[30] H. Ishibuchi, N. Tsukamoto, and Y. Nojima. Evolutionary
In CEC,
Many-Objective Optimization: A Short Review.
pages 2419–2426, 2008.
[31] K. C. Kang, S. G. Cohen, J. A. Hess, W. E. Novak, and A. S.
Peterson. Feature-Oriented Domain Analysis (FODA) Feasi-
bility Study. Technical report, Nov 1990.
[32] E. Kim. Creating Better User Experiences on Google
http://android-developers.blogspot.ro/2015/03/
Play.
creating-better-user-experiences-on.html, 2015.
[33] R. Laddad. AspectJ in Action, Second Edition. 2009.
[34] L. Li, A. Bartel, T. F. Bissyandé, J. Klein, Y. L. Traon, S. Arzt,
S. Rasthofer, E. Bodden, D. Octeau, and P. McDaniel. IccTA:
Detecting Inter-Component Privacy Leaks in Android Apps.
In ICSE, 2015.
[35] H. Lockheimer. Android and Security - Ofﬁcial Google
http://googlemobile.blogspot.sg/2012/02/
Mobile Blog.
android-and-security.html, 2012.
[36] K. Micinski, J. Fetter-Degges, J. Jeon, J. S. Foster, and M. R.
Clarkson. Checking Interation-Based Declassiﬁcation Policies
for Android Using Symbolic Execution. Technical Report
arXiv:1504.03711v2, 2015.
[37] D. A. Mundie and D. M. McIntire. An Ontology for Malware
Analysis. In ARES, pages 556–558, 2013.
[38] D. Octeau, P. McDaniel, S. Jha, A. Bartel, E. Bodden, J. Klein,
and Y. Le Traon. Effective Inter-Component Communication
Mapping in Android with Epicc: An Essential Step Towards
Holistic Security Analysis. In USENIX Security, pages 543–
558, 2013.
[39] T. Petsas, G. Voyatzis, E. Athanasopoulos, M. Polychronakis,
and S. Ioannidis. Rage Against the Virtual Machine: Hindering
Dynamic Analysis of Android Malware. In EuroSec, pages
5:1–5:6, 2014.
[40] S. Rasthofer, S. Arzt, and E. Bodden. A Machine-learning
Approach for Classifying and Categorizing Android Sources
and Sinks. In NDSS, 2014.
[41] V. Rastogi, Y. Chen, and X. Jiang. DroidChameleon: Evalu-
ating Android Anti-malware Against Transformation Attacks.
In AsiaCCS, pages 329–334, 2013.
[42] V. Rastogi, Y. Chen, and X. Jiang. Catch Me If You Can:
Evaluating Android Anti-Malware Against Transformation
Attacks. IEEE Transactions on Information Forensics and
Security, 9(1):99–108, 2014.
[43] J. Sahs and L. Khan. A Machine Learning Approach to An-
droid Malware Detection. In EISIC, pages 141–147, 2012.
[44] A. S. Sayyad, T. Menzies, and H. Ammar. On the Value of User
Preferences in Search-based Software Engineering: A Case
Study in Software Product Lines. In ICSE, pages 492–501,
2013.
[45] R. Schlegel, K. Zhang, X. yong Zhou, M. Intwala, A. Kapadia,
and X. Wang. Soundcomber: A Stealthy and Context-Aware
Sound Trojan for Smartphones. In NDSS, Feb. 2011.
[46] R. Schlegel, K. Zhang, X. Zhou, M. Intwala, A. Kapadia, and
X. Wang. Soundcomber: A Stealthy and Context-Aware Sound
Trojan for Smartphones. In NDSS, 2011.
[47] A.-D. Schmidt, R. Bye, H.-G. Schmidt, J. Clausen, O. Kiraz,
K. A. Yüksel, S. A. Camtepe, and S. Albayrak. Static Anal-
ysis of Executables for Collaborative Malware Detection on
Android. In ICC, pages 631–635, 2009.
[48] S. She, R. Lotufo, T. Berger, A. Wasowski, and K. Czarnecki.
Reverse Engineering Feature Models. In ICSE, pages 461–470,
2011.
[49] D. J. J. T. SUFATRIO, T.-W. CHUA, and V. L. L. THING.
Securing Android: A Survey, Taxonomy, and Challenges, May
2015.
[50] T. H. Tan, Y. Xue, M. Chen, J. Sun, Y. Liu, and J. S. Dong.
Optimizing Selection of Competing Features via Feedback-
directed Evolutionary Algorithms. In ISSTA, pages 246–256,
2015.
[51] W. Yang, X. Xiao, B. Andow, S. Li, T. Xie, and W. Enck.
AppContext: Differentiating Malicious and Benign Mobile
App Behavior Under Contexts. In ICSE, 2014.
[52] M. Zhang, Y. Duan, H. Yin, and Z. Zhao. Semantics-Aware
Android Malware Classiﬁcation Using Weighted Contextual
API Dependency Graphs. In CCS, 2014.
[53] M. Zheng, P. P. C. Lee, and J. C. S. Lui. ADAM: An Automatic
and Extensible Platform to Stress Test Android Anti-virus
Systems. In DIMVA, pages 82–101, 2013.
[54] W. Zhou, Y. Zhou, M. Grace, X. Jiang, and S. Zou. Fast,
Scalable Detection of “Piggybacked" Mobile Applications. In
Proceedings of the 3rd ACM Conference on Data and Applica-
tion Security and Privacy, pages 185–196, 2013.
[55] Y. Zhou and X. Jiang. Dissecting Android Malware: Charac-
terization and Evolution. In IEEE S&P, pages 95–109, 2012.
376