Returns the second component, if any.
c
Returns the third component, if any.
dblink
Returns the database link name.
nextpos
Position of the last character parsed in name.
Examples
The following stored procedure is used to display the returned parameter values of the
NAME_TOKENIZE procedure for various names.
CREATE OR REPLACE PROCEDURE name_tokenize (
p_name VARCHAR2
)
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 253
Database Compatibility for Oracle® Developers
Built-in Package Guide
IS
v_a VARCHAR2(30);
v_b VARCHAR2(30);
v_c VARCHAR2(30);
v_dblink VARCHAR2(30);
v_nextpos BINARY_INTEGER;
BEGIN
DBMS_UTILITY.NAME_TOKENIZE(p_name,v_a,v_b,v_c,v_dblink,v_nextpos);
DBMS_OUTPUT.PUT_LINE('name : ' || p_name);
DBMS_OUTPUT.PUT_LINE('a : ' || v_a);
DBMS_OUTPUT.PUT_LINE('b : ' || v_b);
DBMS_OUTPUT.PUT_LINE('c : ' || v_c);
DBMS_OUTPUT.PUT_LINE('dblink : ' || v_dblink);
DBMS_OUTPUT.PUT_LINE('nextpos: ' || v_nextpos);
END;
Tokenize the name, emp:
BEGIN
name_tokenize('emp');
END;
name : emp
a : EMP
b :
c :
dblink :
nextpos: 3
Tokenize the name, edb.list_emp:
BEGIN
name_tokenize('edb.list_emp');
END;
name : edb.list_emp
a : EDB
b : LIST_EMP
c :
dblink :
nextpos: 12
Tokenize the name, "edb"."Emp_Admin".update_emp_sal:
BEGIN
name_tokenize('"edb"."Emp_Admin".update_emp_sal');
END;
name : "edb"."Emp_Admin".update_emp_sal
a : edb
b : Emp_Admin
c : UPDATE_EMP_SAL
dblink :
nextpos: 32
Tokenize the name edb.emp@edb_dblink:
BEGIN
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 254
Database Compatibility for Oracle® Developers
Built-in Package Guide
name_tokenize('edb.emp@edb_dblink');
END;
name : edb.emp@edb_dblink
a : EDB
b : EMP
c :
dblink : EDB_DBLINK
nextpos: 18
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 255
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.18.15 TABLE_TO_COMMA
The TABLE_TO_COMMA procedure converts table of names into a comma-delimited list of
names. Each table entry becomes a list entry. The names must be formatted as valid
identifiers.
TABLE_TO_COMMA(tab { LNAME_ARRAY | UNCL_ARRAY },
tablen OUT BINARY_INTEGER, list OUT VARCHAR2)
Parameters
tab
Table containing names.
LNAME_ARRAY
A DBMS_UTILITY LNAME_ARRAY (as described in Section 3.18.1).
UNCL_ARRAY
A DBMS_UTILITY UNCL_ARRAY (as described in Section 3.18.2).
tablen
Number of entries in list.
list
Comma-delimited list of names from tab.
Examples
The following example first uses the COMMA_TO_TABLE procedure to convert a comma-
delimited list to a table. The TABLE_TO_COMMA procedure then converts the table back to
a comma-delimited list that is displayed.
CREATE OR REPLACE PROCEDURE table_to_comma (
p_list VARCHAR2
)
IS
r_lname DBMS_UTILITY.LNAME_ARRAY;
v_length BINARY_INTEGER;
v_listlen BINARY_INTEGER;
v_list VARCHAR2(80);
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 256
Database Compatibility for Oracle® Developers
Built-in Package Guide
BEGIN
DBMS_UTILITY.COMMA_TO_TABLE(p_list,v_length,r_lname);
DBMS_OUTPUT.PUT_LINE('Table Entries');
DBMS_OUTPUT.PUT_LINE('-------------');
FOR i IN 1..v_length LOOP
DBMS_OUTPUT.PUT_LINE(r_lname(i));
END LOOP;
DBMS_OUTPUT.PUT_LINE('-------------');
DBMS_UTILITY.TABLE_TO_COMMA(r_lname,v_listlen,v_list);
DBMS_OUTPUT.PUT_LINE('Comma-Delimited List: ' || v_list);
END;
EXEC table_to_comma('edb.dept, edb.emp, edb.jobhist')
Table Entries
-------------
edb.dept
edb.emp
edb.jobhist
-------------
Comma-Delimited List: edb.dept, edb.emp, edb.jobhist
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 257
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.19 UTL_ENCODE
The UTL_ENCODE package provides a way to encode and decode data. Advanced Serve
supports the following functions and procedures:
Function/Procedure Return Type Description
BASE64_DECODE(r) RAW Use the BASE64_DECODE function to
translate a Base64 encoded string to the
original RAW value.
BASE64_ENCODE(r) RAW Use the BASE64_ENCODE function to
translate a RAW string to an encoded Base64
value.
BASE64_ENCODE(loid) TEXT Use the BASE64_ENCODE function to
translate a TEXT string to an encoded Base64
value.
MIMEHEADER_DECODE(buf) VARCHAR2 Use the MIMEHEADER_DECODE function to
translate an encoded MIMEHEADER formatted
string to it's original value.
MIMEHEADER_ENCODE(buf, VARCHAR2 Use the MIMEHEADER_ENCODE function to
encode_charset, encoding)
convert and encode a string in MIMEHEADER
format.
QUOTED_PRINTABLE_DECODE(r) RAW Use the QUOTED_PRINTABLE_DECODE
function to translate an encoded string to a
RAW value.
QUOTED_PRINTABLE_ENCODE(r) RAW Use the QUOTED_PRINTABLE_ENCODE
function to translate an input string to a
quoted-printable formatted RAW value.
TEXT_DECODE(buf, encode_charset, VARCHAR2 Use the TEXT_DECODE function to decode a
encoding)
string encoded by TEXT_ENCODE.
TEXT_ENCODE(buf, encode_charset, VARCHAR2 Use the TEXT_ENCODE function to translate a
encoding)
string to a user-specified character set, and
then encode the string.
UUDECODE(r) RAW Use the UUDECODE function to translate a
uuencode encoded string to a RAW value.
UUENCODE(r, type, filename, RAW Use the UUENCODE function to translate a
permission)
RAW string to an encoded uuencode value.
3.19.1 BASE64_DECODE
Use the BASE64_DECODE function to translate a Base64 encoded string to the original
value originally encoded by BASE64_ENCODE. The signature is:
BASE64_DECODE(r IN RAW)
This function returns a RAW value.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 258
Database Compatibility for Oracle® Developers
Built-in Package Guide
Parameters
r
r is the string that contains the Base64 encoded data that will be translated to
RAW form.
Examples
Note: Before executing the following example, invoke the command:
SET bytea_output = escape;
This command instructs the server to escape any non-printable characters, and to display
BYTEA or RAW values onscreen in readable form. For more information, please refer to
the Postgres Core Documentation available at:
https://www.postgresql.org/docs/11/static/datatype-binary.html
The following example first encodes (using BASE64_ENCODE), and then decodes (using
BASE64_DECODE) a string that contains the text abc:
edb=# SELECT UTL_ENCODE.BASE64_ENCODE(CAST ('abc' AS RAW));
base64_encode
---------------
YWJj
(1 row)
edb=# SELECT UTL_ENCODE.BASE64_DECODE(CAST ('YWJj' AS RAW));
base64_decode
---------------
abc
(1 row)
3.19.2 BASE64_ENCODE
Use the BASE64_ENCODE function to translate and encode a string in Base64 format (as
described in RFC 4648). This function can be useful when composing MIME email that
you intend to send using the UTL_SMTP package. The BASE64_ENCODE function has two
signatures:
BASE64_ENCODE(r IN RAW)
and
BASE64_ENCODE(loid IN OID)
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 259
Database Compatibility for Oracle® Developers
Built-in Package Guide
This function returns a RAW value or an OID.
Parameters
r
r specifies the RAW string that will be translated to Base64.
loid
loid specifies the object ID of a large object that will be translated to Base64.
Examples
Note: Before executing the following example, invoke the command:
SET bytea_output = escape;
This command instructs the server to escape any non-printable characters, and to display
BYTEA or RAW values onscreen in readable form. For more information, please refer to
the Postgres Core Documentation available at:
https://www.postgresql.org/docs/11/static/datatype-binary.html
The following example first encodes (using BASE64_ENCODE), and then decodes (using
BASE64_DECODE) a string that contains the text abc:
edb=# SELECT UTL_ENCODE.BASE64_ENCODE(CAST ('abc' AS RAW));
base64_encode
---------------
YWJj
(1 row)
edb=# SELECT UTL_ENCODE.BASE64_DECODE(CAST ('YWJj' AS RAW));
base64_decode
---------------
abc
(1 row)
3.19.3 MIMEHEADER_DECODE
Use the MIMEHEADER_DECODE function to decode values that are encoded by the
MIMEHEADER_ENCODE function. The signature is:
MIMEHEADER_DECODE(buf IN VARCHAR2)
This function returns a VARCHAR2 value.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 260
Database Compatibility for Oracle® Developers
Built-in Package Guide
Parameters
buf
buf contains the value (encoded by MIMEHEADER_ENCODE) that will be
decoded.
Examples
The following examples use the MIMEHEADER_ENCODE and MIMEHEADER_DECODE
functions to first encode, and then decode a string:
edb=# SELECT UTL_ENCODE.MIMEHEADER_ENCODE('What is the date?') FROM DUAL;
mimeheader_encode
------------------------------
=?UTF8?Q?What is the date??=
(1 row)
edb=# SELECT UTL_ENCODE.MIMEHEADER_DECODE('=?UTF8?Q?What is the date??=')
FROM DUAL;
mimeheader_decode
-------------------
What is the date?
(1 row)
3.19.4 MIMEHEADER_ENCODE
Use the MIMEHEADER_ENCODE function to convert a string into mime header format, and
then encode the string. The signature is:
MIMEHEADER_ENCODE(buf IN VARCHAR2, encode_charset IN
VARCHAR2 DEFAULT NULL, encoding IN INTEGER DEFAULT NULL)
This function returns a VARCHAR2 value.
Parameters
buf
buf contains the string that will be formatted and encoded. The string is a
VARCHAR2 value.
encode_charset
encode_charset specifies the character set to which the string will be
converted before being formatted and encoded. The default value is NULL.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 261
Database Compatibility for Oracle® Developers
Built-in Package Guide
encoding
encoding specifies the encoding type used when encoding the string. You can
specify:
 Q to enable quoted-printable encoding. If you do not specify a value,
MIMEHEADER_ENCODE will use quoted-printable encoding.
 B to enable base-64 encoding.
Examples
The following examples use the MIMEHEADER_ENCODE and MIMEHEADER_DECODE
functions to first encode, and then decode a string:
edb=# SELECT UTL_ENCODE.MIMEHEADER_ENCODE('What is the date?') FROM DUAL;
mimeheader_encode
------------------------------
=?UTF8?Q?What is the date??=
(1 row)
edb=# SELECT UTL_ENCODE.MIMEHEADER_DECODE('=?UTF8?Q?What is the date??=')
FROM DUAL;
mimeheader_decode
-------------------
What is the date?
(1 row)
3.19.5 QUOTED_PRINTABLE_DECODE
Use the QUOTED_PRINTABLE_DECODE function to translate an encoded quoted-printable
string into a decoded RAW string.
The signature is:
QUOTED_PRINTABLE_DECODE(r IN RAW)
This function returns a RAW value.
Parameters
r
r contains the encoded string that will be decoded. The string is a RAW value,
encoded by QUOTED_PRINTABLE_ENCODE.
Examples
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 262
Database Compatibility for Oracle® Developers
Built-in Package Guide
Note: Before executing the following example, invoke the command:
SET bytea_output = escape;
This command instructs the server to escape any non-printable characters, and to display
BYTEA or RAW values onscreen in readable form. For more information, please refer to
the Postgres Core Documentation available at:
https://www.postgresql.org/docs/11/static/datatype-binary.html
The following example first encodes and then decodes a string:
edb=# SELECT UTL_ENCODE.QUOTED_PRINTABLE_ENCODE('E=mc2') FROM DUAL;
quoted_printable_encode
-------------------------
E=3Dmc2
(1 row)
edb=# SELECT UTL_ENCODE.QUOTED_PRINTABLE_DECODE('E=3Dmc2') FROM DUAL;
quoted_printable_decode
-------------------------
E=mc2
(1 row)
3.19.6 QUOTED_PRINTABLE_ENCODE
Use the QUOTED_PRINTABLE_ENCODE function to translate and encode a string in
quoted-printable format. The signature is:
QUOTED_PRINTABLE_ENCODE(r IN RAW)
This function returns a RAW value.
Parameters
r
r contains the string (a RAW value) that will be encoded in a quoted-printable
format.
Examples
Note: Before executing the following example, invoke the command:
SET bytea_output = escape;
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 263
Database Compatibility for Oracle® Developers
Built-in Package Guide
This command instructs the server to escape any non-printable characters, and to display
BYTEA or RAW values onscreen in readable form. For more information, please refer to
the Postgres Core Documentation available at:
https://www.postgresql.org/docs/11/static/datatype-binary.html
The following example first encodes and then decodes a string:
edb=# SELECT UTL_ENCODE.QUOTED_PRINTABLE_ENCODE('E=mc2') FROM DUAL;
quoted_printable_encode
-------------------------
E=3Dmc2
(1 row)
edb=# SELECT UTL_ENCODE.QUOTED_PRINTABLE_DECODE('E=3Dmc2') FROM DUAL;
quoted_printable_decode
-------------------------
E=mc2
(1 row)
3.19.7 TEXT_DECODE
Use the TEXT_DECODE function to translate and decode an encoded string to the
VARCHAR2 value that was originally encoded by the TEXT_ENCODE function. The
signature is:
TEXT_DECODE(buf IN VARCHAR2, encode_charset IN VARCHAR2
DEFAULT NULL, encoding IN PLS_INTEGER DEFAULT NULL)
This function returns a VARCHAR2 value.
Parameters
buf
buf contains the encoded string that will be translated to the original value
encoded by TEXT_ENCODE.
encode_charset
encode_charset specifies the character set to which the string will be
translated before encoding. The default value is NULL.
encoding
encoding specifies the encoding type used by TEXT_DECODE. Specify:
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 264
Database Compatibility for Oracle® Developers
Built-in Package Guide
 UTL_ENCODE.BASE64 to specify base-64 encoding.
 UTL_ENCODE.QUOTED_PRINTABLE to specify quoted printable encoding.
This is the default.
Examples
The following example uses the TEXT_ENCODE and TEXT_DECODE functions to first
encode, and then decode a string:
edb=# SELECT UTL_ENCODE.TEXT_ENCODE('What is the date?', 'BIG5',
UTL_ENCODE.BASE64) FROM DUAL;
text_encode
--------------------------
V2hhdCBpcyB0aGUgZGF0ZT8=
(1 row)
edb=# SELECT UTL_ENCODE.TEXT_DECODE('V2hhdCBpcyB0aGUgZGF0ZT8=', 'BIG5',
UTL_ENCODE.BASE64) FROM DUAL;
text_decode
-------------------
What is the date?
(1 row)
3.19.8 TEXT_ENCODE
Use the TEXT_ENCODE function to translate a string to a user-specified character set, and
then encode the string. The signature is:
TEXT_DECODE(buf IN VARCHAR2, encode_charset IN VARCHAR2
DEFAULT NULL, encoding IN PLS_INTEGER DEFAULT NULL)
This function returns a VARCHAR2 value.