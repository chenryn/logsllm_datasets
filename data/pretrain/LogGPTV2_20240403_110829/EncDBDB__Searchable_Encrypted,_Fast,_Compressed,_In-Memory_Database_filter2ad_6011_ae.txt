A. Security Evaluation
We start the security evaluation considering the enclave size
of EncDBDB. A small enclave code size improves the security,
as it reduces the probability of security-relevant implementation
errors, unintended leakages, and hidden malware. Our enclave
is written in C and besides the Intel SGX SDK (version 2.5),
has only 1129 LoC. If users receive EncDBDB’s source code,
they can efﬁciently verify the enclave as the enclave size is
small.
Even formal veriﬁcation might be possible for such a small
enclave. However, there are remaining challenges in the formal
method techniques such as dealing with C/C++ code and
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:24:56 UTC from IEEE Xplore.  Restrictions apply. 
445
stateful designs. First approaches tackle this problem [56],
[57].
For our security evaluation, we assume the attacker model
deﬁned in Section III-A. First, we use the following deﬁnition
to describe the security of ED1–ED3 and ED7–ED9:
Def. 2 (Comparable Security): We say that the security of
an encrypted dictionary is comparable to a speciﬁc security
scheme or deﬁnition if this security scheme or deﬁnition has
the smallest leakage of the schemes and deﬁnitions that leak
at least as much as the encrypted dictionary.
Table V presents a summary of this evaluation on which we
elaborate later. A detailed analysis of the different security
deﬁnitions is beyond the scope of this paper as it is highly
data-dependent, but we reference known attacks in same table.
Afterwards, we describe the security of ED4–ED6 relative
to the other encrypted dictionaries. The relation between the
security provided by the different encrypted dictionaries is
summarized in Fig. 5. Finally, we discuss rerandomization.
TABLE V: Security of ED1–ED3 and ED7–ED9.
comparable security
freq.
order
leak.
leak.
ED1 full
full
ED2 full
bounded MOPE [61]
DET [63]
ED3 full
none
ED7 none full
IND-FAOCPA [65]
ED8 none bounded IND-CPA-DS [47]
ED9 none none
RPE [69]
known
attacks
[59], [60], [62]
[59], [64]
[66], [67], [68]
[66], [67], [68]
[66], [67], [68]
ideal, determ. ORE [58] [59], [60]
≤
ED1
ED4
ED7
≤
≤
≤
≤
≤
ED2
ED5
ED8
≤
≤
≤
≤
≤
ED3
ED6
ED9
≤
Fig. 5: Relative security classiﬁcation. EDX ≤ EDY means that EDY provides
the same or better security than EDX.
ED1–ED3 and ED7–ED9. ED1’s security is comparable
to an ideal, deterministic variant of order-revealing encryp-
tion (ORE) [58]. Only a publicly known “function”—the
dictionary—reveals the value order. It is ideal as neither the
encrypted dictionary eD itself nor the values in it, which are
encrypted with authenticated encryption, leak anything but the
order. It is deterministic, as equal plaintexts have the same
ciphertext.
ED2’s security is comparable to the security of modular
OPE (MOPE) [61]. A column protected with ED2 only leaks
the “modular” order of the values. MOPE uses deterministic
OPE and ED2 uses deterministic ORE, which is more secure.
ED3’s security is comparable to deterministic encryption
(DET) [63]. It has no order leakage, but leaks the frequency
of all values.
ED7’s security is comparable to IND-FAOCPA security [65].
Each ciphertext is present exactly once in eD and if a plaintext
is encrypted multiple times, the assignment of each attribute
vector entry to a ValueID is done with the help of a “random
coin ﬂip”. Thus, the ValueIDs in eD form a randomized order
(see deﬁnition by Kerschbaum [65]) of the plaintext values.
ED8’s security is comparable to IND-CPA-DS security [47].
EncDB8 and Enc as deﬁned by Kerschbaum et al. [47] are
different, but security of the result is equal. Furthermore,
DSearch8 matches Search as deﬁned by Kerschbaum et al. [47].
Therefore, the leakage during processing is equal.
ED9’s security is comparable to the security of Range
Predicate Encryption (RPE) [69]. As deﬁned by RPE’s plaintext
privacy, DSearch9 and ASearch9 only leak the information that
an entry falls into the search range. The “predicates” of ED9 are
plaintexts encrypted with AE, which provides RPE’s predicate
privacy.
ED4–ED6. The frequency smoothing algorithm used by ED4
makes the ciphertext frequencies close to uniform by randomly
selecting a frequency between 1 and bsmax, independent of
the plaintext frequency. As ED1 fully leaks the ciphertext
frequency and ED7 hides it completely, the security of ED4
lies between the security of ED1 and ED7. ED5 is more secure
than ED2 and is less secure than ED8 for the same reason. The
same is true for the triple ED6, ED3 and ED9. The frequency
smoothing algorithm is based on an algorithm described in [48]
and the authors only state that the last frequency is not selected
from the same distribution, which might give an advantage to
an attacker. An in-depth security evaluation is an open research
question.
Rerandomization. According to the data owner’s sensitivity
requirements, EncDBDB can use the TEE to repeat the random
rotation for ED3–ED6, the random shufﬂe for ED7–ED9, and
the random experiment for ED2, ED5, and ED8, at arbitrary
points in time. Using oblivious memory primitives [53], [54],
the relation between old and new encryptions is hidden.
B. Storage Evaluation
For our storage evaluation, we use a snapshot of a real-
world customer’s business warehouse (BW) system. The largest
columns contain 168.7 million rows. To evaluate the inﬂuence
of the number of unique values to our algorithms, we search
for columns having the same size, but different distributions.
The dataset contains 30 large columns with 10.9 million rows.
We present the results for two extreme cases: C1 with 6.96
million unique values and C2 with 13,361.
Table VI presents the storage space requirements of different
variants. The plaintext ﬁle contains all plaintext values present
in the column without any compression. The encrypted ﬁle
contains every value from the plaintext ﬁle, but individually
encrypted with AE, which has the same storage requirements as
an encrypted column without dictionary encoding. MonetDB’s
storage requirements are presented as a baseline.
TABLE VI: Storage size of various variants.
size C1
size C2
Plaintext ﬁle
93 MB
Encrypted ﬁle
392 MB
43 MB*
MonetDB
ED1/ED2/ED3
22 MB
ED4/ED5/ED6, bsmax = 100
56 MB
ED4/ED5/ED6, bsmax = 10
123 MB
ED7/ED8/ED9
475 MB
*Recall that MonetDB reduces some but not all duplicates
(see Section V).
136 MB
437 MB
132 MB
347 MB
347 MB
367 MB
515 MB
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:24:56 UTC from IEEE Xplore.  Restrictions apply. 
446
The size of the plaintext ﬁles decreases from C1 to C2, because
the strings in these columns are 12 and 10 characters long,
respectively. As expected, we see that EncDBDB requires less
space if fewer unique values are present. We see that for C2
protected with ED1, ED2, or ED3, EncDBDB requires less
storage space than the plaintext ﬁle, i.e., less space than a
plaintext column without dictionary encoding. We also see
a further expected behavior: a smaller bsmax increases the
required storage space as more duplicates are stored.
Note that the encrypted values are stored outside of the
enclave and individual values are loaded into the enclave
and decrypted. Hence, the restricted enclave space does not
constitute a limitation for EncDBDB.
C. Performance Evaluation
For the performance evaluation, we use the same columns
introduced in the storage evaluation. Besides the original
columns, which we call full datasets, we sample datasets from
1 to 10 million records using the distribution and values of
the original columns. Note that a performance comparison to
related work is given in Table I.
MonetDB is used as one baseline measurement in our ex-
periments to compare ourselves against a commercial plaintext
DBMS. Additionally, we implement PlainDBDB—a plaintext
variant of EncDBDB. PlainDBDB uses the same algorithms as
EncDBDB, but the dictionaries are plaintext and the algorithms
are processed without an enclave. We use PlainDBDB as
a second baseline to evaluate the performance overhead of
encryption and SGX.
All experiments are performed with the conﬁdential com-
puting offering of Microsoft Azure. We use a DC4s machine
with 16 GiB RAM and 4 vCPU cores of an Intel Xeon E-
2176G CPU @ 3.70GHz. All presented latencies measure the
processing time spent at the server excluding any network
delay or processing at the proxy or client. Our protocol runs in
one round and only encrypts the values in the query. Thus, the
communication and latency overhead compared to any database
in the cloud is negligible.
We use the term range size (RS) to describe how many
consecutive unique values from the dataset are searched in a
range query, i.e., if sorted(un(C)) = (v0, . . . , v|un(C)|−1) is
a sorted list of all unique values in C, then RS deﬁnes the
search range R = [vi, vi+RS−1] for i ∈ [0,|un(C)| − RS].
For every dataset and encrypted dictionary, we perform 500
random range queries with range sizes 2 and 100. The same
random range queries are executed for MonetDB, PlainDBDB,
and EncDBDB. Note that the number of result rows returned
by the server is greater than RS if a value in the search range
is present multiple times in the column. For instance, 65,067
values are returned on average for the full dataset of C2 and
RS = 100. EncDBDB obviously supports multi-attribute range
queries, but we use single-attribute queries to highlight the
difference of the encrypted dictionaries.
ED1. The ﬁrst and fourth column in Fig. 6 present
the
latencies of ED1 for C1 and C2 and the range sizes 2
and 100. We highlight three observations from these plots.
First, EncDBDB and PlainDBDB outperform MonetDB for
both range sizes at both columns. The main reason is that
MonetDB’s attribute vector search performs a linear number
of string comparisons. In contrast, EncDBDB and PlainDBDB
require only a logarithmic number of string comparisons in the
dictionary search and a linear number of integer comparisons
in the attribute vector search. Second, EncDBDB slows down if
a column with equal size has fewer unique values: the average
latencies increase from 6.55 ms at C1 to 8.79 ms at C2 for
the full dataset and RS = 100. This seems counterintuitive,
because fewer unique values result in a smaller dictionary size
|D| improving the dictionary search performance. However,
only logarithmically fewer decryptions and string comparisons
are necessary in the dictionary search, but many results are
returned by the attribute vector search. As a result, the DBMS
has to spend more time for tuple reconstruction, i.e., to build
the result set based on the found RecordIDs and the dictionary.
Third, encryption is cheap: the average latency overhead of
EncDBDB compared to PlainDBDB is 0.36 ms (8.9 %). The
overhead is minor for two reasons: (1) as explained in Section V,
only one context switch per column is required, which is
negligible in the overall latency and (2) hardware-supported
AES-GCM encryption is used.
ED2. The second and ﬁfth column in Fig. 6 present the latencies
of ED2. The main observation is that the latency of EncDBDB
and PlainDBDB is almost equal to the latency of ED1 for the
two columns. The only difference between ED1 and ED2 is
that ED2 uses a special binary search and post-processing of
the resulting ValueIDs to handle the random rotation, which
introduces only a minor overhead. In fact, the average latency
overhead from ED1 to ED2 is 1.88 ms for EncDBDB.
ED3. The third and sixth column in Fig. 6 show the latencies
of ED3. We observe that the average latencies of PlainDBDB
and EncDBDB, and their relative latency differences, severely
depend on the number of unique values and the range size
RS. As ED3 performs a linear dictionary search, the average
latency of the query execution severely depends on |D|, which
is far ar larger for C1 compared to C2. Additionally, a larger
|D| increases the number of necessary decryptions for Enc-
DBDB and therefore the relative latency difference between
PlainDBDB and EncDBDB.
ED4, ED5, ED6. Due to space constraints, we can only present
plots for ED4–ED6 in the extended version of this paper. The
latencies of MonetDB obviously do not change and the relative
latency differences between EncDBDB and PlainDBDB are
comparable to the observations before. Here, we focus on
EncDBDB discussing the latencies for ED4–ED6 compared to
ED1–ED3. |D| is larger for ED4–ED6, because the frequency
smoothing algorithm adds duplicates to D (bsmax = 10 in our
experiments). For ED4 and ED5, |D| inﬂuences the latency
only logarithmically. Compared to ED1 and ED2, the average
overheads are only 0.002 ms and 0.11 ms, respectively. At ED6,
the dictionary search might return more than x ValueIDs for
the range size x as eD contains duplicate plaintexts. Every
returned value has to be compared to each attribute vector
entry. This increases the average latencies for the full dataset
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:24:56 UTC from IEEE Xplore.  Restrictions apply. 
447
C1
C2
Fig. 6: Average latencies of 500 random range queries for columns C1 and C2, which are protected by ED1–ED3 (x-axis scale is 107; 95% conﬁdence interval
too small to be visible).
at RS = 100 to 3.59 s and 10.64 s for C1 and C2.
ED7, ED8, ED9. For the same reason as for ED4–ED6, we
only compare EncDBDB’s latency of ED7–ED9 with ED1–
ED3. Compared to ED1 and ED2, the average overheads of
ED7 and ED8 are 0.01 ms and 0.23 ms, respectively. For the
full dataset at RS = 100, the average latencies of ED9 increase
to 5.43 s and 60.82 s for C1 and C2, respectively.
VII. RELATED WORK
TEE-based, encrypted databases. In the following, we
outline TEE-based approaches ranging from large to small
enclave sizes, and classify EncDBDB accordingly.
Haven [8] and SCONE [70] shield entire applications in an
untrusted environment using SGX, which could also be an off-
the-shelf DBMS. STANLite [71] uses the same idea to protect
SQLite. However, a complete DBMS with hundred thousands
to millions of LoC is prone to security-relevant implementation
errors. Preventing side channels and other SGX exploits is hard
if the enclave size is large or if the enclave contains (legacy)
code that was not designed for an enclave.
EnclaveDB [9] is a protected database engine that uses a
TEE to provide conﬁdentiality, integrity, and freshness for
OLTP workloads. The approach has a large TCB, as the tables,
indices, metadata, query engine, transaction manager, and stored
procedures are loaded into the TEE. The problems described for
Haven and SCONE are only slightly less severe. Furthermore,
all possible queries have to be known in advance.
ObliDB [6] is an SGX-based, encrypted database that hides
the access pattern using oblivious query processing algorithms
on a B+-tree index or a linear array. The additional protection
introduces a latency overhead of 200% compared to a plaintext
database. Additionally, ObliDB lacks transaction management
and disk persistency.
HardIDX [72] uses SGX to protect one speciﬁc data structure,
a B+-tree. Equality and range searches are done inside the
enclave and either the whole dataset at once or parts on demand
are loaded into enclave memory. However, a B+-tree is only