title:Interactive Visualization for Network and Port Scan Detection
author:Chris Muelder and
Kwan-Liu Ma and
Tony Bartoletti
Interactive Visualization for
Network and Port Scan Detection
Chris Muelder1, Kwan-Liu Ma1, and Tony Bartoletti2
1 University of California, Davis
2 Lawrence Livermore National Laboratory
Abstract. Many times, network intrusion attempts begin with either
a network scan, where a connection is attempted to every possible des-
tination in a network, or a port scan, where a connection is attempted
to each port on a given destination. Being able to detect such scans can
help identify a more dangerous threat to a network. Several techniques
exist to automatically detect scans, but these are mostly dependant on
some threshold that an attacker could possibly avoid crossing. This pa-
per presents a means to use visualization to detect scans interactively.
Keywords: Network security, information visualization, intrusion detec-
tion, user interfaces, port scans, network scans.
1 Introduction
Network scans and port scans are often used by analysts to search their networks
for possible security hazards in order to ﬁx them. Unfortunately, these same
hazards are exactly what an attacker is also interested in ﬁnding so that they
can be exploited. Therefore, scanning the computers on a target network or the
ports of a target computer are very common ﬁrst steps in a network intrusion
attempt. In fact, any network exposed to the Internet is likely to be regularly
scanned and attacked by both automated and manual means [13]. Also, many
Internet worms exhibit scan-like behavior, and so for the purposes of detection
can be treated similarly [16]. Thus, it is in the best interests of network analysts
to be able to detect such scans in order to learn where an attack might be coming
from or to enable countermeasures such as a honeypot system.
Also, it is possible to take an attacker’s attempt to gain information about a
network through a scan and use it to gain information about the attacker. That
is, a scan can be analyzed in order to identify features of an attacker, such as the
attacker’s operating system, the scanning tool being used, or the attacker’s par-
ticular hardware. Timing information can even be used to analyze routing delays
which can reveal the attacker’s actual location in cases of IP address spooﬁng
[14]. Thus, it is also beneﬁcial to detect scans for counterintelligence purposes.
Previous research has been done in ﬁnding ways to automatically detect net-
work and port scans. These methods usually involve distinguishing between an
attacker and a normal user by checking to see if the traﬃc meets some criteria.
A. Valdes and D. Zamboni (Eds.): RAID 2005, LNCS 3858, pp. 265–283, 2006.
c(cid:1) Springer-Verlag Berlin Heidelberg 2006
266
C. Muelder, K.-L. Ma, and T. Bartoletti
However, it is usually possible for an attacker to avoid detection by avoiding
meeting the criteria in question. The simplest kind of detection system is to des-
ignate a tripwire port or IP address, such that if there is any traﬃc to that port
or IP address, the traﬃc is designated as a port or network scan respectively.
However, this method is essentially just security through obscurity. If an attacker
can determine what port or system is being used as a tripwire, it is a relatively
simple task to just avoid connecting to that port or system. One of the most
common scan detection methods, however, is based on timing thresholds [6]. If
traﬃc from a particular source meets some threshold of connections per unit
time to diﬀerent ports or systems then it is classiﬁed as a scan, otherwise it is
classiﬁed as normal traﬃc. The diﬃculty with this method is that if the thresh-
old is too low, then normal traﬃc can be determined to be a scan, and if the
threshold is too high, then scans could be classiﬁed as normal traﬃc. Therefore,
if an attacker runs a scan slowly enough to be classiﬁed as normal traﬃc, then
it would go undetected entirely.
Visualization provides an alternate approach to solving this problem. Many
attempts have been made to ease the detection of interesting information in the
logs, using both traditional information visualization mechanisms like parallel
coordinates, self-organizing maps, and multi-dimensional scaling, and novel vi-
sualization mechanisms designed speciﬁcally for this task [4, 3]. Instead of work-
ing with the low level timing information for every packet, however, one can
summarize the data and display it for the user to look for patterns. Because it
requires human interaction, this is a somewhat more time consuming method
and would not be very useful when a quick response time is necessary. However,
it provides a high level view of the data, from which patterns such as network or
port scans should be easily visible. Visualization also provides a means to detect
new and interesting patterns in the information that could be missed by auto-
mated rules. From these patterns, new rules can be deﬁned in order to improve
the automated methods. This allows an analyst to iteratively reﬁne the rule set,
and with each cycle the detection improves.
We have developed eﬀective visualization representations and interaction tech-
niques within a uniﬁed system design to address the challenges presented by the
complexity and dimension of the traﬃc information that must be routinely ex-
amined. In our study, the (sanitized) traﬃc data are provided by the Computer
Incident Advisory Capability group at the Lawrence Livermore National Labo-
ratory (LLNL).
2 Related Work
This overall method of creating an image of network traﬃc is not wholly new.
SeeNet [1] uses an abstract representation of network destinations and displays
a colored grid. Each point on the grid represents the level of traﬃc between the
entity corresponding to the point’s x value and the entity corresponding to the
point’s y value. NVisionIP [8] uses network ﬂow traﬃc and axes that correspond
to IP addresses; each point on the grid represents the interaction between the
Interactive Visualization for Network and Port Scan Detection
267
corresponding network hosts. The points can represent changes in activity in
addition to raw activity. In [17], a quadtree coding of IP addresses is used to form
a grid; Border Gateway Protocol (BGP) data is visualized as colored quadtree
cells and connections between points on the quadtree. The Spinning Cube of
Potential Doom [9] is a visualization system that uses two IP address axes and a
port number axis to display network activity in a colorful, 3-dimensional cube.
The combination makes attacks like port scans very clear; attacks that vary over
the IP address space and port number produce interesting visuals (one method
of attack, for instance, produces a “barber pole” ﬁgure). In [14], scans of class B
networks are visualized by using the third and fourth octets of the destination
IP addresses as the x and y axes in a grid, and coloring these points based on
metrics derived from connection times.
PortVis [11] is a system designed to take very coarsely detailed data—basic,
summarized information of the activity on each TCP port during each given
time period—and uses visualization to help uncover interesting security events.
Similar to the other related works, the primary methods of visualization used
by PortVis are to display network traﬃc by choosing axes that correspond to
important features of the data (such as time and port number), creating a grid
based on these axes, and then ﬁlling each cell of the grid with a color that
represents the network activity there. However, all the other related works work
with the low level data itself, so they can not scale as large as easily as a system
like PortVis that works with summarized information.
This paper presents the design of a port-based visualization system and a
set of case studies to demonstrate how the visualization directed approach im-
plemented eﬀectively helps identify and understand network scans. Our designs
were made according to the lessons we learned from building and using PortVis
[11]. This new system oﬀers analysts a suite of carefully integrated capabilities
with an interactive interface to interrogate port data at diﬀerent levels of details.
This paper also serves to suggest some general guidelines to those who intend to
incorporate visualization into their IDS.
3 A Port Based Visualization System
We have developed a portable system, written in C++ with OpenGL and a
GLUT based widget toolkit, that takes general, summarized network data and
presents multiple, meaningful perspectives of the data. The resulting visual-
ization often leads to useful insights concerning network activities. The system
design was tailored to eﬀective detection and better understanding of a variety of
port and network scans. However, the system is also capable of detecting other
large-scale and small-scale network security events while requiring a minimal
amount of data and remaining interactive and intuitive to use.
It is port based, so it should be able to permit analysts to discover the presence
of any network security event that causes signiﬁcant changes in the activity on
ports. Since it uses very high-level data, it is a very high-level tool, and is useful
mostly for uncovering high-level security events. Security events that consist of
268
C. Muelder, K.-L. Ma, and T. Bartoletti
small details—an intrusion that includes only a few connections, for instance—
are unlikely to be caught using these methods.
Since information about the network’s size, structure, and other important
attributes may be sensitive, it is expedient to look at visualizations that permit
network security events to be detected without the use of those attributes. The
system was designed to use a very minimal set of aggregate attributes that reveals
a minimal amount of information about the network. Since the data consists
of only counts of activities (rather than records of the activities themselves),
analysis can only go so far. It can identify scans and other suspicious traﬃc
patterns, but it cannot see the traﬃc that caused the patterns. This is still useful,
however; analysts using it can send the suspicious traﬃc signatures to analysts
that have access to the full set of network traﬃc logs. Also, sometimes the original
logs contain information that can not be distributed due to sensitivity concerns
or the potential for violation privacy laws. But even if the original traﬃc logs
are sensitive, and can not be disseminated, the summarized data is likely not
sensitive and can be distributed and analyzed by third parties.
In addition to mitigating security concerns, using aggregate data results in
an immense reduction in storage and transmission requirements. Storing and
transmitting detailed data about network activity can be challenging or even
impossible for non-trivial periods of time, but if the data is simply aggregated
and only the aggregate values are used, these values can be stored and trans-
mitted much more eﬃciently and cheaply, resulting in higher interactivity and
explorability of the system.
3.1 Methodology
When dealing with large datasets, often times there is too much data to ﬁt into
one view. So visualization methods often employ multiple semantic levels in or-
der to be able to present both high-level patterns and low-level details. Then, the
user can drill down from higher levels to lower levels to gain insight about inter-
esting patterns in the higher levels. Conversely, the user can gain insights from
interesting patterns found in the lower level detailed views that should be con-
ﬁrmed with higher level views. Thus, each level provides contextual information
about the other levels. So it is beneﬁcial to present them all simultaneously to the
users, so they can switch between semantic levels without losing context. Also,
this improves the speed at which the user can switch between the semantic levels,
because the only work involved is a glance to a diﬀerent region of the screen.
Our system uses three basic semantic levels: a high-level overview that shows
the entire dataset at low resolution, a mid-level view that shows all ports at one
point in time, and a low-level detailed view that shows an individual port over all
metrics for the whole time range of the dataset. In general, the methodology of
visualization used in this system starts at a high semantic level then drills down
into regions of interest. For example, an analyst might start with a high-level
timeline view of the dataset and notice a pattern that could be indicative of a
scan at a particular time. Then the analyst would likely proceed to view just this
time with more detail in the mid-level view that shows all ports. Finally, one
Interactive Visualization for Network and Port Scan Detection
269
particular port or range of ports could stand out and warrant investigation with
the low-level view. In order to make this drilling down process more intuitive,
the views have been laid out from left to right, such that each view represents a
progressively lower semantic level.
At each level, several visualizations are used, because they are useful at de-
tecting diﬀerent kinds of patterns. For instance, it is possible that there is an in-
teresting pattern in the high-level view does not show up in the current mid-level
view. Conversely, one might ﬁnd a pattern in a lower level that is not apparent
in a current higher level view. So, it is beneﬁcial to allow the user to switch
particular views to ones that a pattern of interest does show up in. But while
there are one or more diﬀerent visualizations employed per level, usually only
one is used at a time per level. This insures that the contexts between semantic
levels are preserved, while not overloading the user with too many views at once.
3.2 System Components and Interface
There are three main semantic levels: the timeline, the time instant, and the
port. Each has its own visualizations. As can be seen in Figure 1, all the seman-
tic levels are present simultaneously, so it is easy to correlate data and men-
tally shift between visualizations. Visualization generally begins at the timeline
(1), followed by a time instant (grid or scatterplot) visualization (2). The grid
visualization contains a circle, which helps users locate the magniﬁcation square
in its center. Magniﬁcations from the square within the main visualization are
shown in (3); a port may be selected from (3) to get the port activity display in
Fig. 1. The entire application. The layout of components from left to right is made
according to a drill-down process of visual interrogation.
270
C. Muelder, K.-L. Ma, and T. Bartoletti
(4). Several parameters (5) control the appearance of the main display and port
displays. The panel of options in (6) permits the selection of a data source to
display, and oﬀers a color-picker for selecting new colors for gradients.
The Timeline Visualization. The timeline is a visualization of the entire
time range available. It shows a compressed 2D view, which has several elements.
The vertical axis corresponds to time. Each row of the visualization represents
one unit of time. The top row is the earliest time unit for which there is data;
the bottom row is the latest time unit for which there is data. The horizontal
axis corresponds to port range. Each row consists of 32 columns, each of which
represents 65, 536 ÷ 32 = 2, 048 ports. The leftmost column corresponds to the
ﬁrst 2,048 ports, the next column to the right corresponds to the next 2,048
ports, and so forth. The color of the column is determined by the level of activity
on the ports during the time unit. The selector (the red box) corresponds to
the currently selected time. This is the time unit that is displayed on the grid
visualization panel.
The histogram near the bottom corresponds to the relative frequencies of each
activity level over the entire range of time. “Activity level” here means “number
of sessions.” Therefore, if a very large number of ports have the same activity
level, there will be a spike in the histogram at that activity level. The goal of the
histogram is to provide information on activity levels so that they can be usefully
mapped to colors. Note that all of the analyses of activity levels in the timeline
window are done on a log scale; this is necessary because there are generally
several ports with very high levels of activity (for instance, port 80), and these
would irreparably skew a normal scale.
Finally, the gradient editor below the histogram corresponds to the mapping