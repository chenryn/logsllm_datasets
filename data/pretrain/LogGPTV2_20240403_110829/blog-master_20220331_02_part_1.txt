## PostgreSQL 15 preview - jsonb 增加SQL/JSON 函数, 支持 jsonpath 表达式的执行  
### 作者                              
digoal                              
### 日期                              
2022-03-31                             
### 标签                              
PostgreSQL , SQL/JSON , jsonpath        
----                              
## 背景     
PostgreSQL 新增支持 SQL/JSON query functions ,支持 jsonpath 表达式的执行  
https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=1a36bc9dba8eae90963a586d37b6457b32b2fed4  
```  
SQL/JSON query functions  
This introduces the SQL/JSON functions for querying JSON data using  
jsonpath expressions. The functions are:  
JSON_EXISTS()  
JSON_QUERY()  
JSON_VALUE()  
All of these functions only operate on jsonb. The workaround for now is  
to cast the argument to jsonb.  
JSON_EXISTS() tests if the jsonpath expression applied to the jsonb  
value yields any values. JSON_VALUE() must return a single value, and an  
error occurs if it tries to return multiple values. JSON_QUERY() must  
return a json object or array, and there are various WRAPPER options for  
handling scalar or multi-value results. Both these functions have  
options for handling EMPTY and ERROR conditions.  
Nikita Glukhov  
Reviewers have included (in no particular order) Andres Freund, Alexander  
Korotkov, Pavel Stehule, Andrew Alsup, Erik Rijkers, Zihong Yu,  
Himanshu Upadhyaya, Daniel Gustafsson, Justin Pryzby.  
Discussion: https://postgr.es/m/PI:EMAIL  
```  
用法举例  
https://git.postgresql.org/gitweb/?p=postgresql.git;a=blob;f=src/test/regress/expected/jsonb_sqljson.out;h=1126d7caf554c8dd053333ac153c4bf398c0293c;hb=1a36bc9dba8eae90963a586d37b6457b32b2fed4  
```  
-- JSON_EXISTS  
SELECT JSON_EXISTS(NULL::jsonb, '$');  
 json_exists   
-------------  
(1 row)  
SELECT JSON_EXISTS(jsonb '[]', '$');  
 json_exists   
-------------  
 t  
(1 row)  
SELECT JSON_EXISTS(JSON_OBJECT(RETURNING jsonb), '$');  
 json_exists   
-------------  
 t  
(1 row)  
SELECT JSON_EXISTS(jsonb '1', '$');  
 json_exists   
-------------  
 t  
(1 row)  
SELECT JSON_EXISTS(jsonb 'null', '$');  
 json_exists   
-------------  
 t  
(1 row)  
SELECT JSON_EXISTS(jsonb '[]', '$');  
 json_exists   
-------------  
 t  
(1 row)  
SELECT JSON_EXISTS(jsonb '1', '$.a');  
 json_exists   
-------------  
 f  
(1 row)  
SELECT JSON_EXISTS(jsonb '1', 'strict $.a');  
 json_exists   
-------------  
 f  
(1 row)  
SELECT JSON_EXISTS(jsonb '1', 'strict $.a' ERROR ON ERROR);  
ERROR:  jsonpath member accessor can only be applied to an object  
SELECT JSON_EXISTS(jsonb 'null', '$.a');  
 json_exists   
-------------  
 f  
(1 row)  
SELECT JSON_EXISTS(jsonb '[]', '$.a');  
 json_exists   
-------------  
 f  
(1 row)  
SELECT JSON_EXISTS(jsonb '[1, "aaa", {"a": 1}]', 'strict $.a');  
 json_exists   
-------------  
 f  
(1 row)  
SELECT JSON_EXISTS(jsonb '[1, "aaa", {"a": 1}]', 'lax $.a');  
 json_exists   
-------------  
 t  
(1 row)  
SELECT JSON_EXISTS(jsonb '{}', '$.a');  
 json_exists   
-------------  
 f  
(1 row)  
SELECT JSON_EXISTS(jsonb '{"b": 1, "a": 2}', '$.a');  
 json_exists   
-------------  
 t  
(1 row)  
SELECT JSON_EXISTS(jsonb '1', '$.a.b');  
 json_exists   
-------------  
 f  
(1 row)  
SELECT JSON_EXISTS(jsonb '{"a": {"b": 1}}', '$.a.b');  
 json_exists   
-------------  
 t  
(1 row)  
SELECT JSON_EXISTS(jsonb '{"a": 1, "b": 2}', '$.a.b');  
 json_exists   
-------------  
 f  
(1 row)  
SELECT JSON_EXISTS(jsonb '{"a": 1, "b": 2}', '$.* ? (@ > $x)' PASSING 1 AS x);  
 json_exists   
-------------  
 t  
(1 row)  
SELECT JSON_EXISTS(jsonb '{"a": 1, "b": 2}', '$.* ? (@ > $x)' PASSING '1' AS x);  
 json_exists   
-------------  
 f  
(1 row)  
SELECT JSON_EXISTS(jsonb '{"a": 1, "b": 2}', '$.* ? (@ > $x && @  $x && @  2');  
 json_exists   
-------------  
 t  
(1 row)  
SELECT JSON_EXISTS(jsonb '1', '$.a > 2' ERROR ON ERROR);  
 json_exists   
-------------  
 t  
(1 row)  
-- extension: RETURNING clause  
SELECT JSON_EXISTS(jsonb '1', '$[0]' RETURNING bool);  
 json_exists   
-------------  
 t  
(1 row)  
SELECT JSON_EXISTS(jsonb '1', '$[1]' RETURNING bool);  
 json_exists   
-------------  
 f  
(1 row)  
SELECT JSON_EXISTS(jsonb '1', '$[0]' RETURNING int);  
 json_exists   
-------------  
           1  
(1 row)  
SELECT JSON_EXISTS(jsonb '1', '$[1]' RETURNING int);  
 json_exists   
-------------  
           0  
(1 row)  
SELECT JSON_EXISTS(jsonb '1', '$[0]' RETURNING text);  
 json_exists   
-------------  
 true  
(1 row)  
SELECT JSON_EXISTS(jsonb '1', '$[1]' RETURNING text);  
 json_exists   
-------------  
 false  
(1 row)  
SELECT JSON_EXISTS(jsonb '1', 'strict $[1]' RETURNING text FALSE ON ERROR);  
 json_exists   
-------------  
 false  
(1 row)  
SELECT JSON_EXISTS(jsonb '1', '$[0]' RETURNING jsonb);  
ERROR:  cannot cast type boolean to jsonb  
LINE 1: SELECT JSON_EXISTS(jsonb '1', '$[0]' RETURNING jsonb);  
               ^  
SELECT JSON_EXISTS(jsonb '1', '$[0]' RETURNING float4);  
ERROR:  cannot cast type boolean to real  
LINE 1: SELECT JSON_EXISTS(jsonb '1', '$[0]' RETURNING float4);  
               ^  
-- JSON_VALUE  
SELECT JSON_VALUE(NULL::jsonb, '$');  
 json_value   
------------  
(1 row)  
SELECT JSON_VALUE(jsonb 'null', '$');  
 json_value   
------------  
(1 row)  
SELECT JSON_VALUE(jsonb 'null', '$' RETURNING int);  
 json_value   
------------  
(1 row)  
SELECT JSON_VALUE(jsonb 'true', '$');  
 json_value   
------------  
 true  
(1 row)  
SELECT JSON_VALUE(jsonb 'true', '$' RETURNING bool);  
 json_value   
------------  
 t  
(1 row)  
SELECT JSON_VALUE(jsonb '123', '$');  
 json_value   
------------  
 123  
(1 row)  
SELECT JSON_VALUE(jsonb '123', '$' RETURNING int) + 234;  
 ?column?   
----------  
      357  
(1 row)  
SELECT JSON_VALUE(jsonb '123', '$' RETURNING text);  
 json_value   
------------  
 123  
(1 row)  
/* jsonb bytea ??? */  
SELECT JSON_VALUE(jsonb '123', '$' RETURNING bytea ERROR ON ERROR);  
ERROR:  SQL/JSON item cannot be cast to target type  
SELECT JSON_VALUE(jsonb '1.23', '$');  
 json_value   
------------  
 1.23  
(1 row)  
SELECT JSON_VALUE(jsonb '1.23', '$' RETURNING int);  
 json_value   
------------  
          1  
(1 row)  
SELECT JSON_VALUE(jsonb '"1.23"', '$' RETURNING numeric);  
 json_value   
------------  
       1.23  
(1 row)  
SELECT JSON_VALUE(jsonb '"1.23"', '$' RETURNING int ERROR ON ERROR);  
ERROR:  invalid input syntax for type integer: "1.23"  
SELECT JSON_VALUE(jsonb '"aaa"', '$');  
 json_value   
------------  
 aaa  
(1 row)  
SELECT JSON_VALUE(jsonb '"aaa"', '$' RETURNING text);  
 json_value   
------------  
 aaa  
(1 row)  
SELECT JSON_VALUE(jsonb '"aaa"', '$' RETURNING char(5));  
 json_value   
------------  
 aaa    
(1 row)  
SELECT JSON_VALUE(jsonb '"aaa"', '$' RETURNING char(2));  
 json_value   
------------  
 aa  
(1 row)  
SELECT JSON_VALUE(jsonb '"aaa"', '$' RETURNING json);  
 json_value   
------------  
 "aaa"  
(1 row)  
SELECT JSON_VALUE(jsonb '"aaa"', '$' RETURNING jsonb);  
 json_value   
------------  
 "aaa"  
(1 row)  
SELECT JSON_VALUE(jsonb '"aaa"', '$' RETURNING json ERROR ON ERROR);  
 json_value   
------------  
 "aaa"  
(1 row)  
SELECT JSON_VALUE(jsonb '"aaa"', '$' RETURNING jsonb ERROR ON ERROR);  
 json_value   
------------  
 "aaa"  
(1 row)  