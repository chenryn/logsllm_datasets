print 
printf 
Welcome back, {$html['username']}."; 
?> 
小提示 
htmlspecialchars( )函数与 htmlentities( )函数基本相同，它们的参数定义完全
相同，只不过是 htmlentities( )的转义更为彻底。 
通过$html['username']把 username 输出到客户端，你就可以确保其中的特殊
字符不会被浏览器所错误解释。如果 username 只包含字母和数字的话，实际上
转义是没有必要的，但是这体现了深度防范的原则。转义任何的输出是一个非常
好的习惯，它可以戏剧性地提高你的软件的安全性。 
另外一个常见的输出目标是数据库。如果可能的话，你需要对 SQL 语句中
的数据使用 PHP 内建函数进行转义。对于 MySQL 用户，最好的转义函数是
《PHP 安全基础详解》        www.528163.cn 提供 
mysql_real_escape_string( )。如果你使用的数据库没有 PHP 内建转义函数可用的
话，addslashes( )是最后的选择。 
下面的例子说明了对于 MySQL 数据库的正确的转义技巧：  
第二章
第二章
第二章
第二章 表单及
表单及
表单及
表单及 URL 
本章主要讨论表单处理，同时还有在处理来自表单和 URL 数据时需要加以
注意的最常见的攻击类型。你可以学到例如跨站脚本攻击（XSS）及跨站请求伪
造（CSRF）等攻击方式，同时还能学到如何手工制作欺骗表单及 HTTP 请求。 
通过本章的学习，你不仅可以看到这些攻击方法的实例，而且可以学到防范
它们的方法。 
小提示 
跨站脚本攻击漏洞的产生主要是由于你误用了被污染的数据。虽说大多数应
用的主要输入源是用户，但任何一个远程实体都可以向你的软件输入恶意数据。
本章中所描述的多数方法直接适于用于处理任何一个远程实体的输入，而不仅仅
是用户。关于输入的过滤详见第一章。 
2.1. 表单与数据
表单与数据
表单与数据
表单与数据 
在典型的 PHP 应用开发中，大多数的逻辑涉及数据处理任务，例如确认用
户是否成功登录，在购物车中加入商品及处理信用卡交易。 
数据可能有无数的来源，做为一个有安全意识的开发者，你需要简单可靠地
区分两类数据： 
l 已过滤数据 
l 被污染数据 
《PHP 安全基础详解》        www.528163.cn 提供 
所有你自己设定的数据可信数据，可以认为是已过滤数据。一个你自己设定
的数据是任何的硬编码数据，例如下面的 email 地址数据： 
$email = 'PI:EMAIL'; 
上面的 Email 地址 PI:EMAIL 并不来自任何远程数据源。显而易见
它是可信的。任何来自远程数据源的数据都是输入，而所有的输入数据都是被污
染的，必须在要在使用前对其进行过滤。 
被污染数据是指所有不能保证合法的数据，例如用户提交的表单，从邮件服
务器接收的邮件，及其它 web 应用中发送过来的 xml 文档。在前一个例子中，
$email 是一个包含有已过滤数据的变量。数据是关键，而不是变量。变量只是数
据的容器，它往往随着程序的执行而为被污染数据所覆盖： 
$email = $_POST['email']; 
当然，这就是$email 叫做变量的原因，如果你不希望数据进行变化，可以使
用常量来代替： 
define('EMAIL', 'PI:EMAIL'); 
如果用上面的语句进行定义，EMAIL 在整个脚本运行中是一个值为
PI:EMAIL 的不变的常量，甚至在你把试图把它重新赋值时也不会改变
（通常是不小心）。例如，下面的代码输出为 PI:EMAIL (试图重定义一
个常量会引起一个级别为 Notice 的报错信息)。 
小提示 
欲更多了解常量, 请访问 http://php.net/constants. 
正如第一章中所讨论过的，register_globals 可使确定一个变量如$email 的来
源变得十分困难。所有来自外部数据源的数据在被证明合法前都应该被认为被污
染的。 
尽管一个用户能用多种方式发送数据，大多数应用还是依据表单的提交结果
进行最重要的操作。另外一个攻击者只要通过操纵提交数据（你的应用进行操作
《PHP 安全基础详解》        www.528163.cn 提供 
的依据）即可危害，而表单向他们方便地开放了你的应用的设计方案及你需要使
用的数据。这也是表单处理是所有 Web 应用安全问题中的首先要关心的问题的
原因。 
一个用户可以通过三种方式您的应用传输数据： 
l 通过 URL(如 GET 数据方式) 
l 通过一个请求的内容（如 POST 数据方式） 
l 通过 HTTP 头部信息（如 Cookie） 
由于 HTTP 头部信息并不与表单处理直接相关，在本章中不作讨论。通常，
对 GET 与 POST 数据的怀疑可以推及到所有输入，包括 HTTP 头部信息。 
表单通过 GET 或 POST 请求方式传送数据。当你建立了一个 HTML 表单，
你需要在 form 标签的 method 属性中指定请求方式： 
在前例中，请求方式被指定为 GET，浏览器将通过 URL 的请求串部分传输
数据，例如，考虑下面的表单： 
Username:  
Password:  
如果我输入了用户名 chris 和密码 mypass，在表单提交后，我会到达 URL
为 http://example.org/login.php?username=chris&password=mypass 的页面。该 URL
最简单的合法 HTTP/1.1 请求信息如下： 
GET /login.php?username=chris&password=mypass HTTP/1.1 
Host: example.org 
并不是必须要使用 HTML 表单来请求这个 URL，实际上通过 HTML 表单的
GET 请求方式发送数据与用户直接点击链接并没有什么不同。 
记住如果你在 GET 方式提交的表单中的 action 中试图使用请求串，它会被
表单中的数据所取代。 
而且，如果你指定了一个非法的请求方式，或者请求方式属性未写，浏览器
则会默认以 GET 方式提交数据。 
《PHP 安全基础详解》        www.528163.cn 提供 
为说明 POST 请求方式，只对上例进行简单的更改，考虑把 GET 请求方式
更改为 POST 的情况： 
Username:  
Password:  
如果我再次指定用户名 chris 和密码 mypass，在提交表单后，我会来到
http://example.org/login.php 页面。表单数据在请求的内部而不是一个 URL 的请
求串。该方式最简单的合法 HTTP/1.1 请求信息如下 
POST /login.php HTTP/1.1 
Host: example.org 
Content-Type: application/x-www-form-urlencoded 
Content-Length: 30 
username=chris&password=mypass 
现在你已看到用户向你的应用提供数据的主要方式。在下面的小节中，我们
将会讨论攻击者是如何利用你的表单和 URL 作为进入你的应用的缺口的。 
2.2. 语义 URL 攻击 
好奇心是很多攻击者的主要动机，语义 URL 攻击就是一个很好的例子。此
类攻击主要包括对 URL 进行编辑以期发现一些有趣的事情。例如，如果用户 chris
点击了你的软件中的一个链接并到达了页面
http://example.org/private.php?user=chris, 很自然地他可能会试图改变 user 的值，
看看会发生什么。例如，他可能访问 http://example.org/private.php?user=rasmus
来看一下他是否能看到其他人的信息。虽然对 GET 数据的操纵只是比对 POST
数据稍为方便，但它的暴露性决定了它更为频繁的受攻击，特别是对于攻击的新
手而言。 
大多数的漏洞是由于疏漏而产生的，而不是特别复杂的原因引起的。虽然很
多有经验的程序员能轻易地意识到上面所述的对 URL 的信任所带来的危险，但
是常常要到别人指出才恍然大悟。 
为了更好地演示语义 URL 攻击及漏洞是如何被疏忽的，以一个 Webmail 系
统为例，该系统主要功能是用户登录察看他们自己的邮件。任何基于用户登录的
系统都需要一个密码找回机制。通常的方法是询问一个攻击者不可能知道的问题
（如你的计算机的品牌等，但如果能让用户自己指定问题和答案更佳），如果问
题回答正确，则把新的密码发送到注册时指定的邮件地址。 
对于一个 Webmail 系统，可能不会在注册时指定邮件地址，因此正确回答问
《PHP 安全基础详解》        www.528163.cn 提供 
题的用户会被提示提供一个邮件地址（在向该邮件地址发送新密码的同时，也可
以收集备用邮件地址信息）。下面的表单即用于询问一个新的邮件地址，同时他
的帐户名称存在表单的一个隐藏字段中： 
Please specify the email address where you want your new password 
sent: 
可以看出，接收脚本 reset.php 会得到所有信息，包括重置哪个帐号的密码、
并给出将新密码发送到哪一个邮件地址。 
如果一个用户能看到上面的表单（在回答正确问题后），你有理由认为他是
chris 帐号的合法拥有者。如果他提供了 PI:EMAIL 作为备用邮件地址，
在提交后他将进入下面的 URL： 
http://example.org/reset.php?user=chris&email=chris%40example.org 
该 URL 出现在浏览器栏中，所以任何一位进行到这一步的用户都能够方便
地看出其中的 user 和 mail 变量的作用。当意思到这一点后，这位用户就想到
PI:EMAIL 是一个非常酷的地址，于是他就会访问下面链接进行尝试： 
http://example.org/reset.php?user=php&email=chris%40example.org 
如果 reset.php 信任了用户提供的这些信息，这就是一个语义 URL 攻击漏洞。
在此情况下，系统将会为 php 帐号产生一个新密码并发送至 PI:EMAIL，
这样 chris 成功地窃取了 php 帐号。 