Space Layout Randomization (ASLR) mechanism is enabled.
In essence, our attack detection mechanism does not rely on
ASLR. The application is not created with malicious purpose,
e.g., it is not maliciously compiled to contain abundant gadgets
within a small code base. Furthermore, we do not assume that
the application is released and distributed with side information
(e.g., source code and debugging information). We do not
attempt to protect any self-modifying applications, because
they require writable code segment, conﬂicting with the DEP
mechanism.
IV. DESIGN RATIONALE
Essentially, our approach is to capture the application
execution features at proper moments and then to identify the
existence of the ROP gadget chain. The detection accuracy and
efﬁciency are affected by two critical design issues. The ﬁrst
issue is the types of run-time features to capture. Ideally, the
features should be reliable in the sense that the adversary can
not modify them to evade detection, and sound in the sense
that they provide a solid evidence to infer the presence of
ROP attacks. The second is the timing of detection. A poorly
designed timing may either miss critical information which
leads to a low detection success rate or introduces unnecessary
checks with a high performance loss.
Hallmark of ROP Attacks. Most existing ROP counter-
measures are based on catching run-time abnormalities of the
ROP-infected application, e.g., call-ret violation [1], [2] or
deviation from the control ﬂow graph (CFG) or call graph
(CG) [5], [19]. None of these approaches can achieve all our
goals listed in Section III. For instance, the method of catching
any broken call-ret pairing is not applicable to jump based
ROP attacks. It is extremely difﬁcult to extract control ﬂow
information completely and accurately, without source code
access. In Section X, we elaborate more on the disadvantages
of using those abnormalities.
In this paper, we observe that the hallmark of ROP attacks
is that the execution ﬂow of a victim application consists of
a long sequence of gadgets chained together by branching
instructions. Because all gadgets can be located from the
constant binary code [12]–[14], the history of branches in an
execution ﬂow, enhanced by prediction of future branches,
can be the solid evidence to decide whether the execution
comprises a gadget chain. This hallmark applies to all kinds
of ROP attacks, achieving the goal of G1.
Based on this observation, we propose a novel ROP
defense mechanism, which relies on a payload detection
algorithm: 1) identifying past executed gadget chain using
LBR information, and 2) searching potential gadget chain in
future execution ﬂow, assisted with information from ofﬂine
3
gadget analysis, and/or occasional run-time instruction emu-
lation (Section V-C). If the total number of gadgets chained
together in both past and future detection exceeds a chosen
threshold, ROPecker reports the ROP attack and terminates
the application. Note that the adversary can not tamper with
the LBR values due to the hardware and the OS protection,
i.e., the accessing of LBR registers needs kernel privilege.
Furthermore, when the detection algorithm is executing, the
monitored application is suspended and cannot change its fu-
ture execution ﬂow. Thus, all information collected is reliable
for the detection.
An ofﬂine pre-processor is introduced to analyze the
instruction and gadget
information. The results cover the
most frequently used gadget cases and leaves only minor
cases to run-time analysis/emulation, which greatly reduces
the ROPecker run-time overhead without sacriﬁcing detection
accuracy (Sections V-A and VI-A).
Timing of Checking. To meet the goal of G2, we refrain
from inserting code in critical execution paths of the protected
application [3], [11] to trigger our ROP checking. In addition,
it is obviously inefﬁcient to monitor every branch instruction
of the application. Periodic sampling may incur less cost, but
it is prone to miss the ROP attacks taking place within the
sampling interval.
to meet
In this paper,
the goal of G3, we propose a
sliding window technique which can catch an ROP attack in a
timely fashion without a heavy performance toll (Section V-B).
Shifting along with the execution ﬂow, a sliding window refers
to the portion of the application code region which are set
executable by ROPecker, while the instructions outside of the
window are non-executable. Therefore, attempting to execute
an instruction out of the window triggers an exception where
the ROP checking logic is invoked. This design is advan-
tageous for the following two reasons. Firstly, the window
size is small comparing with the large code base that
is
needed in launching a meaningful ROP attack. As there are
not enough gadgets for an ROP attack in one sliding window,
an attack always triggers our ROP checking. Secondly, it is
highly efﬁcient since there is no intervention for executions
within the sliding window. In addition, the window covers
the most recent, non-contiguous code pages visited by the
monitored application, meaning that we can take full advantage
of the temporal and spatial locality feature of the application
execution [20]. This guarantees that the ROP checking logic
is not frequently invoked.
A prerequisite of using the sliding window technique is
that the adversary cannot bypass the checking or disable it.
Despite of lacking the kernel privilege, the adversary may
mislead the kernel through certain special system calls, e.g.,
mprotect and mmap2. The adversary may leverage ROP to
invoke those system calls with malicious inputs, which leads
the kernel to set the code pages of the monitored application
that contains gadgets to be executable, evading the ROPecker’s
detection, or even to disable the DEP mechanism and allow
code injection. Thus, ROPecker have to intercept those system
calls and check the existence of the ROP gadget chain before
passing them to the kernel.
4
Fig. 1.
protected application.
The architecture of ROPecker. The shaded square represents a
V. SYSTEM OVERVIEW
In this section, we elaborate on the design of the ROPecker
system. As depicted in Figure 1, the general work-ﬂow of
ROPecker proceeds in two phases: an ofﬂine pre-processing
phase followed by a run-time detection phase. In the ofﬂine
pre-processing phase, the ROPecker pre-processor disassem-
bles the binary code of the protected application X and system
libraries that
it depends on, analyzes each instruction and
gadget in the disassembled code, and saves the results in a
Instruction & Gadget (IG) database (Section V-A). During
the run-time detection phase, the ROPecker kernel module
that implements our ROP attack detection logic is invoked,
when the application X executes outside the sliding window
or invokes risky system calls (Section V-B). The kernel module
suspends the application X, and performs ROP attack detection
by analyzing the CPU execution trace, the stack and code seg-
ments of the protected application, and the IG database, and if
necessary, invoking instruction emulation (Section V-C). Note
that ROPecker can protect multiple applications in parallel.
A. Ofﬂine Pre-processing
In this phase,
the ROPecker pre-processor extracts all
instruction information (e.g., offsets, types, and alignment) of
the protected applications as well as the shared libraries that
they depend on. The pre-processor also identiﬁes the potential
gadgets from the application binary and libraries, analyzes
their impacts on the code stack and the CPU instruction
pointers (e.g., pop and push instructions can change the CPU
stack pointer). The pre-processor constructs a IG database to
store all the above instruction and gadget information. The
pre-processing of the shared libraries (e.g., libc) is an one-
time effort, as their results can be re-used among different
protected applications. Note that our pre-processor does not
depend on a perfect disassembler that can analyze the entire
application binary and ﬁgure out each instruction completely
and accurately. Our pre-processor starts from the ﬁrst byte
of the application code segment, and tries to disassemble a
pre-deﬁned number (e.g., 6) of instructions (as is analyzed
in Section VII-B). If this instruction sequence ends with
an indirect branching instruction (e.g., ret, jmp %eax), and
does not contain any direct branching instruction (e.g., call
0x8049000), it will be treated as a potential gadget. The pre-
processor further analyzes all instructions in this gadget to
determine its impact on the CPU instruction and stack pointers.
Offline Phase App X  Binary  Pre-processor ROPecker Kernel Module Run-time Phase  Kernel  lib1 libn … Instruction & Gadget  Database Apps App X CPU Execution  Trace Monitor Window IPd IPs Code … … Runtime Info Stack … instance, the target application has been processed by a gadget-
elimination tool, such as G-Free [6]. In that case, the gadgets
in the target application are expected to be extremely sparse.
2) Risky System Calls: Some system calls such as mprotect
and mmap2 are risky because they can allow the adversary to
disable the DEP mechanism so that no exception is raised
when executing outside of the sliding window. To intercept
those security system calls, we modify the system call table
such that the kernel invokes the ROP checking logic prior to
serving the system call request. If an ROP payload is detected
in the application context, ROPecker rejects the request and
terminates the application execution; otherwise it transfers the
execution ﬂow back to the requested system call handler. Note
that we only intercept the system calls that are risky and
invoked by the protected applications.
C. Run-time ROP Detection
The ROPecker kernel module implements the ROP check-
ing logic which detects the existence of an ROP gadget
chain in the past and future execution ﬂow of the protected
application during each trigger. Figure 3 depicts the ﬂow chart
of the detection logic. It begins with condition ﬁltering, which
ﬁlters out the irrelevant events that are not triggered by the
protected application. The second step is the past payload
detection, which identiﬁes the gadget chain from the branching
instruction history saved in LBRs. The last step is the future
payload detection that identiﬁes a potential gadget chain that
will be executed right after the triggers. If the total number
of the chained gadgets exceeds a pre-deﬁned threshold (as is
analyzed in Section VII-A), ROPecker concludes that an ROP
attack is caught and terminates the application. Otherwise it
updates the sliding window and resumes the original execution
ﬂow.
Fig. 3. The ROP checking logic.
In this step,
1) Condition Filtering:
the ROP module
checks whether the triggering event is due to the target ap-
plication. For page fault exceptions, ROPecker can distinguish
the exceptions triggered by the sliding window from others,
because the page fault error codes relevant
to the sliding
window indicates executing instructions in a non-executable
code page, whereas the normal execution of applications never
trigger page faults with this kind of error code. For system
Fig. 2. The sliding window and its update. In this example, the size of the
sliding window is 2 pages. When the execution ﬂow reaches to log function
(line 2), the sliding window is (page b, page c). Later the window is updated
to (page a, page b) when the start function (line 5) is executed. Note that
the code pages in the sliding window can be non-contiguous.
This procedure is simply redone in each byte of the application
binary. In short, we only require the pre-processor to correctly
analyze a short sequence of code, instead of disassembling the
entire application code all at once. Thus, our pre-processor
can base on any existing linear-sweeping disassembler, such
as objdump, or diStorm [21]. We will introduce the detailed
implementation of the pre-processor and the IG database in
Section VI-A.
B. ROP Detection Triggers
Before describing the run-time detection phase, we ﬁrst
introduce two types of events that trigger the detection logic:
execution out of the sliding window and invocation of the risky
system calls.
1) Sliding Window: As explained in previous sections,
application code pages outside of the sliding window are all set
as non-executable by ROPecker kernel module. Consequently,
any attempt
to execute an instruction out of the window
triggers a page fault exception, and the exception handler
invokes the ROPecker checking logic. If no ROP attack is
detected, ROPecker slides the window by replacing the oldest
page with the newly accessed code page. In this way, the
window always covers the most recent active pages. For
instance, the sliding window in Figure 2 consists of page b
and page c when the execution ﬂow reaches to the log function
(line 2). When the start function (line 5) is executed, page a
is added to the sliding window and page c is deleted.
Due to the temporal and spatial locality of application-
s [20], the usage of the sliding window signiﬁcantly reduces
the number of times of the ROP checking, and thereby reduces
the performance overhead. The window size is a critical
parameter to keep the balance between the detection accuracy
and performance. Increasing the window size can decrease the
frequency of the invocation of the ROP checking and thus
reduce the system performance overhead, but at the same time,
it increases the possibility for the adversary to launch an ROP
attack only using the gadgets within certain sliding window.
According to the experiment results of Q [17], we recommend
using 16KB or 8KB as the window size. Note that it is
safe to use a relatively larger window in certain cases. For
5
Old  Sliding Window  1:  int helper(int cmd,char* in){ 2: log(cmd, in); 3: switch(cmd){ 4:     case CMD_START: 5:   start(inputs); 6:   break;      . . .     } start: … helper … log: … Code  page_a page_b page_c New  Sliding Window  ROP Attack Checking Point Triggered Past Payload Detection Yes No No ROP Continue The Original Execution Flow Future Payload Detection Yes No 3 2 Condition Filtering 1 Yes No call invocation, the kernel module compares the process ID of
the invoker against the IDs of the target applications to select
relevant system calls. The condition ﬁltering is efﬁcient since
it only involves several integer comparisons.
2) Past Payload Detection: As introduced earlier, the re-
cent branches are recorded in the LBR registers. Each LBR
entry records the source and destination address of an executed
branch instruction. To identify a gadget chain, ROPecker
veriﬁes the following two requirement on each LBR entry,
starting from the most recent one: 1) the instruction at the
source address is an indirect branch instruction, and 2) the
destination address points to a gadget. Note that the veriﬁcation
is very efﬁcient, because ROPecker simply queries the IG
database to get the answer for 1) and 2). Once one LBR
entry fails to satisfy either requirement, ROPecker stops LBR
checking and outputs the length of the identiﬁed gadget chain.
If the identiﬁed gadget chain length exceeds the threshold,
ROPecker reports the ROP attack and terminates the applica-
tion. Otherwise, it moves to the future payload detection with
the length of identiﬁed chain as input parameters.
Recall that the LBR value is not application/process spe-
ciﬁc. Thus, we face the challenge of sifting out those records
belonging to the protected application, since noisy records
may increase the false negative or false positive rates of the
ROPecker attack detection. Our solution is to traverse the LBR
queue backwards starting from the most recent one, until we
reach one LBR entry that indicates a context switch. The
context switch entry can be recognized by its unique feature.
Namely, its source address is in kernel space and its destination
address is in user space. Other types of branches must have
the source and destination addresses in the same space. The
ROPecker module does not use LBR entries older than the
context switch one, because the older entries are likely noisy
records (e.g., belong to unprotected applications). Interestingly,
if the context switch entry with its source address in the
ROPecker module, it is exactly the mark left by the previous
detection. In this case, the following LBR entries are still in
our monitored application.
Another challenge is from the limitations of the LBR
mechanism. In LBR, the new records will override the old ones
when the LBR buffer gets full, and the current implementation
of LBR does not provide any mechanism to intercept the
override event or to backup the previous ones. Thus, ROPecker
can not get the whole historical taken branches. In addition, the
noise records may occupy several entries in the limited LBR
registers. Thus, in certain cases, the identiﬁed gadget chain
is not long enough to conﬁrm an ROP attack, necessitating
additional information collecting from the future payload de-
tection.
3) Future Payload Detection: This step predicts any in-
coming gadget along the execution ﬂow. According to the
gadget types, i.e., ret-based and jmp-based gadgets, we apply
two methods to handle them respectively.
It is relatively easy to handle ret-based gadgets, because
their destinations are stored on the application stack and the
relative positions can be calculated according to the gadget
instructions. For instance, in the gadget (pop %eax, pop %ebp;
ret), the two pop instructions move the stack pointer 8 bytes
towards the stack base, while the instruction ret retrieves the
top integer of the application stack as its next destination
and increases the stack pointer 4 bytes at the same time.
Following their stack operations, we can correctly re-position
the stack pointer and get the destination of the next gadget.
The ROPecker pre-processor performs this costly instruction
analysis and stack pointer calculation ofﬂine and stores the
results in the IG database (Section VI-A). At run-time, the
ROPecker kernel module simply queries the database and
retrieves the results efﬁciently.
Dealing with the jmp-based gadgets is more challenging,
as their destinations are dependent on the semantics of the
instructions in the gadget. It is obvious that enumerating all
possible combinations of a gadget in the ofﬂine processing
phase consumes enormously large storage space. We propose
to emulate such jmp-based gadgets at run-time to reveal the
destinations of the jump instructions. Since most gadgets only
have a few instructions, and the number of jmp-based gadgets
are relatively smaller comparing with ret-based ones in a nor-
mal application, the overhead of gadget emulation is limited.
Moreover, because the ofﬂine databases cover most popular
gadget cases, ROPecker seldomly triggers its emulation step.
The performance evaluation results in Section VIII-C2 also
demonstrate this point.
To avoid any side effect on the actual context due to the
emulation, we build a new instruction emulator that emulates