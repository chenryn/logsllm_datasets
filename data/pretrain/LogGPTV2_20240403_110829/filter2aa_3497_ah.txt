command.
What constitutes the end-of-line character? That depends on whom you ask. OS
developers usually define the end-of-line character as either the ASCII Line Feed (LF),
which has the value 10; the Carriage Return (CR) with the value 13; or the combination CR
LF. Protocols such as HTTP and Simple Mail Transfer Protocol (SMTP) specify CR LF
as the official end-of-line combination. However, so many incorrect implementations
occur that most parsers will also accept a bare LF as the end-of-line indication.
Technet24
||||||||||||||||||||
||||||||||||||||||||
Structured Text Formats
As with structured binary formats such ASN.1, there is normally no reason to reinvent the
wheel when you want to represent structured data in a text protocol. You might think of
structured text formats as delimited text on steroids, and as such, rules must be in place for
how values are represented and hierarchies constructed. With this in mind, I’ll describe
three formats in common use within real-world text protocols.
Multipurpose Internet Mail Extensions
Originally developed for sending multipart email messages, Multipurpose Internet Mail
Extensions (MIME) found its way into a number of protocols, such as HTTP. The
specification in RFCs 2045, 2046 and 2047, along with numerous other related RFCs,
defines a way of encoding multiple discrete attachments in a single MIME-encoded
message.
MIME messages separate the body parts by defining a common separator line prefixed
with two dashes (--). The message is terminated by following this separator with the same
two dashes. Listing 3-3 shows an example of a text message combined with a binary
version of the same message.
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary=MSG_2934894829
This is a message with multiple parts in MIME format.
--MSG_2934894829
Content-Type: text/plain
Hello World!
--MSG_2934894829
Content-Type: application/octet-stream
Content-Transfer-Encoding: base64
PGh0bWw+Cjxib2R5PgpIZWxsbyBXb3JsZCEKPC9ib2R5Pgo8L2h0bWw+Cg==
--MSG_2934894829--
Listing 3-3: A simple MIME message
One of the most common uses of MIME is for Content-Type values, which are usually
referred to as MIME types. A MIME type is widely used when serving HTTP content and
in operating systems to map an application to a particular content type. Each type consists
of the form of the data it represents, such as text or application, in the format of the data. In
this case, plain is unencoded text and octet-stream is a series of bytes.
JavaScript Object Notation
JavaScript Object Notation (JSON) was designed as a simple representation for a structure
based on the object format provided by the JavaScript programming language. It was
originally used to transfer data between a web page in a browser and a backend service,
such as in Asynchronous JavaScript and XML (AJAX). Currently, it’s commonly used for
||||||||||||||||||||
||||||||||||||||||||
web service data transfer and all manner of other protocols.
The JSON format is simple: a JSON object is enclosed using the braces ({}) ASCII
characters. Within these braces are zero or more member entries, each consisting of a key
and a value. For example, Listing 3-4 shows a simple JSON object consisting of an integer
index value, "Hello world!" as a string, and an array of strings.
{
    "index" : 0,
    "str" : "Hello World!",
    "arr" : [ "A", "B" ]
}
Listing 3-4: A simple JSON object
The JSON format was designed for JavaScript processing, and it can be parsed using
the "eval" function. Unfortunately, using this function comes with a significant security
risk; namely, it’s possible to insert arbitrary script code during object creation. Although
most modern applications use a parsing library that doesn’t need a connection to
JavaScript, it’s worth ensuring that arbitrary JavaScript code is not executed in the context
of the application. The reason is that it could lead to potential security issues, such as cross-
site scripting (XSS), a vulnerability where attacker-controlled JavaScript can be executed in
the context of another web page, allowing the attacker to access the page’s secure
resources.
Extensible Markup Language
Extensible Markup Language (XML) is a markup language for describing a structured
document format. Developed by the W3C, it’s derived from Standard Generalized
Markup Language (SGML). It has many similarities to HTML, but it aims to be stricter in
its definition in order to simplify parsers and create fewer security issues.1
At a basic level, XML consists of elements, attributes, and text. Elements are the main
structural values. They have a name and can contain child elements or text content. Only
one root element is allowed in a single document. Attributes are additional name-value
pairs that can be assigned to an element. They take the form of name="Value". Text content is
just that, text. Text is a child of an element or the value component of an attribute.
Listing 3-5 shows a very simple XML document with elements, attributes, and text
values.
    Hello World!
    AB
Listing 3-5: A simple XML document
All XML data is text; no type information is provided for in the XML specification, so
the parser must know what the values represent. Certain specifications, such as XML
Technet24
||||||||||||||||||||
||||||||||||||||||||
Schema, aim to remedy this type information deficiency but they are not required in order
to process XML content. The XML specification defines a list of well-formed criteria that
can be used to determine whether an XML document meets a minimal level of structure.
XML is used in many different places to define the way information is transmitted in a
protocol, such as in Rich Site Summary (RSS). It can also be part of a protocol, as in
Extensible Messaging and Presence Protocol (XMPP).
Encoding Binary Data
In the early history of computer communication, 8-bit bytes were not the norm. Because
most communication was text based and focused on English-speaking countries, it made
economic sense to send only 7 bits per byte as required by the ASCII standard. This
allowed other bits to provide control for serial link protocols or to improve performance.
This history is reflected heavily in some early network protocols, such as the SMTP or
Network News Transfer Protocol (NNTP), which assume 7-bit communication channels.
But a 7-bit limitation presents a problem if you want to send that amusing picture to
your friend via email or you want to write your mail in a non-English character set. To
overcome this limitation, developers devised a number of ways to encode binary data as
text, each with varying degrees of efficiency or complexity.
As it turns out, the ability to convert binary content into text still has its advantages. For
example, if you wanted to send binary data in a structured text format, such as JSON or
XML, you might need to ensure that delimiters were appropriately escaped. Instead, you
can choose an existing encoding format, such as Base64, to send the binary data and it will
be easily understood on both sides.
Let’s look at some of the more common binary-to-text encoding schemes you’re likely
to encounter when inspecting a text protocol.
Hex Encoding
One of the most naive encoding techniques for binary data is hex encoding. In hex encoding,
each octet is split into two 4-bit values that are converted to two text characters denoting
the hexadecimal representation. The result is a simple representation of the binary in text
form, as shown in Figure 3-18.
||||||||||||||||||||
||||||||||||||||||||
Figure 3-18: Example hex encoding of binary data
Although simple, hex encoding is not space efficient because all binary data
automatically becomes 100 percent larger than it was originally. But one advantage is that
encoding and decoding operations are fast and simple and little can go wrong, which is
definitely beneficial from a security perspective.
HTTP specifies a similar encoding for URLs and some text protocols called percent
encoding. Rather than all data being encoded, only nonprintable data is converted to hex,
and values are signified by prefixing the value with a % character. If percent encoding was
used to encode the value in Figure 3-18, you would get %06%E3%58.
Base64
To counter the obvious inefficiencies in hex encoding, we can use Base64, an encoding
scheme originally developed as part of the MIME specifications. The 64 in the name refers
to the number of characters used to encode the data.
The input binary is separated into individual 6-bit values, enough to represent 0
through 63. This value is then used to look up a corresponding character in an encoding
table, as shown in Figure 3-19.
Figure 3-19: Base64 encoding table
Technet24
||||||||||||||||||||
||||||||||||||||||||
But there’s a problem with this approach: when 8 bits are divided by 6, 2 bits remain.
To counter this problem, the input is taken in units of three octets, because dividing 24
bits by 6 bits produces 4 values. Thus, Base64 encodes 3 bytes into 4, representing an
increase of only 33 percent, which is significantly better than the increase produced by hex
encoding. Figure 3-20 shows an example of encoding a three-octet sequence into Base64.
But yet another issue is apparent with this strategy. What if you have only one or two
octets to encode? Would that not cause the encoding to fail? Base64 gets around this issue
by defining a placeholder character, the equal sign (=). If in the encoding process, no valid
bits are available to use, the encoder will encode that value as the placeholder. Figure 3-21
shows an example of only one octet being encoded. Note that it generates two placeholder
characters. If two octets were encoded, Base64 would generate only one.
Figure 3-20: Base64 encoding 3 bytes as 4 characters
||||||||||||||||||||
||||||||||||||||||||
Figure 3-21: Base64 encoding 1 byte as 3 characters
To convert Base64 data back into binary, you simply follow the steps in reverse. But
what happens when a non-Base64 character is encountered during the decoding? Well
that’s up to the application to decide. We can only hope that it makes a secure decision.
Final Words
In this chapter, I defined many ways to represent data values in binary and text protocols
and discussed how to represent numeric data, such as integers, in binary. Understanding
how octets are transmitted in a protocol is crucial to successfully decoding values. At the
same time, it’s also important to identify the many ways that variable-length data values
can be represented because they are perhaps the most important structure you will
encounter within a network protocol. As you analyze more network protocols, you’ll see
the same structures used repeatedly. Being able to quickly identify the structures is key to
easily processing unknown protocols.
In Chapter 4, we’ll look at a few real-world protocols and dissect them to see how they
match up with the descriptions presented in this chapter.
Technet24
||||||||||||||||||||
||||||||||||||||||||
4
ADVANCED APPLICATION TRAFFIC CAPTURE
Usually, the network traffic-capturing techniques you learned in Chapter 2 should suffice,
but occasionally you’ll encounter tricky situations that require more advanced ways to
capture network traffic. Sometimes, the challenge is an embedded platform that can only
be configured with the Dynamic Host Configuration Protocol (DHCP); other times, there
may be a network that offers you little control unless you’re directly connected to it.
Most of the advanced traffic-capturing techniques discussed in this chapter use existing
network infrastructure and protocols to redirect traffic. None of the techniques require
specialty hardware; all you’ll need are software packages commonly found on various
operating systems.
Rerouting Traffic
IP is a routed protocol; that is, none of the nodes on the network need to know the exact
location of any other nodes. Instead, when one node wants to send traffic to another node
that it isn’t directly connected to, it sends the traffic to a gateway node, which forwards the
traffic to the destination. A gateway is also commonly called a router, a device that routes
traffic from one location to another.
For example, in Figure 4-1, the client 192.168.56.10 is trying to send traffic to the
server 10.1.1.10, but the client doesn’t have a direct connection to the server. It first sends
traffic destined for the server to Router A. In turn, Router A sends the traffic to Router B,
which has a direct connection to the target server; Router B passes the traffic on to its final
destination.
As with all nodes, the gateway node doesn’t know the traffic’s exact destination, so it
looks up the appropriate next gateway to send to. In this case, Routers A and B only know
about the two networks they are directly connected to. To get from the client to the
server, the traffic must be routed.
||||||||||||||||||||
||||||||||||||||||||
Figure 4-1: An example of routed traffic
Using Traceroute
When tracing a route, you attempt to map the route that the IP traffic will take to a
particular destination. Most operating systems have built-in tools to perform a trace, such
as traceroute on most Unix-like platforms and tracert on Windows.
Listing 4-1 shows the result of tracing the route to www.google.com from a home
internet connection.
C:\Users\user>tracert www.google.com
Tracing route to www.google.com [173.194.34.176]
over a maximum of 30 hops:
  1     2 ms     2 ms     2 ms  home.local [192.168.1.254]
  2    15 ms    15 ms    15 ms  217.32.146.64
  3    88 ms    15 ms    15 ms  217.32.146.110
  4    16 ms    16 ms    15 ms  217.32.147.194
  5    26 ms    15 ms    15 ms  217.41.168.79
  6    16 ms    26 ms    16 ms  217.41.168.107
  7    26 ms    15 ms    15 ms  109.159.249.94
  8    18 ms    16 ms    15 ms  109.159.249.17
  9    17 ms    28 ms    16 ms  62.6.201.173
 10    17 ms    16 ms    16 ms  195.99.126.105
 11    17 ms    17 ms    16 ms  209.85.252.188
 12    17 ms    17 ms    17 ms  209.85.253.175
 13    27 ms    17 ms    17 ms  lhr14s22-in-f16.1e100.net [173.194.34.176]
Listing 4-1: Traceroute to www.google.com using the tracert tool
Each numbered line of output (1, 2, and so on) represents a unique gateway routing
traffic to the ultimate destination. The output refers to a maximum number of hops. A
single hop represents the network between each gateway in the entire route. For example,
there’s a hop between your machine and the first router, another between that router and
the next, and hops all the way to the final destination. If the maximum hop count is
exceeded, the traceroute process will stop probing for more routers. The maximum hop
can be specified to the trace route tool command line; specify -h NUM on Windows and -m NUM
on Unix-style systems.(The output also shows the round-trip time from the machine
performing the traceroute and the discovered node.)
Routing Tables
The OS uses routing tables to figure out which gateways to send traffic to. A routing table
contains a list of destination networks and the gateway to route traffic to. If a network is
directly connected to the node sending the network traffic, no gateway is required, and the
network traffic can be transmitted directly on the local network.
You can view your computer’s routing table by entering the command netstat -r on
most Unix-like systems or route print on Windows. Listing 4-2 shows the output from
Windows when you execute this command.
Technet24
||||||||||||||||||||
||||||||||||||||||||
> route print
   IPv4 Route Table
   =============================================================================
   Active Routes:
   Network Destination           Netmask         Gateway      Interface   Metric
➊             0.0.0.0           0.0.0.0   192.168.1.254   192.168.1.72       10
             127.0.0.0         255.0.0.0         On-link      127.0.0.1      306
             127.0.0.1   255.255.255.255         On-link      127.0.0.1      306
       127.255.255.255   255.255.255.255         On-link      127.0.0.1      306
           192.168.1.0     255.255.255.0         On-link   192.168.1.72      266
          192.168.1.72   255.255.255.255         On-link   192.168.1.72      266
         192.168.1.255   255.255.255.255         On-link   192.168.1.72      266
             224.0.0.0         240.0.0.0         On-link      127.0.0.1      306
             224.0.0.0         240.0.0.0         On-link   192.168.56.1      276
             224.0.0.0         240.0.0.0         On-link   192.168.1.72      266
       255.255.255.255   255.255.255.255         On-link      127.0.0.1      306
       255.255.255.255   255.255.255.255         On-link   192.168.56.1      276
       255.255.255.255   255.255.255.255         On-link   192.168.1.72      266
   =============================================================================
Listing 4-2: Example routing table output
As mentioned earlier, one reason routing is used is so that nodes don’t need to know
the location of all other nodes on the network. But what happens to traffic when the
gateway responsible for communicating with the destination network isn’t known? In that
case, it’s common for the routing table to forward all unknown traffic to a default gateway.
You can see the default gateway at ➊, where the network destination is 0.0.0.0. This
destination is a placeholder for the default gateway, which simplifies the management of
the routing table. By using a placeholder, the table doesn’t need to be changed if the
network configuration changes, such as through a DHCP configuration. Traffic sent to
any destination that has no known matching route will be sent to the gateway registered
for the 0.0.0.0 placeholder address.
How can you use routing to your advantage? Let’s consider an embedded system in
which the operating system and hardware come as one single device. You might not be
able to influence the network configuration in an embedded system as you might not even
have access to the underlying operating system, but if you can present your capturing
device as a gateway between the system generating the traffic and its ultimate destination,
you can capture the traffic on that system.
The following sections discuss ways to configure an OS to act as a gateway to facilitate
traffic capture.
Configuring a Router
By default, most operating systems do not route traffic directly between network
interfaces. This is mainly to prevent someone on one side of the route from
communicating directly with the network addresses on the other side. If routing is not
enabled in the OS configuration, any traffic sent to one of the machine’s network
||||||||||||||||||||
||||||||||||||||||||
interfaces that needs to be routed is instead dropped or an error message is sent to the
sender. The default configuration is very important for security: imagine the implications
if the router controlling your connection to the internet routed traffic from the internet
directly to your private network.
Therefore, to enable an OS to perform routing, you need to make some configuration
changes as an administrator. Although each OS has different ways of enabling routing, one
aspect remains constant: you’ll need at least two separate network interfaces installed in
your computer to act as a router. In addition, you’ll need routes on both sides of the
gateway for routing to function correctly. If the destination doesn’t have a corresponding
route back to the source device, communication might not work as expected. Once routing
is enabled, you can configure the network devices to forward traffic via your new router.
By running a tool such as Wireshark on the router, you can capture traffic as it’s forwarded
between the two network interfaces you configured.
Enabling Routing on Windows
By default, Windows does not enable routing between network interfaces. To enable
routing on Windows, you need to modify the system registry. You can do this by using a
GUI registry editor, but the easiest way is to run the following command as an
administrator from the command prompt:
C> reg add HKLM\System\CurrentControlSet\Services\Tcpip\Parameters ^
    /v IPEnableRouter /t REG_DWORD /d 1
To turn off routing after you’ve finished capturing traffic, enter the following
command:
C> reg add HKLM\System\CurrentControlSet\Services\Tcpip\Parameters ^
    /v IPEnableRouter /t REG_DWORD /d 0
You’ll also need to reboot between command changes.
WARNING
Be very careful when you’re modifying the Windows registry. Incorrect changes could
completely break Windows and prevent it from booting! Be sure to make a system backup using
a utility like the built-in Windows backup tool before performing any dangerous changes.
Enabling Routing on *nix
To enable routing on Unix-like operating systems, you simply change the IP routing
system setting using the sysctl command. (Note that the instructions for doing so aren’t
necessarily consistent between systems, but you should be able to easily find specific
Technet24
||||||||||||||||||||
||||||||||||||||||||