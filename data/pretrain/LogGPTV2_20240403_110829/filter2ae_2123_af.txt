    0:001> r @$t0 = 0xbd29a38  ;
    0:001> r @$t1 = poi(@$t0) ;
    0:001> r @$t2 = poi(@$t0 + 0x8 );
    0:001> r @$t8 = poi(@$t1 + 0x10);
    0:001> .for(; @$t8 != 0; r @$t1 = @$t8;r @$t8 = poi(@$t1 + 0x10)) {r @$t3 = poi(@$t1 + 0x4);r @$t9 = 0;.catch {du poi(@$t3 + 0x4); r @$t9 = 0xaa};.if (@$t9 != 0xaa) {r @$t3};r @$t3 = poi(@$t1 + 0x8);r @$t4 = @$t3 >> 0n27;r @$t5 = @$t3 & 0x00ffffff;r @$t4, @$t5;.if(@$t5  r @$t0 = 0xbd29a38  ;
    0:003> r @$t1 = poi(@$t0) ;
    0:003> r @$t2 = poi(@$t0 + 0x8 );
    0:003> r @$t8 = poi(@$t1 + 0x10);
    0:003> .for(; @$t8 != 0; r @$t1 = @$t8;r @$t8 = poi(@$t1 + 0x10)) {r @$t3 = poi(@$t1 + 0x4);r @$t9 = 0;.catch {du poi(@$t3 + 0x4); r @$t9 = 0xaa};.if (@$t9 != 0xaa) {r @$t3};r @$t3 = poi(@$t1 + 0x8);r @$t4 = @$t3 >> 0n27;r @$t5 = @$t3 & 0x00ffffff;r @$t4, @$t5;.if(@$t5  r @$t0 = 0x0bd29b78  ;
    0:000> r @$t1 = poi(@$t0) ;
    0:000> r @$t2 = poi(@$t0 + 0x8 );
    0:000> r @$t8 = poi(@$t1 + 0x10);
    0:000> .for(; @$t8 != 0; r @$t1 = @$t8;r @$t8 = poi(@$t1 + 0x10)) {r @$t3 = poi(@$t1 + 0x4);r @$t9 = 0;.catch {du poi(@$t3 + 0x4); r @$t9 = 0xaa};.if (@$t9 != 0xaa) {r @$t3};r @$t3 = poi(@$t1 + 0x8);r @$t4 = @$t3 >> 0n27;r @$t5 = @$t3 & 0x00ffffff;r @$t4, @$t5;.if(@$t5  dd 0x0bd29b78 L0x4
    0bd29b78  0bdb5df0 0bd25980 00000000 64e124d0
    0:000> dd 0bd25980 L0x4
    0bd25980  0b9f7110 0bd29268 00000000 80ff0008
上面的0xbd29268就是app对象的prototype，再次使用windbg脚本命令打印app的prototype的所有属性，并找到alert属性及它的值。
    --------------------    
    0a818cc8  "alert"
    $t4=00000001 $t5=0000000d
    0b99b040  0bd3c3d0 ffffff87
    --------------------
6) alert对象的地址是0xbd3c3d0，是一个JSFunction。
打印alert对象的值，如下所示。
    0:000> dd 0xbd3c3d0 L0xa
    0bd3c3d0  0bd3b8c8 0bd250c0 00000000 64e124d0
    0bd3c3e0  0c763b00 00000000 00000000 64be4600
    0bd3c3f0  00000000 0a818cc0
    0:000> dc 0a818cc0 L0x8
    0a818cc0  00000058 0a818cc8 006c0061 00720065  X.......a.l.e.r.
    0a818cd0  00000074 00000000 00000000 00000000  t...............
可以确定没有找错，那么根据2.2.4可以知道偏移0x1C处的地址（这里是0x64be4600）就是app.alert的Native实现了。
是这样吗？通过2.1节得到的app.alert的Native实现应该是地址0x64C63CB0，如下所示。
为什么alert的JSFucntion封装的Native函数地址不对呢？
这里就需要介绍一直没介绍的JSObject剩余的8个字节（参考2.2.3）。
Acrobat为了使得EScript可以调用其他模块(动态链接库)实现的Native函数，在SpiderMoneky的Native调用机制上实现了自己的机制。
这个机制由一个特定的函数实现（我称为CallExternalReference），就是上面得到的alert的JSFunction封装的Native函数，在IDA中定位0x64be4600如下。
也就是调用Natvie函数时其实调用的是CallExternalReference，并传入实际要调用的函数名称（比如这里的”alert”），然后CallExternalReference会在传入的对象（这里是app对象的prototype）中根据传入的函数名称查找实际的Native实现。
app的prototype保存的函数名称对应的Native实现如下。
可以看到这次alert对应的Native实现0x64c63cb0是正确的了。
## 3 结束语
到这里，pdf最重要的2个机制——plugin机制和Javascript机制都介绍完毕。Plugin机制能够帮助手动识别很多关键函数，Javascript机制则是漏洞利用的关键所在，不管是分析漏洞还是编写漏洞利用都是十分重要的，该文档并没有把Javascript相关的所有机制都介绍一下，但是掌握了该文档中介绍的技术，应该可以应付绝大部分情况，希望对研究PDF的人员有所帮助。