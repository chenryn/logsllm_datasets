16.5.11焦点及其切换
如果在你的计算机屏幕上有好几个顶层窗口，那么，当你按下一个键的时候，哪个窗口会
接收到这个KeyPress事件呢？答案是拥有焦点的那个窗口，即焦点决定了键盘输人的目的地。
顶层窗口的焦点管理是由窗口管理器自动完成的。有的窗口管理器的做法是：只要鼠标进人了
某个顶层窗口，就把输人焦点设置给它；面有的做法则是当用户点击了某个窗口之后才改变输
人焦点的设置。但窗口管理器通常只负责顶层窗口的焦点设置工作，顶层窗口的子密口中间的
加入jaVa编程群：524621833
---
## Page 544
526Linux程序设计
焦点设置工作一般都要由应用程序自已负责。
Tk在应用程序级准备了两个焦点模型。一个是implicit暗焦模型，它把焦点设置给鼠标当
前位置上的素材：另一个是explicit明焦模型，用户必须明确地点击了素材或明确地通过键盘切
换到素材才能使之得到焦点。在缺省的情况下，在明焦模型里的素材之间切换焦点需要使用
Tab键
Tk会记住每个顶层窗口的焦点窗口是哪一个（该顶层窗口最直接的后代将接收到焦点）；
当窗口管理器把焦点分配给某个顶层窗口时，Tk会自动把它设置到自己记住的窗口去。在缺省
的情况下，Tk在一个顶层窗口的内部使用的是明焦模型：在一个顶层窗口内部移动鼠标一般不
会改变焦点；只有在某个素材明确地申请了焦点（因为有一个按钮被按下）或者用户敲了一个
键（比如Tab键）来移动焦点时，焦点才会发生变化。
focus焦点命令的语法如下所示：
focus
focus optlon 7arg axg ...?
focus windou
focus命令使用方法的详细资料请参考它的使用手册页。
当应用程序或者它的某个顶层窗口得到焦点之后，我们就可以通过调用一个Tcl过程
tk_focusFollowsMouse创建出一个暗焦模型来。它会重新配置Tk，然后只要鼠标进人了某个窗口，
焦点就会被设置给它。请看下面的例子，它会在应用程序顶层窗口得到了焦点的大前提下指示
窗口暂理器把焦点设置给鼠标位于其上的任何成分。如果你运行这个例子，就会看到：鼠标只
要一掠过按钮，就会获得焦点，根本不需要点击鼠标按键了。
tk_focusFollowsMouse
g.xa-qg
Tcl过程tk_focusNext和tk_focusPrev实现了同一顶层窗口的子窗口之间焦点顺序切换的操
作；前者的缺省绑定是Tab键，后者的缺省绑定是“Shift-Tab”组合键。
tk_focusNext和tk_focusPrev命令的语法如下所示：
tk_focusNext window
tk_focusPrev window
tk_focusNext是一个用在键盘操作方面的工具性过程，它返回一个窗口，这个窗口在焦点先
后顺序里是捧在window窗口后面的“下个”窗口。焦点顺序是由窗口重叠的先后次序和窗口
的层次结构决定的。如果是在同一层次结构上，焦点顺序和窗口的重叠顺序就是一致的，即最
下面的窗口将第一个得到焦点。如果-个窗口有子窗口，焦点会先到达这个窗口，再依次到达
它的各子窗口（递归性的），然后前往与它同层次的下一个窗口。焦点不会进人window自己的顶
层窗口以外的其他顶层窗口里——它们都会被隔过去，也就是说：过程tk_focusNext永远不会返
回它自已的顶层窗口以外的另一个顶层窗口里的窗口。
在计算出下一个窗口之后，tk_focusNext会检查该窗口的-takefocus选项，看它是否应该被隔
加入jaVa编程群：524621833
---
## Page 545
第16章X窗口系统的程序设计
527
过去。如果是要过去，tk_focusNext就会检查焦点顺序里的下一个窗口，这样-一直下去，直到
它最终找到一个能够接受焦点的窗口或转一圈间到自己为止。
tk_focusPrev命令和tk_focusNext基本一样，差别只是前者返回的是焦点顺序里本窗口前面
的那个窗口而己。
请看下面的例子，注意按钮素材.b2是如何通过设定“-takefocus0”选项躲开焦点的。当我
们运行这个示例程序的时候，“skipfocus”按钮完全不接受焦点，即使鼠标光标放在它上面也是
如此。
tx_focusFol1owrsMouse
ag.x-
button.b3-text *button 3*
button.b2
text
'skip focus
-takefocus0
 xe- apqqxe
16.5.12选项数据库
和Motif和Xt的情况一样，Tk中的每个素材都可以归入一个类别（calss），这个类别可以通
过下面这个命令检索出来：
winto class widget-path-nane
这些类别名被用来设定应用程序的缺省设置和对一整个素材类别的绑定。Tk使用一个特殊
的数据库-—它的名字是选项数据库（optiondatabase）一—来保存和检索应用程序的资源。比
如说，在本章最开始的第一个程序里我们用了这样一条语句：
opt:on add *b.activeForeground brown
这就等于是在通知选项数据库：名字是.b的按钮（它可以有任意的父素材）必须有一个棕色
的活跃前景颜色。我们可以对整个按钮类别进行设置来获得同样的效果：
option add *Button.activeForeground brown
当Tk创建一个素材的时候，在设置好命令行之后，它会去检索选项数据库，根据数据库中
的设置值对相应的资源进行设置。如果它找到了该资源的一个匹配项，就使用匹配到的选项：
否则，它将使用一个缺省值。
option命令和x资源文件的作用是一样的。事实上，我们可以把应用程序将要用到的全部资
源都保存到一个文件里，再用option命令读这个文件，就象hello4.k程序示例中那样。我们还可
以使用option命令来查询保存着的选项，这个操作的语法如下所示：
optiou get window nane class
选项数据库可以说是一专多能，比简单的.Xdefaulits文件要能干的多。我们可以利用它来模
仿同一个应用程序在Xt环境支持下缺省的加载机制。比如说，在加载这个应用程序之前，可以
在X窗口环境变量指定的子目录里找到缺省的设置文件，这些环境变量包括
XFILESEARCHPATH、XAPPLRESDIR、XUSERFILESEARCHPATH和XENVIRONMENT等。
我们可以给应用程序的各个缺省配置文件确定一个优先级，根据优先级把这些配置文件放
加入jaVa编程群：524621833
---
## Page 546
528Linux程序设计
到环境变量指示的各个子自录里去：面当我们用“optionreadfile..：命令把它们读到应用程序
笔来的时候，就可以按它们的优先级确定先后顺序。完成这模仿的代码应该和下面这段程序
差不多：
global env
if[info exists env(XPILESEARCHPATH)](
100k1n one ot{/usr/1ib/x11/app-defaults. /usr/operwin/1ib/app-defauits
else(
/ust/lib/app-detaults..) directories and load the f1le with priority 1
if [info exists env(XUSERFILESEARCHPATH)]1
load the file with priority 2 over riding XPILEsEARCRPATH priority
1ook [or the app-defaults tile in XUSERrILESEARCHPATH dir
}elseif [info exists env(XAPPLRESDIR)]
load the file with priority 2 over riding XFILESEARCHPATH priority
look fot che dpp-defaults file in XAPPLRESDIR dir
)elseif
load app defaults file if exists from current dit with priority 2
if[ the defaults exist in .Xdefauits 1(
loadthem with priority 3
if [info exists env(XENVIRONMENT)](
load the file XENVIRCNMENr as the app defaults file with second-highest priority
finally load command-line options with the highest priority
16.5.13应用程序间的通信
Tk为共享着同一个显示服务器（但有可能分别显示在不同屏幕上）的两个应用程序之间的
通信准备了一个有力的武器：send命令。举个例子，应用程序A可以向应用程序B（比如另一个
名字是B的Tcl解释器）发送一条命令，让后者输出字符串“hello”，如下所示：
send B [1ist puts *hello* ]
应用程序B接收到这个命令后会执行“puts“hello"”命令。这一方面的进一步情况请参考
send命令的使用手册页。
16.5.14selection命令
我们来设想这样一个场面：一位用户正在一个运行着多个终端仿真程序的桌面上操作着，
他用鼠标左键在某个终端仿真程序里选取了一块文本，然后用鼠标中键把那块文本粘贴到了另
一个终端仿真程序里去。在这个看起来并不复杂的操作过程里，实际发生了许多的事情。
当用户决定在一个终端仿真程序里选取些东西的时候，这个终端仿真程序首先必须弄清楚
用户到底都选取了哪些东西，而它也就成为了这个选取物的属主。成为选取物的属主意味着要
做这样的事情：当有其他应用程序请求获得这个选取物时，属主要把这个选取物转换为请求方
应用程序指定的类型。一个希望以某种特定格式获得这个选取物的客户向这个选取物的属主提
出请求。X客户之间所有这些交互操作都在“X客户间通信符号约定规则”（XInter-Client
CommunicationConvention Manual，简称ICCCM）中有明确的规定。
选取物可以是PRIMARY、SECONDARY和CLIPBOARD等多种类型。PRiMARY类型选取
加入jaVa编程群：524621833
---
## Page 547
第16章X窗口系统的程序设计
529
物的名字是“XA_PRIMARY”，它是各种客户使用的缺省值。SECONDARY类型选取物的名字
是“XA_SECONDARY"，当应用程序需要使用一个以上的选取物时，才会用到它。
CLIPBOARD（剪贴板）选取物经常用来保存被副除的数据。
属Tk解释器和一个文本素材。它通过文本的sel标签对文本素材里的文本进行选取。使用text命令
的sel标签将把选取物缺省地设为PRIMARY类型。这样，当那个从属解释器调用“selectionown
时，它将拥有这个选取物，成为它的属主。接着，主控解释器检索这个选取物，并把它输出到
标准输出stdout去。
interp create foo
#!wish
foo eval {
text.t
load(} Tk
pack.t
.t insert end *Hello world1
t tag add sel0.0 end
selection own
t insert end\n*
.t insert end ·[selection get 1*
puts *[selection get]*
如果把上例中注释行前面的“#”号去掉，应用程序将报告出现一个错误，因为并没有第二
份选取物。选取物的属主还可以拒绝任何其他应用程序或其他组件对选取物的检索。
16.5.15Clipboard命令
CLIPBOARD（剪贴板）是X中的另外一种选取机制。CLIPBOARD选取物可以用来容纳被
删除的数据。举例来说，甲客户可以把剔掉的数据放到剪贴板上并退出。而乙客户却依然能够从
剪贴板上检索到被删除掉的选取物-一尽管此时原来的属主客户早已经离开了。这对PRIMARY
和SECONDARY类型的选取物来说是不可能的，因为当有客户请求PRIMARY或SECONDARY选
取物的时候，它会向属主发送一个请求。如果属主已经不在了，选取物检索请求就会失败。
clipboard命令提供了一个到Tk剪贴板的Tcl编程接口，这个Tk剪贴板通过selection机制把数
据保存起来供后续操作检索。Tk_cliphoard与大家在其他操作系统上见过的系统剪贴板不是同一
个概念。使用Tk工具包开发的应用程序会产生剩除数据，为了让这些被删除的数据能够在这些
应用程序之间得到利用，人们才设计了Tk_clipboard，把删除数据放在它里面；也就是说，
Tk_clipboard只是一个容纳删除数据的容器而已。要想把数据拷贝到剪贴板去，必须先调用
“clipboard clear”、然后是一连申的一个或多个“clipboardappend”调用。下面的例子演示了
clipboard俞令的用法。
#:w1sh
interp create foo
加入jaVa编程群：524621833
---
## Page 548
530
Linux程序设计
foo eval (
load() Tk
clipboard clear
interp delete foo
puts *[Selection get -selectior. CLIPBOARD *
上例创建了一个名为foo的新Tk解释器。foo把数据追加到剪贴板上去。土控解释器删掉从属
解释器，然后从剪贴板检索出数据来。正如大家看的那样，即使从属解释器已经不在了，选取
物还是能够被检索到。
16.5.16窗口管理器
Tk为窗口和窗口管理器之间的通信准备了一个wm命令。窗口管理器的典型功能包括：管理
应用程序窗口之间的焦点切换、设置顶层窗口的属性、给窗口分配颜色图（colormap）、在显示
器屏幕上摆顶层窗口，等等。应用程序内部的各种窗口都是由应用程序自己负责管理的，窗
口管理器只与各种应用程序的顶层窗口打交道，所以wm命令的参数必须是顶层窗口。客户可以
向窗口管理器请求的功能包括以下这些：
·把顶层窗口缩小为图标，或把图标恢复为顶层窗口。
·把顶层窗口摆放到屏幕上的特定位置：
·把顶层窗口恢复为初始化时的尺寸位置。
·设置顶层窗口的窗口标题。
·设置应用程序的焦点模型。
·调整一个顶层窗口的长度、宽度。
·覆盖窗口管理器提供的缺省修饰，等等。
我们用几个例子来进行说明。在程序里，我们可以象下面这样在应用程序里用wm命令查询
某个顶层窗口的状态：
w iconify.
[]。
iconic
用户还可以对顶层窗口上的窗口管理器协议进行设置，改变窗口管理器操作的缺省行为。
如下所示：
wm protocol.MM_TAKE_Focus(puts*window.got foucs*)
wm protocol.M_DELrrz_wINDow(puts“window.is being deleted*;exit)
运行上面的代码，当顶层窗口“.”获得焦点时，程序会输出字符串“window.got
focus”；当我们用窗口管理器的delete（删除）按钮删除顶层窗口“.”时，程序会输出字符串
"window . is being deleted”。
wm命令还可以用来设置或者查询顶层窗口的窗口标题。如下所示：
wm title 7nowtitle?.
加入java编程群：524621833
---
## Page 549
第16章X窗口系统的程序设计
531
客户还可以要求窗口管理器不对顶层窗口进行修饰。当客户做出这样的请求时，窗口管理
器就不会在该顶层窗口的窗口管理器框里提供完成最小化、还原或尺寸调整等操作的按钮。下
面这段代码请求窗口管理器不要给顶层窗口.t加上任何修饰。
toplevel.t
M transient
n deiconify .t
.t
运行这个程序，我们将看到如图16-19所示的窗口。
这段代码演示了窗口管理器命令的好几个功能。应用
程序先请求窗口管理器从屏幕上撒掉自己的顶层窗口；然
后请求窗口管理器去掉该顶层窗口的最小化/最大化修饰；
最后，它请求窗口管理器把自己的窗口重新在屏幕上显示
出来。
16.5.17动态/静态加载
在上一小节里，我们创建了新解释器并静态地加载了
图16-19
Tk。解释器可以用两种办法加载Tk工具包一一静态或者动态，两种办法都要使用load命令。就静
态加载来说，可执行程序必须与Tk预加载在一起。请看下面例子里的代码：
interp create debugInterp
debuginterp eval (
（）po
update
proc debug （interp args){
debugInterp eval [list.t insert end *Sargs*)
debug . *hello world!*
这段代码静态地把Tk可执行程序加载到一个新创建的解释器里。从这个例子还可以看出解