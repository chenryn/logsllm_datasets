other work that uses similar terminology is that of Gitter
and Cheriton [13]. Gitter and Cheriton propose a “content
routing” scheme whereby names of resources are pushed into
the network, and where some routers are capable of forward-
ing packets based on the name of the destination resource.
This content routing service model is quite diﬀerent from
our content-based service in both goals and functionality.
Packet Classiﬁcation. Some applications, including intru-
sion detection systems, ﬁrewalls, and diﬀerentiated services,
require routers to make forwarding decisions based on an
extended set of header ﬁelds, or even payload data. This
decision process, also called packet classiﬁcation, has been
studied extensively and admits fast solutions [3]. The al-
gorithms developed for packet classiﬁcation, however, are
applicable only to a reduced subset of our content-based
forwarding problem. The reason for this incompatibility
is twofold. Firstly, in packet classiﬁcation, the selection is
made by looking up a limited set of predeﬁned ﬁelds. This
gives these algorithms direct access to the values of ﬁelds
of interest, and also allows them to construct specialized in-
dexes for their speciﬁc data types. Conversely, messages in a
content-based network have a less rigid structure, consisting
of arbitrary sets of attributes in which each attribute is iden-
tiﬁed by its name. This requires an additional search process
and more conservative matching strategies. Secondly, exist-
ing packet classiﬁcation algorithms are unicast in nature,
whereas content-based forwarding is inherently multicast.
Intentional Naming. The idea of content-based network-
ing is also related to the idea of an intentional naming sys-
tem (INS) proposed by Adjie-Winoto et al. [1]. With INS,
a server announces its services with an “intentional” name,
while a client addresses a message to a server with a query
that speciﬁes the desired properties of the service. INS can
act both as a name-resolution service or a “late-binding”
delivery service. In the ﬁrst case, INS returns a set of IP
addresses, while in the second case, INS forwards the mes-
sage to any one or all the servers it ﬁnds.
One signiﬁcant diﬀerence between the INS model and our
content-based model is in the expressive power of names
versus predicates. Names in INS are essentially an ordered
conjunction of equality or “don’t care” constraints. Instead,
predicates in content-based networking are a disjunctive nor-
mal form (unordered disjunction of conjunctions) of a larger
set of constraints, including inequality (, and (cid:9)=) and
string operators such as substring, preﬁx, and suﬃx, appli-
cable to a richer set of types (strings, numbers, booleans).
This diﬀerence has a signiﬁcant impact on both the evalu-
ation (forwarding) and propagation (routing) of predicates.
We do not see how the architecture and algorithms proposed
by Adjie-Winoto et al. can be adapted to the more expres-
sive language of content-based networking.
Another diﬀerence is in the approach to routing and for-
warding. INS is based on a single data structure to serve as
both a forwarding and routing table. We believe that this
approach has serious problems. In fact, we used this same
approach in our design and implementation of the Siena
publish/subscribe service, only to realize that, while con-
ceptually simpler, it forces the use of data structures and
algorithms that introduce unacceptable performance com-
promises for the forwarding function or the routing func-
tion, or both. Again, the separation of concerns for these
two functions is an integral part of our current approach.
The general routing strategy is also a diﬀerentiator be-
tween our approach and INS. INS propagates intentional
names everywhere, while our strategy is to limit the propa-
gation of predicates using their semantic relations (see Sec-
tion 2.1). Notice that this strategy is not applicable to INS
because it conﬂicts with its name-resolution function.
In
fact, in order to be able to resolve names directly, every
router in INS must maintain the name records for the entire
network.
SDI Problem. Yan and Garcia-Molina ﬁrst suggested the
idea of building indexes of predicates [20]. However, their
context was quite diﬀerent from ours. They were interested
in better solutions to the SDI (selective dissemination of in-
formation) problem, which they characterize as ﬁnding the
set of users interested in a document newly added to some
collection of documents. An example application is a noti-
ﬁcation service for a digital library. The interests of users
are represented by what are called proﬁles. The proﬁles are
compared against a new document to determine a match.
A document in this setting is treated as a set of words,
and a proﬁle is simply a conjunction of words. A proﬁle
matches a document if the document contains all the words
in the proﬁle. Yan and Garcia-Molina recognized that in-
dexing the proﬁles (i.e., the predicates) could greatly speed
up the matching function in the presence of large numbers
of proﬁles. They developed a system called SIFT to demon-
strate their ideas [21]. Yan and Garcia-Molina also describe
an early prototype of a distributed service [21]. However,
the purpose of that service is to oﬀer increased reliabil-
ity through replication, not act as a network of store-and-
forward routers.
Event Matching in Publish/Subscribe Systems. More re-
cently, several researchers have studied the problem of evalu-
ating a possibly large number of predicates against message-
like data (as opposed to a large document) in the domain of
ﬁlter matching for publish/subscribe systems. For this prob-
lem, various forms of decision trees and indexing structures
for subscriptions have been proposed. These eﬀorts can be
classiﬁed into two broad categories based on the strategy
used to search the predicate space. The ﬁrst approach is to
start from the attribute constraints derived from the full set
of subscriptions, and to move through them consulting the
attributes appearing in the message. This approach is used
in the form of a matching tree by Gough and Smith [14] and
by Aguilera et al. [2]. It is also used in the form of a binary
decision diagram by Campailla et al. [6]. The opposite ap-
proach is to start from the attributes of the message, and
to move through them consulting the constraints. This is
the approach used by Yan and Garcia-Molina in SIFT, if
we consider a new document to be a “message” whose “at-
tributes” are formed from the set of words appearing in the
document. It is also the approach used by Fabret et al. in
their publish/subscribe system Le Subscribe [12]. Le Sub-
scribe goes beyond the SIFT indexing scheme by providing a
main-memory matching algorithm that is “processor cache
conscious”, and by providing heuristic optimizations based
on a clustering of subscriptions that share the same equality
constraints over the same attributes.
Contributions. The work presented in this paper generally
conforms to the second approach. We use the indexing data
structure developed by Yan and Garcia-Molina as a starting
point. In particular, we adopt their scheme for maintaining
a global index of attribute constraints whose selection, based
on the attributes of the input message, leads to the rapid
identiﬁcation of matching conjunctions. (Details are given
in Section 4.) However, we have extended their ideas signiﬁ-
cantly, both to enhance the functionality of the matching al-
gorithm and to make it appropriate for use in the forwarding
function of a content-based network. The extensions include
the following contributions.
• We extended the set of types and operators that can
be used in predicates.
SIFT is limited to strings
(i.e., “words”) and the equality operator over strings.
Le Subscribe added integers and their associated re-
lational operators. To this we have added the preﬁx,
suﬃx, and substring operators for strings. These ad-
ditional operators require the careful design and inte-
gration of whole new indexing structures.
• We added the explicit expression of disjunctions to the
model of predicates.
• Given the presence of disjunctions, we developed a
powerful optimization based on the construction of
what we call a selectivity table. The table is used to
summarize for each attribute in the alphabet of at-
tributes, the subset of predicates for which those at-
tributes are required for matching. For instance, in the
r ∧ ct), where cr and c
predicate (cr ∧ cs)∨ (c
(cid:1)
(cid:1)
r represent
constraints on attribute r, and cs and ct represent con-
straints on attributes s and t, if the incoming message
does not contain an attribute r, then we know imme-
diately, without further processing, that the predicate
cannot be matched. To give a ﬂavor of the eﬀectiveness
of this optimization, our results for one set of experi-
ments showed that for an alphabet of 1000 attributes
used in 200000 predicates, we can eliminate 131000 of
those predicates by examining just the ﬁrst 10 of the
1000 entries in the table.
4. FORWARDING ALGORITHM
Recalling the deﬁnitions of Section 2, a forwarding ta-
ble is a one-to-one association of predicates
to inter-
faces. A predicate is a disjunction of conjunctions of
elementary constraints, and a constraint is a quadruple
(cid:11)type, name, op, value(cid:12). For convenience in the following dis-
cussion we refer to conjunctions of constraints simply as ﬁl-
ters. Thus, selection predicates are disjunctions over what
we call ﬁlters.
An example of the logical content of a forwarding table
is shown in Figure 2, where Is is an interface and fs.t is a
ﬁlter in the disjunction of ﬁlters associated with interface Is.
Constraints on individual attributes within a ﬁlter are shown
in the third column of the table. Although not evident in
this particular example, identical ﬁlters can in general be
associated with more than one interface, just as identical
constraints can be associated with more than one ﬁlter.
Forwarding an incoming message m amounts to comput-
ing the set of interfaces associated with a predicate match-
ing m. Because each interface is associated with exactly one
predicate, in the following discussion we use the terms inter-
face and predicate interchangeably. The forwarding function
that we have developed is an evolution of a basic matching
algorithm, which in turn is founded on a particular index
structure representing the forwarding table. This basic al-
gorithm is known as the counting algorithm, and has been
applied to the matching problem in the context of central-
ized publish/subscribe systems [12, 20]. These previous ap-
plications of the counting algorithm have only dealt with
predicates that were conjunctions, not disjunctions.
In order to describe our extended version of the algorithm,
we ﬁrst give a high-level view of the structure of the forward-
ing table and then introduce a simple variant of the count-
ing algorithm that handles disjunctions. This variant can
price
quantity
airline
dest
orig
stock
upgradeable
int
 1000
string
= UA
string
= Atlanta
string
= New York
string
= Chicago
string
= DYS
string
= MSFT
bool
= true
f1.1
f1.2
f2.1
f2.2
f2.3
f2.4
f3.1
2
3
3
2
1
2
2
I1
I2
I3
Figure 3: Representation of the Forwarding Table
of Figure 2
exploit the presence of disjunctions to optimize the match-
ing process somewhat. Further optimizations are described
in sections 4.2 and 4.3.
4.1 Forwarding Table and the Extended
Counting Algorithm
At a high level, the forwarding table is organized as a two-
part, left-to-right structure. The left-hand side is an index of
all the individual constraints found in all the predicates as-
sociated with all the neighbors of the content-based router.
The outputs of the left-hand side (i.e., the individual con-
straints lying at the ends of index paths) are connected as
boolean inputs to the right-hand side of the structure; if the
algorithm arrives at a particular constraint after traversing
the index, then the constraint has been found to be true
for the message. The right-hand side implements a network
of logical connections representing the conjunctions of con-
straints into ﬁlters and the disjunction of ﬁlters into the
predicates of interfaces. Figure 3 shows a schematic view of
that data structure for the example of Figure 2.
Notice that the forwarding table is constructed and used
as a “dictionary” data structure. This means that it is opti-
mized for the lookup operation, while modiﬁcations are han-
dled by rebuilding the table as a whole. This design choice
is based on the assumption that message traﬃc (i.e., lookup
operations) will dominate over control traﬃc (i.e., modiﬁca-
tion operations). Notice also that modiﬁcation operations
can be appropriately buﬀered, and therefore performed at a
manageable rate.
Based on this general data structure, the counting algo-
rithm proceeds as follows. For a given message m, it iter-
ates through the attributes a1, a2, . . . , ak of m. For each at-
tribute ai, it ﬁnds the constraints ci,1, ci,2, . . . ci,ni matched
by ai using the left-hand-side index of the forwarding ta-
ble. Then, iterating through all the matched constraints
c1,1, c1,2, . . . c1,n1 . . . ck,1, ck,2, . . . ck,nk , it ﬁnds the matched
ﬁlters using the right-hand-side boolean network.
proc counting CBF(message m) {
map counters = ∅
set matched = ∅
foreach a in m {
set C = matching constraints(a)
foreach c in C {
if f.interface (cid:9)∈ matched {
counters := counters ∪ (cid:11)f,0(cid:12)
foreach f in c.ﬁlters {
if f (cid:9)∈ counters {
}
counters[f] := counters[f] + 1
if counters[f] = f.size {
output(m,f.interface)
matched := matched ∪ {f.interface}
if |matched| = total interface count {
}
return } } } } } }
Figure 4: Pseudocode of the Counting Algorithm
Figure 4 shows the counting algorithm in pseudocode.
The algorithm uses two running data structures to main-
tain state during the matching process. The ﬁrst structure
is a table of counters (hence the name of the algorithm) for
partially matched ﬁlters. The second data structure is a set
containing the interfaces to which the message should be for-
warded. For each constraint found through the constraint
index, the algorithm increments the counter of all the ﬁlters
linked from that constraint. When a counter associated with
ﬁlter f reaches the total number of constraints linked to f ,
the ﬁlter is satisﬁed and the algorithm adds the interface
linked from f to the set of matched interfaces.
The main diﬀerence between this extended counting algo-
rithm and its more basic counterpart is that having disjunc-
tions of ﬁlters allows us to use the set of matched interfaces
to shortcut the evaluation of the ﬁlters. In particular, we
can eliminate a lookup in the table of counters for all the
ﬁlters linked to an interface that has already been matched.
Moreover, as an additional shortcut, we can terminate the
execution of the whole process for a message as soon as the
set of matched interfaces contains the complete set of neigh-
bor interfaces, since we know that further processing cannot
provide any additional information. Notice that all the sets
and set operations in the forwarding algorithm can be im-
plemented very eﬃciently with bit vectors.
Our extended counting algorithm is really only the start-
ing point for the optimizations leading to a fast forwarding
algorithm. In the remainder of this section we describe two
of those optimizations, each focusing on one of the two sides
of the forwarding table. Evaluations of the eﬀectiveness of
the optimizations are provided in Section 5.
4.2 Multi-Operator Index
The index forming the left-hand side of the forwarding
table is meant to speed up the process of ﬁnding the con-
straints that are satisﬁed by an attribute of an incoming
message. Obviously, the ﬁrst stage in the index should be
based on the constrained attribute’s name and type. In our
implementation we use a straightforward combination of a
standard ternary search trie (TST) for the strings represent-
ing attribute names, and then a simple switch on the type.
Once we have selected the right name and type, we use
subindexes that exploit speciﬁc properties of each constraint
operator. For example,
indexing equality constraints is
an immediate application of traditional indexes, since it is
equivalent to indexing values. To index less-than constraints
on integer attributes (cid:11)int, name, 
<
10
0
3
50
200
5
20
350
string product = apples
int
int
quantity = 10
price = 2500
Figure 5: Example of Integer Constraint Indexing
As mentioned in Section 3, previous algorithms were de-
signed without consideration of the preﬁx, suﬃx, and sub-
string operators for strings. We could use the same approach
for these operators as we do for the integer operators, namely
to create and maintain a separate subindex for each. In fact,
this was what we did in an earlier version of our algorithm.
However, that approach is not optimal for strings, since it
requires a potentially large number of comparisons. In or-
der to support the fuller set of string operators with a very
eﬃcient index structure, we developed a multi-operator in-
dex for string constraints capable of supporting equality,
less-than, and greater-than operators, as well as the preﬁx,
suﬃx, and substring operators all in a single index. The
basic skeleton of this index is a TST that we have extended
in three ways.
• We added the capability of matching partial strings,
which we use to represent preﬁx and substring con-
straints.
• We added a pair of “crown” lists, which we use to link
the sequence of less-than and greater-than constraints
inserted as leaves in the TST.
• We added a pair of backtrack functions that are nec-
essary to move from a partial match to the (alphabet-
ically) closest complete match, which we use to jump