4
14198767 mmcb1k0p12
259
1.79
16
5
512 mmcblk0boot1
doxqo 9
1.79
8
512 mmcb1k0boot0
除了proc条目，还有一种途径可以获得这些设备文件与逻辑功能的映射关系。要做到这一
点，需要检查/dev/block/platform中SoC特定目录的内容。在这里，你可以找到一个名为by-name
的目录，其中每个分区名都被链接到相应的块设备上。以下显示了在与前例同款三星Galaxy
Nexus设备上查看这个目录内容的结果。
she119android:/dev/b1ock/platform/omap/omap_hsmmc 0/by-name $ 1s 1
1rwxrwxrwx rootroot
Lrwxrwxrwx xoot
100x
lrwxrwxrwx root
root
lrwxrwxrwx root
300.1
201301-30 20:43 efs -> /dev/b1ock/mmcb1k0p3
lrwxrwxrwx root
root
lrwxrwxrwx root
lrwxrwxrwx root
300X
2013-0130 20:43 misc -> /dev/b1ock/mmcb1k0p5
lrwxrxrxx root
root
2013-01-30 20:43 param -> /dev/b1ock/nmcb1k0p4
root
2013-0130 20:43 radio -> /dev/b1ock/nmcb1k0p9
root
Lrwxaxrax root
Lrwxrwxrwx root
root
2013-01-30 20:43 userdata -> /dev/block/mmcb1k0p12
lrwxrwxxwx root
root
lrwxrxxrx root root
2013-01-30 20:43 xloader -> /dev/b1ock/mmcb1k0p1
除此之外，还有一些地方可以获取到关于分区布局的信息。/etc/vold.fstab文件、恢复日志
（/cache/recovery/last_log）以及内核日志（通过dmesg或/proc/kmsg）等，都可以在某种情况下获
取到分区布局信息的位置。如果在这些地方都无法获取到，那你还可以使用mount命令或者查
看/proc/mounts，来找到一些关于分区的信息。
3.2理解引1导过程
引导加载程序通常是在硬件开机之后最早运行的代码。在大多数设备上，引导加载程序是厂
商的私有代码，负责对一些底层的硬件进行初始化（设置时钟、内置RAM、引导介质等），并为
装载恢复映像或者将手机设置成下载模式提供支持。引导加载程序本身通常包含多个步骤，但是
在这里我们将它作为一个整体来考虑。
当引导加载程序完成硬件的初始化之后，它从引导分区中将Android内核和initrd装载到
RAM中，最后，它将跳进内核，让内核继续启动的过程。
Android内核负责处理让Android系统在设备上正常运行所需的所有任务。例如，它会初始
化内存、输人/输出（IO）区域、内存保护、中断处理程序、CPU调度器和设备驱动等。最后，
它将挂载root文件系统，并启动最初的用户空间进程：init。
init进程是所有其他用户空间进程的父进程。当它启动时，从initrd服务挂接的root文件系
统仍然是读写权限。/iniLrc脚本作为init的配置文件，指定了初始化操作系统用户空间组件时需
---
## Page 62
46第3章rootAndroid设备
要采取哪些动作，其中包括启动一些Android核心服务，如用于电话通话的rild、用于VPN访问
的 mtpd以及Android调试桥守护进程adbd等。其中的一个服务Zygote，负责创建 DalvikVM，
然后启动第一个Java组件SystemServer。最后，其他的Android框架层服务（如Telephony Manager）
才会被启动。
以下显示了LGOptimus Elite（VM696）手机中的 initrc脚本摘录片段。你可以从Android开
源项目（AOSP）代码仓库的system/core/init/readme.txt文件中找到关于这一文件格式的更多信息。
[- ..]
service adbd /sbin/adbd
disabled
service ri1-Gaemon /system/bin/ri1d
[. . -]
socket ri1d strean 660 root radio
socket ri1d-debug strean 660 radio system
group radio cache inet misc audio sdcard_rw gcon_oncrpe diag
100xx08n
[- .-]
/system/bin --zygote --start-system-server
socket zygote strean 660 root system
onrestart write /sys/android_power/request_state wake
onrestart restart sedia
onrestart write /sys/power/state on
[. ..]
onrestart restart netd
系统启动完毕后，一个ACTION_BOOT_COMPLETED事件将会被广播，发给事先在其Manifest
文件中注册接收这个广播Intent的所有应用。当这个动作完成后，系统才算完全启动。
进入下载模式
在对引导过程的描述中，我们已经提到引导加载程序通常都支持将手机设置为下载模式。这
种模式能够让用户在底层更新手机的持久性存储，这个过程通常被称为“刷机”。视具体的设备
而定，刷机途径可能包括stboot协议或厂商专有协议，或者两种协议都支持。举例来说，三星
GalaxyNexus同时支持专有ODIN模式和fastboot模式。
注意fastboot模式是通过USB将完整硬盘映像刷到特定分区上的标准Android协议。fastboot
客户端工具是一个命令行程序，你可以从Android软件开发工具包（SDK）中获取，下
载地址为https:/developer.android.com/SDK/，或者从AOSP代码仓库中获取。
进人下载模式等不同模式的方法，取决于引导加载程序的实现。当在启动时按住特定的组合
键后，引导加载程序会启动下载模式，而不是进行正常的Android内核引导过程。对于不同的设
备型号，具体的组合键也是不同的，但你通常可以很容易在网上找到这些信息。当设备进人下载
模式后，它将等待PC通过USB进行连接。图3-1显示了进入fastboot模式和ODIN模式的屏幕。
---
## Page 63
3.3引导加载程序的锁定与解锁4
47
Start
Start
3
图3-1Fastboot 和 ODIN 模式
当宿主计算机和引导加载程序之间建立起USB连接，它们之间将会使用设备支持的下载协
议进行通信。这些协议为执行各种任务提供了便利，包括重刷NAND分区、重启设备、下载与
执行替换的内核映像等。
3.3引导加载程序的锁定与解锁
一般面言，通过在引导加载程序层次上实现一些限制，对引导加载程序进行锁定，可以防止
终端用户修改设备固件。这些限制取决于制造商的具体决策，可能会有所不同，但普遍都会采用
密码学的签名验证机制来阻止设备被刷上或执行未经合法签名的代码。某些廉价的Android设备
并不包含任何对引导加载程序的限制。
在GoogleNexus设备上，引导加载程序默认情况下是锁定的。然而存在着一个官方的机制，
可以让机主对其进行解锁。终端用户如果想运行一个定制内核、恢复镜像或操作系统镜像，那么
就需要首先对引导加载程序进行解锁。对于这些设备，解锁引导加载程序的过程很简单，只要使
设备进人fastboot模式并运行命令fastbootoem unlock即可。这会需要命令行模式的fastboot
客户端工具，它包含在Android SDK以及AOSP代码库中。
一些制造商也支持对他们设备上的引导加载程序进行解锁，但取决于不同的设备型号。在某
些情况下，解锁使用通过fastboot的标准OEM解锁过程。然而，在一些情况下，需要涉及一些
专有机制，比如登录一个网站或解锁门户页面。这些门户页面通常要求机主登记他的设备，并放
弃他的保修，才能够解锁设备的引导加载程序。在写作本书时，HTC、摩托罗拉和索尼至少允许
用户对他们的部分设备进行解锁
对引导加载程序进行解锁会带来严重的安全隐患。如果这个设备丢失或者被盗，设备上的所
有数据可以被攻击者轻易地恢复窃取。只需上传定制的Android引导镜像，或者刷定制的恢复镜
像，攻击者就对设备所有分区上的数据拥有完全访问权，其中包括Google账号、文档、联系人、
---
## Page 64
48第3章rootAndroid设备
存储的口令密码、应用数据、照片以及更多个人信息。正因为如此，当解锁一个加锁的引导加载
程序时，会执行一次恢复出厂设置，从而确保所有终端用户的数据被删除，让攻击者无法访问到
这些数据。
警告强烈建议使用Android设备的加密功能。即使所有数据都已被删除，对子一些设备，仍
然有可能通过取证手段恢复被别数据。
官方和定制恢复镜像
Android的恢复系统是以软件更新包替换设备预装系统软件的一套Android标准机制，这个
过程不会擦除用户数据。这个系统主要用来应用手动或通过OTA（Over-the-Air，无线下载）方
式下载更新，需要在重启之后对这些更新进行离线应用。除了应用OTA更新之外，恢复系统还
可以执行其他任务，比如擦除用户数据和缓存分区等。
恢复镜像存储在恢复分区中，包含一个微型的Limux镜像，该镜像只有一个简单的用户界面，
通过硬件按钮来进行控制。官方的Android恢复镜像特意设计成只包含非常有限的功能，刚刚达
到Android兼容性定义文件（http:/source.android.com/compatibility/index.html）的要求。
与访问下载模式类似，你可以在设备启动时按一个特定的组合键进人恢复模式。除了使用按
键，还可以通过adbrebootrecovery命令，指示一个已启动的Android系统重启并进人恢复
模式。Android调试桥（ADB）命令行工具可以从Android SDK及AOSP代码仓库中获取到，获
取路径为：htp:/developer.android.com/sdk/index.html。
恢复模式中使用最为普遍的一个特性是应用更新包。更新包含有一个压缩文件（包含待复制
到设备中的一组文件）、一些元数据和一个更新器脚本。更新器脚本会告诉Android的恢复系统，
需要在设备上执行哪些操作才能应用更新修改。其中可能包括挂载系统分区，确认设备和操作系
统的版本与更新包应用的目标是否匹配，验证将被替换的系统文件的SHA1散列值等。更新包会
通过一个RSA私钥进行密码学签名，而恢复系统将在应用更新之前，使用对应的公钥来验证签名的
合法性。这确保只有经过认证的更新才能被应用。如下片段显示了一个典型OTA更新包中的内容。
●解压Nexus4的一个OTA更新包
Sunzip 625f5f7o6524.signed-occam-JoP40D-from-J0r40c.625f5f7c.zip
Archive:625f5f7c6524.signed-occam-J0P40D-from-J0P40C.625f5f7c.zip
s1gned by SignApk
inflating: METAINP/com/android/metadata
inf1ating: MBTAINP/com/google/android/update-binary
inf1ating: METAINF/com/google/android/updater-script
inflating: patch/system/app/ApplicationsProvider .apk-p
Inflating: patch/system/app/ApplicationsProvider, odex-p
inflating: patch/system/app/BackupRestoreConfirmation.apk.p
inflating: patch/systen/app/BackupRestoreConfirmation.odex.p
[ . - - ]
inflating: patch/system/1ib/1ibwebcore,so.p
---
## Page 65
3.3引导加载程序的镇定与解锁
49
inflating: patch/systen/1ib/1ibwebrtc_audio_preprocessing.so .p
inflating: recovery/recovery-from-boot .p
Inflating:
1recovery/etc/Insta11-recovery .sh
inflating: META-INF/com/android/otacert
Lnflating: META-INF/MANIP&ST.MP
inflating: META-INP/CERT SF
Inflating: METAINP/CERT.RSA
定制Android恢复镜像对大多数设备都存在，即使对于某款设备没有公开资源，你也可以轻
松地从AOSP代码仓库中获取官方Android恢复源代码，并对其进行定制修改，从面创建出一个
定制的恢复镜像。
定制恢复镜像中包含的最普遍的修改包括：
口包含一个完整的备份和恢复功能（如NANDroid脚本）；
口允许未签名的更新包，或者允许使用自签名的软件包；
口选择性地挂载设备分区或SD卡；
口为SD卡或数据分区提供USB大容量存储访问：
口提供完全的ADB访问支持，并以root方式运行ADB守护进程；
口包含一个完全功能的BusyBox二进制程序。
ClockworkMod恢复镜像项目以及TeamWin恢复镜像项目（TWRP）是非常流行的定制恢复镜
像资源，为许多设备提供了支持。图3-2显示了官方恢复镜像与ClockworkMod恢复镜像的屏幕对比。
图3-2Android恢复镜像与 ClockworkMod恢复镜像
警告在你的Android设备上保持一个去除签名限制或者拥有究全暴露ADB访问的定制恢复镜