图22-32 运行程序\
这时候会发现IDA退出调试页面了，再次进入调试页面，运行，还是退出调试页面了。似乎没法调试了。
其实这里是阿里做了反调试侦查，如果发现自己的程序被调试，就直接退出程序。那么怎么知道有人调试呢？这里限于篇幅，只是简单介绍一下原理。
前面说到，IDA是使用android_server在root环境下注入到被调试的进程中，那么这里用到一个技术就是Linux中的ptrace，关于ptrace这里也不解释了，大家可以自行的去搜一下ptrace的相关知识。那么Android中如果一个进程被另外一个进程ptrace了之后，在其status文件中有一个字段TracerPid可以标识是被哪个进程trace了，可以使用命令查看到被调试的进行信息status文件在：/proc/\[pid\]/status，如下所示：
::: bodypic-c
![](OEBPS/Images/346-2-i.jpg){.calibre538}
:::
这里的进程被27445进程trace了，在用ps命令看看27445是哪个进程：
::: bodypic-c
![](OEBPS/Images/347-i.jpg){.calibre75}
:::
果不其然是android_server进程。知道原理了，也大致猜到了阿里在底层做了一个循环检测这个字段如果不为0，那么代表自己进程有人trace，那么就直接停止退出程序，这个反调试技术用在很多安全防护的地方。
那么下面就来看看如何应对这个反调试？刚刚看到，只要一运行程序，就退出了调试界面，说明，这个循环检测程序执行的时机非常早，那么现在知道的最早的两个时机是：一个是.init_array，一个是JNI_OnLoad。
.init_array是一个so最先加载的一个段信息，时机最早，现在一般so解密操作都是在这里做的。JNI_OnLoad是so被System.loadLibrary调用的时候执行，它的时机要早于哪些native方法执行，但是没有.init_array时机早。知道了这两个时机，下面先来看看是不是在JNI_OnLoad函数中做的策略，所以需要先动态调试JNI_OnLoad函数。
既然知道了JNI_OnLoad函数的时机，如果把检测函数放在这里的话，不能用之前的方式去调试了，因为之前的那种方式时机太晚了，只要运行就已经执行了JNI_OnLoad函数，所以就会退出调试页面，幸好这里IDA提供了在so文件load的时机，只需要在Debug
Option中设置一下就可以了，在调试页面的Debugger选择Debugger
Option选项，如图22-33所示。
然后勾选Suspend on library load/unload即可，如图22-34所示。
::: bodypic-c
![](OEBPS/Images/22a33-i.jpg){.calibre836}
:::
图22-33 设置Debugger选项
::: bodypic-c
![](OEBPS/Images/22a34-i.jpg){.calibre837}
:::
图22-34 勾选Suspend on library load/unload
这样设置之后，还是不行，因为程序已经开始运行，就在static代码块中加载so文件了，如图22-35所示。static的时机非常早，所以这时候，需要让程序停在加载so文件之前即可。
::: bodypic-c
![](OEBPS/Images/22a35-i.jpg){.calibre838}
:::
图22-35 static代码块中加载so文件\
那么想到的就是添加代码waitForDebugger，这个方法就是等待debug，还记得在之前的调试smali代码的时候，就是用这种方式让程序停在了启动初，然后等待去用jdb进行attach操作。
这一次可以在System.loadLibrary方法之前加入waitForDebugger代码即可，但是这里不这么干了。还有一种更简单的方式就是用am命令，am命令本身可以启动一个程序，当然可以用debug方式启动：
::: bodypic-c
![](OEBPS/Images/348-i.jpg){.calibre839}
:::
这里一个重要参数就是-D，用debug方式启动：
::: bodypic-c
![](OEBPS/Images/348-2-i.jpg){.calibre397}
:::
运行完之后，设备是出于一个等待Debugger的状态，如图22-36所示。
::: bodypic-c
![](OEBPS/Images/22a36-i.jpg){.calibre840}
:::
图22-36  程序处于等待调试状态\
这时候，再次使用IDA进行进程的附加，然后进入调试页面，同时设置一下Debugger
Option选项，然后定位到JNI_OnLoad函数的绝对地址，如图22-37所示。
但是发现，这里没有RX权限的so文件，说明so文件没有加载到内存中，想一想还是对的，因为现在的程序是wait
Debugger，也就是还没有走System.loadLibrary方法，so文件当然没有加载到内存中，所以需要让程序跑起来，这时候可以使用jdb命令去attach等待的程序，命令如下：
::: bodypic-c
![](OEBPS/Images/348-3-i.jpg){.calibre100}
:::
::: bodypic-c
![](OEBPS/Images/22a37-i.jpg){.calibre841}
:::
图22-37 定位到JNI_OnLoad绝对地址
其实这条命令的功能类似于前一章中说到用Eclipse调试smali源码的时候，在Eclipse中设置远程调试工程，选择Attach方式，调试机的ip地址和端口，还记得8700端口是默认的端口，但是运行这个命令之后，出现了一个错误：
::: bodypic-c
![](OEBPS/Images/348-4-i.jpg){.calibre93}
:::
::: bodypic-c
![](OEBPS/Images/349-i.jpg){.calibre303}
:::
无法连接到目标的VM，那么这种问题大部分都出现在被调试程序不可调试。可以查看apk的android：debuggable属性：\
::: bodypic-c
![](OEBPS/Images/349-2-i.jpg){.calibre842}
:::
果不其然，这里没有debug属性，所以这个apk是不可以调试的。需要添加这个属性，然后再回编译即可：
::: bodypic-c
![](OEBPS/Images/349-3-i.jpg){.calibre843}
:::
回编译：
::: bodypic-c
![](OEBPS/Images/350-i.jpg){.calibre844}
:::
签名apk：
::: bodypic-c
![](OEBPS/Images/350-2-i.jpg){.calibre153}
:::
然后再次安装，使用am命令启动。
1）运行命令：
::: bodypic-c
![](OEBPS/Images/350-3-i.jpg){.calibre147}
:::
出现Debugger的等待状态。
2）启动IDA进行目标进程的Attach操作。
3）运行命令：
::: bodypic-c
![](OEBPS/Images/350-4-i.jpg){.calibre845}
:::
4）设置Debugger Option选项。
5）点击IDA运行按钮，或者F9快捷键，运行。
::: bodypic-c
![](OEBPS/Images/350-5-i.jpg){.calibre433}
:::
看到了，这次jdb成功的attach住了，debug消失，正常运行了，但是同时弹出了一个选择提示，如图22-38所示。
::: bodypic-c
![](OEBPS/Images/22a38-i.jpg){.calibre846}
:::
图22-38 so文件选择框
这时候不用管它，全部选择Cancel按钮，然后就运行到了linker模块了，如下所示：
::: bodypic-c
![](OEBPS/Images/350-6-i.jpg){.calibre847}
:::
::: bodypic-c
![](OEBPS/Images/351-i.jpg){.calibre848}
:::
说明so已经加载进来了，再去获取JNI_OnLoad函数的绝对地址，如图22-39所示。
::: bodypic-c
![](OEBPS/Images/22a39-i.jpg){.calibre849}
:::
图22-39 获取JNI_OnLoad函数的绝对地址
用Ctrl+S查找到了基地址7515A000，用静态方式IDA打开so查看相对地址1B9C，如下所示：
::: bodypic-c
![](OEBPS/Images/351-2-i.jpg){.calibre850}
:::
绝对地址加上相对地址为7515A000+1B9C=7515BB9C，然后点击G键跳转，如图22-40所示。
::: bodypic-c
![](OEBPS/Images/22a40-i.jpg){.calibre821}
:::
图22-40 跳转到运行的内存地址
跳转到指定的函数位置，如下所示：
::: bodypic-c
![](OEBPS/Images/351-3-i.jpg){.calibre851}
:::
这时候再次点击运行，进入了JNI_OnLoad处的断点，如下所示：
::: bodypic-c
![](OEBPS/Images/352-i.jpg){.calibre852}
:::
下面就开始单步调试了，但是每次到达BLX
R7这条指令执行完之后，JNI_OnLoad就退出了，如下所示：
::: bodypic-c
![](OEBPS/Images/352-2-i.jpg){.calibre853}
:::
经过好几次尝试都是一样的结果，发现这个地方有问题，可能就是反调试的地方了，再次进入调试，看见BLX跳转的地方R7寄存器中是pthread_create函数，这个是Linux中新建一个线程的方法。
阿里的反调试就在这里开启一个线程进行轮询操作，如图22-41所示，去读取/proc/\[pid\]/status文件中的TrackerPid字段值，如果发现不为0，就表示有人在调试本应用，在JNI_OnLoad中直接退出。关于反调试代码在前面已经详细介绍了。
::: bodypic-c
![](OEBPS/Images/22a41-i.jpg){.calibre854}
:::
图22-41 反调试代码\
问题找到了，现在怎么操作呢？只要把BLX
R7这段指令干掉即可，如果是smali代码的话，可以直接删除这行代码即可。但是so文件不一样，它是汇编指令，如果直接删除这条指令的话，文件会发生错乱，因为本身so文件就有固定的格式，比如很多段的内容，每个段的偏移值也是保存的，如果这样去删除会影响这些偏移值，会破坏so文件格式，导致so加载出错的，所以这里不能手动去删除这条指令。还有另外一种方法，就是把这条指令变成空指令，在汇编语言中，nop指令就是一个空指令，它什么都不干，所以这里直接改一下指令即可，arm中对应的nop指令是：00
00 00 00；那么看到BLX R7对应的指令位置为：1C58，如下所示：
::: bodypic-c
![](OEBPS/Images/353-i.jpg){.calibre855}
:::
查看它的Hex内容是37 FF 2F E1，如下所示：
::: bodypic-c
![](OEBPS/Images/353-2-i.jpg){.calibre856}
:::
可以使用一些二进制文件软件进行内容的修改，这里使用010Editor工具进行修改，如下所示：
::: bodypic-c
![](OEBPS/Images/353-3-i.jpg){.calibre857}
:::
直接修改成00 00 00 00，如下所示：
::: bodypic-c
![](OEBPS/Images/353-4-i.jpg){.calibre858}
:::
保存修改之后的so文件，再次使用IDA进行打开查看，如下所示：
::: bodypic-c
![](OEBPS/Images/353-5-i.jpg){.calibre859}
:::
指令被修改成了ANDEQ R0，R0，R0。
修改了之后，替换原来的so文件，再次重新回编译，签名安装。再次按照之前的逻辑给主要的加密函数下断点，这里不需要在给JNI_OnLoad函数下断点了，因为已经修改了反调试功能了，所以这里只需要按照如下简单几步操作即可：
1）启动程序。
2）使用IDA进行进程的attach。
3）找到Java_com_yaotong_crackme_MainActivity_securityCheck函数的绝对地址。
4）打上断点，点击运行，进行单步调试，如下所示：
::: bodypic-c
![](OEBPS/Images/353-6-i.jpg){.calibre347}
:::
::: bodypic-c
![](OEBPS/Images/354-i.jpg){.calibre860}
:::
这里可以单步调试进来了，说明修改反调试指令成功了。
下面就继续用F8单步调试，如下所示：
::: bodypic-c
![](OEBPS/Images/354-2-i.jpg){.calibre558}
:::
调试到这里，发现一个问题，就是CMP指令之后，BNE指令就开始跳转到loc_74FAF2D0处，那么就可以猜到了，CMP指令比较的应该就是输入的密码和正确的密码。再次重新调试，看看R3和R1寄存器的值，如下所示：
::: bodypic-c
![](OEBPS/Images/354-3-i.jpg){.calibre418}
:::
这里的R3寄存器的值就是用寄存器寻址方式赋值字符串的，这里R2寄存器就是存放字符串的地址，看到的内容是aiyou\...但是这里肯定不是全部字符串，因为没看到字符串的结束符：\'\\0\'，点击R2寄存器，进入查看完整内容，如下所示：
::: bodypic-c
![](OEBPS/Images/354-4-i.jpg){.calibre861}
:::
这里是全部内容aiyou，bucuoo。继续查看R1寄存器的内容，如下所示：
::: bodypic-c
![](OEBPS/Images/355-i.jpg){.calibre862}
:::