对于每一部件类型，都创建一个单独的入口、管理器和视图模型。为了使用实现
ICalculator接口的部件，CalculatorImport用于定义Import, 
CalculatorManager用于创建
CompositionHost和加载部件，CalculatorViewModel用于定义绑定到用户界面的属性和命
令。为了使用实现ICalculatorExtension接口的部件，依次定义CalculatorExtensionImport、
CalculatorExtensionManager和CalculatorExtensionViewModel。
先从CalculatorImport类开始。对于第一个示例，只用Program类定义一个属性，来导
入部件。最好为入口定义一个单独的类。有了这个类，还可以定义一个用特性
OnImportsSatisfied注释的方法。这个特性标记匹配入口时调用的方法。在示例代码中，触
发事件ImportsSatisfied。Calculator属性应用了Import特性。这里，类型是Lazy 
，用于以后的实例化。只有访问Lazy类型的Value时，才实例化部件（代码文
件UICalculator / CalculatorViewModels / CalculatorImport.cs）：
    public class CalculatorImport
    {
      public event EventHandler ImportsSatisfied;
      [Import]
      public Lazy Calculator { get; set; }
      [OnImportsSatisfied]
      public void OnImportsSatisfied()
      {
        ImportsSatisfied? .Invoke(this,
          new ImportEventArgs
          {
          StatusMessage = "ICalculator import successful"
          });
      }
    }
CalculatorManager类在构造函数中实例化CalculatorImport类。在InitializeContainer方
法中，实例化ContainerConfiguration类，用传递给方法的类型创建CompositionHost容器。
SatisfyImports方法匹配要导入的出口（代码文件UICalculator / CalculatorViewModels /
CalculatorManager.cs）：
    public class CalculatorManager
    {
      private CalculatorImport _calcImport;
      public event EventHandler ImportsSatisfied;
      public CalculatorManager()
      {
        _calcImport = new CalculatorImport();
        _calcImport.ImportsSatisfied += (sender, e) =>
        {
        ImportsSatisfied? .Invoke(this, e);
        };
      }
      public void InitializeContainer(params Type[] parts)
      {
        var configuration = new ContainerConfiguration().WithParts(parts);
        using (CompositionHost host = configuration.CreateContainer())
        {
        host.SatisfyImports(_calcImport);
        }
      }
      // etc.
    }
CalculatorManager的GetOperators方法调用Calculator的GetOperations方法。这个方法
用来在用户界面上显示所有可用的运算符。一旦定义了计算，就调用InvokeCalculator方
法，传递操作和操作数，再调用计算器中的Operate方法（代码文件
UICalculator/CalculatorViewModels/CalculatorManager.cs）：
    public class CalculatorManager
    {
      // etc.
      public IEnumerable GetOperators() =>
        _calcImport.Calculator.Value.GetOperations();
      public double InvokeCalculator(IOperation operation, double[] operands) =>
        _calcImport.Calculator.Value.Operate(operation, operands);
    }
CalculatorViewModel需要什么？这个视图模型定义了几个属性：CalcAddInOperators
属性列出可用的运算符，Input属性包含用户输入的计算，Result属性显示操作的结果，
CurrentOperation属性包含当前操作。它还定义了_currentOperands字段，其中包含所选的
操作数。使用Init方法初始化容器，从Calculator部件中检索运算符。OnCalculate方法使用
部件进行计算（代码文件UICalculator /CalculatorViewModels/CalculatorViewModel.cs）：
    public class CalculatorViewModel: BindableBase
    {
      public CalculatorViewModel()
      {
        _calculatorManager = new CalculatorManager();
        _calculatorManager.ImportsSatisfied += (sender, e) =>
        {
          Status += $"{e.StatusMessage}\n";
        };
        CalculateCommand = new DelegateCommand(OnCalculate);
      }
      public void Init(params Type[] parts)
      {
        _calculatorManager.InitializeContainer(parts);
        var operators = _calculatorManager.GetOperators();
        CalcAddInOperators.Clear();
        foreach (var op in operators)
        {
          CalcAddInOperators.Add(op);
        }
      }
      private CalculatorManager _calculatorManager;
      public ICommand CalculateCommand { get; set; }
      public void OnCalculate()
      {
        if (_currentOperands.Length == 2)
        {
          string[] input = Input.Split(' ');
          _currentOperands[1] = double.Parse(input[2]);
          Result = _calculatorManager.InvokeCalculator(_currentOperation,
          _currentOperands);
        }
      }
      private string _status;
      public string Status
      {
        get { return _status; }
        set { SetProperty(ref _status, value); }
      }
      private string _input;
      public string Input
      {
        get { return _input; }
        set { SetProperty(ref _input, value); }
      }
      private double _result;
      public double Result
      {
        get { return _result; }
        set { SetProperty(ref _result, value); }
      }
      private IOperation _currentOperation;
      public IOperation CurrentOperation
      {
        get { return _currentOperation; }
        set { SetCurrentOperation(value); }
      }
      private double[] _currentOperands;
      private void SetCurrentOperation(IOperation op)
      {
        try
        {
          _currentOperands = new double[op.NumberOperands];
          _currentOperands[0] = double.Parse(Input);
          Input += $" {op.Name} ";
          SetProperty(ref _currentOperation, op, nameof(CurrentOperation));
        }
        catch (FormatException ex)
        {
          Status = ex.Message;
        }
      }
      public ObservableCollection CalcAddInOperators { get; } =
        new ObservableCollection();
    }
26.5.1 导入连接
入口连接到出口上。使用导出的部件时，需要一个入口来建立连接。通过Import特
性，可以连接到一个出口上。如果应加载多个部件，就需要ImportMany特性，并需要把
它定义为一个数组类型或IEnumerable。因为宿主计算器应用程序允许加载实现了
ICalculatorExtension接口的多个计算器扩展，所以CalculatorExtensionImport类定义了
IEnumerable类型的CalculatorExtensions属性，以访问所有的计算器
扩展部件（代码文件UICalculator/Calculator-ViewModels/CalculatorExtensionImport.cs）。
    public class CalculatorExtensionsImport
      {
        public event EventHandler ImportsSatisfied;
        [ImportMany()]
        public IEnumerable>
        CalculatorExtensions { get; set; }
        [OnImportsSatisfied]
        public void OnImportsSatisfied()
        {
        ImportsSatisfied? .Invoke(this, new ImportEventArgs
        {
          StatusMessage = "ICalculatorExtension imports successful"
        });
        }
      }
Import和ImportMany特性允许使用ContractName和ContractType把入口映射到出口
上。
在创建CalculatorExtensionsManager类时，CalculatorExtensionsImport类的
ImportsSatisfied事件连接到一个事件处理程序上，触发一个事件，再把一条消息写入在UI
上绑定的Status属性中，以显示状态信息（代码文件UICalculator/
CalculatorViewModels/CalculatorExtensionsManager.cs）：
    public sealed class CalculatorExtensionsManager
    {
      private CalculatorExtensionsImport _calcExtensionImport;
      public event EventHandler ImportsSatisfied;
      public CalculatorExtensionsManager()
      {
        _calcExtensionImport = new CalculatorExtensionsImport();
        _calcExtensionImport.ImportsSatisfied += (sender, e) =>
        {
        ImportsSatisfied? .Invoke(this, e);
        };
      }
      public void InitializeContainer(params Type[] parts)
      {
        var configuration = new ContainerConfiguration().WithParts(parts);
        using (CompositionHost host = configuration.CreateContainer())
        {
        host.SatisfyImports(_calcExtensionImport);
        }
      }
      public IEnumerable> GetExtensionInformation() =>
        _calcExtensionImport.CalculatorExtensions.ToArray();
    }
26.5.2 部件的惰性加载
部件默认从容器中加载，例如，调用CompositionHost上的扩展方法SatisfyImports
（）来加载。利用Lazy类，部件可以在第一次访问时加载。Lazy类型允许后期实
例化任意类型T，并定义IsValueCreated和Value属性。IsValueCreated属性是一个布尔值，
它返回包含的类型T是否已经实例化的信息。Value属性在第一次访问包含的类型T时初始
化它，并返回T的实例。
插件的入口可以声明为Lazy类型，如示例Lazy所示（代码文件
UICalculator/CalculatorViewModels/CalculatorImport.cs）：
    [Import]
        public Lazy
 Calculator { get; set; }
调用导入的属性也需要对访问Lazy类型的Value属性进行一些修改。calcImport是
一个CalculatorImport类型的变量。Calculator属性返回Lazy。Value属性以惰
性的方式实例化导入的类型，并返回ICalculator接口，在该接口中现在可以调用
GetOperations（）方法，从计算器插件中获得所有支持的操作（代码文件
UICalculator/CalculatorViewModels/CalculatorManager.cs）。
    public IEnumerable GetOperators() =>
      _calcImport.Calculator.Value.GetOperations();
26.5.3 读取元数据
部件FuelEconomy和TemperatureConversion是实现接口ICalculatorExtension的所有部
件，也是惰性加载的。如前所述，集合可以用IEnumerable类型的属性来导入。部件采
用惰性方式来实例化，属性就可以是IEnumerable>类型。这些部件在实例化前
需要提供它们的信息，才能给用户显示使用这些部件可以导出的内容信息。这些部件还为
使用元数据提供了额外的信息，如前所述。元数据信息可以使用Lazy类型和两个泛型参数
来访问。使用Lazy，其中第一
个泛型参数ICalculatorExtension用于访问实例化类型的成员；第二个泛型参数
ICalculatorExtensionMetadataAttribute用于访问元数据信息（代码文件
UICalculator/CalculatorViewModels/CalculatorExtensionsImport.cs）：
    [ImportMany()]
    public IEnumerable> CalculatorExtensions { get; set; }
方法GetExtensionInformation返回一个Lazy 
的数组，它可以在不实例化部件的情况下访问部件
的元数据信息（代码文件UICalculator 
/CalculatorViewModels 
/
CalculatorExtensionsManager.cs）：
    public IEnumerable> GetExtensionInformation() =>
      _calcExtensionImport.CalculatorExtensions.ToArray();
在初始化时，GetExtensionInformation方法用于CalculatorExtensionsViewModel类，填
充Extensions属性（代码文件UICalculator 
/ 
CalculatorViewModels 
/
CalculatorExtensionsViewModel.cs）：
    public class CalculatorExtensionsViewModel: BindableBase
    {
      private CalculatorExtensionsManager _calculatorExtensionsManager;
      public CalculatorExtensionsViewModel()
      {
        _calculatorExtensionsManager = new CalculatorExtensionsManager();
        _calculatorExtensionsManager.ImportsSatisfied += (sender, e) =>
        {
          Status += $"{e.StatusMessage}\n";
        };
      }
      public void Init(params Type[] parts)
      {
        _calculatorExtensionsManager.InitializeContainer(parts);
        foreach (var extension in
          _calculatorExtensionsManager.GetExtensionInformation())
        {
          var vm = new ExtensionViewModel(extension);
          vm.ActivatedExtensionChanged += OnActivatedExtensionChanged;
          Extensions.Add(vm);
        }
      }
      public ObservableCollection Extensions { get; } =
        new ObservableCollection();
      //etc.
在XAML代码中，绑定了元数据信息。Lazy类型的Metadata属性返回
ICalculatorExtension-MetadataAttribute。这样就可以访问Description、Title和ImageUri，以
进行数据绑定，而无须实例化插件（代码文件
UICalculator/WPFCalculatorHost/MainWindow.xaml）：