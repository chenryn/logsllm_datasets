本例中的第二行可以看做是假警报，
下面的每一行都匹配这种模式：
[1-9]
那么它就被解释为类的一个成员。如果连字符在一个类中
50192241
，则失去其特殊含义。因此，为了匹配算术操作符，
。记住每个字符类都匹配单个字符。如果指
可以是数字、小写字母、问号、逗号、句
第三章
6
，可以在“[1-9]”之后添加
，这会非常混乱。POSIX
了解正则表达式语法
正如我们
---
## Page 50
而匹配这样的行，例如：
和一个双引号（注6）。这样设置是为了避免匹配下面的行：
该表达式匹配字符串“.DS”其后依次跟随一个空格、
请看下面的正则表达式：
该表达式匹配任意辅音，
匹配任意辅音，
排除特殊字符有时比显示地列出想要匹配的所有字符更方便。例如，如果想要
它匹配字面表中所有的大写和小写字面以及所有特殊字符，例如标点符合。
字字符：
5）以外的没有列在方括号中的任意字符都将匹配。下面的模式将匹配任意非数
的脱字符（）将类中的所有字符由排除在被匹配之外。相反，除换行符（注
通常，字符类包括在哪个位置想要匹配的所有的字符。在类中作为第一个字符
排除字符类
“-”或“/”都可能是定界符。在第一个位置放置连字符确保它在字符类中解
下面的正则表达式指示每个字符位置可能的数值范围：
尝试用正则表达式匹配日期是一个有趣的问题。下面是两种可能的格式：
更杂乱了。
.DS "2"
\.DS"[^1]"
.DS "|"
[^aeiou]
[6-0,]
[0-1] [0-9][-/][0-3][0-9] [-/] [0-9] [0-9]
MM/DD/YY
MM-DD-YY
DS "1"
QQ群：
可以简单地排除元音：
50192241
大写的任意元音，任意标点符合或特殊的字符。
50-
第三章 
一个双引号、一个非数字
了解正则表达式语法
---
## Page 51
[:blank:]
[:alpha:]
[: alnum:]
类
表3-3 POSIX字符类
配字符。
任意单个字母字符或感叹号，
所有的这3中结果都必须出现在括号表达式的方括号中。例如［[:alpha:]!匹配
可以由其他标记。如下：
POSIX还改变了常用的术语，
些字符序列应该被作为单个单元看待。
为了适应非英文的环境，
展的正则表达式，egrep和awk使用这种正则表达式。
类正则表达式：基本的正则表达式（BRE）
POSIX标准对正则表达式字符和操作符的含义进行了形式化。这种标准定义了两
POSIX字符类补充
注
注
注4:
这种语法还可以用来限制匹配的范围，正如随后要看到的那样。
母
为
它
类
h。在法语地区中，［[=e=]]可以匹配任意e、é或é。表3-3列出了类及其匹
“括号表达式”
。该标准提供了附加的字母序列，
的功能。例如，法文é是一个字母字符，但是使用典型的字符类[a-z]不匹配
9
5
的字符元素（由[=和=]包围）组成。
等价类。等价类列出了应该看做是等价的字符集，例如e和é。它由地区化
整理符合。
字符类。由[:和:]包围的关键字组成的POSIX字符类。关键字描述了不同的
字
符
类
在awk中，换行符也可以被匹配。
“15/32/78”这样不可能的日期。
注意这个表达式匹配以指定定界符分隔的日期表达式，即使是
例如，
QQ群：
宗
对最初的Bourne shell是特殊的。
白在命令行结尾处键入这种模式时，务必用单引号包围它。脱字符
,和.]包围的字符组成。
整理符合是多字符的序列。表示这些字符应该被看做是一个单
空格和制表符
字母字符
。在括号表达式中，除了字面字符（例如a,!等等）以外，还
可
元
打印的字符（包括空白字符）
配字符
50192241
POSIX标准增强了匹配不在英文字母表中的字符的字符
我们一直称为“字符类”的东西在POSIX标准中称
［[.ch.]匹配整理元素ch，但不只匹配字母c或字
当匹配和整理（排序）字符串数据时，这
-51-
 grep和sed使用这种正则表达式;扩
第三章
了解正则表达式语法
---
## Page 52
们来看一系列数字：
而且，如果由星号修饰的字面字符确实存在，那么有可能出现多次。例如，我
不管单词“hypertext”是否出现在引号中都会被匹配。
那里，那可能会不止出现一个。可以使用星号元字符匹配出现在引号中的单
星号（*）元字符表示它前面的正则表达式可以出现零次或多次。也就是说，
重复出现的字符
使用术语“字符类”来表示方括号中的字符表。
因为这些特征还不能被广泛地应用，本书的脚本不依赖它们，而且我们要继续
统文档来查看它们是否可用。
awk和GNU sed支持字符类符号，但不支持另外两个括号符号。可以检查本地系
当厂商完全实现了POSIX标准时，
[: xdigit:]
[:upper :]
[: space:]
[:punct:]
[:print:]
[: lower :]
[: graph:]
[:digit:]
[:cntrl:]
"*hypertext"*
5010
0
5
QQ群：
十六进制数字
大写字符
空白字符
标点符号字符
可打印的字符（包括空白字符）
小写字符
可打印的和可见的（非空格）字符
数字字符
控制字符
50192241
，这些特征逐渐向sed和awk的商业版接近。GNU
第三章 
了解正则表达式语法
并且如果它在
如
---
## Page 53
示例文件：
当星号用于修饰字符类时，则可以匹配类中的任意数目的字符。例如下面5行的
通过指定下面的表达式可以打印带有标记的所有的行：
作为另一个例子，
被匹配的字符串时这就很重要了。
“.*“进行匹配的范围总是最大的。目前它似乎并不重要，但是一旦学习替换
它匹配该行上的第一个引导和最后一个引导之间的所有字符以及引号。使用
可以指定：
识两个固定的字符串之间的字符的跨度。如果想要匹配引号中的任意字符串，
当星号元字符前面由句点元字符时，biao是匹配任意数目的字符。这可用于标
标记语言如SGML、HTML和Ventura Publisher。
或多个）空格，可以使用下面的表达式来完成：
味着它可能出现也可能不出现。
匹配除前两行以外的所有的行。
将匹配所有的行，
正则表达式
I can do it
口口
cant do it 
can’ t do it
can not do it
cannot do it
$ grep’’
[15]00*
[15]0*
5000
1000
500
*"
QQ群：
一对尖括号时标记语言中用来包围格式化指令的普通符号，
而正则表达式
50192241
 sample
，常用类似的方法匹配一个或多个（而不是灵个
第一个0是字面值，但是第二个由星号修饰，
第三章
了解正则表达式语法
意
---
## Page 54
它匹配“80”后面跟有一个“2,
技术术语“closure（闭合）”有匹配“零次或多次”的能力。egrep和awk使用
有4个成功和1个失败（肯定语句）。注意如果正则表达式试图匹配字符串
星号使得类中的任意字符以任意顺序匹配，并且匹配任意多次的出现。如下所
的正则表达式：
如果我们想要匹配以上语句中的否定语句，但不匹配肯定语句，可以使用下面
也许你已经发现，
单词是什么？
Shell中的？表示单个字符，
符
“8086"
问
的
元
正则表达式的一次或多次出现。前面匹配一个或多个空格的示例可以简化为：
的
它将匹配所有的行。
“bookish"
“book"”
“can”和“t”之间的任意个字符，如下例所示：
，然后跟字符串“86.”
匹配“80286”
“*”号相对应。
字符加号可以被认为是“至少一个”的前导字符。事实上，
好（？）匹配零次或一次出现。例如，在前面的示例中，
元字符扩展集提供了几个非常有用的closure的变化。加号（+）匹配前面的
*
80 [234]?86
can. *t
cant do it
can’ t do it
can not do it
cannot do it 
A
can[no’］*t
S grep "can[ no' ］*t" sample 
，搜索会命中包含单词“book”和“books”的行，而且还有单词
可以用egrep或awk编写正则表达式：
QQ群：
有时匹配完整的单词很难。例如，
第一部分
“80386”和“80486”
50192241
等效于正则表达式中的“.”
，不要混淆表达式中的？和shell中的？通配符。
- 54 -
一个“3，
’。很显然可以在“book”前后使用空
。如果我们还想匹配字符串
第
三章
如果想匹配模式
一个“4，
了解正则表达式语法
我们使用正则表达
，它和许多人使用
，”或者没有字
---
## Page 55
有两个元元字符用于指定字符串出现在行首或行末的上下文。脱字符（）元字
定位元字符
会看到用于搜索单词更全面的正则表达式。
注意的是使用的表达式应该完整。在本章“单词是什么？第二部分”中我们将
式保持简单并允许遗漏。然而，
尝试用正则表达式包括一切并不实际，尤其是在使用grep时，有时最好使表达
们必须求助于字符类，这些在后面将会看到。
来指定想要匹配的位置的所有字符。
将与“book,
一部分，匹配前面表达式的0次或1次出现。因此，表达式：
这个表达式匹配字符串“book”
次出现。
当将星号和通配符元字符（.）结合起来使用时，
这样就可以匹配“book”或“books”。然而，如果单词后面有句点、逗号、问
了匹配单数或复数单词，可能要使用星号元字符：
格来限制匹配情况。
“bookworm”匹配。为了排除类似“booky”这样的单词，
使
着
好
然
（注意只有第二行可以和固定字符串“book”匹配。）表达式“book.*
用不同的修饰符可以排除这些匹配中的两种。问号(？)是元字符的扩展集的
”匹配包含类似与单词“booky”
空格。
或引号时就不会匹配“book”
而，
book.?
It is amazing to think that it was called a "harmful book" when 
Here are the books that you requested
book.*
books*
book
Yes,
这个表达式只匹配单词“book”
，下面是将要匹配的几行：
，在前面的示例中，
it is a good book
QQ群：
”
“books,
50192241
可以像下面这样编写比较完整的正则表达式：
”和“booky”匹配，
 for children 
当在sed中使用正则表达式进行替换时，就需要
其后面跟有任意个字符或没有字符，最后跟
-55-
“bookworm”和“bookish”的行。通过
它会丢到它的复数形式“books”。为
第三章
可以匹配任意字符的零次或多
而不与“bookish”和
了解正则表达式语法
---
## Page 56
这可能是你想使用sed来处理的事情。
同样，
用于匹配空行，即使其中包含空格：
如果想使用sed来删除空行，那么这个正则表达式很有用。下面的正则表达式可
可以使用这种模式计算文件中的空行数，在grep中使用计数选项-c:
可以使用两个连续的定位元字符来匹配空行，即：
空
个句点。如果请求或宏有一个参数，那么它通常后面跟有一个空格。用于搜索
Troff请求和宏必须在行的开始处输入。它们是两个字符的字符串，前面带有一
印包含制表符的任意行。
(·表示可见的制表符，
置。例如，
符的正则表达式。这些通常称为“定位符”
这
通
符是指示开始的单字符正则表达式。
果
格的行”
这个表达式匹配“行首有一个句点，随后跟有两个字符的字符串，然后是一个
想找到（并删除）它们，下面的正则表达式可以匹配在结尾处有一个或多个
常
使用vi输入要由troff处理的文本，
可以使用以下表达式匹配整个行：
^□*$
$grep 
S
\...口
口
□*$
可以使用以下表达式打印以制表符开始的行：
QQ群：
-C
50192241
它实际上是不可见的。）没有~元字符，这个表达式将打
 ch04
：美元符号（$）元字符是指示行结尾的单字
56