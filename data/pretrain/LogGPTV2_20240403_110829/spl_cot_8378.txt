User: 为了实现日志查询分析需求，编写了一段 SPL 语句，请你从专家角度，逐步思考分析需求，尽量详细的解释语句内容是如何实现需求的。

## 分析需求
Windows_AD数据，编写查询语句实现如下分析场景非工作时间用户登录明细

## SPL 语句
appname:windows AND (json.event_id:4624 OR json.event_id:4625 ) AND NOT (json.username:*$ OR json.username:SYSTEM)
|eval time=formatdate(timestamp)
|eval hour = tolong(formatdate(timestamp,"HH"))
|eval day = tolong(formatdate(timestamp,"ee"))
|where day >5 || (hour <8 || hour >19)

## 具体解释

Assistant: 这段 SPL（Security Protocol Language，用于安全事件查询和分析的语言）语句的目标是查询 Windows Active Directory (AD) 的日志数据，并从中提取出非工作时间的用户登录明细。接下来我将逐行分析该查询语句的组成部分以及其背后的逻辑。

### 查询语句分析

#### 第一部分：数据过滤

`appname:windows AND (json.event_id:4624 OR json.event_id:4625 ) AND NOT (json.username:*$ OR json.username:SYSTEM)`

这一部分主要进行数据过滤，确保只选取与 Windows 系统相关的日志事件。

1. `appname:windows`：只选取与 Windows 系统相关的日志条目。
2. `json.event_id:4624 OR json.event_id:4625`：选取事件 ID 为 4624 或 4625 的日志条目。这两个事件 ID 通常与用户登录相关。
3. `NOT (json.username:*$ OR json.username:SYSTEM)`：排除掉用户名是“$”开头或为“SYSTEM”的条目，因为这些通常不是普通用户的登录记录。

#### 第二部分：时间处理和提取

接下来的部分对时间进行处理和提取。

`eval time=formatdate(timestamp)`：这一行将时间戳转换为可读的日期格式。

接下来的两行提取出小时和星期几的数值：

`eval hour = tolong(formatdate(timestamp,"HH"))`
`eval day = tolong(formatdate(timestamp,"ee"))`

其中，`HH` 表示提取小时部分，`ee` 表示提取星期几（周几用数字表示，例如周一为1，周二为2等）。

#### 第三部分：时间条件筛选

`where day >5 || (hour <8 || hour >19)`

这部分对筛选出来的时间数据进行进一步处理，以确定非工作时间。

1. `day > 5`：排除周六和周日的数据。
2. `hour < 8 || hour > 19`：表示时间在早上8点之前或晚上19点之后，这通常被认为是非工作时间。

### 总结

综合以上分析，这段 SPL 语句首先从 Windows AD 日志中筛选出与用户登录相关的条目，并排除掉系统登录记录。然后，它提取出这些条目的时间信息，并根据非工作时间的定义（周六周日和早晚高峰之外的时间）进行进一步的筛选。最终，这条语句将返回非工作时间的用户登录明细，这可以帮助安全分析师更好地了解用户的行为模式，以及在非工作时间是否有异常登录活动。