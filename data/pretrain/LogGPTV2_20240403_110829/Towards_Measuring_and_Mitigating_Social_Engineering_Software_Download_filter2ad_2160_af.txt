8 Related Work
Social engineering is primarily an attack on users, not
systems. The fundamental concepts that are employed to
exploit the user are rooted in modern psychology, specif-
ically in the study of persuasion [13] and deception [41].
SE attacks have been studied in [21, 27]. While these
works study SE tactics in general, they do not focus on
SE download attacks. To the best of our knowledge, the
only systematic study on SE malware is [8], which dis-
cusses the psychological and technical ploys adopted by
SE attacks and some trends in SE malware. However, [8]
focuses on malware that spreads via e-mail and on SE
tactics used by malware to lure the user to activate (i.e.,
run) the malicious code. In addition, the data analyzed
in [8] is limited to malware attack case studies and statis-
tics published by others in the VirusBulletin journal un-
til 2010. In contrast, we focus on web-based SE down-
loads, and on reconstructing and analyzing how users are
tricked into downloading malicious software in the first
place. Also, our analysis is based on recent real-world
instances of successful SE attacks collected from a live
network.
Malware downloads have been studied in a number
of works [11, 22, 34, 39]. For instance, [34, 39] use a
content-agnostic detection approach that relies on com-
puting a reputation score for the domains/IPs from which
malware downloads are served. However, [34, 39] are
generic malware download detection systems that offer
no understanding of what caused a malware download
in the first place. In other words, they cannot identify
the origin of the attack, but only its side effects (i.e., only
the malware download even itself), and therefore offer no
clue on whether an infection was caused by a SE attack.
Other works focus on the properties of malware drop-
pers [11, 22], whereby already infected machines down-
load malware updates or new malware strains. In con-
trast, we study how users fall victim to web-based SE
download attacks, and design a detection system that can
accurately detect ad-driven SE downloads.
Researchers have also separately examined specific
types of SE malware attacks, such FakeAVs [15, 16, 19,
25,37]. Our work is different because we propose a gen-
eral approach to studying, measuring and classifying SE
download attacks on the web. We do not limit ourselves
to specific attack types such as Fake AVs. Therefore, our
work has broader applications, and also provides mit-
igation against generic ad-based SE download attacks,
which represent a large percentage of all SE download
attacks we observed in the wild.
Other works have focused on traffic redirection chains
to understand and detect malicious websites and at-
tack delivery [23, 26, 38]. Among these systems, Mad-
Tracer [23] studies malicious advertisement, including
ad chains that deliver malware downloads. This is done
by crawling popular websites, and using a supervised
classifier trained on data labeled by leveraging domain
name blacklists (e.g., Google SafeBrowsing). While part
of our work, namely our ad-driven SE download detec-
tion system, also leverages some properties of advertise-
ment chains to detect ad-driven malicious downloads, it
is important to notice that we focus specifically on in-
the-wild SE download attacks and are able to identify a
large variety of SE download attacks. For instance, [23]
only reports fake anti-viruses (AVs) as malware deliv-
ered via ad-based scams. Instead, in our study we find
many other types of SE-driven downloads that leverage
a variety of deception and persuasion tactics.
In fact,
our measurements show that fake AVs represent only a
small fraction ( less than 1%) of all SE attacks. In addi-
tion, rather than actively looking (or crawling) for possi-
ble malware downloads on popular websites, we collect
live SE attacks by directly witnessing successful attacks
against users in a large academic network. This allows
us to collect successful SE attacks, rather than possible
attacks as done in [23].
In our work, we use a combination of web traffic re-
construction and analysis to trace back the origin of the
attacks, namely the SE tactic that tricked the user into
downloading malicious software. Researchers have stud-
ied web traffic reconstruction in [12, 29, 30, 42]. Among
these, the closest to our work is WebWitness [30], a re-
USENIX Association  
25th USENIX Security Symposium  787
15
cently proposed incident investigation system that aims
to provide context to malicious downloads by recon-
structing the path taken by the user to download exe-
cutable files. WebWitness is able to classify the cause of
a malicious download as drive-by, social engineering or
update. In [30], the main focus is on studying drive-by
downloads and developing a new defense against drive-
by download attacks. However, social engineering at-
tacks are not studied. WebWitness is able to separate
drive-by downloads from social engineering downloads
once an oracle identifies a download as malicious, and is
not able to independently detect SE attack. Although we
utilize WebWitness’ trace-back algorithm, our contribu-
tions are very different from [30], because we study SE
download attacks in depth, focusing on their collection,
analysis and categorization, as wells as the detection and
mitigation of ad-based SE-driven infections.
9 Conclusion
In this paper, we presented the first systematic study
of social engineering (SE) attacks that trigger software
downloads. To this end, we collected and reconstructed
more than two thousand examples of in-the-wild SE
download attacks captured at a large academic network.
We performed a detailed analysis and measurements on
the collected data, and developed a categorization system
to identify and organize the tactics typically employed
by attackers to make SE download attacks successful.
Furthermore, by measuring the characteristics of the net-
work infrastructure used to deliver such SE attacks, we
were able to engineer a number of features that can be
leveraged to distinguish between SE and benign (or non-
SE) software downloads with a true positive rate of 91%
at a false positive rate of only 0.5%.
References
[1] AdBlock Plus. https://adblockplus.org/.
[2] ReferrerPolicies. https://www.w3.org/TR/referrer-
policy/#referrer-policy-origin.
2010.
[3] Protecting privacy with referrers,
https://
www.facebook.com/notes/facebook-engineering/
protecting-privacy-with-referrers/
392382738919/.
[4] The download.com debacle: What CNET needs to do to make it
right, 2011. https://www.eff.org/deeplinks/2011/
12/downloadcom-debacle-what-cnet-needs-do-
make-it-right.
[5] Huge decline in fake av following credit card processing shakeup,
http://krebsonsecurity.com/2011/08/
2011.
huge-decline-in-fake-av-following-credit-
card-processing-shakeup/.
[6] Fake virus alert malware (fakeav)
information and what
http://helpdesk.princeton.edu/kb/
to do, 2013.
display.plx?ID=1080.
[7] Heres what happens when you install the top 10 download.com
http://www.howtogeek.com/198622/
apps, 2015.
heres-what-happens-when-you-install-
16
the-top-10-download.com-apps/?PageSpeed=
noscript.
[8] ABRAHAM, S., AND CHENGALUR-SMITH, I. An overview of
social engineering malware: Trends, tactics, and implications.
Technology in Society 32, 3 (2010), 183 – 196.
[9] BOTT, E. Social engineering in action: how web ads can lead to
malware, 2011.
[10] BREIMAN, L. Random forests. Mach. Learn. 45, 1 (Oct. 2001).
[11] CABALLERO, J., GRIER, C., KREIBICH, C., AND PAXSON, V.
Measuring pay-per-install: The commoditization of malware dis-
tribution. In Proceedings of the 20th USENIX Conference on Se-
curity (Berkeley, CA, USA, 2011), SEC’11, USENIX Associa-
tion, pp. 13–13.
[12] CHEN, K. Z., GU, G., ZHUGE, J., NAZARIO, J., AND HAN,
X. Webpatrol: Automated collection and replay of web-based
malware scenarios. In Proceedings of the 6th ACM Symposium
on Information, Computer and Communications Security (New
York, NY, USA, 2011), ASIACCS ’11, ACM, pp. 186–195.
[13] CIALDINI, R. B. Inﬂuence: Science and Practice, 5th ed. Pear-
son Education, 2000.
[14] COVA, M., KRUEGEL, C., AND VIGNA, G. Detection and
analysis of drive-by-download attacks and malicious javascript
code.
In Proceedings of the 19th International Conference on
World Wide Web (New York, NY, USA, 2010), WWW ’10, ACM,
pp. 281–290.
[15] DIETRICH, C. J., ROSSOW, C., AND POHLMANN, N. Ex-
ploiting visual appearance to cluster and detect rogue software.
In Proceedings of the 28th Annual ACM Symposium on Ap-
plied Computing (New York, NY, USA, 2013), SAC ’13, ACM,
pp. 1776–1783.
[16] DUMAN, S., ONARLIOGLU, K., ULUSOY, A. O., ROBERTSON,
W., AND KIRDA, E. Trueclick: Automatically distinguishing
trick banners from genuine download links. In Proceedings of the
30th Annual Computer Security Applications Conference (New
York, NY, USA, 2014), ACSAC ’14, ACM, pp. 456–465.
[17] GRIER, C., BALLARD, L., CABALLERO, J., CHACHRA, N.,
DIETRICH, C. J., LEVCHENKO, K., MAVROMMATIS, P., MC-
COY, D., NAPPA, A., PITSILLIDIS, A., PROVOS, N., RAFIQUE,
M. Z., RAJAB, M. A., ROSSOW, C., THOMAS, K., PAXSON,
V., SAVAGE, S., AND VOELKER, G. M. Manufacturing com-
promise: The emergence of exploit-as-a-service. In Proceedings
of the 2012 ACM Conference on Computer and Communications
Security (New York, NY, USA, 2012), CCS ’12, ACM, pp. 821–
832.
[18] GRIER, C., TANG, S., AND KING, S. T. Secure web browsing
with the op web browser. In Proceedings of the 2008 IEEE Sym-
posium on Security and Privacy (Washington, DC, USA, 2008),
SP ’08, IEEE Computer Society, pp. 402–416.
[19] KIM, D. W., YAN, P., AND ZHANG, J. Detecting fake anti-
virus software distribution webpages. Comput. Secur. 49, C (Mar.
2015), 95–106.
[20] KOHAVI, R., AND JOHN, G. H. Wrappers for feature subset
selection. Artiﬁcial Intelligence 97, 12 (1997), 273 – 324. Rele-
vance.
[21] KROMBHOLZ, K., HOBEL, H., HUBER, M., AND WEIPPL, E.
Advanced social engineering attacks. J. Inf. Secur. Appl. 22, C
(June 2015), 113–122.
[22] KWON, B. J., MONDAL, J., JANG, J., BILGE, L., AND DUMI-
TRAS, T. The dropper effect: Insights into malware distribution
with downloader graph analytics.
In Proceedings of the 22Nd
ACM SIGSAC Conference on Computer and Communications Se-
curity (New York, NY, USA, 2015), CCS ’15, ACM, pp. 1118–
1129.
788  25th USENIX Security Symposium 
USENIX Association
[23] LI, Z., ZHANG, K., XIE, Y., YU, F., AND WANG, X. Knowing
your enemy: Understanding and detecting malicious web adver-
tising. In Proceedings of the 2012 ACM Conference on Computer
and Communications Security (New York, NY, USA, 2012), CCS
’12, ACM, pp. 674–686.
[24] LU, L., YEGNESWARAN, V., PORRAS, P., AND LEE, W. Blade:
An attack-agnostic approach for preventing drive-by malware
infections.
In Proceedings of the 17th ACM Conference on
Computer and Communications Security (New York, NY, USA,
2010), CCS ’10, ACM, pp. 440–450.
[25] MAVROMMATIS, P., BALLARD, L., PROVOS, N., INC, G., AND
ZHAO, X. The nocebo effect on the web: An analysis of fake
anti-virus distribution. In In USENIX Workshop on Large-Scale
Exploits and Emergent Threats (LEET (2010).
[26] MEKKY, H., TORRES, R., ZHANG, Z.-L., SAHA, S., AND
NUCCI, A. Detecting malicious http redirections using trees of
user browsing activity. In INFOCOM, 2014 Proceedings IEEE
(April 2014), pp. 1159–1167.
[27] MITNICK, K. D., AND SIMON, W. L. The Art of Deception:
Controlling the Human Element of Security, 1st ed. John Wiley
& Sons, Inc., New York, NY, USA, 2002.
[28] NAPPA, A., RAFIQUE, M. Z., AND CABALLERO, J. Driving
in the cloud: An analysis of drive-by download operations and
abuse reporting. In Proceedings of the 10th International Con-
ference on Detection of Intrusions and Malware, and Vulnerabil-
ity Assessment (Berlin, Heidelberg, 2013), DIMVA’13, Springer-
Verlag, pp. 1–20.
[29] NEASBITT, C., PERDISCI, R., LI, K., AND NELMS, T. Click-
miner: Towards forensic reconstruction of user-browser inter-
actions from network traces.
In Proceedings of the 2014 ACM
SIGSAC Conference on Computer and Communications Security
(New York, NY, USA, 2014), CCS ’14, ACM, pp. 1244–1255.
[30] NELMS, T., PERDISCI, R., ANTONAKAKIS, M., AND
Investigating, categorizing, and
AHAMAD, M. Webwitness:
mitigating malware download paths.
In Proceedings of the
24th USENIX Conference on Security Symposium (Berkeley, CA,
USA, 2015), SEC’15, USENIX Association, pp. 1025–1040.
[31] POWER, R., AND FORTE, D. Social engineering: attacks have
evolved, but countermeasures have not. Computer Fraud and Se-
curity 2006, 10 (2006), 17 – 20.
[32] PROJECT, T. C.
Out-of-process
iframes
(OOPIFs).
https://www.chromium.org/developers/design-
documents/oop-iframes.
[33] PROVOS, N., MCNAMEE, D., MAVROMMATIS, P., WANG, K.,
AND MODADUGU, N. The ghost in the browser analysis of web-
based malware. In Proceedings of the First Conference on First
Workshop on Hot Topics in Understanding Botnets (Berkeley,
CA, USA, 2007), HotBots’07, USENIX Association, pp. 4–4.
[34] RAJAB, M. A., BALLARD, L., LUTZ, N., MAVROMMATIS, P.,
AND PROVOS, N. Camp: Content-agnostic malware protection.
[35] RAJAB, M. A., BALLARD, L., MAVROMMATIS, P., PROVOS,
N., AND ZHAO, X. The nocebo effect on the web: An analysis
of fake anti-virus distribution. In Proceedings of the 3rd USENIX
Conference on Large-scale Exploits and Emergent Threats: Bot-
nets, Spyware, Worms, and More (Berkeley, CA, USA, 2010),
LEET’10, USENIX Association, pp. 3–3.
[36] REIS, C., AND GRIBBLE, S. D. Isolating web programs in mod-
ern browser architectures.
In Proceedings of the 4th ACM Eu-
ropean Conference on Computer Systems (New York, NY, USA,
2009), EuroSys ’09, ACM, pp. 219–232.
[37] STONE-GROSS, B., ABMAN, R., KEMMERER, R. A.,
KRUEGEL, C., STEIGERWALD, D. G., AND VIGNA, G. The
underground economy of fake antivirus software. In In Proc. (on-
line) WEIS 2011 (2011).
[38] STRINGHINI, G., KRUEGEL, C., AND VIGNA, G. Shady paths:
Leveraging surfing crowds to detect malicious web pages.
In
Proceedings of the 2013 ACM SIGSAC Conference on Computer
&#38; Communications Security (New York, NY, USA, 2013),
CCS ’13, ACM, pp. 133–144.
[39] VADREVU, P., RAHBARINIA, B., PERDISCI, R., LI, K., AND
ANTONAKAKIS, M. Measuring and detecting malware down-
loads in live network traffic.
In Computer Security ESORICS
2013, J. Crampton, S. Jajodia, and K. Mayes, Eds., vol. 8134 of
Lecture Notes in Computer Science. Springer Berlin Heidelberg,
2013, pp. 556–573.
[40] WANG, H. J., GRIER, C., MOSHCHUK, A., KING, S. T.,
CHOUDHURY, P., AND VENTER, H. The multi-principal os
construction of the gazelle web browser. In Proceedings of the
18th Conference on USENIX Security Symposium (Berkeley, CA,
USA, 2009), SSYM’09, USENIX Association, pp. 417–432.
[41] WHALEY, B. Toward a general theory of deception, 1982. Mil-
iary Deception and Strategic Surprise.
[42] XIE, G., ILIOFOTOU, M., KARAGIANNIS, T., FALOUTSOS, M.,
AND JIN, Y. Resurf: Reconstructing web-surfing activity from
network traffic.
In IFIP Networking Conference, 2013 (2013),
IEEE, pp. 1–9.
[43] XING, X., MENG, W., LEE, B., WEINSBERG, U., SHETH,
A., PERDISCI, R., AND LEE, W. Understanding malvertising
through ad-injecting browser extensions. In Proceedings of the
24th International Conference on World Wide Web (New York,
NY, USA, 2015), WWW ’15, ACM, pp. 1286–1295.
USENIX Association  
25th USENIX Security Symposium  789
17