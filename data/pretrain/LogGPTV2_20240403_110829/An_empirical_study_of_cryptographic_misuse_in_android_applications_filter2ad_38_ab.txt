as in TLS [23] and SSH [4].
Rule 3 states that an encryption scheme should not use a
constant key. Intuitively, a constant key hard-coded in pub-
licly available software is not a secret key, thus the resulting
encryption does not provide privacy. Symmetric encryption
schemes commonly include a notion of a randomized key
generation algorithm K (see Section 2).
Rule 4 and Rule 5 are both recommended best practices
for PBE schemes. Recall from §2 that the iteration count
and salt entail a multiplicative increase in work for a brute
force dictionary attack. An application that does not fol-
low Rule 4 and uses a constant salt reduces to a program,
for cryptographic purposes, with no salt at all. We chose
the threshold for the iteration count at 1,000 because this
minimum value is suggested in PKCS#5.
Finally, Rule 6 states that the Android SecureRandom(·)
function should not be seeded with a constant. Android’s
SecureRandom is a pseudo-random number generator (PRNG)
that is seeded. A PRNG seeded with a constant seed will pro-
duce a constant, known output across all implementations.
Since PRNG’s are often used to create key material, the
resulting keys are not random thus not secure. As the name
of the API – SecureRandom – suggests its use for security rel-
evant tasks, we ﬂag applications that seed the SecureRandom
PRNG with static values.
4 Crypto in Android
Android applications are authored as Java source code and
then compiled to Dalvik bytecode. This bytecode is packaged
with additional resources, such as images and conﬁguration
ﬁles into an application package (apk) ﬁle. When the user
installs an application from Google Play, the apk ﬁle is
downloaded and installed on the device. Although, the ap-
plication’s source is Java, the Dalvik virtual machine (DVM)
considerably diﬀers from the Java virtual machine. For ex-
ample, while the Oracle Java virtual machine is stack-based,
the DVM is register based. Furthermore, Android provides
a rich execution framework. This framework oﬀers access
to a variety of subsystems such as graphical user interfaces,
networking, or the telephony and messaging sub-systems.
The sub-system relevant to this paper is the Java Cryp-
tography Architecture (JCA). This architecture standardizes
75how application developers can make use of cryptographic
algorithms. To this end, so-called cryptographic service
providers (CSP) are registered with the JCA. A CSP is a
package providing implementations of cryptographic algo-
rithms, such as message authentication codes, encryption
schemes, or key generation algorithms. This modularized
architecture enables distributors and developers to seamlessly
install and use diﬀerent CSPs in parallel, or substitute one
for the other, as long as they provide implementations for the
same algorithms. For example, while Oracle Java contains
the SunJCE as the default CSP, Android (since version 2.1)
uses BouncyCastle [1] as its default cryptographic service
provider.
Block ciphers, symmetric, and asymmetric encryption
schemes are accessible to an application through the Cipher
API. To obtain an instance of a speciﬁc encryption scheme,
the developer calls the Cipher.getInstance factory method
and provides a transformation as the argument. A transfor-
mation is a string that speciﬁes the name of the algorithm,
the cipher mode, and padding scheme to use. For example,
to obtain a cipher object that uses AES in CBC mode with
PKCS5 padding the developer would specify the transforma-
tion as: AES/CBC/PKCS5Padding. Only the algorithm part is
mandatory. The security provider maintains default values
for the cipher mode as well as the padding scheme should
the developer choose to omit these values. Unfortunately,
Java as well as Android chose ECB and PKCS7Padding as
default values in case only the AES encryption algorithm is
speciﬁed. Thus, a developer who only speciﬁes the arguably
secure AES block cipher ends up in a potentially insecure
situation where the ECB block cipher mode is used.
5 System Design and Implementation
At a high level we observe that the rules speciﬁed in Sec-
tion 3 are temporal properties. We have built an automated
analysis tool to evaluate these rules on real-world Android
applications. More precisely, we compute static program
slices that terminate in calls to cryptographic APIs, and
then extract the necessary information from these slices.
In this section we ﬁrst discuss how we extract the control
ﬂow and super control ﬂow graphs from real-world Android
applications. We then detail our static program slicing ap-
proach, and how we evaluate the rules from Section 3 based
on a program slice.
Control ﬂow graphs Our approach targets the Dalvik byte-
code of Android applications directly. We build our analysis
on top of the Androguard [12] Android application analy-
sis platform. Androguard disassembles an application into
classes, methods, basic blocks, and individual instructions.
CryptoLint then ﬁrst translates this low-level represen-
tation into an intermediate representation (IR). In this IR
we combine the more than 200 Dalvik instructions into 19
semantically similar instruction groups (e.g., arithmetic in-
structions, invoke instructions). CryptoLint also extracts
the intra-procedural control ﬂow graphs for all methods in
the application.
An application’s use of cryptographic functionality might
not be limited to a single method. For example, a cipher ob-
ject could be instantiated in an object constructor and then
used in two diﬀerent methods (e.g., encrypt and decrypt)
to encrypt or decrypt data respectively. If these two meth-
ods are analyzed in isolation, we would not be able to ex-
tract the encryption scheme that was used when the cipher
object was instantiated. Thus, our approach implements
inter-procedural analysis based on the application’s super
control ﬂow graph to correlate the use of the cipher object
for encryption and decryption with the cipher’s instantiation.
However, before CryptoLint reconstructs the super control
ﬂow graph two additional steps are performed.
First, CryptoLint translates all methods into single static
assignment (SSA) form as described in [10]. Second, Cryp-
toLint also extracts the class hierarchy of all classes imple-
mented in the Application. Because in Android it is common
and often necessary to extend classes that are deﬁned in
the Android framework, we also include all classes that are
deﬁned by the Android framework into this analysis. For
example, any class implementing a user interface component
has to extend the class View, which is deﬁned in the Android
framework. This analysis yields the class hierarchy tree
rooted at the Object class, and contains all inheritance rela-
tionships between classes in the application and the Android
framework. Furthermore, this data structure also contains
information pertaining to Java interfaces and the classes
that implement them. In our current implementation Cryp-
toLint targets API version 16 of the Android framework
(i.e., Android Jelly Bean). Of course, CryptoLint can be
used with any other version of the framework too.
5.1 Extracting the super control ﬂow graph
A super control ﬂow graph (sCFG) consists of the call graph
of an application superimposed over the control ﬂow graphs
of the individual functions. Call edges are added between
call instructions and function entry points, and function exit
points are connected with exit edges back to the call site.
CryptoLint reconstructs an over-approximation the sCFG
of an application by executing the following steps.
First, CryptoLint computes the possible types each reg-
ister can hold at each program point. Initially, CryptoLint
assumes that each register can hold values of any type. Cryp-
toLint then analyzes how registers are used and reﬁnes the
set of possible types of values accordingly. CryptoLint
leverages the static type information that is present in the
application’s byte code. For example, the types of argu-
ments and return values are listed in the datastructures that
describe methods. CryptoLint propagates types to regis-
ters that receive arguments or return values from method
calls. CryptoLint also leverages additional type informa-
tion, such as check-cast instructions that assure that a
register contains (a subtype of) the speciﬁed static type.
The new-instance instruction is used to instantiate a new
objects of the given type.
Dalvik bytecode only contains information regarding the
static type of the objects used. However, the dynamic type
of an object at runtime can be any subtype of the static
type. An exception to this rule is the new-instance in-
struction, the dynamic and static type for operands used
with a new-instance instruction are always identical. Thus,
a new-instance instruction precisely deﬁnes what type of
object the operand register contains. This reﬁnement is
performed until a ﬁxed-point is reached.
Second, CryptoLint leverages the information from the
type reﬁnement step to resolve targets of the invoke family of
instructions. These instructions consist of invoke-virtual,
-super, -direct, -static, -interface, and their respective
-range variants. To this end, we follow the approach pre-
sented by Dean et al. [11], and combine the information
76from the class hierarchy analysis with the possible types
of the registers to identify the possible targets of invoke
instructions.
5.2 Static program slicing
Static program slicing [27] is speciﬁed with respect to a slicing
criterion. A slicing criterion is deﬁned as a program point
p and a variable x. The slicing algorithm then determines
all program instructions that might aﬀect the value of x at
point p.
The slicing algorithm iteratively traverses the program
backward starting at program point p. During execution, the
algorithm keeps a working set of registers whose deﬁnitions
need to be determined. Initially, this working set contains
the registers from the slicing criterion (i.e., x). A register is
removed from the working set if the algorithm encounters
an instruction that statically deﬁnes that register. For an
instruction that deﬁnes a register in the working set but uses
other registers, the algorithm performs the following two
steps: First, the deﬁned register is removed from the working
set. Second, all registers used by the instruction are added
to the working set.
The slicing algorithm terminates successfully, once the
working set is empty. This means that all operands in the
working set were statically deﬁned. The slicing algorithm
terminates unsuccessfully, if it reaches the beginning of a
method, but the sCFG does not contain any incoming edges
to the currently analyzed method.
Additionally, our implementation of the slicing algorithm
is also ﬁeld sensitive. To this end, we keep a list of ﬁelds that
are accessed by instructions in the get family of instructions
(i.e., iget, aget, sget) during the execution of the slicing
algorithm. The slicing algorithm is then recursively applied
at each program location where the corresponding ﬁelds are
deﬁned, with the slicing criterion set to the location and the
register that deﬁnes the ﬁeld.
5.3 Evaluating security properties
We now describe how CryptoLint evaluates the security
rules outlined above on real-world Android applications.
Rule 1: Do not use ECB mode for encryption. An appli-
cation will use the ECB block cipher mode under one of two
conditions. First, if the developer explicitly speciﬁes that
she wants to use ECB this is reﬂected in the transformation
string (e.g., AES/ECB). The second, and arguably more subtle
instance of using ECB, occurs if the developer only speciﬁes
a block cipher to use in the transformation. For example,
if the developer only speciﬁes AES as the transformation,
BouncyCastle will automatically choose ECB as the default
block cipher mode.
Thus, to identify applications that make use of the ECB
block cipher mode, CryptoLint resolves for each call to the
Cipher.getInstance factory method what transformation
string is speciﬁed by the developer. To this end, Cryp-
toLint calculates the backward slice for the slicing criterion
consisting of the invoke statement to the factory method
and the register that speciﬁes the encryption scheme to be
used. CryptoLint raises a warning if either only a block
cipher is used as the transformation string or, the transfor-
mation explicitly lists a block cipher and the ECB mode.
Rule 2: Do not use a non-random IV for CBC encryp-
tion. Block ciphers in feedback mode (e.g., AES/CBC) re-
quire an initialization vector. While the CBC$ algorithm
(see Algorithm 2) speciﬁes the random selection of a fresh
IV for each invocation of the algorithm, the Java API allows
the developer to override this random selection and spec-
ify an IV herself. If the developer does not specify an IV,
the BouncyCastle implementation of CBC will follow the
CBC$ algorithm and generate an IV at random using the
SecureRandom API.
To evaluate this property CryptoLint computes the
backward slice for all calls to the Cipher.init method
and uses as the slicing criterion the ParameterSpec argu-
ment of the method call. CryptoLint will ﬂag an applica-
tion as using constant initialization vectors if the following
two conditions hold: (1) The slice includes an object of
type IvParameterSpec, and (2) all values that are used for
the constructor for that IvParameterSpec are static. The
ﬁrst condition is necessary because the ParameterSpec argu-
ment can hold types other than IvParameterSpec, such as
PBEParameterSpec or DSAParameterSpec.
The second requirement allows us to identify whether the
used IV consists of constant values. That is, if the slice does
only depend on constant values, this implies that the IV is
constant too.
Although the security prerequisites for IVs in block cipher
modes require non-predictable and unique IVs, CryptoLint
only identiﬁes the use of static IV values. Static IVs are a
subset of predictable IVs (i.e., they are trivially predictable).
More precisely, for IVs that are not static, CryptoLint can-
not distinguish between predictable and unpredictable IVs.
The reason is that a non-static IV might still be predictable
due to information that is not available to our analysis.
Rule 3: Do not use constant encryption keys. To iden-
tify the use of static symmetric encryption keys, CryptoLint
calculates backward slices for the key argument to all invoca-
tions of the SecretKeySpec constructors. Because the Java
security provider API is generic for symmetric and asymmet-
ric encryption, CryptoLint only reports the violation of
this property if a static key is used in a symmetric encryption
scheme. In an asymmetric encryption scheme it is perfectly
legitimate that an encryption key (e.g., the public key of a
keypair) is statically included in the application.
Rule 4: Do not use constant salts for PBE. CryptoLint
identiﬁes applications that use static salt values for password
based encryption by computing the backward slice for all calls
to constructors of the PBEParameterSpec and PBEKeySpec
APIs. The slicing criterion is speciﬁed as the call-site of the
API call and the register that speciﬁes the salt. If all instruc-
tions in the slice exclusively depend on static values, the salt
has to be static too, and CryptoLint alerts respectively.
Rule 5: Do not use fewer than 1,000 iterations for PBE.
To identify applications that violate this rule, CryptoLint
computes a backward slice for the register that speciﬁes the
iteration count at each call to the PBEParameterSpec and
PBEKeySpec constructors. If CryptoLint identiﬁes that the
iteration count is below 1,000 this use of password-based
encryption is ﬂagged as insecure. We chose this threshold
value of 1,000 because RFC 2898 recommends using at least
an iteration count of 1,000.
Rule 6: Do not use static seeds to seed SecureRandom(·).
CryptoLint ﬂags applications that do seed SecureRandom
with static values. To this end, CryptoLint computes
a backward slice from all call-sites to the constructor of
SecureRandom for the seed value speciﬁed. We were positively
77surprised to see that the documentation on SecureRandom
does include a discussion about its secure usage1 and possible
pitfalls when seeding SecureRandom. This is the only crypto
related API investigated in this work whose documentation
contains such useful security relevant discussions.
To identify applications that do seed SecureRandom with
static values, CryptoLint computes a backward slice from
all constructors of SecureRandom that accept a seed argument.
If all instructions in the slice depend exclusively on static
values, the seed is considered to be static too.
6 Evaluation
Dataset The goal of this evaluation is twofold. First, we
want to demonstrate that CryptoLint is indeed useful to
identify violations of the speciﬁed rules. Second, by apply-
ing CryptoLint on a large number of real-world applica-
tions, we gain an insight into the prevalence of the misuse of
cryptographic functionality in Android applications.
For this evaluation we downloaded 145,095 applications
from the oﬃcial Google Play marketplace. This dataset
was collected between May and July 2012. The security
rules that CryptoLint evaluates are related to functionality
that resides in the javax/crypto and java/security name-
spaces. Thus, CryptoLint ﬁrst assesses whether an applica-
tion makes use of functionality in these name-spaces. 15,134
or 10.4% of all applications in our dataset use crypto func-
tionality.
Description
Cross platform social gaming
Google License veriﬁcation library
Name
scoreloop
vending
urbanairship Mobile marketing solutions
openfeint
google/ads
phonegap
vpon
unity3d