5.3.4 Error Rate Analysis
We give the theoretical analysis to the error rate based on the
model deducted from the prior part. We analyze the false positive
rate and false negative respectively ﬁrst. We then calculate their
sum and analyze the error rate under multiple sampling time case.
At last, we show the scheme operator that the parameter can be
tuned to satisfy the cookie substitution case.
False Positive Theoretically, if an alien observation to simcorr
crossed the gap and fell into the range occupied by the simself , it
may be regarded as being produced by some device already in the
database. The probability of this case is 1 − Fcorr(α), where α is
the threshold set by server. Curve false positive in Figure. 9 shows
the relationship between α and error rate.
Biased Case The threshold parameter can be tuned to satisfy
different cases. For instance, as the substitution to cookie, the con-
sequences brought by false positive and false negative is not equal.
Speciﬁcally, clearing cookies often leads to the result that an old
user is mistaken as a new comer, which is similar to the false neg-
ative, while a piece of cookie will seldom be judged wrongly as
other’s, which is similar to false positive. As the result, servers’
tolerance to false negative is much higher than that of false posi-
tive. To this end, the threshold α can be elevated to trade the per-
formance of false negative for the performance of false positive.
Figure 11: Correlated Similarity.
5.4 Stability
We argue that the higher frequency response feature is a kind of
long-term stable and unchangeable feature. To be a kind of identity,
the feature should be stable spanning a range of time. However in
the case of cookie, different people clear their cookies with differ-
ent time gaps. Some people never clear their cookies while some
never save them, which casts doubt on the stability of the cookie
The probability of this case is (cid:82) 1
There is another case, which also leads to false positive. Feature
vector produced by Alice may have a simcorr with Bob’s that is
higher than simself of Alice’s, which leads server to output Bob.
α fcorr(x)Fself (x)dx, which is
preeminently less than 1 − Fcorr(α). As the result, it is neglected
when calculating the error rate.
False Negative An observation to simself may fall into the range
belonging to simcorr, which misleads the server to output null in-
stead of the right answer. The probability of this case is Fself (α),
as it is shown in Curve False Negative of Figure. 9.
Overall Error Rate The error of the scheme is deﬁned by the
sum of false positive and false negative. The error rate is calculated
by the sum of the two kinds of error rate thereby. It changes accord-
ing to α, which is shown in Figure 9. The ﬁgure tells that lower α
brings to more false positive while higher α leads to more false neg-
ative. The valley point of the curve locates at 0.69, which implies
that setting threshold to 0.69 gives the the best performance.
As we can see, the error rate is around 1.55*10−4, when the
threshold is set at 0.69.
Performance Enhancement Sampling multiple times elevates
the performance sharply. Collecting each feature vector costs only
little, and noises are regarded as independent, which therefore in-
spired us to collect feature more than once to decrease the error
rate. For example, if we collect 2 samples each time, the error rate
decreases sharply because the false positive happens only if both
two samples are false positive sample, and the false negative hap-
pens only if both two samples are false negative sample. Figure. 10
shows that the error rate of the twice scheme is around 1.41*10−8,
when the threshold is set at 0.68. Hence, 1.23*10−12 error rate can
be achieved if 3 times sampling is adopted.
0.60.650.70.750.810−410−310−2Similarity(α)Error Rate  False PositiveFalse NegativeOverall0.60.650.70.750.810−1210−1010−810−610−410−2Similarity(α)Error Rate  Sample OnceSample TwiceSample Third Times435Figure 12: Noise in Ofﬁce, Street and Metro.
as a kind of identity. To prove our scheme’s stability, we chose 2
speakers randomly and collected feature vector every 1 hour to each
emulated phone. As the result, we have collected 60 feature vectors
to each phone totally. The vectors produced by the ﬁrst phone are
labeled from 1 to 60, while the vectors produced by the second one
are labeled form 61 to 120. Figure. 11 shows the similarity between
the 120 vectors.
As concluded from Figure. 11, there is no obvious decreases in
similarity between feature vectors within the same phone collected
from the ﬁrst hour to the last hour. Also, we haven’t observed
obvious increase in similarity between the two phones from hour
to hour, so the experiment concludes that the higher frequency re-
sponse feature is long-term stable.
5.5 Interference
The higher frequency response is affected by the noise in the
higher frequency range, which is pure and silent in most cases. In
order to prove the ability to anti interference, we have tested the
scheme in different environment with different noise, ranging from
ofﬁce, street, metro station. The result is positive in all cases except
the metro station. Figure. 12 shows the spectrum of noise on the
air in the 3 environments. We will present both qualitative and
quantitative analysis to the anti-interference ability of the scheme.
Qualitative Analysis In the effective frequency range, 14kHz
to 21kHz, the environment is silent in the case of ofﬁce and street,
though there are loud human being’s voices and other noises, which
don’t locate at the effective band, so the response feature can be
calculated with only little interference. In the case of metro station,
the noise spans all the sampling frequency range including the ef-
fective band, which overwhelms the signal broadcasted and makes
the calculation result meaningless. Thus, we concluded that the
scheme works if only the high frequency band is silent.
Quantitative Analysis In this section, we try to ﬁnd out the high-
est noise level at which the scheme works. To simplify the prob-
lem, we reasonably assume that the feature is absolutely stable and
all the distance between the features of the same phone is resulted
from the interferences in the environment. The sampled spectrum
of signal is denoted as (cid:126)X, while the noise is denoted as (cid:126)N. We also
assume that there is little correlation between (cid:126)X and (cid:126)N, and the
expected mean of the (cid:126)N is zero (We assume like this because the
noise is often white noise), which leads (cid:126)X and (cid:126)N to be regarded
orthogonal and (cid:126)X · (cid:126)N = 0 thereby. The Similarity calculated in
fact is:
(cid:115)
1 −
(
= 1 −
= 1 −
(cid:126)X
| (cid:126)X| − (cid:126)X + (cid:126)N
(cid:115)
| (cid:126)X + (cid:126)N| )2
(cid:126)X( (cid:126)X + (cid:126)N )
2 − 2
(cid:115)
| (cid:126)X|| (cid:126)X + (cid:126)N|
2 − 2
| (cid:126)X|
| (cid:126)X + (cid:126)N|
We consider the false negative in the interfered environment while
neglect the case of false positive, because noise can easily make a
feature distorted, but hardly make a feature similar to another. The
server outputs right answer when this similarity between the 2 fea-
ture vectors is higher than a threshold α. Thus:
(cid:115)
1 −
2 − 2
⇒ | (cid:126)X|
⇒ | (cid:126)X|2
| (cid:126)X + (cid:126)N| >
| (cid:126)X|2 + | (cid:126)N|2
⇒ SN R
SN R + 1
⇒ SN R >
Where SNR is
| (cid:126)X|
| (cid:126)X + (cid:126)N| > α
1 + 2α − α2
2
α4 − 4α3 + 2α2 + 4α + 1
>
α4 − 4α3 + 2α2 + 4α + 1
4
4
>
1 + 4α + 2α2 − 4α3 + α4
3 − 4α − 2α2 + 4α3 − α4
| (cid:126)X|2
| (cid:126)N|2
The SNR can be calculated in this way according to Parseval’s
theorem, which indicates that the power of a signal can also be the
sum of each frequency component’s power, while the power of each
component is the square of its amplitude. Therefore, the square to
the normal of the vector is just the power.
The relationship between α and error rate, thus Figure. 13, shows
the SNR requirement in avoiding false positive in different α set-
ting. As we can see, in the normal setting, thus α = 0.7, the SNR
requirement is 10 dB. That means the scheme outputs right answer
if only the SNR in the effective frequency band is higher than 10
dB. Don’t forget that the noise power is only counted for those lo-
436and un-noticeable test, and then look up the generated device ID in
the stolen phone’s database.
To avoid such detection, the adversaries have to modify the hard-
ware. However the cost is high, because, not only the extra money
to buy new parts, but also the skills to replace the part. (especially
the phones are becoming more difﬁcult to be disassembled)
6.2 Location information broadcast and relay
Many applications require position information to complete some
useful functions. For example, instant message applications can let
you know and make friends with people nearby. However, current
designs require users to grant the applications to access their cur-
rent position, which users often decline, either due to the privacy
concerns, or avoid overly power consumption used by GPS subsys-
tem.
But with our proposed scheme, applications can easily share and
relay position information, and following is a typical scenario. Sup-
pose there were many people in a conference room, but only one of
them turned on the location service, so the server could put infor-
mation of device ID and the location of that conference room into
a database. Now the application will periodically play the specially
crafted sound, which can be captured and cross-ﬁngerprinted by
other phones nearby. Once the device ID is extracted, those smart-
phones will query the database on the server, and retrieve the loca-
tion information generated by another phone with GPS turned on.
Once a new phone get its location information, it starts to broadcast
its identity, and thus the location information can be relayed across
the whole conference room.
6.3 Indoor tracking
Indoor tracking has a huge market potential, with which super-
market and department store can send coupons and targeted adver-
tisements to their customers. There are already several technolo-
gies available, like Bluetooth based iBeacon from Apple [7], and
WiFi based solutions [12]. The device ID proposed in this paper
can also be used in this scenario. First, whenever the user enters a
supermarket, her phone will receive a signal to trigger the inaudible
sound playing periodically, which is actually equal to broadcast its
device ID from time to time. Such broadcasting will be received
by microphones deployed all around the supermarket, then a cross-
ﬁngerprinting is performed, and a unique device ID extracted. By
correlate the device ID with the microphone location, it is easy to
know the route of the user in the supermarket, what her favorite
is, and what is still under consideration, etc. With the same tech-
nology, it is also possible to associate the purchase history to a
speciﬁc device ID, simply by putting a cross-ﬁngerprinting micro-
phone near the check-out counter.
7. DISCUSSION
In this section we will discuss the defense methods and limita-
tions of our proposed method.
7.1 Defense
We postulate some practical methods to help users defend this
kind of tracking, though we implemented none of them.
Speaker Usage Notiﬁcation. An indication could be added to
warn users that the loudspeaker is working. If the user noticed the
indication but heard nothing, there should be someone invoking
tracking. The indication could be an icon displayed in the notiﬁ-
cation bar.
It could also be some ﬂash pattern of the LED. The
principle is similar to a light near the embedded camera in the lap-
top indicating that the user’s camera is working and privacy may be
stolen if the camera is not opened by user himself.
Figure 13: SNR requirement over different α.
cated at the effective frequency points, which possesses only little
of the overall noise power.
5.6 Entropy
We calculate entropy in this part, because entropy is important
in evaluating an identity scheme. Entropy weights how many in-
formation the identity carries, and hence how many devices can be
distinguished from each other. Speciﬁcally, in order to distinguish
a set of devices whose size is N, at least log2N bits entropy should
be carried during a round of identiﬁcation. Therefore, we analyze
how many devices can be distinguished by deploying our scheme.
After setting the threshold parameter α to the optimized one, the
error rate can be calculated accordingly. Thus, the entropy can be
calculated if only the relationship between error rate and the distin-
guishable size is decided. Approximately 1/error_rate devices
can be distinguished at the given error_rate, because less than
one error will be found expectedly. As the result, we regard all the
1/error_rate devices distinguishable accordingly. The identity
carries −log2(error_rate) entropy under the settings thereby.
We believe that each feature being transferred back to the server
carries entropy. Therefore, with the increasing of feature vectors
used linearly, the error rate decreases geometrically and the en-
tropy increases linearly, because of the independence between 2
samplings. As calculated before, the error rate is at 1.55*10−4, if
one feature vector is utilized to make judgement. According to the
error rate, 12.6 bits entropy can be achieved in the single sampling
case.
6. APPLICATION
The device ID extracted from our proposed scheme can not only
replace traditional cookies, but also be used beyond that, and this
section will give a brief introduction to some of the applications.
6.1 Stolen phone tracing and self-destruction
Recently, lawmakers in California have approved a bill, which
requires all smart phones sold in the state to have anti-theft software
installed, so that once the device being lost or stolen, it cannot be
used any more, even after a hard reset [16].
However, in order to achieve that goal, the ﬁrst step is to uniquely
identify a device. This is not a trivial task, given the fact that the
phone could be reset, re-ﬂashed with different operating system im-
age, or the IMEI code can even be modiﬁed via software. In other
words, since every piece of current device information is stored in
Flash memory, and the Flash memory is under the control of adver-
saries, nothing can prevent them from modifying such information
and defeat the “kill switch” mechanism.
Our speaker-based device ID can help address the challenge.
Any changes in the software cannot change our hardware-based
device IDs. So, in order to check if current phone has been re-
ported as stolen, the system vendors only need to perform a quick
0.60.650.70.750.88101214αSNR(dB)437Higher Frequency Blocking. The audio driver developers could
cut the non-sensitive sound directly in the speaker mode. In head-
phone mode, people may feel the change of missing high frequency
components, considering the noise isolation and ﬁne device qual-
ity. However in speaker mode, where people seldom care the audio
quality, adding or deleting higher frequency component has only
little effect on quality, because originally, the quality of sound gen-
erated by loudspeaker is low and the lack of noise isolation. So,
developers could set the cutting frequency of the digital ﬁlter to 16
kHz, then the higher frequency component is blocked by the ﬁlter
and will not play, while the audio quality doesn’t decrease much in
speaker mode.
7.2 Incomplete Inaudibility
In this paper, the inaudibility focuses on people, especially adults.
However, there are also many other individuals that are able to hear
or feel the higher frequency audio. For example, infants have a
better hearing that may enable them to hear the audio. So, they
may cry when they are exposed to the environment ﬁlling with the
annoying audio. Dog, a kind of creature with much better hearing
than human-being, may behave weirdly when it hears the audio.
7.3 Limitation of Stability Experiment
We will indicate the limitations of our work as follow.
Long-term slow changes The duration of our experiment is 60
hours. We haven’t kept the experiment for months or years, while
a phone usually can be used for years. The phone may experience
changes in terms of climate, aging, etc, which may offset the fea-