default seccomp profile to filter out sensitive system calls.
Furthermore, the GKE also offers Google’s secure container
runtime—gVisor [31], which leverages a user-space kernel named
Sentry, to serve the system calls from applications. Sentry calls
about 50 system calls of the host machine to provide services as
needed. gVisor is regarded as a secure sand-boxed runtime for
containers [31]. For the container deployment based on gVisor,
all its security settings (including non-privileged user, dropping
capabilities) are the same as the GKE docker runtime settings.
Alibaba Cloud. For the container services, Alibaba Cloud provides
Elastic Container Instance, Container Service for Kubernetes, Con-
tainer Registry, and Alibaba Cloud Service Mesh [1]. We use the
Container Service for Kubernetes to deploy two container instances
on an Elastic Computing Service (ECS) instance. The ECS instance
contains 4 CPUs, 16 GB memory, and 120 GB SSD disk. For con-
tainer security, we follow the official guide for container service
deployment [11], which runs containers with non-root user by
setting runAsUser to 1000. However, it does not disallow privilege
escalation and does not enforce seccomp and SELinux either.
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea773We adopt a stronger security policy, which is the same as previ-
ous ones. We run containers in non-root users, drop all capabilities,
enable all namespaces and control groups, and use docker sec-
comp profile [15] to block sensitive system calls. And we apply
the same security policy for both the attacker-container and the
victim-container.
5.2 Selection of Abstract Resources
To conduct the attacks, we need to select meaningful abstract re-
sources. To demonstrate the effectiveness of abstract resource at-
tacks, we want to select abstract resources that affect each aspect
of the operating system services, including process management,
memory management, storage management, and IO management.
Therefore, we first classify all the identified resources into these
four categories, i.e., for process, for memory, for storage, and for
IO management, according to their declaration locations. Then, we
pick at least one resource from each category based on our domain
knowledge, i.e., we know the impacts of resource exhaustion.
Eventually, we select 7 abstract resources covering all four as-
pects, as shown in Table 3. The resource names are listed in the
second column of Table 3. Among the selected abstract resources, 5
of them (i.e., PID idr, dirty ratio, inode, netns_ct->count, and random
entropy) are identified by the access-based analysis, and the other
2 (i.e., nr_files and pty_count) are identified by the configuration-
based analysis, as shown in the third column of Table 3. We also
list the resource consumption functions in the fourth column and
the system calls we can use to trigger the attacks in the last column
of Table 3.
5.3 Attacking Results on Cloud Platforms
As mentioned in the previous session, we set up 5 test environments
for our proposed attack, including the ones on local, AWS, Azure,
Google Cloud, and Alibaba Cloud. For each test environment, we
set up two containers with tight security policies, as the attacker-
container and victim-container. The attacker-container launches
attacks targeting certain abstract resources. We use the above 7
selected abstract resources to launch the attacks. A benchmark
is running on both the victim-container and the host-machine to
measures their performance downgrade under abstract resource
attacks. The results are shown in Table 4.
The PID idr attack. The PID idr attack and its root cause have
been detailed in §3.2.1. For the PID attack on the vendors, all victim
containers and even the host-machine in Local, AWS, Azure, and
Google test environments cannot fork new processes. The victim
containers even get evicted. Alibaba Cloud is not vulnerable to the
PID attack.
The dirty ratio attack. The dirty ratio attack has been discussed
in §3.3.1. Without the attack, the IO performance is regarded as
100%. Under the dirty ratio attack, the IO performance of victim-
container on AWS, Azure, and Alibaba Cloud drop to 6.3%, 1.2%,
6.7%, respectively. Even worse, the host-machine is also vulnerable
to this attack, while its IO performance drops to 8.3%on AWS and
drops to 8.6% on Alibaba Cloud. Here MS Azure does not provide
any access to the host machine, so we cannot get Azure host IO
performance. Google Cloud is not vulnerable to the dirty ratio
attack.
The inode attack. In the inode attack, the victim-container keeps
allocating inode structures. Unfortunately, the mount namespace
does not isolate the inode. Neither the Linux kernel provides any
inode related control groups. As a result, all inodes on the partition
are exhausted. All operations consuming inodes fail, including
the ones from the victim-container or the host machine. In our
experiments, Alibaba Cloud is vulnerable to the inode attack. The
victim-container even gets evicted. Moreover, the host-machine
cannot create any new files either.
The nr_files attack. The nr_files attack has been discussed in §3.4.1.
nr_files is globally shared by all containers. There are no names-
paces or control groups to limit its usages. With nr_files quota
exhausted, various operations fail, including file open, executing a
new program, pipe creation, socket creation, and the timer creation,
as everything in Linux is a file. Our experiment shows all of the
top 4 vendors are vulnerable to the nr_files attack.
The pty_count attack. The pty_count attack has been discussed
in §3.5.1, which uses up all open pseudo-terminals quota. As a
result, all operations that need to open a new pseudo-terminal fail,
such as SSH connections. Unfortunately, all of the top 4 vendors
are vulnerable to the pty_count attack.
The netns_ct->count attack. Netfilter in the Linux kernel provides
connection tracking functionalities, which keeps track of all logical
network connections [66]. While the total connection has a limit,
and it is counted by struct netns_ct->count [34]. Both the host
machine and the containers need to maintain the connections. Even
though the containers are in the different net namespace, all of their
connections need to consume the init_net.ct.count [35] of the init
net namespace of the host machine. Therefore, if one can generate a
large number of TCP connections in a short time, it can consume all
quota of init_net.ct.count, causing Netfilter malfunction. In our
experiments, the attacker-container can exhaust init_net.ct.count
in a few seconds, which causes random packet dropping. Again,
all environments of the top 4 vendors are vulnerable to the struct
netns_ct->count attack.
The random entropy attack. In the Linux kernel, every read to
the /dev/random consumes the random entropy. Whenever the ran-
dom entropy drops below a threshold, the Linux kernel blocks read
operations to /dev/random and waits for the entropy to increase [41].
As there are no namespace or control groups to isolate the random
entropy, the attacker-container can easily consume all random en-
tropy by repeatedly reading /dev/random, and lead to benign reads
blocked. The latest Linux kernel v5.10 fixed this issue by redirect-
ing /dev/random reads to /dev/urandom. However, both Azure and
Alibaba Cloud are vulnerable to this attack.
5.4 Attacking gVisor
We also conduct the 7 resource attacks on gVisor. To set up gVi-
sor environment, we select runsc, instead of runc, as the con-
tainer runtime in Google Kubernetes Engine (GKE), as mentioned
in §5.1. Among the 7 attacks, two attacks, i.e., nr_files attack and
netns_ct->count attack, still work in the gVisor environment. In the
following, we present our analysis to show why these two attacks
work on gVisor.
For the nr_files, gVisor uses Sentry to serve syscalls and Gofer
to handle different types of IO for the Sentry. Sentry intercepts
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea774Table 4: Summary of the attack results on different environments. “Y” indicates a successful attack, “-” indicates a failed attack.
Local AWS Azure Google Alibaba Attacking Results
Abstract Resources
PID idr
dirty ratio
inode
nr_files
pty_count
netns_ct->count
random entropy
Y
Y
Y
Y
Y
Y
Y
Y
Y
-
Y
Y
Y
-
Y
Y
-
Y
Y
Y
Y
Y
-
-
Y
Y
Y
-
-
Y
Y
Y
Y
Y
Y
Fork fail, victim container is evicted
IO performance down for over 90%
Victim container gets evicted
Operations requiring open-new-file fail
New SSH connections are rejected
Random packets dropping
/dev/random read blocked
the open syscall from the container and sends the request to Gofer.
On the other side, Gofer handles the request by calling the openat
syscall of the host OS. Eventually, the openat syscall on the host
OS triggers the alloc_empty_file function, which consumes the
nr_files. In this way, the attacker in gVisor is able to exhaust the
nr_files of the host machine.
For the netns_ct->count, Sentry intercepts the connect syscall
and uses its own network stack to forward the data packets to
the veth-peer network card created in the host. The veth-peer is
attached to the virtual bridge in the host. When a network frame is
forwarded via a virtual bridge, the netfilter on the host is triggered
to call the nf_conntrack_alloc function, which in turn consumes
the netns_ct->count. Therefore, attackers in gVisor still can exhaust
the netns_ct->count of the host machine.
5.5 Summary
For the self-deployed shared-kernel container environments, two
of them are vulnerable to 6 attacks, one is vulnerable to 5 attacks,
and the other one is vulnerable to 4 attacks. Surprisingly, gVisor
runtime is also vulnerable to 2 attacks—the nr_files attack and the
netns_ct->count attack. We have reported these attacks to all the
four vendors. All of them confirmed that the problems exist in their
shared-kernel container environments.
Though the top vendors use virtual machines to isolate the con-
tainers for different tenants, abstract resource attack is still practical
for several reasons. First, as demonstrated on Linux, FreeBSD, and
Fuchsia, abstract resource attack is intrinsic to OS-level virtualiza-
tion and thus is a broad class of attacks. Second, inexperienced users
may not understand the risks of the shared-kernel and may use
containers for sand-boxing [62]. Our paper would help to improve
the awareness of the risks. Third, even within the same tenant, the
competing teams might attack each other by exploiting abstract
resources. Therefore, it is still necessary to monitor and mitigate
such attacks.
6 MITIGATION DISCUSSIONS
In this paper, we reveal that other than physical resources, con-
tainers are also sharing the abstract resources of the underlying
running kernel. These abstract resources are easy to attack and the
consequences are severe. In the following, we give out multiple
strategies for mitigating the risks introduced by abstract resources.
Using PAM for per-user quota restrictions. As mentioned in §4.2,
the Linux kernel provides interfaces allowing the user to load user-
customized PAM. PAM is able to limit 18 resources, 5 of which are
for abstract resources, including maxlogin/maxsyslogins, nofile,
nproc, and sigpending [48]. From our communication with the
cloud vendors, we are not aware that any cloud vendors adopt
PAM. Therefore, it is suggested to use PAM for certain abstract
resource restrictions.
Using VM for strong isolation. For the security-critical applica-
tions, we suggest not using the multi-tenancy container environ-
ments. Stronger isolation schemes, such as the virtual machine-
based virtualization, are more preferable.
Using Monitoring Tools. We recommend to use the monitoring
tools for Kubernetes clusters, such as Falco [61], to monitor the
resource consumption of containers. For sensitive abstract resources
such as nr_files and inode, users should customize their own rules
to monitor specific resource consumption in the system.
Improving current isolation design. For the existing names-
paces, such as PID namespace, due to the mapping to the root
namespace design, it cannot defend against the resource exhaus-
tion attacks. As detailed in §3.2.2, the Linux kernel allocates an
extra idr in the root PID namespace for any idr allocated in other
PID namespaces. As a result, the root PID namespace is still glob-
ally shared. The attacker can still easily exhaust the PID in the
root PID namespace, causing DoS attacks. For the similar reason,
nf-conntrack count netns_ct->count can be attacked even if it is
isolated by network namespace. Therefore, Linux community needs
to review the namespace design, eliminating the namespace depen-
dencies to improve the isolation.
New kernel containment mechanisms. The Linux kernel com-
munity and the container community need to put more effort into
the protection of abstract resources. Actually, we report this prob-
lem to the Docker security team. The feedback is that “Linux con-
tainers can only use available kernel isolation mechanisms. If there
are no kernel mechanisms to control the limit, the container can-
not do anything to restrict it”. Therefore, we first need a thorough
analysis of all container shareable abstract resources, so that we
can understand and more importantly, clear up their data depen-
dencies. This requires comprehensive kernel domain knowledge
and substantial kernel code changes. Moreover, the Linux kernel
is not initially designed for supporting OS-level virtualization. Its
resource isolation and containment are incomplete. Therefore, new
namespace and control groups are needed.
More restrictive system call blocking. From the container side,
currently, even with seccomp enforced, the applications in the con-
tainers can still access about 250 system calls. Before we understand
the data dependency of those system calls, it is suggested to enforce
a more strict seccomp profile to block more unnecessary system
calls. The container users can use techniques in [13, 25, 26, 38, 55]
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea775to get tighter seccomp profiles, to reduce the potential of abstract
resource attacks.
7 RELATED WORK
In this section, we present the studies that are related to virtualiza-
tion, resource isolation, and container security.
7.1 Virtualization Techniques
There are two mainstream virtualization techniques used in the
cloud environment, VM-based virtualization and OS-level virtu-
alization. Compared with the VM-based virtualization, OS-level
virtualization is becoming popular for enabling full application ca-
pability with light-weight virtualization. To fully understand the
performance advantages, researchers have conducted a series of
studies. Felter et al. show that Docker can achieve better perfor-
mance than KVM in all cases by using a set of benchmarks covering
multiple resources [17]. Joy et al. make a comparison between
Linux containers and virtual machines in terms of performance