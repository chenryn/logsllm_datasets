user@net1:~$ sudo ip address add 172.16.10.5/24 dev macvlan1
```
最后，我们需要确保打开界面。
```
user@net1:~$ sudo ip link set dev macvlan1 up
```
界面现已打开，我们可以使用`ip addr show`命令检查配置:
```
user@net1:~$ ip addr show
1: ……
2: eth0:  mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 00:0c:29:2d:dd:79 brd ff:ff:ff:ff:ff:ff
    inet 172.16.10.2/24 brd 172.16.10.255 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::20c:29ff:fe2d:dd79/64 scope link
       valid_lft forever preferred_lft forever
3: eth1:  mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 00:0c:29:2d:dd:83 brd ff:ff:ff:ff:ff:ff
    inet6 fe80::20c:29ff:fe2d:dd83/64 scope link
       valid_lft forever preferred_lft forever
4: macvlan1@eth0:  mtu 1500 qdisc noqueue state UNKNOWN group default
    link/ether da:aa:c0:18:55:4a brd ff:ff:ff:ff:ff:ff
    inet 172.16.10.5/24 scope global macvlan1
       valid_lft forever preferred_lft forever
    inet6 fe80::d8aa:c0ff:fe18:554a/64 scope link
       valid_lft forever preferred_lft forever
user@net1:~$
```
现在我们已经配置了接口，有几个有趣的项目需要指出。首先，MacVLAN 接口的名称使得识别接口的父接口变得容易。回想一下，我们提到过每个 MacVLAN 接口必须与一个父接口相关联。在这种情况下，我们可以通过查看 MacVLAN 接口名称中`macvlan1@`后面列出的名称来判断这个 MacVLAN 接口的父接口是`eth0`。其次，分配给 MacVLAN 接口的 IP 地址与父接口位于同一子网(`eth0`)。这是有意允许外部连接。让我们在同一个父接口上定义第二个 MacVLAN 接口，以演示允许哪种连接:
```
user@net1:~$ sudo ip link add macvlan2 link eth0 type macvlan
user@net1:~$ sudo ip address add 172.16.10.6/24 dev macvlan2
user@net1:~$ sudo ip link set dev macvlan2 up
```
我们的网络拓扑如下:
![How to do it…](img/5453_09_02.jpg)
我们有两个 MacVLAN 接口绑定到 net1 的`eth0`接口。如果我们试图从外部子网到达任何一个接口，连接应该如预期的那样工作:
```
user@test_server:~$ ip addr show dev eth0 |grep inet
    inet 10.20.30.13/24 brd 10.20.30.255 scope global eth0
user@test_server:~$ ping 172.16.10.5 -c 2
PING 172.16.10.5 (172.16.10.5) 56(84) bytes of data.
64 bytes from 172.16.10.5: icmp_seq=1 ttl=63 time=0.423 ms
64 bytes from 172.16.10.5: icmp_seq=2 ttl=63 time=0.458 ms
--- 172.16.10.5 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 1000ms
rtt min/avg/max/mdev = 0.423/0.440/0.458/0.027 ms
user@test_server:~$ ping 172.16.10.6 -c 2
PING 172.16.10.6 (172.16.10.6) 56(84) bytes of data.
64 bytes from 172.16.10.6: icmp_seq=1 ttl=63 time=0.510 ms
64 bytes from 172.16.10.6: icmp_seq=2 ttl=63 time=0.532 ms
--- 172.16.10.6 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 1000ms
rtt min/avg/max/mdev = 0.510/0.521/0.532/0.011 ms
```
在前面的输出中，我试图从位于`net1`主机子网之外的测试服务器到达`172.16.10.5`和`172.16.10.6`。在这两种情况下，我们都能够到达 MacVLAN 接口的 IP 地址，这意味着路由工作正常。这就是为什么我们在服务器`eth0`接口的现有子网内给了 MacVLAN 接口 IP 地址。由于多层交换机知道`172.16.10.0/24`住在 VLAN 10 之外，它只需向 VLAN 10 上的新 IP 地址发出 ARP 请求，就可以获得它们的 MAC 地址。Linux 主机已经有一条指向交换机的默认路由，允许返回流量到达测试服务器。然而，这绝不是 MacVLAN 接口的要求。我本可以很容易地选择另一个 IP 子网作为接口，但这会妨碍外部路由本身的工作。
需要指出的另一点是，父接口不需要有与之关联的 IP 地址。例如，让我们通过再构建两个 MacVLAN 接口来扩展拓扑。一个在主机`net1`上，另一个在主机`net2`上:
```
user@net1:~$ sudo ip link add macvlan3 link eth1 type macvlan
user@net1:~$ sudo ip address add 192.168.10.5/24 dev macvlan3
user@net1:~$ sudo ip link set dev macvlan3 up
user@net2:~$ sudo ip link add macvlan4 link eth1 type macvlan
user@net2:~$ sudo ip address add 192.168.10.6/24 dev macvlan4
user@net2:~$ sudo ip link set dev macvlan4 up
```
我们的拓扑如下:
![How to do it…](img/5453_09_03.jpg)
尽管没有在物理接口上定义 IP 地址，但是主机现在认为`192.168.10.0/24`网络已经定义，并且认为网络是本地连接的:
```
user@net1:~$ ip route
default via 172.16.10.1 dev eth0
172.16.10.0/24 dev eth0  proto kernel  scope link  src 172.16.10.2
172.16.10.0/24 dev macvlan1  proto kernel  scope link  src 172.16.10.5
172.16.10.0/24 dev macvlan2  proto kernel  scope link  src 172.16.10.6
192.168.10.0/24 dev macvlan3  proto kernel  scope link  src 192.168.10.5
user@net1:~$
```
这意味着两台主机可以通过该子网中的关联 IP 地址直接联系到对方:
```
user@net1:~$ ping 192.168.10.6 -c 2
PING 192.168.10.6 (192.168.10.6) 56(84) bytes of data.
64 bytes from 192.168.10.6: icmp_seq=1 ttl=64 time=0.405 ms
64 bytes from 192.168.10.6: icmp_seq=2 ttl=64 time=0.432 ms
--- 192.168.10.6 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 1000ms
rtt min/avg/max/mdev = 0.405/0.418/0.432/0.024 ms
user@net1:~$
```
此时，您可能想知道为什么要使用 MacVLAN 接口类型。从表面上看，这与仅仅创建逻辑子接口没有太大区别。真正的区别在于接口是如何构建的。通常，子接口都使用父接口的相同媒体访问控制地址。您可能在前面的输出和图表中注意到，MacVLAN 接口的 MAC 地址与其关联的父接口不同。我们也可以在上游多层交换机(网关)上验证这一点:
```
switch# show ip arp vlan 10
Protocol  Address          Age (min)  Hardware Addr   Type   Interface
Internet  172.16.10.6             8   a2b1.0cd4.4e73  ARPA   Vlan10
Internet  172.16.10.5             8   4e19.f07f.33e0  ARPA   Vlan10
Internet  172.16.10.2             0   000c.292d.dd79  ARPA   Vlan10
Internet  172.16.10.3            62   000c.2959.caca  ARPA   Vlan10
Internet  172.16.10.1             -   0021.d7c5.f245  ARPA   Vlan10
```
### 注
在测试中，您可能会发现 Linux 主机为您配置中的每个 IP 地址提供了相同的 MAC 地址。根据您运行的操作系统，您可能需要更改以下内核参数，以防止主机显示相同的 MAC 地址:
```
echo 1 | sudo tee /proc/sys/net/ipv4/conf/all/arp_ignore
echo 2 | sudo tee /proc/sys/net/ipv4/conf/all/arp_announce
echo 2 | sudo tee /proc/sys/net/ipv4/conf/all/rp_filter
```
请记住，以这种方式应用这些设置不会一直持续到重新启动。
查看 MAC 地址，我们可以看到父接口(`172.16.10.2`)和两个 MacVLAN 接口(`172.16.10.5 and .6`)的 MAC 地址不同。MacVLAN 允许您使用不同的 MAC 地址呈现多个接口。最终结果是，您可以有多个 IP 接口，每个接口都有自己唯一的 MAC 地址，它们都使用相同的物理接口。
由于父接口负责多个媒体访问控制地址，它需要处于混杂模式。当一个接口被选为父接口时，主机应该自动将它置于混杂模式。您可以通过检查 ip 链接详细信息来验证:
```
user@net2:~$ ip -d link
……
2: eth1:  mtu 1500 qdisc pfifo_fast state UP mode DEFAULT group default qlen 1000
    link/ether 00:0c:29:59:ca:d4 brd ff:ff:ff:ff:ff:ff promiscuity 1
……
```
### 注
如果担心父接口处于混杂模式，您可能会对本章后面的食谱感兴趣，我们将在其中讨论 IPVLAN 配置。
和我们已经看到的其他 Linux 接口类型一样，MacVLAN 接口也是命名空间感知的。这可以带来一些有趣的配置选项。现在让我们看看在唯一的网络名称空间中部署 MacVLAN 接口。
让我们从删除所有现有的 MacVLAN 接口开始:
```
user@net1:~$ sudo ip link del macvlan1
user@net1:~$ sudo ip link del macvlan2
user@net1:~$ sudo ip link del macvlan3
user@net2:~$ sudo ip link del macvlan4
```
就像我们在第一章、 *Linux 网络结构*中所做的一样，我们可以创建一个接口，然后将其移动到一个名称空间中。我们从创建命名空间开始:
```
user@net1:~$ sudo ip netns add namespace1
```
然后，我们创建 MacVLAN 接口:
```