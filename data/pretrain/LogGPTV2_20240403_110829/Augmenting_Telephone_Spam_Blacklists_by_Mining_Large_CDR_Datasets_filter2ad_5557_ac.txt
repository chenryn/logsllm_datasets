numbers into four groups, based on their call volume. Specifically,
we group together numbers with a call volume in the range 0 to
75th percentile, 75th to 90th percentile, 90th to 98th percentile,
and above 98th percentile. Then, for each of these four groups
we measure how many phone numbers received user complaints
according to Baidu (i.e., we derive the set Sb(1) from each group).
Detailed results are reported in Table 2, which shows the total
number of sampled source numbers and those among them that
belong to Sb(1). The table shows the same statistics for each group
(i.e., for each call volume percentile interval). The results in the
table demonstrate that numbers which received complaints are
more likely to be found among the source numbers with high
call volumes. For instance, 32.37% of source numbers in the last
call volume interval have received user complaints, whereas the
percentage of such numbers in the other three call volume intervals
is significantly lower.
Table 2: The density of spam phone numbers in different call
volume intervals in Da
Call Volume ≥ 2, total source numbers: 813,105
5% sample size
# spam in sample
Call Volume
1106 (2.72%)
40,680
interval size
# spam in sample
2 ≤ Call Volume = 10Session 7: Cellular, Phone, and EmailASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea279Figure 7: System Architecture
about unknown source numbers that are clustered together with
other known spam numbers. That is how we propagate spam labels
from known spam numbers to unlabeled numbers in pure spam
clusters. In the following, we describe the details of this procedure.
We define a cluster as pure spam cluster if it contains at least one
known spam number and zero or more unlabeled numbers, but no
known benign number. Similarly, a pure benign cluster is a cluster
that contains at least one known benign number and zero or more
unlabeled numbers, but no known spam number. On the other hand,
a mixed cluster contains both one or more known benign number
and one or more spam numbers, along with zero or more unlabeled
numbers. Using these definitions, we define the following indices
to evaluate clustering results:
• Ls: the fraction of known spam numbers contained in pure
spam clusters, out of all known spam numbers in the initial
list of “seed” spam numbers. It is clear that 1−Ls indicates the
fraction of known spam numbers that are in mixed clusters.
• Lb: the fraction of benign numbers contained in pure benign
clusters, out of all known benign numbers in the initial list of
“seed” benign numbers. Also, the fraction of benign numbers
in mixed clusters would be 1 − Lb.
• Lu: the fraction of unlabeled numbers (i.e. unknown num-
bers) contained in pure spam clusters, out of all unlabeled
source numbers in the input data.
To choose the best cutting height, CR moves down the dendro-
gram and cuts at every height; at each step, a different set of clusters
is generated. Then, for each cut, CR seeds the clusters with the pro-
vided labeled spam and benign numbers and computes the indices
defined above. Finally, CR ranks each clustering outcome according
to the following rules:
(1) Remove all clustering outcomes for which Ls < θs and Lb <
θb, where θs and θb are two tunable thresholds. Essentially,
CR discards any clustering result where the seeded spam
and benign numbers are not well separated (according to the
preset thresholds).
(2) From the remaining clustering outcomes, choose the clus-
tering result for which Lu is maximum. In other words, we
choose the clustering that will have the highest impact when
propagating spam labels to unlabeled numbers in pure spam
clusters.
After obtaining the best set of clusters, using the rules above,
CR performs label propagation, and marks all unknown source
numbers that are grouped in pure spam clusters as spam. These
Figure 8: Feature Vector Examples from Our Datasets
Figure 9: Illustration of Clustering Engine Work
5.6 Clustering Ranker and Label Propagation
The Clustering Ranker (CR) module takes the dendrogram gener-
ated by the Clustering Engine in input, along with a “seed” set of
labeled spam and benign source numbers (notice that these labeled
numbers were also included in the computation of the distance
matrix). We then measure at which height the dendrogram should
be cut so that these known spam and benign source numbers are
maximally separated. The set of clusters obtained by cutting the den-
drogram at the optimum height are then used to make predictions
Distance Matrix Generator............Clustering EngineClustering RankerCDRLabeledNumbersNew SpamNumbersS1S1S2S2S3S3SnSn......xxxxxxxxxxxxxxxxxxxxxxxxxCall FilterFeature ExtractorCall VolumeFeature Vector of 0018614053383Long Prefix681363660, 1363662, 1370106, 1390169, 1390186, 1390192, 1391868, 1391869, 136366, 137010, 139016, 139018, 139019, 139186Short PrefixCall VolumeFeature Vector of 0018046572059Long Prefix951363660, 1363662, 1368140, 1368141, 1368319, 1370106, 1370706, 1390169, 1390186, 1390192, 1504648, 1527007136366, 136814, 136831, 137010, 137070, 139016, 139018, 139019, 150464, 152700Short PrefixCutting at level 11 cluster formed...Clustering EngineCutting at level 22 clusters formedCutting at level 33 clusters formedCutting at level 44 clusters formedCutting at level NN clusters formedSession 7: Cellular, Phone, and EmailASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea280newly labeled spam numbers are the output of our system, as shown
in Figure 7.
In our system, we set θs = 1.0 and θb = 1.0 to force CR to form
clusters where spam and benign numbers are completely disjointed.
This ensures that the set of output clusters are accurate, do not
contain any mixed clusters, and provide maximal coverage over
unknown numbers in pure spam clusters.
Note, however, that in some certain situations the best set of
clusters are formed in a way that Lu = 0.0 (or some value very
close to 0.0), i.e. in the set of output clusters, chosen by CR, no
unknown number is clustered together with known spam numbers,
and, therefore, CR cannot label any new unknown number as spam
by label propagation. This scenario could happen when, for example,
due to noise in the set of seed labeled spam and benign numbers, a
benign and a spam number fall in the same cluster no matter how
far down the dendrogram tree the cut happens. So, in this case and
according to the first rule, CR will be left with no option other than
forming a set of all singleton clusters for known benign and spam
numbers (i.e. enforcing Ls = 1.0 and Lb = 1.0). Obviously, this
situation is not ideal as the system cannot expand spam blacklists.
We will show in Section 6.2 that this scenario does not occur using
our system with a careful selection of spam and benign numbers
to be included in our ground truth and by keeping the noise levels
minimal. However, we still discuss a simple approach to remedy
these cases as follows. We simply allow Lb and Ls values fall slightly
below 1.0 by choosing the second best set of clusters. To do this
we lower θs and θb thresholds in the first rule to the next possible
values less than 1.0 while trying to specifically keeping Lb (the
fraction of benign numbers in pure benign clusters) as close to 1.0
as possible. To be more specific, we find a set of clusters where even
though Lb < 1.0, for example, it is as close as it could be to 1.0
while avoiding generating singleton clusters, hence maximizing Lu
(the unknown numbers covered in pure spam clusters). In essence,
we allow minimal number of mixed clusters in the set of output
clusters. As long as the number of mixed clusters is minimal, the rest
of the pure clusters could be trusted to label previously unknown
numbers.
6 EVALUATION
6.1 Experimental Setup
6.1.1 Call Filter Threshold θcv . From figure 1, we can see that
the distribution of call volumes is very skewed and majority of
numbers only make very few calls per day. Also, our analysis in
Section 4.4 suggests that spam numbers are highly likely among
those numbers with very high call volumes, specifically those that
have been complained about a lot. Therefore, in our experiments,
we focus on those source numbers that their call volume is in the
top 2% and set the value of θcv accordingly.
6.1.2 Evaluation Methodology. In order to evaluate the system
on daily basis, we devised a methodology that represents the real-
world operation of our system. An overview of our evaluation
method is shown in Figure 10 and is described as follows. First, we
set the rolling time window ∆t = 1−day, as it was explained in Sec-
tion 5.1 and perform a leave-one-out cross-validation experiment
on our semi-supervised learning approach, which was explained
in Section 5 and shown in Figure 7. Explicitly, we divide the set
of labeled spam and benign source numbers into n groups where
n is the size of labeled number set in the ground truth. The kth