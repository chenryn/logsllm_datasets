title:UAv6: Alias Resolution in IPv6 Using Unused Addresses
author:Ramakrishna Padmanabhan and
Zhihao Li and
Dave Levin and
Neil Spring
UAv6: Alias Resolution in IPv6
Using Unused Addresses
Ramakrishna Padmanabhan(B), Zhihao Li, Dave Levin, and Neil Spring
University of Maryland, College Park, MD, USA
{ramapad,zhihaoli,dml,nspring}@cs.umd.edu
As the IPv6 Internet grows, alias resolution in IPv6 becomes more important.
Traditional IPv4 alias resolution techniques such as Ally do not work for IPv6
because of protocol diﬀerences. Recent techniques adopted speciﬁcally for IPv6
have shown promise, but utilize source routing, which has since been deprecated,
or rely upon sequential fragment identiﬁers supported on only a third of router
interfaces. As a result, IPv6 alias resolution remains an open problem.
This paper introduces UAv6, a new alias resolution technique for IPv6. UAv6
ﬁnds aliases in two phases. The ﬁrst “harvest” phase gathers potential alias pairs,
and is based on our empirical observation that addresses adjacent to router inter-
face addresses are often unused. UAv6 probes these unused addresses, eliciting
ICMPv6 Address Unreachable responses. The central assumption of this work
is that the source address of such a response belongs to a router directly con-
nected to the preﬁx containing the unused and router interface addresses. The
second “disambiguation” phase determines which interface address is an alias of
the Address Unreachable’s source address. UAv6 uses both new and established
techniques to construct proofs or disproofs that two addresses are aliases.
We conﬁrm the accuracy of UAv6 by running the Too-Big Trick test upon
the aliases we ﬁnd, and by comparing them with limited ground truth. We also
show that the classic address-based technique to resolve aliases in IPv4 works
for IPv6 as well, and show that the address-based technique, UAv6, and the
Too-Big Trick are complementary techniques in resolving IPv6 aliases.
1 Introduction
With the impending exhaustion of IPv4 addresses, IPv6 adoption has seen steady
growth [8], and particularly robust growth in the last two years [7]. As IPv6
deployment increases, knowledge of its topology becomes valuable to researchers
and commercial providers. Traceroutes are the traditional tool for inferring net-
work topology [5,18], but using traceroutes alone for topology-mapping does not
suﬃce. Traceroutes discover multiple interfaces of a router, but do not reveal
which interfaces belong to the same router. Alias resolution is the process of
grouping interfaces onto their corresponding routers, thereby rendering a more
accurate picture of the actual network topology.
Numerous alias resolution techniques exist for IPv4 [2,17,18], but proto-
col diﬀerences prevent their straightforward application to IPv6. Researchers
The ﬁrst two authors contributed equally to this work.
c(cid:2) Springer International Publishing Switzerland 2015
J. Mirkovic and Y. Liu (Eds.): PAM 2015, LNCS 8995, pp. 136–148, 2015.
DOI: 10.1007/978-3-319-15509-8 11
UAv6: Alias Resolution in IPv6 Using Unused Addresses
137
have come up with several IPv6-speciﬁc techniques over the last decade. Early
techniques used the source routing feature in IPv6 to resolve aliases [14,15,19],
but source routing in IPv6 has since been deprecated [1]. Another successful app-
roach to resolve aliases is the shared counter method: Ally [18] and Radargun [2]
use this technique in IPv4, and recently, the Too-Big Trick (TBT) applied this
approach to ﬁnd aliases in IPv6 [3,12]. However, Speedtrap [12] reports that 68 %
of router interfaces do not respond to the Too-Big Trick. Thus, alias resolution
in IPv6 remains an open problem.
In this paper, we describe a new alias resolution technique, UAv6, which
operates in two phases. The ﬁrst phase, called the harvest phase, collects candi-
date aliases by probing unused addresses in IPv6 router interface preﬁxes. The
IPv6 address space is large enough that addresses for point-to point links are not
typically assigned out of 127-bit preﬁxes which have only two addresses; rather,
point-to-point links typically use only two of the four addresses in a /126 preﬁx.
By sending a packet to an address that is within a preﬁx but not assigned to an
interface, we solicit an ICMPv6 Address Unreachable (AU) error. Only a router
directly connected to the preﬁx is likely to respond with an AU. Therefore, the
source address of the AU is an alias for one of the used addresses within the
preﬁx. This results in two possible alias pairs, but the harvest phase does not
determine which of them is the true alias.
UAv6’s second phase, called the disambiguation phase determines which of
the harvest’s candidate aliases are true aliases. Because one of the two candidate
aliases produced by the harvest phase must be a true alias, we can either prove
one of them to be true, or we can disprove one and conclude the other must be
true by process of elimination. We provide tests of both types and show that
they are complementary. The ﬁrst test uses traceroutes to disprove one of the
candidate aliases: If one of the addresses in the pair appears on the path to the
other, they are unlikely to be aliases of one another. The second test uses shared
Path MTU (PMTU) caches in some router implementations to prove one of the
alias pairs true: If an address pair shares PMTU caches, it is a true alias pair,
as only aliases share PMTU caches.
The contributions of this work are:
– We observe the presence of unused addresses in router interface address pre-
ﬁxes. We present UAv6, a two-phase alias resolution technique in IPv6 that
uses these partially used preﬁxes.
– We verify UAv6’s accuracy by running the TBT test [3] where possible. TBT
could be applied to 23.2 % of the alias pairs we found and it conﬁrmed 99.86 %
of them. We also compare the aliases we ﬁnd against limited ground truth from
the Internet2 dataset and verify all the Internet2 aliases we discover.
– We demonstrate that a classic IPv4 alias resolution technique, the address-
based technique [9,13,18], works in IPv6, in spite of recommendations in RFC
4443 [6]. We show, however, that UAv6 ﬁnds almost twice as many aliases as
the address-based technique within router interface addresses derived from
traceroutes sent by the Ark project [4].
138
R. Padmanabhan et al.
2 Related Work
Alias resolution schemes can be broadly classiﬁed into the following categories:
Address-based: In IPv4, some routers are conﬁgured to use the outgoing inter-
face’s address as the source address for certain ICMP response types. Pansiot
and Grad [13] harness this to obtain aliases by checking when the source address
in a response is diﬀerent from the destination probed. Some researchers [12,19]
have been discouraged from applying a similar approach in IPv6, because the
ICMPv6 speciﬁcation [6] states that IPv6 routers must use the address to which
the packet was sent as the source address in ICMPv6 responses, if the address
belongs to the router. We demonstrate in Sect. 5 that, contrary to the speciﬁca-
tion, the address-based approach ﬁnds aliases in IPv6.
Source routing-based: In the early 2000s, only 8 % of IPv4 routers supported
source routing [9], but the IPv6 Internet supported the feature in most routers
[19]. Early IPv6 alias resolution techniques used source routing-based methods
to ﬁnd aliases [14,15,19]. However, source routing in IPv6 has been deprecated
because of security concerns [1] and support is likely to decline further.
Shared counter-based: In IPv4, Rocketfuel [18] introduced Ally, an alias res-
olution scheme that determines aliases by checking if the “IP-ID” ﬁelds on two
interfaces are generated from a shared counter. IPv6 dispensed with the IP-
ID ﬁeld because routers do not fragment packets in IPv6 when forwarding.
Instead, if an interface obtains a too-large packet, it sends an ICMP Packet
Too Big (PTB) message to the source. The source then sends subsequent too-
large packets as fragments and inserts a common Fragment ID into fragments for
reassembly.
The “Too-Big Trick” (TBT) technique introduced by Beverly et al. [3] found
that many IPv6 routers use a counter that is shared among all of its interfaces,
from which these fragment IDs are obtained. To solicit fragmented packets, TBT
sends a large Echo Request packet (1300 bytes) to both addresses in a candidate
alias pair, followed by a PTB message to each of them. Next, it sends large Echo
Requests alternately to each address. If the returned fragments have sequential
fragment IDs, then TBT declares the pair to be aliases.
Given a set of router interface addresses obtained from traceroutes, TBT
requires a number of probes proportional to the number of pairs of addresses,
since TBT is a pairwise test. Speedtrap [12] obtains the same aliases that TBT
would have obtained, but does so more eﬃciently. It probes interface addresses
in parallel and groups together candidate alias pairs into smaller sets before
performing TBT’s pairwise test upon members of the set. However, only 32 % of
router interfaces in the IPv6 Internet provide fragments from a shared sequential
counter [12].
Preﬁx-based: UAv6 does not depend upon shared sequential counters, support
for source routing, or on ICMPv6 responses from diﬀerent source addresses.
Instead, it relies upon the presence of preﬁxes that contain unused addresses
adjacent to router interface addresses. The next section shows that such partially
used preﬁxes are common in IPv6.
UAv6: Alias Resolution in IPv6 Using Unused Addresses
139
3 Unused Addresses in IPv6 Preﬁxes
Since the IPv6 address space is immense, we expect that IPv6 router interface
addresses on point-to-point links are assigned out of /126 preﬁxes, or larger,
leaving some addresses unused. This is similar to the existing practice of using
/30s in IPv4 [17]. However, two conﬂicting RFCs for IP address assignment in
IPv6 create uncertainty. RFC 3627 [16], published in 2003, ﬁnds that /127 preﬁx
lengths in IPv6 are harmful and recommends the use of /64 preﬁxes instead for
point-to-point links. RFC 6164 [11], published in 2011, recommends the use of
/127s for point-to-point links.
We investigate if IPv6 router interface addresses are allocated from /126 or
larger preﬁxes by studying the distribution of their last digits. We extracted
68,474 router interface addresses from traceroutes sent by the Ark project in
July 2014 [4]. Figure 1(a) shows the distribution of router interface addresses
across the last hex digits for these addresses. Most (59 %) addresses end in hex
digits “1” or “2”. Further, 82 % end in the binary digits “01” or “10”.
30000
20000
10000
s
e
c
a
f
r
e
t
n
i
f
o
r
e
b
m
u
N
0
30000
20000
10000
s
e
c
a
f
r
e
t
n
i
f
o
r
e
b
m
u
N
0