3\. 加入通道，函数：checkOSNAvailability
4\. 更新组织1的锚节点，函数：updateAnchorPeers
5\. 更新组织2的锚节点，函数：updateAnchorPeers
6\. 在组织1的节点0上安装智能合约，函数：installChaincode
7\. 在组织2的节点0上安装智能合约，函数：installChaincode
8\. 在组织2的节点0上实例化智能合约，函数：instantiateChaincode
9\. 在组织1的节点0上查询智能合约，函数：chaincodeQuery
10\. 从组织1的节点0向组织2的节点0转移数据10的交易，函数：chaincodeInvoke
11\. 在组织2的节点1上安装智能合约，函数：installChaincode
12\. 在组织2的节点1上查询智能合约，函数：chaincodeQuery
## E2E文件结构
End-2-End案例的全部文件在fabric/examples/e2e_cli目录下，文件结构如下所示：
-   base:目录，存放配置提炼的公有部分，有两个文件，分别为docker-compose-base.yaml和peer-base.yaml
-   crypto-config.yaml：生成的公私钥和证书的配置文件
-   docker-compose-e2e-template.yaml:
-   end-to-end.rst:
-   scripts：目录，只有一个script.sh文件，该文件是案例的运行功能的集合，运行后会自动执行全部功能，直到完成
-   channel-artifacts：目录，存放生成的通道和创世纪块等文件，包括有channel.tx、genesis.block、Org1MSPanchors.tx和Org2MSPanchors.tx
-   docker-compose-cli.yaml：Fabric网络Docker运行配置文件
-   docker-compose-e2e.yaml:
-   generateArtifacts.sh：生成公私钥和证书的执行文件
-   configtx.yaml：通道配置文件
-   docker-compose-couch.yaml:
-   download-dockerimages.sh: 下载Fabric镜像执行文件
-   network_setup.sh: 案例运行的入口文件
## 执行流程：
Fabric基础环境搭建完成后，End-2-End案例的运行先从network_setup.sh文件执行，执行过程中调用generateArtifacts.sh生成公私钥和证书等文件，再根据docker-compose-cli.yaml的配置内容通过docker运行zookeeper、kafka、orderer、peer和cli,最后在cli中运行script.sh文件，批量执行创建通道、加入通道、安装智能合约、实例化智能合约、执行交易和执行查询等功能，以上过程在没有错误的情况下，自动执行逐行执行，直到提示END-E2E表示成功。
流程说明：
1\. 在e2e_cli目录执行network_setup.sh up表示开始执行，network_setup.sh
down表示结束执行；
2\. 执行network_setup.sh
up后先判断是否存在crypto-config目录，如果不存在，则调用generateArtifacts.sh文件生成公私钥和证书；否则通过命令docker-compose
-f \$COMPOSE_FILE up -d开始启动Fabric网络；
3\.
Fabric网络启动成功后，自动执行script.sh文件，按照代码顺序，分别执行如下代码：
1\) 显示start-e2e：显示将开始执行案例；
2\) checkOSNAvailability：执行peer channel fetch 0 0_block.pb -o
orderer.example.com:7050 -c \"\$ORDERER_SYSCHAN_ID\" \--tls \--cafile
\$ORDERER_CA \>&log.txt命令，验证排序（orderer）服务是否可用；
3\) createChannel：执行peer channel create -o orderer.example.com:7050
-c \$CHANNEL_NAME -f ./channel-artifacts/channel.tx \--tls \--cafile
\$ORDERER_CA \>&log.txt命令创建通道；
4\) joinChannel：执行peer channel join -b \$CHANNEL_NAME.block
\>&log.txt命令四个peer节点加入到通道中；
5\) updateAnchorPeers 0 1：执行peer channel update -o
orderer.example.com:7050 -c \$CHANNEL_NAME -f
./channel-artifacts/\${CORE_PEER_LOCALMSPID}anchors.tx \--tls \--cafile
\$ORDERER_CA \>&log.txt命令更新组织1的锚节点0；
6\) updateAnchorPeers 0 2：执行peer channel update -o
orderer.example.com:7050 -c \$CHANNEL_NAME -f
./channel-artifacts/\${CORE_PEER_LOCALMSPID}anchors.tx \--tls \--cafile
\$ORDERER_CA \>&log.txt命令更新组织2的锚节点0；
7\) installChaincode 0 1：执行peer chaincode install -n mycc -v 1.0 -p
github.com/hyperledger/fabric/examples/chaincode/go/example02/cmd
\>&log.txt命令在组织1的节点0上安装智能合约；
8\) installChaincode 0 2：执行peer chaincode install -n mycc -v 1.0 -p
github.com/hyperledger/fabric/examples/chaincode/go/example02/cmd
\>&log.txt命令在组织2的节点0上安装智能合约；
9\) instantiateChaincode 0 2：执行peer chaincode instantiate -o
orderer.example.com:7050 \--tls \--cafile \$ORDERER_CA -C \$CHANNEL_NAME
-n mycc -v 1.0 -c
\'{\"Args\":\[\"init\",\"a\",\"100\",\"b\",\"200\"\]}\' -P \"AND
(\'Org1MSP.peer\',\'Org2MSP.peer\')\"
\>&log.txt在组织2的节点0上实例化智能合约，初始化a值为100和b值为200；
10\) chaincodeQuery 0 1 100：执行peer chaincode query -C \$CHANNEL_NAME
-n mycc -c \'{\"Args\":\[\"query\",\"a\"\]}\'
\>&log.txt命令在组织1的节点0上查询a值，并判断是否为100；
11\) chaincodeInvoke 0 1 0 2：执行peer chaincode invoke -o
orderer.example.com:7050 \--tls \--cafile \$ORDERER_CA -C \$CHANNEL_NAME
-n mycc \$PEER_CONN_PARMS -c
\'{\"Args\":\[\"invoke\",\"a\",\"b\",\"10\"\]}\'
\>&log.txt命令从a值中转称10到a值中；
12\) installChaincode 1 2：执行peer chaincode install -n mycc -v 1.0 -p
github.com/hyperledger/fabric/examples/chaincode/go/example02/cmd
\>&log.txt命令在组织2的节点1上安装智能合约；
13\) chaincodeQuery 1 2 90：执行peer chaincode query -C \$CHANNEL_NAME
-n mycc -c \'{\"Args\":\[\"query\",\"a\"\]}\'
\>&log.txt命令在组织2的节点1上查询a值，并判断是否为90；
14\) chaincodeQuery 1 3 90：执行peer chaincode query -C \$CHANNEL_NAME
-n mycc -c \'{\"Args\":\[\"query\",\"a\"\]}\'
\>&log.txt命令在组织3的节点1上查询a值，并判断是否为90；
15\) 显示end-e2e：以上代码执行没有出现错误，则显示end-e2e表示成功执行；
![C:\\Users\\Administrator\\Desktop\\544703-20180822214356546-1244106036.jpg](media/image26.jpeg){width="7.098611111111111in"
height="8.952777777777778in"}
# Helloworld案例简介
参考网站： https://www.cnblogs.com/llongst/p/9543574.html
通过执行官方End-2-End案例，初始了解Fabric网络的运行流程及yaml配置，官方End-2-End案例把执行过程集成，通过一条命令即可完成全部操作，对于初学者只能了解Fabric网络搭建是否成功，对于Fabric网络的执行细节还是迷惑。
为了能让初学者全面了解Fabric网络的执行细节，本章通过手动方式搭建一个orderer、一个组织和一个peer的SOLO排序的Fabric网络，把配置独立出来，形成orderer和peer配置等单个yaml文件，通过手动执行orderer和peer搭建Fabric网络。
编写最简单的智能合约，初始化时在区块中存储Hello
world字符串，然后通过智能合约可以查询出Hello
world字符串，初步了解智能合约编写。
## Helloworld链码编写
Helloworld链码实现Init和Invoke两个接口，通过stub.PutState和stub.GetState保存和获取链值对数据。
Init(stub
shim.ChaincodeStubInterface)：用于智能合约初始化及升级初始化,实现初始化时保存链值对；
Invoke(stub
shim.ChaincodeStubInterface)：是节点（peer）调用链码的入口函数，实现对账本进行保存和获取链值对；
  实现两个文件,分别chaincode.go和cmd/ main.go，main.go是主入口函数  
## Helloword具体操作步骤如下：
1、准备helloworld链码备用，拷贝编写好的智能合约文件到helloworld/chaincode/go/helloworld目录下。具体代码参考网站或者样机的代码，文件结构如下，helloword文件自行创建
![](media/image27.png){width="4.156798993875766in"
height="1.0165879265091864in"}
2.  获取"cryptogen"和"configtxgen"工具
> 第一种方法：直接网上下载，链接如下
>
> https://nexus.hyperledger.org/content/repositories/releases/org/hyperledger/fabric/hyperledger-fabric/linux-amd64-1.2.0
> 解压至helloword目录，有bin目录（执行文件）与config目录（配置模板文件）（本次实使用第一种方法）
>
> 第二种方法：编译源码，将\$GOPATH/src/github.com/hyperledger/fabric/release/linux-amd64/bin/
> 目录拷贝至helloword目录内
3.  准备生成证书和区块配置文件
> 配置crypto-config.yaml和configtx.yaml文件，拷贝到helloworld目录下。然后按照参考网站修改
crypto-config.yaml文件：生成公私钥和证书的配置文件
configtx.yaml文件：通道配置文件
4.  生成公私钥和证书
> ./bin/cryptogen generate \--config=./crypto-config.yaml
> #会多了crypto-config目录
>
> ![](media/image28.png){width="5.876673228346457in"
> height="0.6492333770778652in"}
>
> ![](media/image29.png){width="6.497682633420823in"
> height="5.3761964129483815in"}
>
> certs目录中的文件留着备用。
5.  生成创世区块
\# mkdir channel-artifacts #创建通道目录
> \# ./bin/configtxgen -profile OneOrgsOrdererGenesis -outputBlock
> ./channel-artifacts/genesis.block
\# ls channel-artifacts/
> genesis.block #创世区块文件
>
> ![](media/image30.png){width="6.0in" height="3.48125in"}
6.  生成通道（channel）配置区块
> ./bin/configtxgen -profile OneOrgsChannel -outputCreateChannelTx
> ./channel-artifacts/mychannel.tx -channelID mychannel
\# ls channel-artifacts/
> genesis.block mychannel.tx \# 产生mychannel.tx文件，为通道配置区块文件
7.  准备docker配置文件
> 配置docker-orderer.yaml和
> docker-peer.yaml文件，拷贝到helloworld目录下，按照参考网站修改
9.3.9 启动Fabric网络
\# docker-compose -f docker-orderer.yaml up -d #启动orderer
\# docker-compose -f docker-peer.yaml up --d #启动peer
\# docker exec -it cli bash #启动进入，cli容器
# 多节点部署准备：
 整个部署参考网站
架构图：
\- \"orderer.example.com:192.168.10.231\"
\- \"peer0.org1.example.com:192.168.10.232\"
\- \"peer1.org1.example.com:192.168.10.233\"
\- \"peer0.org2.example.com:192.168.10.234\"
\- \"peer1.org2.example.com:192.168.10.235\"
部署orderer.example.com
地址:192.168.10.231
\# cd /opt/gopath/src/github.com/hyperledger/fabric
\# mkdir multipeer
\# cd multipeer
防火墙配置：
\[root@peer0 multipeer\]# firewall-cmd \--get-default-zone
\[root@peer0 multipeer\]# firewall-cmd \--zone=public
\--add-port=7051/tcp \--permanent
\[root@peer0 multipeer\]# firewall-cmd \--zone=public
\--add-port=7052/tcp \--permanent
\[root@peer0 multipeer\]# firewall-cmd \--zone=public
\--add-port=7053/tcp \--permanent
\[root@peer0 multipeer\]# firewall-cmd \--reload
\[root@peer0 multipeer\]# docker exec -it cli bash
Docker文件：
![](media/image31.png){width="6.0in" height="2.629166666666667in"}
## Orderer部署
### 获取生成工具（二进制可执行文件）
在fabric源码目录下，make
release编译，编译成功后将会在release目录内产生linux-adm64/bin目录，二进制可执行文件在此目录中
\[root@orderer fabric\]# make release
![](media/image32.png){width="6.0in" height="0.9138888888888889in"}
\[root@orderer fabric\]# cp -r release/linux-amd64/bin multipeer/
#将bin目录全部拷贝到multipeer路径下
### 准备生成证书和区块配置文件
配置crypto-config.yaml(生成公私钥和证书的文件)和configtx.yaml(生成创世区块和生产通道配置区块的文件)，拷贝到multipeer目录下。
\[root@peer0 multipeer\]# vim crypto-config.yaml
![](media/image33.png){width="7.260416666666667in"
height="6.1930555555555555in"}
生成公私钥和证书：
./bin/cryptogen generate \--config=./crypto-config.yaml
> #multipeer目录下会多了crypto-config目录，具体可参考helloworld配置
### 生成创世区块
\# mkdir channel-artifacts
#创建channel-artifacts目录，创世区块与通道配置区块将在此目录中
\# ./bin/configtxgen -profile TwoOrgsOrdererGenesis -outputBlock
./channel-artifacts/genesis.block
生成创世区块如下图
![](media/image34.png){width="6.0in" height="1.9333333333333333in"}
### 生成通道配置区块
\# ./bin/configtxgen -profile TwoOrgsChannel -outputCreateChannelTx
./channel-artifacts/mychannel.tx -channelID mychannel
生成通道配置区块如下图
![](media/image35.png){width="7.279861111111111in"
height="2.7756944444444445in"}
### 拷贝生成文件到其它电脑
\# cd ..
\# scp -r multipeer
PI:EMAIL:/opt/gopath/src/github.com/hyperledger/fabric
\# scp -r multipeer
PI:EMAIL:/opt/gopath/src/github.com/hyperledger/fabric
\# scp -r multipeer
PI:EMAIL:/opt/gopath/src/github.com/hyperledger/fabric
\# scp -r multipeer
PI:EMAIL:/opt/gopath/src/github.com/hyperledger/fabric
### 准备docker配置文件
配置docker-compose-orderer.yaml文件，拷贝到multipeer目录下。
docker-compose-orderer.yaml文件：定义了启动的docker容器的配置，用哪个镜像文件启动什么样的容器，
### 启动Fabric网络
\[root@orderer fabric\]# docker-compose -f docker-compose-orderer.yaml
up --d \#
\[root@orderer fabric\]# docker ps
![](media/image36.png){width="6.0in" height="0.36944444444444446in"}
## Peer0.org1.example.com部署
192.168.10.232
### 准备docker配置文件
配置docker-compose-peer.yaml文件，拷贝到multipeer目录下。
docker-compose-peer.yaml：
### 部署智能合约
智能合约放在：multipeer/chaincode/go/example02目录下，本案例是用源码的：examples/chaincode/go/example02
将源码的：examples/chaincode/go/example02
拷贝到multipeer/chaincode/go/example02目录下
### 启动fabric网络
\# cd \$GOPATH/src/github.com/hyperledger/fabric/multipeer
\# docker-compose -f docker-compose-peer.yaml up --d #1启动peer
\# docker exec -it cli bash #2启动进入cli容器
#### 创建channel（mychannel.block）
#ORDERER_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
\# peer channel create -o orderer.example.com:7050 -c mychannel -f
./channel-artifacts/mychannel.tx \--tls \--cafile \$ORDERER_CA #3
创建Channel：容器中产生mychannel.block
#### Peer加入Channel
\# peer channel join -b mychannel.block
#### 退出容器保存mychannel.block到本机 
\# exit #退出容器
\# docker cp
xxxxxxxx:/opt/gopath/src/github.com/hyperledger/fabric/peer/mychannel.block
/opt/gopath/src/github.com/hyperledger/fabric/multipeer
#命令的xxxxxxxx为cli容器的ID
### mychannel.block拷贝到其他主机：
\# scp mychannel.block
PI:EMAIL:/opt/gopath/src/github.com/hyperledger/fabric/multipeer
\# scp mychannel.block
PI:EMAIL:/opt/gopath/src/github.com/hyperledger/fabric/multipeer
\# scp mychannel.block
PI:EMAIL:/opt/gopath/src/github.com/hyperledger/fabric/multipeer
### 安装与运行智能合约
智能合约在"部署智能合约"那一步骤已经将合约放在./multipeer/chaincode/go/example02/
\# docker exec -it cli bash
\# peer chaincode install -n mycc -p
github.com/hyperledger/fabric/multipeer/chaincode/go/example02/ -v 1.0
### 实例化合约失败
### 问题汇总：
问题1
无法连接
![C:\\Users\\ADMINI\~1\\AppData\\Local\\Temp\\WeChat
Files\\1e97222a690a1726203aab22b428e53.png](media/image37.png){width="7.268055555555556in"
height="1.6604166666666667in"}
Fabric1.4用的是1.2的二进制文件，，，解决办法：使用直接编译源码获得的bin目录里面的二进制执行文件
make release
问题2
（已解决，，原因：docker镜像是1.4.1，fabric源码包是1.4.0，将fabric源码包换成1.4.1即可解决）
创建channl时
#peer channel create -o orderer.example.com:7050 -c mychannel -f
./channel-artifacts/mychannel.tx \--tls \--cafile \$ORDERER_CA
![](media/image38.png){width="6.0in" height="2.013888888888889in"}