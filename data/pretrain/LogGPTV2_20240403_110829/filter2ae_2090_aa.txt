[toc]
## 前言
前言？没有前言了……
## CGI
早期的Web服务器，只能响应浏览器发来的HTTP静态资源的请求，并将存储在服务器中的静态资源返回给浏览器。随着Web技术的发展，逐渐出现了动态技术，但是Web服务器并不能够直接运行动态脚本，为了解决Web服务器与外部应用程序（CGI程序）之间数据互通，于是出现了CGI（Common
Gateway Interface）通用网关接口。 **简单理解，可以认为CGI是Web服务器和运行在其上的应用程序进行“交流”的一种约定。**
当遇到动态脚本请求时，Web服务器主进程就会Fork创建出一个新的进程来启动CGI程序，运行外部C程序或Perl、PHP脚本等，也就是将动态脚本交给CGI程序来处理。启动CGI程序需要一个过程，如读取配置文件、加载扩展等。当CGI程序启动后会去解析动态脚本，然后将结果返回给Web服务器，最后由Web服务器将结果返回给客户端，之前Fork出来的进程也随之关闭。这样，每次用户请求动态脚本，Web服务器都要重新Fork创建一个新进程去启动CGI程序，由CGI程序来处理动态脚本，处理完成后进程随之关闭，其效率是非常低下的。
而对于Mod CGI，Web服务器可以内置Perl解释器或PHP解释器。 也就是说将这些解释器做成模块的方式，Web服务器会在启动的时候就启动这些解释器。
当有新的动态请求进来时，Web服务器就是自己解析这些动态脚本，省得重新Fork一个进程，效率提高了。
## FastCGI
有了CGI，自然就解决了Web服务器与PHP解释器的通信问题，但是Web服务器有一个问题，就是它每收到一个请求，都会去Fork一个CGI进程，请求结束再kill掉这个进程，这样会很浪费资源。于是，便出现了CGI的改良版本——Fast-CGI。
维基百科对 FastCGI 的解释是：快速通用网关接口（Fast Common Gateway
Interface／FastCGI）是一种让交互程序与Web服务器通信的协议。FastCGI是早期通用网关接口（CGI）的增强版本。FastCGI致力于减少网页服务器与CGI程序之间交互的开销，Fast-CGI每次处理完请求后，不会kill掉这个进程，而是保留这个进程，从而使服务器可以同时处理更多的网页请求。这样就会大大的提高效率。
## 浏览器处理静态/动态网页过程
众所周知，在网站分类中存在一种分类就是静态网站和动态网站，两者的区别就是静态网站只需要通过浏览器进行解析，其中的页面是一对一的（一个内容对应一个页面），而动态网站需要一个额外的编译解析的过程，网页上的数据是从数据库中或者其他地方调用，页面会随着数据的变化而改变，就产生了一定的交互性。
### 浏览器访问静态网页过程
在整个网页的访问过程中，Web容器（例如Apache、Nginx）只担任着 **内容分发**
者的身份，当访问静态网站的主页时，Web容器会到网站的相应目录中查找主页文件，然后发送给用户的浏览器。
### 浏览器访问动态网页过程
当访问动态网站的主页时，根据容器的配置文件，它知道这个页面不是静态页面，Web容器就会去找PHP解析器来进行处理（这里以Apache为例），它会把这个请求进行简单的处理，然后交给PHP解释器。
当Apache收到用户对 index.php 的请求后，如果使用的是CGI，会启动对应的 CGI
程序，对应在这里就是PHP的解析器。接下来PHP解析器会解析php.ini文件，初始化执行环境，然后处理请求，再以CGI规定的格式返回处理后的结果，退出进程，Web
Server 再把结果返回给浏览器。这就是一个完整的动态PHP Web访问流程。
这里说的是使用CGI，而FastCGI就相当于高性能的CGI，与CGI不同的是它像一个常驻的CGI，在启动后会一直运行着，不需要每次处理数据时都启动一次，
所以这里引出下面这句概念，FastCGI是语言无关的、可伸缩架构的CGI开放扩展， **其主要行为是将CGI解释器进程保持在内存中**
，并因此获得较高的性能 。
## Fastcgi 协议分析
### Fastcgi Record
Fastcgi 其实是一个通信协议，和HTTP协议一样，都是进行数据交换的一个通道。
HTTP协议是 **浏览器和服务器中间件**
进行数据交换的协议，浏览器将HTTP头和HTTP体用某个规则组装成数据包，以TCP的方式发送到服务器中间件，服务器中间件按照规则将数据包解码，并按要求拿到用户需要的数据，再以HTTP协议的规则打包返回给服务器。
类比 HTTP 协议来说，Fastcgi 协议则是 **服务器中间件和某个语言后端** 进行数据交换的协议。Fastcgi 协议由多个 Record
组成，Record 也有 Header 和 Body 一说，服务器中间件将这二者按照 Fastcgi
的规则封装好发送给语言后端，语言后端解码以后拿到具体数据，进行指定操作，并将结果再按照 Fastcgi 协议封装好后返回给服务器中间件。
和 HTTP 头不同，Fastcgi Record 的头固定8个字节，Body 是由头中的 `contentLength` 指定，其结构如下：
    typedef struct {
      /* Header 消息头信息 */
      unsigned char version; // 用于表示 FastCGI 协议版本号
      unsigned char type; // 用于标识 FastCGI 消息的类型, 即用于指定处理这个消息的方法
      unsigned char requestIdB1; // 用ID值标识出当前所属的 FastCGI 请求
      unsigned char requestIdB0;
      unsigned char contentLengthB1; // 数据包包体Body所占字节数
      unsigned char contentLengthB0;
      unsigned char paddingLength; // 额外块大小
      unsigned char reserved; 
      /* Body 消息主体 */
      unsigned char contentData[contentLength];
      unsigned char paddingData[paddingLength];
    } FCGI_Record;
头由8个 uchar 类型的变量组成，每个变量一个字节。其中，`requestId`
占两个字节，一个唯一的标志id，以避免多个请求之间的影响；`contentLength` 占两个字节，表示 Body 的大小。可见，一个 Fastcgi
Record 结构最大支持的 Body 大小是`2^16`，也就是 65536 字节。
后端语言解析了 Fastcgi 头以后，拿到 `contentLength`，然后再在请求的 TCP 流里读取大小等于 `contentLength`
的数据，这就是 Body 体。
Body 后面还有一段额外的数据（Padding），其长度由头中的 `paddingLength`
指定，起保留作用。不需要该Padding的时候，将其长度设置为0即可。
### Fastcgi Type
刚才我们介绍了 Fastcgi 协议中Record部分中各个结构的含义，其中第二个字节为 `type`，我们将对其进行详细讲解。
`type` 就是指定该 Record 的作用。因为 Fastcgi 中一个 Record
的大小是有限的，作用也是单一的，所以我们需要在一个TCP流里传输多个 Record，通过 `type` 来标志每个 Record 的作用，并用
`requestId` 来标识同一次请求的id。也就是说，每次请求，会有多个 Record，他们的 `requestId` 是相同的。
下面给出一个表格，列出最主要的几种 `type`：
type值 | 具体含义  
---|---  
1 | 在与php-fpm建立连接之后发送的第一个消息中的type值就得为1，用来表明此消息为请求开始的第一个消息  
2 | 异常断开与php-fpm的交互  
3 | 在与php-fpm交互中所发的最后一个消息中type值为此，以表明交互的正常结束  
4 | 在交互过程中给php-fpm传递环境变量时，将type设为此，以表明消息中包含的数据为某个name-value对  
5 | Web服务器将从浏览器接收到的POST请求数据（表单提交等）以消息的形式发给php-fpm，这种消息的type就得设为5  
6 | php-fpm给Web服务器回的正常响应消息的type就设为6  
7 | php-fpm给Web服务器回的错误响应设为7  
看了这个表格就很清楚了，服务器中间件和后端语言通信，第一个数据包就是 `type` 为1的 Record，后续互相交流，发送 `type`
为4、5、6、7的 Record，结束时发送 `type` 为2、3的 Record。
当后端语言接收到一个 `type` 为4的 Record 后，就会把这个 Record 的 Body 按照对应的结构解析成 key-value
对，这就是环境变量。环境变量的结构如下：
    typedef struct {
      unsigned char nameLengthB0;  /* nameLengthB0  >> 7 == 0 */
      unsigned char valueLengthB0; /* valueLengthB0 >> 7 == 0 */
      unsigned char nameData[nameLength];
      unsigned char valueData[valueLength];
    } FCGI_NameValuePair11;
    typedef struct {
      unsigned char nameLengthB0;  /* nameLengthB0  >> 7 == 0 */
      unsigned char valueLengthB3; /* valueLengthB3 >> 7 == 1 */
      unsigned char valueLengthB2;
      unsigned char valueLengthB1;
      unsigned char valueLengthB0;
      unsigned char nameData[nameLength];
      unsigned char valueData[valueLength
              ((B3 & 0x7f) > 7 == 1 */
      unsigned char nameLengthB2;
      unsigned char nameLengthB1;
      unsigned char nameLengthB0;
      unsigned char valueLengthB0; /* valueLengthB0 >> 7 == 0 */
      unsigned char nameData[nameLength
              ((B3 & 0x7f) > 7 == 1 */
      unsigned char nameLengthB2;
      unsigned char nameLengthB1;
      unsigned char nameLengthB0;
      unsigned char valueLengthB3; /* valueLengthB3 >> 7 == 1 */
      unsigned char valueLengthB2;
      unsigned char valueLengthB1;
      unsigned char valueLengthB0;
      unsigned char nameData[nameLength
              ((B3 & 0x7f) << 24) + (B2 << 16) + (B1 << 8) + B0];
      unsigned char valueData[valueLength
              ((B3 & 0x7f) << 24) + (B2 << 16) + (B1 << 8) + B0];
    } FCGI_NameValuePair44;
这其实是 4 个结构，至于用哪个结构，有如下规则：
  1. key、value均小于128字节，用 `FCGI_NameValuePair11`
  2. key大于128字节，value小于128字节，用 `FCGI_NameValuePair41`
  3. key小于128字节，value大于128字节，用 `FCGI_NameValuePair14`
  4. key、value均大于128字节，用 `FCGI_NameValuePair44`
为什么我只介绍 `type` 为4的 Record？因为环境变量在后面 PHP-FPM 里有重要作用，之后写代码也会写到这个结构。`type`
的其他情况，大家可以自己翻文档理解理解。
## PHP-FPM
在前面我们也看到了PHP-FPM这个东西，那这个PHP-FPM到底是什么呢？
官方对PHP-FPM的解释是 FastCGI 进程管理器，用于替换 PHP FastCGI 的大部分附加功能，对于高负载网站是非常有用的。PHP-FPM
默认监听的端口是 9000 端口。
也就是说 **PHP-FPM 是 FastCGI 的一个具体实现** ，并且提供了进程管理的功能，在其中的进程中，包含了 master 和 worker
进程，这个在后面我们进行环境搭建的时候可以通过命令查看。其中 **master 进程负责与 Web 服务器中间件进行通信** ，接收服务器中间按照
FastCGI 的规则打包好的用户请求，再将请求转发给 worker 进程进行处理。 **worker 进程主要负责后端动态执行 PHP 代码，**
处理完成后，将处理结果返回给 Web 服务器，再由 Web 服务器将结果发送给客户端。
举个例子，当用户访问 `http://127.0.0.1/index.php?a=1&b=2` 时，如果 Web 目录是 /var/www/html，那么
Web 服务器中间件（如 Nginx）会将这个请求变成如下 key-value 对：
    {
        'GATEWAY_INTERFACE': 'FastCGI/1.0',
        'REQUEST_METHOD': 'GET',
        'SCRIPT_FILENAME': '/var/www/html/index.php',
        'SCRIPT_NAME': '/index.php',
        'QUERY_STRING': '?a=1&b=2',
        'REQUEST_URI': '/index.php?a=1&b=2',
        'DOCUMENT_ROOT': '/var/www/html',
        'SERVER_SOFTWARE': 'php/fcgiclient',
        'REMOTE_ADDR': '127.0.0.1',
        'REMOTE_PORT': '12345',
        'SERVER_ADDR': '127.0.0.1',
        'SERVER_PORT': '80',
        'SERVER_NAME': "localhost",
        'SERVER_PROTOCOL': 'HTTP/1.1'
    }
这个数组其实就是 PHP 中 `$_SERVER` 数组的一部分，也就是 PHP 里的环境变量。但环境变量的作用不仅是填充 `$_SERVER`
数组，也是告诉 fpm：“我要执行哪个 PHP 文件”。
PHP-FPM 拿到 Fastcgi 的数据包后，进行解析，得到上述这些环境变量。然后，执行 `SCRIPT_FILENAME`
的值指向的PHP文件，也就是 `/var/www/html/index.php`。但如果我们能够控制 `SCRIPT_FILENAME` 的值，不就可以让
PHP-FPM 执行服务器上任意的 PHP 文件了吗。写到这里，PHP-FPM 未授权访问漏洞差不多也就呼之欲出了。
## PHP-FPM 任意代码执行
前文我们讲到， Web 服务器中间件会将用户请求设置成环境变量，并且会出现一个 `'SCRIPT_FILENAME':
'/var/www/html/index.php'` 这样的键值对，它的意思是 PHP-FPM
会执行这个文件，但是这样即使能够控制这个键值对的值，但也只能控制 PHP-FPM 去执行某个已经存在的文件，不能够实现一些恶意代码的执行。并且在 PHP
5.3.9 后来的版本中，PHP 增加了 `security.limit_extensions` 安全选项，导致只能控制 PHP-FPM 执行一些像
php、php3、php4、php5、php7 这样的文件，因此你必须找到一个已经存在的 PHP 文件，这也增大了攻击的难度。
但是好在强大的 PHP 中有两个有趣的配置项：
  * `auto_prepend_file`：告诉PHP，在执行目标文件之前，先包含 `auto_prepend_file` 中指定的文件。
  * `auto_append_file`：告诉PHP，在执行完成目标文件后，再包含 `auto_append_file` 指向的文件。
那么就有趣了，假设我们设置 `auto_prepend_file` 为 `php://input`，那么就等于在执行任何 PHP 文件前都要包含一遍
POST 的内容。所以，我们只需要把需要执行的代码放在 Body 中，他们就能被执行了。（当然，这还需要开启远程文件包含选项
`allow_url_include`）
那么，我们怎么设置 `auto_prepend_file` 的值？
这就又涉及到 PHP-FPM 的两个环境变量，`PHP_VALUE` 和 `PHP_ADMIN_VALUE`。这两个环境变量就是用来设置 PHP
配置项的，`PHP_VALUE` 可以设置模式为 `PHP_INI_USER` 和 `PHP_INI_ALL` 的选项，`PHP_ADMIN_VALUE`
可以设置所有选项。
所以，我们最后传入的就是如下的环境变量：
    {
        'GATEWAY_INTERFACE': 'FastCGI/1.0',
        'REQUEST_METHOD': 'GET',
        'SCRIPT_FILENAME': '/var/www/html/index.php',
        'SCRIPT_NAME': '/index.php',
        'QUERY_STRING': '?a=1&b=2',
        'REQUEST_URI': '/index.php?a=1&b=2',
        'DOCUMENT_ROOT': '/var/www/html',
        'SERVER_SOFTWARE': 'php/fcgiclient',
        'REMOTE_ADDR': '127.0.0.1',
        'REMOTE_PORT': '12345',
        'SERVER_ADDR': '127.0.0.1',