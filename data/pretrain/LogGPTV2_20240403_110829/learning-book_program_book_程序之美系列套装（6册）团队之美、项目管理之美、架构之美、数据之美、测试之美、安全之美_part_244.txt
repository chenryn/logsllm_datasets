查询可以通过只访问一台服务器来获得响应。和数据库副本相似，
若同步更新每个视图，在执行写操作时非常缓慢，因此我们的策略
是采取异步方式更新这些视图。
本章的剩余部分会深入地剖析重点研究向外扩展和地理空间上的数
据复制这两大首要特征的涵义。我们将通过一个例子来南明主要问
题、说明基本方法、讨论一些问题及扩展；然后，将PNUTS和其他
方法作比较。本章的讨论重点是设计理念，而不是系统架构或实现
细节，并且为了在全局方案中突出某些选择，本章涵盖了一些当前
系统版本不包含的特性。
国]区域设施，或者称数据中心。雅虎在全世界运营着大量的数据
中心。
更新数据
用户和Web站点的交互操作会导致数据库的不断更新。因此，我们
要解决的首要挑战是为每个更新提供良好的性能和操作一致性的前
提下，如何支持大量的更新操作。
面临挑战
假设我们要构建一个社交网络站点，系统中的每个用户都有一条用
户信息记录，该记录包含用户名、爱好等。用户Alice可能在全世界
都有朋友，她的朋友想看她的个人信息，这些读取请求操作有严格
的低延迟要求。为此，系统必须保证Alice的用户信息记录（其他人
1384
---
## Page 1386
的也类似）在全球都有副本，这样她的朋友们就可以访问该记录的
本地副本。现在，社交网络的一个特征是用户可以通过自由的文本
定制来更新自已的状态。比如，Alice可能想修改她的状态为"忙
碌，电话中"(Bsyonthephone)，过后又修改为"有空，要聊天吗？”
（Ofthephone，anybodywannachat?）。当Alice更改她的状态时，系统
需要把这些更改操作写入数据库中她的用户信息记录，这样她的朋
友们才可以看到。用户信息记录表见表4-1。注意，为了支持Web应
用的不断升级，必须提供一个灵活的数据库模式和松散耦合的数据
组织方式，而不是每条记录的每个字段都有相应值，并且增加新的
字段代价必须小。
表4-1：用户信息表
Username
FullIName
Location
Status
IM
BlogID Photo
Alice
Alice Smith
Sunnyvale,CA
Off the phone,
Alice345
poqfue
wanna chat?
Bob
Bob Jones
Singapore
Eating dinner
3411
mejpg
Charles
Charles Adams
New York
Sleeping
5539
New York
+
我们该如何更新Alice的用户信息记录？从标准数据库角度看，为了
实现该更新操作的原子性，我们需要执行以下步骤：打开一个事
务：对所有的副本执行写操作：向所有的副本发送提交信息并关闭
该事务。这种方法和标准数据库的ACID=I-模式一致，保证所有的
副本都能够正确地更新到新状态。即使是非ACID模式的数据库，如
G公司的BigTable（Chang等2006），采用了类似的方法来同步更新数
据的所有副本。但是，当存在地理空间上的数据复制时，该方法效
率很低。当Alice输入她的状态信息并点击"OK”，由于需要等待分
散在各地的数据中心提交该事务，她可能需要等待很长时间才能加
载响应页面。此外，为了保证原子性，在事务处理过程中，系统需
要对Alice的状态加排他锁，这意味着其他用户可能长时间无法看到
Alice的状态。
由于当地理空间上存在不同副本时，原子事务的代价很高，很多
Web数据库采用了“尽最大努力"的方式(bst-effortapproach)：先将更
新写到一份数据中，然后异步地将更新操作传播(popagate)到其他的
副本。模拟事务操作时，不执行加锁及验证。这种方法，犹如其名
1385
---
## Page 1387
“尽最大努力”，存在很多困难。即使系统能够保证在所有的副
本上执行更新，也不能保证数据库的不同副本最终都保持一致性。
比如，Alice首先将她的状态更新为"Busy”，这样在美国西海岸（wst
coast)的数据中心需要执行写操作，如表4-2所示。
表4-2：在美国西海岸的数据副本上执行的更新操作
美国西海岸
美国东海岸
用户名
状态
用户名
状态
Alice
Ksng
Alice
然后，Alice把她的状态更新为"Ofthephone”，但由于网络干扰，
该更新操作误在美国东海岸(estcoast)的数据副本上执行，如表4-3
所示。
表4-3：在东海岸数据副本上执行的第二次更新操作
美国西海岸
美国东海岸
用户名
状态
用户名
状态
Alice
Busy
Alice
Off the phone
由于更新传播是异步的，一个可能的事件序列如下：在美国东海岸
的数据副本上首先执行"Offthephone"更新操作，然后执行"Busy"更
新操作。于是，通过有线传播，更新操作如表4-4所示。
表4-4：传播中的两个更新交叉
美国西海岸
美国东海岸
用户名
状态
用户名
状态
Alice
Asng
Alice
Off the phone
"off the ph
在美国东海岸，“Busy"的状态覆盖了“Ofthephone"状态；而在美国
西海岸，“Offthephone"状态覆盖了“Busy"状态，这导致如表4-5所
示的状态不一致性。
1386
---
## Page 1388
表4-5：不一致的数据副本
美国西海岸
美国东海岸
用户名
状态
用户名
状态
Alice
Off the phone
Alice
Ksng
根据读取数据副本的不同，Alice的好友看到的Alice的状态也是不
同的，而且该不一致性会一直存在，直到Alice再次改变她的状态。
为了解决上述问题，一些Web规模（wb-scale）的数据存储实现了最终
一致性策(eentualconsistency)，如上述的不正常现象可能暂时发生，
数据库最终将会解决该不一致性，并保证所有的数据副本都有相同
值。该策略是某些系统的核心，如Amazon的Web服务S3。最终一致
性策略通常使用如闲话(gssip)和反熵(ati-entropy)的技术来实现。但
是，即使数据库最终会收敛到某个值，也很难预测它最终的收敛结
果。因为没有全局时钟来序列化所有的更新操作，数据库难以识别
Alice的最终状态更新是“Busy"还是“Ofthephone”，因此最后有可能
会收敛为"Busy"状态。这样，正当Alice准备和好友聊天，她的所有
好友都认为她是忙碌的，且在Alice再次更新她的状态前，这种不正
常现象会一直存在。
我们的方法
）
（如尽最大努力策略或最终一致性策略）可能存在不正常现象，我
们提出介于二者之间的一种策略，即时间轴一致（tmeline
consistency)策略：所有的数据副本将通过相同的时间轴执行更新操
作，而且该更新和数据库上执行的更新顺序相同。该时间轴如图4-1
所示。因此，数据库将在所有的数据副本上收敛为相同的结果值，
且该值是该应用在数据库上执行的最近一次更新操作之后的值。
状态：none
状态：busy
状态：offthephone
-o
O
→记录时间轴
图4-1：Alice状态的更新操作时间轴
时间轴一致性是这样实现的：由一台主备份服务器(mstercopy，以
下简称主备份）执行所有的更新操作，然后将变化异步传播到其他
1387
---
## Page 1389
备份服务器来实现的。该主备份序列化所有的更新操作，并确保为
每个更新指定一个序列号。即使在更新的异步传播中存在瞬间的故
障或误序，该序列号的次序是和需要在所有副本上执行的更新次序
一致的。我们选择每条记录一个主备份是因为雅虎的很多应用依赖
于同一张数据表，该表中不同的记录对应不同的用户，每个用户都
有不同的使用模式(uagepatterns)。当然，有可能为主备份性
(mstership)选择其他的粒度，比如每个记录分区（如基于关键字）
有一个主备份。
即使是在同一张表，不同记录的主备份也可能分布在不同的服务器
上。在以上例子中，Alice住在美国西海岸，并在美国西海岸的数据
副本有一条主备份记录：而她的好友Bob住在新加坡，其主备份记
录是在亚洲地区的副本。记录的主备份性是作为记录的元数据域
(mtadatafield)存储在该记录本身，如表4-6所示。
表4-6：包含主备份性和版本元数据的信息表
Username
_MASTER
_VERSION
FulIName
Alice