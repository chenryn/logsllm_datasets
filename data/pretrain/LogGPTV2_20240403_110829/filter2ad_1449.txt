# Secure and Efficient Software-based Attestation for Industrial Control Devices with ARM Processors

## Authors
- Binbin Chen\*
- Xinshu Dong\*
- Guangdong Bai#
- Sumeet Jauhar\*
- Yueqiang Cheng^

\* Advanced Digital Sciences Center, Illinois at Singapore  
# Singapore Institute of Technology  
^ Baidu USA XLab  

### Conference
ACSAC 2017, December 7, 2017, Orlando, FL, USA

---

## Abstract

This paper presents a secure and efficient software-based attestation mechanism for industrial control devices (ICS) equipped with ARM processors. The proposed solution addresses the challenges of ensuring software integrity in ICS environments, where traditional hardware-based root-of-trust solutions are often impractical. We introduce a memory stride design that significantly reduces the computational overhead, making it suitable for low-end ARM devices. Our analysis, based on an adapted version of the ASSW framework, demonstrates the effectiveness and practicality of the proposed approach.

---

## 1. Introduction

### 1.1 Attacks on Industrial Control Systems

#### 2015 Ukraine Power Grid Attack
- **SCADA and Field Device Abuse**: Attackers manipulated SCADA systems and field devices to open circuit breakers.
- **Persistence**: The attackers remained undetected within the environment for over six months.
- **Firmware Impact**: Serial-to-Ethernet communication devices were compromised at the firmware level.
- **Lack of Defense**: There were no active defense measures in place to detect or mitigate the attack.

#### 2016 Ukraine Power Grid Attack
- **Automated Malware Framework**: The attack was automated using a sophisticated malware framework, highlighting the need for robust security measures.

### 1.2 Software Attestation for ICS Devices

- **Importance**: Ensuring the software integrity of ICS devices is crucial for enhancing overall system security.
- **Example**: Remote Terminal Units (RTUs) in power grid operations require high assurance about their software integrity.
- **Comparison**: Traditional solutions like anti-virus or host-based intrusion detection systems offer only best-effort malware detection, whereas attestation provides a higher level of assurance.

### 1.3 SoftWare-Only Root of Trust (SWORT)

- **Challenges**: Deploying hardware-based root-of-trust solutions (e.g., TPM) in existing ICS can be difficult.
- **Solution**: A software-only root of trust (SWORT) is more feasible and desirable for ICS devices.

### 1.4 Efficient SWORT for ICS

- **Performance Requirements**: SWORT must run efficiently to meet the strict timing requirements of ICS devices (e.g., 20ms cycle response time for a 50-Hz grid).
- **Proxy Attack Mitigation**: Short attestation times help prevent proxy attacks, where a device under attestation offloads computations to a more powerful remote device.

### 1.5 Full Memory Walk Limitations

- **Time Consumption**: A full memory walk can be prohibitively slow, especially for larger RAM sizes. For example, a random walk over 58KB of RAM with a 10^-10 win probability takes 156.9ms.
- **Scalability**: As RAM size increases, the memory walk time can extend to minutes, making it impractical.

---

## 2. System and Threat Model

- **Target Devices**: Low-end ARM processors, such as ARM7 or ARM Cortex-M3.
- **Trusted Verifier**: A trusted verifier located in the same local area network (LAN) as the prover.
- **Communication Delay**: The delay between the verifier and the prover is short and stable.
- **Physical Access Control**: We assume the physical access to the ICS environment is controlled, with no proxy devices inside the LAN and no changes to the prover's hardware specifications.
- **Malware Introduction**: Malware can still be introduced by innocent insiders during maintenance.
- **Attack Scope**: We do not address malware that launches direct attacks (e.g., DoS attacks).

---

## 3. Memory Stride Design

### 3.1 Basic Idea

- **Two Types of Memory Accesses**:
  - **Memory Walk Over SWORT Code**: This covers the code region of size \( L \).
  - **Memory Stride Over Stride Addresses**: Neighboring stride addresses are separated by \( L \). For a RAM size of \( s \), there are \( \frac{s}{L} \) stride addresses.
- **Interleaving Access**: These two types of memory addresses are accessed in an interleaved manner.
- **Unique Values**: Unique values are generated for stride addresses (except for the first one, \( x_0 \)).

### 3.2 How It Works

- **Overlap Detection**: No matter how the attacker manipulates the code region or stride addresses, there will always be at least one overlapping word between these two address spaces.
- **Collision Detection**: The collided address should return different values for the two different types of accesses, allowing the detection of tampering.

---

## 4. Analysis and Evaluation

### 4.1 Adapted ASSW Framework

- **Framework Simplification**: We follow the ASSW analysis framework and simplify their upper bound results based on typical parameter values.
- **Issue with ASSW Assumptions**:
  - **Pessimistic Assumptions**: The original ASSW framework assumes a 100% chance of success for the attacker if they access a collision address and spend additional time.
  - **Our Analysis**: We show that a simple attack strategy can achieve a win probability greater than \( \frac{1 + \frac{1}{\text{ops}}}{e} \) when the similarity between malicious and genuine images is high.
  - **Conclusion**: We propose dropping the pessimistic assumption about collision addresses, as no known attack can "remember" previously accessed addresses.

### 4.2 Proposed Change to ASSW Framework

- **Simplified Upper Bound**: With the proposed change, the upper bound simplifies to a more realistic and practical value.
- **Performance Improvement**: Our approach achieves up to 10x faster attestation compared to a full RAM walk in several settings.

### 4.3 Emulation Code

- **Availability**: The emulation code for the prover and verifier is available at: [http://www.illinois.adsc.com.sg/attestation/Attestation-ADSC-Release-2017.zip](http://www.illinois.adsc.com.sg/attestation/Attestation-ADSC-Release-2017.zip)

### 4.4 Impact of Network Delay

- **Evaluation Setup**: We evaluated the impact of network delay using two models of industrial Ethernet switches: Belden Spider II 8TX and Moxa EDS-205.
- **Delay Considerations**:
  - **Checksum Computation**: If the checksum computation takes 12.5 ms, a malicious prover incurs an overhead of 1.6%, resulting in an additional 0.2 ms.
  - **Network Delay**: Even a single hop network delay is greater than 0.2 ms, necessitating explicit accommodation for network delay.
- **False Positive Rate**: With a delay budget of 0.2 ms, the false positive rate can be kept low, as the probability of a delay exceeding this threshold is less than 0.1%.

---

## 5. Conclusion

- **Contributions**: We present a new memory stride design that significantly reduces the SWORT time requirement on ARM-based devices.
- **Analysis**: Our analysis, based on an adapted version of the ASSW framework, shows the practicality and effectiveness of the proposed approach.
- **Future Work**: This work paves the way for real-world system integration and further improvements in ICS security.

---

**Contact**: PI: EMAIL

---