title:Secure and Efficient Software-based Attestation for Industrial Control
Devices with ARM Processors
author:Binbin Chen and
Xinshu Dong and
Guangdong Bai and
Sumeet Jauhar and
Yueqiang Cheng
Secure and Efficient Software-based Attestation for 
Industrial Control Devices with ARM Processors  
Binbin Chen*, Xinshu Dong*, Guangdong Bai#, 
Sumeet Jauhar*, Yueqiang Cheng^ 
* Advanced Digital Sciences Center, Illinois at Singapore  
# Singapore Institute of Technology 
^ Baidu USA XLab 
ACSAC 2017, December 7, 2017, Orlando FL, USA 
1 
Attacks on Industrial Control Systems 
2015 Ukraine Power Grid Attack: 
• Attacker abuses the SCADA and field 
•
•
devices to open circuit breakers 
The attackers persist within the 
environment for six months or more  
Serial-to-Ethernet communications 
devices impacted at a firmware level 
Lack of active defense measures 
•
2016 Ukraine Power Grid Attack: 
• Automated with a malware framework 
2 
Software Attestation for ICS Devices 
• Ensuring the software integrity of ICS devices is a foundational 
requirement for enhancing ICS security 
An example RTU device 
             Power Grid Operations 
Systems and Communications 
[source: CRASHOVERRIDE -- Analysis of 
the Threat to Electric Grid, DRAGOS Inc.]  3 
Software Attestation for ICS Devices 
• ICS devices execute well-specified program logic. This 
allows an attestation-based approach to provide high 
assurance about the software integrity of the 
attested device 
• In comparison, solutions like anti-virus or host-based 
intrusion detection systems only provide best-effort 
malware detection 
4 
SoftWare-Only Root of Trust (SWORT) 
• Attestation requires some form of root of trust 
– It is often difficult to deploy a hardware-based 
root-of-trust solution (e.g., TPM) to existing ICS 
– A software-only solution hence is desirable 
5 
Efficient SWORT for ICS 
• SWORT consumes all computational resources of 
the prover, hence it needs to run fast for ICS 
– E.g., the cycle response time is 20ms for a 50-Hz grid 
• Short attestation time also helps raise the bar for 
launching proxy attacks, where the device under 
attestation asks a computationally more powerful 
remote device to compute the checksum 
– E.g., if  SWORT completes within 20ms, a proxy attack 
behind a slow link (e.g., cellular) would fail 
6 
Full Memory Walk May Take Too Long 
• For example, consider an NXP LPC2362 board with 
an ARM7 72MHz CPU and a 58KB RAM, and a 
probability of Pr 𝑤𝑖𝑛 = 10−10 for a prover with 
modified memory to cheat the verifier and win the 
attestation, a random walk over the whole RAM 
takes 156.9ms.  
𝑁 = 𝑠 × ln⁡
1
Pr⁡[𝑤𝑖𝑛]
• If RAM size grows to a few hundred MB, the memory 
walk can take minutes to complete 
7 
Outline 
• Background 
• Memory Stride Design 
• Analysis and Evaluation 
8 
System & Threat Model 
• We focus on ICS devices with low-end ARM processors, 
e.g., ARM7 or ARM Cortex-M3 
• We assume there is a trusted verifier that locates in the 
same local area network (LAN) as the proofer 
– The communication delay between the verifier and the prover is 
short and stable 
• We trust the physical access control to the ICS environment 
– No proxy devices inside the LAN, no change to prover’s 
hardware spec 
– Malware can still by introduced, though, e.g., by innocent 
insider during maintenance  
• We do not address malware that launches attacks outright 
(e.g., DoS attacks)  
9 
Attacks to Partial Memory Walk 
Illustration of Memory Copy Attacks 
• Prior secure partial memory walk solutions 
– Pioneer for Intel platform 
– SCUBA & ICE scheme for a MIPS platform 
– Challenges on ARM platform have been discussed, but no concrete 
solution has been proposed 
10 
Attacker’s Potential Leverage on ARM 
Illustration of Memory Copy Attacks 
•
•
“Free” Offset/Shift with LDR 
– E.g.,  LDR r0, r1, #0x1000    takes the same time as   
          LDR r0, r1 
  where 0x1000 is the offset of a clean copy to launch attack in (b) 
“Free” ARM-Friendly Immediate Value 
– E.g., one can hard code the PC value to launch attack in (c) 
11 
Memory stride 
• Basic idea I : Two types of memory accesses 
– Memory walk over SWORT code (size 𝐿) 
– Memory stride over stride addresses (neighboring stride 
addresses are separated by 𝐿. Hence for a RAM size of 𝑠, there 
are 
 stride addresses (see 𝒙𝟎, 𝒙𝟏, 𝒙𝟐, 𝒙𝟑 ⋯) 
𝑠
𝐿
– The total number of addresses to cover reduces from 𝑠 to 𝐿 +
𝑠
𝐿
𝒙𝟎 
𝒙𝟏 
𝒙𝟐 
𝒙𝟑 
12 
Memory stride 
• Basic idea II : Access these two types of memory 
addresses in an interleaving way 
• Basic idea III: Generate unique values for stride addresses 
(except for 𝒙𝟎) 
13 
How it works 
• No matter how the attacker moves the code region or the 
stride addresses, there will always be at least one 
overlapping word between these two address spaces. 
• This collided address supposes to return different values 
for the two different types of accesses. 
14 
Outline 
• Background 
• Memory Stride Design 
• Analysis and Evaluation 
15 
ASSW Framework 
• We follow the ASSW analysis framework and simplify their upper 
bound results based on typically used values of parameters 
                                                                    where: 
                                                                    We simplify it to: 
[Armknecht13] F.Armknecht, A.-R.Sadeghi, S.Schulz, andC.Wachsmann. A security 
framework for the analysis and design of software attestation. ACM CCS, 2013. 
16 
An Issue of ASSW Framework 
• The ASSW framework makes two strong and pessimistic 
assumptions:  
– Once an iteration accesses a collision address, the attacker has 
100% chance to win, i.e., compute the correct checksum for that 
iteration while using 0 time 
– The attacker has 100% chance to win one iteration, if the 
attacker spends (ops + 1) (instead of ops) time for one iteration 
• Our analysis shows, regardless of the value of 𝑁, when the 
similarity between malicious image and genuine image is 
1
high, i.e., 𝜆 = 1 −
2𝑙𝑎, a simple attack strategy can achieve 
Pr 𝑤𝑖𝑛 >
1+
1
𝑜𝑝𝑠 
1
𝑒
• Conclusion: we cannot keep both assumptions 
– ASSW paper didn’t realize this issue, partly because they evaluate a 
smaller value of 𝜆 
17 
Proposed Change to ASSW Framework 
• Drop ASSW framework’s pessimistic assumption about 
collision addresses 
– There is no known attack that can “remember” previously accessed 
address 
• With this change, we are able to further simplify the upper 
bound to: Pr 𝑤𝑖𝑛  10x compared to  
full RAM walk in several settings 
– Emulation code of prover & verifier at: 
http://www.illinois.adsc.com.sg/attestation/Attestation-ADSC-Release-2017.zip 
19 
Impact of Network Delay 
• We evaluated two models of industrial Ethernet switches, 
Belden Spider II 8TX Ethernet switch and Moxa EDS-205 Switch 
• First 5 hops are Belden switches and next 5 are Moxa switches 
20 
Impact of Network Delay 
•
If checksum computation is 12.5 ms, and assume a malicious 
prover incurs x% of overhead, (a pessimistic setting of x=1.6%) 
– 12.5ms x 1.6% = 0.2ms 
– Even a single hop network delay is greater than 0.2ms, so network delay 
needs to be explicitly accommodated 
21 
Impact of Network Delay 
• Consider the per-hop minimum delay is already factored in. For 
a given hop, we find that the probability for the delay to be 
0.2ms above the minimum delay is less than0.1%. Hence, with a 
delay budget of 0.2 ms, the false positive rate can be low. 
22 
Conclusion 
• A new memory stride design to reduce the SWORT time 
requirement on ARM-based devices 
• Analysis based on an adapted version of ASSW framework 
– The proposed change is needed for practical application of the 
framework for SWORT analysis (not only for memory stride) 
• A push towards real-world system integration 
Thanks! 
Contact:    PI:EMAIL 
23