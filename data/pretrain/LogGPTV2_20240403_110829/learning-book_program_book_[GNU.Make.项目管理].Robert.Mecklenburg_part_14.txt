$(OuT)/myfile.out:S（SRC)/sourcel.in $（SRC)/source2.in
cds(dir s@):
generate-myfileS^>$(notdir S@)
自动变量S@代表工作目标，可以被分解成目录和文件两个独立的值。事实上，如
果oUT是一个绝对路径，此处就不必使用notdir函数了，不过这么做会使得输
出较具可读性。
在命令脚本中，分解文件路径的另一个方法就是使用S（@D）和S（@F）（参见“自
动变量”一节）。
下面是用来新增和删除扩展名、基本文件名等的函数。
---
## Page 95
函数
85
$（suffix name...)
suffix函数会返回它的参数中每个单词的后缀（即文件名称的扩展名）。例如，下
面的用户自定义函数将会测试列表中所有单词是否具有相同的后缀：
#S(call same-suffix,file-list)
same-suffix=$（fiiter 1 S（words S（sort $（suffix S1))))
条件语句里的suffix函数常会跟findstring一起使用。
$(basenamename...)
basename是suffix的反函数。basename所返回的是文件名称中不含后缀的部分。
调用basename之后，任何前导的路径组件都会被原封不动地保留下来。我们可以
使用basename来改写前面所举的file-to-class-name和get-java-class-name
函数范例：
#$(call file-to-class-name,root-directory.file-name)
file-to-class-name:=S(subst/..
$(basename
$（subst$1/,,$2）））
$(call get-java-class-name,file-name)
get-java-class-name =S(notdir $(basename $1))
S(addsuffix suffix,name...)
addsuffix函数会将你所指定的suffix附加到name中所包含的每个单词后面。
suffix可以是任何值。下面的用户自定义函数会从PATH中找出所有相符的文件：
#S(call find-program,filter-pattern)
find-program =$(filter $1,
$（wildcard
$(addsuffix /*,
s(sort
S（subst:，
$（subst::,:.:,
S（patsubst:8,.:8,\
$（patSubst ：,：.,S（PATH）)))))）))
find:
@echo $（words $（call find-program,&）)
最内层的三次替换动作是用来处理shell语法中的特例。一个空的路径组件代表当
前目录。为了将这个特殊的语法正规化，我们会依次搜索一个空的结尾路径组件、
换成点号。然后我们会把路径分隔符（pathseparator）替换成空格以便区分出单
词，再使用sort函数移除重复的路径组件。接着把文件名匹配字符附加在每个单
词后面，再调用wi1dcard以便扩展各个文件名匹配表达式（globbing
expression）。最后使用filter取出我们所需要的模式。
尽管看起来这个函数的运行似乎会非常慢（而且可以在许多系统上运行），但在我
的1.9GHzP4的（具有512MB内存）机器上，运行这个函数只需要0.20秒，找
---
## Page 96
86
第四章
到了4335个程序。如果把s1参数向内移往wi1dcard函数，还可以提高效能。所
以让我们去除filter函数，并且让addsuffix函数使用调用者的参数：
#$(call find-program,wildcard-pattern）
find-program=S(wildcard
$(addsuffix /$1,
s(sort
$（subst:,,
$（subst::,:.:,
S(patsubst:,.:8,
$（patsubst：,：.,$（PATH）)）)）)）)
find:
@echo $（words $(call find-program,*))
运行这个版本的函数需要0.17秒。这个版本运行得比较快是因为wildcard不再需
要返回每个文件，只是为了让此函数稍后使用filter来丢掉它们。你可以在GNU
make的在线使用手册看到类似的例子。此外，请注意，第一个版本所使用的是
filter风格的文件名匹配模式，第二个版本所使用的是wildcard风格的文件名
匹配模式（～、*、？、[.、】和[..]）。
$（addprefixprefix,name...)
件是否存在而且不是空的：
#S（cal1 valid-files,file-list)
(--x-=s-
此函数的定义方式跟之前大多数的范例不一样，因为它将会在命令脚本中运行。此
函数是以shell的test程序与-s选项（如果文件存在而且不是空的则返回真值）
进行测试的动作。当有多个文件要测试时，test命令需要在各文件名之间使用一
a（表示and）选项，所以此函数会使用addprefix为每个文件名前置-a。这串
S（join prefix-list,suffix-list)
join是dir和notdir的反函数。此函数的参数是两个列表：prefix-list和
suffix-list，它会把prefix-list的第一个元素与suffix-list的第一个元素
衔接在一起，然后把prefix-list的第二个元素与suffix-list的第二个元素衔
接在一起，依此类推。此函数可用来重建被dir和notdir分解的列表。
流程控制
因为到目前为止我们所看到的函数有很多被实现成针对串行（列表）来进行处理的，所
以即使不使用循环结构，它们也能够运作得很好。然而，如果不提供实际的循环运算符
以及某种条件处理能力，make的宏语言将会受到非常大的限制。还好，make支持以上
---
## Page 97
函数
87
所提到的这两种功能。这一节还会谈到“无可挽回的”error函数，此函数显然是流程控
制最极端的一种形式！
$(ifcondition,then-part,else-part)
if函数（不要跟第三章所提到的条件指令ifeq、ifne、ifdef和ifndef搞混了）
会根据条件表达式（conditionalexpression）的求值结果，从两个宏中选一个出来，
进行扩展的动作。如果condition扩展之后包含任何字符（即使是空格），那么
它的求值结果为“真”，于是会对then-part进行扩展的动作，否则，如果
condition扩展之后空无一物，那么它的求值结果为“假”，于是会对else-part
进行扩展的动作（注5）。
想要测试makefile是否在Windows上运行，方法非常简单。查看cOMSPEC环境变
量就行了，因为只有Windows会定义此环境变量：
PATH_SEP:=$（if $（COMSPEC).:,:)
make对condition求值时，首先会移除前导和接在后面的空格，然后对条件表
达式进行扩展的动作。如果扩展之后包含任何字符（包括空格），则表达式的求值
结果为“真”。现在不论makefile是在Windows还是在Unix上运行，PATH_SEP
所包含的是可在路径中使用的正确分隔符。
上一章我曾提到过，如果你要使用最新的功能（像eval），应该检查make的版本
是否支持。这种测试字符串值的工作常会用到if和filter函数：
$（if $（fi1ter $(MAKE_VERSION),3.80),,\
S(error This makefile requires GNU make version 3.80.))
现在，当make的后续版本被发布时，你还可以将其他可接受的版本编号加入条件
表达式中：
$（if $(fi1ter $(MAKE_VERSION),3.80 3.813.90 3.92),,\
$（error This makefile requires one of GNU make version -.))
这个方法的缺点是，当make有新的版本被发布时，你就必须对此代码进行更新的
动作。不过这不会常常发生就是了。例如，3.80版从2002年10月发布至今，尚未
有新的版本出现。在makefile中，如上的测试动作可被添加到makefike以作为最顶
层的表达式。因为，如果表达式的求值结果为“真”，if就会被缩减成空无一物；
否则error会终止make的运行状态。
S(error text)
注5：我在第三章曾提到宏语言跟其他程序语言是不同的。宏语言的运作方式是通过宏的定义
和扩展，把源文本转换成输出文本。当我们看过if函数的运作方式之后，你会更清楚其
间的差异。
---
## Page 98
88
第四章
数输出信息之后，make将会以2这个结束状态终止运行。输出中包含当前makefile
的名称、当前的行号以及消息正文。接下来让我们为make实现常见的assert编
程结构：
#S（call assert,condition,message）
define assert
$（if $1,,S（error Assertion failed:$2))
endef
#$(cal1 assert-file-exists,wildcard-pattern)
define assert-file-exists
$(call assert,S（wildcard $1),$1 does not exist)
endef
#S(call assert-not-null,make-variable)
define assert-not-null
$(call assert,$($1),The variable “S1*is null)
endef
error-exit:
$(call aSsert-not-null,NON_EXISTENT)
第一个函数assert只会测试它的第一个参数，如果该参数是空的，则会输出用户
的错误信息。第二个函数建立在第一个函数之上，它会以通配模式（wildcard
pattern）来测试文件是否存在。请注意，它的参数可以包含任意多个文件名匹配模
式（globbing pattern）。
第三个函数是一个非常有用的断言（assert），这是一个基于“经求值的变量”
（computedvariable）的函数。一个make变量中可以包含任何内容，包括另一个
make变量的名称。但如果一个变量包含了另一个变量的名称，要如何取得另一个
变量的值？嗯，非常简单，只要扩展该变量两次就行了：
NO_SPACE_MSG:= No space left on device
NO_FILE_MSG := File not found.
STATUS_MSG:= NO_SPACE_MSG
$(error S(S(STATUS_MSG)）)
为了保持简单性，这个例子显得有些不自然，它通过存储错误信息变量名称的方
式，将STATUS_MSG设定成多个错误信息中的一个。当它要输出信息的时候，首
先会扩展STATUS_MSG以便取得错误信息变量名称S（STATUS_MSG），接着会扩
展S（STATUS_MSG）以便取得错误信息S（S（STATUS_MSG）。在asSert-not-nul1
函数中，我们假设该函数的参数为make变量的名称。我们首先会扩展参数S1以
便取得变量名称，接着会扩展S（S1）以便检查它是否有值。如果它是个空值，我
们就会在错误信息中使用S1里的变量名称。
$make
此外，warning函数（参见“较不重要的杂项函数”一节）也会输出格式跟error
一样的信息，但是它不会终止make的运行状态。
---
## Page 99
函数
89
$(foreach variable,list,body）
这个函数可让你在反复扩展文本的时候，将不同的值替换进去。请注意，这跟你使
用不同的参数反复执行函数的状况是不一样的（尽管这么做也能达到相同的目的）。
例如：
letters:= S（foreach 1etter,abcd,$（letter))
show-words:
#letters has S(words S（letters))words:'S（letters)
$ make
#lettershas 4words:'a bcd
当这个foreach函数被执行时，它会反复扩展循环主体S（letter），并且将循环控
制变量letter的值依次设定成a、b、c、d。每次扩展所得到的文本会被累积起来，
并以空格为分隔符。
如下的用户自定义函数可用来测试一组变量是否定义过：
VARIABLE_LIST := SOURCES OBJECTS HOME
$（foreachi，S(VARIABLE_LIST),\
s（if s(si).,
$（shell echo $i has no value >/dev/stderr)))
（要在shel1函数里使用假文件/dev/stderr，必须将SHELL设定成bash。）这个
循环会把i依次设定成VARIABLE_LIST中的每个单词。if里的测试表达式首先
会对Si求值以便取得变量名称，然后再对此结果求值一次以便检查它是否不为空。
如果表达式的求值结果不是空的，则then的部分什么事也不做：否则，else的
部分会输出警告信息。请注意，如果我们删除ccho命令的重定向符号，shell函数
的输出将会被替换到makefile里，这会导致语法错误。如你所见，整个foreach
循环会被扩展成空无一物。
稍早曾提到，我们要示范如何以循环和条件测试在单词中搜索子字符串，下面这个
函数将会从单词列表中找出包含特定子字符串的所有单词：
$（call grep-string,search-string,word-list)
define grep-string
$(strip
S（foreach w,$2,
S（if s（findstring S1,Sw）,
(((MS
endef
words :=count_words.ccounter.clexer.11exer.h counter.h
find-words:
@echo $(call grep-string,un,S(words))
尽管此函数不接受模式，不过它可以查找简单的子字符串：
$make
count_words.ccounter.ccounter.h
---
## Page 100
06
第四章
变量何时应该使用圆括号
稍早曾提到，单一字符形式的make变量不需要使用圆括号。例如，所有基本的自动变量
的名称都是采用单一字符的形式。就像你在GNUmake在线手册所看到的，所有的自动
变量都没有被加上圆括号。不过，make在线手册会为所有其他变量使用圆括号，即使是
单一字符形式的变量，并且强烈要求用户这么做。这凸显了make变量的特色，因为所有
具有“美元符号变量”的其他程序（像shell、perl、awk、yacc等）都不需要使用圆
括号。较常见的一个make编程错误就是忘了使用圆括号。下面是使用foreach函数的
时候常见的错误：
INCLUDE_DIRS:=..
INCLUDES :=$（foreach i,SINCLUDE_DIRS,-I $i)
INCLUDES现在的值为-INCLUDE_DIRS
然而，我发现通过明智地使用单一字符变量以及省略非必要的圆括号，宏将会变得较容
易阅读。例如，我认为，如果省略非必要的圆括号，has-duplicates函数将会变得较
容易阅读。请比较：
#S（call has-duplicates,word-list)
has-duplicates =S(filter
$（words $1)
$（words S(sort si)))
和：
#$(call has-duplicates,word-list)
has-duplicates=$（filter
$（words $（1))
$（words $（sort $（1）)））
然而，kill-program函数可能需要使用圆括号才会容易阅读，因为圆括号可以协助我
们区分make变量与shell变量或其他程序所使用的变量：
define kill-program
@S（PS)$（PS_FLAGS）1