foreign table, server : fetch_size  
foreign server : extensions  
```  
db01=# alter server db02 options (add extensions 'dblink', fetch_size '200');  
WARNING:  extension "dblink" is not installed  
ALTER SERVER  
db01=# alter server db02 options (set extensions 'dblink', set fetch_size '200');  
WARNING:  extension "dblink" is not installed  
ALTER SERVER  
db01=# alter server db02 options (drop extensions );  
ALTER SERVER  
db01=# alter server db02 options (drop fetch_size );  
ALTER SERVER  
```  
10、pull  
```  
db01=# create table t as select * from ft.table1;  
SELECT 1000000  
db01=# explain verbose select count(*) from t join ft.table1 t1 on (t.id=t1.id and t1.c1=1); 
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Aggregate  (cost=5424.74..5424.74 rows=1 width=8)
   Output: count(*)
   ->  Hash Join  (cost=2848.88..5422.59 rows=994 width=0)
         Hash Cond: (t1.id = t.id)
         ->  Foreign Scan on ft.table1 t1  (cost=100.00..2614.19 rows=994 width=4)
               Output: t1.id
               Remote SQL: SELECT id FROM public.table1 WHERE ((c1 = 1))
         ->  Hash  (cost=336.57..336.57 rows=1000000 width=4)
               Output: t.id
               ->  Seq Scan on public.t  (cost=0.00..336.57 rows=1000000 width=4)
                     Output: t.id
(11 rows)
```  
11、parallel  
https://www.postgresql.org/docs/12/fdwhandler.html   
12、dml  
```  
db01=# explain verbose update ft.table1 set crt_time=now() where id=1;  
                                          QUERY PLAN                                            
----------------------------------------------------------------------------------------------  
 Update on ft.table1  (cost=100.00..2604.07 rows=1 width=55)  
   Remote SQL: UPDATE public.table1 SET crt_time = $2 WHERE ctid = $1  
   ->  Foreign Scan on ft.table1  (cost=100.00..2604.07 rows=1 width=55)  
         Output: id, now(), info, c1, ctid  
         Remote SQL: SELECT id, info, c1, ctid FROM public.table1 WHERE ((id = 1)) FOR UPDATE  
(5 rows)  
```  
13、环境变量  
- In the remote sessions opened by postgres_fdw, the search_path parameter is set to just pg_catalog  
- postgres_fdw likewise establishes remote session settings for various parameters:  
TimeZone is set to UTC  
DateStyle is set to ISO  
IntervalStyle is set to postgres  
extra_float_digits is set to 3 for remote servers 9.0 and newer and is set to 2 for older versions  
14、连接池-conn pool|cache  
- postgres_fdw establishes a connection to a foreign server during the first query that uses a foreign table associated with the foreign server. This connection is kept and re-used for subsequent queries in the same session.   
- However, if multiple user identities (user mappings) are used to access the foreign server, a connection is established for each user mapping.  
session 1: 访问了这些server的外部表：rmt_server1(user1), rmt_server2(user), rmt_server1(user1), rmt_server1(user2) 几个链接？  
15、事务  
- During a query that references any remote tables on a foreign server, postgres_fdw opens a transaction on the remote server if one is not already open corresponding to the current local transaction.   
- The remote transaction is committed or aborted when the local transaction commits or aborts.   
- Savepoints are similarly managed by creating corresponding remote savepoints.  
- The remote transaction uses SERIALIZABLE isolation level when the local transaction has SERIALIZABLE isolation level;   
- otherwise it uses REPEATABLE READ isolation level.  
16、性能：  
1亿tpcb  
```  
pgbench -i -s 1000 db02  
db01=# import foreign schema public except (table1,table2) from server db02 into public;  
IMPORT FOREIGN SCHEMA  
db01=# \det  
       List of foreign tables  
 Schema |      Table       | Server   
--------+------------------+--------  
 public | pgbench_accounts | db02  
 public | pgbench_branches | db02  
 public | pgbench_history  | db02  
 public | pgbench_tellers  | db02  
(4 rows)  
```  
直接操作表  
```  
pgbench -M prepared -n -r -P 1 -c 32 -j 32 -T 120 -S db02   
transaction type:   
scaling factor: 1000  
query mode: prepared  
number of clients: 32  
number of threads: 32  
duration: 120 s  
number of transactions actually processed: 54167206  
latency average = 0.071 ms  
latency stddev = 0.014 ms  
tps = 451390.893220 (including connections establishing)  
tps = 451509.501209 (excluding connections establishing)  
statement latencies in milliseconds:  
         0.001  \set aid random(1, 100000 * :scale)  
         0.070  SELECT abalance FROM pgbench_accounts WHERE aid = :aid;  
```  
操作postgres_fdw外表  
```  
pgbench -M prepared -n -r -P 1 -c 32 -j 32 -T 120 -S db01 -U user1  
transaction type:   
scaling factor: 1000  
query mode: prepared  
number of clients: 32  
number of threads: 32  
duration: 120 s  
number of transactions actually processed: 5917365  
latency average = 0.649 ms  
latency stddev = 0.099 ms  
tps = 49310.904457 (including connections establishing)  
tps = 49330.503336 (excluding connections establishing)  
statement latencies in milliseconds:  
         0.002  \set aid random(1, 100000 * :scale)  
         0.647  SELECT abalance FROM pgbench_accounts WHERE aid = :aid;  
```  
why?  
xact  
declare  
open cursor  
fetch  
close cursor  
end  
## 参考    
https://www.postgresql.org/docs/12/postgres-fdw.html  
https://www.postgresql.org/docs/12/libpq-connect.html#LIBPQ-PARAMKEYWORDS  
https://www.postgresql.org/docs/12/sql-createextension.html  
https://www.postgresql.org/docs/12/sql-createserver.html  
https://www.postgresql.org/docs/12/sql-createusermapping.html  
https://www.postgresql.org/docs/12/sql-createforeigntable.html  
https://www.postgresql.org/docs/12/sql-importforeignschema.html  
https://wiki.postgresql.org/wiki/Foreign_data_wrappers   
https://www.postgresql.org/docs/12/fdwhandler.html   
[《使用SQL查询数据库日志 - file_fdw , csvlog , program , find - 1》](../201904/20190418_01.md)    
[《使用SQL查询数据库日志 - file_fdw , csvlog , program , find - 2》](../201907/20190719_02.md)    
[《[未完待续] PostgreSQL PRO 特性 - sharding(pg_shardman)》](../201803/20180322_02.md)    
https://github.com/postgrespro/pg_shardman  
[《PostgreSQL 9.6 sharding based on FDW & pg_pathman》](../201610/20161027_01.md)    
[阿里巴巴rds pg冷热数据分离功能](https://help.aliyun.com/document_detail/44461.html)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")