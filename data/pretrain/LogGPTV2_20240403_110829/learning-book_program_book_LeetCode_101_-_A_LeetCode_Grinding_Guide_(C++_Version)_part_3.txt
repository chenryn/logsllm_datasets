++chars[T[]];
//移动滑动窗口，不断更改统计数据
int cnt = 0, 1 = 0, min_1 = 0, min_size = S.size() + 1;
for (int r = 0; r = 0) {
++cnt ;
//若目首滑动窗口已包含T中全部字符，
上
//则尝试将1右移，在不影响结果的情况下获得最短子字符申
while (cnt == T.size()) {
if (r - 1 + 1  0) {
--cnt ;
++1;
上
return min_size > S.size()? *": S.substr (min_1, min_size) ;
F
---
## Page 18
3.6练习
13/143 -
3.6练习
基础难度
633.Sum of Square Numbers (Easy)
TwoSum题目的变形题之一。
680.Valid Palindrome II (Easy)
Two Sum题目的变形题之二。
524.Longest Word in Dictionary through Deleting (Medium)
归并两个有序数组的变形题。
进阶难度
340. Longest Substring with At Most K Distinct Characters (Hard)
需要利用其它数据结构方便统计当前的字符状态。
---
## Page 19
第4章居合斩！二分查找
内容提要
算法解释
查找区间
求开方
旋转数组查找数宇
4.1算法解释
二分查找也常被称为二分法或者折半查找，每次查找时通过将待查找区间分成两部分并只取
一部分继续查找，将查找的复杂度大大减少。对于一个长度为O(n）的数组，二分查找的时间复
杂度为O（logn）
举例来说，给定一个排好序的数组[3.4,5.6.7}，我们希望查找4在不在这个数组内。第一次
折半时考虑中位数5，因为5大于4，所以如果4存在于这个数组，那么其必定存在于5左边这一
半。于是我们的查找区间变成了[3,4,5}。（注意，根据具体情况和您的刷题习惯，这里的5可以
保留也可以不保留，并不影响时间复杂度的级别。）第二次折半时考虑新的中位数4，正好是我们
需要查找的数字。于是我们发现，对于一个长度为5的数组，我们只进行了2次查找。如果是遍
历数组，最坏的情况则需要查找5次。
我们也可以用更加数学的方式定义二分查找。给定一个在[a,以区间内的单调函数f（x），若
f(a)和f(b)正负性相反，那么必定存在一个解c，使得f(c)=0。在上个例子中，f(x)是离散函数
f(x)=x+2，查找4是否存在等价于求f(x)-4=0是否有离散解。因为f(1)-4=3-4=-10，且函数在区间内单调递增，因此我们可以利用二分查找求解。如果最后
二分到了不能再分的情况，如只剩一个数字，且剩余区间里不存在满足条件的解，则说明不存在
离散解，即4不在这个数组内。
具体到代码上，二分查找时区间的左右端取开区间还是闭区间在绝大多数时候都可以，因此
有些初学者会容易搞不清楚如何定义区间开闭性。这里我提供两个小诀窍，第一是尝试熟练使用
一种写法，比如左闭右开（满足C++、Python等语言的习惯）或左闭右闭（便于处理边界条件），
尽量只保持这一种写法：第二是在刷题时思考如果最后区间只剩下一个数或者两个数，自已的写
法是否会陷人死循环，如果某种写法无法跳出死循环，则考虑尝试另一种写法。
二分查找也可以看作双指针的一种特殊情况，但我们一般会将二者区分。双指针类型的题，
指针通常是一步一步移动的，而在二分查找里，指针每次移动半个区间长度。
4.2求开方
69. Sqrt(x) (Easy)
题目描述
给定一个非负整数，求它的开方，向下取整。
---
## Page 20
4.3查找区间
15/143 -
输人输出样例
输入一个整数，输出一个整数。
Input: 8
Output:2
8的开方结果是2.82842..，向下取整即是2。
题解
我们可以把这道题想象成，给定一个非负整数a，求f（x）=x²-a=0的解。因为我们只考
虑x≥0，所以f(x)在定义域上是单调递增的。考虑到f(0)=-a≤0，f(a)=a²-a≥0，我们
可以对[0a]区间使用二分法找到f（x)=0的解。
注意，在以下的代码里，为了防止除以0，我们把a=0的情况单独考虑，然后对区间[1,a]
进行二分查找。我们使用了左闭右闭的写法
int mySqrt(int a) {
if (a == 0) return a;
int 1 = 1, r = a, mid, sqrt;
vhile (1  sqrt) {
r=
mid - 1;
}else{
1 = mid + 1;
return r;
另外，这道题还有一种更快的算法—
生顿选代法，其公式为xn+1=x-f（xn)/f"（x）。给
定f（x）=x²-a=0，这里的选代公式为xn+1=（x+a/xn)/2，其代码如下。
int mySqrt(int a){
long x = a;
while (x * x > a) {
x = (x + a / x) / 2;
return x;
4.3查找区间
34.Find First and Last Position of Element in Sorted Array (Medium)
---
## Page 21
4.3查我区间
16/143 
题目描述
给定一个增序的整数数组和一个值，查找该值第一次和最后一次出现的位置。
输人输出样例
输入是一个数组和一个值，输出为该值第一次出现的位置和最后一次出现的位置（从0开
始）：如果不存在该值，则两个返回值都设为-1。
Input: nums - [5,7,7,8,8,10], target = 8
Output: [3,4]
数字8在第3位第一次出现，在第4位最后一次出现。
题解
这道题可以看作是自已实现C++里的1ower_bound和upper_bound函数。这里我们尝试
使用左闭右开的写法，当然左闭右闭也可以。
//主函数
vector searchRange(vector& nums,int target){
if (nums.empty()) return vector(-1, -1};
int louer = lover_bound(nums, target);
int upper
-upper_bound(nums， target)-
1；//这里需要减1位
if (lover
nums.size() 1l nums[lover] != t
target)(
return vector{-1,-1);
return vector{lower, upper};
//辅函数
int lower_bound(vector &nums, int target) {
int 1 = 0, r = nums.size(), mid;
while (1 = target){
r = mid;
}else {
1 = mid + 1;
return 1;
//辅函数
int upper_bound(vector &nums, int target) {
int 1 = 0, r = nums.size(), mid;
while (1 target){
r = mid;
}else {
1 = mid + 1;
---
## Page 22
4.4旋转数组查找数字
17/143 -
return 1;
4.4旋转数组查找数字
81.Search in Rotated Sorted Array II (Medium)
题目描述
位和第二位断开），我们称其为旋转数组。给定一个值，判断这个值是否存在于这个为旋转数组
中。
输人输出样例
输入是一个数组和一个值，输出是一个布尔值，表示数组中是否存在该值。
Input: nums -[2,5,6,0,0,1,2], target = 0
Output: true
题解
即使数组被旋转过，我们仍然可以利用这个数组的递增性，使用二分查找。对于当前的中点，
如果它指向的值小于等于右端，那么说明右区间是排好序的：反之，那么说明左区间是排好序的。
如果目标值位于排好序的区间内，我们可以对这个区间继续二分查找：反之，我们对于另一半区
间继续二分查找。
注意，因为数组存在重复数字，如果中点和左端的数字相同，我们并不能确定是左区间全部
相同，还是右区间完全相同，在这种情况下，我们可以简单地将左端点右移一位，然后继续进行
二分查找。
bool search(vector& nums, int target) {
int start = 0, end = nums.size() - 1;
while (start  nums [mid] && target = nums[start] &k target  &nums,int 1, int r) {
if (1 + 1 >= r) {
return;
上
int first = 1, last = r - 1, key = nums[first];
while (first = key){
--1ast;
nums [first] = nums [1ast];
while(first  &nums, int 1, int r, vector &temp) {
if (1 + 1 >= r) {
return;
// divide
int m = 1 + (r - 1) / 2;
merge_sort (nums, 1, m, temp) ;
---
## Page 25
5.1常用排序算法
20/143 
merge_sort(nums, m, r, temp);
// conquer
int p = 1, q = n, i = 1;
while (p = r 11 (p  &nums, int n) {
for (int i = 0; i  0 &k nums[j]  &nums, int n) {
bool svapped;
for (int i =1; i  &nums, int n) {
int mid;
for (int i = 0; i < n - 1; ++i) {
mid = 1;
---
## Page 26
5.2快速选择
21/143 -
for （int j =i + 1; j < n; ++j） {
if (nums [j] < nums [mid]) {
mid - j;
svap(nums [mid] , nums[i]);