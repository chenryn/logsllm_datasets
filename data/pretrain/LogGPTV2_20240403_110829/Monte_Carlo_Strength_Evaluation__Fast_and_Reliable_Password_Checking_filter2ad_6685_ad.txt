and PCFG strategies are very highly correlated for the pass-
202−162−322−482−642−802−962−1122−128Probabilitybin0%2%4%6%8%10%12%14%202−162−322−482−642−802−962−1122−128Probabilitybin0%2%4%6%8%10%12%14%202−162−322−482−642−802−962−1122−128Probabilitybin0%2%4%6%8%10%12%14%202−162−322−482−642−802−962−1122−128Probabilitybin0%2%4%6%8%10%12%14%2−602−492−382−272−16Probability0.1%1%10%100%1000%Relativestandarddeviation1001,00010,000100,0002−1002−812−622−432−24Probability1%10%100%1000%Relativestandarddeviation3-grams4-gramsPCFGbackoff165Figure 5: Probability vs. rank. Between n-grams and the
backoﬀ and PCFG models, the probabilities of passwords
having the same rank can diﬀer by orders of magnitude.
Figure 7: Overview of the best-performing attacks. Depend-
ing on the diﬃculty of the passwords, diﬀerent attack strate-
gies perform better. The “backoﬀ” strategy perform not far
from optimally for each probability.
obsolete: guessing passwords as they appear in the Xato
dataset appears always preferable than using dictionaries.
Using PCFGs is essentially equivalent to guessing passwords
as they appear in the training dataset – however, passwords
present in the Xato dataset are useful to ﬁnd around 40%
of the passwords of the Rockyou dataset; an additional 20%
are found via the mangling made through PCFGs.
5.2.2 N-Grams
In Figure 10, we compare attack models based on n-grams.
Compared to results based on much smaller training sets [7],
the sheer size of the training dataset makes it possible to
ﬁnd a large majority of the passwords even with higher-
order models (n = 3 and n = 4). Attack models based
on 2-grams and 1-grams (i.e., simply considering character
frequencies) are unlikely to be helpful for conceivably-sized
guessing attacks.
5.2.3 PCFGs
We analyze the performance of PCFG-based attacks in
Figure 11. As described in Section 4.2.2, our implementa-
tion of the model allows us to perform “leave-one-out” cross-
validation.
In this case, we evaluate the beneﬁts that an
attacker might have with a very well tuned training set: the
extreme case is, of course, to perform training on the full
Rockyou database. As per the original description by Weir
et al., we also train the alphabetic patterns of PCFGs from
an external dictionary, rather than from the training set: we
choose Openwall, since it performs best in Figure 9.
A better training set (Rockyou rather than Xato) boosts
performance noticeably, raising the percentage of found pass-
words by around 13%. Two factors are in play here: ﬁrst,
the Rockyou training set is larger than Xato; second, it is –
of course – more representative of passwords for the Rock-
you website (e.g., the “rockyou” string is very common in
the former and relatively rare in the latter). Again, we ﬁnd
that the size of training sets available today makes ad-hoc
dictionaries obsolete, conﬁrming previous ﬁndings [19].
5.2.4 Backoff
Figure 12 shows the results of evaluating diﬀerent vari-
ants of the backoﬀ model. Again, we evaluate the Rockyou
dataset as a training set using the “leave-one-out” method.
Figure 6: Probability multiplied by rank. Ma et al. [19] con-
jectured that the product between these two values remains
between 2−3 and 2−8. Our results show that this trend does
not hold for small probabilities.
words that are easier to guess (up to around 216 attempts),
which are in general the ones that appear multiple times in
the training dataset. When a password can ultimately be
guessed by PCFGs, they do this with less eﬀorts than the
backoﬀ attack; however, we stress that roughly a third of
the passwords are never guessed by PCFGs and hence they
do not appear in the graph.
The results of Figure 8 highlight that the strength of a
given password against diﬀerent attacks is obviously corre-
lated; nevertheless we consider that user passwords should
still be checked against several attacks. A resonable con-
servative strategy would be to output to the user the result
yielding the lowest strength value.
In the following, we provide more details about attacks by
examining each class more in detail.
5.2.1 Dictionary Attacks
We take into account dictionary attacks. We consider the
Openwall and dic-0294 dictionaries, two ad-hoc dictionaries
for password guessing that have been evaluated in related
work [7,19,30], and we compare them to using the password
in the Xato dataset as a dictionary, sorted by decreasing
number of occurrences: the results are shown in Figure 9.
It appears that large password datasets make dictionaries
2−252−502−752−100Probability20210220230240250260270280290Rank3-grams4-gramsPCFGBackoff2−252−502−752−100Probability2−122−102−82−62−42−2Rank×probability3-grams4-gramsPCFGBackoff20216232248264280Attempts0%20%40%60%80%100%Guessingprobability3-grams4-gramsPCFGBackoff166Figure 9: Dictionary attacks. A large sets of leaked pass-
words performs better in cracking passwords than ad-hoc
crafted dictionaries.
PCFGs are eﬃcient to generalize
guesses when dictionaries are exhausted.
Figure 8: Comparing diﬀerent attacks on the same pass-
words. Dots on the diagonal represents passwords that are
found after the same number of attempts by two attacks.
As before, we observe that using the matching dataset as a
training set improves the attack. In addition, our modiﬁca-
tion to include a start symbol improves the quality of initial
guesses, matching at the beginning the one of PCFGs (see
Figure 7).
5.3 Impact of Training
In Figure 13, we consider the eﬀect of training set size
on our results: we consider the backoﬀ model, because it
obtains a good guessing probability for any number of at-
tempts. We vary the training set size between 0.1% and
100% of the training dataset.
It is interesting to point out that a larger training set
has little eﬀect in guessing either the easiest passwords (the
most common passwords are likely to be in smaller subsets
of the original training set) or the hardest ones (they are
Figure 10: n-grams. When trained on very large datasets,
attacks based on 3-grams cover almost all passwords. 4-
grams are slightly more eﬃcient to guess weaker passwords.
most likely unique, and little information about them can be
gleaned even from large training sets). Raising the training
set size, instead, appears useful for the “average” passwords,
i.e., those for which either the given password or a similar
one can be found in a larger dataset.
5.4 Evaluating Mandatory Requirements
We now turn our attention to evaluating mandatory re-
quirements such as the ones that are often included in pass-
words: minimum length and/or including uppercase, nu-
meric and/or symbolic characters. From our datasets, we
only consider the passwords that satisfy such requirements;
we evaluate the number of attempts an attacker would need
in order to guess a password. We assume that the attacker
is aware of the restriction and therefore that passwords that
do not satisfy the requirements will not be guessed.
We think that these results should be regarded as opti-
mistic evaluations of the strength improvements that can be
obtained by imposing such restrictions:
indeed, users who
choose weaker passwords might see such restrictions as a
hurdle to bypass with minimum eﬀort, choosing the sim-
plest modiﬁcation that would satisfy the requirement (e.g.,
appending “1” to satisfy the requirement of including digits).
In this case, given a boolean function f (α) that tells us
20216232248264280Attemptswithbackoff20216232248264280Attemptswith3-grams20216232248264280Attemptswithbackoff20216232248264280Attemptswith4-grams20216232248264280Attemptswithbackoff20216232248264280AttemptswithPCFG20216232248264280Attempts0%10%20%30%40%50%60%70%GuessingprobabilityPCFGXatoopenwalldic-029420216232248264280Attempts0%20%40%60%80%100%Guessingprobability1-grams2-grams3-grams4-grams167Figure 11: PCFGs. The legend indicates the training set
and whether an additional dictionary has been used to train
the alphabetic groups of PCFGs.
Figure 13: Training set. The legend refers to the percentage
of the full Xato set used for training.
and this is easy to guess for attackers. Symbols appear to
be less predictable and placed in diﬀerent locations of the
password, and that noticeably increases password strength:
in our case, passwords that include symbols are roughly as
strong as those of length at least 12.
6. CONCLUSIONS
Passwords are an ubiquitous way of handling access con-
trol, and hence properly evaluating their solidity against
state-of-the-art attacks is obviously important. To the best
of our knowledge, this is the ﬁrst study that provides a reli-
able estimation – backed by proofs of correctness and conver-
gence – for the success rate of very expensive attacks to pass-
words using state-of-the-art guessing techniques. By evalu-
ating the password strength in terms of number of guesses
needed by an attacker, we make it possible to gain better
insights into the actual cost that an attacker should pay to
guess a password, and therefore better understand the us-
ability vs. security trade-oﬀ that password strength implies.
Our study shows that the number of attempts needed
to guess a password is correlated between diﬀerent attacks;
nevertheless, we believe that user passwords should be checked
against several attack models, and that a reasonable strat-
egy would be to conservatively output the result yielding the
lowest strength value.
Our method is generic and extremely lightweight, with the
possibility to increase the level of accuracy in the assessment
of password strength by a quantity that can be directly re-
lated to the number of computations that one is willing to
invest. Our proposal is applicable to any generative prob-
abilistic model; we consider this approach to be reasonably
future-proof, as we believe that new developments in pass-
word guessing will most likely continue to use models that
are (or can be expressed as) generative probabilistic models.
7. REFERENCES
[1] J. Bonneau. The science of guessing: analyzing an
anonymized corpus of 70 million passwords. In S&P.
IEEE, 2012.
[2] G. Bontempi and S. Ben Taieb. Statistical foundations
of machine learning. 2009.
[3] M. Burnett. Today I am releasing ten million
passwords. https://xato.net/passwords/ten-
million-passwords/, February 2015.
Figure 12: Backoﬀ. The legend indicates the training set
and whether our proposed use of a start symbol is adopted.
whether a given password is accepted according to the re-
quirements, our new strength measure should only count the
passwords that have probability higher than p (β) > p (α)
and for which f (β) is true; the procedure to do this is
described in Section 3.2. Passwords that satisfy the most
stringent requirements are rare in our datasets, so to limit
precision problems, we increase the size of our sample set
Θ and the test set from the Rockyou dataset, in order to
obtain 10,000 passwords that satisfy f in both sets.
In Figure 14 we plot the distribution of password strength
for passwords with restrictions, according to the procedure
outlined above (policies are described in the caption). Again,
we consider the backoﬀ model as the attack method.
Length requirements increase password strength rather
homogeneously for all passwords – with the exception of the
weakest ones for the length limitation at 8: this is because
several very common passwords have length 8.
We notice that requiring passwords with both letters and
numbers does little to increase security; this may be due to
the fact that passwords including letters and numbers often
have very predictable patterns (e.g., numbers at the end)
which are easily discovered by guessing techniques. Requir-
ing a mix of uppercase and lowercase characters does better,
but the strength improvement on the weakest passwords is
limited: this is because, for weak passwords, uppercase char-
acters are generally placed at the beginning of the password,
20216232248264280Attempts0%10%20%30%40%50%60%70%80%GuessingprobabilityXatoRockyouXato+OpenwallRockyou+Openwall20216232248264280Attempts0%20%40%60%80%100%GuessingprobabilityRockyou,startsymbolXato,startsymbolRockyou,nostartsymbolXato,nostartsymbol20216232248264280Attempts0%20%40%60%80%100%Guessingprobability100%10%1%0.1%168Sustainably managing large numbers of accounts. In
USENIX Security, 2014.
[12] C. Herley and P. Van Oorschot. A research agenda
acknowledging the persistence of passwords. In S&P.
IEEE, 2012.
[13] D. G. Horvitz and D. J. Thompson. A generalization
of sampling without replacement from a ﬁnite
universe. J. Am. Stat. Assoc., 47(260):663–685, 1952.
[14] S. Katz. Estimation of probabilities from sparse data
for the language model component of a speech
recognizer. IEEE TASSP, 35(3):400–401, 1987.
[15] P. G. Kelley, S. Komanduri, M. L. Mazurek, R. Shay,
T. Vidas, L. Bauer, N. Christin, L. F. Cranor, and
J. Lopez. Guess again (and again and again):
Measuring password strength by simulating
password-cracking algorithms. In S&P. IEEE, 2012.
[16] D. V. Klein. Foiling the cracker: A survey of, and
improvements to, password security. In USENIX
Security, 1990.
[17] S. Komanduri, R. Shay, L. F. Cranor, C. Herley, and
S. Schechter. Telepathwords: Preventing weak
passwords by reading users’ minds. In USENIX
Security, 2014.
[18] Z. Li, W. Han, and W. Xu. A large-scale empirical
analysis of chinese web passwords. In USENIX
Security, 2014.
[19] J. Ma, W. Yang, M. Luo, and N. Li. A study of
probabilistic password models. In S&P. IEEE, 2014.
[20] R. Morris and K. Thompson. Password security: A
case history. CACM, 22(11):594–597, 1979.
[21] A. Narayanan and V. Shmatikov. Fast dictionary
attacks on passwords using time-space tradeoﬀ. In
CCS. ACM, 2005.
[22] P. Oechslin. Making a faster cryptanalytic
time-memory trade-oﬀ. In CRYPTO. Springer, 2003.
[23] C. Percival and S. Josefsson. The scrypt
password-based key derivation function. 2012.
[24] W. H. Press, S. A. Teukolsky, W. T. Vetterling, and
B. P. Flannery. Numerical Recipes: The Art of
Scientiﬁc Computing. Cambridge University Press, 3rd
edition, 2007.
[25] Solar Designer and S. Marechal. Password security:
past, present, future. Passwordˆ12 workshop,
December 2012.
[26] E. H. Spaﬀord. Observing reusable password choices.
In USENIX Security, 1992.
[27] B. Ur, P. G. Kelley, S. Komanduri, J. Lee, M. Maass,
M. L. Mazurek, T. Passaro, R. Shay, T. Vidas,
L. Bauer, et al. How does your password measure up?
the eﬀect of strength meters on password creation. In
USENIX Security, 2012.
[28] R. Veras, C. Collins, and J. Thorpe. On the semantic
patterns of passwords and their security impact. In
NDSS. Internet Society, 2014.
[29] M. Weir, S. Aggarwal, M. Collins, and H. Stern.
Testing metrics for password creation policies by
attacking large sets of revealed passwords. In CCS.
ACM, 2010.
[30] M. Weir, S. Aggarwal, B. De Medeiros, and
B. Glodek. Password cracking using probabilistic
context-free grammars. In S&P. IEEE, 2009.
Figure 14: Restrictions. We show the number of attempts an
attacker would need to guess passwords that satisfy certain
restrictions, if knowing that the restrictions exist. Meaning
of the labels: “policy 1” refers to passwords that have alpha-
betic and numeric characters; “policy 2” requires lowercase,
uppercase and digits; “policy 3” requires alphabetic and nu-
meric characters in addition to non-alphanumeric symbols.
[4] W. Burr, D. Dodson, R. Perlner, W. Polk, and
S. Gupta. NIST special publication 800-63-1 electronic
authentication guideline, 2006.
[5] C. Castelluccia, M. D¨urmuth, and D. Perito. Adaptive
password-strength meters from markov models. In
NDSS. Internet Society, 2012.
[6] X. de Carn´e de Carnavalet and M. Mannan. From very
weak to very strong: Analyzing password-strength
meters. In NDSS. Internet Society, 2014.
[7] M. Dell’Amico, P. Michiardi, and Y. Roudier.
Password strength: An empirical analysis. In
INFOCOM. IEEE, 2010.
[8] M. Duermuth, F. Angelstorf, C. Castelluccia,
D. Perito, and A. Chaabane. OMEN: Faster password
guessing using an ordered Markov enumerator. In
ESSoS. IEEE, 2015.
[9] S. Egelman, A. Sotirakopoulos, I. Muslukhov,
K. Beznosov, and C. Herley. Does my password go up
to eleven?: the impact of password meters on
password selection. In SIGCHI. ACM, 2013.
[10] D. Florˆencio, C. Herley, and P. C. Van Oorschot. An
administrator’s guide to internet password research. In
LISA. USENIX, 2014.
[11] D. Florˆencio, C. Herley, and P. C. Van Oorschot.
Password portfolios and the ﬁnite-eﬀort user:
20216232248264280Attempts0%20%40%60%80%100%Guessingprobabilityallpasswordslength≥8length≥10length≥1220216232248264280Attempts0%20%40%60%80%100%Guessingprobabilitynorestrictionpolicy1policy2policy3169