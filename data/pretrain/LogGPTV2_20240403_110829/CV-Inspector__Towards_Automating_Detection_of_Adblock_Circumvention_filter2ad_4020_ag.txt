99%
TABLE VIII.
FROM A REAL WORLD DATA SET USED BY ABP TO
MONITOR CIRCUMVENTION, WE APPLY OUR CLASSIFIER AND SHOW THE
RESULTS. FOR “NO CV” INSTANCES, WE SAMPLE FROM THAT PREDICTED
SET TO HAVE A CONFIDENCE LEVEL OF 95% WITH 5% MARGIN OF ERROR.
their presence, as the name of the provider was sufﬁcient to be
used as keywords. For example, we found that ExoClick can
be detected by the keywords “exoclick” and “exoloader” in
the page source. For AdDefend, AdThrive and MobiAds, we
look at keywords “addefend,” “adthrive,” and “mobiads” in the
page source, respectively. Similarly, Publica can be detected by
looking for the key ”publica user id” in the HTTP response
Set-Cookie header. When the name of the provider was not
enough, we inspected the DOM structure of the ad using the
page source to see if there was any unique identiﬁer that we
could use. In this case, we ﬁnd that Yandex can be detected
by looking for the custom DOM tag “.” In total, we
utilized seven keywords to identify the presence of six different
CV providers listed in Table VI.
We note that the presence of these keywords does not
necessarily always indicate that circumvention was successful.
It could also mean that circumvention attempt failed or that
circumvention was not even attempted (e.g., dormant code).
Therefore, we cannot simply use these heuristics in place of
CV-INSPECTOR to detect sites that circumvent adblockers.
Table VI summarizes the application of the aforementioned
heuristics on Tranco-20K sites. We identify many instances of
different CV providers, including ad networks such as Yandex
and dedicated CV providers such as AdThrive and AdDefend.
Taxonomy of Circumvention Approaches. Next, we char-
acterize the obfuscation approaches used by different CV
providers by deﬁning whether the obfuscation is full ((cid:32)) or
partial ((cid:71)(cid:35)). For web request obfuscation, full obfuscation refers
to the use of randomized URLs including subdomains and
paths as shown in Listing 2 while partial obfuscation refers to
the use of ﬁrst-party subdomains. For DOM obfuscation, full
obfuscation refers to the use of non-standard DOM structures
such as deeply nested elements or randomized tag attributes
while partial obfuscation refers to only randomized tag at-
tributes with simple DOM structures, such as Listing 3.
Using this taxonomy, we compare the full vs. partial ob-
fuscation techniques of different CV providers. First, ExoClick
and AdDefend simply leverage inlined JS, which is difﬁcult
to block without hurting other page functionality [22], to im-
plement their circumvention logic. AdThrive redirects through
several domains (e.g., cloudfront.net → edvfwlacluo.com →
15
lmyiwaakn.com) before fetching the JS that implements their
circumvention logic. Second, ExoClick and AdDefend do not
obfuscate URLs but rather serve their ad resources under ﬁrst-
party domains that are difﬁcult
to distinguish from legiti-
mate content. AdThrive fetches ads in iframes using rotating
third-party domains, subdomains, and randomized IDs. Third,
ExoClick and AdDefend differ in their DOM obfuscation
techniques. ExoClick uses a simpler ad structure (a hyperlink
with two div children) while obfuscating the ad image by
serving it with CSS background-image instead of a regular
image tag. On the other hand, AdDefend employs a nested
DOM structure with obfuscated IDs, while Yandex uses nested
non-standard tags with obfuscated class names.
Finally, we analyze CV-INSPECTOR’s performance in de-
tecting different CV providers. We match each detected CV
provider instance in Table VI to our CV-INSPECTOR deploy-
ment results on Tranco-20K sites from Table V. We see that
CV-INSPECTOR achieves good precision in detecting different
popular CV providers. For AdDefend and MobiAds, we use
“N/A” to denote that we lack sufﬁcient data.
B. Monitoring Circumvention for Sites of Interest
As discussed in Sec. III-B, ACVL is updated very fre-
quently to combat the back and forth between adblockers and
circumvention providers. In addition, ﬁlter list authors gener-
ally focus their attention on “sites of interest,” as discussed
in Sec. IV-A4. Curators must continuously monitor them to
see if the ﬁlter list (ACVL) continues to be effective, or if
circumvention has evolved, and the ﬁlter rules need updating.
Consequently, much human labor goes to this continuous
monitoring of sites in the ACVL. To that end, we show how
CV-INSPECTOR can automatically monitor whether ACVL is
effective in countering circumvention on a site. We use the
same approach as laid out in Fig. 6 but with one change. We
use the ACVL, in addition to EL, when crawling a site with an
adblocker. We use two data sets from Table II for evaluation:
(1) the GTP data set, which contains all sites that circumvent
the adblocker in our GT; and (2) Adblock Plus Monitoring data
set, which contains 360 sites that ABP continuously monitor
for circumvention activity to update ﬁlter rules.
1) Monitoring sites in GTP: We use CV-INSPECTOR to
classify sites within our GTP data set, which comprises of
700 sites from the GT data set that originated from ACVL
and were successful at circumventing the adblocker. If CV-
INSPECTOR again detects a site as “CV,” it shows that the
site is able to successfully circumvent even the ACVL. We
manually validate CV-INSPECTOR’s classiﬁcations. Table VII
summarizes the results. We note that CV-INSPECTOR again
detects 244 sites as “CV” with 91% precision and 465 sites as
“No CV” with 89% precision. The results show that more than
one-third of sites with relevant ﬁlter rules in the ACVL are still
able to successfully circumvent adblockers. This demonstrates
that the sites addressed by the ACVL need to be continuously
monitored. We suggest that CV-INSPECTOR should be period-
ically used (e.g., every hour) to monitor the sites on the ACVL.
The sites that are detected by CV-INSPECTOR would need to
be reviewed by ACVL curators to update the ﬁlter rules and
the rest can be safely ignored.
2) Monitoring sites from ABP: To further demonstrate CV-
INSPECTOR’s usefulness, we obtain a list of 360 sites from
ABP that are manually monitored by the ABP team due
to the sites’ fast-paced adaptation to changes in the ACVL.
Table VIII summarizes the results of applying CV-INSPECTOR
(with ACVL) on these sites. Out of these sites, we note that 5
sites are detected as “CV” and the remaining 355 as “No CV,”
again with high precision. This ﬁnding shows that even the
sites that are closely monitored to be addressed by the ACVL
team can successfully circumvent the adblocker. Notably, if we
consider only the 190 sites that we labeled as human labeling
effort, then CV-INSPECTOR was able to save up to 98% of
the work for ACVL curators by predicting 188 sites correctly.
Thus, CV-INSPECTOR can help with continuously monitoring
these sites at a high frequency.
VI. DISCUSSION AND FUTURE DIRECTIONS
Summary. In this paper, we studied an emerging threat in
the advertising ecosystem: circumvention (CV) services that
help publishers bypass adblockers and re-injects ads. CV
services are sophisticated, opaque for the user, and exploit
fundamental weaknesses of adblockers’ design and the open-
source nature of anti-CV community efforts (exempliﬁed by
the anti-CV list). Although there has been increasing anecdotal
evidence about adoption of circumvention in the wild, to the
best of our knowledge, ours is the ﬁrst
large-scale study
of the state of circumvention arms race. We develop CV-
INSPECTOR: a methodology for automatically crawling sites
of interest and a classiﬁer that can accurately detect whether a
site successfully circumvent the adblocker or not. We envision
that CV-INSPECTOR will serve as an automation tool for ﬁlter
list curators to help them focus their inspection efforts in
discovering new sites that employ circumvention in the wild
and in monitoring sites of interest continuously in the arms
race between circumvention and anti-CV ﬁlter rules.
Open Source Tools. We plan to make CV-INSPECTOR avail-
able to the community at [72]. This will include the data sets
(including our labeled dataset of top-20K crawled sites), crawl-
ing instrumentation (shareable as Amazon Machine Images
[15]), and the trained classiﬁer.
Limitations. There are limitations in our design and imple-
mentation. First, CV-INSPECTOR uses differential analysis that
relies on differences between the “No Adblocker” and “With
Adblocker” cases. If sites exhibit no actual differences in the
two cases, then CV-INSPECTOR will not be able to detect
circumvention. For example, searchenginereports.net already
includes circumvented ads in the DOM structure of the “No
Adblocker” case but only hidden. When it detects an adblocker
affecting its ads, it will simply show the backup ads that were
already there. Second, CV-INSPECTOR only considers circum-
vention that appears without user interaction. For instance,
shahid4u.cam displays no visual ads to the user, but when the
user clicks on a link, it will redirect the user to an ad before
showing the real content. More details on implementation
choices and limitations are provided in Sec. IV-A3.
Future Directions. We plan to further automate ﬁlter rule
generation and help anti-CV authors, by building on two op-
portunities already provided by CV-INSPECTOR. First, our dif-
ferential analysis already uncovers web requests that are related
to circumvention. Consider the spring.org.uk example: CV-
INSPECTOR already pinpoints all randomized paths and sub-
domains of podfdch.com. Using that information, a ﬁlter list
author can simply create a ﬁlter rule such as “*.podfdch.comˆ”
or any variations of its subdomains and paths if there are
common preﬁxes and sufﬁxes like “||podfdch.com/erej*”. Sec-
ond, our feature extraction already dynamically generates CSS
selectors of ad locations where re-injection can happen. Filter
list authors can translate them into DOM element hiding rules,
as described in Table I. They can infer the effectiveness of the
selectors — the more elements that match, the more ads the
selectors will affect.
It also remains to be seen how robust CV-INSPECTOR is
in the presence of ever-changing circumvention obfuscation
techniques. Our intuition is that the features used by CV-
INSPECTOR (e.g., randomness in an obfuscated path) are
inherently more long-lived and harder to evade than the exact
rules used by ﬁlter lists (e.g., the actual randomized string in
the path). It would be interesting to characterize the time scales
of this arms race.
Feature engineering can also be improved. We can consider
new features (e.g. extracted from JS) and improve existing
features (e.g. the way we capture DOM mutation, by taking
into account
the DOM graph structure in the differential
analysis). With respect to JS in particular, the current version
of CV-INSPECTOR does not take into account JS features on
purpose, because CV providers heavily obfuscate JS, which
makes differential analysis challenging. As shown in Fig. 1(b),
this involves retrieving new ad content (web requests) and
displaying the ad to the user at the end (DOM structure). The
technique that JS utilizes to re-inject ads back upon the page
does not matter: as long as CV-INSPECTOR can recognize the
ﬁnal DOM structure, it can still detect circumvention.
Overall, we consider CV-INSPECTOR to be the ﬁrst sig-
niﬁcant step towards automating aspects of the defense (ad
blockers, ﬁlter list authors’ effort) against circumvention by
showing that it can reduce human labeling efforts by 98%.
The longer term goal is to fully automate the defense against
circumvention through detection and ﬁlter list generation.
16
ACKNOWLEDGEMENTS
This work is supported in part by NSF Awards 1815666
and 1715152, 1815131, 1954224. We would like to thank our
NDSS shepherd, Sooel Son, and the anonymous NDSS review-
ers, for their constructive and detailed feedback. We would also
like to thank UCI undergraduate students Qingchuan Yang and
Yiyu Qian, who helped inspect and label the GT data set. Last
but not least, the authors would like to thank eyeo [34], for
providing the Adblock Plus Monitoring data set; special thanks
to Oleksandr Paraska, Uwe Bernitt, and Shwetank Dixit, for
sharing their insights on circumvention.
[18]
[19]
[20]
[21]
“The Better Ads Standards,” https://www.betterads.org/standards, Better
Ads.
“Blockadblock — stop losing ad revenue,” https://blockadblock.com/,
BlockAdBlock, (Accessed on 05/04/2020).
“2020 adblock report – blockthrough,” https://blockthrough.com/2020/
02/06/2020-adblock-report-3/, Blockthrough, February 2020, (Accessed
on 03/18/2020).
“brave/ad-block: Ad block engine used in the brave browser for abp
ﬁlter syntax based lists like easylist.” https://github.com/brave/ad-block,
Brave, May 2020, (Accessed on 06/21/2020).
[22] Q. Chen, P. Snyder, B. Livshits, and A. Kapravelos, “Improving web
content blocking with event-loop-turn granularity javascript signatures,”
2020.
REFERENCES
[1]
[2]
[3]
[4]
[5]
[6]
[7]
[8]
[9]
[10]
[11]
[12]
“The Acceptable Ads Standard,” https://acceptableads.com/standard,
Acceptable Ads.
“Adblock warning removal list,” https://easylist-downloads.adblockplus.
org/antiadblockﬁlters.txt, Adblock Plus, (Accessed on 07/10/2020).
“Taboola whitelisting too annoying, turned off acceptable ads,” https:
//adblockplus.org/forum/viewtopic.php?f=17&t=50287, Adblock Plus,
January 2017, (Accessed on 05/04/2020).
“ABP anti-circumvention ﬁlter list ,” https://github.com/abp-ﬁlters/abp-
ﬁlters-anti-cv, Adblock Plus, 2019, (Accessed on 05/09/2019).
“Adblock plus — the world’s # 1 free ad blocker,” https://adblockplus.
org/, Adblock Plus, 2020, (Accessed on 07/22/2020).
“Contributors to abp-ﬁlters/abp-ﬁlters-anti-cv,” https://github.com/abp-
ﬁlters/abp-ﬁlters-anti-cv/graphs/contributors, Adblock Plus, May 2020,
(Accessed on 05/21/2020).
“Anti-adblock platform - addefend.com,” https://www.addefend.com/en/
platform/##why-anti-adblock-inventory, AdDefend, 2020, (Accessed
on 03/18/2020).
“AdGuard Scriptlets and Resources ,” https://github.com/AdguardTeam/
Scriptlets, AdGuard, 2019, (Accessed on 05/09/2019).
“Adguard — world’s most advanced adblocker!” https://adguard.com/
en/welcome.html, AdGuard, 2020, (Accessed on 07/22/2020).
“Adguardextra: Adguard extra is designed to solve complicated
cases when regular ad blocking rules aren’t enough.” https://
github.com/AdguardTeam/AdGuardExtra, AdGuard, 2020, (Accessed