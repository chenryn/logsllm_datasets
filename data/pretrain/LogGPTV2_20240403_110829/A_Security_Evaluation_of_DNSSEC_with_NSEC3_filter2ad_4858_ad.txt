exercised. To prevent state-space explosion in Murϕ, only
hostnames recognized by the modeled resolver, i.e., name1
through name6, are used by the attacker model.
1. Attacker may overhear any packets intended for the au-
thoritative, TLD, or root server.
2. Attacker may record any reply packets to the resolver.
3. Attacker may modify any recorded reply packet and
resend them to the resolver. However, the attacker may
not compromise cryptography, thus limiting its packet
modiﬁcation capabilities to the following:
(a) Attacker may modify any header bits
(b) Attacker may modify the Question section.
(c) Attacker may strip any number of RRs from a
reply, including RRSIGs for other RRs.
(d) Attacker may add any number of recorded A,
NSEC3, DS, NS, or RRSIG RRs to a reply, so
long as the added RRs were not modiﬁed by the
attacker.
(e) Attacker may create authoritative A, NSEC3, and
DS RRs with corresponding RRSIGs signed by
the attacker’s own key, and add them to a reply.
(f) Attacker may modify the contents of any A or NS
glue record.
4.5 Security Invariants
We run the DNSSEC model in Murϕ to check if any reach-
able state violates any security invariants. These invari-
ants, which characterize the intended security properties of
DNSSEC, are all logical expressions based on the state of
the local recursive resolver. The ﬁrst set of invariants checks
that the local resolver has not recorded an spoofed answer
for one of the queried names. Thus, if the answer to name[1-
6] is valid, its answer must be the value intended by the
authoritative server: An A RR with the correct address for
name 1, an indication of secure delegation with the proper
DS for name 2, indications of insecure delegation with the
correct child zone address for names 3 and 4, and indica-
tions of non-existence of names 5 and 6.
Another invariant checks that no key other than the correct
TLD and authoritative zone keys become accepted in re-
solvers attested cache. The next invariants check that the
local resolver’s knowledge of the addresses of the TLD and
authoritative servers have not been spoofed.
The last invariant checks for the integrity of the attestation
chain. We feel that it is a desirable property that a record be
considered valid at the local recursive resolver for only as
long as all of the other records that form this record’s attes-
tation chain back to the trust anchor remain valid. For ex-
ample, for an A RR with owner name www.example.com.,
the RR attestation chain is [1 “. DNSKEY” signs→ 2 “com.
DS+RRSIG” signs→ 3 “com. DNSKEY” signs→ 4 “exam-
ple.com. DS” signs→ 5 “example.com. DNSKEY” signs→ 6
“www.example.com. A+RRSIG”]. In our model, this maps
to the invariant that while any of the query answers at the
resolver are valid (representing 6), none of auth DNSKEY
(5), auth DS (4), tld DNSKEY (3), or tld DS (2) should ex-
pire, since this would break the attestation chain to the trust
anchor.
4.5.1 Temporal Inconsistency Discovered
tions proposal will be standardized in the RFC itself.
The attestation chain temporal integrity invariant is in fact
violated during our run of Murϕ. The DNSSEC proto-
col only speciﬁes temporal constraints between TTL of a
RR and the signature validity period of its corresponding
RRSIG; there are no constraints between the TTL of an RR
and the validity period of another signature in its attestation
chain. Thus a signature within the attestation chain may ex-
pire before the RR to which it is suppose to attest. This may
cause stale data to persist in the DNS distributed database
longer than desired, which is dangerous in the case of key
compromise.
Using the example above, consider the case where the key
of “example.com.” is compromised, leading to a signed “ex-
ample.com.” DS+RRSIG that validates a key controlled by
the attacker. If the TTLs of RRs under the authority of “ex-
ample.com.”, such as the A RR for “www.example.com.”,
depended upon the validity of all of the signatures tracing
back to the trust anchor, this period of compromise would
at least be bound by the expiration of “example.com.” DS
during the routine key rollover for “example.com.”. How-
ever, if RRs for “example.com.” depend only on the expira-
tion of their associated RRSIG, then the attacker may create
RRSIGs with arbitrarily long validity periods, extending the
period of compromise for RRs under the authority of “ex-
ample.com.” indeﬁnitely, even past key rollover.
Similarly, this example also illustrates another undesirable
trait of the DNSSEC protocol: the lack of support for key
and signature revocation. Assume that the key compromise
has been discovered by the operators of “example.com” and
they roll over the “example.com” key as a result. A recur-
sive resolver caching the A RR of “www.example.com.”
signed with the compromised key may continue to serve
the RR to its users for the entire signature validity period
set by the attackers. Instead, we suggest that the resolver
check for key revocation by periodically validating the sig-
natures forming an attestation chain against the current zone
keys.
Thus, we propose that resolver logic be strengthened be-
yond RFC 4033’s recommendations. The resolver cache
should specify that a RRSet may not have TTL expiration
time after the expiration time of ANY signatures that form
its attestation chain, not just the RRSIG directly associ-
ated with the RRSet. Furthermore, the resolver should also
periodically validate (perhaps with a period of hours) that
the signatures forming the attestation chain of all signed
RRSet within its cache remains valid against a fresh copy
the zone keys. Note that in the normal case, without key-
compromise, this only adds network trafﬁc to re-acquire
zone keys, which should be a small fraction of the resolver
cache, every period. We also hope that these recommenda-
5 DNSSEC Vulnerabilities and
Guarantees
5.1
Inherent Vulnerabilities
Our Murϕ model checking found several signiﬁcant vulner-
abilities in the DNSSEC protocol which may be exploitable
by a network attacker. The vulnerabilities are described in
this section and also summarized in Table 1.
5.1.1 Glue Record Redirection Vulnerability
The ﬁrst vulnerability occurs due to the forgeability of glue
records used in delegations, making all delegations vul-
nerable to redirection. Since attackers may modify un-
signed glue records, Murϕ found invariant violations result-
ing from the attacker changing TLD server and authorita-
tive server addresses stored in local recursive resolver state.
However, even with this server redirection, since the TLD
and authoritative zones in our model are reached by se-
cure delegations, Murϕ did not ﬁnd forgery of any signed
query answers from the authoritative zone at the recursive
resolver. See Section 5.2 for details of the model checking
result. The mechanism for this protection was previously
described in Section 3.7, which also notes how this redirec-
tion vulnerability allows the attacker to more easily hinder
resolver performance.
Glue record manipulation by the attacker also led to the vi-
olation of invariants checking the integrity of insecure del-
egations returned by the authoritative zone. Redirection of
an insecure delegation, which always points to a standard
DNS child zone, is the exact mechanism of the Kaminsky
attack. Data served by the attacking server is accepted and
cached at the recursive resolver without validation, expos-
ing the end-user to cache poisoning. Such an attack can
only be prevented by the adoption of DNSSEC by the child
zone, which secures the delegation.
5.1.2
Inter-operation with DNS Vulnerability
To generalize the consequences of inter-operation with stan-
dard DNS zones, we note that a DNSSEC local recursive
resolver cannot provide secure answers to the stub resolver
unless the resolution process queries only DNSSEC zones
starting at the trust anchor. An intervening standard DNS
zone requires an insecure delegation, meaning the local
DNSSEC resolver will not be able to form the full attes-
tation chain required to verify the ﬁnal answer from the
trust anchor. Since it precludes veriﬁcation at the recursive
resolver, any DNS-DNSSEC inter-operation causes an in-
secure, forgeable answer to be passed to the stub resolver.
Since users are not informed of insecure query results due
to the current absence of software interface indicators, inter-
operation with DNS effectively exposes users trusting in
DNSSEC resolvers to attacker exploitation.
5.1.3 NSEC3 Opt-out Vulnerability
The next class of vulnerabilities result from the attacker be-
ing able to change the content of a DNSSEC reply packet
by subtracting or adding RRs. We found that the attacker
was able to convert an insecure delegation to a unauthen-
ticated denial-of-existence and vice-versa. To understand
this, recall from Table 4 that an insecure delegation using
opt-out requires the presence of an authoritative NSEC3
record with opt-out, its associated RRSIG, and A and NS
glue records, and that an unauthenticated denial of existence
requires an authoritative opt-out NSEC3 record and its as-
sociated RRSIG. The network attacker has the capability to
convert between these two response types simply by adding
or subtracting the glue records.
The conversion from insecure delegation to denial-of-
existence is useful for an attacker as a denial-of-service at-
tack that may linger on the local resolver due to its caching
of denial-of-existence responses. On the other hand, the
ability to insert an insecure delegation may be used by an
attacker to insert any arbitrary RR with an owner name that
hashes between the names on the NSEC3 RR.
an
next
name www.example.com and
For example, an attacker may insert an A RR for
opt-out NSEC3 with
spoof.example.com using
owner
name
mail.example.com, as long as ’spoof’ hashes between
’www’ and ’mail’. Contrary to comments in [7] suggesting
its insigniﬁcance, we will show that
this vulnerability
is exploitable by experimentally carrying out a browser
cookie-stealing attack detailed in Section 6. Attacks of this
nature may only be prevented by the domain operator of
“example.com.” not using opt-out and including all owner
names into the NSEC3 chain.
5.1.4 Mismanaged Signature Expiration
In this sub-section, we provide mitigation advice for a vul-
nerability, ﬁrst mentioned by Bernstein [11], which is actu-
ally another consequence of the lack of signature revocation
in DNSSEC. The vulnerability occurs when the signature
expiration of A RRSets and associated RRSIGs is misman-
aged. RRSIGs have a 30-day validity period according to
the default settings in BIND, and DNSSEC lacks a revoca-
tion mechanism that can hasten the expiration date. Sup-
pose that a domain owner decides to relinquish one set of
IP addresses in favor of another and creates new A RRSets
and RRSIGs. During the period when the RRSIGs asso-
ciated with the old A RRSet are still valid, if attackers gain
control of any IP address relinquished by the domain owner,
they will be able to replay a completely valid DNSSEC re-
sponse pointing an A RR at an attack server. This attack can
be completely mitigated by domain owners not relinquish-
ing IP addresses until they are certain all RRSIGs for RRs
pointing to these IP addresses have expired.
5.2 DNSSEC Guarantees from Model Checking
Completion
After removing the invariant that checked the integrity of
zone server addresses, the invariant that checked the in-
tegrity of the denial-of-existence expressed by NSEC3 with
opt-out, and the invariant that check the integrity of insecure
delegations, our Murϕ model ran to completion, exhausting
all possible network attack combinations, without violating
another invariant. The completion of execution implies that
the modiﬁed protocol, not containing opt-out NSEC3 or in-
secure delegations, contains no further vulnerabilities short
of cryptographic compromise. This means that, when ac-
quired by the resolver using a full chain of secure delega-
tions, signed existent DNSSEC RRs and signed non-opt-out
NSEC3 denials-of-existence are safe against forgery by the
network attacker described in our model, which is incapable
of key compromise.
5.3 Faulty Resolver Logic Vulnerabilities
DNSSEC security depends on correct implementation of
appropriate resolver logic. Section 5.1 described DNSSEC
vulnerabilities found even with correct resolver validation
logic – vulnerabilities inherent to the DNSSEC protocol. To
demonstrate the importance of resolver logic to DNSSEC
implementation security, we will discuss some common
attack paths that become exploitable vulnerabilities with
faulty resolver logic. We begin with the attack paths and
then discuss how to prevent them with correct validation
logic.
Attackers may arbitrarily modify headers and add or sub-
tract individual RRs from DNSSEC replies, opening up
downgrade paths to DNS. For instance, an attacker that
strips all RRSIG, DS, and NSEC3 RRs from a DNSSEC
response packet will create a valid DNS packet. Also, an
attacker may modify unsigned packet contents to introduce
inconsistent information into reply packets. For example,
attackers may set the AD (Authenticated Data) in a reply
packet containing a forged RR with an invalid RRSIG, in
an attempt to cause the resolver to accept the indicated suc-
cess of remote validation and forgo its own validation. Fi-
nally, as previously stated, attackers may modify unsigned
RRs contained in the reply packet, such as the glue A
and NS RRs contained within the “additional” packet sec-
tion.
5.3.1 Eliminating Vulnerabilities By Attested Cache
Resolver Design
The resolver must thus be scrupulously designed to min-
imize susceptibility to attack by only trusting the validly
signed content of reply packets. A resolver must not ac-
cept valid DNS responses where DNSSEC responses are
expected, to eliminate downgrade attacks. Resolver logic
must also not trust header ﬁelds. As a consequence, each
resolver must perform its own veriﬁcation of RR data in
reply packets and not rely on upstream servers to indicate
validation and query success/failure.
In effect, to answer user RR queries for a particular zone,
the local recursive resolver must build an attested cache
containing both RRs authoritative to that zone and a full at-
testation chain from the trust anchor to the zone, using only
validly signed RRs contained in reply packets. Glue records
may only be used as guides for which DNSSEC server to
query next in a delegation and cannot be accepted into the
attested cache. (The resolver logic we outlined in Section
4.3.2 is an instance of this attested cache implementation
style.)
The importance of properly treating the unsigned records in
a reply was anecdotally demonstrated during the time that
this paper was being written, as a vulnerability was discov-
ered where BIND incorrectly added unsigned RRs from the
“additional” sections of DNSSEC responses to its cache [9].
The vulnerability was deemed a severe risk for DNSSEC
users of BIND.
Resolvers must only securely answer the user’s query when
all of the information necessary to answer queried RR
with integrity guarantee is contained within this attested
cache, for example when a matching RR with valid RRSIG
along with its full attestation chain exists or when the non-
existence of the queried RR can be proven using NSEC3
RRs with valid RRSIGs and full attestation chains. Secure
answers provided strictly from resolver attested cache are
guaranteed against forgery, short of attacker compromise of
zone keys, and end users may trust the integrity of resolver
answers indicating such authentication via the AD bit, if re-
ceived over a secure channel.
However, we again note that even a completely correct re-
solver cannot excise the inherent DNSSEC vulnerabilities
listed in Section 5.1.
5.4 NSEC3 Salt Weakness
As an aside which was previously mentioned, in the course
of studying the RFC 5155 for this work, we found its use of
salt to be inadequate. The cryptographic hashing of names
in NSEC3 takes a salt as a parameter, ostensibly to increase
the size of any dictionaries that may be computed. However,
RFC 5155 speciﬁes that the value of the salt is publicly ac-
cessible via DNSSEC RR lookup. Thus, any attacker may
obtain the salt to use as input into its dictionary computa-
tion, effectively negating the required increasing in dictio-
nary size. Thus, we urge readers not to consider the NSEC3
salt as a useful security enhancement.
6
Implemented Attack Experiment
In this section, we will describe how we utilized the NSEC3
opt-out vulnerability described in the previous section and
also insecure delegations to insert forged names into an
experimental DNSSEC zone and steal browser-cookies.
While we recognize that a man-in-the-middle network at-
tacker may steal browser-cookies via means other than
DNSSEC, we exploit DNSSEC for cookie theft primar-
ily as a convenient demonstration that our observed pro-