No
Yes
No
No
No
Document
Privacy
Yes
Yes
Yes
No
No
No
No
Result
Veriﬁability Ranking
No
No
No
No
Yes
Yes
Yes
No
No
No
No
No
No
No
Table 1: Properties of Existing Security Schemes for Data Streaming Model
which features in d can be queried by particular users. Our CVPM
scheme is made up of six algorithms that are executed by the parties
in the model: Setup, UserReg, QueryGen, DataGen,
ServPro and UserDec.
Owner ﬁrst runs Setup to initialize the cryptographic setting
shared by all participants and generate its own secret key. To join
the system, a User ﬁrst registers with the Owner. If the User sat-
isﬁes the admission policy, the Owner executes UserReg to (i)
produce a secret for the User to encrypt her queries, and (ii) pro-
duce a secret that enables the Server to process the User’s queries
subsequently. Based on her interest, the User runs QueryGen to
generate the encryption Qu of her query q and deposits Qu with
the Server. No two users share the same secret. This ensures that
the encrypted queries are user-speciﬁc; in other words, identical
queries from two users would lead to different encrypted queries.
At runtime, the Owner generates a stream of documents as well
as the corresponding document vectors. For each newly published
document vector d, the Owner runs DataGen to produce an en-
crypted document vector D for the Server; D is common to all the
Users in the system. The Server then executes ServPro for each
registered query Qu and returns the encrypted correlation score v
to the corresponding User.
On receiving the response, the User runs UserDec with her
secret to recover v. We provide constraints that bound the search
space for v, so that its decryption is computationally feasible. A
User cannot use her secret to decrypt correctly the encrypted scores
intended for other users.
Adversarial model & security objectives The adversary could be
a Server that executes the protocol honestly but is curious to know
the document features and user queries, or cheats in computing the
document scores. The adversary could also be an unauthorized
party who managed to intercept and issue messages in the system.
We assume the adversary is rational in that it does not run denial-
of-service attacks. The security objectives include query privacy,
document privacy and veriﬁability, as deﬁned in the Introduction.
3.2 Solution Construction
Setup The Owner carries out the following initialization steps. It
ﬁrst generates two cyclic groups G and GT , both of order n = p1p2
where p1, p2 are distinct prime numbers, and g is a generator of G.
Furthermore, there exists a non-degenerate and efﬁcient bilinear
mapping ˆe : G × G → GT . Hence, G = (cid:104)g(cid:105) and GT = (cid:104)ˆe(g, g)(cid:105).
The Owner computes g1 = gp2, g2 = gp1, and h1 = ˆe(g1, g1),
h2 = ˆe(g2, g2). Let G1 = (cid:104)g1(cid:105) and G2 = (cid:104)g2(cid:105) denote two sub-
groups in G of order p1 and p2, respectively. The Owner then
selects x randomly from Zn, denoted as x ∈R Zn. The secret key
of the Owner is sk = (g1, h1, x). It publishes (G, g, n, g2, h2) to
enable the Server and Users to perform group operations in G.
User Registration The Owner executes Algorithm UserReg de-
scribed in Figure 2 to initialize the User’s state with {Au, hu, Ku},
and to update the Server with Bu.
Algorithm: UserReg
Input: sk; Output: {Bu} to Server, {Au, hu, Ku} to User
1. Select au, bu ∈R Zn such that au +bu = x mod n.
2. Compute Au = gau and Bu = gbu .
3. Select ku ∈R Zn; compute hu = hku
4. Securely send Bu to the Server;
and Ku = gku
1 .
1
securely send
{Au, hu, Ku} to the User.
Figure 2: User Registration by the Owner
Query submission With {Au, hu, Ku} from the Owner, the User
initializes her standing query request q = {qi}m
i=1 where qi ∈
[0, 2kq ) ⊆ Zp1, according to her interests; kq is the bit length of
each coordinate in q. She deposits the encryption Qu of q with the
Server as a standing query over the data stream. The algorithm for
the User’s query generation is described in Figure 3.
Algorithm: QueryGen
Input: Ku, q = {qi}m
1. Choose a random vector r = {ri}m
2. Compute vector Qu = {Qi}m
i=1; Output: Qu to Server, r to User
i=1 with ri ∈ Zn.
i=1 where Qi = Kqi
u gri
2 for
every i ∈ [1, m].
3. Securely send Qu to the Server.
Figure 3: Query Generation by Users
Data encryption For each document vector d = {di}m
i=1 where
di ∈ [0, 2kd ) ⊆ Zp1 and kd is the bit length of the coordinates in d,
the Owner prepares an encrypted document vector D by running
Algorithm DataGen described in Figure 4. D is the common doc-
ument ciphertext for all the users in the system. In the algorithm,
the Owner encrypts each di with a random number ti derived from
a fresh seed r, and H(.) is a secure one-way hash function.
Algorithm: DataGen
Input: sk, d = {di}m
i=1; Output: {D, C} to Server
1. Choose r ∈R Zn and compute C = gr.
2. Set ti = H(i, ˆe(gr, gx)) for every i ∈ [1, m].
3. Compute D = {Di}m
1 gti
2 .
4. Send {D, C} to the Server.
i=1 where Di = gdi
Figure 4: Data Generation by the Owner
Server processing On receiving encrypted document vector D, the
Server executes Algorithm ServPro shown in Figure 5 for all
the users in its service domain. Given registered standing query
Qu from a User, the algorithm ﬁrst computes a ciphertext of the
correlation score for the User, i.e., an encrypted form of the inner
product of d and q. Then, it computes a partial result to aid the
User in deciphering the correlation score.
User decryption The User executes Algorithm UserDec in Fig-
ure 6 to get the ﬁnal correlation score v. With each coordinate in
3 Algorithm: ServPro
Input: {D, C}, {Qu, Bu}; Output: {W, C, C1} to User
For every standing query Qu, perform the following steps:
1. Compute wi = ˆe(Di, Qi) ∀1 ≤ i ≤ m; then compute
W =(cid:81)m
i=1 wi.
2. Compute C1 = ˆe(C, Bu).
3. Send {W, C, C1} to the User.
Figure 5: Correlation Computation by the Server
d and q having bit length kd and kq respectively, v is in the range
of [0, 2kd+kq · mq) where mq ≤ m is the number of coordinates
that the User speciﬁed in q. However, the User may predeﬁne
a threshold t to ﬁlter out documents with low correlation scores,
which signify that they are too dissimilar to the User’s interest and
can be discarded without examination. This limits the search for v
to a narrower range [t, 2kd+kq · mq) in Step 5. Note that t is chosen
by and known only to the User.
Furthermore, when the document streaming rate is high, the User
may wish to monitor only the top-k documents within a sliding
window (of the most recent documents, or of documents that ar-
rived within the last several seconds). The correlation score vk of
the k-th highest ranking document provides another threshold to
limit the search for v. Therefore, the User only needs to search for
the score v of the new document within a bounded range:
v ∈ [max{t, vk}, 2kd+kq · mq)
(1)
The constraints in the formula enable the User to avoid a full dis-
crete logarithm computation for v, by exploiting secret application-
speciﬁc values t, vk and mq which only the User knows.
If v
is found, the User may request for the actual document from the
Owner; otherwise, the User ignores the document.
Algorithm: UserDec
Input: {W, C, C1}, {r, hu, Au}; Output: v
i=1 riti.
3. Compute R =(cid:80)m
1. Compute C2 = ˆe(C, Au) and s = C1C2.
2. For 1 ≤ i ≤ m, compute ti = H(i, s).
4. Compute W (cid:48) = W/hR
2 .
5. Check whether there exists v ∈ [max{t, vk}, 2kd+kq · mq)
u = W (cid:48), t is a relevance threshold, vk is the score
such that hv
of the current k-th result document, and mq is the number of
coordinates used in q.
queries satisﬁes mq (cid:28) m and is within a hundred or two. More-
over, kd and kq are also small. Thus, we expect the time and space
complexity of the baby-step giant-step procedure to be tolerable.
Additionally, the optimization opportunities described below often
allow the discrete logarithm computation to terminate early. We
will validate the practicality of the optimized UserDec algorithm
through experiments in Section 4.
(cid:109)
(cid:108)(cid:112)2kd+kq · mq
3.3.1 Optimizing Document Score Decryption
There exist several algorithms for solving the discrete logarithm
problem, such as the baby-step giant-step algorithm, the Pohlig-
Hellman algorithm and the index-calculus algorithm [9]. Although
the latter two are superior in asymptotic time complexity, they are
difﬁcult to optimize to take advantage of the constraints expressed
in Formula 1. Instead, we pick the baby-step giant-step algorithm
for the User’s discrete logarithm computation. The optimization
works as follows to ﬁnd v ∈ [max(t, vk), 2kd+kq · mq) satisfying
u = W (cid:48) in the UserDec algorithm.
hv
and v = c1 · τ + c0 for some
Let τ =
0 ≤ c1 < τ and 0 ≤ c0 < τ. Thus, h−c1τ
u . The
User creates beforehand a lookup table for (cid:104)hc0
u as
search key, for 0 ≤ c0 < τ. For each v, the User iteratively checks
whether h−c1τ
u W (cid:48) exists in the lookup table, decrementing c1 from
τ − 1 down towards (cid:98)max(t, vk)/τ(cid:99). The procedure can be sus-
pended after any iteration; as long as c1 is kept, the procedure can
be resumed subsequently.
Suppose that the User has a set of top-k documents in place
when he obtains the answer W (cid:48) for a new document d. He needs to
evaluate immediately whether its score v falls within [max(t, vk),
2kd+kq · mq). If so, d replaces one of the earlier documents in
the top-k result. If not, the User has established an upper bound
v = vk for v. The User also knows the earliest that d may be
considered for the top-k result again is when one of the current
top-k documents expires and vk changes.
u , c0(cid:105) with hc0
u W (cid:48) = hc0
Now suppose that in between document arrivals, the User has
several documents di for which the upper bound score vi = vk. In-
stead of recovering the actual score vi for each of those documents
in turn, the User will lower their vi’s uniformly (by decrementing
c1 in the computation of their document scores in unison). This
allows the User to fully decrypt the higher document scores ﬁrst,
and discover the more relevant candidates that are likely to replace
the next expiring document in the top-k result.
Figure 6: User Decryption
3.3.2 Computing Document Score in Memory Con-
strained User Devices
Where the Owner has speciﬁed access policies, W in Algorithm
ServPro and R in Algorithm UserDec would aggregate over
only features that the User is authorized to query.
Finally, if any input parameter to UserDec has been tampered
with, with overwhelming probability R would not match, so W (cid:48)
u = W (cid:48).
would have order n and there exists no v that satisﬁes hv
3.3 Decryption of Document Score
The UserDec algorithm requires a discrete logarithm in Step 5
to get the document score v. Although general discrete logarithm
is considered to be intractable for a large cyclic group, it is feasi-
ble for the User to ﬁnd v within the restricted range in Formula 1
with t, vk and mq which are known only to her. If the range for v
is narrow, the User can pre-generate a look-up table for v. If not,
the User executes the baby-step giant-step procedure, with space
and time complexities O((cid:112)2kd+kq · mq), to ﬁnd v. In our target
applications, typically the number of features that Users specify in
The optimization in Section 3.3.1 limits the search for the doc-
ument score as expressed in Formula 1, and is particularly helpful
when 2kd+kq · mq is large. However, the size of the lookup table
remains at (cid:100)(cid:112)2kd+kq · mq (cid:101) entries, which may exceed the avail-
able memory in user devices that are severely resource-constrained.
We now discuss how our extended baby-step giant-step procedure