values. After interpreting the module, the fourth phase further
transforms the module’s interface so that its client can only access
the names—e.g., methods, fields—it is allowed to access.
Base Transform: These transformations have a common struc-
ture that traverses objects recursively—a base transformation wrap,
which we review first. At a high level, wrap takes an object O and a
permission set p and returns a new object O′. Every field f of O is
wrapped with a method f ′ defined to enclose the permissions for f .
Effectively, f ′ implements a security monitor—a level of indirection
that oversees accesses to the field and ensures that they conform to
the permissions corresponding to that field. At runtime, f ′ checks
f ’s permission for the current access type: if the access is allowed,
it forwards the call to f ; otherwise, it throws a special exception,
AccessControlException, that contains contextual information
for diagnosing root cause—including the type of violation (e.g., R),
names of the modules involved, names of accessed functions and
objects, and a stack trace.
The result of applying the wrap transformation to the object
(returned by) serial is shown in Fig. 4a. The wrapper function
uses a Mir-built-in function σ that checks f ’s X permission (in code:
perm.X) for this particular type of access. If the check succeeds,
Mir calls the original dec, passing it the arguments of the call to
the dec wrapper; if the check fails, σ will throw an exception and
stop execution.
Context Creation: To prepare a new context to be bound to a li-
brary being loaded, Mir first creates an auxiliary hash table (Fig. 4b),
mapping names to newly transformed values: names correspond
to implicit modules—globals, language built-ins, module-locals, etc.
(Tab. 1); transformed values are created by traversing individual
values in the context using the wrap method to insert permission
checks.
User-defined global variables are stored in a well-known location
(i.e., a map accessible through a global variable named global).
…σ…(a) Object-ping fragment(b) Custom context creation(c) Context rebindingSession 6B: Web Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1828However, traversing the global scope for built-in objects is generally
not possible. To solve this problem, Mir collects such values by
resolving well-known names hard-coded in a list. Using this list,
Mir creates a list of pointers to unmodified values upon startup.
Care must be taken with module-local names—e.g., the module’s
absolute filename, its exported values, and whether the module
is invoked as the application’s main module: each module refers
to its own copy of these variables. Attempting to access them di-
rectly from within Mir’s scope will fail subtly, as they will end up
resolving to module-local values of Mir itself —and specifically, the
module within Mir applying the transformation. Mir solves this
issue deferring these transformations for the context-binding phase
(discussed next).
Fig. 4b shows the creation of serial’s modified context.
Context Binding: To bind the code whose context is being trans-
formed with the freshly created context, Mir applies a source-to-
source transformation that wraps the module with a function clo-
sure. By enclosing and evaluating a closure, Mir leverages JavaScript’s
lexical scoping to inject a non-bypassable step in the variable name
resolution mechanism.
The closure starts by redefining default-available non-local names
as module-local ones, pointing to transformed values that exist in
the newly-created context. It accepts as an argument the customized
context and assigns its entries to their respective variable names in
a preamble consisting of assignments that execute before the rest of
the module. Module-local variables (a challenge outlined earlier) are
assigned the return value of a call to wrap, which will be applied
only when the module is evaluated and the module-local value
becomes available. Mir evaluates the resulting closure, invokes it
with the custom context as an argument, and applies further wrap
transformations to its return value.
The result of such a source-to-source linking of serial’s context
real-world vulnerabilities? (§8.1)
is shown in Fig. 4c.
8 EVALUATION
To evaluate Mir, we apply it to hundreds of real-world npm pack-
ages, investigating the following questions:
• Q1 How effective is Mir at defending against attacks that exploit
• Q2 How much does Mir reduce the attack surface in terms of
• Q3 How compatible is Mir with existing code—i.e., what is the
• Q4 How efficient and scalable are Mir’s inference and enforce-
• Q5 How does Mir’s techniques compare to other techniques,
danger of breaking legacy programs? (§8.3)
privilege reduction? (§8.2)
ment components? (§8.4)
such as library debloating? (§8.5)
Implementation: Our implementation targets JavaScript pack-
ages in the Node.js ecosystem and is available via npm i -g
@andromeda/mir. The static analysis component, available also as
a standalone component at @andromeda/mir-sa, is implemented
as a compiler pass in the Google Closure Compiler [26], amounting
to about 2.1 KLoC. The runtime enforcement component, avail-
able also as a standalone component at @andromeda/mir-da, is
implemented in about 2.8 KLoC of JavaScript on top of Lya, a
Fig. 5: Overview of real-world vulnerabilities used to evaluate Mir’s
effectiveness in preventing vulnerabilities (Cf.§8.1).
coarse-grained dynamic analysis and instrumentation framework
for Node.js [78]. The permissions inferred by the static analysis
stage are combined with ones inferred by the load-time analysis
and then provided to the runtime enforcement component as JSON
files.
Libraries and Workloads: We apply Mir to hundreds of real-
world npm packages, using different sets of packages for different
research questions, depending on what is required for a specific
question. To address Q1, we apply Mir to real-world vulnerabili-
ties obtained by systematically going through all publicly known
vulnerabilities in npm packages [65].
For Q2 and Q3, we need extensive tests to be able to test com-
patibility. As not all of the Q1 libraries contain tests, and because
some contain tests that require an elaborate setup, we augment the
Q1 set with 50 popular packages [55] that provide comprehensive
test suites executable via npm test. The additional libraries also
answer Q2 and Q3 for modules that do not necessarily make use of
security-critical APIs. The 50 libraries range between 1–3.2K lines
of JavaScript code with extensive tests. For Q4, we apply the static
analysis to an additional 986 npm packages gathered from the most
depended-upon packages, which in total comprise 5,826,357 LoC.
Setup: Experiments were conducted on a modest server with 4GB
of memory and 2 Intel Core2 Duo E8600 CPUs clocked at 3.33GHz,
running a Linux kernel version 4.4.0-134. The JavaScript setup uses
Node.js v12.19, bundled with V8 v7.8.279.23, LibUV v1.39.0, and npm
version v6.14.8. Mir’s static inference runs on Java SE 1.8.0_251,
linked with Google Closure v20200927.
8.1 Real-World Vulnerability Defense (Q1)
This section evaluates Mir effectiveness at its ultimate goal—pre-
venting attackers from exploiting vulnerabilities. To obtain a large,
unbiased, and realistic set of vulnerabilities, we systematically go
through all publicly known vulnerabilities in npm packages [65]
and select those covered by our threat model (§3). Fig. 5 summarizes
the results of our analysis, Tab. 3 highlights a few cases outlined
later, and Tab. 7–8 in Appendix B show the full results.
Relevant Subset: Starting from all Snyk [65] vulnerabilities, we
first keep only vulnerabilities labeled as “arbitrary code execution”,
“remote code execution”, and “sandbox escape” (Fig. 5, top bar: 132).
We ignore other categories such as “malicious package”, “denial
of service”, and “use after free”, because they fall outside Mir’s
threat model. We then filter out 23 vulnerabilities for platforms
other than Node.js (e.g., Android, browser) or languages other than
JavaScript (e.g., PHP, Python), 33 misclassified vulnerabilities (e.g.,
63763323461526120255075100125Relevant SubsetCould Not ExploitCould Not InstallOutside Thread ModelOther PL/PlatformExploit ExistsExploit AddedDynamic Enforcement CrashesSuccessful DefenseDynamic Enforcement CrashesSession 6B: Web Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1829Tab. 3: Examples of vulnerabilities used in Q1, along with the permissions Mir infers for them, and whether Mir defends against the proof-
of-concept (PoC) exploit (Cf.§8.1). See Tab. 7–8 in Appendix B for the full list of vulnerabilities and their breakdown.
Name
Snyk categorization
Arbitrary Code Execution
ejs
Arbitrary Code Execution
grunt
Arbitrary Code Execution
pg
Sandbox Breakout
safe-eval
Arbitrary Code Execution
safer-eval
serialize-to-js CWE-502 Arbitrary Code Execution
Arbitrary Code Execution
static-eval
CWE
CWE-94
CWE-94
CWE-94
CWE-265
CWE-94
CWE-94
R W
22
25
9
1
4
17
1
135
192
105
9
24
38
39
X
64
101
41
5
14
23
25
I
14
22
22
1
3
7
14
RWXI Attack
PoC
235 Create file ejs-success Mir authors
340
177
16
45
85
79
Return Date.now
Print process.env
(Multiple)
(Multiple)
Execute ls
Print process.env
Snyk
Snyk
Snyk
Snyk
Snyk
Snyk
Defense
Yes
Yes
Yes
Yes
Yes
Yes
Yes
XSS, path traversal, sanitization), 6 modules we were not able to
set up, and 7 modules we were not able to exploit. We note that
we spent significant time on the last two classes, up to five hours
per vulnerable module to (i) set up the module, and (ii) create
or reproduce an exploit. Overall, we end up with 63 reproduced
vulnerabilities: 46 with exploits provided in the vulnerability report
and 15 with exploits that we newly created for vulnerabilities that
do not come with an exploit.
We apply Mir to the 63 vulnerable modules and check whether
the approach defends against the exploit. Mir’s static analysis works
on all of the libraries, but Mir’s dynamic enforcement crashes on
two libraries (even without applying the exploit): the vm2 package
applies itself complex runtime wrapping, not handled correctly by
Mir’s runtime wrapping, and the typed-function package affects the
Function prototype chain in a way that is currently not supported
by Mir. Mir successfully protects against all other 61 attacks to
vulnerable modules.
Examples: We show a few of these successfully defended attacks
on popular modules in Tab. 3, and proceed to highlight a couple of
noteworthy examples. Library serialize-to-js performs some form
of unsafe serialization; its PoCs either (1) import child_process to
call ls or id, or (2) invoke console.log. As none of these is part
of the library’s permission set, Mir disallows access to these APIs.
Libraries safe-eval and safer-eval check their input prior to calling
eval. Their PoCs either execute the id command to return the user
identity or print process.env, both of which Mir defends. The case
of static-eval is interesting because it accepts abstract syntax trees
(ASTs) rather than strings; the PoC cleverly passes process.env
crafted as AST through the Esprima parser—which Mir solves by
disallowing access to process.env.
We note that, for many of these attacks, Mir blocks the PoC
at multiple levels. For example, even if node-serialize’s import of
child_process was allowed, Mir would still block exec.
Take away: Mir defends against 61/63 real-world attacks on
vulnerable Node.js packages.
where a second attack targets the same library; seven libraries for
which we were not able to setup or run the test suite; two libraries
for which Mir crashes (same as Q1); and six libraries for which Mir
crashes on test cases (details in Tab. 7, Appendix B). We augment
this set with another 50 libraries that have extensive test suites, to
understand privilege reduction in modules that do not necessarily
use security-critical APIs. The total is 81 libraries.
The total number of
permissions per library
ranges between 2–658
(avg: 42.2), spread un-
evenly between 1–341
R (avg: 22.1), 0–29 W (avg:
3.3), 0–209 X (avg: 12.5),
and 0–87 I (avg: 4.1).
Privilege is reduced by
up to three orders of
magnitude, ranging between 3.5×–706× (avg: 143.48×). The privi-
lege reduction is high when developers use only a small fraction of
the available APIs, and thus it is inversely correlated to the library
size: smaller libraries see larger reduction in privilege. The figure
on the right shows results for the first ten libraries (alphabetically),
and Appendix C shows the full results for all libraries.
We manually inspect the inferred permissions to get a sense
of their security criticality. We define as security-critical, system-
wide permissions the union of X permissions to child_process.*,
X permissions fs.{read,write}file[Sync], and R permissions
to a subset of process.env. We also define security-concerning,
library-specific permissions the set of RWX permissions to unusual
field names.4 Our inspection indicates that after applying Mir, only
one library maintains permissions to security-critical, system-wide
interfaces. Additionally, only five libraries maintain permissions to
library-specific, security-concerning interfaces.
Take away: Mir reduces the attack surface by an average of
143.48×, usually blocking access to security-critical interfaces.
8.2 Privilege Reduction (Q2)
To quantify the extent to what Mir reduces the exploitable attack
surface, we measure the privilege reduction (§6) achieved by the
statically inferred permissions. We use all 31 libraries from the 63 Q1
attacks that we were able to set up for this experiment, excluding ten
libraries that do not have tests; seven duplicate libraries, i.e., cases
8.3 Compatibility Analysis (Q3)
To a large extent, backward-compatibility drives practical adoption
of tools such as Mir. If a tool requires significant effort to address
4In one library, react-dom, Mir disallows access to fields of an object called
__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.
277x258x99x215x143x35x143x215x173x      Permissions01020304050algebraarr-diffarr-flattenarray-lastarray-rangearray.chunkconcat-streamdeep-binddocument-readyfile-sizeIXWRSession 6B: Web Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1830Tab. 4: Compatibility across 81 libraries (Cf.§8.3).
Inferred permissions (avg.)
Compatibility:
Field access locations (out of 3,431)
Fully compatible packages (out of 81)
Test cases (out of 2,557)
Mir without
import-time
analysis
42.3
Full Mir
155.9
2,422 (70.59%)
58 (71.60%)
2,151 (84.12%)
3,400 (99.09%)
73 (90.12%)
2,541 (99.37%)
name property of the function’s constructor field—which implic-
itly accesses the same property from the top-level Function object,
which is not inferable by Mir’s combined analyses.
Take away: Mir correctly infers 99% of all accesses on a set of
widely used packages with extensive test suites, indicating a small
risk of breakage by applying Mir.
8.4 Efficiency and Scalability (Q4)
compatibility, chances are developers will avoid it despite any se-
curity benefits it provides. To investigate compatibility, we use the
same 81 npm libraries from Q2 and their test suites. Tab. 4 summa-
rizes the compatibility characteristics of testing these 81 libraries
using two Mir configurations, and Tab. 5 and 6 in Appendix A
break down compatibility results for the 31 Q1 libraries and the
additional 50 Q2 libraries.
Permitted Accesses: There is a total of 3,431 unique code loca-
tions where accesses are attempted, and full Mir correctly allows
3,400 (99.09%) of them. Counting repeated accesses, as many ac-
cesses are attempted multiple times during a single execution of a
program, Mir correctly allows 226,497 (99.98%) of 226,553 accesses
(not shown in Tab. 4). The reason repeated-access results look better
is that straightforward accesses, such as export or global objects,
are accessed multiple times, whereas difficult-to-infer accesses (see
below) are accessed only once during a program’s execution. As
a result, for 2,541 (99.6%) of all 2,557 tests, all field accesses are
correctly permitted by Mir.
Influence of Import-Time Analysis: An important element of
Mir’s inference is its assistance of static analysis with a dynamic
import-time analysis (§5.2). To understand the benefits of this ap-
proach, we compare the compatibility of full Mir with a variant
that does not use the dynamic import-time analysis (Tab. 4, col. 2).
The static analysis alone infers fewer permissions, which signifi-
cantly reduces Mir’s compatibility: the number of compatible field
access locations falls from 3,400 to 2,422, i.e., only 70.59% instead
of 99.09% of all field access locations are compatible. For example,
fs-promise dynamically computes wrappers for all methods pro-
vided by the built-in fs package; rather than explicitly naming all
fs methods, it computes them by traversing the object returned
by fs. Mir’s import-time analysis captures this traversal, correctly
assigning R and W permissions to all these fields.
Highlights of Remaining Incompatibilities: The remaining 31
(0.91%) unique accesses are not permitted by the full Mir, cor-
responding to 0.02% of total accesses (when including repeated-
accesses) and spread across 8 (9.88%) of libraries. The vast majority
of these incompatibilities are related to npm test loading keywords
from the module’s package.json. This loading is not inferable by
Mir’s combined static and import-time analyses, but does not occur
if a library is not under test or if the tests are not invoked via npm
test. Another class of incompatibilities is due to the higher-order
Function.prototype constructor, which is not visible to Mir’s
static analysis and is not invoked at import-time. For example, to
understand if a function is a generator is-generator reads the
Static Analysis: To evaluate the
efficiency and scalability of the static
analysis, we run it on 1,036 npm
packages that comprise 5,826,357
LoC. Mir’s static analysis operates
successfully on all packages with-
out errors, except for malformed
files on which the base Google Clo-
sure Compiler (i.e., without our anal-
ysis) also fails—e.g., files containing
syntax errors.
The analysis takes 42 minutes in
Min 1/4 2/4 3/4 Max
39 156 27,736
4
9,018
19
78 16,638
20
6
29 16,639
73 295 66,559
13
1
6
2
25
0
0
0
0
0
R
W
X
I
Σ:
Fig. 6: Number of inferred
RWXI permissions: 1/4, 2/4
and 3/4 represent the first
quartile, the median, and
the third quartile.
total, i.e., an average of 2.5 seconds per npm package. To put these
results into context, we also measure the performance of a popular