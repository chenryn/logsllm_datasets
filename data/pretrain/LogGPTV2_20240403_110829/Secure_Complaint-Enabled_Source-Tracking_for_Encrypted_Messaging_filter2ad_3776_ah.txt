https://signal.org/docs/specifications/doubleratchet/.
[26] Katitza Rodriguez and Seth Schoen. 2020. FAQ: Why Brazil’s Plan to Mandate
Traceability in Private Messaging Apps Will Break User’s Expectation of Pri-
vacy and Security. https://www.eff.org/deeplinks/2020/08/faq-why-brazils-plan-
mandate-traceability-private-messaging-apps-will-break-users.
[27] Prasanto K Roy. 2019. Why India wants to track WhatsApp messages. https:
//www.bbc.com/news/world-asia-india-50167569.
[28] Manish Singh. 2020. India likely to force Facebook, WhatsApp to identify the
originator of messages. https://techcrunch.com/2020/01/21/india-likely-to-force-
facebook-whatsapp-to-identify-the-originator-of-messages/.
[29] Manish Singh. 2020. WhatsApp is now delivering roughly 100 billion messages a
day. https://techcrunch.com/2020/10/29/whatsapp-is-now-delivering-roughly-
100-billion-messages-a-day/.
[30] Udbhav Tiwari
and Jochai Ben-Avie.
analysis:
Brazil’s fake news law harms privacy, security, and free expression.
https://blog.mozilla.org/netpolicy/2020/06/29/brazils-fake-news-law-harms-
privacy-security-and-free-expression/.
Mozilla’s
2020.
[31] Nirvan Tyagi, Paul Grubbs, Julia Len, Ian Miers, and Thomas Ristenpart. 2019.
Asymmetric Message Franking: Content Moderation for Metadata-Private End-
to-End Encryption. IACR Cryptol. ePrint Arch. 2019 (2019), 565.
[32] Nirvan Tyagi, Ian Miers, and Thomas Ristenpart. 2019. Traceback for End-to-End
Encrypted Messaging. In Proceedings of the 2019 ACM SIGSAC Conference on
Computer and Communications Security (London, United Kingdom) (CCS ’19).
Association for Computing Machinery, New York, NY, USA, 413–430. https:
//doi.org/10.1145/3319535.3354243
[33] Nik Unger, Sergej Dechand, Joseph Bonneau, Sascha Fahl, Perl Henning, Ian Gold-
berg, and Matthew Smith. 2015. SoK: Secure Messaging. In 2015 IEEE Symposium
on Security and Privacy. IEEE, San Jose, 232–249.
[34] Nik Unger and Ian Goldberg. 2015. Deniable Key Exchanges for Secure Mes-
saging. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and
Communications Security (CCS ’15). Association for Computing Machinery, New
York, NY, USA, 1211–1223. https://doi.org/10.1145/2810103.2813616
[35] Nik Unger and Ian Goldberg. 2018. Improved Strongly Deniable Authenticated
Key Exchanges for Secure Messaging. Proceedings on Privacy Enhancing Tech-
nologies 2018, 1 (Jan. 2018), 21–66. https://doi.org/10.1515/popets-2018-0003
[36] Jelle van den Hooff, David Lazar, Matei Zaharia, and Nickolai Zeldovich. 2015.
Vuvuzela: scalable private messaging resistant to traffic analysis. In Proceedings
of the 25th Symposium on Operating Systems Principles, SOSP 2015, Monterey, CA,
USA, October 4-7, 2015. Association for Computing Machinery, New York, NY,
United States, 137–152.
[37] Nihal Vatandas, Rosario Gennaro, Bertrand Ithurburn, and Hugo Krawczyk. 2020.
On the Cryptographic Deniability of the Signal Protocol. In ACNS 2020. Springer,
Rome, Italy, 188–209.
[38] S.R. Verschoor. 2020. double-ratchet: Pure Rust implementation of the Double
Ratchet algorithm. https://github.com/sebastianv89/double-ratchet.
A DEFERRED DEFINITIONS
A.1 Platform Confidentiality
The platform confidentiality game gives the adversary oracles
goodSend and goodRec for sending messages between honest users
and malSend and malRec to send a malicious from or to a mali-
cious user, respectively. We separate the sending and receiving of
messages into separate oracles to allow the adversary to launch
attacks that involve delivering message data to unintended recip-
ients or otherwise tampering with the message delivery process.
Additionally, the report oracle allows a user to report a message to
the platform.
To further strengthen the adversary, we allow for a platform
to create a set U𝑚𝑎𝑙 of platform-controlled users that can collude
with the platform using the getUser oracle passed with 𝑚𝑎𝑙𝑈 𝑠𝑒𝑟
set to true. We define the set of honest users Uℎ𝑜𝑛𝑒𝑠𝑡 as the set
of users not controlled by the adversary, each created by a call to
getUser with 𝑚𝑎𝑙𝑈 𝑠𝑒𝑟 set to false. These honest users are created by
running the newUser protocol with the adversary as the platform,
and adding the new user to the set of users only if the protocol is
successful. The adversary is given access to oracles send(·, 𝑈 , ·) and
receive(·, ·, 𝑈) for 𝑈 ∈ U𝑚𝑎𝑙 to send and receive messages from
malicious users in the underlying messaging scheme.
As in the user confidentiality game, messages are identified by a
unique identifier 𝑚𝑖𝑑, trees are identified by 𝑡𝑖𝑑, the identifier of
the message at their root. When set to ⊥, the 𝑡𝑖𝑑 value acts as a
flag for messages that can’t be revealed to be the adversary without
allowing it to trivially win the confidentiality game.
The game keeps track of messages sent and received in tables
𝑇𝑠𝑒𝑛𝑑 and𝑇𝑟𝑒𝑐, respectively. The table𝑇𝑎𝑢𝑡ℎ additionally keeps track
of authoring data (ad) received by honest users when they author
a new message. The goodSend oracle represents the challenge por-
tion of the game. It allows the adversary to choose two messages
𝑐0 and 𝑐1, one of which will actually be sent between two honest
users, and the adversary must guess which message was sent. The
𝑐𝑖s include an associated value 𝑐𝑖[type] that determines whether
they are new messages or forwarded messages. If the type is new,
then 𝑐𝑖 is simply a message plaintext to be sent. Otherwise, 𝑐𝑖 is
the 𝑚𝑖𝑑 value for a message to be forwarded.
A.2 Deniability
Here, we present an extended discussion of our deniability def-
initions discussed in Section 3.4, and present formalizations of
deniability for source-tracking schemes.
Deniability, or the guarantee that only the messaging platform
can prove that a sender sent a message, is a common goal of many
secure messaging applications [22]. Because source-tracking is de-
signed to be applied on top of these existing messaging applications,
it is important that source-tracking schemes preserve the messaging
application’s deniability guarantees.
One of the key settings where deniability is important is pro-
tection for whistleblowers who use the messaging application to
anonymously relay sensitive information. From this perspective,
deniability for source-tracking schemes becomes particularly im-
portant because we want to guarantee that not only the source of
the forwarded message can deny sending it, but also that interme-
diate users along the path who may have reported or forwarded
the message to an authority can deny this action if their messages
are compromised.
Prior works [10, 11, 13, 31, 33] have investigated the large space
of potential deniability definitions and their associated tradeoffs
with notions of authentication and unforgeability.
Session 5C: Messaging and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1497return ⊥
goodSend(𝑈𝑠, 𝑈𝑟 , 𝑐0, 𝑐1)
if 𝑈𝑠 ∨ 𝑈𝑟 ∉ Uℎ𝑜𝑛𝑒𝑠𝑡 :
𝑚𝑖𝑑 ←R {0, 1}𝑛
for 𝑖 ∈ {0, 1} :
if 𝑐𝑖 [type] = new :
𝑚𝑖 ← 𝑐𝑖
𝑡𝑖𝑑𝑖 ← 𝑚𝑖𝑑
else :
𝑚𝑖𝑑𝑖 ← 𝑐𝑖
if 𝑚𝑖𝑑𝑖 ∉ 𝑇𝑟𝑒𝑐 :
(𝑈 (𝑖)
if 𝑈 (𝑖)
, 𝑈 (𝑖)
𝑟 ≠ 𝑈𝑠 : return ⊥
𝑠
𝑟
return ⊥
, 𝑚𝑖, fd𝑖, 𝑡𝑖𝑑𝑖) ← 𝑇𝑟𝑒𝑐 [𝑚𝑖𝑑𝑖 ]
return ⊥
malSend(𝑈𝑠, 𝑈𝑟 , 𝑒)
if 𝑈𝑠 ∉ U𝑚𝑎𝑙 ∨ 𝑈𝑟 ∉ Uℎ𝑜𝑛𝑒𝑠𝑡 : return ⊥
(𝑚, fd) ← ⟨𝑈𝑟𝑒𝑐, A⟩(𝑈𝑠, 𝑈𝑟 , 𝑒, pk)
if fd = ⊥ :
𝑚𝑖𝑑 ←R {0, 1}𝑛
𝑇𝑟𝑒𝑐 [𝑚𝑖𝑑] ← (𝑈𝑠, 𝑈𝑟 , 𝑚, fd, 𝑚𝑖𝑑)
return 𝑚𝑖𝑑
malRec(𝑈𝑠, 𝑈𝑟 , 𝑐)
if 𝑈𝑠 ∉ Uℎ𝑜𝑛𝑒𝑠𝑡 ∨ 𝑈𝑟 ∉ U𝑚𝑎𝑙 : return ⊥
//case 1: c corresponds to a new message
if 𝑐[𝑡 𝑦𝑝𝑒] = 𝑛𝑒𝑤 : 𝑚 ← 𝑐
𝑃𝐶𝑂𝑁 𝐹 A,𝑏
𝑆𝑇 ,E
(pk, sk) ← KGen(𝑝𝑎𝑟𝑎𝑚𝑠)
𝑏′ ← AO (pk, sk)
return 𝑏′
getUser(𝑈 , 𝑖𝑠𝑀𝑎𝑙)
if 𝑈 ∈ Uℎ𝑜𝑛𝑒𝑠𝑡 ∪ 𝑈𝑚𝑎𝑙 :
return ⊥
if 𝑖𝑠𝑀𝑎𝑙 :
return 𝑈𝑚𝑎𝑙 .𝑎𝑑𝑑(𝑈)
ad ← ⟨𝑈𝑛𝑒𝑤, A⟩(𝑈 , pk)
if ad = ⊥ : return ⊥
𝑇𝑎𝑢𝑡ℎ[𝑈 ] ← ad
return 𝑈ℎ𝑜𝑛𝑒𝑠𝑡 .𝑎𝑑𝑑(𝑈)
𝑡𝑖𝑑 ← ⊥
return ⊥
return ⊥
if 𝑐𝑏 [𝑡 𝑦𝑝𝑒] = new :
if 𝑚0 ≠ 𝑚1 ∨ 𝑡𝑖𝑑0 ≠ 𝑡𝑖𝑑1 ∨ 𝑡𝑖𝑑0 = ⊥ ∨ 𝑡𝑖𝑑1 = ⊥ :
ad ← 𝑇𝑎𝑢𝑡ℎ[𝑈𝑠 ], 𝑚𝑠𝑔 ← (𝑚𝑏, ad)
(ad′, 𝑒) ← ⟨𝑈𝑎𝑢𝑡ℎ(𝑚𝑠𝑔), A⟩(𝑈𝑠, 𝑈𝑟 , pk)
𝑇𝑎𝑢𝑡ℎ[𝑈𝑠 ] ← ad′
else :
𝑚𝑠𝑔 ← (𝑚𝑏, fd𝑏)
(fd, 𝑒) ← ⟨𝑈𝑓 𝑤𝑑 (𝑚𝑠𝑔), A⟩(𝑈𝑠, 𝑈𝑟 , pk)
𝑇𝑟𝑒𝑐 [𝑚𝑖𝑑𝑏] ← (𝑈 (𝑏)
, 𝑈𝑠, 𝑚𝑏, fd, 𝑡𝑖𝑑𝑏)
report(𝑚𝑖𝑑)
if 𝑚𝑖𝑑 ∉ 𝑇𝑟𝑒𝑐 :
(𝑈𝑠, 𝑈𝑟 , 𝑚, fd, 𝑡𝑖𝑑) ← 𝑇𝑟𝑒𝑐 [𝑚𝑖𝑑]
//check if report contents can be revealed
if 𝑡𝑖𝑑 = ⊥ :
return ⟨𝑈𝑟𝑒𝑝 (fd), A⟩(𝑚, pk)
goodRec(𝑚𝑖𝑑, 𝑒)
if 𝑚𝑖𝑑 ∉ 𝑇𝑠𝑒𝑛𝑑 :
(𝑈𝑠, 𝑈𝑟 , 𝑚, 𝑒′, 𝑡𝑖𝑑) ← 𝑇𝑠𝑒𝑛𝑑 [𝑚𝑖𝑑]
if 𝑈𝑠 ∨ 𝑈𝑟 ∉ Uℎ𝑜𝑛𝑒𝑠𝑡 :
return ⊥
(𝑚′, fd) ← ⟨𝑈𝑟𝑒𝑐, A⟩(𝑈𝑠, 𝑈𝑟 , 𝑒, pk)
if fd = ⊥ :
𝑚𝑖𝑑′ ←R {0, 1}𝑛, if 𝑒 ≠ 𝑒′ : 𝑡𝑖𝑑 ← ⊥
𝑇𝑟𝑒𝑐 [𝑚𝑖𝑑′] ← (𝑈𝑠, 𝑈𝑟 , 𝑚, fd, 𝑡𝑖𝑑)
return 𝑚𝑖𝑑′
Figure 7: Platform confidentiality game and oracles. The adversary is also given access to send(·, 𝑈 , ·) and receive(·, ·, 𝑈) oracles for the
underlying encrypted messaging scheme for all adversary-controlled users 𝑈 ∈ U𝑚𝑎𝑙 .
ad ← 𝑇𝑎𝑢𝑡ℎ[𝑈𝑠 ], 𝑚𝑠𝑔 ← (𝑚, ad)
(ad′, 𝑒) ← ⟨𝑈𝑎𝑢𝑡ℎ(𝑚𝑠𝑔), A⟩(𝑈𝑠, 𝑈𝑟 , pk)
𝑇𝑎𝑢𝑡ℎ[𝑈𝑠 ] ← ad′
//case 2: c corresponds to a forward
else : 𝑚𝑖𝑑 ← 𝑐
if 𝑚𝑖𝑑 ∉ 𝑇𝑟𝑒𝑐 :
(𝑈 ′
if 𝑈 ′
𝑚𝑠𝑔 ← (𝑚, fd)
fd′, 𝑒 ← ⟨𝑈𝑓 𝑤𝑑 (𝑚𝑠𝑔), A⟩(𝑈𝑠, 𝑈𝑟 , pk)
𝑇𝑟𝑒𝑐 [𝑚𝑖𝑑] ← (𝑈 ′
𝑇𝑠𝑒𝑛𝑑 [𝑚𝑖𝑑] ← (𝑈𝑠, 𝑈𝑟 , 𝑒, 𝑚𝑏, 𝑡𝑖𝑑)
return 𝑚𝑖𝑑
𝑠, 𝑈 ′
𝑟 ≠ 𝑈𝑠 ∨ 𝑡𝑖𝑑 = ⊥ :
𝑟 , 𝑚, fd, 𝑡𝑖𝑑) ← 𝑇𝑟𝑒𝑐 [𝑚𝑖𝑑]
return ⊥
𝑠, 𝑈 ′
𝑟 , 𝑚, fd′, 𝑡𝑖𝑑)
return ⊥
return ⊥
return ⊥
𝑠
While there are many different flavors of deniability definitions
that could be extended to source-tracking, we chose to focus on def-
initions that were reasonable with respect to the current deniability
guarantees offered by secure messaging systems. Online deniabil-
ity, which guarantees a user can maintain deniability even when a
third party interacts with it during the protocol to gain evidence
of the user’s participation, is a strong form of deniability that has
been shown not to hold for the Signal messaging protocol [34, 35].
Instead, we focus on offline deniability, which guarantees a user can
deny participating in a conversation in the event that a transcript
of the exchange is provided to a third party. This form of deniabil-
ity has been shown to hold for the Signal protocol under strong
assumptions [33, 37]. We show that our source-tracking schemes
satisfy the strongest form of offline deniability using the simulated
transcript approach of [11], meaning that any user can forge a
transcript of a forwarding path and report that is indistinguishable
from a real transcript to a third party who holds the long-term keys
for all involved users, assuming that the underlying messaging
scheme satisfies this guarantee as well. This is stated formally in
the following definition:
Definition A.1 (Deniability of an Encrypted Messaging Scheme).
We say an encrypted messaging scheme
E = (send(𝑚, 𝑈𝑠, 𝑈𝑟), receive(𝑐𝑡, 𝑈𝑠, 𝑈𝑟))
satisfies deniability if there exists an efficient simulation algorithm
SimE(𝑈𝑠, 𝑈𝑟 , 𝑚) that produces a transcript of 𝑈𝑠 sending the mes-
sage 𝑚 using E to 𝑈𝑟 without access to the private keys of 𝑈𝑠 or