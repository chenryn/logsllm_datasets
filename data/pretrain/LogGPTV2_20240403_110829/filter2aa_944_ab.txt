   ssize_t (*aio_read)(...);
30
Filed away for reference
31
• What does a struct file look like?
-
(best case!)
f_u
frame boundary
remember, this is
at the start of a
SLAB!
f_u
f_path
f_path
f_op
f_count
f_ﬂags
each block is
one pointer size
f_mode
...
Filed away for reference
32
• What does a struct file look like?
-
(really really best case!)
f_u
frame boundary
remember, this is
at the start of a
SLAB!
f_u
f_path
f_path
f_op
f_count
f_ﬂags
f_mode
str
(hum de dum)
get_zeroed_page
comes from same
pool as SLABs
(more later)
...
Filed away for reference
33
•
What does a struct file look like?
-
Parts that the kernel can survive for a little while without darkened
f_u
frame boundary
remember, this is
at the start of a
SLAB!
f_u
f_path
f_path
f_op
f_count
f_ﬂags
...
f_mode
str
(hum de dum)
get_zeroed_page
comes from same
pool as SLABs
(more later)
Great news!
34
Great news!
35
• In essence -- struct file can be paved 
over at will
- ... just as long as we get a reasonable value into 
f_op.
f_u
f_u
f_path
f_path
f_op
f_count
f_ﬂags
...
f_mode
str
(hum de dum)
One for three
• Remember the three controls:
- Attacker-controlled length
- Attacker-controlled contents
- Attacker-controlled target
• Length is no longer an issue
- We can go over by a little ways without causing 
an immediate crash
36
Back to the content
• It is difﬁcult to write arbitrary content...
- ...but easy to predict content.
-
str += sprintf(str, "%s %s %d %d 0x%4.4x 0x%4.4x %d %d %d\n"
               batostr(&bt_sk(sk)->src),...);
• Usually looks like:
-
"00:00:00:00:00:00 00:00:00:00:00:00 2 0 0x0000 
0x0000 672 0 1” repeated a bunch
•
well, as many times as we want...
•What does this mean for us?
37
Back to the content
• Data that looks like this must end up in the 
ﬁle structure.
-
"00:00:00:00:00:00 00:00:00:00:00:00 2 0 0x0000 
0x0000 672 0 1”
- Substring must end up in f_op!
• What, exactly, can go in f_op?
- more importantly, can this go in f_op?
38
Addressability
•
f_op is just a pointer into kernel’s A.S.!
-
Remember: kernel’s A.S. is superset of user’s A.S.
-
f_op can be pointer to user memory
• Game plan
-
Map all substrings
-
ASCII representations should be valid pointers to f_op target.
•
 “00:0” -> 0x30303A30
•
 “0:00” -> 0x303A3030
•
 “0 0:” -> 0x3020303A
•
...
39
Now what?
• We’re done, right?
40
f_u
f_u
f_path
f_path
f_op
f_count
f_ﬂags
...
f_mode
str
(hum de dum)
00:00:00:00:00:00 00:00:00:00:00:00 2 0 0x0000 0x0000 672 0 1
owner = NULL
llseek = &attacker_ring0
read = &attacker_ring0
...
mapped in
userspace!
(mmap(), etc)
some other data
Now what?
• Not so fast.
- Real life, more likely:
41
f_u f_u
f_path
f_path f_op
f_count
f_ﬂags
f_mode
str
(hum de dum)
00:00:00:00:00:00 00:00:00:00:00:00 2 0 0x0000 0x0000 672 0 1
owner = NULL
llseek = &attacker_ring0
read = &attacker_ring0
...
Two for three
• Remember the three controls:
- Attacker-controlled length
- Attacker-controlled contents
- Attacker-controlled target
• Contents not controlled... but predicted.
- We now have length and contents handled.
42
Let’s be buddies
• How do we control the relative placement of frames?
-
(i.e., the target)
• Physical frames allocated on Linux using “buddy 
allocator”
-
Really old best-ﬁt allocator -- Markowitz, 1963
-
Works really well with fragmentation-reducing strategies 
like SLAB
- linux/mm/page_alloc.c
•
Run in god-damn fear.
43
Let’s be buddies
• Buddy allocator has important features
- Injects determinism and predictability into 
otherwise unordered frame allocation
- Localizes size-one frames when able
• Implementation details beyond scope of 
this talk
- You gotta pick one, and I think SLAB is cooler
44
Localizer approach
• Plan:
-
Fill up memory
•
Cause frames that would result in discontinuities to be paged to disk
-
Free memory to generate contiguous chunks
-
Allocate chunks of memory for struct ﬁles
-
Allocate buffer page
•
Opening sysfs ﬁle does this.  This is critical!
-
Allocate more chunks of memory for struct files
-
Fire!
45
Localizer approach
46
free
free
free
in use
free
in use
free
free
free
free
in use
free
free
free
free
free
free
in use
free
free
free
in use
free
free
free
free
in use
free
free
in use
free
free
Initial conﬁguration
Localizer approach
47
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
Allocate all memory for us
Localizer approach
48
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
Free and allocate to get contiguous phys chunks
Localizer approach
49
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
free
free
free
free
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
Release contiguous phys frames
Localizer approach
50
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ﬁles
ﬁles
str
ﬁles
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
Set up ﬁles, buffer, ﬁles
Localizer approach
51
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ﬁles
ﬁles
str
ﬁles
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
ours
Pwn
Three for three!
• Remember the three controls:
- Attacker-controlled length
- Attacker-controlled contents
- Attacker-controlled target
• Target became controlled by deterministic 
memory permutation.
• Result: system owned.
52
So close, guys
53
/*
 * The code works fine with PAGE_SIZE return but it's likely to
 * indicate truncated result or overflow in normal use cases.
 */
if (count >= (ssize_t)PAGE_SIZE) {
        print_symbol("fill_read_buffer: %s returned bad count\n",
                (unsigned long)ops->show);
        /* Try to struggle along */
        count = PAGE_SIZE - 1;
}
Demo
54
Conclusions
•
Difﬁcult-to-exploit bugs can be made easier by thinking 
about controlling your environment
-
Attacker-controlled length
-
Attacker-controlled contents
-
Attacker-controlled target
•
Just because it’s not easy, that doesn’t mean that it’s impossible!
55
Conclusions
•
Difﬁcult-to-exploit bugs can be made easier by thinking 
about controlling your environment
-
Attacker-controlled length
-
Attacker-controlled contents
-
Attacker-controlled target
•
Just because it’s not easy, that doesn’t mean that it’s impossible!
•
Side conclusion:
-
Phone vendors: we will win.  We have physical access; root on 
these phones will be ours.  Please stop your crusade to keep me 
from using my own phone.
55
Questions?
56