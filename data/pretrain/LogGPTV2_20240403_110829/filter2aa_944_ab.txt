### Optimized Text

#### Asynchronous I/O Read Function
```c
ssize_t (*aio_read)(...);
```

#### File Structure in Memory
**Reference:**
- **What does a `struct file` look like? (Best Case)**
  - `f_u`
  - Frame boundary (at the start of a SLAB)
  - `f_path`
  - `f_op`
  - `f_count`
  - `f_flags`
  - `f_mode`
  - Each block is one pointer size.
  - `str` (hum de dum)
  - `get_zeroed_page` comes from the same pool as SLABs (more later)

**Reference:**
- **What does a `struct file` look like? (Really Best Case)**
  - `f_u`
  - Frame boundary (at the start of a SLAB)
  - `f_path`
  - `f_op`
  - `f_count`
  - `f_flags`
  - `f_mode`
  - `str` (hum de dum)
  - `get_zeroed_page` comes from the same pool as SLABs (more later)

**Reference:**
- **What does a `struct file` look like? (Parts the Kernel Can Survive Without)**
  - `f_u`
  - Frame boundary (at the start of a SLAB)
  - `f_path`
  - `f_op`
  - `f_count`
  - `f_flags`
  - `f_mode`
  - `str` (hum de dum)
  - `get_zeroed_page` comes from the same pool as SLABs (more later)

**Great News!**

- **In Essence:** The `struct file` can be overwritten at will, as long as we get a reasonable value into `f_op`.

  - `f_u`
  - `f_path`
  - `f_op`
  - `f_count`
  - `f_flags`
  - `f_mode`
  - `str` (hum de dum)

- **Remember the Three Controls:**
  - Attacker-controlled length
  - Attacker-controlled contents
  - Attacker-controlled target
  - Length is no longer an issue; we can go over by a little without causing an immediate crash.

#### Content Writing and Predictability
- **Writing Arbitrary Content:**
  - It is difficult to write arbitrary content but easy to predict it.
  - Example:
    ```c
    str += sprintf(str, "%s %s %d %d 0x%4.4x 0x%4.4x %d %d %d\n",
                   batostr(&bt_sk(sk)->src), ...);
    ```
  - Usually looks like:
    ```
    "00:00:00:00:00:00 00:00:00:00:00:00 2 0 0x0000 0x0000 672 0 1" repeated a bunch
    ```

- **Implications:**
  - Data that looks like this must end up in the file structure.
  - A substring must end up in `f_op`.
  - What exactly can go in `f_op`?

#### Addressability
- **`f_op` is just a pointer into the kernel's address space:**
  - The kernel's address space is a superset of the user's address space.
  - `f_op` can be a pointer to user memory.
- **Game Plan:**
  - Map all substrings.
  - ASCII representations should be valid pointers to `f_op` targets.
  - Examples:
    - `"00:0"` -> `0x30303A30`
    - `"0:00"` -> `0x303A3030`
    - `"0 0:"` -> `0x3020303A`

#### Next Steps
- **Are We Done?**
  - Not so fast. In real life, it is more likely:
    - `f_u`
    - `f_path`
    - `f_op`
    - `f_count`
    - `f_flags`
    - `f_mode`
    - `str` (hum de dum)
    - `"00:00:00:00:00:00 00:00:00:00:00:00 2 0 0x0000 0x0000 672 0 1"`
    - `owner = NULL`
    - `llseek = &attacker_ring0`
    - `read = &attacker_ring0`
    - Mapped in userspace!

- **Two for Three:**
  - Remember the three controls:
    - Attacker-controlled length
    - Attacker-controlled contents
    - Attacker-controlled target
  - Contents are not controlled but predicted. We now have length and contents handled.

#### Controlling Relative Placement of Frames
- **How to Control the Relative Placement of Frames?**
  - Physical frames are allocated on Linux using the "buddy allocator."
  - Buddy allocator features:
    - Injects determinism and predictability into otherwise unordered frame allocation.
    - Localizes size-one frames when possible.
  - Implementation details are beyond the scope of this talk, but SLAB is cooler.

- **Localizer Approach:**
  - **Plan:**
    - Fill up memory.
    - Cause frames that would result in discontinuities to be paged to disk.
    - Free memory to generate contiguous chunks.
    - Allocate chunks of memory for `struct files`.
    - Allocate buffer page (opening sysfs file does this).
    - Allocate more chunks of memory for `struct files`.
    - Fire!

- **Initial Configuration:**
  - [Memory layout diagram]

- **Allocate All Memory for Us:**
  - [Memory layout diagram]

- **Free and Allocate to Get Contiguous Phys Chunks:**
  - [Memory layout diagram]

- **Release Contiguous Phys Frames:**
  - [Memory layout diagram]

- **Set Up Files, Buffer, Files:**
  - [Memory layout diagram]

- **Pwn:**
  - [Memory layout diagram]

- **Three for Three:**
  - Remember the three controls:
    - Attacker-controlled length
    - Attacker-controlled contents
    - Attacker-controlled target
  - Target became controlled by deterministic memory permutation.
  - Result: system owned.

#### Conclusions
- **Difficult-to-Exploit Bugs:**
  - Can be made easier by thinking about controlling your environment.
  - Attacker-controlled length, contents, and target.
  - Just because it’s not easy, that doesn’t mean it’s impossible.
- **Side Conclusion:**
  - Phone vendors: we will win. We have physical access; root on these phones will be ours. Please stop your crusade to keep me from using my own phone.

#### Questions?
- Any questions?