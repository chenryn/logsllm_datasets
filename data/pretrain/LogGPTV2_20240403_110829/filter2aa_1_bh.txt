### 代码示例优化

```javascript
if (top.location === self.location) {
  // 允许框架嵌套。
} else {
  // 禁止框架嵌套。
}
```

### 文本优化

#### 寻找嵌入自定义iframe的位置

如果上述情况成立，请在目标网站上寻找允许嵌入自定义iframe的位置。例如，许多社交媒体网站允许用户在其个人资料中分享链接。这些功能通常通过将URL嵌入到iframe中来显示链接信息和缩略图。其他常见的需要自定义iframe的功能包括嵌入视频、音频、图片、自定义广告和网页构建器。

#### 绕过点击劫持保护

如果您找到了其中一种功能，您可能可以通过使用**双重iframe技巧**绕过点击劫持保护。该技巧的工作原理是在受害者的域名中将恶意页面嵌入一个页面内。首先，构建一个包含受害者目标功能的页面，然后将整个页面放置在由受害者站点托管的iframe中（见图8-6）。

**图8-6**：您可以尝试将您的站点放在由受害者站点托管的iframe中，以绕过不当的框架检查。

这样，`top.location` 和 `self.location` 都指向 `victim.com`。防框架代码会认为最内层的 `victim.com` 页面被同一域中的另一个 `victim.com` 页面框架化，因此认为这种框架是安全的。中间的攻击者页面则不会被检测到。

#### 检查边缘情况

始终问自己，开发人员在实施保护机制时是否可能遗漏了任何边缘情况。你能利用这些边缘情况获得优势吗？

#### 示例报告

让我们来看一个示例报告。Periscope是一个实时流媒体视频应用，在2019年7月10日发现它存在点击劫持漏洞。您可以在[此处](https://hackerone.com/reports/591432/)找到公开的漏洞报告。该站点使用了`X-Frame-Options ALLOW-FROM`指令来防止点击劫持。这个指令允许页面指定允许其使用的框架URL，但这是一个过时的指令，许多浏览器不支持。这意味着，如果受害者使用不支持该指令的浏览器（如最新的Chrome、Firefox和Safari浏览器），那么在`https://canary-web.pscp.tv`和`https://canary-web.periscope.tv`子域名上的所有功能都容易受到点击劫持攻击。由于Periscope的帐户设置页面允许用户停用他们的帐户，攻击者可以框架设置页面并诱骗用户停用帐户。

#### 攻击升级

网站通常会在没有点击劫持保护的情况下提供页面。只要页面不包含可利用的操作，缺乏点击劫持保护就不被视为漏洞。然而，如果可被框架化的页面包含敏感操作，则点击劫持的影响将相应严重。

重点关注应用程序的最关键功能，以实现最大的业务影响。例如，假设一个网站有两个可框架页面。第一页包含一个按钮，可以转移用户的银行余额，而第二页包含一个按钮，可以改变用户在网站上的主题颜色。虽然这两个页面都包含点击劫持漏洞，但点击劫持漏洞对第一页的影响明显比对第二页的影响更大。

您还可以将多个点击劫持漏洞组合起来，或将点击劫持与其他漏洞链接在一起，以为更严重的安全问题铺平道路。例如，应用程序通常根据用户偏好发送或披露信息。如果您可以通过点击劫持更改这些设置，通常可以导致敏感信息泄露。假设 `bank.example.com` 包含多个点击劫持漏洞。其中一个允许攻击者更改账户的账单电子邮件，另一个允许攻击者向其账单电子邮件发送账户摘要。恶意页面的 HTML 如下所示：

```html
<!DOCTYPE html>
<html>
<head>
  <title>欢迎来到我的网站</title>
</head>
<body>
  <h1>欢迎来到我的网站！</h1>
  <p>请点击下面的按钮：</p>
  <form action="https://bank.example.com/change-email" method="POST">
    <input type="hidden" name="new_email" value="attacker@example.com">
    <input type="submit" value="提交">
  </form>
  <form action="https://bank.example.com/send-summary" method="POST">
    <input type="submit" value="发送摘要">
  </form>
</body>
</html>
```

你可以先将受害者的账单电子邮件更改为你的电子邮件，然后让受害者将账户摘要发送到你的电子邮件地址，以泄露账户摘要报告中包含的信息。根据账户摘要披露的内容，你可能可以收集与该账户相关的街道地址、电话号码和信用卡信息等数据！请注意，为使此攻击成功，受害者用户必须点击攻击者的网站两次。

#### 传递点击劫持负载

在漏洞赏金报告中，通常需要向公司展示真正的攻击者如何有效地利用您发现的漏洞。这意味着您需要了解攻击者如何在现实环境中利用点击劫持漏洞。

点击劫持漏洞依赖于用户互动。要使攻击成功，攻击者必须构建一个足够令用户点击的网站。通常情况下这不困难，因为用户在点击网页前通常不会采取预防措施。但如果你想让攻击更具说服力，请查看Social-Engineer Toolkit（[此处](https://github.com/trustedsec/social-engineer-toolkit/)）。这套工具可以帮助你复制知名网站并将其用于恶意目的。然后，你可以在复制的网站上放置iframe。

根据我的经验，将隐藏的按钮放置在“请接受本网站使用Cookies！”弹出窗口正上方的位置是最有效的。用户通常会不假思索地点击此按钮来关闭窗口。

#### 找到第一个点击劫持漏洞

既然你已经知道了点击劫持漏洞是什么，如何利用它们以及如何升级它们，那么就去找到你的第一个点击劫持漏洞吧！请按照以下步骤进行操作：

1. 在网站上识别状态更改操作，并记录其URL位置。标记只需要鼠标点击即可执行的操作，以便进一步测试。
2. 检查这些页面是否有`X-Frame-Options`、`Content-Security-Policy`标头和`SameSite`会话cookie。如果没有这些保护特性，页面可能易受攻击。
3. 创建一个HTML页面，将目标页面嵌入到iframe中，并在浏览器中加载该页面，看看页面是否已被框架化。
4. 通过在自己的测试帐户上执行模拟点击劫持攻击来确认漏洞。
5. 设计一种巧妙的方法将负载传递给最终用户，并考虑漏洞的更大影响。
6. 起草您的第一份点击劫持报告！

#### 跨站请求伪造 (CSRF)

跨站请求伪造（CSRF）是一种客户端技术，用于攻击Web应用程序的其他用户。利用CSRF，攻击者可以发送HTTP请求，假装来自受害者，在受害者的名义下执行不必要的操作。例如，攻击者可以在未经您许可的情况下更改您的密码或从您的银行账户转移资金。

CSRF攻击专门针对状态更改请求，如发送推文和修改用户设置，而不是泄露敏感用户信息的请求。这是因为攻击者将无法读取CSRF攻击期间发送的伪造请求的响应。让我们深入了解这种攻击如何运作。

##### 机制

大多数现代Web应用程序使用会话cookie对其用户进行认证和管理用户会话。当您首次登录网站时，Web服务器会建立一个新会话：它向您的浏览器发送与该会话相关联的会话cookie，并且该cookie可以向服务器证明您的身份。您的浏览器存储与该网站关联的会话cookie，并将它们与您发送到该网站的每个后续请求一起发送。这一切都是自动完成的，无需用户介入。

例如，当您登录Twitter时，Twitter服务器通过称为`Set-Cookie`的HTTP响应标头向您的浏览器发送会话cookie：

```
Set-Cookie: session_cookie=YOUR_TWITTER_SESSION_COOKIE;
```

您的浏览器接收会话cookie，存储它，并在向Twitter发送的每个请求中通过`Cookie` HTTP请求标头将其发送。这就是服务器如何知道您的请求是合法的：

```
Cookie: session_cookie=YOUR_TWITTER_SESSION_COOKIE;
```

使用您的会话cookie，您可以执行身份验证操作，如访问机密信息、更改密码或发送私信，而无需重新输入密码。要获取自己的会话cookie，请拦截浏览器在登录后发送到网站的请求。

现在假设Twitter网页上有一个“发送推文”的HTML表单。用户可以使用该表单输入他们的推文，并点击提交按钮发送它们（见图9-1）。

**图9-1**：一个允许用户发送推文的HTML表单的示例

请注意，Twitter实际上并不使用这种形式（且 Twitter 的实际“发送推文”功能不易受到 CSRF 攻击）。示例 HTML 表单的源代码如下：

```html
<h1>发送推文</h1>
<form method="POST" action="https://twitter.com/send_a_tweet">
  <input type="text" name="tweet_content" value="Hello world!">
  <input type="submit" value="提交">
</form>
```

标签代表HTML一级标题，而标签定义了HTML表单的开头和结尾。表单具有方法属性`POST`和动作属性`https://twitter.com/send_a_tweet`。这意味着当用户单击提交时，表单将向`https://twitter.com/send_a_tweet`端点提交POST请求。接下来，标签定义了一个带有默认值`Hello world!`的文本输入。当表单被提交时，用户在该字段中的任何输入都将作为POST参数`tweet_content`发送。第二个输入标签定义了提交按钮。当用户单击此按钮时，表单将被提交。

当您在页面上点击提交按钮时，您的浏览器将向`https://twitter.com/send_a_tweet`发送一个POST请求。浏览器将在请求中包含您的Twitter会话cookie。您可以在代理中查看表单生成的请求。它应该类似于这样：

```
POST /send_a_tweet
Host: twitter.com
Cookie: session_cookie=YOUR_TWITTER_SESSION_COOKIE
(POST request body)
tweet_content="Hello world!"
```

这个功能存在漏洞：任何网站，而不仅仅是 Twitter，都可以发起这个请求。想象一下，一个攻击者托管了自己的网站，显示一个类似于图 9-2 的 HTML 表单。

**图9-2**：攻击者利用CSRF漏洞实施攻击的一个HTML表单示例。

页面的源代码如下：

```html
<h1>请单击提交</h1>
<form method="POST" action="https://twitter.com/send_a_tweet">
  <input type="hidden" name="tweet_content" value="Follow @vickieli7 on Twitter!">
  <input type="submit" value="提交">
</form>
```

当您在此页面上单击“提交”按钮后，您的浏览器将发送一个POST请求。由于浏览器会自动将您的Twitter会话cookie包含在对Twitter的请求中，Twitter会将该请求视为有效，导致您的帐户发布推文“在Twitter上关注@vickieli7！这是相应的请求：”

```
POST /send_a_tweet
Host: twitter.com
Cookie: session_cookie=YOUR_TWITTER_SESSION_COOKIE
(POST request body)
tweet_content="Follow @vickieli7 on Twitter!"
```

即使此请求并非来自 Twitter，Twitter 仍会将其视为有效，因为它包含您的真实 Twitter 会话 cookie。这种攻击将使您每次单击恶意页面上的提交按钮时都发送推文。

这个攻击页面实际上并不是很有效：它需要受害者点击一个按钮，而大多数用户可能不会这么做。攻击者如何能够使攻击更加可靠？实际上，一个恶意的CSRF页面会看起来更像这样：