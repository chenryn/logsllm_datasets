if (top.location == self.location){
  // Allow framing.
}
else{
  // Disallow framing.
}
    If that is the case, search for a location on the victim site that allows you to embed custom iframes. For example, many social media sites allows users to share links on their profile. These features often work by embedding the URL in an iframe to display information and a thumbnail of the link. Other common features that require custom iframes are those that allow you to embed videos, audio, images, and custom advertisements and web page builders.
    如果是这样的话，请在受害者网站上寻找一个允许你嵌入自定义iframe的位置。例如，许多社交媒体网站允许用户在个人资料中分享链接。这些功能通常是通过嵌入URL来显示链接信息和缩略图的iframe实现的。其他常见的需要自定义iframe的功能包括允许你嵌入视频、音频、图片、自定义广告和网页建设者。
    If you find one of these features, you might be able to bypass clickjacking protection by using the
     double iframe trick
    . This trick works by framing your malicious page within a page in the victim’s domain. First, construct a page that frames the victim’s targeted functionality. Then place the entire page in an iframe hosted by the victim site (
     Figure 8-6
    ).
    如果您发现其中一种功能，您可能可以通过使用双重iframe技巧绕过点击劫持保护。这个技巧的工作原理是，在受害者的域名中将您的恶意页面放在一个页面中。首先，构建一个包含受害者目标功能的页面。然后将整个页面放置在受害者站点托管的iframe中（图8-6）。
       Figure 8-6
      : You can try to place your site in an iframe hosted by the victim site to bypass improper frame checking.
      图8-6：您可以尝试将您的站点放置在受害者站点托管的iframe中，以绕过不当的框架检查。
    This way, both
     top.location
    and
     self.location
    point to
     victim.com
    . The frame-busting code would determine that the innermost
     victim.com
    page is framed by another
     victim.com
    page within its domain, and therefore deem the framing safe. The intermediary attacker page would go undetected.
    这样，top.location和self.location都指向victim.com。防框架代码将确定最内层的victim.com页面被同一域中的另一个victim.com页面框架化，因此将视该框架化为安全的。中间人攻击页面将不被检测到。
    Always ask yourself if the developer may have missed any edge cases while implementing protection mechanisms. Can you exploit these edge cases to your advantage?
    始终问自己，开发人员在实施保护机制时是否可能错过了任何边缘情况。你能利用这些边缘情况获得优势吗？
    Let’s take a look at an example report. Periscope is a live streaming video application, and on July 10, 2019, it was found to be vulnerable to a clickjacking vulnerability. You can find the disclosed bug report at
     https://hackerone.com/reports/591432/
    .
     The site was using the
     X-Frame-Options ALLOW-FROM
    directive to prevent clickjacking. This directive lets pages specify the URLs that are allowed to frame it, but it’s an obsolete directive that isn’t supported by many browsers. This means that all features on the subdomains
     https://canary-web.pscp.tv
    and
     https://canary-web.periscope.tv
    were vulnerable to clickjacking if the victim was using a browser that didn’t support the directive, such as the latest Chrome, Firefox, and Safari browsers. Since Periscope’s account settings page allows users to deactivate their accounts, an attacker could, for example, frame the settings page and trick users into deactivating their accounts.
    让我们看一个示例报告。Periscope是一个实时流媒体视频应用，在2019年7月10日发现它存在点击劫持漏洞。您可以在https://hackerone.com/reports/591432/上找到公开的漏洞报告。该站点使用的X-Frame-Options ALLOW-FROM指令来防止点击劫持。这个指令允许页面指定允许它使用框架的URL，但这是一个过时的指令，许多浏览器不支持。这意味着如果受害者使用不支持该指令的浏览器（如最新的Chrome、Firefox和Safari浏览器），那么在https://canary-web.pscp.tv和https://canary-web.periscope.tv子域名上的所有功能都容易受到点击劫持攻击。由于Periscope的帐户设置页面允许用户停用他们的帐户，攻击者可以例如框架设置页面并骗取用户停用帐户。
    Escalating the Attack
    Websites often serve pages without clickjacking protection. As long as the page doesn’t contain exploitable actions, the lack of clickjacking protection isn’t considered a vulnerability. On the other hand, if the frameable page contains sensitive actions, the impact of clickjacking would be correspondingly severe.
    网站通常在没有点击劫持保护的情况下提供页面。只要该页面不包含可利用的操作，缺乏点击劫持保护就不被视为漏洞。然而，如果可被框架化的页面包含敏感操作，则点击劫持的影响将相应严重。
    Focus on the application’s most critical functionalities to achieve maximum business impact. For example, let’s say a site has two frameable pages. The first page contains a button that performs transfers of the user’s bank balance, while the second contains a button that changes the user’s theme color on the website. While both of these pages contain clickjacking vulnerabilities, the impact of a clickjacking bug is significantly higher on the first page than on the second.
    侧重于应用程序的最关键功能，以实现最大的业务影响。例如，假设一个网站有两个可框架页面。第一页包含一个按钮，可以转移用户的银行余额，而第二页包含一个按钮，可以改变用户在网站上的主题颜色。虽然这两个页面都包含点击劫持漏洞，但点击劫持漏洞对第一页的影响明显比对第二页的影响更大。
    You can also combine multiple clickjacking vulnerabilities or chain clickjacking with other bugs to pave the way to more severe security issues. For instance, applications often send or disclose information according to user preferences. If you can change these settings via clickjacking, you can often induce sensitive information disclosures. Let’s say that
     bank.example.com
    contains multiple clickjacking vulnerabilities. One of them allows attackers to change an account’s billing email, and another one allows attackers to send an account summary to its billing email. The malicious page’s HTML looks like this:
    你还可以将多个点击劫持漏洞组合起来，或将点击劫持与其他漏洞链接在一起，以为更严重的安全问题铺平道路。例如，应用程序通常根据用户偏好发送或披露信息。如果您可以通过点击劫持更改这些设置，通常可以导致敏感信息泄露。假设 bank.example.com 包含多个点击劫持漏洞。其中一个允许攻击者更改账户的账单电子邮件，另一个允许攻击者向其账单电子邮件发送账户摘要。恶意页面的 HTML 如下所示：
  Welcome to my site!
    You could first change the victim’s billing email to your own email, then make the victim send an account summary to your email address to leak the information contained in the account summary report. Depending on what the account summary discloses, you might be able to collect data including the street address, phone numbers, and credit card information associated with the account! Note that for this attack to succeed, the victim user would have to click the attacker’s site twice.
    你可以先将受害者的账单电子邮件更改为你的电子邮件，然后让受害者将账户摘要发送到你的电子邮件地址，以泄露账户摘要报告中包含的信息。根据账户摘要披露的内容，你可能可以收集与该账户相关的街道地址、电话号码和信用卡信息等数据！请注意，为使此攻击成功，受害者用户必须点击攻击者的网站两次。
    A Note on Delivering the Clickjacking Payload
    Often in bug bounty reports, you’ll need to show companies that real attackers could effectively exploit the vulnerability you found. That means you need to understand how attackers can exploit clickjacking bugs in the wild.
    在漏洞赏金报告中，通常需要向公司展示真正的攻击者如何有效地利用您发现的漏洞。这意味着您需要了解攻击者如何在现实环境中利用点击劫持漏洞。
    Clickjacking vulnerabilities rely on user interaction. For the attack to succeed, the attacker would have to construct a site that is convincing enough for users to click. This usually isn’t difficult, since users don’t often take precautions before clicking web pages. But if you want your attack to become more convincing, check out the Social-Engineer Toolkit (
     https://github.com/trustedsec/social-engineer-toolkit/
    ). This set of tools can, among other things, help you clone famous websites and use them for malicious purposes. You can then place the iframe on the cloned website.
    点击劫持漏洞依赖于用户互动。要使攻击成功，攻击者必须构建一个足够令用户点击的网站。通常情况下这不困难，因为用户在点击网页前通常不会采取预防措施。但如果你想让攻击更具说服力，请查看Social-Engineer Toolkit（https://github.com/trustedsec/social-engineer-toolkit/）。这套工具可以帮助你复制知名网站并将其用于恶意目的。然后，你可以在复制的网站上放置iframe。
    In my experience, the most effective location in which to place the hidden button is directly on top of a Please Accept That This Site Uses Cookies! pop-up. Users usually click this button to close the window without much thought.
    根据我的经验，将隐藏的按钮放置在“请接受本网站使用Cookies！”弹出窗口正上方的位置是最有效的。用户通常会不假思索地点击此按钮来关闭窗口。
    Finding Your First Clickjacking Vulnerability!
    Now that you know what clickjacking bugs are, how to exploit them, and how to escalate them, go find your first clickjacking vulnerability! Follow the steps described in this chapter:
    既然你已经知道了点击劫持漏洞是什么，如何利用它们以及如何升级它们，那么就去找到你的第一个点击劫持漏洞吧！请按照本章所述的步骤进行操作。
     Spot the state-changing actions on the website and keep a note of their URL locations. Mark the ones that require only mouse clicks to execute for further testing.
     Check these pages for the
      X-Frame-Options
     ,
      Content-Security-Policy
     header, and a
      SameSite
     session cookie. If you can’t spot these protective features, the page might be vulnerable!
     Craft an HTML page that frames the target page, and load that page in a browser to see if the page has been framed.
     Confirm the vulnerability by executing a simulated clickjacking attack on your own test account.
     Craft a sneaky way of delivering your payload to end users, and consider the larger impact of the vulnerability.
     Draft your first clickjacking report!
9
      Cross-Site Request Forgery
     Cross-site request forgery (
     CSRF)
    is a client-side technique used to attack other users of a web application. Using CSRF, attackers can send HTTP requests that pretend to come from the victim, carrying out unwanted actions on a victim’s behalf. For example, an attacker could change your password or transfer money from your bank account without your permission.
    跨站请求伪造（CSRF）是一种客户端技术，用于攻击Web应用程序的其他用户。利用CSRF，攻击者可以发送HTTP请求，假装来自受害者，在受害者的名义下执行不必要的操作。例如，攻击者可以在未经您许可的情况下更改您的密码或从您的银行账户转移资金。
    CSRF attacks specifically target state-changing requests, like sending tweets and modifying user settings, instead of requests that reveal sensitive user info. This is because attackers won’t be able to read the response to the forged requests sent during a CSRF attack. Let’s get into how this attack works.
    CSRF攻击专门针对状态更改请求，如发送推文和修改用户设置，而不是泄露敏感用户信息的请求。这是因为攻击者将无法读取CSRF攻击期间发送的伪造请求的响应。让我们深入了解这种攻击如何运作。
    Mechanisms
    Remember from
     Chapter 3
    that most modern web applications authenticate their users and manage user sessions by using session cookies. When you first log in to a website, the web server establishes a new session: it sends your browser a session cookie associated with the session, and this cookie proves your identity to the server. Your browser stores the session cookies associated with that website and sends them along with every subsequent request you send to the site. This all happens automatically, without the user’s involvement.
    大多数现代Web应用程序使用会话cookie对其用户进行认证和管理用户会话。当您首次登录网站时，Web服务器会建立一个新会话：它向您的浏览器发送与该会话相关联的会话cookie，并且该cookie可以向服务器证明您的身份。您的浏览器存储与该网站关联的会话cookie，并将它们与您发送到该网站的每个后续请求一起发送。这一切都是自动完成的，无需用户介入。
    For example, when you log into Twitter, the Twitter server sends your browser the session cookie via an HTTP response header called
     Set-Cookie
    :
    例如，当您登录Twitter时，Twitter服务器通过称为Set-Cookie的HTTP响应标头向您的浏览器发送会话cookie。
Set-Cookie: session_cookie=YOUR_TWITTER_SESSION_COOKIE;
    Your browser receives the session cookie, stores it, and sends it along via the
     Cookie
    HTTP request header in every one of your requests to Twitter. This is how the server knows your requests are legit:
    你的浏览器接收会话 cookie，并将其存储。在向 Twitter 发送的请求中，它通过 Cookie HTTP 请求标头将其发送。这就是服务器如何知道您的请求是合法的。
Cookie: session_cookie=YOUR_TWITTER_SESSION_COOKIE;
    Armed with your session cookie, you can carry out authenticated actions like accessing confidential information, changing your password, or sending a private message without reentering your password. To get ahold of your own session cookies, intercept the requests your browsers send to the site after you’ve logged in.
    使用您的会话cookie，您可以执行身份验证操作，如访问机密信息、更改密码或发送私信，而无需重新输入密码。要获取自己的会话cookie，请拦截浏览器在登录后发送到网站的请求。
    Now let’s say there’s a Send a Tweet HTML form on Twitter’s web page. Users can enter their tweets by using this form and clicking the Submit button to send them (
     Figure 9-1
    ).
    现在假设Twitter网页上有一个“发送推文”的HTML表单。用户可以使用该表单输入他们的推文，并点击提交按钮发送它们（图9-1）。
       Figure 9-1
      : An example HTML form that allows users to send a tweet
      图9-1：一个允许用户发送推文的HTML表单的示例
    Note that Twitter doesn’t really use this form (and Twitter’s actual Send a Tweet functionality isn’t vulnerable to CSRF attacks). The source code of the example HTML form looks like this:
    请注意，Twitter实际上并不使用这种形式（且 Twitter 的“发送推文”功能不易受到 CSRF 攻击）。示例 HTML 表单的源代码如下：
1 Send a tweet.
2 
  3 
  4 
    The
    tags denote a first-level HTML heading
     1
    , whereas the
    tags define the beginning and end of an HTML form
     2
    . The form has the
    method attribute
     POST
    and the action attribute
     https://twitter.com/send_a_tweet
    . This means that the form will submit a POST request to the
     https://twitter.com/send_a_tweet
    endpoint when the user clicks Submit. Next, an
    tag defines a text input with the default value of
     Hello world!
    . When the form is submitted, any user input in this field will be sent as a POST parameter named
     tweet_content
     3
    . A second input tag defines the
     Submit
    button
     4
    . When users click this button, the form will be submitted.
    标签代表HTML一级标题1，而标签定义了HTML表单2的开头和结尾。 表单具有方法属性POST和动作属性https://twitter.com/send_a_tweet。这意味着当用户单击提交时，表单将向https://twitter.com/send_a_tweet端点提交POST请求。接下来，标签定义了一个带有默认值Hello world！的文本输入。当表单被提交时，用户在该字段中的任何用户输入都将作为POST参数tweet_content 3发送。第二个输入标签定义了提交按钮4。当用户单击此按钮时，表单将被提交。
    When you click the Submit button on the page, your browser will send a POST request to
     https://twitter.com/send_a_tweet
    . The browser will include your Twitter session cookie with the request. You could see the request generated by the form in your proxy. It should look something like this:
    当您在页面上点击提交按钮时，您的浏览器将向https://twitter.com/send_a_tweet发送一个POST请求。浏览器将在请求中包含您的Twitter会话cookie。您可以在代理中查看表单生成的请求。它应该类似于这样：
POST /send_a_tweet
Host: twitter.com
Cookie: session_cookie=YOUR_TWITTER_SESSION_COOKIE
(POST request body)
tweet_content="Hello world!"
    This functionality has a vulnerability: any site, and not just Twitter, can initiate this request. Imagine that an attacker hosts their own website that displays an HTML form like
     Figure 9-2
    .
    这个功能存在漏洞：任何网站，而不仅仅是 Twitter，都可以发起这个请求。想象一下，一个攻击者托管了自己的网站，显示一个类似于图 9-2 的 HTML 表单。
       Figure 9-2
      : An example HTML form that an attacker uses to exploit a CSRF vulnerability
      图9-2：攻击者利用CSRF漏洞实施攻击的一个HTML表单示例。
    The page’s source code is the following:
    页面的源代码如下：
  Please click Submit.
    When you click the Submit button on this page, your browser will send a POST request. Because the browser automatically includes your Twitter session cookies in requests to Twitter, Twitter will treat the request as valid, causing your account to tweet
     Follow @vickieli7 on Twitter!
    Here’s the corresponding request:
    当您在此页面上单击“提交”按钮后，您的浏览器将发送一个POST请求。由于浏览器会自动将您的Twitter会话cookie包含在对Twitter的请求中，Twitter会将该请求视为有效，导致您的帐户发布推文“在Twitter上关注@vickieli7！这是相应的请求：”
POST /send_a_tweet
Host: twitter.com
Cookie: session_cookie=YOUR_TWITTER_SESSION_COOKIE
(POST request body)
tweet_content="Follow @vickieli7 on Twitter!"
    Even though this request doesn’t come from Twitter, Twitter will recognize it as valid because it includes your real Twitter session cookie. This attack would make you send the tweet every time you click Submit on the malicious page.
    即使此请求并非来自 Twitter，Twitter 仍会将其视为有效，因为它包含您的真实 Twitter 会话 cookie。这种攻击将使您每次单击恶意页面上的提交按钮时都发送推文。
    It’s true that this attack page isn’t very useful: it requires the victim to click a button, which most users probably won’t do. How can attackers make the exploit more reliable? Realistically, a malicious CSRF page would look more like this:
    这个攻击页面实际上并不是很有效：它需要受害者点击一个按钮，而大多数用户可能不会这么做。攻击者如何能够使攻击更加可靠？实际上，一个恶意的CSRF页面会看起来更像这样：