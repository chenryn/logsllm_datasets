# honggfuzz漏洞挖掘技术原理分析
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
作者：[houjingyi](https://github.com/houjingyi "@houjingyi") @360CERT
## 前言
Google开发的AFL(WinAFL)、libfuzzer和honggfuzz是最著名的三大基于代码覆盖率的fuzzer。网上关于AFL(WinAFL)的分析文章较多，而关于后两者的分析文章较少。之前泉哥已经写过关于honggfuzz的文章：[honggfuzz漏洞挖掘技术深究系列](https://bbs.pediy.com/thread-247954.htm)。本文是自己学习期间的一个笔记，读者也可当成对泉哥文章的一点补充。建议读者先阅读泉哥的文章，本文不会再涉及重复的内容。
相比其它的fuzzer，honggfuzz有以下特点：
1.含有多个fuzz真实程序(Apache/OpenSSL等等)的示例
2.支持持久型fuzzing(Persistent Fuzzing)模式，即长生命周期进程重复调用被fuzz的API
3.支持Linux/FreeBSD/NetBSD/MacOS/Windows(CygWin)/Android等几乎所有主流操作系统
4.支持基于软件和基于硬件(分支计数(branch counting)，指令计数(instruction counting)，Intel
BTS(Branch Trace Store)，Intel PT(Processor Tracing))的反馈驱动(Feedback-Driven)
5.使用底层接口监视进程(linux和NetBSD下使用ptrace)，与其它fuzzer相比更有可能从crash中发现并报告被劫持/忽略的信号(被fuzz的程序可能截获并隐藏)
## 整体结构
我们首先还是来看一下代码的整体目录。
android&mac&linux&netbsd&posix&arch.h：对不同操作系统的支持，头文件统一在arch.h，接下来分析的代码以linux为例。该目录下有这些文件：
  * arch.c：arch.h中函数的实现
  * bfd.c：基于bfd(Binary File Descriptor)实现解析符号/反汇编等功能
  * perf.c/pt.c：通过perf来使用PT，跟基于硬件的反馈驱动有关
  * trace.c：子进程暂停/终止时分析记录
  * unwind.c：基于libunwind实现栈回溯
  * docs：文档
  * examples：使用honggfuzz进行fuzz的一些例子
  * hfuzz_cc&libhfuzz：hfuzz_cc编译被fuzz程序的源代码，添加libhfuzz.a库。libhfuzz目录下有这些文件：
  * instrument.c：实现各种SanitizerCoverage需要的回调函数
  * linux.c：封装了libhfcommon/ns.c中的nsEnter/nsIfaceUp/nsMountTmpfs等函数
  * memorycmp.c：对libc/Apache/SSL/libXML/Samba等程序中涉及比较的函数封装，添加instrumentUpdateCmpMap函数，两个参数分别是函数的返回地址和第一次出现不相等字符的位置。第一次出现不相等字符的位置越靠后两个值越接近相等，越有可能走到新的路径
  * fetch.c/persistent.c：这里面的代码主要是用于持久型fuzzing模式的，有两种方法使用该模式：
一是把被fuzz的API放在LLVMFuzzerTestOneInput中，然后使用`hfuzz_cc/hfuzz_clang test.c -o
test`命令编译，`honggfuzz -P -- ./test`运行fuzzer
二是在调用被fuzz的API之前添加HF_ITER获取输入，然后使用`hfuzz_cc/hfuzz_clang test.c -o test
~/honggfuzz/libfuzz/libfuzz.a`命令编译，`honggfuzz -P -- ./test`运行fuzzer
  * libhfcommon：一些通用操作
  * libhfnetdriver：fuzz socket类程序的库
  * (libhfcommon和libhfnetdriver中的代码都不太重要，所以不再详细讲解了)
  * third_party：第三方文件
  * tools：创建黑名单，防止重复fuzz存在相同漏洞的文件
  * display.c：显示统计信息
  * honggfuzz.c&cmdline.c&fuzz.c：honggfuzz.c是程序的入口，调用cmdline.c中的函数设置处理命令行参数，调用fuzz.c中的函数启动fuzz
  * input.c：处理输入文件
  * mangle.c：实现各种变异策略
  * report.c：生成报告
  * sanitizers.c：设置ASAN等sanitizer的一些标志
  * socketfuzzer.c&socketfuzzer：socketfuzzer.c 用来fuzz网络服务器，socketfuzzer文件夹中给出了一个存在漏洞的vulnserver_cov.c作为例子
  * subproc.c：子进程相关
先给大家举一个使用honggfuzz的例子，以对[mpv-player](https://github.com/mpv-player/mpv)进行fuzz为例。下载好源代码之后我们首先修改wscript增加一些编译选项。
这个时候直接去编译的话链接这一步会出错，我们还没有编写插入的回调函数。
再下载并编译honggfuzz，把libhfuzz目录下编译好的含有回调函数的库链接进来，命令应该像下面这样。
`cc -rdynamic -Wl-znoexecstack -pthread -rdynamic -Wl-version-script
-Wlmpv.def ……(中间是之前编译好的.o文件) -u HonggfuzzNetDriver_main -u
LIBHFUZZ_module_instrument -u LIBHFUZZ_module_memorycmp
/home/hjy/Desktop/honggfuzz/libhfnetdriver/libhfnetdriver.a
/home/hjy/Desktop/honggfuzz/libhfuzz/libhfuzz.a
/home/hjy/Desktop/honggfuzz/libhfuzz/libhfuzz.a
/home/hjy/Desktop/honggfuzz/libhfcommon/libhfcommon.a ……(剩下的命令省略)`
链接成功之后我们再确认一下。
准备一些种子文件就可以开始fuzz了，并且应该可以看到统计的edge/pc/cmp等信息。
上面的一些步骤可能有些读者还不太理解，下面会详细说明，这里先有一个初步的印象。
## SanitizerCoverage
在泉哥的文章中已经介绍了反馈驱动的概念和基于Intel
PT的反馈驱动。这里我们重点聊一聊使用SanitizerCoverage对有源码的程序插桩统计代码覆盖率。SanitizerCoverage内置在LLVM中，可以在函数、基本块和边界这些级别上插入对用户定义函数的回调。默认的回调实现了简单的覆盖率报告和可视化。hfuzz_cc是实现了编译时添加`-fsanitize-coverage=……`标志并链接回调函数库libhfuzz的，只不过上面的例子中mpv是用waf编译的(是一个编译系统，不是web防火墙那个waf)，所以这两个步骤我们是手动实现的。honggfuzz中反馈代码覆盖率信息的结构体feedback_t如下所示。
###  -fsanitize-coverage=trace-pc-guard
如果编译源代码时含有`-fsanitize-coverage=trace-pc-guard`标志，编译器在每条边界插入下面的代码，每条边界的guard都不同。
    if(*guard)