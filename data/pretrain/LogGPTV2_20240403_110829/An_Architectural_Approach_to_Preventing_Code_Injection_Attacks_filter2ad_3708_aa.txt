title:An Architectural Approach to Preventing Code Injection Attacks
author:Ryan Riley and
Xuxian Jiang and
Dongyan Xu
An Architectural Approach to Preventing Code Injection Attacks
Ryan Riley
Xuxian Jiang
Purdue University
George Mason University
PI:EMAIL
PI:EMAIL
Dongyan Xu
Purdue University
PI:EMAIL
Abstract
Code injection attacks, despite being well researched,
continue to be a problem today. Modern architectural solu-
tions such as the NX-bit and PaX have been useful in lim-
iting the attacks, however they enforce program layout re-
strictions and can often times still be circumvented by a de-
termined attacker. We propose a change to the memory ar-
chitecture of modern processors that addresses the code in-
jection problem at its very root by virtually splitting memory
into code memory and data memory such that a processor
will never be able to fetch injected code for execution. This
virtual split memory system can be implemented as a soft-
ware only patch to an operating system, and can be used to
supplement existing schemes for improved protection. Our
experimental results show the system is effective in prevent-
ing a wide range of code injection attacks while incurring
acceptable overhead.
Keywords: Code Injection, Secure Memory Architecture
1. Introduction
Despite years of research, code injection attacks con-
tinue to be a problem today. Systems continue to be vulner-
able to the traditional attacks, and attackers continue to ﬁnd
new ways around existing protection mechanisms in order
to execute their injected code. Code injection attacks and
their prevention has become an arms race with no obvious
end in site.
A code injection attack is a method whereby an attacker
inserts malicious code into a running process and transfers
execution to his malicious code. In this way he can gain
control of a running process, causing it to spawn other pro-
cesses, modify system ﬁles, etc. If the program runs at a
privilege level higher than that of the attacker, he has essen-
tially escalated his access level. (Or, if he has no privileges
on a system, then he has gained some.)
A number of solutions exist that handle the code injec-
tion problem on some level or another. Architectural ap-
proaches [1, 2, 3] attempt to prevent malicious code exe-
cution by making certain pages of memory non-executable.
This protection methodology is effective for many of the
traditional attacks, however attackers still manage to cir-
cumvent them [4]. In addition, these schemes enforce spe-
ciﬁc rules for program layout with regards to separating
code and data, and as such are unable to protect memory
pages that contain both. Compiler based protection mech-
anisms [5, 6, 7] are designed to protect crucial memory
locations such as function pointers or the return address
and detect when they have been modiﬁed. These methods,
while effective for a variety of attacks, do not provide broad
enough coverage to handle a great many modern vulnerabil-
ities [8]. Both of these techniques, architectural and com-
piler based, focus on preventing an attacker from executing
his injected code, but do nothing to prevent him from inject-
ing and fetching it in the ﬁrst place.
The core of the code injection problem is that modern
computers implement a von Neumann memory architecture
[9]; that is, they use a memory architecture wherein code
and data are both accessible within the same address space.
This property of modern computers is what allows an at-
tacker to inject his attack code into a program as data and
then later execute it as code. Wurster et al [10] proposed a
technique to defeat software self checksumming by chang-
ing this property of modern computers (and hence produc-
ing a Harvard architecture [11, 12]), and inspired us to con-
sider the implications such a change would have on code
injection.
We propose virtualizing a Harvard architecture on top of
the existing memory architecture of modern computers so
as to prevent the injection of malicious code entirely. A Har-
vard architecture is simply one wherein code and data are
stored separately. Data cannot be loaded as code and vice-
versa. In essence, we create an environment wherein any
code injected by an attacker into a process’ address space
cannot even be addressed by the processor for execution. In
this way, we are attacking the code injection problem at its
root by regarding the injected malicious code as data and
making it unaddressable to the processor during an instruc-
tion fetch. The technique can be implemented as a soft-
ware only patch for the operating system, and our imple-
mentation for the x86 incurs a very reasonable performance
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:52:10 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007penalty, on average between 10 and 20%. Such a software
only technique is possible through careful exploitation of
the two translation lookaside buffers (TLBs) on the x86 ar-
chitecture in order to split memory in such a way that it
enforces a strict separation of code and data memory.
2. Related Work and Motivation
Research on code injection attacks has been ongoing for
a number of years now, and a large number of protection
methods have been researched and tested. There are two
classes of techniques that have become widely supported in
modern hardware and operating systems; one is concerned
with preventing the execution of malicious code after con-
trol ﬂow hijacking, while the other is concerned with pre-
venting an attacker from hijacking control ﬂow.
The ﬁrst class of technique is concerned with prevent-
ing an attacker from executing injected code using non-
executable memory pages, but does not prevent the at-
tacker from impacting program control ﬂow. This protec-
tion comes in the form of hardware support or a software
only patch. Hardware support has been put forth by both
Intel and AMD that extends the page-level protections of
the virtual memory subsystem to allow for non-executable
pages.
(Intel refers to this as the “execute-disable bit”
[3].) The usage of this technique is fairly simple: Program
information is separated into code pages and data pages.
The data pages (stack, heap, bss, etc) are all marked non-
executable. At the same time, code pages are all marked
read-only. In the event an attacker exploits a vulnerability
to inject code, it is guaranteed to be injected on a page that
is non-executable and therefore the injected code is never
run. Microsoft makes use of this protection mechanism in
its latest operating systems, calling the feature Data Execu-
tion Protection (DEP) [1]. This mediation method is very
effective for traditional code injection attacks, however it
requires hardware support in order to be of use. Legacy x86
hardware does not support this feature. This technique is
also available as a software-only patch to the operating sys-
tem that allows it to simulate the execute-disable bit through
careful mediation of certain memory accesses. PAX PAGE-
EXEC [2] is an open source implementation of this tech-
nique that is applied to the Linux kernel. It functions iden-
tically to the hardware supported version, however it also
supports legacy x86 hardware due to being a software only
patch.
The second class of technique has a goal of preventing
the attacker from hijacking program ﬂow, but does not con-
cern itself with the injected code. Works such as Stack-
Guard [5] accomplish this goal by emitting a “canary” value
onto the stack that can help detect a buffer overﬂow. ProPo-
lice [6] (currently included in gcc) builds on this idea by
also rearranging variables to prevent overﬂowed arrays from
accessing critical items such as function pointers or the re-
turn address. Stack Shield [7] uses a separate stack for re-
turn addresses as well as adding sanity checking to ret
and function pointer targets. Due to the fact that these tech-
niques only make it their goal to prevent control ﬂow hijack-
ing, they tend to only work against known hijacking tech-
niques. That means that while they are effective in some
cases, they may miss many of the more complicated attacks.
Wilander et al [8], for example, found that these techniques
missed a fairly large percentage (45% in the best case) of at-
tacks that they implemented in their buffer overﬂow bench-
mark.
Due to the fact that the stack based approaches above
do not account for a variety of attacks, in this work we are
primarily concerned with addressing limitations in the ar-
chitectural support of the execute-disable bit. While this
technique is widely deployed and has proven to be effec-
tive, it has limitations. First, programs must adhere to the
“code and data are always separated” model. In the event a
program has pages containing both code and data the pro-
tection scheme cannot be used. In fact, such “mixed pages”
do exist in real-world software systems. For example, the
Linux kernel uses mixed pages for both signal handling
[13] as well as loadable kernel modules. A second prob-
lem with these schemes is that a crafty attacker can disable
or bypass the protection bit using library code already in the
process’ address space and from there execute the injected
code. Such an attack has been demonstrated for the Win-
dows platform by injecting code into non-executable space
and then using a well crafted stack containing a series of
system calls or library functions to cause the system to cre-
ate a new, executable memory space, copy the injected code
into it, and then transfer control to it. One such example has
been shown in [4].
It is these two limitations in existing page-level pro-
tection schemes (the forced code and data separation and
the bypass methodology) that provide the motivation for
our work, which architecturally addresses the code injec-
tion problem at its core. Note that our architectural ap-
proach is orthogonal to research efforts on system ran-
domization, such as Address Space Layout Randomization
(ASLR) [14, 15, 16, 17] and Instruction Set Randomization
(ISR) [18, 19, 20]. We are also distinct from other work that
focuses speciﬁcally on preventing array overﬂow using a
compiler or hardware, such as [21]. We point out that these
alternate systems all work on a single memory architecture
wherein code and data are accessible within the same ad-
dress space. Our approach, to be described in the next sec-
tion, instead creates a different memory architecture where
code and data are separated.
3. An Architectural Approach
At its root, code injection is a problem because proces-
sors permit code and data to share the same memory address
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:52:10 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007space. As a result, an attacker can inject his payload as data
and later execute it as code. The underlying assumption re-
lied on by attackers is that the line between code and data
is blurred and not enforced. For this reason, we turn to an
alternative memory architecture that does not permit code
and data to be interchanged at runtime.
3.1. The Harvard and von Neumann Mem-
ory Architectures
Modern computers and operating systems tend to use
what is known as a von Neumann memory architecture [9].
Under a von Neumann system there is one physical memory
which is shared by both code and data. As a consequence
of this, code can be read and written like data and data can
be executed like code. Many systems will use segmentation
or paging to help separate code and data from each other or
from other processes, but code and data end up sharing the
same address space. Figure 1a illustrates a von Neumann
architecture.
An architecture not found in most modern computers
(but found in some embedded devices or operating systems,
such as VxWorks [22]) is known as a Harvard architecture
[11, 12]. Under the Harvard architecture code and data each
have its own physical address space. One can think of a
Harvard architecture as being a machine with two different
physical memories, one for code and another for data. Fig-
ure 1b shows a Harvard architecture.
3.2. Harvard and Code Injection
A code injection attack can be thought of as being carried
out in four distinct, but related, stages:
1. The attacker injects code into a process’ address space.
2. The attacker determines the address of the injected
code.
3. The attacker somehow hijacks the program counter to
point to the injected code.
4. The injected code is executed.
The mediation methods mentioned in section 2 are designed
to handle the problem by preventing either step 3 or 4.
Non-executable pages are designed to prevent step 4, while
compiler based approaches are meant to prevent step 3. In
both cases, however, the malicious code is injected, but ex-
ecution is somehow prevented. Our solution, on the other
hand, effectively stops the attack at step 1 by preventing the
successful injection of the malicious code into a process’
code space. (The purist will note that in the implementa-
tion method described in section 4 the attack is not tech-
nically stopped until step 4, however the general approach
described here handles it at step 1.)
The Harvard architecture’s split memory model makes
it suitable for the prevention of code injection attacks due
to the fact that a strict separation between code and data is
enforced at the hardware level. Any and all data, regard-
less of the source, is stored in a different physical memory
from instructions. Instructions cannot be addressed as data,
and data cannot be addressed as instructions. This means
that in a Harvard architecture based computer, a traditional
code injection attack is not possible because the architec-
ture is not capable of supporting it after a process is initially
setup. The attacker is simply unable to inject any informa-
tion whatsoever into the instruction memory’s address space
and at the same time is unable to execute any code placed
in the data memory. The architecture simply does not have
the “features” required for a successful code injection at-
tack. However, we point out that this does not prevent an
attacker from mounting non control injection attacks (e.g.,
non-control-data attack [23]) on a Harvard architecture. We
touch on these attacks in section 6.
3.3. Challenges in Using a Harvard Archi-
tecture
While a Harvard architecture may be effective at mitigat-
ing code injection, the truth of the matter is that for any new
code injection prevention technique to be practical it must
be usable on modern commodity hardware. As such, the
challenge is to construct a Harvard architecture on top of a
widely deployed processor such as the x86. We ﬁrst present
a few possible methods for creating this Harvard architec-
ture on top of the x86.
Modifying x86
One technique for creating such an architecture is to make
changes to the existing architecture and use hardware virtu-
alization [24] to make them a reality. The changes required
in the x86 architecture to produce a Harvard architecture are
fairly straight forward modiﬁcations to the paging system.
Currently, x86 implements paging by having a separate
pagetable for each process and having the operating system
maintain a register (CR3) that points to the pagetable for
the currently running process. One pagetable is used for
the process’ entire address space, both code and data. In
order to construct a Harvard architecture, one would need
to maintain two different pagetables, one for code and one
for data. As such, our proposed change to the x86 archi-
tecture to allow it to create a Harvard architecture is to cre-
ate an additional pagetable register in order that one can
be used for code (CR3-C) and the other for data (CR3-D).
Whenever an instruction fetch occurs, the processor uses
CR3-C to translate the virtual address, while for data reads
and writes CR3-D is used. An operating system, therefore,
would simply need to maintain two separate pagetables for
each process. This capability would also offer backwards
compatibility at the process level, as the operating system