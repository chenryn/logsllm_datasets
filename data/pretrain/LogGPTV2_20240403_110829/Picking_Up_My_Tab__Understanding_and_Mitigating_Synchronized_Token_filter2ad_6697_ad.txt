longer displayed. /proc/net/tcp6 shows both IP v6 sockets and IP
v4 sockets. The IP v4 addresses are mapped to the IP v6 space in the
ﬁle.
602    26th USENIX Security Symposium
USENIX Association
can also be used in P2P transaction, in which the payee
presents her QR code to the payer. In this scenario, if
there is a malicious app installed on the payer’s phone
and taking pictures during a P2P transaction, the payee’s
QR code can be directly harvested. Then the attacker
can spend the sniffed QR code in the B2L transaction in
another place.
In particular, the malicious app on payer’s phone brings
itself to the foreground and takes picture when it discov-
ers that the payment app on the same phone is in the
QR code scanning mode. The original P2P transaction
is disrupted by the malicious app by initiating a blue-
tooth paring process. The QR code is decoded in the
payer’s phone and transfered to the remote attacker to
be spared (different from the prior attack, the QR code
of the payee is not masked and therefore can be directly
decoded on the phone). We elaborate the steps for activ-
ity inference and transaction disruption below (the other
steps are straightforward or similar to the prior attack).
Figure 16 and Figure 17 illustrate the normal process for
P2P transaction and the attack scenario.
Figure 16: Work ﬂow of P2P transfer.
Inferring payment activity. The attack app on payer’s
phone needs to learn whether the payment app is on top
and in scanning mode. We use the same methodology to
infer the foreground app. To detect the scanning mode,
our app frequently pings the status of the back camera
by invoking a system API camera.open() at every 100
milliseconds. If the API returns an error code, the back
camera is highly likely occupied by the payment app
and the scanning mode is identiﬁed (only this mode uses
camera).
Interfering P2P transaction. Once the scanning mode
is inferred, the attack app will bring an activity (with iden-
tical UI to the payment app) to the foreground by sending
an intent. Different from the prior attack in which we have
no control over the POS scanner, we can block payer’s
app scanner through intent injection. The attack app keeps
scanning QR code until it is successfully decoded. Finally,
the malicious app destroys its scan activity to restore in-
Figure 17: Work ﬂow of attack against P2P transfer.
terface of the payment app. Though the payment token
can be obtained by the attacker, it might be invalid to be
spent by the attacker in a B2L transaction as the same
token could be used earlier by the P2P transaction. We
address this problem by forcing the payee’s app to refresh
the payment token. Since the payment app works in off-
line mode, both the old and new payment tokens are valid
(if used within its lifetime, e.g., around 90 seconds for
Alipay). A big challenge here is to alter the behavior of
payer’s phone without being discovered where there is no
attack app installed. In the end, we found that bluetooth
pairing could be used for this purpose.
Speciﬁcally, the attack app launches a pairing re-
quest to a nearby bluetooth device (highly likely to be
the payer’s phone) by calling an API createBond().
A window asking the user to conﬁrm the pairing
will be prompted on payee’s phone. The attack app
immediately cancels the pairing process by calling
cancelPairingUserInput() API7. The pairing pro-
cess is interrupted and the conﬁrmation window on the
payee’s phone will disappear. The duration for this step
is very short and it is nearly impossible to be observed by
the user, as shown in our demo[1]. When the pairing con-
ﬁrmation window disappears, the payment app is brought
to foreground and it will refresh the UI together with the
token based on its logic.
Evaluation. We successfully launched the attack on a
Samsung GT-S7562 (as payee) and a Galaxy Nexus (as
payer). The total attacking time is 8s, including activ-
ity starting, QR code capturing (5s), bluetooth pairing
7This is a hidden API which can be invoked by java reﬂection.
USENIX Association
26th USENIX Security Symposium    603
PayerPayeeConnect?Connect?1.Maliciousapp gets aQR code.2.Malicious appconnect BT.3.Malicious appexit and QRcode refresh.4.Wallet app gets therefreshed QR and startsto transfer.PayeePayerrequesting (3s), and activity exiting. During the blue-
tooth pairing, the conﬁrmation window showed less than
1 second. We reported the attack to Alipay, and after that,
they removed the functionality of payment QR code P2P
transfer.
4 Transaction Point Authorization
Our study shows that STLS threat is completely realistic
to mobile off-line payment schemes. The fundamental
problem behind today’s mobile off-line payment schemes
is: one-time token is insufﬁcient to protect against an ac-
tive attacker who is not only able to sniff payment tokens
but also capable of disrupting an ongoing legitimate trans-
action. In addition, our attacks have demonstrated that the
validity period of ofﬂine payment tokens is sufﬁciently
long for the adversary to transmit the token to a colluder
to spend it in a different transaction. To mitigate the STLS
thread and enhance the security of the off-line payment
schemes, we propose a new solution called POSAUTH.
In this section, we elaborate the design and implemen-
tation of POSAUTH, and evaluate its effectiveness and
efﬁciency.
Design and implementation. The indispensable steps in
a STLS attack include snifﬁng the payment token, halting
the ongoing transaction, and spending the sniffed token in
a different transaction. If any one of these steps fails, the
STLS attack cannot succeed, which means that we can
defend by undermining any step. Due to the broadcast
nature of audio and MST channels, it is difﬁcult to defend
against snifﬁng on these channels. Though QR code is
a unicast channel, it is still feasible for an adversary to
sniff in certain scenarios (like in our attacks). As a result,
our defense cannot rely on preventing the payment token
from being sniffed. Similarly, it is difﬁcult to prevent
an active attacker from halting the ongoing transaction
in mobile payment scenes, especially those with mobile
POS systems. The only option left is to prevent a token
from being used in a different transaction other than the
original transaction between the payer and the merchant.
This observation inspires the design of POSAUTH,
which binds a payment token to a speciﬁc transaction and
authorizes the payer to use it only in the same transaction.
Actually, we bind the payment token to the POS terminal
on which it is going to be spent by the payer. POSAUTH
is meant to make such binding easily deployable without
changing the hardware. In particular, each POS terminal
is attached with a QR code that contains its unique ID
(PID). Before the payer starts to transmit her payment
token to the POS terminal, she is required to scan the QR
code. Upon receiving the POS terminal’s unique ID, the
payer encodes the PID into her payment token. In this
way, the payment token is indeed bound to the terminal.
As stated in Section 2, the payment token in the mobile
off-line payment schemes is typically in the form of a
HMAC over timestamp and other identity information. To
prevent an attacker from replacing the encoded PID in the
sniffed payment token, we encode the PID by integrating
it within the one-way HMAC computation.
When the POS terminal receives the payment token,
it sends the payment token as well as its PID to the pay-
ment service provider. The provider checks the consis-
tency between the payment token and the PID. If they are
bound, the transaction is allowed. If not, the transaction
is supposed to be halted and the token’s owner (the payer)
should be warned about the risks of token being stolen.
In this way, even if the payment token is stolen, it can
not be spent on another POS terminal. It is unrealistic to
assume that the attacker could pay to the same POS ter-
minal in the mean time when the payer is still paying. We
can further require that, if a payment token is spent, the
payer’s tokens with earlier timestamp should be invalid,
in order to prevent a stolen payment token being spent on
the bound POS terminal in the short period after the payer
ﬁnishes payment with a refreshed payment token.
To understand whether POSAUTH can properly pro-
tect current mobile off-line payment schemes, we imple-
mented a prototype of POSAUTH on Alipay QR Pay.
More speciﬁcally, in Alipay QR Pay, the payment token
is a string of 18 decimal numbers, consisting of a constant
preﬁx of 2 digits, a sufﬁx of 6-digit Time-based One-
time Password (TOTP) computed from a pre-conﬁgured
seed and the current timestamp, and a middle-10-digit
encrypted identity (EID), which is generated by encrypt-
ing the payer’s unique identity (or account number) in
a customized symmetric encryption algorithm with the
TOTP as its encryption key. In our POSAUTH imple-
mentation, we encode a PID into the QR Pay payment
token by concatenating it with the timestamp in the TOTP
computation. Upon receiving the payment token and PID,
the server computes a set of valid TOTPs with the pre-
conﬁgured seed, a set of valid timestamps, and the PID.
And it checks whether the TOTP in the received payment
token belongs to a valid one. If valid, the token is then
bound to the POS terminal.
Evaluation. We mainly evaluate the time overhead dur-
ing each transaction introduced by POSAUTH, because
obviously POSAUTH does not introduce much other over-
head like upgrading costs, power consumption etc.
Comparing with the existing transaction schemes,
POSAUTH adds only one QR scanning step and slightly
modiﬁes the token generation algorithm while the remain-
ing steps are all the same, which brings extra time con-
sumption in 2 steps. For the time consumed by token
generation (modifying algorithms), we consider it negligi-
ble since it is a simple operation to integrate the PID into
a token generation algorithm (e.g., concatenating it with
the timestamp during the TOTP computation in Alipay),
604    26th USENIX Security Symposium
USENIX Association
therefore we focus on the extra scanning step. To assess
the extra time overhead introduced by POSAUTH, we
implemented an app to scan a QR code and recorded the
time spent between user clicking the button and QR code
decoding module returning result. We prepared a QR
code containing 18 digits that is enough to accommodate
the POS terminal ID. Then we measure how much time a
scan costs. We scanned 10 times and the average time is
3.8 seconds for a Galaxy Nexus.
For a mobile transaction, this time overhead is small,
comparing to the time the cashier spends on manipulating
the POS terminal, which usually costs 10 or even more
seconds. As a result, we conclude that the POSAUTH is
a practical defense scheme against the STLS attacks.
5 Discussion
Comparison with online scheme. In most online mobile
payment schemes, users are required to conﬁrm the trans-
action with brief transaction detail prompted, by inputing
the password or by pressing their ﬁngerprints. Therefore,
our attacks fail in this scenario since such information is
usually unavailable to a remote attacker.
However, online schemes are recommended for small
business who could not afford a POS terminal. In addition,
it requires decent network connection on payer device.
Comparing to the off-line schemes which are provided by
many large merchants[13] and are able to able to work
regardless of payer’s connection quality, their adoption is
limited so far.
Root Cause. After a careful analysis of all vulnerable
payment schemes having been discovered, we conclude
that the root cause for STLS attack is the missing of bidi-
rectional communication capabilities when transmitting
tokens through near ﬁeld communication channels. With-
out such capabilities, mobile off-line payment schemes
have to rely on time-restricted one-time token for security,
which, as shown in this work, turns out to be ineffective to
active attackers. The threat could be mitigated by our de-
fense scheme POSAUTH which provides a light-weight
bidirectional communication capability by only requiring
a quick scanning of QR code printed on POS terminal.
Comparison between POSAUTH and B2S. Similar
to POSAUTH, in the B2S scenario, the merchant also
presents a QR code for the payer to scan and pay. The
main difference here is that the QR code in B2S is still
used as a one-way communication channel, which is vul-
nerable in the presence of an active attacker. By replacing
the merchant’s QR code with a malicious one, an attacker
can make unauthorized payment with the payer’s account
[27]. However, POSAUTH is immune to such attacks
since the payment token is indeed bound to the ID of a
POS terminal (via QR code scanning), and any discrep-
ancy between the POS ID and the payment token would
raise an alarm of such attacks to the payment service
providers.
6 Related Work
Samsung Pay security. We studied the security of Sam-
sung Pay and showed that it is vulnerable to our STLS
attack. Before our work, the security aspect of Samsung
Pay was studied by two groups recently as well [6, 3].
These studies showed that snifﬁng payment token from
the MST channel by a passive attacker is feasible, but the
proposed techniques did not lead to the successful attack
under the real-world settings, as the payment token is one-
time and the payer could spend it ahead of the attacker.
Instead, our STLS attack employs a jamming device to
disrupt the normal transaction to prevent the payment to-
ken from being spent by the payer, which ensures that
an active attacker is able to spend the victim’s payment
token in a different transaction.
Data transfer over audio. Several communication prod-
ucts have realized data transmission through audio chan-
nel [34, 16]. These techniques encode data into audio
signals distinguished by amplitude, frequency, or phase
modulation [4]. Our study is the ﬁrst to investigate the
usage of the audio communication channel in mobile pay-
ment settings and proposed a realistic attack against such
channel.
QR code security. QR code is one of the earliest chan-
nel for mobile payment and there have been many works
demonstrating how to build a secure payment scheme
on top of it [11, 28, 39, 31, 7, 36]. In these payment
schemes, QR code is used to encode transaction infor-
mation [28, 7] or users’ payment token [11]. And a user
can pay by showing her QR code to the merchant, or
scanning the merchant’s QR code, or both. In the mean
time, attacks [27] have been proposed against QR Pay in
B2S transaction, e.g., replacing the merchant’s QR code
with one associated with the attacker. In this paper, we
mainly focus on the scenarios in which a user shows her
QR code to the merchant or another user (B2L and P2P
transaction). Different from the existing attacks, we are
the ﬁrst to investigate the STLS threats on these scenarios.
Since QR code can carry different types of data,
whether and how it can be used to deliver malicious con-
tent have been investigated [26, 23]. In fact, an attacker
is able to launch attacks including phishing [53], SQL
injection [46], and even malicious app installation [55],
by encoding malicious content into QR code. In these at-
tacks, an attacker can either use a new malicious QR code
or partially modify an existing QR code [24]. In our attack
against POS-based payment, we also partially modify the
QR code. The difference is that prior attacks still keep
the QR code readable but our attack prevents it from be-
ing read. In the meantime, defense techniques [54] were
USENIX Association
26th USENIX Security Symposium    605
proposed to protect users when scanning an untrusted QR
code. Such techniques can not prevent our attacks since
the modiﬁed QR code has no malicious content.
Similar to POSAUTH, QR code has also been
employed to transfer information for authentication
schemes [48, 30, 29], given its high usability and low
deployment cost. In this work, we show that QR code can
be used to protect payment security. Such direction has
not been explored before.
Security on other mobile payment schemes. The secu-
rity of other mobile payment schemes, including contact-