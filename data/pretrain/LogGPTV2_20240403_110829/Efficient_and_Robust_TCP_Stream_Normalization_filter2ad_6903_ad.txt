6. Attacks on RoboNorm
This section discusses attacks an adversary can launch
to undermine RoboNorm’s correct operation, either by ex-
hausting its memory or by breaking the hash function used
to generate segment hashes, and the defenses we propose.
Memory Exhaustion. We observe that even a carefully pro-
visioned normalizer cannot handle workloads that consume
unreasonably large amounts of memory. For example, in
the worst case, workloads could consist of TCP segments
with 1-byte payloads and very large clearing times, or a
large number of connections with very little data outstand-
ing per connection. Provisioning the memory of RoboNorm
for such workloads is clearly impractical. This means that
RoboNorm has to deal with the possibility of the system
running out of space. In this section, we describe mecha-
nisms that enable RoboNorm to gracefully handle memory
exhaustion arising from either benign reasons (e.g., sud-
den spike in traf(cid:2)c volume due to a (cid:3)ash crowd), or state-
holding attacks on the normalizer by a malicious adversary.
We examine each component of RoboNorm in turn (x6.1,
x6.2, x6.3).
Breaking the hash function. If an attacker can success-
fully create collisions under the hash function used by
RoboNorm, he can evade detection by RoboNorm by gener-
ating inconsistent TCP segments with identical hashes. x6.4
describes appropriate choice of hash functions that makes
104
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:11:31 UTC from IEEE Xplore.  Restrictions apply. 
the success probability of such attacks negligible.
We argue that attacks that exhaust the computational ca-
pacity of RoboNorm are not a threat to the system. An
attacker can try to exhaust the computational capacity of
RoboNorm by sending packets that cause the normalizer to
do a lot of work (e.g., partially overlapping segments). But
because RoboNorm delegates the processing of such pack-
ets to a slow path (x5), such attacks will largely slow down
only the attacker’s traf(cid:2)c. Moreover, because very few con-
nections actually have packets on the slow path, the amount
of collateral damage the attacker can in(cid:3)ict on benign con-
nections is limited.
The defenses proposed in this section necessarily com-
plicate the design of RoboNorm, but are required for robust
operation. Indeed, when considering these added complica-
tions, we should keep in mind that normalizer designs that
buffer complete payloads suffer from greater vulnerability
to memory exhaustion attacks than does RoboNorm.
6.1. Hash store
Eviction policy. When the hash store is full, RoboNorm
must evict some old segment hash(es) to make room for
new ones. Evicting a hash must amount to resetting the TCP
connection, because RoboNorm will no longer be able to
check the consistency of a retransmission of that segment.
We use a simple cost-bene(cid:2)t analysis to pick TCP connec-
tions to evict hashes from. The bene(cid:2)t accrued from picking
a particular connection for eviction is equal to the amount
of memory the connection consumes(cid:151)not simply the in-
stantaneous amount of memory it is currently using, but the
time-averaged amount it will use for as long as it is active.
We must balance the bene(cid:2)t against the cost of evicting the
connection. The metric we use for assessing the eviction
cost is the loss in network utilization because of the connec-
tion’s termination. Our eviction policy is then to evict the
connection with the highest bene(cid:2)t-to-cost ratio of eviction,
i.e., the connection with the highest ratio of the fraction of
memory used to the fraction of link bandwidth consumed.
If connection i has data arriving at rate (cid:21)i segments per
second and has an average segment size si, then the frac-
tion of the link capacity C it uses is (cid:21)isi=C. Regarding its
relative memory consumption, by Little’s Law the average
number of segment hashes connection i consumes is (cid:21)i(cid:14)i,
where (cid:14)i is the observed average time for the connection’s
segments to clear. Let H be the total capacity of the hash
store, in units of segment hashes. Then we can compute the
bene(cid:2)t-cost ratio of eviction of connection i as:
(cid:21)i(cid:14)i
H (cid:30) (cid:21)isi
C
=
(cid:14)iC
siH
Since H and C are constants, to (cid:2)nd the connection with
the highest bene(cid:2)t-cost ratio we look for j that maximizes
105
(cid:14)j=sj. Thus, our eviction policy boils down to picking con-
nections that either keep segment hashes in the system for
too long (large (cid:14)j), or use too many hashes by sending very
small segments (small sj).
Implementing this scheme requires a bit of bookkeep-
ing to determine (cid:14)i of a connection. We can approximate
this by averaging the following sample value for each of the
connection’s segments seen so far: for a cleared segment,
the sample is equal to the time it took for the segment to
be cleared. For a segment hash still in the system, the sam-
ple is equal to its age (the length of time since its creation).
Tracking segment age requires associating timestamps with
segment hashes.7 Note that si is easy to estimate by aver-
aging the lengths of all the segment hashes seen thus far.
Finally, we also need a way to quickly (cid:2)nd which connec-
tions have the highest (cid:14)i=si ratio. We observe that doing so
is directly analogous to the De(cid:2)cit Round Robin computa-
tions that modern high-speed routers already implement.
Coalescing hashes. To avoid penalizing benign connec-
tions with a small average segment size, we introduce the
notion of coalescing segment hashes. Coalescing is the pro-
cess of replacing two (or more) contiguous segment hashes
of a connection with one segment hash covering the com-
bined sequence number space, thus reducing the number of
segment hashes that need to be stored. Not all hash func-
tions are amenable to segment hash coalescing; we discuss
suitable hash functions in x6.4.
When a connection has multiple segment hashes with a
small number of bytes in each, coalescing the hashes saves
the connection from eviction by increasing its average seg-
ment size si, while increasing (cid:14)i by (only) the inter-arrival
time between the (cid:2)rst and last coalesced segments. The only
downside of coalescing hashes is that an exactly overlap-
ping retransmission of a coalesced segment will now have
to be handled like a partially overlapping retransmission,
resulting in increased delays for the connection, and an in-
crease in the amount of memory consumed by the connec-
tion in the retransmission buffer. Thus, the combined size of
the segments used to form a coalesced segment hash must
be limited, say to the maximum TCP segment size. So, if
the connection with the largest value of (cid:14)i=si either does
not have enough segment hashes to coalesce, or if the seg-
ment hashes have a large enough size already, then we will
still have to evict it to make room in the hash store.
Effect of adversary. The eviction policy of RoboNorm
also signi(cid:2)cantly increases the work-factor that adversaries
must apply to impair benign connections. In the absence of
such an eviction policy, adversaries can consume segment
7In fact, we can probably use a single per-connection timer instead,
similar to many implementations of TCP’s RTT estimation. However, we
have not yet developed the speci(cid:2)cs of such an approach.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:11:31 UTC from IEEE Xplore.  Restrictions apply. 
F
D
C
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.0001 0.001  0.01  0.1
 1
 10
Time in seconds
Univ1Univ2Lab1Lab2
Super
 100  1000 10000
Figure 6. CDF of the maximum duration of in-
activity between periods of activity for con-
nections with no outstanding data.
F
D
C
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
 0.0001 0.001  0.01  0.1
 1
 10
Time in seconds
Univ1Univ2Lab1Lab2
Super
 100  1000 10000
Figure 7. CDF of the maximum duration of in-
activity between periods of activity for con-
nections with outstanding data.
hash memory (cid:147)on the cheap(cid:148) in one of two ways: (a) by
forcing their hashes to stay uncleared for a long time (e.g.,
by sending data above a sequence hole, which hence will
not be acked), or (b) by sending data in small segments, thus
consuming a large number of segment hashes. However, the
former case increases the (cid:14)i of their connections, and the
latter reduces their si. Either makes their own connections
prone to eviction or coalescing.
6.2. Connection table
The connection table can easily become (cid:2)lled with ad-
versarial connections that have not been successfully estab-
lished, benign connections that stay idle for long periods
of time, or connections that failed to terminate cleanly. To
conserve space in the connection table, we augment the ta-
106
ble with two Bloom (cid:2)lters as described below.
Keeping track of connection establishment.
Initializing
state on the (cid:2)rst data packet and not on SYN packets makes
RoboNorm resilient to SYN (cid:3)oods without requiring any
additional mechanism (per x3.1). But not tracking connec-
tion establishment by way of the TCP 3-way handshake
also makes the system prone to attacks where an adver-
sary creates state in the connection table by sending data
packets on non-existent connections that go unanswered,
while preventing the receiver from sending RSTs by en-
suring the packets do not really reach the receiver (e.g., by
setting a low enough TTL or sending packets to unreach-
able hosts). RoboNorm overcomes this problem by keeping
track of connection establishment with very little state in the
following manner: upon seeing the SYN ACK segment for
a connection, RoboNorm hashes the connection tuple and
expected sequence number of the (cid:2)rst segment into a SYN
ACK Bloom Filter (SABF). We then check this Bloom (cid:2)lter
for the presence of the connection tuple when the (cid:2)rst data
packet arrives, as explained below.
Compressing state for connections with no outstanding
data. Some connections (e.g., interactive SSH) tend to
stay idle for long periods of time without having any data
in (cid:3)ight. Figure 6 shows the CDF of the duration of inac-
tivity (that was eventually followed by some activity) for
connections that had no outstanding data. We (cid:2)nd from the
(cid:2)gure that a small number (1(cid:150)2%) of connections remain
idle for hundreds of seconds before sending data again. Be-
cause RoboNorm does not need to store any per-connection
state for such connections other than the fact that they ex-
ist, we can hash the corresponding connection tuples into
an Inactive Connection Bloom Filter (ICBF) during the idle
periods. From our traces, we (cid:2)nd that the peak number of
connections in the connection table is 35(cid:150)50% lower if we
move connections to the ICBF after 5 minutes of inactivity.
Connection initialization and termination. Given the
mechanisms above, we slightly modify the algorithms in
x3.1 to initialize and terminate connection state as follows.
When a data packet with no entry in the connection table ar-
rives, RoboNorm installs a corresponding entry in the con-
nection table only if it (cid:2)nds the tuple in either the SABF or
ICBF. RoboNorm must periodically time out entries in the
Bloom (cid:2)lters to prevent them from (cid:2)lling up. We can time
out connections in the ICBF at a coarse granularity (e.g., af-
ter a few hours) in order to clean up connections that did not
terminate properly. Connections in the SABF can be timed
out more frequently (e.g., in 10 seconds). There are several
ways to ef(cid:2)ciently time out connections by keeping track of
which Bloom (cid:2)lter bits were accessed in the previous time-
out period [12].
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:11:31 UTC from IEEE Xplore.  Restrictions apply. 
For a false positive rate under 0.01%, storing 100,000
connection tuples requires a Bloom (cid:2)lter of about 400,000
cells. Since we require 2 bits per cell of the Bloom (cid:2)lter (the
second tracks any access in the timeout period), the size of
each Bloom (cid:2)lter is only 100 KB.
Eviction policy. When RoboNorm runs out of space in
the connection table, it locates an inactive connection, i.e.,
one for which it has not seen any acknowledgments over
the past (cid:28) seconds. If the connection has no data pending,
we reclaim the connection’s slot and place it in the ICBF.
If the connection has data outstanding, we must terminate
it. From Figure 7, we see that the fraction of connections
with outstanding data that stay idle for more than a few sec-
onds is negligible. Thus a value of around 10 sec for (cid:28) will
result in very few connections being terminated; moreover,
terminating such connections is not a large loss because the
connection was having great dif(cid:2)culty making progress. If
all connections are currently active and have pending data,
then absent any other mechanism, either the new connection
must be dropped or an existing one reset to make space for
the new connection.
Effect of adversary. RoboNorm’s policy of evicting inac-
tive connections when running out of space resists adversar-
ial attempts to exhaust the connection table. For example, if
the adversary creates connections that do not clear data, or
send no data at all, they will be (cid:3)agged as inactive and even-
tually evicted. Thus, the adversary can exhaust the connec-
tion table only by opening a large number of connections
and actively sending data on all of them. If the adversary
accomplishes the above by controlling many zombies, this
problem is identical to protecting a web server from a net-
work of bots seeking to exhaust its resources, and we can
employ one of the numerous defenses used in such situa-
tions (e.g., per-IP quotas, white-listing/blacklisting groups
of IP addresses, pro(cid:2)les over the IP space). However, it is
known that such defenses must be applied with care in order
not to penalize legitimate connections.
6.3. Retransmission Buffer
We now discuss how to respond to exhaustion of the
memory allocated to retransmission buffers. Recall that we
only employ such buffers in the face of connections with
partially overlapping retransmissions, which, as indicated
in Table 2 (row 2), are rare(cid:151)less than 0.5% of all connec-
tions at any time(cid:151)with the result that the adversary does
not have much leverage to cause collateral damage to be-
nign connections.
That said, a reasonable approach to take is that when
the retransmission buffer space is under stress, we limit the
amount of memory consumed by a connection in the re-
transmission buffer. This limit must be at least as large as
the maximum TCP segment size and the maximum size of
a coalesced segment hash (and this imposes a limit on how
much coalescing we can perform on the connection’s seg-
ment hashes, see x6.1). If a connection exceeds this limit,
we drop the excess partially overlapping segments without
buffering them; doing so will only increase the perceived
loss rate of the connection. Otherwise we can again use
(cid:14)i=si (as in x6.1) to select another connection’s segments to
evict. Note that evicting the buffered segments of a connec-
tion does not require terminating the connection unless we
have promoted an ACK on its behalf (about 5 times more
rare, see row 4 of Table 2); it only slows down the connec-
tion by requiring additional retransmissions.
6.4. Hash Function
In order to be able to coalesce hashes and thwart memory
exhaustion attacks on the hash store (as per the discussion
in x6.1), the hash function used to construct segment hashes
must have the property that the hash of the concatenation of
two byte strings is derivable from the hashes of the two in-
dividual byte strings. In the rest of this section, we provide
an example of one hash function with this property, and dis-
cuss its security properties.
Consider the following universal hash function [13]: the
n-bit hash of a bitstring X is computed as Hn(X) = (an (cid:1)
(mod pn), where X is the numeric value of the
X + bn)
bit-string, pn is an n-bit prime number that is kept secret and
an and bn are random numbers chosen from f1; : : : ; p (cid:0) 1g
and f0; : : : ; p (cid:0) 1g respectively. Notice that to obtain the
hash Hn(X:Y ) of the concatenation of two k-bit strings X
and Y , one simply calculates [Hn(Y ) + 2k (cid:1) (Hn(X) (cid:0) bn)]
(mod pn). The RoboNorm design uses 8-byte hashes (i.e.,
n = 64); we now defend this choice in the context of possi-
ble attacks on the hash function.
An attacker can compromise the correctness guarantees
of RoboNorm by producing collisions under RoboNorm’s
hash function, and subsequently generating inconsistent re-
transmissions without being detected. The attacker can test
whether he has successfully generated a collision by gen-