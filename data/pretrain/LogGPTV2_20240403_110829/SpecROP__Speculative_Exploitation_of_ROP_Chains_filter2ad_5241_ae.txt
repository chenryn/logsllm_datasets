### 参考文献

[21] ——, “Control-Flow Enforcement Technology Specification,” https://software.intel.com/sites/default/files/managed/4d/2a/control-flow-enforcement-technology-preview.pdf, 2019年5月，访问日期：2020年3月。

[22] E. M. Koruyeh, S. H. A. Shirazi, K. N. Khasawneh, C. Song, 和 N. B. Abu-Ghazaleh, “SPECCFI: 使用CFI知情推测缓解Spectre攻击,” CoRR, 卷号abs/1906.01345, 2019年。 [在线获取]: http://arxiv.org/abs/1906.01345

[23] R. Grisenthwaite, “缓存推测侧信道,” 2018年1月。

[24] C. Canella, J. V. Bulck, M. Schwarz, M. Lipp, B. von Berg, P. Ortner, F. Piessens, D. Evtyushkin, 和 D. Gruss, “瞬态执行攻击及防御的系统性评估,” 第28届USENIX安全研讨会, USENIX Security 2019, 美国加州圣克拉拉, 2019年8月14-16日, 编辑: N. Heninger 和 P. Traynor. USENIX协会, 2019年, 第249-266页。 [在线获取]: https://www.usenix.org/conference/usenixsecurity19/presentation/canella

[25] A. Mambretti, A. Sandulescu, A. Sorniotti, W. K. Robertson, E. Kirda, 和 A. Kurmus, “通过推测控制流劫持绕过内存安全机制,” CoRR, 卷号abs/2003.05503, 2020年。 [在线获取]: https://arxiv.org/abs/2003.05503

[26] J. Van Bulck, D. Moghimi, M. Schwarz, M. Lipp, M. Minkin, D. Genkin, Y. Yarom, B. Sunar, D. Gruss, 和 F. Piessens, “LVI: 通过微架构加载值注入劫持瞬态执行,” 第41届IEEE安全与隐私研讨会 (S&P’20), 2020年。

[27] M. Guarnieri, B. Köpf, J. F. Morales, J. Reineke, 和 A. Sanchez, “Spectector: 基于原则的推测信息流检测,” IEEE安全与隐私研讨会, IEEE, 2020年5月。 [在线获取]: https://www.microsoft.com/en-us/research/publication/spectector-principled-detection-of-speculative-information-flows/

[28] G. Wang, S. Chattopadhyay, I. Gotovchits, T. Mitra, 和 A. Roychoudhury, “oo7: 通过程序分析实现低开销的Spectre攻击防御,” IEEE软件工程事务, 2019年。

[29] A. Mambretti, M. Neugschwandtner, A. Sorniotti, E. Kirda, W. K. Robertson, 和 A. Kurmus, “Speculator: 一种用于分析推测执行攻击和缓解措施的工具,” 第35届年度计算机安全应用会议论文集, ACSAC 2019, 美国波多黎各圣胡安, 2019年12月9-13日, 编辑: D. Balenson. ACM, 2019年, 第747-761页。 [在线获取]: https://doi.org/10.1145/3359789.3359837

### A. SpecROP: 移位小工具

表5按受影响寄存器对每个库中的移位小工具进行了分类。

### B. OpenSSL 攻击小工具

本节列出了图2和图6中所示OpenSSL攻击中使用的所有小工具。这些小工具在glibc和libcrypto中找到。

#### B.1 处理小工具

以下处理小工具将rdi寄存器的值增加一个常量0x20。它在libcrypto中找到。
```assembly
1f6cc6: lea 0x20(rdi), rdi
1f6cca: callq *0x18(%rax)
```

以下处理小工具从rdi指向的内存地址偏移0x58处加载一个指针到rax寄存器。它在libcrypto中找到。
```assembly
b2f1b: mov 0x58(%rdi), %rax
b2f1f: retq
```

以下处理小工具将rdx + 7的值存储到rax寄存器中。它在glibc中找到。
```assembly
17df26: lea 0x7(rdx), rax
17df2a: retq
```

以下处理小工具将rax寄存器的值存储到rdx寄存器中。它在glibc中找到。
```assembly
12afdf: mov rax, rdx
12afe2: callq *0x28(r12)
```

以下处理小工具从rdx指向的内存地址偏移0x50处加载8个字节到rdi寄存器中。它在glibc中找到。
```assembly
12ef33: mov 0x50(rdx), rdi
12ef37: mov rdx, rsi
12ef3a: callq *rax
```

#### B.2 泄露小工具

以下小工具泄露rax寄存器的最低有效位（LSB）。它在glibc中找到。
```assembly
cf6ac: mov -0x1b0(rbp), rdx
cf6b3: mov -0x1a8(rbp), rdi
cf6ba: mov r15d, esi
cf6bd: or $0x2, esi
cf6c0: mov rbx, rcx
cf6c3: test $0x1, al
cf6c5: je cf6ac
cf6c7: mov r15d, r13d
cf6ca: movb $0x0, (rdx)
cf6cd: mov -0x1b0(rbp), rdx
cf6d0: and $0xfffff7ef, r13d
cf6d3: mov rbx, rcx
cf6d6: mov r13d, esi
cf6d9: or $0x2, esi
```

以下处理小工具将rdx寄存器的值增加0x40。它在libcrypto中找到。
```assembly
0x40, rdx
16b87f: add rdx, rsi
16b883: add rdx, rdi
16b886: add rdx, 0x40
16b889: lea 0x2e920(rip), r11
16b890: movsxd (r11, rdx, 4), rcx
16b894: add r11, rcx
16b897: jmp *rcx
```

以下处理小工具将rdx + 0xf的值存储到rax寄存器中。它在glibc中找到。
```assembly
17df7e: lea 0xf(rdx), rax
17df82: retq
```

以下小工具泄露rbp指向的指针所引用字节的第6个最低有效位（LSB）。第一条指令是未对齐的指令。它在glibc中找到。
```assembly
6aa23: testb 0x20, (rbp)
6aa27: je 6aa2f
6aa29: mov (rbx), rax
6aa2c: orl $0x20, (rax)
6aa2f: add $0x18, rsp
6aa33: mov r13, rdi
6aa36: pop rbx
6aa37: pop rbp
6aa38: pop r12
6aa3a: pop r13
```

以下小工具泄露rdi寄存器的第5个最低有效位（LSB）。它在glibc中找到。
```assembly
8ed34: test 0x10, rdi
8ed3b: je 8ed5a
8ed3d: movdqu (rdi, rsi, 1), xmm0
8ed42: pcmpeqb (rdi), xmm0
8ed46: pmovmskb xmm0, edx
8ed4a: sub 0xffff, edx
8ed50: jne 8ee80
8ed56: add 0x10, rdi
8ed5a: mov r11, r10
8ed5d: and 0xffffffffffffffe0, r10
```

### 表5: 每个库中移位小工具的出现情况，按受影响寄存器分类

| 库       | libcrypto | libc | libdl | mod_ssl | mod_proxy | mod_http2 |
|----------|-----------|------|-------|---------|-----------|-----------|
| rax      | 3         | 21   | 0     | 0       | 0         | 0         |
| rbx      | 10        | 44   | 2     | 1       | 4         | 5         |
| rcx      | 2         | 0    | 0     | 0       | 0         | 0         |
| rdx      | 6         | 29   | 0     | 0       | 0         | 0         |
| rdi      | 3         | 1    | 0     | 0       | 0         | 0         |
| rsi      | 1         | 0    | 1     | 0       | 0         | 0         |
| rsp      | 0         | 0    | 0     | 0       | 0         | 0         |
| rbp      | 0         | 0    | 0     | 0       | 0         | 0         |
| r8       | 0         | 0    | 0     | 0       | 0         | 0         |
| r9       | 0         | 0    | 0     | 0       | 0         | 0         |
| r10      | 0         | 0    | 0     | 0       | 0         | 0         |
| r11      | 0         | 0    | 0     | 0       | 0         | 0         |
| r12      | 0         | 1    | 0     | 0       | 0         | 0         |
| r13      | 0         | 1    | 0     | 0       | 0         | 0         |
| r14      | 0         | 0    | 0     | 0       | 0         | 0         |
| r15      | 0         | 0    | 0     | 0       | 0         | 0         |

希望这些优化能使文本更加清晰、连贯和专业。如果有任何进一步的修改需求，请告诉我！