[21] ——, “Control-ﬂow enforcement technology speciﬁ-
cation,” https://software.intel.com/sites/default/ﬁles/
managed/4d/2a/control-ﬂow-enforcement-technology-
preview.pdf, May 2019, accessed: 2020-03.
[22] E. M. Koruyeh, S. H. A. Shirazi, K. N. Khasawneh,
C. Song, and N. B. Abu-Ghazaleh, “SPECCFI: miti-
gating spectre attacks using CFI informed speculation,”
CoRR, vol. abs/1906.01345, 2019. [Online]. Available:
http://arxiv.org/abs/1906.01345
[23] R. Grisenthwaite, “Cache speculation side-channels,”
January 2018.
[24] C. Canella, J. V. Bulck, M. Schwarz, M. Lipp,
B. von Berg, P. Ortner, F. Piessens, D. Evtyushkin,
and D. Gruss, “A systematic evaluation of transient
execution attacks and defenses,” in 28th USENIX
Security Symposium, USENIX Security 2019, Santa
Clara, CA, USA, August 14-16, 2019, N. Heninger
and P. Traynor, Eds. USENIX Association, 2019, pp.
249–266. [Online]. Available: https://www.usenix.org/
conference/usenixsecurity19/presentation/canella
[25] A. Mambretti, A. Sandulescu, A. Sorniotti, W. K.
Robertson, E. Kirda, and A. Kurmus, “Bypassing
memory safety mechanisms through speculative control
ﬂow hijacks,” CoRR, vol. abs/2003.05503, 2020.
[Online]. Available: https://arxiv.org/abs/2003.05503
[26] J. Van Bulck, D. Moghimi, M. Schwarz, M. Lipp,
M. Minkin, D. Genkin, Y. Yarom, B. Sunar, D. Gruss,
and F. Piessens, “Lvi: Hijacking transient execution
through microarchitectural load value injection,” in 41th
IEEE Symposium on Security and Privacy (S&P’20),
2020.
[27] M. Guarnieri, B. Köpf, J. F. Morales, J. Reineke,
and A. Sanchez, “Spectector: Principled detection of
speculative information ﬂows,” in IEEE Symposium
on Security and Privacy.
IEEE, May 2020. [On-
line].
https://www.microsoft.com/en-
us/research/publication/spectector-principled-
detection-of-speculative-information-ﬂows/
Available:
14    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
[28] G. Wang, S. Chattopadhyay, I. Gotovchits, T. Mitra, and
A. Roychoudhury, “oo7: Low-overhead defense against
spectre attacks via program analysis,” IEEE Transac-
tions on Software Engineering, 2019.
[29] A. Mambretti, M. Neugschwandtner, A. Sorniotti,
E. Kirda, W. K. Robertson, and A. Kurmus, “Speculator:
a tool to analyze speculative execution attacks and
mitigations,” in Proceedings of
the 35th Annual
Computer Security Applications Conference, ACSAC
2019, San Juan, PR, USA, December 09-13, 2019,
D. Balenson, Ed. ACM, 2019, pp. 747–761. [Online].
Available: https://doi.org/10.1145/3359789.3359837
A SpecROP: Shift gadgets
Table 5 breaks down the shift gadgets found in each library
based on the register which is operated on.
B OpenSSL attack gadgets
This section fully lists the gadgets used in the OpenSSL at-
tacks shown in Figure 2 and Figure 6. The gadgets are found
in glibc and libcrypto.
B.1 Processing gadgets
The following processing gadget increments the register rdi
by a constant 0x20. It is found in libcrypto.
1f6cc6: lea
1f6cca: callq *0x18(%rax)
0x20(rdi),rdi
The following processing gadget loads a pointer from the
memory referenced by rdi at offset 0x58 into register rax. It
is found in libcrypto.
b2f1b: mov
b2f1f: retq
0x58(%rdi),%rax
The following processing gadget stores the value of
rdx + 7 in rax. It is found in glibc.
17df26:
17df2a:
lea
retq
0x7(rdx),rax
The following processing gadget stores the value of rax in
rdx. It is found in glibc.
12afdf:
12afe2:
mov
callq
rax,rdx
*0x28(r12)
The following processing gadget loads 8 bytes at address
referenced by rdx at an offset of 0x50 into register rdi. It is
found in glibc.
12ef33:
12ef37:
12ef3a:
mov
mov
callq
0x50(rdx),rdi
rdx,rsi
*rax
B.2 Leakage gadgets
The following gadget leaks the LSB of register rax. It is found
in glibc.
cf6ac:
cf6b3:
cf6ba:
cf6bd:
cf6c0:
...
cf939:
cf93b:
cf941:
cf944:
cf947:
cf94e:
cf955:
cf958:
cf95b:
...
mov
mov
mov
or
mov
test
je
mov
movb
mov
and
mov
mov
or
-0x1b0(rbp),rdx
-0x1a8(rbp),rdi
r15d,esi
0x2,esi
rbx,rcx
0x1,al
cf6ac
r15d,r13d
0x0,(rdx)
-0x1b0(rbp),rdx
0xfffff7ef,r13d
rbx,rcx
r13d,esi
0x2,esi
The following processing gadget increments the value in
rdx by 0x40. It is found in libcrypto.
The following gadget leaks the 3rd LSB from the byte at
offset 1 from the pointer in rdx. It is found in glibc.
0x40, rdx
16b87f: add
rdx, rsi
16b883: add
rdx, rdi
16b886: add
16b889: lea
0x2e920(rip), r11
16b890: movsxd (r11, rdx, 4), rcx
16b894: add
16b897: jmp
r11, rcx
*rcx
The following processing gadget stores the value of
rdx + 0xf in rax. It is found in glibc.
17df7e: lea
17df82: retq
0xf(rdx),rax
f5393:
f539a:
f539c:
f53a3:
f53a9:
f53ad:
f53af:
...
f5382:
f5386:
f538a:
...
testq
je
mov
mov
mov
test
mov
add
add
cmp
0x400, (rdx)
f5382
-0xb0(rbp), rdi
-0xf0(rbp), edx
(rdi, rax, 8), rax
edx, edx
rax, 0x50(rbx)
0x1, rax
0x20, rdx
rax, -0x100(rbp)
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    15
Library
libcrypto
libc
libdl
mod_ssl
mod_proxy
mod_http2
rax
3
21
0
0
0
0
rbx
10
44
2
1
4
5
rcx
2
0
0
0
0
0
rdx
6
29
0
0
0
0
rdi
3
1
0
0
0
0
rsi
1
0
1
0
0
0
rsp
0
0
0
0
0
0
rbp
0
0
0
0
0
0
r8
0
0
0
0
0
0
r9
0
0
0
0
0
0
r10
0
0
0
0
0
0
r11
0
0
0
0
0
0
r12
0
1
0
0
0
0
r13
0
1
0
0
0
0
r14
0
0
0
0
0
0
r15
0
0
0
0
0
0
Table 5: Occurrence of shift gadgets in each library, broken down based on the affected register
The following gadget leaks the 6th LSB from byte refer-
enced by the pointer in rbp. The ﬁrst instruction is an un-
aligned instruction. It is found in glibc.
The following gadget leaks the 5th LSB from the register
rdi. It is found in glibc.
6aa23: testb 0x20, (rbp)
6aa27: je
6aa29: mov
6aa2c: orl
6aa2f: add
6aa33: mov
6aa36: pop
6aa37: pop
6aa38: pop
6aa3a: pop
...
6aa2f
(rbx),rax
$0x20,(rax)
$0x18,rsp
r13,rdi
rbx
rbp
r12
r13
8ed34:
8ed3b:
8ed3d:
8ed42:
8ed46:
8ed4a:
8ed50:
8ed56:
8ed5a:
8ed5d:
test
je
movdqu
pcmpeqb
pmovmskb
sub
jne
add
mov
and
0x10,rdi
8ed5a
(rdi,rsi,1),xmm0
(rdi),xmm0
xmm0,edx
0xffff,edx
8ee80
0x10,rdi
r11,r10
0xffffffffffffffe0,r10
16    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association