The PostgreSQL command prepares and executes commands dynamically. The command
EXECUTE EXECUTE
can also run DDL statements and retrieve data using SQL commands. Similar to Oracle, the PostgreSQL
command can be used with bind variables.
EXECUTE
Example
1. Execute a SQL query with the table name as a dynamic variable using bind variables. This query
SELECT
returns the number of employees under a manager with a specific ID.
DO $$DECLARE
Tabname varchar(30) := 'employees';
num integer := 1;
cnt integer;
BEGIN
EXECUTE format('SELECT count(*) FROM %I WHERE manager = $1', tabname)
INTO cnt
USING num;
RAISE NOTICE 'Count is % int table %', cnt, tabname;
END$$;
;
2. Execute a DML command – first with no variables and then with variables:
DO $$DECLARE
BEGIN
EXECUTE 'INSERT INTO numbers (a) VALUES (1)';
EXECUTE format('INSERT INTO numbers (a) VALUES (%s)', 42);
END$$;
;
Notes
• %s formats the argument value as a simple string. A null value is treated as an empty string.
• %I treat the argument value as an SQL identifier and double-quoting it if necessary. It is an error for
the value to be null.
3. Execute a DDL command:
DO $$DECLARE
BEGIN
EXECUTE 'CREATE TABLE numbers (num integer)';
END$$;
;
For additional details:
https://www.postgresql.org/docs/9.3/static/functions-string.html
25
PostgreSQL Prepare
Using a statement can improve performance for reusable SQL statements.
PREPARE
The command can receive a , , , , or statement and
PREPARE SELECT INSERT UPDATE DELETE VALUES
parse it with a user-specified qualifying name so the command can be used later without the need
EXECUTE
to re-parse the SQL statement on each execution.
• When using to create a prepared statement, it will be viable for the scope of the current
PREPARE
session.
• If a DDL command is executed on a database object referenced by the prepared SQL statement, the
next command requires a hard parse of the SQL statement.
EXECUTE
Example
Use and commands in tandem:
PREPARE EXECUTE
The SQL command is prepared with a user-specified qualifying name.
The SQL command is executed several times, without the need for re-parsing.
PREPARE numplan (int, text, bool) AS
INSERT INTO numbers VALUES($1, $2, $3);
EXECUTE numplan(100, 'New number 100', 't');
EXECUTE numplan(101, 'New number 101', 't');
EXECUTE numplan(102, 'New number 102', 'f');
EXECUTE numplan(103, 'New number 103', 't');
PL/pgSQL EXECUTE vs. Oracle implicit cursor
Functionality PostgreSQL - EXECUTE Oracle – EXECUTE IMMEDIATE
Execute SQL EXECUTE format('select salary EXECUTE IMMEDIATE 'select salary
with results from employees WHERE %I = $1', from employees WHERE ' || col_name
and bind col_name) INTO amount USING || ' = :1' INTO amount USING
variables col_val; col_val;
Execute DML EXECUTE format('UPDATE employees EXECUTE IMMEDIATE 'UPDATE
with variables SET salary = salary + $1 WHERE employees SET salary = salary + :1
and bind %I = $2', col_name) USING WHERE ' || col_name || ' = :2'
variables amount, col_val; USING amount, col_val;
Execute DDL EXECUTE 'CREATE TABLE link_emp EXECUTE IMMEDIATE 'CREATE TABLE
(idemp1 integer, idemp2 link_emp (idemp1 NUMBER, idemp2
integer)'; NUMBER)';
Execute DO $$DECLARE EXECUTE IMMEDIATE ‘BEGIN
Anonymous BEGIN DBMS_OUTPUT.PUT_LINE(‘’Anonymous
block ... Block’’); END;’;
END$$;
For additional details:
https://www.postgresql.org/docs/current/static/plpgsql-statements.html
26
Migrating From: Oracle DBMS_RANDOM
[Back to TOC]
Overview
Oracle’s package enables you to generate a random number or string as part of a SQL
DBMS_RANDOM
statement or PL/SQL procedure.
DBMS_RANDOM Package Stored Procedures include:
1. – returns random numbers in a standard normal distribution.
NORMAL
2. – resets the seed that generates random numbers or strings.
SEED
3. – returns a random string.
STRING
4. – returns a number that is greater than or equal to 0 and less than 1 with 38 digits to the
VALUE
right of the decimal. Alternatively, you could get a random Oracle number that is greater than or
equal to a low parameter and less than a high parameter.
Notes:
• produces integers in [-2^^31, 2^^31).
DBMS_RANDOM.RANDOM
• produces numbers in [0,1] with 38 digits of precision.
DBMS_RANDOM.VALUE
Example
1. Generate a random number:
SQL> select dbms_random.value() from dual;
DBMS_RANDOM.VALUE()
-------------------
.859251508
SQL> select dbms_random.value() from dual;
DBMS_RANDOM.VALUE()
-------------------
.364792387
27
2. Generate a random string. The first character determines the returned string type and the number
specifies the length:
SQL> select dbms_random.string('p',10) from dual;
DBMS_RANDOM.STRING('P',10)
------------------------------------------------------
la'?z[Q&/2
SQL> select dbms_random.string('p',10) from dual;
DBMS_RANDOM.STRING('P',10)
------------------------------------------------------
t?!Gf2M60q
For additional details:
https://docs.oracle.com/database/121/ARPLS/d_random.htm
28
Migration To: PostgreSQL random()
[Back to TOC]
Overview
PostgreSQL does not provide a dedicated package equivalent to Oracle – a 1:1 migration is
DBMS_RANDOM
not possible. However, other PostgreSQL functions can be used as workarounds under certain conditions. For
example, generating random numbers can be performed using the function. For generating
random()
random strings, you can use the value returned from the function coupled with an
random() md5()
function.
Example
1. Generate a random number:
mydb=> select random();
random
-------------------
0.866594325285405
(1 row)
mydb=> select random();
random
-------------------
0.524613124784082
(1 row)
2. Generate a random string:
mydb=> select md5(random()::text);
md5
----------------------------------
f83e73114eccfed571b43777b99e0795
(1 row)
mydb=> select md5(random()::text);
md5
----------------------------------
d46de3ce24a99d5761bb34bfb6579848
(1 row
29
Oracle vs. PostgreSQL
dbms_random random()
Description Oracle PostgreSQL
Generate a random select dbms_random.value() select random();
number from dual;
Generate a random select select random()*100;
number between 1 to dbms_random.value(1,100)
100 from dual;
Generate a random select select md5(random()::text);
string dbms_random.string('p',10)
from dual;
Generate a random select select
string in upper case dbms_random.string('U',10) upper(md5(random()::text));
from dual;
For additional details:
https://www.postgresql.org/docs/current/static/functions-math.html
https://www.postgresql.org/docs/current/static/functions-string.html
30
Migrating from: Oracle DBMS_OUTPUT
[Back to TOC]
Overview
Oracle’s package is typically used for debugging or for displaying output messages from
DBMS_OUTPUT
PL/SQL procedures.
Example
In the following example, with is used with a combination of bind variables to
DBMS_OUTPUT PUT_LINE
dynamically construct a string and print a notification to the screen from within an Oracle PL/SQL procedure.
In order to display notifications on to the screen, you must configure the session with
SET SERVEROUPUT
ON.
SET SERVEROUTPUT ON
DECLARE
CURSOR c1 IS
SELECT last_name, job_id FROM employees
WHERE REGEXP_LIKE (job_id, 'S[HT]_CLERK')
ORDER BY last_name;
v_lastname employees.last_name%TYPE; -- variable to store last_name
v_jobid employees.job_id%TYPE; -- variable to store job_id
BEGIN
OPEN c1;
LOOP -- Fetches 2 columns into variables
FETCH c1 INTO v_lastname, v_jobid;
DBMS_OUTPUT.PUT_LINE ('The employee id is:' || v_jobid || ' and his
last name is:' || v_lastname);
EXIT WHEN c1%NOTFOUND;
END LOOP;
CLOSE c1;
END;
In addition to the output of information on the screen, the and procedures in the
PUT PUT_LINE
package enable you to place information in a buffer that can be read later by another PL/SQL
DBMS_OUTPUT
procedure or package. You can display the previously buffered information using the and
GET_LINE
procedures.
GET_LINES
For additional details:
https://docs.oracle.com/database/121/ARPLS/d_output.htm#ARPLS036
31
Migration to: PostgreSQL RAISE
[Back to TOC]
Overview
The PostgreSQL statement can be used as an alternative to . You can combine
RAISE DBMS_OUTPUT RAISE
with several levels of severity including:
Severity Usage
DEBUG1..DEBUG5 Provides successively-more-detailed information for use by developers.
INFO Provides information implicitly requested by the user
NOTICE Provides information that might be helpful to users
WARNING Provides warnings of likely problems
ERROR Reports an error that caused the current command to abort.
LOG Reports information of interest to administrators, e.g., checkpoint activity.
FATAL Reports an error that caused the current session to abort.
PANIC Reports an error that caused all database sessions to abort.
Examples
1. Use (where is the configurable severity level) for similar functionality as Oracle’s
RAISE DEBUG DEBUG
feature.
DBMS_OUTPUT.PUT_LINE
psql=> SET CLIENT_MIN_MESSAGES = 'debug';
-- Equivalent To Oracle SET SERVEROUTPUT ON
psql=> DO $$
BEGIN
RAISE DEBUG USING MESSAGE := 'hello world';
END $$;
DEBUG: hello world
DO
2. Use the parameter to control the level of message sent to the client. The
client_min_messages
default is Use the parameter to control which message levels are
NOTICE. log_min_messages
written to the server log. The default is .
WARNING
SET CLIENT_MIN_MESSAGES = 'debug';
For additional details:
https://www.postgresql.org/docs/current/static/plpgsql-errors-and-messages.html
For additional details:
https://www.postgresql.org/docs/current/static/runtime-config-logging.html#GUC-LOG-MIN-MESSAGES
32
Oracle DBMS_OUTPUT.PUT_LINE vs. PostgreSQL RAISE
Feature Oracle PostgreSQL
Disables message output DISABLE Configure “ client_min_message”
Enables message output ENABLE or “ log_min_message” for the
desired results
Retrieves one line from GET_LINE Consider storing messages in an array or
buffer temporary table so that you can retrieve
Retrieves an array of lines GET_LINES them from another procedure or
from buffer package
Terminates a line created PUT + NEW_LINE Store and concatenate the message
with PUT BEGIN string in a varchar variable before raising
Places a partial line in the DBMS_OUTPUT.PUT ('1,');
buffer DBMS_OUTPUT.PUT('2,'); do $$
DBMS_OUTPUT.PUT('3,'); DECLARE
DBMS_OUTPUT.PUT('4'); message varchar :='';
DBMS_OUTPUT.NEW_LINE(); begin
END; message := message ||
/ '1,';
message := message ||
'2,';
message := message ||
'3,';
message := message ||
'4';
RAISE NOTICE '%',
message;
END$$;
Places line in buffer PUT_LINE RAISE
DBMS_OUTPUT.PUT_LINE RAISE NOTICE 'The employee
('The employee id is:' || id is: % and his last name
v_jobid || ' and his last is: %', v_jobid,
name is:' || v_lastname); v_lastname;
Returns the number code of SQLCODE + SQLERRM SQLSTATE + SQLERRM
the most recent exception
Returns the error message DECLARE do $$
associated with its error- Name declare
number argument. employees.last_name%TYPE; Name employees%ROWTYPE;
BEGIN BEGIN
SELECT last_name INTO SELECT last_name INTO
name name
FROM employees WHERE FROM employees WHERE
employee_id = -1; employee_id = -1;
EXCEPTION EXCEPTION
WHEN OTHERS then WHEN OTHERS then
DBMS_OUTPUT.PUT_LINE('Error RAISE NOTICE
code ' || SQLCODE || ': ' 'Error code %: %',
|| sqlerrm); sqlstate, sqlerrm;
END; end$$;
/
For additional details:
https://www.postgresql.org/docs/9.6/static/errcodes-appendix.html
33
Migrating from: Oracle Procedures and Functions
[Back to TOC]
Overview
Oracle PL/SQL is Oracle’s built-in database programming language providing several methods to store and
execute reusable business logic from within the database. Procedures and functions are reusable snippets of
code created using the and the statements.
CREATE PROCEDURE CREATE FUNCTION
Stored Procedures and Stored Functions are PL/SQL units of code consisting of SQL and PL/SQL statements
that solve specific problems or perform a set of related tasks.
• Procedure – used to perform database actions with PL/SQL.
• Function – used to perform a calculation and return a result.
Privileges for Creating Procedures and Functions
• To create procedures and functions in their own schema, Oracle database users must have the
system privilege.
CREATE PROCEDURE
• To create procedures or functions in other schemas, the database user must have the
CREATE
privilege.
ANY PROCEDURE
• To execute a procedure or function, the database user must have the privilege.
EXECUTE
Package and Package Body
In addition to stored procedures and functions, Oracle also provides “Packages” that encapsulate related
procedures, functions, and other program objects.
• Package: declares and describes all the related PL/SQL elements.
• Package body: contains the executable code.
To execute a stored procedure or function created inside a package, the package name and the stored
procedure or function name must be specified.
SQL> EXEC PKG_EMP.CALCULTE_SAL('100');
34
Examples
1. Create an Oracle stored procedure using the statement. The
CREATE OR REPLACE PROCEDUER
optional clause overwrites an existing stored procedure with the same name, if exists.
OR REPLACE
SQL> CREATE OR REPLACE PROCEDURE EMP_SAL_RAISE
(P_EMP_ID IN NUMBER, SAL_RAISE IN NUMBER)
AS
V_EMP_CURRENT_SAL NUMBER;
BEGIN
SELECT SALARY INTO V_EMP_CURRENT_SAL FROM EMPLOYEES WHERE
EMPLOYEE_ID=P_EMP_ID;
UPDATE EMPLOYEES
SET SALARY=V_EMP_CURRENT_SAL+SAL_RAISE
WHERE EMPLOYEE_ID=P_EMP_ID;
DBMS_OUTPUT.PUT_LINE('New Salary For Employee ID: '||P_EMP_ID||' Is
'||(V_EMP_CURRENT_SAL+SAL_RAISE));
EXCEPTION WHEN OTHERS THEN
RAISE_APPLICATION_ERROR(-20001,'An error was encountered -
'||SQLCODE||' -ERROR- '||SQLERRM);
ROLLBACK;
COMMIT;
END;
/
-- Execute
SQL> EXEC EMP_SAL_RAISE(200, 1000);
35
2. Create a function using the statement:
CREATE OR REPLACE FUNCTION
SQL> CREATE OR REPLACE FUNCTION EMP_PERIOD_OF_SERVICE_YEAR
(P_EMP_ID NUMBER)
RETURN NUMBER
AS
V_PERIOD_OF_SERVICE_YEARS NUMBER;
BEGIN
SELECT EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM TO_DATE(HIRE_DATE))
INTO V_PERIOD_OF_SERVICE_YEARS
FROM EMPLOYEES
WHERE EMPLOYEE_ID=P_EMP_ID;
RETURN V_PERIOD_OF_SERVICE_YEARS;
END;
/
SQL> SELECT EMPLOYEE_ID,
FIRST_NAME,
EMP_PERIOD_OF_SERVICE_YEAR(EMPLOYEE_ID) AS PERIOD_OF_SERVICE_YEAR
FROM EMPLOYEES;
SQL> EMPLOYEE_ID FIRST_NAME PERIOD_OF_SERVICE_YEAR
----------- -------------------- ----------------------
174 Ellen 13
166 Sundar 9
130 Mozhe 12
105 David 12
204 Hermann 15
116 Shelli 12
167 Amit 9
172 Elizabeth 10
…
3. Create a Package using the statement:
CREATE OR REPLACE PACKAGE
SQL> CREATE OR REPLACE PACKAGE PCK_CHINOOK_REPORTS
AS
PROCEDURE GET_ARTIST_BY_ALBUM(P_ARTIST_ID ALBUM.TITLE%TYPE);
PROCEDURE CUST_INVOICE_BY_YEAR_ANALYZE;
END;
36
4. Create a new Package using the statement:
CREATE OR REPLACE PACKAGE BODY