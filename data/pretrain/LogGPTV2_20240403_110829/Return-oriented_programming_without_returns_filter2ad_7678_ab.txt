sequence has executed, reaching the ret that ends it, that ret causes
the next instruction sequence to be executed.
One way to view this arrangement of the stack, suggested by
Roemer et al. [39], is that in return-oriented programming the stack
pointer takes the place of the instruction pointer in ordinary pro-
gramming; that each gadget on the stack is an instruction for a
custom-built virtual machine; and that the ret at the end of each
instruction sequence acts like a typewriter carriage return to ad-
vance the processor to the next instruction — something the pro-
cessor does automatically for ordinary programs.
Our insight in this paper is that many other instruction sequences
have ret-like properties, and that such instruction sequences make
possible return-oriented programming without returns. Our replace-
ment for the ret instruction is an update-load-branch sequence, so
named because it ﬁrst updates the global state that acts as the return-
oriented program’s instruction pointer, then uses the updated state
to load from memory the address of the next instruction sequence
to execute, and ﬁnally branches to the loaded address.
On the x86, we recommend the use of return-like instruction
sequences of the form “pop x; jmp ∗x”, where x is any general-
purpose register. (One can also use other kinds of sequences, in-
cluding ones where the register updated is not the stack pointer;
see Section 3.1.) On the ARM, we recommend the use of “update-
load-branch” return-like instruction sequences such as “adds r6,#4;
ldr r5, [r6,#124]; blx r5”; where a general-purpose register (in this
example, r6) is the updated state.
Reusing an Update-Load-Branch Sequence.
It turns out that update-load-branch instruction sequences are
more rare than the ret instructions they take the place of. (Return in-
structions are just one instruction, not two or more, and are used in
almost every function.) Instead of trying to build a Turing-complete
gadget set where every instruction sequence ends in update-load-
branch, we look for a single update-load-branch sequence in the
target program, then reuse this sequence as a trampoline. To reuse
the trampoline, we select instruction sequences ending in an indi-
rect jump instruction whose target is the trampoline.4 The trampo-
4Shacham observed [41, Section 5.1] that if ebx contains the ad-
dress of a ret instruction then any instruction sequence ending in
Figure 1: Return-oriented programming without returns
line updates the program’s global state and transfers control to the
next instruction sequence. There are sufﬁciently many instruction
sequences ending in indirect jumps that a Turing-complete gadget
set can be constructed this way.
If, on the x86, we reserve a register y to store the trampoline’s
address then sequences ending in an indirect jump through y will
behave as though they themselves ended in update-load-branch in-
structions, allowing the sequences to be chained together in the
return-oriented style. The principle is the same for ARM, where
we use blx (Branch-Link-Exchange) as our indirect jump.
The principle of a jump-based attack is depicted in Figure 1. It
shows an abstract view of a program’s memory. The adversary can-
not inject own malicious code due to enabled W ⊕X protection (see
Assumption 1). However, an adversary is still able to use existing
code of the target program and its libraries. Therefore, the adver-
sary corrupts the control structure (CS) section so that program ex-
ecution transfers to a speciﬁc piece of code in a linked library (lib).
Usually control structures (such as return and jump addresses) are
located on the stack or on the heap. The instruction sequence of
the linked library is executed until an indirect jump instruction has
been reached which redirects the execution to the next sequence of
instructions by using our trampoline. The trampoline is also part of
the linked libraries and is responsible for redirecting execution to
the next instruction sequence.
INSTANTIATION ON INTEL X86
3.
3.1 Update-Load-Branch on the x86
Consider the sequence “pop %eax; jmp ∗%eax”, which updates
the stack pointer as the global program state, and has the side effect
of overwriting the eax register. This is a usable update-load-branch,
and one example of a large class of such sequences.
More generally, we can, ﬁrst, substitute another general-purpose
register (esp excepted, for obvious reasons) for eax. Second, we
can use doubly indirect jumps instead of singly indirect jumps, by
storing at the stack word popped into eax not the address of the
next sequence to run but the address of another location in memory
that holds that sequence address. A return-oriented exploit that uses
such doubly indirect jumps can be organized to include a sequence
catalog of useful instruction sequence addresses, something like
the Global Offset Table used in dynamic linking. Third, we can
use doubly indirect jumps with an immediate offset (either 8-bit
or 32-bit), by adding to or subtracting from the sequence address
to cancel out the effect of the immediate offset. Fourth, we can
observe that the x86 provides two kinds of doubly indirect jumps:
jmp ∗%ebx behaves just as if it had ended in ret; here we are replac-
ing ret by an update-load-branch sequence. For the use of related
techniques in the context of code injection, see [10, 27, 8].
1Trampoline32AdversaryCorrupt ControlStructuresDataControlStructures(CS)CodeLibraries (lib)Program MemoryJump (BLX)ForceJump (BLX)BackJumpInstruction SequenceInstruction SequenceJump561near jumps, which take a 32-bit address in the current segment;
and far jumps, which take a 32-bit address together with a 16-bit
segment selector. Far jumps allow for sophisticated privilege do-
main regimes with restricted cross-domain calls (as, e.g., in the
x86 NaCl sandbox [48]). We, however, need only the following
fact: An appropriate choice of segment selector (on our Debian
system, 0x0073) leaves the code segment unchanged; a far jump
to an address with this segment selector behaves exactly like a near
jump to the same address.5 Because the segment selector follows
the address in memory, we can follow each address in the sequence
catalog with the appropriate segment selector and thereafter use far
and near doubly indirect jumps interchangeably. (This introduces
zero bytes into the catalog; if this is a problem for a particular ex-
ploit, the zero bytes can be patched in at runtime; see Section 6.1.)
We use sequences of the sort described above in constructing our
gadgets. We refer to all of them using the shorthand pop x; jmp ∗x,
where x is any general purpose register. Pop-jump sequences occur
with some frequency as unintended instructions because of acci-
dental features of the x86 ISA; see our tech report [5].
There are yet more possibilities for update-load-branch instruc-
tion sequences on the x86. One could imagine a sequence based on
call ∗x, which would decrease esp each time it is used. Or a dif-
ferent register than esp could be used, as, e.g., in add 0x4, %eax;
jmp ∗(%eax); this is similar to the update-load-branch sequence
we use in Section 4 for our ARM instantiation. Or, using SIB ad-
dressing, a combination of registers could be used, with the index
register scaled by 4 and incremented after each dereference. Or
a memory location could serve as the mutable state instead of a
register. The point here is that many possible types of instruction
sequence exhibit the necessary behavior and are potentially suitable
for return-oriented programming. A defense that detects some but
not all of these types of instruction sequences would be of limited
value, as attackers may be able to switch to a different return-like
sequence and thereby evade detection.
3.2 Gadget Set
To demonstrate that Turing-complete return-oriented computa-
tion without returns is feasible in real programs, we design a set of
gadgets each of which performs a discrete computation and can be
reasoned about independently by virtue of little or no state main-
tained between gadgets. We build these gadgets by examining the
C standard library found in Debian GNU/Linux 5.0.4 (“Lenny”),
GNU libc 2.7, which is 1294572 bytes.6 As we will see below, by
itself, Debian’s libc is almost sufﬁcient. We need a single instruc-
tion sequence to exist in the either target program or in a library
5A 16-bit segment selector consists of a 13-bit index, a 1-bit table
indicator, and a 2-bit requested privilege level. The index speci-
ﬁes a 64-bit segment descriptor in either the global descriptor ta-
ble or the local descriptor table as speciﬁed by the table indicator.
Each segment descriptor contains a number of bit-ﬁelds including
the segment base address, segment limit and privilege level. Since
Linux uses a ﬂat address space, most of the segment descriptors
used in user programs specify a base address of zero and a limit of
4 GB [21]. The selector 0x0073 corresponds to an index of 14 in
the global descriptor table with a requested privilege level of ring 3.
6There are actually two distinct libcs on our test system: /lib/
libc-2.7.so and /lib/i686/cmov/libc-2.7.so. The
gadgets described in this section and the example exploit in Sec-
tion 6.1 are constructed from the former. However, the latter li-
brary is loaded at runtime instead on some machines, apparently
those that support the conditional-move instructions cmovcc (in-
troduced with the Intel Pentium Pro). We have veriﬁed that this
libc also provides instruction sequences sufﬁcient for constructing
a Turing-complete gadget set without returns, which gives addi-
tional evidence for our thesis in this paper.
loaded by the target program. We ﬁnd this additional instruction
sequence in two large libraries: Mozilla’s libxul (11857460 bytes),
distributed with Firefox and Thunderbird; and the PHP language’s
libphp5 (5450680 bytes). These libraries are used in Web browsers
and Web servers, respectively — common targets for exploitation.
(Could compilers be modiﬁed to avoid emitting pop-jump se-
quences? We note, ﬁrst, that these instructions need be intended
instructions placed in the binary by the compiler; second, that we
do not require the pop immediately to precede the jump, making the
compiler’s job harder; and, third, that other instruction sequences
than pop-jump could be used. Modifying compilers is a compli-
cated project. We believe that the effort would be better spent de-
ploying a comprehensive solution.)
As described in Section 2, rather than using sequences of instruc-
tions that end in pop x; jmp ∗x, we use sequences of instructions
that end in jmp ∗y where y is a pointer to a pop x; jmp ∗x sequence.
It is exactly this pop x; jmp ∗x that we do not ﬁnd in libc7 and so
must exist in the target program or one of its libraries. We call this
(facetiously) the bring your own pop-jump (BYOPJ) paradigm.
Because libc is loaded into every Linux executable, we gain con-
ﬁdence by using it as the corpus for our instruction sequences (ex-
cept the pop-jump) that return-oriented programming without re-
turns is likely possible in any large Linux program that an attacker
might target. We stress that using most instruction sequences from
libc but a pop-jump from libxul is not how a real attacker would go
about mounting an attack. Libxul is larger and has more convenient
instruction sequences than libc does; a Turing-complete gadget set
could be constructed more easily from libxul alone than from libc
with a libxul pop-jump. However, any program that did not link
against libxul would require an entirely different gadget set. Un-
like creating a new gadget set, testing that a program contains a
suitable pop-jump is simple and easily automated.
Most of the useful instruction sequences end with either a near
(resp. far) indirect jump to the address stored in the near (resp. far)
pointer in memory at an address stored in register edx. That is,
many instruction sequences end with jmp ∗(%edx) or ljmp ∗(%edx).
Each gadget could be made fully independent from the others,
but since register edx is so useful for chaining instruction sequences,
we ensure that at the end of each gadget, it holds the address of the
sequence catalog entry for the pop x; jmp ∗x. In most cases, this
required no additional work. The function call gadget is the only
one which required the ﬁx up.
Following Checkoway et al. [4], we design a three-address code
memory-memory gadget set: our gadgets are of the form x ← yopz,
where x, y, and z are literal locations in memory that hold the
operands and destination. We use register edx to chain our in-
struction sequences; for the pop x; jmp ∗x sequence in our BYOPJ
paradigm, we use register ebx. This means that we cannot store any
state in register ebx, but we need not worry about changing its con-
tents during the course of an instruction sequence since it will be
overwritten during the pop %ebx. This leaves us with ﬁve registers,
eax, ecx, ebp, esi, and edi, to do with as we please.
Instruction Sequences.
We used 34 distinct instruction sequences ending with jmp ∗x to
construct 19 general purpose gadgets: load immediate, move, load,
store, add, add immediate, subtract, negate, and, and immediate,
or, or immediate, xor, xor immediate, complement, branch uncon-
ditional, branch conditional, set less than, and function call. The
7In the second libc described in footnote 6,
there is a single
pop %edx; jmp ∗(%edx) sequence but as we show below, edx is
too useful to use for this purpose. Other minor differences exist
between the two libraries but we do not dwell on them further.
562Loading data from the stack into a register can be accomplished
majority of the instruction sequences contain four or fewer instruc-
tions. The sequences were chosen by hand out of a collection of
potential instruction sequences in libc discovered by the algorithm
given by Shacham [41].
by means of a pop x; jmp ∗y instruction sequence:
jmp ∗(%edx)
jmp ∗(%edx)
jmp ∗(%edx)
jmp ∗(%edx)
jmp ∗(%edx)
jmp ∗(%eax)
ljmp ∗(%edx)
sub %dh, %bl;
pop %eax;
pop %ecx;
cmp %dh, %dh;
pop %ebp; or $0xF3, %al;
or $0xF3, %al;
pop %esi;
pop %edi;
cmp %bl, %dl;
pop %esp; or %edi, %esi;
popad;
cld;
eax ← source
edi ← (eax)
esi ← (edi)
eax ← destination
(eax) ← esi
A store gadget is similar except that the address where the source
value is to be stored is itself stored at a ﬁxed location. That is, the
store gadget performs the operation (A) ← B where A is the word
in memory at the destination address and B is the word in mem-
ory at the source address. In fact, we can perform the operation
(A + n) ← B where n is a literal value. This allows for easy con-
stant array indexing into an array that is not at a ﬁxed location in
memory, where A is the array base and n is the offset.