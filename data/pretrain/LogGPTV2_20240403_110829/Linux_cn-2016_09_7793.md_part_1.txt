---
author: Kyrylo Subbotin
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 2
  likes: 0
  sharetimes: 0
  viewnum: 7432
date: '2016-09-20 15:25:00'
editorchoice: false
excerpt: 说实话，我十分享受 Python 最新的异步特性。新的语法做了改善，所以异步代码很容易阅读。可以明显看出哪些调用是非阻塞的，什么时候发生 greenthread
  的切换。所以现在我可以宣称 Python 是异步编程的好工具。
fromurl: https://7webpages.com/blog/writing-online-multiplayer-game-with-python-and-asyncio-part-3/
id: 7793
islctt: true
largepic: /data/attachment/album/201609/20/152441d6zf0gfh0kivkfym.jpg
permalink: /article-7793-1.html
pic: /data/attachment/album/201609/20/152441d6zf0gfh0kivkfym.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 7784
reviewer: ''
selector: ''
summary: 说实话，我十分享受 Python 最新的异步特性。新的语法做了改善，所以异步代码很容易阅读。可以明显看出哪些调用是非阻塞的，什么时候发生 greenthread
  的切换。所以现在我可以宣称 Python 是异步编程的好工具。
tags:
- Python
- 并行
- 协程
- 游戏
thumb: false
title: 使用 Python 和 Asyncio 编写在线多人游戏（三）
titlepic: true
translator: chunyang-wen
updated: '2016-09-20 15:25:00'
---
 ![](/data/attachment/album/201609/20/152441d6zf0gfh0kivkfym.jpg)
> 
> 在这个系列中，我们基于多人游戏 [贪吃蛇](http://snakepit-game.com/) 来制作一个异步的 Python 程序。上一篇文章聚焦于[编写游戏循环](/article-7784-1.html)上，而本系列第 1 部分则涵盖了如何[异步化](/article-7767-1.html)。
> 
> 
> 
* 代码戳[这里](https://github.com/7WebPages/snakepit-game)
[![](/data/attachment/album/201609/20/152543iw8yqfmyzw0ze90b.gif)](https://github.com/7WebPages/snakepit-game)
### 4、制作一个完整的游戏
![](/data/attachment/album/201609/20/152546h2rxum7diizxymdi.gif)
#### 4.1 工程概览
在此部分，我们将回顾一个完整在线游戏的设计。这是一个经典的贪吃蛇游戏，增加了多玩家支持。你可以自己在 （） 亲自试玩。源码在 GitHub 的这个[仓库](https://github.com/7WebPages/snakepit-game)。游戏包括下列文件：
* [server.py](https://github.com/7WebPages/snakepit-game/blob/master/server.py) - 处理主游戏循环和连接。
* [game.py](https://github.com/7WebPages/snakepit-game/blob/master/game.py) - 主要的 `Game` 类。实现游戏的逻辑和游戏的大部分通信协议。
* [player.py](https://github.com/7WebPages/snakepit-game/blob/master/player.py) - `Player` 类，包括每一个独立玩家的数据和蛇的展现。这个类负责获取玩家的输入并相应地移动蛇。
* [datatypes.py](https://github.com/7WebPages/snakepit-game/blob/master/datatypes.py) - 基本数据结构。
* [settings.py](https://github.com/7WebPages/snakepit-game/blob/master/settings.py) - 游戏设置，在注释中有相关的说明。
* [index.html](https://github.com/7WebPages/snakepit-game/blob/master/index.html) - 客户端所有的 html 和 javascript代码都放在一个文件中。
#### 4.2 游戏循环内窥
多人的贪吃蛇游戏是个用于学习十分好的例子，因为它简单。所有的蛇在每个帧中移动到一个位置，而且帧以非常低的频率进行变化，这样就可以让你就观察到游戏引擎到底是如何工作的。因为速度慢，对于玩家的按键不会立马响应。按键先是记录下来，然后在一个游戏循环迭代的最后计算下一帧时使用。
> 
> 现代的动作游戏帧频率更高，而且通常服务端和客户端的帧频率是不相等的。客户端的帧频率通常依赖于客户端的硬件性能，而服务端的帧频率则是固定的。一个客户端可能根据一个游戏“嘀嗒”的数据渲染多个帧。这样就可以创建平滑的动画，这个受限于客户端的性能。在这个例子中，服务端不仅传输物体的当前位置，也要传输它们的移动方向、速度和加速度。客户端的帧频率称之为 FPS（ 每秒帧数   （    frames per second    ） ），服务端的帧频率称之为 TPS（ 每秒滴答数   （    ticks per second    ） ）。在这个贪吃蛇游戏的例子中，二者的值是相等的，在客户端显示的一帧是在服务端的一个“嘀嗒”内计算出来的。
> 
> 
> 
我们使用类似文本模式的游戏区域，事实上是 html 表格中的一个字符宽的小格。游戏中的所有对象都是通过表格中的不同颜色字符来表示。大部分时候，客户端将按键的码发送至服务端，然后每个“滴答”更新游戏区域。服务端一次更新包括需要更新字符的坐标和颜色。所以我们将所有游戏逻辑放置在服务端，只将需要渲染的数据发送给客户端。此外，我们通过替换通过网络发送的数据来减少游戏被破解的概率。
#### 4.3 它是如何运行的？
这个游戏中的服务端出于简化的目的，它和例子 3.2 类似。但是我们用一个所有服务端都可访问的 `Game` 对象来代替之前保存了所有已连接 websocket 的全局列表。一个 `Game` 实例包括一个表示连接到此游戏的玩家的 `Player` 对象的列表（在 `self._players` 属性里面），以及他们的个人数据和 websocket 对象。将所有游戏相关的数据存储在一个 `Game` 对象中，会方便我们增加多个游戏房间这个功能——如果我们要增加这个功能的话。这样，我们维护多个 `Game` 对象，每个游戏开始时创建一个。
客户端和服务端的所有交互都是通过编码成 json 的消息来完成。来自客户端的消息仅包含玩家所按下键码对应的编号。其它来自客户端消息使用如下格式：
```
[command, arg1, arg2, ... argN ]
```
来自服务端的消息以列表的形式发送，因为通常一次要发送多个消息 （大多数情况下是渲染的数据）：