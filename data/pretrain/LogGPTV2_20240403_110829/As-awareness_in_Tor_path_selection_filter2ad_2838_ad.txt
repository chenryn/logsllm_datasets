software recently started including a database in many of
its binary distributions for mapping IP addresses to coun-
tries thus making implementation quite simple.
But how eﬀective are these various diversity proposals
against an AS level adversary? Extending our Tor path
simulator used in Section 5, we experimented with adding
the requirement to Tor’s existing path selection algorithm
that each node in a circuit be located in a diﬀerent country.
Second, instead of requiring unique countries, we ensured
that each node in a circuit exists in a diﬀerent AS. Table
3 compares the results of the country-aware (Unique-CC)
and AS-aware (Unique-AS) algorithms versus Tor’s current
algorithm and selecting nodes uniformly at random.
While the two simple approaches result in a moderate de-
crease in the probability that an AS will exist on both ends
of a connection, the results are not as striking as proponents
of Proposal 144 would suggest. Perhaps the most interest-
ing point to note is that there is eﬀectively little diﬀerence
between choosing nodes from distinct ASes versus choosing
them from distinct countries. Given that the latter can more
easily be accomplished with little change to the Tor software,
it does not seem worthwhile to pursue adding mechanisms
by which clients can reliably and securely determine the ori-
gin AS for all Tor relays.
6.2 Approximating AS Paths
The previously discussed Unique-AS and Unique-CC path
selection algorithms only consider properties of the nodes
2Tor Project Proposals are intended to provide an open
way to evolve Tor speciﬁcation and design. They are very
roughly similar to IETF/IRTF RFCs in this respect [11].
Uniform
Weighted (Tor)
Unique-CC
Unique-AS
Approx. AS Path (n = 1)
Approx. AS Path (n = 3)
Forward Reverse
Total
12.79% 13.23% 20.49%
10.92% 11.14% 17.81%
10.41% 11.24% 17.61%
10.07% 10.14% 16.73%
6.01% 11.09%
6.29%
3.17%
3.34%
6.23%
Table 3: Percentage of circuits generated by current
and proposed Tor path selection algorithms that re-
sult in a single AS being able to observe both sides
of the connection in either the inferred forward or
reverse AS-level paths. The approximate AS path
heuristic we propose yields the most eﬀective avoid-
ance of AS level observers.
themselves when constructing a path, but did not oﬀer much
of an improvement in terms of resilience against an AS level
observer. Unfortunately, the AS path inference algorithms
described earlier in this paper and in the networking litera-
ture are expensive both in terms of computational complex-
ity and storage requirements. To give the reader an idea of
the space required, the six routing table dumps used for the
analysis in this paper occupied around 1.47 GB of disk space
uncompressed and several hundred megabytes compressed.
For Tor clients on connections with moderate bandwidth,
distributing full routing information is clearly not practical.
Instead, we consider a more practical approach wherein
the handful of trusted and likely more capable Tor directory
authorities generate a smaller approximation of the Inter-
net’s global AS structure and distribute only this “snapshot”
to clients. Given a snapshot of the AS-level topology, we
show that clients can apply some simple and eﬃcient heuris-
tics in order to approximate the sequence of ASes a packet
would traverse on entry to or exit from the Tor network.
6.2.1 Generating the AS Topology Snapshot
The ﬁrst step in this approach proceeds in much the same
manner as the full AS path inference algorithm. One or
more of the Tor directory authorities fetch a set of RIBs
and construct a directed graph where the vertices are ASes
and the edges are interdomain routing connections between
ASes. Each edge is labeled with the type of AS relationship
shared between the two endpoints as inferred by any of the
well known relationship inference algorithms [6, 2]. Also
associated with every edge is a frequency value that indicates
how many AS paths in the input RIBs contained that edge.
The authorities also produce a separate table that maps IP
preﬁxes to the AS or ASes that originate that preﬁx in the
input RIBs, in order for clients to map a destination IP
address to an AS number.
6.2.2 Approximating an AS-level Path
When a Tor client downloads an initial network consen-
sus and descriptors for all relays contained therein, the client
would also download the AS topology and preﬁx table snap-
shots computed and agreed upon by the directory authori-
ties. When the client wants to establish a circuit, it chooses
an entry and exit relay according to Tor’s normal path se-
lection algorithm. We then use the following algorithm for
estimating whether there is a potential for an AS-level ad-
versary to observe both ends of the connection.
First, the IP addresses of the client, chosen entry and
exit nodes, and destination are mapped to their origin ASes
using a longest-matching preﬁx search in the downloaded
preﬁx table. Using the downloaded topology snapshot and
a simple modiﬁed implementation of Dijkstra’s algorithm,
the client then ﬁnds all shortest forward and reverse AS
paths from the client’s AS to the entry node, and from the
exit node to the destination. The algorithm next discards
any paths in the resulting set of shortest paths that do not
meet the “valley free” property that is common in Internet
routing. Finally, the remaining entry paths and exit are
sorted according to the cumulative frequency values for each
edge in the path. The shortest n paths with the greatest
cumulative edge frequency values are then assumed to be
the n most likely AS-level paths from a source AS to the
destination.
The above process is repeated for both the forward and
reverse entry and exit paths.
If the same AS appears in
any of the n entry paths and any of the n exit paths, the
chosen entry-exit node pair is discarded and a new pair is
selected. The AS path approximation algorithm above is
repeated until a “safe” entry-exit relay pair is found.
6.2.3 Evaluation
We used the routing tables listed in Section 3.1 to gener-
ate the AS topology snapshot and preﬁx tables. Our proof-
of-concept implementation used a simple text-based format
for both ﬁles. While the input routing data used in our
experiments was over 1.47GB, the total size of an AS topol-
ogy snapshot was only 1.6MB, which was further reduced
to 602KB using the same basic gzip compression method
already used in the Tor software. Using bzip2, the topology
snapshot was further reduced to around 500KB. The pre-
ﬁx table was much larger at 6.1MB total uncompressed and
just over 2MB compressed (or 1.4MB using bzip2). Given
that Tor clients currently download over 2MB of relay data
when bootstrapping, we believe the download requirements
imposed by our approach is quite reasonable for a vast ma-
jority of Tor clients. Like relay directories, the AS topology
and preﬁx snapshots can be signed and distributed to di-
rectory mirrors as well, reducing the load on the directory
authorities even further.
In evaluating the eﬀectiveness of our approach, we gener-
ated 15,000 paths following the algorithm above using Tor
directory information from three days in September 2008.
We repeated the experiment twice; once with n = 1 and
again with n = 3. From Table 3, we see that applying our
simple heuristics to a condensed AS topology snapshot re-
sulted in a signiﬁcant drop in probability that a single AS is
able to observe both ends of a Tor circuit. Our algorithm,
despite being written in Python with no particular optimiza-
tions, was also reasonably eﬃcient in our experiments. It
took our implementation around 1-3 seconds to choose a
safe entry-exit pair for a particular client-destination com-
bination when n = 1, and around 3-5 seconds for n = 3.
There are also several potential client-side implementation
optimizations available with this approach. Tor clients cur-
rently pick a small set of entry guards to always use as the
ﬁrst hop in any circuit they construct. The top n approxi-
mated AS paths from the client to each of its chosen entry
guards could be computed when the client ﬁrst receives the
AS topology snapshot. Later, when the client attempts to
establish a circuit, only the exit path needs to be computed.
We ﬁnally note that the format of our AS topology and
preﬁx snapshots was extremely straightforward, and little
eﬀort was made to further minimize their size. For exam-
ple, it may be possible to further reduce the size of the
preﬁx table using techniques from the networking research
community that have focused on small and eﬃcient longest
preﬁx-matching lookup tables. On the subject of eﬃciency,
it would be an interesting future research question to con-
sider how frequently the directory authorities must refresh
their routing table information in order to produce an up-
dated AS-level topology snapshot for clients.
7. CONCLUSIONS
It is important to keep in mind that the network’s growth
has still been beneﬁcial to Tor clients in other ways, even
if it hasn’t signiﬁcantly reduced the threat of AS-level ob-
servers. The increased number of nodes improves the num-
ber of simultaneous clients the network is able to support. It
also decreases the amount of traﬃc that an inside adversary
controlling a given number of nodes is likely to be able to
observe.
Similarly, suggestions to require that entry and exit nodes
for a given Tor circuit reside in diﬀerent countries have been
motivated at least as much by concern over attacks from ad-
ministrative or governmental adversaries using legal or ex-
tralegal means as by concern about threats from the struc-
ture of the underlying communications network. Thus, even
if these provide only small improvement over current Tor
route selection against AS-level adversaries, they provide
other beneﬁts as well.
In this paper we have examined connection over the Tor
network in the face of AS-level adversaries. We used a
newer more accurate path-inference algorithm vs. that used
by Feamster and Dingledine, and showed that, even for the
sources, destinations and Tor network they examined, con-
nections were slightly less location independent than they
thought. More importantly, we showed via observation of ac-
tual usage that the ASes of circuit originators and of circuit
destinations of the Tor network in 2008 were signiﬁcantly
diﬀerent from those mentioned by Feamster and Dingledine.
A signiﬁcant percentage of circuits originate from a small
number of ASes. Likewise a signiﬁcant percentage were in-
tended for destinations at a small number of ASes. Thus, no
matter how Tor routing is done, much existing Tor traﬃc is
vulnerable to AS-level adversaries. We showed that /16 sep-
aration and even /8 separation for Tor circuits did not imply
AS-independence for those circuits. We also showed that the
tremendous growth of the Tor network has had only small
impact on its AS-level path independence, and a signiﬁcant
percentage of paths had AS-level independence diminish as
the network grew.
And, we showed that requiring unique countries for Tor
nodes was as eﬀective for providing non-intersecting AS paths
as was requiring unique ASes. Thus, the easier to implement
and independently motivated country separation is more
sensible. Though country separation was the easiest and
lowest overhead approach, by far the most eﬀective heuris-
tic approach to path independence (as measured by general
percentage of circuits compromised) was the path approxi-
mation approach.
We also considered a heuristic of choosing shortest AS
paths to entry guards at the entry side of a circuit as an
easy to implement and apply technique to increase AS inde-
pendence. As an approach to reducing the average chance
of AS-level path compromise it faired worse than country
indepedendence (in the reverse direction) and much worse
than AS path approximation. But it might be the basis of a
much better approach for speciﬁc clients even if not better
for the network and userbase as a whole. For clients that
typically don’t change AS much, if, e.g., one could ﬁnd or
set up guard nodes within the client’s home AS, then that
client would be immune to AS-level attack except by any
but his local AS. If such a set-up is not feasible, then doing
the same within as few AS-level hops as possible would still
have clear advantage for the given client.
An interesting direction for future work would be to in-
corporate out-of-band knowledge about which ASes are co-
located at various IXes. We would then be able to better
estimate the impact of IX-level observers and compare it to
our results that consider only AS-level observers. Another
direction would be to determine the impact of AS-aware
routing on other threats to anonymity for Tor. For exam-
ple, currently an initial node tells little about the client,
if shortest AS path to entry guards is used to pick entry
guards, then a second node or observer of the network link
from the ﬁrst node in a circuit will be able to make rea-
sonable inferences about the AS of the client. Also, given
the number of circuits that route from/to a small number of
ASes, it may be reasonable to design route selection based
on trust that the originator places on the AS(es) between
her and the entry node. We intend to explore this further
in future work.
Acknowledgments
The authors gratefully acknowledge Peter Palfrader for pro-
viding us with the archive of Tor network data used in our
analysis.
8. REFERENCES
[1] K. Bauer, D. McCoy, D. Grunwald, T. Kohno, and
D. Sicker. Low-resource routing attacks against Tor.
In Proceedings of the Workshop on Privacy in the
Electronic Society (WPES 2007), Washington, DC,
USA, October 2007.
[2] X. Dimitropoulos, D. Krioukov, M. Fomenkov,
B. Huﬀaker, Y. Hyun, kc claﬀy, and G. Riley. As
relationships: Inference and validation. ACM
SIGCOMM Computer Communication Review, 37:29,
2007.
[3] R. Dingledine, N. Mathewson, and P. Syverson. Tor:
The second-generation onion router. In Proceedings of
the 13th USENIX Security Symposium, August 2004.
[4] J. Douceur. The sybil attack. In Proceedings of the 1st
International Peer To Peer Systems Workshop
(IPTPS 2002), March 2002.
[5] N. Feamster and R. Dingledine. Location diversity in
anonymity networks. In Proceedings of the Workshop
on Privacy in the Electronic Society (WPES 2004),
Washington, DC, USA, October 2004.
[6] L. Gao. On inferring autonomous system relationships
in the internet. IEEE/ACM Transactions on
Networking, 9:733–745, 2000.
[7] D. M. Goldschlag, M. G. Reed, and P. F. Syverson.
Hiding routing information. In R. Anderson, editor,
Proceedings of Information Hiding: First International
Workshop, pages 137–150. Springer-Verlag, LNCS
1174, May 1996.
[8] B. N. Levine, M. K. Reiter, C. Wang, and M. K.
Wright. Timing attacks in low-latency mix-based
systems. In A. Juels, editor, Proceedings of Financial
Cryptography (FC ’04), pages 251–265.
Springer-Verlag, LNCS 3110, February 2004.
[9] Z. M. Mao, L. Qiu, J. Wang, and Y. Zhang. On
as-level path inference. In SIGMETRICS ’05:
Proceedings of the 2005 ACM SIGMETRICS
International conference on Measurement and
Modeling of Computer Systems, pages 339–349, New
York, NY, USA, 2005.
[10] Z. M. Mao, J. Rexford, J. Wang, and R. H. Katz.
Towards an accurate as-level traceroute tool. In
SIGCOMM ’03: Proceedings of the 2003 conference on
Applications, Technologies, Architectures, and
Protocols for Computer Communications, pages
365–378, 2003.
[11] N. Mathewson. The Tor proposal process. Tor Project
Proposal 001, January 2007.
[12] D. McCoy, K. Bauer, D. Grunwald, T. Kohno, and
D. Sicker. Shining light in dark places: Understanding
the Tor network. In N. Borisov and I. Goldberg,
editors, Proceedings of the Eighth International
Symposium on Privacy Enhancing Technologies
(PETS 2008), pages 63–76, Leuven, Belgium, July
2008. Springer.
[13] Mfr. Increase the diversity of circuits by detecting
nodes belonging the same provider. Tor Project Draft
Proposal 144, June 2008.
[14] U. M¨oller, L. Cottrell, P. Palfrader, and L. Sassaman.
Mixmaster Protocol — Version 2. IETF Internet
Draft, July 2003.
[15] S. J. Murdoch and P. Zieli´nski. Sampled traﬃc
analysis by internet-exchange-level adversaries. In
N. Borisov and P. Golle, editors, Proceedings of the
Seventh Workshop on Privacy Enhancing Technologies
(PET 2007), Ottawa, Canada, June 2007. Springer.
[16] U. of Oregon. RouteViews archive.
http://archive.routeviews.org, September 2008.
[17] L. Øverlier and P. Syverson. Locating hidden servers.
In Proceedings of the 2006 IEEE Symposium on
Security and Privacy. IEEE CS, May 2006.
[18] J. Qiu and L. Gao. As path inference by exploiting
known as paths. In Proceedings of the 2006 Global
Telecommunications Conference, December 2006.
[19] A. Serjantov and P. Sewell. Passive attack analysis for
connection-based anonymity systems. In Proceedings
of ESORICS 2003, October 2003.