# Smart In-Network Deduplication for Storage-Aware SDN

## Authors
- **Yu Hua**
  - WNLO, School of Computer
  - Huazhong University of Science and Technology
  - Wuhan, China
  - Email: [PI:EMAIL]

- **Xue Liu**
  - School of Computer Science
  - McGill University
  - Montreal, Canada
  - Email: [PI:EMAIL]

- **Dan Feng**
  - WNLO, School. of Computer
  - Huazhong University of Science and Technology
  - Wuhan, China
  - Email: [PI:EMAIL]

## Abstract
To efficiently handle the rapid growth of data and reduce network transmission overhead, we propose an in-network deduplication scheme for storage-aware Software-Defined Networks (SDNs), named SMIND. Unlike traditional source or destination deduplication methods, SMIND leverages SDN to implement in-network deduplication. Additionally, to address the performance bottleneck of accessing and indexing the SDN controller, we integrate an SDN-enabled Flash Translation Layer (FTL) into a Solid State Disk (SSD). Experimental results demonstrate the efficiency and effectiveness of SMIND.

## Categories and Subject Descriptors
C.2.1 [COMPUTER-COMMUNICATION NETWORKS]: Network Architecture and Design

## Keywords
Software-Defined Network, Deduplication, Storage Systems

## 1. Introduction
The volume of information created and replicated has increased rapidly, with a significant portion being redundant data. This redundancy imposes substantial overhead on network performance. One solution is to detect and reduce duplicate data before transmission. Data deduplication can be performed at either the source (e.g., clients) or the destination (e.g., servers).

**Source Deduplication:** Removes redundancy before data is transmitted to the destination. It involves client software communicating with the server to compare incoming data with previously stored data. If the data already exists, it is not sent. However, this method suffers from long latencies due to communication between the source and destination.

**Destination Deduplication:** Removes redundant data after it has been transmitted to the destination server. This approach consumes significant server resources and incurs heavy network transmission overheads.

Both source and destination deduplication schemes operate in an end-to-end manner, which is inefficient due to the lack of data analytics in conventional networks. Software-Defined Networking (SDN) offers an opportunity to implement in-network deduplication, allowing the process to occur within the network itself.

Our contributions are twofold:
1. We implement an in-network deduplication scheme, SMIND, using the OpenFlow protocol. SMIND detects data redundancy by quickly checking the membership of their fingerprints in the SDN controller.
2. To address the performance bottleneck of indexing data in the SDN controller, we propose using SSD devices, which offer high read performance and energy efficiency. We design and implement an SDN-enabled FTL in an SSD to support these functionalities.

## 2. SSD-Based SDN Controller
Network bandwidth is often a limiting factor. To mitigate this, we leverage data reduction techniques to decrease unmanaged redundancy and improve effective throughput. Deduplication splits files into chunks, each generating a unique hash signature (fingerprint). By comparing these fingerprints, we can identify and eliminate duplicate data, avoiding byte-by-byte comparisons.

SMIND provides fingerprint generation, lookups, and mapping management. The generated fingerprints are used to detect redundant data, while the mapping function manages the correlation between host-viewable logical addresses and physical flash addresses in the SSD.

We maintain the fingerprint index in the SDN controller and use SSDs to meet the high I/O (especially read) performance and energy efficiency requirements. To enable SDN in SSDs, we design and implement an SDN-enabled FTL. Figure 1 illustrates the deduplication-aware process in the SDN controller, showing the workflow of SMIND, including fingerprint generation and lookups from indexing requests.

In addition to conventional FTL functions such as address translation, wear leveling, and garbage collection, we enhance the FTL with SDN-enabled components. These components include redundancy identification, flow table management, per-flow scheduling, and energy optimization. SMIND thus offers efficient data deduplication services by leveraging the high-performance properties of SSDs.

## 3. Results and Conclusion
Figure 2 shows the transmission latencies of SMIND, source, and destination deduplication schemes when transmitting up to 1TB of data. The maximum bandwidth is 50Gb/s in our OpenFlow-based data centers, and the SDN controller uses our SSD prototype. The destination scheme incurs the longest latency due to its full data transmission, while SMIND achieves the lowest latency due to in-network deduplication, reducing both bandwidth overhead and waiting time.

To the best of our knowledge, SMIND is the first work to implement an SDN-enabled SSD in a software-defined controller. SMIND offers high performance, energy efficiency, and storage awareness, effectively addressing the performance bottleneck of indexing the controller. We have implemented a real SSD prototype to support the SDN design.

## 4. Acknowledgment
This work was supported in part by the National Natural Science Foundation of China (NSFC) under Grant 61173043; National Basic Research 973 Program of China under Grant 2011CB302301; NSFC under Grant 61025008; the NSERC Discovery Grant 341823; and US National Science Foundation Award 1116606. The authors would like to thank the anonymous reviewers for their valuable and constructive comments.

## 5. References
[1] A. Muthitacharoen, B. Chen, and D. Mazieres, “A low-bandwidth network file system,” Proc. SOSP, 2001.

[2] A. Anand, V. Sekar, and A. Akella, “SmartRE: an architecture for coordinated network-wide redundancy elimination,” Proc. SIGCOMM, 2009.

[3] B. Aggarwal, A. Akella, A. Anand, A. Balachandran, P. Chitnis, C. Muthukrishnan, R. Ramjee, and G. Varghese, “EndRE: an end-system redundancy elimination service for enterprises,” Proc. NSDI, 2010.

[4] N. McKeown, T. Anderson, H. Balakrishnan, G. Parulkar, L. Peterson, J. Rexford, S. Shenker, and J. Turner, “OpenFlow: enabling innovation in campus networks,” ACM SIGCOMM CCR, vol. 38, no. 2, pp. 69–74, 2008.

[5] M. Yu, J. Rexford, M. J. Freedman, and J. Wang, “Scalable flow-based networking with DIFANE,” Proc. SIGCOMM, 2010.

## Figures
**Figure 1: SSD-based design in SMIND.**

**Figure 2: Deduplication based transmission latency.**

---

This optimized version aims to make the text more coherent, clear, and professional, while maintaining the original content and structure.