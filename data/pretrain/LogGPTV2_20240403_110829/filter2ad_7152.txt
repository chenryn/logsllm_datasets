title:Smart in-network deduplication for storage-aware SDN
author:Yu Hua and
Xue Liu and
Dan Feng
Smart In-Network Deduplication for Storage-aware SDN
Yu Hua
WNLO, School of Computer
Huazhong University of
Science and Technology
PI:EMAIL
Wuhan, China
Xue Liu
Dan Feng
School of Computer Science
WNLO, School of Computer
McGill University
Montreal, Canada
PI:EMAIL
Huazhong University of
Science and Technology
PI:EMAIL
Wuhan, China
ABSTRACT
In order to efﬁciently handle the rapid growth of data and reduce
the overhead of network transmission, we propose an in-network
deduplication for storage-aware Software Deﬁned Network (SDN),
called SMIND. Unlike conventional source or destination dedupli-
cation schemes, SMIND implements in-network deduplication via
SDN. Moreover, to address the performance bottleneck of access-
ing and indexing SDN controller, we implement an SDN-enabled
Flash Translation Layer (FTL) in a real prototype of Solid State
Disk (SSD). Experimental results demonstrate the efﬁciency and
efﬁcacy of SMIND.
Categories and Subject Descriptors
C.2.1 [COMPUTER-COMMUNICATION NETWORKS]: Net-
work Architecture and Design
Keywords
Software Deﬁned Network, Deduplication, Storage Systems
1.
INTRODUCTION
The amount of information created and replicated has rapidly
increase, in which there exists a large fraction of redundant data.
The heavy redundancy causes non-trivial overheads to the network
performance [1]. One solution is to detect data redundancy and
reduce the amount of duplicate data to be transmitted [2, 3].
Data deduplication can be executed in either source (e.g., clients)
or destination (e.g., servers) end systems. Speciﬁcally, source dedu-
plication is to remove data redundancy before transmission to the
destination.
It works through client software that communicates
with the server to compare arriving data with previously stored
data. If the server contains previously stored data, they will not
be sent. However, the source deduplication suffers from the long
latency of message communications between source and destina-
tion systems. On the other hand, destination deduplication is to re-
move redundant data at the destination servers, after these data have
been transmitted to the servers. This scheme consumes substantial
Permission to make digital or hard copies of part or all of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. Copyrights for third-
party components of this work must be honored. For all other uses, contact
the Owner/Author.
Copyright is held by the owner/author(s).
SIGCOMM’13, August 12–16, 2013, Hong Kong, China.
ACM 978-1-4503-2056-6/13/08.
resources of servers, while incurring heavy network transmission
overheads.
Both source and destination schemes need to handle the data in
an end-to-end manner, say between the source and the destination,
to obtain the responses. The reason is the property of simply pro-
cessing data in conventional networks, without data analytics. Soft-
ware deﬁned network (SDN) [4, 5] offers an opportunity to imple-
ment an in-network deduplication. The in-network scheme allows
the deduplication to be executed within the network.
Our contributions are twofold. First, based on existing SDN plat-
form using OpenFlow protocol [4], we implement an in-network
deduplication scheme. SMIND detects the data redundancy by fast
checking the memberships of their ﬁngerprints in the SDN con-
troller. Second, to address the performance bottleneck of indexing
data in the SDN controller, we propose to use the SSD devices due
to their high “read" performance and energy efﬁciency. These prop-
erties perfectly match the access patterns to the SDN controller.
We design and implement Flash Translation Layer (FTL) in SSD
to support the SDN functionalities.
2. SSD-BASED SDN CONTROLLER
Since network bandwidth is often a performance-limiting fac-
tor, we propose to leverage data reduction techniques to decrease
the unmanaged redundancy and improve the effective throughput.
The deduplication can split ﬁles into multiple chunks. Each chunk
generates corresponding hash signature, called a ﬁngerprint. The
ﬁngerprint uniquely identiﬁes the chunk. Hence, we can deter-
mine duplicate data by comparing ﬁngerprints that summarize the
contents. The operations of checking their ﬁngerprints avoid byte-
by-byte comparisons. By exploiting and exploring the contents of
data, SMIND offers the functionalities of ﬁngerprint generation,
ﬁngerprint lookups and mapping management. The generated ﬁn-
gerprints are used for the lookups of redundant data. The mapping
function manages the correlation between the host-viewable logical
addresses and physical ﬂash addresses in SSD.
We maintain the ﬁngerprint index in the SDN controller. In order
to deliver high performance, SSD is used to meet the needs of high
I/O (especially “read") performance and energy efﬁciency. To al-
low SDN to work in the SSD devices, we design and implement the
SDN-enabled FTL. As shown in Figure 1, SSD maintains data in
an array of ﬂash blocks. Each block contains 32-64 pages. A page
is the smallest unit of read and write operations. FTL is a block-
device software layer that simulates the ﬂash as a hard disk. It has
the ability to implement address mapping between a logical address
in ﬁle systems to a physical address in the ﬂash. By offering a disk-
like interface, FTL is an intermediate software layer inside an SSD.
It receives logical read and write commands from the applications
and then transforms them to the internal commands in the ﬂash.
509Figure 1 illustrates the deduplication-aware process in the SDN
controller. The workﬂow of SMIND includes ﬁngerprint gener-
ation and lookups from indexing requests. Besides the conven-
tional functions in FTL, such as address translation, wear level-
ing and garbage collection, we improve the FTL by adding SDN-
enabled components. The components of virtualized deduplication
mainly include redundancy identiﬁcation, ﬂow table management,
per-ﬂow scheduling and energy optimization. SMIND hence can
offer efﬁcient data deduplication services by leveraging the salient
performance properties of SSD. For example, since SMIND needs
to determine the memberships of new arriving data, the SDN con-
troller mainly reads exiting information. SSD has good perfor-
mance of read operation. Moreover, by using the virtualization,
SMIND builds the SDN-enabled control plane for managing large
amounts of data.
full data transmission in the network. Although both source and
SMIND need to compute the ﬁngerprints, the source scheme needs
to wait for the response from the servers and then decide to transmit
the data, which incurs extra latency especially for new data. Unlike
them, SMIND obtains the smallest latency due to its in-network
deduplication, while alleviating heavy bandwidth overhead and ex-
tra waiting time.
Figure 2: Deduplication based transmission latency.
To the best of our knowledge, SMIND is the ﬁrst work to imple-
ment the SDN-enabled SSD in the software-deﬁned controller. The
proposed SMIND has the salient properties of high performance,
energy efﬁciency and storage awareness. Our work efﬁciently ad-
dresses the performance bottleneck of indexing the controller. We
have implemented a real prototype of SSD to support the SDN de-
sign.
4. ACKNOWLEDGMENT
This work was supported in part by National Natural Science
Foundation of China (NSFC) under Grant 61173043; National Ba-
sic Research 973 Program of China under Grant 2011CB302301;
NSFC under Grant 61025008; the NSERC Discovery Grant 341823;
US National Science Foundation Award 1116606. The authors
would like to thank the anonymous reviewers for their valuable and
constructive comments.
5. REFERENCES
[1] A. Muthitacharoen, B. Chen, and D. Mazieres, “A
low-bandwidth network ﬁle system,” Proc. SOSP, 2001.
[2] A. Anand, V. Sekar, and A. Akella, “SmartRE: an architecture
for coordinated network-wide redundancy elimination,” Proc.
SIGCOMM, 2009.
[3] B. Aggarwal, A. Akella, A. Anand, A. Balachandran,
P. Chitnis, C. Muthukrishnan, R. Ramjee, and G. Varghese,
“EndRE: an end-system redundancy elimination service for
enterprises,” Proc. NSDI, 2010.
[4] N. McKeown, T. Anderson, H. Balakrishnan, G. Parulkar,
L. Peterson, J. Rexford, S. Shenker, and J. Turner, “Openﬂow:
enabling innovation in campus networks,” ACM SIGCOMM
CCR, vol. 38, no. 2, pp. 69–74, 2008.
[5] M. Yu, J. Rexford, M. J. Freedman, and J. Wang, “Scalable
ﬂow-based networking with DIFANE,” Proc. SIGCOMM,
2010.
Figure 1: SSD based design in SMIND.
To support and evaluate SDN-enabled functionalities in SSD,
we implement a real SSD prototype that is event-driven, modu-
larly structured and multi-tiered. The SSD prototype consists of
the buffer and request-scheduling module, the FTL and allocation
module, and the low-level hardware platform module. Speciﬁcally,
the ﬁrst module is responsible for buffer organization and schedul-
ing requests. In the second module, the FTL module executes the
ﬁngerprint based schemes for SDN, and the allocation sub-module
supports the allocation between the logical and physical pages. The
third module supports the basic ﬂash operations.
3. RESULTS AND CONCLUSION
Figure 2 shows the transmission latencies of SMIND, source and
destination deduplication schemes, when transmitting up to 1TB
data. The maximum bandwidth is 50Gb/s in our OpenFlow based
data centers. The SDN controller uses our SSD prototype. We ob-
serve the destination scheme incurs the longest latency due to its
Indexing RequestsFingerprints GenerationFingerprints LookupSSDPagePagePage……Address TranslationWear LevelingGarbage CollectionFTLBlockBlockBlockPage writePage readBlock eraseLogical readLogical writeOperating SystemsVirtualized DeduplicationRedundancy IdentificationFlow Table ManagementPer-flow SchedulingEnergy OptimizationTransmitted Data Size (GB)Execution Latency (s)1010010000.11101001000SourceDestinationSMIND510