### Introduction and Background

Random et al. [28] present a solution for consensus problems in distributed systems, but their approach assumes reliable communication links. In this paper, we extend the communication model to address the consensus problem under more general conditions, building on the work of Santoro and Widmayer [25, 24].

### Communication Model and Impossibility Results

The communication model in our work includes an associated no fixed-time impossibility result. Specifically, there is no solution to the k-agreement problem (where \( k > \frac{n-1}{2} \) nodes must decide on the same value, either 0 or 1) if more than \( n - 2 \) links are allowed to fail at every synchronous communication step. This result is restrictive because a single node crash can cause \( n \) omission failures per round, preventing consensus.

Chockler et al. [11] described a system where nodes can fail by crashing, and messages can be lost due to collisions. Their protocol, which uses collision detectors to recover from message losses, does not cover message omissions. Borran et al. [6] address consensus under the heard-of specification (HO) [10], which allows for fine-grained control over message delivery patterns. However, their model assumes reliable periods of service, which may not be practical in some ad hoc scenarios.

### Fault Model and Dynamic Omission Failures

Our fault model assumes that up to \( f \) processes can fail in an arbitrary manner, including becoming Byzantine. These faulty processes can send incorrect messages or collude with other Byzantine processes to disrupt the correct operation of the system. Correct processes, on the other hand, follow the algorithm and are guaranteed to make progress.

The fault model also accommodates dynamic omission failures in message transmissions between two correct processes. If a message \( m \) transmitted by process \( P_i \) to process \( P_j \) is not received, it is subject to an omission failure. To ensure progress, we assume that there is a bounded number of omission failures per communication round, denoted by \( \gamma \).

### Cryptographic Functions and Random Bit Generators

Cryptographic functions used in the protocol are secure and cannot be subverted by an adversary. Each process \( P_i \in \Pi \) can call a local random bit generator to obtain unbiased bits observable only by \( P_i \). This ensures that the random bits generated are secure and not harmful to the system.

### New Upper Bound and Algorithm

Moniz et al. [19] address the issue of link failures by presenting a new upper bound of \( \left\lceil \frac{n - k}{2} \right\rceil + k - 2 \) omission faults per communication round. The algorithm in this paper tolerates not only dynamic transmission omissions but also a static, unknown subset of Byzantine nodes.

### Problem Definition: k-Consensus

The paper addresses the k-consensus problem, where a set of \( n \) processes, each holding a binary value \( v_i \in \{0, 1\} \), must reach a decision such that at least \( k \) processes agree on the same value. The algorithm ensures that all correct processes decide on the same value by the end of the cycle.

### Algorithm Description

The algorithm defines a broadcasting mechanism where each process \( P_i \) periodically broadcasts a message containing its identifier, phase, value, and status. The broadcast is triggered by a local clock tick (Lines 5-7). When a message arrives, it is validated to ensure it could have been sent by a correct process. Valid messages are accumulated in a set \( V_i \) (Line 9).

A process \( P_i \) performs a state transition based on its current internal state and the messages in \( V_i \). This transition occurs when one of the following conditions is met:
1. The set \( V_i \) holds a message with a phase value \( \phi \) higher than the current phase \( \phi_i \) of \( P_i \).
2. A specific condition is met (details in Section 6).

### Conclusion

In summary, this paper presents a robust consensus algorithm that extends the communication model to handle dynamic and static faults, ensuring that at least \( k \) processes can agree on a common value even in the presence of Byzantine and omission failures.