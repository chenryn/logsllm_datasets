On a regular `TextField`, the `onChange` event handler receives an event
parameter that allows to know the name of the `TextField` as well as the value
that was changed to:
    onChange = ({ target: { name, value } }) => {
      console.log('textfield changed', name, value); // -> { 'username': 'john-doe' }
    }
However, on a `TextField` with nested options, which renders internally a
`Select`, this is no longer the case. The element given as `target` in the
`onChange` event is the `li` of the dropdown list, which only has a `value`,
but no `name`.
  * I have searched the issues of this repository and believe that this is not a duplicate.
## Expected Behavior
The `onChange` event handler of a `{options}` should receive an event object where
`event.target.name` is `"xyz"`.
## Current Behavior
The `onChange` event handler of a `{options}` receives an event object where
`event.target.name` is `undefined`.
## Steps to Reproduce (for bugs)
  1. Visit https://codesandbox.io/s/nkq35z76wj
  2. Open the codesandbox.io console on the right bottom area of the page
  3. Change the name text field, see that it changes visually, and the name and value are present in the console
  4. Now change the gender select field. See that it does not change, and the console prints out undefined in place of the actual field name.
## Context
Having the name reflected in the event target is not only more compatible with
how actual form input events work in html, it is also convenient because you
can use the same onChange event handler for many input elements, instead of
dynamically having to generate a different event handler for different input
elements of a form.
## Your Environment
Tech | Version  
---|---  
Material-UI | 1.0.0-beta.17  
React | 16.0.0  
browser | Chrome latest