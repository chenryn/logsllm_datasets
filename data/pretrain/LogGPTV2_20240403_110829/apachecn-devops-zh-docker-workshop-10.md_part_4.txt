            ports:
            - containerPort: 80
              name: wordpress
    ```
    这个`Deployment`资源定义了一个三副本 WordPress 安装。有一个用`wordpress:4.8-apache`映像定义的容器，`database-service`作为环境变量传递给应用。在这个环境变量的帮助下，WordPress 连接到在*步骤 3* 中部署的数据库。此外，在端口`80`上定义了一个容器端口，这样我们就可以在下面的步骤中从浏览器到达应用。
6.  Deploy the WordPress Deployment with the following command:
    ```
    kubectl apply -f wordpress.yaml
    ```
    该命令部署`wordpress.yaml`文件中定义的资源:
    ```
    Deployment.apps/wordpress created
    ```
7.  Create a `wordpress-service.yaml` file on your local computer with the following content:
    ```
    apiVersion: v1
    kind: Service
    metadata:
      name: wordpress-service
    spec:
      type: LoadBalancer
      selector:
        app: wordpress
      ports:
        - protocol: TCP
          port: 80
          targetPort: 80
    ```
    这个服务资源在 WordPress 实例上定义了一个服务抽象。该服务将用于通过端口`80`从外部世界连接到 WordPress。
8.  Deploy the `Service` resource with the following command:
    ```
    kubectl apply -f wordpress-service.yaml
    ```
    该命令部署`wordpress-service.yaml`文件中定义的资源:
    ```
    Service/wordpress-service created
    ```
9.  Check the status of all running Pods with the following command:
    ```
    kubectl get pods
    ```
    该命令列出了所有状态的 Pods，有一个数据库和三个状态为`Running`的 WordPress Pods:
    ![Figure 10.13: Pod listing ](img/B15021_10_13.jpg)
    图 10.13: Pod 列表
10.  Get the URL of `wordpress-service` by running the following command:
    ```
    minikube service wordpress-service --url
    ```
    此命令列出可从主机访问的服务的网址:
    ```
    http://192.168.64.5:32765
    ```
    在浏览器中打开网址，进入设置屏幕:
    ![Figure 10.14: WordPress setup screen ](img/B15021_10_14.jpg)
图 10.14: WordPress 设置屏幕
设置屏幕指示 WordPress 实例正在运行，并且可以通过它们的服务访问。此外，它显示了`StatefulSet`数据库也正在运行，并且可以通过 WordPress 实例通过其服务进行访问。
在本练习中，您使用了不同的 Kubernetes 资源来定义和安装 Kubernetes 中的复杂应用。首先，您部署了一个`Statefulset`资源，用于在集群中安装 MySQL。然后，您部署了一个`Service`资源来访问集群中的数据库。接下来，您部署了一个`Deployment`资源来安装 WordPress 应用。同样，您创建了另一个`Service`来到达集群之外的 WordPress 应用。您已经使用不同的 Kubernetes 资源创建了独立可扩展且可靠的微服务，并将它们连接起来。此外，您还学习了如何检查`Pods`的状态。在下一节中，您将了解 Kubernetes 包管理器:Helm。
# 不可思议的套装管理员:头盔
由于云原生微服务架构的特性，Kubernetes 应用由多个容器、卷和网络资源组成。微服务体系结构将大型应用分成更小的块，从而产生大量的 Kubernetes 资源和大量的配置值。
Helm 是官方的 Kubernetes 包管理器，它收集应用的资源作为模板，并用提供的值填充它们。这里的主要优势是积累了使用最佳实践安装应用的社区知识。你可以用最流行的方法安装一个应用，即使你是第一次使用它。此外，使用 Helm 图表可以增强开发人员的体验。
例如，在 Kubernetes 中安装和管理复杂的应用变得类似于在苹果商店或谷歌 Play 商店下载应用，命令和配置更少。在 Helm 术语中，单个应用的资源集合是一个**图表**。当您使用 Helm 包管理器时，图表可以用来部署任何东西，从简单的 pod 到包含 HTTP 服务器、数据库、缓存等的完整 web 应用栈。将应用封装为图表使得部署复杂的应用更加容易。
此外，Helm 还有一个图表存储库，其中包含流行且稳定的应用，这些应用被打包为图表并由 Helm 社区维护。稳定的 Helm 图表存储库有各种各样的应用，包括数据库，如 MySQL、PostgreSQL、CouchDB 和 InfluxDB 配置项/光盘工具，如詹金斯、中央大厅和无人机；或者使用 Grafana、Prometheus、Datadog 和 Fluentd 等监控工具。图表存储库不仅使安装应用变得更加容易，而且还确保您使用 Kubernetes 社区中最新的、广为接受的方法来部署应用。
Helm 是一个客户端工具，最新版本是 Helm 3。您只需要在本地系统上安装它，为图表存储库配置它，然后就可以开始部署应用了。Helm 是一个强大的包管理器，它有一套详尽的命令，包括以下命令:
*   `helm repo`:此命令向本地 Helm 安装添加、列出、删除、更新和索引图表存储库。
*   `helm search`:此命令使用用户提供的关键字或图表名称在各种存储库中搜索 Helm 图表。
*   `helm install`:这个命令在 Kubernetes 集群上安装一个 Helm 图表。也可以用值文件或命令行参数设置变量。
*   `helm list`或`helm ls`:这些命令列出了集群中已安装的图表。
*   `helm uninstall`:这个命令从 Kubernetes 中删除一个已安装的图表。
*   `helm upgrade`:此命令使用集群上的新值或新图表版本升级已安装的图表。
在下面的练习中，您将安装 Helm，连接到图表存储库，并在集群上安装应用。
## 练习 10.04:安装 MySQL 掌舵图
掌舵图由官方客户端工具`helm`安装和管理。您需要在本地安装`helm`客户端工具，从图表存储库中检索图表，然后在集群上安装应用。在本练习中，您将开始使用 Helm，并从其稳定的 Helm 图表中安装 **MySQL** 。
要完成本练习，请执行以下步骤:
1.  Run the following command in your terminal to download the latest version of the `helm` executable with the installation script:
    ```
    curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
    ```
    该脚本为您的操作系统下载适当的二进制文件`helm`，并准备在终端中使用:
    ![Figure 10.15: Installation of Helm ](img/B15021_10_15.jpg)
    图 10.15:舵的安装
2.  Add the chart repository to `helm` by running the following command in your terminal:
    ```
    helm repo add stable https://kubernetes-charts.storage.googleapis.com/
    ```
    该命令将图表存储库的网址添加到本地安装的`helm`实例中:
    ```
    "stable" has been added to your repositories
    ```
3.  List the charts in the `stable` repository from *Step 2* with the following command:
    ```
    helm search repo stable
    ```
    此命令将列出存储库中所有可用的图表:
    ![Figure 10.16: Chart repository listing ](img/B15021_10_16.jpg)
    图 10.16:图表存储库列表
4.  Install the MySQL chart with the following command:
    ```
    helm install database stable/mysql
    ```
    该命令将从名为`database`的`stable`存储库中安装 MySQL Helm 图表，并打印如何连接到数据库的信息:
    ![Figure 10.17: MySQL installation ](img/B15021_10_17.jpg)
    图 10.17: MySQL 安装
    如果您想使用集群内部或外部的`mysql`客户端连接到 MySQL 安装，输出中的信息很有价值。
5.  Check the status of the installation with the following command:
    ```
    helm ls
    ```
    我们可以看到有一个`mysql-chart-1.6.2`的安装，状态为`deployed`:
    ![Figure 10.18: Helm installation status ](img/B15021_10_18.jpg)
    图 10.18:头盔安装状态
    您也可以使用`helm ls`命令检查应用和图表版本，如`5.7.28`和`mysql-1.6.2`。
6.  Check for the Kubernetes resources related to the installation from *Step 4* with the following command:
    ```
    kubectl get all -l release=database
    ```
    该命令列出所有带有标签`release = database`的资源:
    ![Figure 10.19: Kubernetes resource listing ](img/B15021_10_19.jpg)
图 10.19: Kubernetes 资源列表
这里列出了各种资源，因为生产级 MySQL 实例的安装并不简单，而是由多个资源组成。多亏了 Helm，我们不需要配置和连接这些资源。此外，带有标签`release = database`的列表有助于在 Helm 安装的某些部分失败时提供故障排除概述。
在本练习中，您已经安装并配置了 Kubernetes 包管理器 Helm，并使用它安装了应用。如果您计划将 Kubernetes 用于生产并需要管理复杂的应用，Helm 是一个必不可少的工具。
在下面的活动中，您将配置全景徒步旅行应用并将其部署到 Kubernetes 集群。
## 活动 10.01:在 Kubernetes 上安装全景徒步应用
您已被指派在 Kubernetes 上创建全景徒步旅行应用的部署。您将利用全景徒步旅行应用的三层架构和最先进的 Kubernetes 资源。您将使用 Helm 安装数据库，并使用 Statefulset 安装带有`nginx`的后端。因此，您将把它设计成一个 Kubernetes 应用，并用`kubectl`和`helm`管理它。
执行以下步骤完成练习:
1.  使用 PostgreSQL Helm 图表安装数据库。确保`POSTGRES_PASSWORD`环境变量设置为`kubernetes`。
2.  为全景徒步应用后端和`nginx`创建一个包含两个容器的状态集。确保您使用的是容器的 Docker 映像`packtworkshops/the-docker-workshop:chapter10-pta-web`和`packtworkshops/the-docker-workshop:chapter10-pta-nginx`。为了存储静态文件，您需要创建一个`volumeClaimTemplate`部分，并将其安装到两个容器的`/Service/static/`路径上。最后，别忘了公布`nginx`容器的港口`80`。
3.  为全景徒步应用创建一个 Kubernetes 服务，以连接到在*步骤 2* 中创建的状态集。确保服务的`type`为`LoadBalancer`。
4.  With a successful deployment, obtain the IP of the Kubernetes Service created in *Step 3* and connect to the `$SERVICE_IP/admin` address in the browser:
    ![Figure 10.20: Admin login ](img/B15021_10_20.jpg)
    图 10.20:管理员登录
5.  Log in with the username `admin` and the password `changeme` and add new photos and countries:
    ![Figure 10.21: Admin setup  ](img/B15021_10_21.jpg)
    图 10.21:管理设置
6.  The Panoramic Trekking App will be available at the address `$SERVICE_IP/photo_viewer` in the browser:
    ![Figure 10.22: Application view ](img/B15021_10_22.jpg)
图 10.22:应用视图
注意
此活动的解决方案可以通过[这个链接](16.html#_idTextAnchor345)找到。
# 总结
本章重点介绍如何使用 Kubernetes 来设计、创建和管理容器化的应用。Kubernetes 是市场上的后起之秀，采用率高，社区活跃。在本章中，您已经了解了它的体系结构和设计，接下来是 Kubernetes API 及其访问方法，并深入到重要的 Kubernetes 资源中创建复杂的云原生应用。
本章中的每个练习都旨在说明 Kubernetes 的设计方法及其功能。使用 Kubernetes 资源及其官方客户端工具`kubectl`，可以配置、部署和管理容器化的应用。
在下一章中，您将了解 Docker 世界中的安全性。您将学习容器运行时、容器映像和 Linux 环境的安全概念，以及如何在 Docker 中安全地运行容器。