tions. Participants were allowed to participate in only one round.
If a participant was in more than one rounds of the study, we kept
only the data from the ﬁrst time that the participant was in.
Participants were asked to type the sentence used in the interme-
diate step. After that, participants were asked to enter the password
they created twice, and the password typed in each time had to
match each other before they could proceed.
We warned participants not to use their actual passwords.
In
the study, we forbade passwords that were the same as the exam-
ples and that did not appear to be generated following the instruc-
tions.
In MneGenEx, MnePerEx, MnePer, and MneEx, we re-
quired the length of the password to be identical to the number of
words, and further checked if a letter in a password can be found in
the corresponding word in the sentence; no check was performed
for digits and special symbols in the password. In MneSchEx and
MneYanEx, a participant was allowed to keep a complete word in
the resulting password; thus we cannot use the above approach.
Instead, we required that the sequence of letters (ignoring special
symbols or digits) in a password was a subsequence of the sequence
of letters in the sentence.
3.2 Methodology
Our goal in this study is to assess the security of the passwords
generated by the different password generation strategy variants.
The traditional approach to assess the strength of passwords gen-
erated under a given setting is to use password cracking tools or
probabilistic password models to plot guess number graphs [21,
22, 24, 23, 27, 34, 37] or probability threshold graphs [26].
The above approach can assess the security of passwords against
current password cracking tools and probabilistic password mod-
els, which are adapted to today’s password distributions; however,
it cannot adequately assess the strength of password creation strate-
gies against attacks targeting these strategies. If a strategy is widely
used, then attackers may develop strategy-speciﬁc methods which
can efﬁciently guess the passwords. For any password creation
strategy, one attack strategy is to conduct a dictionary attack which
use password datasets created using the strategy as the dictionary.
For the mnemonic strategy, an adversary can also create a dictio-
nary of sentences that people are likely to use, and then generate
guesses from the sentences.
An alternative approach, as articulated by Bonneau [7], is to
measure the probability distribution induced by the strategy. A
number of metrics on the strength of password distributions have
been proposed by Bonneau [7]. In the case of evaluating passwords
obtained from user subject studies, the datasets are quite small (on
the scale of several hundreds in our case). One metric that is ap-
propriate for small datasets is the β-guess-rate (λβ) [11], which is
the total probability of the most common β passwords with some
small β. λβ measures the expected success for an attacker limited
to β guesses per account. Brostoff and Sasse [12] suggested 10 as
the allowed failure counts before the account is locked.
Given a sample set S, we use top(S) to denote the number of
times that the most frequent password appears in S, and top10(S)
Variant
MneGenEx
Short Description
Mnemonic with
generic example,
used in Kuo et
al. [24]
MnePerEx
MnePer
MneEx
Mnemonic with
emphasis on
personalization,
with an example.
Mnemonic with
emphasis on
personalization,
without giving an
concrete example.
Mnemonic with
several
personalized
phrases as
examples.
MneSchEx
Mnemonic with
mixed examples,
used in [32]
MneYanEx
Mnemonic with
mixed examples,
used in [44, 45].
Table 1: Mnemonic-based Strategy Variants
Exact instruction given to the users in the study
1. Think of a memorable sentence or phrase containing at least seven or eight words. For example,
“Four score and seven years ago our fathers brought forth on this continent”.
2. Select a letter, number, or a special character to represent each word. A common method is to
use the ﬁrst letter of every word.For example: four ⇒ 4, score ⇒ s, and ⇒ &. Combine them into
a password: 4s&7yaofb4otc.
1. Think of a memorable sentence or phrase that is meaningful to you, and other people are unlikely
to use. The sentence or phrase should contain at least eight words. For example, “I went to London
four and a half years ago”.
2. Select a letter, number, or a special character to represent each word. A common method is to
use the ﬁrst letter of every word. For example: went ⇒ w, four ⇒ 4, and ⇒ &. Combine them
into a password: iwtl4&ahya.
1. Think of a memorable sentence or phrase that is meaningful to you, and other people are unlikely
to use. The sentence or phrase should contain at least eight words.
2. Select a letter, number, or a special character to represent each word, and combine them to create
the password.
1. Think of a memorable sentence or phrase containing at least eight words.
2. Select a letter, number, or a special character to represent each word, and combine them to create
the password.
The following are some examples:
“In June 2013, my wife and I visited Tokyo, Kyoto, and Sapporo” might become “i63mw&ivTk&$".
“Run 5 miles per week for my ﬁrst half marathon” might become “r5mpw4mfhm”.
“My high school classmates had a reunion in July 2014” might become “Mhscharij2”.
“I sold my gold Toyota corolla when it had close to 120000 miles” might become
“i$mgtcwIhc21m”.
“Danny bought the book The Razor’s Edge from me for ﬁve dollars” might become “Dbtb-
trefm45d”.
“Save money for traveling with my parents to Germany” might become “S$4twmp2G”.
1. First create a personally memorable sentence (choose your own sentence – something personal).
2. Then use some personally memorable tricks to modify that sentence into a password.
The following are some examples:
“This little piggy went to market” might become “tlpWENT2m”.
“When I was seven, my sister threw my stuffed rabbit
“WIw7,mstmsritt”.
“Wow, does that couch smell terrible” might become “Wow...doestcst”.
“Long time ago in a galaxy not far away at all” might become “Ltime@go-inag faaa!”.
“Until this very moment, these passwords were still secure” might become “utvm,tpwstillsecure”.
1. Please create a simple sentence of 8 words and choose letters from the words to make up a
password. You should put some letters in upper case to make the password harder to guess; and at
least one number and/or special character should be inserted as well.
2. Use this method to generate a password of 7 or 8 characters.
An example of such a composition might be using the phrase is “It’s 12 noon I am hungry” to create
the password “I’s12&Iah” which is hard for anyone else to guess but easy for you to remember.
By all means use a foreign language if you know one: the password “AwKdk.Md” from the phrase
“Anata wa Kyuuketsuki desu ka ... Miyu desu” would be an example. You could even mix words
from several languages. However, do not just use a word or a name from a foreign language.
in the toilet” might become
and ˜λ10 = top10(S)
to denote the total number of the times the 10 most frequent items
occur in S. The estimated density of top 1 and top 10 passwords
are calculated by ˜λ1 = top(S)
, where |S| is the
|S|
size of S.
We want to tell whether the differences in these metrics between
two datasets are statistically meaningful or not, given that we have
small datasets. To address the issue, for a given β, we test the
null hypothesis that the total density of top β passwords in the two
datasets are the same using the two proportion z-test, calculated by:
|S|
and p2 = x2
n2
where p1 = x1
are the two proportions from the
n1
two samples, i.e., total density of top β passwords in two datasets;
n1 and n2 are the size of the two datasets; p is pooled sample pro-
; and x1 and x2 are the total
portion, which is estimated by x1+x2
n1+n2
frequencies of top β passwords in the two datasets.
We also apply these metrics to the sentences used in generating
passwords, because passwords based on the same sentence are not
independent of each other.
z =
p1 − p2
!p(1 − p)( 1
n1
+ 1
n2
)
4. RESULTS FROM STUDY 1
We recruited 864, 793, 797, 795, 982, and 870 participants for
the 6 variants of the mnemonic strategy. After removing dupli-
cate participants, the number of participants we accepted was 864,
777, 753, 745, 868, and 799, respectively. The number of partici-
pants recruited in the control group (Control) is 678. In total, 5,484
(3,205 female) participants were involved. The participants’ ages
ranged from 18 to over 50, with about 70% between 23 to 50 years.
Most of the participants were college students or professionals who
had bachelor or higher degrees. The demographic distributions in
the 7 groups were similar.
4.1 Analyzing Passwords Using Probability
Models and Password Strength Meters
We ﬁrst evaluate the strength of passwords generated using the
variants as well as two commonly used datasets Yahoo and phpBB
against today’s attacks, utilizing (1) the 5-order Markov Model
trained on Rockyou dataset, (2) Google password strength API1,
and (3) Zxcvbn [41] deployed by Dropbox. Google password
strength API produces an integer score from 1 to 4 for a password.
Passwords with score 1 are considered too weak and are forbidden
by Google, and passwords with score 4 are considered strong. Zx-
cvbn gives an estimation of minimum entropy for a password. The
entropy is calculated by ﬁrst dividing the password into chunks,
and then combining the entropy estimated for each chunk. Dif-
ferent ways of dividing the password results in different estimated
entropy, and Zxcvbn uses the smallest entropy as its output.
In Fig 1(a), each curve conveys the strength of a password dataset
evaluated by a 5-order Markov Model trained on Rockyou dataset.
A point (x, y) on a curve means that in the corresponding dataset, y
percentage of passwords have probability no less than 2−x. Curves
in Fig 1(b) and Fig 1(c) illustrate the evaluation based on Google
password strength API and zxcvbn, respectively. A point (x, y) on
a curve means y percentage passwords in the corresponding dataset
has a score no higher than x. In the graphs, a lower curve means
passwords from the corresponding variant are considered stronger.
In all three graphs, the curve for the control group (Control) is
below the curves for Yahoo and phpBB, indicating that passwords
created in the study are stronger than that in real-world datasets.
Therefore, the security of passwords created in the study can serve
as a lower-bound measurement. On the other hand, curves for Ya-
hoo, phpBB, and Control are signiﬁcantly higher than the other
curves. This indicates that according to the metrics, passwords
created without any speciﬁc strategy are signiﬁcantly weaker than
those following the mnemonic strategy. When guessing accord-
ing to the order suggested by the metrics, more passwords in Ya-
hoo, phpBB, and Control will be cracked than passwords from any
mnemonic strategy variant. For example, if all passwords with
score less than 25 measured by Zxcvbn are attempted, more than
50% of passwords from Yahoo, phpBB, and Control will be cov-
ered, while in the 6 mnemonic strategy variants, the percentage
of passwords cracked is less than 15%. However, this conclu-
sion is due to the fact that the model or the meters are designed
to evaluate generally selected passwords, which is broadly similar
to passwords in Yahoo and phpBB, and passwords generated from
the mnemonic strategy result in quite different distributions.
Table 2 shows the average lengths of passwords generated from
the 6 variants and the control group (Control) as well as passwords
in Yahoo and phpBB datasets. From the table, we can observe that
passwords generated by using MneSchEx is longer than passwords
generated by using other variants. This is because the instructions
1https://accounts.google.com/RatePassword
for MneSchEx use examples in which some whole words (instead
of just one character) are included when converting a sentence into
a password, and some participants followed the same practice. We
also observe that the average length of passwords from MneGenEx
is longer than those from variants that require personalized choice
of sentences (MnePerEx, MnePer, MneEx). This is because the
length of personalized sentences (and the resulting passwords) is
relatively easy to control, and people generally prefer short pass-
words. On the other hand, many users selected well-known quotes
in MneGenEx; these quotes can be quite long. From the table, we
can also observe that passwords created in Control is longer than
passwords in Yahoo and phpBB datasets. This likely contributes to
the conclusion that passwords from Control are stronger than those
from Yahoo and phpBB according to the metrics in Fig 1. However,
although the average length of passwords in Control is longer than
passwords from some mnemonic variants, passwords in Control
are weaker than them according to Fig 1. This suggests that char-
acter sequences in passwords from the mnemonic strategy appear
relatively infrequently in dictionaries and common passwords.
4.2 Strength of Mnemonic Sentences
We evaluate the strength of sentences used in the mnemonic
strategy as well as the resulted passwords utilizing ˜λ1 and ˜λ10
metrics. Table 3 shows the ˜λ1 (top) and ˜λ10 (top10) values of
passwords generated by the control group (Control). Also shown
in the table are the quantities evaluated on sets of 800 passwords
randomly sampled from three commonly used password datasets
Rockyou, phpBB and Yahoo. Table 4 gives the ˜λ1 (top) and
˜λ10 (top10) values of sentences and the resulted passwords for all
mnemonic sentence-based variants.
The control group (Control). In Control, the ˜λ1 and ˜λ10 are 0.9%
and 2.9%, respectively, which are close to the quantities from the
real-world datasets. For instance, the Rockyou dataset has ˜λ1 =
0.9% and ˜λ10 = 3.1%. Although the passwords created in the
study are stronger than those in real-world datasets, according to
the existing strength metrics, as illustrated in Fig 1, the strengths of
the weakest passwords are similar. If an adversary is limited to try
10 passwords per account (e.g., by rate limiting), a similar number
of accounts will be compromised.
Finding 1: Using generic instructions and examples results in
weak passwords. MneGenEx uses the instructions as in [24] and
one of the examples used in [24]. We were truly surprised by the
high frequencies of the most common sentences and passwords.
Among the 864 participants, there were 57 sentences chosen more
than once, for a total of 179 times, and the 10 most popular sen-
tences (top10) were picked 68 times. 22 participants chose the fa-
mous quote “to be or not to be, that is the question”. This yielded
˜λ1 = 2.5%, ˜λ10 = 7.8%. See Table 5 for other commonly chosen
sentences, which are also well-known quotes in general, and the
resulting passwords.
In terms of those passwords, if passwords are case-insensitive,
36 passwords generated by following the MneGenEx variant ap-
peared more than once, and the most common password was cho-
sen 8 times, with ˜λ10 = 5.3%. Even taking case-sensitivity into ac-
count, there were still 27 non-unique passwords, with the top count
number to be 7, and ˜λ10 = 3.1%, as the majority of the partici-
pants did not use upper-case letters. Comparing ˜λ10 resulted from
Control (2.9%) and MneGenEx (4.1%), it appears that the pass-
word distribution resulted from MneGenEx is likely to be weaker
than Control.
Finding 2:
Instructions speciﬁcally requesting personalized
sentences and containing appropriate examples lead to strong
(a) 5-order Markov Model
(b) Google API
(c) Zxcvbn
Figure 1: Comparison of strength of passwords resulted from different variants and datasets using probabilistic models and passwords
strength meters.
Table 2: Average length of passwords in each variant as well as Yahoo and phpBB datasets.
Variant/Dataset Yahoo