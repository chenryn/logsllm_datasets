# 九、Kolla——OpenStack 的容器化部署
在这一章，你将了解 Kolla。它为操作 OpenStack 云提供了生产就绪的容器和部署工具。本章内容如下:
*   Kolla 游戏攻略
*   主要特征
*   体系结构
*   部署容器化的 OpenStack 服务
# Kolla 游戏攻略
OpenStack 云由多个服务组成，每个服务都与其他服务交互。OpenStack 没有集成的产品版本。每 6 个月后，每个项目都遵循一个发布周期。这为操作员从多个选项中进行选择提供了更大的灵活性，并为他们构建了自定义部署解决方案。然而，这也带来了部署和管理 OpenStack 云的复杂性。
这些服务需要是可扩展的、可升级的和容易获得的。Kolla 提供了一种在容器中运行这些服务的方法，这为 OpenStack 云的快速、可靠、可扩展和可升级增加了优势。Kolla 打包了 OpenStack 服务及其需求，并在容器映像中设置了所有配置。
Kolla 使用 Ansible 运行这些容器映像，并在裸机或虚拟机上非常容易地部署或升级 OpenStack 集群。Kolla 容器被配置为将数据存储在持久存储上，然后可以将其装载回主机操作系统并成功恢复，以防止任何故障。
为了部署 OpenStack，Kolla 有以下三个项目:
*   **kolla:**OpenStack 项目的所有 Docker 容器映像都在这个项目中维护。Kolla 提供了一个名为 kolla-build 的映像构建工具，为大多数项目构建容器映像。
*   **kolla-ansible** :这提供了在 Docker 容器中部署 OpenStack 的 ansible 行动手册。它支持 OpenStack 云的一体化和多节点设置。
*   **kolla-kubernetes** :这在 kubernetes 上部署了 OpenStack。这旨在利用 Kubernetes 的自我修复、运行状况检查、升级和其他功能来管理容器化的 OpenStack 部署。kolla-kubernetes 使用 Ansible 行动手册和 Jinja2 模板为服务生成配置文件。
# 主要特征
在本节中，我们将看到 Kolla 的一些关键特性。
# 高可用性部署
OpenStack 生态系统由多个服务组成，这些服务只运行其中的一个实例，这有时会成为发生任何灾难时的单点故障，并且它无法扩展到单个实例之外。为了使它具有可扩展性，Kolla 部署了配置了高可用性的 OpenStack 云。因此，即使任何服务出现故障，它也可以在不中断当前操作的情况下进行扩展。这一特性使 Kolla 成为无需停机即可轻松升级和扩展的理想解决方案。
# Ceph 支持
Kolla 使用 Ceph 向运行我们的 OpenStack 环境的虚拟机添加持久数据，这样我们就可以轻松地从任何灾难中恢复，从而使 OpenStack 云更加可靠。Ceph 也用于存储扫视映像。
# 形象塑造
Kolla 提供了一个名为 kolla-build 的工具，用于在多个发行版(如 CentOs、Ubuntu、Debian 和 Oracle Linux)上构建容器映像。可以一次构建多个依赖组件。
# Docker 集线器支持
您可以直接从 Docker Hub 中提取映像。你可以在 https://hub.docker.com/u/kolla/看到所有的 Kolla 映像。
# 本地注册表支持
Kolla 还支持将映像推送到本地注册表。设置本地注册表请参考[https://docs . open stack . org/kolla-ansi ble/latest/user/multi node . html # deploy-a-registry](https://docs.openstack.org/kolla-ansible/latest/user/multinode.html#deploy-a-registry)。
# 多个构建源
Kolla 支持从多个来源构建二进制文件和源代码。二进制文件是由主机操作系统的包管理器安装的包，而源可以是 URL、本地存储库或 tarball。详见[https://docs . open stack . org/kolla/latest/admin/image-building . html # build-open stack-from-source](https://docs.openstack.org/kolla/latest/admin/image-building.html#build-openstack-from-source)。
# Dockerfile 自定义
Kolla 支持从 Jinja2 模板构建映像，这为运营商的定制提供了更好的灵活性。操作员可以定制他们的映像构建，以包括额外的包、安装插件、更改一些配置设置等等。有关如何进行不同定制的更多详细信息，请参考[https://docs . open stack . org/kolla/latest/admin/image-building . html # docker file-customization](https://docs.openstack.org/kolla/latest/admin/image-building.html#dockerfile-customisation)。
# 体系结构
在本节中，我们将看到使用 Kolla 的 OpenStack 架构。下图显示了由 Kolla 完成的**高可用** ( **HA** ) OpenStack 多模式设置。
这里的基础设施工程是指为基础设施管理而编写的代码或应用。代码被提交给 Gerrit 进行审查，然后 CI 系统审查并检查代码的正确性。一旦代码被配置项批准，光盘系统将构建的输出，即基于 Kolla 的 OpenStack 容器，馈送到本地注册表中。
之后，Ansible 联系 Docker，启动我们的 OpenStack 多节点环境，并提供高可用性:
![](img/00031.jpeg)
# 部署容器化的 OpenStack 服务
在本节中，我们将了解 Kolla 如何使用 kolla-ansible 部署容器化的 OpenStack。在撰写本文时，kolla-kubernetes 正在开发中。
Note that this is not a complete guide to Kolla.
Kolla 现在正在进化，所以指南升级非常频繁。参考在[https://docs.openstack.org/kolla-ansible/latest/](https://docs.openstack.org/kolla-ansible/latest/)提供的最新文件。我们将尝试使用 Kolla 和子项目来解释 OpenStack 的一般部署过程。
用 Kolla 部署 OpenStack 非常容易。Kolla 在 Docker 或 Kubernetes 上提供了一体化和多节点安装。它基本上包括四个步骤:
*   设置本地注册表
*   自动主机引导
*   建筑映像
*   部署映像
# 设置本地注册表
需要一个本地注册表来存储 Kolla 构建的容器映像。它对于一体化部署是可选的，可以使用 Docker 缓存来代替。Docker Hub 包含了 Kolla 所有主要版本的所有映像。但是，强烈建议多节点部署确保单一映像源。还建议您在 HTTPS 上运行注册表，以保护生产环境中的映像。
Refer to the guide at [https://docs.openstack.org/kolla-ansible/latest/user/multinode.html#deploy-a-registry](https://docs.openstack.org/kolla-ansible/latest/user/multinode.html#deploy-a-registry) for detailed steps for setting up a local registry.
# 自动主机引导
Kolla 安装需要一些包和工具，比如 Docker、libvirt 和 NTP，安装在我们希望我们的 OpenStack 运行的主机上。这些依赖项可以由主机引导自动安装和配置。kolla-ansible 提供了引导服务器行动手册，用于准备和安装 OpenStack 安装的主机。
要快速准备主机，请运行以下命令:
```
$ kolla-ansible -i  bootstrap-servers  
```
# 建筑映像
在这一步中，我们将为所有 OpenStack 服务构建 Docker 容器映像。我们可以在构建映像时为我们的映像、源和标签指定基础发行版。映像被推送到本地注册表。
在 Kolla 构建映像就像运行以下命令一样简单:
```
$ kolla-build  
```
默认情况下，该命令基于 CentOS 构建所有映像。要使用特定发行版构建映像，请使用`-b`选项:
```
$ kolla-build -b ubuntu  
```
要为特定项目构建映像，请将项目名称传递给命令:
```
$ kolla-build nova zun  
```
Kolla 的一个高级功能是映像配置文件。概要文件用于在 OpenStack 中定义一组相关的项目。Kolla 的一些定义概要如下:
*   **基础设施**:所有基础设施相关项目
*   **主要**:这些是 OpenStack 的核心项目，比如 Nova、中子、KeyStone、Horizon
*   **aux** :这些是 Zun、讽刺等追加项目
*   **默认**:这些是一个就绪云所需的一组最小项目
也可以在`kolla-build.conf`对象中定义新的轮廓。为此，只需在`.conf`文件的`[profile]`部分下添加一个新的配置文件:
```
[profiles]
containers=zun,magnum,heat  
```
在前面的例子中，我们设置了一个名为`containers`的新概要文件来表示 OpenStack 中与容器化相关的一组项目。`heat`项目也被提及和使用，是因为`magnum`要求。此外，您可以使用此配置文件为这些项目创建映像:
```
$ kolla-build -profile containers  
```
还可以使用以下命令将映像推送到 Docker Hub 或本地注册表:
```
$ kolla-build -push # push to Docker Hub
$ kolla-build -registry  --push # push to local registry  
```
Kolla also provides more advanced operations such as building image from source and Docker file customization. You can refer to [https://docs.openstack.org/kolla/latest/admin/image-building.html](https://docs.openstack.org/kolla/latest/admin/image-building.html) [for more details.](https://docs.openstack.org/kolla/latest/admin/image-building.html)
# 部署映像
现在我们拥有了 OpenStack 部署所需的所有映像；kolla-ansible 联系 Docker，并提供这些映像来运行它们。部署可以是多合一或多合一的。该决定是根据 kolla-ansible 中可用的 Ansible 库存文件做出的。此清单文件包含群集中基础架构主机的相关信息。Kolla 中的部署过程采用配置文件和清单文件中指定的环境变量和密码来提供高可用性的 OpenStack 集群。
所有用于 OpenStack 部署的配置选项和密码分别存储在`/etc/kolla/globals.yml`和`/etc/kolla/passwords.yml`中。手动编辑这些文件以指定您选择的安装，如下所示:
```
kolla_base_distro: "centos"
kolla_install_type: "source"  
```
您可以使用以下命令生成密码:
```
$ kolla-genpwd  
```
您可以在部署目标节点上运行`prechecks`来检查它们是否处于状态:
```
$ kolla-ansible prechecks -i   
```
现在我们已经准备好部署 OpenStack 了。运行以下命令:
```
$ kolla-ansible deploy -i   
```
要验证安装，请参见`docker`中的容器列表:
```
$ docker ps -a  
```
您应该看到所有的 OpenStack 服务容器都在运行。现在让我们生成`admin-openrc.sh`文件来使用我们的 OpenStack 集群。生成的文件将存储在`/etc/kolla`目录中:
```
$ kolla-ansible post-deploy  
```
现在安装`python-openstackclient`:
```
$ pip install python-openstackclient  
```
要初始化中子网络和扫视映像，运行以下命令:
```
$ . /etc/kolla/admin-openrc.sh
#On centOS
$ /usr/share/kolla-ansible/init-runonce
#ubuntu
$ /usr/local/share/kolla-ansible/init-runonce  
```
OpenStack 部署成功后，就可以访问 Horizon 仪表盘了。地平线将在`kolla_external_fqdn`或`kolla_internal_fqdn`中指定的 IP 地址或主机名处可用。如果在部署期间没有设置这些变量，它们将默认为`kolla_internal_vip_address`。
Refer to [https://docs.openstack.org/project-deploy-guide/kolla-ansible/latest/multinode.html](https://docs.openstack.org/project-deploy-guide/kolla-ansible/latest/multinode.html) for detailed steps of deploying a multi-node OpenStack cloud using kolla-ansible and [https://docs.openstack.org/kolla-kubernetes/latest/deployment-guide.html](https://docs.openstack.org/kolla-kubernetes/latest/deployment-guide.html) using kolla-kubernetes.
# 摘要
在本章中，您了解了部署容器化 OpenStack 云的 Kolla。我们查看了 Kolla 现有的各种项目，了解了它们的总体情况。然后我们研究了 Kolla 的一些关键特性，并讨论了用于 OpenStack 部署的 Kolla 架构。您还学习了如何使用 Kolla 构建映像，并最终了解了 Kolla 的部署过程。
在下一章中，我们将研究保护容器安全的最佳实践，以及使用不同 OpenStack 项目的优势。