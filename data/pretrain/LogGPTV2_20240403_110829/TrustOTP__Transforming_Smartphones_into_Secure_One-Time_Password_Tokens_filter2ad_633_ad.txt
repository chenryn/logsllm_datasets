Wdog 2 will not raise interrupt when it times out in the
normal domain. After the user-deﬁned button 1 is pressed,
TrustOTP draws the generated OTPs into the framebuﬀer
and enables the interrupt of Wdog 2. Then TrustOTP re-
turns to the normal domain to run the Rich OS. When the
Wdog 2 times out, it raises an NMI that suspends the Rich
OS and switches the system into the secure domain uncon-
ditionally. Then the generated OTPs are displayed on the
983screen for a while. After the display ends, TrustOTP re-
sets the counter of Wdog 2 to make it continue running and
switches back to the Rich OS. In this manner, TrustOTP
and the Rich OS runs in turn until the user-deﬁned button
1 is pressed again. Then, TrustOTP disables the interrupt
of Wdog 2 to stop switching into the secure domain after
TrustOTP transfers the control back to the Rich OS.
The time interval between two rounds of OTP display is
conﬁgurable. It should be short enough so the user will not
waste time waiting for the next display. The OTP display
time should be short enough so the user will not waste time
waiting for the Rich OS to run. However it should be long
enough for the user to recognize the OTP clearly. OTP
display time should be longer than 1/24 second due to phi
phenomenon [9]. In our prototype, the time interval between
two displays is set to 1.5 seconds. The length of OTP display
time is determined by a while loop. In the loop an integer
i increases by one from 0 until i reaches a threshold, which
is set to 0x4ffffff in our prototype.
6. PERFORMANCE EVALUATION
We measure the performance overhead and the power
consumption for generating and displaying the OTPs in
TrustOTP. We use the performance monitor in the Cortex-
A8 processor to count the CPU cycles and then convert the
cycles to time by multiplying 1 ns / cycle. We conduct
each experiment 50 times and report the average value. We
use Monsoon Power Monitor [45] to evaluate the power con-
sumption of TrustOTP.
6.1 Time Breakdown
In our prototype, when the user presses the physical but-
ton, an NMI is triggered and the Rich OS is suspended.
OTPs are generated and displayed periodically (e.g. 1 sec-
ond) until the user presses the button again. Before the
OTPs are displayed, there is preparation time when the
Rich OS is suspended but TrustOTP is not ready for use.
We break down the preparation time between the NMI trig-
gered and the OTP displayed on the monitor into 7 parts,
as shown in Table 2.
It takes less than 2 us to switch from the normal domain
to the secure domain. We measure the switching times us-
ing both the user-deﬁned button 1 and the Wdog 2. When
the button is pressed, it takes 1.7 us for the system to en-
ter the secure domain; it takes 1.8 us to enter the secure
domain after Wdog 2 is triggered. TrustOTP saves the con-
text information of the Rich OS in 0.6 us. It saves all the
33 general-purpose registers of the processor into the secure
memory.
It takes 48 us to generate a TOTP and 44 us
to generate a HOTP. Then to create a smooth user friendly
display of the OTPs, TrustOTP copies the non-secure frame-
buﬀer to the secure framebuﬀer. It takes 49.85 ms to ﬁnish
the background matching. This step is the largest overhead
in the preparation of the display. Next, TrustOTP draws the
numbers of OTP in the secure framebuﬀer. It takes 8.029
ms to copy twelve 100*80-pixel pictures in the secure frame-
buﬀer to show two OTPs (one HOTP and one TOTP) at
the same time. Then TrustOTP takes 2.22 ms to check all
the internal registers and memory of IPU. At last, it takes
0.28 ms to change the framebuﬀer pointer of IPU from the
non-secure framebuﬀer to the secure framebuﬀer.
The overall time for preparing the OTP display is 60.4716
ms. After displaying the OTP, the time to recover the Rich
Table 2: Time breakdown of OTP Display.
Step
Operation
Time (ms)
1
2
3
4
5
6
7
Domain Switching
Context Saving
0.002
0.0006
TOTP/HOTP Generation
0.048/0.044
Background Matching
OTP Drawing
IPU Check
Framebuﬀer Replacement
49.85
8.029
2.22
0.28
OS is 7.52 ms, which consists of ﬂushing the FIFO buﬀer of
IPU and changing the framebuﬀer pointer back to the non-
secure framebuﬀer. The ﬂushing is done by replacing the
generated OTPs with value 000000 (6-digit OTP is chosen in
our prototype) in the secure framebuﬀer. In our prototype,
it takes 7.47 ms to drawing two all-zero 6-digit value in the
secure framebuﬀer. Since the picture of the zero number
will be cached due to frequent usage, it is shorter than OTP
drawing in the preparation stage. We can see these two time
periods are small and the OTP can be shown quickly after
being requested.
6.2 Impacts on Rich OS
TrustOTP resides in the secure domain and does not run
most of time. We evaluate the impacts on the Rich OS when
TrustOTP is triggered by running Android benchmark tools
including Antutu [3] and Vellamo [47]. Then, we compare
the results to those when TrustOTP is not triggered in Fig-
ure 4. Antutu measures the performance of CPU, RAM,
GPU and Database, while Vellamo integrates ﬁve bench-
marks and runs every benchmark to get an overall score in
one test. The vertical axis is the score of each item, and
higher scores indicates better performance. We can see that
the performance of the Rich OS decreases during the short
time when TrustOTP is running. It is reasonable because
the same operation takes more time to complete in the Rich
OS when TrustOTP is running. Particularly, the perfor-
mance of CPU and RAM decrease more than that of the
peripherals. This is because when TrustOTP is running,
CPU and RAM are fully controlled by the secure domain,
but the peripheral can continue the tasks of the Rich OS .
6.3 Power Consumption
The Monsoon Power Monitor and Power Tool Software [45]
enable a robust power measurement solution for mobile de-
vices rated at 4.5 volts (maximum 3 amps) or lower. The
monitor is able to measure the instant and average volt-
age, current, and power. We use the power monitor to ﬁrst
measure the power of the board when only the Rich OS
is running. We run the experiment 5 times.
In each ex-
periment the board is restarted and runs for ten minutes.
When only the Rich OS is running, the average power of
the board is 2, 128 mW . The sample of the instant power
data is shown in Figure 5a. The vertical axis is the value of
the power in the unit of watt. When only the Rich OS is
running, the LCD is on but there is no input from the user.
When TrustOTP runs together with the Rich OS, the aver-
age power of the board increases a little bit to 2, 230 mW .
In our experiments, we see that the power consumption goes
up when the system switches into the secure domain. The
sample of the power data when TrustOTP is running is in
Figure 5b.
984Figure 4: Performance Impacts on Rich OS.
(a) TrustOTP Stopped
(b) TrustOTP Running
Figure 5: Samples of Power Usage Data.
In Figure 5b, the power curve remains the same in each
display cycle since it performs the similar OTP operations.
In each cycle TrustOTP goes through the above seven steps
in Section 6.1. There is a peak at the start of each cycle and
then the power keeps at a high level due to a busy while
loop until TrustOTP exits. After removing the loop, the
sample of the power data is depicted in Figure 6, which only
shows a peak in the beginning of every cycle.
Since the power is mainly subject to the ratio of the time
when OTPs are displayed in each cycle, the time period
when OTPs are displayed determines the power consump-
tion when the display cycle is ﬁxed. When the time pe-
riod decreases, the power consumption of TrustOTP also
decreases. The time period of the while loop can be ad-
justed by changing the threshold of the integer counter. A
suitable time could be chosen through experimental tests to
both save energy and remain the user perception. We test
the length of the while loop from 0xffffff to 0x8ffffff
in the resolution of 0xffffff. Finally we pick 0x4ffffff,
which guarantees that the user can see the OTPs clearly
and the Rich OS is suspended for only a minimal time pe-
riod. According to the OTP display time, we choose the
time between two displays as 1.5 seconds. It leaves the user
approximate 1 second to input 2 to 3 of the OTP numbers
into the Rich OS.
7. LIMITATIONS AND DISCUSSION
We aim at using commercial oﬀ-the-shelf (COTS) smart-
phones to achieve a secure one-time password solution with
the same security level as hardware OTP tokens. However,
currently the major smartphone vendors like Samsung lock
the TrustZone in their commercial products to protect their
OEM software in the TrustZone, so it is diﬃcult for third
parties to develop and deploy Trustzone-based mechanisms
on real products. Instead, researchers choose to build their
Figure 6: TrustOTP without Display
system using development boards [29, 7] or emulators [56]
that have TrustZone support enabled. Our prototype is built
on a Freescale i.MX53 development board [29].
When comparing our smartphone-based token to tradi-
tional hardware tokens, one major diﬀerence is the battery.
For most hardware tokens, the life of battery is typically 5-8
years [52]. TrustOTP depends on the battery of the smart-
phone, which needs to be recharged every one or two days.
When the smartphone is out of battery, TrustOTP cannot
work until being charged by a computer or a power outlet.
However, for most working scenarios such as when the user
needs to retrieve the OTP from the smartphone and then
input it into a computer, it is easy to ﬁnd a power supply to
the smartphone even if it is out of power. Hopefully, wireless
charging (i.e., inductive charging) solutions can further mit-
igate this problem. On the other hand, it is complicated to
replace the batteries in hardware tokens due to the tamper-
resistant design.
Hardware OTP tokens are designed to be tamper-resistant
to protect the seed (secret key). In TrustOTP, we save all
the encrypted OTP secret keys on the MicroSD card. Even
if attackers may have access to the MicroSD card, they still
cannot decrypt the OTP secret keys without knowing the
985key in the tamper-resistant e-Fuse register that is responsi-
ble for decrypting the secret keys when loading them into
the secure memory. As portable password containers, both
hardware tokens and the smartphones have the same practi-
cal vulnerability – they may be lost or stolen. For a hardware
token, a user will typically wait more than one day before re-
porting the missing, which gives the attacker plenty of time
to breach the unprotected system. However, when a smart-
phone is stolen, the users may discover it at an early stage
and report it quickly to reduce the risk of misuse.
Similar to the usage of physical tokens, our TrustOTP
may suﬀer from man-in-the-middle attacks when used alone.
If the attacker can intercept the current password and block
the authorized user from being authenticated by the server
until the next token code becomes valid, the attacker is able
to log into the server. We can prevent this attack by adopt-
ing the risk-based authentication mechanism from RSA Se-
curID [38]. Moreover, both hardware tokens and TrustOTP
cannot work correctly if the authentication server’s clock is
out of sync with the clocks built into the tokens or smart-
phones. Normal clock drift on hardware tokens and smart-
phones can be accounted for automatically by the server
through adjusting a stored “Drift” value over time.
In
TrustOTP, even if the server clock or the smartphone clock
had drifted or been changed, the dedicated SRTC clock on
the smartphone can be resynchronized manually.
Each hardware token typically only provides one instance
of one-time password, so a user may bring multiple physical
tokens to authenticate to diﬀerent servers.
In TrustOTP,
if two OTP instances share the same OTP algorithm such
as the open OATH HOTP standard, we can support them
by simply adding the keying materials for the new instance.
Also, it is easy to integrate various OTP algorithms in the se-
cure domain after converting them into self-contained mode.
One remaining challenge is to isolate all OTP instances from
each other, so one malicious OTP algorithm cannot com-
promise other OTP instances.
It could be solved by run-
ning each OTP in a lightweight container [5]. It is a gen-
eral problem on how to install and upgrade secure apps into
TrustZone, since the TrustZone is controlled by phone man-
ufactures. With careful code review and PKI certiﬁcation
chain technology, OTP service providers may collaborate
with phone manufactures to customize a secure API for in-
stalling and upgrading OTP software in the secure domain.
We leave it as our future work when commercializing our
system.
8. RELATED WORK
There are several types of OTP tokens in use, and they can
be divided into software-based token and hardware-based
token. Software-based OTP tokens have been widely used
on desktops and laptops, incorporating the convenient OS
supports and functionalities [50, 44, 52] to provide OTPs
for user authentication. Software tokens have been widely
ported to mobile devices too. For instance, Google develops
a software OTP token called Google Authenticator [34] as an
app supporting both iOS and Android. Moreover, smart-
phones can receive OTPs from the authentication server
through an out-of-band channel such as SMS or email. In
general, software-based OTP tokens are vulnerable to mali-
cious apps and compromised OS running on the same ma-
chine. Hardware virtualization supports on x86 and ARM
processors are promising to help protect the OTP generator
from other malicious software [20, 39, 54, 1].
Hardware-based OTP tokens use a dedicated physical fob
to calculate and display the OTP on an integrated screen [24,
58]. Contrast to RSA SecurID that provides proprietary
hardware OTP solution [24], OATH Token is an open-source
software token that implements the RFC 4226 HOTP/OATH
algorithm standard and is not tied to any proprietary server
software. A number of commercial hardware tokens sup-
port the OATH standards [8], including Vasco Digipass GO
6 OATH [6]. Yubikey [58] has a USB interface with cus-
tomized software to provide OTP on a laptop. The major
drawback of these hardware tokens is that the user needs to
carry an extra hardware that is prone to being lost or stolen.
It is not convenient to upgrade the software in the physical
tokens either. Moreover, a hardware token can cost around
100 dollars. Intel Identity Protection Technology with One-
Time Password [36] integrates a built-in OTP hardware to-
ken into the CPU core. The integrated hardware token is