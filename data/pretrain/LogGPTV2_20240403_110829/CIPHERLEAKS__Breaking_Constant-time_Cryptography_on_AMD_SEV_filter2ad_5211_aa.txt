title:CIPHERLEAKS: Breaking Constant-time Cryptography on AMD SEV
via the Ciphertext Side Channel
author:Mengyuan Li and
Yinqian Zhang and
Huibo Wang and
Kang Li and
Yueqiang Cheng
CipherLeaks: Breaking Constant-time Cryptography 
on AMD SEV via the Ciphertext Side Channel
Mengyuan Li, The Ohio State University; Yinqian Zhang, Southern University 
of Science and Technology; Huibo Wang and Kang Li, Baidu Security; 
Yueqiang Cheng, NIO Security Research
https://www.usenix.org/conference/usenixsecurity21/presentation/li-mengyuan
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.CIPHERLEAKS: Breaking Constant-time Cryptography on AMD SEV
via the Ciphertext Side Channel
Mengyuan Li∗
The Ohio State University
Yinqian Zhang† (cid:66)
Southern University of Science and Technology
Huibo Wang
Baidu Security
Kang Li
Baidu Security
Yueqiang Cheng‡
NIO Security Research
Abstract
AMD’s Secure Encrypted Virtualization (SEV) is a hard-
ware extension available in AMD’s EPYC server processors
to support conﬁdential cloud computing. While various prior
studies have demonstrated attacks against SEV by exploiting
its lack of encryption in the VM control block or the lack of
integrity protection of the encrypted memory and nested page
tables, these issues have been addressed in the subsequent
releases of SEV-Encrypted State (SEV-ES) and SEV-Secure
Nested Paging (SEV-SNP).
In this paper, we study a previously unexplored vulner-
ability of SEV, including both SEV-ES and SEV-SNP. The
vulnerability is dubbed ciphertext side channels, which allows
the privileged adversary to infer the guest VM’s execution
states or recover certain plaintext. To demonstrate the sever-
ity of the vulnerability, we present the CIPHERLEAKS attack,
which exploits the ciphertext side channel to steal private keys
from the constant-time implementation of the RSA and the
ECDSA in the latest OpenSSL library.
1 Introduction
AMD’s Secure Encrypted Virtualization (SEV) is an exten-
sion of the AMD Virtualization (AMD-V) technology. It pro-
vides security features, such as memory encryption and isola-
tion to virtual machines (VM), in order to support scenarios
like conﬁdential cloud computing where hypervisors are not
trusted to respect the security of the VMs [2].
However, with the assumption of a malicious hypervisor,
SEV faces numerous attacks. One vulnerability of the SEV
is that the VM Control Block (VMCB) is not encrypted dur-
ing the world switch between the guest VM and the hypervi-
sor [15,31,35], which enables the hypervisor to inspect and/or
alter the control ﬂow of the victim VM. AMD thus released
SEV Encrypted States (SEV-ES) [17], the second generation
∗A portion of this work done during an internship at Baidu Research.
†Corresponding author. (cid:66) PI:EMAIL
‡This work was mainly done at Baidu Research.
of SEV that encrypts the sensitive portion of VMCB and
stores them into the VM Save Area (VMSA) during the world
switch. Therefore, these attacks can be mitigated.
However, other vulnerabilities of SEV, including unauthen-
ticated encryption [9, 11, 36], unprotected nested page table
(NPT) [15,26,27], unprotected I/O [23] and unauthorized Ad-
dress Space identiﬁer (ASID) [22], have been demonstrated to
threaten the security of SEV-ES. To perform these attacks, the
hypervisor must alter the encrypted memory or the physical
address mapping of the victim VM. This is possible because
SEV does not have sufﬁcient protection for memory integrity.
To tackle these issues, AMD has announced to release SEV
Secure Nested Paging (SEV-SNP) in the next generation of
SEV processors [4]. SEV-SNP protects the integrity of the
guest VM by introducing a Reverse Map Table (RMP) to
record and check the ownership of the guest VM’s memory
pages [2,4]. Therefore, although not yet available to be tested
by security researchers, SEV-SNP is expected to be immune
to all previously known attacks.
Unlike all prior work on SEV attacks, this paper presents a
new side channel on SEV (including SEV-ES and SEV-SNP)
processors. We call it the ciphertext side channel. It allows
the privileged hypervisor to monitor the changes of the cipher-
text blocks on the guest VM’s memory pages and exﬁltrate
secrets from the guest. The root cause of the ciphertext side
channel are two-fold: First, SEV’s memory encryption en-
gine uses an XOR-Encrypt-XOR (XEX) mode of operation,
which encrypts each 16-byte memory block independently
and preserves the one-to-one mapping between the plaintext
and ciphertext pairs for each physical address. Second, the
design of SEV does not prevent the hypervisor from reading
the ciphertext of the encrypted guest memory, thus allowing
its monitoring of the ciphertext changes during the execution
of the guest VM.
To demonstrate the severity of leakage due to the ciphertext
side channel, we construct the CIPHERLEAKS attack, which
exploits the ciphertext side channel on the encrypted VMSA
page of the guest VM. Speciﬁcally, the CIPHERLEAKS attack
monitors the ciphertext of the VMSA area during VMEXITs,
USENIX Association
30th USENIX Security Symposium    717
then (1) by comparing the ciphertext blocks with the ones
observed during previous VMEXITs, the adversary is able
to learn that the corresponding register values have changed
and thereby infer the execution state of the guest VM; and
(2) by looking up a dictionary of plaintext-ciphertext pairs
collected during the VM bootup period, the adversary is able
to recover some selected values of the registers. With these
two attack primitives, we show that the malicious hypervisor
may leverage the ciphertext side channel to steal the private
keys from the constant-time implementation of the RSA and
ECDSA algorithms in the latest OpenSSL library, which are
believed to be immune to side channels.
We discuss countermeasures of the ciphertext side channel
and the speciﬁc CIPHERLEAKS attack. While there are some
seemingly feasible software countermeasures, we show they
become fragile when the CIPHERLEAKS attack is performed
using Advanced Programmable Interrupt Controller (APIC).
Therefore, we conjecture that the ciphertext side-channel vul-
nerability is difﬁcult to eradicate from the software. Therefore,
alternative hardware solutions must be adopted in the future
SEV hardware.
Contributions. This paper contributes to the security of
AMD SEV and conﬁdential computing technology in general
in the following aspects:
• It presents a novel ciphertext side channel on SEV pro-
cessors. This discovery identiﬁes a fundamental ﬂaw in the
SEV’s use of XEX mode memory encryption.
• It presents a new CIPHERLEAKS attack that exploits the ci-
phertext side channel to infer register values from encrypted
VMSA. Two primitives were constructed for inferring the
execution states of the guest VM and recovering speciﬁc
values of the registers.
• It presents successful attacks against the constant-time RSA
and ECDSA implementation of the latest OpenSSL library,
which has been considered secure against side channels.
• It discusses the applicability of the CIPHERLEAKS attack
on SEV-SNP. To the best of our knowledge, the CIPHER-
LEAKS attack is the only working attack against SEV-SNP
that breaches the memory encryption of the guest VM.
• It discusses potential software and hardware countermea-
sures for the ciphertext side channel and the demonstrated
CIPHERLEAKS attack.
Responsible disclosure. We disclosed the vulnerability of
the ciphertext side channel and the CIPHERLEAKS attack
to AMD via emails in December 2020. We also distributed
the ﬁrst draft of this paper with AMD engineers in January
2021. AMD engineers have acknowledged the vulnerability
on SEV, SEV-ES, and SEV-SNP, and ﬁled an embargo that
is effective until August 10, 2021. As of the time of writing,
CVE number, CVE-2020-12966, has been reserved for the
vulnerability. AMD will announce a security bulletin together
with a hardware patch for SEV-SNP in August 2021.
We have also reported the vulnerable OpenSSL algorithms
(see Section 4) to OpenSSL in January 2021. The OpenSSL
community has acknowledged our notiﬁcation, but OpenSSL
will not be patched, because to properly mitigate such an at-
tack within OpenSSL, it would require signiﬁcant changes to
the whole software stack. We will describe software counter-
measures in Section 6.
Paper outline. The rest of the paper is outlined as follows.
Section 2 describes some background knowledge of this paper.
Section 3 presents an overview of the ciphertext side channel,
their root causes, and two attack primitives. Section 4 sketches
two end-to-end attacks against constant-time cryptography
implementations in the latest OpenSSL library. Section 6 dis-
cusses the potential countermeasures. Section 7 presents the
related work and Section 8 concludes the paper.
2 Background
2.1 Secure Encrypted Virtualization
Secure Encrypted Virtualization (SEV) is a new feature in
AMD processors [19]. AMD introduces SEV for protecting
virtual machines (VMs) from the untrusted hypervisor. Us-
ing the memory encryption technology, each VM will be
encrypted with a unique AES encryption key, which is not
accessible from the hypervisor or the VMs. The encryption
is transparent to both hypervisor and VMs and happens in-
side dedicated hardware in the on-die memory controller.
The in-use data in each VM will be encrypted by their corre-
sponding key automatically, and thus no additional software
modiﬁcations are needed to run programs containing sen-
sitive secrets in the SEV platform. Open Virtual Machine
Firmware (OVMF), the UEFI for x86 VM, and Quick Emula-
tor (QEMU), the device simulator, are the other two critical
components for the SEV-enabled VM.
Encrypted Memory. SEV hardware encrypts the VM’s mem-
ory using 128-bit AES symmetric encryption. The AES en-
gine integrated into the AMD System-on-Chip (SOC) auto-
matically encrypts the data when it is written to the memory
and automatically decrypts the data when it is read from
memory. For SEV, the AES encryption uses the XOR-and-
Encrypt encryption mode [12], which is later changed to an
XEX mode encryption. Thus, each aligned 16-byte mem-
ory block is encrypted independently. SEV utilizes a physi-
cal address-based tweak function T () to prevent the attacker
from directly inferring plaintext by comparing 16-byte cipher-
text [19]. It adopts a basic Xor-and-Encrypt (XE) mode on
the ﬁrst generation of EPYC processors (e.g., EPYC 7251).
The ciphertext c is calculated by XORing the plaintext m
with the tweak function for system physical address Pm using
c = ENC(m⊕T (Pm)), where the encryption key is called VM
encryption key (Kvek). This basic XE encryption mode can
be easily reverse-engineered by the adversary as the tweak
718    30th USENIX Security Symposium
USENIX Association
function vectors tis are ﬁxed. AMD then replaces the XE
mode encryption with the XOR-Encrypt-XOR (XEX) mode
in EPYC 7401P processors where the ciphertext is calculated
by c = ENC(m⊕ T (Pm))⊕ T (Pm). The tweak function vec-
tors tis are proved to have only 32-bit entropy by Wilke et
al. [36] at ﬁrst, which allows an adversary to reverse engineer
the tweak function vectors. AMD adopted a 128-bit entropy
tweak function vectors in their Zen 2 architecture EPYC pro-
cessors from July 2019 [33] and thus ﬁxed all existing vulner-
abilities in SEV AES encryption. However, the same plaintext
always has the same ciphertext in system physical address Pm
during the lifetime of a guest VM.
SEV, SEV-ES, and SEV-SNP. The ﬁrst version of SEV [19]
was released in April, 2016. AMD later released the second
generation SEV-ES [17] in February, 2017 and the whitepa-
per of the third generation SEV-SNP [18] in January, 2020.
SEV-ES is designed to protect the register states during the
world switch and introduces the VMSA to store the register
states encrypted by Kvek. SEV-SNP is designed to protect the
integrity of the VM’s memory and introduces the RMP to
store the ownership of each memory pages. Although SEV,
SEV-ES, and SEV-SNP use the same AES encryption engine,
some additional memory access restrictions are included in
SEV-SNP for integrity protection. In SEV and SEV-ES, the
hypervisor has read/write access to the VM’s memory regions,
which means the hypervisor can directly read or replace the
ciphertext of the guest VM. In SEV-SNP, the RMP checks pre-
vent the hypervisor from altering the ciphertext in the guest
VM’s memory by adding the ownership check before memory
accesses. However, the hypervisor still has read accesses to
the ciphertext of the guest VM’s memory [4].
Non-Automatic VM Exits. VMEXITs in SEV-ES and SEV-
SNP are classiﬁed as either Automatic VM Exits (AE) or
Non-Automatic VM Exits (NAE). AE VMEXITs are events
that do not need to expose any register state to the hypervisor.
These events include machine check exception, physical inter-
rupt, physical Non-Maskable-Interrupt, physical Init, virtual
interrupt, pause instruction, hlt instruction, shutdown, write
trap of CR[0-15], Nested page fault, invalid guest state, busy
bit, and VMGEXIT [2]. All other VMEXITs are classiﬁed as
NAE VMEXITs, which require exposing some register values
to the hypervisor.
Instead of being trapped directly by the hypervisor, NAE
events ﬁrst result in a VC exception, which is handled by a VC
handler inside the guest VM. The VC handler then inspects
the NAE event’s error code and decides which registers need
to be exposed to the hypervisor. The VC handler copies those
registers’ states to a special structure called Guest-Hypervisor
Communication Block (GHCB), which is a shared memory
region between the guest and the hypervisor. After copying
those necessary registers’ states to GHCB, the VC handler
executes a VMGEXIT instruction to trigger an AE VMEXIT.
The hypervisor then traps the VMGEXIT VMEXIT, reads
those states from the GHCB, handles the VMEXIT, writes the
return registers’ states into GHCB if needed, and executes a
VMRUN. After the VMRUN, the guest VM’s execution will
resume after the VMGEXIT instruction inside the VC handler,
which copies the return values from GHCB to the correspond-
ing registers, and then exits the VC handler. For example, to
handle CPUID instructions, the VC handler stores the states of
RAX and RCX and the VM EXITCODE (0x72 for CPUID)
into GHCB and executes a VMGEXIT. The hypervisor then
emulates the CPUID instruction and updates the values of
RAX, RBX, RCX, and RDX in GHCB. After VMRUN, the
VC handler checks if those return registers’ states are valid
and copies those states to its internal registers.
IOIO_PROT. During the Pre-Extensible Firmware Interface
(PEI) initialization phase of SEV VM, IOIO port is used in-
stead of DMA. The reason is that DMA inside SEV VM
requires a shared bounce buffer between VM and the hyper-
visor [23]. The guest VM needs to copy DMA data from
the bounce buffer to its private memory for input data and
copy data from its private memory to bounce buffer for output
data. Implementing bounce buffer requires allocating dynamic
memory and additional memory copy operations, which is a
challenge in the PEI initialization phase.
IOIO_PROT event is one of the NAE events that need to ex-
pose register states to the hypervisor. In an IOIO_PROT event,
several pieces of information are returned to the hypervisor in
GHCB. SW_EXITCODE contains the error code (i.e., 0x7b)
of IOIO_PROT events. SW_EXITINFO1 contains the inter-
cepted I/O port (bit 31:16), address length (bit 9:7), operand
size (bit 6:4), repeated port access (bit 3), and access type
(i.e., IN, OUT, INS, OUTS) (bit 2,0). The SW_EXITINFO2
is used to save the next RIP in non-SEV VM and SEV VM,
masked to 0 in SEV-ES and SEV-SNP. For IN instructions, the
hypervisor puts the RAX value into the RAX ﬁeld of GHCB
before VMRUN; for OUT instructions, the VC handler places
the RAX register value into the RAX ﬁeld of GHCB before
the VMGEXIT.
2.2 Cryptographic Side-Channel Attacks
Timing attack. Timing attacks against cryptographic imple-
mentations are a subset of side-channel attacks, where the
attacker exploits the time difference in the execution of a
speciﬁc cryptographic function to steal the secret informa-
tion. Any functions that have secret-dependent execution time
variation is vulnerable to timing attacks. However, whether se-
crets can be stolen in practice depends on many other factors,