title:RWGuard: A Real-Time Detection System Against Cryptographic Ransomware
author:Shagufta Mehnaz and
Anand Mudgerikar and
Elisa Bertino
RWGuard: A Real-Time Detection
System Against Cryptographic
Ransomware
Shagufta Mehnaz(B), Anand Mudgerikar, and Elisa Bertino
Purdue University, West Lafayette, IN, USA
{smehnaz,amudgeri,bertino}@purdue.edu
Abstract. Ransomware has recently (re)emerged as a popular malware
that targets a wide range of victims - from individual users to corporate
ones for monetary gain. Our key observation on the existing ransomware
detection mechanisms is that they fail to provide an early warning in
real-time which results in irreversible encryption of a signiﬁcant num-
ber of ﬁles while the post-encryption techniques (e.g., key extraction, ﬁle
restoration) suﬀer from several limitations. Also, the existing detection
mechanisms result in high false positives being unable to determine the
original intent of ﬁle changes, i.e., they fail to distinguish whether a sig-
niﬁcant change in a ﬁle is due to a ransomware encryption or due to a ﬁle
operation by the user herself (e.g., benign encryption or compression). To
address these challenges, in this paper, we introduce a ransomware detec-
tion mechanism, RWGuard, which is able to detect crypto-ransomware in
real-time on a user’s machine by (1) deploying decoy techniques, (2) care-
fully monitoring both the running processes and the ﬁle system for mali-
cious activities, and (3) omitting benign ﬁle changes from being ﬂagged
through the learning of users’ encryption behavior. We evaluate our sys-
tem against samples from 14 most prevalent ransomware families to date.
Our experiments show that RWGuard is eﬀective in real-time detection of
ransomware with zero false negative and negligible false positive (∼0.1%)
rates while incurring an overhead of only ∼1.9%.
Keywords: Ransomware · Real-time detection · I/O monitoring
1 Introduction
Ransomware is a class of malware that has recently become very popular among
cybercriminals. The goal of these cybercriminals is to obtain ﬁnancial gain by
holding the users’ ﬁles hostage- either by encrypting the ﬁles or by locking the
users’ computers. In this paper, we focus on crypto ransomware which asks users
for a ransom in exchange of decryption keys that can be used to recover the ﬁles
encrypted by the attacker. Such a ransomware is now a signiﬁcant threat to both
individuals and organizations. Among the recent ransomware attacks, Petya [8]
is the deadliest one; it aﬀected several pharmaceutical companies, banks, at
c(cid:2) Springer Nature Switzerland AG 2018
M. Bailey et al. (Eds.): RAID 2018, LNCS 11050, pp. 114–136, 2018.
https://doi.org/10.1007/978-3-030-00470-5_6
A Real-time Detection System Against Cryptographic Ransomware
115
least one airport and one U.S. hospital. Another massive ransomware that hit
nearly 100 countries around the world is WannaCry [30]. This attack targeted
not only large institutions but also any individual who could be reached. While
ransomware has maintained prominence as one of the biggest threats since 2005,
the ﬁrst ransomware attack occurred in 1989 [12] and targeted the healthcare
industry. The healthcare industry, which possesses very sensitive and critical
information, still remains a top target.
Even though several techniques have been proposed for detecting malware,
very few of them are speciﬁc to ransomware detection [6,10,13,14,16,26,27].
Such existing techniques, however, have at least one of the following limi-
tations: (a) impractically late detection when several ﬁles have already been
encrypted [13,26,27], (b) failure to distinguish benign ﬁle changes from ran-
somware encryption [6,10,13,14,16,26,27], (c) oﬄine detection system that is
unable to detect ransomware in real-time [13], (d) emphasis only on post-
encryption phase which fails to recover ﬁles in most of the cases [16] or conﬂicts
with secure deletion [6,10], and (e) monitoring applications’ actions only for a
limited amount of time after their installation [27].
Problem and Scope. In this work, we focus on the most critical requirement
for a successful ransomware, i.e., making the valuable resources (i.e., ﬁles, doc-
uments) unavailable to the user, and design a solution, RWGuard, that protects
against ransomware by detecting and stopping the ransomware processes at an
early stage. Note that the ransomware families that lock the user’s machine are
out of the scope of this paper.
Approach. RWGuard employs three monitoring techniques: decoy monitoring,
process monitoring, and ﬁle change monitoring. Unlike generic malware, ran-
somware wreak havoc systems within minutes (or seconds). Therefore, analyz-
ing processes’ ﬁle usage patterns and searching for ransomware-like behaviors
result in delayed detections. To address this challenge, we strategically deploy
a number of decoy ﬁles in the system. Since in the normal cases a decoy ﬁle
should not be written, whenever a ransomware process writes to such a decoy
ﬁle, our decoy monitoring technique identiﬁes the ransomware process instan-
taneously. Though some research work [15,19] recommends using decoy ﬁles
for detecting ransomware, such previous work does not present any analysis on
the eﬀectiveness of these decoy ﬁles with any real system design. To the best
of our knowledge, ours is the ﬁrst work to empirically analyze the eﬀectiveness
of decoy techniques against ransomware. The process monitor checks the run-
ning processes’ I/O Request Packets (IRPs), e.g., IRP write, IRP create, IRP
open, etc. While some existing approaches [13,14] are signature-based and look
for speciﬁc I/O request patterns, we exploit the rapid encryption property of
ransomware [10], use a number of IRP metrics for building baseline proﬁle for
each running process, and utilize these baseline proﬁles for performing process
anomaly detection. The ﬁle change monitor checks all changes performed on
the ﬁles (e.g., create, delete, and write operations) to determine anomalous ﬁle
changes. From our experimental observations, we have found that monitoring
only the process activities [13,14] or only the ﬁle changes [13,26] is not suﬃcient
116
S. Mehnaz et al.
for eﬀective detection and results in both high false positives and high false neg-
atives (e.g., we observed that the Cryptolocker ransomware encrypts ﬁles very
slowly which sometimes evades process monitoring). In this paper, we enhance
these existing techniques and combine them with the decoy monitoring module in
order to provide an eﬀective solution for protection against ransomware.
If a potential encryption of a ﬁle (not a decoy) is identiﬁed, the next step
is to determine whether the ﬁle is encrypted by a ransomware (referred to as
ransomware encryption) or by a legitimate user (referred to as benign encryp-
tion). Therefore, we also design a ﬁle classiﬁcation mechanism that depending on
the properties of a ﬁle, classiﬁes the encryption as benign or malicious. In order
to learn the user’s ﬁle encryption behavior, we leverage an existing encryption
utility (that utilizes cryptographic library CryptoAPI, e.g., Kryptel [17]) to be
used by end-users and applications. Finally, our approach includes a mechanism
that places hooks and intercepts calls to the functions in CryptoAPI library so
as to monitor all benign ﬁle encryption.
Contributions. To summarize, RWGuard makes the following contributions:
1. A decoy based ransomware detection technique that is able to identify ran-
somware processes in real-time.
2. A ransomware surveillance system that employs both process and ﬁle change
monitoring (to detect ransomware encrypting ﬁles other than decoy).
3. A classiﬁcation mechanism to distinguish benign ﬁle changes from ran-
somware encryption by hooking relevant CryptoAPI functions and learning
the user’s ﬁle encryption behaviors.
4. An extensive evaluation of our ransomware detection system on 14 most
prevalent ransomware families to date.
2 Background
Hybrid Cryptosystem. A hybrid cryptosystem allows the ransomware to use
diﬀerent symmetric keys for encryption of diﬀerent ﬁles while using a single
asymmetric key pair. The attacker generates the asymmetric public-private key
pair on its own command and control infrastructure. The ransomware code gen-
erates a unique symmetric key for each ﬁle to be encrypted and then encrypts
these symmetric keys with its public key. These encrypted symmetric keys are
then left with the encrypted ﬁles. At this point, the user needs to pay the ransom
to get the private key with which it can ﬁrst retrieve the symmetric keys, and
then decrypt the ﬁles.
IRPLogger. All the I/O requests by processes that are sent to device drivers
are packaged in I/O request packets (IRPs). These requests are generated for any
ﬁle system operation, e.g., open, close, write, read, etc. IRPLogger leverages a
mini-ﬁlter driver [11] that intercepts the I/O requests. An example of IRPLogger
entry is:
A Real-time Detection System Against Cryptographic Ransomware
117
CryptoAPI. CryptoAPI is a Microsoft Windows platform speciﬁc crypto-
graphic application programming interface (API). This API, included with Win-
dows operating systems, provides services to secure Windows-based applications
using cryptography. It includes functionalities for encrypting (CryptEncrypt) and
decrypting (CryptDecrypt) data, generating cryptographically secure pseudo-
random numbers (CryptGenRandom), authentication using digital certiﬁcates,
etc.
Microsoft Detours Library. Detours is a library for instrumenting arbitrary
Win32 functions in Windows-compatible processors. It intercepts Win32 func-
tions by re-writing the in-memory code for target functions. Detours preserves
the un-instrumented target function (callable through a trampoline) as a sub-
routine for use by the instrumentation.
3 RWGuard Design
3.1 Threat Model
In our threat model, we consider an adversary that installs crypto-ransomware
on victim machines through seemingly legitimate but malicious domains. We
consider the operating system to be trusted. Ransomware generally targets and
encrypts ﬁles that the user creates and cares about, and the user account already
has all the privileges to access these ﬁles. However, though the assumption that
ransomware executes only with user-level privileges seems reasonable (as oth-
erwise, it may be able to defeat any existing in-host protection mechanisms,
e.g., anti-malware solutions), this assumption does not apply to all the ran-
somware cases. We have observed some exceptions to this assumption where
ransomware samples aﬀect only a predeﬁned list of system ﬁles and if not
detected/terminated, gain root access, shut down the system, and at the next
boot up, perform full disk encryption and ask for a ransom payment. Hence, we
also include these ransomware samples in our threat model. Moreover, a mali-
cious insider in an organization may gain the knowledge of decoy ﬁles and build
a customized ransomware to sabotage the organization (installed as a logical
bomb to detonate after the insider leaves the organization). A further discussion
on how our RWGuard system handles such situations is given in Sect. 5.
3.2 Overview
Figure 1 shows the placement and the design overview of RWGuard. Any I/O
request to the ﬁle system generated by any user space process ﬁrst needs to be
scheduled by the I/O scheduler. We leverage IRPLogger to fetch these system-
wide ﬁle system access requests and parse those with our IRPParser.
RWGuard consists of ﬁve modules: (1) Decoy Monitoring (DMon) module, (2)
Process Monitoring (PMon) module, (3) File Change Monitoring (FCMon) mod-
ule, (4) File Classiﬁcation (FCls) module, and (5) CryptoAPI Function Hooking
118
S. Mehnaz et al.
Kernel 
space
User 
space
I/O Requests
I/O Requests
I/O Requests
I/O Requests
P1
P2
P3
Pn
I/O Request Queue
I/O Scheduler
IRPLogger
File System
RWGuard
IRPParser
W
O,C
R,W
Cr
FCMon
FCMon 
Metrics
Computation
PMon
PMon IRP 
Metrics
Computation
File 
Manager
Process 
Profiling
DMon
Automatic
Decoy 
Generator
FCls
Crypto
Tool
CFHk
Function 
Hooking
Decoy File 
Information
Decoy?
File Types, 
Locations
Tuples
Malicious 
Encryption?
Flag
Process
O- Open
C- Close
R- Read
W- Write
Cr- Create
Fig. 1. Design overview of RWGuard
(CFHk) module. The DMon module considers only the IRP write requests as
input and monitors whether there is any such request to a decoy ﬁle. The PMon
and FCMon modules monitor process operations (IRP open, close, read, write,
create) and ﬁle changes (IRP write), respectively. These two modules communi-
cate in order to identify any process(es) making signiﬁcant anomalous changes
to the ﬁles. If such an event is identiﬁed, the FCls module checks the properties
of the ﬁle and predicts the probability of the ﬁle change to be benign. Further-
more, the CFHk module checks whether a benign encryption (by the user) has
been recorded for this ﬁle at the time of the ﬁle’s signiﬁcant change.
3.3 Decoy Monitoring (DMon) Module
The DMon module deploys decoy ﬁles that allow our system to identify a ran-
somware process in real-time. Since the decoy ﬁles should not be modiﬁed in