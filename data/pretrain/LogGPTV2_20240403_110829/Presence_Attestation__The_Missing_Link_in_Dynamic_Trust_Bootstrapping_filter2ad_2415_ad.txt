analysis is ill-suited for the trust anchor due to bulky code.
[1]: The adversary has prior physical access to the premises where
presence attestation will take place. Placement of CAM and M
must be proactive and precise to anticipate the exact location of
the presence attestation process. Although possible, this attack is
complicated. If a ceiling-mounted camera is used, its angle must
be sufficient to subsume Verifier’s screen. Also, any screen privacy
film used on Verifier would make it nearly impossible take a photo.
Of course, if during attestation Alice is physically accompanied by
a live (real-time) adversary Eve, who surreptitiously takes a photo
using her device (CAM+M), all bets are off.
[2]: The adversary that has no physical access to the premises. How-
ever, it takes advantage of cameras common in many office and
workplace environments. Having control over a multitude of CAM-
s, the adversary is not limited to targeting only one space, such as
Alice’s office. On the other hand, recall that M is assumed to be of
the same type as Dev, which is different from a typical IoT-style
camera exemplified by pre-installed CAM. Specifically, CAM would
most probably lack a DRTM. Therefore, a successful attack would
require negligible communication delays between M and CAM,
which is highly unlikely.
5 IMPLEMENTATION
We implemented Protocols 1–5 for a typical setting, where Dev (e.g.,
a smart-phone) has an ARM processor, while Verifier is a commodity
x86-based computer. Specifically, we use a laptop as Verifier, and, as
Dev, we use an ARM development board with an LCD screen, a USB
camera and a GPS unit. There are no technical barriers for adapting
this implementation to other platform settings, though some low-
level hardware-dependent modifications would be necessary. This
initial prototype implementation is rather complex, since it involves
system security techniques, as well as intricate I/O mechanisms
used by the display and the camera, as well as relevant image
processing techniques.
5.1 DRTM and Trust Anchor
We built the DRTM agent in Dev’s secure world as well as a micro-
hypervisor running in Dev’s HYP mode of the non-secure world.
The agent, as well as the supporting ARM TrustZone hardware,
are collectively considered to represent DRTM, while the micro-
hypervisor acts as TA.
The hypervisor is measured and launched by DRTM agent at
runtime, instead of during boot-up. Dynamic hypervisor launching
on ARM platforms is supported by ARM specifications and has
been implemented by Cho, et. al. [10]. Basically, the user-space
application issues a system call to the underlying kernel, which
in turn issues an SMC call to DRTM in the secure world. DRTM
measures the hypervisor image and deploys it. Besides loading the
hypervisor into memory, deployment includes setting up Stage I
and II page tables and installing the hypervisor call (HVC) handler.
Then, the DRTM agent returns to the kernel, which issues an HVC
and traps to the hypervisor. The main drawback of this approach is
that DRTM takes up too much responsibility and its code base is
significantly expanded, due to hypervisor deployment.
Our implementation employs a more direct approach with the
same security strength, yet with a smaller DRTM code base. When
handling the SMC call for hypervisor launch, the DRTM agent still
loads the measured hypervisor. However, it manipulates the hard-
ware context, such that the SMC return goes to HYP mode, instead
of the SMC calling site in the untrusted kernel. Specifically, lr_mon
and spsr_mon registers are configured such that execution of the
eret instruction in the secure world causes CPU to switch to HYP
mode and returns to the hypervisor code previously prepared by the
agent. Once the hypervisor takes control, it configures all paging
structures and the HVC handler. In a similar way, the hypervisor
creates a new hardware context, such that execution of eret in
HYP mode returns to the untrusted kernel’s SMC calling site. Note
that, when the CPU runs in secure world, or in HYP mode, the
untrusted kernel cannot preempt its execution.
Compared with the standard mechanism in Cho, et. al. [10],
our system saves one CPU mode switch and the DRTM agent is
hypervisor-agnostic, since it does not handle internals of the hy-
pervisor, such as paging structures. Therefore, the logic is much
simpler and the code-base for dynamic loading is smaller. Our im-
plementation requires only 90 lines of assembly and 230 lines of C
code for dynamic measured launch.
5.2 Sight-based Residence Checking Schemes
Since sight-based Protocols 2 and 3 are time-critical, we carefully
implemented them for Verifier and TA to ensure that incurred CPU
time is minimized and as stable as possible. Both requirements are
crucial to protocol security.
5.2.1 The Verifier. We implement a protocol agent which runs
as a kernel thread to execute residence checking protocols. Since
Verifier is fully trusted, we do not consider security issues in the
implementation. Figure 7 depicts the main steps of Verifier as well
as the breakdown of Verifier’s noise intervals in Protocol 2 and 3. To
accurately measure these noise intervals, the protocol agent stalls
all other CPU cores in Verifier and sets itself as non-preemptive,
such that it does not yield CPU to other threads.
(a) Verifier in Protocol 2
(b) Verifier in Protocol 3
Fig. 7: Breakdown of noise intervals in Verifier.
Below, we discuss the details of display-send and camera-receive.
Some tasks, such as random picture generation and HMAC compu-
tation, are not time-sensitive since their CPU time is not factored
into raw latency.
Camera-receive. The high-level scheme of USB camera I/O is
as follows: To produce an image frame, the camera can transfer
one or multiple groups of image blocks. An interrupt called FIQ
is generated upon each block group transfer. The corresponding
handler reads the blocks and assembles them into a frame.
Verifier camera-receives hi in Protocol 3. The FIQ interrupt han-
dler is hooked, such that, whenever a frame is successfully recon-
structed, the protocol agent reads its birth time.
Caveat A camera’s frame rate is not the frequency of block-
group transfer. It refers to the number of image frames recon-
structed by software in a second. In other words, τcam is essentially
the time between two image reconstructions.
Another issue is the full-screen problem described in Section 3.1.1.
Our method is based on two consecutive frames being approxi-
mately the same. The rationale is that, after Dev’s display is fully
rendered from the top-left to the bottom-right corner, it appears
as a still picture to the camera. Therefore, images captured by the
camera at different times should be visually the same and their pixel
values should be close to each other6. As illustrated by (j + 1)-st
and (j + 2)-nd captures in Figure 4, if two consecutive images have
little variation, the former is the first image for the full screen and
its birth time is exactly the starting time of the noise interval of
Verifier in Protocol 3.
After successful image reconstruction from the camera buffer,
Verifier recovers hi from the image. Details are described in Sec-
tion 5.2.3; this involves image encoding techniques.
Display-send. Since security is not a concern here, we take ad-
vantage of the existing graphic framework to display Pi in both
protocols. The crux of Verifier’s display-send operation is to pre-
cisely measure the end-point of the noise interval. We leverage Intel
Direct Rendering Management (DRM). The graphics card driver
prepares two frame buffers which are used alternatively: one is
used by the hardware for displaying, and the other – for update.
A periodic vblank interrupt triggers the driver to switch to the
updated buffer for displaying.
The vblank interrupt handler is instrumented to check whether
Pi has been placed in the frame buffer. If so, the hander reads the
clock which marks the end of Verifier’s noise interval.
5.2.2 The Device. The implementation on Dev is more complex
than on Verifier, because it is built into the ARM hypervisor and
Dev is not a trusted device. On one hand, the implementation must
ensure protocol security with high accuracy and little time variation.
On the other hand, we must refrain from significantly expanding
hypervisor code size and logic. Our strategy is to maximize the
use of the untrusted kernel to perform non-sensitive tasks. The
hypervisor, acting as TA, runs the attestation protocol(s) involving
two main primitives as follows:7
Fig. 8: Implementation details of Dev in Protocol 3.
6The two images are not byte-wise identical due to inaccuracy of the image sensing.
7Note that the hypervisor also stalls other CPU cores and acquires the highest sched-
uling priority for precise and stable time measurement.
camera-receivedecode	&	Verificationdisplay-sendimage	recon.full-screen	detectionFIQframe	buffer	writevblankarrivalTimenoise	intervalnetwork-receiveVerificationdisplay-sendpacket	recon.NIQframe	buffer	writevblankarrivalTimenoise	intervalcamera-receivedecode	&	Verificationdisplay-sendimage	recon.full-screen	detectionFIQframe	buffer	writevblankarrivalTimenoise	intervalnetwork-receiveVerificationdisplay-sendpacket	recon.NIQframe	buffer	writevblankarrivalTimenoise	intervalcamera-receivedisplay-sendimage	recon.full-screen	detectionFIQframe	buffer	writevsynarrivalTimenoise	intervalcamera-receive. The hypervisor uses the camera-receive to ob-
tain random images from Verifier. It uses the same technique to
solve the full-screen problem as Verifier. Note that there is no noise
interval for Dev in the basic sight-based protocol, since TA’s op-
erations after reconstruction of P are not included in raw latency.
The breakdown of the noise interval in the iterative sight-based
protocol is described in Figure 8. The only difference between Fig-
ure 7(b) and Figure 8 is that the latter does not need to verify data
authenticity. Similar to camera-receive of Verifier, the start of the
noise interval in the iterative protocol is the time when the random
image from Verifier is completely assembled.
The main security requirement is that the origin of the image
must be Dev’s camera. In other words, any update to the camera
buffer can only come from the camera itself. Any software’s write
access to the buffer breaks the security premise of residence check-
ing. Since memory operations are orders of magnitude faster than
camera’s analog operation, the adversary with write accesses to
the buffer can significantly reduce its ATL and easily pass the time
checking.
For this purpose, the hypervisor uses Stage II page table to con-
figure the camera’s frame buffer as read-only. The untrusted kernel
can still read the buffer. However, any write to the buffer (from
kernel or user spaces) is blocked by hardware. To deal with DMA
attacks from the kernel, the hypervisor also configures the SMMU
page tables used by peripheral devices, such that no device (ex-
cept the camera) can access the buffer. For ARM platforms without
SMMU page tables, the hypervisor intercepts I/O operations and
inspects the DMA descriptors.
The FIQ interrupt handler in Dev’s kernel is also hooked such
that its execution is trapped to the hypervisor, which then assembles
blocks in the camera buffers into an image frame. Although the
kernel is untrusted, protection of the FIQ handler is actually not
necessary. Any tampering with the handler leads the hypervisor to
mistakenly assemble image blocks. However, this does not feed any
counterfeit data (i.e., not from the camera) to the hypervisor. Thus,
the adversary gains no advantage, except protocol disruption.
display-send. Our prototype of Dev is a development board with
a low-end graphic card. Thus, there is no hardware signal synchro-
nizing LCD refreshing and kernel frame buffer update. Since the
display fetches the frame buffer data at fixed intervals, we simu-
late it by setting a timer with the same frequency. Note that the
simulation has no effect to the basic protocol, which does not use
display-send in Dev. We acknowledge that it introduces a constant
offset between obtained δD and real values for the iterative protocol.
Nonetheless, their distribution and average values are the same.
The security requirement of Dev’s display-send is that displayed
data must not be read by the adversary from memory. The adversary
is thus forced to use the analog channel, which increases ATL.
Therefore, the hypervisor properly configures the Stage II page
tables and the SMMU tables to set the frame buffer as inaccessible.
5.2.3
Image Related Issues. As noted in Section 3, we can only
use full-view images. Below we describe how full-view images are
chosen and generated in our implementation.
P and Pi -s.
Images displayed by Verifier to Dev are random, i.e.,
(almost) every region of the image is randomly generated. These
images are prepared by Verifier before running presence attestation,
in order to avoid the runtime overhead.
Note that the hypervisor is not burdened with image recognition.
Instead, it only reconstructs the picture produced by the camera
using the data in the camera buffer and offset information stored
in registers. More details are in Section 5.4, which describes the
implementation of the scene-based protocol.
Our current implementation does not include the algorithm to
evaluate P′ ≡ P. Instead, Alice is required to physically check for
similarity. Image processing techniques can be applied to automate
the process. We leave this item for future work.
Image of hi -s. We do not use randomly generated images for the
hypervisor, for two reasons: First, it is costly for the hypervisor to
generate random images, in terms of code size/complexity, storage
size, and time. Second, it is difficult for Verifier to check authenticity
of those images. Since software in Verifier is trusted and has the full-
fledged capability of image recognition and decoding data, it is more
advantageous for the hypervisor to display visualized HMACs.
The hypervisor splits hi into two binary strings, and converts
them into two barcodes. It then constructs an image with one
barcode at the top rows of the screen and the other – at the bottom.
The rest of the image is solid white color. This layout ensures that
any camera receiver must wait until the full image is displayed on
the screen, because the screen always renders pixel rows top-down.
Once Verifier camera-receives the image, it extracts two binary
strings from the barcodes and reconstructs hi for verification.
Since the time to reconstruct hi is within the time measurement,
it must be both short and constant. Verifier’s camera is configured
to produce images using the YUYV format, so that the camera’s
raw data is not compressed. The protocol agent in Verifier scans
the image to read out the barcodes. Specifically, the agent reads
pixel colors in a row. If a short black pixel segment is encountered,
the agent outputs ‘0’, and if a long black pixel segment is detected,
it outputs ‘1’.
5.3 Location-based Residence Checking
GPS Receiver of Dev receives GPS data stream from the satellite in
the form of the National Maritime Electronics Association (NEMA)
sentences. These sentences are a sequence of ASCII characters, start-
ing with ‘$’ and ending with a carriage return. In every sentence,
the first word describes its type. Geographic location information
of Dev, including longitude and latitude, is in the “GPRMC” type.
The receiver writes sentences to the Data Register (DR) one byte
at a time. Arrival of a byte is indicated by the Flag Register (FR)
where a flag bit is automatically set when the byte in DR is read by
software.
For Protocol 5, the hypervisor in Dev denies all write accesses
to DR by configuring Stage II page tables and SMMU page tables
(if available). This ensures that data in the register is genuinely
produced by on-board GPS receiver.
After setting up the restriction, the hypervisor continuously
checks FR and reads one byte from DR. If it detects the word "$GPRMC",
it copies subsequent characters to its buffer until it encounters a
carriage return. The captured sentence contains the location of Dev.
Hypervisor computes an HMAC and sends both GPS message and
HMAC to Verifier. Since message secrecy is not a concern and it
is not time sensitive, hypervisor calls a user-space application to
send them over the network.
Most users do not know the exact longitude and latitude of
their locations. Thus, Verifier displays the location reported by