0
0
287,072 bits
Size
Inaccessible
512 ctrl bits
512 ctrl bits
0
10 x 32 bits
˜1200 bits
3 x 64 bits
72 x 68 bits
1024 bits
8,656 bits
From Table I we can see that most of the PowerPC 405’s
known sensitive bits are accessible to our fault emulator.
Moreover, the vast majority of them exist within the PowerPC’s
instruction and data caches, making fault emulation within the
caches especially critical. Still, our fault emulator is unable
Fig. 2: Application model and its interaction with the emulated
rad-hard controller.
At the end of each trial, the application PowerPC is reset,
and the execution behavior is classiﬁed as one of the following
error types:
•
•
•
•
Benign: The application terminates normally within
some threshold of the execution time. The results are
correct.
Unrecoverable crash/hang: The application crashes or
hangs and cannot be reset either by the application
PowerPC or the emulated rad-hard microcontroller. In
this case, the test FPGA must be reprogrammed.
Recoverable crash/hang: The application crashes or
hangs, but is able to recover either through a rollback
or a reset. If the rad-hard microcontroller intervenes,
we consider this a recoverable crash/hang.
Silent data corruption (SDC): The application termi-
nates normally, but the results are incorrect. This is
not a speciﬁc focus of this work, however we track
these cases for future investigation.
B. Fault Models
In our fault emulator, faults are modeled as an SEU (single
event upset). Faults can be injected into the instruction and
data caches, including both tags and cache line data as well as
the register sets. Cache upsets are especially critical because
Virtex-4 caches have non-functional cache parity circuits [7],
a design fault of the embedded processor core. The fault
is injected through an interrupt in a non-cacheable memory
region, meaning the application is effectively paused while a
memory element is selected at random and the state ﬂipped.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:55:25 UTC from IEEE Xplore.  Restrictions apply. 
InitializeFFTComplex MultiplyThresholdCompare330 IterationsApplication ProcessorTesterShared Block RAM(heartbeat data, control flow data)Heartbeat InterruptEmulated Rad-hard Controllerto access any of the ALU/MAC bits, execution pipeline bits,
etc. This, broadly, is perhaps the primary disadvantage of fault
emulation: critical parts of the PowerPC are not visible to the
fault emulator.
The primary advantages of fault emulation, however, are
the detailed feedback that is available after each emulated
SEU, and the volume of trials that may be captured. Both the
emulated radiation-hardened microcontroller and application
send output via their own UART. After each trial, we know
when the fault was injected, what memory region that fault
was injected into, and the speciﬁc bit that was ﬂipped. We
ran three fault emulation campaigns and collected over ten
thousand injections in total. We describe the campaigns and
results in detail in Section V.
B. Laser Testing
An FPGA-based hardware/software tester was created
largely from scratch to control the experiments. The tester
includes a re-purposed high-speed digital tester board (orig-
inally created by NASA and ISI for particle beam testing [9]),
a Xilinx Virtex-II Pro FPGA design, a test program that runs
on a PowerPC core embedded in the Virtex-II Pro, and a high-
density connector for interfacing to the system under test. The
application under test runs on a PowerPC 405 core embedded
in a Virtex-4FX60 FPGA daughtercard positioned in the path
of the laser.
Two commercial Xilinx Virtex-4FX60 devices were pre-
pared for laser testing by a third party (FA Instruments, Inc.).
The devices were de-lidded and the backsides of the die were
polished to mirror surface quality.
The laser testing was performed at the U.S. Naval Research
Laboratory using a titanium sapphire pulsed laser (Clark-MXR
CPA1000) in a dual-photon setup. The laser generated 150 fs
pulses at a rate of 1 kHz with a spot size of 1.35 µm. The
NRL laser had been calibrated in the week prior to testing
to an intensity level of 73.6 pJ/mV, when using a neutral
density ﬁlter (OD1) that reduces the intensity by 8.64× at
the wavelength of interest.
Laser pulses were injected through the backside of the
device, as depicted in Fig. 3. A view of the laser testing setup
is provided in Fig. 4, with a close-up of the lens and device
in Fig. 5.
One of the challenges with application-level testing is to
inject only a single fault per application execution (e.g. once
per 5 seconds). A laser pulse was generated every ms, so a
means of selecting individual pulses was needed. NRL did
not previously have this capability, so a solution had to be
engineered. The same problem has been addressed at other
facilities [10]. In our solution, the tester drives a trigger signal
to a shutter controller which in turn opens and closes the
shutter in the laser path. The shutter (Uniblitz LS2) only
remains fully open for 0.7 ms and requires 1.5 ms to open
and close. The tester carefully synchronizes the trigger timing
to the laser to prevent a pulse from getting partially blocked
and to prevent two partial laser pulses (spaced out by 1 ms)
from getting through. The amount of laser energy delivered
through the shutter was measured using a photodetector as
quite consistent, conﬁrming that individual pulses were cleanly
selected.
Fig. 3: Cross-section of a Virtex-4FX60 device depicting how
a laser pulse is injected into the circuitry.
Fig. 4: Picture of laser testing setup.
Fig. 5: Close-up picture of laser testing setup.
Initially, static testing was used to locate the instruction
and data cache arrays within the PowerPC core area, to aid
in tuning the laser energy, and to determine the number of
bit ﬂips caused by each injected laser pulse. The instruction
and data caches were disabled, loaded with known patterns,
and left in that state indeﬁnitely as laser pulses were injected
by manually triggering the shutter. Using the Xilinx Micro-
processor Debugger (xmd) and debug instructions, the state of
the caches was continuously monitored for bit ﬂips, and any
miscompares logged.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:55:25 UTC from IEEE Xplore.  Restrictions apply. 
The main testing performed was dynamic testing of the
application. At the beginning of a trial, the hardware was
automatically positioned by the NRL’s MATLAB program
such that the laser beam path was pointed at a random location
within the PowerPC core area. The tester reset the application,
allowing it to begin executing. At a random time during the
expected execution time window, the tester allowed a single
laser pulse to be injected. The tester monitored the application
and logged the resulting behavior, along with the laser pulse
position, timing, and measured energy. Then the entire process
was repeated. Each trial lasted 5 seconds plus any additional
recovery period (e.g. to allow for rolling back and restarting
from a checkpoint), corresponding to a few hundred trials per
hour.
V. EXPERIMENTAL RESULTS
In this section we describe four experiments. In the ﬁrst
experiment, a static laser test was used for calibrating our laser
testing and validating the occurrence of bit upsets. The second
experiment, a dynamic laser test, represents our primary laser
test, where we validate our fault
tolerance library against
randomly injected laser pulses. The third experiment was a new
fault emulation campaign, and the fourth combines elements
of our dynamic laser test and fault emulation to validate the
realism of our fault emulation experiments.
A. Static laser test
Fig. 6: Number of upsets observed for increasing laser inten-
sities.
Having identiﬁed the instruction and data cache arrays
(see Section IV) we began by injecting single laser pulses
of increasing energy into a single location in the instruction
cache array. In Fig. 6 we provide results from our static test.
At low laser energies (< 700 pJ), no upsets were detected. At
809 pJ, pulses would regularly cause a single bit to ﬂip. At
higher energies such as 1619 pJ, each pulse caused multiple
bit ﬂips (2-5). Note that the gap in Fig. 6 represents laser
energies that were skipped over and does not imply that no
upsets occurred at these energies. A full characterization of
the cache was beyond the scope of this study.
Using this data, we settled on the 1619 pJ laser energy for
our dynamic tests. This provided us with reasonable conﬁdence
that each laser pulse was causing an upset within the PowerPC
core. This is critical because upsets are not directly observable
during dynamic testing (only indirectly through application-
level error behavior), and as we show in the following subsec-
tion, the vast majority of upsets caused no application-level
misbehavior.
B. Dynamic laser test
The dynamic test represents our primary data from the
laser experiment. Each trial is categorized as described in
Section III. To maintain laser focus and alignment, the scan
region of a single campaign was limited to just half of the
PowerPC core area;
two campaigns (left and right) were
needed to scan the entire area.
TABLE II: Laser left and right half results
Error Class
Unrecoverable crash/hang
Recoverable crash/hang
Silent data corruption
Benign
Total
Left
0
5
20
985
Right % of Total
0
48
27
934
0%
2.63%
2.33%
95.05%
Total
0
53
47
1919
2019
In Table II we provide the categorical output for each laser
pulse injection in both the left and right side campaigns. Of
particular note is that zero unrecoverable crashes/hangs were
encountered; upon a crash/hang, the application was always
successfully restarted from a checkpoint or through a reset.
In Fig. 7 we show each fault overlaid on an infrared die
photo of the embedded PowerPC core. The non-benign upsets
fall almost entirely within the PowerPC caches; so much so,
that we can clearly identify the caches on the right side of the
core. These are the instruction caches. The data caches, on the
left side, are less obvious, but left side errors still fall almost
exclusively within the data cache arrays. The remainder of the
core is composed of the ALUs, MMUs, an Ethernet controller,
register sets, etc. Notably, very few errors occurred in these
regions. Our application uses neither the MMU nor Ethernet
controller.
C. Fault emulation
TABLE III: Fault emulation full campaign results
Error Class
Unrecoverable crash/hang
Recoverable crash/hang
Silent data corruption
Benign
Total
% of Total
0%
13.27%
16.58%
71.15%
Total
0
449
561
2374
3384
Our third and fourth experiments center around the use
of a software-based fault emulator to characterize the same
application without the use of the laser. Our overall results,
including injections into both caches and the register sets are
shown in Table III. At a glance, it would appear that our
fault emulator tends to overestimate the number of predicted
application-level errors, suggesting that recoverable errors and
silent data corruption should account for 13.3% and 16.6%
of the errors, respectively. We explore this in more detail in
the following section; however, it is worth noting that this
demonstrates one of the major shortcomings of fault emulation:
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:55:25 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 7: Composite die photo showing the locations of benign faults (dots) and system-level errors overlaid on the embedded
processor core. Caches are traced with dashed lines. The red squares represent silent data corruption and blue diamonds represent
recoverable errors
the implied assumption that
the software-writable memory