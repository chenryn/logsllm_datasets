### Burp Suite 插件推荐

#### HTTP 请求处理
- **burpFakeIP** ([TheKingOfDuck/burpFakeIP](https://github.com/TheKingOfDuck/burpFakeIP))：通过修改 HTTP 请求头伪造 IP 地址的插件。
- **AES-Killer** ([Ebryx/AES-Killer](https://github.com/Ebryx/AES-Killer))：即时解密移动应用程序 AES 加密流量的 Burp 插件。
- **HTTPHeadModifer** ([c0ny1/HTTPHeadModifer](https://github.com/c0ny1/HTTPHeadModifer))：快速修改 HTTP 数据包头的 Burp Suite 插件。
- **JSON Beautifier**：格式化查看 JSON 数据。
- **BurpCrypto** ([whwlsfb/BurpCrypto](https://github.com/whwlsfb/BurpCrypto))：支持多种加密算法或直接执行 JS 代码，用于破解前端加密的 BurpSuite 插件。
- **Brida** ([federicodotta/Brida](https://github.com/federicodotta/Brida))：用于 Burp Suite 与 Frida 协作的插件。
- **burp-wildcard** ([hvqzao/burp-wildcard](https://github.com/hvqzao/burp-wildcard))：通过将多个扩展标签合并到一个标签中来简化 Burp 扩展标签。
- **burp-awesome-tls** ([sleeyax/burp-awesome-tls](https://github.com/sleeyax/burp-awesome-tls))：修复 Burp Suite 的 TLS 栈并模拟任何浏览器指纹。
- **burp-UnicodeAutoDecode** ([KagamigawaMeguri/burp-UnicodeAutoDecode](https://github.com/KagamigawaMeguri/burp-UnicodeAutoDecode))：自动将 Unicode 转码为中文。

#### 流量处理
- **AutoRepeater** ([nccgroup/AutoRepeater](https://github.com/nccgroup/AutoRepeater))：自动化重复请求的插件。
- **passive-scan-client-plus** ([winezer0/passive-scan-client-plus](https://github.com/winezer0/passive-scan-client-plus))：Burp 被动扫描流量转发插件。

### 漏洞检测
- **Authz**：快速探测越权漏洞。
- **BurpAuthzPlugin** ([wuntee/BurpAuthzPlugin](https://github.com/wuntee/BurpAuthzPlugin))：探测越权漏洞的插件。
- **http-request-smuggler** ([PortSwigger/http-request-smuggler](https://github.com/PortSwigger/http-request-smuggler))：辅助工具，帮助进行 HTTP 请求走私攻击。
- **JWT4B** ([ozzi-/JWT4B](https://github.com/ozzi-/JWT4B))：即时操作 JWT，自动执行针对 JWT 的常见攻击。
- **inql** ([doyensec/inql](https://github.com/doyensec/inql))：用于 GraphQL 安全测试的扩展。
- **Wsdler**：解析 WSDL 请求，以便使用 Repeater 和 Scanner 对 WSDL 请求进行测试。
- **APIKit** ([API-Security/APIKit](https://github.com/API-Security/APIKit))：发现、扫描和审计 API 的一体化工具。
- **BurpBounty** ([wagiro/BurpBounty](https://github.com/wagiro/BurpBounty))：通过直观的图形界面自定义规则，改进主动和被动扫描器。
    - **burp-bounty** ([Sy3Omda/burp-bounty](https://github.com/Sy3Omda/burp-bounty))：增强 Burp 扫描器功能的插件。
- **xia_sql** ([smxiazi/xia_sql](https://github.com/smxiazi/xia_sql))：在每个参数后面添加单引号或双引号，以检测 SQL 注入的小插件。
- **ssrf-king** ([ethicalhackingplayground/ssrf-king](https://github.com/ethicalhackingplayground/ssrf-king))：自动化 SSRF 检测的 Burp 插件。
- **J2EEScan** ([ilmila/J2EEScan](https://github.com/ilmila/J2EEScan))：提高 J2EE 应用程序渗透测试覆盖率的 Burp 插件。
- **RouteVulScan** ([F6JO/RouteVulScan](https://github.com/F6JO/RouteVulScan))：递归式被动检测脆弱路径的 Burp 插件。

#### 特定框架检测
- **Shiro**
  - **BurpShiroPassiveScan** ([pmiaowu/BurpShiroPassiveScan](https://github.com/pmiaowu/BurpShiroPassiveScan))：基于 BurpSuite 的被动式 Shiro 检测插件。
  - **shiro-check** ([bigsizeme/shiro-check](https://github.com/bigsizeme/shiro-check))：Shiro 反序列化检查的 Burp 插件。
- **Fastjson**
  - **Fastjson-Scanner** ([p1g3/Fastjson-Scanner](https://github.com/p1g3/Fastjson-Scanner))：查找 Fastjson 使用情况的 Burp 扩展。
  - **FastjsonScan** ([Maskhe/FastjsonScan](https://github.com/Maskhe/FastjsonScan))：Fastjson 扫描插件。
  - **fastjson-check** ([bigsizeme/fastjson-check](https://github.com/bigsizeme/fastjson-check))：Fastjson 被动扫描及生成不出网 Payload。
  - **BurpFastJsonScan** ([pmiaowu/BurpFastJsonScan](https://github.com/pmiaowu/BurpFastJsonScan))：基于 BurpSuite 的被动式 FastJson 检测插件。
- **Log4j**
  - **Log4j2Scan** ([whwlsfb/Log4j2Scan](https://github.com/whwlsfb/Log4j2Scan))：Log4j2 远程代码执行漏洞的 BurpSuite 被动扫描插件。
  - **log4j2burpscanner** ([f0ng/log4j2burpscanner](https://github.com/f0ng/log4j2burpscanner))：CVE-2021-44228 Log4j2 BurpSuite 扫描器，支持自定义 ceye.io API 或其他 API，包括内部网络。

### 插件开发
- **generator-burp-extension** ([rsrdesarrollo/generator-burp-extension](https://github.com/rsrdesarrollo/generator-burp-extension))：帮助开发 Burp 插件的工具。

---

## 安装及维护

### Linux
以 Kali 为例，Kali 自带的是 OpenJDK，不支持新版 Burp。请自行下载 [Oracle JDK](https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) 并按照 [Power-Linux](../../Integrated/Linux/Power-Linux.md##JDK) 中的说明进行安装。安装完成后，运行 `java -jar .jar` 启动 Burp Suite。

### macOS
- [macOS 下如何优雅地使用 Burp Suite](https://www.sqlsec.com/2019/11/macbp.html)

### 证书配置
对于 HTTPS 包，需要在浏览器中导入证书进行解密。

#### Firefox
1. 浏览器访问 `burp/`，下载 `cacert.der` 证书。
2. 在 Firefox 中，进入隐私与安全 -> 证书 -> 查看证书 -> 导入 -> 选择存储在“受信任的根证书颁发机构”并全部勾选信任。

#### Chrome
1. 在 Burp Suite 中，Proxy -> Options -> Proxy Listeners 中导出 CA 证书（选择 DER 格式）。
2. 打开 Chrome 设置，找到管理证书的按钮，在受信任一栏中选择导入，将刚才保存在本地的证书导入。

---

## Target 组件
Burp Target 组件主要包含站点地图、目标域和 Target 工具三部分，帮助渗透测试人员更好地了解目标应用的整体状况、当前的工作涉及哪些目标域以及分析可能存在的攻击面等信息。

### 站点地图 (Site Map)
- **左侧**：显示访问的 URL，按网站层级和深度树形展示整个应用系统的结构和关联其他域的 URL。
- **右侧**：显示某个 URL 被访问的明细列表，包括请求和应答内容。
- **右键菜单**：
  - **Compare site maps**：比较两个站点地图，区分不同权限下的访问差异。
  - **Engagement tools**：
    - **Analyze target**：提供概况、动态 URL、静态 URL 和参数四个视图，帮助分析站点的整体状况。

### 作用域 (Scope)
- **用途**：限制站点地图和 Proxy 历史中的显示结果、控制 Burp Proxy 拦截哪些请求、指定 Spider 抓取的内容、自动扫描的安全漏洞范围、指定 Intruder 和 Repeater 的 URL。
- **设置**：允许规则和去除规则，分别由协议、域名或 IP 地址、端口和文件名四部分组成。

---

## Proxy 组件

### 拦截 (Intercept)
- **右键菜单**：
  - **Don't intercept requests**：指定满足规则的包需要忽略。
  - **Do intercept**：拦截回包。
- **快捷键**：解码 `Ctrl + Shift + U`

### 选项 (Options)
- **Proxy listeners**：本地 HTTP 代理服务器，用于监听来自浏览器的传入连接。默认情况下，Burp 在环回接口的端口 8080 上创建一个侦听器。可以通过创建多个代理侦听器并配置其行为来适应不同的测试需求。