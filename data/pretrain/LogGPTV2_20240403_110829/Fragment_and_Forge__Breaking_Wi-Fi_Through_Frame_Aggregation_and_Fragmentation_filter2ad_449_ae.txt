### Devices and Vulnerabilities

The following devices were tested for various vulnerabilities related to frame fragmentation and encryption:

- **Laptops and Desktops:**
  - MacBook Pro 2013
  - MacBook Pro 2017
  - Dell Latitude 7490
  - MSI GE60

- **Smart Home Devices:**
  - Kankun Smart Plug
  - Xiaomi Mi Camera
  - NanoPi R1

- **Printers:**
  - Canon PRO-100S

- **Routers and Access Points:**
  - Asus RT-N10
  - Linksys WAG320N
  - Asus RT-AC51U
  - D-Link DIR-853
  - Aruba AP-305 / 7008
  - LANCOM LN-1700
  - Cisco Catalyst 9130

### Test Results and Vulnerabilities

The test results are summarized using the following icons:
- **(cid:32)**: Not affected
- **(cid:35)**: Vulnerable during handshake
- **U**: Accepts plaintext
- **◎**: Accepts all fragmented frames
- **(cid:71)(cid:35)**: Only the first (or last) fragment must be encrypted
- **(cid:72)(cid:35)**: Only one fragment must be encrypted

#### Table 1: Test Results for Various Devices

| Device                | Fragmentation Support | Plaintext Fragments | Mixed Fragments |
|-----------------------|-----------------------|---------------------|-----------------|
| MacBook Pro 2013      | (cid:32)               | (cid:35)             | (cid:71)(cid:35)       |
| MacBook Pro 2017      | (cid:32)               | (cid:35)             | (cid:71)(cid:35)       |
| Dell Latitude 7490    | (cid:32)               | (cid:35)             | (cid:71)(cid:35)       |
| MSI GE60              | (cid:32)               | (cid:35)             | (cid:71)(cid:35)       |
| Kankun Smart Plug     | (cid:32)               | (cid:35)             | (cid:71)(cid:35)       |
| Xiaomi Mi Camera      | (cid:32)               | (cid:35)             | (cid:71)(cid:35)       |
| NanoPi R1             | (cid:32)               | (cid:35)             | (cid:71)(cid:35)       |
| Canon PRO-100S        | (cid:32)               | (cid:35)             | (cid:71)(cid:35)       |
| Asus RT-N10           | (cid:32)               | (cid:35)             | (cid:71)(cid:35)       |
| Linksys WAG320N       | (cid:32)               | (cid:35)             | (cid:71)(cid:35)       |
| Asus RT-AC51U         | (cid:32)               | (cid:35)             | (cid:71)(cid:35)       |
| D-Link DIR-853        | (cid:32)               | (cid:35)             | (cid:71)(cid:35)       |
| Aruba AP-305 / 7008   | (cid:32)               | (cid:35)             | (cid:71)(cid:35)       |
| LANCOM LN-1700        | (cid:32)               | (cid:35)             | (cid:71)(cid:35)       |
| Cisco Catalyst 9130   | (cid:32)               | (cid:35)             | (cid:71)(cid:35)       |

#### Implementation Flaws

Another common implementation flaw is that devices reassemble mixed encrypted and plaintext fragments, instead of only accepting encrypted ones (CVE-2020-26147). This allows an attacker to replace certain encrypted fragments with plaintext ones. In our tests:
- 21 devices require that the first fragment is encrypted (icon (cid:71)(cid:35)).
- 9 devices require that the last fragment is encrypted (icon (cid:72)(cid:35)).
- 3 devices require that only one fragment is encrypted (icon (cid:32)).
- 11 devices accept plaintext frames (CVE-2020-26140).
- 9 devices accept fragmented but not unfragmented plaintext frames (CVE-2020-26143).

All combined, 53 out of 68 devices that support fragmentation are affected by at least one of these implementation vulnerabilities.

### Linux Defragmentation Code

The defragmentation code in Linux tries to enforce that all fragments are encrypted by checking whether they have consecutive PNs. Unfortunately, this check is implemented insecurely: after decrypting a frame, its PN is stored in a session variable, and the PN of the previous fragment is compared to this session variable. As a result, when a (second) plaintext fragment is received, it checks whether the PN in this session variable is consecutive to the previous fragment, and does not realize this PN is unrelated to the received plaintext fragment. This means the PN check can be bypassed by first forwarding a valid encrypted fragment towards Linux using a consecutive PN but under a different sequence number, and then injecting a plaintext fragment under the correct sequence number (see Figure 10 in the appendix for details).

### Practical Impact

If the first fragment can be a plaintext one, an attacker can include a malicious packet in this fragment, which will be processed by the victim once it receives all fragments. This is similar to the cache attack of Section 5.3. In case the first fragment must be encrypted, we can combine this vulnerability with either the A-MSDU or fragment cache attack to inject arbitrary frames. When combined with the A-MSDU attack, an attacker uses its multi-channel MitM position to set the A-MSDU flag of an encrypted first fragment. After this, the attacker injects a plaintext fragment, upon which the victim reassembles both fragments and processes the resulting A-MSDU. The idea is now that the second subframe will correspond to the payload of the plaintext fragment and contains a packet that the attacker wants to inject. An obstacle is that the first encrypted fragment, which the adversary cannot control, must result in a small first subframe of predictable length, such that the second subframe is contained in the injected (second) plaintext fragment. This can be assured by predicting the IP ID of packets, similar to the A-MSDU attack against clients in Section 3.2. A second limitation is that not all devices support fragmented A-MSDUs. In particular, out of 56 devices that supported A-MSDUs, 33 properly handled fragmented A-MSDUs, 9 received them as malformed frames, and the other 14 silently discarded them.

When combined with the cache attack, the attacker first poisons the fragment cache of an AP or client with an encrypted fragment containing (part of) the packet to be injected. After the victim connects to the target network, the adversary injects the second fragment as plaintext, and the victim will reassemble the frame and process the injected packet. An advantage of this combination compared to a default cache attack is that it can be performed even when no devices in the network send fragmented frames.

### Applicability to WEP and TKIP

We also tested WEP on Linux and found that an adversary could trivially set the more fragments flag, since it is not authenticated, and subsequently combine this first encrypted fragment with plaintext fragments. The TKIP protocol is only affected if the authenticity of reassembled frames is not verified (see Section 6.7).

### Broadcast Plaintext Fragments

Although broadcast frames should never be fragmented, several devices process broadcasted fragments as normal unfragmented frames. Moreover, some devices accept second (or subsequent) broadcast fragments even when sent unencrypted in a protected Wi-Fi network (CVE-2020-26145). An attacker can abuse this to inject packets by encapsulating them in a second fragmented plaintext broadcast frame, i.e., in a Frag1 frame with a broadcast receiver address. Even unicast network packets, such as IPv4 or ARP packets, can be encapsulated in broadcast 802.11 frames and hence be injected in this manner. Affected devices are listed under the column “Bcast. frag.” in Table 1, 2, and 3. Notable affected devices are those of Apple and APs on NetBSD and FreeBSD. Some devices are only vulnerable during the execution of the 4-way handshake, but this does not limit attacks: a victim can be forcibly disconnected, e.g., deauthenticated or jammed, such that the victim will reconnect and execute a new 4-way handshake.

### Cloaking A-MSDUs as Handshake Frames

Devices accept plaintext 4-way handshake frames, i.e., plaintext data frames with an EAPOL LLC/SNAP header, when connecting to a network. If implemented wrongly, this can be abused to inject plaintext A-MSDUs (CVE-2020-26144). In particular, an adversary can construct a plaintext A-MSDU whose first 8 bytes can also be interpreted as a valid EAPOL LLC/SNAP header.