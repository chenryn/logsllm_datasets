                    $newbraceopen++;
                else if($this->tokens[$i+$f] === '}')   
                    $newbraceopen--;
                $f++;
                if(!isset($this->tokens[$i+$f]))
                {
                    addError('Could not find ending of '.$this->tokens[$i][1].'-statement.', array_slice($this->tokens, $i, $e+5), $this->tokens[$i][2], $this->filename);
                    break;  
                }
            }
            if($this->tokens[$i+$f][0] === T_BREAK)
            {
                if($this->tokens[$i+$f+1] === ';')
                    $this->wrapbraces($i+$e+1, $f-$e+1, $i+$f+2);
                // break 3; 
                else
                    $this->wrapbraces($i+$e+1, $f-$e+2, $i+$f+3);
            }   
            else
            {
                $this->wrapbraces($i+$e+1, $f-$e-1, $i+$f);
            }   
            $i++;
        }
    }
类似的语法结构,使用`while`定位到冒号,跳过`case`条件,将`case xxx:yyyy`分割成`case xxx`、`:yyyy`两段.
随后开始处理第二段.
接着的是`if`语句,进入的条件为:
  1. `$this->tokens[$i+$e]`为`:` 或 `$this->tokens[$i+$e]`为`;`
  2. `$this->tokens[$i+$f]`不为`{`
  3. `$this->tokens[$i+$f][0]`不为`T_CASE`或`T_DEFAULT`
在`if`语句继续包裹了一个条件要求较多的`while`语句,对应的条件如下:
    while(
    $newbraceopen 
    || 
        (
        isset($this->tokens[$i+$f]) 
        && 
        $this->tokens[$i+$f] !== '}' 
        && 
            !(
            is_array($this->tokens[$i+$f]) 
            && 
                (
                $this->tokens[$i+$f][0] === T_BREAK 
                || 
                $this->tokens[$i+$f][0] === T_CASE 
                || 
                $this->tokens[$i+$f][0] === T_DEFAULT 
                || 
                $this->tokens[$i+$f][0] === T_ENDSWITCH) 
                ) 
            )
        )
即:
  1. $newbraceopen小于等于0
  2. `$this->tokens[$i+$f][0]`处的token不为`}`或`T_BREAK`,`T_CASE`,`T_DEFAULT`,`T_ENDSWITCH`
    通过这一步操作,```swicth```语句下多个条件得以分开,而接下来的语句为:
    ```php
    if($this->tokens[$i+$f][0] === T_BREAK)
    {
        if($this->tokens[$i+$f+1] === ';')
            $this->wrapbraces($i+$e+1, $f-$e+1, $i+$f+2);
        else
            $this->wrapbraces($i+$e+1, $f-$e+2, $i+$f+3);
    }   
    else
    {
        $this->wrapbraces($i+$e+1, $f-$e-1, $i+$f);
    }
这一段主要作用为在`break`语句处加上`{}`,补全语法结构.
接下来是与上面判断为`case`同级的`else if`语句,代码如下:
    else if( $this->tokens[$i][0] === T_DEFAULT
    && $this->tokens[$i+2] !== '{' )
    {
        $f=2;
        $newbraceopen = 0;
        while( $this->tokens[$i+$f] !== ';' && $this->tokens[$i+$f] !== '}' || $newbraceopen )
        {       
            if($this->tokens[$i+$f] === '{')
                $newbraceopen++;
            else if($this->tokens[$i+$f] === '}')   
                $newbraceopen--;
            $f++;
            if(!isset($this->tokens[$i+$f]))
            {
                addError('Could not find ending of '.$this->tokens[$i][1].'-statement.', array_slice($this->tokens, $i, 5), $this->tokens[$i][2], $this->filename);
                break;  
            }
        }
        $this->wrapbraces($i+2, $f-1, $i+$f+1);
    }
该语句进入的条件为token索引信息对应为`T_DEFAULT`.
结合上面的分析经验,本段代码作用为将default的条件部分使用花括号包括,补全语法结构.
再往下为:
    else if( $this->tokens[$i][0] === T_FUNCTION )
    {
        $this->tokens[$i+1][1] = strtolower($this->tokens[$i+1][1]);
    }   
    else if( $this->tokens[$i][0] === T_STRING && $this->tokens[$i+1] === '(')
    {
        $this->tokens[$i][1] = strtolower($this->tokens[$i][1]);
    }
这一段是将函数名全部小写,并没有太多要详细说明的内容.接下来是`else if`语句:
    else if( $this->tokens[$i][0] === T_DO )
    {
        $f=2;
        $otherDOs = 0;
        //找到最外层的while,跳过内层while
        while( $this->tokens[$i+$f][0] !== T_WHILE || $otherDOs )
        {       
            if($this->tokens[$i+$f][0] === T_DO)
                $otherDOs++;
            else if($this->tokens[$i+$f][0] === T_WHILE)
                $otherDOs--;
            $f++;
            if(!isset($this->tokens[$i+$f]))
            {
                addError('Could not find WHILE of DO-WHILE-statement.', array_slice($this->tokens, $i, 5), $this->tokens[$i][2], $this->filename);
                break;  
            }
        }
        // 补齐花括号
        if($this->tokens[$i+1] !== '{')
        {
            $this->wrapbraces($i+1, $f-1, $i+$f);
            // by adding braces we added two new tokens
            $f+=2;
        }
        $d=1;
        //$max=count($this->tokens)  因此该while语句为在寻找临近do-while的距离
        while( $this->tokens[$i+$f+$d] !== ';' \&\& $dtokens = array_merge(
            array_slice($this->tokens, 0, $i), // before DO 
            array_slice($this->tokens, $i+$f, $d), // WHILE condition
            array_slice($this->tokens, $i+1, $f-1), // DO WHILE loop tokens
            array_slice($this->tokens, $i+$f+$d+1, count($this->tokens)) // rest of tokens without while condition
        );  
    }
在前面的基础上,我们再来分析这一段代码便简单许多,简化一下描述便是:该段代码用以整合do-while语句,补齐语法结构并将`do-while`精简为`while`.
最后返回精简过的`token`信息:
    $this->tokens = array_values($this->tokens);
**fix_ternary函数分析**
从函数名分析分析,该函数作用为处理三元操作符,使其变为我们常见的语法习惯.大体结构仍然为`for`循环搭配`return`语句.
首先是`if`语句判断是否为`?`,为真则进入.并在进入后立即删除问号,随后判断在问号之前的符号是否为`)`,为真则进入,随后又删除反括号.并通过while语句将问号之前的使用括号包裹的token信息删除,直到找到最外层括号,结束while语句.
随后是if语句:
    if($this->tokens[$i-$f] === '!' 
    || (
        is_array($this->tokens[$i-$f]) 
        && ($this->tokens[$i-$f][0] === T_STRING    
            || $this->tokens[$i-$f][0] === T_EMPTY 
            || $this->tokens[$i-$f][0] === T_ISSET
            )
        )
    ){
        unset($this->tokens[$i-$f]);
    }
该段if语句满足以下条件之一即可进行删除token信息处理:
    1. $this->tokens[$i-$f] 为 !
    2. $this->tokens[$i-$f] 为 字符串、is_empty()、isset()
接着进入与上面if同级的else if语句中:
    else if(in_array($this->tokens[$i-2][0], Tokens::$T_ASSIGNMENT) || in_array($this->tokens[$i-2][0], Tokens::$T_OPERATOR) )
可以看出,仅当`$this->tokens[$i-2][0]`为指定的token信息时,才会进入接下来的操作,而指定的token信息为:
    1. $T_ASSIGNMENT    // 赋值符
    2. $T_OPERATOR      // 操作符
其中,`$T_ASSIGNMENT`为:
    public static $T_ASSIGNMENT = array(
        T_AND_EQUAL,
        T_CONCAT_EQUAL,
        T_DIV_EQUAL,
        T_MINUS_EQUAL,
        T_MOD_EQUAL,
        T_MUL_EQUAL,
        T_OR_EQUAL,
        T_PLUS_EQUAL,
        T_SL_EQUAL,
        T_SR_EQUAL,
        T_XOR_EQUAL
    );
而`$T_OPERATOR`为:
    public static $T_OPERATOR = array(
        T_IS_EQUAL,
        T_IS_GREATER_OR_EQUAL,
        T_IS_IDENTICAL,
        T_IS_NOT_EQUAL,
        T_IS_NOT_IDENTICAL,
        T_IS_SMALLER_OR_EQUAL
    );
而在接下来的操作中,rips删除了`$this->tokens[$i-1]`以及`$this->tokens[$i-2]`的token信息,这里删除`-1`与`-2`位置的token是因为上面的操作符通常都是成对出现的,如`T_AND_EQUAL`对应的操作符为`&=`,因此需要删除`$i-1`与`$i-2`处的token才能保证操作符被删除干净.
而接下来的`while`语句则与前面的作用相同,都是用以删除在目标位置前,包裹在括号内的内容以及某几个特定的`token`信息.
随后进行最后的一次if判断,判断是否条件部分为单独的一个变量,如是,则删除.
最终返回token信息,至此,rips的`token`分析过程结束
### Scanner效果展示
我们自定义待扫描文件内容为:
    "c","d"=>"d");
    $d = ['1','2'];
    // xxxxxxx
    // 
    `ls`;
    if($a=="1") $b="2";
    $a=isset($c)?"aa":"bb";
分别在`prepare_token`,`array_reconstruct_tokens`,`fix_tokens`,`fix_ternary`函数尾处添加var_dump函数,并在`tokenize`函数尾处写入`die()`
首先输出的token为:
    0|1|/Applications/MAMP/htdocs/aaa.php|0| 0|1|/Applications/MAMP/htdocs/aaa.php (tokenizing)|0|
    /Applications/MAMP/htdocs/rips/lib/tokenizer.php:92:
    array (size=60)
      0 => 
        array (size=3)
          0 => int 320
          1 => string '$a' (length=2)
          2 => int 3
      1 => string '=' (length=1)
      2 => 
        array (size=3)
          0 => int 320
          1 => string '$_GET' (length=5)
          2 => int 3
      3 => string '[' (length=1)
      4 => 
        array (size=3)
          0 => int 323
          1 => string ''a'' (length=3)
          2 => int 3
      5 => string ']' (length=1)
      6 => string ';' (length=1)
      7 => 
        array (size=3)
          0 => int 320
          1 => string '$b' (length=2)
          2 => int 4
      8 => string '=' (length=1)
      9 => 
        array (size=3)
          0 => int 320
          1 => string '$_POST' (length=6)
          2 => int 4
      10 => string '[' (length=1)
      11 => 
        array (size=3)
          0 => int 323
          1 => string ''b'' (length=3)
          2 => int 4
      12 => string ']' (length=1)
      13 => string ';' (length=1)
      14 => 
        array (size=3)
          0 => int 320
          1 => string '$c' (length=2)
          2 => int 5
      15 => string '=' (length=1)
      16 => 
        array (size=3)
          0 => int 368
          1 => string 'array' (length=5)
          2 => int 5
      17 => string '(' (length=1)
      18 => 
        array (size=3)
          0 => int 323
          1 => string '"c"' (length=3)
          2 => int 5
      19 => 
        array (size=3)
          0 => int 268
          1 => string '=>' (length=2)
          2 => int 5
      20 => 
        array (size=3)
          0 => int 323
          1 => string '"c"' (length=3)
          2 => int 5
      21 => string ',' (length=1)
      22 => 
        array (size=3)
          0 => int 323
          1 => string '"d"' (length=3)
          2 => int 5
      23 => 
        array (size=3)
          0 => int 268
          1 => string '=>' (length=2)
          2 => int 5
      24 => 
        array (size=3)
          0 => int 323
          1 => string '"d"' (length=3)
          2 => int 5
      25 => string ')' (length=1)
      26 => string ';' (length=1)
      27 => 
        array (size=3)
          0 => int 320
          1 => string '$d' (length=2)
          2 => int 6
      28 => string '=' (length=1)
      29 => string '[' (length=1)
      30 => 