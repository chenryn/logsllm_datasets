T ∈ F , we use leaves(T ) to denote all the leaf nodes of T .
Whether they are fully expanded or not, we observe that the
following equality must hold.
∀T∈F ,∀i∈[1..λ], Πi =
Πn
i
(1)
(cid:91)
n∈leaves(T )
We use the above relation to prune K as follows. Given a tree
T , if Πi contains a pattern not in any leaf node of T , then this
pattern can be removed from Πi. Furthermore, whenever
Πi is reduced, if another tree’s frontier node includes any
pattern not in Πi, then that pattern should be removed.
If any node’s Πi becomes empty, then this node should be
removed, which may cause Πi(cid:48) for some i(cid:48) to be updated.
This process computes a ﬁxpoint that satisﬁes Eq. (1).
We also note that two trees can be combined, by having
a cartesian product of their sets of leaf nodes. The product
of two nodes result in a node with their corresponding Πi’s
intersected.
4.4 Combining Reduction with Searching
Our attack strategy is to combine deterministic reduction
with searching in an integrated fashion. When given (cid:96) > 1
pairs of challenge/response, we ﬁrst reduce K using deter-
ministic information, and then create a search tree for each
authentication session. We iteratively perform the following
until no change is made to any tree or K. (1) Use Eq. (1)
to prune K and the search trees as much as possible. (2)
Expand any search tree if it is not fully expanded and it has
no more than N = 1000 leaf nodes. (3) If there exist two
fully expanded trees in F such that the product of the sizes
of their leaf sets is no more than N(cid:48) = 10000, merge the
two trees by computing the cartesian product of their sets
of leaf nodes. The algorithmic description of search over one
session is shown in Algorithm 1.
4.5 Guessing the Response
The attack strategy described so far is about how to re-
duce K; we now discuss how to respond to a challenge frame.
The basic strategy is for each symbol, ﬁnd whether there
exists a plausible key in K that results in the symbol when
overlaid with the challenge frame. For challenges generated
by random segment based algorithms, however, a more ef-
fective response-guessing strategy is possible. For each chal-
lenge frame, order the symbols that are compatible with K
by the number of segments that need to be added to form
them, and guess the one that requires the fewest number
of additional segments based on decreasing probability. The
intuition is that the symbol(s) that can be formed by adding
the least number of segments are the most likely responses.
It turns out that using this guessing strategy alone, without
any searching, one can guess the response for NSD (7%+SE)
with probability around 0.1. That is, this guessing attack
can (0, 0.1)-break NSD (7%+SE) (as shown in Figure 5(c)).
Note that such heuristic does not work for random-pattern
based challenge generation algorithms.
4.6 Effectiveness of Noisy Frames
The usage of noisy frames that do not encode any digit
might appear to improve security, as it prevents adversary
from knowing for certain which frame corresponds to which
digit. This, however, is not the case. First, as each session
has only 4 digits, even if one does not know which frame en-
codes which digit, one can still exploit the information that
none of the other 5 digits are shown on any of the α = 15
frames to reduce the plausible key space. This, by itself, may
already leak more information when compared with the case
of using just 4 frames as in BSD. With noisy frames, for each
position, one has more than 15×5 = 75 challenge-digit pairs
to eliminate plausible key patterns. With just 4 frames, one
has 4 × 8 = 32 pairs. Second, one can search through each
of the α = 15 possibilities, and compute the set of plausi-
ble keys for each possibility, and remove key patterns that
are incompatible with any possibility. Note that after one
makes the guess, the noisy frames leak additional informa-
tion because they cannot encode any digit.
5. ATTACKING MULTI-SYMBOL SVAPS
Search is not eﬀective against multi-symbol SVAPs as they
reveal signiﬁcantly less amount of deterministic information.
Without such deterministic information, the key reduction
step of Search is not eﬀective. Without reducing the plau-
sible key space, using the search trees is unable to make
progress.
In this section, we present SolveLP, a class of
attacks that model the problem as a pseudo-boolean satis-
faction problem.
5.1 Constraint Formulation
The key is denoted by x, a challenge frame is denoted by
y, and the response is denoted by r. We use x[p] and y[p]
to denote the key pattern and challenge pattern in position
p of x and y, respectively. We use [λ] = [1 . . . λ] to denote
the set of positions in a challenge frame or key. We use PK
608to denote the set of valid key patterns and PC to denote the
set of valid challenge patterns.
Variables In our pseudo-boolean constraint formulation,
the constraints are over the following 0 − 1 variables.
Xp,k = 1 if and only if x[p] = k, for p ∈ [λ] and k ∈ PK .
There are λ ∗ |PK| such variables. These variables encode
the key we want to attack, and are the variables that we
want to solve. To make it easier to explain the constraints,
we also introduce the following macro variables that can be
expressed using Xp,k’s.
Yp,c,s, where p ∈ [λ], c ∈ PC , and s ∈ Σ.
Yp,c,s = 1 if and only if for the key we want to attack, using
c as the challenge pattern in position p, displays the symbol
s; it can be expressed as follows:
(cid:88)
Yp,c,s =
Xp,k
(2)
k∈compatible(c,s)
where compatible(c, s) is the set of all valid key patterns in
PK that display s when overlaid with c.
Universal Constraints. These constraints are applicable
to all protocols. The following requires that each position of
the key takes only one key pattern.
∀p ∈ [λ],
Xp,k = 1
(3)
(cid:88)
k∈PK
Note that the above represents λ constraints, one for each
position. These constraints are conjuncted with the con-
straints below for encoding information revealed in each
challenge/response pair.
EDD Speciﬁc Constraints. For EDD we have the following
constraints for each challenge frame y and response r.
• The challenge y generates exactly two digits:
(cid:88)
(cid:88)
p∈[λ]
s∈Σ
Yp,y[p],s = 2
(4)
This says that knowing the patterns on each position
in the challenge, the total number of digits that are
displayed is exactly 2. Recall that Yp,y[p],s should be
expanded according to Eq. (2).
• The challenge y generates r:
Yp,y[p],r ≥ 1
(5)
(cid:88)
p∈[λ]
Note that the ≤ 2 part is implied by Eq.(4).
HDD Speciﬁc Constraints. For HDD we have the following
two constraints for each challenge frame y and response r.
The ﬁrst of which states that the response corresponding
to frame y is r. This constraint is the disjunction of two
disjunctions, one corresponding to the case that two diﬀerent
digits r1 and r2 are displayed, and the other corresponding
to the case that the same digit is displayed twice.
(cid:95)
(cid:95)
r1(cid:54)=r2∈Σ∧(r1+r2) mod 10=r
(cid:95)
r1∈Σ∧(r1+r1) mod 10=r
(cid:1) = 2
(cid:88)
(cid:88)
p∈[λ]
p∈[λ]
(cid:0)Yp,y[p],r1 + Yp,y[p],r2
 = 2
Yp,y[p],r1
The second constraint captures the deterministic informa-
tion revealed by HDD, that is, as 1 /∈ Σ, a challenge frame
cannot encode a digit d such that (d + 1) mod 10 = r. Note
this does not apply to HTD.
(cid:88)
(cid:88)
Xp,k = 0
(6)
p∈[λ]
k∈compatible(y[p],(r−1) mod 10)
HTD Speciﬁc Constraints.
The constraints for HTD in-
clude only the ﬁrst constraint for HDD, and can be obtained
by natural extension. We omit the details.
5.2 Linear Programming Relaxation
After obtaining the constraints for multiple challenge-
response pairs (cid:104)(y1, r1) . . . (yn, rn)(cid:105), one can attempt to use
any oﬀ-the-shelf SMT, SAT, or pseudo-boolean solver to
solve for the variables of the form Xp,k. Such an assign-
ment of the Xp,k variables will give us one plausible key
which is compatible with the given challenge-response pairs
(yi, ri). However, in experiments we have found that all the
constraint solvers we have tried fail to scale for λ ≥ 10.
To meet this challenge, we apply the linear programming
relaxation technique to solving the 0-1 constraint satisfac-
tion problem. That is, instead of assigning binary values to
the variables, we assign fractional values to them, and inter-
pret a larger value as more likely to be 1. We further apply
the idea of multiplicative updates to solve the resulting lin-
ear programming problem.
Our usage of the multiplicative update method can be
roughly viewed as interpreting a fractional value assigned to
a variable Xp,k as the probability of x[p] = k. Initially, all
the probabilities are uniform, i.e., for all p, k, Xp,k = 1|PK| .
However, the initial values of Xp,k may not respect the con-
straints from challenge-response pairs, which consequently
means we have to update the values of Xp,k. We update the
variable values in a multiplicative fashion. For instance, if
we have a constraint Xi +Xj = t, and currently Xi +Xj = s,
we update the the values in the following way: Xi ← Xi
t
and Xj ← Xj
s
t
s . If the constraint is inequality, we will only
update the values (taking the RHS of the inequality as the
target) when the inequality does not hold. As Xp,k can
appear in diﬀerent constraints, updating Xp,k values to sat-
isfy one constraint may end up violating another constraint.
Hence, we loop through all constraints until the values of the
variables converge (if the cumulative change of the variables
is below a small threshold, we use 0.01 in experiments), or
a loop threshold (100 in experiments) is reached.
5.3 Attacking EDD
To attack EDD, one has a set of linear constraints that are
logically and’ed together. We thus can readily apply the
above multiplicative update methods. When given the chal-
lenge frame y, we enumerate all possible response r, encode
y and r using assuming r is the response, and just use this
summation (LHS of Eq. (5)) as the weight corresponding
to r. The response with highest weight is chosen to be the
guess.
5.4 Attacking HDD and HTD
For HDD and HTD, because of the uncertainty of which pairs
of digits are displayed, the constraint for each frame con-
sists of a disjunction, which cannot be directly handled by
609the multiplicative update approach. We now explain our
approach for HDD, which can be easily generalized to HTD.
To attack HDD, we have to combine guessing which pairs are
displayed with solving the system of constraints.
Given a pair (cid:104)y, r(cid:105), we enumerate through all possible dig-
its r1, r2 ∈ Σ such that r1 + r2 = r, and compute
vy(r1, r2) = max
Yl,y[l],⊥,
Yi,y[i],r1 × Yj,y[j],r2 × (cid:89)
Xl,k −(cid:80)
s∈Σ Yl,y[l],s. This esti-
mates the probability that r1 and r2 are displayed. We then
use the pair with the highest value as the weight for this
frame.
k∈PK
where Yl,y[l],⊥ = (cid:80)
i,j∈[λ] : i(cid:54)=j
l(cid:54)=i,j
We compute the weight for all frames in the transcript,
and start with the frame with highest weight. The two digits
that produces this weight are assumed to be shown in this
frame, and encoded as a constraint. We then update the
variables using all constraints, and guess the next frame.
We do this until we’ve guessed 2/3 of all frames. We leave
1/3 frames unguessed because it is more probable to make
wrong guesses in the last few frames (as guesses are made
in the descending order of conﬁdence), and one wrong guess
would make the ﬁnal guessing inaccurate. This 1/3 ratio is
our initial heuristic choice.
In the experiments, we found
that using a ratio of 1/4 performs slightly better, and a
ratio of 1/2 is slightly worse. We did not attempt to further
optimize this ratio. When the transcript is updated, the
above computation will be repeated.
When given the challenge frame, we compute the score
for each response r, which is the sum of vy(r1, r2) such that
(r1 + r2) mod 10 = r, and choose r with the highest score.
6. EXPERIMENTAL EVALUATION
In this section, we report experimental results concerning
the security analysis of SVAPs under the two attacks: Search
and SolveLP.
6.1 The Search Attack
Experimental setting. All the reported results here
are averaged over 10, 000 runs. For each run, we gener-
ate a key and 20 sessions (100 for HDD) of simulated chal-
lenge/response.
Starting from the ﬁrst session, for each session we do the
following (1) generate a challenge/response pair (y, r); (2)
without r, use K, the current global set of plausible keys, to
guess a response to y, output whether the guess is correct;
(3) compute the set of compatible responses, and output the
size of this set; (4) output the size of plausible keys in K;
(5) add (y, r) to the transcript, and update K.
We aggregate the output from step (2) of 10, 000 runs into
the probabilities of making a correct guess after using the
1
transcript of a certain number of sessions. We use log2
p
when plotting the graphs. This can be viewed estimating
the min-entropies of the guesses. We perform steps (3) and
(4) to generate data that enable us to better understand
the relationship between sizes of plausible keys, numbers of
compatible responses, and ﬁrst-guess success probability.
We attack the protocols presented in Section 3.1, i.e.,
NSD (7%+SE), NSD (20%+SE), BSD (20%+SE), BSD (20%), and
BSD. We also attack HDD (α =3), as a comparison of the ef-
fectiveness between Search and SolveLP. The Search attack
is completely ineﬀective against EDD and HTD. We present re-