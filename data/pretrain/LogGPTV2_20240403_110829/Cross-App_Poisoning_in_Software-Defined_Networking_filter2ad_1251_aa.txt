title:Cross-App Poisoning in Software-Defined Networking
author:Benjamin E. Ujcich and
Samuel Jero and
Anne Edmundson and
Qi Wang and
Richard Skowyra and
James Landry and
Adam Bates and
William H. Sanders and
Cristina Nita-Rotaru and
Hamed Okhravi
Cross-App Poisoning in Software-Defined Networking
Qi Wang
Samuel Jero
MIT Lincoln Laboratory
Anne Edmundson
Princeton University
Benjamin E. Ujcich
University of Illinois at
Urbana-Champaign
Richard Skowyra
MIT Lincoln Laboratory
James Landry
MIT Lincoln Laboratory
Cristina Nita-Rotaru
Northeastern University
Adam Bates
University of Illinois at
Urbana-Champaign
Hamed Okhravi
MIT Lincoln Laboratory
University of Illinois at
Urbana-Champaign
William H. Sanders
University of Illinois at
Urbana-Champaign
ABSTRACT
Software-defined networking (SDN) continues to grow in popu-
larity because of its programmable and extensible control plane
realized through network applications (apps). However, apps intro-
duce significant security challenges that can systemically disrupt
network operations, since apps must access or modify data in a
shared control plane state. If our understanding of how such data
propagate within the control plane is inadequate, apps can co-opt
other apps, causing them to poison the control plane’s integrity.
We present a class of SDN control plane integrity attacks that
we call cross-app poisoning (CAP), in which an unprivileged app
manipulates the shared control plane state to trick a privileged app
into taking actions on its behalf. We demonstrate how role-based
access control (RBAC) schemes are insufficient for preventing such
attacks because they neither track information flow nor enforce in-
formation flow control (IFC). We also present a defense, ProvSDN,
that uses data provenance to track information flow and serves
as an online reference monitor to prevent CAP attacks. We imple-
ment ProvSDN on the ONOS SDN controller and demonstrate that
information flow can be tracked with low-latency overheads.
CCS CONCEPTS
• Security and privacy → Access control; Information flow con-
trol; Information accountability and usage control; • Networks →
Programmable networks;
KEYWORDS
software-defined networking; data provenance; information flow
control; network operating system
∗DISTRIBUTION STATEMENT A. Approved for public release: distribution unlimited.
This material
is based upon work supported by the Department of Defense
under Air Force Contract No. FA8721-05-C-0002 and/or FA8702-15-D-0001. Any
opinions, findings, conclusions or recommendations expressed in this material are
those of the author(s) and do not necessarily reflect the views of the Department of
Defense.
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
© 2018 Association for Computing Machinery.
This is the author’s version of the work. It is posted here for your personal use. Not for
redistribution. The definitive Version of Record was published in 2018 ACM SIGSAC
Conference on Computer and Communications Security (CCS ’18), October 15–19, 2018,
Toronto, ON, Canada, https://doi.org/10.1145/3243734.3243759.
ACM Reference Format:
Benjamin E. Ujcich, Samuel Jero, Anne Edmundson, Qi Wang, Richard
Skowyra, James Landry, Adam Bates, William H. Sanders, Cristina Nita-
Rotaru, and Hamed Okhravi. 2018. Cross-App Poisoning in Software-Defined
Networking. In 2018 ACM SIGSAC Conference on Computer and Communi-
cations Security (CCS ’18), October 15–19, 2018, Toronto, ON, Canada. ACM,
New York, NY, USA, 16 pages. https://doi.org/10.1145/3243734.3243759
1 INTRODUCTION
Software-defined networking (SDN) has emerged as a flexible archi-
tecture for programmable networks, with deployments spanning
from enterprise data centers to cloud computing and virtualized
environments, among others [33]. The rapid growth and potential
value1 of SDN stems from the need in industry and the research
community for dynamic, agile, and programmable networks. Driv-
ing the popularity of SDN is the use of modular and composable
network applications (or apps) that extend the capabilities of the
logically centralized control plane. Networks that would formerly
have required monolithic and proprietary software or complex
middlebox deployment can now be addressed by the larger devel-
oper community through the use of application program interfaces
(APIs) and even third-party app stores for practitioners [31].
While apps add value in ways that would have been difficult or
impractical before, the burgeoning SDN app ecosystem introduces
significant control plane security challenges. The SDN architecture
arguably involves a larger attack surface than traditional networks,
because malicious apps can disrupt network operations systemically
and significantly [14, 37, 42, 73]. A recent article notes that “attacks
against SDN controllers and the introduction of malicious controller
apps are probably the most severe threats to SDN,” and that the
situation is further complicated by dynamic configurations that
make it impossible for “defenders to tell whether the current or
past configuration is intended or correct” [14].
To date, defenses that limit the SDN attack surface have in-
cluded app sandboxing [75], TLS-enabled APIs [61, 64, 68], API
abuse prevention [65, 78], and role-based access control (RBAC)
for apps [68, 89], among others. Although these mechanisms im-
prove control plane security, we posit that they are not sufficient
for mitigating information flow attacks within the control plane.
1A 2016 forecast by the International Data Corporation predicts that the SDN market
will be valued up to 12.5 billion USD by 2020, with network applications accounting
for 3.5 billion USD of that market [33].
1
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
B. Ujcich et al.
In order to function properly, apps necessarily require access to
and/or modification of the SDN control plane state, which includes
data stores and control plane messages. This “shared” state design
among apps creates new attack vectors for integrity attacks. For
instance, trusted or system-critical apps may unintentionally use
data generated by untrusted or malicious apps [42], leading to a
“confused deputy” problem [30]. To date, the SDN security literature
has not systematically considered the class of integrity attacks that
leverage information flow within the control plane, leaving SDN
controllers that implement this shared state design vulnerable.
While RBAC-based systems can limit the attack surface by pre-
venting access to shared data structures based on assignment of
permissions to roles and subjects, RBAC alone is not sufficient for
preventing attacks against the integrity of the shared SDN con-
trol plane state, because RBAC does not track how data are used
after authorization [72]. Consider the scenario in which an SDN
controller provides host and flow rule services among its core func-
tionalities. Suppose an adversary has compromised a host-tracking
app that, as part of the app’s normal functionality, has permission
to write to the host data store, but does not have permission to
write flow rules. A second app performing routing has permission
to read the host store and also to read and write flow rules. As part
of its functionality, the routing app ensures that all hosts can be
routed correctly, and it modifies flow rules as needed. Now suppose
that the adversary modifies a host location in the host data store
to point to a host that it has compromised. The routing app de-
tects this change and rewrites flow rules to reflect the new location.
Without being granted permission, the host-tracking app in this
example has succeeded in effectively bypassing the RBAC-based
system by having the routing app modify the network’s flow rules
on the host-tracking app’s behalf.
In this paper, we analyze information flow within SDN control
planes in order to consider the vulnerabilities inherent in the SDN
architecture’s design, the attack surface that the design introduces,
and possible mitigation strategies based on information flow control
(IFC) to ensure the control plane’s integrity. We introduce and
formalize a class of information flow attacks in the SDN control
plane that we call cross-app poisoning (CAP), in which a lesser-
privileged app can co-opt another app so that the compromised app
takes privileged actions on behalf of the attacking app. We have
modeled the attack surface with a cross-app information flow graph
that maps relations among apps through the shared control plane
state and granted permissions.
Using the 64 apps included with the popular ONOS SDN con-
troller [61] as a representative case study, we generated a least-
privilege reference security policy using API-level permissions
from the RBAC-based Security-Mode ONOS variant [89]. With our
API-level RBAC policy, we generated and analyzed a cross-app infor-
mation flow graph to identify opportunities for CAP attacks based
on the overlapping permissions granted to shared data objects. To
validate our results, we generated data flow graphs of ONOS apps
to identify a set of CAP gadgets that can be used to instigate CAP
attacks, and, through a proof-of-concept attack, we demonstrated
the existence of this vulnerability even among a curated set of apps.
To detect and prevent such attacks in real-time according to a
desired IFC policy, we introduce our defense, ProvSDN: an on-
line reference monitor for the SDN control plane that leverages a
data provenance approach to track and record information flow
in the control plane across app requests. ProvSDN intercepts API
requests, tracks how the control plane state is subsequently used,
and stores such metadata in a provenance graph that efficiently
queries past history while also recording the control plane’s history.
For our implementation, we instrumented ONOS with ProvSDN
and found that ProvSDN can, on average, enforce IFC by imposing
an additional 17.9 ms on a new flow rule instantiation, suggesting
that ProvSDN can be practical in security-conscious settings.
In summary, our main contributions are:
(1) The identification of the IFC integrity problem in SDN,
i.e., cross-app poisoning (CAP). We demonstrate that ma-
licious apps can utilize a lack of information flow protections
to poison the control plane’s state and escalate privilege.
(2) A systematic approach to identification of CAP attack vul-
nerabilities, given a specified RBAC policy, by modeling
the SDN control plane’s allowed information flows.
(3) A defense against CAP attacks, ProvSDN, that uses data
provenance for detection and prevention of CAP attacks by
enforcing IFC policies online in real-time.
(4) An implementation and evaluation of CAP attacks and
ProvSDN with the ONOS controller.
This paper is organized as follows. In Section 2, we outline the
threat model depicting our attacker’s capabilities and goals. In
Section 3, we provide background and an overview of SDN, how
apps use the SDN control plane, and information flow challenges in
the SDN control plane. In Section 4, we present our methodology for
detecting CAP attacks. In Section 5, we show CAP attacks’ existence
using Security-Mode ONOS as a case study. In Section 6, we outline
IFC policies to counteract CAP attacks. In Section 7, we present the
design, implementation, and evaluation of our defense, ProvSDN.
In Section 8, we discuss challenges and design trade-offs, and in
Section 9, we discuss related work. We conclude in Section 10.
2 THREAT MODEL
We assume that the SDN controller is trusted and adequately se-
cured but that it may provide services to, and be co-opted by, ma-
licious SDN apps. We assume that apps may originate from third
parties2, such as app stores3, and are thus untrusted and poten-
tially malicious. Although network and security practitioners will
use best practices and due diligence in vetting apps before deploy-
ment (e.g., verifying that an app has been signed by a trusted devel-
oper), compiled apps without available source code are “black boxes”
whose behavior the practitioners may not entirely understand and
whose code may be vulnerable to compromise in unexpected ways.
We assume that an attacker controls a malicious app that has
least-privileged RBAC permissions. The attacker’s goal is to cause
arbitrary flow rules to be installed so as to affect data plane opera-
tions, despite not having the permission to do so. SDN controllers
2For instance, ONOS allows third-party app developers to submit apps to be included
in the controller’s repository. ONOS and its apps are currently used by transport
network providers and have been incorporated into commercial products developed
by Huawei and Samsung, among others [62]. As of August 2018, ONOS has also been
issued 12 CVE entries, including arbitrary apps being loaded into the controller [63].
3Aruba Networks, a subsidiary of Hewlett-Packard Enterprise, maintains an “SDN app
store” for the HP SDN controller [31]. As of August 2018, the app store contained 12
apps from third-party developers and 13 apps from “Aruba Technology partners.”
2
Cross-App Poisoning in Software-Defined Networking
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
that do not implement RBAC make it trivially easy for apps to mod-
ify and poison data that other apps use. Lee et al. [41] cite the lack
of access control in SDN controllers as the cause of several types of
inter-app attacks, such as internal storage misuse, application evic-
tion, and event listener unsubscription. Our goal is to understand
these kinds of attacks even after RBAC has been applied, particularly
under a conservative least-privileges model whose privileges are
minimally necessary for app functionality.
Not all cross-app information exchanges are malicious in intent,
and some may be desirable based on a given situation. However,
current SDN controllers do not allow for the ability to distinguish
between benign and malicious cross-app information exchanges be-
cause they do not track control plane information flow. A successful
defender must be able to make this distinction.
We further assume that apps have principal identities and that
the controller ensures that one app cannot forge actions such that
they appear to have been taken by another app. That policy can
be enforced using a public key infrastructure (PKI) for authentica-
tion [37], and several controllers (e.g., [68]) already do so.
3 BACKGROUND AND OVERVIEW
We provide a brief overview of the SDN architecture’s important