# Cross-App Poisoning in Software-Defined Networking

**Authors:**
- Benjamin E. Ujcich
- Samuel Jero
- Anne Edmundson
- Qi Wang
- Richard Skowyra
- James Landry
- Adam Bates
- William H. Sanders
- Cristina Nita-Rotaru
- Hamed Okhravi

## Abstract
Software-defined networking (SDN) has gained popularity due to its programmable and extensible control plane, which is realized through network applications (apps). However, these apps introduce significant security challenges, as they must access or modify data in a shared control plane state. If the propagation of such data within the control plane is not well understood, apps can co-opt other apps, leading to the poisoning of the control plane's integrity.

We introduce a class of SDN control plane integrity attacks called cross-app poisoning (CAP), where an unprivileged app manipulates the shared control plane state to trick a privileged app into performing actions on its behalf. We demonstrate that role-based access control (RBAC) schemes are insufficient for preventing CAP attacks because they do not track information flow or enforce information flow control (IFC). We also present ProvSDN, a defense mechanism that uses data provenance to track information flow and serves as an online reference monitor to prevent CAP attacks. Our implementation of ProvSDN on the ONOS SDN controller shows that information flow can be tracked with low-latency overheads.

**CCS Concepts:**
- Security and privacy → Access control; Information flow control; Information accountability and usage control
- Networks → Programmable networks

**Keywords:**
- Software-defined networking
- Data provenance
- Information flow control
- Network operating system

**Distribution Statement:**
This material is based upon work supported by the Department of Defense under Air Force Contract No. FA8721-05-C-0002 and/or FA8702-15-D-0001. Any opinions, findings, conclusions, or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the Department of Defense.

**Conference:**
CCS '18, October 15–19, 2018, Toronto, ON, Canada
© 2018 Association for Computing Machinery.

**ACM Reference Format:**
Benjamin E. Ujcich, Samuel Jero, Anne Edmundson, Qi Wang, Richard Skowyra, James Landry, Adam Bates, William H. Sanders, Cristina Nita-Rotaru, and Hamed Okhravi. 2018. Cross-App Poisoning in Software-Defined Networking. In 2018 ACM SIGSAC Conference on Computer and Communications Security (CCS '18), October 15–19, 2018, Toronto, ON, Canada. ACM, New York, NY, USA, 16 pages. https://doi.org/10.1145/3243734.3243759

## 1 Introduction
Software-defined networking (SDN) has emerged as a flexible architecture for programmable networks, with deployments spanning from enterprise data centers to cloud computing and virtualized environments. The rapid growth and potential value of SDN stem from the need for dynamic, agile, and programmable networks. The use of modular and composable network applications (apps) extends the capabilities of the logically centralized control plane, allowing the larger developer community to address complex network requirements through application programming interfaces (APIs) and third-party app stores.

While apps add significant value, they also introduce significant control plane security challenges. The SDN architecture arguably has a larger attack surface than traditional networks, as malicious apps can disrupt network operations systemically and significantly. Recent research highlights that "attacks against SDN controllers and the introduction of malicious controller apps are probably the most severe threats to SDN," and the situation is further complicated by dynamic configurations that make it difficult to determine the correctness of the current or past configuration.

To date, defenses that limit the SDN attack surface have included app sandboxing, TLS-enabled APIs, API abuse prevention, and role-based access control (RBAC) for apps. Although these mechanisms improve control plane security, they are not sufficient for mitigating information flow attacks within the control plane.

In order to function properly, apps require access to and/or modification of the SDN control plane state, which includes data stores and control plane messages. This shared state design among apps creates new attack vectors for integrity attacks. For instance, trusted or system-critical apps may unintentionally use data generated by untrusted or malicious apps, leading to a "confused deputy" problem. The SDN security literature has not systematically considered the class of integrity attacks that leverage information flow within the controlplane, leaving SDN controllers vulnerable.

While RBAC-based systems can limit the attack surface by preventing access to shared data structures based on permissions, RBAC alone is not sufficient for preventing attacks against the integrity of the shared SDN control plane state, as it does not track how data are used after authorization. Consider a scenario where an SDN controller provides host and flow rule services. An adversary compromises a host-tracking app, which has permission to write to the host data store but not to write flow rules. A second app, performing routing, has permission to read the host store and to read and write flow rules. The routing app modifies flow rules to reflect changes in the host data store. By modifying a host location, the adversary can cause the routing app to rewrite flow rules, effectively bypassing the RBAC-based system.

In this paper, we analyze information flow within SDN control planes to identify vulnerabilities, the attack surface introduced by the design, and possible mitigation strategies based on information flow control (IFC) to ensure the control plane's integrity. We introduce and formalize a class of information flow attacks in the SDN control plane called cross-app poisoning (CAP), where a lesser-privileged app can co-opt another app to perform privileged actions on its behalf. We model the attack surface using a cross-app information flow graph that maps relations among apps through the shared control plane state and granted permissions.

Using the 64 apps included with the popular ONOS SDN controller as a case study, we generated a least-privilege reference security policy using API-level permissions from the RBAC-based Security-Mode ONOS variant. With our API-level RBAC policy, we generated and analyzed a cross-app information flow graph to identify opportunities for CAP attacks based on overlapping permissions granted to shared data objects. To validate our results, we generated data flow graphs of ONOS apps to identify a set of CAP gadgets that can be used to instigate CAP attacks, and, through a proof-of-concept attack, we demonstrated the existence of this vulnerability even among a curated set of apps.

To detect and prevent such attacks in real-time according to a desired IFC policy, we introduce ProvSDN, an online reference monitor for the SDN control plane that leverages a data provenance approach to track and record information flow in the control plane across app requests. ProvSDN intercepts API requests, tracks how the control plane state is subsequently used, and stores metadata in a provenance graph that efficiently queries past history while recording the control plane's history. Our implementation of ProvSDN on ONOS found that, on average, it can enforce IFC by imposing an additional 17.9 ms on a new flow rule instantiation, suggesting that ProvSDN is practical in security-conscious settings.

In summary, our main contributions are:
1. Identification of the IFC integrity problem in SDN, i.e., cross-app poisoning (CAP). We demonstrate that malicious apps can utilize a lack of information flow protections to poison the control plane's state and escalate privileges.
2. A systematic approach to identifying CAP attack vulnerabilities, given a specified RBAC policy, by modeling the SDN control plane's allowed information flows.
3. A defense against CAP attacks, ProvSDN, that uses data provenance for detection and prevention of CAP attacks by enforcing IFC policies online in real-time.
4. An implementation and evaluation of CAP attacks and ProvSDN with the ONOS controller.

This paper is organized as follows:
- Section 2 outlines the threat model depicting our attacker's capabilities and goals.
- Section 3 provides background and an overview of SDN, how apps use the SDN control plane, and information flow challenges in the SDN control plane.
- Section 4 presents our methodology for detecting CAP attacks.
- Section 5 shows the existence of CAP attacks using Security-Mode ONOS as a case study.
- Section 6 outlines IFC policies to counteract CAP attacks.
- Section 7 presents the design, implementation, and evaluation of our defense, ProvSDN.
- Section 8 discusses challenges and design trade-offs.
- Section 9 discusses related work.
- Section 10 concludes the paper.

## 2 Threat Model
We assume that the SDN controller is trusted and adequately secured but may provide services to, and be co-opted by, malicious SDN apps. We assume that apps may originate from third parties, such as app stores, and are thus untrusted and potentially malicious. Although network and security practitioners will use best practices and due diligence in vetting apps before deployment (e.g., verifying that an app has been signed by a trusted developer), compiled apps without available source code are "black boxes" whose behavior may not be entirely understood and whose code may be vulnerable to compromise in unexpected ways.

We assume that an attacker controls a malicious app with least-privileged RBAC permissions. The attacker's goal is to cause arbitrary flow rules to be installed to affect data plane operations, despite not having the permission to do so. SDN controllers that do not implement RBAC make it trivially easy for apps to modify and poison data that other apps use. Lee et al. [41] cite the lack of access control in SDN controllers as the cause of several types of inter-app attacks, such as internal storage misuse, application eviction, and event listener unsubscription. Our goal is to understand these kinds of attacks even after RBAC has been applied, particularly under a conservative least-privileges model whose privileges are minimally necessary for app functionality.

Not all cross-app information exchanges are malicious in intent, and some may be desirable based on a given situation. However, current SDN controllers do not allow for the ability to distinguish between benign and malicious cross-app information exchanges because they do not track control plane information flow. A successful defender must be able to make this distinction.

We further assume that apps have principal identities and that the controller ensures that one app cannot forge actions to appear as if they were taken by another app. This policy can be enforced using a public key infrastructure (PKI) for authentication, and several controllers already do so.

## 3 Background and Overview
We provide a brief overview of the SDN architecture's important components and concepts, including the control plane, data plane, and the role of network applications. We also discuss how apps use the SDN control plane and the challenges associated with information flow in the SDN control plane.