### 4.3.1 策略路由的概念

策略路由是一种较新的路由概念，它根据多种不同的策略来决定数据包通过的路径。与传统路由不同，策略路由能够根据网络带宽、负载、源地址或目的地址等多种因素动态地选择最佳的数据包出口。本节将简要介绍Linux系统中的路由及策略路由的使用。

**传统路由**：传统路由类似于一个指向目标子网的“指路牌”，无论数据包来自哪里，路由都会明确指向目标。这种“不问来人情况”的处理方式越来越不适合现代计算机网络的需求。例如，“行人”和“汽车”走的“路”应该是不同的，因此策略路由应运而生。

**策略路由的类型**：
1. **按目的地址进行路由**：根据目的地地址决定选择哪个出口。
2. **按源地址进行路由**：根据发出数据包的计算机地址决定选择哪个出口。
3. **平衡策略路由**：自动识别网络带宽及负载，根据这些信息动态地决定数据包从哪个出口发出。这种方式在数据中心内部使用较多。

**注意事项**：
- 并不是所有环境都适合策略路由。首先，策略路由与传统路由相比最大的不同在于其灵活性和复杂性。
- 无论使用何种策略路由，都必须注意保护连接的持续性，特别是在出口上使用了NAT的情况下。

### 4.3.2 路由表管理

默认情况下，Linux系统中并不只有一个路由表。如果系统中只有一个路由表，策略路由的多功能将无法实现。数据包转发时，并不需要将所有路由表都搜索计算一次，而是根据系统设定的规则决定使用哪个路由表。

**Linux系统中的路由表**：
- `local`：用于本地接口IP的数据包路由。
- `main`：包含指向本地子网和默认网关的路由条目。
- `default`：默认为空，通常用于其他未匹配的路由。

**示例**：
```bash
[root@localhost ~]# ip route list table main
172.16.45.0/24 dev eno16777736 proto kernel scope link src 172.16.45.13
broadcast 172.16.45.255 dev eno16777736 proto kernel
local 172.16.45.13 dev eno16777736 proto kernel scope host
broadcast 172.16.45.0 dev eno16777736 proto kernel
default via 172.16.45.1 dev eno16777736 proto static metric 100
```

### 4.3.3 规则与路由管理

在策略路由中，规则如同一个筛选器，将数据包按预先设置的条件“送给”相应的路由表，完成路由过程。添加一条规则使用命令`ip rule`，格式如下：

```bash
ip [add|del] SELECTOR ACTION
```

其中：
- `SELECTOR`可以选择数据包的多种选项，如源地址（from）、目的地址（to）等。
- `ACTION`执行的动作包括指定使用的路由表（table）、丢弃包并返回错误消息（unreachable）等。

**示例**：
```bash
[root@localhost ~]# ip rule add from 192.168.19.0/24 table test1
[root@localhost ~]# ip rule list
32766: from all lookup local
32765: from 192.168.19.0/24 lookup test1
32767: from all lookup main
```

### 4.3.4 策略路由应用实例

本小节将通过几个实例介绍策略路由的应用。

**场景**：假设有一个Linux主机连接了两个子网，拥有两个出口。其中一个出口速度更快，但仅供内部网络中的VIP用户使用。

**配置步骤**：
1. **配置默认路由**：
   ```bash
   [root@localhost ~]# ip route add default via 172.16.33.1 dev eno16777736
   ```

2. **配置VIP用户的数据包使用特定出口**：
   ```bash
   [root@localhost ~]# ip rule add from 192.168.2.54/32 table T1
   [root@localhost ~]# ip route add default via 172.16.34.1 dev eno33554984 table T1
   ```

**负载均衡**：
```bash
[root@localhost ~]# ip route add default nexthop via 172.16.33.1 dev eno16777736 weight 1 nexthop via 172.16.34.1 dev eno33554984 weight 1
```

以上是整个配置过程，但以上配置在系统重启后会消失，因此需要将规则和路由添加到文件`/etc/rc.local`中以确保持久性。

### 小结

本章从实际应用出发，主要介绍了Linux系统的路由管理，剖析了策略路由的运作机制，并通过实例介绍了策略路由的应用。希望读者能通过本章内容更好地理解和掌握Linux系统的策略路由。

---

### 第5章 文件共享服务

#### 5.1.1 NFS简介

NFS（Network File System）是一种分布式文件系统，允许网络中的不同操作系统之间的计算机共享文件。NFS依赖于RPC（Remote Procedure Call）协议进行通信。RPC协议设计与主机及操作系统无关，可以在不同的系统间使用。

**NFS的工作原理**：
- 客户端可以通过挂载远程文件系统来访问文件，就像操作本地文件一样。
- 使用`mount`命令可以将远程文件系统挂接到本地目录下。

**示例**：
```bash
[root@localhost ~]# mount 192.168.3.101:/nfsshare /mnt/nfsshare
```

#### 5.1.2 NFS守护进程

NFS的主要守护进程包括：
- **rpc.nfsd**：基本的NFS守护进程，控制客户端是否可以登录服务器。
- **nfs-server**：某些发行版中称为`nfsserver`，负责提供NFS服务。

**权限控制**：
- 可以结合`/etc/hosts.allow`和`/etc/hosts.deny`文件进行更精细的权限控制。

通过本章的学习，读者可以了解Linux系统中常见的文件共享方法，包括NFS、Samba和FTP的安装与配置。