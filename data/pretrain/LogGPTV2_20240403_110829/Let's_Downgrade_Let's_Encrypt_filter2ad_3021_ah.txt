that a DNS resolver will retry to resend the query for which no
response arrived. Both parameters are defined in iterator.h con-
figuration file. The max_sent_count parameter is the limit on
maximal number of queries per DNS request, which is set to 32.
The other is the number of retries per nameserver, defined with
outbound_msg_retry, and set to 5. The values of both parameters
are hardcoded and cannot be modified.
When the Unbound DNS resolver does not have RTO (retrans-
mission time-out) information about the nameservers in a domain
to which it needs to send a query, it sets the RTO of all the name-
servers to 376ms and selects a server at random. If any server was
queried previously and the response arrived, the RTO reflects the
previous RTT value; see server selection analysis in Section 2.2.3. A
nameserver is selected at random among all the servers with RTO
below 400ms. If the fastest nameserver is 400ms faster than any
other server, it is the only one that can be selected.
If the response arrived, the resolution is done, the query is re-
moved from pending queue. If the response does not arrive, the time-
out is triggered after the RTO period. The RTT value for that server
is updated and the attempt_count parameter for that server is in-
cremented. If outbound_msg_retry is reached, remove the server
from the list of usable servers. Increment the total_sent_count
for that query. Once max_sent_count is reached, return server
fail. Return to step 1. We provide the pseudocode of Unbound re-
transmission behaviour in Figure 15.
MAX_SENT_COUNT
= 32
OUTBOUND_MSG_RETRY = 5
SET request_sent_count = 0
WHILE request_sent_count = OUTBOUND_MSG_RETRY
remove this server from usable server list
ENDIF
request_sent_count++
IF
request_sent_count >= MAX_SENT_COUNT
return SERVFAIL
ENDIF
ENDIF
ENDWHILE
Figure 15: Query retransmission behaviour in Unbound.
E HITTING IP ID
In this section we describe the IP ID allocation methods and report
on the IP ID results we collected from the popular nameservers.
Session 5B: PKI and Access Control CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea1438Let‚Äôs Encrypt
Alexa
Total
235,991
23.27%
145,280
16.95%
377,540
20.32%
19,060
1.88%
37,624
4.39%
55,229
2.97%
248,763
24.53%
179,242
20.92%
423,004
22.76%
#Rate Limit #Fragmentation #Frag. or Rate-Limit #Vuln. to sub-prefix hijack
107,517
10.60%
100,709
11.75%
207,393
11.16%
#Total
1,014,056
856,887
1,858,165
Table 6: Server-elimination attacks and attacks to obtain fraudulent certificates against domains in our dataset.
To identify the value of the IP ID we send packets from two hosts
(with different IP addresses) to a nameserver.
IP Identifier. The 16 bit IP Identifier (IP ID) field in the IP header
is used to identify fragments that belong to the same original IP
packet [RFC791]. The fragments are then reassembled by the recip-
ient according to source and destination IP addresses, IP ID value
and protocol field (e.g., TCP).
Global counter. Initially most operating systems used a globally
incremental IP ID assignment which is easy to implement and
has little requirement to keep state: just a single counter which
is incremented with every packet that is sent. Global counters
however were shown to be vulnerable to off-path attacks, [32]. A
global counter is still popular in the Internet. Our study shows that
5.53% nameservers use global counter for UDP datagrams and 2.30%
nameservers global counters for IP packets with TCP, see details
in Table 7. To prevent the attacks some operating systems were
patched to randomise their IP ID assignment.
Counter-based bucket. One of the popular algorithms that
was also standardised in [RFC7739] is the counter based bucket
algorithms. The idea is that an index computed by hash function
over the source and destination IP addresses and key, is mapped
to an entry in a table. The IP ID value is calculated by choosing
a counter pointed to by the hash function. Observing some IP ID
values for a pair of source and destination IP addresses does not
reveal anything about the IP ID values of the pairs in the other
buckets. This algorithm, implemented into recent versions of Win-
dows, Linux and Android. Recently [39] reverse engineered parts
of tcpip.sys driver of 64-bit Windows RedStone 4, which allowed
breaking this IP ID assignment algorithm. The attack requires the
attacker to control ùëñ IP addresses in the same class B prefix. The goal
of the attacker is to receive the keys used by the IP ID generation
algorithm: a 320 bit vector, with two keys ùêæ1 and ùêæ2 that are 32
bits each. During the offline preprocessing phase the attacker uses
Gaussian elimination to calculate a matrix using the IP addresses:
ùëç ‚àà ùê∫ùêπ(2)15(ùëñ‚àí1)√ó15(ùëñ‚àí1)
subsequently, the attacker sends packets to the target server
from the ùëñ IP addresses that it controls and obtains the IP ID values
from the ùëñ response packets. The attacker applies the computation
to recover the values of the keys, which can be used to predict the
IP ID values in Windows 8 and above versions.
The Linux versions 3.0 and above use separate IP ID allocation
algorithms for UDP and TCP communication. For TCP the IP ID
value is computed per connection, while for UDP [39] demonstrated
an attack for predicting the IP ID value similar to Windows. The
evaluations demonstrated practical attack times of up to 1.5 minutes
at most, see also [39]. Furthermore, in a study which included 69
networks the IP ID values, of the servers that used counter-based
bucket algorithm for IP ID values calculations, could be predicted.
In a subsequent work, [30] demonstrated approaches for recover-
ing the IP ID value computed for the TCP communication. Their
evaluation also demonstrated practical attacks, which apply to 20%
of 100K-top Alexa domains.
Random. Another algorithm selects random IP ID values from
a pool of least recently used IP ID values. This algorithm requires
maintaining a lot of state, corresponding to the pool of the used
IP IDs, however ensures unpredictability of IP ID selection. This
approach is implemented in iOS and MacOS.
Per-Host Global Zero
5.53% 7.34%
52.60%
51281
5388
7152
2.30% 75.92%
14.43%
14072
2247
74020
UDP
TCP
Random
and other N/A Total
1.14% 100%
33.40%
32560
1112
97493
6.04% 100%
1.30%
1266
5888
97493
Table 7: IP ID allocation of in 100K-top Alexa.
F OVERVIEW OF DOMAIN VALIDATION
Validating ownership over domains plays a central role in PKI se-
curity. It enables CAs to ensure that a certificate is issued to a
real domain owner and prevents attackers from issuing fraudulent
certificates for domains that they do not control. Prior to issuing
certificates the CAs validate that the entity requesting a certificate
for a domain de-facto controls the domain by running domain vali-
dation (DV) procedure. This is done by sending challenges to the
domain and verifying that the domain correctly echos the chal-
lenges. The methods for verifying challenges all depend on DNS,
and can be based on: email, whois, zonefile and HTTP/S.
HTTP/S: the user adds to the root directory of the website run-
ning at the domain a challenge provided by the CA during DV.
email: an email is sent to an administrator‚Äôs email address at the
domain, requiring the administrator to visit a challenge URL.
The idea underlying these methods is that the owner of the
domain adds to the domain a challenge he receives from the CA
after submitting the request for a certificate. The CA can then verify
the presence of the correct challenge by sending a query to the
domain. An attacker that does not see the challenge and does not
control the domain, should not be able to add the correct challenge
value to the domain‚Äôs zonefile or web server, nor will it be able to
echo the challenge via email.
F.1 Single Node DV
The idea behind single node DV is that the validation is performed
from a single node, which sends queries to one of the nameservers of
the target domain. For instance, the CA, at domain ca.com, receives
Session 5B: PKI and Access Control CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea1439a CSR for domain example.info, and creates a challenge $ value
which has to be entered as a DNS CNAME record to the zonefile
of the domain, e.g., $www.example.info. CNAME $.ca.com. The
resolver of the CA queries the domain of the applicant, and checks
the presence of the CNAME record.
AS13649.
F.2 Multiple Location DV with multiVA
Following the attacks against DV Let‚Äôs Encrypt deployed a multiVA
mechanism, i.e., performing validation from multiple nodes. The
nodes are called Validation Authorities (VAs). MultiVA uses four
Validation Authorities (VAs) for validating control over domains.
Each VA uses DNS resolver library for looking up resources in the
target domains and for validating control over domains during DV.
All the VAs are located on an AWS cloud. The CA sends a domain
to validate or to lookup over an encrypted connection to the VAs.
The VAs perform validation and return the result of the validation
over an encrypted channel to the CA. If the validation is successful,
the CA issues the requested certificate. For DV to succeed at least
three of the four VAs must succeed. The VAs of Let‚Äôs Encrypt are
set up on four network blocks:
‚Ä¢ set 1: two IP addresses owned by Flexential Colorado Corp. on
‚Ä¢ set 2: five IP addresses located on AWS us-east-2 data center.
‚Ä¢ set 3: five IP addresses, on AWS eu-central-1 data center.
‚Ä¢ set 4: five IP addresses, on AWS us-west-2 data center.
During each lookup or during DV, multiVA selects one IP from
each set. The process of multiVA concludes successfully if at least
three of four VAs return identical responses. Responses are cached.
The DNS software of the Let‚Äôs Encrypt caps the TTL at 60 seconds.
G DECRYPTING ENCRYPTED TRAFFIC
We perform a MitM (man-in-the-middle) attack on two types of
applications: web browser and SMTP MX server, where the attacker
functions as a proxy and relays packets between the genuine target
server and the victim client application. The attacker first launches
a DNS cache poisoning attack or a BGP prefix hijack attack against a
victim, to redirect it to the attacker‚Äôs host for the target domain. We
launch DNS cache poisoning attack by intercepting a DNS request
from the client via a short lived BGP prefix hijack. We return to
the victim resolver a DNS response mapping the target domain
to the nameservers controlled by the attacker. The attacker then
responds to subsequent lookup requests for services in the target
domain with malicious records. In particular, the attacker maps the
web server and the email exchanger (MX) in the target domain to
attacker‚Äôs IP addresses. We then evaluate two attacks: (1) we use
our client to access the webserver and (2) we send an email to the
email exchanger in the target domain.
In the first attack the attacker functions similarly to a web proxy,
and relays every packet it receives to the target webserver. De-
pending on the webserver, the attacker may leave the source IP
address of the real client intact (e.g., if this information is reflected
in the objects returned by the webserver, e.g., printed on the page
and is visible to the client). The attacker establishes a TLS channel
with the client, using the fraudulent certificate to impersonate the
target webserver. The attacker poses as a client and establishes a
TLS channel with the target server. Within these connections it
relays the HTTP objects between the client to the server. In our
evaluation we experienced timeouts since the client has to wait
until the request from the attacker reaches the real server and the
responses from the real server reach the attacker and then the client.
To avoid timeouts we introduce latency to every response we send
to the client that is proportional to the time required to send the
request from the client to the server and receive a response. We
add latency to every packet starting with the TCP SYN ACK. This
causes the RTO in TCP of the client to be much longer, and not
timeout.
Using this attack, the attacker can not only read and intercept
all the exchanged communication but it can also modify the re-
turned objects to inject scripts that will be persistently running in
a sandbox on the client and can execute a range of attacks, such
as Rowhammer attacks against RAM exploiting charges leak of
memory cells via privilege escalation, [31] or Spectre attack [48, 49]
against the CPU cache via timing side channels to read data in the
cache.
In the latter attack we setup an SMTP server that relays packets
between an outbound SMTP server and an MX exchanger (an in-
bound SMTP server) in the target domain. The latency introduced
by this attack is not significant since the victim client does not
directly experience the latency introduced by our attacking proxy.
Session 5B: PKI and Access Control CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea1440