### 前言
近两年，Java的受欢迎程度和市场占有率一直是稳中向好，2017年数据显示，Java程序员的就业率和平均年薪均处众多语言的前列，由于各大培训班的努力，17年Java程序员的产出量也急剧增长。Java，确实是一门吃得稳饭的语言。  
2018年开始了，大家都在专注地写着自己的bug~  
开个玩笑……不过，从代码审计的角度来说，这句话说的一点都不过分。而在众多漏洞中，最数反序列化漏洞的表现最‘辉煌’，从15年影响WebSphere、JBoss、Jenkins、WebLogic等大型框架的Apache
Commons Collections 反序列化远程命令执行漏洞，到17年末WebLogic XML 反序列化引起的挖矿风波，反序列化漏洞一直在路上……
学习本系列文章需要的Java基础：
  1. 了解Java基础语法及结构（[菜鸟教程](http://www.runoob.com/java/java-serialization.html)）
  2. 了解Java面向对象编程思想（快速理解请上知乎读故事，深入钻研建议买本《疯狂Java讲义》另外有一个刘意老师的教学视频也可以了解一下，其中关于面向对象思想的介绍比较详细。链接：[https://pan.baidu.com/s/1kUGb3D1#list/path=%2F&parentPath=%2FJava%E7%B1%BB](https://pan.baidu.com/s/1kUGb3D1#list/path=%2F&parentPath=%2FJava%E7%B1%BB) 密码：kk0x）
  3. 基本的Eclipse使用（自行百度）
其实只要大学上过Java课，或者自学过一小段时间都OK。如果没有的话，可以括号里的资源资源在短时间内掌握。
本教程的目的：
  1. 掌握反序列化漏洞原理。
  2. 在实战中能发现和利用反序列化漏洞。
  3. 掌握合理规避反序列化漏洞的编程技巧。
### 序列化与反序列化基础
#### 什么是序列化和反序列化
Java描述的是一个‘世界’，程序运行开始时，这个‘世界’也开始运作，但‘世界’中的对象不是一成不变的，它的属性会随着程序的运行而改变。  
但很多情况下，我们需要保存某一刻某个对象的信息，来进行一些操作。比如利用反序列化将程序运行的对象状态以二进制形式储存与文件系统中，然后可以在另一个程序中对序列化后的对象状态数据进行反序列化恢复对象。可以有效地实现多平台之间的通信、对象持久化存储。
一个类的对象要想序列化成功，必须满足两个条件：
  1. 该类必须实现 java.io.Serializable 接口。
  2. 该类的所有属性必须是可序列化的。如果有一个属性不是可序列化的，则该属性必须注明是短暂的。
如果你想知道一个 Java 标准类是否是可序列化的，可以通过查看该类的文档,查看该类有没有实现 java.io.Serializable接口。
下面书写一个简单的demo，为了节省文章篇幅，这里把序列化操作和反序列化操作弄得简单一些，并省去了传递过程，  
对象所属类：
    /**
     * Description:
     * 网站: Ph0rse's Blog
     * Copyright (C), 2018-2020, Ph0rse
     * This program is protected by copyright laws.
     * Program Name:
     * Date:
     * @author Ph0rse PI:EMAIL
     * @version 1.0
     */
    public class Employee implements java.io.Serializable
    {
       public String name;
       public String identify;
       public void mailCheck()
       {
          System.out.println("This is the "+this.identify+" of our company");
       }
    }
将对象序列化为二进制文件：
    //反序列化所需类在io包中
    import java.io.*;
    public class SerializeDemo
    {
       public static void main(String [] args)
       {
          Employee e = new Employee();
          e.name = "员工甲";
          e.identify = "General staff";
          try
          {
            // 打开一个文件输入流
             FileOutputStream fileOut =
             new FileOutputStream("D:\\Task\\employee1.db");
             // 建立对象输入流
             ObjectOutputStream out = new ObjectOutputStream(fileOut);
             //输出反序列化对象
             out.writeObject(e);
             out.close();
             fileOut.close();
             System.out.printf("Serialized data is saved in D:\\Task\\employee1.db");
          }catch(IOException i)
          {
              i.printStackTrace();
          }
       }
    }
一个Identity属性为Visitors的对象被储存进了employee1.db，而反序列化操作就是从二进制文件中提取对象：
    import java.io.*;
    public class SerializeDemo
    {
       public static void main(String [] args)
       {
          Employee e = null;
          try
          {
            // 打开一个文件输入流
             FileInputStream fileIn = new FileInputStream("D:\\Task\\employee1.db");
            // 建立对象输入流
             ObjectInputStream in = new ObjectInputStream(fileIn);
            // 读取对象
             e = (Employee) in.readObject();
             in.close();
             fileIn.close();
          }catch(IOException i)
          {
             i.printStackTrace();
             return;
          }catch(ClassNotFoundException c)
          {
             System.out.println("Employee class not found");
             c.printStackTrace();
             return;
          }
          System.out.println("Deserialized Employee...");
          System.out.println("Name: " + e.name);
          System.out.println("This is the "+e.identify+" of our company");
        }
    }
就这样，一个完整的序列化周期就完成了，其实实际应用中的序列化无非就是传输的方式和传输机制稍微复杂一点，和这个demo没有太大区别。
PS:try和catch是异常处理机制，和序列化操作没有直接关系。如果想要深入学习Java编程，建议购买一本《Java疯狂讲义》，还有金旭亮老师的Java学习[PPT](https://pan.baidu.com/s/1c3zgR1Q)（力荐）
### 简单的反序列化漏洞demo
在Java反序列化中，会调用被反序列化的readObject方法，当readObject方法书写不当时就会引发漏洞。
PS：有时也会使用readUnshared()方法来读取对象，readUnshared()不允许后续的readObject和readUnshared调用引用这次调用反序列化得到的对象，而readObject读取的对象可以。
    //反序列化所需类在io包中
    import java.io.*;
    public class test{
        public static void main(String args[]) throws Exception{
            UnsafeClass Unsafe = new UnsafeClass();
            Unsafe.name = "hacked by ph0rse";
            FileOutputStream fos = new FileOutputStream("object");
            ObjectOutputStream os = new ObjectOutputStream(fos);
            //writeObject()方法将Unsafe对象写入object文件
            os.writeObject(Unsafe);
            os.close();
            //从文件中反序列化obj对象
            FileInputStream fis = new FileInputStream("object");
            ObjectInputStream ois = new ObjectInputStream(fis);
            //恢复对象
            UnsafeClass objectFromDisk = (UnsafeClass)ois.readObject();
            System.out.println(objectFromDisk.name);
            ois.close();
        }
    }
    class UnsafeClass implements Serializable{
        public String name;
        //重写readObject()方法
        private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException{
            //执行默认的readObject()方法
            in.defaultReadObject();
            //执行命令
            Runtime.getRuntime().exec("calc.exe");
        }
    }
程序运行逻辑为：
  1. UnsafeClass类被序列化进object文件
  2. 从object文件中恢复对象