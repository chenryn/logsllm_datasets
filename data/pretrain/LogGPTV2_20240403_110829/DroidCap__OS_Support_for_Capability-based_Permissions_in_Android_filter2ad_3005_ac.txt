the corresponding kernel-level data structures for the recipient
process will not be created, and dereferencing such Binder
handles would always fail. As such, Binder handles form a
kind of simple IPC capability that enables their holders to send
IPC messages to the process of the referenced Binder object.
During a transaction, the driver injects the sender’s UID
and PID into the transaction data. The identity is provided
by the driver, hence, forming a trust anchor for permission
enforcement, where the UID is used to check the sender’s
permissions (see Figure 1).
the server’s side,
2) Proxy & Stub Objects: Proxy and Stub objects imple-
ment a contract for remotely calling methods of a service. The
Proxy is a client-side object that is used to marshal parameters,
initiate requests to a server-side object—the Stub—and then
unmarshal returned results. At
the Stub
wraps a remote Binder service and unmarshals invocation
parameters, invokes the actual implementation of the service
method, marshals the result, and sends it back to the Proxy. At
the heart of the Proxy object is a Binder handle, whose value
is injected in all transaction data via this Proxy to designate
the remote Binder object. The Android SDK provides Proxies
for all application framework services, wrapped in easy-to-use
Manager classes, e.g., LocationManager or ActivityManager,
that can be retrieved at runtime (see next section).
C. Management of Binder Objects
Since it is impractical to pre-populate processes with han-
dles of all Binder objects in the system, client processes have to
request Binder handles at runtime. To ease the discovery and
request of handles, system services implement the logistics
for registering, storing, and handing out Binder handles. In
Android, two central services take on this role: The Context
Manager (CM) for handles of system services, and Activity
Manager Service (AMS) for handles of Content Providers and
app-provided Services. Thus, CM and AMS are comparable to
directories in capability systems.
Both CM and AMS run on dedicated processes— ser-
vicemanager and system server—and provide their services
via Binder IPC. Thus, the Binder handles of both services
must be a priori known, or at least, easily obtainable. The
AMS is a system service that is registered with the CM and,
hence, its handle can be retrieved through the CM. The CM,
in turn, is assigned a globally reserved, well-known Binder
handle of 0. The Binder driver delivers all transactions with
a 0-handle as target to the CM. Thus, processes can use the
CM to register their services and to request handles to other
registered services. Figure 3 illustrates this service registration
and discovery in more detail. We defer the explanation of
DROIDCAP modiﬁcations in that ﬁgure until Section IV-D.
1) Binder Object Registration: To expose a Binder object
via IPC to other processes the host process has to register
it with CM (or AMS) to allow other processes to retrieve
its handle. For example, registering a system service with
CM ( 1 and 2 ) is done using the addService method of
ServiceManager where the Binder object and service name are
passed as method parameters. The Binder driver detects that a
Binder object is being transferred and creates a corresponding
Binder reference in CM’s Binder context before copying the
transaction data along with the new handle to the CM process.
In turn, the CM adds a new entry for the registered service
in a local key-value store of service names and their Binder
handles. Registering a Binder object of a Content Provider ( 3 )
is conceptually identically, except that it is the AMS whose
Binder handle needs to be discovered ﬁrst in order to register
the Content Provider under its URI with publishProvider.
2) Binder Handle Discovery: Two SDK APIs, namely
getSystemService and getContentResolver, are used to retrieve
Binder handles of system services and Content Providers,
respectively. In general, what returns from those APIs is a
Manager object that uses a pre-compiled Proxy that embeds
a Binder handle to the remote Binder object. For example,
calling getSystemService with ”location” as a parameter ( 4 )
issues a Binder transaction to the CM and ﬁnally returns a
LocationManager object that can be used later on to invoke
operations of the remote LocationManagerService (LMS). At
the kernel level, the Binder driver detects that a Binder handle
is being transferred (from CM to app), therefore it locates the
associated Binder reference in CM’s Binder context, inserts a
new copy of the Binder reference into app’s Binder context,
injects the new Binder handle into the data buffer of the
transaction data, and ﬁnally copies it back to app’s TLS.
Android’s SDK retrieves the Binder handle, builds a Proxy
and Manager around it, and returns the Manager object as
result of getSystemService. The same ﬂow goes for retrieving
handles of Content Providers requested in getContentResolver
( 5 ), except that the AMS returns the handle.
3) Binder Handle Invocation: When a method of a Man-
ager is called ( 6 ), the contained Proxy marshals the method
parameters and passes the data to the Binder userspace library
(see also Figure 2). The library builds the transaction data,
injects the Binder handle embedded in the Proxy object as the
target’s handle of the transaction data, and write the transaction
to the driver. The Binder driver uses the transaction’s Binder
handle to locate the Binder reference in client’s Binder context.
This Binder reference points to the server’s Binder object. The
driver injects the client’s UID and PID into the transaction data
and copies the transaction data into the TLS of the server’s
process. The server’s Binder userspace library and Stub take
6
Fig. 3. Delegation, revocation, and invocation of Binder objects/handles. Modiﬁcations for capabilities are highlighted.
care of reading the data from the driver and invoking the
server’s service method. The service uses getCallingUid to
identify the client based on the UID provided by the driver
and queries the PMS to check whether the calling UID holds
speciﬁc permissions (e.g., permission check in Figure 1).
Querying the PMS could be an IPC invocation in itself when
the service does not execute on the same process as PMS, for
instance, as usually is the case for Content Providers ( 7 ).
D. DroidCap: Design and Implementation
DROIDCAP is a retroﬁtting to Binder that brings object
capabilities to Android’s permission enforcement. The core
idea behind DROIDCAP is to use Binder handles as capabil-
ity tokens and to associate Android’s permissions as access
rights to them. Thus, DROIDCAP does not aim at redesigning
Android’s permission system but instead realizes a new rep-
resentation of permissions via object capabilities. This eases
privilege separation between app’s components and opens an
adoption path to app compartmentalization.
In DROIDCAP, privilege separation can be achieved
through standard facilities of Android, such as isolated pro-
cesses or running an app’s components on separate processes.
Assigning privileges to processes, by means of capabilities,
instead of UIDs eliminates the complications associated with
the ambient authority (Q4). DROIDCAP integrates smoothly
in apps’ life-cycles and provides the same experience for app
developers and users. To beneﬁt from the security features of
DROIDCAP, app developers need to design their apps with
capabilities in mind and use the security APIs of DROIDCAP.
Our current DROIDCAP design focuses on conﬁning, del-
egating, and revoking access to system services and content
providers, which account for the vast majority of system
resources available to apps. Thus, we focus on representing
Android’s middleware permissions as capabilities. In Sec-
tion IV-E, we present the integration of Capsicum [65], [20]
into Android, which can be used to represent ﬁle-system
permissions as capabilities.
1) Representation of Binder Capabilities: The Binder han-
dle is a token that fulﬁlls the fundamental requirements of
object-capabilities: unforgeable, communicable, designating a
resource, and uniquely assigned to a process. Since the Binder
driver manages Binder handles,
the driver is a reference
monitor for all Binder IPC, which guarantees the requirements
mentioned above. DROIDCAP employs the Binder handle as
an object-capability for IPC-callable processes (satisfying Q1
and Q5) and extends its data structure to carry additional
capability ﬁelds (see Figure 4). Permissions that the capability
holder has for the referenced service can be stored in a bitmask
(access rights) and a linked list of strings (str permissions), as
we explain later. Further, we added a parent ﬁeld parent proc
that points to the process that delegated this Binder reference
to the current holder, as well as delegation ﬂags to express
delegation constraints (which is inspired by sealed capabili-
ties [42]). Binder capabilities, similarly to ﬁle descriptors or
SELinux security contexts, are assigned to processes within
the kernel’s process management. In DROIDCAP, processes
always start with an empty set of Binder capabilities and
gradually receive them at runtime, e.g., through delegation.
This is independent of the PID, i.e., this is a per-process but
not per-PID privilege management.
2) Management of Binder Capabilities: We explain how
Binder capabilities are managed in DROIDCAP. In this context,
we explain our changes to stock Android’s services (see
DROIDCAP modiﬁcations in Figure 3).
a) Creating Binder Capabilities: In our current DROID-
CAP design, we deliberately stick close to Android permissions
for process privileges to preserve backward compatibility. One
7
App’sProcessBinderDriverContextManagerServiceActivityManagerServiceLocationManagerServiceContactsContentProviderService DiscoveryService Registration1234Create reference AND inject access rights into itgetContentResolver(“uri://contacts”)5Create Binder nodes in Binder context of host process and create Binder reference in Binder context of servicemanager (for system Services) or system_server (for Content Providers)Build proxy, wrap it in Location Manager, and return itForward handlegetSystemService(“location”)Return handleReturn handle AND rights (Binder capability)Locate proxy of desired content providerLocate proxy, encode access rights and delegated URIs{…}LocationManager.getLocation()6Resolve handle & transfer dataServiceManager.addService(binderObject, “activity”)Service InvocationServiceManager.addService(binderObject, “location”){…}ActivityManager.publishProvider(binderObj, “uri://contacts”){…}Resolve handle, inject caller’s access rights (and delegated URIs) into transaction data, copy data into target’s TLSContentResolver.query(…)7{…}Resolve handle & transfer dataBuild proxy based on handle abstraction (IBinder object) & return itResolve handle & transfer transaction data target’s TLSGet handle for “location” serviceGet handle AND set caller’s access rights in Binder capabilityCreate Binder reference in the Binder context of the app’s proc.get caller’s access rights and delegated URIs using getCallingRights() and getCallingDelegatedURIs() APIs, accordingly, to enforce access control locally get caller’s UID from getCallingUid() and query PMS for permission checkStock AndroidDroidCap modiﬁcationCBADEFAt enforcement points in services, e.g., LMS, access rights
are decoded accordingly. However, app developers can de-
ﬁne custom permissions in their app manifests and Content
Provider can be protected with URI permissions. Since those
permissions are unpredictable strings, encoding them into a
bitmask is an impractical solution. Thus, DROIDCAP uses the
linked list of strings of Binder capabilities (str permissions
in Figure 4) to store custom permissions and delegated URI
permissions. Upon invocation of the Binder reference, all
permission strings are copied to the callee’s TLS. To avoid
unnecessary performance degradation, only string permissions
that correspond to a speciﬁc Binder object are stored in the
Binder capability that points at that Binder object.
Determining which permission has to be encoded for the
current caller to CM/AMS can be handled in one of two
ways. For backwards compatibility (Q5), the permissions can
depend on the caller’s UID, i.e., if any of the processes of
a UID requests a handle, the capability’s access rights are
set to those of the caller’s ambient authority. This preserves
the same access control enforcement as on default Android.
For apps that explicitly make use of capabilities,
the app
developer can state in the app’s manifest dedicated process
tags and use-permission tags per declared component.
The AMS and PMS manage at runtime a logical mapping of
those components to their processes, and hence can report to
CM/AMS the permissions of the calling process ID that will
receive the Binder handle. Hence, CM/AMS can conﬁgure the
Binder capability per-component.
3) Controlled delegation: Delegation of Binder capabilities
has to be controlled (Q3) to avoid processes from holding
unauthorized access rights. At the same time, DROIDCAP has
to support different paths for delegation and has to consider
the technical intricacies of the Binder framework.
a) Delegation ﬂags and parent ﬁeld: Once a Binder
capability has been created and transferred to a process, this
process might want to transfer the Binder capability to other
processes. Without constraints on the delegation of capabilities,
this would undermine the security policy. For instance, a
process could delegate a Binder capability to another process
that never was authorized to hold those access rights (and
would not have received them from the CM or AMS). Thus,
delegation of Binder capabilities is subject
to constraints
enforced by the Binder driver. Those constraints are expressed
primarily through delegation ﬂags and the parent proc ﬁelds
of Binder capabilities: 1) A capability delegated from one
process to another must in any case carry a subset of the access
rights of the sender. 2) A capability with no delegation ﬂag
set cannot be delegated to other processes. A capability with
limited delegation ﬂag set can only be delegated to another
process of the same logical app. This ﬂag can only be further
restricted but not relaxed during delegations. CM and AMS
create capabilities with limited delegation. 3) Every capability
carries a parent ﬁeld that points to the process that delegated it
and the Binder driver sets this ﬁeld during delegation. Changes
of the access rights of a capability, such as down-/upgrading
and merging, can only be done by the parent process (within
the limits of the parent process’ access rights) or the system
(i.e., CM and AMS), which always takes precedence. For
simplicity, we keep only a single parent.
Fig. 4. Binder capability as a combination of Binder reference (to Binder
node) and capability ﬁelds for permissions, parent process (i.e., delegator),
and delegation constraints.
4 and 5
of the challenges DROIDCAP had to resolve is maintaining
the sync between access rights in Binder capabilities and
permissions, such that any change of an app’s permissions
should be reﬂected in the access rights encoded in capabilities
held by processes of the app. Since permissions are managed
by the PMS, DROIDCAP has to rely on this service to retrieve
each app’s permissions. However, with Binder capabilities,
capability creation cannot be decoupled from the delegation of
access rights, since Binder capabilities are attached to Binder
references, which are only created when the corresponding
Binder object or a handle to that object is being passed on
via Binder IPC. To solve this problem, we leverage the central
role of CM and AMS for handing out Binder references
to app processes (i.e.,
in Figure 3), which is
comparable to directories in capability systems. They form
trusted system components that are the only processes able
to create Binder capabilities for processes that are authorized
to hold the capability (Q3). We created a channel between
PMS and CM to supply all apps’ permissions to the CM the
instant they are granted or revoked. Whenever the CM should
hand out a Binder handle to a calling process, the CM will use
this information to create a Binder capability from this handle
( A ) that carries the access rights of the calling process for the
service referenced by the associated handle and then return this
Binder capability ( B , C ). The capability allows that process
to send IPC messages to the referenced service, which will use
the capability information to enforce access control. Similarly,
the AMS is responsible for handing out Binder handles of
Content Providers and non-system services ( D ). Equivalent
to how CM couples issuing of Binder handles with computing
access rights of the caller, the AMS consults the PMS—as they
run on the same process—for the caller’s general permissions,
while it additionally uses its local database of delegated URI
permissions to encode the caller’s per-URI access rights before
returning the Binder capability to the calling process.
To encode standard permissions
from the applica-
tion framework into Binder capabilities, we use the ca-
pability’s access
rights bitmask. Since those are well-
known permissions, using a bitmask is a highly space-
efﬁcient representation. We have run an analysis on An-
droid’s standard permissions and their point of enforce-
ment, and identiﬁed permissions enforced at each ser-
vice. For example,
the ACCESS_COARSE_LOCATION or
ACCESS_FINE_LOCATION permissions are used to control
access to the LMS. Using this information, AMS and CM
identify the relevant permissions of the service for which
they hand out a capability and encode each permission the
requesting app should have in the access rights bitmask.
8
handlebinder_node: ptrbinder_proc: binder_nodebinder_capabilitybinder_proc (server)binder_proc (client)capability_ﬁelds: ▪access_rights (int)▪str_permissions (linked list)▪parent_proc▪delegation_ﬂags (int)binder_proc (delegator)b) Inheritance: Binder capabilities, in contrast to ﬁle