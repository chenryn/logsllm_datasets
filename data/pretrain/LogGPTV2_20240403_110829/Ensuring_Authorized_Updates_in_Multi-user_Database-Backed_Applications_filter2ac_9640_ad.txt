PhantomExtract function: V-Copy or No-Copy. Both al-
gorithms will result in only allowing permissible writes
on the database. We present V-Copy strategy ﬁrst.
The V-Copy strategy is shown in Algorithm 2. Instead
of modifying T directly, an empty temporary table with
the same schema as T is created in the database and the
corresponding reference (i.e. the table name), tempT, is
returned. The algorithm uses Corollary 2 to check the
safety of INSERT (line 3), which means all inserts are
performed on an empty table, tempT . For UPDATE or
DELETE, the write set of T is added to tempT during
initialization (lines 5-6). After initilizing tempT , rsQ
is modiﬁed to execute on it, thus creating phantom, the
phantom of the original query. After executing phantom
on the database (line 8) , either (1) new tuples are in-
serted into tempT ; (2) tuples are deleted from tempT ; or
(3) tuples are updated in tempT ;. The check on Line 10
holds if the query’s phantom is write-safe. The remain-
ing lines of Algorithm 2 ensure that inserted or updated
tuples have not gone outside the user’s write set for ta-
ble T (if they have, an exception is raised). Finally, T is
modiﬁed based on the state of addTup and rmTup
An alternate strategy, No-Copy (Algorithm 3), can
sometimes reduce the amount of work performed by the
database and evaluates the conditions of Theorem 1 lo-
cally when possible. If the write set does not contain a
join, No-Copy parses non-nested queries and determines
if the query would result in tuples outside of the write
set. This parsing can be always done for blind INSERT
queries, which contain the new values for a tuple in the
VALUE clause. Sometimes, the parsing can be done for
UPDATE queries as well.
If the UPDATE’s SET clause
does not assign values based on a computation, i.e., “at-
Algorithm 2 V-Copy PhantomExtract
1: function
PHANTOMEXTRACT(QUERY
rsQ,
if rsQ is an Insert Query then
STRING T, WRITESET writesetde f )
tempT ← CreateTemp(T, null)
authTup ← GetAuth(T, writesetdef )
tempT ← CreateTemp(T,authTuples)
else
phantom ← ChangeWriteTable(rsQ, tempT)
Execute(phantom)
curTup ← GetAll(tempT)
authTup ← GetAuth(tempT, writesetdef )
rmTup ← ∅;
if curTup == authTup then
addTup ← ∅
authTup ← GetAuth(T, writesetdef )
addTup ← SetMinus(curTup,authTup)
if rsQ is not an Insert Query then
rmTup ← SetMinus(authTup,curTup)
else Raise permission exception
Insert(T, addTup)
Delete(T, rmTup)
tribute name = function()”, parsing can be performed.
No-Copy creates a list of the attributes modiﬁed by the
query and checks if any of the attribute are part of the
write set’s deﬁnition, i.e., contained in the WHERE clause
of the write set. If so, then the value assigned to the at-
tribute must satisfy the conditions deﬁned in the write
set.
If the conditions are not satisﬁed, then the query
will always result in tuples outside of the write set and is
therefore not write-safe.
For DELETE queries, due to the Corollary 3, No-Copy
executes the DELETE query on the subset of T that is
within its write set, ensuring that only writable tuples are
deleted.
Write set intersection is also used to transform rsQ
into phantom if rsQ is an UPDATE. Since rsQ does not
add tuples outside of the write set, phantom will not ei-
ther, which means condition (1) of Theorem 1 is satisﬁed.
Condition (2) requires that the number of modiﬁcations
made to a table is equal to the number of modiﬁcations
made in the write set of the table. Since the query’s phan-
tom only modiﬁes tuples in the write set by deﬁnition,
the number of changes made by phantom on T is equal
to (cid:104)W (Vw(T,u))(cid:105) where W is the write operation repre-
senting phantom.
7
We have implemented a prototype of SafeD by extend-
ing the JDBC driver. As previously shown in Figure 2,
SafeD is comprised of two key modules: a transforma-
tion module and a policy one. The transformation mod-
ule requires 317 lines of code in V-Copy and 452 lines in
Implementation
USENIX Association
26th USENIX Security Symposium    1453
Algorithm 3 No-Copy PhantomExtract
1: function QUERY rsQ, STRING T, WRITESET
writesetde f )
phantom ← NullQuery
if rsQ is not an Insert then
else
phantom ← IntersectWriteSet(rsQ,writeset)
phantom ← rsQ
if phantom is a Delete then
return Execute(phantom)
if (phantom is a nested query) OR
(writeset contains a join) then
Use Algorithm 2
attList ← GetAttributes(phantom)
if not(CanEvaluateLocal(modiﬁedList, writeset))
then
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
Use Algorithm 2
13:
14:
15:
16:
17:
18:
19:
20: return Execute(phantom)
condList ← GetW hereConditions(writeset)
for all a ∈ modi f iedList do
if condList.contains(a.name) then
pass ←IsValidValue(condList, a.value)
if pass == f alse then
return Execute(NullQuery)
No-Copy. The policy module requires 119 lines.
Our policy module stores the read and write policies
deﬁned by the developer for each role, as well as a
mapping between users and roles. Upon establishing a
database connection, this module creates a connection
state object that contains the security policy. When a user
is identiﬁed, the module uses the supplied user context
to initialize the read and write sets for the user. Given a
SQL query and a user context, SafeD either veriﬁes the
compliance of the query before sending it for execution
(in debug mode), or transforms it into a compliant query
(in run-time mode).
8 Evaluation
Our experiments seek to answer the following questions:
1. What
is SafeD’s performance overhead for a
database without built-in support for access control?
(Section 8.1)
2. How does SafeD’s performance compare to that of
a built-in mechanism in a database that does support
row-level access control? (Section 8.2)
3. How does SafeD’s performance vary with the ratio
of unsafe queries in the workload? (Section 8.3)
When studying SafeD’s performance, we compare the
V-Copy and No-Copy strategies. We experiment with
both MySQL and Postgres. MySQL is perhaps the most
popular open source database used by web applications,
including several high-volume web sites, such as Face-
book and Zappos [6]. However, given MySQL’s lack of
built-in support for row-level access control, web appli-
cations implement their own security policies. Postgres,
on the other hand, offers row-level access control and
thus provides a comparison point between a database-
enforced access control with the costs of SafeD’s ap-
proach. Postgres is also popular for small to medium-
sized web applications [17].
Setup — In all experiments, we used two machines run-
ning Ubuntu 12.04 with 32GB of memory, conﬁgured as
a client and a database server. The server had 8 CPUs
(2.40 GHz each), while the client had 12 Xenon CPUs
(2.67 GHz each). The client machine was used to send
TPC-C queries to the database sever using the OLTP-
Bench suite [37]. For TPC-C, we used its standard mix-
ture of transactions (43% payment, 4% order status, 4%
delivery, 4% stock-level, and 4% new order) and a scale
factor of 20. For our database, we used MySQL 5.7 and
Postgres 9.5.
Security Policies — Based on the semantics of the TPC-
C benchmark, we used two different security policies.
For both policies, there existed an administrator role
with full read and write access to every table.
In Pol-
icy 1, we deﬁned two non-admin roles: a manager role
and a customer role. A manager’s user context contains
two attributes: the warehouse id (WID) and the district
id (DID). A customer’s user context contains three at-
tributes: the warehouse id (WID), the district id (DID),
and the customer id (CID). Most of the database tables
contain attributes that can be mapped directly to values
in the user context. In these cases, a user is given read or
write access (or both) to tuples where the user context
matches the associated attributes in the tuples. When
the target tables do not contain the necessary attributes
to map the current user to tuples in the table, i.e, the
New Order and Order Line tables, a join between the tar-
get table(s) and the OOrder table is necessary to obtain
the set of order ids (O ID) that the current user can ac-
cess. The access rules for each role in Policy 1 are sum-
marized in Table 3. We assigned each transaction type in
TPC-C to one of the roles. Customers execute the new
order, order status, and payment transactions, while man-
agers execute the delivery and stock-level transactions.
Our second policy, Policy 2, tests the sensitivity of
the performance results of SafeD and Postgres’s row-
level access control by adding restrictions to Policy 1.
We modiﬁed the manager policy for the OOrder and
New Order tables as follows. First, a manager can read
or modify tuples in the OOrder table only when the
O C ID ≥ 0. Second, a manager can only read and
1454    26th USENIX Security Symposium
USENIX Association
Table Name
Customer(C ID, C D ID, C W ID)
District(D ID, D W ID)
Warehouse(W ID)
OOrder(O C ID, O D ID, O W ID)
New Order(NO O ID)
Order Line(OL O ID)
History(H C ID, H D ID, H W ID)
Item
Stock
Customer
=(CID,DID,WID)
=(DID,WID)
=(WID)
=(CID,DID,WID)
=(CID,DID,WID)
Full Access
Full Access
Full Access
No Access
Manager
Full Access
=(DID,WID)
Full Access
=(DID,WID)
Full Access
Full Access
Full Access
Full Access
Full Access
Table 3: Policy 1 access rules for users. The user context
is compared to the attributes in the table to determine if
the user can read/write a tuple. Here, the read and write
permissions are identical.
modify tuples in the New Order table that correspond to
authorized tuples in the OOrder table. Note that Pol-
icy 2 is still semantically equivalent to Policy 1 for the
benchmark application since O C ID ≥ 0 is always true.
However, the purpose of these constraints is to intro-
duce artiﬁcial join constraints in the manager policy, and
thereby assess their impact on SafeD’s performance. Ta-
ble 4 summarizes the change and shows how it alters the
database account’s privileges.
Table Name
OOrder(O C ID)
New Order(NO O ID) Contain (OID) in OOrder
Manager
O C ID ≥ 0
Table 4: Changes to Policy 1 to get Policy 2 and the new
privileges for a database account. The changes result
from modiﬁcations made to the manager role.
8.1 Performance Overhead of MySQL +
SafeD
Since MySQL does not natively support row-based ac-
cess control, we evaluated the overhead of adding ac-
cess control to it using SafeD. Figure 3 shows the latency
overhead on MySQL when SafeD veriﬁes and enforces
Policy 1 for varying transaction rates. The results show
that SafeD can enforce a ﬁne-grained security policy at a
negligible cost to latency compared to having no protec-
tion (6.1% for No-Copy and 5.9% for No-Copy strategy).
8.2 Postgres + SafeD versus Postgres’s
Built-in Access Control
Unlike MySQL, some databases such as Postgres come
with their own built-in row-level access control. The
main advantage of SafeD over such built-in mechanisms
is its compatibility with the common architecture of ex-
isting web applications (See Section 1). Nonetheless, we
also wanted to compare the performance of the two ap-
proaches. We thus compared the costs of enforcing Poli-
cies 1 and 2 in Postgres using its internal access control
versus using SafeD.
For Policy 1, to allow for reusing the same connec-
Figure 3: The performance overhead of different access
control strategies compared to no access control (NULL)
for TPC-C and Policy 1 on MySQL.
tions, we created a single role in Postgres for the bench-
mark application, and granted it the union of the priv-
ileges of all users so that the application can execute
transactions on behalf of both customers or managers.
The results are shown in Figure 4a, where NULL rep-
resents the baseline at which no access control was en-
forced. All three access control strategies (built-in, V-
Copy, and No-Copy) had a maximum throughput of 350
to 400 transactions per second. Overall, the average la-
tencies of all three strategies were also comparable (i.e.,
within 5% of one another). However, note that these re-
sults represent best-case scenarios for Postgres’s built-in
mechanism, since the benchmark application had full ac-
cess to every table.