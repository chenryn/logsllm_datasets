##### System information (version)
  * OpenCV => 4.1.0
  * Operating System / Platform => Windows 64 Bit
  * Compiler => Visual Studio 2015
  * Android Studio: 3.4.1
  * Android Device: Samsung A3 2016
##### Detailed description
I have created a project from sample tutorial OpenCV ( Camera preview ) and I
set the front camera using the method setCameraIndex().  
But I get a wrong orientation when the front camera is opened.  
How can I solve this problem?
        package com.example.opencvtest;
        import org.opencv.android.BaseLoaderCallback;
        import org.opencv.android.CameraBridgeViewBase.CvCameraViewFrame;
        import org.opencv.android.LoaderCallbackInterface;
        import org.opencv.android.OpenCVLoader;
        import org.opencv.core.Mat;
        import org.opencv.android.CameraBridgeViewBase;
        import org.opencv.android.CameraBridgeViewBase.CvCameraViewListener2;
        import android.app.Activity;
        import android.content.pm.ActivityInfo;
        import android.hardware.Camera;
        import android.os.Bundle;
        import android.util.Log;
        import android.view.Menu;
        import android.view.MenuItem;
        import android.view.SurfaceView;
        import android.view.WindowManager;
        import android.widget.Toast;
        import java.lang.reflect.Method;
       public class MainActivity extends Activity implements CvCameraViewListener2 {
        private static final String TAG = "OCVSample::Activity";
        private CameraBridgeViewBase mOpenCvCameraView;
        private boolean              mIsJavaCamera = true;
        private MenuItem             mItemSwitchCamera = null;
        private BaseLoaderCallback mLoaderCallback = new BaseLoaderCallback(this) {
            @Override
            public void onManagerConnected(int status) {
                switch (status) {
                    case LoaderCallbackInterface.SUCCESS:
                    {
                        Log.i(TAG, "OpenCV loaded successfully");
                        mOpenCvCameraView.setCameraIndex(1);
                        mOpenCvCameraView.enableView();
                    } break;
                    default:
                    {
                        super.onManagerConnected(status);
                    } break;
                }
            }
        };
        public MainActivity() {
            Log.i(TAG, "Instantiated new " + this.getClass());
        }
        /** Called when the activity is first created. */
        @Override
        public void onCreate(Bundle savedInstanceState) {
            Log.i(TAG, "called onCreate");
            super.onCreate(savedInstanceState);
            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
            getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
            setContentView(R.layout.activity_main);
            mOpenCvCameraView = (CameraBridgeViewBase) findViewById(R.id.tutorial1_activity_java_surface_view);
            setDisplayOrientation();
            mOpenCvCameraView.setVisibility(SurfaceView.VISIBLE);
            mOpenCvCameraView.setCvCameraViewListener(this);
        }
        @Override
        public void onPause()
        {
            super.onPause();
            if (mOpenCvCameraView != null)
                mOpenCvCameraView.disableView();
        }
        @Override
        public void onResume()
        {
            super.onResume();
            if (!OpenCVLoader.initDebug()) {
                Log.d(TAG, "Internal OpenCV library not found. Using OpenCV Manager for initialization");
                OpenCVLoader.initAsync(OpenCVLoader.OPENCV_VERSION_3_0_0, this, mLoaderCallback);
            } else {
                Log.d(TAG, "OpenCV library found inside package. Using it!");
                mLoaderCallback.onManagerConnected(LoaderCallbackInterface.SUCCESS);
            }
        }
        public void onDestroy() {
            super.onDestroy();
            if (mOpenCvCameraView != null)
                mOpenCvCameraView.disableView();
        }
        public void onCameraViewStarted(int width, int height) {
        }
        public void onCameraViewStopped() {
        }
        public Mat onCameraFrame(CvCameraViewFrame inputFrame) {
            return inputFrame.rgba();
        }
        protected void setDisplayOrientation(Camera camera, int angle){
            Method downPolymorphic;
            try
            {
                downPolymorphic = camera.getClass().getMethod("setDisplayOrientation", new Class[] { int.class });
                if (downPolymorphic != null)
                    downPolymorphic.invoke(camera, new Object[] { angle });
            }
            catch (Exception e1)
            {
                e1.printStackTrace();
            }
        }
    }