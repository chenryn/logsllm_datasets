Figure 1: Architecture of Querying Encrypted Databases
their number and range. Our demo also shows that a query over
encrypted database can be completed efﬁciently.
2. ARCHITECTURE OF MANAGING EN-
CRYPTED DATABASES
The architecture of querying encrypted databases is shown in
Figure 1. In this architecture, there is a database service provided
in a public cloud, and an enterprise that deploys into the cloud a
database, which is encrypted by the enterprise to protect its privacy.
To query or update the encrypted database, the enterprise has a
query proxy managing the communication between the database
applications and the encrypted database. In this architecture, the
proxy is deployed into the administrative boundary of the enter-
prise. Hence, the untrusted cloud database administrators can ac-
cess only the ciphertexts stored in the cloud databases and cannot
know the encryption keys and schemas of the encrypted databases.
3. OVERVIEW OF TECHNIQUES IN DEMO
We demonstrate a system of managing encrypted databases. Par-
ticularly, the system can efﬁciently process the aggregate queries
over encrypted databases with range conditions. For example, such
a query can be: select the average income of persons, who are born
from year 1980 to 1990. Our system processes such queries by im-
plementing the homomorphic encryption scheme [6] and the order-
preserving indexing scheme [7].
3.1 Order-Preserving Indexing
The order-preserving indexing scheme [7] has the following fea-
ture: given two values v1 < v2, we have OPS(k, v1) < OPS(k, v2),
where OPS(k, vi) means the order-preserving index of value vi un-
der the secret key k. Unlike the order-preserving encryption schemes
[2, 3], the order-preserving indexing scheme is not required to re-
cover the value v from OPS(k, v). Hence, the design of the order-
preserving indexing scheme can be simpler than the order-preserving
encryption schemes. The order-preserving index scheme is en-
hanced in our recent work by introducing nonlinearity into indexes.
The order-preserving indexing scheme is designed to perform
range queries over encrypted databases, together with existing en-
cryption algorithms. In [7], the scheme is used together with the
AES algorithm. Since AES is not homomorphic, the aggregate
queries are not supported in [7]. In this paper, the order-preserving
indexing scheme is combined with homomorphic encryption, so
aggregate queries with range conditions can be processed.
1050Moreover, the instances of the encryption scheme [6] can be
composed into new instances, which are still homomorphic. A
composed instance is more robust than its constituent instances.
For example, each subcipertext from the second instance above can
be encrypted again by using the ﬁrst instance, and vice versa.
Our homomorphic scheme is very efﬁcient. For example, on a
Dell Latitude E4310 laptop, the second instance takes averagely
4.1 seconds to encrypt and decrypt 10000 values, with 64 subci-
phertexts for each value, and with key components and noises con-
taining 5 digits. To increase the robustness, a user just needs to
increase the number of subciphertexts, instead of producing large
subciphertexts. Hence, each subciphertext in our scheme can still
be treated as a numeric value by existing DBMSs, rather than as a
long string. Our homomorphic scheme is designed to be scalable
with respect to the number of subciphertexts. On the contrary, the
encrypting operation in [11] and the decrypting operation in [8, 4]
have the exponential complexity with respect to the number of se-
cret shares, that is, they are not scalable with the number of shares.
3.3 Database Encryption and Query
Suppose a value is encrypted into n subciphertexts by using our
scheme. Then, in our system, the n subciphertexts are stored into
n columns in one record, not necessarily in the order of subcipher-
texts generated from encryption. Moreover, the subcipertexts of
one value can be mixed with the subcipertexts of another value in
one record. Hence, the attackers lose the information on which
subciphertexts can be meaningfully combined in a correct order to
perform an attack.
In the same record, there is also a column storing the order-
preserving index and another column storing the hash of the value.
The indexes are used by DBMSs to check range query conditions,
and the hashes are used to check equality query conditions. For
encrypted data satisfying the conditions, all corresponding subci-
phertexts are included in the query result, or their sum or average
are included in the query result. That is, for the SUM or AVG op-
erations in a query, DBMSs just need to perform the standard SQL
SUM or AVG operations over each column of subciphertexts.
In [1], the Shamir’s secret sharing mechanism [11] is used to pro-
duce a number of secret shares, which are then stored into databases
managed by different service providers. Our system does not re-
quire a user to use multiple cloud database services to store sub-
ciphertexts. Due to this feature, our system is also suitable for
databases deployed within the premises of an enterprise.
As shown above, our scheme does not reply on modulo opera-
tions, so it can work on inﬁnite ﬁelds. Hence, using our scheme
does not need to predetermine the maximum sum of values in one
table column. This feature allows our system to manage large and
long-standing encrypted databases.
4. CASE STUDIES
Our demo assumes that a family census has been done by a gov-
ernment agency. Since the census data contains sensitive informa-
tion, such as name, birth date and income, the government agency
hopes that the census data can be encrypted in their databases,
which might be deployed into a public cloud, and more importantly
the encrypted data can still be managed and queried smoothly.
To demonstrate the correctness of our system, we put each data
into three databases: 1) a plain database, where data is not en-
crypted, 2) an encrypted database, where data is encrypted by us-
ing the ﬁrst homomorphic encryption instance introduced above,
and 3) another encrypted database, where data is encrypted by us-
ing the second homomorphic encryption instance. Note that the
plain database is only used to check query results, just for the
demo purpose and not needed in practice. In addition, the names of
databases, tables and columns are all hashed in encrypted databases.
Our demo includes the creation and deletion of encrypted databases,
in particular, the table schemas in the plain database and two en-
crypted databases are totally different. Hence, from the schemas,
the untrusted cloud database administrators or attackers cannot learn
any information about the stored data.
Our demo shows the operations of updating, inserting and delet-
ing data in the encrypted database, demonstrating that the encrypted
data can be managed smoothly in our system. These operations are
an integral part of encrypted database management. For example,
we can insert family members into the person table, change the
salaries of particular family members, and delete records of per-
sons satisfying some conditions.
We also demonstrate various queries by using our system, in par-
ticular aggregate queries with range conditions. For example, over
the encrypted data, we can query the average income for persons in
an area speciﬁed by postcode, who are born in some range of years.
Our demo is available at http://150.229.2.229/familySys/home,
where detailed steps are included to guide the demo.
5. REFERENCES
[1] D. Agrawal, A. E. Abbadi, F. Emekçi, and A. Metwally.
Database management as a service: Challenges and
opportunities. In Proceedings of the 25th International
Conference on Data Engineering, pages 1709–1716, 2009.
[2] R. Agrawal, J. Kiernan, R. Srikant, and Y. Xu. Order
preserving encryption for numeric data. In Proceedings of
the 2004 ACM SIGMOD international conference on
Management of data, SIGMOD ’04, pages 563–574, 2004.
[3] A. Boldyreva, N. Chenette, Y. Lee, and A. O’Neill.
Order-preserving symmetric encryption. In Proceedings of
the 28th Annual International Conference on Advances in
Cryptology, EUROCRYPT ’09, pages 224–241, 2009.
[4] Z. Brakerski and V. Vaikuntanathan. Fully homomorphic
encryption from ring-lwe and security for key dependent
messages. In Proceedings of the 31st annual conference on
Advances in cryptology, CRYPTO’11, pages 505–524, 2011.
[5] T. Ge and S. Zdonik. Answering aggregation queries in a
secure system model. In the 33rd international conference on
Very large data bases, pages 519–530, 2007.
[6] D. Liu. Homomorphic encryption for database querying.
Australian Provisional Patent (ﬁled by CSIRO), 2012.
[7] D. Liu and S. Wang. Programmable order preserving secure
index for encrypted database query. In Proceedings of the 5th
IEEE International Conference on Cloud Computing, pages
502–509, 2012.
[8] M. Naehrig, K. Lauter, and V. Vaikuntanathan. Can
homomorphic encryption be practical? In Proceedings of the
3rd ACM workshop on Cloud computing security workshop,
CCSW ’11, pages 113–124, 2011.
[9] P. Paillier. Public-key cryptosystems based on composite
degree residuosity classes. In Proceedings of the 17th
international conference on Theory and application of
cryptographic techniques, EUROCRYPT’99, 1999.
[10] R. A. Popa, C. M. S. Redﬁeld, N. Zeldovich, and
H. Balakrishnan. Cryptdb: protecting conﬁdentiality with
encrypted query processing. In Proceedings of the
Twenty-Third ACM Symposium on Operating Systems
Principles, SOSP ’11, pages 85–100, 2011.
[11] A. Shamir. How to share a secret. Commun. ACM,
22:612–613, November 1979.
1051