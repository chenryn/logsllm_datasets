User: How to use Python to write a script to automatically backup MySQL database?
Assistant: To realize the automatic backup of MySQL database, you can write a scheduled task through Python, and use Python's MySQLdb module to connect to the database for backup query. The following is a simple Python script to automatically back up the MySQL database: 1. First install the MySQLdb module and enter the following command on the command line: ``` pip install MySQL-python ``` 2. Write a backup script```python import os import datetime import MySQLdb # Configure MySQL database connection information MYSQL_HOST = 'localhost' MYSQL_PORT = 3306 MYSQL_USER = 'root' MYSQL_PASSWD = 'password' MYSQL_DATABSE = 'test' # Backup directory BACKUP_DIR = '/data/backups/mysql' # Backup file name Format BACKUP_FILENAME = 'mysql_backup_%Y%m%d_%H%M%S.sql' # Create a backup directory if not os.path.exists(BACKUP_DIR): os.makedirs(BACKUP_DIR) # Get the current time current_time = datetime.datetime .now().strftime('%Y%m%d_%H%M%S') # Construct backup file name backup_filename = current_time + '.sql' #Mysql backup command mysql_dump_cmd = 'mysqldump -h %s -P % s -u%s -p%s %s > %s/%s' % ( MYSQL_HOST, MYSQL_PORT, MYSQL_USER, MYSQL_PASSWD, MYSQL_DATABSE, BACKUP_DIR, backup_filename ) # Execute backup command os.system(mysql_dump_cmd) # Delete expired backup file( 7 days ago backup file) for f in os.listdir(BACKUP_DIR): if f.endswith('.sql'): f_time = datetime.datetime.strptime(f[:-4], '%Y%m%d_ %H%M%S') if (datetime.datetime.now() - f_time).days > 7: os.remove(os.path.join(BACKUP_DIR, f)) ``` 3. Set up scheduled tasks in Linux In the system, cron can be used to set up scheduled tasks. Enter the following command on the command line: ``` crontab -e ``` Then edit the crontab file and add the following line, which means automatic backup at 2 am every day: ``` 0 2 * * * /usr/bin/env python /path/to/backup_script.py ``` After saving the file, cron will automatically execute the specified backup script.