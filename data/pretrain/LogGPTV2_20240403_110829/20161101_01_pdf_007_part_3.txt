 BUFFERS [ boolean ] -- 输出本次QUERY shared/local/TEMP blocks的信息. The number of shared blocks hit, read, dirtied, and written, the
number of local blocks hit, read, dirtied, and written, and the number of temp blocks read and written.
 -- 包括命中/未命中读数据块, 产生的脏数据块, 写出了多少QUERY开始前的脏数据块. (需打开analyze, TEXT模
式只输出非0项, "计数包含所有子节点的计数".)
 TIMING [ boolean ] -- 输出每个节点的真实的时间开销, 总时间不包含网络开销,parser,rewriter,planer开销, (需打开analyze)
 FORMAT { TEXT | XML | JSON | YAML } -- 输出格式, 默认TEXT.
 需要特别注意analyze的使用, 会真的执行被评估的SQL, 所以一般不要使用, 特别是DML, 如果要使用的话, 请放在事务中使用并回滚事务.
 BEGIN;
 EXPLAIN ANALYZE QUERY;
 ROLLBACK;
EXPLAIN语法
 COSTS讲解
 每个节点的成本输出分为两个部分显示, 各种节点的成本计算方法参考 src/backend/optimizer/path/costsize.c
 startup_cost:
 输出该节点的第一行前的成本(首先要包含所有子节点的成本), 例如排序节点或者聚合节点, 那么在输出第一行前需
要排序或者聚合操作, 因此一般startup_cost大于0.
 有子节点的节点, 启动成本一般都大于0, 因为它包含了子节点的成本.
 还需要注意index scan和bitmap index scan的启动成本的差别. index scan节点输出的是tuple, 要先扫描索引页因此
启动成本大于0, bitmap index scan 节点输出的是索引条目, 并非行的数据, 因此启动成本等于0 (或者说Bitmap
Index Scan节点和Bitmap Heap Scan是一对的, 启动成本算在Bitmap Heap Scan上).
 对于IndexOnlyScan节点, 虽然是从index输出结果, 但是还要先检查visibility MAP, 因此startup_cost也大于0. 但是,
它的启动成本计算并未计入这部分开销. 而是和普通的index scan计算方法一样.
 src/backend/executor/nodeIndexonlyscan.c
 src/backend/utils/adt/selfuncs.c -- 索引访问成本计算函数
 total_cost:
 包含startup_cost, 以及输出所有行需要的成本.
 使用limit或者在exists子句中, 真实的成本将使用一个插值.
 actual_cost = startup_cost + (total_cost - startup_cost) * tuples_to_fetch / path->rows;
EXPLAIN语法
 例子1 :
 digoal=# create table t11(id int primary key, info text);
 digoal=# insert into t11 select generate_series(1,100000),'test';
 digoal=# explain select * from t11 where id=1;
 QUERY PLAN
 --------------------------------------------------------------------
 Index Scan using t11_pkey on t11 (cost=0.29..4.31 rows=1 width=9) -- Index Scan节点输出heap tuple, 启动成本是0.29, 因为
输出第一行前需要先扫描索引, 从index entry定位到heapID和itemID, 启动成本正是扫描索引的成本.
 Index Cond: (id = 1)
 (2 rows)
 此例startup_cost计算方法
 btcostestimate@src/backend/utils/adt/selfuncs.c
EXPLAIN语法
 if (index->tuples > 1) /* avoid computing log(0) */
 {
 descentCost = ceil(log(index->tuples) / log(2.0)) * cpu_operator_cost;
 costs.indexStartupCost += descentCost;
 costs.indexTotalCost += costs.num_sa_scans * descentCost;
 }
 descentCost = (index->tree_height + 1) * 50.0 * cpu_operator_cost;
 costs.indexStartupCost += descentCost;
 costs.indexTotalCost += costs.num_sa_scans * descentCost;
EXPLAIN语法
 digoal=# select reltuples from pg_class where relname='t11_pkey';
 100000
 digoal=# show cpu_operator_cost;
 0.0025
 digoal=# select (log(100000)/log(2.0))*0.0025; -- ceil(log(index->tuples) / log(2.0)) * cpu_operator_cost
 0.041524101186092
 digoal=# select (1+1)*50*0.0025; -- (index->tree_height + 1) * 50.0 * cpu_operator_cost;
 0.2500
 digoal=# select 0.041524101186092+0.2500;
 0.291524101186092
EXPLAIN语法
 例子2 :
 digoal=# explain select id from t11 where id=1;
 QUERY PLAN
 -------------------------------------------------------------------------
 Index Only Scan using t11_pkey on t11 (cost=0.29..4.31 rows=1 width=4) -- 启动成本和index scan计算方法一致, 但是由于索引页不存储行的
版本信息, 输出前还需要VM扫描, 只有不在VM中的数据块是需要查看版本信息的.
 -- PostgreSQL启动成本并没有包含VM扫描的部分.
 Index Cond: (id = 1)
 (2 rows)
 digoal=# explain (analyze,verbose,costs,buffers,timing) select id from t11 where id Bitmap Index Scan on t11_pkey (cost=0.00..91.44 rows=10020 width=0) (actual time=1.370..1.370 rows=9999 loops=1) -- 输出索引条目
 Index Cond: (t11.id  Seq Scan on postgres.tbl_cost_align (cost=0.00..195393.00 rows=10100000 width=0) (actual time=0.018..3119.291
rows=10100000 loops=1) -- 这个节点的类型(全表扫描)
 -- 0.00表示输出第一行前的成本, 如这里输出第一行前不需要排序为0.00. 后面是这个节点真实的时间.
 Output: id, info, crt_time -- 这个节点输出的列
 Buffers: shared hit=4925 read=89468 -- 这个节点的shared buffer命中4925个page, 从磁盘读取89468个page(如果