cause the global system risk to rise. They occur since the events
in this signature overlap with those of other signatures. After event
12, the risk has risen above 20, the threshold of risk tolerance. As
a result, the RiskManager searches for and ﬁnds the risk reduc-
tion measure which has the lowest cost-beneﬁt ratio. The measure
it selects is invoke RICE’s disable() operation on the ’Documents’
object group which is data that is listed as being affected as a conse-
quence of this attack. This causes the risk to drop in event 13. The
conﬁdentiality of the ﬁles in the ’Documents’ group is maintained.
Exceptional Condition Handling Error
An exceptional condition handling error can result when the sys-
tem is left in an exposed state after an unexpected event occurs. It
is due to the failure to explicitly design the system to fall back into
a safe state when unplanned eventualities are realized. In our ex-
ample, when the servlet is authenticating the user, it checks a list
of revoked accounts on another site. If does not receive a response
after multiple queries, it grants access (on the assumption that there
is an error in the revocation server’s functioning). The resulting at-
tack is mounted by ﬁrst ﬂooding the revocation server’s network
connection so as to assure that it can not respond, then utilizing an
expired account to gain access.
When the following sequence of events is detected, an attack that
exploits this vulnerability is deemed to have occurred. First, the
web server accepts a connection to port 8001. Second, it serves
the speciﬁc HTML document which includes the form which re-
quests authentication information as well as the desired document.

Third, the server receives another connection. Fourth, it executes
the servlet that checks the authentication information provided. Next,
an attempt is made to contact the revocation server to check that the
credentials have not been revoked. Since the revocation server’s
network connectivity is under attack, the connection to it will time-
out. After a total of three attempts, the check will fail, incorrectly
allowing access instead of denying it. This results in the ﬁfth, sixth
and seventh events being network exceptions, while the eighth is
the completion of the ﬁle request. The events must all occur within
the pre-match timeout of the signature, which is 2 minutes.
In Figure 3, event 2 and events 8 − 14 correspond to this signature.
Event 1 and events 3 − 7 are of other signatures. Event 14 causes
the risk threshold to be crossed. The system searches for a risk
reduction measure and opts to use RICE to disable() access to the
’Documents’ object group which is data that is listed as being af-
fected as a consequence of this attack. This causes the risk to drop
in event 15. Although the attack itself will succeed and the intruder
will gain access to the system, all the data in the ’Documents’ group
will now be secured by RICE. It will not be possible to decrypt any
of the ﬁles and any changes will not be authenticated.
Race Condition Error
A race condition error results due to the system performing a secu-
rity operation in multiple steps, while assuming that the sequence
is being performed atomically. In our example, a servlet allows a
user to create an account by providing a username and password.
The servlet creates a writable copy of the password ﬁle in a tem-
porary directory, to which it appends the new account information
before removing write permission and moving the ﬁle to the pass-
word ﬁle’s usual location. The design assumes the copy, append,
change permission and move operations all occur atomically. An
attacker uses a ﬁle upload servlet running on the same host that has
access to the temporary directory, by initiating the creation of a new
account while repeatedly uploading a spurious password ﬁle to the
temporary location. By continuously, repeatedly uploading the ﬁle,
when the legitimate one appears it is overwritten by the spurious
one. This can be used to grant greater privileges than they would
have been allowed as a new user having just created an account.
When the following sequence of events is detected, an attack that
exploits this vulnerability is deemed to have occurred. First, the
web server accepts a connection to port 8001. Second, it serves a
speciﬁc HTML document that includes a form for checking whether
a username already exists in the system. Third, it receives another
connection. Fourth, it executes the servlet that checks whether the
username is in use. Fifth, the password ﬁle is opened for copying
to a temporary location. Sixth, a temporary copy is written out.
Seventh, the HTML document which includes a form for selecting
a username and password is served. Eighth, the server receives a
connection. Ninth, it serves the HTML document which includes
a form for uploading ﬁles. Tenth, it receives another connection.
Eleventh, it executes the servlet for uploading a ﬁle. Twelfth, the
temporary password ﬁle is overwritten by the upload. Thirteenth,
another connection is accepted by the server. Fourteenth, the servlet
for creating a new account is executed. Fifteenth, it appends the
new account to the temporary password ﬁle (which has been sub-
verted at this point if the attack has not been interfered with).
In the Figure 4, event 5, events 8 − 14, event 17, and event 20,
pertain to this signature. Events 1 − 4 and 6 − 7 relate to other
signatures. Event 15 also pertains to another signature but causes
the risk to exceed the threshold of tolerance. The system responds

Figure 4: Attack exploiting a race condition error.
in event 16 by activating a predicate to deny the write permission
for the password ﬁle in the uploads directory. Event 18 pertains to
another signature but causes the risk to exceed the threshold of tol-
erance. The system responds in event 19 by activating a predicate
for the permission which controls whether the ﬁle upload servlet
can execute. The predicate activated is a Chinese Wall check which
will subsequently allow access only to other ﬁles in the same group
as the servlet. Event 21 pertains to another signature but causes the
risk to exceed the threshold of tolerance. The system responds in
event 22 by activating a predicate for the write permission of the
temporary version of the password ﬁle. The predicate activated is
a Chinese Wall check which will subsequently allow access only
to other ﬁles in the same group. Since another group has already
been accessed in event 21, the write permission for the temporary
version of the password ﬁle will subsequently be denied. Since
the risk has not reduced below the threshold of tolerance, another
risk reduction measure is taken in event 23 in the form of invok-
ing RICE’s disable() operation on the ’Documents’ object group.
By event 24, where the attack attempts to complete, the response
measures in place prevent it from succeeding. In particular, write
access has been disabled for the temporary version of the password
ﬁle in the temporary directory where uploads are allowed. Using
RICE, the integrity of the password ﬁle is thus maintained.
8.2 Runtime Overhead
In the previous sections we have described the beneﬁts of aug-
menting the runtime with RICE. However, the use of cryptography
implemented in software introduces a computational overhead that
slows down ﬁle operations. To estimate the extent to which RICE
affects performance we describe two sets of experiments.
Since the use of RICE only introduces an impact when a ﬁle is
being opened or closed, the ﬁrst experiments consists of micro-
benchmarks that measure the cost it adds to open() and close() op-
erations. The cryptographic overhead is a function of the size of the
ﬁle that is being opened or closed. Hence, in the ﬁrst experiment we
vary the ﬁle’s size and measure the time to open the ﬁle. This cost
is independent of whether the ﬁle was opened for reading, writing
or appending. The second, third and fourth experiments measure
the cost to close a ﬁle, as a function of its size, after it has been
opened for reading, writing or appending. The cost to close a ﬁle
after reading is minimal since no encryption, hash or delta compu-
tation is needed. In the case that the ﬁle is opened for writing, the
ﬁle is created with zero length and then ﬁlled so it reaches the ex-
pected size. The ﬁle opened for appending is already one which is
Figure 5: Cost of opening and closing a RICE protected ﬁle,
measured as a function of ﬁle size. The cost of closing depends
on whether the ﬁle was opened for reading, writing or append-
ing.
the expected size and no extra data is written to it. Thus in both the
write and append cases, the ﬁle that must be encrypted is the same
size, but the append case requires less computation for constructing
the delta which results in the operation being less expensive. The
results of these experiments are displayed in Figure 5.
The micro-benchmarks show that the impact of RICE on opening
and closing a ﬁle is signiﬁcant. However, these operations consti-
tute only a fraction of the cost of a typical workload. Therefore, we
ran the SPECjvm98 [12] suite of applications to obtain a macro-
benchmark which would provide an estimate of RICE’s impact in
context.
The SPECjvm98 suite includes a separate ﬁle for each application
which contains output results that are used to check that the pro-
gram ran correctly. RICE protection is added to these ﬁles.
In
addition, all but one of the programs use one or more datasets that
are stored in ﬁles. These ﬁles are protected with RICE as well. The
ﬁles vary in size from 55 bytes to 3.5 megabytes. The result of a
single run is shown in Figure 6.
compress is a Lempel-Ziv compressor. It is the worst affected in
terms of absolute cost since it accesses the largest ﬁle in the work-
load. db performs a series of add, delete, ﬁnd and sort operations
on a memory resident database. It is worst affected in percentage
terms, since it uses multiple small ﬁles, with the result that the key
management overhead is pronounced.
check exercises the virtual machine’s core functionality such as
subclassing, array creation, branching, bit operations, arithmetic
operations. All the overhead introduced by RICE is from the cost
of opening the ﬁle against which the output is matched for correct-
ness.
jess is an expert system that solves puzzles using rules and a list of
facts. jack is a lexical parser. mtrt is a ray tracer. mpegaudio is an
MP3 decompressor. In each case, most of the overhead is from the
Figure 6: RICE imposes a noticeable impact on applications in
SPECjvm98 that rely heavily on the ﬁlesystem if limited to a
single run.
Figure 7: RICE’s overhead is noticeably diminished when
SPECjvm98 runs 10 times, due to the beneﬁts of caching.
Figure 8: When SPECjvm98 runs a 100 times, the caching ben-
eﬁts compensate for the initial and ﬁnal cryptographic opera-
tions to the point where the impact of using RICE is no longer
signiﬁcant.

capability management. In the case of mtrt the overhead is greater
since it uses a signiﬁcantly larger data set.
will outweigh the performance impact (which can be ameliorated
using cryptographic hardware acceleration).
10. REFERENCES
[1] M. Blaze, A cryptographic ﬁle system for UNIX,
Proceedings of 1st ACM Conference on Communications
and Computing Security, 1993.
[2] G. Cattaneo and L. Catuogno and A. Del Sorbo and P.
Persiano, The Design and Implementation of a
Transparent Cryptographic Filesystem for UNIX,
FREENIX, 2001.
[3] K. Fu, Group Sharing and Random Access in
Cryptographic Storage Filesystems, MIT Master’s Thesis,
1999.
[4] K. Fu, M. F. Kaashoek and D. Mazieres, Fast and Secure
Distributed Read-only Filesystem, Proceedings of the 4th
USENIX Symposium on Operating Systems Design and
Implementation, 2000.
[5] A. Gehani and G. Kedem, RheoStat : Real-time Risk
Management, Proceedings of the 7th International
Symposium on Recent Advances in Intrusion Detection,
2004.
[6] J. Hughes et al, A Universal Access, Smart-Card-Based,
Secure File System, 9th USENIX Security Symposium,
2000.
[7] http://icat.nist.gov
[8] http://www.w3.org/Jigsaw
[9] D. Mazieres et al, Separating Key Management from
Filesystem Security, 17th Symposium on Operating
Systems Principles, 1999.
[10] Encrypting File System for Windows 2000, Microsoft,
1999.
[11] P.A. Porras, STAT - A state transition analysis tool for
intrusion detection, Master’s Theisis, University of
California Santa Barbara, June 1992.
[12] http://www.specbench.org/osg/jvm98/
[13] E. Zadok, I. Badulescu and A. Shender, Cryptfs: A
Stackable Vnode Level Encryption Filesystem, Columbia
University Technical Report CUCS-012-98, 1998.
Since RICE is designed to take advantage of concurrent and re-
peated use of ﬁles, we undertook two more experiments where the
applications are allowed to repeat a number of times. This allows
us to see the beneﬁt of RICE when the workload involves repeated
access to the same ﬁles, either from a single process or multiple
concurrent processes. The results of the experiment with 10 runs
is shown in Figure 7. The cases where RICE’s overhead was most
pronounced, such as db show a marked improvement. Cases like
mpegaudio are still dominated by key management since the data
is streamed once and there is little re-use. Finally, the results of
an experiment with 100 runs is shown in Figure 8. The impact of
RICE is no longer signiﬁcant in these results.
Thus, if the workload has enough reuse of the ﬁles, RICE is viable
as is. RICE uses Java implementations of cryptographic subrou-
tines. Native ones will offer a signiﬁcant performance improve-
ment. The experiments were performed on a 700 MHz processor,
while current generation ones run at speeds over 3 GHz. Since the
bottleneck that increased the running time of the applications was
the CPU-intensive cryptographic operations, it is likely to reduce
signiﬁcantly with the use of newer, faster CPUs. In addition, com-
modity processors will include dedicated hardware cryptographic
acceleration in the near future. This will address the issue.
8.3 Caveat
As with all automated systems, it is possible for an attacker to uti-
lize knowledge of the response behavior of the system to bypass
the protective measures. For example, in the case of intrusion re-
sponse engines which rely on anomaly detection, the attacker could
perform their invasive steps stealthily enough that they fall below
the threshold of what is considered intrusive. In such cases, RICE
would not be invoked and its protections would not be active when
the system’s security is subverted.
Of greater concern is the possibility that an attacker may utilize
the protection measures to launch denial-of-service attacks against
legitimate users of the system. The attacker could effect this by
attempting to learn the contents of the intrusion signature database,
then launching partial attacks that cause the system to invoke the
protective measures of RICE. This would cause the data to be made
inaccessible, an effective denial-of-service to running applications.
One method to guard against this is to use timers on the detection
signatures, so that attacker is forced to be relatively aggressive in
launching the attack, in which case an administrator is likely to be
alerted in time to intercede. Such protections, however, are beyond
the scope of this paper.
9. CONCLUSION
RICE provides a means to augment the Java Runtime Environment
to provide data security guarantees when invoked by an intrusion
detecor. Using RICE, precautionary measures can be added to me-
diate ﬁle access so that in the event of an attack, the conﬁdentiality,
integrity and availablility of data can be maintained. By mapping
read and write capabilities to their cryptographic analogues of con-
ﬁdentiality and integrity, and organizing key management appro-
priately, RICE allows access to the data to be limited rapidly by
deletion of cryptographic keys. File modiﬁcations result in deltas
that are replicated to a safe node, thereby guaranteeing availabil-
ity even after a penetration occurs. When the security of the data
being protected with RICE is critical, the beneﬁt of the assurances
