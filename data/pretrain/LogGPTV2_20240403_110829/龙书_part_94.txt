,股
B
处
e，R3
于
acde
LD
B4
B
e
图 8-17
P
R2,R3
B2
一个内层循环的流图
bcdef
cdef
B
12
b,c,d,e,f 活跃
bcdef
acdf
b,d;e,f 活跃
B3
357
>
---
## Page 374
个用来选择溢出结点的启发式规则。总的原则是避免在内部循环中引人溢出代码。
顺序对结点进行着色，从而得到一-个原图的k-着色方案。在第二种情况下已经不存在k-着色
到的图中每个结点都至少有k个相邻的结点。在第一种情况下，我们可以依照结点被删除的相
展成为--个对G 的k-着色方案：只要给n 指派一个尚未指派给它的邻居的颜色就可以了。
数少于k个。把n 及和n 相连的边从G中删除后得到一个图 G"。对图 G'的-个k-着色方案可以扩
的启发式技术进行快速着色。假设图G中有一个结点n，其邻居(即通过一条边连接到n的结点)个
能相互冲突的符号化寄存器。
的结点是符号化寄存器。对于任意两个结点，如果一个结点在另一个被定值的地方是活跃的，
使
了机器指令。如果对变量的访问要求一些指令使用栈指针、显示表指针、基址寄存器或其他的量
符号化寄存器。经过这次处理，中间代码中使用的名字变成了寄存器的名字，而三地址指令变月
存器和管理寄存器溢出的简单且系统化的技术。
须被保存(溢出)到一个内存位置上，以便释放出一个寄存器。图着色方法是一个可用于分配寄
8.8.4通过图着色方法进行寄存器分配
-L2部分也分配到一个寄存器。然而，如果我们决定在L2中（而不是在L，中)为x分配一个寄
8.8.3外层循环的寄存器指派
的
个图
本块
是
这
来
存
实际并非如此，例如由4个结点组成的圈中，每个结点都有两条边，但是却存在2-着色方案：奇数点为白色，而偶
颜色相同。一种颜色代表一个寄存器。着色方案保证不会把同一个物理寄存器指派给两个
是寻找到一个溢出代价最小的指派方法。
这
区个访问就必须被分解成为多个机器指令，并且需要创建一个或多个临时的符号化寄存器。
用可以直接翻译成为机器指令中的一个地址所使用的某种访问模式。如果访问方式更加复杂，
辅助访问，我们就假设这些量存放在那些为相应目的而保留的寄存器中。通常情况下，它们的
这个方法需要进行两趟处理。在第一趟处理中选择目标机器指令，处理时假设有无穷多个
择。
名字分配寄存器的标准留作练习，在选择时假设已经为所有嵌套在L内部的循环完成了名字
器，我们必须在L2的人口处加载x，而在L2的出口处保存x。我们把在外层循环L中选择为哪
通过不断地从寄存器冲突图中删除边数少于k的结点，要么最终我们得到一个空图，要么得
当计算中需要一个寄存器，但所有可用寄存器都在使用时，某个正被使用的寄存器的内容必
在为内层循环指派寄存器并生成代码之后，我们可以把同样的想法应用到更大的外围循环
在选择好了指令之后，第二趟处理把物理寄存器指派给符号化寄存器。这一-次处理的目标
358
一般来说，确定--个图是否k-可着色是一个 NP 完全问题，但在实践中我们常常可以使用下面
因被称为已着色(colored)当且仅当每个结点都被赋予了一个颜色，并且没有两个相邻的结!
B;中，a 在对b 定值的第二个语句上是活跃的，因此在图中结点a 和b 之间有一条边。
这两个结点之间就有一条边。比如，图 8-17 对应的寄存器冲突图中有两个结点a 和b。在基
然
数点为黑色。作者的意思可能是指难以在适当的时间内找出-着色方案一
后就可以尝试用k种颜色对寄存器冲突图进行着色，其中k是可指派的寄存器的个数。
一译者注。
第8章
反
成
---
## Page 375
法制导翻译方案中那样的代码片断。
例8.18
8.9.1 树翻译方案
8.9通过树重写来选择指令
8.8.58.8节的练习
其中，replacement(被替换结点)是一个结点，termnplate(模板)是一棵树，action(动作)是一-个像语
个结点。各个树重写规则形如
树的叶子结点的标号为属性，而下标表示属性的值。
算符的某个参数是内存位置或寄存器，那么该内存位置或寄存器中的内容就是参数的值。这棵
ind 结点指出了一个内存位置，该位置用来存放赋值运算符右部的右值。如果一个+或者ind 运
于在地址计算中进行乘数为某些常数(比如2、4、8等)的乘法运算)。
化数组地址的计算，我们假设每个元素值都是一个字节的字符(某些指令集中提供了特殊指令用
数组a 和变量i 的地址是通过分别把常量C。和C;的值加上寄存器 SP 的内容而得到的。为了简
的位置上的右值被设置成表达式b+1 的右值。
中 SP 是存放当前活动记录的起始位置的寄
油闻
a[i］=b+1 的树，其中数组 a 存放在运行时刻
含有关它们的标号的存储类型的信息。
节讨论的那样在中间代码中插人运行时刻地址之后就可以得到这些树。另外，这些树的叶子包
码生成器的指令选择阶段。对于某些机器，相对于使用树表示方法而言，使用 DAG 表示方法角
生成器的生成器中得到有效使用。这种生成器可以依据目标机器的高层规约自动构造出一个代
出现的运算符而选择目标语言指令的问题——仍然是一个规模很大的排列组合任务。
经给定，并且假设寄存器通过另一个独立的机制进行分配，指令选择一
或者具有某些特殊目的指令(比如信号处理指令)的机器尤其如此。即使我们假设求值的顺序
重新从栈中恢复它们，请设计一个寄存器分配策略。
量。局部变量 a 和i 的运行时刻地址是以相对
SP 的常数偏移量C。和C;的方式给出的，其
中，而b是一个存放在内存位置 M，的全局变
多生成更好的代码。但是DAG匹配比树匹配更加复杂。
在这棵树中，运算符 ind 把它的参数作为内存地址处理。作为一个赋值运算符的左子结点，
在本节中，我们把指令选当作一个树重写问题来处理。目标指令的树形表示已经在代码
代码生成
目标代码是通过应用一个树重写规则序列来生成的，这些规则最终会把输人的树归约为单
对a[i]的赋值是一个间接赋值，其中 a[i]
在这一节中，代码生成过程的输人是一个由目标机器的语义层次上的树组成的序列。像8.3
指令选择可能是一个大型的排列组合任务。对于像CISC 这样的具有丰富寻址模式的机器，
练习8.8.2：假设我们在每个过程调用前在栈中自动保存所有的寄存器，并在该过程返回后
一组树重写规则被称为一个树翻译方案（tree-translation scheme）。
练习8.8.1：为图8-17中的程序构造寄存器冲突图。
图8-19 包含了—个对应于赋值语句
replacement—templateaction|
图8-19a[i]=b+i 的中间代码树
RSP
ind
一为实现中间表示形式！
RSP
M
359
2
---
## Page 376
将用一个语义断言来描述。
的规则对应于带有下标的加载与加法运算。请注意，规则(8)要求常量的值必须是1。这个条件
贯穿本节的例子中。前面的两个规则对应于加载指令，接下来的两个规则对应于保存指令，其余
例8.19
冲突情况下决定应用哪个规则的一些机制。
子树的一次覆盖（tiling）。在一个给定时刻可能有多个模板与某个子树匹配，我们将简要描述在
这个子树替换为标号为R;的单一结点，同时输出指令 ADD R，R，Rj。我们把这次替换称为对该
关于寄存器到寄存器加法指令的规则：
足这些约束才可以匹配模板。比如，一个断言可能规定某个常数的值必须位于某个区间内。
的属性。有时，会存在一些对于模板中的下标值的约束，这些约束通过语义断言来表示。只有满
为空的机器指令序列，该序列由与模板关联的动作发出。和输人树一样，模板的叶子是带有下标
个子树的根结点的标号是运算符+，且其左右子结点是寄存器讠和j中的量，那么我们可以把
360
树翻译方案可以很方便地表示代码生成器的指令选择阶段。作为树重写规则的例子，考虑
这个规则按照如下方法使用。如果输入树包含--个和上面的模板匹配的子树，也就是说，有
每个树重写规则表示了如何翻译由模板给出的输入树的一个片段。翻译中包含了一组可能
图 8-20包含了我们的目标机上的--部分指令的树重写规则。这些规则将被用于一个
1
。
R;←
2
Ri←
2
W
图8-20
↑
↑
个
↑
2
2
R:
R
W
一些目标机指令的树重写规则
ind
M
R
ind
2
5
ADD R，Ri, Rj }
{ ADD Ri, Ri, Rj }
{ADD Ri, Ri, α(Rj) }
{LD Ri,a(Rj) }
{INC Ri
{ST c,Ri}
{LD Ri, #α }
第8章
---
## Page 377
说 R1）的指令。现在，使用规则(8)我们可以匹配子树
在右边的子树中，可将规则(2)可应用于叶子结点 M,，并产生一个把b加载到某个寄存器（比方
计算较小的子树更加高效，我们选择规则(6)得到下面的树：
归约为单个结点 Ro，并生成指令 ADD RO，RO，i(SP)。假设用一个指令来计算较大的子树要比
归约为单个结点，设其标号为 R。我们也可以使用规则(6)把较大的子树
SP。现在这棵树如下所示：
使用这个规则，我们把这棵子树重写为一个标号为 R。的单一结点，同时生成指令 ADD RO，RO,
边的根标号为+的子树匹配：
最左边叶子结点的标号就由C。变成R。，同时生成了指令LDRO，#a。现在，第七个规则和最左
于把常量 C。加载到寄存器 R。中：
例8.20
树翻译方案自动生成代码生成器。
似。我们写出一-个树翻译方案来描述目标机的指令集合。在实践中，我们将试图找到－个能够
给定输人树而得到的输出。
止。在将一个输人树归约成单个结点的过程中生成的机器指令代码序列就是树翻译方案作用
生成这些指令。这个过程将一直重复，直到这个树被归约成单个结点，或找不到匹配的模板
8.9.2 通过覆盖一个输入树来生成代码
对
2
每个输人树生成代价最小的指令序列的树翻译方案。现在有很多工具可以帮助我们根据一个
代码生成
此时，我们可以应用规则(5)来把子树
1）
一个树翻译方案按照下面的方式工作。给定一个输人树，在这些树重写规则中的模板被用