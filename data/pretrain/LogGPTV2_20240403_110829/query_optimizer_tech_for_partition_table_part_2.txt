distinctvalues)atthelevelofindividualpartitions. Cardinalityes- theirjoinsthatwillnotcontributetothequeryresult. Ajoingraph
timation for appended partitions necessitates combination of per- iscreatedforthepartitionsbelongingtothejoiningtables,andin-
partitionstatistics.Wehavefoundthatestimationerrorsfromsuch ferencerulesareusedtodeterminetheemptyjoins[8]. Whileour
combinationareworseforaplanlikeQ P comparedtoQ P . worksharessomegoalswithdatalocalization,anumberofdiffer-
1 1 1 2
encesexist.Insteadofheuristicrewriterules,wepropose(provably
Prototyping and evaluation: All our techniques have been pro-
optimal)cost-basedoptimizationofpartitionedtables. Inparticu-
totyped in the PostgreSQL optimizer, and we report an extensive
lar,weaddresstheaccompanyingnontrivialchallengeofplanspace
evaluationbasedonthepopularTPC-Hbenchmark.
explosion—especiallyinthepresenceofhundredsofpartitionsper
2. RELATEDWORK table(e.g.,dailypartitionsforayear)—andtheneedtoincorporate
thenewoptimizationtechniquesintoindustry-strengthcost-based
Varioustablepartitioningschemesaswellastechniquestofinda
SQLoptimizers. Section8.7comparesourtechniquesempirically
goodpartitioningschemeautomaticallyhavebeenproposedaspart
withanadaptationofdatalocalizationtocentralizedDBMSs.
ofdatabasephysicaldesigntuning(e.g.,[2,18]). Incontrast,our
Thecost-basedoptimizationalgorithmswepresentareindepen-
goal is to fully exploit possible query optimization opportunities
dentofthephysicaljoinmethodssupportedbytheDBMS.Paral-
giventheexistinghorizontalpartitioningschemeinthedatabase.
lelDBMSssupportseveralpartition-awarejoinmethodsincluding
Partitioning in Centralized DBMSs: Commercial DBMS ven- collocated,directed,broadcast,andrepartitionedjoins[6].SCOPE
dors(e.g.,IBM,Microsoft,Oracle,andSybase)providesupportfor isasystemforlarge-scaledataanalysisthatusescost-basedopti-
differenttypesofpartitioning,includinghash,range,andlistparti- mizationtoselecttherepartitioningoftablesandintermediatere-
tioning,aswellassupportforhierarchical(multidimensional)par- sults[25]. Queryoptimizersinthesesystemsattempttominimize
titioning. However,theyimplementdifferentpartition-awareopti- datatransfercostsamongnodes,whichisorthogonaltoourwork.
mizationtechniques. Mostcommercialoptimizershaveexcellent
Dynamicpartitioning:Selectivity-basedpartitioning[17],content-
supportforper-tablepartitionpruning.Inadditiontooptimization-
based routing [7], and conditional plans [10] are techniques that
timepruning,systemslikeIBMDB2supportpruningofpartitions
enabledifferentexecutionplanstobeusedfordifferentsubsetsof
atplanexecutiontime,e.g.,toaccountforjoinpredicatesinindex-
theinputdata.Unlikeourwork,thesetechniquesfocusondynamic
nested-loopjoins[13]. Someoptimizersgenerateplanscontaining
partitioningof(unpartitioned)tablesanddatastreamsratherthan
n one-to-one partition-wise joins for any pair of tables R and S
exploitingthepropertiesofexistingpartitions. Easyincorporation
thatarepartitionedintothesamenumbernofpartitionswithone-
intowidely-usedSQLoptimizersisnotafocusof[7,10,17].
to-one correspondence between the partitions [15, 21]. For joins
whereonlytableRispartitioned,Oraclesupportsdynamicparti- Predicate optimization: Predicate move-around [14] is a query
tioningofS basedonR’spartitioning;effectivelycreatingaone- transformationtechniquethatmovespredicatesamongdifferentre-
to-onejoinbetweenthepartitions. lations, and possibly query blocks, to generate potentially better
plans.Magicsets[5]representacomplementarytechniquethatcan For example, the R.a = S.a join condition makes it possible to
generateauxiliarytablestobeusedasearlyfiltersinaplan. Both utilizetheR (S ∪S )childjoininplanQ P inFigure3.
2 22 23 1 2
techniquesareappliedintherewritephaseofqueryoptimization, Matching:Thisphaseusesthepartitioningconditionstodetermine
therebycomplementingourcost-basedoptimizationtechniques. efficiently which joins between individual child tables of R and
3. PROBLEMANDSOLUTIONOVERVIEW S canpotentiallygenerateoutputrecords,andtoprunetheempty
child joins. For R  S in our running example query Q , this
1
Our goal is to generate an efficient plan for a SQL query that
phaseoutputs{(R ,S ),(R ,S ),(R ,S ),(R ,S )}.
1 12 1 13 2 22 2 23
containsjoinsofpartitionedtables.Inthispaper,wefocusontables
Clustering:Productiondeploymentscancontaintableswithmany
that are partitioned horizontally based on conditions specified on
tenstohundredsofpartitionsthatleadtoalargenumberofjoins
oneormorepartitioningattributes(columns). Theconditionthat
betweenindividualchildtables.2 Toreducethejoinpathcreation
definesapartitionofatableisanexpressioninvolvinganynumber
overhead,wecarefullyclusterthechildtables;detailsareinSection
of binary subexpressions of the form Attr Op Val, connected by
5.ForRSinourrunningexample,thematchingphase’soutput
ANDorORlogicaloperators.Attrisanattributeinthetable,Valis
isclusteredsuchthatonlythetwochildjoinsR  (S ∪S )
aconstant,andOpisoneof{=,=,,≥}. 1 12 13
andR (S ∪S )areconsideredduringpathcreation.
JoinsinaSQLquerycanbeequiornonequijoins. Thejoined 2 22 23
tablescouldhavedifferentnumbersofpartitionsandcouldbepar- PathCreation:Thisphasecreatesandcostsjoinpathsforallchild
titionedonmultipleattributes(likeinFigure2). Furthermore,the joinsoutputbytheclusteringphase,aswellasthepaththatrepre-
partitions between joined tables need not have one-on-one corre- sentstheunionofthebestchild-joinpaths.Thispathwillbechosen
spondence with each other. For example, a table may have one forRSifitcostslowerthantheoneproducedbytheoptimizer
partitionpermonthwhileanothertablehasonepartitionperday. withoutourextensions.
Ourapproachforpartition-awarequeryoptimizationisbasedon Thenextthreesectionsgivethedetailsofthesephases. Section6
extendingbottom-upqueryoptimizers. Wewillgiveanoverview willalsodiscusshowourtechniquescanbeincorporatedintothe
of the well-known System R bottom-up query optimizer [19] on bottom-upoptimizationprocess.
which a number of current optimizers are based, followed by an
overviewoftheextensionswemake. 4. MATCHINGPHASE
Abottom-upoptimizerstartsbyoptimizingthesmallestexpres- Supposethebottom-upoptimizerisintheprocessofselecting
sionsinthequery,andthenusesthisinformationtoprogressively the join path for parent tables R and S with respective child ta-
optimizelargerexpressionsuntiltheoptimalphysicalplanforthe blesR 1-R r andS 1-S s. Thegoalofthematchingphaseistoiden-
fullqueryisfound. First,thebestaccesspath(e.g.,tableorindex tifyallpartition-wisejoinpairs(R i,S j)suchthatR i  S j can
scan) is found and retained for each table in the query. The best produceoutputtuplesasperthegivenpartitioningandjoincondi-
joinpathisthenfoundandretainedforeachpairofjoiningtables tions.Equivalently,thisalgorithmprunesout(fromallpossiblejoin
RandSinthequery. Thejoinpathconsistsofaphysicaljoinop- pairs)partition-wisejoinsthatcannotproduceanyresults. Anob-
erator(e.g.,hashormergejoin)andtheaccesspathsfoundearlier viousmatchingalgorithmwouldenumerateandcheckallther×s
forthetables. Next,thebestjoinpathisfoundandretainedforall possiblechildtablepairs.Indistributedqueryoptimization,thisal-
three-wayjoinsinthequery;andsoon. gorithmisimplementedbygeneratingajoingraphforthechildta-
Bottom-up optimizers pay special attention to physical proper- bles[8].Therealinefficiencyfromthisquadraticalgorithmcomes
ties(e.g.,sortorder)thataffecttheabilitytogeneratetheoptimal fromthefactthatitgetsinvokedfromscratchforeachdistinctjoin
planforanexpressionebycombiningoptimalplansforsubexpres- ofparenttablesconsideredthroughoutthebottom-upoptimization
sionsofe.Forexample,forRS,theSystemRoptimizerstores process.NotethatRandScanbebasetablesortheresultofinter-
theoptimaljoinpathforeachinterestingsortorder[19]ofRS mediatesubexpressions.
that can potentially reduce the plan cost of any larger expression Wedevelopedanefficientmatchingalgorithmthatbuilds,probes,
thatcontainsRS(e.g.,RSU). andreusesPartitionIndexTrees(PITs). Wewilldescribethisnew
data structure, and then explain how the matching algorithm uti-
Ourextensions: Considerthejoinpathselectioninabottom-up
lizes it to generate the partition-wise join pairs efficiently. PITs
optimizer for two partitioned tables R and S. R and S can be
applytorangeandlistpartitioningconditions. Section7describes
base tables or the result of intermediate subexpressions. Let the
howourtechniquescanbeextendedtohandlehashpartitioning.
respectivepartitionsbeR -R andS -S . Foreaseofexposition,
1 r 1 s
we call R and S the parent tables in the join, and each R i (S j) 4.1 PartitionIndexTrees
a child table. By default, the optimizer will consider a join path
ThecoreideabehindPartitionIndexTreesistoassociateeach
correspondingto(R ∪···∪R )(S ∪···∪S ),i.e.,aphysical
1 r 1 s child table with one or more intervals generated from the table’s
joinoperatorthattakesthebagunionsofthechildtablesasinput.
partitioning condition. An interval is specified as a Low to High
ThisapproachleadstoplanslikeQ P andQ P inFigure3.
1 1 2 1 range, whichcanbenumeric(e.g., (0,10]), date(e.g., [02-01-10,
Partition-awareoptimizationmustconsiderjoinsamongthechild
03-01-10)), or a single numeric or categorical value (e.g., [5,5],
tablesinordertogetefficientplanslikeQ P inFigure3; effec-
1 2 [url,url]). APITindexesallintervalsofallchildtablesforoneof
tively,pushingthejoinbelowtheunion(s).Joinsofthechildtables
the partitioning columns of a parent table. The PIT then enables
arecalledchildjoins.Whenthebottom-upoptimizerconsidersthe
efficientlookupoftheintervalsthatoverlapwithagivenprobein-
join of partitioned tables R and S, we extend its search space to
terval from the other table. The use of PITs provides two main
includeplansconsistingoftheunionofchildjoins. Thisprocess
advantages:
works in four phases: applicability testing, matching, clustering,
• Formostpracticalpartitioningandjoinconditions,buildingand
andpathcreation.
probing PITs has O(rlogr) complexity (for r partitions in a
Applicability testing: We first check whether the specified join table).Thememoryneedsareθ(r).
conditionbetweenRandSmatchthepartitioningconditionsonR
andSappropriately.Intuitively,efficientchildjoinscanbeutilized 2Weareawareofsuchdeploymentsinaleadingsocialnetworking
onlywhenthepartitioningcolumnsarepartofthejoinattributes. companyandforacommercialparallelDBMS.
Algorithmforperformingthematchingphase
Input:RelationR,RelationS,JoinCondition
Output:Allpartition-wisejoinpairs(Ri,Sj)thatcanproducejoinresults
Foreach(binaryjoinexpressioninJoinCondition){
Convertallpartitioningconditionstointervals;
BuildPITwithintervalsfrompartitionsofR;
ProbethePITwithintervalsfrompartitionsofS;
AdjustmatchingresultbasedonlogicalANDorORsemanticsofthe
JoinCondition;
}
Figure5:Matchingalgorithm
Figure 4: A partition index tree containing intervals for all
childtables(partitions)ofT fromFigure2
spondingtotheseoverlappingintervalscanhavetuplesjoining
withS ;outputtheidentifiedjoinpairs.
• MostPITsarebuiltonceandthenreusedmanytimesoverthe j
courseofthebottom-upoptimizationprocess(seeSection4.4). For S  T in our running example query, the PIT on T.a will
containtheintervals[0,10),[10,20)and[20,30),whichareasso-
Implementation: PIT,atabasiclevel,isanaugmentedred-black
ciatedwithpartitionsT ,T ,andT respectively(Figure2).When
tree [9]. The tree is ordered by the Low values of the intervals, 1 2 3
this PIT is probed with the interval [20,40) for child table S ,
andanextraannotationisaddedtoeverynoderecordingthemax- 22
theresultwillbetheinterval[20,30);indicatingthatonlyT will
imumHighvalue(denotedMax)acrossbothitssubtrees. Figure 3
join with S . Overall, this phase outputs {(S ,T ), (S ,T ),
4showsthePITcreatedonattributeT.abasedonthepartitioning 22 12 1 12 2
(S ,T ), (S ,T ), (S ,T ), (S ,T )}; the remaining possi-
conditionsofallchildtablesofT (seeFigure2).TheLowandMax 13 1 13 2 22 3 23 3
blechildjoinsarepruned.
values on each node are used during probing to efficiently guide
thesearchforfindingtheoverlappingintervals. Whentheinterval 4.3 SupportforComplexConditions
[20,40)isusedtoprobethePIT,fiveintervalsarechecked(high-
Before building and probing the PIT, we need to convert each
lightedinFigure4)andthetwooverlappingintervals[20,30)and
partitioningconditionintooneormoreintervals.Aconditioncould
[30,40)arereturned.
beanyexpressioninvolvinglogicalANDs,ORs,andbinaryexpres-
A number of nontrivial enhancements to PITs were needed to
sions. SubexpressionsthatareANDedtogetherareusedtobuilda
supportcomplexpartitioningconditionsthatcanariseinpractice.
singleinterval,whereassubexpressionsthatareORedtogetherwill
First,PITsneedsupportformultipletypesofintervals:open,closed,
producemultipleintervals. Forexample,supposethepartitioning
partially closed, one sided, and single values (e.g., (1,5), [1,5],
conditionis(R.a≥0ANDR.a 0ANDR.b > 5)will
requiredsupportfromPITstoefficientlyfindallintervalsinthetree
createtheinterval(0,∞),sinceonlyR.aappearsinthejoincon-
thataretotheleftortotherightoftheprobeinterval.
ditionsofqueryQ . Thecondition(R.a  10)will