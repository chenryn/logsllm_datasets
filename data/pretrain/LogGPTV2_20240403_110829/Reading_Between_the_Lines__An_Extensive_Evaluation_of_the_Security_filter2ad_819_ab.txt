### Experimental Design and Testbed Development

To conduct our experiments, we adopted a black-box approach, developing a testbed of various EPUB files. Upon loading, these EPUBs instruct the reading system to run embedded experiments. Given the high variability in reading systems—ranging from the platforms they run on to their functionalities and user interfaces—we determined that a fully automated evaluation would be infeasible while maintaining completeness. Therefore, we opted for a semi-automated approach where JavaScript code is used to render the results of the experiments within the reader or, if possible, to send these results to a remote web server. This minimizes manual effort, which is limited to copying the output from the EPUB reader into a file for further evaluation by our analysis framework.

An overview of our experimental design is provided in Figure 2. The various EPUB files that make up our testbed are manually loaded into the tested reading system. If remote communication is available, the results are automatically submitted to a web server, which stores them in a database. Alternatively, the results can be manually copied from the e-book.

### Evaluation of Primitives for Attack Vectors

Our goal is to evaluate the presence of certain "primitives" required to launch attacks. For example, to leak the contents of a local file, an attacker needs the ability to render content from local files, execute JavaScript, and send remote requests. Each primitive functionality is tested using a separate EPUB file, as some reading systems label EPUBs as corrupt when they attempt to execute unsupported functionality. Experiments that rely on specific functionality, such as JavaScript execution, can be omitted if that functionality is not present. The decision on which experiment to perform next is guided by our testbed protocol.

We used the official EPUB Validation Tool [59] provided by W3C to ensure conformance with the standard. To accommodate all EPUB reading systems, the embedded JavaScript uses ECMAScript 5 functionality, as ECMAScript 6 is not widely supported. All code required to construct this testbed has been publicly released [2].

### Features Evaluated

#### 1. JavaScript Execution

Most reading systems do not disclose whether JavaScript is supported, which is an optional feature in the EPUB specification. We empirically determine this support through three methods:
- Directly embedding code with a `<script>` tag in an XHTML file (inline).
- Referencing a separate JavaScript file within the EPUB by setting the `src` attribute of `<script>` tags (external).
- Referencing a JavaScript file hosted on an external web server (remote).

JavaScript support is crucial for interactive EPUBs and increases the threat surface, as it provides access to multiple APIs that can request local or remote resources and even access user media devices (e.g., MediaDevices API [45]).

#### 2. Local File System Access

The EPUB specification allows reading systems to support references to certain types of resources on the local file system, including audio, video, and fonts, as well as any resource retrievable by a script [1]. Reading systems that support this feature may grant EPUBs the ability to retrieve files from the user's operating system, potentially exposing sensitive information such as the presence of certain files or the user's account name.

We performed three sets of experiments to evaluate local file system access, attempting to access five types of resources: textual files (.html, .txt, .log, .bogus), images (.png, .jpg), audio (.mp3), video (.mp4), and fonts (.ttf). We also attempted to bypass restrictive direct access to the local file system by using relative symbolic links, which were successfully implemented on UNIX systems but not on Windows.

#### 3. Remote Communication

The EPUB specification allows reading systems to support references to online resources, implying that remote communication with a server is possible [1]. However, the standard advises developers to notify users of network traffic and ideally request user consent [2].

In this experiment, we investigated whether an EPUB can communicate with remote servers and whether the user is notified of the network traffic. We used various HTML tags and the XMLHttpRequest and Fetch API [43], [47] to initiate HTTP requests. If any of these requests reached the remote server, we labeled the EPUB reading system as supporting remote communication.

#### 4. Persistent Storage

Modern browsers provide mechanisms for websites to store data locally, such as cookies and the LocalStorage API [33]. EPUB reading systems might inherit this functionality to provide storage capabilities to EPUBs. The EPUB specification recommends treating all stored data as sensitive and preventing other documents from accessing it.

We first determined whether the EPUB reading system supports persistent storage through cookies and LocalStorage. We then evaluated whether the stored information persists after closing the EPUB reading system. To validate inter-session persistence, we opened the EPUB, closed the reading system, and reopened the same EPUB to check if any cookies or LocalStorage entries remained. We also checked compliance with the recommendation to isolate this data from other documents by using different EPUBs in subsequent sessions.

#### 5. Feature Access

Modern browsers allow websites to request access to features such as geolocation, microphone, and webcam [20], [51]. Since most EPUB reading systems rely on browser engines, this functionality is inherited. Access to these media devices could allow an EPUB to record the user's surroundings or determine the user's location, making it a tempting target for potential attackers.

We evaluated whether the GeoLocation and MediaDevices API are available in EPUB reading systems and whether user consent is required.

#### 6. URI Schemes

Uniform Resource Identifiers (URIs) are used to reference resources on the Internet. Custom URI schemes can instruct the browser to open applications upon activation, passing arguments in the URI. For example, the `mailto:` scheme opens the default mail application [29]. Modern browsers generally request confirmation from the user to initiate another application to prevent misuse.

We investigated whether EPUB reading systems support initiation of applications through URI schemes and whether the reader requests permission from the user for this action.

#### 7. Browser Engine Evaluation

Browser engines require regular patching to fix security bugs. Disclosed vulnerabilities could be exploited to target reading systems with outdated browser engines.

We explored browser engine use in EPUB reading systems by evaluating whether the embedded browser engine is outdated and insecure. We identified the embedded browser engine version by fingerprinting based on supported features, leveraging MDN’s browser compatibility dataset [44]. A browser engine is marked insecure if its age has surpassed at least three years and if any vulnerabilities are publicly disclosed.

#### 8. Background Activity

Mobile applications often retain operation for a short time after focus is lost to facilitate multitasking. However, to improve battery life and memory consumption, mobile platforms impose restrictions on background activity.

We evaluated whether EPUB reading systems continue to operate in the background and whether they follow the platform's restrictions.

### Evaluation Results

The evaluation results for EPUB reading systems on Windows are summarized in Table I. The table indicates the presence or absence of various features and functionalities across different reading systems, providing a comprehensive overview of their security and functional capabilities.

---

This optimized text provides a clearer, more structured, and professional presentation of the experimental design, testbed development, and evaluation of EPUB reading systems.