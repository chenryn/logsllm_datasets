# Fuzzing Android OMX

## Authors
- **Mingjian Zhou (周明建)**
  - Security Researcher at 360 C0RE Team
  - Focus: Android vulnerability research and exploit development
- **Chiachih Wu (吴家志, @chiachih_wu)**
  - Security Researcher at 360 C0RE Team
  - Focus: Android/Linux system security research
  - Founding member of C0RE Team (c0reteam.org)

## About C0RE Team
- A security-focused group established in mid-2015.
- Recent focus on the Android/Linux platform, aiming to discover zero-day vulnerabilities, develop proof-of-concept exploits, and explore possible defenses.

## Agenda
1. Introduction
2. Fuzzing Android OMX
3. Confirmed Vulnerabilities
4. Patterns of OMX Vulnerabilities

## Introduction

### About OMX
**What is OMX?**
- **Open Media Acceleration (OMX)**, also known as Open MAX, is a non-proprietary and royalty-free cross-platform set of C-language programming interfaces.
- It provides abstractions for routines particularly useful for audio, video, and still image processing.

**OMX in Android**
- **OMX Integration Layer (IL):** Provides a standardized way for Stagefright to recognize and use custom hardware-based multimedia codecs called components.
- **Vendor Plugins:** Vendors provide the OMX plugin, which links custom codec components to Stagefright.
- **Custom Codecs:** Must be implemented according to the OMX IL component standard.

**Why OMX?**
- Exposed via multiple attack vectors.
- Media native codes are often vulnerable.

## Fuzzing Android OMX

### Attack Surface & Flow
- **Stagefright:** The media framework in Android.
- **Media Player Service:** Manages media playback.
- **OMX IL:** Interfaces with vendor-provided codecs.
- **Kernel and Drivers:** Handle low-level operations.
- **Binder IPC:** Inter-process communication mechanism.

**OMX Interfaces (Defined in IOMX API)**
- `listNodes`: List names of all codec components.
- `allocateNode`: Create a codec component.
- `allocateBuffer`: Allocate input/output buffers for the codec.
- `useBuffer`: Provide a shared buffer to the server.
- `emptyBuffer`: Request or receive an empty input buffer, fill it with data, and send it to the codec for processing.
- `fillBuffer`: Request or receive a filled output buffer, consume its contents, and release it back to the codec.
- `sendCommand`: Send commands to codecs, such as changing state, port disable/enable.
- `getParameter`: Get codecs' parameters.
- `setParameter`: Set codecs' parameters.

**Fuzzing Flow**
1. Start
2. Get the default codec parameters.
3. Select a component from the node list.
4. Generate new parameters and set them.
5. Prepare input port buffers.
6. Prepare output port buffers.
7. Change the codec state from loaded to idle.
8. Change the codec state from idle to executing.
9. Empty/Fill buffers.
10. Free node.
11. End

## Confirmed Vulnerabilities

### Overview
- By July 7, 2016, 21 vulnerabilities were confirmed.
  - 16 vulnerabilities (15 high, 1 moderate) have been disclosed on Android Security Bulletins.
  - Remaining vulnerabilities will be disclosed in later bulletins.
- Almost all codecs implemented by Google and vendors (QualComm, Nvidia, MediaTek) are vulnerable.

### Detailed List
| No. | CVE ID | Android ID | Codec |
|-----|--------|------------|-------|
| 1   | CVE-2016-2450 | ANDROID-27569635 | Google SoftVPX encoder |
| 2   | CVE-2016-2451 | ANDROID-27597103 | Google SoftVPX decoder |
| 3   | CVE-2016-2452 | ANDROID-27662364 | Google SoftAMR decoder |
| 4   | CVE-2016-2477 | ANDROID-27251096 | Qcom libOmxVdec |
| 5   | CVE-2016-2478 | ANDROID-27475409 | Qcom libOmxVdec |
| 6   | CVE-2016-2479 | ANDROID-27532282 | Qcom libOmxVdec |
| 7   | CVE-2016-2480 | ANDROID-27532721 | Qcom libOmxVdec |
| 8   | CVE-2016-2481 | ANDROID-27532497 | Qcom libOmxVenc |
| 9   | CVE-2016-2482 | ANDROID-27661749 | Qcom libOmxVdec |
| 10  | CVE-2016-2483 | ANDROID-27662502 | Qcom libOmxVenc |
| 11  | CVE-2016-2484 | ANDROID-27793163 | Google SoftG711 decoder |
| 12  | CVE-2016-2485 | ANDROID-27793367 | Google SoftGSM decoder |
| 13  | CVE-2016-2486 | ANDROID-27793371 | Google SoftMP3 decoder |
| 14  | CVE-2016-3747 | ANDROID-27903498 | Qcom libOmxVenc |
| 15  | CVE-2016-3746 | ANDROID-27890802 | Qcom libOmxVdec |
| 16  | CVE-2016-3765 | ANDROID-28168413 | Google SoftMPEG2 decoder |
| 17  | CVE-2016-3844 | AndroidID-28299517 | Not disclosed yet |
| 18  | CVE-2016-3835 | AndroidID-28920116 | Not disclosed yet |
| 19  | CVE-2016-3825 | AndroidID-28816964 | Not disclosed yet |
| 20  | CVE-2016-3824 | AndroidID-28816827 | Not disclosed yet |
| 21  | CVE-2016-3823 | AndroidID-28815329 | Not disclosed yet |

## Patterns of Confirmed Vulnerabilities

### Mismatch between Android OMX Framework and Vendor Codecs
- **CVE-2016-2480:**
  - **Issue:** Mismatch in configuration size between Android OMX and vendor codec.
  - **Example:**
    - App requests a config with size 16.
    - Vendor codec allocates a larger buffer, leading to a potential overflow.

- **CVE-2016-2477:**
  - **Issue:** Inconsistent handling of extra configuration pointers.
  - **Example:**
    - App sets a pointer to 0x1234.
    - Vendor codec reads/writes using this pointer, leading to potential memory corruption.

### Time of Check to Time of Use (TOCTOU)
- **Examples:**
  - **CVE-2016-2479, CVE-2016-2481, CVE-2016-2482, CVE-2016-2483:**
    - **Issue:** Buffer count is checked but not synchronized before use.
    - **Example:**
      - App sets the buffer count to 8.
      - Later, the app changes the buffer count to 0x1234.
      - Accessing buffers with the incorrect count leads to out-of-bounds write and heap overflow.

### Race Condition
- **CVE-2016-3747:**
  - **Issue:** Lack of synchronization between threads.
  - **Example:**
    - App sends a command to free nodes.
    - Decoder thread and binder thread access the same buffers without proper synchronization, leading to race conditions.

### Invalid Input/Output Buffer Length
- **Examples:**
  - **CVE-2016-2450, CVE-2016-2451, CVE-2016-2452, CVE-2016-2484, CVE-2016-2485, CVE-2016-2486:**
    - **Issue:** Codecs do not check the buffer length.
    - **Example:**
      - App provides a buffer size of 256.
      - Codec writes more than 256 bytes, leading to buffer overflow.

## Conclusion
- **Android OMX is vulnerable:**
  - OMX interfaces and codecs are implemented separately by Google and vendors.
  - Media processing is complex.
- **Fuzzing combined with code auditing is helpful:**
  - Many codecs and parameters need to be tested.

## Any Questions?
- If you prefer to ask offline, contact us:
  - **Mingjian Zhou:**
    - Twitter/Weibo: @Mingjian_Zhou
    - Email: [PI:EMAIL]
  - **Chiachih Wu:**
    - Twitter: @chiachih_wu

## Appendix

### References
- **Android:**
  - [Media Processing](https://source.android.com/devices/media/)
  - [MediaCodec API](https://developer.android.com/reference/android/media/MediaCodec.html)
- **OMX:**
  - [Khronos Group - OpenMAX](https://www.khronos.org/openmax/)