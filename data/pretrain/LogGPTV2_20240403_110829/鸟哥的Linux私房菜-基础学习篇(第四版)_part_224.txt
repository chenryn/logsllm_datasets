动程序运行！ 那就来瞧瞧怎么作啰！
# 1. 先来全系统升级与安装所需要的编译程序与环境；
[root@study ~]# yum update
[root@study ~]# yum groupinstall "Development Tools"
[root@study ~]# yum install kernel-devel kernel-headers
# 2. 开始处理不许载入 nouveau 模块的动作！
[root@study ~]# vim /etc/modprobe.d/blacklist.conf # 这文件默认应该不存在
blacklist nouveau
options nouveau modeset=0
[root@study ~]# vim /etc/default/grub
GRUB_CMDLINE_LINUX="vconsole.keymap=us crashkernel=auto vconsole.font=latarcyrheb-sun16
rhgb quiet rd.driver.blacklist=nouveau nouveau.modeset=0"
# 在 GRUB_CMDLINE_LINUX 设置里面加上 rd.driver.blacklist=nouveau nouveau.modeset=0 的意思！
[root@study ~]# grub2-mkconfig -o /boot/grub2/grub.cfg
[root@study ~]# reboot
[root@study ~]# lsmod | grep nouveau
# 最后要没有出现任何模块才是对的！
安安装装驱驱动动程程序序
要完成上述的动作之后才能够处理下面的行为喔！（文件名依照你的环境去下载与执行）：
[root@study ~]# systemctl isolate multi-user.target
[root@study ~]# sh NVIDIA-Linux-x86_64-352.41.run
# 接下来会出现下面的数据，请自行参阅图示内容处理啰！
图23.3.1-1、Nvidia 官网驱动程序相关设置画面示意
上面说的是授权，你必须要接受 （Accept） 才能继续。
图23.3.1-2、Nvidia 官网驱动程序相关设置画面示意
要不要安装 32 位相容的函数库，鸟哥个人是认为还是装一下比较好啦！
图23.3.1-3、Nvidia 官网驱动程序相关设置画面示意
让这支安装程序主动的去修改 xorg.conf 吧！比较轻松愉快！就按下 Yes 即可。
最后按下 OK 就结束安装啰！这个时候如果你去查阅一下 /etc/X11/xorg.conf 的内容，会发现 Device 的 Driver 设置会成为 nvidia 喔！这
样就搞定啰！很简单吧！ 而且这个时候你的 /usr/lib64/xorg/modules/drivers 目录内，会多出一个 nvidia_drv.so 的驱动程序文件啰！ 同时这个
软件还提供了一支很有用的程序来帮助我们进行驱动程序升级喔！
[root@study ~]# nvidia-installer --update
# 可以进行驱动程序的升级检查喔！
好啰，那你就赶紧试看看新的显卡芯片的功能吧。而如果有什么疑问的话，查阅一下 /var/log/nvidia* 开头的登录文件看看吧！ ^_^
AMD 的显卡 （ATI） 型号也很多，不过因为 AMD 的显卡有提供成为 Open Source ，目前有个名为 ELrepo 的网站有主动提供 AMD 的
显卡驱动喔！ 而且是针对我们 CentOS 7 耶～好像还不赖～其实 ELrepo 也提供了 NVidia 的驱动程序啦！只是型号太多，所以鸟哥还是使用
NVidia 官网的数据来教学而已。
那如何取得 ELrepo 呢？这个网站主文件夹在下面，你可以自己瞧一瞧，至于安装 ELrepo 的 yum 配置文件方式如下：
http://elrepo.org
[root@study ~]# rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
[root@study ~]# rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm
[root@study ~]# yum clean all
[root@study ~]# yum --enablerepo elrepo-testing search fglrx
kmod-fglrx.x86_64 : fglrx kernel module（s）
fglrx-x11-drv.x86_64 : AMD's proprietary driver for ATI graphic cards # 这就对了！
fglrx-x11-drv-32bit.x86_64 : Compatibility 32-bit files for the 64-bit Proprietary AMD driver
fglrx-x11-drv-devel.x86_64 : Development files for AMD OpenGL X11 display driver.
[root@study ~]# yum --enablerepo elrepo-testing install fglrx-x11-drv
# 很快的！这样就安装好了 AMD 的显卡驱动程序了耶！超开心的吧！
安装完毕后，系统就会在 /usr/lib64/xorg/modules/drivers/ 里面出现 fglrx_drv.so 这个新的驱动程序啦！ 与 Nvidia 相同的， ATI 也提供一
支名为 aticonfig 的指令来帮忙设置 xorg.conf ，你可以直接输入“ aticonfig -v ”来看看处理的方式即可。然后你就可以重新启动 X 来看看新的驱
动程序功能啰！非常简单吧！
老实说，由于 Intel 针对 Linux 的图形接口驱动程序已经开放成为 Open source 了，所以理论上你不需要重新安装 Intel 的显卡驱动程序
的。除非你想要使用比默认的更新的驱动程序，那么才需要重新安装下面的驱动程序。 Intel 对 Linux 的显卡驱动程序已经有独立的网站在运
行，如下的链接就是安装的说明网页：
https://01.org/zh/linuxgraphics
其实 Intel 的显卡用的地方非常的多喔！因为只要是整合型主板芯片组，用的是 Intel 的芯片时， 通常都整合了 Intel 的显卡啰～鸟哥使用
的一组 cluster 用的就是 Intel 的芯片，所以啰～ 这家伙也是用的到的啦！
一般来说， Intel 的显卡都常常会使用 i910 等驱动程序，而不是这个较新的 intel 驱动程序！ 你可以察看一下你系统是否有存在这些文
件：
[root@study ~]# locate libdrm
/usr/lib64/libdrm.so.2
/usr/lib64/libdrm.so.2.4.0
/usr/lib64/libdrm_intel.so.1 # 就是这几个怪东西！
/usr/lib64/libdrm_intel.so.1.0.0
.....（下面省略）.....
[root@study ~]# locate intel | grep xorg
/usr/lib64/xorg/modules/drivers/intel_drv.so
# 上面这个就是 Intel 的显卡驱动程序了！
呼呼！我们的 CentOS 有提供新的 Intel 显卡驱动程序啦！所以不需要重新安装说～ 只是可能需要修改 xorg.conf 这个配置文件的内容。
基本上，要修改的地方有：
[root@study ~]# vi /etc/X11/xorg.conf
Section "Device"
Identifier "Videocard0"
Driver "intel" <==原本可能会是使用 i91x 喔
EndSection
Section "Module"
....（中间省略）....
Load "glx" <<====这这两两个个很很重重要要！！务务必必要要载载入入！！
Load "dri"
....（中间省略）....
EndSection
Section "DRI" <<====这这三三行行是是新新增增的的！！让让大大家家都都能能使使用用 DDRRII
Mode 0666 <<====基基本本上上，，就就是是权权限限的的设设置置
EndSection
如果一切顺利的话，接下来就是重新启动 X 啰～使用新的 Intel 驱动程序吧！加油啰！
Tips
老实说，CentOS 7 的 Xorg 自动侦测程序作的其实还不错，在鸟哥这次测试实体机器的系统上面安装的图形界面时，几乎 Xorg 都可以正确的
抓到驱动程序， 连双屏幕功能也都可以顺利的启用没问题。所以除非必要，否则您应该不需要重新设置 xorg.conf 喔！ ^_^
Unix Like 操作系统上面的 GUI 使用的是最初由 MIT 所开发的 X window system，在 1987 释出 X11 版，并于 1994 更改为 X11R6 ，故此
GUI 接口也被称为 X 或 X11
X window system 的 X server 最初由 XFree86 计划所开发，后来则由 Xorg 基金会所持续开发；
X window system 主要分为 X server 与 X client ，其中 X Server 在管理硬件，而 X Client 则是应用程序。
在运行上，X Client 应用程序会将所想要呈现的画面告知 X Server ，最终由 X server 来将结果通过他所管理的硬件绘制出来！
每一支 X client 都不知道对方的存在，必须要通过特殊的 X client ，称为 Window Manager 的， 来管理各窗口的重叠、移动、最小化等工
作。
若有需要登陆图形接口，有时会有 Display Manager 来管理这方面的动作
startx 可以侦测 X server / X client 的启动脚本，并调用 xinit 来分别执行；
X 可以启动多个，各个 X 显示的位置使用 -display 来处理，显示位置为 :0, :1...
Xorg 是一个 X server ，配置文件位于 /etc/X11/xorg.conf ，里面含有 Module, Files, Monitor, Device 等设置阶段。目前较新的设置中， 会
将额外的设置放置于 /etc/X11/xorg.conf.d/*.conf
（ 要看答案请将鼠标移动到“答：”下面的空白处，按下左键圈选空白处即可察看 ）
在 X 设置没问题的情况下，你在 Linux 主机如何取得窗口接口？
如果是在 multi-user.target 模式下，可以使用 startx 进入，至于 graphical.target ，则直接进入 tty1 即可使用 display manager 登陆 X Window
系统。
利用 startx 可以在 multi-user.target 的环境下进入 X Window 系统。请问 startx 的主要功能？
整个 X 窗口系统的重点在启动 X server 并载入 X client ，而执行 X server/X client 调用的任务为 xinit ，startx 只是一个较为亲和的脚本程序，
可以搜寻系统上面的 X server / X client 设置值， 以提供 xinit 来执行而已。
如何知道你系统当中 X 系统的版本与计划？
最简单可以利用 root 的身份下达 X -version 或 Xorg -version 即可知道！
要了解为何 X 系统可以允许不同硬件、主机、操作系统之间的沟通，需要知道 X server / X client 的相关知识。 请问 X Server / X client /
Window manager 的主要用途功能？
X Server 主要负责屏幕的绘制，以及周边输入设备如鼠标、键盘等数据的收集，并回报给 X Client ； X Client 主要负责数据的运算，收到来自 X
Server 的数据后，加以运算得到图形的数据，并回传给 X Server， 让 X server 自行绘制图形。至于 Window manager 是一个比较特殊的 X Client ，
他可以管理更多控制元素， 最重要的地方还是在于窗口的大小、重叠、移动等等的功能。
如何重新启动 X
最简单在 X Window System 下，直接按下 [alt]+[ctrl]+[backspace<--] 即可
也可以 systemctl isolate multi-usertarget 再 systemctl isolate graphical.target
也可以关闭 X 后，再 startx 启动等等。
试说明 ~/.xinitrc 这个文件的用途？
当我们要启动 X 时，必须要启动 X Client 软件端。这个 ~/.xinitrc 即是在客制化自己的 X Client ， 你可以在这个文件内输入你自己的 X Client 。
若无此文件，则默认以 /etc/X11/xinit/xinitrc 替代。
我在 CentOS 的系统中，默认使用 GNOME 登陆 X 。但我想要改以 KDE 登陆，该怎么办？
首先你必须要已经安装 KDE 环境 （参考前一章的 yum grouplist 功能），
然后可以借由修改 /etc/sysconfig/desktop 内的设置值即可。
但如果你不是 root 无法修订该文件时，亦可以在自己的主文件夹参考 /etc/X11/xinit/xinitrc 的内容自行制作 ~/.xinitrc 文件来修改！
X Server 的 port 默认开放在？
目前默认并不会启动 TCP 端口。不过如果经过设置，则 X port 默认开放在 port 6000 ，而且称此一显示为 :0
Linux 主机是否可以有两个以上的 X
是的！可以！第一个 X 通常在 tty1 ，第二个在 tty2 以后，依序类推。 第几个是以启动的顺序来定义，并非 :0 , :1 的意思～