::: section
::: titlepage
## []{#assembly_using-mysql_configuring-and-using-database-servers.html#proc_creating-a-replication-user-on-the-mysql-source-server_replicating-mysql}在 MySQL 源服务器上创建复制用户 {.title}
:::
您必须创建一个复制用户，并授予这个用户所需的复制流量的权限。此流程演示了如何创建具有适当权限的复制用户。仅在源服务器上执行这些步骤。
::: itemizedlist
**先决条件**
-   源服务器已安装并配置，如 [配置 MySQL
    源服务器](#assembly_using-mysql_configuring-and-using-database-servers.html#proc_configuring-a-mysql-source-server_replicating-mysql "配置 MySQL 源服务器"){.link}
    中所述。
:::
::: orderedlist
**流程**
1.  创建复制用户：
    ``` screen
    mysql> CREATE USER 'replication_user'@'replica_server_ip' IDENTIFIED WITH mysql_native_password BY 'password';
    ```
2.  授予用户复制权限：
    ``` screen
    mysql> GRANT REPLICATION SLAVE ON *.* TO 'replication_user'@'replica_server_ip';
    ```
3.  重新载入 [**MySQL**]{.strong} 数据库中的授权表：
    ``` screen
    mysql> FLUSH PRIVILEGES;
    ```
4.  将源服务器设置为只读状态：
    ``` screen
    mysql> SET @@GLOBAL.read_only = ON;
    ```
:::
:::
::: section
::: titlepage
## []{#assembly_using-mysql_configuring-and-using-database-servers.html#proc_connecting-the-replica-server-to-the-source-server_replicating-mysql}将副本服务器连接到源服务器 {.title}
:::
在 [**MySQL**]{.strong}
副本服务器上，您必须配置凭证和源服务器的地址。使用以下流程实现副本服务器。
::: itemizedlist
**先决条件**
-   源服务器已安装并配置，如 [配置 MySQL
    源服务器](#assembly_using-mysql_configuring-and-using-database-servers.html#proc_configuring-a-mysql-source-server_replicating-mysql "配置 MySQL 源服务器"){.link}
    中所述。
-   副本服务器已安装并配置，如 [配置 MySQL
    副本服务器](#assembly_using-mysql_configuring-and-using-database-servers.html#proc_configuring-a-mysql-replica-server_replicating-mysql "配置 MySQL 副本服务器"){.link}
    中所述。
-   您已创建了复制用户。请参阅 [在 MySQL
    源服务器上创建复制用户](#assembly_using-mysql_configuring-and-using-database-servers.html#proc_creating-a-replication-user-on-the-mysql-source-server_replicating-mysql "在 MySQL 源服务器上创建复制用户"){.link}。
:::
::: orderedlist
**流程**
1.  将副本服务器设置为只读状态：
    ``` screen
    mysql> SET @@GLOBAL.read_only = ON;
    ```
2.  配置复制源：
    ``` screen
    mysql> CHANGE REPLICATION SOURCE TO
        -> SOURCE_HOST='source_ip_address',
        -> SOURCE_USER='replication_user',
        -> SOURCE_PASSWORD='password',
        -> SOURCE_AUTO_POSITION=1;
    ```
3.  在 [**MySQL**]{.strong} 副本服务器中启动副本线程：
    ``` screen
    mysql> START REPLICA;
    ```
4.  在源和目标服务器上取消只读状态的设置：
    ``` screen
    mysql> SET @@GLOBAL.read_only = OFF;
    ```
5.  [*可选：*]{.emphasis}检查副本服务器的状态以进行调试：
    ``` screen
    mysql> SHOW REPLICA STATUS\G;
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    如果复制服务器启动或连接失败，您可以跳过
    `SHOW MASTER STATUS`{.literal}
    命令的输出中显示的二进制日志文件位置后的某些事件。例如，从定义的位置跳过第一个事件：
    ``` literallayout
    mysql> SET GLOBAL SQL_SLAVE_SKIP_COUNTER=1;
    ```
    尝试再次启动副本服务器。
    :::
6.  [*可选：*]{.emphasis}停止副本服务器中的副本线程：
    ``` screen
    mysql> STOP REPLICA;
    ```
:::
:::
::: section
::: titlepage
## []{#assembly_using-mysql_configuring-and-using-database-servers.html#_verification_steps}验证步骤 {.title}
:::
::: orderedlist
1.  在源服务器上创建一个示例数据库：
    ``` screen
    mysql> CREATE DATABASE test_db_name;
    ```
2.  验证 `test_db_name`{.literal} 数据库是否在副本服务器上进行复制。
3.  在源或副本服务器上执行以下命令，显示 [**MySQL**]{.strong}
    服务器的二进制日志文件的状态信息：
    ``` screen
    mysql> SHOW MASTER STATUS;
    ```
    `Executed_Gtid_Set`{.literal} 列，针对在源上执行的事务显示一组
    GTID，它不能为空。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    当在副本服务器上使用 `SHOW SLAVE STATUS`{.literal}
    时，`Executed_Gtid_Set`{.literal} 行中会显示相同的 GTID。
    :::
:::
:::
::: section
::: titlepage
## []{#assembly_using-mysql_configuring-and-using-database-servers.html#_additional_resources}其他资源 {.title}
:::
::: itemizedlist
-   [MySQL
    复制文档](https://dev.mysql.com/doc/refman/8.0/en/replication.html){.link}
-   [如何在 MySQL
    中设置复制](https://www.digitalocean.com/community/tutorials/how-to-set-up-replication-in-mysql){.link}
-   [带有全局事务标识符的复制](https://dev.mysql.com/doc/refman/8.0/en/replication-gtids.html){.link}
:::
:::
:::
:::
[]{#using-postgresql_configuring-and-using-database-servers.html}
::: chapter
::: titlepage
# []{#using-postgresql_configuring-and-using-database-servers.html#using-postgresql_configuring-and-using-database-servers}第 4 章 使用 PostgreSQL {.title}
:::
[**PostgreSQL**]{.strong} 服务器是一个基于 SQL
语言的开源、健壮且高度可扩展的数据库服务器。这部分描述了如何在 RHEL
系统上安装和配置 [**PostgreSQL**]{.strong}，如何备份
[**PostgreSQL**]{.strong} 数据，以及如何从早期的
[**PostgreSQL**]{.strong} 版本迁移。
::: section
::: titlepage
# []{#using-postgresql_configuring-and-using-database-servers.html#introduction-to-postgresql_using-postgresql}PostgreSQL 入门 {.title}
:::
[**PostgreSQL**]{.strong}
服务器提供了一个对象关系型数据库系统，它允许您管理大量的数据集和大量的并发用户。因此，[**PostgreSQL**]{.strong}
服务器可用于在集群中管理大量数据。
[**PostgreSQL**]{.strong}
服务器包含可用于确保数据完整性、构建容错环境及构建应用程序的功能。它允许用户使用用户自己的数据类型、自定义函数或来自不同编程语言的代码扩展数据库，而无需重新编译数据库。
这部分描述了：
::: itemizedlist
-   如何在[安装
    PostgreSQL](#using-postgresql_configuring-and-using-database-servers.html#installing-postgresql_using-postgresql "安装 PostgreSQL"){.link}
    的过程中安装 [**PostgreSQL**]{.strong}。
-   [PostgreSQL
    用户](#using-postgresql_configuring-and-using-database-servers.html#con_postgresql-users_using-postgresql "PostgreSQL 用户"){.link}
    中的用户、角色和特权.
-   在 [配置
    PostgreSQL](#using-postgresql_configuring-and-using-database-servers.html#configuring-postgresql_using-postgresql "配置 PostgreSQL"){.link}
    中如何调整 [**PostgreSQL**]{.strong} 配置。
-   如何在 [备份 PostgreSQL
    数据](#using-postgresql_configuring-and-using-database-servers.html#backing-up-postgresql-data_using-postgresql "备份 PostgreSQL 数据"){.link}
    的过程中备份您的数据库。
-   如何在 [迁移到 PostgreSQL 的 RHEL 9
    版本](#using-postgresql_configuring-and-using-database-servers.html#migrating-to-a-rhel-9-version-of-postgresql_using-postgresql "迁移到 RHEL 9 的 PostgreSQL 版本"){.link}
    的过程中迁移到 RHEL 9 版本的 [**PostgreSQL
    13**]{.strong}。迁移的一个先决条件是执行数据备份。
:::
:::
::: section
::: titlepage
# []{#using-postgresql_configuring-and-using-database-servers.html#installing-postgresql_using-postgresql}安装 PostgreSQL {.title}
:::
RHEL 9.0 提供 [**PostgreSQL 13**]{.strong} 作为此 Application Stream
的初始版本，可作为 RPM 软件包轻松安装。在以后的 RHEL 9
次版本中，将提供额外的 [**PostgreSQL**]{.strong}
版本作为带有较短生命周期的模块提供。
要安装 [**PostgreSQL**]{.strong}，请使用以下流程：
::: orderedlist
**流程**
1.  安装 [**PostgreSQL**]{.strong} 服务器软件包：
    ``` literallayout
    # dnf install postgresql-server
    ```
    `postgres`{.literal} 超级用户会自动创建。
2.  初始化数据库集群：
    ``` literallayout
    # postgresql-setup --initdb
    ```
    红帽建议将数据存储在默认的 `/var/lib/pgsql/data`{.literal} 目录中。
3.  启动 `postgresql`{.literal} 服务：
    ``` literallayout
    # systemctl start postgresql.service
    ```
4.  启用 `postgresql`{.literal} 服务，以便在引导时启动：
    ``` literallayout
    # systemctl enable postgresql.service
    ```
:::
:::
::: section
::: titlepage
# []{#using-postgresql_configuring-and-using-database-servers.html#con_postgresql-users_using-postgresql}PostgreSQL 用户 {.title}
:::
PostgreSQL 用户为以下类型：
::: itemizedlist
-   `postgres`{.literal} UNIX 系统用户 - 应该仅用于运行
    [**PostgreSQL**]{.strong} 服务器和客户端应用程序，如
    `pg_dump`{.literal}。不要将 `postgres`{.literal} 系统用户用于
    [**PostgreSQL**]{.strong}
    管理的任何交互式工作，如数据库创建和用户管理。
-   数据库超级用户 - 默认的 `postgres`{.literal}
    [**PostgreSQL**]{.strong} 超级用户与 `postgres`{.literal}
    系统用户无关。您可以在 `pg_hba.conf`{.literal} 文件中限制
    `postgres`{.literal}
    超级用户的权限，否则没有其他权限限制。您也可以创建其他数据库超级用户。
-   具有特定数据库访问权限的角色：
    ::: itemizedlist
    -   数据库用户 - 默认具有登录权限
    -   一组用户 - 启用整个组的管理权限
    :::
:::
角色可以拥有数据库对象（如表和函数），并且可以使用 SQL
命令将对象特权分配给其他角色。
标准数据库管理特权包括
`SELECT`{.literal}、`INSERT`{.literal}、`UPDATE`{.literal}、`DELETE`{.literal}、`TRUNCATE`{.literal}、`REFERENCES`{.literal}、`TRIGGER`{.literal}、`CREATE`{.literal}、`CONNECT`{.literal}、`TEMPORARY`{.literal}、`EXECUTE`{.literal}
和 `USAGE`{.literal}。
角色属性是特殊的特权，如
`LOGIN`{.literal}、`SUPERUSER`{.literal}、`CREATEDB`{.literal} 和
`CREATEROLE`{.literal}。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
红帽建议以不是超级用户的角色身份执行大部分任务。常见的做法是创建一个具有
`CREATEDB`{.literal} 和 `CREATEROLE`{.literal}
特权的角色，并将此角色用于所有数据库和角色的日常管理。
:::
::: itemizedlist
**其他资源**
-   [PostgreSQL
    数据库角色](https://www.postgresql.org/docs/current/user-manag.html){.link}。
-   [PostgreSQL
    特权](https://www.postgresql.org/docs/current/ddl-priv.html){.link}。
:::
:::
::: section
::: titlepage
# []{#using-postgresql_configuring-and-using-database-servers.html#configuring-postgresql_using-postgresql}配置 PostgreSQL {.title}
:::
在 [**PostgreSQL**]{.strong}
数据库中，所有数据和配置文件都存储在一个名为database
cluster的目录中。红帽建议将所有数据存储在默认的
`/var/lib/pgsql/data/`{.literal} 目录中。