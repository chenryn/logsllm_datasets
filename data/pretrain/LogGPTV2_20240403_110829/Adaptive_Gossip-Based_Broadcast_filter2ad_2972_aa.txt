title:Adaptive Gossip-Based Broadcast
author:Lu&apos;ıs E. T. Rodrigues and
Sidath B. Handurukande and
Jos&apos;e Pereira and
Rachid Guerraoui and
Anne-Marie Kermarrec
Adaptive Gossip-Based Broadcast
L. Rodrigues
U. de Lisboa
S. Handurukande
EPFL
PI:EMAIL
PI:EMAILﬂ.ch
J. Pereira
U. do Minho
PI:EMAIL
R. Guerraoui
EPFL
A.-M. Kermarrec
Microsoft Research
rachid.guerraoui@epﬂ.ch
PI:EMAIL
Abstract
This paper presents a novel adaptation mechanism that
allows every node of a gossip-based broadcast algorithm
to adjust the rate of message emission 1) to the amount
of resources available to the nodes within the same broad-
cast group and 2) to the global level of congestion in the
system. The adaptation mechanism can be applied to all
gossip-based broadcast algorithms we know of and makes
their use more realistic in practical situations where nodes
have limited resources whose quantity changes dynamically
with time without decreasing the reliability.
1 Introduction
Gossip-based broadcast algorithms [1], also called “epi-
demic” or “probabilistic” broadcast algorithms, do have in-
herent scalability properties that make them very appeal-
ing for disseminating information among a large number of
nodes. The underlying idea is very intuitive: every node
that receives a message, buffers it, and then forwards it (i.e.,
gossips it) a certain number of times, each time to a ran-
domly selected subset of processes.
Nevertheless, the applicability of gossip-based broadcast
algorithms in a practical setting is limited by their assump-
tion that enough buffering resources exist on all nodes. In-
deed, in order to operate in a reliable manner, the nodes par-
ticipating in the broadcast must be equipped with enough
resources to ensure that messages are gossiped a sufﬁcient
number of times. If a node does not have enough resources,
it may drop a large number of messages that are being for-
warded. If several nodes do not have enough resources, reli-
ability might end up being drastically impacted. One might
consider calibrating, a priori, the transmission rate of the
senders according to the resources available at every node.
The static ﬂavor of this naive solution makes it unrealistic
in a practical scheme, as we explain below.
A large scale publish-subscribe application illustrates the
above problem. Nodes may assume one of two roles: pub-
lishers which broadcast information and subscribers which
register interest in receiving certain types of information.1
Gossip-based broadcast is typically used here to dissemi-
nate the information from the publishers to the interested
subscribers. Since different nodes are interested in different
types of information, avoiding the delivery of unwanted in-
formation usually goes through mapping different types of
information to different broadcast groups. Any node may
belong to more than one broadcast group, and this number
varies as nodes dynamically subscribe to new types or can-
cel previous subscriptions. Given that the resources at each
node are limited, every node has to dynamically divide the
available resources among the groups it belongs to.
Gossip-based broadcast algorithms must be able here to
adapt to situations where each node has different and vary-
ing amounts of resources. To our knowledge, none of the
gossip-based algorithms we knew [1, 3, 4, 9, 8, 6] of in-
cludes any form of dynamic feedback mechanism. They
typically discard messages in overload conditions, without
providing to the source (the sender) any feedback regarding
the reliability of the operation. In fact, even with the simple
setting of a single broadcast group with persistent and uni-
form buffer resources at each node, the message emission
rate might vary, in particular with several senders. The rate
of new messages in the system is unpredictable and depends
on the sum of the individual emission rates. It is non trivial
to estimate the global congestion and control the message
emission at each sender accordingly. As we show in the pa-
per, without such a control scheme, the reliability decreases
signiﬁcantly.
This paper proposes a novel adaptive mechanism for
gossip-based broadcast algorithms. The idea is to dissemi-
nate and gather information about the resources available in
a broadcast group such that every sender can adjust its emis-
sion accordingly. The challenge consists in ensuring that
senders are able to perceive the quality of the algorithm op-
This work has been partially supported by the FCT project RUMOR
(POSI/ 40088/ CHS/ 2001), Microsoft Research Grants (2001-39,2001-47)
and Swiss National Science Foundation.
1Using one of the several paradigms proposed for this sort of systems,
such as subject-based [12], content-based [13] or type-based [2] subscrip-
tions.
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 06:57:40 UTC from IEEE Xplore.  Restrictions apply. 
eration, in terms of reliability with the current system con-
ﬁguration, without interacting explicitly with other nodes of
the system; such interaction would hamper the distinctive
scalability of gossip-based broadcast algorithms.
The intuitive idea underlying our mechanism is the fol-
lowing. We periodically evaluate the available resources in
every broadcast group.
In each period, nodes gossip the
minimum buffer size in the group for that period. They do
so by maintaining and gossiping the minimum of their own
buffer size with the value received in gossip messages for
that period. The value computed at the end of a period is
used as the estimation for that period and maintained for a
predeﬁned number of periods . Then, during the normal
operation of the gossiping protocol, each sender computes
the average age of messages stored locally that would be
discarded if the local buffer was the smallest in the group.
The age of a message is the number of times it has been
forwarded from one node to another and is directly related
with the level of dissemination among nodes. If the average
age of messages that would be discarded by members with
low buffers is lower than the required age to ensure reliabil-
ity, the sender decreases its transmission rate. If the average
age of discarded messages is higher than needed, then the
sender is allowed to increase its transmission rate.
This adaptation mechanism is highly scalable as it does
not require nodes to maintain information about every other
node in the system.
It also does not require additional
messages to be exchanged: it relies on a small amount of
control information that is included in the header of nor-
mal data messages. The mechanism takes into account the
dynamic nature of the system and continuously adapts to
changing operational conditions. As conveyed by our per-
formance measures, without such a mechanism, the reliabil-
ity of message dissemination in a large scale gossip-based
setting can hardly be sufﬁcient in a practical setting. To
evaluate the reliability beneﬁts of using our mechanism, we
consider a speciﬁc gossip-based algorithm but the idea is
general and can be similarly applied to other gossip-based
algorithms [1, 3, 4, 9, 8, 6], as we discuss in Section 5.
The rest of the paper is organized as follows. Section 2
presents a brief overview of existing gossip-based broadcast
algorithms and discusses the limitations of these algorithm
when nodes have limited, heterogeneous and dynamic re-
sources. Section 3 introduces our adaptive algorithm and
Section 4 presents its experimental evaluation. Section 5
gives some related work. Section 6 concludes the paper.
2 Background
In gossip-based broadcast algorithms, messages are not
disseminated in a deterministic manner. Instead, each group
member participates in message propagation by forwarding
received messages to a random subset of other group mem-
bers (i.e., gossiping). Different variants of these algorithms
exist [1, 3, 11] and differ in the concrete strategies used to
select gossip targets and to bound the number of times each
message is forwarded. It can be shown that, given adequate
resources, gossiping can be conﬁgured to obtain high relia-
bility such that a message is delivered to all processes with
a high probability. Basically, both the probability that (i) a
message is delivered to some but not all processes and that
(ii) a message that is broadcast by a correct process is never
delivered by any process, can be made as small as required,
providing almost as much reliability as any deterministic
approach.
The decentralized nature of gossip-based dissemination
results in algorithms that are scalable to a large number of
nodes without overloading any member of the group. The
algorithms sustain stable high throughput in large groups,
despite node failures, performance perturbations, and lost
packets. However, the probabilistic reliability guarantees
stand on the assumption that enough buffering resources are
available and that message loss in the network is indepen-
dently distributed. If not, reliability guarantees can be sig-
niﬁcantly compromised.
2.1 Gossip-based Broadcast
Although our discussion and proposals apply to gossip-
based algorithms in general, we use here a concrete algo-
rithm, to motivate the need for the adaptation and to illus-
trate our idea. We have selected the one of [3] which is
depicted in Figure 1 and works as follows.
Received events are buffered in (cid:0)(cid:1)(cid:0) buffer. Periodi-
cally, at every interval (cid:5) , a node forwards all stored events
to a subset with size f of randomly selected nodes. The
gossip period (cid:5) , fanout f and buffer size (cid:0)(cid:0)(cid:1)(cid:0)(cid:0) are con-
ﬁguration parameters of the algorithm2. Upon receiving a
gossip message, a node buffers each newly received event in
(cid:0)(cid:1)(cid:0) buffer and locally delivers it. Duplicates are avoided
by keeping a set of identiﬁers of already received events in
(cid:0)(cid:1)(cid:0) (cid:7). To prevent exhaustion of local resources, the size
of (cid:0)(cid:1)(cid:0) is kept bound by some constant (cid:0)(cid:0)(cid:1)(cid:0)(cid:0) that
is a conﬁguration parameter (in the original algorithm, re-
sources allocated to the algorithm are constant). Therefore,
if (cid:0)(cid:1)(cid:0) is full, some old events need to be discarded to
make room for new events. In this case, the age of the event
is used as the criteria to select which event to discard. Age
represents how many times a message has been forwarded
among nodes [7].
To achieve the desired reliability, each member of the
group should be able to store the events it receives for
sufﬁciently long to be retransmitted. The size of avail-
able buffers indirectly determines the number of times each
2The selection of values for these parameters is out of the scope of this
paper and addressed in [3].
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 06:57:40 UTC from IEEE Xplore.  Restrictions apply. 
Initially:
events, eventIds = (cid:0)
every (cid:0) ms:
(cid:1)Update ages(cid:2)
for all e (cid:3) events do
e.age (cid:4) e.age (cid:1)
for all e (cid:3) events: e.age (cid:1) k do
events (cid:4) events  (cid:1)e(cid:2)
(cid:1)Gossip(cid:2)
gossip.events (cid:4) events
Choose (cid:2) random members target(cid:0) (cid:3) (cid:3) (cid:3) target(cid:0)
for all (cid:4) (cid:3) (cid:2)(cid:1)(cid:3)(cid:3)(cid:2) (cid:3) do
SEND(target(cid:1),gossip)
upon RECEIVE(gossip):
(cid:1)Update events and ages(cid:2)
for all e (cid:3) gossip.events
if e.id (cid:6)(cid:3) eventIds then
events (cid:4) events (cid:7) (cid:1)e(cid:2)
eventIds (cid:4) eventIds (cid:7) (cid:1)e.id(cid:2)
DELIVER(e)
if e(cid:0) (cid:3) events such that
e.id = e(cid:0).id and e(cid:0).age(cid:5)e.age then
e(cid:0).age (cid:4) e.age
(cid:1)Garbage collect eventIds(cid:2)
while (cid:8)eventIds(cid:8) (cid:1) (cid:8)eventIds(cid:8) do
remove oldest element from eventIds
(cid:1)Garbage collect events(cid:2)
while (cid:8)events(cid:8) (cid:1) (cid:8)events(cid:8) do
remove oldest element from events
Figure 1. Gossip-based broadcast algorithm.
event is included in a gossip message before being garbage
collected and thus becomes a key factor in determining the
maximum rate that can be reliably transmitted. Figure 2
shows how the reliability degradation occurs as the mes-
sage rate increases (experimental conditions are described
in detail in Section 4). Given a static conﬁguration of re-
sources, as the message emission rate increases the reliabil-
ity decreases signiﬁcantly. The loss of reliability is the con-
sequence of messages being dropped sooner. In fact, from
approximately 8.5 hops at 10 msg/s, the average age of mes-
sages dropped quickly falls to 3.7 at 30 msg/s and 2.7 hops
at 60 msg/s. Correct operation of the algorithm thus requires
that a process broadcasts messages only up to a safe rate [1].
This can be done by limiting messages broadcast by each
process. Figure 3 illustrates a token-bucket interface that
can be used to bound the load imposed on the system.
2.2 Dynamic Flow Control
In systems where the number of nodes is ﬁxed and re-
sources (buffer sizes) are statically allocated, it is possible
)
%
i
(
s
r
e
v
e
c
e
r
f
o
%
5
9
>
o
t
s
e
g
a
s
s
e
M
100
80
60
40
20
0
10
20
30
40
50
60
Input rate (msg/s)
Figure 2. Reliability degradation.
Initially:
tokens = max
every (cid:1)(cid:6)rate ms:
(cid:1)Restore tokens(cid:2)
if tokens (cid:5) max then
tokens (cid:4) tokens  1
upon BROADCAST(event):
(cid:1)Wait for available tokens(cid:2)
wait until tokens (cid:1) 0
tokens (cid:4) tokens   1
(cid:1)Buffer event(cid:2)
events (cid:4) events (cid:7) (cid:1)e(cid:2)
eventIds (cid:4) eventIds (cid:7) (cid:1)e.id(cid:2)
Figure 3. Bounding the input rate.
to conﬁgure the application to prevent its load from exceed-
ing the system capacity. However, this approach is not pos-
sible when resources change dynamically. Even if resources
are ﬁxed, a static conﬁguration of the admissible load is not