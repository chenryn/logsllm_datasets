When building Python 2.6 from source on Debian Lenny, you can follow one of the two recommended approaches to ensure that your installation does not conflict with existing packages and is accessible in the default search path for Bash. 

### Option 1: Build and Install a .deb Package
- **Step 1:** Follow the standard procedure to build Python 2.6 from source.
  ```sh
  ./configure
  make
  make altinstall
  ```
- **Step 2:** Create a .deb package using tools like `checkinstall` or `dpkg-buildpackage`.
- **Step 3:** Install the .deb package using `dpkg`.
  ```sh
  sudo dpkg -i <your-python2.6-package.deb>
  ```

This method will place the Python 2.6 interpreter in the usual locations, such as `/usr/bin/python2.6`, and the package manager will be aware of it.

### Option 2: Install from Source into `/usr/local`
- **Step 1:** Configure the build to install Python 2.6 into `/usr/local`.
  ```sh
  ./configure --prefix=/usr/local
  make
  sudo make altinstall
  ```

This approach ensures that the new Python 2.6 installation is confined to the `/usr/local` directory, which is typically used for manually installed software. This way, it won't interfere with system-managed packages.

### Recommendations
- **Avoid Manual Installation in System Directories:** It is generally a bad practice to manually install files in system directories (e.g., `/usr/bin`) without using the package manager. This can lead to conflicts and make it difficult to manage updates and dependencies.
- **Use `/usr/local` for Manual Installs:** If you build and install Python 2.6 by hand, use the `/usr/local` directory. This keeps your custom installations separate from system-managed packages.

Since you are working in a VM, you have the flexibility to experiment and rebuild if needed. Both methods will allow you to add the new Python 2.6 interpreter to the default search path for Bash.