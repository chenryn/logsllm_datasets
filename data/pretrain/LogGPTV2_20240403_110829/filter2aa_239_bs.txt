含义
示例
匹配的示例
^
输入文本的开头
^B
B，但只能是文本中的第一
个字符
输入文本的结尾
X$
X，但只能是文本中的最后
一个字符
.
除了换行符（\n）以外的所
有单个字符
i.ation
isation、ization
*
可以重复0次或多次的前导
字符
ra*t
rt、rat、raat和raaat等
+
可以重复1次或多次的前导
字符
ra+t
rat、raat和raaat等（但不能
是rt）
？
可以重复0次或1次的前导字
符
ra?t
只有rt和rat匹配
\s
任何空白字符
\sa
[space]a、\ta、\na（\t和\n与
C#中的\t和\n含义相同）
\S
任何不是空白的字符
\SF
aF、rF、cF，但不能是\tf
\b
字边界
ion\b
以ion结尾的任何字
\B
不是字边界的任意位置
\BX\B
字中间的任何X
如果要搜索其中一个元字符，就可以通过带有反斜杠的相应转义字符来表示。例
如，“.”（一个句点）表示除了换行字符以外的任何单个字符，而“\.”表示一个点。
可以把替换的字符放在方括号中，请求匹配包含这些字符。例如，[1|c]表示字符可以
是1或c。如果要搜索map或man，就可以使用序列ma[n|p]。在方括号中，也可以指定一个
范围，例如，[a-z]表示所有的小写字母，[A-E]表示A～E之间的所有大写字母（包括字母
A和E）, [0-9]表示一个数字。如果要搜索一个整数（该序列只包含0～9的字符），就可以
编写[0-9]+。
  注意： 使用“+”字符表示至少要有这样一个数字，但可以有多个数字，所以
9、83和854等都是匹配的。
^用在方括号中时有不同的含义。在方括号外部使用它，就标记输入文本的开头。在
方括号内使用它，表示除了^之后的字符之外的任意字符。
10.3.3 显示结果
本节编写一个示例RegularExpressionsPlayaround，看看正则表达式的工作方式。
该示例的核心是一个方法WriteMatches（），它把MatchCollection中的所有匹配以比
较详细的格式显示出来。对于每个匹配结果，该方法都会显示匹配在输入字符串中的索
引、匹配的字符串和一个略长的字符串，其中包含匹配结果和输入文本中至多10个外围字
符，其中至多有5个字符放在匹配结果的前面，至多5个字符放在匹配结果的后面（如果匹
配结果的位置在输入文本的开头或结尾5个字符内，则结果中匹配字符串前后的字符就会
少于5个）。换言之，在RegularExpressionsPlayaround示例开始时，如果要匹配的单词是
applications，靠近输入文本开头的匹配结果应是“web applications imme”，匹配结果的前后
各有5个字符，但位于输入文本的最后一个字immediately上的匹配结果就应是" 
ions
immediately " ——匹配结果的后面只有一个字符，因为在该字符的后面是字符串的结尾。
下面这个长字符串可以更清楚地表明正则表达式是在什么地方查找到匹配结果的：
    public static void WriteMatches(string text, MatchCollection matches)
    {
      WriteLine($"Original text was: \n\n{text}\n");
      WriteLine($"No. of matches: {matches.Count}");
      foreach (Match nextMatch in matches)
      {
        int index = nextMatch.Index;
        string result = nextMatch.ToString();
        int charsBefore = (index （）方法：
    public static void Main()
    {
      Find2();
      ReadLine();
    }
这段代码还需要使用RegularExpressions名称空间：
    using System;
    using System.Text.RegularExpressions;
运行带有Find 2（）方法的示例，得到如下所示的结果：
    No. of matches: 2
    Index: 243,    String: additions,    .5.1 additions, as
    Index: 469,    String: applications,  web applications imme
10.3.4 匹配、组和捕获
正则表达式的一个优秀特性是可以把字符组合起来，其工作方式与C#中的复合语句
一样。在C#中，可以把任意数量的语句放在花括号中，把它们组合在一起，其结果视为
复合语句。在正则表达式模式中，也可以把任何字符组合起来（包括元字符和转义序
列），像处理单个字符那样处理它们。唯一的区别是要使用圆括号而不是花括号，得到的
序列称为一组。
例如，模式（an）+定位任意重复出现的序列an。限定符“+”只应用于它前面的一个字
符，但因为我们把字符组合起来了，所以它现在把重复的an作为一个单元来对待。这意味
着，如果（an）+应用到输入文本“bananas came to Europe late in the annals of history”上，
就会从bananas中识别出anan。另一方面，如果使用an+，则程序将从annals中选择ann，从
bananas中选择出两个分开的an序列。表达式（an）+可以识别出an、anan、ananan等，而
表达式an+可以识别出an、ann、annn等。
  注意： 在上面的示例中，为什么（an）+从banana中选择的是anan，而没有把
其中一个an作为一个匹配结果？因为匹配结果是不能重叠的。如果有可能重叠，在默
认情况下就选择最长的匹配序列。
但是，组的功能要比这强大得多。在默认情况下，把模式的一部分组合为一个组时，
就要求正则表达式引擎按照该组来匹配，或按照整个模式来匹配。换言之，可以把组当成
一个要匹配和返回的模式。如果要把字符串分解为各个部分，这种模式就非常有效。
例如，URI的格式是://:，其中端口是可选的。它的一个示
例是http://www.wrox.com:80。假定要从一个URI中提取协议、地址和端口，而且不考虑
URI的后面是否紧跟着空白（但没有标点符号），那么可以使用下面的表达式：
    \b(https?)(://)([.\w]+)([\s:]([\d]{2,5})?)\b
该表达式的工作方式如下：首先，前导\b序列和结尾\b序列确保只需要考虑完全是字
的文本部分。在这个文本部分中，第一个组（https?）会识别http或https协议。S字符后面
的？指定这个字符可能出现0次或1次，因此找到http和https。括号表示把协议存储为一
组。
第二个组是一个简单的（://）。它仅指定字符：//。
第三个组（[.\w]+）比较有趣。这个组包含一个放在括号里的表达式，该表达式要么
是句点字符（.），要么是用\w指定的任意字母数字字符。这些字符可以重复任意多次，
因此匹配www.wrox.com。
第四组（[\s:]（[\d]{2,5}）?）是一个较长的表达式，包含一个内部组。在该组中，第
一个放在括号中的表达式允许通过\ s指定空白字符或冒号。内部组用[\d]指定一个数字。
表达式{ 2, 5 }指定前面的字符（数字）允许至少出现两次但不超过5次。数字的完整表达
式用内部组后面的？指定允许出现0次或1次。使这个组变成可选非常重要，因为端口号并
不总是在URI中指定；事实上，通常不指定它。
下面定义一个字符串来运行这个表达式（代码文件RegularExpressionsPlayground/
Program.cs）：
    string line = "Hey, I've just found this amazing URI at " +
        "http:// what was it -oh yes https://www.wrox.com or " +
        "http://www.wrox.com:80";
与这个表达式匹配的代码使用类似于之前的Matches方法。区别是在Match.Groups属
性内迭代所有的Group对象，在控制台上输出每组得到的索引和值：
    string pattern = @"\b(https?)(://)([.\w]+)([\s:]([\d]{2,4})?)\b";
    var r = new Regex(pattern);
    MatchCollection mc = r.Matches(line);
    foreach (Match m in mc)
    {
      WriteLine($"Match: {m}");
      foreach (Group g in m.Groups)
      {
        if (g.Success)
        {
        WriteLine($"group index: {g.Index}, value: {g.Value}");
        }
      }
      WriteLine();
    }
运行程序，得到如下组和值：
    Match https://www.wrox.com
    group index 70, value: https://www.wrox.com
    group index 70, value: https
    group index 75, value: ://
    group index 78, value: www.wrox.com
    group index 90, value:
    Match http://www.wrox.com:80
    group index 94, value http://www.wrox.com:80
    group index 94, value: http
    group index 98, value: ://
    group index 101, value: www.wrox.com
    group index 113, value: :80
    group index 114, value: 80
之后，就匹配文本中的URI, URI的不同部分得到了很好的分组。组还提供了更多的功
能。一些组，如协议和地址之间的分隔，可以忽略，并且组也可以命名。
修改正则表达式，命名每个组，忽略一些名称。在组的开头指定？，就可给
组命名。例如，协议、地址和端口的正则表达式组就采用相应的名称。在组的开头使
用？：来忽略该组。不要迷惑于组内的？::/ /，它表示搜索：/ /，组本身因为前面的？：
而被忽略：
    string pattern = @"\b(?https?)(?:://)" +
        @"(?[.\w]+)([\s:](?[\d]{2,4})?)\b";
为了从正则表达式中获得组，Regex类定义了GetGroupNames方法。在下面的代码段
中，每个匹配都使用所有的组名，使用Groups属性和索引器输出组名和值：
    Regex r = new Regex(pattern, RegexOptions.ExplicitCapture);
    MatchCollection mc = r.Matches(line);
    foreach (Match m in mc)
    {
      WriteLine($"match: {m} at {m.Index}");
      foreach (var groupName in r.GetGroupNames())
      {
        WriteLine($"match for {groupName}: {m.Groups[groupName].Value}");
      }
    }
运行程序，就可以看到组名及其值：
    match: https://www.wrox.com  at 70
    match for 0: https://www.wrox.com
    match for protocol: https
    match for address: www.wrox.com
    match for port:
    match: http://www.wrox.com:80 at 94
    match for 0: http://www.wrox.com:80
    match for protocol: http
    match for address: www.wrox.com
    match for port: 80
10.4 小结
在使用.NET 
Framework时，可用的数据类型相当多。在应用程序（特别是关注数据
提交和检索的应用程序）中，最常用的一种类型就是String数据类型。String非常重要，这
也是本书用一整章的篇幅介绍如何在应用程序中使用和处理String数据类型的原因。
过去在使用字符串时，常常需要通过连接来分解字符串。而在.NET 
Framework中，
可以使用StringBuilder类完成许多这类任务，而且性能更好。
字符串的另一个特点是新的C# 6字符串插值。在大多数应用程序中，该特性使字符串
的处理容易得多。
最后，使用正则表达式进行高级的字符串处理是搜索和验证字符串的一种最佳工具。
接下来的两章介绍不同的集合类。
第11章
集合
本章要点
● 理解集合接口和类型
● 使用列表、队列和栈
● 使用链表和有序列表
● 使用字典和集
● 评估性能
本章源代码下载地址（wrox.com）：
打开网页www.wrox.com/go/professionalcsharp6，单击Download Code选项卡即可下载
本章源代码。本章代码分为以下几个主要的示例文件：
● 列表示例
● 队列示例
● 链表示例
● 有序列表示例
● 字典示例
● 集示例
11.1 概述
第7章介绍了数组和Array类实现的接口。数组的大小是固定的。如果元素个数是动态
的，就应使用集合类。
List是与数组相当的集合类。还有其他类型的集合：队列、栈、链表、字典和
集。其他集合类提供的访问集合元素的API可能稍有不同，它们在内存中存储元素的内部
结构也有区别。本章将介绍所有的集合类和它们的区别，包括性能差异。
还可以了解在多线程中使用的位数组和并发集合。
11.2 集合接口和类型
大多数集合类都可在System.Collections和System.Collections.Generic名称空间中找到。
泛型集合类位于System.Collections.Generic名称空间中；专用于特定类型的集合类位于
System.Collections. 
Specialized名称空间中。线程安全的集合类位于
System.Collections.Concurrent名称空间中。不可变的集合类在System.Collections.Immutable
名称空间中。
当然，组合集合类还有其他方式。集合可以根据集合类实现的接口组合为列表、集合
和字典。
  注意： 接口IEnumerable和IEnumerator的内容详见第7章。
集合和列表实现的接口如表11-1所示。
表11-1
接口
说明
IEnumerable
如果将foreach语句用于集合，就需要IEnumerable
接口。这个接口定义了方法GetEnumerator（），
它返回一个实现了IEnumerator接口的枚举
ICollection
ICollection接口由泛型集合类实现。使用这个
接口可以获得集合中的元素个数（Count属性），
把集合复制到数组中（CopyTo（）方法），还可
以从集合中添加和删除元素（Add（）、
Remove（）、Clear（））
IList
IList接口用于可通过位置访问其中的元素列
表，这个接口定义了一个索引器，可以在集合的指
定位置插入或删除某些项（Insert（）和
RemoveAt（）方法）。IList接口派生自
ICollection接口
ISet
ISet接口由集实现。集允许合并不同的集，获
得两个集的交集，检查两个集是否重叠。ISet
接口派生自ICollection接口
IDictionary