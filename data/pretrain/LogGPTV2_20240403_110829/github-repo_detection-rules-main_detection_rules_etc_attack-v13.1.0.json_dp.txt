{"created": "2017-12-14T16:46:06.044Z", "created_by_ref": "", "description": "Every user account in macOS has a userID associated with it. When creating a user, you can specify the userID for that account. There is a property value in /Library/Preferences/com.apple.loginwindow called Hide500Users that prevents users with userIDs 500 and lower from appearing at the login screen. By using the [Create Account](https://attack.mitre.org/techniques/T1136) technique with a userID under 500 and enabling this property (setting it to Yes), an adversary can hide their user accounts much more easily: sudo dscl . -create /Users/username UniqueID 401 (Citation: Cybereason OSX Pirrit).", "external_references": [{"external_id": "T1147", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1147"}, {"description": "Amit Serper. (2016). Cybereason Lab Analysis OSX.Pirrit. Retrieved December 10, 2021.", "source_name": "Cybereason OSX Pirrit", "url": "https://cdn2.hubspot.net/hubfs/3354902/Content%20PDFs/Cybereason-Lab-Analysis-OSX-Pirrit-4-6-16.pdf"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "defense-evasion"}], "modified": "2021-12-21T16:28:00.431Z", "name": "Hidden Users", "object_marking_refs": ["marking-"], "revoked": true, "type": "attack-pattern", "x_mitre_detection": "This technique prevents the new user from showing up at the log in screen, but all of the other signs of a new user still exist. The user still gets a home directory and will appear in the authentication logs.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "", "x_mitre_permissions_required": ["Administrator", "root"], "x_mitre_platforms": ["macOS"], "x_mitre_version": "1.0"}
{"created": "2020-05-14T14:45:15.978Z", "created_by_ref": "", "description": "An adversary may create a new instance or virtual machine (VM) within the compute service of a cloud account to evade defenses. Creating a new instance may allow an adversary to bypass firewall rules and permissions that exist on instances currently residing within an account. An adversary may [Create Snapshot](https://attack.mitre.org/techniques/T1578/001) of one or more volumes in an account, create a new instance, mount the snapshots, and then apply a less restrictive security policy to collect [Data from Local System](https://attack.mitre.org/techniques/T1005) or for [Remote Data Staging](https://attack.mitre.org/techniques/T1074/002).(Citation: Mandiant M-Trends 2020)\n\nCreating a new instance may also allow an adversary to carry out malicious activity within an environment without affecting the execution of current running instances.", "external_references": [{"external_id": "T1578.002", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1578/002"}, {"description": "Mandiant. (2020, February). M-Trends 2020. Retrieved April 24, 2020.", "source_name": "Mandiant M-Trends 2020", "url": "https://content.fireeye.com/m-trends/rpt-m-trends-2020"}, {"description": "Amazon. (n.d.). Search CloudTrail logs for API calls to EC2 Instances. Retrieved June 17, 2020.", "source_name": "AWS CloudTrail Search", "url": "https://aws.amazon.com/premiumsupport/knowledge-center/cloudtrail-search-api-calls/"}, {"description": "Microsoft. (n.d.). View Azure activity logs. Retrieved June 17, 2020.", "source_name": "Azure Activity Logs", "url": "https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/view-activity-logs"}, {"description": "Google. (n.d.). Audit Logs. Retrieved June 1, 2020.", "source_name": "Cloud Audit Logs", "url": "https://cloud.google.com/logging/docs/audit#admin-activity"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "defense-evasion"}], "modified": "2021-03-08T10:33:02.034Z", "name": "Create Cloud Instance", "object_marking_refs": ["marking-"], "type": "attack-pattern", "x_mitre_data_sources": ["Instance: Instance Creation", "Instance: Instance Metadata"], "x_mitre_detection": "The creation of a new instance or VM is a common part of operations within many cloud environments. Events should then not be viewed in isolation, but as part of a chain of behavior that could lead to other activities. For example, the creation of an instance by a new user account or the unexpected creation of one or more snapshots followed by the creation of an instance may indicate suspicious activity.\n\nIn AWS, CloudTrail logs capture the creation of an instance in the RunInstances event, and in Azure the creation of a VM may be captured in Azure activity logs.(Citation: AWS CloudTrail Search)(Citation: Azure Activity Logs) Google's Admin Activity audit logs within their Cloud Audit logs can be used to detect the usage of gcloud compute instances create to create a VM.(Citation: Cloud Audit Logs)", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_permissions_required": ["User"], "x_mitre_platforms": ["IaaS"], "x_mitre_version": "1.1"}
{"created": "2019-04-25T20:53:07.719Z", "created_by_ref": "", "description": "Adversaries may attempt to make payloads difficult to discover and analyze by delivering files to victims as uncompiled code. Similar to [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027), text-based source code files may subvert analysis and scrutiny from protections targeting executables/binaries. These payloads will need to be compiled before execution; typically via native utilities such as csc.exe or GCC/MinGW.(Citation: ClearSky MuddyWater Nov 2018)\n\nSource code payloads may also be encrypted, encoded, and/or embedded within other files, such as those delivered as a [Spearphishing Attachment](https://attack.mitre.org/techniques/T1193). Payloads may also be delivered in formats unrecognizable and inherently benign to the native OS (ex: EXEs on macOS/Linux) before later being (re)compiled into a proper executable binary with a bundled compiler and execution framework.(Citation: TrendMicro WindowsAppMac)\n", "external_references": [{"external_id": "T1500", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1500"}, {"description": "ClearSky Cyber Security. (2018, November). MuddyWater Operations in Lebanon and Oman: Using an Israeli compromised domain for a two-stage campaign. Retrieved November 29, 2018.", "source_name": "ClearSky MuddyWater Nov 2018", "url": "https://www.clearskysec.com/wp-content/uploads/2018/11/MuddyWater-Operations-in-Lebanon-and-Oman.pdf"}, {"description": "Trend Micro. (2019, February 11). Windows App Runs on Mac, Downloads Info Stealer and Adware. Retrieved April 25, 2019.", "source_name": "TrendMicro WindowsAppMac", "url": "https://blog.trendmicro.com/trendlabs-security-intelligence/windows-app-runs-on-mac-downloads-info-stealer-and-adware/"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "defense-evasion"}], "modified": "2020-03-16T15:38:37.650Z", "name": "Compile After Delivery", "object_marking_refs": ["marking-"], "revoked": true, "type": "attack-pattern", "x_mitre_contributors": ["Ye Yint Min Thu Htut, Offensive Security Team, DBS Bank", "Praetorian"], "x_mitre_defense_bypassed": ["Static File Analysis", "Binary Analysis", "Anti-virus", "Host intrusion prevention systems", "Signature-based detection"], "x_mitre_detection": "Monitor the execution file paths and command-line arguments for common compilers, such as csc.exe and GCC/MinGW, and correlate with other suspicious behavior to reduce false positives from normal user and administrator behavior. The compilation of payloads may also generate file creation and/or file write events. Look for non-native binary formats and cross-platform compiler and execution frameworks like Mono and determine if they have a legitimate purpose on the system.(Citation: TrendMicro WindowsAppMac) Typically these should only be used in specific and limited cases, like for software development.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "", "x_mitre_permissions_required": ["User"], "x_mitre_platforms": ["Linux", "macOS", "Windows"], "x_mitre_system_requirements": ["Compiler software (either native to the system or delivered by the adversary)"], "x_mitre_version": "1.0"}
{"created": "2021-05-11T18:51:16.343Z", "created_by_ref": "", "description": "Adversaries may leverage code repositories to collect valuable information. Code repositories are tools/services that store source code and automate software builds. They may be hosted internally or privately on third party sites such as Github, GitLab, SourceForge, and BitBucket. Users typically interact with code repositories through a web application or command-line utilities such as git.\n\nOnce adversaries gain access to a victim network or a private code repository, they may collect sensitive information such as proprietary source code or credentials contained within software's source code.  Having access to software's source code may allow adversaries to develop [Exploits](https://attack.mitre.org/techniques/T1587/004), while credentials may provide access to additional resources using [Valid Accounts](https://attack.mitre.org/techniques/T1078).(Citation: Wired Uber Breach)(Citation: Krebs Adobe)\n\n**Note:** This is distinct from [Code Repositories](https://attack.mitre.org/techniques/T1593/003), which focuses on conducting [Reconnaissance](https://attack.mitre.org/tactics/TA0043) via public code repositories.", "external_references": [{"external_id": "T1213.003", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1213/003"}, {"description": "Andy Greenberg. (2017, January 21). Hack Brief: Uber Paid Off Hackers to Hide a 57-Million User Data Breach. Retrieved May 14, 2021.", "source_name": "Wired Uber Breach", "url": "https://www.wired.com/story/uber-paid-off-hackers-to-hide-a-57-million-user-data-breach/"}, {"description": "Brian Krebs. (2013, October 3). Adobe To Announce Source Code, Customer Data Breach. Retrieved May 17, 2021.", "source_name": "Krebs Adobe", "url": "https://krebsonsecurity.com/2013/10/adobe-to-announce-source-code-customer-data-breach/"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "collection"}], "modified": "2022-10-18T22:44:01.723Z", "name": "Code Repositories", "object_marking_refs": ["marking-"], "revoked": false, "type": "attack-pattern", "x_mitre_attack_spec_version": "2.1.0", "x_mitre_contributors": ["Itamar Mizrahi, Cymptom", "Toby Kohlenberg", "Josh Liburdi, @jshlbrd"], "x_mitre_data_sources": ["Application Log: Application Log Content", "Logon Session: Logon Session Creation"], "x_mitre_deprecated": false, "x_mitre_detection": "Monitor access to code repositories, especially performed by privileged users such as Active Directory Domain or Enterprise Administrators as these types of accounts should generally not be used to access code repositories. In environments with high-maturity, it may be possible to leverage User-Behavioral Analytics (UBA) platforms to detect and alert on user-based anomalies.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["SaaS"], "x_mitre_version": "1.1"}
{"created": "2020-03-02T14:27:00.693Z", "created_by_ref": "", "description": "Adversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity, thus threatening the integrity of the data.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating transmitted data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\n\nManipulation may be possible over a network connection or between system processes where there is an opportunity deploy a tool that will intercept and change information. The type of modification and the impact it will have depends on the target transmission mechanism as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.", "external_references": [{"external_id": "T1565.002", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1565/002"}, {"description": "Department of Justice. (2018, September 6). Criminal Complaint - United States of America v. PARK JIN HYOK. Retrieved March 29, 2019.", "source_name": "DOJ Lazarus Sony 2018", "url": "https://www.justice.gov/opa/press-release/file/1092091/download"}, {"description": "FireEye. (2018, October 03). APT38: Un-usual Suspects. Retrieved November 6, 2018.", "source_name": "FireEye APT38 Oct 2018", "url": "https://content.fireeye.com/apt/rpt-apt38"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "impact"}], "modified": "2022-04-19T23:04:44.258Z", "name": "Transmitted Data Manipulation", "object_marking_refs": ["marking-"], "revoked": false, "type": "attack-pattern", "x_mitre_attack_spec_version": "2.1.0", "x_mitre_data_sources": ["Network Traffic: Network Traffic Content", "Network Traffic: Network Traffic Flow", "Process: OS API Execution"], "x_mitre_deprecated": false, "x_mitre_detection": "Detecting the manipulation of data as at passes over a network can be difficult without the appropriate tools. In some cases integrity verification checks, such as file hashing, may be used on critical files as they transit a network. With some critical processes involving transmission of data, manual or out-of-band integrity checking may be useful for identifying manipulated data. ", "x_mitre_domains": ["enterprise-attack"], "x_mitre_impact_type": ["Integrity"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["Linux", "macOS", "Windows"], "x_mitre_version": "1.1"}
{"created": "2020-02-11T18:46:56.263Z", "created_by_ref": "", "description": "Adversaries may attempt to dump the contents of /etc/passwd and /etc/shadow to enable offline password cracking. Most modern Linux operating systems use a combination of /etc/passwd and /etc/shadow to store user account information including password hashes in /etc/shadow. By default, /etc/shadow is only readable by the root user.(Citation: Linux Password and Shadow File Formats)\n\nThe Linux utility, unshadow, can be used to combine the two files in a format suited for password cracking utilities such as John the Ripper:(Citation: nixCraft - John the Ripper) # /usr/bin/unshadow /etc/passwd /etc/shadow > /tmp/crack.password.db\n", "external_references": [{"external_id": "T1003.008", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1003/008"}, {"description": "The Linux Documentation Project. (n.d.). Linux Password and Shadow File Formats. Retrieved February 19, 2020.", "source_name": "Linux Password and Shadow File Formats", "url": "https://www.tldp.org/LDP/lame/LAME/linux-admin-made-easy/shadow-file-formats.html"}, {"description": "Vivek Gite. (2014, September 17). Linux Password Cracking: Explain unshadow and john Commands (John the Ripper Tool). Retrieved February 19, 2020.", "source_name": "nixCraft - John the Ripper", "url": "https://www.cyberciti.biz/faq/unix-linux-password-cracking-john-the-ripper/"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "credential-access"}], "modified": "2020-03-20T15:56:55.022Z", "name": "/etc/passwd and /etc/shadow", "object_marking_refs": ["marking-"], "type": "attack-pattern", "x_mitre_data_sources": ["File: File Access", "Command: Command Execution"], "x_mitre_detection": "The AuditD monitoring tool, which ships stock in many Linux distributions, can be used to watch for hostile processes attempting to access /etc/passwd and /etc/shadow, alerting on the pid, process name, and arguments of such programs.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_permissions_required": ["root"], "x_mitre_platforms": ["Linux"], "x_mitre_version": "1.0"}
{"created": "2020-01-17T16:10:58.592Z", "created_by_ref": "", "description": "Adversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. When a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (.plist) file found in /System/Library/LaunchAgents, /Library/LaunchAgents, and ~/Library/LaunchAgents.(Citation: AppleDocs Launch Agent Daemons)(Citation: OSX Keydnap malware) (Citation: Antiquated Mac Malware) Property list files use the Label, ProgramArguments , and RunAtLoad keys to identify the Launch Agent's name, executable location, and execution time.(Citation: OSX.Dok Malware) Launch Agents are often installed to perform updates to programs, launch user specified programs at login, or to conduct other developer tasks.\n\n Launch Agents can also be executed using the [Launchctl](https://attack.mitre.org/techniques/T1569/001) command.\n \nAdversaries may install a new Launch Agent that executes at login by placing a .plist file into the appropriate folders with the RunAtLoad or KeepAlive keys set to true.(Citation: Sofacy Komplex Trojan)(Citation: Methods of Mac Malware Persistence) The Launch Agent name may be disguised by using a name from the related operating system or benign software. Launch Agents are created with user level privileges and execute with user level permissions.(Citation: OSX Malware Detection)(Citation: OceanLotus for OS X) ", "external_references": [{"external_id": "T1543.001", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1543/001"}, {"description": "Apple. (n.d.). Creating Launch Daemons and Agents. Retrieved July 10, 2017.", "source_name": "AppleDocs Launch Agent Daemons", "url": "https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html"}, {"description": "Dani Creus, Tyler Halfpop, Robert Falcone. (2016, September 26). Sofacy's 'Komplex' OS X Trojan. Retrieved July 8, 2017.", "source_name": "Sofacy Komplex Trojan", "url": "https://researchcenter.paloaltonetworks.com/2016/09/unit42-sofacys-komplex-os-x-trojan/"}, {"description": "Eddie Lee. (2016, February 17). OceanLotus for OS X - an Application Bundle Pretending to be an Adobe Flash Update. Retrieved July 5, 2017.", "source_name": "OceanLotus for OS X", "url": "https://www.alienvault.com/blogs/labs-research/oceanlotus-for-os-x-an-application-bundle-pretending-to-be-an-adobe-flash-update"}, {"description": "Marc-Etienne M.Leveille. (2016, July 6). New OSX/Keydnap malware is hungry for credentials. Retrieved July 3, 2017.", "source_name": "OSX Keydnap malware", "url": "https://www.welivesecurity.com/2016/07/06/new-osxkeydnap-malware-hungry-credentials/"}, {"description": "Patrick Wardle. (2014, September). Methods of Malware Persistence on Mac OS X. Retrieved July 5, 2017.", "source_name": "Methods of Mac Malware Persistence", "url": "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf"}, {"description": "Patrick Wardle. (2016, February 29). Let's Play Doctor: Practical OS X Malware Detection & Analysis. Retrieved July 10, 2017.", "source_name": "OSX Malware Detection", "url": "https://www.synack.com/wp-content/uploads/2016/03/RSA_OSX_Malware.pdf"}, {"description": "Thomas Reed. (2017, January 18). New Mac backdoor using antiquated code. Retrieved July 5, 2017.", "source_name": "Antiquated Mac Malware", "url": "https://blog.malwarebytes.com/threat-analysis/2017/01/new-mac-backdoor-using-antiquated-code/"}, {"description": "Thomas Reed. (2017, July 7). New OSX.Dok malware intercepts web traffic. Retrieved July 10, 2017.", "source_name": "OSX.Dok Malware", "url": "https://blog.malwarebytes.com/threat-analysis/2017/04/new-osx-dok-malware-intercepts-web-traffic/"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "persistence"}, {"kill_chain_name": "mitre-attack", "phase_name": "privilege-escalation"}], "modified": "2022-04-21T16:13:00.598Z", "name": "Launch Agent", "object_marking_refs": ["marking-"], "revoked": false, "type": "attack-pattern", "x_mitre_attack_spec_version": "2.1.0", "x_mitre_contributors": ["Antonio Piazza, @antman1p"], "x_mitre_data_sources": ["Service: Service Modification", "Command: Command Execution", "File: File Modification", "File: File Creation", "Service: Service Creation"], "x_mitre_deprecated": false, "x_mitre_detection": "Monitor Launch Agent creation through additional plist files and utilities such as Objective-See\u2019s  KnockKnock application. Launch Agents also require files on disk for persistence which can also be monitored via other file monitoring applications.\n\nEnsure Launch Agent's  ProgramArguments  key pointing to executables located in the /tmp or /shared folders are in alignment with enterprise policy. Ensure all Launch Agents with the RunAtLoad key set to true are in alignment with policy. ", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_permissions_required": ["Administrator", "User"], "x_mitre_platforms": ["macOS"], "x_mitre_version": "1.4"}, {"created": "2020-03-10T18:23:06.482Z", "created_by_ref": "", "description": "Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services either locally or remotely. Many services are set to run at boot, which can aid in achieving persistence ([Create or Modify System Process](https://attack.mitre.org/techniques/T1543)), but adversaries can also abuse services for one-time or temporary execution.", "external_references": [{"external_id": "T1569", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1569"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "execution"}], "modified": "2022-03-22T17:29:46.189Z", "name": "System Services", "object_marking_refs": ["marking-"], "type": "attack-pattern", "x_mitre_data_sources": ["Process: Process Creation", "File: File Modification", "Windows Registry: Windows Registry Key Modification", "Command: Command Execution", "Service: Service Creation"], "x_mitre_detection": "Monitor for command line invocations of tools capable of modifying services that doesn\u2019t correspond to normal usage patterns and known software, patch cycles, etc. Also monitor for changes to executables and other files associated with services. Changes to Windows services may also be reflected in the Registry.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "", "x_mitre_permissions_required": ["User", "Administrator", "SYSTEM", "root"], "x_mitre_platforms": ["Windows", "macOS", "Linux"], "x_mitre_remote_support": true, "x_mitre_version": "1.2"}, {"created": "2020-03-09T14:12:31.196Z", "created_by_ref": "", "description": "Adversaries may abuse the Windows command shell for execution. The Windows command shell ([cmd](https://attack.mitre.org/software/S0106)) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via [Remote Services](https://attack.mitre.org/techniques/T1021) such as [SSH](https://attack.mitre.org/techniques/T1021/004).(Citation: SSH in Windows)\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage [cmd](https://attack.mitre.org/software/S0106) to execute various commands and payloads. Common uses include [cmd](https://attack.mitre.org/software/S0106) to execute a single command, or abusing [cmd](https://attack.mitre.org/software/S0106) interactively with input and output forwarded over a command and control channel.", "external_references": [{"external_id": "T1059.003", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1059/003"}, {"description": "Microsoft. (2020, May 19). Tutorial: SSH in Windows Terminal. Retrieved July 26, 2021.", "source_name": "SSH in Windows", "url": "https://docs.microsoft.com/en-us/windows/terminal/tutorials/ssh"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "execution"}], "modified": "2021-07-26T17:13:07.345Z", "name": "Windows Command Shell", "object_marking_refs": ["marking-"], "type": "attack-pattern", "x_mitre_data_sources": ["Command: Command Execution", "Process: Process Creation"], "x_mitre_detection": "Usage of the Windows command shell may be common on administrator, developer, or power user systems depending on job function. If scripting is restricted for normal users, then any attempt to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.\n\nScripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information Discovery, Collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_permissions_required": ["User"], "x_mitre_platforms": ["Windows"], "x_mitre_remote_support": true, "x_mitre_version": "1.2"}, {"created": "2020-01-14T01:34:10.588Z", "created_by_ref": "", "description": "Adversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process. \n\nProc memory injection involves enumerating the memory of a process via the /proc filesystem (/proc/[pid]) then crafting a return-oriented programming (ROP) payload with available gadgets/instructions. Each running process has its own directory, which includes memory mappings. Proc memory injection is commonly performed by overwriting the target processes\u2019 stack using memory mappings provided by the /proc filesystem. This information can be used to enumerate offsets (including the stack) and gadgets (or instructions within the program that can be used to build a malicious payload) otherwise hidden by process memory protections such as address space layout randomization (ASLR). Once enumerated, the target processes\u2019 memory map within /proc/[pid]/maps can be overwritten using dd.(Citation: Uninformed Needle)(Citation: GDS Linux Injection)(Citation: DD Man) \n\nOther techniques such as [Dynamic Linker Hijacking](https://attack.mitre.org/techniques/T1574/006) may be used to populate a target process with more available gadgets. Similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012), proc memory injection may target child processes (such as a backgrounded copy of sleep).(Citation: GDS Linux Injection) \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via proc memory injection may also evade detection from security products since the execution is masked under a legitimate process. ", "external_references": [{"external_id": "T1055.009", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1055/009"}, {"description": "skape. (2003, January 19). Linux x86 run-time process manipulation. Retrieved December 20, 2017.", "source_name": "Uninformed Needle", "url": "http://hick.org/code/skape/papers/needle.txt"}, {"description": "McNamara, R. (2017, September 5). Linux Based Inter-Process Code Injection Without Ptrace(2). Retrieved February 21, 2020.", "source_name": "GDS Linux Injection", "url": "https://blog.gdssecurity.com/labs/2017/9/5/linux-based-inter-process-code-injection-without-ptrace2.html"}, {"description": "Kerrisk, M. (2020, February 2). DD(1) User Commands. Retrieved February 21, 2020.", "source_name": "DD Man", "url": "http://man7.org/linux/man-pages/man1/dd.1.html"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "defense-evasion"}, {"kill_chain_name": "mitre-attack", "phase_name": "privilege-escalation"}], "modified": "2020-06-20T22:25:55.331Z", "name": "Proc Memory", "object_marking_refs": ["marking-"], "type": "attack-pattern", "x_mitre_data_sources": ["File: File Modification"], "x_mitre_defense_bypassed": ["Application control", "Anti-virus"], "x_mitre_detection": "File system monitoring can determine if /proc files are being modified. Users should not have permission to modify these in most cases. \n\nAnalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["Linux"], "x_mitre_version": "1.0"}
{"created": "2018-10-17T00:14:20.652Z", "created_by_ref": "", "description": "Compiled HTML files (.chm) are commonly distributed as part of the Microsoft HTML Help system. CHM files are compressed compilations of various content such as HTML documents, images, and scripting/web related programming languages such VBA, JScript, Java, and ActiveX. (Citation: Microsoft HTML Help May 2018) CHM content is displayed using underlying components of the Internet Explorer browser (Citation: Microsoft HTML Help ActiveX) loaded by the HTML Help executable program (hh.exe). (Citation: Microsoft HTML Help Executable Program)\n\nAdversaries may abuse this technology to conceal malicious code. A custom CHM file containing embedded payloads could be delivered to a victim then triggered by [User Execution](https://attack.mitre.org/techniques/T1204). CHM execution may also bypass application whitelisting on older and/or unpatched systems that do not account for execution of binaries through hh.exe. (Citation: MsitPros CHM Aug 2017) (Citation: Microsoft CVE-2017-8625 Aug 2017)", "external_references": [{"external_id": "T1223", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1223"}, {"description": "Microsoft. (2018, May 30). Microsoft HTML Help 1.4. Retrieved October 3, 2018.", "source_name": "Microsoft HTML Help May 2018", "url": "https://docs.microsoft.com/previous-versions/windows/desktop/htmlhelp/microsoft-html-help-1-4-sdk"}, {"description": "Microsoft. (n.d.). HTML Help ActiveX Control Overview. Retrieved October 3, 2018.", "source_name": "Microsoft HTML Help ActiveX", "url": "https://msdn.microsoft.com/windows/desktop/ms644670"}, {"description": "Microsoft. (n.d.). About the HTML Help Executable Program. Retrieved October 3, 2018.", "source_name": "Microsoft HTML Help Executable Program", "url": "https://msdn.microsoft.com/windows/desktop/ms524405"}, {"description": "Moe, O. (2017, August 13). Bypassing Device guard UMCI using CHM \u2013 CVE-2017-8625. Retrieved October 3, 2018.", "source_name": "MsitPros CHM Aug 2017", "url": "https://msitpros.com/?p=3909"}, {"description": "Microsoft. (2017, August 8). CVE-2017-8625 - Internet Explorer Security Feature Bypass Vulnerability. Retrieved October 3, 2018.", "source_name": "Microsoft CVE-2017-8625 Aug 2017", "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2017-8625"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "defense-evasion"}, {"kill_chain_name": "mitre-attack", "phase_name": "execution"}], "modified": "2020-01-31T18:59:00.845Z", "name": "Compiled HTML File", "object_marking_refs": ["marking-"], "revoked": true, "type": "attack-pattern", "x_mitre_contributors": ["Rahmat Nurfauzi, @infosecn1nja, PT Xynexis International"], "x_mitre_defense_bypassed": ["Application whitelisting", "Digital Certificate Validation"], "x_mitre_detection": "Monitor and analyze the execution and arguments of hh.exe. (Citation: MsitPros CHM Aug 2017) Compare recent invocations of hh.exe with prior history of known good arguments to determine anomalous and potentially adversarial activity (ex: obfuscated and/or malicious commands). Non-standard process execution trees may also indicate suspicious or malicious behavior, such as if hh.exe is the parent process for suspicious processes and activity relating to other adversarial techniques.\n\nMonitor presence and use of CHM files, especially if they are not typically used within an environment.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "", "x_mitre_permissions_required": ["User"], "x_mitre_platforms": ["Windows"], "x_mitre_version": "1.1"}
{"created": "2023-03-10T15:37:21.782Z", "created_by_ref": "", "description": "Adversaries may purchase or otherwise acquire an existing access to a target system or network. A variety of online services and initial access broker networks are available to sell access to previously compromised systems.(Citation: Microsoft Ransomware as a Service)(Citation: CrowdStrike Access Brokers)(Citation: Krebs Access Brokers Fortune 500) In some cases, adversary groups may form partnerships to share compromised systems with each other.(Citation: CISA Karakurt 2022)\n\nFootholds to compromised systems may take a variety of forms, such as access to planted backdoors (e.g., [Web Shell](https://attack.mitre.org/techniques/T1505/003)) or established access via [External Remote Services](https://attack.mitre.org/techniques/T1133). In some cases, access brokers will implant compromised systems with a \u201cload\u201d that can be used to install additional malware for paying customers.(Citation: Microsoft Ransomware as a Service)\n\nBy leveraging existing access broker networks rather than developing or obtaining their own initial access capabilities, an adversary can potentially reduce the resources required to gain a foothold on a target network and focus their efforts on later stages of compromise. Adversaries may prioritize acquiring access to systems that have been determined to lack security monitoring or that have high privileges, or systems that belong to organizations in a particular sector.(Citation: Microsoft Ransomware as a Service)(Citation: CrowdStrike Access Brokers)\n\nIn some cases, purchasing access to an organization in sectors such as IT contracting, software development, or telecommunications may allow an adversary to compromise additional victims via a [Trusted Relationship](https://attack.mitre.org/techniques/T1199), [Multi-Factor Authentication Interception](https://attack.mitre.org/techniques/T1111), or even [Supply Chain Compromise](https://attack.mitre.org/techniques/T1195).\n\n**Note:** while this technique is distinct from other behaviors such as [Purchase Technical Data](https://attack.mitre.org/techniques/T1597/002) and [Credentials](https://attack.mitre.org/techniques/T1589/001), they may often be used in conjunction (especially where the acquired foothold requires [Valid Accounts](https://attack.mitre.org/techniques/T1078)).", "external_references": [{"external_id": "T1650", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1650"}, {"description": "Brian Krebs. (2012, October 22). Service Sells Access to Fortune 500 Firms. Retrieved March 10, 2023.", "source_name": "Krebs Access Brokers Fortune 500", "url": "https://krebsonsecurity.com/2012/10/service-sells-access-to-fortune-500-firms/"}, {"description": "CrowdStrike Intelligence Team. (2022, February 23). Access Brokers: Who Are the Targets, and What Are They Worth?. Retrieved March 10, 2023.", "source_name": "CrowdStrike Access Brokers", "url": "https://www.crowdstrike.com/blog/access-brokers-targets-and-worth/"}, {"description": "Cybersecurity Infrastructure and Defense Agency. (2022, June 2). Karakurt Data Extortion Group. Retrieved March 10, 2023.", "source_name": "CISA Karakurt 2022", "url": "https://www.cisa.gov/news-events/cybersecurity-advisories/aa22-152a"}, {"description": "Microsoft. (2022, May 9). Ransomware as a service: Understanding the cybercrime gig economy and how to protect yourself. Retrieved March 10, 2023.", "source_name": "Microsoft Ransomware as a Service", "url": "https://www.microsoft.com/en-us/security/blog/2022/05/09/ransomware-as-a-service-understanding-the-cybercrime-gig-economy-and-how-to-protect-yourself/"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "resource-development"}], "modified": "2023-04-14T20:04:42.893Z", "name": "Acquire Access", "object_marking_refs": ["marking-"], "revoked": false, "type": "attack-pattern", "x_mitre_attack_spec_version": "3.1.0", "x_mitre_contributors": ["Jeremy Kennelly", "Jeffrey Barto"], "x_mitre_deprecated": false, "x_mitre_detection": "Much of this takes place outside the visibility of the target organization, making detection difficult for defenders. \n\nDetection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access. ", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["PRE"], "x_mitre_version": "1.0"}
{"created": "2020-10-19T19:49:24.129Z", "created_by_ref": "", "description": "Adversaries may modify the operating system of a network device to introduce new capabilities or weaken existing defenses.(Citation: Killing the myth of Cisco IOS rootkits) (Citation: Killing IOS diversity myth) (Citation: Cisco IOS Shellcode) (Citation: Cisco IOS Forensics Developments) (Citation: Juniper Netscreen of the Dead) Some network devices are built with a monolithic architecture, where the entire operating system and most of the functionality of the device is contained within a single file.  Adversaries may change this file in storage, to be loaded in a future boot, or in memory during runtime.\n\nTo change the operating system in storage, the adversary will typically use the standard procedures available to device operators. This may involve downloading a new file via typical protocols used on network devices, such as TFTP, FTP, SCP, or a console connection.  The original file may be overwritten, or a new file may be written alongside of it and the device reconfigured to boot to the compromised image.\n\nTo change the operating system in memory, the adversary typically can use one of two methods. In the first, the adversary would make use of native debug commands in the original, unaltered running operating system that allow them to directly modify the relevant memory addresses containing the running operating system.  This method typically requires administrative level access to the device.\n\nIn the second method for changing the operating system in memory, the adversary would make use of the boot loader. The boot loader is the first piece of software that loads when the device starts that, in turn, will launch the operating system.  Adversaries may use malicious code previously implanted in the boot loader, such as through the [ROMMONkit](https://attack.mitre.org/techniques/T1542/004) method, to directly manipulate running operating system code in memory.  This malicious code in the bootloader provides the capability of direct memory manipulation to the adversary, allowing them to patch the live operating system during runtime.\n\nBy modifying the instructions stored in the system image file, adversaries may either weaken existing defenses or provision new capabilities that the device did not have before. Examples of existing defenses that can be impeded include encryption, via [Weaken Encryption](https://attack.mitre.org/techniques/T1600), authentication, via [Network Device Authentication](https://attack.mitre.org/techniques/T1556/004), and perimeter defenses, via [Network Boundary Bridging](https://attack.mitre.org/techniques/T1599).  Adding new capabilities for the adversary\u2019s purpose include [Keylogging](https://attack.mitre.org/techniques/T1056/001), [Multi-hop Proxy](https://attack.mitre.org/techniques/T1090/003), and [Port Knocking](https://attack.mitre.org/techniques/T1205/001).\n\nAdversaries may also compromise existing commands in the operating system to produce false output to mislead defenders.   When this method is used in conjunction with [Downgrade System Image](https://attack.mitre.org/techniques/T1601/002), one example of a compromised system command may include changing the output of the command that shows the version of the currently running operating system.  By patching the operating system, the adversary can change this command to instead display the original, higher revision number that they replaced through the system downgrade. \n\nWhen the operating system is patched in storage, this can be achieved in either the resident storage (typically a form of flash memory, which is non-volatile) or via [TFTP Boot](https://attack.mitre.org/techniques/T1542/005). \n\nWhen the technique is performed on the running operating system in memory and not on the stored copy, this technique will not survive across reboots.  However, live memory modification of the operating system can be combined with [ROMMONkit](https://attack.mitre.org/techniques/T1542/004) to achieve persistence. ", "external_references": [{"external_id": "T1601.001", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1601/001"}, {"description": "Sebastian 'topo' Mu\u00f1iz. (2008, May). Killing the myth of Cisco IOS rootkits. Retrieved October 20, 2020.", "source_name": "Killing the myth of Cisco IOS rootkits", "url": "https://drwho.virtadpt.net/images/killing_the_myth_of_cisco_ios_rootkits.pdf"}, {"description": "Ang Cui, Jatin Kataria, Salvatore J. Stolfo. (2011, August). Killing the myth of Cisco IOS diversity: recent advances in reliable shellcode design. Retrieved October 20, 2020.", "source_name": "Killing IOS diversity myth", "url": "https://www.usenix.org/legacy/event/woot/tech/final_files/Cui.pdf"}, {"description": "George Nosenko. (2015). CISCO IOS SHELLCODE: ALL-IN-ONE. Retrieved October 21, 2020.", "source_name": "Cisco IOS Shellcode", "url": "http://2015.zeronights.org/assets/files/05-Nosenko.pdf"}, {"description": "Felix 'FX' Lindner. (2008, February). Developments in Cisco IOS Forensics. Retrieved October 21, 2020.", "source_name": "Cisco IOS Forensics Developments", "url": "https://www.recurity-labs.com/research/RecurityLabs_Developments_in_IOS_Forensics.pdf"}, {"description": "Graeme Neilson . (2009, August). Juniper Netscreen of the Dead. Retrieved October 20, 2020.", "source_name": "Juniper Netscreen of the Dead", "url": "https://www.blackhat.com/presentations/bh-usa-09/NEILSON/BHUSA09-Neilson-NetscreenDead-SLIDES.pdf"}, {"description": "Cisco. (n.d.). Cisco IOS Software Integrity Assurance - Cisco IOS Image File Verification. Retrieved October 19, 2020.", "source_name": "Cisco IOS Software Integrity Assurance - Image File Verification", "url": "https://tools.cisco.com/security/center/resources/integrity_assurance.html#7"}, {"description": "Cisco. (n.d.). Cisco IOS Software Integrity Assurance - Cisco IOS Run-Time Memory Integrity Verification. Retrieved October 19, 2020.", "source_name": "Cisco IOS Software Integrity Assurance - Run-Time Memory Verification", "url": "https://tools.cisco.com/security/center/resources/integrity_assurance.html#13"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "defense-evasion"}], "modified": "2020-10-22T17:50:46.560Z", "name": "Patch System Image", "object_marking_refs": ["marking-"], "type": "attack-pattern", "x_mitre_data_sources": ["File: File Modification"], "x_mitre_detection": "Compare the checksum of the operating system file with the checksum of a known good copy from a trusted source.  Some embedded network device platforms may have the capability to calculate the checksum of the file, while others may not.  Even for those platforms that have the capability, it is recommended to download a copy of the file to a trusted computer to calculate the checksum with software that is not compromised.(Citation: Cisco IOS Software Integrity Assurance - Image File Verification)\n\nMany vendors of embedded network devices can provide advanced debugging support that will allow them to work with device owners to validate the integrity of the operating system running in memory.  If a compromise of the operating system is suspected, contact the vendor technical support and seek such services for a more thorough inspection of the current running system.  (Citation: Cisco IOS Software Integrity Assurance - Run-Time Memory Verification)", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_permissions_required": ["Administrator"], "x_mitre_platforms": ["Network"], "x_mitre_version": "1.0"}
{"created": "2020-02-11T19:14:48.309Z", "created_by_ref": "", "description": "Adversaries who have the password hash of a target service account (e.g. SharePoint, MSSQL) may forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets. Kerberos TGS tickets are also known as service tickets.(Citation: ADSecurity Silver Tickets)\n\nSilver tickets are more limited in scope in than golden tickets in that they only enable adversaries to access a particular resource (e.g. MSSQL) and the system that hosts the resource; however, unlike golden tickets, adversaries with the ability to forge silver tickets are able to create TGS tickets without interacting with the Key Distribution Center (KDC), potentially making detection more difficult.(Citation: ADSecurity Detecting Forged Tickets)\n\nPassword hashes for target services may be obtained using [OS Credential Dumping](https://attack.mitre.org/techniques/T1003) or [Kerberoasting](https://attack.mitre.org/techniques/T1558/003).", "external_references": [{"external_id": "T1558.002", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1558/002"}, {"description": "Sean Metcalf. (2015, November 17). How Attackers Use Kerberos Silver Tickets to Exploit Systems. Retrieved February 27, 2020.", "source_name": "ADSecurity Silver Tickets", "url": "https://adsecurity.org/?p=2011"}, {"description": "Metcalf, S. (2015, May 03). Detecting Forged Kerberos Ticket (Golden Ticket & Silver Ticket) Use in Active Directory. Retrieved December 23, 2015.", "source_name": "ADSecurity Detecting Forged Tickets", "url": "https://adsecurity.org/?p=1515"}, {"description": "French, D. (2018, October 2). Detecting Attempts to Steal Passwords from Memory. Retrieved October 11, 2019.", "source_name": "Medium Detecting Attempts to Steal Passwords from Memory", "url": "https://medium.com/threatpunter/detecting-attempts-to-steal-passwords-from-memory-558f16dce4ea"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "credential-access"}], "modified": "2020-03-25T21:46:46.831Z", "name": "Silver Ticket", "object_marking_refs": ["marking-"], "type": "attack-pattern", "x_mitre_data_sources": ["Logon Session: Logon Session Metadata"], "x_mitre_detection": "Monitor for anomalous Kerberos activity, such as malformed or blank fields in Windows logon/logoff events (Event ID 4624, 4634, 4672).(Citation: ADSecurity Detecting Forged Tickets) \n\nMonitor for unexpected processes interacting with lsass.exe.(Citation: Medium Detecting Attempts to Steal Passwords from Memory) Common credential dumpers such as Mimikatz access the LSA Subsystem Service (LSASS) process by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details, including Kerberos tickets, are stored.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_permissions_required": ["User"], "x_mitre_platforms": ["Windows"], "x_mitre_version": "1.0"}
{"created": "2018-04-18T17:59:24.739Z", "created_by_ref": "", "description": "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information. Adversaries may also abuse external sharing features to share sensitive documents with recipients outside of the organization. \n\nThe following is a brief list of example information that may hold potential value to an adversary and may also be found on an information repository:\n\n* Policies, procedures, and standards\n* Physical / logical network diagrams\n* System architecture diagrams\n* Technical system documentation\n* Testing / development credentials\n* Work / project schedules\n* Source code snippets\n* Links to network shares and other internal resources\n\nInformation stored in a repository may vary based on the specific instance or environment. Specific common information repositories include web-based platforms such as [Sharepoint](https://attack.mitre.org/techniques/T1213/002) and [Confluence](https://attack.mitre.org/techniques/T1213/001), specific services such as Code Repositories, IaaS databases, enterprise databases, and other storage infrastructure such as SQL Server.", "external_references": [{"external_id": "T1213", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1213"}, {"description": "Atlassian. (2018, January 9). How to Enable User Access Logging. Retrieved April 4, 2018.", "source_name": "Atlassian Confluence Logging", "url": "https://confluence.atlassian.com/confkb/how-to-enable-user-access-logging-182943.html"}, {"description": "Microsoft. (2017, July 19). Configure audit settings for a site collection. Retrieved April 4, 2018.", "source_name": "Microsoft SharePoint Logging", "url": "https://support.office.com/en-us/article/configure-audit-settings-for-a-site-collection-a9920c97-38c0-44f2-8bcb-4cf1e2ae22d2"}, {"description": "Microsoft. (n.d.). Sharepoint Sharing Events. Retrieved October 8, 2021.", "source_name": "Sharepoint Sharing Events", "url": "https://docs.microsoft.com/en-us/microsoft-365/compliance/use-sharing-auditing?view=o365-worldwide#sharepoint-sharing-events"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "collection"}], "modified": "2022-04-11T22:28:36.395Z", "name": "Data from Information Repositories", "object_marking_refs": ["marking-"], "revoked": false, "type": "attack-pattern", "x_mitre_attack_spec_version": "2.1.0", "x_mitre_contributors": ["Naveen Vijayaraghavan, Nilesh Dherange (Gurucul)", "Regina Elwell", "Praetorian", "Milos Stojadinovic", "Isif Ibrahima, Mandiant"], "x_mitre_data_sources": ["Application Log: Application Log Content", "Logon Session: Logon Session Creation"], "x_mitre_deprecated": false, "x_mitre_detection": "As information repositories generally have a considerably large user base, detection of malicious use can be non-trivial. At minimum, access to information repositories performed by privileged users (for example, Active Directory Domain, Enterprise, or Schema Administrators) should be closely monitored and alerted upon, as these types of accounts should generally not be used to access information repositories. If the capability exists, it may be of value to monitor and alert on users that are retrieving and viewing a large number of documents and pages; this behavior may be indicative of programmatic means being used to retrieve all data within the repository. In environments with high-maturity, it may be possible to leverage User-Behavioral Analytics (UBA) platforms to detect and alert on user based anomalies.\n\nThe user access logging within Microsoft's SharePoint can be configured to report access to certain pages and documents. (Citation: Microsoft SharePoint Logging) Sharepoint audit logging can also be configured to report when a user shares a resource. (Citation: Sharepoint Sharing Events) The user access logging within Atlassian's Confluence can also be configured to report access to certain pages and documents through AccessLogFilter. (Citation: Atlassian Confluence Logging) Additional log storage and analysis infrastructure will likely be required for more robust detection capabilities. ", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["Linux", "Windows", "macOS", "SaaS", "Office 365", "Google Workspace", "IaaS"], "x_mitre_version": "3.2"}, {"created": "2022-07-29T19:32:11.552Z", "created_by_ref": "", "description": "Adversaries may clear artifacts associated with previously established persistence on a host system to remove evidence of their activity. This may involve various actions, such as removing services, deleting executables, [Modify Registry](https://attack.mitre.org/techniques/T1112), [Plist File Modification](https://attack.mitre.org/techniques/T1647), or other methods of cleanup to prevent defenders from collecting evidence of their persistent presence.(Citation: Cylance Dust Storm) Adversaries may also delete accounts previously created to maintain persistence (i.e. [Create Account](https://attack.mitre.org/techniques/T1136)).(Citation: Talos - Cisco Attack 2022)\n\nIn some instances, artifacts of persistence may also be removed once an adversary\u2019s persistence is executed in order to prevent errors with the new instance of the malware.(Citation: NCC Group Team9 June 2020)", "external_references": [{"external_id": "T1070.009", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1070/009"}, {"description": "Gross, J. (2016, February 23). Operation Dust Storm. Retrieved December 22, 2021.", "source_name": "Cylance Dust Storm", "url": "https://s7d2.scene7.com/is/content/cylance/prod/cylance-web/en-us/resources/knowledge-center/resource-library/reports/Op_Dust_Storm_Report.pdf"}, {"description": "Nick Biasini. (2022, August 10). Cisco Talos shares insights related to recent cyber attack on Cisco. Retrieved March 9, 2023.", "source_name": "Talos - Cisco Attack 2022", "url": "https://blog.talosintelligence.com/recent-cyber-attack/"}, {"description": "Pantazopoulos, N. (2020, June 2). In-depth analysis of the new Team9 malware family. Retrieved December 1, 2020.", "source_name": "NCC Group Team9 June 2020", "url": "https://research.nccgroup.com/2020/06/02/in-depth-analysis-of-the-new-team9-malware-family/"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "defense-evasion"}], "modified": "2023-04-11T22:30:01.227Z", "name": "Clear Persistence", "object_marking_refs": ["marking-"], "revoked": false, "type": "attack-pattern", "x_mitre_attack_spec_version": "3.1.0", "x_mitre_contributors": ["Gavin Knapp"], "x_mitre_data_sources": ["Process: Process Creation", "Scheduled Job: Scheduled Job Modification", "File: File Modification", "Command: Command Execution", "User Account: User Account Deletion", "Windows Registry: Windows Registry Key Modification", "File: File Deletion", "Windows Registry: Windows Registry Key Deletion"], "x_mitre_deprecated": false, "x_mitre_detection": "", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["Linux", "macOS", "Windows"], "x_mitre_version": "1.1"}