```
Control-j: "\C-a$(\C-e)"
```
如果你经常需要像下面这样把一个命令的输出用于另一个命令的话，这个宏可能会对你有帮助：
```
$ cd $(brew --prefix)
```
`~/.inputrc` 文件也允许你为 Readline 手册中所谓的 “变量” 设置不同的值，这些变量会启用或禁用某些 Readline 行为，你也可以使用这些变量来改变 Readline 中像是自动补全或者历史搜索这些行为的工作方式。我建议开启的一个变量是 `revert-all-at-newline`，它是默认关闭的，当这个变量关闭时，如果你使用反向搜索功能从命令历史记录中提取一行并编辑，但随后又决定搜索另一行，那么你所做的编辑会被保存在历史记录中。我觉得这样会很混乱，因为这会导致你的 Bash 命令历史中出现从未运行过的行。所以在你的 `~/.inputrc` 中加入这个：
```
set revert-all-at-newline on
```
在你用 `~/.inputrc` 设置了选项或键绑定以后，它们会适用于任何使用 Readline 库的地方，显然 Bash 也包括在内，不过你也会在其它像是 `irb` 和 `psql` 这样的程序中受益。如果你经常使用关系型数据库的命令行界面，一个用于插入 `SELECT * FROM` 的 Readline 宏可能会很有用。
### Chet Ramey
GNU Readline 如今由凯斯西储大学的高级技术架构师 Chet Ramey 维护，Ramey 同时还负责维护 Bash shell；这两个项目都是由一位名叫 Brian Fox 的自由软件基金会员工在 1988 年开始编写的，但从 1994 年左右开始，Ramey 一直是它们唯一的维护者。
Ramey 通过电子邮件告诉我，Readline 远非一个原创的想法，它是为了实现 POSIX 规范所规定的功能而被创建的，而 POSIX 规范又是在 20 世纪 80 年代末被制定的。许多早期的 shell，包括 Korn shell 和至少一个版本的 Unix System V shell，都包含行编辑功能。1988 年版的 Korn shell（`ksh88`）提供了 Emacs 风格和 Vi/Vim 风格的编辑模式。据我从[手册页](https://web.archive.org/web/20151105130220/http://www2.research.att.com/sw/download/man/man1/ksh88.html)中得知，Korn shell 会通过查看 `VISUAL` 和 `EDITOR` 环境变量来决定你使用的模式，这一点非常巧妙。POSIX 中指定 shell 功能的部分近似于 `ksh88` 的实现，所以 GNU Bash 也要实现一个类似的灵活的行编辑系统来保持兼容，因此就有了 Readline。
Ramey 第一次参与 Bash 开发时，Readline 还是 Bash 项目目录下的一个单一的源文件，它其实只是 Bash 的一部分；随着时间的推移，Readline 文件慢慢地成为了独立的项目，不过直到 1994 年（Readline 2.0 版本发布），Readline 才完全成为了一个独立的库。
Readline 与 Bash 密切相关，Ramey 也通常把 Readline 与 Bash 的发布配对，但正如我上面提到的，Readline 是一个可以被任何有命令行界面的软件使用的库，而且它真的很容易使用。下面是一个例子，虽然简单，但这就是在 C 程序中使用 Readline 的方法。向 `readline()` 函数传递的字符串参数就是你希望 Readline 向用户显示的提示符：
```
#include 
#include 
#include "readline/readline.h"
int main(int argc, char** argv)
{
    char* line = readline("my-rl-example> ");
    printf("You entered: \"%s\"\n", line);
    free(line);
    return 0;
}
```
你的程序会把控制权交给 Readline，它会负责从用户那里获得一行输入（以这样的方式让用户可以做所有花哨的行编辑工作），一旦用户真正提交了这一行，Readline 就会把它返回给你。在我的库搜索路径中有 Readline 库，所以我可以通过调用以下内容来链接 Readline 库，从而编译上面的内容：
```
$ gcc main.c -lreadline
```
当然，Readline 的 API 比起那个单一的函数要丰富得多，任何使用它的人都可以对库的行为进行各种调整，库的用户（开发者）甚至可以添加新的函数，来让最终用户可以通过 `~/.inputrc` 来配置它们，这意味着 Readline 非常容易扩展。但是据我所知，即使是 Bash ，虽然事先有很多配置，最终也会像上面的例子一样调用简单的 `readline()` 函数来获取输入。（参见 GNU Bash 源代码中的[这一行](https://github.com/bminor/bash/blob/9f597fd10993313262cab400bf3c46ffb3f6fd1e/parse.y#L1487)，Bash 似乎在这里将获取输入的责任交给了 Readline）。
Ramey 现在已经在 Bash 和 Readline 上工作了二十多年，但他的工作却从来没有得到过报酬 —— 他一直都是一名志愿者。Bash 和 Readline 仍然在积极开发中，尽管 Ramey 说 Readline 的变化比 Bash 慢得多。我问 Ramey 作为这么多人使用的软件唯一的维护者是什么感觉，他说可能有几百万人在不知不觉中使用 Bash（因为每个苹果设备都运行 Bash），这让他担心一个破坏性的变化会造成多大的混乱，不过他已经慢慢习惯了所有这些人的想法。他还说他会继续在 Bash 和 Readline 上工作，因为在这一点上他已经深深地投入了，而且他也只是单纯地喜欢把有用的软件提供给世界。
*你可以在 [Chet Ramey 的网站](https://tiswww.case.edu/php/chet/)上找到更多关于他的信息。*
*喜欢这篇文章吗？我会每四周写出一篇像这样的文章。关注推特帐号 [@TwoBitHistory](https://twitter.com/TwoBitHistory) 或者[订阅 RSS](https://twobithistory.org/feed.xml) 来获取更新吧！*
---
via: 
作者：[Two-Bit History](https://twobithistory.org) 选题：[lujun9972](https://github.com/lujun9972) 译者：[rakino](https://github.com/rakino) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出