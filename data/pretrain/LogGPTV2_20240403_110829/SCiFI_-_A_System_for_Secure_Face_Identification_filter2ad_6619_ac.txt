1, . . . , ss
Our experiments use p = 30 face patches, with a vocabu-
lary of N = 20 visual words and Q = 10 quantized distance
244
bins per patch. We empirically found that it is best to set the
number n of indices in each set sa
to 4. The number z of
i
indices in each set ss
i is 2. This means that the appearance
component contains p = 30 sets, where each set contains
n = 4 words out of N = 20 options. The spatial component
contains p = 30 sets of z = 2 words out of Q = 10 options.
D. Recognition
The recognition task in SCiFI consists of deciding if a face
in the image acquired by the client matches one of the faces
in the database stored by the server. Two images are said to
match if the set difference between their two representations
is below some predeﬁned threshold. To increase the accuracy
of recognition, the system learns, in a preprocessing stage, an
individual threshold for every person in the database. Then,
in the real time phase, the representation of the client’s face
is compared with every face representation in the database
and is said to match it if their set difference is smaller than
the corresponding threshold. If the client’s face passes one
of the individual thresholds it is identiﬁed as a match.
Learning individual
thresholds: Learning individual
thresholds is a hard task because these thresholds depend
on variations in different images of the same face, while
we assume that SCiFI has only a single image of a suspect
for registration. The invariance of our face representation
to illumination changes and its robustness to occlusions
reduces the intra-user variance, but does not cancel it com-
pletely. There are two possible solutions to this problem.
One is based on the assumption that intra-user variation
is independent from the identity of the user, meaning that
the variance of the representation depends on the viewing
conditions and occlusions and not on the user himself.
Then we can learn this variation using a public database.
Such an assumption, however, is rather simplistic, since
some people tend to change their appearance more then
others (makeup, facial hair etc). An alternative solution is to
determine a threshold on the set difference for each person
that will discriminate him/her from an ensemble of people
which includes individuals registered in the system and can
also include other subjects unrelated to the system (which
should ideally represent typical inputs to the system). An
initial threshold for the ith user is set based on the smallest
set difference between him and the rest of the people in
the ensemble and is corrected according to the viewing
conditions in the image which can be determined in the
client’s module and sent to the server without revealing any
information about the face. We haven’t yet implemented the
correction part and used the initial thresholds in reported
experiments.
IV. THE CRYPTOGRAPHIC ALGORITHMS
This section describes the cryptographic algorithms used
for secure computation of face recognition, with an emphasis
on pushing as much as possible of the computation to a
preprocessing stage which can be performed before the client
obtains its inputs. This is done in order to optimize the
time it takes to securely compute a face recognition after
obtaining an image of a face.2
A. Cryptographic Tools
We only consider security against semi-honest adversaries
(also known as passive, or honest-but curious adversaries).
Namely, it is assumed that corrupt parties follow the protocol
but might try to learn additional information. For lack of
space we do not provide formal deﬁnitions of security in
this workbut rather refer the reader to [20] and note that
we follow the deﬁnitions in that book (for the semi-honest
case). Informally, we remark that security can be deﬁned
by requiring that the entire view of each party during the
protocol can be simulated given only the input and output
of the party. Therefore the protocol execution itself does not
add any new information to the party.
A major tool that we use is an additively homomorphic
encryption. This is public-key encryption which enables,
given two encryptions E(m1), E(m2) and without knowl-
to compute E(m1 + m2), or
edge of the private key,
compute E(c · m1) for any known constant c. We require
the encryption system to be semantically secure. Namely,
an adversary which does not know the private key and
which is given a message which is an encryption of one of
two plaintexts, where these plaintexts might even be chosen
by the adversary, cannot distinguish which one of them is
encrypted in the message. In particular, this implies that
the encryption scheme must be probabilistic and different
encryptions of the same plaintext will be different. We
speciﬁcally use the Paillier cryptosystem [26].
1-out-of-N Oblivious transfer, denoted OTN
1
is a two
run between a sender with N inputs
party protocol,
X0, . . . , XN−1, and a receiver with an input i ∈ {0, . . . , N−
1}. The receiver learns Xi and nothing else, and the sender
learns no information. There are different variants of OT
and a rich research on this subject. OT is the basic tool
of secure computation, and it was shown how to base
secure computation on OT alone. It was shown in [27] how
to implement OTN
1 and
N symmetric encryptions. OT2
1 can be implemented using
several public-key operations (i.e., exponentiations), using,
say, El Gamal encryption. We will also use the fact that
it is easy to preprocess the public-key operations: In the
preprocessing stage the server prepares N random pads and
1 using log N invocations of OT2
2 An alternative approach to our protocols would have been to apply
Yao’s generic secure [19] two-party protocol to the recognition algorithm.
This would have required expressing the algorithm as a circuit which
computes and compares many Hamming distances, and then sending and
computing that circuit. The protocol would have had to perform 900
oblivious transfers, instead of 9 oblivious transfers per item in the server’s
database, as is described for the Fthreshold protocol below. We therefore
believe that the performance of our protocols is signiﬁcantly better than
that of applying generic protocols.
245
the parties run a OTN
1 of these values, where the client’s
input is a random index i(cid:2). In the online stage, the client,
which wants to learn item i, sends the difference between
i and i(cid:2) to the server, which shifts the order of its pads
accordingly. The server then computes the exclusive-or of
each pad with the corresponding input X, and sends the
results to the client (who can decrypt only one of these
values). As a result, online computation consists only of
efﬁcient exclusive-or operations. We will use this variant of
OT in our implementation.
B. Functionality
The cryptographic algorithm of SCiFI receives its input
from the face recognition part of the system. We deﬁne
the functionality of this algorithm in terms of its input and
output.
Input: The input of the client, as well as each entry
in
in the server’s list, contain a representation of face,
the format deﬁned in Section III-C. We will translate this
representation to an equivalent representation as a binary
vector, which will be more convenient for applying the
cryptographic algorithm. The new representation is deﬁned
as follows:
• Every set sa
i
is represented as a binary vector va
i of
length N = 20. Each bit of va
i corresponds to a
different index of an entry in the part vocabulary. The
vector va
i has exactly n = 4 bits set to 1, in the locations
of the n indices in the set sa
i .
v
V
=
is
as
a
length
• Every set ss
i
vector
of
to note that
is
p|vs
1|···|vs
p.
represented
The
is represented as a binary vector vs
i of
length Q = 10. Each bit of vs
i corresponds to a different
bin of quantized distances. The vector vs
i has exactly
two bits set to 1, in the locations of the indices in the
set ss
i .
• A face
1|···|va
va
p · (N + Q) = 30 · (20 + 10) = 900 bits.
is important
It
the set difference between
the representations s, s(cid:2) of two faces, is exactly equal to
the Hamming distance of the vectors v, v(cid:2). The Hamming
distance of these 900 bit vectors can be at most p·2·(n+2) =
30 · 2 · 6 = 360, since each va
i component has only n = 4
to 1, and every vs
i component has only 2 bits
bits set
set
in our experiments we identiﬁed
that the maximum Hamming distance between two face
representations is even smaller. We denote the bound on the
value of the Hamming distance as dmax. In our experiments
we found it to be dmax = 180. We use this fact to further
optimize the cryptographic algorithm.
to 1. Furthermore,
Output: The goal of the system is to identify a match
between the client’s input and an item in the database.
(Typically, it is expected that only a single match will be
found, since each entry corresponds to a different face.)
There are different options for identifying a match based
on the Hamming distance of the face representations. We
describe here two functions which can be used for this
purpose.
• Fthreshold. This functionality has an additional input, a
threshold ti, for each face in the server’s database. The
functionality computes the Hamming distance between
the representation of the client’s input and each of the
representations of the items in the server’s list. The
output is the index of the item (or items) in the server’s
list whose Hamming distance with the client’s input is
smaller than the corresponding threshold ti.
• Fmin+t. The output is the index of the item in the list
whose Hamming distance with the client’s input which
is minimal. However, if this distance is larger than the
threshold, i.e. if no database item is closer to the input
than the threshold, then no output is given.
Choosing the right functionality: The outputs of the
functionalities Fthreshold and Fmin+t only differ when the
basic algorithm ﬁnds the client’s image to be similar to
more than a single face in the server’s database. Ideally this
would not happen since a person should only be similar to
himself. Still, if the similarity thresholds ti are not accurately
calibrated then a single image might be considered by the
algorithm to be close to two or more database images (i.e.,
the set differences will be smaller than the corresponding
ti values). In that case the Fthreshold functionality outputs
the identities of all database items which are close to client’s
input, whereas Fmin+t only outputs the identity of the closest
item. While Fmin+t provides more privacy, one could argue
that it is more reasonable to use Fthreshold, since similarity
to any of the suspects must be investigated. We also note
that secure computation of Fmin+t is harder than that of
Fthreshold. For both of these reasons, we only implemented
the latter in the SCiFI system (although we discuss the
computation of both functionalities in this paper).
Learning the output: It is possible to let only the client,
only the server, or both parties, learn the output of the
computation. We will describe protocols for all these cases.
C. Cryptographic Protocols for Face Recognition
We start with a description of a protocol for secure
computation of the Fthreshold functionality, and then de-
scribe how to optimize the implementation of the protocol.
We then describe the Fmin+t protocol. Both protocols are
based on extensions of ideas used in [28]. As described
in Section IV-B, each face representation is of length (cid:2) =
p·(N + Q) = 900 bits. The Hamming distance between two
representations is known to be at most dmax = 180.
The secure protocol computing Fthreshold, where only
the client learns an output, is described in Figure 2. In
the protocol the client and server ﬁrst use homomorphic
encryption to count the number of locations in which their
two input words differ. The result is in the range [0, dmax].
None of the parties learns this value, but the client learns
the sum of the Hamming distance and of a random number
r chosen by the server. Next, the two parties use 1-out-
of-(dmax + 1) oblivious transfer to map the result to the
appropriate output value: The sender is the server, and it sets
the OT inputs to be X0, . . . , Xdmax+1 where Xj is equal to
1 if j + r mod (dmax + 1), is between 0 and the threshold
ti. The receiver is the client. Its input to the OT is the sum
of the Hamming distance and r.
is
client’s
0, . . . , wi
Fthreshold(w, (w1, . . . , wN ))
a binary word w =
INPUT: The
input
(w0, . . . , w(cid:2)−1), the server’s input is a list (database) of N
binary words, w1, . . . , wN , where wi = (wi
(cid:2)−1). The
server has additional inputs t1, . . . , tN , which are the thresholds
associated with each database word.
In addition, the parties know an upper bound dmax on the
Hamming distance between two words. In general, dmax = (cid:2),
but in our application we know that dmax ≤ 180.
OUTPUT: The client learns the indices i for which dH (w, wi) ≤
ti. The server learns nothing.
The protocol uses a homomorphic encryption function, Epk(·).
The plaintexts are in a ring or a ﬁeld F. pk is a public key that
both parties know, but only the client knows the corresponding
private key and can decrypt messages.
server