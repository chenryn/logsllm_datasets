76
94
95
93
81
73
86
99
80
89
85
26
44
17
68
38
50
96
84
18
37
74
87
71
83
70
91
53
78
35
27
92
72
75
90
88
42
64
82
60
45
57
43
59
55
62
47
48
67
49
61
51
46
66
52
34
36
56
65
10
63
1
58
4
23
22
54
79
77
28
19
6
31
5
0
29
11
32
3
24
12
2
21
15
30
14
9
13
7
25
39
40
41
20
33
16
8
73
86
99
80
81
93
95
83
71
87
90
75
72
92
82
89
85
70
44
68
17
50
38
26
78
53
18
96
84
37
69
97
98
76
94
88
64
42
57
43
61
51
60
45
59
55
62
46
66
47
52
48
34
36
67
49
56
65
24
12
39
40
41
2
20
33
74
10
1
63
0
29
11
32
3
91
35
27
4
79
58
23
54
28
77
19
22
6
31
5
21
15
30
16
8
13
7
25
14
9
(a) The system is deployed and con-
verged to a stable state.
(b) When a new conﬁguration is de-
ployed, inter-shape links are reset, and
nodes may be assigned to a new shape.
(c) After 2 rounds, nodes that did not
change shape are already converged,
and the newly introduced shape is start-
ing to form.
(d) The system reaches its new stable
state after 5 rounds, faster than from a
random start.
Figure 9: Dynamic reconﬁguration and convergence to a new stable state.
 30
 25
 20
 15
 10
 5
e
g
r
e
v
n
o
c
o
t
s
d
n
u
o
r
f
o
#
 0
 100
Shape Building
Same Shape (SSP)
Remote Shape (RSP)
Port Selection
Port Connection
 1000
# of nodes (log scale)
 10000
e
g
r
e
v
n
o
c
o
t
s
d
n
u
o
r
f
o
#
 18
 16
 14
 12
 10
 8
 6
 4
 2
 0
Shape Building
Same Shape (SSP)
Remote Shape (RSP)
Port Selection
Port Connection
 0
 5
 10
# of basic shapes
 15
 20
Figure 10: Convergence time of the PLEIADES protocols
for a system of 20 connected rings (a ring of rings), for
various system sizes. PLEIADES converges rapidly and
scales well with the number of nodes.
Figure 11: Convergence time of the PLEIADES protocols
for a system of 25,600 nodes implementing a ring of
rings, for various numbers of rings. The convergence time
of PLEIADES only slowly increases with the number of
individual rings.
To conclude, PLEIADES is extremely resilient, even in
dramatic scenarii where a large proportion of the network
is affected (up to 50%). The most difﬁcult case is actually
the initial cold start, because nodes start with very little
information. In all other scenarii we tested, at least some nodes
keep their knowledge of the network, which is enough to speed
up the process.
V. RELATED WORK
Wireless Sensor Networks (WSN) have been a fertile ground
for holistic programming frameworks aiming to simplify the
programming of a very large number of distributed entities, as
PLEIADES seeks to achieve.
Among them, approaches such as Kairos [14] and Reg-
iment [30] draw their inspiration from existing distributed
programming models. They provide means to quantify over
multiple nodes, and hide the details of inter-node communi-
cation and coordination. Adopting a different stance, acqui-
sitional query processors (e.g. TinyDB, Cougar, MauveDB)
completely hide individual nodes, and provide a usually
declarative approach to express which kind of data to sense,
when, where and how often to sense and to aggregate it [11],
[21], [4]. Sensing queries are then transparently mapped
onto the WSN, taking into account various constraints such
as energy consumption and reliability. Both node-dependent
macro-programming approaches and acquisitional query pro-
cessors move away from individual nodes and towards holistic
programming abstractions. None of them however is able
to maintain the distributed structural invariants supported by
PLEIADES.
Originally proposed in the context of ﬁxed networks [12],
tuple-spaces provide a shared memory data abstraction to dis-
tributed systems in which tuples can be written to, read from,
and queried by individual nodes. The model has been ported to
551
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:50:29 UTC from IEEE Xplore.  Restrictions apply. 
)
d
n
u
o
r
/
s
e
t
y
b
(
h
t
d
w
d
n
a
B
i
 1000
 900
 800
 700
 600
 500
 400
 300
 200
 100
 0
 0
 5
Shape Building Protocol
Overhead of PLEIADES
 15
 10
Rounds
 2.5
 2
 1.5
 1
 0.5
o
i
t
a
r
h
t
d
w
d
n
a
B
i
Ratio of overhead bandwidth 
 over baseline bandwidth
Initial convergence
Convergence after 50% crash
Convergence after repair (statefull)
Convergence after repair (stateless)
20
15
10
5
e
g
r
e
v
n
o
c
o
t
s
d
n
u
o
r
f
o
#
 20
 0
 0
 10
 20
# of basic shapes
 30
 40
 50
0
100
1000
10000
# of Nodes (log scale)
Figure 12: Bandwidth overhead of
PLEIADES over the shape building
protocol, per node, per round (20
shapes, 25,600 nodes). Both protocols
peak once all views have stabilized,
and remain below 1kB (2kB in total).
Figure 13: Evolution of the bandwidth
overhead of PLEIADES (ratio) vs. the
number of basic shapes (25,600 nodes,
stable state). PLEIADES’s overhead re-
mains very small even for 50 basic
shapes (< 2kB in absolute value).
Figure 14: PLEIADES’s convergence
time after half of
the nodes have
crashed, and after re-injecting new
nodes (4 connected rings, note the log
x axis). PLEIADES’s stabilization speed
is logarithmic in the system’s size.
98
89
79
76
86
88
85
39
93
40
91
95
90
34
36
58
96
74
66
84
53
97
49
46
45
73
72
85
90
74
82
70
75
83
79
84
68
88
89
91
92
97
95
93
42
44
94
39
38
87
53
55
69
99
96
98
76
77
95
94
42
96
97
98
99
93
92
91
90
68
89
39
38
37
36
34
40
44
45
46
48
51
52
54
63