# Docker for Windows本地提权漏洞分析与利用
##### 译文声明
本文是翻译文章，文章来源：srcincite.io
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 一、前言
我一直在寻找常见应用程序中是否存在可以用来突破Windows系统的漏洞，今年3月份我发现了一个有趣的漏洞，值得与大家一起分享。虽然内核漏洞的发现过程非常吸引人，但许多Windows核心应用及第三方应用在逻辑层面存在一些根源性缺陷，最终可以被攻击者利用，无需绕过一些内存缓解机制就能获取SYSTEM权限。
在本文中我介绍了[CVE-2018-15514](https://srcincite.io/advisories/src-2018-0026)漏洞的发现及利用过程，这是Docker
for
Windows应用中存在的一个.net反序列化漏洞。Docker最初否认应用中存在这个漏洞，但随后在7月19日发布了修复补丁。进一步讨论后，他们最终在8月18日为该漏洞分配了一个编号：CVE-2018-15514。
## 二、简介
Docker for Windows为Windows 10及以上系统提供了64位安装包。我快速搭建了一个Windows 10
64位虚拟机用来测试。Docker的官网上有这样一段话：
> （Docker for Windows）是一个集成的、易于部署的开发环境，可以在Windows PC上构建、调试及测试Docker应用。Docker
> for Windows是一个原生的Windows应用，与Hyper-> V虚拟化网络及文件系统深度集成，因此是Windows上最快速、最可靠的Docker环境。
默认情况下，Docker for Windows会安装一个客户端及服务端应用。
## 三、发现漏洞
使用SysInternals的Process
Explorer来浏览当前正在运行的进程后，我发现了名为`com.docker.service`的一个进程。这个进程已经创建了几个命名管道（NamedPipe），分别为`dockerBackend`以及`dockerLogs`，使用.net语言开发：
图1. 查找命名管道
###  检查权限
一旦找到可能存在攻击面的命名管道后，重要的一步就是检查命名管道上已设置的权限，判断低权限用户是否可以访问这个管道。该接口中一旦存在任何漏洞，则意味着低权限的攻击者可以成功提升到SYSTEM级别。
为了检查相关权限，我使用了来自Beyond Logic的Craig Peacock所开发的[Pipe Secuirty
Viewer](http://retired.beyondlogic.org/solutions/pipesec/pipesec.htm)。虽然这个工具已有一些年头，但的确能够完成任务（欢迎大家积极献策，推荐其他可用的工具）。
简单运行工具后，我们可以获取到系统中当前正在运行的命名管道列表。指定我们需要的`\\NamedPipe\dockerBackend`管道后，可以看到哪些用户和组具备访问权限，并且每个对象具备什么权限。
图2. 可以访问命名管道的用户和组
其中我注意到一个用户是`docker-users`组，当安装Docker for
Windows时就会创建这个组。简而言之，这个组对应的是想访问容器（container）的账户。这看起来非常有趣，因此我决定检查这个组的权限。事实证明这些用户获取的权限非常宽泛。
图3. `docker-users`组对`dockerBackend`命名管道的权限
快速在Google上搜索后，我发现有人[建议](https://github.com/docker/for-win/issues/868#issuecomment-312639000)管理员把用户添加到这个组中，但Docker官方并没有对此给出具体的解释。
图4. 非官方文档建议管理员将用户添加到`docker-users`组中
###  寻找有效数据
此时我需要找到一些有效数据，将这些数据发送到我们刚发现的这个端点。此时我可以选择深入分析源代码，但实话实说，当时我猜测Docker for
Windows应该会通过这个命名管道进行一些复杂的解析操作。目前并没有太多工具可以用来嗅探命名管道的数据，我发现了[I/O
Ninja](http://ioninja.com/)这款工具，该工具包含一个模块，完全可以胜任这个任务。
图5. 利用I.O Ninja捕捉命名管道数据
我在工具中为`dockerBackend`设置了一个过滤器，然后继续运行客户端，导出的输出信息如上图所示。紫色圆圈标记出来的是缓冲区的大小，紧随其后的是一个.net序列化对象。
## 四、漏洞分析
此时我们可以深入分析经过反汇编处理的源代码，来证实我们之前的猜测。这里我使用的是[dnSpy](https://github.com/0xd4d/dnSpy)这款工具，利用该工具加载`C:\Program
Files\Docker\Docker\com.docker.service`这个二进制文件。快速检查后，我们发现存在漏洞的代码的确位于`Docker.Core.Pipe`命名空间的`Docker.core.dll`二进制文件中。
在这个命名空间中，我们可以看到有个`NamedPipeServer`类，该类执行的第一个方法为`Run`方法：
            public void Run()
            {
                this._cts = new CancellationTokenSource();
                CancellationToken token = this._cts.Token;
                this._currentRunningTask = this.DoRunAsync(token);
            }
`Run`方法会调用`DoRunAsync`方法。
            private async Task DoRunAsync(CancellationToken token)
            {
                while (!token.IsCancellationRequested)
                {
                    NamedPipeServer.<>c__DisplayClass10_0 <>c__DisplayClass10_ = new NamedPipeServer.<>c__DisplayClass10_0();
                    <>c__DisplayClass10_.<>4__this = this;
                    try
                    {
                        <>c__DisplayClass10_.pipeServer = PipeHelper.NewServerStream(this._pipeName, this._usersGroup.Sid);
                    }
                    catch (Exception e)
                    {
                        this._logger.Error(string.Format("Unable to create a pipe: {0} {1}", e.Message, e.StackTrace));
                        continue;
                    }
                    try
                    {
                        await <>c__DisplayClass10_.pipeServer.WaitForConnectionAsync(token);
                    }
                    catch (OperationCanceledException)
                    {
                    }
                    catch (Exception e2)
                    {
                        this._logger.Error(string.Format("Unable to connect: {0} {1}", e2.Message, e2.StackTrace));
                        continue;
                    }
                    Task.Run(() => <>c__DisplayClass10_.<>4__this.HandleRequestAsync(<>c__DisplayClass10_.pipeServer));
                    <>c__DisplayClass10_ = null;
                }
            }
然后`DoRunAsync`方法会调用`HandleRequestAsync`方法。
    private async Task HandleRequestAsync(NamedPipeServerStream pipeServer)
    {
        try
        {
            using (NamedPipeServerStream server = pipeServer)
            {