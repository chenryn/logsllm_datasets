如何创建密码，混淆密码的常用技巧以及最常用的单词。使用复杂规则集配合这些密码字
典，可以让我们以极快的速度破解密码（有时超过25个字符）。但请记住，你的密码列表取
决于你构建和维护它的程度。作为红队队员，我们会定期跟踪我们破解的所有帐户，对其进
行分析并将其添加到我们的密码字典中。我们还会不断监控新的数据泄露事件，访问
pastebin 和 pastie 网站等，以查找更新的密码。此处有一个很好的监控列
表：https://inteltechniques.com/OSINT/pastebins.html 。
我最喜欢的密码列表：
berzerk0的 Real-Password-WPA 密码列表：
18.6 GB 未压缩
http://bit.ly/2EMs6am
berzerk0 的字典风格的列表：
1 GB 未压缩
http://bit.ly/2GXRNus
Xato 的千万数量的密码
magnet:?xt=urn:btih:32E50D9656E101F54120ADA3CE73F7A65EC9D5CB
228
第8章 特勤组——破解、漏洞利用和技巧
Hashes.org
https://hashes.org/left.php
几千兆字节，而且每天都在增长
Crackstation
15 GB 未压缩
https://crackstation.net/files/crackstation.txt.gz
Weakpass（弱密码）
大量的密码列表
https://weakpass.com/wordlist
First20Hours
该项目包含按频率顺序排列的10,000个最常见的英语单词列表，由 Google 的万亿字
词数据库的 n-gram 频率分析确定。
https://github.com/cyberspacekittens/google-10000-english
SkullSecurity.org
优秀的旧密码列表，如 rockyou，myspace，phpbb
https://wiki.skullsecurity.org/Passwords
Daniel Miessler 的密码编译
https://github.com/cyberspacekittens/SecLists
Adeptus-mechanicus 哈希脱库
http://www.adeptus-mechanicus.com/codex/hashpass/hashpass.php
通过优秀的密码列表组合，我们可以基于列表添加规则来找到更多密码。就 Hashcat 而言，
规则会确定是否需要在词表中进行任何修改和扩展。描述规则的最佳方式是使用这一个易于
理解的示例。我们可以使用 KoreLogicRulesAppendYears 规则集，如下所示：
cAz”19[0-9][0-9]”
Az”19[0-9][0-9]”
cAz”20[01][0-9]”
Az”20[01][0-9]”
它将在每个密码中添加1949年到2019年的年份字符串。比如，如果密码列表中包含单词
“hacker”，它就会使用 “hacker1949” 来尝试破解哈希值，一直试到 “hacker2019”。请记住，
你拥有的密码规则越复杂，通过单词列表中的所有单词破解目标所需的时间就越长。
幸运的是，我们不需要创建自己的规则，因为网上已经有很多很好的规则。当然，还有默认
的 Hashcat 规则，它来自许多较旧的数据泄露，以及常见的密码破解技术。这是一个很好的
起点。Kore 规则来自 Korelogic 的密码竞赛，是其标准之一。另外的两个规则需要的时间更
久，但也有非常详细的规则集，分别是 NSAKEY 和 Hob0Rules。在过去，我会采取所有的规
则，将它们编入单个文件，并对文件去重。但是，现在， 规则实际上已经为你
NotSoSecure
做好了这些工作。
规则：
229
第8章 特勤组——破解、漏洞利用和技巧
Hashcat Rules
https://github.com/hashcat/hashcat/tree/master/rules
Kore Rules
http://contest-2010.korelogic.com/rules-hashcat.html
NSAKEY Rules（我的最爱之一）
https://github.com/cyberspacekittens/nsa-rules
Praetorian-inc Hob0Rules
https://github.com/cyberspacekittens/Hob0Rules
NotSoSecure —— 此规则包含上面全部规则
https://github.com/cyberspacekittens/password_cracking_rules
注：NSAKEY Rules、Praetorian-inc Hob0Rules 和 NotSoSecure 是原仓库的 Fork 版本。
彻底破解全部 —— 尽可能多地快速破解
你现在已有从 Cyber Space Kittens 入侵行动获得的一个很大的密码列表。那么在有限的时间
内，怎么能获得最好的收益呢？以下演练将指导你完成初始步骤来尽可能多地破解密码。虽
然，我们通常只需要找到几个域管理员/LDAP 管理员/公司管理员帐户，但我的强迫症倾向让
我试图破解所有密码。
在开始之前，你确实需要了解你的那些哈希值的密码格式。Hashcat 有一个很好的列表，展
示不同类型的哈希值的示例。一旦你知道了是什么类型的哈希算法，最好先进行一些初始测
试，以确定该密码哈希算法的速度是快还是慢。这将对你的密码破解方法有巨大的影响。例
如，在查看 Windows 系统下使用哈希算法时，我们看到 NTLM(Windows) 执行速度大约为
75,000 MH/s。在 Linux下 运行 SHA-256算法的执行速度约为5,000 MH/s。
这意味着对于 SHA-256哈希，你的 GPU 可以每秒破解5,000,000,000次。这可能看起来很
多，但是当你有大量的单词列表和很大的规则集时，这个速度可能不够理想。这是因为与每
秒运算75,000,000,000个哈希值的 NTLM 相比，SHA-256算法的计算速度非常慢且成本高。
在我们的例子中，我们将全力以赴，我们将使用8个1080TI GPU 并使用 NTLM 的快速哈希转
储（dump）功能。
破解 CyberSpaceKittens NTLM 哈希：
获得域管理员访问权限后，你使用 DCSync 攻击从域控制器转储所有哈希值。你现在的目标
是尝试尽可能多地破解哈希。因为你知道，你将能够在未来的入侵活动中使用这些帐户，并
向受害者公司展示他们使用的不安全的密码的做法。
首先，我们将所有 NTLM Windows 哈希保存在一个名为 cat.txt 的文件中。为了使输出结果更
易于阅读，我们将省略初始的 hashcat 执行命令。每个命令执行都将以 hashcat -w 3 -m 1000
开头。
-o hashes.cracked ./hashes/cat.txt
230
第8章 特勤组——破解、漏洞利用和技巧
这句命令的意思为：
hashcat: 运行 hashcat
-w 3: 使用调整的配置文件
-m 1000: 哈希格式是 NTLM
-o hashes.cracked: 将结果输出到一个文件中
./hashes/cat.txt: 我们的哈希存储的地址
因此，每当你看到 [hashcat] 字符串时，请使用此命令替换它： hashcat -w 3 -m 1000 -o
hashes.cracked ./hashes/cat.txt 。现在，让我们在 8 GPU 1080TI 设备上快速高效地破解
NTLM 哈希。
使用 （-a 3）的攻击模式破解所有长度少于等于7个字符的密码。字符可以
brute-force
是任何字母、数字或者特殊字符（?a），启用增量破解模式从一个字符到七个字符进行
尝试（--increment）。
[hashcat] -a 3 ?a?a?a?a?a?a?a --increment
对于7个字符（字母/数字/特殊字符）的密码，破解总时间约为5分钟。我们可以设置
为8个字符，但我们看到设置8字符后，运行了9个小时。
你还可以将特殊字符限制为少数几个（！@ ＃＄ ％ ^），这能显著减少时间和复杂
性。
接下来，将所有常见密码列表转储与我们的哈希值进行比较。第一个文件
（40GB_Unique_File.txt）是一个3.2GB 的密码文件，运行大约需要9秒：
[hashcat] ./lists/40GB_Unique_File.txt
我们可以看到，速度快到即使是这么大的文件，运行也只需要几秒钟。为了提高效率，
我们实际上可以使用 * 运算符并与我们的 ./lists/ 文件夹中的每个密码列表进行比较。
[hashcat] ./lists/*
接下来，基于哈希算法的速度，我们可以对单个密码列表文件尝试不同的规则集。我们
将从 RockYou 规则集开始，破解这些 NTLM 哈希值大约需要2分9秒：
[hashcat] ./lists/40GB_Unique_File.txt -r ./rules/rockyou-30000.rule
注意：使用3 GB 文件设置的 NSAKEY 规则大约需要7分钟，使用 NotSoSecure 规
则集（组合了其他所有规则集的规则集）大约需要20分钟。
当我用回其他密码列表和规则集组合时。跟所有大型规则集和大型密码泄露列表的第一
次破解比较，我们通常可以至少提高30％以上的效率。
接下来，我们可以开始在密码列表的右侧添加字符，以提高破解更长密码的成功率。下
面看到的 命令会将每个字母/数字/特殊字符添加到密码右侧，从一个字符开始一直
-a 6
到最多四个字符：
[hashcat] -i -a 6 ./lists/found.2015.txt ?a?a?a?a
注意：这需要大约30分钟才能完成四个字符
我们也可以在密码列表的左侧添加字符。以下命令将每个字母/数字/特殊字符添加到密码
的左侧，从一个字符开始一直到最多四个字符：
[hashcat] -i -a 7 ?a?a?a?a ./lists/40GB_Unique_File.txt
注意：这需要大约30分钟才能完成四个字符
231
第8章 特勤组——破解、漏洞利用和技巧
Hashcat Utils：https://github.com/hashcat/hashcat-utils/releases 。Hashcat 有很多工具
可以帮助构建更好的密码列表。一个例子是组合器，它可以采用两个或三个不同的密码
列表并进行组合。使用小列表相对较快。使用我们的 shortKrak 列表并将其与自身相结合
会导致非常快速的破解：
./hashcat-utils-1.8/bin/combinator.bin lists/shortKrak.txt lists/shortKrak.txt >
lists/comboshortKrak.txt
使用一些列表比如“谷歌排名 top1000单词”会生成一个约1.4 GB 的文件，因此你必须注
意你选择的文件的大小。
./hashcat-utils-1.8/bin/combinator.bin lists/google_top_1000.txt
lists/google_top_1000.txt > lists/google_top_1000_combo.txt
注意：使用一个4MB 文件并运行 combinator 将导致生成体积一个大于25GB 的文
件。所以，要当心这些文件的体积大小。
很多时候，人们使用最多的密码不是常见的字典单词，而是基于他们的公司、产品或服
务的单词。我们可以使用客户网站创建自定义密码列表。可以提供帮助的两个工具是：
Brutescrape
Burp Wordlist Extractor
接下来，使用 PACK (Password Analysis and Cracking Kit) 工具对所有破解的密码进行
分析并创建掩码：
python ./PACK-0.0.4/statsgen.py hashes.password
python ./PACK-0.0.4/statsgen.py hashes.password --minlength=10 -o
hashes.masks
python ./PACK-0.0.4/maskgen.py hashes.masks --optindex -q -o custom-
optindex.hcmask
译者注：本书作者给出的关于 PACK 的链接
为：http://thesprawl.org/projects/pack/ ，但是你只要点了试试就会发现现在这
个连接被自动跳转到 PACK 作者的博客了。译文中的 PACK 工具的地址是译者
自己在 Github 找到的，因为链接变了，所以上面的 python 语句大家根据情况
做出调整。可以参考该工具的 README，非常详细。
使用新创建的掩码进行密码破解：
[hashcat] -a 3 ./custom-optindex.hcmask
使用 Pipal 分析你的密码列表可以更好地理解密码的基本词汇：
cd /opt/pipal
./pipal.rb hashes.password
看看这个列表，你可能会发现这家公司使用 作为默认密码，可能位于
resetme12345
密歇根州（列表里有底特律、老虎、足球这些词汇）。