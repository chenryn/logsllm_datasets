# Title: Neural Network-based Graph Embedding for Malicious Account Detection

## Authors
Ziqi Liu†⋆, ChaoChao Chen†⋆, Jun Zhou†, Xiaolong Li†, Feng Xu†, Tao Chen†, Le Song†‡  
†Ant Financial Services Group, Hangzhou, China  
‡Georgia Institute of Technology, Atlanta, USA  
{ziqiliu, chaochao.ccc, jun.zhoujun, xl.li, fuyu.xf, boshan.ct, le.song}@antfin.com

## Abstract
We present a neural network-based graph embedding method for detecting malicious accounts on Alipay, one of the world's leading mobile payment platforms. Our method adaptively learns discriminative embeddings from an account-device graph, leveraging two fundamental weaknesses of attackers: device aggregation and activity aggregation. Experimental results show that our method achieves superior precision-recall performance compared to existing methods.

## Keywords
Malicious account detection, Graph embedding

## 1. Introduction
Large-scale online services such as Gmail, Facebook, and Alipay have become popular targets for cyber attacks. Attackers create malicious accounts to propagate spam messages and seek excessive profits, which are detrimental to the ecosystem. Existing security mechanisms have extensively studied attack characteristics [1, 3-6] to distinguish between normal and malicious accounts.

Current research in this area can be categorized into three main directions:
1. **Rule-based methods** generate sophisticated rules for identification. For example, Xie et al. [5] proposed using "spam payload" and "spam server traffic" properties to generate high-quality regular expression signatures.
2. **Graph-based methods** reformulate the problem by considering the connectivity among accounts. This is based on the intuition that while attackers can evade individual detection, they cannot control interactions with normal accounts. Zhao et al. [6] analyzed connected subgraph components to identify large abnormal groups.
3. **Machine learning-based methods** learn statistical models using large amounts of historical data. Huang et al. [3] extracted features based on graph properties and built supervised classifiers, while Cao et al. [1] used unsupervised machine learning to aggregate behavioral patterns and uncover malicious accounts.

As attacking strategies evolve, it is crucial for detection systems to adapt. We summarize two key observations about attackers:
1. **Device Aggregation**: Due to economic constraints, attackers often use a small number of devices for multiple accounts.
2. **Activity Aggregation**: Attackers aim to achieve specific goals in a short time, leading to bursts of activity from malicious accounts.

These weaknesses have been analyzed, but it remains challenging to achieve both high precision and recall. Existing methods often set strict constraints to minimize false positives, but this can result in a high false negative rate due to the low signal-to-noise ratio. Normal accounts may share IP addresses with malicious ones, making it essential to consider both device and activity aggregation.

In this work, we propose Graph Embeddings for Malicious Accounts (GEM), a novel neural network-based graph technique that jointly considers device and activity aggregation. Our method models the topology of the account-device graph and the activities of accounts in the local structure. Unlike existing methods, GEM directly learns a function for each account given the context of the local topology and nearby account activities, thanks to the representation power of neural networks.

We deploy GEM at Alipay, where it detects hundreds of thousands of malicious accounts daily. Empirical results show that GEM significantly outperforms a graph-based system in terms of both precision and recall.

### Contributions
- We propose a novel neural network-based graph embedding method for identifying malicious accounts by capturing device and activity aggregation.
- Our method is applied at Alipay, one of the largest third-party mobile and online payment platforms, serving hundreds of millions of users.

## 2. Proposed Methods

### 2.1 Problem Definition
Consider a set of \( N_c \) accounts \(\{1, ..., i, ...N_c\}\) and \( N_d \) devices \(\{1, ..., j, ...N_d\}\). We observe \( M \) edges \(\{(i, j)\}\) between accounts and devices over a time period \([0, T)\). Each edge denotes that account \( i \) has activities (e.g., signup, login) on device \( j \). This forms a bipartite graph \( G \in \{0, 1\}^{N_c \times N_d} \).

The "device" can be a broad concept, such as an IP address, an IMEI ID, or even a Facebook page. We support more than two types of devices.

Associated with this graph, we observe the activities of each account. Let \( X \in \mathbb{R}^{N_c \times p} \) be a matrix where each row \( x_i \) represents the activities of account \( i \) discretized into \( p \) time slots.

Our goal is to discriminate between malicious and normal accounts. We want to learn a function \( f \) such that given any account \( i \), the graph \( G \), and activities \( X \), \( f(i, G, X) = y_i \in \{-1, 1\} \), where \( y_i \) is the true label of account \( i \).

### 2.2 A Motivating Example
- **Device Aggregation**: If an account shares devices with many other accounts, it is suspicious. One measure is the size of the connected subgraph components [6].
- **Activity Aggregation**: If accounts sharing common devices behave in batches, they are suspicious. The inner product of activities of two accounts sharing the same device can be used as a measure of affinity [6].

These measures are intuitive but sensitive to noisy data.

### 2.3 Our Method
To determine if an account \( i \) is malicious, we consider the local topology and the behaviors of other accounts in the time series. Inspired by Dai et al. [2], we treat each vertex (account or device) in graph \( G \) as a data point, with edges denoting relations. We learn effective embeddings \( \mu_i \) for each vertex based on device and activity aggregation:

\[
\mu_i^0 \leftarrow 0 \quad \text{for all } i
\]
\[
\mu_i^t \leftarrow T(W x_i + V \sum_{j \in N(i)} \mu_j^{t-1}) \quad \text{for } t = 1, ..., C
\]

where \( T \) is a nonlinear transformation (e.g., ReLU), \( N(i) \) is the set of neighbors of \( i \), and \( W \in \mathbb{R}^{k \times p} \) and \( V \in \mathbb{R}^{k \times k} \) are parameters. We set \( k = 16 \) and \( C = 5 \).

To learn \( W \) and \( V \), we use a logistic loss function:

\[
L(W, V, u) = - \sum_{i=1}^{N_c} \log \sigma(y_i \cdot u^\top \mu_i)
\]

where \( \sigma(x) = \frac{1}{1 + \exp(-x)} \) and \( u \in \mathbb{R}^k \).

Our algorithm iterates in an Expectation-Maximization style. In the E-step, we compute the embeddings based on current parameters. In the M-step, we optimize the parameters while fixing the embeddings.

## 3. Experiments

### 3.1 Datasets
We deploy GEM at Alipay, which serves over 450 million users. Our system targets millions of new registered accounts daily. We train our model using data from the past 7 days, resulting in several million accounts, tens of millions of associated devices, and billions of edges.

Activities are discretized into 168 time slots (7 days × 24 hours), with each slot representing the count of activities in that time slot. This results in a sparse matrix \( G \) and a dense matrix \( X \).

### 3.2 Experimental Settings
- **Evaluation**: Alipay identifies suspicious accounts and labels them after long-term observation.
- **Comparison Methods**: We compare GEM with a baseline method, connected subgraph components, similar to [6]. This method builds an account-account graph and uses the inner product of activities to split out normal accounts.

### 3.3 Results
Figure 2 shows the precision-recall curves. GEM significantly outperforms the connected subgraph method, achieving consistent high precision and recall. The largest connected subgraph in our dataset consists of 800 accounts, leading to high precision at low recall. GEM, however, automatically learns topological and activity patterns, resulting in a consistent high precision-recall curve.

## 4. Conclusion
We present GEM, a real system deployed at Alipay for detecting malicious accounts. GEM leverages device and activity aggregation and achieves superior precision-recall performance. Future work will focus on building a real-time detection system based on dynamic graphs.

## References
[1] Qiang Cao, Xiaowei Yang, Jieqi Yu, and Christopher Palow. 2014. Uncovering large groups of active malicious accounts in online social networks. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security. ACM, 477–488.

[2] Hanjun Dai, Bo Dai, and Le Song. 2016. Discriminative embeddings of latent variable models for structured data. In International Conference on Machine Learning. 2702–2711.

[3] Junxian Huang, Yinglian Xie, Fang Yu, Qifa Ke, Martin Abadi, Eliot Gillum, and Z Morley Mao. 2013. Socialwatch: detection of online service abuse via large-scale social graphs. In Proceedings of the 8th ACM SIGSAC symposium on Information, computer and communications security. ACM, 143–148.

[4] Gianluca Stringhini, Pierre Mourlanne, Gregoire Jacob, Manuel Egele, Christopher Kruegel, and Giovanni Vigna. 2015. Evilcohort: detecting communities of malicious accounts on online services. USENIX.

[5] Yinglian Xie, Fang Yu, Kannan Achan, Rina Panigrahy, Geoff Hulten, and Ivan Osipkov. 2008. Spamming botnets: signatures and characteristics. ACM SIGCOMM Computer Communication Review 38, 4 (2008), 171–182.

[6] Yao Zhao, Yinglian Xie, Fang Yu, Qifa Ke, Yuan Yu, Yan Chen, and Eliot Gillum. 2009. BotGraph: Large Scale Spamming Botnet Detection.. In NSDI, Vol. 9. 321–334.