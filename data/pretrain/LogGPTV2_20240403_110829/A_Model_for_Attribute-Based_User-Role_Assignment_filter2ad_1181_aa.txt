title:A Model for Attribute-Based User-Role Assignment
author:Mohammad A. Al-Kahtani and
Ravi S. Sandhu
A Model for Attribute-Based User-Role Assignment 
Mohammad A. Al-Kahtani  
George Mason University 
PI:EMAIL 
Abstract 
The  Role-Based  Access  Control  (RBAC)  model 
is 
traditionally used to manually assign users to appropriate 
roles,  based  on  a  specific  enterprise  policy,  thereby 
authorizing  them  to  use  the  roles'  permissions.  In 
environments where the  service-providing enterprise has 
a  huge  customer  base  this  task  becomes  formidable.  An 
appealing  solution  is  to  automatically  assign  users  to 
roles. The central contribution of this paper is to describe 
a model to dynamically assign users to roles based on a 
finite  set  of  rules  defined  by  the  enterprise.  These  rules 
take  into  consideration  the  attributes  of  users  and  any 
constraints  set  forth  by  the  enterprise’s  security  policy. 
The  model  also  allows  dynamic  revocation  of  assigned 
roles based on conditions specified in the security policy. 
The model provides a language to express these rules and 
defines  a  mechanism  to  determine  seniority  among 
different  rules.  The  paper  also  shows  how  to  use  the 
model to express Mandatory Access Controls (MAC). 
1. Introduction 
to 
superior  alternative 
Role-Based Access Control (RBAC) has emerged as a 
proven  and 
traditional 
discretionary and mandatory access controls [1, 2]. In 
RBAC permissions are associated with roles, and users 
are  made  members  of  appropriate  roles,  thereby 
acquiring the roles' permissions. This greatly simplifies 
management of permissions. Roles can be granted new 
permissions  as  new  applications  and  systems  are 
incorporated,  and  permissions  can  be  revoked  from 
roles  as  needed.  Usually,  the  enterprise  security 
officer(s)  manually  assign  users  to  roles  based  on 
criteria specified by the enterprise.  
Today,  an  increasing  number  of  service-providing 
enterprises make their services available to their users 
via the Internet.  RBAC can be used to manage users’ 
access  to  the  enterprise  services  and  resources.  In 
many environments, the number of users can be in the  
Ravi Sandhu  
SingleSignOn.net, Inc. &  
George Mason University 
PI:EMAIL
few.  This 
hundreds  of  thousands  or  millions.  Typical  examples 
are banks, utility companies, and popular Web sites, to 
name  a 
renders  manual  user-to-role 
assignment a formidable task.  
An appealing solution is to automatically assign users 
to roles. This automatic assignment should be based on 
what  attributes  users  have.  It  should  also  take  into 
account  any  constraints  laid  down  by  the  entity  that 
provides the service. 
In  this  paper,  we  describe  a  model  to  automatically 
assign users to roles based on a finite set of assignment 
rules  defined  by  authorized  people  in  the  enterprise. 
These rules take into consideration the attributes users 
own  and  any  constraints  set  forth  by  the  enterprise. 
Users’  attributes  can  be  provided  along  with 
identification  information  or  be  retrieved  from  a 
database.  
The model provides a language to express assignment 
rules  and  defines  a  mechanism  to  determine  seniority 
among them. When certain conditions hold, the model 
also  allows  dynamic  revocation  of  assigned  roles. 
Since  Mandatory  Access  Controls  (MAC)  are  widely 
used  in  the  military  sphere,  and  are  well  understood, 
the paper also shows how to use the model to express 
MAC using the proposed language. 
The  paper  is  organized  as  follows.  In  section  2  we 
summarize  related  research.  Section  3  describes  our 
model. In sections 4 and 5 we show how our model can 
be used in two real life examples: one from the private 
sector and the other from the military sector. In section 
6 we touch on issues that we have not explored in this 
paper,  though  they  are  closely  related  to  the  topic 
discussed. Section 7 concludes the paper. 
2. Related Work 
is 
The central concept of RBAC is the role, which can be 
viewed  as  a  semantic  construct  around  which  access 
control  policy 
formulated.  Permissions  are 
associated with roles. Users are assigned to appropriate 
roles based on factors such as their responsibilities and 
qualifications.  Users  can  be  easily  reassigned  roles. 
Roles can be granted new permissions, and organized 
in role hierarchies to reflect the organization’s lines of 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
responsibility  and  authority.  In  this  work  we  adopted 
RBAC96  model  presented  in  [2]  after  stripping  out 
sessions, as shown in Figure 1.  
(UA)  
User  
Assignment 
U 
Role 
Hierarchy
R
(PA)  
Permission  
Assignment 
P
Figure 1 Simplified RBAC 
the 
systems 
systems 
[3].  They 
in  which 
in  which 
When first developed, RBAC was intended for closed-
enterprise 
security 
administrator(s)  assign  roles  manually  to  users.  Park 
and Sandhu presented RBAC as a sound candidate to 
control users’ access to resources and services in large-
scale  Web  environments 
identified 
architectures that can be used to implement RBAC on 
the Web. They also showed how existing technologies 
can be utilized to support these architectures. However, 
the architectures proposed were only in the context of 
enterprise-wide 
systems 
administrators  assign  users  to  roles  on  the  basis  of 
users’ responsibilities in the enterprise.  
In [4], Herzberg et al. presented a Trust Establishment 
(TE)  system  that  defines  the  mapping  of  strangers  to 
predefined business roles, based on certificates issued 
by  third  parties.  Part  of  the  proposed  system  is  an 
XML-based  Trust  Policy  Language  to  map  users  to 
roles  using  well-defined  logical  rules.  Each  role  has 
one  or  more  rules  defining  how  a  client  can  be 
assigned  that  role. The  TE  system  gathers  certificates 
related  to  a  specific  client  and  makes  a  decision 
regarding the client’s eligibility for a specific role. The 
system  proposed  in  [4]  does  not  pay  attention  to 
relations  that  might  exist  among  different  rules. 
Another drawback in the TE system is that it is based 
on bottom-up buildup of the  public key infrastructure 
(PKI), which imports all the issues related to PKI. 
Another work that is closely related to [4] and to ours 
is  found  in  [5]  by  Zhong,  et  al.  They  proposed  a 
schema to use RBAC on the Web and a procedure for 
user-role assignment. Their schema assigns a client to 
a  role  based  on  legitimacy  of  information  gathered, 
assignment policies, and the  trustworthiness threshold 
specified by system administrators. Trustworthiness of 
a user is defined as clearance of the user. It represents 
the degree to which the enterprise believes that a user 
will  not  do  harm  to  its  Web  site  system.  It  is 
accumulated gradually over time and drops if harmful 
actions  or  potential  harmful  actions  are  discovered. 
There  is  a  major  drawback  to  this  approach.  A 
that 
list  of  distinguished  names 
malicious user may logon to the system for long time 
without doing any suspicious acts. As time goes on, he 
acquires a high clearance,  which  might enable him to 
inflict  damage  on  the  system.  Also,  the  scheme 
depends on  many security parameters,  which  must be 
given initial values. It leaves determining these values 
to  system  administrator(s),  but  does  not  provide  any 
guidelines on how to determine them. 
Lightweight  Directory  Access  Protocol  (LDAP)  is 
specifically  targeted  at  management  applications  and 
browser applications that provide read/write interactive 
access to directories supporting the X.500 models [6]. 
Roles can be stored in directories and retrieved  when 
needed.  LDAP  has  been  augmented 
to  support 
dynamic groups. A dynamic group is an object with a 
membership 
is 
dynamically  generated  using  LDAP  search  criteria. 
The dynamic membership list may then be interrogated 
by LDAP search and compare operations, and be used 
to  identify  a  group’s  access  control  subjects  [7]. This 
feature could be used to automatically assign users to 
roles  in  large  enterprises.  To  retrieve  the  roles  a 
specific  client  is  entitled  to  assume,  the  filter  in  the 
search operation is configured to reflect the attributes 
the client has. When the search operation is executed, 
LDAP  returns  a  list  of  the  attributes  extracted  from 
each  entry  that  matches  the  search  filter  specified  in 
the  search  operation.  The  LDAP  directory  can  be 
configured in such a way that returned attributes store 
the  roles  that  match  the  search  filter.  However, 
implementing  LDAP 
sake  of 
dynamically  assigning  users  to  roles  is  an  unwieldy 
solution. Also, LDAP returns a simple list of attributes 
(which  represent  roles  in  our  case)  with  no  logical 
structure attached to them. If, for example, a client can 
assume  one  of  two  mutually  exclusive  roles,  LDAP 
does not provide a simple mechanism to express this.  
Yao  et  al.  [8]  present  an  RBAC  model  that  does  not 
recognize  role  hierarchies  explicitly.      Instead,  they 
propose a role activation dependency that is dynamic. 
A set of parameterized rules governs the activation of 
every role. Their model is rich in terms of expressing 
the  rules,  and  associated  conditions.  However,  we 
think  that  eliminating  role  hierarchies  is  a  debatable 
issue to say the least. Role hierarchies have values not 
only from the user-assignment perspective of roles but 
also from the permission-assignment perspective. Also, 
by  making  the  hierarchies  implicit  via  side  effects  of 
role  activation  rules,  the  model  does  not  explicitly 
capture various relations that might exist among roles. 
solely 
the 
for 
3. The Model 
In the model we propose, we modify RBAC such that it 
becomes rule-based, as discussed below. Thus, we named 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
it  Rule-Based  RBAC  or  RB-RBAC.  In  this  model,  an 
enterprise  defines  the  set  of  rules  that  are  triggered  to 
automatically assign users to roles. These rules take into 
account: 
(cid:131)  The attributes of the client that are expressed 
using attributes’ expressions as defined by the 
language provided by the model. 
(cid:131)  Any constraints on using roles.  
Conditions
Constraints
Attributes 
Expressions 
Attributes 
values 
Users 
Roles 
Permissions
Figure 2 RB-RBAC model 
Figure 2 shows that users have many-to-many explicit 
relation with attribute values. Further, they have many-
to-many  implicit  relation  with  attribute  expressions. 
One user could have one or more attribute expressions 
depending on the information he provides. Conversely, 
two  or  more  users  may  provide  identical  attribute 
expressions.  A 
expression 
corresponds to one or more roles. An example of a rule 
that yields multiple roles is when a client is entitled to 
several mutually exclusive roles. The figure also shows 
that a role may be hierarchically related to one or more 
roles  (in  the  usual  partial  order  of  roles).  The  figure 
also shows that a role may correspond to one or more 
attribute expressions.  
In order to assign the role(s) specified by the rule to a 
client, the following must hold: 
attribute 
specific 
(cid:131)  The  client  must  provide  attributes 
that 
satisfy the attribute expressions. 
(cid:131)  All constraints must be observed. 
Conditions  allow  dynamic 
role 
assignment if a condition required by the assignment 
rule can no longer be satisfied. 
revocation  of 
3.1. Assumptions 
is 
1. Users are properly authenticated before our model is 
triggered to assign them roles. 
2. Role-permission  assignment 
relatively  stable 
compared to user-role(s) assignment. Thus automated 
permission-to-role  assignment  constitutes  a  good 
candidate for future work. 
3.Users’  attributes  are  provided  along  with 
the 
authentication  information  or  can  be  fetched  from 
databases.  
4.The number of users is much larger than the number 
of roles (such as, hundred of thousands or millions of 
users versus less than a hundred roles). 
  3.2. The Language 
7, 8, 9} 
REVOKED IF NOT [Conditions](cid:198) Roles. 
Rule ::= Attribute_Expression SUBJECTED TO [Constraints]  
3.3.3. The Start symbol: Rule 
3.3.4. The production rules (in BNF notation): 
Attribute_Expression ::= Expression 
Conditions ::= Expression 
Expression ::= Attribute_Pair  
3.3.1. The terminal symbols: {AND, OR, XOR, NOT, , ≤, ≠, ≥, 
IN, “SUBJECTED TO”, “REVOKED IF NOT”, 0, 1, 2, 3, 4, 5, 6,  
The values of the non-terminal symbols Set, 
 Attribute, Attribute_Value, Role and Constraint are specified  
by the organization. 
3.3.2. The non-terminal symbols: {Attribute_Expression,  
Attribute_Pair, Relation_Operator, Operator, Attribute, Roles, 
 Constraints, Num, Digit, Conditions,Set,Range,Role,Attribute_Value}
Using  context-free  grammar,  we  define  the  language 
given in Figure 3, which is largely self-explanatory. 
Operator ::=  AND | OR | XOR 
Relation_Operator ::=   | ≤ | ≠ | ≥ 
Attribute ::= {specified by organization}     
Attribute_Value ::= {specified by organization}     
Set ::= {specified by organization} 
Range ::= (Num..Num) 
Num ::= Num Digit 
Digit ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 
Role ::= {specified by organization}  
Constraint ::= {specified by organization}   
| Roles Operator Roles  
| (Roles Operator Roles) 
| Role 
| Expression Operator Expression  
| (Expression Operator Expression) 
| Constraint Operator Constraint  
| (Constraint Operator Constraint) 
Attribute_Pair ::= Attribute Relation_Operator Attribute_Value 
| Attribute [NOT] IN Set 
| Attribute [NOT] IN Range 
Constraints ::= Constraint 
Roles ::= [NOT] Roles 
Figure 3: RB-RBAC Language 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
We  kept  the  language  simple  but  extendable  to  show 
the  usability  of  the  model.  We  are  working  on  many 
possible extensions, some of which are discussed later 
in this paper.  
3.3. The Seniority Levels 
The  attributes  provided  by  a  user  may  not  literally 
meet 
the  Attribute_Expression  requirement  of  a 
specific rule. In some cases, they might provide more 
than what is called for by the rule. In real life, such a 
user  is  entitled  to  assume  the  role  specified  by  that 
rule. The language as defined above does not provide a 
mechanism  to  compare  the  attributes  provided  by  the 
users  to  those  required  by  a  rule.  Also,  it  might  be 
desirable  to  compare  two  rules.  To  do  this,  we 
introduce seniority levels: 
(cid:131)  Attributes’  values  specified  by  the  organization 
are  given  seniority  levels  showing  what  value 
dominates  what.  In  case  of  numeric  values, 
seniority automatically follows the normal order 
of values when we have the following syntax:  
Attribute ≥ numeric value or  
Attribute > numeric value 
However,  seniority  levels  go  in  reverse  order 
with  numeric  values  when  the  syntax  is  in  the 
following form: 
Attribute < numeric value or  
Attribute ≤ numeric value  
In  case  of  equality,  inequality,  sets,  and  ranges, 
seniority levels must be manually specified.  
(cid:131)  Two  (Attribute_Expression)s  are  said  to  be 
comparable only if  
1. They  have 
identical 
structures 
(syntax) 
according to our notation, and 
2.They are subjected to the same constraints 
(cid:131)  Only  comparable  (Attribute_Expression)s  are 
tested for seniority. 
Attribute_Expressionj: 
(cid:131)  We use the symbol ≥ to denote dominance. 
(cid:131)  We  say  Attribute_Expressioni  dominates  (≥) 
If  ∀  x,y:  x  is  the  ith  attribute  value  ∈ 
ith 
Attribute_Expressioni  and  y 
the 
attribute value ∈ Attribute_Expressionj,  
is 
then 
  Seniority  Level  of  (x)  ≥  Seniority  Level  of 
(y)  
by 