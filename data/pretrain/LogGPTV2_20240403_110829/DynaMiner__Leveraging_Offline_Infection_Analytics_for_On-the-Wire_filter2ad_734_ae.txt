compare the accuracy with the results of our classiﬁer.
Overall effectiveness. As shown in Table V, DYNAMINER
outperforms the current state of practice malware detectors by
a visible margin (11.5% to be precise). Given the unique angle
we explored to tackle malware infection, the results conﬁrm
that our payload-agnostic, graph-centric, and comprehensive
analytics of infection dynamics is practically effective. Being
a learning-based system, DYNAMINER faces challenges in
terms of false signals. In the following, we analyze the reasons
behind misclassiﬁcations we encountered in our tests.
Analysis of false positives. False positives are benign WCGs
ﬂagged as infection by our ERF classiﬁer. As we indicated
in Section II, legitimate download sources are excluded from
our WCG construction. However, users often download benign
content from unofﬁcial sources. By cross-checking the hash
values of downloaded payloads, we conﬁrmed that 37 of the 49
false positives in DYNAMINER have download dynamics that
connects to unofﬁcial sites that deliver benign content. Since
DYNAMINER does payload-agnostic analysis, based primarily
on graph-centric properties, it ﬂagged those WCGs as infections.
In the remaining 12 cases of false positives, we noticed the
client downloaded large binaries (in the range 246MB - 1.1GB)
and a long list of videos downloaded from torrent sites. In
addition to the size of downloads, the overall duration is also
exceptionally long —which resulted in ﬂagging the benign
WCGs as infectious.
Analysis of false negatives. False negatives are infection
WCGs ﬂagged as benign by our ERF classiﬁer. Through
manual analysis of the 206 infection WCGs that DYNAMINER
ﬂagged as benign, we identiﬁed two major causes. Firstly, we
noticed the absence of redirections but delivery of compressed
malicious payload. In particular, we conﬁrmed 89 cases of no
redirections but compressed payload download. The second
source of false negatives is the absence of post-download graph
dynamics. This is not totally surprising since we have already
conﬁrmed that about 8% of our ground truth dataset does not
contain post-download dynamics. Note that we could have
avoided such misclassiﬁcations by excluding infection WCGs
that have no post-download dynamics. We decided to keep
them in the training set because of the rich dynamics they have
on top of the pre-download and download stages.
VI-C. Case Study 1: Forensic Detection
Potentially infectious web session. To evaluate DY-
NAMINER on a web session that is potentially infectious, we
selected a free live streaming service due the high likelihood
of malware infections according to a recent large-scale study
[20] on free streaming sites. Our case study was conducted
on a PCAP capture of a user who watched the ﬁnal game of
EURO2016 Soccer Tournament on July 10 2016 on a free live
streaming site (http://atdhe.net). On the browser, there
were 18 distinct tabs open during the streaming session. The
user occasionally switched to one of the tabs and clicked on
links. In the course of the 90 minutes streaming, the service
was interrupted 3 times and every time the page was reloaded,
there was a JavaScript pop-up that asked the user to click
on a download link that claims to ﬁx a “out-of-date player”.
The user intentionally clicked on the links all of which led
to other sites which appear to serve executables. The whole
session resulted in the download of 32 payloads and the longest
redirection chain was 4. The user’s host conversed with 12
unique remote domain names during the whole session.
Detection and comparison with VirusTotal. We deployed
DYNAMINER on a host and replayed the trafﬁc using a local
472
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:20:37 UTC from IEEE Xplore.  Restrictions apply. 
System
DYNAMINER
VirusTotal
# of WCGs Tested
benign: 1500, infection:7489
benign: 1500, infection:7489
Correctly Classiﬁed
False Positives
False Negatives
benign =1471 (98.1%), infection=7283 (97.38%)
benign=1409 (94.0%), infection =6310 (84.3%)
29
91
206
1179
∗
TABLE V: Classiﬁer performance on independent test data. ∗ For 110 of the 1179 infection WCGs, VirusTotal timed-out.
web server. In the course of the replay, DYNAMINER issued
5 infection alerts on a total of 3, 011 HTTP transactions (i.e.,
request-response pairs) in the stream. The redirection threshold
used for this evaluation was 3. Of the 5 alerts, 3 involved an
Adobe Flash player executable download, while the remaining 2
were a JAR ﬁle and a PDF. We submitted all the 32 downloaded
ﬁles to VirusTotal and at least 3 of the detectors in VirusTotal
ﬂagged as malicious 4 of the 5 payloads that DYNAMINER
alerted as malicious. On the PDF payload, all the 56 VirusTotal
detectors ﬂagged it as clean. As a follow-up, after 11 days, we
resubmitted to VirusTotal the same PDF that was ﬂagged clean.
Interestingly, 3 detectors ﬂagged it as malicious for the ﬁrst
time. This shows that DYNAMINER can ﬂag a malware that
took VirusTotal detectors 11 days to pick up. Note that prior
work [12] has also conﬁrmed similar experience of VirusTotal
detectors lagging an average of 9.25 days in ﬂagging malware.
VI-D. Case Study 2: On-the-Wire Detection
Mini-enterprise setup. In this setup, DYNAMINER is
deployed as a web proxy in a 3-host mini-enterprise network.
The three hosts are a MacOS host with Google Chrome, a
Ubuntu host with Firefox, and a Windows host with Internet
Explorer. DYNAMINER intercepts all HTTP transactions from
the three hosts and performs live analysis. This setup was run
for 48 hours while the users were performing their routine
web browsing. The Windows host is setup with COTS AV
engine while the other two did not have one. The three hosts
downloaded 62 ﬁles during the course of the case study and the
average redirection length is 2 with the maximum redirection
chain of 6.
Live alerts. Table VI summarizes the live case study in
terms of the various payload types downloaded on each host,
the maximum and average redirection chain length, and the
breakdown of alerts issued by DYNAMINER. As shown in the
last row, DYNAMINER issued 8 alerts (4 on the Windows host,
3 on the Linux Host, and 1 on the MacOS host). 3 of the 4
alerts on the Windows host are issued right after a download
of an Adobe Flash payload while 1 is after JAR payload was
downloaded. Note that the AV on the windows host, which
was enabled during the case study, did not issue any alert on
when these payloads were downloaded. On the Ubuntu host,
all the 3 alerts are related to a download of JAR payloads,
while the one on the MacOS host is a “.dmg” executable. We
submitted all the 62 ﬁles to VirusTotal and it ﬂagged (malicious)
all the 8 that are relevant to the alerts by DYNAMINER. In
addition, VirusTotal ﬂagged as malicious 2 PDF ﬁles that were
downloaded on the Windows host, but DYNAMINER issued
no alert pertinent to the download of these PDF ﬁles.
False signal investigation. As a payload-agnostic system, if
the maliciousness of an exploit payload manifests on its content
or its behavior, DYNAMINER will likely ﬂag it as benign. To
understand why DYNAMINER could not issue alerts around the
download of the 2 PDF ﬁles, we conducted a tool-supported
investigation. In particular, we analyzed the PDF ﬁles with
PDF Stream Dumper [2], which revealed Flash ﬁles embedded
in the PDFs. We believe that VirusTotal deemed these ﬁles
based on analysis results of its signature- and/or content-based
malware detectors (3/56 malicious detections are all from AV
engines for both PDF ﬁles).
Windows Host Ubuntu Host MacOS Host
Total
PDF
Executable
Flash
Silverlight
JAR
Avg. Redirection Chain
Max. Redirection Chain
DYNAMINER Alert
11
6
0
0
5
2
6
4
15
0
0
0
8
2
4
3
6
8
0
0
3
2
3
1
TABLE VI: Live detection summary on 48 hours of HTTP
trafﬁc streaming.
VII. DISCUSSION AND LIMITATIONS
We demonstrated how we can tap into the rich dynamics of
a web conversation to learn distinguishing insights for payload-
agnostic malware detection. DYNAMINER is driven by an
assumption that the web conversation exhibits a certain degree
of dynamism centered around download, redirections, and post-
download dynamics. We also note that our system operates on
unencrypted HTTP conversation. In what follows, we highlight
evasion attempts that a determined adversary may employ to
circumvent our ERF classiﬁer.
Cloaked download dynamics. Although there is a trend
in shifting to in-memory infections by exploit kits (e.g.,
Angler) [22], the infection trend we studied shows that ﬁle-
based infections are by far the most predominant and consistent
for the last 3 years. In fact, we found out that all the infection
sessions we analyzed for training our classiﬁer involved a
download of an exploit payload for accomplishing an attack.
We note that even if a WCG misses download dynamics, but
has redirections and post-infection call-back, we believe it
will still be classiﬁed as infectious due to the prediction score
averaging by the ERF classiﬁer which reduces the variance.
Cloaked redirection dynamics. Sometimes, infections may
skip redirections to directly lead a victim to an exploit server.
Although we have very few instances (11 in our dataset)
of WCGs without redirects, it is a trade-off that attackers
consider to complicate detection efforts. In theory though,
an attacker may attempt to evade DYNAMINER by avoiding
redirections and directly infecting the victim via drive-by or
ﬁleless infection. If she chooses ﬁleless infection, DYNAMINER
may not be able to detect as the resulting WCG will miss the
most revealing features.
Post-download tweaks. Contrary to the common case of
post-download dynamics we observed in our dataset, a malware
author may cloak post-download by either (a) doing nothing
after a successful infection or (b) delaying the call to the C&C
server. For the former, it signiﬁcantly limits the effectiveness of
the attack in exﬁltrating valuable information from the victim
473
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:20:37 UTC from IEEE Xplore.  Restrictions apply. 
host. Hence, if at all it happens, it is rather in favor of the
defender. In the latter case, DYNAMINER may miss the post-
download dynamics as it is not trivial to learn the timing pattern
of what plays out after infection.
VIII. RELATED WORK
We discuss related work focusing on graph-based malware
detection and exploit kit analysis and detection.
Graph and tree-based infection abstraction. Kwon et
al. [12] capture download activity on end hosts and explore
the growth patterns of benign and malicious graphs to build
a classiﬁer. SpiderWeb [25] leverages redirections browsers
go through to detect malicious web pages. BotHunter [8]
synthesizes evidence of malware infection by tracking dialogue
between internal host and external entities of a network.
WebWittness [16] studies the origin of malware by tracing
back the web paths followed by users who fall victim to
malware downloads. In a follow-up work to WebWitness,
Nelms et al. [17] present a systematic study on characterization
and detection of social engineering attacks that lure users
to download malware. In a malware distribution context,
Nazca [9] identiﬁes infectious downloads and installations in
large scale networks. BotGrep [15] localizes botnet members
based on the unique communication patterns arising from their
overlay topologies used for command-and-control. Mekky et
al. [14] developed a decision tree classiﬁer based on HTTP
redirection trees of browsing traces. CAMP [21] is an in-
browser system for content-agnostic malware protection based
on binary reputation. Amico [28] detects malicious downloads
based on provenance of downloaded ﬁles in a windows host.
DYNAMINER differs from this body of work in its richer
abstraction and comprehensive analytics of WCGs.
Exploit kit malware analysis and detection. In [26], Taylor
et al. detect exploit kit malware through tree similarity of HTTP
ﬂows. In a follow-up work [27], they leverage honeyclient-
based detection of exploit kits on a network. Compared
to [26, 27], our methodology in DYNAMINER differs in
the payload-agnostic graph abstraction of infection dynamics.
WebWinnow [7] leverages honey-clients to capture exploit kit
behaviors for malicious URL detection. Kizzle [24] employs
hierarchical clustering of unpacked malicious JavaScript code
to generate exploit kit signatures. DYNAMINER complements
these works by abstracting WCGS in a comprehensive manner.
IX. CONCLUSION
This paper presented DYNAMINER, a payload-agnostic
system that performs web conversation graph analytics to
uncover malware infection insights. By enriching the malware
download phenomenon with pre-infection and post-infection
dynamics, we demonstrate the effectiveness of graph features
to distinguish malware infections in an evasion-resilient fashion.
We evaluated DYNAMINER on multiple test sets of infection-
free and infection WCGs and it achieved a TP rate of 97.3%
with a FP rate of 1.5%. We also demonstrated the forensic
and live detection capabilities of DYNAMINER with two case
studies that demonstrate the effectiveness of our approach in
detecting unknown malware days before VirusTotal detectors.
X. ACKNOWLEDGEMENTS
This material was supported in part by National Science
Foundation grant CNS-1514472 and by a Defense Advanced
Research Projects Agency / Air Force Research Lab contract
FA8650-15-C-7561. Any opinions, ﬁndings, and conclusion or
recommendations expressed in this material are those of the
authors and do not necessarily reﬂect the view of the NSF,
DARPA, AFRL, or the US government.
REFERENCES
[1] Ensemble random forest classiﬁer. http://scikit-learn.org/stable/modules/generated/
sklearn.ensemble.RandomForestClassiﬁer/.
[2] Pdf stream dumper. https://github.com/dzzie/pdfstreamdumper/.
[3] Threatglass. http://www.threatglass.com/pages/.
[4] Virustotal. https://www.virustotal.com/.
[5] Marco Cova, Christopher Kruegel, and Giovanni Vigna. Detection and analysis of
drive-by-download attacks and malicious javascript code. In WWW, 2010.
[6] Brad Duncan. How the EITest Campaign’s Path to Angler EK Evolved Over Time.
http://researchcenter.paloaltonetworks.com/tag/angler-exploit-kit/, 03 2016.
[7] Birhanu Eshete and V. N. Venkatakrishnan. Webwinnow: Leveraging exploit kit
workﬂows to detect malicious urls. In ACM CODASPY, pages 305–312, 2014.
[8] Guofei Gu, Phillip Porras, Vinod Yegneswaran, Martin Fong, and Wenke Lee.
BotHunter: Detecting Malware Infection Through IDS-driven Dialog Correlation.
In USENIX SEC, 2007.
[9] Luca
Invernizzi, Stanislav Miskovic, Ruben Torres, Christopher Kruegel,
Sabyasachi Saha, Giovanni Vigna, Sung-Ju Lee, and Marco Mellia. Nazca:
Detecting Malware Distribution in Large-Scale Networks. In ISOC NDSS, 2014.
[10] Jaymesned. List of ransomware extensions and known ransom ﬁles created
by Crypto malware. https://www.reddit.com/r/sysadmin/comments/46361k/list of
ransomware extensions and known ransom/, 03 2016.
[11] Alexandros Kapravelos, Yan Shoshitaishvili, Marco Cova, Christopher Kruegel, and
Giovanni Vigna. Revolver: An automated approach to the detection of evasive web-
based malware. In USENIX SEC, 2013.
[12] Bum Jun Kwon, Jayanta Mondal, Jiyong Jang, Leyla Bilge, and Tudor Dumitras.
The Dropper Effect: Insights into Malware Distribution with Downloader Graph
Analytics. In ACM CCS, 2015.
[13] Long Lu, Vinod Yegneswaran, Phillip Porras, and Wenke Lee. Blade: An attack-
agnostic approach for preventing drive-by malware infections. In ACM CSS, 2010.
[14] Hesham Mekky, Ruben Torres, Zhi-Li Zhang, Sabyasachi Saha, and Antonio Nucci.
Detecting malicious HTTP Redirections Using Trees of User Browsing Activity.
In IEEE INFOCOM, 2014.
[15] Shishir Nagaraja, Prateek Mittal, Chi-Yao Hong, Matthew Caesar, and Nikita
Borisov. BotGrep: Finding P2P Bots with Structured Graph Analysis. In USENIX
SEC, 2010.
[16] Terry Nelms, Roberto Perdisci, Manos Antonakakis, and Mustaque Ahamad.
WebWitness: Investigating, Categorizing, and Mitigating Malware Download Paths.
In USENIX SEC, 2015.
[17] Terry Nelms, Roberto Perdisci, Manos Antonakakis, and Mustaque Ahamad.
Towards Measuring and Mitigating Social Engineering Software Download Attacks.
In USENIX SEC, 2016.
[18] Phillip M. Hallam-Baker and Dan Connolly. Session identiﬁcation uri. https:
//www.w3.org/TR/WD-session-id/.
[19] Niels Provos, Panayiotis Mavrommatis, Moheeb Abu Rajab, and Fabian Monrose.
All your iframes point to us. In USENIX SEC, 2008.
[20] M. Zubair Raﬁque, Tom van Goethem, Wouter Joosen, Christophe Huygens, and
It’s free for a reason: Exploring the ecosystem of free live
Nick Nikiforakis.
streaming services. In ISOC NDSS, 2016.
[21] Moheeb Abu Rajab, Lucas Ballard, Noe Lutz, Panayiotis Mavrommatis, and Niels
Provos. CAMP: Content-Agnostic Malware Protection. In ISOC NDSS, 2013.
[22] Jerome
Segura.
overview.
ﬁleless-infections-from-exploit-kit-an-overview/, 09 2014.
Fileless
infections
An
https://blog.malwarebytes.org/exploits-2/2014/09/
from exploit
kit:
[23] Jerome Segura. Exploit Kits: A Fast Growing Threat. https://blog.malwarebytes.
org/101/2015/01/exploit-kits-a-fast-growing-threat/, 01 2016.
[24] Ben Stock, Benjamin Livshits, and Benjamin Zorn. Kizzle: A Signature Compiler
for Exploit Kits. Technical report, Microsoft Research, 02 2015.
[25] Gianluca Stringhini, Christopher Kruegel, and Giovanni Vigna.
Shady paths:
Leveraging Surﬁng Crowds to Detect Malicious Web Pages. In ACM CCS, 2013.
[26] Teryl Taylor, Xin Hu, Ting Wang, Jiyong Jang, Marc Ph Stoecklin, Fabian Monrose,
and Reiner Sailer. Detecting Malicious Exploit Kits Using Tree-based Similarity
Searches. In ACM CODASPY, 2016.
[27] Teryl Taylor, Kevin Z. Snow, Nathan Otterness, and Fabian Monrose. Cache,
Trigger, Impersonate: Enabling Context-Sensitive Honeyclient Analysis On-the-
Wire. In ISOC NDSS, 2016.
[28] Phani Vadrevu, Babak Rahbarinia, Roberto Perdisci, Kang Li, and Manos Anton-
In
akakis. Measuring and detecting malware downloads in live network trafﬁc.
ESORICS, 2013.
474
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:20:37 UTC from IEEE Xplore.  Restrictions apply.