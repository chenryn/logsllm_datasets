j∈Sm
xj
(cid:17)
xj , . . . , Km = e(gn+1, g)r+(cid:80)
j∈Sm
j∈S1
xj , . . . , (v ·(cid:81)
xj × ··· × (v · (cid:89)
gn+1−j)r+(cid:80)
j∈Sk
j∈S1
j∈Sm
6
3.3 Intuition
One can note that, in the above “trivial” construction, the number of elements in the header is 2m,
and we want to reduce it. A ﬁrst attempt is by reusing the same random scalar in all the ciphertexts,
which leads to a header of size m + 1:
gr, (v · (cid:89)
j∈S1
Hdr =
gn+1−j)r, . . . , (v · (cid:89)
gn+1−j)r
j∈Sm
 .
However, this reuse of random coins suﬀers from a simple attack: the same random coins result in
the same session keys for all channels and a subscriber of a channel can decrypt all channels, since
the session key is e(gn+1, g)r. Diﬀerent r’s are thus required in each session keys, but not necessarily
totally independent. Our idea is to add an element Xi ∈ G corresponding to users i = 1, . . . , n, and
to adapt the session key and Hdr using scalars xi, where Xi = gxi, for i = 1, . . . , n,
where we essentially multiply all the ciphertexts together. And, magically, it works because a user in a
xj for k (cid:54)= i in this product and transform
j∈S1
it into his corresponding ciphertext in Si.
set Si can cancel out all the terms (v·(cid:81)
strong selective adversaries. For that, we replace(cid:81)
j∈Sk
Of course, security has to be proven, this is the goal of the next section to prove the basic selective
security. Limitation not to ask decryption nor encryption queries is quite strong, and is the main
drawback of the ﬁrst scheme MIBE1. And thus, we provide a second construction MIBE2 that covers
Xj by a value outputted by a random oracle on
the set Sk and the value gr at the time of encryption. It will prevent malleability. The dummy-helper
technique will make the rest.
j∈Sk
4 Multi-Channel Broadcast Encryption I – MIBE1
4.1 Description
Let us now describe formally our ﬁrst construction MIBE1. We will then prove its basic selective
security.
Setup(λ): The algorithm takes as input the parameter security λ, it generates the global parame-
ters param of the system as follows: Let G be a bilinear group of prime order p. The algorithm
ﬁrst picks a random generator g ∈ G and a random α ∈ Zp. It computes gi = gαi ∈ G for
i = 1, 2, . . . , n, n + 2, . . . , 2n. Next, it picks a random γ ∈ Zp and sets v = gγ ∈ G. It also
picks additional random scalars x1, x2, . . . , xn ∈ Zp and sets X1 = gx1, X2 = gx2, . . . , Xn =
gxn. The master secret key is MSK = (g, v, α, γ, x1, x2, . . . , xn), while the encryption key (that
is private to the broadcaster) is EK = (g, v, gn+1, x1, x2, . . . , xn). The public global parame-
ters are (g1, . . . , gn, gn+2, . . . , g2n, X1, X2, . . . , Xn), whereas the private decryption key of user
i ∈ {1, . . . , n} is di = vαi. These decryption keys are sent by the Extract algorithm.
Encrypt(S1, S2, . . . , Sm, EK): Pick a random scalar r $← Zp, then set Kk = e(gn+1, g)r+(cid:80)
7
j∈Sk
xj for
k = 1, . . . , m. Next, set
Hdr =
gr,
k=m(cid:89)
(v · (cid:89)
k=1
j∈Sk
gn+1−j)r+(cid:80)
j∈Sk
xj
 .
The broadcaster knows gn+1, x1, . . . , xn from EK. It eventually outputs (Hdr, K1, K2, . . . , Km).
Decrypt(S1, . . . , Sm, Hdr, i, di, k): Parse Hdr = (C1, C2). If i ∈ Sk then one computes
Kk =
=
=
=
=
j∈Sk
j∈S(cid:96)
j∈S(cid:96)
j∈Sk
j∈Sk
j(cid:54)=i
j∈Sk
j(cid:54)=i
e(gi, C2)
(cid:96)=1
(cid:96)(cid:54)=k
e(gi, C2)
e(di ·(cid:81)
e(di ·(cid:81)
e(vαi · ((cid:81)
e(gαi, (v ·(cid:81)
e(vαi · ((cid:81)
e((v ·(cid:81)
e((v ·(cid:81)
n+1−i, gr+(cid:80)
gn+1−j+i, gr ·(cid:81)
gn+1−j+i, gr+(cid:80)
e(gαi,(cid:81)(cid:96)=m
gn+1−j)αi, gr+(cid:80)
gn+1−j)r+(cid:80)
gn+1−j)αi, gr+(cid:80)
gn+1−j)αi, gr+(cid:80)
gn+1−j)αi, gr+(cid:80)
e(di ·(cid:81)
Xi) ·(cid:81)(cid:96)=m
e(di ·(cid:81)
xj ) ·(cid:81)(cid:96)=m
(cid:96)=1 (v ·(cid:81)
gn+1−j)r+(cid:80)
e(vαi · ((cid:81)
xj ) ·(cid:81)(cid:96)=m
e(gαi, (v ·(cid:81)
· (cid:96)=m(cid:89)
e(vαi · ((cid:81)
e((v ·(cid:81)
· (cid:96)=m(cid:89)
e((v ·(cid:81)
xj ) = e(gn+1, g)r+(cid:80)
xj ) = e(gn+1, gr+(cid:80)
j∈Sk
j∈Sk
j(cid:54)=i
(cid:96)=1
(cid:96)(cid:54)=k
j∈S(cid:96)
xj )
xj )
j∈S(cid:96)
j∈S(cid:96)
(cid:96)=1
(cid:96)(cid:54)=k
j∈Sk
xj )
xj )
j∈Sk
j∈Sk
j∈Sk
j(cid:54)=i
j∈Sk
j(cid:54)=i
j∈Sk
j∈Sk
j∈Sk
j∈Sk
(cid:96)=1
(cid:96)(cid:54)=k
(cid:96)=1
(cid:96)(cid:54)=k
= e(gαi
j∈Sk
gn+1−j+i, gr ·(cid:81)
gn+1−j+i, gr+(cid:80)
j∈S(cid:96)
xj )
j∈S(cid:96)
Xi)
xj )
j∈S(cid:96)
j∈S(cid:96)
j∈S(cid:96)
gn+1−j)αi, gr+(cid:80)
gn+1−j)r+(cid:80)
gn+1−j)αi, gr+(cid:80)
gn+1−j)αi, gr+(cid:80)
gn+1−j)αi, gr+(cid:80)
j∈S(cid:96)
j∈S(cid:96)
j∈S(cid:96)
j∈S(cid:96)
xj )
xj )
j∈S(cid:96)
j∈S(cid:96)
xj )
xj )
xj )
j∈Sk
xj
We used the relations di = vαi, gn+1−j+i = gαi
n+1−j, and gαi
n+1−i = gn+1.
Remark 7. In MIBE1, the encryption key EK contains gn+1 and thus cannot be public: this is a private
variant of BGW scheme. However, the broadcaster does not need to know α, γ to encrypt, and without
them it cannot generate decryption keys for users. We can separate the role of group manager (who
generates the decryption keys) and broadcaster (who encrypts and broadcasts the content).
4.2 Security Result
We now prove the semantic security of the ﬁrst scheme.
Theorem 8. The MIBE1 system achieves the basic selective security under the DBDHE assumption
in G. More precisely, if there are n users,
Advb−ind(t, qC) ≤ 2 × Advdbdhe(t(cid:48), n) + O(1),
for t(cid:48) ≤ t + (mn + nqC)Te + O(1) where Te is the time complexity for computing an exponentiation
and m is the maximum number of channels in the system.
Proof. Let us assume there exists an adversary A which breaks the semantic security of our ﬁrst
scheme, we build an algorithm B that has the same advantage in deciding the DBDHE problem in G.
This algorithm B proceeds as follows:
8
Init. Algorithm B ﬁrst takes as input a DBDHE instance (g, G, g1, . . . , gn, gn+2, . . . , g2n, T ), where T
is either e(gn+1, G) or a random element of G. It implicitly deﬁnes α: gi = gαi. B then runs A, and
since we are in the selective model, it receives m sets S1, . . . , Sm and an index k that A wishes to
be challenged on.
Setup. B now generates the public global parameters and private keys di, for i /∈ Sk: it ﬁrst chooses a
random scalar r ∈ Zp and sets h = gr, and hi = gr
i , for i = 1, . . . , n. One chooses a random index
η in Sk, and for i ∈ {1, . . . , n}\{η}, one chooses a random scalar xi ∈ Zp, and computes Xi = gxi.
i∈Sk\{η} Xi = gxη : All the scalars xi are known, excepted xη. B
One eventually sets Xη
gives A the public global parameters:
def= G/(cid:81)
(g1, . . . , gn, gn+2, . . . , g2n, X1, X2, . . . , Xn)
B has to compute all the private decryption keys di except for i ∈ Sk: It chooses a random u ∈ Zp
and sets
(cid:89)
j∈Sk
(cid:89)
j∈Sk
(cid:89)
j∈Sk
j∈S(cid:96)
(cid:96)=1
(cid:96)(cid:54)=k
j∈S(cid:96)
v def= gu · (
gn+1−j)−1
di
def= gu
i /(
gn+1−j+i) = gu·αi · (
gn+1−j)−αi
= vαi
(cid:33)
(cid:96)=1
(cid:96)(cid:54)=k
i∈Sk
(cid:80)
j∈S(cid:96)
xj
j∈S(cid:96)
·
gn+1−j
gn+1−j)
j∈S(cid:96)
j∈Sk
j∈S(cid:96)
j∈Sk
gn+1−j
gn+1−j
hn+1−j
hn+1−j
gn+1−j+i for any i (cid:54)∈ Sk,
and cannot when i ∈ Sk. Moreover, since di = vαi, it satisﬁes the speciﬁcations of the schemes.
Challenge. To generate the challenge for A, B ﬁrst computes Hdr = (C1, C2) by setting C1 = h, and
j∈Sk
hu ·
(cid:32)(cid:81)
(cid:81)
gur ·
(cid:32)(cid:81)
xi · (cid:96)=m(cid:89)
(cid:81)
r+(cid:80)
xi (cid:96)=m(cid:89)
r+(cid:80)
xi (cid:96)=m(cid:89)
r+(cid:80)
xi (cid:96)=m(cid:89)
On can remark that B can compute, without explicitly knowing α,(cid:81)