---
title: graph-match operator (Preview)
description: Learn how to use the graph-match operator to search for all occurrences of a graph pattern in a graph.
ms.reviewer: rocohen
ms.topic: reference
ms.date: 12/20/2023
---
# graph-match operator (Preview)
> [!WARNING]
> This feature is currently in preview and might be subject to change. The semantics and syntax of the graph feature might change before they are released as generally available.
The `graph-match` operator searches for all occurrences of a graph pattern in an input graph source.
> [!NOTE]
> This operator is used in conjunction with the [make-graph operator](make-graph-operator.md).
## Syntax
*G* `|` `graph-match` [`cycles` `=` *CyclesOption*]  *Pattern* `where` *Constraints* `project` [*ColumnName* `=`] *Expression* [`,` ...]
## Parameters
| Name | Type | Required | Description |
|--|--|--|--|
| *G* | `string` |  :heavy_check_mark: | The input graph source. |
| *Pattern* | `string` |  :heavy_check_mark: | One or more comma delimited sequences of graph node elements connected by graph edge elements using graph notations. See [Graph pattern notation](#graph-pattern-notation). |
| *Constraints* | `string` |  :heavy_check_mark: | A Boolean expression composed of properties of named variables in the *Pattern*. Each graph element (node/edge) has a set of properties that were attached to it during the graph construction. The constraints define which elements (nodes and edges) are matched by the pattern. A property is referenced by the variable name followed by a dot (`.`) and the property name. |
| *Expression* | `string` |  | The `project` clause converts each pattern to a row in a tabular result, the project expression(s) have to be scalar and reference properties of named variables defined in the *Pattern*. A property is referenced by the variable name followed by a dot (`.`) and the attribute name. |
| *CyclesOption* | `string` |  | Controls whether cycles are matched in the *Pattern*, allowed values: `all`, `none`, `unique_edges`. If `all` is specified then all cycles are matched, if `none` is specified cycles are not matched, if `unique_edges` (default) is specified, cycles are matched but only if the cycles don't include the same edge more than once. |
### Graph pattern notation
The following table shows the supported graph notation:
|Element|Named variable|Anonymous|
|---|---|---|
|Node|`(`*n*`)`|`()`|
|Directed edge: left to right|`-[`*e*`]->`|`-->`|
|Directed edge: right to left|` [!div class="nextstepaction"]
> Run the query
```kusto
let employees = datatable(name:string, age:long) 
[ 
  "Alice", 32,  
  "Bob", 31,  
  "Eve", 27,  
  "Joe", 29,  
  "Chris", 45, 
  "Alex", 35,
  "Ben", 23,
  "Richard", 39,
]; 
let reports = datatable(employee:string, manager:string) 
[ 
  "Bob", "Alice",  
  "Chris", "Alice",  
  "Eve", "Bob",
  "Ben", "Chris",
  "Joe", "Alice", 
  "Richard", "Bob"
]; 
reports 
| make-graph employee --> manager with employees on name 
| graph-match (alice)  "Alice"]|
|Eve|27|[  "Alice",  "Bob"]|
|Ben|23|[  "Alice",  "Chris"]|
### Attack path
The following example builds a graph from the `Actions` and `Entities` tables. The entities are people and systems, and the actions describe different relations between entities. Following the `make-graph` operator that builds the graph is a call to `graph-match` with a graph pattern that searches for attack paths to the "Apollo" system.
> [!div class="nextstepaction"]
> Run the query
```kusto
let Entities = datatable(name:string, type:string, age:long) 
[ 
  "Alice", "Person", 23,  
  "Bob", "Person", 31,  
  "Eve", "Person", 17,  
  "Mallory", "Person", 29,  
  "Apollo", "System", 99 
]; 
let Actions = datatable(source:string, destination:string, action_type:string) 
[ 
  "Alice", "Bob", "communicatesWith",  
  "Alice", "Apollo", "trusts",  
  "Bob", "Apollo", "hasPermission",  
  "Eve", "Alice", "attacks",  
  "Mallory", "Alice", "attacks",  
  "Mallory", "Bob", "attacks"  
]; 
Actions 
| make-graph source --> destination with Entities on name 
| graph-match (mallory)-[attacks]->(compromised)-[hasPermission]->(apollo) 
  where mallory.name == "Mallory" and apollo.name == "Apollo" and attacks.action_type == "attacks" and hasPermission.action_type == "hasPermission" 
  project Attacker = mallory.name, Compromised = compromised.name, System = apollo.name
```
**Output**
|Attacker|Compromised|System|
|---|---|---|
|Mallory|Bob|Apollo|
### Star pattern
The following example is similar to the previous attack path example, but with an additional constraint: we want the compromised entity to also communicate with *Alice*. The `graph-match` pattern prefix is the same as the previous example and we add an additional sequence with the *compromised* as a link between the sequences.
> [!div class="nextstepaction"]
> Run the query
```kusto
let Entities = datatable(name:string, type:string, age:long) 
[ 
  "Alice", "Person", 23,  
  "Bob", "Person", 31,  
  "Eve", "Person", 17,  
  "Mallory", "Person", 29,  
  "Apollo", "System", 99 
]; 
let Actions = datatable(source:string, destination:string, action_type:string) 
[ 
  "Alice", "Bob", "communicatesWith",  
  "Alice", "Apollo", "trusts",  
  "Bob", "Apollo", "hasPermission",  
  "Eve", "Alice", "attacks",  
  "Mallory", "Alice", "attacks",  
  "Mallory", "Bob", "attacks"  
]; 
Actions 
| make-graph source --> destination with Entities on name 
| graph-match (mallory)-[attacks]->(compromised)-[hasPermission]->(apollo), (compromised)-[communicates]-(alice) 
  where mallory.name == "Mallory" and apollo.name == "Apollo" and attacks.action_type == "attacks" and hasPermission.action_type == "hasPermission" and alice.name == "Alice"
  project Attacker = mallory.name, Compromised = compromised.name, System = apollo.name
```
**Output**
|Attacker|Compromised|System|
|---|---|---|
|Mallory|Bob|Apollo|
## Related content
* [Graph operators](graph-operators.md)
* [make-graph operator](make-graph-operator.md)