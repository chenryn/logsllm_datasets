honeynet traf(cid:2)c to assess its signi(cid:2)cance for the site observing it.
The authors present the potential promise of such analysis using
techniques that rely considerably on visualization. In this work, we
aim to go substantially further, developing a (cid:147)toolkit(cid:148) for analyz-
ing particular features of large-scale honeynet events, and devis-
ing techniques and a general framework to automatically or semi-
automatically derive conclusions based on honeynet data.
DShield is the Internet’s largest global alert repository [27]. The
advantages of our approach comparing with DShield are as follow:
(i) In our experience, DShield data is quite noisy, and the sensor
density quite non-uniform. These lead to cases where it is dif(cid:2)cult
to develop sound inferences from the data. (ii) DShield is subject
to pollution and avoidance [9]. Depending solely on DShield might
not be reliable for operational security. (iii) When the target scope
is small, it is hard to (cid:2)nd other sensors in DShield which share the
same behavior; thus DShield will fail to work in such cases.
While the state of the art in terms of building honeynet systems
has advanced considerably, the analysis of large-scale events cap-
tured by such systems remains in its early stages. The Honeynet
project has developed a set of tools for host-level honeypot analy-
sis [2]. At the network level, Honeysnap [3] analyzes the contents
of individual connections, particularly for investigating IRC traf(cid:2)c
used for botnet command-and-control. These approaches all ei-
ther focus on single instances of activity, or on study of particular
botnets over time (e.g., [24]). In contrast, in this paper, we aim in-
stead to understand the signi(cid:2)cance of single, large-scale events as
seen by honeynets. Such activity by de(cid:2)nition entails analysis in-
tegrated across a large number of instances of the activity, but also
(unlike [24]) localized in time.
Furthermore,
the literature includes a number of forensic
case studies analyzing speci(cid:2)c large-scale events, particularly
worms [16,20]. Such case studies have often bene(cid:2)ted from a pri-
ori knowledge of the underlying mechanisms generating the traf(cid:2)c
of interest. For our purposes, however, our goal is to infer the mech-
anisms themselves from a starting point of more limited knowl-
edge.
Finally, Gu et al.propose a series botnet detection techniques
based on behavior correlation [12, 13].
In contrast, we focus on
inferring botnet properties in the wake of detection, rather than de-
tection itself.
7. CONCLUSIONS
In this paper we present several algorithms that can automati-
cally analyze and determine the features of large-scale events that
give insight into their underlying nature observed at a honeynet. In
particular, we develop techniques for recognizing botnet scanning
strategies and inferring a distributed scan’s global properties. An
evaluation of our tools using extensive honeynet and DShield data
demonstrates the promise our approach holds for contributing to
a site’s (cid:147)situational awareness(cid:148)(cid:151)including the crucial question of
whether a large probing event detected by the site simply re(cid:3)ects
broader, indiscriminate activity, or instead re(cid:3)ects an attacker who
has explicitly targeted the site.
8. ACKNOWLEDGMENT
We would like to thank Vinod Yegneswaran and Ruoming Pang
for helping collect the data and implementing the Bro payload sum-
mary scripts, the operations staff of the Lawrence Berkeley Na-
tional Laboratory for facilitating the LBNL honeypot setup, and
anonymous reviewers for their valuable comments. This work was
supported by DOE CAREER award DE-FG02-05ER25692//A001,
DOD (Air Force of Scienti(cid:2)c Research) Young Investigator Award
FA9550-07-1-0074, and NSF grants NSF-0433702 and CNS-
0627320. Any opinions, (cid:2)ndings, and conclusions or recommen-
dations expressed in this material are those of the authors and do
not necessarily re(cid:3)ect the views of the funding sources.
9. REFERENCES
[1] AP Market Sharing.
http://news.com.com/Microsofts+Wi-Fi+
ups+and+downs/2100-1039_3-994518.
[2] HoneyBow Sensor.
http://honeybow.mwcollect.org.
[3] Honeysnap. http://www.honeynet.org/tools/
honeysnap/index.html.
[4] Net-Worm.Win32.Allaple.a.
http://www.viruslist.com/en/viruses/
encyclopedia?virusid=145521.
[5] OS Platform Statistics by W3school.
http://www.w3schools.com/browsers/
browsers_stats.asp.
[6] BACHER, P., HOLZ, T., KOTTER, M., AND WICHERSKI,
G. Know your Enemy: Tracking Botnets.
http://www.honeynet.org/papers/bots.
[7] BARFORD, P., ET AL. An inside look at botnets. In Series:
Advances in Information Security. Springer, 2006.
[8] BELLOVIN, S., ET AL. A technique for counting NATted
hosts. In Proc. of USENIX/ACM IMW (2002).
[9] BETHENCOURT, J., ET AL. Mapping internet sensors with
probe response attacks. In Proc. of the USENIX Security
(2005).
[10] CAI, J., ET AL. Honeynets and honeygames: A game
theoretic approach to defending network monitors. Tech.
Rep. TR1577, University of Wiscconsin, 2006.
[11] CHIANG, K., AND LLOYD, L. A case study of the rustock
rootkit and spam bot. In Proc. of USENIX HotBots (2007).
[12] GU, G., PORRAS, P., YEGNESWARAN, V., FONG, M., AND
LEE, W. Bothunter: Detecting malware infection through
ids-driven dialog correlation. In Proc. of USENIX Security
(2007).
[13] GU, G., ZHANG, J., AND LEE, W. Botsniffer: Detecting
botnet command and control channels in network traf(cid:2)c. In
Proc. of NDSS (2008).
[14] KANNAN, J., JUNG, J., PAXSON, V., AND KOKSAL, C.
Semi-automated discovery of application session structure.
In Proc. of ACM IMC (2006).
[15] KENDALL, M. G. Rank Correlation Methods. Grif(cid:2)n., 1976.
[16] KUMAR, A., PAXSON, V., AND WEAVER, N. Exploiting
underlying structure for detailed reconstruction of an internet
scale event. In Proc. of ACM IMC (2005).
[17] LI, Z., GOYAL, A., CHEN, Y., AND KUZMANOVIC, A. P2p
doctor: Measurement and diagnosis of miscon(cid:2)gured
peer-to-peer traf(cid:2)c. Tech. Rep. NWU-EECS-07-06,
Northwestern University, 2007.
[18] LI, Z., GOYAL, A., CHEN, Y., AND PAXSON, V. Towards
situational awareness of large-scale botnet events using
honeynets. Tech. Rep. NWU-EECS-08-08, Northwestern
University, 2008.
[19] MANNA, P., CHEN, S., AND RANKA, S. Exact modeling of
propagation for permutation-scanning worms. In IEEE
INFOCOM (2008).
[20] MOORE, D., PAXSON, V., SAVAGE, S., SHANNON, C.,
STANFORD, S., AND WEAVER, N. Inside the slammer
worm. IEEE Security and Privacy (2003).
[21] PANG, R., YEGNESWARAN, V., BARFORD, P., PAXSON,
V., AND PETERSON, L. Characteristics of Internet
background radiation. In Proc. of ACM IMC (2004).
[22] PAXSON, V. Bro: A system for detecting network intruders
in real-time. Computer Networks 31 (1999).
[23] PROVOS, N. A virtual honeypot framework. In Proc. of
USENIX Security (2004).
[24] RAJAB, M., ZARFOSS, J., MONROSE, F., AND TERZIS, A.
A multifaceted approach to understanding the botnet
phenomenon. In Proc. of ACM IMC (2006).
[25] RAMACHANDRAN, A., AND FEAMSTER, N. Understanding
the network-level behavior of spammers. In Proceedings of
ACM SIGCOMM ’06 (September 2006).
[26] RICE, J. A. Mathematical Statistics and Data Analysis.
Duxbury Press, 1994.
[27] SANS INSTITUTE. Dshield.org: Distributed intrusion
detection system. http://www.dshield.org/.
[28] STANIFORD, S., PAXSON, V., AND WEAVER, N. How to
0wn the Internet in your spare time. In Proc. of USENIX
Security (2002).
[29] WEISSTEIN, W. E. Stirling Number of the Second Kind.
http://mathworld.wolfram.com/
StirlingNumberoftheSecondKind.html.
[30] YEGNESWARAN, V., BARFORD, P., AND PAXSON, V.
Using honeynets for internet situational awareness. In In
Proc. of ACM Hotnets IV (2005).
[31] ZOU, C., GAO, L., GONG, W., AND TOWSLEY, D.
Monitoring and early warning for internet worms. In Prof. of
ACM CCS (2003).
APPENDIX
A. MODELING HOW BOTS SCAN
A.1 Bot Source Code Study
By analyzing the source code of (cid:2)ve popular families of bots, we
study different dimensions of scan strategies employed by botnets.
The popularity of these (cid:2)ve bot families is con(cid:2)rmed in [6,7]. Our
(cid:2)ndings con(cid:2)rm those in [7], but we more focus on scan pattern
study.
Yes
Yes
Possible
Botnet name Agobot
Global
Local
Hit-list
Independent
& Uniform
Sequential
# of lines
Modularity
Phatbot
Yes
Yes
Possible
Spybot
Yes
Yes
Possible
SDBot
Yes
Yes
Possible
Yes
Yes
Yes
Yes
No
No
3093
16855
21629
Low
Medium High
Table 8: Botnet source code study.
No
Yes
7371
Low
rxBot
Yes
Yes
Possible
Yes
Yes
19021
High
Table 8 shows the scan strategies and complexity of the bot fam-
ilies. Some of them are modularly well designed. Currently, these
bot families mainly use simple scanning strategies. Each supports
both Global scanning (a speci(cid:2)ed address block) and Local scan-
ning (relative to each bot’s address). By hit-list scanning, we re-
fer to an event for which the attacker appears to have previously
acquired a speci(cid:2)c list of targets. Such scans may heavily favor
the use of (cid:147)live(cid:148) addresses (those that respond) to (cid:147)dark(cid:148) (non-
responsive) addresses. The (cid:2)ve bot families we analyzed do not
directly automate hit-list scanning, but an attacker can possibly
achieve this via two steps, (cid:2)rst scanning to gather a list of live
addresses/blocks, and then specifying these at the command line.
In addition, most bot families support (uniformly) Random and Se-
quential scanning of the designated addresses or blocks.
Our dataset analysis accords with the above capabilities: most
scanners we observe use either simple sequential scanning (IP ad-
dress increments by one between scans) or independent uniform
random scanning. We do observe more sophisticated monotonic
trends (address incrementing by k), but very infrequently. We also
observe botnets using hit-list scanning quite frequently.
A.2 Modeling Botnet Global Scanning
There is a large design space for botmasters when developing
scan strategies, but we expect that the following features are usually
desired:
(cid:15) Cover the target scope fully.
(cid:15) Distribute the load based on bots’ capabilities.
(cid:15) Low communication overhead for coordination.
(cid:15) Scan detection evasion. Botmasters may want bots to avoid
aggressive scanning of a small address range, to avoid easy
detection and blocking by IDS/IPS systems.
(cid:15) Redundancy. Since the bots in a botnet can readily be lost
due to detection or simply the host computer going of(cid:3)ine,
the botmaster will prefer instructing multiple bots to scan
the same addresses.
A similar analysis is proposed in [19] for worms. Given these de-
sired features, a simple and effective approach is to ask each bot to
independently scan the speci(cid:2)ed range in a random uniform fash-
ion. Doing so can achieve the scan detection evasion, low commu-
nication overhead, and load distribution, while also providing good
coverage and redundancy. This approach is also simple to correctly
implement. Most of the events we found in our datasets are close
to uniform scanning.
Advanced Scanning Strategies.
In fact, by introducing some simple coordination between bots
one can do better than random uniform for both coverage and re-
dundancy. An advanced scanning strategy, called (cid:147)worm scan per-
mutation(cid:148), was proposed in the context of worm propagation [28].
But the above strategy is optimized for worms and does not con-
sider the usage of C & C channels of botnets. Potentially, with C
& C channels botnets can achieve even better coordination. Using
the botnet C & C, we propose a better scan strategy called Ad-
vanced Botnet Permutation scan (ABPS). Each bot permutes the
whole scanning scope in the same way with a key from botmaster.
Then based on bots’ capabilities, the botmaster divides the repli-
cates of the permuted IP scope to all the bots. This can achieve
much better coverage and redundancy. We simulate and evaluate
this strategy in our evaluation.
B. PROOF OF THEOREM 1
PROOF. There are totally dn ways to distribute the n scans into
d addresses. Among them if there are X0 ways which have z0
addresses receiving zero scan (i.e., z0 empty slots). Then, we know
P (z0) = X0=dn. We will show that for a given z0 the X0 is
z0! (cid:2) Stirling2(n; d (cid:0) z0) (cid:2) (d (cid:0) z0)!
  d
In d addresses, there are (cid:0) d
z0(cid:1) con(cid:2)gurations to select which z0
addresses got zero scan. Each con(cid:2)guration has z0 addresses
which got zero scan and d (cid:0) z0 addresses got non-zero scans.
Stirling2(n; m) denotes the number of ways of partitioning a set
of n element into m nonempty sets [29]. Consider after partition-
ing the n scans into d (cid:0) z0 sets, we have (d (cid:0) z0)! ways to map
the sets to the addresses. Therefore, for each con(cid:2)guration we have
Stirling2(n; d (cid:0) z0) (cid:2) (d (cid:0) z0)! ways to distribute the n scans into
d (cid:0) z0 addresses. Hence we proved
X0 =  d
z0! (cid:2) Stirling2(n; d (cid:0) z0) (cid:2) (d (cid:0) z0)!
C. PROOF OF THEOREM 2 AND 3
Proof of Theorem 2:
THEOREM 2. ^(cid:26) is an unbiased estimator for (cid:26).
PROOF.
) =
i ni
E(^(cid:26)) = E( Pm0
Pm0
i E(ni)
i RGi (cid:1) Ti
As we mentioned, ni is the number of scans we see if we sample
from RGi (cid:1) Ti total scans with probability (cid:26), which follows a bino-
mial distribution. Hence we have E(ni) = (cid:26) (cid:1) RGi (cid:1) Ti. Therefore,
= Pm0
Pm0
E(Pm0
Pm0
i ni)
i RGi (cid:1) Ti
i RGi (cid:1) Ti
E(^(cid:26)) = Pm0
Pm0
i (cid:26) (cid:1) RGi (cid:1) Ti
i RGi (cid:1) Ti
Proof of Theorem 3:
i RGi (cid:1) Ti
i RGi (cid:1) Ti
= (cid:26) (cid:1) Pm0
Pm0
= (cid:26)
THEOREM 3. V AR(^(cid:26)) = (cid:26)(cid:1)(1(cid:0)(cid:26))
< V AR( ^(cid:26)i), i.e., the
accuracy of (cid:26) estimator when aggregating over all m0 senders is
higher than that of each and every single sender.
i RGi (cid:1)Ti
Pm0
PROOF.
V AR(^(cid:26)) = V AR( Pm0
Pm0
i ni
i RGi (cid:1) Ti
) = Pm0
(Pm0
Similar as before since ni follows a binomial distribution, we have
V AR(ni) = (cid:26) (cid:1) (1 (cid:0) (cid:26)) (cid:1) RGi (cid:1) Ti. Therefore,
i V AR(ni)
i RGi (cid:1) Ti)2
V AR(^(cid:26)) = Pm0
On the other hand,
i (cid:26) (cid:1) (1 (cid:0) (cid:26)) (cid:1) RGi (cid:1) Ti
i RGi (cid:1) Ti)
(Pm0
V AR( ^(cid:26)i) = V AR(
ni
RGi (cid:1) Ti
) =
Therefore, V AR(^(cid:26)) < V AR( ^(cid:26)i)
=
2
Pm0
V AR(ni)
(RGi (cid:1) Ti)2 =
(cid:26) (cid:1) (1 (cid:0) (cid:26))
i RGi (cid:1) Ti
(cid:26) (cid:1) (1 (cid:0) (cid:26))
RGi (cid:1) Ti