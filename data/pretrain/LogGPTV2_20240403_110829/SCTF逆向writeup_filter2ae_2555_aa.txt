# SCTF逆向writeup
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
上周末做了一下SCTF的逆向题，整体质量还不错，这里简单分析一下我的做题思路，有问题欢迎交流
## signin
一个GUI程序，使用pyinstaller打包，需要输入正确的用户名的密码。  
使用pyinstxtractor解包，发现是py3.8，于是用相应版本的uncompyle反编译main.pyc：
    import sys
    from PyQt5.QtCore import *
    from PyQt5.QtWidgets import *
    from signin import *
    from mydata import strBase64
    from ctypes import *
    import _ctypes
    from base64 import b64decode
    import os
    class AccountChecker:
        def __init__(self):
            self.dllname = './tmp.dll'
            self.dll = self._AccountChecker__release_dll()
            self.enc = self.dll.enc
            self.enc.argtypes = (c_char_p, c_char_p, c_char_p, c_int)
            self.enc.restype = c_int
            self.accounts = {'SCTFer': b64decode('PLHCu+fujfZmMOMLGHCyWWOq5H5HDN2R5nHnlV30Q0EA')}
            self.try_times = 0
        def __release_dll(self):
            with open(self.dllname, 'wb') as (f):
                f.write(b64decode(strBase64.encode('ascii')))
            return WinDLL(self.dllname)
        def clean(self):
            _ctypes.FreeLibrary(self.dll._handle)
            if os.path.exists(self.dllname):
                os.remove(self.dllname)
        def _error(self, error_code):
            errormsg = {0:'Unknown Error', 
             1:'Memory Error'}
            QMessageBox.information(None, 'Error', errormsg[error_code], QMessageBox.Abort, QMessageBox.Abort)
            sys.exit(1)
        def __safe(self, username: bytes, password: bytes):
            pwd_safe = 'x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00'
            status = self.enc(username, password, pwd_safe, len(pwd_safe))
            return (pwd_safe, status)
        def check(self, username, password):
            self.try_times += 1
            if username not in self.accounts:
                return False
            encrypted_pwd, status = self._AccountChecker__safe(username, password)
            if status == 1:
                self._AccountChecker__error(1)
            if encrypted_pwd != self.accounts[username]:
                return False
            self.try_times -= 1
            return True
    class SignInWnd(QMainWindow, Ui_QWidget):
        def __init__(self, checker, parent=None):
            super().__init__(parent)
            self.checker = checker
            self.setupUi(self)
            self.PB_signin.clicked.connect(self.on_confirm_button_clicked)
        @pyqtSlot()
        def on_confirm_button_clicked(self):
            username = bytes((self.LE_usrname.text()), encoding='ascii')
            password = bytes((self.LE_pwd.text()), encoding='ascii')
            if username == '' or password == '':
                self.check_input_msgbox()
            else:
                self.msgbox(self.checker.check(username, password))
        def check_input_msgbox(self):
            QMessageBox.information(None, 'Error', 'Check Your Input!', QMessageBox.Ok, QMessageBox.Ok)
        def msgbox(self, status):
            msg_ex = {0:'', 
             1:'', 
             2:"It's no big deal, try again!", 
             3:'Useful information is in the binary, guess what?'}
            msg = 'Succeeded! Flag is your password' if status else 'Failed to sign inn' + msg_ex[(self.checker.try_times % 4)]
            QMessageBox.information(None, 'SCTF2020', msg, QMessageBox.Ok, QMessageBox.Ok)
    if __name__ == '__main__':
        app = QApplication(sys.argv)
        checker = AccountChecker()
        sign_in_wnd = SignInWnd(checker)
        sign_in_wnd.show()
        app.exec()
        checker.clean()
        sys.exit()
可以看到用户名为SCTF，对应的密码经过enc函数加密后，与那串base64解码后的值相同。  
因此接下来的重点在enc函数，虽然我们找不到其定义，但是可以看到从mydata中读取了一个base64并解码写入到tmp.dll，那enc函数基本就在tmp.dll中没跑了。  
我们可以直接运行程序，找到当前目录的tmp.dll，也可以从mydata中提取出来。  
然后整理enc函数的逻辑：首先输入在sub_180011311做了一个lfsr，然后再做一个异或加密，相应恢复即可：
    from libnum import *
    def enc(n):
        x = n
        for i in range(64):
            if x & 0x8000000000000000 != 0:
                x = (2*x) ^ 0xB0004B7679FA26B3
            else:
                x *= 2
            x &= 0xffffffffffffffff
        return x
    def dec(n):
        x = n
        for i in range(64):
            if x & 1 != 0:
                x = (x ^ 0x1B0004B7679FA26B3) >> 1
            else:
                x /= 2
        return x
    e='PLHCu+fujfZmMOMLGHCyWWOq5H5HDN2R5nHnlV30Q0EA'.decode('base64')
    key='SCTFer'
    dec0=''
    for i in range(len(e)):
        dec0+=chr( ord(e[i]) ^ ord(key[i%6]) )
    flag=''
    for i in range(0, len(dec0), 8):
        x = s2n(dec0[i:i+8][::-1])
        flag += n2s(dec(x))[::-1]
    print flag
## flag_detector
GO写的web server，首先用golang_loader_assist恢复符号。  
main_main里可以看到注册了几个API（都是GET）：
1./v1/login：接受一个name参数，会在当前目录写个json，不加name的话默认是guest，发现并没啥用  
2./v2/user：调用一些初始化函数，写一个asdf文件，里面一堆数字（应该是vm相关的东西）  
3./v2/flag：在当前目录写一个hjkl的文件，里面是假的flag  
4./v3/check：调用一个vm检查hjkl文件
因此重点是逆向check中的vm。  
逆向vm可以写反汇编器也可以动态调试，由于这个vm中有几个比较复杂的操作，因此可以尝试在关键位置下断点进行调试。  
断点下在cmp指令，可以看到对flag长度的判断，长度输入正确后会对flag进行加密，最后进行逐字节比较。  
由于是逐字节比较，就可以侧信道爆破了，我们patch一下程序让它直接运行vm，然后根据断点断在cmp的次数判断flag正确的位置，逐位爆破即可：
    # gdb -n -q -x
    import gdb
    import re
    import os 
    flag = "SCTF{"
    pool=''
    for i in range(32, 128):
        pool+=chr(i)
    gdb.execute("set pagination off")
    gdb.execute("break *0x96CAE5")
    while 1:
        for i in range(len(pool)):
            tmp = flag + pool[i]
            cur_len = len(tmp)
            tmp = tmp.ljust(22,'~')
            with open("hjkl", "w") as f:
                f.write(tmp)
            gdb.execute("run")
            for j in range(48):
                gdb.execute("c",to_string=True)
            for j in range(cur_len):
                gdb.execute("c",to_string=True)
            try: 
                gdb.execute("c",to_string=True)
                flag += pool[i]
                break
            except: 
                pass
            print flag
    print(flag)
## get_up
IDA中shift+f12跟踪字符串引用，从you should give me a word找到输入被读取的位置，即位于0x402700的函数。  
创建函数后，可以看到word长度在6以内，且sub_401DF0函数中检测了其md5值，这里cmd5可以查到是sycsyc  
另外通过right和wrong的引用可以定位到sub_401A70函数，里面有明显的RC4特征。  
根据最后的比较`if ( v5[k] != *(&v12 + k)
)`可知函数上面的一串数字为密文，密钥syclover可以通过动态调试看到，解RC4即可得到flag：
    dest = [0]*30
    dest[0] = 128;
    dest[1] = 85;
    dest[2] = 126;
    dest[3] = 45;
    dest[4] = 209;
    dest[5] = 9;
    dest[6] = 37;
    dest[7] = 171;
    dest[8] = 60;
    dest[9] = 86;
    dest[10] = 149;
    dest[11] = 196;
    dest[12] = 54;
    dest[13] = 19;
    dest[14] = 237;
    dest[15] = 114;
    dest[16] = 36;
    dest[17] = 147;
    dest[18] = 178;
    dest[19] = 200;
    dest[20] = 69;
    dest[21] = 236;
    dest[22] = 22;
    dest[23] = 107;
    dest[24] = 103;
    dest[25] = 29;
    dest[26] = 249;
    dest[27] = 163;
    dest[28] = 150;
    dest[29] = 217;
    enc=''.join(map(chr,dest))
    key='syclover'
    def rc4(data, key):
        x = 0
        box = range(256)
        for i in range(256):
            x = (x + box[i] + ord(key[i % len(key)])) % 256
            box[i], box[x] = box[x], box[i]
        x = y = 0
        out = []
        for char in data:
            x = (x + 1) % 256
            y = (y + box[x]) % 256
            box[x], box[y] = box[y], box[x]
            out.append(chr(ord(char) ^ box[(box[x] + box[y]) % 256]))
        return ''.join(out)
    print rc4(enc, key)
## secret
安卓逆向，从MainActivity入手，发现check用到的d.a.c类中的5个函数无法正常反编译，查看smali发现全是nop，猜测应该是运行时动态加载代码。  
由于SCTF类中调用了native函数，于是接下来逆向一下so文件。  
IDA打开后可以看到一些奇怪名字的函数，然后从JNIOnload入手，可以看到一些_Z12dexFindClassPK7DexFilePKc之类的字符串，和一些诸如relocateInstruction、dexReadClassData之类的函数名，基本上可以猜出是对dex动了手脚。  
另外data段有几个可以的base64字符串，通过引用可以发现他们在init_proc函数被解密，可以通过动态调试或者逆向算法（即base64+RC4）得到解密后的值：
    Ld/a/c;
    syclover
    UYc0pLw6EdGoEIH3mCpj/kkzRMR5+nl+9VGFICIIL6w=