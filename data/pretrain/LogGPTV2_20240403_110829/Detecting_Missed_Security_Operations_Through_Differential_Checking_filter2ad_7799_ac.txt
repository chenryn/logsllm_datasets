12
13
14
15
16
17
18 end
19 return N ormalRV G, Err RV G;
end
end
if ∃(edдe ∈ CFG) starts at T B and edдe (cid:60) Err RV G then
Err EdдeSet .push_back(edдe);
CP: Current path on collection
if CP (cid:44) ∅ then CP .push_back(EB) ;
return;
if CP (cid:44) ∅ then CP .push_back(EB) ;
RecurCollect(successor, CP);
return;
Algorithm 2: Collect RSPs - Collecting phase
1 RecurCollect(EB, CP);
Input: EB: Entry block of current analysis;
2 EB ← Entry block of input RVG;
3 RSPGSet ← CPG ← CP ← ∅ (Init once on the first call);
4 if EB has multiple predecessors or EB has no successor then
5
6
7 else if EB has one successor then
8
9
10
11 else // EB has multiple successors
12
13
14
15
16
17
18
19
20
21
22 end
end
r eserved_path ← RecurGroup(CPG);
if CP (cid:44) ∅ then CP .push_back(r eserved_path) ;
EB ← end block of r eserved_path;
RecurCollect(EB, CP);
new_path ← ∅;
new_path .push_back(EB);
RecurCollect(successor, new_path);
CPG ← {new_path} ∪ CPG;
foreach successor of EB do
4.4 Collecting Reduced Similar Paths
So far, we have obtained graphs whose paths all share the same
kind of return values. Then, IPPO needs to collect and group the
reduced similar paths (RSPs) in these graphs. Based on the definition
of RSPs, we design a method to collect RSPs in an RVG. It takes
as input the entry block of RVG and it could group all RSPs in the
graph and produce a set of these groups as output. Specifically, the
RSP-collection method consists of two phases: collecting phase and
grouping phase.
In the collecting phase, IPPO collects paths that start from the
same block and end at some potential merge blocks, as shown in
Algorithm 2. In the grouping phase, IPPO reviews if the paths col-
lected in the previous phase are valid (merged at the same block),
groups valid paths, and prunes the RVG, as shown in Algorithm 3.
The collection results will be recorded in a global path group set:
RSPGSet, in which every element is a group of valid RSPs. Both of
the two phases are implemented recursively. Then, we present the
details of the two phases below.
Collecting phase. Given the entry block of a RVG (EB), Algorithm 2
firstly checks if EB is a merge block (lines 4-6), in which case we
should terminate the collection. The key feature of a merge block
is the number of its predecessors and successors. When the EB has
multiple predecessors, it must be a merge block of some RSPs. When
the EB has no successor, it is the return block of the RVG. In these
two cases, we should terminate the collection and return. Then, we
check the successors of the EB to determine whether it is a start
block. If the EB has only one successor, we recursively collect its
successor (lines 7-10) until we meet one of the two aforementioned
termination conditions. If there is a path on collection in above cases
(lines 5 and 8), which means the current path collection serves a top
path collection, we add the EB to the tail of this path.
When the EB has multiple successors, which means it is a start
block of some RSPs, we recursively collect the RSPs for all of its
successors and call Algorithm 3 to record them (lines 12-21). In
order to speed up the collection, Algorithm 3 will select only one
reserved_path from this group to be reserved and prune all other
paths from the CFG. Each call of this algorithm simplifies the func-
tion’s CFG and makes the subsequent collection faster. Then, Algo-
rithm 2 starts a new collection from the end block of reserved_path
(lines 20-21). If there is a path on collection, we push reserved_path
to its tail (line 19).
Grouping phase. Algorithm 3 checks if the collected paths merge at
the same block. If it is the case (line 2), then these paths satisfy all the
requirements to be RSPs and we group them into the output set (line
3). Another task here is to prune the RVG. Since we have traversed
and collected a group of RSPs, we do not need to traverse them again
in the subsequent collection. Only one RSP is enough to represent
this group (line 4). Function PrunePath(reversed_path, CPG, CFG)
prunes all paths in CPG from the RVG except for a reserved_path
(line 5). More specifically, for each path to be pruned, PrunePath()
pruned all edges of this path using the PruneEdge() method men-
tioned in §4.3.2.
However, if the collected paths merge at different blocks (line
8), Algorithm 3 will rearrange the collection pace to make sure the
collected paths merge at one block. Firstly, the algorithm checks all
the collected paths and picks out RSPs that have already merged at
one block (lines 9-17). Secondly, for the paths end at different blocks,
the algorithm selects a Top_block from these ending blocks (line 18)
to start a new collection (lines 19-31). Function GetTopBlock() finds
the topmost block as Top_block in the CFG from the input block set.
Session 5D: Misc: Android and Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1633Algorithm 3: Collect RSPs - Grouping phase
1 RecurGroup(CPG);
Input: CPG: Path group that just finished collection
Output: r eserved_path: Path that selected as reservation
2 if ∀ (paths ∈ CPG) merge at one merдeblock then
if more than one paths ∈ CPG end at merдeblock then
new_CPG ← paths ∈ CPG end at merдeblock;
RSPGSet ← {new_CPG} ∪ RSPGSet;
r eserved_path ← select one path in new_CPG;
PrunePath(r eserved_path, CPG, CFG);
RSPGSet ← {CPG} ∪ RSPGSet;
3
r eserved_path ← select one path in CPG;
4
PrunePath(r eserved_path, CPG, CFG);
5
CPG ← ∅;
6
return r eserved_path;
7
8 else // Paths merge at different mergeblocks
MBSet ← all different mergeblocks of CPG;
9
foreach merдeblock ∈ MBSet do
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33 end
end
T op_block ← GetTopBlokc(MBSet);
new_CPG ← ∅;
foreach merдeblock ∈ MBSet do
end
RecurGroup(new_CPG);
return r eserved_path;
if merдeblock (cid:44) T op_block then
new_CPG ← {path ends at mergeblock} ∪ new_CPG;
r eserved_path ← {path ends at mergeblock};
new_path ← ∅;
new_path .push_back(merдeblock);
RecurCollect(merдeblock, new_path);
new_CPG ← {new_path} ∪ new_CPG;
end
else
end
We use a constructed CFG example to illustrate how the path ex-
plosion happens and how the idea of RSP resolves the path explosion
problem while analyzing paths in the Appendix.
4.5 Checking against OSPP Rules
At this step, IPPO further analyzes if the collected pairs of RSPs
satisfy the rest rules of OSPP. The previous analysis phases have
generated path pairs which satisfy Rule 1 and the post-conditions of
Rule 4. Therefore, we enforce the following analysis to check against
Rule 2, Rule 3, and the pre-conditions of Rule 4.
Rule 2 checking. The core of Rule 2 is to collect the source of an
object. For resource alloc/release operations, we regard the allocation
of the resource variable (object) as its source, which will be discussed
in §5.1.3. For security checks, we use the source collection algorithm
of Crix [24] to collect the source of an object. For refcount and
lock/unlock operations, we regard the reference counter increments
and lock operations as their sources. In this paper, we regard the
return values of function calls with the same name as the same
objects. Thus, there could be multiple sources for an object in a
function. Once we get the source(s) of an object, we check if both
paths contain the sources and discard path pairs that only one path
of it contains the source while the other does not.
Rule 3 checking. We identify SO-influential operations according
to the type of the target objects in both paths, as shown in Ta-
ble 1. The checking procedures for security checks, refcount, and
lock/unlock operations are relatively direct: matching the qualified
instructions and APIs. For resource alloc/release, we trace the use
chain of the resource variables and analyze if they propagate to any
function parameters, global variables or return values. To make our
method robust, we do not require the SO-influential operations in
two paths to be exactly the same, but only existent or nonexistent
in both paths.
Pre-condition checking. Since all collected paths start from the
same block, the branch conditions of them are the same. We only
need to make sure that the branch condition is object-irrelevant.
Towards this, we firstly extract the branch condition from the start
block of RSPs, then we analyze if the condition variable is exact the
object or propagated from the object. We also observed that it is
common to use function parameters or global variables to balance the
pairwise used security operations. Thus, for resource alloc/release,
refcount inc/dec, and lock/unlock, we currently discard the path
pairs whose condition variables are propagated from them.
4.6 Workflow of IPPO
In this section, we use the vulnerability in Figure 5 as an example
to show the workflow of IPPO on picking out this vulnerability.
The workflow contains seven steps, as shown in Figure 6. Given an
LLVM IR file as input, IPPO firstly generates the CFG for function
snd_echo_resume() and detects all security operations in it (❶ in
Figure 6). The identified resource release operations are marked blue
in the CFG. IPPO extracts variables chip and commpage_bak from
the release function kfree() and snd_echo_free() as target objects.
Secondly, IPPO analyzes and marks the error edges in the CFG, which
are shown in red (❷ in Figure 6). Thirdly, IPPO generates the two
return value-based graphs (RVGs) from the CFG, and outputs an error
handling RVG and a normal RVG (❸ in Figure 6). Since the normal
RVG contains only one path, we do not need to further analyze it and
just stop here. For the error handling RVG, IPPO collects reduced
similar paths (RSPs) from it, which outputs three RSPs: RSP 1, RSP 2,
and RSP 3 (❹ in Figure 6). For each object (chip and commpage_bak),
IPPO checks the OSPP rules against the three RSPs (❺ in Figure 6).
RSP 3 fails on the pre-condition checking of Rule 4, and is pruned
from the analysis flow. Other RSPs are considered as object-based
similar path pairs (OSPP). Finally, IPPO checks if one path in an
OSPP contains the security operation (resource release) against the
object while the other path does not (❻ in Figure 6). For object chip,
IPPO finds that RSP 1 and RSP 3 have such a pattern, and generates
a bug report to suggest that the error paths at line 10 and line 24
miss a release against variable chip in Figure 5 (❼ in Figure 6).
5 IPPO Implementation
We have implemented IPPO on top of LLVM, including a pass for
unrolling loops and constructing the global call graph, a pass for
finding function wrappers, a pass for detecting security operations,
and a pass for OSPP analysis. IPPO in total contains 10K lines of
Session 5D: Misc: Android and Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1634Figure 6: The workflow of IPPO while checking the double-free vulnerability in Figure 5.
C++ code. The rest of this section presents implementation details
of IPPO.
5.1 Detecting Security Operations
To demonstrate how IPPO works, we experimented on detecting
security checks, resource alloc/release operations, and reference
count operations. Note that the security operation detection of IPPO
is generic; once the patterns of security operations are provided,
IPPO can be easily extended to detect other types of bugs.
5.1.1 Detecting Security Checks. Security check is a common used
security operation and missing check causes a majority of recent
security bugs [24, 44]. IPPO adopts the state-of-the-art security check
detection method proposed in Crix [24]. Crix regards an if statement
as a security check when one of its branch handles a failure and
the other one continues the normal execution. We mainly consider
the return value check, a subset of security check, in this paper. In
particular, we found that Crix’s security check detection method
would miss some security checks when there exists a security check
against a function call. We add an independent analysis flow to
catch such cases and increase the total security check reports by
around 20%. We also develop a more refined return value model
while detecting security checks, which will be discussed in §5.2.
5.1.2 Detecting Reference Count Operations. We choose to detect
inconsistent refcount operations in the PCI power management in
the Linux kernel for the following reasons. (1) This set of APIs are
most widely used [26] in subsystems of Linux kernel and could cause
high power consumption and unexpected device suspending when
used improperly. (2) We studied their documents and found that
they are poorly designed: the reference counter will be changed
even on failures, which seems counter-intuitive from the perspective
of a developer. We manually collect its refcount APIs, which are
shown in Table 5 in the Appendix. The table illustrates three sets
of APIs: three refcout increment APIs, six refcount decrement APIs,
and four refcount state description APIs. The first two sets of APIs
are used in security operation detection. The last set of APIs is used
in pre-condition checking of OSPP Rule 4 (we regard these APIs as
object-relevant). Since the use of refcount in OpenSSL, FreeBSD, and
PHP is limited, we do not identify refcount operations in it.
5.1.3 Detecting Resource Alloc/Release Operations. Improperly used
resource allocation/release operations are the main cause of memory
leak and could further cause DoS. Some could even directly lead to
double-free/use-after-free [1]. A resource is usually complicated and
represented as struct or pointer variable in practice. We mainly adopt
the resource detection idea of Hector [36] in IPPO. Hector recognizes
an allocation as a function call that returns pointer-typed values and
a release as its last usage in a path of CFG, which is supposed to
be a non-checked call. However, many release operations collected
in this way are totally release-irrelevant. To improve the precision,
we further require the release functions to contain free or release
in their names. Since Hector is not open source, we implement this
part as an LLVM pass independently.
5.1.4 Detecting Lock/unlock. Lock/unlock operations are widely
used in large programs to manage shared resources and control
concurrency. We observed that lock/unlock operations are usually
carried out through function calls with _lock and _unlock key words
in their names. Therefore, we heuristically collect such functions as
lock/unlock operations. To further improve the accuracy, we require
the unlock functions must be void functions and share the same
parameters with the lock functions.
According to our observation, the resource and lock related issues
are usually caused by missing resource release and unlock. Therefore,
we focus on detecting missed release and unlock operations in OSPPs.
5.2 Path Analysis
5.2.1 Classifying Return Values. Both path analysis and security
check detection in IPPO needs to classify function return values with
high-precision. Typically, the Linux kernel has three types of return
values for non-void functions: boolean value, integer value, and
pointer value. Previous works mainly consider integer error return
value, which is known as error code. For Linux kernel, returning 0
usually means success and non-zero values otherwise. The FreeBSD
kernel and PHP perform similarly as the Linux kernel. However, for
129365874Line 4-9Line 11-13Line 19-22Line 26-29Line 34Line 35Line 14-16Line 23Line 30-31129365874129357Only one path, stop analyzingFree commpage_bakFree commpage_bakFree chipFree commpage_bakand chipLLVM IRs of theSource CodeGenerate CFG & Detect security operationsIdentify error edgesGenerate RVGsNormal RVGRSP 1:  OKRSP 2:  OKRSP 3:  Rule 4 fails.RSP 1:  OKRSP 2:  OKRSP 3:  OKCheck OSPP rulesCheck OSPP rulesRSP 1:  Both paths free  commpage_bakRSP 2:  Both paths free  commpage_bakDifferencial CheckingDifferencial CheckingRSP 1:  Only one path frees chipRSP 2:  Both paths free chipRSP 3:  Only one path frees chipxxGenerate bug reports       12936584Error handling RVGCollect RSPs RSP 1RSP 2RSP 3  -   -    -     -   -     -   -   -    -     -   -     -   -   -   -   -     -  Session 5D: Misc: Android and Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1635OpenSSL library, a function will return 1 on success. We extend the
idea of error code to boolean values and pointer values.
For all of the evaluated systems, a function with pointer type is
expected to return a non-null pointer on success and a null on failure,
which is easy to catch in LLVM IRs. A function with boolean type is
expected to return true on success and f alse on failure. In LLVM IRs,
boolean values and integer values all belong to ConstantInt values.
The only difference between them is their bit width: boolean values’
bit width is 1 and integer values’ bit width is a larger value. One
interesting finding here is that the true in LLVM IRs is -1 and f alse
is 0. If we treat boolean and integer return values equally, we will
misclassify all boolean return values. There will also be no normal
execution path in OpenSSL library under this circumstance.
5.2.2 Constructing RSPs. When we implement Algorithm 1, we
carefully select edges to be added to the ErrEdgeSet at Line 13 and
Line 16. When we select an edge from several candidates to extend
the error RVG towards the entry or end block, we prefer the edge
that could connect to the existing error RVG. To reduce the recursion
depth, we combined the two-phase RSP collection algorithms into
one function. The tail-recursions of Algorithm 2 and Algorithm 3
are all reconstructed as loops.
The path analysis phase of IPPO is relatively expensive. In order
to speed up the analysis flow, we do not involve each function in
the path analysis phase. When a security operation detection is
completed, we discard the functions without any security operations
before stepping into the path analysis phase. Hence, we could avoid
analyzing unnecessary cases.
5.2.3 OSPP Rules Checking. In practice, we firstly collect and pair
RSPs, then we execute differential checking before checking the rest
OSPP rules to further speed up our analysis. IPPO checks against
the rest OSPP rules (see §4.5) in order only when one path of RSPs
contains a security operation and the other does not. We check OSPP
rules for each kind of security operation independently because the
definitions of objects are diverse in different security operations.
We observe that missing check usually occurs in normal RSPs,
while missing release and unlock usually occurs in error RSPs. Hence,
we only check OSPP rules in normal RSPs for security checks and
error RSPs for resource release and unlock operations. Such pattern
for refcount operation is not obvious. Thus, we carry out OSPP rules
checking in both normal and error RSPs for refcount operation.
5.3 Differential Checking
Given an OSPP, IPPO checks the missed security operation and
suggests a potential bug resulted from it. A potential security bug
requires one path of OSPP to contain the security operation while
the other one does not. Once a missed security operation is found in
an OSPP, IPPO generates the detailed inconsistency information for
further manual confirmation.
5.3.1 Bug Reports. For each missed security operation bug, IPPO
records its top function, file location, and exact bug type (missing
check, missing release, and refcount leak). In order to analyze such
bugs easily from the perspective of a researcher, IPPO also locates
the line number of branch instructions and security operations in
the source code, together with the basic block chains that make up
the OSPP in LLVM IRs. For the variable related security operations,
IPPO locates the sources and security related usages of the critical
variables both in source code and in LLVM IRs.
5.3.2 Reports Filter. Since one single path is possible to appear in
multiple path pairs, one root cause of a missed security operation
may lead to multiple reports. For example, Path 2 (a-c-f) appears
in both Path pair 1 and Path pair 2 in ??. If both Path 1 and Path
3 contain a refcount decrement while Path 2 does not, IPPO will
report two potential refcount imbalance bugs for the contradiction is
shown in two path pairs. Sometimes one function could also appear
in multiple bitcode files, which introduces redundant bug reports,
too. To address this problem, IPPO records the belonging function
name and the corresponding missed security operation for each bug