ﬂoppy drive, information can ﬂow from one VM to the
other. Files could be copied from one VM to the ﬂoppy,
thus giving the other VM access to the ﬁles.
4.4.2 Networking and File Sharing
A similar problem results from support of network-
ing and ﬁle sharing. Here two virtual machines at
different security levels could communicate informa-
tion. Exploitable mechanisms include Microsoft Net-
working, Samba, Novell Netware, Network File System,
and TCP/IP. For example, using TCP/IP, a VM could
FTP to either a host OS or guest Linux OS and trans-
fer ﬁles.
4.4.3 Virtual Disks
The ability to use virtual disks is also a problem. A
virtual disk is a single ﬁle that is created in the host OS
and used to encapsulate an entire guest disk, including
an operating system and its applications. Anyone with
access to this ﬁle in the host operating system could copy
all information in the virtual disk to external media. The
attacker could then install the virtual machine monitor
on his own system and open the copied virtual disk.
Another problem is that any host OS application with
read access to the ﬁle containing the virtual disk can ex-
amine the contents of virtual disk. For example, host OS
ﬁle utilities such as grep can be used to search for spe-
ciﬁc strings in the virtual ﬁle system. Our tests using a
Linux host OS and a Windows NT guest OS showed that
a sensitive string could be located by grep in seconds on
an approximately 300 MB virtual disk.
Both problems could be remedied by restricting access
to the virtual ﬁle. Yet, to achieve this with any measure
of assurance, a secure host OS is required.
4.4.4 Program Utilities
Tools for virtual machine interoperation may cause
problems. For example, after installing VMware-Tools
[36] in a guest OS, the cursor can move freely between
the host OS desk-top and those of the VMs. Another
feature is the ability to cut and paste between virtual ma-
chines using a feature similar to the Windows clipboard.
The potential security danger if virtual machines were
running at different mandatory security levels is obvi-
ous.
4.4.5 Host Operating System
For a Type II VMM, many security vulnerabilities
emerge due to the lack of assurance available in the un-
derlying host operating system. Flaws in host OS de-
sign and implementation will render the virtual machine
monitor and all virtual machines vulnerable.
4.4.6 Serial and Printer Ports
Implementation of serial and printer ports presents an-
other security problem. Before starting a virtual ma-
chine, a conﬁguration of the guest OS must be loaded
or created. A conﬁguration option for parallel and serial
ports is to have output of all parallel/serial ports go to
a ﬁle in the ﬁle system of host OS. Thus on the guest
OS, user attempts to print will result in output to a host
OS ﬁle. Users could easily transfer information so that
others could read the printer ﬁle in the host OS if its per-
missions were not managed carefully.
4.5
Intel-Based VMM for High Security
We conclude that current VMMs for the Intel archi-
tecture should not be used to enforce critical security
policies. Furthermore, it would be unwise to try to im-
plement a high assurance virtual machine monitor as a
Type II VMM hosted on a generic commercial operat-
ing system. Layering a highly secure VMM on top of an
operating system that does not meet reference monitor
criteria would not provide a high level of security.
Yet the Intel Pentium processor architecture has many
features that can be used to implement highly secure sys-
tems. How can these be applied?
A better approach would be to build a Type I VMM
as a microkernel. The secure microkernel could be very
small, making it easier for the VMM to meet the refer-
ence monitor veriﬁability requirement. The use of min-
imization, rigorous engineering, and code correspon-
dence contribute to ensuring that the implementation is
free of intentional as well as accidental ﬂaws.
The Type I VMM would provide virtual environments
on the machine. It would intercept all attempts to handle
low-level hardware functions from the VMs and would
control all of the devices and system features of the CPU.
The microkernel could allow each VM to choose among
a speciﬁc set of virtual devices, which may or may not
map directly to the real devices installed on the system.
There are two advantages to using a Type I VMM to
separate mandatory security levels. First, a Type I VMM
can provide a high degree of isolation between VMs.
Second, existing popular commercial operating systems
for the processor and their applications can be run in
this highly secure environment without modiﬁcation. A
VMM eliminates the need to port software to a special
secure platform and supports the functionality of current
application suites.
The biggest disadvantage to a Type I approach is that
device drivers must be written for every device. This is a
problem because of the wide variety of peripheral types
and models available. (Note that a less secure Type II
VMM avoids this problem by using existing drivers writ-
ten for the host OS.) This disadvantage can be overcome
when developing a secure solution by only supporting
certain types and manufacturers of devices. It is not out
of the ordinary for highly secure solutions to require spe-
ciﬁc types of hardware.
Before trying to implement a secure Type I VMM for
the Pentium, it might be advantageous to modify the
chip. Two alternative modiﬁcations could make virtual-
ization easier. First, all seventeen unprivileged, sensitive
instructions of the Intel architecture could be changed to
privileged instructions. All instructions would trap nat-
urally and the VMM could emulate the behavior of the
instruction. However, this solution may cause problems
in current operating systems because these seventeen in-
structions would now trap.
An alternative is to implement a trap on op-code in-
struction [12]. A new instruction is added that allows an
operating system to declare instructions that should be
treated as if they were privileged. This makes virtualiza-
tion easier without affecting current operating systems.
Other virtualization approaches require additional code
to force sensitive, unprivileged instructions to be han-
dled by VMM software. As a result, two security con-
cerns arise. First, the security kernel may not be consid-
ered minimal because of the extra virtualization code.
Second, virtualization of the unmodiﬁed processor re-
quires checking every instruction before it executes.
Such checking is likely to doom to failure creation of
a high assurance VMM.
5 Conclusions and Future Work
The feasibility of implementing a secure virtual ma-
chine monitor on the Intel Pentium has been explored.
VMM types and their hardware requirements were re-
viewed. Then, a detailed study of the virtualizability of
all 250 Pentium instructions was conducted to determine
if the processor could meet the hardware requirements of
any type of VMM. The analysis showed that seventeen
instructions did not meet virtualization requirements be-
cause they were sensitive and unprivileged.
After deﬁning a strategy to “virtualize” the Pentium
architecture, an analysis was conducted to determine
whether a Pentium-based secure virtual machine moni-
tor is able to securely isolate classiﬁed from unclassiﬁed
virtual machines could be built. We conclude that cur-
rent VMM products for the Intel architecture should not
be used as a secure virtual machine monitor.
The Intel Pentium processor family already has many
features that support the implementation of highly se-
cure systems. Slight modiﬁcations to the processor
would signiﬁcantly facilitate development of a highly se-
cure Type I VMM.
An effort is currently underway to examine the Intel
IA64 architecture to determine how its new relate to the
construction of secure systems and virtualization. The
possible use of virtualization techniques for processors
supporting fast binary translation is also being explored.
Acknowledgements
The authors wish to acknowledge the insight, guidance
and suggestions made by Steve Lipner as this research
progressed. We are grateful to Dr. Paul Karger for care-
ful review of our manuscript, suggestions and encour-
agement. We wish to thank James P. Anderson for un-
ﬂagging encouragement of our work and Timothy Levin
for insightful discussions and review of the paper. We
are grateful to the Department of the Navy for its sup-
port of the Naval Postgraduate School Center for Infor-
mation Studies and Research, which made this research
possible.
References
[1] ISO/IEC 15408 - Common Criteria for Information
Technology Security Evaluation. Technical Report
CCIB-98-026, May 1998.
[2] Alpha Architecture Handkbook. Technical Report
Order Number: ECQD2KC-TE, October 1998.
[3] E. R. Altman, D. Kaeli, and Y. Sheffer. Welcome
to the Opportunities of Binary Translation. IEEE
Computer, 33(3):40–45, March 2000.
[4] J. P. Anderson. Computer Security Technology
Planning Study. Technical Report ESD-TR-73-51,
Air Force Electronic Systems Division, Hanscom
AFB, Bedford, MA, 1972. (Also available as Vol.
I,DITCAD-758206. Vol. II, DITCAD-772806).
[5] C. Attanasio, P. Markenstein, and R. J. Phillips.
a Study
IBM Systems Journal,
Penetrating an Operating System:
of VM/370 Integrity.
15(1):102–116, 1976.
[6] D. E. Bell and L. LaPadula. Secure Computer
Systems: Mathematical Foundations and Model.
Technical Report M74-244, MITRE Corp., Bed-
ford, MA, 1973.
[7] K. J. Biba.
Integrity Considerations for Secure
Computer Systems. Technical Report ESD-TR-76-
372, MITRE Corp., 1977.
[8] E. Bugnion, S. Devine, K. Govil, and M. Rosen-
blum. Disco: Running Commodity Operating
Systems on Scaleable Multiprocessors.
ACM
Transactions on Computer Systems, 15(4):412–
447, November 1997.
[9] B. Gold, R. Linde, R. J. Peller, M. Schaefer,
J. Scheid, and P. D. Ward. A security retroﬁt fo
vm/370. In R. E. Merwin, editor, National Com-
puter Conference, volume 48, pages 335–344, New
York, NY, June 1979. AFIPS.
[10] B. Gold, R. R. Linde, and P. F. Cudney. KVM/370
In Proceedings of the 1984 IEEE
in Retrospect.
Symposium on Security and Privacy, pages 13–23,
Oakland, CA, April 1984. IEEE Computer Society
Press.
[11] B. Gold, R. R. Linde, M. Schaefer, and J. F. Scheid.
Vm/370 security retroﬁt program. In Proceedings
1977 Annual Conference, pages 411–418, Seattle,
WA, October 1977. A.C.M.
[12] R. Goldberg. Architectural Principles for Virtual
Computer Systems. Ph.D. thesis, Harvard Univer-
sity, Cambridge, MA, 1972.
[13] J. Hall and P. T. Robinson. Virtualizing the VAX
Architecture.
In Proceedings of the 18th Inter-
national Symposium on Computer Architecture,
pages 380–389, Toronto, Canada, May 1991.
[14] W.-M. Hu. Reducing Timing Channels with Fuzzy
Time. In Proceedings 1991 IEEE Symposium on
Research in Security and Privacy, pages 8–20.
IEEE Computer Society Press, 1991.
[15] Intel. Intel Architecture Software Devloper’s Man-
ual, Volume 1: Basic Architecture. Intel Corpora-
tion, Santa Clara, CA, 1999.
[29] R. Rashid, D. Julin, D. Orr, R. Sanzi, R. Baron,
A. Forin, D. Golub, and M. Jones. Mach: A sys-
tem software kernel.
In Proceedings of the 34th
Computer Society International Conference COM-
PCON 89, San Francisco, CA, February 1989.
IEEE Computer Society Press.
[30] J. S. Robin. Analyzing the Intel Pentium’s Capa-
bility to Support a Secure Virtual Machine Mon-
itor. Master’s thesis, Naval Postgraduate School,
Monterey, CA, September 1999.
[31] M. Rosenblum. Lecture at Stanford University. 17
August 1999.
[32] J. H. Saltzer and M. D. Schroeder. The Protection
of Information in Computer Systems. Proceedings
of the IEEE, 63(9):1278–1308, 1975.
[33] M. Schaefer and B. Gold. Program Conﬁnement in
KVM/370. In Proceedings 1977 Annual Confer-
ence, pages 404–410, Seattle, WA, October 1977.
A.C.M.
[34] M. D. Schroeder and J. H. Saltzer. A Hardware
Architecture for Implementing Protection Rings.
Comm. A.C.M., 15(3):157–170, 1972.
[35] O. Sibert, P. A. Porras, and R. Lindell. The Intel
80x86 Processor Architecture: Pitfalls for Secure
Systems.
In Proceedings 1995 IEEE Symposium
on Security and Privacy, pages 211–222, Oakland,
CA, May 1995. IEEE Computer Society Press.
[36] VMware Inc.
Inc
– Virtual Platform Technology, March 1999.
http://www.vmware.com/standards/index.html.
Welcome to VMware,
[37] Wine. http://www.winehq.com, June 2000.
[16] Intel. Intel Architecture Software Devloper’s Man-
Intel
ual, Volume 2: Instruction Set Reference.
Corporation, Santa Clara, CA, 1999.
[17] P. A. Karger, M. E. Zurko, D. W. Bonin, A. H. Ma-
son, and C. E. Kahn. A Retrospective on the VAX
VMM Security Kernel. Transactions on Software
Engineering, 17(11):1147–1165, November 1991.
[18] A. Klaiber.
CrusoeT M Processors.
tion, Santa Clara, CA, January 2000.
http://www.transmeta.com.
The Technology Behind
Transmeta Corpora-
also
[19] K. Lawton. http://www.bochs.com, July 1999.
[20] K. Lawton. Running Multiple Operating Systems
Concurrently on the IA32 PC Using Virtualization
Techniques. http://www.freemware.org/
research/paper.txt, June 1999.
[21] S. E. Madnick and J. J. Donavan. Application and
Analysis of the Virtual Machine Approach to In-
formation System Security.
In ACM SIGARCH-
SYSOPS Workshop on Virtual Computer Systems,
pages 210–224, Boston, MA, March 1973. A.C.M.
[22] National Computer Security Center. Department of
Defense Trusted Computer System Evaluation Cri-
teria, DoD 5200.28-STD, December 1985.
[23] National Computer Security Center. Final Evalu-
ation Report: Boeing Space and Defense Group,
MLS LAN Secure Network Server System, 28 Au-
gust 1991.
[24] National Computer Security Center. Final Evalu-
ation Report of HFSI XTS-200, CSC-EPL-92/003
C-Evaluation No. 21-92, 27 May 1992.
[25] National Computer Security Center. Final Eval-
uation Report: Trusted Information Systems, Inc.
Trusted XENIX Version 4.0, January 1994.
[26] National Computer Security Center. Final Evalu-
ation Report: Verdix Corporation VSLAN 5.1/VS-
LANE 5.1, 11 January 1994.
[27] National Computer Security Center. Final Evalu-
ation Report of Gemini Computers, Incorporated
Gemini Trusted Network Processor, Version 1.01,
28 June 1995.
[28] G. Popek and R. Goldberg.
Formal Require-
ments for Virtualizable 3rd Generation Architec-
tures. Communications of the A.C.M., 17(7):412–
421, 1974.