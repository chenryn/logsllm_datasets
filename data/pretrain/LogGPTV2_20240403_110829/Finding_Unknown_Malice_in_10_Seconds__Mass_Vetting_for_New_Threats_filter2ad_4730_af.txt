### Figure 8: Number of Malicious Apps Over Time
Figure 8 illustrates the trend in the number of malicious apps over time.

### Figure 9: Distribution of Common Code Across Malware
Figure 9 shows the distribution of common code across malware, as discovered through intersection analysis.

### Localization of Malware Repackaging
Malware repackaging appears to be highly localized, primarily occurring within app stores in the same region or even on the same store. This localization can be attributed to the effort required by malware authors to adapt an original app for a new audience, which is significantly more demanding than simply repackaging popular local apps.

### Common Code Reuse in Malware
Figure 9 illustrates the distribution of common code across malware. A relatively small set of methods has been reused by a large number of malicious apps. The most prevalent method has been utilized by 9,438 Google Play malware and 144 suspicious apps in third-party markets. This method is part of the "com/startapp" library, which is extensively used by malware. Over 98% of the apps integrating this library were flagged as malicious by VirusTotal, with the remainder being identified as suspicious through manual validation. This method sends users' fine-grained location information to a suspicious website. Other popular methods, such as "guohead," "purchasesdk," and "SDKUtils," are also part of malware-building toolkits. These libraries are signed by thousands of different parties, and their use is regional. For example, "purchasesdk" is popular in Chinese markets, while "startapp" is widely used in US markets. Some of these libraries have been obfuscated, and a closer look reveals that they are used for obtaining sensitive information like phone numbers, downloading files, and loading code dynamically.

### Signatures and Identities
For each confirmed malicious app, we examined its signature, which is the public key on its X.509 certificate used to verify the app's integrity. Some signatures have been used by more than 1,000 malware instances, indicating that certain malware authors have produced and disseminated a large number of malicious apps across different markets (Table 3). Additionally, when we checked the metadata for malware discovered on Google Play, we found that a few signatures were associated with many identities (e.g., the creator field in the metadata). One signature, for instance, was linked to 604 identities, suggesting that the adversary may have created multiple accounts to distribute their apps (Table 4).

#### Table 3: Top 5 Signatures Used in Apps
| Signature | Number of Malicious Apps |
|-----------|--------------------------|
| c673c8a5f021a5bdc5c036ee30541dde | 1644 |
| a2993eaecf1e3c2bcad4769cb79f1556 | 1258 |
| 3be7d6ee0dca7e8d76ec68cf0ccd3a4a | 615 |
| f8956f66b67be5490ba6ac24b5c26997 | 559 |
| 86c2331f1d3bb4af2e88f485ca5a4b3d | 469 |

#### Table 4: Top 5 Signatures Used by Different Identities
| Signature | Number of Different Identities |
|-----------|-------------------------------|
| 02d98ddfbcd202b13c49330182129e05 | 604 |
| a2993eaecf1e3c2bcad4769cb79f1556 | 447 |
| 82fd3091310ce901a889676eb4531f1e | 321 |
| 9187c187a43b469fa1f995833080e7c3 | 294 |
| c0520c6e71446f9ebdf8047705b7bda9 | 145 |

### Case Studies
Among the suspicious apps reported by MassVet, some APKs were not detected as malicious by VirusTotal. We analyzed 40 randomly chosen samples and concluded that 20 of them were indeed problematic, likely zero-day malware. We reported these to four malware companies (F-Secure, Norton, Kaspersky, Trend Micro) for further validation. The behaviors of these apps include installing apps without user consent, collecting private data (e.g., taking screenshots of other apps) even though such information does not serve the stated functionality, and loading and executing native binaries for command and control.

These apps use various techniques to evade detection. For example, some hide their suspicious functionality for weeks before starting to run it. "Durak card game" is one such app, downloaded over 5,000,000 times. It was on Google Play before BBC reported it on February 4th, 2015 [25]. Only two scanners hosted by VirusTotal can detect it. This malware disguises itself as warning messages when the user unlocks their Android smartphone and waits for several weeks before performing malicious activities. Its advertisements do not show up until at least one reboot. Although Google removed "Durak card game," other apps with similar functionalities are still available on the Play Store. Some malicious apps conceal their program logic inside native binaries, encrypting them and decrypting them dynamically for execution. Others use Java reflection and other obfuscation techniques to hide their malicious code.

### Discussion
MassVet aims to address the issue of repackaged malware, which is a significant threat in mobile app security. Malware authors typically cannot afford to build a popular app just for spreading malware, so they rely on repackaging popular apps with similar attack payloads to keep costs low. Our technique exploits this weakness by leveraging the unique properties of repackaged malware.

However, our current implementation has limitations, particularly in defending against evasion techniques. For example, adding junk views to an existing app's view graph can affect user experience and may not be effective. A more effective alternative is to obfuscate the links between views, but this makes the app's UI structure less clear to our analyzer. Dynamic analysis tools like Monkey can be used to explore the connections between different views, but this can be resource-intensive. Further studies are needed to better understand and mitigate such threats.

Critical to the success of our DiffCom analysis is the removal of legitimate libraries. We can use a crawler to periodically gather shared libraries and code templates from the web to update our whitelists. Analyzing high-profile legitimate apps can help identify shared code missed by the crawler. The app market can also leverage account information to identify relationships between apps and remove legitimate shared code.

### Related Work
**Malicious App Detection:** Most existing approaches to detecting Android malware rely on content-based or behavior-based signatures. These methods often use static or dynamic analysis techniques and struggle to detect unknown malware. MassVet addresses these issues by focusing on the unique properties of repackaged malware. PiggyApp [54] is closely related, using features from a shared component to find and cluster other apps, then manually determining if the payloads are malicious. MassVet, in contrast, automatically detects malware by inspecting code differences among apps with similar UI structures and common methods shared between unrelated apps.

**Repackaging and Code Reuse Detection:** Our work is related to repackaging and code reuse detection. Centroids similarity comparison [7] is a building block for our technique but does not detect malicious apps. We built view-graph and code analysis on top of it to achieve accurate malware scanning. Recent proposals [50] use UI similarity to detect repackaged apps but are too slow. Our research improves performance through a more effective UI comparison technique, enabling real-time vetting of a large number of apps.

### Conclusion
We present MassVet, an innovative malware detection technique that compares a submitted app with all other apps on a market, focusing on differences with those having a similar UI structure and intersections with others. Our implementation analyzed nearly 1.2 million apps, discovering 127,429 malicious apps, including 20 likely zero-day. The approach achieves higher coverage than leading anti-malware products in the market.

### Acknowledgements
We thank our shepherd Adam Doupé and anonymous reviewers for their valuable comments. We also thank Dr. Sencun Zhu and Dr. Fangfang Zhang for sharing their ViewDroid code, and VirusTotal for validating over 100,000 apps. IU authors were supported in part by NSF 1117106, 1223477, and 1223495. Kai Chen was supported in part by NSFC 61100226, 61170281, and the strategic priority research program of CAS (XDA06030600). Peng Liu was supported by NSF CCF-1320605 and ARO W911NF-09-1-0525 (MURI).

### References
[1] ANDROGUARD. Reverse engineering, malware, and goodware analysis of Android applications. http://code.google.com/p/androguard/, 2013.
[2] APPBRAIN. Ad networks - Android library statistics. http://www.appbrain.com/stats/libraries/ad. (Visited on 11/11/2014).
[3] APPCELERATOR. 6 steps to great mobile apps. http://www.appcelerator.com/. 2014.
[4] ARZT, S., RASTHOFER, S., FRITZ, C., BODDEN, E., BARTEL, A., KLEIN, J., LE TRAON, Y., OCTEAU, D., AND MCDANIEL, P. Flowdroid: Precise context, flow, field, object-sensitive, and lifecycle-aware taint analysis for Android apps. In PLDI (2014), ACM, p. 29.
[5] BAYER, U., COMPARETTI, P. M., HLAUSCHEK, C., KRUEGEL, C., AND KIRDA, E. Scalable, behavior-based malware clustering. In NDSS (2009), vol. 9, Citeseer, pp. 8–11.
[6] CHEN, K. A list of shared libraries and ad libraries used in Android apps. http://sites.psu.edu/kaichen/2014/02/20/a-list-of-shared-libraries-and-ad-libraries-used-in-android-apps.
[7] CHEN, K., LIU, P., AND ZHANG, Y. Achieving accuracy and scalability simultaneously in detecting application clones on Android markets. In ICSE (2014).
[8] CISCO. Security annual report. http://www.cisco.com/web/offer/gist ty2 asset/Cisco 2014 ASR.pdf, 2014.
[9] CRUSSELL, J., GIBLER, C., AND CHEN, H. Attack of the clones: Detecting cloned applications on Android markets. ESORICS (2012), 37–54.
[10] CRUSSELL, J., GIBLER, C., AND CHEN, H. Scalable semantics-based detection of similar Android applications. In ESORICS (2013).
[11] ENCK, W., GILBERT, P., CHUN, B.-G., COX, L. P., JUNG, J., MCDANIEL, P., AND SHETH, A. Taintdroid: An information-flow tracking system for real-time privacy monitoring on smartphones. In OSDI (2010), vol. 10, pp. 1–6.
[12] ENCK, W., OCTEAU, D., MCDANIEL, P., AND CHAUDHURI, S. A study of Android application security. In USENIX security symposium (2011), vol. 2, p. 2.
[13] ENVATOMARKET. Android notification templates library. http://codecanyon.net/item/android-notification-templates-library/5292884. 2014.
[14] ERNST, M. D., JUST, R., MILLSTEIN, S., DIETL, W. M., PERNSTEINER, S., ROESNER, F., KOSCHER, K., BARROS, P., BHORASKAR, R., HAN, S., ET AL. Collaborative verification of information flow for a high-assurance app store.
[15] F-SECURE. F-Secure: Internet security for all devices. http://f-secure.com, 2014.
[16] F-SECURE. Threat report H2 2013. Tech. rep., f-secure, http://www.f-secure.com/documents/996508/1030743/Threat Report H2 2013.pdf, 2014.
[17] FENG, Y., ANAND, S., DILLIG, I., AND AIKEN, A. Apposcopy: Semantics-based detection of Android malware through static analysis. In SIGSOFT FSE (2014).
[18] GILBERT, P., CHUN, B.-G., COX, L. P., AND JUNG, J. Vision: Automated security validation of mobile apps at app markets. In Proceedings of the second international workshop on Mobile cloud computing and services (2011), ACM, pp. 21–26.
[19] GRACE, M., ZHOU, Y., ZHANG, Q., ZOU, S., AND JIANG, X. Riskranker: Scalable and accurate zero-day Android malware detection. In Proceedings of the 10th international conference on Mobile systems, applications, and services (2012), ACM, pp. 281–294.
[20] GRIFFIN, K., SCHNEIDER, S., HU, X., AND CHIUEH, T.-C. Automatic generation of string signatures for malware detection. In Recent Advances in Intrusion Detection (2009), Springer, pp. 101–120.