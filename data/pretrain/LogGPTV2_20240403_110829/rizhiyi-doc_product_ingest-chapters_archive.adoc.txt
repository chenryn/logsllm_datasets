== 备份策略
为了长期归档保存接收的日志数据，日志易提供数据备份功能。
数据备份功能将从消息队列中实时接收并备份数据到文件存储或对象存储中。
备份到对象存储上，需要在日志易 Manager 上配置对象存储相关参数，如 `s3.endpoint`, `s3.secret_key`, `s3.user` 等。如下图所示：
image::images/arch-s3-config.png[]
备份到文件存储上，数据以日期和appname两个层级为目录，并按指定的原始日志大小进行文件切分和压缩。实际的备份目录(由archiver模块的 `local.data_root` 参数指定，默认为 `/data/rizhiyi/share/archiver/data`)层级示例如下：
----
.
├── ops
│   └── 20170120
│       ├── myappname8
│       │   └── 1489229811818
│       └── myappname9
│           └── 1489229811818
└── _default
    ├── 20170120
    │   └── myappname8
    │       └── 1489229811832
    └── 20170121
        └── myappname8
            └── 1489229811882
----
目录分为三级，第一级为租户名称，第二级为日期，第三级为appname。其中，第一级的 `_default` 目录为老版本客户升级到日志易 2.4 版本时迁移产生，全平台可见。
第三级目录下的文件大小和切分策略，取决于 archiver 模块的两个配置参数。在数据量较大时，为了降低磁盘IO压力，您可以适当调高：`local.flush_interval`指定实际写文件的时间间隔，`local.rolling_size`指定单个文件的最大大小。
和文件存储类似但略有不同，备份到对象存储时，系统将根据 `s3.bucketname_prefix` + `s3.bucketname_split_interval` 配置来定期切分生成不同的对象桶，桶内不同 appname 为路径前缀，并配置有不同的生命周期：
image::images/arch-s3-rule.png[]
同一 appname 下，切分的实际备份文件作为一个对象，上传到对象存储中：
image::images/arch-s3-list.png[]
目前的归档模块是分布式的程序，支持多机同时进行归档和恢复功能，依赖于zookeeper，因此请确保zookeeper的服务正常。如果性能不满足要求，可通过增加部署的机器来进行操作。暂时不支持在一台机器上部署多个归档模块。
[IMPORTANT]
====
如果在多台服务器上启动了备份模块，请确保备份目录为共享存储
====
因为数据备份功能依赖于logriver模块的输出topic：`log_river`，请确保日志易Manager中，logriver模块的`kafka_sink.enable_sink_to_kafka`配置是开启状态(true)；也需要确保kafka中这个log_river的topic已经创建。下图为 logriver 模块的相关配置：
image::images/kafka_sink.png[]
上述2项配置可以排列组合实现这些功能：
[width="100%",options="header,footer"]
|====================
|kafka_sink  |.enable_sink_to_kafka=true  |.enable_sink_to_kafka=false  
|.enable_filter=true  | web备份配置生效 | 不能写入  
|.enable_filter=false  | 全量备份到kafka topic |  不能写入
|====================
=== 数据备份
要使用数据备份功能，进入数据流-备份策略页面：
image::images/archiver-list.png[]
在备份策略Tab页点击"添加"，在弹层中添加 appname 或 appname 前缀，选择备份方式为本地或 S3，备份内容为全部字段或基础字段，并设置生命周期，即可完成增加备份操作。而从需要备份的列表中删除一个appname，该appname从即刻起，不再备份。
由于策略中的通配符可能多条同时命中同一份数据，因此备份策略有明确的次序，先命中者生效。用户可以在列表右侧操作栏选择上移、下移、置顶、置底，保证备份策略达到预期效果。
添加和删除操作都立即生效，并仅对后续接入的数据生效。已备份在磁盘的数据，不受该操作影响，但修改生命周期时间会影响已备份数据的存储时长。
=== 数据恢复
在数据列表Tab，您可以进行数据恢复。按时间、appname、备份状态等条件过滤数据列表进行条件过滤，停止正在进行的数据恢复工作，恢复一个已备份完成的数据。
如备份内容为全部字段，则恢复数据也将包含字段提取的内容；如备份内容选为基础字段，则恢复数据不包含字段提取的内容，只有日志易内置的 timestamp、raw_message、hostname、ip、appname、tag、source 等字段。
备份数据在恢复时，将固定写入相应的 [DOMAIN-]yotta[-YYYYMMDD-]restored 恢复索引，并不遵循自定义的索引路由策略。比如，您可以用采用 `index:ops-yotta-20211109-restored *` 来搜索您在 2021 年 11 月 9 日恢复的所有数据。
和数据接入流程中的out of range问题类似，备份流程同样需要用户选择采用日志数据中的哪个时间戳。
通过 archiver 模块的 `sink.use_collector_recv_timestamp` 参数，指定采用 `collector_recv_timestamp` 或 `timestamp` 来作为备份数据最终恢复到的索引日期。
列表中的状态分为如下四种：
* 已恢复：数据已经恢复到索引中。当您手动删除掉当前domain对应的索引，又将重新变成可恢复状态；
* 正在运行：正在执行恢复操作，您可以执行停止操作；
* 等待：系统在同一时刻只能有一个日期和appname对应的数据处于正在恢复状态，因此其他提交的恢复操作在排队时将是等待状态。等待状态时，您同样可以执行停止操作。
* 可恢复：除以上三种状态，其他时候都是可恢复状态。
[NOTE]
====
由于数据恢复操作的粒度较大，可能出现进度长期为0，然后直接跃升为100%的正常现象。您可以通过 `reindex.max_batch_size` 参数做粒度调整。
====
由于数据备份时，偏移量是定时提交到 Kafka，在进程异常退出、分布式重新调度登情况时，备份数据会从上一次偏移量位置开始读取，因此备份数据可能出现重复。日志易系统通过内部唯一标识符保证备份数据恢复到索引中时自动去重，您可以放心搜索统计。