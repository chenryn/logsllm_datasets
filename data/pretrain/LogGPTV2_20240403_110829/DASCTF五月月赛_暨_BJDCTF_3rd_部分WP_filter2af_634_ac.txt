        A, B = getPrime(64), getPrime(1025)
        Rn = getPrime(1024)
        key1 = [Rn//2**i for i in range(1, length+1)]
        key2 = [i*A % B for i in key1]
        return key1,key2
    def encrypt(text,key):
        Sum=0
        for i in range(len(text)):
            Sum+=int(text[i])*key[i]
        return Sum
    def save(Ciper,Key):
        f1=open("pub.txt","w")
        for i in range(len(Key)):
            f1.write(str(Key[i])+'n')
        f2=open("cip.txt","w")
        f2.write(hex(Ciper))
    FLAG = bin(bytes_to_long(flag.encode()))[2:]
    Key1,Key2 = genKey(len(FLAG))
    Ciper = encrypt(FLAG,Key1)
    save(Ciper,Key2)
这是一个超递增背包问题。但这里用的是一个超递减序列
并且对这个序列做了一次加密，加密方式为 a*A % B，其中x为序列中的每一个元素，B大于序列中最大的元素。
想要解密，我们首先需要获得A和B，然后来通过求逆来获得原序列。
获得A的方式很简单。这个序列的最小的值很小，这个时候用不到模运算，我们只需要对比较小的两个值求一个最大公因数就能得到A。
至于求B，我们找到比较大的两个数，并且满足如下关系，即$a _{i+1} =i:
            flag+='1'
            c-=i
        else:
            flag+='0'
    print long_to_bytes(int(flag,2))
###  Backpacker
    import signal
    import string
    from hashlib import sha256
    from Crypto.Util.number import *
    from Crypto.Random import random
    flag = 'flag'
    banner = '''
     ____             _                     _             _       _   _ 
    | __ )  __ _  ___| | ___ __   __ _  ___| | _____ _ __( )___  | | | | ___  _ __ ___   ___
    |  _  / _` |/ __| |/ / '_  / _` |/ __| |/ / _  '__|// __| | |_| |/ _ | '_ ` _  / _ \
    | |_) | (_| | (__|   =i:
            m+='1'
            c-=i
        else:
            m+='0'
    print c
    if enc(data,int(m,2)) :
        m = m[::-1]
    m = int(m,2)
    sh.sendline(hex(m)[2:])
    sh.recvuntil("knapsack.n")
    data=[]
    for _ in range(100):
        data.append(int(sh.recvline()[:-1]))
    print("a = "+str(data).replace("L",""))
    sh.recvuntil("[+]c = ")
    c = int(sh.recvuntil("n")[:-1])
    print("s = "+str(c))
    sh.interactive()
拿到数据了去用sage解密
    a = #填入序列a
    s = #填入密文值
    m=[]
    for i in range(100):
        b=[]
        for j in range(100):
            if i == j:
                b.append(1)
            else:
                b.append(0)
        m.append(b)
    b=[]
    for i in range(100):
        m[i].append(2**156*a[i])
        b.append(1/2)
    b.append(2**156*s)
    m.append(b)
    #print(len(m[0])) 
    M = matrix(QQ, m)
    v = M.LLL()[0]
    print(v)
    flag=''
    for i in v[:-1]:
        if i < 0:
            flag+='0'
        else:
            flag+='1'
    print(hex(int(flag,2))[2:])
然后提交，碰点运气。