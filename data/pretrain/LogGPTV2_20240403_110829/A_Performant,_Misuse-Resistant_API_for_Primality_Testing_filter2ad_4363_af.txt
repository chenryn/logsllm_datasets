if (! B N _ i s _ o d d ( n )) {
BN_free ( two );
return 0;
}
BN_CTX * ctx = B N _ C T X _ n e w ();
BIGNUM * result = BN_new ();
BIGNUM * zero = BN_new ();
BIGNUM * np1 = BN_new ();
BIGNUM * m i n u s o n e = BN_new ();
BIGNUM * u = BN_new ();
BIGNUM * d = BN_new ();
BIGNUM * s e v e n t e e n = BN_new ();
int32_t J ;
int32_t res ;
const char * m1 = " -1";
BN_add ( np1 ,n , B N _ v a l u e _ o n e ());
BN_zero ( zero );
B N _ d e c 2 b n (& minusone , m1 );
B N _ s e t _ w o r d (d , 5);
B N _ s e t _ w o r d ( seventeen , 17);
// while jacobi (d , n ) != -1
while (( J = B N _ j a c o b i (d , n ))!= -1) {
if ( J ==0) { // if jacobi (d , n ) == 0 then d | n , i . e n is c o m p o s i t e
res = 0;
goto free ;
}
if ( BN_cmp ( zero , d )==1) { // 0 > d
BN_mul (d ,d , minusone , ctx );
BN_add (d ,d , two );
}
else {
BN_add (d ,d , two );
BN_mul (d ,d , minusone , ctx );
}
if ( BN_cmp (d , s e v e n t e e n )==0 && !( BN_cmp ( B N _ i s _ p e r f e c t _ s q u a r e ( n ) , zero )==0)) {
res = 0;
goto free ;
}
}
u = B N _ l u c a s _ s e q u e n c e (d , np1 , n );
BN_mod ( result ,u ,n , ctx );
if ( BN_cmp ( result , zero )==0) {
res = 1;
goto free ;
}
else {
res = 0;
goto free ;
}
free :
B N _ C T X _ f r e e ( ctx );
BN_free ( result );
BN_free ( zero );
BN_free ( np1 );
BN_free ( m i n u s o n e );
BN_free ( two );
BN_free ( u );
BN_free ( d );
return res ;
}
int B N _ j a c o b i ( BIGNUM *a , BIGNUM * n ){
// c o m p u t e s jacobi symbol of ( a / n ) , c u r r e n t l y returns 2 if a , n are invalid input
BIGNUM * x = BN_new ();
BIGNUM * y = BN_new ();
BIGNUM * halfy = BN_new ();
BIGNUM * r = BN_new ();
BIGNUM * s = BN_new ();
BN_CTX * ctx = B N _ C T X _ n e w ();
B N _ n n m o d (x ,a ,n , ctx );
BN_copy (y , n );
int J
int k = 0;
= 1;
BIGNUM * three = BN_new ();
B N _ s e t _ w o r d ( three , 3);
BIGNUM * four = BN_new ();
B N _ s e t _ w o r d ( four , 4);
BIGNUM * five = BN_new ();
B N _ s e t _ w o r d ( five , 5);
BIGNUM * eight = BN_new ();
B N _ s e t _ w o r d ( eight , 8);
if (! B N _ i s _ o d d ( n )|| BN_cmp (n , B N _ v a l u e _ o n e ())  1
BN_mod (x ,x ,y , ctx );
B N _ r s h i f t 1 ( halfy , y );
if ( BN_cmp (x , halfy )==1) {
BN_sub (x ,y , x );
BN_mod (r ,y , four , ctx );
if ( BN_cmp (r , three )==0) {
J = -J ;
}
}
if ( B N _ i s _ z e r o ( x )) {
// gcd (a , n )!=1 so we return 0
J = 0;
goto free ;
}
// count the zero bits in x , i . e the largest value of n s . t 2^ n divides x evenly .
k = 0;
while (! B N _ i s _ b i t _ s e t (x , k )) {
k ++;
}
B N _ r s h i f t (x ,x , k );
if ( k %2) {
BN_mod (s ,y , eight , ctx );
if ( BN_cmp (s , three )==0 || BN_cmp (s , five )==0) {
J = -J ;
}
}
BN_mod (r ,x , four , ctx );
BN_mod (s ,y , four , ctx );
if ( BN_cmp (r , three )==0 && BN_cmp (s , three )==0) {
J = -J ;
}
BN_swap (x , y );
}
free :
B N _ C T X _ f r e e ( ctx );
BN_free ( x );
BN_free ( y );
BN_free ( halfy );
BN_free ( r );
BN_free ( s );
BN_free ( three );
BN_free ( four );
BN_free ( five );
BN_free ( eight );
return J ;
}
void B N _ r s h i f t 1 _ r o u n d ( BIGNUM *r , BIGNUM * a ){
// t e m p o r a r y fix as part of code demo , but the r o u n d i n g in B N _ r s h i f t 1
// is not c o n s i s t a n t with python / java across p o s i t i v e and n e g a t i v e numbers .
// This f u n c t i o n adds one before the shift if a is n e g a t i v e and p e r f o r m s
// B N _ r s h i f t 1 n o r m a l l y o t h e r w i s e . e . g this f u n c t i o n rounds -127/2 = -63.5
// to -64 ( toward - i n f i n i t y ) , where as B N _ r s h i f t 1 would round to -63 ( toward 0)
// This is needed in my i m p l e m e n t a t i o n of jacobi symbol c a l c u l a t i o n .
// Can â€™ t simply negate result , as we still want 127/2 = 63.
BIGNUM * zero = BN_new ();
BIGNUM * one = BN_new ();
BN_zero ( zero );
BN_one ( one );
if ( BN_cmp ( zero , a )==1) { // a =1 \ n ");
BN_free ( one );
return zero ;
}
if ( BN_cmp ( one , C )==0) {
BN_free ( zero );
return one ;
}
BN_CTX * ctx = B N _ C T X _ n e w ();
BIGNUM * B = BN_new ();
BIGNUM * X = BN_new ();
BIGNUM * r = BN_new ();
BIGNUM * s = BN_new ();
BIGNUM * X2 = BN_new ();
BIGNUM * two = BN_new ();
size_t c_bits = B N _ n u m _ b i t s ( C );
size_t m = ( c_bits +1)/2;
B N _ s e t _ w o r d ( two , 2);
B N _ s e t _ b i t (B , m );
BN_add (B ,B , C );
B N _ s e t _ b i t (X , m );
BN_sub (X ,X , one );
BN_mul ( X2 ,X ,X , ctx );
for (;;) {
BN_add (r , X2 , C );
BN_mul (s ,X , two , ctx );
BN_div (X , NULL ,r ,s , ctx );
BN_mul ( X2 ,X ,X , ctx );
if ( BN_cmp (B , X2 )==1) {
break ;
}
}
if ( BN_cmp ( X2 , C )==0) {
ret = X ;
goto free ;
}
else {
ret = zero ;
goto free ;
}
free :
B N _ C T X _ f r e e ( ctx );
BN_free ( B );
BN_free ( r );
BN_free ( s );
BN_free ( X2 );
BN_free ( one );
BN_free ( two );
BN_free ( zero );
return ret ;
}