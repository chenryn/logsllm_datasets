        "architectures": [
            "SCMP_ARCH_X86_64",
            "SCMP_ARCH_X86",
            "SCMP_ARCH_X32"
        ],
        "syscalls": [
            {
                "names": [
                    "arch_prctl",
                    "sched_yield",
                    "futex",
                    "write",
                    "mmap",
                    "exit_group",
                    "madvise",
                    "rt_sigprocmask",
                    "getpid",
                    "gettid",
                    "tgkill",
                    "rt_sigaction",
                    "read",
                    "getpgrp"
                ],
                "action": "SCMP_ACT_ALLOW",
                "args": [],
                "comment": "",
                "includes": {},
                "excludes": {}
            }
        ]
    }
  * `defaultAction` : 指定默认的seccomp 操作，具体的可选参数上面已经介绍过了，最常用的无非是`SCMP_ACT_ALLOW`、`SCMP_ACT_ERRNO`，这里选择`SCMP_ACT_ERRNO`，表示默认禁止全部系统调用，以白名单的形式在赋予可用的系统调用。
  * `architectures` ： 系统架构，不同的系统架构系统调用可能不同。
  * `syscalls`：指定系统调用以及对应的操作，name定义系统调用名，action对应的操作，这里表示允许name里边中的系统调用，args对应系统调用参数，可以为空。
这样，在使用 _docker run_ 运行容器时，就可以使用 `--security-opt` 选项指定该配置文件来对容器进行系统调用定制。
    $ docker run --rm -it --security-opt seccomp=/path/to/seccomp/example.json hello-world
举例，禁止容器创建文件夹，就可以用黑名单的形式禁用mkdir系统调用
> seccomp_mkdir.json:
    {
        "defaultAction": "SCMP_ACT_ALLOW",
        "syscalls": [
            {
                "name": "mkdir",
                "action": "SCMP_ACT_ERRNO",
                "args": []
            }
        ]
    }
使用该策略启动容器，并在容器中创建文件夹时，就会收到禁止信息，不允许创建文件夹。
    null@ubuntu:~/seccomp/docker$ sudo docker run --rm -it --security-opt seccomp=seccomp_mkdir.json busybox /bin/sh
    / # ls
    bin   dev   etc   home  proc  root  sys   tmp   usr   var
    / # mkdir test
    mkdir: can't create directory 'test': Operation not permitted
当然也可以不适用任何seccomp策略启动容器，只需要在启动选项中加上`--security-opt seccomp=unconfined`即可。
## zaz
_zaz seccomp_
是一个可以为容器自动生成json格式的seccomp文件的开源工具，项目地址：
主要用法为
    zaz seccomp docker IMAGE COMMAND
它能够为特定的可执行文件定制系统调用，以只允许特定的操作，禁止其他操作
举个例子：为alpine中的ping命令生成seccomp配置文件
    $ sudo ./zaz seccomp docker alpine "ping -c5 8.8.8.8" > seccomp_ping.json
    $ cat seccomp_ping.json | jq '.'
    {
      "defaultAction": "SCMP_ACT_ERRNO",
      "architectures": [
        "SCMP_ARCH_X86_64",
        "SCMP_ARCH_X86",
        "SCMP_ARCH_X32"
      ],
      "syscalls": [
        {
          "names": [
            "arch_prctl",
            "bind",
            "clock_gettime",
            "clone",
            "close",
            "connect",
            "dup2",
            "epoll_pwait",
            "execve",
            "exit",
            "exit_group",
            "fcntl",
            "futex",
            "getpid",
            "getsockname",
            "getuid",
            "ioctl",
            "mprotect",
            "nanosleep",
            "open",
            "poll",
            "read",
            "recvfrom",
            "rt_sigaction",
            "rt_sigprocmask",
            "rt_sigreturn",
            "sendto",
            "set_tid_address",
            "setitimer",
            "setsockopt",
            "socket",
            "write",
            "writev"
          ],
          "action": "SCMP_ACT_ALLOW"
        }
      ]
    }
如上所示，`zaz`检测到了33个系统调用，使用白名单的形式过滤系统调用。那它以白名单的形式生成的系统调用能否很好的过滤系统系统呢？是否能够满足运行ping命令，而不能运行除了它允许的系统调用之外的命令呢？做个测试，首先用下面Dockerfile构建一个简单的镜像。
> Dockerfile
    FROM alpine:latest
    CMD ["ping","-c5","8.8.8.8"]
构建成功后，使用默认的seccomp策略启动容器，没有任何问题，可以运行。
    $ sudo docker build -t pingtest .
    $ sudo docker run --rm -it pingtest
    PING 8.8.8.8 (8.8.8.8): 56 data bytes
    64 bytes from 8.8.8.8: seq=0 ttl=127 time=42.139 ms
    64 bytes from 8.8.8.8: seq=1 ttl=127 time=42.646 ms
    64 bytes from 8.8.8.8: seq=2 ttl=127 time=42.098 ms
    64 bytes from 8.8.8.8: seq=3 ttl=127 time=42.484 ms
    64 bytes from 8.8.8.8: seq=4 ttl=127 time=42.007 ms
    --- 8.8.8.8 ping statistics ---    5 packets transmitted, 5 packets received, 0% packet loss
    round-trip min/avg/max = 42.007/42.274/42.646 ms
接着我们使用上述zaz生成的策略试试，
    $ sudo docker run --rm -it --security-opt seccomp=seccomp_ping.json pingtest
    docker: Error response from daemon: failed to create shim: OCI runtime create failed: container_linux.go:380: starting container process caused: close exec fds: open /proc/self/fd: operation not permitted: unknown.
容器并没有成功启动，在创建OCI的时候就报错了，报错原因是`operation not
permitted`,这个报错上面似乎提到过，是想要使用的系统调用被禁用的缘故，可能zaz这种白名单的模式鲁棒性还是不够强，而且Docker更新那么多次，`zaz`缺乏维护导致捕获的系统调用不足，在容器启动过程中出现了问题。奇怪的是，当我在此运行同样的命令，却引发了panic报错：`No
error following JSON procError payload`。
    $ sudo docker run --rm -it --security-opt seccomp=seccomp_ping.json pingtest
    docker: Error response from daemon: failed to create shim: OCI runtime create failed: runc did not terminate successfully: exit status 2: panic: No error following JSON procError payload.
    goroutine 1 [running]:
    github.com/opencontainers/runc/libcontainer.parseSync(0x56551adf30b8, 0xc000010b20, 0xc0002268a0, 0xc00027f9e0, 0x0)
            github.com/opencontainers/runc/libcontainer/sync.go:93 +0x307
    github.com/opencontainers/runc/libcontainer.(*initProcess).start(0xc000297cb0, 0x0, 0x0)
            github.com/opencontainers/runc/libcontainer/process_linux.go:440 +0x5ef
    github.com/opencontainers/runc/libcontainer.(*linuxContainer).start(0xc000078700, 0xc000209680, 0x0, 0x0)
            github.com/opencontainers/runc/libcontainer/container_linux.go:379 +0xf5
    github.com/opencontainers/runc/libcontainer.(*linuxContainer).Start(0xc000078700, 0xc000209680, 0x0, 0x0)
            github.com/opencontainers/runc/libcontainer/container_linux.go:264 +0xb4
    main.(*runner).run(0xc0002274c8, 0xc0000200f0, 0x0, 0x0, 0x0)
            github.com/opencontainers/runc/utils_linux.go:312 +0xd2a
    main.startContainer(0xc00025c160, 0xc000076400, 0x1, 0x0, 0x0, 0xc0002275b8, 0x6)
            github.com/opencontainers/runc/utils_linux.go:455 +0x455
    main.glob..func2(0xc00025c160, 0xc000246000, 0xc000246120)
            github.com/opencontainers/runc/create.go:65 +0xbb
    github.com/urfave/cli.HandleAction(0x56551ad3b040, 0x56551ade81e8, 0xc00025c160, 0xc00025c160, 0x0)
            github.com/urfave/cli@v1.22.1/app.go:523 +0x107
    github.com/urfave/cli.Command.Run(0x56551aa566f5, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x56551aa5f509, 0x12, 0x0, ...)
            github.com/urfave/cli@v1.22.1/command.go:174 +0x579
    github.com/urfave/cli.(*App).Run(0xc000254000, 0xc000132000, 0xf, 0xf, 0x0, 0x0)
            github.com/urfave/cli@v1.22.1/app.go:276 +0x7e8
    main.main()
            github.com/opencontainers/runc/main.go:163 +0xd3f
    : unknown.
这种报错或许是不应该的，我尝试在网上寻找报错的相关信息，类似的情况很少，而且并不是每次运行都是出现这种panic，正常情况下应该是`operation
not permitted`，这是由于我们的白名单没有完全包括必须的系统调用导致的。目前将此情况汇报给了Moby
[issue](https://github.com/moby/moby/issues/43730)，或许能够得到一些解答。
类似panic信息：
[https://bugzilla.redhat.com/show_bug.cgi?format=multiple&id=1714183](https://bugzilla.redhat.com/show_bug.cgi?format=multiple&id=1714183)
无论是哪种报错，看起来都是runc出了问题，尝试解决这个问题，我们就要知道Docker到底是如何在运行时加载seccomp？
当我们要创建一个容器的时候 ，容器守护进程 Dockerd会请求 `containerd` 来创建一个容器 ， `containerd`
收到请求后，也并不会直接去操作容器，而是创建一个叫做 `containerd-shim` 的进程，让这个进程去操作容器，之后`containerd-shim`会通过OCI去调用容器运行时`runc`来启动容器， `runc` 启动完容器后本身会直接退出，`containerd-shim`
则会成为容器进程的父进程, 负责收集容器进程的状态, 上报给 `containerd`, 并在容器中 pid 为 1
的进程退出后接管容器中的子进程进行清理, 确保不会出现僵尸进程 。也就是说调用顺序为
    Dockerd -> containerd -> containerd-shim -> runc
启动一个容器ubuntu，并在容器中再运行一个bash
    null@ubuntu:~$ sudo docker run --rm -it ubuntu /bin/bash
    root@ef57fff95b80:/# bash
    root@ef57fff95b80:/# ps
       PID TTY          TIME CMD
         1 pts/0    00:00:00 bash
         9 pts/0    00:00:00 bash
        12 pts/0    00:00:00 ps
查看调用栈，`containerd-shim`（28051-28129）并没有被施加seccomp,而容器内的两个bash（1 ->
28075;9->28126）被施加了seccomp策略。
    root@ubuntu:/home/null# pstree -p | grep containerd-shim
               |-containerd-shim(28051)-+-bash(28075)---bash(28126)
               |                        |-{containerd-shim}(28052)
               |                        |-{containerd-shim}(28053)
               |                        |-{containerd-shim}(28054)
               |                        |-{containerd-shim}(28055)
               |                        |-{containerd-shim}(28056)
               |                        |-{containerd-shim}(28057)
               |                        |-{containerd-shim}(28058)
               |                        |-{containerd-shim}(28059)
               |                        |-{containerd-shim}(28060)
               |                        `-{containerd-shim}(28129)
    root@ubuntu:/home/null# grep -i seccomp /proc/28051/status
    Seccomp:        0
    root@ubuntu:/home/null# grep -i seccomp /proc/28075/status
    Seccomp:        2
    root@ubuntu:/home/null# grep -i seccomp /proc/28126/status
    Seccomp:        2
    root@ubuntu:/home/null# grep -i seccomp /proc/28052/status
    Seccomp:        0
    ...
    ...
    root@ubuntu:/home/null# grep -i seccomp /proc/28129/status
    Seccomp:        0
也就是说对容器施加seccomp 是在`container-shim`启动之后，在调用runc的时候出现了问题，是否我们的seccomp策略也要将runc所必须的系统调用考虑进去呢？Zaz是否考虑了容器启动时候的runc所必须的系统调用?
这就需要捕获容器在启动时，runc所必要的系统调用了。
## Sysdig
为了获取容器运行时runc用了哪些系统调用，可以有很多方法，比如ftrace、strace、fanotify等，这里使用`sysdig`来监控容器的运行，`sisdig`时一款原生支持容器的系统可见性工具，项目地址：