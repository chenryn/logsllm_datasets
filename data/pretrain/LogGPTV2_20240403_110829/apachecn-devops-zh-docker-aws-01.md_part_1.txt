# 一、容器和 Docker 基础
Docker 和亚马逊网络服务是目前最热门和最流行的两种技术。Docker 是目前地球上最受欢迎的容器平台，而亚马逊网络服务是排名第一的公共云提供商。大大小小的组织都在大规模采用容器，公共云不再是初创企业的游乐场，大型企业和组织纷纷迁移到云。好消息是，这本书将为您提供实用、真实的见解和知识，告诉您如何同时使用 Docker 和 AWS 来帮助您比以往任何时候都更快、更高效地测试、构建、发布和部署您的应用。
在本章中，我们将简要讨论 Docker 的历史，为什么 Docker 如此具有革命性，以及 Docker 的高级架构。我们将描述支持在 AWS 中运行 Docker 的各种服务，并讨论为什么您可能会根据组织的需求选择一种服务。
然后，我们将重点关注使用 Docker 启动和运行您的本地环境，并安装运行本书示例应用所需的各种软件先决条件。示例应用是一个用 Python 编写的简单 web 应用，它将数据存储在 MySQL 数据库中，本书将使用示例应用来帮助您解决现实世界中的挑战，例如测试、构建和发布 Docker 映像，以及在 AWS 上的各种容器管理平台中部署和运行 Docker 应用。在将示例应用打包为 Docker 映像之前，您需要了解应用的外部依赖关系以及测试、构建、部署和运行应用所需的关键任务，并且您将学习如何安装应用依赖关系、运行单元测试、在本地启动应用，以及编排关键的操作任务，例如建立示例应用运行所需的初始数据库模式和表。
本章将涵盖以下主题:
*   容器和 Docker 介绍
*   为什么容器是革命性的
*   Docker 架构
*   AWS 中的 Docker
*   设置本地 Docker 环境
*   安装示例应用
# 技术要求
下面列出了完成本章的技术要求:
*   满足软件和硬件列表中定义的最低规格的计算机环境
以下 GitHub URL 包含本章使用的代码示例:[https://GitHub . com/docker-in-AWS/docker-in-AWS/tree/master/ch1](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch1)[。](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch3)
查看以下视频，了解《行动守则》:
[http://bit.ly/2PEKlVQ](http://bit.ly/2PEKlVQ)
# 容器和 Docker 介绍
最近，容器已经成为技术世界的通用语言，很难想象仅仅在几年前，只有一小部分技术社区听说过容器。
要追溯容器的起源，你需要回溯到 1979 年，当时 Unix V7 引入了 chroot 系统调用。chroot 系统调用提供了将正在运行的进程的根目录更改到文件系统中不同位置的能力，并且是第一个提供某种形式的进程隔离的机制。chroot 于 1982 年被添加到伯克利软件发行版(BSD)中(这是现代 macOS 操作系统的祖先)，在容器化和隔离方面，多年来没有发生太多的事情，直到 2000 年发布了一个名为 FreeBSD Jails 的功能，它提供了名为“jalls”的独立环境，每个环境都可以被分配自己的 IP 地址，并在网络上独立通信。
后来，在 2004 年，Solaris 推出了 Solaris 容器的第一个公共测试版(最终被称为 Solaris Zones)，它通过创建区域来提供系统资源分离。我记得这是我在 2007 年使用的一项技术，用于帮助克服缺少昂贵的 Sun SPARC 物理基础架构的问题，并在一台 SPARC 服务器上运行多个版本的应用。
在 2000 年代中期，向容器进军的过程中取得了更多的进展，2005 年发布了 Open Virtuozzo(开放 VZ)，它修补了 Linux 内核，以提供操作系统级别的虚拟化和隔离。2006 年，谷歌推出了一个名为进程容器(最终更名为控制组或 cgroups)的功能，该功能能够限制一组进程的 CPU、内存、网络和磁盘使用。2008 年，一个名为 Linux 命名空间的特性，提供了将不同类型的资源相互隔离的能力，与 cgroups 结合创建了 Linux 容器(LXC)，形成了我们今天所知的现代容器的最初基础。
2010 年，随着云计算开始普及，出现了一批平台即服务(PaaS)初创企业，它们为 Java Tomcat 或 Ruby on Rails 等特定应用框架提供了完全托管的运行时环境。一家名为 dotCloud 的初创公司与众不同，它是第一家“多语种”的 PaaS 提供商，这意味着你可以使用他们的服务运行任何你想要的应用环境。支撑这一点的技术是 Linux Containers，dotCloud 增加了一些或专有的特性，为他们的客户提供了一个完全受管理的容器平台。到了 2013 年，PaaS 市场已经很好地真正进入了 Gartner 炒作周期([https://en.wikipedia.org/wiki/Hype_cycle](https://en.wikipedia.org/wiki/Hype_cycle))的幻灭低谷，dotCloud 也处于金融崩溃的边缘。该公司的联合创始人之一所罗门·海克斯(Solomon Hykes)向董事会提出了一个想法，即开源他们的容器管理技术，认为这有巨大的潜力。董事会不同意，然而所罗门和他的技术团队不顾一切地进行，其余的，正如他们所说，都是历史。
在 2013 年向世界宣布 Docker 是一个新的开源容器管理平台后，Docker 迅速崛起，成为开源世界和供应商社区的宠儿，很可能是历史上发展最快的技术之一。截至 2014 年底，在 Docker 1.0 发布期间，已有超过 1 亿个 Docker 容器被下载——快进到 2018 年 3 月，这个数字为 *37* *亿*次下载。2017 年底，财富 100 强企业的容器使用率为 71%，这表明 Docker 和容器已被初创企业和企业普遍接受。今天，如果您正在构建基于微服务架构的现代分布式应用，那么您的技术栈很可能将由 Docker 和容器来支撑。
# 为什么容器是革命性的
容器短暂而成功的历史不言而喻，这就引出了一个问题，*为什么容器这么受欢迎*？下面提供了这个问题的一些更重要的答案:
*   **轻量级**:容器经常被比作虚拟机，在这种情况下，容器比虚拟机要轻量得多。一个容器可以在几秒钟内为您的应用启动一个隔离且安全的运行时环境，而典型的虚拟机启动只需要几分钟。容器映像也比虚拟机映像小得多。
*   **速度**:容器速度很快——它们可以在几秒钟内下载并启动，几分钟内您就可以测试、构建和发布您的 Docker 映像，以便立即下载。这使得组织能够更快地创新，这在当今竞争日益激烈的环境中至关重要。
*   **便携** : Docker 让您在本地机器、数据中心和公共云中运行应用变得前所未有的容易。因为 Docker 包是您的应用的完整运行时环境，包含操作系统依赖项和第三方包，所以您的容器主机不需要任何特定于每个应用的特殊预先设置或配置—所有这些特定的依赖项和要求都包含在 Docker 映像中，并给出类似“但它在我的机器上工作了！”过去的遗迹。
*   **安全性**:关于容器的安全性有很多争论，但在我看来，如果实现正确，容器实际上比非容器的替代方法提供了更大的安全性。主要原因是容器很好地表达了安全上下文——在容器级别应用安全控件通常代表了这些控件的正确上下文级别。这些安全控制很多都是“默认”提供的——例如，名称空间本质上是一种安全机制，因为它们提供了隔离。一个更显而易见的例子是，它们可以在每个容器的基础上应用 SELinux 或 AppArmor 配置文件，使得根据每个容器的特定安全需求定义不同的配置文件变得非常容易。
*   **自动化**:组织正在采用软件交付实践，例如连续交付，其中自动化是基本要求。Docker 原生支持自动化–在其核心，Dockerfile 是一种自动化规范，允许 Docker 客户端自动构建您的容器，而 Docker Compose 等其他 Docker 工具允许您表达连接的多容器环境，您可以在几秒钟内自动创建和拆除这些环境。
# Docker 架构
正如本书前言中所讨论的，我假设你至少对 Docker 有一个基本的工作知识。如果你是 Docker 的新手，那么我建议你通过阅读[https://docs.docker.com/engine/docker-overview/](https://docs.docker.com/engine/docker-overview/)的 Docker 概述，以及浏览[https://docs.docker.com/get-started/](https://docs.docker.com/get-started/)的 Docker 教程来补充本章的学习内容。
Docker 体系结构包括以下几个核心组件:
*   **Docker 引擎**:这为运行您的容器工作负载提供了几个服务器代码组件，包括一个用于与 Docker 客户端通信的 API 服务器，以及提供 Docker 核心运行时的 Docker 守护进程。守护程序负责容器和其他资源的整个生命周期，并且还附带内置的集群支持，允许您构建集群或集群的 Docker Engines。
*   **Docker 客户端**:这提供了一个用于构建 Docker 映像、运行 Docker 容器以及管理 Docker 卷和 Docker 网络等其他资源的客户端。Docker 客户端是您在使用 Docker 时将使用的主要工具，并与 Docker 引擎和 Docker 注册表组件交互。
*   **Docker 注册表**:负责为你的应用存储和分发 Docker 镜像。Docker 支持公共和私有注册中心，通过 Docker 注册中心打包和分发应用的能力是 Docker 成功的主要原因之一。在本书中，您将从 Docker Hub 下载第三方映像，并将自己的应用映像存储在名为**弹性容器注册中心** ( **ECR** )的私有 AWS 注册服务中。
*   **Docker Swarm**:Swarm 是 Docker 引擎的集合，它们形成了一个自我管理和自我修复的集群，允许您横向扩展容器工作负载，并在 Docker 引擎出现故障时提供弹性。Docker Swarm 集群包括许多构成集群控制平面的主节点，以及许多实际运行容器工作负载的工作节点。
当您使用前面的组件时，您将与 Docker 体系结构中的许多不同类型的对象进行交互:
*   **Images** :一个映像是使用 Dockerfile 构建的，Dockerfile 中包含了许多关于如何为容器构建运行时环境的说明。执行这些构建指令中的每一个的结果被存储为一组层，并作为可下载和可安装的映像分发，并且 Docker Engine 读取每一层中的指令，以基于给定的映像为所有容器构建运行时环境。
*   **容器**:容器是 Docker 映像的运行时表现。在幕后，一个容器由一组 Linux 命名空间、控制组和存储组成，它们共同创建了一个独立的运行时环境，您可以在其中运行给定的应用进程。
*   **卷**:默认情况下，容器的底层存储机制基于联合文件系统，这允许从 Docker 映像中的各个层构建虚拟文件系统。这种方法非常有效，因为您可以共享层，并从这些共享层构建多个容器，但是这确实会影响性能，并且不支持持久性。Docker 卷提供了对专用可插拔存储介质的访问，您的容器可以将其用于 IO 密集型应用和持久化数据。
*   **网络**:默认情况下，Docker 容器各自在自己的网络命名空间中运行，这提供了容器之间的隔离。但是，它们仍然必须提供与其他容器和外部世界的网络连接。Docker 支持各种支持容器间连接的网络插件，甚至可以扩展到 Docker Swarm 集群。
*   **服务**:服务提供了一种抽象，允许您通过旋转服务的多个容器或副本来扩展应用，这些容器或副本可以在 Docker Swarm 集群中的多个 Docker 引擎之间进行负载平衡。
# 在 AWS 中运行 Docker
除了 Docker 之外，我们在本书中瞄准的另一个主要技术平台是 AWS。
AWS 是世界领先的公共云提供商，因此提供了多种方式来运行您的 Docker 应用:
*   **弹性容器服务(ECS)**:2014 年，AWS 推出了 ECS，这是第一个支持 Docker 的专用公有云产品。ECS 提供了一种混合的托管服务，其中 ECS 负责编排和部署您的容器应用(如容器管理平台的控制平面)，而您负责提供您的容器将实际运行的 Docker Engines(称为 ECS 容器实例)。ECS 是免费使用的(您只需为运行您的容器的 ECS 容器实例付费)，并且消除了管理容器编排和确保您的应用始终正常运行的许多复杂性。但是，这确实需要您管理运行 ECS 容器实例的 EC2 基础架构。ECS 被认为是亚马逊的旗舰 Docker 服务，因此将是我们在本书中重点介绍的主要服务。
*   **Fargate** : Fargate 于 2017 年末推出，提供了一个完全托管的容器平台，可以同时为您管理 ECS 控制平面和 ECS 容器实例。使用 Fargate，您的容器应用被部署到共享的 ECS 容器实例基础架构上，而您不知道 AWS 管理哪个基础架构，这使您可以专注于构建、测试和部署您的容器应用，而不必担心任何底层基础架构。Fargate 是一个相当新的服务，在撰写本书时，它的区域可用性有限，并且有一些限制，这意味着它不适合所有用例。我们将在第 14 章*中介绍法盖特服务和 ECS 服务发现。*
*   **Elastic Kubernetes 服务(EKS)** : EKS 于 2018 年 6 月上线，支持流行的开源 Kubernetes 容器管理平台。EKS 与 ECS 的相似之处在于，它是一种混合托管服务，其中亚马逊提供完全托管的 Kubernetes 主节点(Kubernetes 控制平面)，您以 EC2 自动缩放组的形式提供 Kubernetes 工作节点，运行您的容器工作负载。与 ECS 不同，EKS 不是免费的，在撰写本书时，每小时的成本为 0.20 美元，外加与您的工作节点相关的任何 EC2 基础架构成本。鉴于 Kubernetes 作为云/基础设施不可知的容器管理平台的日益流行，以及它的开源社区，EKS 肯定会变得非常受欢迎，我们将在[第 17 章](17.html)、*弹性 Kubernetes 服务*中介绍 Kubernetes 和 EKS。
*   **Elastic Beanstalk(EBS)**:Elastic Beanstalk 是 AWS 提供的一个流行的平台即服务(PaaS)产品，它提供了一个完整且完全托管的环境，目标是不同类型的流行编程语言和应用框架，如 Java、Python、Ruby 和 Node.js. Elastic Beanstalk 还支持 Docker 应用，允许您支持以自己选择的编程语言编写的各种应用。您将在第 15 章*弹性 Beanstalk*中学习如何部署多容器 Docker 应用。
*   **AWS 中的 Docker Swarm**:Docker Swarm 是 Docker 内置的原生容器管理和集群平台，利用原生 Docker 和 Docker Compose 工具链来管理和部署您的容器应用。在撰写本书时，AWS 没有为 Docker Swarm 提供托管产品，但是 Docker 提供了一个 cloud information 模板(cloud information 是一个免费的基础架构，作为 AWS 提供的代码自动化和管理服务)，允许您在 AWS 中快速部署 Docker Swarm 集群，该集群与本机 AWS 产品集成，包括弹性负载平衡(ELB)和弹性块存储(EBS)服务。我们将在“T2”一章中介绍所有这些以及更多内容。
*   **CodeBuild** : AWS CodeBuild 是一个完全托管的构建服务，它通过提供一个基于容器的构建代理来支持连续交付用例，您可以使用该代理来测试、构建和部署您的应用，而不必管理任何传统上与连续交付系统相关的基础架构。CodeBuild 使用 Docker 作为其容器平台，按需旋转构建代理，您将在*连续交付 ECS 应用*一章中与其他连续交付工具(如 CodePipeline)一起被介绍给 CodeBuild。
*   **批处理** : AWS 批处理提供了基于 ECS 的全托管服务，允许您运行基于容器的批处理工作负载，而无需担心管理或维护任何支持基础架构。我们不会在本书中介绍 AWS 批处理，但是您可以在[https://aws.amazon.com/batch/](https://aws.amazon.com/batch/)了解更多关于这项服务的信息。
在 AWS 上运行 Docker 应用有如此多的选项，因此能够根据组织的需求或特定用例选择正确的解决方案非常重要。
如果您是一个中小型组织，希望通过 AWS 上的 Docker 快速启动并运行，并且不想管理任何支持基础架构，那么 Fargate 或 Elastic Beanstalk 是您可能更喜欢的选项。Fargate 支持与关键 AWS 服务的本机集成，并且是一个构造块组件，它不决定您如何构建、部署或操作应用。在撰写本书时，Fargate 并非在所有地区都可用，与其他解决方案相比成本相对较高，并且存在一些限制，例如无法支持持久存储。弹性 Beanstalk 为管理您的 Docker 应用提供了全面的端到端解决方案，提供了各种开箱即用的集成，并包括管理应用整个生命周期的操作工具。Elastic Beanstalk 确实要求您购买一个非常固执己见的框架和方法来构建、部署和运行您的应用，并且很难定制来满足您的需求。
如果您是一个较大的组织，对安全性和法规遵从性有特定的要求，或者只是希望对运行容器工作负载的基础架构有更大的灵活性和控制力，那么您应该考虑 ECS、EKS 和 Docker Swarm。ECS 是 AWS 首选的原生旗舰容器管理平台，因此拥有庞大的客户群，多年来一直在大规模运行容器。正如您将在本书中了解到的，ECS 与 CloudFormation 集成在一起，它允许您使用“基础架构即代码”方法定义所有集群、应用服务和容器定义，该方法可以与其他 AWS 资源相结合，使您能够通过单击按钮来部署完整、复杂的环境。也就是说，ECS 的主要批评是，它是 AWS 特有的专有解决方案，这意味着您不能在其他云环境中使用它，也不能在自己的基础架构上运行它。越来越多的大型组织正在寻求基础架构和云不可知的云管理平台，如果这些是您的目标，这是您应该考虑 EKS 或多克思群的地方。Kubernetes 已经席卷了容器编排领域，现在是最大和最受欢迎的开源项目之一。AWS 现在以 EKS 的形式提供托管的 Kubernetes 服务，这使得在 AWS 中启动和运行 Kubernetes 变得非常容易，并利用与云信息、弹性负载平衡(ELB)和弹性块存储(EBS)服务的核心集成。Docker Swarm 是 Kubernetes 的竞争对手，尽管它似乎已经输给了 Kubernetes，但它确实具有与 Docker 集成的本机开箱即用功能的优势，使用熟悉的 Docker 工具非常容易启动和运行。Docker 目前确实发布了云信息模板，并支持与 AWS 服务的关键集成，这使得在 AWS 中启动和运行非常容易。然而，考虑到 Docker Inc .是一家商业实体，并且 Kubernetes 日益增长的受欢迎程度和主导地位可能会迫使 Docker Inc .在未来只专注于其付费 Docker 企业版和其他商业产品，因此人们对这种解决方案的寿命表示担忧。
正如您所看到的，在选择适合您的解决方案时，有许多考虑因素，这本书的伟大之处在于，您将学习如何使用这些方法中的每一种来在 AWS 中部署和运行您的 Docker 应用。无论您认为哪种解决方案现在听起来更适合您，我都鼓励您通读并完成本书的所有章节，因为您将从一种特定解决方案中学到的许多内容都可以应用于其他解决方案，并且您将能够更好地根据您期望的结果定制和构建全面的容器管理解决方案。
# 设置本地 Docker 环境
随着介绍的结束，是时候开始设置一个本地 Docker 环境了，您将使用该环境来测试、构建和部署本书中使用的示例应用的 Docker 映像。目前，我们将重点关注 Docker 的启动和运行，但是请注意，稍后我们还将使用您的本地环境与本书中讨论的各种容器管理平台进行交互，并使用 AWS 控制台、AWS 命令行界面和 AWS CloudFormation 服务来管理您的所有 AWS 资源。
尽管这本书的标题是《亚马逊网络服务上的 Docker》，但需要注意的是，Docker 容器有两种风格:
*   Linux 容器
*   Windows 容器
这本书专门关注 Linux 容器，它被设计为在安装了 Docker Engine 的基于 Linux 的内核上运行。当您想要使用本地环境在本地构建、测试和运行 Linux 容器时，这意味着您必须能够访问本地基于 Linux 的 Docker Engine。如果你在一个基于 Linux 的系统上运行，比如 Ubuntu，你可以在你的操作系统中安装一个 Docker Engine。但是，如果您使用的是 Windows 或 macOS，则需要设置运行 Docker Engine 的本地虚拟机，并为您的操作系统安装 Docker 客户端。
幸运的是，Docker 有很好的打包和工具，可以使这个过程在 Windows 和 macOS 环境下变得非常简单，我们现在将讨论如何为 macOS、Windows 10 和 Linux 设置一个本地 Docker 环境，以及将在本书中使用的其他工具，如 Docker Compose 和 GNU Make。对于 Windows 10 环境，我还将介绍如何设置 Windows 10 Linux 子系统来与您的本地 Docker 安装进行交互，这将为您提供一个环境，您可以在其中运行本书中使用的其他基于 Linux 的工具。
在我们继续之前，还需要注意的是，从许可的角度来看，Docker 目前有两个不同的版本，您可以在[https://docs.docker.com/install/overview/](https://docs.docker.com/install/overview/)了解更多信息:
*   社区版
*   企业版
我们将专门与免费社区版合作，其中包括核心的 Docker 引擎。Docker CE 适用于我们将在本书中介绍的所有技术和服务，包括弹性容器服务(ECS)、Fargate、Docker Swarm、Elastic Kubernetes 服务(EKS)和 Elastic Beanstalk。
除了 Docker，我们还需要一些其他工具来帮助自动化一些构建、测试和部署任务，我们将在本书中执行这些任务:
*   **Docker Compose** :这允许您在本地和 Docker Swarm 集群上协调和运行多容器环境
*   **Git** :这是从 GitHub 分叉和克隆示例应用以及为您将在本书中创建的各种应用和环境创建您自己的 Git 存储库所必需的
*   **GNU Make 3.82 或更高版本**:这提供了任务自动化，允许你运行简单的命令(例如，`make test`)来执行给定的任务
*   **jq** :解析 JSON 的命令行工具
*   **curl** :命令行 HTTP 客户端
*   **树**:命令行客户端，用于在 shell 中显示文件夹结构
*   **Python 解释器**:这是 Docker Compose 和我们将在后面章节安装的 AWS 命令行界面(CLI)工具所必需的
*   **pip** :一个 Python 包管理器，用于安装诸如 AWS CLI 之类的 Python 应用
Some of the tools used in this book are representative only, meaning that you can replace them with alternatives if you desire.  For example, you could replace GNU Make with another tool to provide task automation.
另一个你需要的重要工具是一个像样的文本编辑器——Visual Studio Code([https://code.visualstudio.com/](https://code.visualstudio.com/))和 supreme Text([https://www.sublimetext.com/](https://www.sublimetext.com/))是很好的选择，在 Windows、macOS 和 Linux 上都有。
现在，让我们讨论如何为以下操作系统安装和配置您的本地 Docker 环境:
*   苹果电脑
*   Windows 10
*   Linux 操作系统
# 设置 macOS 环境
如果你正在运行 macOS，让 Docker 启动并运行的最快方法是为 Mac 安装 Docker，你可以在[https://docs.docker.com/docker-for-mac/install/](https://docs.docker.com/docker-for-mac/install/)阅读更多相关内容，并从[https://store . Docker . com/editions/community/Docker-ce-desktop-Mac](https://store.docker.com/editions/community/docker-ce-desktop-mac)下载。在引擎盖下，Docker for Mac 利用了本机 macOS 虚拟机管理程序框架，创建了一个 Linux 虚拟机来运行 Docker Engine，并在您的本地 macOS 环境中安装了 Docker 客户端。
您首先需要创建一个免费的 Docker Hub 帐户才能继续，完成注册并登录后，单击**获取 Docker** 按钮下载最新版本的 Docker:
![](img/50c69c6a-219f-4dc3-9f46-ae375eeb4e3a.png)
Downloading Docker for Mac
下载完成后，打开下载文件，将 Docker 图标拖到“应用”文件夹，然后运行 Docker:
![](img/edbdc313-3f39-4b8a-891f-6e0cabdc3429.png)
Installing Docker
继续执行 Docker 安装向导，完成后，您应该会在 macOS 工具栏上看到 Docker 图标:
![](img/3dcb6fe2-630f-41c2-8632-1ab3a3fa1d73.png)
Docker icon on macOS toolbar
如果点击此图标并选择**首选项**，将显示一个 Docker 首选项对话框，允许您配置各种 Docker 设置。您可能希望立即更改的一个设置是分配给 Docker Engine 的内存，在我的示例中，我已经从默认值 2 GB 增加到 8 GB:
![](img/9f33d629-86b3-4a08-a522-f9956e15e959.png)
Increasing memory