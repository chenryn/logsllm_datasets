# 执行结果如下    if的判断结果为True    x的值大于10      程序执行结束在上面这段代码当中，我们实现了判断变量 x 是否大于 10的功能。在书写分支结构时，要注意书写格式问题，分支结构的书写格式比顺序结构要复杂，例如：1.       if 判断的书写格式，冒号标志着 if    判断的结束。        2.       if 下方有缩进的代码，是在 True    的条件下才能运行的。在演示代码中，缩进代码由 2    行组成，其实，它也可以由很多行代码组成，多行代码的形式被称作代码块。代码块一直到缩进再次改变的时候，True    条件下的代码才结束。        需要你注意的是，在整个程序当中，缩进方式必须一致，要么使用Tab、要么使用 4 个空格进行缩进。Python对于缩进和复合语句结尾的冒号要求非常严格，如果弄错了就会报错。而且，缩进不同会大大影响一个程序的运行结果。例如上面的代码中"print(\"程序执行结束\")"如果有缩进，你就看不到"程序执行结束"这行执行结果了。循环结构在程序运行逻辑中，另一个重要的结构叫做循环结构。**循环结构是可以多次执行同一段代码的语句结构**。在 Python 当中有两种循环语句，分别是 while 语句和 for语句。 while 语句在循环开始前先对条件语句进行判断。如果条件语句的结果为True，则循环一次再次进行判断。如果条件允许的结果为False，则循环结束。这里所指的条件语句和 if语句当中的条件是一样的。下面的例子是我使用 while 语句实现的从 1\~10的累加。     start = 1    total = 10    sum = 0    while start   > 如果你不懂任何计算机语言，我建议从 Python> 入门。它设计整洁，文档良好，对初学者很友好。> > >Python 用法简单，但是对于初学者，尤其是没有 Python基础的话，那该怎么来学这门课呢？其实这也是我在设计这门课时重点考虑的一个问题。所以**不用担心，我为你准备好了 0基础的学习路径**。**第一，导读是整个课程的基石**。导读部分我会为你讲解 Python最基础且最重要的五大语法部分，让你对 Python有一个初步的了解，能够看懂基本的 Python 代码。这也是你入门 Python学习的第一步。同时，导读在整个课程中会起到一个引领的作用。其中的语法知识我会在之后的课程中讲解，所以在学习时如果有不懂的话，仍然可以回过头来看导读部分。**第二，一定要动手来操作**，毕竟看一遍我的操作，跟你自己操作是不一样的。**第三，如果你有时间的话，我还建议你去抄写每一段代码**。要知道，看一遍课程和把看的东西写出来的感觉是完全不一样的。这个建议我在之前的《零基础学Python》这门课中也提过，很多用户反映学习效果确实不错，提升速度很快。问题都是在不断学习中解决掉的，所以最后我也建议你遇到问题不怕畏惧，跟着课程来慢慢学习就行了。其次， **Python的扩展库很丰富，可以满足非常多的复杂场景的需求，能够替代非常多的手工操作**。这也是 Python相对于其他编程语言的一大优势。目前，Python的扩展库已经覆盖了文件、声音、视频、数据科学、深度学习等众多行业。通过这些扩展库，我们可以用Python 连接Excel、Word、邮件等常用办公组件，轻松应对各类工作场景，不用自己手动写很多功能代码了。而连接方法也很简单，以操作Word文档为例，你只要掌握下面这行代码就可以了：    import  docx通过这样一行简单的代码，你的 Python 就能支持 Word中的文字、字体、段落、样式、表格等各种功能进行读写操作了，当然了，为了实现你的各种定制需求，还需要继续编写代码（这里的优点是直接支持，其他语言是要先像是操作压缩文件一样，对docx 格式解压缩，再对 xml文件进行处理，非常复杂）。最后， **Python还有一个你无法抗拒的优点，那就是它的跨平台性**。也许有一天，你用的电脑的操作系统，从 macOS 变成了 Windows，或者从Windows 变成了 macOS，那也完全不用担心。Python的跨平台特性，可以帮你做到不用修改任何一行代码，就可以让已经写好的程序直接在新的平台上运行。总结来说，Python的简洁、扩展库丰富和跨平台特性这三点，就保证了你可以轻松学会这门课，用Python去实现办公自动化，提升自己的工作效率。说了这么多，哪些工作可以用 Python实现自动化，而我又会怎么给你讲这门课呢？这门课是怎么设计的？在开头的时候我也说了，要用计算机的思维去解决办公自动化工具和技巧的问题，所以我就把常见的30个机械、重复的工作场景，按照任务类型划分成了输入、运算、控制、存储和输出这5 个模块。 **"输入"模块：解决不同文件类型的批量合并和拆分问题**这类任务往往包含了格式相似的大量文件，比如 Word、Excel、Txt文件，我会带着你用 Python去进行批量合并和拆分。**"运算"模块：扩展常用的统计、搜索和排序功能**很多软件自带的统计、搜索和排序功能，都很好用，但不支持在多个文件或者跨类型文件中使用。所以，在这个模块我们要学习的就是，怎么通过Python进行扩展，让这些好用、常用的功能，可以支持多个文件或不同类型的文件。**"控制"模块：通过插件的方式增强办公软件以及周边软件、硬件的交互能力**办公软件的核心功能，通常是支持文字和表格等内容的相关操作，对控制外部设备相对较薄弱。例如，Word本身是不支持批量打印 Word文件的，但批量打印又是一个常见的需求。这个需求，就可以通过脚本化来实现，达到打印自动化的目的。**"存储"模块：和文件相关的很多常用操作部分**在工作中，我们经常会面对这么几种需求：需要对大量文件进行重命名；需要通过网络批量下载视频和图片；需要在海量文件中快速找到自己想要的文件；等等。这些需求最大的问题，就是我们需要手工重复操作，或者自带工具不好用。那么利用Python和文件、网络功能相结合，就完全可以实现目录下的批量改名、文件的批量下载，免去了手工重复操作的问题。对于系统自带的文件查找工具来说，速度慢而且不够简洁，那我们可以使用Python根据自己定义的目录搜索，加快搜索文件的效率。**"输出"模块：智能化输出自己的工作成果**在这一部分，我要教你更直观和更智能地输出自己的工作成果。比如说你交付给同事的数据，可以通过Python一键转为图形，也可以根据你的需要将图形采用图片或网页的形式展示给你的同事，提高工作汇报的效率，更直观地展示自己的工作成果。![](Images/2c4d5e2b468e15fbd70ecc73dab017bc.png)savepage-src="https://static001.geekbang.org/resource/image/1f/16/1f9317004dcda3c0f18ec4595833d016.png"}在讲解这 5 个模块、30个常见的办公场景的效率提升方法时，我还会带你剖析它们背后的原理，和你展示我分解任务、解决问题的思路。因为提升办公效率的方法和技巧真的是非常非常多，但如果我们没能把这些方法和技巧做系统的梳理，那它们就是孤立的存在，知道得再多，也没办法根据自己的工作场景灵活运用。如果到这里，你还是担心自己不会 Python就学不会这门课、就没办法提升自己工作效率的话，我还可以再给你吃一颗定心丸，这也是我额外送你的一份礼物：**在每节课的最后，我都会给你交付一个可运行的小程序**。**你只需要调整保存路径和几个简单的参数，就可以在自己的电脑上运行，就可以去应对你实际工作中相似场景的重复工作，提升自己的办公效率。**所以， **不但能用Python 让你的工作效率翻无数倍，还可以收获编程思维、解决问题的思路，以及30 个小程序。**最后，我们来一起立个 Flag 吧：通过三个月的学习，让自己成为 10x职场人！也欢迎你邀请你的小伙伴们一起来学习，共同成长！
# 01 \| 拆分与合并：如何快速地批量处理内容相似的Excel？你好，我是尹会生。今天是咱们的第一节课，我先带你学习下，如何用 Python操作 Excel。Excel是我们在工作中用到的最频繁的软件之一，它有着强大的计算能力和便捷的图表功能。如果我们要在同一个Excel文件中进行操作，手工进行也很方便，但问题是，如果我们需要同时操作多个Excel文件，就是一件非常耗时的事情了。在工作场景中，需要同时操作多个 Excel 的情况主要有 2种：批量合并和批量拆分。我来带你看 2个场景。 1.  批量合并。假设你需要对某些工作内容进行问卷调查，这时你用 Excel    做了调查问卷模版。我想你会这样做：先把 Excel    通过工作群分发给所有员工，再把群里收集到的反馈附件汇总成一个文件。        2.  批量拆分。假设你是公司的财务人员，你需要使用 Excel    对员工工资进行核算，之后再打印出来。但是公司要求员工薪水保密，所以每个员工的工资需要拆分成一个独立的文件，最后还需要打印出来。        无论是合并，还是拆分，我们都面临着一个困境：没有现成的软件可以实现多个Excel 文件的合并和拆分操作，所以你只好对每一个 Excel 文件都进行"打开 -复制粘贴 - 保存"的工作。很多人在面对这样的工作需求时，都**忍不住立马去做，却很少停下来分析问题**。其实，这三步是很简单的工作，不过也是无意义的重复工作，既浪费了时间，又没有真正产生价值。幸运的是，这些工作都可以通过 Python 来解决。今天，我就给你介绍一下用Python 实现重复工作自动化，快速实现 Excel的合并和拆分的方法。如何用 Python 手工操作一个 Excel 文件？刚刚我们说到批量处理，其实也就是逐一处理多个文件。如果我们想要提升这类工作的效率，就可以先借助Python把每一次处理都自动化。所以，在讲具体的合并和拆分方法前，我们要解决的第一个问题，就是用Python 代替你的双手来操作一个 Excel文件。 如果要用 Python 操作 Excel 文件，首先就要支持读写 Excel的功能。 **在 Python中，要想实现对某一个功能的支持，就需要安装扩展库。**支持 Excel 读取的扩展库叫做 xlrd 库，支持 Excel 写入的扩展库叫做 xlwt库。我们可以使用下面的命令行进行安装：    pip3 install xlrd     pip3 install xlwt 那么，如何使用 Python 读取 Excel文件的内容呢？你可以使用这样的代码实现：    import xlrd    file = '/Users/user1/Desktop/a.xlsx'    data = xlrd.open_workbook(file)    table = data.sheets()[0    value = table.cell_value(rowx=4, colx=4)虽然代码很简单，但是它对自动化操作 Excel的意义非常大。试想一下，如果能够使用 Python替代全部的手工操作，大批量的文件就可以使用 Python的循环功能自动化完成对每一个文件的自动处理工作了。对于编程语言来说，文件合并的步骤可以分解为读取第一个文件，读取第二个文件，将第一个文件的内容追加到第二个文件下方。所以在我们学会使用 Python 读取 Excel文件之后，我们还需要掌握如何将读取的内容写入到 Excel文件。写入文件的代码如下：    import xlwt    dst_file = '/Users/edz/Desktop/文章1/result/结果.xlsx'    workbook = xlwt.Workbook(encoding='utf-8')    xlsheet = workbook.add_sheet("统计结果")    
# 写入内容,假设取出的内容是value    xlsheet.write(0, 0, value)    