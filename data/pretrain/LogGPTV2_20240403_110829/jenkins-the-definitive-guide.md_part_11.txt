### Configuring the Java Installation Directory in Jenkins

To configure the Java installation directory (the same path used for the `JAVA_HOME` variable), follow the steps illustrated in **Figure 4.5, "JDK Configuration in Jenkins"**. Although you need to manually enter the path, Jenkins will verify in real time that the directory exists and is a valid JDK directory.

**Figure 4.5. JDK Configuration in Jenkins**

Alternatively, Jenkins can automatically install Java for you. In this case, Jenkins will download and install the JDK on your machine (see **Figure 4.6, "Automatically Installing a JDK"**). The first time a build requires this JDK, Jenkins will download and install the specified version into the tools directory within the Jenkins home directory. If the build runs on a new build agent without this JDK, Jenkins will also download and install it on the build agent.

This method is also effective for configuring build agents. As we will discuss later in the book, Jenkins can delegate build jobs to other machines, or build agents. A build agent (or "slave") is another computer that Jenkins can use to run builds. By using Jenkins's "Install Automatically" option, you don't need to manually install all required JDK versions on the build agent machines—Jenkins will handle it the first time it is needed.

**Figure 4.6. Automatically Installing a JDK**

By default, Jenkins suggests downloading the JDK from the Oracle website. If your Jenkins installation is behind a proxy server, you may need to configure proxy settings to ensure Jenkins can access external download sites (see Section 4.9, "Configuring a Proxy"). Another option is to provide a URL pointing to an internal copy of the JDK binaries (in ZIP or GZip-compressed TAR format) stored on a local server. This allows for faster and standardized installations. When using this option, Jenkins lets you specify a label, which restricts the use of this installation to build nodes with the specified label. This technique is useful for installing specific tool versions on certain build machines and can be applied to other build tools like Maven and Ant.

### Configuring Build Tools in Jenkins

Build tools are essential for any build server, and Jenkins supports several out of the box: Ant, Maven, and basic shell scripts (or Batch scripts in Windows). Using Jenkins plugins, you can add support for other build tools and languages such as Gant, Grails, MSBuild, and more.

#### 4.6.1. Maven

Maven is a high-level build scripting framework for Java that simplifies low-level scripting by using standard directory structures, lifecycle phases, and declarative dependency management. In Maven, your project follows a well-defined build lifecycle—compile, test, package, deploy, etc. Each lifecycle phase is associated with a Maven plugin, and these plugins use the standard directory structure to perform tasks with minimal intervention. You can extend Maven by overriding default plugin configurations or invoking additional plugins.

Jenkins provides excellent support for Maven and understands Maven project structures and dependencies. You can either have Jenkins install a specific version of Maven automatically (as shown in the example with Maven 3) or provide a path to a local Maven installation (see **Figure 4.7, "Configuring Maven in Jenkins"**). You can configure multiple Maven versions for different projects.

**Figure 4.7. Configuring Maven in Jenkins**

If you select the "Install Automatically" checkbox, Jenkins will download and install the requested Maven version. You can choose to download Maven directly from the Apache site or from a local URL. This is particularly useful for distributed builds, as Maven is cross-platform and will work on any machine. The first time a build machine needs Maven, it will download and install it in the tools directory within the Jenkins home directory.

You can pass Java system options to your Maven build process, such as extra memory for tasks like code coverage or site generation, by setting the `MAVEN_OPTS` variable. In Jenkins, you can set a system-wide default value for `MAVEN_OPTS` to be used across all projects (see **Figure 4.8, "Configuring System-Wide MVN_OPTS"**).

**Figure 4.8. Configuring System-Wide MVN_OPTS**

#### 4.6.2. Ant

Ant is a widely-used and flexible build scripting language for Java. An Ant build script (typically `build.xml`) consists of targets, each performing a specific job in the build process, such as compiling code or running unit tests. Targets execute tasks, which carry out specific parts of the build, and have dependencies indicating the order of execution.

Jenkins provides built-in support for Ant, allowing you to invoke Ant targets from your build job and customize the process with properties. If Ant is available on the system path, Jenkins will find it. However, if you need to use specific Ant versions for different build jobs, you can configure multiple Ant installations (see **Figure 4.9, "Configuring Ant in Jenkins"**). Provide a name and installation directory for each Ant version in the Ant section of the Configure System screen.

**Figure 4.9. Configuring Ant in Jenkins**

If you select the "Install Automatically" checkbox, Jenkins will download and install Ant into the tools directory of your Jenkins home directory, similar to Maven. It will download an Ant installation the first time a build job needs it, either from the Apache website or from a local URL. This is a great way to standardize build servers and simplify the addition of new distributed build servers to an existing infrastructure.

#### 4.6.3. Shell-Scripting Language

For Unix or Linux build servers, Jenkins allows you to insert shell scripts into your build jobs. This is useful for low-level, OS-related tasks. In the Shell section, you define the default shell for executing these scripts, typically `/bin/sh`, but you can change it to another command interpreter like `bash` or `Perl`.

On Windows, the Shell section does not apply; instead, you use Windows batch scripting. Leave this field blank on a Windows build server.

### Configuring Version Control Tools in Jenkins

Jenkins comes preinstalled with plugins for CVS and Subversion. Other version control systems are supported via downloadable plugins from the Manage Plugins screen.

#### 4.7.1. Configuring Subversion

Subversion requires no special configuration, as Jenkins uses native Java libraries to interact with Subversion repositories. If authentication is needed, Jenkins will prompt you when you enter the Subversion URL in the build job configuration.

#### 4.7.2. Configuring CVS

CVS requires little or no configuration. By default, Jenkins looks for CVS on the system path, but you can provide the path explicitly if it isn’t on the system path. CVS stores login and password details in a `.cvspass` file, usually in your home directory. If this file is elsewhere, provide the path where Jenkins can find it.

### Configuring the Mail Server in Jenkins

Email is Jenkins’s primary notification method. When a build fails, Jenkins sends an email to the developer who committed the changes and optionally to other team members. Therefore, you need to configure your email server (see **Figure 4.10, "Configuring an Email Server in Jenkins"**).

**Figure 4.10. Configuring an Email Server in Jenkins**

The "System Admin email address" is the address from which notifications are sent. You can also use this field to test the email setup by clicking the "Test configuration" button, which sends a test email to the provided address.

In many organizations, you can derive a user’s email address from their login by adding the organization domain name. For example, at ACME, user John Smith might have a login of "jsmith" and an email address of "jsmith@acme.com". If this applies to your version control system, Jenkins can save you a lot of configuration effort. You can specify the default user email suffix, and Jenkins will figure out the rest.

You also need to provide a proper base URL for your Jenkins server (one that does not use `localhost`). Jenkins uses this URL in email notifications so that users can go directly from the email to the build failure screen on Jenkins.

Jenkins also supports advanced email configuration, including SMTP authentication and SSL. If you use Google Apps for your email services, you can configure Jenkins to work with the Gmail service (see **Figure 4.11, "Configuring an Email Server in Jenkins to Use a Google Apps Domain"**). Use the Gmail SMTP server and provide your Gmail username and password, along with SSL and the non-standard port of 465.

**Figure 4.11. Configuring an Email Server in Jenkins to Use a Google Apps Domain**

### Configuring a Proxy in Jenkins

In most enterprise environments, your Jenkins server will be behind a firewall and will need to go through an HTTP proxy server to access the Internet. Jenkins needs Internet access to download plugins, updates, and tools like the JDK, Ant, and Maven from remote sites. You can configure the proxy connection details (server, port, and, if required, username and password) in the Advanced tab on the Plugin Manager screen (see **Figure 4.12, "Configuring Jenkins to Use a Proxy"**).

**Figure 4.12. Configuring Jenkins to Use a Proxy**

If your proxy uses Microsoft’s NTLM authentication scheme, provide the domain name and username in the "User name" field, e.g., "MyDomain\Joe Bloggs".

Remember that all tools running on your Jenkins build server, such as Subversion (if accessing an external repository) and Maven (if not using an Enterprise Repository Manager), will also need to know about the proxy.

### Conclusion

Getting started with Jenkins requires minimal configuration, and the necessary steps are straightforward and centralized in the Configure System screen. Once this is done, you are ready to create your first Jenkins build job!

### Chapter 5. Setting Up Your Build Jobs

#### 5.1. Introduction

Build jobs are the fundamental units of a Continuous Integration server. A build job compiles, tests, packages, deploys, or performs other tasks with your project. Build jobs can vary, from running unit tests to generating documentation, bundling applications, or deploying to production.

A software project often has several related build jobs. For example, you might start with a build job that runs all unit tests, followed by one that executes integration tests, runs code quality metrics, generates documentation, and finally deploys the application to a test server.

In Jenkins, creating build jobs is easy. In this chapter, we will cover the main types of build jobs and how to configure them. Later chapters will delve into organizing multiple build jobs, setting up build promotion pipelines, and automating the deployment process. Let’s start with the basics of setting up build jobs in Jenkins.

#### 5.2. Jenkins Build Jobs

Creating a new build job in Jenkins is simple: click on the "New Job" menu item on the Jenkins dashboard. Jenkins supports several types of build jobs, which are presented when you create a new job (see **Figure 5.1, "Jenkins Supports Four Main Types of Build Jobs"**).

- **Freestyle Software Project**: General-purpose build jobs offering maximum flexibility.
- **Maven Project**: Specially adapted for Maven projects, reducing setup work.
- **Monitor an External Job**: Keeps an eye on non-interactive processes like cron jobs.
- **Multiconfiguration Job**: Runs the same build job in multiple configurations, useful for testing in different environments.

**Figure 5.1. Jenkins Supports Four Main Types of Build Jobs**

You can also copy an existing job, which is useful for creating a new job similar to an existing one but with some configuration changes.

In this chapter, we will focus on the first two types of build jobs, which are the most commonly used. We will discuss the others later. Let’s start with the most flexible option: the freestyle build job.

#### 5.3. Creating a Freestyle Build Job

The freestyle build job is the most flexible and configurable option, suitable for any type of project. It is relatively easy to set up, and many of the options configured here also appear in other build jobs.

##### 5.3.1. General Options

When creating a new freestyle job, the first section contains general information about the project, such as a unique name and description, and other details about how and where the build job should be executed (see **Figure 5.2, "Creating a New Build Job"**).

**Figure 5.2. Creating a New Build Job**

The project name can be anything, but avoid spaces as it will be used for the project directory and build job URL. The project description will appear on the project home page and can include HTML tags.

Other options are more technical and will be covered in detail later in the book. One important consideration is how to handle build history. Build jobs can consume a lot of disk space, especially if you store build artifacts. You can limit the number of builds recorded in the build history using the "Discard Old Builds" option. You can either keep recent builds or a specified number of builds. If a build has sentimental value, you can tell Jenkins to keep it forever using the "Keep forever" button on the build details page (see **Figure 5.3, "Keeping a Build Job Forever"**).

**Figure 5.3. Keeping a Build Job Forever**

Jenkins will never delete the last stable and successful builds, regardless of age. For example, if you limit Jenkins to keep the last twenty builds, and the last successful build was thirty builds ago, Jenkins will still keep the successful build along with the last twenty failing builds.

You can also disable a build, preventing it from being executed until re-enabled. This is useful during maintenance or major refactoring when build failure notifications are not helpful.

##### 5.3.2. Advanced Project Options

Advanced Project options contain less frequently used configuration options. Click the "Advanced" button to display these options (see **Figure 5.4, "Displaying Advanced Options"**).

**Figure 5.4. Displaying Advanced Options**

- **Quiet Period**: Overrides the system-wide quiet period defined in the Jenkins System Configuration screen. This is mainly used for version control systems that don’t support atomic commits, such as CVS, or in teams where developers commit work in small increments.
- **Block Build When Upstream Project is Building**: Useful when several related projects must be built in a specific order after a single commit. If activated, Jenkins will wait for upstream build jobs to finish before starting this build.

For example, when releasing a new version of a multimodule Maven project, version number updates occur in many modules. Suppose you added a web application to the Game of Life project, setting it up as a separate Maven project. When releasing a new version, both the core and web application version numbers are updated (see **Figure 5.5, "Blocking Build When Upstream Project is Building"**). Before building the web application, a new version of the core module must be built. If you had separate freestyle build jobs for each module, they would start simultaneously, causing the web application build to fail if the core build hasn’t produced a new version. To avoid this, use the "Block Build When Upstream Project is Building" option, ensuring the web application build starts only after the core build completes successfully.

**Figure 5.5. Blocking Build When Upstream Project is Building**

By following these steps and considerations, you can effectively set up and manage your build jobs in Jenkins.