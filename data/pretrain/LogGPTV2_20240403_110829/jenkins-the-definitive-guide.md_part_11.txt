the Java installation directory (the same path you would use for the JAVA_HOME variable), as shown in
Figure 4.5, “JDK configuration in Jenkins”. Although you need to type the path manually, Jenkins will
check in real time both that the directory exists and that it looks like a valid JDK directory.
Figure 4.5. JDK configuration in Jenkins
You can also ask Jenkins to install Java for you. In this case, Jenkins will download the JDK installation
and install a copy on your machine (see Figure 4.6, “Installing a JDK automatically”). The first time
a build needs to use this JDK, Jenkins will download and install the specified version of Java into the
tools directory in the Jenkins home directory. If the build is running on a new build agent that doesn’t
have this JDK installed, it will download and install it onto the build agent machine as well.
This is also a great way to configure build agents. As we’ll see later on in the book, Jenkins can delegate
build jobs to other machines, or build agents. A build agent (or “slave”) is simply another computer that
Jenkins can use to run some of its builds. If you use Jenkins’s Install automatically option, you don’t
need to manually install all the JDK versions you need on the build agent machines—Jenkins will do
it for you the first time it needs to.
73
By default, Jenkins proposes to download the JDK from the Oracle website. If your Jenkins installation
is behind a proxy server, you may need to configure your proxy settings to ensure that Jenkins can access
the external download sites (see Section 4.9, “Configuring a Proxy”). Another option is to provide a
URL pointing to your own internal copy of the JDK binaries (either in the form of a ZIP or a GZip-
compressed TAR file), stored on a local server within your organization. This lets you provide standard
installations on a local server and makes for faster automatic installations. When you use this option,
Jenkins also lets you specify a label, which will restrict the use of this installation to the build notes with
this label. This is a useful technique if you need to install a specific version of a tool on certain build
machines. The same approach can also be used for other build tools (such as Maven and Ant).
Figure 4.6. Installing a JDK automatically
The automatic installer will not work in all environments (if it can’t find or identify your operating
system to its satisfaction, for example, the installation will fail), but it is nevertheless a useful and
convenient way to set up new build servers or distributed build agents in a consistent manner.
4.6. Configuring Your Build Tools
Build tools are the bread-and-butter of any build server, and Jenkins is no exception. Out of the box,
Jenkins supports three principal build tools: Ant, Maven, and the basic shell-script (or Batch script in
Windows). Using Jenkins plugins, you can also add support for other build tools and other languages,
such as Gant, Grails, MSBuild, and many more.
4.6.1. Maven
Maven is a high-level build scripting framework for Java that uses notions such as a standard directory
structure and standard life cycles, Convention over Configuration, and Declarative Dependency
Management to simplify a lot of the low-level scripting that you find in a typical Ant build script. In
Maven, your project uses a standard, well-defined build life cycle—compile, test, package, deploy, and
74
so forth. Each life cycle phase is associated with a Maven plugin. The various Maven plugins use the
standard directory structure to carry out these tasks with a minimum of intervention on your part. You
can also extend Maven by overriding the default plugin configurations or by invoking additional plugins.
Jenkins provides excellent support for Maven, and has a good understanding of Maven project structures
and dependencies. You can either get Jenkins to install a specific version of Maven automatically (as we
are doing with Maven 3 in the example), or provide a path to a local Maven installation (see Figure 4.7,
“Configuring Maven in Jenkins”). You can configure as many versions of Maven for your build projects
as you want, and use different versions of Maven for different projects.
Figure 4.7. Configuring Maven in Jenkins
If you tick the Install automatically checkbox, Jenkins will download and install the requested version
of Maven for you. You can either ask Jenkins to download Maven directly from the Apache site, or from
a (presumably local) URL of your choice. This is an excellent choice when you are using distributed
builds, and, since Maven is cross-platform, it will work on any machine. You don’t need to install Maven
explicitly on each build machine—the first time a build machine needs to use Maven, it will download
a copy and install it to the tools directory in the Jenkins home directory.
Sometimes you need to pass Java system options to your Maven build process. For instance it is
often useful to give Maven a bit of extra memory for heavyweight tasks such as code coverage or
site generation. Maven lets you do this by setting the MAVEN_OPTS variable. In Jenkins, you can set
a system-wide default value, to be used across all projects (see Figure 4.8, “Configuring system-wide
MVN_OPTS”). This comes in handy if you want to use certain standard memory options (for example)
across all projects, without having to set it up in each project by hand.
75
Figure 4.8. Configuring system-wide MVN_OPTS
4.6.2. Ant
Ant is a widely-used and very well-known build scripting language for Java. It is a flexible, extensible,
relatively low-level scripting language, used in a large number of open source projects. An Ant build
script (typically called build.xml) is made up of a number of targets. Each target performs a particular
job in the build process, such as compiling your code or running your unit tests. It does so by executing
tasks, which carry out a specific part of the build job, such as invoking javac to compile your code, or
creating a new directory. Targets also have dependencies, indicating the order in which your build tasks
need to be executed. For example, you need to compile your code before you can run your unit tests.
Jenkins provides excellent build-in support for Ant—you can invoke Ant targets from your build job,
providing properties to customize the process as required. We look at how to do this in detail later on
in this book.
If Ant is available on the system path, Jenkins will find it. However, if you want to know precisely what
version of Ant you are using, or if you need to be able to use several different versions of Ant on different
build jobs, you can configure as many installations of Ant as required (see Figure 4.9, “Configuring Ant
in Jenkins”). Just provide a name and installation directory for each version of Ant in the Ant section
of the Configure System screen. You will then be able to choose what version of Ant you want to use
for each project.
If you tick the Install automatically checkbox, Jenkins will download and install Ant into the tools
directory of your Jenkins home directory, just like it does for Maven. It will download an Ant installation
the first time a build job needs to use Ant, either from the Apache website or from a local URL. Again,
this is a great way to standardize build servers and make it easier to add new distributed build servers
to an existing infrastructure.
76
Figure 4.9. Configuring Ant in Jenkins
4.6.3. Shell-Scripting Language
If you are running your build server on Unix or Linux, Jenkins lets you insert shell scripts into your
build jobs. This is handy for performing low-level, OS-related tasks that you don’t want to do in Ant
or Maven. In the Shell section, you define the default shell that will be used when executing these
shell scripts. By default, this is /bin/sh, but there are times you may want to modify this to another
command interpreter such as bash or Perl.
In Windows, the Shell section does not apply—you use Windows batch scripting instead. So, on a
Windows build server, you should leave this field blank.
4.7. Configuring Your Version Control Tools
Jenkins comes preinstalled with plugins for CVS and Subversion. Other version control systems are
supported by plugins that you can download from the Manage Plugins screen.
4.7.1. Configuring Subversion
Subversion needs no special configuration, since Jenkins uses native Java libraries to interact with
Subversion repositories. If you need to authenticate to connect to a repository, Jenkins will prompt you
when you enter the Subversion URL in the build job configuration.
4.7.2. Configuring CVS
CVS needs little or no configuration. By default, Jenkins will look for tools like CVS on the system
path, though you can provide the path explicitly if it isn’t on the system path. CVS keeps login and
password details in a file called .cvspass, which is usually in your home directory. If this is not the
case, you can provide a path where Jenkins can find this file.
77
4.8. Configuring the Mail Server
The last of the basic configuration options you need to set up is the email server configuration. Email is
Jenkins’s more fundamental notification technique—when a build fails, it will send an email message
to the developer who committed the changes, and optionally to other team members as well. So Jenkins
needs to know about your email server (see Figure 4.10, “Configuring an email server in Jenkins”).
Figure 4.10. Configuring an email server in Jenkins
The System Admin email address is the address from which the notification messages are sent. You can
also use this field to check the email setup—if you click on the Test configuration button, Jenkins will
send a test email to this address.
In many organizations, you can derive a user’s email address from their login by adding the organization
domain name. For example, at ACME, user John Smith will have a login of “jsmith" and an email
address of “PI:EMAIL”. If this extends to your version control system, Jenkins can save you
a lot of configuration effort in this area. In the previous example, you could simply specify the default
user email suffix of acme.com and Jenkins will figure out the rest.
You also need to provide a proper base URL for your Jenkins server (one that does not use localhost).
Jenkins uses this URL in the email notifications so that users can go directly from the email to the build
failure screen on Jenkins.
Jenkins also provides for more sophisticated email configuration, using more advanced features such
as SMTP authentication and SSL. If this is your case, click on the Advanced button to configure these
options.
For example, many organizations use Google Apps for their email services. You can configure Jenkins
to work with the Gmail service as shown in Figure 4.11, “Configuring an email server in Jenkins to use
a Google Apps domain”. All you need to do in this case is to use the Gmail SMTP server, and provide
your Gmail username and password in the SMTP Authentication (you also need to use SSL and the
non-standard port of 465).
78
Figure 4.11. Configuring an email server in Jenkins to use a Google Apps domain
4.9. Configuring a Proxy
In most enterprise environments, your Jenkins server will be situated behind a firewall, and will not
have direct access to the Internet. Jenkins needs Internet access to download plugins and updates, and
also to install tools such as the JDK, Ant and Maven from remote sites. If you need to go through an
HTTP proxy server to get to the Internet, you can configure the connection details (the server and port,
and if required the username and password) in the Advanced tab on the Plugin Manager screen (see
Figure 4.12, “Configuring Jenkins to use a proxy”).
If your proxy is using Microsoft’s NTLM authentication scheme, then you will need to provide a domain
name as well as a username. You can place both in the User name field: just enter the domain name,
followed by a back-slash (\), followed by the username, such as “MyDomain\Joe Bloggs”.
79
Figure 4.12. Configuring Jenkins to use a proxy
Finally, if you are setting up Proxy access on your Jenkins build server, remember that all of the other
tools running on this server will need to know about the proxy as well. In particular, this may include
tools such as Subversion (if you are accessing an external repository) and Maven (if you are not using
an Enterprise Repository Manager).
4.10. Conclusion
You don’t need a great deal of configuration to get started with Jenkins. The configuration that is required
is fairly straightforward, and is centralised in the Configure System screen. Once this is done, you are
ready to create your first Jenkins build job!
80
Chapter 5. Setting Up Your Build Jobs
5.1. Introduction
Build jobs are the basic currency of a Continuous Integration server.
A build job is a particular way of compiling, testing, packaging, deploying or otherwise doing something
with your project. Build jobs come in a variety of forms; you may want to compile and unit test your
application, report on code quality metrics related to the source code, generate documentation, bundle
up an application for a release, deploy it to production, run an automated smoke test, or do any number
of other similar tasks.
A software project will usually have several related build jobs. For example, you might choose to start
off with a dedicated build job that runs all of your unit tests. If these pass, you might proceed to a
build job that executes longer-running integration tests, runs code quality metrics, or generates technical
documentation, before finally bundling up your web application and deploying it to a test server.
In Jenkins, build jobs are easy to set up. In this chapter, we will look at the main types of build jobs and
how to configure them. In later chapters, we will take things further, looking at how to organize multiple
build jobs, how to set up build promotion pipelines, and how to automate the deployment process. But,
for now, let’s start off with how to set up your basic build jobs in Jenkins.
5.2. Jenkins Build Jobs
Creating a new build job in Jenkins is simple: just click on the “New Job” menu item on the Jenkins
dashboard. Jenkins supports several different types of build jobs, which are presented to you when you
choose to create a new job (see Figure 5.1, “Jenkins supports four main types of build jobs”).
Freestyle software project
Freestyle build jobs are general-purpose build jobs, which provides a maximum of flexibility.
Maven project
The “maven2/3 project” is a build job specially adapted to Maven projects. Jenkins understands
Maven pom files and project structures, and can use the information gleaned from the pom file to
reduce the work you need to do to set up your project.
Monitor an external job
The “Monitor an external job” build job lets you keep an eye on non-interactive processes, such
as cron jobs.
Multiconfiguration job
The “multiconfiguration project” (also referred to as a “matrix project”) lets you run the same
build job in many different configurations. This powerful feature can be useful for testing an
application in many different environments, with different databases, or even on different build
machines. We will be looking at how to configure multiconfiguration build jobs later on in the
book.
Figure 5.1. Jenkins supports four main types of build jobs
You can also copy an existing job, which is a great way to create a new job that is very similar to an
existing build job, except for a few configuration details.
In this chapter, we will focus on the first two types of build jobs, which are the most commonly used.
We will discuss the others later on. Let’s start with the most flexible option: the freestyle build job.
5.3. Creating a Freestyle Build Job
The freestyle build job is the most flexible and configurable option, and can be used for any type of
project. It is relatively straightforward to set up, and many of the options we configure here also appear
in other build jobs.
5.3.1. General Options
The first section you see when you create a new freestyle job contains general information about the
project, such as a unique name and description, and other information about how and where the build
job should be executed (see Figure 5.2, “Creating a new build job”).
82
Figure 5.2. Creating a new build job
The project name can be anything you like, but it is worth noting that it will be used for the project
directory and the build job URL, so I generally avoid names with spaces. The project description will go
on the project home page—use this to provide an overview of the build job’s goals and context. HTML
tags will work fine in this field.
The other options are more technical, and we will be looking at some of them in detail later on in the
book.
One important aspect that you should think about upfront is how you want to handle build history. Build
jobs can consume a lot of disk space, especially if you store the build artifacts (the binary files, such
as JARs, WARs, TARs, etc., generated by your build job). Even without artifacts, keeping a record
of every build job consumes additional disk space and memory, which may or may not be justified,
depending on the nature of your build job. For example, for a code quality metrics build that reports on
static analysis and code coverage metrics over time, you might want to keep a record of the builds for
the duration of the project, whereas, for a build job that automatically deploys an application to a test
server, keeping the build history and artifacts for posterity might be less important.
The Discard Old Builds option lets you limit the number of builds you record in the build history. You
can either tell Jenkins to only keep recent builds (Jenkins will delete builds after a certain number of
days), or to keep no more than a specified number of builds. If a certain build has particular sentimental
value, you can always tell Jenkins to keep it forever by using the Keep forever button on the build details
page (see Figure 5.3, “Keeping a build job forever”). Note that this button will only appear if you have
asked Jenkins to discard old builds.
Figure 5.3. Keeping a build job forever
83
In addition, Jenkins will never delete the last stable and successful builds, no matter how old they are.
For example, if you limit Jenkins to only keep the last twenty builds, and your last successful build was
thirty builds ago, Jenkins will still keep the successful build job as well as the last twenty failing builds.
You also have the option to disable the build. A disabled build will not be executed until you enable it
again. Using this option when you create a new build job is quite rare. On the other hand, this option
often comes in handy to temporarily suspend a build during maintenance work or major refactoring,
when notification of the build failures will not be useful for the team.
5.3.2. Advanced Project Options
The Advanced Project options contains, as the name suggests, configuration options that are less
frequently required. You need to click on the Advanced button for them to appear (see Figure 5.4, “To
display the Advanced Options, you need to click on the Advanced button”).
Figure 5.4. To display the Advanced Options, you need to click on the Advanced button
The Quiet Period option in the build job configuration simply lets you override the system-wide
quiet period defined in the Jenkins System Configuration screen (see Section 4.3, “Configuring the
System Environment”). This option is mainly used for version control systems that don’t support atomic
commits, such as CVS, but it is also sometimes used in teams where developers have the habit of
committing their work in several small commits.
The “Block build when upstream project is building” option is useful when several related projects are
affected by a single commit, but they must be built in a specific order. If you activate this option, Jenkins
will wait until any upstream build jobs (see Section 5.5, “Build Triggers”) have finished before starting
this build.
For instance, when you release a new version of a multimodule Maven project, version number updates
will happen in many, if not all, of the project modules. Suppose, for example, that we have added a web
application to the Game of Life project we used in Chapter 2, Your First Steps with Jenkins, setting it up
as a separate Maven project. When we release a new version of this project, both the core and the web
application version numbers will be updated (see Figure 5.5, “The “Block build when upstream project
is building” option is useful when a single commit can affect several related projects”). Before we can
build the web application, we need to build a new version of the original Game of Life core module.
However if you had a separate freestyle build job for each module, then the build jobs for both the core
and the web application would start simultaneously. The web application build job will fail if the core
build job hasn’t produced a new version of the core module for it, even if there are no test failures.
To avoid this issue, you could set up the web application build job to only start once the core build
has successfully terminated. However this would mean that the web application would never be built if
84
changes were made that only affected it, and not the core module. A better approach is to use the “Block
build when upstream project” option. In this case, when the version numbers are updated in version