### Title: Security Namespace: Making Linux Security Frameworks Available to Containers

### Authors:
- Yuqiong Sun, Symantec Research Labs
- David Safford, GE Global Research
- Mimi Zohar, IBM Research
- Dimitrios Pendarakis, IBM Research
- Zhongshu Gu, IBM Research
- Trent Jaeger, Pennsylvania State University

### Abstract
Lightweight virtualization (i.e., containers) offers a virtual host environment for applications without the need for a separate kernel, enabling better resource utilization and improved efficiency. However, the shared kernel also prevents containers from leveraging security features available to traditional VMs and hosts. This paper proposes security namespaces, a kernel abstraction that allows containers to have autonomous control over their security. Security namespaces relax the global and mandatory assumptions of kernel security frameworks, enabling containers to define and apply local security policies. A routing mechanism ensures that security decisions made by one container do not compromise the host or other containers. We demonstrate the effectiveness of security namespaces by implementing them for integrity measurement and mandatory access control in the Linux kernel, showing that they can mitigate security issues with minimal performance overhead.

### 1. Introduction
Lightweight virtualization, commonly known as containers, provides a virtual host environment for applications without requiring a separate kernel. This enables better resource utilization and improved efficiency. However, the shared kernel architecture prevents containers from utilizing security features available to traditional VMs and hosts. Containers cannot apply local policies to govern integrity measurement, code execution, and mandatory access control, which are essential for preventing application-specific security problems.

Previous efforts to make kernel security mechanisms available to containers have been ad hoc and often expose the challenges of trusting containers to make security decisions without compromising the host system or other containers. In this paper, we propose security namespaces, a kernel abstraction that enables containers to have autonomous control over their security. Security namespaces relax the global and mandatory assumptions of kernel security frameworks, allowing containers to independently define and apply security policies within a limited scope. To ensure security, we introduce a routing mechanism that dynamically dispatches operations to affected containers, ensuring that the security decision made by one container does not compromise the host or other containers.

We demonstrate the effectiveness of security namespaces by developing namespaces for integrity measurement and mandatory access control in the Linux kernel for use by Docker containers. Our results show that security namespaces can effectively mitigate security problems within containers, such as malicious code execution, with less than 0.7% additional latency to system calls and almost identical application throughput. Thus, security namespaces enable containers to gain autonomous control over their security without compromising the security of other containers or the host system.

### 2. Background

#### 2.1 Namespace and Container
The Linux namespace abstraction provides isolation for various system resources. According to the Linux man page, a namespace wraps a global system resource in an abstraction, making it appear to processes within the namespace that they have their own isolated instance of the global resource. Changes to the global resource are visible to other processes within the namespace but are invisible to processes outside the namespace.

For example, the mount namespace isolates file systems, allowing processes in different namespaces to see different mount points. As of now, six namespace abstractions (Table 1) have been introduced into the Linux kernel.

Containers, such as Docker, LXC, and LXD, leverage these namespace abstractions (along with other kernel mechanisms like Cgroups and Seccomp) to create isolated runtime environments for processes. Figure 1 illustrates the procedure for creating a Docker container, which involves launching a daemon process, forking a new process in different namespaces, setting up the namespaces, and executing a target program.

#### 2.2 Kernel Security Frameworks
Linux kernel security frameworks are designed to protect the system and applications running on it. Some of these frameworks, such as the Linux Integrity Subsystem (IMA), SELinux, and AppArmor, are upstreamed to the Linux kernel, while others remain as research proposals. These frameworks generally rely on "hooks" added to the kernel to intercept security-critical operations from processes. These operations are then passed to a security module where decisions (allow or deny) are made based on security policies.

##### 2.2.1 Linux Integrity Subsystem
The Linux Integrity Subsystem, also known as the Integrity Measurement Architecture (IMA), is designed to prevent attacks by measuring files that may affect the system's integrity. IMA works with a secure coprocessor, such as a TPM, to securely store measurements and report them to a remote party as proof of the system's overall integrity status.

### Table 1: Namespaces in Linux Kernel
| Namespace | Constant | Isolates |
|-----------|----------|----------|
| IPC       | CLONE_NEWIPC | System V IPC, POSIX message queues |
| Network   | CLONE_NEWNET | Network devices, stacks, ports, etc. |
| Mount     | CLONE_NEWNS  | Mount points |
| PID       | CLONE_NEWPID | Process IDs |
| User      | CLONE_NEWUSER | User and group IDs |
| UTS       | CLONE_NEWUTS | Hostname and NIS domain name |

### Figure 1: Creating a Docker Container
1. Launch a daemon process (e.g., dockerd) on the native host system.
2. The daemon process forks itself, specifying that the newly forked process will run in different namespaces for isolation.
3. The forked process sets up the namespaces (e.g., mounting a different root, setting up IP addresses, firewalls).
4. The target program is executed in the isolated environment.

This background sets the stage for our exploration of security namespaces, which aim to provide containers with the same level of security control as traditional VMs and hosts.