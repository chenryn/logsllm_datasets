module Game (R : Rand_t, Z : Environment_t, A : Adversary_t, S : Simulator_t) = {
module O = Oracles
module A = A(O)
b  (fst pi, pexec (snd pi))) pis in
let cs = map (fun pi => (fst pi, ())) pis in
Some (cs, os).
clone import Protocol as HBCAddition with
...
end HBCAdditionProtocol.
Fig. 37: Honest-but-curious addition protocol
theory MALAdditionProtocol.
...
type p_id_t = p_id_t.
type input_t = share_t * share_t.
type inputs_t = (p_id_t * input_t) list.
type output_t = share_t.
type outputs_t = (p_id_t * output_t) list.
type rand_t = unit.
type rands_t = (p_id_t * rand_t) list.
type conv_t = unit.
type convs_t = (p_id_t * conv_t) list.
op update_commits (c c’ : commit_t) : commit_t =
(c.‘1 + c’.‘1, map2 (fun x y => (fst x, CyclicGroup.( * ) (snd x) (snd y))) c.‘2 c’.‘2).
op pexec (pi : input_t) : output_t =
let (xi,yi) = pi in
(xi.‘1 + yi.‘1, update_commits xi.‘2 yi.‘2).
op prot (rs : rands_t) (pis : inputs_t) : (convs_t * outputs_t) option =
let os = map (fun pi => (fst pi, pexec (snd pi))) pis in
let cs = map (fun pi => (fst pi, ())) pis in
Some (cs, os).
clone import Protocol as MalAddition with
...
end MALAdditionProtocol.
Fig. 38: Malicious addition protocol
43
theory HBCRefreshProtocol.
...
type p_id_t = p_id_t.
op p_id_set = ShamirSS.p_id_set.
type input_t = share_t.
type inputs_t = (p_id_t * input_t) list.
type output_t = share_t.
type outputs_t = (p_id_t * output_t) list.
type rand_t = ShamirSS.rand_t.
type rands_t = (p_id_t * rand_t) list.
type conv_t = share_t list.
type convs_t = (p_id_t * conv_t) list.
type pstate1_t = ShamirSS.shares_t.
op pstage1 (r : rand_t) : pstate1_t =
ShamirSS.share r F.zero.
op pstage2 (i : input_t) (ss : share_t list) : output_t =
foldr (fun (x : share_t) (acc : share_t) => AdditionProtocol.pexec (x, acc)) i ss.
op prot (rs : rands_t) (iss : inputs_t) : (convs_t * outputs_t) option =
let pst1 = map (fun pid => (pid, pstage1 (oget (assoc rs pid)))) p_id_set in
let cs = map (fun pid => (pid, map (fun ss => snd ss) (oget (assoc pst1 pid)))) p_id_set in
let sss = map (fun pid => (pid, map (fun idss => oget (assoc (snd idss) pid)) pst1)) p_id_set
in
let os = map (fun pid => (pid, pstage2 (oget (assoc iss pid)) (oget (assoc sss pid)))) p_id_set
in
let cs = map (fun pid => (pid, oget (assoc cs pid) ++ (oget (assoc sss pid)))) p_id_set in
Some (cs,os).
clone import Protocol as HBCRefresh with
...
end HBCRefreshProtocol.
Fig. 39: Honest-but-curious refresh protocol
44
theory MALRefreshProtocol.
...
type p_id_t = p_id_t.
op p_id_set = p_id_set.
type input_t = share_t.
type inputs_t = (p_id_t * input_t) list.
type output_t = share_t.
type outputs_t = (p_id_t * output_t) list.
type rand_t = rand_t.
type rands_t = (p_id_t * rand_t) list.
type conv_t = share_t list.
type convs_t = (p_id_t * conv_t) list.
type pstate1_t = shares_t.
op pstage1 (r : rand_t) : pstate1_t =
share r F.zero.
op pstage2 (pid : p_id_t) (i : input_t) (ss : share_t list) : output_t =
foldr (fun (x : share_t) (acc : share_t) =>
if verify (pid, fst x) (snd x) then
AdditionProtocol.pexec (x,acc)
else acc) i ss.
op prot (rs : rands_t) (iss : inputs_t) : (convs_t * outputs_t) option =
let pst1 = map (fun pid => (pid, pstage1 (oget (assoc rs pid)))) p_id_set in
let cs = map (fun pid => (pid, map (fun ss => snd ss) (oget (assoc pst1 pid)))) p_id_set in
let sss = map (fun pid => (pid, map (fun idss => oget (assoc (snd idss) pid)) pst1)) p_id_set
in
let os = map (fun pid => (pid, pstage2 pid (oget (assoc iss pid)) (oget (assoc sss pid))))
p_id_set in
let cs = map (fun pid => (pid, oget (assoc cs pid) ++ (oget (assoc sss pid)))) p_id_set in
Some (cs,os).
clone import Protocol as MalRefresh with
...
end MALRefreshProtocol.
Fig. 40: Malicious refresh
45
theory HBCRecoverProtocol.
...
type p_id_t = p_id_t.
op p_id_set = ShamirSS.p_id_set.
type input_t = p_id_t * share_t.
type inputs_t = (p_id_t * input_t) list.
type output_t = share_t.
type outputs_t = (p_id_t * output_t) list.
type rand_t = ShamirSS.rand_t.
type rands_t = (p_id_t * rand_t) list.
type conv_t = share_t list.
type convs_t = (p_id_t * conv_t) list.
type pstate1_t = ShamirSS.shares_t.
op pstage1 (r : rand_t) : pstate1_t =
ShamirSS.share r F.zero.
op pstage2 (i : share_t) (ss : share_t list) : output_t =
foldr (fun (x : share_t) (acc : share_t) => AdditionProtocol.pexec (x, acc)) i ss.
op rparty (pid : p_id_t) (ss : (p_id_t * share_t) list) : output_t =
interpolate pid ss.
op prot (rs : rands_t) (iss : inputs_t) : (convs_t * outputs_t) option =
let rp = fst (snd (head witness iss)) in
let nrp = rem rp p_id_set in
let iss = map (fun pidi => let (pid,i) = pidi in (pid, snd i)) iss in
let pst1 = map (fun pid => (pid, pstage1 (oget (assoc rs pid)))) nrp in
let cs = map (fun pid => (pid, map (fun ss => snd ss) (oget (assoc pst1 pid)))) nrp in
let sss = map (fun pid => (pid, map (fun idss => oget (assoc (snd idss) pid)) pst1)) nrp in
let os = map (fun pid => (pid, pstage2 (oget (assoc iss pid)) (oget (assoc sss pid)))) nrp in
let cs = map (fun pid => (pid, oget (assoc cs pid) ++ (oget (assoc sss pid)))) nrp in
let orp = rparty rp os in
let crp = map (fun x => snd x) os in
Some ((rp, crp) :: cs, (rp, orp) :: os).
clone import Protocol as HBCRecover with
...
end HBCRecoverProtocol.
Fig. 41: Honest-but-curious recover
46
theory HBCMultiplicationProtocol.
type p_id_t = p_id_t.
type p_id_set = p_id_set.
type input_t = share_t * share_t.
type inputs_t = (p_id_t * input_t) list.
type output_t = share_t.
type outputs_t = (p_id_t * output_t) list.
type rand_t = rand_t.
type rands_t = (p_id_t * rand_t) list.
type conv_t = share_t list.
type convs_t = (p_id_t * conv_t) list.
type bdcst_1 = shares_t.
type state1 = share_t.
op pstage1 (r : rand_t) (i : input_t) : conv_t * state1 * bdcst_1 =
let mi = i.‘1 * i.‘2 in
let ss = ShamirSS.share r mi in
(unzip2 ss, mi, ss).
op pstage2 (pid : p_id_t) (c : conv_t) (st : state1) (ss : share_t list) : conv_t * output_t =
let sum = summation (map (fun sh, basis pid sh ss) ss) in
(c++ss,sum).
op prot (rs : rands_t) (iss : inputs_t) : (convs_t * outputs_t) option =
let pid_set = unzip1 iss in
let stage1 = map (fun pid => let p1 = pstage1 (oget (assoc rs pid)) (oget (assoc iss pid)) in
((pid, p1.‘1),(pid, p1.‘2), p1.‘3)) pid_set in
let cs = unzip13 stage1 in let sts = unzip23 stage1 in let bs = unzip33 stage1 in
let stage2 = map (fun pid => let p2 = pstage2 pid (oget (assoc cs pid)) (oget (assoc sts pid))
(get_all_assoc pid bs) in ((pid, p2.‘1),(pid, p2.‘2))) pid_set in
Some (unzip1 stage2, unzip2 stage2).
clone import Protocol as HBCMultiplication with
...
end HBCMultiplicationProtocol.
Fig. 42: Honest-but-curious mul protocol
47
theory MALMultiplicationProtocol.
type p_id_t = p_id_t.
type p_id_set = p_id_set.
type input_t = (share_t * share_t) * t list.
type inputs_t = (p_id_t * input_t) list.
type output_t = share_t.
type outputs_t = (p_id_t * output_t) list.
type rand_t = rand_t.
type rands_t = (p_id_t * rand_t) list.
type conv_t = share_t list.
type convs_t = (p_id_t * conv_t) list.
op pstage1 (i : input_t) : t = (fst (fst (fst i))) * (fst (snd (fst i))).
type pstate2 = shares_t
op pstage2 (pid : p_id_t) (r : rand_t) (i : t) : pstate2 = share r i.
op pstage3 (pid : p_id_t) (i : input_t) (ss : share_t list) : output_t =
let tl = snd i in
let ss = correct ss in
let pre = map2 (fun (sh : share_t) (x : t) => ScalarMultiplicationProtocol.pexec (sh, x)) ss tl
in
foldr (fun (x : share_t) (acc : share_t) =>
if Pedersen_comp.PedersenCommitmentScheme.PedersenCS.verify (pid, fst x) (snd x) then
AdditionProtocol.pexec (x,acc)
else acc) (F.zero, (F.zero, [])) ss.
op prot (rs : rands_t) (inps : inputs_t) : (convs_t * outputs_t) option =
let pst1 = map (fun pid => (pid, pstage1 (oget (assoc inps pid)))) p_id_set in
let cs = map (fun pid => (pid, map (fun ss => snd ss) (oget (assoc pst1 pid)))) p_id_set in
let pst2 = map (fun pid => (pid, pstage2 (oget (assoc rs pid)) (oget (assoc pst1 pid))))
p_id_set in
let sss = map (fun pid => (pid, map (fun idss => oget (assoc (snd idss) pid)) pst2)) p_id_set
in
let os = map (fun pid => (pid, pstage3 pid (oget (assoc inps pid))(oget (assoc sss pid))))
p_id_set in
let cs = map (fun pid => (pid, oget (assoc cs pid) ++ (oget (assoc sss pid)))) p_id_set in
Some (cs, os).
clone import Protocol as MalMultiplication with
...
end MALMultiplicationProtocol.
Fig. 43: Malicious mul protocol
48