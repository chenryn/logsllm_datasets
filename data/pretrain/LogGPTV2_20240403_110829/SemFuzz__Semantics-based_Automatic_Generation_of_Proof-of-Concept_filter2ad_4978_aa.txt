title:SemFuzz: Semantics-based Automatic Generation of Proof-of-Concept
Exploits
author:Wei You and
Peiyuan Zong and
Kai Chen and
XiaoFeng Wang and
Xiaojing Liao and
Pan Bian and
Bin Liang
SemFuzz: Semantics-based Automatic Generation of
Proof-of-Concept Exploits
Wei You1, Peiyuan Zong2,3, Kai Chen2,3,∗, XiaoFeng Wang1,∗, Xiaojing Liao4, Pan Bian5, Bin Liang5
1School of Informatics and Computing, Indiana University Bloomington, Indiana, USA
2SKLOIS, Institute of Information Engineering, Chinese Academy of Sciences, Beijing, China
3School of Cyber Security, University of Chinese Academy of Sciences, Beijing, China
4Department of Computer Science, William and Mary, Virginia, USA
5School of Information, Renmin University of China, Beijing, China
{youwei,xw7}@indiana.edu,{zongpeiyuan,chenkai}@iie.ac.cn,{xliao02}@wm.edu,{bianpan,liangb}@ruc.edu.cn
ABSTRACT
Patches and related information about so(cid:137)ware vulnerabilities are
o(cid:137)en made available to the public, aiming to facilitate timely (cid:128)xes.
Unfortunately, the slow paces of system updates (30 days on aver-
age) o(cid:137)en present to the a(cid:138)ackers enough time to recover hidden
bugs for a(cid:138)acking the unpatched systems. Making things worse is
the potential to automatically generate exploits on input-validation
(cid:131)aws through reverse-engineering patches, even though such vul-
nerabilities are relatively rare (e.g., 5% among all Linux kernel
vulnerabilities in last few years). Less understood, however, are the
implications of other bug-related information (e.g., bug descriptions
in CVE), particularly whether utilization of such information can
facilitate exploit generation, even on other vulnerability types that
have never been automatically a(cid:138)acked.
In this paper, we seek to use such information to generate proof-
of-concept (PoC) exploits for the vulnerability types never automat-
ically a(cid:138)acked. Unlike an input validation (cid:131)aw that is o(cid:137)en patched
by adding missing sanitization checks, (cid:128)xing other vulnerability
types is more complicated, usually involving replacement of the
whole chunk of code. Without understanding of the code changed,
automatic exploit becomes less likely. To address this challenge,
we present SemFuzz, a novel technique leveraging vulnerability-
related text (e.g., CVE reports and Linux git logs) to guide automatic
generation of PoC exploits. Such an end-to-end approach is made
possible by natural-language processing (NLP) based information
extraction and a semantics-based fuzzing process guided by such
information. Running over 112 Linux kernel (cid:131)aws reported in the
past (cid:128)ve years, SemFuzz successfully triggered 18 of them, and fur-
ther discovered one zero-day and one undisclosed vulnerabilities.
(cid:140)ese (cid:131)aws include use-a(cid:137)er-free, memory corruption, informa-
tion leak, etc., indicating that more complicated (cid:131)aws can also be
automatically a(cid:138)acked. (cid:140)is (cid:128)nding calls into question the way
vulnerability-related information is shared today.
∗ Corresponding Authors
.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for pro(cid:128)t or commercial advantage and that copies bear this notice and the full citation
on the (cid:128)rst page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permi(cid:138)ed. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior speci(cid:128)c permission and/or a
fee. Request permissions from permissions@acm.org.
CCS’17, Oct. 30–Nov. 3, 2017, Dallas, TX, USA.
© 2017 ACM. ISBN 978-1-4503-4946-8/17/10...$15.00
DOI: h(cid:138)p://dx.doi.org/10.1145/3133956.3134085
CCS CONCEPTS
•Security and privacy → So(cid:135)ware security engineering;
KEYWORDS
exploit generation, vulnerability, patch, fuzzing, semantics
1 INTRODUCTION
Today information and patches for so(cid:137)ware vulnerabilities, even
those security-critical ones, are o(cid:137)en publicly available, for the
purpose of raising the awareness of these problems and facilitating
their timely (cid:128)xes. Unfortunately, system updates are o(cid:137)en slow,
even in the presence of security (cid:131)aws, as evidenced by the recent
WannaCry ransomware outbreak [22], which exploits the Eternal-
Blue bug whose patch has been released months ago. As a result,
miscreants are o(cid:137)en given a large time frame (30 days on aver-
age [45]), during which they can leverage the information exposed
by public patches to recover hidden bugs, and a(cid:138)ack the systems yet
to be patched. Indeed, research almost a decade ago [28] shows that
it is possible to automatically reverse-engineer a patch to generate
an exploit for the vulnerability meant to be (cid:128)xed by the patch. Less
understood, however, are the implications of other information,
such as the reports from common vulnerabilities and exposures
(CVE) systems [9], Linux git logs [15] and bug descriptions posted
on forums and blogs [12–14], to this ongoing patching-exploit arms
race. Particularly, from the a(cid:136)acker’s viewpoint, whether such in-
formation can also be leveraged for automatic construction of more
complicated exploits? from the defender’s side, how to control such
information leaks to make the automatic a(cid:136)ack harder to succeed?
Challenges in automatic exploit generation. Actually, auto-
matic exploit generation is hard. (cid:140)e prior study [28] only creates
the a(cid:138)acks on input-validation (cid:131)aws, a type of bugs relatively easy
to discover and (cid:128)x, given their prominent feature (missing of sani-
tization checks). An exploit on such (cid:131)aws can be constructed from
a patch by seeking an input that fails the newly added checks. In
other words, to generate such exploits, an automatic approach (cid:128)rst
(cid:128)nds a path from the program’s entry point to the new check, then
recovers the constraints for reaching the check on the path. Such
constraints, which are built through symbolic execution [36], are
then resolved to obtain an input that fails the check and therefore
is likely to cause an exploit on the vulnerability.
Session J2:  Fun with FuzzingCCS’17, October 30-November 3, 2017, Dallas, TX, USA2139Table 1: (cid:135)e types of vulnerability addressed in this paper.
Vulnerability Type
Information leak/disclosure
Denial of service
Null pointer dereference
Uncontrolled resource consumption
Use a(cid:137)er free
Bu(cid:130)er over(cid:131)ow
Memory corruption
Integer over(cid:131)ow
Bu(cid:130)er over-read
Improper access control
Race conditions
Numeric errors
Double free
In(cid:128)nite loop
Deadlock
Divide by zero error
Percentage
10.62%
9.38%
9.04%
7.91%
6.67%
5.76%
4.18%
3.39%
3.16%
2.82%
2.60%
2.49%
1.36%
1.24%
0.68%
0.45%
Compared with such input-validation (cid:131)aws, other types of vul-
nerabilities (like uncontrolled resource consumption, deadlock,
memory corruption, etc.), however, are more complicated and can-
not be patched by simply adding a check. Actually, more o(cid:137)en than
not, their related vulnerable statements or even the whole chunk of
code need to be replaced by the patch, making the vulnerable code
hard to detect, not to mention an a(cid:138)empt to exploit it through the
aforementioned constraints (cid:128)nding and resolving. To the best of
our knowledge, so far, li(cid:138)le has been done to automate the exploits
of these complicated, deep program (cid:131)aws.
Even for the a(cid:138)ack on input validation, symbolic execution and
constraint solving are known to be di(cid:129)cult. For real-world pro-
grams, path constraints leading to vulnerable program locations
tend to be non-linear, o(cid:137)entimes, rendering current solvers (e.g.,
STP [19]) hard to (cid:128)gure out a suitable input. Making it worse are
the global variables in the target program, whose values are o(cid:137)en
assigned in one thread but used in another. Once this happens,
the path constraints for reaching vulnerable code would become
incomplete (given the missing assignment) and cannot be made
right without looking at other threads. (cid:140)is, however, becomes
too complicated for the current symbolic execution and constraint
solving systems to handle. For example, CVE-2017-6347 reports a
vulnerable function ip cmsg recv checksum in Linux kernel invoked
by the system call recvfrom. An essential condition for triggering
the vulnerable function is to (cid:128)ll a sk buff bu(cid:130)er, which will be
referenced in the kernel structure socket. However, on the path
from recvfrom to the vulnerable function, no such code exists, and
it turns out that this is done in another system call sendto, which
is supposed to be called before invoking recvfrom.
Our approach. In this paper, we demonstrate that complicated
vulnerabilities can also be automatically exploited, even in the
absence of sophisticated constraint solving techniques. Instead, we
utilize non-code text related to a vulnerability, particularly CVE
reports and Linux git logs, to extract guidances, which are found to
be su(cid:129)ciently informative for helping discover and trigger a set of
deep bugs. Our technique, called semantics-based fuzzing (SemFuzz),
automatically analyzes bug reports to create end-to-end proof-of-
concept (PoC) exploits 1 on various Linux kernel vulnerabilities,
including double free, use-a(cid:137)er-free and memory corruption, etc.,
as illustrated in Table 1. Compared with the prior work [28], which
targets the input-validation vulnerabilities (only 5% among all the
Linux kernel (cid:131)aws reported in recently 2), SemFuzz is capable of
handling a wide range of vulnerabilities within the kernel code.
Note that unlike relatively simple programs receiving a single input
(e.g., a (cid:128)le), as studied in the prior research, the kernel code is much
more complicated, with its vulnerable component only reachable
through some speci(cid:128)c system call sequences (e.g., sendto and then
recvfrom).
More speci(cid:128)cally, given a reported vulnerability, SemFuzz (cid:128)rst
utilizes Natural Language Process (NLP) to analyze its CVE and git
log reports. CVE provides a reference method for publicly known
security vulnerabilities and exposures, publishing the information
such as a(cid:130)ected versions, vulnerability type, and vulnerable func-
tions. (cid:140)e Linux git log includes a patch and the description about
how it works. Such information is invaluable for the exploit gen-
eration process. For example, they tell us the exact version of the
vulnerable program for se(cid:138)ing up the right testing environment.
More importantly, it may also explain the types of vulnerabilities,
what to expect when hi(cid:138)ing the target (crash, hang, memory cor-
ruption, etc.), the whereabouts of a vulnerable function, and even
the key variables and their values for guiding the program exe-
cution toward the bug. Leveraging the information automatically
collected, SemFuzz creates a call sequence reaching the vulnerable
function, and then iteratively “mutates” the parameters of individ-
ual calls to move towards the patched code inside the function, until
the target vulnerability is triggered.
(cid:140)is semantics-based, intelligent fuzzing technique turns out to
be very e(cid:130)ective. In our research, we ran our implementation over
112 Linux kernel vulnerabilities reported by CVE in the past (cid:128)ve
years. 16% of them were successfully triggered. For the remaining
CVEs, although SemFuzz did not produce end-to-end PoC exploits,
it automatically discovered the inputs that move the program exe-
cution towards vulnerable functions, which can signi(cid:128)cantly speed
up the process to manually build exploits. Also interestingly, our
approach even discovered one zero-day vulnerability and one undis-
closed vulnerability, when fuzzing the kernel for triggering known
(cid:131)aws. (cid:140)ese new (cid:128)ndings have already been con(cid:128)rmed by the
Linux kernel developer group. Our studies show that these new
vulnerabilities either appear around the known (cid:131)aws or are similar
problems inside equivalent components (Section 6.5). (cid:140)e results
strongly indicate that public bug descriptions today indeed leak
out critical information, which can be practically utilized to gener-
ate a(cid:138)ack instances, exploiting the vulnerabilities that cannot be
a(cid:138)acked automatically through patch analysis alone.
Contribution. (cid:140)e contributions of this paper are as follows:
1Following [28], we de(cid:128)ne a proof-of-concept exploit as inputs that trigger a vulnerabil-
ity to crash the target program without executing further a(cid:138)acks such as control-(cid:131)ow
diversion.
2We consider the (cid:131)aws that can be (cid:128)xed by adding sanitization checks on inputs as
input-validation vulnerabilities, as de(cid:128)ned in the prior work [28].
Session J2:  Fun with FuzzingCCS’17, October 30-November 3, 2017, Dallas, TX, USA2140• New technique. We designed and implemented SemFuzz, the
(cid:128)rst semantics-based, intelligent fuzzer that automatically recov-
ers vulnerability-related knowledge from text reports and utilizes
such information to guide systematic construction of test cases for
triggering a known or related unknown (cid:131)aw.
• New understanding. Our study demonstrates that non-code textual
bug descriptions (e.g., CVE, Linux git logs) are valuable information
sources for reconstructing exploits on known vulnerabilities. Over
112 Linux kernel (cid:131)aws reported in the past (cid:128)ve years, SemFuzz
successfully triggered 18 and further discovered two related un-
known bugs. More importantly, our research goes beyond simple
input-validation bugs, providing evidence that more complicated
(cid:131)aws can also be automatically a(cid:138)acked using bug-related public
information. (cid:140)is (cid:128)nding calls into question the way vulnerability-
related information is shared today, and could lead to more serious
e(cid:130)ort to control the information leaks from those sources.
2 BACKGROUND
Vulnerability and Patch. A vulnerability is a weakness in so(cid:137)-
ware or hardware components which allows an a(cid:138)acker to reduce a
system’s information assurance [20]. By exploiting such vulnerabili-
ties, a(cid:138)ackers could alter system resources or a(cid:130)ect their operations,
compromising integrity or availability. (cid:140)e consequences of a(cid:138)acks
include millions of dollars lost in banks [1], billions of users’ pri-
vacy leakage [5], etc. To mitigate the impacts of vulnerabilities,