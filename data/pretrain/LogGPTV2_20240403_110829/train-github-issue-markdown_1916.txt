I'm running Telegram bot and noticed the free memory degradation when running
bot for a long time. Firstly, I suspect my code; then I suspect bot and
finally I came to requests. :)  
I used **len(gc.get_objects())** to identify that problem exists. I located
the communication routines, then cleared all bot code and comes to the example
that raises the count of gc objects on every iteration.
## Expected Result
**len(gc.get_objects())** should give the **same** result on every loop
iteration
## Actual Result
The value of **len(gc.get_objects())** increases on every loop iteration.
    Test N2
    GetObjects len: 27959
    Test N3
    GetObjects len: 27960
    Test N4
    GetObjects len: 27961
    Test N5
    GetObjects len: 27962
    Test N6
    GetObjects len: 27963
    Test N7
    GetObjects len: 27964
## Reproduction Steps
    token = "XXX:XXX"
    chat_id = '111'
    proxy = {'https':'socks5h://ZZZ'} #You may need proxy to run this in Russia
    from time import sleep
    import gc, requests
    def garbage_info():
        res = ""
        res += "\nGetObjects len: " + str(len(gc.get_objects()))
        return res
    def tester():
        count = 0
        while(True):
            sleep(1)
            count += 1
            msg = "\nTest N{0}".format(count) + garbage_info()
            print(msg)
            method_url = r'sendMessage'
            payload = {'chat_id': str(chat_id), 'text': msg}
            request_url = "https://api.telegram.org/bot{0}/{1}".format(token, method_url)
            method_name = 'get'
            session = requests.session()
            req = requests.Request(
                method=method_name.upper(),
                url=request_url,
                params=payload
            )
            prep = session.prepare_request(req)
            settings = session.merge_environment_settings(
                prep.url, None, None, None, None)
    #            prep.url, proxy, None, None, None)  #Change the line to enable proxy
            send_kwargs = {
                'timeout': None,
                'allow_redirects': None,
            }
            send_kwargs.update(settings)
            resp = session.send(prep, **send_kwargs)
            # For more clean output
            gc.collect()
    tester()
## System Information
    {
      "chardet": {
        "version": "3.0.4"
      },
      "cryptography": {
        "version": "2.3.1"
      },
      "idna": {
        "version": "2.7"
      },
      "implementation": {
        "name": "CPython",
        "version": "3.6.6"
      },
      "platform": {
        "release": "4.15.0-36-generic",
        "system": "Linux"
      },
      "pyOpenSSL": {
        "openssl_version": "1010009f",
        "version": "17.5.0"
      },
      "requests": {
        "version": "2.19.1"
      },
      "system_ssl": {
        "version": "1010007f"
      },
      "urllib3": {
        "version": "1.23"
      },
      "using_pyopenssl": true
    }