xbeark-javaopenrasp源码阅读
项⽬地址
https://github.com/xbeark/javaopenrasp
简介
随便看了下，这个算是不太难，并且适合我这种初学者啰，简单看看ReadMe可以发现实现
了⼀些基本功能，这⾥我们了解他的基本实现思路即可
阅读本项⽬⽤到的ASM相关前置知识
btw，只搞⼀些⽐较重要的点，⾸先我们知道在ASM CORE API当中有⼏个⽐较重要的点是
ClassReader、ClassVisitor、ClassWriter以及AdviceAdapter，这⾥不会讲代码怎么写，只是告诉
这是⼲嘛的便于对代码架构的理解
ClassReader/ClassWriter
稍微不是那么重要⼀点，这⾥只说⼀下具体作⽤，它负责读取.class⽂件⾥的内容，然后拆分
成各个不同的部分（其实就是与类⽂件的组成有关，这⾥对代码理解没意义）,ClassWriter也
真是将拆分的部分重新组合
ClassVisitor
ClassVisitor是访问者模式的逻辑
在ClassVisitor类当中，定义了多个visit开头的⽅法，这些⽅法的参数也与ClassFile结构密切相
关。这些⽅法，遵循⼀定的调⽤顺序，来⾃官⽅⽂档
当然这⾥有必要对其中⼀些东西做个简单说明
[] : 表⽰最多调⽤⼀次，可以不调⽤，但最多调⽤⼀次
() 和 | : 表⽰多个⽅法之间，可以选择任意⼀个，并且多个⽅法之间不分前后顺序
* : 表⽰⽅法可以调⽤0次或多次
visit
[visitSource][visitModule][visitNestHost][visitPermittedSubclass]
[visitOuterClass]
(
 visitAnnotation |
 visitTypeAnnotation |
 visitAttribute
)*
(
 visitNestMember |
 visitInnerClass |
 visitRecordComponent |
 visitField |
 visitMethod
)* 
visitEnd
AdviceAdapter
在AdviceAdapter类的⽅法中，定义了两个重要的⽅法：onMethodEnter()⽅法和onMethodExit()
⽅法，顾名思义
onMethodEnter：在⽅法进⼊时，添加⼀些代码逻辑
onMethodExit：在⽅法退出时，添加⼀些代码逻辑
因此我们可以通过实现⾃定义AdviceAdapter，在⽅法体进⼊的部分(onMethodEnter)插⼊我们
的拦截代码实现监控
ok⼤致扫盲了⼀遍，可以去深⼊阅读源码了
源码阅读正⽂
⾸先关注 xbear.javaopenrasp.Agent ，可以看见只实现了 premain 的⽅式，也就是启动
前加载
配置初始化
public class Agent {
    public static void premain(String agentArgs, Instrumentation inst)
            throws ClassNotFoundException, UnmodifiableClassException {
        Console.log("init");
        init();
        inst.addTransformer(new ClassTransformer());
    }
    private static boolean init() {
        Config.initConfig();
        return true;
    }
} 
删除了部分没必要的影响阅读的代码
⾸先是配置的初始化 init ,调⽤的
是 xbear.javaopenrasp.config.Config#initConfig ，⾸先通过 readConfig ⽅法将配
置⽂件内容读⼊，其实只是⼀个读⽂件的⽅法，之后会解析这个 main.config⽂件 ，这个⽂
件内容是符合json格式
String configStr = readConfig("/main.config");
Map configMap = (Map) JSONUtils.parse(configStr);
List moudleList = (List) configMap.get("moudle");
for (Map m: moudleList) {
Map tmpMap = new ConcurrentHashMap();
tmpMap.put("loadClass", m.get("loadClass"));
tmpMap.put("mode", m.get("mode"));
tmpMap.put("whiteList", new CopyOnWriteArrayList((Collection) 
m.get("whiteList")));
tmpMap.put("blackList", new CopyOnWriteArrayList((Collection) 
m.get("blackList")));
moudleMap.put((String)m.get("moudleName"), tmpMap);
}
Console.log(moudleMap.toString());
之后将解析好的内容保存⾄List的结构当中，之后对这个list做⼆次处理将结果保存到
moudleMap当中，其中key是需要监控的类，value是对应的⼀些其他配置参数，参数作⽤下⾯
会详细说说
配置⽂件参数浅析  
ClassTransformer
之后具体来看这个⽤户⾃⼰实现的类转换器，核⼼代码就那么⼏段，这⾥他会根据不同的类
去执⾏不同的ClassVisitor⽅法
为了⽅便讲解我们这⾥⽤ ProcessBuilder 执⾏命令的流程来做讲解啰，它对应了
xbear.javaopenrasp.visitors.rce.ProcessBuilderVisitor ，看他的
visitMethod ⽅法，可以看出来会对start⽅法做处理，具体可以看
看 ProcessBuilderVisitorAdapter
moudleName：需要去监控的⼀些类
loadClass：指定对应要⽤到的ClassVisitor去做拦截或⽇志记录
mode：拦截模式，有log(只记录⽇志)，black(⿊名单)，block(阻断)、check(检查判断)四种
模式
whiteList：⽩名单
blackList：⿊名单
ClassReader reader = new ClassReader(classfileBuffer);
ClassWriter writer = new ClassWriter(ClassWriter.COMPUTE_MAXS);
ClassVisitor visitor = Reflections.createVisitorIns((String) 
Config.moudleMap.get(className).get("loadClass"), writer, className);
reader.accept(visitor, ClassReader.EXPAND_FRAMES);
transformeredByteCode = writer.toByteArray();
//xxxxx省略很多代码
可以看出做了这样⼏件事情，实例化 PrcessBuilderFilter 类(btw才发现他单词打错了)，
把 ProcessBuilder 的 command 变量传⼊作为 filter ⽅法的参数，可以看到对于命令执⾏
这个rasp的默认配置只是记录了执⾏的命令以及⼀些调⽤栈的信息并没有做拦截，这⾥同样可
以看到其他模式⽐如block直接拦截，white⽩名单模式，black⿊名单模式，log⽇志记录
@Override
public MethodVisitor visitMethod(int access, String name, String desc,
                                 String signature, String[] exceptions) {
  MethodVisitor mv = super.visitMethod(access, name, desc, signature, 
exceptions);
  if ("start".equals(name) && "()Ljava/lang/Process;".equals(desc)) {
    mv = new ProcessBuilderVisitorAdapter(mv, access, name, desc);
  }
  return mv;
}
浅谈⼀些缺点
时间有限，暂时不想对这个做更多了解，主要是新⼈为了学习第⼀篇rasp做了解，⾸先是⼀些
功能点的实现缺点，⽐如对于⿊名单
可能在⼤部分场景下没问题的，但是既然是⼀个通⽤的类，那肯定有不通⽤的绕过点，⽐如
对于Ognl表达式我们完全可以像这样去绕过这个简单的字符串查找
参考⽂章
https://zhishihezi.net/b/5d644b6f81cbc9e40460fe7eea3c7925
http://wjlshare.com/archives/1582
  public static boolean isBlack(String moudleName, String testStr) {
    List blackList = (List) 
moudleMap.get(moudleName).get("blackList");
    for (String black: blackList) {
      if (testStr.trim().toLowerCase().indexOf(black.trim().toLowerCase()) 
> -1) {
        return true;
      }
    }
    return false;
  }
#this.getClass().forName("jav"+"a.lang.Runtime").getMethods[12].invoke(#th
is.getClass().forName("jav"+"a.lang.Runtime").getMethods[6].invoke(),"/tmp
/aaa.sh")