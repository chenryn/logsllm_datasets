Take the following examples:
    async function doRequest() {
        const res = await fetch("http://localhost:4545/cli/tests/fixture.json");
        const someCondition = true;
        if (someCondition) throw new Error();
        const body = await res.json();
        return body;
    }
    doRequest().catch(console.error);
    setInterval(() => {
        console.log(Deno.resources());
    }, 2000);
* * *
     await fetch("http://localhost:4545/cli/tests/fixture.json");
    // I don't care about the body
Since fetch response resource id is only closed after the body is consumed, in
the examples above the resource handle for both requests are never closed.
Easily reproducible in a test.
    Deno.test('leak', async() => {
             await fetch("http://localhost:4545/cli/tests/fixture.json");
            // I don't care about the body
    });
    AssertionError: Test case is leaking resources.
    Before: {
      "0": "stdin",
      "1": "stdout",
      "2": "stderr"
    }
    After: {
      "0": "stdin",
      "1": "stdout",
      "2": "stderr",
      "3": "httpBody"
    }
Currently, there's no way in Deno to close the resource handle without
consuming the body.  
Fetch specification does not mention anything about a default read timeout,
where we could close the handle after the timeout is reached.
Fortunately, it provides a way to abort the request & consumption of the body
using `AbortController`, and `signal` option (not supported in Deno).
     const abort = new AbortController();
     const res = await fetch("http://localhost:4545/cli/tests/fixture.json", {
       signal: abort.signal,
     });
     assert(res.ok);
    // Discard body
     abort.abort();
Until the above is supported fetch response body must always be consumed.
    const res = await fetch("http://localhost:4545/cli/tests/fixture.json");
    await res.text(); // consume body