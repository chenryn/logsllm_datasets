我们博客系统的MySQL数据库服务：
7
# docker run --name xxh-blog-db -e MYSQL_ROOT_PASSWORD=mysqlrootpassword -d
registry.mirrors.aliyuncs.com/library/mysql
9
需要注意的是，镜像名指定的是阿里云所提供的镜像。MySQL服务默认是在3306端口监听
服务。因为并不需要跨主机连接MySQL，所以也就没必要将该端口暴露到主机，这样同时能提
9
高数据库的安全性。在下一节中，我们会讲到使用--link参数将WordPress直接连接到数据库。
使用环境变量来配置新启动的容器环境是初始化容器最常见的一种手段。下面介绍MySQL
10
所支持的几个环境变量。
 MYSQL_ROOT_PASSWORD。这个环境变量是必选的，用来指定MySQL容器服务的根用户（root） 10
密码。上面的例子中所指定的密码是mysqlrootpassword。
 MYSQL_USER和MYSQL_PASSWORD。这两个环境变量是可选的，用来额外添加一个MySQL用户 11
并指定其密码。这两个变量必须同时指定，缺少其中任何一个，另一个参数也不会产生
效果。我们不能使用这个环境变量来添加root用户，因为root用户是默认存在的，并且root 13
用户的密码是通过MYSQL_ROOT_PASSWORD来指定的。
 MYSQL_DATABASE。这个环境变量是可选的，用来额外创建一个数据库，其参数为数据库名 14
称。如果同时指定了MYSQL_USER和MYSQL_PASSWORD，那么MYSQL_USER用户将拥有访问此数
据库的所有权限。 15
9.3 部署 WordPress 容器 16
数据库服务启动后，就可以启动WordPress容器了。使用下面的命令启动：
17
# docker run --name xxh-blog --link xxh-blog-db:mysql -p 80:80 -d
registry.mirrors.aliyuncs.com/library/wordpress 18
110 第9章 在阿里云上部署WordPress
我们使用link标记将上一节启动的xxh-blog-db数据库容器以约定的固定别名mysql导入到
WordPress容器内。因为我们的博客最终是要对外网提供访问的，所以还要通过-p 80:80标记将
WordPress容器默认监听的80 端口映射到主机的80端口上。在此，我们需要确保主机上的80端口
没有被其他应用占用，否则将导致启动失败。容器启动成功后，在外网使用http://ecs-host-ip/地址
就可以访问到我们的博客了。笔者测试时，使用的IP地址是120.24.159.50。但首次访问时，会被
定向到WordPress安装页面，如图9-2所示，我们可以根据提示完成站点标题、用户名、密码、电
子邮箱的填写。
图9-2 WordPress安装界面
安装完成后，再次通过http://ecs-host-ip/地址就能直接进入博客主页了。使用安装时填写的用
户名和密码登录到博客的仪表盘页面，在这里可以编写和发布博客并且对WordPress的方方面面
进行配置，如图9-3所示。
9.3 部署WordPress容器 111
1
2
3
4
5
6
7
图9-3 博客主页面 9
通过IP地址访问终究不是很方便，用户可以到万网http://www.net.cn/购买适合自己的域名，
9
并到阿里云代备案管理系统https://beian.gein.cn/完成域名备案，最后将域名绑定到你的ECS服务
器的IP地址，这样就能通过域名访问博客了。这方面的详细操作不在本书的讨论范围内，读者可
10
以到各自官网获取帮助。
同样，WordPress也支持使用额外的环境变量来定制。
10
 WORDPRESS_DB_USER。连接MySQL数据库服务的用户名。如果不指定，则使用默认root作
为用户。 11
 WORDPRESS_DB_PASSWORD。连接MySQL数据库服务的密码，如果不指定，就使用连接到的
MySQL容器中的环境变量MYSQL_ROOT_PASSWORD作为密码。
13
 WORDPRESS_DB_NAME。WordPress要使用的数据库名称。如果不指定，则使用默认值
wordpress。如果目标数据库服务中不存在这个数据库，那么容器在启动时会自动创建该
14
数据库，前提是WORDPRESS_DB_USER用户拥有创建数据库的权限。
 WORDPRESS_AUTH_KEY、WORDPRESS_SECURE_AUTH_KEY、WORDPRESS_LOGGED_IN_KEY、WORDPRESS_
15
NONCE_KEY、WORDPRESS_AUTH_SALT、WORDPRESS_SECURE_AUTH_SALT、WORDPRESS_LOGGED_IN_SALT、
WORDPRESS_NONCE_SALT。这一系列环境变量用来配置WordPress的安全性，容器默认使用唯
16
一的随机SHA1值。我们使用默认值即可。
17
18
112 第10章 使用私有仓库
第 10 章
使用私有仓库
使用公有仓库，我们可以很方便地分享自己的镜像，也可以使用其他人分享的镜像。但是有
时候，公有仓库并不是很合适，比如某些镜像可能只是希望在内部用户间共享，这时可以搭建一
个私有的仓库服务器。前面已经简单介绍了私有镜像服务器，本章将通过案例来实际搭建一个本
地的仓库服务器。
10.1 使用 docker-registry
docker-registry是一个基于Python的开源项目，为我们提供了搭建私有镜像服务器的功能。我
们既可以在真正的主机上运行docker-registry，也可以在容器中运行它。官方仓库中已经提供了
docker-registry的镜像，本节将介绍这两种搭建方式。
1. 使用容器运行docker-registry
首先，使用docker run命令获取并运行官方的镜像：
$ sudo docker run -d -p 5000:5000 registry
通过上面的命令，我们的私有服务器就以默认参数运行了。我们也可以配合使用-e和-v参数
来改变服务器的运行参数。这里比较重要的有两个参数：一是配置文件的路径，二是仓库的路径。
下面简要介绍一下这两个参数。
 配置文件的路径。这通过类似下面的命令来改变：
$ sudo docker run -d -p 5000:5000 -v /home/share/registry-conf:/root/registry-conf -e
DOCKER_REGISTRY_CONFIG=/root/registry-conf/config.yml registry
在本地目录/home/share/registry-conf下存放着要使用的配置文件，通过-v参数把它映射到
容器的/root.registry-conf目录，使用-e用环境变量的方式指定/root/registry-conf/config.yml
为程序的配置文件。
 配置仓库路径。这通过类似下面的命令来改变：
$ sudo docker run -d -p 5000:5000 -v /opt/data/registry:/tmp/registry registry
10.1 使用docker-registry 113
官方镜像使用的仓库路径是/tmp/registry/，我们通过把本地路径映射到/tmp/registry/，可
1
以让服务器把镜像保存到我们自定义的路径下。
2. 在本地安装运行docker-registry 2
我们也可以让私有服务器运行在本地主机上，此时可以使用安装包或者源码安装。
3
对于Ubuntu或者CentOS用户，可以使用源直接安装。
 Ubuntu下的安装 4
在Ubuntu下安装docker-registry的具体步骤如下所示。
5
(1) 安装相关依赖库:
$ sudo apt-get install -y build-essential python-dev libevent-dev python-pip liblzma-dev 6
swig libssl-dev
(2) 安装相关Python模块:
7
sudo pip install gunicorn pyyaml flask flask-cors rsa
9
(3) 安装docker-registry:
sudo pip install docker-registry 8
 CentOS下的安装
10
在CentOS下安装docker-registry的具体步骤如下所示。
(1) 安装相关依赖库：
10
sudo yum install -y python-devel libevent-devel python-pip gcc xz-devel
11
(2) 安装相关Python模块：
sudo pip install gunicorn pyyaml flask flask-cors rsa gevent
13
(3) 安装docker-registry：
14
sudo python-pip install docker-registry
 使用源码安装
15
使用源码安装docker-registry的具体步骤如下所示。
(1) 安装相关的依赖库： 16
sudo apt-get install -y build-essential python-dev libevent-dev python-pip libssl-dev
liblzma-dev libffi-dev 17
18
114 第10章 使用私有仓库
(2) 从docker-registry项目下载源码：
git clone https://github.com/docker/docker-registry.git
默认情况下只有样例配置文件，正式的配置文件要我们自己生成。当然，我们也可以简单地
修改样例来生成配置：
cd docker-registry
cp config/config_sample.yml config/config.yaml
修改如下部分，配置仓库存储路径：
local: &local
<<: *common
storage: local
storage_path: _env:STORAGE_PATH:/tmp/registry
(3) 安装docker-registry：
sudo python setup.py install
通过源方式安装的docker-registry默认也没有配置，也要我们自己生成，按上面的来就好了。
配置文件的路径在/usr/local/lib/python2.7/dist-oackages/docker_registry/config/config.yaml。
3. 启动服务器
通过下面的命令，可以启动服务器：
sudo gunicorn --access-logfile /var/log/docker-registry/access.log --error-logfile
/var/log/docker-registry/server.log -k gevent --max-requests 100 --graceful-timeout 3600 -t 3600 -b
127.0.0.1:5000 -w 1 docker_registry.wsgi:application
用HTTP方式访问本地的5000端口，如果看到类似下面的输出，就说明服务器正常运行了：
$ curl 127.0.0.1:5000
"\"docker-registry server\""
可以看到，前面的命令有些长，每次输入一大串很不方便，这时可以通过服务脚本来管理私
有服务器。下面以Ubuntu为例进行介绍。
(1) 按下面的内容创建并编辑/etc/init/docker-registry.conf文件：
#sudo cat /etc/init/docker-registry.conf
description "Docker Registry"
start on runlevel [2345]
stop on runlevel [016]
respawn
respawn limit 10 5
script
sudo gunicorn --access-logfile /var/log/docker-registry/access.log --error-logfile
/var/log/docker-registry/server.log -k gevent --max-requests 100 --graceful-timeout 3600 -t 3600 -b
127.0.0.1:15000 -w 8 docker_registry.wsgi:application
10.2 用户认证 115
end script
1
#service docker-registry start
(2) 在命令行执行service docker-registry start，registry服务会在本地的15000端口监听。
2
10.2 用户认证
3
一般情况下，只有授权的用户才可以访问和使用我们的私有服务器。Docker Hub是通过注册
4
索引服务器（index）来实现的。由于index服务器还没有完善的开源实现，所以这里基于Nginx
代理的用户管理实现用户认证。
5
1. 安装并配置Nginx代理
上一节中，我们让registry服务监听127.0.0.1:15000端口，这样的话只有本机才能通过15000
6
端口访问到服务器，其他主机是无法访问的。
为了让其他主机访问服务器，我们可以使用Nginx代理，让Nginx开放对外的5000端口，当外 7
部的请求到达5000端口时，再由Nginx把请求转发到本地的15000端口。
9
首先，安装Nginx：
sudo apt-get install nginx
8
在/etc/nginx/sites-available/下创建站点配置文件docker-registry.conf，实现我们的代理目的。
10
下面为配置文件的具体内容：
upstream docker-registry {
10
server localhost:15000;
}
#代理服务器，监听5000端口
11
server {
listen 5000;
server_name private-registry-server.com;
proxy_set_header Host $http_host; 13
proxy_set_header X-Real_IP $remote_addr; #传递真实的客户端IP
client_max_body_size 0; #disable any limits to avoid HTTP 413 for large image uploads
chunked_transfer_encoding on; 14
location / {
#配置转发对于/的访问请求到registry服务
proxy_pass http://docker-registry; 15
}
location / {
#配置转发对于/的访问请求到registry服务 16
proxy_pass http://docker-registry;
}
location / {
17
#配置转发对于/的访问请求到registry服务
proxy_pass http://docker-registry;
} 18
}
116 第10章 使用私有仓库
上面的配置文件已经建好了，但是还没有生效，把它用软连接放到/etc/nginx/sites-enabled/目
录下，Nginx就可以启动代理了。最后，重启Nginx使配置生效：
sudo ln -s /etc/nginx/sites-available/docker-registry.conf
/etc/nginx/sites-enabled/docker-registry.conf
service nginx restart
通过访问本地的5000端口来测试代理服务是否生效，这里尝试上传一个本地镜像：
sudo docker tag ubuntu:14.04 127.0.0.1:5000/ubuntu:latest
sudo docker push 127.0.0.1:5000/ubuntu:latest
2. 添加用户认证功能
添加用户认证功能的具体步骤如下所示。
(1) 在前面的代理站点配置文件的相应部分添加下面粗体显示的代码：
...
location / {
#配置认证文件
auth_basic "Please Input username&password";
auth_basic_user_file docker-registry-htpasswd;
#配置转发对于/的访问请求到registry服务
proxy_pass http://docker-registry;
}
...
在上述代码中，auth_basic行告诉Nginx启用认证服务，auth_basic_user_file行则指定认证
信息存放的文件（在/etc/nginx/目录下）。