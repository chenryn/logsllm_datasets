title:Automatic security assessment of critical cyber-infrastructures
author:Zahid Anwar and
Ravinder Shankesi and
Roy H. Campbell
Automatic Security Assessment of Critical Cyber-Infrastructures ∗
Zahid Anwar, Ravinder Shankesi, Roy. H. Campbell
{anwar,rshanke2,rhc}@uiuc.edu
University of Illinois at Urbana-Champaign
Abstract
This research investigates the automation of security as-
sessment of the static and dynamic properties of cyberin-
frastructures, with emphasis on the electrical power grid.
We describe a network model representing the static ele-
ments of a cyberinfrastructure including devices, services,
network connectivity, vulnerabilities, and access controls.
The dynamic elements include workﬂow models of the op-
erating procedures, processes and the state of a working
power grid. We introduce a toolkit that with a little manual
assistance can automatically generate these models from
speciﬁcations, continuously update attributes from online
event aggregators, and perform security assessment. The
assessment reveals whether observed anomalies about the
system could indicate possible security problems and per-
mit dynamic ranking of alternative recovery procedures to
minimize the total risk. We motivate the use of the tool-chain
by showing an example scenario where the recovery proce-
dure recommended to minimize security risk depends on the
current state of system as well as the network topology.
1
Introduction
Computerized control systems, also referred to as Su-
pervisory Control and Data Acquisition (SCADA) systems,
have become vital in the modern world. SCADA is de-
ployed to control water supply, telecommunications as well
as electricity generation and distribution. In this paper we
focus on SCADA systems for the electrical power grid.
These systems typically use off-the-shelf computing and
networking components, for connecting to enterprise net-
works or the Internet, making them vulnerable to well-
known cyber attacks. Furthermore, knowledgeable and in-
side attackers can use the properties of the power grid and
its operating procedures to cause cascading failures, power
blackouts or damage difﬁcult to replace vital resources such
as high-power transformers. The security of SCADA sys-
tems made headlines [11] recently when researchers at the
∗This work was funded by the UIUC TCIP Project NSF CNS 05-24695.
Department of Energy’s Idaho lab launched an experimen-
tal cyber attack on an electrical power plant causing a gen-
erator to self-destruct. While the details of this particular
attack are not explained in depth, what is clear is that re-
searchers were able to remotely hack into the SCADA net-
work and change its conﬁguration to cause signiﬁcant dam-
age to the generator. A comprehensive report compiled by
the Industrial Security Incident Database (ISID) [1], shows
an alarming increase in the numbers of security attacks on
cyber infrastructures in recent years, with externally gen-
erated incidents accounting for 70% of all events between
2001 and 2003. The Slammer Worm inﬁltration of an Ohio
nuclear plant [7] and the Australian sewage spill incident
[20] in 2000 are two recent examples.
In the latter case
an attacker connected through a wireless network used to
control sensors for a sewage treatment plant in Queensland,
taking control of the main system to drain raw sewage into
many of the parks and lakes.
Throughout this paper we model SCADA and Enterprise
networks in predicate-logic (henceforth called a network
model) which consists of a set of devices, services, oper-
ating systems, network connections, known vulnerabilities
as well as their attributes. The network model is used to
generate attack graphs for various SCADA devices to deter-
mine vulnerability to external attackers. While evaluating
these attack graphs, we compute the security risk for each
device depending on both the severity of the isolated vul-
nerabilities of various nodes, on the path to that device, as
well as the topology of the paths. Our device security risk is
formalized as a lattice whose partial order function depends
on the type of vulnerability and the calculated severity of
the vulnerability (i.e., an execution control vulnerability is
rated higher than a denial of service vulnerability and the
severity of a vulnerability may be valued higher or lower
depending on its exploitability). The device security risk
calculated in the network model is used as an input for our
second model explained below.
The second model, called the workﬂow model, describes
the various operating procedures, as workﬂows encoded in
rewriting logic. Operational procedures are usually recov-
ery or maintenance activities that the operators follow in the
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:14:03 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 20081-4244-2398-9/08/$20.00 ©2008 IEEE366DSN 2008: Anwar et al.system, for instance, to recover from a failed component
or deal with some contingency. These recovery procedures
are made up of a ordered set of tasks that enable or dis-
able SCADA network devices (for instance, a task to allow
selection of a backup transformer from a list of idle trans-
formers in a substation). Tasks can be fulﬁlled in various
ways, allowing operators a choice of strategies to perform a
particular function. The security risk of a particular recov-
ery procedure is calculated by aggregating the risks derived
from all the vulnerabilities of each device used in the recov-
ery procedure as obtained from the network model. Finally,
the security model presents its evaluation of the possible
recovery procedure options to an operator along with their
security risks.
We have developed a tool-chain that semi-automates the
generation of the network and workﬂow models as well
keeps the attributes up-to-date using on-line SCADA event
aggregators. We demonstrate its feasibility to ﬁnd compli-
cated attacks on our SCADA test-bed that mimics a real
SCADA substation. We describe how our approach is scal-
able, although further automation is clearly possible.
The remainder of this paper is organized as follows: Sec-
tion 2 provides related work on existing SCADA security
models. Section 3 gives an overview of SCADA for Power
Systems and rewriting logic. Section 4 outlines the design
of our security model and Section 5 shows our implementa-
tion via a tool chain based on Prolog, Yet Another Workﬂow
Language(YAWL) [23] and Maude [5]. Section 6 shows
and evaluates a realistic workﬂow advisories scenario. We
conclude the paper in Section 7.
2 Related Work
Our research beneﬁts from related work on attack trees,
and quantization of security for large-scale safety critical
systems. One work on SCADA attack trees [4] describes
the application of attack trees to the common MODBUS
SCADA protocol with the goal of identifying security vul-
nerabilities inherent in the speciﬁcation and in typical de-
ployments. Another interesting use of SCADA attack trees
[22] evaluates security improvements based on countermea-
sure types and password policy enforcement on tree leaves.
An optimization problem is formulated to determine pivotal
leaves in the tree for security improvement.
Jajodia and Noel have used automated attack graph gen-
eration and processing techniques using vulnerability scan-
ning tools like Nessus [13] for aiding sensor placement for
monitoring attack paths to critical cyber assets [12]. Re-
searchers have also proposed various methodologies such
as compromise graphs [9] and Markov Chains [14] for ob-
taining a quantitative measurement of the risk reduction
achieved when a control system is modiﬁed with the intent
to improve cyber security defense.
The CORAS [3] project supports methodologies for risk
analysis of security-critical systems by modeling threats to
a system as unwanted features of the system in question.
Users model a system and its associated threats using UML
diagrams and XML schemas allowing exchange of risk as-
sessment data in a formalizied and standardized language.
We improve upon their idea of using UML by employ-
ing the standard descriptive language based on Common
Information Models (CIM) [8] to automate the generation
of our security models. CIM, an object-oriented cyber-
infrastructure modeling language developed by the Electric
Power Research Institute (EPRI) is better suited for model-
ing electrical utility enterprises.
While security assessment of large distributed systems
and the use of attack graphs models to ﬁnd network vulner-
abilities is a fairly mature area, we did not ﬁnd much work
in the automated generation of these models especially for
the cyber-infrastructures domain. Moreover there is little
work, if any, in using the security vulnerabilities calculated
for network elements as inputs to ﬁnding risks in operating
procedures and providing advisories.
3 Background
This paper does not assume that the reader has a power
engineering background and explains the key power terms
used throughout the paper in this section. It also includes
the threat model we consider for the power system in ques-
tion. Horn-clause logic and rewriting logic have been used
for the formal analysis and while we assume the reader is
reasonably familiar with the former we give a brief expla-
nation of the latter here as well.
3.1 A Power System
In a conventional electric power system, energy from
fossil fuels or falling water is harnessed to generate steam
to drive power turbines that produce electricity, which is
then transmitted and distributed to the end user. There are
a variety of SCADA controls used throughout the process
including controls for turbine, burner, and switching. Fo-
cusing on just the switching control; a typical power sys-
tem will have a large number of switches that affect the
way power is routed and distributed within various compo-
nents. These switches are often controlled remotely through
SCADA (but can also be turned on or off manually). Fig-
ure 1 shows how a power distribution system can be viewed
as a network of electric lines connected via switching de-
vices and fed via circuit-breakers. The supply of power
to consumer devices located on the lines is controlled by
the circuit-breakers which supply power if and only if (iff)
closed, and switching devices that stop power propagation
iff open. Mostly lines have a meshable structure exploited
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:14:03 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 20081-4244-2398-9/08/$20.00 ©2008 IEEE367DSN 2008: Anwar et al.radially and the positions of the devices are set so that the
paths taken by the power of each circuit-breaker form a tree
called a feeder. The root of a feeder is a circuit-breaker,
and its leaves are whatever switching devices downstream
happen to be open at the time.
• The equations in E are of the form
(∀X) u = v if C
where u, v are of the same sort and the (possibly
null) condition C is a conjunction of unquantiﬁed Σ-
equations involving variables (only) in X. We say the
Σ-algebra A satisﬁes the equation (∀X) u = v if C iff
for each assignment a : X → A, a(u) = a(v)
Figure 1. Power Distribution System
Power lines are often subject to faults (short circuits)
that are mainly due to bad weather conditions and lightning.
Upon occurrence of a fault, the circuit-breaker feeding the
faulty line opens in order to protect the rest of its feeder
from damaging overloads. For instance, if a fault occurs
on the line between DS1 and DS2, CB1 will open leaving
all consumers located on that feeder without power. Sim-
ply re-closing the circuit-breaker will not help but instead,
SCADA devices (called actuators) controlling the switches
need to be used to locate faulty lines and then reconﬁg-
ure the network to isolate them and restore the supply to
the non-faulty lines. Remote-controlled actuators sense and
change the position of switches and report sensing the pres-
ence of faults. Changing the status of switching devices in
a substation allows some interesting attack scenarios from
an intruder’s point of view. A denial of service attack on
the actuator or its controlling SCADA device such as a Pro-
grammable Logic Controller (PLC) or relay would lead to
a failure to report the proper state in time (and might re-
quire manual intervention). Even more seriously, a buffer-
overﬂow in a networked device (allowing execution privi-
leges) can allow an attacker to black-out a feeder or over-
load a transformer. The latter is a very serious attack as
transformers are expensive and hard to replace.
Rewrite rules are of the form 2
(∀X) u → v
i ui = vi
if (cid:86)
Intuitively, the theory (Σ, E) deﬁnes the states of the sys-
tem and has the initial model TΣ|E. The dynamics are de-
scribed by the rewrite rules R that specify concurrent tran-
sitions that can occur in the system and that can be applied
modulo the equations in E.
and describe a transition from the term t to term t(cid:48). To apply
the rewrite rule to the term t, we ﬁnd a subterm of t which
is an instance of u under some substitution σ. We substitute
u in t by v, only if all the conditions hold i.e., ∀i : σ(ui) =
σ(vi). Note that multiple rewrite rules may be applicable to
a given term.
Given a rewrite-theory (Σ, E, R) we can deﬁne the tran-
sition relation → over the states (given by the terms in the
algebra TΣ|E) by using the one-step rewrite rule in R. We
can label the transition system given by (TΣ|E,→) by us-
ing predicates deﬁned using equations P 3 that associate a
term in (Σ, E) to a proposition. Therefore, given a rewrite
theory, (and appropriate labeling) we can deﬁne the Kripke-
structure that describes the transition system. The extension
from a rewriting logic to the Kripke structures on which the
LTL model checking works is described in greater detail
in [6]. Therefore, given a system described using term-
rewriting logic, we can verify if it satisﬁes a given LTL
property by using LTL model checking.
Rewrite theories are executable (under reasonable as-
sumptions over E, R).
In this work, we use Maude [6]
to implement our workﬂow model. Maude supports LTL
model checking by using an on-the-ﬂy model checker.
3.2 Rewriting Logic
4 Security Model
We specify the operating procedures as workﬂows in
rewriting logic. In general, a concurrent system can be spec-
iﬁed in rewriting logic [10] as the theory R = (Σ, E, R)
where (Σ, E) is the order-sorted equational theory such
that:
• The signature Σ speciﬁes the sorts1, a sub-sort rela-
tion, constants and function symbols. The terms TΣ
and TΣ(X) denote,the terms the set of ground Σ-terms
and the set of Σ-terms over variables in X.
1A sort can be informally thought of as the type of a term.
Our formal model is composed of two parts. A network
model captures the static parts of a SCADA system com-
prising the network topology, devices, services, connectiv-
ity and vulnerabilities (known software exploits). A work-
ﬂow model captures the dynamic parts such as maintenance,
recovery activities involved and their ordering and relation-
ships.
but we describe a simpler notation adequate for this paper.
2Note that, in general, rewrite rules can be slightly more complicated,
3We require that (Σ, E ∪ P ) be a protecting extension of (Σ, E).
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:14:03 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 20081-4244-2398-9/08/$20.00 ©2008 IEEE368DSN 2008: Anwar et al.4.1 Network Model, N
The network model N represents the SCADA network
as two types of graphs: a dependency graph G and logi-
cal attack graphs G(cid:48). The dependency graph is given as
G = (D, E), where D is the set of all devices and E ⊆
D×D is the set of edges between two physically connected
devices. A set of functions gives the mapping between de-
vices and their attributes such as services, privilege levels
and vulnerabilities (for further details on how we formalize
network dependencies see [2]).
G is modeled as primitive facts in ﬁrst order predicate
logic. The security risk of a device is dependent upon an at-
tacker’s ability to exploit a vulnerability V on that device or
on a device from which it is reachable. Attack graphs are a
well known technique [16, 15, 19] that represents a chain of
exploits as a path, where each exploit in the chain lays the