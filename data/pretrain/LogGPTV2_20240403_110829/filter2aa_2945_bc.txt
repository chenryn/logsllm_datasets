Name: Francesca, Age: 23
This is all very satisfactory and works well. Next, you decide that you
want to update the age of the youngest family member (Francesca has just
had her birthday and is now 24), so you write the following statement:
Download from finelybook PI:EMAIL
388
mostYouthful.Age++;
Finally, to confirm that everything has been changed correctly, you use
the following statements to iterate through the family array and display its
contents:
Click here to view code image
foreach (Person familyMember in family)
{
    Console.WriteLine($"Name: {familyMember.Name}, Age:
{familyMember.Age}");
}
You are pleased to observe that the results are correct, and Francesca’s
age has been modified:
Click here to view code image
Name: John, Age: 53
Name: Diana, Age: 53
Name: James, Age: 26
Name: Francesca, Age: 24
At this point, you have a rethink about the Person class and decide it
should really be a struct, so you change it:
Click here to view code image
struct Person
{
    public string Name;
    public int Age;
    public Person(string name, int age)
    {
        this.Name = name;
        this.Age = age;
    }
}
Your code compiles and runs, but you notice that Francesca’s age is no
longer being updated; the output of the foreach loop looks like this:
Click here to view code image
Name: John, Age: 53
Name: Diana, Age: 53
Name: James, Age: 26
Name: Francesca, Age: 23
Download from finelybook PI:EMAIL
389
The issue is that you have converted a reference type into a value type.
The data in the family array has changed from being a set of references to
objects on the heap to copies of data on the stack. The value returned by the
findYoungest method was originally a reference to a Person object, and the
increment operation on the Age field made through that reference updated the
original object on the heap. Now the family array contains value types, and
the value returned by the findYoungest method is a copy of the item in the
array rather than a reference. So, when the increment operation is performed
on the Age field, this operation updates a copy of the Person and not the item
stored in the family array.
To handle this situation, you can amend the findYoungest method to
explicitly return a reference to the value type rather than a copy. You can
achieve this by using the ref keyword, as follows:
Click here to view code image
ref Person findYoungest()
{
    int youngest = 0;
    for (int i = 1; i < family.Length; i++)
    {
        if (family[i].Age < family[youngest].Age)
        {
            youngest = i;
        }
    }
    return ref family[youngest];
}
Note that most of the code is unchanged. The return type of the method
has changed to ref Person (a reference to a Person), and the return statement
similarly states that it passes back a reference to the youngest item in the
family array.
When you call the method, you must make a couple of corresponding
changes:
Click here to view code image
ref var mostYouthful = ref findYoungest();
These modifications indicate that mostYouthful is a reference to an item in
the family array. You access the fields in this item in the same way as before;
the C# compiler knows that it should dereference that the data through the
Download from finelybook PI:EMAIL
390
variable. The result is that the increment statement below updates the data in
the array rather than a copy:
mostYouthful.Age++;
When you print out the contents of the array, Francesca’s age has
changed:
Click here to view code image
foreach (Person familyMember in family)
{
    Console.WriteLine($"Name: {familyMember.Name}, Age:
{familyMember.Age}");
}
Name: John, Age: 53
Name: Diana, Age: 53
Name: James, Age: 26
Name: Francesca, Age: 24
Returning reference data from a method in this way is a powerful
technique, but you must treat it with care. You can only return a reference to
data that still exists when the method has finished, such as an element in an
array. For example, you cannot return a reference to a local variable created
on the stack by the method:
Click here to view code image
// Don't try this; it won't compile  
ref int danglingReference()
{
    int i;
    ... // Calculate a value using i
    return ref i;
}
This was a common problem in older C programs, known as a “dangling
reference.” Fortunately, the C# compiler prevents you from committing
errors such as this!
Summary
In this chapter, you learned how to create and use arrays to manipulate sets of
data. You saw how to declare and initialize arrays, access data held in arrays,
Download from finelybook PI:EMAIL
391
pass arrays as parameters to methods, and return arrays from methods. You
also learned how to create multidimensional arrays and how to use arrays of
arrays.
If you want to continue to the next chapter, keep Visual Studio 2017
running and turn to  Chapter 11.
If you want to exit Visual Studio 2017 now, on the File menu, click
Exit. If you see a Save dialog box, click Yes and save the project.
Quick reference
To
Do this
Declare an array
variable
Write the name of the element type, followed by square
brackets, followed by the name of the variable, followed
by a semicolon. For example:
bool[] flags;
Create an
instance of an
array
Write the keyword new, followed by the name of the
element type, followed by the size of the array enclosed
in square brackets. For example:
bool[] flags = new bool[10];
Initialize the
elements of an
array to specific
values
For an array, write the specific values in a comma-
separated list enclosed in braces. For example:
Click here to view code image
bool[] flags = { true, false, true, false };
Find the number
of elements in an
array
Use the Length property. For example:
Click here to view code image
bool[] flags = ...;
...
int noOfElements = flags.Length;
Access a single
array element
Write the name of the array variable, followed by the
integer index of the element enclosed in square brackets.
Remember, array indexing starts at 0, not 1. For
Download from finelybook PI:EMAIL
392
example:
bool initialElement = flags[0];
Iterate through
the elements of
an array
Use a for statement or a foreach statement. For example:
Click here to view code image
bool[] flags = { true, false, true, false };
for (int i = 0; i < flags.Length; i++)
{
    Console.WriteLine(flags[i]);
}
foreach (bool flag in flags)
{
    Console.WriteLine(flag);
}
Declare a
multidimensional
array variable
Write the name of the element type, followed by a set of
square brackets with a comma separator indicating the
number of dimensions, followed by the name of the
variable, followed by a semicolon. For example, use the
following to create a two-dimensional array called table
and initialize it to hold 4 rows of 6 columns:
Click here to view code image
int[,] table;
table = new int[4,6];
Declare a jagged
array variable
Declare the variable as an array of child arrays. You can
initialize each child array to have a different length. For
example, use the following to create a jagged array
called items and initialize each child array:
Click here to view code image
int[][] items;
items = new int[4][];
items[0] = new int[3];
items[1] = new int[10];
items[2] = new int[40];
items[3] = new int[25];
Download from finelybook PI:EMAIL
393
CHAPTER 11
Understanding parameter arrays
After completing this chapter, you will be able to:
Write a method that can accept any number of arguments by using the
params keyword.
Write a method that can accept any number of arguments of any type
by using the params keyword in combination with the object type.
Explain the differences between methods that take parameter arrays
and methods that take optional parameters.
Parameter arrays are useful if you want to write methods that can take any
number of arguments, possibly of different types, as parameters. If you are
familiar with object-oriented concepts, you might be grinding your teeth in
frustration at the previous sentence. After all, the object-oriented approach to
solving this problem is to define overloaded methods. However, overloading
is not always the most suitable approach, especially if you need to create a
method that can take a truly variable number of parameters, each of which
might vary in type whenever the method is invoked. This chapter describes
how you can use parameter arrays to address situations such as this.
Overloading—a recap
Overloading is the technical term for declaring two or more methods with the
same name in the same scope. Overloading a method is very useful for cases
in which you want to perform the same action on arguments of different
Download from finelybook PI:EMAIL
394
types. The classic example of overloading in Microsoft Visual C# is the
Console.WriteLine method. This method is overloaded numerous times so
that you can pass any primitive type argument. The following code example
illustrates some of the ways in which the WriteLine method is defined in the
Console class:
Click here to view code image
class Console
{
      public static void WriteLine(Int32 value)
      public static void WriteLine(Double value)
      public static void WriteLine(Decimal value)
      public static void WriteLine(Boolean value)
      public static void WriteLine(String value)
      ...
}
Note The documentation for the WriteLine method uses the structure
types defined in the System namespace for its parameters rather than the
C# aliases for these types. For example, the overload that prints out the
value for an int actually takes an Int32 as the parameter. Refer to
Chapter 9, “Creating value types with enumerations and structures,” for
a list of the structure types and their mappings to C# aliases for these
types.
As useful as overloading is, it doesn’t cover every case. In particular,
overloading doesn’t easily handle a situation in which the type of parameters
doesn’t vary, but the number of parameters does. For example, what if you
want to write many values to the console? Do you have to provide versions of
Console.WriteLine that can take two parameters of various combinations,
other versions that can take three parameters, and so on? That would quickly
become tedious. And wouldn’t the massive duplication of these overloaded
methods worry you? It should. Fortunately, there is a way to write a method
that takes a variable number of arguments (a variadic method): you can use a
parameter array, which is declared by using the params keyword.
Download from finelybook PI:EMAIL
395
To understand how params arrays solve this problem, it helps first to
understand the uses and shortcomings of ordinary arrays.
Using array arguments
Suppose that you want to write a method to determine the minimum value in
a set of values passed as parameters. One way is to use an array. For
example, to find the smallest of several int values, you could write a static
method named Min with a single parameter representing an array of int
values:
Click here to view code image
class Util
{
    public static int Min(int[] paramList)
    {
        // Verify that the caller has provided at least one
parameter.
        // If not, throw an ArgumentException exception – it is not
possible
        // to find the smallest value in an empty list.
        if (paramList == null || paramList.Length == 0)
        {
            throw new ArgumentException("Util.Min: not enough
arguments");
        }
        // Set the current minimum value found in the list of
parameters to the first item
        int currentMin = paramList[0];
        // Iterate through the list of parameters, searching to see
whether any of them
        // are smaller than the value held in currentMin
        foreach (int i in paramList)
        {
            // If the loop finds an item that is smaller than the
value held in
            // currentMin, then set currentMin to this value
            if (i < currentMin)
            {
                currentMin = i;
            }
        }
        // At the end of the loop, currentMin holds the value of the
smallest
Download from finelybook PI:EMAIL
396
        // item in the list of parameters, so return this value.
        return currentMin;
    }
}
Note The ArgumentException class is specifically designed to be
thrown by a method if the arguments supplied do not meet the
requirements of the method.
To use the Min method to find the minimum of two int variables named
first and second, you can write this:
Click here to view code image
int[] array = new int[2];
array[0] = first;
array[1] = second;
int min = Util.Min(array);
And to use the Min method to find the minimum of three int variables
(named first, second, and third), you can write this:
Click here to view code image
int[] array = new int[3];
array[0] = first;
array[1] = second;
array[2] = third;
int min = Util.Min(array);
You can see that this solution avoids the need for a large number of
overloads, but it does so at a price: you have to write additional code to
populate the array that you pass in. You can, of course, use an anonymous
array if you prefer, like this:
Click here to view code image
int min = Util.Min(new int[] {first, second, third});
However, the point is that you still need to create and populate an array,
and the syntax can get a little confusing. The solution is to get the compiler to
write some of this code for you by using a params array as the parameter to
Download from finelybook PI:EMAIL
397
the Min method.
Declaring a params array
Using a params array, you can pass a variable number of arguments to a
method. You indicate a params array by using the params keyword as an
array parameter modifier when you define the method parameters. For
example, here’s Min again—this time with its array parameter declared as a
params array:
Click here to view code image
class Util
{
     public static int Min(params int[] paramList)
     {
         // code exactly as before
     }
}
The effect of the params keyword on the Min method is that it allows you
to call the method by using any number of integer arguments without
worrying about creating an array. For example, to find the minimum of two
integer values, you can simply write this:
int min = Util.Min(first, second);
The compiler translates this call into code similar to this:
Click here to view code image
int[] array = new int[2];
array[0] = first;
array[1] = second;
int min = Util.Min(array);
To find the minimum of three integer values, you write the code shown
here, which is also converted by the compiler to the corresponding code that
uses an array:
Click here to view code image
int min = Util.Min(first, second, third);
Both calls to Min (one call with two arguments and the other with three
arguments) resolve to the same Min method with the params keyword. And,
Download from finelybook PI:EMAIL
398
as you can probably guess, you can call this Min method with any number of
int arguments. The compiler just counts the number of int arguments, creates
an int array of that size, fills the array with the arguments, and then calls the
method by passing the single array parameter.
Note If you’re a C or C++ programmer, you might recognize params as
a type-safe equivalent of the varargs macros from the header file
stdarg.h. Java also has a varargs facility that operates similarly to the
params keyword in C#.
There are several points worth noting about params arrays:
You can’t use the params keyword with multidimensional arrays. The
code in the following example will not compile:
Click here to view code image
// compile-time error
public static int Min(params int[,] table)
...
You can’t overload a method based solely on the params keyword. The
params keyword does not form part of a method’s signature, as shown
in this example. Here, the compiler would not be able to distinguish
between these methods in code that calls them:
Click here to view code image
// compile-time error: duplicate declaration
public static int Min(int[] paramList)
...
public static int Min(params int[] paramList)
...
You’re not allowed to specify the ref or out modifier with params
arrays, as shown in this example:
Click here to view code image
// compile-time errors
public static int Min(ref params int[] paramList)
Download from finelybook PI:EMAIL
399
...
public static int Min(out params int[] paramList)
...
A params array must be the last parameter. (This means that you can
have only one params array per method.) Consider this example:
Click here to view code image
// compile-time error
public static int Min(params int[] paramList, int i)
...
A non-params method always takes priority over a params method.
This means that you can still create an overloaded version of a method
for the common cases, such as in the following example:
Click here to view code image
public static int Min(int leftHandSide, int rightHandSide)
...
public static int Min(params int[] paramList)
...