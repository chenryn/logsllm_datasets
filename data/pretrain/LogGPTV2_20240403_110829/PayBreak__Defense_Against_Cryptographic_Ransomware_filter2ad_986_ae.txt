If this attack were to occur unno-
ticed, recall that getting infected with ransomware is a rare
circumstance and identifying the correct key and encryption
oﬀset is embarrassingly parallel. As such, even with a large
vault (a 1TB vault can hold roughly 17 billion entries), re-
covery would only be delayed, but not prevented.
7. RELATED WORK
Decades ago (in 1996) Young and Yung were the (cid:12)rst
to introduce the concept of a cryptovirus [46, 47]. Their
description is a perfect blueprint of today’s most eﬀective
crypto-based ransomware families that leverage hybrid en-
cryption to blackmail users into paying ransom for regain-
ing access to their data. The only diﬀerence between the
proposed cryptovirus and modern ransomware is that the
Internet made it trivial for malware authors to generate an
individual asymmetric key pair for each infected victim and
communicate the public key to the malware via a command
and control channel. In 2005, the same authors presented a
proof-of-concept implementation of their cryptovirus, using
the Microsoft Cryptographic API [48]. As possible mitiga-
tions against this attack they proposed to restrict access to
the cryptographic API, by for example only allowing en-
cryption with keys that come from a trusted certi(cid:12)cate. As
the authors’ call to control access to cryptographic tools was
ignored, it comes at no surprise that malware authors lever-
aged cryptography for their malign purposes.
In 2010, Gazet studied three early families of ransomware,
highlighting how this threat was not mature for mass extor-
tion at the time [29]. In 2015, Kharraz et al. [34] presented
a longitudinal study of 1,359 ransomware samples collected
between 2006 and 2014. While their study included four
families that encrypt user data, the majority of the ana-
lyzed families were either deleting (cid:12)les or ex(cid:12)ltrating infor-
mation. Furthermore, the paper presents measurements of
I/O characteristics of ransomware samples and states that
these characteristics are suﬃcient for a monitoring mecha-
nism to distinguish ransomware from benign applications.
However, the paper does not evaluate such a mechanism.
In follow up work, Kharraz et al. [33] implemented and
evaluated the proposed mechanism as an oﬄine malware
analysis system and found it to have a 96.3% accuracy in de-
tecting ransomware. However, the monitoring mechanism is
inherently reactive. That is, repeated (cid:12)le operations leading
to frequent I/O could indicate that ransomware is actively
attacking the system. Scaife et al. [18] built upon this mech-
anism as well, and produced an early-warning detection sys-
tem. They evaluated their system against 14 ransomware
families. By detecting (cid:12)le system changes characteristic
of ransomware they were able to detect 100% of the ran-
somware families, however, detection only happened after a
median loss of 10 (cid:12)les before detection. They additionally
tested their system for false-positives against 30 benign ap-
plications, of which only 1 produced a false-positive. Using
similar insights, Continella et al [25] developed ShieldFS,
a driver that pro(cid:12)les the typical activity of a Windows sys-
tem and can identify anomalous I/O activity generated by
ransowmare, allowing the system to roll back the malicious
changes. ShieldFS was developed concurrently and inde-
pendently of PayBreak.
A framework to promote awareness and to educate indi-
viduals about the ransomware threat was proposed by Luo
et al. as a proactive prevention solution [36]. Although
teaching users how to safely and securely access the Inter-
net can decrease the likelihood of a ransomware infection
through spam and drive-by downloads, it does not elimi-
nate the threat. As we have seen with the SamSam family
(x5.2), ransomware now has worm capabilities to self propa-
gate and infect vulnerable machines. In the case of zero-day
vulnerabilities, no amount of education will protect a user.
Previous work has investigated methods to identify cryp-
tographic functions within a binary. Calvet et al. devel-
oped a technique to achieve this within obfuscated programs
and evaluated the system on known malware samples [24].
Although their technique could be a valuable asset for re-
searchers to identify ransomware’s encryption functions, the
poor performance makes it impractical to include in an on-
line defense. Furthermore, Caballero et al. [22] and Wang
et al. [45] developed approaches to obtain plain text from
encrypted communications.
Of the previously discussed work, PayBreak is the only
solution providing an online protection scheme against ran-
somware, allowing a victim to fully recover their ransomed
(cid:12)les. The negligible performance overhead proves our de-
fense to be a practical solution.
8. CONCLUSION
PayBreak is a novel protection mechanism that defeats
the threat of crypto-based ransomware. Early ransomware
families failed because of their incorrect use of cryptographic
functionality. Successful families switched to using the cor-
rect cryptographic approach { hybrid encryption. We iden-
tify that the symmetric session keys have to be used on the
victim’s host to perform (cid:12)le encryption. Thus, PayBreak
implements a key escrow mechanism that stores session keys
in a key vault. Keys in the vault are encrypted with the
user’s public key and thus, only the user’s private key can
unlock the vault. As opposed to government-mandated key
escrow systems, PayBreak ensures that only the legitimate
user has access to the keys held in escrow. We evaluated
PayBreak on 107 ransomware samples and demonstrate
that PayBreak can successfully recover from the damage
caused by twelve diﬀerent ransomware families. Further-
more, the runtime overhead of PayBreak is far below the
human perception threshold and thus allows the use of Pay-
Break on production systems. Lastly, PayBreak will be
released as a publicly available open source project.
Acknowledgements
We would like to thank the anonymous reviewers for their
insightful comments and our shepherd Guofei Gu for help-
ing us improve the quality of this manuscript. This paper
was supported by an EPRSC-funder Future Leaders in Engi-
neering and Physical Sciences Award, by the EPSRC under
grant EP/N008448/1, and by the Oﬃce of Naval Research
under grant N00014-15-1-2948. Any opinions, (cid:12)ndings and
conclusions or recommendations expressed in this material
are those of the authors and do not necessarily re(cid:13)ect those
of the sponsor.
9. REFERENCES
[1] Alma ransomware: Analysis of a new ransomware threat
(and a decrypter!).
https://info:phishlabs:com/blog/alma-ransomware-
analysis-of-a-new-ransomware-threat-and-a-decrypter.
[2] Cryptowall, teslacrypt and locky: A statistical perspective.
http://blog:fortinet:com/post/cryptowall-teslacrypt-and-
locky-a-statistical-perspective.
[3] Cybercriminals rake in $325m from cryptowall ransomware:
report. http://www:washingtontimes:com/news/2015/nov/
2/cybercriminals-rake-in-325m-cryptowall-ransomware/.
[4] Downloading and using the trend micro ransomware (cid:12)le
decryptor.
https://success:trendmicro:com/solution/1114221.
[5] Dxxd ransomware decrypter.
[29] A. Gazet. Comparative analysis of various ransomware
https://github:com/eugenekolo/dxxd-decrypter.
virii. Computer virology.
[6] Fbi suggests ransomware victims to pay ransom money.
http://thehackernews:com/2015/10/fbi-ransomware-
malware:html.
[7] Ida f.l.i.r.t. https://hex-rays:com/products/ida/tech/(cid:13)irt/.
[8] Kaspersky announces ’death’ of coinvault, bitcryptor
ransomware.
http://www:theregister:co:uk/2015/11/02/kaspersky
announces death of coinvault bitcryptor ransomware/.
[9] Pokemongo ransomware comes with some clever tricks.
https://blog:malwarebytes:com/threat-analysis/2016/08/
pokemongo-ransomware-comes-with-some-clever-tricks/.
[10] Ransomware.
http://www:trendmicro:com/vinfo/us/security/de(cid:12)nition/
ransomware#List of Known Ransomware Families.
[11] Remove PI:EMAIL ransomware.
http://www:virusresearch:org/remove-gerkamanaol-com-
ransomware/.
[12] Researchers break encryption of marsjoke ransomware.
http://www:securityweek:com/researchers-break-
encryption-marsjoke-ransomware.
[13] The story of yet another ransom-fail-ware.
http://esec-lab:sogeti:com/posts/2016/06/07/the-story-of-
yet-another-ransomfailware:html.
[14] Themida. http://www:oreans:com/themida:php.
[15] This weird ransomware strain spreads like a virus in the
cloud. https://blog:knowbe4:com/new-virlock-ransomware-
strain-spreads-stealthily-via-cloud-storage.
[16] Threat spotlight: Teslacrypt { decrypt it yourself.
http://blogs:cisco:com/security/talos/teslacrypt.
[17] Zynamics bindiﬀ. https://www:zynamics:com/bindiﬀ:html.
[18] Cryptolock (and drop it): Stopping ransomware attacks on
user data. In IEEE 36th International Conference on
Distributed Computing Systems, 2016.
[19] J. Berdajs and Z. Bosni(cid:19)c. Extending applications using an
advanced approach to dll injection and api hooking.
volume 40, pages 567{584. John Wiley & Sons, Ltd.
[20] M. Bourquin, A. King, and E. Robbins. Binslayer:
Accurate comparison of binary executables. In Proceedings
of the 2Nd ACM SIGPLAN Program Protection and
Reverse Engineering Workshop, PPREW ’13.
[21] J. Caballero, C. Grier, C. Kreibich, and V. Paxson.
Measuring pay-per-install: The commoditization of
malware distribution. In Usenix security symposium, 2011.
[22] J. Caballero, P. Poosankam, C. Kreibich, and D. Song.
Dispatcher: Enabling active botnet in(cid:12)ltration using
automatic protocol reverse-engineering. In ACM conference
on Computer and communications security (CCS), 2009.
[23] J. Callas, L. Donnerhacke, H. Finney, and R. Thayer.
RFC2440: OpenPGP Message Format, 1998.
[24] J. Calvet, J. M. Fernandez, and J.-Y. Marion. Aligot:
cryptographic function identi(cid:12)cation in obfuscated binary
programs. In Proceedings of the 2012 ACM conference on
Computer and communications security. ACM, 2012.
[25] A. Continella, A. Guagnelli, G. Zingaro, G. De Pasquale,
A. Barenghi, S. Zanero, and F. Maggi. Shieldfs: a
self-healing, ransomware-aware (cid:12)lesystem. In Annual
Computer Security Applications Conference (ACSAC),
2016.
[26] Darren Pauli. Cryptowall 4.0: Update makes world’s worst
ransomware worse still - The Register.
http://www:theregister:co:uk/2015/11/09/cryptowall 40/.
[27] M. Egele, M. Woo, P. Chapman, and D. Brumley. Blanket
execution: Dynamic similarity testing for program binaries
and components. In 23rd USENIX Security Symposium
(USENIX Security 14), 2014.
[28] S. Gar(cid:12)nkel, P. Farrell, V. Roussev, and G. Dinolt.
Bringing science to digital forensics with standardized
forensic corpora, 2009.
[30] C. Grier, L. Ballard, J. Caballero, N. Chachra, C. J.
Dietrich, K. Levchenko, P. Mavrommatis, D. McCoy,
A. Nappa, A. Pitsillidis, et al. Manufacturing compromise:
the emergence of exploit-as-a-service. In ACM conference
on Computer and Communications Security (CCS), 2012.
[31] F. Gr(cid:127)obert, C. Willems, and T. Holz. Automated
identi(cid:12)cation of cryptographic primitives in binary
programs. In RAID, volume 6961, pages 41{60, 2011.
[32] High-Tech Bridge Security Research. RansomWeb:
emerging website threat that may outshine DDoS, data
theft and defacements? https://www:htbridge:com/blog/
ransomweb emerging website threat:html.
[33] A. Kharraz, S. Arshad, C. Mulliner, W. Robertson, and
E. Kirda. Unveil: A large-scale, automated approach to
detecting ransomware. In 25th USENIX Security
Symposium (USENIX Security 16), Austin, TX, Aug. 2016.
USENIX Association.
[34] A. Kharraz, W. Robertson, D. Balzarotti, L. Bilge, and
E. Kirda. Cutting the Gordian Knot: A Look Under the
Hood of Ransomware Attacks. In Proceedings of the
International Conference on Detection of Intrusions and
Malware, and Vulnerability Assessment (DIMVA), volume
9148 of Lecture Notes in Computer Science, Milan, Italy,
July 2015. Springer International Publishing.
[35] P. Lestringant, F. Guih(cid:19)ery, and P.-A. Fouque. Automated
identi(cid:12)cation of cryptographic primitives in binary code
with data (cid:13)ow graph isomorphism. In Proceedings of the
10th ACM Symposium on Information, Computer and
Communications Security, ASIA CCS ’15, 2015.
[36] X. Luo and Q. Liao. Awareness education as the key to
ransomware prevention. Information Systems Security,
2007.
[37] R. B. Miller. Response time in man-computer
conversational transactions. In Proceedings of the December
9-11, 1968, fall joint computer conference, part I, pages
267{277. ACM, 1968.
[38] D. Nazarov and O. Emelyanova. Blackmailer: The story of
gpcode. https://securelist:com/analysis/publications/
36089/blackmailer-the-story-of-gpcode/.
[39] B. Ramsdell. RFC3851: Secure/Multipurpose Internet Mail
Extensions (S/MIME) Version 3.1 Message Speci(cid:12)cation,
2004.
[40] G. Saito and G. Stringhini. Master of puppets: Analyzing
and attacking a botnet for fun and pro(cid:12)t. arXiv preprint
arXiv:1511.06090, 2015.
[41] K. Savage, P. Coogan, and H. Lau. The evolution of
ransomware. http://www:symantec:com/content/en/us/
enterprise/media/security response/whitepapers/the-
evolution-of-ransomware:pdf.
[42] B. Schneier. Memo to the Amateur Cipher Designer.
[43] M. I. Sharif, A. Lanzi, J. T. Giﬃn, and W. Lee. Impeding
Malware Analysis Using Conditional Code Obfuscation. In
Proceedings of Network and Distributed Systems Security
Symposium (NDSS), San Diego, CA, Feb. 2008. Internet
Society. bibtex:sharif:conditional-code-obfuscation.
[44] L. Sun. Reform: A framework for malware packer analysis
using information theory and statistical methods, 2010.
[45] Z. Wang, X. Jiang, W. Cui, X. Wang, and M. Grace.
Reformat: Automatic reverse engineering of encrypted
messages. In Computer Security{ESORICS 2009, pages
200{215. Springer, 2009.
[46] A. Young and M. Yung. Cryptovirology: Extortion-based
security threats and countermeasures. In IEEE Symposium
on Security and Privacy, Oakland, CA, May 1996.
[47] A. Young and M. Yung. Malicious cryptography: Exposing
cryptovirology. John Wiley & Sons, 2004.
[48] A. L. Young and M. M. Yung. An implementation of
cryptoviral extortion using microsoft’s crypto api. 2005.
APPENDIX
A. RANSOMWARE PSEUDOCODE
c2 = ConnectToCommandAndControl();
// Private key kept secret on C2
pubkey = c2.ReceivePubKey();
hPubkey = CryptImport(pubkey);
hCsp = CryptAcquireContext();
while (filename = FindNextFile()) {
// Read
ptFile = ReadFile(filename);
// Generate random session key per file
hSymkey = CryptGenKey(hCsp);
// Then encrypt
ctFile = CryptEncrypt(hSymkey, ptFile);
keyblob = CryptExportKey(hPubkey, hSymkey);
DeleteFile(filename);
// Write encrypted session key
WriteFile(filename, keyblob);
// Append the encrypted file
AppendFile(filename, ctFile);
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19