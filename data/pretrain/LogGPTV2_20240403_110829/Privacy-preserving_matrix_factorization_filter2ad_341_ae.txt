operations), while the remaining 1/3 is due to sorting op-
erations. As both operations are highly parallelizable, this
illustrates that the execution time can be signiﬁcantly re-
duced through parallelization.
Similarly, Figure 6 plots the amount of bytes communi-
cated between the CSP and RecSys for garbling and evalu-
ating a single iteration. The plot shows the same properties
as the execution time, namely that the size scales almost
linearly with the number of ratings and that the majority of
the circuit is devoted to gradient computations. In all imple-
mentations, copy and update operations did not contribute
more that 0.4% of the gates in the circuit.
As an example for the time and communication perfor-
mance for a real dataset, we limited our MovieLens dataset
to the 40 most popular movies. This corresponds to 14683
ratings generated by 940 users. One iteration of gradient
descent with parameters set to achieve error of 10−4 took
2.9hr. These experiments were performed on a machine with
16 cores; real-life systems use much more powerful hard-
ware (e.g., hundreds of Amazon EC2 servers). Moreover,
operations are highly parallelizable. As such, with access
to industry-level equipment this timing can be brought to
the realm of practicality, especially given that recommender
systems run matrix factorization on, e.g., a weekly basis.
7. RELATED WORK
Secure multiparty computation (MPC) was initially pro-
posed by Yao [62, 63]. There are presently many frameworks
that implement Yao garbled circuits [45, 23, 24, 44, 53, 25,
36]. A diﬀerent approach to general purpose MPC is based
on secret-sharing schemes and another is based on fully-
homomorphic encryption (FHE). Secret-sharing schemes have
been proposed for a variety of linear algebra operations,
such as solving a linear system [51], linear regression [29,
30, 21], and auctions [10]. Secret-sharing requires at least
three non-colluding online authorities that equally share the
workload of the computation, and communicate over mul-
tiple rounds; the computation is secure as long as no two
of them collude. Garbled circuits assumes only two non-
colluding authorities and far less communication which is
better suited to the scenario where the RecSys is a cloud
service and the CSP is implemented in a trusted hardware
component. Non-linear computation through fully homo-
morphic encryption [16] may be used to reduce the workload
on the CSP compared to garbled circuits, but current FHE
schemes [39, 20] for simpler algebraic computations are not
as eﬃcient as garbled circuit approaches [50].
Centralized garbled-circuit computation of a function over
a large number of individual inputs was introduced by Naor
et al. in the context of auctions [48]. Our approach is clos-
est to the privacy-preserving regression computation in [50],
though implementing matrix factorization eﬃciently as a
circuit introduces challenges not present in regression. Be-
yond [50], hybrid approaches combining garbled circuits with
other methods (such as HE or secret-sharing) have been used
for, e.g., face and ﬁngerprints recognition [57, 26], and learn-
ing a decision tree [41]; such discrete function evaluations
diﬀer considerably from matrix factorization.
Irrespective of the cryptographic primitive used, the main
challenge in building an eﬃcient algorithm for secure mul-
tiparty computation is in implementing the algorithm in a
data-oblivious fashion, i.e., so that the execution path does
not depend on the input.
In general, any RAM program
executable in bounded time T can be converted to a O(T 3)
Turing machine [8], and any bounded T -time TM can be
converted to a circuit of size O(T log T ) [54], which is data-
oblivious. This results in a O(T 3 log T ) complexity, which is
prohibitive in most applications. A survey of algorithms for
which eﬃcient data-oblivious implementations are unknown
can be found in [11]: matrix factorization broadly falls into
the category of Data Mining summarization problems.
Sorting networks were originally developed to enable sort-
ing parallelization as well as an eﬃcient hardware implemen-
tation. Several recent works exploit the data-obliviousness
of sorting networks for cryptographic purposes which, in
turn, has lead to renewed interest in oblivious sorting proto-
cols beyond sorting networks (e.g., [18, 22]). There are many
recent data-oblivious algorithms using sorting as a building
5101520253010−1010−5100Number of bits for the fractional partRelative error  10 iterations8 iterations6 iterations4 iterations2 iterations128256512102420484096010002000300040005000Number of tuples: |S|Execution time (s)  Sort i −> jSort j −> iGradient12825651210242048409601234x 104Number of tuples: |S|Communication (MB)  Sort i −> jSort j −> iGradient809block, including compaction and selection [60, 19], the com-
putation of a convex hull and all-nearest neighbors [13], as
well as weighted set intersection [28]; the simple counting
protocol in Section 3.3 is a variation upon these schemes.
Nevertheless, these operations are much simpler than ma-
trix factorization; to the best of our knowledge, we are the
ﬁrst to apply oblivious sorting on such a numerical task.
Privacy in recommender systems has been studied under
several contexts, including the use of trusted hardware [1] as
well as the susceptibility of a system to shilling attacks (i.e.,
the injection of false ratings to manipulate the recommen-
dation outcome) [38, 47]. An approach orthogonal to ours
that introduces privacy in recommender systems is diﬀeren-
tial privacy [12, 46]. By adding noise, diﬀerential privacy
guarantees that the distribution of the system’s output is
insensitive to any individual’s record, preventing the infer-
ence of any single user’s data from the output. However,
diﬀerential privacy does not protect data from the recom-
mender system itself. Crucially, diﬀerential privacy can be
combined with secure computation [58], in our case by incor-
porating noise addition within the garbled circuit factorizing
the input matrix. Diﬀerential privacy can thus be used to
enhance the privacy properties of our protocol, ensuring not
only that the data remains private during computation, but
also the ﬁnal result does not expose individual user data.
8. CONCLUSIONS AND FUTURE WORK
We presented a protocol for matrix factorization on user
ratings that remain encrypted at all times. This critical
building block allows a recommender to learn item proﬁles
without learns anything about users’ ratings, providing users
protection from inference threats and accidental information
leakage. Our hybrid approach combines partially homomor-
phic encryption and Yao’s garbled circuits. To the best of
our knowledge, we are the ﬁrst to apply oblivious sorting to a
numerical task as complex as matrix factorization. Through
this key idea, that also enables us to highly parallelize our
implementation, we overcome scalability and performance
needs, and bring matrix factorization on encrypted data into
the realm of practicality.
There are several future directions for this work. First,
we hope to deploy our system over a cloud compute service
(e.g., using Hadoop on Amazon EC2), which will enable
an increase in the range of datasets that we can process.
A second direction is to investigate the application of our
approach to other equally intensive machine learning tasks,
especially ones that exhibit an underlying bipartite structure
in computations; we could thus leverage sorting networks
again to achieve performance scalability.
A third direction is to extend our protocol to work under
diﬀerent security models, e.g., a malicious CSP. A malicious
CSP can create an incorrect circuit, which can be handled
with standard techniques for verifying garbled circuits [43,
40]. Moreover, it can feed the wrong inputs to the circuit,
e.g., maliciously altered masked values as described in Sec-
tion 3.1. The latter attack reveals no additional information
to the CSP, but it may corrupt the result of the computa-
tion. Therefore additional techniques should be designed to
ensure that either the CSP provided the correct inputs to
the circuit or that the output of the recommendation circuit
closely approximates the ratings provided by users.
Acknowledgments. The last author is supported by NSF.
9. REFERENCES
[1] E. A¨ımeur, G. Brassard, J. M. Fernandez, and F. S. M.
Onana. ALAMBIC: A privacy-preserving recommender
system for electronic commerce. Int. J. Inf. Sec., 7(5), 2008.
[2] M. Ajtai, J. Koml´os, and E. Szemer´edi. An O(n log n)
sorting network. In STOC, 1983.
[3] K. E. Batcher. Sorting networks and their applications. In
Proc. AFIPS Spring Joint Computer Conference, 1968.
[4] M. Bellare and S. Micali. Non-interactive oblivious transfer
and applications. In CRYPTO, 1990.
[5] E. J. Cand`es and B. Recht. Exact matrix completion via
convex optimization. Foundations of Computational
Mathematics, 9(6), 2009.
[6] J. F. Canny. Collaborative ﬁltering with privacy. In IEEE
S&P, 2002.
[7] B. Chevallier-Mames, P. Paillier, and D. Pointcheval.
Encoding-free ElGamal encryption without random oracles.
In PKC, 2006.
[8] S. A. Cook and R. A. Reckhow. Time bounded random
access machines. J. Computer and System Sciences, 1973.
[9] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.
Introduction to Algorithms. MIT Press, 2nd edition, 2001.
[10] I. Damg˚ard and T. Toft. Trading sugar beet quotas - secure
multiparty computation in practice. ERCIM News, 2008.
[11] W. Du and M. J. Atallah. Secure multi-party computation
problems and their applications: A review and open
problems. In New Security Paradigms Workshop, 2001.
[12] C. Dwork. Diﬀerential privacy. In ICALP, 2006.
[13] D. Eppstein, M. T. Goodrich, and R. Tamassia.
Privacy-preserving data-oblivious geometric algorithms for
geographic data. In 18th SIGSPATIAL, 2010.
[14] S. Even, O. Goldreich, and A. Lempel. A randomized
protocol for signing contracts. Commun. ACM, 28(6), 1985.
[15] J. Friedman, T. Hastie, and R. Tibshirani. The Elements of
Statistical Learning: Data Mining, Inference and
Prediction. Springer, 2nd edition, 2009.
[16] C. Gentry. Fully homomorphic encryption using ideal
lattices. In STOC, 2009.
[17] S. Goldwasser and M. Bellare. Lecture Notes on
Cryptography. MIT, 2001.
[18] M. T. Goodrich. Randomized shellsort: A simple oblivious
sorting algorithm. In SODA, 2010.
[19] M. T. Goodrich. Data-oblivious external-memory
algorithms for the compaction, selection, and sorting of
outsourced data. In SPAA, 2011.
[20] T. Graepel, K. Lauter, and M. Naehrig. ML conﬁdential:
Machine learning on encrypted data. Cryptology ePrint
Archive, Report 2012/323, 2012.
[21] R. Hall, S. E. Fienberg, and Y. Nardi. Secure multiple
linear regression based on homomorphic encryption. J.
Oﬃcial Statistics, 2011.
[22] K. Hamada, R. Kikuchi, D. Ikarashi, K. Chida, and
K. Takahashi. Practically eﬃcient multi-party sorting
protocols from comparison sort algorithms. In ICISC, 2013.
[23] W. Henecka, S. K¨ogl, A.-R. Sadeghi, T. Schneider, and
I. Wehrenberg. TASTY: Tool for automating secure
two-party computations. In CCS, 2010.
[24] Y. Huang, D. Evans, J. Katz, and L. Malka. Faster secure
two-party computation using garbled circuits. In USENIX
Security, 2011.
[25] Y. Huang, J. Katz, and D. Evans. Quid-pro-quo-tocols:
Strengthening semi-honest protocols with dual execution.
In IEEE S&P, 2012.
[26] Y. Huang, L. Malka, D. Evans, and J. Katz. Eﬃcient
privacy-preserving biometric identiﬁcation. In NDSS, 2011.
[27] Y. Ishai, J. Kilian, K. Nissim, and E. Petrank. Extending
oblivious transfers eﬃciently. In CRYPTO, 2003.
[28] K. V. J´onsson, G. Kreitz, and M. Uddin. Secure
multi-party sorting and applications. Cryptology ePrint
Archive, Report 2011/122, 2011.
810[29] A. F. Karr, W. J. Fulp, F. Vera, S. S. Young, X. Lin, and
[56] O. Regev. On lattices, learning with errors, random linear
J. P. Reiter. Secure, privacy-preserving analysis of
distributed databases. Technometrics, 2007.
[30] A. F. Karr, X. Lin, A. P. Sanil, and J. P. Reiter.
Privacy-preserving analysis of vertically partitioned data
using secure matrix products. J. Oﬃcial Statistics, 2009.
[31] R. H. Keshavan, A. Montanari, and S. Oh. Learning low
rank matrices from O(n) entries. In Allerton, 2008.
codes, and cryptography. J. ACM, 56(6), 2009.
[57] A.-R. Sadeghi, T. Schneider, and I. Wehrenberg. Eﬃcient
privacy-preserving face recognition. In ICISC, 2009.
[58] E. Shi, T.-H. H. Chan, E. G. Rieﬀel, R. Chow, and
D. Song. Privacy-preserving aggregation of time-series data.
In NDSS, 2011.
[59] Y. Tsiounis and M. Yung. On the security of ElGamal
[32] D. E. Knuth. The Art Of Computer Programming —
based encryption. In PKC, 1998.
Volume 3 / Sorting and Searching. Addison-Wesley, 2nd
edition, 1998.
[33] V. Kolesnikov, A.-R. Sadeghi, and T. Schneider. Improved
garbled circuit building blocks and applications to auctions
and computing minima. In CANS, 2009.
[34] V. Kolesnikov and T. Schneider. Improved garbled circuit:
Free XOR gates and applications. In ICALP, 2008.
[60] G. Wang, T. Luo, M. T. Goodrich, W. Du, and Z. Zhu.
Bureaucratic protocols for secure two-party sorting,
selection, and permuting. In CCS, 2010.
[61] U. Weinsberg, S. Bhagat, S. Ioannidis, and N. Taft.
BlurMe: Inferring and obfuscating user gender based on
ratings. In RecSys, 2012.
[62] A. C.-C. Yao. Protocols for secure computations. In FOCS,
[35] Y. Koren, R. M. Bell, and C. Volinsky. Matrix factorization
1982.
techniques for recommender systems. IEEE Computer,
2009.
[36] B. Kreuter, A. Shelat, and C.-H. Shen. Billion-gate secure
computation with malicious adversaries. In USENIX
Security, 2012.
[37] S. K. Lam, D. Frankowski, and J. Riedl. Do you trust your
recommendations? An exploration of security and privacy
issues in recommender systems. In ETRICS 2006, 2006.
[38] S. K. Lam and J. Riedl. Shilling recommender systems for
fun and proﬁt. In WWW, 2004.
[39] K. Lauter, M. Naehrig, and V. Vaikuntanathan. Can
homomorphic encryption be practical? In CCSW, 2011.
[40] Y. Lindell. Fast cut-and-choose based protocols for
malicious and covert adversaries. IACR Cryptology ePrint
Archive, 2013.
[41] Y. Lindell and B. Pinkas. Privacy preserving data mining.
J. Cryptology, 2002.
[42] Y. Lindell and B. Pinkas. A proof of security of Yao’s
protocol for two-party computation. J. Cryptology, 2009.
[43] Y. Lindell and B. Pinkas. Secure two-party computation
via cut-and-choose oblivious transfer. J. Cryptology, 2012.
[44] Y. Lindell, B. Pinkas, and N. P. Smart. Implementing
two-party computation eﬃciently with security against
malicious adversaries. In SCN, 2008.
[45] D. Malkhi, N. Nisan, B. Pinkas, and Y. Sella. Fairplay –
Secure two-party computation system. In USENIX
Security, 2004.
[46] F. McSherry and I. Mironov. Diﬀerentially private
recommender systems: Building privacy into the Netﬂix
prize contenders. In KDD, 2009.
[47] B. Mobasher, R. Burke, R. Bhaumik, and C. Williams.
Toward trustworthy recommender systems: An analysis of
attack models and algorithm robustness. ACM Trans.
Internet Techn., 7(4), 2007.
[48] M. Naor, B. Pinkas, and R. Sumner. Privacy preserving
auctions and mechanism design. In 1st ACM Conference on