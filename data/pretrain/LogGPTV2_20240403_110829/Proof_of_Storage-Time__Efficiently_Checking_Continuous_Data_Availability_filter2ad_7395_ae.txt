•
is generated from the previous PoR proof via hash
functions and TDF trapdoor evaluations. Then he
keeps the hash values of all the PoR challenges and
responses together for further veriﬁcation.
cPoSt .V = (cPoSt.Vcha, cPoSt.Vvalid):
◦
◦
cPoSt.Vcha(pk, sk, tg, state): Keep a variable
state to record the number of interactions. If
state = i 
t(cid:48) + 2δT , then the above compact PoSt scheme is stateful with
l permitted challenges and has -soundness.
VI.
INSTANTIATIONS
Although we have provided a generic framework for PoSt
with asymptotically compact proofs, we still need to discuss
the practical instantiations of our two main building blocks:
PoR and VDF(TDF).
A. An efﬁcient PoR instantiation
When taking into account the concrete efﬁciency, we note
that the veriﬁcation phase of our compact PoSt is extremely
efﬁcient since only one evaluation of a hash function is
involved. The cost of its proof phase is inherent since the
server inevitably needs to keep computing the delay function.
the cost of the setup phase affects the overall
However,
efﬁciency. Based on our design,
the data owner needs to
compute all PoRs and TDFs sequentially. Since he holds the
trapdoor of the TDF, computing PoR proofs becomes the main
burden when the data size is large. For instance, if the expected
storage time is one month and the audit frequency is every
hour, the setup phase consists of about 720 PoRs. In this case,
the classic PoR based on bilinear pairings [44] or RSA group
[8] are not satisfactory.
Stateful PDP/PoRs achieve higher efﬁciency since they
can be built from symmetric-key primitives [31]. However,
stateless PoR schemes only support a very limited (usually
constant) number of challenges. At ﬁrst glance, these schemes
are not suitable for the compact PoSt; however, we observe
that the limited number of challenges is due to the veriﬁcation
algorithm of PoR, which by our design, we never invoke in
our compact PoSt construction. The prove algorithm of state-
less PoRs does support a polynomial number of challenges.
Accordingly, we can adopt a simple stateful PoR, as in [31],
in our PoSt construction.
Let H be a HMAC and G be a hash function. The PoR
scheme is as follows:
PoR.Kg(λ): Taking as input the security parameter
λ, randomly choose the secret key sk as a sequence
of bit strings from {0, 1}λ, i.e., sk = (r1, . . . , rn) ∈
{0, 1}λ×n. Note that no public key is needed in this
scheme.
PoR.St(sk, D): Take as input a secret key sk =
(r1, . . . , rn) and a ﬁle D ∈ {0, 1}∗, then compute the
MAC pi = H(ri, D) w.r.t. the key ri for i = 1, . . . , n.
Let ti = G(pi) and the PoR tag tg = (t1, . . . , tl).
PoR.V = (PoR.Vcha, PoR.Vverify):
PoR.Vcha(sk, state) : For the state = i < n,
send the random string ci = ri to the veriﬁer.
PoR.Vverify(ci, tg): Given the response pi from
the prover when the state is i, if ti = G(pi),
output accept, otherwise reject.
◦
◦
•
•
•
•
PoR.P(ci, D): Given the challenge ci, compute the
MAC value pi = H(ci, D) w.r.t. the key ci.
In practice, H can be instantiated via the HMAC with SHA-
3 [26]. The above scheme is a secure PoR when we model H
and G as random oracles since the extractor can easily recover
data from the random oracle queries. Similarly, we achieve the
unpredictability of the PoR from the properties of the random
oracle.
B. Instantiations of the delay function
In the described PoSt constructions, the time is measured
by the number of the ITM steps, which aims to mimic
the CPU clock. But for a practical system, we must set
the concrete parameters for the VDF/TDFs according to the
time and veriﬁcation frequency. Indeed, as in computational
timestamping [14] or other applications of VDFs, a reasonable
estimation of the attacker’s evaluation speed of the delay
function is needed for PoSt. Three items should be considered:
1) choosing the proper instantiation of the delay functions, 2)
setting the concrete parameters for VDF/TDF, and 3) making
the estimation of the forced delay time as accurate as possible.
First of all, choosing a proper instantiation of the VDF/TDF
for our PoSt needs special care. Given the time T and
12
checking frequency t as chosen by the data owner, our PoSt
constructions require the parameter δ of the delay function to
be smaller than t
2T ; otherwise, the key generation algorithm
cannot ﬁnd a suitable t(cid:48). Therefore, to achieve a small enough
δ, it is recommended to instantiate the VDF/TDF schemes
as the tight ones in [25], [48], which can be evaluated in
sequential steps t+O(1) with an honest prover using O(log(t))
processors and space.
Note that in our PoSt model, the storage time T , and the
frequency parameter t are measured by the number of steps
of the ITM. Since existing delay functions are evaluated via
speciﬁc unit operations, such as modular squaring [14], [48],
[38], a more practical method would be to choose the number
of unit operations directly. Speciﬁcally, given the parameter δ
for the delay function, the client can choose the desired storage
time T and checking frequency t (both measured in minutes),
then choose a time t(cid:48) such that t(cid:48) < t − 2δT and k = T/t(cid:48)
is an integer. After that, the client estimates the time of each
unit operation and ﬁnd a number s0 such that the time spent to
compute s0 unit operations is the closest to (but smaller than)
(1+δ)t(cid:48). Consequently, the honest prover can sequentially run
s0 operations for one delay function and compute a valid PoSt
within time (1 + δ)T. On the other hand, any malicious server
would spend at least t(cid:48) time for one delay function, so that
the largest interval between two PoRs must be less than t.
However, note that the adversary may still deploy some
special hardware to speed up the computation of unit op-
erations, which would violate the security guarantee. In-
deed, such a concern was recognized by the community, and
Ethereum/Filecoin invested signiﬁcant resources in developing
specialized hardware and in optimizing implementation run-
times [32], [41] to obtain the fastest implementation of the
delay function. In our setting, it is more rational to focus on
providing an excellent storage service than investing in an
arms race with organizations that are centered on hardware
manufacturing. Nevertheless, more strategies are needed when
estimating concrete parameters considering this aspect.
VII. EVALUATION
Implementation. To evaluate the performance of our scheme,
we implemented a prototype in C++, employing the Crypto++
library Version 8.2 [22] for cryptographic operations. The ex-
periments were run on a MacBook Pro with 32 GB 2400MHz
DDR4 memory and a 2.9 GHz Intel Core i9 CPU. Speciﬁcally,
we estimate the cost for different storage times (1 to 5 months)
and various ﬁle sizes (32MB to 256MB) and require the prover
to check up the ﬁle according to different frequencies. All hash
functions in our algorithms are instantiated with SHA-3 [26].
As for the ﬁles, we use randomly generated ﬁles of different
sizes. The numbers are the averages of 5 runs.
Setup cost. The main cost of our compact PoSt is the setup
algorithm, which consists of two parts. The ﬁrst part is to
compute the PoR in Section II. The second part is to evaluate
the TDF with the trapdoor. We observe that the time cost
for the trapdoor evaluation is almost the same for the RSA
based TDF construction [48], no matter how long the delay
time is. Therefore, we estimate the cost of TDF.TrapEval by
computing the modulus exponentiation in an RSA group for
a random exponent. The RSA modulus used here is of size
1024 bits. The results of our experiments with four different
data available time T (delay function parameter δ and checking
frequency t) and varying ﬁle sizes are depicted in Fig. 3 (Fig. 4
and Fig. 5 respectively). According to the experimental results,
the setup algorithm for a ﬁle of size 64 MB, which is supposed
to be stored for 1 month, takes about 4 minutes.
One may observe that in Fig.3, the setup time cost increases
a little bit faster than linear to the storage time. This is because
t(cid:48) gets smaller for larger T due to t(cid:48) < t− 2δT , so the honest
prover has to check the data more frequently to guarantee the
same level of proved checking frequency for the adversary
even for same t. This is not hard to imagine since when the
storage time is longer, it is harder to achieve the same accuracy
for the delay time.
Fig. 3: The compact PoSt setup times for various ﬁle sizes and
different data available periods, with hourly check up policy
and δ = 0.0001 of the delay function.
Fig. 5: The compact PoSt setup times for various ﬁle sizes
and different checking frequency, with δ = 0.0001 and 30
days data available period.
cost can be ignored compared to the delay time.
Discussions. The setup time of our PoSt scheme may be
noticeable, but there could be multiple ways to optimize the
performance further. (1) Setup only needs to be done once
for every storage period. Thus pre-computation can always be
performed except for the ﬁrst storage period. For example,
consider the case where the user initially stores his ﬁles for
half a year, and he would like to extend the contract for another
half a year. The setup can be ﬁnished before the second storage
phase begins. (2) One major factor affecting the setup times
is hashing large ﬁles (used in the simple PoR scheme). An
optimized approach, such as using parallel processors, would
improve setup times considerably.
VIII. CONCLUSIONS
In this paper, we systematically studied the notion of
Proof of Storage-time, which enables a client to efﬁciently
verify that outsourced data is continuously retrievable from a
storage provider. We proposed formal deﬁnitions and presented
efﬁcient constructions with rigorous security analyses. Our
result is the ﬁrst step towards studying advanced concepts