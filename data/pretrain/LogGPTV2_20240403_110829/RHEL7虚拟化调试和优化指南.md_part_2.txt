    内存
    :::
    ::: itemizedlist
    -   ::: para
        大页面和其他内存密集型环境下的优化。详细信息请参照[第 7 章
        *内存*](#chap-Virtualization_Tuning_Optimization_Guide-Memory.html){.xref}。
        :::
    :::
-   ::: para
    联网
    :::
    ::: itemizedlist
    -   ::: para
        vhost-net------一种基于内核的 VirtIO 快速解决方案。
        :::
    -   ::: para
        SR-IOV------使联网性能级别接近本机。
        :::
    :::
-   ::: para
    块 I/O
    :::
    ::: itemizedlist
    -   ::: para
        AIO------支持线程和其他 I/O 操作重叠。
        :::
    -   ::: para
        MSI - PCI 总线设备中断生成。
        :::
    -   ::: para
        磁盘 I/O 节流------客机磁盘 I/O
        的控制要求避免过度使用主机资源。详细信息请参照[第 6.5.1 节 "磁盘
        I/O
        节流"](#chap-Virtualization_Tuning_Optimization_Guide-BlockIO.html#sect-Virtualization_Tuning_Optimization_Guide-BlockIO-IO_Throttling){.xref}。
        :::
    :::
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
关于虚拟化支持、限制和功能的更多详细信息，请参照《 *Red Hat Enterprise
Linux 7 虚拟化入门指南* 》和以下网址：
:::
::: para
:::
::: para
:::
:::
:::
:::
:::
[]{#chap-Virtualization_Tuning_Optimization_Guide-Monitoring_Tools.html}
::: chapter
::: titlepage
# [⁠]{#chap-Virtualization_Tuning_Optimization_Guide-Monitoring_Tools.html#chap-Virtualization_Tuning_Optimization_Guide-Monitoring_Tools}第 2 章 性能监控工具 {.title}
:::
::: section
::: titlepage
# [⁠]{#chap-Virtualization_Tuning_Optimization_Guide-Monitoring_Tools.html#idm140616936867824}2.1. 简介 {.title}
:::
::: para
本章节描述用于监控客户虚拟机环境的工具。
:::
:::
::: section
::: titlepage
# [⁠]{#chap-Virtualization_Tuning_Optimization_Guide-Monitoring_Tools.html#sect-Virtualization_Tuning_Optimization_Guide-Monitoring_Tools-perf_kvm}2.2. perf kvm {.title}
:::
::: para
您可以使用带有 `kvm`{.command} 选项的 `perf`{.command}
命令，从主机收集客机运行系统的统计数据。
:::
::: para
在 Red Hat Enterprise Linux 中， [*perf*]{.emphasis} 软件包提供
`perf`{.command} 命令。运行 `rpm -q perf`{.command} 检查
[*perf*]{.emphasis}
软件包是否已安装。如果没有安装且您想安装该软件包来收集分析客机运行系统统计数据，请以
root 用户运行以下命令：
``` screen
# yum install perf
```
:::
::: para
为了在主机中使用 `perf kvm`{.command}，您需要从客户端获取
`/proc/modules`{.filename} 和 `/proc/kallsyms`{.filename}
文件。有两种可实现的方法。参考以下程序，用[过程 2.1, "从客户端向主机复制
proc
文件"](#chap-Virtualization_Tuning_Optimization_Guide-Monitoring_Tools.html#proc-copy_proc_files_to_host){.xref}
将文件转换逐级并在文件中运行报告。或者参照[过程 2.2, "备选：使用 sshfs
直接访问文件"](#chap-Virtualization_Tuning_Optimization_Guide-Monitoring_Tools.html#sshfs_access_guest){.xref}
直接安装客户端来获取文件。
:::
::: {.procedure xmlns:d="http://docbook.org/ns/docbook"}
[⁠]{#chap-Virtualization_Tuning_Optimization_Guide-Monitoring_Tools.html#proc-copy_proc_files_to_host}
**过程 2.1. 从客户端向主机复制 proc 文件**
::: important
::: admonition_header
**重要**
:::
::: admonition
::: para
如果您直接复制必需文件（例如通过 `scp`{.command}
命令），您只会复制零长度的文件。此处描述了首先将客户端中的文件复制到临时位置（通过`cat`{.command}
命令），然后通过 `perf kvm`{.command} 命令将它们复制到主机使用的过程。
:::
:::
:::
1.  **登录客户端并保存文件**
    ::: para
    登录客户端并将 `/proc/modules`{.filename} 和
    `/proc/kallsyms`{.filename}
    保存到临时位置，文件名为`/tmp`{.filename}：
    ``` screen
    # cat /proc/modules > /tmp/modules
    # cat /proc/kallsyms > /tmp/kallsyms
    ```
    :::
2.  **将临时文件复制到主机**
    ::: para
    在您退出客户端之后，运行以下 `scp`{.command}
    命令，将已保存的文件复制到主机。如果 TCP
    端口和主机名称不符，应替换主机名称：
    ``` screen
    # scp root@GuestMachine:/tmp/kallsyms guest-kallsyms
    # scp root@GuestMachine:/tmp/modules guest-modules
    ```
    :::
    ::: para
    现在您在主机上拥有了两个客户端的文件（`guest-kallsyms`{.filename} 和
    `guest-modules`{.filename}），准备就绪通过 `perf kvm`{.command}
    命令进行使用。
    :::
3.  [⁠]{#chap-Virtualization_Tuning_Optimization_Guide-Monitoring_Tools.html#step-Virtualization_Tuning_Optimization_Guide-Monitoring_Tools-perf_kvm-Recording_and_reporting_events}
    **通过 perf kvm 对事件进行记录和报告**
    ::: para
    使用前一步骤中获取的文件，并纪录和报告客户端或（与）主机中的事件现在是可行的。
    :::
    ::: para
    运行以下示例命令：
    ``` screen
    # perf kvm --host --guest --guestkallsyms=guest-kallsyms \
    --guestmodules=guest-modules record -a -o perf.data
    ```
    :::
    ::: note
    ::: admonition_header
    **注意**
    :::
    ::: admonition
    ::: para
    如果 [**\--host**]{.bold .bold} 和 [**\--guest**]{.bold .bold}
    均在命令中使用，输出将被储存在 `perf.data.kvm`{.filename}
    中。如果只有 [**\--host**]{.bold .bold} 被使用，文件将被命名为
    `perf.data.host`{.filename}。同样地，如果仅有 [**\--guest**]{.bold
    .bold} 被使用，文件将被命名为 `perf.data.guest`{.filename}。
    :::
    :::
    :::
    ::: para
    请按 Ctrl-C 停止纪录。
    :::
4.  [⁠]{#chap-Virtualization_Tuning_Optimization_Guide-Monitoring_Tools.html#step-Virtualization_Tuning_Optimization_Guide-Monitoring_Tools-perf_kvm-Recording_and_reporting_events-Reporting_events}
    **报告事件**
    ::: para
    以下示例命令使用纪录过程中获取的文件，并将输出重新定向到一个新文件：`analyze`{.filename}。
    :::
    ``` screen
    perf kvm --host --guest --guestmodules=guest-modules report -i perf.data.kvm \
    --force > analyze
    ```
    ::: para
    查看并分析 `analyze`{.filename} 文件内容，检测纪录的事件：
    :::
    ``` programlisting
    # cat analyze
    # Events: 7K cycles 
    # 
    # Overhead       Command  Shared Object      Symbol 
    # ........  ............  .................  .........................
    # 
        95.06%            vi  vi                 [.] 0x48287         
         0.61%          init  [kernel.kallsyms]  [k] intel_idle 
         0.36%            vi  libc-2.12.so       [.] _wordcopy_fwd_aligned 
         0.32%            vi  libc-2.12.so       [.] __strlen_sse42 
         0.14%       swapper  [kernel.kallsyms]  [k] intel_idle 
         0.13%          init  [kernel.kallsyms]  [k] uhci_irq 
         0.11%          perf  [kernel.kallsyms]  [k] generic_exec_single 
         0.11%          init  [kernel.kallsyms]  [k] tg_shares_up 
         0.10%      qemu-kvm  [kernel.kallsyms]  [k] tg_shares_up 
    ［输出删节……］
    ```
:::
::: {.procedure xmlns:d="http://docbook.org/ns/docbook"}
[⁠]{#chap-Virtualization_Tuning_Optimization_Guide-Monitoring_Tools.html#sshfs_access_guest}
**过程 2.2. 备选：使用 sshfs 直接访问文件**
-   ::: important
    ::: admonition_header
    **重要**
    :::
    ::: admonition
    ::: para
    这一步仅被作为一个提供的示例。您需要依据环境替换属性值。
    :::
    :::
    :::
    ``` programlisting
    # Get the PID of the qemu process for the guest:
    PID=`ps -eo pid,cmd | grep "qemu.*-name GuestMachine" \
    | grep -v grep | awk '{print $1}'`
    # Create mount point and mount guest
    mkdir -p /tmp/guestmount/$PID
    sshfs -o allow_other,direct_io GuestMachine:/ /tmp/guestmount/$PID
    # Begin recording
    perf kvm --host --guest --guestmount=/tmp/guestmount \
    record -a -o perf.data
    # Ctrl-C interrupts recording. Run report:
    perf kvm --host --guest --guestmount=/tmp/guestmount report \
    -i perf.data
    # Unmount sshfs to the guest once finished:
    fusermount -u /tmp/guestmount
    ```
:::
:::
::: section
::: titlepage
# [⁠]{#chap-Virtualization_Tuning_Optimization_Guide-Monitoring_Tools.html#sect-Virtualization_Tuning_Optimization_Guide-Monitoring_Tools-vPMU}2.3. 虚拟性能监控单位 {.title}
:::
::: para
虚拟性能监控单位（vPMU，virtual performance monitoring
unit）显示客户虚拟机功能的数据。
:::
::: para
虚拟性能监控单位允许用户识别客户虚拟机中可能出现的性能问题来源。虚拟性能监控单位基于
Intel 性能监控单位（Performance Monitoring Unit）并只能以 Intel
机器为基础。
:::
::: para
该特性只能支持运行 Red Hat Enterprise Linux 6 或 Red Hat Enterprise
Linux 7 的客户虚拟机，并且会被默认禁用。
:::
::: para
要验证系统是否支持虚拟 PMU 时，请运行以下命令检查主机 CPU 中的
`arch_perfmon`{.systemitem} 标识：
:::
``` screen
# cat /proc/cpuinfo|grep arch_perfmon
```
::: para
在运行虚拟 PMU 时，以 `host-passthrough`{.literal} 在客户虚拟机中指定
*`cpu mode`*：
:::
``` screen
# virsh dumpxml guest_name |grep "cpu mode"
```
::: para
在虚拟 PMU 激活之后，通过运行客户虚拟机的 `perf`{.command}
命令显示虚拟机的性能数据。
:::
:::
:::
[]{#chap-Virtualization_Tuning_Optimization_Guide-Virt_Manager.html}
::: chapter
::: titlepage
# [⁠]{#chap-Virtualization_Tuning_Optimization_Guide-Virt_Manager.html#chap-Virtualization_Tuning_Optimization_Guide-Virt_Manager}第 3 章 virt-manager {.title}
:::
::: section
::: titlepage
# [⁠]{#chap-Virtualization_Tuning_Optimization_Guide-Virt_Manager.html#idm140616968917184}3.1. 简介 {.title}
:::
::: para
本章节包括了虚拟机管理器 [**virt-manager**]{.application}
中调试可用选项的性能，是一项用来管理客户虚拟机的桌面工具。
:::
:::
::: section
::: titlepage
# [⁠]{#chap-Virtualization_Tuning_Optimization_Guide-Virt_Manager.html#sect-Virtualization_Tuning_Optimization_Guide-Virt_Manager-OS_Details_and_Devices}3.2. 操作系统细节和设备 {.title}
:::