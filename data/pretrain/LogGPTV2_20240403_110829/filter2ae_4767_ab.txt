    }
在调试器中查看执行memmove前后的变化，验证以上说法(ps：pool size没有加上大小为0x10字节的pool header)
## cng!IoUnpack_SG_ParamBlock_Header
从伪代码中可以得知调用cng!IoUnpack_SG_ParamBlock_Header的返回值必须为0，否则函数直接返回，于是继续跟进cng!IoUnpack_SG_ParamBlock_Header，函数首先进行pool_ptr1
+ 2  (_DWORD _)((char_ )pool_ptr1 +
size这样的判断，不太清楚这样做的意义，获取pool1的前4字节，与`0x1A2B3C4D`进行比较，因此输入缓冲区的前4字节设置为0x1A2B3C4D，第3个参数所指内存会保存pool1的第二个4字节，数值为0x10400，for循环内会将pool2的前8字节置位
    __int64 __fastcall IoUnpack_SG_ParamBlock_Header(_DWORD *pool_ptr1, unsigned int size, _DWORD *a3, _QWORD *pool_ptr2)
    {
      ...
      v4 = 0;
      if ( !pool_ptr1 )
        return 1i64;
      if ( pool_ptr1 + 2  (_DWORD *)((char *)pool_ptr1 + size) || *pool_ptr1 != 0x1A2B3C4D )
        return 1i64;
      if ( a3 )
        *a3 = pool_ptr1[1];
      if ( !pool_ptr2 )
        return 0i64;
      v6 = pool_ptr2 + 1;
      if ( pool_ptr2 + 1 >= pool_ptr2 )
      {
        if ( v6 = 8 )
            {
              *pool_ptr2 = 0xFFFFFFFFFFFFFFFFui64;
              return 0i64;
            }
            ...
          }
          ...
        }
        ...
      }
      ...
    }
查看pool2在执行完循环前后的变化
    1: kd> dq @rax l4
    ffffbb0f`7e160000  00000000`00000000 00000000`00000000
    ffffbb0f`7e160010  00000000`00000000 00000000`00000000
    1: kd> dq @r9 l4
    ffffbb0f`7e160000  ffffffff`ffffffff 00000000`00000000
    ffffbb0f`7e160010  00000000`00000000 00000000`00000000
## cng!ConfigFunctionIoHandler
回到cng!ConfigIoHandler_Safeguarded函数，函数继续调用cng!ConfigFunctionIoHandler函数，第一个参数传入的值为0x10400，HIWORD(a1)返回的结果为1，就会进入到cng!ConfigurationFunctionIoHandler函数，a2、a3、a4、a5、a6对应的是pool_ptr1、InputLen、OutputBuffer、&OutputLen、pool_ptr2
    NTSTATUS __fastcall ConfigFunctionIoHandler(
            unsigned int a1,
            int a2,
            unsigned int a3,
            struct _CRYPT_CONTEXT_FUNCTION_PROVIDERS *a4,
            _DWORD *a5,
            __int64 a6)
    {
      switch ( HIWORD(a1) )
      {
        case 0u:
          return RegistrationFunctionIoHandler(a1, a2, a3, (int)a4, (ULONG)a5, a6);
        case 1u:
          return ConfigurationFunctionIoHandler(a1, a2, a3, a4, a5, a6);
        case 2u:
          return ResolutionFunctionIoHandler(a1, a2, a3, (int)a4, (ULONG)a5, a6);
      }
      return 0xC00000AF;
    }
在调试器中查看cng!ConfigurationFunctionIoHandler函数的参数
## cng!ConfigurationFunctionIoHandler
cng!ConfigurationFunctionIoHandler函数开头调用cng!IoUnpack_SG_Configuration_ParamBlock，从函数名跟上文的分析来看，该函数会对池块的某些部分进行一些必要的检查并写入一些值，函数的返回值依然需要为0
## cng!IoUnpack_SG_Configuration_ParamBlock
跟进cng!IoUnpack_SG_Configuration_ParamBlock函数，先对pool1的大小与8进行对比，由于我们使用的大小为0x3aab，还不能直接返回0，将pool1的首地址加上0x68得到v18，当前实例中保证pool1
= pool_ptr2 )
          {
            if ( v10 + 8 >= v10 && (unsigned __int64)(v10 + 8) = 8 )
                {
                  *(_QWORD *)v10 = 0xFFFFFFFFFFFFFFFFui64;// *(pool_ptr2+0x58) = 0xFFFFFFFFFFFFFFFF
                  goto LABEL_10;
                }
                ...
              }
              ...
            }
            ...
          }
          ...
    LABEL_10:
        v13 = 0i64;
        if ( *pool_ptr1_off58 != 0xFFFFFFFFFFFFFFFFui64 )
          v13 = *pool_ptr1_off58 + pool_ptr1;
        *pool_ptr1_off58 = v13;                     // *(pool_ptr1 + 0x58) += pool_ptr1
        }  
    if ( !v13 )
        return 0i64;
      if ( v13 >= pool_ptr1 && pool_ptr1_off50_val + v13 >= v13 && pool_ptr1_off50_val + v13 = pool_ptr2 )
          {
            v19 = pool_ptr2 + pool_ptr1_off50_val + v17;// v19 = pool_ptr2 + 0x1000 + 0x2aab
            if ( v19 >= (unsigned __int64)v18 && v19  dq 0xffffbb0f7e160058 l1
    ffffbb0f`7e160058  ffffffff`ffffffff
    1: kd> dq 0xffffbb0f7e161000
    ffffbb0f`7e161000  ffffffff`ffffffff ffffffff`ffffffff
    ffffbb0f`7e161010  ffffffff`ffffffff ffffffff`ffffffff
    ffffbb0f`7e161020  ffffffff`ffffffff ffffffff`ffffffff
    ffffbb0f`7e161030  ffffffff`ffffffff ffffffff`ffffffff
    ffffbb0f`7e161040  ffffffff`ffffffff ffffffff`ffffffff
    ffffbb0f`7e161050  ffffffff`ffffffff ffffffff`ffffffff
    ffffbb0f`7e161060  ffffffff`ffffffff ffffffff`ffffffff
    ffffbb0f`7e161070  ffffffff`ffffffff ffffffff`ffffffff
    1: kd> dq 0xffffbb0f7e163aab-10
    ffffbb0f`7e163a9b  ffffffff`ffffffff ffffffff`ffffffff
    ffffbb0f`7e163aab  dcde6800`00000000 000000ff`8d6f0e3e
    ffffbb0f`7e163abb  00000000`00000000 15fab900`00000000
    ffffbb0f`7e163acb  000000ff`ffbb0f7e 00000000`00000000
    ffffbb0f`7e163adb  00000000`00000000 00000000`00000000
    ffffbb0f`7e163aeb  00000000`00000000 00000000`00000000
    ffffbb0f`7e163afb  00000000`00000000 00000000`00000000
    ffffbb0f`7e163b0b  00000000`00000000 00000000`00000000
执行完以上部分，紧接着就是一组赋值操作，然后返回0
    if ( a3 )
        *a3 = *(_DWORD *)(pool_ptr1 + 8);
    if ( a4 )