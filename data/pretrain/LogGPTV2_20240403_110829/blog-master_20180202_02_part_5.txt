                                             Buckets: 131072  Batches: 64  Memory Usage: 2976kB  
                                             ->  Parallel Seq Scan on b11 t2_11  (cost=0.00..26991.60 rows=97560 width=4) (actual time=0.023..353.979 rows=1560952 loops=2)  
 Planning time: 1.792 ms  
 Execution time: 8767.304 ms  
(206 rows)  
```  
## 小结  
PostgreSQL 11对分区表的一个重大功能点改进，分区智能JOIN，对于分区结构一致，并且JOIN字段包含了双方的分区键时，会选择分区与分区JOIN，然后APPEND的执行计划。大幅提高性能。  
必须满足以下条件，优化器才会使用分区JOIN分区。  
1、打开enable_partition_wise_join开关  
```  
postgres=# show enable_partition_wise_join ;  
 enable_partition_wise_join   
----------------------------  
 on  
(1 row)  
```  
2、分区表的模式一致（range, list, hash）  
3、分区表的分区数目  
4、分区表每个分区的定义一致。  
5、分区字段必须参与JOIN（但是可以含其他JOIN字段）。  
6、分区字段的类型必须一致  
7、如果是表达式分区键，那么表达式必须一致  
注意，由于判断是否使用智能分区并行JOIN需要耗费一定的优化器判断逻辑，会带来执行计划成本的提升，所以默认这个开关是关闭的。   
智能分区JOIN的内部原理与并行HASH JOIN有一些类似，和MPP架构也有一些类似。  
[《PostgreSQL dblink异步调用实现 并行hash分片JOIN - 含数据交、并、差 提速案例》](../201802/20180201_02.md)    
[《PostgreSQL 11 preview - parallel hash join(并行哈希JOIN) 性能极大提升》](../201802/20180201_01.md)    
结合PostgreSQL 11的append并行和hash join并行，使得PG在分区表的JOIN上，性能暴增。  
```  
postgres=#  explain select aaa.* from aaa join bbb on (aaa.order_id = bbb.order_id);  
                                      QUERY PLAN                                         
---------------------------------------------------------------------------------------  
 Gather  (cost=10.75..85.35 rows=91592 width=48)  
   Workers Planned: 32  
   ->  Parallel Append  (cost=10.75..85.35 rows=716 width=48)  
         ->  Parallel Hash Join  (cost=10.75..21.34 rows=179 width=48)  
               Hash Cond: (aaa0.order_id = bbb0.order_id)  
               ->  Parallel Seq Scan on aaa0  (cost=0.00..10.33 rows=33 width=48)  
               ->  Parallel Hash  (cost=10.33..10.33 rows=33 width=8)  
                     ->  Parallel Seq Scan on bbb0  (cost=0.00..10.33 rows=33 width=8)  
         ->  Parallel Hash Join  (cost=10.75..21.34 rows=179 width=48)  
               Hash Cond: (aaa1.order_id = bbb1.order_id)  
               ->  Parallel Seq Scan on aaa1  (cost=0.00..10.33 rows=33 width=48)  
               ->  Parallel Hash  (cost=10.33..10.33 rows=33 width=8)  
                     ->  Parallel Seq Scan on bbb1  (cost=0.00..10.33 rows=33 width=8)  
         ->  Parallel Hash Join  (cost=10.75..21.34 rows=179 width=48)  
               Hash Cond: (aaa2.order_id = bbb2.order_id)  
               ->  Parallel Seq Scan on aaa2  (cost=0.00..10.33 rows=33 width=48)  
               ->  Parallel Hash  (cost=10.33..10.33 rows=33 width=8)  
                     ->  Parallel Seq Scan on bbb2  (cost=0.00..10.33 rows=33 width=8)  
         ->  Parallel Hash Join  (cost=10.75..21.34 rows=179 width=48)  
               Hash Cond: (aaa3.order_id = bbb3.order_id)  
               ->  Parallel Seq Scan on aaa3  (cost=0.00..10.33 rows=33 width=48)  
               ->  Parallel Hash  (cost=10.33..10.33 rows=33 width=8)  
                     ->  Parallel Seq Scan on bbb3  (cost=0.00..10.33 rows=33 width=8)  
(23 rows)  
```  
相比非智能分区JOIN，本例测试性能提升2.4倍。  
如果单表JOIN能加上JOIN字段的rehash的手段，就能在PG内部实现类似MPP的任意表的并行分片JOIN了。类似如下方法中提到的人为干预的分片HASH并行：  
[《PostgreSQL dblink异步调用实现 并行hash分片JOIN - 含数据交、并、差 提速案例》](../201802/20180201_02.md)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")