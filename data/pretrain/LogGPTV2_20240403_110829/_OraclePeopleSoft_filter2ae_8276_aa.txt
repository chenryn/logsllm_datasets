# 【漏洞分析】Oracle旗下PeopleSoft产品被曝存在未授权远程代码执行漏洞
|
##### 译文声明
本文是翻译文章，文章来源：ambionics.io
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
****
翻译：[ **WisFree**](http://bobao.360.cn/member/contribute?uid=2606963099)
**稿费：150RMB**
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**Oracle PeopleSoft**
在几个月以前，我有幸得到了审查Oracle PeopleSoft解决方案的机会，审查对象包括PeopleSoft
HRMS和PeopleTool在内。除了几个没有记录在案的CVE之外，网络上似乎没有给我提供了多少针对这类软件的攻击方法，不过[
**ERPScan**](https://erpscan.com/) 的技术专家在两年前发布的[
**这份演讲文稿**](https://erpscan.com/wp-content/uploads/presentations/2015-HITB-Amsterdam-Oracle-PeopleSoft-Applications-are-Under-Attack.pdf)
倒是给我提供了不少有价值的信息。从演示文稿中我们可以清楚地了解到，PeopleSoft简直就是一个装满了漏洞的容器，只不过目前还没有多少有关这些漏洞的公开信息而已。
PeopleSoft应用包含各种各样不同的终端节点，其中很大一部分节点是没有经过身份验证的。除此之外，很多服务正好使用的仍是默认密码，这很有可能是为了更好地实现互联互通性才这样设计的。但事实证明，这种设计不仅是非常不安全的，而且也十分不明智，而这将会让PeopleSoft完全暴露在安全威胁之中。
在这篇文章中，我将会给大家介绍一种能够将XXE漏洞转换成以SYSTEM权限运行命令的通用方法，几乎所有的PeopleSoft版本都会受到影响。
**XXE：访问本地网络**
目前该产品中已知的XXE漏洞已经有很多了，例如[ **CVE-2013-3800**](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-3800) 和[
**CVE-2013-3821**](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-3821) 。ERPScan在演示文稿中记录的最后一个漏洞样本为[
**CVE-2017-3548**](https://erpscan.com/advisories/erpscan-17-020-xxe-via-doctype-peoplesoft/)
，简单来说，这些漏洞将允许我们提取出PeopleSoft和WebLogic控制台的登录凭证，但拿到这两个控制台的Shell绝非易事。除此之外，由于最后一个XXE漏洞为Blind-XXE，因此我们假设目标网络安装有防火墙软件，并且增加了从本地文件提取数据的难度。
**CVE-2013-3821：集成网关HttpListeningConnector XXE**
    POST /PSIGW/HttpListeningConnector HTTP/1.1
    Host: website.com
    Content-Type: application/xml
    ...
    ]>
       &x;
             your_message_content]]>
**CVE-2017-3548：集成网关PeopleSoftServiceListeningConnector XXE**
    POST /PSIGW/PeopleSoftServiceListeningConnector HTTP/1.1
    Host: website.com
    Content-Type: application/xml
    ...
在这里，我们准备利用这些XXE漏洞来访问localhost的各种服务，并尝试绕过防火墙规则或身份认证机制，但现在的问题是如何找到服务所绑定的本地端口。为了解决这个问题，我们可以访问服务的主页，然后查看cookie内容：
    Set-Cookie: SNP2118-51500-PORTAL-PSJSESSIONID=9JwqZVxKjzGJn1s5DLf1t46pz91FFb3p!-1515514079;
我们可以看到，当前服务所使用的端口为51500。此时，我们就可以通过http://localhost:51500/来访问应用程序了。
**Apache Axis**
其中一个未进行身份验证的服务就是Apache Axis
1.4服务器，所在的URL地址为http://website.com/pspc/services。Apache
Axis允许我们在Java类中通过生成WSDL和帮助代码来构建SOAP终端节点并与之进行交互。为了管理服务器，我们必须与AdminService进行交互。URL地址如下：http://website.com/pspc/services/AdminService。
为了让大家能够更好地理解，我们在下面给出了一个演示样例。在下面这个例子中，一名管理员基于java.util.Random类创建了一个终端节点：
    POST /pspc/services/AdminService
    Host: website.com
    SOAPAction: something
    Content-Type: application/xml
    ...
这样一来，java.util.Random类中的每一个公共方法都可以作为一个Web服务来使用了。在下面的例子中，我们通过SOAP来调用Random.nextInt()：
    POST /pspc/services/RandomService
    Host: website.com
    SOAPAction: something
    Content-Type: application/xml
    ...
响应信息如下：
    HTTP/1.1 200 OK
    ...
                1244788438 
虽然这个管理员终端节点已经屏蔽了外部IP地址，但是当我们通过localhost来访问它时却不需要输入任何的密码。因此，这里也就成为了我们的一个攻击测试点了。由于我们使用的是一个XXE漏洞，因此POST请求在这里就不可行了，而我们需要一种方法来将我们的SOAP
Payload转换为GET请求发送给主机服务器。
**Axis：从POST到GET**
Axis API允许我们发送GET请求。它首先会接收我们给定的URL参数，然后再将其转换为一个SOAP
Payload。下面这段Axis源代码样例会将GET参数转换为一个XML Payload：
    public class AxisServer extends AxisEngine {
        [...]
        {
            String method = null;
            String args = "";
            Enumeration e = request.getParameterNames();
            while (e.hasMoreElements()) {
                String param = (String) e.nextElement();
                if (param.equalsIgnoreCase ("method")) {
                    method = request.getParameter (param);
                }
                else {
                    args += "" + request.getParameter (param) +
                            "";
                }
            }
            String body = "" + args + "";
            String msgtxt = "" +
                    "" + body + "" +
                    "";
        }
    }
为了深入理解它的运行机制，我们再给大家提供一个样例：
    GET /pspc/services/SomeService
         ?method=myMethod
         &parameter1=test1
    &parameter2=test2
上面这个GET请求等同于：
                test1
                test2
然而，当我们尝试使用这种方法来设置一个新的终端节点时，系统却出现了错误。我们的XML标签必须有属性，但我们的代码却做不到这一点。当我们尝试在GET请求中添加标签属性时，情况如下：
    GET /pspc/services/SomeService
         ?method=myMethod+attr0="x"
         &parameter1+attr1="y"=test1
    &parameter2=test2