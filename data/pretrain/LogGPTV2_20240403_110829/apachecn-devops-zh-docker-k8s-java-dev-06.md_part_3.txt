```
目前，Docker 有四种重启策略。让我们现在一个一个地了解他们，从最简单的开始:`no`。
# 不
`no`策略是默认的重启策略，在任何情况下都不会重启容器。实际上，您不必指定此策略，因为这是默认行为。除非您有一些可配置的设置来运行 Docker 容器，否则`no`策略可以用作关闭开关。
# 总是
如果无论命令有什么退出代码，我们都希望容器重新启动，我们可以使用`always`重新启动策略。基本上，它说到做到；Docker 会在每种情况下重启容器。重启策略将始终重启容器。这是真的，即使容器在重新启动之前已经停止。每当 Docker 服务重新启动时，使用总是策略的容器也将重新启动，无论它们是否正在执行。
With the `always` restart policy, the Docker daemon will try to restart the container **indefinitely.**
# 接通故障
这是一种特殊的重启策略，可能是最常用的。通过使用`on-failure`重启策略，您可以指示 Docker 在容器以非零退出状态退出时重启容器，否则不重启。这就是我们开始用退出代码解释重启策略的原因。您可以选择为 Docker 提供尝试重新启动容器的次数。这个重启策略的语法也有点不同，因为使用这个策略，您还可以指定 Docker 自动重启容器的最大尝试次数。
考虑这个例子:
```
$ docker run --restart=on-failure:5 rest-example  
```
前面的命令将使用我们的 REST 服务运行容器，并在失败的情况下尝试重启五次，然后放弃。`on-failures`重启策略的主要好处是，当一个应用以成功的退出代码退出时(这意味着应用中没有错误；它刚执行完)，容器就不会重新启动。容器的重启次数可以通过我们已经知道的`docker inspect`命令获得。例如，要获取具有特定标识或名称的容器的重新启动次数:
```
$ docker inspect -f "{{ .RestartCount }}"   
```
您还可以发现容器上次再次启动的时间:
```
$ docker inspect -f "{{ .State.StartedAt }}"   
```
您应该知道 Docker 在重启容器之间使用延迟，以防止类似洪水的保护。这是一个不断增加的延迟；它从 100 毫秒的值开始，然后 Docker 会将之前的延迟增加一倍。实际上，守护程序将等待 100 毫秒，然后是 200 毫秒、400、800 毫秒，以此类推，直到达到`on-failure`限制，或者当您使用`docker stop,`停止容器，或者通过执行`docker rm -f`命令来执行强制移除。
If a container is successfully restarted, the delay is reset to the default value of 100 milliseconds.
# 除非-停止
同样，与`always`类似，如果我们希望不管退出代码如何都重新启动容器，我们可以使用`unless-stopped`。`unless-stopped`重启策略的行为与`always`相同，但有一个例外，无论退出状态如何，它都将重启容器，但如果容器之前已被置于停止状态，则不要在守护程序启动时启动它。这意味着，使用`unless-stopped`重启策略，如果容器在重启前正在运行，一旦系统重启，容器就会重启。当 Docker 容器中的应用退出时，该容器也将暂停。如果在容器中运行的应用崩溃，容器将停止，并且该容器将保持停止状态，直到有人或某物重新启动它。
在对容器应用重启策略之前，最好先考虑容器将用于做什么样的工作。这也取决于将在容器上运行的软件类型。例如，数据库可能应该应用`always`或`unless-stopped`策略。如果您的容器应用了一些重启策略，当您使用`docker ps`命令列出您的容器时，它将显示为`Restarting`或`Up`状态。
# 更新正在运行的容器上的重启策略
有时，需要在容器已经启动后更新 Docker 运行时参数，*在运行中*。例如，如果您想防止容器消耗 Docker 主机上的太多资源。要在运行时设置策略，我们可以使用`docker update`命令。除了其他运行时参数(例如内存或中央处理器限制，我们将在本章后面讨论)，命令`docker update`为您提供了在运行的容器上更新重启策略的选项。语法非常简单，您只需要提供您希望容器拥有的新重启策略以及容器的 ID 或名称:
```
$ docker update --restart=always   
```
在容器上运行`docker update`命令后，新的重启策略将立即生效。另一方面，如果您在停止的容器上执行`update`命令，该策略将在您稍后启动容器时使用。可能的选项与启动容器时可以指定的选项完全相同:
*   `no`(默认)
*   `always`
*   `on-failure`
*   `unless-stopped`
If you have more than one container running on the Docker host, and want to specify a new restart policy on all of them at once, just provide all of their IDs or names, separated by a space.
您还可以看到使用`docker events`命令应用了哪个重启策略，您在上一节已经知道了。可用于观察容器已报告的运行时事件历史的`docker events`也将报告`docker update`事件，为您提供已更改内容的详细信息。如果容器已经应用了重启策略，事件将被发布。如果您想检查正在运行的容器的重启策略，请使用带有容器标识的`docker inspect`或带有为值路径设置的`--format`参数的名称:
```
$ docker inspect --format '{{ .HostConfig.RestartPolicy.Name }}'   
```
如果您的映像是自包含的，并且不需要执行更复杂的编排任务，那么在逐个容器的基础上设置重启策略的能力非常好。重启策略不是运行容器时唯一可以更改的参数。
# 资源的运行时约束
在运行时限制 Docker 容器对资源的使用可能会很有用。Docker 为您提供了许多设置内存、CPU 使用或磁盘访问使用限制的可能性。让我们从设置内存限制开始。
# 记忆
值得了解的是，默认情况下，也就是说，如果您使用没有任何约束的默认设置，运行的容器可以使用所有的主机内存。要改变这种行为，我们可以使用`docker run`命令的`--memory`(或简称为`-m`)开关。它采用通常的后缀`k`、`m`或`g`，分别代表千字节、兆字节和千兆字节。
设置了内存约束的`docker run`命令的语法如下:
```
$ docker run -it -m 512m ubuntu  
```
前面的命令将执行 Ubuntu 映像，其最大内存可由半个千兆字节的容器使用。
If you do not set the limit on memory that the container can allocate, this can lead to random issues where a single container can easily make the whole host system unstable and/or unusable. So it's a wise decision to always use the memory constraints on the container.
除了用户内存限制，还有内存预留和内核内存限制。让我们解释一下什么是内存预留限制。在正常工作条件下，正在运行的容器可以，并且很可能会，使用所需的内存，直到您使用`docker run`命令的`--memory` ( `-m`)开关设置的限制。当应用内存预留时，Docker 将检测到内存不足的情况，并将尝试强制容器将其消耗限制在预留限制内。如果不设置内存预留限制，将与`-m`开关设置的硬内存限制完全相同。
内存预留不是一个硬限制特性。不能保证不会超过限额。内存预留功能将尝试确保根据预留设置分配内存。
考虑以下示例:
```
$ docker run -it -m 1G --memory-reservation 500M ubuntu /bin/bash  
```
前面的命令将硬内存限制设置为`1g`，然后将内存预留设置为半千兆。设置了这些约束后，当容器消耗的内存大于`500M`且小于`1G`时，Docker 会尝试将容器内存缩小到小于`500M`。
在下一个示例中，我们将在不设置硬内存限制的情况下设置内存预留:
```
$ docker run -it --memory-reservation 1G ubuntu /bin/bash  
```
在前面的例子中，当容器启动时，它可以使用它的进程所需要的内存。`--memory-reservation`开关设置将防止容器长时间消耗太多内存，因为每次内存回收都会将容器的内存使用量缩小到预留中指定的大小。
内核内存与用户内存完全不同，主要区别是内核内存不能换出到磁盘。它包括栈页、板页、套接字内存压力和 TCP 内存压力。您可以使用- kernel-memory 开关设置内核内存限制来约束这些类型的内存。与设置用户内存限制一样，只需为千字节、兆字节或千兆字节分别提供一个带有后缀的数字，如`k`、`b`和`g,`，尽管以千字节为单位设置可能是非常罕见的情况。
例如，每个进程都会吃掉一些栈页。通过限制内核内存，您可以防止在内核内存使用率过高时启动新进程。此外，由于主机无法将内核内存交换到磁盘，因此容器会通过消耗过多的内核内存来阻塞整个主机服务。
设置内核内存限制很简单。我们可以单独设置`--kernel-memory`，不用`-m`限制总内存，如下例:
```
$ docker run -it --kernel-memory 100M ubuntu  /bin/bash  
```
在前面的例子中，容器中的进程可以按需取内存，但只能消耗`100M`的内核内存。我们还可以设置硬内存限制，如以下命令所示:
```
$ docker run -it -m 1G --kernel-memory 100M ubuntu /bin/bash  
```
在前面的命令中，我们设置了内存和内核内存，所以容器中的进程总共可以使用`1G`内存，而这个`1G`将包括内核内存的`100M`。
另一个与内存相关的约束是 swappines 约束，它在运行容器时非常有用。我们通过使用`--memory-swappiness`开关到`docker run`命令来应用约束。当您想要避免与内存交换相关的性能下降时，这可能会很有帮助。`--memory-swappiness`开关的参数是可以换出的匿名内存页面的百分比，因此它从`0`到`100`取值。将该值设置为零，将根据您的内核版本，禁用交换或使用最小交换。相比之下，`100`值将所有匿名页面设置为换出的候选页面。例如:
```
$ docker run -it --memory-swappiness=0 ubuntu /bin/bash  
```
在前面的命令中，我们将交换完全转向我们的`ubuntu`容器。
除了设置内存使用限制之外，您还可以指示 Docker 如何将处理器能力分配给它将要运行的容器。
# 处理器
通过使用`docker run`命令开关的`-c`(或等效的`--cpu-shares`)，可以指定容器可以分配的 CPU 份额值。默认情况下，每个新容器都有 1024 个 CPU 份额，并且所有容器都获得相同部分的 CPU 周期。可以通过相对于所有其他正在运行的容器的权重来移动容器的 CPU 份额权重来改变该百分比。但是请注意，您无法设置容器可以使用的精确处理器速度。这是一个**相对权重**，与真实处理器速度无关。事实上，没有办法准确地说一个容器应该有权只使用主机处理器的 2 GHz。
CPU share is just a number, it's not related at all to the CPU speed.
如果我们启动两个容器，并且两个容器都将使用 100%的 CPU，那么处理器时间将在两个容器之间平均分配。原因是两个容器将具有相同数量的处理器份额。但是如果您将一个容器的处理器份额限制为 512，它将只获得一半的 CPU 时间。这并不意味着它只能使用一半的 CPU 该比例仅在 CPU 密集型进程运行时适用。如果另一个容器(与`1024`共享)空闲，我们的容器将被允许使用 100%的处理器时间。根据系统上运行的容器数量，实际的 CPU 时间会有所不同。用具体的例子更容易理解。
考虑三个容器，一个(姑且称之为`Container1`)为`1024`设置`--cpu-shares`，另外两个(`Container2`和`Container3`)为`512`设置`--cpu-shares`。当所有三个容器中的进程试图使用所有的 CPU 功率时，`Container1`将获得总 CPU 时间的 50%，因为与其他运行容器的总和相比，(`Container2`和`Container3`)它拥有允许的 CPU 使用量的一半。如果我们添加第四个容器(`Container4`)的`--cpu-share`为 1024，我们的第一个`Container1`将只能获得 33%的 CPU，因为相对来说，它现在分配了总 CPU 功率的三分之一。`Container2`将获得 16.5%，`Container3`也是 16.5%，最后一个，`Container4`同样，将被允许使用 33%的 CPU。
虽然`docker run`命令的`-c`或`--cpu_shares`标志相对于所有其他运行容器的权重修改了容器的 CPU 份额权重，但它并不限制容器从主机使用 CPU。但是还有另一个标志来限制容器的 CPU 使用:`--cpu-quota`。其默认值为`100000`，表示允许 100%的 CPU 使用。我们可以使用`--cpu-quota`来限制 CPU 的使用，例如:
```
$ docker run -it  --cpu-quota=50000 ubuntu /bin/bash  
```
在前面的命令中，容器的限制是 CPU 资源的 50%。`--cpu-quota`通常与`docker run`的`--cpu-period`旗一起使用。这是 CPU CFS(完全公平调度程序)周期的设置。默认周期值为 100000，即 100 毫秒。看一下这个例子:
```
$ docker run -it --cpu-quota=25000 --cpu-period=50000  ubuntu /bin/bash  
```
这意味着容器每 50 ms 可以获得 50%的 CPU 使用率。
限制 CPU 份额和使用并不是我们可以在容器上设置的唯一与处理器相关的约束。我们还可以将容器的进程分配给特定的处理器或处理器内核。当我们想要这样做时，`docker run`命令的`--cpuset`开关就派上了用场。考虑以下示例:
```
$ docker run -it --cpuset 4 ubuntu  
```
前面的命令将运行`ubuntu`映像，并允许容器使用所有四个处理器内核。要启动容器并只允许使用一个处理器内核，您可以将`--cpuset`值更改为`1`: