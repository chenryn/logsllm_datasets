perror (”truncate”);
return -1;
}
return 0;
}
 45 的文件
Edward Teach was a notorious English pirate.
2.10 I/O 多路复用
  程           文 件    上        
（stdin、进程间以及同时操作文件。件的
（GUI的能上的件。∗
程处理文件的进程文
件上同时。文件处备读写的同时操作文
件的。程出备的文件
( read() 调读)进程将
能操作文件。能的
。然文件何能
。文件的 I/O 相的 ()能文件
文件以处。
对程同时的的。
: 设备出进程
间相的文件上。的 IPC 文件
能。的操作
 I/O 以作的方。
I/O以 I/O 的。方
∗对何写 GUI 的的 GNOME  GLib的
提的。件。
– 49 –
 2 
文件 I/O
方效率。进程以的方式 I/O
操作的文件备进 I/O。设。
程以的将更效以处理进工作或更
文件以进 I/O 时。
进 I/O 。
I/O 文件上同时以读
写时。时 I/O 的 I/O 
的设以原
1. I/O 何文件备 I/O 时我
2. 或更文件处。
3. 备
4. 的处理 I/O 的文件。
5. 步新。
Linux 提 I/O 方 select poll  epoll。我们
我们将 Linux 的方。
2.10.1 select()
select() 调提实同步 I/O 的
#include 
#include 
#include 
int select (int n,
fd_set *readfds,
fd_set *writefds,
fd_set *exceptfds,
struct timeval *timeout);
FD_CLR(int fd, fd_set *set);
FD_ISSET(int fd, fd_set *set);
FD_SET(int fd, fd_set *set);
FD_ZERO(fd_set *set);
– 50 –
 2 
文件 I/O
的文件备 I/O 或超的时间 select() 调
。
的文件以同的件。 readfds 集
的文件读（读操作以的
。 writefds 集的文件写操作以
。 exceptefds 的文件出异或
出 (out-of-band) （。的集能
空 (NULL)相的 select() 对时间进。
时集对的 I/O 的文件。
 readfds 集文件 7  9。调时 7 集
文件备进 I/O 。 9 集能
读时。（我能能调
。 select() 调时将文件
的。∗
 n集文件的。 select()
的调的文件将给。
timeout  timeval 的
#include 
struct timeval {
long tv_sec; /* seconds */
long tv_usec; /* microseconds */
};
 NULL即时文件处 I/O 
select() 调将 tv sec  tv usec 。时的
 Unix 的。的调新
（集的文件。新的 Linux 自将的时
间。时 5 文件备时 3  tv.tv sec
时 2。
∗ select()  poll() 的。将的 epoll()
以方式工作。操作单时 I/O 件。
– 51 –
 2 
文件 I/O
时的零调即调时件对
的文件何件。
集的文件操作操作进理。
 Unix 的方式实将实。
FD ZERO 集文件。 select() 调
。
fd_set writefds;
FD_ZERO(&writefds);
FD SET 集文件 FD CLR 集
文件。
FD_SET(fd, &writefds); /* add ’fd’ to the set */
FD_CLR(fd, &writefds); /* oops, remove ’fd’ from
the set */
设的 FD CLR。。
FD ISSET 文件给集。
零 0 示。 select() 调 FD ISSET 
文件。
if (FD_ISSET(fd, &readfds))
/* ’fd’ is readable without blocking! */
文件集的以对文件的上文
件的 FD SETSIZE 设。 Linux 上
 1024。我们将的作。
2.10.2 返回值和错误码
时 select() 集 I/O 的文件的。
给出时能 0。时 -1 errno 设
EBADF
集的文件。
– 52 –
 2 
文件 I/O
EINTR
时以新调。
EINVAL
 n 或给出的时。
ENOMEM 的内存。
2.10.2.1 select() 示例程序
我们的程然单对 select() 的
。子 stdin 的的时设 5 。
文件实上 I/O 调的。
#include 
#include 
#include 
#include 
#define TIMEOUT 5 /* select timeout in seconds */
#define BUF_LEN 1024 /* read buffer in bytes */
int main (void)
{
struct timeval tv;
fd_set readfds;
int ret;
/* Wait on stdin for input. */
FD_ZERO(&readfds);
FD_SET(STDIN_FILENO, &readfds);
/* Wait up to five seconds. */
tv.tv_sec = TIMEOUT;
tv.tv_usec = 0;
/* All right, now block! */
ret = select (STDIN_FILENO + 1,
&readfds,
NULL,
NULL,
– 53 –
 2 
文件 I/O
&tv);
if (ret == -1) {
perror (”select”);
return 1;
} else if (!ret) {
printf (”%d seconds elapsed.\n”, TIMEOUT);
return 0;
}
/*
* Is our file descriptor ready to read?
* (It must be, as it was the only fd that
* we provided and the call returned
* nonzero, but we will humor ourselves.)
*/
if (FD_ISSET(STDIN_FILENO, &readfds)) {
char buf[BUF_LEN+1];
int len;
/* guaranteed to not block */
len = read (STDIN_FILENO, buf, BUF_LEN);
if (len == -1) {
perror (”read”);
return 1;
}
if (len) {
buf[len] = ’\0’;
printf (”read: %s\n”, buf);
}
return 0;
}
fprintf (stderr, ”This should not happen!\n”);
– 54 –
 2 
文件 I/O
return 1;
}
2.10.2.2 用 select() 实现可移植的 sleep()
 select()  Unix 实相对的
将 select() 的的。方将
集设空 (NULL), 将超时设空 (non-NULL) 实。
struct timeval tv;
tv.tv_sec = 0;
tv.tv_usec = 500;
/* sleep for 500 microseconds */
select (0, NULL, NULL, NULL, &tv);
然 Linux 提的的实内我们将
。
2.10.2.3 pselect()
 4.2BSD 的 select()  POSIX 自的方
pselect() POSIX 1003.1g-2000 的 POSIX 1003.1-2001 对 pselect() 
#define _XOPEN_SOURCE 600
#include 
int pselect (int n,
fd_set *readfds,
fd_set *writefds,
fd_set *exceptfds,
const struct timespec *timeout,
const sigset_t *sigmask);
– 55 –
 2 
文件 I/O
FD_CLR(int fd, fd_set *set);
FD_ISSET(int fd, fd_set *set);
FD_SET(int fd, fd_set *set);
FD_ZERO(fd_set *set);
pselect()  select() 同
1. pselect() 的 timeout  timespec  timeval 。 time-
spec 理上更。实上
上。
2. pselect() 调 timeout 。调时
新。
3. select() 调 sigmask 。设零时 pselect() 的
同 select()。
timespec 式
#include 
struct timespec {
long tv_sec; /* seconds */
long tv_nsec; /* nanoseconds */
};
 pselect()  Unix 工的原 sigmask 以
文件间的件（。设
处理程设（处理程进程
调 select() 。调间
能。 pselect() 提的
以。的处理。 pselect()
内的。。
2.6.16 内 Linux 实的 pselect() 调 glibc
提的单的对 select() 的。方件出的小
。真调。
 pselect() （相对的进 se-
lect()出性。
– 56 –
 2 
文件 I/O
2.10.3 poll()
poll() 调 System V 的 I/O 方。 select()
的 select() （出性的
#include 
int poll (struct pollfd *fds, unsigned int nfds,
int timeout);
 select() 的的文件集同 poll() 
单的 nfds  pollfd 的 fds 。
#include 
struct pollfd {
int fd; /* file descriptor */
short events; /* requested events to watch */
short revents; /* returned events witnessed */
};
 pollfd 单的文件。以, 
poll() 文件。的 events 段的文件
件的。设段。 revents 段文件上
的件的。内时设段。 events 段的件
能 revents 段。的件
POLLIN
读。
POLLRDNORM 读。
POLLRDBAND
读。
POLLPRI
读。
POLLOUT
写操作。
POLLWRNORM 写。
POLLBAND
写。
POLLMSG
 SIGPOLL 。
– 57 –
 2 
文件 I/O
件能 revents 
POLLER
给出文件上。
POLLHUP
文件上件。
POLLNVAL 给出的文件。
 events 时。 poll() select()
异。
POLLIN | POLLPRI  select() 的读件 POLLOUT | POLLWRBAND
 select() 的写件。 POLLIN  POLLRDNORM | POLLRDBAND
POLLOUT  POLLWRNORM。
文件读写我们设 events  POLLIN
| POLLOUT。  时我 们 将  revents     相  的  。  设  
POLLIN文件能读。设 POLLOUT文件
能写。相以设示以文
件上读写。
timeout 何 I/O 时间的以。
示。零示调即出备的 I/O
何件。 poll() 同即。
2.10.3.1 返回值和错误码
时 poll() 零 revents 段的文件。超时
何件零。时 -1 errno 设
EBADF
或更的文件。
EFAULT
 fds 的超出进程空间。
EINTR
件以新调。
EINVAL
nfds 超 RLIMIT NOFILE 。
ENOMEM 的内存。
2.10.3.2 poll() 的例子
我们 poll() 的程同时 stdin 读 stdout
写:
#include 
– 58 –
 2 
文件 I/O
#include 
#include 
#define TIMEOUT 5 /* poll timeout, in seconds */
int main (void)
{
struct pollfd fds[2];
int ret;
/* watch stdin for input */
fds[0].fd = STDIN_FILENO;
fds[0].events = POLLIN;
/* watch stdout for ability to write (almost
always true) */
fds[1].fd = STDOUT_FILENO;
fds[1].events = POLLOUT;
/* All set, block! */
ret = poll (fds, 2, TIMEOUT * 1000);
if (ret == -1) {
perror (”poll”);
return 1;
}
if (!ret) {
printf (”%d seconds elapsed.\n”, TIMEOUT);
return 0;
}
if (fds[0].revents & POLLIN)
printf (”stdin is readable\n”);
– 59 –
 2 
文件 I/O
if (fds[1].revents & POLLOUT)
printf (”stdout is writable\n”);
return 0;
}
我们的
$ ./poll
stdout is writable
将文件我们件
$ ./poll 
int ppoll (struct pollfd *fds,
nfds_t nfds,
const struct timespec *timeout,
const sigset_t *sigmask);
– 60 –
 2 
文件 I/O
 pselect()  timeout 以时 sigmask 
提处理的。
2.10.4 poll() 与 select()
们的工作 poll() 调然 select()
• poll() 的文件。
• poll() 对的文件时更效率。 select() 
 900 的文件内集的
。
• select() 的文件集小的以作出集
小 select() 以的文件的效率
。能集的时对的操作效率
。∗ poll() 以小的。或
。
•  select()文件集时新的
调新们。 poll() 调离（events 段
出（revents 段即。
• select() 的 timeout 时的。的新
。然 pselect() 。
 select() 调的的方
• poll()  Unix  poll()以 select() 的性更。
• select() 提更的超时方。 ppoll()  pselect() 理
上提的实何调以的提
的。
 poll()  select() 更的 epoll  Linux 的 I/O 
方我们将。
2.11 内核内幕
 Linux 内何实 I/O 的集的内子
文件（VFS页存页写。子 Linux 的 I/O
∗的的以零操作时
对进。然工作的。
– 61 –