j∈A
i /∈A
(cid:11).
x(i,j)
h
, ∆(i)
B
(5) shows that this term is viable to passing the MAC check. Furthermore, if the computing this
term for a diﬀerent x(cid:48)
i /∈A ∆(i) because the diﬀerence between the terms
is
(cid:104)g · xh − g · x(cid:48)
h, ∆(i)
B (cid:105) = (xh − x(cid:48)
∆(i).
h) ·(cid:88)
i /∈A
We now turn to the discussion of F = Fp. The main diﬀerence to the case of F = F
i /∈A ∆(i) is uniformly random the probability of this happening is 2− log |F|.
(cid:3)
2k is that
there is no bijection between ∆ ∈ F = Fp and ∆ ∈ Flog p
. While there are canonical maps both
to Fp, the former is not surjective
ways, bit decomposition from Fp to Flog p
and the latter not injective. This implies that the solutions of (6) or (7) are not necessarily vectors
and (cid:104)g, ∆(cid:105) from Flog p
p
p
p
compute
Since(cid:80)
34
of bits rather than elements of Fp. Nevertheless, the lemma below proves that, if ˜Sf contains at
least 2(n−|A|−1) log |F| vectors consisting only of bits (which is necessary for an adversary to pass the
MAC check), then it has dimension at least (n − |A| − 1) log |F| for all f. Together with the fact
that ˜S∆ has dimension at most (n − |A|) log |F| by deﬁnition and ˜Sf ∩ ˜Sf(cid:48) = {0} for f (cid:54)= f(cid:48) ∈ [l], it
follows that l ≤ log |F| as above.
(cid:3)
p containing 2l elements of {0, 1}k. Then the dimension of V is
Lemma 2. Let V be subspace of Fk
at least l.
Proof. We prove that if the dimension of V is l, it cannot contain more than 2l elements of {0, 1}k.
There exists a basis v1, . . . , vl such that vi+1 starts with more zeroes than vi for all i = 1, . . . , l− 1.
Such a basis can be constructed from any basis using Gaussian elimination. Every element of V has
i=1 aivi. Now consider the following algorithm for generating an element of V ∩{0, 1}k.
For i ∈ [l], assume that {aj}1≤j<i have already been chosen. Furthermore let g such that the g-th
element of vi is not zero but the g-th element of vi+1, . . . , vl is. This exists by deﬁnition. Then,
i=1 aivi be in {0, 1}. Iterating
over a1, . . . , al, this proves that the size of V ∩ {0, 1}k is at most 2l.
the form(cid:80)l
there exist only two choices of ai in order to let the g-th element of(cid:80)l
C Triple generation security proof
Here we give a proof of Theorem 3. First we need to recall some basic facts and deﬁnitions about
entropy.
C.1 Entropy deﬁnitions
Given a probability distribution X over a sample space S, we denote by PX the probability distri-
bution of X.
Deﬁnition 1. Let X be a discrete probability distribution. The min-entropy of X is deﬁned as
(cid:16)
H∞(X) = − log
(cid:17)
max
x
Pr [X = x]
Intuitively, the min-entropy of a distribution is a measure of how predictable the distribution
is. We now state some basic properties of min-entropy that easily follow from the deﬁnition:
Proposition 1.
1. If U is the uniform distribution over a sample space S, then
H∞(U) = log |S|
2. If X is the joint distribution of X1, . . . , Xn, then there exists i ∈ [n] such that
H∞(Xi) ≥ H∞(X)/n
3. Let X and Y be independent distributions over a ﬁnite ﬁeld F. Then
H∞(X + Y ) ≥ max(H∞(X), H∞(Y ))
35
We will also use the concept of universal hashing, due to Carter and Wegman [12].
Deﬁnition 2. Let T be a set and H = {ht}t∈t be a family of keyed hash function ht : {0, 1}n →
{0, 1}k. Then {ht}t∈T is a 2-universal hash function family, if for every x, y ∈ {0, 1}n such that
x (cid:54)= y, we have that
[ht(x) = ht(y)] ≤ 2−k.
Pr
t∈T
The following is a version of the Leftover Hash Lemma, phrased over ﬁnite ﬁelds.
Lemma 3 (Leftover Hash Lemma [23]). Let S and T be two sets, and F a ﬁnite ﬁeld. Let X be a
random variable over S and H = {ht}t∈T , ht : S → F, a 2-universal hash function. Let US and UT
be the uniform distribution over S and T , respectively. If
then for t $← T (independent of X), we have
H∞(X) ≥ 2κ + log2 |F|
(ht(X), Ut) s≈ (Us, Ut)
for statistical security parameter κ.
C.2 Proof of Theorem 3
Theorem 7 (Theorem 3, restated). The protocol ΠTriple (Protocol 4) securely implements FTriple
in the (FROT,F(cid:74)·(cid:75))-hybrid model, with statistical security parameter log2 |F|, for τ = 4.
Proof. Let A be a real world adversary corrupting up to n− 1 parties and A ⊂ P the set of corrupt
parties. We describe a simulator S for A who interacts with FPrep and simulates each received
message of A in the protocol ΠTriple from the honest parties and from the other functionalities,
stage by stage.
, i (cid:54)∈ A to A.
ROT and sends q(j,i)
, j ∈ A
Simulating the Multiply phase. The simulator emulates F τ k,k
, q(j,i)
to A. Then for each j ∈ A, S receives d(j,i) by A, for each j (cid:54)= i, sets b(j,i) = d(j,i) − q(j,i)
0,h + q(j,i)
1,h ,
h ∈ [τ · k], and sends random d(i,j)
If Pj, j ∈ A, gives any inconsistent b(j,i), then S computes δ(j,i)
, as
in Section 5.1. Similarly, if some Pj inputs inconsistent values a(j), when playing with Pi, i (cid:54)∈ A,
then S computes δa[h](j,i) ∈ Fτ and δ(i)
Simulating the Combining phase. All the computations are local, so S just emulates FRand
and proceeds according to the protocol.
b =(cid:80)
a =(cid:80)
∈ (Fk)τ and δ(i)
j∈A δ(j,i)
a
.
0
1
h
b
j∈A δ(j,i)
b
Simulating the Authentication phase. Now S emulates F(cid:74)·(cid:75) with inputs from the corrupt
parties provided by A. So if some inputs are inconsistent with previous computation, S deﬁnes
eAuth, ˆeAuth to be the deviation introduced by A in this step. Note that here eAuth, ˆeAuth (cid:54)= 0
essentially means that the adversary authenticates values diﬀerent from those computed in the
previous phases. If A sends Abort to F(cid:74)·(cid:75) then S sends Abort to FPrep.
36
Simulating the Sacriﬁce step. The simulator emulates the functionalities FRand and F(cid:74)·(cid:75).Open
honestly. Emulating F(cid:74)·(cid:75).Check, S aborts randomly depending on how many errors there are.
Indistinguishability. Now we argue indistinguishability. During the Multiply command, in
both the simulated and the hybrid model, Z can see the mask d(i,j)
, for each i (cid:54)∈ A, but they look
perfectly random as the values q(i,j)
Then the Amplify/Combine command do not require communication and in the Authenticate
are uniformly random and never revealed to Z.
1−a(j)
command the simulator honestly runs F(cid:74)·(cid:75), so the view of Z up to the point where the values ρ and
σ are opened in the Sacriﬁce step, has exactly the same distribution in both the execution. In the
openings, we need to prove that the values produced in the real world and the simulated random
values are indistinguishable.
Let us consider a = (cid:104)a, r(cid:105) and ˆa = (cid:104)a, ˆr(cid:105), and let X be the joint distribution of a = (a1, . . . , aτ ).
h ,h
h
For r, ˆr $← Fτ , let hr,ˆr : Fτ → F2 be deﬁned by
hr,ˆr (a) =(cid:0)(cid:104)r, a(cid:105),(cid:104)ˆr, a(cid:105)(cid:1),
Applying the Leftover Hash Lemma (Lemma 3) with S = Fτ and T = Fτ , we have that hr,ˆr(X) is
within statistical distance 2−κ of uniform, provided that
H∞(X) ≥ 2κ + 2 log |F|.
(10)
In this way, if (10) is satisﬁed, it is easy to see that the opened value ρ in the real protocol is
statistically indistinguishable from the uniformly random value used in the simulation.
Towards analyzing the min-entropy of X, we ﬁrst consider the probability of passing the
sacriﬁcing step. We recall that, from Equation (2), after authentication parties obtain values
(cid:74)b(cid:75),(cid:74)a(cid:75),(cid:74)c(cid:75),(cid:74)ˆa(cid:75),(cid:74)ˆc(cid:75), which can be seen as:
c = a · b + ea + eb + eAuth
ˆc = ˆa · b + ˆeb + ˆea + ˆeAuth
where we have deﬁned the errors
τ(cid:88)
τ(cid:88)
h=1
h=1
rh · ea,h =
rh · eb,h =
τ(cid:88)
τ(cid:88)
h=1
h=1
ea =
eb =
rh ·(cid:88)
rh ·(cid:88)
i /∈A
i /∈A
(cid:104)(a(i)[h])B, δ(i)
b [h](cid:105)
b(i) · δ(i)
a [h]
with r = (r1, . . . , rh), and ˆea, ˆeb deﬁned similarly. First of all, if no Abort occurs, we obtain a correct
triple in both worlds with overwhelming probability, as shown by the following claim.
Claim 2. Let A be the set of the corrupt parties and B = P \ A. If the sacriﬁcing step passes then
e = ea + eb + eAuth = 0
37
and
with overwhelming probability.
ˆe = ˆea + ˆeb + ˆeAuth = 0
Proof. This is easy to see, following the same argument used for triple generation with SHE in [18].
In particular, rewriting the value σ in the second opening of sacriﬁcing as s · (c − a · b) − (ˆc − ˆa · b),
and assuming that e, ˆe (cid:54)= 0, then the probability of satisfying the check is 1/|F|, since there is only
one random challenge s ∈ F for which σ would be zero.
We have shown that if the sacriﬁce test passes then e = 0 and the output triple is correct.
However this could happen even if ea, eb and eAuth are not (all) zero.
Claim 3. If the sacriﬁcing step passes then δ(i)
probability.
Proof. Suppose that {δ(i)
a [h]}h,i are not all zero. If the sacriﬁcing passes, then by Claim 2,
a [h] = 0, for all i (cid:54)∈ A and h ∈ [τ], with overwhelming
−eAuth = ea + eb =(cid:88)
rh ·(cid:0)(cid:88)
h∈τ
i /∈A
a [h] +(cid:88)
i /∈A
b(i) · δ(i)
b [h](cid:105)(cid:1),
(cid:104)a(i)
B [h], δ(i)
where {b(i)}i /∈A are uniformly random in F and all other values are independent of {b(i)}i /∈A. So
the probability of passing the check is the same as the probability of guessing b(i), i.e. 1/|F|.
This shows that eb = ˆeb = 0. Consider now the error
ea =(cid:88)
rh ·(cid:88)
h∈τ
i /∈A
(cid:104)a(i)
B [h], δb[h](i)(cid:105),
and let m = n − |A| be the number of honest parties, and S the set of all possible honest shares
(a(i)
B )i(cid:54)∈A of aB, which are determined by the adversarial errors, and for which the sacriﬁce would
B )i(cid:54)∈A is uniformly distributed in S, and so its min-entropy is log|S|. Using
pass. The value (a(i)
B has min-entropy at least log |S|/m. Since at least
Proposition 1, there exists an i such that a(i)
one a(i)
B is independent, it follows that the shared value
B has min-entropy log |S|/m, and each a(i)
B has min-entropy at least log |S|/m.
aB =(cid:80)
i∈[n] a(i)
Also, let β be the probability of passing the sacriﬁce, so β := |S|
random from a set of size 2mkτ . Writing β = 2−c for some c ≥ 0, we get
2mkτ , since (a(i)
B )i(cid:54)∈A is chosen at
H∞(a) ≥ log |S|
m
= k · τ − c
m
log (β · 2mkτ )
=
m
≥ k · τ − c
(11)
Noting that k = (cid:100)log|F|(cid:101), (11) implies that (10) is satisﬁed for κ = (k(τ −2)− c)/2. Now the overall
distinguishing advantage of the environment (ignoring the failure events in the previous claims that
occur with negligible probability) is obtained by multiplying the probability of passing the sacriﬁce
38
check and the probability of distinguishing the output distribution from random (given that the
sacriﬁce passed), so this is given by
β · 2−κ = 2−κ−c = 2−k(τ−2)/2−c/2
For this to be no more than 2−k (for any c ≥ 0) it suﬃces to set the number of triples to combine to
τ = 4. Note that if the ﬁeld size is much larger than the statistical security parameter, say k = 2κ,
then we only need distinguishing advantage ≤ 2−k/2, so could combine just τ = 3 triples to ensure
security.
The ﬁnal analysis in this proof also gives the following special case as a corollary.
Corollary 2 (Corollary 1, restated). If τ = 3 then ΠTriple securely implements FTriple in the
(FROT,F(cid:74)·(cid:75))-hybrid model with statistical security parameter k/2.
39