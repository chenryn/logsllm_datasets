to trigger any \f(CW\*(C`_\|_DIE_\|_\*(C'\fR hooks that user code may have installed.
You can use the \f(CW\*(C`local $SIG{_\|_DIE_\|_}\*(C'\fR construct for this purpose,
as shown in this example:
.Sp
.Vb 3
\&    # a very private exception trap for divide-by-zero
\&    eval { local $SIG{'__DIE__'}; $answer = $a / $b; };
\&    warn $@ if $@;
.Ve
.Sp
This is especially significant, given that \f(CW\*(C`_\|_DIE_\|_\*(C'\fR hooks can call
\&\f(CW\*(C`die\*(C'\fR again, which has the effect of changing their error messages:
.Sp
.Vb 7
\&    # __DIE__ hooks may modify error messages
\&    {
\&       local $SIG{'__DIE__'} =
\&              sub { (my $x = $_[0]) =~ s/foo/bar/g; die $x };
\&       eval { die "foo lives here" };
\&       print $@ if $@;                # prints "bar lives here"
\&    }
.Ve
.Sp
Because this promotes action at a distance, this counterintuitive behavior
may be fixed in a future release.
.Sp
With an \f(CW\*(C`eval\*(C'\fR, you should be especially careful to remember what's
being looked at when:
.Sp
.Vb 2
\&    eval $x;            # CASE 1
\&    eval "$x";          # CASE 2
.Ve
.Sp
.Vb 2
\&    eval '$x';          # CASE 3
\&    eval { $x };        # CASE 4
.Ve
.Sp
.Vb 2
\&    eval "\e$$x++";      # CASE 5
\&    $$x++;              # CASE 6
.Ve
.Sp
Cases 1 and 2 above behave identically: they run the code contained in
the variable \f(CW$x\fR.  (Although case 2 has misleading double quotes making
the reader wonder what else might be happening (nothing is).)  Cases 3
and 4 likewise behave in the same way: they run the code \f(CW'$x'\fR, which
does nothing but return the value of \f(CW$x\fR.  (Case 4 is preferred for
purely visual reasons, but it also has the advantage of compiling at
compile-time instead of at run\-time.)  Case 5 is a place where
normally you \fIwould\fR like to use double quotes, except that in this
particular situation, you can just use symbolic references instead, as
in case 6.
.Sp
\&\f(CW\*(C`eval BLOCK\*(C'\fR does \fInot\fR count as a loop, so the loop control statements
\&\f(CW\*(C`next\*(C'\fR, \f(CW\*(C`last\*(C'\fR, or \f(CW\*(C`redo\*(C'\fR cannot be used to leave or restart the block.
.Sp
Note that as a very special case, an \f(CW\*(C`eval ''\*(C'\fR executed within the \f(CW\*(C`DB\*(C'\fR
package doesn't see the usual surrounding lexical scope, but rather the
scope of the first non-DB piece of code that called it. You don't normally
need to worry about this unless you are writing a Perl debugger.
.IP "exec \s-1LIST\s0" 8
.IX Item "exec LIST"
.PD 0
.IP "exec \s-1PROGRAM\s0 \s-1LIST\s0" 8
.IX Item "exec PROGRAM LIST"
.PD
The \f(CW\*(C`exec\*(C'\fR function executes a system command \fIand never returns\fR\-\-
use \f(CW\*(C`system\*(C'\fR instead of \f(CW\*(C`exec\*(C'\fR if you want it to return.  It fails and
returns false only if the command does not exist \fIand\fR it is executed
directly instead of via your system's command shell (see below).
.Sp
Since it's a common mistake to use \f(CW\*(C`exec\*(C'\fR instead of \f(CW\*(C`system\*(C'\fR, Perl
warns you if there is a following statement which isn't \f(CW\*(C`die\*(C'\fR, \f(CW\*(C`warn\*(C'\fR,
or \f(CW\*(C`exit\*(C'\fR (if \f(CW\*(C`\-w\*(C'\fR is set  \-  but you always do that).   If you
\&\fIreally\fR want to follow an \f(CW\*(C`exec\*(C'\fR with some other statement, you
can use one of these styles to avoid the warning:
.Sp
.Vb 2
\&    exec ('foo')   or print STDERR "couldn't exec foo: $!";
\&    { exec ('foo') }; print STDERR "couldn't exec foo: $!";
.Ve
.Sp
If there is more than one argument in \s-1LIST\s0, or if \s-1LIST\s0 is an array
with more than one value, calls \fIexecvp\fR\|(3) with the arguments in \s-1LIST\s0.
If there is only one scalar argument or an array with one element in it,
the argument is checked for shell metacharacters, and if there are any,
the entire argument is passed to the system's command shell for parsing
(this is \f(CW\*(C`/bin/sh \-c\*(C'\fR on Unix platforms, but varies on other platforms).
If there are no shell metacharacters in the argument, it is split into
words and passed directly to \f(CW\*(C`execvp\*(C'\fR, which is more efficient.
Examples:
.Sp
.Vb 2
\&    exec '/bin/echo', 'Your arguments are: ', @ARGV;
\&    exec "sort $outfile | uniq";
.Ve
.Sp
If you don't really want to execute the first argument, but want to lie
to the program you are executing about its own name, you can specify
the program you actually want to run as an \*(L"indirect object\*(R" (without a
comma) in front of the \s-1LIST\s0.  (This always forces interpretation of the
\&\s-1LIST\s0 as a multivalued list, even if there is only a single scalar in
the list.)  Example:
.Sp
.Vb 2
\&    $shell = '/bin/csh';
\&    exec $shell '-sh';          # pretend it's a login shell
.Ve
.Sp
or, more directly,
.Sp
.Vb 1
\&    exec {'/bin/csh'} '-sh';    # pretend it's a login shell
.Ve
.Sp
When the arguments get executed via the system shell, results will
be subject to its quirks and capabilities.  See \*(L"`STRING`\*(R" in perlop
for details.
.Sp
Using an indirect object with \f(CW\*(C`exec\*(C'\fR or \f(CW\*(C`system\*(C'\fR is also more
secure.  This usage (which also works fine with \fIsystem()\fR) forces
interpretation of the arguments as a multivalued list, even if the
list had just one argument.  That way you're safe from the shell
expanding wildcards or splitting up words with whitespace in them.
.Sp
.Vb 1
\&    @args = ( "echo surprise" );
.Ve
.Sp
.Vb 3
\&    exec @args;               # subject to shell escapes
\&                                # if @args == 1
\&    exec { $args[0] } @args;  # safe even with one-arg list
.Ve
.Sp
The first version, the one without the indirect object, ran the \fIecho\fR
program, passing it \f(CW"surprise"\fR an argument.  The second version
didn't\*(--it tried to run a program literally called \fI\*(L"echo surprise\*(R"\fR,
didn't find it, and set \f(CW$?\fR to a non-zero value indicating failure.
.Sp
Beginning with v5.6.0, Perl will attempt to flush all files opened for
output before the exec, but this may not be supported on some platforms
(see perlport).  To be safe, you may need to set \f(CW$|\fR ($AUTOFLUSH
in English) or call the \f(CW\*(C`autoflush()\*(C'\fR method of \f(CW\*(C`IO::Handle\*(C'\fR on any
open handles in order to avoid lost output.
.Sp
Note that \f(CW\*(C`exec\*(C'\fR will not call your \f(CW\*(C`END\*(C'\fR blocks, nor will it call
any \f(CW\*(C`DESTROY\*(C'\fR methods in your objects.
.IP "exists \s-1EXPR\s0" 8
.IX Item "exists EXPR"
Given an expression that specifies a hash element or array element,
returns true if the specified element in the hash or array has ever
been initialized, even if the corresponding value is undefined.  The
element is not autovivified if it doesn't exist.
.Sp
.Vb 3
\&    print "Exists\en"    if exists $hash{$key};
\&    print "Defined\en"   if defined $hash{$key};
\&    print "True\en"      if $hash{$key};
.Ve
.Sp
.Vb 3
\&    print "Exists\en"    if exists $array[$index];
\&    print "Defined\en"   if defined $array[$index];
\&    print "True\en"      if $array[$index];
.Ve
.Sp
A hash or array element can be true only if it's defined, and defined if
it exists, but the reverse doesn't necessarily hold true.
.Sp
Given an expression that specifies the name of a subroutine,
returns true if the specified subroutine has ever been declared, even
if it is undefined.  Mentioning a subroutine name for exists or defined
does not count as declaring it.  Note that a subroutine which does not
exist may still be callable: its package may have an \f(CW\*(C`AUTOLOAD\*(C'\fR
method that makes it spring into existence the first time that it is
called \*(-- see perlsub.
.Sp
.Vb 2
\&    print "Exists\en"    if exists &subroutine;
\&    print "Defined\en"   if defined &subroutine;
.Ve
.Sp
Note that the \s-1EXPR\s0 can be arbitrarily complicated as long as the final
operation is a hash or array key lookup or subroutine name:
.Sp
.Vb 2
\&    if (exists $ref->{A}->{B}->{$key})  { }
\&    if (exists $hash{A}{B}{$key})       { }
.Ve
.Sp
.Vb 2
\&    if (exists $ref->{A}->{B}->[$ix])   { }
\&    if (exists $hash{A}{B}[$ix])        { }
.Ve
.Sp
.Vb 1
\&    if (exists &{$ref->{A}{B}{$key}})   { }
.Ve
.Sp
Although the deepest nested array or hash will not spring into existence
just because its existence was tested, any intervening ones will.
Thus \f(CW\*(C`$ref\->{"A"}\*(C'\fR and \f(CW\*(C`$ref\->{"A"}\->{"B"}\*(C'\fR will spring
into existence due to the existence test for the \f(CW$key\fR element above.
This happens anywhere the arrow operator is used, including even:
.Sp
.Vb 3
\&    undef $ref;
\&    if (exists $ref->{"Some key"})      { }
\&    print $ref;             # prints HASH(0x80d3d5c)
.Ve
.Sp
This surprising autovivification in what does not at first\*(--or even
second\*(--glance appear to be an lvalue context may be fixed in a future
release.
.Sp
See \*(L"Pseudo\-hashes: Using an array as a hash\*(R" in perlref for specifics
on how \fIexists()\fR acts when used on a pseudo\-hash.
.Sp
Use of a subroutine call, rather than a subroutine name, as an argument
to \fIexists()\fR is an error.
.Sp
.Vb 2
\&    exists &sub;        # OK
\&    exists &sub();      # Error
.Ve
.IP "exit \s-1EXPR\s0" 8
.IX Item "exit EXPR"
Evaluates \s-1EXPR\s0 and exits immediately with that value.    Example:
.Sp
.Vb 2
\&    $ans = ;
\&    exit 0 if $ans =~ /^[Xx]/;
.Ve
.Sp
See also \f(CW\*(C`die\*(C'\fR.  If \s-1EXPR\s0 is omitted, exits with \f(CW0\fR status.  The only
universally recognized values for \s-1EXPR\s0 are \f(CW0\fR for success and \f(CW1\fR
for error; other values are subject to interpretation depending on the
environment in which the Perl program is running.  For example, exiting
69 (\s-1EX_UNAVAILABLE\s0) from a \fIsendmail\fR incoming-mail filter will cause
the mailer to return the item undelivered, but that's not true everywhere.
.Sp
Don't use \f(CW\*(C`exit\*(C'\fR to abort a subroutine if there's any chance that
someone might want to trap whatever error happened.  Use \f(CW\*(C`die\*(C'\fR instead,
which can be trapped by an \f(CW\*(C`eval\*(C'\fR.
.Sp
The \fIexit()\fR function does not always exit immediately.  It calls any
defined \f(CW\*(C`END\*(C'\fR routines first, but these \f(CW\*(C`END\*(C'\fR routines may not
themselves abort the exit.  Likewise any object destructors that need to
be called are called before the real exit.  If this is a problem, you
can call \f(CW\*(C`POSIX:_exit($status)\*(C'\fR to avoid \s-1END\s0 and destructor processing.
See perlmod for details.
.IP "exp \s-1EXPR\s0" 8
.IX Item "exp EXPR"
.PD 0
.IP "exp" 8
.IX Item "exp"
.PD
Returns \fIe\fR (the natural logarithm base) to the power of \s-1EXPR\s0.
If \s-1EXPR\s0 is omitted, gives \f(CW\*(C`exp($_)\*(C'\fR.
.IP "fcntl \s-1FILEHANDLE\s0,FUNCTION,SCALAR" 8
.IX Item "fcntl FILEHANDLE,FUNCTION,SCALAR"
Implements the \fIfcntl\fR\|(2) function.  You'll probably have to say
.Sp