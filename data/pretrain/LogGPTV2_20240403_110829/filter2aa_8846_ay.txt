视条目的左边。”
18、敏捷宣言的12条原则：
1、最高优先级是早期和持续交付有价值的软件；
2、欢迎不断变化的需求甚至是开发后期；利用变化为客户取得竞争优势；
3、在几星期到几个月的时间里以较短的时间频繁ᨀ供能用的软件；
4、业务人员和开发人员每天都要在一起工作；
5、要激发个人，给他们所需要的环境和支持，并且相信他们能够完成
这项工作；
6、传递信息最有效率和最优效果方法是面对面交谈；
7、可用的软件是首要的度量标准；
8、敏捷过程促进可持续开发，出资人、开发者和用户应该无限地保持
同一步调；
9、持续关注技术的卓越性和良好的设计，这能ᨀ高敏捷度；
10、简单：最大化精简工作量的艺术，是最重要的；
11、最好的架构、需求和设计源于自组织团队。
12、在团队内部定期思考如何变得更有效，并按这样来修正及优化自
身的行为。
19、Carmnegie	Mellon	大学的软件工程学院（SEI）ᨀ出了软件能力成熟
度模型（Software	Capability	Maturity	Model，缩写为 SW-CMM.	CMM 或
SCMM），这种模型主张所有从事软件开发的组织都依次经历不同的成
熟阶段。
1、初始级，无组织无定义；
2、可重复级，开始有组织的重用代码（同类项目期望有相同的结果）；有：需
求管理、项目计划编制、软件项目跟踪和监督、软件转包合同管理、软件质量保
证、软件配置管理。
3、定义级，按照一系列正式的、文档化的软件开发过程操作；有：组织过程
Focus、组织过程定义、培训计划、综合的软件管理、软件产品工程、团体之间
的协调和对等复审。
4、管理级：定量衡量。有：定量处理管理和软件质量管理
5、优化级。 注意：在可重复级阶段，出现基本的生命周期管理过程。 有：
缺陷预防、技术变更管理和过程变更管理。
20、SEI还开发了IDEAL模型：1、启动Initiating； 2诊断Diagnosing；3、建
立Establishing；4；行动Acting；5学习Learning；
1、 启动，列出变更的业务原因，提供支持，以及准备好恰当的基础设
施。
2、诊断，分析组织的当前状态，给出一般性建议。
3	、建立，采用诊断阶段的一般建议，制定行动计划。
4、行动，开发解决方案、测试、改进和实现解决方案。
5、 学习。组织必须不断分析其努力的结果，从而确定是否已实现期望
的目标，必要时建议采取新的行动，使组织重返正轨。
21、甘特图就是现实不同时间，项目和计划的相互关系。
22、计划评审技术（Program	Evaluation	Review	Technique, PERT）is	a	
project-scheduling	tool，这种工具被用于在开发中判断软件产品的大小，
并且为风险评估计算标准偏差（Standard	Deviation, SD）。PERT	将估计的
每个组件的最小可能大小、最可能的大小以及最大可能大小联系在一起。
PERT	被用于直接改进项目管理和软件编码，以便开发更有效的软件。随
着编程和管理能力得到改善，软件的实际生成大小应当更小。
23、在软件开发、质量保证和技术运维这些主要的 IT	职能之间存在脱节
的情况。这些职能，通常配备给不同类型的个人，并且还位于不同的组
织，通常彼此冲突。DevOps 方法通过将三种职能集中在一个操作模型
中来解决这些问题。传统方法导致很少发布，或许每年一次，但使用
DevOps 模型的组织通常每天部署代码多次。甚至可以每天部署几十甚至
几百次。
24、测试软件时也应职责分离。也即应当指定编程人员以外的人员进行
软件测试，从而避免利益冲突。第三方测试允许更广泛和更彻底的测试，
并且能够防止由于编程人员的偏见和爱好而影响测试结果。
25、测试也是白盒、黑盒、灰盒，灰盒是流行的软件验证方式，主要是
从用户的角度评估软件，也是分析输入输出，但测试人员会访问源代码，
并使用源代码帮助软件测试，但一般不分析程序的内部工作原理。
26、静态测试：通过分析源代码或编译的应用程序来评估软件的安全性，
不需要运行软件。通常使用自动化工具来检测bug，如缓冲区溢出。
27、动态测试：在运行时环境中评估软件的安全性，测试人员通常无法
访问基础的源代码。比如使用 Web	应用程序扫᧿工具来检测是否存在跨
站脚本、SQL	注入或 其他缺陷。在生产环境下的动态测试应始终仔细考
虑以避免意外中断服务。
28、代码仓库（code	repositories	）：它们作为开发人员放置源代码的中
心存储点。如 GitHub、Bitbucket 和 SourceForge还ᨀ供了版本控制、错
误跟踪、Web	托管、发布管理和支持软件开发的通信功能。
29、一定注意，不要在公共代码仓库中包含敏感信息，尤其是 API	密钥。
30、SLA里经常含有：
系统正常运行时间（如总工作时间的百分比）
最大连续停机时间（以秒 1	分钟为单位等）
高峰负荷（peak	load）、
平均负荷（average	load）、
诊断责任 （Responsibility	for	diagnostics）
故障切换时间（Fail-over	time）
31、SLA通常还包括财务和其他合约商讨好的补救措施。例如，如果关键
线路中断超过 15	分钟，服务提供商可能同意放弃该线路上的所有费用一
周。
32、在 SaaS 环境中，大多数安全责任由供应商负责，但是组织的安全人
员也不能逃脱责任。他们负责监控供应商的安全，包括审计、评估、漏
洞扫描和旨在验证供应商是否保持适当控制的其他措施。
33、数据库管理系统（DBMS）：注意有两种重要的DBMS体系结构：层
次式数据模型、分布式数据模型。
34、层次式数据模型将关联的记录和字段组合为一个逻辑树结构。这会
导致一个“一对多”数据模型，其中的每个节点可能不具有子节点，也
可能具有一个或多个子节点，但是都只具有一个父节点。最常用的层次
模型实现为LDAP模型。这种模型也用在 Windows	注册表结构和不同的文
件系统中使用，不过较新的数据库产品通常不采用该模型。
35、分布式数据模型将数据存储在多个数据库中，但用户的角度看，将
数据库理解为单个实体。每个字段都具有许多子字段和父字段。因此，
分布式数据库的数据映射关系是多对多。分布式数据库系统与集中式数
据库系统相比，具有如下基本特征：物理分布性、逻辑整体性、站点自
治性、分布透明性。
36、基本上大家都在使用关系型数据库RDBMS。关系数据库是由行和列
组成的平面二维表。关系数据库的主要构件是表（也被称为关系），每
个表都包含一组相关的记录。例如，某个销售数据库可能包含：
Customers	表，包含组织中所有客户的联系信息。Sales	Reps	表，包含组
织中销售人员的身份信息。Orders	表，包含每个用户所下订单的记录。
37、关系中行的数量叫做基数（cardinality），列的数量叫做度
（degree）。关系的域（domain）是一组属性可以采用的允许值。下图
说明了 Customers	表的示例。
上表基数为3，度为8.	
38、主键：从候选键中选出的用来唯一标识表中记录的键被称为主键。
（候选键是可以唯一标识表中记录的属性的集合）。每个表都只有一个
主键，RDBMS	强制实施了主键的唯一性。在上图所示的Customers	表中。
CompanyID 很可能就是主键。
39、外键：被用于强制在两个表之间建立关系（也称为参照完整性，
referential	integrity）。参照完整性确保：如果一个表包含一个外键，那
么这个外键在另一个表中是主键。上图中的Sales	Rep字段是外键，它是
Sales	Reps表中的主键。
40、所有关系数据库都使用结构化查询语言（SQL），每个 DBMS	供应
商实现的 SQL	版本略有不同 (如 Microsoft公司的Transact-SQL和Oracle公
司的PL/SQL)，但是都支持一个核心特性集。SQL最主要的安全特性是授
权粒度。这意味着 SQL	允许能通过表、行、列，甚至是些情况下单独的
单元来限制用户访问。
41、SQL本身被分为两个截然不同的组件：数据定义语言（DDL），允许
创建和更改数据库的结构（称为schema），数据操纵语言（DML），允
许用户与模式内包含的数据交互。
42、数据库开发人员致力于创建组织有序的、有效的数据库。为此，开
发人员定义了若干被称为范式（Normal	form）的组织级别。使数据库表
遵从范式的过程被称为规范化（Normalization）。最常见的三种形式是：
第一范式 1NF、第二范式2NF、第三范式3NF，都是为了：减少表中的冗
余，消除错误放置的数据、执行其他许多清理性任务。范式是渐进的，
换句话说，要采用2NF格式，首先必须遵从1NF格式；要采用3NF	格式，
首先必须采用2NF	格式
43、数据库事务：可以显式和隐式地使用，确保数据执行的完整性。作
为一个组的这些SQL指令要么全部成功，要么全部失败。事务的一部分成
功而另一部分失败的情况不能出现。比如：
BEGIN	TRANSACTION		
UPDATE	accounts	SET	balance	=	balance	+	250	WHERE	account_	number	=	1001;	
UPDATE	accounts	SET	balance	=	balance	-	250	WHERE	account_	number	2002	
END	TRANSACTION	
44、一个事务成功完成时，也即这个事务被ᨀ交给数据库（commited），
这就不能取消了（undone）。（除非冲正的需要再来一笔交易。）事务
的ᨀ交可以是显式地使用COMMIT	命令；可以是隐式的，也就是成功到
达事务结束进行ᨀ交。
45、如果必须在中间中止事务，可以显式地使用 ROLLBACK 命令进行回
滚操作，也可以是硬件或软件故障引起的隐式回滚。当一个事务被回滚
时，数据库会将自身还原至这个事务开始前的状态。
46、所有的数据库事务都具有 4	个必需的特征，即ACID：原子性
（atomicity）、一致性（consistency）、隔离性（isolation）以及持久性
（Durability）。
47、原子性：要么全有要么全无。一致性：数据库的规则不能破坏，比
如主键唯一。隔离性：一个事务更改相同数据前，必须等前一个事务结
束。持久性：一旦ᨀ交给数据库就会被存储起来。
48、以下是几个DBMS安全特性：多级安全性、视图、并发性控制、语义
完整性、时间特性、细粒度控制（内容相关控制、单元抑制）、上下文
控制、多实例（polyinstantiation）、噪声和扰动（Noise	and	
perturbation）。
49、要求多级安全（multilevel	security）时，将不同分类级别和或“知其
所需’ 需求不同的数据混合在一起被称为数据库污染（Contamination），
这是一个重大的安全风险。通常，管理员会通过部署可信前端（trusted	
front	end）给旧式的或不安全的 DBMS	添加多级安全性。
50、视图（views）：实现多级安全性的另一种途径是使用视图。视图能
够被用于整理来自多个表的数据、聚合记录、限制用户访问特定的属性
或记录。视图被存储为 SQL	语句而不是被存储为数据表。这样可以显著
减少所需的数据库空间，允许视图违反应用于数据表的规格化规则。当
然，从复杂的视图中检索数据的时间要明显长于从表中检索数据的时间。
51、并发性控制：并发性或编辑控制（Concurrency	or	Edit	control）是一
种预防性的安全机制，这种机制试图使数据的完整性和可用性受到保护。
并发性使用“锁定”功能允许已授权用户更改数据，同时拒绝其他用户
查看或更改数据元素。注意，审计工具可以利用并发性跟踪字段的变化。
52、语义完整性（semantic	integrity）：语义完整性确保用户的动作不会
违反任何结构上的规则。它检查存储的所有数据类型都位于有效的域范
围内，确认系统遵守唯一性约束。
53、时间和日期标记，常常出现在分布式数据库系统中。在每个更改事
务上添加时间标记，然后将这些更改分发或复制至其他数据库成员时，
所有变化会应用于所有成员，而且是按照正确的时间顺序实现变化。
54、细粒度控制：有两个示例：
内容相关的访问控制（content	dependent）：重点基于要访问对象的内
容或有效载荷进行控制。因为必须在逐个访问对象的基础上做出决定，
所以内容相关的访问控制增加了处理开销。
单元抑制（Cell	suppression）：对单独的数据库字段或单元隐藏或强加
更安全的约束。
55、上下文相关的访问控制（context	dependent）：任何单个元素本身