We unfortunately were unable to use the front-end language for
EverParse, dubbed QuackyDucky [46], resulting in substantial
manual effort; we hope future versions of the tool will capture
the QUIC format.
Internal State Our QUIC library follows an established
pattern [44] that revolves around an indexed type holding the
QUIC state. This state is kept abstract from veriﬁed clients
and, interestingly, from C clients as well, using an incomplete
struct type to enforce C abstraction. Clients do not know the
size of the C struct, meaning that they cannot allocate it and are
forced to go through the allocation function we provide. We go
to great lengths to offer idiomatic C-like APIs where functions
modify out-params and return error codes, which requires extra
memory reasoning owing to the double indirection of the out
parameters.
Encryption and Decryption When called, encrypt outputs the
1172
encrypted data and the freshly-used packet number into two
caller-allocated out-params. The decrypt function fails if and
only if the spec fails, consumes exactly as much data as the
spec, and when it succeeds, ﬁlls a caller-allocated struct. To
maximize performance, our decryption implementation oper-
ates in-place and performs no allocation beyond temporaries
on the stack.
E. Type-Based Cryptographic Security Proofs
In this section, we review the methodology of type-
based cryptographic security proofs [16], [33], [14], which
underpins our formal F(cid:2) proof of Theorem 1. Game-based
indistinguishability deﬁnitions can be captured by idealized
interfaces, which deﬁne the precise signature of each oracle
in the game, including all adversarial restrictions (such as
forbidding nonce reuse). Such interfaces are parameterized by
a Boolean b (called the idealization ﬂag), which corresponds
to the secret bit that the adversary must guess in the game.
As an example, consider the AE1b game: as shown below,
we represent instances using an abstract type key, which is
implemented as a concrete key k if b is false, or a table T
that maps triples of nonce, ciphertext and additional data to
plaintexts when b is true. We index instances with an id
type, and we let
the adversary select which instances are
honest and which are corrupt (at creation time) by conditioning
idealization on a safety predicate let safe (i:id) =honest i && b.
(∗ AE1: Idealized Interface ∗)
abstract type key (i:id)
val ideal: #i:id{safe i} → key i →
map (nonce × cipher × header) (plain i)
val real: #i:id{¬ (safe i)} → key i → lbytes klen
val keygen: i:id{fresh i} → ST (key i)
(ensures fun mem0 k mem1 → safe i ⇒ ideal k mem1 = ∅)
val encrypt: #i:id → k:key i →
n:nonce → h:header → p:plain i → ST cipher
(reauires fun mem0 → fresh_nonce k mem0 n)
(ensures fun mem0 c mem1 →
if safe i then ideal k mem1 == extend (ideal k mem0) (n,c,h) p
else c == Spec.AEAD.encrypt (real k) n h p)
val decrypt: #i:id → k:key →
n:nonce → h:header → c:cipher → ST (option plain)
(ensures fun mem0 r mem1 →
if safe i then r == lookup (ideal k mem0) (n,c,h)
else r == Spec.AEAD.decrypt (real k) n h c)
The interface declares keys as abstract, hiding both the real
key value and the ideal table. Non-ideal instances are speci-
ﬁed using a pure functional speciﬁcation of Spec.AEAD. The
security of ideal instances is speciﬁed based on the ideal state.
For instance, decryption only succeed if an entry was added in
the table for the given nonce, ciphertext and additional data,
which guarantees plaintext integrity.
To model conﬁdentiality, the idea is to rely on type para-
metricity of idealized plaintexts. The intuition is to prove that
the ideal implementation of encryption and decryption never
access the actual representation of the plaintext, by making
the type of plaintext abstract (conditionally on safety). This
guarantees that ideal plaintexts are perfectly (i.e. information
theoretically) secure. In practice, we want to allow the same
functionality to be used for different types of plaintexts (for
instance, QUIC also uses AEAD to encrypt resumption tokens,
which have different contents than packet payloads). Hence,
we parameterize instances by a plaintext package, which is a
record that deﬁnes an abstract type of plaintexts plain i, with
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:53 UTC from IEEE Xplore.  Restrictions apply. 
Spec.AEAD.fsti
Spec.Cipher.fsti
EverCrypt Primitives
Crypto Assumptions
Model.AEAD.fsti
Model.PRF.fsti
Formal Specification Verified Implementation
Spec.QUIC.fst
Impl.QUIC.fst
Spec.QUIC.fsti
Impl.QUIC.fsti
Model.QUIC.fsti
Model.QUIC.fst
Security proof
QUIC.fst
QUIC.fsti
Application
“Implementation Switch”
Fig. 7: Integrated security model and veriﬁed implementation.
In F(cid:2), an ‘fsti’ ﬁle is an interface for the corresponding ‘fst’
ﬁle, similar to a ‘.h’ and ‘.c’ ﬁles in C.
functions that allow access to their concrete byte representation
at the speciﬁcation level only (as_bytes, using the ghost effect
of F(cid:2)), or concretely when ¬ (safe i) (repr for real encryption).
The main class of proofs that can be made in F(cid:2) is perfect
reductions (or perfect indistinguishability steps), which show
that given a set of idealized interfaces (code assumptions), it is
possible to implement derived idealized functionalities, whose
advantage is bounded by the sum of the advantages of the
code assumptions. For the proof of Theorem 1, we use AE1
and the PNE functionality below as our code assumptions.
Appendix III-C shows the corresponding game and reduction
to PRF security.
(∗PNE: Idealized Interface ∗)
abstract type key (i:id)
val ideal: #i:id{safe i} → key i →
map sample (l:pn_len, pn i l, mask)
val real: #i:id{¬ (safe i)} → key i → lbytes klen
val keygen: i:id{fresh i} → ST (key i)
(ensures fun mem0 k mem1 → safe i ⇒ ideal k mem1 = ∅)
val encrypt: #i:id → k:key i → l:pn_len → n:pn i l→ s:sample →
ST cipher
(requires fun mem0 → safe i ⇒ fresh_sample s st mem0)
(ensures fun mem0 c mem1 →
if safe i then ∃ (c’: mask).
ideal k mem1 == extend (ideal k mem0) s (l,s,c’) ∧
c == truncate (c’ xor (format ln n)) l
else c == pnenc (real k) l (repr pn) s)
val decrypt: #i:id → k:key i → c:cipher → s:sample → ST (pn i)
(ensures fun mem0 p mem1 →
if safe i then
∃ (l, n, c’). lookup (ideal k) s mem1 = Some (n, c) ∧
as_bytes p == truncate (c’ xor (header c)) l
else c == ‘pndec (real k) c s)
F. Veriﬁed Implementation Correctness and Security
As shown in Figure 7, our implementation of the idealized
interface for the QUIC record layer (Model.QUIC) uses our
high-level speciﬁcation (Spec.QUIC) in the real case (when
b=0). However, we would like to extend the security guarantees
to the low-level implementation (Impl.QUIC). This is accom-
plished with a technique we call an implementation switch,
that replaces the call to the high-level security model with the
low-level implementation. This idealization step also appears
in related veriﬁcation work [2], [3]. It is justiﬁed because we
verify (by typing) that both stateful implementations comply
with the same full functional speciﬁcation (Spec.QUIC).
The adversary for this step is much more powerful than
in usual cryptographic games, because it can observe timing
and memory access patterns in addition to the input/output
behavior of the function. We assume that the execution of
speciﬁcation code is not observable, while the timing and
memory access patterns of the low-level code are. EverCrypt
guarantees by typing that the low-level secret inputs are ab-
stract, which we inherit in our record implementation. Hence,
for instance for packet encryption, QUIC.fst implements
the switch to our speciﬁcation-based model by calling low-
level packet encryption on dummy inputs instead of the secret
input parameters. Since (by typing) the low-level side effects
do not depend on those secrets, this produces the same effects
as calling low-level packet encryption with the real param-
eters. It then computes the ciphertext by calling the model
on the high-level representation of the low-level inputs (i.e.,
arrays and machine integers are replaced by sequences and
mathematical integers), and overwriting the low-level output
with the resulting value. Since both the model and low-level
implementation share the same full functional speciﬁcation,
and since the observable side-effects are independent of secret
inputs, the switch is indistinguishable to the adversary.
interface as Impl.encrypt,
We outline below the implementation of encrypt
in
QUIC.fst. When idealization is off, this code implements
the same low-level
irrespective of
the model ﬂag. When idealization is on, it provides the same
security guarantees as the high-level model, since this code
can be included in the attacker against QPE in Theorem 1.
Notice that the private state for packet encryption has a type
that depends on model, so that it carries either the the high-level
model state or the low-level implementation state. In encrypt,
the else branch simply forwards the call to the implementation.
The model branch instead ﬁrst calls the implementation on
stack-allocated dummies, then extracts high-level input values
from the low-level input buffers, calls the model, and ﬁnally
stores the resulting cipher in the output buffer.
private type state i =
if model then Model.state i else Impl.state i
let encrypt #i (s:state i) header plain_len plain cipher =
if model then (
let dummy_state: Impl.state i = alloca(...) in
let dummy_plain = Plain.zero plain_len in
Impl.encrypt #i dummy_state header plain_len dummy_plain cipher
let header’ =parse_header header
let plain’ =Plain.buffer_to_bytes plain_len plain in
let cipher’ =Model.encrypt s header’ plain’ in
Buffer.store_bytes cipher’ cipher )
in
else
Impl.encrypt #i s header plain_len plain cipher
Summary of implementation security claims After extrac-
tion, our code enforces constant time decryption of the packet
headers regardless of the packet number encoding size LN
and whether the decryption succeeds or fails. This prevents an
active attacker from inferring the relative position of the packet
in the window by successively ﬂipping the least signiﬁcant bits
of the encrypted packet number, a weakness that we observe
in other implementations. We also enforce abstraction over
the contents of the packets, which guarantees constant time
decryption of all packets of a given length. By padding all
packets up to the MTU, the QUIC transport can enforce fully
constant time processing of all encrypted packets using our
record layer implementation.
V. OUR QUIC REFERENCE IMPLEMENTATION
To evaluate if our veriﬁed record layer (§IV) satisﬁes the
needs of the QUIC protocol, we have developed a provably-
safe reference implementation of QUIC (draft 24) on top of
the record layer. We have also developed an example server
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:53 UTC from IEEE Xplore.  Restrictions apply. 
1173
engine
[connection]*
TLS handshake
stream manager
[control frame]*
[packet space]*
lrcc manager
[stream]*
[ready stream]*
QUIC record layer
[sent packet]*
[send segment]* [partial segment]* [receive segment]*
[sent segment]*
Fig. 8: (Simpliﬁed) Hierarchy of Structures in our QUIC
protocol logic, which utilizes the TLS handshake and QUIC
record layer. [X]* represents a repetition of structure X, via
a doubly-linked list, array, extendable vector, or sequence.
and client that utilize our implementation to perform secure
ﬁle transfers.
A. Implementation Overview
Our prototype consists of three modules – the TLS hand-
shake, the QUIC record layer, and the QUIC protocol logic.
The TLS handshake is based on prior veriﬁed TLS work [17]
but has been updated to perform the TLS 1.3 handshake; it
provides symmetric keys for bulk data transfer. These keys
are used by our QUIC record layer (§IV), which handles the
encryption and decryption of QUIC trafﬁc, as well as packet-
level parsing/serialization. Using these two modules, the QUIC
protocol logic implements the rest of the protocol, including
for example, connection and stream management. This module
is veriﬁed for safety, laying the groundwork for functional
correctness in the future.
Our prototype’s API is compliant with draft 30 of IETF
QUIC. More speciﬁcally, it allows an application to interact
with connections and streams as follows: open a connection as
a client; listen for connection as a server; control and conﬁgure
various resources such as number of permitted streams; and
open/close a stream; write to/read from a stream.
B. The QUIC Protocol Logic Module
The QUIC protocol logic implements stream multiplexing,
connection management, frame decoding/encoding, loss recov-
ery, congestion control, and other functionality required by the
IETF QUIC standard. Our implementation is centered around
the various structures in Figure 8. The engine represents a
prototype instance that manages connection instances (a
client instance contains one connection; a server instance
contains zero or more, depending on the number of con-
nected clients). A connection contains multiple stream
instances. It manages stream multiplexing, loss recovery, and
the interactions with the TLS handshake and QUIC record
layer. Finally, the stream maintains the sending/receiving
states of a stream. Each structure contains many other sup-
porting structures.
Our QUIC protocol logic is veriﬁed for memory safety,
type safety, termination, and the absence of integer overﬂows.
This prevents, e.g., buffer overﬂows, type-safety ﬂaws, use-
after-free, and null-pointer accesses. We also prove correctness
of some key data structures, e.g., a doubly-linked list and an
expandable array.
Although the other modules in our reference implementa-
tion are written and veriﬁed in F(cid:2), we write and verify our
QUIC protocol logic in Dafny [39], an imperative, objected-
oriented veriﬁcation language. While F(cid:2)’s higher-order, ML-
inspired design is convenient for reasoning about cryptographic
properties, the QUIC protocol logic primarily manages stateful
data structures in a classically imperative fashion, which better
matches Dafny’s design. Indeed, in an early phase of this
project, it required several person-months to implement and
library in F(cid:2), while it
verify a generic doubly-linked list
required only three hours to do so in Dafny. Dafny was
better able to handle multiple heap updates and the complex
invariants needed to prove and maintain correctness.
To support the compilation of our QUIC protocol logic,
we have extended Dafny to add a C++ backend. C++ offers
multiple beneﬁts. First, it simpliﬁes integration with the C code
compiled from the F(cid:2) code of the other two modules. Second,
it enables performance optimizations that are harder to realize
in Dafny’s higher-level backends for C#, Java, JavaScript, or
Go. Finally, C++ (as opposed to C) is a convenient compilation
target for Dafny, since it includes a standard collections library,
support for reference-counted smart pointers, and platform
agnostic threading.
Our development includes ∼500 lines of trusted Dafny
code modeling the effects of calls to the other two modules; the
pre- and post-conditions are carefully matched with their F(cid:2)
implementations. We model calls to the underlying OS (e.g.,
for UDP) similarly.
C. Proof Challenges and Techniques
We brieﬂy summarize our overall proof strategy, chal-
lenges we encountered, and techniques for coping with those
challenges. To prove the safety of our QUIC protocol logic,
we establish and maintain validity invariants throughout our
codebase. Speciﬁcally, for each structure used in the code,
we deﬁne a valid predicate, which ensures that structure’s
safety.