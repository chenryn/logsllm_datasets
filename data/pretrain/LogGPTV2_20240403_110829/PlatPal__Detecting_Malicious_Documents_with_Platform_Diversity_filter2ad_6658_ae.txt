generation tool, EvadeML [65], which automatically pro-
duce evasive maldoc variants against ML-depended ap-
proaches in Table 1 given a malicious seed file. To do this,
we selected 30 samples out of the 209 malicious samples
which are also detected as malicious by PDFrate [46],
4Only CVEs which full details are publicly disclosed are considered
282    26th USENIX Security Symposium
USENIX Association
Internal Behavior
No difference
COS object parsing
PD tree construction
JavaScript execution
Other actions
Element rendering
Total
External Behavior
No difference
Both crash
One crash
Filesystem
Network
Executable
77
4
0
5
0
3
89
34
8
0
5
0
10
57
0
23
2
47
0
35
107
6
0
4
18
2
9
39
3
0
2
12
0
5
22
0
0
0
4
2
0
6
Total
120
35
8
91
4
62
320
Table 3: PLATPAL maldoc detection results grouped by the factor causing divergences. Note that for each sample, only one internal
and one external factor is counted as the cause of divergence. E.g., if a sample crashes on Mac and does not crash on Windows, even
their filesystem activities are different, it is counted in the crash/no crash category. The same rule applies to internal behaviors.
Targeted
component
Divergence
first occurs
Detects
Item
CVE
2016-4119
2016-1077
2016-1046
2015-2426
2014-0521
2013-3346
2013-2729
Parser
Parser
Parser
Parser
Script engine
Script engine
Library
Script engine
Render
Parser
Render
Script engine
Script engine
Script engine
Vuln. component
Vuln. component
Vuln. component
Exploit carrier
Vuln. component
Exploit carrier
Exploit carrier
Windows
Ave.
Std.
9.7
0.5
10.5
7.3
23.7
1.1
0.2
13.0
8.9
8.5
Mac
Ave.
12.6
0.6
5.1
6.2
22.1
Std.
1.1
0.2
3.3
6.0
6.3
Snapshot restore
Document parsing
Script execution
Element rendering
Total
Table 5: Breakdown of PLATPAL’s analysis time per document
(unit: seconds).
is that script execution on the Windows platform takes
significantly longer than on the Mac platform. This is
because almost all maldoc samples target Windows plat-
forms and use JavaScript to launch the attack. The attack
quickly fails on Mac (e.g., wrong address for ROP gad-
gets) and crashes AAR but succeeds on Windows and
therefore takes longer to finish. The same reason also
explains why the standard deviation on script execution
time is larger on the Windows platform.
7 Discussion
7.1 Limitations
User-interaction driven attacks. Although PLATPAL
is capable of simulating simple users’ interactions (e.g.,
scrolling, button clicking, etc), PLATPAL does not attempt
to explore all potential actions (e.g., key press, form fill-
ing, etc) or explore all branches of the JavaScript code.
Similarly, PLATPAL cannot detect attacks that intention-
ally delay their execution (e.g., start exploitation two min-
utes after document open). These are common limitations
for any dynamic analysis tool. However, we believe this
is not a serious problem for maldoc detection, as hiding
malicious activities after complex user interactions limits
its effectiveness in compromising the victim’s system.
Social engineering attacks. PLATPAL is not capable of
detecting maldocs that aim to perform social engineering
Table 4: Divergence detected by PLATPAL’s internal tracer vs
the actual buggy AAR component.
the default PDF classifier that works with EvadeML5.
We then uses EvadeML to mutate these samples until all
variants are considered benign. Finally, we send these eva-
sive variants to PLATPAL for analysis and all of them are
again marked as malicious, i.e., behavioral discrepancies
are still observed. This experiment empirically verifies
PLATPAL’s resilience on automated maldoc generation
tools. The main reason for the resilience is that EvadeML
mainly focuses on altering the structural feature of the
maldoc while preserves its exploitation logic and also the
internal and external behaviors when launching the attack.
6.3 Performance
In PLATPAL, the total analysis time consists of two parts:
1) time to restore disk and memory snapshots and 2) time
to execute the document sample. The latter can be further
broken down into document parsing, script execution, and
element rendering time. Table 5 shows the time per item
and the overall execution time.
On average, document execution on both VMs can fin-
ish at approximately the same time (23.7 vs 22.1 seconds).
Given that the VMs can run in parallel, a complete anal-
ysis can finish within 25 seconds. A notable difference
5It is worthnoting that PLATPAL cannot be used as the PDF classifier
for EvadeML as EvadeML requires a maliciousness score which has
to be continuous between 0 and 1 while PLATPAL can only produce
discrete scores of either 0 or 1. Therefore, we use PDFrate, the PDF
classifier used in the EvadeML paper [65], for this experiment.
USENIX Association
26th USENIX Security Symposium    283
attacks, such as faking password prompt with a JavaScript
window or enticing the user to download a file and execute
it. This is because these maldocs neither exploit bugs in
AAR nor inject malicious payload, (in fact they are legit
documents structural-wise) and hence will have exactly
the same behaviors on both platforms.
Targeted AAR version.
If a maldoc targets a specific
version of AAR, its behaviors in PLATPAL will likely be
either crashing both AAR instances (i.e., exploited the bug
but used the wrong payload), or the document is rendered
and closed gracefully because of error correction by AAR.
In the latter case, PLATPAL will not be able to detect a
behavioral discrepancy. This is usually not a problem
for PLATPAL in practice, as PLATPAL will mainly be
used to detect maldocs against the latest version of AAR.
However, PLATPAL can also have a document tested on
many AAR versions and flag it as suspicious as long as a
discrepancy is observed in any single version.
Non-determinism.
Another potential problem for
PLATPAL is that non-deterministic factors in document
execution could cause false alerts. Examples include
return value of gettime functions or random number
generators available through JavaScript code. Although
PLATPAL does not suffer from such a problem during the
experiment, a complete solution would require a thorough
examination of the PDF JavaScript specification and iden-
tify all non-determinism. These non-deterministic factors
need to be recorded during the execution of a document
on one platform and replayed on the other platform.
7.2 Deployment
As PLATPAL requires at least two VMs, a large amount of
image and memory needs to be committed to support the
operation of PLATPAL. Our current implementation uses
60GB disk space to host the snapshots for six versions of
AAR and 2GB memory per each running VM.
To this end, we believe that PLATPAL is best suited
for cloud storage providers (e.g., Dropbox, Google Docs,
Facebook, etc.) which can use PLATPAL to periodically
scan for maldocs among existing files or new uploads.
These providers can afford the disk and memory required
to set up VMs with diverse platforms as well as enjoy
economy of scale. Similarly, PLATPAL also fits the model
of online malware scanning services like VirusTotal or
the cloud versions of anti-virus products.
In addition, as a complementary scheme, PLATPAL can
be easily integrated with previous works (Table 1) to im-
prove their detection accuracy. In particular, PLATPAL’s
internal behavior tracer can be used to replace parsers
in these techniques to mitigate the parser-confusion at-
tack [11]. COS object and PD tree information can be fed
to metadata-based techniques [33, 36, 46, 52], while the
JavaScript code dump can be fed to JavaScript-oriented
techniques [14, 27, 31, 45, 48, 58, 59] for analysis.
7.3 Future Works
We believe that PLATPAL is a flexible framework that is
suitable not only for PDF-based maldoc detection but also
for systematically approaching security-through-diversity.
Support more document types. MS Office programs
share many features with AAR products, such as 1) sup-
porting both Windows and Mac platforms; 2) supporting
a plugin architecture which allows efficient hooking of
document processing functions and action driving; 3)
executing documents based on a standard specification
that consists of static components (e.g., text) and pro-
grammable components (e.g., macros). Therefore, we do
not see fundamental difficulties in porting PLATPAL to
support maldoc detection that targets MS Office suites.
As another example, given that websites can also be
viewed as HTML documents with embedded JavaScript,
malicious website detection also fits into PLATPAL’s
framework. Furthermore, given that Chrome and Firefox
browsers and their scripting engines are open-sourced,
PLATPAL is capable of performing finer-grained behavior
tracing and comparison with source code instrumentation.
Explore architecture diversity. Apart from platform
diversity, CPU architecture diversity can also be harvested
for maldoc detection, which we expect to have a similar
effect in stopping maldoc attacks. To verify this, we plan
to extend PLATPAL to support the Android version of
AAR, which has both ARM and x86 variants.
8 Additional Related Work
In addition to the maldoc detection work, being an N-
version system, PLATPAL is also related to the N-version
research. The concept of the N-version system was
initially introduced as a software fault-tolerance tech-
nique [12] and was later applied to enhance system and
software security. For example, Frost [60] instruments a
program with complementary scheduling algorithms to
survive concurrency errors; Crane et al. [16] applies dy-
namic control-flow diversity and noise injection to thwart
cache side-channel attacks; Tightlip [68] and Capizzi et
al. [10] randomize sensitive data in program variants to
mitigate privacy leaks; Mx [24] uses multiple versions of
the same program to survive update bugs; Cocktail [66]
uses multiple web browser implementations to survive
vendor-specific attacks; and Nvariant [15], Replicae [8],
and GHUMVEE [61] run program variants in disjoint
memory layouts to mitigate code reuse attacks. Similarly,
Orchestra [43] synchronizes two program variants which
grow the stack in opposite directions for intrusion detec-
284    26th USENIX Security Symposium
USENIX Association
tion. In particular, Smutz et al. [47] attempts to identify
and prevent detection evasions by constructing diversi-
fied classifiers, ensembling them into a single system,
and comparing their classification outputs with mutual
agreement analysis.
Although PLATPAL is designed for a completely dif-
ferent goal (i.e., maldoc detection), it shares the insights
with N-version systems: an attacker is forced to simulta-
neously compromise all variants with the same input in
order to take down or mislead the whole system.
Another line of related work is introducing diversity
to the execution environment in order to entice and de-
tect malicious behaviors. For example, HoneyClient [56],
caches and resembles potentially malicious objects from
the network stream (e.g., PDF files) and then send it to
multiple emulated environments for analysis. Balzarotti et
al. [4] detects “split personality” in malware, i.e., malware
that shows diverging behaviors in emulated environment
and bare-metal machines, by comparing the runtime be-
haviors across runs. Rozzle [26] uses symbolic execution
to emulate different environment values malware typically
checks and hence, entice environment-specific behaviors
from the malware. to show diverging behaviors.
PLATPAL shares the same belief as these works: di-
versified execution environment leads to diversified be-
haviors, and focuses on harvesting platform diversity for
maldoc detection.
9 Conclusion