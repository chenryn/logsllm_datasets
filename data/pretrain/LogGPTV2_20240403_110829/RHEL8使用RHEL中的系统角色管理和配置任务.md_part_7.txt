3.  运行 playbook：
    ::: itemizedlist
    -   以 `root`{.literal} 用户身份连接到受管主机，输入：
        ``` literallayout
        # ansible-playbook -u root ~/configure-ethernet-device-with-ethtoolcoalesce-settings.yml
        ```
    -   以用户身份连接到受管主机，请输入：
        ``` literallayout
        # ansible-playbook -u user_name --ask-become-pass ~/configure-ethernet-device-with-ethtoolcoalesce-settings.yml
        ```
        `--ask-become-pass`{.literal} 选项确定
        `ansible-playbook`{.literal} 命令提示输入
        `-u user_name`{.literal} 选项中定义的用户 `sudo`{.literal}
        密码。
    :::
    如果没有指定 `-u user_name`{.literal}
    选项，请以当前登录到控制节点的用户 `ansible-playbook`{.literal}
    连接到受管主机。
:::
::: itemizedlist
**其它资源**
-   有关 `ethtool`{.literal} 功能的完整列表以及
    `network_connections`{.literal} 中使用的参数的详情，以及
    `network`{.literal} 系统角色的更多信息，请参阅
    `/usr/share/ansible/roles/rhel-system-roles.network/README.md`{.literal}
    文件。
-   有关 `ansible-playbook`{.literal} 命令的详情，请参考
    `ansible-playbook(1)`{.literal} man page。
:::
:::
:::
[]{#configuring-selinux-using-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel.html}
::: chapter
::: titlepage
# []{#configuring-selinux-using-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel.html#configuring-selinux-using-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel}第 6 章 使用系统角色配置 SElinux {.title}
:::
::: section
::: titlepage
# []{#configuring-selinux-using-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel.html#introduction-to-the-selinux-system-role_configuring-selinux-using-system-roles}SELinux 系统角色简介 {.title}
:::
RHEL 系统角色是 Ansible 角色和模块的集合,可为远程管理多个 RHEL
系统提供一致的配置界面。SELinux 系统角色启用以下操作：
::: itemizedlist
-   清理与 SELinux 布尔值、文件上下文、端口和登录相关的本地策略修改。
-   设置 SELinux 策略布尔值、文件上下文、端口和登录。
-   在指定文件或目录中恢复文件上下文。
-   管理 SELinux 模块.
:::
下表提供了 SELinux 系统角色中可用的输入变量概述。
::: table
[]{#configuring-selinux-using-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel.html#idm140139453800608}
**表 6.1. SELinux 系统角色变量**
::: table-contents
  角色变量               描述                                                                             CLI 的替代方案
  ---------------------- -------------------------------------------------------------------------------- ---------------------------------------------------------------------------------------
  selinux_policy         选择保护目标进程或多级别安全保护的策略。                                         `/etc/selinux/config`{.literal} 中的 `SELINUXTYPE`{.literal}
  selinux_state          切换 SELinux 模式。请查看 `ansible-doc selinux`{.literal}                        `setenforce`{.literal} 以及 `/etc/selinux/config`{.literal} 下的`SELINUX`{.literal}。
  selinux_booleans       启用和禁用 SELinux 布尔值。请参阅 `ansible-doc seboolean`{.literal}。            `setsebool`{.literal}
  selinux_fcontexts      添加或删除 SELinux 文件上下文映射。请参阅 `ansible-doc sefcontext`{.literal}。   `semanage fcontext`{.literal}
  selinux_restore_dirs   在文件系统树中恢复 SELinux 标签。                                                `restorecon -R`{.literal}
  selinux_ports          在端口上设置 SELinux 标签。请参阅 `ansible-doc seport`{.literal}。               `semanage port`{.literal}
  selinux_logins         将用户设置为 SELinux 用户映射。请参阅 `ansible-doc selogin`{.literal}。          `semanage login`{.literal}
  selinux_modules        安装、启用、禁用或删除 SELinux 模块.                                             `semodule`{.literal}
:::
:::
`rhel-system-roles`{.literal} 软件包安装的 playbook
`/usr/share/doc/rhel-system-roles/selinux/example-selinux-playbook.yml`{.literal}
示例演示了如何在 enforcing 模式中设置目标策略。playbook
还应用一些本地策略修改，并在 `/tmp/test_dir/`{.literal}
目录中恢复文件上下文。
有关 SELinux 角色变量的详情，安装 `rhel-system-roles`{.literal} ，并参阅
`/usr/share/doc/rhel-system-roles/selinux/`{.literal} 目录中的
`README.md`{.literal} 或 `README.html`{.literal}。
::: itemizedlist
**其它资源**
-   [RHEL
    系统角色简介.](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/administration_and_configuration_tasks_using_system_roles_in_rhel/getting-started-with-rhel-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel#intro-to-rhel-system-roles_getting-started-with-rhel-system-roles){.link}
:::
:::
::: section
::: titlepage
# []{#configuring-selinux-using-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel.html#using-the-selinux-system-role-to-apply-selinux-settings-on-multiple-systems_configuring-selinux-using-system-roles}使用 SELinux 系统角色在多个系统中应用 SELinux 设置 {.title}
:::
按照以下步骤，在已验证的 SELinux 设置中准备并应用 Ansible playbook。
::: itemizedlist
**先决条件**
-   您的 Red Hat Ansible Engine
    订阅已附加到系统。如需更多信息，请参阅[如何下载和安装 Red Hat
    Ansible Engine](https://access.redhat.com/articles/3174981){.link}
    文章。
:::
::: orderedlist
**流程**
1.  启用 RHEL Ansible 存储库，例如：
    ``` screen
    # subscription-manager repos --enable ansible-2-for-rhel-8-x86_64-rpms
    ```
2.  安装 Ansible Engine:
    ``` screen
    # yum install ansible
    ```
3.  安装 RHEL 系统角色：
    ``` screen
    # yum install rhel-system-roles
    ```
4.  准备您的 playbook。您可以从头开始，或修改作为
    `rhel-system-roles`{.literal} 软件包一部分安装的示例 playbook：
    ``` screen
    # cp /usr/share/doc/rhel-system-roles/selinux/example-selinux-playbook.yml my-selinux-playbook.yml
    # vi my-selinux-playbook.yml
    ```
5.  更改 playbook
    的内容，使其适合您的场景。例如，以下部分可确保系统安装并启用
    `selinux-local-1.pp`{.literal} SELinux 模块：
    ``` screen
    selinux_modules:
    - { path: "selinux-local-1.pp", priority: "400" }
    ```
6.  保存更改，再退出文本编辑器。
7.  在 [*host1[]{.emphasis}、host2 和 host []{.emphasis} 3*]{.emphasis}
    系统中运行您的 playbook：
    ``` screen
    # ansible-playbook -i host1,host2,host3 my-selinux-playbook.yml
    ```
:::
::: itemizedlist
**其它资源**
-   如需更多信息，安装 `rhel-system-roles`{.literal} 软件包以及查看
    `/usr/share/doc/rhel-system-roles/selinux/`{.literal}
    和`/usr/share/ansible/roles/rhel-system-roles.selinux/`{.literal}
    目录。
:::
:::
:::
[]{#using-the-logging-system-role_administration-and-configuration-tasks-using-system-roles-in-rhel.html}
::: chapter
::: titlepage
# []{#using-the-logging-system-role_administration-and-configuration-tasks-using-system-roles-in-rhel.html#using-the-logging-system-role_administration-and-configuration-tasks-using-system-roles-in-rhel}第 7 章 使用日志记录系统角色 {.title}
:::
作为系统管理员，您可以使用日志记录系统角色将 RHEL
主机配置为日志服务器，从很多客户端系统收集日志。
::: section
::: titlepage
# []{#using-the-logging-system-role_administration-and-configuration-tasks-using-system-roles-in-rhel.html#the-logging-system-role_using-the-logging-system-role}日志系统角色 {.title}
:::
使用日志记录系统角色，您可以在本地和远程主机上部署日志配置。
要在一个或多个系统中应用日志记录系统角色，您可以在
[*playbook*]{.emphasis} 中定义日志配置。playbook 是一个或多个 play
的列表。playbook 是人类可读的，它们采用 YAML 格式编写。如需有关 playbook
的更多信息，请参阅 Ansible 文档中的 [使用
playbook](https://docs.ansible.com/ansible/latest/user_guide/playbooks.html){.link}。
您希望 Ansible 根据 playbook 配置的系统集合已在
[*清单文件*]{.emphasis}中定义。如需有关创建和使用清单的更多信息，请参阅
Ansible
文档中的[如何构建您的清单](https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html){.link}。
日志记录解决方案提供多种读取日志和多个日志记录输出的方法。
例如，日志记录系统可接受以下输入：
::: itemizedlist
-   本地文件、
-   `systemd/journal`{.literal},
-   网络中的另一个日志记录系统。
:::
另外，日志记录系统还可有以下输出：
::: itemizedlist
-   日志存储在 `/var/log`{.literal} 目录中的本地文件中,
-   日志发送到 Elasticsearch,
-   日志转发到另一个日志系统。
:::
使用日志记录系统角色，您可以组合输入和输出以满足您的需要。例如，您可以配置一个日志解决方案，将来自
`journal`{.literal}
的输入存储在本地文件中，从文件中读取的输入会被转发到另一个日志记录系统中，并存储在本地日志文件中。
:::
::: section
::: titlepage
# []{#using-the-logging-system-role_administration-and-configuration-tasks-using-system-roles-in-rhel.html#logging-system-role-parameters_using-the-logging-system-role}日志记录系统角色参数 {.title}
:::
在日志记录系统角色 playbook 中，您可以在 `logging_inputs`{.literal}
参数中定义输入，输出在 `logging_outputs`{.literal} 参数中，以及在
`logging_flows`{.literal} 参数中输入和输出之间的关系。Logging
系统角色使用附加选项处理这些变量来配置日志记录系统。您还可以启用加密。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
目前，日志记录系统角色中唯一可用的日志记录系统是
[**Rsyslog**]{.strong}。
:::
::: itemizedlist
-   `logging_inputs`{.literal} - 日志记录解决方案的输入列表。
    ::: itemizedlist
    -   `name`{.literal} - 输入的唯一名称。在 `logging_flows`{.literal}
        输入列表和生成 `config`{.literal} 文件名称的一部分中使用。
    -   `type`{.literal} -
        输入元素的类型。这个类型指定与目录名称对应的任务类型
        `roles/rsyslog/{tasks,vars}/inputs/`{.literal}。
        ::: itemizedlist
        -   `basics`{.literal} - 输入配置从 `systemd`{.literal} 日志或
            `unix`{.literal} 套接字输入。
            ::: itemizedlist
            -   `kernel_message`{.literal} - 如果设置为
                `true`{.literal}，则会加载`imklog`{.literal} 。默认为
                `false`{.literal}。
            -   `use_imuxsock`{.literal} - 使用 `imuxsock`{.literal}
                替代 `imjournal`{.literal}。默认为 `false`{.literal}。
            -   `ratelimit_burst`{.literal} - 可在其中发送的最大信息数
                `ratelimit_interval`{.literal}。默认 `20000`{.literal}
                `use_imuxsock`{.literal} 为 false。默认 `200`{.literal}
                `use_imuxsock`{.literal} 为 true。
            -   `ratelimit_interval`{.literal} - 评估
                `ratelimit_burst`{.literal} 的时间间隔。如果
                `use_imuxsock`{.literal} 为 false，则默认为 600 秒。如果
                `use_imuxsock`{.literal} 为 true， 则默认为 0。0
                表示关闭速率限制。
            -   `persist_state_interval`{.literal} - Journal
                状态会保留每个 `value`{.literal} 信息。默认为
                `10`{.literal}。仅在 `use_imuxsock`{.literal} 为 false
                时有效。
            :::
        -   `files`{.literal} - 输入配置本地文件输入。
        -   `remote`{.literal} -
            输入通过网络配置其他日志记录系统的输入。
        :::
    -   `state`{.literal} - 配置文件的状态。`present`{.literal} 或者
        `absent`{.literal}。默认为 `present`{.literal}。
    :::
-   `logging_outputs`{.literal} - 日志解决方案的输出列表。
    ::: itemizedlist
    -   `files`{.literal} - 输出配置输出到本地文件。
    -   `forwards`{.literal} - 输出配置输出到另一个日志记录系统。
    -   `remote_files`{.literal} -
        输出将输出配置为另一个日志记录系统到本地文件。
    :::
-   `logging_flows`{.literal} - 定义 `logging_inputs`{.literal} 和
    `logging_outputs`{.literal} 关系的流列表。`logging_flows`{.literal}
    变量有以下键：
    ::: itemizedlist
    -   `name`{.literal} - 流的唯一名称
    -   `inputs`{.literal} - `logging_inputs`{.literal} 名称值列表
    -   `outputs`{.literal} - `logging_outputs`{.literal} 名称值列表。
    :::
:::
::: itemizedlist
**其它资源**
-   安装 `rhel-system-roles`{.literal} 软件包，文档位于
    `/usr/share/ansible/roles/rhel-system-roles.logging/README.html`{.literal}
:::
:::
::: section
::: titlepage
# []{#using-the-logging-system-role_administration-and-configuration-tasks-using-system-roles-in-rhel.html#applying-a-local-logging-system-role_using-the-logging-system-role}应用本地日志记录系统角色 {.title}
:::
按照以下步骤准备和应用 Red Hat Ansible Engine
playbook，在一组单独机器上配置日志记录解决方案。每台机器都会在本地记录日志。
::: itemizedlist
**先决条件**
-   您已在要运行 playbook 的系统中安装了 Red Hat Ansible Engine。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    您不必在要部署日志记录解决方案的系统中安装 Red Hat Ansible Engine。
    :::
-   您在要从中运行 playbook 的系统中具有 `rhel-system-roles`{.literal}
    软件包。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    您不必安装 `rsyslog`{.literal}，因为在部署后系统角色会安装
    `rsyslog`{.literal}。
    :::
-   您有一个清单文件，它列出要配置日志记录解决方案的系统。
:::
::: orderedlist
**流程**
1.  创建定义所需角色的 playbook:
    ::: orderedlist
    1.  创建新 YAML 文件，并在文本编辑器中打开，例如：
        ``` screen
        # vi logging-playbook.yml
        ```