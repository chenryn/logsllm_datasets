Beyond actively preventing DDoS attacks and some scan-
ning, each protection inadvertently slows down the discovery
of new services through Internet scanning and can slow down
the spread of malware. Dynamic blocking (completing the
handshake without acknowledging data) is the most effective
at doing so. The technique slows scans by up to 55 times as
in the case of host discovery on 27017/MongoDB (Section 5),
by forcing the scanner to timeout upon not receiving an ACK
for each scanned host. Though zero window SYN-ACKs also
cause a scanner to eventually timeout, zero-sized windows
are easy to ﬁlter. Immediately closing the connection after the
handshake causes only a negligible slowdown, bounded only
by the time it takes to complete a handshake (about 100 ms).
Connection shunning is the least effective at slowing down
stateless scanners but slows down stateful scanners at the
same rate as dynamic blocking.
2.9 Summary
Our results establish that SYN-ACKs are a poor indicator for
the presence of a service. In the worst case, SYN-ACKs overes-
timate the hosts that acknowledge data by 533% on port 11211
(memcached). We also discover that an average 16% of ser-
vices on popular ports and 40% of services on unpopular ports
fail to acknowledge data, which is a likely indicator for the
presence of a middlebox protection. We investigate why hosts
that appear to fully speak TCP do not always complete L7
handshakes in the next section.
3 Application-Layer Service Deployment
In the last section, we investigated L4-responsive services that
do not appear to speak any L7 service and are artifacts of DoS
and scanning protections. After excluding the 28% of pseudo-
Figure 5: SYN-ACK vs. Ack. Data vs. L7 Handshake—
There are up to three orders of magnitude fewer IPs that
acknowledge data than respond with a SYN-ACK packet.
services, we discover 27% of services on popular ports and
63% services on unpopular ports that acknowledge data do
not run the expected application-layer protocol (Figure 5). In
this section, we analyze services that complete unexpected
application-layer handshakes or acknowledge data but do not
speak any identiﬁable application-layer protocol. We show
that while IANA-assigned services are prominent on popular
ports, unexpected but identiﬁable services dominate other
ports. Moreover, assigned ports only host a tiny fraction of the
services that run popular protocols. For example, only 6.4%
of TLS services run on TCP/443. Services on unexpected
ports are commonly hosted by IoT devices and have weaker
security postures, which suggests the need for the security
community to study the services on unassigned ports.
3.1 Finding Unexpected Services
To determine the extent to which unexpected services co-
reside on ports with assigned services, we scan 1% random
samples of the IPv4 address space on the set of ports from
Section 2.3 (37 ports with an expected service and 18 ports
without an unexpected service or implemented scanner). For
each responsive service, we ﬁrst attempt to complete an L7
handshake using the expected protocol, if one exists. Upon
failure, we attempt follow-up handshakes using the 30 proto-
col scanners— the total number of unique protocol scanners—
implemented in ZGrab (Appendix A) with default parameters.
Ethical considerations. Prior studies have primarily per-
formed Internet scans that target only expected protocols; to
minimize the potential impact of our experiment, we scan only
1% of the IPv4 address space. We received zero abuse com-
plaints, requests to be blocked from future scans, or questions
from operators from this set of experiments.
Data acknowledging ﬁrewalls. The number of data- ac-
knowledging services per IP follows a bi-modal distribution:
98% of IPs serve fewer than four unidentiﬁable services and
2% of IPs host unidentiﬁable services on over 60K ports.
About 75% of all unidentiﬁable services on unpopular ports
3116    30th USENIX Security Symposium
USENIX Association
80/HTTP443/TLS7547/HTTP22/SSH21/FTP25/SMTP8080/HTTP4567/HTTP53/DNS110/POP33306/MYSQL143/IMAP3389/RDP587/SMTP993/IMAPS995/POP3S465/SMTP23/TELNET8443/TLS1723/PPTP5432/POSTGRES1883/MQTT5672/AMQP8883/MQTT1521/Oracle6379/redis5900/VNC20000/DNP31433/MSSQL445/SMB631/IPP6443/Kubernetes623/IPMI27017/Mongodb502/Modbus102/Siemens11211/memcachedPort/Service02468IPs (100,000s)SYN-ACK onlyACK DataL7 Handshakeare hosted by IPs with unidentiﬁable services on nearly every
port (“Unknown Service - across ports” in Figure 6). Hosts
have unidentiﬁable services on most but not all ports because
some networks drop all trafﬁc to security-sensitive ports. For
example, out of the top 50 networks that send back the most
SYN-ACK responses across all ports, 28% drop all trafﬁc to
port 445 (SMB) and 10% drop port 23 (Telnet). Hosts with
unidentiﬁable services on nearly every port are concentrated
in a small number of networks; ﬁve ASes belonging to the
Canadian government (74, 25689, 818, 2680, and 806) ac-
count for 77% of all IPs that host unidentiﬁable services on
nearly every port.
We trace this behavior to the F5 Big-IP Firewall based on a
RST ﬁngerprint [3] that contains the words “BIG-IP System.”
An F5 DevCentral blog post [4] speculates that IPs respond on
every port due to the accidental use of a wildcard when conﬁg-
uring the ﬁrewall or an overload of the ﬁrewall’s SYN-cookie
cache. We identify and exclude these hosts, to avoid biasing
our analysis, by checking whether hosts acknowledge data
on ﬁve random ephemeral ports, which effectively ﬁlters out
99.9% of such hosts. Nonetheless, an average of 10% of popu-
lar and 25% of unpopular services remain unidentiﬁable (i.e.,
do not respond to any of the 30 handshakes) after ﬁltering.
3.2 Characterizing Unexpected Services
After ﬁltering out hosts with unknown services on nearly all
ports, we investigate unexpected services on assigned ports
and services on ports without any assigned service. We sum-
marize our results in Figure 6 and describe them here.
Unexpected services. Services on popular ports typically
run the expected protocol: 93% of hosts that acknowledge
data on port 80 respond to an HTTP GET request and 89%
on port 443 complete an HTTPS handshake (Figure 6). Only
1.6% of the services on port 80 and 4.25% of services on
port 443 respond to one of the other 30 unqiue handshakes.
The majority (75%) of unexpected services on port 80 are
TLS-based and nearly all on port 443 are HTTP-based (Fig-
ure 7). This implies that operator recommendations to run
services on ports 80 or 443 to bypass ﬁrewall restrictions [49]
are not widespread. As ports decrease in popularity, the frac-
tion of IPs that speak the expected service approaches zero.
For example, on port 623, only 1% of services that acknowl-
edge data speak IPMI and 18.9% speak other identiﬁable
protocols. Consequently, the number of additionally identi-
ﬁable services diminishes after the ﬁrst few protocols and
appears to converge at 96% (Figure 8). Each port contains its
own long-tail of unexpected services, but for many ports, this
number plateaus quickly—just not at 100%.
The number of identiﬁable services on ports without an as-
signed service varies between 2–97% based on port. Among
random ephemeral ports, our 30 handshakes identify the pro-
tocol for an average 21% of services that acknowledge data
and an average of 10 unique protocols per port. Across all
scanned ports, nearly 65% of unexpected, but identiﬁable,
services speak HTTP and 30% speak TLS. IoT devices are
a prominent culprit behind unexpected services; unexpected
TLS services are 5 times more likely and unexpected SSH
2 times more likely to belong to an IoT device than 443/TLS
and 22/SSH services, respectively. We also ﬁnd evidence of
operators attempting to hide services. For example, 70% of
hosts serving TLS on the random ephemeral ports 49227,
47808, and 49152 are issued certiﬁcates by BBIN Interna-
tional Limited, a Philippine offshore online gambling plat-
form [56]. We further detail the types of services hosted on
unassigned ports in Sections 3.3.
Long tail of ports by protocol. Our results suggest that
protocols run on many additional ports beyond their primary
IANA-assigned port. To quantify how many ports researchers
need to scan to achieve coverage of a protocol, we conduct
a new scan targeting 0.1% of the IPv4 address space on
10 popular protocols on all 65,535 ports and compute the
fraction of hosts running a given service across multiple
ports (Figure 9). We ﬁnd that port 80 contains only 3.0% of
hosts running HTTP; another 1.2% of HTTP hosts run on
port 7547 and 0.7% on port 30005. To cover approximately
90% of HTTP, one must scan 25,000 ports. Only 5.5% of
Telnet resides on TCP/23, with the assigned alternative
port TCP/2323 being only the 10th most popular; other
unexpected ports dominate the top-10 ports with the most
Telnet services (Table 1). Previous work tracking botnet
behavior [10, 44] has primarily studied assigned Telnet ports
(i.e., 23, 2323); our ﬁndings imply that the attack surface and
number of potentially vulnerable devices is potentially over
15 times worse than previously shown.
Some protocols are still relatively clustered around their as-
signed ports. For example, 83.1% of all AMQP is on port 5672
and an additional 3.1% is on port 5673. HTTP and TLS are
the only two protocols which appear on every port in our 0.1%
IPv4 scan. The set of most popular ports also varies per pro-
tocol and is often not correlated with the popularity of ports
that send data (i.e., across all protocols), as most services are
drowned out by the overwhelming popularity of HTTP and
TLS. For example, 7 of the top 10 ports most likely to host Tel-
net are ranked above 12,000 in overall popularity. As a result,
when choosing which popular ports to study for a speciﬁc
protocol, we recommend researchers conduct a lightweight
sub-sampled scan across all ports.
3.3 Security of Unexpected Services
Services on unexpected ports are more likely to be insecure
than services on assigned ports. We use the results from our
experiment in Section 3.1 (scanning 30 protocols on 55 ports)
to show four examples of how unexpected services affect the
results of previous and future security studies.
USENIX Association
30th USENIX Security Symposium    3117
Figure 6: Distribution of Types of Services—A smaller fraction of services run the assigned protocol on less popular ports.
For example, only 4% of services on TCP/102 speak the assigned S7 protocol. The fraction of services that can be identiﬁed on
unassigned ports (on the right hand side) varies widely.
Figure 7: Distribution of Unexpected Services—HTTP and
TLS are the most popular unexpected services, with 65% of
unexpected services speaking HTTP and 30% speaking TLS.
IoT devices.
IoT devices are frequent targets due to their
consistently weak security designs [28, 48, 70]. While pas-
sive measurement has shown that a signiﬁcant number of
IoT devices inhabit non-standard ports [45], active mea-
surement of IoT devices has largely studied only standard
ports [14, 20, 27, 55, 62, 71]. By manually identifying server
certiﬁcates belonging to an IoT manufacturer, we ﬁnd IoT
interfaces on unexpected ports are widespread; 50% of TLS
server certiﬁcates on unexpected ports belong to IoT devices
and unexpected TLS is 5 times more likely to belong to an
IoT device than on port 443. For example, 35% of 8000/TLS
are icctv devices (i.e., surveillance cameras) in Korea Tele-
com and 38% of 80/TLS are Huawei network nodes spread
across 1% of all international networks. About 5% of TLS on
port 8443 belongs to Android TVs in Korean networks and at
least 20% belongs to routers. Unassigned ports also contain
more TCP/UPnP devices. For example, there are 12 times
more TCP/UPnP devices on port 49152 (primarily in Latin
America and Asian Telecoms) and 2 times as many on ports
58000 and 30005 than on port 80.
Vulnerable TLS. TLS services on unassigned ports are
1.17 times more likely to have a certiﬁcate with a known
Figure 8: Protocol Coverage Convergence—The marginal
gain of scanning additional protocols is negligible beyond
the top 10 protocols. Still, for most ephemeral ports (e.g.,
port 49227) the majority of services remain unknown.
private key than on assigned ports. When scanning unassigned
ports, we ﬁnd over twice as many certiﬁcates have a known
private key than reported in prior work [32, 36]. For example,
40.2% of TLS hosts on port 8081 are DOCSIS 3.1 Wireless
Gateways in Telecom Argentina (AS 10481 and 10318) using
the same OpenSSL Test Certiﬁcate with a known private key
and 39% of TLS hosts on port 58000 are Qno wireless devices
with the same self-signed certiﬁcate with a known private key.
Across 23% of scanned ports, public keys are more likely—
up to 1.7 times more—to be shared than those on port 443
(e.g., 80/TLS is 1.5 times more likely). Nonetheless, previous
work studying cryptographic keys on the Internet [26, 32,
36] has limited analysis to 443/HTTPS, 22/SSH, 995/POP3S,
993/IMAPS, and 25/SMTPS.
Login pages. Over half of unexpected ports scanned host a
higher fraction of public-facing login pages (i.e., HTML con-
taining a login, username, or password ﬁeld) than 80/HTTP
and 443/HTTPS. Though the total number of HTTP login
pages is greatest on port 80, a page on 8080/HTTP is 2.4 times
more likely to be a login page, thus offering an additional
25% of such pages compared to port 80. Furthermore, all the
aforementioned IoT devices (e.g., icctv, routers) hosting TLS
also serve a login HTTPS page on their respective ports.
3118    30th USENIX Security Symposium
USENIX Association
TLSREDISSMTPHTTPTLSTLSHTTPHTTPTLSHTTPTLSVNCFTPSSHMQTTTELNETSSH90%80%60%70%50%40%30%20%10%Fraction of IPs (known unassigned service)Port8075472221all4434 Efﬁciently Identifying Services
L7 scanning is more challenging when there is no assigned
protocol for a port or when the expected L7 handshake fails.
Though Section 3.3 demonstrates the importance of scan-
ning for unexpected services, the naive method we used tests
30 unique L7 handshakes and is too intrusive and slow for
large-scale experiments. In this section, we explore how to
most efﬁciently detect unexpected L7 services. Encourag-
ingly, only ﬁve handshake messages are needed to uncover
99% of unexpected services running identiﬁable protocols.
4.1 Protocol Discovery
We investigate two directions for accelerating protocol discov-
ery: (1) methods that trigger protocol-identifying responses
on a large number of protocols and (2) attempting handshakes
in an order that optimizes for efﬁcient service discovery.
Wait and ﬁngerprint. The most efﬁcient ﬁrst step for de-
tecting the protocol on a port is to simply wait to send any
handshake message and to see what the server sends ﬁrst. A
total of 8 of the 30 protocols implemented in ZGrab—POP3,
IMAP, MySQL, FTP, VNC, SSH, Telnet, and SMTP—are
“server-ﬁrst” protocols: after a TCP handshake concludes, the
server will send a banner to the client, which allows the client
to parse and identify the actual service. For example, 99.99%
of hosts which complete an SSH handshake have the keyword
ssh in the SSH banner, 90% of SMTP banners contains smtp,
72% of Telnet contains login or user, and 100% of VNC re-
sponses contain RFB. We are able to identify banner signatures
for all implemented binary and ASCII-based protocols.
We also ﬁnd that many protocols respond to incorrect hand-
shake messages, including HTTP and TLS. Through 1% scans
of the IPv4 space, we ﬁnd that 16 of 30 protocols respond to
an HTTP GET request or two newline characters for at least
50% of public services that speak the protocol (Figure 10).
In general, most services that respond to the wrong hand-
shake respond to both a GET request and TLS Client Hello,
but MongoDB, and Redis do not send data in response to
a TLS handshake. Though sending two newline characters
is protocol-compliant for many ASCII protocols, doing so
discovers fewer services than TLS and HTTP. We discover
a similar phenomenon when sending 50 newline characters,
thereby implying that the contents of the newline message—
rather than the length—causes the lack of responses.
A total of 75% of binary (i.e., non-ASCII) services, in-
cluding MQTT, Postgres, PPTP, Oracle DB, Microsoft SQL,
Siemens S7, DNS, and SMB, send no data back unless we
scan with their speciﬁc protocol. We note that our selection
of tested protocols are biased towards ASCII protocols, and
that it is likely that many binary protocols do not respond
to these handshake messages. However, as discussed in Sec-
tion 3.2, the long tail of binary protocols on the Internet are
Figure 9: Protocol Coverage Across Ports—Only 3.0% of
HTTP services are served on port 80. Researchers must scan
25K ports to achieve 90% coverage of HTTP services. On the
other hand, 83.1% of AMQP services are on port 5672.
Port
Hosts
Top AS
23
5523
9002
6002
8000
2,606
521
396
232
158
Telecom Argentina (10318)
Claro S.A (28573)
Fastweb Italia (12874)
Fastweb Italia (12874)
Powercomm KR (17858)
% of Hosts
in Top AS
8.7%
87%
4%
6%
89%
Table 1: Top 5 Ports Hosting Telnet—While Telnet is most
often seen on its assigned port (TCP/23), the majority of
Telnet services are served on unassigned ports. Unexpected
Telnet devices are sometimes spread across a large number
of ASes (e.g., port 9002) and are therefore likely not due to a
single operator decision.
SSH hygiene. Unexpected ports hosting SSH are 15% more
likely to allow non-public key authentication methods (e.g.,
password, host-based, challenge-response) than 22/SSH and
2.4 times less likely to be using only public key authentica-
tion (11% vs. 26%). 60% of scanned ports are on average
2 times more likely (9% vs. 18%) to be running a software
implementation of SSH that is likely to be on an IoT device
(e.g., Dropbear, Cisco, Huawei).
3.4 Summary and Implications
Most services that acknowledge data on popular IANA-
assigned ports run the expected L7 protocol, but this drops
to nearly zero for less popular protocols with assigned ports.
The majority of services that speak popular protocols (e.g.,
TLS, Telnet, HTTP) are spread across all 65K ports rather
than on their assigned port(s). For example, only 3% of HTTP
services listen on port 80. Many of the services listening on
random ports belong to IoT devices and/or have a weak se-
curity posture, and it behooves the security community to
consider these services when quantifying risk.
USENIX Association
30th USENIX Security Symposium    3119
Scan
Order
IANA-Assigned Ports
∆ Coverage
Protocol
Ephemeral Ports
Protocol
∆ Coverage
1
2
3
4
5
wait
TLS
HTTP
DNS
PPTP
51.3%
29.0%
13.6%
3.4%
1.8%
wait
HTTP
TLS
Oracle DB
PPTP
66.3%
17.1%
15.9%
0.23%
0.14%
Table 2: Optimal Handshake Order—For IANA-assigned
ports, waiting and then sending a TLS Client Hello discovers
80.3% of unexpected services. Five handshakes can identify
over 99% of identiﬁable unexpected services.
less spread out across a large number of ports compared to
common protocols like HTTP.
Figure 10: Scanning L7 With Different Handshakes—
Sending an HTTP handshake (i.e., a GET Request) prompts
the most number of services to send back data. The data can
then be used to ﬁngerprint the actual service running.
Optimal handshake order. We compute the optimal order
of L7 handshakes that maximize the chances of identifying the
service running on a port using a greedy approach across two
sets of ports: (1) all IANA-assigned ports and (2) ﬁve random
ephemeral ports (62220, 53194, 49227, 47808, and 65535). Of
the 30 protocols with ZGrab scanners that we can identify, we
ﬁnd that ﬁve handshake messages elicit responses from over
99% of identiﬁable unexpected services on both sets of ports.
We show the top-ﬁve L7 handshakes that discover the most
unexpected services for the two sets of ports, excluding the
expected services in Table 2. Across both IANA-assigned and
ephemeral ports, merely opening a connection to the client
(i.e., waiting) can immediately ﬁngerprint more than half
of unexpected services. For IANA-assigned ports, waiting
and then sending a TLS Client Hello discovers 80.3% of
unexpected services. For ephemeral ports, waiting and HTTP
discover 83.4% of services. It is not surprising that DNS and
PPTP provide the 4th and 5th most additional coverage for
IANA-assigned ports, as these are relatively popular protocols
that do not answer to other handshakes (e.g., HTTP GET).
4.2
Impact of L7 Filtering
One reason that we may not be able to identify all services is
that even if our protocol guess is correct, our selected hand-
shake parameters might be rejected. For example, in SNMP,
servers may reject requests that do not specify the correct
community string in the ﬁrst packet by ﬁrst acknowledging
the data, but then sending a TCP RST. To estimate whether L7
ﬁltering decisions cause a service to not send any data back to
the client, thereby hindering ﬁngerprinting efforts, we run two
sets of scans, each with different handshake options, for each
of the following ports and protocols: 8081/HTTP, 443/TLS,
and 1723/PPTP.
For HTTP, in one scan we send a GET request and
in another we specify the OPTIONS request. For TLS,
in one scan we advertise the insecure cipher suite
TLS_RSA_EXPORT_WITH_RC4_40_MD5 and in the other
we advertise modern Chrome cipher suites. For PPTP, in
one scan the ﬁrst message is crafted to contain the speci-
ﬁed “Magic Cookie” value (a speciﬁc constant used to syn-
chronize the TCP datastream) according to RFC 2637 [31],
0x1A2B3C4D, and in another we specify the Magic Cookie to
be 0x11111111. RFC 2637 states that “Loss of synchroniza-
tion must result in immediate closing of the control connec-
tion’s TCP session;” we thus expect that fewer IPs will send
data to the client if the magic cookie is incorrect and use this
as a “control” experiment.
8081 (HTTP)
Port (Service) Handshake Option
Only GET Request
Only OPTIONS Request
Both
Only Good Cookie
Only Bad Cookie
Both
Only Secure Cipher
Only Insecure Cipher
Both
1723 (PPTP)
443 (TLS)
IPs that send data
27%
7.3%