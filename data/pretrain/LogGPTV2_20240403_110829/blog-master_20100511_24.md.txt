## [From OpenBSD]PF: Firewall Redundancy with CARP and pfsync  
### 作者  
digoal  
### 日期  
2010-05-11  
### 标签  
carp  
----  
## 背景  
Table of Contents  
Introduction to CARP  
CARP Operation  
Configuring CARP  
CARP Example  
Introduction to pfsync  
pfsync Operation  
Configuring pfsync  
pfsync Example  
Combining CARP and pfsync for Failover and Redundancy  
Operational Issues  
Configuring CARP and pfsync During Boot  
Forcing Failover of the Master  
Ruleset Tips  
Other References  
Virtual Router Redundancy Protocol (VRRP) and the Hot Standby Router Protocol (HSRP).  
CARP works by allowing a group of hosts on the same network segment to share an IP address. This group of hosts is referred to as a “redundancy group”. The redundancy group is assigned an IP address that is shared amongst the group members. Within the group, one host is designated the “master” and the rest as “backups”. The master host is the one that currently “holds” the shared IP; it responds to any traffic or ARP requests directed towards it. Each host may belong to more than one redundancy group at a time.  
One common use for CARP is to create a group of redundant firewalls. The virtual IP that is assigned to the redundancy group is configured on client machines as the default gateway. In the event that the master firewall suffers a failure or is taken offline, the IP will move to one of the backup firewalls and service will continue unaffected.  
CARP supports IPv4 and IPv6.carp(4) virtual network interface. As such, CARP is configured using ifconfig(8).  
ifconfig carpN create  
ifconfig carpN vhid vhid [pass password] [carpdev carpdev] \  
[advbase advbase] [advskew advskew] [state state] ipaddress \  
netmask mask  
carpN  
The name of the carp(4) virtual interface where N is an integer that represents the interface’s number (e.g. carp10).  
vhid  
The Virtual Host ID. This is a unique number that is used to identify the redundancy group to other nodes on the network. Acceptable values are from 1 to 255.  
password  
The authentication password to use when talking to other CARP-enabled hosts in this redundancy group. This must be the same on all members of the group.  
carpdev  
This optional parameter specifies the physical network interface that belongs to this redundancy group. By default, CARP will try to determine which interface to use by looking for a physical interface that is in the same subnet as the ipaddress and mask combination given to the carp(4) interface.  
advbase  
This optional parameter specifies how often, in seconds, to advertise that we’re a member of the redundancy group. The default is 1 second. Acceptable values are from 1 to 255.  
advskew  
This optional parameter specifies how much to skew the advbase when sending CARP advertisements. By manipulating advskew, the master CARP host can be chosen. The higher the number, the less preferred the host will be when choosing a master. The default is 0. Acceptable values are from 0 to 254.  
state  
Force a carp(4) interface into a certain state. Valid states are init, backup, and master.  
ipaddress  
This is the shared IP address assigned to the redundancy group. This address does not have to be in the same subnet as the IP address on the physical interface (if present). This address needs to be the same on all hosts in the group, however.  
mask  
The subnet mask of the shared IP.  
Further CARP behavior can be controlled via sysctl(8).  
net.inet.carp.allow  
Accept incoming CARP packets or not. Default is 1 (yes).  
net.inet.carp.preempt  
Allow hosts within a redundancy group that have a better advbase and advskew to preempt the master. In addition, this option also enables failing over all interfaces in the event that one interface goes down. If one physical CARP-enabled interface goes down, CARP will change advskew to 240 on all other CARP-enabled interfaces, in essence, failing itself over. This option is 0 (disabled) by default.  
net.inet.carp.log  
Log bad CARP packets. Default is 0 (disabled).  
pfsync(4) network interface exposes certain changes made to the pf(4) state table. By monitoring this device using tcpdump(8), state table changes can be observed in real time. In addition, the pfsync(4) interface can send these state change messages out on the network so that other nodes running PF can merge the changes into their own state tables. Likewise, pfsync(4) can also listen on the network for incoming messages.below).  
Use the ifconfig(8) syncpeer option (see below) so that updates are unicast directly to the peer, then configure ipsec(4) between the hosts to secure the pfsync(4) traffic.  
When updates are being sent and received on the network, pfsync packets should be passed in the filter ruleset:  
pass on $sync_if proto pfsync  
$sync_if should be the physical interface that pfsync(4) is communicating over.ifconfig(8).  
ifconfig pfsyncN syncdev syncdev [syncpeer syncpeer]  
pfsyncN  
The name of the pfsync(4) interface. pfsync0 exists by default when using the GENERIC kernel.  
syncdev  
The name of the physical interface used to send pfsync updates out.  
syncpeer  
This optional parameter specifies the IP address of a host to exchange pfsync updates with. By default pfsync updates are multicast on the local network. This option overrides that behavior and instead unicasts the update to the specified syncpeer.  
hostname.if(5) file. The netstart startup script will take care of creating the interface and configuring it.  
Examples:  
/etc/hostname.carp1  
inet 172.16.0.100 255.255.255.0 172.16.0.255 vhid 1 carpdev em0 \  
pass lanpasswd  
/etc/hostname.pfsync0  
up syncdev em1  
OpenBGPD and sasyncd(8) make use of the demotion counter to ensure that the firewall does not become master until BGP sessions become established and IPsec SAs are synchronized.  
Ruleset Tips  
Filter the physical interface. As far as PF is concerned, network traffic comes from the physical interface, not the CARP virtual interface (i.e., carp0). So, write your rule sets accordingly. Don’t forget that an interface name in a PF rule can be either the name of a physical interface or an address associated with that interface. For example, this rule could be correct:  
pass in on fxp0 inet proto tcp from any to carp0 port 22  
but replacing the fxp0 with carp0 would not work as you desire.  
DON’T forget to pass proto carp and proto pfsync!  
[Count](http://info.flagcounter.com/h9V1)  