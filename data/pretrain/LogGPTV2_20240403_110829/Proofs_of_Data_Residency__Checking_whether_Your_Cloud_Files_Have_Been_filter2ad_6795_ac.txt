general, are partitioned into sectors of 512 bytes5. These sec-
tors are physically aligned on the hardware device. When a
data block is written to disk, it may span across multiple sec-
tors, which are not necessarily physically contiguous. Read-
ing such data block may require multiple seeks, depending
upon the (relative) position of the sectors on the disk. This
results in substantial variance in atomic fetching time. On
the other hand, if the data block ﬁts entirely in one physical
sector, only a single seek is required and thus the atomic
fetching time is less varied. To eliminate noise in timing
measurements, it is desired to have blocks of small size so
that each data block ﬁts in a physical disk sector with high
probability. We exhibit the implication of the block size on
security in greater details in Section 7. Previous works [15,
22, 17] did not take into consideration mechanisms and be-
haviours of storage hardware with respect to the block size,
resulting in an oversight of the strong eﬀect that the block
size has on security.
6.5 Security Analysis
The level of false acceptance/rejection rate of the pro-
including
posed protocol depends on various parameters,
the environment proﬁle E, the audit size v (number of
challenges), the bit length of the MACs b, the expansion
rate of the error-erasure code c, and the two thresholds d
and l. Also recall that during the setup phase, the original
ﬁle F of n blocks is encoded into (cid:101)F of m = (1 + c)n blocks
such that knowledge of any n encoded blocks is suﬃcient to
reconstruct F .
False acceptance rate. Let us consider an adversary A who
keeps n− 1 blocks of (cid:101)F on its local drives and the remaining
D, and the other by (cid:101)D. Clearly, the original ﬁle F cannot be
blocks in the remote storage. We denote the ﬁrst portion by
reconstructed from D. We want to determine the acceptance
rate of this adversary, which in turn gives a bound on the
false acceptance rate.
Consider a challenge qi asking for a block fi, we say that
it is a hit if one of the following two conditions holds:
1. fi is in (cid:101)D and the latency tnet
i + trmt
i > d;
2. fi is in D and the latency tnet
i + tloc
i > d,
i
is the transmission time of the qi and fi, tloc
where tnet
the fetching time of fi if it is stored locally, and trmt
fetching time if stored remotely.
is
i
is its
i
For a challenge that is a hit, the adversary has two choices.
If the adversary chooses to load the response from the stor-
age, then the response will certainly arrive late and con-
tribute one count towards the number of late responses per-
mitted by the late delivery threshold l. On the other hand, if
the adversary chooses to forge the response, then the prob-
ability that the response is valid is 2−b + µ(λ) where µ() is
some negligible function on the security parameter λ. Note
5Although hard drives with Advanced Format (AF) are di-
vided into sectors exceeding 512 bytes, we shall rely on the
512-byte sector format. The security of our model is not
aﬀected when the storage devices use the advanced format.
However, if the protocols is designed with AF sector size, the
security becomes malleable on system equipped with legacy
512-byte sector-based HDDs.
7
i
that it is possible that the transmission time tnet
already ex-
ceeds the threshold d, and thus the response will deﬁnitely
be late even if the adversary chooses to forge the response.
Let Hit be the number of hits among the v random chal-
lenges. Given the set of hits, A chooses l challenges to which
it will respond by reading data from the storage. These
l challenges are chosen with priority given to those whose
transmission time already exceeds d. For the remaining
Hit − l challenges, A forges the responses. Such A is op-
timal in the sense that all other choices lead to a lower or
equal probability of acceptance.
The probability that a challenge is hit can be derived from
the environment proﬁle E, the latency threshold d and the
expansion rate c. Clearly Hit follows binomial distribution.
Furthermore, the probability that all x forged responses are
valid is 2−bx + µ(λ). Hence, the probability that A being
accepted is at most
Pr(Hit ≤ l) +
Pr(Hit = x + l) · (2
−bx + µ(λ))
x=1
The above is not an equality because we omit the cases
wherein more than l challenges have transmission time ex-
ceeding d. Although the derivation is based on a speciﬁc
adversary A, it serves as an upper bound of the false accep-
tance rate. There is no loss of generality, for the fact that the
original ﬁle F cannot be constructed from D implies there
must be less than n − 1 blocks in D.
Recall that the challenges are randomly generated,
it
follows that the number of challenge collisions (i.e. those
that ask for the same block) would be very small, thus
the cache C (see Section 4.2) kept by P only has minor
eﬀects on the false acceptance rate. Hence, in this security
analysis, we can safely ignore the eﬀect of the cache and
consider the setting where the cache size is zero.
v−l(cid:88)
False rejection rate. Let γ denote the probability that the
honest prover keeping all the data locally fails to pass the
veriﬁcation. Let α be the probability the requested block
arrives later than the threshold d (i.e. tnet
i > d). The
false rejection rate of an audit with v challenges is:
i + tloc
(cid:32)
(cid:33)
v
j
v(cid:88)
j=l+1
γ =
αj(1 − α)v−j
False acceptance rate of PoR. For comparison, we consider
the false acceptance rate DL of an adversary who keeps only
n − 1 blocks in local storage and discards the rest:
(cid:18) 2b + c
(cid:19)v
(1 + c)2b
DL ≤
+ µ(λ)
Hence, if the integrity of the data are compromised, it will
be detected with an overwhelming probability 1 − DL.
7. EVALUATIONS
We conduct experimental studies to evaluate the perfor-
mance and security of our residency checking construction.
In details, we investigate the eﬀect of block size s, the MAC
length b, the audit size v and choice of the late delivery
threshold l on the false acceptance and false rejection rates
ψ and γ, respectively.
8
150
100
50
0
P
A
15
10
30
Response Latency (ms)
20
25
150
100
50
0
P
A
15
10
30
Response Latency (ms)
20
25
150
100
50
0
P
A
15
10
30
Response Latency (ms)
20
25
(a) 1-byte blocks
P
A
150
(b) 8-byte blocks
P
A
150
(c) 16-byte blocks
P
A
150
100
50
0
15
10
30
Response Latency (ms)
20
25
100
50
0
15
10
30
Response Latency (ms)
20
25
100
50
0
15
10
30
Response Latency (ms)
20
25
(d) 32-byte blocks
P
A
150
(e) 64-byte blocks
P
A
150
(f) 128-byte blocks
P
A
150
100
50
0
15
10
30
Response Latency (ms)
20
25
100
50
0
15
10
30
Response Latency (ms)
20
25
100
50
0
15
10
30
Response Latency (ms)
20
25
(g) 256-byte blocks
(h) 512-byte blocks
(i) 1024-byte blocks
the response latencies
Figure 1: Histograms of
in-
curred by honest prover P and dishonest prover A in
E-ResCheck with respect to diﬀerent block sizes. P stores
the blocks as-is in its local drives, whereas A splits large
blocks into 64-byte segments and stores all the data at re-
mote storages.
7.1 Setup
In our experiments, the honest prover P stores the data as
a whole in its local drives, while the dishonest prover A relo-
cates the data blocks by splitting large blocks whose size are
larger than 64 bytes into 64-byte segments and distributing
them to remote storage servers6, and retrieves them (simul-
taneously if possible) upon V’s requests.
All experiments are conducted on Ubuntu 14.04 commod-
ity systems equipped with quad-core Intel Skylake proces-
sors with SGX Enabled BIOS support, 1TB hard drives with
I/O latency ranging from 12-15ms on average and 1GB Eth-
ernet cards. P and A are represented by diﬀerent programs
running on the same physical system. In N-ResCheck, the
provers and the veriﬁer are located across countries7, while
in E-ResCheck, the veriﬁcation enclave VE resides on the
very physical system which hosts P and A. VE is provisioned
using Intel SGX SDK for Linux [8]. Unless stated otherwise,
all experiments are repeated for 100 times and the average
results are reported.
7.2 Effect of block size (s)
As discussed earlier, a large block may be scattered across
physical disk sectors,
leading to higher and more varied
fetching time. Even worse, this potentially exposes an at-
tack vector whereby the adversary splits a large block into
several smaller segments so that it can retrieve them simul-
6Average round-trip time of transmitting a 64-byte packet
between A and these servers is 6.5ms.
7Average round-trip time of transmitting a 64-byte packet
between them is 12.7ms.
1
0.8
0.6
0.4
0.2
0
10 12 14 16 18 20 22 24 26
Response Latency (ms)
P
A
1
0.8
0.6
0.4
0.2
0
P
A
12 14 16 18 20 22 24 26
Response Latency (ms)
1
0.8
0.6
0.4
0.2
0
10
Response Latency (ms)
P
A
15
20
25
(a) 1-byte blocks
1
0.8
0.6
0.4
0.2
0
10
Response Latency (ms)
P
A
15
20
25
(d) 32-byte blocks
1
0.8
0.6
0.4
0.2
0
P
A
15
Response Latency (ms)
20
25
(b) 8-byte blocks
1
0.8
0.6
0.4
0.2
0
10 12 14 16 18 20 22 24 26
Response Latency (ms)
P
A
(e) 64-byte blocks
1
0.8
0.6
0.4
0.2
0
12 14 16 18 20 22 24 26
Response Latency (ms)
P
A
(c) 16-byte blocks
1
0.8
0.6
0.4
0.2
0
10
Response Latency (ms)
P
A
15
20
25
(f) 128-byte blocks
1
0.8
0.6
0.4
0.2
0
P
A