## 练习 6
实现 `fs/serv.c` 中的 `serve_write` 和 `lib/file.c` 中的 `devfile_write`。

使用 `make grade` 测试你的代码。如果你的代码通过了 `file_write`、`fileread after filewrite`、`open` 和 `large file` 的测试，你的得分应为 90（总分为 150）。

## 进程增殖
我们为你提供了 `spawn` 的代码（查看 `lib/spawn.c` 文件），它用于创建一个新环境、从文件系统中加载一个程序镜像并启动子环境来运行这个程序。父进程与子环境独立运行。`spawn` 函数的行为类似于 UNIX 中的 `fork` 后立即执行 `exec`。

我们实现了 `spawn` 而不是一个类 UNIX 的 `exec`，因为 `spawn` 可以很容易地在用户空间中以“外内核式”实现，无需内核的特别帮助。要在用户空间中实现 `exec`，你需要考虑如何处理它，并理解为什么这样做会很困难。

### 练习 7
`spawn` 依赖于新的系统调用 `sys_env_set_trapframe` 来初始化新创建环境的状态。实现 `kern/syscall.c` 中的 `sys_env_set_trapframe`。（不要忘记在 `syscall()` 中分派新的系统调用）

运行 `kern/init.c` 中的 `user/spawnhello` 程序来测试你的代码，它将尝试从文件系统中生成 `/hello`。

使用 `make grade` 测试你的代码。

### 小挑战！
- 实现 Unix 式的 `exec`。
- 实现 `mmap` 式的文件内存映射，并尽可能修改 `spawn` 从 ELF 中直接映射页。

## 跨 `fork` 和 `spawn` 共享库状态
UNIX 文件描述符是一个通用概念，包括管道、控制台 I/O 等。在 JOS 中，每个设备都有一个相应的 `struct Dev`，其中包含指向实现读取/写入等功能的函数的指针。对于每种设备类型，`lib/fd.c` 提供了一个类 UNIX 的文件描述符接口。每个 `struct Fd` 表示其设备类型，大多数 `lib/fd.c` 中的函数只是简单地将操作分派到 `struct Dev` 中的相应函数上。

`lib/fd.c` 在每个应用程序环境的地址空间中维护一个文件描述符表区域，起始于 `FDTABLE` 处。该区域保留了最多 `MAXFD`（当前为 32）个文件描述符所需的地址空间（4KB）。在任意给定时刻，只有当相应的文件描述符正在使用时，特定的文件描述符表才会被映射。每个文件描述符表还可能有一个可选的“数据页”，开始于 `FILEDATA` 处，如果需要，相应的设备可以使用它。

我们希望跨 `fork` 和 `spawn` 共享文件描述符状态，但这些状态保存在用户空间内存中。目前，在 `fork` 中，内存是标记为写时复制的，因此状态会被复制而不是共享。而在 `spawn` 中，内存不会被复制，而是直接保留（这意味着新环境可能会从一个未打开的文件描述符开始）。

我们将修改 `fork`，使其知道某些由“库管理系统”使用的、总是需要共享的内存区域。不是硬编码一个特定区域列表，而是在页表条目中设置一个“不使用”的位（类似于我们在 `fork` 中使用的 `PTE_COW` 位）。

我们在 `inc/lib.h` 中定义了一个新的 `PTE_SHARE` 位，这是 Intel 和 AMD 手册中标记为“软件可用”的三个 PTE 位之一。我们将创建一个约定：如果页表条目设置了 `PTE_SHARE` 位，则在 `fork` 和 `spawn` 中应直接从父环境中复制 PTE 到子环境中。注意这与写时复制的区别：我们希望确保页更新能够被共享。

### 练习 8
- 修改 `lib/fork.c` 中的 `duppage`，遵循新的约定。如果页表条目设置了 `PTE_SHARE` 位，仅直接复制映射。（你应该使用 `PTE_SYSCALL` 而不是 `0xfff` 来掩掉相关的位。`0xfff` 仅选择可访问位和脏位。）
- 在 `lib/spawn.c` 中实现 `copy_shared_pages`。它应该遍历当前进程中所有的页表条目（类似于 `fork`），并将设置了 `PTE_SHARE` 位的页映射复制到子进程中。

使用 `make run-testpteshare` 检查你的代码是否正确。如果正确，你应该会看到类似 `fork handles PTE_SHARE right` 和 `spawn handles PTE_SHARE right` 的输出行。

使用 `make run-testfdsharing` 检查文件描述符是否正确共享。如果正确，你应该会看到 `read in child succeeded` 和 `read in parent succeeded` 的输出行。

## 键盘接口
为了使 shell 正常工作，我们需要一种输入方式。QEMU 可以显示输出，我们将输出写入 CGA 显示器和串行端口，但到目前为止，我们只能在内核监视器中接收输入。在 QEMU 中，图形窗口中的键盘输入作为从键盘到 JOS 的输入，控制台输入则作为出现在串行端口上的字符。`kern/console.c` 中已经包含了自实验 1 以来内核监视器所使用的键盘和串行端口驱动程序，现在你需要将其添加到系统中。

### 练习 9
- 在 `kern/trap.c` 中，调用 `kbd_intr` 处理中断 `IRQ_OFFSET+IRQ_KBD` 和 `serial_intr` 处理中断 `IRQ_OFFSET+IRQ_SERIAL`。

在 `lib/console.c` 中，我们为你实现了控制台输入/输出文件。`kbd_intr` 和 `serial_intr` 将使用最新读取的输入填充缓冲区，而控制台文件类型会清空缓冲区（默认情况下，控制台文件类型为 stdin/stdout，除非用户重定向它们）。

运行 `make run-testkbd` 并输入几行来测试你的代码。在你完成输入后，系统将回显你输入的行。如果控制台和窗口都可以使用，请在两者上都进行测试。

## Shell
运行 `make run-icode` 或 `make run-icode-nox` 将运行你的内核并启动 `user/icode`。`icode` 会运行 `init`，后者将设置控制台作为文件描述符 0 和 1（即标准输入和标准输出），然后生成环境 `sh`，即 shell。之后你应该能够运行以下命令：
```sh
echo hello world | cat
cat lorem | cat
cat lorem | num
cat lorem | num | num | num | num | num
lsfd
```
注意，用户库常规程序 `cprintf` 会直接输出到控制台，而不使用文件描述符代码。这对调试很有用，但对连接其他程序不利。要将输出打印到特定文件描述符（例如 1，即标准输出），请使用 `fprintf(1, "...", ...)`。`printf("...", ...)` 是将输出打印到文件描述符 1（标准输出）的快捷方式。参见 `user/lsfd.c` 了解更多示例。

### 练习 10
这个 shell 不支持 I/O 重定向。如果你能够运行 `run sh` 并在 shell 中输入 `sh`，则说明你的 shell 已经支持基本功能。

运行 `make run-testshell` 测试你的 shell。`testshell` 只是简单地向 shell “喂”上面的命令（也可以在 `fs/testshell.sh` 中找到），然后检查其输出是否与 `fs/testshell.key` 一致。

### 小挑战！
给你的 shell 添加更多特性，包括但不限于：
- 后台命令 (`ls &`)
- 一行中运行多个命令 (`ls; echo hi`)
- 命令组 (`(ls; echo hi) | cat > out`)
- 环境变量扩展 (`echo $hello`)
- 引号 (`echo "a | b"`)
- 命令行历史和/或编辑功能
- Tab 自动补全
- 查找目录、cd 和路径
- 文件创建
- 使用快捷键 `ctl-c` 终止正在运行的环境

还有很多其他可以做的事情，不仅限于上述列表。

到目前为止，你的代码应该通过所有测试。和以前一样，你可以使用 `make grade` 对提交进行评级，并使用 `make handin` 提交你的实验。

**本实验到此结束。** 和以前一样，不要忘了运行 `make grade` 进行评级测试，并将你的练习答案和挑战问题的解决方案写下来。在动手实验之前，使用 `git status` 和 `git diff` 检查你的变更，并不要忘记使用 `git add answers-lab5.txt` 提交你的答案。完成后，使用 `git commit -am 'my solutions to lab 5'` 提交你的变更，然后使用 `make handin` 提交你的解决方案。

---
via: 
作者：[csail.mit](https://pdos.csail.mit.edu)  
选题：[lujun9972](https://github.com/lujun9972)  
译者：[qhwdw](https://github.com/qhwdw)  
校对：[wxy](https://github.com/wxy)

本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出