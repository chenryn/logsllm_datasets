# Cost-Effective Configuration of Content Resiliency Services Under Correlated Failures

**Authors:**
- Jinliang Fan
- Tianying Chang
- Dimitrios E. Pendarakis
- Zhen Liu

## Abstract

Value-added content resiliency services help alleviate the burden of resiliency provisioning and maintenance for service users, particularly home users and small to medium-sized organizations, who often struggle with handling correlated failures that impact large areas. For service providers to achieve business success, the cost-effectiveness of their resiliency strategies is crucial. While meeting the content resiliency requirements specified by end users, it is essential to avoid excessive preventive operation costs caused by over-reaction to potential risks. In this paper, we address the problem of cost-effective configuration in content resiliency service networks under both independent and geographically correlated failures. We propose a new approach to modeling correlated failures in a representable, quantifiable, and consistent manner, which enables both quantified availability guarantees and aggressive prevention cost optimization. We then formulate the cost-effective configuration problem and develop both optimal and heuristic-based algorithms to solve it. Our experiments demonstrate that, with the aid of good models for correlated failures, the operational costs of the services can be significantly reduced without compromising the user-specified content resiliency.

## 1. Introduction

Despite significant efforts to improve the reliability of computer hardware and software, failures remain common in today's computer and network systems. These failures can be caused by worn-out devices, software bugs, and external factors such as power outages, environmental conditions, and operational accidents. Replication is one of the most important strategies for enhancing content resilience in the presence of failures [1][2][3]. It can significantly improve data availability even when multiple servers fail simultaneously and reduce the potential damage from data loss.

While content servers can be deployed by an organization for private use, this paper focuses on Content Resiliency Service Networks. As shown in Figure 1, a content resiliency service provider deploys a pool of content servers at different locations over the Internet. End-users access their data (i.e., upload and download) from a local content server, which then replicates the data to other servers in the pool. Such value-added services free users, especially home users and small to medium-sized organizations, from the burden of resiliency planning and maintenance, while providing profit opportunities for the service provider. On one hand, the service provider contracts with users through service agreements, allowing them to specify the desired level of content resiliency or penalties for data loss. On the other hand, the service provider incurs prevention costs, such as communication, storage, and management costs, to maintain the normal operation of the content servers and meet the agreed-upon resiliency levels.

Cost-oriented configuration optimization is particularly important for services deployed for profit. Figure 2 illustrates a content resiliency service network with nine content servers. A user uploads data to their local content server \( S_0 \), and \( S_0 \) is responsible for choosing a set of remote replication locations from the other eight servers. For example, it can choose servers \( S_3 \) and \( S_7 \) to form a replication set \(\{S_0, S_3, S_7\}\), or choose servers \( S_2 \) and \( S_5 \) to form a set \(\{S_0, S_2, S_5\}\). Intuitively, the further the servers are from each other, the less likely they will fail simultaneously, but the higher the communication cost. An effective configuration should maintain the target level of content resiliency while minimizing prevention costs and avoiding excessive costs due to over-reaction to potential risks.

## 2. Correlated Failures and Modeling Approaches

In this paper, we study the static and dynamic configuration problems in content resiliency service networks affected by both independent and geographically correlated failures. Geographically correlated failures are those caused by events impacting geographical vicinities, such as power outages, weather, and environmental disasters. These failures often affect large areas, rendering users' private local backup systems ineffective and making third-party content resiliency services attractive. The impact of geographically correlated failures on system resiliency has drawn interest from both industry and academia [1][2][3], and remote placement of system entities has been proposed as a general solution to improve system resiliency. However, these efforts suffer from the lack of good models for geographically correlated failures. Without such models, improvements in resiliency cannot be fully quantified, and aggressive cost optimization methods cannot be developed.

The remainder of this paper is organized as follows. In Section 2, we describe a new approach to modeling correlated failures. In Section 3, we apply this approach to model geographically correlated failures and formulate the static configuration problem in content resiliency service networks after identifying cost factors in the replication process. In Section 4, we present optimization algorithms, including those that generate real optimal solutions and heuristic-based ones, for solving the static configuration problem. In Section 5, we discuss the dynamic configuration problem in content resiliency service networks. We conclude in Section 6.

### 2.1 Potential Sources of Failures

Failures in distributed systems can be either independent or correlated. Independent failures are local to a single entity and caused by specific hardware or software conditions. In contrast, correlated failures are caused by fault events impacting multiple entities simultaneously or within a very short interval and have drawn attention from researchers in various domains of computer science [4][5][6][7][8][9][10][11]. Modeling correlated failures is more challenging than modeling independent ones due to the existence of multiple-way correlations and the exponential number of subsets of entities.

Much research on modeling correlated failures has focused on building models that specify only two-way correlations between entities and approximate multiple-way correlations using two-way correlations. For example, Weatherspoon et al. [2] cluster entities based on their two-way correlations and use the clustering as an implicit measure of multiple-way correlations. This method generally helps in addressing correlated failures in system design but does not produce quantifiable models and thus cannot be used in a service environment where availability requirements are quantified. Some approaches, such as Victor and Goyal’s beta-binomial model [12] and Bakkaloglu and Wylie et al.’s recursive linear model [13][14], can build models that approximate multiple-way correlations from two-way correlations in a quantifiable way. However, these models are designed to capture failures of m-out-of-n entities and do not allow for calculating the probability of failure for specific subsets of entities. To leverage these models, system designers must assume the level of multiple-way correlations is homogeneous across the system (and sacrifice accuracy in availability) or choose a system-wide upper bound (and sacrifice potential in cost optimization). State-based models [7][15] are more expressive and consistent in quantifying entity correlations but are also more complex. Tang’s model [7] can derive correlated failure states based on two-way dependencies between entities.

In the context of content resiliency service networks, correlated failures of entities (i.e., content servers) are mainly caused by external fault events (e.g., power outages, environmental conditions) rather than dependencies between entities (e.g., overload shifting). Additionally, transitions between intermediate states are difficult to capture in large distributed systems.

### 2.2 New Approach to Modeling Correlated Failures

In this paper, we propose a new general approach to modeling correlated failures. Instead of directly modeling failure correlations between entities, we model the occurrence of fault events that impact the entities and cause correlated failures. Failure correlations between entities are then inferred. Our approach has two steps:

1. **Projection to Fault Field:** Entities are projected onto a Euclidean fault field and assigned coordinates based on a certain distance metric. Depending on the type of correlated failures, this distance metric could be physical (e.g., geographic distance), logical (e.g., distance in communication networks), or simply the measured two-way failure correlation between two entities.
2. **Modeling Fault Events:** Fault events are modeled over the fault field, specifying their location and impact. The fault field acts as a medium to establish correlation between the fault events and the entities using their locations in the fault field.

Models constructed in this way intuitively reflect the nature and cause of correlated failures in content resiliency services and provide a consistent view of failure correlation between entities. In Section 3.3.1, we apply our approach to modeling geographically correlated failures. This model allows us to study cost-effective configuration issues in content resiliency service networks in the presence of both independent and geographically correlated failures.

## 3. Static Configuration Problem in Content Resiliency Service

For a formal discussion of the static configuration problem in content resiliency service networks, we first describe our failure models for independent and geographically correlated failures and discuss the meaning of data availability under such failure models. We then identify the cost factors in the data replication process and formulate the problem of cost-effective data replication as a constrained minimization problem. We use discrete time models where the time axis is divided into slots. In real systems, the length of the time slot depends on the system's response time to failures. In this section and Section 4, we assume that the system has enough time to detect and complete its responses (e.g., recovering data, adjusting backup sets) by the end of a time slot for all failures that have happened during that time slot. This assumption will be relaxed in Section 5 when we discuss cost minimization over a sequence of time slots under dynamic system conditions.

### 3.1 Failure Models

We assume the pool of content servers in the content resiliency service network is distributed over a 2-dimensional fault field. We assume the geographic location of each content server is known to all other content servers (e.g., by an administrator or through some information exchange protocol) in the form of coordinates in the 2-dimensional fault field. We consider two categories of failures that could happen to the content servers: independent failures and geographically correlated failures.

#### 3.1.1 Geographically Correlated Failure Model

Instead of directly specifying the probability of content server failures and their correlation, we model the geographical distribution and the impact of geographical fault events (e.g., power outages) that could cause multiple content servers to fail simultaneously in the same time slot.

1. **Probability of Fault Event Occurrence:** We assume that in each time slot, the probability that one geographical fault event occurs is \( P_{\text{corr}} \) and the probability that more than one such fault event occurs is negligible.
2. **Distribution of Fault Event Centers:** We assume that the center of a fault event is uniformly distributed over a circular fault field with radius \( R \) on a 2-dimensional plane.
3. **Impact of Fault Events:** To characterize the phenomenon that fault events affecting large geographical areas are much rarer than those affecting small areas, we assume the impact of a fault event decays exponentially. Specifically, the impact of a fault event reaches as far as a distance \( r \) from the center of the fault, where \( r \) is a random variable exponentially distributed with parameter \( c \). When a fault event happens, all content servers within a radius \( r \) of the center of the fault event fail simultaneously.

Figure 3 provides a visual representation of our model for geographically correlated failures. The fault field is contained within the solid-line circle, and the impact of an example fault event is represented by a dashed-line circle. Among the five content servers (N1-N5) in the figure, two content servers (N1 and N2) fail simultaneously due to the example fault event.

#### 3.1.2 Independent Failure Model

In addition to correlated failures, we also consider independent failures. These are caused by factors local to each specific content server, such as broken hardware or crashed software. For simplicity, we assume that each content server fails independently with a fixed probability \( P_{\text{ind}} \) in each time slot.

### 3.2 Analysis of Data Availability

Data loss occurs when all content servers storing a piece of data fail in the same time slot. When a fault event occurs at center \( v \), all content servers in a replication set \( S \) will fail correlatively if and only if their maximum distance to \( v \) is equal to or less than the radius of the fault event. The probability that they all fail in this fault is given by:
\[ F_{\text{corr}}(S, v) = e^{-c \cdot d(S, v)} \]
where \( d(S, v) = \max_{N_i \in S} d(N_i, v) \). If the probability of independent failures is zero, the probability that all content servers in \( S \) fail in the same time slot is the integral of the above equation over all possible centers of the fault event:
\[ \int F_{\text{corr}}(S, v) \, dv = \frac{P_{\text{corr}}}{\pi R^2} \int e^{-c \cdot d(S, v)} \, dv \]

When both independent and geographically correlated failures are possible, the failure of a whole set of content servers can result from various combinations of independent and correlated failures. Given a fault event that has occurred at center \( v \), we need to consider separately the cases where the radius of the fault event covers one server, two servers, ..., or all servers in the set \( S \). Assuming the content servers in \( S \) are sorted based on their distances to the center of the fault \( v \) and are \( N_{i1}, N_{i2}, \ldots, N_{i|S|} \) in increasing order, we have:
\[ F_{\text{comb}}(S) = P(\text{r} \geq d(N_{i|S|}, v)) + \sum_{s=1}^{|S|-1} P(\text{r} \in [d(N_{is-1}, v), d(N_{is}, v)]) \cdot \prod_{k=s}^{|S|} P(N_{ik} \text{ fails}) \]

This combined failure probability accounts for the different ways in which the content servers in \( S \) can fail, either independently or correlatively.

## 4. Optimization Algorithms

In this section, we present optimization algorithms for solving the static configuration problem. We develop both optimal and heuristic-based algorithms to find the best configuration of content server replication relationships that minimize the prevention costs while maintaining the required level of content resiliency.

### 4.1 Real Optimal Algorithms

We formulate the static configuration problem as a constrained minimization problem and develop algorithms that generate real optimal solutions. These algorithms use mathematical programming techniques to find the exact optimal configuration that meets the specified resiliency requirements at the minimum cost.

### 4.2 Heuristic-Based Algorithms

Heuristic-based algorithms are developed to find near-optimal solutions efficiently. These algorithms are particularly useful for large-scale problems where finding the exact optimal solution is computationally infeasible. We evaluate the performance of these heuristics through extensive simulations and compare them with the real optimal solutions to assess their effectiveness.

## 5. Dynamic Configuration Problem

In this section, we discuss the dynamic configuration problem in content resiliency service networks. Unlike the static configuration problem, which assumes a fixed system state, the dynamic configuration problem considers the system's evolution over time. We relax the assumption that the system has enough time to respond to all failures within a single time slot and instead consider the cost minimization over a sequence of time slots under dynamic system conditions.

### 5.1 Problem Formulation

We formulate the dynamic configuration problem as a sequential decision-making problem. At each time slot, the system must decide the optimal configuration of content server replication relationships based on the current state of the system and the predicted future states. This problem is more complex than the static configuration problem and requires the use of advanced optimization techniques, such as dynamic programming and reinforcement learning.

### 5.2 Solution Approaches

We develop solution approaches for the dynamic configuration problem, including dynamic programming algorithms and reinforcement learning methods. These approaches enable the system to adapt to changing conditions and make optimal decisions over time, ensuring the continued cost-effectiveness and resiliency of the content resiliency service network.

## 6. Conclusion

In this paper, we have addressed the problem of cost-effective configuration in content resiliency service networks under both independent and geographically correlated failures. We proposed a new approach to modeling correlated failures, which allows for both quantified availability guarantees and aggressive prevention cost optimization. We formulated the cost-effective configuration problem and developed both optimal and heuristic-based algorithms to solve it. Our experiments demonstrated that, with the aid of good models for correlated failures, the operational costs of the services can be significantly reduced without compromising the user-specified content resiliency. Future work will focus on extending our approach to other types of correlated failures and developing more efficient algorithms for the dynamic configuration problem.

---

**References:**

[1] Reference 1
[2] Reference 2
[3] Reference 3
[4] Reference 4
[5] Reference 5
[6] Reference 6
[7] Reference 7
[8] Reference 8
[9] Reference 9
[10] Reference 10
[11] Reference 11
[12] Reference 12
[13] Reference 13
[14] Reference 14
[15] Reference 15