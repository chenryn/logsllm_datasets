### Firefox 调试符号二进制文件

图7展示了使用Mozilla提供的`fetch-symbols.py`脚本获取Firefox调试符号的输出。此外，还展示了如何利用`lipodebugwalk.py`使自定义编译版本的gdb加载Firefox。

上述过程使我们能够借助`unmask_jemalloc`工具探索jemalloc如何管理Firefox的堆，并辅助漏洞利用开发。

### unmask_jemalloc 功能概述

图8描绘了`unmask_jemalloc`的帮助消息，并展示了该工具中实现的功能。通过使用`unmask_jemalloc`，我们可以研究如何从JavaScript操作Firefox的jemalloc托管堆。

以下示例脚本演示了如何使用未转义的字符串和数组进行受控分配和解除分配。由于Firefox实现了对传统堆喷的缓解措施，因此脚本在已分配的块中使用随机填充[CORL]。

```javascript
function jemalloc_spray(blocks, size) {
    var block_size = size / 2;
    // ROP/bootstrap/whatever
    var marker = unescape("%ubeef%udead");
    marker += marker;
    // Shellcode/payload
    var content = unescape("%u6666%u6666");
    while (content.length < 0x1337) {
        content += content;
    }
}
```

### 结论

在本白皮书中，我们从开发者的角度分析了jemalloc内存分配器，并开发了可用于攻击任何使用jemalloc的应用程序的原语。我们特别将这些原语应用于最广泛使用的jemalloc应用程序之一——Mozilla Firefox浏览器。

我们的`unmask_jemalloc`调试实用程序可以在漏洞利用开发期间用于探索jemalloc的内部结构，并帮助研究人员继续我们的工作。

### 参考文献

- [[PHRC] argp, huku, Pseudomonarchia jemallocum](http://phrack.org/issues.html?issue=68&id=10)
- [[PHRK] huku, argp, The Art of Exploitation: 关于jemalloc堆溢出的案例研究](http://phrack.org/issues.html?issue=68&id=13)
- [[HOEJ] Mark Daniel, Jake Honoroff, Charlie Miller, 使用JavaScript进行工程堆溢出漏洞利用](http://securityevaluators.com/files/papers/isewoot08.pdf)
- [[FENG] Alexander Sotirov, JavaScript中的堆风水](http://www.phreedom.org/research/heap-feng-shui/heap-feng-shui.html)
- [[CORL] corelanc0d3r, 堆喷揭秘](https://www.corelan.be/index.php/2011/12/31/exploit-writing-tutorial-part-11-heap-spraying-demystified/)