修改之后，程序通过预编译，但是产生了SQL语句拼接问题，极有可能引发SQL注入漏洞。 
解决方案：
可使用Mybatis自带choose指令解决SQL语句动态拼接的问题
ORDER BY 
id desc 
date desc 
time desc 
LDAP注入
与SQL一样，传递给LDAP数据库的查询请求中所有输入都必须安全校验。 
由于LDAP没有类似SQL的预编译函数。因此，针对LDAP注入的主要防御措施是按照长度、格式、逻
辑、特殊字符4个维度对每一个输入参数进行安全校验。
脆弱代码：
String username = request.getParameter("username"); 
// 未对 username 展开校验直接拼接 
NamingEnumeration answers = context.search("dc=People,dc=example,dc=com","(uid=" + username + ")", ctrls); 
解决方案：
应依照LDAP数据库字段设计，严格校验username的长度、格式、逻辑和特殊字符。
第十四条 禁止在源代码中写入口令、服务器
IP等敏感信息
应将加密后的口令、服务器IP、加密密钥等敏感信息存储
在配置文件、数据库或者其它外部数据源中，禁止将此类
敏感信息存储在代码中。
编码类要求：
硬编码密码
脆弱代码：
密码不应保留在源代码中。源代码只能在企业环境中受限的共享，禁止在互联网中共享。
为了安全管理，密码和密钥应存储在单独的加密配置文件或密钥库中。
private String SECRET_PASSWORD = "letMeIn!"; 
Properties props = new Properties(); 
props.put(Context.SECURITY_CREDENTIALS, "password"); 
硬编码密钥
脆弱代码：
密钥不应保留在源代码中。源代码只能在企业环境中受限的共享，禁止在互联网中共享。为了安全管
理，密码和密钥应存储在单独的加密配置文件或密钥库中。
byte[] key = {1, 2, 3, 4, 5, 6, 7, 8}; 
SecretKeySpec spec = new SecretKeySpec(key, "AES"); 
Cipher aes = Cipher.getInstance("AES"); 
aes.init(Cipher.ENCRYPT_MODE, spec); 
return aesCipher.doFinal(secretData); 
第十五条 为所有敏感信息采用加密传输
为所有要求身份验证的访问内容和所有其他的敏感信息提
供加密传输。
编码类要求：
接受任何证书的TrustManager
空的TrustManager通常用于实现直接连接到未经根证书颁发机构签名的主机。
同时，如果客户端将信任所有的证书会导致应用系统很容易受到中间人攻击。
脆弱代码：
解决方案：
KeyStore ks = //加载包含受信任证书的密钥库 
SSLContext sc = SSLContext.getInstance("TLS"); 
TrustManagerFactory tmf = TrustManagerFactory.getInstance("SunX509"); 
tmf.init(ks); 
sc.init(kmf.getKeyManagers(), tmf.getTrustManagers(),null); 
接受任何签名证书的HostnameVerifier
class TrustAllManager implements X509TrustManager { 
@Override 
public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException 
//Trust any client connecting (no certificate validation) 
} 
@Override 
public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException 
//Trust any remote server (no certificate validation) 
} 
@Override 
public X509Certificate[] getAcceptedIssuers() { 
return null; 
} 
} 
HostnameVerifier 由于许多主机上都重复使用了证书，因此经常使用接受任何主机的请求。这很容
易受到中间人攻击，因为客户端将信任任何证书。
应该构建允许特定证书（例如基于信任库）的TrustManager，并创建通配符证书，保证可以在多个
子域上重用。
脆弱代码：
public class AllHosts implements HostnameVerifier { 
public boolean verify(final String hostname, final SSLSession session) { 
return true; 
} 
} 
解决方案：
KeyStore ks = //加载包含受信任证书的密钥库 
SSLContext sc = SSLContext.getInstance("TLS"); 
TrustManagerFactory tmf = TrustManagerFactory.getInstance("SunX509"); 
tmf.init(ks); 
sc.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null); 
第十六条 使用可信的密码算法
如果应用程序需要加密、数字签名、密钥交换或者安全散
列，应使用国密算法。
架构设计类要求：
禁止使用弱加密
电力系统可以使用rsa2048和aes256的组合作为等保二级系统对重要数据传输的加密算法。
电力系统必须使用国密系列算法的组合作为等保三级系统对重要数据传输的加密算法。
重要的敏感数据在传输过程中必须加密传输，如该类数据需要保存在数据库中，必须二次加密后才
能保存。
电力系统前端js代码必须使用混淆和加密手段，保证js源代码无法被轻易逆向分析。
可信的算法必须结合可靠的加密流程形成加密方案，例如用户登录时必须使用合规的加密方案加密
用户名和密码：
编码类要求：
可预测的伪随机数生成器
当在某些安全关键的上下文中使用可预测的随机值时，可能会导致漏洞。
例如，当该值用作：
CSRF令牌：可预测的令牌可能导致CSRF攻击，因为攻击者将知道令牌的值
密码重置令牌（通过电子邮件发送）：可预测的密码令牌可能会导致帐户被接管，因为攻击者会猜
测“更改密码”表单的URL
任何其他敏感值
脆弱代码：
String generateSecretToken() { 
Random r = new Random(); 
return Long.toHexString(r.nextLong()); 
} 
解决方案：
替换 java.util.Random 使用强度更高的 java.security.SecureRandom
合规的双向加密数据的传输方案： 
   1）后端生成非对称算法（国密SM2、RSA2048）的公钥B1、私钥B2，前端访问后端获取公钥B1。公钥、私钥可以全系统固定为一对，前端
   2）前端每次发送请求前，随机生成对称算法（国密SM4、AES256）的密钥A1。 
   3）前端用步骤2的密钥A1加密所有业务数据生成encrypt_data，用步骤1获取的公钥B1加密密钥A1生成encrypt_key。 
   4）前端用哈希算法对encrypt_data + encrypt_key的值形成一个校验值check_hash。 
   5）前端将encrypt_data、encrypt_key、check_hash三个参数包装在同一个http数据包中发送到后端。 
   6）后端获取三个参数后先判断哈希值check_hash是否匹配encrypt_data + encrypt_key以验证完整性。 
   7）后端用私钥B2解密encrypt_key获取本次请求的对称算法的密钥A1。 
   8）后端使用步骤7获取的密钥A1解密encrypt_data获取实际业务数据。 
   9）后端处理完业务逻辑后，将需要返回的信息使用密钥A1进行加密后回传给前端。 
  10）加密数据回传给前端后，前端使用A1对加密的数据进行解密获得返回的信息。 
  11）步骤2随机生成的密钥A1已经使用完毕，前端应将其销毁。 
import org.apache.commons.codec.binary.Hex; 
String generateSecretToken() { 
SecureRandom secRandom = new SecureRandom(); 
byte[] result = new byte[32]; 
secRandom.nextBytes(result); 
return Hex.encodeHexString(result); 
} 
错误的十六进制串联
将包含哈希签名的字节数组转换为人类可读的字符串时，如果逐字节读取该数组，则可能会发生转换错
误。
所有对于数据格式化的操作应优先使用规范的数据格式化处理机制。
脆弱代码：
MessageDigest md = MessageDigest.getInstance("SHA-256"); 
byte[] resultBytes = md.digest(password.getBytes("UTF-8")); 
StringBuilder stringBuilder = new StringBuilder(); 
for(byte b :resultBytes) { 
stringBuilder.append( Integer.toHexString( b & 0xFF ) ); 
} 
return stringBuilder.toString(); 
对于上述功能，哈希值 “0x0679” 和 “0x6709” 都将输出为 “679”
解决方案：
stringBuilder.append(String.format("%02X", b)); 
第十七条 禁止在日志、话单、cookie等文件
中记录口令、银行账号、通信内容等敏感数据
应用程序应该避免将用户的输入直接记入日志、话单、
cookie等文件，同时对需要记入的数据进行校验和访问控
制。
编码类要求：
不受信任的会话Cookie值
HttpServletRequest.getRequestedSessionId() 该方法通常返回cookie的值 JSESSIONID。此值通常仅
由会话管理逻辑访问，而不能由常规开发人员代码访问。
传递给客户端的值通常是字母数字值（例如 JSESSIONID=jp6q31lq2myn）。但是，客户端可以更改该
值。以下HTTP请求说明了可能的修改。
GET /somePage HTTP/1.1 
Host: yourwebsite.com 
User-Agent: Mozilla/5.0 
Cookie: JSESSIONID=Any value of the user's choice!!??'''"> 
JSESSIONID应仅用于查看其值是否与请求的URL权限（包括菜单URL和接口URL）是否匹配。如果存
在越权，则应将用户视为未经身份验证的用户。
此外，会话ID值永远不应记录到日志中，如果记录到日志中，则日志文件会包含有效的活动会话ID，从
而使内部人员可以劫持处于活动状态的ID和ID对应的权限。
日志伪造
日志注入攻击是将未经验证的用户输入写到日志文件中，可以允许攻击者伪造日志条目或将恶意内容注
入到日志中。
如果用户提交val的字符串"twenty-one"，则会记录以下条目：
INFO: Failed to parse val=twenty-one 
然而，如果攻击者提交包含换行符%0d和%0a的字符串”twenty-
one%0d%0aHACK:+User+logged+in%3dbadguy”，会记录以下条目：
INFO: Failed to parse val=twenty-one 
HACK: User logged in=badguy 
显然，攻击者可以使用相同的机制插入任意日志条目。所以所有写入日志的条目必须去除\r和\n字符。
脆弱代码：
public void risk(HttpServletRequest request, HttpServletResponse response) { 
String val = request.getParameter("val"); 
try { 
int value = Integer.parseInt(val); 
out = response.getOutputStream(); 
} 
catch (NumberFormatException e) { 
e.printStackTrace(out); 
log.info(""Failed to parse val = "" + val); 
} 
} 
解决方案：
public void risk(HttpServletRequest request, HttpServletResponse response) { 
String val = request.getParameter("val"); 
try { 
int value = Integer.parseInt(val); 
} 
catch (NumberFormatException e) { 
val = val.replace("\r", ""); 
val = val.replace("\n", ""); 
log.info(""Failed to parse val = "" + val); 
//不要直接 printStackTrace 输出错误日志 
} 
} 
HTTP响应截断
攻击者任意构造HTTP响应数据并传递给应用程序可以构造：缓存中毒（Cache Poisoning），跨站点脚
本（XSS） 和页面劫持（Page Hijacking）等攻击。
脆弱代码：
下面的代码段从HTTP请求中读取网络日志条目的作者姓名，并将其设置为HTTP响应的cookie头。
String author = request.getParameter(AUTHOR_PARAM); 
... 
Cookie cookie = new Cookie("author", author); 
cookie.setMaxAge(cookieExpiration); 
response.addCookie(cookie); 
假设一个由标准的字母数字字符组成的字符串如"Jane Smith"，在请求中提交包括cookie在内的HTTP响
应可能采用以下形式：
HTTP/1.1 200 OK 
Set-Cookie: author=Jane Smith 
但是，由于cookie的值由未验证的用户输入构成的，如果攻击者提交恶意字符串，例如“Wiley Hacker
\r\n Content-Length：999 \r\n \r\n”，那么HTTP响应将被分割成伪造的响应，导致原始响应被忽略掉：
HTTP/1.1 200 OK 
Set-Cookie: author=Wiley Hacker 
Content-Length: 999 
malicious content... (to 999th character in this example) 
Original content starting with character 1000, which is now ignored by the web browser... 
脆弱代码：
public void risk(HttpServletRequest request, HttpServletResponse response) { 
String key = request.getParameter("key"); 
String value = request.getParameter("value"); 
response.setHeader(key, value); 
} 
解决方案1：
public void fix(HttpServletRequest request, HttpServletResponse response) { 
String key = request.getParameter("key"); 
String value = request.getParameter("value"); 
key = key.replace("\r", ""); 
key = key.replace("\n", ""); 
value = value.replace("\r", ""); 
value = value.replace("\n", ""); 
response.setHeader(key, value); 
} 
解决方案2：
public void fix(HttpServletRequest request, HttpServletResponse response) { 
String key = request.getParameter("key"); 
String value = request.getParameter("value"); 
if (Pattern.matches("[0-9A-Za-z]+", key) && Pattern.matches("[0-9A-Za-z]+", value)) { 
response.setHeader(key, value); 
} 
} 
修复建议