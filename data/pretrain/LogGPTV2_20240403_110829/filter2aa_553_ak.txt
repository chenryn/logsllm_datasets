通常，C语言都假定整型常量是十进制数。然而，许多程序员很喜欢使
用八进制和十六进制数。因为8和16都是2的幂，而10却不是。显然，八进制
和十六进制记数系统在表达与计算机相关的值时很方便。例如，十进制数
65536经常出现在16位机中，用十六进制表示正好是10000。另外，十六进制
数的每一位的数恰好由4位二进制数表示。例如，十六进制数3是0011，十六
进制数5是0101。因此，十六进制数35的位组合（bit pattern）是00110101，
十六进制数53的位组合是01010011。这种对应关系使得十六进制和二进制的
转换非常方便。但是，计算机如何知道10000是十进制、十六进制还是二进
制？在C语言中，用特定的前缀表示使用哪种进制。0x或0X前缀表示十六进
制值，所以十进制数16表示成十六进制是0x10或0X10。与此类似，0前缀表
示八进制。例如，十进制数16表示成八进制是020。第15章将更全面地介绍
进制相关的内容。
要清楚，使用不同的进制数是为了方便，不会影响数被储存的方式。也
就是说，无论把数字写成16、020或0x10，储存该数的方式都相同，因为计
算机内部都以二进制进行编码。
6.显示八进制和十六进制
在C程序中，既可以使用和显示不同进制的数。不同的进制要使用不同
的转换说明。以十进制显示数字，使用%d；以八进制显示数字，使用%o；
以十六进制显示数字，使用%x。另外，要显示各进制数的前缀0、0x和0X，
必须分别使用%#o、%#x、%#X。程序清单3.3演示了一个小程序。回忆一
下，在某些集成开发环境（IDE）下编写的代码中插入getchar();语句，程序
123
在执行完毕后不会立即关闭执行窗口。
程序清单3.3 bases.c程序
/* bases.c--以十进制、八进制、十六进制打印十进制数100 */
#include 
int main(void)
{
int x = 100;
printf("dec = %d; octal = %o; hex = %x\n", x, x, x);
printf("dec = %d; octal = %#o; hex = %#x\n", x, x, x);
return 0;
}
编译并运行该程序，输出如下：
dec = 100; octal = 144; hex = 64
dec = 100; octal = 0144; hex = 0x64
该程序以3种不同记数系统显示同一个值。printf()函数做了相应的转
换。注意，如果要在八进制和十六进制值前显示0和0x前缀，要分别在转换
说明中加入#。
3.4.2 其他整数类型
初学C语言时，int类型应该能满足大多数程序的整数类型需求。尽管如
此，还应了解一下整型的其他形式。当然，也可以略过本节跳至3.4.3节阅读
124
char类型的相关内容，以后有需要时再阅读本节。
C语言提供3个附属关键字修饰基本整数类型：short、long和unsigned。
应记住以下几点。
short 
int类型（或者简写为short）占用的存储空间可能比int类型少，常
用于较小数值的场合以节省空间。与int类似，short是有符号类型。
long int或long占用的存储空间可能比int多，适用于较大数值的场合。与
int类似，long是有符号类型。
long long int或long long（C99标准加入）占用的储存空间可能比long多，
适用于更大数值的场合。该类型至少占64位。与int类似，long long是有符号
类型。
unsigned 
int或unsigned只用于非负值的场合。这种类型与有符号类型表
示的范围不同。例如，16位unsigned 
int允许的取值范围是0～65535，而不
是-32768～32767。用于表示正负号的位现在用于表示另一个二进制位，所
以无符号整型可以表示更大的数。
在C90标准中，添加了unsigned long int或unsigned long和unsigned int或
unsigned short类型。C99标准又添加了unsigned long long int或unsigned long
long。
在任何有符号类型前面添加关键字signed，可强调使用有符号类型的意
图。例如，short、short int、signed short、signed short int都表示同一种类型。
1.声明其他整数类型
其他整数类型的声明方式与int类型相同，下面列出了一些例子。不是所
有的C编译器都能识别最后3条声明，最后一个例子所有的类型是C99标准新
增的。
long int estine;
125
long johns;
short int erns;
short ribs;
unsigned int s_count;
unsigned players;
unsigned long headcount;
unsigned short yesvotes;
long long ago;
2.使用多种整数类型的原因
为什么说short类型“可能”比int类型占用的空间少，long类型“可能”比int
类型占用的空间多？因为C语言只规定了short占用的存储空间不能多于int，
long占用的存储空间不能少于int。这样规定是为了适应不同的机器。例如，
过去的一台运行Windows 
3的机器上，int类型和short类型都占16位，long类
型占32位。后来，Windows和苹果系统都使用16位储存short类型，32位储存
int类型和long类型（使用32位可以表示的整数数值超过20亿）。现在，计算
机普遍使用64位处理器，为了储存64位的整数，才引入了long long类型。
现在，个人计算机上最常见的设置是，long long占64位，long占32位，
short占16位，int占16位或32位（依计算机的自然字长而定）。原则上，这4
种类型代表4种不同的大小，但是在实际使用中，有些类型之间通常有重
叠。
C 标准对基本数据类型只规定了允许的最小大小。对于 16 位机，short
和 int 的最小取值范围是[−32767,32767]；对于32位机，long的最小取值范围
是[−2147483647,2147483647]。对于unsigned short和unsigned int，最小取值范
围是[0,65535]；对于unsigned 
long，最小取值范围是[0,4294967295]。long
126
long类型是为了支持64位的需求，最小取值范围是
[−9223372036854775807,9223372036854775807]；unsigned long long的最小取
值范围是[0,18446744073709551615]。如果要开支票，这个数是一千八百亿
亿（兆）六千七百四十四万亿零七百三十七亿零九百五十五万一千六百一十
五。但是，谁会去数？
int类型那么多，应该如何选择？首先，考虑unsigned类型。这种类型的
数常用于计数，因为计数不用负数。而且，unsigned类型可以表示更大的正
数。
如果一个数超出了int类型的取值范围，且在long类型的取值范围内时，
使用long类型。然而，对于那些long占用的空间比int大的系统，使用long类
型会减慢运算速度。因此，如非必要，请不要使用long类型。另外要注意一
点：如果在long类型和int类型占用空间相同的机器上编写代码，当确实需要
32位的整数时，应使用long类型而不是int类型，以便把程序移植到16位机后
仍然可以正常工作。类似地，如果确实需要64位的整数，应使用long long类
型。
如果在int设置为32位的系统中要使用16位的值，应使用short类型以节省
存储空间。通常，只有当程序使用相对于系统可用内存较大的整型数组时，
才需要重点考虑节省空间的问题。使用short类型的另一个原因是，计算机中
某些组件使用的硬件寄存器是16位。
3.long常量和long long常量
通常，程序代码中使用的数字（如，2345）都被储存为int类型。如果使
用1000000这样的大数字，超出了int类型能表示的范围，编译器会将其视为
long int类型（假设这种类型可以表示该数字）。如果数字超出long可表示的
最大值，编译器则将其视为unsigned long类型。如果还不够大，编译器则将
其视为long long或unsigned long long类型（前提是编译器能识别这些类型）。
八进制和十六进制常量被视为int类型。如果值太大，编译器会尝试使用
unsigned int。如果还不够大，编译器会依次使用long、unsigned long、long
127
long和unsigned long long类型。
有些情况下，需要编译器以long类型储存一个小数字。例如，编程时要
显式使用IBM PC上的内存地址时。另外，一些C标准函数也要求使用long类
型的值。要把一个较小的常量作为long类型对待，可以在值的末尾加上l（小
写的L）或L后缀。使用L后缀更好，因为l看上去和数字1很像。因此，在int
为16位、long为32位的系统中，会把7作为16位储存，把7L作为32位储存。l
或L后缀也可用于八进制和十六进制整数，如020L和0x10L。
类似地，在支持long long类型的系统中，也可以使用ll或LL后缀来表示
long long类型的值，如3LL。另外，u或U后缀表示unsigned long long，如
5ull、10LLU、6LLU或9Ull。
整数溢出
如果整数超出了相应类型的取值范围会怎样？下面分别将有符号类型和
无符号类型的整数设置为比最大值略大，看看会发生什么（printf()函数使
用%u说明显示unsigned int类型的值）。
/* toobig.c-- 超出系统允许的最大int值*/
#include 
int main(void)
{
int i = 2147483647;
unsigned int j = 4294967295;
printf("%d %d %d\n", i, i+1, i+2);
printf("%u %u %u\n", j, j+1, j+2);
128
return 0;
}
在我们的系统下输出的结果是：
2147483647   -2147483648  -2147483647
4294967295   0   1
可以把无符号整数j看作是汽车的里程表。当达到它能表示的最大值
时，会重新从起始点开始。整数 i 也是类似的情况。它们主要的区别是，在
超过最大值时，unsigned int 类型的变量 j 从 0开始；而int类型的变量i则从
−2147483648开始。注意，当i超出（溢出）其相应类型所能表示的最大值
时，系统并未通知用户。因此，在编程时必须自己注意这类问题。
溢出行为是未定义的行为，C 标准并未定义有符号类型的溢出规则。以
上描述的溢出行为比较有代表性，但是也可能会出现其他情况。
4.打印short、long、long long和unsigned类型
打印unsigned 
int类型的值，使用%u转换说明；打印long类型的值，使
用%ld转换说明。如果系统中int和long的大小相同，使用%d就行。但是，这
样的程序被移植到其他系统（int和long类型的大小不同）中会无法正常工
作。在x和o前面可以使用l前缀，%lx表示以十六进制格式打印long类型整
数，%lo表示以八进制格式打印long类型整数。注意，虽然C允许使用大写或
小写的常量后缀，但是在转换说明中只能用小写。
C语言有多种printf()格式。对于short类型，可以使用h前缀。%hd表示以
十进制显示short类型的整数，%ho表示以八进制显示short类型的整数。h和l
前缀都可以和u一起使用，用于表示无符号类型。例如，%lu表示打印
unsigned long类型的值。程序清单3.4演示了一些例子。对于支持long long类
型的系统，%lld和%llu分别表示有符号和无符号类型。第4章将详细介绍转
换说明。
129
程序清单3.4 print2.c程序
/* print2.c--更多printf()的特性 */
#include 
int main(void)
{
unsigned int un = 3000000000; /* int为32位和short为16位的系统 */
short end = 200;
long big = 65537;
long long verybig = 12345678908642;
printf("un = %u and not %d\n", un, un);
printf("end = %hd and %d\n", end, end);
printf("big = %ld and not %hd\n", big, big);
printf("verybig= %lld and not %ld\n", verybig, verybig);
return 0;
}
在特定的系统中输出如下（输出的结果可能不同）：
un = 3000000000 and not -1294967296
end = 200 and 200
big = 65537 and not 1
130
verybig= 12345678908642 and not 1942899938
该例表明，使用错误的转换说明会得到意想不到的结果。第 1 行输出，
对于无符号变量 un，使用%d会生成负值！其原因是，无符号值 3000000000
和有符号值−129496296 
在系统内存中的内部表示完全相同（详见第15
章）。因此，如果告诉printf()该数是无符号数，它打印一个值；如果告诉它
该数是有符号数，它将打印另一个值。在待打印的值大于有符号值的最大值
时，会发生这种情况。对于较小的正数（如96），有符号和无符号类型的存
储、显示都相同。
第2行输出，对于short类型的变量end，在printf()中无论指定以short类型
（%hd）还是int类型（%d）打印，打印出来的值都相同。这是因为在给函
数传递参数时，C编译器把short类型的值自动转换成int类型的值。你可能会
提出疑问：为什么要进行转换？h修饰符有什么用？第1个问题的答案是，
int类型被认为是计算机处理整数类型时最高效的类型。因此，在short和int类
型的大小不同的计算机中，用int类型的参数传递速度更快。第2个问题的答
案是，使用h修饰符可以显示较大整数被截断成 short 类型值的情况。第 3 行
输出就演示了这种情况。把 
65537 
以二进制格式写成一个 
32 
位数是
00000000000000010000000000000001。使用%hd，printf()只会查看后 
16
位，所以显示的值是 1。与此类似，输出的最后一行先显示了verybig的完整
值，然后由于使用了%ld，printf()只显示了储存在后32位的值。
本章前面介绍过，程序员必须确保转换说明的数量和待打印值的数量相
同。以上内容也提醒读者，程序员还必须根据待打印值的类型使用正确的转
换说明。
提示 匹配printf()说明符的类型
在使用 
printf()函数时，切记检查每个待打印值都有对应的转换说明，
还要检查转换说明的类型是否与待打印值的类型相匹配。
3.4.3 使用字符：char类型
131
char类型用于储存字符（如，字母或标点符号），但是从技术层面看，
char是整数类型。因为char类型实际上储存的是整数而不是字符。计算机使
用数字编码来处理字符，即用特定的整数表示特定的字符。美国最常用的编
码是ASCII编码，本书也使用此编码。例如，在ASCII码中，整数65代表大写
字母A。因此，储存字母A实际上储存的是整数65（许多IBM的大型主机使
用另一种编码——EBCDIC，其原理相同。另外，其他国家的计算机系统可
能使用完全不同的编码）。
标准ASCII码的范围是0～127，只需7位二进制数即可表示。通常，char
类型被定义为8位的存储单元，因此容纳标准ASCII码绰绰有余。许多其他系
统（如IMB 
PC和苹果Macs）还提供扩展ASCII码，也在8位的表示范围之
内。一般而言，C语言会保证char类型足够大，以储存系统（实现C语言的系
统）的基本字符集。
许多字符集都超过了127，甚至多于255。例如，日本汉字（kanji）字符
集。商用的统一码（Unicode）创建了一个能表示世界范围内多种字符集的
系统，目前包含的字符已超过110000个。国际标准化组织（ISO）和国际电
工技术委员会（IEC）为字符集开发了ISO/IEC 10646标准。统一码标准也与
ISO/IEC 10646标准兼容。
C语言把1字节定义为char类型占用的位（bit）数，因此无论是16位还是
32位系统，都可以使用char类型。
1.声明char类型变量
char类型变量的声明方式与其他类型变量的声明方式相同。下面是一些
例子：
char response;
char itable, latan;