that the platform will use a 64-bit virtual address space,
in order to support the speciﬁc layout of this allocator.
For the target program, GUARDER assumes the at-
tacker may obtain its source code, such that they may
know of possible vulnerabilities within. GUARDER fur-
ther assumes the attackers have no knowledge related to
the status of the heap, and cannot take control of the al-
locator. They cannot utilize a data leakage channel, such
as /proc/pid /maps, to discover the location of meta-
data (in fact, such a leakage channel can be easily dis-
abled). GUARDER also assumes the attackers cannot in-
terfere with the memory management of the allocator,
such as by hacking the random generator. Otherwise,
they are able to change the order of memory allocations
to increase their predictability.
3.2 Basic Idea of Guarder
GUARDER will defend against a wide range of heap vul-
nerabilities, such as heap overﬂows, use-after-frees, dou-
ble and invalid frees, as well as reduce heap spraying
attacks.
GUARDER implements almost all security features of
existing secure allocators, as listed in Table 2. The only
feature disabled by default is destroy-on-free. We argue
that this feature is not necessary, since the strong ran-
domization of GUARDER will decrease the predictability
of every allocation, which will signiﬁcantly decrease the
exploitability of dangling pointers and makes meaningful
information leakage much more difﬁcult [30]. Compared
to the state-of-the-art, GUARDER signiﬁcantly increases
randomization (entropy is increased by 7.8 bits, over 200
120    27th USENIX Security Symposium
USENIX Association
Security Features
BIBOP style
Fully-segregated metadata
Destroy-on-free
Guard pages
Security Beneﬁt
Defends against metadata-based attacks
Defends against metadata-based attacks
Exposes un-initialized reads or use-after-frees
Defends against buffer over-reads and over-writes
Defends against heap spraying
Increases attack complexity of overﬂows and UAFs
Randomized allocation
Over-provisional allocation Mitigates harmful effects of overﬂows
Check canaries on free
Randomization entropy∗
Early detection of overﬂows
Increases attack complexity
DieHarder
(cid:68)
(cid:68)
(cid:68)
(cid:9)
(cid:68)
(cid:68)
O(logN)
OpenBSD
(cid:68)
(cid:68)
(cid:5)
(cid:68)
(cid:68)
(cid:9)
2–10
FreeGuard
(cid:68)
(cid:68)
(cid:5)
(cid:68)
(cid:68)
(cid:68)
GUARDER
(cid:68)
(cid:68)
(cid:5)
(cid:68)
(cid:68)
(cid:68)
(cid:68)
2.01
E
Table 2: Detailed comparison of security features of existing secure allocators.
allocator has feature
weak implementation
optional feature, disabled by default
actual results of entropies can be seen in Figure 4
(cid:5):
∗:
(cid:68):
(cid:9):
times), adopts the over-provisional mechanism (ﬁrst pro-
posed by DieHarder), and discards its deterministic lay-
out. Additionally, GUARDER supports customizable se-
curity guarantees, without changing code or recompiling,
which allows users to specify their desired level of secu-
rity by setting the corresponding environment variables.
GUARDER, as a shared library, can be preloaded to
replace the default allocator, and intercepts all memory
management functions of applications automatically. It
does not target support for applications with their own
custom allocators, although these applications can be
changed to use standard memory functions in order to
beneﬁt from GUARDER.
GUARDER employs different mechanisms for manag-
ing small and large objects, the same as existing secure
allocators (described in Section 2.2). GUARDER bor-
rows the same mechanism as DieHarder and FreeGuard
for handling large objects, but deﬁnes large objects as
those larger than 512 kilobytes. The major contribution
of GUARDER lies in its management of small objects; in
fact, most objects belong to this class, and have a domi-
nant impact on application performance.
The basic idea of the allocator is shown in Figure 2.
In order to reduce the performance overhead caused by a
high number of mmap system calls, GUARDER requests a
large block of memory once from the underlying OS to
serve as the heap. Then, it divides the heap into multiple
per-thread sub-heaps, where each sub-heap will be fur-
ther divided into a set of bags. GUARDER also organizes
objects into power-of-two size classes, starting from 16
bytes and ending with 512KB, and places metadata in
a separate location. Each bag will have the same size
(e.g., 4GB). Due to the vast address space of 64-bit ma-
chines [26, 2], the address space should accommodate all
types of applications.
Per-thread design: GUARDER employs a per-thread
heap design such that each thread has its own heap seg-
ment, and always returns freed objects to the heap be-
longing to the current thread. There is no need for
GUARDER to acquire locks upon allocations and deal-
locations, which avoids lock acquisition overhead and
prevents potential lock contention. FreeGuard, although
also using a per-thread heap design, returns freed objects
to the original owner thread, thus requiring a lock. This
explains why GUARDER has overhead similar to Free-
Guard, even with a much stronger security guarantee.
However, this design could introduce memory blowup,
where memory consumption is unnecessarily increased
because freed memory cannot be used to satisfy future
memory requests [5]. GUARDER further designs mech-
anisms to alleviate this problem, as described in Sec-
tion 4.6.3.
Obfuscating bag order: GUARDER randomizes the
order of bags within each per-thread sub-heap. In con-
trast, FreeGuard places bags in ascending order by their
size class, which is very easy to predict. To shufﬂe
the ordering of size classes, GUARDER employs a hash
map to manage the relationship between each bag and its
metadata. Further, metadata are randomly allocated us-
ing mmap system calls, rather than using a pre-allocated
block, as in FreeGuard.
More importantly, GUARDER introduces separate allo-
cation and deallocation buffers for each size class of each
thread, which is a key difference between GUARDER and
other secure allocators. This design allows GUARDER
to support multiple customizable security features, in-
cluding the over-provisioning mechanism that neither
OpenBSD nor FreeGuard support. This design is further
described as follows.
Allocation buffer. Each bag is paired with an alloca-
tion buffer that holds the addresses of available objects in
the bag. This allocation buffer supports the user-deﬁned
entropy: if E is the desired entropy, then allocating an
object randomly from 2E objects will guarantee E bits
of entropy. The idea of the allocation buffer is inspired
by Stabilizer [11], but with a different design to reduce
unnecessary allocations and deallocations, and support
customizable securities.
GUARDER designs the allocation buffer as follows: its
capacity will be set to 2E+1 (not 2E), and ensures it will
never fall below half-full. This design guarantees one
USENIX Association
27th USENIX Security Symposium    121
Figure 2: The basic idea of the allocator.
out of at least 2E objects will be chosen randomly upon
each allocation request, and reduces the number of ﬁll-
ing operations by using double this size. The allocation
buffer will be ﬁlled by objects from a separate dealloca-
tion buffer, described below, or from new heap objects.
Circular deallocation buffer. GUARDER designs a sep-
arate deallocation buffer to track freed objects for a given
thread and size class. This design, separating the activ-
ities of allocations and deallocations into two different
buffers, beneﬁts performance, since freed objects can be
recorded sequentially in the deallocation buffer. Because
there is no need to search for an available slot, the deal-
location step will be completed in constant time.
The allocation buffer will be ﬁlled after each alloca-
tion if at least one free object exists in the corresponding
deallocation buffer. The empty slot created by the allo-
cation will be ﬁlled immediately, which helps reduce the
number of trials needed to ﬁnd an available object dur-
ing allocations. The allocation buffer will also be ﬁlled
when the number of available objects falls below 2E, in
order to ensure the randomization guarantee. In this case,
freed objects from the deallocation buffer will be utilized
ﬁrst, followed by those from a global object buffer. If
this is still insufﬁcient, new objects from the associated
per-thread heap will be imported. This design helps min-
imize the number of searches upon each allocation, since
the allocation buffer will never be less than half-full. In
contrast, OpenBSD and DieHarder may require a large
number of searches to identify an available object, rang-
ing between one and several dozen. Table 3 describes the
evaluation results for these allocators.
3.2.1 Defending Against Different Attacks
GUARDER defends against heap vulnerabilities by em-
ploying the combination of multiple mechanisms.
Defending exploits of buffer overﬂows. GUARDER can
defend against the exploitation of buffer overﬂows in
several ways. First, its strong randomization makes at-
tacks much more difﬁcult, since attackers must know the
target chunk addresses at which to issue attacks. When
objects are highly randomized, it is extremely difﬁcult to
know where an allocation will be satisﬁed, even if source
code is available. Second, over-provisioning may toler-
ate overﬂows landing on unused objects, thus nullifying
them. Third, guard pages can thwart overﬂow attempts.
Finally, if some attacks modify the canaries placed at the
end of each object, GUARDER can detect such attacks.
Defending exploits of use-after-frees.
Similarly,
GUARDER defends against such exploits in multiple
ways. First, GUARDER separates the metadata from
the actual heap, making it impossible to issue use-after-
free attacks on freelist pointers. Second, its strong ran-
domization makes meaningful attacks extremely difﬁ-
cult, with only a 0.11% success rate per try due to its 9.8
bits of entropy, as evaluated in Section 5.4. Since each
subsequent free is a Bernoulli trial following a geometric
distribution, it is expected to achieve the ﬁrst successful
attack after 891 tries. Finally, unsuccessful attacks may
crash programs incidentally, due to guard pages placed
inside, therefore the brute-force approach may not easily
succeed.
Defending exploits of double and invalid frees. As dis-
cussed above, GUARDER can detect against every double
and invalid free, due to its custom allocator. Therefore,
GUARDER can choose to stop the program immediately,
122    27th USENIX Security Symposium
USENIX Association
…… Class:256B Thread1 Class:16B …… Thread1:  Class:16B Threadm Heap …… Alloc Buffer 0	
  1	
  2	
  3	
  2E+1-­‐1	
  1	
  2	
  3	
  M	
  0	
  Dealloc Buffer 4	
  Filling Filling …… Threadm:  Class:64B …… Alloc Buffer 0	
  1	
  2	
  3	
  2E+1-­‐1	
  1	
  2	
  3	
  M	
  0	
  Dealloc Buffer 4	
  Filling …… …… …… Class:32B Class:64B Filling or skip these invalid operations. Therefore, GUARDER
can always defend against such vulnerabilities.
4
Implementation Details
This section describes how GUARDER supports different
security mechanisms based on its unique design of al-
location and deallocation buffers. Additionally, this sec-
tion also discusses certain optimizations to further reduce
performance overhead and memory blowup.
4.1 Customizable Randomization Entropy
GUARDER supports customizable randomization to meet
the various performance and security requirements of
different users. As described in Section 3.2, this mecha-
nism is achieved by altering the number of entries in each
allocation buffer. Currently, 9 bits of entropy are chosen
by default, and GUARDER guarantees that the number of
available objects will never be less than 512 (29), where
each buffer has 1024 entries.
Object selection is performed as follows: upon every
allocation, a random index into the allocation buffer is
generated. It will then acquire the object address stored
at this index, if the object is available. If the index refers
to an empty slot (i.e., contains a null value), the allocator
will initiate a forward search starting from the selected
index. The required number of searches is expected to be
around two on average, given the fact that the allocation
buffer is never less than half-full. However, this is actu-
ally not true due to certain worst cases. Therefore, we
divide the allocation buffer into eight separate regions,
and record the number of available objects within each.
Thus, we can easily skip an entire region if no objects are
present.
4.2 Customizable Over-Provisioning
Over-provisioning is a technique in which a certain num-
ber of heap objects are designated as never-to-be-used.
Therefore, an overﬂow that occurs in a place containing
no useful data can easily be tolerated [30].
GUARDER implements its over-provisioning by con-
trolling the ﬁlling step of allocation buffers. For instance,
the over-provisioning factor is set to 1/8 by default, re-
sulting in 1/8 of objects from each bag being skipped.
This also indicates that a given object will be pulled
into the corresponding allocation buffer with a likeli-
hood of 87.5%. However, the naive method of comput-
ing and comparing probabilities for each object is too ex-
pensive. Instead, GUARDER utilizes an associated over-
provisional buffer, with a capacity equal to half the allo-
cation buffer, in which new objects from a given bag are
ﬁrst placed. Then, the speciﬁed proportion (e.g., 1/8) of
these objects will be deleted from this buffer randomly,
and will never participate in future allocations or deallo-
cations. This method reduces the amount of computing
and comparing by 7/8 compared to the naive method.
In
contrast
to DieHarder, GUARDER’s
over-
provisional mechanism signiﬁcantly reduces memory
footprint and cache loadings, since “skipped” objects
will never be accessed in the future. In DieHarder, every
object always has a probability of being allocated at
some point during the execution. However, accessing
these objects may increase the number of physical pages
in memory, and involve unnecessary cache loading
operations.
4.3 Customizable Guard Pages
GUARDER places guard pages within each bag to
thwart overﬂow or heap spraying attacks.
In contrast,
DieHarder cannot place guard pages internally, since ev-
ery heap object has some probability of being utilized.
For this reason, DieHarder has a “weak implementation”
listed under “Guard Pages” in Table 2, as it cannot stop
heap spraying or buffer overﬂow attacks that only occur
within each bag. OpenBSD designs each bag to occupy
a single page, which practically places guard pages be-
tween bags.
Different from FreeGuard, GUARDER supports a ﬂex-
ible ratio of guard pages, obtained from an environment
variable. When pulling from new heap objects during
the ﬁlling procedure, GUARDER will randomly choose
which pages to protect, in proportion to this value. For
size classes less than one page, all objects within the page
will be protected. If a size class exceeds one page, then
multiple pages (equaling the size class) will be protected
in order to not change the mapping between objects and
their metadata.
4.4 Detecting Double and Invalid Frees
GUARDER can detect double and invalid frees by em-
ploying an additional status byte associated with each ob-
ject. This object status metadata for each bag are located
in a separate area. For each allocation, GUARDER marks
its status as in-use. Upon deallocation, GUARDER will
ﬁrst compute the index of its status byte, then conﬁrm
whether it is an invalid or double-free. If so, it will stop
the program immediately; otherwise, it will update the
status accordingly. GUARDER can detect all double and
invalid frees. Due to complexities brought by memalign,
GUARDER treats any address within a valid object as a
valid free, and consequently frees the object, which is
similar to DieHarder.
Note that GUARDER may miss a special kind of dou-
ble free, similar to existing work [23, 32], when a de-
USENIX Association
27th USENIX Security Symposium    123
allocated object has been subsequently reutilized for
other purposes. For example, if a program invokes mal-
loc(V1) → free(V1) → malloc(V2) → free(V1), then the
second free(V1) will be considered a valid free operation.
4.5 Checking Canaries on Free
GUARDER also utilizes canaries to help thwart buffer
overﬂow attacks. A single byte placed at the end of every
object is reserved for use as a canary. This byte is located
beyond the boundary of the size requested by the appli-