`ONBUILD`指令在`Dockerfile`中用于创建可重用的 Docker 映像，该映像将用作另一个 Docker 映像的基础。例如，我们可以创建一个 Docker 映像，其中包含运行应用所需的所有先决条件，如依赖关系和配置。然后，我们可以使用这个“先决条件”映像作为父映像来运行应用。
在创建先决映像时，我们可以使用`ONBUILD`指令，该指令将包括仅当该映像用作另一个`Dockerfile`中的父映像时才应执行的指令。`ONBUILD`指令不会在构建包含`ONBUILD`指令的`Dockerfile`时执行，只会在构建子映像时执行。
`ONBUILD`指令采用以下格式:
```
ONBUILD 
```
例如，假设我们在自定义基础映像的`Dockerfile`中有以下`ONBUILD`指令:
```
ONBUILD ENTRYPOINT ["echo","Running ONBUILD directive"]
```
如果我们从自定义基础映像创建 Docker 容器，则不会打印`"Running ONBUILD directive"`值。但是，如果我们使用自定义基础映像作为新的子 Docker 映像的基础，则会打印`"Running ONBUILD directive"`值。
我们可以使用父映像的`docker image inspect`命令来列出为该映像列出的 OnBuild 触发器:
```
$ docker image inspect 
```
该命令将返回类似如下的输出:
```
...
"OnBuild": [
    "CMD [\"echo\",\"Running ONBUILD directive\"]"
]
...
```
在下一个练习中，我们将使用`ONBUILD`指令定义一个 Docker 映像来部署 HTML 文件。
## 练习 2.08:在 Dockerfile 中使用 ONBUILD 指令
您的经理要求您创建一个 Docker 映像，该映像能够运行软件开发团队提供的任何 HTML 文件。在本练习中，您将使用 Apache 网络服务器构建一个父映像，并使用`ONBUILD`指令复制 HTML 文件。软件开发团队可以使用这个 Docker 映像作为父映像来部署和测试他们创建的任何 HTML 文件:
1.  创建一个名为`onbuild-parent` :
    ```
    mkdir onbuild-parent
    ```
    的新目录
2.  导航至新创建的`onbuild-parent`目录:
    ```
    cd onbuild-parent
    ```
3.  在`onbuild-parent`目录下，创建一个名为`Dockerfile` :
    ```
    touch Dockerfile
    ```
    的文件
4.  现在，使用您最喜欢的文本编辑器打开【T0:
    ```
    vim Dockerfile
    ```
5.  Add the following content to the `Dockerfile`, save it, and exit from the `Dockerfile`:
    ```
    # ONBUILD example
    FROM ubuntu
    RUN apt-get update && apt-get install apache2 -y 
    ONBUILD COPY *.html /var/www/html
    EXPOSE 80
    ENTRYPOINT ["apache2ctl", "-D", "FOREGROUND"]
    ```
    这个`Dockerfile`首先将 ubuntu 映像定义为父映像。然后执行`apt-get update`命令更新包列表，执行`apt-get install apache2 -y`命令安装 Apache 网络服务器。`ONBUILD`指令用于提供将所有 HTML 文件复制到`/var/www/html`目录的触发器。`EXPOSE`指令用于暴露容器的端口`80`，使用`apache2ctl`命令`ENTRYPOINT`启动 Apache web 服务器。
6.  Now, build the Docker image:
    ```
    $ docker image build -t onbuild-parent .
    ```
    输出应如下所示:
    ![Figure 2.17: Building the onbuild-parent Docker image ](img/B15021_02_17.jpg)
    图 2.17:构建基于构建的父 Docker 映像
7.  Execute the `docker container run` command to start a new container from the Docker image built in the previous step:
    ```
    $ docker container run -p 80:80 --name onbuild-parent-container -d onbuild-parent
    ```
    在前面的命令中，您已经在分离模式下启动了 Docker 容器，同时暴露了容器的端口`80`。
8.  Now, you should be able to view the Apache home page. Go to the `http://127.0.0.1` endpoint from your favorite web browser. Note that the default Apache home page is visible:
    ![Figure 2.18: Apache home page  ](img/B15021_02_16.jpg)
    图 2.18: Apache 主页
9.  现在，清理容器。使用`docker container stop`命令
    ```
    $ docker container stop onbuild-parent-container
    ```
    停止 Docker 容器
10.  使用`docker container rm`命令
    ```
    $ docker container rm onbuild-parent-container
    ```
    移除 Docker 容器
11.  现在，使用`onbuild-parent-container`作为父映像创建另一个 Docker 映像，以部署自定义 HTML 主页。首先，将目录改回上一个目录:
    ```
    cd ..
    ```
12.  为本练习创建一个名为`onbuild-child`的新目录:
    ```
    mkdir onbuild-child
    ```
13.  导航至新创建的`onbuild-child`目录:
    ```
    cd onbuild-child
    ```
14.  在`onbuild-child`目录下，创建一个名为`index.html`的文件。该文件将在构建期间通过`ONBUILD`命令复制到 Docker 映像中:
    ```
    touch index.html 
    ```
15.  现在，使用您最喜欢的文本编辑器打开`index.html`文件:
    ```
    vim index.html 
    ```
16.  Add the following content to the `index.html` file, save it, and exit from the `index.html` file:
    ```
        Learning Docker ONBUILD directive
    ```
    这是一个简单的 HTML 文件，将输出`Learning Docker ONBUILD`指令作为页面的标题。
17.  在`onbuild-child`目录下，创建一个名为`Dockerfile` :
    ```
    touch Dockerfile
    ```
    的文件
18.  现在，使用您最喜欢的文本编辑器打开【T0:
    ```
    vim Dockerfile
    ```
19.  Add the following content to the `Dockerfile`, save it, and exit from the `Dockerfile`:
    ```
    # ONBUILD example
    FROM onbuild-parent
    ```
    这个`Dockerfile`只有一个指令。这将使用`FROM`指令来使用您之前创建的`onbuild-parent` Docker 映像作为父映像。
20.  Now, build the Docker image:
    ```
    $ docker image build -t onbuild-child .
    ```
    ![Figure 2.19: Building the onbuild-child Docker image ](img/B15021_02_19.jpg)
    图 2.19:构建子代 Docker 映像
21.  Execute the `docker container run` command to start a new container from the Docker image that you built in the previous step:
    ```
    $ docker container run -p 80:80 --name onbuild-child-container -d onbuild-child
    ```
    在此命令中，您已经从`onbuild-child` Docker 映像启动了 Docker 容器，同时暴露了容器的端口`80`。
22.  You should be able to view the Apache home page. Go to the `http://127.0.0.1` endpoint from your favorite web browser:
    ![Figure 2.20: Customized home page of the Apache web server ](img/B15021_02_20.jpg)
    图 2.20:Apache 网络服务器的定制主页
23.  现在，清理容器。首先，使用`docker container stop`命令停止 Docker 容器:
    ```
    $ docker container stop onbuild-child-container
    ```
24.  最后，用`docker container rm`命令
    ```
    $ docker container rm onbuild-child-container
    ```
    移除 Docker 容器
在本练习中，我们观察了如何使用`ONBUILD`指令创建可重用的 Docker 映像，该映像能够运行提供给它的任何 HTML 文件。我们用 Apache 网络服务器创建了名为`onbuild-parent`的可重用 Docker 映像，并暴露了端口`80`。这个`Dockerfile`包含`ONBUILD`指令，在 Docker 映像的上下文中复制 HTML 文件。然后，我们创建了第二个名为`onbuild-child`的 Docker 映像，使用`onbuild-parent`作为基础映像，它提供了一个简单的 HTML 文件来部署到 Apache 网络服务器。
现在，让我们通过在下面的活动中使用 Apache web 服务器对给定的 PHP 应用进行分类来测试我们在本章中获得的知识。
## 活动 2.01:在 Docker 容器上运行一个 PHP 应用
假设您想要部署一个 PHP 欢迎页面，该页面将使用以下逻辑基于日期和时间迎接访问者。您的任务是使用安装在 Ubuntu 基础映像上的 Apache web 服务器来记录这里给出的 PHP 应用:
```
 11 && $hourOfDay  17){
    $message = "Good Evening";
}
echo $message;
?>
```
这是一个简单的 PHP 文件，它将基于以下逻辑向用户致意:
![Figure 2.21: Logic of PHP application ](img/B15021_02_21.jpg)
图 2.21:PHP 应用的逻辑
执行以下步骤完成本活动:
1.  创建一个文件夹来存储活动文件。
2.  用之前提供的代码创建一个`welcome.php`文件。
3.  创建一个`Dockerfile`并用 PHP 和 Apache2 在 Ubuntu 基础映像上设置应用。
4.  构建并运行 Docker 映像。
5.  Once completed, stop and remove the Docker container.
    注意
    此活动的解决方案可以通过[这个链接](16.html#_idTextAnchor321)找到。
# 总结
在本章中，我们讨论了如何使用`Dockerfile`来创建我们自己的自定义 Docker 映像。首先，我们讨论了什么是`Dockerfile`和`Dockerfile`的语法。然后我们讨论了一些常见的 Docker 指令，包括`FROM`、`LABEL`、`RUN`、`CMD`和`ENTRYPOINT`指令。然后，我们用所学的通用指令创建了我们的第一个`Dockerfile`。
在下一节中，我们将重点放在构建 Docker 映像上。我们深入讨论了关于 Docker 映像的多个领域，包括 Docker 映像的分层文件系统、Docker 构建中的上下文以及 Docker 构建过程中缓存的使用。然后，我们讨论了更高级的`Dockerfile`指令，包括`ENV`、`ARG`、`WORKDIR`、`COPY`、`ADD`、`USER`、`VOLUME`、`EXPOSE`、`HEALTHCHECK`和`ONBUILD`指令。
在下一章中，我们将讨论什么是 Docker 注册表，查看私有和公共 Docker 注册表，并了解如何将 Docker 映像发布到 Docker 注册表。