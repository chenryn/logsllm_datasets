Figure 5: Fringe Interface Categorization
Figure 5 categorizes the false positive interfaces that are
prone to be misinferred as members of the investigated sub-
net because they are located at the same distance from the
vantage point as the interfaces of the subnet to be explored.
None of the fringe interfaces are accommodated by the sub-
net being investigated and they must be caught and ex-
cluded from the observed subnet which is gradually being
built. Additionally, trapping a fringe interface is a signal
that the subnet exploration phase is growing the observed
subnet beyond its bona-ﬁde boundaries. As a result, trace-
net stops growing the subnet and to shrinks it to its last
known valid state.
Ingress fringe interfaces are the ones that are hosted by
the ingress router. Far fringe interfaces are hosted by routers
that are one hop distant from the ingress router but are not
accommodated by any subnet that the ingress router has
direct access. Similarly, close fringe interfaces are hosted
by routers that are one hop distant from the ingress router
but are accommodated by a subnet that the ingress router
has direct access. Heuristics H3, H7, and H8 below catch
the ingress,
respectively.
fringe, and close
interfaces,
fringe
far
For each rule below, we give a description, a formal state-
ment of a related observation on the Internet, and a code
snippet demonstrating how tracenet utilizes the observa-
tion. Each code snippet is a test applied to address lip;
keyword apply-next-heuristic implies l has passed the test
and continue to apply the rest of the tests; keyword stop-
and-shrink implies l has failed the test, hence, growing S
should be stopped and S must get shrunk to its last known
valid state; and keyword continue-with-next-address implies
continue to grow S by getting the next candidate IP address
to examine.
Although, the code snippets given for each heuristics lack
details and have repetitions, our tracenet implementation
is optimized to collect the subnets with the least number of
probes and some of the rules are merged together.
Remember that in the following rules jip is the pivot IP
address and lip is the candidate IP address that needs to be
tested.
H1 preﬁx reduction: In the context of subnet exploration,
whenever an IP address breaks the rules given below
and causes the stop-and-shrink instruction to be exe-
cuted, then subnet S is shrunk to last known intact
status. That is Sp gets reduced to Sp + 1 and all false
positive interfaces (i.e., interfaces conforming Sp but
not Sp + 1), if ever passed the heuristics, gets omitted
from subnet S. Obviously, as the subnet grows larger
and larger the possibility of encountering a false posi-
tive causing stop-and-shrink instruction to be executed
increases. This rule serves as a stopping condition of
subnet exploration algorithm and increases our trust
on the accuracy of large subnets.
H2 upper-bound subnet contiguity: This rule ensures
that the examined IP address lip is in use and is not
spect to the vantage point. More formally, j, l ∈ S ⇒
located farther from the investigated subnet with re-
(cid:6)lip, jh(cid:7) (cid:2)→ (cid:6). . . , ECHO RP LY (cid:7).
Code snippet:
if (cid:6)lip, jh(cid:7) (cid:2)→ (cid:6). . . , ECHO RP LY (cid:7) then
else if (cid:6)lip, jh(cid:7) (cid:2)→ (cid:6). . . , T T L EXCD(cid:7) then
apply-next-heuristic
stop-and-shrink /*l located farther from S*/
else
continue-with-next-address
end if
H3 single contra-pivot interface: This rule ensures that
the examined IP address lip is not one of the ingress
361fringe interfaces. More formally, under a stable path
to subnet S, ∃lcontra−pivot ∈ S where lh
contra−pivot =
jh − 1 and ∀(l (cid:8)= lcontra−pivot), lh = jh where l ∈ S.
Code snippet:
if (cid:6)lip, jh − 1(cid:7) (cid:2)→ (cid:6). . . , ECHO RP LY (cid:7) and lcontra−pivot =
N IL then
icontra−pivot ← l
apply-next-heuristic
else if (cid:6)lip, jh−1(cid:7) (cid:2)→ (cid:6). . . , ECHO RP LY (cid:7) and lcontra−pivot (cid:10)=
N IL then
stop-and-shrink /*Second contra-pivot detected*/
else
continue-with-next-address
end if
Note that, regarding Figure 3, R2 is the router hosting
the contra-pivot interface R2.w and any other interface
of R2 seems to potentially pass the test given above.
However, subnet exploration process demonstrated in
Algorithm 1 starts to grow the subnet from preﬁx /31
and R2.w will be examined before any other interface
hosted by R2.
H4 lower-bound subnet contiguity: This rule increases
our conﬁdence level on contra-pivot interface before
adding l to the subnet S if the examined IP address
lip found to be a contra-pivot interface by H3. More
formally, {l is found to be contra-pivot interface} ⇒
(cid:6)lip, jh − 2(cid:7) (cid:2)→ ¬(cid:6). . . , ECHO RP LY (cid:7).
Code snippet:
if lcontra−pivot = l and (cid:6)lip, jh−2(cid:7) (cid:2)→ (cid:6). . . , ECHO RP LY (cid:7)
then
else
stop-and-shrink
S ← S ∪ l
continue-with-next-address
end if
H5 mate-31 subnet contiguity: This rule is a shortcut
to add the examined IP address lip to subnet S if
it is /31 mate of the pivot. The same rule is valid
lip = mate30(jip) only if mate31(jip) is found not to
be in use. More formally, lip = mate31(jip) ⇒ l ∈ S.
Code snippet:
S ← S ∪ l
continue-with-next-address
if lip = mate31(jip) then
else
apply-next-heuristic
end if
H6 ﬁxed entry points: This rule is used to test whether
the examined IP address lip resides on a diﬀerent sub-
net located at the same distance with S or not. More
formally, {l is found not to be the contra-pivot inter-
face} ⇒ ((cid:6)lip, jh − 1(cid:7) (cid:2)→ (cid:6)i, T T L EXCD(cid:7) or (cid:6)lip, jh −
1(cid:7) (cid:2)→ (cid:6)u, T T L EXCD(cid:7).
Code snippet:
if (cid:6)lip, jh − 1(cid:7) (cid:2)→ (cid:6)i, T T L EXCD(cid:7) then
else if S is on-the-trace-path and (cid:6)lip, jh−1(cid:7) (cid:2)→ (cid:6)u, T T L EXCD(cid:7)
then
else if (cid:6)lip, jh − 1(cid:7) (cid:2)→ (cid:6)k, T T L EXCD(cid:7) where
k (cid:10)= i and k (cid:10)= u then
stop-and-shrink
else if (cid:6)lip, jh − 1(cid:7) (cid:2)→ (cid:6)i, ECHO RP LY (cid:7) then
apply-next-heuristic
apply-next-heuristic
stop-and-shrink
end if
Remember that u is obtained in trace collection mode
and i is obtained by subnet positioning algorithm. To
minimize eﬀects of path ﬂuctuations both i and u are
considered to be valid entry points to subnet S. Note
that the rule is valid in case i and/or u are anonymous.
H7 upper-bound router contiguity: This rule is used
to detect whether the examined IP address lip is one
of the far fringe interfaces or not. More formally, l ∈
S ⇒ (cid:6)mate31(lip), jh(cid:7) (cid:2)→ ¬(cid:6). . . , T T L EXCD(cid:7).
Code snippet:
if (cid:6)mate31(lip), jh(cid:7) (cid:2)→ (cid:6). . . , T T L EXCD(cid:7) then
stop-and-shrink /*Far Fringe interface detected*/
else
apply-next-heuristic
end if
A router hosting an interface that resides on S at dis-
tance jh also hosts some other interfaces that are not
on S. Those interfaces may pass all the rules given
above and they must be eliminated.
To illustrate, in Figure 3, R6.w or R4.s behaves as if
they are on the subnet. However, a probe directed
to their /31 mates with T T L = d result in a TTL-
Exceeded message with a very high probability. Con-
versely, /31 mate of an interface that is really on sub-
net S, for example /31 mate of R6.n must result in an
ICMP Echo-Reply or anonymous.
Note that if l is a far fringe interface, then the probe
packet destined to its /31 expires one hop earlier. In
case probing /31 mate of lip does not yield any re-
sponse or yields an ICMP Host-Unreachable the same
heuristic is performed with /30 mate.
H8 lower-bound router contiguity: This rule is used to
detect whether the examined IP address lip is one of
the close fridge interfaces or not. More formally, l ∈
S ⇒ (cid:6)mate31(lip), jh − 1(cid:7) (cid:2)→ ¬(cid:6). . . , ECHO RP LY (cid:7)
such that
mate31(lip) (cid:8)= lip
Code snippet:
if mate31(lip) (cid:10)= lip
contra−pivot.
then
contra−pivot
if (cid:6)mate31(lip), jh − 1(cid:7) (cid:2)→ (cid:6). . . , ECHO RP LY (cid:7) then
stop-and-shrink /*Close Fringe interface detected*/
else
apply-next-heuristic
end if
end if
To illustrate, in Figure 3, interface R7.n behaves as
if it is on the subnet being investigated. However, a
probe directed to its /31 mate with T T L = d results in
an ICMP Echo-Reply if the /31 mate is on the ingress
router of the subnet being investigated.
If probing
/31 mate of lip does not yield any response or yields
an ICMP Host-Unreachable, the same heuristic is per-
formed with /30 mate.
In case the subnet between
R2 and R7 accommodates more than two interfaces,
all false positive interfaces will be added to the inves-
tigated subnet until tracenet encounters an interface
whose /31 or /30 mate is located on the ingress router.
Remember that whenever tracenet traps a false posi-
tive interface, it shrinks S by removing all false positive
interfaces from S.
H9 boundary address reduction: A ﬁnal subnet that is
populated with interfaces passing all the tests above
cannot contain any of the boundary addresses, i.e., net-
work address and broadcast address, unless Sp = 31.
As a post processing task after collecting the subnet,
as long as the subnet contains a boundary address,
tracenet divides the subnet S into S1 and S2 where
Sp
1 = Sp
2 = Sp − 1 drops Si if j /∈ Si.
362Remember that these nine heuristics are not designed for
any speciﬁc type of network but are generic enough to work
over various subnet conﬁgurations appearing on the Inter-
net.
3.6 Probing Overhead
The exact number of probes for a tracenet session de-
pends on the length of the trace, utilization/conﬁguration
of the IP addresses of the subnet being explored as well as
its fringe subnets. In this section we give a model for lower
and upper bounds on the probing complexity as a function
of the size |S| for a subnet S.
For each subnet Si, initial cost is retrieving an IP ad-
dress at the trace collection mode and determining pivot
and ingress interfaces at the subnet positioning phase. The
former requires a single probe and the latter requires one or
three probes depending on the position of the subnet.
For each interface l on Si; intermediate cost is incurred
by heuristics and it depends on the type of l: no probing
if l is /31 (or /30) mate of
overhead for pivot interface;
the pivot interface, then only H2 and H5 are applied; if l
is contra pivot interface then, H2, H3, and H4 are applied;
and otherwise, H2 to H4 and H6 to H8 are applied. Among
those heuristics, H5 does not require probing, H7 and H8
may take one or two probes depending on the existence of
mate31(lip), and the rest takes a single probe each where
both H3 and H6 requires the same single probe.
For each subnet Si; ﬁnal cost is incurred by encountering
a stopping condition and H9. Heuristic H9 has no probing
overhead. On the other hand, stopping condition can be
encountered because of either Si being under-utilized (lines
19-21 of Algorithm 1) or trapping into a stop-and-shrink
statement. The former has no probing cost, the latter de-
pends on the number of heuristics applied until executing
the stop-and-shrink statement.
The lower bound on probing overhead is when the dis-
covered subnet S is a point-to-point link in which case only
heuristics H2 and H5 are applied. Assuming, as the most
typical case, the stopping condition is an immediate stop-
and-shrink statement execution and the subnet is on-the-
trace-path, the total cost is only four probes for discovering
the point-to-point subnet.
The upper bound of probing overhead is when the dis-
covered subnet S is oﬀ-the-trace-path and is a multi access
LAN accommodating |S| > 2 interfaces. Each subnet has
a single contra-pivot interface which requires three probes.
Let lip (cid:8)= mate31(ipivot), ∀(l ∈ S), hence, ∀(l ∈ S) requires
all heuristics H2-H8 where heuristics H7 and H8 require two
probes each. Also let the execution of the stopping condition
is delayed until the last heuristic, i.e., H8. Under this sce-
nario, exploring S has the initial cost of three probes, ﬁnal
cost of eight probes, and intermediate cost of three probes
for contra-pivot interface and seven probes for other inter-
faces except pivot interface. As a result the upper bound
probing cost would be 7|S| + 7. Note that upper bound
probing complexity is a worst case scenario with probabil-
ity p < 1/
of encountering and is only valid for
multi access LANs. This scenario takes place when an ad-
ministrator utilizes half of an IP address range where only
the odd or even numbered IP addresses are assigned to in-
terfaces.
2(cid:3)lg(2|S|−1)(cid:4)
(cid:3)
(cid:2)
|S|
3.7 Path Fluctuations
Path ﬂuctuations [5] such as load balancing and equal
cost multi-path routing on the Internet depend on local
network traﬃc and router conﬁguration that the packets
pass through at a certain time. Although a single load
balancing enabled router may potentially damage the au-
thenticity of all trace paths passing on it, the eﬀect is not
the same for tracenet because tracenet is based on the
stable ingress router concept rather than stable path trace con-
cept. That is, as long as two packets destined to two diﬀer-
ent IP addresses on the same subnet enter into the subnet
through the same ingress router we are not interested if they
took the same path or not.
Heuristics deﬁned above are meaningful at local sites iden-
tiﬁed by two neighboring routers and immune to path ﬂuc-
tuations taking place before and after the sites as long as the
hop distance is preserved. On the other hand, path ﬂuctu-
ations with varying hop distances while exploring a subnet
potentially causes the subnet being observed smaller than
its actual size.
In case a path ﬂuctuation occurs at a local site, only H6
among the rules given above gets aﬀected. H6 expects that
the packets destined to an interface on the subnet should
enter into the subnet through certain router(s). The result
of a path ﬂuctuation in the context of H6 would be stopping
to grow the subnet prematurely before it reaches its actual
size. In order to minimize this negative eﬀect we resort to
the following methods: (1) our implementation of tracenet
is completely based on ICMP probes which are shown to be
the least aﬀected by load balancing [15] and (2) tracenet
always attempts to obtain at most two ingress routers to the
subnet being investigated (one is in trace collection mode
and the other is in subnet positioning phase) and applies
the test H6 against both routers. As a result, any packet
entering to the subnet through either of the routers does
not cause early halt of subnet exploration phase.
Moreover, as long as the intermediate path ﬂuctuations,
if ever occur, converge to an ingress router determined by
tracenet, H6 does not get aﬀected from it and correctly
grows the subnet. To increase the conﬁdence level regarding
path ﬂuctuations on a collected subnet, the same subnet
could be re-collected at a diﬀerent time or from a diﬀerent
vantage point.
3.8 Limitations
Tracenet gradually enlarges a subnet around the IP ad-
dress lpivot after obtaining it via subnet positioning. Form-
ing a subnet from a single IP address in a bottom-up fashion
allows us to eﬃciently build large sized subnets compared to
the top-down approach which assumes a very large subnet
and shrinks it by testing if each IP address is within the
boundaries of the assumed subnet. Since tracenet stops
growing a subnet one level upwards in case it cannot ﬁll
at least half of the current level, sparsely utilized subnets
might potentially get underestimated. A similar behavior
would be observed when a consecutive portion of the IP ad-
dresses space of a subnet remain silent to tracenet probes.
In our implementation we re-probe an IP address if we do
not get a response for the ﬁrst probe. Moreover, if the path
length to the ingress router changes in the middle of subnet
exploration mode then the resulting subnet would also be an
underestimated subnet. Nevertheless, we believe that path
363length changes in the middle of subnet exploration mode is
not very likely.
Trace collection mode of tracenet is similar to traditional
traceroute. We plan to include the approach used in Paris
traceroute in order to keep the end-to-end paths more sta-
ble. Finally, tracenet is designed mainly for IPv4 and its
extension to IPv6 remains as a future work.
4. EVALUATIONS
In this section we measure accuracy and consistency of
tracenet using two diﬀerent types of experiments. In the
ﬁrst experiment set, we ran tracenet over Internet2 and
GEANT and compare the collected subnets with the subnet
list that we derived using the information provided by these
research networks. Our comparisons are based on the rate
of exact preﬁx length matches, similarity of subnet preﬁx
lengths, and similarity of subnet sizes. For the second set of
experiments, we ran tracenet from three diﬀerent vantage
points with a common target IP address set belonging to
four commercial ISPs (Sprintlink, AboveNet, Level3, NTT
America) and cross validate the collected subnets of each
vantage point against the others. Finally, we ran tracenet
from a single vantage point with ICMP, UDP, and TCP
probe packets to see its behavior with diﬀerent protocols.
Note that the main focus in our experiments is limited to
demonstrating the accuracy and consistency of tracenet
rather than deriving complete [13, 21] or representative [14,
3] sample topologies of commercial ISPs.
Before continuing with the experiments and their evalua-
tions we would like to point out a few issues regarding the
authenticity of the subnets collected by tracenet. First of
all, tracenet is based on active probing and completely un-
responsive subnets, i.e., subnets located behind a ﬁrewall
which blocks probe packets or their responses, cannot be
captured.
In this study we focus on sketching subnets at
the core of the Internet which are mostly open for discovery.
Secondly, a subnet sketched by tracenet is only an observ-
able subnet. That is, if there is a partially unresponsive
subnet, i.e., a subnet which consists of a mixture of respon-
sive and unresponsive routers, tracenet can capture only
the responsive portion of it. Related to observable subnet
concept, in case there is a subnet utilizing only a portion of
its whole IP address range, tracenet could only reveal what
it observes. To illustrate, if a network administrator utilizes
only a /30 portion of a subnet which is assigned a /29 subnet
mask, tracenet collects it as a /30 subnet. Finally, Inter-
net accommodates virtual subnets whose hosts connect to
each other through tunnels. Even though such a tunnel is
realized over a sequence of routers, tracenet captures it as
a single subnet.
4.1 TraceNET Accuracy over Internet2 and
GEANT
In this set of experiments, we run tracenet over Internet2
and GEANT and collect their subnet topologies. We mea-
sure the similarity of the collected topology against the de-
rived subnet topologies of Internet2 and GEANT using four
diﬀerent metrics. In the ﬁrst approach we directly compare
the rate of exact matches i.e., rate of subnets that are col-
lected exactly as announced in the original topologies. Re-
sults show that exact match rate of tracenet for Internet2
is 73.7% and for GEANT is 53.5%. In the second approach,
we exclude those unresponsive subnets, i.e., the ones that