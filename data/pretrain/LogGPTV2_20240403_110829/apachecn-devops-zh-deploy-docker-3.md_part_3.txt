If you would like to learn more about either Node, Express, or the MongoDB driver, you can visit [https://nodejs.org/en/](https://nodejs.org/en/), [https://expressjs.com/](https://expressjs.com/), and [https://github.com/mongodb/node-mongodb-native](https://github.com/mongodb/node-mongodb-native). If you don't feel like typing, you can also copy and paste this file from [https://github.com/sgnn7/deploying_with_docker/](https://github.com/sgnn7/deploying_with_docker/).
该应用的基本操作如下:
*   从`MongoDB`数据库加载任何现有单词
*   在一个变量中保存一份该列表的副本，这样我们只需要从数据库中获取东西一次
*   打开一个端口`8000`并监听请求
*   如果我们在`/`上收到一个`GET`请求，返回渲染的`index.html`模板并用单词列表数组填充它
*   如果我们收到一个`POST`到`/new`:
    *   将该值保存在数据库中
    *   更新我们的单词列表
    *   送我们回`/`
然而，这里有一部分需要特别注意:
```
const DB_HOST = process.env.DB_HOST || 'localhost:27017';
```
还记得我们之前提到的大部分映像配置应该通过环境变量来完成吗？这正是我们在这里所做的！如果设置了一个环境变量`DB_HOST`(正如我们在作为容器运行时期望的那样)，我们将使用它作为主机名，但是如果没有提供(正如我们在本地运行时期望的那样)，它将假设数据库在标准 MongoDB 端口上本地运行。这提供了可配置为容器的灵活性，并且能够由 Docker 之外的开发人员在本地进行测试。
有了主逻辑文件，我们的服务现在应该以类似的文件系统布局来安排，如下所示:
```
$ tree ./
./
├── Dockerfile
├── index.js
├── package.json
└── views
    └── index.pug
1 directory, 4 files
```
由于这确实是三个部分中唯一容易测试的部分，让我们在本地安装 MongoDB，看看该服务能做什么。您可以访问[https://docs.mongodb.com/manual/installation/](https://docs.mongodb.com/manual/installation/)了解如何在其他平台上安装它，但是我已经包括了在 Ubuntu 16.04 上手动安装的以下步骤:
```
$ # Install MongoDB
$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6
$ echo "deb [ arch=amd64,arm64 ] http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.4 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list
$ sudo apt-get update 
$ sudo apt-get install -y mongodb-org
$ sudo systemctl start mongodb
$ # Install our service dependencies
$ npm install
application-server@0.0.1 /home/sg/checkout/deploying_with_docker/chapter_3/prototype_service/application_server
npm WARN application-server@0.0.1 No license field.
$ # Run the service
**$ npm start**
**> application-server@0.0.1 start /home/sg/checkout/deploying_with_docker/chapter_3/prototype_service/application_server**
**> node index.js**
**Data loaded from database (10 words)**
**Server started on port 8000...**
```
好像起作用了:我们去`http://localhost:8000`查看浏览器吧！
![](img/2a4efca3-b2aa-4e39-8e7d-5fe54ef4bfc5.png)
让我们说几句话，看看会发生什么:
![](img/17eeea89-036f-4519-8b40-3ac51ab85bbe.png)
到目前为止，一切顺利！最后的测试是重新启动服务，并确保我们看到相同的列表。按下 *Ctrl* + *C* 退出我们的节点进程并运行`npm start`。你应该会再次看到相同的列表，这意味着它正在按预期工作！
# 一起经营
所以，我们有我们的`web_server`、`application_server`和`database`容器都想通了。在继续下一步之前，让我们验证您是否拥有与这些文件匹配的所有文件:
```
$ tree .
.
├── application_server
│   ├── Dockerfile
│   ├── index.js
│   ├── package.json
│   └── views
│       └── index.pug
├── database
│   └── Dockerfile
└── web_server
 ├── Dockerfile
 └── nginx_main_site.conf
4 directories, 7 files
```
我们的下一步是构建所有容器:
```
 $ # Build the app server image
 $ cd application_server
 $ docker build -t application_server .
 Sending build context to Docker daemon 34.3kB
 Step 1/10 : FROM node:8
 Successfully built f04778cb3778
 Successfully tagged application_server:latest
 $ # Build the database image
 $ cd ../database
 $ docker build -t database .
 Sending build context to Docker daemon 2.048kB
 Step 1/2 : FROM mongo:3
 Successfully built 7c0f9399a152
 Successfully tagged database:latest
 $ # Build the web server image
 $ cd ../web_server
 $ docker build -t web_server .
 Sending build context to Docker daemon 3.584kB
 Step 1/8 : FROM nginx:latest
 Successfully built 738c17ddeca8
 Successfully tagged web_server:latest
```
This sequential building is great for showing what needs to be done in each step, but always think about automation and how manual processes can be improved. In this particular case, this whole block of statements and execution could have also been done from the parent directory with this single line: `for dir in *; do cd $dir; docker build -t $dir .; cd ..; done`
# 发射
有了这三个相关的容器，我们现在可以启动它们了。需要注意的是，它们是按顺序启动的，因为我们的应用一启动就试图从数据库中读取数据，如果应用不在那里，我们不希望 web 服务器启动，所以我们将按以下顺序启动它们:`database -> application_server -> web_server`:
```
$ docker run --rm \
             -d \
             -p 27000:27017 \
             database
3baec5d1ceb6ec277a87c46bcf32f3600084ca47e0edf26209ca94c974694009
$ docker run --rm \
             -d \
             -e DB_HOST=172.17.0.1:27000 \
             -p 8000:8000 \
             application_server
dad98a02ab6fff63a2f4096f4e285f350f084b844ddb5d10ea3c8f5b7d1cb24b
$ docker run --rm \
             -d \
             -p 8080:80 \
             web_server
3ba3d1c2a25f26273592a9446fc6ee2a876904d0773aea295a06ed3d664eca5d
$ # Verify that all containers are running
$ docker ps --format "table {{.Image}}\t{{.Status}}\t{{.ID}}\t{{.Ports}}"
IMAGE                STATUS              CONTAINER ID        PORTS
web_server           Up 11 seconds       3ba3d1c2a25f        0.0.0.0:8080->80/tcp
application_server   Up 26 seconds       dad98a02ab6f        0.0.0.0:8000->8000/tcp
database             Up 45 seconds       3baec5d1ceb6        0.0.0.0:27000->27017/tcp
```
这里需要注意几点:
*   我们有意将本地端口`27000`映射到数据库`27017`，这样就不会与主机上已经运行的 MongoDB 数据库发生冲突。
*   我们将神奇的`172.17.0.1` IP 作为主机，将`27000`端口传递给我们的应用服务器作为数据库主机。
*   我们在端口`8080`而不是`80`启动了网络服务器，以确保我们不需要根权限*。
If you do not see three containers running, check the logs with `docker logs `. The most likely culprit will probably be the mismatch between the IP/port on a container and the destination, so just fix and restart the container that is failing until you have all three running. If you have a lot of problems, do not hesitate to start the containers in the non-daemon mode by removing the `-d` flag from the commands we used. * - On *nix systems, ports below `1024` are called registered or privileged ports that govern many important aspects of communications for a system. To prevent malicious use of these system ports, root-level access is required on almost all such platforms. Since we don't really care which port we will be using for this testing, we will avoid this issue altogether by selecting port 8080.
该设置中的信息流大致如下:
```
Browser  localhost:8080  web_server:80  172.17.0.1:8000 (Docker "localhost")  app_server  172.17.0.1:27000 (Docker "localhost")  database:27017
```
# 测试
我们已经运行了所有的部分，所以让我们在`http://localhost:8080`试一试！
![](img/e7d98ee4-a523-4bef-ae0d-59bb7c72ce0c.png)
不错；我们的认证成功了！让我们输入我们的超级机密凭证(用户:`user`，密码:`test`)。
![](img/e5af8d0c-b802-4bd9-9df5-56f3ede4a0ef.png)
一旦我们登录，我们应该能够看到我们的应用服务器接管请求的处理，并给我们表单来输入我们想要保存的单词:
![](img/ace839d9-83da-4df7-8fbb-a27f0f699299.png)
正如我们所希望的那样，一旦我们进行了身份验证，应用服务器就会处理请求！输入几个字，看看会发生什么:
![](img/7e25e838-84ff-4714-a2cf-e731c301f78f.png)
恭喜你！你已经完成了你的第一次容器服务！
# 我们实施的限制和问题
我们应该花一分钟来考虑一下，如果你要在一个真实的系统中使用它，我们服务的哪些部分可能需要改进，以及什么是最理想/最实用的缓解措施。由于使用容器和云的关键部分是评估更大架构的优缺点，所以在开发新系统或更改现有系统时，您应该始终尝试这样做。