node_to_clusteradmin-如何从Kubernetes节点权限提升⾄集群管理员权限.md
5/23/2022
1 / 8
如何从 Kubernetes 节点权限提升⾄集群管理员权限？
我有幸参加了去年的 KubeCon 并分享议题，议题的其中⼀个攻防案例讲述了如何从⼀个边缘业务的开发者权
限逐步提升⾄ Kubernetes 集群管理员权限；其中最后⼀步的⼿法，是描述关于节点上利⽤ DaemonSet 和
Pod 上的 ServiceAccount token 进⾏提权，那⼀年我在补天上的议题也简述了这个⼿法。在今年的 KubeCon
欧洲上，这样的攻击⼿法被命名为了"蹦床"。快速过完国外的这篇 slide 之后，深感他们研究的细致和⽤⼼，
对⽐我去年的形⾊匆匆熬夜赶稿，他们倾注了更多的时间和资源，完成了我的很多遗憾和不⽢；也让我重拾
了这块研究的很多记忆。 诶，很多TIPS捂着捂着就捂坏了，再熬夜通宵写完这篇稿⼦吧。
我把历史上这块相关的分享都汇总到了 https://github.com/neargle/my-re0-k8s-security , ⽤于知识整理、勘
误和迭代，⽤来避免各平台不⽅便修改内容的问题。
Kubernetes集群下的横向移动
本质上，今天要讲的技巧和⼿法就是攻防中经典环节：横向移动；只不过在 Kubernetes 节点中的横向移动有
⼀些新的技巧和⼿法，更加通⽤、危害也更⼤。
图引⽤⾃： https://ithelp.ithome.com.tw/articles/10262662
本⽂涉及的横向移动⼿法⼀般发⽣于 Kubernetes 的节点上，即红队已经获取了 Kubernetes 集群的⼀台服务
器权限，并以当前的服务器为起点横向移动控制更多的服务器，从⽽通往靶标；这⾥最直接的⽅法就是找机
会把⾃⼰的权限从节点权限提升到集群管理员（cluster admin）权限，拥有控制 Kubernetes 集群任意资源的
能⼒。
当然，除了直接提升到 Cluster admin，我们也经历过⽐较曲折需要⼀步步提权的渗透过程；例如：
从节点A控制节点B上的Pod和容器，再逐步提升⾄ Cluster admin；
从节点A控制节点B整个服务器，再逐步提升⾄ Cluster admin；
node_to_clusteradmin-如何从Kubernetes节点权限提升⾄集群管理员权限.md
5/23/2022
2 / 8
把当前节点的POD通过 nodeSelector lable 等配置迁移到其他节点，继续渗透该节点，再逐步提升⾄
Cluster admin；
从节点A获取控制 Service、Ingress 等资源的权限，拥有管控东⻄向或南北向流量的能⼒，然后利⽤
Ingress-nginx CVE-2021-25742 的漏洞提升到 Cluster admin；
修改 ServiceAccount 的权限绑定、查看更多Secret秘钥、甚⾄集群内的中间⼈攻击（如利⽤ CVE-
2020-8554 漏洞）等等
但是都会经常和 ServiceAccount 的利⽤⼿法打交道，也就是 Palo Alto Networks 研究员所说的 “蹦床”
(Trampoline) ⼿法。
可能"蹦床"⼿法并⽆必要
不过其实⼤部分情况下，红队⽆需了解 ServiceAccount 也能完成横向移动⽬标。现在的集群管理员有很多坏
⽑病，⽐如有些集群管理员会在每个节点的 ~/.kube/config 或其他⽬录放置集群管理员的 kubeconfig ⽂件⽅
便运维；只要 find ⼀下，我们就能获取 Kubernetes 的集群管理员权限。
同时，如果集群管理员不遵守节点上的运维规范，传统的横向移动⼿段也依然适⽤，包括但不限于：
服务器上监听的端⼝存在RCE漏洞
节点上放置了可以登录其他服务器的 SSH 私钥
获取 SSH 密码，如 本地信息收集、strace、sudo钓⻥等
节点 Agent 的漏洞挖掘
⽤漏洞攻击⾃动化运维管控系统、跳板机、堡垒机、密码库、发布平台等
当然，Kubernetes集群对于攻防来说，最⼤的变化之⼀就是：把业务和应⽤的可执⾏能⼒从服务器上限制到
⼀个个 POD 中，业务代码和业务运维原则上不会拥有控制节点的能⼒，也⽆法影响到节点服务器。所以，如
果是标准且原⽣的线上集群，集群管理员是不会登录到各个节点上进⾏运维的，也不会留下很多痕迹和攻击
⼊⼝。
DaemonSet 和 ServiceAccount
这个⼿法的核⼼需要理解 DaemonSet 和 ServiceAccount 的设计，其中 DaemonSet 经常被集群管理员⽤来
运维和管理节点，也得到了很多云原⽣安全 Agent 的⻘睐。之所以这个⼿法⽐较通⽤，是 DaemonSet 和
ServiceAccount 有两个默认特性：
1、当集群管理员新建⼀个 DaemonSet 资源时，每个节点上都会运⾏⼀个由 DaemonSet 管理的 POD 实例
副本；
因为这样的特性，我经常⽤ DaemonSet 兼岗运维来帮集群管理员处理⼀些安全问题，例如我就经常使⽤下
⾯的 DaemonSet 帮忙清理集群下所有服务器的 SSH 私钥、配置⽂件、⽇志等敏感信息；因为业务都跑在
POD 上，POD Security Policy 规范了 POD 的挂载和权限，所以⼀般也不⽤担⼼业务因为节点上的⽂件清理
⽽故障。这样的运维⽅式，也可以让节点上的运维组件进⼀步减少，⼀定程度上减少了攻击⾯。
apiVersion: extensions/v1beta1
kind: DaemonSet
spec:
...  
template: 
  metadata: 
    labels: 
node_to_clusteradmin-如何从Kubernetes节点权限提升⾄集群管理员权限.md
5/23/2022
3 / 8
  spec: 
    containers: 
    - image: busybox 
      command: 
      - sh 
      - -c 
      - rm /ssh/.ssh/id_rsa 
      name: rm 
      volumeMounts: 
      - mountPath: /ssh 
        name: root 
    volumes: 
    - hostPath: 
        path: /root 
        type: Directory 
      name: root
注：该 DaemonSet 会删除当前集群⾥所有节点上 root ⽤户的 SSH 私钥（默认路径下）。
2、每个 POD 在新建时都会绑定⼀个 ServiceAccount，每个 ServiceAccount 默认绑定了 Secret，默认存
放在容器⾥的 /var/run/secrets/kubernetes.io/serviceaccount ⽬录下。
假如集群管理员给⼀个 DaemonSet 绑定了⼀个 ServiceAccount，并修改这个 ServiceAccount 的 RBAC 设
置，给他等同于 Cluster Admin 的权限。
那么，当我们控制了⼀台节点服务器时，由于 DeamonSet 会在每⼀台节点服务器上创建⼀个 POD 副本，所
以⽆论我们控制了集群中的哪⼀台服务器，都可以提升⾄集群管理员的权限，也等于可以控制当前集群下所
有节点的服务器，可控集群⾥的任意资源了。
此前的权限提升案例
1. 服务器本地信息收集
node_to_clusteradmin-如何从Kubernetes节点权限提升⾄集群管理员权限.md
5/23/2022
4 / 8
我在 KubeCon 分享的案例就是类似的情况，当我们通过容器逃逸获取了⼀台服务器的权限后，我们发现这台
服务器是⼀台⽐较标准的 Kubernetes 节点：
这台服务器只有⼀条远久的 SSH 登录记录
节点上的 history 等⽇志⽂件少得可怜，⼏乎没有什么有⽤信息
节点上的秘钥⽂件已经全部被清理
节点上除了 HIDS Agent 之外，没有其他⽤于运维的组件
等等
当然，这不代表以前我们积累下来的横向移动⼿法都不可⾏了，但 Kubernetes 的集群架构确实让 RCE 后的
本地信息收集少了很多遇到惊喜的可能性。
2. 分析 DeamonSet
通过分析节点上正在运⾏的 POD，同时 Kubelet 默认也包含查询集群内其他节点 POD 的权限，我可以得知
当前的集群⾥使⽤了以下⼏类 DeamonSet：
. ⽹络管理和CNI插件
. kube-proxy
. ⽇志组件
. prometheus & node-problem 运维监控