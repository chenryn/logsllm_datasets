ing the pthreads with SMVthreads. All these changes required
only 2 LOC changes as the SMV API eliminates the refac-
toring burden (EU). We needed to add only 1 line to include
the header ﬁle and another to initialize the main process
to use the SMV model. The SMV API automatically in-
tercepts pthread_create and malloc and replaces them with
smvthread_create and memdom_alloc calls. Therefore, each
SMVthread could automatically allocate memory in its pri-
vate memory domain (cf. Section 3.4).
Figure 6: Runtime overhead of the SMV model
for the multithreaded applications in the PARSEC
benchmark suite.
The security-enhanced PARSEC benchmarks demonstrate
a general case that could be applied to any multi-threaded
programs written in C/C++ (GF), even with the presence
of extremely intensive memory allocation/free calls in paral-
lel. In addition, the intra-process isolation can help prevent
attacks that arbitrarily modify data on the stack using ma-
licious threads, e.g., ROP-based attacks. One study has
shown that an attacker can perform ROP and use gadgets
(16 payloads is enough for > 80% of GNU coreutils [16])
to achieve Turing completeness. Note that ASLR/stack ca-
naries have been proven ineﬀective to protect against infor-
mation leakage [20]. With SMV, programmers can secure
the system with few changed lines of source code while also
handling nontrivial thread interaction, if needed.
Performance. Figure 6 shows the runtime overhead of
the ported PARSEC benchmarks with 10 runs for each pro-
gram. The results show that the SMV model incurs neg-
ligible runtime overhead. The overall geometric mean of
the runtime overhead is only 2.07% (LO) and the maximum
of the runtime overhead occurs for dedup due to the huge
amount of page faults and the highly intensive parallel mem-
ory operations.
5.6 Cherokee Web Server
Overview. The original Cherokee server uses a per-
thread memory buﬀer system for resource management to
isolate threads from remote connections. We leveraged the
SMV model to provide Cherokee with the OS level privi-
lege enforcement for diﬀerent server components. Then we
compared the throughput of our security-enhanced Chero-
kee with the original Cherokee.
Assessment of porting eﬀort. We enhanced the se-
curity of the Cherokee version 1.2.104 server as illustrated
in Section 3.6.2. The user-space SMV library automati-
cally replaced pthread_create with smvthread_create to cre-
ate SMVthreads for the workers to handle client requests.
Each SMVthread worker ran in its own SMV with a private
memory domain which is inaccessible by other workers. All
other shared objects such as the mutex are allocated in a
shared memory domain and accessible by all workers. We
modiﬁed only 2 LOC of Cherokee to enforce the least priv-
ilege memory access with the SMV model (EU). We believe
that the negligible porting eﬀort demonstrates the practica-
bility of the SMV model to protect real-world applications.
Figure 7: Throughput overhead of Cherokee server.
Performance. We used ApacheBench to measure the
server throughput for the original and security-enhanced
Cherokee. Both versions of Cherokee hosted two kinds of
web content: (a) social networking web pages, and (b) large
streaming ﬁles. Based on the total transfer size per page re-
ported in Alexa top one million websites [19], we tested web
page sizes from moderate amount of content to abundant
media objects (100KB to 8MB). We also evaluated the per-
formance of both servers hosting large streaming ﬁles (50MB
and 100MB) to show the practicability of our security-enhanced
Cherokee. The Cherokee server process created 40 worker
threads by default to handle client requests. The client ini-
tiated the ApacheBench for 100,000 requests with concur-
rency level set to four (matches the number of cores). We
conducted the experiment 20 times for each object size and
present the results in Figure 7. Overall, the SMV model
reduced throughput by only 0.69% in exchange for strictly
enforcing a least privilege security policy (LO).
We also ported the popular Apache httpd-2.4.18 with only
2 LOC (EU). Using Apache as a ﬁle sharing server (GF) to
host large objects with size of 10MB, 50MB, 100MB, and
1GB we conducted the same experiment. Overall, SMVs
reduced the throughput of the httpd server by only 0.93%
(LO). As Cherokee already presents the case for web servers,
we exclude the details for Apache httpd due to space limita-
tion.
5.7 Mozilla Firefox Web Browser
Overview. The developers of modern web browsers have
made tremendous eﬀorts to ensure resource isolation.
In
2011, Firefox introduced an abstraction called “compart-
ments” for its JavaScript engine SpiderMonkey to manage
JavaScript heaps with security in mind [45]. However, the
isolation is not enforced by any mechanism stronger than the
compartments’ logical boundaries. As a result, any memory
corruption can still lead to serious attacks. Here we demon-
strate that the SMV model can be easily deployed to protect
Firefox’s JavaScript engine from memory corruption by con-
ﬁning each compartment to access only its private and the
system compartments.
Assessment of porting eﬀort. Firefox uses threads
for UI rendering, processing network packets, monitoring
browser status, handling JavaScript jobs, etc. In our evalua-
tion, we replaced Firefox 45.0 SpiderMonkey’s NSPR (Netscape
Portable Runtime) threads with SMVthreads running in a pri-
vate memory domain by adding a new thread type named
PR_SMV_THREAD to the NSPR library. SpiderMonkey creates 8
threads (1 thread per core + 4 excess threads) in total. We
0.39%0.79%3.01%8.24%0.98%4.14%6.77%0.47%1.88%2.02%4.22%3.92%2.07%0.0%1.0%2.0%3.0%4.0%5.0%6.0%7.0%8.0%9.0%Runtime Overhead (%)0.61%0.75%0.38%0.55%0.39%0.48%0.57%0.69%0.0%0.2%0.4%0.6%0.8%1.0%Throughput Overhead(%)6. RELATED WORK
Techniques for achieving intra-process isolation have been
studied for decades. In this section, we summarize and com-
pare the related work following a more detailed breakdown.
Memory safety is the goal of many proposals, as mem-
ory corruption is the root cause of various well-known soft-
ware vulnerabilities. We refer the reader to Nagarakatte et
al. [32] and Szekeres et al. [42] for two surveys on memory
safety.
In short, solutions for complete memory safety do
not handle intra-process privilege separation problem and
impose signiﬁcant cost for practical systems (cf. LO).
The ﬁrst generation privilege separation techniques
focus on partitioning a process into single-process compo-
nents. Provos et al. [33] were the ﬁrst to manually parti-
tion OpenSSH by running components in diﬀerent processes
and coordinating them through inter-process communica-
tion (IPC). Privtrans [9] automated the retroﬁtting proce-
dure for legacy software by partitioning one program into a
privileged monitor process and an unprivileged slave process
with just few programmer-added annotations. Wedge [8]
extended the idea of privilege separation to provide ﬁne-
grained privilege separation with static capabilities, which
was improved by Dune [5] through the Intel VT-x technol-
ogy (cf. NH) for better performance and by Salus [40] for dy-
namic security policy. The disadvantage of these ﬁrst gener-
ation techniques is that they lack support for multiple com-
puting entities within the same compartment (cf. LO). This
limitation hurts performance of multithreaded programs and
restricts the usability of these solutions in practice.
The second generation privilege separation tech-
nique Arbiter [47] allowed multiple threads to run in the
same compartment. However, Arbiter still faces similar lim-
itations on parallel memory operations and their evaluation
does not use multithreaded benchmarks that have intensive
memory operations to demonstrate the system’s parallelism,
even though the design aims at concurrent execution for
threads (cf. LO). We identify two major causes of the limi-
tation on Arbiter’s parallelism. First, the highly serialized
memory management in their user-space library incurs in-
evitable runtime overhead of up to 400%. Second, the design
choice of separating mm_structs forces their kernel to aggres-
sively synchronize the global process address space for every
thread’s memory descriptors. The synchronization costs in-
crease when an application performs intensive memory op-
erations or generates a huge amount of page faults. These
limitations on parallelism manifest themselves when running
real-world applications (e.g., Firefox) with large inputs (e.g.,
web server hosting a 100MB ﬁle). However, the largest in-
put in the authors’ evaluation is only 1MB. In addition, pro-
grammers are on their own to partition applications as the
solution does not provide assistance in retroﬁtting applica-
tions (cf. EU). As we showed in this paper, the SMV model
addresses the limitations of the ﬁrst and second generation
privilege separation techniques without sacriﬁcing security
or parallelism.
OS-level abstraction mandatory access control so-
lutions such as SELinux [39], AppArmor [4], and Capsicum [48]
protect sensitive data at process/thread granularity. How-
ever, ﬁne-grained privilege separation for software objects
(e.g., arrays) within a process is not supported in these tech-
niques. On the other hand, SMVs tackle issues for intra-
process data protection with capabilities. PerspicuOS [13]
separates privileges between trusted and untrusted kernel
Figure 8: Runtime overhead of security-enhanced
Mozilla Firefox web browser.
modiﬁed only 12 LOC of the entire Firefox source to use the
SMV model. Although we designed a per-tab isolation pol-
icy, the workloads of individual JavaScript benchmark suites
are run in the same tab. For example, JetStream executes
40 benchmark programs in the same tab. The performance
numbers faithfully report the overhead for privilege checks
as each memory page reference is monitored by our page
fault handler.
Performance. We evaluated our security-enhanced Fire-
fox with four popular JavaScript benchmarks and report the
numbers in Figure 8. The overall geometric mean for all
benchmarks is only 1.89%. The performance numbers re-
port the overhead when Firefox performs additional privilege
checks for SpiderMonkey’s helper threads. We believe that
such negligible overhead numbers allow eﬃcient and strong
isolation for multithreaded browsers to be used in practice
and provide the Mozilla team an alternative to the ongoing
multi-process Firefox e10s project [14].
5.8 Limitations
The low performance overhead for checking privileges in
the SMV model builds on the virtual memory protection at
page granularity. At this point, the SMV model does not
guard against unprivileged memory references within the
same page as the kernel relies on page table entry (PTE)
permission bits. However, poorly organized data structures
mixing privileged and non-privileged data within a region
are intrinsically insecure and avoided by real-world soft-
ware (e.g., Hoard [6] memory allocator, connection buﬀers
in Cherokee, worker pools in Apache httpd, compartments
in Firefox). Therefore, SMVs can be seamlessly integrated
into modern software, eliminating the chances for threads to
unintentionally access the same page while enforcing mem-
ory boundaries at kernel level. Software monitors for byte-
granularity protection has inevitably high overhead (e.g.,
decentralized information ﬂow control systems) since the
memory boundary is neither supported by hardware nor the
kernel subsystem, making every memory load/store instruc-
tion a candidate for a privilege check.
In contrast, page-
granularity oﬀers strong memory isolation and superior per-
formance with hardware/kernel support.
Although SMVs cannot protect against malicious library
threads once they are installed on the system (requires root
privilege, which is out of scope), a user can compile any
third-party threading libraries to use SMVs, as we demon-
strated in the PARSEC benchmark with GThread in vips
and RTThread in raytrace.
0.60%4.14%2.17%2.32%1.89%0.0%1.0%2.0%3.0%4.0%5.0%JetStreamKrakenOctaneSunSpiderGeomeanRuntime Overhead (%)components deﬁned by kernel developers using an additional
layer of MMU. Such an intra-kernel design does not facili-
tate intra-process privilege separation as SMV does for user-
space applications (cf. GF and EU). These security policies
are orthogonal to the SMV memory policies and SMVs can
be used in conjunction with these techniques to gain addi-
tional inter-process protection.
Decentralized information ﬂow control (DIFC) sys-
tems allow programmers to associate secrecy labels with
data and enforce information ﬂow to follow security policies.
HiStar [51] is an OS that fundamentally enforces DIFC that
could likely address intra-process isolation. However, HiStar
is not based on a general OS kernel such as Linux and thus
cannot be incrementally deployed to commodity systems.
Moreover, the applications have to be completely rewritten
in order to use HiStar (cf. GF and LO). Thus, the solution
is infeasible for legacy software (e.g., Firefox) in practice.
Flume [23] focuses on process-level DIFC for OS-level ab-
stractions (e.g., ﬁles, processes) in UNIX but it does not han-
dle intra-process privilege separation within a multithreaded
application. Laminar [34] supports multithreaded applica-
tion running in its specialized Java virtual machine (cf. GF).
However, the additional layer in the software stack and its
dynamic checker incur signiﬁcant runtime overhead (cf. LO).
As noted in Section 5.8, byte-granularity checkers in DIFC
systems incur high performance overhead in practical appli-
cations that have intensive memory operations (cf. LO).
Software-based fault isolation (SFI) [26, 46] isolates
software components within the same address space by con-
structing distinct fault domains for code and data. SFI pre-
vents code from modifying data or jumping to code out-
side of a fault domain. Native client [3, 50] utilizes SFI
with x86 hardware segmentation for eﬃcient reads, writes,
control-ﬂow integrity [1], and component isolation. How-
ever, the untrusted code is statically associated with a spe-
ciﬁc fault domain as the approach does not provide sim-
ple means of implementing a dynamic and ﬂexible security
policy for practical multithreaded applications (cf. EU and
LO). In contrast, SMVs oﬀers solutions for programmers to
structure the protected memory regions in a dynamic and
non-hierarchical manner.
Language-based techniques utilize safe language se-
mantics to provide isolation for applications written in type-
safe languages (e.g. [10, 21]) and implement information ﬂow
control for objects within a process (e.g. [11, 30, 31]). How-
ever, the vast majority of legacy software are still written in
an unsafe language for eﬃciency. As a result, programmers
need to completely rewrite their legacy software using safe
languages (cf. GF). Ribbons [18] is a programming model
developed entirely for user space that provides ﬁne-grained
heap isolation for multithreaded applications. While the
access privileges of threads are tracked pair-wise between
domains hierarchically in user space in Ribbons, the SMV
model leverages the OS memory management subsystem to
organize the access privileges of threads systematically in
kernel space at negligible overhead (cf. EU and LO).
Special hardware support and virtualization tech-
nologies is another line of research that seeks for strong iso-
lation of program secrets. Flicker’s [28] signiﬁcant overhead
due to its intensive use of the TPM chip (cf. NH) makes
it impractical for performance-critical applications (cf. LO).
Although TrustVisor [27] mitigates the overhead by a hyper-
visor and a software-based TPM chip, the system is imprac-
tical for applications that require multiple compartments
with diﬀerent capabilities (cf. GF). Fides [41] points out
the limitations in TrustVisor and improves it by support-
ing more ﬂexible secure modules with a dual VM architec-
ture on top of its special hypervisor. Hypervisors can be
used for guest OSs (e.g. SMV OS kernel) on a shared host
while SMVs (providing a richer API) directly run on bare
metal at full speed (cf. GF and LO). The additional software
level in the hypervisor introduces overheads as the VMM
intervenes for the guest OSs page tables, causing TLB cache
misses. Recent studies [2, 17, 29] by Intel indicate that
hardware support for secure computing will become avail-
able on mainstream X86 environments in the near future.
Intel Software Guard Extensions (SGX) is a mechanism to
ensure conﬁdentiality and integrity (but not availability) of
a trusted unprivileged software module under an untrusted
OS with limited trusted hardware. SGX protects one com-
ponent from possible interaction using an “enclave” enforced
by hardware. Although the goal of Intel SGX is similar
to SMVs, our pure-software solution allows SMVs to be