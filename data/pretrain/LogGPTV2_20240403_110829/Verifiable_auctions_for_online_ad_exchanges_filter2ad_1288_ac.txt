An auditor begins an audit by submitting the unique identiﬁer of
the auction to the auctioneer. The auctioneer then returns the VEX
object list and outcome record (which contains sp, the sale price,
and hw
tag, the ad tag hash of the winning bidder); both objects should
have been signed by the seller. The auctioneer must also return a
list of proofs in which it labels each bid in the VEX object list with
greater-than, equal-to, or less-than; the comparison is to sp.
Figures 6 and 7 depict the procedures for a correct auctioneer and
an auditor, respectively, to generate proofs and validate proofs. The
high-level idea is that the protocol requires the actioneer to label
the |P| bids (see above); meanwhile for the labeling to appear valid,
|P|− 2 of the bids must be labeled with less-than (with correspond-
ing proofs), and one bid must be labeled with equal-to (again with a
correct proof). Although no greater-than proof appears, the require-
ment for |P| − 1 correctly labeled bids gives the auctioneer little
leeway in its claim about which proof corresponds to the winning
bid. We make this reasoning rigorous in Section 5.1.
4.5 Extending the integer comparisons protocol
We extend the protocol described in Section 3, to allow a prover
to generate proofs of strict equality. We use this extension, instead
of a more natural proof-of-equality (e.g., providing the hash of a
value and then later revealing the value), because the correctness
argument for audits depends on there being a single commitment
object for each bid (§5.1).
Figure 8 depicts the extension. With this extension, greater-than-
or-equal proofs remain the same. The difference is that the prover
could choose to reveal s(cid:48) to prove strict equality. The querier can
tag, P)
tag then
for i = 1 to |P| do
if Pi.label == greater-than then
else if Pi.label == equal-to then
if VOi.htag (cid:54)= hw
return reject
1: function VERIFYAUDITPROOFS(sp, VO, hw
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
else // Pi.label == less-than
return accept
return reject
return reject
return reject
if VerifyEqProof(m − sp, VOi.c, Pi.proof ) (cid:54)= accept then
if VerifyProof(m − sp, VOi.c, Pi.proof ) (cid:54)= accept then
if exactly one greater-than label and exactly one equal-to label then
Figure 7—Pseudocode for proof veriﬁcation. sp is the auction’s sale
price, VO is the set of VEX objects, hw
tag is the hash of the winning
bidder’s ad tag, and P is the set of labeled proofs provided by the auc-
tioneer. This procedure relies on the protocol described in Section 3
and an extension (Section 4.5).
function VERIFYEQPROOF(q, c, p)
// p should be s(cid:48)
if VerifyProof(q + 1, c, p) == accept and p ∈ Σn,k then
return accept
return reject
Figure 8—Extension of the protocol depicted in Figure 2, to enable
equality proofs. The extension overloads a greater-than or less-than
commitment, to let the prover also prove equality, should it choose.
The prover calls Setup and GenCommit as before, and reveals s(cid:48) when
it wishes to prove strict equality.
then verify the proof with VerifyEqProof. This extension does not
subvert the guarantees provided by the base protocol, though of
course the Secrecy guarantee is vacuous under equality proofs.
5 ANALYSIS, REVISITING REQUIREMENTS,
AND ISSUES
We consider the auction correctness condition from Section 4.2, the
design requirements from Section 4.1, and other issues.
5.1 Auction correctness
For now, we assume that each impression is auctioned at most once
and that at most one bidder is told that it won the given auction;
we revisit these assumptions in Section 5.3. Our focus here will
be on the Auction correctness condition, stated in Section 4.2. We
show that, assuming a successful audit, if there is no auctioneer-
bidder collusion, then the correctness condition holds. If there is
such collusion, a colluding bidder receives a right of ﬁrst refusal.
(Auctioneer-seller collusion is considered in Section 5.3.)
As described in Section 4.4, two inputs to an audit are (1) the
VEX object list for that auction (which the auditor fetches from
the auctioneer and which is signed by the seller) and (2) a set of
proofs, which the auctioneer generates in response to an audit re-
quest. To pass veriﬁcation (Figure 7), the auctioneer must label one
proof with greater-than, one with equal-to, and the rest with less-
than. For ease of exposition, we will refer to the auctioneer as la-
beling bids; this phrasing is justiﬁed because the proof entries and
committed bids are in one-to-one correspondence. For notation, let
e be the index of the bid labeled equal-to, g be the index of the
bid labeled greater-than, and L be the set of indices of bids la-
200beled less-than. Notice that the algorithm in Figure 7 passes only
if L ∪ {e, g} = {1, 2, . . . ,|B|}.
Now, consider the following four conditions:
• Be = sp, where sp is the sale price reported to the seller.
• The bidder of Bg was designated the winner.
• Be ≥ max{B(cid:96) | (cid:96) ∈ L}.
• Bg ≥ Be.
These conditions together imply Auction correctness (§4.2), as fol-
lows. The ﬁrst condition implies that the sale price sp equals one
of the bids; the second condition implies that the winner’s ad tag
was provided to the seller. The latter two conditions imply that the
auction obeyed the second-price computation (§2.2) and its gener-
alization to the case of ties among bids. Indeed, in the case that all
of the bids are different, the latter two conditions express that Bg
was the highest bid and Be the second-highest.
Claim 5.1. If the audit veriﬁcation algorithm (Figure 7) passes,
then the ﬁrst three conditions above hold.
Proof. If the ﬁrst condition does not hold, then the auctioneer la-
beled Be incorrectly, and VerifyEqProof fails (Figure 7, line 7).
Recall that Bg is deﬁned to be the bid labeled with greater-than.
If the bidder who issued Bg was not the one whose ad tag hash was
signed by the seller (the designated winner), then the audit algo-
rithm rejects in line 4 (Figure 7). Thus, the second condition holds.
If the third condition does not hold, then there exists i ∈ L such
that Be  Be, so the soundness of the integer
comparison protocol (Section 3) implies that it is computationally
intractable for the auctioneer to formulate such a proof. Thus, the
audit does not pass.
What about the last condition? The auctioneer can violate this
condition but only under limited circumstances:4
Claim 5.2. If the audit passes but Be > Bg, then the auctioneer set
sp equal to the highest bid and designated a winner who bid less
than this amount.
Proof. If the audit passes, then by Claim 5.1, sp = Be and Be ≥
max{B(cid:96) | (cid:96) ∈ L}. And by the given condition, Be > Bg. Thus, all
of the bids are ≤ Be = sp, so this bid is the highest (and is perhaps
tied for that place). Since the second condition holds, the designated
winner bid Bg, yet the sale price is sp = Be > Bg.
Thus, if the fourth condition is violated without triggering de-
tection, then the designated winner must have colluded, possibly
tacitly, as this bidder is now obligated to pay more than its bid!—
an incorrect outcome. In effect, such a colluding bidder is given a
right of ﬁrst refusal: it has the option to win the auction and the
impression but only by paying the highest offered bid.
The guarantees, then, that the auction and audit protocols pro-
vide are: assuming a successful audit, (1) if there is no collusion,
then all four conditions above hold, and hence so does Auction cor-
rectness (§4.2); and (2) if there is collusion, a colluding (possibly
low) bidder can exercise a right of ﬁrst refusal. Giving this right to a
4This vulnerability is a consequence of our integer comparison proto-
col (§3); the issue would not exist under one of the more powerful (but
more expensive) alternatives in Section 7.7.
colluder is not ideal, but we consider this a (partial) victory because
this right is well-understood in other contexts (law, real estate, etc.),
and this is the limit of explicit manipulation.
5.2 Revisiting the design requirements
We now consider the requirements from Section 4.1 in turn, and ask
to what degree the protocol follows them.
Existing relationships are preserved, though slightly more infor-
mation leaks out of VEX versus in the status quo: in VEX’s auction
phase, bidders learn how many other bidders there are, and in VEX’s
audit phase, the auditor learns the sale price of the auction. We do
not believe that these revelations signiﬁcantly alter the ecosystem
beyond the changes introduced by veriﬁability, but we admit that
this is speculation.
Bidder privacy. A bidder who creates a VEX object has plausi-
ble deniability about having done so: nothing in the protocol links
a given VEX object to its bidder, the indexing of bids in the VEX
object list is arbitrary, and the ad tag appears in the VEX object list
only in hashed form.
Availability. As in the status quo, the availability of the auction
phase depends on the seller and the auctioneer but not bidders. Bid-
ders affect the availability of the audit phase: a bidder renders an
auction non-auditable if it commits to a VEX object without decom-
mitting (because then the auctioneer cannot generate proofs for the
corresponding VEX object, which stymies the audit protocol). The
protocol requires the auctioneer to declare a non-auditable auction
online (though we explore the performance beneﬁts of relaxing this
requirement in Section 6). Such publicity would ideally disincen-
tivize auctioneers from abusing the non-auditability designation.
The auctioneer, in turn, could dissuade bidders from inducing this
behavior, perhaps by levying penalties and eventually dropping a
bidder who persistently fails to decommit. Note that although we
are relying on publicity and soft defenses here, we still need VEX:
without it, there is no protocol deviation to publicize.
No new third parties are introduced by the protocol.
Bilateral veriﬁcation is a feature of the protocol.
The requirements that concern costs—low burden on auction
phase and optional auditing—are evaluated in Section 7.
5.3 Other issues
Manipulation by the auctioneer. Because the auctioneer can invite
parties, it has a fundamental ability to manipulate the auction. Nev-
ertheless, this ability is limited. First, although the auctioneer can
choose the bidders, perhaps excluding known high bidders to give
other bidders favored treatment, doing so is detectable: persistently
excluded bidders would notice the dearth of invitations. In the sta-
tus quo, by contrast, the auctioneer can mask such malfeasance, by
inviting bidders but not recognizing them as having won.
Second, the auctioneer can collude with a bidder (including a
fake one). As explained in Section 5.1, such a colluding bidder can
receive a right of ﬁrst refusal. Third, the auctioneer can use histori-
cal knowledge of bids (but not the current auction’s bids: those are
hidden during the commitment round) to bid between the highest
and second-highest bids. The effect is to bid up the price paid by
the winner, which is similar to the right of ﬁrst refusal in that, to be
competitive, a bidder’s price must now be higher than it otherwise
would have needed to be.
Impression delivery. VEX does not ensure that the auctioned im-
pression is actually delivered to the claimed user: the seller can
send the ad to a different user, or even a bot. However, based on
201the HTTP request that fetches the ad, the winning bidder can check
that the fetching user matches the original user information (§2.2),
in terms of browser, IP preﬁx, cookies, etc.—and from the adver-
tiser’s perspective, matches on these axes are likely “good enough”.
A seller could certainly spoof these ﬁelds (by imitating a legitimate
user’s browser, commandeering bots, etc.), but with the bidder’s
checks in place, a successful spoof now requires decidedly wrong
(borderline criminal) behavior.
Auction uniqueness. VEX does not prevent the auctioneer or
seller from auctioning the same impression multiple times to dis-
joint sets of bidders. However, that would also be an attack—a more
obvious one than above—on impression delivery, and the defrauded
bidder would notice that its ad was not fetched.
Auctioneer-seller collusion. VEX does not prevent the seller
and auctioneer from colluding to produce two conﬂicting outcome
records for the same auction, thereby convincing more than one bid-
der that they won that auction. But here again, only one bidder can
actually receive the impression, allowing the other to suspect mis-
behavior. While we cannot prove that conﬂicting outcome records
are the limit of auctioneer-seller collusion, we have been unable to
identify another attack enabled by such collusion.
6 VEX VARIANTS: VEX-NOCC AND VEX-CP
We now brieﬂy describe two variants of VEX. In the ﬁrst variant,
VEX-NOCC, the auctioneer performs the consistency check (Fig-
ure 5) the ﬁrst time that an auction is audited instead of during the
auction phase. VEX-NOCC dramatically reduces the auction’s de-
lay, while adding very little overhead to the audit phase. The reason
is that, in generating audit proofs, the auctioneer does much of the
work of the consistency check (speciﬁcally, line 14 in Figure 6 does
most of the work of line 4 in Figure 5). The disadvantage of this ap-
proach is that auctions can no longer be labeled as auditable (or not)
during the online auction phase. This in turn means that auctioneers
might have more leeway to render auctions non-auditable.
The second variant, VEX-CP, retains the online consistency
check but accelerates it, by paying additional storage costs. In
VEX-CP, the auctioneer pre-computes hash chains of maximum
length, storing some of the intermediate nodes as checkpoints; we
ﬁnd that having roughly 20 checkpoints leads to satisfactory perfor-
mance while introducing minor storage overhead (§7.5). The auc-
tioneer retains the seeds used to generate these chains and supplies
them to bidders, as part of the ﬁrst message (with the id, impression
information, etc.; see Figure 4). To issue a commitment, a bidder
now generates a precommitment from the seed, appends a random
bit string as a salt (which hides the committed value even from the
auctioneer), and hashes these to produce the commitment. Bidders
decommit by revealing the salt rather than the seed.
At that point, the auctioneer can perform the consistency check
quickly, by traversing the chain from the closest checkpoint, rather
than from the root. Note that these checkpoints also accelerate proof
generation, leading to performance beneﬁts during the audit phase.
VEX-CP requires minor changes to VerifyProof (Figure 2), Veri-
fyEqProof (Figure 8), and VerifyAuditProofs (Figure 7). The mod-
iﬁed VerifyProof is depicted in Figure 9; it handles salted commit-
ments. The modiﬁed VerifyEqProof and VerifyAuditProofs handle
an extra parameter, salt. In addition, auditors must obtain from the
auctioneer the list of all of the salts used in a particular auction.
With VEX-CP, the auctioneer can sometimes re-use chains and