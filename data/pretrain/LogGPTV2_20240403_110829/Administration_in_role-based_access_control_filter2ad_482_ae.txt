reversing operation of changeParameters(c((cid:126)s1), c((cid:126)s2)) is
changeParameters(c((cid:126)s2), c((cid:126)s1)). The operations that do not
have a reversing operation are destructive in nature, e.g.,
deleting an object, or revoke a permission (or role) from a
role (or a user).
• Requirement 5. Predictability
In the speciﬁcation of UARBACP , the effects of the adminis-
trative operations are straightforward and simple. There does
not exist any surprising side-effects. For example, the effects
of grant (revoke) operations are simply adding (removing) a
relationship to (from) the corresponding relations.
• Requirement 6. Using RBAC to administer RBAC
In UARBACP , users and roles are treated in the same way as
other objects. And permissions about users and roles are ad-
ministered in the same way as permissions about other kinds
of objects. UARBACP does not introduce any additional ob-
jects and relations for administration. The administration is
uniﬁed into the RBAC system.
We summarize the comparisons among the three existing mod-
els and the UARBAC family with respect to the six design require-
ments in Figure 5. Note that Oracle RBAC satisﬁes four require-
ments.
It uses enumerating objects to deﬁne administrative do-
mains, and thus does not scale well to large number of roles. It also
imposes two policy decisions in administering RBAC. The ﬁrst is
that anyone can assign a role x to a user or a role, as long as one
has admin privilege over x. This leads to potential of DoS attacks
and doesn’t enforce least privilege in a large enterprise. The second
policy decision is that a user must be a member of a role (thus can
user the role) before one can administer the role. This decreases
the ﬂexibility in enforcing Separation of Duty principles (e.g., one
may want to separate the privilege of administering a role from that
of using a role). In UARBAC, this can be achieved by not giving
an administer user the empower permission over herself. The main
innovations of UARBAC are approaches to address the above limi-
tations of Oracle RBAC, including an approach for deﬁning admin-
istrative domains that is both ﬂexible and scalable, a way to handle
all objects uniformly, and the extra control on granting. Some de-
sign decisions we have made in UARBAC can also be viewed as
policy decisions. For example, the “grant” permission over a role
controls both granting and revoking of the role. (This is the same
as the Oracle design.) These decisions are guided by the six design
requirements we have identiﬁed.
6. OTHER RELATED WORK
The papers that are most closely related to our paper are the
ARBAC series [21, 22, 23, 25, 19], the work by Crampton and
Loizou [4, 5, 3], and the RBAC system in Oracle. They were dis-
cussed in detailed in Sections 3 and 4 and comparison of our ap-
proach with them is given in Section 5.4.
In the rest of this section, we brieﬂy discuss other papers in the
RBAC literature that are related to our work. The notion of roles
was ﬁrst introduced to access control in the context of database se-
curity [27, 2] as a means to group permissions together to ease se-
curity administration. The term “Role Based Access Control” was
Requirements
Decentralized
administration
& scalability
Policy neutral
Equivalence
Reversibility
Predictability
Economy of
mechanism
ARBAC, SARBAC
Partially.
Not ﬂexible to support disparate
role hierarchies.
Introduce central administered re-
lations.
No.
Administrative domains based on
the role hierarchy, with ﬁxed pol-
icy.
No
No
ARBAC (Partially): Understand-
able but complicated.
SARBAC (No): Have surprising
side-effects.
No.
Introduce additional relations and
objects.
Oracle
Partially.
Not scalable to large
number of roles.
Partially.
No control on empowering a user
or a role. Must be member of a role
to admin a role.
Yes
Yes
Yes
UARBACP
Yes.
Flexible to support disparate role
hierarchies. No centrally adminis-
tered relations. Administrative do-
main based on object attributes.
Yes.
Deﬁne domains based on enumer-
ating objects and application-level
attributes.
Yes
Yes
Yes
Yes.
Same mechanism for managing
system privileges and roles.
Yes.
Treat users and roles in the same
ways as other objects.
Figure 5: Comparisons among the three existing models and UARBACP
ﬁrst coined by Ferraiolo et al. [8, 7]. Sandhu et al. [24] developed
the inﬂuential RBAC96 family of RBAC models. Nyanchama and
Osborn developed the role-graph model [18]. Recently, a standard
for RBAC has been proposed and adopted as an ANSI Standard [1,
9]. Parameterized roles have been used before in [10, 13]; however,
they have not been used in the context of RBAC administration be-
fore.
Using RBAC in enterprise setting and their administration have
been studied in [6, 12, 11, 14, 26], these papers report invaluable
experiences from deploying large RBAC systems in practice, even
though they do not provide formal models for RBAC administra-
tion. Our model is largely inspired by these experiences. RBAC
administration is also studied in [28, 29, 30]. Our work differs
from them in that we adopt a principled based approach and decou-
ple administrative domains from the role hierarchies.
7. CONCLUSIONS
We propose a principled approach in designing and analyzing
administrative models for RBAC. We have identiﬁed six design re-
quirements for administrative models of RBAC. These design re-
quirements are motivated by three principles for designing security
mechanisms: (1) ﬂexibility and scalability, (2) psychological ac-
ceptability, and (3) economy of mechanism. We have also used
these requirements to analyze several approaches to RBAC admin-
istration, including ARBAC97, SARBAC, and the RBAC system
in the Oracle DBMS. Based on these requirements and the lessons
learned in analyzing existing approaches, we design UARBAC, a
new family of administrative model for RBAC that has signiﬁcant
advantages over existing models.
Acknowledgement
This work is supported by NSF CNS-0448204 (CAREER: Access
Control Policy Veriﬁcation Through Security Analysis And Insider
Threat Assessment), and by sponsors of CERIAS. We thank Ma-
hesh V. Tripunitara for helpful discussions. We also thank the
anonymous reviewers for their helpful comments.
8. REFERENCES
[1] ANSI. American national standard for information
technology – role based access control. ANSI INCITS
359-2004, Feb. 2004.
[2] R. W. Baldwin. Naming and grouping privileges to simplify
security management in large databases. In Proceedings of
the IEEE Symposium on Research in Security and Privacy,
pages 116–132, May 1990.
[3] J. Crampton. Understanding and developing role-based
administrative models. In Proc. ACM Conference on
Computer and Communications Security (CCS), pages
158–167, Nov. 2005.
[4] J. Crampton and G. Loizou. Administrative scope and role
hierarchy operations. In Proceedings of Seventh ACM
Symposium on Access Control Models and Technologies
(SACMAT 2002), pages 145–154, June 2002.
[5] J. Crampton and G. Loizou. Administrative scope: A
foundation for role-based administrative models. ACM
Transactions on Information and System Security,
6(2):201–231, May 2003.
[6] D. F. Ferraiolo, R. Chandramouli, G.-J. Ahn, and S. Gavrila.
The role control center: Features and case studies. In
Proceedings of the Eighth ACM Symposium on Access
Control Models and Technologies, June 2003.
[7] D. F. Ferraiolo, J. A. Cuigini, and D. R. Kuhn. Role-based
access control (RBAC): Features and motivations. In
Proceedings of the 11th Annual Computer Security
Applications Conference (ACSAC’95), Dec. 1995.
[8] D. F. Ferraiolo and D. R. Kuhn. Role-based access control.
In Proceedings of the 15th National Information Systems
Security Conference, 1992.
[9] D. F. Ferraiolo, R. S. Sandhu, S. Gavrila, D. R. Kuhn, and
R. Chandramouli. Proposed NIST standard for role-based
access control. ACM Transactions on Information and
Systems Security, 4(3):224–274, Aug. 2001.
[10] L. Giuri and P. Iglio. Role templates for content-based access
control. In Proceedings of the Second ACM Workshop on
Role-Based Access Control (RBAC’97), pages 153–159, Nov.
1997.
[11] A. Kern. Advanced features for enterprise-wide role-based
access control. In Proceedings of the 18th Annual Computer
Security Applications Conference, pages 333–343, Dec.
2002.
[12] A. Kern, A. Schaad, and J. Moffett. An administration
concept for the enterprise role-based access control model. In
Proceedings of the Eighth ACM Symposium on Access
Control Models and Technologies (SACMAT 2003), pages
3–11, June 2003.
[13] N. Li, J. C. Mitchell, and W. H. Winsborough. Design of a
role-based trust management framework. In Proceedings of
the 2002 IEEE Symposium on Security and Privacy, pages
114–130. IEEE Computer Society Press, May 2002.
[14] A. D. Marshall. A ﬁnancial institution’s legacy mainframe
access control system in light of the proposed NIST RBAC
standard. In Proceedings of the 18th Annual Computer
Security Applications Conference (ACSAC 2002), pages
382–390, 2002.
[15] J. D. Moffett. Control principles and role hierarchies. In
Proceedings of the Third ACM Workshop on Role-Based
Access Control (RBAC 1998), Oct. 1998.
[16] J. D. Moffett and E. C. Lupu. The uses of role hierarchies in
access control. In Proceedings of the Fourth ACM Workshop
on Role-Based Access Control (RBAC 1999), Oct. 1999.
[17] NSA. Security enhanced linux. http://www.nsa.gov/selinux/.
[18] M. Nyanchama and S. Osborn. The role graph model and
conﬂict of interest. ACM Transactions on Information and
System Security, 2(1):3–33, Feb. 1999.
[19] S. Oh and R. S. Sandhu. A model for role admininstration
using organization structure. In Proceedings of the Seventh
ACM Symposium on Access Control Models and
Technologies (SACMAT 2002), June 2002.
[20] J. H. Saltzer and M. D. Schroeder. The protection of
information in computer systems. Proceedings of the IEEE,
63(9):1278–1308, September 1975.
[21] R. S. Sandhu and V. Bhamidipati. Role-based administration
of user-role assignment: The URA97 model and its Oracle
implementation. Journal of Computer Security, 7, 1999.
[22] R. S. Sandhu, V. Bhamidipati, E. Coyne, S. Ganta, and
C. Youman. The ARBAC97 model for role-based
administration of roles: preliminary description and outline.
In Proceedings of the Second ACM workshop on Role-based
access control (RBAC 1997), pages 41–50, Nov. 1997.
[23] R. S. Sandhu, V. Bhamidipati, and Q. Munawer. The
ARBAC97 model for role-based aministration of roles. ACM
Transactions on Information and Systems Security,
2(1):105–135, Feb. 1999.
[24] R. S. Sandhu, E. J. Coyne, H. L. Feinstein, and C. E.
Youman. Role-based access control models. IEEE Computer,
29(2):38–47, February 1996.
[25] R. S. Sandhu and Q. Munawer. The ARBAC99 model for
administration of roles. In Proceedings of the 18th Annual
Computer Security Applications Conference, pages 229–238,
Dec. 1999.
[26] A. Schaad, J. Moffett, and J. Jacob. The role-based access
control system of a European bank: A case study and
discussion. In Proceedings of the Sixth ACM Symposium on
Access Control Models and Technologies, pages 3–9. ACM
Press, 2001.
[27] T. C. Ting. A user-role based data security approach. In
C. Landwehr, editor, Database Security: Status and
Prospects. Results of the IFIP WG 11.3 Initial Meeting,
pages 187–208. North-Holland, 1988.
[28] H. Wang and S. L. Osborn. An administrative model for role
graphs. In Proceedings of the 17th Annual IFIP WG11.3
Working Conference on Database Security, Aug. 2003.
[29] H. F. Wedde and M. Lischka. Cooperative role-based
administration. In Proceedings of the Eighth ACM
Symposium on Access control models and technologies
(SACMAT 2003), pages 21–32. ACM Press, June 2003.
[30] H. F. Wedde and M. Lischka. Modular authorization and
administration. ACM Transactions on Information and
System Security (TISSEC), 7(3):363–391, Aug. 2004.