## PostgreSQL 快速给指定表每个字段创建索引 - 2 (近乎完美)  
### 作者  
digoal  
### 日期  
2018-09-03  
### 标签  
PostgreSQL , 索引 , 所有字段 , 并行创建单个索引 , max_parallel_maintenance_workers , 异步调用 , dblink , 并行创建多个索引 , adhoc查询    
----  
## 背景  
PostgreSQL 支持丰富的类型、索引，统计信息。  
不同的应用场合，数据类型，可使用不同的索引接口（btree,hash,gin,gist,spgist,brin,bloom等）达到不同的效果。  
https://www.postgresql.org/docs/11/static/datatype.html  
https://www.postgresql.org/docs/11/static/functions.html  
https://www.postgresql.org/docs/11/static/indexes.html  
在某些业务场合，业务上可能需要对任意字段组合进行查询，可以使用gin或rum 联合索引接口（把需要搜索的字段都塞到一个索引里面，内部使用bitmap scan），但是这些索引创建速度比较慢，并且索引最多只能放32列（硬编码限制 src/include/pg_config_manual.h INDEX_MAX_KEYS）。  
所以另一种选择是使用单列独立索引，当单列独立索引过滤性不够好时，数据库自动会选择多个索引做bitmap 合并扫描.  
[《PostgreSQL bitmapAnd, bitmapOr, bitmap index scan, bitmap heap scan》](../201702/20170221_02.md)    
那么每一列应该使用什么索引接口？  
除了取决于数据类型，还取决于数据的分布，柱状图。  
[《PostgreSQL 9种索引的原理和应用场景》](../201706/20170627_01.md)    
[《PostgreSQL SQL自动优化案例 - 极简，自动推荐索引》](../201801/20180111_02.md)    
[《自动选择正确索引访问接口(btree,hash,gin,gist,sp-gist,brin,bitmap...)的方法》](../201706/20170617_01.md)    
## 数据类型与索引类型匹配的通用选择方法  
https://www.postgresql.org/docs/11/static/catalog-pg-type.html#CATALOG-TYPCATEGORY-TABLE  
### 大类选择  
Code    |Category  | 推荐 索引接口  
---|---|---  
A       |Array types     | gin  
B       |Boolean types   | btree   , 不建议加索引，选择性不好   
C       |Composite types  | -     
D       |Date/time types  | btree  
E       |Enum types | -   
G       |Geometric types   | gist  
I       |Network address types  | gist, spgist  
N       |Numeric types    | btree  
P       |Pseudo-types  | -   
R       |Range types   |  gist, spgist  
S       |String types   |  btree : varchar text_pattern_ops , bpchar bpchar_pattern_ops ;  模糊查询(pg_trgm) gin : varchar   gin_trgm_ops  
T       |Timespan types  | btree    
U       |User-defined types  | -   
V       |Bit-string types  | -  
X       |unknown type   | -  
### 小类选择  
```  
select typcategory , typname from pg_type order by 1,2;  
```  
Code    |Category  | 推荐 索引接口  
---|---|---  
 U           | aclitem | -  
 U           | box2d | -  
 U           | box2df | -  
 U           | box3d | -  
 U           | bytea | -  
 U           | cid | -  
 U           | gbtreekey16 | -  
 U           | gbtreekey32 | -  
 U           | gbtreekey4 | -  
 U           | gbtreekey8 | -  
 U           | gbtreekey_var | -  
 U           | geography  |   gist  
 U           | geometry    |  gist  
 U           | gidx | -  
 U           | gtrgm | -  
 U           | gtsvector    | -  
 U           | json   |   gin    
 U           | jsonb   |  gin  ,  OPS : jsonb_path_ops  
 U           | macaddr | -  
 U           | macaddr8 | -  
 U           | pg_lsn | -  
 U           | pgis_abs | -  
 U           | raster  | -  
 U           | refcursor | -  
 U           | smgr | -  
 U           | spheroid | -  
 U           | tid         | -  
 U           | tsquery  |  gin, rum  
 U           | tsvector |  gin, rum  
 U           | txid_snapshot | -  
 U           | uuid   |   hash   
 U           | xid    |   btree    
 U           | xml | -   
## 依据以上规则，生成create index的SQL  
写一个UDF函数，将以上规格写到UDF里面，自动生成每一列的索引SQL，自动使用合适的索引方法，OPS。  
```  
create or replace function gen_whole_index_sqls(  
  v_nsp name,   
  v_tbl name,   
  v_tbs name   
) returns text[] as $$  
declare  
  v_attname name;  
  v_typid oid;  
  v_typca "char";  
  v_typname name;  
  res text[];  
  idxprefix text := to_char(clock_timestamp(),'yyyymmddhh24miss');  
  idxsuffix int := 1;  
  sql text := 'create index IF NOT EXISTS i'||idxprefix||'_%s on '||quote_ident(v_nsp)||'.'||quote_ident(v_tbl)||' using %s (%I %s) tablespace '||quote_ident(v_tbs)||' ;';  
begin   
  for v_attname,v_typid in select attname,atttypid from pg_attribute where not attisdropped and attnum >= 1 and attrelid=(quote_ident(v_nsp)||'.'||quote_ident(v_tbl))::regclass  
  loop  
  select typcategory,typname into v_typca,v_typname from pg_type where oid=v_typid;  
  case v_typca  
  when 'A' then  
    res := array_append(res, format(sql,idxsuffix,'gin',v_attname,''));  
  when 'D', 'N', 'T' then  
    res := array_append(res, format(sql,idxsuffix,'btree',v_attname,''));  
  when 'S' then  
    if v_typname='text' or v_typname='varchar' then  
      res := array_append(res, format(sql,idxsuffix,'btree',v_attname,'text_pattern_ops'));  
    elsif v_typname='bpchar' then  
      res := array_append(res, format(sql,idxsuffix,'btree',v_attname,'bpchar_pattern_ops'));  
    else  
      res := array_append(res, format(sql,idxsuffix,'btree',v_attname,''));  
    end if;  
    -- 如果字符串要支持模糊查询，使用gin索引  
    -- if v_typname='text' or v_typname='varchar' then  
    --   res := array_append(res, format(sql,idxsuffix,'gin',v_attname,'gin_trgm_ops'));  
    -- else   
    --   res := array_append(res, format(sql,idxsuffix,'btree',v_attname,''));  
    -- end if;   
  when 'G' then  
    if v_typname not in ('line') then  
      res := array_append(res, format(sql,idxsuffix,'gist',v_attname,''));  
    else  
      continue;  
    end if;  
  when 'I', 'R' then  
    res := array_append(res, format(sql,idxsuffix,'gist',v_attname,''));  
    -- 可选spgist  
    -- res := array_append(res, format(sql,idxsuffix,'spgist',v_attname,''));  
  when 'U' then  
    case v_typname   
    when 'geography', 'geometry' then  
      res := array_append(res, format(sql,idxsuffix,'gist',v_attname,''));  
    when 'jsonb' then  
      res := array_append(res, format(sql,idxsuffix,'gin',v_attname,'jsonb_path_ops'));  
      -- 可选默认gin ops   
      -- https://www.postgresql.org/docs/11/static/datatype-json.html#JSON-INDEXING   
      -- res := array_append(res, format(sql,idxsuffix,'gin',v_attname,''));  
    when 'tsvector' then  
      res := array_append(res, format(sql,idxsuffix,'gin',v_attname,''));  
    when 'uuid', 'xid' then  
      res := array_append(res, format(sql,idxsuffix,'hash',v_attname,''));  
    else  
      continue;  
    end case;  
  else  
    continue;  
  end case;  
  idxsuffix := idxsuffix+1;  
end loop;  
return res;  
end;  
$$ language plpgsql strict;  
```  
## 测试  
1、创建测试表，包含各种数据类型  
```  
create table "你好t12" (  
c1 int,  
"-_c2&a-b" int8,  
c3 text,  
c4 varchar(1000),  
c5 char(1000),  
c6 "char",  
c7 timestamp,  
c8 interval,  
c9 int[],  
c10 tsvector,  
c11 tsquery,  
c12 time,  
c13 date,  
c14 numeric,  
c15 float,  
c16 point,  
c17 box,  
c18 line,  
c19 circle,  
c20 inet,  
c21 cidr,  
c22 int8range,  
c23 tsrange,  
c24 geometry,  
c25 geography,  
c26 uuid,  
c27 xid,  
c28 json,  
c29 jsonb  
);  
```  
2、使用本文提供的UDF，生成CREATE INDEX SQL  
```  
select * from  unnest(gen_whole_index_sqls('public','你好t12','pg_default'));  
                                                            unnest                                                              
------------------------------------------------------------------------------------------------------------------------------  
 create index IF NOT EXISTS i20180903171836_1 on public."你好t12" using btree (c1 ) tablespace pg_default ;  
 create index IF NOT EXISTS i20180903171836_2 on public."你好t12" using btree ("-_c2&a-b" ) tablespace pg_default ;  
 create index IF NOT EXISTS i20180903171836_3 on public."你好t12" using btree (c3 text_pattern_ops) tablespace pg_default ;  
 create index IF NOT EXISTS i20180903171836_4 on public."你好t12" using btree (c4 text_pattern_ops) tablespace pg_default ;  
 create index IF NOT EXISTS i20180903171836_5 on public."你好t12" using btree (c5 bpchar_pattern_ops) tablespace pg_default ;  
 create index IF NOT EXISTS i20180903171836_6 on public."你好t12" using btree (c6 ) tablespace pg_default ;  
 create index IF NOT EXISTS i20180903171836_7 on public."你好t12" using btree (c7 ) tablespace pg_default ;  
 create index IF NOT EXISTS i20180903171836_8 on public."你好t12" using btree (c8 ) tablespace pg_default ;  
 create index IF NOT EXISTS i20180903171836_9 on public."你好t12" using gin (c9 ) tablespace pg_default ;  
 create index IF NOT EXISTS i20180903171836_10 on public."你好t12" using gin (c10 ) tablespace pg_default ;  
 create index IF NOT EXISTS i20180903171836_11 on public."你好t12" using btree (c12 ) tablespace pg_default ;  
 create index IF NOT EXISTS i20180903171836_12 on public."你好t12" using btree (c13 ) tablespace pg_default ;  
 create index IF NOT EXISTS i20180903171836_13 on public."你好t12" using btree (c14 ) tablespace pg_default ;  
 create index IF NOT EXISTS i20180903171836_14 on public."你好t12" using btree (c15 ) tablespace pg_default ;  
 create index IF NOT EXISTS i20180903171836_15 on public."你好t12" using gist (c16 ) tablespace pg_default ;  
 create index IF NOT EXISTS i20180903171836_16 on public."你好t12" using gist (c17 ) tablespace pg_default ;  
 create index IF NOT EXISTS i20180903171836_17 on public."你好t12" using gist (c19 ) tablespace pg_default ;  
 create index IF NOT EXISTS i20180903171836_18 on public."你好t12" using gist (c20 ) tablespace pg_default ;  
 create index IF NOT EXISTS i20180903171836_19 on public."你好t12" using gist (c21 ) tablespace pg_default ;  
 create index IF NOT EXISTS i20180903171836_20 on public."你好t12" using gist (c22 ) tablespace pg_default ;  
 create index IF NOT EXISTS i20180903171836_21 on public."你好t12" using gist (c23 ) tablespace pg_default ;  