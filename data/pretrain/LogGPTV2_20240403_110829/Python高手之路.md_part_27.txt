---
## Page 203
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
方法并没有绑定到任何特定的类上。这个方法是通用的，并且任何类都可以实现它们。
实例。
鼓的一个实例；accessory（附件)，它是 stick（鼓槌）或者brushes（刷子）的一个
法的不同版本从而模拟演奏军鼓。
是通知对象系统，这个方法是个泛型方法，可以通过各种参数调用。现在我们来实现这个方
我们定义一个play方法接收两个参数，并返回声音（以字符串形式）。
196
让我们来试试。
在这个阶段，应该可以看出这一系统和Python（或类似）的对象系统的第一个主要区别：
现在代码中已经定义了具体方法。他们接收两个参数：instrument（乐器），它是军
这只定义了一个泛型方法：它并不依附于任何类，所以还不能被调用。在这个阶段，只
Type HELP for debugger help, or (SB-EXT:EXIT) to exit from SBCL.
"SHHHH!"
"POC!"
#:
debugger
* (play (make-instance 'snare-drum) (make-instance 'brushes))
(defmethod play ((instrument snare-drum)
(defmethod play ((instrument snare-drum)
(defgeneric play (instrument accessory)
when called with arguments
There is no applicable method for the generic function
"SHHHH!")
"POC!")
#
第14章少即是多
(# #).
invoked On a SIMPLE-ERROR in thread
本电子书仅限学习交流使用，请勿用于商业用途
(accessory brushes))
(accessory stick))
---
## Page 204
熊猫爱中国www.xiongmaoi.com
熊猫爱
类的方法，在本例中就是那个会返回"BIIING!"的方法。
实例，即最精确的方法总能确保被调用。（call-next-method)函数用来调用最接近的父
法会返回声音BIIING！，不管用哪个附件实例去敲cymbal（饶），除非是用brushes
实现是通过（call-next-method）。
们将函数调用分发给正确的函数。如果以对象系统不知道的实例调用 play，会抛出错误。
国
# #) [fast-method]
继承同样也被支持，与Python 中的 super（）类似的（更为强大且不那么容易出错的）
如你所见，调用哪个函数取决于参数的类—对象系统根据传递哪个类作为参数，为我
但如果你真的非常好奇CLOS 提供的众多功能，建议你读一下 Jeff Dalton 作为发起人撰
注意，在 CLOS 中可以通过 eql specializer 为类的某一个特定实例定义专门的方法。
"SSHHHH!BIIING!"
"BIIING!"
( 
(defmethod play ((c cymbal) (b brushes))
(defmethod play ((c cymbal) (a accessory))
(defclass brushes (accessory) ())
(defclass stick (accessory) ())
(defclass accessory () ())
(defclass cymbal () ())
(defclass snare-drum (): ())
((:METHOD NO-APPLICABLE-METHOD (T)) #
"BIIING!")
1: [ABORT] Exit debugger, returning to top level.
O: [RETRY] Retry calling the generic function.
本电子书仅限学习交流使用，请勿用于商业用途
14.1单分发器
197
---
## Page 205
熊猫爱中国www.xiongmaoi.com
熊猫爱中
法识别这个附件，则再次抛出 NotImplementedError。
发此函数的特定版本。这个函数会检查传入了哪个附件类型，并返回适当的声音。如果它无
表明默认情况下不知道该做什么。接下来可以为特定乐器一
中作为 functools 模块的一部分。下面是前面的Lisp 程序的一个粗略的对应实现：
写的 CLOS 简明指南（http://www.aiai.ed.ac.uk/~jeff/clos-guide.html)。
198
Python 通过 singledispatch 实现了这个工作流的一个简单版本，它将在 Python 3.4
这里定义了4个类，以及一个基本的 play 函数，它会抛出 NotImplementedError,
Traceback (most recent call last):
>>>play(Cymbal(),Brushes())
>>>play(SnareDrum(),Brushes())
>>>play(SnareDrum(),Stick())
如果运行这个程序，它应该像下面这样工作：
@play.register (SnareDrum)
def play(instrument, accessory) :
@functools.singledispatch
'SHHHH!'
'POC!'
class Brushes(object) : pass
class Stick(object): pass
class Cymbal(object): pass
class SnareDrum(object): pass
import functools
File "/home/jd/Source/cpython/Lib/functools.py", line 562, in wrapper
File "", line 1,in 
第14章少即是多
return dispatch(args[0].class)(*args,**kw)
raise NotImplementedError("Cannot play these")
if isinstance(accessory, Stick) :
raise NotImplementedError("Cannot play these")
if isinstance(accessory, Brushes):
return"SHHHH!"
return "poc!"
本电子书仅限学习交流使用，请勿用于商业用途
—SnareDrum（军鼓）—开
---
## Page 206
熊猫爱中国www.xiongmaoi.com
with-*。Python 通过使用实现了上下文管理协议的对象，提供了类似的机制。
14.2
方向努力，但它仍然缺少一些CLOS 所能提供的开箱即用的高级功能。
有Python 中的 super（）函数。只能用一些技巧绕过这个限制。
jsp?thread=101605）的短文对此进行了解释。
Rossum在几年前写了一篇名为multimethod（http://www.artima.com/weblogs/viewpost.
singledispatch 是有原因的：因为它知道如何根据第一个参数进行分发。Guido van
类型分发的多分发器，不只是第一个参数。遗憾的是，Python 中的分发器被命名为
Python 2.6到 Python 3.3 中提供了(https://pypi.python.org/pypi/singledispatch/)。
例，则基函数会被调用。
对于object 类，总是会运行函数的最先定义的版本。所以，如果传入的是未注册的乐器实
Python 2.6 中引入的 with 语句，可能会让过去的Lisp 程序员想起以前经常用到的宏
open 函数返回的对象就支持这个协议，这就是经常能看到下面这样的代码的原因：
总结：泛型函数是增强对象系统的有力方式，尽管我很高兴地看到 Python 在朝着这个
此外，没办法直接调用父类的函数——既没有Lisp 中的(call-next-method)，也没
如果急切地想试试它的话，singledispatch 函数通过 Python Package Index已经在
singledispatch 模块检查传入的第一个参数的类，并调用 play函数的适当版本。
NotImplementedError: Cannot play these
Traceback (most recent calllast):
>>>play(SnareDrum(),Cymbal())
NotImplementedError: Cannot play these
raise NotImplementedError("Cannot play these")
File "/home/jd/sd.py", line 18, in
File "/home/jd/Source/cpython/Lib/functools.py", line 562, in wrapper
File"",line1,in
File "/home/jd/sd.py", line 10, in play
raise NotImplementedError("Cannot play these")
上下文管理器
本电子书仅限学习交流使用，请勿用于商业用途
14.2上下文管理器
199
---
## Page 207
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
示例14.2contextlib.contextmanager的简单用法
如示例14.2所示。
close 方法就是方法B。显然，close 方法总是应该在实例化文件对象之后进行调用。
打开文件并在内部分配一个文件描述符的构造函数便是方法A。释放对应文件描述符的
就比较合适：
示例14.1上下文对象的简单实现
别在with 块开始和结束时被调用。
200
_exit_方法，从而简化了这一机制的实现。可以使用它实现自己的简单上下文管理器，
这里希望调用方法B必须总是在调用方法A之后。open 函数很好地阐明了这一模式，
你想什么时候使用上下文管理器呢？如果对象符合下面的模式，则使用上下文管理协议
一个上下文对象的简单实现如示例14.1所示。
 open 返回的对象有两个方法，
def MyContext():
@contextlib.contextmanager
import contextlib
这段代码什么都不做，但却是合法的。
class MyContext(object):
with open("myfile", "r") as f:
（3）调用方法B。
（2）执行一段代码；
（1）调用方法A;
line = f.readline()
yield
第14章少即是多
def _exit_ (self, exc_type, exc_value, traceback):
pass
pass
本电子书仅限学习交流使用，请勿用于商业用途
_enter
和
---
## Page 208
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
用户只需请求一个使用了名祖（eponym）函数的publisher 并使用它。
示例14.3在流水线对象上使用上下文管理器
14.3所示的代码很容易实现。
全发送到管道中。
任意多次）。
对象，另一方面将对象分发到不同的地方。发送数据的步骤如下。
（pipeline）架构使用过这种设计模式。简单来说，一个流水线就是一个管道，一方面传入
with pipeline.publisher() as publisher:
pipeline=Pipeline()
现在，当用户在使用流水线发布某些数据时，他们无需使用_publish 或者_flush。
class Pipeline(object):
import contextlib
最好能让API提供一个上下文管理器对象，去阻止 API的用户犯这种错误。通过示例
要注意的是，
（1）调用流水线的 publish（objects)方法，并传入你的对象作为参数（可以调用
例如，我曾经在Ceilometer（https://launchpad.net/ceilometer）中对我们所建立的流水线
（2）一旦完成，则调用flush（）方法以表明当前的发布已经完成。
def publisher(self):
@contextlib.contextmanager
def_flush(self):
finally:
try:
pass
#Imagine flushing code here
pass
# Imagine publication code here
self._flush()
。程序员很容易忘记flush（）的调用，这将引起程序毫无征兆地中断。
，如果不调用flush（）方法，对象将不会被发送到管道中，或者至少不完
本电子书仅限学习交流使用，请勿用于商业用途
14.2上下文管理器
201
---
## Page 209
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
示例14.5通过一条with语句同时打开两个文件
示例14.4同时打开两个文件
制它们的内容，如示例14.4所示。
用上下文管理器。
202第14章少即是多
在某些情况下，同时使用多个上下文管理器是很有用的。例如，同时打开两个文件以复
with open("filel", "r") as source, open("file2", "w") as destination:
1nos se (nI, 'Iatt)uado ua1m
当提供一个这样的API时，就不会遇到用户错误。当看到符合的设计模式时，应该尽量
记住with语句可以支持多个参数，所以应该像示例14.5这样写。
publisher([1, 2, 3, 4])
destination.write(source.read())
withopen("file2","w")as destination:
 destination.write(source.read())
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 210
熊猫爱中国www.xiongmaoi.com
本书英文原版配套网址是 https:/julien.danjou.info/books/the-hacker-guide-to-python。
·专家访谈录：书中包含多篇对不同领域专家的访谈，让读者可以从开源社区和Python社区的知名黑客那里获
·语言的内部机制：书中阐述了Python语言的一些内部机制，帮助读者更好地理解如何开发更高效的代码，并
分类建议：计算机／程序设计／Python
●解决问题：书中介绍了测试、移植、扩展Python应用程序和库等方面的实际问题并提供了相应的解决方案，
·最佳实践：书中给出了构建应用程序时可参考的方法和建议，帮助读者充分利用Python的特性，构建不会过
从本书中读者将学到什么
的 Python 应用程序。
探索最佳实践时仍需要完全靠自己。本书则不同，介绍了如何利用Python有效地解决问题，以及如何构建良好
关于 Python的书都会教读者这门语言的基础知识，但是掌握了这些基础知识后，读者在设计自己的应用程序和
Python是一门优美的语言，它快速、灵活且内置了丰富的标准库，已经用于越来越多的不同领域。通常大多数
人民邮电出版社网址：www.ptpress.com.cn
封面设计：董志桢
获得对这门语言内部工作原理更深刻的洞察力。
时的应用程序。如果读者正在做一些东西，可以立刻应用本书中提及的技术去改进自己当前的工作。
Python
得意见、建议和技巧。
高手之路
本电子书仅限学习交流使用，请勿用于商业用途
ISBN978-7-115-38713-4
定价：49.00元
---