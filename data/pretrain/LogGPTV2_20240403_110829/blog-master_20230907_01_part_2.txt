query mode: prepared  
number of clients: 10  
number of threads: 10  
duration: 120 s  
number of transactions actually processed: 13281  
latency average = 90.357 ms  
latency stddev = 10.483 ms  
initial connection time = 22.151 ms  
tps = 110.661414 (without initial connection time)  
statement latencies in milliseconds:  
         0.001  \set tid1 random(1,1000)   
         0.000  \set tid2 random(1,1000)   
        90.621  select art_id,ts from tbl_art_tag where tid in(:tid1,:tid2) order by ts desc limit 100;  
```  
12、思考一下, 如果要搜索在同一篇文章中有多个符合条件的标签的文章, 怎么写SQL?  
```  
postgres=# explain analyze select art_id,max(ts) as ts,count(*) from tbl_art_tag where tid in ( 490,500 ) group by 1 having count(*)>=2 order by ts desc limit 100;   
                                                                         QUERY PLAN                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------  
 Limit  (cost=18477.15..18477.40 rows=100 width=20) (actual time=153.256..153.263 rows=100 loops=1)  
   ->  Sort  (cost=18477.15..18486.66 rows=3807 width=20) (actual time=153.244..153.248 rows=100 loops=1)  
         Sort Key: (max(ts)) DESC  
         Sort Method: top-N heapsort  Memory: 38kB  
         ->  HashAggregate  (cost=18188.87..18331.65 rows=3807 width=20) (actual time=152.051..152.890 rows=5308 loops=1)  
               Group Key: art_id  
               Filter: (count(*) >= 2)  
               Batches: 1  Memory Usage: 1681kB  
               Rows Removed by Filter: 6786  
               ->  Bitmap Heap Scan on tbl_art_tag  (cost=229.93..18039.59 rows=19904 width=12) (actual time=13.819..143.743 rows=20040 loops=1)  
                     Recheck Cond: (tid = ANY ('{490,500}'::integer[]))  
                     Heap Blocks: exact=16804  
                     ->  Bitmap Index Scan on tbl_art_tag_tid_ts_idx  (cost=0.00..224.95 rows=19904 width=0) (actual time=10.269..10.269 rows=20040 loops=1)  
                           Index Cond: (tid = ANY ('{490,500}'::integer[]))  
 Planning Time: 0.346 ms  
 Execution Time: 153.743 ms  
(16 rows)  
```  
13、性能测试  
```  
vi t222.sql  
\set tid1 random(1,1000)   
\set tid2 random(1,1000)   
select art_id,max(ts) as ts,count(*) from tbl_art_tag where tid in ( :tid1, :tid2 ) group by 1 having count(*)>=2 order by ts desc limit 100;   
```  
```  
pgbench -M prepared -n -r -P 1 -f ./t222.sql -c 10 -j 10 -T 120  
transaction type: ./t222.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 10  
number of threads: 10  
duration: 120 s  
number of transactions actually processed: 11918  
latency average = 100.702 ms  
latency stddev = 12.866 ms  
initial connection time = 21.952 ms  
tps = 99.297985 (without initial connection time)  
statement latencies in milliseconds:  
         0.001  \set tid1 random(1,1000)   
         0.000  \set tid2 random(1,1000)   
       100.711  select art_id,max(ts) as ts,count(*) from tbl_art_tag where tid in ( :tid1, :tid2 ) group by 1 having count(*)>=2 order by ts d  
```  
##### 场景2  
留作业, 请同学自己设计完成.  
##### 场景3  
不支持  
#### PolarDB|PG新方法1 设计和实验  
##### 场景1  
使用传统方法场景1的数据基础, 将一篇文章的所有标签转换为数组存储.   
1、创建rum插件, 支持rum索引接口. rum是在gin基础上增强的一种索引, 既有倒排, 又在每条tuple item指针后面附加了额外的信息(例如多值类型以外的其他字段值), 可用于额外的排序动作.   
```  
create extension rum;   
```  
2、创建文章表, 一对多表示文章和标签的关系.  
```  
drop table if exists tbl_art_tag1;  
create unlogged table tbl_art_tag1 (  
  art_id int primary key,   
  tid int[],   
  ts timestamp   
);  
```  
3、使用传统方法场景1的数据基础, 将一篇文章的所有标签转换为数组存储.   
```  
insert into tbl_art_tag1 select art_id, array_agg(tid), max(ts) from tbl_art_tag group by 1;  
```  
4、创建rum索引, 标签数组+时间戳.    
```  
CREATE INDEX ON tbl_art_tag1 USING rum (tid rum_anyarray_addon_ops, ts)  
    WITH (attach = 'ts', to = 'tid');  
```  
5、用户在浏览时, 选择某个标签, 按新鲜度顺序返回这个标签下的top 100文章.  
```  
postgres=# explain analyze select art_id,ts from tbl_art_tag1 where tid @> array[500] order by ts  '2099-01-01' limit 100;   
                                                                     QUERY PLAN                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------  
 Limit  (cost=4.40..32.74 rows=100 width=20) (actual time=5.699..6.239 rows=100 loops=1)  
   ->  Index Scan using tbl_art_tag1_tid_ts_idx on tbl_art_tag1  (cost=4.40..2184.46 rows=7693 width=20) (actual time=5.695..6.193 rows=100 loops=1)  
         Index Cond: (tid @> '{500}'::integer[])  
         Order By: (ts  '2099-01-01 00:00:00'::timestamp without time zone)  
 Planning Time: 0.378 ms  
 Execution Time: 6.348 ms  
(6 rows)  
```  
6、性能压测  
相比于传统方法, 性能从76555下降到了2845 tps.   
原因是rum索引内的tuple item并不是按附加信息值(即这里的ts)顺序存储的, 应该多了一些sort开销.  
而传统btree索引并没有额外的sort开销.  
```  
vi t3.sql  
\set tid random(1,1000)   
select art_id from tbl_art_tag1 where tid @> (array[:tid])::int[] order by ts  '2099-01-01' limit 100;   
```  
```  
pgbench -M prepared -n -r -P 1 -f ./t3.sql -c 10 -j 10 -T 120  
transaction type: ./t3.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 10  
number of threads: 10  
duration: 120 s  
number of transactions actually processed: 341387  
latency average = 3.514 ms  
latency stddev = 1.119 ms  
initial connection time = 19.174 ms  
tps = 2845.241086 (without initial connection time)  
statement latencies in milliseconds:  
         0.000  \set tid random(1,1000)   
         3.515  select art_id from tbl_art_tag1 where tid @> (array[:tid])::int[] order by ts  '2099-01-01' limit 100;  
```  
7、传统方法和rum的标签表、索引空间占用对比:    
rum的标签表只有传统方法十分之一左右, 索引则只有传统方法的一半不到.   
```  
postgres=# \dt+  
                                       List of relations  
 Schema |     Name     | Type  |  Owner   | Persistence | Access method |  Size  | Description   
--------+--------------+-------+----------+-------------+---------------+--------+-------------  
 public | tbl_art_tag  | table | postgres | unlogged    | heap          | 424 MB |   
 public | tbl_art_tag1 | table | postgres | unlogged    | heap          | 43 MB  |   
 public | tbl_tag      | table | postgres | permanent   | heap          | 104 kB |   
(3 rows)  
postgres=# \di+  
                                                    List of relations  