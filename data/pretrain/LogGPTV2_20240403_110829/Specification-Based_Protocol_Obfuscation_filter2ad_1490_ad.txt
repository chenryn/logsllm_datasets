### Cost of the Obfuscation Framework

The cost associated with our obfuscation framework, particularly in terms of generating obfuscated code, remains low. In the worst-case scenario, the generation time is kept under 4 milliseconds. This worst case occurs when a series of `SplitOp` obfuscations are applied to a large data field. It is important to note that the overhead for generating the obfuscated code is less critical because this operation is performed offline.

### Resilience Assessment

To evaluate the resilience of our framework, we engaged an expert and contributor to Netzob [12], a popular protocol reverse engineering (PRE) tool based on network trace analysis. We provided the expert with a network trace containing four different Modbus protocol messages and their corresponding responses. Within less than half an hour, the expert was able to retrieve the exact format of the messages for the non-obfuscated protocol. However, for a version generated with one obfuscation per field, the expert was unable to obtain any meaningful results after more than two hours of work. The expert confirmed that the obfuscated code was significantly more difficult to analyze using standard PRE tools. While this assessment provides initial insights, more extensive experiments are needed to fully validate the resilience of the framework. Such experiments are challenging to conduct as they require the participation of independent protocol reverse engineering experts and access to automated PRE tools, which are not readily available today.

### Comparative Results for HTTP Protocol

| Nb. transf. per node | Nb. transf. applied | Potency (normalized) | Nb. lines | Nb. structs | Call graph size | Call graph depth | Generation time (ms) | Parsing time (ms) | Serialization time (ms) | Buffer size (bytes) |
|----------------------|---------------------|----------------------|-----------|-------------|-----------------|------------------|----------------------|-------------------|------------------------|---------------------|
| 1                    | 10[9; 11]           | 1.7[1.6; 2.0]        | 2.7[2.2; 3.5] | 4.0[3.2; 5.2] | 5.6[4.3; 7.5]   | 2.10[1.92; 2.41]  | 0.06[0.04; 0.12]     | 0.04[0.02; 0.10]  | 137[95; 244]           |
| 2                    | 22[19; 26]          | 1.8[1.7; 2.1]        | 2.9[2.4; 3.6] | 4.3[3.5; 5.4] | 5.9[4.7; 7.8]   | 3.17[2.59; 4.03]  | 0.15[0.08; 0.47]     | 0.10[0.05; 0.34]  | 154[101; 284]          |
| 3                    | 39[33; 47]          | 2.2[2.0; 2.6]        | 3.7[3.0; 4.7] | 5.6[4.5; 7.2] | 7.9[6.1; 10.5]  | 4.80[3.84; 6.36]  | 0.37[0.22; 1.00]     | 0.22[0.13; 0.75]  | 181[112; 297]          |
| 4                    | 59[50; 76]          | 2.0[2.0; 2.0]        | 3.2[3.1; 3.3] | 4.0[3.9; 4.0] | 5.5[5.4; 5.6]   | 8.93[5.41; 26.08] | 0.79[0.47; 2.80]     | 0.43[0.25; 1.57]  | 219[119; 404]          |

### Comparative Results for TCP-Modbus Protocol

| Nb. transf. per node | Nb. transf. applied | Potency (normalized) | Nb. lines | Nb. structs | Call graph size | Call graph depth | Generation time (ms) | Parsing time (ms) | Serialization time (ms) | Buffer size (bytes) |
|----------------------|---------------------|----------------------|-----------|-------------|-----------------|------------------|----------------------|-------------------|------------------------|---------------------|
| 1                    | 47[45; 51]          | 1.9[1.8; 2.0]        | 3.0[2.8; 3.2] | 4.5[4.1; 4.9] | 6.4[5.7; 7.1]   | 12.53[9.66; 31.06] | 16.34[14.56; 17.74] | 0.01[0.00; 0.06]  | 0.01[0.00; 0.06]       | 30[3; 195]          |
| 2                    | 107[101; 112]       | 1.9[1.8; 1.9]        | 2.9[2.7; 3.1] | 4.3[3.9; 4.7] | 6.0[5.4; 6.6]   | 24.29[21.76; 27.01] | 6.39[5.97; 6.72]    | 0.03[0.01; 0.14]  | 0.02[0.00; 0.10]       | 33[3; 293]          |
| 3                    | 184[167; 200]       | 2.6[2.1; 3.2]        | 4.3[3.4; 5.5] | 6.8[4.7; 8.6] | 9.8[6.8; 12.2]  | 38[3; 381]         | 0.05[0.01; 0.25]     | 0.03[0.01; 0.16]  | 42[3; 478]             |
| 4                    | 279[258; 310]       | 2.0[2.0; 2.0]        | 2.5[2.5; 2.5] | 3.3[3.3; 3.3] | 3.8[3.8; 3.8]   | 0.09[0.02; 0.52]  | 0.05[0.01; 0.31]     | 0.02[0.00; 0.10]  | 38[3; 381]             |

### Conclusion

This paper introduces a novel protocol obfuscation framework designed to increase the effort required by an adversary to successfully reverse engineer the protocol. The main contribution is the obfuscation of the message format specification, which is formalized as a graph. Generic transformations are automatically applied to this graph to generate a library code that can be easily integrated into the core application. The obfuscated messages are scattered throughout the memory, making it difficult for the reverser to reconstruct the message. A proof-of-concept prototype of the framework has been implemented, and a set of experiments were conducted on two protocols to demonstrate the feasibility of the approach and evaluate its impact on the complexity of the generated code and its overhead. The results show a significant increase in the complexity of the obfuscated protocol binary compared to the non-obfuscated code, while the execution time and memory overhead remain acceptable for practical deployment.

Our approach can be applied to any protocol for which the message format can be represented according to the proposed message format graph. We believe this can be achieved for most common protocols, including both binary and text protocols. The framework also allows for the generation of new obfuscated versions of the protocol, which can be deployed at regular intervals to decrease the likelihood of successful reverse engineering and compromise.

It is important to note that the proposed framework is designed to resist attacks aimed at reverse engineering the protocol, rather than extracting partial information such as specific data fields or keywords. Cryptographic techniques are more suitable for the latter case.

### Future Work

Several extensions of this work can be explored. For instance, the current implementation selects obfuscations randomly. A more efficient approach could be defined by taking into account the grammar of the protocol. Another open question is the definition of the number of obfuscations needed to achieve an acceptable level of resilience against reverse engineering attacks. Finally, a more comprehensive validation of the proposed approach is necessary, using various automated reverse engineering tools and independent experts. Such an evaluation is not easy to achieve but is crucial for further validation.