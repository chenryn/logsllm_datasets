Finally, as regards the cost of our obfuscation framework
associated to the generation of the obfuscated code, it remains
low. Indeed, the generation time is kept under 4 ms in the worst
case. This worst case corresponds to a succession of SplitOp
obfuscations applied on a large data ﬁeld. It is noteworthy that
the overhead associated to the generation of the obfuscated
code is less critical as this operation is performed ofﬂine.
D. Resilience Assessment
To analyse the resilience of our framework, we asked an
expert of (and a contributor to) Netzob [12], a popular protocol
reverse engineering tool based on network trace analysis, to
perform PRE. We have sent to him a network trace containing
Fig. 6. HTTP: normalizes potency metrics
Fig. 7. Modbus: normalized potency metrics
4 different messages and their corresponding answers of Mod-
bus protocol. In less than half an hour, he was able to retrieve
the exact format of the messages for the non-obfuscated pro-
tocol. For a version generated with one obfuscation per ﬁeld,
he was not able to obtain any relevant results after more than
two hours of work. He conﬁrmed that the obfuscated code was
more difﬁcult to analyze with classic PRE tools. Of course, this
assessment is not sufﬁcient, and more signiﬁcant experiments
are needed to validate the resilience of the framework. It is
noteworthy that such experiments are not easy to perform as
they require the contribution of independent protocol reverse
Nb. transf. per node
Nb. transf. applied
Potency (normalized)
Nb. lines
Nb. structs
Call graph size
Call graph depth
Costs (absolute)
Generation time (ms)
Parsing time (ms)
Serialization time (ms)
Buffer size (bytes)
A COMPARATIVE RESULTS FOR HTTP PROTOCOL
TABLE III
1
2
3
4
10[9; 11]
22[19; 26]
39[33; 47]
59[50; 76]
1.7[1.6; 2.0]
1.8[1.7; 2.1]
2.2[2.0; 2.6]
2.0[2.0; 2.0]
2.7[2.2; 3.5]
2.9[2.4; 3.6]
3.7[3.0; 4.7]
3.2[3.1; 3.3]
4.0[3.2; 5.2]
4.3[3.5; 5.4]
5.6[4.5; 7.2]
4.0[3.9; 4.0]
5.6[4.3; 7.5]
5.9[4.7; 7.8]
7.9[6.1; 10.5]
5.5[5.4; 5.6]
2.10[1.92; 2.41]
0.06[0.04; 0.12]
0.04[0.02; 0.10]
137[95; 244]
3.17[2.59; 4.03]
0.15[0.08; 0.47]
0.10[0.05; 0.34]
154[101; 284]
4.80[3.84; 6.36]
0.37[0.22; 1.00]
0.22[0.13; 0.75]
181[112; 297]
8.93[5.41; 26.08]
0.79[0.47; 2.80]
0.43[0.25; 1.57]
219[119; 404]
Nb. transf. per node
Nb. transf. applied
Potency (normalized)
Nb. lines
Nb. structs
Call graph size
Call graph depth
Costs (absolute)
Generation time (ms)
Parsing time (ms)
Serialization time (ms)
Buffer size (bytes)
A COMPARATIVE RESULTS FOR TCP-MODBUS PROTOCOL
TABLE IV
1
2
3
4
47[45; 51]
107[101; 112]
184[167; 200]
279[258; 310]
1.9[1.8; 2.0]
1.9[1.8; 1.9]
2.6[2.1; 3.2]
2.0[2.0; 2.0]
3.0[2.8; 3.2]
2.9[2.7; 3.1]
4.3[3.4; 5.5]
2.5[2.5; 2.5]
4.5[4.1; 4.9]
4.3[3.9; 4.7]
6.8[4.7; 8.6]
3.3[3.3; 3.3]
6.4[5.7; 7.1]
6.0[5.4; 6.6]
9.8[6.8; 12.2]
3.8[3.8; 3.8]
12.53[9.66; 31.06]
16.34[14.56; 17.74]
24.29[21.76; 27.01]
6.39[5.97; 6.72]
0.01[0.00; 0.06]
0.01[0.00; 0.06]
0.03[0.01; 0.14]
0.02[0.00; 0.10]
0.05[0.01; 0.25]
0.03[0.01; 0.16]
30[3; 195]
33[3; 293]
38[3; 381]
0.09[0.02; 0.52]
0.05[0.01; 0.31]
42[3; 478]
engineering experts and to have an easy access to automatic
PRE tools which is not the case today.
VIII. CONCLUSION
This paper presented a novel protocol obfuscation frame-
work that is aimed at increasing the effort needed by an
adversary to successfully reverse the protocol. The main
contribution consists in obfuscating the speciﬁcation of the
messages format. The speciﬁcation is formalized as a graph
on which generic transformations are automatically applied to
generate a library code that can be easily linked to the core
application. The obfuscated messages are scattered throughout
the memory so that it is difﬁcult for the reverser to easily
reconstruct the message. A proof of concept prototype of the
framework is implemented and a set of experiments are carried
out on two protocols to illustrate the feasibility of the proposed
approach and evaluate its impact on the complexity of the
generated code and its overhead. The results show a signiﬁcant
increase of the complexity of the obfuscated protocol binary
compared to the non-obfuscated code. It is also shown that the
execution time and memory overhead remains acceptable for
a practical deployment of the approach in operation.
Our approach can be applied to any protocol for which the
speciﬁcation of the messages can be represented according the
proposed message format graph. We believe that this can be
easily achieved for most common protocols, including binary
and text protocols. The proposed framework also provides
the opportunity to enhance the protection of the considered
protocol as new obfuscated versions of the protocol can be
easily generated. The deployment of new versions, at regular
intervals, should decrease the likelihood that the protocol can
be successfully reversed and compromised.
It is noteworthy that the proposed framework is designed
to resist to attacks aimed at reverse engineering the protocol,
rather than extracting partial
information concerning e.g.,
speciﬁc data ﬁelds or keywords. Cryptographic techniques are
more suitable in this latter case.
in the current
Several extensions of this work can be investigated. In
particular,
implementation the obfuscations
are selected randomly. A more efﬁcient approach could be
deﬁned by taking into account the grammar of the protocol.
Another open question concerns the deﬁnition of the number
of obfuscations needed to achieve an acceptable level of
resilience of the protocol against reverse engineering attacks.
Finally, a more signiﬁcant validation of the proposed approach
needs to be carried out, using e.g. different automated reverse
engineering tools and independent experts. Such evaluation is
not easy to achieve.
REFERENCES
[1] K. P. Dyer, S. E. Coull, and T. Shrimpton, “Marionette: A Programmable
Network Trafﬁc Obfuscation System,” in Proc. 24th USENIX Security
Symp. USENIX Assoc., 2015, pp. 367–382.
[2] E. J. Chikofsky and J. H. C. II, “Reverse engineering and design
recovery: A taxonomy,” IEEE Software, vol. 7(1), pp. 13–18, 1990.
[3] C. Eagle, The IDA Pro Book: The Unofﬁcial Guide to the World’s Most
San Francisco, CA, USA: No Starch Press,
Popular Disassembler.
2008.
[4] “Radare2 github repository,” https://github.com/radare/radare2, 2017.
[5] J. Narayan, S. K. Shukla, and T. C. Clancy, “A survey of automatic
protocol reverse engineering tools,” ACM Computing Surveys (CSUR),
vol. 48, no. 3, p. 40, 2015.
[6] X. Li and L. Chen, “A Survey on Methods of Automatic Protocol
Reverse Engineering,” in 2011 7th Int’l Conf. Computational Intell. and
Security (CIS). Hainan, China: IEEE, 2011, pp. 685–689.
[7] J. Duchˆene, C. Le Guernic, E. Alata, V. Nicomette, and M. Kaˆaniche,
“State of the art of network protocol reverse engineering tools,” J.
Comput. Virology and Hacking Techniques, pp. 1–16, Jan. 2017.
∼awalters/PI/PI.html, 2004.
http://www.4tphi.net/∼awalters/PI/pi.pdf, 2004.
[9] ——, “Network Protocol Analysis using Bioinformatics Algorithms,”
Informatics Project,” http://www.4tphi.net/
[8] M. Beddoe, “Protocol
[10] J. Antunes, N. Neves, and P. Verissimo, “Reverse Engineering of
Protocols from Network Traces,” in 2011 18th Working Conf. Reverse
Eng. (WCRE). New York, NY, USA: IEEE, 2011, pp. 169–178.
[11] G. Bossert, F. Guihery, and G. Hiet, “Towards automated protocol
reverse engineering using semantic information,” in Proc. 9th ACM Conf.
Comput. & Commun. Security. Kyoto, Japan: ACM, Jun. 2014, pp. 51–
62.
[12] G. Bossert, “Exploiting Semantic for the Automatic Reverse Engineering
of Communication Protocols.” Ph.D. dissertation, Suplec, Dec. 2014.
[13] J. Lim, T. Reps, and B. Liblit, “Extracting Output Formats from
Executables,” in 13th Working Conf. Reverse Eng., 2006. WCRE ’06.
Benevento, Italy: IEEE, 2006, pp. 167–178.
[14] J. Caballero, P. Poosankam, C. Kreibich, and D. Song, “Dispatcher:
enabling active botnet
inﬁltration using automatic protocol reverse-
engineering,” in Proc. 16th ACM Conf. Comput. & Commun. Security,
ser. CCS ’09. New York, NY, USA: ACM, 2009, pp. 621–634.
[15] J. Caballero Bayerri, “Grammar and model extraction for security
applications using dynamic program binary analysis,” Ph.D. dissertation,
Carnegie Mellon Univ., Pittsburgh, PA, USA, 2010.
[16] J. Caballero and D. Song, “Automatic protocol reverse-engineering:
Message format extraction and ﬁeld semantics inference,” Comput.
Networks, vol. 57, no. 2, pp. 451–474, Feb. 2013.
[17] P. Comparetti, G. Wondracek, C. Kruegel, and E. Kirda, “Prospex:
Protocol Speciﬁcation Extraction,” in 2009 30th IEEE Symp. Security
and Privacy. Berkeley, USA: IEEE, 2009, pp. 110–125.
[18] C. Y. Cho, D. Babi´c, E. C. R. Shin, and D. Song, “Inference and Analysis
of Formal Models of Botnet Command and Control Protocols,” in Proc.
17th ACM Conf. Comput. & Commun. Security, ser. CCS ’10. New
York, NY, USA: ACM, 2010, pp. 426–439.
[19] C. Y. Cho, D. Babi´c, P. Poosankam, K. Z. Chen, E. X. Wu, and D. Song,
“MACE: model-inference-assisted concolic exploration for protocol and
vulnerability discovery,” in Proc. 20th USENIX Conf. Security, ser.
SEC’11. Berkeley, CA, USA: USENIX Assoc., Aug. 2011, p. 19.
[20] J. Caballero, H. Yin, Z. Liang, and D. Song, “Polyglot: automatic
extraction of protocol message format using dynamic binary analysis,”
in Proc. 14th ACM Conf. Comput. & Commun. Security, ser. CCS ’07.
New York, NY, USA: ACM, 2007, pp. 317–329.
[21] Z. Wang, X. Jiang, W. Cui, X. Wang, and M. Grace, “ReFormat:
Automatic Reverse Engineering of Encrypted Messages,” in Comput.
Security ESORICS 2009, ser. LNCS, M. Backes and P. Ning, Eds.
Saint Malo, France: Springer Berlin Heidelberg, Jan. 2009, no. 5789,
pp. 200–215.
[22] B. Barak, O. Goldreich, R. Impagliazzo, S. Rudich, A. Sahai, S. Vadhan,
and K. Yang, “On the (im) possibility of obfuscating programs,” in Ann.
Int’l Cryptology Conf. Springer, 2001, pp. 1–18.
[23] ——, “On the (im)possibility of obfuscating programs,” J. ACM, vol. 59,
no. 2, pp. 6:1–6:48, May 2012.
[24] H. Xu and M. R. Lyu, “Assessing the security properties of software
obfuscation,” IEEE Security & Privacy, vol. 14, no. 5, pp. 80–83, 2016.
[25] C. Collberg, C. Thomborson, and D. Low, “A taxonomy of obfuscating
transformations,” Dept. Comput. Sci., The Univ. of Auckland, New
Zealand, Tech. Rep., 1997.
[26] W. Cho, I. Lee, and S. Park, “Against intelligent tampering: Software
tamper resistance by extended control ﬂow obfuscation,” in Proc. World
Multiconference on Systems, Cybern., and Informatics, 2001.
[27] C. Collberg, C. Thomborson, and D. Low, “Manufacturing cheap,
resilient, and stealthy opaque constructs,” in Proc. 25th ACM SIGPLAN-
SIGACT Symp. Principles of programming languages. ACM, 1998, pp.
184–196.
[28] T. Ogiso, Y. Sakabe, M. Soshi, and A. Miyaji, “Software obfuscation on
a theoretical basis and its implementation,” IEICE Trans. Fundamentals
of Electron., Commun. and Comput. Sci., vol. 86, no. 1, pp. 176–186,
2003.
[29] C. Wang, J. Hill, J. Knight, and J. Davidson, “Software tamper resis-
tance: Obstructing static analysis of programs,” CS-2000-12, Univ. of
Virginia, 12 2000, Tech. Rep., 2000.
[30] G. Wroblewski, “General method of program code obfuscation,” Ph.D.
dissertation, Inst. of Eng. Cybern., Wroclaw Univ. of Technology, 2002.
[31] C. Linn and S. Debray, “Obfuscation of executable code to improve
resistance to static disassembly,” in Proc. 10th ACM Conf. Comput. &
Commun. Security. ACM, 2003, pp. 290–299.
[32] J. Cappaert and B. Preneel, “A general model for hiding control ﬂow,”
in Proc. 10th annual ACM workshop on Digital rights management.
ACM, 2010, pp. 35–42.
[33] S. Schrittwieser and S. Katzenbeisser, “Code obfuscation against static
and dynamic reverse engineering,” in Inform. Hiding. Springer, 2011,
pp. 270–284.
[34] M. Egele, T. Scholte, E. Kirda, and C. Kruegel, “A survey on automated
dynamic malware-analysis techniques and tools,” ACM computing sur-
veys (CSUR), vol. 44, no. 2, p. 6, 2012.
[35] S. Blazy, S. Riaud, and T. Sirvent, “Data tainting and obfuscation:
Improving plausibility of incorrect taint,” in Source Code Anal. and
Manipulation (SCAM), 2015 IEEE 15th Int’l Working Conf.
IEEE,
2015, pp. 111–120.
[36] P. Winter, T. Pulls, and J. Fuss, “ScrambleSuit: A Polymorphic Network
Protocol to Circumvent Censorship,” in Proc. 12th ACM Workshop on
Privacy in the Electron. Society, ser. WPES ’13. New York, NY, USA:
ACM, 2013, pp. 213–224.
[37] Tor team, “Obfsproxy,” https://trac.torproject.org/projects/tor/wiki/doc/
PluggableTransports/obfs4proxy, 2017.
[38] Z. Weinberg, J. Wang, V. Yegneswaran, L. Briesemeister, S. Cheung,
F. Wang, and D. Boneh, “Stegotorus: a camouﬂage proxy for the tor
anonymity system,” in Proc. 2012 ACM Conf. Comput. & Commun.
Security. ACM, 2012, pp. 109–120.
[39] H. Mohajeri Moghaddam, B. Li, M. Derakhshani, and I. Goldberg,
“SkypeMorph: Protocol Obfuscation for Tor Bridges,” in Proc. 2012
ACM Conf. Comput. & Commun. Security, ser. CCS ’12. New York,
NY, USA: ACM, 2012, pp. 97–108.
[40] J. Geddes, M. Schuchard, and N. Hopper, “Cover Your ACKs: Pitfalls
of Covert Channel Censorship Circumvention,” in Proc. 2013 ACM
SIGSAC Conf. Comput. & Commun. Security, ser. CCS ’13.
New
York, NY, USA: ACM, 2013, pp. 361–372.
[41] A. Houmansadr, T. J. Riedl, N. Borisov, and A. C. Singer, “I want my
voice to be heard: Ip over voice-over-ip for unobservable censorship
circumvention.” in NDSS, 2013.
[42] S. Li, M. Schliep, and N. Hopper, “Facet: Streaming over videocon-
ferencing for censorship circumvention,” in Proc. 13th Workshop on
Privacy in the Electron. Society. ACM, 2014, pp. 163–172.
[43] H. Bridger, N. Rishab, G. Phillipa, and J. Rob, “Games Without
Frontiers: Investigating Video Games as a Covert Channel,” in Proc.
2016 IEEE European Symp. Security and Privacy, ser. IEEE European
Symp. Security and Privacy.
IEEE, 2015.
[44] K. P. Dyer, S. E. Coull, T. Ristenpart, and T. Shrimpton, “Protocol
Misidentiﬁcation Made Easy with Format-transforming Encryption,” in
Proc. 2013 ACM SIGSAC Conf. Comput. & Commun. Security, ser. CCS
’13. New York, NY, USA: ACM, 2013, pp. 61–72.
[45] C. de la Higuera, Grammatical Inference: Learning Automata and
Grammars. New York, NY, USA: Cambridge Univ. Press, 2010.
[46] A. Swales, “Open modbus/tcp speciﬁcation,” Schneider Electric, Tech.
Rep., 1999.
[47] R. Fielding and J. Reschke, “Hypertext transfer protocol (http/1.1):
Message syntax and routing,” Internet Eng. Task Force, Tech. Rep.,
2014.