title:Universal Atomic Swaps: Secure Exchange of Coins Across All Blockchains
author:Sri Aravinda Krishnan Thyagarajan and
Giulio Malavolta and
Pedro Moreno-Sanchez
Universal Atomic Swaps:
Secure Exchange of Coins Across All Blockchains
Sri AravindaKrishnan Thyagarajan
Carnegie Mellon University
PI:EMAIL
Giulio Malavolta
Max Planck Institute for
Security and Privacy
PI:EMAIL
Pedro Moreno-Sánchez
IMDEA Software Institute
PI:EMAIL
Abstract—Trading goods lies at the backbone of the modern
economy and the recent advent of cryptocurrencies has opened
the door for trading decentralized (digital) assets: A large fraction
of the value of cryptocurrencies comes from the inter-currency
exchange and trading, which has been arguably the most suc-
cessful application of decentralized money. The security issues
observed with centralized, custodial cryptocurrency exchanges
have motivated the design of atomic swaps, a protocol for coin
exchanges between any two users. Yet, somewhat surprisingly,
no atomic swap protocol exists that simultaneously satisﬁes
the following simple but desired properties: (i) non-custodial,
departing from a third party trusted holding the coins from users
during the exchange; (ii) universal, that is, compatible with all
(current and future) cryptocurrencies; (iii) multi-asset, supporting
the exchange of multiple coins in a single atomic swap.
From a theoretical standpoint, in this work we show a generic
protocol to securely swap n coins from any (possible multiple)
currencies for ˜n coins of any other currencies, for any n and ˜n.
We do not require any custom scripting language supported by
the corresponding blockchains, besides the bare minimum ability
to verify signatures on transactions. For the special case when
the blockchains use ECDSA or Schnorr signatures, we design
a practically efﬁcient protocol based on adaptor signatures and
time-lock puzzles. As a byproduct of our approach, atomic swaps
transactions no longer include custom scripts and are identical to
standard one-to-one transactions. We also show that our protocol
naturally generalizes to any cycle of users, i.e., atomic swaps with
more than two participants. To demonstrate the practicality of
our approach, we have evaluated a prototypical implementation
of our protocol for Schnorr/ECDSA signatures and observed
that an atomic swap requires below one second on commodity
machines. Even on blockchains with expressive smart contract
support (e.g., Ethereum), our approach reduces the on-chain cost
both in terms of transaction size and gas cost.
Index Terms—Atomic Swaps, Adaptor Signatures, Blockchain
I . I N T R O D U C T I O N
Blockchains coexisting today are no longer isolated siloes,
but their value rather comes from the exchange of assets across
them. Cross-chain communication [1] is thus found a critical
component on cryptocurrency transfers and exchanges. In fact,
trading is arguably among the top applications in the cryp-
tocurrency landscape and numerous competing interoperability
projects, attempting to unite otherwise independent blockchains,
have been deployed in practice creating a multi-billion dollar
industry [2]–[5].
On a technical level, a cross-chain swap involves two ledgers
BA, BB and two users Alice and Bob. Alice holds α assets
on BA while Bob holds β assets on BB. The atomic swap
problem consists in ensuring that Alice transfers α to Bob in
BA if and only if Bob transfers β to Alice in BB. We then say
that a solution is atomic if it ends in either of the following
outcomes: (i) Bob owns α in BA and Alice owns β in BB
(i.e., asset swap); or (ii) Alice owns α in BA and Bob owns
β in BB (i.e., asset refund). Moreover, an atomic swap must
preserve fungibility, that is, an observer (other than Alice and
Bob) of the ledger should not distinguish a transfer executed
as part of an atomic swap from a standard asset transfer in
such ledger.
Despite being a fundamental problem in the cryptocurrencies
landscape, the state of the art for atomic swaps protocols is
rather chaotic: Atomic swaps protocols are typically tailored to
the characteristics offered by a restricted set of currencies (e.g.,
Turing-complete scripting languages) [6]–[9], require the exis-
tence of a third ledger to coordinate the swap [5], [10], require
additional trust assumptions such as trusted hardware [11], or
require the presence of a trusted third party like an online
exchange. As a result, adding a new cryptocurrency in the
market most likely requires one to design a new ad-hoc atomic
swap protocol. Even among existing cryptocurrencies, atomic
swaps (and consequently secure exchange) are limited to a
handful of combinations of cryptocurrencies, or require one to
accept strong trust assumptions.
On a conceptual level, such atomic swap of coins across cur-
rencies enables the most basic form of inter-chain connectivity,
irrespective of the application. In this work, we ask whether
one can obtain a universal solution for such atomic swaps: a
Swiss Army knife protocol that works for all cryptocurrencies
with minimal support from the blockchain. In order to answer
this question, we ﬁrst analyze existing approaches and argue
why they fall short of our quest for a universal solution.
A. Where Existing Approaches Fall Short
We provide a summary of the comparison in Table I and
we elaborate on each approach individually in the following.
Third Ledger. Migration protocols like cryptocurrency-backed
assets or side-chains, mimic the atomic swap functionality
by requiring that Alice and Bob migrate their assets from
(perhaps language-restricted) ledgers BA and BB into BC with
a more expressive scripting language (like Ethereum) [10].
Once the funds are in BC, they are swapped and sent back
to the initial ledgers BA and BB. Such an approach has the
following drawbacks: (i) the swap protocol imposes transaction
and cost overhead not only to BA and BB but also BC; and
(ii) it is not an universal solution as it potentially requires a
different asset migration as well as atomic swap protocols for
each ledger that plays the role of BC in the aforementioned
example. Even in the unlikely case that everybody agrees to
use BC for their atomic swaps, we need to enhance every
blockchain with the capability of migrating assets to/from BC.
Use of Trusted Hardware. An alternative approach would be
to defer the atomic swap functionality to a trusted execution
environment (TEE) [11]. Besides the fact that this solution
requires all users to have such a TEE (which is unrealistic),
recent works have shown serious TEE vulnerabilities [12], [13].
Hash Timelock Contracts. The closest solution to a universal
protocol for atomic swaps (which is implemented in the large
majority of trustless exchange protocols) relies on hash-time
lock contract (HTLC), an excerpt of script that implements
the following logic: On input a tuple (α, h, t, A, B), where α
denotes the assets to be transferred, h is a hash value, t denotes
a certain timeout, A and B represent two users in the ledger,
the HTLC contract transfers α to B if it is invoked before
time t on input a value r such that h = H(r), where H(·) is a
cryptographic hash function. If the HTLC contract is invoked
after time t, it transfers the α assets to A unconditionally.
Using HTLCs as building block, an atomic cross-chain swap
where Alice exchanges α assets in BA for β assets from Bob
in BB, is then realized as follows: Alice chooses r, computes
h = H(r), transfers α into an HTLC(α, h, t, A, B) in BA and
sends h, t to Bob. Note that at this point Bob cannot claim
the HTLC because r is only known to Alice. Instead, Bob
ﬁnishes the setup of the exchange by choosing a time t(cid:48) < t
and transferring his β assets into an HTLC(β, h, t(cid:48), B, A) in
BB. The atomicity of the swap is enforced by the logic of
the HTLC: (Case i) Alice claims the HTLC in BB, effectively
revealing r to Bob (and anyone observing BB) before t(cid:48). Bob
can then use r to claim the HTLC in BA; (Case ii) Alice does
not claim the HTLC in BB before time t(cid:48), then she does not
reveal r, ensuring that Bob cannot claim the HTLC in BA.
HTLC-based cross-chain swaps are deployed in practice [14],
[15] and have a wide range of applications [18]–[20], However,
they incur high execution costs (e.g., gas in Ethereum), as
well as large transaction sizes (due to large scripts), and they
have inherent challenges that reduce their utility, which we
summarize next.
(1) Compatibility of the Hash Function. Both ledgers must sup-
port compatible hash functions within their scripting language.
In fact, they both should support the same hash function and
each ledger must use the same number of bits to represent it,
otherwise atomicity does no longer hold [21] since one ledger
may not allow pre-images of a large enough size. Apart from
TABLE I: Comparison among different approaches
Fungibility
n-to-˜n support
Approach
TEE [11]
HTLC [14], [15]
Smart contracts [10], [16], [17]
Generic (This work)
Tailored (This work)
Required Functionality
Any digital signature
Hashing and Timelock
Expressive script
Any digital signature
ECDSA/Schnorr
Yes
No
No
Yes
Yes
No
No
Yes
Yes
Yes
atomicity, the use of the same h value at two ledgers raises a
privacy concern, as an observer can link both HTLC as part of
the same swap. Finally, a perhaps more fundamental issue, is
that there exist several cryptocurrencies such as Monero [22],
Mimblewimble [23], Ripple [24], Stellar [25] or Zcash [26]
(shielded addresses) that do not support the computation of the
HTLC contract in their scripting language.
(2) Presence of the Timelock. Another issue with the HTLC
approach is that both ledgers must support the timelock
functionality in their scripting language, in other words, the
possibility to lock the spending of coins by a certain user until
a certain time (e.g., deﬁned as block height) is reached. Adding
this timelock functionality is at odds with privacy because (i)
if implemented naively, it makes time-locked transfers easier to
distinguish from those transfers without time restrictions [27];
(ii) including it conﬂicts with other privacy operations already
available at the ledger [28]; (iii) if possible to include and
implemented in a privacy-preserving manner, it adds a non-
trivial overhead to the computation and storage overhead
of the ledger [27], [29]. In this state of affairs, there exist
cryptocurrencies that have been created with privacy by design
and avoid the use of timelocked assets as a design principle [30].
(3) Single-Asset Swap. The swap is restricted to only two HTLC,
one per ledger, and thus to the exchange of α assets in BA
and β assets in BB (e.g., α bitcoins by β ethers). However,
given the huge differences in value in current cryptocurrencies
(e.g., 1 bitcoin is worth 100× more than 1 ether at the time of
writing), current atomic swaps are restricted to small values of
α (or β) to be able to match the exchange offer. However, in
practice there exist users (e.g., market makers or exchanges)
that have a varied portfolio and hold assets at different ledgers,
who could potentially use several of their assets to match a
swap offer, if multi-asset swaps were available. For instance,
multi-asset swaps for the ﬁrst time would allow Alice to use
coins she owns at Ethereum, Monero and Ripple to match an
exchange offer from Bob of 1 Bitcoin through a single atomic
swap operation.
B. Our contributions
Our goal is to design a universal atomic swap protocol, that
does not make any assumption on any speciﬁc features of the
blockchain, or scripting functionality of the currencies and only
assumes the (arguably minimal) ability to verify signatures on
transactions. Besides establishing an important feasibility result,
such a protocol immediately enables secure exchange protocols
across all combination of cryptocurrencies, excluded by current
ad-hoc solutions. As a byproduct of such a generality, such
atomic swap transactions are identical to standard one-to-one
transactions, thereby increasing the fungibility of the swapped
coins. The contributions of this work can be summarized as
follows.
(1) Universal Swaps. We establish the theoretical foundations
of universal atomic swaps by presenting the ﬁrst protocol
to securely exchange any n coins (possibly) from different
currencies for any ˜n coins from another (possibly any disjoint)
2
set of currencies. Speciﬁcally, the protocol runs in polynomial
time for any polynomial n and ˜n and can handle any currency
that only offers signature veriﬁcation script for authenticating
transactions, and therefore is universal. We assume the exis-
tence of a (UC-secure) general-purpose 2-party computation
(2PC) protocol [31] and the existence of veriﬁable timed
signatures [32]–[34]. We overview our construction in Section II
and give the formal construction in Appendix H.
We stress that we present this protocol only as a conceptual
contribution. Using general purpose cryptographic tools (such
as 2PC) would likely result in an impractical protocol. Yet,
such protocol will serve as the general outline to construct
more efﬁcient schemes tailored to speciﬁc signature schemes,
as we show with our next contribution.
(2) Efﬁcient Protocol for Schnorr/ECDSA. For the special
case of Schnorr/ECDSA signatures, we design a special-purpose
n-to-˜n atomic swap protocol (Section V), which is optimized
in several aspects to achieve high practical efﬁciency. Our
protocol supports any (crypto)currency that uses Schnorr or
ECSDA signatures to sign transactions, regardless of the elliptic
curve used to implement such signature schemes. This captures
many existing cryptocurrencies, including those with the highest
market capitalization such as Bitcoin, Ethereum, Ripple, or
Stellar. Our techniques can also be efﬁciently extended to
the transaction scheme of Monero [22], [35], [36], the largest
privacy preserving currency.
(3) Cyclic Swaps. We show that our protocols naturally lends
themselves to interesting extensions, such as supporting cyclic
swaps, i.e. atomic swaps involving more than two users. As an
example, consider the scenario where Alice wants to exchange
some ether for some bitcoins with Carol, who accepts only
credit in Ripple. This can be done with the help of Bob, who
is willing to exchange ethers for ripples. This translates into
Alice 1 ETH−−−→ Bob 1 XRP−−−→ Carol 1 BTC−−−→ Alice
We show that our protocols can be adapted to securely
implement swaps among user cycles (for any cycle length)
without the need to place additional trust assumptions. We
defer the details to Appendix G.
(4) Fungibility. One appealing aspect of our approach is that
signed transactions resulting from atomic swaps are identical to
standard one-to-one transactions. To the best of our knowledge,
this is the ﬁrst protocol that achieves this form of privacy
without requiring additional trust assumptions such as use of
trusted hardware or a trusted third party. This has the potential
to improve the fungibility of the coins and the scalability of
the currency, since it decreases the impact of atomic swaps on
the size of the blockchain.
As an amusing exercise for the reader, we have carried out
the Bitcoin testnet transaction that corresponds to the atomic
swap of a certain amount of bitcoin for ether. We let the
reader identify such atomic swap transaction among the ﬁve
transactions in the Bitcoin testnet [37]–[41] (the solution can
be found in Appendix A).
(5) Implementation and Optimizations. We have imple-
mented a prototype of our Schnorr/ECDSA based protocol
(Section VI) and evaluated it showing that one instance of
universal swap can be executed in less than one second. In
order to achieve such performance, we not only take advantage
of the parallelization possible in our protocol as operations for
different coins are independent of each other, but also describe
implementation-level optimizations that greatly improve the
performance in practice. Our evaluation also shows that our
protocol reduces the on-chain gas cost between 2-6 times
and the transaction size when compared to Hash TimeLock
Contract (HTLC) contract, demonstrating the best suitability of
our protocol for any blockchain (including those with expressive
scripting language support).
I I . S O L U T I O N O V E RV I E W
In this outline, we mostly focus on our generic protocol,
which is compatible with any blockchain, assuming the minimal
ability to verify signatures on transactions (for any signature
scheme). This lays out the main ideas of our approach and it
is the basis for our efﬁcient protocol for the special case of
Schnorr/ECDSA signatures.
A. Outline of Our Generic Solution
Assume a setting where a party P0 owns the coin v(0) at
ledger B0 and P1 owns the coin v(1) at ledger B1, which they
want to securely swap. We assume that the parties have a
bootstrapping mechanism (e.g., a forum where they can match
their orders and ﬁnd each other for swapping their coins). A
detailed study of this assumption is out of the scope of this
paper. The party P0 could naively transfer v(0) to P1 in B0
with the hope that afterwards P1 transfers v(1) to P0 in B1.
However, the success of such a swap crucially relies on the
honesty of the users: Should P1 not forward the coins, P0
would incur a loss.
The central challenge that our protocol needs to address is in
ensuring atomicity of the swap even in the presence of malicious
parties, which is guaranteed by the HTLC-based protocols.
Drawing inspiration from that approach, an immediate barrier
that we encounter is that the absence of scripting language does
not allow us to set “time-outs” on transactions. To avoid users
being stuck in deadlocks, we resort to different techniques.
1) Simulating Transaction Timeouts: A timeout t for a
transaction tx means that the transaction is accepted by the
nodes in the network, only after time t has expired. Typically,
this is implemented by expressing t in terms of a block number
and leveraging a timelock script, that is explicitly included in
the transaction and checks whether the block number expressed
in t has already been reached. That is, even if the transaction has
a valid signature σ but time t has not expired, the timelock
script prevents the transaction from being processed. Our