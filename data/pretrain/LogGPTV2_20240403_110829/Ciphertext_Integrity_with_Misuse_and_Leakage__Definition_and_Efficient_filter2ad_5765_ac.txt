cannot just ignore that leakage, as removing it would make
it trivial for the adversary to distinguish the real world with
leakages, from the random/ideal world.
In this context, one tempting solution is to posit that
leakages can be simulated, namely, that there would be a
leakage simulator that, given a pair (𝐼𝑉, 𝑚) and the random
output of the $(𝐼𝑉, 𝑚) oracle, can produce a leakage that
is indistinguishable from the one produced during the real
encryption. This would somehow assume that leakages are
zero-knowledge functions.
Such an assumption about leakages has been proposed
by Standaert et al. [43], and variants have been explored
by Fuller and Hamlin [21]. Informally, the implementation
of a block cipher is said to have 𝑞-simulatable leakages if it
is possible to simulate the leakages of this implementation,
given public inputs and outputs but no key, for at most 𝑞
evaluations of this block cipher with any key.
It is well known that such an assumption can only be
fulfilled under strong restrictions. Indeed, a side-channel
attack typically reduces the computational secrecy of the
state manipulated by a device at a rate that is exponential
in the number of leakages. In this context, the only hope to
have simulatable leakages is to strongly limit their number
(typically, 𝑞 = 2) and to make them noisy. As discussed
in [27], even simulating a small number of noisy leakages is
difficult. Hence, assuming simulatability without such strong
restrictions appears to be completely unrealistic.
Still, this is exactly what the context of MR would require:
given that the adversary is in control of the 𝐼𝑉 , nothing
prevents him from querying the EncL oracle with a single
(𝐼𝑉, 𝑚) pair as many times as desired, precisely in order
to be able to remove all the noise of the leakages (through
averaging), opening the door to attacks such as described
in [8]. (In Section 7, we will analyze the LR CPA security of
our schemes using the assumption of 2-simulatable leakages.
The crucial difference, there, is that the adversary will not
be in control of the 𝐼𝑉 anymore, which will make averaging
strategies fail as long as there is no 𝐼𝑉 collision.)
As a result of this central difficulty coming from MR, we
need to adopt a different approach, one that would not in-
clude any requirement of random-looking ciphertexts. To this
purpose, we turn back to the standard security requirements
of AE schemes (without misuse), of which one formulation
is the combination of ciphertext integrity (INT-CTXT) and
indistinguishability under CPA [9].
CIML security. We propose a notion of ciphertext integrity
in the presence of misuse and leakages. The traditional INT-
CTXT property requires that an adversary, who can query
an encryption oracle on chosen messages, is unable to pro-
duce a ciphertext that is different from those received from
the encryption oracle, but would still pass the decryption
algorithm without error.
Asking that this property remains satisfied in the presence
of IV misuse can be expressed, by letting the adversary select
the 𝐼𝑉 ’s that are submitted to the encryption oracle. And
capturing encryption leakages can be expressed by letting
the encryption oracle return the leakage corresponding to the
encryption that is performed. This results in the following
security definition.
Definition 3.1. An authenticated encryption AE with en-
cryption leakage function L provides (𝑞, 𝑡, 𝜖)-ciphertext in-
tegrity with coin misuse and leakage on encryption if for all
(𝑞, 𝑡)-bounded adversaries 𝒜, we have
Pr [CIMLAE,L,𝒜 ⇒ 1] ≤ 𝜖.
As usual, 𝑞 is an upper bound on the total number of queries
made to oracles.
CIMLAE,L,𝒜 experiment
Initialization:
Finalization:
𝑘 $← 𝒦
𝒮 ← ∅
𝐶 ← 𝒜EncL𝑘(·,·),Dec𝑘(·)
If 𝐶 ∈ 𝒮, return ⊥
If ⊥ = Dec𝑘(𝐶), re-
turn ⊥
return 1
Oracle EncL𝑘(𝑟, 𝑚):
𝐶 = Enc𝑘(𝑟, 𝑚)
𝒮 ← 𝒮 ∪ {𝐶}
return (𝐶, L(𝑟, 𝑚; 𝑘))
Oracle 𝒪Dec𝑘(𝐶):
return Dec𝑘(𝐶)
Conference’17, July 2017, Washington, DC, USA
As for LR CPA security, we will simply use the LMCPA
security notion already defined in [37]. We defer the treatment
of this second security goal to Section 7.
4 PREVIOUSLY PROPOSED
CONSTRUCTIONS
In this section, we review some constructions of MR AE
schemes, and explain how they would fail to offer CIML
security.
Rather than focusing on a specific type of leakage functions
(bounded leakages, indistinguishable leakages, simulatable
leakages, hard to invert leakages, . . . ) [21] that would require
much formalism, we explain how practical side-channel at-
tacks could be mounted against these schemes, focusing on
two standard attack methods: simple power analysis (SPA)
and differential power analysis (DPA). Informally, DPAs are
the most commonly exploited side-channel attacks and take
advantage of the leakage about a secret from a computa-
tion based on multiple (different) inputs [30]. They reduce
the computational secrecy of the state manipulated by a
device at a rate that is exponential in the number of leak-
ages, by combining the information of these different inputs
(e.g., plaintexts). SPAs are side-channel attacks taking ad-
vantage of the leakage of a single input, possibly measured
multiple times to reduce the measurement noise, e.g., by
exploiting powerful (yet less practical) algebraic/analytical
techniques [44].
We also consider that the adversary is in possession of a
copy of the targeted device, which he can feed with any choice
of plaintexts and keys in order to obtain outputs and leakages.
This is traditionally used for profiling (i.e., learning how to
interpret leakages) [15], but can also be used for efficient
matching attacks. Indeed, even if it is sometimes difficult to
extract a secret key from a power consumption trace (which
can take gigabytes of data for the encryption of a single
message block), it is typically easier to recognize whether a
candidate secret is correct, by matching the leakage from
the attacked device and the one obtained from the training
device when fed with the candidate values [43]. Note that the
latter can be viewed as a type of SPA with (much) simplified
adversarial goal.
Summarizing, whenever a DPA is possible, it is the most
devastating attack due to the exponentional rate at which
it reduces the secrecy of the device state. When only SPA
is possible, key extraction is more challenging than leakage
matching, and the difference will be especially large when
the noise is the measurements is limited.
4.1 The SIV construction
The SIV construction was introduced by Rogaway and Shrimp-
ton [42] and is a popular approch for the construction of MR
AE schemes. Encryption proceeds by applying a PRF (with
a first key 𝑘1) to the message (and to the associated data,
if there are some) in order to obtain an 𝐼𝑉 , and using this
𝐼𝑉 as input to an IV-based encryption scheme, which uses a
second key 𝑘2 and returns a ciphertext 𝑐. The output is then
Francesco Berti, Fran¸cois Koeune, Olivier Pereira,
Thomas Peters, Fran¸cois-Xavier Standaert.
the (𝐼𝑉, 𝑐) pair. This construction has been instantiated into
the SIV and GCM-SIV modes for example [23, 42]. These
two instances offer the same angle of attack.
First, a DPA is used to recover 𝑘1. It is fairly easy on
these schemes, because the constant value 𝑘1 is used on each
block of each message that is encrypted, and these blocks are
adversarially chosen.
Then, based on 𝑘1, it is possible to use the properties of
the underlying PRF (or universal hash function in the case
of GCM-SIV) to build two messages 𝑚, 𝑚* that have the
same 𝐼𝑉 . In the case of SIV, the PRF is CMAC, a close
variant of CBC MAC. Simply put, if we have a message
𝑚 = (𝑚1‖···‖𝑚ℓ) made of ℓ full blocks, a block 𝑚0 is set
to 0𝑛, tags 𝑡1, . . . , 𝑡ℓ are computed as 𝑡𝑖 = 𝐹𝑘1 (𝑚𝑖 ⊕ 𝑡𝑖−1),
and the output is 𝐼𝑉 = 𝑡ℓ. Now, if 𝑘1 has been obtained
through DPA, we can modify the 𝑖-th block into 𝑚′
𝑖, compute
the updated value 𝑡′
𝑖+1 as
𝑚𝑖+1 ⊕ 𝑡𝑖 ⊕ 𝑡′
𝑖+1 = 𝑡𝑖+1, and so
on for all the next tags. A similar process can be applied to
GCM-SIV, which uses the GHASH universal hash function
instead of CMAC.
𝑖, and adjust the 𝑖 + 1-th block 𝑚′
𝑖, which will guarantee that 𝑡′
Eventually, since both SIV and GCM-SIV use the counter
mode for their IV-based encryption part, we can adapt a
ciphertext (𝐼𝑉, 𝑐) encrypting 𝑚 into a different ciphertext
(𝐼𝑉, 𝑐 ⊕ 𝑚 ⊕ 𝑚*) that decrypts to 𝑚*, hence breaking CIML
security.
As for LR CPA security, similar issues show up. Indeed, as
soon as 𝑘1 has been recovered by DPA, a leakage matching
attack is easy to mount on the test query. Indeed, when the
adversary asks to encrypt one message out of 𝑚0 and 𝑚1
and receives an encryption of 𝑚𝑏 (for a random 𝑏) together
with the corresponding leakage, the adversary can use his
own device to produce the leakages corresponding to the
evaluation of the PRF on 𝑚0 and 𝑚1: he can do so because
he knows 𝑘1. Then, he can compare these two leakages with
the one received from his test query, and decide which is the
correct one.
This strategy works even when nonce-based variants of
these schemes are used, as the nonces are always returned as
part of the ciphertext, and the adversary can therefore use
them as part of his leakage matching attack.
These attacks are made easy through two main aspects:
(1) Long term keys are reused on each message block, which
supports DPA attacks. This can be avoided by using
LR operation modes, which use re-keying strategies to
limit the number of leakages on any specific secret.
(2) Keyed functions are applied to values that are known to
the adversary, which makes leakage matching attacks
easy.
These suggests important ingredients for the design of CIML
secure schemes.
4.2 Combining LR MAC and encryption
modes
Given that the LR part is problematic in the MR AE con-
structions described above, one could be tempted to build
Ciphertext Integrity with Misuse and Leakage
Conference’17, July 2017, Washington, DC, USA
CIML secure schemes in the opposite direction, that is start-
ing from LR primitives and turning them into a MR AE
scheme, in the hope that CIML security will follow.
This is however not necessarily the case, as we demonstrate
now from the combination of recent constructions of LR
MACs and encryption schemes from Pereira et al. [37], which
we call PSV-MAC and PSV-ENC.
PSV-MAC and PSV-ENC are based on two block-ciphers
F and F*, with the distinction that F is assumed to be cheap
and efficiently implemented but leaking, while F* is assumed
to be an expensive (in terms of power and speed), heavily
protected, and leak-free component. In other words, formally
F* is just a standard PRP without leakage while F is a leaking
PRP. The purpose of this distinction is to design schemes
that make minimal use of the expensive F*: one or two calls
per message to be encrypted, independently of the number
of blocks of the message, while the bulk of the computation
is performed by the cheap F.
We note that making a distinction between F and F* would
make little sense in the case of the SIV constructions above,
because all message blocks are treated with the long-term
keys, so that it would only be helpful to process all blocks
using the expensive F*.
as follows if 𝑚 = 𝑚1‖···‖𝑚ℓ:
PSV-MAC𝑘(𝐼𝑉, 𝑚) is an IV-based MAC, and is evaluated
∙ 𝑘0 ← F*
𝑘(𝐼𝑉 )
∙ 𝑘𝑖 ← F𝑘𝑖−1 (𝑚𝑖), ∀𝑖 ∈ [1, ℓ]
∙ return 𝜏 ← 𝑘ℓ
Vrfy𝑘(𝐼𝑉, 𝑚, 𝜏 ) proceeds in the natural way.
PSV-ENC is an IV-based encryption scheme, which we
will be using in the next sections as well. Its description is
available in Figure 1.
PSV-ENC
Enc𝑘(𝐼𝑉, 𝑚), where 𝑚 = 𝑚1‖···‖𝑚ℓ
𝑘(𝐼𝑉 )
1. 𝑘0 ← F*
2. ∀𝑖 ∈ [1, ℓ] : 𝑘𝑖 ← F𝑘𝑖−1 (𝑝𝐴), 𝑦𝑖 ← F𝑘𝑖−1 (𝑝𝐵),
𝑐𝑖 ← 𝑦𝑖⊕𝑚𝑖, where 𝑝𝐴, 𝑝𝐵 are public and distinct
constants
3. return 𝐶 = 𝑐1||𝑐2||···||𝑐ℓ
Dec𝑘(𝐼𝑉, 𝐶) proceeds in the natural way
Figure 1: The PSV-ENC encryption scheme.
Based on our findings in the analysis of SIV, we build
our MR AE scheme using a slightly different construction,