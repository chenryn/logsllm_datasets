title:WebWitness: Investigating, Categorizing, and Mitigating Malware Download
Paths
author:Terry Nelms and
Roberto Perdisci and
Manos Antonakakis and
Mustaque Ahamad
WebWitness: Investigating, Categorizing, and 
Mitigating Malware Download Paths
Terry Nelms, Damballa, Inc. and Georgia Institute of Technology; Roberto Perdisci,  
University of Georgia and Georgia Institute of Technology; Manos Antonakakis,  
Georgia Institute of Technology; Mustaque Ahamad, Georgia Institute of Technology 
and New York University Abu Dhabi
https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/nelms
This paper is included in the Proceedings of the 
24th USENIX Security Symposium
August 12–14, 2015 • Washington, D.C.
ISBN  978-1-939133-11-3
Open access to the Proceedings of  the 24th USENIX Security Symposium is sponsored by USENIXWebWitness: Investigating, Categorizing, and Mitigating
Malware Download Paths
Terry Nelms1,2, Roberto Perdisci3,2, Manos Antonakakis2, and Mustaque Ahamad2,4
1Damballa, Inc.
4New York University Abu Dhabi
2Georgia Institute of Technology
3University of Georgia
PI:EMAIL, PI:EMAIL, PI:EMAIL, PI:EMAIL
Abstract
Most modern malware download attacks occur via the
browser, typically due to social engineering and drive-
by downloads.
In this paper, we study the “origin” of
malware download attacks experienced by real network
users, with the objective of improving malware down-
load defenses. Speciﬁcally, we study the web paths fol-
lowed by users who eventually fall victim to different
types of malware downloads. To this end, we propose a
novel incident investigation system, named WebWitness.
Our system targets two main goals: 1) automatically
trace back and label the sequence of events (e.g., visited
web pages) preceding malware downloads, to highlight
how users reach attack pages on the web; and 2) leverage
these automatically labeled in-the-wild malware down-
load paths to better understand current attack trends, and
to develop more effective defenses.
We deployed WebWitness on a large academic net-
work for a period of ten months, where we collected and
categorized thousands of live malicious download paths.
An analysis of this labeled data allowed us to design a
new defense against drive-by downloads that rely on in-
jecting malicious content into (hacked) legitimate web
pages. For example, we show that by leveraging the inci-
dent investigation information output by WebWitness we
can decrease the infection rate for this type of drive-by
downloads by almost six times, on average, compared to
existing URL blacklisting approaches.
1
Remote malware downloads currently represent the most
common infection vector. In particular, the vast majority
of malware downloads occur via the browser, typically
due to social engineering attacks and drive-by down-
loads. A large body of work exists on detecting drive-
by downloads (e.g., [10, 11, 19, 23, 33, 40]), and a few
efforts have been dedicated to studying social engineer-
ing attacks [6, 31, 37]. However, very little attention has
Introduction
been dedicated to investigating and categorizing the web
browsing paths followed by users before they reach the
web pages from which the attacks start to unfold.
Our Work. In this paper, we study the web paths fol-
lowed by real users that become victims of different
types of malware downloads, including social engineer-
ing and drive-by downloads. We have two primary goals:
1) provide context to the attack by automatically identi-
fying and labeling the sequence of web pages visited by
the user prior to the attack, giving insight into how users
reach attack pages on the web; and 2) leverage these an-
notated in-the-wild malware download paths to better un-
derstand current attack trends and to develop more effec-
tive defenses.
To achieve these goals we propose a novel malware
download incident investigation system, named WebWit-
ness, that is designed to be deployed passively on en-
terprise scale networks. As shown in Figure 1, our sys-
tem consists of two main components: an attack path
traceback and categorization (ATC) module and a mal-
ware download defense (MDD) module. Given all (live)
network trafﬁc generated by a user’s browsing activities
within a time window that includes a malware download
event, the ATC module is responsible for identifying and
linking together all HTTP requests and responses that
constitute the web path followed by the user from an
“origin” node (e.g., a search engine) to the actual mal-
ware download page, while ﬁltering out all other irrele-
vant trafﬁc. Afterwards, a statistical classiﬁer automati-
cally divides all collected malware download paths into
update, social engineering and drive-by attacks. We refer
to the output of the ATC module as annotated malware
download paths (AMP).
The AMPs are continuously updated as new malware
downloads are witnessed in the live trafﬁc, and can there-
fore be used to aid the study of recent attack trends. Fur-
thermore, the AMP data is instrumental in designing and
building new defenses that can be plugged into the MDD
USENIX Association  
24th USENIX Security Symposium  1025
1
WebWitness Incident Investigation System
ATC 
Attack Path
Traceback and 
Categorization
Live Web
Trafﬁc
 AMP 
Annotated Malware 
Download Paths
MDD Malware 
Download
Defenses
Attack 
Countermeasures
- Track Infection Causes
- Study New Attack Trends
- Design New Defenses
Figure 1: WebWitness – high-level system overview.
module (see Figure 1). As an example, by investigating
real-world web paths leading to drive-by malware down-
loads, we found that it is often possible to automatically
trace back the domain names typically used in drive-
by attacks to inject malicious code into compromised
web pages (e.g., via the source of a malicious script
or iframe tag). The injected code is normally used as
an attack trigger, directing the browser towards an actual
exploit and ﬁnally to a “transparent” malware download
and execution. We empirically show that automatically
discovering and promptly blocking the domain names
serving the injected malicious code is a much more ef-
fective defense, compared to the more common approach
of blacklisting the URLs that directly serve the drive-by
browser exploits themselves or the actual malware exe-
cutables (see Section 4.4).
Main Differences from Previous Work. Most previ-
ous works that study the network aspects of malware
downloads focus on building malware detection systems,
especially for drive-by exploit kits and related attacks
(e.g., [13, 30, 38, 40]).
Our work is different from these studies, because our
goal is not to build a drive-by detection system; rather,
we aim to passively trace back and automatically label
the network events that precede different types of in-the-
wild malware downloads, including both drive-by and
social engineering attacks. We show that our investiga-
tion approach can aid in the design of more effective mal-
ware download defenses.
Some recent studies focus primarily on detecting ma-
licious redirection chains as a way to identify possible
malware download events [16,18,20,36]. WebWitness is
different because we devise a generic path trace back ap-
proach that does not rely on the properties of redirection
chains. Our work aims to provide context around mali-
cious downloads by reconstructing the full web path (not
just redirection chains) that brought the victim from an
“origin” page to the download event. In addition Web-
Witness is able to classify the cause of the download
(e.g., drive-by or social engineering) and to identify the
roles of the domains involved in the attack (e.g., trick
page, code injection, exploit, or malware hosting). We
further discuss related work in Section 6.
Summary of Contributions. In summary, we make the
following contributions:
• We investigate the web paths followed by real net-
work users who eventually fall victim to different
types of malware downloads, including social engi-
neering and drive-by downloads. Through this in-
vestigation, we provide quantitative information on
attack scenarios that have been previously explained
only anecdotally or through limited case studies.
• To enable a continuous collection and study of web
paths leading to malware download attacks, we
build a system called WebWitness. Our system can
automatically trace back and categorize in-the-wild
malware downloads. We show that this information
can then be leveraged to design more effective de-
fenses against future malware download attacks.
• We deployed WebWitness on a large academic net-
work for a period of ten months, where we col-
lected and categorized thousands of live malicious
download paths. Using these web paths, we were
able to design a new defense against drive-by down-
loads that rely on injecting malicious content into
(hacked) legitimate web pages. For example, we
show that by leveraging the incident investigation
information output by WebWitness, on average we
can decrease the infection rate for this type of drive-
by downloads by almost six times, compared to ex-
isting URL blacklisting approaches.
2
In-The-Wild Malware Download Study
Goals: In this section we report the results of a large
study of in-the-wild malware downloads captured on a
live academic network. Through this study, we aim to
create a labeled dataset of download paths that can be
used to design (including feature engineering), train, and
evaluate the ATC and MDD modules of WebWitness
shown in Figure 1. A detailed discussion of ATC and
MDD is reported in Sections 3.
2.1 Collecting Executable File Downloads
To collect executable ﬁle downloads we use deep packet
inspection to perform on-the-ﬂy TCP ﬂow reconstruc-
tion, keeping a buffer of all recent HTTP transactions
(i.e., request-response pairs) observed on a live network.
For each transaction, we check the content of the re-
sponse to determine if it contains an executable ﬁle. If
so, we retrieve all buffered HTTP transactions related to
the client that initiated the download. Namely, we store
all HTTP trafﬁc a client generated preceding (and includ-
ing) an executable ﬁle download; this allows us to study
what web path users follow before falling victim to mal-
ware downloads. All data is saved in accordance with the
1026  24th USENIX Security Symposium 
USENIX Association
2
Identifying Malicious Executables
policies set forth by our Institutional Review Board and
are protected under a nondisclosure agreement.
2.2
Since many legitimate applications are installed or up-
dated via HTTP (e.g., Windows Update), we immedi-
ately exclude all executable downloads from a manually-
compiled whitelist of domain names consisting of ap-
proximately 120 effective second level domains (e2LDs)
of popular benign sites (e.g., microsoft.com, google.
com, etc.).
For the remaining downloads, we scan
them with more than 40 antivirus (AV) engines, using
virustotal.com. In addition, we rescan them period-
ically because many “fresh” malware ﬁles are not im-
mediately detected by AV scanners, allowing us to also
take into account some “zero-day” downloads. We label
a ﬁle as malicious if at least one of the top ﬁve AV ven-
dors (w.r.t. market share) and a minimum of two other
AVs detect it as malicious. The remaining downloads
are considered benign until the rescan. In addition, we
discard binary samples that are assigned labels that are
too generic or based purely on AV detection heuristics.
2.3 Overview of Study Data
To gather our study data we deployed our collection
agent (Section 2.1) on a large academic network serv-
ing tens of thousands of users for a period of 6 months.
Notice that the system was deployed for a total of 10
months, with the study conducted in the ﬁrst 6 months
and the evaluation in the 4 months that followed (see Sec-
tion 4 details on the evaluation). During these 6 months,
we collected a total of 174,376 executable downloads
from domains that were not on our whitelist. Using
the malicious executable identiﬁcation process deﬁned in
Section 2.2, we labeled 5,536 downloads as malicious.
However, many of these malicious downloads were re-
lated to adware. As we are primarily interested in study-
ing malware downloads, because they are potentially the
most damaging ones, we devised a number of “best ef-
fort” heuristics to separate adware from malware. For
example, given a malicious ﬁle, if the majority of AV
labels contain the term “adware”, or related empirically
derived keywords that identify speciﬁc unwanted appli-
cations (e.g., “not-a-virus”, “installer”, “PUP”, etc.), we
label the ﬁle as adware. The malicious executables not
labeled as adware by our heuristics were manually re-
viewed to determine if they were truly malware. This re-
sulted in 1,064 malware downloads, with a total of 533
unique samples.
For these 533 unique malware downloads, we per-
formed extensive manual analysis of their download
paths, including reverse engineering web pages, heavy
javascript deobfuscation, complex plugin content analy-
sis, etc. This time-consuming analysis produced a set of
labeled paths, with 164 drive-by, 41 social engineering
and 328 update/drop malware download events.
Study Data Limitations: Our collection agent was de-
ployed on an existing production network monitoring
sensor. This sensor had limited hardware resources; in
addition, our data collection system had to run along-
side production software whose functionality could not
be disrupted. We therefore collected downloads only
during off-peak hours, due to trafﬁc volumes that would
oversubscribe the sensor and result in dropped packets
during other periods of the day. Thus, the malicious
downloads in our study represent only a sample of the
ones that occurred during the six month monitoring pe-
riod.
In addition, our system monitors the network in
a purely passive way; therefore, any malicious down-
loads preemptively blocked by existing defenses (e.g.,
URL blacklists such as Google Safe Browsing) were not
observed. Yet, based on our extensive manual analysis,
we believe the 533 malware downloads to be sufﬁciently
diverse and representative of the overall set of malware
downloads that occurred during our study period.
2.4 Download Path Traceback Challenges