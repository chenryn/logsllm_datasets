Attacking The Internet of 
Things
(using time)
Paul McMillan
Who am I?
There are many ways
to attack the
Internet of Things
Demo
(start)
What is a timing attack?
def authenticate_user(user, pass):
stored_hash=get_password_hash(user):
if stored_hash:
test_hash = sha1(password)
if test_hash == stored_hash:
Return True
Else:
Return False
Many Kinds
● User Enumeration
● Blind SQL Injection
● CPU Cache attacks against crypto
– Local
– Cross-VM
● Lucky 13
● Many more...
String Comparison
Timing Attacks
memcmp
while (len != 0)  
    {  
      a0 = ((byte *) srcp1)[0];  
      b0 = ((byte *) srcp2)[0];  
      srcp1 += 1;  
      srcp2 += 1;  
      res = a0 - b0;  
      if (res != 0)  
         return res;  
      len -= 1;  
    }  
MASSIVE Speedup
c = character set
n = Length of string
Brute Force: c^n
Timing Attack: c * n (* x)
(x is # tries to distinguish)
Why are they interesting?
What are the drawbacks?
Let's talk about time
Internet SF-NY 70ms
Spinning Disk 13ms
Ram Latency 83ns
L1 cache 1ns
1 cpu cycle ~0.33ns
Speed of light 
in network cable
1 meter in ~5ns
200 meters ~1µs
So... how long does each 
byte of that string 
comparison take?
nanoseconds
(on a modern
3Ghz machine)
What about something a 
little slower?
Network timing precision
Sources of Imprecision
●Graphics drivers
●Background networking
●USB Devices
●Power saving measures
●Audio devices
●Etc.
Software Timestamps
are noisy.
Let's use hardware!
(picture of i350 + adapter)
Data Collection
●Generate repeated traffic
●TCPdump the packets
●Analyze the data
●Feed back to traffic gen
Making things work
● Libpcap 1.5.0+
● TCPDump 4.6.0+ (released July 2, 2014)
● Recent-ish Kernel
Compile these from source.
In theory, this might work on OSX?
It works on Ubuntu 14.04 for me.
Nanoseconds. Ugh!
● Scapy doesn't read the pcap files
● Neither do most other packages
● Wireshark does!
● Nanosecond timestamps lose precision if you 
convert them to a float()
● So we subtract a large offset, and don't work with 
raw timestamps.
● Use integer Nanoseconds rather than float seconds
What is the Hue API?
● GET /api//lights
● Basic RESTful API
● Not very smart - always returns http status 200 
even when returning errors.
● User token is the only required auth
(no username, no sessions)
● Not very fast (can handle ~30req/s)
Hue Base Oddities
● Running FreeRTOS/6.0.5
● Network stack is dumber than a sack of rocks
● SSDP implementation ignores most parameters
● Each HTTP response is split into ~8 pieces
● HTTP stack ignores most incoming headers
● Ethernet Frame Check Sequence sometimes 
wrong
● Noisy: Broadcasts SSDP, ARPs for OpenDNS
Statistics!
Basic Review
● What is the Null Hypothesis?
● What does it mean to reject the null hypothesis?
● What are we fundamentally trying to do here?
– We're sorting samples into groups, and trying to 
identify the outlier
More Stats
● Why can't we use the t-test?
● What is the K-S test, and why does it help us 
here?
● What other approaches might we use?
[a series of yet to be 
completed example data 
graphs]
Data Prep
● Discarding data (2 standard deviations above 
the mean?)
● How to do that wrong!
● Why?
● [graph of prepped data]
Code
● In the repo now, public after the talk:
https://github.com/PaulMcMillan/2014_defcon_timing
● 3 separate but related scripts
● Don't forget to save your data for re-analysis
● Starting points for analysis, not full blown attack 
tools
[brief browse through the 
code]
[Demo discussion, 
dissection of working or 
failure. Draw some 
graphs]
Tips and Tricks
Keep the socket open
(if you can)
Configure your network 
card parameters properly
●use hardware timestamps
●turn off queues
●use nanosecond 
timestamps (gah!)
●Turn off some offloads
Make everything Quiet
● reduce extraneous traffic to the device
● Slow loris to exclude other traffic
● don't run extra stuff on your attack machine
● Profile your victim – discard noisy periods
Do a warmup run before 
starting to collect data!
Find the simplest possible 
request
Avoid statistical tests that 
assume your data is 
normal
Gather data on all 
hypothesis concurrently
Randomize the request 
order
Don't overwhelm the 
device
Don't forget you can stop 
and brute force a token
Some code short circuits if 
strings aren't the same 
length.
Try both:
Fast and Noisy
Slow and Quiet
Which one works best will 
vary.
Don't get fooled by your 
own data!
When in doubt, take more 
samples.
Questions?
http://github.com/
PaulMcMillan/
2014_defcon_timing
Repo contains updated 
slides and a copy of many 
useful references.
Attacking The Internet of 
Things
(using time)
Paul McMillan
Are my presenter notes showing up properly?
Who am I?
Paul McMillan
Security Engineer at Nebula (I build clouds)
Security team for several prominent open source 
projects (not as exciting as you think it is)
Developer outreach
Mostly Python
Like building distributed systems
Like taking theoretical vulnerabilities and making 
them practical
There are many ways
to attack the
Internet of Things
You generally own the device, so physical attacks all 
work:
Take it apart, read the flash memory
Disassemble the firmware from the manufacturer
Exploit shitty embedded C
Fuzzing
Logic errors
RF
Most of the standard network security errors are 
present too:
Random open ports
Old and vulnerable OS/application code
Etc.
We could go on forever. However,
We're here to talk about timing attacks.
Demo
(start)
This is a Philips Hue base station. That's a zigbee 
connected light. I figured they're a pretty good 
example from the “internet of things that are put on 
the internet for no good reason”
What is a timing attack?
What is a timing attack, anyway?
Well, at the most basic level, asking the computer to 
do any operation takes time. A measurable amount 
of time. A timing attack exploits this.
An attacker uses timing measurements to test 
hypotheses:
def authenticate_user(user, pass):
stored_hash=get_password_hash(user):
if stored_hash:
test_hash = sha1(password)
if test_hash == stored_hash:
Return True
Else:
Return False
This is a pretty typical example of how user 
authentication works (yes, I know, it has problems, I 
left stuff out to keep this simple)
You'll notice that if it finds a user, it does some extra 
work. In this case, that work involves calculating the 
sha1 of the provided password. That's an expensive 
operation.
An attacker can exploit this code to figure out which 
users have accounts in the system. Obviously, this 
isn't a vulnerability in all systems (some publish that 
data), but it's an unintended behavior.
Many Kinds
● User Enumeration
● Blind SQL Injection
● CPU Cache attacks against crypto
– Local
– Cross-VM
● Lucky 13
● Many more...
The point here is that these all follow a common 
pattern:
The attacker makes a guess about something
The computer uses that to compute
The attacker observes how long that takes (over 
many samples) and infers whether their hypothesis 
was correct
String Comparison
Timing Attacks
However, today we're here to talk about string 
comparison timing attacks.
These are often more difficult to exploit, and usually 
written off as completely hypothetical vulnerabilities
(Hopefully my demo today will help fix that 
misconception)
memcmp
while (len != 0)  
    {  
      a0 = ((byte *) srcp1)[0];  
      b0 = ((byte *) srcp2)[0];  
      srcp1 += 1;  
      srcp2 += 1;  