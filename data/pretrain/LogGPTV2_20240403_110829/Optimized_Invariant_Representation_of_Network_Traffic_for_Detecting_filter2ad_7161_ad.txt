### Challenges in Attacker Knowledge and Mimicry Attacks

Without knowledge of the features, an attacker faces significant challenges, and there are no known techniques to overcome these [35]. Acquiring knowledge about the classification algorithm, its parameters, or the training data is extremely difficult, if not impossible. Therefore, in our analysis, we assume that the attacker only knows the features. When classifying HTTP traffic from proxy logs, it is relatively straightforward to create a set of commonly used features, such as those listed in Table 3. These baseline flow-based features form the foundation for the analysis.

In a mimicry attack, the attacker modifies selected features of malicious flows to resemble legitimate traffic (or flows marked as benign by the classifier). In the following sections, we will analyze the scenario where the attacker performs a mimicry attack by altering flow attributes like URLs, bytes, and inter-arrival times. Other flow attributes can be similarly altered with analogous results. All modifications are categorized into two groups based on whether the proposed representation is invariant to them.

### Invariant Modifications

The proposed representation remains unaffected by the following changes:

- **Malicious Code, Payload, or Obfuscation**: Network-based security approaches extract features from network communication headers rather than the content. Thus, any changes to the payload, including the use of pluggable transports designed to bypass Deep Packet Inspection (DPI) devices, do not affect the features. Some pluggable transports (e.g., ScrambleSuit) can change the network fingerprint (packet length distribution, number of bytes, inter-arrival times, etc.). Since the proposed representation primarily relies on the dynamics of URLs within the bag, such changes do not impact its efficacy, providing a significant advantage against DPI devices.

- **Server or Hostname**: The representation operates at the bag level, where each bag is a set of flows with the same user and hostname/domain. If an attacker changes the IP address or hostname of the remote server (due to blacklisting), the representation will create a new bag with similar feature values as the previous one. This is advantageous against feeds and blacklists that require daily updates and are often outdated.

- **URL Path or Filename**: A common evasion technique is to change the path or filename from sample to sample. Since the variability of these features remains constant within each bag, such changes do not affect the proposed representation.

- **Number of URL Parameters, Their Names, or Values**: This is an alternative to changing the URL path. The proposed representation is invariant to such changes.

- **Encoded URL Content**: Hiding information in the URL string, such as through base64 encoding, changes the URL length and may influence other features. However, the proposed representation is invariant to shifting, so changing the URL length does not alter the histograms of feature differences.

- **Number of Flows**: Increasing or reducing the number of flows related to the attack does not affect the representation, as long as there are enough flows to create the feature vectors.

- **Time Intervals Between Flows**: This feature has been used in many previous approaches for its descriptive properties. While the proposed representation does not rely on this unstable feature, which can be influenced by network delays or failures, current malware samples frequently modify the inter-arrival time to remain hidden in the background traffic (see Figure 3 for details).

- **Ordering of Flows**: Changing the ordering of flows to evade detection based on patterns or predefined sequences does not affect the proposed representation, as the order of flows is irrelevant.

### Non-Invariant Modifications

The proposed representation is not invariant to the following changes:

- **Static Behavior**: The representation does not model malware behaviors where all flows associated with a malware are identical. Such behavior has no dynamics and can be classified with flow-based approaches with comparable results. In our dataset, only 10% of flows were removed due to this constraint.

- **Multiple Behaviors in a Bag**: If a bag contains multiple behaviors, such as when a target hostname is compromised and communicates with a user with both legitimate and malicious flows, the representation does not guarantee invariance against the attacker's changes. Such bags contain a mixture of legitimate and malicious flows, and their combination could lead to a different representation. Note that no malware sample in our data satisfied this condition, as the legitimate traffic must be authentic (not artificially injected) to confuse the representation.

### Additional Considerations

- **Encrypted HTTPS Traffic**: Most features presented in this paper are computed from URLs or other flow fields, which are not available in encrypted HTTPS traffic. In this case, only a limited set of flow-based features can be used, reducing the discriminative properties of the representation. However, most malware communication still uses HTTP because switching to HTTPS would harm cyber-criminals' revenues due to issues with signed certificates [18].

- **Real-Time Changes and Evolution**: If a malware sample for a given user and hostname starts changing its behavior dynamically and frequently, the bag representation will vary over time. Such inconsistency would decrease the efficacy and increase the time to detect. Creating highly dynamic malware behavior requires considerable effort, so such samples are rare in real network traffic.

### Conclusion

Our analysis shows that attackers frequently change flow features (see Figure 3). The goal of the proposed representation is to be invariant against most of these changes to successfully detect new, previously unseen malware variants.

### Experimental Evaluation

#### System Architecture

The proposed approach was deployed on top of proxy log exporters in companies of various types and sizes to detect unseen malware samples. The system architecture is shown in Figure 4. A collector connected to a proxy server stores incoming and outgoing network traffic in the form of proxy log records. Every 5-minute interval, the proxy logs are sent to the detection engine, and the results are displayed to an operator on the reporting console.

#### Specification of the Datasets

The data was obtained from several months (January - July 2015) of real network traffic from 80 international companies of various sizes in the form of proxy logs [26]. The logs contain HTTP/HTTPS flows, where one flow is defined as a group of packets from a single host and source port with a single server IP address, port, and protocol. A summary of the datasets used in the evaluation is provided in Table 2.

Malware samples are referred to as positive bags, where one positive bag is a set of records (connections) with the same source towards the same destination. Bags not labeled as malicious are considered legitimate/negative. Each bag should contain at least 5 flows to compute a meaningful histogram representation. The training dataset includes 5,000 malicious (8 malware families) and 27,000 legitimate bags, while the testing dataset consists of 2,000 malicious (32 malware families) and 241,000 legitimate bags (more than 15 million flows). Positive samples for training were acquired using publicly available feeds, services, and blacklists, while the results on the testing data were analyzed manually by security experts. Each HTTP flow consists of the following fields: user name, srcIP, dstIP, srcPort, dstPort, protocol, number of bytes, duration, timestamp, user agent, and URL. From these flow fields, we extracted 115 flow-based features typically used in prior art (Table 3).

This setup simulates the creation of new threat types to evade detection. A benchmarking signature-based network security device (widely used in many companies) detected only 2% of the malicious bags from the testing set. Training a classifier for each category separately is easier but typically leads to overfitting and inability to detect further variations without retraining.

### Visualization

Figure 3 shows the normalized entropy of feature values for 32 malware categories, indicating the variability of each feature within each malware category. Yellow color denotes frequent changes, while blue indicates consistent values. The figure provides insights into the dynamic nature of malware features.

Figure 4 provides an overview of the system architecture, illustrating the flow of data from the proxy server to the detection engine and the reporting console.