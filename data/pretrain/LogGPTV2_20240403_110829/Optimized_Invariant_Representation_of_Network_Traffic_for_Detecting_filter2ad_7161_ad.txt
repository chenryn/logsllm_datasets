ters. Without the knowledge of the features, the attacker
is faced with major challenges and there is not any known
technique for addressing them [35].
Acquire knowledge of classiﬁcation algorithm with its
parameters or the training data is hard if not impossi-
ble. Therefore, in the following analysis, we assume that
only the features are known to the attacker. When clas-
sifying HTTP trafﬁc from proxy logs, it is actually not
difﬁcult to create a set of common features widely used
in practice. These features are the baseline ﬂow-based
features, such as those described in Table 3. When the
attacker performs a mimicry attack, selected features of
malicious ﬂows are modiﬁed to mimic legitimate trafﬁc
(or ﬂows marked as benign by the classiﬁer).
In the following, we will analyze the case when the
attacker performs a mimicry attack to evade detection
by modifying ﬂow attributes, such as URLs, bytes, and
inter-arrival times. Other ﬂow attributes can be altered in
a similar way with analogical results. All modiﬁcations
are divided into two groups, depending on whether the
proposed representation is invariant against them.
The proposed representation is invariant to the follow-
ing changes.
• Malicious code, payload, or obfuscation – The ad-
vantage of all network-based security approaches is
that they extract features from headers of network
communication rather than from the content. As
a result, any changes to the payload including the
usage of pluggable transports designed to bypass
Deep Packet Inspection (DPI) devices will have no
effect on the features. Some pluggable transports
(e.g. ScrambleSuit) are able to change its net-
work ﬁngerprint (packet length distribution, num-
ber of bytes, inter-arrival times, etc.). Since the pro-
posed representation mainly relies on the dynamics
of URLs of ﬂows in the bag, such changes will not
negatively impact the efﬁcacy, which is a great ad-
vantage against DPI devices.
• Server or hostname – The representation operates
at the level of bags, where each bag is a set of ﬂows
with the same user and hostname/domain. If an at-
tacker changes an IP address or a hostname of the
remote server (because the current one has been
blacklisted), the representation will create a new
bag with similar feature values as in the previous
bag with the original IP address or hostname, which
is a great advantage against feeds and blacklists that
need to be updated daily and are always behind.
• URL path or ﬁlename – Straightforward and easy
way of evading existing classiﬁers using ﬂow-based
features or URL patterns is the change in path or
ﬁlename from sample to sample. Since the variabil-
ity of these features remains constant within each
bag, these changes will also have no effect on the
proposed representation.
• Number of URL parameters, their names or val-
ues – This is an alternative to URL path changes.
• Encoded URL content – Hiding information in the
URL string represents another way to exﬁltrate sen-
sitive data. When the URL is encrypted and en-
coded (e.g. with base64), it changes the URL length
814  25th USENIX Security Symposium 
USENIX Association
8
and may globally inﬂuence other features as well.
As the proposed representation is invariant against
shifting, changing the URL length will not change
the histograms of feature differences.
• Number of ﬂows – Another option for an attacker
to hide in the background trafﬁc is increasing or re-
ducing the number of ﬂows related to the attack.
Such modiﬁcation of the attack does not affect the
representation, as long as there are enough ﬂows to
create the feature vectors.
• Time intervals between ﬂows – This feature has
been used in many previous approaches for its de-
scriptive properties.
It is an alternative way to
the proposed representation how to model a rela-
tionship between individual ﬂows. Our analysis
revealed that current malware samples frequently
modify the inter-arrival time to remain hidden in the
background trafﬁc – see Figure 3 for details. There-
fore, we do not rely on this unstable feature that can
be also inﬂuenced by network delays or failures.
• Ordering of ﬂows – An attacker can easily change
the ordering of ﬂows to evade detection based on
patterns or predeﬁned sequences of ﬂows. For the
proposed representation the ordering of ﬂows does
not matter.
The proposed representation is not invariant to the fol-
lowing changes.
• Static behavior – The representation does not
model malware behaviors, where all ﬂows associ-
ated with a malware are identical. Such behavior
has no dynamics and can be classiﬁed with ﬂow-
based approaches with comparable results. In our
dataset, only 10% of ﬂows were removed because
of this constrain.
• Multiple behaviors in a bag – In case more behav-
iors are associated with a bag, such as when a target
hostname is compromised and communicates with
a user with legitimate and malicious ﬂows at once,
the representation does not guarantee the invariance
against the attacker’s changes. Such bags contain a
mixture of legitimate and malicious ﬂows and their
combination could lead to a different representation.
Note that there wasn’t any malware sample in our
data that would satisfy this condition, since the le-
gitimate trafﬁc has to be authentic (not artiﬁcially
injected) to confuse the representation.
Category
Training Positives
Click-fraud mw
DGA malware
Dridex
IntallCore
Monetization
Mudrop
Poweliks
Zeus
Testing Positives
Training Negatives
Testing Negatives
Samples
Signatures
Flows
132,756
12,091
8,629
8,402
17,317
3,107
37,142
11,648
34,420
43,380
862,478
15,379,466
Bags
5,011
819
397
264
1,332
135
701
132
1,275
2,090
26,825
240,549
Recall
0.15
0.29
0.58
0.12
0.00
0.00
0.00
0.00
0.19
0.02
Table 2: Number of ﬂows and bags of malware cate-
gories and legitimate background trafﬁc used for train-
ing and testing the proposed representation and classiﬁer.
Right-most column shows the amount of bags that were
found and blocked by an existing signature-based device.
Majority of the malicious bags from the test were missed,
as the device, relying on a static database of signatures,
was not able to catch evolving versions and new types of
the malicious behaviors.
of ﬂow-based features can be used, which reduces
the discriminative properties of the representation.
However, majority of malware communication is
still over HTTP protocol, because switching to
HTTPS would harm the cyber-criminals’ revenues
due to problems with signed certiﬁcates [18].
• Real-time changes and evolution – In case a mal-
ware sample for a given user and hostname would
start changing its behavior dynamically and fre-
quently, the bag representation will vary in time.
Such inconsistency would decrease the efﬁcacy re-
sults and enlarge the time to detect. However, creat-
ing such highly dynamic malware behavior requires
a considerable effort, therefore we do not see such
samples very often in the real network trafﬁc.
We conclude our analysis with the observation, that
attackers change ﬂow features very frequently (see Fig-
ure 3). The goal of the proposed representation is to be
invariant against most of the changes to successfully de-
tect new, previously unseen malware variants.
8 Experimental Evaluation
• Encrypted HTTPS trafﬁc – Most features pre-
sented in this paper are computed from URLs or
other ﬂow ﬁelds, that are not available in encrypted
HTTPS trafﬁc.
In this case, only a limited set
The proposed approach was deployed on the top of proxy
logs exporters in companies of various types and sizes
to detect unseen malware samples. The system archi-
tecture is shown in Figure 4. Collector connected to a
USENIX Association  
25th USENIX Security Symposium  815
9
s
e
i
r
o
g
e
t
a
C
e
r
a
w
a
M
l
Normalized Entropy of Feature Values for 32 Malware Categories
5
10
15
20
25
30
1
2
3
4
5
6
7
8
Features
9
10
11
12
13
14
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
Figure 3: Flow-based features (columns) are chang-
ing for most of the malware categories (rows). The
ﬁgure uses normalized entropy to show the variability
of each feature within each malware category. Yellow
color denotes that the feature value is changed very of-
ten, while blue color means that the feature has the
same values for all samples of the given category. Fea-
tures: 1-URL, 2-interarrival time, 3-URL query values,
4-URL path, 5-number of ﬂows, 6-number of down-
loaded bytes, 7-server IP address, 8-hostname, 9-URL
path length, 10-URL query names, 11-ﬁlename, 12-
ﬁlename length, 13-number of URL query parameters,
14-number of uploaded bytes. Malware categories:
1-Click-fraud (amz), 2-Asterope family 1, 3-Asterope
family 2, 4-Beden, 5-Click-fraud, 6-DGA, 7-Dridex, 8-
Exﬁltration, 9-InstallCore, 10-Mudrop Trojan Dropper,
11-Monetization, 12-Zeus, 13-Mudrop, 14-MultiPlug,
15-mixture of unknown malware, 16-Click-fraud (track-
ing), 17-Poweliks family 1, 18-Poweliks family 2, 19-
Qakbot Trojan, 20-Rerdom Trojan, 21-Ramnit worm,
22-RVX, 23-Sality, 24-Threats related to a trafﬁc direc-
tion system (TDS) 1, 25-TDS 2, 26-TDS 3, 27-Tinba
Trojan, 28-C&C tunneling, 29-Upatre, 30-Vawtrak, 31-
Vittalia, 32-Zbot. Details about the malware categories
are given in Section 8.
proxy server stores incoming and outgoing network traf-
ﬁc in form of proxy log records. The proxy logs represent
information about individual HTTP/HTTPS connections
or ﬂows. Each 5-minute interval, the proxy logs are sent
to the detection engine, where the proposed method de-
tects the malicious behaviors. Report created from the
malicious behaviors is then displayed on a console to an
operator. The next section provides the speciﬁcation of
datasets and malware categories, followed by the results
from the experimental evaluation. Next section provides
the speciﬁcation of datasets and malware categories, fol-
lowed by the results from the experimental evaluation.
8.1 Speciﬁcation of the Datasets
The data was obtained from several months (January -
July 2015) of real network trafﬁc of 80 international
Collector
(Proxy Logs)
Detection
Engine
Reporting
Console
Public IPs
Internet
Intranet (LAN)
Firewall
Proxy Server
Figure 4: Overview of the system architecture. Collector
connected to a proxy server stores incoming and outgo-
ing network trafﬁc in form of proxy log records. Each
5-minute interval, the proxy logs are sent to the detec-
tion engine and the results are displayed to an operator
on the reporting console.
companies of various sizes in form of proxy logs [26].
The logs contain HTTP/HTTPS ﬂows, where one ﬂow is
one connection deﬁned as a group of packets from a sin-
gle host and source port with a single server IP address,
port, and protocol. Summary of the datasets used in the
evaluation is described in Table 2.
Malware samples will be referred as positive bags,
where one positive bag is a set of records (connections)
with the same source towards the same destination. The
bags not labeled as malicious are considered as legiti-
mate/negative. Each bag should contain at least 5 ﬂows
to be able to compute a meaningful histogram representa-
tion. Training dataset contains 5k malicious (8 malware
families) and 27k legitimate bags, while testing dataset
is consist of 2k malicious ((cid:31) 32 malware families) and
241k legitimate bags (more than 15 million ﬂows). Posi-
tive samples for training were acquired using many types
of publicly available feeds, services, and blacklists, while
the results on the testing data were analyzed manually by
security experts. Each HTTP ﬂow consists of the follow-
ing ﬁelds: user name, srcIP, dstIP, srcPort, dstPort, pro-
tocol, number of bytes, duration, timestamp, user agent,
and URL. From these ﬂow ﬁelds, we extracted 115 ﬂow-
based features typically used in the prior art (Table 3).
This means that training and testing data are com-
posed of completely different malware bags from dif-
ferent malware families, which makes the classiﬁcation
problem much harder. This scenario simulates the fact
that new types of threats are created to evade detection.
The benchmarking signature-based network security de-
vice (widely used in many companies) was able to de-
tect only 2% of the malicious bags from the testing set.
Training a classiﬁer for each category separately is an
easier task, however such classiﬁers are typically over-
ﬁtted to a single category and cannot detect further vari-
ations without retraining.
816  25th USENIX Security Symposium 
USENIX Association
10
80
60
40
20
0
-20
-40
-60
2
i
n
o
s
n
e
m
D
i
Projection of Feature Vectors of the Flow-Based Representation into 2D
Legitimate
Malicious
2
i
n
o
s
n
e
m
D
i
Projection of Feature Vectors of the Proposed Representation into 2D