(cid:19)
so we evaluate this se(cid:138)ing empirically in Section 6.
Bandwidth. (cid:140)e bandwidth required for a bucketization scheme
is determined by the size of the buckets. (cid:140)e maximum size of the
buckets can be determined using a balls-and-bins approach [20],
assuming the client picks a bucket randomly from the possible set of
buckets β(s) for a credential s, and β(s) also maps s to a random set
s∈ ˜S |β(s)| credentials (balls) are “thrown”
into n = |B| buckets. If m > |B| · log |B|, then standard results [20]
give that the maximum number of passwords in a bucket is less than
n ·
, with very high probability 1 − o(1). We
m
will use this formula to compute an upper bound on the bandwidth
requirement for speci(cid:128)c bucketization schemes.
of buckets. In total m =
(cid:18)
(cid:113) n log n
≤ 2 · m
n
For HPB schemes, each credential will be mapped to a random
bucket if we assume that the hash function acts as a random oracle.
For FSB, since we only randomly choose the (cid:128)rst bucket and map a
credential to a range of buckets starting with the (cid:128)rst one, it is not
clear that the set of buckets a credential is mapped to is random. We
also show empirically that these bounds hold for the C3 schemes.
1 +
m
4 HASH-PREFIX-BASED BUCKETIZATION
Hash-pre(cid:128)x-based bucketization (HPB) schemes are a simple way
to divide the credentials stored by the C3 server. In this type of C3
scheme, a pre(cid:128)x of the hash of the credential is used as the criteria
to group the credentials into buckets — all credentials that share
the same hash-pre(cid:128)x are assigned to the same bucket. (cid:140)e total
number of buckets depends on l, the length of the hash-pre(cid:128)x. (cid:140)e
number of credentials in the buckets depends on both l and | ˜S|. We
will use H(l)(·) to denote the function that outputs the l-bit pre(cid:128)x
of the hash H(·). (cid:140)e client shares the hash pre(cid:128)x of the credential
they wish to check with the server. While a smaller hash pre(cid:128)x
reveals less information to the server about the user’s password, it
also increases the size of each bucket held by the server, which in
turn increases the bandwidth overhead.
Hash-pre(cid:128)x-based bucketization is currently being used for cre-
dential checking in industry : HIBP [6] and GPC [44]. We introduce
a new HPB protocol called IDB that achieves zero security loss for
any query budget. Below we will discuss the design details of these
three C3 protocols.
HIBP [6]. HIBP uses HPB bucketization to provide a password-
only C3 service. (cid:140)ey do not provide compromised username-
password checking. HIBP maintains a database of leaked passwords,
which contains more than 501 million passwords [6]. (cid:140)ey use the
SHA1 hash function, with pre(cid:128)x length l = 20; the leaked dataset is
partitioned into 220 buckets. (cid:140)e pre(cid:128)x length is chosen to ensure
no bucket is too small or too big. With l = 20, the smallest bucket
has 381 passwords, and the largest bucket has 584 passwords [19] .
(cid:140)is e(cid:130)ectively makes the user’s password k-anonymous. However,
k-anonymity provides limited protection, as shown by numerous
prior works [35, 38, 50] and by our security evaluation.
(cid:140)e passwords are hashed using SHA1 and indexed by their hash
pre(cid:128)x for fast retrieval. A client computes the SHA1 hash of their
password w and queries HIBP with the 20-bit pre(cid:128)x of the hash;
the server responds with all the hashes that share the same 20-bit
pre(cid:128)x. (cid:140)e client then checks if the full SHA1 hash of w is present
among the set of hashes sent by the server. (cid:140)is is a weak form
of PSI that does not hide the leaked passwords from the client —
the client learns the SHA1 hash of the leaked passwords and can
perform brute force cracking to recover those passwords.
HIBP justi(cid:128)es this design choice by observing that passwords in
the server side leaked dataset are publicly available for download
on the Internet. (cid:140)erefore, HIBP lets anyone download the hashed
passwords and usernames. (cid:140)is can be useful for parties who want
to host their own leak checking service without relying on HIBP.
However, keeping the leaked dataset up-to-date can be challenging,
making a third-party C3 service preferable.
HIBP trades server side privacy for protocol simplicity. (cid:140)e
protocol also allows utilization of caching on content delivery net-
works (CDN), such as Cloud(cid:131)are.4 Caching helps HIBP to be able
to serve 8 million requests a day with 99% cache hit rate (as of
August 2018) [18]. (cid:140)e human-chosen password distribution is
“heavy-headed”, that is a small number of passwords are chosen by
a large number of users. (cid:140)erefore, a small number of passwords
are queried a large number of times, which in turn makes CDN
caching much more e(cid:130)ective.
GPC [44, 45]. Google provides a username-password C3 service,
called Password Checkup (GPC). (cid:140)e client — a browser extension
— computes the hash of the username and password together using
the Argon2 hash function (con(cid:128)gured to use a single thread, 256
MB of memory, and a time cost of three) with the (cid:128)rst l = 16 bits
to determine the bucket identi(cid:128)er. A(cid:137)er determining the bucket,
the client engages in a private set intersection (PSI) protocol with
the server. (cid:140)e full algorithm is given in Figure 5. GPC uses a
computationally expensive hash function to make it more di(cid:129)cult
for an adversary to make a large number of queries to the server.
GPC uses an OPRF-based PSI protocol [45]. Let Fa(x) be a func-
tion that (cid:128)rst calls the hash function H on x, then maps the hash
output onto an elliptic curve point, and (cid:128)nally, exponentiates the
elliptic curve point (using elliptic curve group operations) to the
power a. (cid:140)erefore it holds that (Fa(x))b = Fab(x).
(cid:140)e server has a secret key κ which it uses to compute the values
yi = Fκ(ui (cid:107)wi) for each (ui , wi) pair in the breach dataset. (cid:140)e
client shares with the server the bucket identi(cid:128)er b and the PRF
output x = Fr(u(cid:107)w), for some randomly sampled r. (cid:140)e server
returns the bucket zb = {yi
the client completes the OPRF computation by computing ˜x = y
Fκ(u(cid:107)w), and checking if ˜x ∈ zb.
(cid:140)e GPC protocol is signi(cid:128)cantly more complex than HIBP, and
it does not allow easy caching by CDNs. However, it provides
secrecy of server-side leaked data — the best case a(cid:138)ack is to follow
the protocol to brute-force check if a password is present in the
leak database.
Bandwidth. HPB assigns each credential to only one bucket;
w ∈ ˜S |β(w)| = | ˜S| = N . (cid:140)e total number of
buckets is n = 2l . Following the discussion from Section 3, the
maximum bandwidth for a HPB C3S should be no more than 2· m
=
n
2 · N
2l
We experimentally veri(cid:128)ed bandwidth usage, and the sizes of
(cid:12)(cid:12) H(ui (cid:107)wi) = b} and y = xκ. Finally,
therefore, m = 
1
r =
.
4h(cid:138)ps://www.cloud(cid:131)are.com/
˜S = {(u1, w1), . . . , (uN , wN )}
Precomputation by C3 Server
Let
∀j ∈ [0, . . . , 2l − 1]
zj ←(cid:8)Fκ(ui (cid:107)wi)(cid:12)(cid:12) H(l)(u (cid:107)w) = j)(cid:9)
zj ←(cid:8)Fκ(ui (cid:107)wi)(cid:12)(cid:12) H(l)(u) = j)(cid:9)
C3 server
Input: κ, z
x,b
−−−−−−−−→
y,zb←−−−−−−−−−
y = x κ
Client
Input: (u, w)
r ←$ Zq
x ← Fr (u (cid:107)w)
b ← H(l)(u (cid:107)w)
b ← H(l)(u)
1
r
˜x ← y
Return ˜x ∈ zb
Figure 5: Algorithms for GPC, and the change in IDB given
in the box. F(·)(·) is a PRF.
the buckets for HIBP, GPC, and IDB are given in Section 7.
Security. HPB schemes like HIBP and GPC expose a pre(cid:128)x of
the user’s password (or username-password pair) to the server. As
discussed earlier, we assume the a(cid:138)acker knows the username of
the target user. In the uncompromised se(cid:138)ing — where the user
identi(cid:128)er does not appear in the leaked data available to the a(cid:138)acker,
we show that giving the a(cid:138)acker the hash-pre(cid:128)x with a guessing
budget of q queries is equivalent to giving as many as q · |B| queries
(with no hash-pre(cid:128)x) to the a(cid:138)acker. As a reminder, |B| is the
number of buckets. For example, consider a C3 scheme that uses
a 5-character hash pre(cid:128)x as a bucket identi(cid:128)er (220 buckets). If
an a(cid:138)acker has 10 guesses to (cid:128)gure out a password, then given a
bucket identi(cid:128)er, they can eliminate any guesses on their list that
don’t belong in that bucket. If their original guesses are distributed
equally across all buckets, then knowing the 5-character hash pre(cid:128)x
can help them get through around q · 220 of those guesses.
Theorem 4.1. Let βHPB : S (cid:55)→ B be the bucketization scheme
that, for a credential s ∈ S, chooses a bucket that is a function of
H(l)(s), where s contains the user’s password. (cid:138)e advantage of an
a(cid:136)acker in this se(cid:136)ing against previously uncompromised users is
Advb-gs
βHPB(q) ≤ Advgs(q · |B|) .
Proof: First, note that |βHPB(s)| = 1, for any input s, as every
password is assigned to exactly one of the buckets. Following the
discussion from Section 3, assuming independence of usernames
and passwords in the uncompromised se(cid:138)ing, we can compute the
advantage against game BucketGuess as
Pr[W = wi] ≤ Advgs(q · |B|) .
We relax the α(b) notation to denote set of passwords (instead of
username-password pairs) assigned to a bucket b. (cid:140)e inequality
follows from the fact that each password is present in only one
bucket. If we sum up the probabilities of the top q passwords in
each bucket, the result will be at most the sum of the probabilities
of the top q · |B| passwords. (cid:140)erefore, the maximum advantage
βHPB(q) =
b∈B
Advb-gs
q
i =1
max
w1, ...,wq
∈α(b)
achievable is Advgs(q · |B|).
(cid:140)eorem 4.1 only provides an upper bound on the security loss.
Moreover, for the compromised se(cid:138)ing, the analytical formula in
Equation (2) is not very informative. So, we use empiricism to (cid:128)nd
the e(cid:130)ective security loss against compromised and uncompro-
mised users. We report all security simulation results in Section 6.
Notably, with GPC using a hash pre(cid:128)x length l = 16, an a(cid:138)acker
can guess passwords of 59.7% of (previously uncompromised) user
accounts in fewer than 1,000 guesses, over a 10x increase from
the percent it can compromise without access to the hash pre(cid:128)x.
(See Section 6 for more results.)
Identi(cid:128)er-based bucketization (IDB). As our security analysis
and simulation show, the security degradation of HPB can be high.
(cid:140)e main issue with those protocols is that the bucket identi(cid:128)er is
a deterministic function of the user password. We give a new C3
protocol that uses HPB style bucketing, but based only on username.
We call this identi(cid:128)er-based bucketization (IDB). IDB is de(cid:128)ned for
username-password C3 schemes.
IDB is a slight modi(cid:128)cation of the protocol used by GPC— we use
the hash-pre(cid:128)x of the username, H(l)(u), instead of the hash-pre(cid:128)x
of the username-password combination, H(l)(u (cid:107) w), as a bucket
identi(cid:128)er. (cid:140)e scheme is described in Figure 5, using the changes
in the boxed code. (cid:140)e bucket identi(cid:128)er is computed completely
independently of the password (assuming the username is indepen-
dent of the password). (cid:140)erefore, the a(cid:138)acker gets no additional
advantage by knowing the bucket identi(cid:128)er.
Because IDB uses the hash-pre(cid:128)x of the username as the bucket
identi(cid:128)er, two hash computations are required on the client side for
each query (as opposed to one for GPC). With most modern devices,
this is not a signi(cid:128)cant computing burden, but the protocol latency
may be impacted, since we use a slow hash (Argon2) for hashing
both the username and the password. We show experimentally how
the extra hash computation a(cid:130)ects the latency of IDB in Section 7.
Since in IDB, the bucket identi(cid:128)er does not depend on the user’s
password, the conditional probability of the password given the
bucket identi(cid:128)er remains the same as the probability without know-
ing the bucket identi(cid:128)er. As a result, exposing the bucket identi(cid:128)er
does not lead to security loss.
Theorem 4.2. With the IDB protocol, for all q ≥ 0
Advb-gs
IDB(q) = Advgs(q).
Proof: Because the IDB bucketization scheme does not depend on
the password, Pr[B = b | W = w ∧ U = u] = Pr[B = b | U = u].
We can upper bound the success rate of an adversary in the
BucketGuessIDB game by
Advb-gs
IDB(q)
max
w1, ...,wq
Pr[W = wi ∧ U = u] · Pr[B = b | U = u]
Pr[B = b | U = u]
max
w1, ...,wq
Pr[W = wi ∧ U = u]
u
b
= Advgs(q)
(cid:140)e (cid:128)rst step follows from independence of password and bucket
=
=
u

(cid:32)
b
q
i =1
(cid:33)
q
i =1
choice, and the third step is true because there is only one bucket
for each username.
We would like to note, though IDB reveals nothing about the
password, learning the username becomes easier (compared to GPC)
— an a(cid:138)acker can narrow down the potential users a(cid:137)er seeing the
bucket identi(cid:128)er. While this can be concerning for user’s privacy,
we believe the bene(cid:128)t of not revealing anything about the user’s
password outweighs the risk.
Unfortunately, IDB does not work for the password-only C3
se(cid:138)ing because it requires that the server store username-password
pairs. In the next section we introduce a more secure password-only
C3 scheme.
5 FREQUENCY-SMOOTHING
BUCKETIZATION
In the previous section we showed how to build a username-password
C3 service that does not degrade security. However, many services,
such as HIBP, only provide a password-only C3 service. HIBP does
not store username-password pairs so, should the HIBP server ever
get compromised, an a(cid:138)acker cannot use their leak database to
mount credential stu(cid:129)ng a(cid:138)acks. Unfortunately, IDB cannot be
extended in any useful way to protect password-only C3 services.
(cid:140)erefore, we introduce a new bucketization scheme to build
secure password-only C3 services. We call this scheme frequency-
smoothing bucketization (FSB). FSB assigns a password to multiple
buckets based on its probability — frequent passwords are assigned
to many buckets. Replicating a password into multiple buckets e(cid:130)ec-
tively reduces the conditional probabilities of that password given
a bucket identi(cid:128)er. We do so in a way that makes the conditional
probabilities of popular passwords similar to those of unpopular
passwords to make it harder for the a(cid:138)acker to guess the correct
password. FSB, however, is only e(cid:130)ective for non-uniform creden-
tial distributions, such as password distributions.5 (cid:140)erefore, FSB
cannot be used to build a username-password C3 service.
Implementing FSB requires knowledge of the distribution of
human-chosen passwords. Of course, obtaining precise knowledge
of the password distribution can be di(cid:129)cult; therefore, we will
use an estimated password distribution, denoted by ˆps. Another
parameter of FSB is ¯q, which is an estimate of the a(cid:138)acker’s query