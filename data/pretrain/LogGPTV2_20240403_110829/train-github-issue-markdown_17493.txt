### System info
  * Playwright Version: 1.32.3
  * Operating System: Windows 10 Pro
  * Browser: Chromium
  * Other info:
### Source code
  * [x ] I provided exact source code that allows reproducing the issue locally.
**Link to the GitHub repository with the repro**
or
**Config file**  
import { defineConfig, devices } from '@playwright/test';
export default defineConfig({  
testMatch: '*.e2e.test.ts',  
testDir: './tests',  
fullyParallel: true,  
forbidOnly: !!process.env.CI,  
retries: process.env.CI ? 2 : 0,  
workers: process.env.CI ? 1 : undefined,  
reporter: 'html',  
use: {  
headless: true,  
trace: 'on-first-retry',  
screenshot: 'only-on-failure',  
video: 'retain-on-failure',  
},
projects: [  
// Setup project for authentication and capturing the authenticated state in
user.json file.  
{  
name: 'setup',  
testDir: './src/common',  
testMatch: /.*.e2e.setup.ts/,  
},  
{  
name: 'chromium',  
use: {  
...devices['Desktop Chrome'],  
// Use prepared auth state.  
storageState: 'playwright/.auth/user.json',  
},  
dependencies: ['setup'],  
},  
]  
});
**Test file (self-contained)**
    import { test as setup, expect } from '@playwright/test'
    import {fxLoginConfig} from '../config/test-tenant-config'
    const authFile = 'playwright/.auth/user.json';
    //This test will authenticate and store the state of authentication in a cookie. That cookie will be used to run all the tests in chromium project. 
    setup('authenticate', async ({ page,context}) => {
        const managerTabName= 'manager';
        await context.clearCookies();
        await setup.step('authenticate', async() =>{
          await page.goto(fxLoginConfig.address);
          const logo = page.locator('data-testid=login-logo');
          await expect(logo).toBeVisible();
          await page.locator('data-testid=login-page-wrapper');   
          await page.locator('data-testid=input-login-email-input').fill(fxLoginConfig.username);
          await page.locator('data-testid=input-login-pw-input').fill(fxLoginConfig.username);
          await page.locator('data-testid=login-button').click();
          await page.waitForURL(/.*\/manager/);
          await expect(page).toHaveURL(/.*\/manager/);
          await expect(page.locator(`id=${managerTabName}`)).toBeVisible();    
          (await page.context().storageState({ path: authFile }));
        });
      });
    navigation.ts
    import { test, expect, Page } from '@playwright/test';
    import {navigateToSideBar, navigateToTab,clickBackButton} from '../src/common/navigation';
    import {performanceMark, performanceMeasure} from '../src/common/';
    test.describe('navigation flow tests', () => {
      const manager = 'manager',
       modeler:string ='modeler',
       test.beforeEach(async ({ page }, testInfo) => {
        console.log(`Running ${testInfo.title}`);
        await page.goto('/');
      });
      test('navigate from Manager Tab to Modeler> Members ', async ({ page },testinfo) => {  
        await performanceMark("mark1"); 
        await test.step('navigate to Modeler Tab', async() =>{
          await goToModlerTab(page, modeler);
        })
        await test.step('navigate to Data Modeler ', async() =>{    
          await navigateToSideBar(page,'Data Modeler',modeler);
        })
        await test.step('navigate to Members', async() =>{    
          await navigateToSideBar(page,'Members',members);
        })
        await performanceMark("mark2");  
        await performanceMeasure(testinfo.title,"measuring Navigation", "mark1", "mark2")
      });
**Steps**
  * [Run the test]
  * [...]
**Expected**
Authentication test should run first, which updated the storage state in
user.json file. Then Navigation test runs based on logged in state.
**Actual**  
When running the tests, user.json file gets updated at the end of test run,
rather than at the end of dependency project test run.
1st run, navigation test gives error 'SyntaxError: Error reading storage state
from playwright/.auth/user.json:  
Unexpected end of JSON input'.  
Authentication test runs and passes and updated user.json file.
2nd run, since user.json is now populated, the navigation test runs.
First Run: ![image](https://user-
images.githubusercontent.com/114775539/242415307-dc86af53-3914-48b5-bf8b-79e3dfcd5ce1.png)
2nd run:  
![image](https://user-
images.githubusercontent.com/114775539/242415664-49274d6c-c313-40aa-b02c-dae9d9f3d812.png)