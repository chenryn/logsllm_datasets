need to be protected, as the address to which the program control
flow is transferred is fixed. Within the context of this paper, a direct
call is a forward-edge based program transfer where the target
address is determined by the compiler and available during compile
time. Further, we assume that this address is write-protected and
cannot be overwritten during runtime.
In contrast, the situation is different for callees which are called
through forward direct calls. Since the attacker may manipulate the
callee return address on the stack, these backward edges need to
be protected. ρFEM handles backward edges returning from direct
calls by checking their IDs. Note that each direct function gets its
own ID. Direct callsites only have a single target, for which a single
valid ID can be determined.
5.2 Handling Virtual Calls
In this subsection, we explain how ρFEM handles virtual function
calls. At a high level, ρFEM uses a modified version of the inter-
leaved virtual tables (IVT) metadata as presented by Bounov et
al. [9]. More specifically, it constructs backward-edge mappings of
legitimate return address sets for virtual functions (callees) by first
building the virtual table hierarchy and enforcing the respective
legitimate virtual table sub-hierarchy for each callee. The matching
callees are identified after examining the offset addresses collected
within the virtual tables. This is achieved while the matching callers
are identified by searching through all virtual callsites. This meta-
data consists of virtual table hierarchies for all class hierarchies of
a program compiled with the Clang/LLVM compiler. Additionally,
we modify this metadata layout to have it contain: (1) virtual table
entry information, and (2) virtual table offsets which are used dur-
ing our analysis. ρFEM uses this modified metadata to determine
legitimate callsites and to infer forward-edge information.
The Invariant. In order to construct the forward-edge target
set for a virtual callsite, we need to be able to represent the IDs
of the functions contained in this set as a compact range as this
allows a more efficient type of check. Note, that we do not need
a total ordering of all function IDs. Instead, we have to be able to
build compact (no gaps) ranges. Meanwhile, we note that the type
of an object at a particular callsite can either be of precise class
type or of any subclass type thereof. Furthermore, if the object
has dynamic type of precise class, then, per definition, the callsite
uses the implementation provided by the base class. Therefore, any
subclass of a precise class can at most call the implementation found
in the base class or an override of this implementation. Thus, the sub-
graph of the virtual table hierarchy rooted at the base class contains
all possible function implementations (i.e., all callees for this callsite).
Hence, this sub-graph provides the set of all functions which can
be called at this particular callsite, i.e., the target set of the callsite.
Next, ρFEM uses this sub-graph to assign IDs in order to ensure
the previously described invariant. There are four steps, which are
explained in their order of execution in the following. Note that
the algorithm’s Step I up to Step III run at LTO, i.e., at compile-time
after static linking, while Step IV of the analysis runs in the LLVM
back-end, i.e., after LLVM-IR was lowered to machine instructions,
and right before the program binary is emitted.
Step I – Constructing Function Hierarchies. Using the mod-
ified virtual table hierarchy, a regular class hierarchy is recon-
structed, i.e., if a class has multiple virtual tables, these are merged
into a single node in the class hierarchy. Figure 5(a) shows such a
class hierarchy reconstruction process. Note that each box depicted
in Figure 5 represents a virtual table and the first line in each vir-
tual table states the class name from which the virtual table was
inherited.
The reconstructed class hierarchy depicted in Figure 5(a) allows
ρFEM to collect information about each virtual function implemen-
tation. This information is represented as follows. First, the class in
which the implementation was defined, and second, whether this
class is the root class of the given function. In case it is not the root
class, then the implementation has been overridden by a sub-class
implementation, i.e.,ρFEM is able to analyze all function overrides
by using the virtual table metadata.
This information is extracted from the class hierarchy as follows.
ρFEM starts by topologically sorting the class hierarchy, which en-
sures that each parent is visited before any of its children. Then,
the topologically-sorted list of classes is traversed and each func-
tion entry in the virtual tables of the class is inspected. In case a
class contains a function implementation that was not previously
encountered, the function is regarded as it would be implemented
by this class. This happens, due to the fact that parents are visited
before their children during pre-order traversal.
Lastly, to differentiate between root classes and overridden classes
(inheriting classes), ρFEM inspects the primary virtual table of the
direct parent. In case such a parent class exists and the parents’
primary virtual table contains an entry at the same offset as the
function in the child, then this child overrides the entry in the
parent with a new function implementation. Otherwise, the child
471ρFEM: Efficient Backward-edge Protection Using Reversed Forward-edge Mappings
ACSAC 2020, December 7–11, 2020, Austin, USA
(a)
(b)
Figure 5: Steps to compute the IDs and the range for function B::g() (marked with red font color, upper box in (c)). (a) Step
I: Building class hierarchies from virtual table hierarchies. (b) Step II: Collecting root class information of functions (shaded
in red font color) and overrides (shaded in green font color). (c) Step III: Determining ranges, calculating their widths and
generating IDs for e.g., B::g().
(c)
defines a new function and becomes the root class for this func-
tion. Figure 5(b) shows the root class and the override information
inferred within this step.
Step II – Function-wise Traversal and Analysis. The root
class information from Step I allows ρFEM to inspect the sub-graph
of the virtual table hierarchy rooted at the root class. As such,
if ρFEM would disregard virtual inheritance, then this sub-graph
would be a tree. By using this information, ρFEM iterates over non-
overriding functions and then in an inner loop it iterates through
the sub-graph (contains individual virtual tables and not classes)
rooted at the root class of the particular function.
Next, ρFEM assigns unique IDs to each virtual table and function
pair, while ensuring the following invariant. For a particular func-
tion, each parent virtual table has to have a larger ID value than all
its children IDs which have a smaller value. This is similar to the
well-established heap invariant and is achieved using a pre-order
traversal of the corresponding sub-graph. To achieve this, ρFEM
starts with the first function, iterates through the sub-graph rooted
at the root class of this function, and assigns IDs to each explored
virtual table. This process is repeated by ρFEM for the sub-graph
of each non-overriding function.
At the same time, the virtual call ID ranges are constructed as
follows. For each virtual table, a range of IDs is assigned containing
its own ID and the IDs of all of its children. Due to the pre-order
traversal, this results in a single closed (compact) range with its own
ID having minimum value. Note that these ranges are assigned for
each individual function or virtual table pair. In case the sub-graph
is a tree, then no virtual inheritance is involved. Consequently,
each virtual table gets at most one ID and one range per function
contained in the virtual table. Otherwise, the virtual table will get
multiple IDs and ranges, since w.r.t. virtual inheritance a virtual
table can have multiple parents and therefore can be explored from
multiple paths in the same sub-graph. Figure 5(c) shows the IDs and
ranges assigned for function g() [1, 5] with the sub-graph rooted
at the virtual table (B,0). Further, in case all classes use non-virtual
inheritance, each virtual table gets at most one ID. Note that the
three virtual tables shaded in gray in the left part of Figure 5(b) are
not part of the sub-graph and therefore have no ID assigned.
Step III – Inserting Callee Backward-edge Checks. In this
step, ρFEM inserts checks at each callee. For each virtual function in
the program, ρFEM uses the information from Step I to determine
the class it belongs to. Then, ρFEM takes each virtual table of this
class and looks up the IDs assigned to the virtual table function
pair. Note that ρFEM might find multiple IDs, either because there
can be multiple virtual tables for a class or because with virtual
inheritance there can be multiple IDs for a single virtual table. It is
interesting to note that at the end of the analysis the total number
of IDs is independent of whether virtual or non-virtual inheritance
was used. This is due to the fact that the number of edges in the
virtual table hierarchy is independent of the inheritance type. All
IDs are unique IDs for this function, because the IDs were assigned
for function/virtual table pairs, and a function cannot be defined
twice within a virtual table.
Next, ρFEM generates the actual check during LTO. The inserted
check works as follows. First, it takes the callee’s return address
from the stack and second, it tries to load the range data from this
address. The NOP instructions containing this data are inserted in
Step IV. ρFEM then checks whether or not one of the callee IDs is
inside of the fetched range. If this is the case, then the check passes.
Otherwise, the return address is not an address after a valid callsite
for this particular calltarget and program execution is interrupted.
Step IV – Attaching Callsite Metadata. ρFEM annotates, within
the front-end, each callsite with its base class and the function imple-
mentation of the base class, which legitimately can be called by the
callsite. As explained previously, a callsite can only call functions
in the sub-graph rooted at the callsite’s base class. This principle
is reflected by the range, which is obtained through the analysis of
(E,0)–A,C,E–A::f()E::g()(E,1)–B–E::g()(E,2)–B,D–E::g()(C,0)–A,C–A::f()(C,1)–B–B::g()(A,0)–A–A::f()(B,0)–B–B::g()(D,0)–B,D–D::g()(E,0)–A,C,E–A::f()E::g()(E,1)–B–E::g()(E,2)–B,D–E::g()(C,0)–A,C–A::f()(C,1)–B–B::g()(A,0)–A–A::f()(B,0)–B–B::g()(D,0)–B,D–D::g()(E,1)–B–E::g()(E,2)–B,D–E::g()(C,1)–B–B::g()(B,0)–B–B::g()(D,0)–B,D–D::g()ID:1Range:1-5ID:2Range:2-3ID:3Range:3-3ID:4Range:4-5ID:5Range:5-5472ACSAC 2020, December 7–11, 2020, Austin, USA
Paul Muntean, Matthias Neumayer, Zhiqiang Lin, Gang Tan, Jens Grossklags, and Claudia Eckert
base class/function pair. This idea holds, because the range contains
only the IDs assigned to the function implementations in the base
class or in any of its children classes, which were explored by ρFEM
during the pre-order traversal in Step II.
Lastly, ρFEM performs in Step III and also in Step IV the follow-
ing optimization. As opposed to storing the start and end ID of a
range, ρFEM stores the start ID and the width of the range. This
optimization reduces the amount of operations required during a
runtime check and as such runtime overhead.
5.3 Handling Function Pointer Based Calls
Each non-virtual callee, of which the address escapes to memory
(address taken (AT)) can potentially be called by a function pointer
based callsite (a non-virtual callsite). The matching callees are iden-
tified after removing from the total set of callees the virtual and
statically called callees. This is done while the matching callers
are identified by removing from the total set of callees the virtual
callees and the static address callees. As fully precise control flow
analysis is generally impossible due to the fact that alias analysis is
undecidable [43], and less precise alias analysis does not necessarily
provide small target sets, we assume in this work that it is valid for
each function pointer based callsite to call a callee, as long as the
function signatures match. As such, ρFEM implements a function
signature encoding, allowing it to encode function signature data in
IDs. The function signature computed by ρFEM consists of: (1) the
name of the caller function and of the callee function, (2) the num-
ber of parameters the caller provides and the number of parameters
the callee consumes (as for now, the first 8 function parameters are
taken into consideration), (3) their parameter types (as for now, 26
LLVM IR parameter types, i.e., HalfTyID, FloatTyID, VoidTyID,
etc. are taken into consideration), and (4) the callee return type.
Consequently, for an address taken (AT) function, ρFEM gener-
ates a function signature ID by using the previously mentioned
function signature encoding algorithm. Using the same encoding,
ρFEM annotates each function pointer based callsite with such an
ID. The callee accepts both the ID(s) generated in §5.1 or §5.2 along-
side with the function signature ID in case it was called indirectly,
but only if its own function signature was used at the callsite. Note
that the regular ID is the ID which was assigned through the pre-
order traversal. Lastly, during runtime, in case the caller signature
matches the callee signature, the control flow is allowed to return.
Otherwise, the control flow transfer is stopped.
5.4 Callees Integrity Checks
Figure 6 depicts the instrumentation added by ρFEM to a caller and
its corresponding callee in order to protect against backward-edge
control flow violations. For generating the values used in Figure 6(e)
lines 6 and 7, we use a counter.
Range based checks. The code listings depicted in Figure 6(a)
and Figure 6(b) show the original source code, while the code list-
ings depicted in Figure 6(c) and Figure 6(d) show the resulting
assembly instructions without applying any backward-edge checks.
Lines 2 – 4 in Figure 6(c) execute the virtual dispatch using an object
X stored in the rax register. Before the callee returns, as depicted
in Figure 6(d), the stack is popped once to clean up the stack frame.
Figure 6: Caller (a), callee (b) C++ code; caller (c) machine
code (no instrumentation). Callee (d) assembly (no instru-
mentation); caller (e), callee (f) instrumented machine code.
Further, we analyze the actual checks shown in the last row
contained in Figure 6(e). The newly-added NOP instructions are
depicted on lines six and seven in Figure 6(e) and contain a range
starting at 0x0a (StartID) with a width of 0x01 (WidthOfRange),
i.e., the only callees valid at this callsite have IDs 0x0a or 0x0b.
When looking at the callee’s instructions depicted in Figure 6(f),
we observe that its ID is located on line 4. As expected, it has one
of the IDs inside the range, namely 0x0a. We can also see the range
in the two instructions before (lines two and three): the start ID
is loaded from the first NOP and then the callee ID is substracted
from it (StartID−0x0a). In case everything went through up to
this point, the result of the subtraction should now be in the range
from 0 to WidthOfRange, which is checked with the help of the cmp
and jbe instructions located on lines six and seven in Figure 6(f).
Signature-based checks. Similarly, indirect calls (i.e., function
pointer based), which have a matching function signature encoding
(e.g., the cmp with the address 0x7fffe; see line 10 in Figure 6(f)),
which passes the check then the execution continues. This value
represents the valid function signature encoded as a hash value.
The hash value is a word size value obtained by concatenating the
number of parameters, their types and return type as a string and
then hashing them as described by vTrust [53].
Error handling. In case none of the checks succeed, the pro-
gram executes the ud2 instruction depicted on line 14 in Figure 6(f),
causing the program to terminate. While this type of mitigation is
sufficient for our purposes, in real-world applications more sophisti-
cated error handling might be used. Instead of abruptly terminating
the program, another possible approach is to log each legal and
illegal backward-edge transfer.
External Calls. In case a protected function is called by an un-
labeled callsite (i.e., external library call), then this call causes the
protected function to return at the next address after the call instruc-
tion with the help of the instructions located on line 7 and 8 in Fig-
ure 6(f). ρFEM is able to differentiate between external and internal
calls by determining during compile time the address range of the
hardened program. As such, external calls have a memory address
withthefunctionsignatureIDincaseitwascalledindirectly,butonlyifitsownfunctionsignaturewasusedatthecallsite.NotethattheregularIDistheIDwhichwasassignedthroughthepre-ordertraversal.Lastly,duringruntime,incasethecallersignaturematchesthecalleesignature,thecontrolflowisallowedtoreturn.Otherwise,thecontrolflowtransferisstopped.5.4CalleesIntegrityChecks1...2X*x=newW();3intt=x->foo();4...(a)1intfoo(){2...3returnx;4}(b)1...20x400d60add$0x10,%rax30x400d64mov(%rax),%rcx40x400d67mov%rax,%rdi50x400d6acallq*0x8(%rcx)6...(c)1...20x400cefpop%rbp30x400cf0retq4...(d)1...20x400d60add$0x10,%rax30x400d64mov(%rax),%rcx40x400d67mov%rax,%rdi50x400d6acallq*0x8(%rcx)60x400d6dnopl0x8000a(%rax)70x400d74nopl0x80001(%rax)8...(e)1...20x400ccemov0x8(%rbp),%rcx30x400cd2mov0x3(%rcx),%eax40x400cd5mov$0x8000a,%edx50x400cdasub%eax,%edx60x400cdccmp0xa(%rcx),%edx70x400cdfjbe0x400cf180x400ce1cmp$0x2000000,%rcx90x400ce8ja0x400cf1100x400ceacmp$0x7fffe,%eax110x400cefjne0x400cf3120x400cf1pop%rbp130x400cf2retq140x400cf3ud2(f)Figure6:Caller(a),callee(b)C++code;caller(c)machinecode(noinstrumentation).Callee(d)assembly(noinstrumentation);caller(e),callee(f)instrumentedmachinecode.Figure6depictstheinstrumentationaddedbyρFEMtoacalleranditscorrespondingcalleeinordertoprotectagainstbackward-edgecontrolflowviolations.ForgeneratingthevaluesusedinFigure6(e)lines6and7,weuseacounter.Rangebasedchecks.ThecodelistingsdepictedinFigure6(a)andFigure6(b)showtheoriginalsourcecode,whilethecodelistingsdepictedinFigure6(c)andFigure6(d)showtheresultingassemblyinstructionswithoutapplyinganybackward-edgechecks.Lines2–4inFigure6(c)executethevirtualdispatchusinganobjectXstoredintheraxregister.Beforethecalleereturns,asdepictedinFigure6(d),thestackispoppedoncetocleanupthestackframe.Further,weanalyzetheactualchecksshowninthelastrowcon-tainedinFigure6(e).Thenewly-addedNOPinstructionsaredepictedonlinessixandseveninFigure6(e)andcontainarangestartingat0x0a(StartID)withawidthof0x01(WidthOfRange),i.e.,theonlycalleesvalidatthiscallsitehaveIDs0x0aor0x0b.Whenlookingatthecallee’sinstructionsdepictedinFigure6(f),weob-servethatitsIDislocatedonline4.Asexpected,ithasoneoftheIDsinsidetherange,namely0x0a.Wecanalsoseetherangeinthetwoinstructionsbefore(linestwoandthree):thestartIDisloadedfromthefirstNOPandthenthecalleeIDissubstractedfromit(StartID−0x0a).Incaseeverythingwentthroughuptothispoint,theresultofthesubtractionshouldnowbeintherangefrom0toWidthOfRange,whichischeckedwiththehelpofthecmpandjbeinstructionslocatedonlinessixandseveninFigure6(f).Signature-basedchecks.Similarly,indirectcalls(i.e.,functionpointerbased),whichhaveamatchingfunctionsignatureencoding(e.g.,thecmpwiththeaddress0x7fffe;seeline10inFigure6(f)),whichpassesthecheckthentheexecutioncontinues.Thisvaluerepresentsthevalidfunctionsignatureencodedasahashvalue.Thehashvalueisawordsizevalueobtainedbyconcatenatingthenumberofparameters,theirtypesandreturntypeasastringandthenhashingthemasdescribedbyvTrust[40].Errorhandling.Incasenoneofthecheckssucceed,theprogramexecutestheud2instructiondepictedonline14inFigure6(f),causingtheprogramtoterminate.Whilethistypeofmitigationissufficientforourpurposes,inreal-worldapplicationsmoresophis-ticatederrorhandlingmightbeused.Insteadofabruptlyterminatingtheprogram,anotherpossibleapproachistologeachlegalandillegalbackward-edgetransfer.ExternalCalls.Incaseaprotectedfunctioniscalledbyanunlabeledcallsite(i.e.,externallibrarycall),thenthiscallcausestheprotectedfunctiontoreturnatthenextaddressafterthecallinstructionwiththehelpoftheinstructionslocatedonline7and8inFigure6(f).ρFEMisabletodifferentiatebetweenexternalandinternalcallsbydeterminingduringcompiletimetheaddressrangeofthehardenedprogram.Assuch,externalcallshaveamemoryaddressnotcon-tainedintherangeoftheprotectedprogramandthustheinsertedcheckcandifferentiatebetweeninternalandexternalcalls.5.5ImplementationDetailsWeimplementedρFEMasfiveClang/LLVManalysispasses,asfollows.Onefront-endpassforcollectingmetadatafromtheClangcompilerforlaterusageduringLTOanalysis,threeLTOpassesandamachineinstruction-levelpass.Forthispurpose,weextendedtheClang/LLVM[26]compilerframeworkinfrastructure.AsthreeofthefourρFEMpassesareperformedduringlinktime,oursystemrequiresLLVM’sLTO.Aspreviouslymentioned,theimplementationofρFEMissplitbetweentheClangcompilerfront-end(metadatacollection),threenewlink-timepassesandonemachine-levelpassusedforanal-ysisandgeneratingbackward-edgeconstraints,totalingaround3,235LOC.ρFEMsupportsseparatecompilationbyrelyingontheLTOmechanismbuiltinLLVM[26].ρFEMgeneratesuniqueIDsbykeep-ingtrackofalreadyassignedonesandcontinuouslyincrementingacountervariableforgeneratingnewIDs.Lastly,bycarefullytraversingeachclasshierarchyinpre-order,uniqueIDassignmentisguaranteed.6EVALUATIONInthissection,weaddressthefollowingresearchquestions(RQs).•RQ1:HoweffectiveisρFEMinprotectingbackwardedges(§6.1)?•RQ2:Whatbackward-edgeattackscanρFEMthwart(§6.2)?•RQ3:WhatsecuritybenefitdoesρFEMoffer(§6.3)?•RQ4:WhatistheruntimeoverheadofρFEM(§6.4)?BenchmarkPrograms.Inourevaluation,weusedthefollowingreal-worldC/C++programs:(1)Memcached[41](general-purposedistributedmemorycachingsystem,v.1.5.3,C/C++code),(2)Nginx[42](Webserver,usablealsoas:reverseproxy,loadbalancer,mailproxyandHTTPcache,v.1.13.7,Ccode),(3)Lighttpd[43](Webserveroptimizedforspeed-criticalenvironments,v.1.4.48,Ccode),(4)Redis[44](in-memorydatabasewithin-memorykey-valuestore,v.4.0.2,Ccode),(5)ApacheHttpdServer(Httpd)[45](cross-platformWebserver,v.2.4.29,Ccode)andthefollowingC++programs:(6)NodeJS[46](cross-platformJSrun-timeenvironment,v.8.9.1,C/C++code),(7)ApacheTrafficServer[47](modular,high-performancereverseproxyandforwardproxyserver,v.2.4.29,C/C++code),and8473ρFEM: Efficient Backward-edge Protection Using Reversed Forward-edge Mappings
ACSAC 2020, December 7–11, 2020, Austin, USA
not contained in the range of the protected program and thus the