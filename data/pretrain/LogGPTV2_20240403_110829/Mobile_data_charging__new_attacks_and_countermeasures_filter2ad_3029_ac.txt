### DNS Queries and Data Plan Testing

We conducted a series of experiments to test the behavior of DNS queries and data usage across different network configurations. The tests include:

1. **DNS-Default**: The User Equipment (UE) sends DNS queries to a Google public DNS server (IP address: 8.8.8.8).
2. **TCP53-Google**: The UE sends the same DNS queries as in (1) using TCP via port 53 to the Google DNS server.
3. **TCP53-Server**: The UE sends 50 random packets, each 1KB (including IP/TCP headers), to our own server using TCP via port 53. The server is required to return the received packets, and the source port number is randomly allocated.
4. **UDP53-Server**: The UE repeats the same process as in (3) but uses UDP instead of TCP.

These experiments were conducted with two major U.S. operators. We purchased unlimited daily data plans from both operators to ensure that we did not encounter legal issues while testing free data services. The actual data usage was not counted by the operators. We tested the hypothesis that operators have no incentive to accurately report traffic usage for users with unlimited access. To validate this, we also used 200MB and 4GB data plans in free data service tests and compared the results with the unlimited data plan. The results were consistent across all three plans.

We further tested different services (e.g., Web, YouTube, Gmail) using our unlimited data plans and verified that the data usage records at the UE and the operator were consistent. Figure 6 illustrates the data volume observed by the UE and the two operators in all five cases. The findings are as follows:

- **Operator-I**: Packets via port 53 are free.
- **Operator-II**: Packets via UDP + port 53 are free.

Specifically, the UE sends and receives about 18.1 KB for 100 DNS queries and responses in both DNS-Default and DNS-Google tests. In the TCP53-Google test, the traffic volume rises to 48.1 KB due to TCP signaling overhead (SYNC, etc.). In both TCP53-Server and UDP53-Server tests, the UE sends and receives 100 KB as expected. Operator-I charges nothing (i.e., VOP = 0) in all cases, while Operator-II charges for TCP cases.

From these results, we conclude that the free DNS service is implemented by Operator-I using only the destination port 53. In contrast, Operator-II enforces free DNS service using two fields in the flow ID, i.e., UDP over destination port 53.

### No Volume-Check Loophole

Our study further revealed that there is no mechanism to limit the traffic volume going through the free-service port. To test this, we built our own server outside the cellular network that exchanges data services with mobile phones using UDP over port 53. We performed three experiments:

1. **Free-One**: The UE sends one request to our server to download a 5MB file.
2. **Free-Equal**: The UE uploads a 3MB file to our server and requests the delivered packets.
3. **Free-Long**: The UE sends many small requests (100 B) to our server for an hour, each requesting a 1KB response.

Figure 7 shows the data volume observed by the UE and both operators in these scenarios. Both operators can be exploited for free data services in all these scenarios, except that Operator-I does not allow unbounded traffic for one fake "DNS" request. In the first test, Operator-I only allows the delivery of 29 KB downlink data to the UE, while Operator-II delivers much larger files (up to 4 MB). We hypothesize that Operator-I might have a checking mechanism to verify the size of the response message, which is typically bounded for real DNS messages. However, this size checking can be bypassed by sending many small, dummy packets to increase the quota for downlink traffic. This has been validated in scenarios (II) and (III).

### Toll-Free Data Service Attack

We demonstrate how to launch a "free" mobile data access attack by exploiting the above loopholes. The key idea is to use a proxy server (placed outside the cellular network) to bridge the data access between the mobile phone and the Internet server. Communication between the proxy and the phone is carried out over the free channel (i.e., UDP or TCP over port 53, depending on the operator policy). We use tunneling between the UE and the proxy server. The proxy server relays packets on behalf of the UE, extending free communication to between the UE and an Internet host, while the 3G core network (CN) is the victim. Figure 5(b) illustrates how Web browsing becomes free of charge. We name this the "toll-free-data-access-attack."

We implemented the toll-free-data-attack in three approaches:

1. **HTTP Proxy**: Using a HTTP proxy running on port 53, easily done with available free proxy software like FreeProxy [6]. The mobile Web browser is configured to use the established HTTP proxy, as shown in Figure 8(a). This approach is simple to implement and works for Web browsing and for Operator-I, which allows free TCP via port 53. We tested two Web browsers—Mozilla Firefox and Opera Mobile [11]—for one hour each, and were able to use Operator-I's network for free, with the actual data volume exceeding 20 MB.
   
2. **Socks Proxy**: Using a socks proxy that works with various application protocols (e.g., HTTP, FTP, SMTP, POP3, NNTP). We deployed a socks proxy running on port 53 and installed ProxyDroid [12] on the phone side. The phone configuration is shown in Figure 8(b). This method supports more applications without configuring each application individually but still only applies to the TCP-53-free operators. We tested this attack with Operator-I using mobile applications such as Web browsing, YouTube, Gmail, Google Map, Skype, and FTP (via AndFTP [1]). All services were free of charge except for Skype voice calls and FTP downloads, which failed to go through the socks proxy due to an implementation issue in ProxyDroid.
   
3. **FDP Proxy**: Deploying a proxy server to enable tunneling between the phone and itself. We designed a Free Data Protocol (FDP) to encapsulate data packets between the UE and the proxy into fake DNS messages, i.e., to carry packets in ANY-on-port-53 flows for Operator-I and UDP-on-port-53 flows for Operator-II. These messages are any data packets, not following DNS semantics. To bypass the limit of data volume for one fake DNS request (for Operator-I), FDP periodically sends small KEEP-ALIVE messages from the UE side. We tested our prototype with revised HTTP and FTP applications working on top of FDP. Figure 8(c) captures a screenshot when visiting www.cnn.com, showing that data access is free for both operators while the actual data volume reaches 100 MB. The upper limit of free traffic volume seems unbounded in our tests.

### Suggestions to Fix the "Bug"

The simplest solution is to stop free DNS service or any other free data services that can go outside cellular networks. For a metered charging service, people will always have incentives to exploit and abuse any transfer that is free. Therefore, the simplest and possibly best solution to prevent abuse is to eliminate the free services. Moreover, DNS traffic is negligible in normal cases and should lead to no noticeable difference in most usage scenarios.

We also considered remedies to fix this bug while retaining the free DNS service. For example, the operator could provide a quota for free DNS service, where DNS data usage beyond the quota would be charged. The quota should be based on average usage patterns and can be a fixed amount or a percentage of the data usage. The challenge is setting an appropriate quota, as some applications or services may heavily use DNS. An alternative approach is to enforce checking on the destination IP address of the DNS request, allowing free DNS services only when these messages go to designated or authenticated DNS resolvers or servers managed by carriers. However, attackers can still deceive these resolvers/servers to forward fake "DNS" requests to a fake DNS server, albeit at a higher cost.

In a broader context, when the charging policy allows different unit-prices for diverse services, extra bullet-proof mechanisms are required to prevent exploitation. The deployment and operation of such security mechanisms will inevitably increase the cost for the carrier and must ensure their own security in design and operation.

### Stealth Spam Attack

This section describes the stealth spam attack, a new spam threat against mobile devices that exploits loopholes in the current 3G/4G charging system. It stealthily injects a large volume of spam data, which the mobile device may not even be aware of, incurring extra payment on the mobile user.

**Stealth spam attack** differs from conventional spam threats targeting mobile devices, such as Email spam, SMS/MMS spam, and junk images or videos embedded in Web pages. Users are typically aware of these annoying junk messages and may take actions to block them. In contrast, the stealth spam attack can last several hours or more, allowing the attacker to send a large volume of junk data covertly. Users may be completely oblivious to such attacks.

#### Challenges and Opportunities

Operators widely use NAT middleboxes to handle IP address allocation for mobile devices. Attackers need to know the IP address of the phone to inject spam data. The deployment of NAT makes launching mobile spam attacks challenging. NAT offers two countermeasures against spam:

1. **Decoupling Network Access from Public Reachability**: The mobile UE is allocated a private IP address (not reachable from the external network) when its bearer (PDP context) is activated. The UE is reachable from the public Internet only after NAT assigns it a translated IP address and port number. This dynamic assignment occurs only when the UE initiates a data session. Without explicit activation from the UE side, data-charging operations do not occur, shielding most conventional spam threats.
   
2. **Temporary Permissions for Traffic Traversal**: Operator’s NAT boxes grant temporary permissions for traffic traversing the cellular core network, allowing traffic to pass through within a provisional time window when the data session is alive. The charging time window ends when the UE terminates the data service. For example, a mobile Web browser may immediately send a TCP FIN message to close the TCP connection once the Web page is downloaded. This window-controlled access helps protect the UE from spam threats. Additionally, firewalls deployed by operators can filter out spam.

However, loopholes in the current 3G/4G charging system and applications create opportunities for stealth spam attacks. Our analysis and experiments show two main loopholes:

1. **Data Flow Termination at the UE ≠ Charging Termination at the Operator**: There is inconsistency between the UE status and the operator's view on termination of a charging operation. When the user closes an application or an Internet service, they think the data flow is released and no more incoming traffic is allowed. However, the operator may view differently, continuing to charge if incoming packets belonging to this flow still arrive. The current 3G charging takes the operator's view, leading to extended charging periods. This occurs when the attacker starts incoming spam before the normal teardown by the UE. Even when the UE explicitly sends teardown signals (e.g., in TCP), operators are unable to effectively stop data charging. This is worse for UDP-based data services, where charging can last even longer once the spam starts, with no sign of stopping based on our experimental observation.

2. **Initial Authentication ≠ Authentication During the Whole Data Process**: All authentication operations are performed at the start of the data flow (or when establishing the PDP context) but not when closing a flow. The current charging procedure secures the initialization of the flow but not the whole process, leaving the data flow unprotected during the teardown process. This design works for voice calls but not for data, as packet-switched IP data forwarding can push packets along different paths to reach the victim UE without prior consent, unlike the circuit-switched fixed route for voice calls.

With these loopholes, stealth spam attacks can be launched. Figure 10 shows two typical steps to launch this attack: trap and spam. First, it traps the UE to obtain its confidential access information and flow permission to traverse the CN. The second step is to send junk packets. We describe how to implement these in several example scenarios and examine their impact on the victim.

#### Spam Attack in TCP-based Services

We describe how spam attacks pose threats to TCP-based services. Since TCP is a stateful protocol, we expect the spam to stop early once the UE application closes its TCP connection. For example, in Web browsing, once the Web page is fully retrieved, the Web browser may send a TCP FIN signal to the Web server and close the TCP connection. Even if the Web server is malicious, the timeout mechanism helps the UE close the connection. However, our study confirmed that the current charging practice contains loopholes, and the operator may not stop charging even when the connection is closed by the UE.

In our experiments, we deployed a Web server as the attacker and modified its TCP protocol. The spam attack starts when the UE clicks a malicious Web link and sets up a TCP connection with the attacker. In the modified TCP, the normal connection teardown procedure is disabled, and the TCP will never send FIN or FIN-ACK signals upon receiving the teardown request from the UE. Once connected, the attacker immediately sends junk packets at a fixed rate for a given duration. We disabled TCP congestion control to enable fixed-rate testing.

We ran experiments using various source rates for five minutes. Figure 12 plots the data volume increase due to this attack in both networks. As the incoming source rate grows beyond a threshold (about 400Kbps for Operator-I, 200Kbps for Operator-II), the attack is blocked by the operator. The higher the source rate, the earlier the attack is blocked. For example, the spam is blocked in 24.7 seconds when the incoming rate reaches 1 Mbps for Operator-I, while it gets blocked in 2 minutes for attacks at source rates from 300 Kbps.