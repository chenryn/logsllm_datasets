DNS queries as (1) to a Google public DNS server (IP address:
8.8.8.8); (3) TCP53-Google: the UE sends the same DNS queries
as (1) using TCP via port 53 to the above Google DNS server; (4)
TCP53-Server: the UE sends 50 random packets to our own server
using TCP via port 53, and require the server to return the received
packets; each packet is 1KB, including IP/TCP headers; Source
port number is randomly allocated; and (5) UDP53-Server: we re-
peat (4) but using UDP.
We conduct these experiments with two US major operators. We
have purchased unlimited daily data plans from both operators and
thus do not run into legal issues while testing free data services
(the actual data usage is not counted by operators). We invalidate
the hypothesis that the operator has no incentive to correctly re-
port the trafﬁc usage for users with unlimited access. To this end,
we also use 200MB and 4GB data plans in free data service tests,
and compare the results with using unlimited data plan. Results are
consistent in all three plans. We further test different services (e.g.,
Web, YouTube, Gmail) using our unlimited data plans and verify
that the data usage records at the UE and the operator are consis-
tent. Figure 6 plots the data volume observed by the UE and two
operators in all ﬁve cases. The results show that,
Operator-I: Packets via port 53 are FREE
Operator-II: Packets via UDP + port 53 are FREE
Speciﬁcally, the UE sends and receives about 18.1 KB for 100 DNS
queries and responses in both DNS-Default and DNS-Google tests.
In the TCP53-Google test, the trafﬁc volume rises to 48.1 KB due
to TCP signaling overhead (SYNC, etc).
In both TCP53-Server
and UDP53-Server tests, the UE sends and receives 100 KB as ex-
pected. Operator-I charges for free (i.e., VOP = 0) in all cases
while Operator-II charges those TCP cases. From these results, we
learn that the free DNS service is implemented by Operator-I using
only one ﬁeld in the ﬂow ID (i.e., the destination port 53). In con-
trast, Operator-II enforces free DNS service using two tuples in the
ﬂow ID, i.e., UDP over destination port 53.
• No volume-check loophole
Our study further shows that,
there is no mechanism to limit the trafﬁc volume going through this
free-service port. To this end, we build our own server outside the
cellular network that exchanges data services with mobile phones
using UDP over port 53. We perform three experiments: (I) Free-
One: the UE sends one request to our server to download a 5MB
ﬁle; (II) Free-Equal: the UE uploads a 3MB ﬁle to our server, and
requests to return the delivered packets; (III) Free-Long: the UE
sends many small requests (100 B) to our server for an hour, each
of which requests a 1KB response.
Figure 7 plots the data volume observed by the UE and both oper-
ators in the above three scenarios. It shows that, both operators can
be exploited for free data services in all these scenarios, except that
Operator-I does not allow unbounded trafﬁc for one fake “DNS”
request. The fake DNS message In the ﬁrst test, Operator-I only
allows to deliver 29 KB downlink data to the UE, while Operator-
II delivers much larger ﬁle (up to 4 MB). We gauge that Operator-I
might have enforced a checking mechanism to verify the size of the
response message, in which a real DNS message size is typically
bounded. However, this size checking can be easily bypassed. The
UE simply sends out many small, dumb packets over this session,
to increase the quota for downlink trafﬁc. Then large downlink data
can pass this checking. This has been validated in scenarios (II) and
(III). In these tests, the gap between VU E and the expected ﬁle size
is mainly caused by unreliable transmission via UDP. These results
demonstrate that free DNS service can be exploited to create any
“free” data service.
4.2 Toll-Free Data Service Attack
We now show how to launch “free” mobile data access attack by
using the above two loopholes. The key idea is to use a proxy server
(placed outside the cellular network) to bridge the data access be-
tween the mobile phone and the Internet server. The communica-
tion between the proxy and the phone is carried out over the free
channel (i.e., UDP or TCP over port 53, depending on the operator
policy). We use “tunneling” between the UE and the proxy server.
The proxy server relays packets on behalf of the UE. Free commu-
nication is thus extended to between the UE and an Internet host,
while the 3G core network (CN) is the victim. Figure 5(b) illus-
trates the example of how Web browsing becomes free of charge.
The process is similar to calling 800-voice hotlines, but for free
data access. We thus name it as the “toll-free-data-access-attack.”
We take three approaches when implementing the toll-free-data-
attack. All show that, it is simple enough to obtain free mobile data
access in reality. The ﬁrst approach is to use a HTTP proxy running
on port 53. It is easily done using available free proxy software
such as FreeProxy [6]. The mobile Web browser is then conﬁgured
to use the established HTTP proxy, as shown in Figure 8(a). This
approach is easy to implement; no coding and hacking are needed.
However, it only works for Web browsing and for Operator-I, which
allows free TCP via port 53. To evaluate its effectiveness, we test
two Web browsers – Mozilla Firefox and Opera Mobile [11], one
199(a) HTTP proxy
(b) Socks proxy
(c) FDP proxy
Figure 8: Three approaches to “toll-free-data-access-attack.”
hour each. We are able to use Operator-I network for free, while
the actual data volume goes beyond 20 MB.
The second approach is to use a socks proxy. It works with var-
ious application protocols, e.g., HTTP, FTP, SMTP, POP3, NNTP,
etc. Similarly, we deploy a socks proxy running on port 53. On the
phone side, we install ProxyDroid [12] to enable socks proxy func-
tionality. The phone conﬁguration is shown in Figure 8(b). This
method supports more applications without conﬁguring each appli-
cation individually. However, it still only applies to the TCP-53-
free operators. We assess this attack with Operator-I using mobile
applications, e.g., Web browsing, YouTube, Gmail, Google Map,
Skype and FTP (via AndFTP [1]). The results show that, all ser-
vices are free of charge except Skype voice call and FTP down-
load. We ﬁgure out that, these two applications fail to go through
the socks proxy; It is an implementation issue in ProxyDroid.
The third approach is to deploy a proxy server to enable “tun-
neling” between the phone and itself. To this end, we design a
Free Data Protocol (FDP) to encapsulate data packets between the
UE and the proxy into fake DNS messages, i.e., to carry pack-
ets in ANY-on-port-53 ﬂows for Operator-I and UDP-on-port-53
ﬂows for Operator-II. These messages are any data packets, not
following DNS semantics. To bypass the limit of data volume for
one fake DNS request (for Operator-I), FDP also periodically sends
small KEEP-ALIVE messages from the UE side. The attacker en-
ables the FDP at the UE and the proxy server. Note that, the DNS-
tunneling idea is also used in the iodine [7] and NSTX [10] tools
to enable Internet access over DNS. Moreover, the NSTX was used
to demonstrates the similar idea for free Internet access with a toll-
free Microsoft PPP dial-in number in Germany [8]. Both work in
the wired Internet and free Internet access is available with speciﬁc
DNS servers. In our experiments, we have built a simple prototype
that revises applications to use FDP. We test our prototype with the
revised HTTP and FTP applications working on top of FDP. Fig-
ure 8(c) captures the screen shot when visiting www.cnn.com. It
shows that, data access is free for both operators while the actual
data volume reaches 100 MB. Moreover, the upper limit of free
trafﬁc volume seems unbounded in our tests.
4.3 Suggestions to Fix the “Bug”
The simplest solution is to stop free DNS service or any other
free data services that can go outside cellular networks. Funda-
mentally, for a metered charging service, people necessarily have
incentives to exploit and abuse any transfer that is free. Therefore,
the simplest, possibly also the best solution to abuse prevention is
to eliminate the free services. Moreover, DNS trafﬁc is negligible
in normal cases; it should lead to no noticeable difference in most
usage scenarios.
We also seek remedies to ﬁx this bug while still retaining the
free DNS service. For example, we have considered that the oper-
ator can provide quota for free DNS service. The DNS data usage
beyond the quota will be still charged. Ideally, the quota should
be assigned based on the average usage patterns. It can be a ﬁxed
amount or a percentage of the data usage. The challenge for this
approach is how to set an appropriate quota. Some applications
or services such as MobileMe [9] and DNSSEC [2] may heavily
use DNS while others do not. The alternative approach is to en-
force checking on the destination IP address of the DNS request.
For example, free DNS services are only allowed when these mes-
sages go to designated or authenticated DNS resolvers or servers
managed by carriers. However, it is still possible for attackers to
deceive those resolvers/servers to forward fake “DNS” requests to
a fake DNS server. The only difference is that the attack cost could
be higher.
In the more general context, when the charging policy allows
different unit-prices for diverse services (including free access to
mobile Facebook [3] or a given Web site [5] in the extreme case),
extra bullet-proof mechanisms are required; otherwise, the attacker
always seeks to use the cheaper one. However, the deployment and
operation of such security mechanisms will inevitably increase the
cost of the carrier. Moreover, the security mechanism still needs to
ensure itself to be secure in its design and operation. All these pose
interesting research issues for the future.
5. STEALTH SPAM ATTACK
In this section, we describe the stealth spam attack, which is a
new spam threat against mobile devices by exploiting the loopholes
in current 3G/4G charging system. It stealthily injects a large vol-
ume of spam data, which the mobile device may not be even aware
of (e.g., after the mobile device already closes the data session on
its side). This incurs extra payment on the mobile user.
Stealth spam attack is different from conventional spam threats
targeting mobile devices. Conventional spams include Email spam,
SMS/MMS spam, junk image or video embedded in Web pages,
etc. Users are typically aware of these annoying junk messages
and may take actions to block them. In contrast, the stealth spam
attack can be long lived, lasting several hours or more (observed in
our experiments). The persistent spam session not only allows for
the attacker to send a large volume of junk data, but also does it
covertly. The users may be completely oblivious of such attacks.
5.1 Challenges and Opportunities
In practice, operators widely use NAT middlebox to handle IP
address allocation of mobile devices
[37]. Note that, attackers
need to know the IP address of the phone when injecting spam data
against the mobile device.
The deployment of NAT makes launching mobile spam attack
a challenging task. Speciﬁcally, NAT offers two countermeasures
against spam. First, it decouples network access from public reach-
ability. The mobile UE is only allocated a private IP address (not
reachable from the external network) when its bearer (i.e., PDP
context) is activated. The UE is reachable from the public Internet
only after NAT assigns it a translated IP address and a port number.
This dynamic assignment only occurs when the UE initiates a data
session (e.g., when starting a Google search or signing in Skype).
Without the explicit activation from the UE side, data-charging op-
erations never happen (as shown in the normal case of Figure 9).
This tends to shield most conventional spam threats that send data
to the UE via its IP address.
As the second countermeasure, operator’s NAT boxes only grant
temporary permissions for the trafﬁc traversing the cellular core
network. They only allow for the trafﬁc to pass through within
a provisional time window when the data session is alive. In the
normal scenario, the charging time window ends when the UE ter-
minates this data service. For example, mobile Web browser may
immediately send a TCP FIN message to close the TCP connec-
tion, once the Web page is downloaded. This way, only within the
200Figure 9: Illustration of stealth spam attack.
Victim
I. TRAP
Attacker
e.g. redirect web access to a 
malicious server, ping a call on 
VOIP applications 
II. SPAM
Figure 10: Steps to launch stealth spam attack.
given time window, those hosts, which know the access informa-
tion (i.e., the translated IP address and the port number), are able to
inject trafﬁc to the UE. This window-controlled access also helps
to protect the UE from spam threat. In addition, ﬁrewalls deployed
by operators can also ﬁlter out spam.
On the other hand, the loopholes in the current 3G/4G charg-
ing system, as well as in applications, also create opportunities for
stealth spam attack. Our analysis and experiments show that, there
exist two loopholes in the current charging system. The ﬁrst loop-
hole is that,
Data ﬂow termination at the UE (cid:2)= charging termination
at the operator.
There exists inconsistency between the UE status and the operator’s
view on termination of a charging operation. When the user closes
an application or an Internet service, (s)he thinks that the data ﬂow
is about to release and no more incoming trafﬁc is allowed. How-
ever, the operator may view differently: This ﬂow does not termi-
nate as long as incoming packets belonging to this ﬂow still ar-
rive. The current 3G charging takes the operator’s view. Therefore,
charging can last much longer than expected. This occurs when
the attacker starts this incoming spam before the normal teardown
by the UE (shown in Figure 9)). We further ﬁnd out that operators
are unable to effectively stop data charging even when the UE ex-
plicitly sends teardown signals (e.g., in TCP). It is even worse for
those UDP-based data service. The charging can last even longer
once the spam starts; there is no sign for it to stop based on our
experimental observation. We will elaborate them in next sections.
The second loophole is that,
Initial authentication (cid:2)= authentication during the whole
data process.
All the authentication operations are performed at the start of the
data ﬂow (or when establishing the PDP context), but not when
closing a ﬂow. Therefore, the current charging procedure secures
the initialization of the ﬂow but not the whole process. Speciﬁcally,
it cannot protect the data ﬂow in the teardown process. The current
design works for voice calls but not for data. Packet-switched IP
data forwarding can push packets along different paths to reach
the victim UE without prior consent, different from the circuit-
switched ﬁxed route for voice calls.
With these loopholes, stealth spam attack can be launched. Fig-
ure 10 shows two typical steps to launch this attack: trap and spam.
First, it traps the UE to obtain its conﬁdential access information
Figure 11: Wireshark traces at the victim even after the UE
tear downs the TCP connection.
and ﬂow permission to traverse the CN. The second step is to send
junk packets. In the following, we describe how to implement them
in several example scenarios and examine how badly it may hurt the
victim.
5.2 Spam Attack in TCP-based Services
We now describe how spam attack poses threats to those TCP-
based services. Since TCP is a stateful procotol, we expect the
spam to stop early once the UE application closes its TCP connec-
tion. Take Web browsing as an example. Once the Web page is
fully retrieved, the Web browser may send a TCP FIN signal to the
Web server and closes this TCP connection. Even though the Web
server is malicious, the timeout mechanism also helps the UE to
close this connection. The timer is typical set from tens of sec-
onds to several minutes. However, our study has conﬁrmed that
the current charging practice contains loopholes. The operator may
not stop charging, even when they can learn that the connection is
closed by the UE.
In our experiments, we deploy a Web server as the attacker and
modify its used TCP protocol. The spam attack starts when the UE
clicks a malicious Web link and setups a TCP connection with the
attacker.
In the modiﬁed TCP, the normal TCP connection tear-
down procedure is disabled. This TCP will never send FIN or
FIN-ACK signals like a normal TCP, upon receiving the teardown
request from the UE. Once the UE is connected, the attacker imme-
diately sends junk packets at a ﬁxed rate for a given duration. To
enable ﬁxed-rate testing, we also disable TCP congestion control.
We ﬁrst run experiments using various source rates for ﬁve min-
utes. Figure 12 plots the data volume increase due to this attack
in both networks.
It is observed that, as the incoming source
rate grows beyond one threshold (about 400Kbps for Operator-I,
200Kbps for Operator-II), the attack seems to be blocked by the op-
erator. The higher the source rate, the earlier the attack is blocked.
For example, the spam is blocked in 24.7 seconds when the in-
coming rate reaches 1 Mbps for Operator-I while it gets blocked
in 2 minutes for those attack at the source rates from 300 Kbps