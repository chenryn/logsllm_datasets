level and from left to right, e.g., the parent of the two leftmost
leafs is labeled with N + 1, its right sibling with N + 2, and
so on, all the way to the root that is labeled with 2N − 1.
Every node has a corresponding color cv ∈ {white,black}; all
nodes are initially white. The client holds a “conceptual” tree
like this for every keyword w. In said tree, inserted entries
correspond to leafs that are being populated from left to right,
i.e., after iw insertions (and without deletions), the result of
the search is related to the iw ﬁrst leafs with labels 1, . . . , iw.
For each deletion, the client needs to mark one node as
black. Assuming the deleted entry was previously stored at
9
via OMcnt. Then, we describe the two cases separately. For
insertions (lines 2-6), the client increments the update count
and writes it to OMcnt. He also writes an entry at OMdel that
maps (w, id) to the leaf location where it is stored in I (this
will be used for deleting this entry in the future). Finally, the
client encrypts id, iw + 1. The resulting ciphertext is stored at
the server in map I at a location computed by the hash function
H, using a token tk that the client computes pseudorandomly
with kI for (w, iw + 1).
For deletions (lines 7-17), the client retrieves the label pos
of the tree leaf at which w, id has been stored via OMdel.
Then, he computes the labels of all the ancestors and the
siblings of the ancestors of pos, and retrieves their colors from
OMstate (lines 9-12). With these, he can update the colors
of all the ancestors of pos (in the simplest case, pos is set
to black, more generally this deletion may cause some of its
ancestors to become black too). Finally, the client ﬁnds dj,
the furthest ancestor of pos that was ﬁrst set to black during
this deletion. He then marks an entry at D (at the server) at a
location computed by the hash function H(cid:48), using a token tk
that the client computes pseudorandomly with kD for (w, dj),
as well as store its new color at OMstate.
Search. During searches Figure 6, the client ﬁrst retrieves
cntw, iw from OMcnt and pseudorandomly computes two
search tokens for w, cntw: (i) tkI is computed with kI and
will be used to retrieve the result, and (ii) tkD is computed
with kD and will be used to identify black nodes encountered
during the search, corresponding to deletions. These tokens
and iw are sent to the server. The client also increments the
search counter cntw and stores it to OMcnt.
The server ﬁrst computes the set of tree nodes d0, . . . , dm
that constitute the Best Range Cover of leaf nodes [0, iw]—
each entry of DB(w) will be related to a descendant of one of
di. The search process is quite simple and it entails a recursive
search process starting from each of di and progressing down-
wards at the tree (Figure 6, Algorithm RecSrc). At each node
d, the server checks whether the location H(cid:48)(tkD, d) has been
written at D, in which case, this is a “black” node, i.e., any
previously inserted entries at the subtree with root d have since
been deleted. Hence, the server can simply record its node
label and return. Otherwise, he proceeds to parse its children.
Upon reaching a leaf that is not black, the server returns the
encrypted entry from I at position H(tkI, d)—since d is a
non-deleted leaf, it corresponds to an entry of DB(w).
The server returns to the client all retrieved values from
I and all marked entries from D that correspond to black
nodes encountered during the tree traversal (and removes them
from I,D). The client computes DB(w) by decrypting the
ﬁrst ones. Finally, he “re-maps” all the entries of I and D,
using new pseudorandom tokens with keys kI, kD respectively
but increased search counter cntw, and sends them back to the
server who stores them at I and D.
Security. QOS is forward-private because during updates the
server observes two types of accesses: (i) a ﬁxed number of
oblivious map operations (depending on the type of update)
that reveal nothing, and (ii) a pair (key, value) that consists
of the outputs of a hash function modeled as a random oracle,
and a semantically secure ciphertext. The latter clearly reveals
nothing. For the former, note that we ensure that the same input
Fig. 5: Update tree for QOS with maximum insertions N = 8.
Nodes are labeled with [1, 15] leafs-to-root and left-to-right.
This is the tree state after ﬁve insertions 1-5, and three
deletions for 1, 2, 4. A subsequent search starts from the Best
Range Cover of leafs [1, 5] = (13, 5) and proceeds downwards
until it ﬁnds a black node or a leaf. The result is (3, 5).
the j-th leaf, this is the node that will be marked as black.
However, additional nodes may be marked black according to
the following simple rule: “if both children of a node are black,
it is also marked black.” Hence, for the above deletion the
client needs to access the colors of all the ancestors of the j-
th leaf and their siblings. With this information, he can update
their colors accordingly. Simply, each deletion “eliminates” an
entire subtree by marking its root black.
During a search after iw insertions, the leafs that contain
the result can be reached as follows. First, we compute the
Best Range Cover for leafs with labels [1, iw]. Then, starting
independently from each node in the Best Range Cover the
search progresses downwards towards the leafs. If it encounters
a black node it stops (knowing that there is no undeleted
entry below). Upon reaching a leaf that
the
corresponding entry is added to the result. In our analysis we
show that, while the entire subtree that covers the leafs [1, iw]
is of size < 2iw, the nodes that are accessed during this process
are O(nw log iw). Next, we describe our scheme in detail and
we explain the implementation decisions we made in order to
hide the necessary actions for manipulating this tree.
is not black,
Setup. During Setup (Figure 6), the client initializes three
empty OMAPs with capacity |W|, N, N, respectively:
(i) OMcnt maps keywords w to cntw and iw, where
cntw is the number of previous searches for w, and
iw is number of previous insertions for w.
(ii) OMdel maps each keyword-ﬁle identiﬁer pair w, id to
label(v) where v is the leaf to which it was inserted;
during deletions, this is used to retrieve the “position”
of the entry to be deleted.
(iii) OMstate maps a keyword-node label pair w, label(v)
to the color of the node v.
The encrypted index EDB stored at the server consists of
the oblivious maps and two empty maps I,D of capacity
N, D respectively (D is an upper bound on deletions that
can also serve as the capacity of OMstate; trivially it can
be set to O(N )). The client stores locally the states of the
three oblivious maps, two PRF keys kI, kD and a symmetric
encryption key k.
Update. For updates (Figure 6), the client ﬁrst retrieves the
number of previous searches cntw and the insertion count iw
10
F is a PRF, RN D = (Gen, Enc, Dec) is a semantically secure symmetric encryption scheme, and H, H(cid:48) are hash functions.
(K, σ; EDB) ← Setup(1λ)
1: Initialize OMAPs OMdel, OMstate of capacity N
2: Initialize OMAP OMcnt of capacity |W|
3: Initialize empty maps D,I
4: Set EDB ← {OMcnt, OMdel, OMstate,D,I}
5: kI ← F.Gen(1λ), kD ← F.Gen(1λ),
k ← RN D.Gen(1λ)
6: State σ contains the OMAP states
7: Key K contains kI, kD, k
(K, σ, EDB) ↔ Update(K, op, w, id, σ; EDB)
Client:
1: (cntw, iw) ← OMcnt.get(w)
2: if op = add then
3:
4:
5:
6:
7: else (cid:66) op = del
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18: Send (key, value) to server
Server:
19: if op = add then I.put(key, value)
20: else D.put(key, value)
OMcnt.put(w, (cntw, iw + 1))
OMdel.put((w, id), iw + 1))
tk ← F (kI, (w, cntw))
key ← H(tk, (w, iw + 1)),
value ← Enc(k, (id, iw + 1))
pos ← OMdel.get(w, id)
d0 . . . dp ← labels of ancestors of pos (cid:66) d0 = pos
p = ⊥
p ← labels of siblings of d0 . . . dp (cid:66) d(cid:48)
d(cid:48)
0 . . . d(cid:48)
for each di do color ci ← OMstate.get(w, di)
i ← OMstate.get(w, d(cid:48)
for each d(cid:48)
i do color c(cid:48)
i)
p ← Update the colors ci
cnew
Let j ← max{ i | cnew
(cid:54)= ci ∧ cnew
i = black}
0
OMstate.put((w, dj), cnew
tk ← F (kD, (w, cntw))
key ← H(cid:48)(tk, (w, dj)); value ← 1
, . . . , cnew
)
j
i
[1, iw]
the labels of black nodes encountered in search
(X ,Y) ← (X ,Y) ∪ RecSrc(EDB, tkI, tkD, di)
DB(w) ↔ Search(K, q, σ; EDB)
Client:
1: (cntw, iw) ← OMcnt.get(w)
2: tkI ← F (kI, (w, cntw)); tkD ← F (kD, (w, cntw))
3: cntw ← cntw + 1; OMcnt.put(w, (cntw, iw))
4: Send (tkI, tkD, iw) to server
Server:
5: d0, . . . , dm ← labels of Best Range Cover for leafs
6: (X ,Y) ← (∅,∅) (cid:46) X will contain encrypted result, Y
7: for i = 0 . . . m do
8:
9: Send X ,Y to client
Client:
10: (DB(w),X (cid:48),Y(cid:48)) ← (∅,∅,∅)
11: for x ∈ X do
12:
13:
14:
15:
16:
17: for y ∈ Y do
18:
19:
20: Shufﬂe each of X (cid:48), Y(cid:48) and send them to server
Server:
21: for (key, value) ∈ X (cid:48) do I.put(key, value)
22: for (key, value) ∈ Y(cid:48) do D.put(key, value)
(X ,Y) ← RecSrc(EDB, tkI, tkD, d)
1: if D.get(H(cid:48)(tkD, d)) = 1 then return (∅, d)
2: if d is a leaf then return (I.get(H(tkI, d),∅)
3: Let dl, dr be the labels of the left and right child of d
4: (Xl,Yl) ← RecSrc(EDB, tkI, tkD, dl)
5: (Xr,Yr) ← RecSrc(EDB, tkI, tkD, dr)
6: return (Xl ∪ Xr,Yl ∪ Yr)
Fig. 6: QOS: DSE with quasi-optimal search time O(nw log(iw)).
(id, leaf ) ← RN D.Dec(k, x)
tk ← F (kI, (w, cntw)); key ← H(tk, (w, leaf ))
value ← RN D.Enc(k, (id, leaf ))
X (cid:48) ← X (cid:48) ∪ (key, value)
DB(w) ← DB(w) ∪ id
tk ← F (kI, (w, cntw)), key ← H(cid:48)(tk, (w, y))
Y(cid:48) ← Y(cid:48) ∪ (key, 1)
is never passed to the random oracle twice during updates. This
follows from incrementing iw during insertions and from the
fact that deletions never mark the same node as black. Since
the input to the random oracle contains a token computed from
a PRF for which the server does not have the key (and is
only revealed during a future search), querying the oracle for
“valid” values not previously seen is infeasible. Finally, note
that after every search both tokens are changed so the server
cannot connect future updates with ones prior to the search.
Regarding backward privacy, during searches the server
learns the PRF tokens kI, kD which allows him to compute
the I,D locations that he needs to access. This also allows
him to recall when these entries in I,D where made, i.e., the
timestamp and type for all update operations for the queried
keyword w. Moreover, since the topology of the tree is revealed
to the server and the leafs of the tree are naturally mapped to
timestamps of insertions, the server can deduce exactly which
deletion canceled which prior insertion. As a result of this,
QOS achieves BP-III.
Efﬁciency. Updates with QOS require O(log N ) OMAP
queries resulting to a total of O(log3 N ) operations and log N
roundtrips, using the OMAP of [55]. Setup is linear to N, D,
the upper bound on insertions and deletions, as is the server’s
storage. The search time can be computed as follows. The
OMAP queries take O(log2 |W|) operations. Computing the
Best Range Cover takes O(log iw), same as the cover size
itself. Parsing the tree in order to retrieve the result, takes
O(nw log iw) since nw leafs will be reached and the maximum
height from each of them to the one of the nodes in the Best
Range Cover is log iw. Even if every node along this traversal
has a black sibling (which is a huge overestimation), the total
number of black nodes encountered is O(nw log iw) as well.
From all the above, the total search overhead with QOS is
O(nw log iw + log2 |W|) and it takes O(log |W|) rounds of
interaction.
11
The client’s permanent storage is O(log2 N ) due to the
OMAP stashes. If necessary, this can again be reduced to O(1)
at no asymptotic cost by storing the stashes at the server.
V. EXPERIMENTAL EVALUATION
We implemented our three schemes in C++ in order to