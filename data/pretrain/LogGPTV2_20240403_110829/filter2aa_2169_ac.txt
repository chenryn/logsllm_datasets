>::sentry::sentry (019144Ch)  
;把对象地址存入ecx，进入函数调用
;函数调用
    int getx(){
...
00191F9F  pop         ecx  
00191FA0  mov         dword ptr [this],ecx  
;把ecx取出来，放到this指针里
00191FA3  mov         ecx,19F026h  
00191FA8  call        @__CheckForDebuggerJustMyCode@4 (019127Bh)  
        return x;
00191FAD  mov         eax,dword ptr [this]  
00191FB0  mov         eax,dword ptr [eax]  
;把指针的地址存入eax，然后将该地址的值赋给eax
    }
00191906  mov         dword ptr [op1x],eax  
;从eax取出刚刚函数调用得到的值x，存入变量op1x中
    cout  > (01912A8h) 
00191910  mov         edi,esp  
00191912  mov         eax,dword ptr [op1x]  
00191915  push        eax  
00191916  mov         ecx,dword ptr [_imp_?cout@std@@3V?$basic_ostream@DU?
$char_traits@D@std@@@1@A (019D0D8h)]  
;先后入栈endl和变量op1x
0019191C  call        dword ptr 
[__imp_std::basic_ostream >::operator >::operator
using namespace std;
class addnum {
public:
    addnum(int a, int b) :x(a), y(b) {
        cout getxaddy();
    delete p;
    return 0;
}
    addnum* p;
    p = new addnum(1,2);
00B82857  push        8  
00B82859  call        operator new (0B813B1h)  
00B8285E  add         esp,4  
;开辟一片空间，将成功与否写在eax里
00B82861  mov         dword ptr [ebp-0F8h],eax  
00B82867  mov         dword ptr [ebp-4],0  
00B8286E  cmp         dword ptr [ebp-0F8h],0  
00B82875  je          main+7Eh (0B8288Eh)  
;eax的值存在ebp-0F0h里，如果这里的值等于0，则跳转到main+7h
00B82877  push        2  
00B82879  push        1  
00B8287B  mov         ecx,dword ptr [ebp-0F8h]  
00B82881  call        addnum::addnum (0B81384h)  
;参数入栈函数调用
    addnum(int a, int b) :x(a), y(b) {
00B820E0  mov         dword ptr [this],ecx  
00B820E3  mov         ecx,offset _580C3C40_main@cpp (0B8F026h)  
00B820E8  call        @__CheckForDebuggerJustMyCode@4 (0B812DAh) 
;把ecx（申请的空间首地址）存入this指针，然后进行一个检查，不管他
00B820ED  mov         eax,dword ptr [this]  
00B820F0  mov         ecx,dword ptr [a]  
00B820F3  mov         dword ptr [eax],ecx  
;存入变量a
00B820F5  mov         eax,dword ptr [this]  
00B820F8  mov         ecx,dword ptr [b]  
00B820FB  mov         dword ptr [eax+4],ecx  
;往后挪4位存入变量b
...
;省略cout部分
00B82886  mov         dword ptr [ebp-100h],eax  
; eax是创建的对象的首地址
00B8288C  jmp         main+88h (0B82898h)  
00B8288E  mov         dword ptr [ebp-100h],0  ;这行被跳过，在申请空间失败的时候会跳转到
此处
00B82898  mov         eax,dword ptr [ebp-100h]  
;ebp-100h是对象首地址，存入eax
00B8289E  mov         dword ptr [ebp-0ECh],eax  
00B828A4  mov         dword ptr [ebp-4],0FFFFFFFFh 
00B828AB  mov         ecx,dword ptr [ebp-0ECh]  
00B828B1  mov         dword ptr [p],ecx  
;将对象首地址存入指针p中
    int c = p->getxaddy();
00B828B4  mov         ecx,dword ptr [p]  
00B828B7  call        addnum::getxaddy (0B810FAh)  
00B828BC  mov         dword ptr [c],eax  
;调用函数将返回值存入eax，从eax取出存入变量c
    delete p;
008D653F  mov         eax,dword ptr [p]  
008D6542  mov         dword ptr [ebp-104h],eax  
008D6548  cmp         dword ptr [ebp-104h],0  
008D654F  je          main+0D6h (08D6566h)  
;判断p是否是空指针，是就跳转
构造函数负责初始化数据成员，析构函数用来清除对对象的指向清理空间
对象数组
就是由对象组成的数组，每个元素是一个对象，每个元素创建的时候会调用构造函数，删除时调用析构
函数。
由对象构成的数组，如果构造函数只有一个参数可通过以下方式来赋值
可通过构造函数的重载来设置有一个参数和没有参数的赋值，在定义对象数组时，如下，前两个对象调
用有参数的构造函数，后两个对象调用无参数构造函数：
如果构造函数有多个参数，可以这样定义对象数组：
对象指针
指针就是通过内存地址访问对象
用指针访问单个对象成员
008D6551  push        1  
008D6553  mov         ecx,dword ptr [ebp-104h]  
008D6559  call        addnum::`scalar deleting destructor' (08D14BAh)  
;析构函数调用
008D655E  mov         dword ptr [ebp-10Ch],eax  
008D6564  jmp         main+0E0h (08D6570h)  
008D6566  mov         dword ptr [ebp-10Ch],0  
    return 0;
008D6570  xor         eax,eax  
}
008D1F00  mov         dword ptr [this],ecx  
008D1F03  mov         ecx,dword ptr [this]  
008D1F06  call        addnum::~addnum (08D14B5h)
;调用析构函数之后，p指针不见了，然后内存的内容还在
008D1F0B  mov         eax,dword ptr [ebp+8]  
008D1F0E  and         eax,1  
008D1F11  je          addnum::`scalar deleting destructor'+41h (08D1F21h)  
008D1F13  push        8  
008D1F15  mov         eax,dword ptr [this]  
008D1F18  push        eax  
008D1F19  call        operator delete (08D12CBh)  
;调用delete操作后，内存空间的内容被覆盖清空
008D1F1E  add         esp,8  
008D1F21  mov         eax,dword ptr [this]  
point ob1[4]={1,2,3,4};
point ob1[4]={1,2};
point ob2[2]={
    point(1,2,3),
    point(2,3,4)
}
一般用 . 来访问对象成员，用指针访问的话用 ->
用对象指针访问对象数组
定义一个对象指针，把对象数组赋值给对象指针：
这时p指向数组第一个元素的地址，当p+1则指向下一个元素的地址（地址偏移量不用自己算）
this指针
从一个类中建立多个对象之后，不同对象的数据成员是不同的，会占用不同的内存空间，但是成员函数
一般是一样的，所以共用一块内存空间
this指针也叫自引用指针，在对对象进行函数调用的时候，程序会往this指针赋值为当前对象的首地
址，所以调用的时候，this可以区分不同对象的数据
string 类
C++支持两种类型的字符串：
1. C语言中的以\0结尾的字符数组
2. C++表转库中的string类型
前者可以混在后者里进行运算
运算符同普通变量一样
使用string需要包含库文件： #include
定义和初始化：
向函数传递对象
使用对象作为参数
把实参赋给形参，形参进行改变，但不改变实参本身，是一种单向传递。
实际上是调用拷贝构造函数用实参初始化形参，详见拷贝构造函数
使用对象指针作为参数
把对象地址作为参数，函数改变的则是地址的内容，会改变对象本身。
使用对象引用作为参数
把对象引用作为参数，对象引用其实就是对象本身，函数改变的也是对象本身。
对象的赋值
当两个对象类型相同时，可通过 = 进行赋值：
point arr[4];
point* p;
p = arr;
string str1;
string str2("123");
string str3="1234";
赋值操作仅仅是让两个对象的数据成员相同。
赋值通过赋值运算符函数实现（第五章）
当类中存在指针，可能会发生错误。
拷贝构造函数
拷贝构造函数是一种特殊的构造函数：
形参时本类对象的引用，和构造函数一样没有返回值类型，函数名为类名，可以自定义，也可以默
认生成，但必须有
用于在建立新的对象时用本对象去进行初始化
自定义拷贝构造函数
我们可以选择自己去定义拷贝构造函数，用一个对象去初始化另一个对象
初始化有两种方式：
类名 对象2（对象1）;
类名 对象2=对象1;
示例：
B=A
#include
using namespace std;
class point {
public:
    point(int a, int b) :x(a), y(b) {}
    point(point& p) {
        x = p.x + 1;
        y = p.y + 2;
    }   //拷贝构造函数传递的参数是本类的对象
    int getsum() {
        return x + y;
    }
private:
    int x, y;
};
int main() {
    point op1(1, 2);
    point op2 = op1;//初始化方法1
    point op3(op2);//初始化方法2
    cout << op1.getsum() << endl;
    cout << op2.getsum() << endl;
    cout << op3.getsum() << endl;
    return 0;
}
默认拷贝构造函数