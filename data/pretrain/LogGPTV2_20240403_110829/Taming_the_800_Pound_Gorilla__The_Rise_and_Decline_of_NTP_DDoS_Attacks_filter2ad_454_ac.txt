on-wire bytes of a minimum monlist query packet. We used the 64
byte minimum Ethernet frame plus preamble and inter-packet gap,
which total 84 bytes, to obtain the “on-wire” bandwidth ampliﬁca-
tion factor (BAF). Note that with respect to using all UDP, IP, and
Ethernet frame overhead (including all bits that take time on the
wire), our BAF calculations are lower than [32] but more accurately
represent real bandwidth exhaustion effects via the most common
(Ethernet) data links, as the actual load on the wire in both directions
is considered. Figure 4b shows boxplots for the BAFs seen in each
of the ﬁfteen ONP monlist query response samples. As we can see,
there is a wide range of BAFs in any sample, but the median is fairly
steady across samples at around 4 (4.31 in the last ﬁve samples),
and the maximum is generally around 1 million, except for the three
samples starting on January 24th, when the maximum is around 1
billion. The third quartile BAF is typically around 15, except for the
middle two samples in February, when it spikes to between 50 and
500. This suggests that, while the typical monlist-responding NTP
server can provide an on-wire ampliﬁcation of just 4x, a quarter
of the ampliﬁers still seen in the wild can provide at least a 15x
ampliﬁcation. Using just one or a handful of such ampliﬁers, an
attacker with a 100 Mbps Internet connection can easily overwhelm
a service with a 1000 Mbps connection.
3.3 Threat of the Version Command
Our main focus in this paper is on the threat posed by the NTP
monlist command, as it is known to have a high BAF, is of low utility
for normal NTP operation, and has been used in high-proﬁle DDoS
attacks. However, NTP supports other commands that return more
data than is sent (e.g., version, showpeers) though these have not
1101001K10K100K1M10MAmplifier Rank (sorted by bytes returned per query)101001K10K100K1M10M100M1G10G100G1TAverage Bytes Returned per Querymonlist median: 942; 95th percentile: 90Kversion median: 2578; 95th percentile: 4KNTP monlist amplifiersNTP version amplifiers01-1001-1701-2401-3102-0702-1402-2102-2803-0703-1403-2103-2804-0404-1104-18Sample Date1101001K10K100K1M10M100M1G10GOn-wire Bandwidth Amplification Factor02-2102-2803-0703-1403-2103-2804-0404-1104-18Sample Date1101001K10K100K1M10M100M1G10GOn-wire Bandwidth Amplification Factor438been as widely reported in attacks. As of February 21st 2014, the
ONP data also includes separate Internet-wide NTP mode 6 version
command probes. These are conducted in the same fashion as the
monlist scans, in that every IP in the IPv4 address space is sent
a single packet with the NTP version command and all response
packets are stored. As of the April 18th ONP sample, the global
pool of version responders is around 4M unique IPs. In Figure 4c
we show the version BAFs observed. The measurements reveal
several noteworthy differences between the version command and
the monlist command threat. First, the pool of NTP server IPs
that respond to the version query is much larger (4M vs 110K).
Second, the version pool has not reduced substantially over the
nine weeks that it has been measured. Third, there is much less
variance in the BAF, (the 25th, 50th, and 75th percentiles are almost
exactly the same at around 3.5, 4.6, and 6.9 throughout the nine
samples). Fourth, there are still some outliers, as with monlist,
with the maximum BAF as high as 263M, possibly due to the same
routing loop-like behavior seen for the largest monlist ampliﬁers
discussed in § 3.4. This all means that, while the threat from NTP
DDoS using monlist may be starting to wane, the ampliﬁer pool
available for ampliﬁcation and reﬂection using the version command
is much larger and the median BAFs are comparable (though the
higher end, 75 or 95 percentile, are much lower for version).
We were curious to know what fractions of scanning host or
victim attack packets involved the version versus monlist command.
To measure this, we tabulated the mode ﬂag for likely victim or
scanning NTP clients listed in the monlist tables that ONP-probed
ampliﬁers return (detailed in § 4.1). We found that interest in the
version command (mode 6) by both scanners and attackers relative
to monlist (mode 7) appears to have grown somewhat since mid-
February, with both showing the highest fraction of scanner or victim
IPs contacting the sampled ampliﬁers in the ﬁnal, April 18th sample
(19% of scanners and 0.3% of victims). These values, especially for
victims, should be interpreted with caution, since the global pool of
NTP servers responding to the version command is nearly 40 times
the size of the current monlist pool (4M vs 110K), and shrewed
attackers may simply be using the former for version-based attacks
and the latter for monlist. However, as monlist remediation reduces
the pool of those ampliﬁers, this ratio may change.
Global NTP Versions and Systems: We parsed the responses to
version command probes included in the ONP data between Febru-
ary 21st and March 28th. We aggregated version information for
the samples, which include the OS, system, and version strings, as
well as the NTP stratum of each server [23]. Table 2 shows the
strings most commonly found in the OS ﬁeld. No other systematic
patterns in the data were prominent. We did make one surprising
ﬁnding, however; of the 5.8M unique IPs returning data, nearly a
ﬁfth, 19%, reported stratum 16, which indicates that the NTP server
is unsynchronized to the correct time [23]. This suggests poor man-
agement, as providing the correct time is the reason for an NTP
server’s existence. We also extracted the compile time year from all
version strings, which was present in 1.1M of the server samples.
Only 21% had compile dates in 2013 or 2014; We found that 59%
were compiled before 2012, 48% before 2011, and 23% before 2010.
Surprisingly, 13% were compiled before 2004, over ten years ago.
Such poor state of updates and management is perhaps one reason
vulnerabilities can have impact long after they are discovered.
3.4 The Case of the Mega Ampliﬁers
The maximum number of table entries that the monlist command
returns (which we’ve conﬁrmed empirically) is 600, and each entry
includes just a handful of small ﬁelds, which we discuss in § 4.1.
The expected maximum amount of data returned for a query is
under 50K. Indeed, as Figure 4a shows (note the log scale), the vast
majority of ampliﬁers (99%) return less than 50K in aggregate.
However, as previously shown in Figures 4a and 4b, there is a
small set of ampliﬁers that, at least in one or more of the ﬁfteen
weekly samples, behaves in an unusual and most devastating way.
These “mega ampliﬁers,” when sent a single packet of size less than
100 bytes, reply with megabytes or gigabytes of aggregate response
packets. We found six ampliﬁers that responded with more than a
gigabyte of aggregate packets, and the largest ampliﬁer returned over
136 Gigabytes in a single day sample. In total, about 10 thousand
ampliﬁers responded with more than 100KB of data, double or more
than the command should ever return.
Since April, we have also been conducting twice-daily probes
of a set of 250K IPs that were monlist ampliﬁers in any of the
March 2014 ONP data samples. Between 60K and 15K of these IPs
(decreasing over time) have been responding with monlist tables.
Between April 2nd and June 13th, a set of nine IPs from seven
ASNs had, on at least one occasion replied with more than 10,000
packets (at least 5MB). In parallel to monlist probes, we have been
running packet captures to identify the ampliﬁers that exhibit this
mega ampliﬁer behavior. Several of these ampliﬁers did so on
multiple samples, including the largest of the nine, which replied
with more than 20M packets on each of at least a dozen samples
during this period. This indicates that the behavior was not brieﬂy
transient but likely a systematic misconﬁguration or bug. On May
31st, a single of these ampliﬁers sent 23M packets totalling over
100 gigabytes in just the ﬁrst hour after our probe. Trafﬁc data
shows that this IP continued replying for hours afterwards. These
mega amps often caused a steady stream of ≈50Mbps of trafﬁc,
and spikes above 150Mbps were common, with the largest peak
around 500Mbps, likely when more than one such mega ampliﬁer
was triggered. Strangely, all nine of these ampliﬁers were located
in Japan, according to GeoIP information. We contacted JPCERT
about these IPs and the operators were notiﬁed. After several weeks,
these IPs no longer responded with excessive volume. However, we
never received conﬁrmation as to the root cause of the phenomenon.
If an attacker was lucky enough to either identify an ampliﬁer or,
by chance, happen to trigger an ampliﬁer into behaving this way,
he would hit the DDoS jackpot. Even a single host sending a small
number of packets to a handful of such ampliﬁers could theoretically
use up gigabits of victim bandwidth, and a single such ampliﬁer
would be enough to effectively knock a home Internet user, such as
a gamer, ofﬂine, possibly for hours.
To understand what could cause this unusual behavior, returning
to the 15-week ONP data, we ﬁrst examined the monlist and version
responses from both normal and unusually-large ampliﬁers, and
found that these mega ampliﬁers did not differ systematically from
the overall pool of 6M NTP servers or other ampliﬁers, with perhaps
the exception of system strings, which we show in Table 2. We ob-
serve that in the overall pool, nearly half of the systems responding
to the version command list their system as "Cisco," followed by
31% that list "Unix" (some Cisco devices running the IOS-XR OS
apparently also report system as “UNIX”). In the mega ampliﬁer
(top 10k) pool (of which about half responded to the version com-
mand, allowing labeling) the reported system is most likely to be
Linux (44%) or Junos (36%). In spite of this systematic difference,
there is a large variety of systems represented in this mega ampliﬁer
pool, suggesting that a single bug or common conﬁguration is likely
not the cause of the behavior. For a second clue, we turned to the
contents of the replies, whose parsing we detail in § 4.2.
Brieﬂy, we looked at the monlist tables that the probed servers
replied with, reconstructing the table from the packet payloads just
as the NTP tools would do. We found that the mega ampliﬁers were
439Table 2: Mega ampliﬁer operating system strings, versus all
ampliﬁers and all NTP servers reporting version information.
Mega (10k)
All Ampliﬁers
All NTP
Rank
1
2
3
4
5
6
7
8
9
10
11
12
OS
linux
junos
bsd
cygwin
vmkernel
unix
windows
sun
secureos
isilon
OTHER
cisco
% OS
% OS
44.18
35.85
9.18
4.82
2.41
2.01
0.42
0.37
0.25
0.23
0.21
0.06
linux
bsd
junos
vmkernel
darwin
windows
unix
secureos
sun
qnx
cisco
OTHER
80.22
11.08
3.43
1.42
0.92
0.84
0.56
0.49
0.25
0.22
0.17
0.41
cisco
unix
linux
bsd
junos
sun
darwin
OTHER
vmkernel
windows
secureos
qnx
%
48.39
30.64
18.97
0.97
0.33
0.21
0.13
0.14
0.10
0.07
0.03
0.02
incrementing the count for the ONP scanning server and resending
an updated monlist table, continuously, up to thousands of times.
Since we know that the ONP probe server only sent one packet,
this behavior is consistent with a routing or switching loop or a
similar networking stack ﬂaw, which resulted in the ONP query
packet being re-transmitted along the path or re-processed by these
mega ampliﬁers’ ntpd processes. Other entries in these repeating
(re-sent) tables showed that different clients of these servers had
previously also seen the same multiple response behavior. These
repeated responses typically occurred on a single sample week,
but, in several cases, the same behavior was observed more than
one week in a row for the same ampliﬁer, suggesting something
other than a brief transient failure. We are unable to deﬁnitively
conﬁrm that a network loop was to blame, but evidence points in
that direction.
4. VICTIMOLOGY
NTP DDoS attacks involve at least three categories of systems:
victims, ampliﬁers, and the attacker-controller nodes that spoof
source addresses and trigger ampliﬁers to generate attack trafﬁc.
Our perspectives do not shed much light on the third category, but,
in addition to the ampliﬁers described above, thanks to monlist for
the ﬁrst time we have insight into the population of NTP victims.
This is because the monlist command used to conduct attacks can
itself be used to gain an understanding of who the attacked targets
are. Recall that the command returns the most recent set of clients
that communicated with the NTP service, up to 600 (the median we
saw was 6, the mean 70). Since NTP attacks use the NTP service
by spooﬁng victim IPs, this list of “clients” will also include the IPs
and other characteristics of actual DDoS victims and attacks.
4.1 Understanding the monlist Table