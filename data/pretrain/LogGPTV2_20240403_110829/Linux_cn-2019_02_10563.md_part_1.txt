---
author: Ricardo Gerardi
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 12897
date: '2019-02-23 11:11:55'
editorchoice: false
excerpt: 通过这 5 个插件扩展 Vim 功能来提升你的编码效率。
fromurl: https://opensource.com/article/19/1/vim-plugins-developers
id: 10563
islctt: true
largepic: /data/attachment/album/201902/23/111135wos7r6mssyzrtoxl.jpg
permalink: /article-10563-1.html
pic: /data/attachment/album/201902/23/111135wos7r6mssyzrtoxl.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 通过这 5 个插件扩展 Vim 功能来提升你的编码效率。
tags:
- Vim
- 开发
thumb: false
title: 5 个好用的开发者 Vim 插件
titlepic: true
translator: pityonline
updated: '2019-02-23 11:11:55'
---
> 
> 通过这 5 个插件扩展 Vim 功能来提升你的编码效率。
> 
> 
> 
![](/data/attachment/album/201902/23/111135wos7r6mssyzrtoxl.jpg)
我用 Vim 已经超过 20 年了，两年前我决定把它作为我的首要文本编辑器。我用 Vim 来编写代码、配置文件、博客文章及其它任意可以用纯文本表达的东西。Vim 有很多超级棒的功能，一旦你适合了它，你的工作会变得非常高效。
在日常编辑工作中，我更倾向于使用 Vim 稳定的原生功能，但开源社区对 Vim 开发了大量的插件，可以扩展 Vim 的功能、改进你的工作流程和提升工作效率。
以下列举 5 个非常好用的可以用于编写任意编程语言的插件。
### 1、Auto Pairs
[Auto Pairs](https://www.vim.org/scripts/script.php?script_id=3599) 插件可以帮助你插入和删除成对的文字，如花括号、圆括号或引号。这在编写代码时非常有用，因为很多编程语言都有成对标记的语法，就像圆括号用于函数调用，或引号用于字符串定义。
Auto Pairs 最基本的功能是在你输入一个左括号时会自动补全对应的另一半括号。比如，你输入了一个 `[`，它会自动帮你补充另一半 `]`。相反，如果你用退格键删除开头的一半括号，Auto Pairs 会删除另一半。
如果你设置了自动缩进，当你按下回车键时 Auto Pairs 会在恰当的缩进位置补全另一半括号，这比你找到放置另一半的位置并选择一个正确的括号要省劲多了。
例如下面这段代码：
```
package main
import "fmt"
func main() {
    x := true
    items := []string{"tv", "pc", "tablet"}
    if x { 
        for _, i := range items
    } 
}
```
在 `items` 后面输入一个左花括号按下回车会产生下面的结果：
```
package main
import "fmt"
func main() {
    x := true
    items := []string{"tv", "pc", "tablet"}
    if x {
        for _, i := range items  {
            | (cursor here)
        }
    }
}
```
Auto Pairs 提供了大量其它选项（你可以在 [GitHub](https://github.com/jiangmiao/auto-pairs) 上找到），但最基本的功能已经很让人省时间了。
### 2、NERD Commenter
[NERD Commenter](https://github.com/scrooloose/nerdcommenter) 插件给 Vim 增加了代码注释的功能，类似在  IDE   integrated development environment  中注释功能。有了这个插件，你可以一键注释单行或多行代码。
NERD Commenter 可以与标准的 Vim [filetype](http://vim.wikia.com/wiki/Filetype.vim) 插件配合，所以它能理解一些编程语言并使用合适的方式来注释代码。
最易上手的方法是按 `Leader+Space` 组合键来切换注释当前行。Vim 默认的 Leader 键是 `\`。
在 可视化模式   Visual mode 中，你可以选择多行一并注释。NERD Commenter 也可以按计数注释，所以你可以加个数量 n 来注释 n 行。
还有个有用的特性 “Sexy Comment” 可以用 `Leader+cs` 来触发，它的块注释风格更漂亮一些。例如下面这段代码：
```
package main
import "fmt"
func main() {
    x := true
    items := []string{"tv", "pc", "tablet"}
    if x {
        for _, i := range items {
            fmt.Println(i)
        }
    }
}
```
选择 `main` 函数中的所有行然后按下 `Leader+cs` 会出来以下注释效果：
```
package main
import "fmt"
func main() {
/*
 *    x := true
 *    items := []string{"tv", "pc", "tablet"}
 *
 *    if x {
 *        for _, i := range items {
 *            fmt.Println(i)
 *        }
 *    }
 */
}
```
因为这些行都是在一个块中注释的，你可以用 `Leader+Space` 组合键一次去掉这里所有的注释。
NERD Commenter 是任何使用 Vim 写代码的开发者都必装的插件。
### 3、VIM Surround
[Vim Surround](https://www.vim.org/scripts/script.php?script_id=1697) 插件可以帮你“环绕”现有文本插入成对的符号（如括号或双引号）或标签（如 HTML 或 XML 标签）。它和 Auto Pairs 有点儿类似，但是用于处理已有文本，在编辑文本时更有用。
比如你有以下一个句子：
```
"Vim plugins are awesome !"
```
当你的光标处于引起来的句中任何位置时，你可以用 `ds"` 组合键删除句子两端的双引号。
```
Vim plugins are awesome !
```
你也可以用 `cs"'` 把双端的双引号换成单引号：
```
'Vim plugins are awesome !'
```
或者再用 `cs'[` 替换成中括号：
```
[ Vim plugins are awesome ! ]
```
它对编辑 HTML 或 XML 文本中的 标签   tag 尤其在行。假如你有以下一行 HTML 代码：
```
Vim plugins are awesome !
```
当光标在 “awesome” 这个单词的任何位置时，你可以按 `ysiw` 直接给它加上着重标签（``）：
```
Vim plugins are awesome !
```
注意它聪明地加上了 `` 闭合标签。