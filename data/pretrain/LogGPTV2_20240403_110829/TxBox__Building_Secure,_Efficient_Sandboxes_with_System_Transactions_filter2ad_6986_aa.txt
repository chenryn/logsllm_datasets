title:TxBox: Building Secure, Efficient Sandboxes with System Transactions
author:Suman Jana and
Donald E. Porter and
Vitaly Shmatikov
2011 IEEE Symposium on Security and Privacy
TxBox: Building Secure, Efﬁcient Sandboxes with System Transactions
Suman Jana
The University of Texas at Austin
PI:EMAIL
Donald E. Porter
Stony Brook University
PI:EMAIL
Vitaly Shmatikov
The University of Texas at Austin
PI:EMAIL
Abstract—TXBOX is a new system for sandboxing untrusted
applications. It speculatively executes the application in a
system transaction, allowing security checks to be parallelized
and yielding signiﬁcant performance gains for techniques such
as on-access anti-virus scanning. TXBOX is not vulnerable to
TOCTTOU attacks and incorrect mirroring of kernel state.
Furthermore, TXBOX supports automatic recovery: if a viola-
tion is detected, the sandboxed program is terminated and all
of its effects on the host are rolled back. This enables effective
enforcement of security policies that span multiple system calls.
I. INTRODUCTION
Secure execution and conﬁnement of untrusted applica-
tions is a long-standing problem in system security [35].
We present a new approach to constructing secure, efﬁcient
sandboxes based on system transactions.1 In general, sys-
tem transactions guarantee that a sequence of updates to
system resources satisﬁes atomicity, consistency, isolation,
and durability (ACID). Transactions are increasingly popular
for managing concurrency in modern operating systems.
Our prototype system, TXBOX, uses transactions for (1)
speculative execution of untrusted applications, (2) uncir-
cumventable enforcement of system-call policies, and (3)
automatic recovery from the effects of malicious execution.
TXBOX consists of a relatively simple, policy-agnostic
security monitor running in the OS kernel and a user-level
policy manager. The separation of the security policy and the
enforcement mechanism facilitates management of policies.
Before the transaction associated with a sandboxed program
commits, the monitor inspects its effects on the system
(conveniently assembled in the transaction’s workset and
its system-call log) and checks if they satisfy the policy.
If so,
the transaction is committed and updates become
visible to the rest of the system. Otherwise, the transaction
is aborted and the system is restored to a good state. TXBOX
is suitable for sandboxing “one-shot” execution of unknown,
untrusted programs, as well as for model-based enforcement
of system-call behavior of known benign programs.
Uncircumventability. TXBOX cannot be circumvented by a
sandboxed process. Its kernel-based enforcement mechanism
prevents exploitation of incorrect mirroring of the kernel
1System transactions are not transactional memory. System transactions
deal with accesses by a user process to system resources such as ﬁles and
pipes, not with memory accesses.
state, TOCTTOU races, and/or other semantic gaps between
the security monitor and the OS [21, 58]. Unlike any monitor
that infers effects on the OS from the periphery of the kernel,
the effects analyzed by the TXBOX monitor when making
security decisions are exactly the effects that would take
place if execution is permitted.
Recoverability. Existing system-call monitors must allow or
deny every system call made by the untrusted program be-
fore it executes. Once the call is permitted to execute, there is
no way to recover. Therefore, they must be able to detect the
very ﬁrst sign of misbehavior since the effects of a malicious
execution cannot be “undone.” By contrast, TXBOX executes
untrusted programs speculatively, inside a transaction. If the
monitor determines later that the program has violated a
security policy, it aborts the transaction and the system is
automatically rolled back to a benign state. All changes
made by the violating program to the ﬁle system effectively
disappear, child processes are stopped, and buffered local
inter-process communication is canceled, leaving concurrent
updates made by other programs undisturbed.
To illustrate the beneﬁts of recoverability, Section VI
shows how TXBOX can restore the original state of local
ﬁles if an untrusted program (e.g., a multimedia converter)
attempts to violate the sandboxing policy.
Performance. On realistic workloads, the performance over-
head of TXBOX is less than 20% including the cost of
supporting transactions and less than 5% over untrusted exe-
cution in a transactional OS. Note that there is a compelling
secular (i.e., unrelated to security) reason for supporting
system transactions, namely, managing concurrency.
TXBOX can take advantage of multi-core processors. In
Section VI, we show how to use TXBOX to execute an anti-
virus scan in parallel with the speculative execution of an
untrusted program. This makes on-access scanning practical
for routine use in production systems.
Expressive policies. TXBOX can enforce a rich class
of practical security policies. This includes all policies
supported by system-call interposition tools such as Sys-
trace [49], system-call policies for malware detection [7, 33,
36], model-based system-call automata [26, 52, 56], data-
ﬂow policies on system-call arguments [5], and, in general,
any policy expressible as a security automaton [16] over
system calls and system resources. For system-call policies,
1081-6011/11 $26.00 © 2011 IEEE
DOI 10.1109/SP.2011.33
329
TXBOX provides uncircumventability, recoverability, and
parallelization of policy checking.
tions. Reconstructing OS-level behavior from a hardware-
level view of the system requires non-trivial effort [25].
Unlike system-call monitors, TXBOX also supports secu-
rity policies on lower-level objects such as ﬁles and sockets.
This includes access-control policies on system resources,
e.g., blacklists and whitelists of ﬁles and directories. Because
system transactions span fork and exec, TXBOX enables a
simple form of information-ﬂow control by tracking not just
the resources accessed by the monitored process, but also
those accessed by its children. For these policies, TXBOX
provides uncircumventability and recoverability.
Semantic ﬁdelity. By analogy with hardware transactional
memory, a very different mechanism which implements a
similar abstraction, TXBOX can be “deconstructed” into
grouping, rollback, access summary, and access check com-
ponents [30]. Grouping enables the security monitor to
observe the cumulative effects of an entire sequence of
system calls before making the security decision. Rollback
enables recovery from the effects of malicious execution.
Access summary assembles all of the program’s effects at
the ideal layer of abstraction for making security decisions:
changes to kernel data structures, updates to ﬁle contents,
system calls and their arguments, etc. Access checks prevent
malicious programs from affecting the rest of the system.
Implementation. Our prototype implementation is based on
TxOS [48], a version of commodity Linux with support
for system transactions. The main differences are as fol-
lows. TXBOX is a sandbox architecture based on system
transactions; TxOS provides a concrete implementation of
system transactions. The focus of TxOS is on managing
concurrency. Trusted applications can take advantage of
system transactions to prevent TOCTTOU conditions such
as access/open ﬁle-system races, but TxOS per se does not
deal with sandboxing untrusted code or preventing attacks
on the host machine by malicious applications.
Organization of the paper. In Section II, we describe the
challenges of building a robust sandbox and how they are ad-
dressed by TXBOX. Related work is surveyed in Section III.
System transactions are introduced in Section IV. Design
and implementation of TXBOX are described in Section V
and evaluated in Section VI. We analyze the limitations of
our approach in Section VII and conclude in Section VIII.
II. BUILDING A BETTER SANDBOX
A. Understanding behavior of the sandboxed program
A malicious program can attack its host machine in a
variety of ways. To block malicious behavior, the sandbox
must be observing the program at the right level of abstrac-
tion. For example, assembly-level inline reference monitors
can enforce properties such as control-ﬂow integrity [1], but
preventing a program from opening a network connection
after reading private ﬁles requires visibility into OS abstrac-
Even if the security monitor is observing the application’s
behavior in the OS, many straightforward observation points
are prone to subtle errors that can compromise security.
Consider a na¨ıve user visiting a malicious website. The site
appears to host a video ﬁle, but asks the user to install
a codec to play it. The “codec” contains malicious code
which steals the user’s private data and sends it over the
network. This particular attack can be prevented if the codec
is executed in a sandbox which enforces a simple policy: “an
untrusted program should not read the user’s private ﬁles.”
At ﬁrst glance, this policy can be enforced by intercepting
all open system calls and checking whether the argument
is one of the forbidden ﬁles. Unfortunately, the system-call
API in modern OSes such as Linux is extremely rich in
functionality, giving the attacker many ways to achieve his
goal. For example, the malicious codec can create a soft
link pointing to a public ﬁle and then change it so that it
points to a private ﬁle. Therefore, the system-call monitor
must also check link system calls, and so on. To enforce
even simple policies, a system-call monitor must know all
possible system-call sequences that can lead to a violation
and the monitor must check every call which might belong
to such a sequence. This is not only difﬁcult to implement
correctly but can also degrade performance.
Even if the system-call monitor correctly tracks all rele-
vant system calls, it must completely understand the effects
of the sandboxed program’s behavior on the host system:
which ﬁles have been accessed, what
is the cumulative
effect of several system calls, etc. This is a notoriously
difﬁcult problem. System-call interposition tools have been
plagued by TOCTTOU (time-of-check-to-time-of-use) vul-
nerabilities [21, 58] which enable malicious programs to
exploit incorrect mirroring of kernel state inside the security
monitor and discrepancies between system calls as observed
by the interposition tool and as executed by the kernel.
By design, TXBOX is immune to TOCTTOU attacks.
Sandboxed processes run inside separate transactions, so
changes made by one of them to their shared state will not
be visible to the other until the transaction commits. If a
sandboxed process spawns a child, both run inside the same
transaction and their updates to system state are reﬂected
in the same transactional workset. Policy enforcement in
TXBOX is performed by inspecting objects in the workset
and thus cannot be evaded by splitting updates between the
parent and the child.
Rather than construct an error-prone mapping of system-
call arguments or hardware-level events to OS state changes,
TXBOX directly inspects pending changes to kernel state
made by the transaction wrapping the sandboxed process
and its children. This makes it easy to enforce whitelist
and blacklist access-control policies. Files and directories
are represented by their inodes (in the case of multiple
330
ﬁle systems, also by superblock identiﬁers). The sandboxed
process cannot evade enforcement by switching mappings
between ﬁle names and inodes.
B. Recovering when a violation is detected
When a conventional sandbox detects that the conﬁned
program is trying to escape the sandbox (e.g., make a
forbidden system call or access a forbidden resource), it can
block that particular action but cannot undo the program’s
previous effects on the host. If the policy is incomplete or if
a violation can be detected only after multiple system calls,
the damage may already have been done.
For example, consider a codec downloaded by the user
from an untrusted website. A reasonable sandboxing policy
may ensure that the codec can only write to ﬁles in the user’s
video directory. Suppose the codec is malicious and, after
damaging or infecting the user’s videos, attempts to escape
the sandbox by connecting to the network. The sandbox
detects this, denies the call, and terminates the codec, but
the user’s video ﬁles have already been corrupted.
When TXBOX detects a policy violation, the transaction is
aborted and the system automatically reverts to a good local
state (except for the effects of previously allowed external
I/O in certain enforcement regimes—see Section V-D). The
program’s effects on the host are undone, while concurrent
updates performed by other processes are left in place. If
the policy is incomplete, as long as the sandboxed program
attempts to perform at least one of the forbidden actions,
TXBOX will roll back the effects of all of its actions.
C. Taking advantage of parallelism
It is difﬁcult for a conventional sandbox based on system-
call monitoring to take advantage of parallelism in modern
multi-core processors. Whenever the sandboxed program
makes a system call, its execution must be paused in order
for the monitor to decide whether to allow or deny the call.
Because of this, the sandboxed program and the monitor
cannot be executed concurrently. This is also true for other
security checks such as anti-virus scanning. An untrusted
program must be scanned before it is executed because there
is no way to undo its effects on the host if the scanner detects
an infection after the program has been permitted to execute.
One way to balance security and performance is to ﬁrst
execute a copy of the untrusted code in a monitored sandbox
and, if no problems are detected, execute it “natively” in the
future. Unfortunately, it is difﬁcult to make the monitoring
transparent [22], and this approach is thus vulnerable to
“split-personality” malware which behaves benignly if it is
being observed and maliciously otherwise (see Section III).
TXBOX can take advantage of parallelism because system
transactions are a form of speculative execution. TXBOX lets
the sandboxed program run with close-to-native performance
while performing security checks such as anti-virus scanning
in parallel. If a violation is detected, all changes made by the
program are discarded. Because only a single copy of the
untrusted code is executed, split-personality malware may
refuse to execute in TXBOX, but the effects of malicious
behavior do not enter into the system.
III. RELATED WORK
Speck. Nightingale et al. proposed a system called
Speck [40], which uses a multi-core processor to specu-
latively execute the untrusted program while concurrently
performing security checks on an instrumented copy on
another core. To synchronize the copies, Speck records
all non-deterministic system calls (e.g., read) made by
the instrumented copy and replays their outcome to the
uninstrumented process.
Because security checks are not applied to the unin-
strumented copy, Speck may be circumvented by “split-
personality” malware which behaves differently in moni-
tored and unmonitored environments. In general, any ap-
proach that involves running an instrumented and uninstru-
mented copies of the same code requires instrumentation
to be completely transparent. Speck uses Pin, which is
designed to be transparent to a well-behaved program. A
malicious program, however, can detect Pin by checking if
certain dynamically loaded libraries are present in its address
space. Building an instrumentation system which is truly
transparent against an actively malicious program is difﬁcult.
Because instrumentation used by Speck is not transparent,
a malicious program can take different paths depending
on whether it has been instrumented or not. If the paths
differ only on system calls Speck considers deterministic
and the instrumented copy passes security checks, then the
uninstrumented copy may behave maliciously without being
detected. This is a TOCTTOU vulnerability. The problem is
not the lack of transparency per se (we do not claim that
TXBOX is transparent), but the lack of transparency com-
bined with concurrent execution of two copies of untrusted
code enables “split-personality” malware to evade detection.
Presumably, Speck could be modiﬁed to log and replay
all system calls, reducing the opportunities for the copies to
deviate. Such frequent synchronization would dramatically
reduce the exploitable parallelism and defeat the primary
purpose of parallel security checking.
Speck
TxBox
Sync on
non−deterministic
system calls
Monitor
Monitor
Security
checks
Speculative
Instrumented
Core 1