 **What**
As it stands, there doesn't seem to be a way to generate typings for a file,
or files, using Deno. It _might_ be possible with `Deno.emit`, using the 2nd
argument (`CompilerOptions`), but i haven't checked this and I'm not too
confident it can.
It also seems like `deno types` could be expanded upon, ie there's a great
opportunity to expand upon this subcommand.
But what I propose is for `deno types` (and ideally a programatic way **as
well** ) to create the typings for the given file or directory **that outputs
to a single file**
**How**
    $ deno types src/mod.ts >> dist/mod.d.ts
    await Deno.emit("./src/mod.ts", { typings: true })
**Why**
Well say I have a project that uses typescript. I plan to move over from Node
to Deno, but I need typings. It seems impossible to do this with Deno, halting
on that projects progress to make the beautiful journey of moving to Deno.
This issue. is specifically with emitting a bundled `.d.ts` file.
Whilst I can use `Deno.emit(file, { compilerOptions: { declaration: true }})`,
it still doesn't provide the bundled typings
**Example**
Here is an example, of me wanting to create a single bundled `.d.ts` file
using the `emit` method, but it not actually providing typings:
    // src/mod.ts
    export * from "./something.ts"
    export * from "./test.ts"
    // compile.ts
    const stuff = await Deno.emit("./src/mod.ts", {
      compilerOptions: {
        "declaration": true,
        "emitDeclarationOnly": true,
      }
    })
    const keys = Object.keys(stuff.files)
    const key = keys.find(k => k.includes("mod.ts.d.ts")) as string
    console.log(stuff.files[key])
    /// 
    export * from "./something.ts";
    export * from "./test.ts";
As you can see, it doesn't provide any typings