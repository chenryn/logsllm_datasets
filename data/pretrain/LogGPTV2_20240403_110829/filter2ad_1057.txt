# Fast, Accurate, and Lightweight Real-Time Traffic Identification Method Based on Flow Statistics

## Authors
- Masaki Tai
- Shingo Ata
- Ikuo Oka

### Abstract
Real-time traffic identification is a critical technology for providing differentiated services to real-time and bulk applications. Traditionally, this was achieved by examining the protocol and port numbers in the IP header. However, the emergence of streaming traffic over TCP, P2P, and VPNs has made this approach increasingly difficult. This paper proposes a novel method for identifying real-time traffic based on the statistical characteristics of packet arrivals. Our approach is fast, accurate, and lightweight compared to conventional techniques.

## 1. Introduction
Previously, identifying real-time traffic was straightforward by checking the protocol number in the IP header, as most real-time applications used UDP packets. Well-known port numbers were also useful for classifying applications [1]. However, the rise of streaming traffic over TCP connections and overlay networks such as P2P and VPNs has rendered these methods less effective.

Recent approaches, such as signature-based classification [2,3] and machine learning techniques [4], have been proposed to address this issue. However, these methods are not suitable for online identification due to their high computational overhead and data storage requirements, which make them impractical for implementation on network routers. 

In this paper, we propose a new real-time traffic identification method that leverages the statistical differences in packet inter-arrival times. This method is designed to be fast and efficient, making it suitable for real-time traffic identification.

## 2. Monitoring Real-Time and Bulk Traffic: Preliminary Analysis
We deployed a traffic monitor at the gateway of our laboratory to capture all packets traversing between our laboratory and the Internet. We used libpcap to implement the capture program, recording source and destination IP addresses, port numbers, protocol numbers, and timestamps for each packet.

After capturing the packets, we classified them into flows based on the five-tuple (source and destination IP addresses, source and destination port numbers, and protocol number). We set a timeout of 60 seconds to detect the end of a flow.

We analyzed both real-time and bulk (data transfer) traffic using TCP, without relying on protocol and port numbers. We focused on several streaming flows from popular sites in Japan as real-time traffic and file downloads from Linux distribution sites as bulk traffic. The protocols and sites are summarized in Table 1. Note that these protocols use TCP for data delivery, making it impossible to identify real-time traffic by checking port/protocol numbers alone. We also examined some UDP applications like Skype VoIP traffic to ensure our method could detect both TCP and UDP-based streaming.

| **Category** | **Service** | **Source Address** | **Protocol (Port Number)** |
|--------------|-------------|--------------------|-----------------------------|
| **Real-time** | News-MS | 221.171.253.xxx | ms-streaming (1755) |
|              | News-Flash | 202.214.162.xxx | macromedia-fcs (1935) |
|              | Music | 167.167.9.xxx | ms-streaming (1755) |
|              | InternetTV | 58.159.240.xxx | ms-streaming over rtsp (554) |
|              | Skype | 61.196.29.xxx | skype (unspecified) |
| **Bulk** | Debian-FTP | 203.178.137.xxx | ftp (21) |
|          | Vine | 150.65.7.xxx | ftp (21) |
|          | FedoraCore | 203.178.137.xxx | ftp (21) |
|          | Debian-HTTP | 61.215.208.xxx | http (80) |

Our analysis revealed that intervals between packet arrivals in bulk traffic are typically small and bursty, while those in real-time traffic exhibit a sawtooth pattern, with sets of packets arriving with small gaps and large intervals between sets.

## 3. Real-Time Traffic Identification Method
Based on our analysis, we developed a method to classify traffic into bulk and real-time by focusing on the distribution of large gaps in packet arrival times. The method involves the following steps:

### 3.1. Headpoint Detection Using LPF
We define a "headpoint" as an interval with a large value. To detect headpoints, we use a low-pass filter (LPF) to eliminate small intervals. The threshold \( T_i \) for the LPF is calculated as:
\[ R_i \leftarrow \alpha R_{i-1} + (1 - \alpha) M_i \]
\[ T_i \leftarrow \beta R_i \]
where \( M_i \) is the measured interval between the \( i \)-th and \( (i-1) \)-th packets, and \( \alpha \) and \( \beta \) are smoothing and delay dispersion coefficients, respectively. We set \( \alpha = 0.1 \). An interval \( M_i \) is detected as a headpoint if \( M_i > T_i \).

Figure 1 shows the headpoints detected when \( \beta = 1.0 \), which provides a good threshold for detection.

### 3.2. Range Check of Headpoints Using BPF
When a headpoint is detected, we check whether the interval falls within the range typical of real-time applications. We use a band-pass filter (BPF) for this purpose. By analyzing the distribution of packet intervals, we found that real-time traffic intervals are typically between 20 ms and 1 second. If the interval falls within this range, the headpoint is marked as "Yes"; otherwise, it is marked as "No".

### 3.3. Continuousness Check
We then check for the continuous presence of "Yes" marked headpoints. If five or more consecutive headpoints are marked "Yes," the flow is identified as real-time. Otherwise, it is classified as bulk. This step is effective because bulk traffic rarely exhibits long, continuous intervals.

### 3.4. Classification Algorithm
The algorithm for real-time traffic identification is as follows:

1. Classify arrived packets into flows based on the five-tuple.
2. For each flow \( f \), initialize four variables:
   - Previous packet interval \( M_p^f \)
   - LPF threshold \( R_f \)
   - Previous headpoint \( H_p^f \)
   - Continuity counter \( C_f \)

3. When the \( i \)-th packet of flow \( f \) arrives:
   1. Calculate the interval \( M_{i,f} \).
   2. Update the LPF threshold: \( R_f \leftarrow \alpha R_f + (1 - \alpha) M_i \).
   3. LPF check: If \( M_i > R_f \), mark \( M_{i,f} \) as headpoint \( H_{f,j} \). Otherwise, reset \( C_f \) to 0 and jump to Step 6.
   4. BPF check: If \( H_{f,j} \) is between 20 ms and 1 second, increment \( C_f \) by one. Otherwise, jump to Step 7.
   5. Continuousness check: If \( C_f = 5 \), identify flow \( f \) as real-time.
   6. Update previous headpoint: \( H_p^f \leftarrow H_{f,j} \) and increment \( j \) by one.
   7. Update previous interval: \( M_p^f \leftarrow M_{i,f} \) and increment \( i \) by one.

This procedure involves minimal computational overhead, making it suitable for real-time updates. The worst-case detection time is 5 seconds, which is relatively small compared to the buffering delay in streaming applications.

## 4. Identification Results
To validate our method, we classified publicly available trace data from CAIDA, captured at an OC192c backbone link between Indianapolis and Kansas City on June 1, 2004. Our method achieved high accuracy (> 80%) in identifying streaming applications, as shown in Table 2.

| **Category** | **Total Flows** | **Manually Classified** | **Proposed Method** | **Detection Rate** |
|--------------|-----------------|-------------------------|---------------------|--------------------|
| All          | 416,933         | 416,933                 | 26,288              | 6.3%               |
| WindowsMedia | 79              | 79                      | 70                  | 88.6%              |
| MacromediaFlash | 36             | 36                      | 30                  | 83.3%              |
| Real, QuickTime | 15            | 15                      | 12                  | 80.0%              |
| RTSP         | 419             | 419                     | 389                 | 92.8%              |
| HTTP         | 36,974          | 36,974                  | 6,534               | 17.6%              |
| FTP          | 7,324           | 7,324                   | 848                 | 11.6%              |
| DNS, NetBIOS, SMB, SNMP, NTP | 6,777 | 6,777 | 818 | 12.1% |
| SMTP, POP, IMAP | 82,685        | 82,685                  | 4,129               | 5.0%               |

Additionally, we tested our method on locally traced data, including real-time streaming and Skype VoIP traffic. Our method successfully identified both types of traffic, demonstrating its effectiveness in detecting various streaming services over HTTP.

## 5. Conclusion
In this paper, we demonstrated that the statistical characteristics of packet arrival intervals differ significantly between real-time and bulk traffic. We proposed an algorithm to automatically classify real-time and bulk traffic based on these characteristics. Experimental results show that our method can accurately identify real-time traffic, making it a valuable tool for network management and service differentiation.

## References
1. Andrew W. Moore and Konstantina Papagiannaki, “Toward the Accurate Identification of Network Applications,” in Proceedings of PAM Passive and Active Network Measurement, pp. 41–54, March 2005.
2. Subhabrata Sen, Oliver Spatscheck, and Dongmei Wang, “Accurate, Scalable In-Network Identification of P2P Traffic Using Application Signatures,” in Proceedings of the 13th International Conference on World Wide Web, pp. 512–521, May 2004.
3. Thomas Karagiannis, Konstantina Papagiannaki, and Michalis Faloutsos, “BLINC: Multilevel Traffic Classification in the Dark,” in Proceedings of SIGCOMM Special Interest Group on Data Communication, pp. 229–240, August 2005.
4. Andrew W. Moore and Denis Zuev, “Internet Traffic Classification Using Bayesian Analysis Techniques,” in Proceedings of the 2005 ACM SIGMETRICS International Conference on Measurement and Modeling of Computer Systems, pp. 50–60, June 2005.