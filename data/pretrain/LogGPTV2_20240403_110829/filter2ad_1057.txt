title:Fast, Accurate, and Lightweight Real-Time Traffic Identification Method
Based on Flow Statistics
author:Masaki Tai and
Shingo Ata and
Ikuo Oka
Fast, Accurate, and Lightweight
Real-Time Traﬃc Identiﬁcation Method
Based on Flow Statistics
Masaki Tai, Shingo Ata, and Ikuo Oka
Graduate School of Engineering
Osaka City University
3–3–138, Sugimoto, Sumiyoshi-ku, Osaka 558–8585, Japan
{tai@n.,ata@,oka@}info.eng.osaka-cu.ac.jp
Abstract. Recently, identiﬁcation of real-time traﬃc online is a key
technology to achieve diﬀerent service to real-time and bulk applications.
Previously it is easy to identify real-time by checking the protocol/port
number in IP header, however, it becomes more diﬃcult due to the ex-
istence of streaming traﬃc over TCP connection, overlay networks such
as P2P and VPN. In this paper, we propose a new identiﬁcation method
for real-time traﬃc based on not checking the protocol number, but an-
alyzing the statistical characteristics of packet arrivals. Our approach is
fast, accurate and lightweight compared to conventional techniques.
1 Introduction
Previously, it is easy to identify real-time traﬃc by checking the protocol num-
ber ﬁeld in IP header because most of real-time applications use UDP packets.
Well-known port numbers are also useful to classify the type of applications [1].
However, there is a possibility that the traﬃc classiﬁcation by using such ap-
proaches will not be applicable in the future due to the existence of streaming
traﬃc over TCP connection. Moreover, detection of real-time traﬃc over a kind
of overlay network such as P2P or VPN is neither easy.
Recently, some approaches have tried to treat the problem of traﬃc iden-
tiﬁcation. (e.g., signature-based classiﬁcation [2,3] and machine learning tech-
niques [4].) However, these approaches are not suitable for online identiﬁcation
because signature and ML based approaches require much computational over-
heads and data storages which are too huge to implement on network routers.
The identiﬁcation should be fast to follow up the speed of packet forwarding.
In this paper, we propose a new real-time traﬃc identiﬁcation method which
utilizes a remarkable diﬀerence on the statistics of packet inter-arrival gaps.
2 Monitoring Real-Time/Bulk Traﬃc and It Preliminary
Analysis
We deploy a traﬃc monitor at the gateway of our laboratory. We mirrored traﬃc
that passed the gateway of our laboratory, and capture all packets traversed
S. Uhlig, K. Papagiannaki, and O. Bonaventure (Eds.): PAM 2007, LNCS 4427, pp. 255–259, 2007.
c(cid:2) Springer-Verlag Berlin Heidelberg 2007
256
M. Tai, S. Ata, and I. Oka
Table 1. Summary of target traﬃc
Real-time
News-MS
Service
Source address
221.171.253.xxx
202.214.202.xxx
News-Flash 202.214.162.xxx
167.167.9.xxx
58.157.27.xxx
Music
ISP
CM
Protocol (Port number)
ms-streaming (1755)
ms-streaming (1755)
macromedia-fcs (1935)
ms-streaming (1755)
macromedia-fcs (1935)
InternetTV 58.159.240.xxx ms-streaming over rtsp (554)
Skype
61.196.29.xxx
skype (unspeciﬁed)
Bulk
Service
Source address Protocol (Port number)
Debian-FTP 203.178.137.xxx
203.178.137.xxx
Vine
150.65.7.xxx
Fedoracore
Debian-HTTP 61.215.208.xxx
ftp (21)
ftp (21)
ftp (21)
http (80)
between our laboratory and the Internet. We implement a capture program
with libpcap. For each packet, source and destination IP addresses, source and
destination port numbers, protocol number, of the packet and time stamp when
captured are recorded.
After monitoring, we then classify captured packets into ﬂows, and analyze
the interval of packet arrival times in the ﬂow. For the ﬂow classiﬁcation, we
consider packets having the same ﬁve tuples as the same ﬂow. We also set the
timeout to detect the end of ﬂow to be 60 seconds.
We analyze both real-time and bulk (i.e., data transfer) traﬃc by using TCP
for classiﬁcation without protocol and port numbers. In this paper, we analyze
several streaming ﬂows from famous sites in Japan as target real-time traﬃc.
We also examine some ﬁle downloads from sites of Linux distributions as bulk
transfer traﬃc. Sites and protocols are summarized in Table 1. Note that these
protocols use TCP to deliver data traﬃc of streaming, i.e., we cannot identify
real-time traﬃc by checking the port/protocol numbers. We also investigate some
UDP applications like Skype VoIP traﬃc because we should be able to detect
the UDP based streaming as well as TCP based one.
We especially focus on intervals of packet arrives in the ﬂow. As a result of
comparing time-variant intervals of packet arrivals, we can observe that intervals
in bulk traﬃc are almost small, which indicates that arrival of packets in bulk
traﬃc is bursty. On the other hand, for real-time traﬃc, the intervals of packet
arrivals are observed by a kind of sawtooth wave, i.e., a set of packets is arriving
with small gaps, and the interval between two sets is large.
3 Real-Time Traﬃc Identiﬁcation Method
As a result of analysis in the previous section, we consider that comparing dis-
tribution of large gaps is an easy way to identify the real-time traﬃc. For this
purpose, we classify traﬃcs into bulk and real-time by following three steps.
Prior to proceeding the identiﬁcation, we classify traﬃc into ﬂows by values of
ﬁve tuples in the IP header.
1. Collect packet intervals having longer values by using LPF (Low Pass Filter).
2. Check whether the large gap is between the range of the interval which is
used by most of real-time applications.
3. Check whether the intervals are appeared continuously.
Fast, Accurate, and Lightweight Real-Time Traﬃc Identiﬁcation Method
257
 1e+06
 800000
 600000
 400000
 200000
ISP
R
Headpoint
 70000
 60000
 50000
 40000
 30000
 20000
 10000
]
c
e
s
u
[
l
a
v
r
e
t
n
I
Skype
R
Headpoint
 0
 0
 1e+06
 2e+06
 3e+06
Elapsed time [usec]
(a) ISP
 4e+06
 5e+06
 0
 0
 1e+06
 2e+06
 3e+06
Elapsed time [usec]
 4e+06
 5e+06
 700000
 600000
 500000
 400000
 300000
 200000
 100000
News - Flash
R
Headpoint
 40000
 35000
 30000
 25000
 20000
 15000
 10000
 5000
]
c
e
s
u
[
l
a
v
r
e
t
n
I
(b) Skype
Debian - FTP
R
Headpoint
]
c
e
s
u
[
l
a
v
r
e
t
n
I
]
c
e
s
u
[
l
a
v
r
e
t
n
I
 0
 0
 1e+06
 2e+06
 3e+06
Elapsed time [usec]
(c) News-Flash
 4e+06
 5e+06
 0
 0
 1e+06
 2e+06
 3e+06
Elapsed time [usec]
 4e+06
 5e+06
(d) Debian-FTP
Fig. 1. Headpoint detection (β = 1)
3.1 Headpoint Detection by Using LPF
We deﬁne that the interval having the large value as Headpoint in this paper. To
detect headpoints, we use a low pass ﬁlter (LPF) to eliminate small intervals. We
apply the calculation of RTO (Retransmission TimeOut) of TCP as LPF. When
the i-th packet of the ﬂow arrives, The threshold Ti of LPF is given by Ri ← αRi−1+
(1 − α)Mi and Ti ← βRi, where Mi is the measured value of interval between i-th
and (i − 1)-th packets. α and β are smoothing coeﬃcient and coeﬃcient of delay
dispersion, respectively. In this equation, we use 0.1 for α. The interval Mi is de-
tected as headpoint when Mi > Ti. Note here that the value of β strongly aﬀects the
accuracy of detection of headpoints. We therefore investigate the appropriate value
of β. Fig. 1 compares headpoints detected when β is set to be 1.0 (i.e., the threshold
is set to be the approximated average of intervals). As shown in this ﬁgure, we can
observe that β = 1 achieves a good threshold to detect headpoints.
3.2 Range Check of Headpoints by BPF
When the j-th headpoint of the ﬂow is detected, we check whether the interval of
headpoint is generated by the real-time application or not. We use a band path
ﬁlter (BPF) for checking. To obtain the appropriate range of BPF we investigate
the distribution of packet intervals for each type of application.
We ﬁrst calculate the interval time between two packets on a ﬂow. Next, we
sort all intervals in ascending order, and count the number of packets having the
same interval. We ﬁnally obtain the cumulative probability of the distribution of
intervals of packet arrivals. Especially, we focus on the region that the cumulative
distribution is above 0.9. From this observation, intervals of real-time traﬃc are
258
M. Tai, S. Ata, and I. Oka
also distributed from 20 msec to 1 sec, we can consider that generated by the
rate control of application. Our BPF marks “Yes” if the interval of headpoint is
in the range from 20 msec to 1 sec, otherwise the headpoint is marked by “No”.
3.3 Continuousness Check
After BPF marking, we ﬁnally check whether sequence of headpoints are continu-
ously marked by “Yes”. If so, we identify the ﬂow as real-time, otherwise we iden-
tify as bulk. However, this is quite rare that headpoints of bulk traﬃc are marked
“Yes” continuously due to the burstiness of the bulk traﬃc. Therefore we introduce
a counter which represents the number of headpoints continuously marked as “Yes”.
We use 5 (ﬁve) headpoints as the threshold of continuousness. That is, ﬁve contin-
uous headpoints are within the range of BPF, the ﬂow is identiﬁed as real-time.
3.4 Classiﬁcation Algorithm
From previous subsections, we ﬁnally deﬁne the algorithm of real-time traﬃc
identiﬁcation. First, arrived packets are classiﬁed into ﬂows by checking ﬁve-
tuples of IP header. For each ﬂow f, the algorithm stores four variables. Note
here that all of variables are initialized by zero.
– Previous value of packet interval M p
f
– Threshold of LPF Rf
– Previous value of headpoint H p
f
– Counter for continuousness Cf
When the i-th packet of the ﬂow f arrives, the router perform following procedures.
1. Obtain the interval Mi,f
2. Rf ← αRf + (1 − α)Mi
3. LPF check: if Mi is larger than Rf , Mf,i is headpoint Hf,j of ﬂow f. Other-
4. BPF check: if Hf,j is between 20 msec to 1 sec, increment Cf by one. Oth-
wise jump to Step. 7.
erwise let Cf ← 0, and jump to Step. 6.
5. Continuousness check: if Cf = 5, ﬂow f is identiﬁed as real-time.
6. H p
f
7. M p
f
← Hf,j and increment j by one
← Mf,i and increment i by one
Mainly, our procedure consists of one calculation, three comparisons, and three
assignments. We consider that it is very small computational overhead which
enables to update online. Moreover, in the worst case, the detection time is 5 sec.
We consider that this delay is relatively small against the delay of buﬀering at
the beginning of playout in streaming applications.
4 Identiﬁcation Results
To verify the accuracy of identiﬁcation on our proposed method, we classify a pub-
licly available traced data provided by CAIDA, which is captured data collected
Fast, Accurate, and Lightweight Real-Time Traﬃc Identiﬁcation Method
259
at OC192c backbone link between the Indianapolis router node and Kansas City
on June 1st, 2004. We can also observed from Table 2 that our method can iden-
tify streaming applications with high accuracy (> 80%). Additionally, we classify
locally traced data, which a diﬀerent dataset from the one we used to analyze.
During capture of the traﬃc, we played a number of real-time streaming traﬃc
over HTTP and Skype VoIP traﬃc. As a result of identiﬁcation on the data traced
our laboratory, our proposed method can identify both real-time over HTTP and
Skype VoIP traﬃc by checking the payload. For this reason, our method can also
detect some streaming services over HTTP which are included in 6,534 ﬂows.
Table 2. Identiﬁcation results (CAIDA trace)
Category
Total
Streaming
Streaming
Streaming
Streaming
Web
Data
Mail
Network management dns, netbios, smb, snmp, ntp
smtp, pop, imap
Application/
protocol
All
WindowsMedia
MacromediaFlash
Real, QuickTime
rtsp
http
ftp
# of ﬂows identiﬁed as real-time
Manually classiﬁed
416933
79
36
15
419
36974
7324
6777
82685
Proposed Detection rate
6.3%
88.6%
83.3%
80.0%
92.8%
17.6%
11.6%
12.1%
5.0%
26288
70
30
12
389
6534
848
818
4129
5 Conclusion
In this paper, we have shown that the arrival interval of the packet of the ﬂow
characteristic is obviously diﬀerent between real-time traﬃc and bulk traﬃc.
Next, we have proposed the algorithm to classify a real-time traﬃc and a bulk
traﬃc automatically by using result of analysis. Experimental results have shown
that our method can identify real-time traﬃc with high accuracy.
References
1. Andrew W. Moore and Konstantina Papagiannaki, “Toward the Accurate Identiﬁca-
tion of Network Applications,” in Proceedings of PAM Passive and Active Network
Measurement, pp. 41–54, March 2005.
2. Subhabrata Sen, Oliver Spatscheck, and Dongmei Wang, “Accurate, Scalable In-
Network Identiﬁcation of P2P Traﬃc Using Application Signatures,” in Proceedings
of the 13th international conference on World Wide Web, pp. 512–521, May 2004.
3. Thomas Karagiannis, Konstantina Papagiannaki, and Michalis Faloutsos, “BLINC:
Multilevel Traﬃc Classiﬁcation in the Dark,” in Proceedings of SIGCOMM Special
Interest Group on Data Communication, pp. 229–240, August 2005.
4. Andrew W. Moore and Denis Zuev, “Internet Traﬃc Classiﬁcation Using Bayesian
Analysis Techniques,” in Proceedings of the 2005 ACM SIGMETRICS international
conference on Measurement and modeling of computer systems, pp. 50–60, June
2005.