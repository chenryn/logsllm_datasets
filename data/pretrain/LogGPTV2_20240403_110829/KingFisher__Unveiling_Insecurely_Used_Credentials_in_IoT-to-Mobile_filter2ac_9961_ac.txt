D. Security Violation Detection
Having the identiﬁed SCs and SC-related functions, KING-
FISHER assesses whether the security properties listed in
Section III are violated from the perspectives of SC generation,
distribution, validation, protection and revocation.
Detecting Insecurely Generated SCs. To check whether a SC
is securely generated, KINGFISHER examines the SC length
and its randomness. In particular, KINGFISHER labels the SCs
whose length is less than 16 bytes as vulnerable (i.e., violating
P1). With respect to randomness, KINGFISHER triggers the SC
generation procedure for n times by resetting the device, re-
provisioning network, and reconnecting the device to collect
a sequence of SCs. We set n = 10 in our experiment to
make sure that the device itself and the remote server of the
manufacturer would not be affected by any harmful impacts,
such as request explosion to the server. The SC sequence
is evaluated with respect to repetition and consistency [48],
where repetition refers to the periodical appearance of a
subsequence and consistency refers to the use of constant
values. If a subsequence in the SC sequence is generated peri-
odically, KINGFISHER considers such a sequence as violating
P1. Beside, a sequence using a constant value multiple times
(i.e., over 3 times in our experiment) is considered vulnerable,
violating P16.
Detecting Insecurely Distributed SCs. Since the procedure
of SC distribution should always be protected, KINGFISHER
checks the trafﬁc to detect whether such distribution is pro-
tected by TLSv1.2 [28] or multi-factor authentication. If this
not the case, KINGFISHER labels the distribution procedure as
vulnerable, violating P2. KINGFISHER then checks whether
the SC is disclosed to any untrusted third parties. By us-
ing Burp Suite [49], KINGFISHER parses the communication
packet transmitted between the cloud and the smartphone. We
consider a SC as secure if it exists in the packet transferred
from the cloud to the smartphone, which is a cloud-centric
distribution. On the contrary, a SC is vulnerable if a smart-
phone transmits it to the cloud without having received it in
advance, violating P3.
Detecting Insecurely Validated SCs. A secure IoT-to-Mobile
communication should include a SC for authentication and
a SC for cryptography purposes. Thus a communication not
including any SC or using the same SC for multiple pur-
poses is insecure, violating P4. To detect such a violation,
KINGFISHER ﬁrst checks whether the ASC and CSC are
identiﬁed from IoT-to-Mobile communication. The lack of
either of them is considered insecure. When both ASC and
CSC are identiﬁed, KINGFISHER compares both value. The
SC is insecure if both values are the same.
6To avoid false positives, we assume that the periodical subsequence and
constant value longer than 4 bytes are the same.
To examine whether validation error messages leak informa-
tion, KINGFISHER modiﬁes the SC value and other data ﬁelds
(e.g., device identity information) to verify the error responses.
First, KINGFISHER generates a pseudorandom character and
appends the character to the end of the SC value to modify its
length, or replaces the last character of the SC to modify its
value only. Then, it utilizes the instrumenting component to
hook and replace the parameter values by the incorrect values
to trigger IoT-to-Mobile communication. After receiving the
responses from the IoT device, KINGFISHER monitors the
device responses. If the responses for both incorrect values
are different, the IoT-to-Mobile communication is considered
as insecure by violating P5.
To further examine the protection scheme against DDoS
and brute force attacks and avoid sending too many requests
to the cloud server, KINGFISHER generates 20 pseudorandom
characters to create 20 incorrect values by appending them at
the end of original value. If all the response messages are the
same, the SC implementation is considered to violate P6.
Detecting Insecurely Protected SCs. KINGFISHER performs
string match by comparing the SC with ﬁles stored at the app
local internal storage (i.e., ‘/data/data/xxx’) and the external
storage (i.e., ‘/sdcard/xxx’). If there is any match, a vulnera-
bility is identiﬁed (i.e., a violation of P7).
Detecting Insecurely Revoked SCs. We assume that a se-
cure SC can only remain constant up to eight hours. Thus,
KINGFISHER reuses the SC after eight hours. If it can set
up IoT-to-Mobile communication successfully, then the SC
implementation is considered as violating P8.
After SC revocation, the previous SC needs to be disabled.
When the SC is revoked or a new SC is distributed, KING-
FISHER sends a message by using the previous SC. The SC
revocation security property (P9) is violated, if the device
correctly responds to the message.
E. Running Example
We use Tuya [50] as an example to demonstrate the
workﬂow of KINGFISHER. Tuya is a global vendor that
provides various connectivity solutions for IoT devices in
different scenarios. Figure 3 shows the main code imple-
menting IoT-to-Mobile communication in Tuya app and how
KINGFISHER works on this code. The Tuya app ﬁrst utilizes
the CSC localtoken to encrypt the plain data through func-
tion encryptRequestWithLocalKey, and then prepares
message data by combining the encrypted data and other in-
formation based on its customized protocol format via function
buildRequest. Afterwards, a cross-process communication
ﬂow across functions transact and onTransact is im-
plemented to transfer the encrypted data from the client-proxy
process to the service-stub process. In the service-stub process,
the received data is handled by both Java code and native code,
and is then sent by function buffevent_write in another
thread to the bound IoT device.
In order
to detect security violations related to SCs,
KINGFISHER ﬁrst
potentially
related to SCs (e.g., encryptRequestWithLocalKey,
functions
identiﬁes
the
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:28:18 UTC from IEEE Xplore.  Restrictions apply. 
493
Client-Proxy Process
public void control(dbf info, com.tuya.smart.sdk.api.IResultCallback b)
public void control(dbf info, com.tuya.smart.sdk.api.IResultCallback b)
{
{
...
...
String localtoken = info.getlocalKey();
String localtoken = info.getlocalKey();
...
...
byte[] encrypt_data = encryptRequestWithLocalKey(localtoken, plain_data);
byte[] encrypt_data = encryptRequestWithLocalKey(localtoken, plain_data);
byte[] data = buildRequest(encrypt_data, timestamps, frametype, ...);
byte[] data = buildRequest(encrypt_data, timestamps, frametype, ...);
boolean v1 = this.TransferServiceInterface.controlByBinary(frametype, data);
boolean v1 = this.TransferServiceInterface.controlByBinary(frametype, data);
...
...
}
}
public boolean controlByBinary(int frametype, byte[] data){
public boolean controlByBinary(int frametype, byte[] data){
...
...
Parcel v1 = Parcel.obtain();
Parcel v1 = Parcel.obtain();
v1.writeByteArray(data);
v1.writeByteArray(data);
this.mRemote.transact(7, v1, ...);
this.mRemote.transact(7, v1, ...);
...
...
}
}
Function Interface 
Identification
Message Collection
IoT-to-Mobile Communication Packets
SC-related Candidates
encryptRequestWithLocalKey
aaa.bbb.SSS.ccc
Function Values
localtoken, plain_data
buildRequest
encrypt_data, timestamps, (cid:258), data
controlByBinary, sendBytes2
bufferevent_write
...
data
send_buffer
...
Service-Stub Process
public boolean onTransact(int arg1, Parcel arg2, ...){
switch(arg1){
  ...
  case 7:
  boolean v4_2 = this.controlByBinary(arg2.readInt(), 
arg2.createByteArray());
  ...
}
}
public boolean controlByBinary(int frame_type, byte[] data){
...
int ret = sendBytes2(data, data.length, frame_type);
}
// libnetwork-android.so function in another thread
// libnetwork-android.so function in another thread
int bufferevent_write(int send_buffer);
int bufferevent_write(int send_buffer);
Value-based Analysis
IoT-to-Mobile Communication Packets = aaa.bbb.SSS.ccc
bufferevent_write send_buffer = aaa.bbb.SSS.ccc
sendBytes2, controlByBinary, buildRequest data = bbb.SSS
buildRequest, encryptRequestWithLocalKey encrypted_data = SSS
encryptRequestWithLocalKey localtoken = 65cdxxxxxxxx079b
aaa/bbb/ccc/SSS: Value Sequences
KingFisher Work Flow
Value-based Analysis Flow
Fig. 3. A Running Example of Tuya IoT-to-Mobile communication
It
function
parameters
values
including
bufferevent_write).
controlByBinary,
then
buildRequest,
sendBytes2
the
records
and
runtime
(e.g.,
localtoken, data, send_buffer) and return values
(e.g., encrypted_data) and meanwhile, collects the SC-
related packets from network trafﬁcs. Having these messages,
KINGFISHER ﬁnally executes the value-based comparison
to track the SC data ﬂow and check if there are property
violations.
V. EXPERIMENTAL RESULTS
In this section, we report our experiments on eight popular
IoT solutions that adopt IoT-to-Mobile communication and use
SCs.
A. Experiment Setup
Tested Devices. To assess SC security and thoroughly cover
different IoT-to-Mobile communication solutions, we carefully
selected the solutions to be analyzed. Speciﬁcally, we ﬁrst
identiﬁed a set of mainstream IoT vendors and then selected
the vendors offering solutions based on device companion
apps. We then referred to device product descriptions, inquiries
with these vendors, and actual
testings to check whether
devices could communicate locally with their companion apps.
Finally, we selected the products most widely used.
Totally, we assessed eight popular IoT-to-Mobile commu-
nication solutions, BroadLink [51], Haier [52], Horn [53],
Qihoo [54], Tuya [50], Xiaomi [55], Xiaoyi [56], and ZTE [57].
According to the sales data of e-commercial platforms, such
as Alibaba, Amazon, and JD.com, as of September 2021, the
total shipment number of these devices exceeded 35 million.
Furthermore, downloads of each companion app ranged from
2,461,900 (BroadLink) to 6,023,150,000 (Xiaomi).
Testing Environment. We ﬁrst purchased eight IoT devices
that support our selected solutions and registered the user
accounts for them. These devices cover smart plugs, smart
gateways, and smart cameras, which are commonly used in
daily life. Next, we connected the IoT devices and an Android
smartphone (ONEPLUS A5000) within the same Wi-Fi, and
installed each companion app on the phone. We also deployed
the analysis engine of KINGFISHER on a laptop with Intel
Core i7 1.80 GHz and 16G RAM, and the instrumentation
engine of KINGFISHER on the rooted ONEPLUS phone. Then
we tested each communication solution.
Ethical Consideration. We registered experimental accounts
for all of our evaluations. In our experiments, we simulated
the attacks against our own IoT devices and smartphones in
order not to cause any usability impact on IoT cloud servers or
other IoT devices. Furthermore, we contacted the IoT vendors
of the solutions we analyzed and reported them the identiﬁed
vulnerabilities. We have received eight CNVD IDs (China
National Vulnerability Database IDs).
B. SC Extraction Results
The SC extraction results are shown in Table I. Generally,
KINGFISHER successfully analyzed all the eight companion
apps and labeled messages containing the used SCs. It accu-
rately extracted SCs for ﬁve solutions except BroadLink, Qihoo
and Xiaomi. In the following, we discuss the analysis results
of KINGFISHER in detail.
1) Function Interface Identiﬁcation: The function inter-
face identiﬁcation results are shown in the Function
Interface Identification column of Table I. Each
app contained at least 100,000 Java functions and 100,000
native functions, shown in the #All Functions column.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:28:18 UTC from IEEE Xplore.  Restrictions apply. 
494
Vendor
BroadLink
TABLE I
SC EXTRACTION RESULTS
Message Collection
SCs
Native
Function Value Collection
Functions
Trafﬁc Clustering
Local
Clustered
Values
860
5,205
11,840
1,615
Function Interface Identiﬁcation
All Functions
SC-related
Java
101,720
453,721
208,710
225,999
256,310
538,277
111,126
148,077
Native
105,952
137,357
104,437
121,994
154,178
125,808
141,960
126,650
Java
458
1,844
667
226
1,047
1,570
157
245
Haier
Horn
Qihoo
Tuya
Xiaomi
Xiaoyi
ZTE
0
1
0
1
0
0
2
1
E refers to SC extraction results of KINGFISHER; V refers to the SC benchmark built by experienced experts.
77
38
0
373
57
11
121
627
65
665
8,415
6,515
4
17
65
5
6
6
32
24
47
312
44
729
25
14
1,757
517
11
19
7
12
10
6
60
25
All
130
542
133
892
255
141