ORDER BY count DESC LIMIT 4;
pid | event_type | event | count
−−−−−−−+−−−−−−−−−−−−+−−−−−−−−−−−−−−−−+−−−−−−−
36520 | IO | WALSync | 4380
36520 | IO | WALWrite | 306
36520 | Client | ClientRead | 38
36520 | IO | DataFileExtend | 7
(4 rows)
Bydefault(setbythepg_wait_sampling.profile_periodparameter)samplesaretaken 10ms
timespersecond.Sotoestimatethedurationofwaitsinseconds,youhaveto
dividethecountvalueby.
Inthisparticularcase,mostofthewaitsarerelatedtoflushingentriestodisk. v.
Itisagoodillustrationoftheunaccounted-forwaittime: theWALSynceventwas
notinstrumenteduntilPostgre;forlowerversions,awaitsprofilewouldnot
containthefirstrow,althoughthewaititselfwouldstillbethere.
Andhereishowtheprofilewilllooklikeifweartificiallyslowdownthefilesystem
foreach/operationtotake.seconds(Iuseslowfs1forthispurpose):
postgres$ /usr/local/pgsql/bin/pgbench -T 60 internals
=> SELECT pid FROM pg_stat_activity
WHERE application_name = 'pgbench';
pid
−−−−−−−
36953
(1 row)
=> SELECT pid, event_type, event, count
FROM pg_wait_sampling_profile WHERE pid = 36953
ORDER BY count DESC LIMIT 4;
pid | event_type | event | count
−−−−−−−+−−−−−−−−−−−−+−−−−−−−−−−−−−−−−+−−−−−−−
36953 | IO | WALWrite | 4379
36953 | LWLock | WALWrite | 1527
36953 | IO | WALSync | 22
36953 | IO | DataFileExtend | 20
(4 rows)
1 github.com/nirs/slowfs
281
Chapter15 LocksonMemoryStructures
Now/operationsaretheslowestones—mainlythosethatarerelatedtowriting
 files to disk in the synchronous mode. Since  writing is protected by a
WALWritelightweightlock,thecorrespondingrowalsoappearsintheprofile.
Clearly,thesamelockisacquiredinthepreviousexampletoo,butsincethewaitis
shorterthanthesamplinginterval,iteitherissampledveryfewtimesordoesnot
makeitintotheprofileatall. Itillustratesonceagainthattoanalyzeshortwaits
youhavetosamplethemforquitealongtime.
282
Part IV
Query Execution
16
Query Execution Stages
16.1 Demo Database
Theexamplesinthepreviouspartsofthebookwerebasedonsimpletableswith
onlyahandfulofrows.Thisandsubsequentpartsdealwithqueryexecution,which
ismoredemandinginthisrespect: weneedrelatedtablesthathaveamuchlarger
numberofrows. Insteadofinventinganewdatasetforeachexample,Itookan
existingdemodatabasethatillustratespassengerairtrafficinRussia.1 Ithassev-
eralversions;wewillusethebiggeronecreatedonAugust15,2017.Toinstallthis
version,youhavetoextractthefilecontainingthedatabasecopyfromthearchive2
andrunthisfileinpsql.
Whendevelopingthisdemodatabase,wetriedtomakeitsschemasimpleenough
tobeunderstoodwithoutextraexplanations;atthesametime,wewantedittobe
complexenoughtoallowwritingmeaningfulqueries. Thedatabaseisfilledwith
true-to-life data,which makes the examples more comprehensive and should be
interestingtoworkwith.
Here I will cover the main database objects only briefly; if you would like to re-
viewthewholeschema,youcantakealookatitsfulldescriptionreferencedinthe
footnote.
The main entity is a booking (mapped to the bookings table). One booking can
includeseveralpassengers,eachwithaseparateelectronicticket(tickets). Apas-
sengerdoesnotconstituteaseparateentity; forthepurposeofourexperiments,
wewillassumethatallpassengersareunique.
1 postgrespro.com/community/demodb
2 edu.postgrespro.com/demo-big-en-20170815.zip
285
Chapter16 QueryExecutionStages
Eachticketincludesoneormoreflightsegments(mappedtotheticket_flightsta-
ble). A single ticket can have several flight segments in two cases: either it is a
round-trip ticket,or it is issued for connecting flights. Although there is no cor-
respondingconstraintintheschema,allticketsinabookingareassumedtohave
thesameflightsegments.
Eachflight(flights)goesfromoneairport(airports)toanother. Flightswiththe
sameflightnumberhavethesamepointsofdepartureanddestinationbutdifferent
departuredates.
Theroutesviewisbasedontheflightstable;itdisplaystheinformationonroutes
thatdoesnotdependonparticularflightdates.
Atcheck-in,eachpassengerisissuedaboardingpass(boarding_passes)withaseat
number.Apassengercancheckinforaflightonlyifthisflightisincludedintothe
ticket. Flight-seat combinations must be unique,so it is impossible to issue two
boardingpassesforthesameseat.
Thenumberofseats(seats)inanaircraftandtheirdistributionbetweendifferent
travel classes depend on the particular model of the aircraft (aircrafts) that per-
forms the flight. It is assumed that each aircraft model can have only one cabin
configuration.
Sometableshavesurrogateprimarykeys,whileothersusenaturalones(someof
thembeingcomposite). Itisdonesolelyfordemonstrationpurposesandisbyno
meansanexampletofollow.
The demo database can be thought of as a dump of a real system: it contains a
snapshotofdatatakenataparticulartimeinthepast. Todisplaythistime,you
cancallthebookings.now()function.Usethisfunctionindemoqueriesthatwould
demandthenow()functioninreallife.
Thenamesofairports,cities,andaircraftmodelsarestoredintheairports_dataand
aircrafts_datatables;theyareprovidedintwolanguages,EnglishandRussian. To
constructexamplesforthischapter,Iwilltypicallyquerytheairportsandaircrafts
views shown in the entity-relationship diagram; these views choose the output
en language based on the bookings.lang parameter value. The names of some base
tablescanstillappearinqueryplansthough.
286
16.1 DemoDatabase
1
snoitidnoc_eraf
edoc_tfarcria
edoc_tfarcria
stfarcriA
staeS
ledom egnar on_taes
# ∗ ∗
# # ∗
erutraped_deludehcs
edoc_tropria eman_tropria lavirra_deludehcs tropria_erutraped erutraped_lautca
setanidrooc
stropriA enozemit sthgilF tropria_lavirra edoc_tfarcria lavirra_lautca
di_thgifl on_thgifl
ytic
sutats
# ∗ ∗ ∗ ∗
# ∗ ∗ ∗ ∗ ∗ ∗ ∗ ∘ ∘
snoitidnoc_eraf sessap_gnidraoB
on_gnidraob
sthgifl_tekciT
on_tekcit
on_tekcit di_thgifl on_taes
di_thgifl tnuoma
# # ∗ ∗
# # ∗ ∗
eman_regnessap
tnuoma_latot
di_regnessap atad_tcatnoc
sgnikooB etad_koob
fer_koob stekciT
on_tekcit fer_koob
# ∗ ∗
# ∗ ∗ ∗ ∗
287
Chapter16 QueryExecutionStages
16.2 Simple Query Protocol
A simple version of the client-server protocol1 enables  query execution: it
sendsthetextofaquerytotheserverandgetsthefullexecutionresultinresponse,
nomatterhowmanyrowsitcontains.2 Aquerysenttotheserverpassesseveral
stages: itisparsed,transformed,planned,andthenexecuted.
Parsing
Firstofall,Postgrehastoparse3thequerytexttounderstandwhatneedstobe
executed.
Lexicalandsyntacticanalyisis. Thelexersplitsthequerytextintoasetoflexemes4
(suchaskeywords,stringliterals,andnumericliterals),whiletheparser validates
thissetagainstthelanguagegrammar.5 Postgrereliesonstandardparsing
tools,namelyFlexandBisonutilities.
Theparsedqueryisreflectedinthebackend’smemoryasanabstractsyntaxtree.
Forexample,let’stakealookatthefollowingquery:
SELECT schemaname, tablename
FROM pg_tables
WHERE tableowner = 'postgres'
ORDER BY tablename;
Thelexersinglesoutfivekeywords,fiveidentifiers,astringliteral,andthreesingle-
letterlexemes(acomma,anequalssign,andasemicolon). Theparserusesthese
lexemestobuildtheparsetree,whichisshownintheillustrationbelowinavery
simplified form. The captions next to the tree nodes specify the corresponding
partsofthequery:
1 postgresql.org/docs/14/protocol.html
2 backend/tcop/postgres.c,exec_simple_queryfunction
3 postgresql.org/docs/14/parser-stage.html
backend/parser/README
4 backend/parser/scan.l
5 backend/parser/gram.y
288
16.2 SimpleQueryProtocol
SELECT
QUERY
TARGETENTRY FROMEXPR SORTGROUPCLAUSE
schemaname, tablename FROM ORDER BY tablename
RTE OPEXPR
pg_tables tableowner='postgres'
pg_table WHERE tableowner = 'postgres'
AratherobscureabbreviationstandsforRangeTableEntry.Postgresource
codeusesthetermrangetabletorefertotables,subqueries,joinresults—inother
words,toanysetsofrowsthatcanbeprocessedbyoperators.1
Semanticanalysis. Thepurposeofsemanticanalysis2istodeterminewhetherthe
database contains any tables or other objects that this query refers to by name,
andwhethertheuserhaspermissiontoaccesstheseobjects. Alltheinformation
requiredforsemanticanalysisisstoredinthesystemcatalog. p.
Havingreceivedtheparsetree,thesemanticanalyzerperformsitsfurtherrestruc-
turing,which includes adding references to specific database objects,data types,
andotherinformation.
Ifyouenablethedebug_print_parseparameter,youcanviewthefullparsetreein
theserverlog,butithaslittlepracticalsense.
Transformation
Atthenextstage,thequerycanbetransformed(rewritten).3
1 include/nodes/parsenodes.h
2 backend/parser/analyze.c
3 postgresql.org/docs/14/rule-system.html
289
Chapter16 QueryExecutionStages
Postgrecoreusestransformationsforseveralpurposes. Oneofthemistore-
placethenameoftheviewintheparsetreewiththesubtreecorrespondingtothe
basequeryofthisview.
Anothercaseofusingtransformationsisrow-levelsecurityimplementation.1
v. Theandclausesofrecursivequeriesalsogettransformedduringthis
stage.2
Intheexampleabove,pg_tablesisaview;ifweplaceditsdefinitionintothequery
text,itwouldlookasfollows:
SELECT schemaname, tablename
FROM (
-- pg_tables
SELECT n.nspname AS schemaname,
c.relname AS tablename,
pg_get_userbyid(c.relowner) AS tableowner,
...
FROM pg_class c
LEFT JOIN pg_namespace n ON n.oid = c.relnamespace
LEFT JOIN pg_tablespace t ON t.oid = c.reltablespace
WHERE c.relkind = ANY (ARRAY['r'::char, 'p'::char])
)
WHERE tableowner = 'postgres'
ORDER BY tablename;
However,theserverdoesnotprocessthetextrepresentationofthequery;allma-
nipulations are performed on the parse tree. The illustration shows a reduced
version of the transformed tree (you can view its full version in the server log if
youenablethedebug_print_rewrittenparameter).
The parse tree reflects the syntactic structure of the query, but it says nothing
abouttheorderinwhichtheoperationsshouldbeperformed.
Postgrealsosupportscustomtransformations,whichtheusercanimplement
viatherewriterulesystem.3
1 backend/rewrite/rowsecurity.c
2 backend/rewrite/rewriteSearchCycle.c
3 postgresql.org/docs/14/rules.html
290
16.2 SimpleQueryProtocol
QUERY
TARGETENTRY FROMEXPR SORTGROUPCLAUSE
RTE OPEXPR
pg_tables tableowner='postgres'
QUERY
TARGETENTRY FROMEXPR
OPEXPR
JOINEXPR
c.relkind=ANY(ARRAY[...])
RTE OPEXPR
JOINEXPR
pg_tablespace t.oid=c.reltablespace
RTE RTE OPEXPR
pg_class pg_namespace n.oid=c.relnamespace
TherulesystemsupportwasproclaimedasoneofthemainobjectivesofPostgresdevel-
opment;1itwasstillanacademicprojectwhentheruleswerefirstimplemented,butsince
thentheyhavebeenredesignedmultipletimes.Therulesystemisaverypowerfulmech-
anism,butitisratherhardtocomprehendanddebug.Itwasevenproposedtoremovethe
rulesfromPostgrealtogether,buttheideadidnotfindunanimoussupport. Inmost
cases,itissaferandeasiertousetriggersinsteadofrules.
1 M.Stonebraker,L.A.Rowe.TheDesignofPostgres
291
Chapter16 QueryExecutionStages
Planning
S is a declarative language: queries specify what data to fetch,but not how to
fetchit.
Any query has several execution paths. Each operation shown in the parse tree
canbecompletedinanumberofways: forexample,theresultcanberetrievedby
readingthewholetable(andfilteringoutredundancies),orbyfindingtherequired
rows via an index scan. Data sets are always joined in pairs, so there is a huge
numberofoptionsthatdifferintheorderofjoins. Besides,therearevariousjoin
algorithms: forexample,theexecutorcanscantherowsofthefirstdatasetand
searchforthematchingrowsintheotherset,orbothdatasetscanbefirstsorted
and then merged together. For each algorithm, we can find a use case where it
performsbetterthanothers.
Theexecutiontimesofoptimalandnon-optimalplanscandifferbyordersofmag-
nitude,sotheplanner1thatoptimizestheparsedqueryisoneofthemostcomplex
componentsofthesystem.
Plantree. Theexecutionplanisalsorepresentedasatree,butitsnodesdealwith
physicaloperationsondataratherthanlogicalones.
Ifyouwouldliketoexplorefullplantrees,youcandumpthemintotheserverlog
byenablingthedebug_print_planparameter.Butinpracticeitisusuallyenoughto
viewthetextrepresentationoftheplandisplayedbythecommand.2
Thefollowingillustrationhighlightsthemainnodesofthetree.Itisexactlythese
nodesthatareshownintheoutputofthecommandprovidedbelow.
Fornow,let’spayattentiontothefollowingtwopoints:
• Thetreecontainsonlytwoqueriedtablesoutofthree: theplannersawthat
oneofthetablesisnotrequiredforretrievingtheresultandremoveditfrom
theplantree.
• For each node of the tree, the planner provides the estimated cost and the
numberofrowsexpectedtobeprocessed.
1 postgresql.org/docs/14/planner-optimizer.html
2 postgresql.org/docs/14/using-explain.html
292
16.2 SimpleQueryProtocol
=> EXPLAIN SELECT schemaname, tablename
FROM pg_tables
WHERE tableowner = 'postgres'
ORDER BY tablename;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−