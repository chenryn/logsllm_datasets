list, cur := []int{}, &TreeNode{}
p = p.Right 
 return
return
return
cur = cur.Right 
cur.Right = &TreeNode{val: list[i], Left: nil, Right: nil}
cur.Left = nil 
~
---
## Page 246
代码
解题思路
给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。
题目大意
rows in the triangle.
Bonus point if you are able to do this using only O(n) extra space, where n is the total number of 
The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).
For example, given the following triangle 
adjacent numbers on the row below.
 Given a triangle, find the minimum path sum from top to bottom. Each step you may move to 
Note:
题目
120. Triangle
·这一题最优解是不用辅助空间，直接从下层往上层推。普通解法是用二维数组 DP，稍微优化的解
·求出从三角形顶端到底端的最小和。要求最好用 O(n)的时间复杂度。
func minimumTotal(triangle [][]int) int {
// 解法—倒序 DP，无辅助空间
import（
package leetcode
if triangle == nil {
"math'
法是一维数组 DP。解法如下：
for row := len(triangle) 
[4,1,8,3]
[6,5,7],
for col := O; col = O; row-- {
---
## Page 247
Note that you cannot sell a stock before you buy one.
If you were only permitted to complete at most one transaction (i.e., buy one and sell one share 
Say you have an array for which the ith element is the price of a given stock on day i.
题目
121. Best Time to Buy and Sell Stock
math.MaxInt64, 0
func minimumTotal1(triangle [][]int) int {
//解法二正常DP，空间复杂度 O(n）
return minNum
for i := O; i= O; j-- { 
 dp[index]:
if dp[i]  maxProfit {
if prices[i]  stack[len(stack)-1]
 return 0
res = max(res, stack[len(stack)-1]-stack[0])
}else {
stack = append(stack, prices[i])
stack = append(stack, prices[i])
stack = stack[:index+l] 
for ； index >= O; index-- { 
index := len(stack) - 1 
if stack[index]prices[i] { 
profit += prices[i+l] - prices[i]
 engaging multiple transactions at the same time. You must sel
 Note that you cannot buy on day 1, buy on day 2 and sell them
---
## Page 251
代码
解题思路
节点的序列。该路径至少包含一个节点，且不一定经过根节点。
给定一个非空二叉树，返回其最大路径和。本题中，路径被定义为一条从树中任意节点出发，达到任意
题目大意
 Example 2:
Example 1: 
and does not need to go through the root.
node in the tree along the parent-child connections. The path must contain at least one node
For this problem, a path is defined as any sequence of nodes from some starting node to any
Given a non-empty binary tree, find the maximum path sum.
题目
·这一题思路比较简单，递归维护最大值即可。不过需要比较的对象比较多。maxPathsum(root)
·给出一个二叉树，要求找一条路径使得路径的和是最大的。
Output: 42
Input: [-10,9,20,null,null,15,7]
Output: 6
Input:[1,2,3]
maxPathSumFrom(root.Right)) + root.Val
root.Val) , 其中, maxPathsumFrom(root) = max(maxPathsumFrom(root.Left),
maxPathsumFrom(root.Left) (if>0) + maxPathsumFrom(root.Right) (if>0) +
= max(maxPathsum(root.Left), maxPathsum(root.Right),
15
-10
3
---
## Page 252
For example, 
ignoring cases.
Given a string, determine if it is a palindrome, considering only alphanumeric characters and 
题目
125. Valid Palindrome
"A man, a plan, a canal: Panama" is a palindrome.
func getPathsum(root *TreeNode, maxSum *int) int {
import "math"
package leetcode
if root == nil {
return currMax
*maxSum = max(*maxSum, max(currMax, left+right+root.Val)) 
currMax := max(max(left+root.Val, right+root.Val), root.Val)
right := getPathSum(root.Right, maxSum)
if root == nil { 
left := getPathsum(root.Left, maxSum)
return max
getPathsum(root, &max)
max := math.MinInt32 
 Definition for a binary tree node.
 return math.MinInt32
type TreeNode struct { 
return 0
Right *TreeNode
Left *TreeNode
Val int 
---
## Page 253
代码
简单题，按照题意做即可。
解题思路
判断所给的字符串是否是有效的回文串。
题目大意
For the purpose of this problem, we define empty string as valid palindrome.
interview.
Have you consider that the string might be empty? This is a good question to ask during an
Note:
func ischar(c byte) bool {
//判断c 是否是字符或者数字
func ispPalindrome(s string) bool
package leetcode
"strings"
import （
if（'a' 0 {
levelMap := make(map[string]bool)
queue = append(queue, []string{beginword}) 
// create a queue, track the path
所有单词只由小写字母组成。
所有单词具有相同的长度。
 return result 
 wordMap[w] = true 
path := queue[0]
---
## Page 256
transformation sequence from beginWord to endWord, such that: 
saous jo ynual au puy 'as!l pom s,Aeuo e pue (prompua pue piomua) spom om uan! 
题目
127. Word Ladder
not empty, return result
immediately 
return result
if queueLen == 0 { 
// if queueLen is O, means finish traversing current level. if result is
queueLen-- 
for i := O; i  0 {
levelMap = make(map[string]bool)
// clear levelMap
 delete(wordMap,k) 
 return result
if nextword == endword {
nextword := lastword[:i] + string(c) + lastword[i+l:]
if wordMap[nextword] { 
 // different from word ladder, don't remove the word from wordMap
queue = append(queue, newPath) 
newPath = append(newPath, nextword)
copy(newPath, path) 
newPath := make([]string, len(path))
// delete from wordMap only when currently level is done.
// same level could reuse the key.
continue 
result = append(result, path)
path = append(path, endword) 
levelmap[nextword] = true 
---
## Page 257
序列的长度。转换需遵循如下规则：
给定两个单词（beginWord 和 endWord）和一个字典，找到从 beginWord 到 endWord 的最短转换
说明：