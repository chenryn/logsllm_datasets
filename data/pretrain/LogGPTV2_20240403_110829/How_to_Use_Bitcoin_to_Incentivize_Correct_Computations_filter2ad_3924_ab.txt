realizes the functionality F (cid:63)
2.1 Standard primitives
Garbled circuits [35] allow two semihonest parties to compute an
arbitrary function f (x1, x2) that depends on their respective private
inputs x1 and x2 while not leaking any information about their in-
puts beyond what is revealed by the function output. Our overview
here follows the presentation in [23]; for more details see [27]. One
party, acting as the circuit generator, produces a garbled circuit that
is evaluated by the other party, known as the circuit evaluator. The
result is an “encrypted” output, which can then be mapped to its
actual value and revealed to either or both parties.
The basic idea is to transform a boolean circuit representing a
function f into a garbled circuit that operates on labels (ie., cryp-
tographic keys) instead of bits. We describe this transformation,
denoted Gb(1λ, f ), below. Any binary gate g which has two input
wires W0, W1 and output wire W2 can be converted into a garbled
gate. First, generate random labels w0
i to contain 0 and 1
on each wire Wi. Then generate a truth table containing the four
entries
i and w1
Encws0
0 ,ws1
1
(wg(s0,s1)
2
)
0 and ws1
1 it is possible to recover wg(s0,s1)
for each s0, s1 ∈ {0, 1} (where s0, s1 denote the 1-bit signals on
wires W0, W1, respectively), and randomly permute the table. This
truth table is called a garbled gate. Observe that given the garbled
gate and labels ws0
. That
is given the labels that correspond to some set of input values for
the entire circuit it is possible for the circuit evaluator to recover
labels corresponding to the output of the circuit on those inputs.
We denote this algorithm by Eval. If the circuit generator provides
a way to map those labels back to bits, the circuit evaluator can
recover the actual output.
Notation. We write a set of wire-label pairs as a matrix:
2
(cid:18) w0
W =
1 w0
2
1 w1
2
w1
(cid:19)
.
··· w0
··· w1
(cid:96)
(cid:96)
A vector of wire labels is denoted as
w = (w1, w2, . . . , w(cid:96)) .
If v ∈ {0, 1}(cid:96) is a string and W is a matrix as above, then we let
1 , . . . , wv(cid:96)
(cid:96) )
be the corresponding vector of wire labels.
Wv = (wv1
In some of our constructions we will use a seed-based garbling
scheme Gb proposed in [22] that takes as input a security parame-
ter λ, an explicitly speciﬁed seed ω to a pseudorandom generator
(PRG) and a description of the function f and outputs the garbled
circuit G. Note that in such a garbling scheme it is convenient
to deﬁne two garbling functions iGb and oGb that generate wire-
label pairs for only the input and output wires respectively. We use
the notation U ← iGb(1λ, ω, m) where U denotes the wire-label
pairs for the input keys and m denotes the size of each party’s in-
put, and the notation W ← oGb(1λ, ω, (cid:96)) where W denotes that
wire-label pairs for the output keys and (cid:96) denotes the size of the
ﬁnal output. Observe that iGb (resp. oGb) depend only on the in-
put (resp. output) size of f and is otherwise independent of the
description of f. The garbled gates are then computed using these
wire labels exactly as in standard garbled circuits. To prove se-
curity of secure computation protocol based on garbled circuits,
a special kind of garbled circuit ˆG is computed by the simulator
using algorithm Fake(1λ, f ). This algorithm outputs a “fake” gar-
bled circuit, a random input x(cid:48) ∈ {0, 1}m, wire labels U where
positions corresponding to input x(cid:48) are ﬁlled with random values
while all other positions contain 0λ, and output labels w such that
Eval( ˆG, Ux(cid:48)
) = w. Finally, we denote a garbling scheme by
(Gb, Eval).
Veriﬁable computation. We provide the deﬁnition of public veri-
ﬁable computation (taken from [31]).
Deﬁnition 3. A public veriﬁable computation scheme pubVC
consists of a set of three polynomial-time algorithms (KeyGen,
Compute, Verify) deﬁned as follows:
• (ekf , vkf ) ← KeyGen(f, 1λ): The randomized key generation
algorithm takes the function f to be outsourced and security pa-
rameter λ; it outputs a public evaluation key ekf , and a public
veriﬁcation key vkf .
• (y, ψy) ← Compute(ekf , u): The deterministic worker algo-
rithm uses the public evaluation key ekf and input u. It outputs
y ← f (u) and a proof ψy of y’s correctness.
32F (cid:63)
CR with session identiﬁer sid, running with parties Ps and
Pr, a parameter 1λ, and adversary S proceeds as follows:
• Deposit phase. Upon receiving the tuple (deposit, sid,
ssid, s, r, φs,r, τ, coins(x)) from Ps, record the message
(deposit, sid, ssid, s, r, φs,r, τ, x) and send it to all par-
ties. Ignore any future deposit messages with the same ssid
from Ps to Pr.
• Claim phase.
In round τ, upon receiving (claim, sid,
ssid, s, r, φs,r, τ, x, w) from Pr, check if (1) a tuple
(deposit, sid, ssid, s, r, φs,r, τ, x) was recorded, and (2) if
φs,r(w) = 1. If both checks pass, send (claim, sid, ssid,
s, r, φs,r, τ, x, w) to all parties, send (claim, sid, ssid, s,
r, φs,r, τ, coins(x)) to Pr, and delete the record (deposit,
sid, ssid, s, r, φs,r, τ, x).
• Refund phase: In round τ + 1, if the record (deposit, sid,
ssid, s, r, φs,r, τ, x) was not deleted, then send (refund,
sid, ssid, s, r, φs,r, τ, coins(x)) to Ps, and delete the
record (deposit, sid, ssid, s, r, φs,r, τ, x).
Figure 1: The special ideal functionality F (cid:63)
CR.
• {0, 1} ← Verify(vkf , u, (y, ψy)): Given the veriﬁcation key
vkf , the deterministic veriﬁcation algorithm outputs 1 if f (u) =
y, and 0 otherwise.
Pr
The scheme pubVC should satisfy:
Correctness For any function f, it holds that
(y, ψy) ← Compute(ekf , u) :
 (ekf , vkf ) ← KeyGen(f, 1λ);
(cid:20) Pr[(u(cid:48), y(cid:48), ψ(cid:48)
y) ← A(ekf , vkf ) :
negligible in λ:
1 = Verify(vkf , u, (y, ψy))
Soundness For any function f and any PPT A the following is
 = 1.
(cid:21)
Pr
f (u(cid:48)) (cid:54)= y(cid:48) ∧ 1 = Verify(vkf , u(cid:48), (y(cid:48), ψ(cid:48)
y))
.
Efﬁciency KeyGen is assumed to be a one-time operation whose
cost is amortized over many calculations, but we require that
♦
Verify is cheaper than evaluating f.
2.2 Special ideal functionalities
Ideal functionality F (cid:63)
CR [11, 9, 28]. This special ideal function-
ality has found tremendous application in the design of multiparty
fair secure computation and lottery protocols [11]. See Figure 1 for
a formal description. At a high level, F (cid:63)
CR allows a sender Ps to
conditionally send coins(x) to a receiver Pr. The condition is for-
malized as the revelation of a satisfying assignment (i.e., witness)
for a sender-speciﬁed circuit φs,r( · ; z) (i.e., relation) that may
depend on some public input z. Further, there is a “time” bound,
formalized as a round number τ, within which Pr has to act in or-
der to claim the coins. An important property that we wish to stress
is that the satisfying witness is made public by F (cid:63)
CR. In the Bitcoin
realization of F (cid:63)
CR, sending a message with coins(x) corresponds
to broadcasting a transaction to the Bitcoin network, and waiting
according to some time parameter until there is enough conﬁdence
that the transaction will not be reversed.
Secure computation with penalties. Loosely speaking, the notion
of fair secure computation as considered in [11] guarantees:
An honest party never has to pay any penalty.
F (cid:63)
f with session identiﬁer sid running with parties
P1, . . . , Pn, a parameter 1λ, and an ideal adversary S that cor-
rupts parties {Ps}s∈C proceeds as follows: Let H = [n] \ C
and h = |H|. Let d be a parameter representing the safety
deposit, and let q denote the penalty amount.
• Input phase: Wait to receive a message (input, sid, ssid, r,
yr, coins(d)) from Pr for all r ∈ H. Then wait to receive
a message (input, sid, ssid,{ys}s∈C , coins(hq)) from S.
• Output phase:
– Send (return, sid, ssid, coins(d)) to Pr for all r ∈ H.
– Compute (z1, . . . , zn) ← f (y1, . . . , yn).
– If S returns (continue, sid, ssid), then send (output,
sid, ssid, zr) to Pr for all r ∈ H, and send (return,
sid, ssid, coins(hq)) to S.
– Else if S returns (abort, sid, ssid, coins(t(cid:48)(cid:48)hq)), send
(extra, sid, ssid, coins(t(cid:48)q)) to Pr for all r ∈ H.
Figure 2: Idealizing secure computation with penalties F (cid:63)
f .
If a party aborts after learning the output and does not deliver
output to honest parties, then every honest party is compen-
sated.
f (cf. Figure 2) captures these requirements.
The functionality F (cid:63)
Ideal functionality F (cid:63)
f [11]. In the ﬁrst phase, the functionality
F (cid:63)
f receives inputs for f from all parties. In addition, F (cid:63)
f allows
the ideal world adversary S to deposit some coins which may be
used to compensate honest parties if S aborts after receiving the
outputs. Note that an honest party makes a ﬁxed deposit coins(d)
in the input phase. Then, in the output phase, F (cid:63)
f returns the de-
posit made by honest parties back to them. If S deposited sufﬁcient
number of coins, then it gets a chance to look at the output and then
decide to continue delivering output to all parties, or just abort, in
which case all honest parties are compensated using the penalty de-
posited by S. We note that our version of F (cid:63)
f varies slightly from
the one proposed in [11]. While they allowed S to deposit insufﬁ-
cient number of coins (i.e., less than hq), we do not. On the other
hand, we do allow S to send extra coins to honest parties when it
aborts. This somewhat unnatural step is required in order to make
our construction in Section 5 simulatable.
3. VERIFIABLE COMPUTATION
Loosely speaking, an incentivizable protocol for veriﬁable com-
putation between a delegator D and a worker W must provide the
following guarantee:
• (Fast veriﬁcation.) The amortized work performed by D for ver-
iﬁcation is less than the work required to compute f.
the correct output of the computation from W .
• (Pay to learn output.) W obtains coins(q) from D iff D received
We start with a naïve solution in the F (cid:63)
A naïve solution. D sends u, f to W , and then creates an F (cid:63)
CR
transaction that allows W to claim its coins(q) if it reveals y such
that y = f (u). (More concretely, φ(w; (u, f )) = 1 iff w = f (u).)
W computes y = f (u) and claims coins(q) by providing w = y
to F (cid:63)
CR-hybrid model.
CR.
Clearly, the above is sufﬁcient to incentivize veriﬁable compu-
tation but the solution has obvious drawbacks when implemented
in the Bitcoin network. Note that to validate the claim transaction
each miner has to verify whether the witness provided was indeed
valid. This means that each miner has to compute f in order to
33Motivated by this, we now minimize the “validation complex-
CR-
conﬁrm the validity of the transaction. This is clearly undesirable
because (1) it puts a heavy load on the Bitcoin network and cor-
responds to heavy loss of resources, and (2) more philosphically,
while D is expected to pay W for the computation of f, miners are
now computing the same f essentially “for free”.
ity” of our protocol. First, we give a precise deﬁnition of F (cid:63)
validation complexity for a protocol in the F (cid:63)
CR-hybrid model.
Deﬁnition 4. Let Π be a protocol among n parties P1, . . . , Pn
in the F (cid:63)
CR-hybrid model. For circuit φ, let |φ| denote its circuit
complexity. For a given execution of Π starting from a particular
initialization Ω of parties’ inputs and random tapes and distribution
Π,Ω ) denote the sum of all |φ| such that
of coins, let VΠ,Ω (resp. V hon
some honest party claimed an F (cid:63)
CR transaction by producing a wit-
ness for φ during an (resp. honest) execution of Π. Then the F (cid:63)
CR-
validation complexity of Π, denoted VΠ, equals maxΩ (VΠ,Ω). The
optimistic F (cid:63)
equals
♦
Π,Ω .
maxΩV hon
CR-validation complexity of π, denoted V opt
Π
Note that our deﬁnition extends naturally to capture the valida-
tion complexity of other transaction functionalities (e.g., F (cid:63)
ML).
Also, we simply say “(optimistic) validation complexity” instead
of “(optimistic) F (cid:63)
CR-validation complexity” in contexts where it is
obvious that we are referring to the F (cid:63)
CR-validation complexity. As
mentioned in the Introduction, validation complexity of a transac-
tion may justify the transaction fee that is required to validate it in
the Bitcoin network.