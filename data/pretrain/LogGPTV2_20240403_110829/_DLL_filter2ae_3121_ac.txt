下面是取自具体实现中的一段代码。
    GetWindowThreadProcessId(targetWnd, &dwProcessId);
    HHOOK handle = SetWindowsHookEx(WH_KEYBOARD, addr, dll, threadID);
我们需要知道，发生的每个事件都将通过一个钩子链，这是一系列可以在事件中运行的过程。SetWindowsHookExe()要做的基本上就是如何将自己的钩子放入钩子链中。
上面的代码需要用到要安装的钩子类型（WH_KEYBOARD）、指向过程的指针、具有该过程的DLL的句柄以及将要挂钩的线程的ID。
为了获得指向程序的指针，我们需要首先使用LoadLibrary()调用加载DLL。然后，调用[SetWindowsHookEx()](https://wikileaks.org/ciav7p1/cms/page_6062133.html)，并等待我们想要的事件发生（这里而言就是按一个键）。一旦相应的事件发生，我们的DLL就会被执行。
完整的源代码，请参阅t_SetWindowsHookEx.cpp文件。
**RtlCreateUserThread()**
[RtlCreateUserThread()](https://undocumented.ntinternals.net/index.html?page=UserMode%2FUndocumented%20Functions%2FExecutable%20Images%2FRtlCreateUserThread.html)是一个未公开的API调用。它的设置几乎与CreateRemoteThread()以及后面介绍的NtCreateThreadE()完全相同。
实际上，RtlCreateUserThread()会调用NtCreateThreadEx()，这意味着RtlCreateUserThread()是NtCreateThreadEx()的封装。所以，这里没有什么新玩意。但是，我们可能只想使用RtlCreateUserThread()，而不是NtCreateThreadEx()。即使后者发生了变动，我们的RtlCreateUserThread()仍然可以正常工作。
我们知道，[mimikatz](http://blog.gentilkiwi.com/mimikatz)和Metasploit都使用[RtlCreateUserThread()](http://blog.gentilkiwi.com/mimikatz)。如果你有兴趣的话，可以看看[这里](https://github.com/gentilkiwi/mimikatz/blob/d5676aa66cb3f01afc373b0a2f8fcc1a2822fd27/modules/kull_m_remotelib.c#L59)和[这里](https://github.com/rapid7/meterpreter/blob/6d43284689240f4261cae44a47f0fb557c1dde27/source/common/arch/win/remote_thread.c)。
所以，如果mimikatz和Metasploit正在使用RtlCreateUserThread()…是的，那些家伙都了解自己的代码…按照他们的“建议”，使用RtlCreateUserThread()——特别是，如果你打算鼓捣一些比简单的“injectAllTheThings”程序更复杂的事情的时候。
完整的源代码，请参阅t_RtlCreateUserThread.cpp。
**SetThreadContext()**
这实际上是一个很酷的方法。通过在目标/远程进程中分配一大块内存，以便将特制代码注入目标/远程进程。而该代码是负责加载DLL的。
下面给出的是32位的代码。
    0x68, 0xCC, 0xCC, 0xCC, 0xCC,   // push 0xDEADBEEF (placeholder for return address)
    0x9c,                           // pushfd (save flags and registers)
    0x60,                           // pushad
    0x68, 0xCC, 0xCC, 0xCC, 0xCC,   // push 0xDEADBEEF (placeholder for DLL path name)
    0xb8, 0xCC, 0xCC, 0xCC, 0xCC,   // mov eax, 0xDEADBEEF (placeholder for LoadLibrary)
    0xff, 0xd0,                     // call eax (call LoadLibrary)
    0x61,                           // popad (restore flags and registers)
    0x9d,                           // popfd
    0xc3                            // ret
对于64位代码，没有找到任何可用的代码，只好自己动手了，具体如下。
    0x50,                                                       // push rax (save rax)
    0x48, 0xB8, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, // mov rax, 0CCCCCCCCCCCCCCCCh (placeholder for return address)
    0x9c,                                                       // pushfq
    0x51,                                                       // push rcx
    0x52,                                                       // push rdx
    0x53,                                                       // push rbx
    0x55,                                                       // push rbp
    0x56,                                                       // push rsi
    0x57,                                                       // push rdi
    0x41, 0x50,                                                 // push r8
    0x41, 0x51,                                                 // push r9
    0x41, 0x52,                                                 // push r10
    0x41, 0x53,                                                 // push r11
    0x41, 0x54,                                                 // push r12
    0x41, 0x55,                                                 // push r13
    0x41, 0x56,                                                 // push r14
    0x41, 0x57,                                                 // push r15
    0x68,0xef,0xbe,0xad,0xde,                                   // fastcall convention
    0x48, 0xB9, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, // mov rcx, 0CCCCCCCCCCCCCCCCh (placeholder for DLL path name)
    0x48, 0xB8, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, // mov rax, 0CCCCCCCCCCCCCCCCh (placeholder for LoadLibrary)
    0xFF, 0xD0,                                                 // call rax (call LoadLibrary)
    0x58,                                                       // pop dummy
    0x41, 0x5F,                                                 // pop r15
    0x41, 0x5E,                                                 // pop r14
    0x41, 0x5D,                                                 // pop r13
    0x41, 0x5C,                                                 // pop r12
    0x41, 0x5B,                                                 // pop r11
    0x41, 0x5A,                                                 // pop r10
    0x41, 0x59,                                                 // pop r9
    0x41, 0x58,                                                 // pop r8
    0x5F,                                                       // pop rdi
    0x5E,                                                       // pop rsi
    0x5D,                                                       // pop rbp
    0x5B,                                                       // pop rbx
    0x5A,                                                       // pop rdx
    0x59,                                                       // pop rcx
    0x9D,                                                       // popfq
    0x58,                                                       // pop rax
    0xC3                                                        // ret
在将这个代码注入目标进程之前，需要填充/修补一些占位符：
返回地址（代码完成执行后线程应该恢复的地址）。
DLL路径名。
LoadLibrary()的地址。
接下来就是劫持、暂停、注入和恢复线程发挥作用的时候。
我们首先需要连接到目标/远程进程，并将内存分配到目标/远程进程中。请注意，我们需要分配具有读取和写入权限的内存来保存DLL路径名，以及存放加载DLL的汇编代码。
    LPVOID lpDllAddr = VirtualAllocEx(hProcess, NULL, dwSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
    stub = VirtualAllocEx(hProcess, NULL, stubLen, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
接下来，我们需要获得在目标/远程进程上运行的一个线程的上下文（将要注入我们的汇编代码的线程）。
为找到线程，我们可以使用函数getThreadID()，它位于‘auxiliary.cpp’中。
一旦我们获得了线程id，就可以设置线程上下文了。
    hThread = OpenThread((THREAD_GET_CONTEXT | THREAD_SET_CONTEXT | THREAD_SUSPEND_RESUME), false, threadID);
接下来，我们需要暂停线程来捕获其上下文。线程的上下文实际上就是其寄存器的状态。我们特别感兴趣的寄存器是EIP / RIP（有时称为IP指令指针）。
由于线程被暂停，所以我们可以更改EIP / RIP的值，并强制它继续在不同的路径（我们的代码洞）中执行。
    ctx.ContextFlags = CONTEXT_CONTROL;
    GetThreadContext(hThread, &ctx);
    DWORD64 oldIP = ctx.Rip;
    ctx.Rip = (DWORD64)stub;
    ctx.ContextFlags = CONTEXT_CONTROL;
    WriteProcessMemory(hProcess, (void *)stub, &sc, stubLen, NULL); // write code cave
    SetThreadContext(hThread, &ctx);
    ResumeThread(hThread);
所以，我们暂停线程，捕获上下文，从中提取EIP / RIP。当我们注入的代码运行完成时，保存的这些数据将用来恢复现场。新的EIP /
RIP设置为我们注入的代码位置。
然后我们使用返回地址、DLL路径名地址和LoadLibrary()地址对所有占位符进行填补。
一旦线程开始执行，我们的DLL将被加载，它一旦运行完成，将返回到被挂起的位置，并在那里恢复执行。
如果你想练习调试的话，这里有具体的操作指南。启动要注入的应用程序，如notepad.exe。运行injectAllTheThings_64.exe与x64dbg，如下所示。
也就是说，我们可以使用以下命令行（具体视您的环境而定）：
    "C:UsersruiDocumentsVisual Studio 2013ProjectsinjectAllTheThingsbininjectAllTheThings_64.exe" -t 6 notepad.exe "c:UsersruiDocumentsVisual Studio 2013ProjectsinjectAllTheThingsbindllmain_64.dll"
在调用WriteProcessMemory()处设置断点，如下所示。
当代码运行时，断点触发，这时要注意寄存器RDX的内存地址。至于为什么要关注RDX，可以阅读x64调用约定方面的资料。
利用单步方式（F8）调用WriteProcessMemory()，启动x64dbg的另一个实例，并连接到'notepad.exe'。转到以前复制的地址（RDX中的地址），按“Ctrl
+ g”，您将看到我们的代码，如下所示。
太棒了！
现在，请在这个shellcode的开头设置一个断点。转到被调试进程的injectAllTheThings，让它运行。正如在下面看到的，我们的断点触发，现在可以单步调试代码，进行仔细研究了。
一旦调用LoadLibrary()了函数，就可以加载我们的DLL了。
这真是太好了。
我们的shellcode将返回到之前保存的RIP的地址处，notepad.exe将恢复执行。
完整的源代码，请参阅t_suspendInjectResume.cpp。
**反射型DLL注射**
我还将Stephen
Fewer（这种技术的先驱）代码引入了这个“injectAllTheThings”项目，此外，我还构建了一个反射型DLL项目使用这种技术。请注意，我们正在注入的DLL必须使用适当的include和options进行编译。
由于反射型DLL注入会将整个DLL复制到内存中，因此避免了使用进程注册DLL。我们已经完成了一切繁重的工作。要在DLL中加载内存时获取入口点，只需使用Stephen
Fewer的代码即可。他的项目中包含的“LoadRemoteLibraryR（）”函数为我们完成了这些工作。我们使用GetReflectiveLoaderOffset（）来确定我们进程内存中的偏移量，然后使用该偏移加上目标/远程进程（我们写入DLL的位置）中的内存的基地址作为执行起始点。
有点太复杂了？是的，确实如此。下面是实现这一目标的4个主要步骤。
1.将DLL头写入内存
2.将每个节写入内存（通过解析节表）
3.检测import并加载所有其他已导入的DLL
4.调用DllMain入口点
与其他方法相比，这种技术提供了强大的隐蔽性，并在Metasploit中大量应用。
如果你想了解更多详情，请访问官方的[GitHub信息库](https://github.com/stephenfewer/ReflectiveDLLInjection)。此外，请务必阅读[Stephen
Fewer的文章](http://www.harmonysecurity.com/files/HS-P005_ReflectiveDllInjection.pdf)。
另外，最好读一下[MemoryModule](https://github.com/fancycode/MemoryModule/)的作者Joachim
Bauch写的一篇[文章](https://www.joachim-bauch.de/tutorials/loading-a-dll-from-memory/)，讲述了如何从内存加载一个DLL，同时，这也是在没有LoadLibrary（）的情况下[手动加载Win32 / 64
DLL的好方法](https://www.codeproject.com/Tips/430684/Loading-Win-DLLs-manually-without-LoadLibrary)。
**代码**
当然，还有一些复杂的注入方法，所以后面还会更新injectAllTheThings项目。我最近看到的最有趣的一些是：
[DOUBLEPULSAR](https://countercept.com/our-thinking/doublepulsar-usermode-analysis-generic-reflective-dll-loader/)使用的一种方法
由[@zerosum0x0](https://twitter.com/zerosum0x0)编写的，使用SetThreadContext()和[NtContinue()](https://zerosum0x0.blogspot.co.uk/2017/07/threadcontinue-reflective-injection.html)的反射型DLL注入技术，此处提供了可用的[代码](https://github.com/zerosum0x0/ThreadContinue)。
我上面描述的所有技术都是我在[GitHub](https://github.com/fdiskyou/injectAllTheThings/)上提供的一个项目中已经实现的。此外，我还提供了每种技术所需的DLL。下表可以了解实际实现的内容以及使用方法。
不用说，为了安全起见，最好始终使用injectAllTheThings_32.exe注入32位进程或使用AllTheThings_64.exe注入64位进程。当然，您也可以使用injectAllTheThings_64.exe注入32位进程。其实我还没有实现这一点，但是我可能稍后会再试一次，你可以试着用[WoW64](http://blog.rewolf.pl/blog/?p=102)鼓捣一下64位进程。Metasploit的smart_migrate基本上就是这种情况，具体请看[这里](https://github.com/rapid7/meterpreter/blob/5e24206d510a48db284d5f399a6951cd1b4c754b/source/common/arch/win/i386/base_inject.c)。
本文涉及的整个项目的所有代码，包括DLL，都可从[GitHub](https://github.com/fdiskyou/injectAllTheThings/)下载。当然，如果您有兴致的话，也可以自己试着编译32位和64位代码。