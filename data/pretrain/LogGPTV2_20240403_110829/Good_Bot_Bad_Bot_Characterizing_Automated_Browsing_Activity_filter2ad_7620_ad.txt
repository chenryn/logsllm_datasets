distance to measure User-Agent string similarity of a
certain IP address, recording their minimum and maximum
similarity. We observed that when the changes are limited
to browser versions as presented in the bots’ UAs, the
requests exhibit more than 90% similarity. A total of
11,500 IP addresses present these types of version changes.
In light, however, of our ﬁndings in Section VII-A3
regarding bots imitating common browsers, these version
changes are likely to be part of a spooﬁng strategy, as
opposed to honest announcements of browser updates.
3) Switching user agents frequently We observed 4,440
(1.54%) IP addresses that sent requests with more than
5 UAs, and there are 542 IP addresses presenting more
than 20 UAs across their requests. In extreme cases, we
observed 44 IP addresses that sent more than 50 unique UA
headers. However, by looking at other HTTP headers and
their TLS ﬁngerprint, we can attribute their requests to just
one or two tools. This uncovers the strategy of frequently
rotating UAs, presumably to evade server-side blocking.
Ordering of HTTP headers. During our analysis of
crawling tools, we observed that speciﬁc orders of headers
can be attributed to usage of certain tools. For instance, we
discovered that wget and curl have consistent orderings across
versions and are different from each other. By capitalizing on
this observation, we identiﬁed 23,727 bots that presented more
than one header orderings, revealing the usage of more than
one tools, regardless of UA claims. Moreover, we discovered
28,627 IP addresses that have only one ordering of HTTP
headers, but have multiple UAs, which means they are changing
their claimed identities, without changing the underlying tools.
VII. TLS FINGERPRINTING
Aristaeus serves content to both HTTP and HTTPS requests
to accommodate as many bots as possible. Overall, bots made
10,156,305 requests over HTTPS (38.4% of total requests).
Out of all HTTPS requests, we extracted 558 unique TLS ﬁn-
gerprints. This indicates that most bots use the same underlying
TLS library which is related to the tool and the operating system
that they are using. We can therefore use these TLS ﬁngerprints
to identify bots and corroborate their claimed identities.
A. TLS Fingerprint of Web Bots
1) Bots behind NAT/Proxy
It
is expected that some bots will use proxies before
connecting to a website, both in order to evade rate-limiting
and blocklisting as well as to potentially distribute the load
across multiple servers. Therefore, some requests that originate
from the same IP address may be emitted by different bots. To
understand whether multiple bots are “hiding” behind the same
IP address or whether a single bot is just sending requests
with multiple UAs, we can compare the TLS ﬁngerprints
across requests of interest. To perform this analysis, we make
use of the following observations:
• Basic Web crawling tools. Tools like curl and wget will
produce only one ﬁngerprint for a given OS and TLS library
combination. We use this information to identify the use of
these tools in the presence of UA spooﬁng.
• Support for GREASE values in the TLS stack. Chrome,
Chromium, and Chromium-based browsers (such as Brave and
Opera) support GREASE, a new, TLS-handshake-related, IETF
standard [55]. The GREASE values that are sent in the TLS
handshakes produce multiple TLS ﬁngerprints across multiple
requests, with differences in TLS cipher suites, extensions, and
E-curves. As a result, the TLS ﬁngerprint of the aforementioned
browsers will be different in the ﬁrst and the last 1-2 bytes for
all GREASE-related handshake values. GREASE was added
to Chrome in Version 55 [56] which we veriﬁed by testing
Chrome on several popular platforms (Ubuntu 16.04, Ubuntu
18.04, CentOS 7, Windows 10, Mac OS, and Android 8).
Contrastingly, browsers such as Firefox, Edge, and Safari
have not implemented GREASE at the time of our analysis.
As a result, GREASE values are absent from the handshakes
and therefore the TLS ﬁngerprints of these browsers remain
the same across requests. For these browsers, we collected
their ﬁngerprints over different operating systems and used
these ﬁngerprints to uncover the true identity of bot requests.
Out of 43,985 IP addresses with a TLS ﬁngerprint, there are
1,396 (3.17%) IPs with two or more sets of TLS ﬁngerprints.
For this 3.17%, we observe that the requests originated from
different tools and/or OSs, hiding behind the same IP address.
If there was a TLS intercepting proxy in place, we would
not observe multiple TLS ﬁngerprints but rather a single
TLS ﬁngerprint (that of the intercepting proxy). Nevertheless,
distinguishing multiple clients behind a TLS proxy remains
a challenge for TLS ﬁngerprinting.
2) TLS ﬁngerprint of Tools
Given that only 558 unique TLS ﬁngerprints are shared
among all 10,156,305 requests, this means that the majority
of requests can be attributed to a small number of tools and
TLS libraries.
To perform the matching of bot TLS ﬁngerprints to known
tools, we manually extracted the TLS ﬁngerprint of the Go-
http-client, wget, curl, Chrome, Firefox, Opera, Edge and IE
browsers, and included them in our database of signatures.
Moreover, for other TLS ﬁngerprints that we could not repro-
duce in our setup, we assume that a crawler will not pretend to
be another crawler. For example, a crawler built using Python
may pretend to be Chrome or Firefox (in order to bypass anti-
bot mechanisms), but it has no reason to pretend to be curl given
that both tools are well known for building bots and therefore
receive the same treatment from anti-bot tools and services [8].
TABLE IV: Popular TLS ﬁngerprint distribution. Entries below the
line correspond to Chromium-based tools that were not in the top
ten, in terms of unique bot IP count.
Tools
Go-http-client
Libwww-perl or wget
PycURL/curl
Python-urllib 3
NetcraftSurveyAgent
msnbot/bingbot
Chrome-1(Googlebot)
Python-requests 2.x
commix/v2.9-stable
Java/1.8.0
MJ12Bot
Chrome-2(Chrome, Opera)
Chrome-3(Headless Chrome)
Chrome-4(coc coc browser)
Total
Unique
FPs
28
17
26
8
2
4
1
11
3
8
2
1
1
1
113
IP Count
15,862
6,102
3,942
2,858
2,381
1,995
1,836
1,063
1,029
308
289
490
80
4
Total
Requests
8,708,876
120,423
80,374
22,885
14,464
44,437
28,082
754,711
5,738
1,710
28,065
66,631
2,829
101
38,239
9,879,326
Therefore, after excluding browser TLS ﬁngerprints, we used
the description from the majority of recorded UA headers that
match the unknown TLS ﬁngerprints, to label them.
Table IV lists the most popular tools covering 113 unique
ﬁngerprints. Given that one of these tools is based on Google
Chrome, the bottom part of Table IV lists any additional
ﬁngerprints that we could trace back to Chrome. The total of
these 14 tools produced 9,879,326 requests, covering 97.2%
of all TLS requests. Bots using the Go language (and therefore
the Go-provided TLS libraries) are by far the most popular,
exceeding more traditional choices such as, Python, perl, and
wget. We observe a total of four different Chromium-related
ﬁngerprints, with distinct ﬁngerprints for bots operated
by Google (Googlebot, Google-Image, and Google Page
Speed Insights), headless Chrome, and the coc coc browser
corresponding to a Vietnamese version of Chrome.
These results show the power of TLS ﬁngerprinting in cor-
roborating the identity of benign bots and identifying malicious
bots that are lying about their identities. Out of 38,312 requests
that claimed to be msnbot/bingbot and have a valid TLS ﬁnger-
print, we were able to use reverse DNS to verify that all of them
were indeed real msnbot or bingbots. Similarily, out of 28,011
requests that claimed to be Googlebot, we matched 27,833
(99.4%) of them through TLS ﬁngerprinting and identify them
as real Googlebots. The remaining bots also failed in producing
the expected reverse DNS results, pointing to malicious actors
who claim the Googlebot identity to avoid getting blocked.
3) Using TLS ﬁngerprinting to uncover the real identity of bots
Given our ability to match claimed user agents (UAs) with
presented TLS ﬁngerprints, we checked the TLS ﬁngerprints
of all HTTPS-capable bots searching for a mismatch between
the stated UAs and the observed TLS ﬁngerprints. Overall, we
discovered that 27,860 (86.2%) of the total of 30,233 clients
that claim to be Firefox of Chrome, were in fact lying about
their identity.
Fake Chrome. Among the 12,148 IP addresses that claimed
to be Chrome through their UAs, 10,041 of them do not contain
the expected GREASE values in their cipher suites. As a result,
we can conclude that more than 82.6% of clients are lying about
being Chrome. From their TLS ﬁngerprints, we can conclude
that they are mostly curl and wget running on Linux OSs.
Fake Firefox. Similarly, 18,085 IP addresses claimed
through their UAs, to be Firefox. However, 12,418 (68.7%)
of these Firefox clients actually matched the ﬁngerprints of
Go-http-client, and 3,821 (21.1%) matched the ﬁngerprints of
libwww-perl. A small number of requests (5.7%) matched to
either python or curl. The remaining 539 IP addresses do not
match any of the TLS ﬁngerprints in our database, including
the ﬁngerprints of Firefox. Overall, our results show that at
least 17,819 out of 18,085 (98.5%) IP addresses that claimed
to be Firefox are lying about their identity.
Real Chrome. 351 of the 2,419 IP addresses that show signs
of GREASE support in their TLS handshakes, claimed to be-
long to mobile Safari. This is not possible, given that Safari does
not currently support GREASE (neither for Mac nor for the
iPhone). This indicates actors (benign or malicious) who wish
to obtain the content that websites would serve to mobile Safari
browsers, but lack the ability to instrument real Apple devices.
Other TLS ﬁngerprints. Finally, there are 11,693 of bots
that have other types of TLS ﬁngerprints, but they mostly be-
long to Go-http-client, Python-urllib, curl, and wget, as shown
in Table IV. They exhibit a wide range of UAs including MSIE,
Android Browser, .NET CLR, and MS Word. This indicates
a much larger landscape of spoofed client identities, past the
Chrome/Firefox spooﬁng that we investigated in this section.
4) TLS ﬁngerprints in Exploitation attempts
We applied our method of matching TLS ﬁngerprints to
the stated identities of the bots behind the malicious requests
we previously discussed in Section VI-A2. Table V presents
the results. First, we can observe that there are almost no
real browsers accessing those resources, corroborating our
exploitation labels (under the reasonable assumption that
attackers do not need full-ﬂedged browsers to send malicious
payloads to vulnerable websites). Second, there are major
variations in the different type of malicious requests. For
example, 93.4% of exploit requests are using Golang, but only
171 requests are using Golang to look for misplaced Backup
ﬁles. Similarly,
is popular in the backdoor
requests, but these tools do not appear in backup ﬁle probing
requests. These results indicate different generations of tools
and attackers, using different underlying technologies to
exploit different website vulnerabilities.
libwww/wget
VIII. CASE STUDIES
Bots only focusing on JS resources. Even though many
bots do not request images and other resources (presumably
as a way of speeding up their crawls) we observed bots that
only request JavaScript resources. One bot in our dataset
(IP address: 101.4.60.1**) was particularly interesting, as
it only downloaded JavaScript ﬁles but never, according to
Aristaeus’ tests, executed them. Given that the IP address of
this bot belongs to a Chinese antivirus company, we suspect
that the intention of that bot is to collect JavaScript ﬁles for
anti-malware research purposes.
TABLE V: TLS ﬁngerprint of malicious requests
Type
Python Golang
Backdoor
Backup File
Exploits
Fingerprinting
231
411
275
1,524
1,718
171
18,283
3,670
libwww /
wget
349
84
607
630
Chrome /
Firefox
Unknown
Total
3
0
0
139
482
1,803
390
7,226
2,783
2,469
19,555
13,189
Spikes in incoming trafﬁc. We observe two major spikes
in our dataset. The ﬁrst trafﬁc surge happened from May
28th to June 17th, where a group of bots continuously sent
us log-in attempts and XML-RPC requests. These bots
initially requested /wp-includes/wlwmanifest.xml) to check if a
honeysite was an instance of WordPress. They then extracted
the list of users from the author-list page, and then started
brute-forcing the admin account
through POST requests
towards xmlrpc.php (targeting WordPress’s authentication
point that is meant to be used as an API). This group of
bots issued a total of 4,851,989 requests, amounting to
18.4% of the total requests. Similarly, the second trafﬁc surge
corresponds to 21.9% of the total requests in our dataset.
Failed cloaking attempts. Modifying the HTTP user agent
header is likely the most common method of cloaking used
by the bots (both malicious bots trying to exploit websites
as well as benign bots operated by researchers and security
companies). Yet during our study, we observed failed attempts
to modify this header. For instance, we observed wrong
spellings of the “User-Agent” header including “useragent”
and “userAgent”. Similarly, the “Host” header also included
different spellings and letter cases, such as “HOST”, “host”,
or “hoSt”. The appearance of these spelling artifacts means
that these header ﬁelds are forged. For certain HTTP libraries
however, an incorrect spelling results in both the original
header and the new header being sent out. Therefore, some
requests recorded by Aristaeus included both ”User-Agent” and
”userAgent” headers. For these bots, the original ”User-Agent”
header indicated, e.g., ”python-requests/2.23.0”, whereas the
“userAgent” header reported ”Mozilla/5.0 (Windows NT 6.1;
WOW64; rv:45.0) Gecko/20100101 Firefox/45.0”.