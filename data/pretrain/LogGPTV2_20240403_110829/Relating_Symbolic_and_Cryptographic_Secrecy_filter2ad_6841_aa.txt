title:Relating Symbolic and Cryptographic Secrecy
author:Michael Backes and
Birgit Pfitzmann
Relating Symbolic and Cryptographic Secrecy
Michael Backes
Birgit Pﬁtzmann
IBM Zurich Research Laboratory
IBM Zurich Research Laboratory
R¨uschlikon, Switzerland
PI:EMAIL
R¨uschlikon, Switzerland
PI:EMAIL
Abstract
We investigate the relation between symbolic and cryp-
tographic secrecy properties for cryptographic protocols.
Symbolic secrecy of payload messages or exchanged keys is
arguably the most important notion of secrecy shown with
automated proof tools. It means that an adversary restricted
to symbolic operations on terms can never get the entire
considered object into its knowledge set. Cryptographic se-
crecy essentially means computational indistinguishability
between the real object and a random one, given the view of
a much more general adversary. In spite of recent advances
in linking symbolic and computational models of cryptog-
raphy, no relation for secrecy under active attacks is known
yet.
For exchanged keys, we show that a certain strict sym-
bolic secrecy deﬁnition over a speciﬁc Dolev-Yao-style
cryptographic library implies cryptographic key secrecy
for a real implementation of this cryptographic library.
For payload messages, we present the ﬁrst general crypto-
graphic secrecy deﬁnition for a reactive scenario. The main
challenge is to separate secrecy violations by the protocol
under consideration from secrecy violations by the protocol
users in a general way. For this deﬁnition we show a gen-
eral secrecy preservation theorem under reactive simulata-
bility, the cryptographic notion of secure implementation.
This theorem is of independent cryptographic interest. We
then show that symbolic secrecy implies cryptographic pay-
load secrecy for the same cryptographic library as used in
key secrecy. Our results thus enable existing formal proof
techniques to establish cryptographically sound proofs of
secrecy for payload messages and exchanged keys.
1 Introduction
Proofs of cryptographic protocols are known to be error-
prone and, owing to the distributed-system aspects of multi-
ple interleaved protocol runs, awkward to make for humans.
Hence automation of such proofs has been studied almost
since cryptographic protocols ﬁrst emerged. From the start,
the actual cryptographic operations in such proofs were ide-
alized into so-called Dolev-Yao models, following [15] with
extensions in [16, 23], e.g., see [25, 22, 18, 28, 29, 1, 20,
26]. These models replace cryptography by term algebras,
e.g., encrypting a message m twice does not yield a dif-
ferent message from the basic message space but the term
E(E(m)). A typical cancellation rule is D(E(m)) = m for
all m. It is assumed that even an adversary can only oper-
ate on terms by the given operators and by exploiting the
given cancellation rules. This assumption, in other words
the use of initial models of the given equational speciﬁca-
tions, makes it highly nontrivial to know whether results
obtained over a Dolev-Yao model are also valid over real
cryptography. One therefore calls properties and actions in
Dolev-Yao models symbolic in contrast to cryptographic.
Arguably the most important and most common proper-
ties proved symbolically are secrecy properties, as initiated
in [15]. Symbolically, the secrecy of a payload or a crypto-
graphic object like a secret key is represented by knowledge
sets: The object is secret if the adversary can never get the
corresponding symbolic term into its knowledge set. Cryp-
tographically, secrecy is typically deﬁned by computational
indistinguishability between the real object and a randomly
chosen one, given the view of the adversary. Hence sym-
bolic secrecy captures the absence of structural attacks that
make the secret as a whole known to the adversary, and be-
cause of its simplicity it is accessible to formal proof tools,
while cryptographic secrecy constitutes a more ﬁne-grained
notion of secrecy that is much harder to establish.
There has been signiﬁcant progress in relating symbolic
veriﬁcation and real cryptographic properties. Neverthe-
less, secrecy properties in this sense have not yet been con-
sidered, and their preservation is not a simple consequence
of general simulatability deﬁnitions between ideal and real
systems, nor of speciﬁc results from implementing a Dolev-
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
Yao-style cryptographic library in a cryptographically se-
cure way.
1.1 Related Work
Early work on linking Dolev-Yao-style models and real
cryptography [3, 2, 19] only considers passive attacks, and
can therefore not make general statements about protocols.
The same holds for [17].
The Backes-Pﬁtzmann-Waidner line of work contains
a number of related results. Primarily, there is a spe-
ciﬁc Dolev-Yao-style cryptographic library with a provably
secure real implementation [11], and its extensions from
public-key to symmetric systems [12, 9]. The notion of “as
secure as” proved there, also called reactive simulatability,
is indeed a powerful notion that allows for general composi-
tion, i.e., the ability to prove protocols with the ideal library
and subsequently to plug in the real library. It essentially
states that the views of honest users are indistinguishable
when they use either the ideal or the real library, and, after
composition, when they use a protocol with either the ideal
or the real library. This corresponds to the intuitive idea that
a replacement of an ideal by a real system is good if any-
thing that can happen to users in the real system could also
happen to them in the ideal system.
However, this view of the users does not contain the ad-
versary knowledge set as typically used in symbolic secrecy
proofs, and indeed this is a purely symbolic notion that does
not exist in an indistinguishable way in the real system. Nor
does the user view contain the actual key bitstrings, which
are cryptographically secret in the real system, because this
is a purely cryptographic notion that does not exist in an in-
distinguishable way in the ideal system. Hence, although
we will essentially prove below that symbolic secrecy im-
plies cryptographic secrecy for this Dolev-Yao-style library
and its implementation, this is clearly not a direct conse-
quence of the known as-secure-as relation.
A second class of related results in this line of work are
property preservation theorems. So far, they exist for in-
tegrity, non-interference, and a polynomial form of live-
ness [5, 6, 8, 10]. All these theorems are general for the
notion of reactive simulatability and build on the indistin-
guishability of user views. Thus when specialized to the
Dolev-Yao-style cryptographic library, they cannot yield the
desired type of results as we just saw. In fact, only non-
interference is a kind of secrecy property, and it is formu-
lated as the ﬂow of information from one user port to an-
other, irrespective of adversary views.
A third class of related results are protocol proofs above
the cryptographic library [7, 4].
The former, for the
Needham-Schroeder-Lowe public-key protocol, is entirely
an authentication proof. The latter, for the Otway-Rees pro-
tocol, contains a secrecy property, but this has been refor-
mulated by hand into an integrity property so that the in-
tegrity preservation theorem could be used.
Finally, a much more narrow result (in terms of possible
protocols and preserved properties) about an ideal and real
cryptographic library, but with a slightly simpler real imple-
mentation, is given in [24]. The property preserved here is
explicitly only integrity. An extension of this work consid-
ering the secrecy of exchanged keys has concurrently been
proposed in [14]. It considers a similarly restrictive class
of protocols; moreover, once a key has been exchanged the
bitstring of the key becomes known, hence protocols using
this key have to be analyzed within the underlying crypto-
graphic framework.
Hence there is still no theorem that symbolic secrecy
properties deﬁned via adversary knowledge sets for a
Dolev-Yao-style cryptographic library imply cryptographic
secrecy of the corresponding real terms. We will provide
such a theorem in this paper.
1.2 Overview of Our Results
The nicest possible theorem would be that for the real
and ideal Dolev-Yao-style cryptographic library from [11,
12, 9], all terms that are symbolically secret are also crypto-
graphically secret. However, such a strong statement does
not hold (and we believe that this has nothing to do with the
speciﬁcs of this cryptographic library). First, in many sit-
uations, symbolic secrecy does not exclude that partial in-
formation about a cryptographic object has become known.
This is quite natural given that symbolic secrecy only states
that the adversary does not have an entire term in its knowl-
edge set. One example is that a public key contains partial
information about a secret key, i.e., given the public key,
anyone can distinguish the real secret key from a random
one, for example by validating that signatures made with the
secret key are valid with respect to the public key, and sim-
ilarly for encryptions (which is even easier if the generation
algorithm derives the public key from the secret key alone).
The second example is that symmetric authentications and
encryptions provide partial information about a symmetric
secret key, at least if one also has partial information about
the message encrypted or authenticated. Nevertheless, sym-
bolic secrecy never classiﬁes a secret key as known to the
adversary just because a corresponding public key or cor-
responding symmetric encryptions and authentications are
known to the adversary. A third and different example is
that a payload, i.e., a message input to a protocol by a user,
may become known or partially known to the adversary by
direct interaction with users (e.g., a chosen-message attack)
or by a user reusing this message or a statistically related
message in another protocol run. Direct interactions of pro-
tocol users and the adversary are typically excluded in sym-
bolic models, and so is the reuse of a secret message in other
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
protocol runs. In a general cryptographic reactive setting,
however, this is not excluded a priori. Hence our theorems
have to be more speciﬁc.
The problems just described are quite different for pay-
loads and for the secrecy of objects generated within the
cryptographic library. Hence we prove different theorems
for the secrecy of payloads and of cryptographic objects,
which in this context means the secret keys typically ex-
changed in key-exchange protocols.
For payload secrecy, there is not even a general crypto-
graphic secrecy deﬁnition yet; deﬁnitions are typically spe-
ciﬁc to the protocols considered and contain an algorithm
called a message chooser that selects one particular payload
independent of all others and not inﬂuenced by the adver-
sary. This overcomes the described problems, but does not
easily generalize to arbitrary protocols and to realistic sit-
uations with message reuse within a protocol run or across
protocol runs, or where the adversary has a priori informa-
tion about the payload. We introduce a different approach:
We let honest users generate payloads as they like, but re-
place the payloads consistently at the interface to the system
under consideration when they occur in certain secret pay-
load positions. The resulting deﬁnitions are independent of
the cryptographic library and give rise to a general payload
secrecy preservation theorem.
In addition, we show that
symbolic secrecy in the Dolev-Yao sense implies the pay-
load secrecy in this sense for the ideal cryptographic library
and consequently for the real cryptographic library.
For the secrecy of secret keys, we essentially restrict our-
selves to the typical situation directly after a key-exchange
protocol for this key: We require on the symbolic side
that no encryptions or authenticators with the exchanged
key have yet been made, or at least not become known to
the adversary. Then we can indeed show that the cryp-
tographic key is completely indistinguishable from a ran-
dom key, given the view of the adversary. This is the typ-
ical key secrecy deﬁnition of cryptography. Although our
additional symbolic precondition may exclude some key-
exchange protocols that are typically considered secure by
symbolic methods, these protocols are in fact imperfect
from a cryptographic point of view: A key-exchange proto-
col in cryptography should be sequentially composable with
an arbitrary protocol using this key, e.g., a secure channel.
The arbitrary protocol will be proved secure under the as-
sumption that it uses a fresh random key. Hence the key ex-
change protocol must guarantee that the resulting key can
be used wherever a fresh random key can be used. The
only way to guarantee this is by indistinguishability from a
fresh random key. Indeed, a key that has already been used
as an authenticator might potentially end up in a protocol
where precisely this authentication can be used for a cross-
protocol attack, thus destroying the security of the protocol.
Compared with message secrecy, this key-secrecy theorem
is relatively easy to state—we simply need the condition on
keys to be not only symbolically unknown to the adversary,
but also symbolically unused. However, the proof is com-
plex because we have to augment the entire proof of the
given cryptographic library with corresponding statements
about symbolic key handles and real keys, in addition to the
current statements aimed at proving only indistinguishabil-
ity of the user views.
2 Overview of the Underlying Dolev-Yao-
Style Cryptographic Library
In this section, we give an overview of the Dolev-Yao-
style model from [11, 12, 9], for which we will prove rela-
tions between symbolic and cryptographic payload and key
secrecy.
2.1 Terms, Handles, and Operations
As described in the introduction, a Dolev-Yao-style
model abstracts from cryptographic objects by terms of a
term algebra. A speciﬁc aspect of the Dolev-Yao-style
model in [11] is that participants operate on terms by local
names, not by handling the terms directly. This is necessary
to give the abstract Dolev-Yao-style model and its realiza-
tion the same interface, so that either one or the other can
be plugged into a protocol. An identical interface is also an
important precondition for the security notion of reactive
simulatability. One can see protocol descriptions over this
interface as low-level symbolic representations as they ex-
ist in several other frameworks, and it should be possible to
compile higher-level descriptions into them following the
ideas ﬁrst developed in [21]. The local names are called
handles, and chosen as successive natural numbers for sim-
plicity.
Like all Dolev-Yao-style models when actually used for
protocol modeling, e.g., using a special-purpose calculus or
embedded in CSP or pi-calculus, the model in [11] has state.
An important use of state is to model which participants al-
ready know which terms. Here this is given by the han-
dles, i.e., the adversary’s knowledge set is the set of terms
to which the adversary has a handle.
Another use of state is to remember different versions of
terms of the same structure for probabilistic operations such
as nonce or key generation. In [11], as probably ﬁrst in [22],
the probabilism is abstracted from by counting, i.e., by as-
signing successive natural numbers to terms, here globally
over all types. This index of a term allows us (not the par-
ticipants) to refer to terms unambiguously.
The users can operate on terms in the expected ways,
e.g., give commands to en- or decrypt a message, to gen-
erate a key, or to in- or output a payload message. Fur-
ther, they can input that a term should be sent to another
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
user; in the symbolic representation this only changes the
knowledge sets, i.e., in this speciﬁc Dolev-Yao-style library
it means that the intended recipient and/or the adversary
(depending on the security of the chosen channel) obtains
a handle to the term.
P
1
P
n:
aut
ind
type
arg
hnd1
...
hndn
len
list pka
data
m
1
2
3
4
5
pka
ska
data
list
aut
()
(1)
m
(3)
(4,1)
...
...
...
...
...
1
2