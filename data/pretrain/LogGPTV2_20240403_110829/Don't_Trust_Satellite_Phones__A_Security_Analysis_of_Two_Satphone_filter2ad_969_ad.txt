




Figure 5. The LeMans AD6900 Platform [25]
135
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:23 UTC from IEEE Xplore.  Restrictions apply. 
standardized Device Firmware Upgrade (DFU) protocol and
we discarded it from the analysis process since it is not
relevant for our security analysis.
The two relevant ﬁrmware ﬁles contain plenty of strings.
Based on these strings, we can make the educated guess
that
there are indeed two separate platforms combining
an ARM926EJ-S CPU and a Blackﬁn DSP, where both
processors share the same memory for their code and data.
The second ﬁle also contains string references related to
encryption, which lead us to focus on this part of the
whole ﬁrmware image. The ARM part of this ﬁle can
be disassembled using existing tools such as IDA Pro. In
contrast,
the memory mapping of the DSP code cannot
be inferred without additional efforts. However, a correct
mapping of the DSP code and data section is required for our
analysis since correct references in subroutine calls or string
references from within the code are crucial to disassemble
and understand the code.
Therefore, we reverse-engineered the very ﬁrst initializa-
tion routines in the Blackﬁn code, which turned out to hold
a DSP memory initialization routine that builds the DSP
code and data from the ﬁrmware image into another memory
region (presumably RAM). In the ﬁrmware image, the actual
DSP code and data regions are stored as multiple chunks of
data that are either uninitialized (i.e., ﬁlled with null bytes)
or initialized. Initialized blocks are repeated consecutively in
memory multiple times. The meta information for each data
chunk (i.e., chunk type, block length, etc.) is prepended as
a header. The ﬁrst chunk starts at a ﬁxed address and each
header also contains an offset to the next chunk in memory.
As no encryption or compression for the DSP code and
data is used within the ﬁrmware, the corresponding ﬁrmware
regions can be extracted directly. Using this information, we
were able to reconstruct the actual memory layout of the
DSP in RAM.
As there is no support for Blackﬁn assembler in IDA
Pro, we developed our own disassembler with the help of
the ofﬁcial Blackﬁn reference that disassembles the DSP
ﬁrmware image by following the program ﬂow using a
recursive traversal approach:
1) The disassembler performs a linear sweep over the
image to obtain target adresses of call instructions.
2) In a second step, the disassembler analyzes all adresses
identiﬁed in the ﬁrst step and starts to recursively
disassemble these locations by following the program
ﬂow. Each subsequent call and jump instruction is
taken and switch statements are resolved on-the-ﬂy.
By following this approach and assuming that no
obfuscation is used within the ﬁrmware image, we can
be sure that only code that is actually reachable by the
program ﬂow is interpreted as code.
3) In a third step, all gaps between valid code blocks
(i.e., functions) are disassembled recursively to obtain
functions that are accessed by indirect means.
Applying our custom disassembler on the reconstructed
DSP-image yielded more than 300,000 lines of assembler
code, where cross-references are also annotated. An example
of a disassembly is shown in the Appendix in Figure 11.
Due to the large amount of DSP code, an extensive manual
analysis is unfeasible in a reasonable amount of time. Hence,
we again applied the same heuristics used in the previous
analysis to spot cryptographic code, i.e., we searched for
subroutines holding a signiﬁcant percentage of mathematical
operations one would expect from an encryption algo-
rithm [1]–[3]. Unfortunately, this approach did not reveal any
code region that could be attributed to keystream generation.
This is explained by the fact that the DSP code also contains
plenty of demodulation and speech encoding algorithms that
naturally bear some resemblance to cryptographic algorithms
in that they make extensive use of mathematical operations.
Hence, we decided to follow another approach. The
Blackﬁn code contains a number of debug messages which
include the name of the source ﬁles of the respective
code. This allowed us to directly infer preliminary func-
tion names and to derive the purpose of several functions.
More speciﬁcally, we identiﬁed one subroutine where the
debug message contains a reference to a source ﬁle with
the name ..\..\modem\internal\Gmr2p_modem_
ApplyCipher.c. Hence, we named this function Apply-
Cipher() and we found out that it takes two 120-bit inputs
which are then xor’ed. Since we deal with cryptographic
code, we assumed that one of these parameters is the output
of a stream cipher because the lengths match the expected
frame size of 120 bits according to the GMR-2 speciﬁca-
tion [26]. Starting from this subroutine, we identiﬁed the
cipher code by applying a number of different techniques
that we explain in the following. All these techniques aim
at narrowing down the potentially relevant code base in
the disassembly. This is an essential and inevitable step in
the analysis process since the keystream generation code is
located in an entirely different part within the DSP code than
ApplyCipher().
First, we created the reverse call graph of the ApplyCi-
pher() function, i.e., we recursively identiﬁed all call sites
of this subroutine. Each call site is represented as a node
in the graph, and an edge from one node to another node
indicates that the destination node’s subroutine is called
from the source node’s subroutine. This process is repeated
until there is no caller left. Figure 6 depicts the reverse call
graph of ApplyCipher(), where root nodes (shown in grey)
constitute thread start routines. Subroutine names, if present,
were extracted from debug string within the corresponding
subroutine code. Accordingly, in a forward call graph, an
edge from one node to another indicates that the source
node’s subroutine calls the destination node’s subroutine.
The forward call graph is built recursively starting from a
given root node.
Our ﬁrst approach was to manually back track the data
ﬂow of the keystream parameter of ApplyCipher(). Unfortu-
136
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:23 UTC from IEEE Xplore.  Restrictions apply. 
-#+&+)%#-/
-#+&+)%&,#
-#+&+)%#-/
-#+&+)%#
-#+&+)%#
-#+&+)'"( %//
-#+&+)%#/#+ 
$-# *&+)%#-/
$(,%%('!&+)%#/
-#+&+)'"( %/
-#+&+)'"( %/'!!
&+)%#/
,. 
,. 
,.
-#+&+)&( &#',-
&+)# %%(
&+)&( &#',-
&+)&( &(
&+)&( &))%0$)# +
Figure 6. Reverse call graph of ApplyCipher() (the ten grey nodes are root nodes)
nately, this did not turn out to be promising since a myriad of
additional functions are being called in between the thread
creation and ApplyCipher(). We were only able to identify
a subroutine (denoted by us as CreateChannelInstance())
that allocates the memory region of the key data before
initializing it with zeros. However, we needed to ﬁnd the
piece of code that ﬁlls the keystream buffer with the actual
key data. Additional techniques were needed that enable us
to exclude those large portions of code that are irrelevant
for this purpose.
An analysis of the control ﬂow graphs of the thread start
routines (the nine grey nodes in Figure 6) suggests that
each routine implements a state machine using one switch
statement. By generating the forward call graph for each
case in the switch statement, we can derive which functions
are called in each corresponding state. Most notably, this
allows us to identify the points at which the keystream
buffer is created (by calling CreateChannelInstance()) and
the encryption of the plain text happens (by calling ApplyCi-
pher()). The code responsible for generating the keystream
naturally has to be called in between these two points.
The remaining code (approximately 140 subroutines) was
still too large for a manual analysis. In order to further
narrow down the relevant code parts, we created the forward
call graphs of all nine thread routines and computed the
intersection of all the nodes in the graphs. The idea behind
this approach is that in every case the stream cipher has
to be called eventually, regardless of the actual purpose of
the thread. The intersection greatly reduces the candidate
set of code regions from about 140 subroutines to only
13 functions shared by all threads (not including further
nested subroutine calls). In the last step, we analyzed these
remaining functions manually. At ﬁrst, this analysis revealed
the subroutine which encodes the TDMA-frame counters
into a 22-bit frame-number. Shortly after this function,
the actual cipher code is called. The algorithm itself, as
explained in the next section, is completely dissimilar to
A5/2, which also explains why we were not able to spot the
cipher with the same methods as in the analysis of GMR-1.
C. Structure of the Cipher
After having obtained the cipher’s assembler code, we had
to ﬁnd a more abstract description in order to enhance intu-
itive understanding of its way of functioning. We arbitrarily
chose to split the cipher into several distinct components
which emerged after examining its functionality. Note that,
for the sake of symmetry, we denote the cipher as A5-
GMR-2, althtough it shows no resemblance to any of the
A5-type ciphers and is called GMR-2-A5 in the respective
speciﬁcation [27].
The cipher uses a 64-bit encryption-key and operates on
bytes. When the cipher is clocked, it generates one byte of
keystream, which we denote by Zl, where l represents the
number of clockings. The cipher exhibits an eight byte state
register S = (S0, S1, . . . , S7)28 and three major components
we call F, G, and H. Additionally, there is a 1-bit register
T that outputs the so-called “toggle-bit”, and a 3-bit register
C that implements a counter. Figure 7 provides a schematic
overview of the cipher structure. In the following, we detail
the inner workings of each of the three major components.








Figure 7. The A5-GMR-2 cipher
We begin with the F-component, which is certainly the
most interesting part of this cipher – Fig. 8 shows its internal
structure. On the left we see another 64-bit register split into
Figure 8. F-component of A5-GMR-2
137
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:23 UTC from IEEE Xplore.  Restrictions apply. 
x
T1(x)
T2(x)
T2(T1(x))
(0, 0, 0, 0)2
(0, 0, 0, 1)2
(0, 0, 1, 0)2
(0, 0, 1, 1)2
(0, 1, 0, 0)2
(0, 1, 0, 1)2
(0, 1, 1, 0)2
(0, 1, 1, 1)2
(1, 0, 0, 0)2
(1, 0, 0, 1)2
(1, 0, 1, 0)2
(1, 0, 1, 1)2
(1, 1, 0, 0)2
(1, 1, 0, 1)2
(1, 1, 1, 0)2
(1, 1, 1, 1)2
2
5
0
6
3
7
4
1
3
0
6
1
5
7
4
2
4
5
6
7
4
3
2
1
-
-
-
-
-
-
-
-
6
3
4
2
7
1
4
5
7
4
2
5
3
1
4
6
*
*
*
*
Table IV
T1 AND T2 AS LOOKUP-TABLE
eight bytes (K0, K1, . . . , K7)28. The register is read from
two sides, on the lower side one byte is extracted according