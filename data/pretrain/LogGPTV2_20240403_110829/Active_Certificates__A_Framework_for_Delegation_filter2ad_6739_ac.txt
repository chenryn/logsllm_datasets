We also could have modeled active certiﬁcates using the
restricted delegation primitive deﬁned by deﬁned by Howell
and Kotz [22].
”
means that
. An active certiﬁcate
for any action contained in the set
would then be modeled as:
regarding
has the authority to act on the behalf of
speaks for
, or “
. The
to a request
However, this expression is awkward and difﬁcult to under-
stand, since an active certiﬁcate deﬁnes both the potential
recepients of delegated rights and the set of allowed actions
implicitly (and in general, these sets are not computable).
4.1 Authentication of Responses
We can also use the logic to reason about the valid-
ity of responses received from the Resource when active
certiﬁcates are used. When Alice accesses the Resource
is interpreted as
directly, a response
predicate is used to
associate a response with the appropriate request. However,
what can Bob tell about the response when active certiﬁ-
cates are in place? Unfortunately, as a consequence of in-
,
terposition, Bob cannot assume that
because Alice’s active certiﬁcate is allowed to modify
both requests and responses arbitrarily. In a sense, Alice
by her certiﬁcate,
is deﬁning her own predicate
which may be different from the Resource’s predicate.
However, it would be incorrect for Bob to assume that
, since the execution of Alice’s cer-
tiﬁcate at the Resource is not monitored by either Alice or
Bob; the Resource is free to return arbitrary results. We
must therefore take a closer look at the operation of active
certiﬁcates.
to
. Therefore, when
the Resource, where
from the Resource,
Alice’s certiﬁcate receives a response
it can infer that:
. The certiﬁcate then uses
to derive the ﬁnal response . It is therefore appropriate
Recall that the active certiﬁcate passes a request
to model the certiﬁcate’s modiﬁcations to the response as:
In other words, given the response from the Resource
to the request
, Alice’s certiﬁcate computes its own
response to the request
. The resource can apply (2),
to obtain
substituting
. This can be sent back to Bob, who
can obtain the ﬁnal result:
, and (3),
for
This must be the interpretation that Bob gives to the
result, as it reﬂects the nature in which the result is derived.
Unfortunately, this statement is weaker than one Bob would
expect in the non-delegated case; however, it is sufﬁcient
in many common instances of delegation. Consider, for
example, the case where Alice gives Bob the right to check
her email while she is away, or where Alice shares access
to some of her ﬁles with Bob because they are working
on a project together.
In both cases, it does not make
sense for Alice to try to deceive Bob by returning malicious
results in her certiﬁcate; delegation here is used as a tool for
cooperation, which requires a certain degree of mutual trust
to begin with. Problems arise when Bob’s ability to use the
Resource properly is not directly beneﬁcial for Alice; for
example, if she is selling her access to the Resource to Bob.
In such cases, Bob may want to examine the operation of the
active certiﬁcate in order to derive a stronger statement on
the result. However, in general, properties of the certiﬁcate
may be undecidable given the program code; providing
better support for auditing is the subject of future work.
5 Implementation
We have built a prototype implementation of active cer-
tiﬁcates as part of the service call mechanism in Ninja [17].
The Ninja project aims to serve as a platform for building a
distributed services infrastructure, with a focus on service
composition. This section discusses the details of our
implementation.
5.1 Service Calls
Service calls in Ninja are represented as typed messages,
or tasks. A task is implemented as a Java object. Java [16] is
used in Ninja because it provides a rich type hierarchy, plat-
form independence, and automated memory management.
When a client wishes to send a task to a service, it calls
the handleTask method on a stub object for the service.
The task is serialized and sent to the service for processing.
Responses, or completions, are returned in the formof typed
messages as well.
5.2 Certiﬁcate Implementation
Because of its support for code mobility and restricted
program execution, we use Java as the language for active
certiﬁcates in our implementation. This choice also simpli-
ﬁed the integration of active certiﬁcates with the rest of the
Ninja framework.
An active certiﬁcate implements the ActiveCertIF
interface, which has two methods: init, which accepts
a reference to a stub object for the downstream service,
and handleTask, which performs a policy decision on
incoming tasks and sends tasks to the service, using the
handleTask method on the stub object.
It also pro-
cesses the responses received from the service, potentially
modifying them before returning them to the user. The
interposition of the active certiﬁcate is transparent to both
the service and the client.
The ActiveCertIF interface is well suited for chain-
ing. An active certiﬁcate that is part of a chain gets a
reference to another certiﬁcate, and not to a service stub,
as the argument to its init method. Therefore, calls to
handleTask pass the tasks to the next certiﬁcate in the
chain. In this way, chaining is also transparent to all the
certiﬁcates.
5.3 Authentication
We will not discuss the authentication protocol used by
Ninja, other than to say that it is similar in spirit to TLS [9],
and can be modeled as a secure channel. The result of
authentication is expressed as message metadata: each
typed message includes an authKey ﬁeld that is set by
the infrastructure to be the public key of the authenticated
originator of the message. When a service receives a
it can derive the statement
message
Active certiﬁcates are implemented by changing the
authKey ﬁeld of messages. When an active certiﬁcate
the authKey is set
receives a message from a client,
to the client’s public key. When it calls handleTask,
the resulting message that is sent to the service has its
authKey set to the signer of the certiﬁcate. This makes
the service behave as if the principal who signed the
certiﬁcate was interacting with it directly.
5.4 Certiﬁcate Format
An active certiﬁcate consists of four ﬁelds: the certiﬁcate
program, represented by the bytecode for a class that
implements the ActiveCertIF interface, a parameter
object (see below), an expiration date, and the public key
of the signer of the certiﬁcate. The ﬁnal certiﬁcate consists
of a byte array containing the serialized version of these
ﬁelds and a signature over the byte array using the speciﬁed
public key.
with
.
When the infrastructure receives an active certiﬁcate from
a client, it ﬁrst veriﬁes the signature. If the veriﬁcation suc-
ceeds, a special class loader is used to load the implemen-
tation of the certiﬁcate with restricted permissions. Then
the infrastructure creates an instance of the certiﬁcate class,
passing the parameter object to the constructor. Finally, it
installs the certiﬁcate in the message path between the client
and the service by calling the certiﬁcate’s init method.
The parameter object allows the reuse of a single class
implementing an active certiﬁcate program in multiple
certiﬁcates. For example, a blanket delegation certiﬁcate
(for a limited
that delegates all possible rights to key
time) might store the value of
in a parameter object. This
allows the same implementation to be reused to perform a
. In the absence of a parameter
similar delegation to key
would have to be speciﬁed as a static ﬁeld
or
ﬁeld,
in the class, requiring two separate classes for the two
certiﬁcates.
5.5 Principal Names
The Ninja infrastructure does not have an inherent under-
standing of principal names; it uses public keys to identify
participants. To support named principals, we implemented
a hierarchical PKI as described in Section 3.4. We created
a special wrapper message type called MessageFrom,
which contains a name attribute and a message. The
semantics of a message of the form MessageFrom
. However, unlike the
can be modeled as
authKey ﬁeld, the name ﬁeld in a MessageFrom object
is not veriﬁed by the infrastructure, so a service must be
careful to accept such messages only from trusted sources.
In our prototype hierarchical PKI each service knows the
key of the root authority and only accepts MessageFrom
objects authorized by that key.
The root authority issues delegation certiﬁcates that ac-
cept MessageFrom messages authenticated by its subau-
thorities, checking that the name ﬁeld is within the juris-
diction of each authority. The subauthorities, in turn, issue
certiﬁcates that accept messages sent by a particular public
key and create a MessageFrom message that includes the
corresponding name. An example of such a certiﬁcate is
shown in Figure 4. When a client accesses a service, it sets
up a chain of active certiﬁcates leading up to the root, and
then proceeds to send requests. The ﬁrst certiﬁcate in the
chain will create a MessageFrom message, which will
be accepted by the certiﬁcates that follow it in the chain.
Finally, the message will arrive at the service authenticated
by the root authority. The service can then perform a
decision based on the now-authenticated name ﬁeld.
5.6 Applications
We built a certiﬁcate directory service, which is used
to look up active certiﬁcates by name. Clients use the
public class NameCertificate
implements ActiveCertIF {
private PublicKey key;
private Name name;
private ServiceIF service;
// ...
void handleTask(Task task) {
if (task.authKey.equals(key)) {
service.handleTask(
new MessageFrom(name, task), ...)
} else {
// error
}
}
}
Figure 4. A Name Certiﬁcate.
certiﬁcate service to look up their name certiﬁcates, which
they use to authenticate themselves to services. The direc-
tory service only accepts updates from the root authority.
However, we use a delegation certiﬁcate issued by the root
that implements the following policy: any client that can
is allowed to update the
authenticate itself under name
certiﬁcate stored for that name. This allows clients to
update their own entries in the directory, but not those of
others. Note that this policy was implemented by the root
authority without modifying the directory service, as would
be necessary in a conventional system.
We also experimented with using active certiﬁcates
to delegate access
to the Ninja Jukebox [14] and
NinjaMail [36] services. We successfully implemented
certiﬁcates with policies to provide read-only access to
individual song preferences to a “collaborative DJ” service.
In NinjaMail, we use active certiﬁcates to grant a procmail-
like [35] service the ability to examine message headers
and automatically ﬁle messages into folders. In this way,
a compromise of the procmail service will have limited
impact on the mail system; in particular, mail cannot be
deleted.
5.7 Discussion
Java Platform. Our experience using Java has been gen-
erally positive. The Java 1.2 Security Architecture [15] is a
big improvement over the previous version; restricting the
execution of active certiﬁcates was quite natural. It is im-
possible, however, to enforce resource limits such as CPU
time or memory usage on the certiﬁcate in our prototype.
We are hoping to beneﬁt from research on resource limits
in Java [13, 33], and provide better resource monitoring for
active certiﬁcates as well as other components of the Ninja
framework.
The method of creating Java active certiﬁcates presented
a barrier to automated certiﬁcate generation. To create a
certiﬁcate, it is necessary to locate the bytecode for its
implementation; in an interactive setting this is done by
reading the corresponding .class ﬁle off the ﬁle system.
However, Ninja services are shipped as mobile code to their
execution environments and frequently do not have access
to the ﬁle system. To let a service create new certiﬁcates,
it is necessary to include a static parameter to the service
that contains the bytecode of the certiﬁcate implementation.
This approach is functional, but it requires administrative
overhead to set and update the service parameter.
If the
bytecode implementation of a class visible at runtime could
be obtained through reﬂection, automatic generation of
certiﬁcates would be more natural.
Message Interfaces. The use of typed message interfaces
helped make active certiﬁcates simpler and cleaner. The