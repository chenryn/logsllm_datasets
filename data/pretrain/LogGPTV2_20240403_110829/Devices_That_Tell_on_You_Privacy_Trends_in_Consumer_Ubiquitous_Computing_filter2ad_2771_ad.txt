location of that device (and by inference the user) across
different physical spaces and over time.
USENIX Association
16th USENIX Security Symposium
63
Figure 7: The ﬁgure on the left shows our approach for passively monitoring the serial communications between an
iPod and the Nike+iPod receiver; the communications between the iPod and the receiver are over a physical, serial
connection, and the communication from the sensor to the receiver is via a radio. The ﬁgure in the middle shows our
approach for directly controlling a Nike+iPod receiver from a computer; the communication from the computer to the
Nike+iPod receiver is over a physical serial connection. The ﬁgure on the right shows our approach for translating
between a sensor’s UID and the sensor’s serial number.
3.3 Measurements
To understand the implications of our observations in
Section 3.2, we must understand the following proper-
ties of a Nike+iPod sensor: when it transmits; how often
it transmits; the range at which the receiver hears the sen-
sor’s UID; and the collision behavior of multiple sensors.
We have already partially addressed some of these prop-
erties, but elaborate on our observations here.
When the sensor is still, it is “sleeping” to save bat-
tery. When one begins to walk or run with the sensor in
their shoe, the sensor begins transmitting. It is also pos-
sible to wake up the sensor without putting it in a shoe.
For example, shaking the sensor while still in the sealed
package from the store will cause it to transmit its UID.
Sensors can also be awakened by tapping them against a
hard surface or shaking them sharply. Similarly, if a sen-
sor is in the pocket of one’s pants, backpack, or purse, it
will occasionally wake up and start transmitting. Once
walking, running, or shaking ceases, the sensor goes to
sleep after approximately ten seconds.
While the sensor is awake and nearby we observed
that it transmits one packet every second (containing the
UID). When the sensor is more distant or around a cor-
ner the receiver heard packets intermittently, but still on
second intervals. When multiple sensors are awake near
one another some packets get corrupted (their checksums
do not match). As the number of awake sensors increase
so does the number of corrupt packets. However, our
tests with seven sensors indicated the receiver still hears
every sensor UID at least once in a ten second window.
During our experiments with the Nike+iPod sensors we
observed approximately a 10 meter range indoors and a
10–20 meter range outdoors. Sensors are also detectable
while moving quickly. Running by a receiver at approx-
imately 10 MPH, the sensor is reliably received. Driv-
ing by someone walking with a sensor in their shoe, the
sensor can be reliably detected at 30 MPH. We have not
tested faster speeds.
3.4 Instrumenting Attacks
Section 3.2 shows that it is possible for an adversary
to extract a Nike+iPod sensor’s UIDs from sniffed ra-
dio transmissions, and Section 3.3 qualiﬁes the circum-
stances under which the receiver might be able to sniff
those transmissions. These results already enable us to
conclude that, despite broad awareness about the tracka-
bility concerns with unique identiﬁers in other technolo-
gies (e..g, RFIDs, discoverable bluetooth), new commer-
cial products are still entering the market without any
strong protection mechanisms for ensuring users’ loca-
tion privacy.
We now seek to explore just how easy — in terms of
cost and technical sophistication — it might be for an
adversary to exploit the Nike+iPod Sport Kit’s lack of
location privacy protection and, at the same time, to ex-
plore the types of applications that an adversary might
build. For example, one application that we built is a
GoogleMaps-based system that pools data from multiple
64
16th USENIX Security Symposium
USENIX Association
Nike+iPod sniffers and displays the resulting tracking in-
formation on a map in real-time. When assessing the
ease with which an attacker might be able to implement
a Nike+iPod-based surveillance system, it is worth not-
ing that the attacker may not need to write source code
him or herself, but may instead download the necessary
software from somewhere on the Internet. We built the
following components and systems:
• Receiver to USB Adaptor. We created a compact
USB receiver module for connecting the Nike+iPod
receiver to a computer via USB. Our module does not
require any modiﬁcation to the Nike+iPod receiver;
see Figure 3b, and consists of a female iPod connec-
tor [23] and a serial-to-USB board utilizing the FTDI
FT2232C chipset [14]. We connected the serial pins
and power pins of the iPod connector to the appro-
priate pins of the FT2232C board. When this module
is connected to a computer, the receiver is then pow-
ered and a USB serial port is made available for our
software to communicate with the receiver. With the
receiver attached, this package is approximately 3cm
x 3cm x 2cm.
We also created a windows serial communications
tool for interfacing with the Nike+iPod Receiver using
our adapter. Our tool can detect the UIDs of nearby
Nike+iPod sensors and transmit those UID readings,
a timestamp, and latitude and longitude information
to a back-end SQL server for post-processing; the lat-
itude and longitude are currently set manually. Op-
tionally, when a sensor is detected, this application can
take photographs with a USB camera and upload those
photographs to the SQL server along with the UID in-
formation. This application can also SMS or email
sensor information to pre-speciﬁed phone numbers or
email addresses.
• Gumstixs. We also implemented a cheap Nike+iPod
surveillance device using the Linux-based gumstix
computers. This module consists of an unmodi-
ﬁed $29 Nike+iPod receiver, a $109 gumstix connex
200xm motherboard, a $79 wiﬁstix, a $27.50 gum-
stix breakout board, and a $2.95 female iPod connec-
tor. The Nike+iPod receiver is connected directly to
the gumstix’s serial port, thereby eliminating the need
for our serial-to-USB adaptor. The assembled pack-
age is 8cm x 2.1cm x 1.3cm and weighs 1.1 ounces;
see Figure 3a.
Our gumstix-based module runs a 280 line C
program that communicates with the Nike+iPod re-
ceiver over a serial port and that uses the wiﬁstix
802.11 wireless module to wirelessly transmit real-
time surveillance data to a centralized back-end
server. The real-time reporting capability allows the
gumstix module to be part of a larger real-time surveil-
lance system. If an adversary does not need this real-
time capability, then the adversary can reduce the cost
of this module by omitting the wiﬁstix.
• A Distributed Surveillance System. To illustrate the
power of aggregating sensor information from mul-
tiple physical locations, we created a GoogleMaps-
based web application. Our web application uses and
displays the sensor event data uploaded to a central
SQL server from multiple data sources. The data
sources may be our serial communication tool or our
gumstix application.
In real-time mode, sensors’ UIDs are overlayed on
a GoogleMaps map at the location the sensor is seen.
When the sensor is no longer present at that location,
the UID disappears. Optionally, digital pictures taken
by a laptop when the sensor is ﬁrst seen can be over-
layed instead of the UID. In history mode, the web
application allows the user to select a timespan and
show all sensors recorded in that timespan. For exam-
ple, one could select the timespan between noon and
6pm on a given day; all sensors seen that afternoon
will be overlayed on the map at the appropriate loca-
tion.
This application would allow many individuals to
track people of interest. An attacker might also use
this tool to establish patterns of presence. If many at-
tackers with receivers cooperated, this software and
website would allow the tracking and correlation
of many people with Nike+iPod sensors. Among
the related research, demonstration, and commercial
bluetooth- and 802.11 wireless-based tracking sys-
tems (e.g., [6, 8, 10, 17, 31, 37, 39]), we are unaware
of any other location-based surveillance system that
goes as far as plotting subjects’ locations on a map in
real-time.
We also developed two other surveillance devices — one
which uses a third-generation iPod and iPod Linux to de-
tect nearby Nike+iPod sensors, and the other of which
uses a second-generation Intel Mote (iMote2) to detect
nearby Nike+iPod sensors and beams the recorded infor-
mation to a paired Microsoft SPOT watch via bluetooth.
For brevity, and since the above applications provide a
survey of the applications that we developed, we omit
discussion of our iPod Linux- and iMote2-based appli-
cations here.
3.5 Privacy-Preserving Alternatives
Our results show that, despite public awareness of the
importance of location privacy and untrackability, major
new products are still being introduced without strong
privacy guards. We consider this situation unfortunate
since in many cases it is technically possible to signiﬁ-
USENIX Association
16th USENIX Security Symposium
65
cantly improve consumer privacy.
Exploiting (Largely) Static Associations. Consider the
typical usage scenario for the Nike+iPod Sport Kit. In
the common case, we expect that once a user purchases
a Nike+iPod Sport Kit, he or she will rarely use the sen-
sor from that kit with the receiver from a different kit.
This means that the sensor and the receiver could have
been pre-programmed at the factory with a shared secret
cryptographic key. By having the sensor encrypt each
broadcast message with this shared key, the Nike+iPod
designers could have addressed most of our privacy con-
cerns about the Nike+iPod application protocol; there
may still be information leakage through the underlying
radio hardware, which would have to be dealt with sep-
arately. If the manufacturer decides a sensor from one
kit should be used with the receiver from a separate kit,
then several options still remain. For example, under the
assumption that one will only rarely want to use a sensor
from one kit with a receiver from another, the crypto-
graphic key could be written on the backs of the sensors,
and a user could manually enter that key into their iPods
or computers before using that new sensor. Alternately,
the sensor could have a special button on it that, when
pressed, causes the sensor to actually broadcasts a cryp-
tographic key for some short duration of time.
Un-Sniffable Unique Identiﬁers. Assume now that
both the sensor and the receiver in a Nike+iPod Sport Kit
are preprogrammed with the same shared 128-bit cryp-
tographic key K. One design approach would be for
the sensor to pre-generate a new pseudorandom 128-bit
value X during the one-second idle time between broad-
casts. Although the sensor could generate X using phys-
ical processes, we suggest generating X by using AES
in CTR mode with a second, non-shared 128-bit AES
key K 0. Also during this one-second idle time between
broadcast, the sensor could pre-generate a keystream
S using AES in CTR mode, this time with the initial
counter X and the shared key K. Finally, when the
sensor wishes to send a message M to the correspond-
ing receiver, the sensor would actually send the pair
(X, M ⊕ S), where “⊕” denotes the exclusive-or oper-
ation. Upon receiving a message (X, Y ), the receiver
would re-generate S from X and the shared key K, re-
cover M as Y ⊕ S, and then accept M as coming from
the paired sensor if M contains the desired UID. This
construction shares commonality with the randomized
hash lock protocol for anonymous authorization [42] in
which an RFID tag reader must try all tag keys in order
to determine the identity of an RFID tag; in our case a
receiver must attempt to decrypt all received messages,
even when the messages are intended for other receivers.
While it is rather straightforward to argue that this con-
struction provides privacy at the application level against
passive adversaries (by leveraging Bellare et al.’s [4]
provable security results for CTR mode encryption), we
do acknowledge that this construction may not fully pro-
vide all desired target security properties against active
adversaries. Furthermore, we acknowledge that there are
ways of optimizing the approach outlined above, and that
the above approach may affect the battery life, manufac-
turing costs, and usability of the Nike+iPod Sport Kit.
Use an On-Off Switch. One natural question to ask is
whether a sufﬁcient privacy-protection mechanism might
simply be to place on-off switches directly on all mobile
personal devices, like the Nike+iPod Sport Kit sensors.
Unfortunately, this approach by itself will not protect
consumers’ privacy while the devices are in operation.
Additionally, we believe that it is unrealistic to assume
that most users will actually turn their devices off when
not in use, especially as the number of such personal de-
vices increases over time.
3.6 Challenges
While the above discussion clearly shows that it is pos-
sible to signiﬁcantly improve upon the privacy proper-
ties of the current Nike+iPod Sport Kits, from a broader
perspective the solutions advocated above are somewhat
unsatisfying. For example, how does one generalize the
above recommendations (or derive new recommenda-
tions) for wireless devices that do not have largely static
pairings, such as commercial 802.11 wireless hot spots
or the dynamic peer-to-peer pairings of the Zune, where
one may wish to allow for ad hoc network formations but
still restrict access to only authorized devices? And how
does one reduce the extra costs (e.g., battery lifetime,
packet size, the need to decrypt packets intended to other
parties), to environments that cannot afford the extra re-
source requirements? If we wish to provide a strong level
of location privacy for future UbiComp devices, we need
to develop mechanisms for handling such broad classes
of situations.
The challenge, therefore, is to provide anonymous
communications for wireless devices in more diverse and
potentially ad hoc environments. This challenge is not
unique to us — indeed, others have also considered this
problem in other restricted contexts [16, 21, 33, 42, 28,
33, 44] — but bears repeating given the potential com-
plexities; e.g., while we have focused this discussion on
unique identiﬁers, which by themselves are not trivial to
address, application characteristics and other side chan-
nel information, which can survive encryption [30, 45],
might facilitate the tracking and identiﬁcation of individ-
uals.
66
16th USENIX Security Symposium
USENIX Association
4 Zunes: Challenges with Managing Ad
4.2 Circumventing the Zune Blocking
Hoc Mobile Social Interactions
Mechanism
The Microsoft Zune portable media player is one of the
ﬁrst portable media devices to include wireless capabil-
ity for the purpose of sharing media. Zune owners can
enter a coffee shop, turn on their Zune, and discover
nearby Zunes. Once a nearby Zune is discovered, users
can send music or photos to the nearby Zune. Discov-
ery and sharing are meant to facilitate social interaction;
hence the Zune slogan: “Welcome to the Social.” Like
the Nike+iPod Sport Kit and SlingBox, the Zune repre-
sents a gadget pioneering a new application space and
represents a central example of our third class of Ubi-
Comp devices geared toward catalyzing new social in-
teractions. However, we demonstrate that there are chal-
lenges with protecting users’ privacy and safety while
simultaneously providing ad hoc communications with
strangers.
4.1 Zune Description
We focus this description on how the Zune media player
allows users to control their social interactions. Consider
a scenario consisting of two users, Alice and Bob, and as-
sume that Alice and Bob respectively name their Zunes
AliceZune and BobZune; Alice and Bob choose these
names when they conﬁgure their Zune. If Bob wishes to
utilize the Zune social system, to see who’s around, he
would ﬁrst use the Zune interface navigate to the “com-
munity – nearby devices” menu. He will then see the
names of all discoverable nearby Zunes and, depending
on the options chosen by the owners of the other Zunes,
the names of the songs that his neighbors are listening
to or their state (online/busy). If Bob wishes to share a
song or picture with his neighbors, he must ﬁrst select the
song or picture and then select the “send” option. The
Zune will then show Bob the names of nearby Zunes,
and Bob can then send the song or picture to a neighbor
of his choosing, in this case AliceZune. The interface
on Alice’s Zune asks whether Alice wishes to accept a
song from BobZune; no additional information about the
song or picture is included in the prompt. Alice has two
choices: to accept the content or to not accept the con-
tent. If Alice accepts the song and later decides that she
would like to prevent Bob from ever sending her a song
in the future, she can navigate to her Zune’s “community
– nearby devices” menu, select BobZune, and then select
the “block” option.
Microsoft appears to envision a world where Zune own-
ers wish to receive interesting content from people they
have never met before. Of course, these users also wish
to avoid being bothered by people or companies that
send inappropriate or annoying content, hence the Zune’s
blocking feature. Such a situation is not purely hypothet-
ical; indeed, there has recently been media reports about
advertisers beaming unsolicited content to users with dis-
coverable Bluetooth devices [7].
Unfortunately, we ﬁnd that a malicious adversary
could circumvent the Zune blocking feature, and we
have veriﬁed this in practice. The critical issue revolves
around how blocking is actually implemented on the
Zunes. When Bob sends a song or image to Alice, Al-
ice is only given the option of accepting or denying the
song or image; she is not given the option of blocking
the sender. Then, after playing the song or viewing the
image, if Alice wishes to block Bob’s Zune in the future,
she must navigate to the “community – nearby devices”
menu and actively choose to block BobZune.
The crux of the problem is that Alice will not be able
to block Bob’s Zune if BobZune is no longer nearby or
discoverable.
Disappearing attack Zune. A simple method to circum-
vent the Zune block feature is, after beaming an inap-
propriate image, to turn the wireless on the originating
Zune off. Since Alice may remember the name of Bob’s
Zune, and thereby simply deny messages from BobZune
in the future, Bob can change the name of his Zune
before trying to beam Alice additional content. Also,