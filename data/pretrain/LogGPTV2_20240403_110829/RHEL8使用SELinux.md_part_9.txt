-   ["以 SELinux
    限制的用户身份添加新用户"一节](#managing-confined-and-unconfined-users_using-selinux.html#adding-a-new-user-as-an-selinux-confined-user_managing-confined-and-unconfined-users "以 SELinux 限制的用户身份添加新用户"){.xref}
    .
-   [第 2 章 *更改 SELinux
    状态和模式*](#changing-selinux-states-and-modes_using-selinux.html "第 2 章 更改 SELinux 状态和模式"){.xref}
    .
-   [第 5 章 *故障排除与 SELinux
    相关的问题*](#troubleshooting-problems-related-to-selinux_using-selinux.html "第 5 章 故障排除与 SELinux 相关的问题"){.xref}
    .
-   [CLI 知识库中的基本 SELinux
    故障排除文章](https://access.redhat.com/articles/2191331){.link}。
:::
:::
::: section
::: titlepage
# []{#using-multi-level-security-mls_using-selinux.html#proc_changing-file-sensitivity-in-mls_using-multi-level-security-mls}在 MLS 中更改文件敏感度 {.title}
:::
在 MLS SELinux
策略中，用户只能在自己的敏感度级别修改文件。这是为了防止任何高度敏感的信息接触较低水平的用户，同时防止低保留性用户创建高敏感文件。不过，管理员可以手动增加文件的分类，例如，要在更高级别处理的文件。
::: itemizedlist
**先决条件**
-   SELinux 策略被设置为 `mls`{.literal}。
-   SELinux 模式设置为强制模式。
-   您有安全管理权限，这意味着您被分配给以下任一权限：
    ::: itemizedlist
    -   `secadm_r`{.literal} 角色。
    -   如果启用了 `sysadm_secadm`{.literal} 模块，则使用
        `sysadm_r`{.literal} 角色。`sysadm_secadm`{.literal}
        模块默认启用。
    :::
-   已安装 `policycoreutils-python-utils`{.literal} 软件包。
-   分配给任何许可级别的用户。如需更多信息，请参阅
:::
["在 MLS
中建立用户许可"一节](#using-multi-level-security-mls_using-selinux.html#establishing-user-clearance-in-mls_using-multi-level-security-mls "在 MLS 中建立用户许可"){.xref}
.
\+ 在这个示例中，`User1`{.literal} 具有法定级别 `s1`{.literal}。\*
分配有分类级别的文件，并可访问该文件。
\+ 在这个示例中，`/path/to/file`{.literal} 具有分类级别 `s1`{.literal}。
::: orderedlist
**流程**
1.  检查文件的分类级别：
    ``` screen
    # ls -lZ file
    -rw-r-----. 1 User1 User1 user_u:object_r:user_home_t:s1 0 12. Feb 10:43 /path/to/file
    ```
2.  更改文件的默认分类级别：
    ``` screen
    # semanage fcontext -a -r s2 /path/to/file
    ```
3.  强制重新标记文件的 SELinux 上下文：
    ``` screen
    # restorecon -F -v /path/to/file
    Relabeled /path/to/file from root:object_r:user_home_t:s0 to user_u:object_r:user_home_t:s2
    ```
:::
::: orderedlist
**验证**
1.  检查文件的分类级别：
    ``` screen
    # ls -lZ file
    -rw-r-----. 1 User1 User1 user_u:object_r:user_home_t:s2 0 12. Feb 10:53 /path/to/file
    ```
2.  可选：验证低clearance 用户无法读取该文件：
    ``` screen
    $ cat /path/to/file
    cat: file: Permission denied
    ```
:::
::: itemizedlist
**其它资源**
-   ["在 MLS
    中建立用户许可"一节](#using-multi-level-security-mls_using-selinux.html#establishing-user-clearance-in-mls_using-multi-level-security-mls "在 MLS 中建立用户许可"){.xref}
    .
:::
:::
:::
[]{#writing-a-custom-selinux-policy_using-selinux.html}
::: chapter
::: titlepage
# []{#writing-a-custom-selinux-policy_using-selinux.html#writing-a-custom-selinux-policy_using-selinux}第 7 章 编写自定义 SELinux 策略 {.title}
:::
本节介绍了如何编写和使用可让您运行受 SELinux
限制的应用程序的自定义策略。
::: section
::: titlepage
# []{#writing-a-custom-selinux-policy_using-selinux.html#custom-selinux-policies-and-related-tools_writing-a-custom-selinux-policy}自定义 SELinux 策略和相关工具 {.title}
:::
SELinux 安全策略是 SELinux 规则的集合。策略是 SELinux 的核心组件，它由
SELinux 用户空间工具载入内核。内核强制使用 SELinux
策略来评估系统中的访问请求。默认情况下，SELinux
拒绝所有请求，但与载入策略中指定的规则对应的请求除外。
每个 SELinux 策略规则都描述了进程和系统资源间的交互：
``` screen
ALLOW apache_process apache_log:FILE READ;
```
您可以阅读这个示例规则： [ *[**Apache**]{.strong} 进程可
[**读取**]{.strong}它的[**日志文件**]{.strong}。*]{.emphasis}在此规则中，`apache_process`{.literal}
和 `apache_log`{.literal} 是 [**labels**]{.strong}。SELinux
安全策略为进程分配标签并定义与系统资源的关系。这样，策略可将操作系统实体映射到
SELinux 层。
SELinux 标签作为文件系统的扩展属性保存，如 `ext2`{.literal}。您可以使用
`getfattr`{.literal} 实用程序或 `ls -Z`{.literal} 命令列出它们，例如：
``` screen
$ ls -Z /etc/passwd
system_u:object_r:passwd_file_t:s0 /etc/passwd
```
其中 `system_u`{.literal} 是 SELinux 用户，`object_r`{.literal} 是
SELinux 角色的示例，`passwd_file_t`{.literal} 是 SELinux 域。
`selinux-policy`{.literal} 软件包提供的默认 SELinux 策略包含作为 Red Hat
Enterprise Linux 8
一部分且由软件仓库中软件包提供的应用程序和守护进程规则。没有被这个发布策略中的规则描述的应用程序不会被
SELinux 限制。要更改它，您必须使用包含额外定义和规则的 policy
模块来修改策略。
在 Red Hat Enterprise Linux 8 中，您可以查询安装的 SELinux 策略并使用
`sepolicy`{.literal} 工具生成新策略模块。`sepolicy`{.literal}
生成的脚步和策略模块始终包含一个使用 `restorecon`{.literal}
工具的命令。这个工具是修复文件系统中所选部分问题的基本工具。
::: itemizedlist
**其它资源**
-   `sepolicy(8)`{.literal} 和 `getfattr(1)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#writing-a-custom-selinux-policy_using-selinux.html#creating-and-enforcing-an-selinux-policy-for-a-custom-application_writing-a-custom-selinux-policy}为自定义应用程序创建并强制 SELinux 策略 {.title}
:::
这个示例步骤提供了通过 SELinux
保护简单守护进程的步骤。将守护进程替换为您自定义应用程序，并根据应用程序和安全策略的要求修改示例中的规则。
::: itemizedlist
**先决条件**
-   `policycoreutils-devel`{.literal}
    软件包及其依赖软件包会安装在您的系统中。
:::
::: orderedlist
**流程**
1.  在本例中，准备一个简单的守护进程，它打开
    `/var/log/messages`{.literal} 文件进行写操作：
    ::: orderedlist
    1.  创建一个新文件，然后在您选择的文本编辑器中打开：
        ``` screen
        $ vi mydaemon.c
        ```
    2.  插入以下代码：
        ``` programlisting
        #include 
        #include 
        FILE *f;
        int main(void)
        {
        while(1) {
        f = fopen("/var/log/messages","w");
                sleep(5);
                fclose(f);
            }
        }
        ```
    3.  编译文件：
        ``` screen
        $ gcc -o mydaemon mydaemon.c
        ```
    4.  为您的守护进程创建一个 `systemd`{.literal} 单元文件：
        ``` screen
        $ vi mydaemon.service
        [Unit]
        Description=Simple testing daemon
        [Service]
        Type=simple
        ExecStart=/usr/local/bin/mydaemon
        [Install]
        WantedBy=multi-user.target
        ```
    5.  安装并启动守护进程：
        ``` screen
        # cp mydaemon /usr/local/bin/
        # cp mydaemon.service /usr/lib/systemd/system
        # systemctl start mydaemon
        # systemctl status mydaemon
        ● mydaemon.service - Simple testing daemon
           Loaded: loaded (/usr/lib/systemd/system/mydaemon.service; disabled; vendor preset: disabled)
           Active: active (running) since Sat 2020-05-23 16:56:01 CEST; 19s ago
         Main PID: 4117 (mydaemon)
            Tasks: 1
           Memory: 148.0K
           CGroup: /system.slice/mydaemon.service
                   └─4117 /usr/local/bin/mydaemon
        May 23 16:56:01 localhost.localdomain systemd[1]: Started Simple testing daemon.
        ```
    6.  检查新守护进程是否没有被 SELinux 限制：
        ``` screen
        $ ps -efZ | grep mydaemon
        system_u:system_r:unconfined_service_t:s0 root 4117    1  0 16:56 ?        00:00:00 /usr/local/bin/mydaemon
        ```
    :::
2.  为守护进程生成自定义策略：
    ``` screen
    $ sepolicy generate --init /usr/local/bin/mydaemon
    Created the following files:
    /home/example.user/mysepol/mydaemon.te # Type Enforcement file
    /home/example.user/mysepol/mydaemon.if # Interface file
    /home/example.user/mysepol/mydaemon.fc # File Contexts file
    /home/example.user/mysepol/mydaemon_selinux.spec # Spec file
    /home/example.user/mysepol/mydaemon.sh # Setup Script
    ```
3.  使用上一命令创建的设置脚本使用新策略模块重建系统策略：
    ``` screen
    # ./mydaemon.sh
    Building and Loading Policy
    + make -f /usr/share/selinux/devel/Makefile mydaemon.pp
    Compiling targeted mydaemon module
    Creating targeted mydaemon.pp policy package
    rm tmp/mydaemon.mod.fc tmp/mydaemon.mod
    + /usr/sbin/semodule -i mydaemon.pp
    ...
    ```
    请注意，设置脚本使用 `restorecon`{.literal}
    命令重新标记文件系统的对应部分：
    ``` screen
    restorecon -v /usr/local/bin/mydaemon /usr/lib/systemd/system
    ```
4.  重启守护进程，检查它现在被 SELinux 限制：
    ``` screen
    # systemctl restart mydaemon
    $ ps -efZ | grep mydaemon
    system_u:system_r:mydaemon_t:s0 root        8150       1  0 17:18 ?        00:00:00 /usr/local/bin/mydaemon
    ```
5.  因为守护进程现在被 SELinux 限制，所以 SELinux 也会阻止它访问
    `/var/log/messages`{.literal}。显示对应的拒绝信息：
    ``` screen
    # ausearch -m AVC -ts recent
    ...
    type=AVC msg=audit(1590247112.719:5935): avc:  denied  { open } for  pid=8150 comm="mydaemon" path="/var/log/messages" dev="dm-0" ino=2430831 scontext=system_u:system_r:mydaemon_t:s0 tcontext=unconfined_u:object_r:var_log_t:s0 tclass=file permissive=1
    ...
    ```
6.  您还可以使用 `sealert`{.literal} 工具获取更多信息：
    ``` screen
    $ sealert
    SELinux is preventing mydaemon from open access on the file /var/log/messages.
      Plugin catchall (100. confidence) suggests   *
    If you believe that mydaemon should be allowed open access on the messages file by default.
    Then you should report this as a bug.
    You can generate a local policy module to allow this access.
    Do
    allow this access for now by executing:
    # ausearch -c 'mydaemon' --raw | audit2allow -M my-mydaemon
    # semodule -X 300 -i my-mydaemon.pp
    Additional Information:
    Source Context                system_u:system_r:mydaemon_t:s0
    Target Context                unconfined_u:object_r:var_log_t:s0
    Target Objects                /var/log/messages [ file ]
    Source                        mydaemon