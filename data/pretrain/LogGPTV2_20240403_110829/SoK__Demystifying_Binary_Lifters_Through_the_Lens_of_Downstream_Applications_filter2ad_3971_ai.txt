gcc -O3
clang -O0
clang -O3
#goto
LOC
#goto
LOC
#goto
LOC
#goto
LOC
clang
NA
NA
NA
NA
3188.4
44.3
6589.9
112.9
McSema
15479.3
282.7
8023.2
595.1
6026.5
247.6
9367.0
554.6
RetDec
1661.3
142.3
3766.4
374.3
1709.6
168.7
8971.5
276.6
BinRec
6661.4(12978)
245824.2(478924.3)
1820(20078.2)
61677(680419.3)
6344.1(27894.4)
70947.1(311947.6)
1635(3448.7)
36256.7(76476.1)
IDA-Pro
856.9
68.4
5304.7
122.1
865.8
65.2
4016.9
109.8
Ghidra
332.3
60.0
2554.9
90.3
653.8
61.4
2211.2
85.9
implementation [45] delivers basic block-level matching. Bin-
Diff also performs a program-wide comparison. To launch
a fair comparison, we design the following task: given a
pair of POJ-104 programs p1 and p2 written to solve the
same programming assignment, a program p3 for an irrelevant
assignment is randomly selected. We then use DeepBinDiff
to compare p1 with p2 and p3, respectively. Let the number
of matched basic blocks be bb1,2 and bb1,3, we deem a
correct match where bb1,2 ≥ bb1,3, and vice versa. For our
discriminability model (the RetDec column) and BinDiff, we
check whether the program-wise similarity between p1 and
p2 is higher than that of p1 and p3. The accuracy scores are
reported in Table XV. We launch this evaluation on the test
split of POJ-104, whereas the discriminability model is trained
using RetDec-lifted IR code over the POJ-104 training split.
We compute and report the accuracy scores in Table XV.
RetDec and DeepBinDiff outperform BinDiff for most
settings, and RetDec manifests relatively higher accuracy
compared with DeepBinDiff. We interpret the results as
reasonable: one needs to train our discriminability model
whereas the released implementation of DeepBinDiff per-
forms on-the-ﬂy training over a pair of binary code. The
accuracy of DeepBinDiff can be further improved given
that a pre-trained model is used in the DeepBinDiff paper.
We also note that most binary difﬁng works [46], [44], [92]
explore a potentially easier task: the comparison of a pair of
executables compiled from the same program using different
compilation settings or different versions. In contrast,
the
experiment we perform follows the setting in [26], [82] to
compare executables of two programs implementing the same
programming assignment.
We conclude that DeepBinDiff is generally suitable
for daily security analysis and binary difﬁng tasks, given
its promising performance [46] and convenience. For heavy-
weight program-wise binary difﬁng, another presumably
promising option is to employ binary lifters and LLVM-level
representation learning tools like ncc.
C. Decompilation
We measure the decompilation quality of (commercial)
decompilers and compare the results with our ﬁndings in
Sec. VI-D. We use IDA-Pro and Ghidra, two popular commer-
cial and free decompilers, to decompile executables into source
code. Table XIV reports the evaluation results. Note that
since our cross-compiler and cross-optimization evaluation in
Sec. VIII has discussed and cross-compared different lifters in
supporting decompilation, this section only compares RetDec
with two (commercial) binary decompilers.
As expected, both IDA-Pro and Ghidra perform very well
in terms of C/C++ decompilation. Although in the gcc -O3
setting, RetDec has less #goto than IDA-Pro, the C code
decompiled by IDA-Pro/Ghidra manifests generally better
structuredness for most settings. This is reasonable; IDA-Pro
is a mature commercial product, and Ghidra is developed
by NSA with vast resources. The engineering quality of the
RetDec decompiler has been reported to be slightly lower
(containing more bugs) than that of IDA-Pro and Ghidra [77].
Table XIV and our study in Sec. VI-D show that lifted IR and
compiled IR exhibit comparable support for decompilation.
Studies in this section show that LLVM IR-to-C decompilation
requires further improvement. Nevertheless, the LLVM IR-to-
C approach is a free and highly extensible solution based on the
LLVM ecosystem. In contrast, it appears that the customized
IR of Ghidra would be difﬁcult (or impossible) to modify [5].
BINARY LIFTING RESULTS FOR THE ARM64 SETTING. WE PRESENT
TOTAL TEST CASES AND THE NUMBER OF FAILED LIFTING CASES.
TABLE XVI
Dataset
Total test cases
RetDec
McSema
SVF
84
0
0
POJ-104
49,058
0
28
SPEC
9
0
0
BINARY LIFTING RESULTS FOR THE CROSS-COMPILER AND OPTIMIZATION
SETTING. WE PRESENT TOTAL TEST CASES AND FAILED LIFTING CASES.
TABLE XVII
gcc -O3
gcc -O0
clang -O3
Dataset
Total test cases
RetDec
McSema
mctoll
BinRec
Total test cases
RetDec
McSema
mctoll
BinRec
Total test cases
RetDec
McSema
mctoll
BinRec
POJ-104
49,275
205
35
28,185
18.651
49,275
60
181
33,283
20,741
49,154
23
33
34,283
15,079
SPEC
9
2
3
9
4
9
1
0
9
3
9
1
4
9
5
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:56:18 UTC from IEEE Xplore.  Restrictions apply. 
1118
D. Binary Lifting
Table XVI reports binary lifting results in accordance with
the cross-platform evaluation in Sec. VII. McSema has a
few (less than 1%) lifting failures in the POJ-104 test cases.
Similarly, Table XVII reports the binary lifting results in
accordance with the cross-compiler/optimization evaluation in
Sec. VIII. Again, mctoll cannot process executable compiled
from C++ code, and therefore, it fails to lift a large number of
POJ-104 cases. It also fails to lift all SPEC test programs.
We have reported our ﬁndings to the mctoll developers.
RetDec and McSema perform generally well by making
fewer lifting errors.
Note that when launching cross-compiler and cross-
optimization evaluation, we use gcc (ver. 7.5.0) whereas
in the BinRec paper, gcc (ver. 4.8.4) is evaluated. We
ﬁnd a number of opcodes that are not supported by the
current implementation of BinRec, which explains the higher
lifting failures of BinRec for the gcc cases. In comparison,
BinRec has only 9,668 failures for clang (-O0) compiled
binary code (Table V). Also, when lifting POJ-104 programs,
we set a shorter timeout threshold (2 minutes), which induces
more cases that cannot be ﬁnished within this threshold.
Nevertheless, our ﬁndings in Sec. VIII should not be affected
given that we still successfully lifted over 20K executables for
each compilation setting.
ENHANCING POINTER ANALYSIS RESULTS OF RE TDE C.
TABLE XVIII
MustAlias
MayAlias
NoAlias
RetDec
RetDec + Debin
RetDec + Debin+
RetDec + debug info
RetDec + manual ﬁx
0.0%
0.0%
57.1%
71.4%
100.0%
0.0%
0.0%
100.0%
100%
100.0%
88.9%
88.9%
94.4%
94.4%
100.0%
E. Pointer Analysis Enhancement
Overall, pointer analysis has the lowest accuracy of the three
downstream applications evaluated in Sec. VI and Sec. VII,
As reported in Table VII, variable types primarily contribute
to the correctness of pointer analysis. Hence at this step, we
ﬁrst use binary code with debug information available (using
-g option when compiling with clang) and explore whether
pointer analysis results can be improved. The ﬁfth row of Ta-
ble XVIII reports the evaluation results. RetDec leverages the
debug information to reﬁne the recovered variables, variable
types, and function prototypes. This can effectively promote
the pointer analysis results. On the other hand, our manual
which reveals a considerable gap between the performance
of compiled IR code and lifted IR code. In contrast, binary
lifters, particularly RetDec and mctoll, exhibit satisfactory
discriminability analysis and C decompilation accuracy, which
is close to compiled IR code. This section explores practical
strategies to enhance the accuracy of pointer analysis. We use
the 16 ﬁxable cases identiﬁed in the “manual ﬁx” conducted in
Sec. VI-B (see Table VII) and focus on enhancing RetDec,
as it outperforms other lifters.
comparison between the ﬁfth row and the last row (manual
ﬁx) shows that RetDec still makes considerable errors in
recognizing global variables (even with the presence of debug
information and symbol tables). Considering the following C
statement and its corresponding lifted IR statement:
int *p = &x; // p and x are both global var.
@p = i32* inttoptr (i32 134520892 to i32*)
where 134520892 is the memory address of x in assembly.
Address 134520892 was not symbolized into a LLVM local
variable representing x. We conﬁrm that all global pointer
initialization (following the above pattern) are ill-handled by
RetDec, incurring errors in the ﬁfth row of Table XVIII. We
have reported this bug to the RetDec developers.
Debug and symbol information in stripped executable can
be recovered by Debin [59]. Debin recognizes variables
with a randomized tree classiﬁer and employs a probabilistic
graphical model to make joint predictions. We reuse the author
released Debin pre-trained on x86 executables to predict
debug and symbol information on stripped executable. We then
re-run SVF on the enhanced binary code. Unfortunately, as
shown in the third row of Table XVIII, Debin can barely
enhance pointer analysis (we have excluded false positives).
We ﬁnd that for the SVF test cases, Debin is unable to
correctly recover function prototypes. We further augment
the output of Debin, by manually ﬁxing all the function
argument types and re-running SVF. As a result, the local
variables and their types are recovered by Debin, while
function prototypes are recovered with our manual efforts. The
fourth row (Debin+) reports the evaluation results. Debin
shows promising accuracy in recovering local variables and
types; our manual inspection shows that the LLVM IR code
enhanced by Debin is close to directly lifting binary code
with debug information available. Overall, we interpret that
study in this section sheds light on practical solutions to
enhance the quality of lifted IR code, by ﬁrst using (and
augmenting) debug information recovery tools.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:56:18 UTC from IEEE Xplore.  Restrictions apply. 
1119