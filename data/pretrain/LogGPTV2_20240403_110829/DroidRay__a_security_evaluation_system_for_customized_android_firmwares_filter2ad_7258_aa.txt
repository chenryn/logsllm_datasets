title:DroidRay: a security evaluation system for customized android firmwares
author:Min Zheng and
Mingshen Sun and
John C. S. Lui
DroidRay: A Security Evaluation System for Customized
Android Firmwares
Min Zheng, Mingshen Sun, John C.S. Lui
Computer Science & Engineering Department
The Chinese University of Hong Kong
ABSTRACT
Android mobile devices are enjoying a lion’s market share in
smartphones and mobile devices. This also attracts malware
writers to target the Android platform. Recently, we have
discovered a new Android malware distribution channel: re-
leasing malicious ﬁrmwares with pre-installed malware to the
wild. This poses signiﬁcant risk since users of mobile de-
vices cannot change the content of the malicious ﬁrmwares.
Furthermore, pre-installed applications have “more permis-
sions” (i.e., silent installation) than other legitimate mobile
apps, so they can download more malware or access users’
conﬁdential information.
To understand and address this new form of malware dis-
tribution channel, we design and implement “DroidRay”: a
security evaluation system for customized Android ﬁrmwares.
DroidRay uses both static and dynamic analyses to evalu-
ate the ﬁrmware security on both the application and system
levels. To understand the impact of this new malware dis-
tribution channel, we analyze 250 Android ﬁrmwares and
24,009 pre-installed applications. We reveal how the mali-
cious ﬁrmware and pre-installed malware are injected, and
discovered 1,947 (8.1%) pre-installed applications have sig-
nature vulnerability and 19 (7.6%) ﬁrmwares contain pre-
installed malware. In addition, 142 (56.8%) ﬁrmwares have
the default signature vulnerability, ﬁve (2.0%) ﬁrmwares
contain malicious hosts ﬁle, at most 40 (16.0%) ﬁrmwares
have the native level privilege escalation vulnerability and
at least 249 (99.6%) ﬁrmwares have the Java level privi-
lege escalation vulnerability. Lastly, we investigate a real-
world case of a pre-installed zero-day malware known as
CEPlugnew, which involves 348,018 infected Android smart-
phones, and we show its degree and geographical penetra-
tion. This shows the signiﬁcance of this new malware distri-
bution channel, and DroidRay is an eﬀective tool to combat
this new form of malware spreading.
1.
INTRODUCTION
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS’14, June 4–6, 2014, Kyoto, Japan.
Copyright 2014 ACM 978-1-4503-2800-5/14/06 ...$15.00.
http://dx.doi.org/10.1145/2590296.2590313.
In the past few years, we have experienced an exponen-
tial growth of mobile devices. Among the popular platforms,
Android is enjoying a lion’s share of mobile market. Accord-
ing to the recent report by the International Data Corpora-
tion (IDC) [13], Android market share in smartphone dom-
inates nearly 80% worldwide during the second quarter of
2013. In addition, sales of smartphones grows another 32.7%
in 2013, and the shipments could exceed 958.8 million units.
According to VR-ZONE [30], US, UK and Japan only con-
tributed 20.5% of the total shipments of smartphones in Q2,
2013, while the major bulk of smartphones (or 79.5%) were
manufactured in countries such as China, India and others.
According to the China Daily [5], shipments of smartphones
on the Chinese mainland hit 18 million in April, 2012, ac-
counting for more than half of the mobile phone market,
with more than 77% of the shipment was contributed by lo-
cal brands targeting mid-end and low-end customers. These
statistics show that there exist a large percentage of “low-
end smartphones” produced by low cost manufacturers in
developing countries and these devices domain the Android
smartphone market. Therefore, the exponential growth of
Android and the abundance of low-end smartphones attract
hackers to develop new ways to distribute malware.
The conventional approach to spread Android malware is
by uploading the malware to Android app markets. How-
ever, with the passage of time, people pay more attention on
malware detection. As of today, nearly all of the app mar-
kets scan their apps before publishing them to the public.
Recently, we have discovered that malware writers are us-
ing new channels to distribute malware: “Malware writers
pay money to manufacturers of low-cost mobile devices to
pre-install malware in their devices, or they release malicious
ﬁrmwares with pre-installed malware to the wild”. Note that
for some manufacturers, their business line is to produce low-
cost smartphones or mobile devices. To improve their sales,
they usually prefer to “pre-install” as many applications as
possible. So with the ﬁnancial oﬀer given by malware writ-
ers and their own business needs, these manufacturers have
the economic incentive to include these applications (even if
some of them are malware) [17] [31]. Figure 1 depicts the
approach to distribute the pre-installed apps in ﬁrmwares.
The manufacturer receives money (and malware) from hack-
ers. Then the manufacturer produces and sales these smart-
phones to customers with these pre-installed malware in the
devices. Finally, malware writers gain control of the vic-
tims’ devices. As an evidence of this form of malware distri-
bution channel, we found that jSMSHider and Oldboot are
malware family which targets custom ﬁrmwares and these
familes were reported by Lookout [15] and Qihoo360 [41].
Another closely related distribution channel which we dis-
covered was that malware writers release ﬁrmwares of mobile
devices on the Internet in order to attract potential manu-
facturers or customers to download. In fact, some low-cost
manufacturers often download ﬁrmwares from the wild and
use them in their production. Of course, these ﬁrmwares
may contain many vulnerabilities and pre-installed malware.
We carried out our investigation and found that there are
many customized ﬁrmwares download sites available on the
Internet (e.g., [22, 32, 16, 7]).
Figure 1: Malicious Android ﬁrmware distribution
The ﬁrmware contains the operating system (e.g., An-
droid kernel) as well as some “pre-installed” mobile appli-
cations. Usually, users of mobile devices cannot change the
content in the ﬁrmwares unless they have the root privi-
lege or they have jailbroken the device.
In addition, pre-
installed applications usually have more permissions than
other mobile applications which are downloaded from vari-
ous sites (e.g., Google Play or other third party markets).
Due to the enhanced permissions, pre-installed applications
can use system-level APIs to perform privileged operations
such as silent installation, which implies they can download
more malware from the wild.
In [12], authors investigate
whether the pre-installed applications have capability leak,
which means that an application can gain access to per-
missions without explicitly requesting them. They reported
that most of these Android devices have more than 100 pre-
installed applications and they pose a high risk of capability
leak. However, their research only focused on the capability
leak detection of pre-installed applications. It is very dan-
gerous that if hackers release some infected ﬁrmwares in the
wild, or include malware in the ﬁrmwares, it is diﬃcult for
users to determine the security level of these pre-installed ap-
plications. Further complicating the situation is that these
pre-installed applications cannot be uninstalled unless users
have the root privilege. In addition, not only can the hackers
add malware in the ﬁrmware, but also modify the Android
system. For example, the hackers can change the iptables to
redirect users’ internet visit or leave some back doors in the
ﬁrmware system for the further actions.
To address the security problems of malicious ﬁrmware
and pre-installed applications, we propose “DroidRay”, a se-
curity evaluation system for customized Android ﬁrmwares.
The system uses both static and dynamic analyses to evalu-
ate the ﬁrmware security on both the application and system
levels. The main contributions of this paper are:
• We design a security evaluation system for customized
Android ﬁrmwares on both the application level and
system level. We study how the malicious ﬁrmwares
and malware are injected into the market. In partic-
ular, we use DroidRay to perform application signa-
ture vulnerability detection and malware detection on
the application level (see Sec. 4). Then it performs
system signature vulnerability detection, network se-
curity analysis, and privilege escalation vulnerability
detection for the customized Android ﬁrmware on the
system level (see Sec. 5).
• We use “DroidRay” to systematically analyze 250 cus-
tomized Android ﬁrmwares and 24,009 pre-installed
applications. On application level, we successfully dis-
covered 1,947 (8.1%) applications have signature vul-
nerability and 19 (7.6%) ﬁrmwares contain pre-installed
malware. On system level, we discovered 142 (56.8%)
ﬁrmwares have the default signature vulnerability, ﬁve
(2.0%) ﬁrmwares contain malicious hosts ﬁle, at most
40 (16.0%) ﬁrmwares have the native level privilege es-
calation vulnerability and at least 249 (99.6%) ﬁrmwares
have the Java level privilege escalation vulnerability
(see Sec. 4, 5).
• To show the inﬂuence of pre-installed Android mal-
ware, we investigate a real world case of a pre-installed
zero-day Android malware known as CEPlugnew, which
involves 348,018 infected Android smartphones. We
investigate the degree of its penetration as well as its
infected geographical regions (see Sec. 6).
The paper is organized as follows: In Section 2, we brieﬂy
overview the background on Android ﬁrmware. Then we dis-
cuss the system design and analysis methodology of DroidRay
in Section 3. In Section 4, we present our systematic study
of 24,009 pre-installed applications to show their security
problems. In Section 5, we present our systematic study of
250 customized Android ﬁrmwares. In Section 6, we present
our detailed analysis of a real world malware to illustrate
the Android malware ecosystem. Related work is given in
Section 7 and Section 8 concludes.
2. BRIEF OVERVIEW OF ANDROID
FIRMWARE
In this paper, Android ﬁrmware refers to a “packed binary
system image” which can be written to a non-volatile stor-
age, say a device’s ﬂash memory. “Flashing” is a process of
writing data to the internal memory on smartphones. Nor-
mally, one needs to ﬂash a ﬁrmware to a smartphone in order
to upgrade (or even downgrade) the system software.
There are two types of ﬁrmwares: (1) ﬁrmware with “re-
covery partition” and, (2) ﬁrmware “without recovery parti-
tion”. The recovery partition can be considered as an alter-
native boot partition which lets the device boot into a re-
covery console for performing advanced recovery and main-
tenance operations. For example, it can perform an update
using the “update.zip” ﬁle on the microSD card. There are
two types of recovery partitions, one is the “oﬃcial recovery
partition”, the other is the “customized recovery partition”.
The oﬃcial recovery partition will check the public key in-
formation of the ﬁrmware. Only the oﬃcial ﬁrmwares can
be ﬂashed into an Android device. The custom recovery
Manufacturer Malware Writer Malware + Money bought bought bought Customer Customer Customer controlled partition does not check whether the public key is oﬃcial or
not, so users can ﬂash third-party ﬁrmwares into Android
devices. Usually, if an Android smartphone has a recovery
partition, users could just download those ﬁrmwares without
recovery partition, and then perform the ﬂashing.
All ﬁrmwares have three core components: (1) the “sys-
tem” folder, (2) the “META-INF” folder and (3) the “boot.img”
ﬁle and several optional components (e.g., the “data” folder).
The “system” folder contains most of the system ﬁles, and
the “/system/app” directory on the Android device is where
the pre-installed applications with system level privilege are
stored. In addition, the “/system” folder is read-only by de-
fault, which means user cannot uninstall the pre-installed
applications unless the user has the root privilege. The
“META-INF” folder contains the installation script and sig-
nature information of the ﬁrmware. Because ﬁrmware’s de-
velopers can create their own installation scripts, they can
put their applications into the “/system/app” folder or other
folders. Malware writers who create malicious ﬁrmwares of-
ten craft a script which can copy pre-installed applications
into “/system/app” folder or “/data/app” folder. Therefore,
the pre-installed apps can be in any sub-directory because
malware writers can inject various installation scripts.
In
order to bypass the malware detection, the malware writer
may place the malware into another folder, or even en-
crypt these applications if necessary. This is the reason why
some pre-installed applications are not stored in the “/sys-
tem/app” folder of the ﬁrmware. This also points to the
weakness of current Android anti-virus software since they
only inspect applications in the /system/app folder. Last
but not least, the “boot.img” is the Linux kernel which is
used in the Android device. This img ﬁle also contains many
initialization scripts for system booting, so the hackers can
perform modiﬁcation in order to hide their malicious intent.
3. SYSTEM DESIGN AND ANALYSIS
METHODOLOGY
DoridRay is a security evaluation system for customized
Android ﬁrmwares. The system uses Android ﬁrmwares as
the input, then the system analyzes both Android ﬁrmwares
as well as pre-installed applications. After the analysis,
DroidRay outputs the analysis report of these ﬁrmwares and
pre-installed applications. In the analysis process, DoridRay
uses both static analysis and dynamic analyses to evaluate
the ﬁrmware security on application level and system level.
The architecture of DroidRay is depicted in Figure 2.
Let us discuss the methodology we use to carry out the
security analysis of various Android ﬁrmwares. The method-
ology can be summarized as the following steps:
• We download and collect ﬁrmwares from diﬀerent An-
droid ﬁrmware forums and websites.
• After we obtain these ﬁrmwares, we use DroidRay to
analyze the conﬁguration ﬁles (e.g., “/system/build.
prop” ﬁle) to obtain the ﬁrmware information. The
information includes ﬁrmware name, product model
and Android version, etc.
• DroidRay uses both static and dynamic methodologies
to extract and analyze the pre-installed applications
in the Android ﬁrmware. Speciﬁcally, we carry out
two forms of security analysis: (a) application signa-
ture vulnerability detection and, (b) malware detec-
tion. The details are presented in Section 4.
• DroidRay uses both static and dynamic methodologies
to analyze the system security of the Android ﬁrmware.
Speciﬁcally, we carry out three forms of security anal-
ysis: (a) system signature vulnerability detection, (b)
network security analysis, and (c) privilege escalation
vulnerability detection. The details are presented in
Section 5.
• DroidRay organizes all the analysis results of systems
and pre-installed applications into the database and
then outputs various reports which are classiﬁed by
the signature, MD5 and package name. This helps
security analysts use DroidRay to quickly identify and
associate malware and vulnerabilities.
To show the eﬀectiveness of our system, we used DroidRay
to perform a large scale security analysis on 250 Android
ﬁrmwares and 24,009 applications. To the best of our knowl-
edge, this is the largest scale of Android ﬁrmware security
analysis reported so far. We downloaded these Android
ﬁrmwares from [22, 16, 36, 19, 29, 7, 4]. The statistics are
summarized in Table 1. Because of the page limit, we put
the full ﬁrmware information at https://www.dropbox.co
m/s/8rrmyqwzlqg3wjw/RomInfo.xls.
Firmware Information
Total ﬁrmwares