# DroidRay: A Security Evaluation System for Customized Android Firmwares

## Authors
Min Zheng, Mingshen Sun, John C.S. Lui  
Computer Science & Engineering Department  
The Chinese University of Hong Kong

## Abstract
Android mobile devices dominate the smartphone and mobile device market, making them a prime target for malware. Recently, a new distribution channel for Android malware has emerged: the release of malicious firmwares with pre-installed malware. This poses significant risks as users cannot modify the content of these firmwares. Pre-installed applications often have elevated permissions, enabling them to download additional malware or access sensitive user data.

To address this threat, we designed and implemented "DroidRay," a security evaluation system for customized Android firmwares. DroidRay uses both static and dynamic analyses to evaluate firmware security at both the application and system levels. We analyzed 250 Android firmwares and 24,009 pre-installed applications, revealing that 1,947 (8.1%) applications had signature vulnerabilities and 19 (7.6%) firmwares contained pre-installed malware. Additionally, 142 (56.8%) firmwares had default signature vulnerabilities, five (2.0%) contained malicious hosts files, up to 40 (16.0%) had native-level privilege escalation vulnerabilities, and at least 249 (99.6%) had Java-level privilege escalation vulnerabilities. We also investigated a real-world case involving the zero-day malware CEPlugnew, which infected 348,018 Android smartphones, demonstrating the severity of this new malware distribution channel. DroidRay is an effective tool for combating this emerging threat.

## 1. Introduction
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.

ASIA CCS'14, June 4â€“6, 2014, Kyoto, Japan.
Copyright 2014 ACM 978-1-4503-2800-5/14/06 ...$15.00.
http://dx.doi.org/10.1145/2590296.2590313.

In recent years, the number of mobile devices has grown exponentially, with Android holding a significant share of the market. According to the International Data Corporation (IDC) [13], Android's market share in smartphones was nearly 80% worldwide in the second quarter of 2013. The growth in smartphone sales, which increased by 32.7% in 2013, resulted in shipments exceeding 958.8 million units. A significant portion of these smartphones, particularly in developing countries like China and India, are low-end devices produced by cost-effective manufacturers. These statistics highlight the prevalence of low-cost Android smartphones, which attract hackers to develop new methods for distributing malware.

Traditionally, Android malware is spread through app markets. However, with increased attention to malware detection, most app markets now scan apps before publication. Recently, we discovered a new malware distribution channel: malware writers pay low-cost device manufacturers to pre-install malware or release malicious firmwares. These manufacturers, driven by financial incentives, often pre-install multiple applications, including malware, to boost sales. Figure 1 illustrates this distribution method.

Figure 1: Malicious Android Firmware Distribution

Pre-installed applications typically have more permissions than those downloaded from app stores, allowing them to perform privileged operations such as silent installation and accessing sensitive information. In [12], researchers found that most Android devices have over 100 pre-installed applications, posing a high risk of capability leaks. However, their study focused only on detecting capability leaks, not on the broader security implications of pre-installed malware. Users cannot easily determine the security of these applications, and they cannot be uninstalled without root access. Hackers can also modify the Android system, such as changing iptables or adding backdoors.

To address these security issues, we developed "DroidRay," a security evaluation system for customized Android firmwares. DroidRay uses both static and dynamic analyses to evaluate firmware security at both the application and system levels. Our main contributions are:

- **Design of a Security Evaluation System**: DroidRay evaluates customized Android firmwares at both the application and system levels. It detects application signature vulnerabilities and malware on the application level, and system signature vulnerabilities, network security issues, and privilege escalation vulnerabilities on the system level.
- **Large-Scale Analysis**: We used DroidRay to analyze 250 customized Android firmwares and 24,009 pre-installed applications. Our findings include 1,947 (8.1%) applications with signature vulnerabilities, 19 (7.6%) firmwares with pre-installed malware, 142 (56.8%) firmwares with default signature vulnerabilities, five (2.0%) with malicious hosts files, up to 40 (16.0%) with native-level privilege escalation vulnerabilities, and at least 249 (99.6%) with Java-level privilege escalation vulnerabilities.
- **Real-World Case Study**: We investigated the zero-day malware CEPlugnew, which infected 348,018 Android smartphones, demonstrating its widespread impact and geographical reach.

The paper is organized as follows: Section 2 provides a brief overview of Android firmware. Section 3 discusses the design and methodology of DroidRay. Sections 4 and 5 present our systematic studies of pre-installed applications and customized Android firmwares, respectively. Section 6 details our analysis of the real-world malware case. Related work is discussed in Section 7, and Section 8 concludes the paper.

## 2. Brief Overview of Android Firmware
Android firmware refers to a packed binary system image that can be written to a non-volatile storage, such as a device's flash memory. Flashing is the process of writing data to the internal memory of a smartphone to upgrade or downgrade the system software.

There are two types of firmwares:
1. **Firmware with Recovery Partition**: This type includes an alternative boot partition that allows the device to boot into a recovery console for advanced operations, such as updating using an "update.zip" file on the microSD card. There are two types of recovery partitions: official and custom. The official recovery partition checks the public key information, allowing only official firmwares to be flashed. The custom recovery partition does not check the public key, allowing third-party firmwares to be flashed.
2. **Firmware without Recovery Partition**: This type does not include a recovery partition and is typically used when the device already has a recovery partition.

All firmwares contain three core components:
1. **System Folder**: Contains most system files, including pre-installed applications with system-level privileges stored in the "/system/app" directory. This folder is read-only by default, preventing users from uninstalling pre-installed applications without root access.
2. **META-INF Folder**: Contains the installation script and signature information. Developers can create custom installation scripts to place applications in various directories.
3. **boot.img File**: Contains the Linux kernel and initialization scripts for system booting, which can be modified by hackers to hide malicious intent.

## 3. System Design and Analysis Methodology
DroidRay is a security evaluation system for customized Android firmwares. It takes Android firmwares as input and analyzes both the firmware and pre-installed applications. The system outputs a detailed analysis report. DroidRay uses both static and dynamic analyses to evaluate firmware security at the application and system levels. The architecture of DroidRay is shown in Figure 2.

Our methodology for analyzing Android firmwares includes the following steps:
1. **Firmware Collection**: Download and collect firmwares from various Android firmware forums and websites.
2. **Firmware Information Extraction**: Use DroidRay to analyze configuration files (e.g., "/system/build.prop") to obtain firmware information, including name, product model, and Android version.
3. **Application Analysis**: Perform static and dynamic analyses to extract and analyze pre-installed applications, focusing on application signature vulnerability detection and malware detection.
4. **System Analysis**: Perform static and dynamic analyses to evaluate system security, focusing on system signature vulnerability detection, network security analysis, and privilege escalation vulnerability detection.
5. **Report Generation**: Organize analysis results into a database and generate reports classified by signature, MD5, and package name, aiding security analysts in quickly identifying and associating malware and vulnerabilities.

We used DroidRay to perform a large-scale security analysis on 250 Android firmwares and 24,009 applications, which, to our knowledge, is the largest such analysis reported to date. The firmwares were downloaded from various sources, and the full firmware information is available at https://www.dropbox.com/s/8rrmyqwzlqg3wjw/RomInfo.xls.

| **Firmware Information** | **Total Firmwares** |
|--------------------------|---------------------|
| Number of Firmwares      | 250                 |

This comprehensive analysis highlights the effectiveness of DroidRay in addressing the security challenges posed by customized Android firmwares.