### 1. Role Assignment and Management

After the installation, roles can be assigned to one or more applications following their definition. By default, a role named `SYSTEM` is assigned to all system applications. Users have the ability to define or delete any additional roles. Consider two applications, A and B, where A is the caller in an Inter-Component Communication (ICC) or needs to access a file created by application B.

**Case 1: Application A with the SYSTEM role.**
- No further action is required since the `SYSTEM` role has full access.

**Case 2: Applications A and B are third-party applications.**
- In this case, a detailed inspection of the roles and permissions is necessary to ensure proper access control.

### 2.2.5 Policy Creation and Management

We propose a model called ARBAC (Attribute-Role-Based Access Control) to create and manage security policies by integrating Role-Based Access Control (RBAC) with Attribute-Based Access Control (ABAC). In ARBAC, the privileges for accessing resources (files, applications, etc.) are dynamically assigned to applications based on attribute values (permissions, roles, etc.) at the kernel level. Similarly, in the middleware, privileges to perform operations (e.g., establishing ICCs) and access to resources (e.g., content of ICCs) are also dynamically assigned based on the attribute values of the applications.

Each policy is encapsulated as an independent atomic policy to ensure compatibility and scalability within ARBAC. The final decision is made by combining all these atomic policies. Policies have different priorities for access control. A single policy can be described as follows:

\[ \text{Policy}_i ::= \{ \text{Rule}_1, \text{Rule}_2, \ldots, \text{Rule}_n, \text{pri}_i \} \]

Where \( n > 0 \), \(\text{Rule}_i\) is an expression composed of attribute values with logical operators, and \(\text{pri}_i\) is the priority of the policy. The final decision is determined by the combine function:

\[ \text{Decision} \leftarrow \text{fcombine} (\text{Policy}_1, \text{Policy}_2, \ldots, \text{Policyn}) \]

### 2.3 Component Interaction

The architecture is illustrated in Figure 2. The following paragraphs describe the interactions among the modules of the framework. The main analysis involves two processes: ICC call handling (steps 1-10) and file operations (steps a-d and i-v).

**Figure 1: Privacy Type Based Access Control (PTBAC)**
- When App A writes data to a file, the privacy check model confirms whether the data contains confidential information.
- When App B attempts to access the file, PTBAC checks if the file is tainted and enforces access control.

**Figure 2: Interactions Among the Components**

1. **ICC Call Handling:**
   - All ICC calls are intercepted by the ReferenceMonitor (step 1).
   - The PackageManager is invoked to query the database for validating permission assignments for both the caller and callee (step 2).
   - The PackageManager calculates the permission escalation and records it in the Android permission database (step 3), resulting in the callee having a reduced permission set during the first lifecycle.
   - The PackageManager returns the validated results (steps 4-5).
   - If the ReferenceMonitor allows the call, it invokes the DecisionEngine (step 6) to ensure the communication complies with other security policies.
   - The DecisionEngine then intercepts the PrivacyChecker (step 7), which checks the Intent parcel for tainted data using TaintDroid.
   - If the Intent parcel contains tainted data, the DecisionEngine requests a relevant policy from the policy database (step 8).
   - If a matching policy is found, the DecisionEngine informs the ReferenceMonitor of its decision (step 9), and the ReferenceMonitor either allows or denies the call (step 10).

2. **File Operations:**
   - Files and sockets are commonly used to establish communication channels between colluding applications.
   - When an application writes to a file (step a), the PrivacyChecker continuously monitors the operation.
   - If the taint tracking system detects that specific privacy data is being written to the file (step b), the file becomes tainted, and the taint information is stored in the policy database (step c).
   - When another application attempts to access the file or connect to a local socket (step i), PTBAC checks the application's permissions and queries the policy database (steps ii-iii).
   - If a matching policy is found, the DecisionEngine informs the mandatory access control (MAC) module in the Linux kernel of its decision (step iv), and the MAC module either allows or denies the access request (step v).

### 3. Evaluation

We conducted a series of tests to evaluate our framework, installed on a HUAWEI T8808D with a modified version 4.1. 

1. **Default Case Without Security Settings:**
   - Attacks published in [7, 9, 10] were prevented, but some third-party applications that needed to work together failed to do so.
   
2. **Assigning Roles to Applications:**
   - Assigning roles to these applications resolved the issues, allowing them to function normally.

3. **Collusion Attacks:**
   - Collusion attacks using covert channels with Single Setting, Multiple Settings, and Automatic Intents were detected.
   - Channels using `/proc/stat` and Threads Enumeration could not be blocked without enforcing additional policies.

4. **Comparison with Previous Frameworks:**
   - Our framework was compared with XManDroid and TaintDroid, as shown in Table 1.

| **Framework** | **Privilege Escalation Attack** | **Confused Deputy Attacks (50 samples)** | **Collusion Attacks (7 samples)** | **Tracking Privacy Flow** |
|---------------|---------------------------------|------------------------------------------|----------------------------------|---------------------------|
| **XManDroid** | Effective and flexible           | Ineffective                              | High false positives             | Effective and flexible     |
| **TaintDroid** | No false positives               |                                          |                                  |                           |
| **Our Design** | Effective and flexible           | No false positives                       |                                  |                           |

Performance overhead was not quantitatively measured, but it was below human perception in our tests, and no performance delays were noticed. The primary cause of performance overhead is dynamic taint tracking.

### 4. Conclusion

We presented a new extension to the Android platform to prevent privilege escalation attacks. This framework improves upon XManDroid and is policy-centered. It analyzes application communication in terms of permissions and content to ensure compliance with the design principles. Unlike XManDroid, our framework includes a role-based management model, enabling users to set a whitelist and maintain allowed call-chains and accesses. This approach preserves the advantages of a policy-centered framework while reducing false positives in collusion attack prevention. Test results show that the framework is efficient and does not require extra work from application developers.

### 5. Acknowledgments

This work was supported by Google's Academic Cooperation Program and the Natural Science Foundation of China under Grant No. 61272481.

### 6. References

[1] Google Android. http://www.android.com/.

[2] W. Enck, P. Gilbert, B.-G. Chun et al., TaintDroid: An information-flow tracking system for real-time privacy monitoring on smart phones. In Proc. of the 9th USENIX conference on Operating systems design and implementation, Vancouver, British Columbia, Canada, pages 1–6. USENIX Association, October 2010.

[3] S. Bugiel, L. Davi, A. Dmitrienko et al. Towards taming conflicting traditions. In Proc. of the 2011 Workshop on Governance of Technology, Information, and Policies (GTIP’11), New York, USA, pages 5–12. ACM, Dec. 2011.

[4] N. Husted, H. Sa ̈di et al., Smartphone security limitations: Privilege escalation attacks on Android. In Proc. of the 19th Annual Network & Distributed System Security Symposium (NDSS’12), San Diego, CA, USA, February 2012.

[5] Y. Zhou and X. Jiang. Dissecting Android malware: Characterization and evolution. In Proc. of the 33rd IEEE Symposium on the Security and Privacy, San Francisco, California, USA, pages 95–109. IEEE, May 2012.

[6] Claudio Marforio et al. Application Collusion Attack on the Permission-Based Security Model and its Implications for Modern Smartphone Systems. Tech. Report 724, Apr. 2011.

[7] Roman Schlegel et al. Soundcomber: A Stealthy and Context-Aware Sound Trojan for smartphones. In Proceedings of the 18th Annual Network and Distributed System Security Symposium (NDSS), Feb. 2011.

[8] S. Bugiel, L. Davi et al. XManDroid: A new Android evolution to mitigate privilege escalation attacks. Technical Report 04, Technische University at Darmstadt, 2011.

[9] W. Enck, M. Ongtang, and P. McDaniel. Mitigating Android software misuse before it happens. Technical Report NAS-TR-0094-2008, Penn. State University, 2008.

[10] L. Davi, A. Dmitrienko, A.-R. Sadeghi, and M. Winandy. Privilege escalation attacks on Android. In Proceedings of the 13th Information Security Conference (ISC), 2010.

[11] M. Dietz et al. Quire: Lightweight provenance for smartphone operating systems. In Proc. of the 20th USENIX Security Symposium (USENIX Security’11), San Francisco, California, USA, pages 51–58, August 2011.