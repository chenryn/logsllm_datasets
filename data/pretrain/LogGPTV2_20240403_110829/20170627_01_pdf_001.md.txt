# SP-GiST: A New Indexing Framework for PostgreSQL

## Space-Partitioning Trees in PostgreSQL
### Authors: Oleg Bartunov, Teodor Sigaev  
### Affiliation: Moscow University  
### Conference: PGCon-2011, Ottawa, May 17-20, 2011

## PostgreSQL Extensibility
PostgreSQL is often referred to as "the world's most advanced open-source database." One of its key features is extensibility, which allows users to create new access methods for efficient handling of non-traditional data types. This concept was emphasized by Michael Stonebraker, Jeff Anton, and Michael Hirohama in their 1987 paper, "Extendability in POSTGRES."

### Key Features of PostgreSQL Extensibility:
- **User Data Types as First-Class Citizens:** Users can define custom data types.
- **Online Extensions:** New extensions can be added without restarting the database.

## Existing Indexing Methods in PostgreSQL
- **B-tree:** Supports a limited set of comparison operators (>, <, =) and is used for all built-in data types.
- **GiST (Generalized Search Tree):** Used in many extensions such as Ltree, hstore, pg_trgm, full-text search, intarray, and PostGIS.
- **GIN (Generalized Inverted Index):** Used in extensions like hstore, pg_trgm, full-text search, and intarray.

## Why a New Indexing Framework?
Many interesting data structures, such as K-D-trees, Quadtrees, Tries, and Suffix Trees, are not available in PostgreSQL. These structures have common features:
- **Space Decomposition:** They decompose space into disjoint partitions (e.g., Quadtrees use 4 quadrants, Suffix Trees use 26 regions for the English alphabet).
- **Unbalanced Trees:** These structures are typically unbalanced.

## Challenges with GiST
GiST is inspired by R-trees and does not support unbalanced trees. Therefore, a new indexing framework, SP-GiST, is needed for spatial partitioning trees. SP-GiST provides internal methods common to the class of space-partitioning trees and an API for implementing specific features of data types.

### Challenges with Space-Partitioning Trees
- **In-Memory Structures:** These trees are in-memory structures and not suitable for page-oriented storage.
- **Possible Solutions:**
  1. Adapt the structure for disk storage (difficult and not generalized).
  2. Introduce non-page-oriented storage in PostgreSQL (not feasible).
  3. Add node clustering to utilize page space on disk and preserve locality (path nodes stored close).

## SP-GiST Tuples and Pages
- **Inner Tuple:** Contains a prefix node, predicate, and optional ItemPointer.
- **Leaf Tuple:** Contains a heap pointer, next leaf, predicate, and pointer on the same page.

### Example SP-GiST Tuples
- **Suffix Tree:**
  - Inner 1: `http://www.s g`
  - Inner 2: `igaev.ru/ i ...`
  - Leaf: `index.html oogle.com/ ...`

- **Quadtree:**
  - Inner 1: `(x=0, y=0) Q1 Q2 3 4` (Centroids)
  - Inner 2: `(x=1, y=10) Q1 Q2 3 4` (Centroids)
  - Leaf: `(111,222) (x=12, y=-45) ...`

## SP-GiST Interface
- **ConfigFn():** Returns the OIDs of data types: prefix, predicates of node, and leaf tuple.
- **ChooseFn():** Accepts the content of an inner node and returns one of the following actions: Match node, Add node to inner tuple, or Split inner tuple (prefix split).
- **SplitFn():** Creates an inner tuple from a leaf page.
- **InnerConsistentFn():** Accepts the content of an inner node and query, returning nodes to follow.
- **LeafConsistentFn():** Tests a leaf tuple for the query.

### Insert Algorithm
1. Start with the first tuple on the root.
2. Loop:
   - If the page is a leaf:
     - If there is enough space, insert.
     - Otherwise, call `splitFn()` and resume insertion from the current place.
   - Otherwise:
     - Switch by `chooseFn`:
       - **MatchNode:** Go by pointer and loop again.
       - **AddNode:** Add node and insert.
       - **Split:** Split the inner tuple and resume insertion from the current place.

## Quadtree Implementation
- **Prefix and Leaf Predicate:** Points.
- **Node Predicate:** Short number.
- **SplitFn():** Forms a centroid and 4 nodes (quadrants).
- **ChooseFn():** Chooses a quadrant (no AddNode, no split tuple).
- **InnerConsistentFn():** Chooses quadrant(s).
- **LeafConsistentFn():** Simple equality.
- **Code Size:** 179 lines of code.

### Performance Comparison
- **Table `geo` (points):** 2,045,446 points from US geonames.
- **Size:** 293,363,712 bytes.
- **Query Performance:**
  - **Seq Scan:**
    - Time: 286.118 ms.
  - **GiST:**
    - Index Creation: 36,672.283 ms.
    - Size: 153,124,864 bytes.
    - Query Time: 0.235 ms.
  - **SP-GiST:**
    - Index Creation: 12,805.530 ms (3 times faster than GiST).
    - Size: 153,788,416 bytes (similar size to GiST).
    - Query Time: 0.083 ms (6 times faster than GiST).

## Suffix Tree Implementation
- **Prefix and Leaf Predicate:** Texts.
- **Node Predicate:** Char (byte).
- **Interface Functions:** Complex due to prefix support and level awareness.
- **Code Size:** 329 lines of code.

### Performance Comparison
- **Table `t1` (urls):** 4 million URLs from the UK domain.
- **B-tree:**
  - Size: 396,730,368 bytes.
  - Index Creation: ~19 sec.
  - Query Time: 0.126 ms.
- **SP-GiST:**
  - Size: 1,797,554,176 bytes.
  - Index Creation: ~28 sec.
  - Query Time: 0.075 ms (4 times faster than B-tree).

## Conclusions
- **Index Creation:**
  - SP-GiST is fast (3 times faster than GiST) even in the prototype.
  - Current page utilization is ~40% for Quadtrees and ~13% for Suffix Trees.
- **Search Performance:**
  - SP-GiST is very fast (~3 times faster than GiST for `~=` operation and ~4 times faster than B-tree for `=` operation).
  - Further operations need to be implemented.

## Future Work
- **Improve Page Utilization:** Clustering.
- **Concurrency, WAL, Vacuum, and Spggettuple()** improvements.
- **Amcanorder and Additional Operations.**
- **K-d-tree, B-tree Emulation, and Other Structures.**
- **KNN (amcanorderbyop).**

## SP-GiST Links
- **Publications:** [Purdue University SP-GiST](http://www.cs.purdue.edu/spgist/)
- **Downloads:** [SP-GiST 0.37](http://www.sigaev.ru/misc/spgist-0.37.tgz)

---

This document provides a comprehensive overview of the SP-GiST indexing framework, its implementation, and performance benefits over existing methods in PostgreSQL.