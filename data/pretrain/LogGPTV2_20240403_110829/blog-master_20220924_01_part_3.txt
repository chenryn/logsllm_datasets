CREATE VIEW lineitem AS SELECT * FROM read_parquet('/Users/digoal/duckdb/build/release/tpch_20220901/lineitem.parquet');      
CREATE VIEW orders AS SELECT * FROM read_parquet('/Users/digoal/duckdb/build/release/tpch_20220901/orders.parquet');      
CREATE VIEW partsupp AS SELECT * FROM read_parquet('/Users/digoal/duckdb/build/release/tpch_20220901/partsupp.parquet');      
CREATE VIEW part AS SELECT * FROM read_parquet('/Users/digoal/duckdb/build/release/tpch_20220901/part.parquet');      
CREATE VIEW customer AS SELECT * FROM read_parquet('/Users/digoal/duckdb/build/release/tpch_20220901/customer.parquet');      
CREATE VIEW supplier AS SELECT * FROM read_parquet('/Users/digoal/duckdb/build/release/tpch_20220901/supplier.parquet');      
CREATE VIEW nation AS SELECT * FROM read_parquet('/Users/digoal/duckdb/build/release/tpch_20220901/nation.parquet');      
CREATE VIEW region AS SELECT * FROM read_parquet('/Users/digoal/duckdb/build/release/tpch_20220901/region.parquet');      
checkpoint;  
.quit  
```  
```  
psql  
CREATE SERVER DuckDB_server FOREIGN DATA WRAPPER duckdb_fdw OPTIONS (database '/Users/digoal/Downloads/digoal.db.parquet');    
IMPORT FOREIGN SCHEMA public FROM SERVER DuckDB_server INTO public;    
postgres=# \det  
      List of foreign tables  
 Schema |  Table   |    Server       
--------+----------+---------------  
 public | customer | duckdb_server  
 public | lineitem | duckdb_server  
 public | nation   | duckdb_server  
 public | orders   | duckdb_server  
 public | part     | duckdb_server  
 public | partsupp | duckdb_server  
 public | region   | duckdb_server  
 public | supplier | duckdb_server  
(8 rows)  
postgres=# select * from customer limit 1;  
 c_custkey |       c_name       |     c_address     | c_nationkey |     c_phone     | c_acctbal | c_mktsegment |                           c_comment                              
-----------+--------------------+-------------------+-------------+-----------------+-----------+--------------+----------------------------------------------------------------  
         1 | Customer#000000001 | j5JsirBM9PsCy0O1m |          15 | 25-989-741-2988 |    711.56 | BUILDING     | to the even, regular platelets. regular, ironic epitaphs nag e  
(1 row)  
```  
还不能完全下推:  
```  
explain verbose SELECT  
    cntrycode,  
    count(*) AS numcust,  
    sum(c_acctbal) AS totacctbal  
FROM (  
    SELECT  
        substring(c_phone FROM 1 FOR 2) AS cntrycode,  
        c_acctbal  
    FROM  
        customer  
    WHERE  
        substring(c_phone FROM 1 FOR 2) IN ('13', '31', '23', '29', '30', '18', '17')  
        AND c_acctbal > (  
            SELECT  
                avg(c_acctbal)  
            FROM  
                customer  
            WHERE  
                c_acctbal > 0.00  
                AND substring(c_phone FROM 1 FOR 2) IN ('13', '31', '23', '29', '30', '18', '17'))  
            AND NOT EXISTS (  
                SELECT  
                    *  
                FROM  
                    orders  
                WHERE  
                    o_custkey = c_custkey)) AS custsale  
GROUP BY  
    cntrycode  
ORDER BY  
    cntrycode;  
 GroupAggregate  (cost=2619.32..2619.44 rows=5 width=72)  
   Output: (SUBSTRING(customer.c_phone FROM 1 FOR 2)), count(*), sum(customer.c_acctbal)  
   Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))  
   InitPlan 1 (returns $0)  
     ->  Aggregate  (cost=17.05..17.06 rows=1 width=32)  
           Output: avg(customer_1.c_acctbal)  
           ->  Foreign Scan on public.customer customer_1  (cost=10.00..17.00 rows=17 width=32)  
                 Output: customer_1.c_custkey, customer_1.c_name, customer_1.c_address, customer_1.c_nationkey, customer_1.c_phone, customer_1.c_acctbal, customer_1.c_mktsegment, customer_1.c_comment  
                 Filter: (SUBSTRING(customer_1.c_phone FROM 1 FOR 2) = ANY ('{13,31,23,29,30,18,17}'::text[]))  
                 SQLite query: SELECT "c_phone", "c_acctbal" FROM main."customer" WHERE (("c_acctbal" > 0.00))  
   ->  Sort  (cost=2602.26..2602.28 rows=5 width=64)  
         Output: (SUBSTRING(customer.c_phone FROM 1 FOR 2)), customer.c_acctbal  
         Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))  
         ->  Hash Anti Join  (cost=2602.00..2602.21 rows=5 width=64)  
               Output: SUBSTRING(customer.c_phone FROM 1 FOR 2), customer.c_acctbal  
               Hash Cond: (customer.c_custkey = orders.o_custkey)  
               ->  Foreign Scan on public.customer  (cost=10.00..10.00 rows=10 width=72)  
                     Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment  
                     Filter: (SUBSTRING(customer.c_phone FROM 1 FOR 2) = ANY ('{13,31,23,29,30,18,17}'::text[]))  
                     SQLite query: SELECT "c_custkey", "c_phone", "c_acctbal" FROM main."customer" WHERE (("c_acctbal" > ?))  
               ->  Hash  (cost=2560.00..2560.00 rows=2560 width=8)  
                     Output: orders.o_custkey  
                     ->  Foreign Scan on public.orders  (cost=10.00..2560.00 rows=2560 width=8)  
                           Output: orders.o_custkey  
                           SQLite query: SELECT "o_custkey" FROM main."orders"  
(25 rows)  
```  
不过有一种方法可以直接执行duckdb SQL, 例如把sql变成view, 再import到foreign table, 这一就不担心下推问题了.  
```  
FUNCTION duckdb_execute(server name, stmt text) RETURNS void  
```  
```  
SELECT duckdb_execute('duckdb_server'  
,$$create or replace view tpch_q22 as SELECT  
    cntrycode,  
    count(*) AS numcust,  
    sum(c_acctbal) AS totacctbal  
FROM (  
    SELECT  
        substring(c_phone FROM 1 FOR 2) AS cntrycode,  
        c_acctbal  
    FROM  
        customer  
    WHERE  
        substring(c_phone FROM 1 FOR 2) IN ('13', '31', '23', '29', '30', '18', '17')  
        AND c_acctbal > (  
            SELECT  
                avg(c_acctbal)  
            FROM  
                customer  
            WHERE  
                c_acctbal > 0.00  
                AND substring(c_phone FROM 1 FOR 2) IN ('13', '31', '23', '29', '30', '18', '17'))  
            AND NOT EXISTS (  
                SELECT  
                    *  
                FROM  
                    orders  
                WHERE  
                    o_custkey = c_custkey)) AS custsale  
GROUP BY  
    cntrycode  
ORDER BY  
    cntrycode;$$);  
IMPORT FOREIGN SCHEMA public limit to (tpch_q22)  FROM SERVER   
duckdb_server INTO public;  
postgres=# select * from tpch_q22 ;  
 cntrycode | numcust | totacctbal    
-----------+---------+-------------  
 13        |    9025 | 67592468.28  
 17        |    9067 | 68084663.34  
 18        |    9210 | 69312783.61  
 23        |    8984 | 67607771.32  
 29        |    9199 | 69015438.26  
 30        |    9343 | 70118838.04  
 31        |    9086 | 68144525.38  
(7 rows)  
Time: 551.502 ms  
postgres=# \det  
      List of foreign tables  
 Schema |  Table   |    Server       
--------+----------+---------------  
 public | customer | duckdb_server  
 public | lineitem | duckdb_server  
 public | nation   | duckdb_server  
 public | orders   | duckdb_server  
 public | part     | duckdb_server  
 public | partsupp | duckdb_server  
 public | region   | duckdb_server  
 public | supplier | duckdb_server  
 public | tpch_q22 | duckdb_server  
(9 rows)  
```  
## 注意  
不同会话并行使用同一个数据文件, 会不会有保护, 会不会有问题? multi-connect? sqlite3支持多database conn?  
目前实测并发访问同一个server导致crash, 可以找steven处理一下duckdb_fdw的这个问题.   
```  
postgres=# select count(distinct t3.gid),count(*) from t3 join t1 on t3.gid=t1.gid join t2 on t3.cid=t2.cid;  
ERROR:  failed to open SQLite DB. rc=1 path=/Users/digoal/Downloads/duckdb/build/release/db  
postgres=# \set VERBOSITY verbose  
postgres=# select count(distinct t3.gid),count(*) from t3 join t1 on t3.gid=t1.gid join t2 on t3.cid=t2.cid;  
server closed the connection unexpectedly  
	This probably means the server terminated abnormally  
	before or while processing the request.  
The connection to the server was lost. Attempting reset: Failed.  
!?> \q  
```  
duckdb快在列存、向量化. PG用的是行存储, 不过未来可以通过加存储引擎来支持, 期待吧.   
## 参考  
https://github.com/alitrack/duckdb_fdw   
- [《德说-第140期, duckdb+容器+parquet+对象存储, 实现SaaS场景, 低代码拖拉拽多维度实时分析 降本提效》](../202209/20220913_02.md)    
- [《DuckDB parquet 分区表 / Delta Lake(数据湖) 应用》](../202209/20220905_01.md)  
- [《DuckDB 采用外部 parquet 格式存储 - tpch 测试 - in_memory VS in_parquet》](../202209/20220901_05.md)  
- [《DuckDB 数据库的数据能不能超出内存限制? 以及推荐的使用方法 - parquet》](../202209/20220901_03.md)  
- [《DuckDB 读写 Parquet 文件 - 同时支持远程s3, oss, http等parquet文件读写》](../202209/20220901_01.md)  
- [《DuckDB vs PostgreSQL TPC-H 测试》](../202208/20220829_01.md)  
- [《DuckDB TPC-H, TPC-DS 测试》](../202208/20220828_01.md)  
- [《DuckDB 定位OLAP方向的SQLite, 适合嵌入式数据分析 - tpch测试与简单试用》](../202208/20220826_02.md)  
#### [期望 PostgreSQL 增加什么功能?](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
#### [PolarDB for PostgreSQL云原生分布式开源数据库](https://github.com/ApsaraDB/PolarDB-for-PostgreSQL "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")