heuristics [52, 51, 3, 4, 45], RAZOR obtains the accurate
information of instruction address and function boundary
from the execution trace. For example, we can find some of
all possible targets of indirect jumps and calls.
Starting from such reliable information, we are able to
identify more code instructions [47]. For conditional branch
instructions, both targets are known to us. Even if one target is
not executed, we can still reliably disassemble it. For indirect
jumps, we can identify potential jump tables with specific
code patterns [53]. For example, jmpq *0x4e65a0(,%rdx,8)
indicates a jump table starting from address 0x4e65a0. By
identifying more instructions, we are able to include them in
the binary if our heuristic treats them as related-code.
3.2 Heuristic-based Path Inference
Considering the challenge of generating test cases to cover all
code, we believe no perfect method can completely identify
all missed related-code. As the first work trying to mitigate
the problem, we adopt the best-effort heuristic approach to
include more related-code. Next, we present these heuristics
one by one, from the conservative one (including less code)
to the aggressive one (including more code):
(1) Zero-code heuristic (zCode). This heuristic adds new
edges (i.e., jumps between basic blocks) into the CFG. For
conditional branch instructions that only have one target
taken (the fall-through target or the jump target), PathFinder
checks whether the non-taken target is already in the CFG
(i.e., reached through other blocks). If so, PathFinder per-
mits the jump from this instruction to the non-taken target.
This heuristic does not add any new instructions and thus will
not affect the code reduction.
Figure 4 shows an example of related-code identifica-
tion with heuristics, with the original CFG on the left
and the expanded CFG on the right. The code is de-
signed to calculate log(sqrt(absl(max(rax,rbx,rcx)))).
Dashed branches and blocks are not executed during trac-
ing, while others are executed. The original execution path is
L1→L2→L3→L5→L7→L9. Blocks L4, L6, L8, and the branch
L1→L3 are missed in the original CFG. With the zCode heuris-
tic, PathFinder adds branch L1→L3 into the new CFG, as L3
is the non-taken branch of the conditional jump jge L3 in L1
and it is already reached from L2 in the current CFG.
Figure 4: Identifying related-code with different heuristics. Dashed
branches and blocks are not executed and thus are excluded from
the left CFG, while others are executed.
(2) Zero-call heuristic (zCall). This heuristic includes
alternative execution paths that do not trigger any function
call. With this heuristic, PathFinder starts from the non-
taken target of some conditional branches and follows the
control-flow information to find new paths that finally merge
with the executed ones. If such a new path does not include
any call instructions, PathFinder includes all its instructions
to the CFG. When PathFinder walks through non-executed
instructions, we do not have the accurate information for
stable disassembling or CFG construction. Instead, we rely
on existing mechanisms [53, 3] to perform binary analysis.
When applying the zCall heuristic on the example in Figure 4,
PathFinder further includes block L4, and path L3→L4→L5,
as this new path merges with the original one at L5 and does
not contain any call instruction.
(3) Zero-libcall heuristic (zLib). This heuristic is similar
to zCall, except that PathFinder includes the alternative paths
more aggressively. The new path may have call instructions
that invoke functions within the same binary or external func-
tions that have been executed. However, zLib does not allow
calls to non-executed external functions. In Figure 4, with this
heuristic, PathFinder adds block L6 and path L5→L6→L7 to
the CFG, as that path does not have any call to non-executed
external functions.
(4) Zero-functionality heuristic (zFunc). This heuristic
further allows including non-executed external functions as
long as they do not trigger new high-level functionalities. To
correlate library functions with functionalities, we check their
USENIX Association
28th USENIX Security Symposium    1737
L2:  mov %rbx,%rax  jmp L3FTL1:  cmp %rbx,%rax  jge L3L3:  cmp %rcx,%rax  jge L5L4:  mov %rcx,%rax  jmp L5L6:  mov %rax,%rdi  call L_absl  jmp L7FTL5:  test %rax,%rax  jns L7FTL7:  test %rax,%rax   jle L9    L8:  mov %rax,%rdi  call sqrt@plt  jmp L9FTL9:  mov %rax,%rdi  call log@pltL9:  mov %rax,%rdi  call log@plt  L2:  mov %rbx,%rax  jmp L3FTL1:  cmp %rbx,%rax  jge L3L3:  cmp %rcx,%rax  jge L5L4:  mov %rcx,%rax  jmp L5L6:  mov %rax,%rdi  call L_absl  jmp L7FTL5:  test %rax,%rax  jns L7FTL7:  test %rax,%rax   jle L9L8:  mov %rax,%rdi  call sqrt@plt  jmp L9FTzCodezCallzLibzFuncAlgorithm 1: Path-finding algorithm.
Input: CFG - the input CFG; libcall_groups - the library call groups.
Output: CFG′ - the expanded CFG
CFG′ ← CFG
/* iterate over each conditional branch
*/
nbb = get_non_taken_branch(cnd_br)
if nbb == NULL: continue
if heuristic >= zCode and nbb ∈ CFG:
paths = get_alternative_paths(CFG′, nbb)
for p ∈ paths:
CFG′ = CFG′ ∪ {cnd_br→nbb}
1 for cnd_br ∈ CFG:
2
3
4
5
6
7
8
9
10
11
12
13
14
include = false
if heuristic == zCall: include = !has_call(p)
elif heuristic == zLib:
elif heuristic == zFunc:
include = !has_new_libcall(p)
include = !has_new_func(CFG′, p, libcall_groups)
CFG′ = CFG′ ∪ p
if include:
descriptions and group them manually. For libc functions,
we classify the ones that fall into the same subsection in [32]
to the same group. For example, log and sqrt are in the
subsection Exponentiation and Logarithms, and thus we
believe they have similar functionalities. With this heuristic,
PathFinder includes block L8 and path L7→L8→L9, as sqrt
has a functionality similar to the executed function log.
Algorithm 1 shows the steps that PathFinder uses to find
related-code that completes functionalities. For each con-
ditional branch in the input CFG (line 1), the algorithm in-
vokes the function get_non_taken_branch to get the non-
taken branch (line 2).
If both branches have been taken,
the algorithm proceeds to the next conditional branch (line
3). Otherwise, PathFinder starts to add code depending on
the given heuristic (line 4 to 14). If the non-taken branch
is reachable in the current CFG (line 4), zCode enables the
new branch in the output CFG (line 5). If the heuristic is
more aggressive than zCode, PathFinder first gets all alter-
native paths that start from the non-taken branch and finally
merges with some executed code (line 6). Then, it iterates
over all paths (line 7) and calls corresponding checking func-
tions (i.e., has_call, has_new_libcall, and has_new_func)
to check whether or not the path should be included (line 9 to
12). In the end, PathFinder adds the path to the output CFG
if it satisfies the condition (line 14).
3.3 Debloated Binary Synthesization
With the original bloated binary and the expanded CFG,
Generator synthesizes the debloated binary that exclusively
supports required functionalities. First, it disassembles the
original binary following the expanded CFG and generates a
pseudo-assembly file that contains all necessary instructions.
Second, Generator modifies the pseudo-assembly to create
a valid assembly file. These modifications symbolize basic
blocks, concretize indirect calls/jumps, and insert fault han-
Figure 5: Synthesize debloated assembly file. Each basic block is
assigned a unique label; indirect calls are expanded with compar-
isons and direct calls; fault handling code is inserted.
dling code. Third, it compiles the assembly file into an object
file that contains machine code of the necessary instructions.
Fourth, Generator copies the machine code from the object
file into a new code section of the original binary. Fifth,
Generator modifies the new code section to fix all references
to the original code and data. Finally, Generator sets the
original code section non-executable to reduce the code size.
We leave the original code section inside the debloated pro-
gram to support the potential read from it (e.g., jump tables
in code section for implementing switch [11]). We discuss
this design choice in §6.
3.3.1 Basic Block Symbolization
We assign a unique label to each basic block and replace all
its references with the label. Specifically, we create the label
L_addr for the basic block at address addr. Then, we scan all
direct jump and call instructions and replace their concrete
target addresses with corresponding labels. In this way, the
assembler will generate correct machine code regardless of
how we manipulate the assembly file. Figure 5 shows an
assembly file before and after the update, illustrating the
effect of basic block symbolization. Before the update, all call
and jump instructions use absolute addresses, like jne 0x6 in
basic block 0x0. After the symbolization, the basic block at
0x6 is assigned the label L_0x6, while instruction jne 0x6 is
replaced with jne L_0x6. Similarly, instruction call 0x40 in
block 0x06 is replaced with call L_0x40. One special case
is the conditional branch jne 0x6 in basic block 0x2. In the
extended CFG, it only takes the fall-through branch, which
means that jumping to block 0x6 should not be allowed in the
debloated binary. Therefore, instead of replacing 0x6 with
symbol L_0x6, we redirect the execution to the fault handling
code cond_fail (will discuss in §3.3.3). Note that basic
block symbolization only updates explicit use of basic block
addresses, i.e., as direct call/jump targets. We handle the
implicit address use, like saving function address into memory
for indirect call, with the indirect call/jump concretization.
1738    28th USENIX Security Symposium
USENIX Association
0x0:  jne  0x4  ;true0x2:  jne  0x6  ;false0x4:  jz   0xb  ;both0x6:  call 0x400xb:  call *%rax;0x70,0x80L_0x0:  jne   L_0x4  jmp   cond_failL_0x2:  jne   cond_failL_0x4:  jz    L_0xbL_0x6:  call  L_0x40L_0xb:  cmp   %rax, 0x70  jne   L_i1  call  L_0x70L_i1:  cmp   %rax, 0x80  jne   ic_fail  call  L_0x803.3.2 Indirect Call/Jump Concretization
Indirect call/jump instructions use implicit targets that are
loaded from memory or calculated at runtime. We have to
make sure all possible targets point to the new code section.
For the sake of simplicity, we use the term indirect call to
cover both indirect calls and indirect jumps.
With the execution traces, Generator is able to handle
indirect calls in two ways. The first method is to locate con-
stants from the original binary that are used as code addresses
and replace them with the corresponding new addresses, as
in [52, 51]. However, this method requires a heavy trac-
ing process that records all execution context and a time-
consuming data-flow analysis. Therefore, it is impractical
for large programs. The second method is to perform the
address translation before each indirect call, as in [53]. In
particular, we create a map from the original code addresses
to the new ones. Before each indirect call, we map the old
code address to the new one and transfer the control-flow to
the new address.
Our Generator takes a method similar to the second one,
but with different translations for targets within the same
module (named local targets) and targets outside the module
(named global targets). For local targets, we define a con-
crete policy for each indirect call instruction. Specifically,
we replace the original call with a set of compare-and-call
instructions, one for each local target that is executed by
this instruction at tracing. Then, we call the new address
of the matched old addresses. Global targets have different
addresses in multiple runs because of the address space lay-
out randomization (ASLR). We use a per-module translation
table to solve this problem. Different from previous work
that creates a translation table for all potential targets in the
module [53], our translation table contains only targets that
are ever invoked by other modules. At runtime, if the tar-
get address is outside the current module, we use a global
translation function to find the correct module and look up its
translation table to get the correct new address to invoke.
Figure 5 gives an example of indirect call concretization.
In the execution trace, instruction call *%rax in block 0xb
transfers control to function at 0x70 and 0x80. Our concretiza-
tion inserts two cmp instructions, one to compare with the
address 0x70 and another to compare with 0x80. For any suc-
cessful comparison, Generator inserts a direct call to transfer
the control-flow to the corresponding new address.
Security benefit. Our design achieves a stronger security
benefit on control-flow protection over previous methods. For
example, the previous work binCFI [53] uses a map to con-
tain all valid code addresses, regardless of which instruction
calls them. Thus, any indirect call instruction can reach all
possible targets, making the protection vulnerable to existing
bypasses [12, 43, 9]. Our design is functionally equivalent to
creating one map for each indirect call, which contains both
the targets obtained from the trace and the targets inferred by
our PathFinder. For inter-module indirect calls, we limit the
targets to a small set that is ever invoked by external modules.
In this way, attackers who try to change the control flow will
have fewer choices, and the debloated binary will be immune
to even advanced attacks.
Frequency-based optimization. Depending on the number
of executed targets, we may insert many compare-and-call
instructions that will slow the program execution. For ex-
ample, one indirect call instruction in perlbench benchmark
of SPEC CPU2006 has at least 132 targets, and each target
is invoked millions of times. To reduce the overhead, we
rank all targets with their execution frequencies and compare
the address with high-frequent targets first. The targets in-
ferred from heuristics have a frequency of zero. With this
optimization, we can reduce the overhead significantly.
3.3.3 Fault Handling
Running a debloated binary may reach removed code or dis-
abled branches for various reasons, such as a user’s temporal
requirement for extra functionalities or malicious attempts
to run unnecessary code. We redirect any such attempt to a
fault handler that exits the execution and dumps the call stack.
Specifically, for conditional jump instructions with only one
target taken, we intercept the branch to the non-taken target to
hook any attempt of the invalid jump. Similarly, for indirect
call instructions, if no allowed target matches the runtime
target, we redirect the execution to the fault handler.
Figure 5 includes examples of hooking failed conditional
jumps and indirect calls. For instruction jne 0x4 in block
0x0, we insert jmp cond_fail to redirect the branch to the
fall-through target to the fault handler cond_fail. Similarly,
we update instruction jne 0x6 with jne cond_fail to pre-
vent jumping to the non-executed target. For conditional
branch jz 0xb which has both targets taken, we do not in-
sert any code. For instruction call *%rax, we insert code
jne ic_fail in the case that all allowed targets are different
from the real-time one.
4
Implementation
We implement a prototype of RAZOR with 1,085 lines of C
code, 514 lines of C++ code, and 4,034 lines of python code,
as shown in Table 1. The prototype currently supports x86-64
ELF binaries. Our design is platform-agnostic and we plan
to support other binary formats from different architectures.
We tried our system on system libraries (e.g., libc.so, libm.so)
and report our findings in §6.
4.1 Tracer Implementations
As we discussed in §3.1, each tracing method has different
benefits and limitations, such as the tracing efficiency and
completeness. We provide three different implementations of
USENIX Association
28th USENIX Security Symposium    1739
100%
80%
60%
40%
20%
0%
perlbench
bzip2
gamess
gcc
bwaves
mcf
milc
gromacs
zeusmp
cactusA
M
D
povray
libquantum
leslie3d
GemsFDTD
gobmk
tonto
calculix
soplex
dealII
namd
mer
sjeng
h264ref
hm
(a) SPEC CPU2006
100%
80%
60%
40%
20%
0%
Razor
omnetpp
lbm
astar
xalancbmk
sphinx3
wrf
AVERAGE
Razor
Chisel
bzip2
chown
date
grep
gzip
mkdir
rm
sort
tar
(b) CHISEL benchmarks
uniq
AVERAGE
Figure 6: Code size reduction on two benchmarks. We use RAZOR to debloat both SPEC CPU2006 benchmarks and CHISEL benchmarks
without any path finding and achieve 68.19% and 78.8% code reduction. CHISEL removes 83.4% code from CHISEL benchmarks.
Component
C
C++
Python
Tracer
PathFinder
Generator
1,085
514
218
0
0
743
0
0
3,073
Total
1,085
514
4,034
Table 1: Implementation of different RAZOR components.
Tracer in RAZOR so that users can choose the best one for
their purpose. In our evaluation, we use software-based in-
strumentation to collect complete traces for simple programs,
and use a hardware-based method to efficiently get trace from
large programs.
Tracing with software instrumentation. We use the dy-
namic instrumentation tools Dynamorio [7] and Pin [25] to
monitor the execution of the bloated program. Both tools
provide instrumentation interfaces at function level, basic
block level, and instruction level. We implement three instru-
mentation passes to collect control-flow information. First, at
the beginning of each basic block we record its start address;
second, for each conditional jump instruction, we insert two
pieces of code between the instruction and its two targets
to log the taken information; third, before each indirect call
and jump instruction, we record the concrete target for each
invocation. At runtime, we remove the basic block instruction