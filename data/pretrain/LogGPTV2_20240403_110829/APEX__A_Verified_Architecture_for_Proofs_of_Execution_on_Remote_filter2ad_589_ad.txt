execution occurred before C hal was received. Such attacks are
prevented by setting EXEC = 0 whenever the memory region
storing C hal is modiﬁed.
6 Formal Speciﬁcation & Veriﬁed Implementa-
tion
Our formal veriﬁcation approach starts by formalizing APEX
sub-properties Linear Temporal Logic (LTL) to deﬁne invari-
ants that must hold throughout the MCU operation. We then
use a theorem prover [18] to write a computer-aided proof that
the conjunction of the LTL sub-properties imply an end-to-
end formal deﬁnition for the guarantee expected from APEX
hardware. APEX correctness, when properly composed with
VRASED guarantees, yields a PoX scheme secure according to
Deﬁnition 2. This is proved by showing that, if the composition
between the two is implemented as described in Deﬁnition 3,
VRASED security can be reduced to APEX security.
APEX hardware module is composed of several sub-modules
written in Verilog Hardware Description Language (HDL).
Each sub-module is responsible for enforcing a set of LTL
sub-properties and is described as an FSM in Verilog at Reg-
ister Transfer Level (RTL). Individual sub-modules are com-
bined into a single Verilog design. The resulting composition
is converted to the SMV model checking language using the
automatic translation tool Verilog2SMV [26]. The resulting
SMV is simultaneously veriﬁed against all LTL speciﬁcations,
using the model checker NuSMV [12], to prove that the ﬁnal
Verilog of APEX complies with all necessary properties.
6.1 Machine Model
Deﬁnition 4 models, in LTL, the behavior of low-end MCUs
considered in this work. It consists of a subset of the machine
model introduced by VRASED. Nonetheless, this subset models
all MCU behavior relevant for stating and verifying correctness
of APEX’s implementation.
Modify_Mem models that a given memory address can
be modiﬁed by a CPU instruction or by a DMA access. In
the former, Wen signal must be set and Daddr must contain the
target memory address. In the latter, DMAen signal must be
USENIX Association
29th USENIX Security Symposium    779
Deﬁnition 4. Machine Model (subset)
1. Modify_Mem(i) → (Wen ∧ Daddr = i)∨ (DMAen ∧ DMAaddr = i)
2. Interrupt → irq
3. MR, CR, AR, KR, XS, and METADATA are non-overlapping
memory regions
set and DMAaddr must contain the target DMA address. The
requirements for reading from a memory address are similar,
except that instead of Wen, Ren must be on. We do not explicitly
state this behavior since it is not used in APEX proofs. For
the same reason, modeling the effects of instructions that only
modify register values (e.g., ALU operations, such as add and
mul) is also not necessary. The machine model also captures
the fact that, when an interrupt happens during execution, the
irq signal in MCU hardware is set to 1.
With respect to memory layout, the model states that MR,
CR, AR, KR, XS, and METADATA are disjoint memory re-
gions. The ﬁrst ﬁve memory regions are deﬁned in VRASED.
As shown in Figure 2, METADATA is a ﬁxed memory region
used by APEX to store information about software execution
status.
6.2 Security & Implementation Correctness
We use a two-part strategy to prove that APEX is a secure PoX
architecture, according to Deﬁnition 2:
[A]: We show that properties EP1-EP3 and MP1-MP3, dis-
cussed in Section 5.2 and formally speciﬁed next in Sec-
tion 6.3, are sufﬁcient to guarantee that EXEC ﬂag is 1
iff S indeed executed on P rv. To show this, we compose
a computer proof using SPOT LTL proof assistant [18].
[B]: We use cryptographic reduction proofs to show that, as
long as part A holds, VRASED security can be reduced to
APEX’s PoX security from Deﬁnition 2. In turn, HMAC’s
existential unforgeability can be reduced to VRASED’s
security [15]. Therefore, both APEX and VRASED rely on
the assumption that HMAC is a secure MAC.
In the rest of this section, we convey the intuition behind
both of these steps. Proof details are in Appendix B.
The goal of part A is to show that APEX’s sub-properties
imply Deﬁnition 5. LTL speciﬁcation in Deﬁnition 5 captures
the conditions that must hold in order for EXEC to be set
to 1 during execution of XProve, enabling generation of a
valid proof of execution. This speciﬁcation ensures that, in
order to have EXEC = 1 during execution of XProve (i.e, for
[EXEC ∧ PC ∈ CR] to hold), at least once before such time
the following must have happened:
1. The system reached state S0 where software stored in ER
started executing from its ﬁrst instruction (PC = ERmin).
2. The system eventually reached a state S1 when ER ﬁn-
ished executing (PC = ERmax). In the interval between S0
and S1 PC kept executing instructions within ER, there
were no interrupts, no resets, and DMA remained inactive.
3. The system eventually reached a state S2 when XProve
started executing (PC =CRmin). In the interval between S0
and S2, METADATA and ER regions were not modiﬁed.
4. In the interval between S0 and S2, OR region was
only modiﬁed by ER’s execution, i.e., PC ∈ ER ∨
¬ Modify_Mem(OR).
Figure 3 shows the time windows wherein each memory region
must not change during APEX’s PoX as implied by APEX’s
correctness (Deﬁnition 5). Violating any of these conditions
will cause EXEC have value 0 during XProve’s computation.
Consequently, any violation will result in V rf rejecting the
proof of execution since it will not conform to the expected
value of H , per Equation 2 in Deﬁnition 3.
The intuition behind the cryptographic reduction (part B) is
that computing H involves simply invoking VRASED SW-Att
with MR = C hal, ER ∈ AR, OR ∈ AR, and METADATA ∈ AR.
Therefore, a successful forgery of APEX’s H implies break-
ing VRASED security. Since H always includes the value of
EXEC, this implies that APEX is PoX-secure (Deﬁnition 2).
The complete reduction is presented in Appendix B.
6.3 APEX’s Sub-Properties in LTL
We formalize the necessary sub-properties enforced by APEX
as LTL speciﬁcations 3–12 in Deﬁnition 6. We describe how
they map to high-level notions EP1-EP3 and MP1-MP3 dis-
cussed in Section 5.2. Appendix B discusses a computer proof
that the conjunction of this set of properties is sufﬁcient to sat-
isfy a formal deﬁnition of APEX correctness from Deﬁnition 5.
LTL 3 enforces EP1 – Ephemeral immutability by making
sure that whenever ER memory region is written by either CPU
or DMA, EXEC is immediately set to logical 0 (false).
EP2 – Ephemeral Atomicity is enforced by a set of three
LTL speciﬁcations. LTL 4 enforces that the only way for ER’s
execution to terminate, without setting EXEC to logical 0, is
through its last instruction: PC = ERmax. This is speciﬁed by
checking the relation between current and next PC values using
LTL neXt operator. In particular, if current PC value is within
ER, and next PC value is outside SW-Att region, then either
current PC value is the address of ERmax, or EXEC is set to
0 in the next cycle. Also, LTL 5 enforces that the only way
for PC to enter ER is through the very ﬁrst instruction: ERmin.
This prevents ER execution from starting at some point in the
middle of ER, thus making sure that ER always executes in
its entirety. Finally, LTL 6 enforces that EXEC is set to zero
if an interrupt happens in the middle of ER execution. Even
though LTLs 4 and 5 already enforce that PC can not change
to anywhere outside ER, interrupts could be programmed to
return to an arbitrary instruction within ER. Although this
would not violate LTLs 4 and 5, it would still modify ER’s
behavior. Therefore, LTL 6 is needed to prevent that.
EP3 – Output Protection is enforced by LTL 7 by making
sure that: (1) DMA controller does not write into OR; (2) CPU
780    29th USENIX Security Symposium
USENIX Association
Deﬁnition 5. Formal speciﬁcation of APEX’s correctness.
{
PC = ERmin ∧ [(PC ∈ ER∧¬Interrupt ∧¬reset ∧¬DMAen) U PC = ERmax] ∧
[(¬ Modify_Mem(ER)∧¬ Modify_Mem(METADATA)∧ (PC ∈ ER∨¬ Modify_Mem(OR))) U PC = CRmin]
} B {EXEC∧ PC ∈ CR}
Deﬁnition 6. Sub-Properties needed for Secure Proofs of Execution in LTL.
Ephemeral Immutability:
Ephemeral Atomicity:
G : {[Wen ∧ (Daddr ∈ ER)]∨ [DMAen ∧ (DMAaddr ∈ ER)] → ¬EXEC}
G : {(PC ∈ ER)∧¬(X(PC) ∈ ER) → PC = ERmax ∨¬X(EXEC) }
G : {¬(PC ∈ ER)∧ (X(PC) ∈ ER) → X(PC) = ERmin ∨¬X(EXEC)}
G : {(PC ∈ ER)∧ irq → ¬EXEC}
Output Protection:
G : {[¬(PC ∈ ER)∧ (Wen ∧ Daddr ∈ OR)]∨ (DMAen ∧ DMAaddr ∈ OR)∨ (PC ∈ ER∧ DMAen) → ¬EXEC}
Executable/Output (ER/OR) Boundaries & Challenge Temporal Consistency:
G : {ERmin > ERmax ∨ ORmin > ORmax → ¬EXEC}
G : {ERmin ≤ CRmax ∨ ERmax > CRmax → ¬EXEC}
G : {[Wen ∧ (Daddr ∈ METADATA)]∨ [DMAen ∧ (DMAaddr ∈ METADATA)] → ¬EXEC}
Remark: Note that C halmem ∈ METADATA.
Response Protection:
G : {¬EXEC∧ X(EXEC) → X(PC = ERmin)}
G : {reset → ¬EXEC}
(3)
(4)
(5)
(6)
(7)
(8)
(9)
(10)
(11)
(12)
State S0
State S1
State S2 H ready
ER execution
Attestation
Unchanged memory
required by APEX
Unchanged memory
enforced by VRASED
Region
META
DATA
ER
OR
treq
t(ERmin)
t(ERmax)
t(CRmin)
t(CRmax)
tveri f
Time
Figure 3: Illustration of time intervals that each memory re-
gion must remain unchanged in order to produce a valid H
(EXEC = 1). t(X) denotes the time when PC = X.
can only modify OR when executing instructions within ER;
and 3) DMA can not be active during ER execution; otherwise,
a compromised DMA could change intermediate results of
ER computation in data memory, potentially modifying ER
behavior.
Similar to EP3, MP1 – Executable/Output Boundaries
and MP3 – Challenge Temporal Consistency are enforced
by LTL 10. Since C hal as well as ERmin, ERmax, ORmin, and
ORmax are all stored in METADATA reserved memory region,
it sufﬁces to ensure that EXEC is set to logical 0 whenever this
region is modiﬁed. Also, LTL 8 enforces that EXEC is only set
to one if ER and OR are conﬁgured (by METADATA values
ERmin, ERmax, ORmin, ORmax) as valid memory regions.
Finally, LTLs 11, and 12 (in addition to VRASED veriﬁed
RA architecture) are responsible for ensuring MP2- Response
Protection by making sure that EXEC always reﬂects what
is intended by APEX hardware. LTL 7 speciﬁes that the only
way to change EXEC from 0 to 1 is by starting ER’s execution
over. Finally, LTL 12 states that, whenever a reset happens (this
also includes the system initial booting state) and execution
is initialized, the initial value of EXEC is 0. To conclude,
recall that EXEC is read-only to all software running on P rv.
Therefore, malware can not change it directly.
APEX is designed as a set of seven hardware sub-modules,
each veriﬁed to enforce a subset of properties discussed in this
USENIX Association
29th USENIX Security Symposium    781
OpenMSP430 [23]
VRASED [15]
APEX +VRASED
Hardware
Reg
LUT
1904
691
1964
721
735
2206
Reserved
RAM (bytes)
# LTL Invariants
Veriﬁcation
Veriﬁed Verilog LoC
0
2332
2341
-
10
20
-
481
1385
Time (s) Mem (MB)
-
0.4
183.6
-
13.6
280.3
Table 2: Evaluation results.
section. Examples of implementation of veriﬁed sub-modules
as FSMs are discussed in Appendix A.
7 Implementation & Evaluation
APEX implementation uses OpenMSP430 [23] as its open
core implementation. We implement the hardware architecture
shown in Figure 2. In addition to APEX and VRASED modules
in HW-Mod, we implement a peripheral module responsible
for storing and maintaining APEX METADATA. As a periph-
eral, contents of METADATA can be accessed in a pre-deﬁned
memory address via standard peripheral memory access. We
also ensure that EXEC (located inside METADATA) is un-
modiﬁable in software by removing software-write wires in
hardware. Finally, as a proof of concept, we use Xilinx Vivado
to synthesize an RTL description of the modiﬁed HW-Mod and
deploy it on the Artix-7 FPGA class. Prototyping using FPGAs
is common in both research and industry. Once a hardware
design is synthesizable in an FPGA, the same design can be
used to manufacture an Application-Speciﬁc Integrated Circuit
(ASIC) on a larger scale.
7.1 Evaluation Results
Hardware & Memory Overhead. Table 2 reports APEX hard-
ware overhead as compared to unmodiﬁed OpenMSP430 [23]
and VRASED [15]. Similar to the related work [15–17, 44], we
consider the hardware overhead in terms of additional LUTs
and registers. The increase in the number of LUTs can be used
as an estimate of the additional chip cost and size required for
combinatorial logic, while the number of registers offers an esti-