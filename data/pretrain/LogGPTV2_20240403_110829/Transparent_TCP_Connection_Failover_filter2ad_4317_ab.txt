(cid:0) The secondary server drops the client segment al-
though the primary server receives it. This case is sim-
ilar to the case described above.
(cid:0) A client segment is lost on its way to the servers. If
neither S nor P has received the client’s segment m,
neither has received ack(cid:3) and, therefore, both retrans-
mit k. In this case, the primary server bridge sends k
twice.
(cid:0) The secondary server’s segment is dropped by the pri-
mary server.
If a segment m sent by the secondary
server S is not received by the primary server bridge,
the bridge is not sending any more segments to the
client C. Consequently, C will never acknowledge m
or any later server segments, and both servers will re-
transmit m. Assume that the bridge receives S’s re-
transmission ﬁrst. As soon as it receives S’s copy of m,
it sends m to the client C. When it receives P’s copy,
the bridge recognizes this copy as a retransmission and
sends it again.
In case the bridge receives P’s copy
ﬁrst, it ﬁnds m in P’s queue and discards the second
copy of m. As soon as the bridge receives S’s copy of
m, it sends m to the client.
(cid:0) The primary server’s segment is lost on its way to the
client. If a segment m is dropped on its way from the
primary server bridge to the client C, the client C will
not acknowledge m. Consequently, both servers will
retransmit m after their retransmission timer expires.
Again, the primary server bridge will send two copies
of m to C.
5. Failure of the Primary Server
If the fault detector detects that the primary server failed,
the secondary server performs the following tasks:
1. Tell the secondary server bridge to stop sending TCP
segments to the IP layer that are addressed to the client.
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
new TCP 
segment
for client C
created by 
primary
server P
source P
dest C
seq 51
ACK 112
WinSize 7
byte 54
byte 53
byte 52
byte 51
WinSize
ACK
payload 
    bytes
subtract
offset 30
byte 24
byte 23
byte 22
byte 21
latest
WinSize 7
latest
ACK 112
new TCP 
segment for 
client C
sent by 
secondary
server S
source S
dest P
seq 23
ACK 110
WinSize 8
byte 26
byte 25
byte 24
byte 23
payload
bytes
WinSize
ACK
latest
ACK 99
latest
WinSize 5
latest
WinSize 7
latest
ACK 112
byte 24
byte 23
byte 22
byte 21
byte 26
byte 25
latest
ACK 110
latest
WinSize 8
primary server 
output queue
secondary server 
output queue
primary server 
output queue
secondary server 
output queue
min
min
min
min
outgoing
TCP
segment to 
client C
source P
dest C
seq 23
ACK 110
WinSize 7
byte 24
byte 23
Figure 2. Primary server bridge constructs TCP segments.
2. Disable the promiscuous receive mode of the network
interface.
3. Disable the a-to-a address translation of the destina-
tion ﬁeld for incoming TCP segments.
4. Disable the a(cid:2)-to-a address translation of the destina-
tion ﬁeld for outgoing TCP segments.
5. Take over the IP address of the primary server.
After the change of IP address is completed, the bridge re-
sumes sending TCP segments.
If the primary server fails, it is guaranteed that the sec-
ondary server has received all TCP segments that the pri-
mary server has acknowledged. If the secondary server has
received additional segments, it acknowledges them. How-
ever, those acknowledgments are sent to the primary server
as long as the bridge has not been reconﬁgured.
We let T be the time interval from the time of the fail-
ure of the primary server to the time the router updates its
Address Resolution Protocol (ARP) table as a response to
the ARP request that the secondary server sent. None of
the TCP segments that the secondary server sent during T
reaches the client, which has two effects. First, the client
will not acknowledge any of those segments, and the sec-
ondary server will retransmit those segments. Second, the
client will not receive acknowledgments for any segments
it sent after the primary server failed, and the client retrans-
mits those segments periodically.
The secondary server can receive data from the client
until the promiscuous receive mode of its network interface
is disabled. The secondary server’s TCP layer discards TCP
segments that the client retransmitted if it has received a
copy of those segments.
After the completion of the IP takeover, the secondary
server sends its acknowledgments directly to the client. The
secondary server acknowledges only those segments it has
received. The secondary server does not receive a client’s
segments if it dropped them before the IP takeover occurred,
or if the router forwarded the segments between the time
that the secondary server disabled the promiscuous receive
mode and the router updated its ARP table. The client
will retransmit any unacknowledged segments. Because the
client has not received an acknowledgment from the pri-
mary server, the client must have a copy of those segments.
During the reconﬁguration of the secondary server
bridge, neither the sequence number counter nor the ACK
sequence number nor the window size needs to be changed.
All TCP segments that have been sent to the client contain
sequence numbers that match the sequence numbers of the
segments that the secondary server generated. The TCP seg-
ments that the primary server sent to the client carried the
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
smaller of the ACKs and window sizes that were advertised
by the TCP layers of the primary server and the secondary
server.
Once the IP takeover is completed, the secondary server
disables all functions of its bridge and behaves like any stan-
dard TCP server.
6. Failure of the Secondary Server
If the fault detector detects a failure of the secondary server,
the primary server performs the following tasks:
1. Remove all payload data from the primary server out-
put queue, place the data into a newly created TCP seg-
ment (or multiple segments, if necessary), and send the
segment to the client.
2. Disable the demultiplexer for incoming IP datagrams.
Route all incoming TCP segments directly to the TCP
layer.
3. Disable the delay of TCP segments that the primary
server created. Do not modify the acknowledgment
ﬁeld or the window size of those segments. However,
continue to subtract the offset (cid:1) from the sequence
number ﬁeld of all outgoing TCP segments that are ad-
dressed to the client.
After the completion of the recovery from the failure of
the secondary server, all TCP segments that the primary
server sent to the client contain the acknowledgment ack
and window size win that the primary server’s TCP layer
chose.
During normal operation, all segments that the primary
server bridge sends to the client carry sequence numbers
that the secondary server S assigned. The bridge adjusts all
sequence numbers assigned by the TCP layer of the primary
server P by subtracting (cid:1). In case the secondary server
fails, the bridge of the primary server must not discontinue
to compensate the offset because the client’s TCP layer is
synchronized to the sequence numbers that the secondary
server generated.
7. Connection Establishment
The primary and secondary server bridges must be able to
distinguish between TCP failover connections, which are
serviced by the replicated server, and ordinary TCP connec-
tions. This distinction must be made for each segment that
passes through the primary and secondary server bridges.
We implemented two methods for specifying whether a
TCP connection is a TCP failover connection. In the ﬁrst
method, the socket interface was augmented to allow the
application program to set the TCP failover option for each
streaming socket it opens. This scheme is ﬂexible and el-
egant, but requires modiﬁcation of the application source
code.
In the second method, the user can enable the TCP
failover option for a set of port numbers. All connections
that use one of those ports are treated as TCP failover con-
nections. The user must specify the same set of ports on the
primary server host and the secondary server host.
7.1. Client-Initiated Connection Establishment
Establishing a TCP connection involves a three-way hand-
shake. First, the endpoint that requests the connection
(client) sends a TCP segment that has the synchronization
ﬂag set (SYN segment) to the listening endpoint (server).
The SYN segment speciﬁes a server port and contains the
client’s initial sequence number. If the server wants to ac-
cept the connection, it sends back a SYN segment that ac-
knowledges the client’s SYN segment. The server’s seg-
ment contains the server’s initial sequence number and an
acknowledgment for the client’s SYN segment. For the
third step, the client acknowledges the server’s SYN seg-
ment. The connection is then established, and either side
can send TCP segments.
When the client sends its initial SYN segment to estab-
lish a TCP failover connection, both primary and secondary
server receive the SYN segment. The primary server bridge
passes the SYN segment to the TCP layer. When the TCP
layer accepts the connection request, it sends a SYN seg-
ment in return. On receiving this segment from the TCP
layer, the primary server bridge creates the primary and sec-
ondary server output queues, and enqueues the segment.
At the same time, the bridge stores the sequence number
seq(cid:4)(cid:5)(cid:5) of that segment to be able to perform the sequence
number offset calculation.
No special action is necessary at the secondary server.
The secondary server bridge performs the address transla-
tion for the incoming and outgoing SYN segments based on
the network ID of the client endpoint’s IP address.
When the primary server bridge receives the SYN seg-
ment that the secondary server’s TCP layer created, it cal-
culates the sequence number offset (cid:1) by subtracting the
sequence number of that segment seq(cid:8)(cid:4)(cid:5)(cid:5) from seq(cid:4)(cid:5)(cid:5).
Then the primary bridge constructs the SYN segment to be
sent to the client. The MSS ﬁeld of that segment is set to
the minimum of the Maximum Segment Size (MSS) ﬁelds
contained in the SYN segments that the TCP layers of the
primary and secondary servers created. By sending the TCP
segment, the primary server bridge completes its initializa-
tion procedure.
The client TCP layer completes the three-way handshake
by sending an acknowledgment for the server’s SYN seg-
ment. The primary server bridge and the secondary server
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
bridge handle the acknowledgment segment in the same
way as all future incoming segments.
The primary server must maintain a primary server out-
put queue and a secondary server output queue for every
active TCP connection. A TCP connection is uniquely iden-
tiﬁed by the 4-tuple (client IP address, client TCP port num-
ber, primary server IP address, primary server TCP port
number).
7.2. Server-Initiated Connection Establishment
The primary server P and the secondary server S initiate
the establishment of a TCP connection to an unreplicated
server T (e.g., back-end database server in a multi-tier sys-
tem) by sending a SYN segment. Assuming that the appli-
cation running on P and S is deterministic, both P’s TCP
layer and S’s TCP layer generate a SYN. When it receives
the ﬁrst SYN segment, P’s bridge creates the output queues
and enqueues the segment. When the bridge of one server
receives the other server’s SYN segment, it calculates the
sequence number offset, creates a SYN segment and sends
it to T. When the TCP layer of T accepts the connection re-
quest, it sends a SYN segment in return. The primary server
bridge and the secondary server bridge handle the acknowl-
edgment segment in the same way as all future incoming
segments. The servers complete the three-way handshake
by sending an acknowledgment for the client’s SYN seg-
ment.
8. Connection Termination
Terminating a TCP connection involves a four-way hand-
shake. TCP requires that each direction of the connection
is shut down independently of the other. To terminate one
direction of a TCP connection, the sending endpoint must
send a TCP segment with the FIN ﬂag set. Either side can
initiate the connection termination process. The other end-
point acknowledges the FIN segment. The connection is
then in a half-closed state, in which the endpoint that has
not sent the FIN is still allowed to send data. The other end-
point must acknowledge all incoming segments, but is not
allowed to send data. The half-closed state prevails until the
side that remained active sends a FIN. As soon as the other
side acknowledges the FIN, the connection is closed.
As in connection establishment, only the primary server
bridge is actively involved in connection termination. The
primary server bridge remains active as long as the connec-
tion is not fully closed. In a half-closed state, the primary
server bridge must merge the segments generated by the pri-
mary and backup servers. As long as the client-to-server
side remains open, the primary server acknowledges client
segments only if the secondary server has acknowledged
those segments. Otherwise, the secondary server might
not have segments that the primary acknowledged when a
failover occurs. As long as the server-to-client side remains
open, the primary server must not send any segments to the
client before it receives identical segments from the sec-
ondary server.
If the primary server bridge receives the ﬁrst FIN from
the client, it marks the TCP connection closed by the client.
As soon as it sends the FIN that the server generated, the
bridge marks the connection as fully closed. It then waits
for the client’s acknowledgment of the server’s FIN and
deletes all internal data structures that were allocated for the
connection. If the secondary server S does not receive the
client’s ACK for the FIN segment, S retransmits it. When
the bridge receives a FIN that S sent after the bridge re-
moved all internal data structures associated with the con-
nection, it creates an ACK and sends it back to S.
If the TCP layers of the primary and secondary servers
terminate the connection, the primary server bridge inter-
nally marks the TCP connection as closed by the servers.
As soon as the bridge receives the FIN sent by the client
C, it marks the connection as fully closed.
It then waits
for the servers’ acknowledgment of the client’s FIN. The
bridge deletes all internal data structures that were allocated
for the connection after it sent the segment that contains
the ACK of the client’s FIN. If the client does not receive
the servers’ ACK, it retransmits the FIN. When the primary
server bridge receives a FIN sent by the client C after it re-
moved all internal data structures associated with the con-
nection, it creates an ACK and sends the ACK back to C.
9. Measurements
To measure the performance of the TCP Failover protocol,
we conducted a number of experiments. The TCP Failover
protocol was implemented in the FreeBSD 4.4Lite kernel,
which ran on 566MHz Pentium III Celeron PCs. The client
computer was a 1GHz Pentium III PC running Mandrake
7.2 Linux, which ran the 2.2.17 kernel. The PCs were con-
nected using 100Mbit/s Ethernet.
All measurements were done from the viewpoint of
a client application that communicates with a redundant