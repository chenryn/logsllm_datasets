```  
优化方法:  
1、调整SQL，把tbl2的条件 也带上。  
那么就直接在索引中过滤了，效率急剧提升。  
```  
postgres=# explain (analyze,verbose,timing,costs,buffers) select count(*) from tbl1 join tbl2 on (tbl1.id=tbl2.id) where tbl1.id between 2000000 and 2090000 and tbl2.id between 2000000 and 2090000;  
                                                                     QUERY PLAN                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------  
 Aggregate  (cost=4557.24..4557.25 rows=1 width=8) (actual time=47.634..47.634 rows=1 loops=1)  
   Output: count(*)  
   Buffers: shared hit=499 read=1  
   I/O Timings: read=0.009  
   ->  Merge Join  (cost=0.95..4555.26 rows=793 width=0) (actual time=0.063..41.903 rows=90001 loops=1)  
         Merge Cond: (tbl1.id = tbl2.id)  
         Buffers: shared hit=499 read=1  
         I/O Timings: read=0.009  
         ->  Index Only Scan using idx_tbl1_1 on public.tbl1  (cost=0.43..2026.43 rows=87990 width=4) (actual time=0.019..10.119 rows=90001 loops=1) 带where条件，直接索引过滤  
               Output: tbl1.id  
               Index Cond: ((tbl1.id >= 2000000) AND (tbl1.id   Index Only Scan using idx_tbl2_1 on public.tbl2  (cost=0.43..2075.75 rows=90126 width=4) (actual time=0.041..10.355 rows=90001 loops=1) 带where条件，直接索引过滤  
               Output: tbl2.id   
               Index Cond: ((tbl2.id >= 2000000) AND (tbl2.id   Index Scan using idx_tbl1_1 on public.tbl1  (cost=0.43..2332.71 rows=82034 width=9) (actual time=0.014..14.820 rows=90001 loops=1) 带where条件，直接索引过滤  
         Output: tbl1.id, tbl1.info  
         Index Cond: ((tbl1.id >= 9000000) AND (tbl1.id   Index Scan using idx_tbl2_1 on public.tbl2  (cost=0.43..2725.93 rows=95855 width=9) (actual time=0.013..14.881 rows=90001 loops=1) 带where条件，直接索引过滤  
         Output: tbl2.id, tbl2.info  
         Index Cond: ((tbl2.id >= 9000000) AND (tbl2.id <= 9090000)) 带where条件，直接索引过滤  
         Buffers: shared hit=737  
 Planning Time: 0.293 ms  
 Execution Time: 61.697 ms  
(14 rows)  
```  
2、修改内核，支持query rewrite. 自动补上关联字段的WHERE条件。  
[《PostgreSQL 优化器逻辑推理能力 源码解析》](../201602/20160225_01.md)    
[《PostgreSQL 函数稳定性与constraint_excluded分区表逻辑推理过滤的CASE》](../201605/20160531_01.md)    
## 小结  
merge join ，左右两个join对象，扫描的范围如下：  
1、有过滤条件的，有索引的表，走索引精准过滤。  
2、没有过滤条件的，有索引的，从索引头部开始扫描，直到超出边界停止扫描。所以可能有放大。  
优化方法1、改写SQL  
优化方法2、修改内核，支持query rewrite.   
## 参考  
[《PostgreSQL 优化器逻辑推理能力 源码解析》](../201602/20160225_01.md)    
[《PostgreSQL 函数稳定性与constraint_excluded分区表逻辑推理过滤的CASE》](../201605/20160531_01.md)    
https://www.postgresql.org/docs/12/planner-optimizer.html  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")