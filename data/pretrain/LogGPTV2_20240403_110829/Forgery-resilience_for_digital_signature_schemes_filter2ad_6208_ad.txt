i
m = ym
= ymi ymi+b
. So, we derive (gm · g−1
mi
• Game 2. In a second step, we take care of the case in which
the adversary is outputting a spurious signature for which
y ∈ {y1, . . . , y} and denote this event E2. That is, we
consider that the malicious signer is making use of the aux-
iliary information to produce the spurious pair. Let i be the
index such that (yi, wi) = (y, w). Using the equation
of the Accept algorithm, we can write ga
ym+b
and ga
)a = (y ·
mi
yi)m−mi (mod n). Setting x = gm · g−1
, c = y · yi, and
mi
δ = m − mi, we obtain the equation xa = cδ (mod n).
Since δ ∈ Z
a, gcd(a, δ) = 1. We can use the extended
Euclidean algorithm to obtain two integers β and γ such that
γa + βδ = 1. Then, we can construct an efﬁcient adver-
sary which is able to extract a-th roots of random elements in
Z
By (3) we obtain
n, using the equality c = cγa+βδ =xβ · cαa (mod n).
Pr[Ap wins|E2] = Pr[Aroot wins]
i
1
=
(1 − 2−a)
Pr[AFACT wins].
Since 2−a is negligible then, under the factorization assump-
tion, the probability of Ap winning with E2 occurring is neg-
ligible.
• Game 3. In this last game, we have y ∈ {y1, . . . , yN}.
That is, the y contained in the spurious signatures matches
one of the ones that are released for the honest signatures, let
us assume that it matches yi. In such a case, we construct
an adversary against factoring. Following the factoring as-
sumption, AFACT, ﬁrst calls Gen to obtain n to factor and
uses KeyGen to generate the key material. It then calls Ap
m ) such that ga
on input sk = (g, K, aux) and pk = (y, z).
It gets the
m = ym
spurious pair (m, g
i . Then,
yb
AFACT simulates the Sign algorithm of Ap with state ctr = i
and computes the signature of the message m under the key
(g, gi = FK(i)). We denote this signature (gm , yi). As the
scheme is correct, this signature is acceptable and valid, in
contrast to the spurious pair, so ga
i . Hence, we
yb
obtain ga
Since only one of the two signatures is valid, we must have
m. As gcd(a, q − 1) = 1, we deduce that gm =
gm = g
m (mod q). Hence, AFACT recovers the factorization of n
g
by computing q = gcd(gm − g
m , n) so we have
m (mod n).
m = ym
m = ga
Pr[Ap wins] = Pr[AFACT wins],
which is negligible under the factorization assumption.
5.3 Validatibility: Security against Powerful
Forgers
We now formalize the security against a polynomially-bounded
forger who can break any hardness assumption.
The idea is the following. We consider a variation of the scheme
in which the signer generates each gi randomly and independently
from the others. We then show that in this scheme no adversary
can produce a signature that turns to be valid except with probabil-
ity less than or equal to 2−α. Then, we come back to our original
scheme in which the gi’s are generated pseudorandomly. If there
exists an adversary who is able to produce a valid signature with
non-negligible probability then she can be transformed into a dis-
tinguisher for the PRF. The following lemma formalizes the fact
that if the values g1, . . . , gn of the scheme described in Section 4
are chosen randomly, then any (even computationally unbounded)
adversary is not able to produce a valid signature.
LEMMA 1. Assume that the KeyGen algorithm of Section 4 is
modiﬁed as follows. The values g1, . . . , gN are chosen following a
uniform distribution and independently from each other. Then, no
adversary, even computationally unbounded, can produce a valid
signature, except with probability 2−α.
Note that this lemma is stated considering a computationally un-
bounded adversary. Obviously, it remains true when we consider a
polynomially bounded adversary with access to problem solvers.
PROOF. Without loss of generality, we assume that the adver-
sary makes N queries to the signing Oracle. First note that the
adversary can recover the factorization of Nacc so that she can com-
pute by herself a such that xP rime(y) = a (mod N )acc. Hence,
the only useful information that the signer reveals about sk is pk
and N valid signatures ((gm1 , y1), . . . , (gmN , yN )) on the mes-
sages m1, . . . mN . Using only one signature, say the i-th, the set
of possible keys given this information is
n : ga = y, ga
n : ga = y, ga
i
SKi =(g, gi) ∈ Z2
i = yi, gmi = gm · gb
i = gmi · g−m
=(g, gi) ∈ Z2
i = yi, gb
We note that, by the last two equations of the set SKi, the second
element of the tuple, gi, is completely determined by the choice of
g. Hence, the cardinality of SKi is equal to the number of solutions
to the equation ga = y. As a consequence of Thm 2, we have that
|SKi| = a > 2α. Note that the description of SKi only depends
on the choice of g so the adversary can discard all the other SKj’s
for j = i.
i , ga
i = yi, and gb
We must now ﬁnd out how many of these acceptable keys out-
put a valid signature for a message m. As yi, gm, and K are
ﬁxed, the valid signature is unique (due to Thm 3). We thus need
to analyze the number of pairs (g, gi) that produce that valid sig-
nature. By deﬁnition of valid signatures, such a pair should satisfy
the equalities gm = gm · gb
i = FK(i). Note
that the ﬁrst equality can be rewritten as g =gm · g−b
As gcd(a, b) = 1, the last two equations imply that there is only
one solution for gi. Once this gi is found, there exists only one
possible g that satisﬁes the ﬁrst equation. So, there exists only one
key pair that produces valid signatures. Since there are at least 2α
acceptable keys and one valid key, uniformly distributed among
the set of acceptable keys (g is randomly chosen by the signer), the
probability that an adversary recovers the valid key is bounded by
2−α.
i m−1
 .
Now, we are ready to prove the main theorem regarding the val-
idatibility property of our scheme.
THEOREM 5. The construction proposed in Section 4 is vali-
datable against polynomial-time adversaries who have access to
an oracle to solve the factorization problem.
PROOF. Let us consider the adversary AOhard who tries to pro-
duce a valid signature in one of the following two settings.
• Game0. In the ﬁrst setting, the adversary is interacting with
the real scheme.
• Game1. In this case, the PRF FK of the signer is replaced by
picking random elements from Z
n.
We consider an algorithm D who only outputs 1 when AO wins
the game. Otherwise, it outputs 0. As the PRF is indistinguishable
from a random function, we have
Pr[D(AGame0)
→ 1] − Pr[D(AGame1
O
O
By Lemma 1, we know that Pr[AGame1
] ≤ 2−α. Therefore, it must
be that | Pr[AGame0
] − 2−α| = negl(λ). The scheme proposed in
Section 4 is, thus, validatable.
O
O
) → 1] = negl(λ).
Acknowledgements
The work described in this paper has been supported, in part, by
the European Commission through the ICT Programme under con-
tract ICT-2007-216646 ECRYPT II, and by the National Compe-
tence Center in Research on Mobile Information and Communi-
cation Systems (NCCR-MICS), a center of the SNF under grant
number 5005-67322.
We also would like to thank the anonymous reviewers for helping
us to improve this paper.
6. REFERENCES
[1] Thomas Baignères and Matthieu Finiasz. KFC - the krazy
feistel cipher. In ASIACRYPT 2006, pages 380–395, 2006.
[2] Niko Bari´c and Birgit Pﬁtzmann. Collision-free
accumulators and fail-stop signature schemes without trees.
In EUROCRYPT 1997, pages 480–494.
[3] Mihir Bellare and Phillip Rogaway. The exact security of
digital signatures - how to sign with RSA and Rabin. In
EUROCRYPT 1996, pages 399–416.
[4] Josh Cohen Benaloh and Michael de Mare. One-way
accumulators: A decentralized alternative to digital sinatures
(extended abstract). In EUROCRYPT 1993, pages 274–285.
[5] Jan Camenisch, Markulf Kohlweiss, and Claudio Soriente.
An accumulator based on bilinear maps and efﬁcient
revocation for anonymous credentials. In PKC 2009, pages
481–500, 2009.
[6] Jan Camenisch and Anna Lysyanskaya. Dynamic
accumulators and application to efﬁcient revocation of
anonymous credentials. In CRYPTO 2002, pages 61–76.
[7] Jean-Sébastien Coron. On the exact security of full domain
hash. In CRYPTO 2000, pages 229–235.
[8] Jean-Sébastien Coron, Antoine Joux, Avradip Mandal, David
Naccache, and Mehdi Tibouchi. Cryptanalysis of the rsa
subgroup assumption from tcc 2005. In PKC 2011.
Proceedings, volume 6571 of Lecture Notes in Computer
Science, pages 147–155. Springer, 2011.
[9] Ivan Damgård, Torben P. Pedersen, and Birgit Pﬁtzmann. On
the existence of statistically hiding bit commitment schemes
and fail-stop signatures. In CRYPTO 1993, pages 250–265.
[10] Whitﬁeld Difﬁe and Martin Hellman. New directions in
cryptography. IEEE Transactions on Information Theory,
22:644–654, 1976.
[11] Georg Frobenius. Über einen Fundamentalsatz der
Gruppentheorie, II. Sitzungsberichte der Preussischen
Akademie Weissenstein, 1907.
[12] Taher El Gamal. A public key cryptosystem and a signature
scheme based on discrete logarithms. In CRYPTO 1984,
pages 10–18.
[13] Shaﬁ Goldwasser, Silvio Micali, and Ronald L. Rivest. A
digital signature scheme secure against adaptive
chosen-message attacks. SIAM J. Comput., 17(2):281–308,
1988.
[14] Jens Groth. Cryptography in subgroups of zn. In TCC 2005,
pages 50–65.
[15] Leslie Lamport. Constructing digital signatures from a
one-way function. Technical report, SRI International
Computer Science Laboratory, 1979.
[16] Arjen K. Lenstra and Eric R. Verheul. Selecting
cryptographic key sizes. J. Cryptology, 14(4):255–293, 2001.
[17] David Naccache and Jacques Stern. A new public key
cryptosystem based on higher residues. In ACM Conference
on Computer and Communications Security, pages 59–66,
1998.
[18] Lan Nguyen. Accumulators from bilinear pairings and
applications. In CT-RSA 2005, volume 3376, pages 275–292,
2005.
[19] Kaisa Nyberg. Fast accumulated hashing. In FSE 1996,
volume 1039, pages 83–87, 1996.
[20] National Institute of Standards and Technology. FIPS PUB
186-2: Digital Signature Standard (DSS). NIST, 2000.
[21] Torben P. Pedersen and Birgit Pﬁtzmann. Fail-stop
signatures. SIAM J. Comput., 26(2):291–330, 1997.
[22] Birgit Pﬁtzmann. Digital Signature Schemes, General
Framework and Fail-Stop Signatures, volume 1100. 1996.
[23] John M. Pollard. A monte carlo method for factorization.
BIT Numerical Mathematics, 15(3):331–334, 1975.
[26] Reihaneh Safavi-Naini, Willy Susilo, and Huaxiong Wang.
An efﬁcient construction for fail-stop signature for long
messages. Journal of Information Science and Engineering,
17(6):879–898, 2001.
[27] Katja Schmidt-Samoa. Factorization-based fail-stop
signatures revisited. In ICICS 2004, pages 118–131.
[28] Adi Shamir. On the generation of cryptographically strong
pseudorandom sequences. ACM Trans. Comput. Syst.,
1(1):38–44, 1983.
[29] Willy Susilo, Reihaneh Safavi-Naini, and Josef Pieprzyk.
RSA-based fail-stop signature schemes. In ICPP Workshops,
pages 161–166, 1999.
[30] Eugène van Heijst, Torben P. Pedersen, and Birgit Pﬁtzmann.
New constructions of fail-stop signatures and lower bounds
(extended abstract). In CRYPTO 1992, pages 15–30.
[31] Eugène van Heyst and Torben P. Pedersen. How to make
efﬁcient fail-stop signatures. In EUROCRYPT 1992, pages
366–377.
[32] Michael Waidner and Birgit Pﬁtzmann. The dining
cryptographers in the disco - underconditional sender and
recipient untraceability with computationally secure
serviceability (abstract). In EUROCRYPT 1989, page 690.
APPENDIX
A. EFFICIENCY ANALYSIS
Among the ﬁve algorithms of our scheme, the setup is certainly
the most expensive operation to perform. Generating strong primes
of the speciﬁed form mentioned earlier is done in time roughly
O4
F(λ) + (1 + α + F(λ))4. Note that this complexity is in
fact very close to the key generation of RSA with strong primes [25]
and is only done once.
Using some simple optimization techniques, we can drastically
reduce the complexity of modular exponentiations to the power of
a and b by choosing values for a and b with very low Hamming
weight. The security proof of our scheme is based on the size of
a and b and not their Hamming weight. Considering the today’s
factoring algorithms, assuming low Hamming weight for a and b
does not help the adversary as, in the end, the size of p and q does
not change. Assuming that this choice of a and b does not weaken
the security, one can use the standard ‘square-and-multiply’ tech-
nique and reduce all exponentiations to a, resp. b, to α + Hwt(a),
resp. α + Hwt(b), modular multiplications, where Hwt denotes the