title:Key Agreement for Decentralized Secure Group Messaging with Strong
Security Guarantees
author:Matthew Weidner and
Martin Kleppmann and
Daniel Hugenroth and
Alastair R. Beresford
Key Agreement for Decentralized Secure Group Messaging with
Strong Security Guarantees
Matthew Weidner
PI:EMAIL
Carnegie Mellon University
Pittsburgh, PA, USA
Martin Kleppmann
Daniel Hugenroth
Alastair R. Beresford
(mk428,dh623,arb33)@cst.cam.ac.uk
University of Cambridge
Cambridge, UK
ABSTRACT
Secure group messaging protocols, providing end-to-end encryp-
tion for group communication, need to handle mobile devices fre-
quently being offline, group members being added or removed, and
the possibility of device compromises during long-lived chat ses-
sions. Existing work targets a centralized network model in which
all messages are routed through a single server, which is trusted to
provide a consistent total order on updates to the group state. In
this paper we adapt secure group messaging for decentralized net-
works that have no central authority. Servers may still optionally
be used, but they are trusted less. We define decentralized continu-
ous group key agreement (DCGKA), a new cryptographic primitive
encompassing the core of a decentralized secure group messaging
protocol; we give a practical construction of a DCGKA protocol and
prove its security; and we describe how to construct a full messag-
ing protocol from DCGKA. In the face of device compromise our
protocol achieves forward secrecy and post-compromise security.
We evaluate the performance of a prototype implementation, and
demonstrate that our protocol has practical efficiency.
CCS CONCEPTS
• Security and privacy → Key management; Distributed sys-
tems security.
KEYWORDS
Secure group messaging; decentralized systems; post-compromise
security
ACM Reference Format:
Matthew Weidner, Martin Kleppmann, Daniel Hugenroth, and Alastair R.
Beresford. 2021. Key Agreement for Decentralized Secure Group Messaging
with Strong Security Guarantees. In Proceedings of the 2021 ACM SIGSAC
Conference on Computer and Communications Security (CCS ’21), November
15–19, 2021, Virtual Event, Republic of Korea. ACM, New York, NY, USA,
22 pages. https://doi.org/10.1145/3460120.3484542
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
© 2021 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-8454-4/21/11.
https://doi.org/10.1145/3460120.3484542
1 INTRODUCTION
WhatsApp, Signal, and similar messaging apps have brought end-
to-end encryption to billions of users globally, demonstrating that
the benefits of such privacy-enhancing technologies can be enjoyed
by users who are not technical experts. Modern secure messaging
protocols used by these apps have several important characteristics:
Asynchronous: A user can send messages to other users regard-
less of whether the recipients are currently online. Offline
recipients receive their messages when they are next online
again (even if the sender is now offline). This property is
important for mobile devices, which are frequently offline.
Resilient to device compromise: If a user’s device is compro-
mised, i.e., all of that device’s secret key material is revealed
to the adversary, the protocol nevertheless provides forward
secrecy (FS): any messages received before the compromise
cannot be decrypted by the adversary. Moreover, protocols
can provide post-compromise security (PCS) [14]: users regu-
larly update their keys so the adversary eventually loses the
ability to decrypt further communication. As secure messag-
ing sessions may last for years, these properties are impor-
tant for limiting the impact of a compromise.
Dynamic: Group members can be added and removed at any time.
In the case when only two users are communicating, the Signal
protocol [32] is widely used. However, generalizations of this two-
party protocol to groups of more than two users are not straight-
forward. For example, WhatsApp’s group messaging protocol does
not provide PCS [36, 43]. Signal implements group messaging by
sending each message individually to each group member via a
two-party secure channel, which is inefficient for large groups.
Secure group messaging protocols have been the subject of much
recent cryptographic work, which we summarize in Section 3. A
notable example is the Messaging Layer Security (MLS) protocol,
a standard under development by an IETF working group [5, 31],
which provides FS/PCS and is designed to scale to large groups.
However, MLS assumes that all messages modifying the group
state (i.e. adding/removing members or performing key updates for
PCS) are delivered to all members in the same order. If two group
members concurrently modify the group state, one of the requests
must be rejected and retried. This total order is typically enforced
by routing all messages through a centralized, semi-trusted delivery
service; alternatively, a consensus protocol could be used.
There are many systems in which such centralization is undesir-
able. Email is a prominent example of a decentralized communica-
tion method. Anonymity networks such as Tor [16] or Loopix [33]
 This work is licensed under a Creative Commons Attribution International 4.0 License. CCS '21, November 15–19, 2021, Virtual Event, Republic of Korea. © 2021 Copyright is held by the owner/author(s). ACM ISBN 978-1-4503-8454-4/21/11. https://doi.org/10.1145/3460120.3484542   Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2024rely crucially on the assumption that no single node is able to ob-
serve all network traffic. Protesters use mesh networks, in which
mobile devices exchange messages without any servers, to avoid
censorship [1, 4, 38]. In systems such as these, a protocol that as-
sumes a central node or consensus cannot be used, because it would
defeat the purpose of the underlying network’s decentralization.
In this paper, we present a decentralized, asynchronous secure
group messaging protocol supporting dynamic groups. Our pro-
tocol works with any underlying network without requirements
on message ordering or latency: it can be deployed in peer-to-peer
or anonymity networks; it tolerates network partitions, high la-
tency links, and disconnected operation; and it does not require any
servers or consensus protocol. If servers are optionally used, there
is no need to trust them to order messages correctly, and users can
switch from one server to another (or use multiple servers at the
same time) without worrying about preserving message ordering.
Our protocol provides end-to-end encryption with forward se-
crecy and PCS, even when multiple users concurrently modify the
group state. It is practical, using only efficient and widely deployed
cryptographic primitives. It provides key agreement: messages to
the group need only be encrypted and sent once with small constant
overhead, regardless of group size. Group membership changes and
key updates (for PCS) require effort proportional to the group size.
In this paper we make the following contributions:
• We define Decentralized Continuous Group Key Agreement
(DCGKA), a new security notion for establishing shared sym-
metric keys in dynamic groups. Our definition generalizes
Continuous Group Key Agreement (CGKA) [3] to the decen-
tralized setting.
• We construct a protocol that implements DCGKA (Section 6),
prove its correctness and security (Section 7), and use it to
implement secure group messaging (Section 4).
• We evaluate the performance of a prototype implementation
of our protocol (Section 8), demonstrating that it is efficient
enough for practical deployment.
2 GOALS AND ASSUMPTIONS
In this section we summarize the goals of our protocol and the
threat model for which it is designed.
A secure group messaging protocol allows a group with a given
set of users to be created, allows group members to add and remove
other members, and allows group members to send messages to
the current set of members. We distinguish between application
messages (messages that a user wishes to send to the group) and
control messages (sent by the protocol to update group state). The
protocol must meet the following security goals:
Confidentiality: An application message sent by a group member
can only be decrypted by users who are also members of
the group at the time the message is sent, according to the
sender’s view of the group.
Integrity: Messages cannot be undetectably modified by anyone
but the member who sent them.
Authentication: The sender of a message cannot be forged, and
only members can send messages to the group.
Forward secrecy (FS): After a group member decrypts an appli-
cation message, an adversary who compromises the private
state of that member cannot decrypt that message.
Post-compromise security (PCS): If an adversary compromises
a group member, learning a snapshot of their current private
state (including all secret keys), but the group member re-
tains the ability to send messages, then the adversary can
only decrypt messages until that group member sends a PCS
update message that “heals” the compromise. More precisely,
the adversary cannot decrypt messages sent by any group
member who has processed the PCS update. In case an ad-
versary gains persistent access to a device, PCS ensures that
they lose decryption ability as soon as their persistent access
is revoked (e.g., by a software update) and the group member
sends a PCS update message.
Eventual consistency: All group members receive the same set
of application messages (possibly in different orders), and
all group members converge to the same view of the group
state as they receive the same set of control messages.
Our protocol ensures these security properties in the face of an
adversary who can perform arbitrary active network attacks. If
servers are used to relay messages, the adversary also fully controls
those servers.
We require the protocol to be decentralized, which means that
whenever any subset of users is able to physically exchange mes-
sages, they can communicate via the protocol. For example, consider
a group of protesters split across two physical locations, and as-
sume that devices at each location are able to communicate (e.g.
via a mesh network such as Briar [10] or Bridgefy [1]), but that
long-range communication between the locations is interrupted
(perhaps due to an adversary). This is known as a network par-
tition [19]. In such a scenario, we require that the users at each
location can continue to send and receive application messages, and
to add and remove group members. Messages should be delivered
immediately to local users, and be delivered to remote users as soon
as long-range communication is restored. Such message delay may
present usability challenges, but we think it is preferable to the
alternatives (delaying communication between co-located users, or
dropping messages entirely).
Decentralization implies that we cannot assume messages are
routed through a single server, since that would prevent communi-
cation between co-located users who cannot reach the server but
can connect to each other. It also rules out majority voting or con-
sensus, since a majority of users can reside at most in one location,
leaving a minority in the other location unable to communicate.
2.1 Limitations
Decentralization involves trade-offs, which we summarize in this
section. We also explain some simplifying assumptions we make.
Efficiency. The main practical downside of decentralization is
reduced efficiency. Our protocol’s PCS update and group member-
ship change messages have size 𝒪(n), where n is the number of
group members, while in MLS those messages have size 𝒪(log(n)).
However, in absolute terms, the linear cost is acceptable: in a group
with 128 members, a key update operation in our protocol takes
70 ms of CPU time per client and transmits 40 kB of network traffic.
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2025MLS allows up to 50,000 members per group; our protocol is
impractical for groups of that size. However, we argue that secure
messaging for groups of thousands of people does not have a plausi-
ble threat model: large groups are more easily infiltrated by agents
of the adversary, making the protocol’s confidentiality properties
irrelevant. We believe that secure messaging is most valuable in
small-to-medium sized groups, for which a 𝒪(n) cost is acceptable.
Our protocol also stores some state for each PCS update mes-
sage until every group member acknowledges the message, so the
state size may grow without bound if some group member never
acknowledges messages. The size of the stored state can be reduced
by using a different protocol (a variant of Sender Keys), but this
increases the cost of membership changes to 𝒪(n
2). In practice, the
storage cost is negligible on today’s computing devices.
Removed users. When a user is removed in the decentralized
setting, the removed user can continue sending messages to group
members who have not yet received the instruction to remove that
user. However, our protocol prevents removed users from violating
confidentiality with such messages.
Malicious group members. In general, we assume that group mem-
bers correctly follow the protocol. A group member can send mal-
formed protocol messages that make other group members disagree
on keys, causing denial of service (the same is true of MLS [12]).
However, group members cannot violate the protocol in a way that
prevents them, or any members they add, from being removed from
the group (Section 7).
Scope of device compromise. While we can guarantee all of the
security goals against network attacks at all times, a device compro-
mise inevitably temporarily impacts confidentiality, integrity, and
authentication. For PCS we assume that following a device compro-
mise, the adversary does not use the private state it has acquired
to impersonate the compromised user until that user sends a PCS
update message, as in many PCS protocols [14]. After the compro-
mised user sends a PCS update message, the security properties are
restored. If the adversary does impersonate a user, the compromise
is healed once that user, and any users the adversary added, are
removed from the group (Section 7).
Causal order processing. Messages are processed after all causally
prior protocol messages are received (Section 5.1), in contrast to in-
stant message decryption in Signal. MLS has a similar requirement,
and it is easily satisfied by retransmitting missing messages.
Unique additions. To simplify the presentation of our algorithms,
we assume that user additions are unique: if the same user is added
more than once to the same group, then each user addition results in
a separate protocol instance, and each is associated with a separate
ID. This can be achieved e.g. by including a nonce in the user ID.
Metadata privacy. Some protocols (including MLS) encrypt meta-
data, such as the identity of a user being added to a group. However,
these techniques do not work directly in a decentralized setting.
We leave metadata privacy for future work.
Public Key Infrastructure (PKI). We assume the existence of a PKI
that allows group members to obtain a correct public key for other
users. One approach would be for individual users to authenticate
each other (e.g. by scanning QR codes on each others’ phones if the
users are co-located in person, or by reading out a low-entropy code
over the phone and upgrading it to a shared secret using a PAKE
protocol), and to build a web of trust from these pairwise checks.
Other approaches are possible [39], but details of this decentralized
PKI are outside the scope of this paper.
3 RELATED WORK
There are many existing secure messaging protocols [39]. Schemes
for two-party communication, providing forward secrecy and PCS
to varying degrees, have been studied extensively over the past few
years, starting with the Signal protocol [32] and its analysis [13],
followed by several new protocols and their analyses [6, 17, 22, 23,
34] as well as a modular analysis and generalization of Signal [2].
Among group messaging protocols for more than two parties,
relatively few are both asynchronous and support dynamic groups,
which we consider critical requirements for practical group messag-
ing on mobile devices. We focus on such protocols in our discussion
below. See Table 1 for a high-level comparison.
Signal groups use a simple protocol: the sender of each applica-
tion message sends the message individually to each other group
member using the two-party Signal protocol [36]. This approach
quickly becomes inefficient in large groups, as every application
message requires n − 1 two-party messages in a group of size n.
Also, care is needed to achieve PCS: using the ordinary Signal pro-
tocol, a group member effectively performs a PCS update only after
receiving a message from every other group member, which would
never happen if one member is always offline.
Sender Keys is another simple protocol, used by WhatsApp [36,
43]. In Sender Keys, each group member generates a symmetric
key for messages they send, and then sends this key individually
to each other group member using the two-party Signal protocol.
For each message sent by this member to the group, a new key
is derived pseudorandomly from the previous key, providing a
ratchet for forward secrecy. Whenever a user is removed, each
remaining group member generates a new key and sends it to
the other remaining members over the same two-party channels.
The protocol could provide PCS by updating keys periodically, but
WhatsApp chooses not to do this.
Like Signal groups, Sender Keys can be adapted to the decentral-
ized setting; the disadvantage is that PCS updates are expensive.
If one user is compromised, all of the sender keys become known