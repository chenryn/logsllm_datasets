### Training the Next Generation of Hardware Hackers: Teaching Computer Organization and Assembly Language Hands-On with Embedded Systems

**Date:** Wednesday, May 5, 2010

#### Development
- **Development Timeline:** The curriculum and materials took approximately one year to develop and were first implemented in a single semester.
- **Sharing Knowledge:** Our goal is to share our ideas, lessons learned, and the tools we developed with the broader community.
- **Cultural Impact:** We aim to promote and spread the hardware hacking culture.

#### Goals
- **Educational Focus:** Encourage undergraduate Electrical Engineering and Computer Science students to think "closer to the metal."
- **Computer Organization:** Understanding computer organization is essential for grasping the behavior of code.
- **Assembly Language:** Learning Assembly Language helps students understand the inner workings of computers and microprocessors.
- **Rationale for Assembly:** While high-level languages like C are more efficient and cost-effective for design, Assembly provides a deeper understanding of machine operations. It allows students to learn the fundamentals before transitioning to higher-level languages.

#### Implementation
- **Hands-On Approach:** Provide each student with a development kit.
- **Simplified Learning:** Flatten the learning curve for working with embedded systems.
- **Toolchain Access:** Equip each student with a free, user-friendly toolchain.

#### Challenges
- **Embedded Development:** Newcomers often find embedded development challenging due to complex Integrated Development Environments (IDEs).
- **Current Solutions:** Projects like Arduino have made significant progress, but they are not ideal for teaching computer organization.
- **Need for Better Tools:** There is a need for more accessible and effective tools.

#### The Bootloader
- **On-Chip ROM Bootloader:** Factory-installed on-chip ROM bootloader.
- **USB Bootloader:** Allows loading code from a student's PC via USB.
- **Cost-Effective:** No need for expensive, device-specific programmers.
- **Platform Limitation:** The current bootloader only works with Windows, which we plan to address.

#### Development Board
- **Chip Used:** Freescale MC9S08JS16.
- **Features:**
  - Single active IC.
  - USB bootloader functionality.
  - 10 GPIO pins (with 2 additional pins available under certain conditions).
  - Compact size (about 1.6" square).
  - Cost-effective at $25 per board (in quantities of 50).

#### The Kit
- **Components:**
  - JS16 Development Board.
  - Small solderless breadboard.
  - USB cable.
  - Parts for the first project.
  - Packaged in a 6"x8" Zip-Lock Static Bag.
  - Various accessory daughter boards for each project (to minimize wiring and focus on machine organization).

#### Assembler
- **Technology:** Built using Python, compatible with all major operating systems.
- **Functionality:**
  - Translates Assembly files into Freescaleâ€™s S19 file format for bootloading.
  - Generates human-readable listing files.
  - Implements macros and custom features.
  - Compatible with any text editor.

#### First Semester
- **Student Enrollment:** 17 students from Electrical Engineering and Computer Science.
- **Equipment:** Each student received a development board for the semester.
- **Projects and Exams:** Four projects and one hands-on exam.
- **Staff:** One professor and one teaching assistant.

#### Projects (First Generation)
1. **Blink an LED:** Demonstrate the use of the toolchain.
2. **LED Patterns:** Simulate real and fictitious events (e.g., traffic light).
3. **Scrolling Characters:** Display characters on an LED display (row/column arrangement).
4. **Crayon Vending Machine:** Implement a system with motor control.

#### Lessons Learned
- **Static Safety:** Students need thorough education on static safety. An ESD warning sticker and verbal reminders are insufficient.
- **Board Rework:** Reworking boards is time-consuming for the teaching assistant.
- **Bootloader Improvement:** The manufacturer's bootloader was a limiting factor and needs to be re-implemented.

#### Future Work
- **Bootloader Redesign:** Rewrite the bootloader as a USB mass-storage device for cross-platform compatibility.
- **Documentation and Code:** Develop more example code and continuously improve documentation.
- **In-Circuit Emulation:** Provide each student with an inexpensive In-Circuit Emulator.
- **Debugging Tools:** Implement in-system, instruction-by-instruction debugging, though it currently requires non-free software.

#### Documentation
- **Access:** Available at [ee.base2.us](http://ee.base2.us)

#### Open Source
- **Open Resources:**
  - Gerber files for PCB.
  - Assembler available under the GPL.
  - Parts list and assembly instructions available online.
- **Community Engagement:** We encourage others to use, modify, and help disseminate our developments.

#### Questions
- **Common Inquiry:** "I want a board!"
- **Response:** All resources are open source. You can create your own board using the provided information. We do not sell or manufacture boards in bulk but can guide you through the process.

**Questions?**