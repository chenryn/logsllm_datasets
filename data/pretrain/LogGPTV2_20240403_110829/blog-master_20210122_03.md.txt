## PostgreSQL 内置分片进展 - 基于 `postgres_fdw`

### 作者
digoal

### 日期
2021-01-22

### 标签
PostgreSQL, 分片, `postgres_fdw`

---

## 背景
通过查看每个主要版本的 PostgreSQL 发布说明，你会发现 PostgreSQL 的发展非常顺利。基于 `postgres_fdw` 的分片功能即将实现。

本页面旨在概述在 PostgreSQL 核心中添加分片功能所需的特性。该页面的目的是为在核心中添加分片功能提供一个待办事项列表。参与此功能开发的成员可以使用此页面来查看当前状态和待办事项更新。

## 概述
数据库中的分片是指将数据水平分区到一个或多个数据库分片上。这是一种将表分区到一个或多个外部服务器上的机制。声明式分区功能允许用户将表分区到同一数据库服务器上的多个分区表中，而分片则允许将表分区到外部服务器上，并且父表位于用户创建分布式表的主节点上。

PostgreSQL 中的内置分片功能将采用基于 `postgres_fdw` 的方法。`FDW` 是基于 SQL/MED 规范定义如何访问外部数据源。PostgreSQL 提供了多种用于访问外部数据源的外部数据包装器（`FDW`）。使用基于 `FDW` 的分片，数据被分区到分片上以优化查询性能。查询的不同部分（如聚合、连接）被下推到分片上。这使得繁重的查询处理可以在分片上完成，只有查询结果才会返回到主节点。

虽然使用 `FDW` 架构会增加一些开销，但这种方法比其他更复杂的跨节点通信技术更为简单且易于实现。

![分片架构图](20210122_03_pic_001.png)

上图解释了 PostgreSQL 中当前的内置分片方法。分区是在外部服务器上创建的，PostgreSQL `FDW` 用于访问这些外部服务器，并通过分区修剪逻辑决定访问哪些分区以及排除哪些分区。

## 现有的 PostgreSQL 分叉版本
目前已有十几个 Postgres 的分叉版本实现了分片功能。尽管许多这些分叉版本取得了成功，但它们通常落后于社区发布的 Postgres 版本。通过在社区版 Postgres 中实现分片功能，所有用户都可以在当前发布的 Postgres 版本中使用这一功能。这应该会大大增加需要高写入扩展性或拥有非常大数据库环境下的社区版 Postgres 的采用率。

在 Postgres 中实现分片的一个巨大挑战是尽量减少代码更改。大多数 Postgres 的分片分叉版本都需要对社区代码进行大量修改，这对于不需要分片功能的广大 Postgres 社区来说是不可接受的。随着 Foreign Data Wrappers (`FDW`) 的出现，现在可以考虑一种内置分片实现，这种实现可以通过可接受程度的代码更改来完成。

这种可能的基于 `FDW` 的分片解决方案的基本设计基于 [Postgres-XC](http://postgresxc.wikia.com/wiki/Postgres-XC_Wiki) 的工作，这是由 NTT 开发的，历时近十年。[Postgres-XL](http://www.postgres-xl.org/) 是这种设计的一种更灵活的实现。[Citus](https://github.com/citusdata/citus) 结合了这两个项目的思想，提供了无需从 Postgres 分叉的分片功能。

## 基于 `FDW` 的增强
为了支持分片架构，`FDW` 机制需要增强。这将使大部分查询处理在外部服务器端完成，只有过滤后的结果才会发送回父节点。下推能力使分片（即外部服务器）能够执行繁重的任务，从而显著提高此功能的性能。在这种情况下，下推是指将查询的部分推送到外部服务器，以减少从外部服务器到父节点的数据传输量。基本的下推技术包括选择目标列表下推和 WHERE 子句下推。

在上面的查询中，计划器将根据分区键（例如 logdate）决定访问哪个分区。WHERE 子句将被下推到包含相应分区的外部服务器。这是 `postgres_fdw` 中可用的基本下推功能。

分片功能需要更高级的下推能力，以便将尽可能多的操作下推到包含分区的外部服务器上，从而最小化通过网络发送到父节点的数据量。

![FDW 下推时间线](fdw_timeline.png)

上图展示了在过去几次主要发布中添加的下推能力。这些功能的好处在于，即使整个分片功能尚未完全实现，它们也能在许多用例中发挥作用。

需要注意的是，即使没有完整的分片功能，这些 `FDW` 增强也对 `FDW` 查询的性能非常有用。

## 分区增强
声明式 [表分区](https://git.postgresql.org/gitweb/?p=postgresql.git;a=commitdiff;h=f0e44751d7175f) 在 PostgreSQL 10 中由 Amit Langote 添加，它重用了现有的表继承基础设施。PG 10 中的新功能意味着不再需要手动为子分区创建约束或手动编写将查询路由到正确分区的基础设施。虽然 PG 10 添加了表分区功能，但在 PG 11 中又添加了许多重要的性能改进、分区修剪和分区管理功能。

声明式分区也将用于分片。

## MVP 分片功能缺失的部分
在 PostgreSQL 中实现分片功能之前，仍有一些重要特性需要实现。在本节中，我们将讨论这些特性和相关的挑战。当然，还有其他与数据库集群管理相关的功能（如备份/故障切换、监控）未在此列表中列出。

* 外部数据包装器事务的两阶段提交 (2PC)
  目前 `FDW` 事务不支持两阶段提交。这意味着，如果在一个事务中使用多个外部服务器，并且其中一个外部服务器上的事务部分失败，则所有外部服务器上的整个事务都应失败。这个特性对于保证数据库集群中的数据一致性以及支持 OLTP 工作负载非常重要。
  有关此功能的设计提案和补丁已在黑客邮件列表中讨论多年，但由于缺乏足够的社区兴趣，该功能的设计仍未确定。

* 并行外部扫描
  当一个查询在一个查询中查询多个外部扫描时，所有外部扫描都是按顺序依次执行的。并行外部扫描功能将允许多个外部扫描并行执行。这个特性对于 OLAP 用例非常重要。例如，如果您在一个大型分区表上运行 AVG 查询，该表分布在大量的分区上，AVG 操作将按顺序发送到每个外部服务器，并将结果发送到父节点。父节点将聚合数据并将其发送给客户端。一旦我们有了并行外部扫描功能，所有的平均操作将在所有外部服务器上并行执行，并将结果发送到父节点。父节点将聚合数据并将其发送给客户端。
  这是完成分片功能的关键部分。我们目前有聚合下推功能，可以将聚合操作下推到外部服务器，但我们还没有在所有分区上并行运行聚合操作的功能。
  这个特性对于 OLAP 用例尤其重要。拥有大量包含分区的外部服务器，并在所有外部服务器上并行运行聚合操作是非常强大的。
  并行外部扫描功能的基础是异步查询执行，这是 PostgreSQL 的一个重大变更。

* 全局快照管理器
  这是另一个非常重要的且难以实现的特性，对于分片是强制性的。全局快照管理器的目的是提供全局事务一致性。
  假设您有两个并发客户端正在使用一个分片表，客户端 #1 正在尝试访问服务器 1 上的分区，客户端 #2 也在尝试访问服务器 1 上的分区。客户端 #2 应该看到一致的分区视图，即在客户端 #1 事务期间对分区所做的任何更改（例如更新）不应可见。一旦客户端 #1 的事务提交，更改将对所有新事务可见。全局快照管理器应确保所有事务都能看到数据库集群的一致视图。所有并发使用数据库集群（表分片在多个外部服务器上）的客户端都应该看到数据库集群的一致视图。
  这是一个很难解决的问题，像 Postgres Professional 这样的公司已经尝试通过使用外部事务管理器来解决这个问题。
  有人提到使用其他方法，如 Clock-SI（分区表的快照隔离），这是 Google Cloud Spanner 和 YugaByte 等成功的项目所遵循的方法。

* 分片管理
  外部服务器上的分区目前不会自动创建，如“PostgreSQL 中的分片”部分所述。分区需要手动在外部服务器上创建。如果您正在创建具有大量分区和子分区的分区表，这可能会非常繁琐。
  分片管理功能应提供自动创建分区和子分区的能力。这将使创建分片表变得非常容易。
  尽管不打算深入探讨此功能的设计细节，但基本思路是在声明式分片语法之上构建分片表语法。`postgres_fdw` 将用于将 DDL 下推到外部服务器，而 `FDW` 只用于 SELECT 或 DML 操作。对外部源执行 DDL 不属于 SQL/MED 规范的一部分。
  该功能尚未在社区中开始。

* 批量 DML 操作
  对于具有外部分区的分区表，INSERT / UPDATE / DELETE / COPY 操作必须支持多次插入操作。这对于加速批量操作是必要的，就像对于单个或本地划分的关系一样。

## 公司
多家公司一直在投入时间和资源，将此功能添加到 PostgreSQL 核心中。以下是一些公司的名称。这些公司的 PG 社区成员正在努力将此功能添加到核心中：

* [EnterpriseDB](https://www.enterprisedb.com/)
* [NTT](https://www.ntt.com/en/index.html)
* [Postgres Professional](https://postgrespro.co.il/)
* [HighGo Software Inc.](https://www.highgo.ca/)
* [2ndQuadrant](https://www.2ndquadrant.com/en/)
* [NTT Data](https://www.nttdata.com/global/en/)
* [Fujitsu](https://www.fujitsu.com/)

## 待办事项列表
以下是社区中正在进行的分片功能及其最新状态：

* 异步追加到 `postgres_fdw` 节点（并行外部扫描）
  * URL: [hackers 邮件列表](https://www.postgresql.org/message-id/c5b4ca1e-5550-a405-4199-191143f4e8c2%40postgrespro.ru)
  * 状态: 该补丁最初由 Horiguchi-san 编写。最近由 HighGo 的 Movead 进行了审查和基准测试。
  * 后续步骤: Fujita-san 目前正在审查此补丁，准备将其纳入 PG 14。

* 全局事务管理器（`FDW` 事务的两阶段提交）
  * URL: [commitfest 条目](https://commitfest.postgresql.org/28/1574)
  * 状态: 该补丁最初由 Masahiko Sawada 和 Ashutosh Bapat 编写。Sawada 和 Muhammad Usama 最近在社区中做了大量工作。自从 Sawada 和 Usama 合作以来，该主题的活动明显增多。Amit Kaplia 最近也提出了他的评论。
  * 后续步骤: Sawada 和 Usama 将继续跟进一些更新，需要一位资深的提交者来审查此补丁。

* 基于 CSN 的快照（全局快照所需）
  * URL: [hackers 邮件列表](https://www.postgresql.org/message-id/2020061217411210236822%40highgo.ca)
  * 状态: 该补丁最初由 Postgres Professional 编写。最近由 HighGo 的 Movead 重新整理了补丁，并提供了带有 WAL 支持、性能改进和各种错误修复的增强补丁。我们需要社区中的资深人员来审查此补丁，这是在 PostgreSQL 中添加全局快照管理器的基础。
  * 后续步骤: 我们需要社区中的资深人员来审查此补丁，这是在 PostgreSQL 中添加全局快照管理器的基础。

* 批量 DML 操作 - 对具有外部分区的分区表的 INSERT/UPDATE/DELETE/COPY 操作需要支持多次插入操作。这对于加速批量操作是必要的，就像对于单个或本地分区关系一样。
  * URL: [hackers 邮件列表](https://www.postgresql.org/message-id/20200628151002.7x5laxwpgvkyiu3q%40development) 和 [hackers 邮件列表](https://www.postgresql.org/message-id/3d0909dc-3691-a576-208a-90986e55489f%40postgrespro.ru)
  * 状态: 这些补丁最初分别由 Tomas Vondra 和 Andrey Lepikhov 编写。它们都显示了对外国表和具有外国分区的分区表的大批量插入的显著加速。第一个补丁正在开发中。Ashutosh Bapat 和 Etsuro Fujita 正在审查第二个补丁。
  * 后续步骤: 我们需要社区中的资深人员来审查这些补丁。

* 其他待办事项
  * 基于 Clock SI 集成的全局快照管理器
     * 状态: HighGo 的 Usama 和 Movead 正在设计提案和开发计划，将在适当的时候与该组共享。
  * 分片管理（自动在分片上创建分区）
     * 状态: 目前社区中没有人积极从事这项工作。
  * `FDW` 增强
     * 待定（需要定义对分片功能重要的剩余 `FDW` 增强）
     * 状态: 目前社区中没有人从事这项工作。

## 用例
以下是四个可能的用例，要求逐步增加：

1. 仅读取分片上的跨节点读取查询，使用聚合查询，例如数据仓库：这是最容易实现的，因为它不需要全局事务管理器和全局快照管理器，并且由于聚合的原因，从分片返回的行数很少。
2. 仅读取分片上的跨节点读取查询，使用非聚合查询：这将使协调器收集和处理许多返回的行，展示 `FDW` 传输机制的可扩展性。
3. 读写分片上的跨节点读取查询：这需要一个全局快照管理器，以确保分片返回一致的数据。
4. 跨节点读写查询：这需要一个全局快照管理和全局事务管理器。

## 早期文档
[幻灯片](http://momjian.us/main/writings/pgsql/sharding.pdf) 包含了早期提案的图表。2015 年举行了一次关于集群的 [会议](https://wiki.postgresql.org/wiki/PG-EU_2015_Cluster_Summit)。

#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给 PG kernel hacker、数据库厂商等，帮助提高数据库产品质量和功能。说不定下一个 PG 版本就有您提出的功能点。针对非常好的提议，奖励限量版 PG 文化衫、纪念品、贴纸、PG 热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")。

#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")

#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")

#### [德哥 / digoal's github - 公益是一辈子的事。](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")

![德哥的微信](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")

#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")

#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")

#### [关于德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")