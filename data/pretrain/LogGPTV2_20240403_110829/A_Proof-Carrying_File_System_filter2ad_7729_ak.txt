(cid:126)C;(cid:126)i
2. M :: Σ; Ψ; E; Γ α⇐= s ◦ [u1, u2] (cid:38) (cid:126)C;(cid:126)i implies M :: Σ; Ψ; E, E(cid:48); Γ α−→ s ◦ [u1, u2] (cid:38)
(cid:126)C;(cid:126)i
40
Proof. The proof follows by a simultaneous induction on the given derivations. We show
some representative cases below.
Case. M1 :: Σ; Ψ; E; Γ α=⇒ s1 ◦ [u1, u2] (cid:38) (cid:126)C1; (cid:126)i1
M2 :: Σ; Ψ; E; Γ α=⇒ s2 ◦ [u1, u2] (cid:38) (cid:126)C2; (cid:126)i2
(pf conjI M1 M2) :: Σ; Ψ; E; Γ α=⇒ s1 ∧ s2 ◦ [u1, u2] (cid:38) (cid:126)C1, (cid:126)C2; (cid:126)i1, (cid:126)i2
∧I
1. |= (cid:126)C1, (cid:126)C2
2. |= (cid:126)C1 and |= (cid:126)C2
3. E(cid:48) |= (cid:126)i1, (cid:126)i2
4. E(cid:48) |= (cid:126)i1 and E(cid:48) |= (cid:126)i2
5. M1 :: Σ; Ψ; E, E(cid:48); Γ α−→ s1 ◦ [u1, u2]
6. M2 :: Σ; Ψ; E, E(cid:48); Γ α−→ s2 ◦ [u1, u2]
7. (pf conjI M1 M2) :: Σ; Ψ; E, E(cid:48); Γ α−→ s1 ∧ s2 ◦ [u1, u2]
(Assumption)
(Deﬁnition)
(Assumption)
(Deﬁnition)
(i.h. on 1st premise, 2, 4)
(i.h. on 2nd premise, 2, 4)
(Rule (∧I) on 5,6)
Case.
E |= i
(pf sinjI) :: Σ; Ψ; E; Γ α=⇒ i ◦ [u1, u2] (cid:38) ·;·interI1
1. E |= i
2. E, E(cid:48) |= i
3. (pf sinjI) :: Σ; Ψ; E, E(cid:48); Γ α−→ i ◦ [u1, u2]
Case.
(pf sinjI) :: Σ; Ψ; E; Γ α=⇒ i ◦ [u1, u2] (cid:38) ·; i
interI2
1. E(cid:48) |= i
2. E, E(cid:48) |= i
3. (pf sinjI) :: Σ; Ψ; E, E(cid:48); Γ α−→ i ◦ [u1, u2]
(premise)
(Weakening-state)
(Rule (interI) on 2)
(Assumption)
(Weakening-state)
(Rule (interI) on 2)
2] (cid:38) (cid:126)C2; (cid:126)i2
interE
Case. M1 :: Σ; Ψ; E; Γ α⇐= i ◦ [u1, u2] (cid:38) (cid:126)C1; (cid:126)i1
(pf sinjE M1 M2) :: Σ; Ψ; E; Γ α=⇒ s(cid:48) ◦ [u(cid:48)
M2 :: Σ; Ψ; E, i; Γ α=⇒ s(cid:48) ◦ [u(cid:48)
1, u(cid:48)
2] (cid:38) (cid:126)C1, (cid:126)C2; (cid:126)i1, (cid:126)i2
1, u(cid:48)
1. |= (cid:126)C1, (cid:126)C2
2. E(cid:48) |= (cid:126)i1, (cid:126)i2
3. M1 :: Σ; Ψ; E, E(cid:48); Γ α−→ i ◦ [u1, u2]
4. M2 :: Σ; Ψ; E, i, E(cid:48); Γ α−→ s(cid:48) ◦ [u(cid:48)
1, u(cid:48)
2]
5. (pf sinjE M1 M2) :: Σ; Ψ; E, E(cid:48); Γ α−→ s(cid:48) ◦ [u(cid:48)
1, u(cid:48)
2]
(Assumption)
(Assumption)
(i.h. on 1st premise,1,2)
(i.h. on 2nd premise,1,2)
(Rule (interE) on 3,4)
Case.
(cid:126)C1 (cid:46)(cid:47) (cid:126)C2 = (Ψ |= c)
|= (cid:126)C1
(pf cinjI) :: Σ; Ψ; E; Γ α=⇒ c ◦ [u1, u2] (cid:38) (cid:126)C2;·consI
41
1. |= (cid:126)C1
2. |= (cid:126)C2
3. (cid:126)C1 (cid:46)(cid:47) (cid:126)C2 = (Ψ |= c)
4. Ψ |= c
5. (pf cinjI) :: Σ; Ψ; E, E(cid:48); Γ α−→ c ◦ [u1, u2]
(2nd premise)
(Assumption)
(1st premise)
(1,2,3)
(Rule (consI) on 4)
2] (cid:38) (cid:126)C2; (cid:126)i2
consE
Case. M1 :: Σ; Ψ; E; Γ α⇐= c ◦ [u1, u2] (cid:38) (cid:126)C1; (cid:126)i1
(pf cinjE M1 M2) :: Σ; Ψ; E; Γ α=⇒ s(cid:48) ◦ [u(cid:48)
M2 :: Σ; Ψ, c; E; Γ α=⇒ s(cid:48) ◦ [u(cid:48)
1, u(cid:48)
2] (cid:38) (cid:126)C1, (cid:126)C2; (cid:126)i1, (cid:126)i2
1, u(cid:48)
1. |= (cid:126)C1, (cid:126)C2
2. E(cid:48) |= (cid:126)i1, (cid:126)i2
3. M1 :: Σ; Ψ; E, E(cid:48); Γ α−→ c ◦ [u1, u2]
4. M2 :: Σ; Ψ, c; E, E(cid:48); Γ α−→ s(cid:48) ◦ [u(cid:48)
1, u(cid:48)
2]
5. (pf cinjE M1 M2) :: Σ; Ψ; E, E(cid:48); Γ α−→ s(cid:48) ◦ [u(cid:48)
M :: Σ; Ψ; E; Γ α⇐= s ◦ [u1, u2] (cid:38) (cid:126)C;(cid:126)i
1, u(cid:48)
2]
Case.
C1 (cid:46)(cid:47) C2 = (Ψ |= u1 ≤ u(cid:48)
M :: Σ; Ψ; E; Γ α=⇒ s ◦ [u(cid:48)
1), (Ψ |= u(cid:48)
1, u(cid:48)
2 ≤ u2)
2] (cid:38) (cid:126)C, (cid:126)C2;(cid:126)i
|= (cid:126)C1
1. |= (cid:126)C, (cid:126)C2
2. E(cid:48) |= (cid:126)i
3. M :: Σ; Ψ; E, E(cid:48); Γ α−→ s ◦ [u1, u2]
4. |= (cid:126)C1
5. C1 (cid:46)(cid:47) C2 = (Ψ |= u1 ≤ u(cid:48)
6. Ψ |= u1 ≤ u(cid:48)
1 and Ψ |= u(cid:48)
7. M :: Σ; Ψ; E, E(cid:48); Γ α−→ s ◦ [u(cid:48)
1), (Ψ |= u(cid:48)
2 ≤ u2
1, u(cid:48)
2]
2 ≤ u2)
Case.
x :: Σ; Ψ; E; Γ, x : s ◦ [u1, u2] α⇐= s ◦ [u1, u2] (cid:38) ·;·hyp
1. Ψ |= u1 ≤ u1 and Ψ |= u2 ≤ u2
2. x :: Σ; Ψ; E, E(cid:48); Γ, x : s ◦ [u1, u2] α−→ s ◦ [u1, u2]
(Assumption)
(Assumption)
(i.h. on 1st premise,1,2)
(i.h. on 2nd premise,1,2)
(Rule (consE) on 3,4)
CS
(Assumption)
(Assumption)
(i.h. on 1st premise,1,2)
(3rd premise)
(2nd premise)
(1,4,5)
(Theorem A.3 on 3,6)
(Reﬂ-time)
(Rule (hyp) on 1)
M1 :: Σ; Ψ; E; Γ α⇐= s1 ⊃ s2 ◦ [u1, u2] (cid:38) (cid:126)C1; (cid:126)i1
(cid:126)C3 (cid:46)(cid:47) (cid:126)C4 = (Ψ |= u1 ≤ u(cid:48)
1), (Ψ |= u(cid:48)
M2 :: Σ; Ψ; E; Γ α=⇒ s1 ◦ [u(cid:48)
1, u(cid:48)
2] (cid:38) (cid:126)C2; (cid:126)i2
(pf impE M1 M2 u(cid:48)
1 u(cid:48)
2) :: Σ; Ψ; E; Γ α⇐= s2 ◦ [u(cid:48)
2] (cid:38) (cid:126)C1, (cid:126)C2, (cid:126)C4; (cid:126)i1, (cid:126)i2
2 ≤ u2)
1, u(cid:48)
|= (cid:126)C3
⊃E
Case.
1. |= (cid:126)C1, (cid:126)C2, (cid:126)C4
(Assumption)
42
1), (Ψ |= u(cid:48)
2 ≤ u(cid:48)
2. |= (cid:126)C3
3. |= (cid:126)C3, (cid:126)C4
4. (cid:126)C3 (cid:46)(cid:47) (cid:126)C4 = (Ψ |= u1 ≤ u(cid:48)
5. Ψ |= u1 ≤ u(cid:48)
6. E(cid:48) |= (cid:126)i1, (cid:126)i2
7. M1 :: Σ; Ψ; E, E(cid:48); Γ α−→ s1 ⊃ s2 ◦ [u1, u2]
8. M2 :: Σ; Ψ; E, E(cid:48); Γ α−→ s1 ◦ [u(cid:48)
9. (pf impE M1 M2 u(cid:48)
1, u(cid:48)
2]
1 ≤ u(cid:48)
1 and Ψ |= u(cid:48)
2 ≤ u2)
2 ≤ u2
1 u(cid:48)
2) :: Σ; Ψ; E, E(cid:48); Γ α−→ s2 ◦ [u(cid:48)
1, u(cid:48)
2]
(4th premise)
(1,2)
(3rd premise)
(3,4,Reﬂ-time)
(Assumption)
(i.h. on 1st premise, 1, 6)
(i.h. on 2nd premise, 1, 6)
(Rule (⊃E) on 7,8,5)
We also need the following substitution lemma in order to prove Theorem 4.1.
Lemma B.2 (Term substitution).
1. If M :: Σ, v:σ; Ψ; E; Γ α=⇒ s ◦ [u1, u2] (cid:38) (cid:126)C;(cid:126)i and Σ (cid:96) t : σ, then M[t/v] ::
Σ; Ψ[t/v]; E[t/v]; Γ[t/v] α[t/v]=⇒ s[t/v] ◦ [u1[t/v], u2[t/v]] (cid:38) (cid:126)C[t/v];(cid:126)i[t/v].
2. If M :: Σ, v:σ; Ψ; E; Γ α⇐= s ◦ [u1, u2] (cid:38) (cid:126)C;(cid:126)i and Σ (cid:96) t : σ, then M[t/v] ::
Σ; Ψ[t/v]; E[t/v]; Γ[t/v] α[t/v]⇐= s[t/v] ◦ [u1[t/v], u2[t/v]] (cid:38) (cid:126)C[t/v];(cid:126)i[t/v].
Proof. By simultaneous induction on the given derivations, and case analysis of the last
rules. For the rules (⊃E), (claims), and (consI), the assumption (Substitution-cons) is
needed. For the rule (interI), (Substitution-state) is needed.
B.2 Proof Veriﬁcation in PCFS
PCFS uses a specialized version of BL’s non-deterministic veriﬁer described above.
As mentioned in Section 4, in PCFS, the problem is to check that M :: Σ;·; E; Γ α−→
auth(k, f, η, u), where α is a view made of fresh constants, u is the time of access, and
E is the environment at time u. Since neither u nor E is known when veriﬁcation is done,
the veriﬁer instead tries to check that M :: Σ, ctime:time;·;·; Γ α−→ auth(k, f, η, ctime),
where ctime is a symbolic constant that represents the actual time of access.
Any constraints containing ctime encountered during veriﬁcation are output from the
veriﬁcation procedure (on the right of (cid:38)); others are checked immediately. This method
is sound because Lemma B.1 shows that any strategy for deciding which constraints to
check during veriﬁcation, and which to output is correct. The constraints written to the
output are then also written in the procap produced, and get checked when the procap
is veriﬁed.
(At that time, ctime is substituted by the actual time of access.) More
precisely, whenever the veriﬁer needs to construct (cid:126)C1 and (cid:126)C2 such that (cid:126)C1 (cid:46)(cid:47) (cid:126)C2 = (cid:126)C
(rules (⊃E), (claims), and (consI)), it sets (cid:126)C1 to those judgments Ψ |= c in (cid:126)C that do
not contain ctime. (cid:126)C2 contains the remaining judgments. (cid:126)C1 is checked immediately by
the veriﬁer, whereas (cid:126)C2 is written to the output procap.
43
Summary of proof veriﬁcation in PCFS. Proof veriﬁcation in PCFS can be sum-
marized as follows. The veriﬁer is given a proof term M, Σ (from a trusted ﬁle), Γ
(in the form of certiﬁcates), k, f, and η.
It tries to check the proof by establishing
the judgment M :: Σ, ctime:time;·;·; Γ α=⇒ auth(k, f, η, ctime) (cid:38) (cid:126)C;(cid:126)i for some (cid:126)C and (cid:126)i,
resolving non-determinism in splitting constraint judgments as described above. If this
succeeds, it issues the procap (cid:104)ψ, (cid:126)C,(cid:126)i, Ξ(cid:105) where ψ = (cid:104)k, f, η(cid:105) and Ξ is a cryptographic
signature.
The procap can be checked during access at time u in environment E by ensuring
that E |= (cid:126)i and that |= (cid:126)C[u/ctime]. We now show that these checks are suﬃcient to
show that M :: Σ;·; E; Γ α−→ auth(k, f, η, u), i.e., the authorization is valid at the time
of access.
Theorem 4.1). Suppose
Theorem B.3
M :: Σ, ctime:time;·;·; Γ α=⇒ auth(k, f, η, ctime) (cid:38) (cid:126)C;(cid:126)i, where ctime is a new constant.
Let u be a (later) point of time at which the environment is E, and suppose that:
enforcement;
(Soundness
of
1. |= (cid:126)C[u/time]
2. E |= (cid:126)i
Then, M :: Σ;·; E; Γ α−→ auth(k, f, η, u).
Proof. We reason as follows:
1. M :: Σ, ctime:time;·;·; Γ α=⇒ auth(k, f, η, ctime) (cid:38) (cid:126)C;(cid:126)i
2. M :: Σ;·;·; Γ α=⇒ auth(k, f, η, u) (cid:38) (cid:126)C[u/ctime];(cid:126)i
3. |= (cid:126)C[u/time]
4. E |= (cid:126)i
5. M :: Σ;·; E; Γ α−→ auth(k, f, η, u)
(Assumption)
(Assumption)
(Lemma B.1 on 2,3,4)
(Assumption)
(Lemma B.2; ctime is fresh)
44