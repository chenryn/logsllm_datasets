* **.CRYPT.** – Autokey 协议错误
* **.DENY.** – 服务器拒绝访问;
* **.INIT.** – 关联初始化
* **.MCST.** – 多播服务器
* **.RATE.** – (轮询) 速率超出限定
* **.TIME.** – 关联超时
* **.STEP.** – 间隔时长改变，偏移量比危险阈值小(1000ms) 比间隔时间 (125ms)大
#### 操作要点
一个时间服务器只会报告时间信息而不会从客户端更新时间（单向更新），而一个节点可以更新其他同级节点的时间，结合出一个彼此同意的时间（双向更新）。
[初次启动](http://www.eecis.udel.edu/%7Emills/ntp/html/debug.html)时：
> 
> 除非使用 iburst 选项，客户端通常需要花几分钟来和服务器同步。如果客户端在启动时时间与 NTP 服务器的时间差大于 1000 秒，守护进程会退出并在系统日志中记录，让操作者手动设置时间差小于 1000 秒后再重新启动。如果时间差小于 1000 秒，但是大于 128 秒，会自动矫正间隔，并自动重启守护进程。
> 
> 
> 当第一次启动时，时间频率文件（通常是 ntp.drift 文件，记录时间偏移）不存在，守护进程进入一个特殊模式来矫正频率。当时钟不符合[规范](http://www.ntp.org/ntpfaq/NTP-s-algo-kernel.htm)时这会需要 900 秒。当校正完成后，守护进程创建时间频率文件进入普通模式，并分步校正剩余的偏差。
> 
> 
> 
NTP 0 层（Stratum 0 ）的设备如原子钟（铯，铷），GPS 时钟或者其他标准时间的无线电时钟为 1 层（Stratum 1）的时间服务器提供时间信号。NTP 只报告[UTC](http://en.wikipedia.org/wiki/Coordinated_Universal_Time) 时间（统一协调时，Coordinated Universal Time）。客户端程序使用[时区](http://en.wikipedia.org/wiki/Time_zone)从 UTC 导出本地时间。
NTP 协议是高精度的，使用的精度小于纳秒（2的 -32 次方）。主机的时间精度和其他参数（受硬件和操作系统限制）使用命令 “ntpq -c rl” 查看（参见 [rfc1305](http://www.ietf.org/rfc/rfc1305.txt) 通用变量和 [rfc5905](http://www.ietf.org/rfc/rfc5905.txt)）。
#### “ntpq -c rl”输出参数
* **precision** 为四舍五入值，且为 2 的幂数。因此精度为 2 precision （秒）
* **rootdelay** – 与同步网络中主同步服务器的总往返延时。注意这个值可以是正数或者负数，取决于时钟的精度。
* **rootdisp** – 相对于同步网络中主同步服务器的偏差(秒)
* **tc** – NTP 算法 [PLL](http://en.wikipedia.org/wiki/PLL) （phase locked loop，锁相环路） 或 [FLL](http://en.wikipedia.org/wiki/Frequency-locked_loop) (frequency locked loop，锁频回路) 时间常量
* **mintc** – NTP 算法 PLL/FLL 最小时间常亮或“最快响应
* **offset** – 由结合算法得出的系统时钟偏移量（毫秒）
* **frequency** – 系统时钟频率
* **sys\_jitter** – 由结合算法得出的系统时钟平均偏差（毫秒）
* **clk\_jitter** – 硬件时钟平均偏差（毫秒）
* **clk\_wander** – 硬件时钟偏移([PPM](http://en.wikipedia.org/wiki/Parts_per_million) – 百分之一)
Jitter (也叫 timing jitter) 表示短期变化大于10HZ 的频率， wander 表示长期变化大于10HZ 的频率 （Stability 表示系统的频率随时间的变化，和 aging, drift, trends 等是同义词）
#### 操作要点（续）
NTP 软件维护一系列连续更新的频率变化的校正值。对于设置正确的稳定系统，在非拥塞的网络中，现代硬件的 NTP 时钟同步通常与 UTC 标准时间相差在毫秒内。（在千兆 LAN 网络中可以达到何种精度？）
对于 UTC 时间，[闰秒 leap second](http://en.wikipedia.org/wiki/Leap_second)  可以每两年插入一次用于同步地球自传的变化。注意本地时间为[夏令时](http://en.wikipedia.org/wiki/Daylight_saving_time)时时间会有一小时的变化。在重同步之前客户端设备会使用独立的 UTC 时间，除非客户端使用了偏移校准。
#### [闰秒发生时会怎样](http://www.ntp.org/ntpfaq/NTP-s-time.htm#Q-TIME-LEAP-SECOND)
> 
> 闰秒发生时，会对当天时间增加或减少一秒。闰秒的调整在 UTC 时间当天的最后一秒。如果增加一秒，UTC 时间会出现 23:59:60。即 23:59:59 到 0:00:00 之间实际上需要 2 秒钟。如果减少一秒，时间会从 23:59:58 跳至 0:00:00 。另见 [The Kernel Discipline](http://www.ntp.org/ntpfaq/NTP-s-algo-kernel.htm).
> 
> 
> 
那么… 间隔阈值（step threshold）的真实值是多少: 125ms 还是 128ms？ PLL/FLL tc 的单位是什么 (log2 s? ms?)？在非拥塞的千兆 LAN 中时间节点间的精度能达到多少？
感谢 Camilo M 和 Chris B的评论。 欢迎校正错误和更多细节的探讨。
谢谢 Martin
### 附录
* [NTP 的纪元](http://www.ntp.org/ntpfaq/NTP-s-algo.htm#AEN1895) 从 1900 开始而 UNIX 的从 1970开始.
* [时间校正](http://www.ntp.org/ntpfaq/NTP-s-algo.htm#Q-ACCURATE-CLOCK) 是逐渐进行的，因此时间的完全同步可能会画上几个小时。
* [节点状态](http://www.ntp.org/ntpfaq/NTP-s-trouble.htm#Q-TRB-MON-STATFIL) 可以被记录到 [summarise/plot time offsets and errors](http://www.ntp.org/ntpfaq/NTP-s-trouble.htm#AEN5086)
* [RMS](http://en.wikipedia.org/wiki/Root_mean_square) – 均方根
* [PLL](http://en.wikipedia.org/wiki/PLL) – 锁相环路
* [FLL](http://en.wikipedia.org/wiki/Frequency-locked_loop) – 锁频回路
* [PPM](http://en.wikipedia.org/wiki/Parts_per_million) – 百万分之一，用于描述频率的变化
* [man ntpq (Gentoo 简明版本)](http://nlug.ml1.co.uk/2012/01/man-ntpq-gentoo-brief-version/853)
* [man ntpq (长期维护版本)](http://nlug.ml1.co.uk/2012/01/man-ntpq-long-version/855)
* [man ntpq (Gentoo 长期维护版本)](http://nlug.ml1.co.uk/2012/01/man-ntpq-gentoo-long-version/856)
### 另见
* [ntpq – 标准 NTP 查询程序](http://www.eecis.udel.edu/%7Emills/ntp/html/ntpq.html)
* [The Network Time Protocol (NTP) 分布](http://www.eecis.udel.edu/%7Emills/ntp/html/index.html)
* NTP 的简明[历史](http://www.ntp.org/ntpfaq/NTP-s-def-hist.htm)
* 一个更多细节的简明历史 “Mills, D.L., A brief history of NTP time: confessions of an Internet timekeeper. Submitted for publication; please do not cite or redistribute” ([pdf](http://www.eecis.udel.edu/%7Emills/database/papers/history.pdf))
* [NTP RFC](http://www.ntp.org/rfc.html) 标准文档
* Network Time Protocol (Version 3) RFC – [txt](http://www.ietf.org/rfc/rfc1305.txt), or [pdf](http://www.rfc-editor.org/rfc/rfc1305.pdf). Appendix E, The NTP Timescale and its Chronometry, p70, 包含了对过去 5000 年我们的计时系统的变化和关系的有趣解释。
* 维基百科: [Time](http://en.wikipedia.org/wiki/Time) 和 [Calendar](http://en.wikipedia.org/wiki/Calendar)
* [John Harrison and the Longitude problem](http://www.rmg.co.uk/harrison)
* [Clock of the Long Now](http://longnow.org/clock/) – The 10,000 Year Clock
* John C Taylor – [Chronophage](http://johnctaylor.com/)
* [Orders of magnitude of time](http://en.wikipedia.org/wiki/Orders_of_magnitude_%28time%29)
* [Greenwich Time Signal](http://en.wikipedia.org/wiki/Greenwich_Time_Signal)
### 其他
SNTP （Simple Network Time Protocol, [RFC 4330](http://tools.ietf.org/html/rfc4330)，简单网络协议）基本上也是NTP，但是少了一些基于 [RFC 1305](http://tools.ietf.org/html/rfc1305) 实现的 NTP 的一些不再需要的内部算法。
Win32 时间 [Windows Time Service](http://en.wikipedia.org/wiki/Network_Time_Protocol#Microsoft_Windows) 是 SNTP 的非标准实现，没有精度的保证，并假设精度几乎有 1-2 秒的范围。（因为没有系统时间变化校正）
还有一个[PTP (IEEE 1588)](http://www.nist.gov/el/isd/ieee/ieee1588.cfm) Precision Time Protocol（精准时间协议）。见维基百科：[Precision Time Protocol](http://en.wikipedia.org/wiki/IEEE_1588)。软件程序为 [PTPd](http://ptpd.sourceforge.net/)。虫咬的功能是这是一个 [LAN](http://en.wikipedia.org/wiki/Local_area_network) 高精度主从同步系统，精度在毫秒级，使用 [International Atomic Time](http://en.wikipedia.org/wiki/International_Atomic_Time) (TAI， [monotonic](http://en.wikipedia.org/wiki/Monotonic_function)，无闰秒)。数据报时间戳需要在网卡中启用。支持 PTP 的网络会对数据报记录时间戳以减少交换机路由器的影响。也可以在不记录时间戳的网络中使用 PTP 但可能应为时间偏差太大而无法同步。因此使用这个需要对网络进行设置。
### 更老的时间同步协议
* DTSS – DEC公司的数字时间同步服务， 被 NTP 所取代。例子： [DTSS VMS C code c2000](http://antinode.info/ftp/dtss_ntp/)。 （哪里有关于 DTSS 的文章或文档吗？）
* [DAYTIME protocol](http://en.wikipedia.org/wiki/DAYTIME)，使用 [TCP](http://en.wikipedia.org/wiki/Transmission_Control_Protocol) 或 [UDP](http://en.wikipedia.org/wiki/User_Datagram_Protocol) 13 端口同步
* [ICMP Timestamp](http://en.wikipedia.org/wiki/ICMP_Timestamp) 和 [ICMP Timestamp Reply](http://en.wikipedia.org/wiki/ICMP_Timestamp_Reply)，使用 [ICMP](http://en.wikipedia.org/wiki/Internet_Control_Message_Protocol) 协议同步
* [Time Protocol](http://en.wikipedia.org/wiki/Time_Protocol)，使用 TCP 或 UDP 37 号端口同步
---
via: 
作者：Martin L 译者：[Liao](https://github.com/liaosishere) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创翻译，[Linux中国](http://linux.cn/) 荣誉推出