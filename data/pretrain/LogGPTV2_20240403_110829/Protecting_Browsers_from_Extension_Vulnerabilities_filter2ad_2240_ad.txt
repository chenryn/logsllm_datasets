Plugin
1
14
3
8
12
8
5
20
2
2
In addition to the Firefox extension system we analyze
in this paper, Firefox has a second, experimental extension
system: Jetpack [27]. Similar to the extension system we
propose, Jetpack exposes browser functionality via narrow
interfaces. Currently, however, each Jetpack extension runs
with the user’s full privileges and has access to the complete
Firefox extension API. As Jetpack matures, we expect the
Firefox developers to restrict the privileges of Jetpack ex-
tensions, but the designers of Jetpack have chosen to focus
ﬁrst on usability and generativity [29].
Internet Explorer has a combined plug-in and extension
system known as Browser Helper Object (BHO) modules.
For example, the Yahoo Toolbar for Internet Explorer is im-
plemented as a BHO. These extensions are written in native
code and have direct access to the win32 API. If a BHO
has a vulnerability (such as a buffer overﬂow), a malicious
web site can issue arbitrary win32 API calls by exploiting
the vulnerability. Recent versions of Internet Explorer run
these BHOs in “protected mode,” [26] reducing their priv-
ileges. However, a compromised BHO still has full access
to web pages (including passwords and cookie) and read
access to the ﬁle system.
One recent paper [25] considers limiting the privileges
of Firefox extensions. They propose a mechanism for sand-
boxing extensions by intercepting various events in the
XPCOM object marshaling layer, incurring a performance
overhead of 19% for a particular policy. Unlike our work,
this paper focuses entirely on mechanism, and the authors
do not determine which policies their mechanism ought to
enforce. We could imagine reducing the privileges of Fire-
fox extensions by using this mechanism to restrict extension
behavior at the escalation points we identify in Section 3.2.
A number of papers [15, 35, 7, 16, 31] consider the prob-
lem of running native plug-in code securely using fault iso-
lation and system call interposition. These techniques fo-
cus on isolating untrusted native code, whereas we focus
on code written in JavaScript, letting us use the standard
same-origin JavaScript sandbox. We are chieﬂy concerned
with the privileges afforded to extensions via explicit APIs,
a topic that has not been studied in much detail. Their
techniques for plug-in conﬁnement are complimentary to
our work and could be used to monitor native binaries dis-
tributed with extensions.
Our work is also related to mashups, which are web
pages that result from sophisticated communication and
data sharing between multiple parties (e.g., plotting data
from one source on a map from another source).
In a
sense, a browser is a mashup combining extension code
and web content into a personalized browsing experience.
Our design draws inspiration from MashupOS [32] and
OMash [14], albeit taking into account subsequent attacks
Figure 10. Privilege use breakdown of popular
Google Chrome extensions.
Performance. Separating extensions into components
could potentially add overhead to inter-component opera-
tions. For example, if a content script needs to use privi-
leges held by the extension core, the content script has to
send a message to the core process instead of simply calling
a function in its own address space. Similarly, DOM access
from content scripts requires crossing from the extension’s
isolated world to the page’s world, incurring an additional
hash table lookup on some execution paths.
To evaluate the run-time overhead of inter-process com-
munication, we measured the round-trip latency for send-
ing a message from a content script to the extension core in
Google Chrome 4.0.249.22 on Mac OS X. We observe an
average round-trip latency of 0.8 ms (n = 100, σ = 0.0079
ms), where each trial is the average of 1000 inter-process
round-trips. Of course, an extension incurs this added la-
tency only for operations that require coordination between
multiple components. For example, an extension that adds
additional EXIF metadata to Flickr [28] incurs this overhead
once per page load to issue a cross-origin XMLHttpRe-
quest, increasing the load time by an unnoticeable 0.8 ms.
To evaluate the run-time overhead of the isolated words
mechanism, we ran a DOM core performance bench-
mark [20] in Chromium 4.0.266.0 on Mac OS X. The
benchmark measures the total speed of a set of append,
prepend, insert, index, and remove DOM operations. In the
main world, the benchmark required an average of 231 ms
(n = 100, σ = 5.46 ms) to complete. When run in an
isolated world, the benchmark took an average of 309 ms
(n = 100, σ = 6.33 ms). The use of isolated worlds adds
33.3% to DOM access time, which we expect would be a
small fraction of overall run and load time.
and design recommendations [10]. In addition, the isolated
worlds heap-segregation mechanism is an outgrowth of the
perspective expressed in [12]. Finally, placing the exten-
sion’s public-key in the URL was suggested in [21] to rem-
edy a vulnerability in Firefox’s signed JAR mechanism.
Browser extensions are also analogous to kernel mod-
ules in operating systems. Buggy kernel modules have long
been a major cause of failures and security vulnerabilities
in operating systems. Nooks [30] and SafeDrive [36] em-
ploy memory access conﬁnement to limit the privileges of
kernel modules. Although the two problems are analogous,
the techniques used are quite different.
6 Conclusion
Browser extensions are often not written by security ex-
perts, and many extensions contain security vulnerabilities.
Every cross-site scripting vulnerability in a Firefox exten-
sion is an avenue for malicious web site operators to install
malware onto the user’s machine because Firefox exten-
sions run with the user’s full privileges. To evaluate whether
extensions actually require such a high level of privilege to
implement their feature set, we analyze 25 “recommended”
extensions from the Firefox extension gallery. We ﬁnd that
the majority of these extensions do not require full privi-
leges. However, reducing the privileges of existing Firefox
extensions is difﬁcult because many Firefox APIs are more
powerful than required to implement extension features.
Although one could imagine restructuring the Firefox
extension interface, we instead recommend building a new
extension platform with security in mind. In our proposed
system, extensions enumerate which privileges they desire
at install-time and are limited to those privileges at runtime.
If an extension does not include a native binary (which most
do not require), then an attacker who compromises the ex-
tension will not gain the privilege to run arbitrary code.
In addition to least privilege, we separate privileges by
dividing extensions into three components: content scripts,
the extension core, and a native binary. Content scripts are
exposed directly to web content but have few privileges.
Native binaries are powerful but (by default) have no direct
contact with web content. The three components interact
via narrow interfaces, reducing the attack surface for the
privileged components. We expect vulnerabilities to exist,
of course, but we hope they will be harder to exploit than a
single cross-site scripting hole.
Acknowledgments
We would like to thank Nick Baum, Erik Kay, Collin
Jackson, Matt Perry, Dawn Song, David Wagner, and the
Google Chrome Team. This work is partially supported
by the Air Force Ofﬁce of Scientiﬁc Research under MURI
Grant No. 22178970-4170 and the National Science Foun-
dation TRUST Grant No. CCF-0424422.
References
[1] Arbitrary code execution using bug 459906.
https://bugzilla.mozilla.org/show_bug.
cgi?id=460983.
[2] JSON. http://www.json.org.
[3] Mozilla Security Advisory 2009-19.
http://www.mozilla.org/security/
announce/2009/mfsa2009-19.html.
[4] Mozilla Security Advisory 2009-39.
http://www.mozilla.org/security/
announce/2009/mfsa2009-39.html.
[5] Skype. http://www.skype.com.
[6] Zemanta. http://www.zemanta.com.
[7] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti. Control-
ﬂow integrity: Principles, implementations, and applica-
tions. In ACM Conference on Computer and Communica-
tions Security (CCS), November 2005.
[8] L. Adamski. Security Severity Ratings. https://wiki.
mozilla.org/Security_Severity_Ratings.
[9] B. Adida, A. Barth, and C. Jackson. Rootkits for JavaScript
Environments. In 3rd USENIX Workshop on Offensive Tech-
nologies, 2009.
[10] A. Barth, C. Jackson, and W. Li. Attacks on JavaScript
Mashup Communication. In Proceedings of the Web 2.0 Se-
curity and Privacy 2009.
[11] A. Barth, C. Jackson, C. Reis, and The Google Chrome
Team. The Security Architecture of the Chromium Browser.
Technical report, Google, 2008.
[12] A. Barth, J. Weinberger, and D. Song.
Cross-Origin
JavaScript Capability Leaks: Detection, Exploitation, and
Defense. In USENIX Security Symposium, 2009.
[13] A. Boodman and E. Kay. Google Mail Checker.
http://code.google.com/chrome/
extensions/samples.html.
[14] S. Crites, F. Hsu, and H. Chen. Omash: Enabling secure web
mashups via object abstractions. In CCS ’08: Proceedings of
the 15th ACM conference on Computer and communications
security, pages 99–108. ACM, 2008.
[15] J. R. Douceur, J. Elson, J. Howell, and J. R. Lorch. Leverag-
ing legacy code to deploy desktop applications on the web.
In USENIX Operating System Design and Implementation,
2008.
´U. Erlingsson, M. Abadi, M. Vrable, M. Budiu, and G. C.
Necula. XFI: Software guards for system address spaces. In
Symposium on Operating System Design and Implementa-
tion (OSDI), 2006.
[16]
[17] Google. Google Chrome Extensions: Most popular gallery.
A Firefox Extension Survey
Our Firefox extension survey (Section 3.1) examines ex-
tensions from the Firefox Add-on “recommended” direc-
tory. We selected two from each category in the directory.
The thirteen categories are: Alerts & Updates, Appearance,
Bookmarks, Download Management, Feeds News & Blog-
ging, Language Support, Photos Music & Videos, Privacy
& Security, Search Tools, Social & Communication, Tabs,
Toolbars, and Web Development.
The twenty-ﬁve extensions in our extension survey are:
Adblock Plus 1.0.2, Answers 2.2.48, AutoPager 0.5.0.1,
Auto Shutdown (InBasic) 3.1.1B, Babel Fish 1.84, Cool-
Previews 2.7.4, Delicious Bookmarks 4.3, docked JS-
Console 0.1.1, DownloadHelper 4.3, Download Statusbar
2.1.018, File and Folder Shortcuts 1.3, Firefox Showcase
0.3.2009040901, Fission 1.3, Glue 4.2.18, GoogleEnhancer
1.70, Image Tweak 0.18.1, Lazarus: Form Recovery 1.0.5,
Mouseless Browsing 0.5.2.1, Multiple Tab Handler 0.9.5,
Quick Locale Switcher 1.6.9, Shareaholic 1.7, Status-bar
Scientiﬁc Calculator 4.5, TwitterFox 1.7.7.1, WeatherBug
2.0.0.4, and Zemanta 0.5.4.
B Google Chrome Extension Survey
Our Google Chrome extension survey (Section 4.1) ex-
amines extensions from the Google Chrome “most popu-
lar” directory. There are no ofﬁcial categories for Google
Chrome extensions. Note that 9 of the extensions are made
by Google developers.
The twenty-ﬁve extensions in our Google Chrome exten-
sion survey are: Google Mail Checker 1.2, AdThwart 0.4.1,
Google Translate 1.1.4, IE Tab, Google Wave Notiﬁer 2.2,
RSS Subscription Extension 1.8.1, Xmarks bookmark sync
0.5.24, Docs PDF/PowerPoint Viewer 1.5.3, AdBloack
1.1.91, Google Quick Scroll 0.5.4, CoolIris, Chromed Bird
1.2.0, Facebook for Google Chrome 1.3, Google Reader
Notiﬁer 1.1, Google Calendar Checker 1.0.3, SmoothScroll
0.6.1, Speed Tracer 0.6, Evernote Web Clipper 1.1, Send
from Gmail 1.11, Bubble Translate 1.2, Chrome Gesture
1.8.0, AniWeather 0.6.19.2, FlashBlock 1.2.11.11, Select to
Get Maps 1.1.1, StumbleUpon 1.0.11208.1.
https://chrome.google.com/extensions/
list/popular.
[18] C. Grier, S. T. King, and D. S. Wallach. How I Learned to
Stop Worrying and Love Plugins. In Web 2.0 Security and
Privacy, 2009.
[19] C. Grier, S. Tang, and S. T. King. Secure Web Browsing
with the OP Web Browser. In IEEE Symposium on Security
and Privacy, 2008.
[20] I. Hickson. DOM Core Performance, Test 1.
http://www.hixie.ch/tests/adhoc/perf/
dom/artificial/core/001.html.
[21] C. Jackson and A. Barth. Beware of ﬁner-grained origins. In
Web 2.0 Security and Privacy, 2008.
[22] C. Jackson, A. Bortz, D. Boneh, and J. C. Mitchell. Pro-
tecting browser state from web privacy attacks. In Proceed-
ings of the 15th International World Wide Web Conference
(WWW), May 2006.
[23] kkovash.
How Many Firefox Users Customize Their
Browser? Blog of Metrics, 2009.
[24] R. S. Liverani and N. Freeman. Abusing Firefox Extensions.
Defcon17, July 2009.
[25] M. T. Louw, J. S. Lim, and V. N. Venkatakrishnan. Enhanc-
In
ing web browser security against malware extensions.
Journal in Computer Virology, August 2008.
[26] Microsoft Developer Network. Introduction of the Protected
Mode API. http://msdn.microsoft.com/en-us/
library/ms537319(VS.85).aspx.
[27] Mozilla Labs. Jetpack.
https://wiki.mozilla.org/Labs/Jetpack.
[28] D. Pupius. Fittr Flickr Extension for Chrome.
http://code.google.com/p/fittr/.
[29] A. Raskin. Jetpack FAQ. http://www.azarask.in/
blog/post/jetpack-faq/, 2009.
[30] M. M. Swift, B. N. Bershad, and H. M. Levy. Improving the
Reliability of Commodity Operating Systems. ACM Trans-
actions on Computer Systems, 23(1):77–110, 2005.
[31] R. Wahbe, S. Lucco, T. E. Anderson, and S. L. Graham. Ef-
ﬁcient Software-Based Fault Isolation. In ACM Symposium
on Operating Systems Principles (SOSP), 1994.
[32] H. J. Wang, X. Fan, J. Howell, and C. Jackson. Protec-
tion and Communication Abstractions for Web Browsers in
MashupOS. In 21st ACM Symposium on Operating Systems
Principles (SOSP), 2007.
[33] H. J. Wang, C. Grier, A. Moshchuk, S. T. King, P. Choud-
hury, and H. Venter. The Multi-Principal OS Construction of
the Gazell Web Browser. In USENIX Security Symposium,
2009.
[34] S. Willison. Understanding the Greasemonkey vulnerabil-
ity. http://simonwillison.net/2005/Jul/20/
vulnerability/.
[35] B. Yee, D. Sehr, G. Dardyk, J. B. Chen, R. Muth, T. Or-
mandy, S. Okasaka, N. Narula, and N. Fullagar. Native
client: A sandbox for portable, untrusted x86 native code.
In IEEE Symposium on Security and Privacy, 2009.
[36] F. Zhou, J. Condit, Z. Anderson,
I. Bagrak, R. En-
nals, M. Harren, G. Necula, and E. Brewer. SafeDrive:
Safe and recoverable extensions using language-based tech-
niquesXFI. In Symposium on Operating System Design and
Implementation (OSDI), 2006.