ing information show that nearly 11, 000 networks (including
2, 800 /24 networks) deaggregated their preﬁx, with a mean
deaggregation factor of 8.5 (2.5 for /24 networks). This, in
combination with the advent of many /24 networks, has re-
sulted in an alarming rise in the number of distinct preﬁxes
in a routing table; since a single routing event triggers a sep-
arate routing update for each preﬁx, this increase in preﬁxes
has led to greatly increased churn.
It does not appear that this deaggregation is being fully
utilized for route diversity; measurements suggest that the
number of distinct paths from a vantage point to the same
destination AS is less than or equal to 2 for more than 99%
of ASs [6].
Given that preﬁx based routing results in greater churn
and larger routing tables, and yet does not usually result in
diﬀering paths, we designed HLP to route at the granular-
ity of AS’s instead of preﬁxes. This separates routing from
addressing, which had been conﬂated in BGP. In addition
to reduced routing state and churn, routing at the AS gran-
ularity has several ancillary beneﬁts. Because the mapping
between address preﬁxes and locations (as identiﬁed by AS)
is much more static than the topology of the network, more
appropriate transport and security mechanisms can be used
for the topology information and for the AS-to-preﬁx map-
ping information. This, in turn, allows for easy detection of
origin misconﬁgurations, in which an AS erroneously claims
ownership of the preﬁx owned by another AS.
2.2.4 Routing Style
BGP uses path-vector routing. Path-vector routing en-
2A speciﬁc variation to the export guideline which we do not
consider as a violation is indirect-peering. Some ASs forward
announcements from one peer to another peer either due to
indirect peering (lack of direct connectivity) or due to sibling
relationships (two AS’s under same administration).
ables complex policies (since it enables ASs to base their
policies on the entire path) and easy loop-suppression. But
the worst-case convergence of a path-vector protocol grows
exponentially with the length of the path [17, 18]. Path
vector routing also introduces unnecessary interdependence3
which impedes the scalability and isolation properties of the
protocol.
The alternatives to path-vector (PV) are the standard
distance-vector (DV) and link-state (LS) styles of routing,
neither of which are good candidates for supporting policy-
based routing. DV routing does not reveal any information
about the path to a destination, thereby hindering policy
routing. LS routing, on the other hand, may violate privacy
norms of policies by revealing every activity to all destina-
tion AS’s.
Apart from policies, LS and DV routing have their own
protocol strengths and limitations. LS routing has fast con-
vergence and incurs low churn, the latter because updates
are for link events, not routing changes. (In PV and DV
routing, one link event can cause many route changes.) More-
over, fault diagnosis is easy with LS protocols, because it
provides complete visibility into the current state of the
network. However, global visibility is antithetical to both
scaling and isolation.
DV routing, in contrast, can be adapted to provide good
isolation (as we show later in Section 3, nodes can hide minor
cost changes to isolate the eﬀect of routing events), but fault
diagnosis is diﬃcult.
None of these approaches are ideal solutions, but each has
its own merits, and thus HLP uses a hybrid of link-state and
path-vector routing. At ﬁrst glance this might seem overly
complex, but the hierarchical structure provides a natural
way to decompose routing between the two styles; HLP uses
link-state within a given hierarchy of AS’s (as speciﬁed by
provider-customer relationships) and uses path-vector be-
tween hierarchies. The link-state component improves con-
vergence and reduces churn within a hierarchy, while the
path-vector component preserves global scalability by hiding
internal route updates across hierarchies (thereby sacriﬁcing
global visibility).
The discussion of these four design issues was intended to
give a ﬂavor of the intuition behind HLP’s design. In the
next section we describe how HLP actually works.
3. THE HLP ROUTING MODEL
In this section, we describe the HLP routing protocol. We
begin by describing the routing structure and the basic route
propagation model of HLP in Sections 3.1 and Section 3.2.
In Section 3.3, we explain the concept of information hiding
which forms the key design principle of HLP that provides
improved scalability and isolation properties. Later, in Sec-
tions 3.4 and 3.5, we describe how HLP handles complex AS
relationships and variations to the default policy guidelines.
3.1 HLP routing structure
The design of HLP leverages the existence of a hierarchi-
cal structure in the AS topology based on provider-customer
relationships. Figure 1 illustrates one such sample AS-level
topology consisting of several provider-customer AS hierar-
3A single routing event on a link triggers route updates to
every AS that utilizes some path traversing the link thereby
making a large fraction of routing events globally visible.
chies. For ease of exposition, we assume that each hierarchy
is based only on the basic provider-customer relationships
and does not incorporate any complex relationships (e.g.,
two ISPs that do not reveal their relationship or have two
diﬀerent relationships in diﬀerent geographic locations). We
will discuss how HLP handles such complex relationships
later in Section 3.4.
We refer to the root AS of each such provider-customer
hierarchy as a tier-1 AS. This deviates from the conven-
tional terminology of tier-1 ISPs, in that, a lower-tier ISP
would be classiﬁed as a tier-1 AS by our deﬁnition if it
is not an explicit customer of any other AS. An AS with
multiple providers (e.g., multi-homed AS) can be part of
more than one provider-customer hierarchy. AS’s in diﬀer-
ent provider-customer hierarchies can connect using peering
links and these peering links can occur at various levels in
the provider-customer hierarchy. We assume that there are
no cycles in the provider customer hierarchy.4
Figure 1: An AS hierarchy indicating provider-customer
and peer-peer relationships. The unidirectional links
represent provider-customer links and the bidirectional
links represent peering links. Peering links can occur at
diﬀerent levels in the hierarchies.
3.2 Basic Route Propagation Model
Based on hierarchical routing structure, HLP uses a com-
bination of link-state routing within a provider-customer hi-
erarchy and path-vector routing across hierarchies.
Link-state aspect of HLP: Within each hierarchy, when an
inter-AS routing event occurs, the other AS’s in the hierar-
chy are notiﬁed using a link-state announcement. This link-
state announcement is at the granularity of AS’s and not at
the granularity of routers. Every AS maintains link-state in-
formation about the inter-AS provider-customer links within
its own hierarchy (inclusive of the links above it) and up-
dates this information upon receipt of a link-state update.
Path-vector aspect of HLP: Between hierarchies, the path-
vector part of HLP is similar to BGP, where an AS propa-
gates reachability information tagged with an AS path. The
primary distinction is that the HLP uses a fragmented path
vector (FPV) that contains only a portion of the AS path
to the destination, rather than the entire AS path as with
BGP. The FPV omits the portion of the AS path within an
AS hierarchy. As the length of the FPV path has no rout-
ing signiﬁcance, every FPV advertisement also carries a cost
metric.
4The current Internet topology satisﬁes this property and
we assume that this would obviously hold in the future. If
a cycle does arise, we need to treat certain links as complex
relationships (refer to Section 3.4) to explicitly break the
cycle.
We now describe through example the basic model of
how routes are propagated within and between AS hierar-
chies. Each node maintains a link-state topology database
and a path-vector style routing table. Nodes exchange two
types of messages:
link-state advertisements (LSAs) and
fragmented-path vectors (FPVs) (Figure 2).
Figure 2: Basic HLP route propagation: Link failure
example
Consider the example AS-topology in Figure 2(a) com-
prising of two provider-customer hierarchies rooted at A and
B. Consider link (C, E) in this topology. Initially an LSA
informs all the nodes in A’s hierarchy of the existence and
cost of link (C, E) (here, we consider all links to have a cost
of 1). A receives the LSA, and propagates a path-vector
to B, with FPV (A, E) and a cost metric of 2. The path
vector is then distributed down the hierarchy to H without
further modiﬁcation of the path - neither the path within
A’s hierarchy nor the path within B’s hierarchy appear in
the FPV.
In a modiﬁed example illustrated in Figure 2(b), when
link (C, E) subsequently fails, nodes within A’s hierarchy
receive an LSA to inform them of the link-failure. However,
since A has an alternate path within its own hierarchy, A
sends a path-vector update to B with a modiﬁed cost. This
is essentially the same as a route withdrawal in BGP. In
turn, B propagates the FPV down its own hierarchy to H. If
however, A did not have an alternate path, A will propagate
a route withdrawal to B.
FPV advertisements may be propagated across more than
one peering link. Such forwarding allows HLP to express
indirect peering, where an AS exports announcements from
one peer to another. In such cases, the FPV path includes
all the peering AS’s along all the paths to avoid routing
loops or the need to perform a cost count to inﬁnity.
To summarize HLP’s basic routing model:
1. All AS’s maintain a link-state database of the topology
in their local hierarchy.
2. The AS path in each FPV includes all AS’s whose
peering links were traversed, but excludes the parts of
the path within the AS hierarchies.
3. All inter-AS links have a cost metric which is added to
the net cost value in an FPV route advertisement.
4. HLP can model indirect peering by allowing the for-
warding of route advertisements across more than one
peering link.
Theorem 1: In the absence of cycles in the provider-
customer hierarchy, if every AS follows the HLP route prop-
agation rules and every AS chooses a customer route if one
exists, then the routing protocol is devoid of non-transient
routing loops and the count to inﬁnity problem.
LSA[C,E]c=1LSA[C,E]c=1BGHLSA[C,E]c=1LSA[C,E]c=1FPV[A,E]c=2ACDEFFPV[B,A,E]FPV[B,A,E]c=3c=4BGHACDEFFPV[B,A,E]FPV[B,A,E]LSA[C,E]LSA[C,E]LSA[C,E]c=INFc=INFc=INFFPV[A,E]c=3c=4c=5(a)(b)The proof of this theorem uses the following simple la-
beling of the links: Associate a label 3 with any customer-
provider link that appears along a path, a label 2 to a peer-
ing link and a label 1 to a provider-customer link. The HLP
propagation rules ensure that the labels of any valid rout-
ing path is always non-increasing. A non-transient routing
loop will clearly violate this non-increasing property unless
if all the links in the loop have the same label. Such a loop
can comprise only of peering links (otherwise, the provider-
customer hierarchy has a cycle). The FPV argument in
every HLP route advertisement contains the entire path of
peering links to avoid such loops. Hence, the basic route
propagation model of HLP is devoid of non-transient loops.
Transient loops can however occur in the middle of a route
convergence process. A detailed proof of this theorem is
presented in [28].
3.3 Explicit information hiding using costs
The basic route propagation model described above is in-
suﬃcient to achieve good scalability and isolation. To im-
prove these two metrics, we need to perform explicit in-
formation hiding of routing updates. The basic philosophy
is to propagate a route update only when necessary. We
achieve this information hiding using the concept of cost-
hiding. When an AS observes a cost increase or failure on
the primary route R to a destination, it checks if it has an
alternate route S with comparable cost to that of R. If so, it
switches to the alternate route S and can potentially explic-
itly suppress the routing updates to neighboring AS’s that
this route switch may trigger. Here, we assume the cost of
a route to be an additive metric and two routes are said to
have a comparable cost if their cost diﬀerence is smaller than
a cost-threshold ∆ that is deﬁned by the AS. The notion of
comparable cost relaxes the notion of shortest path routing,
and helps achieve better scalability and isolation.
AS hierarchy and the route-preference guideline to avoid
non-transient loops.
In HLP, we support three forms of cost-hiding: (a) not
propagating minor cost changes (within a threshold ∆ of
previous advertised cost) of customer routes (previous AS in
the path is a customer) across peering links; (b) not propa-
gating minor cost changes of peer routes (previous AS in the
path is a peer) to customers; (c) hiding the failure of one of
multiple parallel peering links between a pair of AS’s. The
ﬁrst two cases are illustrated in ﬁgure 3, and involve cost
hiding by an AS higher up in the hierarchy that the origin
of the change. In the third case, the issue is local to the two
AS’s, and it is entirely their own choice whether or not to
advertise a cost change. We prove the following result on
HLP’s cost-hiding mechanism:
Theorem 2: In the absence of a cycle in the AS hier-
archy, if every AS strictly adheres to the route-preference
guideline, then HLP with cost hiding is devoid of non-transient
routing loops and the count to inﬁnity problem.
Similar to Theorem 1, the proof of this theorem relies on
the non-increasing label property of HLP paths. The cost-
hiding rules that we use in HLP do not introduce any loops
since they preserve the non-increasing label property. We
refer the reader to [28] for a detailed proof of this result.
3.4 Handling complex relationships
In practice, not all inter-AS relationships are purely provider-
customer or peer-peer. Two examples of complex relation-
ships between AS’s are: (a) a sibling relationship between
two AS’s that are owned by the same administration; (b) two
AS’s intend to have diﬀerent relationships for diﬀerent des-
tinations or at diﬀerent geographic locations (e.g. provider-
customer in Europe, peer-peer in US).
In HLP, we model all complex relationships as peer-peer
links in the AS topology i.e., every complex relationship is
explicitly published as a peering link. The primary reason to
do is, by treating these links as peering links, HLP emulates
the behavior of BGP over these links thereby maintaining
compatibility with what is status quo. Moreover, the AS’s
involved in a complex relationship need not reveal the nature
of the relationship.
3.5 Handling policy variations as exceptions
The common case of policies in HLP assumes that the de-
fault behavior of all AS’s follows the export-policy guideline
and the route-preference guideline described in Section 2.2.2.
An AS that intends to violate either of these two guidelines
will trigger an exception. There are two forms of exceptions