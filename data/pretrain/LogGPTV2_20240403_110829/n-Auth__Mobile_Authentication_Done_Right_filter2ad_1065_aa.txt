title:n-Auth: Mobile Authentication Done Right
author:Roel Peeters and
Jens Hermans and
Pieter Maene and
Katri Grenman and
Kimmo Halunen and
Juha H&quot;aiki&quot;o
n-Auth: Mobile Authentication Done Right
Katri Grenman
Kimmo Halunen
Roel Peeters
Jens Hermans
Pieter Maene
KU Leuven/COSIC (Belgium)
PI:EMAIL
Juha Häikiö
VTT Technical Research Centre of Finland
PI:EMAIL
ABSTRACT
Weak security, excessive personal data collection for user profiling,
and a poor user experience are just a few of the many problems
that mobile authentication solutions suffer from. Despite being an
interesting platform, mobile devices are still not being used to their
full potential for authentication. n-Auth is a firm step in unlocking
the full potential of mobile devices in authentication, by improving
both security and usability whilst respecting the privacy of the user.
Our focus is on the combined usage of several strong cryptographic
techniques with secure HCI design principles to achieve a better
user experience. We specified and built n-Auth, for which robust
Android and iOS apps are openly available through the official
stores.
ACM Reference format:
Roel Peeters, Jens Hermans, Pieter Maene, Katri Grenman, Kimmo Halunen,
and Juha Häikiö. 2017. n-Auth: Mobile Authentication Done Right. In Pro-
ceedings of ACSAC 2017, San Juan, PR, USA, December 4–8, 2017, 15 pages.
https://doi.org/10.1145/3134600.3134613
1 INTRODUCTION
It is generally acknowledged that password authentication is prob-
lematic from many perspectives. With the ever more frequent usage
of smart phones and tablets, entering passwords is even more of a
burden: on soft keyboards, opposed to traditional keyboards, enter-
ing a password takes considerably more time and results in more
frequent errors [21]. While passwords suffer from major security
and usability problems, passwords are widely used and are likely to
remain so in the near future. This is mainly because password-based
authentication is cost-effective, widely supported by applications
and accepted by users as a security mechanism.
A plethora of alternatives for passwords, mainly aimed at web
authentication, have been proposed. Bonneau et al. [5, 6] presented
an overview of the most promising ones, reaching the conclusion
that none of these is a worthy replacement for passwords. One of
the discussed alternatives is the Pico, introduced by Stajano [22].
The Pico was deemed an interesting proposal but no more than
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC 2017, December 4–8, 2017, San Juan, PR, USA
© 2017 Copyright held by the owner/author(s). Publication rights licensed to Associa-
tion for Computing Machinery.
ACM ISBN 978-1-4503-5345-8/17/12...$15.00
https://doi.org/10.1145/3134600.3134613
that, due to the lack of an implementation, and the impossibility to
assess the user experience.
The Pico is a dedicated hardware token to authenticate the user
to a myriad of remote servers; it is designed to be very secure while
remaining quasi-effortless for users. The Pico authenticates the user
using public key credentials, making common attacks on passwords
(e.g., sniffing, phishing, guessing, social engineering) impossible.
From a privacy and security perspective the Pico solution is also
better than single-sign-on solutions, since users manage the cre-
dentials themselves instead of relying on a third party. However,
in its quest for mass adoption, the Pico concept has evolved into a
glorified personal password manager [23], which suffers from some
of the same drawbacks it originally set out to solve.
Inspired by the original Pico concept, we developed n-Auth, a
mobile authentication solution. n-Auth solves several of the open
challenges that the Pico concept poses, both on a technical level
and in terms of usability.
Concretely, our contributions are:
• A complete technical specification of n-Auth, containing
a communication architecture with detailed cryptographic
protocols to ensure a high level of security in Section 3 and
provisions to smoothen future security upgrades in Section 4.
• Robust and freely available Android and iOS applications
(Section 5), allowing n-Auth to reach maturity at negligi-
ble cost per user and making it possible to do user testing.
We also define a comprehensible user interaction model for
n-Auth taking Human-Computer Interface (HCI) design prin-
ciples into account.
• In Section 6 we discuss our preliminary usability study, with
• In Section 7, we compare n-Auth to both Pico concepts, show-
indicative results in Appendix B.
ing our improvements.
ing entities:
2 IDEA
Instead of typing a password into the browser (client) on a computer
or smart phone to log in to a website (server), the user will use
n-Auth to authenticate himself, together with the client, to the
server directly. As a result, the user will be logged in at the client.
In our general setup, we make a distinction between the follow-
• the client, i.e., the primary user interface to interact with the
• the n-Auth device, e.g., the smart phone (or a dedicated device)
on which the n-Auth app is installed and which the user uses
to perform the actual authentication;
• the server, i.e., the endpoint which the n-Auth device will
interact with to perform the authentication. The server will
application that requires authentication (e.g., a browser);
ACSAC 2017, December 4–8, 2017, San Juan, PR, USA
R. Peeters et al.
Figure 1: User authentication using n-Auth. 1) The user visits a website. 2) He scans the displayed code with his n-Auth device
3a-b) and confirms his intention. 3c) The n-Auth device authenticates to the server. 4) The user is logged in.
make a decision on the success or failure of authentication
and ensures that the client gets logged in. This process de-
pends on the specific client-server interaction mechanism
which is out of scope for this paper.
Note that the entities do not need to be separated and can coincide
on the same device. The client may also be on the n-Auth device,
e.g., when an app on the smart phone is used as the primary user
interface. The client can also coincide with the server, e.g., when
the user directly authenticates to a terminal.
Figure 1 gives an overview of how the user will authenticate to
a server with the aid of an n-Auth device. n-Auth can be used in
several different scenarios, with different types of clients and/or
servers. For generic clients, such as web browsers, it should not
be necessary to install any add-ons: i.e., no browser extensions,
hardware add-ons, drivers etc. This means that the n-Auth device
should be able to communicate directly to the server and get all
the necessary information from the client (server identifier and a
server-generated session identifier for the client). With a browser,
this information can be acquired by the n-Auth device, for instance,
by scanning a QR code or similar visual code. If the client runs on
the same smart phone as the n-Auth app, the user can simply tap
the visual code or a button. With a specific URI scheme the data
can be passed directly between apps.
The n-Auth device will also be used to create an account with
a server, using a similar process. In order to prevent users from
accidentally registering instead of logging in to a server, the n-Auth
device will only offer a single entry point to start the authentica-
tion process. The provided scannable code (or URI) will encode
additional information that allows the n-Auth device to determine
the purpose: logging in with an existing account or creating a new
account at the server. Different scannable codes for every purpose
is also consistent with current practices, e.g., the entry web page for
a server has distinctly marked locations for logging in and creating
a new account.
The user interface has to provide context of the authentication
to the user. There is a big difference between logging in to a news-
paper website and logging in to your online banking account. The
context was clear to the end-user using different user names, more
secure passwords for sensitive applications, easier passwords for
less important ones, smart cards in combination with readers ...
However, this is no longer the case when scanning visual codes.
For the user to establish context and give an informed decision
of authorization, he will be asked for explicit confirmation after
scanning the visual code, before the n-Auth device authenticates to
the server.
Our solution requires changes to the server, which initially hurt
deployability. However, being more and more confronted with at-
tacks, e.g., password breaches of widely used services occur on a
regular basis1, it is clear that passwords on their own will not be
sufficient in the future, and that changes to the server will be neces-
sary. Because we create an extra channel between the n-Auth device
and the server, we are not restricted to the traditional SSL/TLS con-
nections and can easily deploy another protocol without interfering
with the existing server-client connection. We deliberately chose
not to base our main security protocol on SSL/TLS but instead
adapted the SIGMA-I protocol [14] for the n-Auth application. This
is mainly based on the poor security track record (which will re-
quire frequent updates of both the server, and the app or mobile
operating system in case the SSL/TLS system libraries are used)
and issues around (public key) client authentication of the SSL/TLS
protocols. Furthermore, we believe that SSL/TLS is overly complex
and does not reflect recent advances in protocol design. This can
clearly be seen from the algorithm agility perspective: SSL/TLS
relies on negotiation of the algorithm suite, allowing for a myriad
of algorithms, several of which are sub-optimal security-wise.
3 SOLUTION
We now proceed with a detailed technical description of the differ-
ent processes that underlay the authentication with n-Auth.
3.1 Login
One needs to establish a link between the client-server session and
the device-server session. This link will be established indirectly
1There even exist websites where one can check if their login was among the ones
being compromised, e.g., https://haveibeenpwned.com/.
n-Auth: Mobile Authentication Done Right
ACSAC 2017, December 4–8, 2017, San Juan, PR, USA
Figure 2: Handshake protocol between n-Auth device and server.
by having the server communicate with the user’s client, the client
with the n-Auth device and finally the n-Auth device with the server.
The client will set up a connection with the server, and receives
a message SCD (Server-Client-Device) that contains a server iden-
tifier and a session identifier. This SCD message will be transferred
by the client to the n-Auth device over an authenticated channel.
By requiring an authenticated channel, we ensure a proper binding
between the client and n-Auth. However, this does not ensure that
the transferred message is confidential. Thus, in order to avoid
session hijacking at the client, the session identifier should remain
separate from the typical browser session identifiers (as found in
cookies). Therefore, the session identifier in the SCD message will
be the hash of the browser session identifier.
SCD = serverI D , H(sessionI D), LOGIN .
The device uses the server identifier in its account database to
uniquely identify the server. How this database is populated is de-
scribed in Section 3.3. The user is presented with all his accounts
on the server with the given server identifier and asked to explicitly
confirm logging into this server with the selected account. After-
wards the n-Auth device selects the corresponding private/public
key pair from its database and authenticates to the server. Our
authentication protocol (see Figure 2) is based upon the SIGMA-I
protocol as proposed by Krawczyk [14]. The original proofs by
Canetti and Krawczyk [8] still hold for our construction. SIGMA-I
is a mutual authentication protocol with key agreement that is
very efficient and has the added benefit that the device can delay
sending its (account-specific) identity until it is convinced of the
server’s identity. The shared key K is derived using a key derivation
function (KDF) from an unauthenticated Diffie-Hellman key agree-
ment (here instantiated with the elliptic curve variant). By having
each party sign (SIG and VER) the exchanged Diffie-Hellman val-
ues, the origin of the messages is established. As already suggested
by Krawczyk, we use an authenticated encryption (AE and AD)
mode [12] to optimize the protocol.
Because we use the same protocol for different purposes (login,
enrol), the purpose will explicitly be encoded in the type that is
part of the signed message. Since the device already knows the
identity of the server, this value can be omitted from the protocol.
For the identity of the device, we use the selected public key. Before
accepting the device, the server will also verify that the provided
credentials are registered in it’s database. The provided sessionI D
allows the server to link its n-Auth session to its client session. This
concludes the 3-way handshake, with messages DS1, SD2 and DS3
as in Figure 2.
3.2 Continuous Authentication
The key K that was derived during the handshake can be used for
exchanging subsequent messages MSG between the device and the
server. These messages are of the form:
(cid:0)type, body(cid:1)
MSG = IV , AEK,IV
where type indicates the type of message and body the optional
body of the message. Authenticated encryption requires a unique
initialization vector IV for each message. This will be enforced by
incrementing the IV each time a new message is encrypted. An
IV that has not been increased will lead to the termination of the
connection.
After establishing a secure channel, the device and server engage
in a continuous authentication protocol. The server sends a MSG
with type PING and a timeout value to the device. The device needs
authkeypair:x,X=xP(selectedaccount)n-Authdevicekeypair:y,Y=yPregisteredDB={Xi}Servera∈RZ∗lDS1:A=aPb∈RZ∗l,K=KDF(bA)type=SERVAUTHSD2:B=bP,IV,α=AEK,IV(cid:0)SIGy(type,A,B)(cid:1)K=KDF(aB),σ←ADK,IV(cid:0)α(cid:1)!VERY(σ,(SERVAUTH,A,B))?⊥type=LOGIN/ENROL,IV′=IV+1DS3:IV′,β=AEK,IV′(cid:0)type,X,SIGx(type,A,B,sessionID)(cid:1)IV′≤IV?⊥type,X,σ,sessionID←ADK,IV′(cid:0)β(cid:1)(type!=LOGIN&&type!=ENROL)||(type==LOGIN&&!X∈DB)||!VERX(σ,(type,A,B))?⊥ACSAC 2017, December 4–8, 2017, San Juan, PR, USA
R. Peeters et al.
to reply with a MSG of type PONG within the specified time frame.
Otherwise, the client session will be closed and the user logged out.
The user can also end a session directly through the client, in
which case the server attempts to send the device a MSG with type
BYE to alert the device that the user is no longer logged in. Likewise,
the user can close a session on the n-Auth device, in which case
device attempts to send BYE to the server.
3.3 Enrolment
In the case of enrolment, the server is not yet known to the n-Auth
device. Hence, it requires the essential parameters from the server,
such as the server’s public key and its validity period, the actual
URL for connecting to the server (not necessarily the same as the
URL where the user connects to with his client), the name and
logo of the server as it is communicated to the general public etc.
To keep the SCD message that is used for enrolment small, only
the (tiny) URL to retrieve the server parameters and a hash of the
server’s public key will be added:
SCD = serverI D, H(sessionI D), ENROL, URL, H(serverP K) .
The server parameters will be requested by the device by sending
a I N IT message to the received URL. The server will reply with
an I N IT message that contains the server parameters, which are
signed with the server’s private key. The device checks that the
received public key of the server is correct by checking it with
the hash value received in the SCD message and then verifies the
signature over the server parameters.
When setting up a new account, the device creates an entry in its
database with the server parameters and the selected private/public
key pair after successfully receiving SD2 and verifying the server’s
identity. The server will create a new entry in its database for the
received public key after successfully receiving DS3 and having
validated the signature using this key as in Figure 2.
3.4 Database locking mechanism
To avoid being vulnerable to theft and so-called lunch-time attacks
(leaving the n-Auth device unattended for a short while), there is a
database locking mechanism in place with the following properties.
Note that this locking mechanism works on individual accounts
(making it possible to tweak security according to the server’s
needs) and not on the database as a whole.
It is based on a single secret that needs to be provided by the
user. This secret can be a PIN for the user to remember, a biometric
like for instance a fingerprint or coming from another device the
user carries around like for instance a smart watch. To avoid brute
force attacks on the n-Auth device, the secret is verified online
and the server implements a lock-out mechanism based on the
number of consecutive failed verifications. The verification is done
in zero-knowledge, i.e., the server does not learn the secret. The
latter allows us to use the same secret for all possible servers, and
use any available server for verification of the secret.
As long as the n-Auth device is not locked out and upon success-