process they originally exploit, unless it goes on to attack other features of
the device.
This code signing protection is, of course, the reason people jailbreak their
phones. Once jailbroken, unsigned applications can be executed on the device.
Jailbreaking also turns off other features (more on that later).
Data Execution Prevention
Normally, data execution prevention (DEP) is a mechanism whereas a processor
can distinguish which portions of memory are executable code and which portions
are data; DEP will not allow the execution of data, only code. This is important
because when an exploit is trying to run a payload, it would like to inject the
payload into the process and execute it. DEP makes this impossible because the
payload is recognized as data and not code. The way attackers normally try to
bypass DEP is to use return-oriented programming (ROP), which is discussed
in Chapter 8. ROP is a procedure in which the attacker reuses existing valid
code snippets, typically in a way never intended by the process, to carry out
the desired actions.
The code-signing mechanism in iOS acts like DEP but is even stronger. Typical
attacks against DEP-enabled systems use ROP briefl y to create a section of
memory that is writable and executable (and hence where DEP is not enforced).
Then they can write their payload there and execute it. However, code signing
requires that no page may be executed unless it originates from code signed by
a trusted authority. Therefore, when performing ROP in iOS, it is not possible
cc0011..iinndddd 77 44//1166//22001122 55::4411::2277 PPMM
8 Chapter 1 n iOS Security Basics
to turn off DEP like an attacker normally would. Combined with the fact that
the exploit cannot execute applications that they may have written to disk, this
means that exploits must only perform ROP. They may not execute any other
kinds of payloads such as shellcode or other binaries. Writing large payloads
in ROP is very time-consuming and complex. This makes exploitation of iOS
more diffi cult than just about any other platform.
Address Space Layout Randomization
As discussed in the previous section, the way attackers try to bypass DEP
is to reuse existing code snippets (ROP). However, to do this, they need to
know where the code segments they want to reuse are located. Address space
layout randomization (ASLR) makes this diffi cult by randomizing the location
of objects in memory. In iOS, the location of the binary, libraries, dynamic
linker, stack, and heap memory addresses are all randomized. When systems
have both DEP and ASLR, there is no generic way to write an exploit for it. In
practice, this usually means an attacker needs two vulnerabilities — one to
obtain code execution and one to leak a memory address in order to perform
ROP — or the attacker may be able to get by with having only one very special
vulnerability.
Sandboxing
The fi nal piece of the iOS defense is sandboxing. Sandboxing allows even
fi ner-grained control over the actions that processes can perform than the UNIX
permission system mentioned earlier. For example, both the SMS application
and the web browser run as user mobile, but perform very different actions. The
SMS application probably doesn’t need access to your web browser cookies and
the web browser doesn’t need access to your text messages. Third-party apps
from the App Store shouldn’t have access to either of these things. Sandboxing
solves this problem by allowing Apple to specify exactly what permissions are
necessary for apps. (See Chapter 5 for more details.)
Sandboxing has two effects. First, it limits the damage malware can do to
the device. If you imagine a piece of malware being able to get through the
App Store review process and being downloaded and executed on a device,
the app will still be limited by the sandbox rules. It may be able to steal all
your photos and your address book, but it won’t be able to send text messages
or make phone calls, which might directly cost you money. Sandboxing also
makes exploitation harder. If an attacker fi nds a vulnerability in the reduced
attack surface, manages to get code executing despite the ASLR and DEP, and
writes a productive payload entirely in ROP, the payload will still be confi ned
to what is accessible within the sandbox. Together, all of these protections make
malware and exploitation diffi cult, although not impossible.
cc0011..iinndddd 88 44//1166//22001122 55::4411::2277 PPMM
Chapter 1 n iOS Security Basics 9
A Brief History of iOS Attacks
You now have a basic understanding of the defensive capabilities of iOS
devices. This section discusses some successful attacks against these devices
to see how their security holds up in the real world. This discussion also
demonstrates how the security of the device has evolved to keep up with
real-world attacks.
Libtiff
When the original iPhone came out in 2007, people were lining up to get one.
Perhaps in an effort to get it out the door as quickly as possible, the device did
not ship in a very secure state. You’ve seen how iOS 5 looks, but compare it to
“iOS 1” in the original iPhone:
n There was a reduced attack surface.
n There was a stripped-down OS.
n There was no privilege separation: All processes ran as root.
n There was no code-signing enforcement.
n There was no DEP.
n There was no ASLR.
n There was no sandboxing.
So, if you could fi nd a vulnerability in the device, it was very easy to exploit
it. The exploit was free to run shellcode or download fi les and execute them.
Even fi nding vulnerabilities was rather easy because the original iPhone soft-
ware was shipped with known fl aws. Every attack gave you instant root access.
Tavis Ormandy fi rst pointed out that the version of Libtiff, used to process
TIFF images, had a known vulnerability in it. Chris Wade actually wrote a
working exploit for this vulnerability. Therefore, it was possible to surf to a
malicious website and have the site get remote root access to your device. This
fl aw was patched in iPhone OS 1.1.2.
Compare the Libtiff exploit at that time with what would have to happen for
a similar vulnerability in the Libtiff library found today. The original exploit
fi lled heap memory with executable code and then redirected execution to
it. This would fail now because of the presence of DEP. Therefore, the exploit
would have to use ROP and somehow defeat the ASLR. This would probably
require an additional vulnerability. Furthermore, even if the attacker were to
get an exploit working, the attacker would only have the permissions of the
user mobile and would be sandboxed as well. This is in stark contrast to hav-
ing unfettered root access.
cc0011..iinndddd 99 44//1166//22001122 55::4411::2277 PPMM
10 Chapter 1 n iOS Security Basics
While we’re on the topic of iOS 1, it should be pointed out that malware wasn’t
much of a problem for it. This is because, with what seems unbelievable now, the
original iPhone had no offi cial way to download third-party apps. That didn’t
come along until iOS version 2.
Fun with SMS
In 2009, researchers Collin Mulliner and Charlie Miller found a vulnerability
in the way the iPhone parsed SMS messages. By this time, iOS 2 was in use.
iOS 2 featured almost all of the security mechanisms present in iOS 5 with
the exception of ASLR. The problem was that while most processes ran as an
unprivileged, sandboxed user, the particular process that handled SMS mes-
sages did not. The responsible program, CommCenter, happened to run as
root with no sandboxing.
The problem with not implementing ASLR is that DEP really works only in
conjunction with ASLR. That is, if memory is not randomized and an attacker
knows exactly where all executable code is located, performing ROP is rather easy.
Besides being a powerful way into the system, SMS makes a great attack
vector for a number of other reasons. For one, it requires no user interaction.
Instead of trying to get a victim to visit a malicious website, an attacker only
has to know the victim’s phone number and send the attack. Additionally, the
victim cannot prevent the attack from occurring. There is no way to disable
SMS on a default phone. Finally, the attack is silent and is possible even when a
device is powered off. If an attacker sends the malicious SMS messages while
a device is off, the carrier will conveniently queue them up and deliver them
as soon as the device powers up.
This fl aw was patched in version 3.0.1. Today, things would be more diffi -
cult because not only would the exploit have to deal with ASLR, but now the
CommCenter process runs as user _wireless instead of root.
The Ikee Worm
By the time iOS 2 came out, the device was in pretty good shape. However, it
turns out that jailbreaking your device breaks the whole security architecture of
the device. Sure, it disables code signing, but it does much more. It increases the
attack surface by adding software (after all, the whole point is to run unsigned
code). It adds a bunch of system utilities, such as a shell. It can install things
that run as the root user. By turning off code signing, you also turn off the
strong form of DEP. That is, ROP payloads can disable DEP and write and
execute shellcode on jailbroken devices. Finally, the new unsigned apps are not
sandboxed. So, yes, jailbreaking pretty much turns off all the security of the
device, not just the code signing.
cc0011..iinndddd 1100 44//1166//22001122 55::4411::2277 PPMM
Chapter 1 n iOS Security Basics 11
Therefore, it shouldn’t come as a shock that jailbroken phones were targeted
for exploitation. The Ikee worm (also known by a variety of other names like
Dutch ransom, iPhone/Privacy.A, or Duh/Ikee.B) took advantage of the fact
that many people who jailbroke their phones installed an SSH server and didn’t
bother to change the widely-known default root password This meant anybody
could connect to their device and remotely control it with root privileges. It is
hardly a challenge to write a worm given these conditions. Additionally, the
SSH server was in no way sandboxed.
The worm did various things at different stages of its lifetime. Initially, it
just changed the wallpaper of the device (see Figure 1.2). Later, it was changed
to perform malicious actions such as locking the phone for ransom, stealing
content, or even enrolling it to become part of a botnet.
Credit: Mikko Hypponen, F-Secure
Figure 1.2: Rick Astley is never gonna give you up.
Obviously, none of this could have happened prior to the victims jailbreaking
their devices.
Storm8
In 2009, games developed by popular developer Storm8 were collecting the cell
phone numbers of the devices on which they were playing. The games would
then send this information to Storm8 servers. Some of the affected apps included
“Vampires Live,” “Zombies Live,” and “Rockstars Live” (see Figure 1.3). A class
action suit was fi led against Storm8, which claimed the data collection feature of
cc0011..iinndddd 1111 44//1166//22001122 55::4411::2277 PPMM
12 Chapter 1 n iOS Security Basics
the apps was a simple mistake. There were approximately 20 million downloads
of Storm8 apps during the time in question.
Figure 1.3: Vampires Live brought more than rampaging vampires to iOS.
SpyPhone
SpyPhone was a proof of concept app written by Seriot Nicolas that exercised the
limits of the iOS sandbox for third-party apps. It tried to access every conceivable
piece of information and perform any actions allowed by the sandbox. One
thing to notice about the iOS sandbox is that every third party app from the
App Store has the same sandbox rules. That means that if Apple thinks one app
should have a certain capability, all apps must have that capability. This differs,
for example, from the Android sandbox where every app can have different
capabilities assigned to it based on its needs. One of the weaknesses of the iOS
model is that it may be too permissive. For example, by using public APIs in
entirely legitimate ways (despite the fact the app was in a sandbox), SpyPhone
was able to access the following data:
n Cell phone number
n Read/write access to address book
n Safari/YouTube search terms
n E-mail account information
n Keyboard cache
cc0011..iinndddd 1122 44//1166//22001122 55::4411::2277 PPMM
Chapter 1 n iOS Security Basics 13
n Geotagged photos
n GPS information
n WiFi access point names
This app demonstrated that even inside a sandbox, a malicious program could
extract a frightening amount of information from the device.
Pwn2Own 2010
Two of the authors of this book, Vincenzo Iozzo and Ralf-Philip Weinmann, won
the Pwn2Own hacking competition against the iPhone 3GS in 2010. They found
a vulnerability in MobileSafari that allowed them to execute code remotely. This
was in iOS version 3 before ASLR was introduced. Their entire payload was
written in ROP due to the code-signing mechanisms in place. Using ROP, they
were able to open up the SMS database, which stored all the text messages, and
send them off to a remote server they controlled. They were, however, limited to
the user mobile and the MobileSafari sandbox. It would have taken some more
work to do more damage. For their effort they won $15,000 and the phone. The
next year two different authors of this book won the same competition.
Jailbreakme.com 2 (“Star”)
So far we’ve talked about all the limits that something like iOS 5 puts on a remote
attacker. This makes attacks very diffi cult, but not impossible. An example of
this was shown in August 2010 by comex’s infamous jailbreakme.com website.
(The fi rst jailbreakme.com worked against the original iPhone and so was
rather easy in comparison.) This second jailbreakme.com site performed a
series of actions that eventually led to jailbreaking the iOS device that visited
it. This means it must obtain remote root access, similar to the iOS 1.0 days. In
this case, however, it was against iOS 4.0.1, which had all the security mecha-
nisms except ASLR (which hadn’t been added yet). So how did it work? First,
it took advantage of a stack overfl ow in the way a particular type of font was
handled by MobileSafari. This allowed the exploit to begin its ROP payload
within MobileSafari. Then, instead of just shipping off the SMS database, this
sophisticated payload proceeded to exploit another vulnerability to increase its
level of access to the device. This second vulnerability was an integer overfl ow
in an IOSurface property in IOKit. This second attack allowed code execution
by the attacker inside the kernel. From the kernel, it disabled code signing, then
the ROP downloaded an unsigned dynamic library that jailbroke the phone
and loaded it. Apple quickly patched it because while the jailbreakme.com site
simply jailbroke your phone, it could have been easily modifi ed to perform any
actions on the device it wanted.
cc0011..iinndddd 1133 44//1166//22001122 55::4411::2277 PPMM
14 Chapter 1 n iOS Security Basics
Jailbreakme.com 3 (“Saffron”)
One thing all the examples have had in common so far is that they have been
against iOS versions before 4.3. This is when ASLR was introduced. Once that
fi nal obstacle is added, perhaps it is too diffi cult to exploit the device? Well, comex
again showed this is not the case with the third incarnation of the jailbreakme
.com site targeting iOS versions up to 4.3.3. Again, this required two exploits,
one to get code execution and one to disable the code signing. But what about the
ASLR? You learn more about this exploit in Chapter 8, but for now it is enough
to know that the particular vulnerability exploited allowed the attacker to both
read and write memory. With that, it was possible for it to fi gure out where it
was located in memory by reading the values of some nearby pointers. After
that it was able to corrupt memory and get control of the process by writing
to memory. Like we said before, defeating ASLR usually requires either two
vulnerabilities or one really special one. In this case, the exploit took advantage
of a single, but very powerful, vulnerability.
Summary
This chapter began by introducing iOS devices, including the hardware and
how they’ve changed since their introduction. You then learned some basic
information about security topics, including the types of threats that are faced
by iOS devices. The chapter then introduced many of the concepts of this book
at a high level. It discussed the security design of iOS; many of whose layers
will be highlighted in their own chapters later on. Finally, it walked through
some of the attacks that have succeeded against iOS in the past, right up to ones
that bypass all the security of even iOS 5.
cc0011..iinndddd 1144 44//1166//22001122 55::4411::2277 PPMM
CHAPTER
2
iOS in the Enterprise
As Apple’s iOS-based devices have gained popularity among consumers, more
and more enterprises have begun to allow employees to access and store enterprise
data on these devices. Typically, the enterprise purchases and fully manages the
smartphones or other devices that may be used to access sensitive enterprise data.
In some cases (and in what is becoming increasingly common), enterprises may
allow employees to access enterprise data from devices they personally own. In
either case, the benefi ts of using these mobile devices to access enterprise data
must be weighed against the new security risks that they present.
Any mobile device can get misplaced, lost, or stolen. If the mobile device
stores or is capable of accessing sensitive enterprise data, there is a risk that this
data may be recoverable and fall into the wrong hands. For these reasons, it is
important that access to the physical device be restricted by requiring a strong
passcode, and that it can be remotely locked or wiped if it is lost. This chapter
describes how to use Apple’s iPhone Confi guration Utility and Lion Server’s
Profi le Manager to create and apply confi guration profi les to iOS devices. These
profi les can be used to ensure that the devices enforce your organization’s
security policy, including requiring a strong device passcode, for example. As
a Mobile Device Management (MDM) service, Profi le Manager can also be used
to remotely lock or wipe a lost device.
15
cc0022..iinndddd 1155 44//1166//22001122 55::4422::2233 PPMM
16 Chapter 2 n iOS in the Enterprise
iOS Confi guration Management
iOS-based devices are managed through the creation and installation of confi gu-
ration profi les. These profi les contain settings confi gured by an administrator for
installation on a user’s device. Most of these settings correspond to confi gura-
tion options visible in the iOS Settings app, but some settings are available only
through a confi guration profi le and some are available only in the iOS Settings
app. The settings available in confi guration profi les are the only ones that can
be centrally managed.
The simplest way to create and manage confi guration profi les is by using