:::
:::
::: section
::: titlepage
# []{#configuring-selinux-for-applications-and-services-with-non-standard-configurations_using-selinux.html#adjusting-the-policy-for-sharing-nfs-and-cifs-volumes-using-selinux-booleans_configuring-selinux-for-applications-and-services-with-non-standard-configurations}调整用于使用 SELinux 布尔值共享 NFS 和 CIFS 卷的策略 {.title}
:::
您可以使用布尔值在运行时更改 SELinux 策略部分，即使您不了解 SELinux
策略的编写方式。这启用了更改，比如允许服务访问 NFS
卷而无需重新载入或者重新编译 SELinux 策略。以下流程演示了列出 SELinux
布尔值并进行配置，以实现策略中所需的更改。
在客户端的 NFS 挂载使用 NFS 卷策略定义的默认上下文标记。在 RHEL
中，这个默认上下文使用 `nfs_t`{.literal} 类型。另外，挂载在客户端中的
Samba 共享使用策略定义的默认上下文标记。这个默认上下文使用
`cifs_t`{.literal} 类型。您可以启用或禁用布尔值来控制允许哪些服务访问
`nfs_t`{.literal} 和 `cifs_t`{.literal} 类型。
要允许 Apache HTTP 服务器服务（`httpd`{.literal}）访问和共享 NFS 和 CIFS
卷，请执行以下步骤：
::: itemizedlist
**先决条件**
-   （可选）安装 `selinux-policy-devel`{.literal} 软件包来获取
    `semanage boolean -l`{.literal} 命令输出中的 SELinux
    布尔值和更多详细描述。
:::
::: orderedlist
**流程**
1.  识别与 NFS、CIFS 和 Apache 相关的 SELinux 布尔值：
    ``` screen
    # semanage boolean -l | grep 'nfs\|cifs' | grep httpd
    httpd_use_cifs                 (off  ,  off)  Allow httpd to access cifs file systems
    httpd_use_nfs                  (off  ,  off)  Allow httpd to access nfs file systems
    ```
2.  列出布尔值的当前状态：
    ``` screen
    $ getsebool -a | grep 'nfs\|cifs' | grep httpd
    httpd_use_cifs --> off
    httpd_use_nfs --> off
    ```
3.  启用指定的布尔值：
    ``` screen
    # setsebool httpd_use_nfs on
    # setsebool httpd_use_cifs on
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    使用 `setsebool`{.literal} 的 `-P`{.literal}
    选项在重启后保留更改。`setsebool -P`{.literal}
    命令需要重建整个策略，且可能需要一些时间，具体取决于您的配置。
    :::
:::
::: orderedlist
**验证**
1.  检查布尔值为 `on`{.literal}：
    ``` screen
    $ getsebool -a | grep 'nfs\|cifs' | grep httpd
    httpd_use_cifs --> on
    httpd_use_nfs --> on
    ```
:::
::: itemizedlist
**其它资源**
-   `semanage-boolean(8)`{.literal}、`sepolicy-booleans(8)`{.literal}、`getsebool(8)`{.literal}、`setsebool(8)`{.literal}、`booleans(5)`{.literal}
    和 `booleans(8)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#configuring-selinux-for-applications-and-services-with-non-standard-configurations_using-selinux.html#additional_resources_2}其它资源 {.title}
:::
::: itemizedlist
-   [故障排除与 SELinux
    相关的问题](#troubleshooting-problems-related-to-selinux_using-selinux.html "第 5 章 故障排除与 SELinux 相关的问题"){.link}
:::
:::
:::
[]{#troubleshooting-problems-related-to-selinux_using-selinux.html}
::: chapter
::: titlepage
# []{#troubleshooting-problems-related-to-selinux_using-selinux.html#troubleshooting-problems-related-to-selinux_using-selinux}第 5 章 故障排除与 SELinux 相关的问题 {.title}
:::
如果您计划在之前禁用 SELinux 的系统中启用
SELinux，或者您以非标准配置运行服务，您可能需要排除 SELinux
可能会阻断的问题。请注意，在多数情况下，SELinux
拒绝通常代表存在错误的配置。
::: section
::: titlepage
# []{#troubleshooting-problems-related-to-selinux_using-selinux.html#identifying-selinux-denials_troubleshooting-problems-related-to-selinux}识别 SELinux 拒绝 {.title}
:::
只执行此流程中的必要步骤 ; 在大多数情况下，您只需要执行第 1 步。
::: orderedlist
**流程**
1.  当您的操作被 SELinux 阻止时，`/var/log/audit/audit.log`{.literal}
    文件是第一个检查拒绝的更多信息。要查询审计日志，使用
    `ausearch`{.literal} 工具。因为 SELinux
    决策（如允许或禁止访问）已被缓存，且这个缓存被称为 Access Vector
    Cache（AVC），所以对消息类型参数使用 `AVC`{.literal} 和
    `USER_AVC`{.literal} 值，例如：
    ``` screen
    # ausearch -m AVC,USER_AVC,SELINUX_ERR,USER_SELINUX_ERR -ts recent
    ```
    如果没有匹配项，请检查 audit
    守护进程是否正在运行。如果没有启动，在启动 `auditd`{.literal}
    后重复拒绝的场景，并再次检查审计日志。
2.  如果 `auditd`{.literal} 正在运行，但 `ausearch`{.literal}
    输出中没有匹配项，请检查 `systemd`{.literal} 日志提供的消息：
    ``` screen
    # journalctl -t setroubleshoot
    ```
3.  如果 SELinux 是活跃的，且 Audit 守护进程没有在您的系统中运行，在
    `dmesg`{.literal} 命令输出中搜索特定的 SELinux 信息：
    ``` screen
    # dmesg | grep -i -e type=1300 -e type=1400
    ```
4.  即使进行了前面的三个检查后，您仍可能找不到任何结果。在这种情况下，因为
    `dontaudit`{.literal} 规则，AVC 拒绝可以会被静默。
    临时禁用 `dontaudit`{.literal} 规则，允许记录所有拒绝信息：
    ``` screen
    # semodule -DB
    ```
    在重新运行拒绝的场景并使用前面的步骤查找拒绝信息后，以下命令会在策略中再次启用
    `dontaudit`{.literal} 规则：
    ``` screen
    # semodule -B
    ```
5.  如果您应用了前面所有四个步骤，这个问题仍然无法识别，请考虑 SELinux
    是否真正阻止了您的场景：
    ::: itemizedlist
    -   切换到 permissive 模式：
        ``` screen
        # setenforce 0
        $ getenforce
        Permissive
        ```
    -   重复您的场景。
    :::
    如果问题仍然存在，则代表 SELinux 以外的系统阻断了您的场景。
:::
:::
::: section
::: titlepage
# []{#troubleshooting-problems-related-to-selinux_using-selinux.html#analyzing-an-already-found-selinux-denial_troubleshooting-problems-related-to-selinux}分析 SELinux 拒绝信息 {.title}
:::
在[确认](#troubleshooting-problems-related-to-selinux_using-selinux.html#identifying-selinux-denials_troubleshooting-problems-related-to-selinux "识别 SELinux 拒绝"){.link}
SELinux 会阻止您的场景后，可能需要在进行修复前分析根本原因。
::: itemizedlist
**先决条件**
-   在系统中安装了 `policycoreutils-python-utils`{.literal} 和
    `setroubleshoot-server`{.literal} 软件包。
:::
::: orderedlist
**流程**
1.  使用 `sealert`{.literal} 命令列出有关日志拒绝的详情，例如：
    ``` screen
    $ sealert -l "*"
    SELinux is preventing /usr/bin/passwd from write access on the file
    /root/test.
    *****  Plugin leaks (86.2 confidence) suggests *****************************
    If you want to ignore passwd trying to write access the test file,
    because you believe it should not need this access.
    Then you should report this as a bug.
    You can generate a local policy module to dontaudit this access.
    Do
    # ausearch -x /usr/bin/passwd --raw | audit2allow -D -M my-passwd
    # semodule -X 300 -i my-passwd.pp
    *****  Plugin catchall (14.7 confidence) suggests **************************
    ...
    Raw Audit Messages
    type=AVC msg=audit(1553609555.619:127): avc:  denied  { write } for
    pid=4097 comm="passwd" path="/root/test" dev="dm-0" ino=17142697
    scontext=unconfined_u:unconfined_r:passwd_t:s0-s0:c0.c1023
    tcontext=unconfined_u:object_r:admin_home_t:s0 tclass=file permissive=0
    ...
    Hash: passwd,passwd_t,admin_home_t,file,write
    ```
2.  如果上一步中的输出没有包含清晰的建议：
    ::: itemizedlist
    -   启用全路径审核查看访问对象的完整路径，并让其他 Linux Audit
        事件字段可见：
        ``` screen
        # auditctl -w /etc/shadow -p w -k shadow-write
        ```
    -   清除 `setroubleshoot`{.literal} 缓存：
        ``` screen
        # rm -f /var/lib/setroubleshoot/setroubleshoot.xml
        ```
    -   重现问题。
    -   重复步骤 1。
        完成这个过程后，禁用全路径审核：
        ``` screen
        # auditctl -W /etc/shadow -p w -k shadow-write
        ```
    :::
3.  如果 `sealert`{.literal} 只返回 `catchall`{.literal}
    建议或者建议使用 `audit2allow`{.literal}
    工具添加新规则，请将您的问题与 [审计日志中 SELinux
    拒绝中列出的](#troubleshooting-problems-related-to-selinux_using-selinux.html#selinux-denials-in-the-audit-log_troubleshooting-problems-related-to-selinux "审计日志中的 SELinux 拒绝"){.link}
    示例匹配。
:::
::: itemizedlist
**其它资源**
-   `sealert(8)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#troubleshooting-problems-related-to-selinux_using-selinux.html#fixing-an-analyzed-selinux-denial_troubleshooting-problems-related-to-selinux}修复分析的 SELinux 拒绝问题 {.title}
:::
在大多数情况下，`sealert`{.literal} 工具提供的建议为您提供有关如何修复与
SELinux 策略相关的问题的指导。有关如何使用 `sealert`{.literal} 分析
SELinux 拒绝的信息，请参阅[分析 SELinux
拒绝信息](#troubleshooting-problems-related-to-selinux_using-selinux.html#analyzing-an-already-found-selinux-denial_troubleshooting-problems-related-to-selinux "分析 SELinux 拒绝信息"){.link}。
当工具建议使用 `audit2allow`{.literal}
工具进行配置更改时请小心。当您看到 SELinux 拒绝时，您不应该使用
`audit2allow`{.literal}
来生成本地策略模块作为您的第一个选项。故障排除应该先检查是否有标记问题。第二个最常见的情况是您更改了进程配置，并且忘记了要让
SELinux 了解它。
::: title
**标记问题**
:::
标记问题的常见原因是，当服务使用非标准目录时。例如，管理员可能想要使用
`/srv/myweb/`{.literal}，而不是在网站中使用
`/var/www/html/`{.literal}。在 Red Hat Enterprise Linux 中，使用
`var_t`{.literal} 类型标记 `/srv`{.literal} 目录。`/srv`{.literal}
中创建的文件和目录继承这个类型。另外，顶层目录中新创建的对象（如
`/myserver`{.literal} ）可以使用 `default_t`{.literal}
类型进行标记。SELinux 可防止 Apache HTTP
服务器（`httpd`{.literal}）访问这两个类型。要允许访问，SELinux 必须知道
`/srv/myweb/`{.literal} 中的文件可以被 `httpd`{.literal} 访问：
``` screen
# semanage fcontext -a -t httpd_sys_content_t "/srv/myweb(/.*)?"
```
此 `semanage`{.literal} 命令将 `/srv/myweb/`{.literal}
目录及其下的所有文件和目录添加到 SELinux
文件上下文中。`semanage`{.literal} 实用程序不会更改上下文。以 root
用户身份，使用 `restorecon`{.literal} 实用程序应用更改：
``` screen
# restorecon -R -v /srv/myweb