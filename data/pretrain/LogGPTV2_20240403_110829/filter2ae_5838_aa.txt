**作者：wzt  
原文链接：**
# **1 前言**
Windows10提供了 ACG (Arbitrary Code Guard)
保护功能，官方解释其功能为：禁止进程动态分配可执行内存或者将已经存在的一段可读可写内存改为可执行。在笔者对其进行逆向工程后，会发现其功能包括以下情景：
  * 用NTAllocVirtualMemory新申请一块可执行内存。
  * 当前只读， 不能改为可执行。
  * 当前读写， 不能改为可执行。
  * 在当前执行权限为可执行的情况下， 不能加入可读写权限。
## **1.1 应用层探视**
通过如下代码，测试 ACG 行为：
        void alloc_test(void)
        {
            LPVOID mem;
            DWORD old_flags;
            mem = VirtualAlloc(NULL, 0x100, MEM_COMMIT| MEM_RESERVE, PAGE_EXECUTE);
            if (!mem) {
                printf("error: %d\n", GetLastError());
                return;
            }
            printf("\nalloc at 0x%p\n", mem);
        }
新申请一块可执行内存会被系统拒绝掉。
        void alloc_test(void)
        {
            LPVOID mem;
            DWORD old_flags;
            mem = VirtualAlloc(NULL, 0x100, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
            if (!mem) {
                printf("error: %d\n", GetLastError());
                return;
            }
            printf("\nalloc at 0x%p\n", mem);
            old_flags = PAGE_READWRITE;
            if (VirtualProtect(mem, 0x100, PAGE_EXECUTE_READWRITE, &old_flags) == 0) {
                printf("change memory page exccute error: %d\n", GetLastError());
                return ;
            }
            printf("change memory page ok.\n");
            return;
        }
如果先申请一块可读写内存， 然后更改为可执行，同样拒绝。 用 windbg 跟踪得到如下调用链：
    KERNELBASE!VirtualProtect -> ntdll!NtProtectVirtualMemory
    0:000> kcL
    # Call Site
    00 ntdll!NtProtectVirtualMemory
    01 KERNELBASE!VirtualProtect
    02 test7!alloc_test
    03 test7!main
    04 test7!invoke_main
    05 test7!__scrt_common_main_seh
    06 test7!__scrt_common_main
    07 test7!mainCRTStartup
    08 KERNEL32!BaseThreadInitThunk
    09 ntdll!RtlUserThreadStart
反汇编ntdll!NtProtectVirtualMemory看下：
        0:000> u eip
        ntdll!NtProtectVirtualMemory:
        00007ffb`c3a50150 4c8bd1          mov     r10,rcx
        00007ffb`c3a50153 b850000000      mov     eax,50h
        00007ffb`c3a50158 f604250803fe7f01 test    byte ptr [SharedUserData+0x308 (00000000`7ffe0308)],1
        00007ffb`c3a50160 7503            jne     ntdll!NtProtectVirtualMemory+0x15 (00007ffb`c3a50165)
        00007ffb`c3a50162 0f05            syscall
        00007ffb`c3a50164 c3              ret
        00007ffb`c3a50165 cd2e            int     2Eh
        00007ffb`c3a50167 c3              ret
Eax寄存器赋值为0x50，对应的是内核中的nt!NtProtectVirtualMemory服务例程。
## **1.2 内核逆向**
用ida分析ntoskrnl.exe， 虽然也加载了符号，
但是发现只有NtAllocVirtualMemory函数有符号，却没有NtProtectVirtualMemory函数中的符号。在undocumented.ntinternals.net中找到了它的函数原型定义，于是通过kd直接反汇编进行分析，为便于理解，我人肉的将反汇编代码还原为伪c代码。
    NTSTATUS NtProtectVirtualMemory(int64 handle,
    void **BaseAddress,
    Uint64 *NumberOfBytesToProtect,
    Uint64 NewAccessProtection,
    Uint64 *OldAccessProtection)
    {
    Uint64 *v1;// rsp+0x20
    Uint64 *v2;// rsp+0x28
    Uint64 *v3;// rsp+0x30
    Uint64 *v4;// rsp+0x38
    Char v5;// rsp+0x40
    int *v6;// rsp+0x44
    Uint64 *v7;// rsp+0x48
    Uint64 *v8;// rsp+0x50
    Uint64 v9;// rsp+0x58
    Int64 v10;// rsp+0x60
    Int64 *v11;// rsp+0x68
    Uint64 *v12;// rsp+0x70
    Uint64 *v13;// rsp+0x78
    Char v14[48];// rsp+0x80
    int64 v15;// rsp+0xb0
    ETHREAD e_thread;
    Int v_r13;
    Int ret;
    Int *v16;
    Int v17;
    V15 = *(int64 *)_security_cookie;
    V12 = NumberOfBytesToProtect;
    V10 = handle;
    V13 = OldAccessProtection;
    Memset(v14, 0, 0x30);
    If (NewAccessProtection == 0x80000000h || NewAccessProtection == 0x10000000h) {
    V_r13 = 0x18;
    Goto label_4;
    }
    V_r13 = MiMakeProtectionMask(NewAccessProtection & 0FFFFFFFh);
    If (v_r13 == 0FFFFFFFFh) {
    Ret = 0C0000045h;
    Goto out;
    }
    Label_4:
    V7 = *(int64 *)(e_thread + 0xb8);
    V5 = (char)(e_thread->pcb->PreviousMode);
    If (!v5)
    Goto label_2;
    V16 = BaseAddress;
    If (BaseAddress >= 0x7FFFFFFF0000h)
    V16 = 0x7FFFFFFF0000h;
    If (NumberOfBytesToProtect >= 0x7FFFFFFF0000h)
    V16 = 0x7FFFFFFF0000h;
    If (OldAccessProtection  0x7FFFFFFEFFFFh) {
    Ret = 0C00000F0h;
    Goto out;
    }
    If (0x7FFFFFFF0000h - v8 > v9 || !v9) {
    Ret = 0x0C00000F1h;
    Goto out;
    }
    V17 = 0;
    Ret = ObpReferenceObjectByHandleWithTag(v10,
    8,
     *(int64 *)PsProcessType,
    v5,
    0x76506D4Dh,
    V11,
    0);
    If (ret = 0x800)
    Return -1;
    // 测试0-3bit
    Tmp1 = protect & 0x0f;
    If (tmp1) {
    If (protect & 0xf0)
    Return -1;
    Flag = *(char *)SeConvertSecurityDescriptorToStringSecurityDescriptor(tmp1 + 37EF70h + tmp1);
    Goto label_1;
    }
    // 测试4-7bit
    Tmp1 = (protect >> 4) & 0x0f;
    If (!tmp1)
    Return -1;
    Flag = *(char *)SeConvertSecurityDescriptorToStringSecurityDescriptor(tmp1 + 37EF80h + tmp1);
    Label_1:
    If (flag == -1)
    Return -1;
    If (protect & 0x700)
    Goto lable_2;
    Return flag;