title:Crossroads: A Practical Data Sketching Solution for Mining Intersection
of Streams
author:Zhenglin Yu and
Zihui Ge and
Ashwin Lall and
Jia Wang and
Jun (Jim) Xu and
He Yan
Crossroads: A Practical Data Sketching Solution
for Mining Intersection of Streams∗
Zhenglin Yu
Georgia Tech
Atlanta, GA, USA
PI:EMAIL
Zihui Ge
AT&T Labs - Research
Florham Park, NJ, USA
PI:EMAIL
Ashwin Lall
Denison University
Granville, OH, USA
PI:EMAIL
Jia Wang
AT&T Labs - Research
Florham Park, NJ, USA
PI:EMAIL
Jun (Jim) Xu
Georgia Tech
Atlanta, GA, USA
PI:EMAIL
He Yan
AT&T Labs - Research
Florham Park, NJ, USA
PI:EMAIL
ABSTRACT
The explosive increase in cellular network traﬃc, users, and
applications, as well as the corresponding shifts in user ex-
pectations, has created heavy needs and demands on cellular
data providers. In this paper we address one such need: min-
ing the logs of cellular voice and data traﬃc to rapidly detect
network performance anomalies and other events of interest.
The core challenge in solving this problem is the issue that
it is impossible to predict beforehand where in the traﬃc the
event may appear, requiring us to be able to query arbitrary
subsets of the network traﬃc (e.g., longer than usual round-
trip times for users in a speciﬁc urban area to connect to
FunContent.com using a particular model of phone). Since
it is infeasible to store all combinations of such data, espe-
cially when it is collected in real-time, we need to be able to
summarize the traﬃc data using succinct sketch data struc-
tures to answer these queries.
The major contribution of this paper is the introduction
of a scheme, called Crossroads, that can be used to compute
the intersection of the measurements between two overlap-
ping streams. For instance, in the above example, it is pos-
sible to compute the intersection of all the data going be-
tween the downtown area and FunContent.com with all the
data generated by the model of phone to detect anomalous
RTT behavior. In eﬀect, this gives us a way to essentially
“square root” the number of sketches that we need to main-
tain, transforming a prohibitively expensive problem to one
that is tractable in practice. We provide rigorous analysis of
our sketch and the trade-oﬀs between memory footprint and
accuracy. We also demonstrate the eﬃcacy of our solution
via simulation on data collected at a major cellular service
carrier in the US.
∗This work has been supported in part by the collaborative
NSF project that includes awards CNS 1218092 and CNS
1217758.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
IMC’14, November 5–7, 2014, Vancouver, BC, Canada.
Copyright 2014 ACM 978-1-4503-3213-2/14/11 ...$15.00.
http://dx.doi.org/10.1145/2663716.2663733.
Categories and Subject Descriptors
C.2.3 [Computer-Communication Networks]: Network
monitoring; C.4 [Performance of Systems]: Measurement
techniques
General Terms
Algorithms; Networking
Keywords
Traﬃc analysis; Algorithms; Data Streaming
1.
INTRODUCTION
The past several years have seen an explosive growth of
mobile network technologies and services in all conceivable
dimensions. The amount of cellular network traﬃc has dra-
matically increased year over year. Today a large percentage
of the population on this planet – especially young people –
spend a large chunk of their daily lives on mobile devices such
as smartphones and tablets. More and more mobile services
are provided through smartphone apps, allowing people to
send/receive emails and text messages, watch videos, or play
online games using their smartphones.
However, this growth also poses a signiﬁcant challenge to
cellular network providers in that it makes the performance
anomalies in cellular networks and services hard to measure,
detect, and diagnose. Cellular service providers do have so-
phisticated monitoring of network elements for faults and
performance. However, services have gotten dramatically
more complicated over recent years, with a plethora of so-
phisticated devices (phones, tablets) and a tremendous vari-
ety of apps and online services. Knowing when a single type
of device app or device/app combination is having perfor-
mance problems requires comprehensive service monitoring
and sophisticated problem detection and trouble isolation,
and yet is critical to being able to rapidly resolve such is-
sues. Given the complexity of this network ecosystem, issues
may be introduced by the device (e.g., software), network,
application server, or by some complex interaction between
diﬀerent combinations of these. So simply monitoring the
network or overall service performance will not detect all
possible issues.
2231.1 Problem Statement
In this work, we identify a challenging data mining prob-
lem that is critical for automatically detecting anomalies and
degradation of performance, and propose a data sketching
solution for it. The type of event we are looking for in this
network environment is a set of cellular calls or data ses-
sions whose performance is negatively impacted by a com-
mon cause. An example event could be that more than 100
sessions/calls (say during a ﬁve-minute measurement inter-
val) from customers in a “Metropolis” (a ﬁctitious city name)
downtown location to FunContent server using “Magic Phone
7” (a ﬁctitious device name) that run on “Magic OS 88.8” (a
ﬁctitious OS name) have longer-than-usual round-trip times
(RTT) during a 5-minute time window τ .
In this case,
network operators will be asked to look into possible root
cause(s) of the event which could include Magic Phone 7
operating systems software issues (e.g., the “Magic OS” ver-
sion is too recent for the old model phone), routing prob-
lems along the path from that Metropolis location to San
Francisco bay area (where Facebook servers are located), or
software problems with the FunContent app or at the server
side (e.g., incompatibility with an old version of the app used
by many Metropolis-area customers).
If we were able to record every cellular packet and store
it in a traditional static database, identifying such perfor-
mance anomaly events becomes a variant of the association-
rule mining problem. For example, our task would be look-
ing for the following association rule in the abovementioned
scenario:
“Device = Magic Phone 7” &
“OS = Magic OS 88.8” &
“Application = FunContent.app” &
“Source = Metropolis downtown location” &
“Destination = FunContent.com” &
“Time = τ ”
⇒ “unusually long RTT”.
Our problem here is much more challenging because in a
major cellular network the raw traﬃc comes in too fast to
be saved into a database and is too large to be stored for
an extended period of time.
In other words, we need to
identify such association rules on the ﬂy while the packets
stream in. For the “streaming version” of the abovemen-
tioned problem, a naive solution is to maintain, for every
possible value combination of the attributes “Device”, “OS”,
“Application”, “Source”, “Destination”, and “Time”, a few
statistics counters for tracking the average RTT of the set
of packets that matches the value combination. While this
solution may barely work today, when the total number of
possible value combinations of these attributes is still in the
tens or hundreds of millions, it will not work in the near fu-
ture, as the explosive growth in the number of applications,
devices, and content providers (destinations) will soon drive
the total number of such value combinations to billions or
even trillions, making it impossible to ﬁt all these counters in
main memory (DRAM). While disks (or solid state drives)
are still large enough to store complete summaries, they are
too slow to allow for per-packet updates (to the counters) in
such a high-speed cellular network.
In this work, we propose a general memory-eﬃcient tech-
nique for performing association-rule mining over high-speed
data streams, of which the abovementioned scenario is a spe-
ciﬁc case. Data streaming is concerned with processing a
Figure 1: Two diﬀerent partition scenarios of the
same set. We partition the identical set S as subsets
A1, A2... Am and as subsets B1, B2... Bn
long stream of data items in one pass using a small working
memory in order to approximately answer a query regard-
ing the stream. The key challenge is to “remember,” in this
small memory, as much information pertinent to the query
as possible. Such information is often organized as a synop-
sis data structure referred to as a sketch and diﬀerent sketch
data structures are usually needed to answer diﬀerent types
of queries over the data stream. These sketches are inher-
ently lossy, greatly reducing the storage cost of the data at
the cost of some accuracy – there are well-understood ana-
lytical tradeoﬀs between the space savings and accuracy of
such sketches. Our solution reduces the amount of work-
ing space needed to (approximately) track all possible at-
√
tribute value combinations (say there are N of them) from
N ), without signiﬁcantly degrading the mon-
O(N ) to O(
itoring accuracy for major performance anomalies. This al-
lows the working space to reside entirely in the main memory
(DRAM), and thereby allows for the processing of each and
every data item (in this case a packet) in the stream – and
the updating of the corresponding sketches – on the ﬂy.
1.2 The “Crossroads" Approach
Our solution consists of three steps. The ﬁrst step is to
partition the set of attributes that needs to be mined for
associations into two subsets so that the number of value
combinations of attributes in each subset is much smaller
than – and ideally close to the square root of – that of all
attributes. As shown in Fig. 1, each subset of attributes
can be viewed as a dimension along which the data set S
(in our case consisting of all packets in a cellular network) is
partitioned. For example, in the abovementioned scenario,
one dimension could include all possible “Source” and “Des-
tination” combinations, and the other “Device type”, “OS”,
and “Application” (including its version number) combina-
tions; while the number of joint value combinations of all
these attributes in the future could be in trillions (∼ 1012),
that of each subset may only be in millions (∼ 106). In this
way, the data set S can be partitioned into (data) subsets Ai
for i = 1, 2, ..., m along one dimension, each of which corre-
sponds to the subset of data that takes a certain value com-
bination along that dimension, and similarly into (data) sub-
sets Bj for j = 1, 2, ..., n along the other. In the abovemen-
tioned application scenario, the set of packets that match
(“Source = the Metropolis downtown location” & “Destina-
tion = FunContent.com”) could be one such Ai, and the set
of packets that match (“Device = Magic Phone 7” & “OS =
Magic OS 88.8” & “Application = FunContent.app” & “Time
= τ ”) could be one such Bj. Then the set of packets that
match the ﬁlter (“Device = Magic Phone 7” & “OS = Magic
12nm12224i =(cid:80)
i v0
i v2
(e.g., RTT) of the ith packet in a stream.
i 1 and M1(v) =(cid:80)
the moments M0 =(cid:80)
the stream. The second moment (M2 =(cid:80)
In particular,
i vi give
the number of packets and the sum of such values in all
the packets in the stream, respectively. These quantities
together allow us to estimate the mean of such values in
i ) is even more
interesting, since, normalized by the total number of packets
M0 in the stream, it can be decomposed into the sum of two
quantities: (1) the square of the empirical mean v value,
and (2) the empirical variance of the v values, across all
packets in the stream (i.e., M2(v)
M0(v) = E(v)2 + V ar(v)). Any
signiﬁcant increase in either the mean or the variance, both
constituting a performance anomaly, will be reﬂected in the
second moment.
Here is a simple example of a stream containing 3 diﬀerent
packets. Let the RTT values of the 3 packets be 50, 100,
100. For this stream, the number of distinct elements will
be M0(RT T ) = 3, the sum of RTT values in the stream
will be M1(RT T ) = 50 + 100 + 100 = 250, and the second
moment will be M2(RT T ) = 502 + 1002 + 1002 = 22, 500.
Note that in the data streaming literature, we are usu-
ally concerned with the frequency moments of the stream,
that is, moments based on the frequency with which each
unique identiﬁer appears.
In the networking context, this
identiﬁer is usually that of a transport-layer (TCP or UDP)
ﬂow, i.e., the ﬁve-tuple consisting of source and destination
IP addresses and port numbers, and the protocol.
In our
case, however, we consider every packet to have a unique
identiﬁer, or to be a singleton “ﬂow” itself. In other words,
we are interested in the much easier-to-compute moments of
the (RTT) values of individual singleton ﬂows. For a single
stream this can trivially be computed using a single counter
that is incremented with each new (RTT) value. The reason
why our problem is challenging, and deserves this eﬀort, is
that we are interested in eﬃciently computing the moments
of the intersection of two massive data streams. More pre-
cisely, we would like to compute the moments of the (RTT)