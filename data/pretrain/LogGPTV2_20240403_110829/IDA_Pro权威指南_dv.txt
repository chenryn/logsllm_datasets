//macro
isHex1
//macro
isLoaded
//macro
isOct0
//macro
isOct1
//macro
isOff0
//macro
isOff1
//macro
isRef
//macro
isSeg0
//macro
isSeg1
//macro
isStkvar0
//macro
isStkvar1
//macro
isStroff0
//macro
isStroff1
//macro
isTail
//macro
isUnknown
//macro
isVar
//macro
lastattr
return qstrdup(VarLastAttr(self));
loadfile
linput_t  *li = make_linput(handle);
file2base(li, pos, ea, ea + size, false);
unmake_linput(li); 
ltoa
Calls internal conversion routine
mkdir
return qmkdir(dirname, mode);
nextattr
return qstrdup(VarNextAttr(self, attr));
ord
return str[0];
prevattr
return qstrdup(VarPrevAttr(self, attr));
print
 qstring qs; 
VarPrint(&qs, arg);
msg("%s\n", qs.c_str()); 
readlong
 unsigned  int res;
freadbytes(handle, &res, 4, mostfirst);
return res; 
readshort
 unsigned  short res;
freadbytes(handle, &res, 2, mostfirst);
return res; 
readstr
 qfgets(buf, sizeof(buf),  handle);
return qstrdup(buf); 
rename
return rename(oldname, newname);
rotate_left
return rotate_left(value, count, nbits, offset);
savefile
base2file(handle, pos, ea, ea + size);
set_start_cs
//macro, see SetLongPrm
set_start_ip
//macro, see SetLongPrm
setattr
return VarSetAttr(self, attr, value) == 0;
sizeof
type_t  * t = internal_type_from_idc_typeinfo(type);
return get_type_size(idati, t); 
sprintf
 qstring buf; 
buf.sprnt(format, ...);
return qstrdup(buf.c_str()); 
strfill
 qstring s; 
s.resize(len + 1, &chr);
return new qstring(s); 
strlen
return strlen(str);
strstr
return strstr(str, substr);
substr
Calls internal slice routine
trim
return new qstring(string.c_str());
unlink
return _unlink(filename);
writelong
fwritebytes(handle, &dword, 4, mostfirst);
writeshort
fwritebytes(handle, &word, 2, mostfirst);
writestr
qfputs(str, handle);
xtol
return strtoul(str, NULL, 16);