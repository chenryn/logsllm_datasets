v_sql text;  
v_max_id int;  
v_id int;  
BEGIN  
set client_min_messages = warning;  
CREATE TEMPORARY TABLE IF NOT EXISTS tmp_get_py_zm (id int,py varchar(6),zm varchar(1)) ON COMMIT DELETE ROWS;  
truncate table tmp_get_py_zm;  
i := 0;  
for v_hz in select regexp_split_to_table(i_hz,'') loop  
  if ascii(v_hz) > 255 then  
    insert into tmp_get_py_zm select i,py,zm from pinyin where hz=v_hz;  
  else  
    insert into tmp_get_py_zm values(i,v_hz,v_hz);  
  end if;  
  if not found then  
    perform 1 from new_discover where hz = v_hz;  
    if not found then  
      insert into new_discover(hz) values(v_hz);  
    end if;  
    insert into tmp_get_py_zm values(i,'?','?');  
  end if;  
  i := i+1;  
end loop;  
select max(id) into v_max_id from tmp_get_py_zm;  
if v_max_id > 0 then  
  v_sql1 := '';  
  v_sql3 := '';  
  v_sql4 := '';  
  v_id := 0;  
  for v_id in select generate_series(0,v_max_id) loop  
    if v_id <> v_max_id then  
      v_sql1 := v_sql1||'(select py,zm from tmp_get_py_zm where id='||v_id||') as t'||v_id||',';  
      v_sql3 := v_sql3||'t'||v_id||'.py::text||';  
      v_sql4 := v_sql4||'t'||v_id||'.zm::text||';  
    else  
      v_sql1 := v_sql1||'(select py,zm from tmp_get_py_zm where id='||v_id||') as t'||v_id;  
      v_sql3 := v_sql3||'t'||v_id||'.py::text';  
      v_sql4 := v_sql4||'t'||v_id||'.zm::text';  
      v_sql := 'select array_agg('||v_sql3||'),array_agg('||v_sql4||') from '||v_sql1;  
    end if;  
  end loop;  
else  
  v_sql := 'select array_agg(py::text),array_agg(zm::text) from tmp_get_py_zm';  
end if;  
return query execute v_sql;  
return;  
END;  
$$ language plpgsql;  
```  
修改后的测试, 点选两个汉字在码表中不存在. 将以问号代替.  
```  
digoal=# select * from get_py_zm('这是繁体,点选');  
         c1         |     c2        
--------------------+-------------  
 {"zheshifanti,??"} | {"zsft,??"}  
```  
以问号代替不存在的汉字并插入new_discover表  
```  
digoal=# select * from new_discover ;  
 hz | py | zm   
----+----+----  
 点 |    |   
 选 |    |   
```  
接下来测试可能使用的场景  
创建包含歌手,歌曲信息的表.  
```  
create table music (id serial primary key, song text, singer text, songpy text[], songzm text[], singerpy text[], singerzm text[]);  
```  
插入一条测试数据  
```  
insert into music(song,singer,songpy,songzm,singerpy,singerzm) select '刘德华','中国人',t1.c1,t1.c2,t2.c1,t2.c2 from get_py_zm('刘德华') t1,get_py_zm('中国人') t2;  
```  
查看转码是否成功  
```  
digoal=# select * from music;  
 id |  song  | singer |   songpy   | songzm |   singerpy    | singerzm   
----+--------+--------+------------+--------+---------------+----------  
  1 | 刘德华 | 中国人 | {liudehua} | {ldh}  | {zhongguoren} | {zgr}  
(1 row)  
```  
插入10W条测试记录  
```  
digoal=# insert into music(song,singer,songpy,songzm,singerpy,singerzm)  
select t.info, t.info, (t.t1).c1, (t.t1).c2, (t.t2).c1, (t.t2).c2   
from   
  (select t.info,get_py_zm(t.info) t1,get_py_zm(t.info) t2   
  from   
    (select '刘德华'||generate_series(1,100000) as info) as t  
  )   
as t;  
```  
创建索引, 加快按字母检索的速度  
```  
digoal=# create index idx_music_songpy on music using gin (songpy);  
CREATE INDEX  
digoal=# create index idx_music_songzm on music using gin (songzm);  
CREATE INDEX  
digoal=# create index idx_music_singerpy on music using gin (singerpy);  
CREATE INDEX  
digoal=# create index idx_music_singerzm on music using gin (singerzm);  
CREATE INDEX  
```  
检索测试  
```  
digoal=# explain analyze select * from music where singerzm @> array['ldh1'];  
                                                         QUERY PLAN                                                            
-----------------------------------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on music  (cost=8.78..188.78 rows=100 width=176) (actual time=0.024..0.024 rows=1 loops=1)  
   Recheck Cond: (singerzm @> '{ldh1}'::text[])  
   ->  Bitmap Index Scan on idx_music_singerzm  (cost=0.00..8.75 rows=100 width=0) (actual time=0.018..0.018 rows=1 loops=1)  
         Index Cond: (singerzm @> '{ldh1}'::text[])  
 Total runtime: 0.050 ms  
(5 rows)  
Time: 0.396 ms  
digoal=# select * from music where singerzm @> array['ldh1'];  
  id   |  song   | singer  |   songpy    | songzm |  singerpy   | singerzm   
-------+---------+---------+-------------+--------+-------------+----------  
 40947 | 刘德华1 | 刘德华1 | {liudehua1} | {ldh1} | {liudehua1} | {ldh1}  
(1 row)  
Time: 0.308 ms  
```  
速度还不错.  
[汉字拼音对照文件](20120515_01_rar_001.rar)  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")