revocation status.
Unfortunately, OCSP Stapling does not entirely remove
the latency penalty for clients, as OCSP Stapling only in-
cludes the OCSP response for the leaf certiﬁcate (the pro-
tocol does not allow the server to include cached OCSP re-
sponses for intermediate certiﬁcates). A recently proposed
extension to OCSP Stapling [37] addresses this limitation
by allowing the server to include stapled OCSP responses
for intermediates and the leaf certiﬁcate, but has yet to see
wide adoption.
2.3 Certiﬁcate Validation
Despite its critical importance for securing the integrity
of the PKI, the X.509 speciﬁcation [11] is somewhat vague
when discussing revocation checking during certiﬁcate vali-
dation. While it is clear that a client should not trust a re-
voked certiﬁcate that appears in a CRL or OCSP response,
there is an active discussion [20, 28] regarding what to do
when a client is unable to access the revocation status of
a certiﬁcate (e.g., if the browser cannot resolve the domain
name of the CRL server, if the OCSP server is down, etc).
The X.509 speciﬁcation states that, in this case, the certiﬁ-
cate should be given the status undetermined [11], but does
not specify how this should be interpreted.
For maximum security, the client should not trust the cer-
tiﬁcate chain if any of its revocation information is unavail-
able; after all, the client cannot be certain that one of the
certiﬁcates has not been revoked. But from a user’s per-
spective, this would look like the browser’s inability to load
a page that an incorrect browser would successfully load.
Thus, browser developers often soft-fail by deciding to trust
certiﬁcates when revocation information is unavailable, so
as not to rest their perceived reliability on the shoulders of
a disparate set of third-party CAs.
Soft-failing when revocation information is unavailable
may at ﬁrst appear to be an innocuous trade-oﬀ for usabil-
ity, but in practice it has surprisingly extensive implications
on the security of the PKI. Any attacker who can block a
victim’s access to speciﬁc domains (e.g., an attacker on the
same wireless network) could leverage soft-failures to eﬀec-
tively turn oﬀ the victim’s revocation checking. As a result,
some browser maintainers have concluded that requesting
revocation information in direct response to visiting a web-
site does not actually increase security [28], and have advo-
cated instead for pushing incomplete subsets of revocation
information to clients (§7).
To ensure user security, however, there is simply no re-
placement for maintaining as complete and up-to-date revo-
cation information as possible. And when it is not possible,
it is our opinion that hard-failing would better inform users
of the potential security risks, and may apply useful cus-
tomer pressure on CAs with unreliable services.6 Thus, we
6Browser maintainers have also claimed that hard-failing browsers
would also cause CRL servers and OCSP responders to become single
maintain that revocation is a critical component of a PKI,
and in the remainder of this paper, we analyze to what ex-
tent it is supported by administrators, CAs, and clients.
3. DATA COLLECTION
In this section, we describe the data we use to understand
certiﬁcate revocation behavior, and deﬁne several terms that
we use in our analysis.
3.1 SSL Certiﬁcates
Obtaining representative statistics on certiﬁcates that are
revoked is not entirely straightforward, as revoked certiﬁ-
cates (by deﬁnition) should no longer be advertised. Thus,
simply measuring the number of entries in CRLs is suﬃ-
cient to count revocations, but does not reveal which cer-
tiﬁcates were revoked (CRLs only contain the certiﬁcates’
serial numbers). As a result, it is necessary to collect data
on advertised certiﬁcates over time, and then periodically
check to see which of the certiﬁcates have been revoked.
However, obtaining a representative sample of advertised
certiﬁcates is also diﬃcult; relying on data gathered from
passive traces [16, 23] is likely to have good coverage of pop-
ular certiﬁcates but may miss unpopular ones.
We obtain our collection of SSL certiﬁcates from (roughly)
weekly scans of port 443 over the entire IPv4 address space,
made available by Rapid7 [40]. In this paper, we use 74 scans
conducted between October 30, 2013 and March 30, 2015.
Overall, we observe 38,514,130 unique SSL certiﬁcates.
Many of the certiﬁcates that we ﬁnd in the scans are in-
valid (e.g., self-signed certiﬁcates on WiFi routers). Thus,
we pre-process the dataset by verifying all observed certiﬁ-
cates. We do so by ﬁrst building the set of all intermediate
certiﬁcates that can be veriﬁed relative to the roots.7 This
is an iterative process (as certain intermediates can only be
veriﬁed once other intermediates are veriﬁed); in the end,
we discover 1,946 intermediate certiﬁcates, which we refer
to as the Intermediate Set.
We then proceed to verify all leaf certiﬁcates using this set
of intermediate and root certiﬁcates. We conﬁgure OpenSSL
to ignore certiﬁcate date errors (as our scans cover over 1.5
years), but to fail on any other error (except revocation,
which we address later). This allows us to only keep cer-
tiﬁcates that were valid at some point in time. We ﬁnd a
total of 5,067,476 such leaf certiﬁcates; this Leaf Set is the
set of certiﬁcates that we examine throughout the remainder
of the paper. Of these, we observe that 2,291,511 (45.2%)
were still being advertised in the latest port 443 scan.
3.2 Obtaining Revocation Information
We collect our data on certiﬁcate revocations using the
revocation information present in the certiﬁcates.
In the
Leaf Set, we observe that 99.9% of the certiﬁcates list a po-
tentially reachable8 CRL distribution point, and 95.0% of
certiﬁcates list a potentially reachable OCSP responder. In-
terestingly, we ﬁnd 4,384 (0.09%) Leaf Set certiﬁcates that
have neither a CRL distribution point nor an OCSP respon-
der. These represent certiﬁcates that can never be revoked.
points of failure and attractive DDoS targets. However, CRLs and
OCSP responses are cacheable, and existing techniques for distribut-
ing static content (e.g., CDNs) can be applied to them as well.
7We use the root store in OS X 10.9.2 [35] as our set of trusted
roots; this includes 222 unique root certiﬁcates.
Figure 1: Diagram of events in a certiﬁcate’s lifetime. Two
diﬀerent timelines exist for any certiﬁcate: when it is fresh (be-
tween validity dates) and when it is alive (advertised by servers).
Certiﬁcates may also be revoked during the time they are fresh.
In the Intermediate Set, we observe that 98.9% of the cer-
tiﬁcates list a potentially reachable CRL distribution point,
while 48.5% list a potentially reachable OCSP responder.
Similar to the Leaf Set, we ﬁnd 18 (0.92%) intermediate
certiﬁcates that have no CRL distribution point or OCSP
responder.9 Being unable to revoke a CA certiﬁcate is par-
ticularly worrisome, as possessing a CA certiﬁcate’s private
key allows one to generate certiﬁcates for any Internet do-
main (and private keys for CA certiﬁcates have be inappro-
priately given out multiple times in the past [5, 31, 48]).
CRLs. For the certiﬁcates that include a CRL distribution
point, we use this CRL to obtain revocation information for
the certiﬁcate. We observe a total of 2,800 unique CRLs,
and we conﬁgure a crawler to download each of these CRLs
once per day between October 2, 2014 and March 31, 2015.
OCSP. We observe a total of 499 unique OCSP respon-
ders across all certiﬁcates. However, querying each of these
responders to check the status of each certiﬁcate is pro-
hibitively expensive, and also unnecessary in the case where
a CRL distribution point is also provided. Thus, we only
query the OCSP responders for the 642 certiﬁcates that only
have an OCSP responder provided (i.e., no CRL distribution
point). This data was collected on March 31, 2015.
3.3 Deﬁnitions
Throughout this study, we will consider a variety of events
in the lifetime of an SSL certiﬁcate. For a given certiﬁcate,
we are concerned with two interrelated timelines (Figure 1
demonstrates a few possible conﬁgurations of these time-
lines):
Fresh. We deﬁne a certiﬁcate’s fresh period to be the time
between its Not Valid Before date and its Not Valid Af-
ter date. This is the period of time in which a client will
potentially accept the certiﬁcate.
Lifetime. We consider a certiﬁcate to be alive during the
time from when we ﬁrst saw the certiﬁcate advertised (its
birth) to when we last saw it advertised (its death). Typi-
cally, the lifetime is a strict subset of the certiﬁcate’s fresh
period, but we do observe many instances where expired
certiﬁcates are still advertised.
Note that neither of these deﬁnitions account for revoca-
tions: we consider a certiﬁcate in its fresh period to still be
8We only consider http[s]:// CRL URLs, and ignore distribution
9This ﬁgure excludes root certiﬁcates, as these certiﬁcates have
points in private networks such as ldap:// and file:// URLs.
no CRL distribution points or OCSP responders by design.
timeTypical certi(cid:31)cateLifetime is a subset of validity period.Revoked certi(cid:31)cateCerti(cid:31)cate stops being advertised once revoked.Atypical certi(cid:31)cateCerti(cid:31)cate advertised after revoked and expired.Not BeforeNot AfterRevokedFresh period(between validity dates)Alive period(advertised by hosts)fresh, and an advertised certiﬁcate to be alive, regardless
of whether or not it has been revoked. We do so because
clients that do not check revocation information will still
accept revoked fresh certiﬁcates.
4. WEBSITE ADMIN BEHAVIOR
The revocation process begins with the website admin-
istrator making a request to its CA, and oﬀering a reason
for the revocation. We begin our analysis at the source by
analyzing the frequency and reasons for revocations.
4.1 Frequency of Revocations
First, we examine the characteristics of individual certiﬁ-
cates. Figure 2 shows the fraction of fresh and alive certiﬁ-
cates that are revoked in our data set between January 2014
and March 2015. We ﬁrst observe that a surprisingly large
fraction of all fresh certiﬁcates are actually revoked: as of
this writing, over 8% of them are revoked. The majority
of these revocations are caused by the Heartbleed vulnera-
bility [52]; this shows up in the graph as the “spike” start-
ing in May 2014.10 However, even before this vulnerability,
over 1% of fresh certiﬁcates were revoked, indicating that a
non-trivial fraction of SSL certiﬁcates are revoked even in
steady-state.
Second, we observe that the fraction of alive certiﬁcates
that are revoked is much smaller—less than 1% of all alive
certiﬁcates—but still non-zero. Certiﬁcates in this category
are surprising, as it suggests that the site administrator went
to the eﬀort to revoke the certiﬁcate, but failed to update
(all of) their machines with the new certiﬁcate. Examples of
such certiﬁcates include https://west-secvpn.apple.com,
https://vpn.trade.gov, and https://gamespace.adobe.
com (the last of which is both expired and revoked).
Third, when considering only EV certiﬁcates, we observe
largely similar trends: Over 6% of fresh EV certiﬁcates are
currently revoked, and over 0.5% of alive EV certiﬁcates are
revoked. EV certiﬁcates have much stricter entity validation
requirements by CAs, so it is surprising to see that a higher
fraction of EV certiﬁcates are revoked but still advertised.
Compared to the revocation behavior shortly after Heart-
bleed [52], we ﬁnd that certiﬁcate owners quickly returned
to pre-Heartbleed behaviors, despite the fact that there were
still many vulnerable certiﬁcates that needed to be revoked.
Moreover, we ﬁnd that revocation alone may not be enough,
as there are many revoked certiﬁcates still being advertised.
Whether they have any impact on client security depends
on whether clients are downloading revocation information,
which we study in §6.
4.2 Reasons for Revocation
We have observed that a signiﬁcant fraction of all fresh
certiﬁcates are revoked, but a key question remains: Why
are these certiﬁcates revoked? Unfortunately, the reasons
for revocation are typically diﬃcult to measure; only the
certiﬁcate owners (or, potentially, the CA) knows why a
certiﬁcate is being revoked, and many administrators are
likely to consider this information to be private or sensitive.
Zhang et al. [52] used CRL reason codes—which range
from “Unspeciﬁed” to “Key Compromised” to “Privilege
10Previous work demonstrated that, a full month after Heartbleed
was announced, only about 13% of site owners that should have re-
voked did revoke [52]. Thus, an even larger fraction of fresh certiﬁ-
cates should be revoked, but are not.
Figure 2: Fraction of fresh (top) and alive (bottom) certiﬁcates
over time that are revoked (for all certiﬁcates and EV-only cer-
tiﬁcates). The large “spike” in April 2014 is due to certiﬁcate
revocations caused by the Heartbleed vulnerability. We observe
that today, over 8% of all fresh certiﬁcates are revoked, and more
surprisingly, over 0.6% of alive certiﬁcates are revoked.
Withdrawn” [11]—to attempt to gain some insight, but
found reason codes not to be particularly informative. We
repeated their methodology with our dataset, extracting the
reason code for all revocations. Even on our larger data set,
we ﬁnd a similar distribution of reason codes: in particular,
the vast majority of revocations actually include no reason
code. Thus, CRL reason codes provide some information
(and as we will see in §7, they form the basis of Google’s
decision to include the revocation in CRLSets), but should
likely be viewed with caution.
4.3 OCSP Stapling
Recall from §2.2 that OCSP Stapling was developed to ad-
dress the limitations of CRLs and OCSP. One would thus ex-
pect that OCSP Stapling has been embraced at web servers.
However, OCSP Stapling requires the website administra-
tors to enable it on their web server (unlike CRLs and OCSP,
which only involve the CA), so it is unclear how often web-
site administrators do so.
To determine what fraction of certiﬁcates are hosted on
servers that support OCSP Stapling, we use the IPv4 TLS
Handshake scans conducted by the University of Michi-
gan [49]. Each scan contains details about the port 443 SSL
handshake with every IPv4 server, including the support for
various TLS extensions. We examine the scan of March 28,
2015, and look for servers that were advertising certiﬁcates
in the Leaf Set.
Some web servers that support OCSP Stapling (e.g., Ng-
inx) may not include a staple in the response if they do not
have a valid staple cached (in this case, they will then at-
tempt to fetch a fresh staple). Thus, the scan data from
above may underestimate the fraction of servers that ac-
tually support OCSP Stapling. To measure this eﬀect, we
chose 20,000 random servers and connected to them repeat-
edly (sleeping 3 seconds between connections) to see if we
ever received a staple, and present the results in Figure 3.
Overall, the results suggest that using only a single connec-
tion is likely to underestimate the true fraction of OCSP
0.0000.0010.0020.0030.0040.0050.0060.0070.00801/1403/1405/1407/1409/1411/1401/1503/15Fraction of Alive Certsthat are RevokedDateAll CertsEV Certs0.0000.0200.0400.0600.0800.1000.120Fraction of Fresh Certsthat are RevokedAll CertsEV CertsFigure 3: Fraction of servers observed to support OCSP Stapling
as multiple requests are made; certain servers will only provide a
staple if a fresh one is cached (note that the y-axis does not start
at 0). Using only a single request is likely to underestimate the
fraction of OCSP Stapling support by approximately 18%.
Figure 4: Fraction of new certiﬁcates that include CRL or OCSP
revocation information over time (note that the y-axis does not
start at 0). We observe that, today, almost all new certiﬁcates
contain both types of revocation information.
Stapling support by about 18%; this eﬀect should be taken
into account when interpreting our results below.
Looking at the TLS Handshake scan data, we observe
12,978,883 servers advertising fresh Leaf Set certiﬁcates (this
is larger than the number of Leaf Set certiﬁcates, as one cer-
tiﬁcate could be advertised by many servers), of which only
337,856 (2.60%) support OCSP stapling. However, this only
tells us the fraction of servers that support OCSP Stapling,
but not the fraction of certiﬁcates that we see it supported
for. Of the 2,298,778 fresh certiﬁcates advertised in this
scan, we observe that only 119,519 (5.19%) are served by
at least one server that supports OCSP Stapling, and only
70,996 (3.09%) are served by servers that all do so.
If we narrow our focus to only EV certiﬁcates, we ﬁnd
that of the 83,974 fresh EV certiﬁcates advertised during
the scan, only 2,644 (3.15%) are advertised by at least one
server that supports OCSP Stapling, and only 1,640 (1.95%)
are advertised by servers that all support OCSP Stapling.
This is a smaller fraction than all certiﬁcates, and may be
caused by many large hosting providers (commonly used by
owners of EV certiﬁcates) not supporting OCSP Stapling.
Thus, while OCSP Stapling is supported by all major
web server implementations, OCSP Stapling has still seen
very little adoption. Even taking into account the underes-
timation of OCSP Stapling support from a single-connection
scan, only about 6–7% of certiﬁcates are served by at least
one server that supports OCSP Stapling. Our results stand
in contrast to scans that focus only on popular web sites
(e.g., Qualys’ SSL Pulse [38] reports ∼20% OCSP Stapling
support), suggesting that less popular sites are signiﬁcantly
less likely to support OCSP Stapling.
4.4 Summary
Our results show that a considerable number of certiﬁ-
cates are advertised even long after they are revoked. This