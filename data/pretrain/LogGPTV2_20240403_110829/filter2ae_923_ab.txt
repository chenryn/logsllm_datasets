                USB device filesystem
    File systems --->
        Kernel automounter support (内核自动挂载支持)
        Kernel automounter version 4 support (also supports v3)
        Filesystem in Userspace support
        Pseudo filesystems --->
            /proc file system support
                /proc/kcore support
                Sysctl support (/proc/sys)
            sysfs file system support
### Library配置
    Library Configuration ---> （选择需要的Lib库）
    Network Applications ---> (选择需要的网络相关软件)
        storage(enable chmod, fdisk in busybox)
            proftpd (FTP Server)
        iptables
        openssl
        pppd
            l2tp client
        pptp
        uvc_stream
    Miscellaneous Applications --->
        busybox
        mtd write
    Proprietary Application --->
        NVRAM
        GPIO
### 其余配置
    Busybox Settings --->
        Build Options --->
            Build BusyBox as a static binary (no shared libs) （编译成静态文件）
其他的根据需要进行选择就行了。  
uClibc Configuration 和 uClibc++ Configuration基本选默认的就行。
### 编译
    make dep
    make
编译完成后可在source/images目录下找到root_uImage镜像文件，在source/romfs下存在文件系统。
## Ralink SDK文件系统修改
光编译好固件可不能满足我们的要求，还要能修改启动脚本，添加我们自己的文件才行。  
打开source/vendors/Ralink/RT3052目录下的Makefile可以看到它创建了文件目录系统，并把一些需要的文件拷进去了：
那么我们就可以通过修改Makefile和目录下的文件来编辑自己的文件系统。可根据需要修改下面几个文件:
    rcS: 启动脚本
    inittab: init进程配置文件
    motd: Ralink图标
    fstab：文件系统信息
    RT2860_default_vlan：nvram默认配置文件
在ROMFS_DIRS后添加目录，在$(ROMFSINST)
/etc_ro/motd后添加文件（注意这里的文件需要放在source/vendors/Ralink/RT3052目录下）：
查看source/user/rt2880_app/scripts目录下的Makefile可以发现它配置了/sbin目录下的可执行文件和脚本文件：
要添加脚本只需复制到source/user/rt2880_app/scripts目录下即可。
## 启动脚本配置
下面我的启动脚本配置，并进行了注释，仅作为参考：
    #!/bin/sh
    mount -a #挂载所有的文件系统，在fstab文件中有配置
    mkdir -p /var/run
    cat /etc_ro/motd
    # Linux 2.6 uses udev instead of devfs, we have to create static dev node by myself
    # 创建静态dev节点
    mounted=`mount | grep mdev | wc -l`
    if [ $mounted -eq 0 ]; then
    mount -t ramfs mdev /dev
    mkdir /dev/pts
    mount -t devpts devpts /dev/pts
    mdev -s
    fi
    # 创建设备文件
    mknod /dev/spiS0 c 217 0
    mknod /dev/i2cM0 c 218 0
    mknod /dev/rdm0 c 254 0
    mknod /dev/flash0 c 200 0
    mknod /dev/swnat0 c 210 0
    mknod /dev/hwnat0 c 220 0
    mknod /dev/acl0 c 230 0
    mknod /dev/ac0 c 240 0
    mknod /dev/mtr0 c 250 0
    mknod /dev/nvram c 251 0
    mknod /dev/gpio c 252 0
    mknod /dev/PCM c 233 0
    mknod /dev/I2S c 234 0
    echo "#  :  [ ]" > /etc/mdev.conf
    echo "# The special characters have the meaning:" >> /etc/mdev.conf
    echo "# @ Run after creating the device." >> /etc/mdev.conf
    echo "# $ Run before removing the device." >> /etc/mdev.conf
    echo "# * Run both after creating and before removing the device." >> /etc/mdev.conf
    echo "sd[a-z][1-9] 0:0 0660 */sbin/automount.sh \$MDEV" >> /etc/mdev.conf
    #enable usb hot-plug feature
    echo "/sbin/mdev" > /proc/sys/kernel/hotplug
    # 启动nvram_daemon进程
    nvram_daemon&
    # 从nvram配置文件中获取用户名和密码并设置系统用户
    login=`nvram_get 2860 Login`
    pass=`nvram_get 2860 Password`
    echo "$login::0:0:Adminstrator:/:/bin/sh" > /etc/passwd
    echo "$login:x:0:$login" > /etc/group
    chpasswd.sh $login $pass
    # audio
    pcmcmd -s &
    # video
    uvc_stream -b &
    sleep 2
    # Set RT3050 to dump switch mode (restore to no VLAN partition)
    switch reg w 14 5555
    switch reg w 40 1001
    switch reg w 44 1001
    switch reg w 48 1001
    switch reg w 4c 1
    switch reg w 50 2001
    switch reg w 70 ffffffff
    switch reg w 98 7f7f
    switch reg w e4 7f
    lan_if="br0"
    # lo interface up -- mydlink need it
    ifconfig lo up
    # setup bridge, lan and wlan interface, and fast forwarding time (setfd, setmaxage)
    ifconfig eth2 0.0.0.0
    ifconfig ra0 0.0.0.0
    brctl addbr br0
    brctl addif br0 ra0
    brctl addif br0 eth2
    brctl setfd br0 1
    brctl setmaxage br0 1 
    # setup wlan enable/disable
    gpio wlan 1
    # 配置ip地址
    ip=`nvram_get 2860 wan_ipaddr`
    nm=`nvram_get 2860 wan_netmask`
    gw=`nvram_get 2860 wan_gateway`
    ifconfig $lan_if $ip netmask $nm
    route del default
    gpio gw 0.0.0.0
    if [ "$gw" == "0.0.0.0" ]; then
    gw=""
    fi
    if [ "$gw" != "" ]; then
    route add default gw $gw
    gpio gw $gw
    else
    route add default gw $ip
    fi
    # 后台启动alphapd服务
    web.sh
    sleep 3
    # 后台运行调度器
    killall -q schedule
    schedule &
    #for telnet debugging
    telnetd
    #for syslogd
    mkdir -p /var/log