r
e
u
q
d
e
l
i
a
f
f
o
n
o
i
t
c
a
r
f
0
0
more than 99% CPU usage
230k queries/s
fraction of failed
UDP queries
median UDP query latency
100k
250k
50k
attack rate at server (queries/second)
150k
200k
 10000
 1000
 100
)
s
m
(
y
c
n
e
t
a
l
y
r
e
u
q
n
a
d
e
m
i
 10
300k
s
e
i
r
e
u
q
d
e
l
i
a
f
f
o
n
o
i
t
c
a
r
f
1
0.8
0.6
0.4
0.2
0
half-open connections
with SYN cookies
no SYN cookies
no SYN cookies
fraction of failed
TCP queries
with SYN cookies
50k
0
spoofed TCP syn attack rate at server (queries/second)
100k
150k
200k
250k
70k
60k
50k
40k
30k
20k
10k
0
s
n
o
i
t
c
e
n
n
o
c
n
e
p
o
-
f
l
a
h
n
a
d
e
m
i
 1
 0.8
 0.6
 0.4
 0.2
s
e
i
r
e
u
q
d
e
l
i
a
f
f
o
n
o
i
t
c
a
r
f
max concurrent connections + backlog
6
9
0
4
>
max concurrent connections
number of established connections
fraction of failed queries
6k
5k
4k
3k
2k
1k
s
n
o
i
t
c
e
n
n
o
c
P
C
T
d
e
h
s
i
l
b
a
t
s
e
 0
 2
 1
 0
 9
number of attackers (attack rate 10 connections/second)
 3
 4
 5
 8
 6
 7
0
(a) UDP-based DNS performance under DoS at-
tack.
(b) TCP-based DNS performance under spoofed
DoS attack, with (ﬁlled circles) and without (empty
circles) SYN cookies.
(c) TCP-based DNS performance with non-
spoofed DoS attack.
Fig. 4: Evaluation of denial-of-service attacks on DNS servers. Dataset: testbed experiment
sessions. Since we are only testing connection initiation, we do
not use persistent connections or TCP fast-open. Foreground
trafﬁc is sent with the dig program. Attack trafﬁc uses a
custom-written UDP/TCP ﬂooder or hping3; we vary the
number of attackers and measure the observed attack rate. For
each kind of attack scenario, we repeat the experiment for 10
times.
UDP-based DNS under attack: First we consider a current
DNS where all trafﬁc is UDP. A UDP receiver cannot verify
source addresses, so an attacker will spoof query source
addresses to defeat source-based rate-limiting or ﬁltering.
Servers must reply to both foreground and attack queries; the
attacker exploits this to exhaust either host processing power
or network capacity in the reverse path. In the experiment,
two attackers can easily DoS the server if not network-limited
(we pace the attackers to study a range of rates). In Figure 4a
we see that our server handles about 230k queries/s at full
capacity (CPU limited in the gray region). Both reply latency
for completed queries (dashed blue line and right axis) and the
number of unanswered queries (solid red line and left axis) rise
dramatically under overload. These results are typical of DNS
servers under DoS attacks that are not limited by network
speed; they show why robust DNS operations are heavily
overprovisioned.
DNS-over-TCP under attack: Next we consider three
variations of a TCP SYN-ﬂood attack in Figure 4b. Here,
the attacker’s goal is to exhaust the number of available TCP
connections on the server (right axis), resulting in unanswered
queries (left axis).
First, we allow the attacker to spoof source addresses and
operate the server without SYN cookies. By default, half-
open connections persist for tens of seconds, and legitimate
queries must compete with attack trafﬁc for connection slots.
In Figure 4b, without SYN cookies on the server (lines with
empty circles), a single attacker can easily send 60k SYN/s
and consume all possible TCP connections on the server,
resulting in 70% of foreground queries being dropped. With
SYN cookies (lines with ﬁlled circles), all state is pushed back
on the sender, so attack trafﬁc consumes no memory at the
server and no foreground replies are lost.
Finally we consider a TCP SYN-ﬂood attack without
179179
spoofed addresses. A wise server will use SYN cookies to
prevent spoofed attacks, and will rate-limit new connections
to bound non-spoofed attacks. If we rate-limit to 10 new
connections/s per IP address (for DNS with p-TCP,
there
should never be more than 1 active connection per IP), and
the server has 60k TCP connection slots, then it requires
6k attackers to fully consume the server’s connections. In
experiment we test a scaled-down version of this scenario:
attackers are limited to 10 connection/s and the server supports
4096 active connections. Figure 4c shows the outcome: 5
attackers are required to consume most connection slots, at
which point all legitimate trafﬁc is dropped. Although this
experiment is scaled down to ﬁt our testbed, full-scale server
would support 60k connections or more. With SYN cookies
against spoofers and rate limiting to 1 TCP connection per
source-IP when under attack, a single server can tolerate
thousands of attackers, many times what are required for a
UDP attack. Large DNS providers often serve from clusters
of machines, requiring even more attackers.
A ﬁnal threat is attacks on TLS, with the goal of consuming
server CPU [6]. Since TLS handshakes are expensive, we
expect servers to adopt strict rate limits per source address,
perhaps 4 TLS connections/s per IP address. A 2006 study
shows that a server with a PIII-933 MHz, dual CPU can handle
more than 1000 TLS connections/s with optimizations [17]
(we expect this number to be much larger on current hard-
ware), requiring an attacker with 250 machines. Since we
require non-spoofed addresses, active ﬁltering to these attacks
become possible. A DoS attacker requires more resources
against an all-TLS DNS server when compared to an all-UDP
DNS server. We know that TLS-based websites survive DoS
attacks, suggesting TLS-based DNS can as well.
To summarize, we show that TCP with SYN cookies and
TLS greatly increase the work factor for an attacker to
overwhelm the DNS server itself, compared with UDP. Our
experiments use a moderate-size DNS server, but this work-
factor increase means it is even harder for attacker to defeat
large DNS deployments such as authoritative servers for large
zones. With the overhead and performance optimizations we
describe, large-size servers should ﬁnd TCP and TLS both
feasible and highly beneﬁcial to the mitigation of DoS attacks.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:44 UTC from IEEE Xplore.  Restrictions apply. 
step
TCP handshake
packet handling
crypto handshake
key exchange
CA validation
crypto resumption
DNS resolution
crypto
OpenSSL GnuTLS
0.15 ms
0.12 ms
25.8 ms
13.0 ms
12.8 ms
1.2 ms
0.1–0.5 ms
∼1 ms
8.0 ms
6.5 ms
1.5 ms
1.4 ms
same
DNSCrypt/
DNSCurve
none
none
23.2 ms
—
—
no support
same
0.7–1.8 ms
Table VI: Computational costs of connection setup and packet
processing.
VI. CLIENT-SIDE LATENCY
For clients, the primary cost of T-DNS is the additional
latency due to connection setup. Using experiments, we next
examine stub-to-recursive and recursive-to-authoritative query
latency with TCP and TLS, highlighting the effects of pipelin-
ing and out-of-order processing. Three parameters affect these
results: the computation time needed to execute a query, the
client-server RTT, and the workload. We show that RTTs
dominate performance, not computation. We study RTTs for
both stub-to-recursive and recursive-to-authoritative queries,
since the RTT is much larger and more variable in the second
case. We consider two workloads: stop-and-wait, where each
query is sent after the reply for the last is received, and
pipelining, where the client sends queries as fast as possible.
These experiments support modeling of end-to-end latency.
VI-A Computation Costs
We next evaluate CPU consumption of TLS. Our exper-
iments’ client and server are 4-core x86-64 CPUs, running
Fedora 19 with Linux-3.12.8 over a 1Gb/s Ethernet. We test
our own client and the Apache-2.4.6 web-server with GnuTLS
and OpenSSL. We also measure the DNSCurve client [49], and
the DNSCrypt proxy [58].
We report
the median of 10 experimental
trials, where
each trial
is the mean of many repetitions because each
event is brief. We measure 10k TCP handshakes, each by
setting up and closing a connection. We estimate TCP packet
processing by sending 10k full-size packets over an existing
connection. We measure TLS connection establishment from
1000 connections, and isolate key exchange from certiﬁcate
validation by repeating the experiment with CA validation
disabled. We measure TLS connection resumption with 1000
trials.
Table VI compares TLS costs: TCP setup and DNS resolu-
tion are fast (less than 1 ms). TLS setup is more expensive (8
or 26 ms), although costs of key exchange and validation vary
by implementation. We see that TLS resumption is ten times
faster than full TLS setup for both OpenSSL and GnuTLS.
We also examine DNSCurve and DNSCrypt cost in Table VI
and ﬁnd similar computation is required for their session key
establishment. Their client and server can cache session keys
to avoid this computation, but at the expense of keeping server
state, just as T-DNS keeps TCP and TLS state. If elliptic curve
180180
cryptography has performance or other advantages, we expect
it to be added to future TLS protocol suites.
Finally, prior work has reported server rates of 754 uncached
SSL connections per second [8]. These connection rates sus-
tain steady state for recursive DNS, and two servers will
support steady state for our root server traces. Provisioning