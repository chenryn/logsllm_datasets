### 2. 行键（Row Key）的设计

首先，应避免使用时序或单调递增/递减的行键。当数据写入HBase时，系统需要根据行键确定存储位置，即Region的位置。如果使用时序或单调行键，连续写入的数据将被分配到同一个Region中，而其他Region和RegionServer则处于空闲状态，这在分布式系统中是不希望出现的情况。

例如，如果必须存储时序数据，可以参考OpenTSDB中的行键设计方法：
```
[metric_type][event_timestamp]
```
这种方法将时间戳作为行键的第二个部分，并添加一个前缀。然而，具体的选择规则应视具体情况而定，没有一种万能的方法适用于所有场景。

### 3. 尽量最小化行键和列族的大小

在HBase中，一个值由其行键、列族、列和时间戳共同决定。索引基于“行键+列族:列+时间戳+值”创建，用于加速随机访问。如果行键和列族过大，甚至超过值本身的大小，将会增加索引的大小。由于HBase中数据记录数量庞大，重复的行键和列不仅会增大索引，还会加重系统的存储负担。

### 4. 版本的数量

HBase在存储数据时，新数据不会直接覆盖旧数据，而是进行追加操作，通过时间戳来区分不同的版本。默认情况下，每行数据保留三个版本，可以通过`HColumnDescriptor`进行设置。建议不要将此值设置得过大。

### 示例：学生表与事件表

#### 学生表
以学生表为例，展示HBase与关系型数据库（RDBMS）在模式设计上的差异。RDBMS中的学生表结构如表12-15至表12-17所示。而在HBase中，数据存储模式如表12-18和表12-19所示。

从这些表可以看出，在HBase中不仅可以完成RDBMS中的操作，还能提供更好的执行效率。由于HBase中的行键是索引，因此查询速度通常优于RDBMS。

#### 事件表
假设用户需求为查询某一用户最近发生的10个事件。在RDBMS中，SQL查询语句如下：
```sql
SELECT A_Id, A_UserId, A_Name, A_Time 
FROM Action 
WHERE A_UserId=*** 
ORDER BY A_Time DESC 
LIMIT 10
```

在HBase中，为了加快查询速度，可以将数据按用户聚簇存放，并按事件发生的时间倒序排列。这样，HBase中的存储模式如表12-21所示，查询速度将优于RDBMS。

### 12.11 本章小结

本章介绍了HBase的特点、基本操作、体系结构、数据模型及其与其他相关产品的关系。此外，还讨论了如何使用HBase编程及表设计。HBase是一个开源的、分布式的、多版本的、面向列的存储系统，与传统的关系型数据库有本质不同，在某些场合下具有独特的优势。

HBase支持三种运行模式：单机模式、伪分布模式和完全分布模式。其中，后两种模式需要依赖HDFS作为文件存储系统。HBase可以与MapReduce结合使用，充分发挥二者的优势。本章还提供了IDE配置和简单的编程示例，并比较了HBase与RDBMS在模式设计上的异同。

### 第13章 Mahout详解

#### 13.1 Mahout简介
Apache Mahout起源于2008年，最初是Apache Lucene的一个子项目。它利用Hadoop库扩展功能，实现可伸缩的机器学习算法。Mahout的核心目标是针对大规模数据集开发高效的机器学习算法。尽管主要运行在Hadoop平台上，但Mahout也支持非分布式环境下的算法。

#### 13.2 Mahout的安装和配置

Mahout有两种安装方式：快速安装和编译安装。

##### 快速安装
1. **下载Mahout**
   - 从以下链接下载编译好的二进制文件：
     ```
     http://mirror.bjtu.edu.cn/apache/mahout/
     ```
   - 选择最新的版本目录（如0.6），下载`mahout-distribution-0.6.tar.gz`。

2. **解压下载的文件**
   ```sh
   tar -zxvf mahout-distribution-0.6.tar.gz -C $HADOOP_HOME/
   ```

3. **配置环境变量**
   ```sh
   export HADOOP_HOME=/home/hadoop/hadoop-1.0.1
   export HADOOP_CONF_DIR=/home/hadoop/hadoop-1.0.1/conf
   export MAHOUT_HOME=/home/hadoop/hadoop-1.0.1/mahout-distribution-0.6
   export PATH=$MAHOUT_HOME/bin:$PATH
   ```

##### 编译安装
1. **下载最新源码**
   ```sh
   svn co http://svn.apache.org/repos/asf/mahout/trunk
   ```

2. **执行安装**
   ```sh
   cd trunk
   mvn install
   ```

   若要跳过测试部分，可以使用：
   ```sh
   mvn -DskipTests install
   ```

3. **配置环境变量**
   环境变量配置与快速安装相同。

##### 验证安装
使用以下命令检查Mahout是否安装成功：
```sh
bin/mahout help
```

#### 13.3 Mahout API简介

当前Mahout最新版本的API包括协同过滤、聚类、分类、频繁模式挖掘等模块。以下是一些常见的API包：

- 协同过滤：`org.apache.mahout.cf.taste`
- 聚类：`org.apache.mahout.clustering`
- 分类：`org.apache.mahout.classifier`
- 频繁模式挖掘：`org.apache.mahout.fpm`
- 数学计算：`org.apache.mahout.math`
- 向量计算：`org.apache.mahout.vectorizer`

以K-Means算法为例，相关API在`org.apache.mahout.clustering.kmeans`包中，包含`KMeansConfigKeys`接口、`KCluster`类和`KMeansDriver`类。

- **KMeansConfigKeys** 接口定义了算法的关键参数。
- **KCluster** 类用于计算新的聚类并判断收敛性。
- **KMeansDriver** 类是执行聚类操作的入口函数。

更多详细信息请参阅Mahout API文档。