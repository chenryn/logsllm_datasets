Partition(numbers,length, start, end);
length,result))
int length)
---
## Page 179
int MoreThanHalfNum(int* numbers,int length)
对应的数字。
出现的次数之和还要多，那么要找的数字肯定是最后一次把次数设为1时
个数字，并把次数设为1。由于我们要找的数字出现的次数比其他所有数字
我们之前保存的数字不同，则次数减1。如果次数为零，我们需要保存下一
果下一个数字和我们之前保存的数字相同，则次数加1；如果下一个数字和
是数组中的一个数字，
次数的和还要多。因此我们可以考虑在遍历数组的时候保存两个值：
的次数超过数组长度的一半，也就是说它出现的次数比其他所有数字出现
bool
if(CheckInvalidArray(numbers,length))
int result=numbers[0];
接下来我们从另外一个角度来解决这个问题。数组中有一个数字出现
int
return isMoreThanHalf;
or（inti=
下面是这种思路的参考代码：
if(times
bool isMoreThanHalf = true
int times = 0;
CheckMoreThanHalf(int* numbers,int length,int number)
return g_bInputInvalid;
if(times == 0)
times = 1;
return0;
g_bInputInvalid=true;
g_bInputInvalid =
if（numbers[i]==number)
times++;
1;in11nk-1)
return;
start
se
的结果之外，同时也期待应聘者能对无效的输入作相应的处理。
考查思维的全面性。面试官除了要求应聘者能对有效的输入返回正确
index = Partition(input, n, start, end);
start=
index= Partition(input,n, start,end);
n
Partition(input，n,start，end);
0;
index
-1)
++i)
1：
第5章
优化时间和空间效率167
---
## Page 182
168
剑指Offer-
typedef multiset >::iterator
greater
intSet;
setIterator;
---
## Page 183
很大并且k较小的问题。
思路只要求内存能够容纳leastNumbers即可，因此它最适合的情形就是n
GetLeastNumbers的方式判断是不是需要放入容器leastNumbers 即可。这种
可以从辅助存储空间（比如硬盘）中每次读入一个数字，根据
的，有可能不能把这些海量的数据一次性全部载入内存。这个时候，我们
题目是要求从海量的数据中找出最小的k个数字，由于内存的大小是有限
入（包括百度在内的多家公司非常喜欢与海量输入数据相关的问题)。假设
写操作都是在容器leastNumbers中进行的。二是该算法适合海量数据的输
入的数据（代码中的变量data）。我们每次只是从data中读入数字，所有的
思路要快，但同时它也有明显的限制，比如会修改输入的数组。
解法比较
intk)
void GetLeastNumbers(const vector& data,intSet& leastNumbers,
第二种解法虽然要慢一点，但它有两个明显的优点。一是没有修改输
我们可以用表5.1总结这两种解法的特点。
基于函数 Partition 的第一种解法的平均时间复杂度是 O(n)，比第二种
for(;iter!=data.end();++iter)
vector::const_iterator iter= data.begin();
if(k<1Ildata.size(）<k)
leastNumbers.clear();
if((leastNumbers.size())
return;
if(*iter <*(leastNumbers.begin()))
setIterator iterGreatest =leastNumbers.begin();
leastNumbers.insert(*iter);
leastNumbers.erase(iterGreatest);
<k）
第5章优化时间和空间效率169
---
## Page 184
170剑指Offer-
是否适用于海量数据
是否需要修改输入数组
时间复杂度
解法。
那么我们要向面试官问清楚题目的要求，输入的特点，从而选择最合适的
次性载入内存、是否允许交换输入数据中数字的顺序等。
动手做题之前先要问清楚题目的要求，包括输入的数据量有多大、能否一
本题完整的源代码详见30_KLeastNumbers 项目。
如果面试时遇到的面试题有多种解法，并且每个解法都各有优缺点，
本题考点：
测试用例：
由于这两种算法各有优缺点，各自适用于不同的场合，因此应聘者在
源代码
如果采用第一种思路，本题考查对 Partition 函数的理解。这个函
考查对时间复杂度的分析能力。面试的时候每想出一个解法，我
们都要能分析出这种解法的时间复杂度是多少。
NULL)。
特殊输入测试（k小于1、k大于数组的长度、指向数组的指针为
边界值测试（输入的k等于1或者等于数组的长度）
的数字)。
功能测试（输入的数组中有相同的数字，输入的数组中没有相同
一名企面试官精讲典型编程题（纪念版）
否
是
O(n)
基于Partition函数的思路
表5.1两种算法的特点比较
是
否
O(n*logk)
基于堆或者红黑树的思路
---
## Page 185
数组的和。第八步加上最后一个数字-5，由于得到的和为13，小于此前最
更新为16。第七步加上2，累加得到的和为18，同时我们也要更新最大子
结果是16，此时和比之前最大的和13还要大，把最大的子数组的和由13
13保存下来，它有可能是最大的子数组的和。第六步加上数字7，9加7的
因此累加-4之后得到的和比原来的和还要小。因此我们要把之前得到的和
虑从第一个数字开始的子数组，之前累计的和也被抛弃。
始的子数组的和会小于从第三个数字开始的子数组的和。因此我们不用考
如果用-1加上3，得到的和是2，比3本身还小。也就是说从第一个数字开
了-1。第三步加上数字3。我们注意到由于此前累计的和是-1，小于0，那
解法一：举例分析数组的规律
10，得到和为13。第五步加上-4，和为9。我们发现由于-4是一个负数，
一步加上第一个数字1，此时和为1。接下来第二步加上数字-2，和就变成
是最优的解法，面试官将提示我们还有更快的算法。
计算出所有子数组的和，最快也需要O(n²)的时间。通常最直观的方法不会
数组并求出它们的和。一个长度为n的数组，总共有n(n+1)/2个子数组。
7,2}，因此输出为该子数组的和18。
杂度为O（n)。
续的多个整数组成一个子数组。求所有子数组的和的最大值。要求时间复
面试题31：连续子数组的最大和