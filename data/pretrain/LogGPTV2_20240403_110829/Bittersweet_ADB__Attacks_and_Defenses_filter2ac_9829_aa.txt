title:Bittersweet ADB: Attacks and Defenses
author:Sungjae Hwang and
Sungho Lee and
Yongdae Kim and
Sukyoung Ryu
Bittersweet ADB: Attacks and Defenses
Sungjae Hwang
KAIST
PI:EMAIL
Yongdae Kim
KAIST
PI:EMAIL
Sungho Lee
KAIST
PI:EMAIL
Sukyoung Ryu
KAIST
PI:EMAIL
ABSTRACT
Android devices and applications become prevalent and ask for
unanticipated capabilities thanks to the increased interests in smart-
phones and web applications. As a way to use the capabilities not
directly available to ordinary users, applications have used An-
droid Debug Bridge (ADB), a command line tool to communicate
with Android devices for debugging purposes. While ADB pro-
vides powerful features that require permissions to use critical sys-
tem resources, it opens a gate to adversaries.
To understand the ADB capabilities and their possible risks, we
present various types of attacks that are not easily identiﬁable us-
ing ADB capabilities and device-speciﬁc functions. We show that
applications using ADB capabilities can modify installed applica-
tions, leak private user data, and track phone calls, among other
things only with the INTERNET permission on the same device.
To protect Android devices from such attacks, we present several
mitigation mechanisms including a static analysis tool that analyzes
Android applications to detect possible attacks using ADB capabil-
ities. Such a tool can aid application markets such as Google Play
to check third-party applications for possible attacks.
Categories and Subject Descriptors
K.6.5 [Software]: Security and Protection
General Terms
Security
Keywords
Mobile application; Android; security; ADB
1.
INTRODUCTION
The advent of explosive interests in smartphones and web ap-
plications [25] have dramatically increased the number of Android
applications with unanticipated capabilities [2]. Because Android
mobile devices can provide powerful features once provided only
by computers, Android developers are extending the application
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior speciﬁc permission and/or a
fee. Request permissions from permissions@acm.org.
ASIA CCS ’15, April 14–17, 2015, Singapore
Copyright © 2015 ACM 978-1-4503-3245-3/15/04 ...$15.00.
http://dx.doi.org/10.1145/2714576.2714638.
categories to areas limited only by their imagination. At the same
time, Android applications access private user data stored in de-
vices to perform security sensitive services such as mobile banking
and emails, which makes the security of mobile devices tremen-
dously important. Indeed, attackers become much interested in An-
droid applications leading to a huge number of malicious Android
applications [24].
Among various malicious Android applications, a recent Win-
dows malware that attempted to infect Android devices to steal
private data uses Android Debug Bridge (ADB) [8] as its main
tool [19]. ADB is a command line tool to communicate with An-
droid devices for application developers to debug their programs
under development. Even though ADB is originally only for de-
bugging purposes, the powerful features of ADB have attracted ap-
plication developers to build applications with ADB-level capabil-
ities. ADB provides sweet capabilities to draw users’ attention but,
at the same time, it opens a gate to adversaries.
To understand possible security risks by exposing ADB capabil-
ities to adversaries, we analyzed ADB capabilities and found that
they are very much powerful enough to enable various critical at-
tacks. As a proof of concept, we developed malicious applications
that leverage ADB using only the INTERNET permission on the
same device. The malicious applications can steal private user data
and lauch Dos and overbilling attacks as well. Because the mal-
ware requires only the INTERNET permission, it is highly likely
that ordinary users cannot identify them as malware.
To defend the Android system from such attacks using ADB ca-
pabilities, we present several mitigation mechanisms. We ﬁrst pro-
pose a static analysis tool that analyzes Android applications before
executing or even before uploading to detect possible attacks using
ADB capabilities. Such a tool can aid application markets such as
Google Play to check third-party applications for possible attacks.
We also describe ways to control uses of ADB capabilities to only
authorized parties or debugging purposes.
This paper makes the following contributions:
curity risks of exposing them to adversaries. To our surprise,
using ADB completely bypasses Android access control poli-
cies with just the INTERNET permission.
● We analyze the ADB capabilities to understand possible se-
● As a proof of concept, we develop malicious applications to
● We present mitigation mechanisms to protect the Android
concretely show possible attacks on Android applications by
leveraging ADB and Android utilities.
system against attacks using ADB capabilities. We develop
a static analysis tool that detects such attacks automatically
and discuss feasible ways to guide the Android system from
such attacks.
5792. ANDROID DEBUG BRIDGE
3. ATTACKS USING ADB
ADB is a command-line tool that enables Android application
developers to communicate with connected Android devices. The
comprehensive description of ADB and its features is available
from the Android developers’ site [8]. ADB consists of three com-
ponents: a client running on a development machine, a server run-
ning as a background process on the development machine, and
a daemon running as a background process on a device. When
an ADB client starts, it starts an ADB server process if it does
not already exist, and it binds to a local TCP port and listens for
commands from ADB clients. Thus, arbitrary third-party Android
applications can establish local connections to devices and access
ADB capabilities via the ADB server. Indeed, various kinds of An-
droid applications in Google Play utilize the ADB server. Screen-
shot [16, 26], USB tethering [5], and Remote shell [11] are such
applications. Since Android 4.4 that introduced the screenrecord
command to record the display of devices, more screen recording
applications have been developed [14, 12].
Even though ADB is useful for developers to debug their appli-
cations under development, it may introduce critical security vul-
nerabilities. Because the connections between clients and the ADB
server are not using any authentication, malware can access the
ADB sever like other ordinary applications. Lin et al. [18] demon-
strated that an Android malware can access ADB utilities by using
the local-socket channel. They also showed that a malware can steal
users’ private data by using the screenshot capability in ADB.
To lessen possible security risks by abusing ADB, Android 4.2.2
or higher protects user devices by displaying a dialog that asks to
allow debugging via a computer when a user connects an Android
device to the computer. While this security mechanism guarantees
that USB debugging and ADB capabilities can execute only when
users approve their uses, it is not a ﬁrm solution because it delegates
security decisions to ordinary users. Moreover, since such a dialog
merely asks whether to accept an RSA key without any security
warnings, it is very difﬁcult for ordinary users to understand what
the RSA key is for and how risky ADB capabilities are.
We have carefully analyzed the capabilities of ADB, and we
found that they are surprisingly powerful. While they provide sweet
features for Android developers to support advanced functionali-
ties, they make the security of Android applications bitterly vul-
nerable. Before describing and showing what kinds of attacks are
possible using the ADB capabilities and proposing defense mecha-
nisms to such attacks, we brieﬂy explain the ADB capabilities.
The Android system provides various functionalities such as view-
ing system logs and modifying installed applications to authorized
users as binary ﬁles stored in the /system/bin directory. In this
paper, we call such functions utilities. While the Linux system also
contains utilities in the /bin directory, the Android system con-
tains powerful utilities which do not exist in the Ubuntu system.
For example, unlike Android, Ubuntu 12.04.01 does not provide
any screenrecord utility in the directory. Note that Ubuntu also has
a screen recording utility, but it does not provide it by default; a
user should explicitly download and install it to the system. There-
fore, we believe that Android provides unnecessary powerful utili-
ties that increases security risks.
Because utilities are powerful functions, the system protects them
by requiring that only users with the UID or GID of ROOT and
SHELL can access them. However, since ADB has the SHELL
UID, it can access most of such utilities and by leveraging ADB
many resources with permissions which applications do not have
are accessible to arbitrary third-party applications. Thus, malicious
applications can also access the utilities via the exposed ADB ca-
pabilities.
We describe malicious applications that can perform various crit-
ical attacks using the ADB capabilities.
3.1 Threat Model
We assume that our malware is installed on a victim’s mobile de-
vice. Because our malware requires only the INTERNET permis-
sion, it is difﬁcult for ordinary users to identify it as malware. In-
deed, even though Google Play uses the service named Bouncer [20],
which analyzes submitted Android applications to detect poten-
tially malicious applications, it could not detect our submitted mal-
ware that use ADB capabilities and successfully uploaded it. Note
that our fake malware does not send private user data to our server;
it merely sends bogus values to our server. Thus, it did not leak any
private user data from anyone happened to download it. We also
assume that our malware can access the ADB server. While the
ADB server is disabled by default, many legitimate Android ap-
plications require enabling the ADB server to access unauthorized
resources. Various screen capture applications via ADB have been
downloaded millions times already [18]. Other applications also
use unauthorized resources via the ADB server, which implies that
our assumptions are realistic. If any such applications are installed
on a mobile device, the ADB server should be already running.
3.2 Enabling the ADB Server
We assume that our malware can access the ADB server, which
is reasonable because many legitimate Android applications require
enabling the ADB server to access unauthorized resources.
In order to enable the ADB server, an Android device should
enable the “USB debugging” option which requires several steps.
However, we can simulate these steps to enable the option just
with two taps using a UI redressing attack [21]. First, by execut-
ing a “Development Setting” activity with an intent set to the op-
tion ACTION_APPLICATION_DEVELOPMENT_SETTINGS, our mal-
ware can navigate to “Developer options”. Then, the malware dis-
plays a toast [9] in full screen to hide the “Development Setting”
activity. Because toasts pass touch events to lower layers unlike
other dialogs, we can trick users to touch screen on the toast lead-
ing to touch events on the hidden “Development Setting” activity.
Our malware asks users to touch two buttons on the toast to enable
the “USB debugging” option. To understand whether this attack is
effective, we evaluated the UI redressing attacks on several smart-
phones including Samsung Galaxy S5, LG G2, and LG G Pro, and
we found that all the devices are vulnerable to the UI redressing
attacks allowing us to enable the “USB debugging” option.
3.3 Representative Attacks Using ADB
In this section, we present three kinds of attacks we created to
show the powerful features of the ADB server. The ﬁrst kind is the
private data leakage attacks that expose personal data to outside
devices, the second kind is the usage monitoring attacks that track
various usage information, and the third one is the behavior inter-
ference attacks that prevent intended operations. Because all attacks
require only the INTERNET permission to communicate with the
ADB server, most of them are background attacks that run silently
on devices, and even foreground attacks are not easily discoverable
because the attacks can take place very shortly when users do not
see the screen, it is difﬁcult for ordinary users to notice them.
3.3.1 Private Data Leakage