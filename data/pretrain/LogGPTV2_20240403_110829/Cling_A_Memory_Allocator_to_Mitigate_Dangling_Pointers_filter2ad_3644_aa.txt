title:Cling: A Memory Allocator to Mitigate Dangling Pointers
author:Periklis Akritidis
Cling: A Memory Allocator to Mitigate Dangling Pointers
Periklis Akritidis
Niometrics, Singapore, and
University of Cambridge, UK
Abstract
Use-after-free vulnerabilities exploiting so-called dan-
gling pointers to deallocated objects are just as dangerous
as buffer overﬂows: they may enable arbitrary code exe-
cution. Unfortunately, state-of-the-art defenses against
use-after-free vulnerabilities require compiler support,
pervasive source code modiﬁcations, or incur high per-
formance overheads. This paper presents and evaluates
Cling, a memory allocator designed to thwart these at-
tacks at runtime. Cling utilizes more address space, a
plentiful resource on modern machines, to prevent type-
unsafe address space reuse among objects of different
types. It infers type information about allocated objects
at runtime by inspecting the call stack of memory allo-
cation routines. Cling disrupts a large class of attacks
against use-after-free vulnerabilities, notably including
those hijacking the C++ virtual function dispatch mecha-
nism, with low CPU and physical memory overhead even
for allocation intensive applications.
1
Introduction
Dangling pointers are pointers left pointing to deallo-
cated memory after the object they used to point to has
been freed. Attackers may use appropriately crafted in-
puts to manipulate programs containing use-after-free
vulnerabilities [18] into accessing memory through dan-
gling pointers. When accessing memory through a dan-
gling pointer, the compromised program assumes it op-
erates on an object of the type formerly occupying the
memory, but will actually operate on whatever data hap-
pens to be occupying the memory at that time.
The potential security impact of these, so called, tem-
poral memory safety violations is just as serious as that of
the better known spatial memory safety violations, such
as buffer overﬂows. In practice, however, use-after-free
vulnerabilities were often dismissed as mere denial-of-
service threats, because successful exploitation for arbi-
trary code execution requires sophisticated control over
the layout of heap memory. In one well publicized case,
ﬂaw CVE-2005-4360 [17] in Microsoft IIS remained un-
patched for almost two years after being discovered and
classiﬁed as low-risk in December 2005.
Use-after-free vulnerabilities, however, are receiving
increasing attention by security researchers and attack-
ers alike. Researchers have been demonstrating exploita-
tion techniques, such as heap spraying and heap feng
shui [21, 1], that achieve the control over heap layout
necessary for reliable attacks, and several use-after-free
vulnerabilities have been recently discovered and ﬁxed
by security researchers and software vendors. By now
far from a theoretical risk, use-after-free vulnerabilities
have been used against Microsoft IE in the wild, such
as CVE-2008-4844, and more recently CVE-2010-0249
in the well publicized attack on Google’s corporate net-
work.
Such attacks exploiting use-after-free vulnerabilities
may become more widespread. Dangling pointers likely
abound in programs using manual memory management,
because consistent manual memory management across
large programs is notoriously error prone. Some dan-
gling pointer bugs cause crashes and can be discovered
during early testing, but others may go unnoticed be-
cause the dangling pointer is either not created or not
dereferenced in typical execution scenarios, or it is deref-
erenced before the pointed-to memory has been reused
for other objects. Nevertheless, attackers can still trigger
unsafe dangling pointer dereferences by using appropri-
ate inputs to cause a particular sequence of allocation and
deallocation requests.
Unlike omitted bounds checks that in many cases are
easy to spot through local code inspection, use-after-free
bugs are hard to ﬁnd through code review, because they
require reasoning about the state of memory accessed
by a pointer. This state depends on previously executed
code, potentially in a different network request. For the
same reasons, use-after-free bugs are also hard to ﬁnd
through automated code analysis. Moreover, the combi-
nation of manual memory management and object ori-
ented programming in C++ provides fertile ground for
attacks, because, as we will explain in Section 2.1, the
virtual function dispatch mechanism is an ideal target for
dangling pointer attacks.
While other memory management related security
problems, including invalid frees, double frees, and heap
metadata overwrites, have been addressed efﬁciently and
transparently to the programmer in state-of-the-art mem-
ory allocators, existing defenses against use-after-free
vulnerabilities incur high overheads or require compiler
support and pervasive source code modiﬁcations.
In this paper we describe and evaluate Cling, a mem-
ory allocator designed to harden programs against use-
after-free vulnerabilities transparently and with low over-
head. Cling constrains memory allocation to allow ad-
dress space reuse only among objects of the same type.
Allocation requests are inferred to be for objects of the
same type by inspecting the allocation routine’s call stack
under the assumption that an allocation site (i.e. a call site
of malloc or new) allocates objects of a single type
or arrays of objects of a single type. Simple wrapper
functions around memory allocation routines (for exam-
ple, the typical my malloc or safe malloc wrap-
pers checking the return value of malloc for NULL)
can be detected at runtime and unwound to recover a
meaningful allocation site. Constraining memory allo-
cation this way thwarts most dangling pointer attacks
—importantly— including those attacking the C++ vir-
tual function dispatch mechanism, and has low CPU and
memory overhead even for allocation intensive applica-
tions.
These beneﬁts are achieved at the cost of using addi-
tional address space. Fortunately, sufﬁcient amounts of
address space are available in modern 64-bit machines,
and Cling does not leak address space over time, because
the number of memory allocation sites in a program is
constant. Moreover, for machines with limited address
space, a mechanism to recover address space is sketched
in Section 3.6. Although we did not encounter a case
where the address space of 32-bit machines was insuf-
ﬁcient in practice, the margins are clearly narrow, and
some applications are bound to exceed them. In the rest
of this paper we assume a 64-bit address space—a rea-
sonable requirement given the current state of technol-
ogy.
The rest of the paper is organized as follows. Section 2
describes the mechanics of dangling pointer attacks and
how type-safe memory reuse defeats the majority of at-
tacks. Section 3 describes the design and implementa-
tion of Cling, our memory allocator that enforces type-
safe address space reuse at runtime. Section 4 evaluates
the performance of Cling on CPU bound benchmarks
with many allocation requests, as well as the Firefox web
browser (web browsers have been the main target of use-
after-free attacks so far). Finally, we survey related work
in Section 5 and conclude in Section 6.
2 Background
2.1 Dangling Pointer Attacks
Use-after-free errors are, so called, temporal memory
safety violations, accessing memory that is no longer
valid. They are duals of the better known spatial memory
safety violations, such as buffer overﬂows, that access
memory outside prescribed bounds. Temporal memory
safety violations are just as dangerous as spatial memory
safety violations. Both can be used to corrupt memory
with unintended memory writes, or leak secrets through
unintended memory reads.
When a program accesses memory through a dangling
pointer during an attack, it may access the contents of
some other object that happens to occupy the memory
at the time. This new object may even contain data le-
gitimately controlled by the attacker, e.g. content from
a malicious web page. The attacker can exploit this to
hijack critical ﬁelds in the old object by forcing the pro-
gram to read attacker supplied values through the dan-
gling pointer instead.
Figure 1: Unsafe memory reuse with dangling pointer.
For example, if a pointer that used to point to an ob-
ject with a function pointer ﬁeld (e.g. object 1 at time t0
in Figure 1) is dereferenced to access the function pointer
after the object has been freed, the value read for the
function pointer will be whatever value happens to oc-
cupy the object’s memory at the moment (e.g. raw data
from object 2 at time t1 in Figure 1). One way to ex-
ploit this is for the attacker to arrange his data to end up
in the memory previously occupied by the object pointed
by the dangling pointer and supply an appropriate value
within his data to be read in place of the function pointer.
By triggering the program to dereference the dangling
pointer, the attacker data will be interpreted as a function
pointer, diverting program control ﬂow to the location
TimeMemoryRaw dataObject 2of type BPointer ﬁeldObject 1of type APointer ﬁeldObject 3of type At1t0dictated by the attacker, e.g. to shellcode (attacker code
smuggled into the process as data).
Placing a buffer with attacker supplied data to the ex-
act location pointed by a danging pointer is complicated
by unpredictability in heap memory allocation. However,
the technique of heap spraying can address this chal-
lenge with high probability of success by allocating large
amounts of heap memory in the hope that some of it will
end up at the right memory location. Alternatively, the
attacker may let the program dereference a random func-
tion pointer, and similarly to uninitialized memory ac-
cess exploits, use heap spraying to ﬁll large amounts of
memory with shellcode, hoping that the random location
where control ﬂow will land will be occupied by attacker
code.
Attacks are not limited to hijacking function pointers
ﬁelds in heap objects. Unfortunately, object oriented pro-
gramming with manual memory management is inviting
use-after-free attacks: C++ objects contain pointers to
virtual tables (vtables) used for resolving virtual func-
tions. In turn, these vtables contain pointers to virtual
functions of the object’s class. Attackers can hijack the
vtable pointers diverting virtual function calls made
through dangling pointers to a bogus vtable, and exe-
cute attacker code. Such vtable pointers abound in the
heap memory of C++ programs.
Attackers may have to overcome an obstacle:
the
vtable pointer in a freed object is often aligned with
the vtable pointer in the new object occupying the
freed object’s memory. This situation is likely, because
the vtable pointer typically occupies the ﬁrst word of
an object’s memory, and hence will be likely aligned
with the vtable pointer of a new object allocated in its
place right after the original object was freed. The attack
is disrupted because the attacker lacks sufﬁcient control
over the new object’s vtable pointer value that is main-
tained by the language runtime, and always points to a
genuine, even if belonging to the wrong type, vtable,
rather than arbitrary, attacker-controlled data. Attackers
may overcome this problem by exploiting objects using
multiple inheritance that have multiple vtable pointers
located at various offsets, or objects derived from a base
class with no virtual functions that do not have vtable
pointers at offset zero, or by manipulating the heap to
achieve an exploitable alignment through an appropriate
sequence of allocations and deallocations. We will see
that our defense prevents attackers from achieving such
exploitable alignments.
Attacks are not limited to subverting control ﬂow; they
can also hijack data ﬁelds [7]. Hijacked data pointers, for
instance, can be exploited to overwrite other targets, in-
cluding function pointers, indirectly: if a program writes
through a data pointer ﬁeld of a deallocated object, an
attacker controlling the memory contents of the deallo-
cated object can divert the write to an arbitrary mem-
ory location. Other potential attacks include information
leaks through reading the contents of a dangling pointer
now pointing to sensitive information, and privilege es-
calation by hijacking data ﬁelds holding credentials.
Under certain memory allocator designs, dangling
pointer bugs can be exploited without memory having
to be reused by another object. Memory allocator meta-
data stored in free memory, such as pointers chaining free
memory chunks into free lists, can play the role of the
other object. When the deallocated object is referenced
through a dangling pointer, the heap metadata occupy-
ing its memory will be interpreted as its ﬁelds. For ex-
ample, a free list pointer may point to a chunk of free
memory that contains leftover attacker data, such as a
bogus vtable. Calling a virtual function through the
dangling pointer would divert control to an arbitrary lo-
cation of the attacker’s choice. We must consider such
attacks when designing a memory allocator to mitigate
use-after-free vulnerabilities.
Finally, in all the above scenarios, attackers exploit
reads through dangling pointers, but writes through a
dangling pointer could also be exploited, by corrupt-
ing the object, or allocator metadata, now occupying the
freed object’s memory.
Figure 2: No memory reuse (very safe but expensive).
2.2 Naive Defense
A straight forward defense against use-after-free vul-
nerabilities that takes advantage of the abundant ad-
dress space of modern 64-bit machines is avoiding any
address space reuse. Excessive memory consumption
can be avoided by reusing freed memory via the op-
erating system’s virtual memory mechanisms (e.g. re-
TimeMemoryRaw dataObject 2of type BPointer ﬁeldObject 1of type APointer ﬁeldObject 3of type Alinquishing physical memory using madvise with the
MADV DONTNEED option on Linux, or other OS speciﬁc
mechanisms). This simple solution, illustrated in Fig-
ure 2, protects against all the attacks discussed in Sec-
tion 2.1, but has three shortcomings.
First, address space will eventually be exhausted. By
then, however, the memory allocator could wrap around
and reuse the address space without signiﬁcant risk.
The second problem is more important. Memory frag-
mentation limits the amount of physical memory that can
be reused through virtual memory mechanisms. Operat-
ing systems manage physical memory in units of several
Kilobytes in the best case, thus, each small allocation can
hold back several Kilobytes of physical memory in adja-
cent free objects from being reused.
In Section 4, we
show that the memory overhead of this solution is too
high.
Finally, this solution suffers from a high rate of sys-
tem calls to relinquish physical memory, and attempting
to reduce this rate by increasing the block size of mem-
ory relinquished with a single system call leads to even
higher memory consumption.
Figure 3: Type-safe memory reuse.
2.3 Type-Safe Memory Reuse
Type-safe memory reuse, proposed by Dhurjati et al. [9],
allows some memory reuse while preserving type safety.
It allows dangling pointers, but constrains them to point
to objects of the same type and alignment. This way,
dereferencing a dangling pointer cannot cause a type vi-
olation, rendering use-after-free bugs hard to exploit in
practice. As illustrated in Figure 3, with type-safe mem-
ory reuse, memory formerly occupied by pointer ﬁelds
cannot be reused for raw data, preventing attacks as the
one in Figure 1.
Moreover, memory formerly occupied by pointer
ﬁelds can only overlap with the corresponding pointer
ﬁelds in objects of the same type. This means, for ex-
ample, that a hijacked function pointer can only be di-
verted to some other function address used for the same
ﬁeld in a different object, precluding diverting function
pointers to attacker injected code, and almost certainly
thwarting return-to-libc [20] attacks diverting function
pointers to legitimate but suitable executable code in the
process. More importantly, objects of the same type
share vtables and their vtable pointers are at the
same offsets, thus type-safe memory reuse completely
prevents hijacking of vtable pointers. This is simi-
lar to the attacker constraint discussed in Section 2.1,
where the old vtable pointer happens to be aligned
with another vtable pointer, except that attackers are
even more constrained now: they cannot exploit differ-
ences in inheritance relationships or evade the obstacle
by manipulating the heap.
These cases cover generic exploitation techniques and
attacks observed in the wild. The remaining attacks are
less practical but may be exploitable in some cases, de-
pending on the application and its use of data. Some
constraints may still be useful; for example, attacks that
hijack data pointers are constrained to only access mem-
ory in the corresponding ﬁeld of another object of the
same type. In some cases, this may prevent dangerous
corruption or data leakage. However, reusing memory of
an object’s data ﬁelds for another instance of the same
type may still enable attacks, including privilege escala-
tion attacks, e.g. when data structures holding credentials
or access control information for different users are over-
lapped in time. Another potential exploitation avenue are
inconsistencies in the program’s data structures that may
lead to other memory errors, e.g. a buffer may become in-
consistent with its size stored in a different object when
either is accessed through a dangling pointer. Interest-
ingly, this inconsistency can be detected if spatial pro-
tection mechanisms, such as bounds checking, are used
in tandem.
3 Cling Memory Allocator
The Cling memory allocator is a drop-in replacement for
malloc designed to satisfy three requirements: (i) it
does not reuse free memory for its metadata, (ii) only al-
lows address space reuse among objects of the same type
and alignment, and (iii) achieves these without sacriﬁc-
ing performance. Cling combines several solutions from
existing memory allocators to achieve its requirements.
3.1 Out-of-Band Heap Metadata
The ﬁrst requirement protects against use-after-free vul-
nerabilities with dangling pointers to free, not yet reallo-
cated, memory. As we saw in Section 2.1, if the memory
TimeMemoryRaw dataObject 2of type BPointer ﬁeldObject 1of type APointer ﬁeldObject 3of type Aallocator uses freed memory for metadata, such as free
list pointers, these allocator metadata can be interpreted
as object ﬁelds, e.g. vtable pointers, when free mem-