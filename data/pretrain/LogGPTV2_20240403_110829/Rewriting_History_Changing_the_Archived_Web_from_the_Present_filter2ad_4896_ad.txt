### Attacks on Previously-Archived Websites

We conducted an analysis of attacks on previously-archived websites, over which we have no control. Specifically, we focused on an attack that permanently alters the victim's snapshot, even if the injected anachronism is not explicitly malicious. To avoid potential harm, we did not implement this attack on real victim snapshots. Instead, we tested it on our own testbed websites, similar to Attacks #2 and #3.

#### Implementation Challenges

Executing this attack required careful planning. On several occasions, we deployed slightly incorrect attack code, necessitating a complete restart with new victim and attacker pages. Once the attack code is archived, the attacker cannot replace it with different code, as any subsequently archived code will have a timestamp farther from the victim snapshot’s timestamp. Despite these challenges, we successfully took control of our testbed victim snapshot.

#### Advantages and Disadvantages of Attack #4

**Advantages:**
- **Permanence:** Once the attack is in place, it becomes permanent.
- **Passive Nature:** The attack does not require active involvement from the attacker at the time of access.

**Disadvantages:**
- **Irreversibility:** The attacker cannot easily disable the attack since the content enabling the attack is permanently preserved in the archive’s database.
- **One-Time Opportunity:** After the payload is created and archived, the attacker has no way to change its behavior, as it is permanently the closest neighbor to the vulnerable resource.

#### Enhancements to Attack #4

To overcome the one-time limitation, two enhancements were considered:

1. **Archive-Escape Extension:**
   - **Description:** The malicious code creates an intentional archive-escape, allowing persistent control from the present by the attacker.
   - **Limitation:** This version fails against defenses that block archive-escapes.

2. **Anachronism Chaining:**
   - **Description:** In addition to performing malicious modifications, the payload causes the client to request the archival version of another, different URL that has never been archived. This creates preconditions for future Anachronism Injection attacks.
   - **Example:** The archived payload script `attack0.js` might make a request for the never-archived script `attack1.js`. This request will fail until the attacker changes the content of the snapshot again, at which point they host and archive `attack1.js`. This chaining can continue indefinitely (e.g., `attack2.js`, `attack3.js`, etc.).

### Reflecting on the Attacks

We now reflect on our attacks, summarized in Table 1. We highlight several key distinctions:

- **Passive vs. Active Attacks:**
  - **Passive:** Payloads are loaded from the archive itself (e.g., Attacks #2 and #4).
  - **Active:** Payloads are loaded from the attacker’s live web server (e.g., Attacks #1 and #3).

- **Foresight Requirement:**
  - **Required:** Some attacks (e.g., Attacks #2 and #3) require the attacker to plant a payload before the victim page is archived.
  - **Not Required:** Other attacks (e.g., Attacks #1 and #4) allow the attacker to choose a payload at any time, including after archiving.

- **Control Level:**
  - **Partial Control:** Attacker controls static resources like text or images.
  - **Complete Control:** Attacker controls client-side code, such as JavaScript or CSS, allowing modification of any part of the client’s view of the snapshot.

### Measurement of Archive Vulnerabilities

#### Measurement Methods

- **Tool:** We used TrackingExcavator, a Chrome extension that automatically visits URLs, locates them in the Wayback Machine, and collects event traces.
- **Datasets:**
  - **Top 500 and Top Million:** Publicly available traces and historical Alexa Top Million lists.
  - **Legal URLs:** URLs cited in court decisions, filings, and administrative decisions from Westlaw and LexisNexis.

#### Prevalence of Vulnerabilities

- **Overall Vulnerability:**
  - **Top 500:** 73% of sites are vulnerable.
  - **Top Million:** 80% of sites are vulnerable.

- **Strong Attacks (Complete Control Without Foresight):**
  - **Top 500:** 38% of sites are vulnerable.
  - **Top Million:** 65% of sites are vulnerable.

- **Temporal Trends:**
  - **Increasing Vulnerability:** More recently captured snapshots are more likely to be vulnerable to archive-escape abuse, possibly due to the increasing complexity of sites.
  - **Persistent Vulnerability:** Many sites remain vulnerable over long periods, suggesting structural elements in site design contribute to these vulnerabilities.

### Potential Attackers and Victims

- **Common Attackers:**
  - `google-analytics.com`
  - `googletagservices.com`
  - `facebook.net`
  - `googletagmanager.com`
  - `doubleclick.net`
  - `gstatic.com`
  - `criteo.com`
  - `amazon-adsystem.com`
  - `newrelic.com`
  - `cloudfront.net`

- **Number of Possible Victims:**
  - Ranges from 108 to 66, depending on the attacker domain.

These findings underscore the need for archives and their users to be cautious and ensure appropriate trust levels in archival data, given the frequency of vulnerabilities.