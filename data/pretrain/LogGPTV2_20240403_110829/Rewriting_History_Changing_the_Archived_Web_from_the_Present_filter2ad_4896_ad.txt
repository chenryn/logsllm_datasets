shots of previously-archived websites over which we have no con-
trol. However, because this attack permanently alters the victim
snapshot (even if our injected anachronism is not expressly mali-
cious), we chose not to implement this attack on real victim snap-
shots. Instead, we test it on our own testbed websites, similarly to
Attacks #2 and #3.
We note that executing this attack took careful planning, since
on several occasions we deployed attack code that was slightly
incorrect, forcing us to start over with entirely new victim and
attacker pages, since once the attack code is archived, the attacker
is unable to replace it with different attack code, since all subse-
quently archived code will have a timestamp farther from the victim
snapshot’s timestamp. However, using this attack we were able to
take control of our testbed victim snapshot.
Advantages and Disadvantages of Attack #4. This attack is a
passive attack, with the advantage that once the attack is in place,
it becomes permanent. However, the flip side to this advantage is
that the attacker cannot easily disable the attack, since the content
which enables the attack has been permanently preserved in the
archive’s database.
Indeed, this attack’s main weakness is that it is a one-time op-
portunity. Once the attacker has created a payload and caused it to
be archived, they no longer have any way to change the behavior of
that attack, since it is permanently the closest neighbor to the vul-
nerable resource. However, an attacker could choose to make two
distinct modifications to the attack to gain the ability to continue
to modify the payload over time:
(1) Archive-escape extension. In this version of the attack,
the malicious code creates an intentional archive-escape,
allowing persistent control from the present by the attacker.
This version fails against archive-escape-blocking defenses.
(2) Anachronism chaining. In this version, in addition to per-
forming malicious modifications of the snapshot, the payload
also causes the client to make a request for the archival
version of another, different URL which has never been
archived. In other words, while deploying the payload, the
attacker intentionally creates the preconditions for another
Anachronism Injection attack, which they can exploit in the
future. For example, the archived payload script attack0.js
might make a request for the never-archived script attack1.js.
This request will fail until the attacker changes the con-
tent of the snapshot again, at which point they host and
archive attack1.js. This chaining can continue indefinitely
(attack2.js, attack3.js, etc.).
5.5 Reflecting on Attacks
We now step back and reflect on our attacks, which are summarized
in Table 1. We highlight several axes along which we can distinguish
our attacks:
Passive vs. Active Attacks. Attacks differ by whether the payload
is loaded from the archive itself — a passive attack — or from an at-
tacker’s live web server — an active attack. In a passive attack, the
attacker is not actively involved at time-of-access. Specifically, At-
tacks #1 and #3, which both use archive-escapes, are active attacks,
Session H3:  Web SecurityCCS’17, October 30-November 3, 2017, Dallas, TX, USA1748# Name
1 Archive-Escape Abuse
2
3
4 Anachronism Injection
Same-Origin Escape
Same-Origin Escape -> Archive Escape
Requires
Foresight?
No
Yes
Yes
No
Passive or
Active?
Active
Passive
Active
Passive
Table 1: A summary of the attacks we develop. Attacks re-
quiring foresight necessitate the attacker to plant a payload
(e.g., Javascript code) before the time-of-archive of the victim
page. At the time-of-access, attacks served from an archived
version of an attacker’s page are passive, whereas attacks
served from the attacker’s server in the live web are active.
since the attacker’s server is the destination of the archive-escape.
By contrast, Attacks #2 and #4 deliver payloads the attacker has
placed in the archive, and which are delivered to the client by the
archive front-end.
Some Attacks Require Foresight. Some attacks require foresight
on the part of the attacker. By foresight, we mean that the attacker
must define the attack payload (e.g., the Javascript code to run on the
snapshot when viewed by a client) at the time-of-publication of the
victim page. Specifically, attacks based on origin-escapes (Attacks
#2 and #3) require the attacker to plant malicious code inside an
 on the victim page. Attacks which do not require foresight
(Attacks #1 and #4) allowing the attacker to choose a payload at
any time, including after time-of-archive. For example, in Attack
#1, the attacker can even change this payload over time (whereas
once an anachronism has been injected in Attack #4, that payload
is fixed).
Partial vs. Full Control. For all attacks, vulnerabilities may permit
either partial-control or complete-control attacks, depending on the
type of resource the attacker controls in the specific instance of the
attack. If an attacker controls static resources like text or images,
the attacker can only changes those particular elements (partial-
control). If an attacker controls client-side code, such as Javascript
or a CSS stylesheet, the attacker can leverage that code for complete-
control, gaining the ability to modify any part of the client’s view
of the snapshot, such as its text, styling, images, layout, client-
side dynamic behavior, and so on. We explore the prevalence of
partial-control and complete-control attacks in the Section 6.
6 MEASURING PREVALENCE OF ARCHIVE
VULNERABILITIES
6.1 Measurement Methods
Measurement Tool. We used TrackingExcavator, the archival
measurement tool we developed for a previous project, for our mea-
surements [10]. TrackingExcavator is a Chrome extension which
automatically visits an “Input Set” of URLs, locates them in the Way-
back Machine at a requested timestamp, and collects event traces as
it loads and renders those URLs. These event traces include events
for all HTTP requests the browser makes, which we use to locate
vulnerabilities to our attacks.
With the publication of this paper, we are releasing TrackingEx-
cavator publicly at http://trackingexcavator.cs.washington.edu/.
Our Datasets. Our measurements include measurement traces
from three sets of URLs:
For the Top 500, we downloaded the publicly available traces
from [10]. 5 For the Top Million, we used historical versions of the
Alexa Top Million CSV file for the years from 2010-2017, which we
located in the Wayback Machine [7]. We sampled every thousandth
site from those Top Million lists, such that we visited sites with pop-
ularity rank 1, 1001, 2001, ..., etc., similar to other papers that have
sampled from the Top Million [42]. These traces cover a different
(but sometimes overlapping) set of URLs in each timestamp year,
with a trace for each site’s snapshot once for each year in which it
appeared in the Top 500 or our Top Million sample.
For each of our Top 500 and Top Million datasets, we report
on data collected only from the archived homepages of each do-
main examined, e.g., from a snapshot of the url http://example.com.
However, in Section 6.2, we report on additional measurements we
performed examining other pages from the same domains, finding
that sites are often vulnerable not only on their archived homepages,
but also on subpages linked from the homepage.
For our Legal URL dataset, we searched Westlaw and LexisNexis
for court decisions, court filings, and federal agency administrative
decisions which contained the phrase “web.archive.org” [8, 9]. We
found that both legal databases contained substantially similar
results, and so used only the results from Westlaw. We then located
Wayback Machine URLs cited in these materials, collecting separate
lists of URLs for each category of legal proceeding (court decisions,
court filings, administrative decisions). These include 119 URLs
cited in 101 court decisions, 255 URLs cited in 302 appellate briefs,
159 URLs cited in 217 expert material documents, and 307 URLs
cited in 371 administrative decisions. 6 We collected traces of the
snapshots at the exact URLs cited in the legal materials.
Measurement Parameters. We crawled the archive from Amazon
EC2 t2.large instances, rendering Chrome (running TrackingExca-
vator) headlessly inside a virtual frame buffer. We opened 3 tabs at
once, one tab per snapshot, and remained on each snapshot for 40
seconds, which [10] found is a sufficient for snapshots to complete
loading in the browser. We set TrackingExcavator to block (but still
record) archive-escape requests, in order to prevent contaminating
our view of the archive with live data. This means we undercount
overall archive-escapes that would be seen by an ordinary browser
(since we miss archive-escapes caused by other archive-escapes),
making our numbers a conservative lower-bound on the archive-
escapes a client will encounter in the wild.
6.2 How Often Are Archived Sites Vulnerable?
Figure 3 depicts the prevalence of all types of vulnerabilities to
our attacks in the top panel, and the prevalence of vulnerabilities
which allow the most powerful attacks (complete-control without
foresight) in the bottom panel. This figure depicts only data from
the Top 500 — the trends we found in the Top Million were similar.
Three-Fourths of Archived Sites Are Vulnerable. Considering
the union of the top sites across all years, we studied 2692 distinct
sites from the Top 500 and 7000 distinct sites in the Top Million.
5Available at https://trackingexcavator.cs.washington.edu/, Accessed 2017-03-30.
6In an administrative decision, a U.S. federal agency resolves lawsuit-like cases related
to the agency’s jurisdiction. They may replace or precede normal lawsuits.
Session H3:  Web SecurityCCS’17, October 30-November 3, 2017, Dallas, TX, USA1749Figure 4: The increasing tendency of snapshots to remain
vulnerable to our attacks across subsequent years. This fig-
ure represents the number of snapshot domains in each year
whose snapshot from the previous year was also vulnerable
to the given attack(s).
particularly strong, category of attacks: Archive-Escape (#1) and
Anachronism Injection (#4) vulnerabilities which enable complete-
control. Even vulnerabilities to this strong class of attacks are quite
common in the archive: 38% of Top 500 domains and 65% of Top
Million domains are vulnerable.
Prevalence of Some Vulnerabilities Has Changed Over Time.
The prevalence of our vulnerabilities varies over the age of snap-
shots in the archive. For example, more recently captured snapshots
are dramatically more likely to be vulnerable to archive-escape
abuse. For example, in both the Top 500 and Top Million, the frac-
tion of snapshot domains vulnerable to archive-escape abuse in-
creased from 22% to nearly 80% over the period from 2007 to the
present day. We believe that this trend is due to the increasing
complexity of sites over the history of the web, since URL rewriting
failures, which cause archive-escapes, often result in client-side
dynamic behaviors in sites. As sites have grown more complex
with more client-side dynamic behaviors, so have the prevalence
of archive-escapes and the vulnerabilities that they cause.
Snapshot Domains Remain Vulnerable Over Archival Time.
The series of snapshots of a site in the archive may span years
or decades, as a site ages. We find that not only are individual
snapshots often vulnerable (Figure 3), but also that many of the
websites we studied remained vulnerable over long periods of time.
Figure 4 shows the number of vulnerable domains in each year
which were also vulnerable in the previous year. For example, of
the snapshot domains which were vulnerable to Archive-Escape
Abuse in 2016, about 80% of them were also vulnerable in 2015.
This type of continuous vulnerability suggests that the appear-
ance of vulnerabilities in these sites may be due to structural el-
ements of the way the sites are designed and published, such as
publishers’ choices to embed third-parties, to use client-side dy-
namic behavior, and to include third-party Javascript libraries. This
implies both that changes in the architecture of these sites might
alleviate these vulnerabilities, but also that they are unlikely to go
Figure 3: Top: The prevalence of vulnerabilities to our at-
tacks across the Top 500 sites. Bottom: The prevalence of vul-
nerabilities to the particularly strong class of attacks which
provide complete-control without foresight (Attacks #1 and
#4 with script/stylesheet as vulnerable resource). Not shown:
Our Top Million dataset shows very similar trends to the Top
500.
We found found that 73% of those Top 500 sites and 80% of those
Top Million domains were vulnerable to one of our attacks, either
now (for Archive-Escape or Anachronism-Injection vulnerabilities,
which do not require foresight) or at time-of-archive (for Same-
Origin Escape vulnerable snapshots, which do require foresight).
Recall that for each vulnerable snapshot, there is a limited set of
domains which are capable of exploiting that vulnerability (e.g., the
destination domain of an archive-escape vulnerability, or the owner
of the domain of a missing resource). That is, not anyone can mount
these attacks — only attackers who own or are able to acquire these
domains. We consider the number of unowned domains (accessible
to anyone) later in this section.
As shown in Figure 3, these vulnerabilities are widespread and
varied in type, endangering client views of a large fraction of
archived sites. Archives and their users should take care to en-
sure they put appropriate levels of trust in archival data, given the
frequency with which they are vulnerable to manipulation.
Sites Are Vulnerable To Strong Attacks. While the top of Fig-
ure 3 considers all of our attacks, the bottom panel considers a
199619982000200220042006200820102012201420160.00.20.40.60.81.0Fraction of Top 500Prevalence of Vulnerabilities on Archived DomainsVulnerable to Any AttackVulnerable to Archive EscapeVulnerable to Same Origin EscapeVulnerable to Anachronism Injection199619982000200220042006200820102012201420160.00.20.40.60.81.0Fraction of Top 500Vulnerability to Strong AttacksVulnerable to Complete Control #1/#4 AttackVulnerable to Complete Control Archive EscapeVulnerable to Complete Control Anachronism Injection199619982000200220042006200820102012201420160.00.20.40.60.81.0Vulnerable Domains Which WereAlso Vulnerable In Previous YearDomains Often Remain Vulnerable Over TimeVulnerable to Either AttackVulnerable to Archive EscapeVulnerable to Anachronism InjectionSession H3:  Web SecurityCCS’17, October 30-November 3, 2017, Dallas, TX, USA1750Potential Attacker
google-analytics.com
googletagservices.com
facebook.net
googletagmanager.com
doubleclick.net
gstatic.com
criteo.com
amazon-adsystem.com
newrelic.com
cloudfront.net
Number of Possible Victims
108
78
67
66