### 2.1 Input to a String

The `fillString` procedure in Listing 2.8 generates a new string, `"01234"`, and assigns it to the constant `count`.

```nim
proc fillString(): string =
  echo "Generating string"
  return "01234"

const count = fillString()
```

I added the `echo` statement at the top of the `fillString` body to demonstrate that it is executed at compile time. To see this in action, compile the example using Aporia or in a terminal by running:

```sh
nim c file.nim
```

You will see `"Generating string"` in the output. However, when you run the compiled binary, this message will not be displayed because the result of the `fillString` procedure is embedded in the binary.

#### Compile-Time Execution

To generate the value of the constant, the `fillString` procedure must be executed at compile time by the Nim compiler. Not all code can be executed at compile time. For example, if a compile-time procedure uses the Foreign Function Interface (FFI), the compiler will produce an error like:

```
Error: cannot 'importc' variable at compile time.
```

#### Benefits and Trade-offs

The main benefit of using constants is efficiency. The compiler computes the value at compile time, saving runtime computation. The downside is longer compilation time and potentially larger executable size. As with many things, finding the right balance for your use case is essential. Nim provides the tools, but you must use them responsibly.

### 2.2 Variable Definitions

You can define multiple variables under the same `var`, `let`, or `const` keyword by adding a new line after the keyword and indenting the identifier on the next line:

```nim
var
  text = "hello"
  number: int = 10
  isTrue = false
```

#### Identifier Naming

- **Identifier**: The name of a variable, which can contain any characters except that it cannot start with a number and cannot contain two consecutive underscores.
- **Unicode Support**: Identifiers can even include Unicode characters:

```nim
var 火 = "Fire"
let ogien´ = true
```

- **Case Sensitivity**: Identifiers in Nim are case insensitive, except for the first letter. This helps distinguish variable names (which must start with lowercase letters) from type names (which must start with uppercase letters).
- **Style Insensitivity**: Identifiers written in camelCase are equivalent to those written in snake_case. The underscore character is ignored, so `fooBar` is equivalent to `foo_bar`. Nim's style conventions recommend using camelCase for variables and PascalCase for types. For more information, see the [Nim Style Guide](https://github.com/nim-lang/Nim/wiki/Style-Guide-for-Nim-Code).

### 2.3 Procedure Definitions

Procedures allow you to separate your program into different units of code. Each procedure generally performs a single task, often with input data provided as parameters.

#### Syntax

A procedure in Nim is defined using the `proc` keyword, followed by the procedure’s name, parameters, optional return type, `=`, and the procedure body.

```nim
proc myProc(name: string): string = "Hello " & name
```

#### Stropping

Reserved keywords can be used as identifiers by enclosing them in backticks (`):

```nim
var `var` = "Hello"
echo(`var`)
```

#### Calling Procedures

You can call a procedure by writing the name followed by parentheses, with any parameters specified inside:

```nim
myProc("Dominik")
```

If a procedure returns a value, the result must be used. Ignoring the result can lead to a compile-time error. Use the `discard` keyword to explicitly ignore the result:

```nim
discard myProc("Dominik")
```

#### Void Return Type

Procedures that do not return a value can omit the return type. In such cases, the procedure is said to return `void`:

```nim
proc noReturn() = echo("Hello")
proc noReturn2(): void = echo("Hello")
```

It is idiomatic to avoid writing `void` in procedure definitions unless necessary.

### 2.4 Returning Values from Procedures

A procedure body can contain multiple statements. If the last expression has a non-void value, it will be implicitly returned. You can also use the `return` keyword, though it is not idiomatic unless needed for early returns.

```nim
proc implicit: string = "I will be returned"
proc explicit: string = return "I will be returned"
proc resultVar: string = result = "I will be returned"
```

Every procedure with a return type has an implicitly declared `result` variable, which is mutable and of the same type as the return type. Use it whenever possible instead of defining your own variable.

### 2.5 Procedure Overloading

Procedure overloading allows you to define different implementations of procedures with the same name but different parameters. The appropriate implementation is chosen based on the arguments passed.

```nim
proc getUserCity(firstName, lastName: string): string =
  case firstName
  of "Damien": return "Tokyo"
  of "Alex": return "New York"
  else: return "Unknown"

proc getUserCity(userID: int): string =
  case userID
  of 1: return "Tokyo"
  of 2: return "New York"
  else: return "Unknown"
```

### 2.6 Anonymous Procedures

Anonymous procedures are useful when passing procedures as parameters. They have no name and are defined inline.

```nim
import sequtils
let numbers = @[1, 2, 3, 4, 5, 6]
let odd = filter(numbers, proc (x: int): bool = x mod 2 != 0)
assert odd == @[1, 3, 5]
```

Nim provides syntactic sugar for anonymous procedures, which can be used by importing the `future` module:

```nim
import sequtils, future
let odd = filter(numbers, (x: int) -> bool => x mod 2 != 0)
```

### 2.7 Documentation

For detailed documentation on each module, visit the [Nim website](http://nim-lang.org/). The documentation includes links to the source code for each procedure.

### 2.8 Collection Types

#### Arrays

Arrays in Nim are static in size and allocated on the stack. They offer memory safety with bounds checking.

```nim
var list: array[3, int]
list[0] = 1
list[1] = 42
assert list[0] == 1
assert list[1] == 42
assert list[2] == 0
echo list.repr
```

Bounds checks can be turned off for performance, but this reduces safety.

#### Sequences

Sequences are dynamic in size and stored on the heap. They can grow as needed.

```nim
var list: seq[int] = @[]
list.add(1)
assert list[0] == 1
```

Sequences need to be initialized before use to avoid segmentation faults.

This concludes the section on Nim basics. The next chapter will put these concepts into practice and solidify your understanding.