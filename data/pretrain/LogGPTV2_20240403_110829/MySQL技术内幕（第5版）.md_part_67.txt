length,
row[i]);
"NULL")
7.4处理SQL语句
263
---
## Page 284
不过，如果对数据的格式和内容很有把握，如事前执行了某些验证检查，那么可以不必对它们
是Windows里的特殊字符，它有时候表示文件结尾。）
让它们在用引号引起来的字符串里变得可用。mysql_real_escape_string（)会把空字节、单
线来对引号字符进行转义，因此你可以用下面两种格式中的任何一种来写出这条语句：
语言对此的习惯做法是，在这个字符串里双写引号。MySQL既支持这种惯例，也允许使用反斜
是非法的，因为在用引号引起来的字符串里出现了一个引号：
造 SELECT语句：
行这条语句时便会引起各种问题。下面将对这一问题的本质和解决办法进行讨论。
7.4.7.1处理包含特殊字符的字符串
里，包含一个引号字符，那么可以采用双写这个引号，或者在其前面加上一个反斜线的方式来
7.4.7对特殊字符和二进制数据进行编码
mysql_fetch_field_direct ()的描述。
结构的唯一方式。关于其他方式的更多信息请参考附录 G 中函数 mysql_fetch_fields（)和
执行相同的语句。
1号（·）、双引号（"）、反斜线（）、换行符、回车符和Ctrl+Z当作特殊字符。（最后那个Ctrl+Z
的内容。如果要进行对比，则可以在调用 mysql 时，带上--column-type-info 选项，然后
生的元数据。它会提示用户输入并执行 SQL语句，但显示的是结果集的元数据，而非结果集
9
应该在什么时候使用mysqi_real_escape_string（）呢？最安全的答案是“一直都用”。
假设，你想基于以 mul结尾的字符串的内容（指向它的是一个名为 name_val 的变量)，构
如果在语句里单纯以字面方式插入包含有引号、null字节或反斜线的数据值，那么在试图执
这类问题可以用mysql_real_escape_string（）来解决，此函数会对特殊字符进行编码，
SELECT *FROM mytbl WHERE name='O'Malley, Brian'
如果 name_val 变量的值为“o'Malley，Brain”之类的内容，那么最终构造出的语句将
执行语句的程序必须要小心处理某些特殊字符。
不过，mysql_field_seek()加 mysql_fetch_fiela()的组合，并非是获得 MYsQL_FIELD
SELECT * FROM mytbl W
SELECT * FROM mytbl WHERE name='O''Malley, Brian'
sprintf (stmt_buf, "SELECT * FROM mytbl WHERE name='%s'", name_val);
char stmt_buf[1024];
'O"'Malley'
 sampdb 发行版包含一个 metadata 程序的源代码，你可以编译运行它，查看各种语句产
field = mysql_fetch_field (res_set);
第7章用C语言编写MySQL程序
使用metadata程序显示结果集元数据
，例如，如果在某个用引号引起来的字符串
---
## Page 285
的。
是需要使用第二个缓冲区：
可以像下面这样做：
打印的“\o”序列，所以 to_str 里的编码结果可以被当作是以 null字节结尾的字符串。
果字符串的实际长度，它并未把结尾的 null计算在内。
当作是以 null 结尾
里的数据长度。它是提供长度值所必需的，因为 from_str 允许包含 null字节，并且不能把它
个由两个字符构成的序列；那个额外的字节是为结尾的null准备的。）
mysql_real_escape_string（)并不会替你分配内存！to_str 指向的那个缓冲区的长度，
是编码后的字符串。注意，千万不要传递未经初始化的指针或者NULL指针，因为
任何内容，其中包括二进制数据。to_str 指向的是一个已经存在的char缓冲区，其中写入的
使用带来方便。
字符0，而不再是nul字节。反斜线、单引号和双引号将分别被编码成“\\”、“\”和“\"”。
以反斜线开头的字符序列。例如，null字节会被编码成“\o”，其中的“0”是可输出的ASCII
调用它。
线组成，那么你当然没必要调用mysql_real_escape_string（）。至于其他情况，则可能需要
进行编码。例如，如果你正处理的字符串所代表的是一些合法的电话号码，即仅由数字和短划
为改写那段SELECT 构造的代码，让它在遇到包含引号的名字值时也能正确地工作，我们
from_len和to_len 的类型都是 unsigned long。其中，from_len 表示缓冲区 from_str
from_str 指向的是一个char 缓冲区，其中包含要被编码的字符串。这个字符串可能包含
mysql_real_escape_string（）函数会对有问题的字符进行编码，它会把它们转换成两个
len = mysql_real_escape_string (conn, to_str, from_str, strlen (from_str));
请看下面这个示例，它便违反了这一原则：
有一点需要特别注意：传递给mysql_real_escape_string（)的缓冲区，必须是真实存在
char stmt_buf[1024],buf[1024];
没错，这个样子的确很难看。为把这段代码变得简洁一点，也可以像下面这样做，代价就
char *to_str;
sprintf(stmt_buf,
char stmt_buf[1024],*p;
mysql_real_escape_string()会对 from_str 进行编码，把结果写入to_str。它还会在
unsigned long len;
(void) mysql_real_escape_string (conn, buf, name_val, strlen (name_val));
to_len = mysql_real_escape_string (conn, to_str, from_str, from_len);
mysql_real_escape_string（）函数的调用语法如下所示：
+= strlen (p);
尾的字符串。to_len 是 mysql_real_escape_string()的返回值，是编码结
7.4处理SQL语句
265
长
---
## Page 286
在实际的应用里，你可以根据图像文件的大小动态地分配这个缓冲区。
时，还需要给定一个标识号，以及一个指针，指向一个打开的包含有图像数据的文件：
因此你可以定义一个像下面这个样子的表：
人一个唯一标识符。对长度小于16MB的二进制值来说，MEDIUMBLOB类型是个很好的选择
图像数据来演示具体的做法。这里的讨论也同样适用于其他任何形式的二进制数据。
或反斜线)，所以把它们直接嵌到语句里并不安全。
库的应用里，便会出现这种情况。因为二进制值可以包含任何字符（其中包括 null字节、引号
7.4.7.2处理二进制数据
始化，因而可能指向任何一个位置。如果不想把内存搞得一团糟，请千万不要把一个未经初始
266
从数据库取回图像值（或任意二进制值）时，没有当初把它存入数据库时遇到的那么多问
假设，需要从文件里读出图像，并把它们存入一个名为picture的表。当然，同时还会存
对二进制数据的处理离不开mysql_real_escape_string（）。本节将利用从文件中读取的
这个load_image（)不会分配太大的语句缓冲区（1MB），因此它只适用于相对较小的图像。
另一个存在问题的情形是，在语句里使用了任意的二进制数据。例如，在把图像存入数据
为把文件里的图像加载到 picture表，可以使用下面这个load_image（）函数来实现。同
问题出在哪里？to_str本该指向一个已经存在的缓冲区，但是它没有这样做一
unsigned 1ong from_len;
char
load_image （MYSQL*conn,int id,FILE *f)
CREATE TABLE picture
nt
pict_id
return (status);
status
p++=
while（(from_len=fread（buf，1,sizeof（buf),f））>0)
sprintf
/*开始创建INSERT语句，
￥
*
第7章用C语言编写MySQL程序
d
+= mysql_real_escape_string （conn,p,buf,from_len）;
if (p+(2*from_len)+3>stmt_buf+sizeof（stmt_buf))
/*千万不要超出语句缓冲区的末尾！
return（l);
print_error (NULL,“image is too big");
stmt_
mysql_real_query（conn,stmt_buf,（unsigned long）（p-stmt_buf));
(stmt_buf,
id)
"INSERT INTO picture (pict_id,pict_data) VALUES (%d,",
INT NOT NULL PRIMARY KEY,
status;
stmt_buf[1024*1024], buf[1024*10], *p;
strlen(stmt_buf);
，对每一块进行编码，
同时添加id值*/
*/
—它未被初
---
## Page 287
句和非SELECT语句，以及几条错误的语句：
MySQL客户端程序。
exec_stmt，就完成任务了。现在，你便有了一个能够执行任何语句并显示其结果的交互式
最
后再为函数 process_statement(）、process_result_set()和 print_dashes()添加代码。
一需要我们添加的内容是一个用于接收输入并执行它们的循环。
序骨架（即connect2.c）和已完成的其他几个函数，几乎提供了我们所需要的所有内容。唯
的输入内容有以下几项限制。
行它们，然后使用前面开发的显示格式处理器process_result_set（）来显示结果。
exec_stmt。这个程序可以让你输入语句，并使用通用语句处理器process_statement（）来执
7.5
它当作一个以null结尾的字符串。
mysql_fetch_lengths（）函数来获得。请记得把这个值当作一个计数字符串来处理，而不要把
题。这个数据值是以原始格式存放在MYSQL_ROW变量里的，其长度可以通过调用
后，在exec_stmt.c的main（）函数里找到下面这行：
在构建 exec_stmt 时，第一步是把客户端程序骨架connect2.c 复制成 exec_stmt.c。然
exec_stmt 程序与客户端程序 mysql很相似，当然在功能上没那么丰富。exec_stmt 允许
%./exec_stmt
把exec_stmt.c编译成exec_stmt.o，再把exec_stmt.o与客户端开发库链接起来生成
本节将把此前开发的许多代码结合起来，编写一个简单的交互式语句执行客户端程序一
query> SELECT coUNT(*) FROM president
Numberofrows
query>
Number
while(1)
把该行替换成如下所示的while循环：
/*..issue statements and process results here（在此处执行语句和处理结果）...*/
事实证明，编写exec_stmt 完全不费力气（大概只有十几行的新代码）。我们的客户端程
口每一个输入行都必须包含一条完整的语句。
sampdb
DATABASE()
口
口
process_statement（conn,buf);
if（strcmp（buf，"quit\n"）==011 strcmp（buf,"\\g\n"）== 0)
charbuf[10000];
交互式语句执行程序
fprintf (stderr,
组合键来退出。
能识别出的唯一非SQL命令是quit和\q，这条命令用于终止程序。也可以使用Ctrl+D
语句不应该以分号或\g作为结尾。
break;
break;
SELECT DATABASE(),USER（)
rows affected:0
sampadm@localhost
USER()
。下面这个示例演示了这个程序的工作情况，其中涉及的语句有 SELECT语
returned:
"query>");
/执行语句*/
/*
7.5交互式语句执行程序
267
---
## Page 288
的内容包括到 my_opt 数组里。修改后的 my_opts 如下所示：
所以你不必再显式地包含my_config.h文件。
这
名
适当的选项设定好自己的证书和密钥文件。客户端也需要证书和密钥文件。更多相关信息请参考13.5节。
exec_stmt_ssl正常工作，构建MySQL时也必须带有SSL支持功能，并且服务器在启动时，必须通过
exec_stmt_ssl。这两个程序看上去很相似，但后面那个使用了加密方式来建立连接。为了i
为展示如何实现这一功能，本节将描述如何修改exec_stmt，并产生一个与之类似的客户端程户
7.6
268
样，在SSL不可用的时候，可以忽略这段代码。
名为 HAVE_OPENSSL的符号。这意味着，在编写与SSL有关的代码时，可以使用下面的结构，
（3）修改那个包含选项信息结构的my_opts数组，让它包含一些标准的与 SSL相关的选项
这个程序的源文件 exec_stmt_ssl.c包含在 sampdb 发行版里，你可以直接用它来建立客
MySQL包含对SSL的支持，并且你可以用它来编写自己的程序，让它通过安全连接来访问服务器。
static struct my_option my_opts[]=/*选项信息结构
#ifdef HAVE_OPENSSL
(2）为让编译器检测到 SSL支持是否可用，MySQL在头文件 my_config.h 里定义了一个
(1)将exec_stmt.c复制成exec_stmt_ssl.c。以下步骤都是针对exec_stmt_ssl.c执行的。
database'mysql'
Error 1044 (42000): Access denied for user 'sampadm'@'1ocalhost' to
Could not
query>
Number of rows affected:
....此处是与 SSL相关的代码...
编写支持SSL的客户端程序
Numberof rowsreturned:
NULL,NULL,NULL,
{"help",
Arthur
Adams
last_name
COUNT(*)
GET_NO_ARG,
Adams
第7章用C语言编写MySQL程序
SELECT
431
execute statement
NO_ARG，0,0,0,0,0,0)，
jFROMt
Chester A.
John Quincy
John
first_name
"Display this help and exit",
column'j'in'fieldlist
*/
序