### Vulnerability Testing and Analysis

#### Vulnerability Testing
Vulnerability testing in SkyWalker is straightforward and easily implemented. For each backend interface, a set of parameters (denoted as \( p \)) are associated with each request. SkyWalker tests each interface \( p \) times to check every parameter for SQL injection (SQLi) and cross-site scripting (XSS). The XML External Entity (XXE) check is performed on all interfaces, as some backends can accept both JSON and XML requests. To avoid congestion and degradation of service on production backends, the scan is conducted slowly and randomly.

SkyWalker utilizes two queues: a job queue and a processing queue. For a given backend interface, SkyWalker generates \( p \) requests and stores them in the job queue. This queue contains all backend requests, which are then shuffled and loaded into the processing queue in batches of 128 requests. Batches containing requests from the same domain or IP address are removed and replaced with non-overlapping domains and IP addresses. Thirty-two workers process the requests from the processing queue and store the results for vulnerability analysis.

#### Vulnerability Analysis
The vulnerability analysis consists of two parts: N-day analysis and 0-day analysis.

**N-day Analysis:**
SkyWalker correlates Common Vulnerabilities and Exposures (CVE) entries with fingerprinting results to identify potential issues. The confidence level of the fingerprinting results is used to verify each vulnerability. NASL scripts take the output of service discovery, OS identification, server software (SS) identification, and client software (CS) identification as input and match them against known vulnerabilities (CVEs). NASL results are considered if they have a 90% or higher confidence level for OS detection, ensuring high accuracy in vulnerability matching. The confidence level is calculated based on pre-profiled OSes by matching fingerprint signals collected from all layers.

We manually verified all 983 N-day instances and found them to be true positives. The zero false positive results are due to the Nessus configuration, which allows us to fine-tune the scans and reporting. For example, we configure Nessus to perform specific scan types, consider OS type and version detection with 90% or higher confidence, and consider services with banner information that includes version numbers. In contrast, when using UDP scanning techniques and considering generic service banner information, we found over 6,500 candidate N-day instances with a high false positive rate. Theoretically, the backend can be configured to provide misleading banner information, making verification difficult.

**0-day Analysis:**
For 0-day analysis, SkyWalker carefully triggers the candidate vulnerability to verify the findings. For each vulnerable parameter, SkyWalker generates a pair of request messages: the original message and the vulnerable message.

- **SQL Injection (SQLi):** SkyWalker baselines the original request message several times throughout the week at different times of the day. It then performs the same measurement on the vulnerable message in the same week but at non-overlapping time intervals by triggering the vulnerable parameter through an SQLi sleep injection. The response time deviation is calculated based on the sleep parameter passed in the SQL statement and the average response time of the message pairs. If the deviation matches the time delay parameter in the SQL statement, SkyWalker concludes that the interface and parameter pair are vulnerable.

- **Cross-Site Scripting (XSS):** SkyWalker triggers the vulnerable parameter and includes JavaScript code to create a new div element with a unique name attribute. It checks the returned content by parsing the Document Object Model (DOM) to find the div element with the unique name attribute. If the div element with the set name attribute exists, SkyWalker concludes that the interface and parameter are vulnerable. Note that SkyWalker matches the returned content with parameters sent to ensure that the XSS candidate vulnerability is of type 2 (reflected).

- **XML External Entity (XXE):** SkyWalker generates a request message containing an HTTP callback request to a server we operate. The request message is passed to the backend, which will parse the specially crafted XML document. If the parser is vulnerable to XXE, SkyWalker logs an HTTP request from the backend under analysis, indicating that the interface is vulnerable.

We manually reviewed the request/return pairs for all 655 0-day instances and found no false positives.

#### Open Access for Developers
One of our primary goals is to empower app developers with open access to SkyWalker via a free-to-use web service. The service currently supports Android mobile apps but can be extended to support other mobile platforms, such as Apple iOS. The web interface accepts a link to an Android app in the Google Play store or a direct APK upload. SkyWalker then performs binary analysis to extract the backends, label them based on our curated dataset, fingerprint them, and identify vulnerabilities. The output report provides guidelines on how to mitigate the identified issues using the strategies discussed earlier (upgrade, patch, block, report, and migrate).

SkyWalker summarizes vulnerability findings across all observed SDK and Java library backends, enabling developers to make informed decisions when choosing third-party libraries for future apps. It is important to note that attackers could abuse this system to attack mobile app backends. Therefore, developers must disclose their affiliation with the target app before receiving the analysis results. Once a user is vetted, they can only submit apps they develop. We do not consider third-party SDKs in this process. The SkyWalker service can be found at: https://MobileBackend.vet.

#### Assessment Findings

**Experiment Setup:**
- **Environment:** We use a local workstation running Ubuntu 14.04 with 24GB memory and 16 x 2.393GHz Intel Xeon CPUs, along with four Nexus phones to run and instrument the mobile apps. An Amazon Web Service (AWS) Elastic Compute (EC2) instance with a reserved IP address is used to conduct fingerprinting and run a web server with information about our study, including an email address for backend hosts to contact us if they want to opt-out.
- **Tools and Data Sets:** For binary analysis, we relied on Soot [25], FlowDroid [26], Z3-str [27], and Xposed [28] with custom code written in Java (7,000 lines of code) and Python (900 lines of code). For backend labeling, we used Team Cymru IP-to-ASN [29], MaxMind Geolocation [23], Alexa ranking [30], ipcat list [20], and Domaintools WHOIS [31] with custom code written in Python (480 lines of code). For fingerprinting, we used the Nessus scanner and commercial plugins [32], sqlmap [33], and Acunetix [34]. We utilized Nessus plugins and custom Python code (1010 lines of code) for vulnerability analysis. For internet measurements, we used honeypot scanning activity from Greynoise [35].

**Software Vulnerability Details:**
Table 4 shows the distribution of 0-day and N-day instances across the software layers. We categorize the apps using the Google Play store groups and present the number of vulnerabilities and backend labels. Overall, we analyzed 4,980 apps with cloud-based backends and successfully extracted backends for 4,740 mobile apps. The remaining 240 mobile apps crashed and did not complete the full binary analysis.

Interestingly, the OS component reports the least vulnerabilities, while the AS component reports the most vulnerabilities across all mobile app categories. Recall from Section 3.2, vulnerabilities affecting AS components are all considered 0-day. The OS, SS, and SC components account for N-day vulnerabilities. Although the number of apps is not uniform across the categories, we use the raw vulnerability count for ranking. For 0-day vulnerabilities, the top three mobile app categories are tools, entertainment, and games. For N-day vulnerabilities, the top three mobile app categories are entertainment, tools, and games.

**Ownership:**
Table 4 presents the labels for the backends used by mobile apps. The most common label is hybrid, where 3,336 backends use hybrid infrastructure. The second most common label is unknown, with 2,506 backends.

**Table 4: Overview of Vulnerable Mobile Apps per Genre**

| Category         | # Mob. Apps | # OS | # SS | # AS | Vulnerabilities | Total | # B1st | # B3rd | # Bhyb | # Bukn | Total Labels |
|------------------|-------------|------|------|------|-----------------|-------|--------|--------|--------|---------|--------------|
| Books & Reference | 332         | 15   | 49   | 55   | 190             | 1,873 | 365    | 653    | 501    | 354     | 9,423        |
| Business         | 145         | 5    | 22   | 10   | 74              | 614   | 93     | 258    | 150    | 113     |              |
| Entertainment    | 1,177       | 36   | 108  | 158  | 472             | 3,384 | 746    | 913    | 942    | 783     |              |
| Games            | 1,283       | 34   | 81   | 147  | 368             | 2,189 | 290    | 804    | 651    | 444     |              |
| Lifestyle        | 363         | 20   | 50   | 79   | 221             | 1,475 | 262    | 665    | 311    | 237     |              |
| Misc             | 199         | 6    | 21   | 45   | 118             | 766   | 76     | 422    | 163    | 105     |              |
| Tools            | 792         | 19   | 84   | 184  | 402             | 2,801 | 729    | 796    | 812    | 464     |              |
| Video & Audio    | 689         | 24   | 46   | 89   | 257             | 1,706 | 267    | 648    | 434    | 357     |              |
| Total            | 4,980       | 121  | 356  | 655  | 1,638           | 9,423 | 2,492  | 1,089  | 3,336  | 2,506   |              |

**Table 5: Count of Apps Affected by Vulnerabilities per Cloud Layer and Their Corresponding Labels**

| Party | B1st | B3rd | Bhyb | Bukn |
|-------|------|------|------|------|
| CS    | 211  | 37   | 42   | 6    |
| OS    | 184  | 47   | 55   | 173  |
| SS    | 87   | 21   | 150  | 135  |
| AS    | 155  | 200  | 154  | 146  |
| Total | 490  | 269  | 535  | 509  |

**Top 3 Vulnerabilities per Component:**

- **OS:**
  - Expired Lifecycle for Linux OS (various)
  - Windows Server RCE (MS15-034)
  - Expired Lifecycle for Windows Server

- **SS:**
  - Vulnerable PHP Version
  - Expired Lifecycle for Web Server (various)
  - Vulnerable Apache Version

- **AS:**
  - XSS (various)
  - SQLi (various)