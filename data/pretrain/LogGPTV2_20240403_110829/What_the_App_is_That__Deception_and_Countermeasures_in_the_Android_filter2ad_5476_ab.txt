### GUI Confusion Attacks and Enhancing Techniques

We have identified various attack vectors and enhancing techniques that can be used in GUI confusion attacks. These techniques, while not inherently posing a security risk, can significantly enhance the effectiveness and stealth of such attacks.

#### Attack Vectors and Enhancing Techniques

| Category | Attack Vector | Mentioned in |
|----------|---------------|--------------|
| **Attack Vectors** | **Draw on top** | [3], [5] |
| | UI-intercepting draw-over | [3], [4], [5] |
| | Non-UI-intercepting draw-over | [3], [10] |
| | Toast message | - |
| | App switch | - |
| | Fullscreen | - |
| **Enhancing Techniques** | startActivity API | [6] |
| | Screen pinning | - |
| | moveTaskTo APIs | - |
| | killBackgroundProcesses API | - |
| | Back / power button (passive) | - |
| | Sit and wait (passive) | - |
| | non-“immersive” fullscreen | - |
| | “immersive” fullscreen | - |
| | “inescapable” fullscreen | - |
| | getRunningTasks API | [5] |
| | Reading the system log | [11] |
| | Accessing proc file system | [6], [12] |
| | App repackaging | [13], [14], [15] |

#### A. Attack Vectors

1. **Draw on Top:**
   - **Description:** This category of attacks involves drawing graphical elements over other apps. Typically, this is achieved by adding graphical elements in a Window placed over the top Activity. The Activity itself is not replaced, but malware can cover it either completely or partially, altering the user's interpretation of certain elements.
   - **APIs and Permissions:** Apps can use the `addView` API exposed by the `WindowManager` Service to open new Windows and draw content. This API accepts several flags that determine how the new Window is displayed, including:
     - Whether it intercepts user input or lets it "pass through"
     - Its type, which determines the Window’s Z-order relative to underlying Windows
     - The region of the screen where it is drawn
   - **Types of Draw-on-Top Attacks:**
     - **UI-intercepting draw-over:** A Window spawned with the `PRIORITY_PHONE` flag can overlay the top-activity Window and intercept user input.
     - **Non-UI-intercepting draw-over:** By forwarding all user input to the underlying Windows, classical "click-jacking" attacks are possible, where users are lured into performing unwanted actions.

2. **App Switch:**
   - **Description:** These attacks aim to steal focus from the top app by replacing the legitimate top Activity with one of the malicious app's own. For example, a malicious app might wait until the genuine Facebook app is the top app and then trigger an app switch, mimicking the original Facebook app's GUI.
   - **Active vs. Passive App Switches:**
     - **Active App Switch:** Replacing the currently running app using the `startActivity` API. Our tool determined that opening an Activity from a Service, Broadcast Receiver, or Content Provider with the `NEW TASK` flag will place it on top of all others. Alternatively, opening an Activity from another one with the `singleInstance` launch mode will also place it on top.
     - **Passive App Switch:** The malicious app waits for specific user input without actively changing the Activity stack or showing new Windows.
   - **Other Attack Vectors:**
     - **moveTaskTo APIs:** Any app with the `REORDER_TASKS` permission can use `moveTaskToFront` to place Activities on top of the stack.
     - **Screen Pinning:** Android 5.0 introduces "screen pinning," which locks user interaction to a specific app. This feature can be programmatically requested by an app, requiring user confirmation unless the app is registered as a "device admin."
     - **killBackgroundProcesses API:** This API allows killing processes spawned by another app, requiring the `KILL_BACKGROUND_PROCESSES` permission. It can be used to prevent benign apps from interacting with the user.
     - **Back/Power Button Interception:** A malicious app can intercept the back button or power button actions to mimic an app switch, making the user believe they are interacting with a different app.
     - **Sit and Wait:** When a malicious app is in the background, it can change its GUI to mimic a victim app, tricking the user into switching to the malicious version.

3. **Fullscreen:**
   - **Description:** Android apps can enter fullscreen mode, drawing on the entire screen area, including the navigation bar. Without proper mitigations, this can be exploited to create a fake home screen, intercepting user inputs.
   - **Mitigations and Vulnerabilities:**
     - **Android Mitigations:** In versions up to 4.3, the navigation bar appears on top of a fullscreen Activity when the user clicks the screen. Android 4.4 introduces "immersive" fullscreen mode, accessed via a specific swipe gesture.
     - **Vulnerabilities:** Using our API exploration tool, we found combinations of flags that allow creating an "inescapable" fullscreen Window, covering the entire screen without allowing the user to close it or switch to another app. We discovered vulnerabilities in different Android versions, some of which were not fully addressed by Google's patches.

#### B. Enhancing Techniques

1. **Techniques to Detect User Interaction:**
   - **Reading the System Log:** Apps with the `READ_LOGS` permission can read the system log to learn about the last Activity drawn on the screen. This functionality has been restricted in Android 4.1 and above.
   - **getRunningTasks API:** This API, requiring the `GET_TASKS` permission, allows an app to get information about currently running apps. In Android 5.0, it can only be used to get information about its own Activities.
   - **Accessing the Proc File System:** By reading data from the `/proc` file system, an app can detect which app the user is currently interacting with. For example, the content of `/proc/<pid>/cgroups` changes when the top app is run, indicating the current user interaction.

2. **Techniques to Create Mimicking Graphical Elements:**
   - **Repackaging:** Modifying an existing app by changing its package name and adding attack code can expedite the development of interfaces that mimic those of other apps. Repackaging is well-known in the Android ecosystem and can be used to create convincing copies of victim apps.

#### C. Example Attack Apps

In practice, malicious apps can combine multiple attack vectors and enhancing techniques to mount stealthy attacks. For instance, the attack app we implemented for our user study disguises itself as a utility app. When launched, it monitors other running apps, waiting for the user to switch to or launch the Facebook app. When this happens, it uses the `startActivity` API to spawn a malicious app on top of the genuine Facebook app. The malicious app is a repackaged version of the actual Facebook app, with additional functionality to leak any entered user credentials.