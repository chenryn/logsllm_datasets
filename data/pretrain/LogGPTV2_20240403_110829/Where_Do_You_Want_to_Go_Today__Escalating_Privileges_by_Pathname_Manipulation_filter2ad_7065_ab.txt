common UNIX system. The permissions of the relevant
directories are:
drwxr-xr-x root root /
drwxr-xr-x root root /etc
drwxr-xr-x root root /home
drwx------ joe joe /home/joe
drwxrwxrwt root root /tmp
drwxr-xr-x root root /tmp/amanda
Then the only manipulator of the name /etc/passwd is
root (since only root can write in either / or /etc/),
and the manipulators of the name /home/joe/mbox are
root and joe. On the other hand, all the users on that
machine are manipulators of /tmp/amanda/foo, since
everyone can write in /tmp.4 Moreover, if we had the sym-
bolic links:
3See Section 6.3 for a discussion about gids.
4The directory /tmp typically has the sticky bit set, which prevents
non-root users from removing other user’s (cid:2)les from /tmp. But it
does not prevent users from moving other user’s (cid:2)les into /tmp. For
this reason, everyone must be considered a manipulator of the direc-
/home/joe/link1 -> /etc/passwd
/home/joe/link2 -> /tmp/amanda
then the manipulators of the name /home/joe/link1
are root and joe, and the manipulators of the name
/home/joe/link2/foo include all the users on that
machine (since resolution of this last name goes through
the world-writable /tmp).
We note that this description is (cid:147)static(cid:148), in that it refers
to the permission structure as it exists at a given point in
time. Nonetheless, in Section 3.2 we show that our solu-
tion (which is based on this (cid:147)static(cid:148) notion) prevents privi-
lege escalation via pathname manipulations even in settings
where the (cid:2)lesystem (and its permissions) can change in
a dynamic fashion. Roughly speaking, this is because in
POSIX systems only manipulators of a path can add new
manipulators to it, and no manipulator can remove itself
from the set of manipulators of a path.5
Safe and unsafe names. For POSIX systems, we say that
a name is system-safe (or safe for root) if root is the only
manipulator of that name. A name is safe for some other
uid if its only manipulators are root and uid. Otherwise
the name is unsafe.
2.2. The Safe-Open Procedure
Our safe-open procedure is a re(cid:2)nement of the safety
mechanisms used by the Post(cid:2)x mail system [22] to open
(cid:2)les under the world-writable directory /var/mail. The
basic approach taken by Post(cid:2)x is to verify that the opened
(cid:2)le is not a symbolic link and does not have multiple
hard links. This approach works for the special case of
/var/mail, but it is not quite applicable as a general-
purpose policy, for two reasons:
It is too strict. There are cases where applications have a
legitimate need to open a (cid:2)le with multiple hard links
or a symbolic link.6 Moreover, blanket refusal to open
(cid:2)les with multiple hard links would enable an easy
denial-of-service attack: simply create a hard link to
a (cid:2)le, and no one will be able to open it.
It is not strict enough. Refusing to open links does not
provide protection against manipulation of higher-up
directories. For example, consider a program that tries
to open the (cid:2)le /tmp/amanda/foo. Even if this (cid:2)le
tory /tmp/amanda, even though this directory can be removed only by
root.
5The last statement depends on the fact that only root can use the
chown system call.
6For example, old implementations of Usenet news kept a different di-
rectory for every newsgroup and a different (cid:2)le for every article, and when
an article was sent to more than one group, then it will be stored with
multiple hard links, one from each group where this article appears.
does not have multiple links, it may still not be safe to
open it: For example, the attacker could have created
/tmp/amanda/ as a symbolic link to /etc, and the
program opening /tmp/amanda/foo will be open-
ing /etc/foo instead.
since the (cid:147)merge point(cid:148) occurred while visiting the di-
rectory /home/joe/, still in a safe mode. On the
other hand, safe-open will refuse to open this name
when running with effective uid of root, since the
directory /home/joe/ is not safe for root.
To implement a general-purpose safe-open, we there-
fore re(cid:2)ne these rules. Our basic procedure is as follows:
While resolving the name, we keep track of whether the
path so far is safe or unsafe for the effective uid of the
calling process. When visiting a directory during name res-
olution, we call it unsafe if it is group- or world-writable,
or if its owner is someone other than root or the current
effective uid of the calling process (and otherwise we call
it safe). When resolving an absolute path, we start at the
root in safe mode (if the root directory is safe). As long
as the resolver only visits safe directories, we are in a safe
mode, can follow symbolic links or ‘..’, and can open (cid:2)les
with multiple hard links. However, once the resolver visits
an unsafe directory, we switch to unsafe mode, and in the
remainder of the path, disallow symbolic links or ‘..’, and
refuse to open a (cid:2)le with multiple hard links.7 We note the
following about this solution:
(cid:15) A safe name that can be opened by POSIX open will
also be opened by safe-open: If a name is safe then
the safe-open procedure will visit only safe direc-
tories, and therefore will not abort due to symlinks or
multiple hardlinks. Any directory that is visited dur-
ing name resolution in open will also be visited by
safe-open, and the (cid:2)le will eventually be opened.
(cid:15) A (cid:2)le with only one name (which can be opened by
POSIX open) will be opened by safe-open: This
is similar to the previous argument, if the (cid:2)le has just
one name then this name cannot include symbolic links
and the (cid:2)le cannot have multiple hard links. Hence
safe-open will succeed in opening it if POSIX
open does.
(cid:15) For a (cid:2)le with multiple unsafe names, each of these
names may or may not be opened by safe-open.
Note that if many names point to the same (cid:2)le, then
there must be (cid:147)merge points(cid:148) where either we have a
symbolic link pointing to a directory (or to the (cid:2)le)
or multiple hard links pointing to this (cid:2)le. When
safe-open resolves these names, it agrees to follow
these (cid:147)merge points(cid:148) if it visited only safe directories
before they occur, and refuses to follow them if it vis-
ited an unsafe directory.
For one example, safe-open will agree to open the
unsafe name /home/joe/link2/foo from Sec-
tion 2.1 when running with effective uid of joe,
7See Section 6.1 for more permissive variants of this procedure.
Implementing this safe-open procedure in the (cid:2)lesys-
tem itself (i.e., in the kernel) should be straightforward: All
we need is to add a check for permissions and ownership
on every directory, updating the safety (cid:3)ag accordingly. Ar-
guably, this is the preferred mode of implementation, but
it requires changes to existing (cid:2)lesystems. Alternatively,
we describe an implementation of safe-open as a library
function in user space. This implementation roughly fol-
lows the procedure of Tsafrir et al. [20, 21] for user-level
name resolution, but adds to it the safe-mode vs. unsafe-
mode behavior as described above. We discuss this imple-
mentation in Section 4.
Relative paths and openat. The procedure for resolv-
ing relative paths (or for implementing openat) is essen-
tially the same as the one for absolute paths, except that we
need to know if the starting point (e.g., the current working
directory) is safe or not. In a kernel implementation, it is
straightforward to keep track of this information by adding
(cid:3)ags to the handle structure. Some care must be taken in
situations where the directory permissions change (e.g., via
chmod or chown) or when the privileges of the current
process change, but no major problems arise there. Keep-
ing track of this information in a library implementation is
harder, but even there it is usually possible to get this in-
formation, and reasonable defaults can be used when the
information is unavailable (e.g., after an exec call). We re-
fer to Appendix A for more details about relative paths and
openat.
3. Our Security Guarantee
Recall the security guarantee that we set out to achieve:
If a (cid:2)le has names safe for user U, then safe-open
will not open it for U using an unsafe name.
In other words, if a (cid:2)le has both safe and unsafe names,
then safe-open should fail on all the unsafe names. (At
the same time it succeeds on all the safe names, as noted
above.) We note again that as stated, this guarantee applies
only to a static-permission model, where permissions and
ownership of directories do not change during the name res-
olution. However, as we discuss at the end of this section,
protection against privilege escalation attack is ensured even
when the attacker makes arbitrary permission changes for
directories that it owns. The only thing that we must assume
is that non-adversarial entities do not induce a permission-
change race against our name resolution.8 Our analysis be-
low also assumes that each directory tree appears only once
in the (cid:2)le system tree (i.e. no loop-back mounts, etc.), and
that each directory has at most one parent (i.e., one hard link
with a name other than ‘.’ or ‘..’).9 A short discussion of
mount points can be found later in this section.
We now turn to proving this security guarantee. Con-
sider a (cid:2)le that has both safe and unsafe names (for a spe-
ci(cid:2)c uid), (cid:2)x one speci(cid:2)c unsafe name, and we show that
safe-open must fail when it tries to open that name (on
behalf of a process with this effective uid). We distinguish
two cases: either the (cid:2)le has just one hard link, or it has
more than one.
(cid:15) Case 1: more than one hard link. Note that when
safe-open is called with the unsafe name, it will
apply name resolution while checking the safety of the
name as it resolves it. As the resolution of this name
goes through a directory which is unsafe for this uid,
then safe-open will arrive at the last directory in
this name resolution in unsafe mode (assuming that it
arrives there at all). Since the (cid:2)le has more than one
hard link, safe-open will then refuse to open it.
(cid:15) Case 2: exactly one hard link. In this case, there is a
single path from the root to this (cid:2)le in the directory tree
(i.e. we exclude names that contain symbolic links).
Below we call this the (cid:147)canonical path(cid:148) for this (cid:2)le
and denote it by /dir1/dir2/.../dirn/foo.
Clearly, every pathname that resolves to this (cid:2)le must
visit all the directories on the canonical path. (More-
over, the last directory visited in every name resolu-
tion must be dirn, since it holds the only hard link to
foo.) Since we assume that the (cid:2)le has safe names for
uid, it follows that all the directories in this canonical
path must be safe for uid.
Consider now the directories visited while resolving
the unsafe name. Being unsafe, we know that the res-
olution of this name must visit some unsafe directory,
and that unsafe directory cannot be on the canonical
path. Therefore, during the resolution of an unsafe
name, safe-open must visit some unsafe directory
(and therefore switch to unsafe mode) before arriving
at the (cid:2)nal directory dirn.
Consider the last directory not on the canonical path
that was visited while resolving this unsafe name. We
8The distinction between adversarial and non-adversarial entities is in-
herent in privilege-escalation attacks, since one must distinguish between
privileges held by the attacker and those held by the victim(s).
9Nearly all contemporary POSIX implementations either do not al-
low processes to create additional hard links to directories (e.g., FreeBSD,
Linux) or restrict this operation to the super-user (e.g., Solaris, HP-UX). A
notable exception is MacOS.
call this directory dir0. Then it must be the case that
safe-open switched to unsafe mode when visiting
dir0 or earlier (because after dir0 it only visited
safe directories). Now, since the canonical path begins
with the root ’/’, then safe-open could not descend
into the canonical path from above. Hence moving
from dir0 to the next directory was done either by
following a symbolic link or by following ‘..’, but
this is impossible since safe-open does not follow
symbolic links or ‘..’ when in unsafe mode.
This completes the proof of our security guarantee.
Multiple mount points. We note that all the arguments
from above continue to hold even when a (cid:2)lesystem is
mounted at multiple points in the global name space, as
long as all the mount points are system-safe. However, our
security guarantee breaks if we have the same (cid:2)lesystem
mounted in several directories, some safe and others not. In
this case, going down a (cid:147)canonical(cid:148) unsafe name for a (cid:2)le,
we have no way of knowing that the same (cid:2)le also have a
safe name (via a different mount point). The same problem
arises when parts of the (cid:2)lesystem are exposed to the out-
side world, e.g., via NFS. In this case, what may appear as
a safe directory to a remote user may be unsafe locally (or
the other way around).
3.1. Using the Security Guarantee to Thwart Privi›
lege Escalation
The security guarantee that we proved above provides
one with an easy way of creating (cid:2)les that applications
cannot be (cid:147)tricked(cid:148) into opening using adversarial links:
Namely, create the (cid:2)le with a safe name. For example, if
the name /path-to/foo is system safe, then no process
running as root can use safe-open to open the same
(cid:2)le with a name that includes a link that was created (or
renamed, or moved to its current location) by a non-root
user. This is because such a link would have to be created in
(or moved to) an unsafe directory, making the name unsafe
and causing safe-open (running as root) to fail on it.
This observation can be used to defeat privilege esca-
lation attacks. Consider a (cid:2)le that needs to be protected
against unauthorized access (where access can be read,
write, or both). Hence the (cid:2)le is created with restricted ac-
cess permissions. To ensure that this protection cannot be
overcome by the attacker creating adversarial links, we cre-
ate this (cid:2)le with a name that is safe for all the uids that have
access permission for it. (That is, if only one uid has ac-
cess permission to the (cid:2)le then the name should be safe for
that uid, and otherwise the name should be system-safe.)
We now claim that an attacker that cannot access the
(cid:2)le, also cannot create a link that would be followed with
safe-open by anyone with access permission for this (cid:2)le.
Note that the attacker must have a different uid than any-
one who can access the (cid:2)le.10 Hence a directory where the
attacker can create a link must be unsafe for anyone who can
access the (cid:2)le, and therefore safe-open will not follow
links off that directory.
3.2. Dynamic Permissions
The argument above covers the static-permission case,
where permissions for directories do not change during the
execution of safe-open. We now explain how it can be
extended to the more realistic dynamic-permission model.
Consider a potential privilege-escalation attack, where
an attacker that cannot access a certain (cid:2)le tries to cause a
victim program to access that (cid:2)le on its behalf. Notice that
in this scenario it must be the case that the attacker does
not have root privileges, and also has a different effective-
uid than the victim. (Otherwise no privilege escalation is
needed (cid:151) the attacker could access the (cid:2)le by itself.10)
Consider now a (cid:2)le F that can be accessed by the
effective-uid of the victim (denoted by U) but not by the
effective-uid of the attacker (denoted by U 0), consider a
particular execution of safe-open by the victim, and as-
sume that:
(a) at the time that the procedure is invoked, the (cid:2)le F has
some name that is safe for U, and that name remains
unchanged throughout the execution, and
(b) the pathname argument to safe-open is not a U-safe
name for the (cid:2)le F when the procedure is invoked.
Under these conditions, we show that this safe-open
procedure will not open the (cid:2)le F , barring a concurrent
(cid:2)lesystem operation by root or U on pathname elements
that safe-open examines. Put in other words, the at-
tacker can only violate our security guarantee if it can in-
duce a race condition between two non-adversarial pro-
cesses (i.e., the safe-open procedure and another process
with uid of either the victim or root). Assume therefore
that these two conditions hold, and in addition
(c) neither root nor U did any concurrent (cid:2)lesystem op-
eration on any pathname element examined by this
safe-open.
We observe that any pathname element that safe-open
examines and that resides in a U-safe directory at the time
where the procedure was invoked, must remain in the same
state throughout this safe-open execution. The reason
is that being U-safe, only U and root have permissions
10See Section 6.3 for a short discussion of setgid programs.
to change anything in the directory, and by our assump-
tion (c) neither of them made any changes to that pathname
element.
Imagine now that the state of the (cid:2)lesystem is frozen at
the time when the safe-open procedure is invoked, and
consider the way the pathname argument to safe-open
would be resolved. We have two cases: either all the di-
rectories visited by this hypothetical name resolution are
U-safe, or some of them are not. The easy case is when
all of them are U-safe:
then it must be the case that the