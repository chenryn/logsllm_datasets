![SSH Tunnels: Scenario 4](/data/attachment/album/201710/09/233133g0r0500yiyyrsrvx.png)
正确的命令是：
```
externo1 $ ssh -R 0.0.0.0:7900:localhost:5900 user@interno1 
```
但是这里有个重点需要了解，出于安全的原因，如果我们直接执行该命令的话可能不会生效，因为我们需要修改 SSH 服务端的一个参数值 `GatewayPorts`，它的默认值是：`no`。
> 
> GatewayPorts
> 
> 
> 该参数指定了远程主机是否允许客户端访问转发端口。默认情况下，sshd(8) 只允许本机进程访问转发端口。这是为了阻止其他主机连接到该转发端口。GatewayPorts 参数可用于让 sshd 允许远程转发端口绑定到非回环地址上，从而可以让远程主机访问。当参数值设置为 “no” 的时候只有本机可以访问转发端口；“yes” 则表示允许远程转发端口绑定到通配地址上；或者设置为 “clientspecified” 则表示由客户端来选择哪些主机地址允许访问转发端口。默认值是 “no”。
> 
> 
> 
如果我们没有修改服务器配置的权限，我们将不能使用该方案来进行端口转发。这是因为如果没有其他的限制，用户可以开启一个端口（> 1024）来监听来自外部的请求并转发到 `localhost:7900`。
参照这个案例：[netcat](http://en.wikipedia.org/wiki/Netcat) ( [Debian # 310431: sshd\_config should warn about the GatewayPorts workaround.](http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=310431) )
所以我们修改 `/etc/ssh/sshd_config`，添加如下内容：
```
GatewayPorts clientspecified 
```
然后，我们使用如下命令来重载修改后的配置文件（在 Debian 和 Ubuntu 上）。
```
sudo  /etc/init.d/ssh reload 
```
我们确认一下现在 interno1 节点上存在 7900 端口的监听程序，监听来自不同 IP 的请求：
```
interno1 $ netstat -ltn
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address Foreign Address State      
...    
Tcp 0 0 0.0.0.0:7900 0.0.0.0:* LISTEN
...
```
然后我们就可以在 interno2 节点上使用 VNC 服务了：
```
interno2 $ internal vncviewer1::7900
```
### 场景 5
> 
> 在 externo1 上使用由 interno2 提供的 TCP 服务（本地端口转发 / 绑定地址 localhost / 主机 = interno2 ）
> 
> 
> 
![SSH Tunnels: Scenario 5](/data/attachment/album/201710/09/233137cpxvbbisvddvvlbb.png)
在这种场景下我们使用如下命令：
```
externo1 $ ssh -L 7900:interno2:5900 user@interno1
```
然后我们就能在 externo1 节点上，通过执行如下命令来使用 VNC 服务了：
```
externo1 $ vncviewer localhost::7900
```
### 场景 6
> 
> 在 interno1 上使用由 externo2 提供的 TCP 服务（远程端口转发 / 绑定地址 = localhost / host = externo2）
> 
> 
> 
![SSH Tunnels: Scenario 6](/data/attachment/album/201710/09/233143kyqncci54q1zjc1d.png)
在这种场景下，我们使用如下命令：
```
externo1 $ ssh -R 7900:externo2:5900 user@interno1 
```
然后我们可以在 interno1 上通过执行如下命令来访问 VNC 服务：
```
interno1 $ vncviewer localhost::7900 
```
### 场景 7
> 
> 在 externo2 上使用由 interno2 提供的 TCP 服务（本地端口转发 / 绑定地址 = 0.0.0.0 / 主机 = interno2）
> 
> 
> 
![SSH Tunnels: Scenario 7](/data/attachment/album/201710/09/233145y9ogqzfnw5o85g8h.png)
本场景下，我们使用如下命令：
```
externo1 $ ssh -L 0.0.0.0:7900:interno2:5900 user@interno1 
```
或者：
```
externo1 $ ssh -g -L 7900:interno2:5900 user@interno1 
```
然后我们就可以在 externo2 上执行如下命令来访问 vnc 服务：
```
externo2 $ vncviewer externo1::7900 
```
### 场景 8
> 
> 在 interno2 上使用由 externo2 提供的 TCP 服务（远程端口转发 / 绑定地址 = 0.0.0.0 / 主机 = externo2）
> 
> 
> 
![SSH Tunnels: Scenario 8](/data/attachment/album/201710/09/233148cnbbykh9dyhb8dwe.png)
本场景下我们使用如下命令：
```
externo1 $ ssh -R 0.0.0.0:7900:externo2:5900 user@interno1 
```
SSH 服务器需要配置为：
```
GatewayPorts clientspecified 
```
就像我们在场景 4 中讲过的那样。
然后我们可以在 interno2 节点上执行如下命令来访问 VNC 服务：
```
interno2 $ internal vncviewer1::7900 
```
如果我们需要一次性的创建多个隧道，使用配置文件的方式替代一个可能很长的命令是一个更好的选择。假设我们只能通过 SSH 的方式访问某个特定网络，同时又需要创建多个隧道来访问该网络内不同服务器上的服务，比如 VNC 或者 [远程桌面](http://en.wikipedia.org/wiki/Remote_Desktop_Services)。此时只需要创建一个如下的配置文件 `$HOME/redirects` 即可（在 SOCKS 服务器 上）。
```
# SOCKS server
DynamicForward 1080
# SSH redirects
LocalForward 2221 serverlinux1: 22
LocalForward 2222 serverlinux2: 22
LocalForward 2223 172.16.23.45:22
LocalForward 2224 172.16.23.48:22
# RDP redirects for Windows systems
LocalForward 3391 serverwindows1: 3389
LocalForward 3392 serverwindows2: 3389
# VNC redirects for systems with "vncserver"
LocalForward 5902 serverlinux1: 5901
LocalForward 5903 172.16.23.45:5901
```
然后我们只需要执行如下命令：
```
externo1 $ ssh -F $HOME/redirects user@interno1 
```
---
via: 
作者：[Ahmad](https://wesharethis.com/author/ahmad/) 译者：[toutoudnf](https://github.com/toutoudnf) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出