title:Revisiting Leakage Abuse Attacks
author:Laura Blackstone and
Seny Kamara and
Tarik Moataz
Revisiting Leakage Abuse Attacks
Laura Blackstone
Brown University
laura PI:EMAIL
Seny Kamara
Brown University
PI:EMAIL
Tarik Moataz(cid:63)
Aroki Systems
PI:EMAIL
Abstract—Encrypted search algorithms (ESA) are crypto-
graphic algorithms that support search over encrypted data.
ESAs can be designed with various primitives including search-
able/structured symmetric encryption (SSE/STE) and oblivious
RAM (ORAM). Leakage abuse attacks attempt to recover client
queries using knowledge of
the client’s data. An important
parameter for any leakage-abuse attack is its known-data rate;
that is, the fraction of client data that must be known to the
adversary.
In this work, we revisit leakage abuse attacks in several ways.
We ﬁrst highlight some practical limitations and assumptions
underlying the well-known IKK (Islam et al. NDSS ’12) and
Count (Cash et al., CCS ’15) attacks. We then design four new
leakage-abuse attacks that rely on much weaker assumptions.
Three of these attacks are volumetric in the sense that they
only exploit leakage related to document sizes. In particular, this
means that they work not only on SSE/STE-based ESAs but also
against ORAM-based solutions. We also introduce two volumetric
injection attacks which use adversarial ﬁle additions to recover
queries even from ORAM-based solutions. As far as we know,
these are the ﬁrst attacks of their kind.
We evaluated all our attacks empirically and considered many
experimental settings including different data collections, query
selectivities, known-data rates, query space size and composition.
From our experiments, we observed that the only setting that
resulted in reasonable recovery rates under practical assumptions
was the case of high-selectivity queries with a leakage proﬁle that
includes the response identity pattern (i.e., the identiﬁers of the
matching documents) and the volume pattern (i.e., the size of
the matching documents). All other attack scenarios either failed
or relied on unrealistic assumptions (e.g., very high known-data
rates). For this speciﬁc setting, we propose several suggestions and
countermeasures including the use of schemes like PBS (Kamara
et al, CRYPTO ’18), VLH/AVLH (Kamara and Moataz, Eurocrypt
’19), or the use of padding techniques like the ones recently
proposed by Bost and Fouque (Bost and Fouque, IACR ePrint
2017/1060).
I.
INTRODUCTION
The area of encrypted search is concerned with the design
and analysis of cryptographic techniques to search over en-
crypted data. There are many ways to design encrypted search
algorithms (ESA) including using fully-homomorphic encryp-
tion (FHE) [28], oblivious RAM (ORAM) [31], functional
(cid:63) : Work done in part while at Brown University.
Network and Distributed Systems Security (NDSS) Symposium 2020
23-26 February 2020, San Diego, CA, USA
ISBN 1-891562-61-4
https://dx.doi.org/10.14722/ndss.2020.23103
www.ndss-symposium.org
encryption [9], property-preserving encryption [2], [7], [8] and
searchable/structured symmetric encryption (SSE/STE) [69],
[19], [18]. All these approaches achieve different tradeoffs
between leakage, expressiveness and efﬁciency.
At a high level, a static ESA is composed of two al-
gorithms: a setup algorithm and a search algorithm. Setup
encrypts a data collection in such a way that it can later be
queried using the search algorithm. The most basic form of
search is single-keyword search which, given a keyword w,
returns the documents in the collection that contain w. If the
solution is dynamic, there is an additional update algorithm
to modify the encrypted data collection. In this work, we
will focus on SSE/STE- and ORAM-based ESAs, which we
sometimes refer to as structured ESAs and oblivious ESAs,
respectively.
is linear in the size of the document collection,
Leakage. While it is possible to search on encrypted
data with essentially no leakage with time and communication
that
this
is however not a viable approach for datasets of practical
interest. Because of this, all known ORAM-, STE- and PPE-
based ESAs leak some information. This leakage comes in
two forms: setup leakage, which is revealed at setup time by
the encrypted dataset, and query leakage, which is revealed at
query time by the encrypted dataset and the query operation.
To better understand the real-world impact of this leakage,
an important research direction in encrypted search has been
to design leakage attacks. This line of work was initiated by
Islam, Kuzu and Kantarcioglu in [38] in the context of SSE
and was expanded to PPE by Naveed, Kamara and Wright
[56] and to ORAM by Kellaris, Kollios, Nissim and O’Neill
[46]. Since then, several works have further explored leakage
attacks including [13], [75], [48], [33] in the SSE setting and
[13], [22], [34] in the PPE setting.
Leakage attacks. Leakage attacks come in different
forms depending on the leakage proﬁles they exploit, the ad-
versarial models in which they work, the information they re-
cover, the auxiliary information they need and the assumptions
they rely on. We can categorize attacks along the following
dimensions:
• adversarial model: snapshot attacks only require access
to the encrypted document collection; persistent attacks
require access to the encrypted data collection and to the
transcripts of the query operations.
• target: data-recovery attacks recover information about
the data collection whereas query-recovery attacks recover
data about queries;
• auxiliary data: sampled-data attacks require a sample from
a distribution that is close (e.g., in statistical distance) to
the distribution of the data collection; known-query attacks
require knowledge of a subset of the queries; known-
data attacks require knowledge of a subset of the data
collection. An important parameter for known-data attacks
is the known-data rate which is deﬁned as the fraction δ
of documents in the client’s data collection that are known
to the adversary.
• passive or active: passive attacks do not require the
adversary to choose any part of the client’s data; active,
or chosen-data attacks, require the adversary to choose
some of the data in the data collection.
In this work, we focus on the persistent model since it has
recently been shown that solutions with little to no leakage
can be achieved in the snapshot setting using both PPE [50]
and STE [3] (this doesn’t take into account possible systems-
level pitfalls as pointed out in [32]). We recall that sampled-
data attacks are commonly referred to as inference attacks, that
known-data attacks are commonly referred to as leakage abuse
attacks and that chosen-data attacks are commonly referred to
as injection attacks.
Leakage proﬁles. Of course, an important characteristic
of any leakage attack is what kind of leakage it exploits. For
example, the IKK attack exploits the co-occurrence pattern
which reveals, for every pair of queries, the number of times
they appear in the same document. The Count attack rely
on the co-occurrence pattern and the response length pattern;
the latter of which reveals, for every query, the number of
documents that contain it. The injection attacks of [75] exploit
the response identity (also known as the access pattern) which
reveals, for every query, the identiﬁers of the documents that
contain it. Note that the response identity reveals the response
length and the co-occurrence pattern so the IKK and Count
attack can apply to any construction that leaks the response
identity. An important class of leakage patterns for our pur-
poses will be what we call volumetric patterns. By this we
mean any leakage pattern that reveals the size of documents.
Here, we will focus speciﬁcally on the volume pattern which
reveals, for each query, the volumes of the documents that
contain it; and the total volume pattern which reveals, for each
query, the sum of the volumes of the documents that contain it.
All the patterns discussed above are common in the literature.
In particular, they are part of the leakage proﬁle of all standard
response-revealing multi-map encryption schemes [19], [18],
[42], [41], [17], [10], which are the encrypted structures that
underlie most single-keyword searchable symmetric encryption
schemes. Some of these leakage patterns (e.g., such as the
volume pattern and the total volume pattern) are also part of
the leakage proﬁle of ORAM-based ESAs.
Known-data attacks against structured ESAs. Known-
data attacks were introduced by Cash, Grubbs, Perry and
Ristenpart in [13]. In that work, they described several at-
tacks against both SSE/STE- and PPE-based ESAs. They also
introduced injection (or chosen-data) attacks against PPE-
based ESAs. Injection attacks were later demonstrated against
structured ESAs by Zhang, Katz and Papamanthou [75].
The IKK attack was ﬁrst described in [38] as an inference
attack that exploits the co-occurrence pattern. [38] reported
high recovery rates but the experiments conducted had several
methodological ﬂaws. The most salient ones were that: (1) they
were run on a small query space (of size 2500 out of a total
of 77000 after stemming and removing stop words); and (2)
the training and test data collections were not independent.
Motivated by this, Cash et al. re-evaluated the IKK attack
with independent testing and training data and found that IKK
could not recover any queries. IKK was then re-evaluated as
a known-data attack and it was found that it could achieve
reasonable recovery rates if it was given 95% or more of
the client’s data. Effectively, [13] showed that IKK failed as
an inference attack but worked as a known-data attack when
δ ≥ .95. [13] then introduced a new attack called the Count
attack. This attack relies on co-occurrence and response length
leakage and was shown to perform better than the IKK attack.
Recently, the ePrint version of [16] was updated to include
a new attack that performs better than the one originally
published in [13]. Throughout this work, we will refer to the
ﬁrst Count attack as Count v.1 and to the new attack as Count
v.2.
Discussion and overview of our contributions. The IKK
and Count attacks have received a lot of attention and are
commonly used to draw conclusions about various ESAs. As
an example, they are often cited as a reason to prefer oblivious
ESAs over structured ESAs [71], [72], [74], [52], [20], [64],
[27], [25], [29], [65], [58], [53], [51], [67], [66], [73], [26],
[5], [37]. The results in this work underscore that the study
of and, especially, the interpretation of known-data attacks is
more nuanced.
To address this, we present in Section III several new
known-data attacks that do not have these limitations and that
achieve higher recovery rates for much lower known-data rates.
What is perhaps surprising about our attacks is that they work
not only against structured ESAs but also against oblivious
ESAs which contradicts the conventional wisdom that ORAM-
based search is resistant to leakage-abuse attacks.
Another contribution of our work is that we demonstrate,
for the ﬁrst time, that injection attacks apply not only to PPE-
based ESAs [13] and structured ESAs [75] but also to oblivious
ESAs. In particular, we describe in Section IV two volumetric
injection attacks, which contradicts the conventional wisdom
that ORAM-based search is resistant to injection attacks.
We evaluated our attacks empirically and provide an
overview of our results in Section V. For a complete empirical
analysis we refer the reader to the full version of this work.
Speciﬁcally, we evaluate the attacks in a host of different
settings including different keyword selectivities, query space
compositions, query space sizes and datasets. This extensive
evaluation shows that the success rates of known-data attacks
is very sensitive to various parameters that were not considered
in previous work. This highlights the importance of common
but often implicit assumptions made in the leakage attack
literature.
Finally, in Section VII we propose several countermeasures
to mitigate all known-data attacks, including our own.
A. Theory vs. Practice of Known-Data Attacks
Here, we revisit the state-of-the art in known-data attacks
highlighting some of the practical limitations and assumptions
of the currently-known attacks.
2
Reliance on co-occurrence. Recall that all IKK, Count
v.1 and Count v.2 attacks all rely on the co-occurrence pattern.
This particular leakage pattern, however, can be hidden using
standard SSE/STE techniques. In fact, we describe a construc-
tion in Section II and, in more details, in Appendix A, OPQ,
that does not reveal the co-occurrence pattern. As far as we
know, this construction has not appeared in previous work and
may be of independent interest.1
High known-data rates. The experimental results in
[13] (cf. Figure 6) and [16] (cf. Figure 6) show that the IKK,
Count v.1 and Count v.2 attacks achieve non-trivial recovery
rates only with very high known-data rates: IKK needs to
know 70% of the data to recover 5% of the queries; Count
v.1 needs to know 80% of the data to recover 40% of the
queries (note that knowing even up to 75% of the data results
in a query recovery rate of 0%); and Count v.2 needs to know
75% of the data to recover 40% of the queries. Given how
high these known-data rates are, it is not clear whether these
attacks should be considered practical. An instructive question
to ask here is how exactly an adversary could, in practice, get
up to, say 75%, of a client’s data? Recall that in the encrypted
search setting the client encrypts its data and outsources it to
an untrusted server. In particular, this means the client deletes
the data from its system after setup which leaves the only
copy on the server and in encrypted form. In such a setting,
there are a few scenarios in which an adversary could recover
75% of the client’s data. One is that the client, for some
reason, chooses to encrypt public data which the adversary
later recovers. A second is that the client decides to release a
large percentage of its data (after downloading and decrypting
it from the server). A third is that the client queries its data and
over time caches enough of the results to amount to a large
percentage of the data. At this stage, a data breach occurs on
the client and the cached data is revealed to the adversary. The
ﬁrst two scenarios are relatively contrived and have more to
do with a misuse of the primitive: in such settings one should
use private information retrieval. The third scenario is perhaps
less contrived but caching 75% of one’s data locally seems to
defeat the purpose of outsourced storage. Indeed, if a client
is willing to store 75% of its data locally then they might as
well do search locally on the 75% and use encrypted search
only for the remaining 25%.
High- vs. low-selectivity keywords. An important con-
sideration when evaluating a query-recovery attack is how
exactly client queries are chosen. Most leakage attack papers
make implicit assumptions about this but the query distribu-
tion has a large impact on accuracy rates. For example, the
experiments in [13] assume the client queries high-selectivity
keywords, where selectivity refers to the number of documents
matching a particular keyword. It is not clear, however, if this
is realistic. In fact, we ran the IKK and Count attacks on low-
selectivity keywords over the Enron dataset and neither attack
worked; even when the adversary had a complete knowledge
of the client’s data. More precisely, the IKK and Count attacks
had recovery rate 0 even when δ = 1 for keyword selectivities