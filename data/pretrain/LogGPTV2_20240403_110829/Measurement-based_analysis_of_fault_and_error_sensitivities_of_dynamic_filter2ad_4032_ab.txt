of the 
the symbol tables 
kernel and modules with the old eip, the symbol name of 
the caller 
the bottom of the stack is reached. 
can be stored in the system stack 
are executed. 
in x86, the program counter 
the old eip of the caller 
(ebp) registers 
This is repeated 
ebp points to the old 
By searching 
is obtained. 
is obtained. 
by tracking 
(eip) and frame 
up to 30 times until 
is stored 
of the caller 
than 30). This caller 
Because 
address 
the call stack information. 
978-1-4244-7501-8/101$26.00 
©2010 IEEE 
432 
DSN 2010: Yim et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:06:54 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEEIIFIP International 
Conference 
on Dependable Systems & Networks (DSN) 
the caller 
to extract 
to the specified 
pair of allocator 
All allocation 
and free functions 
routines-a 
enabled 
instrumentation 
functions-are 
to find an object belonging 
When an instrumentation 
the allocated 
injection. 
the injector 
client 
virtual 
If the object 
fires, the breakpoint 
call, and the total call count. Also, the profiler 
are instrumented. 
The 
and free 
and 
signature 
object type. 
On a request 
completion), 
innermost 
keeps a set of variables 
from the user (e.g., 
on an 
memory regions. 
are stored in a 
application 
finds the specified object, 
log file. A kernel thread is used to periodically 
(e.g., 
second) 
executing 
variance 
3.3. Fault Injector 
The fault injector 
information 
program. 
information 
and Failure 
performs 
extracted 
store the profiled 
a benchmark 
every 
to a log file while 
This captures 
the 
Variable-
the source 
the valid entries 
(iii) Variable granularity tracking. 
by analyzing 
for fault 
is freed before the breakpoint 
is sent to the injector 
set by 
in the user space) is notified 
and the control 
(executing 
Reporter 
is realized 
of the event. 
of profiled 
is unset, 
over time. 
routine 
address 
address 
to track the sizes of allocated 
tracking 
granularity 
code of callers. 
internal  variables 
information 
the offset in a tracked 
memory object. 
The analysis 
of a target memory object. 
The extracted 
the data types of 
extracts 
is used to match the internal 
variable 
type to 
virtual 
target 
failure 
reporter 
basic mechanism 
collects 
the failure 
a fault injection 
using a 
The 
by the object tracker. 
information. 
While the 
is same as [6], three methods are 
added: 
The fault 
fault injection. 
software right 
to be injected) 
over the target 
a location 
the control 
state (i.e., 
is to 
(i) Memory-alignment-aware 
injector 
obtains 
before the target 
be accessed. 
The breakpoint 
location 
using the alignments 
hardware 
4 bytes). 
(e.g., 
This is done using a hardware 
breakpoint. 
is adjusted 
of memory accesses 
from the target 
in processor 
address 
variable­
by scanning 
implemented. 
For memory regions 
tracking 
identifier 
using the slab allocator, 
is easily 
In this case, the 
is the name of a slab cache and an 
granularity 
symbolic 
in a specified 
slab 
object index. All active slab objects 
of the 
the data structure 
cache are identified 
object. 
slab cache, and the index is used to select 
The offset inside 
type because 
the object data type for a slab cache is fixed. The source 
the memory alignment 
code analysis 
compiler) 
is used to match the offset with the variable 
type. 
3.2. Profiler 
the object tells the variable 
(considering 
a specific 
by 
Three memory-profiling 
accurate 
support 
sizes of memory regions: 
measurement 
techniques 
are developed 
of error sensitivity 
to 
and the 
(i) Activation 
and read/write 
ratios. 
of a target 
To measure the 
state, 
ratios 
state's 
and read/write 
we capture 
We use a 
and when it  is triggered, 
read and write operations. 
breakpoint, 
the 
to by 
byte code (up to 8 bytes in x86) pointed 
is sent to the control 
server. 
activation 
all the target 
read/write 
instruction 
the current program counter 
The control 
and analyzes 
memory operation (i.e., 
read/write). 
the instruction 
byte code 
the type of 
server disassembles 
to determine 
the operands 
physical 
(ii) Searching 
pages from the entire 
a kernel feature 
memory. 
that scans the entire 
We implement 
physical 
memory and finds all memory  pages 
where a 
page is filled by the same value. Both the kernel ELF 
spaces maintained 
by the 
image memory and the address 
The scanned areas are the 
linked list are scanned. 
kclist 
same as the areas scanned 
on the 
(jproC/kcore). 
memory usage pattern because it does not copy the 
scanned 
Our method reduces 
by the kernel core dump module 
the interference 
memory to another 
memory location 
free behavior. 
the number of all memory allocation 
(iii) Memory allocation/
stores 
for all monitored 
used to store these event counts. 
memory stores the caller signature, 
signatures. 
caller 
and free events 
memory area is 
A static 
Each entry in the static 
or a file. 
The pro filer 
a parameter 
of the 
(ii) Emulating 
a soft error in memory. Before injecting 
process 
virtual 
by a breakpoint) 
page of the 
If 
after the corruption. 
the page table entry of the target 
a fault, 
current (preempted 
is checked. 
the dirty bit is not set, then the dirty bit of the page table 
This emulates 
entry is cleared 
the 
exact behavior 
the value in the 
dirty bit can change memory management 
behavior 
invoke memory swapping).  Injecting 
emulates 
ECC uncorrectable errors. 
(iii) Recovery from file system corruption. 
(e.g., 
multiple-bit 
errors 
of a real soft error because 
When a 
node resets 
node does not reboot 
cause is file system 
by a file system 
checker 
after the reset, 
node. If the injector 
the most likely 
that could not be recovered 
fsck). This happens 
fault causes a kernel crash or hang, the control 
the injector 
properly 
corruption 
integrity 
(e.g., 
error is propagated 
data. In this scenario, 
of the injector 
node using the pre-boot 
execution 
of remote installation 
Failure 
implies 
injector 
node. 
to file system metadata 
can be installed 
remotely 
programs 
from the control 
environment 
a hard error in the 
(PXE). 
the as and all necessary 
if the injected 
or critical 
file 
4. Software Recoverable 
Our measurements 
indicate 
Memory Sub-Regions 
that a large percentage 
of 
memory errors (70% and 10-60% of static 
memory, respectively) 
software techniques, 
storage. 
driven protection 
state that is not recoverable 
e.g., reloading 
Based on this, we suggest 
principle 
can be recovered 
the recover 
protects 
ability­
system 
that selectively 
by software. 
in this paper are conducted 
and dynamic 
by simple 
data from permanent 
on 
Measurements 
consisting 
a testbed 
and 1GB of memory running 
reported 
of a PC with a 3.0GHz x86 processor 
a Linux kernel v2.6. To 
978-1-4244-7501-8/10/$26.00 
©201O IEEE 
433 
DSN 2010: Yim et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:06:54 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEE/IFIP International 
Conference 
on Dependable Systems & Networks (DSN) 
real workloads, 
a stress 
test suite ofLinux (L TP) is 
Table 1. Volume of static kernel segments (Unit: MB). 
emulate 
used [6]. 
4.1. Static 
Memory 
Table I gives the size of all static 
kernel segments. 
read-only 
the codes of 
strings, 
data memory (e.g., 
read-writable 
rodata stands for initialized 
bitmaps, 
and the system call table), 
data 
Here, text refers to kernel code excluding 
kernel modules, 
data (e.g., 
denotes 
global data), and bss corresponds 
to zero­
initialized 
initialized 
is 
data. The total size of static 
close to 3MB. This size neither  depends 
configuration 
and it is determined 
by the 
compile-time 
features, 
nor workloads, 
kernel configuration 
(e.g., 
modules). 
and statically 
linked 
kernel segments 
on hardware 
symbol tables, 
kernel version, 
0.1 
When an uncorrectable 
The text and rodata segments 
if the 
are stored on a disk. These two segments 
form 
are recoverable 
of shutting 
down the 
of the fault can be analyzed. 
If the 
the parts of the boot 
from a disk) to remove 
the location 
kernel segments. 
by MMU, instead 
replicas 
70.3% of static 
error is detected 
system, 
fault is in one of these two segments, 
kernel image can be reloaded 
the error. 
these segments 
memory protection. 
4.2. Dynamic Memory 
(e.g., 
Note that computation 
errors 
cannot propagate 
by MMU-based 
to 
if writes are prohibited 
larger 
phases. 
workload 
on the executed 
than that of static 
248MB) is about 
memory. 
the size of dynamic memory space is 
memory size because 
Figure 2 shows the sizes of dynamic memory regions 
The dynamic memory size varies greatly 
On average, 
in a log-scale. 
depending 
the total size of dynamic memory (e.g., 
two orders of magnitude 
In high-end 
systems, 
close to the physical 
threads, 
the target 
cost. On average, 
user, slab cache, and memory-mapped 
55.7%,23.5%,6.8%,5.5%, and 5.1%, respectively, 
entire dynamic memory space. Swap cache, vmalloc, 
kmalloc, 
portions 
and page table regions 
«1.2% each). 
memory is optimized 
for 
and memory 
performance, 
page cache, buffer cache, anonymous 
and the size of physical 
occupy small memory 
it runs multiple 
workloads, 
expected 
regions 
of the 
constitute 
Among dynamic memory regions, 
we identify 
where faults can be recovered 
sub-regions 
software techniques. 
on a storage 
replicated 
device or data initialized 
time but not modified during the computation. 
allocation 
keep data that are 
at 
These regions 
three 
by simple 
(i) Re-computable 
data. An error in a page where all 
an identical 
value can be recovered 
words contain 
the known value. Figure 3 shows the portion 
rewriting 
physical 
memory space containing 
with the same value. Measurements 
while executing 
minutes 
form 10-60% of physical 
of memory space contains 
memory pages  filled 
are taken every three 
pages 
LTP. These re-computable 
memory space. On average, 
38% 
pages with a zero values written 
by 
of 
o  600 1200 1800 2400 3000 3600 4200 4800 
Time(s) 
Figure 2. Dynamic memory space broken down by 
memory region type. 
in each location 
other values constitute 
dominant 
(e.g., 
Pages filled by 
less than 1 % of used memory. The 
over the period of 5,000s. 
value patterns 
change as the program executes 
30303030(16) in Figure 3). 
Interestingly, 
interval, 
in Figure 2 and Figure 
and 
of this can be seen 
Evidence 
of data presented 
by the application. 
analysis 
Figure 2 shows a memory overflow that 
into the measurement 
Figure 3 indicates 
we found that not all zero-filled 
pages 
are unused memory; most of these pages are allocated 
initialize 
in closer 
3. Specifically, 
occurs around 17-20 minutes 
For the same time 
in the number of zero-filled 
application 
(see the time interval 
number of zero-filled 
second piece of evidence 
indicates 
are allocated 
allocate 
implies that vast majority 
initialized 
by the user programs 
pages, meaning the 
memory. As the memory is freed 
20-24 minutes in Figure 2), the 
pages decreases 
that can 
. This 
page, e.g., getJeroedyagesO
pages are 
of zero-filled 
that allocated 
that only 10.9MB of zero-filled 
using three Linux API functions 
which 
memory pages 
comes from the profiler, 
is allocating 