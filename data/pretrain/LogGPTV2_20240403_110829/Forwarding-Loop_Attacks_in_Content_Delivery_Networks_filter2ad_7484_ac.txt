≈ 0
≈ 0
≈ 0
≈ 0
≈ 0
N/A
≈ 0
≈ 5
≈ 0
≈ 0
per CDN node
per data center
per CDN node
per CDN node
Google Public DNS
Google Public DNS
Google Public DNS
Google Public DNS
per data center
per data center
per CDN node
N/A
Google Public DNS
per CDN node
per CDN node
per data center
Request Streaming Response Streaming







Akamai
Alibaba
Azure (China)
Baidu
CDN77
CDNlion
CDN.net
CDNsun
CloudFlare
CloudFront
Fastly
Incapsula
KeyCDN
Level3
MaxCDN
Tencent
















connection, the close event will further propagate to the next
node, and so forth. In a forwarding loop, abort forwarding
propagates faster than request forwarding, because a client-
side connection close event occurs immediately after receiving
a single FIN packet, while receiving and forwarding a request
requires many more packets. If all CDN nodes involved in
a forwarding loop adopt abort forwarding, then the reaction
triggered by the timeout will eventually catch up with the
request forwarding to stop the loop. In this way, the life-
cycle of the forwarding loop is bounded by the minimum
timeout of the nodes plus the time for the abort event to
catch up to the forwarding. However, if one node does not
implement abort forwarding, the abort propagation will stop
at that node; consequently, the request continues to circulate
among all nodes in the loop.
Figure 3 illustrates how a timeout event is propagated to
stop a forwarding loop if all nodes in the loop implement abort
forwarding; and, in comparison, how a timeout event is locally
limited if not all nodes support abort forwarding.
As shown in Table V, numerous CDNs do not adopt abort
forwarding when a client-side connection closes.
DNS resolution behaviors. Per Table II, 15 out of 16 mea-
sured CDNs (except Incapsula) support using domain names
as forwarding destinations. For these CDNs, an attacker can
change the DNS records of the forwarding domains to control
an ongoing forwarding loop dynamically, e.g., switching the
loop from one set of IP addresses to another set of IP addresses.
Our measurements show that, in general, CDNs do not
share DNS results (via common caches or resolvers) across
their servers or data centers. They also respect the time-to-
live (TTL) value in DNS responses. Per Table VI, of the
15 CDNs supporting the use of domain names as forwarding
destinations, 6 (Akamai, Azure China, Baidu, Fastly, Level3
and MaxCDN) deploy independent DNS resolvers on each
node. Alibaba, CloudFlare, CloudFront and Tencent have one
or more DNS resolvers shared per data center. The others use
Google Public DNS, which deploys different instances across
geographical locations using anycast. Among the 15 CDNs we
could measure, Akamai, Alibaba, and Baidu’s DNS resolvers
set a minimum TTL of 60 seconds; Level3’s resolver can set a
minimum TTL of 5 sec; the other CDNs appear to respect TTL
values in DNS responses even when set to zero (no caching).
This latter behavior allows an attacker to dynamically reroute
an ongoing loop in a ﬁne-grained and timely manner.
We note that self-loops, intra-CDN loops, and inter-CDN
loops do not require dynamic rerouting via DNS, but its avail-
ability provides additional ﬂexibility for attackers to create and
control forwarding loops. For dam-ﬂooding attacks, this feature
is required in the ﬂooding phase to change the forwarding
destination (Per Section III-E).
Non-streaming versus streaming. Attackers expect that
forwarding loops should not only last indeﬁnitely, but also
propagate data as quickly as possible in order to consume
maximal resources. One important factor related to the speed of
a forwarding loop is whether a CDN supports HTTP stream-
ing. HTTP streaming is a feature of HTTP 1.1 enabled by
announcing a Transfer-Encoding: chunked header instead of
the Content-Length header. It provides a persistent connection
to transmit dynamically generated content on demand without
knowing the content length in advance. For forwarding loops,
a streaming-compatible CDN node will start relaying a request
or response to its next hop immediately after receiving its
initial chunk, rather than waiting for the complete content.
This makes the loop circulate faster. In order to initiate a
forwarding loop with HTTP streaming, all involved nodes must
support this feature. Our measurements show that while 9 out
of the 16 CDNs do not accept HTTP streaming in requests,
6
all support streaming responses (Table VII).
Figure 4 presents how non-streaming and streaming loops
generate different trafﬁc patterns. We presume the path be-
tween two nodes A and B is symmetric with network latency
l, and the request (or response) circling around A and B
requires time t to fully transmit. Assuming the data is always
transmitted at full bandwidth, both the non-streaming and the
streaming loops generate square waves along (each direction
of) the path between A and B, with the same pulse height
representing the full bandwidth, and the same pulse width
reﬂecting t. Yet, the periods of the two waves (i.e., the round-
trip times of the two loops) are different. While the square
wave generated by the non-streaming loop has a period of
2 × (t + l), the square wave caused by the streaming loop has
a period of 2 × l.
As the streaming loop runs faster, it keeps the path busier
(in both directions). If the data is large enough so that t ≥ 2×l,
then the neighboring trafﬁc pulses caused by the streaming
loop overlap, which means that the path is fully occupied.
In practice, overlaps of two or more rounds of a streaming
loop could also result in higher trafﬁc peaks than that of a
non-streaming loop, because the data transmission between
two successive nodes might not be able to utilize all available
bandwidth due to factors such as TCP’s congestion control.
We conducted a local experiment to verify our analysis. We
set up two Nginx 1.8.0 servers, both connected to the same
Ethernet. To simulate an Internet environment, we used the
tc Trafﬁc Control tool to add 125 ms of network latency for
each server. In this setting, the full bandwidth is 100Mb/s and
the network latency is 250ms. We ﬁrst sent a single 500KB
POST request to create a streaming loop between the two
servers by conﬁguring their Nginx instances to disable request
body buffering. We then repeated the procedure with a non-
streaming loop setting.
Figure 5 shows the trafﬁc in one direction generated via
non-streaming and streaming loops. As expected, the non-
streaming loop generates a periodic wave; each distinct pulse
represents one round of the loop; the peaks near 179KB/s.
In comparison, multiple rounds of the streaming loop overlap
because the time needed to transmit the request is much higher
than the network latency (with the effect of TCP slow start),
resulting in a curve without distinct pulses and much higher
peaks (about 443KB/s).
B. Self-Loop
Self-loops occur when requests are forwarded circularly
within a single CDN node. The attack is simple to mount:
the attacker only needs to specify the forwarding destination
of their domain as the loopback address (i.e., 127.0.0.1), or
the IP address of a given CDN node. Yet self-loops can be
particularly damaging, because the circulation happens without
network latency, potentially consuming resources very quickly.
We found that 13 out of 16 CDNs’ web interfaces accept
the loopback address or the IP address of their nodes as
forwarding destinations. Baidu and CloudFlare however do not
allow such forwarding destinations. CloudFront further rejects
specifying forwarding destinations using any raw IP address or
“localhost”. It is worth noting that merely enforcing a blacklist
Fig. 4. The difference between non-streaming and streaming loops.
Fig. 5.
versus a streaming loop.
Trafﬁc generated by a single request (500KB) in a non-streaming
of loopback and internal IP addresses at the web interface does
not sufﬁce to defend against self-loops. For CDNs supporting
domain names as forwarding destination, the attacker can use
this feature to bypass blacklists implemented at the web in-
terface. For example, CloudFlare allows specifying a CNAME
domain for the forwarding destination, enabling an attacker
to later change the resolution to the loopback address or a
CloudFlare IP address.
We also tested three popular open-source reverse proxies
that are commonly used by commercial CDNs: Squid, Nginx,
and Varnish. Both Nginx and Varnish by default allow self-
loops, and we also could not ﬁnd any option or popular
extension for loop-prevention. Squid prevents loops by adding
a Via header to forwarded requests and rejecting incoming
requests that contain the same hostname in its Via header.
This defense is similar with those of the 9 loop-aware CDNs
presented in Table III.
Testing the feasibility of self-loop attacks on commercial
CDNs requires care to avoid potentially inducing considerable
damage. The 9 loop-aware CDNs are not vulnerable to this
attack, while the other 7 CDNs are likely vulnerable. Among
the 7 CDNs, 5 (Azure China, CDN77, CDNlion, CDN.net,
CDNsun) have size-increasing headers, per Table IV. For these
CDNs, we found a technique to infer some further information.
We ﬁrst send a request to one CDN node with a size
exceeding its maximum value, and record the corresponding
response (e.g., 400 Bad Request—Request Header Or
7
BAABAAtlNon-streaming LoopStreaming Looptl0102030405060Seconds050100150200250300350400450KBytesstreamingnon-streamingCookie Too Large). Next, we send another self-loop request
to the same node but slightly smaller (200 bytes less) than
the size limit. Doing so ensures that if the CDN is vulnerable
to self-loops, the crafted request can at most only loop a few
times before reaching the header size limitation. If for both
requests we observe the same response indicating an excessive
request size, we can infer that the CDN is vulnerable to self-
loop attacks. Otherwise, we conclude that the CDN prohibits
request forwarding to the loopback or self address. Using this
technique to test the 5 CDNs, we ﬁnd only Azure (China) is
vulnerable to self-loop attacks.
The remaining two CDNs (KeyCDN and MaxCDN) are
still likely vulnerable to self-loop attacks.
Experiments. We conducted two local experiments using
a Linux machine running an Nginx server to understand the
potential consequences of self-loops. We ﬁrst tested with the
default conﬁguration of Nginx, ﬁnding that request-forwarding
to a loopback address circulated 511 times in ≈ 0.1 seconds
before returning the error response 400 Request Header Or
Cookie Too Large. By default Nginx limits the size of a single
header to not exceed 8KB. When forwarding a request, Nginx
appends its address in a X-Forwarded-For header, causing
the header size to increase. We then removed the header size
limitation and conducted the experiment again. This time the
self-loop ran 28,231 times in 5 seconds, ultimately returning
a 504 error because the loop had exhausted all of the source
ports available for loopback connections. (The Linux kernel’s
default port range for a user-space application spans 32,768–
61,000.)
As presented in Table III and Table IV, Azure (China) is
vulnerable to self-loop attacks and increases the header size
when forwarding a request; therefore, it is subject to the case
demonstrated in the ﬁrst experiment. Self-loops on KeyCDN
and MaxCDN, which do not increase the header size per
Table IV, likely behave like the second experiment; that is, they
could exhaust all source ports of localhost before a timeout
occurs (60 seconds, per Table V).
C. Intra-CDN Loops
Attackers can also create forwarding loops across multiple
nodes within a single CDN. As mentioned above, 15 CDNs
(all except Incapsula) allow customers to use domain names
as forwarding destinations. When forwarding a request to a
domain, 10 of the 15 CDNs (except Azure China, Baidu,
CloudFlare, Fastly and Tencent) change the Host header
to reﬂect the forwarding domain. For each of these CDNs,
attackers can create forwarding loops across multiple nodes by
chaining multiple attacking accounts using multiple forwarding
domains. For example, they can set up account A1 forwarding
domain D1 to domain D2, account A2 forwarding domain D2
to domain D3, and so forth. Account An closes the loop by
forwarding domain Dn to domain D1. This creates a loop
across n domains, which can further be mapped to different
CDN nodes.
Attackers can also create loops across multiple CDN nodes
by dynamically changing forwarding destinations using DNS.
As shown in Table VI, for the 15 CDNs supporting domain
names for forwarding, none of these CDNs share a global DNS
cache. Thus, different CDN nodes will independently resolve
an attacker’s forwarding domain. Attackers can create loops
between two nodes A and B of the same CDN by controlling
the DNS resolution of their forwarding domains so that queries
from A are provided with the IP address B, and vice versa.
Depending on how a CDN manages its DNS resolutions, the
attacker might need to select A and B from different data
centers or regions.
That said, we note that this attack does not affect the
9 CDNs that employ loop-detection headers.
Experiments. We conducted a proof-of-concept experi-
ment on MaxCDN. We used two MaxCDN nodes plus one
VPS (Virtual Private Server) under our control, employing the
second strategy described above to form a three-node loop.
The VPS acts as a transparent HTTP proxy to collect data
and minimize harm. We also added a 0.6 seconds delay at our
HTTP proxy to slow down the loop speed to ensure that the
experiment did not cause signiﬁcant real-world damage. We
ran the experiment for 60 seconds and received 59 requests at
our VPS for only one request we sent out.
D. Inter-CDN Loops
If attackers extend the multiple-node forwarding loop to
span multiple CDNs, they can evade the protection of loop-
detection headers to attack all 16 CDNs. This approach works
by chaining loop-aware CDNs with other CDNs that disrupt
the loop-detection headers.
As presented in Section III-A and Table III, Fastly
and MaxCDN provide customer-deﬁned header ﬁltering. The
header ﬁltering feature of Fastly does not facilitate evading
loop detection because Fastly adds a non-ﬁlterable loop detec-
tion header. However, including MaxCDN in a chain enables
disrupting all loop-detection headers because it provides un-
limited header ﬁltering. I.e., attackers only need to add one
MaxCDN node in their forwarding loops to attack even loop-
aware CDNs.
The behavior of resetting headers also enables evasions
of loop detection. As shown in Table III, CDN77, CDNlion,
CDN.net and CDNsun reset Via, a standard header used by
Alibaba, CloudFront and Level3 to detect forwarding loops.
Therefore, attackers can mount a forwarding loop between any
one node from the former 4 CDNs and nodes from the latter
3 CDNs.
Another use of header ﬁltering and header resetting is
to counter the effect of increasing header size so that the
life-cycle of a forwarding loop escapes the bound normally
imposed by header-size limitations. For example, we can form