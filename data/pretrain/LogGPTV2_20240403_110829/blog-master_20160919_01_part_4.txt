  also be set by the user.
writeback_running
  If off, writeback of dirty data will not take place at all. Dirty data will
  still be added to the cache until it is mostly full; only meant for
  benchmarking. Defaults to on.
```
2\. SYSFS - BACKING DEVICE STATS:  
```
There are directories with these numbers for a running total, as well as
versions that decay over the past day, hour and 5 minutes; they're also
aggregated in the cache set directory as well.
bypassed
  Amount of IO (both reads and writes) that has bypassed the cache
cache_hits
cache_misses
cache_hit_ratio
  Hits and misses are counted per individual IO as bcache sees them; a
  partial hit is counted as a miss.
cache_bypass_hits
cache_bypass_misses
  Hits and misses for IO that is intended to skip the cache are still counted,
  but broken out here.
cache_miss_collisions
  Counts instances where data was going to be inserted into the cache from a
  cache miss, but raced with a write and data was already present (usually 0
  since the synchronization for cache misses was rewritten)
cache_readaheads
  Count of times readahead occurred.
```
3\. SYSFS - CACHE SET:  
```
Available at /sys/fs/bcache/
average_key_size
  Average data per key in the btree.
bdev
  Symlink to each of the attached backing devices.
block_size
  Block size of the cache devices.
btree_cache_size
  Amount of memory currently used by the btree cache
bucket_size
  Size of buckets
cache
  Symlink to each of the cache devices comprising this cache set.
cache_available_percent
  Percentage of cache device which doesn't contain dirty data, and could
  potentially be used for writeback.  This doesn't mean this space isn't used
  for clean cached data; the unused statistic (in priority_stats) is typically
  much lower.
clear_stats
  Clears the statistics associated with this cache
dirty_data
  Amount of dirty data is in the cache (updated when garbage collection runs).
flash_vol_create
  Echoing a size to this file (in human readable units, k/M/G) creates a thinly
  provisioned volume backed by the cache set.
io_error_halflife
io_error_limit
  These determines how many errors we accept before disabling the cache.
  Each error is decayed by the half life (in # ios).  If the decaying count
  reaches io_error_limit dirty data is written out and the cache is disabled.
journal_delay_ms
  Journal writes will delay for up to this many milliseconds, unless a cache
  flush happens sooner. Defaults to 100.
root_usage_percent
  Percentage of the root btree node in use.  If this gets too high the node
  will split, increasing the tree depth.
stop
  Write to this file to shut down the cache set - waits until all attached
  backing devices have been shut down.
tree_depth
  Depth of the btree (A single node btree has depth 0).
unregister
  Detaches all backing devices and closes the cache devices; if dirty data is
  present it will disable writeback caching and wait for it to be flushed.
```
4\. SYSFS - CACHE SET INTERNAL:  
```
This directory also exposes timings for a number of internal operations, with
separate files for average duration, average frequency, last occurrence and max
duration: garbage collection, btree read, btree node sorts and btree splits.
active_journal_entries
  Number of journal entries that are newer than the index.
btree_nodes
  Total nodes in the btree.
btree_used_percent
  Average fraction of btree in use.
bset_tree_stats
  Statistics about the auxiliary search trees
btree_cache_max_chain
  Longest chain in the btree node cache's hash table
cache_read_races
  Counts instances where while data was being read from the cache, the bucket
  was reused and invalidated - i.e. where the pointer was stale after the read
  completed. When this occurs the data is reread from the backing device.
trigger_gc
  Writing to this file forces garbage collection to run.
```
5\. SYSFS - CACHE DEVICE:  
```
Available at /sys/block//bcache
block_size
  Minimum granularity of writes - should match hardware sector size.
btree_written
  Sum of all btree writes, in (kilo/mega/giga) bytes
bucket_size
  Size of buckets
cache_replacement_policy
  One of either lru, fifo or random.
discard
  Boolean; if on a discard/TRIM will be issued to each bucket before it is
  reused. Defaults to off, since SATA TRIM is an unqueued command (and thus
  slow).
freelist_percent
  Size of the freelist as a percentage of nbuckets. Can be written to to
  increase the number of buckets kept on the freelist, which lets you
  artificially reduce the size of the cache at runtime. Mostly for testing
  purposes (i.e. testing how different size caches affect your hit rate), but
  since buckets are discarded when they move on to the freelist will also make
  the SSD's garbage collection easier by effectively giving it more reserved
  space.
io_errors
  Number of errors that have occurred, decayed by io_error_halflife.
metadata_written
  Sum of all non data writes (btree writes and all other metadata).
nbuckets
  Total buckets in this cache
priority_stats
  Statistics about how recently data in the cache has been accessed.
  This can reveal your working set size.  Unused is the percentage of
  the cache that doesn't contain any data.  Metadata is bcache's
  metadata overhead.  Average is the average priority of cache buckets.
  Next is a list of quantiles with the priority threshold of each.
written
  Sum of all data that has been written to the cache; comparison with
  btree_written gives the amount of write inflation in bcache.
```
## 十一、参考
http://www.sysnote.org/2014/06/20/bcache-analysis/  
http://www.sysnote.org/2014/05/29/bcache-use/    
http://blog.csdn.net/liangchen0322/article/details/50322635  
https://wiki.archlinux.org/index.php/Bcache  
https://github.com/axboe/fio  
http://elf8848.iteye.com/blog/2168876  
http://www.atatech.org/articles/62373  
https://www.kernel.org/doc/Documentation/bcache.txt  
http://raid.wiki.kernel.org/  
http://wushank.blog.51cto.com/3489095/1114437  
http://zackreed.me/raid50-mdadm/  
https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Logical_Volume_Manager_Administration/raid_volumes.html  
https://sourceware.org/lvm2/  
https://linux.die.net/man/1/fio  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")