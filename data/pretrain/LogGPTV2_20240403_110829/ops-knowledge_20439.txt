User: 请解答这个和日志有关的问题Simple-to-implement ad-hoc password validation scheme I'm writing a level for a game in which the player has an advantage if they know a password.  I want it to be infeasible to find the password from looking at the level's source code.

The problem is that the language's levels are written in an ad-hoc scripting language without any crypto libraries, so I have to implement everything myself.

Also, inputting passwords within the game is a little awkward, so I'd like the password to be no larger than a random 64-bit integer, which should provide enough entropy to avoid a brute-force attack.

One possibility I've considered is to store a large semiprime and have the password be one of its factors.  Validation is very easy to implement, but semiprimes need to have factors much larger than 64 bits to be secure.  I've considered storing the first 448 bits of a 512-bit factor and have the password be the remaining 64 bits, but I have no idea if this is secure.

Another possibility is to implement SHA-256 and store the password's hash.  This would of course be much harder to implement.

So my questions are:


If a 1024-bit semiprime is stored along with the first 448 bits of one of its factors, can the remaining 64 bits of that factor be feasibly found?
Is there another easy-to-implement but hard-to-crack password validation scheme I could use?

Assistant: The problem with the method that you have suggested is that it is basically a partial-key exposure of RSA. You are exposing some bits of a factor of a semiprime. Dan Boneh's survey on RSA attacks lists a theorem from Coppersmith that states that if the n/4 least significant or most significant bits of a factor of N are known, then N can be factored efficiently. Since you want to leak way more than n/4, I think your method would be susceptible to that attack. 

The good news is, Boneh gives some insight into something that might work:


  It is interesting that discrete log-based cryptosystems, such as the ElGamal public key system, do not seem susceptible to partial key exposure. Indeed, if g^x mod p and a constant fraction of the bits of x are given, there is no known polynomial-time algorithm to compute the rest of x.


So, you could pick some random x, a large prime (1024 bits) p, and a generator g (in practice I'd use some standard NIST values for P and g). Compute g^x mod p, store that in your software. Store some number of bits of x in your program. The user must supply the remaining bits of x. Call their bits plus the stored bits x'. You compute g^x' mod p and see if that matches with what you had stored.

I believe that the statement from Boneh has not changed since it was published. That maybe something you want to ask on Crypto.SE, along with recommendations of how many bits should be left out of the source code.