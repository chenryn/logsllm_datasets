title:I Do Not Know What You Visited Last Summer: Protecting users from
stateful third-party web tracking with TrackingFree browser
author:Xiang Pan and
Yinzhi Cao and
Yan Chen
I Do Not Know What You Visited Last Summer:
Protecting Users from Third-party Web Tracking
with TrackingFree Browser
Xiang Pan
Northwestern University
PI:EMAIL
Yinzhi Cao
Columbia University
PI:EMAIL
Yan Chen
Northwestern University
PI:EMAIL
Abstract—Stateful third-party web tracking has drawn the
attention of public media given its popularity among top Alexa
web sites. A tracking server can associate a unique identiﬁer
from the client side with the private information contained in the
referer header of the request to the tracking server, thus recording
the client’s behavior. Faced with the signiﬁcant problem, existing
works either disable setting tracking identiﬁers or blacklist third-
party requests to certain servers. However, neither of them can
completely block stateful web tracking.
In this paper, we propose TrackingFree, the ﬁrst anti-tracking
browser by mitigating unique identiﬁers. Instead of disabling
those unique identiﬁers, we isolate them into different browser
principals so that the identiﬁers still exist but are not unique
among different web sites. By doing this, we fundamentally cut off
the tracking chain for third-party web tracking. Our evaluation
shows that TrackingFree can invalidate all the 647 trackers found
in Alexa Top 500 web sites, and we formally veriﬁed that in
TrackingFree browser, a single tracker can at most correlate user’s
activities on three web sites by Alloy.
I.
INTRODUCTION
Stateful third-party web tracking, the practice by which third-
party web sites collect private information about web users, has
been adopted by more than 90% of Alexa Top 500 web sites [34].
To track a web user, a third-party tracking1 site ﬁrst needs to
identify the user by a unique string stored in client-side state.
Then, the tracking site associates the identiﬁer of the user with
the private information, such as ﬁrst-party web site domain name,
contained in the referer header of the third-party request.
Faced with the signiﬁcance of third-party tracking in the
wild, researchers have proposed solutions targeting the two
steps of third-party tracking: mitigating the unique identiﬁer like
disabling third-party cookies, or cutting off requests with private
information like blacklisting known tracking servers. However,
1In this paper, unless otherwise stated, third-party tracking refers to stateful
third-party tracking.
Permission to freely reproduce all or part of this paper for noncommercial
purposes is granted provided that copies bear this notice and the full citation
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited
without the prior written consent of the Internet Society, the ﬁrst-named author
(for reproduction of an entire paper only), and the author’s employer if the
paper was prepared within the scope of employment.
NDSS ’15, 8-11 February 2015, San Diego, CA, USA
Copyright 2015 Internet Society, ISBN 1-891562-38-X
http://dx.doi.org/10.14722/ndss.2015.23163
neither of the approaches can completely protect users from
third-party tracking: in addition to browser cookies, a tracker
can store user’s unique identiﬁer into many other places on
client-side state, such as Flash ﬁles [4] [26] [17] and browser
caches [26] [4] [17]; meanwhile, blacklist tools highly depend
on all the records in the database and a tracking company can
always adopt new domains to track users.
To address the shortcomings of existing anti-tracking ap-
proaches, a third-party tracking defense system should achieve
the following goals:
• Complete blocking. The system can completely block all
existing stateful third-party tracking techniques, such as those
tracked by browser cookies, caches, HTML5 localStorage and
Flash ﬁles.
• High function preservation. While blocking third-party
tracking, the system should be compatible to existing web
sites and web services.
• Low performance overhead. The system should incur afford-
able overhead compared with that of normal browsing.
In this paper, we propose TrackingFree, the ﬁrst anti-tracking
browser that can completely protect users from stateful third-
party tracking practice. Instead of disabling places that store
third-party unique identiﬁers, such as browser cookies and ﬂash
ﬁles, TrackingFree automatically partitions client-side state into
multiple isolation units (a.k.a., browser principals) so that the
identiﬁers still exist but are not unique any more. Therefore, third-
party tracking web sites cannot correlate a user’s requests sent
from different principals with those identiﬁers. As a comparison,
all existing multi-principal browsers [5], [8], [10], [15], [28],
[38] aim to protect users from memory attacks and cannot defend
against tracking practices. To summarize, we make the following
contributions:
• Anti-tracking Content Allocation Mechanism. To obtain
the completeness of anti-tracking capability, TrackingFree
partitions client-side state into different browser principals
through a novel content allocation mechanism. TrackingFree
ﬁrst allocates initial server-side contents based on the regis-
tered domain names, and then allocates derivative server-side
contents, such as user-navigated windows/frames and pop-up
windows, based on a dynamically generated in-degree-bounded
graph with its nodes as browser principals.
• Privacy-preserving Communication. TrackingFree is the
ﬁrst multi-principal browser with isolated client-side state
that enables communication among different principals. The
on the kernel, has isolated persistent storage so the third-party
contents in different principals cannot share the same identiﬁers.
We adopt proﬁle based isolation mechanism [9] [31] because
of its completeness in isolating client-side state and minimum
overhead. Proﬁle will also isolate user preferences, so we propose
preference conﬁgure to synchronize all user-initiated preferences
among all principals. See Section III-D for details.
In addition to isolation mechanism, another key factor for
TrackingFree is content allocation mechanism. In TrackingFree,
the principal manager handles how to allocate contents from
the server into different browser principals. Speciﬁcally, it
dynamically determines how to put different frames into different
principals based on user activities, frame properties and principal
organization. Principal organization is maintained by principal
backend as a directed graph with maximum in-degree set as two.
We claim that TrackingFree’s content allocation mechanism can
strike a good balance between privacy and compatibility. We
will discuss it in details in Section III-B.
Principal communication also plays an important role for
browser’s privacy and compatibility. They can be classiﬁed
as two categories: explicit communication (e.g., postMessage)
and implicit communication (e.g., history information sharing).
In TrackingFree, message policy enforcer and public history
manager handle all the principal communication: the former
restricts the range of explicit communication for privacy-
preserving purpose and the latter proposes a secure history
sharing channel. We will discuss principal communication in
Section III-C.
TrackingFree also gives user the ﬂexibility of controlling the
balance between anti-tracking capability and user experience.
Speciﬁcally, the two components of domain data manager can
decrease the number of principals and share speciﬁed domains’
sessions among multiple principals, while still achieving expected
privacy. Domain data manager will be discussed in Section III-E.
B. Content Allocation
TrackingFree’s content allocation mechanism is composed
of two parts: initial content allocation and derivative content
allocation. Initial content allocation handles top frames that are
navigated by user directly, that is, the web pages opened through
address bar and command line parameters. Derivative content
allocation handles frames that are generated due to other frames’
contents, such as pop-up window and iframe. We refer to these
frames as child frame.
1) Initial Content Allocation: Initial content allocation is
based on the registered domain name (e.g., google.com and
sina.com.cn) of the top frames directly navigated by users.
For these frames, TrackingFree will group them in the same
principal if and only if they have the same registered domain.
For example, in Fig. 1, web pages mail.a.com and news.a.com,
though belonging to different subdomains, are located in the
same principal. Isolating subdomains will bring little extra
privacy beneﬁts, but can break the functionality of a large
amount of web sites: two subdomains, say, www.google.com
and gmail.google.com, with the same parent domain would not
be able to set cookie for each other, which, however, is a very
common practice for many web sites.
Plugin objects, such as Flash or SilverLight ﬁles, are
embedded in web pages and can also be utilized by trackers
Algorithm 1 Principal Switch Determination Algorithm
Input:
target : F rame
source : F rame
domain : Domain
isU serT riggered : Boolean
. target frame
. source frame
. the domain of the principal
(source.isM ainF rame() and isN avigation(source, target))
Output:
1: isCrossSiteReq ( (not equal(target.domain, domain))
2: isM ainF rameN av (
3:
4: if isM ainF rameN av & isCrossSiteReq then
5:
6: else if isCrossSiteReq & isU serT riggered then
7:
8: else
9:
10: end if
return switch-principal
return switch-principal
return non-switch
to store identiﬁers [35] [4]. We treat plugin objects like other
HTML objects: putting them in the same principal as their
embedding frames to cut off the identiﬁer sharing channels
provided by plugin objects.
2) Derivative Content Allocation: Once a frame is placed
in a principal, TrackingFree needs to decide how to allocate
its child frames. There are two steps in allocating those child
frames. First, TrackingFree decides whether those child frames
should stay in the same principal as their parent frames. A short
answer is that TrackingFree keeps all non-user-triggered child
frames in the principals that their parent frames reside in, and
moves all user-triggered cross-site frames to other principals.
This process is deﬁned as principal switch. Each frame can
at most be switched once in its creation phase. Second, for
those frames that need to be moved out of current principal,
TrackingFree selects an existing principal or creates a new
one to render them. This process is deﬁned as principal selection.
Principal Switch. There are two intuitive yet extreme
principal switch algorithms: keeping all child frames in current
principal (no switch) and making a switch for every child frame.
However, keeping all child frames in the same principal allows
trackers to collect user’s browsing history; making a switch all
the time causes serious compatibility issues.
Therefore, TrackingFree should make principal switch as
little as possible, while still preserving user’s privacy. We propose
a switching algorithm in Algorithm 1. Whenever a new child
frame is about to generate, TrackingFree will run Algorithm 1
to determine if it needs to be switched out. For convenience,
we refer to the newly-created child frame as target frame, its
URL as target URL and the frame that generates target frame as
source frame. We also denote the ﬁrst frame of each principal
as main frame.
if target frame is about
Main frame’s domain should always be consistent with
principal’s domain. Therefore,
to
replace main frame, which we denote as main frame navigation,
TrackingFree will move the target principal out as long as it is
a cross-site navigation. In other cases (e.g., navigation on child
frame, new popup window), whether or not to switch principal
also depends on if the target principal is user-triggered. For
example, in Fig. 1, iframe online.b.com/m resides in principal
a.com because it is not generated from user’s activity; if a user
clicks a link toward online.b.com/n in this frame, TrackingFree
will put the target frame in a new page and render them in
3
a different principal (principal b.com in Fig. 1). The reason
we handle these two frames differently is that
third-party
trackers in this principal do not know a user’s real intention for
online.b.com/m: it will be automatically visited if the user visits
news.a.com. On the other hand, child-frame online.b.com/n is
generated by the user and thus shows the user’s preferences.
Keeping it in the original principal would leak out user’s
privacy at least to trackers embedded in frames news.a.com
and online.b.com/n.
A key for Algorithm 1 is to dynamically monitor whether a
target frame is user-triggered. In TrackingFree, we adopt an
approximation approach to do this efﬁciently: TrackingFree
hooks up all the click events and keyboard events in any frames.
Once an event is triggered, it will label the frame on which the
event happens as user-activated frame. In Fig. 1, every frame
has a property to indicate whether it is a user-activated frame.
When a new frame gets created, TrackingFree can determine if
it is user-triggered by checking its source frame’s user-activated
ﬂag. This approach can result in false positive (mistakenly label
an automatically generated target frame as user-triggered), but
TrackingFree’s privacy-preserving capability is still guaranteed
because of no false negative.
Principal Selection. We propose an in-degree-bounded
graph approach for principal selection to strike a balance between
compatibility and privacy-preserving ability. In TrackingFree,
the principal backend (Fig. 1) maintains a graph to organize
principals, in which each principal is a node. A directed edge
from principal A to principal B exists if and only if at least
one principal switch from A to B has occurred before. The
principal graph may contain several mutually disconnected
sub-graphs. Each sub-graph contains a starting point principal,
which is created based on initial content allocation mechanism,
and possibly many derivative principals, based on derivative
content allocation mechanism. TrackingFree is conﬁgured with
a maximum in-degree value3 and enforces the number of
any principal’s parents never exceeding this value. The value
determines tracker’s tracking capability. If we let P denote the
number of principals a tracker can correlate (tracking range) in
worst case, k denotes the maximum in-degree value of principal
graph, their relationship is given by:
P = (k + 1) ⇤ (c + 1),
(1)
where c denotes the number of non-tracking sites willing to
relay tracking identiﬁers for trackers. We have not found such
non-tracking web sites in practice, which will be discussed in
details in Section VI-A4. Currently, it is safe to say in most
cases, c equals to zero. We choose the value of k as two because
it can achieve a good balance between privacy and compatibility:
setting it to one leads to serious compatibility issues, while any
number larger than two extends tracker’s tracking range without
making further contributions to compatibility. When k equals to
two and c equals to zero, we formally verify that TrackingFree
can limit tracker’s tracking range no more than three principal