### Security of Access Token Delivery in Mobile Applications

#### 1. **iOS and Facebook Authentication**

Currently, there is no secure method for performing authentication using Facebook on iOS. Even the security-enhanced implicit grant described in Section 5.2 is vulnerable to attacks. This is because there is no reliable way to ensure that an access token is sent to its intended relying party application.

#### 2. **Android Platform: Secure Intent Mechanism**

In contrast, the Android platform offers a more secure mechanism for handling access tokens. Our study revealed that both major Android service providers, Facebook and Google, use the Intent mechanism securely. 

- **Key Hash Verification**: When an Android application registers with a service provider, it must provide a hash of its Android developer key. The service provider can then verify this key hash when sending sensitive messages (e.g., access tokens) to the relying party.
- **Code Example**:
  ```java
  String relying_party = Activity.getCallingPackage();
  PackageInfo dev_key_hash = getPackageManager().getPackageInfo(relying_party, PackageManager.GET_SIGNATURES);
  ```
- **Verification Process**: The service provider checks if the key hash matches the one provided by the developer during registration. If they match, the service provider can trust that the message is being sent to the correct relying party.

We have verified that both Google and Facebook use this mechanism to deliver access tokens to Android applications, making it the only secure method for access token delivery on Android.

#### 3. **Mobile Browser and WebView Usage**

The OAuth specification does not specify how to perform user-agent redirection for mobile applications. As a result, many developers use mobile browsers or embedded browsers (WebView) to handle web-based OAuth redirections. However, this approach is often insecure.

- **Common Misconception**: Developers often believe that the OAuth specification, designed for web usage, can be securely applied to mobile platforms using a WebView. This is incorrect.
- **Security Challenges**: It is difficult for a service provider website to determine the identity of the mobile relying party. There is currently no secure method in either iOS or Android to allow a service provider to deliver sensitive OAuth tokens (e.g., request token or access token) to the intended relying party application.

#### 4. **Flawed Methods for OAuth Token Delivery**

- **Custom Schemes and Intent Filters**:
  - **iOS**: Custom scheme mechanisms are insecure.
  - **Android**: Custom Intent filters can be used securely by verifying the relying party’s developer key hash. However, a web-based service provider inside a browser cannot verify the relying party’s key hash without using the relying party as an oracle.
- **URI Parameters**:
  - Another technique involves directly attaching the access token to the service provider’s URI. For example, `provider.com/?token=TOKEN`. However, there is no way for the embedded service provider to determine the identity of the host application.

#### 5. **Tencent's Enhanced Implicit Grant**

Tencent, a popular Chinese OAuth service provider, uses a modified version of the OAuth 2.0 implicit grant for authentication. This includes:

- **ID Hash Parameter**: A concatenated string of the relying party’s application ID and the user’s Tencent ID, cryptographically hashed using a secret key known only to Tencent.
- **User Authentication**: Tencent authenticates the user and issues the ID hash immediately after authentication, without prompting the user with a permission dialogue box. This can lead to security vulnerabilities, especially when the protocol is performed inside a WebView.

After we reported our findings, Tencent acknowledged the issue and patched their user authentication mechanism by adding an additional permission dialogue box.

#### 6. **Lessons Learned**

- **Access Token Delivery**: A mechanism can be safely used to distribute access tokens if the service provider can always identify the recipient using a globally unique identifier.
- **Authorization**: Ensure that the user’s permission is willfully granted to the relying party by presenting a dialogue box with the relying party’s information and the scopes of its permissions.
- **Authentication**: When OAuth is used for authentication, the user’s device should not be trusted. The relying party must avoid bundling security-related logic or sensitive information into the mobile application and assume that any data sent from the user’s device could be tampered with.

### Conclusion

OAuth usages on mobile applications require a detailed understanding of the protocol specifications and the capabilities of the mobile platform. We hope that this study will provoke further discussion and lead to clearer guidelines for mobile application developers.