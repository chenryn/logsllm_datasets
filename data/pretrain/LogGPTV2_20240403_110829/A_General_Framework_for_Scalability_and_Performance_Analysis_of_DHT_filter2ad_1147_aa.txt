title:A General Framework for Scalability and Performance Analysis of DHT
Routing Systems
author:Joseph S. Kong and
Jesse S. A. Bridgewater and
Vwani P. Roychowdhury
A General Framework for Scalability and Performance Analysis of DHT
Routing Systems
Joseph S. Kong, Jesse S. A. Bridgewater and Vwani P. Roychowdhury
Department of Electrical Engineering
University of California, Los Angeles
{jskong, jsab, vwani}@ee.ucla.edu
Abstract
In recent years, many DHT-based P2P systems have
been proposed, analyzed, and certain deployments have
reached a global scale with nearly one million nodes. One
is thus faced with the question of which particular DHT sys-
tem to choose, and whether some are inherently more ro-
bust and scalable. Toward developing such a comparative
framework, we present the reachable component method
(RCM) for analyzing the performance of different DHT
routing systems subject to random failures. We apply RCM
to ﬁve DHT systems and obtain analytical expressions that
characterize their routability as a continuous function of
system size and node failure probability. An important con-
sequence is that in the large-network limit, the routability of
certain DHT systems go to zero for any non-zero probability
of node failure. These DHT routing algorithms are therefore
unscalable, while some others, including Kademlia, which
powers the popular eDonkey P2P system, are found to be
scalable.
1
Introduction
Developing scalable and fault tolerant systems to lever-
age and utilize the shared resources of distributed comput-
ers has been an important research topic since the dawn of
computer networking. In recent years, the popularity and
wide deployment of peer-to-peer (P2P) systems has inspired
the development of distributed hash tables (DHTs). DHTs
typically offer scalable O(log n) routing latency and efﬁ-
cient lookup interface. According to a recent study [13],
the DHT based ﬁle-sharing network eDonkey is emerging
as one of the largest P2P systems with millions of users
and accounting for the largest fraction of P2P trafﬁc, while
P2P trafﬁc currently accounts for 60% of the total Internet
bandwidth. Given the transient nature of P2P users, analyz-
ing and understanding the robustness of DHT routing algo-
rithms in the asymptotic system size limit under unreliable
environments become essential.
In the past few years, there has been a growing number
of newly proposed DHT routing algorithms. However, in
the DHT routing literature, there have been few papers that
provide a general analytical framework to compare across
the myriad routing algorithms. In this paper, we develop a
method to analyze the performance and scalability of differ-
ent DHT routing systems under random failures of nodes.
We would like to emphasize that we intend to analyze the
performance of the basic routing geometry and protocol.
In a real system implementation, there is no doubt that a
system designer have many optional features, such as addi-
tional sequential neighbors, to provide improved fault tol-
erance. Nevertheless, the analysis of the basic routing ge-
ometry will give us more insights and good guidelines to
compare among systems.
In this paper, we investigate the routing performance of
ﬁve DHT systems with uniform node failure probability q.
Such a failure model, also known as the static resilience
model1, is assumed in the simulation study done by Gum-
madi et al. [2]. A static failure model is well suited for
analyzing performance in the shorter time scale. In a DHT,
very fast detection of faults is generally possible through
means such as TCP timeouts or keep-alive messages, but
establishing new connections to replace the faulty nodes is
more time and resource consuming. The applicability of the
results derived from this static model to dynamic situations,
such as churn, is currently under study.
Intuitively, as the node failure probability q increases, the
routing performance of the system will worsen. A quantita-
tive metric, called routability is needed to characterize the
routing performance of a DHT system under random fail-
ure:
Deﬁnition 1 The routability of a DHT routing system is
the expected number of routable pairs of nodes divided by
1The term static refers to the assumption that a node’s routing table
remains unchanged after accounting for neighbor failures.
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
the expected number of possible pairs among the surviving
nodes. In other words, it is the fraction of survived routing
paths in the system. In general, routability is a function of
the node failure probability q and system size N.
As the DHT-based eDonkey is reaching global scale, it is
important to study how DHT systems perform as the num-
ber of nodes reaches millions or even billions. In fact, we
know from site percolation theory [16], that if q > (1− pc),
where pc is called the percolation threshold of the underly-
ing network, then the network will get fragmented into very
small-size connected components and for large enough net-
work size. As a result, the routability of the network will
approach zero for such failure probability due to the lack
of connectivity. However, because of how messages get
routed as speciﬁed by the underlying routing protocol, all
pairs belonging to the same connected component need not
be reachable under failure.
In general, the size of the connected components do not
directly give us the routability of the subnetworks. Hence,
one needs to develop a framework different from the well-
known framework of percolation. As a result, this work in-
vestigates DHT routability under the random failure model
for both ﬁnite system sizes and the inﬁnite limit. We will
deﬁne the scalability of a routing system as follows:
Deﬁnition 2 A DHT routing system is said to be scalable if
and only if its routability converges to a nonzero value as the
system size goes to inﬁnity for a nonzero failure probability
q. Mathematically, it is deﬁned as follows:
N→∞ r(N, q) > 0 f or 0 < q < 1 − pc
lim
where r(N, q) denotes the routability of the system as a
function of system size N and failure probability q. Simi-
larly, the system is said to be unscalable if and only if its
routability converges to zero as the system size goes to in-
ﬁnity for a nonzero failure probability q:
N→∞ r(N, q) = 0 f or 0 < q < 1 − pc
lim
We want to emphasize that in a real implementation, there
are many system parameters that the system designer can
specify, such as the number of near neighbors or sequential
neighbors. As a result, the designer can always add enough
sequential neighbors to achieve an acceptable routability
under reasonable node failure probability for a maximum
network size that exceeds the expected number of nodes that
will participate in the system. The scalability deﬁnition is
provided for examining the theoretical asymptotic behavior
of DHT routing systems, not for claiming a DHT system is
unsuitable for any large-scale deployment.
Having speciﬁed the deﬁnition of the key metrics, we
will present the reachable component method (RCM), a
simple yet effective method for analyzing DHT routing per-
formance under random failure. We apply the RCM method
to analyze the basic routing algorithms used in the following
ﬁve DHT systems: Symphony [11], Kademlia [12], Chord
[17], CAN [15] and Plaxton routing based systems [14]. For
all algorithms except Chord routing, we derive the analyt-
ical expression for each algorithm’s routability under ran-
dom failure, while an analytical expression for a tight lower
bound is obtained for Chord routing. In fact, our analyti-
cal results match the simulation results carried out in [2],
where different DHT systems were simulated and the per-
centage of failed paths (i.e., 1-routability) was estimated for
N = 216, as illustrated in Fig. 6. In addition, we also derive
the asymptotic performance of the routing algorithm under
failure as the system scales.
One interesting ﬁnding of this paper is that under ran-
dom failure, the basic DHT routing systems can be classi-
ﬁed into two classes: scalable and unscalable. For example,
the XOR routing scheme of Kademlia is found to be scal-
able, since the routability of the system under nonzero prob-
ability of failure converges very fast to a positive limit even
as the size of the system tends to inﬁnity. This is consistent
with the observation that the Kademlia-based popular P2P
network eDonkey is able to scale to millions of nodes. In
contrast, as the system scales, the routability of Symphony’s
routing scheme is found to quickly converge to zero for any
failure probability greater than zero. Thus, the basic routing
system for Symphony is found to be unscalable. However,
as brieﬂy discussed above in this section, a system designer
for Symphony can specify enough near neighbors to guar-
antee an acceptable routability in the system for a maximum
network size and a reasonable failure probability q.
The rest of this paper is organized as follows. In section
2, we discuss previous work on the fault tolerance of P2P
routing systems. In section 3, we will give an overview of
the DHT routing systems that we intend to analyze. In sec-
tion 4, we present the reachable component method (RCM)
and apply the RCM method on several DHT systems. In
section 5, we examine the scalability of DHT routing sys-
tems. In section 6, we give our concluding remarks.
2 Related Work
The study of robustness in routing networks has grown in
the past few years with researchers simulating failure con-
ditions in DHT-based systems. Gummadi et al. [2] showed
through simulation results that the routing geometry of each
system has a large effect on the network’s static resilience
to random failures. In addition, there have been research
work done in the area of analyzing and simulating dynamic
failure conditions (i.e. churn) in DHT systems [6, 8, 9].
Theory work has been done to predict the performance
of DHT systems under a static failure model. The two
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
main approaches thus far have been graph theoretic meth-
ods [1, 7, 10] and Markov processes [18]. Most analytical
work to date has dealt with one or two routing algorithms to
which their respective methods are well-suited but have not
provided comparisons across a large fraction of the DHT
algorithms. Angel et al. [1] use percolation theory to place
tight bounds on the critical failure probability that can sup-
port efﬁcient routing on both hypercube and d-dimensional
mesh topologies. By efﬁcient they mean that it is possible
to route between two nodes with time complexity on the
order of the network diameter. While this method predicts
the point at which the network becomes virtually unusable,
it does not allow the detailed characterization of routabil-
ity as a function of the failure probability. In contrast, the
reachable component method (RCM) method exploits the
geometries of DHT routing networks and leads to simple
analytical results that predict routing performance for arbi-
trary network sizes and failure probabilities.
3 Overview of DHT Routing Protocols
We will ﬁrst review the ﬁve DHT routing algorithms that
we intend to analyze. An excellent discussion of the geo-
metric interpretation of these routing algorithms (except for
Symphony) is provided by Gummadi et al. [2] and we use
the same terms for the geometric interpretations of DHT
routing systems in this paper (e.g. hypercube and ring ge-
ometry for CAN and Chord routing systems, respectively).
By following the algorithm descriptions in [2] as well as the
descriptions in this section, one can construct Markov chain
models (e.g. Fig. 4) for the DHT routing algorithms. The
application of the Markov chain models will be discussed
in section 4.1 and 4.2.
In addition, we will use the notation of phases as used
in [3]: we say that the routing process has reached phase j if
the numeric distance (used in Chord and Symphony) or the
XOR distance (used in Kademlia) from the current message
holder to the target is between 2j and 2j+1.
In addition,
we will use binary strings as identiﬁers although any other
base besides 2 can be used. Finally, for those systems that
require resolving node identiﬁer bits in order, we use the
convention of correcting bits from left to right.
3.1 Tree (Plaxton)
Each node in a tree-based routing geometry has log N
neighbors, with the ith neighbor matching the ﬁrst i− 1 bits
and differ on the ith bit. When a source node S, wishes
to route to a destination, D, the routing can only be suc-
cessful if one of the neighbors of S , denoted Z, shares a
preﬁx with D and has the highest-order differing bit. Each
successful step in the routing results in the highest-order bit
being corrected until no bits differ.
The routing Markov chain (Fig. 4(a)) for the tree geome-
try can easily be generated by examining the possible failure
conditions during routing. At each step in the routing pro-
cess, the neighbor that will correct the leftmost bit must be
present in order for the message to be routed. Otherwise,
the message is dropped and routing fails.
3.2 Hypercube (CAN)
In the hypercube geometry, each node’s identiﬁer is a
binary string representing its position in the d-dimensional
space. The distance between nodes is simply the Hamming
distance of the two addresses. The number of possible paths
that can correct a bit is reduced by 1 with each successful
step in the route. This fact makes the creation of the hyper-
cube routing Markov chain (Fig. 4(b)) straightforward.
3.3 XOR (Kademlia)
In XOR routing [12], the distance between two nodes is
the numeric value of the XOR of their node identiﬁers. Each
node keeps log(N) connections, with the ith neighbor cho-
sen uniformly at random from an XOR distance in the range
of [2d−i, 2d−i+1] away. Messages are delivered by routing
greedily in the XOR distance at each hop. Moreover, it is a
simple exercise to show that choosing a neighbor at an XOR
distance of [2d−i, 2d−i+1] away is equivalent to choosing a
neighbor by matching the ﬁrst (i-1) bits of one’s identiﬁer,
ﬂipping the ith bit, and choose random bits for the rest of
the bits.
Effectively, this construction is equivalent to the Plaxton-
tree routing geometry. As a result, when there is no failures,
the XOR routing protocol resolves node identiﬁer bits from
left to right as in the Plaxton-tree geometry. However, when
the system experiences node failures, nodes have the option
to route messages to neighbors that resolve lower order bits
when the neighbor that would resolve the highest order bit is
not available. Note that resolving lower order bits will also
make progress in terms of decreasing the XOR distance to
destination. Nonetheless, the progress made by resolving
lower order bits is not necessarily preserved in future hops
or phases (see Fig. 5(a)).
For example, at the start of the routing process, one phase
is advanced if the neighbor correcting the leftmost bit exists.
Otherwise, the routing process can correct one of the lower
order bits. However, if all of the neighbors that would re-
solve bits have failed, the routing process fails. A Markov
chain model for the routing process is illustrated in Fig.
5(b).
3.4 Ring (Chord)
In Chord [17], nodes are placed in numerical order
around a ring. Each node with identiﬁer a maintains
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
log(N) connections or ﬁngers, with each ﬁnger at a distance
[2d−i, 2d−i+1] away (the randomized version of Chord is
discussed here). Routing can be done greedily on the ring.
When the system experiences failure, each node will con-
tinue to route a message to the neighbor closest to destina-
tion (i.e. in a greedy manner).
3.5 Small-World (Symphony)
Small-world routing networks in the 1-dimensional case
have a ring-like address space where each node is connected
to a constant number of its nearest neighbors and a constant
number of shortcuts that have a 1/d distance distribution (d
is the ring-distance between the end-points of the shortcut).
Each node maintains a constant number of neighbors and
uses greedy routing. Due to the distance distribution it will
take an average of O(log N) hops before routing halves the
distance to a target node, therefore requiring O(log N) such
phases to reach a target node for a total expected latency of
O(log2 N).
When the system experiences node failures, some of the
shortcuts will be unavailable and the route will have to take
”suboptimal” hops. The small-world Markov chain model
is fundamentally different from the ones for XOR routing
(Fig. 5(b)) and ring routing. A routing phase is com-
pleted if any of the node’s shortcuts connects to the desired
d where ks denotes
phase. This happens with probability ks
the number of shortcuts that each node maintains. Alterna-
tively, the routing fails if all of the node’s near neighbor
and shortcut connections fail, which happens with prob-
ability qkn+ks.
If neither of the above happens then the
route takes a suboptimal hop, which happens with probabil-
ity 1 − ks
− qkn+ks.
d
4 Reachable Component Method and its Ap-
plications
4.1 Method Description
We now describe the steps of the reachable component
method (RCM) in calculating the routability of a DHT rout-
ing system under random failure. Before we delve into the
description, let us ﬁrst clarify several concepts and nota-
tions on DHT routing. First, we allow all DHTs to fully
populate their identiﬁer spaces (i.e. node identiﬁer length
d = logb
N). Second, when a DHT is not in its perfect
topological state, it can be the case that a pair of nodes are in
the same connected component but these two nodes cannot
route between each other. Thus, the reachable component of
node i is the set of nodes that node i can route to under the
given routing algorithm. Note that the reachable component
of node i is a subset of the connected component contain-
ing node i. Third, we assume that no ”back-tracking” is
allowed (i.e. when a node cannot forward a message fur-
ther, the node is not allowed to return the message back to
the node from whom the message was received).
RCM is fairly simple in concept and involves the follow-
ing ﬁve steps:
1. Pick a random node, node i, from the system and de-
note it as the root node. Construct the root node’s rout-
ing topology from the routing algorithm of the system
(i.e. the topology by which the root node routes to all
other nodes in the system).
2. Obtain the distribution of the distances (in hops or in
phases) between the root node and all other nodes (de-
noted as n(h)); in other words, for each integer h, cal-
culate the number of nodes at distance h hops from the
root node. Note that the meaning of hops or phases
will be clear from the context.
3. Compute the probability of success, p(h, q), for rout-
ing to a node h hops away from the root node under a
uniform node failure probability, q.
4. Compute the expected size of the reachable component
from the root node by ﬁrst calculating the expected
number of reachable nodes at distance h hops away
(which is simply given by n(h) ∗ p(h, q)). Now, we
sum over all possible number of hops to obtain the ex-
pected size of the reachable component.
5. By inspection, the expected number of routable pairs
in the system is given by summing all surviving nodes’
expected reachable component sizes. Then, dividing
the expected number of routable pairs by the number
of possible node pairs among all surviving nodes pro-
duces the routability of the system under uniform node
failure probability q.
The formula for computing the expected size of the
reachable component, E[Si], described in step 4 is derived
as follows:
N(cid:1)
N(cid:1)
d(cid:1)
E[Si] = E[
Yj] =
E[Yj] =
n(h)p(h, q)
j=1
j(cid:3)=i
j=1
j(cid:3)=i
h=1
where Yj is Bernoulli random variable for denoting reach-