state consists of two main parts: a private storage and the
amount of virtual coins (Ether) it holds (called balance).
Contract code can manipulate variables like in traditional
imperative programs. The code of an Ethereum contract is
in a low-level, stack-based bytecode language referred to as
Ethereum virtual machine (EVM) code. Users deﬁne con-
tracts using high-level programming languages, e.g., Solid-
ity [16] (a JavaScript-like language), which are then com-
piled into EVM code. To invoke a contract at address γ,
users send a transaction to the contract address. A trans-
action typically includes: payment (to the contract) for the
execution (in Ether) and/ or input data for the invocation.
An Example. Figure 3 is a simple contract, deﬁned in
Solidity, which rewards anyone who solves a computational
puzzle and submits the solution to the contract. The creator
of the contract includes the compiled (EVM) code of Puzzle
in a “contract creation” transaction. When such transaction
is accepted to the blockchain, all miners will unanimously
Code	Storage	Balance	PrivBlock	Nonce	ListOfTxs	Blockchain	state	TimeStamp	PrivBlock	Nonce	ListOfTxs	Blockchain	state	TimeStamp	Update(PrevState,	ListOfTxs)	Block	i	Block	i+1	Time	the state σ is reverted to the initial state as if the execution
did not happen. In case of such aborts, the sender still has
to pay all the gasLimit to the miner though, as a counter-
measure against resource-exhaustion attacks [6].
3. SECURITY BUGS IN CONTRACTS
We discuss several security bugs which allow malicious
miners or users to exploit and gain proﬁt.
3.1 Transaction-Ordering Dependence
As discussed in Section 2, a block includes a set of transac-
tions, hence the blockchain state is updated several times in
each epoch. Let us consider a scenario where the blockchain
is at state σ and the new block includes two transactions
(e.g., Ti, Tj) invoking the same contract. In such a scenario,
users have uncertain knowledge of which state the contract
is at when their individual invocation is executed. For exam-
ple, Ti is applied when the contract is at either state σ[α] or
(cid:48)
(cid:48)
Tj−→ σ
[α] where σ
state σ
, depending on the order between
Ti and Tj. Thus, there is a discrepancy between the state
of the contract that users may intend to invoke at, and the
actual state when their corresponding execution happens.
Only the miner who mines the block can decide the order of
these transactions, consequently the order of updates. As a
result, the ﬁnal state of a contract depends on how the miner
orders the transactions invoking it. We call such contracts
as transaction-ordering dependent (or TOD) contracts.
3.1.1 Attacks
It may be not obvious to the readers why having depen-
dence on the transaction ordering is problematic for smart
contracts. The reasons are twofold. First, even a benign
invocation to the contract may yield an unexpected result
to users if there are concurrent invocations. Second, a mali-
cious user can exploit the TOD contracts to gain more prof-
its, even steal users’ money. We explain the two scenarios
below by using the Puzzle contract in Figure 3.
Benign scenario. We consider two transactions To and
Tu sending to Puzzle at roughly the same time. To is from
the contract owner to update the reward and Tu is from
a user who submits a valid solution to claim the reward.
Since To and Tu are broadcast to the network at roughly
the same time, the next block will most likely include both
the transactions. The order of the two transactions decides
how much reward the user receives for the solution. The
user expects to receive the reward that he observes when
submitting his solution, but he may receive a diﬀerent re-
ward if To is executed ﬁrst. The problem is more signiﬁcant
if the contract serves as a decentralized exchange or market
place [20, 21]. In these contracts, sellers frequently update
the price, and users send their orders to buy some items
(Figure 4). Depending on the transaction ordering, users’
buy requests may or may not go through. Even worse, buy-
ers may have to pay much higher than the observed price
when they issue the buy requests.
Malicious scenario. The above scenario may just be an
accident because the owner of Puzzle does not know when a
solution is submitted. However, a malicious owner can ex-
ploit transaction-ordering dependence to gain ﬁnancial ad-
vantage. Note that there is a time gap between when trans-
action Tu is broadcast and when it is included in a block.
In Ethereum, the time to ﬁnd a new block is around 12 sec-
price = _price ;
if ( msg . sender == owner )
}
f u n c t i o n buy ( uint quant ) returns ( uint ){
uint public price ;
uint public stock ;
/.../
f u n c t i o n u p d a t e P r i c e ( uint _price ){
1 c o n t r a c t M a r k e t P l a c e {
2
3
4
5
6
7
8
9
10
11
12
13
14
Figure 4: A contract that acts as a market place where users can
buy/ sell some tokens. Due to TOD, some order may or may not
go through.
if ( msg . value  stock )
stock -= quant ;
/.../
throw ;
}}
block . t i m e s t a m p ;
uint256 y = salt * block . number /( salt %5);
uint256 seed = block . number /3 + ( salt %300)
uint private L a s t _ P a y o u t = 0;
uint256 salt =
f u n c t i o n random returns ( uint256 result ){
1 c o n t r a c t theRun {
2
3
4
5
6
7
8
9
10
11
12
Figure 5: A real contract which depends on block timestamp to
send out money [22]. This code is simpliﬁed from the original
code to save space.
// h = the b l o c k h a s h of the seed - th last block
uint256 h = uint256 ( block . b l o c k h a s h ( seed ));
// random number between 1 and 100
return uint256 ( h % 100) + 1;
+ L a s t _ P a y o u t + y ;
}}
onds. Thus, a malicious owner of the Puzzle contract can
keep listening to the network to see if there is a transaction
which submits a solution to his contract. If so, he sends his
transaction To to update the reward and make it as small as
zero. With a certain chance, both To and Tu are included in
the new block and his To is placed (so executed) before the
Tc. Thus the owner can enjoy a free solution for his puz-
zle. The owner can even bias the chance of his transaction
winning the race (i.e., to be executed ﬁrst) by participating
directly in the mining, setting higher gasPrice for his trans-
action (i.e., to incentivize miners to include it in the next
block) and/or colluding with other miners.
3.2 Timestamp Dependence
The next security problem that a contract may have uses
the block timestamp as a triggering condition to execute
some critical operations, e.g., sending money. We call such
contracts as timestamp-dependent contracts.
A good example of a timestamp-dependent contract is the
theRun contract in Figure 5, which uses a homegrown ran-
dom number generator to decide who wins the jackpot [22].
Technically TheRun uses the hash of some previous block
as the random seed to select the winner (Line 9–10). The
choice of block is determined based on the current block
timestamp (Line 5–7).
Let us recall that when mining a block, a miner has to set
the timestamp for the block (Figure 2). Normally, the times-
tamp is set as the current time of the miner’s local system.
However, the miner can vary this value by roughly 900 sec-
onds, while still having other miners accept the block [23] 1.
1The variation of block timestamp may now be less than 900
seconds according to the fact that Ethereum requires nodes
in the network to have roughly “same” local timestamps.
Speciﬁcally, on receiving a new block and after checking
other validity checks, miners check if the block timestamp is
greater than the timestamp of previous block and is within
900 seconds from the timestamp on their local system. Thus,
the adversary can choose diﬀerent block timestamps to ma-
nipulate the outcome of timestamp-dependent contracts.
3.2.1 Attacks
A miner can set the block timestamp to be a speciﬁc
value which inﬂuences the value of the timestamp-dependent
condition and favor the miner. For example in the theRun
contract, the hash of previous block and block number are
known, other contract variables like last payout which con-
tribute to the generation of the random seed are also known.
Thus the miner can precompute and select the timestamp so
the function random produces an outcome that favors him.
As a result, the adversary may completely bias the outcome
of the random seed to be any value, thus awarding the jack-
pot to any player he pleases. Thus, theRun is vulnerable to
any adversary who can manipulate the block timestamp.
While theRun uses timestamp as a insecure deterministic
random seed, other contracts use block timestamp as global
timestamp and perform some time-dependent computation.
We show in Section 6 an example which uses timestamp for
this purpose and is vulnerable to manipulation. Unfortu-
nately, there are many other contracts which are timestamp-
dependent. As we show in Section 6, among the ﬁrst 19, 366
contracts, 83 of them depend on the block timestamp to
transfer Ether to diﬀerent addresses.
3.3 Mishandled Exceptions
In Ethereum, there are several ways for a contract to call
another, e.g., via send instruction or call a contract’s func-
tion directly (e.g.,aContract.someFunction()). If there is an
exception raised (e.g., not enough gas, exceeding call stack
limit) in the callee contract, the callee contract terminates,
reverts its state and returns false. However, depending on
how the call is made, the exception in the callee contract
may or may not get propagated to the caller. For example,
if the call is made via the send instruction, the caller con-
tract should explicitly check the return value to verify if the
call has been executed properly. This inconsistent exception
propagation policy leads to many cases where exceptions are
not handled properly. As we later show in Section 6, 27.9%
of the contracts do not check the return values after call-
ing other contracts via send. We discuss the threats of not
validating return value of a contract call via our example in
Figure 6, which is a code snippet of a real contract [12].
3.3.1 Attacks
The KingOfTheEtherThrone (KoET for short) contract in
Figure 6 allows users to claim as “king of Ether” by paying
some amount of Ether that the current king requires. A king
gets proﬁt (i.e., compensation) from the diﬀerence between
the price he paid to the king before him and the price other
pays to be his successor. When a user claims the throne, the
contract sends the compensation to the ceded king (Line 15),
and assigns the user as the new king (Line 18—20).
The KoET contract does not check the result of the com-
pensation transaction in Line 15 before assigning the new
However, we could not ﬁnd any updated document from
Ethereum regarding the new possible variation, thus keeping
900 seconds.
struct Monarch {
Monarch public c u r r e n t M o n a r c h ;
// claim the throne
f u n c t i o n c l a i m T h r o n e ( string name ) {
// address of the king .
address ethAddr ;
string name ;
// how much he pays to p r e v i o u s king
uint c l a i m P r i c e ;
uint c o r o n a t i o n T i m e s t a m p ;
}
1 c o n t r a c t K i n g O f T h e E t h e r T h r o n e {
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
Figure 6: A code snippet of a real contract which does not check
the return value after calling other contracts [12].
/.../
if ( c u r r e n t M o n a r c h . ethAddr != w i z a r d A d d r e s s )
c u r r e n t M o n a r c h . ethAddr . send ( c o m p e n s a t i o n );
/.../
// assign the new king
c u r r e n t M o n a r c h = Monarch (
msg . sender , name ,
valuePaid , block . t i m e s t a m p );
}}
king. Thus, if for some reason, the compensation transaction
does not ﬁnish properly, the current king loses his throne
without any compensation. In fact, an instance of such a
problem occurred and led to the termination of KoET [12].
The reason reported in [12] is that the address Ak of the cur-
rent king is not a normal address, but a contract address.
When sending a transaction (or call) to Ak, some code will
be executed, thus requiring more gas than a transaction to
a normal address. However, KoET does not know what Ak
executes internally beforehand to decide how much gas to
give in the send instruction. Hence Ak runs out of gas and
throws an exception. As a result, the state (and balance)
of Ak remains unchanged, the compensation is returned to
KoET and the current king loses his throne without any
compensation.
The above problem often arises when a contract sends
money to a dynamic address, since the sender does not know
how much gas to allocate for the transaction. The contract
should always check if the transaction succeeds before exe-
cuting subsequent logic. The callee contract may throw an
exception of any type (e.g., division by zero, array index out
of bound and so on).
In this scenario, the recipient (or callee) seems at fault,
causing the send to fail. However, as we show next, a mali-
cious user who invokes the caller contract can cause the send
to fail deliberately, regardless of what the callee does.
Deliberately exceeding the call-stack’s depth limit.
The Ethereum Virtual Machine implementation limits the
call-stack’s depth to 1024 frames. The call-stack’s depth
increases by one if a contract calls another via the send or
call instruction. This opens an attack vector to deliberately
cause the send instruction in Line 15 of KoET contract to
fail. Speciﬁcally, an attacker can prepare a contract to call
itself 1023 times before sending a transaction to KoET to
claim the throne from the current king. Thus, the attacker
ensures that the call-stack’s depth of KoET reaches 1024,
causing the send instruction in Line 15 to fail. As the result,
the current king will not receive any payment. This call-
stack problem was identiﬁed in a previous report [24], but
remains unﬁxed in the current Ethereum protocol.
Exploiting call stack limit to gain beneﬁt. In the previ-
ous attack to KoET, the attacker does not receive any direct
1 c o n t r a c t S e n d B a l a n c e {
2 mapping ( address = > uint ) u s e r B a l a n c e s ;
3 bool w i t h d r a w n = false ;
4 f u n c t i o n g e t B a l a n c e ( address u ) c o n s t a n t returns ( uint ){
5
6 }
7 f u n c t i o n a d d T o B a l a n c e () {
8
9 }
u s e r B a l a n c e s [ msg . sender ] += msg . value ;
return u s e r B a l a n c e s [ u ];
if (!( msg . sender . call . value (
u s e r B a l a n c e s [ msg . sender ])())) { throw ; }
10 f u n c t i o n w i t h d r a w B a l a n c e (){
11
12
13
14
Figure 7: An example of the reentrancy bug. The contract im-
plements a simple bank account.
u s e r B a l a n c e s [ msg . sender ] = 0;
}}
beneﬁt besides causing other users to lose their entitlement.
However, in many other examples, the attacker can exploit
to directly beneﬁt as well.
In Ethereum, many contracts
implement veriﬁable Ponzi (or pyramid) schemes [22,25,26].
These contracts pay investors interest for their investments
from the subsequent investments by others. An attacker can
invest his money, make payments to previous investors fail
so he can receive his interest early. We discuss one of such
contracts in Section 6. Speciﬁcally, we show that 5, 411 con-
tracts (27.9%) are vulnerable to attacks that deliberately ex-
ceed the call-depth limit. We also conduct the attack in one
of the most popular contracts in Ethereum (with no harm
to others, but our own accounts) to conﬁrm our ﬁnding.
3.4 Reentrancy Vulnerability
Reentrancy is a well-known vulnerability with a recent
TheDao hack [19], where the attacker exploited the reen-
trancy vulnerability to steal over 3, 600, 000 Ether, or 60
million US Dollars at the time the attack happened. For