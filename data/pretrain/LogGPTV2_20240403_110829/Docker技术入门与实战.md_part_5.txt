3.5
该方法主要是使用dockercommit命令，其命令格式为dockercommit[OPTIoNS]
本节将重点介绍前两种方法。最后一种基于Dockerfile创建的方法将在后续章节专门予
$ sudo docker images
顺利的话，命令会返回新创建的镜像的ID信息，例如：
此时该容器跟原ubuntu：14.04镜像相比，
$ sudo docker run -ti ubuntu:14.04/bin/bash
下面将演示如何使用该命令创建一个新镜像。首先，启动一个镜像，并在其中进行修改
创建镜像的方法有三种：基于已有镜像的容器创建、基于本地模板导人、基于Dockerfile
test
REPOSITORY
此时查看本地镜像列表，即可看到新创建的镜像：
9e9c814023bcffc3e67e892a235afe61b02f66a947d2747f724bd317dda02f27
9e9c814023bcffc3e67e892a235afe61b02f66a947d2747f724bd317dda02f27
$sudo docker commit
记住容器的ID为a925cb40b3f0。
root@a925cb40b3f0:/#exit
root@a925cb40b3f0:/#touch test
'-□
□-m,
-a,
REPOSITORY
$sudo docker images
此时查看本地镜像，
创建镜像
--pause=true 提交时暂停容器运行。
--message=""提交消息
--author=""作者信息。
latest
TAG
TAG
读者会发现临时镜像已经被删除：
-m "Added a new file"
9e9c814023bc
IMAGEID
IMAGEID
4 seconds ago
，已经发生了改变，
CREATED
CREATED
VIRTUAL SIZE
第3章镜像23
225.4MB
VIRTUAL SIZE
可以使用docker
杜本七机
---
## Page 38
令进行查看。
ubuntu_14.04.tar导人镜像到本地镜像列表，如下所示：
载入镜像
ubuntu:14.04镜像为文件ubuntu_14.04.tar：
存出镜像
3.6
模板来创建。OPENVZ模板的下载地址为http://openvz.org/Download/templates/precreated。
基于本地模板导入
24第一部分Docker入门
这将导人镜像以及其相关的元数据信息（包括标签等），
$sudodockerload--inputubuntu_14.04.tar
可以使用dockerload从存出的本地文件中再导人到本地镜像库，例如从文件
如果要存出镜像到本地文件，可以使用docker save命令。例如，存出本地的
可以使用dockersave和dockerload命令来存出和载人镜像。
也可以直接从一个操作系统模板文件导人一个镜像。在这里，推荐使用OpenVZ提供的
$sudodocker1oad<ubuntu_14.04.tar
$ sudodocker save-0ubuntu_14.04.tarubuntu:14.04
ubuntu
REPOSITORY
$sudodockerimages
ubuntu
REPOSITORY
$sudodockerimages
然后查看新导人的镜像，已经在本地存在了：
$sudocat ubuntu-14.04-x86_64-minimal.tar.gz
比如，
存出和载入镜像
，笔者下载了一个ubuntu-14.04的模板压缩包后，可以使用以下命令导人：
TAG
14.04
TAG
05ac7c0b9383
IMAGE ID
c4ff7513909d
IMAGEID
17 seconds ago
CREATED
CREATED
1docker import-ubuntu:14.04
可以使用dockerimages命
225.4MB
VIRTUAL SIZE
215.5MB
VIRTUAL SIZE
---
## Page 39
区中。
Docker使用中，推荐大家注意积累定制的镜像文件，
3.8本章小结
除
命令上传镜像：
test：latest镜像，可以先添加新的标签user/test：latest，然后用docker push
登录)，命令格式为 docker push NAME[：TAG]。
3.7
用户在DockerHub网站注册后，即可上传自制的镜像。
在后续章节，
读者可能已经发现，
创建等。
本章具体介绍了围绕Docker镜像的一系列重要命令操作，
第一次使用时，会提示输入登录信息或进行注册。
Sending image list
$sudo docker tag test:latest user/test:latest
可以使用dockerpush命令上传镜像到仓库，
Email:PI:EMAIL
Password:
Jsername:
Please login prior to push:
上传镜像
，笔者将会介绍更多对镜像进行操作的场景。
push
镜像是使用Docker的前提，
a repository[base/163](len:1)
默认上传到DockerHub官方仓库（需要
并将自己创建的高质量镜像分享到社
也是最重要的资源。所以，
，包括获取、查看、搜索、删
例如用户user上传本地的
第3章镜
像25
在平时的
---
## Page 40
令来启动它。
新建容器
4.1
进人容器内执行操作、删除容器和通过导人导出容器来实现容器迁移等。
环境。
跑在上面的应用。那么Docker容器就是独立运行的一个或一组应用，以及它们的必需运行
可以使用dockercreate命令新建一个容器，例如：
本章将具体介绍围绕容器的重要操作，包括创建一个容器、启动容器、终止一个容器、
使用docker
Docker的容器十分轻量级，用户可以随时创建或删除容器。
如果认为虚拟机是模拟运行的一整套操作系统（提供了运行态环境和其他系统环境）和
iyotcea
7a0c26f96889
CONTAINER ID
$sudo docker ps -a
7a0c26f96889de46b6276608501b7e8f99e4e31e42ec4a288a1f8e7644316637
$sudo docker create -it ubuntu:latest
简单地说，容器是镜像的一个运行实例，所不同的是，它带有额外的可写文件层。
容器是Docker的另一个核心概念。
创建容器
容
第4章
create命令新建的容器处于停止状态，
ubuntu:latest
IMAGE
器
COMMAND
"/bin/bash" 6 seconds
CREATED
STATUS
，可以使用docker start命
obe
PORTS
.stoic_albattani
NAMES
---
## Page 41
要的进程。
则让容器的标准输入保持打开。
create命令，再执行docker start命令。
态（stopped）的容器重新启动。
新建并启动容器
对于所创建的bash容器，
用户可以按Ctrl+d或输人exit命令来退出容器：
在容器内用ps命令查看进程，
root@af8bae53bdd3:/#ps
bin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var
root@af8bae53bdd3:/#pwd
在交互模式下，用户可以通过所创建的终端来输人命令，例如：
exit
root@af8bae53bdd3:/#exit
root@af8bae53bdd3:/#1s
其中，
$sudodockerrun-t-iubuntu:14.04/bin/bash
下面的命令则启动一个bash终端，允许用户进行交互：
口执行完毕后容器被终止。
口执行用户指定的应用程序。
口从地址池配置一个IP地址给容器。
口从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去。
口分配一个文件系统，并在只读的镜像层外面挂载一层可读写层。
口利用镜像创建并启动一个容器。
口检查本地是否存在指定的镜像，
当利用dockerrun来创建并启动容器时，Docker在后台运行的标准操作包括：
这跟在本地直接执行/bin/echo
Hello world
$sudo docker run ubuntu
例如，
启动容器有两种方式，
root@af8bae53bdd3:/#
PID TTY
11？
1？
-t选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输人上，
下面的命令输出一个“Hello World”，之后容器自动终止：
00:00:00ps
00:00:00
TIME
一种是基于镜像新建一个容器并启动，另外一个是将在终止状
bash
CMD
。所需要的命令主要为dockerrun，等价于先执行docker
，当使用exit 命令退出之后，
/bin/echo'Helloworld'
可以看到，
，不存在就从公有仓库下载。
helloworld几乎感觉不出任何区别。
只运行了bash应用，
该容器就自动处于终止状态
第4章
D
并没有运行其他不需
容
器27
---
## Page 42
了一个终端的容器，用户通过exit命令或Ctrl+d来退出终端时，
秒），再发送SIGKILL信号终止容器。
4.2
过添加-d参数来实现。
[-t|--time[=10]]。
守护态运行
就没有继续运行的必要了。
了。这是因为对于Docker容器来说，
28第一部分Docker入门
注意
此外，当Docker容器中指定的应用终结时，容器也自动终止。
例如下面的命令会在后台运行容器：
更多的时候，需要让Docker容器在后台以守护态（Daemonized）形式运行。用户可以通
可以使用docker ps-a-a命令看到处于终止状态的容器的 ID信息。例如：
$sudo docker stop ce5
另外，可以使用dockerstop来终止一个运行中的容器：
ce5
可以使用docker
hello
hello
helloworld
$sudo docker logs ce5
要获取容器的输出信息，
UpAboutaminute
ce554267d7a4
CONTAINER ID
容器启动后会返回一个唯一的 ID，也可以通过docker ps命令来查看容器信息：
ce554267d7a4c34eefc92c5517051dc37b918b588736d0823e4c846596b04d83
$ sudo docker run -d ubuntu /bin/sh -c"while true; do echo hello world; sleep 1; done"
dockerkil1命令会直接发送SIGKILL信号来强行终止容器。
终止容器
sudo docker ps
world
world
。它会首先向容器发送SIGTERM信号，等待一段时间后（默认为10
stop来终止一个运行中的容器，命令的格式为dockerstop
ubuntu:latest
IMAGE
可以通过dockerlogs命令：
COMMAND
，当运行的应用（此处例子中为bash）退出后，容器也
determined_pik
"/bin/sh-c'whilet
CREATED
STATUS
，所创建的容器立刻终止。
例如对于上一节中只启动
About
PORTS
a minute ago
NAMES
---
## Page 43
候
attach命令
命令，以及nsenter工具等。
果需要进人容器进行操作，有多种方法，包括使用docker attach命令、docker exec
4.3
，所有窗口都会同步显示。当某个窗口因命令阻塞时，其他窗口也无法执行操作了。
但是使用 attach命令有时候并不方便。当多个窗口同时attach到同一个容器的时
docker attach是Docker自带的命令。下面示例如何使用该命令：
在使用-d参数时，
root@243c32535da7:/#
$sudo docker
Up 17 seconds
243c32535da7
CONTAINER ID
243c32535da7d142fb0e6df616a3c3ada0b8ab417937c853a9e1c251f499f550
进入容器
Up 14 seconds
ce554267d7a4
CONTAINER ID
$sudo docker ps
$ sudo docker restart ce5
此外，docker restart 命令会将-
Up5seconds
CONTAINER ID
ce5
$sudo docker start ce5
处于终止状态的容器，
e812617b41f6
d58050081fe3
ce554267d7a4
$sudodockerps-a-q
sudodocker run-idtubuntu
sudo docker
attach nostalgic_hypatia
ps
ubuntu:latest
IMAGE
determined_pike
ubuntu:latest
IMAGE
ubuntu:latest
IMAGE
，容器启动后会进人后台，用户无法看到容器中的信息。某些时候如
可以通过dockerstart命令来重新启动：
COMMAND
COMMAND
COMMAND
一个运行态的容器终止，
nostalgic_hypatia
"/bin/bash"
CREATED
"/bin/sh-c'whilet
CREATED
determined_pike
"/bin/sh-cwhilet
CREATED
STATUS
STATUS
STATUS
然后再重新启动它：
18 seconds ago
PORTS
PORTS
第4章容器29
PORTS
5minutes ago
NAMES
NAMES
4minutes ago
NAMES
5er5