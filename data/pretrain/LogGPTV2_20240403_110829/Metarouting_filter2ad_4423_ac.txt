missing value with the null signature ⊥. We could extend
the deﬁnition of ¹ on product algebras so that
(⊥, σB) ¹ (βA, βB) ⇔ (σA, σB) ¹ (⊥, βB) ⇔ σB ¹B βB.
That is, if one of the ﬁrst elements is ⊥, we ignore this
element and use only the ¹B preference relation of B. But
there is a problem with this. For any σA, βA, we have
(σA, σB) ¹ (⊥, σB) ¹ (σA, σB). Therefore (⊥, σB) ∼
(σA, σB). That is, if ¹ is to be a preference relation, it must
be that the ∼-class of every tuple (σA, σB) is identical to
that of (⊥, σB). This does not seem to be a fruitful approach
— the ﬁrst component serves no purpose!
Rather than modify the deﬁnition of ⊗, it seems more
reasonable to deﬁne a unary operator ⊥(A) that creates a
version of A that allows for the null signature ⊥. It then
seems reasonable that the ⊕ operation would then be some
combination of the following rules:
⊕
λ
⊥
ˆσA
σA
⊥
⊥ λ ⊕A σA
⊥
ˆσA
⊥
φ
The rule ˆσA ⊕ ⊥ = ˆσA allows a signature to be treated as
a label, and turns a null signature into ˆσA (so in this case,
we need to deﬁne L as (LA ∪ {⊥}) ] Σ). But how should
we deﬁne the preference of ⊥? Since ⊥ ⊕ ⊥ = ⊥ = λ ⊕ ⊥,
the resulting algebra will never be SM, no matter how the
preference of ⊥ is deﬁned. However, suppose that we want
⊥(A) to preserve M. Then ⊥ ⊕ σA = ⊥ tells us that for
all σ 6= φ, σ ¹ ⊥. That is, ⊥ must be a least preferred
signature. On the other hand, the rule ˆσB ⊕ ⊥ = σB tells
us that, to preserve M, we need ⊥ ¹ σ for all σ 6= φ. That
is, in this case ⊥ must be a most preferred signature.
To solve this issue we deﬁne four ﬂavors of ⊥(A). The
algebras ⊥(min, A) and ⊥(max, A) both have the ⊕ ta-
ble deﬁned above, but the ﬁrst takes ⊥ as a minimal ele-
ment, while the second takes ⊥ to be a maximal element.
Neither preserves M. Next we deﬁne two M-preserving vari-
ants, ⊥p(min, A), that gives ⊥ a minimal preference and
⊥p(max, A), that gives ⊥ a maximal preference. Their ⊕
tables are deﬁned as
⊥p(min, A)
σA
⊥
⊥ λ ⊕A σ
σB
φ
⊕
λ
σB
⊥p(max, A)
σA
⊕ ⊥
λ ⊥ λ ⊕A σ
⊥ ⊥
⊥
Note that with ⊥p(max, A), once an element is ⊥, it will
stay ⊥.
3.2 Scoped Product, A ¯ B
Another way to apply labels to product signature is to do
it point-wise:
⊕
λA
λB
hσA, σBi
hλA ⊕A σA, σBi
hσA, λB ⊕B σBi
This is mathematically clean, but it does not seem to be
very useful for the deﬁnition of routing protocols. However,
a small modiﬁcation produces
⊕
λB
hλA, ˆσBi
hσA, σBi
hλA ⊕A σA, ˆσBi
hσA, λB ⊕B σBi
That is, hλA, ˆσBi⊕hσA, σBi = hλA ⊕A σA, ˆσBi states that
λA is applied to the ﬁrst component while the second compo-
nent is replaced by ˆσB ∈ ΣB. The new label set L is deﬁned
to be (LA ×OB)] LB. This algebra, called the scoped prod-
uct, has an interesting interpretation — it captures routing
with administrative regions and boundaries in the style of
BGP. However, it does this in a completely generic fashion,
assuming only that algebra A is used between administrative
entities, while B is used inside of each administrative entity.
Figure 3 illustrates this with a simple scenario having two
administrative regions (enclosed in dashed lines). Region 1
is made of up of routers 1 and 2 and region 2 is made up
of routers 3 and 4. We do not want internal routing infor-
mation (using signature of B) to be exported beyond region
boundaries. We do want external information (using signa-
ture of A) to ﬂow into and out of administrative regions.
Suppose σ ∈ ΣA and β ∈ ΣB. We will use pairs hσ, βi
as signatures, with lexical preference. Inside of an admin-
istrative region, B labels only will be used to change the β
component.
For example, in Figure 3, router 1 originates the signature
hσ0, β0i, and passes this to router 2. The policy arc from
router 1 to router 2 is labeled with λ1
B ∈ LB, producing the
signature hσ0, β1i = hσ0, λ1
B ⊕B β0i at router 2. Router
3 is in another administrative region, and so the label on
the policy arc from router 2 to router 3 must supply both a
label λA ∈ LA and an initializing value β2 ∈ OB for the B
component. This produces the signature hσ1, β2i = hλA ⊕A
σ0, β2i at router 3. Finally, the internal link from router 3
to router 4 is labeled with λ2
B ∈ LB, producing the signature
hσ1, β3i = hσ1, λ2
B ⊕B β2i at router 4.
administrative 
region 1 
administrative 
region 2 
originating router 
router 1 
hσ0, β0i
λ1 = λ1
B
router 2
hσ0, β1i =
hσ0, λ1
B ⊕B β0i
λ2 = hλA, β2i
router 3
hσ1, β2i =
hλA ⊕A σ0, β2i
λ3 = λ2
B
router 4
hσ1, β3i =
hσ1, λ2
B ⊕B β2i
Figure 3: Illustration of the scoped product A ¯ B.
3.3 Disjunction, A  B
Suppose we want to deﬁne an operation that allows the
use of either A or B or both together. We deﬁne a new
signature set Σ as ΣA ] ΣB. Then force every σA ∈ ΣA to
have a higher preference than every σB ∈ ΣB. That is, if
σ1, σ2 ∈ ΣA]ΣB, then σ1 ¹ σ2 if σ1, σ2 ∈ ΣA and σ1 ¹A σ2,
or if σ1, σ2 ∈ ΣB and σ1 ¹B σ2, or if σ1 ∈ ΣA and σ2 ∈ ΣB.
Let t be an injection function that maps ΣA to ΣB. Deﬁne
the ⊕ operator of A t B as
σA
⊕
λA
λB
i
λA ⊕A σA
φ
t(σA)
σB
φ
λB ⊕B σB
φ
is in L and
(if p then λ1 else λ2) ⊕ σA =  λ1 ⊕ σA if p(σA)
λ2 ⊕ σA otherwise
We assume that predicates p are simple boolean formulas
constructed over atomic predicates over the domains as-
sociated with base algebras. The remarkable thing about
prog(A) is that it preserves both M and SM while greatly
increasing policy expressiveness. For example, diﬀerent “base
labels” (λ ∈ LA) can be applied to diﬀerent routes, based
on properties of the associated signatures.
3.5 Monotonicity Preservation
A ⊗ B A ¯ B A t B
A
B
M M
M
M SM SM
SM M
SM
SM SM SM
SM ∗
SM
−
−
M
SM
−
M
M
M
SM
−
Table 3: Binary operators of RAML.
Table 3 presents the preservation properties of the binary
operators. The last line of this table means that if A is SM,
then A ⊗ B is SM, no matter what properties hold for B.
This has very important protocol design implications. Fig-
ure 4 restates the property preservation as a design pattern
for n-ary products — if we want such products to be SM,
then it is enough to have a sequence of algebras having M,
followed by at least one algebra having SM, followed by any
routing algebras. Put another way, if you are going to have a
well-behaved n-ary product and you have some sub-algebras
that do not have any nice properties, then put them “to the
right” of well-behaved algebras in the product.
all M or SM
don’t care
A, . . . , Ak−1,
Ak+1, . . . , An)
}|
z
⊗(
|
{
SM
z}|{Ak ,
{z
SM
z
}|
{
}
We will use A  B to denote disjunction when the last rule
is not used.
3.4 Programmatic Labels, prog(A)
So far labels have been fairly simple constructs. We now
show how labels can be extended in a natural way to pro-
grammatic labels. Suppose that algebra A has labels LA and
operator ⊕A. The signature, preference relation, and origi-
nation set of prog(A) are those of A. The set L and the ⊕
operation are deﬁned inductively as follows. First, the set
LA is contained in L, and for all λA ∈ LA and all σA ∈ ΣA
we have λA ⊕A σA = λA ⊕ σA. Second, the rejection label
φ is in L and φ ⊕ σ = φ. Third, if λA, λB ∈ L, then the
sequential label λ = λA; λB is in L and
(λA; λB) ⊕ σA = λA ⊕ (λB ⊕ σA).
if p is a predicate over a signature set ΣA and
Fourth,
λ1, λ2 ∈ L, then the conditional label
λ = if p then λ1 else λ2
Figure 4: The design pattern for producing an SM
n-ary product.
We introduce one more useful (unary) operator. The al-
gebra flip(A) is identical to A in all respects except for its
preference relation, which is reversed:
σ1 ¹ σ2 ⇔ σ2 ¹A σ1
To properly treat the preservation properties of this operator
we need to introduce two new monotonicity properties, anti-
monotonicity (AM) and strict anti-monotonicity (SAM):
(AM) For all σ ∈ Σ, for all λ ∈ L, λ ⊕ σ ¹ σ.
(SAM) For all σ ∈ Σ − {φ}, for all λ ∈ L, λ ⊕ σ ≺ σ.
(Note that a routing algebra, such as op(n), can be both
M and AM.) The flip(A) operator then has the following
preservation property:
A
M
AM
SM
SAM
flip(A)
AM
M
SAM
SM
A full treatment of this would involve extending Table 3 to
indicate how AM and SAM are preserved. For space reasons
we do not do that here. But note that it is fairly easy to
show that flip(A ⊗ B) is equivalent to flip(A) ⊗ flip(B),
so that, at least for product signatures, we can always push
this operator down toward the leaf expressions.
Note that the algebra min(n) is AM, so that flip(min(n))
is M. For example, flip(min(5)) has this ⊕ table:
⊕ 5
1
1
2
2
3
3
4
4
5
5
4
1
2
3
4
4
3
1
2
3
3
3
2
1
2
2
2
2
1
1
1
1
1
1
a monotonicity constraint. The ⊕ operation of lm(n, A)
(lift to monotonicity) is deﬁned as
λ⊕hi, σi = 8<
:
hi, λ ⊕A σi
hi + 1, λ ⊕A σi
φ
if σ ¹A λ ⊕A σ
if λ ⊕A σ ≺A σ and i < n
otherwise
The operator lsm(n, A) (lift to strict monotonicity) is de-
ﬁned in a similar manner. The integer n is simply an upper
bound on the level counter. For example, the ⊕ table of
lm(2, min(5)) is presented in Table 4.
4. DOWN WITH BGP!
As mentioned, BGP is currently being used as an IGP.
Here we consider how RAML might be used to deﬁne more
suitable routing protocols. Many applications may need
only a RIP-like protocol that scales to large networks and
supports complex policy routing. The following routing al-
gebra, MyFirstIGPA, captures this well.
Note that the signature 5 is the most preferred signature,
yet ⊕ is deﬁned as x ⊕ y = min(x, y). We might deﬁne this
algebra as
prog(⊗(weight : add(1, 232),
router-path : simseq(232, 30),
tags : tags(string)))
width(n) def= flip(min(n)),
which would be useful as a monotonic (M) metric for band-
width. Another useful monotonic algebra is
reliability
def= flip(multr(0, 1)),
which can model the reliablity of a path when reliability
estimates are known for each link.
Since monotonicity properties are important, it is useful
to have operators that “coerce” any algebra to one in which
a monotonicity property holds. The unary operator fm(A)