### Simplified MSPastry Overlay Routing and Maintenance Algorithm

```plaintext
else
  routei(m, k)
  if (k is between Li.leftmost and Li.rightmost)
    next := pick j ∈ Li such that |k − j| is minimal
    r := shared-prefix-length(k, i)
    next := Ri(r, r-th-digit(k))
    if (next = null)
      next := pick j ∈ Li ∪ Ri : |k − j| < |k − i| and shared-prefix-length(k, j) ≥ r
    if (next ≠ i and next ≠ null)
      send m to next
    else
      receive-rooti(m, k)
```

**Figure 2: Simplified MSPastry overlay routing and maintenance algorithm.**

### Probing and Fault Detection

If a node \( i \) does not receive a probe reply from node \( j \) within \( T_0 \) seconds, the `PROBE-TIMEOUTi(j)` event is triggered. Probes are retried a few times with a large timeout to minimize false positives, i.e., marking a live node as faulty. If no reply is received after the maximum number of retries, \( j \) is marked as faulty.

Currently, MSPastry uses `max-probe-retries = 2` and `T_0 = 3s` (same as the TCP SYN timeout). This setting provides a good trade-off between the probability of false positives and overhead across a wide range of environments.

A node marked as faulty is removed from the routing state and added to the `failedi` list, and `done-probingi` is invoked. If there are no outstanding probes and the leaf set is incomplete, `done-probingi` initiates a leaf set repair. This is achieved by probing the leftmost node in the leaf set if the left side has fewer than \( l/2 \) nodes, and similarly for the right side. It is crucial to prevent repair from propagating dead nodes, which could otherwise bounce back and forth between two nodes. This is avoided because a node never inserts another node in its leaf set without receiving a message directly from that node.

We have generalized leaf set repair to handle cases where `Li.left` or `Li.right` are empty. The idea is to use the routing tables to aid repair. For example, if `Li.right` is empty, node \( i \) sends a leaf set probe to the closest node \( j \) in \( R_i \) or \( L_i \) to the right. Node \( j \) replies with the \( l + 1 \) nodes closest to \( i \) that are in \( R_j \) or \( L_j \). This enables efficient repair, converging in \( O(\log N) \) iterations even when a large fraction of overlay nodes fails simultaneously. We do not deliver messages to \( i \) while `Li.left` or `Li.right` is empty.

`SUSPECT-FAULTYi` abstracts the mechanism by which node \( i \) suspects another node is faulty. For example, nodes can send heartbeats to other nodes in their leaf set and trigger `SUSPECT-FAULTY` if they miss a heartbeat. A more efficient implementation is discussed in Section 4.1.

### Consistent Routing

The consistent routing algorithm iterates along the ring towards the correct leaf set while informing probed nodes about the probing node. A node \( i \) becomes active after receiving probe replies that agree on its leaf set value from all nodes in its leaf set. Since these leaf set members add \( i \) to their leaf set before sending the probe reply, nodes that join later will be informed about \( i \) and will probe it before they become active.

### Reliable Routing

Consistency alone is not sufficient for dependable routing. Messages may be lost due to link losses or node failures along the route. It is necessary to detect failures and repair routes to achieve reliable routing. MSPastry achieves reliable routing with good performance by using a combination of active probing and per-hop acknowledgments (acks).

MSPastry uses active probing to detect when nodes in the routing state fail. We already described active probing of leaf set nodes and eager repair of leaf sets when faults are detected. This is sufficient for consistency but it is also important to probe nodes in routing tables for reliability.

Every node \( i \) sends a liveness probe to each node \( j \) in its routing table every \( T_{rt} \) seconds. If no response is received from \( j \) within \( T_0 \) seconds, \( i \) sends another probe to \( j \). This is repeated a few times before \( j \) is marked as faulty. The number of retries and timeout are the same for leaf set and routing table probing.

Since routing table repair is not crucial for consistency and MSPastry can route around missing routing table entries, repair is performed lazily using periodic routing table maintenance and passive routing table repair. To prevent repair from propagating dead nodes, \( i \) never inserts a node in its routing table during repair without first receiving a message directly from that node.

Experimental results show that active probing can achieve an end-to-end loss rate in the order of a few percent with low overhead, even with high churn. However, the probing frequency required to achieve significantly lower loss rates is very high and is limited by the inverse of the round-trip time to the probed node. Additionally, active probing provides little help with link losses.

MSPastry uses per-hop acks to achieve lower loss rates with low overhead and to deal with link losses. Every node \( i \), along a message’s overlay route, buffers the message and starts a timer after forwarding the message to the next node \( j \). If \( j \) does not reply with an ack, \( i \) reroutes the message to an alternative node by executing `routei` with \( j \) excluded. Experimental results show that per-hop acks can achieve loss rates in the order of \( 10^{-5} \) with low overhead, even with a high rate of node failures and link losses.

Fast recovery from node and link failures is important to achieve low delay routes. This is achieved with aggressive retransmissions on missed per-hop acks. Timeouts are estimated as in TCP, but we set the retransmission timeouts more aggressively. This is possible because Pastry provides a node with several alternative next hops to reach a destination key (except at the very last hop). It is important not to mark a node faulty when it fails to send back an ack, as this is prone to false positives with aggressive timeouts. The node is temporarily excluded from the routing state but is probed as usual before being marked faulty. We stop excluding the node from routing if it replies to a probe. MSPastry uses this technique for all hops, including the last one by default. It is possible to improve consistency at the expense of latency by not excluding the root node for a key from routing when it fails to send back an ack but only when it is marked faulty.

Per-hop acks are not sufficient to achieve low delay routes because faults are detected only when there is traffic. The timeouts to recover from previously undetected node failures can still result in large delays. It is important to use active probing to keep the probability of finding faulty nodes along the route low and independent of the amount and distribution of application traffic.

Using both active probing and per-hop acks ensures very low loss rates with low delay and overhead. Applications that require guaranteed delivery can use end-to-end acks and retransmissions. Applications that do not require reliable routing can flag lookup messages to switch off per-hop-acks.

### Routing Performance

Routing performance is as important as dependability. The overlay should deliver lookup messages with low delay and overhead. Furthermore, performance should degrade gracefully with both node and link failures. This section describes the techniques used by MSPastry to achieve good performance in the presence of failures.

#### Low Overhead Failure Detection

Failure detection traffic is the main source of overhead in structured overlays. MSPastry uses three techniques to reduce failure detection traffic:

1. **Exploiting Overlay Structure**: MSPastry exploits the structure of the overlay to detect faulty leaf set members efficiently. Instead of sending heartbeat messages to all the nodes in its leaf set, each node sends a single heartbeat message to its left neighbor in the ID space every \( T_{ls} \) seconds. If a node \( i \) does not receive a message from its right neighbor \( j \) for \( T_{ls} + T_0 \) seconds, it triggers `SUSPECT-FAULTYi(j)` to probe \( j \). If it marks \( j \) as faulty, it sends leaf set probes to the other members of its leaf set to announce that \( j \) is faulty. The failed set in these probes informs other leaf set nodes that \( j \) has failed, but the probes also provide a candidate for each of these nodes to repair its leaf set. The replies from the nodes on \( j \)'s side of the leaf set provide \( i \) with a candidate replacement for \( j \).

   It is possible for several consecutive nodes in the ring to fail within a small time window. The left neighbor of the leftmost node in the set will eventually detect the failure, but it can take time linear on the number of nodes in the set to detect this failure. This is not a problem because it is extremely unlikely for a large number of consecutive nodes in the ring to fail, as node IDs are chosen randomly with uniform probability from the identifier space.

   This optimization is important because it makes the maintenance overhead independent of the leaf set size when there are no node arrivals or departures. This enables MSPastry to use large leaf sets to improve routing consistency and reduce the number of routing hops without incurring high overhead.

2. **Self-tuning Probing Periods**: Traces of deployed peer-to-peer systems show that failure rates vary significantly with both daily and weekly patterns, and that the failure rate in open systems is more than an order of magnitude higher than in a corporate environment. This argues for adapting probing periods to achieve a target delay with a minimum amount of control traffic.

   The expected probability of finding a faulty node along an overlay route can be computed as a function of the parameters of the algorithm. This probability, called the raw loss rate, is the loss rate in the absence of acks and retransmissions. The probability of forwarding a message to a faulty node at each hop is \( P_f(T, \mu) = 1 - e^{-T \mu} \), where \( T \) is the maximum time it takes to detect the fault and \( \mu \) is the failure rate. There are approximately \( h = \frac{\log_2 N}{b-1} \) overlay hops in a Pastry route on average. Typically, the last hop uses the leaf set, and the others use the routing table. So the raw loss rate, \( L_r \), can be computed as follows:

   \[
   L_r = 1 - (1 - P_f(T_{ls} + (r+1)T_0, \mu)) \times (1 - P_f(T_{rt} + (r+1)T_0, \mu))^{h-1}
   \]

   We fix the number of retries \( r = 2 \) and \( T_0 = 3s \) as discussed earlier. The current implementation also fixes \( T_{ls} = 30s \), which provides good performance and strong consistency in realistic environments. We tune \( T_{rt} \) to achieve the specified target raw loss rate with minimum overhead by periodically recomputing it using the loss rate equation with the current estimates of \( N \) and \( \mu \). We can choose \( L_r \) to achieve a target delay because the average increase in delay due to failed nodes is \( \delta \approx L_r \times T_h \), where \( T_h \) is the average timeout used in per-hop retransmissions.

   We use the density of node IDs in the leaf set to estimate \( N \). The value of \( \mu \) is estimated by using node failures in the routing table and leaf set. If nodes fail with rate \( \mu \), a node with \( M \) unique nodes in its routing state should observe \( K \) failures in time \( \frac{K}{M\mu} \). Every node remembers the time of the last \( K \) failures. A node inserts its current time in the history when it joins the overlay. If there are only \( k < K \) failures in the history, we compute the estimate as if there was a failure at the current time. The estimate of \( \mu \) is:

   \[
   \mu = \frac{k}{M \times T_{kf}}
   \]

   where \( T_{kf} \) is the time span between the first and the last failure in the history. Every node computes \( T_{rt} \) using the local estimates of \( \mu \) and \( N \) and piggybacks the current estimate in protocol messages. Nodes set \( T_{rt} \) to the median of the values of \( T_{rt} \) received from other nodes in their routing state. There is a lower bound of \( (retries + 1)T_0 \) on \( T_{rt} \).

   Our experiments indicate that self-tuning is very effective; we can set \( L_r \) to a fixed value and achieve nearly constant delay over a wide range of node failure rates while using the minimum amount of probing traffic for the routing table. This technique builds on preliminary work that appeared in [15].

3. **Suppression of Failure Detection Traffic**: MSPastry uses any messages exchanged between two nodes to replace failure detection messages. For example, if \( i \) forwards a message to \( j \) and receives back an ack, this suppresses a routing table liveness probe from \( i \) to \( j \) or a leaf set heartbeat in either direction. This is very effective; it eliminates all routing table probes when there is enough lookup traffic.

#### Low Overhead Proximity Neighbor Selection

Proximity neighbor selection (PNS) provides low delay but increases overhead because it requires distance probes to measure round-trip delays. MSPastry measures round-trip delays by sending a sequence of distance probes spaced by a fixed interval and taking the median of the returned values. For example, the default configuration sends 3 probes spaced by one second. However, MSPastry uses a single probe to estimate round-trip delays when running the nearest neighbor algorithm (see Section 2). This reduces join latency and does not affect route delays significantly because the remaining probes use more samples.

It is frequent for nodes to estimate the round-trip delay to each other in the constrained gossiping implementation of PNS. MSPastry exploits this symmetry: after \( i \) measures the round-trip delay to \( j \), it sends a message to \( j \) with the measured value, and \( j \) considers \( i \) for inclusion in its routing table. If \( i \) and \( j \) start estimating the distance concurrently, this optimization is not effective. We avoid this by using node IDs to break the symmetry and by having a joining node initiate distance probing of the nodes in its routing state while these nodes wait for the measured distances. Symmetric probing almost halves the number of messages in distance probes.

### Experimental Evaluation

This section presents results of experiments to evaluate the performance and dependability of MSPastry. The first set of experiments ran on a network simulator to explore the impact of controlled variations in environmental parameters at large scale. We also measured a real deployment of the Squirrel Web cache [12] on top of MSPastry. The code that runs in the simulator and in the real deployment is the same, with the exception of low-level messaging.

#### Experimental Setup for Simulations

We used a simple packet-level discrete event simulator that supports trace-based fault-injection and different network topologies.

**Traces of Node Arrivals and Departures**: The traces specify the time of node arrivals and failures. We used three traces derived from real-world measurements of deployed peer-to-peer systems.

- **Gnutella Trace**: Obtained from a measurement study of node arrivals and departures in the Gnutella file-sharing application [22]. The study monitored 17,000 unique nodes for 60 hours by probing each node every seven minutes. The average session time in the trace is 2.3 hours, and the median is 1 hour. The number of active nodes varies between 1300 and 2700.
  
- **Overnet Trace**: Based on a study of the OverNet file-sharing application [1]. The study monitored 1,468 unique OverNet nodes for 7 days by probing them every 20 minutes. The average session time is 134 minutes, and the median is 90 minutes. The number of active nodes varies between 500 and 1,000.

### Results

[Insert relevant graphs and data here, as the provided text does not include specific experimental results.]

### Conclusion

MSPastry effectively balances the need for consistent and reliable routing with the overhead of failure detection and maintenance. By using a combination of active probing, per-hop acks, and adaptive tuning, MSPastry achieves low loss rates and delays, even in highly dynamic and failure-prone environments.