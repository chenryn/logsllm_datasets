else
else
routei(m, k)
if (k between Li.leftmost and Li.rightmost)
next := pick j ∈ Li such that |k − j| is minimal
r := shared-preﬁx-length(k, i)
next := Ri(r, r-th-digit(k))
if (next = null)
next := pick j ∈ Li ∪ Ri : |k − j| < |k − i|
∧ shared-preﬁx-length(k, j) ≥ r
if (next (cid:5)= i ∧ next (cid:5)= null)
send m to next
else
receive-rooti(m, k)
Figure 2: Simpliﬁed MSPastry overlay routing and maintenance algorithm.
does not receive a probe reply from j within To seconds,
PROBE-TIMEOUTi(j) ﬁres. Probes are retried a few times
and we use a large timeout to reduce the probability of false
positives, i.e., marking a live node faulty. But if no reply is
received after the maximum number of retries, j is marked
faulty. Currently, MSPastry uses max-probe-retries = 2 and
To = 3s (same as the TCP SYN timeout). We experimented
with other values but this setting provides a good trade-
off between the probability of false positives and overhead
across a large range of environments.
A node that is marked faulty is removed from the routing
state and added to failedi, and done-probingi is invoked.
If there are no outstanding probes and the leaf set is not
complete, done-probingi initiates a leaf set repair. This is
achieved simply by probing the leftmost node in the leaf
set if the left side of the leaf set has less than l/2 nodes
and similarly for the right side. It is important to prevent
repair from propagating dead nodes, otherwise, dead nodes
could bounce back and forth between two nodes. This is
avoided because a node never inserts another node in its leaf
set without receiving a message directly from that node.
We have generalized leaf set repair to handle the case
when Li.left or Li.right are empty. The idea is to use the
routing tables to aid repair. For example, if Li.right is
empty, i sends a leaf set probe to the closest node j in Ri or
Li to the right. Node j replies with the l + 1 nodes closest
to i that are in Rj or Lj. This enables efﬁcient repair be-
cause it converges in O(log N) iterations even when a large
fraction of overlay nodes fails simultaneously. We do not
deliver messages to i while Li.left or Li.right is empty.
SUSPECT-FAULTYi abstracts the mechanism by which i
comes to suspect that another node is faulty. For example,
nodes can send heartbeats to other nodes in their leaf set
and trigger SUSPECT-FAULTY if they miss a heartbeat. We
discuss a more efﬁcient implementation in Section 4.1.
The intuition behind the consistent routing algorithm is
that probing iterates along the ring towards the correct leaf
set while informing probed nodes about the probing node.
A node i becomes active after receiving probe replies that
agree on its leaf set value from all nodes in its leaf set. Since
these leaf set members add i to their leaf set before sending
the probe reply, nodes that join later will be informed about
i and will probe it before they become active.
3.2. Reliable routing
Consistency is not sufﬁcient for dependable routing.
Messages may be lost when they are routed through the
overlay because of link losses or node failures along the
route. It is necessary to detect failures and repair routes to
achieve reliable routing. MSPastry achieves reliable routing
with good performance by using a combination of active
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:47:52 UTC from IEEE Xplore.  Restrictions apply. 
probing and per-hop acks. The importance of this combina-
tion has been noted in concurrent work [19, 9, 14].
MSPastry uses active probing to detect when nodes in
the routing state fail. We already described active probing
of leaf set nodes and eager repair of leaf sets when faults
are detected. This is sufﬁcient for consistency but it is also
important to probe nodes in routing tables for reliability.
Every node i sends a liveness probe to each node j in its
routing table every Trt seconds. If no response is received
from j within To seconds, i sends another probe to j. This
is repeated a few times before j is marked faulty and we use
a large timeout to reduce the probability of false positives.
The number of retries and timeout are the same for leaf set
and routing table probing.
Since routing table repair is not crucial for consistency
and MSPastry can route around missing routing table en-
tries, repair is performed lazily using the periodic routing
table maintenance and passive routing table repair (as de-
scribed earlier). To prevent repair from propagating dead
nodes back and forth, i never inserts a node in its routing ta-
ble during repair without ﬁrst receiving a message directly
from that node.
The experimental results show that active probing can
achieve an end-to-end loss rate in the order of a few per-
cent with low overhead even with high churn. However, the
probing frequency required to achieve signiﬁcantly lower
loss rates is very high and is limited by the inverse of the
round-trip time to the probed node. Additionally, active
probing provides little help with link losses.
MSPastry uses per-hop acks to achieve lower loss rates
with low overhead and to deal with link losses. Every node
i, along a message’s overlay route, buffers the message and
starts a timer after forwarding the message to the next node
j. If j does not reply with an ack, i reroutes the message to
an alternative node by executing routei with j excluded. The
experimental results show that per-hop acks can achieve
loss rates in the order of 10−5 with low overhead even with
a high rate of node failures and link losses.
Fast recovery from node and link failures is important to
achieve low delay routes. We achieve this with aggressive
retransmissions on missed per-hop acks. Timeouts are esti-
mated as in TCP [13] but we set the retransmission timeouts
more aggressively. This is possible because Pastry provides
a node with several alternative next hops to reach a destina-
tion key (except at the very last hop). It is important not to
mark a node faulty when it fails to send back an ack because
this is prone to false positives with aggressive timeouts. The
node is temporarily excluded from the routing state but it is
probed as usual before being marked faulty. We stop exclud-
ing the node from routing if it replies to a probe. MSPastry
uses this technique for all hops including the last one by
default. It is possible to improve consistency at the expense
of latency by not excluding the root node for a key from
routing when it fails to send back an ack but only when it is
marked faulty.
Per-hop acks are not sufﬁcient to achieve low delay
routes because faults are detected only when there is trafﬁc.
The timeouts to recover from previously undetected node
failures can still result in large delays. It is important to
use active probing to keep the probability of ﬁnding faulty
nodes along the route low and independent of the amount
and distribution of application trafﬁc.
Using both active probing and per-hop acks ensures very
low loss rates with low delay and overhead. Applications
that require guaranteed delivery can use end-to-end acks
and retransmissions. Applications that do not require reli-
able routing can ﬂag lookup messages to switch off per-
hop-acks.
4. Routing performance
Routing performance is as important as dependability.
The overlay should deliver lookup messages with low delay
and overhead. Furthermore, performance should degrade
gracefully with both node and link failures. This section de-
scribes the techniques used by MSPastry to achieve good
performance in the presence of failures.
4.1. Low overhead failure detection
Failure detection trafﬁc is the main source of overhead
in structured overlays. MSPastry uses three techniques to
reduce failure detection trafﬁc.
Exploiting overlay structure MSPastry exploits the
structure of the overlay to detect faulty leaf set members
efﬁciently. Instead of sending heartbeat messages to all the
nodes in its leaf set, each node sends a single heartbeat mes-
sage to its left neighbour in the id space every Tls seconds. If
a node i does not receive a message from its right neighbour
j for Tls + To seconds, it triggers SUSPECT-FAULTYi(j)
(see Figure 2) to probe j. If it marks j as faulty (in
PROBE-TIMEOUTi(j)), it sends leaf set probes to the other
members of its leaf set to announce that j is faulty. The
failed set in these probes informs other leaf set nodes that j
has failed but the probes also provide a candidate for each
of these nodes to repair its leaf set. The replies from the
nodes on j’s side of the leaf set provide i with a candidate
replacement for j.
It is possible for several consecutive nodes in the ring to
fail within a small time window. The left neighbor of the
leftmost node in the set will eventually detect the failure but
it can take time linear on the number of nodes in the set to
detect this failure. This is not a problem because it is ex-
tremely unlikely for a large number of consecutive nodes in
the ring to fail because nodeIds are chosen randomly with
uniform probability from the identiﬁer space.
This optimization is important because it makes the
maintenance overhead independent of the leaf set size
when there are no node arrivals or departures. This enables
MSPastry to use large leaf sets to improve routing consis-
tency and reduce the number of routing hops without incur-
ring high overhead.
Self tuning probing periods The traces of deployed
peer-to-peer systems in Section 5 show that failure rates
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:47:52 UTC from IEEE Xplore.  Restrictions apply. 
vary signiﬁcantly with both daily and weekly patterns, and
that the failure rate in open systems is more than an order
of magnitude higher than in a corporate environment. This
argues for adapting probing periods to achieve a target delay
with a minimum amount of control trafﬁc.
T µ(1− e
We can compute the expected probability of ﬁnding a
faulty node along an overlay route as a function of the pa-
rameters of the algorithm. We call this probability the raw
loss rate because it is the loss rate in the absence of acks and
retransmissions. The probability of forwarding a message to
a faulty node at each hop is Pf (T, µ) = 1− 1
−T µ),
where T is the maximum time it takes to detect the fault
and µ is the failure rate. There are approximately h =
2b−1
log2bN overlay hops in a Pastry route on average. Typ-
2b
ically, the last hop uses the leaf set and the others use the
routing table. So the raw loss rate, Lr, can be computed as
follows:
Lr = 1−(1−Pf (Tls +(r+1)To, µ)).(1−Pf (Trt +(r+1)To, µ))h−1
We ﬁx the number of retries r = 2 and To = 3s as dis-
cussed earlier. The current implementation also ﬁxes Tls =
30s which provides good performance and strong consis-
tency in realistic environments. We tune Trt to achieve the
speciﬁed target raw loss rate with minimum overhead by pe-
riodically recomputing it using the loss rate equation with
the current estimates of N and µ. We can choose Lr to
achieve a target delay because the average increase in delay
due to failed nodes is δ ≈ Lr × Th, where Th is the average
timeout used in per-hop retransmissions.
We use the density of nodeIds in the leaf set to estimate
N [3]. The value of µ is estimated by using node failures in
the routing table and leaf set. If nodes fail with rate µ, a node
with M unique nodes in its routing state should observe K
failures in time K
Mµ . Every node remembers the time of the
last K failures. A node inserts its current time in the history
when it joins the overlay. If there are only k < K failures in
the history, we compute the estimate as if there was a failure
at the current time. The estimate of µ is
, where Tkf
is the time span between the ﬁrst and the last failure in the
history. Every node computes T l
rt using the local estimates
of µ and N and piggybacks the current estimate in protocol
messages. Nodes set Trt to the median of the values of T l
rt
received from other nodes in their routing state. There is a
lower bound of (retries + 1)To on Trt.
M×Tkf
k
Our experiments indicate that self-tuning is very effec-
tive; we can set Lr to a ﬁxed value and achieve nearly con-
stant delay over a wide range of node failure rates while
using the minimum amount of probing trafﬁc for the rout-
ing table. This technique builds on preliminary work that
appeared in [15].
Supression of failure detection trafﬁc MSPastry uses
any messages exchanged between two nodes to replace fail-
ure detection messages. For example, if i forwards a mes-
sage to j and receives back an ack, this suppresses a routing
table liveness probe from i to j or a leaf set heartbeat in ei-
ther direction. This is very effective; it eliminates all routing
table probes when there is enough lookup trafﬁc.
4.2. Low overhead proximity neighbor selection
Proximity neighbour selection (PNS) provides low de-
lay but it increases overhead because it requires distance
probes to measure round-trip delays. MSPastry measures
round-trip delays by sending a sequence of distance probes
spaced by a ﬁxed interval and taking the median of the val-
ues returned. For example, the default conﬁguration sends
3 probes spaced by one second. But MSPastry uses a sin-
gle probe to estimate round-trip delays when running the
nearest neighbour algorithm (see Section 2). This reduces
join latency and it does not affect route delays signiﬁcantly
because the remaining probes use more samples.
It is frequent for nodes to estimate the round-trip delay to
each other in the constrained gossiping implementation of
PNS. MSPastry exploits this symmetry: after i measures the
round-trip delay to j, it sends a message to j with the mea-
sured value and j considers i for inclusion in its routing ta-
ble. If i and j start estimating the distance concurrently, this
optimization is not effective. We avoid this by using nodeIds
to break the symmetry and by having a joining node initiate
distance probing of the nodes in its routing state while these
nodes wait for the measured distances. Symmetric probing
almost halves the number of messages in distance probes.
5. Experimental evaluation
This section presents results of experiments to evaluate
the performance and dependability of MSPastry. The ﬁrst
set of experiments ran on a network simulator to explore
the impact of controlled variations in environmental param-
eters at large scale. We also measured a real deployment of
the Squirrel Web cache [12] on top of MSPastry. The code
that runs in the simulator and in the real deployment is the
same with the exception of low level messaging.
5.1. Experimental setup for simulations
We used a simple packet-level discrete event simulator
that supports trace-based fault-injection and different net-
work topologies.
Traces of node arrivals and departures The traces
specify the time of node arrivals and failures. We used three
traces that were derived from real-world measurements of
deployed peer-to-peer systems.
The Gnutella trace was obtained from a measurement
study of node arrivals and departures in the Gnutella
ﬁle sharing application [22]. The study monitored 17,000
unique nodes for 60 hours by probing each node every seven
minutes. The average session time in the trace is 2.3 hours
and the median is 1 hour. The number of active nodes varies
between 1300 and 2700.
The Overnet trace is based on a study of the OverNet ﬁle
sharing application [1]. The study monitored 1,468 unique
OverNet nodes for 7 days by probing them every 20 min-
utes. The average session time is 134 minutes and the me-
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:47:52 UTC from IEEE Xplore.  Restrictions apply. 
3.5E-04
3.0E-04
2.5E-04
2.0E-04
1.5E-04
1.0E-04
5.0E-05
d
n
o
c
e
s
r
e
p
e
d
o
n
r
e
p
s
e
r
u
l
i
a
f
e
d
o
N
0.0E+00
d
n
o
c
e
s
r
e
p
e
d
o
n
r
e
p
s
e
r
u
l
i
a
f
e
d
o
N
3.5E-04
3.0E-04
2.5E-04
2.0E-04
1.5E-04
1.0E-04
5.0E-05
0.0E+00
0
10
20
30
40
50
60
0
24
48
Time (Hours)
2.0E-05
1.5E-05
1.0E-05
5.0E-06
d
n
o
c
e
s
r
e
p
e
d
o