### PHP 对象序列化与反序列化漏洞

在 PHP 中，对象的序列化和反序列化过程中可能会出现安全问题。以下是一个简单的示例来说明这个问题。

#### 示例代码

```php
class Demo {
    public $data;

    public function __construct($data) {
        $this->data = $data;
        echo "construct\n";
    }

    public function __wakeup() {
        echo "wake up\n";
    }

    public function __destruct() {
        echo "Data's value is " . $this->data . ".\n";
        echo "destruct\n";
    }
}

// 序列化一个对象
var_dump(serialize(new Demo("raw value")));
```

**输出:**
```
construct
Data's value is raw value.
destruct
string(44) "O:4:"Demo":1:{s:4:"data";s:9:"raw value";}"
```

将序列化的字符串修改后执行反序列化：

```php
unserialize('O:4:"Demo":1:{s:4:"data";s:15:"malicious value";}');
```

**输出:**
```
wake up
Data's value is malicious value.
destruct
```

从上面的例子可以看出，通过修改序列化的字符串，可以改变对象的属性值。如果 `__wakeup` 或 `__destruct` 方法中包含敏感操作（如文件读写或数据库操作），则可能存在安全风险。

#### 漏洞防护

为了防止这种攻击，可以在 `__wakeup` 方法中加入验证逻辑。例如：

```php
public function __wakeup() {
    if ($this->data != 'raw value') {
        $this->data = 'raw value';
    }
    echo "wake up\n";
}
```

然而，这种方法仍然可能被绕过。因此，更有效的防护措施包括：

- **禁用不安全的函数**：通过 `disable_functions` 配置项禁用危险的函数。
- **限制目录访问**：通过 `open_basedir` 限制 PHP 可访问的目录。
- **远程引用限制**：通过 `allow_url_include` 和 `allow_url_fopen` 限制远程文件包含和打开。

### PHP 内置流

PHP 提供了多种内置流协议，用于统一数据操作。这些流协议可以通过 `fopen`、`file_get_contents` 等函数进行操作。

#### 支持的流协议

- **file://**：访问本地文件系统
- **http://**：访问 HTTP(s) 网址
- **ftp://**：访问 FTP(s) URLs
- **php://**：访问各个输入/输出流（I/O streams）
- **zlib://**：压缩流
- **data://**：数据（RFC 2397）
- **glob://**：查找匹配的文件路径模式
- **phar://**：PHP 归档
- **ssh2://**：Secure Shell 2
- **rar://**：RAR
- **ogg://**：音频流
- **expect://**：处理交互式的流

#### 输入输出流

- **php://stdin**：只读，访问标准输入
- **php://stdout**：只写，访问标准输出
- **php://stderr**：只写，访问标准错误输出
- **php://fd**：直接访问指定的文件描述符
- **php://memory**：数据存储在内存中
- **php://temp**：数据存储在内存中，超过预定义限制后存入临时文件
- **php://input**：只读，访问请求的原始数据

#### 过滤器

`php://filter` 是一种元封装器，用于在数据流打开时应用筛选过滤器。PHP 默认提供了一些内置过滤器，例如：

- **字符串过滤器**：`string.rot13`, `string.toupper`, `string.tolower`, `string.strip_tags`
- **转换过滤器**：`convert.base64-encode`, `convert.base64-decode`, `convert.quoted-printable-encode`, `convert.quoted-printable-decode`, `convert.iconv.*`
- **压缩过滤器**：`zlib.deflate`, `zlib.inflate`, `bzip2.compress`, `bzip2.decompress`
- **加密过滤器**：`mcrypt.‘ciphername’`, `mdecrypt.‘ciphername’`

#### 利用技巧

- **LFI**：使用 `php://filter/convert.base64-encode/resource=index.php` 读取文件并编码
- **XXE**：读取文件时会解析报错，可用 base64 编码绕过
- **Base64 编码**：弃掉未在码表内的字符，可用于绕过一些文件格式

通过了解这些机制和技巧，可以更好地理解和防范相关的安全问题。