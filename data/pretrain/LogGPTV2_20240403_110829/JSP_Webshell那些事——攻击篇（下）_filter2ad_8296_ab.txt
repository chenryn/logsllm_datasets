直接查看此时StandardContext的内容，我们会有一个更直观的了解
注入内存马实际上是模拟了在web.xml中写配置的过程，两者是一一对应的。其中filterDefs存放了filter的定义，比如名称跟对应的类，对应web.xml中如下的内容
        filterDemo
        com.yzddmr6.filterDemo
filterConfigs除了存放了filterDef还保存了当时的Context，从下面两幅图可以看到两个context是同一个东西
FilterMaps则对应了web.xml中配置的，里面代表了各个filter之间的调用顺序。
即对应web.xml中的如下内容
        filterDemo
        /*
都添加完之后， 调用doFilter ，进入过滤阶段。
#### 实现步骤
综上所述，如果要实现filter型内存马要经过如下步骤：
  * 创建恶意filter
  * 用filterDef对filter进行封装
  * 将filterDef添加到filterDefs跟filterConfigs中
  * 创建一个新的filterMap将URL跟filter进行绑定，并添加到filterMaps中
要注意的是，因为filter生效会有一个先后顺序，所以一般来讲我们还需要把我们的filter给移动到FilterChain的第一位去。
每次请求createFilterChain都会依据此动态生成一个过滤链，而StandardContext又会一直保留到Tomcat生命周期结束，所以我们的内存马就可以一直驻留下去，直到Tomcat重启。
### Servlet型
#### 注册流程
这次我们换种方式：不进行一步步的调试，直接查看添加一个servlet后StandardContext的变化
            servletDemo
            com.yzddmr6.servletDemo
            servletDemo
            /demo
可以看到我们的servlet被添加到了children中，对应的是使用StandardWrapper这个类进行封装
一个child对应一个封装了Servlet的StandardWrapper对象，其中有servlet的名字跟对应的类。StandardWrapper对应配置文件中的如下节点：
            servletDemo
            com.yzddmr6.servletDemo
类似FilterMaps，servlet也有对应的servletMappings，记录了urlParttern跟所对应的servlet的关系
servletMappings对应配置文件中的如下节点
            servletDemo
            /demo
#### 实现步骤
所以综上所述，Servlet型内存Webshell的主要步骤如下：
  * 创建恶意Servlet
  * 用Wrapper对其进行封装
  * 添加封装后的恶意Wrapper到StandardContext的children当中
  * 添加ServletMapping将访问的URL和Servlet进行绑定
### Listener型
目前公开提到的只有Filter
Servlet两种内存Webshell，但是实际上通过Listener也可以实现内存马。并且Listener型webshell在三者中的优先级最高，所以危害其实是更大的。
> 关于监听器的详细介绍可以参考这篇文章
>
>
> 
#### Listener的分类
Listener主要分为以下三个大类：
  * ServletContext监听
  * Session监听
  * Request监听
其中前两种都不适合作为内存Webshell，因为涉及到服务器的启动跟停止，或者是Session的建立跟销毁，目光就聚集到第三种对于请求的监听上面，其中最适合作为Webshell的要数ServletRequestListener，因为我们可以拿到每次请求的的事件：ServletRequestEvent，通过其中的getServletRequest()函数就可以拿到本次请求的request对象，从而加入我们的恶意逻辑
。
#### 实现步骤
在ServletContext中可以看到addListener方法，发现此方法在ApplicationContext实现
javax.servlet.ServletContext#addListener(java.lang.String)
跟进org.apache.catalina.core.ApplicationContext#addListener(java.lang.String)，发现调用了同类中的重载方法
跟进org.apache.catalina.core.ApplicationContext#addListener(T)，发现遇到了跟添加filter很相似的情况，在开始会先判断Tomcat当前的生命周期是否正确，否则就抛出异常。实际上最核心的代码是调用了
this.context.addApplicationEventListener(t)，所以我们只需要反射调用addApplicationEventListener既可达到我们的目的。
    public  void addListener(T t) {
            if (!this.context.getState().equals(LifecycleState.STARTING_PREP)) {
                throw new IllegalStateException(sm.getString("applicationContext.addListener.ise", new Object[]{this.getContextPath()}));
            } else {
                boolean match = false;
                if (t instanceof ServletContextAttributeListener || t instanceof ServletRequestListener || t instanceof ServletRequestAttributeListener || t instanceof HttpSessionIdListener || t instanceof HttpSessionAttributeListener) {
                    this.context.addApplicationEventListener(t);
                    match = true;
                }
                if (t instanceof HttpSessionListener || t instanceof ServletContextListener && this.newServletContextListenerAllowed) {
                    this.context.addApplicationLifecycleListener(t);
                    match = true;
                }
                if (!match) {
                    if (t instanceof ServletContextListener) {
                        throw new IllegalArgumentException(sm.getString("applicationContext.addListener.iae.sclNotAllowed", new Object[]{t.getClass().getName()}));
                    } else {
                        throw new IllegalArgumentException(sm.getString("applicationContext.addListener.iae.wrongType", new Object[]{t.getClass().getName()}));
                    }
                }
            }
        }
综上所述，Listener类型Webshell的实现步骤如下：
  * 创建恶意Listener
  * 将其添加到ApplicationEventListener中去
Listener的添加步骤要比前两种简单得多，优先级也是三者中最高的。
#### 实现效果
首先注入一个恶意的listener事件监听器
访问内存Webshell，一片空白说明注入成功
在任意路径下加上?mr6=xxx即可执行命令
## 降维打击篇
本部分主要分享一些利用JSP特性来对抗语法树类引擎的技巧。
### “非主流”JSP语法
上面提到JSP在第一次运行的时候会先被Web容器，如Tomcat翻译成Java文件，然后才会被Jdk编译成为Class加载到jvm虚拟机中运行。JDK在编译的时候只看java文件的格式是否正确。而Tomcat在翻译JSP的不会检查其是否合乎语法。
所以我们就可以利用这一点，故意构造出不符合语法规范的JSP样本，来对抗检测引擎的AST分析。
可以看到编译后的文件刚好把上下文的try catch闭合，形成了合法的Java源文件，所以能够通过JDK的编译正常运行。
### “特殊”内置对象
继续来看翻译后的Java文件，可以看到翻译后的Servlet继承了org.apache.jasper.runtime.HttpJspBase类
在_jspService中有我们写的业务逻辑，在此之前可以看到一系列包括request，response，pageContext等内置对象的赋值操作。其中发现pageContext会赋值给_jspx_page_context，所以就可以直接使用_jspx_page_context来代替pageContext，帮助我们获取参数。
引擎如果没有识别出_jspx_page_context就可能当作未定义变量来处理，从而导致污点丢失。
### 利用Unicode编码
JSP可以识别Unicode编码后的代码，这个特性已经被大家所知。如果引擎没有对样本进行Unicode解码处理，就可以直接造成降维打击。
### 利用HTML实体编码
除了JSP以外，还有一种可以动态解析的脚本类型叫JSPX，可以理解成XML格式的JSP文件。在XML里可以通过实体编码来对特殊字符转义，JSPX同样继承了该特性。我们就可以利用这个特点，来对敏感函数甚至全文进行编码。
### 利用CDATA拆分关键字
XML还有个特性为CDATA区段。
同样可以利用这一点，将关键字进行拆分打乱，以干扰引擎的分析。
由于安骑士采用的是基于反汇编跟字节码的检测技术，所以并不会被上文中表面形式的混淆所干扰。
## 最后
Java博大精深，深入挖掘还可以发现更多有趣的特性。本文仅为抛砖引玉，如果有不严谨的地方欢迎指正。
### 关于我们
阿里云安全-能力建设团队以安全技术为本，结合云计算时代的数据与算力优势，建设全球领先的企业安全产品，为阿里集团以及公有云百万用户的基础安全保驾护航。
团队研究方向涵盖WEB安全、二进制安全、企业入侵检测与响应、安全数据分析、威胁情报等。
知乎链接：