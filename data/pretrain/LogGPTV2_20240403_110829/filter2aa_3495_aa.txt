### Apple Watch Jailbreaking: An In-Depth Analysis

#### Overview
**Date:** July 27-30, 2017

#### Speaker: Max Bazaliy
- **Role:** Security Researcher at Lookout
- **Notable Work:** Lead researcher on the Pegasus exploit chain
- **Focus Areas:** Advanced exploitation techniques
- **Affiliations:** Co-founder of the Fried Apple team
- **Contributions:** Author of iOS, tvOS, and watchOS jailbreaks

#### Apple Watch Specifications (2015 Model)
- **Processor:** Apple S1/S2
- **Architecture:** ARMv7k 32-bit
- **RAM:** 512 MB
- **Operating System:** watchOS

#### Why Jailbreak an Apple Watch?
- **Fun and Exploration:** It's an engaging challenge for security researchers.
- **Access to Sensitive Data:** Gaining access to user data can be a significant security concern.
- **Running Tools:** Ability to run tools like radare or Frida on the watch.
- **Attack Vector:** The watch can serve as an attack vector for compromising connected iPhones.

#### Apple Watch Security Features
- **Secure Boot Chain:** Ensures the integrity of the boot process.
- **Mandatory Code Signing:** Requires all code to be signed by a trusted authority.
- **Sandboxing:** Limits the actions that apps can perform.
- **Exploit Mitigations:** Various protections against common exploits.
- **Secure Enclave Processor (2nd Generation Only):** Provides hardware-level security.
- **Data Protection:** Encrypts and protects user data.

#### Possible Attack Vectors
- **Malformed USB Descriptor:** Requires a physical connection via a cable.
- **Malformed Emails, Messages, Photos, etc.**
- **Application Extension-Based Attacks:** Exploiting vulnerabilities in app extensions.

#### Attack Plan
1. **Leak Kernel Base:** Identify the base address of the kernel.
2. **Dump Whole Kernel:** Extract the entire kernel.
3. **Find Gadgets and Set Up Primitives:** Identify useful code snippets and set up necessary conditions.
4. **Disable Security Restrictions:** Bypass security measures.
5. **Run SSH Client on the Watch:** Establish remote access.

#### Bugs of Interest
- **CVE-2016-4656:** osunserialize bug
- **CVE-2016-4669:** mach_port register
- **CVE-2016-7644:** set_dp_control_port
- **CVE-2017-2370:** voucher extract recipe

#### Leaking Kernel Slide
- **CVE-2016-4655 and CVE-2016-4680:**
  - **Issue:** Missing bounds checking in object constructors.
  - **Exploit:** Use an OSNumber object with a high number of bits.
  - **Outcome:** Stack memory is leaked, which can be triggered from within an appâ€™s sandbox.

#### Example Code Snippet
```c
OSObject * OSUnserializeBinary(const char *buffer, size_t bufferSize, OSString **errorString) {
    uint32_t key, len, wordLen;
    len = (key & kOSSerializeDataMask);
    ...
    case kOSSerializeNumber:
        bufferPos += sizeof(long long);
        if (bufferPos > bufferSize) break;
        value = next[1];
        value unsigned64BitValue();
        len = off->numberOfBytes();
        bytes = &offsetBytes;
        ...
        if (bytes) {
            if( *dataCnt < len ) break;
            memcpy(data, bytes, len);
            *dataCnt -= len;
        }
}
```

#### Challenges and Solutions
- **No Public Kernel Dumps:** No available kernel dumps for watchOS.
- **No Keys for watchOS 2.x Kernels:** No decryption keys for older versions.
- **Solution:** Read the kernel as OSString chunks.
  - **Vtable Offset:** Required to fake OSString.
  - **Vtable Location:** Stored in __DATA.__const in the kernel.

#### Getting the Vtable
- **__DATA.__const Address:** Found in the Mach-O header.
- **Kernel Base + 0x224:** Equals __DATA.__const.
- **Dereference and Branch:** Use a fake vtable to dereference and branch addresses.

#### Known Offset
- **Similar XNU Build:** Get the vtable offset from a similar build.
- **Delta Tuning:** Adjust the address with a known delta.

#### OSString Layout
- **32-bit vs. 64-bit:**
  - **32-bit:**
    - `vtable.ptr + 0x8`
    - `retain.count`
    - `flags`
    - `length`
    - `string.ptr`
  - **64-bit:**
    - `vtable.ptr + 0x8`
    - `retain.count`
    - `flags`
    - `length`
    - `string.ptr`

#### Next Free Node Trick
- **Vtable Pointer:** First 8 bytes of an object.
- **OSString Size:** 0x20 (64-bit).
- **Retain() Offset:** Vtable start + 0x20 (64-bit).
- **Heap Spray:** Create numerous OSString objects.
- **Trigger Deallocation:** Deallocate OSDictionaries containing OSStrings.
- **OOB Retain():** Out-of-bounds retain to branch to the next OSString node.

By following this structured approach, researchers can gain deeper insights into the security mechanisms of the Apple Watch and develop more effective exploitation techniques.