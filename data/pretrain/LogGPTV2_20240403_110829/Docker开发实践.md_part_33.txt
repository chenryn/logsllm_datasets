210 第16章 Kubernetes
其id为redis-master，资源类型为Service，port是服务端口，其值为6379，这意味着如果服
务代理监听到6379端口有请求，则认为是对redis-master服务的请求。containerPort是容器的开
放端口，这和Pod中的是一样的。此外，selector是选择子字段，labels是标签字段，它们都包
含name=redis-master键值对。
第3步：启动redis的备份从属Pod
我们知道，备份控制器可以为某个Pod创建备份，并保证集群中运行的Pod数量始终为指定数
量，这对于提供一个可增缩容的稳定的服务非常有必要。通过如下命令来创建备份控制器
redisSlaveController：
$ kubectl create -f ./redis-slave-controller.json
redisSlaveController
然后通过以下命令查看该备份控制器：
kubectl get replicationcontrollers
NAME IMAGE(S) SELECTOR REPLICAS
redisSlaveController brendanburns/redis-slave name=redisslave 2
它的镜像为brendanburns/redis-slave，选择子为name=redisslave，备份数为2。查看
redis-slave-controller.json文件的内容：
{
"id": "redisSlaveController",
"kind": "ReplicationController",
"apiVersion": "v1beta1",
"desiredState": {
"replicas": 2,
"replicaSelector": {"name": "redisslave"},
"podTemplate": {
"desiredState": {
"manifest": {
"version": "v1beta1",
"id": "redisSlaveController",
"containers": [{
"name": "slave",
"image": "brendanburns/redis-slave",
"cpu": 200,
"ports": [{"containerPort": 6379, "hostPort": 6380}]
}]
}
},
"labels": {
"name": "redisslave",
"uses": "redis-master",
}
}},
"labels": {"name": "redisslave"}
}
16.4 Kubernetes实战 211
replicas字段是备份数量。ports字段定义了容器端口，因为这是由容器服务决定的，所以和 1
Pod、Service一样，都为6379。这里hostPort为6380，这是因为备份控制器创建的是Pod，这些Pod
会被分配到两台从属主机上，和redis-master Pod同时存在，如果使用相同的端口，则会发生冲突，
2
导致后创建的Pod启动不了。标签字段有两个键值对，一个为name=redisslave，一个为
uses=redis-master，表征它们是redis-master Pod的备份。
3
备份控制器创建好后，就可以查看当前集群中Pod的运行状况，具体如下：
4
[root@localhost guestbook]# kubectl get pods
NAME IMAGE(S) HOST
LABELS STATUS
5
87a7b08b-9a06-11e4-8384-080027a11a67 brendanburns/redis-slave 192.168.1.85/
name=redisslave,uses=redis-master Running
redis-master dockerfile/redis 192.168.1.86/
6
name=redis-master Running
87a64d15-9a06-11e4-8384-080027a11a67 brendanburns/redis-slave 192.168.1.86/
name=redisslave,uses=redis-master Running
7
可以看到，这里有一个redis-master Pod和两个redisslave从属Pod。
9
第4步：创建redis从属服务
和第2步一样，这里为redisslave Pod创建服务，具体操作为：
8
$kubectl create -f ./redis-slave-service.json
redisslave
10
$ kubectl get services
NAME LABELS SELECTOR IP PORT
kubernetes-ro  component=apiserver,provider=kubernetes 10.254.18.26 80
10
kubernetes  component=apiserver,provider=kubernetes 10.254.47.133 443
redis-master name=redis-master name=redis-master 10.254.193.174 6379
redisslave name=redisslave name=redisslave 10.254.202.65 6379
11
可以看到，我们新创建了redisslave服务，其PORT为10.254.202.65:6379。
第5步：创建前端Pod 13
为了使用redis服务，我们创建PHP前端服务Pod，具体操作为：
14
$ cluster/kubectl.sh create -f examples/guestbook/frontend-controller.json
frontendController
15
这里没有使用创建Pod的脚本而是直接通过备份控制器来创建。查看备份控制器的具体情况：
[root@localhost guestbook]# kubectl get replicationcontrollers 16
NAME IMAGE(S) SELECTOR REPLICAS
redisSlaveController brendanburns/redis-slave name=redisslave 2
frontendController brendanburns/php-redis name=frontend 3 17
可以看到刚创建的frontendController。查看一下Pod的具体情况，具体操作为：
18
$kubectl get pods
212 第16章 Kubernetes
NAME IMAGE(S) HOST
LABELS STATUS
87a7b08b-9a06-11e4-8384-080027a11a67 brendanburns/redis-slave 192.168.1.85/
name=redisslave,uses=redis-master Running
8429cb75-9a14-11e4-8384-080027a11a67 brendanburns/php-redis 192.168.1.85/
name=frontend,uses=redisslave,redis-master Running
redis-master dockerfile/redis 192.168.1.86/
name=redis-master Running
87a64d15-9a06-11e4-8384-080027a11a67 brendanburns/redis-slave 192.168.1.86/
name=redisslave,uses=redis-master Running
8428b3ec-9a14-11e4-8384-080027a11a67 brendanburns/php-redis 192.168.1.86/
name=frontend,uses=redisslave,redis-master Running
842c6bee-9a14-11e4-8384-080027a11a67 brendanburns/php-redis 
name=frontend,uses=redisslave,redis-master Pending
可以发现，这里有一个redis-master Pod、两个redisslave节点和3个前端Pod。在3个前端Pod中，
有一个的HOST字段为，其状态也是Pending，这是为什么呢？我们来看一下
frontendcontroller.json文件：
{
"id": "frontendController",
"kind": "ReplicationController",
"apiVersion": "v1beta1",
"desiredState": {
"replicas": 3,
"replicaSelector": {"name": "frontend"},
"podTemplate": {
"desiredState": {
"manifest": {
"version": "v1beta1",
"id": "frontendController",
"containers": [{
"name": "php-redis",
"image": "kubernetes/example-guestbook-php-redis",
"cpu": 100,
"memory": 50000000,
"ports": [{"containerPort": 80, "hostPort": 8000}]
}]
}
},
"labels": {
"name": "frontend",
"uses": "redisslave,redis-master"
}
}},
"labels": {"name": "frontend"}
}
可以看到，replicas字段为3，即创建3个前端Pod，而我们的集群只有两个从属节点，这势
必会让两个前端Pod分配到一台机器上。而在Pod的定义中，有一项为hostPort，这是Pod要使用
的从属节点上的宿主端口，这里为8000端口，它一旦被某个Pod使用，就不能再分配给其他Pod。
16.4 Kubernetes实战 213
这导致3个Pod中必有一个Pod会因为分配不到端口而创建失败。
1
第6步：访问前端服务
2
至此，我们已经在Kubernetes集群中搭建完PHP+redis服务，通过访问http:// 192.168.1.85:8000
或者http:// 192.168.1.86:8000端口来使用该服务，如图16-10所示。
3
4
5
6
7
9
图16-10 GuestBook示例页面
8
10
10
11
13
14
15
16
17
18
214 第17章 shipyard
第 17 章
shipyard
前面我们通过命令行“docker+命令”以及API的方式管理Docker容器，在这一章中，我们将
介绍一款通过Web UI方式管理Docker的工具——shipyard。本章主要包含如下内容：
 shipyard简介，包含shipyard的概念、组成以及如何安装shipyard；
 shipyard操作，主要包括shipyard的鉴权（authentication）、引擎、容器等概念以及通过API
和Web UI两种方式对它们进行的操作。
17.1 简介
shipyard是一款Docker管理工具，基于Docker集群管理工具包Citadel，提供Web UI、命令行
CLI以及API三种方式管理集群。shipyard能够管理Docker集群中的容器、主机等各种资源。shipyard
的核心功能是管理Docker容器，然而如果使用Extension Images，你还可以实现应用路由、负载均
衡、日志集中化以及应用部署等。本章主要说明如何使用shipyard来管理Docker集群。
shipyard提供如下三种方式来管理Docker集群的资源。
 Web UI。通过Web UI，可以进行简单的Docker集群管理，查看集群的资源使用率、引擎
的使用率，创建和销毁容器，查看集群范围内的事件等。
 命令行CLI。shipyard也提供了强大的命令行接口，实现了其API，通过CLI能够发挥出其
全部功能。
 API。shipyard的核心是API，shipyard的CLI和Web UI都是通过API来实现其功能的，所以
API是基石。通过使用服务密钥，你可以使用API来管理Docker集群。
接下来，我们说明如何安装shipyard。
shipyard使用RethinkDB存储账号、引擎、服务密钥和扩展元数据等信息。所以，先通过如下
操作配置好RethinkDB容器：
$ docker run -it -d --name shipyard-rethinkdb-data --entrypoint /bin/bash shipyard/rethinkdb -l
$ docker run -it -P -d --name shipyard-rethinkdb --volumes-from shipyard-rethinkdb-data
shipyard/rethinkdb
17.1 简介 215
然后下载和启动shipyard容器：
1
$ docker run -it -p 8080:8080 -d --name shipyard --link shipyard-rethinkdb:rethinkdb shipyard/shipyard
2
为了能够通过CLI来访问shipyard，我们还需要安装shipyard的客户端，具体操作为：
$ docker run -ti -v /Users/root/.boot2docker:/b2d --rm shipyard/shipyard-cli 3
shipyard cli>
运行该容器，即进入shipyard CLI环境中。
4
安装好上述4个容器之后，我们可以通过docker ps命令查看当前运行的容器：
5
$ docker ps
CONTAINER ID IMAGE COMMAND CREATED
STATUS PORTS
6
NAMES
3df3ccfb9ae4 shipyard/shipyard-cli:2.0.8 "/bin/bash" 41 hours ago
Up 41 hours
7
romantic_rosalind
586359c2b033 shipyard/shipyard:2.0.8 "/app/controller" 2 days ago
Up 2 days 0.0.0.0:8080->8080/tcp
9
shipyard
ecba7de12a9a shipyard/rethinkdb:latest "/usr/bin/rethinkdb 2 days ago
Up 2 days 0.0.0.0:49153->28015/tcp, 0.0.0.0:49154->29015/tcp,
8
0.0.0.0:49155->8080/tcp shipyard-rethinkdb
74b789abaefb shipyard/rethinkdb:latest "/bin/bash -l" 2 days ago
Up 2 days 28015/tcp, 29015/tcp, 8080/tcp
10
shipyard-rethinkdb-data
可以看到，shipyard的4个容器已经跑起来了。shipyard监听本地的8080端口。
10
接下来，我们可以登录shipyard，具体有两种方式，一种是Web UI方式，另一种是CLI方式。
shipyard提供一个默认的管理员账号，用户名为admin，密码为shipyard。相对于CLI，Web UI更为
11
直观、简单，但其功能也没有CLI强大。首先，通过浏览器访问本地的8080端口，如图17-1所示。
13
14
15
16
17
18
图17-1 shipyard登录页面
216 第17章 shipyard
输入账号和密码，即可登录到管理界面，如图17-2所示。
图17-2 shipyard管理主页面
现在我们再说明一下CLI方式。当运行docker run -ti -v /Users/root/.boot2docker:/b2d --rm
shipyard/shipyard-cli命令时，终端就进入shipyard客户端的操作界面。我们通过shipyard login
命令登录，具体为：
shipyard cli> shipyard login
URL: http://localhost:8080
Username: admin