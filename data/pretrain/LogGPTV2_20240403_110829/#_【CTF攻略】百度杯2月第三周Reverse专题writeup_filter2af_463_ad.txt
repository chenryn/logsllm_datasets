    13 = objc_retain(v18);
    objc_storeStrong(&v18, 0);
    objc_storeStrong(&v21, 0);
    objc_storeStrong(&v22, 0);
    objc_storeStrong(&v23, 0);
    result = (id)objc_autoreleaseReturnValue(v13);
    if ( __stack_chk_guard != v27 )
    __stack_chk_fail(result, __stack_chk_guard, v27, v15, 8, 0, v16);
    return result;
    }
这部分代码大致意思是用我们传的第二个参数作为key,加密我们的输入， 再base64,根据CCCrypt前3个参数得知加密方式为
DES， ECB,pkcs7padding,key可以用git上的来求， 求出来是UFT-8
这部分结束了， 按照逻辑， 到了_sub_8688， 这个混淆的厉害， 完全不造执行路径， 上下翻了翻， 看到了
得知最后比较的串 wMnLwixufgl=， 搜索该串， 发现这个函数有32个strcmp,这就懵逼了。 。 。
看这里的汇编， 可以推出var_D4上应该是加密的结果， 搜索[R7,#var_D4]， 发现有个不同的地方
    __text:0000C81C MOVS R0, #0
    __text:0000C81E MOV R1, SP
    __text:0000C820 SUBS R1, #4
    __text:0000C822 MOV SP, R1
    __text:0000C824 MOV R2, SP
    __text:0000C826 SUBS R2, #4
    __text:0000C828 MOV SP, R2
    __text:0000C82A MOV R3, SP
    __text:0000C82C SUBS R3, #4
    __text:0000C82E MOV SP, R3
    __text:0000C830 MOV R9, SP
    __text:0000C832 SUB.W R9, R9, #4
    __text:0000C836 MOV SP, R9
    __text:0000C838 MOV R12, SP
    __text:0000C83A SUB.W R12, R12, #4
    __text:0000C83E MOV SP, R12
    __text:0000C840 STR R0, [R1]
    __text:0000C842 MOV R0, R1
    __text:0000C844 LDR.W LR, [R7,#var_20]
    __text:0000C848 STR.W R1, [R7,#var_C4]
    __text:0000C84C MOV R1, LR
    __text:0000C84E STR.W R12, [R7,#var_C8]
    __text:0000C852 STR.W R9, [R7,#var_CC]
    __text:0000C856 STR.W R2, [R7,#var_D0]
    __text:0000C85A STR.W R3, [R7,#var_D4]
    __text:0000C85E BLX _objc_storeStrong
    __text:0000C862 LDR.W R0, [R7,#var_C4]
    __text:0000C866 LDR R1, [R0]
    __text:0000C868 MOV R0, R1
    . . . _
    _
    text:0000C886 STR.W R1, [R7,#var_D8]
    __text:0000C88A MOV R1, R2
    __text:0000C88C LDR.W R2, [R7,#var_D8]
    __text:0000C890 BLX R2
    __text:0000C892 LDR.W R1, [R7,#var_D0]
    __text:0000C896 STR R0, [R1]
    __text:0000C898 LDR R0, [R1] ; char *
    __text:0000C89A BLX _strlen
    __text:0000C89E ADDS R0, #1 ; size_t
    __text:0000C8A0 BLX _malloc
    . . . _
    _
    text:0000C924 LDR.W R10, [R7,#var_CC]
    __text:0000C928 STR.W R0, [R10]
    __text:0000C92C LDR.W R11, [R7,#var_D4]
    __text:0000C930 STR.W R0, [R11]
widows: 2; word-spacing: 0px; -webki以_strlen为分界， 前面的R0应该是传过来的字符串的地址，
存在了var_D0上
后面的R0是_malloc(_strlen+1)出的地址,存到了var_D4和var_CC上， 于是搜索了[R7,#var_CC]， 发现了
    __text:00070460                 LDR.W           LR, [R7,#var_D0]
    __text:00070464                 LDR.W           R4, [LR]
    __text:00070468                 LDRB            R4, [R4]
    __text:0007046A                 LDR.W           R5, [R7,#var_CC]
    __text:0007046E                 LDR             R6, [R5]
    __text:00070470                 STRB            R4, [R6]
    .
    .
    .
    __text:0003DEC2                 LDR.W           R8, [R7,#var_D0]
    __text:0003DEC6                 LDR.W           R10, [R8]
    __text:0003DECA                 ADD.W           R10, R10, #1
    __text:0003DECE                 STR.W           R10, [R8]
    __text:0003DED2                 LDR.W           R10, [R7,#var_CC]
    __text:0003DED6                 LDR.W           R11, [R10]
    __text:0003DEDA                 ADD.W           R11, R11, #1
    __text:0003DEDE                 STR.W           R11, [R10]
    .
    .
    .
    __text:000C7E64                 MOVS            R1, #0x1A
    __text:000C7E66                 LDR.W           R0, [R7,#var_D0]
    __text:000C7E6A                 LDR             R2, [R0]
    __text:000C7E6C                 LDRSB.W         R2, [R2]
    __text:000C7E70                 SUBS            R2, #0x41(0x61)
    __text:000C7E72                 ADDS            R0, R2, #5
    __text:000C7E74                 BLX             ___modsi3
    __text:000C7E78                 ADDS            R0, #0x41(0x61)
    __text:000C7E7A                 LDR.W           R1, [R7,#var_CC]
    __text:000C7E7E                 LDR             R2, [R1]
    __text:000C7E80                 STRB            R0, [R2]
根据上面的汇编， 理理逻辑
第一， [R7,#var_CC] 和 [R7,#var_D4]上存的是同一个内存地址
第二， [R7,#var_D0] 上存放的字符串是传过来的参数， 会存在 [R7,#var_CC] 上的存的地址上， 可以理解为*(*(R7-CC)) =
*(*(R7-D0))
第三， [R7,#var_D0] 上存放的字符串会进行凯撒加密， 并存到[R7,#var_CC]
第四， [R7,#var_D4] 上的字符串会与wMnLwixufgl=比较
然而， 这个函数里有32处有凯撒加密， 所以被自己误导了， 以为每个字符的加密是不一样的， 然后就在那求执行路径， 浪费了大把时间。 。 。
凯撒解密出rHiGrdspabg=
在这个网址上求解,选好模式和填充方式， 填上key（ 见上） ,解密即可