title:Inferring and Debugging Path MTU Discovery Failures
author:Matthew J. Luckie and
Kenjiro Cho and
Bill Owens
Inferring and Debugging Path MTU Discovery Failures
Matthew Luckie
University of Waikato
PI:EMAIL
Kenjiro Cho
Internet Initiative Japan
PI:EMAIL
Bill Owens
NYSERNet
PI:EMAIL
Abstract
If a host can send packets larger than an Internet path can
forward, it relies on the timely delivery of Internet Control
Message Protocol (ICMP) messages advising that the pac-
ket is too big to forward. An ICMP Packet Too Big message
reports the largest packet size – or Maximum Transmission
Unit (MTU) – that can be forwarded to the next hop. The
iterative process of determining the largest packet size sup-
ported by a path by learning the next-hop MTU of each
MTU-constraining link on the path is known as Path MTU
Discovery (PMTUD). It is fundamental to the optimal oper-
ation of the Internet. There is a perception that PMTUD is
not working well in the modern Internet due to ICMP mes-
sages being ﬁrewalled or otherwise disabled due to security
concerns. This paper provides a review of modern PMTUD
failure modes. We present a tool designed to help network
operators and users infer the location of a failure. The tool
provides fairly detailed information about each failure, so
the failure can be resolved. Finally, we provide data on
the failures that occurred on a large jumbo-capable network
and ﬁnd that although disabling ICMP messages is a prob-
lem, many other failure modes were found.
1 Introduction
Given a volume of data to send, it is desirable to encap-
sulate the data in the fewest number of packets possible,
as “much of the cost of packetised communication is per-
packet rather than per-probe” [1]. To send the fewest num-
ber of packets possible, a host must determine the largest
IP packet size – or Maximum Transmission Unit (MTU)
– supported by the path. The iterative process to deter-
mine the largest possible MTU on an end-to-end path by
consecutively learning the next-hop MTU of each MTU-
constraining link on the path is known as Path MTU Dis-
covery (PMTUD). PMTUD allows a host or application to
determine the largest IP packet size supported by an Inter-
net path, and thus send the fewest number of packets.
Path MTU Discovery is documented in RFC 1191 for
IPv4 [2] and RFC 1981 for IPv6 [3]. An application or
kernel determines the largest supported MTU on an Inter-
net path in an iterative manner, starting with the outgoing
interface’s MTU. It reduces the Path MTU each time a Pac-
ket Too Big (PTB) message is received until the destination
host is reached, using the next-hop MTU value included in
each successive PTB message. When this approach to PM-
TUD works, it allows an end host to quickly determine the
Path MTU. There are, however, a number of well-known
limitations of this technique [4], and work is in progress
in the IETF to redeﬁne the PMTUD method. This work
discusses the current approach to PMTUD.
The failure modes of PMTUD are often difﬁcult to de-
bug, as they are triggered by relatively large packets. For
example, a TCP connection may be established through
a path where a PMTUD failure exists, as the TCP three-
way handshake involves small packets that are unlikely to
trigger a PMTUD failure. However, a PMTUD failure is
likely to occur when either end of the TCP connection at-
tempts to send a packet that is larger than can be forwarded
through the path without fragmentation. A scenario like
this is likely to cause the TCP connection to stall for some
period of time before either failing, sending smaller pack-
ets, or allowing retransmitted packets to be fragmented.
This work introduces a technique for inferring and de-
bugging PMTUD failures which occur on the forward path.
Our technique uses a traceroute-like method to infer the lo-
cation of a failure and the maximum packet size which can
be forwarded through it. The technique does not infer fail-
ures that occur on the reverse path, such as the over-zealous
ﬁrewalling of all inbound ICMP packets – including PTB
messages – in order to protect a machine from security con-
cerns related to ICMP or crude Denial of Service (DoS)
attacks [5]. A recent study on the TCP behaviour of web-
servers [6] found that PMTUD on the reverse path failed for
17% of 81776 targets tested and 35% of 500 popular web-
sites tested – presumably because of middle-boxes which
blocked inbound ICMP to the web-servers.
USENIX Association
Internet Measurement Conference 2005  
193
The rest of this paper is organised as follows. We begin
by reviewing some of the known PMTUD failures in Sec-
tion 2. We then discuss the debugging techniques used in
this work to infer the location and mode of a PMTUD fail-
ure, and discuss the implementation of these techniques in
our publicly available tool, scamper, in Section 3. In Sec-
tion 4, we discuss the data collection that we did in support
of this work, and then present some analysis of the results
obtained in Section 5. Finally, we discuss a few anecdotes
of strange behaviours we observed separate to the data col-
lection for this study, before presenting our conclusions.
2 Path MTU Discovery Failure Modes
2.1 Router Conﬁguration Issues
The most well known PMTUD failure mode is the ICMP
Black Hole discussed in RFC 2923 [4]. The ICMP Black
Hole problem has two halves; routers which do not send
PTB messages due to misconﬁguration or implementation
bugs, and hosts which do not receive PTB messages due
to a middle-box or ﬁrewall ﬁltering them. The problem
of router misconﬁguration was ﬁrst documented in RFC
1435 [7], where it was reported that code had been added
to some routers to provide the capability to disable ICMP
message generation in order to protect old BSD hosts,
which were faulty in their handling of some ICMP mes-
sages. The RFC recommended that router code be updated
to exclude PTB messages from suppression, as that par-
ticular message type did not trigger the faulty behaviour.
However, it appears that this recommendation has either
not been widely implemented, or operators are not using it.
In the modern Internet, a router which does not send any
ICMP message is almost certainly conﬁgured that way due
to security concerns.
2.2 MTU Mismatches
An MTU mismatch occurs when a router and the path to
the next-hop do not have a consistent understanding of the
MTU. Speciﬁcally, a router believes that the path to the
next hop is capable of forwarding packets larger than it ac-
tually can. Such a mismatch causes PMTUD to fail be-
cause the MTU change occurs below the IP layer, where a
PTB message is not sent. A common scenario where this
occurs is connecting a jumbo-capable gigabit Ethernet in-
terface and a non-jumbo interface, which could be gigabit
or fast Ethernet, across a switch. It can also occur if two
jumbo interfaces are connected to a switch that does not
support jumbo packets. The jumbo-capable Ethernet inter-
face can send packets larger than 1500 bytes to the switch.
However, the switch either cannot accept these packets, or
cannot forward them to the next interface, and so the pack-
ets are silently discarded.
2.3 No Suggested Next-Hop MTU
The original IPv4 ICMP protocol [8] did not deﬁne the
next-hop MTU ﬁeld that PMTUD relies on to determine
the largest packet size supported to the next hop. The next-
hop MTU ﬁeld was ﬁrst deﬁned in RFC 1191 [2], and
makes use of otherwise unused space in the ICMP mes-
sage. Routers that do not set the next-hop MTU ﬁeld in a
PTB message are easily detected, as the unused space is set
to zero. In the face of a PTB message without a suggested
next-hop MTU, current practice in the NetBSD kernel –
among others – is to determine the size of the packet that
caused the PTB message by examining the length ﬁeld re-
turned with the IP header embedded in the PTB message
and then select a smaller packet size from a table of known
MTU values.
2.4 Private Addressing
Some operators choose to use RFC 1918 [9] private ad-
dresses when numbering router interfaces in order to avoid
using public addresses. The use of RFC 1918 addresses
can cause PMTUD to fail if PTB messages are sent with
an RFC 1918 source address, since packets with RFC 1918
source addresses are often dropped by ingress ﬁlters at the
network edge.
2.5 Unspeciﬁed Implementation Bugs
There are other possibilities of PMTUD failure modes re-
lated to implementation bugs. For example, a router may
send a PTB message with a suggested next-hop MTU larger
than the size of the packet which caused it to be sent. Pos-
sible causes of this failure mode include not sending the
next-hop MTU ﬁeld in network byte order, or a router not
adjusting internal state correctly when adding or remov-
ing headers. Other possible implementation bugs include:
sending a PTB message with the embedded IP packet mod-
iﬁed in some way such that the PTB message is unable to be
matched with an active connection or application; sending
an ICMP error message without generating a valid ICMP
checksum; and sending an ICMP error message that is not
a PTB message when it should have been.
3 Debugging Techniques
We have implemented two forward path debugging tech-
niques into scamper, our publicly available measurement
tool. The initial goal of the PMTUD code in scamper was to
enable the detection of IPv6-over-IPv4 tunnels when com-
paring IPv4 and IPv6 paths between pairs of dual-stack
nodes [10]. The code has evolved beyond this requirement,
in part due to experiences in inferring tunnels in uncooper-
ative paths.
194
Internet Measurement Conference 2005
USENIX Association
To begin with, scamper conducts a standard traceroute
with small UDP probes to unused ports. The purpose of
this initial phase is to infer the forward IP path topology,
determine which routers will provide ICMP feedback to
small TTL-limited probes, and ensure that small probes
are terminated somewhere in the path by an ICMP Des-
tination Unreachable message so that scamper can distin-
guish between large probes being silently discarded and all
probes being silently discarded. After the traceroute com-
pletes, scamper begins a PMTUD phase, where it solicits
PTB messages in response to large probes until the desti-
nation is reached. scamper infers that PMTUD has failed
when it does not obtain an expected reply packet to a probe
the size of the currently known Path MTU value. When a
PMTUD failure is detected, it uses one of two debugging
techniques to infer the location of the failure and the largest
packet which can be forwarded. Before we describe the two
debugging techniques in detail, we describe the process by
which the next-hop MTU is inferred.
3.1 Next-hop MTU Search
The purpose of the next-hop MTU search is to infer the
largest packet size which can be forwarded to the next-hop.
The general strategy is to, as quickly as possible, reduce a
search space bounded by the smallest packet size to obtain
a valid response and the largest packet size to not obtain
a valid response, to ﬁnd the underlying next-hop MTU. A
binary search is not well suited to this task, for two rea-
sons. First, MTU values tend to cluster due to the fairly
limited combinations of media MTU values and encapsula-
tions commonly used. Second, each probe that is discarded
without the source receiving any ICMP feedback incurs a
timeout delay that is often at least an order of magnitude
larger than the delay incurred when probing with a pac-
ket that does obtain ICMP feedback. By default, scamper
will retry a probe that obtains no ICMP feedback once, ﬁve
seconds after sending the initial probe. In this scenario, a
choice of probe size that does not obtain ICMP feedback in-
curs a ten second penalty before a different probe size can
be tried. In order to determine the actual next-hop MTU as
quickly and efﬁciently as possible, scamper is pre-loaded
with a table of known MTU values.
When scamper begins a next-hop MTU search, it deﬁnes
the lower bound by selecting an MTU in the table smaller
than the failed probe, depending on three criteria. First,
if the failed probe is larger than 1500 bytes, then scamper
tries with a 1500 byte packet, as Ethernet is ubiquitous and
likely to be the cause of an MTU restriction from larger
frame sizes. Second, if the failed probe is larger than 1454
bytes, then scamper tries with a 1454 byte probe because
1454 is a lower bound of a series of MTU values that in-
dicate some tunnel or encapsulation of IP over Ethernet.
Otherwise, scamper selects the largest MTU from the table
that is smaller than the size of the failed probe. The search
for the initial lower bound is complete when ICMP feed-
back is obtained; the upper bound is reduced each time a
probe for the initial lower bound does not obtain feedback.
After the lower bound is set, scamper then narrows the
search space until it converges on the actual next-hop MTU.
The approach to choosing a suitable probe size consists of
three criteria, which are checked in order until a matching
condition is found. First, if the lower bound of the search
space is 1500 bytes or is a known MTU value in the table,
and the upper bound is smaller than the next largest known
MTU, then scamper probes with a packet one byte larger
than the lower bound. The rationale for this is that if the
search space is narrowed to within two entries in the MTU
table, then there is a fair chance that the actual next-hop
MTU is the current lower bound, and we can conﬁrm this
by sending a probe one byte larger. Second, if the next
largest MTU in the table is smaller than the current upper
bound, then scamper chooses this MTU as its next probe
size. The rationale for this decision is that scamper can
quickly determine the next-hop MTU if it is one of the val-
ues in the table. Lastly, if scamper is working within two
known MTU values, then it will resort to a binary search to
determine the next-hop MTU.
3.2 Inferring MTU without Feedback
This technique is used to infer the next-hop MTU and lo-
cation of a hop that does not send PTB messages when it
should. This technique is used when scamper does not ob-
tain ICMP feedback with large packets the size of the cur-
rent working Path MTU value. The technique consists of
two stages. The ﬁrst stage is a next-hop MTU search to in-
fer the largest packet that can be forwarded, as described in
Section 3.1. The second stage is a Time-to-Live (TTL) or
Hop-Limit (HLIM) search of the forward path to infer the
hop where large packets are silently discarded by determin-
ing the largest TTL or HLIM value that can be set in the IP
header which still obtains an ICMP Time Exceeded mes-
sage in response. This debugging technique is illustrated in
Figure 1. This technique can infer a series of failure modes
which are difﬁcult to distinguish from each other, as there
are many reasons why a source host may not receive a PTB
message, and we have incomplete information to deﬁni-
tively infer why. We can, however, use a few heuristics to
narrow the failure modes down.
If the farthest hop from which we obtain an ICMP Time
Exceeded message with a large TTL-limited probe is im-
mediately before a hop from which we obtain no ICMP
Time Exceeded messages, we infer that the failure is likely
to occur at the next hop either because all ICMP messages
are disabled, or all ICMP responses from the router are be-
ing ﬁltered somewhere in the network, possibly due to the
use of RFC 1918 addresses. If we are able to receive ICMP
USENIX Association
Internet Measurement Conference 2005  
195
1500
1500
1480
1500
Src
R1
*
R3
Dst
1.
2.
3.
5.
7.
8.
9.
10.
11.
13.
14.
TTL 255, Size 1500
TTL 255, Size 1500
TTL 255, Size 1454
ICMP Port Unreachable
TTL 255, Size 1480
ICMP Port Unreachable
4.