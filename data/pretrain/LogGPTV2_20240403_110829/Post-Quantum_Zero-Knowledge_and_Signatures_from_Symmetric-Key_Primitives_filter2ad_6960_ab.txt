simulator, given y and a randomly chosen c, outputs a transcript
(r , c, s) for y that is indistinguishable from a real run of the protocol
for x, y.
n-Special Soundness. A Σ-protocol has n-special soundness if n tran-
scripts (r , c1, s1), . . . ,(r , cn, sn) with distinct ci guarantee that a
witness may be efficiently extracted.
Fiat-Shamir. The FS transform [40] converts a Σ-protocol into a
non-interactive zero knowledge proof of knowledge. A Σ-protocol
consists of a transcript (r , c, s). The corresponding non-interactive
proof (r′, c′, s′) generates r′ and s′ as in the interactive case, but
obtains c′ ← H(r′) instead of receiving it from the verifier. This
is known to be a secure NIZK in the random oracle model against
standard (non-quantum) adversaries [40].
Other Building Blocks. This paper requires other common prim-
itives, namely one-way functions, pseudorandom generators, and
commitments. We use the canonical hash-based commitment and
require commitments to be hiding and binding. Definitions are
given in Appendix C, where we also recall the definition of signa-
ture schemes, and existential unforgeability under chosen message
attacks (EUF-CMA), which is the standard security notion for sig-
nature schemes.
3 ZKBOO AND ZKB++
ZKBoo is a proof system for zero-knowledge proofs on arbitrary
circuits described in [45]. We recall the protocol here, and present
ZKB++, an improved version of ZKBoo with proofs that are less
than half the size.
3.1 ZKBoo
While ZKBoo is presented with various possible parameter options,
we present only the final version from [45] with the best param-
eters. Moreover, while ZKBoo presents both interactive and non-
interactive protocol versions, we present only the non-interactive
version since our main goal is building a signature scheme.
Overview. ZKBoo builds on the MPC-in-the-head paradigm of
Ishai et al. [57], that we describe only informally here. The mul-
tiparty computation protocol (MPC) will implement the relation,
and the input is the witness. For example, the MPC could compute
y = SHA-256(x) where players each have a share of x and y is
public. The idea is to have the prover simulate a multiparty compu-
tation protocol “in their head”, commit to the state and transcripts
of all players, then have the verifier “corrupt” a random subset of
the simulated players by seeing their complete state. The verifier
then checks that the computation was done correctly from the per-
spective of the corrupted players, and if so, he has some assurance
that the output is correct and the prover knows x. Iterating this for
many rounds then gives the verifier high assurance.
ZKBoo generalizes the idea of [57] by replacing MPC with so-
called “circuit decompositions”, which do not necessarily need to
satisfy the properties of an MPC protocol and therefore lead to
more efficient proofs in practice. Fix the number of players to
three. In particular, to prove knowledge of a witness for a rela-
tion R := {(x, y), ϕ(x) = y}, we begin with a circuit that computes
ϕ, and then find a suitable circuit decomposition. This contains
a Share function (that splits the input into three shares), three
functions Outputi∈{1,2,3} (that take as input all of the input shares
and some randomness and produce an output share for each of
the parties), and a function Reconstruct (that takes as input the
three output shares and reconstructs the circuit’s final output). This
decomposition must satisfy correctness and 2-privacy which intu-
itively means that revealing the views of any two players does not
leak information about the witness x.
The decomposition is used to construct a proof as follows: the
prover runs the computation ϕ using the decomposition and com-
mits to the views – three views per run. Then, using the FS heuristic,
the prover sends the commitments and output shares from each
view to the random oracle to compute a challenge – the challenge
tells the prover which two of the three views to open for each of the
t runs. Because of the 2-privacy property, opening two views for
each run does not leak information about the witness. The number
of runs, t, is chosen to achieve negligible soundness error – i.e.,
4
intuitively it would be infeasible for the prover to cheat without
getting caught in at least one of the runs. The verifier checks that (1)
the output of each of the three views reconstructs to y, (2) each of
the two open views were computed correctly, and (3) the challenge
was computed correctly.
We now give a detailed description of the non-interactive ZKBoo
protocol. Throughout this paper, when we perform arithmetic on
the indices of the players, we omit the implicit mod 3 to simplify
the notation.
Definition 3.1 ((2,3)-decomposition). Let f (·) be a function that
is computed by an n-gate circuit ϕ such that f (x) = ϕ(x) = y, and
let κ be the security parameter. Let k1, k2, and k3 be tapes chosen
uniformly at random from {0, 1}κ corresponding to players P1, P2
and P3, respectively. Consider the following set of functions, D:
(view
view
(0)
2 , view
(0)
(0)
3 ) ← Share(x, k1, k2, k3)
1 , view
(j)
(j+1)
i ← Update(view
i
yi ← Output(Viewi)
y ← Reconstruct(y1, y2, y3)
(j)
i +1, ki , ki +1)
, view
such that Share is a potentially randomized invertible function
that takes x as input and outputs the initial view for each player
(0)
containing the secret share xi of x, i.e. view
= xi. The function
i
Update computes the wire values for the next gate and updates
the view accordingly. The function Outputi takes as input the final
view, Viewi ≡ view
after all gates have been computed and
outputs player Pi’s output share, yi.
(n)
i
We require correctness and 2-privacy as informally outlined
before. We defer a formal definition to Appendix A.1. The concrete
decomposition used by ZKBoo is presented in Appendix A.2.
3.1.1 ZKBoo Complete Protocol. Given a (2, 3)-decomposition
D for a function ϕ, the ZKBoo protocol is a Σ-protocol for lan-
guages of the form L := {y | ∃ x : y = ϕ(x)}. We note that this
directly yields a non-interactive zero-knowledge (NIZK) proof sys-
tem for the same relation using well known results. We recall the
details of ZKBoo in Appendix A.
Serializing the Views. In the (2,3)-decomposition, the view is up-
dated with the output wire value for each gate. While conceptually
a player’s view includes the values that they computed locally,
when the view is serialized, it is sufficient to include only the wire
values of the gates that require non-local computations (i.e., the
binary multiplication gates). The verifier can recompute the parts
of the view due to local computations, and they do not need to be
serialized. Giving the verifier locally computed values does not even
save any computation as the verifier will still need to recompute
the values in order to check them.
In ZKBoo, the serialized view includes: (1) the input share, (2)
output wire values for binary multiplication gates, and (3) the out-
put share.
The size of a view depends on the circuit as well as the ring that
it is computed over. Let ϕ : (Z2ℓ)m → (Z2ℓ)n be the circuit being
computed over Z2ℓ such that there are m input wires, n output wires,
and each wire can be expressed with ℓ bits. Moreover, assume that
the circuit has b binary-multiplication gates. The size of a view in
bits is thus given by: |Viewi| = ℓ(m + n + b).
ZKBoo Proof Size. Using the above notation, we can now calculate
the size of ZKBoo proofs. Let κ be the (classical) security-parameter.
The random tapes will be of size κ as mentioned above. Furthermore,
let c be the size of the commitments ci (in bits) for a commitment
scheme secure at the given security level. In ZKBoo, hash-based
commitments were used and instantiated with SHA-256, and thus
c = 256. In ZKBoo, the openings D of the commitments contain
the value being committed to as well as the randomness used for
the commitments. Let s denote the size of the randomness in bits
used for each commitment. The size of the output share yi is the
same as the output size of the circuit, (ℓ · n). Let t denote the
number of parallel repetitions that we must run, and from ZKBoo
we know that to achieve soundness error of 2−κ, we must set t =
⌈κ(log2 3 − 1)−1⌉. The total proof size is given by
|p| = t · [3 · (|yi| + |ci|) + 2 · (|Viewi| + |ki| + s)]
= t · [3 · (ℓn + c) + 2 · (ℓ · (m + n + b) + κ + s)]
= t · [3c + 2κ + 2s + ℓ · (5n + 2m + 2b)]
= ⌈κ(log2 3 − 1)−1⌉ · [3c + 2κ + 2s + ℓ · (5n + 2m + 2b)]
3.2 ZKB++
We now present ZKB++, an improved version of ZKBoo with NIZK
proofs that are less than half the size of ZKBoo proofs. Moreover,
our benchmarks show that this size reduction comes at no extra
computational cost.6
We present the ZKB++ optimizations in an incremental way over
the original ZKBoo protocol.
O1: The Share Function. We make the Share function sample
the shares pseudorandomly as:
(x1, x2, x3) ← Share(x, k1, k2, k3) (cid:66)
x1 = R1(0· · · |x − 1|)
x2 = R2(0· · · |x − 1|)
x3 = x − x1 − x2
where Ri is a pseudorandom generator seeded with ki, and by
Ri(0· · · |x − 1|) we denote the first |x| bits output by Ri.
We note that sampling in this manner preserves the 2-privacy of
the decomposition. In particular, given only two of {(k1, x1),(k2, x2),
(k3, x3)}, x remains uniformly distributed over the choice of the
third unopened (ki , xi).
We specify the Share function in this manner as it will lead to
more compact proofs. For each round, the prover is required to
“open" two views. In order to verify the proof, the verifier must be
given both the random tape and the input share for each opened
view. If these values are generated independently of one another,
then the prover will have to explicitly include both of them in the
proof. However, with our sampling method, in View1 and View2,
the prover only needs to include ki, as xi can be deterministically
computed by the verifier.
The exact savings depend on which views the prover must open,
and thus depend on the challenge. The expected reduction in proof
6Our analysis of the original ZKBoo source code uncovered some errors which were
corrected in the new implementation.
5
size resulting from using the ZKB++ sampling technique instead of
the technique used in ZKBoo is (4t · |x|)/3 bits.
O2: Not Including Input Shares. Since the input shares are now
generated pseudorandomly using the seed ki, we do not need to
include them in the view when e = 1. However, if e = 2 or e = 3, we
still need to send one input share for the third view for which the
input share cannot be derived from the seed. Since the challenge is
generated uniformly at random from {1, 2, 3}, the expected number
of input shares that we’ll need to include for a single iteration is
2/3.
O3: Not Including Commitments. In ZKBoo proofs, the commit-
ments of all three views are sent to the verifier. This is unnecessary
as for the two views that are opened, the verifier can recompute
the commitment. Only for the third view that the verifier is not
given the commitment needs to be explicitly sent.
We stress that there is no lost security here (in some sense we use
e as a “commitment to the commitments”) as even when the prover
sends the commitments, the verifier must check that the prover
has sent the correct commitments by hashing the commitments
to recompute the challenge. Here too, the verifier checks that the
commitments that it computed are the same ones that were used
by the prover by hashing them as part of the input to recompute
the challenge.
There is also no extra computational cost in this approach –
whereas the verifier now must recompute the commitments, in the
original ZKBoo protocol, the verifier needed to verify the commit-
ments in step 2 ( see Scheme 3 in Appendix A ). For the hash-based
commitment scheme used in ZKBoo, the function to verify the
commitment first recomputes the commitment and thus there is no
extra computation.
O4: No Additional Randomness for Commitments. Since the
first input to the commitment is the seed value ki for the random
tape, the protocol input to the commitment doubles as a random-
ization value, ensuring that commitments are hiding. Further, each
view included in the commitment must be well randomized for
the security of the MPC protocol. In the random oracle model the
resulting commitments are hiding (the RO model is needed here
since ki is used both as seed for the PRG and as randomness for
the commitment. Since one already needs the RO model to make
the proofs non-interactive, there is no extra assumption here).
O5: Not Including the Output Shares. In ZKBoo proofs, as part
of a, the output shares yi are included in the proof. Moreover, for
the two views that are opened, those output shares are included a
second time.
First, we do not need to send two of the output shares twice.
However, we actually do not need to send any output shares at
all as they can be deterministically computed from the rest of the
proof as follows:
For the two views that are given as part of the proof, the output
share can be recomputed from the remaining parts of the view.
Essentially, the output share is just the value on the output wires.
Given the random tapes and the communicated bits from the binary
multiplication gates, all wires for both views can be recomputed.
For the third view, recall that the Reconstruct function simply
XORs the three output shares to obtain y. But the verifier is given y,
and can thus instead recompute the third output share. In particular,
given yi, yi +1 and y, the verifier can compute: yi +2 = y + yi + yi +1.
Computational Trade-Off. While we would expect some computa-
tional cost from recomputing rather than sending the output shares,
our benchmarks show that there is no additional computational
cost incurred by this modification, perhaps because it is a small
part of the overall verification. For the challenge view, Viewe, the
verifier anyway needs to recompute all of the wire values in order
to do the verification, so there is no added cost.
For the second view, Viewe +1, the verifier must recompute the
wire values as well since the verifier will need to compute the values
which must be stored as output of the (2, 3)-decomposition, so there
is effectively no cost.
For the third view, the extra cost of recomputing the output share
is just two additions in the ring, which is exactly the cost of a single
call to Reconstruct.
However, in step 2 of the verification in ZKBoo, the verifier
has to call Reconstruct in order to verify that the three output
shares given are correct (see Scheme 3 in Appendix A ). But in our
optimization, the verifier no longer needs to perform this check as
the derivation of the third share guarantees that it will reconstruct
correctly. Thus, the verifier is adding one Reconstruct but saving
one, and thus no cost is incurred.
We note that the outputs will be checked as the yi’s are hashed
with H to determine the challenge. The verifier recomputes the
challenge and if the yi values used by the verifier do not match
those used by the prover, the challenge will be different (by the
collision resistance property of H), and the proof will fail.
O6: Not Including Viewe. In step 2 of the proof, the verifier recom-
putes every wire in Viewe and checks as he goes that the received
values are correct. However we note that this is not necessary.
The verifier can recompute Viewe given just the random tapes
ke , ke +1 and the wire values of Viewe +1. But the verifier does not
need to explicitly check that each wire value in Viewe is computed
correctly. Instead, the verifier will recompute the view, and check
the commitments using the recomputed view. By the binding prop-
erty of the commitment scheme, the commitments will only verify
if the verifier has correctly recomputed every value stored in the
view.
Notice that this modification reduces the computational time as
the verifier does not need to perform part of step 2, i.e., there is no
need to check every wire as checking the commitment will check
these wires for us. But more crucially, this modification reduces
the proof size significantly. There is no need to send the AND
wire values for Viewe as we can recompute them and check their
correctness. Indeed, for this view, the prover only needs to send
the input wire value and nothing else.
3.2.1 Putting it All Together: ZKB++. This series of optimiza-
tions results in our new protocol ZKB++ which is presented in
Scheme 1.
Notice that in ZKB++, the prover explicitly sends the challenge
e to the verifier. In the original ZKBoo protocol, the verifier is
explicitly given all of the inputs to the challenge random oracle, so
it can compute the challenge right away, and then check the proofs.
However, in our protocol, the verifier is no longer explicitly given
these inputs. Thus our verifier must first recompute all implicitly
6
There are 3 possible challenges for each iteration, so the cost of
given values. To be able to compute those values, the challenge e is
required which is why we explicitly include e in the proof.
sending e for a t iteration proof is t · log2(3).
ZKB++ Proof Size. The expected proof size is
|p| = t[|ci| + 2|ki| + 2/3|xi| + b|wi| + |ei|]
= t[c + 2κ + 2/3ℓm + bℓ + log2(3)]
= t[c + 2κ + log2(3) + ℓ · (2/3 · m + b)]
= ⌈κ(log2 3 − 1)−1⌉[c + 2κ + log2(3) + ℓ · (2/3 · m + b)]