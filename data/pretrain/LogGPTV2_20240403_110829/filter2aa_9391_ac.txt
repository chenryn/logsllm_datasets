```
```lua
do
    function foo(...)
        for i = 1, select('#', ...) do  -->获取参数总数
            local arg = select(i, ...); -->读取参数，arg 对应的是右边变量列表的第一个参数
            print("arg", arg);
        end
    end
    foo(1, 2, 3, 4);
end
```
---
## 运算符
运算符是一个特殊的符号，用于告诉解释器执行特定的数学或逻辑运算。Lua 提供了以下几种运算符类型：
### 算术运算符
```lua
a = 21
b = 10
c = a + b
print("Line 1 - c 的值为 ", c )
c = a - b
print("Line 2 - c 的值为 ", c )
c = a * b
print("Line 3 - c 的值为 ", c )
c = a / b
print("Line 4 - c 的值为 ", c )
c = a % b
print("Line 5 - c 的值为 ", c )
c = a^2
print("Line 6 - c 的值为 ", c )
c = -a
print("Line 7 - c 的值为 ", c )
```
### 关系运算符
```lua
a = 21
b = 10
if( a == b )
then
   print("Line 1 - a 等于 b" )
else
   print("Line 1 - a 不等于 b" )
end
if( a ~= b )
then
   print("Line 2 - a 不等于 b" )
else
   print("Line 2 - a 等于 b" )
end
if ( a  b )
then
   print("Line 4 - a 大于 b" )
else
   print("Line 5 - a 小于等于 b" )
end
-- 修改 a 和 b 的值
a = 5
b = 20
if ( a = a )
then
   print("Line 6 - b 大于等于 a" )
end
```
### 逻辑运算符
```lua
a = true
b = true
if ( a and b )
then
   print("a and b - 条件为 true" )
end
if ( a or b )
then
   print("a or b - 条件为 true" )
end
print("---------分割线---------" )
-- 修改 a 和 b 的值
a = false
b = true
if ( a and b )
then
   print("a and b - 条件为 true" )
else
   print("a and b - 条件为 false" )
end
if ( not( a and b) )
then
   print("not( a and b) - 条件为 true" )
else
   print("not( a and b) - 条件为 false" )
end
```
### 其他运算符
- `..`	连接两个字符串
- `#`	一元运算符，返回字符串或表的长度。
```lua
a = "Hello "
b = "World"
print("连接字符串 a 和 b ", a..b )
print("b 字符串长度 ",#b )
print("字符串 Test 长度 ",#"Test" )
```
### 运算符优先级
```lua
^
not    - (unary)
*      /       %
+      -
..
      =     ~=     ==
and
or
```
```lua
a+i        (a+i)        5+((x^2)*8)
a        (a        -(x^2)
x^y^z                       x^(y^z)
```
```lua
a = 20
b = 10
c = 15
d = 5
e = (a + b) * c / d;-- ( 30 * 15 ) / 5
print("(a + b) * c / d 运算值为  :",e )
e = ((a + b) * c) / d; -- (30 * 15 ) / 5
print("((a + b) * c) / d 运算值为 :",e )
e = (a + b) * (c / d);-- (30) * (15/5)
print("(a + b) * (c / d) 运算值为 :",e )
e = a + (b * c) / d;  -- 20 + (150/5)
print("a + (b * c) / d 运算值为   :",e )
```
---
## 文件 I/O
Lua I/O 库用于读取和处理文件。分为简单模式（和C一样）、完全模式。
- 简单模式（simple model）拥有一个当前输入文件和一个当前输出文件，并且提供针对这些文件相关的操作。
- 完全模式（complete model） 使用外部的文件句柄来实现。它以一种面对对象的形式，将所有的文件操作定义为文件句柄的方法
### 简单模式
简单模式在做一些简单的文件操作时较为合适。但是在进行一些高级的文件操作的时候，简单模式就显得力不从心。例如同时读取多个文件这样的操作，使用完全模式则较为合适。
```lua
file = io.open (filename [, mode])
-- r	以只读方式打开文件，该文件必须存在。
-- w	打开只写文件，若文件存在则文件长度清为0，即该文件内容会消失。若文件不存在则建立该文件。
-- a	以附加的方式打开只写文件。若文件不存在，则会建立该文件，如果文件存在，写入的数据会被加到文件尾，即文件原先的内容会被保留。（EOF符保留）
-- r+	以可读写方式打开文件，该文件必须存在。
-- w+	打开可读写文件，若文件存在则文件长度清为零，即该文件内容会消失。若文件不存在则建立该文件。
-- a+	与a类似，但此文件可读可写
-- b	二进制模式，如果文件是二进制文件，可以加上b
-- +	号表示对文件既可以读也可以写
```
以下为 file.lua 文件代码，操作的文件为test.lua(如果没有你需要创建该文件)，代码如下：
```lua
-- 以只读方式打开文件
file = io.open("test.lua", "r")
-- 设置默认输入文件为 test.lua
io.input(file)
-- 输出文件第一行
print(io.read())
-- 关闭打开的文件
io.close(file)
-- 以附加的方式打开只写文件
file = io.open("test.lua", "a")
-- 设置默认输出文件为 test.lua
io.output(file)
-- 在文件最后一行添加 Lua 注释
io.write("--  test.lua 文件末尾注释")
-- 关闭打开的文件
io.close(file)
```
执行以上代码，你会发现，输出了 test.lua 文件的第一行信息，并在该文件最后一行添加了 lua 的注释
在以上实例中我们使用了 io."x" 方法，其中 io.read() 中我们没有带参数
* `"*n"`	        读取一个数字并返回它。例：file.read("*n")
* `"*a"`	        从当前位置读取整个文件。例：file.read("*a")
* `"*l"` (默认)	    读取下一行，在文件尾 (EOF) 处返回 nil。例：file.read("*l")
* number	        返回一个指定字符个数的字符串，或在 EOF 时返回 nil。例：file.read(5)
其他的 io 方法有：
* io.tmpfile():返回一个临时文件句柄，该文件以更新模式打开，程序结束时自动删除
* io.type(file): 检测obj是否一个可用的文件句柄
* io.flush(): 向文件写入缓冲中的所有数据
* io.lines(optional file name): 返回一个迭代函数,每次调用将获得文件中的一行内容,当到文件尾时，将返回nil,但不关闭文件
### 完全模式
通常我们需要在同一时间处理多个文件。我们需要使用 file:function_name 来代替 io.function_name 方法。以下实例演示了如何同时处理同一个文件:
```lua
-- 以只读方式打开文件
file = io.open("test.lua", "r")
-- 输出文件第一行
print(file:read())
-- 关闭打开的文件
file:close()
-- 以附加的方式打开只写文件
file = io.open("test.lua", "a")
-- 在文件最后一行添加 Lua 注释
file:write("--test")
-- 关闭打开的文件
file:close()
```
执行以上代码，你会发现，输出了 test.lua 文件的第一行信息，并在该文件最后一行添加了 lua 的注释。
以下实例使用了 seek 方法，定位到文件倒数第 25 个位置并使用 read 方法的 *a 参数，即从当期位置(倒数第 25 个位置)读取整个文件。
```lua
-- 以只读方式打开文件
file = io.open("test.lua", "r")
file:seek("end",-25)
print(file:read("*a"))
-- 关闭打开的文件
file:close()
```
---
## 错误处理
程序运行中错误处理是必要的，在我们进行文件操作，数据转移及 web service 调用过程中都会出现不可预期的错误。如果不注重错误信息的处理，就会造成信息泄露，程序无法运行等情况。
### 语法错误
语法错误通常是由于对程序的组件（如运算符、表达式）使用不当引起的。一个简单的实例如下：
```lau
-- test.lua 文件
a == 2
```
以上代码执行结果为：
```
lua: test.lua:2: syntax error near '=='
```
正如你所看到的，以上出现了语法错误，一个 "=" 号跟两个 "=" 号是有区别的。一个 "=" 是赋值表达式两个 "=" 是比较运算。
另外一个实例:
```lua
for a= 1,10
   print(a)
end
```
执行以上程序会出现如下错误：
```
lua: test2.lua:2: 'do' expected near 'print'
```
语法错误比程序运行错误更简单，运行错误无法定位具体错误，而语法错误我们可以很快的解决，如以上实例我们只要在 for 语句下添加 do 即可：
```lua
for a= 1,10
do
   print(a)
end
```
### 运行错误
运行错误是程序可以正常执行，但是会输出报错信息。如下实例由于参数输入错误，程序执行时报错：
```lua
function add(a,b)
   return a+b
end
add(10)
```
当我们编译运行以下代码时，编译是可以成功的，但在运行的时候会产生如下错误：
```
lua: test2.lua:2: attempt to perform arithmetic on local 'b' (a nil value)
stack traceback:
    test2.lua:2: in function 'add'
    test2.lua:5: in main chunk
    [C]: ?
```
lua 里调用函数时，即使实参列表和形参列表不一致也能成功调用，多余的参数会被舍弃，缺少的参数会被补为 nil。
以上报错信息是由于参数 b 被补为 nil 后，nil 参与了 + 运算。
假如 add 函数内不是 "return a+b" 而是 "print(a,b)" 的话，结果会变成 "10 nil" 不会报错。
### 错误处理
我们可以使用两个函数：assert 和 error 来处理错误。实例如下：
```lua
local function add(a,b)
   assert(type(a) == "number", "a 不是一个数字")
   assert(type(b) == "number", "b 不是一个数字")
   return a+b
end
add(10)
```
执行以上程序会出现如下错误：
```
lua: test.lua:3: b 不是一个数字
stack traceback:
    [C]: in function 'assert'
    test.lua:3: in local 'add'
    test.lua:6: in main chunk
    [C]: in ?
```
实例中 assert 首先检查第一个参数，若没问题，assert 不做任何事情；否则，assert 以第二个参数作为错误信息抛出。
#### error函数
```lua
error (message [, level])
```
功能：终止正在执行的函数，并返回 message 的内容作为错误信息 (error 函数永远都不会返回)
通常情况下，error 会附加一些错误位置的信息到 message 头部。
Level 参数指示获得错误的位置:
* Level=1[默认]：为调用 error 位置 (文件 + 行号)
* Level=2：指出哪个调用 error 的函数的函数
* Level=0: 不添加错误位置信息
### pcall 和 xpcall、debug
Lua 中处理错误，可以使用函数 pcall（protected call）来包装需要执行的代码。
pcall 接收一个函数和要传递给后者的参数，并执行，执行结果：有错误、无错误；返回值 true 或者或 false, errorinfo。
语法格式如下
```lua
if pcall(function_name, ….) then
-- 没有错误
else
-- 一些错误
end
```
```lua
> =pcall(function(i) print(i) end, 33)
33
true
> =pcall(function(i) print(i) error('error..') end, 33)
33
false        stdin:1: error..
```
pcall 以一种 "保护模式" 来调用第一个参数，因此 pcall 可以捕获函数执行中的任何错误。
通常在错误发生时，希望落得更多的调试信息，而不只是发生错误的位置。但 pcall 返回时，它已经销毁了调用桟的部分内容。
Lua 提供了 xpcall 函数，xpcall 接收第二个参数——一个错误处理函数，当错误发生时，Lua 会在调用桟展开（unwind）前调用错误处理函数，于是就可以在这个函数中使用 debug 库来获取关于错误的额外信息了。
debug 库提供了两个通用的错误处理函数:
* debug.debug：提供一个 Lua 提示符，让用户来检查错误的原因
* debug.traceback：根据调用桟来构建一个扩展的错误消息
```lua
function myfunction ()
   n = n/nil
end
function myerrorhandler( err )
   print( "ERROR:", err )
end
status = xpcall( myfunction, myerrorhandler )
print( status)
```