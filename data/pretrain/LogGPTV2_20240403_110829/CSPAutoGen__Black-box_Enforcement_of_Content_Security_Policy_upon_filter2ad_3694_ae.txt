### Constants and Enumerations
- **CONST**
- **ENUM**
- **GAST**
- **NUMBER**
- **REGEXP**
- **URL**

### Evaluation Summary
| Type       | Ground Truth | Templates | Correctly Inferred | Accuracy  |
|------------|--------------|-----------|--------------------|-----------|
| CONST      | 95           | 97        | 95                 | 97.9%     |
| ENUM       | 9            | 3         | 3                  | 100%      |
| GAST       | 0            | 0         | 0                  | N/A       |
| NUMBER     | 24           | 24        | 24                 | 100%      |
| REGEXP     | 10           | 14        | 10                 | 71.4%     |
| URL        | 9            | 9         | 9                  | 100%      |
| **Total**  | **147**      | **147**   | **141**            | **95.9%** |

**Figure 3:** Template Matching Rate (Medium Rate: 99.2%).

**Figure 4:** Loading Time of Alexa Top 50 Websites (Median Difference: 9.1%).

### Table 4: Real-world Applications with All Three Types of XSS Vulnerabilities (Reﬂected, Stored, and DOM-based)
| Application    | Version  | Vulnerability  | Language | LOC      |
|----------------|----------|----------------|----------|----------|
| Codiad         | 2.4.3    | CVE-2014-9582  | PHP      | 8,989    |
| Ektron CMS     | 9.1.0    | CVE-2015-4427  | ASP.NET  | NA       |
| FoeCMS         | 0.0.1    | CVE-2014-4849  | PHP      | 17,943   |
| JForum         | 2.1.9    | CVE-2012-5337  | JAVA     | 61,247   |
| LiteCart       | 1.1.2.1  | CVE-2014-7183  | PHP      | 29,175   |
| OrchardCMS     | 1.9.0    | CVE-2015-5520  | ASP.NET  | 109,467  |

### Evaluation Methodology
For the evaluation, we use WordPress 4.2.3 as an example. For each inline script in the WordPress source code, we find the corresponding template and manually compare each PHP part (i.e., runtime information) in the inline script with each type in the template. For instance, if the type in the template is a URL and the corresponding PHP variable value in the source code can only be a URL, we consider the type in the template correctly inferred.

### Evaluation Results
The results are summarized in Table 3. The total numbers for all types in both WordPress and templates are exactly the same, indicating that CSPAutoGen correctly finds all possible locations. The overall inference accuracy is 95.9%. Some inferred types by CSPAutoGen are looser or stricter than those in WordPress. Specifically, two CONST types should be ENUM, and four REGEXP types should be ENUM. The stricter inference (ENUM as CONST) is due to missing values not captured in the training samples, while the looser inference (ENUM as REGEXP) is because the number of samples with those scripts is smaller than the default threshold (120). In real-world websites, the accuracy is expected to be higher due to a larger number of samples.

### Security Evaluation
We evaluate the security of CSPAutoGen in three experiments:
1. **Protection against Existing XSS Attacks:** We apply CSPAutoGen on six real-world web applications with XSS vulnerabilities (Table 4). The evaluation shows that CSPAutoGen successfully protects against all three types of XSS attacks.
2. **Manual Review of Flexible Types:** We count the number of gASTs, nodes, atom data nodes, complex data nodes, types, and flexible types from the templates of Alexa Top 50 websites. Flexible types account for only 1.4% of all types. Manual review shows that no flexible type needs to be changed to more restrictive ones.
3. **Comparison with Existing Websites' CSPs:** Among Alexa Top 50 websites, six have configured CSPs. However, five out of six set "unsafe-inline" and "unsafe-eval" in their CSPs, which allows XSS attacks. CSPAutoGen sets neither, making it more secure.

### Performance Overhead
#### Overall Latency Overhead
- **CSPAutoGen Deployment:** A middlebox proxy running on a 2.20 GHz Intel Xeon E5 server with 64GB RAM and Ubuntu 14.04.
- **Client-Side Machine:** A 1.4GHz Intel Core i5 Mac Air with 8GB RAM and Chrome 43.
- **Latency Between Client and Server:** 0.5 ms.
- **Evaluation Results:** Median loading time with CSPAutoGen: 5.94s, without: 5.11s. Median overhead: 9.1%.

#### Latency Overhead Breakdown
| Latency Source                       | Min (ms) | Median (ms) | Max (ms) |
|--------------------------------------|----------|-------------|----------|
| DOM Tree Parsing                     | 1349.00  | 112.62      | 1419.00  |
| Script Transmission (Rewriting Phase) | 1.97     | 23          | 51       |
| gAST Building                        | ∼0       | 0.2         | 0.5      |
| Template Matching                    | ∼0       | 0.1         | 107      |
| Runtime-included Script              | 9        | 9           | 332      |
| Symbolic Template                    | ∼0       | 33          | 64       |

### Behind-the-login Functionality Experiment
| Domain      | Runtime-included Function | Eval | setTimeout & setInterval | Inline Script |
|-------------|---------------------------|------|-------------------------|---------------|
| Amazon      | 100% (48/48)              | 100% (168/168) | 75% (3/4) | 99.6% (69,221/69,499) |
| Gmail       | 100% (134/134)            | N/A (0/0)      | 100% (81/81) | 97.8% (4,313/4,411) |
| Google      | 100% (182/182)            | 100% (38/38)   | 98.0% (539/550) | 92.1% (70/76) |
| LinkedIn    | 100% (27/27)              | 100% (1,602/1,606) | 99.8% (4,998/5,008) | 98.8% (2,038/2,061) |
| Yahoo       | N/A (0/0)                 | 97.0% (875/902) | 89.6% (831/927) | - |

This optimized text provides a clearer, more professional, and coherent structure for the given information.