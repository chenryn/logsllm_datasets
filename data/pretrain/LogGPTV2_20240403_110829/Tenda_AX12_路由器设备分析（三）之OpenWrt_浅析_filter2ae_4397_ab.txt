### 优化后的文本

#### 1. 初始化过程
在启动过程中，系统会尝试运行以下初始化进程：
```c
if (!run_init_process("/etc/preinit") ||
    !run_init_process("/sbin/init") ||
    !run_init_process("/etc/init") ||
    !run_init_process("/bin/preinit") ||
    !run_init_process("/bin/sh")) {
    // 处理错误
}
```
通过UART日志信息，在`/etc/preinit`脚本执行之后，系统会继续加载`procd`模块。设备的UART输出包含更多的启动日志，需要安全人员仔细分析。

示例日志：
```
[    6.188804] kmodloader: done loading kernel modules from /etc/modules-boot.d/*
[    6.200760] init: - preinit -    ubimkvol: error!: UBI is not present in the system
ls: /lib/modules/4.9.206/ltq_atm*: No such file or directory
[    7.505491] mount_root: switching to jffs2 overlay
[    7.554060] urandom-seed: Seeding with /etc/urandom.seed
nanddump: error!: Unable to write to output
          error 32 (Broken pipe)
chown: unknown user/group nwk:nwk
[    8.856209] procd: - early -    [    8.857722] procd: - watchdog -    [    9.594215] procd: - watchdog -    [    9.596328] procd: - ubus -    [    9.656987] procd: - init -    Please press Enter to activate this console.
```

#### 2. `procd` 模块的作用
在OpenWrt嵌入式系统中，有一些通用的基础内核模块，如基础库`libubox`、系统总线`ubus`、网络接口管理模块`netifd`、核心工具模块`ubox`和服务管理模块`procd`。

在Tenda AX12设备中的进程信息如下：
```
1 root        1656 S    /sbin/procd
752 root      1252 S    /sbin/ubusd
2009 root      1840 S    /sbin/netifd
```

由于嵌入式设备的漏洞风险点通常与服务相关，因此我们需要了解`procd`服务。`procd`是一个守护进程，负责监控系统进程的状态。如果某些系统进程异常退出，`procd`会重新启动这些进程。

我在Tenda AX12设备上的`httpd`组件服务中发现了一个缓冲区栈溢出漏洞。当我构造好POC并尝试触发漏洞时，发现每次触发都是无效的，因为设备的`httpd`服务仍然可以访问和请求。通过获取shell并观察，我发现每次发送POC后，`httpd`进程的PID都会更改，这表明设备上有一个守护进程会在`httpd`进程异常退出后重新启动它。

为了验证这一点，我在Tenda AX12设备中杀掉`httpd`服务的进程，随后`httpd`服务又重新启动了。

#### 3. `procd` 的功能
`procd`提供了多种功能，包括设置服务实例的参数值。常见的参数类型有：
- `command`：服务的启动命令行。
- `respawn`：进程意外退出的重启机制及策略。需要设置三个值：
  - 判断异常失败边界值（`threshold`），默认为3600秒。
  - 重启延迟时间（`timeout`），默认为5秒。
  - 总的失败重启次数（`retry`），默认为5次。
- `env`：进程的环境变量。
- `file`：配置文件名，比较其内容是否改变。
- `netdev`：绑定的网络设备（探测`ifindex`更改）。
- `limits`：进程资源限制。

`procd.sh`中还封装了其他函数，如：
- `procd_open_trigger`
- `procd_close_trigger`
- `procd_add_reload_trigger`
- `procd_open_validate`
- `procd_close_validate`
- `procd_kill`
- `procd_close_service`
- `procd_open_service(name, [script])`
- `uci_validate_section`

在`/etc/init.d/httpd`脚本中，调用`stop`命令可以停止进程的运行，但使用`kill`命令无法停止进程，这是因为`procd`的作用。`/etc/init.d/httpd`脚本中自定义了`start_service()`函数，并定义了`USE_PROCD`变量，用于调用`procd`预定义的函数。

`procd`预定义的函数包括：
- `start_service`：向`procd`注册并启动服务。
- `stop_service`：让`procd`解除注册并关闭服务。
- `service_triggers`：配置文件或网络接口改变后触发服务重新读取配置。
- `service_running`：查询服务的状态。
- `reload_service`：重启服务。
- `service_started`：判断进程是否启动成功。

另外，尝试使用`kill`命令结束`procd`进程时，`procd`的PID是1。这是因为在内核参数启动调用的初始化进程`preinit`后，`procd`会继承`preinit`的进程号PID 1。并且在`kill 1`时，Tenda AX12设备会进行重启。

#### 4. `httpd` 启动流程
结合OpenWrt系统的启动流程和对`procd`模块的了解，设备上电后，`uboot`会启动，然后调用Kernel。Kernel会调用`/etc/preinit`脚本，并且根据Linux的特性，会启动`/etc/init.d`目录下的脚本。`httpd`脚本会自启动，调用`procd.h`中定义的预定义函数，使用`ubus`模块向`procd`模块注册`httpd`进程的实例信息。

#### 5. 总结
本文通过Tenda AX12 Wi-Fi6路由器的UART日志信息和OpenWrt的特性，对设备的启动流程进行了梳理和分析。此外，还介绍了`procd`守护进程的作用及其如何管理系统内的进程。掌握这些知识后，对设备的研究将更加熟练。

#### 6. 参考
（此处可以添加相关的参考文献或链接）

希望优化后的文本更加清晰、连贯和专业。如果有任何进一步的需求或修改，请告诉我！