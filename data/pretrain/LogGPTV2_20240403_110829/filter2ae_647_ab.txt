        private ConstructorTest(boolean n) {
            System.out.println("私有构造函数");
        }
        public static void main(String[] args) {
            try {
                Class c1 = Class.forName("com.reflect.ConstructorTest");
              Constructor[] constructors1  = c1.getDeclaredConstructors();
              Constructor[] constructors2 = c1.getConstructors();
              for (Constructor c : constructors1) {
                    System.out.println(c);
                }
                System.out.println("-------分割线---------");
                for (Constructor c : constructors2) {
                    System.out.println(c);
                }
                System.out.println("-------分割线---------");
                Constructor constructors3 = c1.getConstructor(String.class);
                System.out.println(constructors3);
                System.out.println("-------分割线---------");
                Constructor constructors4 = c1.getDeclaredConstructor(boolean.class);
                System.out.println(constructors4);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
### 反射创建类对象
在前面我们获取了Class对象，之后展示了一系列获取成员变量、成员方法和成员函数的方式后，我们现在可以通过反射来生成实例化对象，一般我们使用Class对象的newInstance()方法来进行创建类对象。
使用的方式也特别简单，只需要通过forname方法获取到的class对象中进行newInstance方法创建即可。
    Class c = Class.forName("com.reflect.MethodTest"); // 创建Class对象
                Object m1 =  c.newInstance(); // 创建类对象
这里也顺便说下invoke方法，invoke方法位于java.lang.reflect.Method类中，用于执行某个的对象的目标方法。  
一般会和getMethod方法配合进行调用。
使用用法
    public Object invoke(Object obj, Object... args)
第一个参数为类的实例，第二个参数为相应函数中的参数
obj：从中调用底层方法的对象，必须是实例化对象
args： 用于方法的调用，是一个object的数组，参数有可能是多个
但需要注意的是，invoke方法第一个参数并不是固定的：
**如果调用这个方法是普通方法，第一个参数就是类对象；**
**如果调用这个方法是静态方法，第一个参数就是类；**
将我们的知识进行整合归纳下，我们可以写个完整的小例子。
    import java.lang.reflect.Method;
    public class ReflectTest {
        public void reflectMethod() {
            System.out.println("反射测试成功!!!");
        }
        public static void main(String[] args) {
            try {
                Class c = Class.forName("com.reflect.ReflectTest"); // 创建Class对象
                Object m = c.newInstance(); // 创建类实例对象
                Method method = c.getMethod("reflectMethod"); // 获取reflectMethod方法
                method.invoke(m); // 调用类实例对象方法
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
### 小结
上面我们讲述了反射机制流程概念和基本使用方法，从Class对象获取，到获取成员变量、成员方法和构造函数，接着是newInstance创建类对象和invoke方法，最后是一个简单反射例子的组成。相信大家都对反射有个很清晰的了解和认识，现在我们来看看我们平时漏洞测试中，如何使用java反射中如何获取Runtime类来命令执行测试弹出计算器。
### 利用反射构造Runtime类执行
这里我们可以先模仿前面的反射例子，尝试去反射执行Runtime类去命令执行。
    import java.lang.reflect.Method;
    public class RuntimeTest {
        public static void main(String[] args) throws Exception {
            Class c1 = Class.forName("java.lang.Runtime");
            Object m = c1.newInstance();
            Method method = c1.getMethod("exec", String.class);
            method.invoke(m,"/System/Applications/Calculator.app/Contents/MacOS/Calculator");
        }
    }
但我们发现了使用newInstance产生了报错的话，而往往其可能是以下原因未能实现。
1、使用的类没有无参构造函数
2、使用的类构造函数是私有的
之后我们查看其出错原因，java.lang.Runtime with modifiers
"private"。Runtime类的构造方法是private权限私有的，是根据“单例模式”进行设计的，我们无法进行直接调用。看来我们上述的反射机制也是有限制的，并不能饶过private权限的检查。
既然我现在不能绕过private权限的检测，那我先不管newIntance创建类对象，先获取Rumtime类的方法先谈个计算器再看看。所以我们需要对代码进行简单修改下。
我们使用getMethod作用通过反射获取一个类的某个特定的公有方法。且java中支持类的重载，我们不能仅通过函数名确定一个函数。在调用getMethod时候，需要传给他你需要获取的函数的参数类型列表。
如Runtime.exec方法有6个重载：
exec(String commmand)
我们可以实用最简单这种只有一个参数且类型是String。实用getMethod("exec",String.class)获取Runtime.exec方法，并且获取getRuntime方法来执行。
然后我们将这段代码进行简略下，就生成以下我们常见的反射payload测试：
    Class c1 = Class.forName("java.lang.Runtime");
    c1.getMethod("exec", String.class).invoke(c1.getMethod("getRuntime").invoke(c1),"/System/Applications/Calculator.app/Contents/MacOS/Calculator");
这里我们虽然成功执行方法弹出计算器，但仅仅只是调用其方法去实现。而我们还是想执行其私有方法，通过newInstance来构造使用。这样就需要我们通过setAccessible(true)来突破访问权限的检查。
### 设置setAccessible(true)暴力访问权限
在一般情况下，我们使用反射机制不能对类的私有private字段进行操作，绕过私有权限的访问。但一些特殊场景存在例外的时候，比如我们进行序列化操作的时候，需要去访问这些受限的私有字段，这时我们可以通过调用AccessibleObject上的setAccessible()方法来允许访问。
Java.lang.reflect.AccessibleObject类是Field，Method和Constructor类对象的基类，可以提供将反射对象标记为使用它抑制摸人Java访问控制检查的功能，同时上述的反射类中的Field，Method和Constructor继承自AccessibleObject。所以我们在这些类方法基础上调用setAccessible()方法，既可对这些私有字段进行操作。
所有我们最开始的代码再修改简略下，就能成功命令执行了。
    import java.lang.reflect.Constructor;
    public class RuntimeTest {
        public static void main(String[] args) throws Exception {
            Class c1= Class.forName("java.lang.Runtime");
            Constructor m = c1.getDeclaredConstructor();
            m.setAccessible(true);
            c1.getMethod("exec", String.class).invoke(m.newInstance(), "/System/Applications/Calculator.app/Contents/MacOS/Calculator");
        }
    }
### Java反序列化漏洞demo
最后结束就用一个之前学习java反射的时候学习的demo，如果我们在进行反序列化过程中可控的话，能够加载我们使用反射调用的恶意命令语句的话，则能够成功进行命令执行。
    import java.io.*;
    import java.lang.reflect.Method;
    public class demo implements Serializable {
        private Integer age;
        private String name;
        public demo() {}
        public demo(String name,Integer age) {// 构造函数，初始化时执行
            this.age = age;
            this.name = name;
        }
        private void readObject(java.io.ObjectInputStream in) throws IOException,ClassNotFoundException{
            in.defaultReadObject(); // 调用原始的readObject方法
            try{ // 通过反射方法执行命令;
                Method method = java.lang.Runtime.class.getMethod("exec", String.class);
                Object result = method.invoke(Runtime.getRuntime(),"calc.exe");
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
            public static void main(String[] args) {
                 demo x = new demo();
                 operation.ser(x);
                 operation.deser();
            }
    }
    class operation{
        public static void ser(Object obj) {
            try {// 序列化操作，写数据
                ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("object.obj"));
                // ObjectOutStream能把Object输出成Byte流
                oos.writeObject(obj); // 序列化关键函数
                oos.flush(); //缓冲流
                oos.close(); //关闭流
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        public static void deser() {
            try {// 反序列化操作，读取数据
                File file = new File("object.obj");
                ObjectInputStream ois = new ObjectInputStream(new FileInputStream(file));
                Object x = ois.readObject(); //反序列化的关键函数
                System.out.println(x);
                ois.close();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
在这个实验当中，我们使用的Java反射却是可以访问private的方法和属性，绕过第二级安全机制的方法，原理本质是官兵访问安全检查。
### 小结
在实际利用场景当中，我们利用利用Java反射机制来绕过一些安全权限机制检查，如获取private权限的方法和属性。本质就是我们绕过访问安全检查。所以通过java反射机制的学习，能够为我们为我们后面的java漏洞分析调试，java漏洞poc测试和服务端模板引擎注入等有着十分重要的意义。因为文章讲的比较通俗简单，主要是面向开始没有涉及一些漏洞分析与源码分析，后面java安全基础系列会慢慢加入这些并详细讲解。其次如果大家对文章有什么问题和觉得需要改进的地方，可以在评论下方留言，大家一起探讨交流下。
### 参考