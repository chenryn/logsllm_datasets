Software Architecture and Boot Sequence.
The bootloader in mask ROM is executed immediately
after the CPU resets and loads a reduced boot ﬁrmware
from the serial FLASH chip. The boot ﬁrmware has the
capability to initialize the hardware to a suﬃcient degree to
load the main ﬁrmware from the magnetic disks. However,
it does not implement the full SATA protocol that this hard
drive uses to talk to the computer.
Finally, the main ﬁrmware is loaded into memory from
a reserved area of the disk (not user accessible) and then
executed. Additional overlays, providing non-default func-
tionality, can be loaded on demand from the reserved area.
For example, a diagnostic menu available through the serial
console is in overlays “4” and “5”. The memory layout at
run-time is depicted in Figure 2.
As our hard drive has a SATA bus, read and write requests
to it are encapsulated in the ATA protocol. This is a simple
master-slave protocol where the computer will always send
a request, to which the hard drive replies with a response.
Inside the hard drive’s ﬁrmware, ﬁve components take care
of processing data: the interrupt handlers process hardware
events, the SATA task processes data from the SATA port,
the cache task manages the cache memory and evicts blocks
from the cache, the read-write task transfers data to and
from the disk platters, and the management task handles
diagnostic menu commands and background activities.
Analysis Techniques.
Knowledge about the system was acquired from publicly
available information (e.g., [1]) and by reverse-engineering a
hard drive in our lab. While the ﬁrmware (except for the
mask ROM bootloader) is contained in update ﬁles, their
format is not obvious and the header format was not doc-
umented. Fortunately, the diagnostic menu allows parts of
memory to be dumped while the system is loaded. Thus,
it proved easier to dump the ﬁrmware of the running hard
drive through this menu than recovering it from the ﬁrmware
update binary.
The mask ROM bootloader contains another menu, which
can be accessed at boot time on the serial console. This
menu provides a means to read and write the memory con-
tents before the boot ﬁrmware is loaded. We therefore de-
signed a small GNU Debugger (GDB) stub that we injected
into the hard drive’s memory.
Inconveniently, our target hard drive’s ARM 966 [3] core
lacks hardware debug support. Therefore, we relied purely
on software breakpoints, rather than on hardware break-
points or single-stepping.
In this context, software break-
points are essentially instructions that trigger a data abort
interruption. By hooking into that interrupt vector’s han-
dler and replacing instruction by a breakpoint, one can im-
plement a debugger stub fully in software.
If a software breakpoint is overwritten prior to it being
reached, e.g., because the ﬁrmware loads new code, the
breakpoint will never be triggered.
In addition, we have
281
observed that interrupt vectors or the debugger code itself
can be overwritten by the ﬁrmware. To work around these
problems, because of the lack of hardware breakpoints and
watch-points, we manually identiﬁed all sections of code that
load new code and hooked these functions to keep our de-
bugger from disconnecting.
Finally, because setting a software breakpoint requires to
modify instructions, it was not possible to put breakpoints
on the ROM memory that contains the ﬁrst bootloader and
many other important library functions.
Our debugger stub itself requires only 3.4 kB of memory,
and it can be easily relocated to a new address. It commu-
nicates with a GDB instance over the serial port while still
allowing the ﬁrmware’s debug messages to be printed on the
serial port. As the stub is stateless, it does not require any
permanent storage of information. Complex debugging fea-
tures, such as the bookkeeping required for breakpoints, are
managed on the reverse engineer’s workstation by GDB.
2.2 Developing Malicious Payloads
Our main goal in designing a proof-of-concept compro-
mised hard-drive ﬁrmware is to be able to modify blocks
as they are read from or written to the disk. Hooking into
write requests allows the backdoor to read and tamper with
data blocks in the write buﬀer before they are written to the
disk. In particular, we use a sequence of bytes in the ﬁrst few
bytes of a block, as a magic value. When this magic value
is detected by the backdoored ﬁrmware, predeﬁned actions
of the backdoor will be triggered.
Hooking Writes in the Firmware.
A write operation in a modern hard drive speciﬁes the
logical block number to write to (LBA), the number of blocks
to write, and the data to be written. This information is
encoded in ATA commands and transmitted to the hard
drive through the Serial ATA connection.
On the hard drive we reverse engineered, specialized hard-
ware is responsible for receiving the ATA messages and no-
tifying the ﬁrmware by raising an interrupt. The ﬁrmware
then performs the action corresponding to the opcode ﬁeld
of the ATA message. In a write DMA extended ATA com-
mand, the data is then passed to the cache management
task. This task keeps the received data blocks in volatile
low-latency memory. When contiguous blocks are received,
the ﬁrmware aggregates these blocks in memory. Eventu-
ally, the blocks will be evicted from cache memory, either
because the cache is ﬁlled with newer data, or because a
task commits them to the hard drive. Finally, the blocks
will be passed to the read/write task, which takes care of
positioning the head on the right track of the platter, and
writes the data to the magnetic storage.
Figure 3 shows the sequence of the operations inside the
hard drive. Our backdoor inserts itself in the call chain be-
tween the cache manager and the read/write task. By hook-
ing writes after the cache, we ensure that the performance
overhead remains low. At this point ATA commands have
already been acknowledged, thus, the overhead of searching
for the magic command in a block is less apparent to the
user.
Reading Blocks from inside the Firmware.
Reading blocks inside the ﬁrmware proved to be harder
than modifying writes. In order to read an arbitrary block,
the modiﬁed ﬁrmware has to invoke a function providing
several structured parameters. In our prototype implemen-
tation, this operation seems to trigger some internal side
eﬀect that makes the ﬁrmware unstable when multiple con-
secutive read operations are performed by our code.
Update Packaging and Final Payload.
Thanks to the debugger and the full ﬁrmware image, we
were able to understand the ﬁrmware update format. We
then generated a modiﬁed ﬁrmware update ﬁle that includes
the original ﬁrmware infected with our proof-of-concept ma-
licious code. Such a ﬁrmware update ﬁle can then be pro-
grammed to the disk with the manufacturer’s ﬁrmware up-
date tool, which could be done by a malware with admin-
istrator rights. The backdoor will then be permanently in-
stalled on the drive.
With the current state of our reverse engineering of the
hard drive, we can reliably hook write commands received
by the hard drive and modify the data to be written to the
magnetic platter. The backdoor can also read and exﬁltrate
arbitrary blocks, but it is not stable enough to retrieve mul-
tiple blocks from the disk. A more stable implementation
would allow the full port of the Data Exﬁltration Backdoor
that we will present in Section 3. We could invest more time
to try to solve the bug in our code, but there are few incen-
tives to do so as our aim is to demonstrate the feasibility
of such attacks rather than to develop a weaponized exploit
for the hard drive.
However, the current state is suﬃcient to fully imple-
ment more straightforward attacks. For example, we can re-
implement the famous backdoor presented by Ken Thomp-
son in Reﬂections on Trusting Trust [29].
In this lecture
Thompson presented a compiler that inserts a backdoor while
compiling the UNIX login command, allowing the password
check to be bypassed. Similarly a compiler would transmit
such a functionality when compiling a compiler. A malicious
drive version of the login program backdoor simply detects
a write to the disk of a critical part of the login binary and
replace the code by a malicious version of the login binary.
2.3 Evaluation of the backdoor
We performed an overhead test to measure the impact
of the backdoor under worst-case hard-drive operation. In-
deed, if the backdoored ﬁrmware introduced signiﬁcant over-
head, this may alert a user of an anomaly.
This experiment is performed on the hard drive with the
ﬁrmware backdoor described in Section 2.2, on an Intel Pen-
tium E5200 2.5 GHz desktop computer equipped with 8 GB
of physical memory. The hard drive was connected over in-
ternal SATA controller (Intel 82801JD/DO (ICH10 Family)
4-port SATA/IDE Controller).
Overhead Test.
We measured the write throughput on the test machine
using IOZone [18]. As the backdoor functionality is only ac-
tivated during writes, we use the IOZone write-rewrite test.
We compare the write throughput obtained on the system
running the unmodiﬁed hard drive ﬁrmware with the one
running the backdoored ﬁrmware.
We perform the test with the IOZone o_direct option
set to compare the results when the ﬁlesystem cache is not
present. Most applications make use of the ﬁlesystem buﬀer
cache to optimize access to the hard drive. However, with
282
Computer
Process
- Write command
  'XYZFXYZFXYZF...' to modify
  block LBAw through   
  backdoor
1: Write file (filename, data)
OS: filesystem, 
block cache
- Allocate blocks (LBAw, count) to file
- Cache written blocks in RAM
2: Write  blocks 
    (LBAw, count, data)
SATA controller
Hard drive
Read/write disk
Backdoor
- Decode backdoor 
  command
- Replace block to write
6: Write blocks 
(LBAw, count, replaced data)
5: Disk write
(LBAw, count, data,
 memory address)
Cache manager
 - Merge successive 
   write requests
SATA link
3: ATA write 
(LBAw, count, data)
SATA
communication
4: Cache write (LBAw, count, 
data, memory address)
Figure 3: Call sequence of a write operation on the hard drive.
the cache enabled, our experiments showed it was impossible
to distinguish the performance of the modiﬁed ﬁrmware from
the original one. Hence, we emulate, as best as we can, a
suspicious user attempting to detect hard-drive anomalies
by testing the direct throughput.
Table 1: Filesystem-level write-throughput
Figure 4: A server-side storage backdoor.
Write test
Mean (MB/s)
95% CI
With backdoor
Without backdoor
37.57
37.91
[37.56; 37.59]
[37.89; 37.94]
We perform 30 iterations of the experiment, with a 30
second pause between successive iterations. For each set
of values measured, we compute 95%-conﬁdence intervals
using the t-distribution. Table 1 shows the comparison of
the write throughputs of the hard drive with the unmodiﬁed
and the backdoored ﬁrmware. In both cases, we executed
the IOZone write/rewrite test to create a 100 MB ﬁle with
a record length of 512 KB.
Comparing the results, we can conclude that the backdoor
adds an almost unnoticeable overhead to write operations.
For instance, to put those results into context, we measured
larger disk throughput ﬂuctuations by changing the cable
that connects the hard drive to the computer than in the
case of our backdoor.
3. DATA EXFILTRATION BACKDOOR
In this section, we present the design overview of a back-
door that allows to send and receive commands and data
between the attacker and a malicious storage device, i.e., a
Data Exﬁltration Backdoor (DEB).
Basically, a DEB has two components:
(i) a modiﬁed
ﬁrmware in the target storage device and (ii) a protocol
to leverage the modiﬁed ﬁrmware and to establish a bi-
directional communication channel between the attacker and
the ﬁrmware.
First we describe a concrete scenario in which the data ex-
ﬁltration attack is performed, and then proceed to describe
the challenges and our solution in detail.
3.1 Data Exﬁltration Overview
We start with a real-world example of a server-side DEB,
where the compromised drive runs behind a typical two-tier
web server and database architecture, see Figure 4. This
scenario is of particular interest, because the various proto-
cols and applications between the attacker and the storage
device can render the establishment of a (covert) communi-
cation channel extremely diﬃcult. We assume that the web
server provides a web service where users can write and then
read back content. This is the case for many web services.
The speciﬁc example we select here is that of a web forum
or blog service where users can post and browse comments.
To perform data exﬁltration from a server, the attacker
proceeds in the following way:
First, the attacker performs an HTTP GET or POST re-
quest from his or her browser to submit a new comment
to the forum of the web server. The comment contains a
trigger value, or magic value, and a disguised “read sector
X” command for the backdoor. The web server passes this
283
comment data and other meta-data—such as the user name
and timestamp—to the back-end database through an SQL
INSERT query. Using the ﬁlesystem and the operating sys-
tem, the database then writes the data and meta-data to the
compromised storage device. As one of the write requests
contains the magic value, some of the comment data is now
replaced by the compromised ﬁrmware with the contents of
sector X.
Finally, the attacker issues a GET request to simply read
the exact forum comment just created. This causes an SQL
SELECT query from the web application to the database,
which triggers a read request from the database to the com-
promised storage device. The content of the comment dis-
played to the attacker now contains data from sector X. The
attacker has successfully exﬁltrated data.
We stress that this DEB allows the attacker to read ar-
bitrary sectors and access the storage device as a (remote)
block device. The attacker can thus remotely mount ﬁlesys-
tems and access ﬁles from the device selectively, without
having to exﬁltrate the storage device’s contents fully.
For example, by extracting the ﬁrst couple of sectors,
infer-
the attacker can read the device’s partition table,
ring the ﬁlesystem types in use. He or she can then follow
the ﬁleystem meta-data either locally inside the disk or re-
motely on his or her client machine to request individual
ﬁles. We have automated this process and present results
in Section 3.4. In conclusion, the attacker has a complete
remote read access to the hard disk.
3.2 Challenges in Implementing a DEB
While modern operating systems and disks do little to
actively prevent this type of attack, we have observed some