## PostgreSQL pg_stat_statements AWR 插件 pg_stat_monitor , 过去任何时间段性能分析 [推荐、收藏]       
### 作者                    
digoal                    
### 日期                    
2021-04-15                     
### 标签                    
PostgreSQL , pg_stat_monitor , SQL 柱状图 , 快照        
----                    
## 背景                    
pg_stat_statements 是PG内置的活跃会话统计视图, 具有计数器, 累计计数. 同时有reset函数可以清空计数器.    
所以可以阶段性的给pg_stat_statements打快照, 然后reset, 这样就能得到数据库在某个时间段的活跃会话统计信息.    
除此以外, PG还支持pg_stat_, pg_statio_ 等一系列统计视图(以及插件形式的pg_stat_kcache等), 同样有类似的reset函数可以清理.  同样也可以打快照保存对应的内容.     
- [《PostgreSQL AWR报告(for 阿里云ApsaraDB PgSQL)》](../201611/20161123_01.md)      
- [《PostgreSQL 活跃会话历史记录插件 - pgsentinel 类似performance insight \ Oracle ASH Active Session History》](../202003/20200324_25.md)      
- [《PostgreSQL 13 preview - wait event sample - 等待事件统计(插件,hook) - ASH - performance insight》](../202001/20200101_01.md)      
- [《PostgreSQL Oracle 兼容性之 - performance insight - AWS performance insight 理念与实现解读 - 珍藏级》](../201901/20190125_02.md)      
- [《PostgreSQL pg_stat_ pg_statio_ 统计信息(scan,read,fetch,hit)源码解读》](../201610/20161018_03.md)      
- [《PostgreSQL pg_stat_kcache - Gathers statistics about real reads and writes done by the filesystem layer.》](../202003/20200324_28.md)      
- [《PostgreSQL 如何查找TOP SQL (例如IO消耗最高的SQL) (包含SQL优化内容) - 珍藏级 - 数据库慢、卡死、连接爆增、慢查询多、OOM、crash、in recovery、崩溃等怎么办?怎么优化?怎么诊断?》](../201704/20170424_06.md)      
pg_stat_monitor 是一款基于pg_stat_statements技术的增强插件, 支持自动快照和存储, 支持了间歇性的会话统计信息聚合, 支持柱状图显示等. 更加方便的分析指定某个时间段的性能问题.      
https://github.com/percona/pg_stat_monitor    
重要参数:     
- pg_stat_monitor.pgsm_max_buckets bucket数 : 保持多少个快照    
- pg_stat_monitor.pgsm_bucket_time bucket的时间窗口 : 每个快照的时间跨度    
- pg_stat_monitor.pgsm_histogram_min : SQL 执行耗时 柱状图边界 min     
- pg_stat_monitor.pgsm_histogram_max : SQL 执行耗时 柱状图边界 max     
- pg_stat_monitor.pgsm_histogram_buckets : SQL执行时间柱状图最多几个bucket, SQL每次执行时根据执行耗时落入对应bucket, 这条SQL在对应bucket计数器+1(计数器表示这条SQL在这个bucket内调用了多少次), 从而可以分析每条SQL的执行耗时柱状图.      
- pg_stat_monitor.pgsm_track_planning : 是否跟踪SQL的执行计划, 生产了多少次执行计划, 执行计划的生成耗时(累计、平均、最大、最小、方差)      
What is pg_stat_monitor?    
The pg_stat_monitor is a PostgreSQL Query Performance Monitoring tool, based on PostgreSQL's contrib module pg_stat_statements. PostgreSQL’s pg_stat_statements provides the basic statistics, which is sometimes not enough. The major shortcoming in pg_stat_statements is that it accumulates all the queries and their statistics and does not provide aggregated statistics nor histogram information. In this case, a user needs to calculate the aggregate which is quite expensive.    
pg_stat_monitor is developed on the basis of pg_stat_statements as its more advanced replacement. It provides all the features of pg_stat_statements plus its own feature set.    
How pg_stat_monitor works?    
pg_stat_monitor accumulates the information in the form of buckets. All the aggregated information is bucket based. The size of a bucket and the number of buckets should be configured using GUC (Grand Unified Configuration). When a bucket time elapses, pg_stat_monitor resets all the statistics and switches to the next bucket. After the last bucket elapses, pg_stat_monitor goes back to the first bucket. All the data on the first bucket will vanish; therefore, users must read the buckets before that to not lose the data.    
补充: 如果pg_stat_monitor支持内存的使用统计, 对DBA的作用会更大. 整个实例的内存消耗(min, max, stddev, avg). 每条query的内存消耗(min, max, stddev, avg).  获得内存的方法很多, 参考:     
- [《Linux中进程内存RSS与cgroup内存的RSS统计 - 差异》](../201606/20160608_02.md)  
- [《PostgreSQL cheat functions - (内存上下文\planner内容\memory context等常用函数)》](../201809/20180908_01.md)    
- [《精确度量Linux下进程占用多少内存的方法》](../201606/20160608_01.md)    
- [《PostgreSQL 14 preview - 打印其他会话的memory context, 诊断内存消耗问题 - pg_log_backend_memory_contexts(pid)》](../202104/20210407_06.md)    
- PG 13 支持 pg_shmem_allocations 可以查询PG系统使用的共享内存情况. Add system view pg_shmem_allocations to display shared memory usage (Andres Freund, Robert Haas)    
https://github.com/percona/pg_stat_monitor/blob/master/docs/USER_GUIDE.md    
# User Guide    
This document describes the configuration, key features and usage of ``pg_stat_monitor`` extension and compares it with ``pg_stat_statements``.    
For how to install and set up ``pg_stat_monitor``, see [README](https://github.com/percona/pg_stat_monitor/blob/master/README.md).    
After you've installed and enabled ``pg_stat_monitor``, create the ``pg_stat_monitor`` extension using the ``CREATE EXTENSION`` command.    
```sql    
CREATE EXTENSION pg_stat_monitor;    
CREATE EXTENSION    
```    
### Configuration    
Here is the complete list of configuration parameters.    
```sql    
SELECT * FROM pg_stat_monitor_settings;    
                   name                   | value  | default_value |                                               description                                                | minimum |  maximum   | restart     
------------------------------------------+--------+---------------+----------------------------------------------------------------------------------------------------------+---------+------------+---------    
 pg_stat_monitor.pgsm_max                 |    100 |           100 | Sets the maximum size of shared memory in (MB) used for statement's metadata tracked by pg_stat_monitor. |       1 |      1000  |       1    
 pg_stat_monitor.pgsm_query_max_len       |   1024 |          1024 | Sets the maximum length of query.                                                                        |    1024 | 2147483647 |       1    
 pg_stat_monitor.pgsm_enable              |      1 |             1 | Enable/Disable statistics collector.                                                                     |       0 |      0     |       0    
 pg_stat_monitor.pgsm_track_utility       |      1 |             1 | Selects whether utility commands are tracked.                                                            |       0 |      0     |       0    
 pg_stat_monitor.pgsm_normalized_query    |      1 |             1 | Selects whether save query in normalized format.                                                         |       0 |      0     |       0    
 pg_stat_monitor.pgsm_max_buckets         |     10 |            10 | Sets the maximum number of buckets.                                                                      |       1 |      10    |       1    
 pg_stat_monitor.pgsm_bucket_time         |    300 |           300 | Sets the time in seconds per bucket.                                                                     |       1 | 2147483647 |       1    
 pg_stat_monitor.pgsm_histogram_min       |      0 |             0 | Sets the time in millisecond.                                                                            |       0 | 2147483647 |       1    
 pg_stat_monitor.pgsm_histogram_max       | 100000 |        100000 | Sets the time in millisecond.                                                                            |      10 | 2147483647 |       1    
 pg_stat_monitor.pgsm_histogram_buckets   |     10 |            10 | Sets the maximum number of histogram buckets                                                             |       2 | 2147483647 |       1    
 pg_stat_monitor.pgsm_query_shared_buffer |     20 |            20 | Sets the maximum size of shared memory in (MB) used for query tracked by pg_stat_monitor.                |       1 |      10000 |       1    
 pg_stat_monitor.pgsm_overflow_target     |      1 |             1 | Sets the overflow target for pg_stat_monitor                                                             |       0 |      1     |       1    
 pg_stat_monitor.pgsm_track_planning      |      0 |             1 | Selects whether planning statistics are tracked.                                                         |       0 |      0     |       0    
(13 rows)    
```    
Some configuration parameters require the server restart and should be set before the server startup. These must be set in the ``postgresql.conf`` file. Other parameters do not require server restart and can be set permanently either in the ``postgresql.conf`` or from the client (``psql``).    
The table below shows set up options for each configuration parameter and whether the server restart is required to apply the parameter's value:    
| Parameter Name                                |  postgresql.conf   | SET | ALTER SYSTEM SET  |  server restart   | configuration reload    
| ----------------------------------------------|--------------------|-----|-------------------|-------------------|---------------------    
| pg_stat_monitor.pgsm_max                      | :heavy_check_mark: | :x:                |:x:                |:heavy_check_mark: | :x:    
| pg_stat_monitor.pgsm_query_max_len            | :heavy_check_mark: | :x:                |:x:                |:heavy_check_mark: | :x:    
| pg_stat_monitor.pgsm_enable                   | :heavy_check_mark: | :x:                |:heavy_check_mark: |:x: | :x:    
| pg_stat_monitor.pgsm_track_utility            | :heavy_check_mark: | :heavy_check_mark: |:heavy_check_mark: |:x: | :heavy_check_mark:    
| pg_stat_monitor.pgsm_normalized_query         | :heavy_check_mark: | :heavy_check_mark: |:heavy_check_mark: |:x: | :heavy_check_mark:    
| pg_stat_monitor.pgsm_max_buckets              | :heavy_check_mark: | :x:                |:x:                |:heavy_check_mark: | :heavy_check_mark:    
| pg_stat_monitor.pgsm_bucket_time              | :heavy_check_mark: | :x:                |:x:                |:heavy_check_mark: | :x:    
| pg_stat_monitor.pgsm_object_cache             | :heavy_check_mark: | :x:                |:x:                |:heavy_check_mark: | :x:    
| pg_stat_monitor.pgsm_respose_time_lower_bound | :heavy_check_mark: | :x:                |:x:                |:heavy_check_mark: | :x:    
| pg_stat_monitor.pgsm_respose_time_step        | :heavy_check_mark: | :x:                |:x:                |:heavy_check_mark: | :x:    
| pg_stat_monitor.pgsm_query_shared_buffer      | :heavy_check_mark: | :x:                |:x:                |:heavy_check_mark: | :x:    
#### Parameters description:    
- **pg_stat_monitor.pgsm_max**: This parameter defines the limit of shared memory for ``pg_stat_monitor``. This memory is used by buckets in a circular manner. The memory is divided between the buckets equally, at the start of the PostgreSQL.     
- **pg_stat_monitor.pgsm_query_max_len**: Sets the maximum size of the query. This parameter can only be set at the start of PostgreSQL. For long queries, the query is truncated to that particular length. This is to avoid unnecessary usage of shared memory.    
- **pg_stat_monitor.pgsm_enable**: This parameter enables or disables the monitoring. "Disable" means that ``pg_stat_monitor`` will not collect the statistics for the whole cluster.    
- **pg_stat_monitor.pgsm_track_utility**: This parameter controls whether utility commands are tracked by the module. Utility commands are all those other than ``SELECT``, ``INSERT``, ``UPDATE``, and ``DELETE``.     
- **pg_stat_monitor.pgsm_normalized_query**: By default, the query shows the actual parameter instead of the placeholder. It is quite useful when users want to use that query and try to run that query to check the abnormalities. But in most cases users like the queries with a placeholder. This parameter is used to toggle between the two said options.    
- **pg_stat_monitor.pgsm_max_buckets**: ``pg_stat_monitor`` accumulates the information in the form of buckets. All the aggregated information is bucket based. This parameter is used to set the number of buckets the system can have. For example, if this parameter is set to 2, then the system will create two buckets. First, the system will add all the information into the first bucket. After its lifetime (defined in the  pg_stat_monitor.pgsm_bucket_time parameter) expires, it will switch to the second bucket,  reset all the counters and repeat the process.    
- **pg_stat_monitor.pgsm_bucket_time**: This parameter is used to set the lifetime of the bucket. System switches between buckets on the basis of ``pg_stat_monitor.pgsm_bucket_time``.     
- **pg_stat_monitor.pgsm_respose_time_lower_bound**: ``pg_stat_monitor`` also stores the execution time histogram. This parameter is used to set the lower bound of the histogram.    
- **pg_stat_monitor.pgsm_respose_time_step:** This parameter is used to set the steps for the histogram.     
### Usage    
pg_stat_monitor extension contains a view called pg_stat_monitor, which contains all the monitoring information. Find the list of columns in pg_stat_monitor view in the following table. The table also shows whether a particular column is available in pg_stat_statements.    
|      Column        |           Type           | pg_stat_monitor      | pg_stat_statements    
|--------------------|--------------------------|----------------------|------------------    
 bucket              | integer                  | :heavy_check_mark:  | :x:    
 bucket_start_time   | timestamp with time zone | :heavy_check_mark:  | :x:    
 userid              | oid                      | :heavy_check_mark:  | :heavy_check_mark:    
 dbid                | oid                      | :heavy_check_mark:  | :heavy_check_mark:    
 client_ip           | inet                     | :heavy_check_mark:  | :x:    
 queryid             | text                     | :heavy_check_mark:  | :heavy_check_mark:    
 planid              | text                     | :heavy_check_mark:  | :x:    
 query_plan          | text                     | :heavy_check_mark:  | :x:    
 top_query           | text                     | :heavy_check_mark:  | :x:    
 query               | text                     | :heavy_check_mark:  | :heavy_check_mark:    
 application_name    | text                     | :heavy_check_mark:  | :x:    
 relations           | text[]                   | :heavy_check_mark:  | :x:    
 cmd_type            | text[]                   | :heavy_check_mark:  | :x:    
 elevel              | integer                  | :heavy_check_mark:  | :x:    
 sqlcode             | integer                  | :heavy_check_mark:  | :x:    
 message             | text                     | :heavy_check_mark:  | :x:    
 plans               | bigint                   | :heavy_check_mark:  | :heavy_check_mark:    
 plan_total_time     | double precision         | :heavy_check_mark:  | :heavy_check_mark:    
 plan_min_timei      | double precision         | :heavy_check_mark:  | :heavy_check_mark:    
 plan_max_time       | double precision         | :heavy_check_mark:  | :heavy_check_mark:     
 plan_mean_time      | double precision         | :heavy_check_mark:  | :heavy_check_mark:    
 plan_stddev_time    | double precision         | :heavy_check_mark:  | :heavy_check_mark:     
 calls               | bigint                   | :heavy_check_mark:  | :heavy_check_mark:    
 total_time          | double precision         | :heavy_check_mark:  | :heavy_check_mark:    
 min_time            | double precision         | :heavy_check_mark:  | :heavy_check_mark:    
 max_time            | double precision         | :heavy_check_mark:  | :heavy_check_mark:    
 mean_time           | double precision         | :heavy_check_mark:  | :heavy_check_mark:    
 stddev_time         | double precision         | :heavy_check_mark:  | :heavy_check_mark:    
 rows_retrieved      | bigint                   | :heavy_check_mark:  | :heavy_check_mark:    
 shared_blks_hit     | bigint                   | :heavy_check_mark:  | :heavy_check_mark:    
 shared_blks_read    | bigint                   | :heavy_check_mark:  | :heavy_check_mark:    
 shared_blks_dirtied | bigint                   | :heavy_check_mark:  | :heavy_check_mark:    
 shared_blks_written | bigint                   | :heavy_check_mark:  | :heavy_check_mark:    
 local_blks_hit      | bigint                   | :heavy_check_mark:  | :heavy_check_mark:     
 local_blks_read     | bigint                   | :heavy_check_mark:  | :heavy_check_mark:     
 local_blks_dirtied  | bigint                   | :heavy_check_mark:  | :heavy_check_mark:    
 local_blks_written  | bigint                   | :heavy_check_mark:  | :heavy_check_mark:    
 temp_blks_read      | bigint                   | :heavy_check_mark:  | :heavy_check_mark:    
 temp_blks_written   | bigint                   | :heavy_check_mark:  | :heavy_check_mark:    
 blk_read_time       | double precision         | :heavy_check_mark:  | :heavy_check_mark:    
 blk_write_time      | double precision         | :heavy_check_mark:  | :heavy_check_mark:    
 resp_calls          | text[]                   | :heavy_check_mark:  | :x:    
 cpu_user_time       | double precision         | :heavy_check_mark:  | :x:    
 cpu_sys_time        | double precision         | :heavy_check_mark:  | :x:    
 wal_records         | bigint           		| :heavy_check_mark:  | :heavy_check_mark:    
 wal_fpi             | bigint           		| :heavy_check_mark:  | :heavy_check_mark:    
 wal_bytes           | numeric          		| :heavy_check_mark:  | :heavy_check_mark:    
 state_code          | bigint           		| :heavy_check_mark:  | :x:    
 state               | text                     | :heavy_check_mark:  | :x:    
The following are some key features of pg_stat_monitor and usage examples.    
#### Buckets    
**`bucket`**: Accumulates the statistics per bucket. All the information and aggregate reset for each bucket. The bucket will be a number showing the number of buckets for which this record belongs.    
**`bucket_start_time`**: shows the start time of the bucket.     
```sql    
postgres=# select bucket, bucket_start_time, query,calls from pg_stat_monitor order by bucket;    
bucket |  bucket_start_time  |                                                     query                                                     | calls     
--------+---------------------+---------------------------------------------------------------------------------------------------------------+-------    
      3 | 11-01-2021 17:30:45 | copy pgbench_accounts from stdin                                                                              |     1    
      3 | 11-01-2021 17:30:45 | alter table pgbench_accounts add primary key (aid)                                                            |     1    
      3 | 11-01-2021 17:30:45 | vacuum analyze pgbench_accounts                                                                               |     1    
      3 | 11-01-2021 17:30:45 | vacuum analyze pgbench_tellers                                                                                |     1    