    /*
     * gcc -Wall -pipe -O3 -s -o echohelper echohelper.c
     */
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    int main ( int argc, char * argv[] )
    {
        int             ret = EXIT_FAILURE;
        int             fd, i, n;
        unsigned char   buf[16];
        fd  = open( argv[1], O_RDONLY, 0 );
        if ( fd  0 )
            {
                printf( "echo -n -e \"" );
                for ( i = 0; i  some.ash
    $ busybox ash some.ash > some
    some.ash形如:
    echo -n -e "\x0\x1\x2\x3\x4\x5\x6\x7\x8\x9\xa\xb\xc\xd\xe\xf"
    echo -n -e "\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"
    echo -n -e "\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f"
    echo -n -e "\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f"
    echo -n -e "\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f"
    echo -n -e "\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f"
    echo -n -e "\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f"
    echo -n -e "\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f"
    echo -n -e "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f"
    echo -n -e "\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f"
    echo -n -e "\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf"
    echo -n -e "\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf"
    echo -n -e "\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf"
    echo -n -e "\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf"
    echo -n -e "\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef"
    echo -n -e "\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"
### 3) base64.ash
base64编码时不直接处理binary，处理“xxd -p”、“od -An -tx1 -v
–width=30″这类输入，允许出现空格，只支持小写[a-f]。如果busybox没有提供od，base64.ash无法进行base64编码。base64.ash不直接处理binary，主要因为busybox的ash不支持-d，无法有效读取\n。
base64.ash进行base64解码时仅依赖busybox的ash，但效率极其低下。
    #!/bin/ash
    #
    # Author : scz@nsfocus
    #        : 2018-10-08
    #        : 2018-10-16 16:12
    #
    base64encode ()
    {
        base64table="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
        hextable="0123456789abcdef"
        o=0
        bits=0
        n=0
        maxn=76
        count=0
        while LANG=C IFS= read -r -n 1 byte
        do
            if [ "$byte" ] ; then
                h=${hextable%${byte}*}
                h=${#h}
                if [[ $h != 16 ]] ; then
                    let count+=1
                    i=0
                    while [ $i -lt 4 ]
                    do
                        let o=o*2+h/8
                        let h=h*2%16
                        let bits+=1
                        if [[ $bits == 6 ]] ; then
                            printf ${base64table:$o:1}
                            let n+=1
                            if [ $n -ge $maxn ] ; then
                                printf "\n"
                                n=0
                            fi
                            o=0
                            bits=0
                        fi
                        let i+=1
                    done
                fi
            fi
        done
        if [[ $bits != 0 ]] ; then
            while [ $bits -lt 6 ]
            do
                let bits+=1
                let o*=2
            done
            printf ${base64table:$o:1}
            let n+=1
            if [ $n -ge $maxn ] ; then
                printf "\n"
                n=0
            fi
        fi
        let count=count/2%3
        if [[ $count != 0 ]] ; then
            i=0
            let t=3-count
            while [ $i -lt $t ]
            do
                printf "="
                let n+=1
                if [ $n -ge $maxn ] ; then
                    printf "\n"
                    n=0
                fi
                let i+=1
            done
        fi
        if [ $n -ne 0 ] ; then
            printf "\n"
        fi
    }
    base64decode ()
    {
        base64table="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
        o=0
        bits=0
        while LANG=C IFS= read -r -n 1 byte
        do
            if [ "$byte" ] ; then
                c=${base64table%${byte}*}
                c=${#c}
                if [[ $c != 64 ]] ; then
                    b=0
                    while [ $b -lt 6 ]
                    do
                        let o=o*2+c/32
                        let c=c*2%64
                        let bits+=1
                        if [[ $bits == 8 ]] ; then
                            escseq=$(printf "\x%02x" $o)
                            printf $escseq
                            o=0
                            bits=0
                        fi
                        let b+=1
                    done
                fi
            fi
        done
    }
    if [ "$1" != "-d" ] ; then
        base64encode
    else
        base64decode
    fi
    $ echo -n -e "scz@nsfocus" | xxd -p | busybox ash base64.ash
    $ busybox od -An -tx1 -v some | busybox ash base64.ash > some.txt
    $ busybox ash base64.ash -d some
## openssl
openssl可以进行base64编解码。一般不考虑目标环境存在openssl，列于此处只是出于完备性考虑。
    $ openssl enc -base64 -e -in some -out some.txt
    $ openssl enc -base64 -d -in some.txt -out some 
    $ base64 -d some.txt > some
## 小结
至此为止，前面介绍的都是bin与txt的相互转换，各种编码、解码。假设数据传输通道只有一个弱shell，有回显，可以通过copy/paste无损传输可打印字符。为了将不可打印字节传输过去，只能通过编解码进行数据映射。前文只演示了3种数据映射方案，有更多其他编解码方案，但没必要，这3种够用了。
弱环境使得无法用C代码完成编解码，只能用一些受限的现有工具完成，为此上场了各种奇技淫巧。
后面的内容是一些相关发散。
## perl
### 1) nc.pl
nc.pl实现nc部分功能。
    #!/usr/bin/perl
    use IO::Socket;
    $SIG{PIPE}  = 'IGNORE';
    $buflen     = 102400;
    die "Usage: $0  \n" unless ($host = shift) && ($port = shift);
    die "connect to $host:$port: $!\n" unless
        $sock   = new IO::Socket::INET
        (
            PeerAddr    => $host,
            PeerPort    => $port,
            proto       => 'tcp'
        );
    while ( ( $count = sysread( STDIN, $buffer, $buflen ) ) > 0 )
    {
        die "socket write error: $!\n" unless syswrite( $sock, $buffer, $count ) == $count;
    }
    die "socket read error: $!\n" if $count Zmodem Upload List->选择多个待上传文件->Start Upload
之后在/tmp/modem中将出现被上传文件。
整个过程会在Linux中隐式执行rz:
    $ rz
    rz waiting to receive.
    Starting zmodem transfer. Press Ctrl+C to cancel.
    Transferring ...
第二种操作方式，SecureCRT SSH登录Linux，在Linux中切换目录，在Windows中用鼠标拖放待上传文件到SecureCRT
SSH会话窗口，此时会弹出一个小窗口，在其中选择“Send Zmodem”。
第三种操作方式，SecureCRT
SSH登录Linux，在Linux中切换目录，在Linux中执行rz命令，在SecureCRT中弹出界面让你选择文件，确定后完成上传。
#### 1.2) YMODEM
相比ZMODEM，YMODEM、XMODEM没有优势，这里只是演示，并不推荐。
在Linux中执行:
    $ rb -b
在Windows中操作SecureCRT:
    Options->Session Options->Terminal->X/Y/Zmodem->X/Ymodem send packet size
    128 bytes // 缺省值
    1024 bytes (Xmodem-1k/Ymodem-1k) // 选这个
    Transfer->Send Ymodem->选择文件
或者用鼠标拖放文件到相应SecureCRT会话窗口。YMODEM比ZMODEM慢，在Debian中居然需要用Ctrl-C结束，不过不影响上传数据。
#### 1.3) XMODEM(不推荐)
在Linux中执行:
    $ rx -b some
rx一次只能接收一个文件。
在Windows中操作SecureCRT:
    Options->Session Options->Terminal->X/Y/Zmodem->X/Ymodem send packet size->1024 bytes (Xmodem-1k/Ymodem-1k)
    Transfer->Send Xmodem->选择文件
待上传文件在Windows中的名字不要求是some，但到了Linux中将被重命名为some。在Debian中同样可能需要用Ctrl-C结束，但不影响上传数据。
相比ZMODEM、YMODEM，XMODEM有个大问题，在man中写道:
> Up to 1023 garbage characters may be added to the received file.
尾部填充导致不宜用XMODEM上传binary，尽管可以用dd切掉尾部填充。ZMODEM、YMODEM无此问题。
#### 1.4) KERMIT
介绍ZMODEM的文章很多，介绍KERMIT的较少，看到过标题说是介绍KERMIT内容实际是ZMODEM的文章，真扯淡。
在Linux中安装ckermit包:
    $ aptitude install ckermit
在Linux中执行:
    $ kermit -i -r
在Windows中操作SecureCRT:
    Transfer->Send Kermit->选择文件(可以多选)
或者用鼠标拖放文件到相应SecureCRT会话窗口，在弹出窗口中选择”Send Kermit”。
### 2) 从Linux向Windows下载文件
#### 2.1) ZMODEM(推荐)
假设在Windows中用SecureCRT SSH登录Linux
在Windows中操作SecureCRT:
    Options->Session Options->Terminal->X/Y/Zmodem->Directories->Download->指定用于存放下载文件的目录
不必理会Upload的设置
在Linux中执行:
    $ sz -b zmodem.bin other.bin
    rz
    Starting zmodem transfer. Press Ctrl+C to cancel.
    Transferring zmodem.bin...
    ...
    Transferring other.bin...
    ...
在Windows中检查Download目录，已经出现被下载文件。
SecureCRT对sz的支持比较智能，没有想像中的:
    Transfer->Receive Zmodem
这带来一些兼容性问题。某远程主机是一台嵌入式ARM/Linux，上面有个3.48版sz，远程执行`“sz -b
”`后，SecureCRT这边没反应，但用YMODEM下载成功。后来把源自Debian 9的lrzsz
0.12.21-10交叉编译出静态链接版本弄到前述ARM/Linux上，用ZMODEM下载成功。
#### 2.2) YMODEM
在Linux中执行:
    $ sb -b -k ymodem.bin other.bin
在Windows中操作SecureCRT:
    Options->Session Options->Terminal->X/Y/Zmodem->Directories->Download->指定用于存放下载文件的目录
    Options->Session Options->Terminal->X/Y/Zmodem->X/Ymodem send packet size->1024 bytes (Xmodem-1k/Ymodem-1k)
    Transfer->Receive Ymodem
在Windows中检查Download目录，已经出现被下载文件。
#### 2.3) XMODEM(不推荐)
在Linux中执行:
    $ sx -b -k xmodem.bin
sx一次只能传送一个文件。
在Windows中操作SecureCRT:
    Options->Session Options->Terminal->X/Y/Zmodem->Directories->Download->指定用于存放下载文件的目录
    Options->Session Options->Terminal->X/Y/Zmodem->X/Ymodem send packet size->1024 bytes (Xmodem-1k/Ymodem-1k)
    Transfer->Receive Xmodem
与2.2小节不同，此处弹出文件对话框，让你选择输出目录，还可以指定输出文件名。
1.3小节提到的尾部填充(0x1a)并不是Linux版rx命令的独有表现，应该是XMODEM规范。
SecureCRT通过XMODEM接收文件时，同样会进行尾部填充。填充什么数据，填充多少字节，可以看rx源码，我已经打定主意不用XMODEM，不深究。
#### 2.4) KERMIT
在Linux中执行:
    $ kermit -I -P -i -s kermit.bin other.bin
指定-P，否则文件下载到Windows后文件名变成全大写。
在Windows中操作SecureCRT:
    Options->Session Options->Terminal->X/Y/Zmodem->Directories->Download->指定用于存放下载文件的目录
    Transfer->Receive Kermit
在Windows中检查Download目录，已经出现被下载文件。SecureCRT没有单独为KERMIT配置下载目录的地方，KERMIT与ZMODEM共用同一个下载目录。
## zssh
若A、B都是Linux，也可以用rz/sz上传下载，此时需要zssh。zssh是”Zmodem SSH”的缩写，Debian有这个包，直接装就是。
    $ apt-cache search zssh
    $ dpkg -L zssh | grep "/bin/"
    /usr/bin/zssh
    /usr/bin/ztelnet
man手册里有:
> zssh is an interactive wrapper for ssh used to switch the ssh connection
> between the remote shell and file transfers. This is achieved by using
> another tty/pty pair between the user and the local ssh process to plug
> either the user’s tty (remote shell mode) or another process (file transfer
> mode) on the ssh connection.
>
> ztelnet behaves similarly to zssh, except telnet is used instead of ssh.It
> is equivalent to ‘zssh -s “telnet -8 -E”‘
`$ zssh @`
登录后，在远程shell里执行:
    $ sz zmodem.bin other.bin
    **B00000000000000
按下zssh的”escape squence”，缺省是Ctrl-@(或Ctrl-2)。这将进入另一个提示符，在其中输入rz
    zssh > rz
即可完成下载。此处有坑，假设是在C中用SecureCRT远程登录A，该会话启用ZMODEM，前述操作原始意图是从B向A提供文件，实际效果是从B向C提供文件；这种场景下，为了达成原始意图，必须先禁用C与A之间的ZMODEM。
上传更简单，在”zssh >”提示符下执行sz:
    zssh > sz zmodem.bin other.bin
上传时跟SecureCRT一样”智能”，不需要在远程shell里显式执行rz来配合。
* * *