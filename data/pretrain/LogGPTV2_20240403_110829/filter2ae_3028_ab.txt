    ......
        fp = fopen( "/tmp/ftpupdate1.sh", "wb" );
        memset( cmd, 0x00, 128 );
        sprintf( cmd, "/system/system/bin/ftp -n<<!\n" );
        fwrite( cmd, 1, strlen( cmd ), fp );
        memset( cmd, 0x00, 128 );
        sprintf( cmd, "open %s %d\n", bparam.stFtpParam.szFtpSvr, bparam.stFtpParam.nFtpPort );
        fwrite( cmd, 1, strlen( cmd ), fp );
        memset( cmd, 0x00, 128 );
        sprintf( cmd, "user %s %s\n", bparam.stFtpParam.szFtpUser, bparam.stFtpParam.szFtpPwd );
        fwrite( cmd, 1, strlen( cmd ), fp );
        memset( cmd, 0x00, 128 );
        sprintf( cmd, "binary\n" );
        fwrite( cmd, 1, strlen( cmd ), fp );
        if ( bparam.stFtpParam.byMode == 1 )    //passive
        {
            memset( cmd, 0x00, 128 );
            sprintf( cmd, "pass\n" );
            fwrite( cmd, 1, strlen( cmd ), fp );
        }
    #ifdef CUSTOM_DIR
        char sub_temp[ 128 ];
        memset(sub_temp, 0, 128);
        //strcpy(sub_temp, bparam.stFtpParam.szFtpDir);
        sprintf(sub_temp, "%s/%s", bparam.stFtpParam.szFtpDir,bparam.stIEBaseParam.dwDeviceID); 
        flag = sub_dir(fp,sub_temp);
        if(flag){
            memset( cmd, 0x00, 128 );
            sprintf( cmd, "cd %s\n", bparam.stFtpParam.szFtpDir );
            fwrite( cmd, 1, strlen( cmd ), fp );
        }
    #else
        memset( cmd, 0x00, 128 );
        sprintf( cmd, "cd %s\n", bparam.stFtpParam.szFtpDir );
        fwrite( cmd, 1, strlen( cmd ), fp );
    #endif
        memset( cmd, 0x00, 128 );
        sprintf( cmd, "lcd /tmp\n" );
        fwrite( cmd, 1, strlen( cmd ), fp );
        if ( test == 0x01 )
        {
            FtpFileTest();
            memset( cmd, 0x00, 128 );
            sprintf( cmd, "put ftptest.txt\n" );
            fwrite( cmd, 1, strlen( cmd ), fp );
        }
        else
        {
            char    filename1[128];
            memset( filename1, 0x00, 128 );
            memcpy( filename1, filename + 5, strlen( filename ) - 5 );
            memset( cmd, 0x00, 128 );
            sprintf( cmd, "put %s\n", filename1 );
            fwrite( cmd, 1, strlen( cmd ), fp );
        }
        memset( cmd, 0x00, 128 );
        sprintf( cmd, "close\n" );
        fwrite( cmd, 1, strlen( cmd ), fp );
        memset( cmd, 0x00, 128 );
        sprintf( cmd, "bye\n" );
        fwrite( cmd, 1, strlen( cmd ), fp );
        memset( cmd, 0x00, 128 );
        sprintf( cmd, "!\n" );
        fwrite( cmd, 1, strlen( cmd ), fp );
        fclose( fp );
        iRet = access( "/tmp/ftpupdate1.sh", X_OK );
        if ( iRet )
        {
            DoSystem( "chmod a+x /tmp/ftpupdate1.sh" );
        }
        return 0;
    }
至此，逻辑很清晰了。在`FtpConfig()`函数中，将我们之前在设置的时候输入的各个值写入了`/tmp/ftpupdate1.sh`中，然后在`DoFtpTest()`中运行该脚本，导致最后的命令执行。这一点，同样可以在漏洞作者原文中得到证明:
    作者原文中展示的/tmp/ftpupload.sh:
    / # cat /tmp/ftpupload.sh 
    /bin/ftp -n<<!
    open 192.168.1.1 21
    user ftp $(telnetd -l /bin/sh -p 25)ftp
    binary
    lcd /tmp
    put ftptest.txt
    close
    bye
    !
    / #
实际测试中，我们发现:如果直接用作者给出的exp去尝试RCE往往是不能成功的。从`http://ip:port/get_params.cgi?user=username&pwd=password`可以发现，我们注入的命令在空格处被截断了。
于是我们用${IFS}替换空格（还可以采用`+`代替空格）:
但是由于有长度限制再次被截断，调整长度，最终成功执行命令:
 **成功抓住新代码的影子**
### 3.GoAhead绕过验证文件下载漏洞
2017年3月9日，Pierre Kim在文章中增加了两个链接，描述了一个GoAhead
2.1.8版本之前的[任意文件下载漏洞](https://s3-us-west-1.amazonaws.com/cybereasonbucket/wp-content/uploads/2017/03/08194911/PeekabooIOwnYou.pdf)。攻击者通过使用该漏洞，再结合一个新的远程命令执行漏洞可以再次获取摄像头的最高权限。有意思的是，这个漏洞早在2004年就已被提出并成功修复[（http://aluigi.altervista.org/adv/goahead-adv2.txt）](http://aluigi.altervista.org/adv/goahead-adv2.txt)。但是由于众多摄像头仍然使用存在该漏洞的老代码，该漏洞仍然可以在众多摄像头设备复现。
我们也查找了此门铃项目中的GoAhead服务器版本。web/release.txt前三行内容如下：
    =====================================
    GoAhead WebServer 2.1.8 Release Notes
    =====================================
再仔细查看`websUrlHandlerRequest()`内容，发现并未对该漏洞进行修复，说明该漏洞也影响这个门铃项目。以此类推，本次受影响的摄像头应该也存在这个漏洞，果不其然：
那么，具体的漏洞成因又是如何呢?让我们来跟进`./web/LINUX/main.c`了解该漏洞的成因: `initWebs()`函数中，关键代码如下:
    154:   umOpen();
    157:   umAddGroup( T( "adm" ), 0x07, AM_DIGEST, FALSE, FALSE );
    159:   umAddUser( admu, admp, T( "adm" ), FALSE, FALSE );
    160:   umAddUser( "admin0", "admin0", T( "adm" ), FALSE, FALSE );
    161:   umAddUser( "admin1", "admin1", T( "adm" ), FALSE, FALSE );
    162:   umAddAccessLimit( T( "/" ), AM_DIGEST, FALSE, T( "adm" ) );
    224:   websUrlHandlerDefine( T( "" ), NULL, 0, websSecurityHandler, WEBS_HANDLER_FIRST );
    227:   websUrlHandlerDefine( T( "" ), NULL, 0, websDefaultHandler,WEBS_HANDLER_LAST );
其中，`150-160`中`um`开头的函数为用户权限控制的相关函数。主要做了以下四件事情: 1\. `umOpen()` 打开用户权限控制 2\.
`umAddGroup()` 增加用户组`adm`，并设置该用户组用户使用HTTP摘要认证方式登录 3\. `umAddUser()`
增加用户`admin`,`admin0`,`admin1`,并且这三个用户均属于`adm`用户组 4\. `umAddAccessLimit()`
增加限制路径`/`,凡是以`/`开头的路径都要通过`HTTP摘要认证`的方式登录属于`adm`组的用户。
紧接着，在`220`多行通过`websUrlHandlerDefine()`函数运行了两个`Handler`，`websSecurityHandler`和`websDefaultHandler`。在`websSecurityHandler`中，对`HTTP摘要认证方式`进行处理。关键代码如下：
    86:           accessLimit = umGetAccessLimit( path );
    115:         am = umGetAccessMethodForURL( accessLimit );
    116:         nRet = 0;
    118-242:  if ( ( flags & WEBS_LOCAL_REQUEST ) && ( debugSecurity == 0 ) ){……}
    245:         return nRet;
第86行，`umGetAccessLimit()`函数用于将我们请求的路径规范化，主要逻辑就是去除路径最后的`/`或者`\\`，确保我们请求的是一个文件。`umGetAccessMethodForURL()`函数用于获取我们请求的路径对应的权限。这里，我们请求的路径是`system.ini`，根据上文，我们的设置是对`/`路径需要进行`HTTP摘要认证`，由于程序判断`system.ini`不属于`/`路径，所以这里`am`为默认的`AM_INVALID`,即无需验证。
紧接着向下，`nRet`初始化赋值为0.在`118-242`行中，如果出现了账号密码错误等情况，则会将`nRet`赋值为`1`，表示验证不通过。但是由于我们请求的路径无需验证，所以判断结束时`nRet`仍为`0`。因此，顺利通过验证，获取到对应的文件内容。
**就这样，我们再次抓住了这个”新代码”的影子，虽然这个2004年的漏洞让我们不得不为新代码这三个字加上了双引号。**
### 4.远程命令执行漏洞二（需登录）
在Pierre Kim新增的两个链接中，还介绍了一种新的远程命令执行的方式。即通过`set_mail.cgi`和`mailtest.cgi`来执行命令。
与上一个远程命令执行漏洞一样，我们先在`func/ieparam.c`文件中找到`set_mail.cgi`和`mailtest.cgi`的调用过程
    257:    pdst = strstr( pcmd, "set_mail.cgi" );
    258:
    259:    if ( pdst != NULL )
    260:    {
    261:        return CGI_IESET_MAIL;
    262:    }
    348:    pdst = strstr( pcmd, "mailtest.cgi" );
    349:
    350:    if ( pdst != NULL )
    351:    {
    352:        return CGI_IESET_MAILTEST;
    353:}
    7674:   case CGI_IESET_MAILTEST:
    7675:       if ( len == 0x00 )
    7676:       {
    7677:           iRet = cgisetmailtest( pbuf, pparam, byPri );
    7678:       }
    7679:
    7680:       break;
    7746:   case CGI_IESET_MAIL:
    7747:       if ( len == 0x00 )
    7748:       {
    7749:           iRet = cgisetmail( pbuf, pparam, byPri );
    7750:           IETextout( "-------------OK--------" );
    7751:           NoteSaveSem();
    7752:       }
    7753:
    7754:       break;
跟上一个远程命令执行漏洞类似，`cgisetmail()`函数用于将各参数储存到结构体，例如`sender`参数赋值给`bparam.stMailParam.szSender`、`receiver1`参数赋值给`bparam.stMailParam.szReceiver1`。
接着，来到了`cgisetmailtest()`函数:
    int cgisetmailtest( unsigned char* pbuf, char* pparam, unsigned char byPri )
    {
        unsigned char   temp[2048];
        int             len = 0;
        int             result = 0;
        char            nexturl[64];
        int     iRet = 0;
        memset( temp, 0x00, 2048 );
        //iRet = DoMailTest();
        if(iRet == 0)
        {
            IETextout("Mail send over, OK or Not");
        }
        /* END:   Added by Baggio.wu, 2013/10/25 */
        memset( nexturl, 0x00, 64 );
        iRet = GetStrParamValue( pparam, "next_url", nexturl, 63 );
        if ( iRet == 0x00 )
        {
    #if 1
            len += RefreshUrl( temp + len, nexturl );
    #endif
            memcpy( pbuf, temp, len );
        }
        else
        {
            len += sprintf( temp + len, "var result=\"ok\";\r\n" );
            memcpy( pbuf, temp, len );
        }
        printf( "sendmail len:%d\n", len );
        return len;
    }
该函数第十行已被注释掉。这是使用此函数发送邮件证据的唯一可寻之处。虽然被注释掉了，我们也要继续跟踪`DoMailTest()`这个函数：
    int DoMailTest( void )  //email test
    {
        int     iRet = -1;
        char    cmd[256];
        if ( bparam.stMailParam.szSender[0] == 0 )
        {
            return -1;
        }
        if ( bparam.stMailParam.szReceiver1[0] != 0x00 )
        {
            iRet = EmailConfig();
            if ( iRet )
            {
                return -1;
            }
            memset( cmd, 0x00, 256 );
            /* BEGIN: Modified by Baggio.wu, 2013/9/9 */
            sprintf( cmd, "echo \"mail test ok\" | /system/system/bin/mailx -r %s -s \"mail test\"  %s",
                     bparam.stMailParam.szSender, bparam.stMailParam.szReceiver1 );
            //sprintf( cmd, "echo \"mail test ok\" | /system/system/bin/mailx -v -s \"mail test\"  %s",
            //         bparam.stMailParam.szReceiver1 );
            printf( "start cmd:%s\n", cmd );
            EmailWrite( cmd, strlen( cmd ) );
            //emailtest();
            printf( "cmd:%s\n", cmd );
        }
        return iRet;
    }
可以看到`sprintf( cmd, "echo \"mail test ok\" | /system/system/bin/mailx -r %s -s
\"mail test\" %s",bparam.stMailParam.szSender, bparam.stMailParam.szReceiver1
);`发件人和收件人都直接被拼接成命令导致最后的命令执行。
## 三.漏洞影响范围
`ZoomEye网络空间探测引擎`探测结果显示，全球范围内共查询到`78`万条历史记录。我们根据这`78`万条结果再次进行探测，发现这些设备一共存在三种情况：
  * 第一种是设备不存在漏洞。
  * 第二种是设备存在验证绕过漏洞，但是由于`web`目录下没有`system.ini`，导致最终无法被利用。  可以看到，当我们直接请求`system.ini`的时候，显示需要认证，但是当我们绕过验证之后，却显示`404 not found`。
  * 最后一种是设备既存在验证绕过漏洞，又存在`system.ini`文件。这些设备就存在被入侵的风险。
我们统计了最后一种设备的数量，数据显示有近`7万`的设备存在被入侵的风险。这7万设备的国家分布图如下:
可以看出，美国、中国、韩国、法国、日本属于重灾区。我国一共有 7000 多台设备可能被入侵，其中近 6000
台位于香港。我们根据具体数据做成两张柱状图以便查看：
（注：None为属于中国，但未解析出具体地址的IP）
**我们通过查询`ZoomEye网络空间探测引擎`历史记录，导出2016年1月1日，2017年1月1日和本报告编写时2017年3月14日三个时间点的数据进行分析。**
在这三个时间点，我们分别收录了`banner`中含有`GoAhead
5ccc069c403ebaf9f0171e9517f40e41`的设备26万台、65万台和78万台。
但是这些ip中，存在漏洞的设备增长趋势却完全不同。
可以看到，2016年1月1日已探明的设备中目前仅有2000多台存在漏洞，2017年1月1日之前探明的设备中有近3万台存在漏洞，仅仅两个多月后的今天，已有近7万台设备存在漏洞。
根据以上数据，我们可以做出如下判断：该漏洞出现时间大约是去年，直到今年被曝光之后才被大家所关注。在此期间，旧摄像头通过更新有漏洞固件的方式导致了该漏洞的出现，而那些新生产的摄像头则被销售到世界各地。根据今年新增的ip的地理位置，我们可以大致判断出这些存在漏洞的摄像头今年被销往何地。
根据数据，我们可以看到，主要销售到了美国、中国、韩国、日本。中国新增了5316台存在漏洞的摄像头，其中4000多台位于香港。
## 四.修复方案
1.将存在漏洞的摄像头设备放置于内网。 2.及时升级到最新固件。 3.对于可能被感染的设备，可以采取重启的方式来杀死驻留在内存里的恶意进程。
## 五.参考链接
  1. https://www.seebug.org/vuldb/ssvid-92789
  2. https://www.seebug.org/vuldb/ssvid-92748
  3. https://pierrekim.github.io/blog/2017-03-08-camera-goahead-0day.html
  4. https://github.com/kuangxingyiqing/bell-jpg
  5. http://aluigi.altervista.org/adv/goahead-adv2.txt
## 附表1:Pierre Kim给出的受影响设备列表:
列表如下：  
---  
3G+IPCam Other  
3SVISION Other  
3com CASA  
3com Other  
3xLogic Other  