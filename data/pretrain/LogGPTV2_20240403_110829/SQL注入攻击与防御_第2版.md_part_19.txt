其进行配置以便将EGPCS(Environment、GET、POST、cookie、Server)注册成全局变量。例如，
不需要任何代码即可将Sfoo声明成全局变量（该设置存在严重的安全问题，正因为如此，它已
经被弃用且始终应处于Off状态）。如果启用了register_globals，就可以通过INPUT元素来获取
用户的输入，并可以通过HTML表单中的name属性来引用它们。例如：
Svariable = Sfoo;
Java中的操作与此类似。可以使用请求对象获取在HTTP请求过程中客户端发送给Web
服务器的值。请求对象从客户端的Web浏览器获取值，然后通过HTTP请求传递给服务器。请
76
---
## Page 91
第3章复查代码中的SQL注入
求对象的类名或接口的名称是HupServletRequest，使用时可以写成javax.servlet.HtpServletRequest。
请求对象包含很多方法，我们关注下列处理用户输入的函数：
·getParamcterO：返回所请求的给定参数的值。
·getParameterValuesO：以一个数组的方式返回给定参数请求的所有值。
·getQueryStringO：返回请求的查询字符串。
·getHeaderO：返回所请求的头的值。
·getHeadersO：以一个字符串对象的枚举返回请求头。
·getRequestedSessionldO：返回客户端指定的 Session ID。
·getCookiesO：返回一个cookie对象的数组。
●cookie.getValueO：返回所请求的给定cookie 的值。
下列代码行说明了如何在Java应用中使用这些函数：
//getParameter（）——返同所请求的给定参数的值
//getParameterValues（）—以一个数组的方式返回给定参数请求的所有值
String string_variable = request.getParameter ("name"):
String[] string_array = request.getParameterValues ("name");
//getQueryString（)—返回请求的查询字符串
String string_variable = request.getQueryString ();
//getHeaders（)—返回所请求的头的值
sting string_variable = request.getHeader ("User-Agent") ;
//getHeaders（)—以一个字符串对象的枚举返回请求头
Enumeration enumeration_object - request.getHeaders (*User-Agent*) 
//getRequestedSessionId()——返国客户端指定的 Session ID
String string_variable = request.getRequestedSessionId() ;
//getCookies（)—返回l一个 cookie 对象的数组
Cookie [] Cookie_array = request.getCookies ():
//cookie.getValue（）—返回所请求的给定cookie 的值
String string_variale = Cookie_array-getValue ("name*) ;
在 C#应用中，开发人员使用的是 System.Web 名称空间中的 HtpRequest 类。HttpRequest
类包含了必要的属性和方法，用于处理HTTP请求和浏览器传递的所有信息（包括所有表单变
量、证书和头信息）。它还包含CGI（公共网关接口）服务器变量。下面是该类的属性列表：
·HttpCookieCollction：客户端在当前请求中传递的所有cookie的集合。
·Form：表单提交过程中从客户端传递的所有表单值的集合。
·Headers：客户端在请求中传递的所有头的集合。
·Params：所有查询字符串、表单、cookie和服务器变量的组合集。
·
QueryString：当前请求中所有查询字符串项的集合。
·ServerVariables：当前请求的所有Web服务器变量的集合。
·URL：返回一个URI类型的对象。
·UserAgent：包含发出请求的浏览器的用户代理头。
·UserHostAddress：包含客户端的远程IP地址。
·UserHostName：包含客户端的远程主机名。
下列代码行说明了如何在C#应用中使用这些函数：
---
## Page 92
SQL注入攻击与防御（第2版）
//HttpCookieCollection—所有cookie的集合
HttpCookieCollection variable = Request,Cookies;
//Form—所有表单值的集合
//Headers—所有头的集合
string variable = Request.Headers["name"] ;
//Params-所有查询字符串、表单、cookie和服务器变量的组合集
//QueryString—所有查询字符串项的集合
[aweu]butaasaon sanboy = atqetrea buxs
//ServerVariable所有Web服务器变量的集合
//Ur1—返回一个URI类型的对象，其Query属性包含了URI中的信息，比如?foo=bar
Uri object_variable = Request.Ur1;
string variable = object_variable.Query;
//UserAgent——包含浏览器的用户代理头
string variable = Request.UserAgent;
//UserHostAddress—包含客户端的远程IP地址
string variable = Request.UserHostAddress;
//UserHostName—包含客户端的远程主机名
string variable = Request.UserHostName
3.2.2危险的函数
上一节介绍了用户控制的输入进入到应用的过程以及处理这些数据时可以使用的各种方
法。我们还学习了一些简单的危险编码行为，这些行为最终会产生易受攻击的应用程序。上一
节给出的源代码示例可以帮助我们充分理解开发人员产生易受SQL注入攻击的代码的过程。但
这些例子范围不够广，每种编程语言均提供了大量不同的方法来构造并执行SQL语句，我们需
要熟悉这些方法。本节会详细列出这些方法，并给出如何使用它们的示例。我们将从PHP即
本语言开始。
PHP支持多种数据库厂商，请访间 http:/www.php.net/manual/en/refs.database.vendors.php 以
获取完整的厂商列表。为清晰起见，我们将重点关注几种常见的数据库厂商，下面详细列出了
与MySQL、Microsof SQL Server、PostgreSQL和Oracle 数据库相关的函数：
·mssql_queryO：向当前使用的数据库发送一个查询。
·mysql_queryO：向当前使用的数据库发送一个查询。
·mysql_db_queryO：选择一个数据库，在该数据库上执行一个查询(PHP4.0.6已弃用）。
·oci_parseO：在语句执行之前对其进行解析(在oci_executeO/ociexecute(之前)。
·ora_parse：语句在执行之前进行解析(在ora_exccO之前)。
·mssql_bindO：向存储过程添加一个参数（在mssql_cxecute0之前）。
·mssql_exccuteO：执行一个存储过程。
·odbc_prepareO：准备一条执行语句（在odbc_execute0之前)。
·odbc_cxecuteO：执行一条SQL语句。
·odbc_cxecO：准备并执行一条SQL语句。
78
---
## Page 93
第3章复查代码中的SQL注入
·Pg_query(）：执行一个查询（曾称为pg_excc)。
P_exec（）：出于兼容性原因依然可用，但建议用户使用新的函数名。
Pg_send_query（）：发送一个异步查询。
Pg_send_query_params）：向服务器提交一个命令并分离参数，无须等待结果，
Pg_query_params(）：向服务器提交一个命令并等待结果。
·Pg_send_prepare(）：发送一个请求以创建一个具有指定参数的预备语句，无须等待完成。
·
Pg_prepare(）：发送一个请求以创建一条具有指定参数的预备语句并等待完成。
·Pg_select(）：根据指定的 assoc_array选择记录。
·Pg_update(）：用数据更新与指定条件匹配的记录。
Pg_insert(）：将assoc_array的值插入到指定的表中。
·Pg_delete(）：根据assoc_array 中指定的键和值删除表中的记录。
下列代码行说明了如何在PHP应用中使用这些函数：
//mssql_query（)—向当前使用的数据库发送一个查询
(tbes)xonbbssu -atnsoxs
//mysq1_query（)—向当前使用的数据库发送—个查询
$result = mysql_query($sql):
//mysql_db_query（)——选择—个数据库，在该数据库上执行一个查询
$resu1t = mysq1_db_query ($db, $sq1) ;
//oci_parse（）—在语句执行之前对其进行解析
$stmt = oci_parse(Sconnection, $sql);
ociexecute ($stmt) ;
//ora_parse（）—在语句执行之前对其进行解析
if (!ora_parse ($cursor, Ssql)) (exit;)
else ( ora_exec (Scursor))
//mssql_bind（）—向存健过程添加—个参数
mssql_bind (&stmt, *@param′, $variable, SQLVARCHAR, false, false, 100) ;
$result = mssql_execute (Sstmt);
//odbc_prepare（)—准备—条执行语句
$stmt = odbc_prepare ($db, $sql):
$result = odbc_execute ($stmt)
//odbc_exec（）—准备并执行一条 SQL语句
$result - odbc_exec ($db, $sql);
//pg_query—执行—个查询（曾称为 pg_exec)
$result = pg_query($conn, $sql);
//p9_exec一出于兼容性原因依然可用，但建议用户使用新的函数名
$result - pg_exec ($conn, $sql);
//pg_send_query—发送—个异步查询
pg_send_query($conn, $sql);
//pg_send_query_params—向服务器提交一个命令并分离参数，无须等待结果
pg_send_query_params ($conn, $sql, $params)
//pg_query_params—向服务器提交一个命令并等待结果
Pg_query_params ($conn, Ssq1, Sparams)
//pg_send_prepare—发送一个请求以创建一条具有指定参数的预备语句，无须等待完成
79
---
## Page 94
SQL注入攻击与防御（第2版）
Pg_send_execute (Sconn, “my_query*, Svar) ;
//pg_prepare—发送一个请求以创建一条具有指定参数的预备语句并等待完成
P9_Prepare ($conn, *=y_query", 'SELECT * FROM table WHERE field - $1*);
Pg_execute($conn, “my_query”, $var) ;
//pg_select—根据指定的具有field=>value 的 assoc_array选择记录
Sresult = pg_select($conn, Stable_name, Sassoc_array)
//pg_update(）—用数据更新与指定条件匹配的记录
pg_update (Sconn, $arr_update, $arr_where) ;
//pg_insert()—将 assoc_array 的值插入到 table_name 指定的表中
pg_insert (Sconn, $table_name, $assoc_array)
//pg_delete（)—根据assoc_array 中指定的键和值删除表中的记录
pg_delete ($conn, $table_name, $assoc_array)
Java中的情况稍有不同。Java 提供了java.sql包，为数据库连接提供了JDBC(Java数据库
连接）API(应用编程接口)。要获取Java支持的厂商明细，请访间http:/java.sun.com/products/
jdbc/driverdesc.html。为清晰起见，我们将重点关注儿种常见的数据库厂商。下面详细列出了与
MySQL、Microsoft SQL Server、PostgreSQL和 Oracle数据库相关的函数：
·createStatementO：创建一个语句对象以便向数据库发送SQL语句。
·prepareStatementO：创建一条预编译的SQL语句并将其保存到对象中。
executeQueryO：执行给定的SQL语句。
·cxccuteUpdateO：执行给定的SQL语句。
·executeO：执行给定的SQL语句。
addBatchO：将给定的 SQL命令添加到当前命令列表中。
·cxccuteBatchO：向数据库提交一批要执行的命令。
下列代码行说明了如何在Java应用程序中使用这些函数：
//createStatement（）—创建一个语句对象以便向数据库发送SQL语句
statement = connection,createStatement () ;
//prepareStatement（)—创建一条预编译的 sQL语句并将其保存到对象中
PreparedStatement sql - con.prepareStatement (sql) ;
//executeQuery（)—执行给定的 SQL语句，从指定的表中获取数据
result = statement,executeQuery(sql);
//executeUpdate（）—执行一条SQL语句，该语句可能是一条条返回任何值的INSERT、UPDATE或
//DELETE 语句
//execute（)—执行给定的 SQL语句，从指定的表中获取数据
result = statement.executeUpdate (sql) :
result = statement.execute (sql) ;
//addBatch（）—将指定的 SQL命令添加到当前命令列表中
statement,addBatch (sq1) :
statement .addBatch (more_aq1) ;
正如读者预料的那样，Microsoft和C#开发人员编写的代码略有不同。.NET应用程序开发
人员使用下列名称空间：
●System.Data.SqlClient: SQL Server 的.NET Framework Data Provider(NET 相架数据提
供程序)。
● System.Data.OleDb: OLE DB .NET Framework Data Provider。
80
---
## Page 95
第3章复查代码中的SQL注入
●System.Data.OracleClient: Oracle 的9.NET Framework Data Provider,
System.Data.Odbc: ODBC 的.NET Framework Data Provider。
下面列出了这些名称空间中常用的类：
·SqlCommandO：用于构造/发送SQL语句或存储过程。
SqlParameterO：用于向SqlCommand对象漆加参数。
·
OleDbCommandO：用于构造/发送SQL语句或存储过程。
OleDbParameterO：用于向OleDbCommand对象添加参数。
·OracleCommandO：用于构造/发送SQL语句或存储过程。
·OracleParameterO：用于向OracleCommand对象添加参数。
OdbcCommandO：用于构造/发送SQL语句或存储过程。
●OdbcParameterO：用于向OdbcCommand对象添加参数。
下列代码行说明了如何在C#应用中使用这些类：
//SqlCommand（）—用于构造或发送SQL语句或存健过程
Sq1Command command = new Sq1Command(sql, connection) :
/ /SqlParameter()—用于向 Sq1Command 对象添加参数
SqlCommand command = new SqlCommand(sql, connection) :
command.Parameters,Add ("@param*, SqlDbType,VarChar, 50) .Value - input;
OleDbCommand command - new O1eDbCommand (sql, connection) ;
//OleDbParameter()—用于间 OleDbCommand 对象添加参数
O1eDvCommand command = new 0leDbCommand ($sql, connection) :