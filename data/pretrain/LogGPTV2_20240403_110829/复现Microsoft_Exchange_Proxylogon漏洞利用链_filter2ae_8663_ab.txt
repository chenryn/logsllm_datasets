### 通过[CVE-2021-26857进行热身](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-26857)
“ [CVE-2021-26857](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-26857)是统一消息服务中的不安全的反序列化漏洞。不安全的反序列化是不可信的用户可控制数据被程序反序列化的地方。利用此漏洞，HAFNIUM可以在Exchange服务器上以SYSTEM身份运行代码。”
–[通过Microsoft有关HAFNIUM漏洞的公告](https://www.microsoft.com/security/blog/2021/03/02/hafnium-targeting-exchange-servers/)
尽管最终不需要在Exchange服务器上执行远程代码，但它提供了一个简单的示例，说明了修补程序的差异是如何揭示了漏洞的细节。上面的公告还明确地将[统一消息服务](https://docs.microsoft.com/en-us/exchange/unified-messaging-exchange-2013-help)确定为潜在目标，这极大地帮助我们去缩小初始的搜索范围。
Exchange二进制软件包的命名非常明确-代理功能位于Microsoft.Exchange.HttpProxy。
_中，日志上传位于Microsoft.Exchange.LogUploader中，而统一消息代码位于Microsoft.Exchange.UM。_
中。当比较文件时，我们在文件名中并不总是有明确的指示符，但是在我们的调查中没有理由不使用它。
_JustAssembly标出的这些dll的差异非常清楚地说明了根本原因_
* * *
此处的差异类表名`Base64Deserialize`功能已经被删除，并且`contactInfoDeserializationAllowList`属性被添加了。[.NET从历史上就一直在解决反序列化问题](https://www.blackhat.com/docs/us-17/thursday/us-17-Munoz-Friday-The-13th-JSON-Attacks-wp.pdf)，因此，看到此类变化强烈建议删除易受攻击的代码，并增加针对.NET反序列化利用的保护。检查Base64Deserialize确认了这一点：
_删除的函数将base64字符串的输出传递给BinaryFormatter的反序列化_
* * *
在补丁之前，`Microsoft.Exchange.UM.UMCore.PipelineContext.FromHeaderFile`我们通过检查diff观察到了这个不安全的方法：
此功能的更新版本包含更多可在反序列化之前正确验证类型的代码。
本质上，此修补程序删除了可以使用[ysoserial.net之类的](https://github.com/pwntester/ysoserial.net)工具进行利用的易受[.NET反序列化攻击的功能](https://media.blackhat.com/bh-us-12/Briefings/Forshaw/BH_US_12_Forshaw_Are_You_My_Type_WP.pdf)。尽管这里的攻击路径非常简单，但是服务器上并非始终启用统一消息，因此，我们的概念验证利用依赖于CVE-2021-27065，如下所述。
### 服务器端请求伪造（[CVE-2021-26855](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-26855)）
由于所有远程执行代码漏洞都需要绕过身份验证，我们把我们的注意力集中到服务器端请求伪造（SSRF）。Microsoft发布了以下Powershell命令，以搜索与此漏洞相关的指标：
    Import-Csv -Path (Get-ChildItem -Recurse -Path "$env:PROGRAMFILES\Microsoft\Exchange Server\V15\Logging\HttpProxy" -Filter '*.log').FullName `
    | Where-Object {  $_.AuthenticatedUser -eq '' -and $_.AnchorMailbox -like 'ServerInfo~*/*' } | select DateTime, AnchorMailbox
此外，Volexity还发布了以下与SSRF利用相关的URL：
    /owa/auth/Current/themes/resources/logon.css
    /owa/auth/Current/themes/resources/...
    /ecp/default.flt
    /ecp/main.css
    /ecp/.js
通过利用上述的一些暗示,我们在补丁差异中搜索了相关术语(包括诸如主机，主机名，fqdn之类的字符串),并发现了`Microsoft.Exchange.FrontEndHttpProxy.HttpProxy`名称空间中有趣的变化。这使我们还发现了`BEResourceRequestHandler`所使用的`BackEndServer`类中的相关差异。
_补丁差异关于ServerInfo / authentication / host / fqdn._
* * *
_修补BEResourceRequestHandler使用的BackEndServer类的差异。_
* * *
接下来，我们跟踪到的调用`BEResourceRequestHandler`，并从中的`SelectHandlerForUnauthenticatedRequest`方法找到了相关路径`ProxyModule`。
_缩小的代码显示命中BEResourceRequestHandler的路径。_
* * *
最后, 我们评估了BEResourceRequestHandler的CanHandle方法，发现他需要带有ECP"协议" (e.g.
/ecp/)的URL,`X-BEResource`的cookie, 和一个以静态文件类型扩展名结尾的URL(例如js,
css,flt等)。由于此代码是在HttpProxy中实现的， **因此URL不需要合法** ,这解释了以下的事实:
一些payload只是使用了`/ecp/y.js`类型的一个不存在的文件。
`X-BEResource`cookie在`BackEndServer.FromString`解析,从而有效地分离`~`的字符串，并分配第一个元素给"FQDN"给后端，解析第二个为整数的版本号。
然后我们跟踪了该`BackEndServer`对象的用法，并发现该对象已用于`ProxyRequestHandler`去决定
将代理请求发送到的主机。URI是`GetTargetBackEndServerUrl`通过`UriBuilder`来构造的,是本地.NET的类。
_缩小的代码显示ProxyRequestHandler中的相关方法。_
* * *
在这一点上,我们可以通过设置特定的标头并将请求发送到/
ecp中的“静态”文件来从理论上控制用于这些后端连接的主机。但是仅控制主机并不足以在Exchange后端调用任意的终结点。为此,我们查看了.NET源代码本身，以了解如何实现UriBuilder。
_参考源代码中UriBuilder的ToString方法。_
* * *
如上面的代码片段所示，UriBuilder的ToString方法（用于构造URI）使用我们的输入执行简单的字符串连接。因此，如果将Host设置为`"example.org/api/endpoint/#"`，则可以有效地获得对目标URL的完全控制。  
有了这些信息，我们就可以通过以下HTTP请求演示SSRF了。
_由于Kerberos主机不匹配，SSRF尝试访问example.org失败。_
唉! 由于`NegotiateSecurityContext`与example.org通信出错，我们的SSRF尝试“失败” 。
事实证明，此错误是我们理解SSRF的关键，因为它表明了HTTP代理正试图通过Kerberos向后端服务器进行身份验证的事实。通过将主机名设置为Exchange服务器计算机名，Kerberos身份验证成功，并且我们可以通过以`NT
AUTHORITY\SYTEM`身份访问端点。有了这些信息，我们就足以通过以下HTTP请求演示SSRF…
_由于后端身份验证检查，导致SSRF尝试失败。_
唉!
再次失败！后端服务器由于某种原因拒绝了我们的请求。跟踪此错误，我们最终发现了`EcpProxyRequestHandler.AddDownLevelProxyHeaders`方法，只有`ProxyToDownLevel`在`GetTargetBackEndServerUrl`方法中将其设置为true时才调用该方法。此方法检查用户是否已通过身份验证，如果未通过验证，则返回HTTP
401错误。
幸运的是，我们可以通过修改Cookie中的服务器版本来防止`GetTargetBackEndServerUrl`设置此值。如果版本大于`Server.E15MinVersion`，`ProxyToDownLevel`则为false。进行此更改后，我们成功通过了后端服务（自动发现服务）的身份验证。
_成功向自动发现端点发送SSRF。_
* * *
在查看上面的代码路径时，我们在OWA代理处理程序中发现了另一个SSRF。这些请求是在没有Kerberos身份验证的情况下发送的，因此可以将其定向到任意服务器，如下所示。
_成功的SSRF尝试通过X-AnonResource cookie进入example.org。_
* * *
至此，我们有足够的信息来伪造对某些后端服务的请求。我们不会发布有关如何正确认证更敏感的服务（例如/ecp）的信息，因为该信息不是公开可用的。
### 任意文件写入（[CVE-2021-27065](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-27065)）
有了SSRF，我们将注意力转向了远程代码执行。在开始发布补丁程序之前，关于此漏洞的第一个线索来自Microsoft和Volexity发布的提示。即，此Powershell命令可在ECP日志中搜索危害指标：
    Select-String -Path "$env:PROGRAMFILES\Microsoft\ExchangeServer\V15\Logging\ECP\Server\*.log" `-Pattern 'Set-.+VirtualDirectory'
此外，Volexity博客文章描述了`/ecp/DDI/DDIService.svc/SetObject`与利用有关的请求。有了这两个事实，我们在diff中搜索了ECP或DDI类中与文件I
/
O相关的任何内容。结果很快出来了，是位于`Microsoft.Exchange.Management.ControlPanel.DIService`的`WriteFileActivity`类。“控制面板”是ECP的面向用户的名称，DDIService直接在指示符URL中。如下面的差异所示，旧功能将具有用户控制名称的文件直接写入磁盘。在新功能中，代码会附加“
.txt”文件扩展名（如果尚不存在）。知道一般的漏洞利用包括将ASPX
Webshell编写到服务器上，这`WriteFileActivity`似乎是漏洞利用的主要选择。
_修补WriteFileActivity.cs的差异_
* * *
如果我们在Exchange安装目录中搜索WriteFileActivity，则会在Exchange Server \ V15 \ ClientAccess
\ ecp \ DDI中的多个XAML文件中看到该文件。
_ResetOABVirtualDirectory.xaml中的代码段_
\--
在检查了XAML文件并查看了Exchange Web