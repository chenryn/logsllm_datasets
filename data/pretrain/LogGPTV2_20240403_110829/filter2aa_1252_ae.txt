array attached to the table.
randomly placed on our antenna array with different angles
and orientations as described above. We first use the antenna
array to capture and analyze the emitted signal from the
target device to predict its current position and orientation.
We have found in our experiments that our phone locator
program typically needs 4 antennas at different locations to
infer the phone location within 3 seconds with a sampling
rate of 1M/s. Once we have the precise location of the target
device, we switch the antenna array from monitor mode to
attack mode by switching the corresponding relays. We choose
the appropriate interference frequency and amplitudes based
on the target phone model. We then use our attack setup to
launch two different type of attacks against the touchscreen
devices under test using either a precise touch event injection
or sequence of touch events at different locations as needed.
Leveraging Siri on iOS devices Installing unauthorized
applications on an iOS device can be difficult due to strict iOS
application distribution. Instead, we leverage our touch event
injection attack to abuse Apple’s accessory discovery mecha-
nism to perform data exfiltration. An iOS device automatically
finds nearby unpaired Apple accessories, such as Airpods
headphones. Once these devices are found, a notification pops
up and asks the user if the device should pair and connect.
The notification issues a Connect request that prompts the
user to grant access. To connect with the device the user only
needs to tap the Connect button without further action. Once
connected, the user can directly uses the Airpods to wake up
and interact with Siri, the voice assistance on Apple devices.
The Connect request notification is always displayed at a
fixed location. In our experiments, we find the size of the
Connect button is approximately 5.5 cm by 1 cm. The
confirmation button occupies roughly 2/3 of the screen width
on an iPhone Pro 11 which makes it easier to attack. On
the contrary, the size of this button on an iPad Pro is much
smaller compared to the size of the screen. However, our
attack is still feasible on the iPad Pro due to its accuracy (see
Section VII and Table II). We first conduct an experiment to
validate the possibility of such an attack on a randomly placed
iPhone 11 Pro and iPad Pro 2020 using unpaired Airpods.
After successfully pairing with the Airpods we wake up Siri
to read out the new messages of the victim devices. To further
evaluate the success rate of our attack on iOS devices, we
use our touch event application to draw a square space of the
same size as the confirmation button. We randomly place the
victim device on our antenna array and repeat the process of
sensing/attack/detection and then evaluate if the injected touch
events falls into the intended region. Our attack works 6 out
of 10 times on iPad Pro with an no more than 12 seconds
of attack time and works 9 out of 10 times on an iPhone 11
Pro with no more than 9 seconds of attack time. The random
placement of test devices outside the range of our antenna
array are not included in the metric calculation. During the
experimentation, we find that the main point of failure for an
attack on an iPad Pro is that the distance between our IEMI
antennas is too large to have at least one IEMI antenna placed
on top of the confirmation button. The current configuration
of number of IEMI antennas and the distance between IEMI
antennas is a tradeoff between antenna array coverage and
antenna density that should be selected based on the target
device screen size.
Installing malicious applications on Android devices To
attack Android based touchscreen devices, we use our IEMI
to inject multiple touch events at different screen locations.
More specifically, we assume the attacker knows the phone
number of the victim device and sends it a message which
contains the link of a malicious application. To install the
malicious application, we need to generate 5 distinct touch
events in sequence at different locations, including a tap on
the notification of new message (1 large clickable area), choose
action for link (2 buttons in a row, open link/copy text),
allow saving the APK file (2 adjacent buttons), install the
APK file after downloading (1 button), and finally open the
APK after installation (2 adjacent buttons). We use a Oneplus
7 Pro to evaluate this attack. We first measure the location
and orientation of the victim device. We then initiate the
attack by sending a message containing the download link
of designated application. Once the message is sent, we use
one IEMI antenna that points to the middle of the screen and
two IEMI antennas at the bottom part of the screen to inject
the five touch events in sequence. Each individual touch event
is evaluated with our touch event detector before moving on
to the next touch event. We conducted 10 experiments with
different cellphone locations. We achieved three successful
attacks with our setup. Using the mirrored display, we find that
most of the failed attempts were due to incorrectly inducing
a touch event on adjacent buttons. For example, the injected
touch event incorrectly presses the CANCEL button and causes
the entire attack to immediately fail. We believe a better
designed IEMI antenna would allow us to focus the generated
E field on a smaller attack area, thereby making our attack
more robust.
(a)
(b)
Fig. 21: Attack scenarios on different type of target devices (a) Apple
headphone connection on iOS devices (b) malicious message on Android
devices.
C. Attack Vectors with Human Operation
In the previous section, we presented the design of a static
antenna array and how it can be use to perform security
oriented attacks on multiple devices in several real scenarios.
Although the antenna array is easy to build and use, more
powerful attacks can be carried out if the attacker has both
access and the ability to use a programmable mechanical
system with our touch event injection techniques, such as
a miniature 3D printer [28] or robotic arm[29] commonly
used in side channel analysis research. In this case, our IEMI
antenna more closely mimics the presence of a human finger
and the mechanical system mimics a human arm. To illustrate
the capabilities of our attack in this setting, we opt to manually
maneuver our IEMI antennas to simulate the attack with the
mechanical system. With the short-tap, press-and-hold and
continuous omni-directional-swipe we achieve the following
security oriented attack outcomes. We believe these attacks are
feasible and practical to implement for a motivated attacker.
Send Message (Short-Tap) With the short tap, we can send
a specific message to a recipient. In practice, such capabilities
can be abused to reply with confirmation messages when banks
request text verification for suspicious credit card transactions.
In our experiment, we move our IEMI antenna to generate
short-tap touch events on top of the letters ªY, E, Sº and the
enter position to send a confirmation message. The experiment
is conducted on an iPhone 11 Pro and a successful operation
takes less than 10 seconds.
Send Money (Press-and-Hold) A typical use case of press-
and-hold on iOS is providing shortcuts for certain function-
alities with minimum user interaction. For instance, Paypal
allows iOS users to hold-and-press the application icon to
activate and send money by showing the QR code without
actually launching the application. We continuously apply
our interference signal on an iPad pro and point the IEMI
antenna toward the Paypal application to trigger this feature
and evaluate the feasibility of such an attack. We then move
the antenna down to press on the ºSend Moneyº option and
then turn off the interference signal to show the send money
QR code. We successfully launched this attack 7 out of 10
times at an attack distance of 10mm. The completion time for
every iteration of the attack was within 5 seconds. We found
that human error, accidentally increasing the attack distance
while holding the antenna, was the reason for failed attack
attempts.
Unlock Gesture Lock Screen (Omni-Directional-Swipe) A
significant achievement of our work compared to previous
approaches is that we can inject omni-directional-swipes with
a controllable duration. As we show in our video demonstra-
tion where we draw a figure with our IEMI antenna, if the
attacker can control the location of the IEMI antenna a gesture
lock screen unlock attack can be performed. We evaluate
the feasibility by trying to unlock a gesture lock protected
application on an iPad Pro. The gesture lock we setup has the
shape of ªZº which includes 7 points at three different rows
and columns. This attack was successful 3 out of 5 times at
an attack distance of 10mm. The completion time for every
iteration of the attack was similarly within 5 seconds. The total
travel distance of the IEMI antenna was 14 cm.
X. COUNTERMEASURES
Force Detection: Force and pressure add a new dimension on
top of existing touchscreen techniques. High end touchscreen
controllers [30] can detect the force applied on the touchscreen
with a scale from 1 to 10. The force sensors used in the touch-
screen can detect subtle differences in the amount of pressure
of each touch. Since the introduced ghost touches may not
cause any pressure on the touchscreen, the underlying system
can check both force sensors and touchscreen controllers to
filter out the ghost touches. The test devices that we have do
not have such features, so we use a barometer as a substitute
for detecting the pressure on the touchscreen for those devices
equipped with one. In our touch gesture detection application,
we read the barometer value whenever a touch event occurs.
For example, the barometer value on the Pixel 2 changes 0.3
hPa when the screen is pressed with a finger for more than 1
second. We successfully detect injected long press and swipes
on a Pixel 2 using the barometer. However, this method is
limited to Android devices with water resistance, otherwise
the barometer value does not change even with a human finger
pressing on the touchscreen.
Low-Cost Accessory: Apart from manufacture level counter-
measures, end users may use smartphone or tablet cases with
metal front covers to block all EM interference including the
IEMI attacks. In fact, such products are already available in
the market [31] and originally designed to prevent the NFC
card skimming attack [32]. To evaluate this countermeasure,
we use a regular phone case with front cover and tap the
inner layer with Faraday Fabric. We keep the phone awake
while using the phone with our customized phone case. Even
though the thickness of the Faraday Fabric is only 0.28mm, it
still defends our attack considerably well. We were no longer
able to inject the touch events onto any test devices except for
rare ghost touches at the edge of the touchscreen where the
Faraday Fabric is not covered well. This countermeasure does
not require any specific hardware or software to be present on
the touchscreen device and can be implemented with minimum
effort.
XI. RELATED WORK
A. IEMI Attacks
IEMI attacks have been applied to different devices and sys-
tems, including medical devices [33], smart phones [34], [35],
embedded systems [36], [37], [38], autonomous vehicles[39],
[40], etc.
Among these attacks, Delsing et al. [38] examined the
effects of an IEMI attack on sensor networks and revealed the
susceptibility of sensor networks to high frequency (in GHz
range) IEMI. Selvaraj et al. [36] further expanded this attack
and demonstrated that small circuits (i.e., embedded systems)
are vulnerable to low frequency IEMI with proper coupling.
Kennedy et al. also studied how IEMI can be used to create
interference on the analog voltage input port of an Analog to
Digital Converter [37].
Kune et al. conducted comprehensive analysis of IEMI
attacks against analog sensors and demonstrated IEMI attacks
on cardiac medical devices by remotely injecting forged
signals [33] that cause pacing inhibition and defibrillation.
In this paper, the authors also demonstrated how to inject
audio signals on microphones remotely and proposed digital
mitigations to verify and clean the input signal. Kasmi and
Esteves [34], [35] exploited the voice assistant on smart phones
to perform remote inaudible command injection attacks against
smartphone headphone cables using fine tuned EM signals.
B. Touchscreen Attacks
Various attacks targeting touchscreens have been presented
in the past. These attacks are primarily focused on passive
information exfiltration, e.g., displayed content, via different
carriers including microphone [8], EM [7] or mmWave sig-
nal [9]. In addition, only two papers [11], [12] are published
to perform active touchscreen attack using IEMI. Maruyama
et al. [11] presented Tap’n Ghost, a new class of active attack
against capacitive touchscreens, which leverages an injected
noise signal and programmed NFC tag to force a victim mobile
device to perform unintended operations. However, this attack
can only be conducted along with user touches due to the
skewed spatial distribution. On the contrary, our touchscreen
IEMI attack can cause intentional ghost touches on a capacitive
touchscreen without any user interaction. A recent touchscreen
attack, Ghosttouch
[12], similarly used EMFI to inject taps
and row/column based swipe gestures. Although the attack is
more advanced than Tap’n Ghost, it relies on detecting the
correct driving signal from the touchscreen and synchronizing
it with IEMI signal to induce accurate touch events. However,
we find that the driving mechanism is significantly different
on different smartphones, which makes the attack less feasible
in a real attack scenario. As shown in Appendix Figure A-1,
the measured driving signal from five different touchscreen
devices are entirely different. The Nexus 5X smartphone used
in Ghosttouch shows a clear synchronization pattern. On the
other hand, other smartphones use a parallel driving mecha-
nism which is difficult to synchronize with. Ghosttouch works
well on sequential driving based touchscreens. Unfortunately
this is no longer a popular option for the most recently released
touchscreens. Furthermore, Ghosttouch is limited to either col-
umn or row based swipe gestures due to the synchronization.
Our attack does not need to perform synchronization, nor rely
on a specific type of driving mechanism to inject stable short-
tap, long-press, and omni-directional-swipe touch events to
realize practical attacks.
XII. CONCLUSIONS AND FUTURE WORK
In this paper, we first developed theory for a novel IEMI
attack on modern capacitive touchscreens to generate ghost
touches. The theory was then validated in both simulations
and experimental demonstrations. We identify that such a
vulnerability exists in almost all capacitive touchscreen-based
devices under radiated IEMI attacks. The mechanism of the
induced ghost touches cause is analyzed based on the operating
principle of touch sensing. The critical field strength that can
generate ghost touches is calculated, along with the critical
frequencies at which the touchscreens are more vulnerable to
IEMI attacks. The IEMI attack is successfully demonstrated
on a series of commercial touchscreens of laptop, smartphone,
and tablets under various attack scenarios. We elaborate on the
features affecting our IEMI attack, including table material, ta-
ble thickness, phone locations, and antenna interference. Using
our antenna array, screen locator, and touch event detector,
we design and evaluate the first end-to-end touchscreen attack
in real scenarios. We address several limitations presented in
previous touchscreen attacks. We further evaluate the proposed
countermeasures against our attack.
In the future, we plan to increase our attack distance and
attack accuracy by using different antenna designs, i.e., longer
waveguide (copper needle), far-field phased array antenna, and
Yagi-Uda (directional) antenna. We plan to evaluate phased
array antenna and Yagi-Uda antenna to programmatically
generate the focused E field from far so that we can address
the current table thickness limitation. On the other side, phased
array antenna and Yagi-Uda antenna can carry significant im-
plementation challenges compared to a copper needle antenna.
XIII. ACKNOWLEDGMENT
We genuinely appreciate the reviewers for all their construc-
tive suggestions. This work is supported by National Institute
of Standards and Technology, Intel and National Science
Foundation under award number 1818500.
REFERENCES
[1] T. Wang and T. Blankenship, ªProjected-capacitive touch systems from
the controller point of view,º Information Display, vol. 27, no. 3, pp.
8±11, 2011.
[2] L. Cai and H. Chen, ªTouchlogger: Inferring keystrokes on touch screen
from smartphone motion.º HotSec, vol. 11, no. 2011, p. 9, 2011.
[3] A. J. Aviv, B. Sapp, M. Blaze, and J. M. Smith, ªPracticality of
accelerometer side channels on smartphones,º in Proceedings of the
28th annual computer security applications conference.
New York,
NY, USA: Association for Computing Machinery, 2012, pp. 41±50.
[Online]. Available: https://doi.org/10.1145/2420950.2420957
[4] E. Owusu, J. Han, S. Das, A. Perrig, and J. Zhang, ªAccessory: password
inference using accelerometers on smartphones,º in proceedings of the
twelfth workshop on mobile computing systems & applications.
San
Diego, California, USA: Association for Computing Machinery, 2012,
pp. 1±6.
[5] Z. Xu, K. Bai, and S. Zhu, ªTaplogger: Inferring user inputs
on smartphone touchscreens using on-board motion sensors,º in
Proceedings of the fifth ACM conference on Security and Privacy in
Wireless and Mobile Networks.
New York, NY, USA: Association
for Computing Machinery, 2012, pp. 113±124. [Online]. Available:
https://doi.org/10.1145/2185448.2185465
[6] E. Miluzzo, A. Varshavsky, S. Balakrishnan, and R. R. Choudhury,
ªTapprints: your finger taps have fingerprints,º in Proceedings of the 10th
international conference on Mobile systems, applications, and services.
New York, NY, USA: Association for Computing Machinery, 2012, pp.
323±336. [Online]. Available: https://doi.org/10.1145/2307636.2307666
[7] Y. Hayashi, N. Homma, M. Miura, T. Aoki, and H. Sone, ªA threat
for tablet pcs in public space: Remote visualization of screen images
using em emanation,º in Proceedings of the 2014 ACM SIGSAC
Conference on Computer and Communications Security.
New York,
NY, USA: Association for Computing Machinery, 2014. [Online].
Available: https://doi.org/10.1145/2660267.2660292
[8] D. Genkin, M. Pattani, R. Schuster, and E. Tromer, ªSynesthesia:
Detecting screen content via remote acoustic side channels,º in 2019
IEEE Symposium on Security and Privacy (SP).
San Francisco, CA,