is ”behind the defense line” protected by the wrapper.
Objective and Approach.
To achieve the above goal,
we need to ﬁnd ways to replace an existing trusted Java
class (provided by Android) with another Java class pro-
vided by the application (untrusted). The application’s Java
class (and its methods) will have the same name as the ex-
isting Java class (and its methods). This way, the appli-
cation’s class can invoke all the native functions that the
existing Java class can invoke. These invocations cannot
be restricted by the API-level access control placed in the
secure wrapper. We would like to exploit problems with
the class loading mechanism in Android to achieve our goal.
Figure 7 depicts our strategy.
1
2
3
4
5
6
7
8
9
10
11


Figure 7: Exploit Reload Java Classes
In this study, we use android.hardware.Camera class
as an example. This class is provided by Android, and is
considered as trusted. A malicious application wants to re-
deﬁne this class, so when this name is used, the redeﬁned
class is used, not the one provided by Android. Here is the
code snippet of the redeﬁned class:

package android.hardware;
public class Camera{
final public void someFunc() {
// Calling the privileged function
privilegedFunc(); }
native void privilegedFunc(); }
1
2
3
4
5
6

In the above code, the native function privilegedFunc
is one of the APIs protected by the secure wrapper in the
bytecode rewriting technique, but someFunc is not restricted
(the name of this method can be arbitrary). If we use the
original android.hardware.Camera class, our access to
the privilegedFunc is restricted because of the wrapper
placed on this class. However, if we can get DVM to load
our redeﬁned class, instead of the original Android class, and
invoke privilegedFunc through someFunc, the access of
the privileged function becomes unrestricted.
Attempt 1 (Failed): We attempt to load our redeﬁned
class (stored in the Camera.apk ﬁle) in DVM. Android pro-
vides dalvik.system.DexClassLoader to allow appli-
cations to dynamically load classes. We did the following:
In our customized class loader, we use super.findClass
to load the class. Unlike the implementation in the class
DexClassLoader, we do not check whether the class is al-
ready loaded by its parent class loaders. Now, we can use
MyDexLoader to load our redeﬁned android.hardware.
Camera class without any problem.
There is another challenge. The privilegedFunc native
function in our redeﬁned Camera class needs to be linked
to its corresponding native library function. Here is the
problem: In Android, a Java method can only be linked to a
native library function if they are both associated with the
same class loader. In our case, the redeﬁned Camera class
is associated with our class loader MyDexLoader, but the
2Each class loader needs to have a parent class loader, unless
it is the ﬁrst one.
7
First reload redeﬁned android.hardware.Camera class
into a new class loader. Without the needs of registration
to native functions through name mapping, non native Java
method can be renamed in the user-deﬁned class. Method
takePicture is a non native Java method so that we can
rename it to takeMyPicture.
package android.hardware;
public class Camera {
public void takeMyPicture(...) {...}}
However, takePicture invokes native_takePicture
native Java methods which contains actual implementation
of taking pictures. Hence, we need to associate native Java
methods of Camera class with corresponding native library
functions. Refer to the code snippet in section 3.1, Java
method com.android.internal.util.WithFramework.
registerNatives in android_runtime library registers
native library functions to Camera native Java methods. By
reloading android_runtime library and invoking method
registerNatives, native library functions are linked to
redeﬁned Camera class.
Then takeMyPicture can be invoked using reﬂection.

// Create a customized class loader
MyDexLoader ld = new MyDexLoader(...);
// Load redefined Camera class
Class c = l.loadClass("android.hardware.Camera");
Class util = l.loadClass("com.android.internal.
util.WithFramework");
Method m = util.getDeclaredMethod("
registerNatives", ...);
m.invoke(...);
// Invoke takeMyPicture method using reflection
m = c.getDeclaredMethod("takeMyPicture", ...);
m.invoke(...);
... }


native library will be associated with another class loader if
it loaded the library 3.
We tried to resolve the challenge from association of native
library and class loader, but without much success, mostly
because the association policy is enforced by DVM, which
cannot be overwritten by Java code. However, we investi-
gated that if a class loader is not updated with the list of
libraries that loaded in DVM, then it is possible to reload
those libraries.
Our investigation revealed that the default class loader
(bootstrap) of DVM is not aware of android_runtime li-
brary being loaded. Hence making Java classes associated
with this library a candidate for attack. registerNatives
native function in this library would link plenty of internal
native functions with Android Java classes.
5.1 Case Study
1
2
3


Attack Background. We performed our attack on a
camera application [5]. Its main functionalities are taking
pictures and then save the taken photos under the external
SD card directory.

public boolean onOptionsItemSelected(MenuItem
item) {
/* normal method invocation */
camera.takePicture(...);
/* equivalent method invocation using reflection
Class c=Class.forName("android.hardware.Camera");
Method m=c.getDeclaredMethod("takePicture", ...);
m.invoke(camera,...); */
}
Suppose current bytecode rewriter enforced ﬁner access
control on method Camera.takePicture which speciﬁes
that pictures can only be taken at daytime between 8am to
*/

6pm.
1
2
3
4
5
6
7


8
9
10
11
12
1
2
3
4
5
6
7
8
1
2
3
4
5
6
1
2
3
4
public class SecureCamera{
public static void takePicture(Camera camera,
...){
Time now = new Time();
now.setToNow();
if(now.hour > 8 && now.hour 60&&loc.getLatitude()140&&loc.getLongtitude()
<160) {
return loc; }}
However, malicious app could introduce customized RPC
with diﬀerent method signature.
package my.location;
/* User-defined RPC stub class */
public interface LocMgr extends android.os.
IInterface {
public static abstract class Stub extends
android.os.Binder implements
my.location.LocMgr {...}}


import my.location.LocMgr;
IBinder b = android.os.ServiceManager.getService(
LOCATION_SERVICE);
LocMgr sLocationManger = LocMgr.Stub.asInterface(
Location loc = sLocationManger
.getLastKnownLocation(...);
b);

}
The above code snippet illustrates how customized RPC
stub is used. Line 1 returns an IBinder instance, which is
the gateway to the RPC interface. Line 2 establishes local
clients by converting the IBinder instance to an instance of
LocMgr, so that any invocation of inter-process calls are
thereafter acted as regular method calls on LocMgr.
Java application code using rewriting [12]. Rudy and Wal-
lach built three bytecode rewriting frameworks to add secu-
rity semantics to the Java Virtual Machine [24]. Erlingsson
has discussed practical applications of Java bytecode rewrit-
ing [16].
I-ARM pointed out some potential attacks on bytecode
rewriting, i.e., usage of Java reﬂection and ClassLoader [14].
However, the main focus of the paper is on the implementa-
tion of a bytecode rewriting framework, analysis on potential
attacks is quite brief. Our study is the ﬁrst one presenting
a systematical evaluation on API-level access control using
bytecode rewriting. We did a comprehensive study on the
attacking surfaces of the API-level access control using byte-
code rewriting.
Fine-grained access control through library interpo-
sition.
Instead of using bytecode rewriting, Aurasium
accomplishes ﬁne-grained access control via instrumenting
Android Bionic libraries [26].
It encapsulates the original
Bionic libraries functions inside its interposition routines, so
ﬁne-grained security policies can be enforced. These new
routines will be invoked when applications invoke the rou-
tines in the Bionic libraries. This is achieved through the dy-
namic linking mechanism used by the native libraries. Com-
pared to bytecode rewriting, this technique is more secure,
as it does not worry about whether applications can directly
jump to native library functions. However, by conducting
access control at the lower level, it loses the rich context
information that is available to bytecode rewriting. Such
context is beneﬁcial for enforcing more ﬁne-grained security
policies.
Fine-grained access control through OS modiﬁca-