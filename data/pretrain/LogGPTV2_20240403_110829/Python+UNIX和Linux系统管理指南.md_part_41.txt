## Page 304
站式模块，允许你派生出新的进程，并且与标准输入、标准输出以及标准错误输出进行
问题。幸运的是，Python处理进程非常容易。从Python2.4开始，Subprocess已经成为一
需要知道启动脚本、运行等级、守护进程、长时间运行的进程、并发，以及一大堆相关
如果你是一名Unix/Linux系统管理员，那么对进程进行处理将会是工作的主要内容。你
引言
进程与并发
第10章
In[4]:subprocess.call.('df-k',
例10-1：子进程的简单应用
调用。参见例10-1。
It Simple Stupid）原则，使用Subprocess完成一个非常简单的处理，创建一个简单的系统
接标准输出，连接错误流、侦听返回代码。为了提起你的兴趣，让我们遵循KISS（Keep
有统一的API。Python中的子进程负责处理下列事务：派生新的进程连接标准输人、连
对于一名系统管理员，subprocess或许是单一的最重要的模块，因为它对于shellingout具
式服务，并且具有管理多个进程的能力。
打交道的开发人员来说是一个革命性的变化。对于许多处理进程的事务，它提供了一站
os.popen和popen2 commands。子进程对于系统管理员以及需要与进程和“shelling out”
Python2.4支持子进程，并且替换了许多旧的模块，包括：os.system、os.spawn、
子进程
的进程也是非常重要的。
会话。与进程进行会话是处理进程的一个方面，同时，理解如何部署和管理长时间运行
map-hosts
Filesystem
290
fde
devfs
/dev/disk0s2
esc
1024-blocks
106
106
shell=True)
www.TopSage.com
17050048
100%
100%
%001
Mountedon
dev
---
## Page 305
码。我们将在这一节中探索Python编程中的返回码的使用。
于没有找到的程序，不能被执行的程序，通过Ctrl-C来终止的程序，分别有专门的返回
执行。如果你有一定的C或Bash的编程经验，你会对返回代码非常熟悉。“exit code”和
使用subprocess的返回代码
In [4]: ret = subprocess.call("ping -c 1 10.0.1.1",
In[3]:import subprocess
出代码，如果是，则表示失败。而使用返回码的不是非常明显的用途则有许多可能。对
发者，使用返回码最为明显的用途是判断一个使用return的进程是否具有一个非零的退
作。通常如果一个程序退出时具有除0之外的其他返回代码，则表示程序出错。对于开
每一个进程在退出时有一个返回码，返回码的状态可以用来判断程序将要采取什么动
subprocess.call有一个有趣之处需要留意：你可以使用返回代码来判断你的命令是否成功
subprocess.Popen之间，存在一个非常大的差异。subprocess.call会封锁对响应的等
要捕获命令的输出结果，那么你需要使用subprocess.Popen。在subprocess.call与
的输出不感兴趣，只是希望程序被运行，你可以典型地使用subprocess.call。如果你需
对于这两个示例以及通常的subprocess.call，还有一些事情需要指出。当你对shell命令
例10-3：subprocess.call对标准输出的禁止
subprocess.call的标准输出。幸运的是，现在有非常简便的方法可以这样做，参见例
些人仅对运行系统调用感兴趣，而不关心标准输出。在这种情况下，经常需要禁止
一个Subprocess非常有意义的功能需要特别指出，即它具有禁止标准输出的能力。一
Out[7]:0
In [7]: subprocess.call('du -hs $HOME', shell=True)
例10-2：磁盘使用情况汇总
况的示例。
使用同样简单的语法来包含shell变量也是可行的。例10-2是一个查找主目录已用空间情
“return code”这两个词汇经常互换使用，都是用来描述系统进程的运行状态码。
10-3。
28G
Out[4]:0
map auto_home
/Users/ngift
stdout=open('/dev/null',
www.TopSage.com
100%
"（.m.
/home
进程与并发丨291
---
## Page 306
让我们查看具有特殊意义的公共返回码列表：
In [25]: ret = subprocess.call("1s /foo", shell=True)
例10-5：基于返回码true/false的条件语句
编写条件表达式，参见例10-5。
因为目录不存在，
Out[16]:1
ls:/foo:No such file or directory
In [16]: subprocess.call("ls /foo", shell=True)
例10-4：subprocess.call的失败返回码
一下一些使用subprocess.call的常见示例。参见例10-4。
最有用的情况是使用返回码0或1，0或1通常表明你刚刚执行的命令成功或失败。下面看
255
130
128
126
292
....:else:
退出状态超出范围
通过按Ctrl-C终止脚本执行
致命错误信号“n”
非法参数，退出
激活的命令无法执行
shell内建的误用
命令无法找到
普通错误
成功
第10章
print "failure"
，我们获得返回码1表示执行失败。我们也可以捕获返回码，使用它来
www.TopSage.com
PDG
---
## Page 307
接下来，让我们看看例10-7是如何使用 platform模块与IPython进行交互的，并且查看将
在Red Hat Enterprise Linux5系统中实现的相同：
则需要选择使用0或非0作为退出代码。以下示例演示了Solaris10的退出代码，与之前
然而，不同的操作系统会有不同的退出代码，因此如果你正在编写的是跨平台的脚本，
继续执行下一个命令。
同。程序应当侦听第一个程序的返回代码，调用subprocess，若返回代码是127，则能够
UX、AIX、Solaris、FreeBSD和Red Hat，这些操作系统的命令工具都或多或少有一些不
让我们看看之前的示例，并试图将它变得更简单一些。我们在编写跨平台的代码时，往
Out[28]:127
/bin/sh:
In [28]:subprocess.call("rsync /foo /bar",shell=True)
例10-6：subprocess.call基于返回码127的条件语句
则使用scp-r。参见例10-6。
的编写运行shell命令工具的方法。你可以先尝试运行rsync，如果得到的返回码是127,
这是一个关于返回为“command not found”的示例，返回码是127。这可能是一个有用
例10-7：使用platform和Subprocess模块查看在Solaris 10上命令的执行情况
什么参数传递给了subprocess.call。
第8章以获取更多信息。
十分有利于你去熟悉platform模块。process模块已在第8章中做了详细介绍，你可以参考
作系统之后，应检查该平台的具体命令。如果发现自己也编写同样类型的代码，那么将
我们仍然可以使用特定的退出代码，但我们可能首先要确定操作系统是什么。确定了操
往会需要打开若干个*nix的窗口，需要在不同的操作系统中，编译并运行程序，而HP
>>
Type“
Python 2.4.4(#1, Jan 9 2007, 23:31:33) [C] on sunos5
ash-3.00# python
File: /usr/lib/python2.4/platform.py
Namespace:Interactive
/bin/sh:rsync:notfound
rsync: command not found
subprocess
"copyright",
"credits"
www.TopSage.com
1O
"license" for more information.
进程与并发丨293
---
## Page 308
与进程的标准输入进行通信的示例。使用Python的一个非常有意义的方面是可以创建管
来删除换行符。Subprocess也能够与标准输入和标准输出进行通信。以下是一个简单的
值得注意的是，readlines()返回一个具有换行符的列表。我们不得不使用line.strip()
In [4]: for line in out:
In [3]: out = p.stdout.readlines()
In [2]: p = subprocess.Popen("df -h", shell=True, stdout=subprocess.PIPE)
In [1]: import subprocess
例10-8：使用Subprocess捕获标准输出
例10-8。
效的工具。有关使用平台模块编写跨平台*nix代码的详细内容请参阅第8章。接下来请看
正如你所看到的，使用subprocess.call平台模块在写跨平台代码时可能是一个非常有
Success, the copy was made on Sunos 5.10
In [6]: if platform.system() == 'Sunos':
In [5]: if platform.release() == '5.10':
:,souns. == ()wssxtd t :[] u
294
map auto_home
map -hosts
fdesc
/dev/diskos2
..：
：
yes
.....
.....
.....
....：
lesystem
：
第10章
possible. It makes this information available via function APIs.
Docstring:
ret = subprocess.call('cp /tmp/foo.txt /tmp/bar.txt', shell-True)
print "yes"
print "yes"
print line.strip()
platform.release())
print
1.0Ki
107Ki
93Gi
Size
OBi
OBi
“()wasks*wroied) %  Ss% s% uo apew sem Ado au (ssassns
1.0Ki
107Ki
78Gi
Used
OBi
Avail Capacity
15Gi
OBi
OBi
OBi
OBi
100%
100%
100%
100%
www.TopSage.com
85%
Mounted on
/home
/net
/dev
/dev
PDG
---
## Page 309
意义。让我们通过一个简单的继承示例演示一下是如何实现的。参见例10-10。
pop()，它会以相反的顺序输出参数。这可能有些令人迷惑，我们可以使用简单的循环
据args.pop(o)语法，每一个命令一开始将获得一个弹出的列表。如果我们使用args。
因为python和*args的功能强大，我们可以将我们的函数作为工厂而随意运行命令。根
以下是一个非常简单的函数的示例：
"ussasoidgns jo sioadse auos satewsne pue stetiduts ieut atnpou st qnsansuuu
from subprocess import call
#1/usr/bin/env python
例10-10：创建subprocess模块
系统管理员需要十分频繁地运行一系列命令，因此创建一个简化这一过程的模块会更有
来编写同样的命令工厂函数：
例10-9：Subproces管理工厂
和打印，
道工厂，
importsys
import time
def multi(*args):
map auto_home
map -hosts
fdesc
/dev/disk0s2
Filesystem
In [28]: multi("df -h",
lrwxr-xr-x@1rootadmin11Nov2423:37/tmp->private/tmp
devfs
for cmd in args:
Feb
，参见例10-9。
，这在Bash中是无法想象的。只需几行代码，我们可以让命令根据参数进行创建
+
for
Z
printout
P=
07:41:05
: subprocess.Popen(cmd, shell=True, stdout = subprocess.PIPE)
p = subprocess.Popen(cmd, shell=True, stdout = subprocess.PIPE)
cmd in args:
print out
out
p.stdout.read()
=p.stdout.read()
107Ki
dhcp126
93Gi
Size
OBi
1.0Ki
107Ki
80Gi
Used
OBi
Avail Capacity
13
OBi
8
3Gi
www.TopSage.com
USER_PROCESS:
100%
100%
100%
100%
87%
/home
/net
/dev
/dev
65197
ttys001
进程与并发丨295
PDG
---
## Page 310
296
让我们看看应当如何使用新创建的模块：
def run(self):