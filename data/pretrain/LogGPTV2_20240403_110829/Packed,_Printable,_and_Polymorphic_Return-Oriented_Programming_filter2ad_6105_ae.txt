restore
clrb [%i0]
ret
restore
Fig. 20. Constant Assignment (v1 = 0x00******)
6.2.2 Variable Assignment. Assignment from one gadget variable to another (v1 =
v2) is described in Figure 21. The memory location of a gadget variable v2 is loaded into
local register %l6, then stored to the memory location of gadget variable v1.
Inst. Seq. Preset
Assembly
v1 = v2
%l7 = &v1 ld [%i0], %l6
%i0 = &v2 st %l6, [%l7]
ret
restore
Fig. 21. Variable Assignment (v1 = v2)
ACM Journal Name, Vol. V, No. N, Month 20YY.
24
·
Ryan Roemer et al.
6.3 Arithmetic
Arithmetic gadgets load one or two gadget variables as input, perform a math operation,
and store the result to an output gadget variable’s memory location. Below, we show how
to perform addition, subtraction, and negation. Increment and decrement are similar; for
completeness, we describe these gadgets in Section B.1 in the Web-only appendix.
The addition gadget (v1=v2+v3) is shown in Figure 22. The gadget uses the two in-
struction sequences to load values for gadget variables v2 and v3 and store them into the
register save area of the third instruction sequence frame directly, so that the proper source
registers in the third sequence will contain the values of the source gadget variables. The
third instruction sequence dynamically gets v2 and v3 in registers %i0 and %i3, adds them,
and stores the result to the memory location corresponding to gadget variable v1.
Inst. Seq.
Preset
%l7 = &%i0
m[&%i0] = v2
(+2 Frames )
%i0 = &v2
m[&%i3] = v3
%l7 = &%i3
(+1 Frame )
%i0 = &v3
Assembly
ld [%i0], %l6
st %l6, [%l7]
ret
restore
ld [%i0], %l6
st %l6, [%l7]
ret
restore
v1 = v2 + v3
%i0 = v2 (stored ) add %i0, %i3, %i5
%i3 = v3 (stored ) st %i5, [%i4]
%i4 = &v1
ret
restore
Fig. 22. Addition (v1 = v2 + v3)
The subtraction gadget (v1 = v2 - v3) is analogous to the addition gadget, with nearly
identical instruction sequences (except with a sub operation). The negation gadget (v1 =
-v2) uses three instruction sequences to load a gadget variable, negate the value, and store
the result to the memory location of an output variable.
6.4 Logic
Logic gadgets load one or two gadget variable memory locations, perform a bitwise logic
operation, and store the result to an output gadget variable’s memory location.
6.4.1 And, Or, Not. We obtain a bitwise and gadget using techniques quite similar to
the addition gadget in Figure 22, but using
and %l3, %l4, %l2; st %l2, [%l1+%i0;] ret; restore
for the third sequence, and adjusting the ﬁrst two sequences to store into %l3 and %l4. We
present the gadget in Section B.1 in the Web-only appendix.
The bitwise or gadget (v1 = v2 | v3) works like the and gadget. Two instruction se-
quences load gadget variables v2 and v3 and write to a third frame, where the bitwise or is
performed. The result is stored to the memory location of variable v1.
The bitwise not gadget (v1 = ∼v2) uses two instruction sequences. The ﬁrst sequence
loads gadget variable v2 into a register available in the second sequence, where the bitwise
not is performed and the result is stored to the memory location of variable v1.
ACM Journal Name, Vol. V, No. N, Month 20YY.
Return-Oriented Programming
25
·
6.4.2
Shift Left, Shift Right. The shift left gadget (v1 = v2 > v3) is virtually identical, except performing a srl (shift
right) operation in the third instruction sequence.
Inst. Seq.
m[&%i2] = v2
m[&%i5] = v3
Preset
%l7 = &%i2
(+2 Frames )
%i0 = &v2
%l7 = &%i5
(+1 Frame )
%i0 = &v3
Assembly
ld [%i0], %l6
st %l6, [%l7]
ret
restore
ld [%i0], %l6
st %l6, [%l7]
ret
restore
%i0 = v2  v2): jump T1, else T2)
is virtually identical to the branch equal gadget, except for using a branch greater than
SPARC instruction (bg).
6.5.3 Branch Not Equal; Branch Less Than; Branch Greater Than or Equal. Gadgets
for the remaining branches are obtained via simple wrappers around the branch gadgets in
the previous section. Our branch not equal gadget (if (v1 != v2): jump T1, else
T2) is equivalent to the branch equal gadget with targets T1 and T2 switched. The branch
less than gadget (if (v1  v1): jump T1, else T2. The branch greater
than or equal gadget (if (v1 >= v2): jump T1, else T2) is equivalent to a similar
reordering: if (v2 <= v1): jump T1, else T2.
6.6 Function Calls
Virtually all public return-into-libc SPARC exploits already target libc function calls. We
provide similar abilities with our function call gadget.
In an ordinary SPARC program, subroutine arguments are placed in registers %o0-5
of the calling stack frame. The save instruction prologue of the subroutine slides the
register window, mapping %o0-7 to the %i0-7 input registers. Thus, for our gadget, we
have two options: (1) set up %o0-5 and jump into the full function (with the save), or
(2) set up %i0-5 and jump to the function after the save. Unfortunately, the ﬁrst approach
results in an inﬁnite loop because the initial save instruction will cause the %i7 function
call instruction sequence entry point to be restored after the sequence ﬁnishes (repeatedly
jumping back to the same entry point). Thus, we choose the latter approach, and set up
%i0-5 for our gadget.
A related problem is function return type. Solaris libc functions return with either ret,
restore (normal) or retl (leaf). Because retl instructions leave %i7 unchanged after
a sequence completes, any sequence in our programming model with leaf returns will
inﬁnitely loop. Thus, we only permit non-leaf subroutine calls, which still leaves many
useful functions including printf(), malloc(), and system().
The last complication arises if a function writes to stack variables or calls other sub-
routines, which may corrupt our gadget exploit stack frames. To prevent this, when we
actually jump program control to the designated function, we move the stack pointer to
a pre-designated “safe” call frame in lower stack memory than our gadget variables and
frames. Stack pointer control moves back to the exploit frames once the function returns.
Our function call gadget (r1 = call FUNC, v1, v2, ...) is described in Figure 26,
and uses from ﬁve to ten exploit frames (depending on function arguments) and a pre-
designated “safe” stack frame (referenced as safe). The gadget can take up to six function
arguments (in the form of gadget variables) and an optional return gadget variable. Note
that “LastF” represents the ﬁnal exploit frame to jump back to, and “LastI” represents
the ﬁnal instruction sequence to execute. The ﬁnal frame encodes either a nop instruction
sequence, or a sequence that stores %o0 (the return value register in SPARC) to a gadget
variable memory location.
ACM Journal Name, Vol. V, No. N, Month 20YY.
28
·