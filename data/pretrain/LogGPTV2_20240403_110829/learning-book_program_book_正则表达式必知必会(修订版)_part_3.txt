### 正则表达式入门

#### 1.4 使用正则表达式
尽管掌握正则表达式的语法相对容易，但真正的挑战在于如何将实际问题分解为一系列可解决的正则表达式。如同学习任何编程语言一样，仅仅通过阅读书籍是不够的；你必须通过实践来真正掌握它们。

正则表达式并不是一个独立的应用程序或可以直接下载的软件。相反，它被广泛地集成在许多软件产品、编程语言、工具和开发环境中。不同应用和语言中的正则表达式使用方法及功能各不相同。通常，应用程序通过菜单选项和对话框访问正则表达式，而编程语言则在函数或类中实现正则表达式的功能。

需要注意的是，并非所有正则表达式的实现都是相同的。不同的应用或语言可能会有显著（有时细微）的语法和功能差异。附录A汇总了多种支持正则表达式的应用和语言的具体细节，在深入下一章之前，建议先熟悉附录A中关于您正在使用的特定环境的信息。

为了帮助读者快速上手，我们提供了一个名为“Regular Expression Tester”的在线工具，可通过以下网址下载：[http://www.forta.com/books/0672325667/](http://www.forta.com/books/0672325667/)。此工具适用于多种流行的应用服务器和编程语言，并且有一个专门用于测试JavaScript正则表达式的版本。附录C详细介绍了该工具的使用方法，它能便捷、高效地测试您编写的正则表达式。

#### 1.5 在继续学习之前
在进一步学习前，请注意以下几点：
- 对于大多数问题，正则表达式通常存在多种解决方案。这些方案可能在简洁性、执行速度、兼容性和功能性方面有所不同。
- 不同实现之间的差异不可避免，本书尽可能确保示例的通用性，但仍需注意特定实现的特殊要求。
- 学习正则表达式的关键在于不断实践。

#### 1.6 小结
正则表达式是一种强大的文本处理工具。它允许用户构建字符串模式（即正则表达式），以完成搜索和替换等操作。

---

### 第2章 匹配单个字符

#### 2.1 匹配纯文本
即使看似简单的纯文本也可以作为正则表达式。例如，“Ben”就是一个有效的正则表达式，尽管它看起来并不复杂。下面是一个例子：

**文本:**
```
Hello, my name is Ben. Please visit
my website at http://www.forta.com/ .
```

**正则表达式:**
```
Ben
```

**结果:**
```
Hello, my name is Ben. Please visit
my website at http://www.forta.com/ .
```

**分析:**
这里使用的正则表达式是纯文本，它匹配原始文本中的“Ben”。

再看另一个例子：

**文本:**
```
Hello, my name is Ben. Please visit
my website at http://www.forta.com/ .
```

**正则表达式:**
```
my
```

**结果:**
```
Hello, my name is Ben. Please visit
my website at http://www.forta.com/ .
```

**分析:**
“my”也是纯文本，它在原始文本中找到了两个匹配项。

##### 2.1.1 多个匹配结果
大多数正则表达式引擎默认只返回第一个匹配结果。如果需要找到所有匹配项，可以使用全局匹配标志（如JavaScript中的`g`标志）。详情请参阅附录A。

##### 2.1.2 字母大小写
正则表达式默认区分大小写，例如“Ben”不匹配“ben”。多数实现支持不区分大小写的匹配，如JavaScript中的`i`标志。详情请参阅附录A。

#### 2.2 匹配任意字符
正则表达式的威力在于其灵活性。`.`字符可以匹配任何单个字符。例如，`c.t`可以匹配`cat`和`cot`。

**文本:**
```
sales1.xls
orders3.xls
sales2.xls
sales3.xls
apac1.xls
europe2.xls
na1.xls
na2.xls
sa1.xls
```

**正则表达式:**
```
sales.
```

**结果:**
```
sales1.xls
sales2.xls
sales3.xls
```

**分析:**
正则表达式`sales.`匹配以“sales”开头后跟任意一个字符的文件名。

提示：`.`可以匹配任何单个字符，包括字母、数字甚至`.`本身。

**文本:**
```
sales.xls
sales1.xls
sales2.xls
orders3.xls
sales3.xls
europe2.xls
apac1.xls
na1.xls
na2.xls
sa1.xls
```

**正则表达式:**
```
sales.
```

**结果:**
```
sales.xls
sales1.xls
sales2.xls
sales3.xls
```

**分析:**
由于`.`可以匹配任何单个字符，因此`sales.xls`也与模式`sales.`匹配。

多个`.`可以连续或间隔出现。例如，`-a.`将匹配第2个字符为`a`的任何三个字符。

**文本:**
```
sales1.xls
sales2.xls
orders3.xls
sales3.xls
apac1.xls
europe2.xls
na1.xls
na2.xls
sa1.xls
```

**正则表达式:**
```
-a.
```

**结果:**
```
sales1.xls
sales2.xls
sales3.xls
apac1.xls
europe2.xls
na1.xls
na2.xls
sa1.xls
```

**分析:**
模式`-a.`不仅匹配预期的`na1`、`na2`和`sa1`，还意外地匹配了其他四个文件名。这是因为模式匹配了第2个字符为`a`的任何三个字符。

如果需要更精确的匹配，可以使用`-a..`来匹配特定格式的文件名。

#### 2.3 匹配特殊字符
在正则表达式中，`.`具有特殊含义。如果需要匹配`.`本身，可以使用转义字符`\.`。例如，`-a\.`将匹配`na1`和`na2`，而不匹配其他文件名。