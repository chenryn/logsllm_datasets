The view displayed in Figure 3.22 demonstrates the Objective-C classes view in Snoop-it; this view shows the
classes that exist in the application, with those that currently have an instance shown in green.
To see how Snoop-it can be used for discovering vulnerabilities, consider a simple application that encrypts and
decrypts some data. One of the features of Snoop-it is the method-tracing tool; you can get to this feature by
selecting Method Tracing from the Runtime Manipulation folder. Tick the Tracing on/off box to enable or
disable the method-tracing feature, which causes all methods invoked by the application to be logged.
For example, simply ticking this box and then using the application so that crypto routines are called causes the
log to be populated with the history of the application’s internal behavior. Here is a sample output from the
method-tracing tool:
Mon Oct 27 18:25:39 2014 (Thread 0): - [Cipher(0x4371b30) initWithKey:],
args: 
Mon Oct 27 18:25:39 2014 (Thread 0): - [Cipher(0x4371b30) setCipherKey:],
args: 
Mon Oct 27 18:25:39 2014 (Thread 0): - [Cipher(0x4371b30) encrypt:], args:
Mon Oct 27 18:25:39 2014 (Thread 0): - [Cipher(0x4371b30)
transform:data:], args: 0, 
Mon Oct 27 18:25:39 2014 (Thread 0): + [Cipher(0x10e50) md5:], args:
Mon Oct 27 18:25:39 2014 (Thread 0): - [Cipher(0x4371b30) decrypt:], args:
Mon Oct 27 18:25:39 2014 (Thread 0): - [Cipher(0x4371b30)
transform:data:], args: 1, 
Mon Oct 27 18:25:39 2014 (Thread 0): + [Cipher(0x10e50) md5:], args:
Mon Oct 27 18:25:39 2014 (Thread 0): - [ViewController(0x513790)
performSelector:withObject:withObject:], args:
@selector(_controlTouchEnded:withEvent:), , 
Mon Oct 27 18:25:39 2014 (Thread 0): - [ViewController(0x513790)
isViewLoaded]
Mon Oct 27 18:25:39 2014 (Thread 0): - [ViewController(0x513790)
loadViewIfRequired]
Mon Oct 27 18:25:39 2014 (Thread 0): - [AppDelegate(0x679e50)
performSelector:withObject:withObject:], args:
@selector(_controlTouchEnded:withEvent:), , 
By analyzing the output of the method-tracing tool you can see that the application creates and initializes a new
Cipher object. The application then goes on to use this object to encrypt and decrypt a block of data using a hard-
coded encryption key of “abcdef123456.” You should well understand the dangers of using a hard-coded
encryption key, and this simple example serves to demonstrate how you can use Snoop-it to automate many of
the tasks necessary to identify security vulnerabilities.
Understanding Interprocess Communication
As you learned in Chapter 2, iOS applications run inside an isolated sandbox that prevents applications from
communicating with each other and as such interprocess communication (IPC) is generally forbidden. Some
exceptions to this rule include the following:
The OS pasteboard
Registered protocol handlers
Application extensions
It stands to reason that you should scrutinize any IPC endpoint in an application during a security review,
because IPC endpoints provide an entry point for potentially tainted data to enter an application and be
processed by it. In the following sections you will learn how to identify and attack IPC endpoints in an iOS
application, specifically focusing on protocol handlers and application extensions.
Attacking Protocol Handlers
On iOS, protocol handlers have been used as a rudimentary form of IPC for a number of years. An application is
able to register its own custom URL scheme, which causes the application to be invoked any time the URL
scheme is called. When a URL is opened, the full path and parameters are passed to the application’s handler;
this allows data to be sent in a single direction. For example, imagine you wanted to get a user of your website to
your mobile application’s page in the App Store while he is browsing your website in MobileSafari. To do this
you could use the itms-apps URL scheme, which is registered by the App Store application on your device. The
URL to load your application’s page may look similar to the following:
itms-apps://itunes.apple.com/app/id
where  would be replaced with the identifier of your application in the App Store.
To register your own custom URL scheme in an application, the application should have the URL scheme set in
its Info.plist file, which you can configure in Xcode in the Info URL Types Setting, as shown in Figure 3.23.
The application should also implement the application:openURL delegate method, which is where the code
responsible for handling the URL invocation will live. Be sure to closely inspect any code executed in this
delegate method as part of any application assessment, because it represents an interesting entry point to the
app.
Figure 3.23 Registering a URL scheme in Xcode
A sample implementation may look similar to the following:
(BOOL)application:(UIApplication *)application openURL: \
(NSURL *)url sourceApplication:(NSString *)sourceApplication \
annotation:(id)annotation
{
if([[url scheme] isEqual:@"myvoip"])
{
if (!([[url absoluteString] rangeOfString:@"/dialer/"].location \
== NSNotFound))
{
NSDictionary *param = [self getParameters:url];
if([param objectForKey:@"call"]!= nil)
{
[Dialer makeCall:param];
}
return YES;
}
}
return NO;
}
In this example, the application has registered the myvoip:// URL scheme and expects it to be invoked with a
host of dialer and URL parameter named call. Invoking this URL scheme causes the application to open, and
then a call will be made to the user-supplied phone number. Such a valid URL could look as follows:
myvoip://dialer/?call=123
Any vulnerabilities that may exist in a URL handling scheme depend entirely on the functionality of the
application, how it handles the data read from the URL, and what it does with that input. In this simple
example, the VoIP application could be abused by an attacker to make a call to premium rate number because
the application does not prompt the user before the call is made, nor does it verify the source application that
the request originated from. The URL scheme could therefore be invoked by an iframe in a web page that the
user browsed to in MobileSafari; that is:
In a compiled application review, you can find the URL schemes registered by the application in the Info.plist
file under the CFBundleURLTypes key. However, to identify the full URL paths supported by a compiled
application you’ll most likely need to do some reverse engineering; the UIApplication openURL delegate method
should be your first point of call. You can gain some insight into the structure of URL that the URL handler
expects by simply extracting the strings from a binary, although this is unlikely to identify URLs that are
dynamically populated.
For example, the Info.plist file for the Facebook application contains the following:
CFBundleURLTypes = (
{
CFBundleTypeRole = Editor;
CFBundleURLName = "com.facebook";
CFBundleURLSchemes = (
fbauth2,
fbauth,
fb,
fblogin,
fbapi,
fbapi20130214,
fbapi20130410,
fbapi20130702,
fbapi20131010,
fbapi20131219,
fbapi20140116,
fbapi20140410
);
}
);
If you run strings on the Facebook application binary and grep for the URL scheme you will find some of the
following URLs:
$ strings Facebook.decrypted | grep "fb://"
fb://profile
fb://profile?id=%@
fb://profile?%@=%@
fb://profile?id=%@&%@=%@
fb://profile?id=%@&%@=%@&%@=%@
fb://timelineappsection?id=%@
fb://album?id=%@
fb://group?id=%@
fb://photo?%@
fb://group?id=%@&object_id=%@&view=permalink
fb://groupPhotos?id=%@
fb://%@?%@
fb://story?%@
fb://page_about?id=%@
fb://page_reviews?id=%@
fb://page_friend_likes_and_visits?id=%@&should_show_visits_first=%d
fb://page_post_insights?page_id=%@&story_id=%@
fb://page?id=%@
fb://page?id=%@&source=notification&notif_type=%@
fb://page?id=%@&source=%@&source_id=%@
fb://page?id=%@&showreactionoverlay=%d
INSECURE URL HANDLING IN SKYPE
In 2010 Nitesh Dhanjani (http://www.dhanjani.com/blog/2010/11/ insecure-handling-of-url-schemes-
in-apples-ios.html) documented a vulnerability in the Skype iOS application. The Skype application
registered the skype:// protocol handler, which when invoked could be used to trigger a call without
prompting for the user’s permission. This behavior was being abused in the wild by malicious websites for
monetary gain, forcing the Skype application to make calls to premium rate numbers that were owned by
the attacker.
Application Extensions
Application extensions are a new feature introduced in iOS 8 to allow developers to extend custom functionality
and content beyond their application to other applications on the device using an IPC channel. Several extension
types are pre-defined by Apple, including the following:
Today—Widgets that extend the Today view of the notification center
Share—Share content with other applications or websites
Action—Manipulate or access content in a host application
Photo Edit—Apply custom editing to a photo in the Photos app
Document Provider—Share documents with other applications
Custom Keyboard—Replace the default iOS keyboard with a custom keyboard
An important concept to understand about extensions is that they are not applications, although the extension
does need a host app to exist and run. Extensions exist to allow host applications to call into pieces of
functionality provided by the containing app (the extension provider). Although the term host application can
be somewhat confusing, it is worth noting that this refers to the application that hosts the code that calls in to
the extension provider via the extension. To do this, the host application has a bidirectional communication
channel with the extension, which in turn has limited interaction with the containing app (as opposed to a direct
communication channel). The containing app and the host app do not communicate with each other on any
level. It is, however, possible for the extension and the containing app to share resources. For example, they may
have a shared document container, which would typically be implemented using the App Groups capability.
Figure 3.24 illustrates the communication channel architecture between a host app, an app extension, and a
containing app. In this instance limited communication between the extension and the containing app is
possible using a URL handler.
Figure 3.24 An app extension can indirectly communicate and share resources with the containing app.
Extensions have been designed in this way to provide a degree of separation between the host app and the
containing app; as such, the extension runs in a completely separate execution context to the containing app.
Indeed, extensions run in a unique execution context, meaning that multiple copies of an extension can be
launched from separate host apps.
The attack surface for an application extension is highly dependent on the functionality that is exposed to the
host app (the one that calls the extension). A malicious host app could, for example, bundle an extension that
exploits a weakness in the extension point. For example, consider a fictitious application and assume that the
developer wants to share some data from a database stored in a shared resource so that it can be accessed by
both the containing app and the extension. The extension may expose some functionality that exists in the host
app where tainted input from the container app enters the extension and ultimately gets populated into a
dynamic SQL query. The consequences here are obvious; a SQL injection vulnerability in the host app’s
extension exposes the database to read and write attacks in a way that the extension hadn’t intended. Another
good illustration of this is a malicious keyboard extension used across all applications on the device and could
be used to create a simple keylogger.
To illustrate how extensions work, we offer this simple example using the 1Password
(https://agilebits.com/onepassword) extension. 1Password is a password manager application that can be used
to generate and store credentials for websites or other resources. 1Password offers an extension
(https://github.com/AgileBits/onepassword-app-extension) that other host applications can use to query
credentials that are stored in 1Password. For example, Twitterific (http://twitterrific.com/ios) acts as a host
app and includes code to interact with the 1Password extension to retrieve Twitter credentials that are stored in
1Password. To query the 1Password extension, you can use code similar to the following:
[[OnePasswordExtension sharedExtension]
findLoginForURLString:@"twitter.com" forViewController:self sender:sender
completion:^(NSDictionary *loginDict, NSError *error)
In the previous code the host app requests credentials for the twitter.com domain; however, a malicious app
could potentially request credentials for any domain. In the case of 1Password, note that the user has to
manually approve the use of the credential, which constitutes a mitigating factor for this issue, but it is not
inconceivable to think that a user could unknowingly approve such a request.
The different attack vectors for an application are highly dependent on the functionality that is exposed by the
extension, but any extensions exposed by an app are certainly areas that should be subjected to plenty of
scrutiny during any iOS app security assessment, especially given that extensions on iOS are a new technology
and is relatively unexplored by security researchers to date. Many developers may also be relatively uneducated
about security risks that are possible to introduce using extension interfaces.
Attacking Using Injection
iOS applications can handle input from a wide range of different entry points, including but not limited to:
Web applications
URL schemes
File types (for example, documents, images, vcards)
AirDrop
iBeacons
Bluetooth
Wi-Fi
Pasteboards
Application extensions
It’s therefore unsurprising that many mobile applications are affected by many classic injection-style attacks,
many of which you are likely to be familiar with in coming from a web application security background. In a
nutshell, injection vulnerabilities can arise in any area that an application accepts user input from; that is, from
untrusted entry points. Therefore, closely scrutinizing application entry points as part of any iOS application
security assessment is essential. This section describes some of the common injection-type attacks that can
occur in iOS applications.
Injecting into UIWebViews
UIWebView is the iOS-rendering engine for displaying web content, but also many other document types; it
supports a number of different file formats, including:
HTML
PDF
RTF
Office Documents (doc, xls, ppt)
iWork Documents (Pages, Numbers, and Keynote)
UIWebView is built upon WebKit (https://www.webkit.org/) and uses the same core frameworks as Safari and
MobileSafari. Consequently, a web view is also a web browser and can be used to fetch and display remote
content. As would be expected of a web browser, web views also support JavaScript, allowing applications to
perform dynamic, client-side scripting.
There is no way to disable JavaScript in the UIWebView API, so all iOS web views support JavaScript by default.
It’s therefore unsurprising that as with traditional web applications, iOS applications can be affected by cross-
site scripting (XSS) and script injection attacks. If you are not familiar with cross-site scripting refer to the
relevant OWASP wiki page for a more in-depth explanation of cross-site scripting attacks
(https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)).
Cross-site scripting can occur in an iOS application in any scenario where user-supplied input is blindly
populated into a UIWebView without sufficient sanitization. Typically, two factors escalate a cross-site scripting
vulnerability from being moderately serious to a critical vulnerability:
The origin in which the web view is loaded
Any native functionality exposed to JavaScript by virtue of a JavaScript to Objective-C bridge
The latter of these factors is dealt with in detail in Chapter 18, but for the moment it is important to understand
that any time an application exposes native functionality to JavaScript, the potential exists for cross-site
scripting exploitation.
The same origin policy is an important concept in web security, because it restricts how documents and scripts
loaded from one origin can interact with a resource from another origin; the following resource provides a good
general description of the same origin policy: https://developer.mozilla.org/en-US/docs/Web/Security/Same-
origin_policy. At the heart of this concept is the definition of the origin, which is governed by the protocol,
host, and port that a resource is loaded from. This is relevant to iOS applications because any resource that is
loaded from the local filesystem will be permitted to access other resources on the filesystem via JavaScript,
including files local to the application’s sandbox, and also other files such as the address book database. To
illustrate this consider the following simple example:
[_mainwebview loadRequest:[NSURLRequest requestWithURL:[NSURL
fileURLWithPath:[[NSBundle mainBundle] pathForResource:@"main"
ofType:@"html"]isDirectory:NO]]];
This code loads the main.html file, which is stored in the application’s bundle directory, into a web view.
Although this may seem relatively innocuous, the HTML file is actually loaded with the origin as the local
filesystem, meaning that any JavaScript in this HTML file will have access to the same files as the application
itself. There are typically two ways in which script injection can occur when loading local files:
When content read from another source, such as a web application, is later executed by a JavaScript eval()