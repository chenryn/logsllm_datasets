### A Technical Comparison of EDB PostgresTM Enterprise and Oracle® Enterprise

**Copyright © EnterpriseDB Corporation, 2018. All Rights Reserved.**

---

## Table of Contents
- **Introduction** ................................................................. 3
- **Notes on Compatibility with Oracle** ........................... 5
- **Tables Legend** ................................................................ 6
- **Evaluating EDB PostgresTM Enterprise** ........................ 7
  - General / Capabilities ....................................................... 8
  - Terminology ......................................................................... 9
  - Capacities ........................................................................... 10
  - Tables and Partitioning ..................................................... 11
  - Data Types ........................................................................ 12
  - Indexes ............................................................................... 14
  - SQL Capabilities ............................................................... 15
  - SQL Extensions ................................................................. 16
  - High Availability ................................................................ 17
  - Performance / Scalability ............................................... 18
  - Security ............................................................................... 19
  - Integration .......................................................................... 21
  - Application Development .............................................. 22
  - Big / Unstructured Data .................................................. 26
  - Management .................................................................... 28
  - Incompatibilities .............................................................. 29
  - Deployment Options ...................................................... 30
- **Appendix A** .................................................................... 31
- **Appendix B** ..................................................................... 32
- **Appendix C** ..................................................................... 34

---

## Introduction

Organizations are increasingly adopting EDB Postgres Enterprise as a standard Relational Database Management System (RDBMS) for both new and existing applications. EDB Postgres Enterprise offers the performance, security, and manageability features necessary to support enterprise workloads, allowing organizations to reallocate funds previously spent on proprietary databases to new applications and digital transformation initiatives.

This is particularly beneficial for organizations using Oracle, as EDB Postgres Enterprise is compatible with Oracle. This compatibility enables:
- The use of EDB Postgres as a substitute for Oracle in new applications.
- The migration of existing Oracle applications while preserving investments in PL/SQL.
- Coexistence and integration with existing Oracle infrastructure.

This guide aims to help you evaluate EDB Postgres' capabilities and identify the workloads and applications where it can be used in place of Oracle.

---

## Notes on Compatibility with Oracle

Database administrators and application developers often ask, "Which version of Oracle are you compatible with?" EDB has developed database compatibility for Oracle based on popular features across multiple versions. EDB's goal is to create a critical mass of compatibility for the most frequently used features, enabling EDB Postgres Enterprise to support Oracle workloads and provide significant cost savings for a large portion, or even all, of an organization's Oracle footprint.

In selecting new features for each software release, EDB focuses on the most popular features that meet one or more of the following criteria:
- **Reduced Technical Risk**: Objects or code created in Oracle can be migrated and executed "as is" in EDB Postgres Advanced Server, producing identical results.
- **Reduced Re-Training Risk**: Knowledge, skills, and tools commonly used with Oracle can also be applied to EDB Postgres Advanced Server, significantly reducing the learning curve for creating new applications or migrating existing ones.
- **Reduced Integration Risk**: EDB Postgres Advanced Server can integrate well with existing Oracle infrastructure and non-database software that will be retained or cannot be changed in the foreseeable future.

---

## Tables Legend

- **YES / NO**: Denotes whether the feature or characteristic is supported in the database.
- **Oracle Compatible**: The feature operates in a manner compatible with Oracle, allowing users to continue using and/or migrate their existing Oracle skills, program code, or data.
- **EDB POSTGRES ENTERPRISE**: The subscription bundle for purchase that includes EDB Postgres Advanced Server and all mission-critical tools for management, high availability, replication, backup/recovery, etc.
- **EDB POSTGRES ADVANCED SERVER**: EDB’s database with Oracle compatibility and additional enterprise features for security and performance, built upon PostgreSQL and continuously merged with every major, minor, and security release.

---

## Evaluating EDB PostgresTM Enterprise

### General / Capabilities

When comparing Oracle’s database with EDB Postgres Advanced Server, prospective users should understand that both are mature, enterprise-class object-relational databases that meet industry standards for atomicity, consistency, isolation, and durability (ACID) compliance. Both products were developed from IBM’s original research on System R and are designed to solve similar problems, resulting in many similarities.

| **General / Capabilities** | **Oracle Enterprise** | **EDB Postgres Enterprise** |
|----------------------------|-----------------------|-----------------------------|
| **Design Origin** | Commercial implementation based on IBM’s original research for System R. | Academic implementation (UC Berkeley) based on IBM’s original research for System R. PostgreSQL development started in 1986. EPAS development started in 2004. |
| **Continuous Development Since** | 1979 | 1986 (PostgreSQL), 2004 (EPAS) |
| **Object-Relational Database** | Yes | Yes |
| **Processing Architecture** | Process Based and Thread Based | Process Based |
| **Full ACID Compliance** | Yes | Yes |
| **Multi-Version Concurrency Control** | Yes | Yes |
| **Multi-Tenant Architecture** | Yes | Yes |
| **Automatic Workload Management** | Yes | No |
| **Enterprise Database Management** | Oracle Enterprise Manager | EDB Postgres Enterprise Manager |
| **Multi-Core Support** | Yes | Yes |
| **Write Ahead Durability** | Redo Logs | Write Ahead Log |
| **Disk Read Buffering** | Yes | Yes |

### Terminology

Despite efforts to standardize SQL, there are still differences in nomenclature across SQL-based products. Some key differences are highlighted below.

| **Terminology** | **Oracle Enterprise** | **EDB Postgres Enterprise** |
|-----------------|-----------------------|-----------------------------|
| **Table or Index** | Table or Index | Table, Index, or Relation |
| **Row** | Row | Row or Tuple |
| **Column** | Column | Column or Attribute |
| **Data Block** | Data Block | Page (when block is on disk), Buffer (when block is in memory) |
| **Page** | Not applicable | Page (when block is in memory) |

Each instance of EDB Postgres Advanced Server is referred to as a “cluster.” A cluster consists of a data directory containing all data and configuration files and can be referenced by the location of the data directory or by port number. Multiple clusters can be created on a single server using the `initdb` command.

### Capacities

When considering a new database, DBAs and developers need to understand its capacity to support existing application data designs, workloads, and anticipated growth. This involves understanding how the new solution supports data across multiple structures within the database.

| **Capacities** | **Oracle Enterprise** | **EDB Postgres Enterprise** |
|---------------|-----------------------|-----------------------------|
| **Max. Database Size** | Unlimited | Unlimited |
| **Max. Table Size** | 4 GB x Block Size | 32 TB |
| **Max. Row Size** | 4 TB | 1.6 TB |
| **Max. Field Size (for BLOB)** | (4 GB - 1) x DB_BLOCK_SIZE | 1 GB |
| **Max. Rows per Table** | Unlimited | Unlimited |
| **Max. Columns per Table** | 1000 | Depending on column types (250-1600) |
| **Max. Indexes per Table** | Unlimited | Unlimited |

### Tables and Partitioning

The range of constructs within the database and the flexibility DBAs have in organizing these structures can impact performance, maintenance, and other operational requirements. Partitioning improves performance, and organizing data into distinct structures enhances manageability, availability, and load balancing. Materialized views allow DBAs to replace slow, resource-intensive runtime queries with faster reads from pre-joined, pre-sorted, and stored results.

| **Tables and Partitioning** | **Oracle Enterprise** | **EDB Postgres Enterprise** |
|-----------------------------|-----------------------|-----------------------------|
| **Temporary Tables** | Yes | Yes |
| **Views** | Yes | Yes |
| **Materialized Views** | Yes | Yes |
| **Partitioning** | Yes | Yes ✓ |
| **Partition by Range** | Yes | Yes ✓ |
| **Partition by Hash** | Yes | Yes ✓ |
| **Partition by List** | Yes | Yes ✓ |
| **Sub-Partitioning** | Yes | Yes ✓ |
| **Interval Partitioning** | Yes | No |
| **Partitioned Indexes** | Yes | No |
| **ANSI Constraints** | Yes | Yes |
| **Tablespaces** | Yes | Yes |
| **Index Organized Tables** | Yes | Can cluster a table by an index, providing similar performance boosts when reading data from a pre-sorted structure. |

### Data Types

Data types define how a DBMS interprets and uses information within the system. EDB Postgres Advanced Server has strong compatibility with Oracle data types and is highly extensible, allowing it to quickly support new and emerging data types and workloads.

| **Data Types** | **Oracle Enterprise** | **EDB Postgres Enterprise** |
|----------------|-----------------------|-----------------------------|
| **Type System** | Static + Dynamic (through ANYDATA) | Static |
| **Number** | ✓ | Also DEC, NUMERIC, SMALLINT (16-bit), INT, INTEGER, BINARY_INTEGER, PLS_INTEGER, INTEGER (32-bit), BIGINT (64-bit) |
| **Binary Float** | BINARY_FLOAT, BINARY_DOUBLE | BINARY_FLOAT, BINARY_DOUBLE, also FLOAT, REAL (32-bit), DOUBLE PRECISION (64-bit) |
| **Decimal** | NUMBER, DECIMAL | NUMBER, also DEC, DECIMAL, NUMERIC |
| **String** | CHAR, VARCHAR2, CLOB, NCLOB, NVARCHAR2, NCHAR | CHAR, VARCHAR2, CLOB, NCLOB, NVARCHAR2, NCHAR, also CHARACTER, TEXT, LONG (deprecated), CHAR VARYING, CHARACTER VARYING, VARCHAR |
| **Binary** | BLOB, RAW, LONG RAW, BFILE | BLOB, RAW, LONG RAW, also BYTEA (No compatible type for BFILE) |
| **Date/Time** | DATE, TIMESTAMP, INTERVAL | DATE, TIMESTAMP (with/without TIMEZONE), DATE/TIME (with/without TIMEZONE), INTERVAL, also TIME (with/without TIMEZONE) |
| **Boolean** | Not Available | BOOLEAN |
| **ROWID** | ROWID | ROWID |
| **XMLTYPE** | XMLTYPE | XMLTYPE |
| **Key-Value** | Requires NoSQLDB, which is a separate database program | Integrated into the core database, with 58 JSON operators, functions, and relational check constraint. Use VARCHAR2, CLOB, JSON, and BLOB with is_json functions and json converters. |
| **Spatial/Geospatial** | Yes | Yes |

---

For more information, please refer to the following resources:
- Download EDB Postgres Advanced Server and try it.
- Comparison of EDB PostgreSQL and EDB Postgres Advanced Server.
- Compatibility documentation: Database Compatibility for Oracle® Developer’s Guide v9.5.
- Contact EDB to meet with an EDB Sales Engineer skilled in Oracle.
- All documentation.
- For a detailed Total Cost of Ownership discussion, contact EDB.

**Copyright © EnterpriseDB Corporation, 2018. All Rights Reserved.**