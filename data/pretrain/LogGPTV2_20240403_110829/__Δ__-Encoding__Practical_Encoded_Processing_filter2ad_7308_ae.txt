### Performance and Fault Coverage of Δ-Encoded Programs

#### Table II: Quicksort’s Slowdown: Comparison of Approaches
| Approach         | Slowdown Factor |
|------------------|-----------------|
| Duplicated Instructions (DI) | 1.6             |
| Δ-stripped       | 2.1             |
| Δ-parallel       | 2.4             |
| Δ-full           | 4.4             |
| ANBD             | 16.0            |

Δ-encoded programs must be protected from all types of errors, including transient, intermittent, and permanent faults, as well as single-bit and multiple-bit faults, and single and multiple faults. Our experiments show that the Δ-encoding approach, specifically the Δ-full variant, achieves an average fault coverage of 99.997%.

We consider performance slowdowns of 3-4 times to be acceptable for our use cases. This is because safety-critical computations are typically limited in size and not resource-intensive. Additionally, a software-only encoded processing approach is inherently slower, and a slowdown of several times represents a significant improvement compared to previous works on AN-encoding.

### Performance Characteristics

#### Table III: Performance Characteristics
| Characteristic   | Bubblesort | HardCore | Industrial |
|------------------|------------|----------|------------|
| **Instructions/Cycle** |          |          |            |
| Native           | 2.26       | 2.70     | 2.82       |
| Δ-full           | 6.00       | 0.00     | 0.77       |
| Δ-parallel       | 1.25       | 1.78     | 1.46       |
| Δ-stripped       | 9.31       | 0.00     | 3.08       |
| **Branch Misses, %**  |          |          |            |
| Native           | 2.27       | 2.73     | 2.70       |
| Δ-full           | 4.82       | 0.00     | 1.02       |
| Δ-parallel       | 2.34       | 2.61     | 2.75       |
| Δ-stripped       | 6.14       | 0.00     | 0.92       |

Unfortunately, we were unable to obtain the implementations of AN-encoding [11] or duplicated instructions [15]. However, we can perform an indirect comparison using the mutual quicksort benchmark (see Table II). The duplicated instructions approach (DI) shows a slowdown of 1.6x in the best case [15], while the ANBD-variant of AN-encoding has a slowdown of 16x [11]. Δ-encoding demonstrates performance numbers closer to duplicated instructions, with slowdowns of 2-4x. This indicates that Δ-encoding outperforms previous AN-encoding techniques, adding only a moderate overhead on top of duplicate execution.

### Performance Optimization

Our approach leverages deep instruction pipelining, out-of-order execution, and sophisticated branch prediction in modern CPUs. These techniques enable effective scheduling of instructions. Typically, programs do not fully utilize the instruction pipeline and branch prediction. Δ-encoding takes advantage of this underutilization, allowing the two copies of data to be processed in parallel. As shown in Table III, the number of instructions per cycle roughly doubles in Δ-encoded programs, while the number of branch misses drops significantly. For example, in the HardCore benchmark, the branch predictor shows perfect results, with 0% branch misses even in native execution. These numbers demonstrate that Δ-encoding benefits from heavily utilized pipelines and branch predictors.

### Related Work

#### A. Hardware-Based Approaches

Hardware-implemented error detection is exemplified by the evolution of mainframe systems like IBM S/360 (now called IBM System z) and Tandem NonStop (now HP NonStop) [8]. These systems provide massive redundancy to achieve high availability, including lockstepped proprietary CPUs, redundant CPU logic, ECC-protected memory and caches, and redundant hardware components and paths. While these systems guarantee very high fault coverage, they come with very high economic costs. In contrast, Δ-encoding can be seen as a much cheaper alternative to harden only a small subset of the software stack on commodity hardware.

A cost-effective hardware approach is to use simple checkers that observe the activities of commodity hardware units and raise exceptions in case of errors. For example, the DIVA checker [27] commits CPU outputs only after verifying their correctness. Argus [28] implements four independent checkers to validate four CPU/memory tasks: control flow, data flow, computation, and memory accesses. Nostradamus [29] compares an instruction's expected impact on the CPU state to the actual impact. Although these approaches incur low performance overhead (5-10%), they require significant changes in hardware, whereas Δ-encoding is purely software-based and provides the same error detection guarantees.

Symptom-based detection (e.g., ReStore [30]) analyzes anomalous behavior of hardware such as memory access exceptions, mispredicted branches, and cache misses. However, this approach cannot offer adequate fault coverage required in safety-critical systems, detecting only about half of propagated faults.

#### B. Software-Based Approaches

Redundant Multithreading (RMT) [31] protects from transient faults by executing two copies of the program on two cores, periodically comparing their outputs. However, this technique assumes the existence of a spare core, which is not always available in embedded systems with single-core CPUs. In contrast, Δ-encoding requires only one core for computations.

The duplicated instructions approach, first proposed in EDDI [15] and later refined in SWIFT [16], executes the program flow twice on the same core. Both solutions focus on transient errors and favor performance over fault coverage. Moreover, SWIFT assumes ECC-protected memory, which does not hold for commodity and embedded hardware. ED4I [32], an offshoot of EDDI, combines data diversity and duplicated instructions to protect from permanent faults. However, ED4I was a theoretical attempt and was not evaluated for performance, whereas Δ-encoding is a complete and practical solution.

Encoded processing uses AN codes theory and was first used as a pure hardware approach, such as in the STAR computer designed for spacecrafts [33]. Forin [12] laid the foundations of software-implemented encoded processing, which was later extensively researched by Schiffel [11]. However, AN-encoding and its variants reveal an imbalance between fault coverage and performance: pure AN encoding has low fault coverage, while ANB- and ANBD-variants have low performance. Our proposed Δ-encoding provides a balance between these metrics.

### Conclusion and Future Work

We presented Δ-encoding, a fault detection mechanism that covers not only commonly assumed Single Event Upsets but also multiple-bit, intermittent, and permanent faults. To achieve high fault coverage, Δ-encoding combines two approaches: AN codes and duplicated instructions. Our evaluation shows that Δ-encoding achieves fault coverage of 99.997% at the cost of an average slowdown of 2-4 times.

Our first prototype is a source-to-source transformer. In future work, we plan to implement Δ-encoding as a compiler plug-in to perform sophisticated data flow analysis, remove redundant accumulations, and make the compiler Δ-encoding-aware.

Another direction of future work is a software-hardware Δ-encoding approach. Accumulations and checks can be moved out of the critical path and encapsulated in a separate hardware module. Δ-encoding could also benefit from additional instructions in the Instruction Set Architecture (ISA).

Recovery ability is another interesting implication of Δ-encoding. If a fault affects only one copy of data, it is detected via AN codes, and the second copy of data can be used to recover the first copy, masking the fault and allowing execution to continue. Such recovery schemes are part of our future plans.

We also envisage security-related applications of Δ-encoding. Data diversity and the ability to use different pairs of As for different parts of a program could enable protection against malicious attacks. We will investigate a combined approach offering both fault tolerance and security in our future work.

### Acknowledgment

The authors thank Oleksii Oleksenko for help with evaluation and Andreas Dixius for insightful suggestions. This work is partly supported by the German Research Foundation (DFG) within the Cluster of Excellence “Center for Advancing Electronics Dresden.”

### References

[1] S. Borkar, “Designing reliable systems from unreliable components: the challenges of transistor variability and degradation,” Micro, IEEE, vol. 25, no. 6, pp. 10–16, Nov 2005.

[2] B. Schroeder, E. Pinheiro, and W.-D. Weber, “DRAM errors in the wild: A large-scale field study,” in Proceedings of the Eleventh International Joint Conference on Measurement and Modeling of Computer Systems, ser. SIGMETRICS ’09. New York, NY, USA: ACM, 2009, pp. 193–204.

[3] Y. Kim, R. Daly, J. Kim, C. Fallin, J. H. Lee, D. Lee, C. Wilkerson, K. Lai, and O. Mutlu, “Flipping bits in memory without accessing them: An experimental study of DRAM disturbance errors,” in Computer Architecture (ISCA), 2014 ACM/IEEE 41st International Symposium, June 2014, pp. 361–372.

[4] E. B. Nightingale, J. R. Douceur, and V. Orgovan, “Cycles, cells and platters: An empirical analysis of hardware failures on a million consumer PCs,” Proceedings of EuroSys 2011, April 2011.

[5] M.-L. Li, P. Ramachandran, S. K. Sahoo, S. V. Adve, V. S. Adve, and Y. Zhou, “Understanding the propagation of hard errors to software and implications for resilient system design,” SIGOPS Operating Systems Review, vol. 42, no. 2, pp. 265–276, Mar. 2008.

[6] (2008) Amazon S3 availability event. //status.aws.amazon.com/s3-20080720.html

[7] (2011) 2009-11 Toyota vehicle recalls. //en.wikipedia.org/wiki/2009-11 Toyota vehicle recalls

[8] W. Bartlett and L. Spainhower, “Commercial fault tolerance: a tale of two systems,” Dependable and Secure Computing, IEEE Transactions on, vol. 1, no. 1, pp. 87–96, Jan 2004.

[9] (2014) Self-driving cars. http://www.intel.com/content/dam/www/public/us/en/documents/white-papers/automotive-autonomous-driving-vision-paper.pdf

[10] O. Goloubeva, M. Rebaudengo, M. Sonza Reorda, and M. Violante, Software-Implemented Hardware Fault Tolerance. Springer, 2006.

[11] U. Schiffel, “Hardware error detection using AN-codes,” Ph.D. dissertation, Technische Universität Dresden, 2011.

[12] P. Forin, “Vital coded microprocessor principles and application for various transit systems,” IFAC/IFIP/IFORS Symposium, 1989.

[13] D. T. Brown, “Error detecting and correcting binary codes for arithmetic operations,” Electronic Computers, IRE Transactions, vol. EC-9, no. 3, pp. 333–337, Sept 1960.

[14] U. Schiffel, A. Schmitt, M. Süsskraut, and C. Fetzer, “ANB- and ANBDmem-encoding: Detecting hardware errors in software,” in Computer Safety, Reliability, and Security, ser. Lecture Notes in Computer Science, E. Schoitsch, Ed., vol. 6351. Springer Berlin / Heidelberg, 2010, pp. 169–182.

[15] N. Oh, P. Shirvani, and E. McCluskey, “Error detection by duplicated instructions in super-scalar processors,” IEEE Transactions on Reliability, vol. 51, no. 1, pp. 63–75, Mar 2002.

[16] G. Reis, J. Chang, N. Vachharajani, R. Rangan, and D. August, “SWIFT: software implemented fault tolerance,” in International Symposium on Code Generation and Optimization (CGO), March 2005, pp. 243–254.

[17] G. Saggese, N. Wang, Z. Kalbarczyk, S. Patel, and R. Iyer, “An experimental study of soft errors in microprocessors,” Micro, IEEE, vol. 25, no. 6, pp. 30–39, Nov 2005.

[18] S. K. Reinhardt and S. S. Mukherjee, “Transient fault detection via simultaneous multithreading,” in Proceedings of the 27th Annual International Symposium on Computer Architecture, ser. ISCA ’00. New York, NY, USA: ACM, 2000, pp. 25–36.

[19] P. E. Ammann and J. C. Knight, “Data diversity: An approach to software fault tolerance,” IEEE Transactions on Computers, vol. 37, no. 4, pp. 418–425, Apr. 1988.

[20] Intel Corporation, Intel® 64 and IA-32 Architectures Optimization Reference Manual, September 2014, no. 248966-030.

[21] M. Rebaudengo, M. Reorda, M. Violante, and M. Torchiano, “A source-to-source compiler for generating dependable software,” in First IEEE International Workshop on Source Code Analysis and Manipulation, 2001, pp. 33–42.

[22] AMD Corporation, AMD64 Architecture Programmer’s Manual, September 2012, vol. System Programming, no. 248966-030.

[23] D. Brumley, T. Chiueh, R. Johnson, H. Lin, and D. Song, “RICH: Automatically protecting against integer-based vulnerabilities,” in Symposium on Network and Distributed Systems Security, 2007.

[24] EGAS Workgroup, Standardized E-Gas Monitoring Concept for Gasoline and Diesel Engine Control Units, Version 5.5 ed., July 2013.

[25] D. Behrens, D. Kuvaiskii, and C. Fetzer, “HardPaxos: Replication hardened against hardware errors,” in Proceedings of the 33rd IEEE Symposium on Reliable Distributed Systems (SRDS’14). IEEE, October 2014.

[26] M. R. Guthaus, J. S. Ringenberg, D. Ernst, T. M. Austin, T. Mudge, and R. B. Brown, “MiBench: A free, commercially representative embedded benchmark suite,” in Proceedings of the Workload Characterization, 2001. WWC-4. 2001 IEEE International Workshop, ser. WWC ’01. Washington, DC, USA: IEEE Computer Society, 2001, pp. 3–14.

[27] T. Austin, “DIVA: A dynamic approach to microprocessor verification,” Journal of Instruction-Level Parallelism, vol. 2, 2000.

[28] A. Meixner, M. Bauer, and D. Sorin, “Argus: Low-cost, comprehensive error detection in simple cores,” in 40th Annual IEEE/ACM International Symposium on Microarchitecture, 2007, Dec 2007, pp. 210–222.

[29] R. Nathan and D. Sorin, “Nostradamus: Low-cost hardware-only error detection for processor cores,” in Design, Automation and Test in Europe Conference and Exhibition (DATE), March 2014, pp. 1–6.

[30] N. Wang and S. Patel, “ReStore: symptom based soft error detection in microprocessors,” in International Conference on Dependable Systems and Networks (DSN), June 2005, pp. 30–39.

[31] S. S. Mukherjee, M. Kontz, and S. K. Reinhardt, “Detailed design and evaluation of redundant multithreading alternatives,” SIGARCH Computer Architecture News, vol. 30, no. 2, pp. 99–110, May 2002.

[32] N. Oh, S. Mitra, and E. McCluskey, “ED4I: error detection by diverse data and duplicated instructions,” IEEE Transactions on Computers, vol. 51, no. 2, pp. 180–199, Feb 2002.

[33] A. Avizienis, G. C. Gilley, F. P. Mathur, D. A. Rennels, J. A. Rohr, and D. K. Rubin, “The STAR (Self-Testing And Repairing) computer: An investigation of the theory and practice of fault-tolerant computer design,” IEEE Transactions on Computers, vol. 20, no. 11, pp. 1312–1321, Nov. 1971.