hash of a message. Hence, for common signature schemes, already
from the IA itself FWD is not able to extract the user’s email address.
In addition, SPRESSO even encrypts the IA to make sure that this
is the case no matter which signature scheme is used.
1362speciﬁc user logs in. (A malicious FWD could try to set cookies
and do browser ﬁngerprinting to the track the behavior of speciﬁc
browsers. Still it does not obtain the user’s email address.)
Now, as for enforcing honest FWDs, ﬁrst note that an honest
FWD server is supposed to always deliver the same ﬁxed JavaScript
to a user’s browsers. This JavaScript code is very short (about 50
lines of code). If this code is used, it is not only ensured that FWD
preserves authentication and privacy, but also that no tracking data
is sent back to the FWD server.
Using current technology, a user could use a browser extension
which again would be very simple and which would make sure that
in fact only this speciﬁc JavaScript is delivered by FWD (upon the
respective request). As a result, FWD would be forced to behave
honestly, without the user having to trust FWD. Another approach
would be an extension that replaces FWD completely, which could
also lead to a simpliﬁed protocol. In both cases, SPRESSO would
provide authentication and privacy without having to trust any FWD.
Both solutions have the common problem that they do not work
on all platforms, because not on all platforms browsers support
extensions. The ﬁrst solution (i.e., the extension checks only that
correct JavaScript is loaded) would at least still work for users on
such platforms, albeit with reduced security and privacy guarantees.
A native web technology called subresource integrity (SRI)7 is
currently under development at the W3C. SRI allows a document
to create an iframe with an attribute integrity that takes a hash value.
The browser now would guarantee that the document loaded into
the iframe hashes to exactly the given value. So, essentially the
creator of the iframe can enforce the iframe to be loaded with a
speciﬁc document. This would enable SPRESSO to automatically
check the integrity of FWDdoc without any extensions.
Referer Header and Privacy. The Referer [sic!] header is set
by browsers to show which page caused a navigation to another
page. It is set by all common browsers. To preserve privacy, when
the loading of IdPdoc is initiated by RPdoc, it is important that the
Referer header is not set, because it would contain RP’s domain, and
consequently, IdP would be able to read off from the Referer header
to which RP the user wants to log in, and hence, privacy would
be broken. With HTML5, a special attribute for links in HTML
was introduced, which causes the Referer header to be suppressed
(rel="noreferrer"). However, when such a link is used to open
a new window, the new window does not have a handle on the
opening window (opener) anymore. But having a handle is essential
for SPRESSO, as the postMessage in Step 21 is sent to the opener
window of IdPdoc. To preserve the opener handle while at the
same time hiding the referer, we ﬁrst open the new window with a
redirector document loaded from RP (Step 8 ) and then navigate this
window to IdPdoc (using a link with the noreferrer attribute set and
triggered by JavaScript in Step 11 ). This causes the Referer header
to be cleared, while the opener handle is preserved.8 Our formal
analysis implies that with this solution indeed privacy is preserved.
Cross-Site Request Forgery. Cross-site request forgery is particu-
larly critical at RP, where it could be used to log a user in under an
identity that is not her own. For RP, SPRESSO therefore employs
a session token that is not stored in a cookie, but only in the state
of the JavaScript, avoiding cross-origin and cross-domain cookie
attacks. Additionally, RP checks the Origin header of the login re-
7http://www.w3.org/TR/SRI/
8Another option would have been to use a data URI instead of
loading the redirector document from RPdoc and to use a Refresh
header contained in a meta tag for getting rid of the Referer header.
This however showed worse cross-browser compatibility, and the
Refresh header lacks standardization.
quest to make sure that no login can be triggered by a third party
(attacker) web page. Our formal analysis implies that cross-site
request forgery and related attacks are not possible in SPRESSO.
Phishing. It is important to notice that in SPRESSO the user can
verify the location and TLS certiﬁcate of IdPdoc’s window by check-
ing the location bar of her browser. The user can therefore check
where she enters her password, which would not be possible if IdP-
doc was loaded in an iframe. Setting strict transport security headers
can further help in avoiding phishing attacks.
Tag Length Side Channel. The length of the tag created in Step 6
depends on the length of RPDomain. Since the tag is given to IdP,
IdP might try to infer RPDomain from the length of the tag. How-
ever, according to RFC 1035, domain names may at most be 253
characters long. Therefore, by appropriate padding (e.g., encrypting
always nine 256 Bit plaintext blocks)9 the length of the tag will not
reveal any information about RPDomain.
Performance. SPRESSO uses only standard browser features, em-
ploys only symmetric encryption/decryption and signatures, and
requires (in a minimal implementation) eight HTTPS requests/re-
sponses — all of which pose no signiﬁcant performance overhead
to any modern web application, neither for the browser nor for any
of the servers. In our prototypical and unoptimized implementation,
a login process takes less than 400 ms plus the time for entering
email address and password.
Usability.
In SPRESSO, users are identiﬁed by their email ad-
dresses (an identiﬁer many users easily memorize) and email pro-
viders serve as identity providers. Many web applications today
already use the email address as the primary identiﬁer along with
a password for the speciﬁc web site: When a user signs up, a URL
with a secret token is sent to the user’s email address. The user has
to check her emails and click on the URL to conﬁrm that she has
control over the email address. She also has to create a password
for this web site. SPRESSO could seamlessly be integrated into
this sign up scheme and greatly simplify it: If the email provider
(IdP) of the user supports SPRESSO, an SPRESSO login ﬂow can
be launched directly once the user entered her email address and
clicked on the login button, avoiding the need for a new user pass-
word and the email conﬁrmation; and if the user is logged in at the
IdP already, the user does not even have to enter a password. Other-
wise, or if a user has JavaScript disabled, an automatic and seamless
fallback to the classical token-based approach is possible (as RP can
detect whether the IdP supports SPRESSO in Step 4 of the proto-
col). In contrast to other login systems, such as Google ID, the user
would not even have to decide whether to log in with SPRESSO
or not due to the described seamless integration of SPRESSO. Due
to the privacy guarantees (which other SSO systems do not have),
using SPRESSO would not be disadvantageous for the user as her
IdPs cannot track to which RPs the user logs in.
The above illustrates that, using SPRESSO, signing up to a web
site is very convenient: The user just enters her email address at the
RP’s web site and presses the login button (if already logged in at
the respective IdP, no password is necessary). Also, with SPRESSO
the user is free to use any of her email addresses.
Extendability. SPRESSO could be extended to have the IdP sign
(in addition to the email address) further user attributes in the IA,
which then might be used by the RP.
9Eight 256 bit blocks are sufﬁcient for all domain names. We
need an additional block for rpNonce.
1363Operating FWD. Operating an FWD is very cheap, as the only
task is to serve one static ﬁle. Any party can act as an FWD. Users
and RPs might feel most conﬁdent if an FWD is operated by widely
trusted non-proﬁt organizations, such as Mozilla or the EFF.
Comparison with BrowserID. BrowserID was the ﬁrst and so far
only SSO system designed to provide privacy (IdPs should not be
able to tell at which RPs user’s log in). Nonetheless, as already
mentioned (see Section 2.1), severe attacks were discovered in [11]
which show that the privacy promise of BrowserID is broken: not
only IdPs but even other parties can track the login behavior of users.
Regaining privacy would have required a major redesign of the sys-
tem, resulting in essentially a completely new system, as pointed out
in [11]. Also, BrowserID has the disadvantage that it relies on a sin-
gle trusted server (login.persona.org) which is quite complex,
with several server interactions necessary in every login process,
and most importantly, by design, gets full information about the lo-
gin behavior of users (the user’s email address and the RP at which
the user wants to log in).10 Finally, BrowserID is a rather complex
SSO system (with at least 64 network and inter-frame messages in a
typical login ﬂow11 compared to only 19 in SPRESSO). This com-
plexity implies that security vulnerability go unnoticed more easily.
In fact, several attacks on BrowserID breaking authentication and
privacy claims were discovered (see [10, 11]).
This is why we designed and built SPRESSO from scratch, rather
than trying to redesign BrowserID. The design of SPRESSO is in
fact very different to (and much slimmer than) the one of Brow-
serID. For example, except for HTTPS and signatures of IdPs,
SPRESSO uses only symmetric encryption, whereas in BrowserID,
users (user’s browsers) have to create public/private key pairs and
IdPs sign the user’s public keys. The entities in SPRESSO are dif-
ferent to those in BrowserID as well, e.g., SPRESSO does not rely
on the mentioned single, rather complex, and essentially omniscient
trusted party, resulting in a completely different protocol ﬂow.
3. WEB MODEL
Our formal security analysis of SPRESSO (presented in the next
sections) is based on the general Dolev-Yao style web model in [10].
As mentioned in the introduction, we changed some details in
this model to facilitate the deﬁnition of indistinguishability/privacy
properties (see Section 4). In particular, we simpliﬁed the handling
of nonces and removed non-deterministic choices wherever possi-
ble. Also, we added the HTTP Referer header and the HTML5
noreferrer attribute for links.
We only present a very brief version of the web model here. The
full model, including our changes, is provided in our technical re-
port [12].
3.1 Communication Model
The main entities in the communication model are atomic pro-
cesses, which are used to model web browsers, web servers, DNS
servers as well as web and network attackers. Each atomic process
listens to one or more (IP) addresses. A set of atomic processes
forms what is called a system. Atomic processes can communicate
10In SPRESSO, we require that FWD behaves honestly. In a
login process, however, the FWD server needs to provide only a
ﬁxed single and very simple JavaScript, no further server interaction
is necessary. Also, FWD does not get full information and RP
in every login process may choose any FWD it trusts. Moreover,
as discussed above, there are means to force FWD to provide the
expected JavaScript.
11Counting HTTP request and responses as well as postMes-
sages, leaving out any user requests for GUI elements or other
non-necessary resources.
via events, which consist of a message as well as a receiver and
a sender address. In every step of a run, one event is chosen non-
deterministically from the current “pool” of events and is delivered
to one of the atomic processes that listens to the receiver address
of that event. The atomic process can then process the event and
output new events, which are added to the pool of events, and so on.
More speciﬁcally, messages, processes, etc. are deﬁned as follows.
Terms, Messages and Events. As usual in Dolev-Yao models (see,
e.g., [1]), messages are expressed as formal terms over a signature.
The signature Σ for the terms and messages considered in the web
model contains, among others, constants (such as (IP) addresses,
ASCII strings, and nonces), sequence and projection symbols, and
further function symbols, including those for (a)symmetric encryp-
tion/decryption and digital signatures. Messages are deﬁned to be
ground terms (terms without variables). For example (see also
Section 2.2 where we already use the term notation to describe
messages), pub(k) denotes the public key which belongs to the
private key k. To provide another example of a message, in the
web model, an HTTP request is represented as a ground term con-
taining a nonce, a method (e.g., GET or POST), a domain name, a
path, URL parameters, request headers (such as Cookie), and a
message body. For instance, an HTTP GET request for the URL
http://example.com/show?p=1 is modeled as the term
r := (cid:104)HTTPReq,n1, GET, example.com, /show,(cid:104)(cid:104)p,1(cid:105)(cid:105),(cid:104)(cid:105),(cid:104)(cid:105)(cid:105) ,
where headers and body are empty. An HTTPS request for r is of the
form enca((cid:104)r,k(cid:48)(cid:105), pub(kexample.com)), where k(cid:48) is a fresh symmetric
key (a nonce) generated by the sender of the request (typically a
browser); the responder is supposed to use this key to encrypt the
response.
Events are terms of the form (cid:104)a, f ,m(cid:105) where a and f are re-
ceiver/sender (IP) addresses, and m is a message, for example, an
HTTP(S) message as above or a DNS request/response.
The equational theory associated with the signature Σ is deﬁned
as usual in Dolev-Yao models. The theory induces a congruence re-
lation ≡ on terms. It captures the meaning of the function symbols
in Σ. For instance, the equation in the equational theory which cap-
tures asymmetric decryption is deca(enca(x, pub(y)),y) = x. With
this, we have that, for example,
deca(enca((cid:104)r,k(cid:48)(cid:105), pub(kexample.com)),kexample.com) ≡ (cid:104)r,k(cid:48)(cid:105) ,
i.e., these two terms are equivalent w.r.t. the equational theory.
Atomic Processes, Systems and Runs. Atomic Dolev-Yao pro-
cesses, systems, and runs of systems are deﬁned as follows.
An atomic Dolev-Yao (DY) process is a tuple p = (I p,Z p,Rp,sp
0 )
where I p is the set of addresses the process listens to, Z p is a
0 ∈ Z p is an initial state, and Rp
set of states (formally, terms), sp
is a relation that takes an event and a state as input and (non-
deterministically) returns a new state and a sequence of events. This
relation models a computation step of the process, which upon re-
ceiving an event in a given state non-deterministically moves to a
new state and outputs a set of events. It is required that the events
and states in the output can be computed (more formally, derived
in the usual Dolev-Yao style) from the current input event and state.
We note that in [10] the deﬁnition of an atomic process also con-
tained a set of nonces which the process may use. Instead of such
a set, we now consider a global sequence of (unused) nonces and
new nonces chosen by an atomic process are taken from this global
sequence.
The so-called attacker process is an atomic DY process which
records all messages it receives and outputs all events it can possibly
derive from its recorded messages. Hence, an attacker process is
1364the maximally powerful DY process. It carries out all attacks any
DY process could possibly perform and is parametrized by the set
of sender addresses it may use. Attackers may corrupt other DY
processes (e.g., a browser).
A system is a set of atomic processes. A conﬁguration (S,E,N)
of this system consists of the current states of all atomic processes in
the system (S), the pool of waiting events (E, here formally modeled
as a sequence of events; in [10], the pool was modeled as a multiset),
and the mentioned sequence of unused nonces (N).
A run of a system for an initial sequence of events E0 is a se-
quence of conﬁgurations, where each conﬁguration (except for the
initial one) is obtained by delivering one of the waiting events of the
preceding conﬁguration to an atomic process p (which listens to the
receiver address of the event), which in turn performs a computation
step according to its relation Rp. The initial conﬁguration consists
of the initial states of the atomic processes, the sequence E0, and an
initial inﬁnite sequence of unused nonces.
Scripting Processes. The web model also deﬁnes scripting pro-
cesses, which model client-side scripting such as JavaScript.
A scripting process (or simply, a script) is deﬁned similarly to a
DY process. It is called by the browser in which it runs. The browser
provides it with state information s, and the script then, according
to its computation relation, outputs a term s(cid:48), which represents the
new internal state and some command which is interpreted by the
browser (see also below). Again, it is required that a script’s output
is derivable from its input.
Similarly to an attacker process, the so-called attacker script Ratt
may output everything that is derivable from the input.
3.2 Web System
A web system formalizes the web infrastructure and web appli-
cations. Formally, a web system is a tuple (W ,S , script,E0) with
the following components:
• The ﬁrst component, W , denotes a system (a set of DY processes
as deﬁned above) and contains honest processes, web attacker,
and network attacker processes. While a web attacker can listen
to and send messages from its own addresses only, a network