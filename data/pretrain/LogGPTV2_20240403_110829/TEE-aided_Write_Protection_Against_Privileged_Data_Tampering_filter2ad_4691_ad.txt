text ﬁles in the prototype for now), e.g., the age threshold,
version limit, maximum ﬁle size, scheduled interval, etc.
Moreover, the user can optionally conﬁgure certain checks
to be enforced in TEE for the purpose of anomaly detection,
e.g., ransomware maliciously triggered 100 versions of a
protected ﬁle. At each run, a report is generated securely in
TEE, e.g., showing a list of updated ﬁles.
The policies are sealed on the protected partition (can only
be unsealed inside TXT/SVM). A plaintext copy is left on
the unprotected partition for certain operations (e.g., scheduled
7
The construction goes as follows: any desktop/laptop/mo-
bile device serves as the front-end directly used by the user.
Through an account, the front-end is connected to a storage
back-end, which plays the role of the “original partition” in
our stand-alone setup, caching ﬁle updates. Eventually, an
Inuksuk-equipped backup server, which has the TXT/SVM-
capable CPU and chipset, as well as the SED (or more likely,
an SED array), is connected with the storage back-end. The
Inuksuk-server will periodically copy new/updated ﬁles from
the storage server, and become unavailable during this period,
which should not affect functionality, assuming the Inuksuk-
server is not used for other purposes. The storage back-end
and user devices remain available all the time.
Once deployed correctly, without
the high-entropy key
sealed in TPM, no remote attacker can turn off the write
protection and update/delete the protected ﬁles. Our threat
model now assumes that the remote attacker can infect the
storage and Inuksuk servers, in addition to user devices. As
before, only the uncommitted ﬁles remain vulnerable, and after
written to the Inuksuk protected storage, user ﬁles become
safe against any data modiﬁcation attacks. Content on the
Inuksuk-equipped server can be maintained by enterprise IT
administrators (e.g., for deleting old versions). The whole
process is transparent to end-users/employees, and the ﬁles
that need ransomware protection can be identiﬁed by enterprise
policies. In the case of home users, the storage back-end and
the Inuksuk-equipped server can physically reside on the same
NAS (Network Attached Storage) device, assuming certain
disruptions are tolerable.
V.
IMPLEMENTATION AND EVALUATION
We have implemented Inuksuk for Windows 7 non-PAE,
Windows 10 64-bit and Ubuntu 12.04. In this section, we
discuss important
technical considerations and choices, as
well as performance evaluation/issues during the prototype
implementation. Our techniques can also be useful for other
OS-less I/O intensive TXT/SVM applications. We perform our
development and testing on an Intel Core i7-2600 @3.40GHz
(and AMD FX-8350 8-Core @4.0 GHz), 16GB RAM, and
Seagate ST500LT025 SED disk. The performance numbers
are from the Intel machine. Also a few other computers are
used for debugging and cross-validation. As an estimate of
the TCB size, in addition to Flicker’s codebase (2012-06-
18, v0.7), Inuksuk adds 5190 LoC (in the PAL, which runs
in TXT/SVM, OS drivers excluded). Among this, fat_io_lib
contributed 1852 (for FAT32), followed by TCG Opal (1507)
and USB (1467). We used the tool LocMetrics [37] to count the
lines with some trivial manual effort. There are also additional
engineering-oriented technical details omitted here for brevity,
such as resource handsoff with the OS for secure user interface
(keyboard and display).
A. Porting and using Flicker for TXT/SVM sessions
Since Inuksuk’s secure ﬁle operations occur alongside the
user OS, a mechanism is required for jumping back and
forth between the trusted updater and the user OS. It can be
implemented as a device driver (in the user OS) dealing with
parameters, saving the current OS state, processing TXT/SVM
logic, and restoring the saved OS state when returned from the
trusted updater. Several such operations are already handled in
Fig. 2: System overview
updates based on an interval). Once in the trusted updater, the
unsealed copy of policy can be used to verify the action’s
correctness (e.g., manipulated interval outside).
Workﬂow. The generalized workﬂow of Inuksuk is as follows:
(a) At deployment time, a high-entropy secret is generated as
the SED password and sealed into TPM (can only be unsealed
in the genuine trusted updater). (b) The protected partition is
created with the SED write protection. The user also selects the
ﬁles to be protected, which are then copied to the protected par-
tition in the ﬁrst invocation of the updater. After the ﬁrst-time
copying, the user still interacts directly with her ﬁles on the
original partition. (c) In everyday use, the protected partition
is never touched (except for read-only access). As with certain
cloud storage services, we use an icon on the original ﬁles to
indicate which ones are under the protection of Inuksuk. (d) If
the user adds or updates ﬁles on the original partition and is
ready to commit her changes, she triggers the trusted updater,
and without involving her to verify, changes are committed as
new ﬁles/versions on the protected partition. The updater is
triggered either manually, or automatically, e.g., via scheduled
tasks, when the updating-application is closed, or when the
system is restarting or shutting down. (e) When the user wants
to delete ﬁles or old ﬁle-versions, she can manually trigger the
updater to open a mini ﬁle browser, and make the selections.
F. Network-based data vault
The functionality of Inuksuk does not rely on any third par-
ties (except the device manufacturer), as the trust is anchored in
hardware/ﬁrmware and all its components are local. Although
our explanation of Inuksuk is based on its stand-alone mode,
there is no fundamental barrier in the design for it to be
deployed as a remote/networked data vault. To provide users
with a centralized network-based mode, as well as extending
for enterprise and cloud storage services, we brieﬂy explore a
variant of Inuksuk where the key components, i.e., TXT/SVM
CPU, TPM and SED, are shifted to a network location, forming
a remote service. Users’ data will remain protected at a central,
Inuksuk-backed storage service, and users can keep using any
device of their choice (i.e., with or without TEE, mobile
or desktop, at home or in an enterprise). We believe that
this variant can be used to protect security-sensitive/user ﬁles
stored in cloud storage services like Dropbox and OneDrive,
or enterprise storage services. Although such services are
possibly backed by robust backup measures and strict security
policies/tools, if infected, consequences can be high.
8
FirmwareCPU and chipsetTXT/SVMOS kernel and device driversFlickerTPMSEDInuksuk Updater Browser APP1APP2Flicker and Inuksuk servicesuntrustedtrustedTXT/SVM coverageprotected  partition(s)APP3system and other partitions OPAL SED interface...APPnATAPasswordFlicker [42] (also refer to Section II), which we use as the
base of our prototype.
Flicker supports only 32-bit non-PAE Linux and Windows
7 OSes (no update since 2012), which is a limitation for our
prototype with modern 64-bit systems. We thus port Flicker to
the latest Windows 10 64-bit, which may beneﬁt the commu-
nity for other in-OS secure processing with device I/O, or when
the exclusive processing environment of TXT/SVM is desired
(as opposed to other TEEs such as SGX and TrustZone).
Similar to the 32-bit Flicker, our adaptation, especially for
context saving/restoring, is also mostly based on heuristics,
as the available Intel/AMD documentation does not specify
what is preserved or affected by TXT/SVM. Here, we omit
the technical challenges for this porting, for example, the 4-
level unity page table covering both physical and virtual, 32-
bit and 64-bit addresses; 64-bit context saving/restoring; the
discontinued inline assembly, etc. Note that this process is far
more complex than adapting user-space applications or kernel
drivers/modules for 64-bit.
B. Opal access to SED inside TXT
All software outside TXT/SVM, including the OS and all
its device drivers, is untrusted in Inuksuk. However, inside the
TXT/SVM environment, there is no run-time device support,
i.e., devices including any SED drive cannot be accessed
by default. Therefore, we must implement standalone (and
preferably lightweight, to limit the TCB size) custom driver
for accessing SED devices inside TXT/SVM. Various SED
protocols rely eventually on the SATA interface (ATA Com-
mand Set [65]), with two options to choose from: 1) ATA
Security password [62] (e.g., prompted in BIOS at bootup). In
this option, SEDs only differ with regular hard drives in that
user data is encrypted on the media. 2) Dedicated security
protocols (e.g., Seagate DriveTrust [56], IEEE 1667 [25] and
Microsoft eDrive (all based on TCG Opal/Opal2 [67]). They
implement support for multiple roles/users corresponding to
multiple ranges, with separate passwords for write/read access.
Granularity in both protection ranges, and separate read-
/write permissions is important in our design. The same drive
can host both protected and unprotected partitions (which
cannot be achieved in Option 1). Thus Option 2 is more suited
for our needs, and we choose to use TCG Opal to communicate
with SED, as it is an open standard and widely supported by
most devices. Actually, with TCG Opal we can deﬁne multiple
ranges (corresponding to partitions) protected by different se-
crets. Then these secrets can be sealed with different programs
(e.g., the updater is one) thus reducing the risk of exposing
all protected data altogether as in a single point of failure.
We leave this as future work. Note that Opal is merely the
payload security protocol (SFSC) of the carrying interface, be
it SATA or NVMe; NVMe supports two variants of TCG Opal,
Opalite and Pyrite [68]. We anticipate that supporting NVMe
(for higher performance) may require only trivial changes.
A few open-sourced tools can manipulate SED devices with
OS support (in addition to proprietary tools for vendor-speciﬁc
protocols); we have tested msed [53] (now merged into DTA
sedutil [15]) and topaz-alpha [3]. They mainly rely on the
I/O support from the OS, e.g., SCSI Generic I/O, in the ATA
passthrough mode. However, our TXT/SVM PAL is OS-less
with no run-time support. We decide to port functions from
topaz-alpha [3] as needed. The porting process faces several
engineering challenges, which we omit here for brevity.
C. File system efﬁciency
We handle updates to the protected partition at ﬁle-level
instead of raw sectors (see Section IV). This requires at
least basic ﬁle system functionalities implemented within TX-
T/SVM. To avoid rework, we tested several libraries, including
fat_io_lib [1], ThinFAT32 [61], fedit [18], efsl [80], etc. FAT32
projects that are tightly coupled with external dependencies
are excluded (e.g., the mainstream FAT32 support with Linux
VFS inodes). But none satisﬁes both the two necessary
features: 1) Buffering support. Usually, FAT32 access is sector-
wise, while DMA requests need to handle as many sectors
as possible to reduce per-request overhead. PIO access is not
affected but it is by nature slow. Note that hardcoded pre-
fetching for reads is an overkill (reading data never needed),
and hardcoded write buffer will hang (waiting for enough num-
ber of sectors). 2) Multi-cluster support for space allocation.
At the ﬁle creation time, and when a ﬁle grows in size, FAT32
must traverse all clusters to ﬁnd free clusters to be appended
to the cluster chain of the ﬁle. Interestingly, with all FAT32
projects we tested, only one cluster is allowed to be added (we
do not see any performance problem for allowing multiple).
Therefore, for a 50MB ﬁle taking 6400 clusters (8KB cluster-
size) and the partition having 131072 free clusters (1GB), it
takes more than 800 million iterations.
We choose fat_io_lib for adaptation, because of its good
buffering performance. To add multi-cluster support, for each
iteration, we start with the cluster where we left off, instead
of the ﬁrst cluster of the partition. We emphasize that Inuksuk
is not dependent on any speciﬁc ﬁle system, and thus FAT32
can be replaced with a more efﬁcient one.
D. Discussion on DMA inside TXT
The necessity for Direct Memory Access (DMA)
is
ubiquitous, even for a light-weight program like the Inuksuk
updater. For instance, USB keyboards are the defacto norm.
Unlike other simpler protocols, the controller (e.g., EHCI [70])
requires several host-allocated buffers in the main memory
(DMA chunks) for basic communication with the host (e.g.,
the periodic frame list). The controller accesses the buffers
without the CPU’s intervention, hence, direct memory access.
Also, for data transfer to/from the hard drive (e.g., SED),
The theoretical speed of ATA PIO modes [6] is very low.
Taking into account the ﬁle system overhead, it needs 3–4
minutes to write a 100MB ﬁle, which is unacceptable from
the user-experience perspective. In modern systems, DMA is
usually enabled for disk access.
However, the fundamental protection of TXT (like all other
TEEs) must prevent autonomous access from peripherals for
the protected regions. The MLE (Measured Launch Environ-
ment, speciﬁc to Intel TXT) memory is included in either the
DMA Protected Range (DPR) or Protected Memory Regions
(PMRs), which is mandatory (cf. [26]). Consequently, since
we cannot (and do not want to) exclude the MLE from DMA
protection, we have to allocate the DMA chunks outside. In our
speciﬁc case where physical attacks are excluded and no other
9
50MB ﬁle
500KB ﬁle
Mean
SD
Mean
SD
Write/Existing Write/New
43.93
3.40
26.46
1.18
41.69
0.31
8.09
0.43
Read
32.17
0.09
16.67
5.26
OS
68.77
Penalty
53%
14.29
43%
TABLE I: File transfer performance (MB/s) in the trusted
updater from 10 measurements. For small ﬁles (e.g., 500KB),
other overhead predominates the transfer time.
50MB represents common media ﬁles and 500KB represents
miscellaneous ﬁles of trivial sizes. Note that without our adap-
tation to enable multi-cluster allocation support, the creation
of a 50MB ﬁle can be done only between 0.5–1MB/s, while