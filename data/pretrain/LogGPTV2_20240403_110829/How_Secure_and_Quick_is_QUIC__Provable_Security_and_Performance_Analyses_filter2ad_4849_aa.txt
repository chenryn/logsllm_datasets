# Title: How Secure and Quick is QUIC? Provable Security and Performance Analyses

## Authors:
- Robert Lychev, MIT Lincoln Laboratory
- Samuel Jero, Purdue University
- Alexandra Boldyreva, Georgia Institute of Technology
- Cristina Nita-Rotaru, Purdue University

## Abstract
QUIC, a secure transport protocol developed by Google and implemented in Chrome in 2013, aims to reduce latency while providing security properties similar to TLS. This paper provides a detailed analysis of QUIC's provable security and performance guarantees in the presence of attackers. We introduce a security model for performance-driven protocols like QUIC and prove that QUIC satisfies our definition under reasonable assumptions about its building blocks. However, we find that QUIC does not provide the traditional notion of forward secrecy, as seen in some modes of TLS (e.g., TLS-DHE). Our analysis also reveals that simple bit-flipping and replay attacks on public parameters exchanged during the handshake can prevent QUIC from achieving its minimal latency advantages. These attacks can cause QUIC to fall back to TCP or result in inconsistent handshake views, leading to connection failures. We demonstrate the practicality of these attacks through implementation. Our results highlight a trade-off between minimizing latency and providing strong security guarantees.

## I. Introduction
The proliferation of mobile and web applications has exposed the limitations of current transport protocols, such as TLS, which have high connection establishment latencies. This has led to user dissatisfaction and financial losses. Several efforts have focused on designing new transport protocols with low latency as a major goal, while maintaining basic security features like confidentiality, authentication, and integrity. One of the most promising protocols is QUIC, developed by Google and implemented in Chrome in 2013. QUIC integrates ideas from TCP, TLS, and DTLS to provide comparable security, congestion control, and minimal round-trip costs during setup and resumption. Key differences from TLS include eliminating redundant communication by not relying on TCP and using initial keys for faster connection establishment. However, the exact security and performance benefits and drawbacks of QUIC compared to existing protocols are not well understood. This paper aims to address this gap.

### Contributions
- **Security Model for QC Protocols**: We introduce a security model suitable for a general class of performance-driven communication protocols, including QUIC and TLS 1.3.
- **Provable-Security Analysis**: We analyze QUIC's cryptographic core and prove it satisfies our security model under certain assumptions.
- **Performance Analysis**: We evaluate QUIC's performance in adversarial settings and demonstrate practical attacks.
- **Practical Attacks**: We implement and demonstrate the effectiveness of five attacks against QUIC, highlighting the trade-offs between minimizing latency and ensuring security.

## II. Concurrent and Independent Work
Fischlin and G¨unter [11] analyzed the key exchange of QUIC, showing it satisfies a reasonable notion of security. However, their work does not address the entire protocol, and the proposed modifications do not fully resolve the composition issues. Our analysis captures more accurately the current implementation of QUIC and practical threats, including packet-level attacks and IP spoofing.

## III. Preliminaries
### Notation and Conventions
- \(\{0, 1\}^*\) denotes the set of all binary strings of finite length.
- If \(x, y\) are strings, \((x, y)\) denotes their concatenation.
- If \(\kappa \in \mathbb{N}\), \(1^\kappa\) denotes a string of \(\kappa\) consecutive "1" bits.
- If \(S\) is a finite set, \(s \leftarrow S\) denotes that \(s\) is selected uniformly at random from \(S\).
- All algorithms are assumed to be randomized and efficient (polynomial in the size of the input).
- For any \(n \in \mathbb{N}\), \([n]\) denotes the set \(\{1, \ldots, n\}\).

### Public Key Infrastructure (PKI)
We assume a PKI is in place, with valid public keys bound to users' identities and publicly known. Certificates and certificate checking are omitted for simplicity.

### Base Primitives and Assumptions
#### Digital Signature Scheme
A digital signature scheme \(\mathcal{SS} = (\text{Kg}, \text{Sign}, \text{Ver})\) with message space \(\text{MsgSp}\) is defined by three algorithms:
- **Key Generation (Kg)**: Generates a key pair \((\text{sk}, \text{pk})\).
- **Signing (Sign)**: Takes a secret key \(\text{sk}\) and a message \(m \in \text{MsgSp}\) to produce a signature \(\sigma\).
- **Verification (Ver)**: Takes a public key \(\text{pk}\), a message \(m\), and a signature \(\sigma\) to verify the authenticity of \(m\).

## IV. Security Model for QC Protocols
We introduce a security model for Quick Communications (QC) protocols, which includes QUIC and TLS 1.3. The model extends the Authenticated and Confidential Channel Establishment (ACCE) model to handle multiple session keys and data exchange under different keys. We consider a powerful adversary who can initiate and observe communications, intercept, drop, misorder, or modify packets, and perform DoS attacks. The model ensures that parties can establish and use session keys with privacy and integrity, even in the presence of such adversaries.

## V. Provable-Security Analysis of QUIC
We analyze the cryptographic core of QUIC and prove it satisfies our QACCE model under the following assumptions:
- Strong unforgeability of the underlying signature scheme.
- Security of the symmetric authenticated encryption scheme.
- Strong Difﬁe-Hellman assumption in the random oracle model.

## VI. Performance Analysis
We evaluate QUIC's performance in adversarial settings and demonstrate that the mechanisms used to minimize latency can be exploited by attackers. We implement five attacks, four of which prevent connection establishment and one of which is a DoS attack. These attacks are easy to implement and highly effective, often forcing clients to wait for QUIC's ten-second timeout.

## VII. Discussion
Our results suggest that the techniques QUIC uses to minimize latency may not be robust against malicious parties. While these weaknesses are not unexpected, they are significant concerns for the QUIC team, who are developing monitoring infrastructure to address them. However, there may be fundamental limitations to effectively mitigating these weaknesses. Despite these challenges, QUIC's performance is generally better than TLS in the absence of adversaries.

## VIII. Future Directions
Future work could explore machine-checked or automatically-generated proofs for performance-oriented protocols like QUIC and TLS 1.3 using systems like Coq, CryptoVerif, EasyCrypt, or the type system by Fournet et al. These tools could help ensure the security and performance of such protocols.

## IX. Conclusion
This study provides a comprehensive analysis of QUIC's security and performance, confirming the soundness of its design while detailing its strengths and weaknesses. Our findings highlight the trade-offs between minimizing latency and providing strong security guarantees, which practitioners should consider when deploying or improving QUIC and other performance-driven protocols.