might be a bit-string of all zeroes having the same length as some other message, the
length of this other message may depend on the security parameter.
The message constructors (key generation, tupling, encryption, constant and ran-
dom number generation) tag the constructed message with the name of that constructor
(the adversary is obviously free to generate all possible messages). When we said
that projection, encryption and decryption may become stuck if certain values do not
have the right type, then we meant that the tag of that value is checked before actually
executing the statement.
We assume that in a protocol, each variable occurs at most once at the left side of
an assignment. Let Varsent be the set of all variables x, such that the statement send x
occurs in the protocol.
Currently a shortcoming of our work is its inability to handle replication, i.e. we
can only analyse bounded number of protocol instances running simultaneously. The
difﬁculties in analysing arbitrary number of instances lay in the area of static analysis,
not in the area of cryptography (in constructing new protocols, we have to keep track
of all produced values, if we have no loops then this is simpler because each produced
value has a unique name). The program language itself is quite minimalistic too, but
7
extending it (for example, with exception handling) should not be overly difﬁcult. The
expressiveness of the presented language is rather similar to strand spaces [33].
There are some more statements that do not occur in the original protocols given
to our analysis, but may occur in the transformed protocols. Let Sem be a set of
semaphores. The statements signal (s) and wait (s) (here s ∈ Sem) implement a
simple synchronisation primitive — the statement signal (s) records that the semaphore
s has been passed and the statement wait (s) checks whether s has been passed and
becomes stuck, if this is not the case. Each semaphore s may occur at most once in the
statement signal (s). The intermediate protocols may also contain a case-statement of
the form
w := case z of
x1 → y1
. . . . . . . .
xn → yn
(4)
with the obvious semantics. Here w, z, xi, yi ∈ Var. (Neither the initial nor the ﬁnal
protocols contain the case-statement, only the intermediate ones.)
Let Parts be the set of (the names of) protocol participants. The protocol ℘ now is
a function mapping each element of Parts ˙∪{pre} to a program. If A ∈ Parts, then
℘(A) is the program executed by the participant A. The protocol also has a “prelude”
℘(pre). It is executed before the rest of the protocol. It is used for initialising the long-
term secrets before the “real protocol” starts. Let Parts′ denote the set Parts ˙∪{pre}.
We demand that none of the programs ℘(A), where A ∈ Parts′, is empty.
The protocol runs in parallel to the adversary. The adversary relays the messages
between protocol participants. The adversary also schedules the participants; by letting
the adversary do the scheduling we have removed the possible non-determinism (as
opposed to probabilism; the semantics of statements is obviously probabilistic) arising
from the parallel execution of participants. Overall, the computation is rather similar
to [12].
Let ASt be the set of all possible internal states of the adversary; the set ASt is
(isomorphic to) some subset of Σ. If the security parameter has been set to n, then
the adversary A(1n, . . .) implements a probabilistic function An from Σ⊥ × ASt to
Σ × Parts′ × ASt; the running time of A(1n) must be polynomial in n. Here X⊥
denotes the set X ˙∪{⊥}. Here the ﬁrst argument to An is the message that has been
sent by some participant at the latest moment (if any). The ﬁrst return value of An is
the message received by a protocol party executing x := receive at the next moment;
the second return value is the name of the protocol participant that executes next.
We will now give a precise description of the execution of the protocol ℘. During
its run, the values will be assigned to some or all of the variables. A variable M ∈ Var
already has the value before the execution of the rest of the protocol — it is the variable
containing the secret message. Other variables get their values during the run of the
protocol. Let (K, E, D) be a ﬁxed secure encryption system. Let p be a polynomial and
let τ be an efﬁciently computable injective function from Σ × Σ to Σ, such that τ −1
is also efﬁciently computable. Let ciphertext, key, tuple, random, secret and const be
ﬁxed bit-strings. The running of the protocol ℘ together with the adversary A proceeds
as follows.
Initialisation. Some auxiliary variables are necessary for the description of running
the protocol.
• The variable sm contains the message that is about to be sent out. We initialise
this to ⊥ (i.e. in the beginning, there is no message waiting).
8
• The variable rm contains the message that has been received from the network
(i.e. the adversary). We initialise this to ε (the empty bit-string).
• The programs P(A), where A ∈ Parts′ contain the yet unexecuted parts of the
programs. We initialise P(A) with ℘(A).
• The ﬂags rA ∈ {true, false}, where A ∈ Parts′ indicate whether the participant
A is still running or it has become stuck. We initialise them with true.
• AS is the internal state of the adversary. We initialise it with ε.
• C is the participant that is about to execute the next statement. We initialise it
with pre.
• For all variables x ∈ Var occurring in ℘, the ﬂag ix shows whether this variable
has been already initialised. We initialise iM with true and the rest with false.
• For all variables x ∈ Var occurring in ℘, their value is recorded in vx. We
initialise vM with the value of τ applied to secret and the secret message and
leave the rest of vx uninitialised.
• For all semaphores s occurring in ℘, the ﬂag ps shows whether this semaphore
has been passed. We initialise these ﬂags to false.
We call the sequence of all these values an execution state. We denote the components
of an execution state E by E[sm], E[rm], E[AS ], etc. Let ExcSt be the set of all
execution states.
Step. A step describes the execution of one statement of one program of the proto-
col. The running of the protocol consists of executing the steps until the instruction to
stop the execution has been reached. During a step, the following substeps are done:
1. Consider C. If one of the following conditions is true then stop the execution of
the protocol.
• P(C) is an empty sequence of statements.
• C 6= pre and P(pre) is not an empty sequence of statements.
2. Let S be the ﬁrst statement of P(C) and let P(C) be the rest of P(C).
3. If rC is false (i.e. the participant C is stuck), then set sm to ⊥ and continue with
substep 5.
4. Consider the statement S. If it is not send then set sm to ⊥. If it is not a case-
statement and ix is false for any variable whose value is used by that statement
then set rC to false and continue with substep 5. Otherwise,
• If S is k := gen key, then invoke r := K(1n) and set vk to τ (key, r).
Also, set ik to true.
• If S is y := (x1, . . . , xm) then set vy to
τ (τ (tuple, m), τ (vx1 , τ (· · · τ (vxm−1 , vxm)) · · · )
and iy to true.
9
• If S is x := πm
i (y), then parse vy as:
(t, z0)
(x1, z1)
(x2, z2)
:= τ −1(y)
:= τ −1(z0)
:= τ −1(z1)
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
:= τ −1(zm−2)
(xm−1, zm−1)
and set xm = zm−1. If one of the following conditions holds then set rC
to false:
– Some invocation of τ −1 fails.
– t 6= τ (tuple, m).
– xi is not properly tagged — when τ −1 is applied to it then the ﬁrst
component of the result is not one of ciphertext, key, random, secret,
const or τ (tuple, m′) for some m′ ∈ N.
Otherwise set vx to xi and ix to true.
• If S is x := encr k(y) then parse vk as (t, k) := τ −1(vk). If the invocation
of τ −1 fails or t is not key then set rC to false. Otherwise invoke r :=
E(1n, k, vy) and set vx to τ (ciphertext, r). Also, set ix to true.
• If S is y := decr k(x) then parse vk as (tk, k) := τ −1(vk) and vx as
(tx, x) := τ −1(vx). If some invocation of τ −1 fails or tk is not key or tx is
not ciphertext then set rC to false. Otherwise invoke r := D(1n, k, x). If
the invocation fails or r is not properly tagged then set rC to false. Other-
wise set vy to r and iy to true.
• If S is x := random then let r be a uniformly randomly generated bit-
string of length p(n). Set vx to τ (random, r) and ix to true.
• If S is x := constant(b) then set vx to τ (const, b) and ix to true.
• If S is send x then set sm to vx.
• If S is x := receiveℓ then check whether rm is properly tagged and
whether |rm| = ℓ(n). If yes, then set vx to rm and ix to true, otherwise
set rC to false.
• If S is check(x = y) and vx 6= vy then set rC to false.
• If S is x := y then set ix to true and vx to vy.
• If S is signal (s) then set ps to true.
• If S is wait (s) then check whether ps is true. If not then set rC to false.
• If S is a case-statement of the form (4) and iz is false then set rC to false.
Otherwise ﬁnd the ﬁrst index j, such that ixj is true and vz = vxj . If there
is no such j or if iyj is false then set rC to false. Otherwise set vw to vyj
and iw to true.
5. If rpre is false then stop the execution of the protocol.
6. Invoke the adversary:
(rm, C, AS ) := An(sm, AS ) .
10
The steps deﬁne a probabilistic transition system (for each value of the security
parameter n) on the set of execution states. Probabilistic effects are introduced ﬁrst by
the invocation of the adversary, which may employ random coin-tosses, and second by
certain statements of the protocol (generation of random numbers and new keys and
encryption). For all E, E′ ∈ ExcSt there is a certain probability that the execution
transitions from the state E to the state E′ in one step. The sum (over E′) of all these
probabilities is at most 1, if its less than 1, then there is non-zero probability that E is
the ﬁnal state (i.e. execution is stopped in state E). The probabilistic transition system
deﬁnes certain probability distribution over the set ExcSt, to each E we assign the
probability that the execution of ℘ together with the adversary A ends in that state. We
call that probability distribution the semantics of ℘ together with A and denote it by
[[℘, A]]n.
Sometimes we want to talk about ﬁxing the random choices made by the protocol.
Let R be the set of all possible random choices made the adversary and the statements
of the protocol during the execution. We are now going to describe the structure of the
elements of R.
For all A ∈ Parts′, let lA be the length of the program ℘(A). Let L℘ be the
following set:
L℘ = {(A, i) | A ∈ Parts′, 1 ≤ i ≤ lA} .
(5)
An element r of R is a mapping from (L℘ × {p, a}) ˙∪{M } to Σ. Here r(M ) describes
the results of random choices that led to ﬁxing the secret value M . The value r(A, i, p)
contains the random coins used by the i-th statement of the participant A and the value
r(A, i, a) contains the random coins used by the adversary right after the execution of
the i-th statement of the participant A.
Fixing the random choices gives us a (plain) transition system on the set of execu-
tion traces. We denote these transitions (for a ﬁxed r ∈ R) by r−→. Later, this gives us
the possibility to talk about two executions of the protocol going in lock-step.
When we have some objects that use random coin-tosses and we want to talk about
their value once we have ﬁxed these tosses, then we denote the resulting value by
n is the ﬁnal execution state
superscripting it with these tosses. For example, [[℘, A]]r
that we get for the security parameter n and the random coin-tosses r.
Let us make some more remarks about the execution of protocols. Our use of the
word “protocol” encompasses not only the “real” protocols — the inputs to the analysis,
but also the results of their transformation. Some intuitive assumptions no longer hold
for the transformed protocols and the following remarks attempt to point them out.
• The variables are shared among all participants of the protocol. I.e. there may
be variables that are deﬁned by one participant and subsequently used by others.
It is possible that the adversary has scheduled the participants in such a way
that a participant attempts to use a variable whose value has not yet been set.
This is the reason to keep track of the initialisation of variables. Obviously, in
“real” protocols, such sharing does not occur. The transformed protocols are
not intended to be actually realised as protocols (where the participants are in
physically different locations), they are merely an analysis tool.
5.1 An example
Consider the Needham-Schroeder key exchange protocol (using secret-key encryp-
tion), followed by a transmission of the secret message, encrypted with the new key:
11
Protocol prelude
KAS := gen key(1)
KBS := gen key(2)
A := constant(0)
B := constant(1)
the program for A
the program for S
the program for B
A := random(3)
N A
send (A, B, N A
A )
2 := receive(4)
mA
2 := decr KAS (mA
dmA
2 )
check(N A
1 (dmA
2 ))
send π4
K A
aM := encr KA
send aM
3(dmA
2 )
(M )(5)
AB := π4
4(dmA
2 )
A = π4
AB
3(m1)
A := π3
m1 := receiveℓ1 (6)
N S
KAB := gen key(7)
df b := (KAB, A)
f b := encr KBS (df b)(8)
df a := (N S
f a := encr KAS (df a)(9)
send f a
A , B, KAB, f b)
m3 := receive(10)
dm3 := decr KBS (m3)
K B
m4 := receive(11)
bM := decr KB
AB := π2
1(m3)
(m4)
AB
Figure 2: Example protocol in our language
A −→ S : A, B, NA
S −→ A : encr KAS (NA, B, KAB, encr KBS (KAB, A))
A −→ B : encr KBS (KAB, A)
A −→ B : encr KAB (M )
Fig. 2 gives the same protocol in the programming language we introduced in Sec. 5.
For brevity, we have combined some calculations. The superscripts at some statements
are statement labels. They are used in Sec. 7.
If we want to consider simultaneously more than one run of the protocol (to ﬁnd
man-in-the-middle attacks) then we include the program for each participant several
times — the number of times corresponds to the number of instances that participant is
supposed to take part in. Each instance also reﬂects participant’s role in that instance
(initiator, responder, etc.) and intended communications partners. Different instances
use different variables.
If the adversary may also pose as a legitimate protocol participant E and therefore
has some long-term key KES shared with the server S then the fragment KES :=
gen key; send KES has to occur in the protocol prelude. If the adversary itself can
choose the key KES then just the statement KES := receive has to occur in the
prelude.
6 Security deﬁnition
M ∈ Var is the variable containing the secret message (the approach can be easily
extended to several secret variables). The view of the adversary is its ﬁnal state. The
protocol is secure, if for all possible adversaries, the view of the adversary is indepen-
dent [35] of the secret message. The independence of the secret message and the view
of the adversary means
{|(E[vM ], E[AS]) : E ← [[P, A]]n|}n ≈
{|(E′[vM ], E[AS]) : E, E′ ← [[P, A]]n|}n .
(6)
12
Security deﬁnitions based on independence are common in language-based security
[25, 26]. They mean that everything the adversary deduces about the secret message
M also applies for a randomly chosen secret message. Moreover, the adversary could
have deduced the same fact even without running the protocol at all, but just by sim-
ulating its run, using a randomly generated (with the same distribution as the genuine
secret message, its distribution is supposed to be known) bit-string instead of the secret
message. All such deducible facts therefore must be trivial in nature.
We do not have the honest user in this deﬁnition, because we are not interested in
all possible properties of the protocol, but only in the preservation of the conﬁdentiality
of M .
We also deﬁne the extended view of the adversary A as the family of probability
distributions occurring to the left of ≈ in (6). Clearly, if the extended views of two pro-
tocols ℘ and ℘′ are indistinguishable then they are either both secure or both insecure.
7 Rewriting protocols
A protocol can be made more analyzable by changing it in certain ways. However, we
must make sure that all changes are valid, i.e. do not change the extended view of the
adversary to the protocol.
This section describes a protocol transformation that constructs a protocol ℘′ from
℘ that makes less use of cryptographic operations. The protocol ℘ may not contain
case-statements, the protocol ℘′ may contain them. The protocol ℘ is secure iff the
protocol ℘′ is. We also describe how to replace the protocol ℘′ with several protocols
℘′
1, ℘′
2, . . ., such that
• if ℘′
1, ℘′
2, . . . are secure then ℘′ is secure;
• ℘′
1, ℘′
2, . . . contain no case-statements.
1, ℘′
The protocols ℘′
2, . . . may be analysed with some information-ﬂow analysis based
purely on information theory [32], for example the one presented in the next Section;
from their security follows the security of the protocol ℘. If some of the protocols
2, . . . still contains signiﬁcant uses of cryptography, then we may apply the pro-
℘′
1, ℘′
tocol transformation to them again.
For changing the protocol ℘, we want to ﬁnd the following two items:
• We want to ﬁnd a key k (actually: a statement k := gen key), such that we
are able to ﬁnd all uses of that key (i.e. all uses of the key created at that key
generation statement). We must be able to exactly point to all uses of that key;