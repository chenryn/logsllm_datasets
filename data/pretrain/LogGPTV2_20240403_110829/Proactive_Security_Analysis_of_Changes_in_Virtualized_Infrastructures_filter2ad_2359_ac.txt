ally reachable. Overall, our formalization of the information
ﬂow analysis as graph transformations diﬀerentiates from the
existing work [4]. In particular, we construct an information
ﬂow graph as an overlay that enables us to dynamically ad-
just it upon changes in the system model. Further, as we are
addressing the previous challenges, our approach is better
suited to be expressed as graph transformations.
@
vm
∀>0
real
ﬂow
noﬂow
@
host
@
@
∀>0
real
noﬂow
ﬂow
(a) Simple Stop Rule: Trusted hy-
pervisor prevents ﬂow from VMs
to Host and vice versa.
(b) Default Rule: Flow between
any pair of connected vertices not
yet covered by a noﬂow edge.
pg1 : portgroup
vlanId == pg2.vlanId
@
real
ﬂow
∀>0
@
@
pg2 : portgroup
@
real
ﬂow+
vswitch
vswitch
(c) Fast-Edge Rule: Flow between
Portgroups with the same VLAN
ID and connected VSwitches.
Figure 3: Examples of diﬀerent kinds Information Flow Rules as modeled in GROOVE as Production Rules.
Information Flow Model
3.2.1
We now deﬁne our information ﬂow model and present the
set of rules that construct such the information ﬂow graph.
Deﬁnition 3 (Information Flow Model)
We model information ﬂow in a virtualized infrastructure,
given by a Realization model graph GR = (VR, ER), as a
directed and edge-typed graph GI = (VI , EI), where VI = VR.
An edge type function te : EI → {ﬂow, noﬂow} denotes for
each information ﬂow edge e = (u, v) if information ﬂow
from u to v is possible (ﬂow) or not (noﬂow).
We denote the information ﬂow graph as an overlay on the
realization model graph, because they share the same vertex
set. We consider a uniﬁed graph G = (VR, ER ∪ EI) where
the Realization model graph edges are typed real.
The information ﬂow analysis takes a Realization model
graph, a set of traversal rules in the form of graph produc-
tion rules (as shown in Fig. 3), and applies them on the
Realization model, thereby constructing the information ﬂow
graph overlay. When the Realization model changes, e.g.,
due to the operations transition model, we also adjust the
information ﬂow graph.
3.2.2
We diﬀerentiate between three kind of information ﬂow
rules: A simple rule describes information ﬂow between a
pair of adjacent vertices given by their types with potential
conditions on the vertices’ attributes. A default rule is a
simple rule that matches any pair of adjacent vertices without
any conditions. Finally, a fast-edge or complex rule describes
information ﬂow between non-adjacent vertices.
Information Flow Rules and Application
Simple Information Flow Rules: The ﬁrst kind of
rules are used both when the information ﬂow is computed
for the ﬁrst time on the initial graph, or when new edges
are added. They are simple in the sense that they work on
directly adjacent nodes connected by a Realization model
edge (real), and either introduce a directed information ﬂow
edge for ﬂow or noﬂow. Fig. 3a shows a simple information
ﬂow rule that stops information ﬂow between a host and a
virtual machine (vm) by creating bidirectional noﬂow edges
between them, if not already present. This captures the
(arguable) trust assumption that no side-channel information
leakage exists between virtual machines on the same host [22].
The noﬂow edge is created with a conditional new, i.e., it is
only created if not already present by combining a creator
and embargo edge. Applying the simple rules will eventually
terminate when all pairs are connected by either a ﬂow
or noﬂow edge. We design the rules to be conﬂuent, i.e.,
whenever more than one explicit rule is applicable, it does
not matter for the result which one we take ﬁrst. We can
thus use the universal quantiﬁer ∀>0, which requires at least
55
one match for the rule to be applicable, to express that we
apply the production rule to all possible matches greedily
(i.e., we do not have a state exploration).
Default Rule: The above simple rules typically represent
trust assumptions on isolation properties of elements in the
infrastructure and therefore introduce noﬂow edges. The
ﬂow edges are conditionally introduced by a default rule, as
shown in Fig. 3b, if neither a ﬂow nor noﬂow edge are present
between a pair of nodes. The rule is applied when no more
simple rules are applicable. Thus, the default means that we
assume information may ﬂow when the simple rules do not
tell us otherwise. This may be too pessimistic, but with this
over-approximation we are generally on the safe side. We
achieve the operational aspect by designing simple GROOVE
rule application strategies, in this case to ﬁrst apply simple
rules as long as possible and then apply the default rule as
long as possible, i.e., until all node pairs have been evaluated.
Fast-Edge Information Flow Rules: A direct encod-
ing of the original graph coloring of [4] is not suitable in
GROOVE as the change in the graph state leads to an expen-
sive blow-up of the state space. A feasible alternative is the
introduction of fast-edges representing the pairs that need to
have the same coloring (i.e., allowing a ﬂow). As an example,
Fig. 3c shows a production rule that creates a fast-edge be-
tween two VLAN endpoints that are not necessarily directly
connected by a real edge, but which are connected through
a path of ﬂow edges. Here, two VMware port groups, which
are modeled as portgroup with a VLAN identiﬁer, are hosted
on diﬀerent virtual switches, and the rule ﬁres for pairs of
portgroups with the same VLAN identiﬁers, if the underlying
switches are connected. A similar rule exists when two port
groups are connected to the same vswitch.
Adjust Existing Information Flows: The dynamic
information ﬂow analysis needs to adjust the existing infor-
mation ﬂows if the Realization model graph changes. The
removal of information ﬂow edges that are connected to re-
moved nodes is covered by the underlying formalism (Single
Push-Out [23]) as dangling edges are removed. For each pair
of nodes that are no longer connected by a real edge, but
still feature an information ﬂow edge, we need to remove
the ﬂow edge. This is accomplished by two production rules
similar to the simple information ﬂow rules, but with two
untyped nodes, a condition that no real edge is present, and
the removal of either a ﬂow or noﬂow edge.
The information ﬂow edges that are based on changed
attributes are recomputed if their predicates do not hold
anymore. That means, for each information ﬂow rule that
introduces an information ﬂow edge based on an attribute
condition, such as the VLAN ID attribute dependent rule of
Fig. 3c, we have an adjusting production rule that veriﬁes
that the attribute condition still holds; if not, it revokes the
vm
ﬂow+
vm
contains
contains
contains
contains
seczone
seczone
(a) Strict Zone Isolation
(Negative)
seczone
seczone
@
contains
@
∀
in
∃
@
@
@
seczone
contains
vm
contains
seczone
contains
vm
ﬂow+
(b) Strict Zone Isolation
(Positive)
host
real
vm
contains
contains
contains
placezone
placezone
(c) Compute Placement
seczone
contains
vm
end
contains
has
seczone
seczone
contains
contains
vm
start
has
path
has
vm
guardian
seczone
contains
vm
start
contains
contains
has
seczone
contains
contains
has
seczone
contains
vm
end
contains
contains
seczone
seczone
path
has
vm
guardian
+
path
has
vm
start
@
@
∀
count < 2
has
@
vm
end
contains
contains
depzone
(d) Guardian Zone Isolation:
Missing Guardian on Path
(e) Guardian Zone Isolation:
Wrong Zoning of Guardian
(f) Multiple Disjoint
Paths
Figure 4: Security and Operational Policies modeled in GROOVE as Graph Matches.
information ﬂow edge. Adjusting the information ﬂow graph
based on changes in the Realization model may further inﬂu-
ence connectivity-dependent information ﬂow edges, such as
the ones produced by the fast-edge portgroup rule. Similar
to an adjusting production rule for attribute changes, we
also have a production rule that deletes ﬂow edges if their
connectivity condition is no longer satisﬁed.
3.3
Infrastructure Policies as Graph Matches
The ﬁnal piece of our analysis eﬀort is the speciﬁcation
of security and operational policies. We formalize a wide
variety of practical policies, such as isolation of security zones
and prevention of single point of failures, as graph matches.
Instead of production rules that transform the model, the
policy rules only try to match a given graph pattern.
We usually express the security policies as attack states,
i.e., a state of the topology or conﬁguration that violates
the desired security properties. Instead of verifying that a
security property holds for the entire infrastructure, we try
to ﬁnd violations. However the formalism and analysis allow
for both the speciﬁcation of positive and negative policies.
The analysis stops, i.e., ﬁnds a violation, if a propositional
formula of the form AttackP olicy1 ∨ ¬P ositiveP olicy1 ∨
AttackP olicy2 . . . is satisﬁed. That is, an attack state has
been found when an attack policy has matched, or a positive
policy no longer matches. Attack state policies have an
advantage in the root-cause analysis of policy violations, since
the analysis returns the matching part of the infrastructure
that causes the violation, i.e., the attack state. Whereas for
positive policies, the analysis does not provide a reason why
a policy rule no longer matches. In the following we present
a subset of policies that stem from security requirements of
practitioners of infrastructure cloud deployments.
Strict Security Zone Isolation: We represent tenants
as security zones which group together infrastructure ele-
ments, such as virtual machines, into zones. Each security
zone is represented as a single vertex of type seczone with
directed contains edges, that represent zone membership, to
Realization model vertices. The zoning of elements is a policy
setup performed by a security operator.
In this policy we require a strict isolation, i.e., no informa-
tion ﬂows, between any pair of zoned infrastructure elements
that are not members of at least one common security zone.
With the example of VMs as security zone members, we
show both a positive and negative speciﬁcation of this policy.