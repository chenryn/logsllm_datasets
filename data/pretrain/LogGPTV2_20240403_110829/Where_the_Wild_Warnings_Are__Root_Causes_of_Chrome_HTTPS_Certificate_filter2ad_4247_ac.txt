### Hostname Mismatches and Revoked Certificates
During the specified time period, we contacted three national governments to inform them of the issue. The U.S. government responded promptly and corrected misconfigurations on several dozen sites.

### 6.2 Common Types of Server Errors
Table 1 provides a breakdown of the frequency of different types of server errors. Insufficient intermediates are the most common cause of server errors, particularly on Android devices.

#### 6.2.1 Insufficient Intermediates
Insufficient intermediates are a significant problem on Android, accounting for 36% of HTTPS error reports. This type of error is much less frequent on other operating systems. Chrome relies on the operating system to fetch intermediate certificates, but Android does not use Authority Information Access (AIA) fetching to dynamically retrieve intermediates during certificate validation. In contrast, Windows, Mac, and Chrome OS do implement AIA fetching. As a result, certificates that validate in Chrome on other operating systems may fail to validate on Android unless the device already has the intermediates cached from previous connections to other websites. This issue likely affects Mozilla Firefox as well, which does not perform AIA fetching on any operating system.

These misconfigurations can be categorized into two main types:
1. **Single Leaf Certificate**: The server sends only a single leaf certificate.
2. **Incorrect or Incomplete Intermediates**: The server sends some intermediates, but they are either incorrect or incomplete. For example, the server might send intermediates that chain to a root that is not widely trusted, but neglect to send a cross-sign certificate that chains that root to a more widely trusted root [4].

The first category, where the server sends only a single certificate, is the most prevalent. In 87.3% of insufficient intermediate errors from the Annual Reports sample, the server sent only a single certificate. This suggests that the problem is largely due to server operators who are unaware of the need to serve intermediates along with the leaf certificate or who do not know how to do so.

#### 6.2.2 Name Mismatch Errors
Akhawe et al. previously found that name mismatches are often due to subdomain mismanagement [9]. We consider two specific cases of interest: www mismatches and out-of-wildcard-scope subdomains, both defined in Section 4.1.2. In the Annual Reports sample, 3.7% of server name-mismatch errors were www mismatches, and 13.2% were out-of-wildcard-scope subdomains.

#### 6.2.3 Authority Invalid Errors
In the Annual Reports sample, 18.3% of server authority-invalid errors (excluding those caused by insufficient intermediates) were for self-signed certificates. Additionally, 5.3% of all authority invalid errors occurred on intranet hosts or non-routable IP addresses. While we generally do not classify errors for intranet hosts as server errors because Googlebot cannot contact these hosts to determine proper configuration, this suggests that intranet hosts with invalid certificates are a common source of certificate errors. However, it is difficult to confirm this entirely, as some of these errors could be due to client or network misconfigurations, such as misconfigured corporate middleboxes.

#### 6.2.4 Server Date Errors
Most server date errors are caused by expired certificates rather than certificates that are not yet valid. Figure 3 shows the distribution of these expired certificates relative to the time at which a report was received. Notably, 57% of certificate reports were expired by less than 30 days, and 75% by less than 120 days.

#### 6.2.5 Server SHA-1 Errors
As discussed in Section 4.1.5, our analysis pipeline did not automatically classify SHA-1 errors because Chrome did not fully block SHA-1 certificates until near the end of the Annual Reports time period. We retroactively identified server SHA-1 errors from the February - March 2017 subset of the Annual Reports sample, covering Chrome 56 and 57. Chrome 56 removed SHA-1 support for publicly trusted roots and was released to the stable channel in late January 2017. Chrome 57, released in mid-March, removed SHA-1 support for all certificate chains, including locally installed roots. During this time period, server SHA-1 errors accounted for 9.4% of all certificate reports. By June 2017 (Chrome 59), server SHA-1 errors declined to 2.7% of all reports.

### 7 Client Errors
Various conditions on end-user machines can cause spurious HTTPS warnings. These misconfigurations can result from seemingly innocuous changes to system settings, or from users installing malware, debugging tools, and even security products. In this section, we discuss the most problematic client misconfigurations.

#### 7.1 Client Clocks
Client clock problems are widespread, particularly on Windows. Table 1 shows the relative frequency of clock errors.

**How far off are client clocks?**
Nearly all incorrect client clocks in our dataset are in the near past. In the Annual Reports sample, the client clock was more than 24 hours behind in 6.7% of reports and more than 24 hours ahead in 0.05% of reports. Of reports where the client clock was off by more than 24 hours in either direction, 99.8% were within 3 months of true time. Figure 4 shows the CDF of the client clock skew from a random sample of 100,000 reports.

**Why are clocks so frequently misconfigured?**
We are unsure why client clocks are so frequently misconfigured. Users might manually set their clocks incorrectly to get around software licensing restrictions or to cheat in games. Incorrect system clocks are a common complaint associated with malware on online help forums [5, 25], but the phenomenon of malware interfering with system clocks is not, to our knowledge, well-studied. We also suspect that some incorrect client clocks are due to hardware issues like dying CMOS batteries.

### 8 Network Errors
Network errors are an especially interesting and challenging class of error. HTTPS is designed to prevent network actors from intercepting HTTPS traffic, yet there are several common use cases where network appliances attempt to do this. Whether this interception is benign or malicious depends on the level of trust the user has in the network appliance owner and their intentions.

#### 8.1 Captive Portals
Captive portals cause name mismatch errors when users first connect to a network that requires authentication. We find that captive portals are one of the smaller error causes, but we are likely undercounting them because they are difficult to automatically identify.

On some operating systems, Chrome uses a standard captive portal detection technique of sending network probes. These operating systems include Windows 7 and below, Mac OS, Chrome OS, and Linux. On other operating systems, Chrome relies on the system’s captive portal detection to detect the portal and prompt the user to log in.

We find that Chrome’s technique suffers from both false positives and false negatives:
- **False Positives**: Occur when Chrome’s probe request detects a captive portal, but there is no actual captive portal. We manually reviewed 100 reports from May 2017 and found 34 false positives. Most of these false positives were attributed to home routers and enterprise middleboxes, which interfere with the probe request despite not being traditional captive portals.
- **False Negatives**: Occur when Chrome’s probe request fails to detect a captive portal, even though one is present.

### 5 Overview of Results
This section provides an overview of our dataset and main findings. In Sections 6-9, we discuss the most common server, client, and network errors in more detail.

Our analysis pipeline can automatically classify two-thirds of reports. It assigned at least one root cause to 62.8% of the Annual Reports sample. The impact of each root cause is shown in Table 1. Client and network errors play a large role in HTTPS error warnings. Prior work emphasized the role of developers in HTTPS session management, but our findings highlight the significant impact of client and network misconfigurations.

### Table 1: Root Causes of Errors in the Annual Reports Sample
| Root Cause | Windows | Mac OS | ChromeOS | Android |
|------------|---------|--------|----------|---------|
| Insufficient intermediates | 1.26% | 6.11% | 11.7% | 4.23% |
| Authority invalid | 33.5% | 0.925% | 6.57% | 4.80% |
| Name mismatch | 5.54% | 11.6% | 4.39% | 8.71% |
| Date error | 5.46% | 3.34% | 0.783% | 3.49% |
| Incorrect system clock | 7.59% | 2.80% | 1.72% | 4.57% |
| Captive portal | 9.13% | 35.8% | 6.01% | 9.77% |
| Missing TLS proxy root | 2.73% | 8.46% | 2.11% | 1.16% |

### Table 2: Breakdown of the 100 “Worst Offenders”
| Category | Number of Sites |
|----------|-----------------|
| Government | 65 |
| Education | 7 |
| Email | 5 |
| Malware-associated advertising | 4 |
| Finance | 4 |
| E-commerce | 3 |
| File-sharing | 3 |
| Telecommunications | 3 |
| Other | 6 |

### 7.2 Anti-Virus Products
Consumer anti-virus products commonly install root certificates and intercept TLS connections to look for suspicious traffic [6, 26]. Bugs in their TLS interception can cause HTTPS error warnings. We have observed high-impact instances of these bugs.

Though touted as a security feature, TLS interception has numerous downsides from a security perspective:
- **Misconfigurations**: Can cause spurious certificate warnings. Even small logic bugs can affect every HTTPS site a user visits, preventing them from seeking help.
- **Security Checks**: When a locally installed root of trust is in use, Chrome disables various certificate validation and TLS security checks that cannot reasonably be enforced for local roots, such as HTTP Public Key Pinning [7]. Most proxies do not implement these checks themselves and often do not perform even basic certificate validation, leaving the user vulnerable to attacks [13, 24].

For example, we discovered a bug in Avast that temporarily caused widespread HTTPS error warnings. In September 2015, we noticed a large number of reports for certificate date errors on properly configured sites. The certificates in the reports chained to expired Avast roots. We estimated an impact of about 1.5 million certificate warnings per week. The cause was that Avast’s software generated a root certificate using the system clock’s time at installation. If the clock was wrong at installation and later corrected, Avast would continue to intercept TLS connections with an expired root certificate, leading to HTTPS error warnings on every site visited. We reported the bug to Avast, and they quickly pushed an update that fixed the issue by querying a server for an accurate timestamp to use when generating a root certificate.

Another example is that anti-virus products might generate certificates that were once valid but are no longer accepted by Chrome, either because the product is out-of-date or because its maintainers are not keeping up with best practices. For instance, in a manual inspection of unclassified reports (Section 9), we encountered anti-virus products that use SHA-1 signatures, which are no longer considered valid in Chrome.

### Figure 4: CDF of Client Clock Skews
Figure 4 shows the CDF of client clock skews for client clocks that are in the past, from a sample of 100,000 certificate reports. We only include reports where the client clock was at least 24 hours behind and no more than 3 months behind. The x-axis is on a log scale.