hostname mismatches to revoked certificates.
During this time period, we reached out to three national gov-
ernments to notify them of the problem. The U.S. government was
responsive and fixed misconfigurations on several dozen sites.
6.2 Types of common server errors
Table 1 shows the frequency of different types of server errors.
Insufficient intermediates are the leading cause of server errors,
and they are primarily seen on Android.
6.2.1
Insufficient intermediates. Insufficient intermediates are a
large problem on Android, where they are responsible for 36% of
HTTPS error reports. This class of error is much less common on
other operating systems. Chrome relies on the operating system for
4The February 2017 dip in non-server errors on Windows is due to a Chrome bug that
was pulled into a Chromium fork at that time. The bug triggered warnings on many
popular websites that were not classified by our pipeline.
Figure 2: Percentage of reports with at least one error caused
by the client or network, broken down by platform.4
We found that the captive portal probe has a high false positive
rate, which we discuss further in Section 8.1.
Instead, the pipeline produces a weekly list of the most common
certificate chains in captive portal error reports. We manually curate
them to maintain an ongoing list of the common captive portal
vendors. Whenever a name mismatch error appears for one of these
known captive portal certificates, the pipeline marks the error as
caused by a captive portal. Unfortunately, the ongoing expansion of
the captive portal list makes it difficult to compare the frequency of
captive portal errors across time because we do not re-label reports
retroactively after new captive portals have been identified.
4.3.2 Missing TLS proxy roots. Enterprises, schools, and other
entities commonly install network middleboxes that intercept TLS
connections. Devices on these networks are expected to have the
middlebox’s root certificate installed, but in practice, this is not
always the case. A missing TLS proxy root error occurs when a
user skips installing the root and tries to visit a website that is
intercepted by the proxy.
When an authority invalid error does not appear to be a server
error, we compare the reported certificate chain against a list of
TLS proxy products. We compiled this list by manually inspecting
a sample of certificate reports. The list includes: Fortigate/Fortinet,
Cyberoam, Cisco Umbrella, Bluecoat, and McAfee Web Gateway. If
the name of any of these vendors appears in the certificate chain,
we classify the error as caused by a missing TLS proxy root.
5 OVERVIEW OF RESULTS
This section provides an overview of our dataset and main findings.
In Sections 6-9, we discuss the most common server, client, and
network errors in more detail.
We can automatically classify two-thirds of reports. Our anal-
ysis pipeline assigned at least one root cause to 62.8% of the Annual
Reports sample. The impact of each root cause is shown in Table 1.
Client and network errors play a large role in HTTPS error
warnings. Prior work emphasized the role of developers in HTTPS
Session F5:  Understanding Security FailsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1412Table 1: Percentage of reports with each root cause in the Annual Reports sample. A report can have multiple errors and root
causes. Each cell is the percentage of the total Annual Reports sample that was labeled with the row’s root cause.
Windows Mac OS ChromeOS Android
Server errors
Insufficient intermediates
Authority invalid
Name mismatch
Date error
Client errors
Incorrect system clock
Network errors
Captive portal
Missing TLS proxy root
1.26%
6.11%
11.7%
4.23%
33.5%
0.925%
6.57%
4.80%
5.54%
11.6%
4.39%
8.71%
5.46%
3.34%
0.783%
3.49%
7.59 %
2.80%
1.72%
4.57%
9.13%
35.8%
6.01%
9.77%
2.73%
8.46%
2.11%
1.16%
Table 2: Breakdown of the 100 “worst offenders”: the sites
with server errors that generated the most reports.
Category
Government
Education
Email
Malware-associated advertising
Finance
E-commerce
File-sharing
Telecommunications
Other
Number of sites
65
7
5
4
4
3
3
3
6
certificate validation, and Android doesn’t use authorityInfoAccess
(AIA) fetching to dynamically fetch intermediates while verifying
the certificate. Windows, Mac, and Chrome OS do implement AIA
fetching. Sites whose certificates validate in Chrome on other op-
erating systems will fail to validate on Android unless the device
already has the intermediates cached from prior connections to
other websites. This is likely also a problem in Mozilla Firefox,
which doesn’t perform AIA fetching on any operating system.
These misconfigurations fall into two categories:
(1) The server sends only a single leaf certificate.
(2) The server sends some intermediates, but they are the wrong
intermediates or not the full set. For example, the server
might send intermediates that chain to a root that is not
widely trusted, but neglect to send a cross-sign certificate
that chains that root to a more widely trusted root [4].
The first category – a single leaf certificate – dominates. The
server sent only a single certificate in 87.3% of the insufficient
intermediate errors from the Annual Reports sample. This suggests
that the problem is largely caused by server operators that are not
aware that they should serve intermediates along with the leaf, or
don’t know how.
6.2.2 Name mismatch errors. Akhawe et al. previously found
that name mismatches are commonly due to subdomain misman-
agement [9]. We consider two cases that are of interest: www
mismatches and out-of-wildcard-scope subdomains, both of which
are defined in Section 4.1.2. In the Annual Reports sample, 3.7% of
Figure 3: CDF of the amount of time by which certificates
are expired. X-axis is log scale.
server name-mismatch errors were www mismatches, and 13.2%
were out-of-wildcard-scope subdomains.
6.2.3 Authority invalid errors. In the Annual Reports sample,
18.3% of server authority-invalid errors (excluding those caused by
insufficient intermediates) were for self-signed certificates.
We also consider the proportion of errors that occur on intranet
hosts. We generally do not classify errors for intranet hosts as
server errors because the Googlebot cannot contact these hosts
to determine whether the server is properly configured. However,
5.3% of all authority invalid errors during this time period were
for intranet hostnames or non-routable IP addresses. We therefore
suspect that intranet hosts with invalid certificates are a common
source of certificate errors, but it is difficult to say for sure because
some of this 5.3% could have been caused by client or network
misconfigurations (e.g., misconfigured corporate middleboxes).
6.2.4
Server date errors. Virtually all server date errors are
caused by expired certificates, rather than certificates that are not
yet valid. Figure 3 shows the distribution of these expired certifi-
cates relative to the time at which a report was received. Notably,
57% of certificate reports were expired by less than 30 days, and
75% by less than 120 days.
Session F5:  Understanding Security FailsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1413software licensing restrictions or to cheat in games. Incorrect sys-
tem clocks are a common complaint associated with malware on
online help forums [5, 25], but the phenomenon of malware inter-
fering with system clocks is not, to our knowledge, well-studied. We
also suspect that some incorrect client clocks are due to hardware
issues like dying CMOS batteries.
Site owners need to manage certificates carefully to avoid break-
age due to client clocks. Figure 2 shows a spike in client-caused
errors on Windows in September 2016. This spike corresponded to a
short-notice rollout of newly issued Google certificates. Certificates
that are used close to their issuance date fall afoul of misconfigured
client clocks more often because the clock is more likely to fall
before the certificate’s validity period begins.
7.2 Anti-virus
Consumer anti-virus products commonly install root certificates
and intercept TLS connections to look for suspicious traffic [6, 26].
Bugs in their TLS interception may cause HTTPS error warnings.
We have observed high-impact instances of these bugs.
Though touted as a security feature, the practice of TLS inter-
ception has numerous downsides from a security perspective:
• TLS interception opens the door for misconfigurations that
cause spurious certificate warnings. Even small logic bugs
can cause HTTPS errors. These bugs and misconfigurations
often have the unfortunate property that they affect every
single HTTPS site that a user visits, even stymying a user’s
ability to search for help.
• When a locally installed root of trust is in use, Chrome dis-
ables various certificate validation and TLS security checks
that cannot reasonably be enforced for local roots, such as
HTTP Public Key Pinning [7]. Most proxies do not imple-
ment these checks themselves, and in many cases do not
perform even basic certificate validation, leaving the user
vulnerable to attack [13, 24].
As one example of a high-impact anti-virus issue, we discovered
a bug in Avast that temporarily caused widespread HTTPS error
warnings. In September 2015, we noticed a large number of reports
for certificate date errors on properly configured sites. The certifi-
cates in the reports chained to expired Avast roots. We estimated
an impact of about 1.5 million certificate warnings per week. The
cause was that Avast’s software was generating a root certificate on
installation using the system clock’s time. If the clock was wrong at
installation time and then later corrected, Avast would continue to
intercept TLS connections with an expired root certificate. This led
Avast users to see HTTPS error warnings on every site they visited.
We reported the bug to Avast and they quickly pushed an update
that fixed the bug by querying a server for an accurate timestamp
to use when generating a root certificate.
Another example is that anti-virus products might generate cer-
tificates that were once valid but are no longer accepted by Chrome,
either because the anti-virus product is out-of-date or because its
maintainers are not keeping up with best practices. For example,
in a manual inspection of unclassified reports (Section 9), we en-
countered anti-virus products that use SHA-1 signatures. SHA-1
signatures are no longer considered valid in Chrome.
Figure 4: CDF of client clock skews for client clocks that are
in the past, from a sample of 100,000 certificate reports. We
only include reports where the client clock was at least 24
hours behind and no more than 3 months behind. X-axis is
log scale.
6.2.5
Server SHA-1 errors. As discussed in Section 4.1.5, our
analysis pipeline does not automatically classify SHA-1 errors be-
cause Chrome did not fully block SHA-1 certificates until near the
end of the Annual Reports time period. We retroactively identified
server SHA-1 errors from the February - March, 2017 subset of the
Annual Reports sample, covering Chrome 56 and 57. Chrome 56
removed SHA-1 support for publicly trusted roots and was released
to the stable channel in late January, 2017. Chrome 57 was released
in mid-March and removed SHA-1 support for all certificate chains,
including locally installed roots. During this time period, server
SHA-1 errors accounted for 9.4% of all certificate reports. By June
2017 (Chrome 59), server SHA-1 errors declined to 2.7% of all re-
ports.
7 CLIENT ERRORS
Various conditions on end-user machines can cause spurious HTTPS
warnings. These misconfigurations can result from seemingly in-
nocuous changes to system settings, or from users installing mal-
ware, debugging tools, and even security products. In this section
we discuss the most problematic client misconfigurations.
7.1 Client clocks
Client clock problems are widespread, particularly on Windows.
Table 1 shows the relative frequency of clock errors.
How far off are client clocks? Nearly all incorrect client clocks
in our dataset are in the near past. In the Annual Reports sample,
the client clock was more than 24 hours behind in 6.7% of reports
and more than 24 hours ahead in 0.05% of reports. Of reports where
the client clock was off by more than 24 hours in either direction,
99.8% were within 3 months of true time. Figure 4 shows the CDF
of the client clock skew from a random sample of 100,000 reports.
Why are clocks so frequently misconfigured? We are unsure.
Users might manually set their clocks incorrectly to get around
Session F5:  Understanding Security FailsCCS’17, October 30-November 3, 2017, Dallas, TX, USA14148 NETWORK ERRORS
Network errors are an especially interesting and challenging class
of error. HTTPS is designed to prevent network actors from in-
tercepting HTTPS, yet there are several common use cases where
network appliances attempt to do this. Whether this interception
is benign or malicious depends on how much the user trusts the
network appliance owner and his/her intentions.
8.1 Captive portals
Captive portals cause name mismatch errors when users first con-
nect to a network that requires authentication. We find that captive
portals are one of the smaller error causes, but we are likely under-
counting them because they are difficult to automatically identify.
On some operating systems, Chrome uses a standard captive
portal detection technique of sending network probes. These op-
erating systems are Windows 7 and below, Mac OS, Chrome OS,
and Linux. On other OSes, Chrome relies on the system’s captive
portal detection to detect the portal and prompt the user to log in.
We find that Chrome’s technique suffers from both false positives
and false negatives:
• A false positive occurs when Chrome’s probe request de-
tects a captive portal but there was no captive portal. We
manually reviewed 100 reports from May 2017 and found 34
false positives. We attribute most of them to home routers
and enterprise middleboxes, which interfere with the probe
request despite not being traditional captive portals.
• A false negative occurs when Chrome’s probe request fails to