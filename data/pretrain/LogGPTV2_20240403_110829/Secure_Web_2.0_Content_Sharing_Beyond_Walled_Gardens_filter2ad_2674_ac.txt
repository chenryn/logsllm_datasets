C (e.g., by clicking on the link in her email box).
2) C prompts U for email e and redirects U to her
OpenIDemail provider O with secret-link l.
3) U authenticates herself to O.
4) Once authenticated, O redirects U back to C with an
OpenID identiﬁer i and l.
content c and roles R.
5) Based on l, C lookups the stored tuple (l, c, R) to ﬁnd
6) For each role r ∈ R, C requests an access decision from
the conetnt owner’s OpenPolicy provider P with r and
i to determine whether the request should be granted.
7) P performs a distributed containment query for each
r with respect to i. A containment query Q takes the
form r (cid:119) i. Q is true if i ∈ members(r). The access
to c is granted only if Q holds. The details of the
distributed containment query algorithm are discussed
in Section III-B, OpenPolicy Service.
8) C returns c to U if any one of the containment queries
returns true.
B. OpenPolicy Provider
As illustrated in Figure 4, the OpenPolicy provider pro-
vides (1) a web-based policy editor for users to construct
their online credentials/policies, (2) a web-based sharing
module for users to associate access polices with shared
content, (3) a distributed mailing module to send out secret-
links, and (4) a distributed authorization module for CSPs to
make access decisions. At its core is a distributed inference
engine, which consists of a membership query module and a
containment query module. The membership query module
takes a goal role A.r and a set of credentials C as inputs and
computes a set of entity members E of A.r as an output. For
each e ∈ E, the distributed mailing module emails a copy of
secret-link l to e. Similarly, the containment query module
takes a goal role A.r and a user U as inputs and returns
whether U ∈ members(A.r). The containment query result
is used by the distributed authorization module to determine
wether a request made by a user U should be granted.
Our proposed membership and containment query algo-
rithms are based on the notion of a credential graph, as
introduced by Li et al. [27]. A credential graph G is a
directed graph that represents a set of credentials C and their
relationships. For each credential A.r ←− exp ∈ C, there
is one node for A.r in G, one node for exp, and an edge
exp (cid:16) A.r that links exp to A.r. A proof graph Gp is a
subgraph of credential graph G that is rooted by a given goal
role and contains additional nodes derived from Type 3 and
Type 4 credential statements. Our algorithms use the proof
graph as a helper data structure for computing the members
of a given role A.r. To construct a proof graph, our design
uses another data structure that we call a proof stack, which
is a stack for storing the nodes to be processed during a
derivation process.
Algorithm 1 shows the detail of a distributed membership
query. It takes a goal role and a set of credentials as inputs
and computes a set of members of the goal role as an output.
Algorithm 1 processes one node in the stack at a time until
414
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:09:09 UTC from IEEE Xplore.  Restrictions apply. 
Figure 4. Main components of an OpenPolicy provider.
the stack is empty. Initially, only the goal node (i.e., A.r)
is added to the proof graph and is pushed onto the stack.
A node in the proof stack is the basic processing unit, each
node consists of the following properties:
• exp: the role expression of this node (e.g., B, A.r,
A.r1.r2, or f1 ∩ f2 ∩ . . . fk).
• parents: the set of nodes this node is a member of.
• solutions: the set of entity nodes that can reach this
node. Solutions are propagated to a node’s parents in
the following way. When a node e2 is added to the
solution of e1 (e2 (cid:16) e1), all existing solutions of e2 are
appended to the solutions of e1 and then propagate to
e1’s parents as well. Solution propagation is illustrated
in Algorithm 2 (lines 3 to 8).
• linked roles: the set of linked role names. This property
is used to process a Type 3 linked role A.r1.r2. The
details are discussed below.
• intersection nodes: the set of intersection nodes. This
property is used to process a Type 4 linked role f1 ∩
f2 ∩ . . . fk. The details are discussed below.
For a credential statement A.r ←− exp, we deﬁne
function RHS (A.r ←− exp) = exp (i.e., right-hand-
side) and LHS (A.r ←− exp) = A.r (i.e.,
left-hand-
side). If exp is a linked-role (i.e., in the form of A.r1.r2),
then function PrimaryEntityRole(A.r1.r2) = A.r1 and
SecondaryRole(A.r1.r2) = r2. If exp is an intersection-role
(i.e., in the form of f1 ∩ f2 ∩ . . . fk), then RoleCount(f1 ∩
f2 ∩ . . . fk) = k.
it creates a node for exp in the proof graph,
To process a Type 2 role node A.r (Algorithm 1, lines
10 to 16) in the stack, the algorithm ﬁnds all credential
statements that deﬁnes A.r. For each credential A.r ←−
exp,
if
none exists, pushes the newly created node onto the stack
(addNode function), and then adds an edge exp (cid:16) A.r. The
addEdge(exp, A.r) function of the proof graph adds A.r to
the parents set of exp and propagates exp’s solutions to A.r.
To process a Type 1 entity node B (Algorithm 1, lines 7 to
9), the algorithm simply adds B to B’s solutions. Solutions
of B are then propagated into all B’s parents as shown in
Algorithm 2 (lines 3 to 8).
A Type 3 A.r ←− A.r1.r2 statement deﬁnes A.r to
contain B.r2 for every B that is a member of A.r1. To
process a Type 3 linked node A.r1.r2 (Algorithm 1, lines
17 to 24), the algorithm creates a node for A.r1 and adds
role name r2 to A.r1’s linked roles property. When a new
solution B is added to A.r1, Algorithm 2 (lines 9 to 13)
creates a node B.r2 and adds an edge B.r2 (cid:16) A.r1.r2
to the proof graph. Thus, when a solution D is added to
B.r2, D is propagated to A.r1.r2 automatically according
to Algorithm 2 (lines 6 to 8).
A Type 4 A.r ←− f1 ∩ f2 ∩ . . . fk statement deﬁnes A.r
to contain the intersection of all the roles f1,··· , fk. To
process a Type 4 linked node f1 ∩ f2 ∩ . . . fk (Algorithm 1,
the algorithm creates k nodes, one for
lines 25 to 30),
each fi, and adds the current node f1 ∩ f2 ∩ . . . fk to the
intersection nodes of fi. When a solution B is added to the
solutions of fi, the current intersection node is notiﬁed to
add B to its partial solutions property (Algorithm 2, line
16). The partial solutions property of a intersection node
maintains a set of potential solutions, each associated with
a counter. When the count of a potential solution D reaches
the number of roles in the intersection role expression
f1∩f2∩. . . fk (in this case, k), an edge D (cid:16) f1∩f2∩. . . fk
is added to the proof graph (Algorithm 2, lines 17 to 19).
Similarly, the distributed containment query takes a goal
role A.r, a user U and a set of credentials as inputs, and
returns a boolean indicating whether U ∈ members(A.r).
The logic for constructing a proof graph is very similar
to the membership query algorithm. The only difference
is that this algorithm checks whether U ∈ members(A.r)
holds for each node being processed. If U ∈ members(A.r)
holds, the function returns immediately. Each member of
A.r is represented in form of an email, but U can be an
email or an OpenID identiﬁer. When U is in the format
of an OpenID,
the distributed authorization module use
OpenIDemail EAUT service to map each solution of A.r into
an OpenID before checking whether U ∈ members(A.r).
C. Security Considerations
Sensitive information (e.g., user name/password, autho-
rization queries) is passed among different parties in our
design. To prevent network data snifﬁng and man-in-middle
415
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:09:09 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 1: queryMembership
addSolution(n, n, Gp, S);
end if
if n.type == 2 # role node A.r # then
1: Input: Goal role R, Credential set C
2: Output: Members of goal role
3: Gp = new ProofGraph(); S = new Stack();
4: addNode(R, Gp, S);
5: while S is not empty do
Node n = S.pop();
6:
if n.type == 1 # entity node B # then
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
ﬁnd Cr = { c | LHS(c) = n.exp, c ∈ C};
for each credential c ∈ Cr do
Node n(cid:48) = addNode( RHS(c), Gp, S);
Gp.addEdge(n(cid:48), n);
end if
if n.type == 3 # linked-role node A.r1.r2 # then
n(cid:48) = addNode(PrimaryEntityRole(n.exp), Gp, S);
n(cid:48).linked roles.addRole(SecondaryRole(n.exp));
for each solution e ∈ n(cid:48).solutions do
n(cid:48)(cid:48) = addNode( e+’.’+SecondaryRole(n.exp),
Gp, S);
Gp.addEdge(n(cid:48)(cid:48), n);
end for
22:
23:
24:
25:
end for
end if
if n.type == 4 # intersection-role node
f1 ∩ f2 ∩ . . . fk # then
for each role expression f in n.exp do
n(cid:48) = addNode(f, Gp, S);
n(cid:48).intersection nodes.add(n);
26:
27:
28:
29:
30:
31: end while
32: return Gp.ﬁndNode(R).solutions;
end for
end if
attacks, we require all communications between parties to
take place over SSL.
Trust relations in RT language are transitive (i.e., A trusts
B, and B trusts C, implies A trusts C). However, for a given
role A.r, a malicious user M could achieve unauthorized
access (i.e., M ∈ members(A.r)) if M can manage to be
trusted anywhere along the path of A.r’s credential chain
(e.g., A.r ←− B.r, B.r ←− C.r, C.r ←− M). To prevent
unlimited transitive trusts, our design allows a user to specify
a depth of trust for each credential statement. For instance,
(2)←− B.r means depth of trust 2 from A to
credential A.r
B over B.r. Depth of trust 1 means A only trusts B for
deﬁning the members of B.r. Depth of trust n means B can
further delegate this authority down to n − 1 levels. During
membership and containment queries, solutions beyond the
speciﬁed trust depth are ignored.
416
Algorithm 2: addSolution
end for
addSolution(n, E, Gp, S);
for each node n ∈ N.parents do
1: Input: Node N, Solution entity node E
2: Input: Proof Graph Gp, Stack S
3: if E /∈ N.solutions then
4: N.solutions.addNode(E);
5:
6:
7:
8: end if
9: for each role expression r ∈ N.linked roles do
10:
11:
12:
13: end for
14: for each node n ∈ N.intersection nodes do
15:
16:
Node n(cid:48) = addNode(E.exp+’.’+r), Gp, S);
Node n = Gp.ﬁndNode(N.exp+’.’+ r);
Gp.addEdge(n(cid:48), n);
addPartialSolution(n, N, E) ;
if RoleCount(n.exp) = count of E in n’s partial
solutions then
addSolution(n, E, Gp, S);
17:
end if
18:
19: end for
Trust relations are not necessarily commutative (i.e., M
trusts A does not imply A trusts M). Email spam and
DoS attacks are possible if a malicious user M could
request any other user A for their credential statements. To
prevent unauthorized requests, our design treats credential
and policy statements as sensitive resources that must be
protected. Our design allow a user to specify, for a given
goal A.r, only entities that are included in the Type 1
statements of A.r (i.e., A.r ←− B) are allowed to perform
query upon A.r. In addition, our design provides tools
for users to specify additional credential access policies in
order to allow other users to perform queries upon a given
role. For instance, the following credential access policy
CCA.allow(CCA.scout) ←− Bob will grant Bob query
permission to CCA.scout, even though Bob is not included
in the Type 1 statements of CCA.scout.
Phishing attacks on federated identity protocols are a
looming threat. OpenID and other similar protocols (e.g.,