Hardware-assisted call-gates
CFI
Supervisor
User & Supervisor
Binary scanning
Binary scanning and rewriting
User
Supervisor
Supervisor
User
User
User & Supervisor
Binary scanning
Binary scanning
Binary scanning
Hardware-assisted call-gates
Hardware-assisted instruction filtering
Hardware-assisted flexible filters
2.1 Instruction Filtering in Processors
x86 Processors. Recently, with the availability of Intel
2.1.1
MPK [55] on high-end commercial x86 processors, researchers
focused on deploying MPK in a secure way. To ensure the security
of Intel MPK for intra-process memory isolation, it is necessary to
prevent an untrusted component from executing WRPKRU or XRSTOR
instructions, which might lead to unauthorized access to protected
memory pages.1 As an example, consider a scenario where the
software developer aims to only allow the execution of WRPKRU
instruction in trusted parts of the code. In this example, we assume
that the software developer writes two trusted functions, namely
good_code1 and good_code2. She modifies the permission bits of
her memory protection domains through WRPKRU instructions only
in the two trusted functions and she wants to prevent the execu-
tion of WRPKRU in other parts of the code. As shown in Table 1,
various recent works leveraged different approaches to prevent the
unsafe execution of WRPKRU (and XRSTOR) instruction. Hodor [32]
leverages binary scanning and hardware watchpoints to prevent the
execution of unsafe WRPKRU instructions. ERIM [61] relies on binary
inspection and binary rewriting techniques to prevent an unsafe ex-
ecution of a WRPKRU or an XRSTOR instructions. libmpk [49] and the
work by Xu et al. [66] address the scalability issue of Intel MPK us-
ing software-based and hardware-based virtualization techniques,
respectively. These virtualization techniques [49, 66] rely on CFI
or previous approaches such as ERIM and Hodor to filter unsafe
WRPKRU instructions. Donky [58] uses a hardware-assisted call-gate
mechanism to secure the domain transitions of MPK, without the
need for binary scanning or CFI. IMIX [24] assumes the mitigation
approaches such as CFI and Code-Pointer Integrity (CPI) [41] to
prevent an attacker from reusing the trusted code containing SMOV,
an extended instruction for secure load and store.
The need to filter target instructions in x86 architecture is not
limited to user-space instructions protecting MPK. Fidelius [65]
proposes a software-based extension to protect the Virtual Ma-
chine (VM) against an untrusted hypervisor. Fidelius utilizes binary
1
XRSTOR restores the full or partial state of a processor’s state during a context switch.
The XRSTOR instruction can modify the contents of the PKRU register (which stores the
permission bits of all the domains) by setting a specific bit in the eax register before
executing the instruction [61].
scanning to restrict the execution of instructions that might hi-
jack the control flow (e.g., VMRUN) or switch the address space (e.g.,
MOV CR3). UnderBridge [30] retrofits Intel MPK for kernel space
isolation. To prevent the bypassing of the isolation enforced by
MPK, UnderBridge leverages binary scanning and rewriting. Subse-
quently, UnderBridge ensures that system servers do not contain
any explicit or implicit CR3 instructions that modify the page table
base register.
2.1.2 ARM Processors. Researchers have faced the instruction fil-
tering requirement on ARM processors too. Silhouette [67] provides
a protected implementation of the shadow stack on embedded ARM
processors. Silhouette scans the code to ensure that it does not con-
tain an instruction, such as MSR, that can be used to modify the
program state without the need for a store instruction. TZ-PKR [3]
provides a real-time protection of the OS kernel by leveraging ARM
TrustZone [50]. SKEE [4] implements a light-weight framework
for a secure kernel-level execution environment on ARM architec-
tures, without relying on a higher privileged layer. To prevent the
kernel from executing target privileged instructions, both TZ-PKR
and SKEE scan the kernel executables looking for certain control
instructions, such as MCR and LDC. These instructions are replaced
with hooks that jump to a switch gate.
2.1.3 RISC-V Processors. Multiple recent works [14, 15, 58] pro-
vided memory protection keys for RISC-V. In addition to the x86
implementation, Donky [58] provides the intra-process memory
isolation feature for RISC-V and leverages hardware-assisted call-
gates to secure its implementation. Similarly, SealPK [14, 15] im-
plements the memory protection keys for RISC-V. SealPK provides
a hardware-assisted feature allowing the software developer to re-
strict the execution of the WRPKRU instruction to a contiguous range
of memory addresses (e.g., one trusted function). Unlike the flexible
design of FlexFilt, SealPK’s implementation is limited to allowing
the execution of a fixed instruction in only one trusted function.
2.2 Shortcomings of Existing Approaches for
Instruction Filtering
As discussed before, a large number of previous works [3, 4, 30,
32, 61, 65, 67] rely on binary scanning to prevent the execution
648ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Leila Delshadtehrani, Sadullah Canakci, William Blair, Manuel Egele, and Ajay Joshi
of target instructions. In CISC architectures such as x86, one of
the challenges in filtering target instructions is the implicit (unin-
tended) occurrences of these instructions. The target instructions
can be formed implicitly across the boundary between instructions
or as a sub-sequence of a longer instruction. Filtering the target
instructions in RISC architectures, including ARM and RISC-V, is
simpler because these architectures use fixed-length instructions.
Although both ARM and RISC-V support compressed instructions
(16-bit instructions), instructions cannot be loaded at any offset in
the memory (unlike x86). As FlexFilt monitors and filters instruc-
tions at the execution stage, we are not concerned with the implicit
vs explicit occurrences of instructions.
Although binary scanning approaches are efficient for the static
code, binary scanning and subsequently binary rewriting can be
costly for dynamically generate code. In Section 6, we analyze the
overhead of scanning the Just-In-Time (JIT) compiled pages while
browsing various websites and discuss the challenges faced by
prior work to prevent the execution of target instructions in the
JIT code. FlexFilt provides flexible instruction filters that allow the
software developer to prevent the execution of target instructions
on any page, irrespective of whether the page contains static code
or dynamically generated code (e.g., JIT compiled), without relying
on binary scanning and binary rewriting.
2.3 Watchpoints and Hardware Monitors
Most modern architectures provide a number of hardware watch-
points or debug registers. A hardware watchpoint is a debugging
mechanism that allows the software developer to monitor a number
of programmer-specified memory locations. Whenever the mon-
itored locations are accessed, the hardware triggers an exception
and traps into the debugger. Unfortunately, due the limited num-
ber of hardware watchpoints in modern architectures (e.g., only 4
watchpoints in x86), it cannot effectively be used as a fine-grained
standalone solution to filter instructions at runtime.
In addition to commercially available hardware watchpoints,
researchers have proposed a variety of dedicated [29, 68] and flexi-
ble hardware monitors [16, 18–20]. iWatcher [68] provides a large
yet limited number of programmable hardware watchpoints while
Greathouse et al. [29] propose an approach that supports an un-
limited number of watchpoints. Even with an unlimited number of
watchpoints, the software developer still has to utilize binary scan-
ning to identify all the possible occurrences of target instructions
and monitor the execution of each occurrence using a watchpoint.
To leverage FlexFilt, the software developer only needs to spec-
ify the list of target instructions and the trusted parts of the code.
Flexible hardware monitors such as PUMP [20], FlexCore [18], Har-
moni [19], and PHMon [16] are capable of performing a variety of
monitoring tasks. FlexCore and Harmoni have similar capabilities
as PUMP; however, PUMP is more flexible and it has been more
extensively adopted [12, 36, 57]. Although it is feasible to leverage
PUMP to prevent the execution of target instructions, specifying
the tag checking and propagation rules for PUMP is a challenging
task. FlexFilt requires fewer and less invasive hardware modifica-
tions compared to PUMP’s invasive hardware modifications on all
stages of the CPU, caches, and main memory. PHMon can filter
the execution of target instructions in a specific range of mem-
ory addresses leveraging a number of match units. However, the
number of memory regions to filter target instructions is limited to
the number of match units. Hence, unlike FlexFilt, PHMon cannot
enforce a fine-grained instruction filtering at page granularity.
2.4 Hardware-Assisted Instruction Stream
Customization
A large number of modern processors provide the µops capabil-
ity to convert a complex ISA to simpler and easier to execute
stream of instructions. Additionally, several processors such as
IBM’s DAISY [22], Transmeta’s Crusoe and Efficieon [13], and
Nvidia’s Denver [8] implement a dynamic binary translator hard-
ware and a software layer for performance optimization. A number
of prior works provide the hardware support for runtime instruction
customization and leverage it for functionalities beyond dynamic
optimizations, e.g., safety/security checking and enforcement, pro-
filing, and dynamic code decomposition [11, 59, 60]. DISE [11] is a
programmable macro engine that translates user-defined instruc-
tion streams to customized streams at the decoder level. Importantly,
DISE does not support per-domain or address-based instruction
customization, which is a fundamental requirement in our instruc-
tion filtering use cases. Context-Sensitive Decoding (CSD) [59]
enables program instructions to be dynamically translated into
a customized set of µops. CSD can turn on and turn off the cus-
tom translations in different address ranges specified through a
set of Model-Specific Registers (MSRs). The limited number of reg-
isters available for specifying the address ranges for instruction
customization is in contrast with the requirements of some of our
use cases, e.g., filtering WRPKRU in various untrusted functions. As
modifying the contents of MSRs requires transitions to the kernel
level, frequent runtime modification of these MSRs for addressing
the limited number of available MSRs or handling the JIT compiled
code could lead to high performance overheads. Context-Sensitive
Fencing (CSF) [60] proposes a microcode level defense against Spec-
tre attacks [39] by leveraging CSD.
In principle, hardware-assisted dynamic instruction customiza-
tion approaches, such as DISE and CSD, can be complementary to
FlexFilt upon detecting a target instruction. For example, one might
be interested in replacing a target instruction with a sequence of
safe instructions, e.g., a NOP instruction. Assuming that the immi-
nent execution of a target instruction is an indication of an attack
that undermines the security of the system, we currently terminate
the program execution rather than replacing the target instruction
with safe instructions. However, in the absence of the dynamic
instruction customization support, we can provide additional flex-
ibility by performing other operations in the exception handler
instead of terminating the process, e.g., trap to a debugger.
3 BACKGROUND
We leverage the RISC-V open Instruction Set Architecture (ISA) to
design, implement, and evaluate FlexFilt. In this section, we provide
the background information on the RISC-V ISA [64]. In this paper,
our focus is on commonly used 64-bit RISC-V processors (RV64).
649FlexFilt: Towards Flexible Instruction Filtering for Security
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
RISC-V ISA dedicates four opcodes for custom instruction-set ex-
tensions. Instructions with these opcodes, called custom instruc-
tions, are reserved for customization and will not be used by future
standard extensions. We leverage RISC-V custom instructions to
configure FlexFilt. The RISC-V ISA has unprivileged [62] and privi-
leged [63] ISA specifications. Currently, the RISC-V ISA provides
three privilege levels, i.e., user/application, supervisor, and machine
modes. The highest level of privilege belongs to the machine mode,
which is a mandatory privilege level for any RISC-V core.
For RV64, RISC-V specifies two page-based virtual memory sys-
tems, i.e., Sv39 and Sv48. Sv39 and Sv48 provide a 39-bit and a
48-bit virtual address space, respectively, where in both cases the
address space is divided into 4KB pages. The privileged spec of
the RISC-V ISA specifies the virtual address translation process
and the format of the Page Table Entry (PTE). Each PTE holds the
mapping between a virtual address of a page and its corresponding
address of a physical frame. Bits 3-1 of each PTE are the page per-
mission bits, indicating whether a page is readable, writable, and
executable, respectively. The top 10 bits of an Sv39 and Sv48 PTE
(bits 63-54) are reserved for future use, e.g., to facilitate research
experiments [63]. The previous works on memory protection keys
for RISC-V including Donky [58] and SealPK [14] leverage these 10
unused bits to store the memory protection key information.
In addition to access permissions stored in PTE, RISC-V ISA
specifies the Physical Memory Protection (PMP) capability. PMP
provides a per thread view (for each hart) that enables the pro-
grammable machine mode to limit the physical addresses that are
accessible by software. PMP divides the physical memory address
into up to 16 configurable regions, where each region can be con-
figured with specific access permissions. At hardware level, a PMP
unit utilizes machine-mode CSRs to specify the memory access
permission (read, write, and execute) of each region. At runtime,
PMP checks are applied to all the accesses in user and supervisor
modes. Various previous works [37, 38, 42, 43, 53] leverage PMPs
for providing an additional security layer. One could be tempted to
implement FlexFilt on top of PMP. However, each PMP region is
specified by a contiguous range of memory addresses and there are
only 16 PMPs available. For our design, we are interested in creating
instruction domains at page granularity, which is not feasible with
16 available PMPs. Hence, we do not build our instruction domains
on top of the existing PMP feature.
4 THREAT MODEL
FlexFilt can be leveraged in a variety of security use cases intro-
duced by prior work (see Table 1). In our work, for each use case, we
follow the common threat model in the prior work. For intra-process
memory isolation approaches, we assume that the untrusted parts
of the code might contain vulnerabilities that an adversary can
exploit to inject or reuse arbitrary instructions including the target
instructions (e.g., WRPKRU). We do not assume any restrictions about
what an attacker would do after a successful attack. We assume
that the safe occurrences of target instructions in trusted parts of
the code are surrounded by call gates or trampolines similar to the
ones described in [32, 61], which protect these occurrences against
control-flow hijacking attacks.
As the OS is responsible for allocating the instruction domains
and maintaining FlexFilt’s information, we assume the OS kernel is
(partially) trusted. We assume all hardware components, including
our modifications, are trusted and bug free. Hence, rowhammer,
side-channel, and fault attacks are beyond the scope of this work.
5 DESIGN
In this section, we discuss FlexFilt’s design goals, the challenges
involved in implementing FlexFilt, and our solutions to address
those challenges. As discussed before, we identified a common
requirement for a flexible runtime instruction filtering capability
in a variety of previous works. Unlike prior works that provide
a solution capable of filtering a small number of specific target
instructions, we strive to provide a generalized solution for the
runtime filtering of target instructions. Such a generalized solution