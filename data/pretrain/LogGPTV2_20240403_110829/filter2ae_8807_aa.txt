本文来自i春秋作者:
[penguin_wwy](http://bbs.ichunqiu.com/thread-12734-1-1.html?from=paper)
### 零、问题出现
对dex文件进行加密，解密后动态加载是一种常用的加壳方式（一代壳以这种方式为主）。但这种在解密之后往往会产生一个解密后的完整dex。过程一般是这样的
打开文件
`File file = new File("classes.dex");`
读取字节码
`byte[] buffer = new FileInputStream(file).read();`
解密字节码
`decrypt(buffer)`
重写到文件
`File newFile = new File("classes_decrypt.dex"); new
FileOutputStream(newFile).write(buffer);`
加载dex
`DexClassLoader dexClassLoader = new
DexClassLoader("classes_decrypt.dex"...);`
可见在重写到文件这一步，就有可能被截获到解密后的dex，那加密dex的意义就完全不存在了。
当然也有过许多办法，比如加载完后删除文件、或者隐藏文件等等，但都没法从根本上解决问题。而最有实际意义的方法就是今天要说的，不落地加载dex。
### 一、理论基础
不落地的含义就是说在解密后直接由字节码进行加载，不需要变成dex文件。Dalvik中的两种类加载器DexClassLoader和PathClassLoader显然都不具备这个能力。我们需要自己定义一个类加载器。
那如何自己定义呢？我们先分析一下DexClassLoader加载的过程（详细分析请看我的博客）。这里简单说明一下，首先是DexClassLoader的构造函数
源码位置 libcore\dalvik\src\main\java\dalvik\system\DexClassLoader.java
    public class DexClassLoader extends BaseDexClassLoader {
    /**
    * Creates a {[url=home.php?mod=space&uid=74926]@Code[/url] DexClassLoader} that finds interpreted and native
    * code. Interpreted classes are found in a set of DEX files contained
    * in Jar or APK files.
    *
    * The path lists are separated using the character specified by the
    * {@code path.separator} system property, which defaults to {@code :}.
    *
    * @param dexPath the list of jar/apk files containing classes and
    * resources, delimited by {@code File.pathSeparator}, which
    * defaults to {@code ":"} on Android
    * @param optimizedDirectory directory where optimized dex files
    * should be written; must not be {@code null}
    * @param libraryPath the list of directories containing native
    * libraries, delimited by {@code File.pathSeparator}; may be
    * {@code null}
    * @param parent the parent class loader
    */
    public DexClassLoader(String dexPath, String optimizedDirectory,
    String libraryPath, ClassLoader parent) {
    super(dexPath, new File(optimizedDirectory), libraryPath, parent);
    }
    }
实质上是对它的父类，BaseDexClassLoader的构造 源码位置
libcore\dalvik\src\main\java\dalvik\system\BaseDexClassLoader.java
    public BaseDexClassLoader(String dexPath, File optimizedDirectory,
    String libraryPath, ClassLoader parent) {
    super(parent);
    this.pathList = new DexPathList(this, dexPath, libraryPath, optimizedDirectory);
    }
libcore\dalvik\src\main\java\dalvik\system\DexPathList.java
    public DexPathList(ClassLoader definingContext, String dexPath,
    String libraryPath, File optimizedDirectory) {
    if (definingContext == null) {
    throw new NullPointerException("definingContext == null");
    }
    if (dexPath == null) {
    throw new NullPointerException("dexPath == null");
    }
    if (optimizedDirectory != null) {
    if (!optimizedDirectory.exists()) {
    throw new IllegalArgumentException(
    "optimizedDirectory doesn't exist: "
    + optimizedDirectory);
    }
    if (!(optimizedDirectory.canRead()
    && optimizedDirectory.canWrite())) {
    throw new IllegalArgumentException(
    "optimizedDirectory not readable/writable: "
    + optimizedDirectory);
    }
    }
    this.definingContext = definingContext;
    this.dexElements = makeDexElements(splitDexPath(dexPath), optimizedDirectory);
    this.nativeLibraryDirectories = splitLibraryPath(libraryPath);
    }
重点在函数makeDexElements
    private static Element[] makeDexElements(ArrayList files,
    File optimizedDirectory) {
    ArrayList elements = new ArrayList();
    /*
    * Open all files and load the (direct or contained) dex files
    * up front.
    */
    for (File file : files) {
    File zip = null;
    DexFile dex = null;
    String name = file.getName();
    if (name.endsWith(DEX_SUFFIX)) {
    // Raw dex file (not inside a zip/jar).
    try {
    dex = loadDexFile(file, optimizedDirectory);
    } catch (IOException ex) {
    System.logE("Unable to load dex file: " + file, ex);
    }
    } else if (name.endsWith(APK_SUFFIX) || name.endsWith(JAR_SUFFIX)
    || name.endsWith(ZIP_SUFFIX)) {
    zip = file;
    try {
    dex = loadDexFile(file, optimizedDirectory);
    } catch (IOException ignored) {
    /*
    * IOException might get thrown "legitimately" by
    * the DexFile constructor if the zip file turns
    * out to be resource-only (that is, no
    * classes.dex file in it). Safe to just ignore
    * the exception here, and let dex == null.
    */
    }
    } else if (file.isDirectory()) {
    // We support directories for looking up resources.
    // This is only useful for running libcore tests.
    elements.add(new Element(file, true, null, null));
    } else {
    System.logW("Unknown file type for: " + file);
    }
    if ((zip != null) || (dex != null)) {
    elements.add(new Element(file, false, zip, dex));
    }
    }
    return elements.toArray(new Element[elements.size()]);
    }
根据文件后缀名的判断选择分支，然后调用loadDex函数
    private static DexFile loadDexFile(File file, File optimizedDirectory)
    throws IOException {
    if (optimizedDirectory == null) {
    return new DexFile(file);
    } else {
    String optimizedPath = optimizedPathFor(file, optimizedDirectory);
    return DexFile.loadDex(file.getPath(), optimizedPath, 0);
    }
    }
DexFile.loadDex这个函数的内部也只是构造一个DexFile对象，所以直接看DexFile的构造函数就好
    private DexFile(String sourceName, String outputName, int flags) throws IOException {
    if (outputName != null) {
    try {
    String parent = new File(outputName).getParent();
    if (Libcore.os.getuid() != Libcore.os.stat(parent).st_uid) {
    throw new IllegalArgumentException("Optimized data directory " + parent
    + " is not owned by the current user. Shared storage cannot protect"
    + " your application from code injection attacks.");
    }
    } catch (ErrnoException ignored) {
    // assume we'll fail with a more contextual error later
    }
    }
    mCookie = openDexFile(sourceName, outputName, flags);
    mFileName = sourceName;
    guard.open("close");
    //System.out.println("DEX FILE cookie is " + mCookie);
    }
重点的重点在openDexFile，这个函数负责最终的dex文件加载
运行流程
DexClassLoader ——> BaseDexClassLoader ——> DexPathList ——> makeDexElements ——>
loadDex ——> DexFile
这个openDexFile函数是一个native函数，在libdvm.so中，看对应的函数表
    const DalvikNativeMethod dvm_dalvik_system_DexFile[] = { 
    { "openDexFile", "(Ljava/lang/String;Ljava/lang/String;I)I", 
    Dalvik_dalvik_system_DexFile_openDexFile }, 
    { "openDexFile", "([B)I", 