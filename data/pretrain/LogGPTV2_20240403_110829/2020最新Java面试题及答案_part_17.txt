5.1.2. JAVA反射
5.1.2.1. 动态语言
动态语言，是指程序在运行时可以改变其结构：新的函数可以引进，已有的函数可以被删除等结
构上的变化。比如常见的JavaScript就是动态语言，除此之外Ruby,Python等也属于动态语言，
而C、C++则不属于动态语言。从反射角度说JAVA属于半动态语言。
5.1.2.2. 反射机制概念 （运行状态中知道类所有的属性和方法）
在 Java 中的反射机制是指在运行状态中，对于任意一个类都能够知道这个类所有的属性和方法；
并且对于任意一个对象，都能够调用它的任意一个方法；这种动态获取信息以及动态调用对象方
法的功能成为Java语言的反射机制。
5.1.2.3. 反射的应用场合
编译时类型和运行时类型
在Java程序中许多对象在运行是都会出现两种类型：编译时类型和运行时类型。 编译时的类型由
声明对象时实用的类型来决定，运行时的类型由实际赋值给对象的类型决定 。如：
Person p=new Student();
其中编译时类型为Person，运行时类型为Student。
13/04/2018 Page 103 of 283
的编译时类型无法获取具体方法
程序在运行时还可能接收到外部传入的对象，该对象的编译时类型为 Object,但是程序有需要调用
该对象的运行时类型的方法。为了解决这些问题，程序需要在运行时发现对象和类的真实信息。
然而，如果编译时根本无法预知该对象和类属于哪些类，程序只能依靠运行时信息来发现该对象
和类的真实信息，此时就必须使用到反射了。
5.1.2.4. Java反射API
反射API用来生成JVM中的类、接口或则对象的信息。
1. Class类：反射的核心类，可以获取类的属性，方法等信息。
2. Field类：Java.lang.reflec包中的类，表示类的成员变量，可以用来获取和设置类之中的属性
值。
3. Method类： Java.lang.reflec包中的类，表示类的方法，它可以用来获取类中的方法信息或
者执行方法。
4. Constructor类： Java.lang.reflec包中的类，表示类的构造方法。
5.1.2.5. 反射使用步骤（获取Class对象、调用对象方法）
1. 获取想要操作的类的Class 对象，他是反射的核心，通过Class 对象我们可以任意调用类的方
法。
2. 调用Class类中的方法，既就是反射的使用阶段。
3. 使用反射API来操作这些信息。
5.1.2.6. 获取Class对象的3种方法
调用某个对象的getClass()方法
Person p=new Person();
Class clazz=p.getClass();
调用某个类的class属性来获取该类对应的Class对象
Class clazz=Person.class;
使用Class类中的forName()静态方法(最安全/性能最好)
Class clazz=Class.forName("类的全路径"); (最常用)
当我们获得了想要操作的类的 Class对象后，可以通过Class类中的方法获取并查看该类中的方法
和属性。
//获取Person类的Class对象
Class clazz=Class.forName("reflection.Person");
13/04/2018 Page 104 of 283
//获取Person类的所有方法信息
Method[] method=clazz.getDeclaredMethods();
for(Method m:method){
System.out.println(m.toString());
}
//获取Person类的所有成员属性信息
Field[] field=clazz.getDeclaredFields();
for(Field f:field){
System.out.println(f.toString());
}
//获取Person类的所有构造方法信息
Constructor[] constructor=clazz.getDeclaredConstructors();
for(Constructor c:constructor){
System.out.println(c.toString());
}
5.1.2.7. 创建对象的两种方法
Class对象的newInstance()
1. 使用 Class 对象的 newInstance()方法来创建该 Class 对象对应类的实例，但是这种方法要求
该Class对象对应的类有默认的空构造器。
调用Constructor对象的newInstance()
2. 先使用Class对象获取指定的Constructor对象，再调用Constructor对象的newInstance()
方法来创建 Class对象对应类的实例,通过这种方法可以选定构造方法创建实例。
//获取Person类的Class对象
Class clazz=Class.forName("reflection.Person");
//使用.newInstane方法创建对象
Person p=(Person) clazz.newInstance();
//获取构造方法并创建对象
Constructor c=clazz.getDeclaredConstructor(String.class,String.class,int.class);
//创建对象并设置属性
13/04/2018 Page 105 of 283
Person p1=(Person) c.newInstance("李四","男",20);
5.1.3. JAVA注解
5.1.3.1. 概念
Annotation（注解）是 Java 提供的一种对元程序中元素关联信息和元数据（metadata）的途径
和方法。Annatation(注解)是一个接口，程序可以通过反射来获取指定程序中元素的 Annotation
对象，然后通过该Annotation对象来获取注解中的元数据信息。
5.1.3.2. 4种标准元注解
元注解的作用是负责注解其他注解。 Java5.0 定义了4 个标准的meta-annotation类型，它们被
用来提供对其它 annotation类型作说明。
@Target修饰的对象范围
@Target说明了Annotation所修饰的对象范围： Annotation可被用于 packages、types（类、
接口、枚举、Annotation 类型）、类型成员（方法、构造方法、成员变量、枚举值）、方法参数
和本地变量（如循环变量、catch参数）。在Annotation类型的声明中使用了target可更加明晰
其修饰的目标
@Retention定义 被保留的时间长短
Retention 定义了该Annotation被保留的时间长短：表示需要在什么级别保存注解信息，用于描
述注解的生命周期（即：被描述的注解在什么范围内有效），取值（RetentionPoicy）由：
(cid:132) SOURCE:在源文件中有效（即源文件保留）
(cid:132) CLASS:在class文件中有效（即class保留）
(cid:132) RUNTIME:在运行时有效（即运行时保留）
@Documented描述-javadoc
@ Documented 用于描述其它类型的 annotation 应该被作为被标注的程序成员的公共 API，因
此可以被例如javadoc此类的工具文档化。
@Inherited阐述了某个被标注的类型是被继承的
@Inherited 元注解是一个标记注解，@Inherited 阐述了某个被标注的类型是被继承的。如果一
个使用了@Inherited 修饰的 annotation 类型被用于一个 class，则这个 annotation 将被用于该
class的子类。
13/04/2018 Page 106 of 283
5.1.3.3. 注解处理器
如果没有用来读取注解的方法和工作，那么注解也就不会比注释更有用处了。使用注解的过程中，
很重要的一部分就是创建于使用注解处理器。Java SE5扩展了反射机制的API，以帮助程序员快速
的构造自定义注解处理器。下面实现一个注解处理器。
/1：*** 定义注解*/
@Target(ElementType.FIELD)
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface FruitProvider {
/**供应商编号*/
public int id() default -1;
/*** 供应商名称*/
public String name() default ""；
13/04/2018 Page 107 of 283
/** * 供应商地址*/
public String address() default "";
}
//2：注解使用
public class Apple {
@FruitProvider(id = 1, name = "陕西红富士集团", address = "陕西省西安市延安路")
private String appleProvider;
public void setAppleProvider(String appleProvider) {
this.appleProvider = appleProvider;
}
public String getAppleProvider() {
return appleProvider;
}
}
/3：*********** 注解处理器 ***************/
public class FruitInfoUtil {
public static void getFruitInfo(Class clazz) {
String strFruitProvicer = "供应商信息：";
Field[] fields = clazz.getDeclaredFields();//通过反射获取处理注解
for (Field field : fields) {
if (field.isAnnotationPresent(FruitProvider.class)) {
FruitProvider fruitProvider = (FruitProvider) field.getAnnotation(FruitProvider.class);
//注解信息的处理地方
strFruitProvicer = " 供应商编号：" + fruitProvider.id() + " 供应商名称："
+ fruitProvider.name() + " 供应商地址："+ fruitProvider.address();
System.out.println(strFruitProvicer);
}
}
}
}
13/04/2018 Page 108 of 283
public class FruitRun {
public static void main(String[] args) {
FruitInfoUtil.getFruitInfo(Apple.class);
/***********输出结果***************/
// 供应商编号：1 供应商名称：陕西红富士集团 供应商地址：陕西省西安市延
}
}
5.1.4. JAVA内部类
Java 类中不仅可以定义变量和方法，还可以定义类，这样定义在类内部的类就被称为内部类。根
据定义的方式不同，内部类分为静态内部类，成员内部类，局部内部类，匿名内部类四种。
5.1.4.1. 静态内部类
定义在类内部的静态类，就是静态内部类。
public class Out {
private static int a;
private int b;
public static class Inner {
public void print() {
System.out.println(a);
}
}
}
1. 静态内部类可以访问外部类所有的静态变量和方法，即使是private的也一样。
2. 静态内部类和一般类一致，可以定义静态变量、方法，构造方法等。
3. 其它类使用静态内部类需要使用“外部类.静态内部类”方式，如下所示：Out.Inner inner =
new Out.Inner();inner.print();
4. Java集合类HashMap内部就有一个静态内部类Entry。Entry是HashMap存放元素的抽象，
HashMap 内部维护 Entry 数组用了存放元素，但是 Entry 对使用者是透明的。像这种和外部
类关系密切的，且不依赖外部类实例的，都可以使用静态内部类。
13/04/2018 Page 109 of 283
5.1.4.2. 成员内部类
定义在类内部的非静态类，就是成员内部类。成员内部类不能定义静态方法和变量（final 修饰的