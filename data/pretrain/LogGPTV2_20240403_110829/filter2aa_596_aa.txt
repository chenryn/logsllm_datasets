# WSUSpendu

## Authors
- Romain Coltel (PI:EMAIL)
- Yves Le Provost (PI:EMAIL)

## Table of Contents
1. Introduction
2. WSUS and Network Architecture
   2.1 Architectures Presentation
   2.2 Auto-Approved Updates
   2.3 State of the Art - WSUSpect and Technical Limitations
3. WSUS Internals
   3.1 IIS Web Service
   3.2 Database
   3.3 WSUS Service
4. Injecting a New Update
   4.1 Interaction with the Database
   4.2 Update Metadata
   4.3 Update’s Binary Upload
   4.4 Injecting into the Database
   4.5 Targeting a Specific Client
   4.6 Update Deployment
5. Introducing WSUSpendu
6. Auditing WSUS
7. Microsoft Network Architecture Issues
   7.1 Administration Principles
   7.2 One WSUS Server for Multiple Forests
   7.3 A WSUS Server for a Disconnected Network
8. Recommendations
   8.1 Securing the WSUS Service Itself
   8.2 Multiple WSUS Servers Architectures
   8.3 Disconnected Networks Case
9. Conclusion
10. Bibliography

## 1. Introduction
Windows Server Update Services (WSUS) is a Microsoft service designed to deploy updates across an organization's computer network, ensuring a secure and up-to-date infrastructure. It is user-friendly and adaptable to various patch policies. However, its primary function—deploying software patches on a large number of systems—can be exploited if misused. Paul Stone and Alex Chapman demonstrated this at Black Hat 2015 [3] with the tool WSUSpect, which performs a Man-in-the-Middle (MITM) attack to inject malicious updates. This method, however, can be thwarted by network protections.

This article aims to highlight the potential security issues associated with WSUS, particularly when the server is compromised. We will introduce a new tool, WSUSpendu, which directly injects updates into the WSUS service, bypassing network restrictions. Additionally, we will discuss the auditing of WSUS, focusing on the collection of coherent update states from all systems. Finally, we will address the critical positioning of WSUS in network architectures and propose recommended configurations to protect domain controllers.

## 2. WSUS and Network Architecture

### 2.1 Architectures Presentation
The following section outlines common WSUS architectures, which vary based on the network's complexity and connectivity to the internet.

#### Simple Architecture
In the simplest configuration, there is a single WSUS server that updates its clients and connects to the internet to fetch patches from Microsoft servers (Figure 1.1). The communication between the WSUS server and Windows Update servers uses HTTPS, and the SSL certificate is verified to prevent spoofing. Clients receive updates via HTTPS or HTTP, depending on the server's configuration.

**Figure 1.1: Simple WSUS Architecture**
```
Microsoft Update
Internet
|
WSUS Server
|
Clients
```

#### Tree Architecture
For larger organizations with multiple sites, a tree architecture is used (Figure 1.2). An upstream server connected to the internet distributes updates to downstream replica servers, which serve specific sites or subnetworks. This architecture can also support autonomous systems where updates are copied but not automatically approved.

**Figure 1.2: WSUS Tree Architecture**
```
Microsoft Update
Internet
|
Upstream WSUS Server
| \
|  Replica
|  Domain B
|
Replica
Domain A
```

#### Shared Server Architecture
In some large companies, multiple domains or forests may share a WSUS server to reduce bandwidth and synchronization time (Figure 1.3). This setup can lead to one forest's WSUS server controlling another's, as described in section 3.6.

**Figure 1.3: Shared WSUS Architecture**
```
Microsoft Update
Internet
|
WSUS Server (Domain A)
|
Replica (Domain B)
```

#### Disconnected Network Architecture
For highly sensitive networks, a disconnected WSUS server is used (Figure 1.4). Updates are transferred using two WSUS servers: one on the connected network (export server) and one on the disconnected network (import server). The process involves transferring update directories and metadata using the `wsusutil` tool.

**Figure 1.4: Disconnected WSUS Architecture**
```
Microsoft Update
Internet
|
WSUS Export Server
|
Disconnected Network
|
WSUS Import Server
```

### 2.2 Auto-Approved Updates
WSUS allows for both manual and automatic approval of updates. By default, a rule is created to automatically approve critical and security updates. Additionally, updates and revisions to already validated updates are automatically approved. The WSUS database can be manipulated to add, approve, or modify updates, as detailed in section 2.2.

### 2.3 State of the Art - WSUSpect and Technical Limitations
Few attacks target the Windows update mechanism. The most notable is WSUSpect, presented by Paul Stone and Alex Chapman at BlackHat USA 2015 [3]. WSUSpect requires the client to use the attacker's machine as a proxy, either through user configuration or the WPAD protocol. The attack intercepts and tampers with update requests, injecting malicious metadata and binaries. However, it fails if the network stream is encrypted, as SSL/TLS is typically not deployed in enterprise environments.

## 3. WSUS Internals

### 3.1 IIS Web Service
The WSUS service relies on the Internet Information Services (IIS) web service to manage updates. IIS handles the distribution of updates to clients and the management of the update repository.

### 3.2 Database
The WSUS database stores update metadata and ensures data integrity through triggers. These triggers verify the consistency of data during insertions and updates, making it possible to manipulate the database to inject or modify updates.

### 3.3 WSUS Service
The WSUS service coordinates the entire update process, including fetching updates from Microsoft, approving them, and distributing them to clients. It interacts with the IIS web service and the database to manage the update lifecycle.

## 4. Injecting a New Update

### 4.1 Interaction with the Database
To inject a new update, the attacker must interact with the WSUS database. This involves creating new entries and modifying existing ones to add the update.

### 4.2 Update Metadata
Update metadata includes information such as the update title, description, and installation instructions. The attacker must create and inject this metadata to make the update appear legitimate.

### 4.3 Update’s Binary Upload
The binary file of the update must be uploaded to the WSUS server. This file is then distributed to clients as part of the update process.

### 4.4 Injecting into the Database
Once the binary is uploaded, the metadata and binary reference are injected into the WSUS database. This step ensures that the update is recognized and distributed by the WSUS service.

### 4.5 Targeting a Specific Client
The attacker can target specific clients by configuring the update to apply only to certain groups or machines. This can be done through group policies or by manipulating the WSUS database.

### 4.6 Update Deployment
After injection, the update is deployed to the targeted clients. The WSUS service manages the deployment process, ensuring that the update is installed according to the configured policies.

## 5. Introducing WSUSpendu
WSUSpendu is a new tool designed to inject updates directly into the WSUS service, bypassing network restrictions. Unlike WSUSpect, which requires a MITM attack, WSUSpendu manipulates the WSUS database and service directly, making it more effective in environments with strong network protections.

## 6. Auditing WSUS
Auditing WSUS involves collecting and verifying the states of updates on all systems. Direct access to the WSUS server allows for the automation of this process, ensuring that the collected data is consistent and reliable.

## 7. Microsoft Network Architecture Issues

### 7.1 Administration Principles
Effective administration of WSUS requires a clear understanding of the network architecture and the roles of different WSUS servers. Proper configuration and management are crucial to maintaining a secure and efficient update process.

### 7.2 One WSUS Server for Multiple Forests
Using a single WSUS server for multiple forests can simplify management but introduces risks. If the server is compromised, it can affect all connected forests. Careful planning and security measures are necessary to mitigate these risks.

### 7.3 A WSUS Server for a Disconnected Network
Disconnected networks require a special WSUS configuration to ensure that updates can be applied without an internet connection. The use of export and import servers, or virtualization, can help manage this process, but it must be done carefully to avoid security vulnerabilities.

## 8. Recommendations

### 8.1 Securing the WSUS Service Itself
To secure the WSUS service, implement strong authentication and access controls. Regularly audit the service and monitor for suspicious activity. Ensure that the WSUS server is kept up to date with the latest security patches.

### 8.2 Multiple WSUS Servers Architectures
Using multiple WSUS servers can improve security and efficiency. Each server can be configured to serve a specific segment of the network, reducing the impact of a compromise. Implement strict access controls and regular audits to maintain security.

### 8.3 Disconnected Networks Case
For disconnected networks, use a combination of export and import servers, or virtualization, to manage updates. Ensure that the transfer process is secure and that the WSUS server on the disconnected network is properly configured and monitored.

## 9. Conclusion
WSUS is a powerful tool for managing updates in an organization, but it can also be a significant security risk if misused. By understanding the potential vulnerabilities and implementing best practices, organizations can ensure that their WSUS deployments are secure and effective. The introduction of tools like WSUSpendu highlights the need for continuous vigilance and improvement in WSUS security.

## 10. Bibliography
[1] WSUSoffline Tool
[3] Paul Stone and Alex Chapman, "WSUSpect: Exploiting the Windows Update Process," BlackHat USA 2015

---

This revised version provides a clearer, more structured, and professional presentation of the content.