WSUSpendu
ANSSI
Romain Coltel PI:EMAIL
Yves Le Provost PI:EMAIL
2
WSUSpendu
Contents
Introduction
5
WSUS and network architecture
7
1.1
Architectures presentation
7
1.2
Auto approved updates
10
1.3
State of the art - WSUSpect and technical limitations
11
WSUS internals
13
2.1
IIS Webservice
13
2.2
Database
15
2.3
WSUS service
15
Injecting a new update
17
3.1
Interaction with the database
17
3.2
Update metadata
17
3.3
Update’s binary upload
20
3.4
Injecting in the database
21
3.5
Targeting a specific client
22
3.6
Update deployment
22
Introducing WSUSpendu
23
Auditing WSUS
25
Microsoft network architecture issues
27
6.1
Administration principles
27
6.2
One WSUS server for multiple forests
27
6.3
A WSUS server for a disconnected network
28
Recommendations
29
7.1
Securing the WSUS service itself
29
3
WSUSpendu
7.2
Multiple WSUS servers architectures
29
7.3
Disconnected networks case
30
Conclusion
31
Bibliography
33
4
WSUSpendu
Introduction
WSUS is a Microsoft service that deploys updates on the computer park depending on
the organization’s needs, which is essential for a secured infrastructure. Easy to use
and to install, it is possible to adapt it according to the different patch policy of every
organization. However, the service’s purpose is to install softwares (patches in that case)
on a large number of operating systems. Thus it is easy to understand that a misuse
of its legitimate functionality could be critical for the network security. Such a case has
been presented by Paul Stone and Alex Chapman during Black Hat 2015 [3]. Their
presentation resulted on the provision of a new tool named WSUSpect. This tool was
created to exploit a MITM attack and to inject an additional and malicious update in the
connection between client and server. However, an attacker will not always be able to
use this tool, especially if network protections have been configured. In another case,
an update server could be placed at the border of the network (to distribute update to
this other network). Thereby, the method used by WSUSpect will fail.
The purpose of this article is to demonstrate the different problems the usage of WSUS
presents. The functionalities and the server position in the network could lead to a
dangerous situation. We will first present the different elements used by the service. In
a second time, we will approach a method to circumvent the limitations of WSUSpect
if the WSUS server is compromised.
A new tool will be proposed.
This tool uses
the technique of direct injection of updates in the WSUS service rather than in the
network flow, to avoid the network restrictions. After that, we will detail the WSUS
service in the audit point of view. Indeed, a major issue in patch management audit
process is to collect the states of the updates on every system. These states must be
coherent. Direct access on the WSUS server allows us to circumvent these limitations.
Studying WSUS and its architecture leads to the elaboration of audit scripts in order to
automatize the collection of information. Finally, we will return to the various problems
of WSUS, particularly with regards to its critical positioning in the architecture. These
new perspectives will lead to the elaboration of a recommended architecture in order
to protect domain controllers, which are potential clients of a WSUS server.
5
WSUSpendu
WSUS and network architecture
This part presents the different architectures with a WSUS server. These architectures
are commonly used and their choices depend on the complexity and the nature of the
network and if it is connected or not to Internet.
1.1
Architectures presentation
Each architecture presented in this part contains at least one WSUS server. The case
of clients without WSUS subscription, e.g. directly connected to the Windows Update
server, is not dealt with in this article. Except this last example, the most common con-
figuration is the one where there is only one update server (see figure 1.1). This server
updates its own clients and is connected to Internet to obtain the patch from Microsoft
servers. Communication between the WSUS server and Windows Update servers must
use the HTTPS protocol (this configuration point is not editable). The SSL certificate is
checked by the WSUS server in order to avoid malicious updates by spoofing legitimate
servers. Clients obtain their updates with the WSUS server according to the server con-
figuration: using the HTTPS protocol if the server is configured with SSL, or the HTTP
protocol if not. Configuring the HTTPS protocol in an enterprise environment is not
that easy, and this situation will be explained later (see section 1.3).
Microsoft Update
Internet
Serveur WSUS
Clients WSUS
Figure 1.1: Architecture WSUS simple
A bigger organization, with multiple geographical sites for example, will use more than
one WSUS server. In this case, a tree architecture will be used (see figure 1.2). An up-
stream server is connected to Internet. Other WSUS servers, named « replica », spread
7
WSUSpendu
updates for one site or one subnetwork. It is also possible to use this kind of architec-
ture with autonomous system. In this case, updates are copied but not automatically
approved as they are with the replicas case.
Upstream and downstream concept appear here in this architecture:
• An upstream server is a server that provides its updates to another WSUS
server (Each WSUS server will ultimately depend of the Microsoft upstream server:
Windows Update server.
• A downstream server is a server that receives the updates from an upstream
server.
Microsoft Update
Internet
Serveur WSUS
Replica
Replica
Domaine B
Domaine A
Figure 1.2: WSUS servers with replicas
These two architectures are recommended by Microsoft. However, they are not suffi-
cient for certain organizations. Two other architectures can be observed.
The first one is often seen in relatively large companies: it has several domains or
forests which are not necessarily connected by trust Active Directory relationships. In
these architectures, we often see shared servers for the support functions. Although
domains have no relationships, update servers often have a common link: the WSUS
server of one of the domains is used as a reference to the other network’s WSUS server
(with the use of replicas) (cf. figure 1.3). The aim is to limit the bandwidth and the time
used to retrieve updates from the Windows Update server. Indeed, synchronization with
the Microsoft server is often very long. With this architecture, there could be a potential
control of one forest’s WSUS server over another forest’s WSUS server. This relationship
is described in section 3.6.
The last architecture presented in this article comes from a special case: the discon-
nected network. This case is very specific since it links two security issues: updates and
8
WSUSpendu
Microsoft Update
Internet
Serveur WSUS
Replica
Domaine B
Domaine A
Figure 1.3: WSUS architecture with servers dependencies between domains
confidentiality. If the network is disconnected it usually is because of its sensitivity (data
confidentiality, network sensitivity and safety, for example in case of industrial networks).
Network segregation must therefore provide additional security to the connected net-
work. However, this segregation should be only an additional barrier in the network
protection and should not be used as a pretext for lower security measures. Therefore,
the update process need to continue. In this case, this cannot be done without an In-
ternet connection. Updates are therefore one of the few vectors of data injection from
a network connected to the Internet to the disconnected network. If it is possible to
use the updates to inject malicious code, then there is a takeover relationship of these
networks, and only the data-extraction part is missing.
Microsoft has planned for this use-case. In this way, the update process relies on the
use of two WSUS servers. One of them is installed on the connected network (named
WSUS export server in this case), the other one is installed on the disconnected network
(named WSUS import server). The connected server takes its update in the normal
form (however, be aware of the method of synchronizing update binaries that must be
downloaded immediately and not only when they are approved). All data must then
be transferred to the WSUS import server using the following method:
• the directory containing the updates must be saved and transferred to the
import server. This directory is used in particular by the IIS server (see section 2.1);
• metadata contained in the WSUS database (see section 2.2) must be exported
with the help of the wsusutil tool (see listing 1.1). The resulting files 
and  must be copied from the export server to the import server.
• metadata is then injected into the import server, again using the wsusutil tool.
9
WSUSpendu
Listing 1.1: Usage of wsusutil to export metadata
This process is relatively time-consuming and needs a lot of processing to transfer the
data. As an example, Microsoft announces an operation taking between 3 and 4
hours. It is therefore often abandoned by system administrators in favor of two other
solutions. The first solution uses the WSUSoffline tool [1]. This tool has the advantage
of automatically performing the transfer preparation from one server to another. The
data then only has to be copied between the two servers. Handling is therefore greatly
facilitated. However, this opensource tool is not edited by Microsoft. It is therefore
often behind the functionalities of the operating systems and the WSUS service itself.
For instance, the version at the time of writing does not yet support Windows 10 nor
Windows Server 2016. This solution is therefore not entirely satisfactory.
An alternative approach consisting on using virtualization, where only one server is
used, is more often deployed. Indeed, the WSUS server, which is linked to the network
connected to the internet, is updated in a normal way. Its characteristic is being a
virtual machine that will be cloned and installed subsequently on the disconnected
network. That way, updates and their metadata are ready to be broadcast on the
disconnected network. In this case, the installed systems within this network haven’t
been approved by the WSUS server. However, this registration is performed without
any human intervention; either the WSUS server automatically adds -without restriction-
any machine that can be attached to the WSUS server on a default group, or the
client’s attachment can be specified by a GPO configuration. In this case, clients will
be created when necessary. These groups can then receive the approved updates and
the administrator can modify and validate them to the specific needs as in any WSUS
server.
1.2
Auto approved updates
For all these architectures, it is possible to manually push any appliance software up-
dates suggested by Microsoft after the testing and evaluation process. But it is also
possible to automatically apply updates according to certain criteria.
When installing WSUS, a rule, which is disabled by default, is created and allows,
when activated, to accept automatically the installation of all the ”critical” or ”security”
updates on WSUS clients, among other classifications. Automatic deployment rules can
be configured to select any update classification for any product class. For example,
we can choose to accept automatically the ”critical” updates for all the Windows 7
servers.
10
WSUSpendu
Microsoft Update
Internet
Serveur WSUS
Domaine B
Domaine A
Serveur WSUS
clone
Figure 1.4: WSUS architecture in disconnected network
Furthermore, WSUS server updates and revisions to an already validated update are
automatically approved by default.
In addition, as detailed in the section 2.2, the WSUS service heavily relies on the
database. This database uses a number of triggers activated by certain events, such as
when inserting data into tables, to verify the integrity and consistency of the data. It is
possible to create new database entries that can allow an attacker to add an update,
to approve an update or to make an update ineffective by modifying its metadata.
1.3
State of the art - WSUSpect and technical
limitations
Few attacks exist to date on the Windows update mechanism. Only Paul Stone and
Alex Chapman’s presentation at BlackHat USA 2015 [3] sheds light on the sensitivity
of this process as well as the importance of controlling an update, or at least a part of
it.
For the WSUSpect to work, the client has to use the attacker’s machine as a proxy.
One of the way for performing this attack is for a (non privileged) user on the client to
set up the proxy. Another way to perform this attack is to use the WPAD protocol. It is
possible to perform a man in the middle attack between the client and the WSUS server
in order to inject a malicious update. SOAP (Simple Object Access Protocol) over HTTP
is used between the client and the server. These protocols can be encapsulated within
an SSL/TLS layer as any HTTP connection. In this latter case, the encryption process
11
WSUSpendu
requires the deployment of a public key infrastructure (PKI) within the company which
is not performed usually. However, the attack requires a non encrypted network stream
to be successful. WSUSpect is simple as it intercepts an update request from a client
and tampers with it to add its malicious update. The server’s response is modified by
inserting metadata and binaries to attempt to execute arbitrary code on the client.
The WSUS process needs to have signed binary to accept an update. The Trusted Root
Certificates and the Trusted Publishers stores of the local machine are used to check
the signature. With this configuration it is not possible to modify an update by injecting
an arbitrary binary. Nevertheless, the command arguments are not included in the
signature check. Thus, it is possible to use a signed binary and to modify its argu-