## 进程树

在Linux系统中，所有进程都是从父进程通过`fork`系统调用创建的。因此，必然存在一个始祖进程，即系统启动时的`init`进程。在Linux启动过程中，1号进程是`/sbin/init`。在CentOS 7中，可以通过以下命令查看：

```sh
ls -l /sbin/init
```

输出结果如下：

```sh
/sbin/init -> ../lib/systemd/systemd
```

这表明`/sbin/init`实际上是一个指向`systemd`的符号链接。

### 系统启动过程

系统启动后，`init`进程会启动多个守护进程（daemon），为系统提供各种服务。接着，`init`进程会启动`getty`，使用户能够登录系统。用户登录后运行的Shell会进一步创建其他进程，从而形成一棵进程树。

我们可以通过`ps -ef`命令查看当前系统中的所有进程。以下是部分输出示例：

```sh
[root@deployer ~]# ps -ef
UID        PID  PPID  C STIME TTY          TIME CMD
root         1     0  0  2018 ?        00:00:29 /usr/lib/systemd/systemd --system --deserialize 21
root         2     0  0  2018 ?        00:00:00 [kthreadd]
root         3     2  0  2018 ?        00:00:00 [ksoftirqd/0]
root         5     2  0  2018 ?        00:00:00 [kworker/0:0H]
root         9     2  0  2018 ?        00:00:40 [rcu_sched]
...
root       337     2  0  2018 ?        00:00:01 [kworker/3:1H]
root       380     1  0  2018 ?        00:00:00 /usr/lib/systemd/systemd-udevd
root       415     1  0  2018 ?        00:00:01 /sbin/auditd
root       498     1  0  2018 ?        00:00:03 /usr/lib/systemd/systemd-logind
...
root       852     1  0  2018 ?        00:06:25 /usr/sbin/rsyslogd -n
root      2580     1  0  2018 ?        00:00:00 /usr/sbin/sshd -D
root     29058     2  0 Jan03 ?        00:00:01 [kworker/1:2]
root     29672     2  0 Jan04 ?        00:00:09 [kworker/2:1]
root     30467     1  0 Jan06 ?        00:00:00 /usr/sbin/crond -n
...
root     32792  2580  0 Jan10 ?        00:00:00 sshd: root@pts/0
root     32794 32792  0 Jan10 pts/0    00:00:00 -bash
root     32901 32794  0 00:01 pts/0    00:00:00 ps -ef
```

从上述输出中可以看出：
- `PID 1` 是 `init` 进程，即 `systemd`。
- `PID 2` 是内核线程 `kthreadd`。
- 用户态进程不带中括号，而内核态进程带中括号。
- 内核态进程的祖先都是 `PID 2`，而用户态进程的祖先都是 `PID 1`。
- `TTY` 列显示问号的进程表示它们是在后台运行的服务。
- `pts` 表示伪终端，`sshd` 的父进程是 `sshd`，`bash` 的父进程是 `pts`，`ps -ef` 命令的父进程是 `bash`。

## 总结时刻

本节介绍了从代码到二进制再到运行时的过程。下图总结了这一过程：

1. 通过编译生成 `.so` 文件和可执行文件，并存储在硬盘上。
2. 用户态进程 A 通过 `fork` 创建进程 B。
3. 在进程 B 中，执行 `exec` 系列系统调用，通过 `load_elf_binary` 方法将可执行文件加载到内存并执行。

![](https://static001.geekbang.org/resource/image/db/a9/dbd8785da6c3ce3fe1abb7bb5934b7a9.jpeg)

## 课堂练习

对于 ELF 文件，有几种工具可以帮助你分析其格式：
- `readelf`：用于分析 ELF 文件的信息。
- `objdump`：用于显示二进制文件的信息。
- `hexdump`：用于查看文件的十六进制编码。
- `nm`：用于显示指定文件中的符号信息。

你可以使用这些工具来解析本节生成的 `.o`、`.so` 和可执行文件。欢迎留言分享你的疑惑和见解，也欢迎收藏本节内容反复研读。你也可以将今天的内容分享给朋友，共同学习进步。

![](https://static001.geekbang.org/resource/image/8c/37/8c0a95fa07a8b9a1abfd394479bdd637.jpg)

# 11 | 线程：如何让复杂的项目并行执行？

上一节我们讲解了如何创建进程，这一节我们将探讨如何创建线程。