simulation  time  for  injecting  errors  in  the  entire  module  is 
quite long.  
We  perform 
the  module-level  simulations,  using 
benchmark  traces  as  workloads,  and  then  run  similar 
experiments at the unit level employing synthetic workloads. 
In  both  cases  the  errors  are  injected  in  all  units  of  the 
Bulldozer  module.  The  main  advantage  of  the  unit-level 
simulations  is  much  shorter  execution  time.  However,  the 
derating  factors derived  in this  way  are  less  accurate.  As  a 
consequence,  we  compare  the  derating  factors  obtained  by 
running  error  injection  experiments  at  the  module-level 
against 
those  provided  by  unit-level  simulations  and 
calculate  confidence  intervals.  The  purpose  of  this  study  is 
two-fold: first, finding the most sensitive units of the module 
to  efficiently  mitigate  the  impact  of  soft  errors;  second, 
evaluating  the  accuracy  of  unit-level  simulations  for  use  in 
future error injection experiments.  
In  this  paper  Section  2  briefly  describes  the  Bulldozer 
module  architecture  and  explains  the  distinction  between 
module and core. Error injection  methodology is presented 
in Section 3. Section 4 gives the results of the error injection 
experiments,  compares 
the  SER  derating  factors  and 
simulation  duration,  derived  at  the  module  and  unit-level, 
and provides confidence intervals. Future work is discussed 
in Section 5. Section 6 concludes the paper. 
II.  BULDOZZER ARCHITECTURE 
The Bulldozer module is a monolithic building block that 
implements  two  threads  of  execution  via  a  combination  of 
shared and dedicated hardware.  From the point of view of 
software,  each  thread  sees  a  fully  independent  core.    For 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:22:35 UTC from IEEE Xplore.  Restrictions apply. 
currently  used  for  studying  effectiveness  of  error-handling 
mechanisms  employed  by  modern  computing  systems. 
Several  tools,  such  as  DEPEND  [21],  MEFISTO  [22],  and 
VERIFY  [23],  were  developed  for  carrying  out  simulated 
fault  injection.  Hardware  description  languages  (HDL)  are 
commonly  used  for  describing  hardware  functionality  and 
performing fault/error injection [24, 25]. 
The  custom  software  developed  for  performing  error 
injection in the Bulldozer environment is briefly presented in 
this  section.  Fig.  2  shows  the  high-level  diagram  of  the 
software.  First,  an  error-free  run  is  performed  to  determine 
the  duration  and  status  of  the  simulation,  using  the  same 
workload as the error injection experiments. The duration is 
measured in clock cycles. The error free run is also used to 
define a window of time for performing the error injection. 
This window opens after reset and closes before the end of 
the  simulation.  Typically,  no  errors  are  injected  in  the  last 
20% clock cycles of the simulation, to allow propagation and 
detection  of  the  errors.  A  signal  list  is  generated  from  the 
RTL model, each sequential logic cell having a signal name 
associated  with  it.    The  cell  to  inject  the  error  into  is 
randomly  selected  from  the  signal  list. Then  the  simulation 
starts and the time of injection is randomly selected, within 
the previously defined window. At that time, the value of the 
selected cell is read, inverted, and written back (read-modify-
write).  The  simulation  continues  until  an  error  occurs  or  a 
predefined time interval elapses after the error was injected. 
The  derating  factor  is  calculated  after  each  error  injection. 
The experiment stops either when derating is within a given 
error  limit  or  a  predefined  maximum  number  of  injections 
were  performed.  Two  types  of  workloads  are  available: 
benchmark  traces  (used  for  module-level  simulations)  and 
synthetic workloads (employed at unit-level). 
The  software  used  to  inject  errors  in  the  RTL  model  is 
written  in  C++  and  utilizes  several  standard  Verilog 
procedural interfaces (VPI) to monitor and write RTL signals 
at  the  appropriate  times.   A C++  error  injection  component 
was  created  that  would  check  if  special  command-line 
options  were  passed  to  the  simulator  executable  to  specify 
the  details  of  an  error  injection.   Those  arguments  would 
provide  information  such  as  the  name  of  an  RTL  signal  to 
inject  into  and  the  clock-cycle  number  to  begin  error 
injection. 
The error injection component sets up a callback via the 
standard VPI vpi_register_cb routine that allows it to have a 
member  function  called  on  the  rising  edge  of  the  module 
clock  signal  in  the  design.   This  allows  the  component  to 
“wake  up”  every  cycle,  increment  its  clock-cycle  counter, 
and check whether it’s time to start the error injection. 
Once the error injection component determines that it is 
time to change the value of a cell, it then “attaches” to the 
previously  selected RTL signal using a custom library that 
allows RTL signals to be read and written from within C++ 
code.  This attach library utilizes standard VPI calls to get a 
the  vpi_handle_by_name 
handle 
call.  This handle can then be used to read the current value 
of  the  signal  using  the  vpi_get_value  call  and  write  a  new 
value using  the  vpi_put_value  call.   All  of  the  attaching,  
the  signal  using 
to 
Figure 2. Block diagram of the error injection software. 
In 
that 
the injection takes place;  the purpose of RTL simulations is 
to  evaluate  the  propagation  of  this  corrupted  data  (i.e.,  the 
error) through the sequential and combinational logic of the 
processor. SER derating is calculated as the probability that 
an  injected  error  is  impacting  the  correct  operation  of  the 
processor. We call this factor “logic derating and masking” 
(LDM) 
the 
architectural derating and masking of the propagating errors 
by combinational logic. The real SER, as seen by the user, is 
obtained by multiplying the nominal SER by LDM.  
it  accounts  for  both 
to  emphasize 
the  error 
the  Bulldozer  environment, 
injection 
simulations may be performed either at the module-level or 
at 
the  unit-level.  The  module-level  simulations  use 
performance  benchmark  traces  as  workloads.  By  contrast, 
unit-level  workloads  use  a  mix  of  opcodes  that  exercise  a 
particular  unit  (a.k.a.  synthetic  workloads).  Although  the 
module  simulations  provide  more  accurate  estimates  of 
LDM,  they  are  time-consuming.  Unit  simulations  have  the 
advantage  of  a  much  shorter  run  time.  As  a  result,  we 
attempt to find synthetic workloads that yield similar results 
to  the  module  simulations  executing  benchmark  traces.  In 
Section  4  we  compare  the  LDM  calculated  by  performing 
Bulldozer module simulations against the LDM derived from 
the  unit-level  simulations.  In  both  cases  the  errors  are 
injected in a single unit (ID, EXSC, FP, LS, and CU).  
B.  Simulated Error Injection Environment  
Fault/error  injection  techniques  have  been  used  for 
several  decades  for evaluation  of  dependable  systems  [17 - 
(HWIFI), 
20].  Hardware-implemented 
software-implemented 
fault 
and 
simulation-based  fault  injection  are  the  main  approaches 
fault 
injection 
(SWIFI), 
injection 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:22:35 UTC from IEEE Xplore.  Restrictions apply. 
Figure 3. Bulldozer unit LDM provided by module-level simulations. 
reading, and writing functionality is encapsulated in classes 
with simple interfaces in the attach  library.  Different classes 
are available in the library for attaching to different types of 
elements in the design (e.g., 2-D arrays, 3-D arrays, etc).   At  
the    specified    injection    cycle    the    error    injection 
component  performs  the  read-modify-write  operation.   If  a 
multi-cycle error injection is specified on the command-line, 
the  component  repeats  this  process  on  subsequent  clock 
callbacks  until  a  specified  inject  duration  has  passed. 
Experiments reported in this paper employ single-cycle error 
injection only.  
IV.  EXPERIMENTAL RESULTS  
This  section  presents  the  results  of  the  error  injection 
experiments, with simulations being run both at the module- 
and  unit-level.  Confidence  intervals  are  calculated  for 
comparing the accuracy of the  LDM  factors  derived  in  the  
TABLE I.  
DURATION OF MODULE- AND UNIT-LEVEL SIMULATIONS  
Figure 4. Bulldozer unit LDM provided by unit-level simulations. 
two experiments. 
Fig. 3 shows the LDM derived by running RTL simulations  
at   the  Bulldozer   module-level   and    injecting  errors  into 
each unit independently. The workloads are traces captured  
from    three    widely    used    benchmarks:  SPEC  2000  CPU 
Galgel, Livermore loops, and Bubble sort. The EXSC unit is 
the most sensitive to soft errors, followed by the ID and LS. 
The FP and CU units show the lowest sensitivity. Livermore 
loops  lead  to  the  highest  propagation  of  the  injected  errors 
(i.e., larger LDM) in all units. The Galgel benchmark leads 
to  the  second-highest  propagation  in  the  EXSC  and  CU 
units;  for  the  other  units,  Galgel  and  Bubble  sort  lead  to 
similar LDM factors. 