```
lxc profile show 
```
你可能想要改变文件里面的内容，可以这样做：
```
lxc profile edit 
```
你可以使用如下命令来改变应用到给定容器的配置文件列表：
```
lxc profile apply  ,,,...
```
#### 本地配置
有些配置是某个容器特定的，你并不想将它放到配置文件中，你可直接对容器设置它们：
```
lxc config edit 
```
上面的命令做的和“profile edit”命令是一样。
如果不想在文本编辑器中打开整个文件的内容，你也可以像这样修改单独的配置：
```
lxc config set   
```
或者添加设备，例如：
```
lxc config device add my-container kvm unix-char path=/dev/kvm
```
上面的命令将会为名为“my-container”的容器设置一个 /dev/kvm 项。
对一个配置文件使用`lxc profile set`和`lxc profile device add`命令也能实现上面的功能。
#### 读取配置
你可以使用如下命令来读取容器的本地配置：
```
lxc config show 
```
或者得到已经被展开了的配置（包含了所有的配置值）：
```
lxc config show --expanded 
```
例如：
```
stgraber@dakara:~$ lxc config show --expanded zerotier
name: zerotier
profiles:
- default
config:
 security.nesting: "true"
 user.a: b
 volatile.base_image: a49d26ce5808075f5175bf31f5cb90561f5023dcd408da8ac5e834096d46b2d8
 volatile.eth0.hwaddr: 00:16:3e:ec:65:a8
 volatile.last_state.idmap: '[{"Isuid":true,"Isgid":false,"Hostid":100000,"Nsid":0,"Maprange":65536},{"Isuid":false,"Isgid":true,"Hostid":100000,"Nsid":0,"Maprange":65536}]'
devices:
 eth0:
  name: eth0
  nictype: macvlan
  parent: eth0
  type: nic
  limits.ingress: 10Mbit
  limits.egress: 10Mbit
 root:
  path: /
  size: 30GB
  type: disk
 tun:
  path: /dev/net/tun
  type: unix-char
ephemeral: false
```
这样做可以很方便的检查有哪些配置属性被应用到了给定的容器。
#### 实时配置更新
注意，除非在文档中已经被明确指出，否则所有的配置值和设备项的设置都会对容器实时发生影响。这意味着在不重启正在运行的容器的情况下，你可以添加和移除某些设备或者修改安全配置文件。
### 获得一个 shell
LXD 允许你直接在容器中执行任务。最常用的做法是在容器中得到一个 shell 或者执行一些管理员任务。
和 SSH 相比，这样做的好处是你不需要容器是网络可达的，也不需要任何软件和特定的配置。
#### 执行环境
与 LXD 在容器内执行命令的方式相比，有一点是不同的，那就是 shell 并不是在容器中运行。这也意味着容器不知道使用的是什么样的 shell，以及设置了什么样的环境变量和你的家目录在哪里。
通过 LXD 来执行命令总是使用最小的路径环境变量设置，并且 HOME 环境变量必定为 /root，以容器的超级用户身份来执行（即 uid 为 0，gid 为 0）。
其他的环境变量可以通过命令行来设置，或者在“environment.”配置中设置成永久环境变量。
#### 执行命令
在容器中获得一个 shell 可以简单的执行下列命令得到：
```
lxc exec  bash
```
当然，这样做的前提是容器内已经安装了 bash。
更复杂的命令要求使用分隔符来合理分隔参数。
```
lxc exec  -- ls -lh /
```
如果想要设置或者重写变量，你可以使用“-env”参数，例如：
```
stgraber@dakara:~$ lxc exec zerotier --env mykey=myvalue env | grep mykey
mykey=myvalue
```
### 管理文件
因为 LXD 可以直接访问容器的文件系统，因此，它可以直接读取和写入容器中的任意文件。当我们需要提取日志文件或者与容器传递文件时，这个特性是很有用的。
#### 从容器中取回一个文件
想要从容器中获得一个文件，简单的执行下列命令：
```
lxc file pull / 
```
例如：
```
stgraber@dakara:~$ lxc file pull zerotier/etc/hosts hosts
```
或者将它读取到标准输出：
```
stgraber@dakara:~$ lxc file pull zerotier/etc/hosts -
127.0.0.1 localhost
# The following lines are desirable for IPv6 capable hosts
::1 ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
ff02::3 ip6-allhosts
```
#### 向容器发送一个文件
发送以另一种简单的方式完成：
```
lxc file push  /
```
#### 直接编辑一个文件
编辑是一个方便的功能，其实就是简单的提取一个给定的路径，在你的默认文本编辑器中打开它，在你关闭编辑器时会自动将编辑的内容保存到容器。
```
lxc file edit /
```
### 快照管理
LXD 允许你对容器执行快照功能并恢复它。快照包括了容器在某一时刻的完整状态（如果`-stateful`被使用的话将会包括运行状态），这也意味着所有的容器配置，容器设备和容器文件系统也会被保存。
#### 创建一个快照
你可以使用下面的命令来执行快照功能：
```
lxc snapshot 
```
命令执行完成之后将会生成名为snapX（X 为一个自动增长的数）的记录。
除此之外，你还可以使用如下命令命名你的快照：
```
lxc snapshot  
```
#### 列出所有的快照
一个容器的所有快照的数量可以使用`lxc list`来得到，但是具体的快照列表只能执行`lxc info`命令才能看到。
```
lxc info 
```
#### 恢复快照
为了恢复快照，你可以简单的执行下面的命令：
```
lxc restore  
```
#### 给快照重命名
可以使用如下命令来给快照重命名：
```
lxc move / /
```
#### 从快照中创建一个新的容器
你可以使用快照来创建一个新的容器，而这个新的容器除了一些可变的信息将会被重置之外（例如 MAC 地址）其余所有信息都将和快照完全相同。
```
lxc copy / 
```
#### 删除一个快照
最后，你可以执行下面的命令来删除一个快照：
```
lxc delete /
```
### 克隆并重命名
得到一个纯净的发行版镜像总是让人感到愉悦，但是，有时候你想要安装一系列的软件到你的容器中，这时，你需要配置它然后将它分支成多个其他的容器。
#### 复制一个容器
为了复制一个容器并有效的将它克隆到一个新的容器中，你可以执行下面的命令：
```
lxc copy  
```
目标容器在所有方面将会完全和源容器等同。除了新的容器没有任何源容器的快照以及一些可变值将会被重置之外（例如 MAC 地址）。
#### 移动一个快照
LXD 允许你复制容器并在主机之间移动它。但是，关于这一点将在后面的文章中介绍。
现在，“move”命令将会被用作给容器重命名。
```
lxc move  
```
唯一的要求就是当容器应该被停止，容器内的任何事情都会被保存成它本来的样子，包括可变化的信息（类似 MAC 地址等）。
### 结论
这篇如此长的文章介绍了大多数你可能会在日常操作中使用到的命令。
很显然，这些如此之多的命令都会有不少选项，可以让你的命令更加有效率，或者可以让你指定你的 LXD 容器的某个具体方面。最好的学习这些命令的方式就是深入学习它们的帮助文档（ -help）。
### 更多信息
* LXD 的主要网站是：
* Github 上的开发动态： 
* 邮件列表支持：
* IRC 支持： #lxcontainers on irc.freenode.net
如果你不想或者不能在你的机器上安装 LXD，你可以[试试在线版本](https://linuxcontainers.org/lxd/try-it)!
---
作者简介：我是 Stéphane Graber。我是 LXC 和 LXD 项目的领导者，目前在加拿大魁北克蒙特利尔的家所在的Canonical 有限公司担任 LXD 的技术主管。
---
来自于： 作者：[Stéphane Graber](https://www.stgraber.org/author/stgraber/) 译者：[kylepeng93](https://github.com/kylepeng93) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创翻译，[Linux中国](https://linux.cn/) 荣誉推出