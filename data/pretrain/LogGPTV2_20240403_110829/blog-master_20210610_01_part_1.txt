## 森林状图式数据(树状) 的 高效生成方法  
### 作者  
digoal  
### 日期  
2021-06-10   
### 标签  
PostgreSQL , 树 , 森林 , 图   
----  
## 背景  
森林状、图数据, 满足如下需求:    
- 多树  
- 每颗树有多层  
- 每层有多节点  
- 同一颗树内无环  
为什么要生成这类数据? 什么场景会存在这样的数据形态?     
纵观增长黑客、等营销类书籍. 目前互联网行业存在一种随处可见的商业模式, 例如:    
- 游戏工会, 给工会成员提供好的交流、交易平台, 同时工会通过发展会员数来提高工会本身的竞争力, 为了刺激已有会员去拉新的会员, 工会与成员, 成员与成员之间存在网状关系, 拉来会员可以得到奖励.   
- 直播行业工会。工会为主播提供好的流量平台, 主播运营等服务. 大工会挂小工会等多层结构, 流量平台与大工会、大工会与小工会、小工会与主播, 主播与主播之间存在网状关系.   
- 共享出行, 代理商, 加盟商层层关系.   
- 零售行业, 小型超市, 餐饮行业, 加盟、代理。  
- 化妆品行业。  
- 保险行业。  
- 在线教育行业。  
模拟森林状、图数据可以压测这个商业模型下的数据库压力:  
- 例如每日结算, 实时结算, 分佣  
应用场景举例:  
- [《PostgreSQL 递归应用实践 - 非“传销”的高并发实时藤、树状佣金分配体系》](../201808/20180808_02.md)    
- [《经营、销售分析系统DB设计之PostgreSQL, Greenplum - 共享充电宝 案例实践》](../201709/20170923_01.md)    
## 模拟方法:   
建表:  
```  
create extension btree_gist ;    
create unlogged table tbl (  
  i int,  -- 层次, 实际使用可以删除这个字段, 测试目的便于观察  
  uid int8 not null, -- 用户ID  
  pid int8,  -- 父ID, 如果UID已经是顶级, 则pid=null   
  ov int8,   -- 上一层取值空间开始值(包含), 实际使用可以删除这个字段, 测试目的便于观察  
  bv int8,   -- 当前层取值空间开始值(包含), 实际使用可以删除这个字段, 测试目的便于观察  
  ev int8,   -- 当前层取值空间末尾值(包含), 实际使用可以删除这个字段, 测试目的便于观察  
  unique (uid,pid) ,  
  exclude using gist (uid with =, pid with <>)   -- 一个UID不能属于多个PID     
);    
```  
技术点:   
[《PostgreSQL exclude 排他约束 实现 - group ID结伴功能》](../202102/20210209_01.md)    
例如, 按如下规则构建森林:   
1、第一层取值范围1-100万            -- 100万颗树    
2、以后每一层取值范围是上一层的2倍    --   每一层的取值空间完全隔离, 避免出现闭环    
3、插入时先判断上一层的值是否存在(已有记录UID = 即将插入的PID), 不存在则忽略插入   -- 避免出现断链     
4、PK 冲突时不插入    -- 避免出现重复数据    
5、每层平均写入记录数为上一层的50倍  --    一颗树平均每层50个节点      
6、构建100层数据      
```  
do language plpgsql $$   
declare  
  js int8 := 1000000;  -- 第一层取值空间 100 万   
  n int8 := 2;   -- 每层取值空间是上一层的2倍   
  m int8 := 50;  -- 一颗树平均每层50个节点  
  c int8 := 100;   -- 构建100层数据  
  ov int8;    -- 上一层取值空间开始值(包含)  
  bv int8;    -- 当前层取值空间开始值(包含)  
  ev int8;    -- 当前层取值空间末尾值(包含)  
  rows int8;  -- 当前层总共插入多少行(循环多少次)  
  valu int8;  -- 根据当前层取值空间生成的uid  
  valp int8;  -- 根据当前层取值空间生成的pid  
begin  
  for i in 1..c loop  
    if i=1 then  
      insert into tbl select i, x , null, null, 1, js from generate_series(1,js) x;  
    else  
      if i=2 then  
        ov := 1;  
      else  
        ov := js*(n^(i-3))+1;  
      end if;  
      bv := js*(n^(i-2))+1;  
      ev := js*(n^(i-1));  
      rows := (js*(n^(i-2))+1)*m;  
      for xxx in 1..rows loop  
        valu := bv + floor (random() * (ev-bv));   
        valp := ov + floor (random() * (bv-ov-1));   
        perform 1 from tbl where uid=valp;   
        if found then  
          insert into tbl values (i, valu, valp, ov, bv, ev) on conflict do nothing;  
        end if;  
      end loop;  
    end if;   
  end loop;  
end;  
$$;  
```  
小数据量测试  
```  
do language plpgsql $$   
declare  
  js int8 := 1000;  -- 第一层取值空间 1000  
  n int8 := 2;   -- 每层取值空间是上一层的2倍   
  m int8 := 5;  -- 一颗树平均每层5个节点  
  c int8 := 10;   -- 构建10层数据  
  ov int8;    -- 上一层取值空间开始值(包含)  
  bv int8;    -- 当前层取值空间开始值(包含)  
  ev int8;    -- 当前层取值空间末尾值(包含)  
  rows int8;  -- 当前层总共插入多少行(循环多少次)  
  valu int8;  -- 根据当前层取值空间生成的uid  
  valp int8;  -- 根据当前层取值空间生成的pid  
begin  
  for i in 1..c loop  
    if i=1 then  
      insert into tbl select i, x , null, null, 1, js from generate_series(1,js) x;  
    else  
      if i=2 then  
        ov := 1;  
      else  
        ov := js*(n^(i-3))+1;  
      end if;  
      bv := js*(n^(i-2))+1;  
      ev := js*(n^(i-1));  
      rows := (js*(n^(i-2))+1)*m;  
      for xxx in 1..rows loop  
        valu := bv + floor (random() * (ev-bv));   
        valp := ov + floor (random() * (bv-ov-1));   
        perform 1 from tbl where uid=valp;   
        if found then  
          insert into tbl values (i, valu, valp, ov, bv, ev) on conflict  do nothing;  
        end if;  
      end loop;  
    end if;   
  end loop;  
end;  
$$;  
```  
1、校验数据正确性:  
没有返回, 表示正确.   
```  
select * from tbl   
where   
not (pid >= ov and pid=bv and uid<=ev);  
```  