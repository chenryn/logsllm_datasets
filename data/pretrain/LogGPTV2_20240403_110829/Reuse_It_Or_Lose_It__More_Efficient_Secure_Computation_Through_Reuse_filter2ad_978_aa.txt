title:Reuse It Or Lose It: More Efficient Secure Computation Through Reuse
of Encrypted Values
author:Benjamin Mood and
Debayan Gupta and
Kevin R. B. Butler and
Joan Feigenbaum
Reuse It Or Lose It: More Efﬁcient Secure Computation
Through Reuse of Encrypted Values
Benjamin Mood
University of Florida
bmood@uﬂ.edu
Kevin R. B. Butler
University of Florida
butler@uﬂ.edu
Debayan Gupta
Yale University
PI:EMAIL
Joan Feigenbaum
Yale University
PI:EMAIL
ABSTRACT
Two-party secure-function evaluation (SFE) has become sig-
niﬁcantly more feasible, even on resource-constrained de-
vices, because of advances in server-aided computation sys-
tems. However, there are still bottlenecks, particularly in the
input-validation stage of a computation. Moreover, SFE re-
search has not yet devoted suﬃcient attention to the impor-
tant problem of retaining state after a computation has been
performed so that expensive processing does not have to be
repeated if a similar computation is done again. This paper
presents PartialGC, an SFE system that allows the reuse of
encrypted values generated during a garbled-circuit compu-
tation. We show that using PartialGC can reduce computa-
tion time by as much as 96% and bandwidth by as much as
98% in comparison with previous outsourcing schemes for
secure computation. We demonstrate the feasibility of our
approach with two sets of experiments, one in which the
garbled circuit is evaluated on a mobile device and one in
which it is evaluated on a server. We also use PartialGC
to build a privacy-preserving “friend-ﬁnder” application for
Android. The reuse of previous inputs to allow stateful eval-
uation represents a new way of looking at SFE and further
reduces computational barriers.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection – Cryp-
tographic Controls
Keywords
Garbled Circuits, Cut-and-Choose, Server-Aided Computa-
tion
1.
INTRODUCTION
Secure function evaluation, or SFE, allows multiple parties
to jointly compute a function while maintaining input and
output privacy. The two-party variant, known as 2P-SFE,
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior speciﬁc permission and/or a
fee. Request permissions from permissions@acm.org.
CCS’14, November 3–7, 2014, Scottsdale, Arizona, USA.
Copyright 2014 ACM 978-1-4503-2957-6/14/11 ...$15.00.
http://dx.doi.org/10.1145/2660267.2660285.
was ﬁrst introduced by Yao in the 1980s [39] and was largely
a theoretical curiosity. Developments in recent years have
made 2P-SFE vastly more eﬃcient [18, 27, 38]. However,
computing a function using SFE is still usually much slower
than doing so in a non-privacy-preserving manner.
As mobile devices become more powerful and ubiquitous,
users expect more services to be accessible through them.
When SFE is performed on mobile devices (where resource
constraints are tight), it is extremely slow – if the com-
putation can be run at all without exhausting the mem-
ory, which can happen for non-trivial input sizes and algo-
rithms [8]. One way to allow mobile devices to perform SFE
is to use a server-aided computational model [8, 22], allow-
ing the majority of an SFE computation to be “outsourced”
to a more powerful device while still preserving privacy. Past
approaches, however, have not considered the ways in which
mobile computation diﬀers from the desktop. Often, the mo-
bile device is called upon to perform incremental operations
that are continuations of a previous computation.
Consider, for example, a “friend-ﬁnder” application where
the location of users is updated periodically to determine
whether a contact is in proximity. Traditional applications
disclose location information to a central server. A privacy-
preserving friend-ﬁnder could perform these operations in a
mutually oblivious fashion. However, every incremental lo-
cation update would require a full re-evaluation of the func-
tion with fresh inputs in a standard SFE solution. Our ex-
amination of an outsourced SFE scheme for mobile devices
by Carter et al. [8] (hereon CMTB), determined that the
cryptographic consistency checks performed on the inputs
to an SFE computation themselves can constitute the great-
est bottleneck to performance.
Additionally, many other applications require the ability
to save state, a feature that current garbled-circuit imple-
mentations do not possess. The ability to save state and
reuse an intermediate value from one garbled circuit execu-
tion in another would be useful in many other ways, e.g., we
could split a large computation into a number of smaller
pieces. Combined with eﬃcient input validation, this be-
comes an extremely attractive proposition.
In this paper, we show that it is possible to reuse an en-
crypted value in an outsourced SFE computation (we use
a cut-and-choose garbled circuit protocol) even if one is re-
stricted to primitives that are part of standard garbled cir-
cuits. Our system, PartialGC, which is based on CMTB,
provides a way to take encrypted output wire values from
one SFE computation, save them, and then reuse them as
input wires in a new garbled circuit. Our method vastly re-
duces the number of cryptographic operations compared to
the trivial mechanism of simply XOR’ing the results with a
one-time pad, which requires either generating inside the cir-
cuit, or inputting, a very large one-time pad, both complex
operations. Through the use of improved input validation
mechanisms proposed by shelat and Shen [38] (hereon sS13)
and new methods of partial input gate checks and evalu-
ation, we improve on previous proposals. There are other
approaches to the creation of reusable garbled circuits [13,
10, 5], and previous work on reusing encrypted values in the
ORAM model [30, 11, 31], but these earlier schemes have
not been implemented. By contrast, we have implemented
our scheme and found it to be both practical and eﬃcient;
we provide a performance analysis and a sample application
to illustrate its feasibility (Section 6), as well as a simpliﬁed
example execution (Appendix C).
By breaking a large program into smaller pieces, our sys-
tem allows interactive I/O throughout the garbled circuit
computation. To the best of our knowledge this is the ﬁrst
practical protocol for performing interactive I/O in the mid-
dle of a cut-and-choose garbled circuit computation.
Our system comprises three parties - a generator, an eval-
uator, and a third party (“the cloud”), to which the evaluator
outsources its part of the computation. Our protocol is se-
cure against a malicious adversary, assuming that there is
no collusion with the cloud. We also provide a semi-honest
version of the protocol.
Figure 1 shows how PartialGC works at a high level: First,
a standard SFE execution (blue) takes place, at the end of
which we “save” some intermediate output values. All further
executions use intermediate values from previous executions.
In order to reuse these values, information from both parties
– the generator and the evaluator – has to be saved. In our
protocol, it is the cloud – rather than the evaluator – that
saves information. This allows multiple distinct evaluators
to participate in a large computation over time by saving
state in the cloud between diﬀerent garbled circuit execu-
tions. For example, in a scenario where a mobile phone is
outsourcing computation to a cloud, PartialGC can save the
encrypted intermediate outputs to the cloud instead of the
phone (Figure 2). This allows the phones to communicate
with each other by storing encrypted intermediate values in
the cloud, which is more eﬃcient than requiring them to
directly participate in the saving of values, as required by
earlier 2P-SFE systems. Our friend ﬁnder application, built
for an Android device, reﬂects this usage model and allows
multiple friends to share their intermediate values in a cloud.
Other friends use these saved values to check whether or not
someone is in the same map cell as themselves without hav-
ing to copy and send data.
By incorporating our optimizations, we give the following
contributions:
1. Reusable Encrypted Values – We show how to reuse an
encrypted value, using only garbled circuits, by mapping
one garbled value into another.
2. Reduced Runtime and Bandwidth – We show how reusable
encrypted values can be used in practice to reduce the ex-
ecution time for a garbled-circuit computation; we get a
96% reduction in runtime and a 98% reduction in band-
width over CMTB.
3. Outsourcing Stateful Applications – We show how our sys-
tem increases the scope of SFE applications by allowing
Figure 1: PartialGC Overview. E is evaluator and G is gen-
erator. The blue box is a standard execution that produces
partial outputs (garbled values); yellow boxes represent exe-
cutions that take partial inputs and produce partial outputs.
Figure 2: Our system has three parties. Only the cloud and
generator have to save intermediate values - this means that
we can have diﬀerent phones in diﬀerent computations.
multiple evaluating parties over a period of time to op-
erate on the saved state of an SFE computation without
the need for these parties to know about each other.
The remainder of our paper is organized as follows: Section 2
provides some background on SFE. Section 3 introduces the
concept of partial garbled circuits in detail. The PartialGC
protocol and its implementation are described in Section 4,
while its security is analyzed in Section 5. Section 6 evalu-
ates PartialGC and introduces the friend ﬁnder application.
Section 7 discusses related work and Section 8 concludes.
2. BACKGROUND
Secure function evaluation (SFE) addresses scenarios where
two or more mutually distrustful parties P1, . . . , Pn, with
private inputs x1, . . . , xn, want to compute a given function
yi = f (x1, . . . , xn) (yi is the output received by Pi), such
that no Pi learns anything about any xj or yj, i (cid:54)= j that is
not logically implied by xi and yi. Moreover, there exists no
trusted third party – if there was, the Pis could simply send
their inputs to the trusted party, which would evaluate the
function and return the yis.
SFE was ﬁrst proposed in the 1980s in Yao’s seminal pa-
per [39]. The area has been studied extensively by the cryp-
tography community, leading to the creation of the ﬁrst gen-
eral purpose platform for SFE, Fairplay [32] in the early
2000s. Today, there exist many such platforms [6, 9, 16, 17,
26, 37, 40].
The classic platforms for 2P-SFE, including Fairplay, use
garbled circuits. A garbled circuit is a Boolean circuit which
is encrypted in such a way that it can be evaluated when
the proper input wires are entered. The party that evaluates
this circuit does not learn anything about what any partic-
ular wire represents. In 2P-SFE, the two parties are: the
generator, which creates the garbled circuit, and the evalua-
tor, which evaluates the garbled circuit. Additional crypto-
graphic techniques are used for input and output; we discuss
these later.
A two-input Boolean gate has four truth table entries. A
two-input garbled gate also has a truth table with four en-
tries representing 1s and 0s, but these entries are encrypted
and can only be retrieved when the proper keys are used.
Garbled(Circuit(Execu0on(1(E(G(Par0alGC(Garbled(Circuit(Execu0on(2(Par0alGC(Garbled(Circuit(Execu0on(3(E(G(E(G(GeneratorPhone1CloudGeneratorPhone2CloudOutsourced SFE Computation 1Outsourced SFE Computation 2Saved Values Saved Values The values that represent the 1s and 0s are random strings
of bits. The truth table entries are permuted such that the
evaluator cannot determine which entry she is able to de-
crypt, only that she is able to decrypt an entry. The entirety
of a garbled gate is the four encrypted output values.
Each garbled gate is then encrypted in the following way:
Each entry in the truth table is encrypted under the two
input wires, which leads to the result, truthi = Enc(inputx||
inputy)⊕ outputi, where truthi is a value in the truth table,
inputx is the value of input wire x, inputy is the value of
input wire y, and outputi is the non-encrypted value, which
represents either 0 or 1.We use AES as the Enc function.
If the evaluator has inputx and inputy, then she can also
receive outputi, and the encrypted truth tables are sent to
her for evaluation.
For the evaluator’s input, 1-out-of-2 oblivious transfers
(OTs) [1, 20, 34, 35] are used. In a 1-out-of-2 OT, one party
oﬀers up two possible values while the other party selects
one of the two values without learning the other. The party
that oﬀers up the two values does not learn which value was
selected. Using this technique, the evaluator gets the wire
labels for her input without leaking information.
The only way for the evaluator to get a correct output
value from a garbled gate is to know the correct decryption
keys for a speciﬁc entry in the truth table, as well as the
location of the value she has to decrypt.
During the permutation stage, rather than simply ran-
domly permuting the values, the generator permutes values
based on a speciﬁc bit in inputx and inputy, such that, given
inputx and inputy the evaluator knows that the location of
the entry to decrypt is bitx ∗ 2 + bity. These bits are called
the permutation bits, as they show the evaluator which en-
try to select based on the permutation; this optimization,
which does not leak any information, is known as point and
permute [32].
2.1 Threat Models
Traditionally, there are two threat models discussed in
SFE work, semi-honest and malicious. The above description
of garbled circuits is the same in both threat models. In
the semi-honest model users stay true to the protocol but
may attempt to learn extra information from the system
by looking at any message that is sent or received. In the
malicious model, users may attempt to change anything with
the goal of learning extra information or giving incorrect
results without being detected; extra techniques must be
added to achieve security against a malicious adversary.
There are several well-known attacks a malicious adver-
sary could use against a garbled circuit protocol. A protocol
secure against malicious adversaries must have solutions to
all potential pitfalls, described in turn:
Generation of incorrect circuits If the generator does
not create a correct garbled circuit, he could learn extra
information by modifying truth table values to output the
evaluator’s input; he is limited only by the external structure
of the garbled circuit the evaluator expects.
Selective failure of input If the generator does not oﬀer
up correct input wires to the evaluator, and the evaluator
selects the wire that was not created properly, the generator
can learn up to a single bit of information based on whether
the computation produced correct outputs.
Input consistency If either party’s input is not consis-
tent across all circuits, then it might be possible for extra
information to be retrieved.
Output consistency In the two-party case, the output
consistency check veriﬁes that the evaluator did not modify
the generator’s output before sending it.
2.1.1 Non-collusion
CMTB assumes non-collusion, as quoted below:
“The outsourced two-party SFE protocol securely computes
a function f(a,b) in the following two corruption scenarios:
(1)The cloud is malicious and non-cooperative with respect
to the rest of the parties, while all other parties are semi-
honest, (2)All but one party is malicious, while the cloud is
semi-honest.”
This is the standard deﬁnition of non-collusion used in
server-aided works such as Kamara et al. [22]. Non-collusion
does not mean the parties are trusted; it only means the
two parties are not working together (i.e. both malicious).
In CMTB, any individual party that attempts to cheat to
gain additional information will still be caught, but collu-
sion between multiple parties could leak information. For
instance, the generator could send the cloud the keys to de-