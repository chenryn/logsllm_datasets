data buffers by using the DeviceIoControl() function. Mike Nordell explains 
in more detail how to create and manipulate reparse points at 
www.codeproject.com/w2k/junctionpoints.asp. 
Because junction points are dynamicmeaning they can point anywherewhere the 
junction points can change at any time. Their presence represents some potential 
issues for applications trying to access files securely. These vulnerabilities fall into 
two primary categories, explained in the following sections: 
Unintentional file access outside a particular subdirectory structure 
File access race conditions 
Arbitrary File Accesses 
Often an application should restrict access to a confined region of the file system. For 
example, an FTP server might export only a specific subdirectory, or an application 
that manages user profiles might access user data in only a certain subdirectory. 
Say a privileged service is accessing files in c:\temp, which a normal user can also 
write to. Attackers might be able to cause the service to access system files that it 
shouldn't. The following example shows some vulnerable code: 
BOOL WriteToTempFile(LPCSTR filename, LPCSTR username, 
                     LPVOID data, size_t length) 
{ 
    char path[MAX_PATH], ext[8]; 
     HANDLE hFile; 
    if(strchr(filename, '\\') != NULL 
       || strstr(filename, "..") != NULL) 
        return FALSE; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
694 
    generate_temporary_filename_extension(ext); 
    snprintf(path, sizeof(path)-1, "c:\\temp\\%s_%s_%s.txt", 
             user, filename, ext); 
    path[sizeof(path)-1] = '\0'; 
    hFile = CreateFile(path, GENERIC_READ, FILE_SHARE_READ, 
                       NULL, CREATE_ALWAYS, 0, NULL); 
    if(hFile == INVALID_HANDLE_VALUE) 
        return FALSE; 
    ... write data ... 
} 
There are several problems with the way this code is written, but assume attackers 
can provide the filename, but not the username; the username is determined when 
they log in. By creating a junction with the same name as the file being created, 
attackers can have this filename written to anywhere on the file system. Furthermore, 
a large number of spaces (as discussed earlier) can be used to remove the extension 
and create a completely predictable file. 
To perform this attack, users (say bob) could create a junction in c:\temp pointing to 
C:\Windows\system32 and named bob_dirname. Attackers would then specify a 
filename with enough spaces to cut off the trailing data, so the resulting path would 
translate to any arbitrary file under the main 32-bit system directory. Assuming the 
application is running with sufficient privileges, this allows the attacker to replace 
executables or libraries used by services and administrative users. 
In this example, users need to be able to supply a file separator. The code checks for 
\\, not /, which allows them to supply one. Because junctions can be linked 
successfully only between two directories, path separators are always an additional 
consideration when determining whether a bug is exploitable through the use of 
junctions. If a path separator can't be specified, exploitation is possibly more limited. 
As always, exploitability of a bug of this nature depends on how the pathname is built 
and whether the file is written to or read from. Still, there is the potential for a 
vulnerability any time attackers can potentially circumvent an application's file access 
restrictions to affect arbitrary parts of the file system. 
It can also be dangerous to read a file controlled by less privileged users. A malicious 
user might be able to perform some nasty tricks, particularly by using junctions. To 
understand this problem, take a look at a simple example: 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
695 
int LoadUsersSettings(LPCSTR User, LPCSTR SettingsFileName) 
{ 
    char path[MAX_PATH]; 
    HANDLE hFile; 
    _snprintf(path, sizeof(path)-1, "%s\\appdata\\%s", 
              get_home_directory(User), 
        SettingsFileName); 
    path[sizeof(path)-1] = '\0'; 
    hFile = CreateFile(path, GENERIC_READ, FILE_SHARE_READ, 
                       NULL, OPEN_ALWAYS, 0, NULL); 
    If(hFile == INVALID_HANDLE_VALUE) 
        return -1; 
    ... read the file ... 
} 
This code seems innocent enough, assuming the get_home_directory() function 
works as expected. However, attackers could create a junction named appdata that 
points to an arbitrary location on the file system. If they can then specify the 
SettingsFileName argument, they could use junctions to arbitrarily read any file on 
the system. 
File Access Race Conditions 
When a privileged process needs to access an object on the file system on behalf of a 
less privileged user, there are two basic ways to do so. The first way is to impersonate 
the user and attempt to access the file as normal; the second way is to retrieve 
information about the file and then decide whether to proceed based on file attributes 
and related security rights. The second approach carries some inherent dangers 
because the file system isn't a static entity and neither are the objects residing on it. 
Therefore, the state of the file could change between the time file attributes are 
examined and when the file is actually operated on. This situation is referred to as a 
race condition. You have examined race conditions already on UNIX file systems, and 
race conditions on Windows file systems are quite similar. 
TOCTTOU 
As in UNIX, race conditions primarily occur as a result of the time of check to time 
of use (TOCTTOU) variance in an application. This vulnerability occurs when a 
security check is done on a file (examining the owner or other properties of the file), 
and then the file is accessed later, assuming the security check passes. During the 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
696 
intervening period, the file could be modified so that its attributes change, resulting in 
the privileged application accessing a file it didn't intend to. The scope of this attack 
tends to be more limited in Windows because the File APIs are designed in such a way 
that they're less conducive to attacks of this nature. For example, in UNIX, TOCTTOU 
attacks could happen by using access() and then open(). There's no direct correlation 
of that code sequence in Windows; the API encourages checks to be done as the file 
is being opened. However, being able to change attributes between a call to 
GetFileAttributes() and CreateFile() could have consequences that lead to a 
vulnerability. 
7.7.8 The Registry 
The registry is an integral part of Windows operating systems. It provides a 
centralized database containing configuration information about software installed on 
the system and the system itself. Applications often access the registry, and the 
manner in which they do so is quite important for security reasons because the 
information in there can direct how the program operates. Information in the registry 
can be stored in several formats and is used for controlling many aspect of a 
program's behavior. Applications might store pathnames to more detailed 
configuration files or helper DLLs, integer values that determine the level of 
processing an application performs on a file, and so forth. You need to be able to 
examine each access to the registry in an application to determine whether it's done 
securely; if it isn't, you must evaluate the level of danger that the application is 
exposed to if someone takes advantage of an insecure registry access. 
The registry is organized in a large tree structure. Each top node is called a key, each 
nonleaf node below a top node is a subkey, and each leaf node is a value. Several 
predefined keys exist on every system. Table 11-12 summarizes them, based on 
information in the MSDN. 
Table 11-12. Predefined Registry Keys 
Name 
Purpose 
HKEY_CLASSES_ROOT 
Used for storing file type information and their associated 
properties. It is an alias to a branch in 
HKEY_LOCAL_MACHINE. 
HKEY_CURRENT_CONFIG Used for system hardware configuration information. It is 
an alias to a branch in HKEY_LOCAL_MACHINE. 
HKEY_CURRENT_USER 
Used to store preferences for the current user. Each user 
has his or her own set of preferences, and retrieving 
values from this key provides access to user preferences, 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
697 
Table 11-12. Predefined Registry Keys 
Name 
Purpose 
depending on the identity of the process accessing the 
key. It is an alias to a branch in HKEY_USERS. 
HKEY_LOCAL_MACHINE 
Used to store information about hardware, systemwide 
configuration parameters (such as network 
configuration), and systemwide software configuration 
details. 
HKEY_USERS 
Contains default user profile information to be used for 
new users and profile information for all the users on the 
system. 
Key Permissions 
As mentioned already, keys are securable objects, so they have a set of access rights 
used to restrict who can read and write to keys and constituent vales. Table 11-13 
summarizes these access rights, based on information in the MSDN. 
Table 11-13. Key Access Rights 
Access Right 
Meaning 
KEY_CREATE_LINK 
Reserved. 
KEY_CREATE_SUB_KEY 
Allows users to create a subkey of a registry key. 
KEY_ENUMERATE_SUB_KEYS Allows users to enumerate all subkeys of a registry key. 
KEY_EXECUTE 
Same as KEY_READ. 
KEY_NOTIFY 
Allows a user to receive a notification when a change is 
made to the given registry key or one of its subkeys. 
KEY_QUERY_VALUE 
Allows users to query values of a registry key. 
KEY_READ 
Equivalent to combining STANDARD_RIGHTS_READ, 
KEY_QUERY_VALUE, KEY_ENUMERATE_SUB_KEYS, and KEY_NOTIFY. 
KEY_SET_VALUE 
Allows users to create, delete, or modify values in a key. 
KEY_WOW64_32KEY 
Allows a 64-bit application to access the 32-bit registry view 
of the key. 
KEY_WOW64_64KEY 
Allows a 64-bit application to access the 32-bit registry view 
of the key. 
KEY_WRITE 
Equivalent to combining STANDARD_RIGHTS_WRITE, 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
698 
Table 11-13. Key Access Rights 
Access Right 
Meaning 
KEY_SET_VALUE, and KEY_CREATE_SUB_KEY. 
KEY_ACCESS_ALL 
Combines all values listed in this table. 
The permissions applied to keys created by applications are quite critical because the 
capability to manipulate them can result in severe modification of an application's 
behavior. The exact effects of altering registry keys is very application specific. In the 
worst case, however, unchecked registry manipulation could allow an attacker to 
manipulate the most critical elements of a Windows system. 
Another important point is that registry keys can be secured but registry values can't. 
The values are simply in the security scope of the keys, so any attempt to implement 
a permission boundary must be applied to keys, not values. 
Key and Value Squatting 
As with all other named objects, keys could potentially be created before an 
application creates them. This could allow attackers to supply arbitrary values to the 
key, regardless of permissions the application attempts to enforce. Key squatting is 
far less likely than other name squatting for two main reasons: 
Applications often create keys and values only once, when the application is 
installed. To create a key before an application does, you might have to create 
it before the application is actually installed, which drastically limits 
exploitability. 
The default permissions on registry hives are quite strict, allowing only 
administrative users to write to the portions under the local machine hive. 
Therefore, there's far less chance that malicious users can write to sensitive 
keys or values. 
Despite these reasons, key squatting might still be an issue. Services can store 
session-related information in the registry, allowing applications to potentially squat 
on key and value pairs. Client applications might also perform similar operations that 
leave them vulnerable to client-side registry squatting attacks. Here's the API for 
creating and opening registry keys: 
LONG RegCreateKeyEx(HKEY hKey, LPCSTR lpSubKey, DWORD Reserved, 
    LPTSTR lpClass, DWORD dwOptions, REGSAM samDesired, 
    LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, 
    LPDWORD lpdwDisposition) 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
699 
The RegCreateKeyEx() function is responsible for creating a new key or opening an 
existing key. The first parameter is a handle to an existing key or one of the 
predefined keys discussed earlier. The second parameter is the subkey to create or 
open. All the remaining parameters provide information about the subkey, such as 
what type of data is stored in the key, associated security permissions, and so forth. 
If the key already exists, all parameters pertaining to the type of key and the key 
access permissions are ignored. When looking for key-squatting issues, the last 
parameter, lpdwDisposition, is important. This value is filled in by RegCreateKeyEx() 
and can contain REG_CREATED_NEW_KEY to indicate it created the key successfully or 
REG_OPENED_EXISTING_KEY. Therefore, an application is immune to key squatting if it 
checks this value, as shown in this example: 
BOOL CreateNewKey(HKEY hKey, LPCSTR lpSubKey, HKEY hNewKey) 
{ 
    DWORD dwDisp; 
    if(RegCreateKeyEx(hKey, lpSubKey, NULL, NULL, 
        REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, 
        NULL, &hNewKey, &dwDisp) != ERROR_SUCCESS) 
        return FALSE; 
    if(dwDisp != REG_CREATED_NEW_KEY) 
        return FALSE; 
    return TRUE; 
} 
However, if an application fails to check the lpdwDisposition value and is writing to a 
registry location accessible to malicious users, the potential for key squatting exists. 
The following example is a slightly modified version of the CreateNewKey() function 
that's now vulnerable to key squatting: 
BOOL CreateNewKey(HKEY hKey, LPCSTR lpSubKey, HKEY hNewKey) 
{ 
    if(RegCreateKeyEx(hKey, lpSubKey, NULL, NULL, 
        REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, 
        NULL, &hNewKey, NULL) != ERROR_SUCCESS) 
        return FALSE; 
    return TRUE; 
} 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
700 
Notice that a NULL value is supplied as the disposition argument to RegCreateKeyEx(). 
Therefore, there is no way of knowing whether a new key is a created key or an 
existing one is opened. This failure to check for the key's creation state leaves this 
code vulnerable to key squatting attacks. 
7.7.9 Summary 
This chapter establishes essential background information on the Windows OS and 
the applications developed for it. You've observed the important aspects of the object 
model, and how the Windows security model is applied. You've also discovered many 
of the more specific quirks of how Windows handles typical OS capabilities such as 
paths, process, and so on. With these tools, you should be able to note areas where 
the Windows architecture is confusing and where developers are more prone to make 
security mistakes. In the next chapter, you will expand on this foundation and 
address the unique issues that occur in communications across processes and remote 
systems. 
7.8 
Chapter 
12. 
Windows 
II: 
Interprocess 
Communication 
Chapter 12. Windows II: Interprocess Communication 
"Give me back my elephant!" 
Tony Jaa as Kham, Tom yum goong (2005) 
7.8.1 Introduction 
Chapter 11(? [????.]), "Windows I: Objects and the File System," explored general 
architectural issues that affect the security of Windows applications. It focused on 
developing an understanding of the Windows security model and its object-based 
architecture. Up to this point, however, you have looked at these components only in 
isolation from the rest of the system. To complete your understanding of Windows, 
you need to consider the interprocess communications (IPC) mechanisms Windows 
provides and how they affect application security. 
IPC refers to the mechanisms for passing data (in a myriad of forms) between two 
related or unrelated processes. These processes can exist on the same machine or 
could be located on different machines that communicate across a network. Windows 
operating systems provide a wide variety of native IPC mechanisms, each with a rich 
feature set for controlling communication details and access controls. These 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
701 
mechanisms are used extensively to transmit data, apportion workloads, and signal 
events between processes on the same system or across a network. 
Of course, all this capability comes at a price; communication mechanisms must 
expose some attack surface and open the potential for new vulnerabilities. In the 
most severe cases, Windows IPC vulnerabilities have allowed remote unauthenticated 
users to gain full administrative access to a vulnerable machine. This chapter 
examines several popular IPC mechanisms in Windows operating systems and 
explains how to apply what you have already learned to assess services using these 
IPC mechanisms. 
7.8.2 Windows IPC Security 
Before you delve into the coverage of IPC mechanisms, you need to expand your 
knowledge of Windows security a bit. Chapter 11(? [????.]) explained the core 
elements of the security model; however, there are more complicated situations to 
consider when you're dealing with IPC communications. In particular, you need to 
understand how security is affected by communication across a network and how 
impersonation affects the user security context. The following sections explain some 
basic principles of IPC security that lay the foundation for the discussion in the 
remainder of this chapter. 
The Redirector 
Windows network authentication can be confusing from the programmer's 
perspective because so many things seem to happen implicitly, and you might not be 
sure what's going on under the hood. The redirector is the component that acts as 