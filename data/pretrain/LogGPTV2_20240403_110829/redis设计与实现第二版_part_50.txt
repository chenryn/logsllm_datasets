，从而防止不合法的数据被写人数据库中。
，如果脚本已经执行过写人操作，那么客户端只能用 SHUTDOWN nosave 命令
"2f31ba2bb6d6a0f42cc159d2e2dad55440778de3"
'hi+
lua_scripts
图 20-7lua_scripts字典
返回执行结果
图 20-8带有超时处理钩子的脚本的执行过程
或者SHUTDOWN
执行 SCRIPT KILL
或者SHUTDOWN
有SCRIPT KILL
NOSAVE到达?
→"return 'hi'"
是
定期调用钩子
脚本执行完毕？
开始执行脚本
否
值为"return
第20章Lua脚本·335
继续执行脚本
否
---
## Page 340
336·第四部分独立功能的实现
键的值设置为"helloworld"，并且将脚本：
服务器会接收并执行这条 EVAL 命令，最终结果是，
被执行的命令传播（propagate）给所有从服务器，如图 20-9所示。
Redis 命令的方法一样，当主服务器执行完以上三个命令的其中一个时，主服务器会直接将
20.6.1
以及 SCRIPT LOAD 命令。
也会被复制到从服务器，这些命令包括EVAL命令、EVALSHA命令、SCRIPTFLUSH命令，
20.6
Redis 复制 EVAL、
与其他普通 Redis 命令一样，当服务器运行在复制模式之下时，具有写性质的脚本命令
那么主服务器在执行这个EVAL命令之后，将向所有从服务器传播这条EVAL命令，从
接下来的两个小节将分别介绍这四个命令的复制方法。
"return redis.call('sET', KEYS[1], ARGV[1])"
举个例子，如果客户端向主服务器执行以下命令：
OK
对于EVAL 命令来说，在主服务器执行的Lua脚本同样会在所有从服务器中执行。
1. EVAL
 脚本复制
复制 EVAL 命令、SCRIPT FLUSH 命令和 SCRIPT LOAD 命令
客户端
、SCRIPT FLUSH、SCRIPT LOAD 三个命令的方法和复制其他普通
SCRIPT FLUSH
图20-9将脚本命令传播给从服务器
或者
主服务器
，主从服务器双方都会将数据库"msg"
SCRIPT FLUSH
SCRIPT
 SCRIPT LOAD
SCRIPT LOAD
SCRIPT
SCRIPT
SCRIPT
EVAL
或者
或者
或者
或者
FLUSH
FLUSH
LOAD
LOAD
1→
从服务器N
从服务器2
从服务器1
---
## Page 341
slave1执行的时候，slave1却会出现脚本未找到错误：
法将脚本：
bf2030dea6d65de91的脚本就存在于主服务器中了。
执行时却可能会出现脚本未找到（not found）错误。
对于一个在主服务器被成功执行的EVALSHA命令来说，相同的EVALSHA命令在从服务器
SCRIPTLOAD命令或者SCRIPTFLUSH命令那样，直接将EVALSHA命令传播给从服务器
务器与从服务器载人 Lua 脚本的情况可能有所不同，所以主服务器不能像复制EVAL 命令、
20.6.2
所有从服务器传播相同的 SCRIPTLOAD 命令，使得所有从服务器也会载人相同的Lua 脚本。
传播 SCRIPT FLUSH 命令。
现在，假设一个从服务器 slave1开始复制主服务器 master，如果 master 不想办
EVALSHA 命令是所有与Lua 脚本有关的命令中，复制操作最复杂的一个，因为主服
的时候，master 将成功执行这个EVALSHA命令，
那么在执行这个SCRIPTLOAD命令之后，SHA1值为5332031c6b470dc5a0dd9b4
举个例子，如果客户端向主服务器发送命令：
传送给slave1载人的话，那么当客户端向主服务器发送命令：
"return 'hello world'"
那么主服务器也会向所有从服务器传播同样的命令：
如果客户端使用SCRIPT LOAD 命令，向主服务器载人一个Lua脚本，那么主服务器将向
"hello world"
最终的结果是，主从服务器双方都会载人脚本：
3. SCRiPT LOAD
最终的结果是，主从服务器双方都会重置自己的Lua环境，并清空自己的脚本字典。
如果客户端向主服务器发送SCRIPTFLUSH命令，那么主服务器也会向所有从服务器
"5332031c6b470dc5a0dd9b4bf2030dea6d65de91"
"return 'hello world'"
2. SCRIPT FLUSH 
保存在脚本字典里面。
 复制 EVALSHA 命令
，而当 master 将这个命令传播给
第20章Lua脚本·337
---
## Page 342
338第四部分独立功能的实现
本传播给了所有从服务器：
这两个字典的作用，并最终说明Redis 复制EVALSHA命令的方法。
态的 lua_scripts 字典和 repl_scriptcache_dict 字典，接下来的小节将分别介绍
替EVALSHA命令。
须确保EVALSHA命令要执行的脚本已经被所有从服务器载人过，如果不能确保这一点的话，
脚本未找到错误。
想办法将脚本：
SHA1 校验和为 5332031c6b470dc5a0dd9b4bf2030dea6d65de91 的 Lua 脚本。
者 SCRIPT LOAD 命令来实现）。
master，所以 master 载人的所有 Lua 脚本，slavel 也有载人（通过传播 EvAL 命令或
以在另一个从服务器成功执行。
一个EVALSHA命令可以在某个从服务器成功执行，也不代表这个EVALSHA命令就一定可
传播EVALSHA命令，或者将EVALSHA命令转换成EVAL命令，都需要用到服务器状
为了防止以上假设的情况出现，Redis 要求主服务器在传播EVALSHA 命令的时候，必
主服务器使用服务器状态的repl_scriptcache_dict字典记录自己已经将哪些脚
如果这时，
1. 判断传播 EVALSHA 命令是否安全的方法
的时候，master 和 slave1 都将成功执行这个EVALSHA命令，而 slave2 却会发生
那么这个命令也会被传播到 slave1上面，所以 master 和 slave1 都会成功载人
例如说，如果客户端向 master 发送命令:
举个例子，假设有主服务器 master 和从服务器 slave1，并且 slave1一直复制着
struct redisServer {
"return 'hello world"
更为复杂的是，因为多个从服务器之间载人Lua 脚本的情况也可能各有不同，所以即使
"hello world"
传送给 slave2的话，那么当客户端向主服务器发送命令：
"5332031c6b470dc5a0dd9b4bf2030dea6d65de91"
(error) NOsCRIPT No matching script. Please use EVAL.
！..·
dict *repl_scriptcache_dict;
，一个新的从服务器 slave2 开始复制主服务器master，如果 master 不
---
## Page 343
scriptcache_dict字典来说，SHAl 校验和为：
的 EVALSHA 命令，那么至少有一个从服务器会出现脚本未找到错误。
人，但是并没有传播给所有从服务器，如果我们尝试向从服务器传播包含这个SHA1校验和
于repl_scriptcache_dict字典，那么说明校验和对应的Lua脚本已经被主服务器载
EVALSHA命令，并且从服务器在执行这些EVALSHA命令的时候不会出现脚本未找到错误：
以向从服务器传播以下三个
20-10所示，那么主服务器可
dict字典的当前状态如图
器 repl_scriptcache_
会出现脚本未找到错误。
命令，而不必担心从服务器
个 SHA1校验和的 EVALSHA
验和对应的Lua脚本已经传播给了所有从服务器，主服务器可以直接向从服务器传播包含这
则全部都是NULL，当一个校验和出现在repl_scriptcache_dict 字典时，说明这个校
举个例子，如果主服务
的脚本：
"5332031c6b470dc5a0dd9b4bf2030dea6d65de91"
另一方面，如果一个脚本的 SHAl 校验和存在于lua_scripts 字典，但是却不存在
EVALSHA "a27e7e8a43702b7046d4f6a7ccf5b60cef6b9bd9" ...
EVALSHA "2f31ba2bb6d6a0f42cc159d2e2dad55440778de3" ...
repl_scriptcache_dict 字典的键是一个个 Lua 脚本的 SHA1 校验和，而字典的值
"return 'hello world'"
"5332031c6b470dc5a0dd9b4bf2030dea6d65de91"
"4475bfb5919b5ad16424cb50f74d4724ae833e72"
"a27e7e8a43702b7046d4f6a7ccf5b60cef6b9bd9#
"2f31ba2bb6a6a0f42cc159d2e2dad55440778de3"
lua_scripts
图 20-1llua_scripts 字典
"4475bfb5919b5ad16424cb50f74d4724ae833e72"
"a27e7e8a43702b7046d4f6a7ccf5b60cef6b9bd9"
"2f31ba2bb6d6a0f42cc159d2e2dad55440778de3"
repl_scriptcache_dict
"return 2*2"
"return l+1"
"return 'hi'n
第20章Lua脚本339
NULL
NULL
NULL
---
## Page 344
340◆第四部分独立功能的实现
传播的EVALSHA命令，以此来产生相同的脚本执行效果，并确保所有从服务器都不会出现
EVALSHA命令转换成等价的EVAL命令，然后通过传播等价的EVAL命令来代替原本想要
键的值。
scriptcache_dict字典来说，我们总可以将命令：
script，至于 numkeys、key、arg 等参数则保持不变。
script。
本，服务器总可以将一个EVALSHA命令：
器不会出现脚本未找到错误。
scriptcache_dict 字典，强制自己重新向所有从服务器传播脚本，从而确保新的从服务
dict 字典里面记录的脚本已经不再被所有从服务器载人过，所以主服务器会清空repl_
scriptcache_dict字典，这是因为随着新从服务器的出现，repl_scriptcache_
务器发送命令：
如果一个 SHA1值所对应的 Lua 脚本没有被所有从服务器载人过，那么主服务器可以将
举个例子，对于图 20-11 所示的lua_scripts 字典，以及图 20-10 所示的 repl,
2）将原来的 EVALSHA 命令请求改写成 EVAL 命令请求，并且将校验和 sha1改成脚本
来源于 1ua_scripts 字典"5332031c6b470dc5a0dd9b4bf2030dea6d65de91"
其中脚本的内容：
EVAL "return 'hello world'" 0
改写成命令：
1）根据 SHA1校验和 sha1，在iua_scripts 字典中查找 sha1 对应的 Lua脚本
EVAL   [key ...] [arg ...]
转换成一个等价的EVAL命令：
EVALSHA   [key ...] [arg ...]
通过使用 EVALSHA 命令指定的 SHA1校验和，以及 1ua_scripts 字典保存的 Lua 脚
3. EVALSHA 命令转换成 EVAL 命令的方法
具体的转换方法如下：
每当主服务器添加一个新的从服务器时，主服务器都会清空自已的repl
2.清空 repl_scriptcache_dict 字典
那么至少会有一个从服务器遇上脚本未找到错误。
虽然已经载人到主服务器里面，但并未传播给所有从服务器，如果主服务器尝试向从服
"return 'hello world'"
"return 'hello world'r
---
## Page 345
的EVAL命令：
的状态如图 20-13所示，如果客户端向主服务器发送命令：
那么主服务器直接向从服务器传播EVALSHA命令。
EVALSHA命令还是EVAL命令：
定的 SHA1 校验和是否存在于 repl_scriptcache_dict 字典来决定是向从服务器传播
命令，而不必再次对EVALSHA命令进行转换。
如果之后EVALSHA 命令再次指定这个 SHA1校验和，主服务器就可以直接传播EVALSHA
是原本 EVALSHA命令指定的那个校验和）添加到 repl_scriptcache_dict 字典里面，
脚本未找到错误。
那么主服务器在执行完这个EVALSHA 命令之后，会将这个 EVALSHA命令转换成等价
EVALSHA   [key ...] [arg ...]
2）如果 EVALSHA 命令指定的 SHA1 校验和不存在于 repl_scriptcache_dict 字典，
O .Plrom oTtau. uanaa, TaAa 
另外，因为主服务器在传播完EVAL 命令之后，会将被传播脚本的 SHA1 校验和（也即
图 20-12 展示了这个判断过程。
当主服务器成功在本机执行完一个EVALSHA命令之后，它将根据EVALSHA命令指
4. 传播 EVALSHA 命令的方法
图 20-12主服务器判断传播 EVAL 还是 EVALSHA 的过程
传播
repl_scxiptcache_dict字典?
主服务器在本机执行完命令
校验和 sha1是否存在于
EVAL  
将 EVALSHA 命令转换成等价的EVAL 命令
repl_scriptcache_dict 字典
否
将shal添加到
传播
>[key ...] [arg ...]
第20章Lua脚本341
---
## Page 346
342·第四部分独立功能的实现
20.7
he_dict 字典如图 20-14 所示。
命令转换成 EVAL命令再传播。
a6d65de91"添加到repl_scriptcache_dict字典里，这样当客户端下次再发送命令：
口 Redis使用脚本字典来保存所有被EVAL命令执行过，或者被SCRIPTLOAD 命令载
口 Redis 服务器专门使用一个伪客户端来执行 Lua脚本中包含的 Redis 命令。
口 Redis 服务器在启动时，会对内嵌的Lua 环境执行一系列修改操作，从而确保内嵌的
的时候，主服务器就可以直接向从服务器传播这个EVALSHA命令，而无须将EVALSHA
除此之外，主服务器还会将 SHA1校验和"5332031c6b470dc5a0dd9b4bf2030de
并向所有从服务器传播这个 EVAL命令。
Lua 环境可以满足 Redis 在功能性、安全性等方面的需要。
功能。
人过的Lua脚本，这些脚本可以用于实现SCRIPT EXISTS命令，以及实现脚本复制
重点回顾
"5332031c6b470dc5a0dd9b4bf2030dea6d65de91"
"4475bfb5919b5ad16424cb50f74d4724ae833e72"
"a27e7e8a43702b7046d4f6a7ccf5b60cef6b9bd9"
"2f31ba2bb6d6a0f42cc159d2e2dad55440778de3"
图 20-13执行 EVALSHA 命令之前的 lua_scripts 字典和 repl_scriptcache_dict 字典
图 20-14 执行 EVALSHA命令之后的 repl_scriptcache_dict 字典
"4475bfb591 9b5ad16424cb50f74d4724ae833e72"
"5332031c6b470dc5a0dd9b4bf2030dea6d65de91"
"a27e7e8a43702b7046d4f6a7ccf5b60cef6b9bd9"
"2f31ba2bb6d6a0f42cc159d2e2dad55440778de3"
"2f31ba2bb6d6a0f42cc159d2e2dad55440778de3"
lua_scripts
 repl_scriptcache_dict
 repl_scriptcache_dict
"return 'hello world'u
"return 2*2"
"return 1+1"
"return 'hi'"
NULI
*NULI
→NULL
NULL
NULL
NULL
---
## Page 347
www.lua.org/manual/5.1/manual.html
20.8参考资料
《Lua 5.1 Reference Manual》对 Lua 语言的语法和标准库进行了很好的介绍：http://
口主服务器在复制EVALSHA 命令时，必须确保所有从服务器都已经载人了EVALSHA
口 主服务器复制 EVAL、SCRIPT FLUSH、SCRIPT LOAD 三个命令的方法和复制普通
 SCRIPT FLUSH命令会清空服务器 lua_scripts 字典中保存的脚本，并重置 Lua
口EVALSHA命令通过直接调用Lua环境中已定义的函数来执行脚本。
口EVAL 命令为客户端输人的脚本在 Lua环境中定义一个函数，并通过调用这个函数来
执行脚本。
命令指定的 SHA1校验和所对应的Lua 脚本，如果不能确保这一点的话，主服务器
Redis 命令一样，只要将相同的命令传播给从服务器就可以了。
服务器在执行脚本之前，会为Lua 环境设置一个超时处理钩子，当脚本出现超时运
将脚本保存到lua_scripts字典中。