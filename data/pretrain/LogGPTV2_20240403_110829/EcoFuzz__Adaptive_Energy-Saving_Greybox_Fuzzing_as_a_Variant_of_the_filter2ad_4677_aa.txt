title:EcoFuzz: Adaptive Energy-Saving Greybox Fuzzing as a Variant of the
Adversarial Multi-Armed Bandit
author:Tai Yue and
Pengfei Wang and
Yong Tang and
Enze Wang and
Bo Yu and
Kai Lu and
Xu Zhou
EcoFuzz: Adaptive Energy-Saving Greybox Fuzzing 
as a Variant of the Adversarial Multi-Armed Bandit
Tai Yue, Pengfei Wang, Yong Tang, Enze Wang, Bo Yu, Kai Lu, and Xu Zhou, 
National University of Defense Technology
https://www.usenix.org/conference/usenixsecurity20/presentation/yue
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.EcoFuzz: Adaptive Energy-Saving Greybox Fuzzing as a
Variant of the Adversarial Multi-Armed Bandit
Tai Yue, Pengfei Wang, Yong Tang*, Enze Wang, Bo Yu, Kai Lu, Xu Zhou
National University of Defense Technology
{yuetai17, pfwang, ytang, wangenze18, yubo0615, kailu, zhouxu}@nudt.edu.cn
Abstract
Fuzzing is one of the most effective approaches for identifying
security vulnerabilities. As a state-of-the-art coverage-based
greybox fuzzer, AFL is a highly effective and widely used
technique. However, AFL allocates excessive energy (i.e.,
the number of test cases generated by the seed) to seeds that
exercise the high-frequency paths and can not adaptively ad-
just the energy allocation, thus wasting a signiﬁcant amount
of energy. Moreover, the current Markov model for model-
ing coverage-based greybox fuzzing is not profound enough.
This paper presents a variant of the Adversarial Multi-Armed
Bandit model for modeling AFL’s power schedule process.
We ﬁrst explain the challenges in AFL’s scheduling algo-
rithm by using the reward probability that generates a test
case for discovering a new path. Moreover, we illustrated the
three states of the seeds set and developed a unique adaptive
scheduling algorithm as well as a probability-based search
strategy. These approaches are implemented on top of AFL
in an adaptive energy-saving greybox fuzzer called EcoFuzz.
EcoFuzz is examined against other six AFL-type tools on
14 real-world subjects over 490 CPU days. According to the
results, EcoFuzz could attain 214% of the path coverage of
AFL with reducing 32% test cases generation of that of AFL.
Besides, EcoFuzz identiﬁed 12 vulnerabilities in GNU Binu-
tils and other software. We also extended EcoFuzz to test
some IoT devices and found a new vulnerability in the SNMP
component.
1 Introduction
Fuzzing is an automated software testing method that is pop-
ular and effective for detecting vulnerabilities in software,
which was ﬁrst devised by Barton Miller in 1989 [23, 32].
Since then, fuzzing has been developed rapidly [22]. As one
of the most effective techniques, Coverage-based Greybox
Fuzzing (CGF) has attracted several researchers’ attention [6].
*Corresponding author
Combined with genetic algorithms, CGF obtains the path cov-
erage generated by the instrumentation tools and uses it to
select good seeds. This technique helps the fuzzing to proceed
in a direction that constantly improves the coverage, and more
coverage being achieved leads to more bugs for triggering [9].
As Miller’s report, a 1% increase in code coverage increases
the percentage of bugs found by 0.92% [24].
One of the most popular and widely-adopted CGF is Ameri-
can Fuzzy Lop (AFL) [40]. AFL is an efﬁcient method for ﬁle
application fuzzing and has identiﬁed numerous high-impact
vulnerabilities [39]. However, when AFL was used to fuzz
real-world programs, it displayed certain shortcomings. The
main challenge is that the majority of the test cases exercise
the same few paths, thus causing a signiﬁcant amount of en-
ergy wasted on the high-frequency paths [6]. Especially in the
later stages of fuzzing, the seeds that exercise high-frequency
paths can no longer help in improving the discovery of new
paths. However, AFL’s constant power schedule is unable to
allocate energy to the seeds reasonably. Typically, AFL as-
signs too much energy to the seeds exercising high-frequency
paths. Such problems reﬂect the insufﬁcient performance of
AFL’s schedule algorithm. More importantly, the schedule
algorithm of AFL is not built on a scientiﬁc theoretical model.
Some methods and techniques have been proposed to in-
crease the performance of scheduling algorithms. AFLFast
modeled the transition probability of mutating a seed for gen-
erating a test case exercising another path with the transition
probability in a Markov chain [6]. Then, AFLFast imple-
mented a monotonous power schedule to assign energy [6].
This can rapidly approach the minimum energy required for
discovering a new path. However, AFLFast cannot ﬂexibly
adjust the allocation strategy according to the fuzz process,
thereby increasing the average energy cost of discovering a
new path. Besides, though AFLFast proposed the transition
probability in fuzzing and determined the method for assign-
ing energy as per the transition probability [6], it was unable
to provide a detailed analysis of the transition probability. It
is not possible to calculate the transition probability from a
discovered path to an undiscovered path. In fact, in this con-
USENIX Association
29th USENIX Security Symposium    2307
text, selecting the next seed and assigning energy to the seed
is the classic “exploration vs. exploitation” trade-off problem
from game theory, not a simple probability problem.
This paper proposes a variant of the Adversarial Multi-
Armed Bandit (VAMAB) model to model CGF. We modeled
each seed as a “bandit” of VAMAB, which is a classical con-
cept from MAB, and explained the trade-off between explo-
ration and exploitation in CGF as per the VAMAB model.
Moreover, the Markov chain was used for understanding
the details from a probabilistic perspective. As opposed to
AFLFast [6], our model’s perspective for regarding the pro-
cess of power schedules is derived from game theory, which
helps in better understanding the challenges in schedule al-
gorithm compared to the Markov chain. Further, an adap-
tive average-cost-based power schedule algorithm as well as
a self-transition-based probability estimation method were
developed according to the VAMAB model and were imple-
mented on AFL in a tool named EcoFuzz, which is an adaptive
energy-saving greybox fuzzer. Compared to AFL’s constant
schedule and AFLFast’s monotonous schedule, EcoFuzz im-
plements an adaptive schedule that can effectively reduce
energy wastage, which maximizes the path coverage in the
ﬁnite times of executions. EcoFuzz is particularly well-suited
in situations that have limited performance, such as fuzzing
the IoT devices and fuzzing the binary programs via QEMU.
In this paper, EcoFuzz was evaluated with six state-of-the-art
AFL-type fuzzers such as AFLFast, FairFuzz and MOPT on
14 real-world software [6,17,21]. We also compared EcoFuzz
with other four tools like Angora on LAVA-M [10, 12]. The
following are the contributions made in this paper.
• An Variant of the Adversarial Multi-Armed Bandit
(VAMAB). We proposed a VAMAB model to model the
CGF, as well as proposed the reward probability which
is the probability of the seed to discover new paths. We
presented the variations of reward probability in detail
and introduced the attenuation of this probability. Fur-
ther, we explained AFL’s challenges, classiﬁed CGF into
three states, and put forth strategies that could enhance
AFL’s performance in each state.
• Self-transition-based Probability Estimation Method
(SPEM). We designed a method to estimate the reward
probability for selecting seeds in the exploitation state.
This method is more accurate than AFL’s search strategy
for selecting the next seed with a high reward probability.
• Adaptive Average-Cost-based Power Schedule (AAPS).
We recommended an adaptive power schedule that as-
signs energy to each seed by utilizing the average-cost
as the baseline, and then monotonously increases the en-
ergy. Compared to AFLFast, AAPS can adjust the next
energy allocation by assessing previous allocations.
• Tool. We implement our approaches on AFL, an adap-
tive energy-saving fuzzer named EcoFuzz. EcoFuzz was
then assessed as per 14 real-world software and LAVA-
M compared to certain state-of-the-art tools. Results
showed that EcoFuzz could ﬁnd more paths compared
to other AFL-type fuzzers with the same number of ex-
ecutions. Moreover, EcoFuzz detected more bugs than
others on LAVA-M, and found 12 vulnerabilities in some
software, obtaining 2 CVEs. EcoFuzz was also adopted
for testing the SNMP component and found a vulnera-
bility. We have published EcoFuzz on Github (https:
//github.com/MoonLight-SteinsGate/EcoFuzz).
2 Background
2.1 American Fuzzy Lop
As a state-of-the-art CGF, AFL is favored by numerous re-
searchers [6,13,17,43]. AFL uses lightweight instrumentation
to capture basic block transitions and determine a unique iden-
tiﬁer for the path exercised by a test case, and employs genetic
algorithms to discover test cases that are likely to trigger new
paths [42]. Its efﬁciency is affected by some factors.
Search strategy for seeds. AFL keeps a seed queue, de-
queues seeds one by one, and fuzzes them. AFL marks some
seeds as favored seeds and gives these seeds preference over
the non-favored ones [26]. In detail, AFL determines a seed
as a favored seed according to the fav factor calculated by the
seed’s execution time and length.
Mutation strategies and power schedules. AFL has two
categories of mutation strategies, which are deterministic and
indeterministic [42]. The deterministic strategies operate at
every bit/byte of each input. And they are only used when it is
the ﬁrst time for fuzzing the seed. In deterministic strategies,
AFL assigns energy to the seed according to its length.
After implementing deterministic strategies, AFL effectu-
ates the indeterministic strategies, including havoc and splice.
In this stage, AFL mutates the seed by randomly selecting a
sequence of mutation operators and applies them to random
locations in the seed ﬁle. AFL assigns energy to the seed
according to its score, which is based on coverage (prioritize
inputs that cover more of the program), execution time (prior-
itize inputs that execute faster), and discovery time (prioritize
inputs discovered later) [15]. Particularly, if the test case exer-
cises a new path, AFL will double the assigned energy.
Numerous researchers prefer AFL as its high speed of muta-
tion and execution. AFL also supports source code instrumen-
tation as well as binary instrumentation via QEMU [4], thus
making AFL easy to start. However, its performance can be
further enhanced. AFL is unable to adjust its energy allocation
adaptively and constantly assigns more than the minimum en-
ergy required to discover a new path on some seeds, resulting
in signiﬁcant energy wastage [6]. Additionally, AFL has a sim-
ple search strategy that is inefﬁcient, leading to AFL taking
more turns to select valuable seeds. Finally, the deterministic
strategies are also not as effective as random strategies [41].
2308    29th USENIX Security Symposium
USENIX Association
2.2 Coverage-based Greybox Fuzzing
Markov Chain
as
Böhme et al. [6] modeled CGF as a systematic exploration
of the state space of a Markov chain. More importantly, they
proposed the transition probability in CGF and modeled it as
that in the Markov chain [25].
A Markov chain is a stochastic process that transitions
from one state to another. Formally, a Markov chain refers
to a sequence of random variables {X0,X1, ...,Xn} where Xi
denotes the state of the process at time i. The value of Xi is
taken from a set of states S = {1,2, ...,N} for some N ∈ N.
Further, the transition probability pi j indicates the chain’s
state transition probability from state i at time t to state j at
time t + 1, which is signiﬁed as the conditional probability,
pi j = P(Xt+1 = j|Xt = i)
(1)
Particularly, if the transition probability pi j depends only
on the state i and j, and not on the time t, the Markov
chain is called time-homogeneous. To model CGF as a time-
homogeneous Markov chain, Böhme et al. deﬁned the Markov
chain’s state space as the discovered paths and their immedi-
ate neighbors [6]. That is, given a set of seeds T , S+ indicates
the set of discovered paths that are exercised by T while S− is
the set of undiscovered paths [6] that are exercised by inputs
generated by randomly mutating any seed from T . The set of
states S is deﬁned as
S = S+ ∪ S−
(2)
The transition probability is deﬁned as follows. For path
i ∈ S+, pi j is the probability of generating a test case ex-
ercising the path j through the mutation of the seeds ti ∈ T
that exercises the path i.
According to this model, Böhme et al. [6] proposed that
a more efﬁcient CGF can discover an undiscovered state in
a low-density region while assigning the least amount of
total energy. That is, deﬁning E[Xi j] is the expectation of the
minimum energy that should be assigned to seed ti ∈ T for
discovering the new state j, CGF must choose ti for fuzzing
such that ∃ j ∈ S− where the probability of executing path j
is low and E[Xi j] is minimal. Moreover, the energy assigned
to ti should be E[Xi j], which is deduced as 1/pi j in [6].
Unfortunately, when fuzzing real-world programs, it is im-
possible to calculate the transition probability of discovering
a new path from the current seed precisely, and thus, a com-
pletely accurate approach cannot be determined for selecting
the next seed and assigning energy to it. However, there is a
seed ti ∈ T that has the highest probability of ﬁnding a new
path. AFLFast [6] recommended selecting the next favored
seed that is chosen from the queue with the smallest number
of times and that exercises a path with the least amount of
fuzz. However, the efﬁciency of this search strategy depends
on the information about all seeds. If there is a queue of seeds
Q where some seeds from Q have been fuzzed while others
are not, there may be more accurate recognition for seeds
that have been fuzzed than those that have not. For choosing
the next seed ti where the probability of executing path i is
the minimum, it is necessary to conduct an examination for
fuzzing seeds that have not been fuzzed, which is a classic
“exploration vs. exploitation” trade-off problem.
2.3 Multi-Armed Bandits Problem
The Multi-Armed Bandit problem is important as one of the
simplest non-trivial problems wherein the conﬂict between ex-
ploitation and exploration [7, 35]. This problem resulted from
the slot machine with multiple arms. In this case, the player
plays one of the arms and obtains a reward. The player’s main
goal is maximizing the rewards in ﬁnite trials [35].
Formally, as shown in Fig. 1, there are N parallel arms,
indexed i ∈ K = {1,2, ...,N}, and each time only a single
arm is allowed to be selected to play. The state of arm i at
time t is denoted as xi(t), while the expectation of reward
of the arm i at time t is Ri(xi(t)) [35]. However, there is no
indication about the reward expectations related to each arm.
Thus, the problem is how to allocate the trials over arms
sequentially in time to maximize the expected total reward.
It should be noted that an increasing number of trails being
allocated to an arm i will lead to more accurate information
being deduced regarding the reward expectation of i, which
is the process of exploration. If all the reward expectations
of all arms are known, then we only select those arms with
the highest expectation to gain the highest reward, which is
the process of exploitation. Therefore, our goal is achieved by
having a trade-off between exploration (trying out some arms)
and exploitation (choosing an arm with the highest reward).
Exploitation helps maximize the expected rewards for a single
step, whereas the combination of exploration and exploitation
helps achieve higher rewards in the long run [26].
Figure 1: The schematic diagram of the MAB problem, where
the grey color block symbolizes that this arm has been played
for some times.
In the classic MAB problem, there are two assumptions that
the distribution of rewards for each arm is time-invariant, and
the number of arms is constant. Thus, solutions concerning the
MAB problem have almost relied on these assumptions [2].
However, these assumptions limit the MAB model’s applica-
bility. For modeling CGF as the MAB-type model, it is natural
to regard an arm as a seed. However, during fuzzing, the num-
ber of seeds (i.e., arms) is increasing and the probability of
USENIX Association
29th USENIX Security Symposium    2309
Arm-1Arm-2Arm-3……N parallelarmsPlaying for some timesArm-3Arm-NExplorationExploitationR1R2R3??Reward Probabilityﬁnding a new path (i.e., reward probability) is decreasing,
which are not constant. Particularly, Auer et al. proposed the
MAB problem variant that includes no-statistical assumptions
about generating rewards as the Adversarial Multi-Armed
Bandit (AMAB) problem [3]. We consider modeling CGF by
the variant of the AMAB model, not the MAB model.
3 A Variant of the Adversarial Multi-Armed
Bandit Model
In this section, we model the process of searching seeds and
assigning energy as a variant of the AMAB problem, thus
enabling exposing the essence of the CGF. Moreover, we
explain the exploration and exploitation during fuzzing ac-
cording to this model, and point out certain challenges in
enhancing AFL.
3.1 Coverage-based Greybox Fuzzing as the
Variant of the Adversarial Multi-Armed
Bandit Model
In this subsection, we deﬁne some assumptions and terms,
then build our VAMAB model. Assuming that we are fuzzing