    location /iframe_safe/ {
    proxy_pass http://tomcat_server/iframe_safe/;
    proxy_hide_header "X-Frame-Options";
    }
    location / {
    proxy_pass http://tomcat_server/;
    }
其实，作为攻击者的我们可以构造符合Nginx的`iframe_safe`规则，又能被后端Tomcat解析为完全不同的（访问）位置：
浏览器不会对其做规范化处理。这又符合Nignx的`iframe_safe`规则。Tomcat支持路径中插入参数，取`/any_other_path`。所以在这样的配置下，通过frame可以访问Tomcat的所有位置，这将导致`clickjacking`（点击劫持）攻击。
做一些思维发散，我们可以利用它来滥用其他安全有关的标头（例如：CORS, CSP）。
#### 缓存
缓存是最有趣的攻击向量之一，对于各类攻击都有很好的开发潜力。但是在反向代理领域利用缓存（攻击的方法）仍然鲜为人知。最近，与缓存相关的攻击越来越受关注了，网上有一些很酷的研究例如[Web缓存欺骗](http://omergil.blogspot.ru/2017/02/web-cache-deception-attack.html)和[实用的Web缓存中毒](https://i.blackhat.com/us-18/Thu-August-9/us-18-Kettle-Practical-Web-Cache-Poisoning-Redefining-Unexploitable.pdf)。在本篇文章中我也关注到了缓存：我想要分析出缓存的各种实现，从而有助于研究出缓存欺骗和缓存中毒攻击的方法。
##### 它是如何工作的
我将介绍一些反向代理中关于缓存的要点，这将帮助你理解这类攻击。
实现缓存的方式很简单。在某些情况下，一台反向代理服务器会将来自后端的响应存储到缓存中，以后直接调用缓存而不用访问后端服务器。一些反向代理服务器默认支持缓存，另一些则要求用户自行配置。一般来说，反向代理服务器会使用缓存标志，该标志与请求的主机头值和路径相关联。
反向代理对某个响应缓存与否，它会先检查请求中的`Cache-Control`和`Set-Cookie`标头。反向代理不会对存在`Set-Cookie`标头的请求做任何缓存，但是对于`Cache-Control`有些不同。它会将其视为缓存策略，请求额外的解析。`Cache-control`标头框架非常复杂，但是有基本的功能标志，例如决定是否缓存，设置缓存时限等。
`Cache-control`标头形式有下面这些：
    Cache-Control: no-cache, no-store, must-revalidate
    Cache-Control: public, max-age=31536000
第一个是禁止反向代理缓存，第二个相反。`Cache-control`标头滥用是允许反向代理储存响应。
大量的web服务器，应用服务器和框架自动且正确地设置`Cache-control`标头。在大部分情况下，如果web应用的某个脚本使用了`session`功能，那么该应用会严格设置`Cache-control`标头的缓存功能，因此如遇到这种情况，开发者不需要考虑（安全）。然而有例外，例如，如果web应用使用它自己的`session`安全机制，`Cache-control`标头可能会存在漏洞。
##### 攻击
反向代理的一个常用功能是“积极缓存”（这不是官方词汇，但可以描述其作用）。在一种情况下（后端严格限制，完全不允许缓存），管理员没有修改后端，而是修改反向代理规则，修改严格的`Cache-control`标头从而开启了缓存响应。这时，管理员一般都会错误设置。例如，只缓存响应中某些扩展名（`.jpg`, `.css`,
`.js`）或者某个路径（`/images/`）。
如果是这种情况，攻击者可以创建符合反向代理规则又被后端误判的路径。
这里还是Nginx+Tomcat的组合。下面这条规则强制使Nginx缓存Tomcat上`/images`目录的所有响应。
    location /images {
    proxy_cache my_cache;
    proxy_pass http://tomcat_server;
    proxy_cache_valid 200 302 60m;
    proxy_ignore_headers Cache-Control Expires;
    }
作为攻击者，我们可以滥用该规则，从而实现web缓存欺骗。只需受害者打开下面的这个URL（例如使用`img`）。
然后受害者的浏览器将发送请求（携带经认证的cookie）。Nginx发现请求中存在`/image`，于是直接转发该请求值Tomcat，然后缓存响应（Tomcat->Nginx，此时`Cache-Control`标头无效）。Tomcat在处理时将甄别出`/index.jsp`，因此攻击者可以强制Nginx缓存任何页面，攻击者仅需更改路径`/images/..;/index.jsp`从而盗取受害者的敏感数据（例如token->csrf攻击）。
这看起来只是一个web缓存欺骗的变种，但其实不然。
让我们来考虑缓存中毒攻击。此类攻击依赖于在请求中找到未加密的值（标头），这将显著地影响（从安全角度）接下来的响应，但是在这里，这个响应必须由反向代理服务器缓存，同时`Cache-Control`标头应当设置为允许。如果我们把所有东西中和起来，我们能够找出一些方法来造成缓存中毒攻击。
让我们想象一下这个场景。有一台Nuster（基于Haproxy的缓存代理）服务器和一个web应用。这个web应用上的`/account/attacker`有一处self-XSS漏洞（只在攻击者自己的账户上触发）。Nuster配置了缓存web应用上`/img/`目录的所有响应。
    nuster cache on
    nuster rule img ttl 1d if { path_beg /img/ }
攻击者仅需构造特殊URL`/img/..%2faccount/attacker/`，Nuster将会应用“积极缓存”规则，这时web应用返回self-XSS响应（可以看到存在`/account/attacker/`）。这个带有XSS
Payload的响应将被Nuster缓存，因此攻击者结合XSS与缓存滥用来攻击该应用的用户。这就是从self-XSS到正常XSS的一种方法。
### 小结
在本文中，我已经展示了各种错误配置情况的攻击。具体的案例并不重要。我只是想给出 **关于反向代理的一些新的攻击面**
。如果我们想要了解反向代理如何工作，它是如何处理请求和它与后端服务器有何区别，我们（作为攻击者）一定可以找到真实的端点或对用户开展更为复杂的攻击。
谈到防范这类攻击，我想说这里没有“银弹”（俚语：指具有驱魔功效的武器），因为至今我们仍没有统一的路径/请求的规范化标准，如果有，我认为可以很好的帮助防御方。如果你对代理及其限制有一定的了解，你也可以试着去更改配置以探究差异。
由于我希望能够分享出我的真实想法，导致这篇文章篇幅过长。尽管如此，我仍然跳过了一些“小把戏“”，你可以在[这里](https://www.acunetix.com/blog/articles/a-fresh-look-on-reverse-proxy-related-attacks/)观看它们。同时，我在Github上分享了我研究的[原始结果](https://github.com/GrrrDog/weird_proxies/wiki)。这项研究至今仍未完成。我在逐个测试其他软件来完善它。
在撰写本文时，我找到了其它类似的研究（
你可以将它们组合起来，或许能够获得一些提升。