SU (cid:5) to R.M.
(cid:2) ← Gen
∗ Generate new symmetric key k
∗ For all (cid:4)FK, id, (cid:4)f n, op
(cid:2)(cid:5), vf n, c
(cid:2)(cid:2), SU, sig(cid:5) with Ver
(cid:2)(cid:5), vf n, c
(cid:2)(cid:2), SU(cid:5), sig) = 1:
SU (cid:5) to R.M.
(cid:2)(cid:5), vf n + 1, Enc
∗ Increment vf n in FILES, i.e., set vf n := vf n + 1
id, (cid:4)f n, op
· Send (cid:4)FK,
Sign
SU ((cid:4)FK,
(cid:2)), SU,
(k
id, (cid:4)f n, op
(cid:2)(cid:5), v, c
Sym for p
IBE
id
IBS
IBS
IBS
IBS
– Increment vr in ROLES, i.e., set vr := vr + 1
– Delete all (cid:4)RK, −, (r, vr), −, −(cid:5)
– Delete all (cid:4)FK, (r, vr), −, −, −, −, −(cid:5)
IBS
IBS
assignP (r, (cid:4)f n, op(cid:5))
– For all (cid:4)FK, SU, (cid:4)f n, RW(cid:5), v, c, id, sig(cid:5) with Ver
id ((cid:4)FK, SU,
(cid:4)f n, RW(cid:5), v, c, id(cid:5), sig) = 1:
∗ If this adds Write permission to existing Read permission, i.e.,
(cid:2), SU,
(cid:2), SU(cid:5), sig) = 1:
SU (cid:5) to R.M.
∗ If the role has no existing permission for the ﬁle, i.e., there does not
SU ((cid:4)FK,
op = RW and there exists (cid:4)FK, (r, vr), (cid:4)f n, Read(cid:5), v, c
SU ((cid:4)FK, (r, vr), (cid:4)f n, op
sig(cid:5) with Ver
· Send (cid:4)FK, (r, vr), (cid:4)f n, RW(cid:5), v, c
· Delete (cid:4)FK, (r, vr), (cid:4)f n, Read(cid:5), v, c
exist (cid:4)FK, (r, vr), (cid:4)f n, op
(cid:2)(cid:5), v, c, SU(cid:5), sig) = 1:
(r, vr), (cid:4)f n, op
· Decrypt key k = Dec
· Send (cid:4)FK, (r, vr), (cid:4)f n, op(cid:5), v, Enc
to R.M.
(cid:2)(cid:5), v, c
(cid:2), SU, Sign
(cid:2), SU, sig(cid:5)
(cid:2), SU, sig(cid:5) with Ver
IBE
(r,vr )(k), SU, Sign
(cid:2)(cid:5), v, c
IBS
SU (cid:5)
IBE
kSU
(c)
IBS
IBS
revokeP (r, (cid:4)f n, op(cid:5))
– If op = Write:
(cid:4)FK,
∗ For all
IBS
(r, vr),
SU ((cid:4)FK, (r, vr), (cid:4)f n, RW(cid:5), v, c, SU(cid:5), sig) = 1:
Ver
· Send (cid:4)FK, (r, vr), (cid:4)f n, Read(cid:5), v, c, SU, Sign
· Delete (cid:4)FK, (r, vr), (cid:4)f n, RW(cid:5), v, c, SU, sig(cid:5)
(cid:4)f n, RW(cid:5), v, c, SU, sig(cid:5) with
SU (cid:5) to R.M.
IBS
– If op = RW:
∗ Delete all (cid:4)FK, (r, vr), (cid:4)f n, −(cid:5), −, −, −(cid:5)
∗ Generate new symmetric key k
∗ For all (cid:4)FK, r
(cid:2) ← Gen
(cid:2), (cid:4)f n, op
(cid:2)(cid:5), vf n, c, SU, sig(cid:5) with Ver
(cid:2)(cid:5), v, c, SU(cid:5), sig) = 1:
(cid:2), (cid:4)f n, op
r
· Send (cid:4)FK, r
Sign
(cid:2)(cid:5), vf n + 1, Enc
∗ Increment vf n in FILES, i.e., set vf n := vf n + 1
SU (cid:5) to R.M.
(cid:2), (cid:4)f n, op
IBE
id
Sym
IBS
IBS
SU ((cid:4)FK,
(cid:2)), SU,
(k
IBS
readu(f n)
– Find (cid:4)F, f n, v, c, id, sig(cid:5) with valid ciphertext c and valid signature
id ((cid:4)F, f n, 1, c, id(cid:5), sig) = 1
– Find a role r such that the following hold:
(cid:2)(cid:5), sig) = 1
sig, i.e., Ver
∗ u is in role r, i.e., there exists (cid:4)RK, u, (r, vr), c
(cid:2), sig(cid:5) with
∗ r has read access to version v of f n, i.e., there exists (cid:4)FK, (r, vr),
(cid:2)(cid:5) with Ver
SU ((cid:4)FK, (r, vr), (cid:4)f n, op(cid:5),
(cid:2))
Ver
(cid:4)f n, op(cid:5), v, c
(cid:2)(cid:2), SU(cid:5), sig
v, c
SU ((cid:4)RK, u, (r, vr), c
(cid:2)(cid:2), SU, sig
(cid:2)) = 1
IBS
IBS
– Decrypt role key k(r,vr ) = Dec
– Decrypt ﬁle key k = DecIBE
k(r,vr )
– Decrypt ﬁle f = Dec
(c)
Sym
k
IBE
ku
(c
(c
(cid:2)(cid:2))
IBS
IBS
writeu(f n, f )
– Find a role r such that the following hold:
SU ((cid:4)RK, u, (r, vr), c(cid:5), sig) = 1
∗ u is in role r, i.e., there exists (cid:4)RK, u, (r, vr), c, sig(cid:5) with
∗ r has write access to the newest version of f n, i.e., there exists
SU ((cid:4)FK,
(cid:2)(cid:5) and Ver
Ver
(cid:4)FK, (r, vr), (cid:4)f n, RW(cid:5), vf n, c
(r, vr), (cid:4)f n, RW(cid:5), v, c
– Decrypt role key k(r,vr ) = Dec
– Decrypt ﬁle key k = DecIBE
k(r,vr )
– Send (cid:4)F, f n, vf n, Enc
– The R.M. receives r and (cid:4)F, f n, v, c
Sym
k
(cid:2), SU, sig
(cid:2), SU(cid:5), sig
(cid:2)) = 1
(c)
(cid:2))
IBE
ku
(c
(cid:2)(cid:2)(cid:5) and veriﬁes the
(r,vr )(cid:5) to R.M.
(f ), (r, vr), Sign
, (r, vr), sig
(cid:2)(cid:2)) = 1
following:
∗ The tuple is well-formed with v = vf n
, (r, vr)(cid:5),
∗ The signature is valid, i.e., Ver
∗ r has write access to the newest version of f n, i.e., there exists
SU ((cid:4)FK,
– If veriﬁcation is successful, the R.M. replaces (cid:4)F, f n, −, −, −, −(cid:5)
sig
(cid:4)FK, (r, vr), (cid:4)f n, RW(cid:5), vf n, c
(r, vr), (cid:4)f n, RW(cid:5), vf n, c
(r,vr )((cid:4)F, f n, v, c
(cid:2), SU, sig
(cid:2)) = 1
(cid:2)(cid:5) and Ver
(cid:2), SU(cid:5), sig
IBS
IBS
IBS
(cid:2)(cid:2)
(cid:2)(cid:2)
with (cid:4)F, f n, vf n, c
(cid:2)(cid:2)
, (r, vr), sig
(cid:2)(cid:2)(cid:5)
Fig. 2: Implementation of RBAC0 using IBE and IBS
827827
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:04 UTC from IEEE Xplore.  Restrictions apply. 
For formal deﬁnitions of these properties, see [36]. Using
parameterized expressiveness, we get the following results:
Theorem 1: The implementation of RBAC0 using IBE and
IBS detailed in Fig. 2 is correct, AC-preserving, and safe.
Theorem 2: The implementation of RBAC0 using public key
cryptographic techniques is correct, AC-preserving, and safe.
We now give an overview of the structure of and ideas behind
the proof of Theorem 1. This proof begins by formalizing
the IBE/IBS construction presented in Section IV using the
parameterized expressiveness framework. We then provide a
formal mapping from RBAC0 to our IBE/IBS system. We show
that this mapping preserves user authorization, meaning that a
user is authorized for a permission in RBAC0 if and only if
the user is also authorized by the IBE/IBS construction.
The tricky part of this proof involves showing that changes to
the RBAC0 state map correctly as changes to the IBE/IBS state.
This means that changing the RBAC0 state and then mapping
to IBE/IBS has the same effect as mapping to IBE/IBS and
then changing the state there in an equivalent way. Our use of
version numbers in IBE/IBS means that a single RBAC0 state
may map to multiple IBE/IBS states; i.e., if a user is granted
permissions that are later revoked, the resulting RBAC0 state
will be the same as if the permissions were never granted, but
the IBE/IBS state will have different version numbers as a
result of the revocation. Therefore, we consider IBE/IBS states
that only differ in version numbers to be congruent. We show
that the IBE/IBS state resulting from a change to the RBAC0
state, followed by mapping to IBE/IBS, is congruent to one
crafted by ﬁrst mapping to IBE/IBS, and then changing the
IBE/IBS state in a corresponding way.
The full proof of Theorem 1 can be found in Appendix A.
We note that the proof of Theorem 2 is very similar in structure,
and an accompanying technical report [28] provides the details.
B. Algebraic Costs
Table I lists the costs for each RBAC operation based on the
system state. All costs are incurred by the user or administrator
running the operation unless otherwise noted. In order to
simplify the formulas, we employ a slight abuse of notation:
we use the operation itself to represent its cost (e.g., EncIBE
is used to represent the cost of one EncIBE operation). We
use the following notation:
• roles(u) is the set of roles to which user u is assigned
• perms(r) is the set of permissions to which role r is
assigned
assigned
• users(r) is the set of users to which role r is assigned
• roles(p) is the set of roles to which permission p is
• versions(p) is the number of versions of permission p
C. Experimental Setup
To evaluate the costs of using our constructions to enforce
RBAC0, we utilize the simulation framework proposed in [26].
We encode RBAC0 as a workload, with implementations in
IBE/IBS and PKI as described in Sections IV-C and IV-D.
Simulations are initialized from start states extracted from
828828
assign
user
∞
μRU
μAU
∞
assign
perm.
μAP
∞
revoke
user
∞
μRP
revoke
perm.
var
R
μA
μU
μAU
μRU
μAP
μRP
semantics
administrative rate
add bias
UR bias
Rate of assignUser
Rate of revokeUser
Rate of assignPermission
Rate of revokePermission
value
0.1 × (cid:2)|U|/day
[0.7, 1.0]
[0.3, 0.7]
μA × μU × R
(1 − μA) × μU × R
μA × (1 − μU ) × R
(1 − μA) × (1 − μU ) × R
Fig. 3: Administrative actions in our experiments
real-world RBAC datasets. We then generate traces of access
control actions using actor-speciﬁc continuous-time Markov
chains, or actor machines. While this is a fairly simple model
of actors’ behaviors, it allows us to easily investigate trends in
costs. In particular, we are able to investigate changes in the
relative frequencies of the various administrative actions, and
the costs resulting from these changes.
We simulate one-month periods in which the administrator
of the system behaves as described in the actor machine
depicted in Fig. 3. The administrative workload increases with
the number of users in the system, and we randomly sample
an add bias parameter that describes the relative proportion
of assignment vs. revocation operations. We do not include
administrative actions that add or remove users or roles, due to
the unlikely occurrence of these actions on such short timescales
(one-month simulations).
(cid:2)|U| (with |U| the number of users), ranging
This administrative behavior model describes a range of real-
istic scenarios and thus allows us to investigate the interactions
in which we are interested. The overall administrative rate is
approximately
from about 0.6 administrative actions per day on our smallest
dataset to 2.2 on the largest. We consider the range of 0%
to 30% of the administrative load consisting of revocations,
since in realistic scenarios permissions tend to be assigned at
a greater rate than they are revoked [63].
To quantify the costs associated with our cryptographic
constructions, we record the number of instances of each
cryptographic operation executed, including counts or averages
for traces of related operations (e.g., the average number of
IBE encryptions needed to revoke a role from a user).
As mentioned above, simulation start states are extracted
from real-world RBAC datasets. These datasets are summarized
in Table II. All of these datasets, aside from university,
were originally provided by HP [22]. The domino dataset
is from a Lotus Domino server, emea is from a set of
Cisco ﬁrewalls, ﬁrewall1 and ﬁrewall2 are generated from
network reachability analysis, and healthcare is a list of
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:04 UTC from IEEE Xplore.  Restrictions apply. 
(cid:2)
addU (u) : KeyGen
delU (u) :
addP (p) : Enc
delP (p) : None
addR(r) : KeyGen
delR(r) :
(cid:2)
IBS
IBE + KeyGen
r∈roles(u) revokeU (u, r)
IBE + 2 · Sign
IBS and 2 · Ver
IBS by R.M.
IBE + Enc
IBE + KeyGen
IBS + Sign
IBS
IBE + Dec
p∈perms(r) revokeP (p, r)
IBE + Sign
assignU (u, r) : Enc
(cid:3)
IBE + KeyGen
revokeU (u, r) : KeyGen
(cid:6)
IBE · (cid:2)
+
versions(p)·(cid:5)
IBS + Ver
Revokes only write access: |versions(p)| · (cid:5)
revokeP (p, r) : Revokes all access: |roles(p)| · (cid:5)
IBS + Ver
IBS +
assignP (p, r) :
Sign
Dec
Enc
Ver
(cid:3)
IBS
IBS
(cid:6)
read(f n) : 2 · (cid:5)
write(f n, f ) : Sign
(cid:2)
(cid:4)
p∈perms(r)(versions(p) + |roles(p)|)
|users(r)| +
p∈perms(r) versions(p)
; if r has no permissions for the ﬁle then also versions(p)·(cid:5)
(cid:6)
IBS
Enc
IBE + Sign
IBS +
Enc
IBE + Dec
IBE
(cid:6)
(cid:4)(cid:5)
IBE + Sign
Sign
IBS + Ver
IBS + Ver
IBS
IBS
(cid:6)
(cid:6)
;
Dec
IBS
IBE + Ver
Dec
IBS + 2 · (cid:5)
TABLE I: Algebraic costs of RBAC0 operations in our IBE/IBS implementation
and 2 · Ver
IBS by R.M.
IBE + Ver
IBS
(cid:6)
set
domino
emea
ﬁrewall1
ﬁrewall2
healthcare
university
users
79
35
365
325
46
493
|P|
231
3046
709
590
46
56
|R|
20
34
60
10
13
16
|UR|
75
35
1130
325
55
495
roles/user
users/role
perm./role
roles/perm.
|PA| max min max min max min max min
1
629
1
7211
3455
1
1
1136
1
359
202
1
30
2
174
222
17
288
209
554
617
590
45
40
10
31
25
8
12
12
3
1
14
1
5
2
0
1
0
1
1
1
1
1
1
1
1
1
1
9
1
6
7
2
TABLE II: Overview of the datasets used in our experiments
healthcare permissions from the US Veteran’s Administration.
The university dataset describes a university’s access control
system, and was developed by IBM [48], [65].
D. Experimental Results
Figure 4 presents a sampling of our results. First, we consider
the cost of performing revocations in our implementation of
RBAC0 using IBE/IBS. Figure 4a shows the average number
of IBE encryptions needed for a single user revocation (i.e.,
removing a user from a role), and Fig. 4b shows the same
for permission revocation (i.e., revoking a permission from a
role). This shows that revoking a permission can cost several
IBE encryptions, while user revocation incurs hundreds or
thousands of IBE encryptions, on average. We note that, by
inspection of the code in Fig. 2, a user revocation also requires
an equal number of IBS signatures and veriﬁcations, a smaller
number of IBE decryptions, and the generation of new IBE
and IBS keys for the role.
For our chosen distribution of administrative actions, Fig. 4c
shows the total number of IBE encryptions performed over a
month for all user revocations. As the add bias approaches 1,
the number of revocations (and thus the total number of IBE
encryptions for user revocation) approaches 0. However, even
when only 5–10% of administrative actions are revocation, the
number of monthly IBE encryptions under this parameterization
is often in the thousands.
In Fig. 4d, we show the number of ﬁles that must be re-
keyed for a single user revocation. This highlights the beneﬁt
of utilizing lazy re-encryption; if we had instead utilized
active re-encryption, each of these ﬁles would need to be
locked, downloaded, decrypted, re-encrypted, and re-uploaded
immediately following revocation. In certain scenarios, active
re-encryption may be computationally feasible. For instance, in
university, only ≈ 10 ﬁles must be re-encrypted for the average
user revocation, adding less than 1% to the total number of ﬁle
encryptions executed over the entire simulation, even at the
highest rate of revocations that we consider. However, in most
other scenarios, a user revocation triggers the re-key of tens or
hundreds of ﬁles, such as in emea or ﬁrewall2, where active
re-encryption increases the total number of ﬁle encryptions
by 63% and 12%, respectively (at 20–30% revocation rate).
Thus, in most scenarios, active re-encryption is likely to be
infeasible, as discussed in Section IV-B.
Given the administrative behavior model depicted in Fig. 3,
Fig. 4e shows the total number of ﬁle re-keys that take place
over a month for the purpose of user revocation. For scenarios
with very user- and permission-dense roles (e.g., ﬁrewall1
and ﬁrewall2), we see several times as many re-keys as total
ﬁles, indicating that, on average, each ﬁle is re-keyed multiple
times per month for the purposes of user revocation. This
further enforces that inefﬁciencies that active re-encryption
would bring, as each ﬁle (on average) would be locked and