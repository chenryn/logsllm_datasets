通过此参数可以设置Hregion中Stove文件的最大值，以字节为单位。当表中的列族超过此值时，文件将被分割。其默认大小为256MB。
（5）hfile. block.cache.size
该参数表示HFile/StoreFile缓存所占Java虚拟机堆大小的百分比，默认值为0.2，即20%。将其值设置为0表示禁用此选项。
（6）hbase. regionserver.global.memstore.upperLimit
该参数表示在Region服务器中所有的memstore所占用的Java虚拟机比例的最大值，默认值为0.4，即40%。当memstore所占用的空间超过此值时，更新操作将被阻塞，并且所有的内容将被强制写出。
（7）hbase. hregion.memstore.flush.size
如果memstore缓存的内容大小超过此参数所设置的值，那么它将被写到磁盘上。该参数的默认值为64MB。
另外，在配置文档中还有很多关于ZooKeeper配置的参数，如zookeeper.session.timeoout、以hbase.zookeeper开头的参数以及以hbase.zookeeper.property开头的一些参数。限于篇幅这里不再赘述，关于ZooKeeper更详细的配置见第15章。
12.3 HBase体系结构
HBase的服务器体系结构遵从简单的主从服务器架构，它由HRegion服务器（HRegion Server）群和HBase Master服务器（Hbase Master Server）构成。HBase Master服务器负责管理所有的HRegion服务器，而HBase中所有的服务器都是通过ZooKeeper来进行协调并处理HBase服务器运行期间可能遇到的错误。HBase Master服务器本身并不存储HBase中的任何数据，HBase逻辑上的表可能会被划分成多个HRegion，然后存储到HRegion服务器群中。HBase Maste服务器中存储的是从数据到HRegion服务器的映射。因此，HBase体系结构如图12-8所示。
图 12-8 HBase体系结构
 12.3.1 HRegion
当表的大小超过设置值的时候，HBase会自动将表划分为不同的区域，每个区域包含所有行的一个子集。对用户来说，每个表是一堆数据的集合，靠主键来区分。从物理上来说，一张表是被拆分成了多块，每一块就是一个HRegion。我们用表名+开始/结束主键来区分每一个HRegion。一个HRegion会保存一个表里面某段连续的数据，从开始主键到结束主键，一张完整的表格是保存在多个HRegion上面的。
12.3.2 HRegion服务器
所有的数据库数据一般是保存在Hadoop分布式文件系统上面的，用户通过一系列HRegion服务器获取这些数据。一台机器上一般只运行一个HRegion服务器，而且每一个区段的HRegion也只会被一个HRegion服务器维护。
图12-9所示为HRegion服务器体系结构。
HRegion服务器包含两大部分：HLOG部分和HRegion部分。其中HLOG用来存储数据日志，采用的是先写日志的方式（Write-ahead log）。HRegion部分由很多的HRegion组成，存储的是实际的数据。每一个HRegion又由很多的Stroe组成，每一个Store存储的实际上是一个列族（ColumnFamily）下的数据。此外，在每一个HStore中有包含一块MemStore。MemStore驻留在内存中，数据到来时首先更新到MemStore中，当到达阈值之后再更新到对应的StoreFile（又名HFile）中。每一个Store包含了多个StoreFile, StoreFile负责的是实际数据存储，为HBase中最小的存储单元。
图 12-9 HRegion服务器体系结构
HBase中不涉及数据的直接删除和更新操作，所有的数据均通过追加的方式进行更新。数据的删除和更新在HBase合并（compact）的时候进行。当Store中StoreFile的数量超过设定的阈值时将触发合并操作，该操作会把多个StoreFile文件合并成一个StoreFile。
当用户需要更新数据的时候，数据会被分配到对应的HRegion服务器上提交修改。数据首先被提交到HLog文件里面，在操作写入HLog之后，commit（）调用才会将其返回给客户端。HLog文件用于故障恢复。例如某一台HRegionServer发生故障，那么它所维护的HRegion会被重新分配到新的机器上。这时HLog会按照HRegion进行划分。新的机器在加载HRegion的时候可以通过HLog对数据进行恢复。
当一个HRegion变得太过巨大、超过了设定的阈值时，HRegion服务器会调用HRegion.closeAndSplit（），将此HRegion拆分为两个，并且报告给主服务器让它决定由哪台HRegion服务器来存放新的HRegion。这个拆分过程十分迅速，因为两个新的HRegion最初只是保留原来HRegionFile文件的引用。这时旧的HRegion会处于停止服务的状态，当新的HRegion拆分完成并且把引用删除了以后，旧的HRegion才会删除。另外，两个HRegion可以通过调用HRegion.closeAndMerge（）合并成一个新的HRegion，当前版本下进行此操作需要两台HRegion服务器都停机。
12.3.3 HBase Master服务器
每台HRegion服务器都会和HMaster服务器通信，HMaster的主要任务就是告诉每个HRegion服务器它要维护哪些HRegion。
当一台新的HRegion服务器登录到HMaster服务器时，HMaster会告诉它先等待分配数据。而当一台HRegion死机时，HMaster会把它负责的HRegion标记为未分配，然后再把它们分配到其他HRegion服务器中。
如果当前HBase已经解决了之前存在的SPFO（单点故障），并且HBase中可以启动多个HMaster，那么它就能够通过ZooKeeper来保证系统中总有一个Master在运行。HMaster在功能上主要负责Table和HRegion的管理工作，具体包括：
管理用户对Table的增、删、改、查操作；
管理HRegion服务器的负载均衡，调整HRegion分布；
在HRegion分裂后，负责新HRegion的分配；
在HRegion服务器停机后，负责失效HRegion服务器上的HRegion迁移。
12.3.4 ROOT表和META表
在开始这部分内容之前，我们先来看一下HBase中相关的机制是怎样的。之前我们说过HRegion是按照表名和主键范围来区分的，由于主键范围是连续的，所以一般用开始主键就可以表示相应的HRegion了。
不过，因为我们有合并和分割操作，如果正好在执行这些操作的过程中出现死机，那么就可能存在多份表名和开始主键相同的数据，这样的话只有开始主键就不够了，这就要通过HBase的元数据信息来区分哪一份才是正确的数据文件，为了区分这样的情况，每个HRegion都有一个'regionId'来标识它的唯一性。
所以一个HRegion的表达符最后是：表名+开始主键+唯一ID（tablename+startkey+regionId）。我们可以用这个识别符来区分不同的HRegion，这些数据就是元数据（META），而元数据本身也是被保存在HRegion里面的，所以我们称这个表为元数据表（METATable），里面保存的就是HRegion标识符和实际HRegion服务器的映射关系。
元数据表也会增长，并且可能被分割为几个HRegion，为了定位这些HRegion，我们采用一个根数据表（ROOT table），它保存了所有元数据表的位置，而根数据表是不能被分割的，永远只存在一个HRegion。
在HBase启动的时候，主服务器先去扫描根数据表，因为这个表只会有一个HRegion，所以这个HRegion的名字是被写死的。当然要把根数据表分配到一个HRegion服务器中需要一定的时间。
当根数据表被分配好之后，主服务器就会扫描根数据表，获取元数据表的名字和位置，然后把元数据表分配到不同的HRegion服务器中。最后就是扫描元数据表，找到所有HRegion区域的信息，把它们分配给不同的HRegion服务器。
主服务器在内存中保存着当前活跃的HRegion服务器的数据，因此如果主服务器死机，整个系统也就无法访问了，这时服务器的信息也就没有必要保存到文件里面了。
元数据表和根数据表的每一行都包含一个列族（info列族）：
info：regioninfo包含了一个串行化的HRegionInfo对象。
info：server保存了一个字符串，是服务器的地址HServerAddress.toString（）。
info：startcode是一个长整型的数字字符串，它是在HRegion服务器启动的时候传给主服务器的，让主服务器确定这个HRegion服务器的信息有没有更改。
因此，当一个客户端拿到根数据表地址以后，就没有必要再连接主服务器了，主服务器的负载相对就小了很多。它只会处理超时的HRegion服务器，并在启动的时候扫描根数据表和元数据表，以及返回根数据表的HRegion服务器地址。
注意 ROOT表包含META表所在的区域列表，META表包含所有的用户空间区域列表，以及Region服务器地址。客户端能够缓存所有已知的ROOT表和META表，从而提高访问的效率。
12.3.5 ZooKeeper
ZooKeeper存储的是HBase中ROOT表和META表的位置。此外，ZooKeeper还负责监控各个机器的状态（每台机器到ZooKeeper中注册一个实例）。当某台机器发生故障的时候，ZooKeeper会第一时间感知到，并通知HBase Master进行相应的处理。同时，当HBase Master发生故障的时候，ZooKeeper还负责HBase Master的恢复工作，能够保证在同一时刻系统中只有一台HBase Master提供服务。
12.4 HBase数据模型
 12.4.1 数据模型
HBase是一个类似Bigtable的分布式数据库，它是一个稀疏的长期存储的（存在硬盘上）、多维度的、排序的映射表。这张表的索引是行关键字、列关键字和时间戳。HBase中的数据都是字符串，没有类型。
用户在表格中存储数据，每一行都有一个可排序的主键和任意多的列。由于是稀疏存储，同一张表里面的每一行数据都可以有截然不同的列。
列名字的格式是"＜family＞：＜qualifier＞"，都是由字符串组成的。每一张表有一个列族集合，这个集合是固定不变的，只能通过改变表结构来改变。但是qualifier值相对于每一行来说都是可以改变的。
HBase把同一个列族里面的数据存储在同一个目录下，并且HBase的写操作是锁行的，每一行都是一个原子元素，都可以加锁。
HBase所有数据库的更新都有一个时间戳标记，每个更新都是一个新的版本，HBase会保留一定数量的版本，这个值是可以设定的。客户端可以选择获取距离某个时间点最近的版本单元的值，或者一次获取所有版本单元的值。
12.4.2 概念视图
我们可以将一个表想象成一个大的映射关系，通过行键、行键+时间戳或行键+列（列族：列修饰符），就可以定位特定数据。HBase是稀疏存储数据的，因此某些列可以是空白的，表12-2是对应12.2节中创建的test表的数据概念视图。
从上表中可以看出，test表有r1和r2两行数据，并且有c1和c2两个列族。在r1中，列族c1有三条数据，列族c2有两条数据；在r2中，列族c1有一条数据，列族c2有一条数据。每一条数据对应的时间戳都用数字来表示，编号越大表示数据越旧，反之表示数据越新。
12.4.3 物理视图
虽然从概念视图来看每个表格是由很多行组成的，但是在物理存储上面，它是按照列来保存的，这一点在进行数据设计和程序开发的时候必须牢记。
上面的概念视图在物理存储的时候应该表现成表12-3和表12-4所示的样子。
需要注意的是，在概念视图上面有些列是空白的，这样的列实际上并不会被存储，当请求这些空白的单元格时，会返回null值。
如果在查询的时候不提供时间戳，那么会返回距离现在最近的那一个版本的数据。因为在存储的时候，数据会按照时间戳来排序。
12.5 HBase与RDBMS
HBase就是这样一个基于列模式的映射数据库，它只能表示很简单的键-数据的映射关系，这大大简化了传统的关系数据库。与关系数据库相比，它有如下特点：
数据类型：HBase只有简单的字符串类型，所有的类型都是交由用户自己处理的，它只保存字符串。而关系数据库有丰富的类型选择和存储方式。
数据操作：HBase只有很简单的插入、查询、删除、清空等操作，表和表之间是分离的，没有复杂的表和表之间的关系，所以不能、也没有必要实现表和表之间的关联等操作。而传统的关系数据通常有各种各样的函数、连接操作。
存储模式：HBase是基于列存储的，每个列族都由几个文件保存，不同列族的文件是分离的。传统的关系数据库是基于表格结构和行模式保存的。
数据维护：确切地说，HBase的更新操作不应该叫做更新，虽然一个主键或列对应新的版本，但它的旧版本仍然会保留，所以它实际上是插入了新的数据，而不是传统关系数据库里面的替换修改。
可伸缩性：HBases这类分布式数据库就是为了这个目的而开发出来的，所以它能够轻松地增加或减少（在硬件错误的时候）硬件数量，并且对错误的兼容性比较高。而传统的关系数据库通常需要增加中间层才能实现类似的功能。
当前的关系数据库基本都是从20世纪70年代发展而来的，它们都具有ACID特性，并且拥有丰富的SQL语言，除此之外它们基本都有以下的特点：面向磁盘存储、带有索引结构、多线程访问、基于锁的同步访问机制、基于log记录的恢复机制等。
而Bigtable和HBase这些基于列模式的分布式数据库，更适应海量存储和互联网应用的需求，灵活的分布式架构可以使其利用廉价的硬件设备组建一个大的数据仓库。互联网应用是以字符为基础的，而Bigtable和HBase就是针对这些应用而开发出来的数据库。
由于HBase具有时间戳特性，所以它生来就特别适合开发wiki、archiveorg之类的服务，并且它原本就是作为搜索引擎的一部分开发出来的。
12.6 HBase与HDFS
伪分布模式和完全分布模式下的HBase运行基于HDFS文件系统。使用HDFS文件系统需要设置conf/hbase-site.xml文件，修改hbase.rootdir的值，并将其指向HDFS文件系统的位置。此外，HBase也可以使用其他的文件系统，不过此时需要重新设置hbase.rootdir参数的值。
12.7 HBase客户端
HBase客户端可以选择多种方式与HBase集群进行交互，最常用的方式为Java，除此之外还有Rest和Thrift接口。
1.Java
HBase是由Java编写的。在后面的章节中，我们将详细地向大家介绍HBase的Java API。用户可以通过丰富的Java API接口与HBase进行互操作，并执行各种相关操作。详细内容请见12.8节。
2.Rest和Thrift接口
HBase的Rest和Thrift接口支持XML、Protobuf和二进制数据编码等操作。
（1）Rest
用户可以通过下面的命令运行Rest：
hbase-daemon.sh start rest
运行成功后将显示如图12-10所示的画面：
图 12-10 启动HBase Rest
用户可以通过下面的命令停止Rest服务：
hbase-daemon.sh stop rest
停止过程如图12-11所示。
图 12-11 停止HBase Rest
（2）Thrift
用户可以通过下面命令启动Thrift客户端，并与HBase进行通信：
hbase-daemon.sh start thrift
运行成功后将显示如图12-12所示的画面：
图 12-12 启动HBase Thrift
用户可以通过下面命令停止Thrift服务：
hbase-daemon.sh stop thrift
停止过程如图12-13所示：
图 12-13 停止HBase Thrift
12.8 Java API
通过前面的内容读者已经了解到，HBase作为云环境中的数据库，与传统数据库相比拥有不同的特点。当前HBase的Java API已经比较完善了，从其涉及的内容来讲，大体包括：HBase自身的配置管理部分、Avro部分、HBase客户端部分、MapReduce部分、Rest部分、Thrift部分，ZooKeeper等。其中HBase自身的配置管理部分又包括：HBase配置、日志、IO、Master、Regionserver、replication，以及安全性。
限于篇幅我们重点介绍与HBase数据存储管理相关的内容，其涉及的主要类包括：HBaseAdmin、HBaseConfiguration、HTable、HTableDescriptor、HColumnDescriptor、Put、Get和Scanner。关于Java API的详细内容，大家可以查看HBase官方网站的相关资料：http：//hbase.apache.org/apidocs/index.html。
表12-5给我们描述了这几个相关类与对应的HBase数据模型之间的关系。
下面我们将详细讲述这些类的功能，以及它们之间的相互关系。
1.HBaseConfiguration
关系：org.apache.hadoop.hbase.HBaseConfiguration
作用：通过此类可以对HBase进行配置。
包含的主要方法如表12-6所示。
用法示例：
Configuration config=HBaseConfiguration.create（）；
此方法使用默认的HBase资源来创建Configuration。程序默认会从classpath中查找hbase-site.xml的位置从而初始化Configuration。
2.HBaseAdmin
关系：org.apache.hadoop.hbase.client.HBaseAdmin
作用：提供了一个接口来管理HBase数据库的表信息。它提供的方法包括创建表、删除表、列出表项、使表有效或无效，以及添加或删除表列族成员等。
包含的主要方法如表12-7所示。
用法示例：
HbaseAdmin admin=new HbaseAdmin（config）；
admin.disableTable（"tablename"）；
上述例子通过一个HBaseAdmin实例admin调用disableTable方法来使表处于无效状态。
3.HTableDescriptor
关系：org.apache.hadoop.hbase.HTableDescriptor
作用：HtableDescriptor类包含了表的名字及其对应表的列族。
包含的主要方法如表12-8所示。
用法示例：
HtableDescriptor htd=new HtableDescriptor（tablename）；
htd.addFamily（new HcolumnDescriptor（"Family"））；
在上述例子中，通过一个HColumnDescriptor实例，为HTableDescriptor添加了一个列族：Family。
4.HColumnDescriptor
关系：org.apache.hadoop.hbase.HColumnDescriptor
作用：HColumnDescriptor维护着关于列族的信息，例如版本号、压缩设置等。它通常在创建表或为表添加列族的时候使用。列族被创建后不能直接修改，只能通过删除然后重建的方式来“修改”。并且，当列族被删除的时候，对应列族中所保存的数据也将被同时删除。
包含的主要方法如表12-9所示。
用法示例：
HtableDescriptor htd=new HtableDescriptor（tablename）；
HcolumnDescriptor col=new HcolumnDescriptor（"content"）；
htd.addFamily（col）；
此示例添加了一个名为content的列族。
5.HTable
关系：org.apache.hadoop.hbase.client.HTable
作用：此表可以用来与HBase表进行通信。这个方法对于更新操作来说是非线程安全的，也就是说，如果有过多的线程尝试与单个HTable实例进行通信，那么写缓冲器可能会崩溃。这时，建议使用HTablePool类进行操作。
该类所包含的主要方法如表12-10所示。
用法示例：
Htable table=new Htable（conf, Bytes.toBytes（tablename））；
ResultScanner scanner=table.getScanner（Bytes.toBytes（“cf”））；
上述函数将获取表内所有列族为“cf”的记录。
6.Put
关系：org.apache.hadoop.hbase.client.Put
作用：用来对单个行执行添加操作。