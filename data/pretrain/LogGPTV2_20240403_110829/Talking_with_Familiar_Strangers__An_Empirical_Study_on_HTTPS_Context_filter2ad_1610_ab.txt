redirect script requests to insecure sites.
In such SSL stripping attacks, there needs an insecure initial
request to be tampered. Meanwhile, there are no trusted TLS cer-
tificates provided by the remote server to protect the traffic. Hence,
careful users can notice the abnormal validation status of certifi-
cates in the browser. Besides, an attacker can hardly launch an
SSL Stripping attack after an updated security policy, HTTP Strict
Transport Security (HSTS), is proposed.
3 THREAT ANALYSIS
The HTTPS MITM attacks we discuss rely on the design that mul-
tiple domains can share TLS certificates (see Figure 1). Using the
shared certificates, adversaries can load pages to one origin from
others due to the origin confusion issues [31]. However, the do-
mains in the shared certificates do not always enforce the same
security practices, some of which are misconfigured, especially in
HTTP security headers. By rerouting HTTPS requests to the flawed
servers, adversaries can invite their weak policies to the secure
origins, and bypass the security policies of the secure servers.
In this paper, we specifically summarize and term the HTTPS
MITM attacks using the shared TLS certificates as HTTPS Context
Confusion Attack (SCC Attack). Except for the origin confusion from
the server-side, there is also secure browsing context confusion
for programs and users from the client-side. It is because browsers
treat the instructions as returned by the accessed origins and take
insecure actions in the secure contexts.
SCC Attack Model. SCC attacks do not exploit vulnerabilities
of the TLS protocol, and we assume the certificates are valid and
issued by trusted CAs. In our threat model, we assume the attacker
locates in the same LAN as the victim users, being able to reroute
the encrypted traffic and tamper with the plaintext data. Studies have
discovered numerous home routers with weak credentials [43]. As
such, we assume the typical adversaries sniffer in local Wi-Fi or
ethernet who share the same media. Similarly, attackers can also
locate in the open Wi-Fi network (e.g., at coffee shops) without
strong security protection (e.g., WPA2). Besides, attacks can be
launched by malicious middleboxes (e.g., gateway, proxies) or even
from ISPs and governments level as well.
SCC Attack Overview. Figure 2 illustrates our threat model that
consists of four major components: (1) A victim user who browses
a webpage; (2) A man-in-the-middle attacker who can maliciously
reroute HTTPS traffic; (3) A webserver (ServerA), enforcing strict
Server A(a.example.com, IPA)Server B(b.example.com, IPB)AttackerClient(cid:1)Request https://a.example.comDst-ip:IPAHost: a.example.comDst-ip:IPBHost: a.example.com(cid:3)Abnormal response from ServerB(cid:2)Redirect the request to ServerB(cid:4)Follow the instructions of ServerB for ServerAShare one SSL certificate ( * .example.com )microsoft.com/ and https://login.live.com/ (Req.2-
Resp.3). When the client follows the third redirect, it sends a plain-
text request (Req.4), which can be intercepted by the attacker.
Scenario 2: Bypassing HSTS Policy by Flawed Strict-Transport-
Security Headers. Web servers may declare HSTS policy via the
HTTP response header, Strict-Transport-Security (STS), forc-
ing browsers to access them in HTTPS only. The deployment of
HSTS policy grows in recent years [16, 54]. However, HSTS still
has security issues due to misconfigurations [42, 46, 60] and partial
adoptions [21, 61]. Adversaries can use these weak practices to
bypass the protection of HSTS policy [59], which also applies to
SCC attacks.
Similar to the attacks in Scenario 1, we assume ServerA has the
full adoption of HSTS policy, but ServerB is not well-configured.
An SCC attacker can bypass the HSTS-protection of ServerA by the
flawed STS headers on ServerB. In total, attackers can launch the
following three kinds of attacks.
(1) Clear HSTS Policy for ServerA (HSTS-1). In this attack, ad-
versaries firstly need to find a ServerB that shares TLS certificates
with ServerA and returns an STS header with the max-age directive
set to zero. When the victim user visits ServerA, the attacker mali-
ciously reroutes the HTTPS request to ServerB, which responses
with STS:max-age=0. Subsequently, the browser disables the HSTS
policy for ServerA, since it treats the flawed header as returned by
ServerA. After that, the next time when the user accesses ServerA
by typing the domain into the address bar without specifying the
protocol, the browser will initially send out an HTTP request, which
can be intercepted by the attacker.
(2) Cancel HSTS Policy for ServerA’s Subdomains (HSTS-2).
Recall that if the includeSubDomains directive is absent in a do-
main’s STS header, browsers will not protect its subdomains through
HSTS policy by default unless they are separately set. As such, a man
in the middle can attack the subdomains of ServerA (a.example.com)
using ServerB’s flawed STS header in our threat model. Assume
that ServerA is well-configured with HSTS policy, while ServerB’s
STS header does not include includeSubDomains. After rerouting
the request to ServerB, the browser will update the HSTS policy
received from it for ServerA, and will not protect ServerA’s sub-
domains with HSTS policy by default. So the next time the user
accesses one of ServerA’s subdomains by directly typing in the
domain, the insecure HTTP request that can be tampered will be
sent out.
Besides, if both max-age=0 and includeSubdomains appear in
ServerB’s STS header, the latter is ignored by browsers [37]. In this
case, the browser will clear HSTS policy for ServerA, and will not
set HSTS for its subdomains.
(3) Decrease HSTS Validity Period for ServerA (HSTS-3). As
a less harmful scenario, attackers can shorten the HSTS cache time
for ServerA in browsers, by rerouting the request to ServerB, of
which the STS max-age is smaller than that of ServerA. For example,
the HSTS validity period for ServerA is set to 31,536,000 seconds
(one year) as standard [37], while the value of ServerB is only one
day or less. As such, if users have not accessed ServerA during the
short period (e.g., one day), the user agent will send out an HTTP
request the next time (e.g., after one day) a user visits ServerA.
Discussion. The above issues can be mitigated if all domain
names in the shared TLS certificate are added to the preload list [4,
Figure 3: Multi-Hops Downgrading Attack. For each pair of
servers, the TLS certificate provided by the right server in-
clude the domain name of the left one.
(1) One-shot Downgrading Attack (Down-1). Attackers can
downgrade an HTTPS request by only rerouting the traffic once.
Refer to Figure 2, if the ServerB with shared certificates returns a
3xx redirect to an HTTP URL, the attacker can launch a one-shot
downgrading attack. The workflow goes as below.
First, when the client requests https://a.example.com, the at-
tacker should reroute the request to the flawed ServerB (IPB) by
means like DNS spoofing or TCP redirection. ServerB will not re-
ject the request: if it has Host checking issues (e.g., no or incorrect
Host checks) [24, 26] and handles the request of which the Host is
unmatched by a default server [31]; or if it implements the domain
aliasing and redirects the request to a valid domain, to avoid the
frequent typos when users type into the address bar [9].
Then, the HTTPS connection is directly downgraded if ServerB
returns an insecure 3xx redirect via the default handler. We have
conducted traffic rerouting measurement by changing the desti-
nation IP addresses (Section 5). We find 28.42% of the responses
are successful with 3xx redirects even if Host is unmatched, of
which 17.17% are insecure redirects. For example, when we send
the request htts://login.live.com to an IP (13.75.94.74) of MSN, the
server replies a 301 redirect with the Location set to http://www.
msn.com/?.
Last, if the user agent follows the insecure redirects, adversaries
can tamper with the plaintext contents for further attacks, such as
phishing, resource replacing.
(2) Multi-hops Downgrading Attacks (Down-2). Compared
with the one-shot downgrading attack, multi-hops downgrading
attacks mean that an HTTPS request can be downgraded by link-
ing multiple 3xx redirects. Assume we want to intercept with the
HTTPS traffic between the client and the target server. However,
no server sharing TLS certificates with that domain returns an in-
secure 3xx redirect that can be used for one-shot downgrading. We
find this domain still vulnerable to SCC attacks, since we can link
up a series of 3xx redirects in the same way, and finally lead the
request to the insecure URL.
Figure 3 depicts an example of the whole process. In this case, the
client receives a redirect to https://commerce.microsoft.com/,
after the attacker maliciously reroutes the request, originally toward
https://billing.microsoft.com, to 168.62.198.20 (Req.1-Resp.1). Then
the attacker repeats the same rerouting action on https://commerce.
AttackerClientbilling.microsoft.com168.62.198.20commerce.microsoft.com168.62.198.20login.live.com13.75.94.74https://billing.microsoft.comHTTP/2 302Location: https://commerce.microsoft.com/https://commerce.microsoft.com/HTTP/2 302Location: https://login.live.com/https://login.live.com/HTTP/1.1 301Location: http://www.msn.com/http://www.msn.com/!Req.1Resp.1Req.2Resp.2Req.3Resp.3Req.4billing.microsoft.comcommerce.microsoft.comlogin.live.comwww.msn.comHop 1Hop 2Hop 3restart of the TLS handshake (TLS re-handshake) without security
warnings shown in the browser.
HTTPS Path Leaks. Previous work demonstrates that the cookies
injected in an HTTP session will be attached to subsequent HTTPS
connections [40, 66]. Although an acknowledged threat, this has
still been troubling the public over the years. In 2018, Chen et al. pro-
posed a new method to leak HTTPS paths via a side-channel [23],
which has not been mitigated yet. However, they did not introduce
the attack scenarios by leaking HTTPS paths. We can apply this
method to our threat model. Assume an attacker attempts to inter-
cept the request of https://a.example.com/n in Case C of Figure 4.
Before that, he can first inject a long cookie to that path via an
HTTP request to a.example.com, so that the TLS record size of the
target request packet can be large. Then, he can sniff at the TLS
layer, identifying that “large packet”, which he is going to hijack.
TLS Re-handshake. Assume that a client has already established
a TLS connection with ServerA. We term the process, in which the
client initiates a handshake for a new connection after the connec-
tion is reset, as TLS re-handshake, which can also be considered
as a new handshake. It is a new state of TLS connection, which
is different from the TLS renegotiation [56]. From our test in Sec-
tion 4.3, we find some browsers attempt to restart a handshake for
the remaining requests when Timeout occurs, or an in-path entity
(e.g., middlebox, MITM attacker) sends a TCP RST in the middle
of a persistent connection, as shown in Figure 4 (case c). As such,
the attacker can intercept the HTTPS request while the browser
starts a TLS re-handshake toward ServerA, and reroute it to an
exploitable ServerB. Then he can go on for further steps like the
regular SCC attacks.
4.3 Browser Behaviors to SCC Attacks
While performing SCC attacks mentioned above, we wonder whether
the browsers have policies to defend these issues or alert the users
from being tricked. In this section, we test the browser behaviors
when an SCC attack occurs. Because bypassing HSTS policy attacks
are not directly reflected in browser behaviors except for updating
the HSTS policy, we will not discuss them here.
Browser Security Notifications in an HTTPS Downgrading
Attack. To inform users about the connection security, mainstream
browsers display indicators (e.g., a lock, a shield) in the address bar.
Meanwhile, they also warn the users when the authenticity of the re-
mote server is failed. In our HTTPS downgrading attacks, browsers
present no authentication warnings and show the certificates as
“valid” in the address bar on account of the shared certificates that
are trusted by the accessed domains. It has the users believe that
they have been browsing in an encrypted and secure context.
As for the indicators in the address bar, there are subtle differ-
ences among scenarios. We divide all downgrading attacks into the
following three kinds and test the browser behaviors separately.
First, downgrading the requests via the address bar or the hyperlink.
In requests like these, the browser will navigate to documents or
resources under the “new” context. So the address bar will directly
turn to an HTTP URL after the downgrading attacks. After that, the
browser’s appearance depends on what attackers do to the plaintext
request, which is similar to known website forgeries.
Figure 4: Timing for Hijacking the HTTPS Request
41]. However, HSTS preload is an opt-in project, and not all domains
have been added in it yet.
4.2 Attacking in Different Connection Status
In the above scenarios, we prove that adversaries can launch SCC at-
tacks at any proper time, unlike SSL Stripping attacks that can only
succeed at the initial request. They can intercept HTTPS requests
either in the process of the TLS handshake or from the middle of
an established connection, making SCC attacks more general.
Driven from the attack model, adversaries meet the following
technical challenges for successful attacks. First, they need to pre-
cisely identify the HTTPS request to be hijacked and find the timing
for intercepting it, since the request can be delivered either over a
new connection or in a persistent one shared with other requests.
Second, they need to terminate and restart the connection secretly
if it is keep-alive. Third, the interception must be unnoticeable to
users so that the attackers can disrupt the user actions. Below we
elaborate on the technical details to overcome the above challenges.
Timing of Attacks. Before attacking, adversaries need to force
clients to establish a TLS connection with a third-party server, like
the ServerB in Figure 2. Thus, they should find the proper time to
terminate the current connection and reroute the HTTPS request.
In Figure 4, the first two cases present the scenario of one request
per connection. We distinguish the interception for “a request to a
separate domain” from “a request to a specific path”. If a dedicated
domain only serves the single resource to be hijacked (case a),
attackers can reroute the request to a ServerB by poisoning the
DNS cache. As such, the interception will not influence the requests
for other resources served by different domains.
If multiple resources are served by one domain via different paths
(case b), more steps are needed to identify the request first. The
attacker can not reroute all traffic under that domain to ServerB;
otherwise, users will notice the abnormal functionality of web pages.
Instead, he should identify the particular HTTPS request toward
the target path over the encrypted flow (HTTPS Path Leaks).
However, attackers can only intercept the traffic during the hand-
shake process, for they need to let the client connect to ServerB
by rerouting the request. Thus if a secure persistent connection is
already established (case c), the attacker should trigger a legitimate
Case A: request resources from a separate domainClientAttackerServer A (IPA)a.example.comShare SSL Certificate. . .Server B (IPB)b.example.coma. Redirect to Server BRequest https://a.example.com(handshake)Abnormal responseAttacker takes actions. . .Abnormal responseRequest https://a.example.com/path(handshake)Attacker takes actionspersistent encrypted connectionRequest https://a.example.com/1Abnormal response. . .Request https://a.example.com/nRSTRe-handshakeRequest https://a.example.com/2. . .Attacker takes actionsCase B: request resources from a specific pathCase C: hijack a specific request in the secure contextb1. Identify target pathb2. Redirect to Server Bc1. Identify target packetc2. Redirect to Server BTable 1: The behavior of popular browsers in different OS when trying to trigger a TLS re-handshake
Windows
MacOS
Linux
✓ Re-handshake without warnings
✓ Re-handshake without warnings.
ImageB is loaded, but the request
✓ Re-handshake without warnings
✓ Re-handshake without warnings.
ImageB is loaded, but the request
✓ Re-handshake without warnings
✓ Re-handshake without warnings.
ImageB is loaded, but the second request
is pending all the time.
✓ Re-handshake without warnings
-
✓ Re-handshake without warnings
✓ Re-handshake without warnings,
ImageB is loaded, but the request
is pending all the time.
No Re-handshake. ImageB is not loaded,
and the request is pending all the time.
-
is pending all the time.
-
✓ Re-handshake without warnings
No Re-handshake and second request,
Network failure: ERR_TIMED_OUT
No Re-handshake. ImageB is not loaded,
and the request is pending all the time.
-
No Re-handshake and second request.