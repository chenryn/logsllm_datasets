---
author: Gaurav Kamathe
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 2959
date: '2022-04-30 17:21:00'
editorchoice: false
excerpt: 这些方便的 Go 构建选项可以帮助你更好地理解 Go 的编译过程。
fromurl: https://opensource.com/article/22/4/go-build-options
id: 14525
islctt: true
largepic: /data/attachment/album/202204/30/172121exam5k8vx45kzk7p.jpg
permalink: /article-14525-1.html
pic: /data/attachment/album/202204/30/172121exam5k8vx45kzk7p.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lkxed
summary: 这些方便的 Go 构建选项可以帮助你更好地理解 Go 的编译过程。
tags:
- 编译
- Go
- 构建
thumb: false
title: 我最喜欢的 Go 构建选项
titlepic: true
translator: lkxed
updated: '2022-04-30 17:21:00'
---
> 
> 这些方便的 Go 构建选项可以帮助你更好地理解 Go 的编译过程。
> 
> 
> 
![](/data/attachment/album/202204/30/172121exam5k8vx45kzk7p.jpg)
学习一门新的编程语言最令人欣慰的部分之一，就是最终运行了一个可执行文件，并获得预期的输出。当我开始学习 Go 这门编程语言时，我先是阅读一些示例程序来熟悉语法，然后是尝试写一些小的测试程序。随着时间的推移，这种方法帮助我熟悉了编译和构建程序的过程。
Go 的构建选项提供了更好地控制构建过程的方法。它们还可以提供额外的信息，帮助把这个过程分成更小的部分。在这篇文章中，我将演示我所使用的一些选项。注意：我使用的“ 构建   build ”和“ 编译   compile ”这两个词是同一个意思。
### 开始使用 Go
我使用的 Go 版本是 1.16.7。但是，这里给出的命令应该也能在最新的版本上运行。如果你没有安装 Go，你可以从 [Go 官网](https://go.dev/doc/install) 上下载它，并按照说明进行安装。你可以通过打开一个命令提示符，并键入下面的命令来验证你所安装的版本：
```
$ go version
```
你应该会得到类似下面这样的输出，具体取决于你安装的版本：
```
go version go1.16.7 linux/amd64
```
### 基本的 Go 程序的编译和执行方法
我将从一个在屏幕上简单打印 “Hello World” 的 Go 程序示例开始，就像下面这样：
```
$ cat hello.go
package main
import "fmt"
func main() {
    fmt.Println("Hello World")
}
```
在讨论更高级的选项之前，我将解释如何编译这个 Go 示例程序。我使用了 `build` 命令，后面跟着 Go 程序的源文件名，本例中是 `hello.go`，就像下面这样：
```
$ go build hello.go
```
如果一切工作正常，你应该看到在你的当前目录下创建了一个名为 `hello` 的可执行文件。你可以通过使用 `file` 命令验证它是 ELF 二进制可执行格式（在 Linux 平台上）。你也可以直接执行它，你会看到它输出 “Hello World”。
```
$ ls
hello  hello.go
$ file ./hello
./hello: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, not stripped
$ ./hello
Hello World
```
Go 提供了一个方便的 `run` 命令，以便你只是想看看程序是否能正常工作，并获得预期的输出，而不想生成一个最终的二进制文件。请记住，即使你在当前目录中没有看到可执行文件，Go 仍然会在某个地方编译并生成可执行文件并运行它，然后把它从系统中删除。我将在本文后面的章节中解释。
```
$ go run hello.go
Hello World
$ ls
hello.go
```
### 更多细节
上面的命令就像一阵风一样，一下子就运行完了我的程序。然而，如果你想知道 Go 在编译这些程序的过程中做了什么，Go 提供了一个 `-x` 选项，它可以打印出 Go 为产生这个可执行文件所做的一切。
简单看一下你就会发现，Go 在 `/tmp` 内创建了一个临时工作目录，并生成了可执行文件，然后把它移到了 Go 源程序所在的当前目录。
```
$ go build -x hello.go
WORK=/tmp/go-build1944767317
mkdir -p $WORK/b001/
>
mkdir -p $WORK/b001/exe/
cd .
/usr/lib/golang/pkg/tool/linux_amd64/link -o $WORK \
/b001/exe/a.out -importcfg $WORK/b001 \
/importcfg.link -buildmode=exe -buildid=K26hEYzgDkqJjx2Hf-wz/\
nDueg0kBjIygx25rYwbK/W-eJaGIOdPEWgwC6o546 \
/K26hEYzgDkqJjx2Hf-wz -extld=gcc /root/.cache/go-build /cc \
/cc72cb2f4fbb61229885fc434995964a7a4d6e10692a23cc0ada6707c5d3435b-d
/usr/lib/golang/pkg/tool/linux_amd64/buildid -w $WORK \
/b001/exe/a.out # internal
mv $WORK/b001/exe/a.out hello
rm -r $WORK/b001/
```
这有助于解决在程序运行后却在当前目录下没有生成可执行文件的谜团。使用 `-x` 显示可执行文件确实在 `/tmp` 工作目录下创建并被执行了。然而，与 `build` 命令不同的是，可执行文件并没有移动到当前目录，这使得看起来没有可执行文件被创建。
```
$ go run -x hello.go
mkdir -p $WORK/b001/exe/
cd .
/usr/lib/golang/pkg/tool/linux_amd64/link -o $WORK/b001 \
/exe/hello -importcfg $WORK/b001/importcfg.link -s -w -buildmode=exe -buildid=hK3wnAP20DapUDeuvAAS/E_TzkbzwXz6tM5dEC8Mx \
/7HYBzuaDGVdaZwSMEWAa/hK3wnAP20DapUDeuvAAS -extld=gcc \
/root/.cache/go-build/75/ \
7531fcf5e48444eed677bfc5cda1276a52b73c62ebac3aa99da3c4094fa57dc3-d
$WORK/b001/exe/hello
Hello World
```
### 模仿编译而不产生可执行文件
假设你不想编译程序并产生一个实际的二进制文件，但你确实想看到这个过程中的所有步骤。你可以通过使用 `-n` 这个构建选项来做到这一点，该选项会打印出通常的执行步骤，而不会实际创建二进制文件。
```
$ go build -n hello.go
```
### 保存临时目录
很多工作都发生在 `/tmp` 工作目录中，一旦可执行文件被创建和运行，它就会被删除。但是如果你想看看哪些文件是在编译过程中创建的呢？Go 提供了一个 `-work` 选项，它可以在编译程序时使用。`-work` 选项除了运行程序外，还打印了工作目录的路径，但它并不会在这之后删除工作目录，所以你可以切换到该目录，检查在编译过程中创建的所有文件。