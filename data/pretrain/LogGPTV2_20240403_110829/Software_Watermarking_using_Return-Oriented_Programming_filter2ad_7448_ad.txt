# Table 2: Runtime Overhead

| lbm | mcf | sjeng | soplex |
|---|---|---|---|
| 1.33 | 6.48 | 536.61 | 88.62 |
| 19.04 | 2.03 | 154.94 | 10897.63 |
| 41363.07 | 47177.45 | 4262.94 | 4.61 |

## Figure 11: Increment in Program Size (bytes)

Our ROP-based watermarking uses 156 or 188 bytes when the gadgets are formatted in integer arrays or in structs/classes, respectively. This is more efficient compared to embedding a watermark into a radix graph.

## 4.5 Comparison with RopSteg

In this section, we compare our method with RopSteg, a general tool for hiding code portions of a program using ROP. RopSteg has a different threat model and is susceptible to simple program transformation attacks. Our comparison focuses on two key aspects:
1. The number of additional instructions inserted that participate in normal runs of the program (without watermark generation) and in watermark generation.
2. The increment in program size.

### Security Evaluation
Instructions dedicated to watermark generation, which do not participate in normal runs, are suspicious and can attract program analysis. Our ROP-based watermarking is designed such that the newly added instructions participate in regular program execution. Table 3 shows the average results for six benchmark programs tested, with consistent results across them.

| Method | Newly Inserted Instructions Executed | Normal Run (Without Watermark Generation) | Watermark Generation | Program Size Increase (bytes) |
|---|---|---|---|---|
| Our Work | 100% | 100% | 0% | 512 |
| RopSteg | 61.5% | 61.5% | 38.5% | 650 |

Our design ensures that 100% of the newly added instructions participate in normal runs, whereas only 61.5% of the instructions inserted by RopSteg do. Additionally, the total size increment caused by RopSteg is larger than our method.

## 5. Discussion

### 5.1 ROP Defenses
Several ROP defenses have been proposed to detect and stop ROP execution. If triggered on a system with ROP defense, the embedded ROP execution in our watermarked program could set off an alarm, potentially terminating the specific execution where watermark extraction takes place. However, watermark extraction is a special scenario that only occurs when proving software ownership or identifying authorized users. In our ROP-based watermarking, normal executions of the watermarked program show no characteristics of ROP, thus avoiding conflicts with ROP defenses. Although extracting the watermark presents ROP behaviors, it is reasonable to run the watermarked program in a specialized environment or temporarily disable the ROP defense during extraction.

### 5.2 Compatibility
Our design is implemented and evaluated under the x86 instruction architecture. Effectiveness and efficiency on other architectures, such as SPARC or ARM, may vary. Successful ROP on various platforms suggests that our proposal could work on these platforms as well. However, our design relies on gadgets from shared libraries, making watermark extraction dependent on the execution environment, such as library versions. A possible solution is to source multiple sets of watermarking payload strings, each corresponding to a distinct version of the selected libraries, allowing the watermarked program to detect its environment and use the appropriate payload. This is left as future work.

### 5.3 Library Replacement Attack
A potential weakness of our ROP-based watermarking is the library replacement attack, where an adversary replaces the original dynamic libraries with custom ones, potentially compromising the watermark recovery process. To mitigate this, we plan to exploit gadgets inside libraries that cannot be circumvented or introduce tamper-proofing approaches to check at runtime if the loaded libraries are compromised.

## 6. Conclusion
We propose a novel dynamic software watermarking design that embeds and exhibits watermarks through return-oriented programming (ROP). Our ROP-based watermarking transforms important watermarking code into ROP gadgets and builds them in the data region. The watermark can be extracted by activating ROP execution along these gadgets. Evaluations show that our design achieves better stealth due to fine-grained code distribution and good resilience against code obfuscation and re-packing, with notably lower overhead.

## 7. Acknowledgments
This project is partly supported by the National Key Basic Research Program of China (Grant No. 2013CB834204), the National Natural Science Foundation of China (Grant No. 61272423, 61303213), the Natural Science Foundation of Tianjin (Grant No. 14JCYBJC15300), and the Open Project Foundation of Information Security Evaluation Center of Civil Aviation, Civil Aviation University of China (Grant No. CAAC-ISECCA-201403).

## 8. References
[References listed here]

---

This revised text is more structured, clear, and professional, with improved readability and coherence.