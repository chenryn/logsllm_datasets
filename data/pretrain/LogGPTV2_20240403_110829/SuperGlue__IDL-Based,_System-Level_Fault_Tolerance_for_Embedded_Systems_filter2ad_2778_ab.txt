In such a case, C3 and SuperGlue still provide protection to
the rest of the system components, that do not need to suffer
the overheads from such encodings.
F. C3 recovery mechanisms: summary and limitations.
COMPOSITE provides hardware-based isolation between
components, and system-level recovery with C3. Although
229
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:19:10 UTC from IEEE Xplore.  Restrictions apply. 
C3 uses interface-driven recovery, the procedures for recov-
ering different kinds of components do vary. On one hand,
Song et al. [7] gave an example for recovering the thread
scheduler that requires reﬂecting on kernel data structures.
On the other hand, recovering the MM component requires
upcalls into client components, in addition to reﬂecting on
the component-kernel interface. Indeed, C3 offers no guidance
to system developers in how to apply the interface-driven
recovery mechanisms, nor is it clear when recovery should use
reﬂection, upcalls, be done on-demand or eagerly, or if any
ordering must be imposed on descriptor recovery. Importantly,
C3 stubs are manually written, and are complex and error
prone. Some interface stubs are more than 398 (e.g., the
ﬁle system component stubs) lines of code (LOC), while the
components that implement those interfaces are often around
500 LOC.
The need for SuperGlue. These limitations motivate
SuperGlue which (1) creates a model that abstracts the system
recovery mechanisms and properties of C3 into an interface
that (2) is integrated into an IDL supporting terse, declarative
interface descriptions to automatically generate recovery code.
III. SUPERGLUE SYSTEM MODEL
SuperGlue deﬁnes a model of interface and component
semantics to better use the mechanisms of C3. This model ad-
dresses the following questions about how to use C3 (1) what
is the shape of the state machine, and what is the recovery
path through it? (2) what should client stub code do when it is
activated by an inter-component exception? (3) when should
upcalls be used to trigger stubs, and into which components?
(4) when is reﬂection needed to recover descriptor state from
a server? (5) and when must
the storage component and
zero-copy buffer be used, and what are the means to access
storage component services? In this section we present a
system model with the speciﬁcations for the resources and
components that manage these resources, and the descriptors
and the component
interfaces that manipulate descriptors’
states. We then build a set of rules for recovering a given faulty
component based on the dependency relationships of that
component. These speciﬁcations and rules enable interface-
driven fault recovery for system-level services in a principled
way that both addresses the questions outlined above and
enables IDL compilation to produce interface-driven recovery
code.
A. Descriptor-Resource Model
Operating systems provide high-level abstractions to hard-
ware resources to their clients. These abstractions are often
named using an opaque descriptor (e.g., a ﬁle descriptor).
Whereas in C3 the concepts of a resource and descriptor were
conﬂated as “object”, SuperGlue decouples and distinguishes
between them. Interfaces are parameterized using the follow-
ing terminology:
• r is a speciﬁc type of resource. Most system resources are
abstract, and provided by a component’s implementation
of an interface. These include threads, memory mappings,
locks, and event channels.
• C = {cr, ...} is the system’s set of components. cr is the
component that manages resources of type r (for presenta-
tion, we simplify such that each component manages only
a single type of resource).
• dr is a class of descriptors used by client(s) which is
associated with a resource r through cr’s interface.
• Br is true if and only if a thread can block while accessing
r in component cr. Recall that COMPOSITE invocations are
synchronous, so blocking also delays execution in the client
when a thread blocks in the server.
• Dr is meta-data associated with the resource r.
• Gdr is true if and only if a speciﬁc descriptor is globally
addressable between components. Otherwise, each descrip-
tor is locally addressable only from within each client
component.
• Pdr ∈ {P arent, XCP arent, Solo}, describes if descrip-
tors of type dr can have dependencies on each other.
P arent expresses that when a dependency is created, the
creation function takes another descriptor as an argument.
Thus, upon fault and recover, the same parent must be
passed in as an argument. The accept POSIX function
is an example of this where new descriptors are created
from existing ones. XCP arent states that the parent/child
relationship can span components. Solo denotes that no
inter-descriptor dependencies exist.
• Cdr is true if and only if Pdr (cid:4)= Solo, and when a descriptor
is closed, its entire tree of children is also deleted. This
behavior is common in modern capability systems that
support recursive revocation [18].
• Ydr is true if and only if Pdr
• Ddr is meta-data necessary for recovery that is associated
with descriptors of type dr. For example, for ﬁles, this
includes the offset and ﬁle path.
(cid:4)= Solo ∧ ¬Cdr, and when a
descriptor is closed, the stub’s data tracking the descriptor
is also deleted. Otherwise, the descriptor meta-data remains
and can used by the children.
All of these variables are composed into the descriptor-
resource model,
DR = (Br, Dr, Gdr
, Pdr
, Cdr
, Ydr
, Ddr
)
(1)
B. Descriptor State Machines
Integral in the recovery of server components is the state
machine that is implicit in how descriptors are manipulated
by interface functions. SuperGlue makes these state machines
explicit. The motivation is two-fold. First, formalizing valid
transitions enables fault detection if invalid branches are
attempted. Second, the state machine is used to track each
descriptor’s state, thus succinctly summarizing the “current”
state of a descriptor (along with Ddr) without logging all
interface operations. A state machine that describes the state
of descriptor dr includes:
SMdr
= (Idr
, Sdr
, σ, s0, sf )
(2)
where
230
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:19:10 UTC from IEEE Xplore.  Restrictions apply. 
• Sdr
× Idr
• σ : Sdr
• Idr = {fi, ...} is the set of functions in the interface
exported by cr.
= {si, ...} is the set of states of the descriptor. As we
will see, these are implicit and inferred by the compiler.
→ Sdr is the state transition function. Given
an input state, and an interface function, σ determines the
next state.
• s0 ∈ Sdr is the initial state of a descriptor when created.
• sf is a special type of state: the faulty state. There are
implicit transitions to it from each other state, triggered by
an failure in the server.
Functions in Idr trigger transitions between states. These
functions are further characterized:
• I create
⊆ Idr is the set of functions that return a new
dr
descriptor in state s0.
• I terminate
⊆ Idr
• I block
• I wakeup
is the set of functions that
dr
descriptor as an argument and signify its destruction.
take a
⊆ Idr is the set of functions that can block the
⊆ Idr is the set of functions that correspondingly
dr
invoking thread.
dr
wake up a thread.
It should be noted that I block
dlock . Calling lock release ∈ I wakeup
(cid:4)= ∅ ↔ Bdr. The blocking
semantics of components should be part of the interface
speciﬁcation as a main factor in determining whether to use
eager or on-demand recovery.
Lock component example. A descriptor to a lock, dlock,
is put into the initial state “available” when the lock alloc
∈ I create
function is called which creates a descriptor track-
ing structure in the client. The descriptor can transit into
“taken” state or under contention, into “block” state, by calling
lock take ∈ I block
function
transits the descriptor into “available” state again and allows
other thread to take the lock. Calling lock free ∈ I terminate
function will deallocate the tracking data structure when the
function returns.
Basic component recovery (R0). When a fault occurs in the
server component cr and it is μ-rebooted, the descriptor dr
will ﬁrst transit to the faulty state sf and the client stubs will
be notiﬁed of the fault via an exception. At this point, a pre-
computed, shortest path through the state machine is taken,
invoking the corresponding functions f0, . . . , fn ∈ Idr such
that σ(σ(σ(sf , f0), ...), fn) = sexpected where sexpected is the
state of the descriptor before the fault, and each function f0
through fn constitutes the walk from the faulty state to the
destination. This basic mechanism is shared between all model
conﬁgurations.
dlock
dlock
dr
dlock
The bottom diagram in Figure 2 shows how the descriptor
state is manipulated from the fault state sf to its “ex-
pected” state during the recovery for the scheduler, ﬁle system
(RamFS) and event manager. For example, if a thread is
in the “blocked” state when the scheduler fails, client stub
code i) ensures that the scheduler recreates the thread in its
own structures, and ii) then re-blocks the thread to match the
client’s expectations.
231
C. Recovery Mapping from Model to Mechanism
attribute
In addition to the base recovery R0, we classify the
interface-driven recovery mechanisms into a number of cate-
gories. Each of these is depicted in the top of Figure 2.
Timing of recovery. Song et al. [7] provides the timing
analysis for eager versus on-demand recovery. However, we
must ﬁrst determine when to use eager or on-demand recovery.
• T0: Eager Recovery. If Br, then some eager recovery
is required at a high-priority at fault-time. Eager recov-
ery must be conducted within the faulted component as
part of the initialization using specialized support similar
((constructor)) for execution before
to
the equivalent of main. The function in I wakeup provided
by the recovering server’s server is invoked to wake up each
thread that was previous blocked by the faulty component.
• T1: On-Demand Recovery. Aside from the initial μ-
reboot and re-initialization, all recovery can be conducted on
demand if ¬Br. Even if Br is true and the eager recovery
T0 is required for resuming execution of all threads that were
blocked previously by a faulty component, a descriptor with
corrupted state in the faulty component can be recovered from
the component’s interface at the time when the descriptor is
being accessed by a thread. Therefore all client stub-directed
state machine recovery should be on-demand.
Recovery with Dependencies. Parent/child descriptor depen-
dencies necessitate ordering descriptor recovery.
• D0: Recovery with Children Dependency. If Cdr (and
by implication Pdr (cid:4)= Solo), then calling f ∈ I terminate
to
terminate a descriptor dr requires the reconstruction of all
its children descriptors. The semantics of recursive revoca-
tion [16] rely on children termination along with a parent
as the child dependency often implies some side-effect that
must also be terminated (e.g., a virtual page mapping for the
memory manager).
• D1: Recovery with Parent Dependency. If parent depen-
= XCP arent, then
dencies exist, Pdr
descriptors are processed from the root of the dependency tree
to the descriptor being recovered. When Pdr = P arent, this
ordering is by simple parent links within the descriptor data-
structure. For example, when the memory manager recovers
an aliased page (descriptor), its parent mapping previously
aliased from the root mapping must be reconstructed re-
cursively along the path of mappings from the page to the
physical frame (root).
Recovery with the Storage Component
• G0: Recovery with Global Descriptor. When the descrip-
tors are globally addressable (Gdr is true), multiple clients
share the same descriptor namespace. In such cases, R0 is
not sufﬁcient as a single client component does not have full
context to recover the descriptor. Instead, a storage component
keeps the mapping between each descriptor and their creator
component (i.e., executed the function ∈ I create
). When the
descriptor is used and the recovered component does not ﬁnd
the descriptor id it returns an error (EINVAL). The server-side
stub catches this error and queries the storage component that,
if it holds a record of the descriptor, makes an upcall into the
= P arent ∧ Pdr
dr
dr
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:19:10 UTC from IEEE Xplore.  Restrictions apply. 

		

	


	













 







!








!

!









	

	

	

	

	




	



