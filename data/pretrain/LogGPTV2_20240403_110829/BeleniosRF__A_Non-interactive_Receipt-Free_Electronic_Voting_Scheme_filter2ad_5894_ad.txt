(note that c1, T satisfy e(T, g2) = e(c1, X2)); it obtains a
signature (τ1 = Y F(m)s, τ2 = gs
1); it de-
ﬁnes (letting r be the unknown randomness in (c1, c2, c3))
4 = Y F(m)sP rs, σ3 := τ2 = gs
σ1 := τ4 = grs
1,
2 = P s, which is distributed as an
σ4 := τ3 = gs
SCR signature on c.
Let {m1, . . . , mq} be the extracted (equivalently: decrypted)
messages of the signing queries. Assume the adversary out-
puts a (partial) valid forgery, namely one which only contains
(c1, c2, σ1, σ2, σ3, σ4), commitments Cm, Cr and proofs πr, πm.
The reduction extracts m from Cm. Then soundness of πr and
1 and c2 = F(m)P r
πm ensures that for some r we have c1 = gr
(and thus m = Decrypt+(dk, vk, c)).
1 , σ2 := τ1 · τ d
2, σ5 := τ d
1, τ3 = gs
2, τ4 = cs
1 = Y F(m)s, σ∗
−d
Moreover, let s be such that σ4 = gs
2. Since the forgery
is valid, from Verify+ we have: σ1 = grs
(from (3a)), σ2 =
Y F(m)sP rs (from (3b)) and σ3 = gs
1
1 (from (3c)). The re-
1 := σ2 · σ
duction sets σ∗
1 and
2 and returns (m, σ∗). This is a valid Waters
σ∗
3 := σ4 = gs
forgery, as σ∗ is valid for m and m /∈ {m1, . . . , mq} (otherwise
the adversary would not have won the SRC unforgeability
game).
3.4 RCCA-Secure Encryption from SRC
2 := σ3 = gs
As a next step towards our voting protocol, we show that
our SRC scheme, contrary to the one from [12], yields an
RCCA-secure [16] encryption scheme, as deﬁned next.
CCA-security is the standard notion for public-key encryp-
tion and implies that ciphertexts are non-malleable. It states
that for an eﬃcient adversary which after choosing m0, m1
receives c∗ it should be impossible to decide whether c∗ en-
crypts m0 or m1, even when given an oracle that decrypts
any ciphertext c (cid:54)= c∗. For randomizable schemes this notion
is unachievable, as the adversary could submit a random-
ization of the challenge ciphertext to the decryption oracle.
The strongest achievable notion for randomizable schemes is
RCCA, where whenever the oracle receives an encryption of
m0 or m1, it returns a special symbol (cid:62).
tion scheme for a polynomial-size message space {0, 1}k.
Based on our SRC scheme we deﬁne the following encryp-
KeyGen is deﬁned as EKeyGen.
Encrypt(pk, m): Run (vk, sk) ←$ SKeyGen(pp);
c ←$ Encrypt+(pk, vk, m); σ ←$ Sign+(sk, pk, c);
return c = (c, σ, vk).
Decrypt(dk, (c, σ, vk)): If Verify+(vk, pk, c, σ) = 1, return
m = Decrypt+(dk, vk, c); else return ⊥.
Random is deﬁned as Random+.
T h e o r e m 2. The above encryption scheme for polynomial-
size message spaces is RCCA-secure under the SXDH and
the CDH+ assumption.
P ro o f S k e t c h . We will give a proof sketch and re-
fer to the full version for a detailed proof. Intuitively, ci-
phertexts hide the message, since under SXDH we could
replace the commitments and proofs in the challenge cipher-
text by simulated ones and under DDH, we could replace
c2 = F(m)P r by a random element, so the ciphertext would
contain no more information about the message. The diﬃ-
culty is that we need to simulate the decryption oracle. For
this we program the hash function H: let vk∗ be the key
contained in the challenge ciphertext; we choose a, b ←$ Zp
and set h1 = P −a·H(cid:48)(vk∗) · gb
1 and h2 = P a, which is dis-
tributed correctly and set H(vk) = P a(H(cid:48)(vk)−H(cid:48)(vk∗)) · gb
1.
For a well-formed ciphertext containing vki (cid:54)= vk∗, we then
have c2 · (c3 · c
−d
1 =
Decrypt(d, (c1, c2)), meaning we can use c3 to decrypt with-
out knowing d; for the challenge ciphertext under vk∗ we
have c3 = gbr
The reduction can thus answer decryption queries contain-
ing some vk (cid:54)= vk∗, but not if it contains vk∗. However, if
an adversary submits a valid ciphertext with vk∗ which does
not encrypt the challenge message, then it would break SRC
unforgeability, so security of our SRC scheme implies that
the adversary cannot make this type of query.
1 )−1/(a(H(cid:48)(vk)−H(cid:48)(vk∗))) = c2 · P −r = c2 · c
−b
1 , so we can embed a DDH challenge.
EKeyGen(1λ, 1k):
pp := (G, z, u) ←$ Setup(1λ, 1k); crs ←$ Setupg s (G); h ←$ G2
(P, dk) ←$ KeyGen(G, 1); return pk := (pp, crs, h, P ), dk.
1
Encrypt+((pp, crs, h, P ), vk = (pp, X1, X2), m; r):
Compute, with H deﬁned by h as in (1):
c1 = gr
1
c2 = F (m) · P r
c3 = H(vk)r
Make commitments C: For i = 1, . . . , k:
C1,m,i = C(cid:48)
1(mi)
CT = C1(X r
1 )
C2,m,i = C(cid:48)
Cr = C(cid:48)
2(mi)
2(r)
Compute GS proofs π for the following (with r being the
value committed in Cr; mi in C2,m,i; and w in CT ):
• πr proves gr
• πm consists of:
1 = c1.
π(cid:48)
i proving mi is a bit for all i;
π(cid:48)
i=1 umi
m proving c2 = u0
i
· P r.
(cid:81)k
• πT proves X r
• πV proves H(vk)r = c3.
Return c := (c1, c2, c3, C, π).
1 = w.
Sign+(sk = (pp, Y ), (pp, crs, h, P ), c; s):
If π is not valid for C, vk, P , return ⊥. Else return
σ1 = cs
1
σ3 = gs
1
σ2 = Y · cs
σ4 = gs
2
2
(2)
σ5 = P s
Random+(vk, (pp, crs, h, P ), c, σ; (r(cid:48), s(cid:48))):
Let c = (c1, c2, c3, C, π); set:
1
(cid:48) := c1 · gr(cid:48)
(cid:48) := c3 · H(vk)r(cid:48)
(cid:48) := σ1 · cs(cid:48)
1 · σr(cid:48)
(cid:48) := σ2 · cs(cid:48)
2 · σr(cid:48)
(cid:48) := σ3 · gs(cid:48)
(cid:48) := σ5 · P s(cid:48)
1
c1
c3
σ1
σ2
σ3
σ5
1
3 · gr(cid:48)·s(cid:48)
5 · P r(cid:48)·s(cid:48)
σ4
(cid:48) := c2 · P r(cid:48)
c2
(cid:48) := σ4 · gs(cid:48)
2
r = Cr · C2(r(cid:48)), adapt πr, πT , πV accordingly.
Set C(cid:48)
Randomize all commitments and proofs to C(cid:48) and π(cid:48).
Return (c(cid:48)
3, C(cid:48), π(cid:48)) and σ(cid:48).
1, c(cid:48)
2, c(cid:48)
Verify+((pp, X1, X2), (pp, crs, h, P ), (c1, c2, c3, C, π), σ):
Return 1 iﬀ π veriﬁes and the following hold:
e(σ1, g2) = e(c1, σ4)
e(σ2, g2) = e(z, X2) e(c2, σ4)
e(σ3, g2) = e(g1, σ4)
e(σ5, g2) = e(P, σ4)
(3a)
(3b)
(3c)
Decrypt+(dk, (pp, crs, h, P ), vk, c):
Let c = (c1, c2, c3, C, π). If π is not valid, return ⊥;
else let F = Decrypt(dk, c = (c1, c2));
browse M and return the ﬁrst m with F (m) = F .
Figure 2: Our SRC scheme
4. BELENIOSRF
In this section we deﬁne Belenios Receipt-Free (BeleniosRF),
a strongly receipt-free voting protocol that builds on [12, 22].
4.1 Overview
The election public/secret key pair (pk, sk) is an encryp-
tion/extraction key pair generated via EKeyGen(x) (cf. Re-
mark 2), and user key pairs (upk, usk) are signature keys
generated by SKeyGen. A user casts a vote by encrypting it
via Encrypt+ under pk w.r.t. his upk, and uses usk to then
sign the ciphertext via Sign+ (together, this corresponds to
a ciphertext of our RCCA encryption scheme).
When the ballot box receives a valid ballot, it randomizes it
via Random+ and publishes the resulting ciphertext/signature
pair on the public bulletin board PBB. Users can verify that
their vote is present, since they can verify the adaptation of
their signature on their now-randomized ciphertexts.
Tallying follows standard techniques of e-voting: our con-
struction allows for homomorphic tallying as well as shuﬄing.
In the ﬁrst case, we take advantage of the special structure of
GS commitments, which allow us to calculate a partial tally
for each option by adding the corresponding commitment
across voters, and then decrypting the resulting commitment
(with proof of correctness).
Using shuﬄing, the encrypted votes are re-randomized and
shuﬄed (and a proof of correct execution of this is generated)
via an algorithm Shuﬄe. Then the ballots are decrypted
(again accompanied with a proof that this was done correctly)
and the result is published. These proofs make the tallying
process publicly veriﬁable.
We now describe the homomorphic tallying version, where
V = {0, 1}k, and the result function is simple vector addition.
The scheme V BeleniosRF is based on the SCR scheme from
Section 3.3 and consists of the following algorithms:
Setup(1λ, 1k): Compute (pk, sk) ←$ EKeyGen(x)(1λ, 1k), pro-
duce a Fiat-Shamir random oracle proof Πσ that crs, con-
tained in pk, is binding. Return (pk∗ = (pk, Πσ), sk).
Register(id): On (implicit) input pk = (pp, crs, h, P ), return
(upkid, uskid) ←$ SKeyGen(pp).
Vote (id, upk, usk, v) is used by a voter to create a ballot b
for vote v ∈ V. It computes c ← Encrypt+(pk, upk, v) and
σ ← Sign+(usk, pk, c); and returns b = (id, upk, c, σ).
Valid(BB, b) ﬁrst checks that the ballot b is valid, i.e., that
it is well-formed and the signature is correct. Formally, it
parses b as (id, upk, c, σ) and checks if
– id corresponds to an eligible voter from ID and upk
corresponds to the registration of user id;
– Verify+(upk, pk, c, σ) = 1.
If any step fails, it returns ⊥; otherwise, it returns (cid:62).
Append(BB, b = (id, upk, c, σ)) randomizes (c, σ) as (c(cid:48), σ(cid:48)) ←
Random+(upk, pk, c, σ) and appends to BB a randomized
version b(cid:48) = (id, upk, c(cid:48), σ(cid:48)) of b.
Publish(BB) takes every entry b = (id, upk, c, σ) in BB and
removes elements id, c3, CT , πT , πV and σ5, constructing ˆb :=
(cid:0)upk, (c1, c2, Cm, Cr, πr, πm), (σ1, σ2, σ3, σ4)(cid:1). It then adds ˆb
to PBB,2 and returns PBB.
2As noted in Remark 2, these are precisely the elements
that guarantee unforgeability, which assures a voter that the
plaintext of his encrypted vote was not altered.
VerifyVote(PBB, id, upk, usk, b) browses PBB for an entry ˆb
containing upk. If none exists, it returns ⊥. For entry ˆb :=
(cid:0)upk = (pp, X1, X2), (c1, c2, Cm, Cr, πr, πm), (σ1, σ2, σ3, σ4)(cid:1)
if πr and πm are valid and
e(σ1, g2) = e(c1, σ4)
e(σ3, g2) = e(g1, σ4)
e(σ2, g2) = e(z, X2) · e(c2, σ4)
then return (cid:62), else return ⊥.
Tally(BB, sk) consists of the following steps. Let N be the
number of ballots.
– Parse each ballot b ∈ BB as b = (id(b), upk(b), c(b), σ(b)).
– If there is any ballot b that does not pass Valid(BB, b),
output (r = ⊥, PBB, Πd = ∅).
– Let {C (b)
1,m,i}k
in c(b). Compute Ti =(cid:80)
i=1 be the commitments in C (b)