servers for each domain by requesting recursive DNS queries to
15 geographically distributed public DNS servers [76].5 Of the
14651 domain names, we found 1464 that resolved to multiple IP
addresses. For each of these domains, we established an SSL con-
nection to each of the domain’s servers and recorded each server’s
certiﬁcate chain and public key.
4.4.2 Certiﬁcate chain validation: Firefox and IE
The next step was to validate the certiﬁcates we collected. To
maximize the practical relevance of our study, we simulated the
validation procedures of Firefox 2.0 and Internet Explorer 7.0. The
validation procedures of Firefox and IE are close to the process we
described in Section 2.3, but there are some differences in how each
browser handles missing and expired intermediate CA certiﬁcates.
Intermediate CA certiﬁcates are certiﬁcates issued by a CA’s root
certiﬁcate which it uses to directly issue certiﬁcates to web servers.
This results in certiﬁcate chains of length 3 or more. Since most
browsers only ship with root CA certiﬁcates, to guarantee a client
can verify its chain, a server must also send any intermediate CA
certiﬁcates in addition to its own.
Unfortunately, many servers are not conﬁgured to send interme-
diate CA certiﬁcates. Also, there are several widely used interme-
diate CA certiﬁcates which have expired, and although the CA has
reissued a replacement with the same name (and often, the same
4For our study, a second-level domain means the last two com-
ponents of a non-international fully qualiﬁed domain name, e.g.,
yahoo.com.
5A limitation of this approach is that we cannot discover multiple
servers behind a front-end load balancer with a single IP address.
public key), many servers have not updated them and are still send-
ing the expired version. We found that Firefox and Internet Ex-
plorer handle these situations slightly differently. We determined
each browser’s validation procedure through source code analysis,
empirical testing, and various public sources [20, 49, 50].
First, both Firefox and Internet Explorer cache the intermediate
CA certiﬁcates they encounter during a user’s browsing session and
use this cache to help verify certiﬁcate chains. This means if the
user visits a site with a missing intermediate CA certiﬁcate, and
previously in the session, the user visited a different site using the
same intermediate certiﬁcate, the browser uses the cached copy to
verify the chain. In addition, if the user visits a site which sends
an expired intermediate CA certiﬁcate, both Firefox and Internet
Explorer will automatically replace it with the more recent version
if they have seen it previously in the session.
Internet Explorer takes some additional measures to address miss-
ing intermediate CA certiﬁcates that Firefox does not. First, in
addition to caching intermediate CA certiﬁcates within a session,
Internet Explorer caches these certiﬁcates persistently, across ses-
sions. Second, Internet Explorer takes advantage of the Author-
ity Information Access (AIA) extension included in some X.509
certiﬁcates. The AIA extension “indicates how to access CA in-
formation for the issuer of the certiﬁcate in which the extension
appears” [63]. We found for many server certiﬁcates issued by an
intermediate CA certiﬁcate, they include the AIA extension with a
URL for the intermediate CA certiﬁcate, and Internet Explorer au-
tomatically downloads and uses it to verify the chain. Firefox does
not use the AIA extension. It is unclear exactly why not, but dis-
cussions on Mozilla Bugzilla suggest it might be because some of
the Mozilla developers believe the AIA standard is not well spec-
iﬁed [49]. As a result of these additional mechanisms in Internet
Explorer, Firefox generates more certiﬁcate warnings on average
for sites with missing or expired intermediate CA certiﬁcates. We
summarize these differences in Table 2.
4.4.3 Evaluation results
Weak-locked same-origin policy. To evaluate the deployability of
the weak locked SOP, we validated the servers’ certiﬁcate chains in
our survey using two procedures: Pessimistic Validation and Op-
timistic Validation. Pessimistic Validation models the worse case
scenario: a Firefox user visits a web site with a missing or ex-
pired intermediate CA certiﬁcate at the start of a session, or a user
freshly installs IE and visits the same site, and the server certiﬁcate
does not support AIA. Through empirical analysis we identiﬁed 18
widely used intermediate CA certiﬁcates, and for Optimistic Vali-
dation, we assume the user’s browser has cached valid versions of
these certiﬁcates. We intend Optimistic Validation to model a long
Firefox session or a “broken in” Internet Explorer installation with
a substantial intermediate CA certiﬁcate cache.
Then, for the 1464 fully qualiﬁed SSL domains which use mul-
tiple servers, we counted the number of domains which had servers
with both valid and invalid certiﬁcate chains, since it is these do-
mains that the weak locked SOP may break. Using Pessimistic
Validation, we found 8 such domains, and for Optimistic Valida-
tion we found 4 domains. For each of the other 1456 domains, its
servers either had all valid certiﬁcates or all invalid certiﬁcates.
The difference between the Optimistic and Pessimistic Valida-
tion results means we found 4 domains that contained a mix of
servers with missing or expired intermediate certiﬁcates and cor-
rectly conﬁgured servers. Of the 4 remaining domains which still
cause problems with Optimistic Validation, 3 are probably the re-
sult of virtual hosting issues. For example, of the 3 servers we
found for signin.half.ebay.com, one had a valid certiﬁcate,
Policy
Weak locked SOP
Strong locked SOP
Percentage of potentially
non-interoperating domains
0.05%
0.6%
Table 3: Summary of our deployability analysis of the locked
same-origin policies using a sample of 14651 SSL domains.
This table shows the percentage of domains in our survey which
may not correctly interoperate with the locked same-origin
policies.
and the other two had CN/domain name mismatch problems. These
two servers presented certiﬁcates for signin.ebay.com. The
remaining problem domain was the result of an expired certiﬁcate
on one of its servers. When the domain’s administrators updated
their certiﬁcates, they probably overlooked this server.
This means the weak locked SOP would potentially break at
most 0.05% of the SSL domains we found in our survey. These
results are strong evidence that browsers could enforce the weak
locked SOP today and still interoperate with the vast majority of
web sites while providing increased protection against pharming
attacks. Furthermore, since the number of problem domains is rel-
atively small, browser developers can conceivably work with these
domains’ administrators to make their servers consistent. In con-
clusion, we can safely deploy the weak locked SOP in a way which
requires minor browser changes, but does not require changes to
the HTTP speciﬁcation, SSL, or web servers.
Strong locked same-origin policy. To evaluate the deployability
of the strong locked SOP, we counted the number of fully quali-
ﬁed SSL domains with multiple servers that do not use the same
public key on all of the servers. We found 83 such domains, rep-
resenting 0.6% of the total number of SSL domains in our survey.
This is problematic for two reasons. First, it represents an order of
magnitude more servers than that are affected by the weak locked
SOP. Second, unlike before, these servers are not necessarily mis-
conﬁgured, so browser developers cannot work with the domain’s
administrators to “ﬁx” the problem. Using a different key on each
server is good security practice, since it limits the scope of key
compromise. In fact, VeriSign explicitly recommends customers
use different public keys on each server [75].
Another problem concerns certiﬁcate expiration. The business
model of many CAs is to issue certiﬁcates that are valid only for
a relatively modest period of time, e.g., one or two years, and re-
quire customers to renew their certiﬁcates when they expire. When
web sites renew their certiﬁcates they often follow good security
practice and generate a new public key. Since the strong locked
SOP applies to all locked web objects, if a web site uses persistent
SSL-only cookies to authenticate users (see Section 5), every user’s
cookie will simultaneously “expire” (i.e., become inaccessible by
the server) when the site starts using the new public key, regardless
of the value of the cookie’s expires attribute.
Based on this evidence, we conclude browsers cannot currently
enforce the strong locked SOP without potentially breaking a sig-
niﬁcant number of web sites. However, this does not mean that de-
ploying the strong locked SOP is hopeless; it only means a browser
must ﬁrst get the site’s explicit cooperation and approval to enforce
it. In the next section, we describe a simple incrementally deploy-
able solution using policy ﬁles for the strong locked SOP which
supports multiple public keys and key updates.
4.5 Policy ﬁles for supporting multiple keys
and key updates
We propose an incrementally deployable solution where a web
site can opt-in to the strong locked SOP; then, browsers which sup-
port the policy can safely enforce it without the risk of unintention-
ally breaking the site. To opt in, we propose a site’s servers post a
policy ﬁle with a static well-known ﬁle name, say pk.txt, which
would be periodically retrieved by web clients (over SSL), similar
to robots.txt or favicon.ico. If a browser ﬁnds a pk.txt
ﬁle, it parses the ﬁle and starts enforcing the strong locked SOP for
that domain. If all the domain’s servers use the same public key and
persistent objects are not an issue, a site can simply post an empty
pk.txt, since it will already interoperate with the strong locked
SOP.
If the site uses multiple servers, labeled i = 1 . . . n, with dif-
ferent public keys, then pk.txt on server k contains a list of the
form:
(pk1, {pkk}sk1 ), (pk2, {pkk}sk2 ), . . . , (pkn, {pkk}skn )
where pkk is the public key of the server hosting this pk.txt
ﬁle and {pkk}ski represents a signature of pkk by the secret key
corresponding to pki. The browser then veriﬁes each of the sig-
natures, and for i = 1 . . . n, if the ith signature is valid, then it
considers pkk to “speak for” pki. We then extend the strong locked
SOP with the following rule: a browser allows a locked web object
tagged with (D, pkj) to access another locked web object tagged
with (D, pkl) if a policy ﬁle attests that pkj speaks for pkl.
simply list
Note that pk.txt cannot
the public keys
(pk1, pk2, . . . , pkn); otherwise a pharmer can serve the same ﬁle
to a victim, and the victim’s browser will infer that the pharmer’s
public key speaks for each of the keys of the legitimate servers.
However, since the pharmer does not know the legitimate servers’
private keys, it will not be able to generate any valid signatures
required for the victim’s browser to infer the “speaks for” relation.
Policy ﬁles also address the problem of public key updates dis-
cussed in Section 4.4.3. For example, suppose a web site wants
to renew its certiﬁcate with a new public key pknew. Then, sev-
eral months before the certiﬁcate expires, the site can include
(pki, {pknew}ski ) in its pk.txt ﬁles for each server i, i = 1 . . . n.
Then, users that retrieve pk.txt during this transition period will
not “lose” persistent objects tagged with an old public key.
In conclusion, policy ﬁles address the deployability problems
with the strong locked SOP we identiﬁed in Section 4.4.3. They
enable us to enforce the strong locked SOP in current browsers in
a way which is incrementally deployable and backwards compat-
ible with legacy servers. The strong locked SOP in conjunction
with policy ﬁles requires browser changes and server conﬁguration
changes for sites wishing to take advantage of the policy, but does
not require changes to the HTTP speciﬁcation or SSL.
4.6 Support for subdomain object sharing
Up until now we have implicitly assumed a web site consists
of a single fully qualiﬁed domain name, e.g., www.xyz.com.
More generally, a web site might be composed of several domain
names, e.g., mail.xyz.com, www.xyz.com, login.xyz.
com, and the legacy SOP supports some exceptions which en-
able these sites to share information among subdomains through
certain web objects. For example, a user might authenticate her-
self to the server for login.xyz.com, and this server will set
a domain cookie with domain=xyz.com for authenticating the
user to the other subdomain servers. The user’s browser will
allow any subdomain of xyz.com to access this cookie. An-
other way subdomains can share information is by setting the
DOM property document.domain. For example, if a document
from www.xyz.com sets document.domain=xyz.com, the
browser permits any object from a subdomain of xyz.com to ac-
cess the document.
However, these domain sharing mechanisms are vulnerable to
pharming attacks. For example, if an adversary pharms any host
name in xyz.com, she can steal users’ domain cookies for xyz.
com. Ideally, we would like to enforce our locked same-origin poli-
cies in these situations as well. Fortunately, extending the strong
locked SOP to support subdomain sharing is straightforward with
policy ﬁles. The site simply adds the servers’ public keys to its
policy ﬁles and we extend the strong locked SOP with the follow-
ing rule: if S is locked web object hosted by server l and is des-
ignated to be shared among subdomains of a higher-level domain
T D (e.g., xyz.com), a browser allows a locked web object tagged
with (D, pkj) to access S if D is a subdomain of T D and a policy
ﬁle attests that pkj speaks for pkl.
Unfortunately, it is not clear how to extend the weak locked
SOP to support shared domain objects without any server coop-
eration. An natural candidate extension would be to allow access
if both subdomain servers have valid certiﬁcates or invalid cer-
tiﬁcates. However, we must have conﬁdence this policy will not
“break the web” and not deny access to a legitimate server when
the legacy SOP would allow access. Roughly, this would require
for each higher-level domain, either all its subdomain servers have
valid certiﬁcates or all its subdomain servers have invalid certiﬁ-
cates. Unfortunately, our survey survey shows this is far from the
case. Of the 6192 second-level SSL domains we found, over 1000
did not satisfy this property. This means for browsers enforcing
the weak locked SOP, they must default back to the legacy SOP
for shared domain objects, which provides no protection against
pharming.
4.7 Support for key revocation
To address key compromise, our locked same-origin policies and
policy ﬁles can be extended to support expiration times, certiﬁcate
revocation lists (CRLs), and the Online Certiﬁcate Status Protocol
(OCSP), but for space reasons, we do not go into the details here.
4.8 Active objects
We refer to active objects as web objects containing scripts or ex-
ecutable code. Examples of active objects include Javascript ﬁles,
Flash movies, and Java applets. Similar to images and style sheets,
browsers allow web pages to include active objects from other do-
mains. We refer to active objects from domains different from the
enclosing page as cross-domain active objects, and those from the
same domain as the enclosing page as same-domain active objects.
Subtle pharming vulnerabilities can arise even if a web site only
uses same-domain active objects. For example, suppose xyz.com
includes a Javascript ﬁle in its home page:
Javascript ﬁles run directly in the context the page including them.
In the above example, an adversary could use dynamic pharming
against xyz.com to ﬁrst cache a copy of login.js in the vic-
tim’s browser, and then cause the browser to retrieve the legitimate
home page for xyz.com. As the browser renders the page, it will
use the adversary’s cached copy of login.js, enabling the ad-
versary to hijack the user’s session with the legitimate server for
xyz.com [68]. Similar vulnerabilities exist for Flash movies and
Java applets.
Cross-domain active objects are commonly used in web mashups,
such as www.housingmaps.com, but other web sites also use
them. For example, the home page for www.paypal.com in-
cludes the following element:
dependent elements, browsers and web sites can use the counter-
measures in Section 4.8 to protect these objects as well.