77
!
76
!
134 !
131 !
104 !
105 !
74
!
69
!
46
!
34
!
40
!
55
!
ϵ = 0
!
!
!
!
✗
!
✗
!
!
!
✗
!
✗
!
✗
!
!
!
!
!
(2) One benchmark that contains a response-size side channel
from the DARPA STAC project.
(3) A well-known timing side channel in the MessageDigest
(4) Seven other benchmarks with known vulnerabilities col-
class from JDK6.
lected from Github.
Benchmarks that fall in the first two categories contain response-
size side-channel vulnerabilities, and all other benchmarks contain
timing side-channels. All benchmarks except for those in category
(1) also come with a repaired version that does not exhibit the
original vulnerability.
Before running Themis, we need to specify the entry points of
each application. Since most applications come with test cases, we
use these test harnesses as entry points. For those applications for
which we do not have suitable drivers, we manually construct a
harness and specify it as the entry point.
Main results. The table in Figure 9 shows the accuracy and running
time of Themis on these benchmarks. Using a value of ϵ = 64,
Themis successfully finds vulnerabilities in the original vulnerable
versions of these frameworks and is able to verify that the original
vulnerability is no longer present in the repaired versions. The
running time of Themis is also quite reasonable, taking an average
8.81 seconds to analyze each benchmark.
Benefit of taint analysis. Recall from Sections 1 and 5 that Themis
performs taint analysis to identify hot spots, which overapproxi-
mate program fragments that may contain a side-channel vulnera-
bility. The QCHL verifier only analyzes such hot spots rather than
the entire program. To demonstrate the usefulness of taint analysis,
we compare the lines of code (in Soot IR) in the original application
Benchmark
Jetty
Tomcat
OpenMRS
OACC
Apache Shiro
Apache Crypto
bc-java
Category
Server
Server
LOC
2619
12173
10721 Healthcare
78
4043
4505
5759
Authentication
Authentication
Crypto
Crypto
#Reports Time (s)
4
1
1
1
0
0
0
10.17
5.86
9.71
1.83
6.54
4.33
6.89
Figure 10: Evaluation Themis on identifying zero-day vulner-
abilities from popular Java applications
(reported in the LOC column) with the lines of code (also in Soot
IR) with those analyzed by the QCHL verifier (reported in the LOC’
column). As we can see from Figure 9, taint analysis significantly
prunes security-irrelevant parts of the application in terms of lines
of codes. This pruning effect can also be observed using other statis-
tics. For example, the number of reachable methods ranges from 15
to 1487, with an average of 479, before taint analysius, whereas the
number of reachable methods after taint analysis ranges from 6 to
35, with an average of 15, after taint analysis. Thus, pruning using
taint information makes the job of the QCHL verifier significantly
easier.
Benefit of ϵ. To justify the need for our relaxed notion of non-
interference, Figure 9 also shows the results of the same experi-
ment using an ϵ value of 0. Hence, the ϵ = 0 column from Figure 9
corresponds to the standard notion of non-interference. As we can
see from the table, Themis reports several false positives using an
ϵ value of 0. In particular, the repaired versions of some programs
still exhibit a minor resource usage imbalance but this difference is
practically infeasible to exploit, so the developers consider these ver-
sions to be side-channel-free. However, these programs are deemed
unsafe using standard non-interference. We believe this compari-
son shows that our relaxed policy of ϵ-bounded non-interference
is useful in practice and allows security analysts to understand the
severity of the side channel.
Benefit of relational analysis. To investigate the benefit of rela-
tional invariants, we analyze the safe versions of the 20 benchmarks
from Figures 8 and 9 with relational invariant generation disabled.
In this case, Themis can only verify the safety of 10 of the bench-
marks.
Although this number can potentially be increased by using a
more sophisticated non-relational loop invariant generation algo-
rithm, Themis circumvents this need, instead using simple relational
in- variants that are conjunctions of simple equality constraints.
This experiment corroborates the hypothesis that QCHL makes
verification easier by requiring simpler loop invariants compared
to other techniques like self-composition.
6.3 Discovery of Zero-Day Vulnerabilities
To evaluate whether Themis can discover unknown vulnerabili-
ties in real world Java applications, we conduct an experiment on
seven popular Java frameworks. Our data set covers a wide range
of Java applications from different domains such as HTTP servers,
Session D3:  Logical Side ChannelsCCS’17, October 30-November 3, 2017, Dallas, TX, USA8841
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
public boolean check ( Object credentials )
{
if ( credentials instanceof char [])
credentials = new String (( char []) credentials );
if (!( credentials instanceof String ) && !( credentials
instanceof Password ))
LOG . warn (" Can 't check " + credentials . getClass () + "
against CRYPT ");
String passwd = credentials . toString () ;
// FIX : return stringEquals ( _cooked , UnixCrypt . crypt (
passwd , _cooked ));
return _cooked . equals ( UnixCrypt . crypt ( passwd , _cooked ));
}
/* *
*  Utility method that replaces String . equals () to
avoid timing attacks . 
*/
static boolean stringEquals ( String s1 , String s2 )
{
boolean result = true ;
int l1 = s1 . length () ;
int l2 = s2 . length () ;
if ( l1 != l2 ) result = false ;
int n = ( l1  1, and Themis can
verify that the check procedure is now safe.
7 LIMITATIONS
Like any other program analysis tool, Themis has a number of
limitations. First, due to the fundamental undecidability of the un-
derlying static analysis problem, Themis is incomplete and may
report false positives (e.g., due to imprecision in pointer analysis or
loop invariant generation). For example, our method for inferring re-
lational invariants is based on monomial predicate abstraction using
a fixed set of pre-defined templates, and we restrict our templates
to equalities between variables. In addition, our non-relational in-
variant generator is based on traditional abstract interpretation,
which does not distinguish array elements precisely.
Second, dynamic features of the Java language, such as reflective
calls, dynamic class loading, and exceptional handling, pose chal-
lenges for Themis. Our current implementation can handle some
cases of reflection (e.g., reflective calls with string constants), but
reflection can, in general, cause Themis to have false negatives. We
plan to mitigate this issue by integrating the Tamiflex tool [16] for
reasoning about reflection into the Themis tool chain.
Finally, Themis unconditionally trusts all human inputs into the
system, which may result in false negatives if the user inputs are
not accurate. Said user inputs include application entry points, taint
sources, cost instrumentations, and models of library methods.
8 RELATED WORK
In this section, we survey related work from the security and pro-
gram analysis communities and explain how Themis differs from
prior techniques.
Side channel attacks. Side-channel attacks related to resource
usage have been known for decades. Specifically, side channels
have been used to leak private cryptographic keys [3, 19, 46], infer
user accounts [17], steal cellphone and credit card numbers [32],
obtain web browsing history [26], and recover the plaintext of
encrypted TLS traffic [5]. Chen et al. presents a comprehensive
study of side-channel leaks in web applications [22].
Verification for non-interference. As mentioned in Section 3, we
can prove that a program is free of side channel leaks by proving that
it obeys a certain kind of non-interference property. There has been
a significant body of work on proving non-interference. The sim-
plest and most well-known technique for proving non-interference
Session D3:  Logical Side ChannelsCCS’17, October 30-November 3, 2017, Dallas, TX, USA885(and, in general, any 2-safety property) is self-composition [14]. The
general idea underlying self-composition is as follows: Given a pro-
gram P and 2-safety property ϕ, we create a new program P′ which
sequentially composes two α-renamed copies of P and then asserts
that ϕ holds. Effectively, self-composition reduces verification of
2-safety to standard safety. While this self-composition technique
is sound and relatively complete, successfully verifying the new
program often requires the safety checker to come up with intricate
invariants that are difficult to infer automatically [66]. Dufay et al.