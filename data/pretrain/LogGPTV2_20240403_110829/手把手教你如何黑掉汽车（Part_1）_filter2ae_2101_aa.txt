# 手把手教你如何黑掉汽车（Part 1）
##### 译文声明
本文是翻译文章，文章来源：https://console-cowboys.blogspot.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 一、前言
我一直想学习如何黑掉汽车。与往常一样，我在互联网上搜了一圈，并没有找到关于这方面的完整内容，只有零散且重复的只言片语，非常令人沮丧。我并不是一个汽车黑客专家，只是将黑客技术当成我的爱好而已。在本系列文章中，我们面对的是一个模拟实验环境，也就是说只需要5分钟，大家就能跟着教程一步一步走，在不破坏女票汽车的前提下黑掉汽车。毕竟如果女票有辆普锐斯，我们完全没必要去攻击自己的兰博基尼。
本系列教程的主要内容如下，大家可以决定是否需要继续阅读：
1、搭建测试用的虚拟环境。
2、嗅探CAN通信数据。
3、解析CAN通信数据。
4、逆向分析CAN ID。
5、拒绝服务攻击。
6、重放/注入通信流量。
7、使用python编写自己的CAN Socket工具。
8、面向汽车组件的针对性攻击。
9、攻击带有硬件设施的真实汽车。
在学习了解汽车黑客技术之前（比如了解什么是CAN），我们要做的第一件事情就是启动并运行实验环境。我们需要运行一个简单的模拟CAN
Bus网络，该网络可以控制模拟汽车的各种功能。多说不如多做，只是简单地背诵汽车网络术语肯定比不上亲自动手去学习。
我也不希望你们现在就去买一大堆的硬件和千斤顶，其实只需要跟着这个教程学习下去，我们现在就能开始攻击汽车环境。这样我们也能先理解一些概念，不用担心去攻击真实的汽车。
大家可以访问[此链接](https://youtu.be/y4R3RizWN_8?list=PLCwnLq3tOElrdkQy_daR4wr9lJCt8c_C6)观看系列教学视频。
## 二、搭建模拟环境
首先我们安装一个Ubuntu
VMware环境并运行该环境。我们也可以选择使用Kali虚拟机，不过我遇到了复制粘贴问题，并且Kayak安装时也出现了一些错误。所以如果你喜欢的话可以选择使用Kali。虽然如此，我知道Kali可以与OpenGarages虚拟汽车正常配合，因此如果手头刚好有这种环境，那么就可以快速上手。
**安装依赖库**
虚拟环境启动后，我们就需要安装CAN相关工具以及一些依赖库，只需要几条命令apt-get命令即可，如下所示：
    sudo apt-get update
    sudo apt-get install libsdl2-dev libsdl2-image-dev can-utils
然后获取ICSimulator源代码：
    git clone https://github.com/zombieCraig/ICSim.git
**启动模拟器**
下载完毕后，我们可以将目录切换至已下载的代码目录，运行如下两条命令，设置虚拟的CAN接口以及模拟器GUI：
运行setup脚本启动vcan0接口：
    root@kali:~/ICSim# ./setup_vcan.sh 
    root@kali:~/ICSim# ./icsim vcan0
在终端的另一个标签页上，我们可以使用如下命令打开模拟器控制器：
    root@kali:~/ICSim#./controls vcan0
注意：我们在GUI中必须选中控制器，才能向模拟器发送按键命令。
## 三、使用模拟器
模拟器上有速度仪表盘（speedometer）、左右车灯、车门等。当控制面板获得焦点后，我们可以使用如下命令来控制模拟器。大家可以逐个尝试一下，同时注意模拟器的变化。
  * 上下键（Up、Down）控制车速表
  * 左右键（Left、Right）控制车灯
  * 右Shift（Right Shift） + X、A或B打开车门
  * 左Shift（Left Shift） + X、A或B关闭车门
比如，大家可以尝试一下Right Shift +X，你就可以看到车门打开界面。
感谢OpenGarages，现在我们已经有辆自己的汽车，随时可以开始黑掉它。
在前面的命令中，我们使用的是VCan0接口。运行`ifconfig`命令，我们可以看到这个接口的确存在，可以与CAN网络交互。
    ficti0n@ubuntu:~/Desktop/ICSim$ ifconfig vcan0
    vcan0     Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  
              UP RUNNING NOARP  MTU:16  Metric:1
              RX packets:558904 errors:0 dropped:0 overruns:0 frame:0
              TX packets:558904 errors:0 dropped:0 overruns:0 carrier:0
              collisions:0 txqueuelen:1 
              RX bytes:3663935 (3.6 MB)  TX bytes:3663935 (3.6 MB)
汽车网络运行在各种协议上，最主要的还是CAN。你可以将CAN
Bus看成一个老式的网络中心，每个人都能看到其他人的流量。这个类比在某种程度上是正确的，如果某辆车没有连入你已连接的特定总线的话，你将无法看到所有汽车的流量。你可以认为CAN流量与UDP流量类似，因为它也没有保存报文发送状态，但这两者最主要的区别在于部分CAN
Bus网络并没有地址字段，所有数据都基于仲裁ID（Arbitration ID）以及优先级来运行。对我们来说了解这些背景知识已经足够。
了解这些知识后，现在我们来看一下能否通过CanDump工具看到属于我们虚拟汽车的CAN流量（CanDump是前面安装过的CanUtils软件包的一部分组件）。在`vcans0`接口上运行如下命令，我们就能看到一系列流量：
    ficti0n@ubuntu:~/Desktop/ICSim$ candump vcan0
上图中我们可以看到一堆CAN数据帧，如果我们对车辆执行某些操作，可以发现CanDump输出数据也会相应地发生变化。然而这种变化可能转瞬即逝，我们无法看到数据变化是否一一对应某些操作（比如解锁模拟的车门）。汽车在IDLE状态下数据也会一直变化，某个小字段发生改变可能并不足以引起我们的注意，屏幕滚动太快的话我们也无法抓住这个变化。
## 四、捕获并重放CAN操作
为了解决上述问题，一种可选方案就是执行某种操作然后重放流量，如果重放的流量与我们的设备处于同一个总线网络中，那么我们应该能看到同样的操作再次出现。汽车上有各种网络，我们无法保证我们的网络完美契合，比如某个OBD2端口插件并没有连接到我们开门的那个网络，或者车门根本就没连接到网络中（取决于具体车型、车龄以及车的配置情况）。
CanUtil软件包中包含的另一个有用的工具就是CanPlayer，这个工具可以用来重放流量。如果我们尝试捕捉的汽车功能与接入汽车的适配器处于同一总线上，或者使用的是虚拟的CAN接口，我们就可以使用CanDump来将流量保存为一个文件，然后就可以使用CanPlayer在网络上重放流量。比如，我们可以运行CanDump，打开车门，然后使用CanPlayer重放这一操作。