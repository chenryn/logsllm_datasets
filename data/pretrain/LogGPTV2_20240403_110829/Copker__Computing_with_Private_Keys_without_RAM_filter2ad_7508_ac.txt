•
Get the number of encrypted private keys.
Perform a private key operation using a speciﬁed RSA
key, which is identiﬁed by privateKeyId.
Get
privateKeyId in plain text.
the public part of the key pair identiﬁed by
The structure of Copker API is shown in Figure 3. The
sensitive data are completely decoupled from the user-space
processes that use the private keys. Moreover, Copker’s in-
terface used to exchange data is further encapsulated as an
OpenSSL engine [51], making it easy for Copker to be
integrated with existing cryptography applications.
Besides the main Copker’s implementation, we also im-
plemented a preparation utility, which generates the encrypted
private key ﬁle on a secure machine. The preparation utility
works as follows: (1) the user enters a password, the desired
key length, and a unique index of each private key; (2) the
master AES key is derived from the password using the same
algorithm as Copker; (3) the RSA keys are generated using the
OpenSSL library; and (4) the private key blocks are encrypted
by the master key, and stored into a ﬁle, along with the public
parts in plain text.
The prototype is implemented and tested on an Intel Core2
Quad Processor Q8200. As shown in Figure 4, Q8200 contains
two cache-sharing core sets, each of which has two cores.
Each core has a L1D cache of 32 KB and an instruction cache
Application
Application
Application
OpenSSL API
t
l
u
a
f
e
D
e
n
i
g
n
E
r
e
k
p
o
C
e
n
i
g
n
E
r
e
h
t
O
s
e
n
i
g
n
E
User Space
(cid:144)(cid:150)(cid:138)(cid:155)(cid:147)
Kernel Space
k
r
o
w
t
e
N
r
e
k
p
o
C
o
e
d
i
V
(cid:258)
(cid:258)
Fig. 3: Copker API Structure
of 32 KB as well. The two cores of the same set share a
uniﬁed second-level (L2) cache of 2 MB. The L2 cache can
be loaded with both data and instructions. L2 cache is non-
inclusive, meaning that a cache line in the L2 cache may or
may not be in L1 caches. These cache lines on Q8200 compose
two separate cache sets: Core 0 and Core 1 share a cache set,
while Core 2 and Core 3 share another cache set. Two cache
sets are independent.
Front Side Bus
L2 Cache
L2 Cache
L1 Data
Cache
L1 Instr'n 
Cache
L1 Data
Cache
L1 Instr'n 
Cache
L1 Data
Cache
L1 Instr'n 
Cache
L1 Data
Cache
L1 Instr'n 
Cache
Core 0
Core 1
Core 2
Core 3
Separate Cache Set 0
Separate Cache Set 1
Fig. 4: Cache Hierarchy of Q8200 Processor
A. Cache Control in x86 platforms
As we have introduced,
the x86 architecture provides
limited cache control utilities to the OS and applications. The
cache control registers can be used to control the system-
wide cache behaviors. Page-based virtual space caching types
and region-based physical space caching types can be set
individually. It also provides cache control instructions that
can be used to ﬂush all or speciﬁed cache lines of a core. In
addition, there are instructions to pre-fetch data from system
RAM to inner caches. However, none of them could be used
to query the status of a speciﬁc cache line.
The following cache control utilities are relevant to Copker.
•
Control register cr0: bits 29 and 30 of cr0 control
the system-wide cache behavior. In normal setting,
both bits are cleared, and caching is fully enabled.
When bit 29 is cleared and bit 30 is set, the core
enters no-ﬁll mode (see Section III-D).
6
•
•
•
Instruction wbinvd: write back all modiﬁed cache
lines to the RAM and invalidate the caches. It is worth
mentioning that after invalidating the local cache (e.g.
L1D), wbinvd also signals the corresponding shared
cache (e.g. the shared L2) to do the same thing. Note
that, wbinvd works on the cache set that corresponds
to the core – other cache lines outside this cache set
are not affected.
Instruction invd:
it works in the same way as
wbinvd, except that the modiﬁed data is not written
back to the RAM before invalidated. Data in the
caches are abandoned.
Instruction clflush:
takes a virtual memory
address as operand and invalidates the cache line
containing that address. If the cache line contains
modiﬁed data, the data are ﬂushed to the RAM before
the cache line is invalidated.
it
B. Implementation Details
Execution Environment Deﬁnition. CACHE_CRYPTO_ENV
contains all variables that Copker accesses during the private
key operations. This structure is deﬁned in a static manner as
shown below:
struct CACHE_CRYPTO_ENV {
unsigned char masterKey[128/8];
AES_CONTEXT aes;
RSA_CONTEXT rsa;
unsigned char cacheStack[CACHE_STACK_SIZE];
unsigned long privateKeyId;
unsigned char in[KEY_LENGTH_IN_BYTES];
unsigned char out[KEY_LENGTH_IN_BYTES];
} cacheCryptoEnv;
CACHE_STACK_SIZE is 6,400. In the experiments us-
the deepest stack that has been used
ing 2048-bit RSA,
was 5,584 bytes, which means
the allocated space is
sufﬁcient.KEY_LENGTH_IN_BYTES is 256, since the in-
put/output of RSA private key operation must be smaller than
the modulus, which is 256 bytes for a 2048-bit RSA. The entire
structure occupies 10,292 bytes. To support stronger RSA (i.e.,
longer keys), more space needs to be allocated. For example,
3072-bit RSA requires 8,028 bytes of cacheStack according
to our experiments, and the total size of the structure is at least
13,584 bytes.
The size of cacheCryptoEnv is much smaller than the
size of L1D caches in modern CPUs, which is typically 32K
Bytes. Note that cacheCryptoEnv is statically allocated in
kernel, hence, it is contiguous in both logical and physical
memories. 10,292 contiguous bytes are guaranteed to ﬁt in the
8-way set-associative L1D. This is also conﬁrmed by our ex-
periments. In developing the prototype, we have implemented
and tested the maximum key length of 4096-bit. Theoretically,
we estimate that 7896-bit RSA can be supported if the entire
L1D (32 KB) is used.
Stack Switch. In the x86 architecture, register esp points to
the current stack top, and ebp points to the base of the current
function’s stack frame. The stack operation instructions, e.g.,
pushl and popl, implicitly use the base address from the
stack segment register (ss), plus the operand, to construct a
linear address. The current Linux kernel implements ﬂat mode
memory, which means that the data and stack segments start
from the same virtual address. We can utilize memory area in
the data segment as if it was in the stack segment.
switch_stack(void *para, void *function,
unsigned char *stackBottom) is written in assembly
codes to enable stack switching. It ﬁrst switches from the
OS assigned stack to a customized stack with the bottom
pointed by stackBottom. Then it calls function with
the parameters pointed by para. The code is listed below.
Listing 1: switch stack() in assembly codes
pushl %ebp
movl
%esp,%ebp
16(%ebp),%eax
movl
// eax now points to new stack bottom
movl
// save system ebp on the new stack
movl
// save system esp on the new stack
%ebp,(%eax)
%ebp,-4(%eax)
movl
// ebx now points to old ebp
%ebp,%ebx
movl
movl
subl
// new stack frame created
%eax,%ebp
%eax,%esp
$4,%esp
pushl 8(%ebx)
// parameters for function
call
// call function
12(%ebx)
%ebp,%ebx
(%ebx),%ebp
-4(%ebx),%esp
movl
movl
movl
// now back on the system stack
leave
ret
RSA Implementation. Copker’s RSA implementation is based
on PolarSSL [52], a lightweight and highly modularized cryp-
tographic library. We modiﬁed PolarSSL v1.2.5 to eliminate
the use of heap memory in its long integer module. Speciﬁ-
cally, each long integer is statically allocated 268 bytes, which
is the minimum space required to perform a 2048-bit RSA
private key operation. In each long integer, 256 bytes are used
to store the basic 2048-bit value, and additional 12 bytes are
used to carry other auxiliary information. Some of the long
integer manipulating functions are modiﬁed accordingly. To
speed up RSA decryption/signing, PolarSSL implements CRT,
sliding windows, and Montgomery multiplication. We change
the default value for sliding windows from 6 to 1, to reduce
the memory allocation size on the stack with little sacriﬁce of
efﬁciency.
Filling the L1D Cache. In its active mode, Copker ensures
that cacheCryptoEnv is in the L1D cache of the local core.
In an x86 CPU, when an instruction writes data to a memory
location that has a write-back memory type, the core checks
whether the cache line containing this memory location is in
its L1D cache. If not, the core ﬁrst fetches it from higher
7
levels of the memory hierarchy (L2 or RAM) [26] . Taking
advantage of this feature, we put cacheCryptoEnv to the
L1D cache of the core by reading and writing back one byte
of each cache line in cacheCryptoEnv. This feature only
applies to write-back memory type. Therefore, before doing
this, we must ensure that cacheCryptoEnv has the cache-
ﬁll mode of write-back. At the same time, other cores in the
same separate cache-sharing core set are conﬁgured to no-ﬁll
mode, to avoid evicting cacheCryptoEnv out of caches.
Atomicity. First,
task scheduling is disabled by calling
preempt_disable(), which disables kernel preemption.
By calling local_irq_save(), maskable hardware inter-
rupts are disabled as well, so that
they will not suspend
Copker’s execution, which might be exploited (by adversaries)
to ﬂush the sensitive information to RAM. Non-maskable
interrupts (NMIs) are discussed in Section VI-A. When exiting
the atomic section, the two operations are reversed.
Copker with SMP Support. Then there are multiple Copker
threads running simultaneously, it is natural that each core is in
its own atomic section, and is assigned a cacheCryptoEnv.
However, cache lines occupied by Copker might be evicted
by other cores sharing the same L2 cache, especially when
that core is running a memory-intensive task. The result is
fatal to Copker: the evicted cache lines, possibly containing
sensitive data, are ﬂushed to RAM. To prevent this, only one
core in a separate cache set is allowed to execute Copker with
write-back cache mode, while all other cores in the set are
forced to enter no-ﬁll mode when Copker is running. In the
implementation, we deﬁne an array of CACHE_CRYPTO_ENV,
each of which is assigned to a separate cache set. This
implies that the maximum number of threads running Copker
concurrently is restricted by the number of separate cache
sets3. For Q8200, Copker can run 2 threads concurrently.
Algorithm 2 demonstrates the main logic of Copker with