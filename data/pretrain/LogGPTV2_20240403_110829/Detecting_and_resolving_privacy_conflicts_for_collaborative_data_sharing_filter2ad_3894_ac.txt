where, function accessors(i) returns all accessors in a segment
i, and operator ⊗ is used to represent any arbitrary combination
functions. For simplicity, we utilize the product operator.
In order to measure the overall privacy risk of a conﬂicting seg-
ment i, denoted as PR(i), we can use following equation to aggre-
gate the privacy risks of i due to different untrusting controllers.
Note that we can also use any combination function to combine the
per-controller privacy risk. For simplicity, we employ the summa-
tion operator here.
∑
∑
P R(i) =
=
j2controllersut(i)
j2controllersut(i)
(P R(i; j))
(pcj × slj ×
∑
k2accessors(i)
(1 − tlk))
(2)
Measuring Sharing Loss: When the decision of privacy conﬂict
resolution for a conﬂicting segment is “deny”, it may cause losses
in potential data sharing, since there are controllers expecting to
allow the accessors in the conﬂicting segment to access the data
item. Similar to the measurement of the privacy risk, ﬁve factors
are adopted to measure the sharing loss for a conﬂicting segment.
Compared with the factors used for quantifying the privacy risk, the
only difference is that we will utilize a factor, number of trusting
controllers, to replace the factor, number of privacy conﬂicts (un-
trusting controllers), for evaluating the sharing loss of a conﬂicting
segment. The overall sharing loss SL(i) of a conﬂicting segment i
is computed as follows:
∑
∑
SL(i) =
j2controllerst(i)
((1−pcj×slj)×
tlk) (3)
k2accessors(i)
2GetController() is a function that returns all controllers whose
accessor spaces contain a speciﬁc accessor.
where, function controllerst(i) returns all trusting controllers of
a segment i.
(a) Collaborative Control Overview
(b) Operational Components in Retinue Application
Figure 3: System Architecture of Retinue.
∪
AL = (
i2CSp
∑
∑
Privacy Conﬂict Resolution on the Tradeoff between Privacy Pro-
tection and Data Sharing: The tradeoff between privacy and util-
ity in data publishing has been recently studied [8, 19]. Inspired by
those work, we introduce a mechanism to balance privacy protec-
tion and data sharing for an effective privacy conﬂict resolution in
OSNs.
An optimal solution for privacy conﬂict resolution should cause
a little more privacy risk when allowing the accessors in some con-
ﬂicting segments to access the data item, and gets lesser loss in
data sharing when denying the accessors to access the shared data
item. Thus, for each conﬂict resolution solution s, a resolving score
RS(s) can be calculated using the following equation:
RS(s) =
(cid:11)
1
i12CSs
p
P R(i1) + (cid:12)
i22CSs
d
SL(i2)
(4)
p and CSs
d denote permitted conﬂicting segments and
where, CSs
denied conﬂicting segments respectively in the conﬂict resolution
solution s. And (cid:11) and (cid:12) are preference weights for the privacy risk
and the sharing loss, 0 ≤ (cid:11); (cid:12) ≤ 1 and (cid:11) + (cid:12) = 1.
Then, the optimal conﬂict resolution CRopt on the tradeoff be-
tween privacy risk and sharing loss can be identiﬁed by ﬁnding the
maximum resolving score:
CRopt = max
s
RS(s)
(5)
To ﬁnd the maximum resolving score, we can ﬁrst calculate the
privacy risk (P R(i)) and the sharing loss (SL(i)) for each con-
ﬂict segment (i), individually. Finally, following equation can be
utilized to make the decisions (permitting or denying conﬂicting
segments) for privacy conﬂict resolution, guaranteeing to always
ﬁnd an optimal solution.
Decision =
Permit
Deny
if (cid:11)SL(i) ≥ (cid:12)P R(i)
if (cid:11)SL(i) < (cid:12)P R(i)
(6)
{
3.2.3 Generating Conﬂict-Resolved Policy
Once the privacy conﬂicts are resolved, we can aggregate acces-
sors in permitted conﬂicting segments CSp and accessors in the
non-conﬂicting segment ps (in which accessors should be always
allowed to access the shared data item) together to generate a new
accessor list (AL) as follows:
Accessors(i)) ∪ Accessors(ps)
(7)
Using the example shown in Figure 2, we assume that cs1 and
cs3 become permitted conﬂicting segments after resolving the pri-
vacy conﬂicts. Therefore, the aggregated accessor list can be de-
rived as AL = Accessors(cs1)∪Accessors(cs3)∪Accessors(ps).
Finally, the aggregated accessor list is used to construct a conﬂict-
resolved privacy policy for the shared data item. The generated
policy will be leveraged to evaluate all access requests toward the
data item.
IMPLEMENTATION AND EVALUATION
4.
4.1 Prototype Implementation
We implemented a proof-of-concept Facebook application for
the collaborative management of shared data called Retinue
(http://apps.facebook.com/retinue_tool). Our prototype application
enables multiple associated users to specify their privacy concerns
to co-control a shared data item. Retinue is designed as a third-
party Facebook application which is hosted in an Apache Tomcat
application server supporting PHP and MySQL databases, with a
user interface built using jQuery and jQuery UI and built on an
AJAX-based interaction model. Retinue application is based on
the iFrame external application approach. Using the Javascript and
PHP SDK, it accesses users’ Facebook data through the Graph API
and Facebook Query Language. It is worth noting that our current
implementation was restricted to handle photo sharing in OSNs.
Obversely, our approach can be generalized to deal with other kinds
of data sharing (e.g. videos and comments) in OSNs as long as the
stakeholder of shared data are identiﬁed with effective methods like
tagging or searching.
Figure 3 shows the system architecture of Retinue. The overview
of collaborative control process is depicted in Figure 3(a), where
the owner can regulate the access of the shared data. In addition,
other controllers, such as the contributor, stakeholders and dissem-
inators, can specify their privacy concerns over the shared data as
well. To effectively resolve privacy conﬂicts caused by different
privacy concerns of multiple controllers, the data owner can also
adjust the preference weights for the privacy risk and the sharing
Privacy/SharingWeightPrivacy PolicyPrivacy PolicyPrivacy PolicyPrivacy PolicyPrivacy PolicyPrivacy Policy(a) Main Interface.
(b) Controllers’ Interfaces.
Figure 4: Retinue Interfaces.
loss to make an appropriate privacy-sharing tradeoff. Figure 3(b)
shows the core components in Retinue application and their inter-
actions. The Retinue application is hosted on an external website,
but is accessed on a Facebook application frame via an iFrame. The
Facebook server handles login and authentication for the applica-
tion, and other user data is imported on the user’s ﬁrst login. At
this point, users are asked to specify their initial privacy settings
and concerns for each type of photo. All photos are then imported
and saved using these initial privacy settings. Users’ networks and
friend lists are imported from Facebook server as well. Once in-
formation is imported, a user accesses Retinue through the applica-
tion page on Facebook, where s/he can query access information,
complete privacy setting for photos in which s/he is a controller,
and view photos s/he is allowed to access. The component for pri-
vacy conﬂict management in Retinue application is responsible for
the privacy conﬂict detection and resolution, and the generation of
conﬂict-resolved privacy policy, which is then used to evaluate ac-
cess requests for the shared data.
A snapshot of the main interface of Retinue is shown in Fig-
ure 4 (a). All photos are loaded into a gallery-style interface. To
access photos, a user clicks the “Access” tab and then s/he can view
her/his friends’ photos that s/he was authorized. To control photo
sharing, a user clicks the “Owned”, “Tagged”, “Contributed”, or
“Disseminated” tabs, then selects any photo in the gallery to de-
ﬁne her/his privacy preferences for that photo. The controllers’
interfaces are depicted in Figure 4 (b). A controller can select the
trusted groups of accessors and assign corresponding trust levels,
as well as choose the sensitivity level for the photo. Also, the pri-
vacy risk and sharing loss for the controller with respect with the
photo are displayed in the interface. In addition, the controller can
immediately see how many friends can or cannot access the photo
in the interface. If the controller clicks the buttons, which show
the numbers of accessible or unaccessible friends, a window ap-
pears showing the details of all friends who can or cannot view
the photo. The purpose of such feedback information is not only to
give a controller the information of how many friends can or cannot
access the photo, but as a way to react to results. If the controller is
not satisﬁed with the current situation of privacy control, s/he may
adjust her/his privacy settings, contact the owner of the photo to ask
her/him to change the weights for the privacy risk and the sharing
loss, or even report a privacy violation to request OSN administra-
tors to delete the photo. If the user is the owner of the photo, s/he
can also view the overall privacy risk and sharing loss for the shared
photo, and has the ability to adjust the weights to balance privacy
protection and data sharing of the shared photo.
4.2 Evaluation and Experiments
4.2.1 Evaluation of Privacy Conﬂict Resolution
We evaluate our approach for privacy conﬂict resolution by com-
paring our solution with the naive solution and the privacy control
solution used by existing OSNs, such as Facebook (simply called
Facebook solution in the rest of this paper) with respect to two met-
rics, privacy risk and sharing loss. Consider the example demon-
strated in Figure 2, where three controllers desire to regulate access
of a shared data item. The naive solution is that only the accessors
in the non-conﬂicting segment are allowed to access the data item
as shown in Figure 5(a). Thus, the privacy risk is always equal
to 0 for this solution. However, the sharing loss is the absolute
maximum, as all conﬂicting segments, which may be allowed by
at least one controller, are always denied. The Facebook solution
is that the owner’s decision has the highest priority. All accessors
within the segments covered by the owner’s space are allowed to
access the data item, but all other accessors are denied as illus-
trated in Figure 5(b). This is, obviously, ideal for the owner, since
her/his privacy risk and sharing loss are both equal to 0. However,
the privacy risk and the sharing loss are large for every non-owner
controller.
(a) Naive Solution.
(b) Facebook Solution.
(c) Our Solution.
Figure 5: Example of Resolving Privacy Conﬂicts.
(a) Privacy Risk.
(b) Sharing Loss.
(c) Resolving Score.
Figure 6: Conﬂict Resolution Evaluation.
For our solution, each conﬂicting segment is evaluated individ-
ually. Using the same example given in Figure 2, suppose cs1 and
cs3 become permitted conﬂicting segments after resolving the pri-
vacy conﬂicts. Figure 5(c) demonstrates the result of our privacy
conﬂict resolution. Our solution make a tradeoff between privacy
protection and data sharing by maximizing the resolving score,
which is a combination of privacy risk and sharing loss. The worst
case of our solution is the same as the naive solution–only mutually
permitted accessors are allowed to access the data item. However,
this case only occurs when strong privacy concerns are indicated
by each controller. On the other hand, if all accessors have pretty
weak privacy concerns, all accessors in conﬂicting segments may
be allowed to access the data, which is not possible with either of
other two solutions. Such a case leads to a sharing loss of 0, but
does not have an signiﬁcantly increased privacy risk against other
two solutions.
To quantitatively evaluate our solution, our experiment used cases
where there are three controllers of shared data items and assume
that each controller has indicated to allow her/his friends to view
the data item. We also utilized the average number of user friends,
130, which is claimed by Facebook statistics [3]. Additionally, we
assume all controllers share 30 friends with each other, 10 of which
are shared among everyone (common users). All settings including
privacy concerns, sensitivity levels, and trust levels were random-
ized for each case, and the privacy risk, sharing loss, and resolving
score for each case were calculated. To represent the data sensibly,
we sorted the samples from lowest resolving score to highest un-
der our evaluation. Figure 6 shows our experimental results with
respect to randomly generated 30 user cases.
In Figure 6(a), we can observe that the privacy risks for the naive
solution are always equal to 0, since no untrusted accessors are al-
lowed to view the data item. The privacy risks for Facebook so-
lution and our solution wavered. Obviously, this depends greatly
on the settings of the non-owner controllers. If these controllers
are apathetic toward the shared data item, Facebook solution will
be preferable. However, it should be noted that Facebook solution
had very high extrema. This is avoided in our solution where high
privacy risks will usually result in denying access.
Unsurprisingly, the sharing loss for the naive solution was al-
ways the highest, and often higher than both other two solutions as
shown in Figure 6(b). Our solution usually had the lowest sharing
loss, and sometimes is equivalent to the naive or Facebook solu-
tion, but rarely greater than. One may notice that the sharing loss
is very low compared to the privacy risks in our experience. This
is an inherent effect of our solution itself–if sharing loss is very
high, users will be granted access to the data item, changing this
segment’s sharing loss to zero.
As we can notice from Figure 6(c), the resolving score for our
solution is always as good as or better than the naive or Facebook
solution. In our sample data, it was usually signiﬁcantly better, and