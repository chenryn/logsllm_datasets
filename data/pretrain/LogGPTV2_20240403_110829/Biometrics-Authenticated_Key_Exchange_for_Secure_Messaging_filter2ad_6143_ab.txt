𝜆) is negligible.
𝜆
(1) On input a security parameter 1
, A outputs an appropriate
threshold 𝜏 such that it satisfies the privacy and robustness
properties for the secret key, and sends 𝜏 to C.
(2) C executes Setup(1
𝜆, 𝜏) → 𝑝𝑎𝑟 , PubGen(𝑝𝑎𝑟, 𝑠𝑘) → 𝑝𝑘, and
sends 𝑝𝑘 to A.
, 𝑝𝑎𝑟 , and oracle access to Enc(·).
𝜆
(3) A is given input 1
(4) C generates a new secret key 𝑠𝑘 (cid:4) such that 𝑑𝑖𝑠 (𝑠𝑘, 𝑠𝑘 (cid:4)) < 𝜏. Fur-
ther, C sends the encapsulated message 𝑐 ← AFEM.Enc(𝑝𝑘, 𝑏)
for 𝑏 ← {0, 1} to A.
(5) A outputs a guess 𝑏 (cid:4) ∈ {0, 1}. The advantage of the adversary
is denoted as |Pr[𝑏 = 𝑏 (cid:4)] − 1/2|.
3.2 Construction for Biometric Vector
We propose the first AFEM construction for secret keys in the form
of biometric vectors, which means that the biometric characteristics
of a participant can be converted into a string. Assuming the secret
𝑚
key is 𝑠𝑘 = u ∈ F
𝑞 , where 𝑞 is a prime and F𝑞 is a finite field, and
the closeness is defined by Hamming distance, we give the technical
description and construction as follows.
3.2.1 Generating Public Key. The key idea is to exploit the Learning
With Errors (LWE) problem to securely encode a traditional secret
key into a vector with the help of a biometric vector. Specifically, a
𝑚×𝑙
𝑙
𝑞 is encoded by e = Ax + u, where A ∈ F
random vector x ∈ F
is
𝑞
a random matrix and u is the biometric vector. Then, x is mapped
to Z𝑞 through a hash function 𝐻 : {0, 1}∗ → Z𝑞, which allows us
Session 10B: Crypto and Protocol Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2620Algorithm 1: Decoding algorithm Decode𝜏
1 Input A, b
2 Randomly select rows without replacement
𝑗1, . . . , 𝑗
2𝑙 ← [1, 𝑚]
3 Restrict A, b to rows 𝑗1, . . . , 𝑗
2𝑙 and denote as A
𝑗1,...,𝑗2𝑙 ,
𝑗1,...,𝑗2𝑙
b
4 if there exist 𝑙 linearly independent rows of A
5
𝑗1,...,𝑗2𝑙
(cid:4) = A
Let A
Compute x
𝑗1,...,𝑗2𝑙 , b
(cid:4) = A
(cid:4)−1b
(cid:4) = b
(cid:4)
6
𝑗1,...,𝑗2𝑙 then
7 else
Abort
8
(cid:4)
9 if b − Ax
10
11 Output x
(cid:4)
Go to step 2
has more than 𝜏 nonzero coordinates then
to adopt an ElGamal-like encryption. Therefore, the public key is
(A, e, 𝑦 = 𝑔𝐻 (x) ), where 𝑔 is a generator of a group.
3.2.2 Encapsulating Message. To encapsulate a message 𝑠, we en-
crypt it with an ElGamal-like encryption. Specifically, for the public
key 𝑦, a random value 𝑟 ∈ Z𝑞 is selected. Then, the encrypted
message is (𝑔𝑟 , 𝑦𝑟 ⊕ 𝑠).
3.2.3 Decapsulating with Implicit Authentication. To decapsulate
the encapsulated message, we need to recover the traditional se-
cret key. Due to the difficulty of the LWE problem, the key can
be recovered only if the two biometric vectors are similar, which
realizes implicit authentication. Specifically, we employ a decoding
algorithm Decode𝜏 as shown in Algorithm 1, which can decode a
random linear code with at most 𝜏 errors [24].
𝑚
3.2.4 Putting it All Together. Let 𝑠𝑘, 𝑠𝑘 (cid:4) ∈ F
𝑞 and 𝑠 ∈ G. The
AFEM construction for the biometric vector is as follows.
– Setup(1
𝜆, 𝜏). Output 𝑝𝑎𝑟 = (𝜆, G, 𝑞, 𝑔, 𝜏, 𝑚, 𝑙, 𝐻 ) where G is a
cyclic group of prime order 𝑞, 𝑔 is a generator of G, 𝑚 ≥ 3𝑙 ∈ N,
and 𝐻 : {0, 1}∗ → Z𝑞 is a hash function.
𝑚×𝑙
– PubGen(𝑠𝑘). Parse 𝑠𝑘 as u. Choose a random matrix A ∈ F
𝑞
𝑞. Compute e = Ax + u and 𝑦 = 𝑔𝐻 (x)
𝑙
and a random vector x ∈ F
and output 𝑝𝑘 = (A, e, 𝑦).
– Enc(𝑝𝑘, 𝑠). Parse 𝑝𝑘 as (A, e, 𝑦). Choose a random 𝑟 ∈ Z𝑞. Com-
pute 𝑐0 = 𝑔𝑟
and 𝑐1 = 𝑦𝑟 ⊕ 𝑠 and output 𝑐 = (A, e, 𝑐0, 𝑐1).
– Dec(𝑠𝑘 (cid:4), 𝑐). Parse 𝑠𝑘 (cid:4) as u
(cid:4) =
(cid:4)). Output ⊥ if the decoding algorithm is aborted
(cid:4) and 𝑐 as (A, e, 𝑐0, 𝑐1). Compute x
Decode𝜏 (A, e−u
and otherwise 𝑠 = 𝑐1 ⊕ 𝑐𝐻 (x(cid:4))
Since the correctness is clear, below, we sketch the security.
Theorem 3.2. The AFEM scheme is semantic secure guaranteed
by the decisional-LWE assumption and DDH assumption under the
random oracle model.
0
.
Our goal is to show that any PPT adversary A can only break
the semantic security with negligible advantage. Next, we show the
security via the following hybrids.
Hy.0. This is the real game with any PPT adversary A and a
challenger C. The game outputs 1 if 𝑏 (cid:4) = 𝑏 and 0 otherwise. We
define the advantage Adv
(𝜆) = 𝑃𝑟 [𝑏 = 𝑏 (cid:4)].
Hy.1. Hy.1 is identical to Hy.0 except that we use e
(cid:4) from the
uniform distribution to replace the second element e = Ax + u in
Hy0
A
Hy1
A
Hy0
A
(𝜆) ≤ Adv
(cid:4) is com-
𝑝𝑘. Under the decisional-LWE assumption, the uniform e
putationally indistinguishable from e = Ax + u with computational
distance 𝑛𝑒𝑔𝑙 (𝜆). Thus, we have Adv
(𝜆) +𝑛𝑒𝑔𝑙 (𝜆).
Hy.2. Hy.2 is identical to Hy.1 except that we use ℎ from the
uniform to replace 𝐻 (x), and the random oracle guarantees no
PPT adversary can distinguish 𝐻 (x) from the uniform. Further, the
discrete-logarithm assumption guarantees no one has the ability to
obtain x given 𝑦 and 𝑔, which implies that no PPT adversary can
tell the diffidence between 𝑦 = 𝑔𝐻 (x) and 𝑦 (cid:4) = 𝑔ℎ
. Thus, we have
Adv
Hy1
A
Hy.3. Hy.3 is identical to Hy.2 except that we use 𝑧 from the
uniform to calculate 𝑐 (cid:4)
. Under the decisional Diffie-Hellman
1
(DDH) assumption, 𝑐 (cid:4)
1 is computationally indistinguishable from 𝑐1
(𝜆) ≤
with computational distance 𝑛𝑒𝑔𝑙 (𝜆), thus, we have Adv
(𝜆) + 𝑛𝑒𝑔𝑙 (𝜆).
(𝜆) ≤ Adv
= 𝑠 ⊕𝑔𝑧
Hy2
A
Hy2
A
Hy3
A
(𝜆) + 𝑛𝑒𝑔𝑙 (𝜆). In Hy.3, all the elements of both the public
Adv
key and the ciphertext are uniformly random and independent of
Hy3
the message. Hence, Adv
A
Hy0
(𝜆) ≤ 1/2+𝑛𝑒𝑔𝑙 (𝜆). Therefore, the adver-
A
sary A can break the semantic security with negligible advantage.
This completes the sketched proof.
Finally, we have Adv
(𝜆) = 1/2.
3.3 Construction for Biometric Vector Set
We propose the second AFEM construction for secret keys in the
form of biometric vector sets, which means that the biometric
characteristics of a participant can be converted into a set of strings.
Assuming the secret key is 𝑠𝑘 = {u1, . . . , u𝑛 } where u𝑗 ∈ {0, 1}∗
for 𝑗 ∈ [1, 𝑛] and the closeness is defined by set difference, we give
the technical description and construction as follows.
3.3.1 Generating Public Key. Different from biometric vector, bio-
metric vector set usually consists of many relatively short vectors
(but each vector still has enough entropy) that are not suitable for
LWE-based constructions. Fortunately, we can obtain many of the
same biometric vectors in two captures due to the relatively short
length. Then, these biometric vectors can be treated as traditional
secret keys as in Section 3.2. Specifically, for u𝑗 ∈ 𝑠𝑘 (𝑗 ∈ [1, 𝑛]),
the corresponding partial public key is 𝑦 𝑗 = 𝑔𝐻 (u𝑗 ) , where 𝑔 is
a generator of a group and 𝐻 : {0, 1}∗ → Z𝑞 is a hash function.
Considering the relatively short length, we can further require 𝐻
to be a computationally expensive hash function.
3.3.2 Encapsulating Message. To encapsulate a message 𝑠, we also
employ an ElGamal-like encryption as in Section 3.2. Instead of en-
crypting 𝑠 with each partial public key, we first divide 𝑠 into 𝑛 shares
with a (𝑡, 𝑛) Verifiable Secret Sharing (VSS) scheme [23] and then
encrypt each share with one partial public key. To further protect
the encrypted shares, we transform them into a set of points and ob-
tain a polynomial through interpolation. Specifically, we employ the
VSS scheme proposed by Paul Feldman whose share generation algo-
rithm is VSS.ShareGen(𝑠, 𝑡, 𝑛) → ({𝑠1, . . . , 𝑠𝑛 }, {𝑐𝑜𝑚0, . . . , 𝑐𝑜𝑚𝑡 −1}).
A random value 𝑟 ∈ Z𝑞 is selected for encrypting each share as
(𝑔𝑟 , 𝛽 𝑗 = 𝑦𝑟
𝑗 ⊕ 𝑠 𝑗 ) (𝑗 ∈ [1, 𝑛]). Then, another random value 𝑟 (cid:4) ∈ Z𝑞
is selected and each 𝛽 𝑗 is transformed into a point (𝛼 𝑗 = 𝑦𝑟 (cid:4)
𝑗 , 𝛽 𝑗 ). Fi-
nally, we interpolate the unique polynomial 𝑝𝑜𝑙𝑦 of degree 𝑛−1 over
the points {(𝛼1, 𝛽1), . . . , (𝛼𝑛, 𝛽𝑛)} that consists of 𝑛 coefficients.
Session 10B: Crypto and Protocol Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2621P0
P1
Init Phase
Run AFEM.Setup(𝜆, 𝑡 ) → 𝑝𝑎𝑟
Set
𝑝𝑝 = 𝑝𝑎𝑟
Generate
Run AFEM.PubGen(𝑠𝑘0) → 𝑝𝑘0
𝑠𝑘0 ∈ SK
$← S
𝑠0
Choose
Run AFEM.Enc(𝑝𝑘1, 𝑠0) → 𝑐0
𝑠𝑘 (cid:4)
0
∈ SK
Generate
Run AFEM.Dec(𝑠𝑘 (cid:4)
0
Output 𝑘0 = 𝐻 (𝑝𝑘0 ||𝑝𝑘1 ||𝑐0 ||𝑐1 ||𝑠0 ||𝑠 (cid:4)
1
, 𝑐1) → 𝑠 (cid:4)
1
KeyGen Phase
𝑝𝑘0
𝑝𝑘1
AKE Phase
𝑐0
𝑐1
-
-


)
Generate
Run AFEM.PubGen(𝑠𝑘1) → 𝑝𝑘1
𝑠𝑘1 ∈ SK
$← S
𝑠1
Choose
Run AFEM.Enc(𝑝𝑘0, 𝑠1) → 𝑐1
𝑠𝑘 (cid:4)
1
∈ SK
Generate
Run AFEM.Dec(𝑠𝑘 (cid:4)
1
Output 𝑘1 = 𝐻 (𝑝𝑘0 ||𝑝𝑘1 ||𝑐0 ||𝑐1 ||𝑠 (cid:4)
0
, 𝑐0) → 𝑠 (cid:4)
0
||𝑠1)
Figure 2: Detail of our BAKE framework.
3.3.3 Decapsulating with Implicit Authentication. Generally, a (𝑡, 𝑛)
VSS scheme has the property that any 𝑡 or more than 𝑡 shares can
recover 𝑠 while any less than 𝑡 shares reveal no information about
𝑠, and check whether the shares can be used to reconstruct the mes-
sage. Therefore, the authentication is guaranteed implicitly. Specifi-
cally, 𝑛 encrypted shares are obtained from the polynomial 𝑝𝑜𝑙𝑦 and
are decrypted as in Section 3.2. Then, each share can be verified by
running the verification algorithm VSS.Verify({𝑐𝑜𝑚0, . . . , 𝑐𝑜𝑚𝑡 −1},
𝑠 𝑗 ), where the output 1 means that 𝑠 𝑗 is valid. If the number of valid
shares is not less than the threshold 𝑡, all valid shares could be recov-
ered as the original message 𝑠 by running the share reconstruction
algorithm VSS.ShareRecon.
3.3.4 Putting it All Together. Let 𝑠𝑘 = {u1, . . . , u𝑛 }, 𝑠𝑘 (cid:4) = {u
(cid:4)
, . . . ,
1
(cid:4)
𝑛 }, and 𝑠 ∈ G. The AFEM construction for the biometric vector
u
set is as follows.
– Setup(1
𝜆, 𝜏). Output 𝑝𝑎𝑟 = (𝜆, G, 𝑞, 𝑔, 𝜏, 𝑛, 𝐻 ) where G is a cyclic
group of prime order 𝑞, 𝑔 is a generator of G, and 𝐻 : {0, 1}∗ →
Z𝑞 is a hash function.
– PubGen(𝑠𝑘). Parse 𝑠𝑘 as {u1, . . . , u𝑛 }. Compute 𝑦 𝑗 = 𝑔𝐻 (u𝑗 ) for
𝑗 ∈ [1, 𝑛] and output 𝑝𝑘 = {𝑦1, . . . , 𝑦𝑛 }.
(cid:4)
(cid:4)
1
(cid:2)
– Enc(𝑝𝑘, 𝑠). Parse 𝑝𝑘 as {𝑦1, . . . , 𝑦𝑛 }. Run VSS.ShareGen(𝑠, 𝑛 −
𝜏, 𝑛) → ({𝑠1, . . . , 𝑠𝑛 }, {𝑐𝑜𝑚0, . . . , 𝑐𝑜𝑚𝑛−𝜏 −1}). Interpolate a poly-
nomial 𝑝𝑜𝑙𝑦 on the point set {(𝑦𝑟 (cid:4)
𝑛, 𝑦𝑟
𝑛 ⊕𝑠𝑛)} where
1
𝑟 (cid:4), 𝑟 $← Z𝑞, and output 𝑐 = (𝑝𝑜𝑙𝑦, 𝑔𝑟 (cid:4), 𝑔𝑟, {𝑐𝑜𝑚0,. . ., 𝑐𝑜𝑚𝑛−𝜏 −1}).
(cid:3)
– Dec(𝑠𝑘 (cid:4), 𝑐). Parse 𝑠𝑘 (cid:4) as {u
⊕𝑠1),. . . , (𝑦𝑟 (cid:4)
, 𝑦𝑟
1
)𝐻 (u(cid:4)
𝑗 )
. . . , 𝑐𝑜𝑚𝑛−𝜏 −1}). Compute 𝑠 (cid:4)
and run VSS.Verify({𝑐𝑜𝑚0, . . . , 𝑐𝑜𝑚𝑛−𝜏 −1}, 𝑠 (cid:4)
𝑗 ) to check the va-
lidity for 𝑗 ∈ [1, 𝑛]. Output ⊥ if the number of valid shares is less
than 𝑛 − 𝜏 and otherwise the output of VSS.ShareRecon on the
𝑛 − 𝜏 valid shares.
The correctness is clear and the semantic security is guaranteed