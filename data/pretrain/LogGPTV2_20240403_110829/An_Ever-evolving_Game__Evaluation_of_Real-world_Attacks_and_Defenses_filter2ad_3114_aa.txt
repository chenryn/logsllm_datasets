title:An Ever-evolving Game: Evaluation of Real-world Attacks and Defenses
in Ethereum Ecosystem
author:Shunfan Zhou and
Zhemin Yang and
Jie Xiang and
Yinzhi Cao and
Min Yang and
Yuan Zhang
An Ever-evolving Game: Evaluation of Real-world 
Attacks and Defenses in Ethereum Ecosystem
Shunfan Zhou, Zhemin Yang, and Jie Xiang, Fudan University; Yinzhi Cao, 
Johns Hopkins University; Min Yang and Yuan Zhang, Fudan University
https://www.usenix.org/conference/usenixsecurity20/presentation/zhou-shunfan
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.An Ever-evolving Game: Evaluation of Real-world
Attacks and Defenses in Ethereum Ecosystem
Shunfan Zhou, Zhemin Yang, Jie Xiang, Yinzhi Cao†, Min Yang, and Yuan Zhang
Fudan University, † Johns Hopkins University
{sfzhou17, yangzhemin, jxiang17, m_yang, yuanxzhang}@fudan.edu.cn, † PI:EMAIL
Abstract
Smart contract security has drawn much attention due to
many severe incidents with huge ether and token losses. As a
consequence, researchers have proposed to detect smart con-
tract vulnerabilities via code analysis. However, code analysis
only shows what contracts can be attacked, but not what have
been attacked, and more importantly, what attacks have been
prevented in the real world.
In this paper, we present the ﬁrst comprehensive measure-
ment study to analyze real-world attacks and defenses adopted
in the wild based on the transaction logs produced by unin-
strumented Ethereum Virtual Machine (EVM). Speciﬁcally,
our study decouples two important factors of an adversarial
transaction—i.e., (i) an adversarial action exploiting the vul-
nerable contract and (ii) an adversarial consequence like ether
or token transfers resulted from the action—for the analysis
of attacks and defenses.
The results of our study reveal a huge volume of attacks
beyond what have been studied in the literature, e.g., those
targeting new vulnerability types like airdrop hunting and
those targeting zero-day variants of known vulnerabilities.
Besides successful attacks, our study also shows attempted
attacks that are prevented due to the deployments of defenses.
As the nature of cyber-security, those defenses have also been
evaded, mainly due to incomplete defense deployments. To
summarize it, we believe that this is an ever-evolving game
between adversaries obtaining illegal proﬁts and defenders
shielding their own contracts.
1 Introduction
Smart contract security has drawn much attention as the emer-
gence of several famous, multi-million-dollar incidents, such
as TheDAO attack [42] and the Parity Wallet Hack [34],
which steal thousands of ethers and tokens from the Ethereum
ecosystem. One lesson that we have learned from those inci-
dents is that smart contracts, just like normal computer pro-
grams, have vulnerabilities—such as integer overﬂow, reen-
trancy [4], and call injection (or called code injection [30])—
and even honeypot [37, 38].
In the past, researchers propose using code analysis [5, 9,
23, 27–33, 35, 36, 39–41, 43], e.g., static and dynamic, to de-
tect those vulnerable contracts and honeypots. On one hand,
many static analysis tools adopt either source- or bytecode-
level analysis to ﬁnd vulnerabilities based on certain code
patterns. However, those static analysis tools can only deter-
mine whether a contract is vulnerable but not whether or how
it is exploited in the real world. For example, a recent report
from Perez and Livshits [35] has already shown that only a
small number, i.e., around 2%, of vulnerabilities found by six
recent prior works [27, 29–31, 33, 41] are actually exploited.
On the other hand, some dynamic analysis tools [35, 36]
are proposed to detect and understand, to some extent, what
attacks have been adopted in the real world. For exam-
ple, Sereum [36], a dynamic analysis tool of reentrancy at-
tacks, analyzes the ﬁrst 4.5 million transactions on Ethereum
blockchain and ﬁnds several unknown reentrancy attack pat-
terns and vulnerable contracts. The aforementioned report
from Perez and Livshits also modiﬁed Ethereum Virtual Ma-
chine (EVM) to perform dynamic analysis and understand
whether a reported contract has been exploited. However, dy-
namic analysis tools, especially those which propagate taints,
are usually heavyweight and not scalable to a large-scale mea-
surement.
The research task that we are tackling in the paper is to ana-
lyze all the existing transactions on the Ethereum blockchain
and understand what strategies adversaries have adopted in
real-world and how prevalent and successful those strategies
are. This task is beyond what prior code analysis, either static
or dynamic, can handle: We aim to analyze both prior attacks—
no matter succeeded or failed—and defenses using public
information that has already been outputted by EVM during
the execution of transactions.
Particularly, in this paper, we perform the ﬁrst compre-
hensive study of 420 million Ethereum transactions from
August 2015 to March 2019 and measure real-world adop-
tions of attacks and defenses. Our methodology, at its core, is
a transaction log analysis that matches execution traces out-
putted by uninstrumented EVM against so-called adversarial
USENIX Association
29th USENIX Security Symposium    2793
transaction signatures and looks for adversarial transactions,
either conﬁrmed (i.e., successful) or attempted (i.e., failed).
Our signature matching involves two steps, which decouples
two important concepts in adversarial transactions, i.e., (i) an
adversarial action and (ii) an adversarial consequence. The
former, like a function call with certain parameters, shows the
intent of the transaction to exploit a contract, and the latter,
such as an ether transfer, shows the result of the former in
exploiting the contract.
Here are the two steps in details. First, we design a so-called
action clause of the adversarial signature to match contract
interactions in the transaction log and to decide whether a
transaction has an adversarial intent in exploiting a vulner-
ability. Particularly, we construct a special structure, called
action tree, for each transaction or contract, which represents
all the inter-contract interactions, such as function calls, con-
tract creation and contract destruction. Then, we match the
action clause against those action trees to ﬁnd adversarial
transactions.
Second, we design another clause of the signature, called
result clause, to match ether, token, or ownership transfers
between contracts in the log and conﬁrm the consequences of
adversarial transactions. Particularly, we build another data
structure, called result graph, to represent all such transfers
between contracts for each transaction or contract. Then, we
match the result clause against the constructed result graphs to
conﬁrm the consequences, thus ﬁnding conﬁrmed adversarial
transactions.
One major outcome of our study is to reveal what attack
strategies have been adopted in practice and what conse-
quences of these attacks are. We have observed a clear gap
between what prior works have found and what attackers
adopt in the real world. Particularly, 93.55% of conﬁrmed
adversarial transactions are targeting 198 vulnerable contracts
using a new attack tactic, i.e., airdrop hunting. We have also
observed a big shift of attack strategies over time. In the early
days of Ethereum, i.e., from August 2015 to August 2017,
reentrancy and call injection dominates all the adversarial
transactions, taking up 97.00% of all the conﬁrmed. Then, the
attack focus gradually shifts to integer overﬂow and airdrop
hunting: From September 2017 to March 2019, 76.05% of
attempted and 98.12% of conﬁrmed adversarial transactions
are caused by these two attack categories.
Another outcome of our study is to reveal real-world, de-
ployed defenses. Particularly, we analyzed those attempted
but not conﬁrmed adversarial transactions and then their target
contracts to ﬁnd adopted defense strategies. In total, we ﬁnd
six classes of defenses adopted by 5.8 million open-source
contracts. There are two major widely-deployed defenses:
Sa f eMath adopted by 3.1 million contracts for arithmetic
operations and the onlyOwner check by 2.1 million. These
deployed defenses are indeed effective in defending against
1,276 attempted adversarial transactions: The Sa f eMath is
the most effective one that prevents 1,161 adversarial transac-
tions.
Some of those defenses, although deployed, are also being
evaded mostly due to incorrect or inappropriate deployments.
In total, we have observed 68,873 adversarial transactions that
have successfully evaded defenses deployed by existing con-
tracts. For example, one Ethereum Request for Comment 20
(ERC20) token contract suffers a successful integer overﬂow
attack because it uses Sa f eMath functions in all the ERC20
interfaces but not a customized token transfer function. We
believe that the attack and defense in the Ethereum ecosystem
will be an ever-evolving game between two parties.
Apart from existing attacks and defenses, one byproduct
of our study is the detection of zero-day vulnerable contracts.
Particularly, once we identiﬁed a transaction as conﬁrmed ad-
versarial, the target contract is obviously vulnerable. Further,
if the contract is ﬁrstly considered by our study as vulnerable,
we can treat the vulnerability as zero-day. The main reason for
the discovery of zero-day vulnerabilities is the imprecision of
existing code analysis, while a log analysis used in our study
is in parallel to prior code analysis. For example, some prior
works cannot perform cross-contract analysis [5, 41]; some
have coverage issues that skip sensitive multi-target token
transfer functionality [29]; some only perform dataﬂow analy-
sis on basic data type but not complex ones like objects [5, 9].
We ﬁnd 22 zero-day vulnerabilities, e.g., integer overﬂow
and reentrancy, and 51 zero-day honeypots with real-world
adversarial transactions. Those zero-day vulnerabilities are
indeed exploited in the real world and somewhat popular. Take
integer overﬂow for example. 39.93% of all the conﬁrmed
adversarial transactions targeting integer overﬂows belong to
16 previously-unknown vulnerabilities found by our study.
Lastly,
in
the
available
study results
spirit of open
our measurement
URL
science, we have
in
made
(https://drive.google.com/open?id=
this
1xLssDxYWyKFCwS5HUrQaSex0uwJRSvDi). We have also
reported all the zero-day vulnerabilities to their developers—
if the contracts are open-source and developers are
available—and also CVE database.
2 Overview
In this section, we start from a running example to explain our
methodology and then describe our threat model, i.e., in-scope
and out-of-scope attacks.
2.1 A Running Example
In this subsection, we illustrate a concrete attack example—
namely airdrop hunting—to describe our methodology in
detecting and modeling real-world attacks and defenses. Par-
ticularly, airdrop is a crypto-token feature that distributes new
participants a ﬁxed, small amount of tokens as a way of gain-
ing attention and attracting followers. Airdrop hunting is a
relatively-new attack strategy that exploits the weaknesses of
airdrop and bypasses the identity check of new participants
to obtain a large number of free tokens.
2794    29th USENIX Security Symposium
USENIX Association
1
2
3
4
5
6
7
8
9
10
11
12
contract Simoleon is ERC20Interface {
function transfer (address _to , uint256
_amount ) returns (bool success ) {
initialize (msg. sender );
...
}
function initialize (address _address )
internal returns (bool success ) {
if (! initialized [ _address ]) {
initialized [ _address ] = true;
balance [ _address ]= _airdropAmount ;
}
}
}
Figure 1: A vulnerable airdrop contract example.
Figure 1 shows a vulnerable, real-world, ERC20 token con-
tract, called Simoleon—the contract only checks the identity
of a participant based on its msg.sender (Line 3) and then
distributes airdrops if the msg.sender is new and never seen
before. However, a new msg.sender may belong to a con-
tract generated automatically by an adversary hunting for
airdrops. Speciﬁcally, we show the execution traces of an
airdrop hunting transaction in Table 1, in which the master
contract controlled by the adversary creates 50 slaves to hunt
airdrops via calling the transfer function. All the slaves
transfer the airdrops to the master contract and then destroy
themselves to avoid being directly tracked.
Now, we use this running example to explain our mea-
surement study. From a high-level, our study has three sub-
analysis: (i) attack analysis, i.e., ﬁnding adversarial transac-
tions, (ii) defense analysis, i.e., ﬁnding contracts and corre-
sponding defenses with attempted adversarial transactions,
and (iii) evasion analysis, i.e., ﬁnding adversarial transactions
evading existing defenses. We describe those three respec-
tively using the example.
First, the attack analysis ﬁnds adversarial transactions like
those with execution traces as shown in Table 1. These ad-
versarial transaction traces have two patterns, an adversarial
action that exploits the vulnerable contract and an adversarial
consequence showing that the adversary illegitimately obtains
tokens. Speciﬁcally, the action here, for an airdrop hunting
attack, is that the master contract creates many slave contracts,
which then call a token transfer function in the victim con-
tract. Subsequently, the consequence here is that slaves collect
airdrop bonus and then transfer them back to the master.
Second, the defense analysis starts from attempted adversar-
ial transactions like those that are similar to traces in Table 1
but failed, and then ﬁnds corresponding defenses that lead
to the failure of adversarial transactions. That is, although
these transactions have adversarial actions, but do not have
any adversarial consequence: tokens are not obtained by the
slaves and then the master.
Here is one example defense, i.e., an isHuman modiﬁer in
Figure 2, against airdrop hunting. This modiﬁer—found in a
famous gambling contract Fomo3D [8] and used by 36 airdrop
token contracts—checks the code length of a participant and
decides whether it is a contract created by another contract
1
2
3
4
5
6
7
8
9
10
11
12
modifier isHuman () {
address _addr = msg. sender ;
uint256 _codeLength ;
assembly { _codeLength := extcodesize ( _addr
)}
require( _codeLength == 0, " humans only ");
_;
}
modifier anotherIsHuman () {
require( tx . origin == msg. sender , " humans
only ");
_;
}
Figure 2: An airdrop hunting defense example.
or a human. Therefore, if an adversary generates many slave
contracts automatically, the code length of each slave will be
larger than zero, thus being blocked.
Lastly, the evasion analysis ﬁnds conﬁrmed adversarial
transactions that bypass defenses found in the previous anal-
ysis. The aforementioned isHuman modiﬁer can be evaded
with conﬁrmed adversarial transactions because an adver-
sary can embed the airdrop hunting code in the construc-
tor function, in which the code length is zero when the vic-
tim contract measures the yet-to-be-constructed slaves. Of
course, the defenders also ﬁght back with another modiﬁer,
i.e., the anotherIsHuman in Figure 2. This defense checks
the transaction initiator (tx.origin) and the airdrop partici-
pant (msg.sender) to ensure that the participant is not a slave
invoked by a master.
2.2 Threat Model
Intuitively, in this study, we measure existing attacks with
explicit, gaugeable losses in terms of ethers and tokens. For
example, if an adversary’s contract exploits a vulnerability
of a victim contract and then gains say 100 ethers from the
victim, we would consider this attack as in-scope. For another
example, if an adversary makes a victim contract unavailable
to others, e.g., via an out-of-gas attack [27] or lock of ether as
in the famous Parity Wallet Freeze1 [6], the adversary does not
directly obtain any ethers or tokens and therefore we consider
it as out-of-scope. We adopt this threat model because the
attacks with explicit losses can be quantiﬁed and measured.
Formally, our threat model includes contract-level attacks
that lead to an explicit ether or token ﬂow or an ownership
transfer from one contract, e.g., a victim, to another, e.g., the
adversary. For example, a reentrancy attack will lead to a
repeated transfer of ethers or tokens from the victim to the
adversary, thus considered as in-scope. By contrast, the afore-
mentioned denial-of-service and blockchain-level attacks like
the replay attack [19] are out-of-scope.
In-scope Attacks Now, for the convenience of readers, we
show a list of all the in-scope attacks considered in the paper
1Note that “Parity Wallet Freeze”, due to a glitch in the multi-sig library,
is different from another famous “Parity Wallet Hack” [34] caused by a call
injection vulnerability.
USENIX Association
29th USENIX Security Symposium    2795
Table 1: Example traces of an airdrop hunting transaction targeting the vulnerable contract in Figure 1. Each row, called a trace,
shows an interaction between two contracts in the “From” and “To” columns. In particular, a trace includes certain amounts of
ethers (“Value” column), binary data (“Payload” column) as payload, and whether the interaction succeeds (“Status” column).
The “Address” column indicates how the trace is related to others of the transaction.
Address
From