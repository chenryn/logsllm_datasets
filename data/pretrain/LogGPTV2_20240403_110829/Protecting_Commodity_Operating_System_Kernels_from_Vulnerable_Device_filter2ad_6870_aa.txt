# Protecting Commodity Operating System Kernels from Vulnerable Device Drivers

**Authors:**
- Shakeel Butt
- Vinod Ganapathy
- Michael M. Swift
- Chih-Cheng Chang

**Conference:**
2009 Annual Computer Security Applications Conference

## Abstract
Device drivers in commodity operating systems typically execute with kernel privileges, allowing them unrestricted access to kernel data structures. Recent attacks have demonstrated that this poor isolation exposes the kernel to exploits through vulnerabilities in device drivers, such as buffer overruns in packet processing code. Previous architectures aimed at isolating kernel data from driver code often sacrifice performance, execute too much driver code with kernel privilege, or are incompatible with existing operating systems.

In this paper, we present the design, implementation, and evaluation of a novel security architecture that better isolates kernel data from device drivers without compromising performance or compatibility. Our architecture partitions a device driver into a small, trusted kernel-mode component (k-driver) and an untrusted user-mode component (u-driver). The k-driver contains privileged and performance-critical code, while the u-driver handles the rest of the driver functionality. Communication between these components is mediated by an RPC monitor, which ensures the integrity of kernel data structures during data transfers. We also introduce a runtime technique to automatically infer integrity specifications for these data transfers. Our experiments with a Linux implementation show that this architecture can prevent compromised device drivers from affecting kernel data integrity without impacting common-case performance.

## 1. Introduction
Device drivers in most commodity operating systems execute with kernel privileges and have unrestricted access to kernel data structures. Since the kernel is part of the Trusted Computing Base (TCB), vulnerabilities in driver code can compromise the entire system. Studies have shown that device drivers are rife with exploitable security holes. For example, a recent study of the Linux kernel found that 9 out of 11 user/kernel bugs were in device drivers [23]. An audit by Coverity revealed that over 50% of bugs were in device drivers [13]. Additionally, our analysis of vulnerability databases uncovered several device drivers vulnerable to malformed input, allowing attackers to execute arbitrary code with kernel privileges [4, 30].

Device drivers naturally copy untrusted data from devices to kernel memory. Because the kernel does not restrict the memory locations accessible to devices, a compromised driver can write arbitrary values to sensitive kernel data structures, potentially overwriting critical tables like the interrupt handler table with pointers to attacker-defined code. Exploits against wireless device drivers in Windows XP [7, 9] and Mac OS X [27] highlight the increasing attractiveness of driver vulnerabilities to attackers.

Microkernels [26, 39, 41] offer one way to isolate kernel data from vulnerable device drivers by executing them as user-mode processes. However, microkernels restructure the operating system, making their protection mechanisms inapplicable to macrokernel-based commodity operating systems. Moreover, they often impose significant performance overheads, as seen in Nexus, which reported CPU overheads of 2.5Ã— on media streaming workloads. User-mode driver frameworks [3, 11, 16, 24, 28, 38] allow device drivers to run in user mode but often require complete rewrites and suffer from performance degradation.

This paper extends prior work on Microdrivers [21] and proposes a security architecture that offers the benefits of user-mode execution for device drivers without affecting common-case performance. In this architecture, each device driver is split into a trusted kernel-level component (k-driver) and an untrusted user-level component (u-driver). The k-driver contains code that requires kernel privileges and is performance-critical, while the u-driver handles the remaining functions. A prior study showed that up to 65% of driver code can execute in user mode without requiring kernel privileges or affecting performance [21].

Communication between the u-driver and k-driver is via an RPC-like interface, with the RPC monitor ensuring that all messages conform to a security policy. The monitor enforces integrity constraints on updates to kernel data structures initiated by the u-driver, using data structure invariants inferred by Daikon [19]. It also ensures that k-driver function calls invoked by the u-driver are allowed by a control transfer policy extracted through static analysis.

Our key contributions include:
1. The design and implementation of the RPC monitor to mediate u-driver/k-driver communication.
2. A technique to automatically infer data structure integrity constraints.

While our architecture reduces kernel-mode driver code, is compatible with commodity operating systems, and protects kernel data without affecting common-case performance, it cannot completely prevent a compromised u-driver from hijacking the kernel. Nevertheless, our experiments show that it can prevent a significant fraction of attacks from propagating to and hijacking the kernel.

We implemented our security architecture in the Linux-2.6.18.1 kernel and applied it to four device drivers, demonstrating its effectiveness in protecting against compromised u-drivers without impacting performance.

## 2. Background and Scope
Device drivers in commodity operating systems execute in the same protection domain as the kernel to achieve good performance and easy access to hardware. This architecture, however, does not isolate kernel data from vulnerabilities in device drivers, which are often written in C by third-party vendors. These vulnerabilities, particularly in packet-processing code and ioctl handlers, can be exploited by malicious user-space applications. For instance, recent work [7, 9] shows that a remote attacker can hijack a Windows machine by exploiting a buffer overflow in beacon and probe response processing code in an 802.11 device driver. Our study of vulnerability databases revealed several exploitable buffer overrun and memory allocation vulnerabilities in driver code [4, 30].

The threats posed to kernel data by compromised device drivers can be classified into two categories:
1. **Threats at the Kernel/Driver Interface:** Compromised device drivers can corrupt kernel data structures, causing the kernel to crash, or update kernel hooks to point to attacker-defined code, leading to undetectable arbitrary code execution.
2. **Threats at the Driver/Device Interface:** A compromised driver can modify the state of the device, such as writing arbitrary values to its registers or exhausting its resources. More seriously, a driver can harm kernel data structure integrity using DMA, as the kernel does not restrict the memory regions accessible to a device.

Our proposed architecture helps detect and prevent threats at the kernel/driver interface by relegating a large portion of the device driver to a user-space u-driver and monitoring all data and control transfers at the user/kernel boundary. This restricts the amount of driver code that can directly access kernel memory, protecting against requests from a compromised u-driver. However, to ensure good performance, our architecture does not mediate the kernel/k-driver interface, leaving the k-driver trusted and protected using prior fault isolation techniques [18, 42].

We do not address threats at the driver/device interface, as monitoring data transfers from the device to kernel memory requires new hardware mechanisms or reference monitoring, which are orthogonal to our architecture. We also assume the availability of driver source code, as our driver partitioning tool operates on source code. While this limitation precludes us from partitioning binary-only drivers, a binary-level partitioning tool would allow even such drivers to be adapted to our architecture.

## 3. Design
Our security architecture aims to protect kernel data from vulnerable device drivers that can be compromised by malicious inputs from untrusted user-space applications and hardware. Our design goals are:

1. **Kernel Data Structure Integrity:** The architecture must monitor kernel data structure modifications initiated by device drivers and ensure that these updates comply with a security policy. Each device driver is associated with a security policy that specifies permissible updates to kernel data structures. These policies can be specified manually or extracted automatically, as in our implementation.
2. **Good Common-Case Performance:** Device drivers are on the critical path for transferring data between user-space applications and external devices. Therefore, the architecture must not significantly impact I/O throughput.
3. **Compatibility:** Modern operating systems support thousands of device drivers. The architecture must secure the kernel without requiring significant changes to the operating system or rewriting device drivers.

These design goals are conflicting and challenging to achieve simultaneously. Commodity operating systems often share several kernel data structures with device drivers, which are updated on performance-critical I/O paths.