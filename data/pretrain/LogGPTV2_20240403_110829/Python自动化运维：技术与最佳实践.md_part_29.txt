用到，最新版本为8.34（对于OMServer平台环境来说非必选项）。
内容，本节不予详细介绍。另外同样需要部署rpyc 环境。
一角色为主控端，需要部署Saltstack、Ansible或Func主控端环境，
13.4.2
境设备角色表如表13-1所示。
为了便于读者理解，下面对平台的运行环境、安装部署、开发环境优化等进行详细说明。环
13.4.1
13.4
230
WebServer
主控端
2）安装 Nginx。Nginx 是最流行的高性能 HTTP服务器，最新版本为1.5.9。
（1）Django环境部署
.OMServer平台涉及两个角色，其中一个为Web 服务端，运行Django及rpyc 环境，
OMServer采用Django-1.4.9、nginx-1.5.9、uwsgi-2.0.4、rpyc-3.2.3等开源组件来构建。
#wget http://nginx.org/download/nginx-1.5.9.tar.gz
1）安装 pcre。pcre 是一个轻量级的正则表达式函数库，Nginx 的 HTTP Rewrite 模块会
本示例部署主机为192.168.1.10（SN2012-07-010）。
角色
cd nginx-1.5.9
tar -zxvf nginx-1.5.9.tar.gz
make && make install
./configure
cd pcre-8.34
tar-zxvf pcre-8.34.tar.gz
mkdir-p/data/logs/
mkdir-p
cd/home
系统环境说明
系统环境部署
系统平台搭建
第三部分案例篇
/home/install/Django&&cd/home/install/Django
SN2012-07-010
SN2013-08-020
Linux公社
主机名
#创建uwsgi日志目录
表13-1
192.168.1.10
192.168.1.20
 www.linuxidc.com
系统环境说明表
Saltstack|Ansible|Func主控端、rpyc服务器端
，可参与本书第9～11章
环境说明
#创建安装包目录
另
---
## Page 259
考虑到兼容与稳定性，
WSGI服务器，
最新版本为1.2.3c1。
6）配置Nginx。修改/usr/local/nginx/conf/nginx.conf，添加以下 server域配置：
5）安装Django。Django是一个Python最流行的开源Web开发框架，最新版本为1.6.5。
4）安装uwsgi。uwsgi是一个快速的、纯C语言开发的、
3）安装 MySQL-python。MySQL-python是Python访问 MySQL 数据库的第三方模块库，
yuminstall-y MysQL-python
stub_status_module--with-cc-opt='-o3'---with-cpu-opt=opteron
python setup.py install
tar-zxvf Django-1.4.9.tar.gz
wget https://www.djangoproject.com/m/releases/1.4/Django-1.4.9.tar.gz
8
make
cd uwsgi-2.0.4
tar -zxvf uwsgi-2.0.4.tar.gz
wget http://projects.unbit.it/downloads/uwsgi-2.0.4.tar.gz
cd..
python setup.py install
cd MySQL-python-1.2.2
tar -zxvf MySQL-python-1.2.2.tar.gz
wgethttp://nchc.dl.sourceforge.net/project/mysql-python/mysql-python/1.2.2/
make &&make install
cd nginx-1.5.9
tar -zxvf nginx-1.5.9.tar.gz
wget http://nginx.org/download/nginx-1.5.9.tar.gz
server{
uwsgi/usr/bin
location/{
server_name
listen 80;
，旨在提供专业的PythonWeb应用发布和开发功能，最新版本为2.0.4。
Linux公社
access_log off;
uwsgi_param UWSGI_SCRIPT django_wsgi;
uwsgi_pass 192.168.1.10:9000;
，本示例使用1.4.9版本进行开发。
omserver.domain.com;
--group=nobody
 www.linuxidc.com
#yum安装方式
第13章
/data/www/oMserverweb;
源码安装方式
从零开始打造B/S自动化运维平台231
自维护、对开发者友好的
---
## Page 260
成功！
动脚本这里不展开说明，有兴趣的读者可参阅互联网上已经存在的相关资源。
目录，可以根据具体环境进行修改。
232第三部分案例篇
访问http://omserver.domain.com，出现如图4-4所示的页面说明Django+uwsgi环境部署
#/usr/bin/uwsgi
启动uwsgi与nginx服务，建议配置成服务自启动脚本，便于后续的日常维护。详细启
pidfile =/usr/local/nginx/uwsgi.pid
7）配置uwsgi。创建uwsgi配置文件/usr/local/nginx/conf/uwsgi.ini，详细内容如下：
#/usr/local/nginx/sbin/nginx
daemonize=/data/logs/django.log
memory-report=true
profiler=true
pythonpath=/data/www
processes=8
socket= 0.0.0.0:9000
其中“
logdate=true
enable-threads=true
chdir=/data/www/oMserverweb
master=true
|tar|mid|midi|wav|rtf|mpeg）$
limit-as=6048
uwsgi]
x
Linux公社 www.linuxidc.com
access_log off;
root/data/www/oMserverweb/static;
y pd stm
Of course, you haven't actually done any work yet,Here's what to do nezt:
Congratulations on your first Django-powered page
It worked!
#uwsgi开启的进程数
--ini/usr/local/nginx/conf/uwsgi.ini
#启动主进程
#监听的地址及端口
图13-4Django默认首页
为平台访问域名，
#项目主目录
“/data/www/OMserverweb”为项目根
---
## Page 261
界面如图13-5所示。
看不到debug_tool的界面。debug_toolbar在业务前端页面设计成可伸缩展示，展开后的调试
与配置，同时介绍如何实现一种Django 代码自动刷新生效的方法。
的作用，方便高效地定位问题。本节介绍 Django 必备调试工具 django-debug-tolbar 的安装
13.4.3
(SN2013-08-020)、192.168.1.10(SN2012-07-010）。
程度更高的Socket编程，最新版本为3.3。本示例需要部署rpyc模块的主机为192.168.1.20
开发环境相对于生产环境更注重调试便捷性，好的调试工具对软件开发将起到事半功倍
rpyc（Remote Python Call）是Python 提供分布式计算的基础服务平台，可以理解成封装
务必要渲染一个模板，这样debug_toolbar才会自动附加调试信息到当前的页面，否则
'/usr/1ib/python2.6/site-packages/django_debug_too1bar-0.8.5-py2.6.egg/debug.
TEMPLATE_DIRS =（
MIDDLEWARE_CLASSES =(
修改Django的 seting.py配置，关键参数如下：
#python setup.py install
#cdrpyc-3.2.3
#tar -zxvfrpyc-3.2.3.tar.gz
check-certificate
（2）rpyc模块安装。
toolbar/templates/',
INSTALLED_APPS =（
INTERNAL_IPS=('127.0.0.1,'192.168.1.101',)
#python setup.py install
cd django-debug-toolbar-master/
unzip master
wgethttps://github.com/robhudson/django-debug-toolbar/archive/master.zip
'debug_toolbar',
'debug_toolbar.middleware.DebugToolbarMiddleware',
开发环境优化
Linux公社 www.linuxidc.com
#TEMPLATE_DIRS添加以下行，注意与python的安装路径保持一致
#INSTALLED_APPS添加以下行
#MIDDLEWARE_CLASSES 添加以下行
第13章从零开始打造B/S自动化运维平台233
#添加启动调试器的来源IP
---
## Page 262
reload指定的文件？Linux系统下的inotify可以做到这点，具体操作如下。
从而使我们的项目代码刷新生效。另外，如何保证一旦更新项目源码立即触发变更--touch-
即当该参数值指定的文件发生变化（修改或 touch操作）时，uwsgi进程将自动重载（reload)，
234第三部分案例篇
#项目源码发生变化后，触发touchreload.net的操作，最终使uwsgi进程重载，达到刷新项目源码的目的
#vi/data/www/OMserverweb/shell/autoreload.sh
2）编写监视脚本：
OMserverweb/shell/reload.set"
#mkdir/data/www/oMserverweb/shell
1）在项目目录中创建一个监视文件：
本方案结合uwsgi的“-touch-reload”参数来实现，参数格式：--touch-reload"文件"，
/bin/touch/data/www/oMserverweb/shell/reload.set
move,create,attrib $(objectdir}lwhileread files
（2）Django 源码自动重载（reload）方案
do
/usr/bin/inotifywait
#！/bin/sh
/usr/bin/uwsgi
yum -y install inotify-tools
touch reload.set
continue
BASE_DIR
USETHOUSAND_SEPARATOR
Settings from OMserverweb.settings
CSRE
SE_LLON
LTCHARSET
COOKTE_SECURE
Linux公社 www.linuxidc.com
--ini
#创建一个监视文件reload.set
False
False
A/ezep
rue
Value
"/usr/local/nginx/conf/*.ini"--touch-reload"/data/www/
US
图13-5debug_toolbar 界面
els
#安装inotify 程序包
SignalDe
#在项目目录中创建一个存放监视文件的目录shell
modify,delete,
---
## Page 263
端会将这个结果串进行分割，然后填充页面元素，后端返回主机信息。
的结果做页面渲染。图13-6为应用ID（app_categld）等于1的HtpResponseO 输出结果，
好的 Django 视图发起请求，功能视图通过HttpResponseO方法直接输出结果，前端会将输出
13.5.1
13.5
OMServer平台的 Web 前端采用 prototype.js 作为默认 Ajax框架，通过 get方式向定义
前端各区域对应的数据库表及视图方法见图13-7。
#/data/www/oMserverweb/shell/autoreload.sh
3）启动脚本开启项目目录监视：
done&
系统功能模块设计
前端数据加载模块
Linux公社 www.linuxidc.com
serlit
server fun
192.168.1.10,192.168.1.20192.168.1.10*sn2012-07-010,192.168.1.20*sn2013-08-020
Comserver.domain.com/autcadmin/server list/app_categld=1
图13-7前端各区域对应后台方法及数据库表
1921812
OMServer
图13-6后端返回主机信息
第13章从零开始打造B/S自动化运维平台235
选同步文件：resin配置文件
module it
同步应用文件
前
---
## Page 264
236
1-1,1001,1002,1003"
def
def
局部方法代码如下：
+
回功能模块列表方法
server_list(request):
回服务器列表方法
return HttpResponse(module_list_string)
#其中
#输出格式：“请选择功能模块查看系统日志，查看最新登录，查看系统版本
module_list_string=module_name+"|"+module_id
forein ModuleObj:
module_name=u"请选择功能模块
module_list(request):
return HttpResponse(server_list_string)
#分隔符后部分为的value，以“*”号作为分隔符，目的是为后端提供主机名及IP两种
目标地址支持
#192.168.1.20*sn2013-08-020，其中“1”
#输出格式：192.168.1.10,192.168.1.201192.168.1.10*sn2012-07-010,\
server
else:
if not'app_categId' in request.GET:
ip_hostname=""
下拉框显示项，
ip=""
第三部分案例篇
ModuleList为module_list表模型对象，实现读取所有模块列表，以模块id做排序
module_name+=","+e.module_name
module_id+=","+str(e.id)
Linux公社www.linuxidc.com
号分隔模块名称与模块ID，Web前端获取数据后通过JavaScript做拆分与组装
法
，实现过滤获取的应用分类ID相匹配的主机列表
分隔符前部分为IP地址，作为HTML
#获取用户选择的应用分类ID
---
## Page 265
层。完整实现代码如下：
任务向业务集群服务器下发与执行，最后将任务执行结果串进行格式化、加密后返回给Web
(要事先完成编写，否则会提示找不到指定功能模块），调用功能模块的相关方法，实现操作
法还原出模块ID、操作对象、模块扩展参数等信息，再通过exec方法导人相应的功能模块
能模块的提交参数、加密、发送、接收功能模块运行结果等，局部方法代码如下：
象，在性能方面也非常高效。下面介绍的是Django的module_runO视图方法，实现接收功
调和远程服务以及透明的对象代理，可以轻松在Server与Client之间传递Python的任意对
传统的 Socket工作方式一样，区别是rpyc实现了更高级的封装，支持同步与异步操作、
备一定横向扩展及容灾能力。rpyc 分为两种角色，一种为 Server端，另一种为Client端，
13.5.2
传输模块采用rpyc 分布式计算框架，利用分布式特点可以实现多台主控设备的支持，
关于 rpyc 服务器端的实现原理，
码已省略）
def module_run(request):
1.1111
Run module
OPresult=tdecode(conn.root.Runcommands(put
except Exception,e:
try:
else:
if not
return HttpResponse(OPresult)
C
import rpyc
数据传输模块设计
ut
Module_Id=request.GET['ModuleID']
Module_Id=""
returnHttpResponse('conn
logger.error('connect rpyc server error:'+str(e))
conn.root.1ogin('OMuser','KJS23o4ij09gHF734iuhsdfhkGYSihoiwhj38u4h')
conn=rpyc.connect('192.168.1.20',11511)
put_string+=Module_Id+"@@"
Linux公社www.linuxidc.com
'ModuleID' in request.GET:
，首先接收rpyc客户端传递过来的信息，通过解密方
第13章从零开始打造B/S自动化运维平台237
#输出结果供前端渲染
密钥使用Django
#接收模块ID、操作主机、模块扩展参数等（更多源
servererror:'+str(e))
string),settings.SECRET_KEY)
#连接rpyc主控端主机，端口：11511
，返回的结果使用tdecode进行解密
中settings.SECRET_KEY的值
回
山
---
## Page 266
238
【/home/test/OMServer/OMservermain.py）
第三部分案例篇
class ManagerService(Service):
sysdir=os.path.abspath(os.path.dirname(_file
importlogging
from rpyc.utils.server import ThreadedServer
from rpyc import Service:
from cPickle import dumps
import re
import os,sys
importtime
#-*-coding:utf-8-*-
定义服务器端模块存放路径
comconfigimport
om libraries import
def
def exposed_login(self,user,passwd):
#定义1ogin认证方法，对外开放调用的方法，rpyc要求加上“exposed_”前级，调用时使用
#login（）即可