title:PIR with Compressed Queries and Amortized Query Processing
author:Sebastian Angel and
Hao Chen and
Kim Laine and
Srinath T. V. Setty
2018 IEEE Symposium on Security and Privacy
PIR with compressed queries and amortized query processing
Sebastian Angel(cid:2)†, Hao Chen‡, Kim Laine‡, and Srinath Setty‡
(cid:2)
The University of Texas at Austin
†
New York University
‡
Microsoft Research
Abstract
Private information retrieval (PIR) is a key building block in
many privacy-preserving systems. Unfortunately, existing con-
structions remain very expensive. This paper introduces two
techniques that make the computational variant of PIR (CPIR)
more efﬁcient in practice. The ﬁrst technique targets a recent
class of CPU-efﬁcient CPIR protocols where the query sent by
the client contains a number of ciphertexts proportional to the
size of the database. We show how to compresses this query,
achieving size reductions of up to 274×.
The second technique is a new data encoding called proba-
bilistic batch codes (PBCs). We use PBCs to build a multi-query
PIR scheme that allows the server to amortize its computational
cost when processing a batch of requests from the same client.
This technique achieves up to 40× speedup over processing
queries one at a time, and is signiﬁcantly more efﬁcient than
related encodings. We apply our techniques to the Pung private
communication system, which relies on a custom multi-query
CPIR protocol for its privacy guarantees. By porting our tech-
niques to Pung, we ﬁnd that we can simultaneously reduce
network costs by 36× and increase throughput by 3×.
1
Introduction
A key cryptographic building block in recent privacy-preserving
systems is private information retrieval (PIR) [33]. Exam-
ples include anonymous and metadata-private communica-
tion [11, 58, 63], privacy-preserving media streaming [8, 49],
ad delivery [47], friend discovery [18], and subscriptions [31].
PIR allows a client to download an element (e.g., movie,
friend record) from a database held by an untrusted server (e.g.,
streaming service, social network) without revealing to the
server which element was downloaded. While powerful, PIR is
very expensive—and unfortunately this expense is fundamental:
PIR schemes force the server to operate on all elements in the
database to answer a single query [33]. After all, if the server
could omit an element when answering a query it would learn
that the omitted element is of no interest to the client.
We are interested in the computational variant of PIR
(CPIR) [57], which is desirable since it relies only on cryp-
tographic hardness assumptions and can be used even when the
database is operated by a single organization (we discuss alter-
natives in Section 2.1). Unfortunately, the costs of existing CPIR
constructions [8, 21, 24, 39, 56, 57, 60, 72] are so signiﬁcant
that existing CPIR-backed systems must settle with supporting
small databases with fewer than 100K entries [8, 11, 47, 49].
In this paper we discuss two orthogonal but complemen-
tary contributions that make CPIR more efﬁcient in practice.
The ﬁrst is the introduction of SealPIR, a new CPIR library
that extends the most computationally-efﬁcient CPIR protocol,
XPIR [8], with a new query compression technique that reduces
network costs (§3). Speciﬁcally, a query in XPIR (and its base
protocol [72]), consists of a vector of n ciphertexts, where n
is the number of elements in the server’s database. Stern [72]
√
showed that it is possible to reduce the number of ciphertexts to
n for any positive integer d, thereby making network costs
d d
sublinear in the size of the database. The downside of Stern’s
approach is that it comes at an exponential increase in the size
of the response (§3.4). As we show in our evaluation, values
of d > 3 in XPIR lead to responses that are so large that they
outweigh any reduction in query size (§7.1).
SealPIR adopts a fundamentally different approach. Instead
of creating a query vector, SealPIR has the client send a single
ciphertext containing an encoding of the index of the desired
element. The server then executes a new oblivious expansion
procedure that extracts the corresponding n-ciphertext vector
from the single ciphertext, without leaking any information
about the client’s index, and without increasing the size of the
response (§3.3). The server can then proceed with the XPIR
protocol on the extracted vector as before.
In terms of concrete savings over XPIR, SealPIR results in
queries that are 274× smaller and are 16.4× less expensive for
the client to construct. However, SealPIR introduces between
11% and 24% CPU overhead to the server (over XPIR) to obliv-
iously expand queries. We think this is an excellent trade-off
since XPIR’s protocol is embarrassingly parallel and one can
regain the lost throughput by employing additional servers. Fur-
thermore, reducing communication overhead makes PIR usable
in settings where clients have limited bandwidth, such as mobile
devices or wired connections with data limits [7].
Our second contribution is a new technique to amortize the
server’s CPU cost when processing multiple queries from the
same client. This technique is a relaxation of batch codes [52],
a data encoding that was originally proposed for this purpose.
In practice, most batch code constructions target a different
domain—providing load balancing and availability guarantees
to distributed storage [67, 69] and network switches [77]; using
these constructions to amortize the processing of a batch of PIR
queries is not worthwhile since they introduce high network
costs while yielding only modest CPU speedups (§4.1).
Our encoding, called probabilistic batch codes (PBC), ad-
dresses this issue at the expense of introducing a small prob-
ability of failure (§4.2). In the context of multi-query PIR, a
failure simply means that a client only gets some (not all) of her
queries answered in a single interaction. While the implications
of a failure depend on the application, we argue that in many
cases this is not an issue (§5). Moreover, the failure probability
of our constructions is low—about 1 in a trillion multi-queries
would be affected.
The key idea behind our PBC construction is a simple new
technique called reverse hashing (§4.3). This technique ﬂips
© 2018, Sebastian Angel. Under license to IEEE.
DOI 10.1109/SP.2018.00062
962
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:31:59 UTC from IEEE Xplore.  Restrictions apply. 
the way that hashing (e.g., multi-choice [64], cuckoo [66]) is
typically used in distributed systems to achieve load balancing:
instead of executing the hashing algorithm during data place-
ment, it is executed during data retrieval. Like batch codes,
PBCs amortize CPU costs when processing a batch of queries.
Unlike batch codes, PBCs are more network-efﬁcient: they in-
troduce orders of magnitude less network overhead (§7.3).
We demonstrate the beneﬁts of our techniques through an ex-
perimental evaluation of several deployments that include well-
provisioned, bandwidth-limited, and geo-distributed clients
on databases of up to four million entries. We also integrate
SealPIR and PBCs into a recent private communication sys-
tem [11] that uses multi-query CPIR for its privacy guarantees.
In summary, the contributions of this work are:
• SealPIR, a CPIR library that reduces network costs through
a new oblivious query expansion procedure (§3).
• The design of PBCs, a new probabilistic data encoding use-
ful for building multi-query PIR protocols that amortize
computational costs (§4).
• The implementation and evaluation of SealPIR and PBC on
a variety of settings (§7), including porting these techniques
to the Pung communication system (§7.4).
Despite these advances, there remains a large performance
gap between CPIR implementations and widespread adoption.
Nevertheless, we hope that this work can usher a way forward.
2 Background and related work
We begin by giving some background on PIR and existing multi-
query proposals that relate to our work.
2.1 Private information retrieval (PIR)
Chor et al. [33] introduce private information retrieval (PIR) to
answer the following questions: can a client retrieve an element
from a database managed by an untrusted server (or set of
servers) without the server learning which element was retrieved
by the client? And can this be done more efﬁciently than simply
having the client download the entire database? Chor et al.’s
afﬁrmative response inspired two lines of work: information
theoretic PIR (IT-PIR) and computational PIR (CPIR).1
In IT-PIR schemes [15, 33, 36, 37, 46] the database is
replicated across several non-colluding servers. The client is-
sues a query to each server and combines the responses from
all of the servers locally. IT-PIR schemes have two beneﬁts.
First, the servers’ computation is relatively inexpensive (an
XOR for each entry in the database). Second, the privacy
guarantees are information-theoretic, meaning that they hold
against computationally-unbounded adversaries and avoid cryp-
tographic hardness assumptions. However, basing systems on
IT-PIR poses a signiﬁcant deployment challenge since it can be
difﬁcult to enforce the non-collusion assumption in practice.
On the other hand, CPIR protocols [8, 21, 24, 27, 39, 45,
56, 57, 59, 60, 78] can be used with a database controlled by
a single administrative domain (e.g., a company), under cryp-
tographic hardness assumptions. The drawback is that they
are more expensive than IT-PIR protocols as they require the
1Also known as multi-database PIR (IT-PIR) and single-database PIR (CPIR).
database operator to perform costly cryptographic operations
on each database element. Fortunately, there is a long line of
work to improve the resource overheads of CPIR (see [8, 56]
for the state-of-the-art), and recent work [8] proposes a con-
struction that achieves, for the ﬁrst time, plausible (although
still high) computational costs. Unfortunately, this construction
has high network costs that scale unfavorably with the size of
the database. We discuss this protocol in Section 3.
Regardless of which PIR variant a system implements, the
concrete costs remain high. As a result, it is hard for systems to
support large databases or handle many requests. While support-
ing large databases remains out of reach—although Section 3
makes progress on this—supporting a batch of queries is the
focus of existing proposals. We discuss them next.
2.2 Existing multi-query PIR schemes
Given PIR’s high costs, it is desirable to amortize the servicing
of many requests. Such scenarios include databases that process
a batch of requests from the same user (e.g., Email, group chat,
bulletin boards). The most general approach to achieve this goal
is to use a batch code [52, 67, 69]. In a batch code, the database
is encoded such that the server (or servers) can respond to any k
requests (from the same user) more cheaply (computationally)
than running k parallel instances of PIR. The trade-off is that
batch codes require more network resources (than the k parallel
instances). In practice, this network overhead is onerous; we
discuss this further in Section 4.1.
Other existing proposals tailor the amortization to particular
PIR protocols or particular applications, as we discuss next.
Amortization for particular protocols. Beimel et al. [16] de-
scribe two query amortization techniques. The ﬁrst is based
on the observation that queries in many PIR schemes consist
of a vector of entries, and answering these queries is equiva-
lent to computing a matrix-vector product (where the product
could be over ciphertexts instead of plaintexts, or it could be
an XOR operation). By aggregating multiple queries—even
from different users—the server’s work can be expressed as a
product of two matrices. As a result, subcubic matrix multi-
plication algorithms (e.g., [34, 73]) provide amortization over
multiple matrix-vector multiplication instances. This approach
is further studied by Lueks and Goldberg [62] in the context of
Goldberg’s IT-PIR scheme [46].
The second proposal described by Beimel et al. [16] is
to preprocess the database in certain IT-PIR schemes to re-
duce the cost of future queries. Since this works well, re-
cent projects [19, 26] employ an analogous approach in CPIR
schemes. However, making the preprocessed database acces-
sible by more than one client under these schemes requires
cryptographic primitives that are currently too inefﬁcient to be
implemented (virtual black-box obfuscation [14] heuristically
instantiated from indistinguishability obfuscation [43]).
Several works [36, 48, 50, 51] extend speciﬁc PIR schemes to
achieve CPU or network amortization. Related to CPIR, Groth
et al. [48] extend Gentry and Ramzan’s [45] scheme to retrieve
k elements at lower amortized network cost by having the client
compute k discrete logarithms (with tractable but expensive
parameters) on the server’s answer. This results in low network
963
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:31:59 UTC from IEEE Xplore.  Restrictions apply. 
1: function SETUP(DB)
2:
Represent DB in an amenable format (see [8, §3.2])
3:
4: function QUERY(pk, idx, n)
5:
for i = 0 to n − 1 do
ci ← Enc(pk, i == idx? 1 : 0)
return q ← {c0, . . . , cn−1}
8:
9: function ANSWER(q = {c0, . . . , cn−1}, DB)
10:
for i = 0 to n − 1 do
6:
7:
11:
12:
ai ← DBi · ci
// plaintext-ciphertext multiplication
return a ← Σn−1
i=0 ai
// homomorphic addition
13:
14: function EXTRACT(sk, a)
15:
return Dec(sk, a)
FIGURE 1—CPIR protocol from Stern [72] and XPIR [8] on a database
DB of n elements. This protocol requires an additively homomorphic
cryptosystem with algorithms (KeyGen, Enc, Dec), where (pk, sk) is
the public and secret key pair generated using KeyGen. We omit the
details of all optimizations. The client runs the QUERY and EXTRACT
procedures, and the server runs the SETUP and ANSWER procedures.
Each element in DB is assumed to ﬁt inside a single ciphertext. Oth-
erwise, each element can be split into (cid:2) smaller chunks, and Lines 11
and 12 can be performed on each chunk individually; in this case
ANSWER would return (cid:2) ciphertexts instead of one.
costs, but Gentry and Ramzan’s scheme is computationally
expensive (tens of minutes to process a single PIR query, based
on our estimates); Groth et al.’s extension compounds this issue.
Amortization for particular apps. Popcorn [49] pipelines the
processing of queries in IT-PIR to amortize disk I/O, which is
a bottleneck for databases with very large ﬁles such as movies.
Pung [11] hybridizes an existing batch code due to Ishai et
al. [52] with a probabilistic protocol that exploits the setting of
online communication where users can coordinate a priori (e.g.,
chat, e-mail). This enables Pung to amortize CPU costs with
less network expense than traditional batch codes.
In contrast with the above, our multi-query scheme is ag-
nostic to the particular PIR protocol or application being used.
Compared to batch codes [52], our technique has weaker prop-
erties (sufﬁcient for many applications) but is signiﬁcantly more
efﬁcient. Compared to Pung’s technique, our approach is more
efﬁcient and application-independent (§4.2).
3 SealPIR: An efﬁcient CPIR library
Our starting point for SealPIR is XPIR [8], a recent construction
that improves on Stern’s CPIR scheme [72]. We give a rough
sketch of the protocol in Figure 1. The key idea in XPIR is
to perform the encryption and homomorphic operations using
a lattice-based cryptosystem (the authors use BV [22]), and
preprocess the database in a way that reduces the cost of the op-
erations in Lines 11 and 12 in Figure 1. To our knowledge, this
makes XPIR the only CPIR scheme that is usable in practice.
A major drawback of XPIR is network costs. In particular,
the query sent by the client is large: in the basic scheme, it
contains one ciphertext (encrypting 0 or 1) for each entry in an
n-element database. Furthermore, lattice-based cryptosystems
operation
CPU cost (ms)
noise growth
addition
plaintext multiplication
multiplication
substitution
0.002
0.141
1.514
0.279
additive
multiplicative
multiplicative
(cid:2)
additive
FIGURE 2—Cost of operations in SEAL [4]. The parameters used are
given in Section 7. Every operation increases the noise in a ciphertext.
Once the noise passes a threshold, the ciphertext cannot be decrypted.
For a given computation, parameters must be chosen to accommodate