### HSTS 头

HSTS（HTTP Strict Transport Security）头旨在确保所有与网站的连接都是加密的。然而，它并没有明确指出其使用的关键点。

#### 网站信任模型
网站的信任基于CA（证书颁发机构）模型。浏览器和操作系统会绑定一些受信任的CA的公钥，这些CA通常是专门的公司或国家机构。当一个CA向你的域名颁发证书后，意味着任何信任该CA的人都将自动信任使用这个证书加密的SSL流量。这些CA负责验证你拥有的域（例如通过发送邮件、请求托管文件或调查你的公司）。

如果两个不同的CA为同一个域名颁发了证书，浏览器将信任这两个CA。这可能导致问题，尤其是因为CAs可能被攻击（如[微软安全公告](https://technet.microsoft.com/library/security/2524375)所示）。这种情况下，攻击者可以通过中间人（MiTM）攻击来针对特定域名，即使该域名使用了SSL和HSTS。

### HPKP 头

HPKP（HTTP Public Key Pinning）头试图缓解上述问题。通过设置HPKP头，你可以绑定一个特定的证书。当浏览器首次看到这个头时，它会保存该证书。在每个请求的有效期内（由`max-age`指定），除非从服务器发送的证书链中至少有一个指纹记录匹配，否则浏览器将拒绝连接。

类似于HSTS，HPKP头也有隐私影响，这些影响在其[RFC](https://tools.ietf.org/html/rfc7469#section-5)中有详细描述。

#### 是否应该使用HPKP？
**可能不需要。**

HPKP是一个非常锋利的工具。如果你绑定了错误的证书，或者丢失了密钥，或者某些事情出错，你将阻止用户访问你的网站。唯一的解决办法是等待绑定过期。[这篇文章](https://blog.qualys.com/ssllabs/2016/09/06/is-http-public-key-pinning-dead)提供了一个例子，并描述了一种利用HPKP进行勒索的攻击方式。

一个更安全的选择是使用`Public-Key-Pins-Report-Only`头，这将在出错时报告但不会锁定用户。这样至少可以让你知道用户是否受到了假证书的攻击。

#### 如何使用HPKP？

- `includeSubDomains`：HPKP适用于子域名。
- `report-uri`：不可靠的行为将被报告。

你需要为你绑定的密钥生成一个Base64编码的指纹，并且需要使用一个备份密钥。具体步骤请参考[MDN文档](https://developer.mozilla.org/en-US/docs/Web/HTTP/Public_Key_Pinning#Extracting_the_Base64_encoded_public_key_information)。

### X-Frame-Options

`X-Frame-Options`头用于防止点击劫持攻击。

#### 为什么需要X-Frame-Options？
点击劫持是一种常见的黑客技术，攻击者通过创建一个看不见的iframe并将其放在焦点中，诱导用户输入。例如，攻击者可以欺骗用户玩一个基于浏览器的游戏，而实际上用户点击的是隐藏的Twitter iframe，从而非自愿地转发内容。

#### 是否应该使用X-Frame-Options？
**是的。** 如果你不希望你的应用受到破坏，应该使用X-Frame-Options。

#### 如何使用X-Frame-Options？

- `DENY`：禁止任何人将页面嵌入到iframe中。
- `SAMEORIGIN`：页面只能由同源的iframe显示。
- `ALLOW-FROM`：指定一个特定的URL，允许其嵌入页面到iframe中。

需要注意的是，iframe的深度可能会影响`SAMEORIGIN`和`ALLOW-FROM`的行为。例如，如果你有三层嵌套的iframe，最内层的iframe设置了`SAMEORIGIN`，那么浏览器关心的是包裹它的iframe的来源还是最顶层的iframe？

### X-Content-Type-Options

`X-Content-Type-Options`头解决了MIME嗅探问题，这是一个浏览器的“特性”。

#### 为什么需要X-Content-Type-Options？
理论上，每次服务器响应请求时，都应该设置`Content-Type`头以告诉浏览器内容类型（如HTML、GIF或Flash）。但实际上，许多服务器没有正确设置`Content-Type`头。因此，浏览器可能会忽略指定的内容类型，而是通过检查内容本身来推断类型。这可能导致存储型XSS攻击，例如，用户上传包含JavaScript的图片。

`X-Content-Type-Options: nosniff`头告诉浏览器严格遵循服务器指定的内容类型。

#### 是否应该使用X-Content-Type-Options？
**是的。** 确保正确设置内容类型。

### Referrer-Policy

`Referrer-Policy`头控制浏览器如何设置`Referer`头。

#### 为什么需要Referrer-Policy？
`Referer`头对分析非常有用，但对隐私不利。有时网站会选择不发送`Referer`头。

#### 是否应该使用Referrer-Policy？
**由你自己决定。** 如果你不关心用户的隐私，可以考虑使用它作为分析的一种方法。

#### 如何使用Referrer-Policy？

- `no-referrer`：不发送`Referer`头。
- `no-referrer-when-downgrade`：仅在降级连接时发送`Referer`头。
- `origin`：仅发送源URL。
- `origin-when-cross-origin`：跨域时仅发送源URL。
- `same-origin`：仅在同源请求时发送完整的`Referer`头。
- `strict-origin`：仅在安全连接时发送源URL。
- `strict-origin-when-cross-origin`：跨域且安全连接时发送源URL。
- `unsafe-url`：始终发送完整的`Referer`头。

### Cookie Options

`Set-Cookie`头中的选项可以增强安全性。

#### 为什么需要Cookie Options？
- `Secure`：标记为`Secure`的Cookies只能通过HTTPS传输，防止在中间人攻击中被读取。
- `HttpOnly`：标记为`HttpOnly`的Cookies不能通过JavaScript访问，防止XSS攻击者窃取Cookies。
- `SameSite`：帮助防御CSRF攻击。标记为`SameSite`的Cookies不会发送到不同的站点。有两种模式：`lax`和`strict`。`lax`模式允许Cookies作为顶层GET请求发送（例如点击链接），而`strict`模式则完全不发送第三方Cookies。

#### 是否应该使用Cookie Options？
**绝对应该设置`Secure`和`HttpOnly`。** 不幸的是，`SameSite` Cookies目前只在Chrome和Opera中支持，因此现在可以暂时忽略它们。

#### 如何使用Cookie Options？

- `Expires`：设置Cookie的过期时间。
- `Secure`：仅通过HTTPS传输。
- `HttpOnly`：防止JavaScript访问。
- `SameSite=strict` 或 `SameSite=lax`：防止CSRF攻击。

### 进一步阅读

- [RFC 7469 - HTTP Public Key Pinning](https://tools.ietf.org/html/rfc7469)
- [MDN - HTTP Public Key Pinning](https://developer.mozilla.org/en-US/docs/Web/HTTP/Public_Key_Pinning)
- [RFC 7034 - X-Frame-Options](https://tools.ietf.org/html/rfc7034)
- [MDN - X-Frame-Options](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options)
- [MDN - X-Content-Type-Options](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options)
- [MDN - Referrer Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy)
- [MDN - Cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#Secure_and_HttpOnly_cookies)