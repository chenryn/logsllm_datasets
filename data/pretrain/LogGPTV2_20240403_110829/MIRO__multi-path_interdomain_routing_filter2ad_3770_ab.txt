paths between the nodes, and has limited visibility into the
properties of these paths. These paths depend on the under-
lying network topology, as well as the policies of the various
ASes in the network.
• Probing overhead: To compensate for poor visibility into
the underlying network, overlay networks normally rely on
aggressive probing to infer properties of the paths between
nodes. Probing has inherent inaccuracies and does not scale
well to large deployments.
In contrast to source routing, overlay networks do not require sup-
port from the routers or consent from the ASes in the underlying
network. Although overlays undoubtedly have an important role to
play in enabling new services and adapting to application require-
ments, we believe the underlying network should have native sup-
port for more ﬂexible path selection to support diverse performance
and security requirements efﬁciently, and at scale.
3. MIRO PROTOCOL DESIGN
To provide greater ﬂexibility in path selection, we propose ex-
tending BGP into a multi-path routing protocol, while keeping the
goals of scalability, control for intermediate ASes, and backwards
compatibility in mind. In this section, we present the key features
of MIRO: AS-level path-vector routing for scalability, pull-based
route retrieval for backwards compatibility and scalability, bilateral
negotiation between ASes to contain complexity, selective export
of extra routes for scalability and to give control to intermediate
ASes, and tunneling in the data plane to direct packets along the
chosen routes. For simplicity, we treat each AS as a single node
and defer the technical details of MIRO until Section 4.
3.1 AS-Level Path-Vector Protocol
MIRO represents paths at the AS level—as in today’s BGP, each
AS adds its AS number to the AS-path attribute before propagating
a route announcement to a neighboring domain. Although AS-level
path selection seems natural for an interdomain routing protocol,
other options exist. For example, some source-routing proposals
suggest that all routers in the Internet be exposed to allow link-level
path selection. However, we argue that link-level path selection
exposes too much of the internals of intermediate ASes and limits
their control over the ﬂow of trafﬁc. In addition, supporting link-
level path selection would require the protocol to propagate a large
amount of state, and to update this state when internal topology
changes occur.
We argue that routing at the AS level is the right choice. First,
each AS is owned and managed by a single authority, making the
AS a natural entity of trust and policy speciﬁcation. Second, rout-
ing at the AS level is more scalable than at the link level, and each
AS can hide its internal structure and adjust the ﬂow of trafﬁc with-
out affecting the AS path. Third, because business contracts are
often signed by authorities rather than individual users, it is easier
to verify that the performance and reliability of a route conforms to
an AS-level contract. Although some recent papers consider group-
ing related ASes and routing packets at the AS-group level [1, 14],
we advocate keeping the AS as the base granularity of path selec-
tion for simplicity. In MIRO, groups of related ASes can cooperate
by revealing extra paths to other ASes inside the same group.
3.2 Pull-based Route Retrieval
Many ASes and end users are satisﬁed with the default routes
provided by BGP. Having each AS propagate alternate routes to
every neighbor would severely limit the scalability of interdomain
routing, and would also force all ASes to deploy the new protocol.
Instead of pushing extra routes to all neighbors, MIRO has ASes
actively solicit alternate routes only when needed. For example, in
Figure 3, AS A is the only AS that is unsatisﬁed with its default
route (ABEF). As a result, AS A asks AS B to advertise alterna-
tive routes, possibly including a routing policy (e.g., “avoid routes
traversing AS E”) in the request. All other ASes simply use their
default routes and incur no additional overhead.
ASes that have not deployed our multi-path extensions to BGP
can continue to use today’s version of the protocol. For example,
ASes C and F do not need to run the enhanced protocol for AS
A to be able to query AS B for extra routing options. Each AS
can decide on its own whether to deploy the enhanced protocol so
that a value-added service could be offered to others, such as its
customers. In the evaluation section, we show that even a modest
deployment of MIRO by a few tier-1 and tier-2 ISPs would be suf-
ﬁcient to expose much of the underlying path diversity in today’s
AS-level topology, making it possible for early adopters to enjoy
signiﬁcant gains. This can encourage other ISPs to deploy the pro-
Any route to F
avoiding E?
BCF
BEF*
BCF
B
CF*
CEF
CBEF
C
A
ABEF*
ADEF
A’s outgoing
tunnel table
F
......
B,7
BCF
BCF is OK
F
D
DEF*
DABEF
E
EF*
ECF
(a) route negotiation
B’s incoming
tunnel table
......
7
A−>F BCF
(A −> BCF)
tunnel id = 7
B
BEF*
BCF
C
CF*
CEF
CBEF
A
ABEF*
ADEF
confirmed
F
D
DEF*
DABEF
E
EF*
ECF
(b) routing tunnel establishment
Figure 3: Multi-path Routing Example
tocol in order to compete effectively with these early adopters in
providing value-added services to their customers.
3.3 Bilateral Negotiation Between ASes
MIRO is based on bilateral negotiation between ASes, where one
AS asks another to advertise alternate routes. Bilateral negotiation
simpliﬁes the protocol, and it reﬂects the fact that AS business re-
lationships are often bilateral anyway. In Figure 3, negotiating with
AS B would be sufﬁcient for AS A to learn a path to F that circum-
vents E. In bilateral negotiations, we refer to the AS initiating the
negotiation as the requesting AS and the other AS as the respond-
ing AS. The AS closer to the packet source is the upstream AS and
the one closer to packet destination is the downstream AS. In the
example in Figure 3, AS A is the requesting AS and the upstream
AS, and AS B is the responding AS and the downstream AS.
Although we focus on bilateral negotiations, an AS can easily ap-
proximate multi-party negotiation by making requests to two ASes.
In Figure 3, AS A may ask several ASes (e.g. B and D) to adver-
tise additional paths, with the goal of discovering paths that avoid
traversing AS E. Also, in responding to a request, an AS may pro-
vide additional paths obtained from another negotiation as new can-
didates. For example, AS B might query AS C to advertise alter-
nate paths as part of satisfying the request from AS A, if C were not
already announcing a path that avoids AS E. Still, we do not envi-
sion that multi-hop negotiation would need to take place very often,
since most paths through the Internet are short, typically traversing
four AS hops or less.
In the simplest case, an AS negotiates with an immediate neigh-
bor, as in the example where AS A negotiates with B or D. Al-
lowing negotiation with other ASes provides much greater ﬂexibil-
ity, especially when the adjacent ASes have not deployed the new
multi-path routing protocol. For example, suppose ASes B and D
have not (yet) deployed the new protocol. AS A could conceivably
negotiate with C to learn the path CF, using the path ABC through B
to direct packets to C, which would then direct the packets onward
toward F. In directing trafﬁc through an intermediate AS, MIRO is
similar to overlay networks, though we envision the routers in the
intermediate AS would support this functionality directly, rather
than requiring data packets to traverse an intermediate host.
An AS can adopt ﬂexible policies for deciding who to negotiate
with. For example, an aggressive AS trying to achieve high perfor-
mance might decide to query all immediate neighbors and 2-step
away neighbors, another AS trying to avoid an insecure AS might
consult a public Internet topology graph and exclude some ASes
that will never have valid paths (e.g., those that are single-homed to
the insecure AS). MIRO classiﬁes this as a policy issue and leaves
the decision to individual ASes and their conﬁgured policies.
Although Figure 3 shows an example where the requesting AS
is the upstream AS, downstream ASes may also initiate requests.
For example, suppose the link EF in Figure 3(a) is overloaded with
trafﬁc sent by ASes A, B, D, and E to AS F. To reduce the load on
link EF, AS F could request one of more of these ASes to divert
trafﬁc to a path that traverses the link CF. For example, AS F could
negotiate with AS B to consider switching to an alternate path that
traverses CF. AS B could respond by agreeing to select the path
BCF instead of BEF, and advertising the path BCF to its neighbors.
3.4 Selective Export of Extra Routes
Upon receiving a request, the responding AS could conceivably
propagate all known alternate routes to the requesting AS. How-
ever, announcing all of the routes might incur signiﬁcant overhead.
In addition, the responding AS might not view all routes as equally
appealing. As such, we envision that the responding AS could
apply routing policies that control which alternate routes are an-
nounced, and potentially tag these routes with preference or pricing
information to inﬂuence the routing decisions in the requesting AS.
For example, suppose AS C has a customer (not shown) that wants
to avoid the link CF. Rather than offering both CEF and CBEF as
alternate routes, AS C might announce only CEF (e.g., if sending
trafﬁc via AS B incurs a signiﬁcant ﬁnancial cost), or tag the CBEF
route with pricing information.
We envision that the policies for exporting alternate routes would
depend on the business relationships between neighboring ASes.
For example, suppose an AS has selected a route learned from a
customer AS but has also learned another route for the same des-
tination from another customer. The AS may be willing to adver-
tise all customer-learned routes but not routes learned from peers
or providers. Alternatively, the AS may be willing to advertise all
routes with the same (highest) local-preference value, or advertise
other (less preferred) routes only to neighbors that subscribe to a
premium service. These kinds of policies are readily expressed us-
ing the same kinds of “route map” constructs commonly used in
BGP import and export policies today [15].
3.5 Tunnels for Forwarding Data Packets
Under multi-path routing, the routers cannot forward packets
based on the destination IP address alone. Instead, routers must be
able to forward the packets along the paths chosen by the upstream
ASes. In MIRO, the two negotiating ASes establish a tunnel for
carrying the data packets. The downstream AS provides a unique
tunnel identiﬁer to the upstream AS, independent of which AS ini-
tiated the negotiation. In Figure 3(b), when AS A and AS B agree
on the alternate route BCF, AS B assigns a tunnel id of 7 and sends
the id to AS A. In the data plane, AS A directs the packets into the
tunnel and AS B removes the packets from the tunnel and forwards
destination
Provider 1
Provider 2
12.34.56.102
12.34.56.101
R2(12.34.56.2)
12.34.56.103
R3(12.34.56.3)
AS X
(12.34.56.0/24)
Egress routers
R1(12.34.56.1)
Use IBGP to
distribute routes
customer
Ingress routers
Figure 4: Intra-AS routing architecture
them across the link BC. Then, AS C forwards the packets based
on the destination IP address along the default path to AS F. We
consider several ways to encapsulate the data packets as they enter
the tunnel, as discussed in more detail in Section 4.2.
The upstream AS need not direct all packets into tunnels. Rather,
the AS may apply local policies to direct some trafﬁc along alter-
nate paths and send the remaining packets along the default path
(i.e., using conventional destination-based forwarding).
In Fig-
ure 3, suppose BCF has lower latency than BEF. Then, AS A may
want to direct its real-time trafﬁc via BCF while sending best-effort
trafﬁc along BEF, especially if AS B charges for using alternate
routes. The upstream AS could implement these trafﬁc-splitting
policies by installing classiﬁers that match packets based on header
ﬁelds (e.g., IP addresses, port numbers, and type-of-service bits).
An AS may also split the trafﬁc to balance load across multiple
paths. The AS could direct a fraction of the trafﬁc along each of
the paths by applying a hash function that maps each trafﬁc ﬂow
(e.g., packets with the same addresses and port numbers) to a path,
as in prior work on multi-path forwarding within an AS [16].
4. MIRO IMPLEMENTATION
Despite the conceptual appeal of viewing each AS as a single
node, ASes often have multiple routers that participate in the in-
terdomain routing protocol.
In this section, we describe how to
implement MIRO across a collection of routers in an AS. Then,
we present several practical methods for encapsulating packets and
identifying the end-points of tunnels in the data plane. Finally the
control-plane design is presented.
4.1 Intra-AS Architecture
A large AS typically has multiple edge routers that exchange
BGP routing information with neighboring domains, as illustrated
in Figure 4. Data packets from the customer enter AS X at the
ingress router R1 and traverse several internal routers before leav-
ing the network at an egress router, such as R2 or R3. Although
BGP is a single-path protocol, these routers do not necessarily se-
lect the same interdomain route to the destination (e.g., R2 and R3
might route via Provider 1 and 2, respectively). Typically, large
ASes use internal BGP (iBGP) to distribute routing information to
other routers; for example, R1 in Figure 4 might learn BGP routes
from both R2 and R3. Even if both R2 and R3 select a BGP path
through Provider 2, MIRO would allow the customer to learn the
alternate route through Provider 1, upon request. AS X can provide
these extra routes even if the two providers do not run MIRO.
An implementation of MIRO must install the appropriate data-
plane states in both AS X and the customer network. If the cus-
tomer requests and selects an alternate route, AS X needs to provide
a tunnel identiﬁer that the customer can use in encapsulating data
packets and directing them through the appropriate egress point.
In addition, AS X needs to ensure that the packets, upon reaching
router R2, are decapsulated and forwarded via the egress link to
Provider 1, even if R2 normally forwards packets via Provider 2 to
reach this destination. That is, R2 needs to decapsulate the packet
and still forward the packet based on the tunnel identiﬁer2. The
customer, in turn, must install the necessary state to ensure that
packets entering the network are diverted to the appropriate tun-
nel. This may require the customer AS to install data-plane state at
multiple ingress routers where the data packets may arrive.
Providing alternate routes to the customer requires coordination
amongst the routers in AS X. By default, R2 would not announce
the alternate route (learned from Provider 1) to R1 via iBGP. We
envision two main ways to implement the control protocol. First,
the customer may request alternate routes from R1 which, in turn,
requests alternate routes from its iBGP neighbors R2 and R3. If the
client selects the route, R1 would propagate the tunnel identiﬁer
and instruct R2 to install the necessary data-plane state for decap-
sulating and forwarding the packets as they leave the tunnel on their
way to Provider 1. Second, a separate service, such as the Routing
Control Platform (RCP) [18], could manage the interdomain rout-
ing information on behalf of the routers. In this approach, the RCP
would exchange interdomain routing information with neighboring
domains and compute BGP paths on behalf of the routers. The RCP
in AS X would handle the requests from the customer’s RCP for al-
ternate routes to reach the destination. The RCP could also install
the data-plane state, such as tunneling tables or packet classiﬁers,
in the routers to direct trafﬁc along the chosen paths.