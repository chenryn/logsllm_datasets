spoofer starts to send encrypted RTP/RTCP packets to the
client by spooﬁng the dummy host’s IP address. Meanwhile,
the client sends URLs through a steganographic IM/Email
channel to the spoofer. The spoofer fetches the webpages,
puts them into RTP packet payloads and sends them to the
client. To terminate the circumvention session, the client
sends a termination signal to the spoofer over the upstream
channel, and then the spoofer sends a BYE message (with
IP spooﬁng) to the client to close the call.
5.2.1 Invitation-based Bootstrapping
Since the censor can learn the callee’s SIP ID from the
INVITE message, the user cannot call a common SIP ID,
because otherwise he/she will be detected once the censor
learns the spoofer’s SIP ID from corrupt users. There is a
similar issue for the steganographic IM/Email channel: the
censor can detect users sending IMs or Emails to the spoofer
based on the recipient’s IM ID or Email address (generally
referred to as upstream ID).
To address this, we let the spoofer use a unique SIP ID
and a unique upstream ID to communicate with each client.
Hence, the SIP IDs and upstream IDs of the spoofer learned
by corrupt users cannot be used to detect honest users. To
avoid the bottleneck of having the spoofer create a large
number of SIP and upstream IDs by itself, we let each
client sign up a SIP ID and an upstream ID on behalf of
the spoofer, and give them to the spoofer when joining the
system. We achieve this by introducing an invitation-based
bootstrapping process.
In particular, if a user Alice wants to join the circumven-
tion system, she needs an invitation and help from an ex-
isting CensorSpoofer user (say Bob). Alice must trust Bob
(e.g., Bob is a friend of Alice); otherwise, Bob could sim-
ply report Alice to the censor for attempting to access cir-
cumvention service. (We note that similar invitation-based
bootstrapping strategies have already been adopted by some
real-world circumvention systems, e.g., Psiphon [48].) First,
Alice needs to sign up two SIP IDs and two upstream IDs.
One pair of SIP ID and upstream ID is for herself, and
can be obtained from her local SIP and IM/Email providers
(which potentially collude with the censor). The other pair
is for the spoofer, and must be signed up at abroad SIP and
IM/Email providers (not necessarily supporting encryption).
If all external SIP, IM, or Email providers are blocked by the
censor, Alice can ask Bob to use his already-established cir-
cumvention channels to sign up these IDs for her. Then,
Alice encrypts the following registration information with
the spoofer’s public key:
caller’s SIP ID | master secret |
callee’s SIP ID | passwd for the callee’s SIP ID |
upstream ID | passwd for the upstream ID
The master secret is used to derive SRTP/SRTCP session
keys (and the key for the steganographic upstream channel
if necessary), and the passwords are for the spoofer to login
the callee’s SIP ID and the upstream ID.
To complete the bootstrapping, Alice needs to deliver the
encrypted registration information to the spoofer. Alice
could ask Bob to forward the whole registration information
to the spoofer through his upstream channel. To reduce the
bandwidth consumption of Bob’s upstream channel, Alice
could let Bob only forward the encrypted upstream SIP ID
and password to the spoofer; once her upstream channel is
established, she can send the rest registration information
to the spoofer by herself.
Note that our unique-ID assignment strategy cannot be
applied to existing proxy-based circumvention systems, such
as Tor, to improve the robustness against the insider attack.
This is because the “ID” in CensorSpoofer is an application-
level ID, and it is feasible to get a large number of them and
use a unique one for each user; whereas, in Tor, the “ID”
is the proxy’s IP address, and IP addresses are commonly
viewed as a scarce resource and it is hard to get a large
number of spare IP addresses.
For the spoofer,
it needs to run multiple SIP IDs and
multiple upstream IDs at the same time (possibly with a
common service provider).
In general, IM/Email servers
and SIP registrars do not limit the number of accounts reg-
istered from a common IP address, because it is possible
that multiple legitimate clients are behind a NAT. We did
some tests on two real-world VoIP providers ekiga.net and
mixvoip.com with 100 diﬀerent SIP IDs running on one
of our lab machines, respectively.
It turned out for both
126providers, all these SIP IDs can be registered and receive
calls successfully. We also did tests on Gtalk with 10 diﬀer-
ent accounts on the same machine and all of them worked
properly.
5.2.2 Manipulating the OK Message
Once the bootstrapping is done, the client can initialize a
circumvention session by calling the SIP ID that was given
to the spoofer at the registration. In the SIP protocol, the
callee’s IP address is written into the OK message (more
speciﬁcally, the enclosed SDP message [27]), and later is
used by the caller to send RTP/RTCP packets to the callee.
Since the OK message can be eavesdropped by the censor,
the spoofer cannot put its real IP into the OK message.
For this, we use a trick to hide the spoofer’s IP address.
According to the IETF standards [27,29], the SDP messages
are not checked by SIP proxies. This means the spoofer
can put the dummy host’s IP, instead of its own IP, into
the OK message, without inﬂuencing the OK message be-
ing forwarded back to the client. Since the registered IP of
the callee (kept by the location service of the spoofer’s VoIP
provider) is unknown to the censor, the manipulated OK
message is still plausible to the censor. To verify the feasi-
bility of replacing the spoofer’s IP address in the OK mes-
sage in practice, we utilized netfilter_queue [19] to mod-
ify the OK message on the ﬂy, and tested it with two VoIP
providers ekiga.net and mixvoip.com and an unmodiﬁed
VoIP softphone PJSUA [11]. We found all manipulated OK
messages were successfully delivered to the client and the
client-side softphone started to send RTP/RTCP packets to
the replaced IP address after receiving the OK message.
5.2.3 Selection of Dummy Hosts
A SIP client listens on TCP and/or UDP port 5060 for
SIP signaling, and the ports for RTP/RTCP are selected
randomly on the ﬂy (usually RTP uses an even port and
RTCP uses the next higher odd port). To check the le-
gitimacy of a dummy host, the censor could apply port
scanning to test if the ports used by VoIP are open on the
dummy host.
In response, we can also use port scanning
to get the list of dummy hosts. As we mentioned before,
in many cases, port scanning can only return an ambigu-
ous result. For nmap [17] (the state-of-the-art port scanning
tool), the possible probing results include “open”, “closed”,
“ﬁltered”, “unﬁltered”, “open|ﬁltered”, “closed|ﬁltered”, and
“host seems down”. Only “closed” can clearly tell the censor
that a particular application is not running on the target
machine. When the status is “host seems down”, it is very
likely that the target host is oﬄine. For safety, we also ex-
clude “host seems down” from the acceptable probing states.
Therefore, we let the spoofer periodically run port scanning
with randomly selected IPs outside the censor’s network to
get a list of acceptable (cid:2)ip, rtp port(cid:3) (see Algorithm 1).
Another strategy for the censor to check legitimacy of the
dummy host is to compute the predicted AS path of the
downstream traﬃc (supposedly from the dummy host) and
compare it against the observed entry point (into the cen-
sor’s network) of the spooﬁng traﬃc sent by the spoofer. If
the dummy host is located far from the spoofer, it is likely
that the entry point of the spooﬁng traﬃc is inconsistent
with its claimed AS path. To deal with this, we ﬁrst use
traceroute to compute the actual AS path from the spoofer
to the client (called reference AS path), and then choose a
Input: IP range // outside censored networks
Output: dum hosts
dum hosts ← {} ;
unaccepted ← {closed, host seems down} ;
foreach ip ∈ IP range do
if port scan(ip, sip port) /∈ unaccepted then
rtp port ← rand even port() ;
rtcp port ← rtp port + 1 ;
if port scan(ip, rtp port) /∈ unaccepted and
port scan(ip, rtcp port) /∈ unaccepted then
add (cid:2)ip, rtp port(cid:3) to dum hosts ;
end
end
end
Algorithm 1: Port scanning algorithm to ﬁnd a list of
candidate dummy hosts
dummy host whose predicted AS path to the client is consis-
tent with the reference AS path with respect to their entry
points. Researchers have proposed several AS-path inference
algorithms with high predication accuracy (such as [55]).
In addition, since the port status on a probed host may
change over time, we let the spoofer keep track of the pre-
viously found dummy hosts and maintain a list of alive
dummy hosts. When a circumvention request arrives, the
spoofer picks a dummy host from the alive-host list, and
keeps checking the VoIP ports of this dummy host during
the circumvention session. If the spoofer detects any port
of SIP, RTP and RTCP on the dummy host is closed before
the circumvention session ends, it sends a BYE message to
the client immediately to terminate the SIP session. If the
client wants to presume the circumvention session, it needs
to initialize another SIP session with the spoofer.
5.2.4 Trafﬁc Pattern and Bandwidth
To resist traﬃc-pattern-analysis attack, the client and the
spoofer should follow certain patterns of legitimate VoIP
traﬃc when sending RTP/RTCP packets. For VoIP, both
RTP and RTCP packets are of the same size and sent peri-
odically3. The packet size and sending frequency are deﬁned
by the audio codec, which is negotiated during the SIP ini-
tialization session. The codec determines the bandwidth of
the downstream channel (∼ pkt size × f req). Some codecs
that are used to achieve better voice quality can provide
higher bandwidth (e.g., 64 Kbps with G.711), while others
provide lower bandwidth (e.g., 16 Kbps with iLBC). Note
that the same bandwidth is consumed at the dummy host,
due to the dummy traﬃc sent by the client. We can use
some bandwidth estimation tools (e.g., packet-trains [46])
to ﬁgure out how much available bandwidth the dummy host
has, and based on that, we choose an appropriate codec to
avoid consuming too much bandwidth of the dummy host.
5.2.5 Packet Loss
UDP does not provide reliable transmission. A RTP packet
containing data of a blocked webpage could be lost during
transmission, causing failure of reconstructing the webpage
at the client. To tolerate packet loss, we use Forward Er-
3Some softphones have the option of Voice Activity Detec-
tion (VAD), which avoids unnecessary coding and transmis-
sion of silence voice data. With VAD, the RTP packet size
and sending interval may variate. In this work, we assume
no VAD is used at the spoofer or the client for simplicity.
127ror Correction (FEC) codes (e.g., Reed-Solomon code [26])
inside the downstream channel, so that the client can re-
cover the webpage as long as a certain number of packets
are received.
6. SECURITY ANALYSIS
We next discuss the security properties of CensorSpoofer
against potential passive and active attacks.
6.1 Geolocation Analysis
Since the callee’s SIP ID and IP address contained in the
OK message are transmitted in plaintext, a sophisticated
censor could record all the IP addresses that have been
bound to a particular SIP ID over time, and try to discover
abnormality based on the geolocations of these IPs. For in-
stance, a SIP ID would look suspicious if its registered IPs
for two closely conducted SIP sessions are geographically far
from each other (e.g., the SIP ID is ﬁrst registered with an
IP in U.S. and 1 hour later it is registered again with another
IP in Europe).
To deal with this, instead of picking dummy hosts ran-
domly, the spoofer can choose a set of dummy hosts that
are geographically close, for a particular SIP ID, accord-
ing to an IP-geolocation database (such as [20]). When a
SIP ID is used by the spoofer for the ﬁrst time, the spoofer
randomly selects a primary dummy host for it, and keeps
this information in the user database. For subsequent SIP
sessions calling this SIP ID, the spoofer preferentially as-
signs its primary dummy host for it. If the port status of
the primary dummy host becomes “closed”, the spoofer then
preferentially chooses a dummy host from those that have
been assigned to this SIP ID (which are also stored in the
user database). If none of them is available, the spoofer se-
lects a new dummy host that is geographically close to the
primary dummy host for this SIP ID. (Note that the spoofer
should make sure that a particular dummy host is not being
used by two or more SIP IDs at the same time.)
Furthermore, each user can create multiple SIP IDs. When
a circumvention session is carried out very close to the previ-
ous one, or when the spoofer cannot ﬁnd a suitable dummy
host for a SIP ID, the user can call another SIP ID instead.
6.2 User Agent & Operating System (OS) Fin-
gerprinting
The SIP protocol deﬁnes the basic formats of SIP mes-
sages, but allows user agents (i.e., softphones or SIP phones)
to add optional information to the SIP messages, such as the
user’s display name, timestamps, and the software/hardware
information of the user agent.
In addition, SIP messages
(e.g., INVITE and OK) contain some random identiﬁers,
such as “To tag” and “From tag”, which are generated by
the user agent with self-deﬁned length. Additionally, the
SIP messages also contain the codecs that are supported by
the user agent.
The above information allows a sophisticated censor to
ﬁngerprint a particular user agent. As a result, the censor
may detect users communicating with the spoofer based on
the user-agent ﬁngerprint of the spoofer. To address this,
the spoofer can create a number of user-agent proﬁles based
on the popular SIP phones and softphones, and assign one of
them to each SIP ID. For a SIP session calling a particular
SIP ID, the spoofer generates corresponding SIP messages
based on the user-agent proﬁle of the SIP ID.
In addition, some softphones are only available for certain
OSes. For example, SFLphone [9] can only be used on Linux,
and Blink [8] is only available for Windows and Mac users.
Hence, a sophisticated censor can use OS ﬁngerprinting tools
(e.g., the OS detection of nmap [17]) to check if the dummy
host’s OS is consistent with its user agent (learnt from the
user-agent ﬁngerprint). To handle this, the spoofer can also
use the OS ﬁngerprinting tool to detect the dummy host’s
OS and assign an appropriate user-agent proﬁle.
6.3 Trafﬁc Manipulation
The censor can also try to manipulate traﬃc ﬂows in order
to detect users accessing our circumvention system.
In anonymous communication systems (e.g., Tor [40]), an
attacker could use traﬃc analysis to detect if two relays are
on the same path of a ﬂow, by injecting a speciﬁc traﬃc
pattern at one relay (e.g., by delaying certain packets) and
detecting the same pattern at the other relay [58]. If apply-
ing the same attacking methodology to CensorSpoofer, the
censor could delay the packets sent by the user, and detect
if there are any traﬃc pattern changes in the downstream
ﬂow. However, this attack is based on the precondition that
the ﬂows sent and received by the remote host are corre-
lated, and this is not true for VoIP, since each VoIP client
sends RTP/RTCP packets periodically, independent of the
incoming ﬂow.
Another way to manipulate traﬃc is to drop packets.
Since the spoofer does not actually receive any RTP/RTCP
packets from the user, the censor can drop the user’s pack-
ets without even being noticed by either the spoofer or the
user. The VoIP phones can tolerate a small number of ran-
dom packet loss; but if there are no RTP/RTCP packets
received for a certain period of time (e.g., 30 seconds), they
will drop the call automatically. Hence, a censor can adopt
the following strategy to detect a CensorSpoofer user:
it
blocks all the RTP/RTCP packets sent to the callee, and
checks if the callee still sends packets to the client after a
certain period of time (e.g., 30 seconds). However, the price
of mounting this attack is very high. Since the censor is un-
able to tell which ﬂow carries censored data, it has to drop
all VoIP ﬂows unselectively, causing normal VoIP conversa-
tions being interrupted.
The censor can also alter, reorder, inject or replay RTP/