# Title: Equipping WAP with WEAPONS to Detect Vulnerabilities: Practical Experience Report

## Authors
Ibêria Medeiros, Nuno Ferreira Neves, Miguel Correia

## Affiliations
- LaSIGE, Faculdade de Ciências, Universidade de Lisboa – Portugal
- INESC-ID, Instituto Superior Técnico, Universidade de Lisboa – Portugal

## Abstract
Despite the increasing attention to security in software development, vulnerabilities in source code remain a persistent issue. Open-source static analysis tools offer a practical approach to mitigate this problem. However, these tools are often limited to detecting specific sets of vulnerabilities and can be challenging to extend for new ones. WAP is a recent open-source tool that detects vulnerabilities in PHP-based web applications. This paper addresses the difficulty of extending such tools by proposing a modular and extensible version of WAP, equipped with "weapons" to detect and correct new vulnerability classes. The enhanced WAP was evaluated using seven new vulnerability classes in WordPress web applications and plugins, demonstrating its effectiveness in finding numerous new (zero-day) vulnerabilities.

**Keywords:** Web applications, software security, input validation vulnerabilities, source code analysis, false positives, automatic protection, data mining, modularity, security.

## 1. Introduction
Web applications are integral to our daily lives, and while security is increasingly considered during their development, the presence of vulnerabilities in source code remains a significant concern. Input validation vulnerabilities, such as SQL injection (SQLI) and cross-site scripting (XSS), are particularly prevalent, as highlighted by OWASP's Top 10 [25] and the Ashley Madison incident [4]. New technologies, like NoSQL databases, introduce additional attack vectors, as evidenced by the recent theft of 600 TB of data from MongoDB [23].

Static analysis is a common technique used to identify and mitigate software vulnerabilities [24]. These tools scan source code for specific flaws but are often difficult to extend for new vulnerability classes. WAP [2] is a popular open-source static analysis tool that detects eight classes of vulnerabilities in PHP, the most widely used language for web applications [9]. Despite its popularity, WAP is not easily extensible for new vulnerability classes.

This paper proposes a modular and extensible version of WAP, equipped with "weapons" to detect and correct new vulnerability classes without requiring additional programming. The new version includes modules for existing vulnerability classes and a new user-configurable module for detecting and correcting new classes. This module takes input about the new vulnerability class (entry points, sensitive sinks, and sanitization functions) and automatically generates a detector, false positive symptoms, and a fix.

We enhanced WAP to detect seven new vulnerability classes: session fixation, header injection, email injection, comment spamming injection, LDAP injection, XPath injection, and NoSQL injection. Additionally, we improved the false positive prediction by increasing the granularity of the analysis and re-evaluating machine learning classifiers.

To the best of our knowledge, this is the first static analysis tool that is configurable to detect and correct new vulnerability classes without programming and the first to detect NoSQL injection and comment spamming injection. We evaluated the tool on 54 web application packages and 115 WordPress plugins, discovering 519 previously unknown vulnerabilities.

## 2. The Original WAP Tool
The original WAP tool [2], [12] detects input validation vulnerabilities in PHP web applications. It combines static analysis (taint analysis) to identify candidate vulnerabilities and data mining to predict false positives. WAP can also correct source code by inserting fixes. The current version (v2.1) handles eight vulnerability classes: SQLI, XSS (reflected and stored), RFI, LFI, DT/PT, OSCI, SCD, and PHPCI. WAP is now an OWASP project [1].

WAP, developed in Java, consists of three modules:
1. **Code Analyzer**: Parses the source code, generates an AST, performs taint analysis, and identifies candidate vulnerable data-flow paths.
2. **False Positive Predictor**: Uses three classifiers (Logistic Regression, Random Tree, Support Vector Machine) to predict false positives based on source code features.
3. **Code Corrector**: Identifies and applies fixes to the source code.

## 3. Restructuring WAP
### 3.1. Code Analyzer
The taint analysis component uses entry points, sensitive sinks, and sanitization functions to track data flow. To make WAP more modular and extensible, we reorganized the taint analyzer into sub-modules and created a generic detection sub-module configurable by the user for new vulnerability classes. The AST remains unchanged as it is shared among all sub-modules.

The restructured code analyzer includes:
1. **RCE & File Injection**: Handles vulnerabilities related to file system, files, and URLs leading to RCE.
2. **Client-Side Injection**: Manages vulnerabilities involving client-side code, such as reflected and stored XSS.
3. **Query Injection**: Deals with vulnerabilities associated with queries, such as SQLI.
4. **Vulnerability Detector Generator**: A generic detector configurable by the user for new vulnerabilities.
5. **New Vulnerability Detector Sub-Module**: Detectors generated by the generator, one for each new vulnerability class.

These sub-modules are fed with entry points, sensitive sinks, and sanitization functions, which are stored in external files for easy updates without recompiling the tool.

### 3.2. False Positive Predictor
The original WAP uses 15 attributes to classify vulnerabilities as true or false, representing 24 symptoms in three categories: validation, string manipulation, and SQL query manipulation. We propose two improvements:
1. **Adding Static Symptoms**: Introducing new relevant symptoms not originally considered in WAP.
2. **Dynamic Symptoms**: Allowing users to define new symptoms.

### 3.3. Code Corrector
The code corrector identifies and applies fixes to the source code. The new version of WAP includes more comprehensive and accurate fixes for the newly detected vulnerability classes.

## 4. Experimental Evaluation
We evaluated the new version of WAP on 54 web application packages and 115 WordPress plugins, totaling over 8,000 files and 2 million lines of code. The tool discovered 366 and 153 zero-day vulnerabilities, respectively, adding up to 519 previously unknown vulnerabilities. These findings demonstrate the enhanced ability of the modular and extensible WAP to detect zero-day vulnerabilities compared to the original version.

## 5. Contributions
The key contributions of this paper are:
1. A modular and extensible static analysis tool that allows creating weapons to detect and correct new vulnerability classes without requiring programming.
2. A new version of WAP capable of detecting 15 vulnerability classes, up from the original 8.

## 6. Conclusion
This paper presents a modular and extensible version of the WAP tool, equipped with "weapons" to detect and correct new vulnerability classes. The new version demonstrates significant improvements in detecting zero-day vulnerabilities and provides a flexible framework for future enhancements.