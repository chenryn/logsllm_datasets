title:Equipping WAP with WEAPONS to Detect Vulnerabilities: Practical
Experience Report
author:Iberia Medeiros and
Nuno Ferreira Neves and
Miguel Correia
2016 46th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Equipping WAP with WEAPONS to Detect Vulnerabilities
Practical Experience Report
Ib´eria Medeiros
Nuno Neves
Miguel Correia
LaSIGE, Faculdade de Ciˆencias
Universidade de Lisboa – Portugal
LaSIGE, Faculdade de Ciˆencias
Universidade de Lisboa – Portugal
PI:EMAIL
PI:EMAIL
INESC-ID, Instituto Superior T´ecnico
Universidade de Lisboa – Portugal
PI:EMAIL
Abstract—Although security starts to be taken into account
during software development, the tendency for source code to
contain vulnerabilities persists. Open source static analysis tools
provide a sensible approach to mitigate this problem. However,
these tools are programmed to detect a speciﬁc set of vulnerabili-
ties and they are often difﬁcult to extend to detect new ones. WAP
is a recent popular open source tool that detects vulnerabilities
in the source code of web applications written in PHP. The paper
addresses the difﬁculty of extending these tools by proposing a
modular and extensible version of the WAP tool, equipping it with
“weapons” to detect (and correct) new vulnerability classes. The
new version of the tool was evaluated with seven new vulnerability
classes using web applications and plugins of the widely-adopted
WordPress content management system. The experimental results
show that this extensibility allows WAP to ﬁnd many new (zero-
day) vulnerabilities.
Keywords—Web applications; software security; input validation
vulnerabilities; source code analysis; false positives; automatic
protection; data mining; modularity; security.
I.
INTRODUCTION
Web applications are part of our daily life. Although
security starts to be taken into account during web application
development, the tendency for source code to contain vulnera-
bilities persists. The input validation vulnerability category is
arguably the most relevant. This is comproved by the fact that
code injection vulnerabilities such as SQL injection (SQLI)
and cross-site scripting (XSS) remain at the center of this ten-
dency, as reported by OWASP in its top 10 [25] and conﬁrmed
by the recent Ashley Madison ﬁasco [4]. Nevertheless, new
technologies are becoming widely deployed as part of web
applications. An example are NoSQL databases, particularly
convenient to store “big data”. With new technologies come
also new attack vectors, with 600 TB of data recently stolen
from the most used [7] NoSQL database, MongoDB [23].
Static analysis is a technique often used by companies to
mitigate the problem of software vulnerabilities [24]. Static
analysis tools search for vulnerabilities in source code, helping
programmers to ﬁx the code. However, these tools are pro-
grammed to detect speciﬁc sets of ﬂaws, often SQLI and XSS
[10], [15], occasionally a few other [11], [6], and are typically
hard to extend to search for new classes of vulnerabilities.
WAP [2] is a recent open source static analysis tool
that detects vulnerabilities of eight classes in PHP code, the
language most used in web applications [9]. It is apparently
popular, as sourceforge shows more than 6700 downloads.
The tool uses data mining to predict false positives (false
vulnerability alarms) and adds ﬁxes (small pieces of PHP code)
to remove vulnerabilities. Nevertheless, by analysing its source
code, it is possible to understand that WAP is hard to extend
for new classes of vulnerabilities.
The paper addresses the difﬁculty of extending these tools
by proposing a modular and extensible version of the WAP
tool, equipping it with weapons (WAP extensions) to detect
and correct new vulnerability classes. This involves restructur-
ing the tool in: (1) modules for the vulnerability classes that it
already detects; and, more importantly, (2) a new module to be
conﬁgured by the user to detect and correct new vulnerability
classes without additional programming. This latter module
takes as input data about the new vulnerability class: entry
points (input sources), sensitive sinks (functions exploited by
the attack), and sanitization functions (functions that neutralize
malicious input). Then it automatically generates a weapon
composed of: a detector to search for vulnerabilities, symptoms
to predict false positives, and a ﬁx to correct vulnerable code.
We used this scheme to enhance the new version of WAP
with the ability to detect 7 new classes of vulnerabilities:
session ﬁxation, header injection (or HTTP response splitting),
email injection, comment spamming injection, LDAP injec-
tion, XPath injection, and NoSQL injection.
The paper also demonstrates that
this modularity and
extensibility can be used to create weapons that deal with non-
native entry points, sanitization functions, and sensitive sinks.
We demonstrate this point by creating a weapon to detect SQLI
vulnerabilities in WordPress [27], the most popular content
management system (CMS) [9].
The paper presents a second improvement
to WAP. It
improves the false positive prediction to make it more precise
and accurate. We propose to increase the granularity of the
analysis, adding more symptoms to the original set and a new,
larger, data set. A re-evaluation of machine learning classiﬁers
was performed to select the new top 3 classiﬁers.
The version of WAP presented in the paper is the ﬁrst static
analysis tool conﬁgurable to detect and correct new classes
of vulnerabilities without programming. To the best of our
knowledge, it is also the ﬁrst static analysis tool that detects
NoSQL injection and comment spamming injection. The latter
is currently the most exploited vulnerability in applications
based on WordPress [9].
We evaluated the tool experimentally with 54 web appli-
cation packages and 115 WordPress plugins, adding up to
more than 8,000 ﬁles and 2 million lines of code. The tool
discovered respectively 366 and 153 zero-day vulnerabilities,
i.e., 519 previously-unknown vulnerabilities, presently being
978-1-4673-8891-7/16 $31.00 © 2016 IEEE
DOI 10.1109/DSN.2016.63
630
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:37:52 UTC from IEEE Xplore.  Restrictions apply. 
reported to their developers. In our experiments, our modular
and extensible tool has shown a much higher ability to detect
zero-day vulnerabilities than the original version.
The contributions of the paper are: (1) a modular and
extensible static analysis tool that allows creating weapons to
detect and correct new vulnerability classes, without requiring
programming; (2) a new version of the WAP tool able to detect
vulnerabilities of 15 classes, instead of the original 8 classes.
II. THE ORIGINAL WAP TOOL
This section presents brieﬂy the original WAP tool [2],
[12]. WAP detects input validation vulnerabilities in PHP web
applications. The tool combines source code static analysis
(taint analysis) to detect candidate vulnerabilities and data
mining to predict if the ﬂagged candidate vulnerabilities are
false positives. It is also able to correct source code by inserting
ﬁxes. The version currently available (v2.1) handles eight
vulnerability classes: SQLI, XSS (reﬂected and stored), remote
ﬁle inclusion (RFI), local ﬁle inclusion (LFI), directory or path
traversal (DT/PT), OS command injection (OSCI), source code
disclosure (SCD), and PHP command injection (PHPCI). WAP
is now a OWASP project [1].
The tool, developed in Java, is composed of 3 modules
(Fig. 1): (1) Code analyzer: parses the source code, gen-
erates an abstract syntax tree (AST), does taint analysis,
and generates trees describing candidate vulnerable data-ﬂow
paths (from an entry point to a sensitive sink). The code
analyzer may return false positives as it may not recognize
that certain code structures effectively sanitize data ﬂows.
(2) False positive predictor: obtains symptoms (source code
features) from the candidate vulnerable data-ﬂow paths and
uses a combination of 3 classiﬁers to make the prediction
(Logistic Regression, Random Tree, Support Vector Machine).
(3) Code corrector: identiﬁes the ﬁxes to add and the places
where they have to be inserted; then modiﬁes the source code
with the ﬁxes.



















Fig. 1: Overview of the WAP tool modules and data ﬂow.
III. RESTRUCTURING WAP
A. Code analyzer
The code that does taint analysis uses three pieces of data
about each class of vulnerabilities: entry points, sensitive sinks,
and sanitization functions. Data coming from entry points
is considered tainted (i.e., non-trustworthy). This component
tracks how this data ﬂows through variables and functions,
verifying if it reaches a sensitive sink. Sanitization functions
block the ﬂow of tainted data. Therefore, the taint analyzer is
coded to recognize the set of functions for each vulnerability
class and speciﬁc characteristics on this class (if they exist).
Restructuring the code analyzer implies, on the one hand, to
reorganize the taint analyzer in sub-modules and, on the other
hand, to create a generic detection sub-module conﬁgurable by
the user for new vulnerability classes. The AST has to be left
unmodiﬁed as it is input to all the sub-modules.





!








 !


"































Fig. 2: Reorganization of WAP’s code analyzis module.
Fig. 2 shows the restructured code analyzer. At the top the
ﬁgure shows that PHP code is converted to an AST that is
common input to all sub-modules. The sub-modules are: (1)
RCE & ﬁle injection, dealing with vulnerabilities involving
ﬁle system, ﬁles, and URLs leading to remote code execution
(RCE). These vulnerabilities are OSCI, PHPCI, RFI, LFI, DT,
and SCD. (2) client-side injection, handling vulnerabilities
related with injection of client-side code (e.g., JavaScript
code), namely reﬂected and stored XSS. (3) query injection,
for vulnerabilities associated to queries, i.e., SQLI. (4) vulner-
ability detector generator, the generic detector conﬁgurable by
the user for new vulnerabilities. (5) new vulnerability detector
sub-module, the detectors generated by (4), one for each new
vulnerability class. Each sub-module is fed with entry points
(ep), sensitive sinks (ss), and sanitization (san) functions.
These sets of data are now stored in external ﬁles, allowing
the inclusion of new items without recompiling the tool.
We propose to extend the WAP tool to be conﬁgurable to
handle new classes of input validation vulnerabilities, so we
restructure the tool making it modular. We explain this process
considering WAP’s three original modules: code analyzer, false
positive predictor, and code corrector.
WAP’s parser was implemented using ANTLR [19]. This
framework provides tree walkers to navigate through ASTs.
The new vulnerability detector sub-module (sub-module (5))
leverages a tree walker to track data ﬂow and understand if
tainted data reaches a sensitive sink.
631
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:37:52 UTC from IEEE Xplore.  Restrictions apply. 
attribute
Type checking
WAP (original)
symptom
validation
is string
is int
is ﬂoat
is numeric
ctype digit
Entry point is set
isset
Pattern control
preg match
White list
Black list
Error and exit
Extract substring
user functions1
user functions2
error
exit
string manipulation
substr
String concatenation
concatenation operator
Add char
Replace string
addchar
substr replace
str replace
preg replace
Remove whitespaces
trim
WAP (new version)
symptom
is double
is integer
is long
is real
is scalar
ctype alpha
ctype alnum
intval
is null
empty
preg match all
ereg
eregi
strnatcmp
strcmp
strncmp
strncasecmp
strcasecmp
preg split
str split
explode
split
spliti
implode
join
str pad
preg ﬁlter
ereg replace
eregi replace
str ireplace
str shufﬂe
chunk split
rrim
ltrim
Complex query
Numeric entry point
FROM clause
Aggregated function
Class
SQL query manipulation
ComplexSQL
IsNum
FROM
AVG
COUNT
SUM
MAX
MIN
classiﬁcation
false positive (FP)
real vulnerability (RV)
1 user functions containing white lists to validate user inputs
2 user functions containing black lists to block user inputs
TABLE I: Attributes and symptoms of the original WAP and the
new ones. In the new WAP all symptoms are also attributes.
B. False positive predictor
The 3 classiﬁers of the original WAP use 15 attributes to
classify the vulnerabilities found by the taint analyzer as true
or false. These attributes represent 24 symptoms that may be
present in source code, divided in three categories: validation,
string manipulation and SQL query manipulation. Table I
shows these attributes and symptoms in the two left-hand
columns. The symptoms are PHP functions that manipulate
entry points or variables. The attributes represent symptoms
of the same kind, e.g., the type checking attribute represent
the symptoms that check the data type of variables. Therefore,
an attribute represents several symptoms. A special attribute is
used to indicate the class of each instance (the 16th, last row).
632
We propose to improve this component in two directions:
(1) by adding more symptoms to the original set used in WAP
(static symptoms), and (2) allowing the user to deﬁne new
symptoms (dynamic symptoms).
1) Static symptoms: By investigating the symptoms asso-
ciated with false positives we have understood that there were
several relevant symptoms not considered originally in WAP.
These symptoms are listed in the right-hand column of Table