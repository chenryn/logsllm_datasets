title:Efficient resource management on template-based web servers
author:Eli Courtwright and
Chuan Yue and
Haining Wang
978-1-4244-4421-2/09/$25.00 c(cid:13)2009 IEEE
249
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 09:57:38 UTC from IEEE Xplore.  Restrictions apply. 
EfﬁcientResourceManagementonTemplate-basedWebServersEliCourtwrightChuanYueHainingWangDepartmentofComputerScienceTheCollegeofWilliamandMaryWilliamsburg,VA23187,USA{eli,cyue,hnw}@cs.wm.eduAbstractThemostcommonlyusedrequestprocessingmodelinmultithreadedwebserversisthread-per-request,inwhichanindividualthreadisboundtoserveeachwebrequest.However,withtheprevalenceofusingtemplatetechniquesforgeneratingdynamiccontentsinmodernwebservers,thisconventionalrequestprocessingmodellagsbehindandcannotprovideefﬁcientresourcemanagementsupportfortemplate-basedwebapplications.Moreprecisely,althoughcontentcodeandpresentationcodeofatemplate-baseddy-namicwebpagecanbeseparatedintodifferentﬁles,theyarestillprocessedbythesamethread.Asaresult,webserverresources,especiallydatabaseconnectionresources,cannotbeefﬁcientlysharedandutilized.Inthispaper,weproposeanewrequestschedulingmethod,inwhichasinglewebrequestisservedbydifferentthreadsinmultiplethreadpoolsforparsingrequestheaders,performingdatabasequeries,andrenderingtemplates.Theproposedschemeen-suresthehighutilizationofthepreciousdatabaseconnec-tions,whiletemplatesarebeingrenderedorstaticcontentsarebeingserved.WeimplementedtheproposedschemeinCherryPy,arepresentativetemplate-enabledmultithreadedwebserver,andweevaluateditsperformanceusingthestandardTPC-WbenchmarkimplementedwiththeDjangowebtemplates.Ourevaluationdemonstratesthatthepro-posedschemereducestheaverageresponsetimesofmostwebpagesbytwoordersofmagnitudeandincreasestheoverallwebserverthroughputby31.3%underheavyloads.Keywords:WebServer,ResourceManagement,Tem-plates,Performance,RequestScheduling.1IntroductionTherearetwoimportanttrendsinmodernwebapplica-tiondevelopment.Oneistheuseoftemplatestodynami-callygenerateHTMLwebpages,andtheotheristheprac-ticeofstoringadatabaseconnectionineachwebserverthread.Wehighlightbothtrendsasfollows.•Oneofthemainwebdesignprinciplesistoseparatecontentcodefrompresentationcode.ThisisoneoftheprimarydesignmotivationsbehindCascadingStyleSheets(CSS)[14],whichletwebdesignersseparatethedisplayfromthewebcontentandspecifyhowawebpageshouldbedisplayedinaﬁle.NowmanytemplatinglanguagesexistandallowwebauthorstowriteHTMLﬁleswithspecialtags.Thesetagsarereplacedatruntimewhenatemplateisrenderedwithdata,whichisoftenpulledfromadatabase.•Connectionstosuchadatabaseareoftenstoredinthewebserver’sthreadswithtwopurposes.First,thiseliminatestheoverheadofestablishinganewdatabaseconnectioneverytimewhenapageisloaded.Second,thiskeepsaprogrammerfromhavingtocloseorfreeupeachconnectioninthecodeforeachpage,whichisoftentroublesomewhendealingwithmultipleexecu-tionpathsandthrownexceptions.Thesetwotrendshavebecomemoreapparentinmod-ernwebsiteswiththeincreasingneedforprovidingtheefﬁcientandmassgenerationofdynamicwebpages.Un-fortunately,thecurrentrequestprocessingmodelinmulti-threadedwebserversdoesnotprovideadequateresourcemanagementsupporttothesetechnicaltrends.Themajorproblemisthatmodernmultithreadedwebserversarestillusingthetraditionalthread-per-requestmodeltoprocessre-questsfortemplate-basedwebapplications.Thus,forady-namicwebpage,althoughitscontentcodeandpresentationcodeareseparatedintodifferentﬁles,theseﬁlesarestillprocessedbythesamethreadforaspeciﬁcrequest.Conse-quently,preciousdatabaseconnectionresourcescannotbeefﬁcientlysharedandutilized,becausetheycannotbeusedbyotherthreadstopreparedataeveniftheirholdingthreadsarerenderingtemplatesanddonotneedthedatabasecon-nectionsatthattime.978-1-4244-4421-2/09/$25.00 c(cid:13)2009 IEEE
250