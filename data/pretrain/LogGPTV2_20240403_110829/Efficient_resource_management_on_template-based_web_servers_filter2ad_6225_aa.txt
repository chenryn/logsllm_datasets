### Efficient Resource Management on Template-Based Web Servers

**Authors:**  
Eli Courtwright, Chuan Yue, and Haining Wang  
Department of Computer Science, The College of William and Mary, Williamsburg, VA 23187, USA  
{eli, cyue, hnw}@cs.wm.edu

**Abstract:**
The most commonly used request processing model in multithreaded web servers is the thread-per-request model, where each web request is served by an individual thread. However, with the widespread use of template techniques for generating dynamic content in modern web servers, this conventional model falls short and fails to provide efficient resource management support for template-based web applications. Specifically, although the content code and presentation code of a template-based dynamic webpage can be separated into different files, they are still processed by the same thread. As a result, web server resources, especially database connection resources, cannot be efficiently shared and utilized.

In this paper, we propose a new request scheduling method where a single web request is served by different threads in multiple thread pools. These threads handle tasks such as parsing request headers, performing database queries, and rendering templates. Our proposed scheme ensures high utilization of precious database connections while templates are being rendered or static content is being served. We implemented this scheme in CherryPy, a representative template-enabled multithreaded web server, and evaluated its performance using the standard TPC-W benchmark implemented with Django web templates. Our evaluation demonstrates that the proposed scheme reduces the average response times of most web pages by two orders of magnitude and increases the overall web server throughput by 31.3% under heavy loads.

**Keywords:** Web Server, Resource Management, Templates, Performance, Request Scheduling

### 1. Introduction

There are two important trends in modern web application development. One is the use of templates to dynamically generate HTML web pages, and the other is the practice of storing a database connection in each web server thread. We highlight both trends as follows:

- **Separation of Content and Presentation Code:** One of the main principles of web design is to separate content code from presentation code. This is one of the primary motivations behind Cascading Style Sheets (CSS) [14], which allow web designers to separate the display from the web content and specify how a web page should be displayed in a file. Many templating languages now exist, allowing web authors to write HTML files with special tags. These tags are replaced at runtime when a template is rendered with data, often pulled from a database.

- **Database Connection Management:** Connections to databases are often stored in the web server's threads for two main reasons. First, this eliminates the overhead of establishing a new database connection every time a page is loaded. Second, it relieves programmers from having to close or free up each connection in the code for each page, which can be troublesome when dealing with multiple execution paths and thrown exceptions.

These trends have become more apparent in modern websites due to the increasing need for efficient and mass generation of dynamic web pages. Unfortunately, the current request processing model in multithreaded web servers does not provide adequate resource management support for these technical trends. The major problem is that modern multithreaded web servers still use the traditional thread-per-request model to process requests for template-based web applications. Thus, for a dynamic web page, although its content code and presentation code are separated into different files, these files are still processed by the same thread for a specific request. Consequently, valuable database connection resources cannot be efficiently shared and utilized because they cannot be used by other threads to prepare data even if their holding threads are rendering templates and do not need the database connections at that time.