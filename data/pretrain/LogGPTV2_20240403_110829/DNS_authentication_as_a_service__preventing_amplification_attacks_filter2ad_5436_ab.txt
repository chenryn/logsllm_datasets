I
k
c
o
B
l
Fig. 3 The proposed DNS Amplification Detection Architecture 
Table 1. An Example of the DNS requests Table 
Source IP 
195.251.162.96 
195.251.162.96 
195.251.162.96 
195.251.162.96 
195.251.162.96 
195.251.162.96 
195.251.162.96 
Source 
Port 
32790 
32790 
32790 
32790 
32790 
32790 
32790 
Destination IP 
195.251.128.5 
194.177.210.210 
194.177.210.210 
195.251.177.9 
192.33.4.12 
192.5.6.32 
192.12.94.32 
Destination 
Port 
53 
53 
53 
53 
53 
53 
53 
Table 2. An Example of the DNS responses Table 
Source IP 
194.177.210.210 
195.251.128.5 
195.251.177.9 
192.33.4.12 
192.5.6.32 
192.12.94.32 
204.13.161.15 
Source 
Port 
53 
53 
53 
53 
53 
53 
53 
Destination IP 
195.251.162.96 
195.251.162.96 
195.251.162.96 
195.251.162.96 
195.251.162.96 
195.251.162.96 
195.251.162.96 
Destination 
Port 
32790 
32790 
32790 
32790 
32790 
32790 
2481 
Status 
OK 
OK 
OK 
OK 
OK 
OK 
SUSPICIOUS 
In  a  nutshell,  when  a  DNS  message  is  received  the  DAAD  engine  determines 
whether the message is a response or a request. For any received request or response 
the DAAD tool creates a new entry to the request / response table (see Tables 1 & 2 
accordingly). Once a message is identified as a response the DAAD module checks 
for the existence of the corresponding request in the queries table by performing an 
SQL  lookup.  If  the  response  does  not  match  with  none  of  the  requests  logged 
previously  in  a  given  timeframe  then  is  marked  as  suspicious  (see  the  last  line  of 
Table 2). Additionally, as soon as the number of suspicious messages exhibits a given 
administrator-specified  threshold  an  alert  is  generated  and  firewall  rules  are 
automatically  updated  to  block  the  attacker’s  data  as  depicted  in  Figure  3.  All  the 
parameters  in  the  aforementioned  procedure,  i.e.  timeframe,  threshold,  can  be 
dynamically  updated  and  depend  on  the  administrator’s  security  policies  in  the 
specific network domain. It should be stated that the proposed solution could be also 
introduced  as  part  of  a  statefull  firewall.  Currently,  as  mentioned  in  Section  2.2, 
statefull firewalls are able to protect DNS only against unauthorized request. 
Fig. 4 DAAD’s engine detection logic 
3.2    Evaluation 
In  order  to  evaluate  the  accuracy  of  the  proposed  mechanism  we  employed  the 
architecture presented in Figure 3. A common desktop machine which incorporates a 
Pentium  IV  2,8GHz  processor  with  768  MB  RAM  and  80  GB  IDE  hard  disk  was 
configured  to  serve  as  the  local  DNS  server.  DAAD  was  installed  in  the  same 
machine  with  the  DNS  server.  Of  course,  this  is  the  worst  case  in  terms  of 
performance and it is utilized here deliberately. For peak performance DAAD should 
be  placed  in  a  separate  independent  machine  in  parallel  with  the  DNS  server.  Two 
email  servers  -  which  consult  6  black  lists  of  email  addresses  -  and  a  whole  sub-
network  of  our  university  was  instructed  to  hit  this  DNS  machine.  This  means  that 
under normal operation the specific machine was processing more than 30,000 DNS 
queries per hour. It is worth noting that during all experiments no false negative was 
generated. 
As already mentioned, upon receiving a DNS reply the DAAD tool must decide if 
it  is  legitimate  or  suspicious.  To  do  so,  DAAD  must  check  against  a  subset  of 
previously  DNS  queries  logged  into  the  database.  However,  frequent  SQL  lookups 
substantially affect DAAD’s performance. Thus, every incoming DNS reply must be 
checked not against a big subset of queries, but those issued before a carefully tuned 
timeframe.  DAAD  operation  showed  that  the  bigger  this  time-window  is,  the  lesser 
false  alarms  are  recorded.  On  the  other  hand,  as  already  mentioned,  increasing  this 
timeframe, DAAD’s performance reduces. Moreover, setting this timeframe too high 
there is a small - and the only - possibility to generate false negatives. For instance, 
consider  the  following  example  when  timeframe  is  set  to  30  secs:  our  DNS  server 
Bob sends a request towards the DNS server Alice at time 00:00. Alice responds to 
the request by sending a valid reply at time 00:01. Considering the rare case that Alice 
is also a bot it can bombard Bob with bogus replies for the next 29 secs without being 
identified by DAAD. Corresponding tests in our network showed that this timeframe 
becomes optimum when set at 2 seconds. 
Every one minute, which is the minimum allowed value1, DAAD performs a check 
if  there  is  an  undergoing  attack  by  examining  the  number  of  suspicious  packets 
logged. As presented in Table 3, which consolidates DAAD operation for a 12 hour 
time  interval  (from  08:00  to  20:00),  false  positives  span  between  4  and  31  Thus, 
depending on the network traffic, false alarms can be safely prevented if the number 
of suspicious replies gathered within this 1 min interval is set between 500 and 1,000. 
Having this threshold exceeded an alarm is generated. 
Table 3. DAAD statistics for a 12 hour interval - no attack occurred 
(timeframe = 2 seconds, threshold to activate alarm = 500, check for attack every 1 min, 
flush database check every 1 min if it contains more than 5,000 records) 
Time 
Requests 
Responses 
False 
Positives 
Requests 
delay avg 
Responses 
delay avg 
31.303 
30.254 
30.650 
37.136 
40.777 
31.875 
33.580 
34.528 
32.976 
29.884 
32.664 
28.421 
32.819 
31.655 
31.965 
39.260 
42.852 
33.383 
35.346 
36.108 
34.424 
31.281 
34.776 
30.133 
08-09 
09-10 
10-11 
11-12 
12-13 
13-14 
14-15 
15-16 
16-17 
17-18 
18-19 
19-20 
Our  experiments  showed  that  letting  the  database  to  constantly  grow  it  will 
eventually crash at about 2,500,000 records. Of course, this value is implementation 
specific, but without dispute we need a policy for flushing periodically the database, 
especially  in  case  of  an  attack  (see  Figure  5).  Therefore,  every  one  minute  DAAD 
20 
18 
4 
28 
20 
9 
9 
31 
6 
11 
6 
4 
(secs) 
0.5578 
0.5767 
0.6031 
0.5997 
0.6068 
0.6496 
0.5783 
0.5857 
0.5575 
0.5543 
0.5544 
0.5496 
(secs) 
0.5723 
0.5908 
0.6276 
0.6269 
0.6314 
0.6630 
0.6056 
0.6121 
0.5838 
0.5726 
0.5860 
0.5707 
1 As it was placed into the operating system scheduler - the clock daemon in Unix (Cron) 
examines the size of the database. If it contains more than 5,000 requests, then DAAD 
removes all requests that their timeframe is greater than 2 secs. More importantly, the 
same tactic, i.e. periodically reduce the size of the database, is followed in case of an 
attack  as  well  (see  Figure  5).  This  happens  since  smaller  database  means  better 
performance. It is stressed that this arrangement concerns the DNS requests only, not 
the  replies.  In  case  of  an  attack  the  incoming  messages  (bogus  DNS  replies)  will 
increase very rapidly but without affecting the overall DAAD performance, since the 
SQL lookups take into account only the requests. Replies are also removed from the 
database but far less frequent than requests. Removed data can also be transferred to 
another database to serve as logfiles at a later time. 
2007-6-14 4:5:1 - requests=5036 - responses=4855 - suspicious=0 - Empty Database 