w(cid:48)
j=1 g
j
(cid:81)
Fn+m
e
w(cid:48)
j
n+j
j
j=1 h
e
and
x =
e
i
Let y ∈ Fn
e be the ﬁrst n entries of w and t = (s, x).
The server sends T = (T1, T2) as a proof of storage
corresponding to the challenge set Q, where T1 = (y, t)
and T2 = {(ti, Π(i))}i∈I .
• Verify(Q, T, pk, fid): Using Q = {(i, νi)}i∈I and T =
(y, t) sent by the server, the veriﬁer constructs a vector
w = [w1, . . . , wn, wn+1, . . . , wn+m] ∈ Fn+m
, where the
ﬁrst n entries of w are the same as those of y and the
(n + i)-th entry is νi if i ∈ I (0 if i (cid:54)∈ I). Then, the
veriﬁer checks whether
e
n(cid:89)
m(cid:89)
xe ?= gs
gwj
j
hwn+j
j
mod N.
(3)
j=1
j=1
She also veriﬁes if, for each i ∈ I, Π(i) is a valid proof
(with respect to dM ) for ti. The veriﬁer outputs 1 if
the proof passes all the veriﬁcations; she outputs 0,
otherwise.
The DSCS protocol described above is publicly veriﬁable,
that is, a third party auditor (TPA) having the knowledge
of the public key of the client (data owner) can perform an
audit. Chen et al. [14] construct a secure cloud storage pro-
tocol for static data using the same SNC protocol [11]. They
show that, in order to make an audit privacy-preserving,
the server adds a random linear combination of some ran-
dom vectors to the computed value of y to form the ﬁnal
response. Each of these random vectors is augmented with
the all-zero vector of dimension m (0m), and the client out-
sources these augmented vectors (along with their tags) to
the server initially. Due to the addition of this random com-
ponent to the resulting vector y, the third party auditor
(TPA) cannot gain knowledge of the challenged vectors. It
is easy to see that a similar change in the algorithm Prove
in our DSCS protocol mentioned above makes this scheme
privacy-preserving as well.
3.4 Security Analysis
The DSCS protocol described in Section 3.3 oﬀers the
guarantee of dynamic provable data possession (DPDP) [18].
We describe the data possession game of DPDP between the
challenger (acting as the client) and the adversary (acting
as the cloud server) as follows.
• The challenger generates a key pair (sk, pk) and gives
pk to the adversary.
• The adversary selects a ﬁle F associated with the iden-
tiﬁer fid to store. The challenger processes the ﬁle to
form another ﬁle F (cid:48) with the help of sk and returns
F (cid:48) to the adversary. The challenger stores only some
metadata to verify the updates to be performed by the
adversary later. The adversary chooses a sequence of
updates (of its choice) deﬁned by (updtypei, infoi) for
1141 (cid:54) i (cid:54) q1 (q1 is polynomial in the security parameter
λ) and asks the challenger to initiate the update. For
each update, the challenger runs InitUpdate and stores
the latest metadata at her end. The adversary sends a
proof after executing PerformUpdate. The challenger
veriﬁes this proof by running VerifyUpdate and up-
dates her metadata if and only if the proof passes the
veriﬁcation. The adversary is notiﬁed about the out-
put of VerifyUpdate for each update.
• Let F ∗ be the ﬁnal state of the ﬁle after q1 updates.
The challenger has the latest metadata for the ﬁle F ∗.
Now, she challenges the adversary with a random chal-
lenge set Q, and the adversary returns a proof to the
challenger. The adversary wins the game if the proof
passes the veriﬁcation. The challenger can challenge
the adversary q2 (polynomial in λ) number of times in
an attempt to extract (at least) the challenged vectors
of F ∗.
Our scheme satisﬁes the following three properties re-
quired for security.
1. Authenticity The authenticity of storage demands
that the cloud server cannot produce (or forge) a valid
response T1 = (y, t) (corresponding to the challenge set
Q = {(i, νi)}i∈I ) without storing the challenged vec-
tors and their respective authentication tags appropri-
ately. Since the SNC protocol proposed by Catalano et
al. [11] is secure in the standard model and the random
challenge set Q (precisely, the coeﬃcients νi, for i ∈ I,
used in the algorithm Prove for computing w as a lin-
ear combination of the augmented vectors) is chosen
by the veriﬁer, the DSCS protocol we have constructed
provides a guarantee of authenticity (in the standard
model) except with a probability negligible in λ.
2. Freshness The freshness of storage requires that the
cloud server must store an up-to-date version of the
data ﬁle outsourced by the client. In our scheme, for
each update, the freshness of data is guaranteed using
the algorithm VerifyUpdate (by computing dnew from
Π and checking if d(cid:48)
?= dnew). Moreover, for each
challenge Q, the freshness of data is guaranteed by
checking the validity of the proof T2 = {(ti, Π(i))}i∈I
(in the algorithm Verify) for the rank-based authenti-
cated skip list M . Thus, given the hash function h (see
Section 3.2) used to compute the labels of the nodes in
the skip list M is collision-resistant, the DSCS protocol
described above ensures the freshness of data.
M
3. Extractability The extractability (or retrievability)
of data requires that, given a probabilistic polynomial-
time adversary A that wins the data possession game
mentioned above with some non-negligible probability,
there must be a polynomial-time extractor algorithm
E that can extract (at least) the challenged vectors
(except with negligible probability) by challenging A
for a polynomially (in λ) many times and verifying the
responses sent by A. The algorithm E has a non-black-
box access to A. Thus, E can rewind A, if required.
Given the DSCS protocol satisﬁes the authenticity and
freshness properties mentioned above, it is not hard
to see that a polynomial-time extractor algorithm for
such an adversary A can extract (at least) the chal-
lenged vectors (for known linear combinations of these
vectors) for the DSCS scheme described above with
the help of Gaussian elimination [36].
Probabilistic Guarantees.
If the server has corrupted a fraction (say, β) of vectors
in a ﬁle, then the server passes an audit with probability
pcheat = (1 − β)l, where l is the cardinality of the challenge
set Q. The probability pcheat is very small for large values
of l. Typically, l is taken to be O(λ) in order to make the
probability pcheat negligible in λ. Thus, the veriﬁer detects a
malicious server corrupting β-fraction of the ﬁle with prob-
ability pdetect = 1 − pcheat = 1 − (1 − β)l, and it guarantees
the integrity of almost all vectors of the ﬁle.
4. DPDP I: A DYNAMIC PROVABLE DATA
POSSESSION SCHEME
Erway et al. [18, 17] propose two eﬃcient and fully dy-
namic provable data possession schemes: DPDP I (based
on rank-based authenticated skip lists) and DPDP II (based
on rank-based RSA trees). We consider only the DPDP I
scheme here.
4.1 Blockless Veriﬁcation in DPDP I
Let there be a key generation algorithm KeyGen that pro-
duces a public key pk = (N, g), where N = pq is a product
of two large primes and g is an element of Z∗
N with large
order. Suppose the initial data ﬁle consists of ˜m blocks
b1, b2, . . . , b ˜m. For each block b, the client computes a tag
T (b) = gb mod N . Now, the client builds a rank-based au-
thenticated skip list ˜M on the tags of the blocks and uploads
the data, tags and the skip list to the cloud server. The in-
sertion, deletion and modiﬁcation operations are performed
in a similar fashion as discussed in Section 3.3. There is no
secret key involved in the DPDP I scheme. Although Erway
et al. do not claim explicitly the public veriﬁability of the
DPDP I scheme, we observe that the scheme can be made
publicly veriﬁable by simply making the metadata d ˜M of the
up-to-date skip list and the value ˜m public (see the footnote
in Section 2.3).
During an audit, the veriﬁer selects I, a random l-element
subset of {1, 2, . . . , ˜m}, and generates a challenge set Q =
{(i, νi)}i∈I , where each νi is a random value. The veriﬁer
sends the challenge set Q to the server. The server computes
i∈I νibi and sends {T (bi)}i∈I , B
and proofs {Π(i)}i∈I (see Section 3.2) to the veriﬁer. The
i∈I T (bi)νi . Finally, the veriﬁer
accepts the proof if and only if the following two conditions
hold: Π(i) is a valid proof for each i ∈ I and T = gB mod N .
4.2 Modiﬁed DPDP I to Make Audits Privacy-
an aggregated block B =(cid:80)
veriﬁer computes T = (cid:81)
Preserving
The secure cloud storage scheme for dynamic data dis-
cussed in Section 3.3 oﬀers privacy-preserving audits where
a third party auditor (TPA) cannot learn about the actual
data while auditing. Let us investigate whether the scheme
DPDP I provides this facility.
sends the aggregated block B =(cid:80)
As in the original scheme [18] (see Section 4.1), the server
i∈I νibi to the veriﬁer (or
TPA) where |I| = l. Now, a TPA can obtain the bi values by
115solving a system of linear equations. Therefore, the audits
in the original scheme are not privacy-preserving. However,
it is not hard to make these audits privacy-preserving. We
modify the procedures involved in an audit as follows. As
before, the veriﬁer sends the challenge set Q = {(i, νi)}i∈I
to the server. The server computes an aggregated block
i∈I νibi. Now, the server chooses a random value
r, and it computes B(cid:48) = B + r and R = gr mod N . The
server sends {T (bi)}i∈I , B(cid:48), R and proofs {Π(i)}i∈I to the
i∈I T (bi)νi . Finally,
the veriﬁer accepts the proof if and only if the following two
conditions hold: Π(i) is a valid proof for each i ∈ I and
T = gB(cid:48)
B = (cid:80)
veriﬁer. The veriﬁer computes T = R(cid:81)
mod N .
As discussed in Section 4.1, in order to make the scheme
publicly veriﬁable, the client includes the pair (d ˜M , ˜m) in her
public key and updates it after every authenticated update
on the outsourced data.
Security Analysis.
The modiﬁed DPDP I scheme satisﬁes the authentic-
ity and freshness properties as described in Section 3.4 (this
directly follows from the same guarantees provided by the
original DPDP I). Given a probabilistic polynomial-time
adversary A that wins the data possession game (see Sec-
tion 3.4) with some non-negligible probability, there exists
a polynomial-time extractor algorithm E for the original
DPDP I which can extract the challenged vectors (except
with a negligible probability) by interacting with A. Now,
the extractor algorithm E(cid:48) for the modiﬁed DPDP I chal-
lenges the adversary with two diﬀerent challenge sets Q =
{(i, νi)}i∈I and Q(cid:48) = {(i, ν(cid:48)
i)}i∈I on the same commitment
i) is a random value. Then, E(cid:48) gets
r, where each νi (or ν(cid:48)
i∈I νibi + r and B(cid:48)(cid:48) =
ibi + r, and the extractor now forms another B(cid:48)(cid:48)(cid:48) =
i for each i ∈ I. We note that
i bi where ν(cid:48)(cid:48)
i bi is similar to a response from the adversary
in the original DPDP I scheme described in Section 4.1.
Thus, E(cid:48) can extract (at least) the challenged vectors in a
similar fashion as done by E.
two responses of the form B(cid:48) = (cid:80)
(cid:80)
(cid:80)
B(cid:48)(cid:48)(cid:48) =(cid:80)
i = νi − ν(cid:48)
i∈I ν(cid:48)
i∈I ν(cid:48)(cid:48)
i∈I ν(cid:48)(cid:48)
Privacy-Preserving Audits.
We observe that the TPA does not have an access to
the value of B. To get the value of B, the TPA has to solve
either B from gB mod N , or r from R = gr mod N , both
of which are infeasible for any probabilistic polynomial-time
adversary A, except with some negligible probability. Thus,
the audits are privacy-preserving in this modiﬁed scheme.
5. PERFORMANCE ANALYSIS
In this section, we discuss about the eﬃciency of our DSCS
protocol (described in Section 3.3) and compare this scheme
with other existing SCS protocols achieving provable data
possession guarantees. We also identify some limitations
of an SNC-based SCS scheme (for static or dynamic data)
compared to the DPDP I scheme (described in Section 4).
5.1 Efﬁciency
The computational cost of the algorithms in our DSCS
protocol is dominated by the cost of exponentiations (mod-
ulo N ) required. To generate the value x in an authentica-
tion tag for each vector (in the algorithm Outsource), the
client has to perform a multi-exponentiation [29] and calcu-
late the e-th root of the result (see Eqn. 1 in Section 3.3).
The server requires two multi-exponentiations to calculate
the value of x (see Eqn. 2 in the algorithm Prove). To ver-
ify a proof using the algorithm Verify, the veriﬁer has to
perform a multi-exponentiation and a single exponentiation
(see Eqn. 3).
As mentioned in Section 3.2, due to the properties of a
skip list [32], the size of each proof Π (related to the rank-
based authenticated skip list), the time required to generate
Π and the time required to verify Π are O(log m) with high
probability.
5.2 Comparison among PDP Schemes
As our DSCS protocol provides provable data possession
(PDP) guarantees, we compare our scheme with some other
PDP schemes found in the literature. The comparison shown
in Table 1 is done based on diﬀerent parameters related to
an audit.
Now, we discuss about a few limitations of our DSCS pro-
tocol compared to DPDP I (speciﬁcally), since both of them
are secure in the standard model, handle dynamic data and
oﬀer public veriﬁability. In the DSCS protocol, the audits
are privacy-preserving, that is, a third party auditor (TPA)
cannot gain knowledge of the data actually stored in the
cloud server. Although the original DPDP I scheme does
not oﬀer privacy-preserving audits, this scheme can be mod-
iﬁed to support the same (see Section 4.2). The issues of our
scheme compared to the modiﬁed DPDP I scheme are men-
tioned below.
1. The size of the public key is O(m + n) in our scheme.
On the other hand, the size of the public key in the
modiﬁed DPDP I scheme is constant.
2. The authentication tags in the DSCS protocol are of
the form (s, x), where s ∈ Fe and x ∈ Z∗
N . An au-