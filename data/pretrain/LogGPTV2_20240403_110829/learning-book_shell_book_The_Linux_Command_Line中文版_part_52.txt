#!/bin/bash
# trouble: script to demonstrate connon errors
nunber=1
set -x # Turn on tracing
if [ $nunber = 1 ］; then
echo "Munber is equal to 1.*
else
echo "Munber is not equal to 1.*
fi
set +x # Turn off tracing
我们使用set命令加上-x选项来启动追踪，+x选项关闭追踪。这种技术可以用来检查一
个有错误的脚本的多个部分。
31.4.3执行时检查数值
伴随着追踪，在脚本执行的时候显示变量的内容，以此知道脚本内部的工作状态，往往是很用
的。使用额外的echo语句通常会奏效。
#!/bin/bash
# trouble: script to demonstrate connon errors
nunber=1
Butoe1s uo u1nL # x- 40s
if [ $nunber = 1 ]; then
echo "Munber is equal to 1."
e1se
echo "Munber is not equal to 1.*
fi
set +x # Turn off tracing
在这个简单的示例中，我们只是显示变量number的数值，并为其添加注释。随后利于其识
别和清除。当查看脚本中的循环和算术语句的时候，这种技术特别有用。
429
---
## Page 431
31.5总结
在这一章中，我们仅仅看了几个在脚本开发期间会出现的问题。当然，还有很多。这章中描逾
的技术对查找大多数的常见错误是有效的。调试是一种艺术，可以通过开发经验，在知道如何
避免错误（整个开发过程中不断测试）以及在查找bug（有效利用追踪）两方面都会得到提升。
31.6拓展阅读
·Wikipedia上面有两篇关于语法和逻辑错误的短文：
http://en.wikipedia.org/wiki/Syntax_error
http://en.wikipedia.org/wiki/logic_error
·网上有很多关于技术层面的bash编程的资源：
http:/ /mywiki. wooledge.org/BashPitfalls
http:/ /tldp.org/LDP/abs/html/gotchas.html
http:/ /www.gnu.org/software/bash/manual/html_node/Reserved-Word-Index.html
·想要学习从编写良好的Unix程序中得知的基本概念，可以参考EricRaymond的《Unix
编程的艺术》这本伟大的著作。书中的许多想法都能适用于shell脚本：
http:/ /www.faqs.org/docs/artu/
http://www.faqs.org/docs/artu/ch01s06.html
·对于真正的高强度的调试，参考这个BashDebugger:
http://bashdb.sourceforge.net/
430
---
## Page 432
32
流程控制：case分支
在这一章中，我们将继续看一下程序的流程控制。在第28章中，我们构建了一些简单的菜单
并创建了用来应对各种用户选择的程序逻辑。为此，我们使用了一系列的f命令来识别哪一个
可能的选项已经被选中。这种类型的构造经常出现在程序中，出现频率如此之多，以至于许多
编程语言（包括shell）专门为多选决策提供了一种流程控制机制。
32.1
case
Bash的多选复合命令称为case。它的语法规则如下所示：
[pattern [I pattern] ..-)comnands ::] . .
esac
如果我们看一下第28章中的读菜单程序，我们就知道了用来应对一个用户选项的逻辑流程：
#!/bin/bash
# read-menu: a nenu driven systen infornation progran
clear
echo *
Please Select:
1. Display System Information
2. Display Disk Space
3. Display Home Space Utilization
0.Quit
 b2
exit 1
使用case语句，我们可以用更简单的代码替换这种逻辑：
#!/bin/bash
# case-menu: a nenu driven systen infornation progran
clear
echo *
Please Select:
1. Display System Information
2. Display Disk Space
3. Display Home Space Utilization
432
---
## Page 434
0.Quit
k2
exit 1
esac
case命令检查一个变量值，在我们这个例子中，就是REPLY变量的变量值，然后试图去
匹配其中一个具体的模式。当与之相匹配的模式找到之后，就会执行与该模式相关联的命令。
若找到一个模式之后，就不会再继续寻找。
32.2模式
这里case语句使用的模式和路径展开中使用的那些是一样的。模式以一个“)”为终止符。这
里是一些有效的模式。
模式
描远
a)
若单词为“a”，则匹配
[[:alpha:]])
若单词是一个字母字符。则匹配
433
---
## Page 435
若单词只有3个字符。则匹配
*,txt)
若单词以“.txt”字符结尾，则匹配
*
匹配任意单词。把这个模式做为case命令的最后一个模式，
是一个很好的做法，可以捕捉到任意一个与先前模式不匹配
的数值：也就是说，捕捉到任何可能的无效值。
表32-1:case 模式实例
这里是一个模式使用实例：
#!/bin/bash
.  *
case SREPLY in
434
---
## Page 436
exit
a|A) echo "Hostnane: $HOSTNAME"
uptime
u-FP(81q
c1C) if [[ $(id -u) -eq 0 1]; then
du -sh /hone/*
else
du -sh $HOME
fi
（
echo "Invalid entry" >k2
exit 1
esac
这里，我们更改了case-menu程序的代码，用字母来代替数字做为菜单选项。注意新模式
如何使得大小写字母都是有效的输入选项。
32.3执行多个动作
早于版本号4.0的bash，case语法只允许执行与一个成功匹配的模式相关联的动作。匹配成功
之后，命令将会终止。这里我们看一个测试一个字符的脚本：
#!/bin/bash
# case4-1: test a character
  a
'a'is lover case.
大多数情况下这个脚本工作是正常的，但若输入的字符不止与一个POSIX字符集匹配的
话，这时脚本就会出错。例如，字符“a”既是小写字母，也是一个十六进制的数字。早于4.0
的bash，对于case语法绝不能匹配多个测试条件。现在的bash版本，添加“：&”表达式来终
止每个行动，所以现在我们可以做到这一点：
#!/bin/bash
# case4-2: test a character
 a
'a' is lover case.
a' is alphabetic.