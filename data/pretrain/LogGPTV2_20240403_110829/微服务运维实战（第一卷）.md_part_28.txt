制到另一个服务器或目录。
们解除隐藏。换句话说，stash/unstash 组合相当于将文件从一个服务器或目录复
proxyNode变量），所以不得不从cd服务器中隐藏几个文件，并在代理节点中将它
upstreams/${serviceName}.conf:docker kill -s HUP nginx\"\
includes/${serviceName}.conf"
def updateProxy(serviceName，proxyNode）{
机上拉取和运行 app 容器。
在于大括号内部指示的指令。这种情况下，环境变量DOCKER_HOST仅用于在远程主
总之，使用 Jenkins Workflow和 Groovy DSL的方法就不需要定义 Ansible 中的
新指令是stash 和 unstash。由于我们正在另一个节点上更新代理（定义为
node(proxyNode){
stage"Update proxy"
最后一个函数更新代理服务，代码如下：
新的指令是withEnv，我们正使用它来创建作用范围有限的环境变量，它只存
sh"sudoconsul-template\
sh"sudo cp nginx-includes.conf/data/nginx/
unstash'nginx'
}catch（e){}
try{
-once"
dde Tind asoduos-uaxpop. ys
-template\"nginx-upstreams.ctmpl:/data/nginx/
-consul1ocalhost:8500\
12.1CI/CD工具对比211
---
## Page 225
212
第12章持续集成、交付和部署的工具
定义为 registryIpPort 参数。一旦单击 Build 按钮，就会启动部署（见图12-7）。
prodIp 参数，代理服务器的IP是 proxyIp参数，而且，Docker镜像库的IP 和端口
参数已经预先定义了合理的值。服务的名称是books-ms 参数，生产服务器的 IP 是
Ansible模板来处理。
服务复制这个作业，唯一的区别就是Jenkins 参数。这样，这些作业的管理可以通
脚本结束。脚本本身可以通用，因为差异是通过参数声明的。我们可以为所有的
屏幕，你将看到该作业仅包含两组规格。它以参数开头，以前面讨论的Workflow
应用。
Ansible 来负责服务器的配置。同时我们结合使用了分别在这两个领域做得最好的
多，同时也更容易理解和更新。我们使用 Jenkins 执行它擅长的任务，同时使用
点，稍后再讨论。最终使用一个脚本就可，比以前使用的Ansible 部署任务要少得
性且难以理解的XML定义，并减少了作业的总数。Workflow还提供了许多其他优
者根据我们的设置方式可能有不同的逻辑）。
Workflow 指令应该运行在 tests节点上，Jenkins 则会确保使用最少的五个节点（或
些强大的功能。例如，可以使用标签 tests 来定义五个节点。后来，如果指定一些
让我们来构建这个作业，看看进展。请打开 books-ms build 界面，你将看到
再来看一下 book-ms 作业的配置。请在浏览器中打开 books-ms configuration
同时，通过使用Jenkins Workflow，我们避免了传统Jenkins作业中所需的复杂
图12-7 books-ms Jenkins workflow 作业的构建界面
This buildrequires parameters:
Workflow books-ms
Buld
oroxyip
orodlp
10.100.198.201
10.100.198.201
---
## Page 226
很有用的手段。
Generator”复选框（见图12-9）。这是一个发现每个代码段的作用以及如何使用的
Workflow时，请务必在books-ms 配置屏幕中选择位于脚本下方的“Snippet
程来更熟悉它。可以在脚本上添加例如电子邮件通知作为练习。在研究 Jenkins
查看属于该步骤的日志。
以看到，每个阶段和步骤都由一个链接（代表终端屏幕的图标）呈现，允许我们仅
助。执行完成后，请点击最后一个 books-ms build 的 workflow Steps 链接。你可
西。幸运的是，Jenkins 的 workflow有Workflow Steps 功能，可以在这点上有所帮
图12-8所示。
Jenkins的Workflow远不止我们在这里介绍的这些。请花一些时间看看在线教
如你所知，部署过程已经完成了一部分，日志可能太大，无法快速找到东
可以通过打开最后一个构建的book-ms控制台屏幕来监视作业的执行情况，如
(refs/
git
ps:
Console Output
79
图12-8book-ms Jenkins workflow 作业的控制台
out
load
tage:
gie
oac
oBu
refs
origin.urlhttps://github.com/vfarcic/books-ms.git#
aefac494c3177a2
12.1CI/CD工具对比213
---
## Page 227
214
第12章持续集成、交付和部署的工具
来实现。
处。幸运的是，这些改进都可以通过Multibranch Workflow 插件和Jenkinsfile
够处理主分支，而且还能处理我们选择的所有其他分支，这样会带来非常大的益
的方方面面。除了要把Workflow脚本放在代码库中外，如果Jenkins的作业不仅能
与服务其余的代码一块儿放在代码库里。这样，服务的维护团队能完全控制部署
Ansible 管理脚本仍然是次优的解决方案。更好的方法是将部署流水线写成脚本，
StartofWorkflow
相比Workflow，使用Ansible playbook 做部署多了很多优势，尽管如此，通过
Allocate node:Start
Allocate node:Body:Start
Run teststests
Shell Script
Shell Script
Shell Script
Shell Script
Build tests
Shell Script
Provision
Evaluate a Groovy source fle into the workflow script:Body:Start
Loadedscript:/data/scripts/workflow-util.groovy
图 12-9 book-ms Jenkins workflow 作业的步骤展示
Step
国
O
O
O
O
O
O
O
O
Status
---
## Page 228
第二个构建得等到第一个构建先完成。
simple，Jenkins 启动了两者的构建。由于 cd 节点被配置为只有一个执行器，所以
幕，会看到两个与过滤器匹配的子项目：jenkins-workflow和jenkins-workflow-
有限（cd节点只有一个CPU和1GB的RAM）的情况下建立太多的分支。
会看到只有名称中包含workflow 的分支在里面。这样设置有两个原因：第一个是
Branch Sources，我们用它来定义代码库。请注意“Advanced”按钮，点击后，你
面探讨作业的配置。
一旦分支索引了，它将为每个分支创建子项目并启动构建。趁着构建在进行，下
单中的 Run Now链接。Jenkins 将索引我们在配置中设置的过滤器匹配的所有分支。
生成一个作业，但你没有配置过分支。请单击 Branch Indexing，然后单击左侧菜
multibranch的作业，你会看到消息说该项目扫描SCM 中的分支，并为每个分支
新，而且，如果某分支被删除，它也会删除一个相应的子项目。
定义构建和测试任务，还有更多。Jenkins 不仅检测所有分支并保持该列表的更
可能决定在主分支的Jenkinsfile中定义一个完整的流水线，并选择只为特性分支
独的 Jenkins 项目，所以可以根据分支的不同类型来相应地调整流程。例如，我们
由地制定项目部署流水线。由于每个分支使用一个不同的Jenkinsfile创建一个单
在代码库中，而不是将其集中放在 Jenkins 中。这反过来又使开发人员能够充分自
目，并期望在每个分支中找到 Jenkinsfile。这让我们能够将 Workflow 脚本保存
Workflow脚本保存在代码库中。这个作业将为代码库中的每个分支创建一个子项
安装 Jenkins Multibranch Workflow 和 Jenkinsfile
这时，分支索引可能已经完成。你如果返回到 books-ms-multibranch 作业屏
请打开 books-ms-multibranch 配置页面。作业配置的唯一重要的地方在于
我们来试试 Multibranch Workflow 和Jenkinsflle。首先打开books-ms-
Jenkins Multibranch Workflow插件添加了一个新的作业类型，允许我们将
12.1CIV/CD工具对比215
---
## Page 229
216第12章持续集成、交付和部署的工具
合并他的代码，如果没有引入任何错误而且过程成功的话，一个不同的脚本将会运
备好部署到生产环境，或者策略是仅部署主分支或其他所选分支中的代码。一旦
时Jenkins都会运行测试。他从中删除了部署和部署后测试，因为代码可能尚未准
node("cd"){
量。我们得到了与以前相同的结果，但是这次我们将脚本移动到代码库。
Jenkins 属性。由于项目组现在完全负责这个过程，所以不需要在外部定义这些变
时定义的脚本几乎相同。唯一的区别是，这次脚本中定义了变量，而不是使用
所示：
通过研究这个脚本，可以得出结论，这个分支的开发人员希望每次他做提交
flow.runTests(serviceName,"tests",
flow.buildTests(serviceName, registryIpPort)
git url: "https://github.com/vfarcic/${serviceName}.git"
def registryIpPort = "10.100.198.200:5000"
def serviceName ="books-ms"
jenkins-workflow-simple 分支中的 Jenkinsfile稍微简单一些，代码如下:
这个脚本与我们之前在研究Jenkins作业books-ms 中嵌入的JenkinsWorkflow
node("cd"){
我们来看看这些分支的Jenkinsfile，Jenkins-workflow里的Jenkinsfile如下
flow.runTests(serviceName,"integ", "-e DOMAIN=http://${proxyIp}")
flow.updateProxy(serviceName,
flow.deploy(serviceName, prodIp)
flow.buildService(serviceName,registryIpPort)
flow.runTests(serviceName,
flow.buildTests(serviceName,
defflow=
git url: "https://github.com/vfarcic/${serviceName}.git"
def
def
def serviceName = "books-ms"
FregistryIpPort="10.100.198.200:5000"
proxyIp="10.100.198.201"
load"/data/scripts/workflow-util.groovy"
"tests",
registryIpPort)
"prod")
---
## Page 230
Final Thoughts
最后的想法
秀的方法，它们都有一些缺点。CloudBees的Jenkins企业版确实有解决模板和许多
Jenkins 插件，如 Template Project Plugin 来创建模板。然而，它们都不是真正优
强大而易用的组合。
分支（或我们选择的分支）。总之，将高层的工具和低层工具结合在一起，是一个
径，Multibranch与Jenkinsfile一起则允许我们将流水线（或其一部分）应用于所有
用 Jenkins 提供的几乎任何功能。Docker 加上 Workflow，为我们提供了有用的捷
面，Groovy 本身提供了我们可能需要而 DSL 没能提供的所有功能。同时，可以使
Workflow领域专用语言（DSL），有了专门用于部署目的的语法和功能。另一方
水线的灵活性。Workflow DLS 和Groovy 的工作结合了两个领域最好的东西。通过
充。一方面，使用了Jenkins UI提供的所有功能，同时也保持了将脚本用于部署流
不同的插件。花时间在Jenkins上真的是一项有价值的投资，将会很快得到回报。
你是 Jenkins 的新手，我建议你先从本书中出来，花一些时间阅读几个教程，尝试
工具，还将是第 13 章的基石之一。我们将其用作蓝绿部署工具集的一部分。如果
他们决定如何构建、测试和部署他们的服务，以及根据每个分支来调整过程的自
后，允许每个团队在他们的代码库的 Jenkins 文件中放置其脚本。此外，我们给予
水线。我们在 cd 节点上有了一个工具脚本，以便其他人可以重用常用功能。然
行，并且这个更改将被部署到生产环境中。
通过 Ansible 创建Jenkins 作业的方式远谈不上完美。我们可以使用其中一个
这是一个专门对CI/CD工具和Jenkins的简要介绍。Jenkins不仅是一个CI/CD
MultibranchWorkflow和Jenkinsfile的引进很大程度上改进了我们的部署流
一起引入 Jenkins Workflow与 Docker和 Multibranch 插件是对工具箱的宝贵补
12.1CI/CD工具对比217
---
## Page 231
218第12章持续集成、交付和部署的工具
vagrantdestroy-f
exit
可能是我们能做得最好的了，现在，转向下一个主题，探讨蓝绿部署的益处。
资，我建议你评估Jenkins 企业版。它相对于开源版本来说有了很多改进。
该考虑付费软件。如果你选择使用Jenkins，并且你的项目或组织的大小有条件投
的其余部分也会基于开源软件。这并不意味着付费解决方案不值得投资，而是应
其他问题的工具。然而，我们现在使用的所有例子都是基于开源软件的，在本书
在继续第13章之前，先销毁我们在这章用的虚拟机。
考虑到我们已有的工具而且为了保证部署步骤的相对统一，目前的解决方案
---
## Page 232
与旧版本并行部署新版本。我们把新旧版本分别表示为蓝和绿，如图13-1所示。
单：在任何时候，都会有一个版本在运行。这意味着，在部署流程中，我们需要
很多方法来解决这个问题，大多数采用的都是蓝绿部署的变体。背后的原理很简
块应用，那么问题还不止这些，比如，等应用初始化就需要很长时间。人们试了
一毫秒，也有可能持续几分钟，在某些极端情况下还可能达到几小时。如果是单
的这段时间，服务是不可用的。无论这个过程有多快，总会有停机时间。也许是
后把新版本放上来。这种方法的问题在于，从旧版本停掉到新版本真正开始运行
产品新版本发布的传统做法是用新版本替代旧版本。我们把旧版本停掉，然
图13-1任何时候都至少有一个版本在运行
微服务
Blue-Green Deployment
操作系统
数据库
节点
代理
微服务
第13章
本微与例
部
蓝绿部署
---
## Page 233
220
第13章蓝绿部署
13.1
个版本之间的时间间隔应该要短，如若不然，引入的代码改动就应该较小。
向后兼容可能根本无法做到，甚至不值得做。如果要持续交付或者持续部署，两
本之间的兼容会更容易些。如果版本之间相隔数周或者数月，数据库改动太大，
相隔的时间有关。如果版本更换频繁，对数据库做的改动就比较小，维护两个版
库，使得它能支持两个版本再进行部署。数据库升级可能产生的问题与两个版本
务和容器的框架中，则使用一个生产结点就能执行这个流程，一起运行两个版
会产生极大的威力，部署过程会变得更加安全、可靠。如果把它应用在基于微服
率要高得多。
统恢复成以前的状态。相比从备份中恢复应用或者重做一次部署，这样回滚，效
流量转移到新版本之后出现了问题，我们也能及时将流量再转移回旧版本，将系
本上去。通常来说，这意味着集成测试在部署之后“流量转移"之前实行。即使当
本测试完全了，保证在任何生产结点上都没有问题，我们才能把流量转移到新版
可能性。当发生这种情况时，我们还可以依靠当前版本来维持服务。只有等新版
险。不管软件在到达生产结点之前测试得多么完备，总是有在上线后出点问题的
版本上。这个转移通常借助于路由器或者代理服务来完成。
色表示的新版本，等新版本完全可用之后，再把所有的流量从当前版本转移到新
这种方法对数据库提出了很大的挑战。大多数情况下，我们需要升级数据
如果把蓝绿部署和不可变部署结合起来（通过以前的虚拟机和现在的容器），
蓝绿部署不仅使我们免于部署停机时间的困扰，还降低了部署可能引入的风
蓝绿部署的流程
我们使用一个颜色作为当前版本，
The blue-green deployment process
，在运行当前版本的同时，启动用另一种颜
---
## Page 234