    response.GetString(columnNoState),
    response.GetInt64(columnNoDailyDamage));
}
```
### [Python](#tab/python)
```python
state_col = 0
start_time_col = next(col.ordinal for col in response.primary_results[0].columns if col.column_name == "StartTime")
damage_col = 2
print("Daily damages over 100,000,000$:")
for row in response.primary_results[0]:
  print(row[start_time_col], "-", row[state_col], ",", row[damage_col], "$")
```
### [Typescript](#tab/typescript)
```typescript
const columnNoState = 0;
const columnNoStartTime = response.primaryResults[0].columns.find(c => c.name == "StartTime").ordinal;
const columnNoDailyDamage = 2;
console.log("Daily tornado damages over 100,000,000$:");
for (row of response.primaryResults[0].rows()) {
  console.log(row.getValueAt(columnNoStartTime).toString(), "-", row.getValueAt(columnNoState).toString(), ",", row.getValueAt(columnNoDailyDamage).toString(), "$");
}
```
### [Java](#tab/java)
```java
Integer columnNoState = 0;
Integer columnNoStartTime = primaryResults.findColumn("StartTime");
Integer columnNoDailyDamage = 2;
while (primaryResults.next()) {
  System.out.println(primaryResults.getString(columnNoStartTime) + " - " + primaryResults.getString(columnNoState) + " , " + primaryResults.getString(columnNoDailyDamage));
}
```
---
## Customize query behavior with client request properties
You can customize the behavior of a query by setting client request properties. For more information on available options, see [client request properties](../netfx/request-properties.md).
For example, you can replace the `kusto_client.execute_query` call in the previous code to pass a custom request ID and set the query timeout to 1 minute. To use the client request properties, you must import the `ClientRequestProperties` class.
### [C\#](#tab/csharp)
```csharp
using Kusto.Data.Common;
var crp = new ClientRequestProperties();
// Set a custom client request identifier
crp.ClientRequestId = "QueryDemo" + Guid.NewGuid().ToString();
// Set the query timeout to 1 minute
crp.SetOption(ClientRequestProperties.OptionServerTimeout, "1m");
using (var response = kustoClient.ExecuteQuery(database, query, crp)) {
}
```
### [Python](#tab/python)
```python
from azure.kusto.data import ClientRequestProperties
from datetime import datetime
import uuid;
crp = ClientRequestProperties()
# Set a custom client request identifier
crp.client_request_id = "QueryDemo" + str(uuid.uuid4())
# Set the query timeout to 1 minute
crp.set_option(crp.request_timeout_option_name, datetime.timedelta(minutes=1))
response = kusto_client.execute_query(database, query, crp)
```
### [Typescript](#tab/typescript)
```typescript
import { ClientRequestProperties } from "azure-kusto-data";
import { v4 as uuidv4 } from "uuid";
const crp = new ClientRequestProperties();
// Set a custom client request identifier
crp.clientRequestId = "QueryDemo" + uuidv4();
// Set the query timeout to 1 minute
crp.setServerTimeout(1000 * 60);
const response = await kustoClient.execute(database, query, crp);
```
### [Java](#tab/java)
```java
import com.microsoft.azure.kusto.data.ClientRequestProperties;
import java.util.UUID;
import java.util.concurrent.TimeUnit;
ClientRequestProperties crp = new ClientRequestProperties();
// Set a custom client request identifier
crp.setClientRequestId("QueryDemo" + UUID.randomUUID());
// Set the query timeout to 1 minute
crp.setTimeoutInMilliSec(TimeUnit.MINUTES.toMillis(60));
KustoOperationResult response = kusto_client.execute(database, query, crp);
```
---
## Use query parameters to protect user input
Query parameters are important for maintaining the security and protection of your data. It safeguards it from potential malicious actors that may attempt to gain unauthorized access to or corrupt your data. For more information about parameterized queries, see [Query parameters declaration statement](../../query/query-parameters-statement.md).
For example, you can modify the previous code to pass the *EventType* value and *DailyDamage* minimum value as parameters to the query. To use parameters:
1. Declare the parameters in the query text
1. Substitute the property values in the query text with the parameter names
1. Set the parameter values in the client request properties passed to the execute method
### [C\#](#tab/csharp)
```csharp
string query = @"declare query_parameters(event_type:string, daily_damage:int);
                  StormEvents
                  | where EventType == event_type
                  | extend TotalDamage = DamageProperty + DamageCrops
                  | summarize DailyDamage=sum(TotalDamage) by State, bin(StartTime, 1d)
                  | where DailyDamage > daily_damage
                  | order by DailyDamage desc";
var crp = new ClientRequestProperties();
crp.SetParameter("event_type", "Flash Flood");
crp.SetParameter("daily_damage", 200000000.ToString());
using (var response = kustoClient.ExecuteQuery(database, query, crp)) {
  int columnNoStartTime = response.GetOrdinal("StartTime");
  int columnNoState = response.GetOrdinal("State");
  int columnNoDailyDamage = response.GetOrdinal("DailyDamage");
  Console.WriteLine("Daily flash flood damages over 200,000,000$:");
  while (response.Read()) {
    Console.WriteLine("{0} - {1}, {2}",
      response.GetDateTime(columnNoStartTime),
      response.GetString(columnNoState),
      response.GetInt64(columnNoDailyDamage));
  }
}
```
### [Python](#tab/python)
```python
query = "declare query_parameters(event_type:string, daily_damage:int);"\
        "StormEvents" \
        "| where EventType == event_type" \
        "| extend TotalDamages = DamageProperty + DamageCrops" \
        "| summarize DailyDamage=sum(TotalDamages) by State, bin(StartTime, 1d)" \
        "| where DailyDamage > daily_damage" \
        "| order by DailyDamage desc"
crp = ClientRequestProperties()
crp.set_parameter("event_type", "Flash Flood")
crp.set_parameter("daily_damage", str(200000000))
response = kusto_client.execute_query(=database, query, crp)
print("Daily flash flood damages over 200,000,000$:")
for row in response.primary_results[0]:
  print(row["StartTime"], "-", row["State"], ",", row["DailyDamage"], "$")
```
### [Typescript](#tab/typescript)
```typescript
const query = `declare query_parameters(event_type:string, daily_damage:int);
               StormEvents
               | where EventType == event_type
               | extend TotalDamage = DamageProperty + DamageCrops
               | summarize DailyDamage=sum(TotalDamage) by State, bin(StartTime, 1d)
               | where DailyDamage > daily_damage
               | order by DailyDamage desc`;
const crp = new ClientRequestProperties();
crp.setParameter("event_type", "Flash Flood");
crp.setParameter("daily_damage", 200000000);
const response = await kustoClient.execute(database, query, crp);
console.log("Daily flash flood damages over 200,000,000$:");
for (row of response.primaryResults[0].rows()) {
  console.log(row.getValueAt(columnNoStartTime).toString(), "-", row.getValueAt(columnNoState).toString(), ",", row.getValueAt(columnNoDailyDamage).toString(), "$");
}
```
### [Java](#tab/java)
```java
String query = "declare query_parameters(event_type:string, daily_damage:int);\n" +
               "StormEvents\n" +
               "| where EventType == event_type\n" +
               "| extend TotalDamage = DamageProperty + DamageCrops\n" +
               "| summarize DailyDamage=sum(TotalDamage) by State, bin(StartTime, 1d)\n" +
               "| where DailyDamage > daily_damage\n" +
               "| order by DailyDamage desc";
ClientRequestProperties crp = new ClientRequestProperties();
crp.setParameter("event_type", "Flash Flood");
crp.setParameter("daily_damage", 200000000);
KustoOperationResult response = kusto_client.execute(database, query, crp);
KustoResultSetTable primary_results = response.getPrimaryResults();
System.out.println("Daily flash flood damages over 200,000,000$:");
while (primary_results.next()) {
  System.out.println("DEBUG: " + primary_results.getString(columnNoStartTime) + " - " + primary_results.getString(columnNoState) + " , " + primary_results.getString(columnNoDailyDamage));
}
```
---
The complete code using ordinal positions to access column values and parameters should look like this:
### [C\#](#tab/csharp)
```csharp
using Kusto.Data;
using Kusto.Data.Common;
using Kusto.Data.Net.Client;
namespace BasicQuery {
  class BasicQuery {
    static void Main(string[] args) {
      string clusterUri = "https://help.kusto.windows.net/";
      var kcsb = new KustoConnectionStringBuilder(clusterUri)
          .WithAadUserPromptAuthentication();
      using (var kustoClient = KustoClientFactory.CreateCslQueryProvider(kcsb)) {
        string database = "Samples";
        string query = @"declare query_parameters(event_type:string, daily_damage:int);
                         StormEvents
                         | where EventType == event_type
                         | extend TotalDamage = DamageProperty + DamageCrops
                         | summarize DailyDamage=sum(TotalDamage) by State, bin(StartTime, 1d)
                         | where DailyDamage > daily_damage
                         | order by DailyDamage desc";
        var crp = new ClientRequestProperties();
        crp.ClientRequestId = "QueryDemo" + Guid.NewGuid().ToString();
        crp.SetOption(ClientRequestProperties.OptionServerTimeout, "1m");
        crp.SetParameter("event_type", "Flash Flood");
        crp.SetParameter("daily_damage", 200000000.ToString());
        using (var response = kustoClient.ExecuteQuery(database, query, crp)) {
          int columnNoStartTime = response.GetOrdinal("StartTime");
          int columnNoState = response.GetOrdinal("State");
          int columnNoDailyDamage = response.GetOrdinal("DailyDamage");
          Console.WriteLine("Daily flash flood damages over 200,000,000$:");
          while (response.Read()) {
            Console.WriteLine("{0} - {1}, {2}",
              response.GetDateTime(columnNoStartTime),
              response.GetString(columnNoState),
              response.GetInt64(columnNoDailyDamage));
          }
        }
      }
    }
  }
}
```
### [Python](#tab/python)
```python
from azure.kusto.data import KustoClient, KustoConnectionStringBuilder, ClientRequestProperties
from datetime import timedelta
import uuid;
def main():
  cluster_uri = "https://help.kusto.windows.net"
  kcsb = KustoConnectionStringBuilder.with_interactive_login(cluster_uri)
  crp = ClientRequestProperties()
  crp.client_request_id = "QueryDemo" + str(uuid.uuid4())
  crp.set_option(crp.request_timeout_option_name, timedelta(minutes=1))
  crp.set_parameter("event_type", "Flash Flood")
  crp.set_parameter("daily_damage", str(200000000))
  with KustoClient(kcsb) as kusto_client:
    database = "Samples"
    query = "declare query_parameters(event_type:string, daily_damage:int);"\
            "StormEvents" \
            "| where EventType == event_type" \
            "| extend TotalDamages = DamageProperty + DamageCrops" \
            "| summarize DailyDamage=sum(TotalDamages) by State, bin(StartTime, 1d)" \
            "| where DailyDamage > daily_damage" \
            "| order by DailyDamage desc"
    response = kusto_client.execute_query(database, query, crp)
    state_col = 0
    start_time_col = next(col.ordinal for col in response.primary_results[0].columns if col.column_name == "StartTime")
    damage_col = 2
    print("Daily flash flood damages over 200,000,000$:")
    for row in response.primary_results[0]:
      print(row[start_time_col], "-", row[state_col], ",", row[damage_col], "$")
if __name__ == "__main__":
  main()
```
### [Typescript](#tab/typescript)
```typescript
import {  
    Client as KustoClient,
    KustoConnectionStringBuilder,
    ClientRequestProperties
} from "azure-kusto-data";
import { v4 as uuidv4 } from "uuid";
async function main() {
  const clusterUri = "https://help.kusto.windows.net";
  const kcsb = KustoConnectionStringBuilder.withUserPrompt(clusterUri);
  const kustoClient = new KustoClient(kcsb);
  const database = "Samples";
  const query = `declare query_parameters(event_type:string, daily_damage:int);
                 StormEvents
                 | where EventType == event_type
                 | extend TotalDamage = DamageProperty + DamageCrops
                 | summarize DailyDamage=sum(TotalDamage) by State, bin(StartTime, 1d)
                 | where DailyDamage > daily_damage
                 | order by DailyDamage desc`;
  const crp = new ClientRequestProperties();
  // Set a custom client request identifier
  crp.clientRequestId = "QueryDemo" + uuidv4();
  // Set the query timeout to 1 minute
  crp.setTimeout(1000 * 60);
  crp.setParameter("event_type", "Flash Flood");
  crp.setParameter("daily_damage", 200000000);
  const response = await kustoClient.execute(database, query, crp);
  const columnNoState = 0;
  const columnNoStartTime = response.primaryResults[0].columns.find(c => c.name == "StartTime").ordinal;
  const columnNoDailyDamage = 2;
  console.log("Daily flash flood damages over 200,000,000$:");
  for (row of response.primaryResults[0].rows()) {
    console.log(row.getValueAt(columnNoStartTime).toString(), "-", row.getValueAt(columnNoState).toString(), ",", row.getValueAt(columnNoDailyDamage).toString(), "$");
  }
}
main();
```
### [Java](#tab/java)
```java
import com.microsoft.azure.kusto.data.Client;
import com.microsoft.azure.kusto.data.ClientFactory;
import com.microsoft.azure.kusto.data.KustoOperationResult;
import com.microsoft.azure.kusto.data.KustoResultSetTable;
import com.microsoft.azure.kusto.data.auth.ConnectionStringBuilder;
import com.microsoft.azure.kusto.data.ClientRequestProperties;
import java.util.UUID;
import java.util.concurrent.TimeUnit;
public class BasicQuery {
  public static void main(String[] args) throws Exception {
    try {
      String clusterUri = "https://help.kusto.windows.net/";
      ConnectionStringBuilder kcsb = ConnectionStringBuilder.createWithUserPrompt(clusterUri);
      try (Client kustoClient = ClientFactory.createClient(kcsb)) {
        String database = "Samples";
        String query = "declare query_parameters(event_type:string, daily_damage:int);\n" +
                       "StormEvents\n" +
                       "| where EventType == event_type\n" +
                       "| extend TotalDamage = DamageProperty + DamageCrops\n" +
                       "| summarize DailyDamage=sum(TotalDamage) by State, bin(StartTime, 1d)\n" +
                       "| where DailyDamage > daily_damage\n" +
                       "| order by DailyDamage desc";
        ClientRequestProperties crp = new ClientRequestProperties();
        // Set a custom client request identifier
        crp.setClientRequestId("QueryDemo" + UUID.randomUUID());
        // Set the query timeout to 1 minute
        crp.setTimeoutInMilliSec(TimeUnit.MINUTES.toMillis(60));
        crp.setParameter("event_type", "Flash Flood");
        crp.setParameter("daily_damage", 200000000);
        KustoOperationResult response = kustoClient.execute(database, query, crp);
        KustoResultSetTable primaryResults = response.getPrimaryResults();
        Integer columnNoState = 0;
        Integer columnNoStartTime = primaryResults.findColumn("StartTime");
        Integer columnNoDailyDamage = 2;
        System.out.println("Daily flash flood damages over 200,000,000$:");
        while (primaryResults.next()) {
          System.out.println("DEBUG: " + primaryResults.getString(columnNoStartTime) + " - " + primaryResults.getString(columnNoState) + " , " + primaryResults.getString(columnNoDailyDamage));
        }
      }
    }
  }
}
```
---
You should see a result similar to the following:
```bash
Daily flash flood damages over 200,000,000$:
2007-08-21 00:00:00+00:00 - OHIO , 253320000 $
```
## Next step
> [!div class="nextstepaction"]
> [Create an app to run management commands](app-management-commands.md)