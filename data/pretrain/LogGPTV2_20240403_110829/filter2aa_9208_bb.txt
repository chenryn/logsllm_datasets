\&    vec($_, 2, 1) = 1   ==          4 00100000000000000000000000000000
\&    vec($_, 3, 1) = 1   ==          8 00010000000000000000000000000000
\&    vec($_, 4, 1) = 1   ==         16 00001000000000000000000000000000
\&    vec($_, 5, 1) = 1   ==         32 00000100000000000000000000000000
\&    vec($_, 6, 1) = 1   ==         64 00000010000000000000000000000000
\&    vec($_, 7, 1) = 1   ==        128 00000001000000000000000000000000
\&    vec($_, 8, 1) = 1   ==        256 00000000100000000000000000000000
\&    vec($_, 9, 1) = 1   ==        512 00000000010000000000000000000000
\&    vec($_,10, 1) = 1   ==       1024 00000000001000000000000000000000
\&    vec($_,11, 1) = 1   ==       2048 00000000000100000000000000000000
\&    vec($_,12, 1) = 1   ==       4096 00000000000010000000000000000000
\&    vec($_,13, 1) = 1   ==       8192 00000000000001000000000000000000
\&    vec($_,14, 1) = 1   ==      16384 00000000000000100000000000000000
\&    vec($_,15, 1) = 1   ==      32768 00000000000000010000000000000000
\&    vec($_,16, 1) = 1   ==      65536 00000000000000001000000000000000
\&    vec($_,17, 1) = 1   ==     131072 00000000000000000100000000000000
\&    vec($_,18, 1) = 1   ==     262144 00000000000000000010000000000000
\&    vec($_,19, 1) = 1   ==     524288 00000000000000000001000000000000
\&    vec($_,20, 1) = 1   ==    1048576 00000000000000000000100000000000
\&    vec($_,21, 1) = 1   ==    2097152 00000000000000000000010000000000
\&    vec($_,22, 1) = 1   ==    4194304 00000000000000000000001000000000
\&    vec($_,23, 1) = 1   ==    8388608 00000000000000000000000100000000
\&    vec($_,24, 1) = 1   ==   16777216 00000000000000000000000010000000
\&    vec($_,25, 1) = 1   ==   33554432 00000000000000000000000001000000
\&    vec($_,26, 1) = 1   ==   67108864 00000000000000000000000000100000
\&    vec($_,27, 1) = 1   ==  134217728 00000000000000000000000000010000
\&    vec($_,28, 1) = 1   ==  268435456 00000000000000000000000000001000
\&    vec($_,29, 1) = 1   ==  536870912 00000000000000000000000000000100
\&    vec($_,30, 1) = 1   == 1073741824 00000000000000000000000000000010
\&    vec($_,31, 1) = 1   == 2147483648 00000000000000000000000000000001
\&    vec($_, 0, 2) = 1   ==          1 10000000000000000000000000000000
\&    vec($_, 1, 2) = 1   ==          4 00100000000000000000000000000000
\&    vec($_, 2, 2) = 1   ==         16 00001000000000000000000000000000
\&    vec($_, 3, 2) = 1   ==         64 00000010000000000000000000000000
\&    vec($_, 4, 2) = 1   ==        256 00000000100000000000000000000000
\&    vec($_, 5, 2) = 1   ==       1024 00000000001000000000000000000000
\&    vec($_, 6, 2) = 1   ==       4096 00000000000010000000000000000000
\&    vec($_, 7, 2) = 1   ==      16384 00000000000000100000000000000000
\&    vec($_, 8, 2) = 1   ==      65536 00000000000000001000000000000000
\&    vec($_, 9, 2) = 1   ==     262144 00000000000000000010000000000000
\&    vec($_,10, 2) = 1   ==    1048576 00000000000000000000100000000000
\&    vec($_,11, 2) = 1   ==    4194304 00000000000000000000001000000000
\&    vec($_,12, 2) = 1   ==   16777216 00000000000000000000000010000000
\&    vec($_,13, 2) = 1   ==   67108864 00000000000000000000000000100000
\&    vec($_,14, 2) = 1   ==  268435456 00000000000000000000000000001000
\&    vec($_,15, 2) = 1   == 1073741824 00000000000000000000000000000010
\&    vec($_, 0, 2) = 2   ==          2 01000000000000000000000000000000
\&    vec($_, 1, 2) = 2   ==          8 00010000000000000000000000000000
\&    vec($_, 2, 2) = 2   ==         32 00000100000000000000000000000000
\&    vec($_, 3, 2) = 2   ==        128 00000001000000000000000000000000
\&    vec($_, 4, 2) = 2   ==        512 00000000010000000000000000000000
\&    vec($_, 5, 2) = 2   ==       2048 00000000000100000000000000000000
\&    vec($_, 6, 2) = 2   ==       8192 00000000000001000000000000000000
\&    vec($_, 7, 2) = 2   ==      32768 00000000000000010000000000000000
\&    vec($_, 8, 2) = 2   ==     131072 00000000000000000100000000000000
\&    vec($_, 9, 2) = 2   ==     524288 00000000000000000001000000000000
\&    vec($_,10, 2) = 2   ==    2097152 00000000000000000000010000000000
\&    vec($_,11, 2) = 2   ==    8388608 00000000000000000000000100000000
\&    vec($_,12, 2) = 2   ==   33554432 00000000000000000000000001000000
\&    vec($_,13, 2) = 2   ==  134217728 00000000000000000000000000010000
\&    vec($_,14, 2) = 2   ==  536870912 00000000000000000000000000000100
\&    vec($_,15, 2) = 2   == 2147483648 00000000000000000000000000000001
\&    vec($_, 0, 4) = 1   ==          1 10000000000000000000000000000000
\&    vec($_, 1, 4) = 1   ==         16 00001000000000000000000000000000
\&    vec($_, 2, 4) = 1   ==        256 00000000100000000000000000000000
\&    vec($_, 3, 4) = 1   ==       4096 00000000000010000000000000000000
\&    vec($_, 4, 4) = 1   ==      65536 00000000000000001000000000000000
\&    vec($_, 5, 4) = 1   ==    1048576 00000000000000000000100000000000
\&    vec($_, 6, 4) = 1   ==   16777216 00000000000000000000000010000000
\&    vec($_, 7, 4) = 1   ==  268435456 00000000000000000000000000001000
\&    vec($_, 0, 4) = 2   ==          2 01000000000000000000000000000000
\&    vec($_, 1, 4) = 2   ==         32 00000100000000000000000000000000
\&    vec($_, 2, 4) = 2   ==        512 00000000010000000000000000000000
\&    vec($_, 3, 4) = 2   ==       8192 00000000000001000000000000000000
\&    vec($_, 4, 4) = 2   ==     131072 00000000000000000100000000000000
\&    vec($_, 5, 4) = 2   ==    2097152 00000000000000000000010000000000
\&    vec($_, 6, 4) = 2   ==   33554432 00000000000000000000000001000000
\&    vec($_, 7, 4) = 2   ==  536870912 00000000000000000000000000000100
\&    vec($_, 0, 4) = 4   ==          4 00100000000000000000000000000000
\&    vec($_, 1, 4) = 4   ==         64 00000010000000000000000000000000
\&    vec($_, 2, 4) = 4   ==       1024 00000000001000000000000000000000
\&    vec($_, 3, 4) = 4   ==      16384 00000000000000100000000000000000
\&    vec($_, 4, 4) = 4   ==     262144 00000000000000000010000000000000
\&    vec($_, 5, 4) = 4   ==    4194304 00000000000000000000001000000000
\&    vec($_, 6, 4) = 4   ==   67108864 00000000000000000000000000100000
\&    vec($_, 7, 4) = 4   == 1073741824 00000000000000000000000000000010
\&    vec($_, 0, 4) = 8   ==          8 00010000000000000000000000000000
\&    vec($_, 1, 4) = 8   ==        128 00000001000000000000000000000000
\&    vec($_, 2, 4) = 8   ==       2048 00000000000100000000000000000000
\&    vec($_, 3, 4) = 8   ==      32768 00000000000000010000000000000000
\&    vec($_, 4, 4) = 8   ==     524288 00000000000000000001000000000000
\&    vec($_, 5, 4) = 8   ==    8388608 00000000000000000000000100000000
\&    vec($_, 6, 4) = 8   ==  134217728 00000000000000000000000000010000
\&    vec($_, 7, 4) = 8   == 2147483648 00000000000000000000000000000001
\&    vec($_, 0, 8) = 1   ==          1 10000000000000000000000000000000
\&    vec($_, 1, 8) = 1   ==        256 00000000100000000000000000000000
\&    vec($_, 2, 8) = 1   ==      65536 00000000000000001000000000000000
\&    vec($_, 3, 8) = 1   ==   16777216 00000000000000000000000010000000
\&    vec($_, 0, 8) = 2   ==          2 01000000000000000000000000000000
\&    vec($_, 1, 8) = 2   ==        512 00000000010000000000000000000000
\&    vec($_, 2, 8) = 2   ==     131072 00000000000000000100000000000000
\&    vec($_, 3, 8) = 2   ==   33554432 00000000000000000000000001000000
\&    vec($_, 0, 8) = 4   ==          4 00100000000000000000000000000000
\&    vec($_, 1, 8) = 4   ==       1024 00000000001000000000000000000000
\&    vec($_, 2, 8) = 4   ==     262144 00000000000000000010000000000000
\&    vec($_, 3, 8) = 4   ==   67108864 00000000000000000000000000100000
\&    vec($_, 0, 8) = 8   ==          8 00010000000000000000000000000000
\&    vec($_, 1, 8) = 8   ==       2048 00000000000100000000000000000000
\&    vec($_, 2, 8) = 8   ==     524288 00000000000000000001000000000000
\&    vec($_, 3, 8) = 8   ==  134217728 00000000000000000000000000010000
\&    vec($_, 0, 8) = 16  ==         16 00001000000000000000000000000000
\&    vec($_, 1, 8) = 16  ==       4096 00000000000010000000000000000000
\&    vec($_, 2, 8) = 16  ==    1048576 00000000000000000000100000000000
\&    vec($_, 3, 8) = 16  ==  268435456 00000000000000000000000000001000
\&    vec($_, 0, 8) = 32  ==         32 00000100000000000000000000000000
\&    vec($_, 1, 8) = 32  ==       8192 00000000000001000000000000000000
\&    vec($_, 2, 8) = 32  ==    2097152 00000000000000000000010000000000
\&    vec($_, 3, 8) = 32  ==  536870912 00000000000000000000000000000100
\&    vec($_, 0, 8) = 64  ==         64 00000010000000000000000000000000
\&    vec($_, 1, 8) = 64  ==      16384 00000000000000100000000000000000
\&    vec($_, 2, 8) = 64  ==    4194304 00000000000000000000001000000000
\&    vec($_, 3, 8) = 64  == 1073741824 00000000000000000000000000000010
\&    vec($_, 0, 8) = 128 ==        128 00000001000000000000000000000000
\&    vec($_, 1, 8) = 128 ==      32768 00000000000000010000000000000000
\&    vec($_, 2, 8) = 128 ==    8388608 00000000000000000000000100000000
\&    vec($_, 3, 8) = 128 == 2147483648 00000000000000000000000000000001
.Ve
.IP "wait" 8
.IX Item "wait"
Behaves like the \fIwait\fR\|(2) system call on your system: it waits for a child
process to terminate and returns the pid of the deceased process, or
\&\f(CW\*(C`\-1\*(C'\fR if there are no child processes.  The status is returned in \f(CW$?\fR.
Note that a return value of \f(CW\*(C`\-1\*(C'\fR could mean that child processes are
being automatically reaped, as described in perlipc.
.IP "waitpid \s-1PID\s0,FLAGS" 8
.IX Item "waitpid PID,FLAGS"
Waits for a particular child process to terminate and returns the pid of
the deceased process, or \f(CW\*(C`\-1\*(C'\fR if there is no such child process.  On some
systems, a value of 0 indicates that there are processes still running.
The status is returned in \f(CW$?\fR.  If you say
.Sp
.Vb 5
\&    use POSIX ":sys_wait_h";
\&    #...
\&    do {
\&        $kid = waitpid(-1, WNOHANG);
\&    } until $kid > 0;
.Ve
.Sp
then you can do a non-blocking wait for all pending zombie processes.
Non-blocking wait is available on machines supporting either the
\&\fIwaitpid\fR\|(2) or \fIwait4\fR\|(2) system calls.  However, waiting for a particular
pid with \s-1FLAGS\s0 of \f(CW0\fR is implemented everywhere.  (Perl emulates the
system call by remembering the status values of processes that have
exited but have not been harvested by the Perl script yet.)
.Sp
Note that on some systems, a return value of \f(CW\*(C`\-1\*(C'\fR could mean that child
processes are being automatically reaped.  See perlipc for details,
and for other examples.
.IP "wantarray" 8
.IX Item "wantarray"
Returns true if the context of the currently executing subroutine is
looking for a list value.  Returns false if the context is looking
for a scalar.  Returns the undefined value if the context is looking
for no value (void context).
.Sp
.Vb 3
\&    return unless defined wantarray;    # don't bother doing more
\&    my @a = complex_calculation();
\&    return wantarray ? @a : "@a";
.Ve
.Sp
This function should have been named \fIwantlist()\fR instead.
.IP "warn \s-1LIST\s0" 8
.IX Item "warn LIST"
Produces a message on \s-1STDERR\s0 just like \f(CW\*(C`die\*(C'\fR, but doesn't exit or throw
an exception.
.Sp
If \s-1LIST\s0 is empty and \f(CW$@\fR already contains a value (typically from a
previous eval) that value is used after appending \f(CW"\et...caught"\fR
to \f(CW$@\fR.  This is useful for staying almost, but not entirely similar to
\&\f(CW\*(C`die\*(C'\fR.
.Sp
If \f(CW$@\fR is empty then the string \f(CW"Warning: Something's wrong"\fR is used.
.Sp
No message is printed if there is a \f(CW$SIG{_\|_WARN_\|_}\fR handler
installed.  It is the handler's responsibility to deal with the message
as it sees fit (like, for instance, converting it into a \f(CW\*(C`die\*(C'\fR).  Most
handlers must therefore make arrangements to actually display the
warnings that they are not prepared to deal with, by calling \f(CW\*(C`warn\*(C'\fR
again in the handler.  Note that this is quite safe and will not
produce an endless loop, since \f(CW\*(C`_\|_WARN_\|_\*(C'\fR hooks are not called from
inside one.
.Sp
You will find this behavior is slightly different from that of
\&\f(CW$SIG{_\|_DIE_\|_}\fR handlers (which don't suppress the error text, but can
instead call \f(CW\*(C`die\*(C'\fR again to change it).
.Sp
Using a \f(CW\*(C`_\|_WARN_\|_\*(C'\fR handler provides a powerful way to silence all
warnings (even the so-called mandatory ones).  An example:
.Sp
.Vb 7
\&    # wipe out *all* compile-time warnings
\&    BEGIN { $SIG{'__WARN__'} = sub { warn $_[0] if $DOWARN } }
\&    my $foo = 10;
\&    my $foo = 20;          # no warning about duplicate my $foo,
\&                           # but hey, you asked for it!
\&    # no compile-time or run-time warnings before here
\&    $DOWARN = 1;
.Ve
.Sp
.Vb 2
\&    # run-time warnings enabled after here
\&    warn "\e$foo is alive and $foo!";     # does show up
.Ve
.Sp
See perlvar for details on setting \f(CW%SIG\fR entries, and for more
examples.  See the Carp module for other kinds of warnings using its
\&\fIcarp()\fR and \fIcluck()\fR functions.
.IP "write \s-1FILEHANDLE\s0" 8
.IX Item "write FILEHANDLE"
.PD 0
.IP "write \s-1EXPR\s0" 8
.IX Item "write EXPR"
.IP "write" 8
.IX Item "write"
.PD
Writes a formatted record (possibly multi\-line) to the specified \s-1FILEHANDLE\s0,
using the format associated with that file.  By default the format for
a file is the one having the same name as the filehandle, but the
format for the current output channel (see the \f(CW\*(C`select\*(C'\fR function) may be set
explicitly by assigning the name of the format to the \f(CW$~\fR variable.
.Sp
Top of form processing is handled automatically:  if there is
insufficient room on the current page for the formatted record, the
page is advanced by writing a form feed, a special top-of-page format
is used to format the new page header, and then the record is written.
By default the top-of-page format is the name of the filehandle with
\&\*(L"_TOP\*(R" appended, but it may be dynamically set to the format of your
choice by assigning the name to the \f(CW$^\fR variable while the filehandle is
selected.  The number of lines remaining on the current page is in
variable \f(CW\*(C`$\-\*(C'\fR, which can be set to \f(CW0\fR to force a new page.
.Sp
If \s-1FILEHANDLE\s0 is unspecified, output goes to the current default output
channel, which starts out as \s-1STDOUT\s0 but may be changed by the
\&\f(CW\*(C`select\*(C'\fR operator.  If the \s-1FILEHANDLE\s0 is an \s-1EXPR\s0, then the expression
is evaluated and the resulting string is used to look up the name of
the \s-1FILEHANDLE\s0 at run time.  For more on formats, see perlform.
.Sp
Note that write is \fInot\fR the opposite of \f(CW\*(C`read\*(C'\fR.  Unfortunately.
.IP "y///" 8
.IX Item "y///"
The transliteration operator.  Same as \f(CW\*(C`tr///\*(C'\fR.  See perlop.