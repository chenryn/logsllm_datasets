另外，你也可以通过以下方式设置防火墙拦截 Snap API：
```
sudo iptables -A OUTPUT -d api.snapcraft.io -j DROP
```
### 在无 snapd 环境下运行 snaps
`.snap` 文件实际上就是一个压缩的文件系统，它包含着程序文件（以及各种库等），这些都被存放在一个传统的目录结构中，而该目录结构对于打包在 Snap 应用程序内的应用来说，就是它的根目录。Snapd 负责为此设置挂载名空间，并通过 [Apparmor](https://apparmor.net/) 和 [seccomp](https://man7.org/linux/man-pages/man2/seccomp.2.html) 实现安全隔离。
你可以将其内容解压并直接运行：
```
unsquashfs firefox_3252.snap  
Parallel unsquashfs: Using 20 processors
565 inodes (5428 blocks) to write
[=====================/] 5428/5428 100%
created 399 files
created 149 directories
created 166 symlinks
created 0 devices
created 0 fifos
created 0 sockets
ll squashfs-root/
total 80
drwxr-xr-x  7 igor igor  4096 lis  10 02:33 ./
drwxr-xr-x 10 igor igor  4096 lis  19 15:32 ../
drwxr-xr-x  5 igor igor  4096 lis  10 02:33 data-dir/
-rw-r--r--  1 igor igor 32441 lis  10 02:33 default256.png
-rw-r--r--  1 igor igor  9146 lis  10 02:33 firefox.desktop
-rwxr-xr-x  1 igor igor  2680 lis  10 02:33 firefox.launcher*
drwxr-xr-x  2 igor igor  4096 lis  10 02:33 gnome-platform/
drwxr-xr-x  4 igor igor  4096 lis  10 02:33 meta/
-rwxr-xr-x  1 igor igor  3716 lis  10 02:33 patch-default-profile.py*
drwxr-xr-x  4 igor igor  4096 lis  10 02:33 snap/
drwxr-xr-x  4 igor igor  4096 sij  19  2022 usr/
```
如果你查看 Snap 内 Firefox 二进制文件的动态依赖，你会注意到它希望从根文件系统中获取文件：
```
ldd usr/lib/firefox/firefox-bin
       linux-vdso.so.1 (0x00007fff33cc5000)
       libstdc++.so.6 => /lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007f6cf2c00000)
       libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f6cf2e40000)
       libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007f6cf2be0000)
       libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f6cf2800000)
       /lib64/ld-linux-x86-64.so.2 (0x00007f6cf300e000)
```
在 Snap 内部，这个“根”就是你的基础系统（比如 core18 或 core20 等）。但是一旦你解压了这个 Snap，没有 snapd 在安装和运行 Snap 时提供的安全隔离，Firefox 将会尝试直接访问你的根目录的库。这可能会导致执行时的不一致性。
举例来说，你的 Snap 内可能包含的是 GNOME 3.38 版的库，但是你的主机上运行的可能是 GNOME 3.32。如果你尝试解压并运行这个应用，它可能会试图从主机中加载库，这可能引起不一致 —— 更甚者，可能会让程序崩溃。
为了避免这种情况发生，你需要做的唯一事情就是设置 `LD_LIBRARY_PATH` 环境变量，以让程序知道其库在何处，确保它首选这些库，而不是使用可能导致其运行失败的操作系统中的库副本。
```
LD_LIBRARY_PATH: ${SNAP_LIBRARY_PATH}${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}:$SNAP/usr/lib:$SNAP/usr/lib/x86_64-linux-gnu
```
通常，你会希望 `LD_LIBRARY_PATH` 开始于 `/snap//`，然后是 `/lib`、`/usr/lib` 和其他常用路径。至于其他内容，`firefox.launcher` 文件负责准备运行环境，剩余的，比如 `firefox.desktop`，都用于桌面集成：如图标、全名、文件关联等。这些内容虽然使应用看起来效果更好，但它们并非严格的必需品。
其实，你甚至不需要解压 Snap 的内容，你可以直接将 Snap 文件本身作为一个 [回环设备](https://tldp.org/HOWTO/archived/Loopback-Root-FS/Loopback-Root-FS-2.html) 挂载 —— 你甚至可以设置为只读 —— 但没有挂载命名空间隔离。并且，如果没有设置环境让 Snap 内部的应用在寻找它的库时首先从 Snap 内部开始，你仍然需要正确地设置库路径。
### 代理和缓存 Snap 包
正如 Igor 所说，如果客户并不打算自行运营一家具备完整品牌属性的 Snap 商店，他们可以选择手动设置一个 [Snap 代理](https://docs.ubuntu.com/snap-store-proxy/en/)。对此，Canonical 也提供了相应的 [文档](https://docs.ubuntu.com/snap-store-proxy/en/install)，并描述了所需的 [网络访问](https://forum.snapcraft.io/t/network-requirements/5147) 权限。
同时，你也可以 [配置](https://snapcraft.io/blog/how-to-cache-snap-downloads-and-save-bandwidth) 一个缓存 Snap 代理 —— 这项任务稍微简单一些，对于希望降低下载带宽的家庭网络来说，可能是个不错的选择。
### 搭建自己的 Snap 商店
就如我们之前所述，你完全可以忽略所有来自 Canonical 的基础设施，直接运行自己的 Snap 商店。去年，我们写过一篇关于 Ubuntu Unity 维护者 [Rudra Saraswat](https://www.theregister.com/2022/02/04/rudra_sarsawat_ubuntu_projects/) 的文章，他就 [做到了这一点](https://gitlab.com/lol-snap/lol)，这只是他的众多项目中之一。据悉，好几个在生产环境中使用 Ubuntu Core 的组织都采取了此种做法，而所有所需的工具都存放在 Ubuntu 仓库中。
Canonical 在这方面发布了大量的文档，包括怎样构建你的 [第一个 Snap 包](https://snapcraft.io/blog/how-to-make-your-first-snap)，以及如何用 [不同的编程语言](https://snapcraft.io/docs/creating-a-snap) 构建。今年的峰会上有多场关于如何构建 Snap 的演讲 － 包括 [在平板电脑上构建 Snap 包](https://events.canonical.com/event/31/contributions/222/)，以及如何 [自动化构建更新的 Snap 包](https://events.canonical.com/event/31/contributions/217/)，虽然这对笔者来说有点过于复杂。
学习一些新的术语是有必要的，同时也有 [官方文档](https://snapcraft.io/docs/interface-management) 提供帮助。这段解释我们特别喜欢：
*  插槽   slots  是指提供方（即 Snap 提供的资源）
*  插口   plugs  是指消费者（即使用 Snap 提供的资源的用户）
*  接口   interfaces  是交互的地方（负责将插口和插槽连接起来）
从我们与 Canonical 代表的对话中，他们似乎对 Snap 商店被误解，以及 Snap 被视为封闭、专有系统的争论显得尤为不满。
大约十五年前，有人曾声称 Canonical 的代码托管和项目管理平台 [Launchpad](https://www.theregister.com/2008/07/22/ubuntu_next_launchpad/) 是专有的，所以 Canonical 在整理代码后在 2009 年 [公开发布](https://canonical.com/blog/canonical-releases-source-code-for-launchpad) 了代码库。但如我们交谈的人所言：“没人在意。” 它是 Canonical 的内部工具，对其他人来说并没有太大的用处。他们表示，他们不希望再经历一次这样的情况。
我们还注意到，红帽正在朝反方向前进，即从开源的 Bugzilla [迁移](https://www.theregister.com/2023/09/29/red_hat_bugzilla_jira_migration/) 到封闭的、基于云的 Jira —— 这并未引起太大的争议。
[snapd](https://github.com/snapcore/snapd) 自身的代码已经托管在 GitHub 上，作为 Canonical 的 [snapcore](https://github.com/snapcore) 仓库的一部分。这个被大多数发行版使用的打包格式是一个已经存在、有文档记录的格式。用于进行隔离的工具，是已经存在并在其他发行版中使用的第三方工具，比如，Debian 和 SUSE 家族也使用了 AppArmor，这与 Arch 维基中的 [描述](https://wiki.archlinux.org/title/AppArmor) 相符，而它的主要竞品，[SELinux](https://selinuxproject.org/page/Main_Page)，则更复杂，主要在红帽及其衍生产品中使用。
尽管 Canonical 自家定制的 [Snap 商店](https://snapcraft.io/store) 的后端仍然 [闭源](https://askubuntu.com/a/1383685)，但 Snap 格式、snapcore 软件、[snapcraft.io 前端](https://github.com/canonical/snapcraft.io)，以及更多组件都是开放的。我们再次强调，你完全可以自行搭建 [自己的 Snap 商店](https://ubuntu.com/blog/howto-host-your-own-snap-store)。
请不要受到愤怒的论坛喷子们的误导。
### 最后再说一点...
实际上，撰写这篇文章的作者曾经就职于红帽和 SUSE，但他主要还是使用 Ubuntu，从 2004 年 Ubuntu 刚刚发布起就开始一直使用。Ubuntu 不但运行顺畅，使用起来也十分便捷。然而，早在多年前他就已经从他的主要工作电脑上删除了 snapd 和相关的一切工具，取而代之的是 [deb-get](https://trendoceans.com/nala-package-manager/) —— 最初这是 Ubuntu MATE 的创造者 [Martin Wimpress](https://ubuntu-mate.org/) 编写的。为了更加迅速，他还选择使用 [Nala 包管理器](https://github.com/volitank/nala) 而不是 Apt。
如果可以的话，笔者很希望可以放弃各种形式的 Unix，除了服务器，其他情况下更倾向于使用 RISC OS 或是经典的 MacOS。但是遗憾的是，这两个操作系统在网络浏览器、网络连接，还有多核支持和整体稳定性上有待改进。
笔者今年参加 Ubuntu 峰会的费用是由 Canonical 承担的，这一点他愿意公开。类似的，Linux 基金会曾资助他参加 [今年](https://www.theregister.com/2023/09/26/linux_kernel_report_2023/) 在 Bilbao 的开源峰会，而红帽则资助了他在 2016 年在 Kraków 参加 [Flock to Fedora](https://www.theregister.com/2016/10/19/fedora_facelift/) 峰会。这类赞助可以让我们将广告预算分配到其他地方，但并不会对我们的报道产生影响：我们总会积极追踪那些 IT 新闻。
*（题图：MJ/520ba58f-9e07-4acb-af4a-f4832762311f）*
---
via: 
作者：[Liam Proven](https://www.theregister.com/Author/Liam-Proven) 译者：[ChatGPT](https://linux.cn/lctt/ChatGPT) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出