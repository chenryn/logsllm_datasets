i ti )x = yrs yδr
i ti gδp
and dβ = (cid:81)
(cid:80)
i dβi = yδr
Note that values z and dβ which the user needs to decrypt s
(cid:80)
in the basic PPSS protocol above are formed as z = (cα)x =
(cid:80)
i ti, where δr (cid:44) rp − r ˜p,
(cs · cβ)x = (grs+δr
i ti, where δp (cid:44) p − ˜p. The
decryption works because if δp = 0 then dβ = yδr
i ti and s =
ds·dβ·(z)−1. At ﬁrst it would seem that the randomization process
which creates (cβ, dβ) in steps (2-3) must precede the threshold-
decryption step (4), where z is distributively computed as (cα)x =
(cs· cβ)x. To see how to combine these two steps, ﬁrst observe that
if the protocol is executed not by all n servers but by a subset V of
i∈V dβi ),
t + 1 servers, in particular if (cβ, dβ) = ((cid:81)
where λj is a coefﬁcient s.t. x =(cid:80)
cover s as s = ds·(cid:81)
(1)
j∈V λjxj, then U can still re-
j∈V zj = ds·dβ·(cs·cβ)−x. Note that Pj can
i∈V cβi ,(cid:81)
zj = dβj · (cs · cβ)
−λj xj
and if each Pj in V computes
436(n,t)←− SS(x), h r← G, (rp, rs) r← (Zq)2, (cp, dp) ← (grp , yrp hp), (cs, ds) ← (grs , yrs s)
i=1
Init(p, s) (on public parameters g, q, n, t)
x r← Zq, y ← gx,{xi}n
st0 ← (g, y, h, (cp, dp), (cs, ds)), {sti ← xi}n
User(st0, ˜p) (cid:10) (Server1(st0, st1),··· , Servern(st0, stn))
S1 (Serverj) :
U1 (User) :
Pick tj
i=1
r← Zq. Compute (aj, bj) ← (gtj , (cp)tj ). Send (aj, bj) to User.
Pick a set V of t + 1 servers. Pick r ˜p
r← Zq. Compute {ej ← (aj)r ˜p}j∈V and (c ˜p, d ˜p) ← (gr ˜p , yr ˜p h ˜p).
Compute cβ ←(cid:81)
j∈V (bj/ej). For all j∈ V , send (V, cβ, (c ˜p, d ˜p)) to Serverj.
(cid:81)
(cid:81)
i∈V /{j}(−i)
i∈V /{j}(j−i) mod q, wj ← (cs · cβ)λj·xj , dβ,j ← (dp/d ˜p)tj , and zj ← dβ,j/wj.
Output s ← ds ·(cid:81)
Compute λj ←
Send zj to User.
j∈V zj.
S2 (Serverj) :
U2 (User) :
Figure 2: PPSS1: Password-Protected Secret-Sharing secure against Honest-but-Curious Adversaries assuming Secure Channels
(cid:80)
compute dβj = (dp/d ˜p)tj using d ˜p sent produced by U, but since
argue that servers’ responses zj are indistinguishable from random
group elements values on sessions where δp (cid:54)= 0, and thus we are
j∈V tj involves randomization factors {tj}j∈V from
cβ = gδr
left only with the information released in sessions where ˜p = p, i.e.
all servers in V , computing cβ seems to require the three commu-
where the adversary guesses the correct password.
nication rounds of steps (1-3) above. However, it can be done in
two rounds instead if each Pj ﬁrst sends to U a pair of “randomiza-
tion commitment” values, (aj, bj) = (gtj , (cp)tj ) = (gtj , grptj ),
which allows U to return to all Pj’s the cβ value computed as:
(cid:89)
j∈V
cβ =
(bj · (aj)
−r ˜p )
(2)
(cid:80)
crypts s as s = ds ·(cid:81)
This re-organization leads us to the PPSS1 protocol shown in
Figure 2: Each Pj computes its (gtj , (cp)tj ) randomization com-
mitment in step S1. In step U1 U chooses a set V of t + 1 servers
and sends to each server in V the cβ value computed as in equa-
tion 2 together with an encryption of ˜p (technically only sending
the d ˜p part of this ciphertext is necessary). In step S2 each server
computes its response zj as in equation 1, and U in step U2 de-
j∈V zj. The PPSS1 protocol in Figure 2
diverges in just one aspect from the above sketch: Namely, the base
used in the shifted ElGamal encryption of the password is changed
from g to a different random base h. This change is crucial to pre-
learns a =(cid:81) ai = g
vent an off-line dictionary attack that otherwise would be possible
since in PPSS1, unlike the basic PPSS protocol above, the user
α = s · g(p− ˜p)(cid:80)
i ti. This value, together with user’s output
i ti computed for an arbitrary ˜p, allows an off-line
dictionary attack, where each candidate password p(cid:48) can be tested
by checking if s(cid:48) = α · (a) ˜p−p(cid:48)
looks like a valid plaintext. On
stead of gp then α = s · h(p− ˜p)(cid:80)
the other hand, if the shifted ElGamal encryption encrypts hp in-
i ti is a one-time pad encryption
i ti is a pseudorandom
i ti for any δp (cid:44) (p − ˜p), even given
of s because under the DDH assumption h
value, and hence so is hδp
ai = g
Security against Malicious Adversaries. Somewhat surprisingly,
combining the randomization step with threshold decryption step
helps achieve security against malicious adversaries -albeit with
additional modiﬁcations discussed below. The reason why this col-
lapse of two computation steps makes security argument (and the
necessary modiﬁcations to the protocol) easier, is that now the con-
tribution of each Pj to threshold-decryption of α = s · hδp
i ti,
technically value wj = (cα)λj xj = (cs · cβ)λj xj computed in step
S2, is output “masked” with Pj’s contribution to the “randomiza-
tion” of the encryption (cp/c ˜p, dp/d ˜p) of δp = p − ˜p, i.e. with the
value dβ,j = (dp/d ˜p)tj = yδr tj hδptj . Intuitively, if δp (cid:54)= 0, then
variable hδptj in dβ,j acts like a pseudorandom mask (assuming
DDH) even given values (aj, bj) = (gtj , grptj ). This allows us to
i ti, if(cid:80)
(cid:80)
i ti is random in Zq.
(cid:80)
(cid:80)
(cid:80)
It might seem that there is nothing to argue for sessions on which
˜p = p, but this is not the case: In a standard password-authenticated
protocol (PAKE), the attackers indeed win if they guess the pass-
word on any session. However, we have n servers, and an adver-
sary who corrupts t(cid:48) ≤ t of them needs to use the correct pass-
word on t − t(cid:48) + 1 sessions with distinct uncorrupted servers in
order to break the scheme. Thus the messages output by the ﬁrst
t− t(cid:48) sessions where adversary uses the correct password must still
look indistinguishable from sessions with wrong passwords. Our
scheme achieves this property for the following reasons. Firstly
we are helped by the properties of Shamir secret-sharing of the de-
cryption key x: If the only sessions on which the servers threshold
decryption shares wj = (cα)λj xj are not masked with pseudoran-
dom values are those where ˜p = p then, by the properties of Shamir
secret sharing, the ﬁrst t − t(cid:48) such shares produced by the uncor-
rupted servers, even given the t(cid:48) shares xj of corrupted servers,
are still statistically independent of the decryption key x. Conse-
quently, as long as ˜p = p on sessions with no more than t − t(cid:48)
uncorrupted servers, adversary’s interaction with the scheme effec-
tively never uses the real decryption key x. Therefore in particular,
until that point we can look at tuple (g, y, gtj , ytj ) for each uncor-
rupted Pj as a DDH tuple, in which case even if δp = 0, the value
dβ,j = yδr tj hδptj = yδr tj = y(rp−r ˜p)tj still acts like a pseu-
dorandom one-time pad masking the partial decryption wj, even
given (aj, bj) = (gtj , grptj ), provided that r ˜p (cid:54)= rp (which is
easy to prevent, see below). Here we list the remaining differences
between the resulting protocol, PPSS2 in Figure 3, and PPSS1 in
Figure 2:
(1) A syntactic change is that in Figure 3 we use Serverj to de-
note the j-th session of the Server algorithm, i.e. j ∈ {1, ..., qS},
and we use IDj to denote the ID of the Server who executes this
session, i.e. IDj ∈ {1, ..., n}. This notation makes it clearer how
the protocol executes in the concurrent setting, where each server
runs many sessions of the Server algorithm.
(2) Another minor change is that the user pre-computes the λj
coefﬁcient for each server session in V . This is to keep the size
of user’s message constant. (The user could also compute Qj =
(cs · cβ)λj in step S1 and send it instead of (λj, cβ), then Serverj
would compute wj ← (Qj)xIDj and both parties would use Qj in
the proof π3j. This change would have no effect on security and it
would shift one exponentiation from the server to the user.)
(3) In PPSS1 the server’s responses zi are sent back in cleartext,
437Init(p, s) (on public parameters g, q, n, t)
x r← Zq, y ← gx, {xi}n
{ri ← Zq; yi ← gxi hri}n
User(st0, ˜p) (cid:10) {Serverj(st0, stIDj )}n
S1 (Serverj) :
i=1
(n,t)←− SS(x), (h, ˆg, ˆh, ˆy, ¯g) r← (G)4, (rp, rs) r← (Zq)2,(cp, dp) ← (grp , yrp hp), (cs, ds) ← (grs , yrs s)
i=1, st0 ← (g, h, y,{yi}n
i=1, ˆg, ˆh, ˆy, ¯g, (cp, dp), (cs, ds)), {sti ← (xi, ri)}n
i=1
j=1 (IDj denotes Server ID of j-th Server session, IDj ∈ {1, ..., n}.)
r← Zq. Compute (aj, bj, ¯aj) ← (gtj , (cp)tj , (¯g)tj ), and π1j ← P[Lst0
Pick tj
Send (IDj, aj, bj, ¯aj, π1j) to User.
Pick set V of t + 1 sessions {Serverj}j∈V run by distinct servers s.t. {V[Lst0
Pick r ˜p
r← Zq.
Compute: {ej ← (aj)r ˜p}j∈V , cβ ←(cid:81)
(cid:81)
i∈V /{j}(−IDi)
i∈V /{j}(IDj−IDi) mod q, π2j ← P[Lst0
{λj ←
(cid:81)
j∈V (bj/ej), (c ˜p, d ˜p, ˆc ˜p, ˆd ˜p) ← (gr ˜p , yr ˜p h ˜p, (ˆg)r ˜p , (ˆy)r ˜p (ˆh) ˜p)
U ]((aj, ej, c ˜p, d ˜p, ˆc ˜p, ˆd ˜p), (r ˜p, ˜p))}j∈V
S ]((aj, bj, ¯aj), π1j) = 1}j∈V .
S1]((aj, bj, ¯aj), tj).
U1 (User) :
S2 (Serverj) :
U2 (User) :
Send (λj, cβ, ej, (c ˜p, d ˜p), (ˆc ˜p, ˆd ˜p), π2j) to Serverj.
Stop if V[Lst0
Compute: wj ← (cs · cβ)λj·xIDj , dβ,j ← (dp/d ˜p)tj , zj ← dβ,j/wj, (czj , dzj ) ← (grzj , (c ˜p)rzj · zj)
U ]((aj, ej, c ˜p, d ˜p, ˆc ˜p, ˆd ˜p), π2j) = 0. Pick rzj ← Zq.
]((czj , dzj , c ˜p, aj, dp/d ˜p, (cs · cβ)λj ), (rzj , tj, xIDj , rIDj ))
S2
π3j ← P[Lst0,IDj
Send ((czj , dzj ), π3j) to User.
Stop if ∃j∈V , s.t. V[Lst0,IDj
Output s ← ds · ((cid:81)
j∈V dzj )/((cid:81)
S2
]((czj , dzj , c ˜p, aj, dp/d ˜p, (cs · cβ)λj ), π3j) = 0.
j∈V czj )r ˜p.
Figure 3: PPSS2: Password-Protected Secret-Sharing Protocol Secure against Malicious Adversaries
hence the protocol is insecure even with a passive eavesdropper on
the channels between the user and the servers. To counter such
eavesdropping attack, each server encrypts its response zj in step
S2 using ElGamal encryption with user’s value c ˜p = gr ˜p sent in
step U1 serving as an ElGamal public key, and the user will use r ˜p
to decrypt these ciphertexts in step U2. Even though c ˜p is used as
ﬁrst part of user’s ElGamal ciphertext (c ˜p, d ˜p) encrypting ˜p, it turns
out that we can re-use it for encrypting information from servers to
the user. As for preventing more sophisticated man-in-the-middle
attacks, both the user’s and the servers’ messages are accompanied
by simulation-sound zero-knowledge proofs of well-formedness,
and one consequence of these proofs is that they make it difﬁcult
for the man-in-the-middle adversary to re-use the messages from
the honest parties.
(4) To enable efﬁcient simulation of the honest parties in the pro-
tocol (and thus show that an attacker learns no useful information
in an interaction with these parties), we could amend each protocol
message with a proof of knowledge of the randomness used to cre-
ate it (e.g. tj in server’s message S1 or r ˜p in user’s message U1), but
this would require concurrently extractable zero-knowledge proofs
of knowledge, and even the most efﬁcient such proofs, e.g. [10],
would make the protocol signiﬁcantly more expensive. However,
the simulator turns out to need to compute only values which in-
clude adversarial players’ randomness in the exponent, i.e. values
of the form zw where w is the randomness of the adversarially con-
trolled party, and z is some group element known to the simulator.
Therefore we can avoid the need for proofs of knowledge with a
technique used before e.g. by Gennaro and Shoup [25]: If the sim-
ulator needs a value of the form zw in computing a (simulated) re-
sponse to some message, we extend that message by a value of the
form (g(cid:48))w where g(cid:48) is an additional random group element in the
parameter string, and include a zero-knowledge (and simulation-
sound) proof that the message is formed using consistent random-
ness w. The simulator will then compute zw by embedding z into
g(cid:48). Such proofs, as opposed to concurrent proofs of knowledge, are