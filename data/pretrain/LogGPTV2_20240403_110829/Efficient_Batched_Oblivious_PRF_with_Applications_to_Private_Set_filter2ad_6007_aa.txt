title:Efficient Batched Oblivious PRF with Applications to Private Set
Intersection
author:Vladimir Kolesnikov and
Ranjit Kumaresan and
Mike Rosulek and
Ni Trieu
Eﬃcient Batched Oblivious PRF with Applications to
Private Set Intersection
Vladimir Kolesnikov∗
Ranjit Kumaresan†
Mike Rosulek‡
Ni Trieu‡
August 20, 2016
Abstract
We describe a lightweight protocol for oblivious evaluation of a pseudorandom function (OPRF) in
the presence of semi-honest adversaries. In an OPRF protocol a receiver has an input r; the sender gets
output s and the receiver gets output F (s, r), where F is a pseudorandom function and s is a random seed.
Our protocol uses a novel adaptation of 1-out-of-2 OT-extension protocols, and is particularly eﬃcient
when used to generate a large batch of OPRF instances. The cost to realize m OPRF instances is roughly
the cost to realize 3.5m instances of standard 1-out-of-2 OTs (using state-of-the-art OT extension).
We explore in detail our protocol’s application to semi-honest secure private set intersection (PSI).
The fastest state-of-the-art PSI protocol (Pinkas et al., Usenix 2015) is based on eﬃcient OT extension.
We observe that our OPRF can be used to remove their PSI protocol’s dependence on the bit-length of
the parties’ items. We implemented both PSI protocol variants and found ours to be 3.1–3.6× faster
than Pinkas et al. for PSI of 128-bit strings and suﬃciently large sets. Concretely, ours requires only 3.8
seconds to securely compute the intersection of 220-size sets, regardless of the bit length of the items.
For very large sets, our protocol is only 4.3× slower than the insecure na¨ıve hashing approach for PSI.
1
Introduction
This work involves OT, OPRF and PSI constructions. We start by reviewing the three primitives.
Oblivious Transfer. Oblivious Transfer (OT) has been a central primitive in the area of secure compu-
tation. Indeed, the original protocols of Yao [Yao86] and GMW [Gol04, GMW87] both use OT in a critical
manner. In fact, OT is both necessary and suﬃcient for secure computation [Kil88]. Until early 2000’s,
the area of generic secure computation was often seen mainly as a feasibility exercise, and improving OT
performance was not a priority research direction. This changed when Yao’s Garbled Circuit (GC) was ﬁrst
implemented [MNPS04] and a surprisingly fast OT protocol (which we will call IKNP) was devised by Ishai
et al. [IKNP03].
The IKNP OT extension protocol [IKNP03] is truly a gem; it allows 1-out-of-2 OT execution at the cost of
computing and sending only a few hash values (but a security parameter of public key primitives evaluations
were needed to bootstrap the system). IKNP was immediately noticed and since then universally used in
implementations of the Yao and GMW protocols. It took a few years to realize that OT extension’s use
goes far beyond these fundamental applications. Many aspects of secure computation were strengthened and
sped up by using OT extension. For example, Nielsen et al. [NNOB12] propose an approach to malicious
two-party secure computation, which relates outputs and inputs of OTs in a larger construction. They
critically rely on the low cost of batched OTs. Another example is the application of information-theoretic
Gate Evaluation Secret Sharing (GESS) [Kol05] to the computational setting [KK12]. The idea of [KK12]
is to stem the high cost in secret sizes of the GESS scheme by evaluating the circuit by shallow slices, and
using OT extension to eﬃciently “glue” them together. Particularly relevant for our work, eﬃcient OTs
∗Bell Labs, PI:EMAIL
†MIT, PI:EMAIL
‡Oregon State University, {rosulekm,trieun}@eecs.oregonstate.edu
1
were recognized by Pinkas et al. [PSZ14] as an eﬀective building block for private set intersection, which we
discuss in more detail later.
The IKNP OT extension, despite its wide and heavy use, received very few updates. In the semi-honest
model it is still state-of-the-art. Robustness was added by Nielsen [Nie07], and in the malicious setting it
was improved only very recently [ALSZ15, KOS15]. Improvement for short secret sizes, motivated by the
GMW use case, was proposed by Kolesnikov and Kumaresan [KK13]. We use ideas from their protocol, and
refer to it as the KK protocol. Under the hood, KK [KK13] noticed that one core aspect of IKNP data
representation can be abstractly seen as a repetition error-correcting code, and their improvement stems
from using a better code. As a result, instead of 1-out of-2 OT, a 1-out of-n OT became possible at nearly
the same cost, for n up to approximately 256.
Oblivious PRFs. An oblivious pseudorandom function (OPRF) [FIPR05] is a protocol in which a sender
learns (or chooses) a random PRF seed s while the receiver learns F (s, r), the result of the PRF on a single
input r chosen by the receiver. While the general deﬁnition of an OPRF allows the receiver to evaluate the
PRF on several inputs, in this paper we consider only the case where the receiver can evaluate the PRF on
a single input.
The central primitive of this work, an eﬃcient OPRF protocol, can be viewed as a variant of Oblivious
Transfer (OT) of random values. We build it by modifying the core of OT extension protocols [IKNP03,
KK13], and its internals are much closer to OT than to prior works on OPRF. Therefore, our presentation
is OT-centric, with the results stated in OPRF terminology.
OT of random messages shares many properties with OPRF. In OT of random messages, the sender
learns random m0, m1 while the receiver learns mr for a choice bit r ∈ {0, 1}. One can think of the function
F ((m0, m1), r) = mr as a pseudorandom function with input domain {0, 1}. Similarly, one can interpret
1-out-of-n OT of random messages as an OPRF with input domain {1, . . . , n}.
In this work, we propose a novel extension to the IKNP and KK protocols. At almost the same cost as
1-out-of-2 IKNP and KK OTs, we are able to achieve an 1-out-of-n OT of random messages for arbitrarily
large n. This can be viewed as an OPRF with unbounded input domain {0, 1}∗. That is, the receiver has an
input r ∈ {0, 1}∗ and learns the value R(r), while the sender obtains the ability to evaluate R(r(cid:48)) for any
string r(cid:48), where R is a pseudorandom function.
We call our main protocol batched, related-key OPRF (BaRK-OPRF) since it achieves a large
number of OPRF instances, with keys that are related (in a way we describe later). This is a new primitive,
which nevertheless suﬃces for the application to private set intersection that we consider.
Application to Private Set Intersection (PSI). Private set intersection (PSI) refers to the setting
where two parties each hold sets of items and wish to learn nothing more than the intersection of these
sets. Today, PSI is a truly practical primitive, with extremely fast cryptographically secure implementa-
tions [PSSZ15]. Incredibly, these implementations are only a relatively small factor slower than than the
na¨ıve and insecure method of exchanging hashed values. Among the problems of secure computation, PSI is
probably the one most strongly motivated by practice. Indeed, already today companies such as Facebook
routinely share and mine shared information [Ops13, Yun15]. In 2012, (at least some of) this sharing was
performed with insecure naive hashing. Today, companies are able and willing to tolerate a reasonable per-
formance penalty, with the goal of achieving stronger security [Yun15]. We believe that the ubiquity and
the scale of private data sharing, and PSI in particular, will continue to grow as big data becomes bigger
and privacy becomes a more recognized issue. We refer reader to [PSSZ15, PSZ14] for additional discussion
and motivation of PSI.
In our work, we signiﬁcantly improve state-of-the-art PSI protocol of [PSSZ15] by replacing one of its
components with BaRK-OPRF. This change results in a factor 2.3–3.6× performance improvement for PSI of
moderate-length strings (64 or 128 bits) and reasonably large sets. We substantiate our algorithmic results
with implementation and detailed evaluation. Our largest improvement is for the case of larger sets (224
items each) of long strings (128 bits), which requires only one minute in our protocol but 214 seconds using
[PSSZ15].
2
1.1 Related work
Oblivious transfer. Our BaRK-OPRF protocol can be seen as an OPRF protocol as well as a variant of
oblivious transfer in the paradigm of IKNP [IKNP03]. As mentioned in Section 1, given its critical importance
in secure computation, the IKNP OT extension has a surprisingly short list of follow up improvements,
extensions and generalizations.
Most relevant prior work for us is the KK protocol [KK13], which views the IKNP OT from a new
angle and presents a framework generalizing IKNP. More speciﬁcally, under the hood, players in the IKNP
protocol encode Receiver’s selection bit b as a repetition string of k copies of b. KK generalized this and
allowed the use of an error-correcting code (ECC) with large distance as the selection bit encoding. For a
code consisting of n codewords, this allowed to do 1-out of-n OT with consuming a single row of the OT
extension matrix. In this work, we take the coding-theoretic perspective to the extreme. We observe that we
never need to decode codewords, and by using (pseudo-)random codes we are able to achieve what amounts
to a 1-out-of-poly OT by consuming a single row of the OT matrix, which for the same security guarantee
is only about 3.5× longer than in the original IKNP protocol.
Our work is strictly in the semi-honest security model. Other work on OT extension extends the IKNP
protocol to the malicious model [ALSZ15, KOS15] and the PVC (publicly veriﬁable covert) model [KM15].
Oblivious PRF. Oblivious pseudorandom functions were introduced by Freedman, Ishai, Pinkas, & Rein-
gold [FIPR05]. In general, the most eﬃcient prior protocols for OPRF require expensive public-key operations
because they are based on algebraic PRFs. For example, an OPRF of [FIPR05] is based on the Naor-Reingold
PRF [NR04] and therefore requires exponentiations. Furthermore, it requires a number of OTs proportional
to the bit-length of the PRF input. The protocol of [CNs07] constructs an OPRF from unique blind signature
schemes. The protocol of [JL09] obliviously evaluates a variant of the Dodis-Yampolskiy PRF [DY05] and
hence requires exponentiations (as well as other algebraic encryption components to facilitate the OPRF
protocol).
Private set intersection. Oblivious PRFs have many applications, but in this paper we explore in depth
the application to private set intersection (PSI). We consider only the semi-honest security model. Our PSI
protocol is most closely related to that of Pinkas et al. [PSSZ15], which is itself an optimized variant of a
previous protocol of [PSZ14]. We describe this protocol in great detail in Section 5.
We refer the reader to [PSZ14] for an overview of the many diﬀerent protocol paradigms for PSI. As we
have mentioned, the OT-based protocols have proven to be the fastest in practice. We do, however, point
out that the OT-based protocols do not have the lowest communication cost. In settings where computation
is not a factor, but communication is at a premium, the best protocols are those in the Diﬃe-Hellman
paradigm introduced in [HFH99]. In the semi-honest version of these protocols, each party sends only 2n
group elements, where n is the number of items in each set. However, these protocols require a number of
exponentiations proportional to the number of items, making their performance slow in practice. Concretely,
[PSSZ15] found Diﬃe-Hellman-based protocols to be over 200× slower than the OT-based ones.
While we closely follow the paradigm of [PSZ14], we abstract parts of their protocol in the language
of oblivious PRFs (OPRF). The connection between OPRF and PSI was already pointed out in [FIPR05].
However, the most straightforward way of using OPRF to achieve PSI requires an OPRF protocol in which
the receiver can evaluate the PRF on many inputs, whereas our OPRF allows only a single evaluation point
for the receiver. OPRFs have been used for PSI elsewhere, generally in the malicious adversarial model
[JL09, HL10, Haz15].
Other applications of OPRF. Just like a standard OPRF, our BaRK-OPRF variant immediately and
eﬃciently implies the keyword search functionality of [FIPR05] (also called “string-select OT (SOT)” in
[KK12]). Keyword search allows the receiver R to select the received secret via a string. In SOT the sender
S has a mapping of keywords to secret values. R receives the secret corresponding to the keyword string it
selected. In [KK12], SOT for k-bit selection strings is built by executing k 1-out of-2 OTs, and this technique
is also essentially what is used in the PSI protocol of [PSZ14]. Using BaRK-OPRF, we can achieve keyword
search by consuming only a single row of the OT extension matrix.
3
Oblivious PRFs can be used for secure pattern matching [HL10, FHV13], where one party holds a long
text T and the other party holds a short pattern string p. The parties learn the location of all occurrences
of p within T .
2 Technical Overview of Our Results
We start with the OT-extension paradigm of Ishai, Kilian, Nissim & Petrank (IKNP) [IKNP03]. The goal
of OT extension is to use a small number k of “base-OTs,” plus only symmetric-key operations, to achieve
m (cid:29) k “eﬀective OTs.” Here, k is chosen depending on the computational security parameter κ; in the
following we show to what value k should be set. Below we describe an OT extension that achieves m
1-out-of-2 OTs of random strings, in the presence of semi-honest adversaries.
We follow the notation of [KK13] as it explicates the coding-theoretic framework for OT extension.
Suppose the receiver has choice bits r ∈ {0, 1}m. He chooses two m× k matrices (m rows, k columns), T and
U . Let tj, uj ∈ {0, 1}k denote the j-th row of T and U , respectively. The matrices are chosen at random, so
that:
(cid:40)
tj ⊕ uj = rj · 1k def=
1k
0k
if rj = 1
if rj = 0
The sender chooses a random string s ∈ {0, 1}k. The parties engage in k instances of 1-out-of-2 string-
OT, with their roles reversed, to transfer to sender S the columns of either T or U , depending on the sender’s
bit si in the string s it chose. In the i-th OT, the receiver gives inputs ti and ui, where these refer to the
i-th column of T and U , respectively. The sender uses si as its choice bit and receives output qi ∈ {ti, ui}.
Note that these are OTs of strings of length m (cid:29) k — the length of OT messages is easily extended. This
can be done, e.g., by encrypting and sending the two m-bit long strings, and using OT on short strings to
send the right decryption key.
Now let Q denote the matrix obtained by the sender, whose columns are qi. Let qj denote the jth row.
The key observation is that
qj = tj ⊕ [rj · s] =
(cid:40)
tj
tj ⊕ s
if rj = 0
if rj = 1
(1)
Let H be a random oracle (RO). We have that the sender can compute two random strings H(qj) and
H(qj ⊕ s), of which the receiver can compute only one, via H(tj). Note that tj equals either qj or qj ⊕ s,
depending on the receiver’s choice bit rj. Note that the receiver has no information about s, so intuitively
he can learn only one of the two random strings H(qj), H(qj ⊕ s). Hence, each of the m rows of the matrix
can be used to produce a single 1-out-of-2 OT.
As pointed out by [IKNP03], it is suﬃcient to assume that H is a correlation-robust hash function, a
weaker assumption than RO. A special assumption is required because the same s is used for every resulting
OT instance. See Section 3 for deﬁnition of correlation-robustness.
Coding interpretation.
In IKNP, the receiver prepares secret shares of T and U such that each row of
T ⊕ U is either all zeros or all ones. Kolesnikov & Kumaresan [KK13] interpret this aspect of IKNP as a
repetition code and suggest to use other codes instead.
Consider how we might use the IKNP OT extension protocol to realize 1-out-of-2(cid:96) OT. Well, instead of
a choice bit ri for the receiver, ri will now be an (cid:96)-bit string. Let C be a linear error correcting code of
dimension (cid:96) and codeword length k. The receiver will prepare matrices T and U so that tj ⊕ uj = C(rj).
Now, generalizing Equation 1 the sender receives
qj = tj ⊕ [C(rj) · s]
(2)
where “·” now denotes bitwise-AND of two strings of length k. (Note that when C is a repetition code, this
is exactly Equation 1.)
For each value r(cid:48) ∈ {0, 1}(cid:96), the sender associates the secret value H(qj ⊕ [C(r(cid:48)) · s]), which it can
compute for all r(cid:48) ∈ {0, 1}(cid:96). At the same time, the receiver can compute one of these values, namely, H(tj).
Rearranging Equation 2, we have:
H(tj) = H(qj ⊕ [C(rj) · s])
4
Hence, the value that the receiver can learn is the secret value that the sender associates with the receiver’s
choice string r(cid:48) = rj.
At this point, OT of random strings is completed. For OT of chosen strings, the sender will use each
H(qi ⊕ [C(r) · s]) as a key to encrypt the r’th OT message. The receiver will be able to decrypt only one of
these encryptions, namely one corresponding to its choice string rj.
also the secret H(qj ⊕ [C(˜r) · s]) corresponding to a diﬀerent choice ˜r. We observe:
To argue that the receiver learns only one string, suppose the receiver has choice bits rj but tries to learn
qj ⊕ [C(˜r) · s] = tj ⊕ [C(rj) · s] ⊕ [C(˜r) · s]
= tj ⊕ [(C(rj) ⊕ C(˜r)) · s]
(3)
Importantly, everything in this expression is known to the receiver except for s. Now suppose the
minimum distance of C is κ (the security parameter). Then C(rj) ⊕ C(˜r) has Hamming weight at least
κ. Intuitively, the adversary would have to guess at least κ bits of the secret s in order to violate security.
The protocol is secure in the RO model, and can also be proven under the weaker assumption of correlation
robustness, following [IKNP03, KK13].
Finally, we remark that the width k of the OT extension matrix is equal to the length of codewords in
C. The parameter k determines the number of base OTs and the overall cost of the protocol.
Pseudorandom codes. The main technical observation we make in this work is pointing out that the
code C need not have many of the properties of error-correcting codes. In particular,