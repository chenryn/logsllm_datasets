effectively becomes a passive server listening for RPC requests from
the insensitive side. After conversion to IP, PM solves it using a
generic integer programming solver. We use lp_solve, although
other integer programming solvers should also be compatible. The
output of the solver tells us what functions and global variables
should be in the sensitive domain and in the insensitive one.
Implementing partitions. PM is designed for producing infor-
mation about how to partition a program. Implementing a partition
still needs user involvement. It provides some automation for im-
plementing a partition through process separation. In particular,
it automatically generates interface definitions in Sun RPC’s IDL
(Interface Definition Language). rpcgen is then run on the IDL code
to generate interface code between the sensitive and the insensitive
domain. The user then manually splits files, adjusts compilation
scripts to link with the interface code, and compiles the original
application into two executables: one for the sensitive domain, and
one for the insensitive domain. During runtime, the two domains
are loaded into separate OS processes and the process for the in-
sensitive domain issues RPC calls to the process for the sensitive
domain to request services.
In some circumstances, a partition can be implemented by other
privilege-separation primitives such as dropping privileges or prim-
itives based on hardware (e.g., Intel’s SGX). This will require further
engineering to generate interface code that is compatible with spe-
cific privilege-separation primitives; we leave this for future work.
8 EXPERIENCE REPORT
It can be hard for users to come up with the right budgets when
using PM. By our experience, PM is best used as an interactive tool:
a user starts with some initial budgets and gets a partition from
PM. Based on that partition’s quality scores, the user adjusts the
scores to make tradeoffs; the new set of budgets is then used by PM
to produce a new partition, with its own quality scores. Multiple
rounds may be needed before the user decides on the final partition.
During the evaluation of PM, we used some high-level strategies
to tune metric budgets in order to find good partitions, which are
discussed next.
Strategies to tune budgets. The first kind of strategy is about how
to get the initial budgets. An approach we found useful is to specify a
target dimension for optimization, and apply unlimited budgets for
∗, _, _, _) asks for the smallest
all other dimensions. For instance, (_
sensitive domain, without constraining other dimensions. Another
strategy is to use PM to get the quality scores of a known partition
(such as the one that has only the sensitive functions/globals in the
sensitive domain) and use those as the initial budgets.
The second kind of strategy is for making adjustments to budgets
based on a particular set of partition scores to better satisfy the
user’s goals. We discuss two such strategies:
be able to plug it into our tool and remove the single-directional RPC constraints from
the IP model.
Program
chsh (3.3.2)
chage (3.3.2)
passwd (3.3.2)
useradd (3.3.2)
telnet (1.9.4)
thttpd (2.25)
wget (1.18)
nginx (1.9.5)
SLOC Func. Glob.
10
25
33
49
139
128
176
422
564
948
1,168
2,395
11,120
11,403
61,217
160,293
8
14
14
24
180
145
666
1,064
Sensitive data; Annot.
pwd file; 1
pwd file; 1
pwd&shadow files; 1
pwd&shadow files; 4
data from internet; 3
authentication file; 1
data from internet; 29
authentication file; 1
Table 1: Benchmarks used during evaluation.
• Tradeoff strategy 1. A user decreases the budget (i.e., im-
proves the score) for a target dimension, sets an unlimited
budget on a sacrifice dimension, and optimizes the sacrifice
dimension. The intention is to produce a partition that trades
off the sacrifice dimension for a bounded improvement on
the target dimension, while making the least sacrifice on
the sacrifice dimension. An example use of this strategy was
for thttpd discussed later. We had a partition with quality
(9.15%, 1.0, 1455.6, 9.0) and then we chose to trade off the
sensitive-code percentage for a smaller context-switch fre-
∗, 1.0, 1455.5, 9.0). The new budgets
quency by specifying (_
led PM to find a partition with quality (9.27%, 1.0, 1411.2, 8.0);
the performance improved due to a smaller context-switch
frequency, which was obtained at the expense of a larger
sensitive-code domain.
• Tradeoff strategy 2. A user reduces the budget on a target
dimension, increases the budget on a sacrifice dimension,
and optimizes the target dimension. The intention is to pro-
duce a partition that trades off the sacrifice dimension for
the best improvement on the target dimension within the
budget for the sacrifice dimension. As an example, we had a
partition with quality (9.15%, 1.0, 1455.6, 9.0) in thttpd. To
follow strategy 2 to trade off the sensitive-code percentage
for a smaller context-switch frequency, we used new budgets
∗, 9.0), which led to a new partition with
(10.00%, 1.0, 1455.5
quality (9.62%, 1.0, 1400.1, 8.0).
Benchmarks. We evaluated PM using a set of benchmarks listed
in Table 1. The first four programs are small and from Linux’s
shadow-utils package. For each benchmark, the table lists the name,
the version, the source lines of code, the total number of functions,
and the total number of globals. Further, it lists what sensitive data
is used in our evaluation and the number of lines of annotations
that are added to each program to mark sensitive data. Overall, the
annotation burden is modest; most applications require only a few
lines of annotations.
For each benchmark, we designed an extensive set of test cases
to collect security and performance metrics, as PM relies on some
dynamic analysis for collecting measurements on the metrics we
discussed. With the collected measurements, we ran evaluation on
each program to test whether PM can compute meaningful parti-
tions with reasonable user guidance. For generated partitions by
PM, we performed security and performance assessment. For those
benchmarks that were also used in a recent system PtrSplit [15],
Session 5A: Software SecurityCCS ’19, November 11–15, 2019, London, United Kingdom1031we also compared PM’s results with PtrSplit’s results. All evalua-
tion were on systems running x86-64 Ubuntu 14.04 with the Linux
kernel version 3.19.0, an Intel Core i5-4590 at 3.3GHz, and 16GB of
physical memory.
8.1 Evaluation with thttpd
We evaluated PM on thttpd, an open-source http server program.
The server is set up for receiving incoming connections and com-
munications. Clients can connect to the server and, after authen-
tication, request to download documents from a directory, called
the top document directory, and its sub-directories set up by the
server. thttpd stores user authentication information (username
and password) in a file named .htpasswd. During authentication,
a user provides a username and a password and thttpd looks up
.htpasswd to check if there is a match. If there is, the authenti-
cation succeeds and follow-up actions requested by the user are
authorized. Therefore, in this experiment, we treat the password
file as sensitive data and perform partitioning to have a sensitive,
high-secrecy domain that processes the password file.
In thttpd, two major functions are involved in authentication:
auth_check (abbreviated as ac) and auth_check2 (abbreviated as
ac2). If thttpd is configured to use a global password file, function
ac first invokes ac2 and passes the user-input authentication data
and the server top directory; ac2 then tries to open .htpasswd
under the top directory and performs authentication. However, if
.htpasswd is not found, ac2 returns failure to ac, which then calls
ac2 again with the local directory from which the user requested a
document. If a local password file is found, ac2 uses it to perform
authentication. Therefore, for one user connection, ac may call ac2
twice. In fact, our toy program used in Sec. 4 is inspired by this
authentication pattern.
In thttpd, ac2 is the only function that
Partitioning process.
interacts with the password file. A natural partition would be to
put only ac2 into the sensitive domain. However, it would require
bidirectional RPC support as ac2 invokes several other functions.
Since only single-directional RPCs are supported, this choice is not
feasible. Therefore, we used PM to explore partitioning choices
of thttpd and Table 2 includes a summary of the result. For each
partition, the table lists the budgets we used, the amount of IP-
solving time to produce the optimal partition, the quality scores
of the produced partition, and also the runtime overhead of the
partitioned thttpd when downloading files. Next we discuss in detail
about how these partitions were produced.
We started with unlimited budgets and optimized for the smallest
∗, _, _, _), for which PM produced partition
sensitive domain: (_
1 in Table 2. This partition has the smallest sensitive domain
among all single-directional choices; further, it leaks only one bit of
information, common during authentication. This initial partition
could be acceptable, but we used PM further to make tradeoffs, in
an attempt to reduce performance overhead.
By following tradeoff strategy 1, we chose the context-switch fre-
quency as the target and the sensitive-code percentage as the sacri-
fice and revised the previous partition’s quality (9.15%, 1.0, 1455.6, 9.0)
∗, 1.0, 1455.5, 9.0). PM found a partition with
to the new budgets (_
quality (9.27%, 1.0, 1411.2, 8.0), shown as partition 2 in Table 2.
Further improvements can be made by repeating the same strategy.
For example, with one more step based on partition 2 ’s quality met-
∗, 1.0, 1411.1, 8.0) produced another tradeoff choice
rics, budgets (_
shown as partition 3 in the table.
Alternatively, by following tradeoff strategy 2 on the quality
∗, 9.0).
metrics of partition 1 , we gave budgets (10.00%, 1.0, 1455.5
PM happened to produce the same partition as partition 3 .
We inspected thttpd’s source code to understand the three par-
titioning choices produced by PM. Partition 1 separates ac and
ac2 to maintain the smallest sensitive domain. Partition 2 further
adds a logging function into the sensitive domain to reduce the
number of context switches. Partition 3 cuts at a higher execution
level, which separates ac and its caller, since ac is executed less fre-
quently than ac2 in typical situations. In all, the three partitions are
reasonable choices that would be produced by manual partitioning
when making tradeoffs between security and performance.
In terms of security, all
Assessing security and performance.
three choices separate ac2 into the sensitive domain. After inspec-
tion, we determined that the sensitive-domain code in all three
choices only reads from the password file. Furthermore, the code
does not write to the file system using any I/O operation; thus it
cannot leak secret passwords through the file system. As a result,
the only sensitive information that can be leaked is the one bit of
authentication response, acceptable during authentication.
For evaluating performance, we implemented the three parti-
tions and experimented with different settings. The most realistic
setting is to download moderate-sized (1M) files from a remote
thttpd server as this matches its typical use case. However, for com-
pleteness, we also evaluated other settings, including downloading
small-sized (1K) files and downloading from a local thttpd server
(on the same machine as the client). Table 2 presents the runtime
overhead of partitioned thttpd in different settings, when compared
with unpartitioned thttpd. In general, all three choices have small
overheads for the typical case of downloading moderate-sized files
from a remote server. Partition 3 has significantly less overhead
compared to the other two, justifying the benefit of performing
iterative refinement via PM. Further, the results show that our met-
rics of context-switch frequency and pointer complexity positively
correlate with performance overhead.
Comparison with PtrSplit. PtrSplit also partitioned thttpd and
produced one single choice with the help of manual declassifica-
tion. Its partitioning result is similar to the third choice in Table 2,
except that it simplified thttpd’s functionality to remove logging
and accessing to remote global variables. In contrast, our partitions
support both. To make a fair comparison, we augmented PtrSplit’s
result with the ability of logging and remote global variable access-
ing and experimented with this new partition. The overhead data
for the remote server case is 0.5% (1M files) and 35.7% (1K files);
for the local server case, it is 28.4% (1M) and 36.5% (1K). It has a
higher overhead than our partition 3 because our partition puts a
logging function into the sensitive domain. PtrSplit’s partition puts
the logging function in the insensitive domain; so it has to invoke
an RPC function to access some global data in the sensitive domain.
8.2 Evaluation with wget
wget is a program for downloading files from web servers. We
annotated the incoming data from a server as sensitive, since that
Session 5A: Software SecurityCCS ’19, November 11–15, 2019, London, United Kingdom1032Budgets (bc , bf , bs , bx )
IP-Solving
Time (s)
SCode(%)
Flow CSwitch Cplx
1
2
3
(_*, _, _, _)
(_*, 1.0, 1455.5, 9.0)
(_*, 1.0, 1411.1, 8.0)
0.10
9.0
0.21
8.0
0.18
8.0
Table 2: Partitioning choices for thttpd.
1455.6
1411.2
1400.1
9.15
9.27
9.62
1.0
1.0
1.0
Local
Overhead(%) (FileSize: 1M/1K)
Remote
1.2/54.7
1.1/51.1
0.4/34.2
37.1/63.1
35.5/60.9
25.1/30.9
Budgets (bc , bf , bs , bx )
IP-Solving
Time (s)
1
2
3
4
(_*,_,_,_)
(50.00%, 999.0*, 38.2, _)
(16.00%, _, _*, _)
(_*, 2.0, 38.2, _)
0.80
2.03
1.13
1.56