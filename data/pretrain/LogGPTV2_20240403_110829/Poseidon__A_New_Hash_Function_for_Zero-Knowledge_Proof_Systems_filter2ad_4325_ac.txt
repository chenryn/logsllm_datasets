→ ··· → ARC → SB → M
(R−1)-th round
→ ARC → SB → M
(cid:123)(cid:122)
(cid:125)
(cid:124)
(cid:123)(cid:122)
R-th round
First round
(cid:125)
(cid:124)
(cid:123)(cid:122)
• R f +R f = RF rounds have full S-box layers, i.e., t S-box
functions, and
• RP rounds have partial S-box layers, i.e., 1 S-box and
(t − 1) identity functions.
We refer to [31] for more details about the HADES design
strategy.
Interaction Between Full and Partial Rounds. Note that
the same number of full rounds can be used instead of the
partial rounds without decreasing the security, but this leads to
substantially higher costs in our target applications. However,
replacing t partial rounds with one full round may keep the
costs in our target applications similar, but the security may
be severely decreased due to a signiﬁcantly lower degree of 1
full round compared to t partial rounds.
The Round Function. Each round function of our POSEI-
DON permutation consists of the following three components.
1. AddRoundConstants, denoted by ARC(·)
2. SubWords, denoted by S-box(·) or by SB(·)
3. MixLayer, denoted by M(·)
2.3 The Permutation Family POSEIDONπ
The HADES design strategy provides a good starting point for
our new hash function. Indeed, the combination of full and
partial rounds allows us to make strong arguments about the
security, while also exploiting the smaller number of S-boxes
USENIX Association
30th USENIX Security Symposium    523
in the partial rounds in order to gain efﬁciency in the target
applications.
The primary application of our design is hashing in large
prime ﬁelds, hence POSEIDONπ takes inputs of t ≥ 2 words
in Fp, where p is a prime of size p ≈ 2n (i.e., (cid:100)log2(p)(cid:101) = n).
We will now describe the components of each POSEIDONπ
round in detail.
The S-Box Layer. For the applications we have in mind,
we focus on two S-boxes.
• First, we consider the α-power S-box, deﬁned by
S-box(x) = xα, where α is the smallest positive integer
s.t. gcd(α, p− 1) = 1. In the following, these permuta-
tions are called “xα-POSEIDONπ”. Examples are given
by α = 3 (x3-POSEIDONπ) if p (cid:54)= 1 mod 3 or α = 5
(x5-POSEIDONπ) if p (cid:54)= 1 mod 5.
• Secondly, we consider the inverse S-box(x) = x−1 (under
the assumption S-box(0) = 0). In the following, these
permutations are called “x−1-POSEIDONπ”.
It turns out that the S-box x5 is suitable for two of the most
popular prime ﬁelds in ZK applications, concretely the prime
subﬁelds of the scalar ﬁeld of the BLS12-381 and BN254
curves, so we mainly consider this S-box, but try to present
generic cryptanalytic results for other cases whenever possi-
ble.
The Linear Layer. A t ×t MDS matrix7 with elements in
Fp exists if the condition (see [45] for details)
2t + 1 ≤ p
is satisﬁed.
Given p and t, there are several ways to construct an MDS
matrix. One of them is using a Cauchy matrix [53], which we
recall here brieﬂy. For xi,yi ∈ Fp, where i ∈ [1,t], the entries
of the matrix M are deﬁned by
Mi, j =
1
xi + y j
,
where the entries of {xi}1≤i≤t and {yi}1≤i≤t are pairwise dis-
tinct and xi + y j (cid:54)= 0, where i ∈ {1, . . . ,t} and j ∈ {1, . . . ,t}.
Avoiding Insecure Matrices. We emphasize that not every
MDS matrix provides the same level of security. In particular,
the matrix M must prevent the possibility to set up
7A matrix M ∈ Ft×t is called maximum distance separable (MDS) iff
it has a branch number B(M) equal to B(M) = t + 1. The branch number
of M is deﬁned as B(M) = minx∈Ft{wt(x) + wt(M(x))}, where wt is the
Hamming weight in wide trail terminology. Equivalently, a matrix M is MDS
iff every submatrix of M is non-singular.
(1) invariant (or iterative) subspace trails [32] (or equiva-
lently, truncated differentials) with prob. 1 with inactive
S-boxes over more than t − 1 rounds8 (more details are
given in the following), or
(2) invariant (or iterative) subspace trails with prob. 1 and
with active S-boxes for any number of rounds.
Regarding the ﬁrst point, let S i be the subspace s.t. no S-box
is active in the ﬁrst i consecutive rounds, that is,
S (i) :=(cid:8)v ∈ Ft(cid:12)(cid:12) [M j · v]0 = 0 ∈ F, j < i(cid:9) ,
(1)
S (i)(cid:17) ≥ t − i. For each pair of texts (x,y) in the same
(cid:16)
where [x]0 denotes the ﬁrst word of x ∈ Ft, S (0) = Ft, and
dim
coset of S i, no S-boxes are active in the ﬁrst i consecutive
rounds. Hence, a truncated differential with prob. 1 (or equiv-
alently, a subspace trail) can be set up for the ﬁrst i ≤ t − 1
rounds. The matrix M must be chosen s.t. no subspace trail
with inactive/active S-boxes can be set up for more than t − 1
rounds.
A detailed analysis of matrix properties related to this attack
vector can be found in [34]. With these results in mind, we
suggest the following method to generate matrices:
1. Randomly select pairwise distinct {xi}1≤i≤t
and
{yi}1≤i≤t, where xi + y j (cid:54)= 0 and where i ∈ {1, . . . ,t}
and j ∈ {1, . . . ,t}.
2. Determine if the matrix is secure using Algorithm 1,
Algorithm 2, and Algorithm 3 provided9 in [34]. For a
secure matrix, no inﬁnitely long (invariant and/or itera-
tive) subspace trail (with or without active S-boxes) can
be set up for all rounds with partial S-box layers.
3. Repeat this procedure until a secure matrix is found.
We used this method to generate the matrices for the instan-
tiations given in Section 4. For [34, Algorithm 3], we used
a search period of l = 4t, and we additionally made sure
that no invariant subspace trails with active S-boxes exist
for M,M2, . . . ,Ml. In our experiments, we observed that only
a few trials are needed in order to ﬁnd a secure matrix for
sufﬁciently large ﬁelds.
To summarize, this approach allows us to make sure that our
MDS matrices do not exhibit the vulnerabilities discussed
in [34], and our instantiations are thus secure against this
speciﬁc type of attack.
Efﬁcient Implementation. We refer to [30, Appendix B]
for details about efﬁcient POSEIDONπ implementations. The
8This ﬁxes a weakness in the previous version of POSEIDON, where
speciﬁc choices of M over (Fp)t could have resulted in vulnerable instances.
We refer to [14, 42] for more details.
9https://extgit.iaik.tugraz.at/krypto/linear-layer-tool
524    30th USENIX Security Symposium
USENIX Association
main advantage of these strategies consists of reducing the
number of constant multiplications in each round with a par-
tial S-box layer from t2 to 2t, which is particularly useful for
large t and RP. For example, we implemented x3-POSEIDONπ
with (n,t,RF ,RP) = (64,24,8,42) in Sage, and we could ob-
serve that the performance improves by a factor of about 5,
with the average computation time being 4 ms for the opti-
mized version.
3 Applications
We suggest POSEIDON for all applications of zero-knowledge-
friendly hashing, concretely:
• Using POSEIDON for commitments in various proto-
cols, where the knowledge of the committed value is
proven in zero knowledge: For this we suggest a single-
call permutation-based hashing with POSEIDON-128 and
widths from 2 to 5 ﬁeld elements. The advantage over
the Pedersen hash, for example, is that POSEIDON is
faster and can also be used in signature schemes which
allows for a smaller code footprint.
• Hashing multi-element objects with certain ﬁelds en-
coded as ﬁeld elements, so that statements about these
ﬁelds are proven in zero knowledge: We suggest variable-
length sponge-based hashing with POSEIDON-128 or
POSEIDON-80 with width 5 (and rate 4).
• Using POSEIDON in Merkle trees to enable zero-
knowledge proofs of knowledge of a leaf in the tree
with optional statements about the leaf content: We rec-
ommend Merkle trees of arity 4 (i.e., width 5) with PO-
SEIDON-128 as the most performant, but trees of more
conventional arities can be used as well.
• Veriﬁable encryption with POSEIDON within Integrated
Encryption Scheme [28]: Put POSEIDON inside the Du-
plexSponge authenticated encryption framework [13]
and initialize it with a session key based on the recipi-
ent’s public key. Then one can prove that the recipient
can decrypt the ciphertext into a plaintext with certain
properties.
There exist several third-party protocols that already use PO-
SEIDON in these use cases:
• Filecoin employs POSEIDON for Merkle tree proofs with
different arities and for two-value commitments.10
• Dusk Network uses POSEIDON to build a Zcash-like
protocol for securities trading.11 It also uses POSEIDON
for encryption as described above.
10https://github.com/filecoin-project/neptune
11https://github.com/dusk-network/Poseidon252
• Sovrin uses POSEIDON for Merkle-tree based revoca-
tion [2].
• Loopring uses POSEIDON for private trading on
Ethereum.12
4 Concrete Instantiations of POSEIDONπ
As of mid-2020, many protocols that employ zero-knowledge
proofs use (or plan to use) pairing-based proof systems [23,
27, 35, 49] or Bulletproofs [19]. The elliptic curves used by
these systems are predominantly BLS12-381, BN254, and
Ed25519. A hash function friendly for such a system would
operate in the scalar prime ﬁeld of the curve, and they all have
a size of around 2255.
4.1 Main Instances
We present POSEIDONπ permutations for such prime ﬁelds,
and leave the other cases to [30, Appendix]. The S-box func-
tion can be chosen as x5 in all cases, i.e., we use x5-POSEIDON
for hashing in all such protocols, though the concrete ﬁelds
are slightly different (this affects only constants and matrices,
but not the number of rounds).
The security levels M of 80 and 128 bits correspond to a
255-bit capacity, i.e., one ﬁeld element. We focus on two
possible widths, namely t = 3 and t = 5, as they correspond
to popular cases of 2-to-1 and 4-to-1 compression functions.
In the Merkle tree case, this corresponds to trees of arity 2
and 4, respectively. The round numbers for 80- and 128-bit
security levels are given in Table 2, and a more extensive set is
given in [30, Appendix G]. For M = 256 we select a capacity
and an output of 2 255-bit elements (one 510-bit element is
possible too).
All our MDS matrices are Cauchy matrices, and the method
to construct them is further described in Section 2.3. We use
sequences of integers for the construction.
The round constants and matrices are generated using the
Grain LFSR [37] in a self-shrinking mode, and the detailed
initialization and generation are described in [30, Appendix
F]. Using this method, the generation of round constants and
matrices depends on the speciﬁc instance, and thus different
round constants are used even if some of the chosen parame-
ters (e.g., n and t) are the same. Note that by using the Grain
LFSR and instance-speciﬁc seed values, this approach is rem-
iniscent of nothing-up-my-sleeve (NUMS) numbers. Indeed,
letting the attacker freely choose round constants and/or ma-
trices can lead to attacks.
12https://tinyurl.com/y7tl537o
USENIX Association
30th USENIX Security Symposium    525
Table 2: Concrete instantiations of POSEIDONπ (with security
margin) over BLS12-381, BN254, Ed25519 scalar ﬁelds.
• Future Uses. The capacity value is identiﬁer· (232). The
padding depends on the application.
Instance (S-box: f (x) = x5)
POSEIDONπ-128
POSEIDONπ-80
POSEIDONπ-256
t
3
5
3
5
6
10
RF
8
8
8
8
8
8
RP
57
60
33
35
120
120
We provide the round constants, the matrices, and test vectors
in auxiliary ﬁles for four primary instantiations. We also make
reference implementations for these instantiations and scripts
to calculate the round numbers, the round constants, and the
MDS matrices available online.13 We refer to [30, Appendix
A] for a more detailed overview of the auxiliary ﬁles.
4.2 Domain Separation for POSEIDON
POSEIDON can be used in a number of applications, and hav-
ing the same instance for all of them is suboptimal. Also,
some protocols explicitly require several different hash func-
tions. We suggest using domain separation for this, concretely
encoding the use case in the capacity element (which is ﬁne
as it is 256 bits large and has a lot of bits to ﬁll) and using
some padding to distiguish inputs of different lengths if they
may happen. Although a concrete form of domain separa-
tion constants is not security critical, we suggest a common
methodology to unify potential implementations.
Concretely, we propose:
• Merkle Tree (all leafs are present, up to arity 32). The
capacity is 2arity − 1. A generic case is considered in [30,
Appendix I]. We use no padding here.
• Merkle Tree (some leafs may be empty). The capacity
value equals the bitmask of which leafs are present. We
use no padding here.
• Variable-Input-Length Hashing. The capacity value
is 264 + (o− 1) where o the output length. The padding
consists of one ﬁeld element being 1, and the remaining
elements being 0.
• Constant-Input-Length Hashing. The capacity value
is length· (264) + (o− 1) where o the output length. The
padding consists of the ﬁeld elements being 0.
• Encryption. The capacity value is 232. The padding
consists of the ﬁeld elements being 0.
13 https://extgit.iaik.tugraz.at/krypto/hadeshash
5 Cryptanalysis Summary of POSEIDON
As for any new design, it is paramount to present a concrete
security analysis. In the following, we provide an in-depth
analysis of the security of our construction. Due to a lack of
any method to ensure that a hash function based on a sponge
construction is secure against all possible attacks, we base
our argumentation on the following consideration. As we just
recalled in the previous section, when the internal permuta-
tion P of an (N = c + r)-bit sponge function is modeled as a
randomly chosen permutation, the sponge hash function is in-
differentiable from a random oracle up to 2c/2 calls to P . Thus,
we choose the number of rounds of the inner permutation case
in order to provide security against distinguishers relevant to
collision/preimage attacks. Equivalently, this means that such
a number of rounds guarantees that P does not exhibit any
relevant non-random/structural properties (among the ones
known in the literature).
5.1 Deﬁnitions
Deﬁnition 5.1. The function F is T -secure against collisions
if there is no algorithm with expected complexity smaller than
T that ﬁnds x1,x2 such that F(x1) = F(x2).
Deﬁnition 5.2. The function F is T -secure against preimages
if there is no algorithm with expected complexity smaller than
T that for given y ﬁnds x such that F(x) = y.
Deﬁnition 5.3. The function F is T -secure against second
preimages if there is no algorithm with expected complexity
smaller than T that for given x1 ﬁnds x2 such that F(x1) =
F(x2).
Deﬁnition 5.4. The invertible function P is T -secure against
the CICO (m1,m2)-problem if there is no algorithm with
expected complexity smaller than T that for given m1-bit I1
and m2-bit O1 ﬁnds I2,O2 such that P(I1||I2) = P(O1||O2).
5.2 Security Claims
In terms of concrete security, we claim that POSEIDON-M
is 2M-secure against collisions and (second) preimages. To
help increase conﬁdence in our design and simplify external
cryptanalysis, we also explicitly state another claim about
our internal permutation: POSEIDONπ is 2min(M,m1,m2)-secure
against the CICO (m1,m2)-problem.
Even though an attack below these thresholds may not affect