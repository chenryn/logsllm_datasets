之前的文章对IO FILE相关功能函数的源码进行了分析，后续将对IO FILE相关的利用进行阐述。
传送门：
  * [IO FILE之fopen详解](https://ray-cp.github.io/archivers/IO_FILE_fopen_analysis)
  * [IO FILE之fread详解](https://ray-cp.github.io/archivers/IO_FILE_fread_analysis)
  * [IO FILE之fwrite详解](https://ray-cp.github.io/archivers/IO_FILE_fwrite_analysis)
  * [IO_FILE之fclose详解](https://ray-cp.github.io/archivers/IO_FILE_fclose_analysis)
经过了前面对于fopen等源码的介绍，知道了IO
FILE结构体里面有个很重要的数据结构--`vtable`，IO函数的很多功能都是通过它去实现的。接下来主要描述如何通过劫持vtable去实现控制函数执行流以及通过FSOP来进行利用。
## vtable劫持
本文是基于libc 2.23及之前的libc上可实施的，libc2.24之后加入了vtable check机制，无法再构造vtable。
vtable是`_IO_FILE_plus`结构体里的一个字段，是一个函数表指针，里面存储着许多和IO相关的函数。
### 劫持原理
`_IO_FILE_plus`结构体的定义为：
    struct _IO_FILE_plus
    {
      _IO_FILE file;
      const struct _IO_jump_t *vtable;
    };
`vtable`对应的结构体`_IO_jump_t`的定义为：
    struct _IO_jump_t
    {
        JUMP_FIELD(size_t, __dummy);
        JUMP_FIELD(size_t, __dummy2);
        JUMP_FIELD(_IO_finish_t, __finish);
        JUMP_FIELD(_IO_overflow_t, __overflow);
        JUMP_FIELD(_IO_underflow_t, __underflow);
        JUMP_FIELD(_IO_underflow_t, __uflow);
        JUMP_FIELD(_IO_pbackfail_t, __pbackfail);
        /* showmany */
        JUMP_FIELD(_IO_xsputn_t, __xsputn);
        JUMP_FIELD(_IO_xsgetn_t, __xsgetn);
        JUMP_FIELD(_IO_seekoff_t, __seekoff);
        JUMP_FIELD(_IO_seekpos_t, __seekpos);
        JUMP_FIELD(_IO_setbuf_t, __setbuf);
        JUMP_FIELD(_IO_sync_t, __sync);
        JUMP_FIELD(_IO_doallocate_t, __doallocate);
        JUMP_FIELD(_IO_read_t, __read);
        JUMP_FIELD(_IO_write_t, __write);
        JUMP_FIELD(_IO_seek_t, __seek);
        JUMP_FIELD(_IO_close_t, __close);
        JUMP_FIELD(_IO_stat_t, __stat);
        JUMP_FIELD(_IO_showmanyc_t, __showmanyc);
        JUMP_FIELD(_IO_imbue_t, __imbue);
    #if 0
        get_column;
        set_column;
    #endif
    };
这个函数表中有19个函数，分别完成IO相关的功能，由IO函数调用，如`fwrite`最终会调用`__write`函数、`fread`会调用`__doallocate`来分配IO缓冲区等。
给出`stdin`的IO FILE结构体和它的虚表的值，更直观的看下，首先是`stdin`的结构体：  
可以看到此时的函数表的值是 `0x7fe23cc576e0 `，查看它的函数：  
vtable劫持的原理是：如果能够控制FILE结构体，实现对vtable指针的修改，使得vtable指向可控的内存，在该内存中构造好vtable，再通过调用相应IO函数，触发vtable函数的调用，即可劫持程序执行流。
从原理中可以看到，劫持最关键的点在于修改IO
FILE结构体的vtable指针，指向可控内存。一般来说有两种方式：一种是只修改内存中已有FILE结构体的vtable字段；另一种则是伪造整个FILE结构体。当然，两种的本质最终都是修改了vtable字段。
demo示例程序可以参考[ctf wiki](https://wiki.gdpcisa.org/pwn/io_file/fake-vtable-exploit/)中的示例：
    #define system_ptr 0x7ffff7a52390;
    int main(void)
    {
        FILE *fp;
        long long *vtable_addr,*fake_vtable;
        fp=fopen("123.txt","rw");
        fake_vtable=malloc(0x40);
        vtable_addr=(long long *)((long long)fp+0xd8);     //vtable offset
        vtable_addr[0]=(long long)fake_vtable;
        memcpy(fp,"sh",3);
        fake_vtable[7]=system_ptr; //xsputn
        fwrite("hi",2,1,fp);
    }
这个示例通过修改已有FILE结构体的内存的vtable，使其指向用户可控内存，实现劫持程序执行`system("sh")`的过程。
有了前面几篇文章对vtable调用的基础，劫持的原理理解就比较容易了，不再赘述。
### IO调用的vtable函数
在这里给出`fopen`、`fread`、`fwrite`、`fclose`四个函数会调用的vtable函数，之前在每篇文章的末尾都已给出，在这里统一总结下，方便后面利用的时候能够较快的找到所需劫持的函数指针。
fopen函数是在分配空间，建立FILE结构体，未调用vtable中的函数。
fread函数中调用的vtable函数有：
  * `_IO_sgetn`函数调用了vtable的`_IO_file_xsgetn`。
  * `_IO_doallocbuf`函数调用了vtable的`_IO_file_doallocate`以初始化输入缓冲区。
  * vtable中的`_IO_file_doallocate`调用了vtable中的`__GI__IO_file_stat`以获取文件信息。
  * `__underflow`函数调用了vtable中的`_IO_new_file_underflow`实现文件数据读取。
  * vtable中的`_IO_new_file_underflow`调用了vtable`__GI__IO_file_read`最终去执行系统调用read。
fwrite 函数调用的vtable函数有：
  * `_IO_fwrite`函数调用了vtable的`_IO_new_file_xsputn`。
  * `_IO_new_file_xsputn`函数调用了vtable中的`_IO_new_file_overflow`实现缓冲区的建立以及刷新缓冲区。
  * vtable中的`_IO_new_file_overflow`函数调用了vtable的`_IO_file_doallocate`以初始化输入缓冲区。
  * vtable中的`_IO_file_doallocate`调用了vtable中的`__GI__IO_file_stat`以获取文件信息。
  * `new_do_write`中的`_IO_SYSWRITE`调用了vtable`_IO_new_file_write`最终去执行系统调用write。
`fclose`函数调用的vtable函数有：
  * 在清空缓冲区的`_IO_do_write`函数中会调用vtable中的函数。
  * 关闭文件描述符`_IO_SYSCLOSE`函数为vtable中的`__close`函数。
  * `_IO_FINISH`函数为vtable中的`__finish`函数。
其他的IO函数功能相类似的调用的应该都差不多，可以参考下。
## FSOP
FSOP全称是`File Stream Oriented
Programming`，关键点在于前面`fopen`函数中描述过的`_IO_list_all`指针。
进程中打开的所有文件结构体使用一个单链表来进行管理，即通过`_IO_list_all`进行管理，在[`fopen`](https://ray-cp.github.io/archivers/IO_FILE_fopen_analysis)的分析中，我们知道了fopen是通过`_IO_link_in`函数将新打开的结构体链接进入`_IO_list_all`的，相关的代码如下：
    fp->file._flags |= _IO_LINKED;
    ...
    fp->file._chain = (_IO_FILE *) _IO_list_all;
    _IO_list_all = fp;
从代码中也可以看出来链表是通过FILE结构体的`_chain`字段来进行链接的。
正常的进行中存在stderr、sdout以及stdin三个IO FILE，此时`_IO_list_all`如下：  
形成的链表如下图所示：  
看到链表的操作，应该就大致猜到了FSOP的主要原理了。即通过伪造`_IO_list_all`中的节点来实现对FILE链表的控制以实现利用目的。通常来说一般是直接利用任意写的漏洞修改`_IO_list_all`直接指向可控的地址。
具体来说该如何利用呢？glibc中有一个函数`_IO_flush_all_lockp`，该函数的功能是刷新所有FILE结构体的输出缓冲区，相关源码如下，文件在`libio\genops`中：