## 社工技术
* * *
社会工程学（Social
Engineering，又被翻译为：社交工程学）在上世纪60年代左右作为正式的学科出现，广义社会工程学的定义是：建立理论并通过利用自然的、社会的和制度上的途径来逐步地解决各种复杂的社会问题，经过多年的应用发展，社会工程学逐渐产生出了分支学科，如公安社会工程学（简称公安社工学）和网络社会工程学。  
简单来说社会工程学就是对目标的信息搜集，当然不仅仅是搜集目标主动泄漏的信息，还要利用各种方式去获取目标的相关系统。  
在渗透测试的过程中，社工技术会对整个渗透测试的方案和最终结果产生巨大的影响。  
主要获取的信息（渗透测试中）包括：服务器信息，网站所有者信息，域名信息等。
* * *
  * 利用工具（请参考红日第一课）
> 例：对红日实验室的简单社工
现在的网络环境对安全越来越重视，无疑加大了信息搜集的难度，在以后的学习道路上我们要收集搭建属于自己的社工库，比如说  
在日后的课程中，我也会带着大家搭建这样的社工库并提供部分数据  
这样的一个社工库，里面加入我们收集到的数据，并逐渐扩大我们的数据库内容，这样在以后的工作中会对你提供很大的帮助。
## 漏洞挖掘
* * *
经过信息的获取，我们可以定位到我们的目标信息，同时，可以把我渗透方法的范围缩小，可以开展针对性的测试了。
## 服务器方面
* * *
针对不同的服务器，我们会进行不同的测试，比如目标是一个linux的系统，我们基本就不会去看asp方面的漏洞了，只会对它有可能存在的漏洞进行测试，而服务器方面，我们也会发现不同的版本漏洞。在他的中间件等等。
  * 实验方法：不同版本的服务器或其他终端+相对应溢出工具
## 溢出漏洞
* * *
  * 漏洞原理：缓冲区溢出是一种非常普遍、非常危险的漏洞，在各种操作系统、应用软件中广泛存在。利用缓冲区溢出攻击，可以导致程序运行失败、系统宕机、重新启动等后果。更为严重的是，可以利用它执行非授权指令，甚至可以取得系统特权，进而进行各种非法操作。  
主要的原理是：通过在程序的地址空间里安排适当的代码。或适当的初始化寄存器和内存，让程序跳转到入侵者安排的地址空间执行。可以根据这两个目标来对缓冲区溢出攻击进行分类。
  * 漏洞靶场：虚拟搭建的各类型服务器+提权工具
  * 漏洞实战演练：在真实环境下获取webshell后实战操作
  * 个人总结：溢出漏洞可以直接获取服务器的最高权限，危害巨大，但利用环境要求较高，不易利用成功。
## 应用方面
* * *
应用方面我们要讲的就会多一些了，虽然网站类型多变，各种语言层出不穷，但主要的漏洞就是那么几个。可以参考`owasp top
10`，我优先为大家介绍一下危害比较大的漏洞类型。
## 跨站脚本漏洞
* * *
  * 漏洞原理：
    * （1）持久型跨站：最直接的危害类型，跨站代码存储在服务器（数据库）。
    * （2）非持久型跨站：反射型跨站脚本漏洞，最普遍的类型。用户访问服务器-跨站链接-返回跨站代码。
    * （3）DOM跨站（DOM XSS）:DOM(document object model文档对象模型)，客户端脚本处理逻辑导致的安全问题。
  * 漏洞靶场：
当我们访问这个页面时，我们的ＰＣ就在攻击者的beef中上线了  
通过 beef，我们可以对上线的浏览器进行很多的后门操作比如最基本的弹窗：  
  * 漏洞实战演练：`[www.alliedjeep.com/87508.htm](http://www.alliedjeep.com/87508.htm)` `couponPHP CMS 1.0`跨站脚本漏洞  
`couponPHP`是优惠劵和交易网站的内容管理系统。  
`couponPHP CMS 1.0`版本没有正确过滤 `/admin/ajax/comments_paginate.php` 或
`/admin/ajax/stores_paginate.php`的 "sEcho" GET
参数值，在实现上存在多个跨站脚本漏洞，可导致在用户浏览器会话中执行任意HTML和脚本代码。
  * 个人总结：以存储型跨站为例，我们在用户的页面输入的语句会存入到系统的数据库中，这样，当其他用户访问我们存入的信息时就造成了存储型跨站的攻击，图片为我定入的存储型跨站的利用是js。
## Sql注入漏洞
* * *
  * 漏洞原理：SQL注入攻击是黑客对数据库进行攻击的常用手段之一。随着B/S模式应用开发的发展，使用这种模式编写应用程序的程序员也越来越多。但是由于程序员的水平及经验也参差不齐，相当大一部分程序员在编写代码的时候，没有对用户输入数据的合法性进行判断，使应用程序存在安全隐患。用户可以提交一段数据库查询代码，根据程序返回的结果，获得某些他想得知的数据，这就是所谓的SQL Injection，即SQL注入。
  * 漏洞靶场：在我们的靶场中我们会了解查询到底是怎么一回事，数据是怎么样传入的
上面两个图片，是数据以`get`及`post`方式发送的代码内容，我们的参数就是以这种形式发送的。而后台接收后的样子类似是这样的  
`Select * from (xxx数据表) where what=(‘id’)`
`id`为你输入的参数，而`sql`注入就是在这个语句后面加入攻击者自己构造的语句，使数据库查询出我们想要的数据并给前台一定的提示。  
并会在我们的靶场中进行攻击学习.  
漏洞实战演练：`http://www.cnblogs.com/moqiang02/p/4061399.html`
  * 个人总结：sql注入仍然是被利用最多的漏洞，他的危害程度和利用范围也是其他漏洞不可以比的，而且逐渐开始工具化，手工注入越来越少，虽然难度大的注入漏洞几乎只能用手工去做，但一点也不影响工具的推广和利用，比较常用的攻击工具sqlmap，可以实现大量的绕过和注入方法。当然，因为他的功能越来越强大，使用的方法也越来越复杂，有的注入点，有可能同样是用sqlmap，小白就注入不进去，可是有的老手就可以通过对语句和参数的修改注入成功。  
当然有很多的注入点也需要自己手工去写一些脚本去进行测试，因为盲注这一形式的存在，给手工注入带来了巨大的麻烦，图片为我自己编写的盲注的小脚本，可以利用注入去暴力猜出用户的密码。  
  * POC框架
    * 基于原生POC编写练习
    * 基于框架POC编写练习
## 越权漏洞
* * *
  * 漏洞原理：是指超越权限或权力范围的意思。越权漏洞是Web应用程序中一种常见的安全漏洞。它的威胁在于一个账户即可控制全站用户数据。当然这些数据仅限于存在漏洞功能对应的数据。越权漏洞的成因主要是因为开发人员在对数据进行增、删、改、查询时对客户端请求的数据过分相信而遗漏了权限的判定。所以测试越权就是和开发人员拼细心的过程。
  * 漏洞靶场：针对网站的权限绕过，后期会带大家搭建相对环境学习  
  * 漏洞实战演练：`https://loudong.sjtu.edu.cn/show/CNVD-2017-04015` 齐博`CMS`整站系统`V7.0`存在越权访问漏洞  
个人总结：对于越权漏洞的主要挖掘方法：
    *       1. 测试越权一般得有俩号。
    *       1. 对userid。orderid等等ID要敏感，一旦发现，就多测测。
    *       1. 某些厂商喜欢用纯数字的MD5作为用户的cookie，多注意发现。
    *       1. 多使用抓包工具，多分析数据包，多修改数据包。
    *       1. 多站在开发的角度去分析网站哪儿存在越权。
    *       1. 多看看别人的漏洞  
越权漏洞属于逻辑漏洞，这样的漏洞，不是代码的硬性错误，网站可以说他没有sql注入漏洞，但他不可以说他没有逻辑漏洞，只是每个人的思考方向不同，测试方法和角度也不一样，发现的逻辑漏洞也就不会相同。