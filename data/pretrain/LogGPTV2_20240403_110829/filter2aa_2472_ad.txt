含敏感信息，有效避免信
息安全风险 
3 
同上 
建立体系化测试数据，
进行数据依赖管理，覆
盖更加复杂的业务场
景 
每个测试用例拥有专
属的测试数据，有明确
的测试初始状态 
测试用例的执行不依
赖其他测试用例执行
所产生的数据 
同上 
4 
每个测试用例专属
的测试数据都可以
通过模拟或调用应
用程序 API 的方式
自动生成 
测试数据覆盖安全漏洞
和开源合规等需求场景
并建立定期更新机制 
通过测试数据分级，实
现专属测试数据和通
用测试数据的有效管
理和灵活组合，保证测
试数据的独立性 
同上 
5 
所有的功能、非功能
测试的测试数据，都
可以通过模拟、数据
库转储或调用应用
程序 API 的方式自
动生成 
持续优化的持续数据管
理方式和策略 
同上 
同上 
11.2 数据变更管理 
数据变更管理主要关注应用程序升级和回滚过程中的数据库结构和数据的变更，良好的变更管理策
略可以保证应用版本和数据库版本兼容匹配，以应对应用的快速扩容缩容等线上场景。通过应用变更和
数据变更的解耦，减少系统变更的相互依赖，实施灵活的升级部署。 
级
别 
变更过程 
兼容回滚 
版本控制 
数据监控 
1 
数据变更由专业人
员在后台手工完成 
数据变更作为软件
发布的一个独立环
节，单独实施和交付 
没有识别数据库和应
用版本，存在不兼容风
险 
数据变更没有纳入版本
控制，变更过程不可重复 
没有建立变更监控体系，
变更结果不可见 
2 
数据变更通过文档
实现标准化，使用自
动化脚本完成变更 
建立数据库和应用的版
本对应关系，并跟踪变
更有效性 
数据变更脚本纳入版本
控制，并与数据库版本进
行关联 
对变更日志进行收集分
析，帮助问题快速定位 
12 
3 
数据变更作为持续
部署流水线的一个
环节，随应用的部署
自动化完成，无需专
业人员单独执行 
每次数据变更同时提供
明确的恢复回滚机制，
并进行变更测试，如：
提供升级和回滚两个自
动化脚本 
同上 
对数据变更进行流程分级
定义，应对不同环境下的
高危操作 
4 
应用程序部署和数
据库迁移解耦，可单
独执行 
数据变更具备向下兼容
性，支持保留数据的回
滚操作和零停机部署 
同上 
对数据变更进行监控，自
动发现异常变更状态 
5 
持续优化的数据管
理方法，持续改进数
据管理效率 
同上 
同上 
监控数据库性能并持续优
化 
12 度量与反馈 
DevOps基于精益思想发展而来，其中持续改进是精益思想的核心理念之一。DevOps主张在持续交付
的每一个环节建立有效的度量和反馈机制，其中通过设立清晰可量化的度量指标，有助于衡量改进效果
和实际产出，并不断迭代后续改进方向。另外设立及时有效的反馈机制，可以加快信息传递速率，有助
于在初期发现问题，解决问题，并及时修正目标，减少后续返工带来的成本浪费。度量和反馈可以保证
整个团队内部信息获取的及时性和一致性，避免信息不同步导致的问题，明确业务价值交付目标和状态，
推进端到端价值的快速有效流动。 
12.1 度量指标 
度量指标的拣选和设定是度量和反馈的前提和基础，科学合理的设定度量指标有助于改进目标的达
成。在拣选度量指标时需要关注两个方面，即度量指标的合理性和度量指标的有效性，合理性方面依托
于对当前业务价值流的分析，从过程指标和结果指标两个维度来识别DevOps实施结果，以及整个软件交
付过程的改进方向；有效性方面一般遵循SMART原则，即指标必须是具体的、可衡量的、可达到的、同
其他目标相关的和有明确的截止时间，通过这五大原则可以保证目标的科学有效。 
级
别 
度量指标定义 
度量指标类型 
度量数据管理 
度量指标更新 
1 
度量指标没有明确
定义，对度量价值的
理解是模糊的 
无 
度量数据是临时性的，没
有收集管理 
无 
2 
在持续交付各个阶
段定义度量指标，度
量指标局限于职能
部门内部 
度量指标以结果指标为
主，如变更频率，需求
交付前置时间，变更失
败率和平均修复时间，  
度量数据的收集是离散
的不连续的，历史度量数
据没有进行有效管理 
度量指标的设立和更新是
固化的，度量指标没有明
确的优先级 
3 
建立跨组织度量指
标，进行跨领域综合
维度的度量 
度 量 指 标 覆 盖 过 程 指
标，客观反映组织研发
现状 
度量数据的收集是连续
的，历史度量数据有明确
的管理规则 
度量指标的设立和更新是
动态的，可以按照组织需
求定期变更，度量指标的
优先级在团队内部可以达
13 
成一致 
4 
整个研发团队共享
业务价值导向的度
量指标，实现指标的
抽象分级，关注核心
业务指标  
度量指标覆盖探索性指
标，关注展示趋势和识
别潜在改进 
度量数据的收集是连续
且优化的，对历史数据数
据进行有效的挖掘分析 
建立完整的度量体系和成
熟的度量框架，度量指标
的设立和更新可按需实现
快 速 定 义 并 纳 入 度 量 体
系，推动流程的持续改进 
5 
持续优化的度量指
标，团队自我驱动持
续改进 
支持改进目标和试验结
果的有效反馈，用于经
验积累和指导下一阶段
的改进工作 
同上 
度量指标可基于大数据分
析和人工智能自动识别推
荐，并且动态调整指标优
先级 
表1：部分参考过程度量指标 
阶段 
度量指标 
需求 
需求总数 
各个状态需求数量 
需求完成数量 
需求平均时长 
版本控制 
代码仓库数量 
代码提交数 
代码提交频率 
代码提交时间分布 
构建 
构建次数 
构建频率 
构建时长 
构建失败率 
构建修复时间 
构建类型 
代码 
代码行数 
代码复杂度 
代码重复率 
单元测试覆盖率 
单元测试用例数 
单元测试成功率 
环境 
环境变更时长 
变更频率 
容器镜像更新 
活跃容器数量 
资源使用统计 
部署 
部署版本数量 
部署时间 
部署成功率 
部署回滚率 
12.2 度量驱动改进 
14 
度量驱动改进关注软件交付过程中各种度量数据数据的收集，统计，分析和反馈，通过可视化的度
量数据客观反映整个研发过程的状态，以全局视角分析系统约束点，并在团队内部共享，帮助设立客观
有效的改进目标，并调动团队资源进行优化.同时对行之有效的改进项目进行总结分享，帮助更大范围
组织受益于改进项目的效果，打造学习型组织和信息共享，不断驱动持续改进和价值交付。 
级
别 
报告生成方式 
报告有效性 
报告覆盖范围 
反馈改进 
1 
度量报告通过手工
方式生成，没有标准
化的格式定义，内容
缺乏细节 
数据时效性无法保证 
受众局限于报告生成人
员及相关的小范围内部 
报告发现的问题没有进行
有效跟踪落实，问题长期
无法改进 
2 
度量报告以自动化
方式生成，通过预定
义格式和内容标准
化度量报告 
数据体现报告生成时间
点的最新状态 
由预先定义的事件触发
自动化报告发送，受众覆
盖团队内部成员 
测试报告中反馈的问题录
入问题追踪系统，进行持
续跟踪 
3 
度量报告进行分类
分级，建立多种度量
反馈渠道，内容按需
生成 
通过可视化看板实时展
示数据 
实现报告精准范围推送，
支持主动订阅，受众覆盖
跨部门团队 
度量反馈问题纳入研发迭
代的待办事项，作为持续
改进的一部分 
4 
建立跨组织级统一
的数据度量平台，数
据看板内容可定制  
通过可视化看板聚合报
告内容，自动生成趋势
图，进行趋势分析 
多维度产品状态实时信
息展示 
度量反馈的持续改进纳入
研发日常工作，预留时间
处理非功能性需求和技术
债务，并且识别有效改进
并扩展到整个组织，作为
企业级知识体系积累保留 
5 
持续优化的度量方
法，平台和展现形式 同上 
同上 
通过数据挖掘实现跨组织
跨流程数据度量分析，分
析结果作为业务决策的重
要依据，帮助组织持续改
进价值交付流程