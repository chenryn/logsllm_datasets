Hello all, I'm new to FastAPI but I believe this is the right place to be
posting this even though the issues I believe stems from Pydantic as I'm using
it in the context of FastAPI. I'm running this in Pycharm 2020.2 but have also
tried it outside of an IDE.
### Description
I've seen similar issues about self-referencing Pydantic models causing
`RecursionError: maximum recursion depth exceeded in comparison` but as far as
I can tell there are no self referencing models included.
The code runs successfully until the function in `audit.py` tries to return
the output from the model. I'm willing to state that its most likely something
I've coded wrong so I've listed this as a question.
The output is created correctly and I have checked this with debugging but the
`output` is not returned and creates a 500 http status code when running from
`http://127.0.0.1/docs#/audit/audit_api_v1_audit__post`.
Thanks in advance and thank you for creating this wonderful framework!
### Environment
  * OS: Windows 10
  * FastAPI Version: 0.61.1
  * Pydantic Version: 1.6.1
  * Uvicorn Version: 0.11.8
  * Python Version: 3.7.1
  * Pycharm Version: 2020.2
### App
`main.py`
    ""
    import uvicorn
    from fastapi import FastAPI
    from starlette.middleware.cors import CORSMiddleware
    from app.api.routes.router import api_router
    from app.core.logging import init_logging
    from app.core.config import settings
    init_logging()
    def get_app() -> FastAPI:
        application = FastAPI(title=settings.APP_NAME, version=settings.APP_VERSION, debug=settings.DEBUG)
        if settings.BACKEND_CORS_ORIGINS:
            # middleware support for cors
            application.add_middleware(
                CORSMiddleware,
                allow_origins=[str(origin) for origin in settings.BACKEND_CORS_ORIGINS],
                allow_credentials=True,
                allow_methods=["*"],
                allow_headers=["*"],
            )
        application.include_router(api_router, prefix=settings.API_V1_STR)
        return application
    app = get_app()
    if __name__ == "__main__":
        uvicorn.run("main:app", host="127.0.0.1", port=80)
`router.py`
    from fastapi import APIRouter
    from app.api.routes import audit
    api_router = APIRouter()
    api_router.include_router(audit.router, tags=["audit"], prefix="/audit")
`audit.py`
    import validators
    from fastapi import APIRouter, HTTPException
    from loguru import logger
    from app.api.dependencies.audit import analyzer
    from app.schemas.audit import AuditPayload, AuditResult
    router = APIRouter()
    @router.post("/", response_model=AuditResult, name="audit", status_code=200)
    async def post_audit(payload: AuditPayload) -> AuditResult:
        logger.info("Audit request received")
        # validate URL
        try:
            logger.info("Validating URL")
            validators.url(payload.url)
        except HTTPException:
            HTTPException(status_code=404, detail="Invalid URL.")
            logger.exception("HTTPException - Invalid URL")
        # generate output from route audit.py
        logger.info("Running audit analysis. This could take up to 10 minutes. Maybe grab a coffee...")
        analyzed_output = analyzer.analyze(url=payload.url,
                                           brand=payload.brand,
                                           twitter_screen_name=payload.twitter_screen_name,
                                           facebook_page_name=payload.facebook_page_name,
                                           instagram_screen_name=payload.instagram_screen_name,
                                           youtube_user_name=payload.youtube_user_name,
                                           ignore_robots=payload.ignore_robots,
                                           ignore_sitemap=payload.ignore_sitemap,
                                           google_analytics_view_id=payload.google_analytics_view_id)
        output = AuditResult(**analyzed_output)
        return output 
`audit_models.py`.
    from pydantic import BaseModel
    class AuditPayload(BaseModel):
        url: str
        brand: str
        twitter_screen_name: str
        facebook_page_name: str
        instagram_screen_name: str
        youtube_user_name: str
        ignore_robots: bool
        ignore_sitemap: bool
        google_analytics_view_id: str
    class AuditResult(BaseModel):
        base_url: str
        run_time: float
        website_404: dict
        website_302: dict
        website_h1_tags: dict
        website_duplicate_h1: dict
        website_h2_tags: dict
        website_page_duplications: dict
        website_page_similarities: dict
        website_page_desc_duplications: dict
        website_page_title_duplications: dict
        pages: list
        pages_out_links_404: dict = None
        pages_canonicals: dict
        seo_phrases: dict
        social: dict
        google_analytics_report: dict
        google_psi_desktop: dict
        google_psi_mobile: dict
        google_algo_updates: dict
        google_sb: list
        robots_txt: list
This line throws the error in the logs:  
2020-09-10 10:02:31.483 | ERROR | uvicorn.protocols.http.h11_impl:run_asgi:391
- Exception in ASGI application
I've included the full stack trace as I'm not sure which bit is most relevant,
but I believe this has something to do with it:
      File "pydantic\main.py", line 623, in pydantic.main.BaseModel._get_value
      [Previous line repeated 722 more times]
Full traceback:
      File "C:\Users\\AppData\Local\JetBrains\Toolbox\apps\PyCharm-P\ch-0\202.6948.78\plugins\python\helpers\pydev\pydevconsole.py", line 483, in 
        pydevconsole.start_client(host, port)
        │            │            │     └ 50488
        │            │            └ '127.0.0.1'
        │            └ 
        └ \\AppData\\Local\\JetBrains\\Toolbox\\apps\\PyCharm-P\\ch-0\\202.6948.78\\pl...
      File "C:\Users\\AppData\Local\JetBrains\Toolbox\apps\PyCharm-P\ch-0\202.6948.78\plugins\python\helpers\pydev\pydevconsole.py", line 411, in start_client
        process_exec_queue(interpreter)
        │                  └ 
        └ 
      File "C:\Users\\AppData\Local\JetBrains\Toolbox\apps\PyCharm-P\ch-0\202.6948.78\plugins\python\helpers\pydev\pydevconsole.py", line 258, in process_exec_queue
        more = interpreter.add_exec(code_fragment)
               │           │        └ 
               │           └ 
               └ 
      File "C:\Users\\AppData\Local\JetBrains\Toolbox\apps\PyCharm-P\ch-0\202.6948.78\plugins\python\helpers\pydev\_pydev_bundle\pydev_code_executor.py", line 106, in add_exec
        more = self.do_add_exec(code_fragment)
               │    │           └ 
               │    └ 