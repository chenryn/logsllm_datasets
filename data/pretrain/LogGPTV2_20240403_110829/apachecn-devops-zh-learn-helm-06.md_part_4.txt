3.  将版本升级到图表的修改版本，然后再次运行测试。
4.  删除命名空间。
5.  在自动创建的新命名空间中安装图表的修改版本。
6.  通过执行`helm test`运行测试。
7.  使用相同的图表版本再次升级版本，并重新运行测试。
8.  删除命名空间。
9.  对`ci/`文件夹下的每个`values`文件重复上述步骤。
建议您添加`--upgrade`标志，以便对 Helm 升级进行额外测试，并防止可能的倒退。
重要提示:
如果您已经增加了 Helm 图表的`MAJOR`版本，则`--upgrade`标志将不会生效，因为这表明您进行了突破性的更改，并且在此版本中原地提升等级将不会成功。
让我们在本地安装图表测试 CLI 及其依赖项，这样我们以后就可以看到这个过程在运行。
## 安装图表测试工具
为了使用图表测试命令行界面，您必须在本地机器上安装以下工具:
*   `helm`
*   `git`(版本`2.17.0`或更高版本)
*   `yamllint`
*   `yamale`
*   `kubectl`
图表测试在测试过程中使用这些工具。`helm`和`kubectl`安装在 [*第二章*](02.html#_idTextAnchor098)*准备 Kubernetes 和掌舵环境*中，Git 安装在 [*第五章*](05.html#_idTextAnchor265)*构建你的第一个 Helm 图表*中，yamllint 安装在本章开头。如果到目前为止您已经阅读了这本书，那么您现在应该需要安装的唯一必备工具是 Yamale，这是一个图表测试用来根据`Chart.yaml`模式文件验证图表的`Chart.yaml`文件的工具。
可以用`pip`包管理器安装 Yamale，如图:
```
$ pip install yamale --user
```
你也可以从[【https://github.com/23andMe/Yamale/archive/master.zip】](https://github.com/23andMe/Yamale/archive/master.zip)手动下载档案。
下载后，解压缩归档文件并运行安装脚本:
```
$ python setup.py install
```
请注意，如果您使用下载的归档文件安装该工具，您可能需要以提升的权限运行`setup.py`脚本，例如管理员或在 macOS 和 Linux 上以 root 用户身份运行。
一旦您安装了所需的工具，您应该从项目的 GitHub 版本页面下载图表测试工具，该页面位于[https://github.com/helm/chart-testing/releases](https://github.com/helm/chart-testing/releases)。每个版本都包含一个带有档案列表的*资产*部分。
下载与本地计算机平台类型相对应的归档文件。版本`v3.0.0-beta.1`是本书使用的版本:
![Figure 6.5 – The chart testing releases page on GitHub ](img/Figure_6.5.jpg)
图 6.5–GitHub 上的图表测试发布页面
从 GitHub 发行版页面下载适当的文件后，取消归档图表测试发行版。取消归档后，您将看到以下内容:
```
LICENSE
README.md
etc/chart_schema.yaml
etc/lintconf.yaml
ct
```
您可以删除不需要的`LICENSE`和`README.md`文件。
应将`etc/chart_schema.yaml`和`etc/lintconf.yaml`文件移动到本地机器上的`$HOME/.ct/`或`/etc/ct/`位置。`ct`文件应该移动到由系统的`PATH`变量管理的某个地方:
```
$ mkdir $HOME/.ct
$ mv $HOME/Downloads/etc/* $HOME/.ct/
$ mv $HOME/Downloads/ct /usr/local/bin/
```
现在，所有需要的工具都安装好了。对于本例，我们将在本地对 Packt 存储库进行更改，并使用图表测试来清理和安装修改后的图表。
如果您尚未将存储库克隆到您的本地计算机，您现在应该这样做:
```
$ git clone https://github.com/PacktPublishing/-Learn-Helm Learn-Helm
```
克隆后，您可能会注意到这个存储库的顶层有一个名为`ct.yaml`的文件，其内容如下:
```
chart-dirs:
  - helm-charts/charts
chart-repos:
  - bitnami=https://charts.bitnami.com
```
该文件的`chart-dirs`字段向`ct`指示相对于`ct.yaml`文件的`helm-charts/charts`目录是图表的单回购的根。`chart-repos`字段提供了图表测试应该运行的仓库列表`helm repo add`，以确保它能够下载依赖项。
有多种其他配置可以添加到该文件中，这在此时将不讨论 b [但是可以在位于](https://github.com/helm/chart-testing)[https://github.com/helm/chart-testing](https://github.com/helm/chart-testing)的图表测试 ng 文档中查看。每次调用`ct`命令都会引用`ct.yaml`文件。
现在已经安装了工具，并且已经克隆了 Packt 存储库，让我们通过执行`lint-and-install`命令来测试`ct` 工具。
运行测试 lint-and-install 命令的图表
`lint-and-install`命令用于对抗包含在`Learn-Helm/helm-charts/charts`中的三个 Helm 图:
*   `guestbook`:这是你上一章写的留言簿图表。
*   `nginx`:这是一个额外的 Helm 图表，我们为了演示的目的加入了这个图表。该图表通过运行`helm create`命令创建，用于部署`nginx`反向代理。
要运行测试，首先，导航到`Learn-Helm`存储库的顶层:
```
$ cd $LEARN_HELM_LOCATION
$ ls
ct.yaml  guestbook-operator  helm-charts  jenkins  LICENSE  nginx-cd  README.md
```
`ct.yaml`文件通过`chart-dirs`字段显示图表的单回购的位置，因此您可以简单地从顶层运行`ct lint-and-install`命令:
```
$ ct lint-and-install
```
运行此命令后，您将在输出的末尾看到以下消息:
![Figure 6.6 – The chart testing lint-and-install output when charts are not modified ](img/Figure_6.6.jpg)
图 6.6–图表未修改时的图表测试`lint-and-install`输出
由于存储库中没有任何图表被修改，`ct`没有对您的图表执行任何操作。我们应该修改这些图表中的至少一个，以看到`lint-and-install`过程发生。修改应在除`master`以外的分支中进行，因此应通过执行以下命令创建一个名为`chart-testing-example`的新分支:
```
$ git checkout -b chart-testing-example
```
修改可以很大也可以很小；对于这个例子，我们将简单地修改每个图表的`Chart.yaml`文件。将`Learn-Helm/helm-charts/charts/guestbook/Chart.yaml`文件的`description`字段修改如下:
```
description: Used to deploy the Guestbook application
```
此前，该值为`A Helm chart for Kubernetes`。
将`Learn-Helm/helm-charts/charts/nginx/Chart.yaml`文件的`description`字段修改如下:
```
description: Deploys an NGINX instance to Kubernetes
```
此前，该值为`A Helm chart for Kubernetes`。通过运行`git status`命令，验证两个图表已经从上次`git`提交修改:
![Figure 6.7 – The git status output after both charts have been modified ](img/Figure_6.7.jpg)
图 6.7–两个图表修改后的`git status`输出
你应该看到`guestbook`和`nginx`图表都有变化。修改这些图表后，再次尝试运行`lint-and-install`命令:
```
$ ct lint-and-install
```
这一次，`ct`确定该单回购中的两个图表是否发生了变化，如以下输出所示:
![Figure 6.8 – Messages denoting changes to the guestbook and nginx charts ](img/Figure_6.8.jpg)
图 6.8–表示`guestbook`和`nginx`图表变化的信息
然而，这个过程稍后会失败，因为两个图表版本都没有被修改:
![Figure 6.9 – The output when no chart changes have been made ](img/Figure_6.9.jpg)
图 6.9–未进行图表更改时的输出
这可以通过增加`guestbook`和`nginx`图表版本来解决。由于本次变更没有引入新功能，我们将增加`PATCH`版本。将两个图表版本修改为各自`Chart.yaml`文件中的`version 1.0.1`:
```
version: 1.1.0
```
通过运行`git diff`命令，确保对每个图表进行了此更改。如果在输出中看到每个版本修改，继续再次运行`lint-and-install`命令:
```
$ ct lint-and-install
```
现在图表版本已经增加，`lint-and-install`命令将遵循完整的图表测试工作流程。您将会看到，每个修改后的图表都被剪切并部署到一个自动创建的名称空间中。一旦部署的应用的 pods 被报告为就绪，`ct`将自动运行每个图表的测试用例，如带有`helm.sh/hook: test`注释的资源所示。图表测试还将打印每个测试窗格的日志，以及名称空间事件。
您可能会注意到，在`lint-and-install`输出中，`nginx`图表部署了两次，而`guestbook`图表仅部署和测试了一次。这是因为`nginx`图表有一个位于`Learn-Helm/helm-charts/charts/nginx/ci/`的`ci/`文件夹，其中包含两个不同的`values`文件。通过图表测试对`ci/`文件夹中的`values`文件进行迭代，该测试安装图表的次数与`values`文件一样多，以确保每个值的组合都能成功安装。`guestbook`图表不包含`ci/`文件夹，所以该图表只安装了一次。
这可以在`lint-and-install`输出的以下行中观察到:
```
Linting chart with values file 'nginx/ci/clusterip-values.yaml'...
Linting chart with values file 'nginx/ci/nodeport-values.yaml'...
Installing chart with values file 'nginx/ci/clusterip-values.yaml'...
Installing chart with values file 'nginx/ci/nodeport-values.yaml'...
```
虽然该命令对测试两个图表的功能很有用，但它并没有验证升级到新版本是否会成功。
为此，我们需要向`lint-and-install`命令提供`--upgrade`标志。再次尝试运行此命令，但这次使用的是`--upgrade`标志:
```
$ ct lint-and-install --upgrade
```
这一次，`ci/`下的每个`values`文件都会进行就地升级。这可以在如下输出中看到:
```
Testing upgrades of chart 'guestbook => (version: '1.0.1', path: 'guestbook')' relative to previous revision 'guestbook => (version: '1.0.0', path: 'ct_previous_revision216728160/guestbook')'...
```
回想一下，只有当版本之间的`MAJOR`版本相同时，才会测试就地升级。如果您使用`--upgrade`标志，但确实更改了`MAJOR`版本，您将看到类似如下的消息:
```
Skipping upgrade test of 'guestbook => (version: '2.0.0', path: 'helm-charts/charts/guestbook')' because: 1 error occurred:
	* 2.0.0 does not have same major version as 1.0.0
```
现在，了解了如何使用图表测试对您的 Helm 图表执行健壮的测试，我们将以清理您的`minikube`环境来结束。
# 清理
如果您完成了本章中描述的示例，您可以从您的`minikube`集群中删除`chapter6`命名空间:
```
$ kubectl delete ns chapter6
```
最后，通过运行`minikube stop`舒 t 放下你的`minikube`集群。
# 总结
在本章中，您学习了可以应用于测试 Helm 图表的不同方法。测试图表最基本的方法是对本地图表目录运行`helm template`命令，以确定其资源是否正确生成。您也可以使用`helm lint`命令确保图表遵循正确的格式，并且可以使用`yamllint`命令去除图表中使用的 YAML 风格。
除了本地模板和林挺，您还可以使用`helm test`命令和`ct`工具在 Kubernetes 环境中执行实时测试。除了执行图表测试之外，图表测试还提供了一些功能，使图表开发人员更容易在单一报告中维护 Helm 图表。
在下一章中，您将从构建和测试 Helm 图表的图表开发人员的角度以及使用 Helm 向 Kubernetes 部署应用的最终用户的角度，了解 Helm 如何用于**持续集成/持续交付** ( **CI/CD** )和 GitOps 设置。
# 进一步阅读
有关`helm template`和`helm lint` com [命令的更多信息，请参考以下资源](https://helm.sh/docs/helm/helm_template/)资源:
*   `helm template`:[https://helm . sh/docs/helm/helm _ template/](https://helm.sh/docs/helm/helm_template/)
*   `helm lint`:[https://helm . sh/docs/helm/helm _ lint/](https://helm.sh/docs/helm/helm_lint/)
以下页面来自 Helm documentati [关于讨论图表测试和`helm test`](https://helm.sh/docs/topics/chart_tests/) 命令:
*   图表测试:[https://helm.sh/docs/topics/chart_tests/](https://helm.sh/docs/topics/chart_tests/)
*   `helm test`命令:[https://helm.sh/docs/helm/helm_test/](https://helm.sh/docs/helm/helm_test/)
*   最后，查看图表 te [sting GitHub 存储库了解更多关于`ct` CLI 的信息:](https://github.com/helm/chart-testing)[https://github.com/helm/chart-testing](https://github.com/helm/chart-testing)。
# 问题
1.  `helm template`命令的目的是什么？它与`helm lint`命令有何不同？
2.  在 Kubernetes 中安装图表模板之前，您可以做些什么来验证它们？
3.  可以利用什么工具来改变 YAML 资源的风格？
4.  图表测试是如何创建的？图表测试是如何执行的？
5.  `ct`工具为 Helm 的内置测试功能带来了哪些附加价值？
6.  与`ct`工具一起使用时，`ci/`文件夹的用途是什么？
7.  `--upgrade`标志如何改变`ct lint-and-install`命令的行为？