.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLFAQ8 1"
.TH PERLFAQ8 7 "2003-11-25" "perl v5.8.3" "Perl Programmers Reference Guide"
.SH "NAME"
perlfaq8 \- 系统交互 (2003/01/26 17:44:04 )
.SH "DESCRIPTION 描述"
.IX Header "DESCRIPTION"
Perl FAQ 的这一节覆盖了与系统交互有关的问题。主题包括进程间通信 (IPC)，用户界面控制 (键盘，屏幕和指点设备)，以及其他与数据操作不相关的事项
.PP
阅读你系统中的 perl 自带的 FAQ 和文档 (例如，perlvms,perlplan9...)。它们会包含有关你的 perl 版本的更详细的信息。
.Sh "如何找出正在运行的操作系统？"
.IX Subsection "How do I find out which operating system I'm running under?"$^O 这个变数（若使用 English 模组就是 $OSTYPE）会指出你的 perl 解译器执 行档是替哪个作业系统、平台所建的。
.Sh "为什么 exec() 不返回?"
.IX Subsection "How come exec() doesn't return?"
因为这正是它所做的：它用另一个不同的程式来取代你当时所执行的。如果你的程 式需要继续跑下去（这可能正是你问此问题的原因吧？），改用 system() 。
.Sh "如何对键盘／萤幕／滑鼠做些花样？"
.IX Subsection "How do I do fancy stuff with the keyboard/screen/mouse?"
连接／控制 键盘、萤幕和指标装置（“滑鼠”）的方法因作业系统的不同而有不 同；不妨试试下列模组：
.IP "Keyboard" 4
.IX Item "Keyboard"
.Vb 5
\&    Term::Cap                   标准内建模组
\&    Term::ReadKey               CPAN
\&    Term::ReadLine::Gnu         CPAN
\&    Term::ReadLine::Perl        CPAN
\&    Term::Screen                CPAN
.Ve
.IP "Screen" 4
.IX Item "Screen"
.Vb 3
\&    Term::Cap                   标准内建模组
\&    Curses                      CPAN
\&    Term::ANSIColor             CPAN
.Ve
.IP "Mouse" 4
.IX Item "Mouse"
.Vb 1
\&    Tk                          CPAN
.Ve
.PP
Some of these specific cases are shown below.
.Sh "How do I print something out in color?"
.IX Subsection "How do I print something out in color?"
In general, you don't, because you don't know whether
the recipient has a color-aware display device.  If you
know that they have an \s-1ANSI\s0 terminal that understands
color, you can use the Term::ANSIColor module from \s-1CPAN:\s0
.PP
.Vb 3
\&    use Term::ANSIColor;
\&    print color("red"), "Stop!\en", color("reset");
\&    print color("green"), "Go!\en", color("reset");
.Ve
.PP
Or like this:
.PP
.Vb 3
\&    use Term::ANSIColor qw(:constants);
\&    print RED, "Stop!\en", RESET;
\&    print GREEN, "Go!\en", RESET;
.Ve
.Sh "How do I read just one key without waiting for a return key?"
.IX Subsection "How do I read just one key without waiting for a return key?"
Controlling input buffering is a remarkably system-dependent matter.
On many systems, you can just use the \fBstty\fR command as shown in
\&\*(L"getc\*(R" in perlfunc, but as you see, that's already getting you into
portability snags.
.PP
.Vb 6
\&    open(TTY, "+/dev/tty 2>&1";
\&    $key = getc(TTY);           # perhaps this works
\&    # OR ELSE
\&    sysread(TTY, $key, 1);      # probably this does
\&    system "stty -cbreak /dev/tty 2>&1";
.Ve
.PP
The Term::ReadKey module from \s-1CPAN\s0 offers an easy-to-use interface that
should be more efficient than shelling out to \fBstty\fR for each key.
It even includes limited support for Windows.
.PP
.Vb 4
\&    use Term::ReadKey;
\&    ReadMode('cbreak');
\&    $key = ReadKey(0);
\&    ReadMode('normal');
.Ve
.PP
However, using the code requires that you have a working C compiler
and can use it to build and install a \s-1CPAN\s0 module.  Here's a solution
using the standard \s-1POSIX\s0 module, which is already on your systems
(assuming your system supports \s-1POSIX\s0).
.PP
.Vb 2
\&    use HotKey;
\&    $key = readkey();
.Ve
.PP
And here's the HotKey module, which hides the somewhat mystifying calls
to manipulate the \s-1POSIX\s0 termios structures.
.PP
.Vb 2
\&    # HotKey.pm
\&    package HotKey;
.Ve
.PP
.Vb 2
\&    @ISA = qw(Exporter);
\&    @EXPORT = qw(cbreak cooked readkey);
.Ve