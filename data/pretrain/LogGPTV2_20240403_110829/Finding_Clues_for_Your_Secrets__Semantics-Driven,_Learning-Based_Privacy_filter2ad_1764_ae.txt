2.47
3.43
2.77
7.60
401
210
659
379
709
2.38
1.81
1.69
1.84
2.83
Further, by comparing Play-16 with Tencent-16 in Ta-
ble IV, we observed that individual apps on the un-ofﬁcial
market (Tencent) tend to integrate more third-party libraries
(1.32 vs. 2.1). Since the security vetting process in app-market
like Tencent usually not be as strict as Google, apps in such un-
ofﬁcial stores tend to be more aggressive in collecting private
data. Another observation is that although the amount of third-
party libraries has a reasonable increment, by comparing from
same dataset crawled in different periods (Tencent-15 and
Tencent-16, column 7-9 in Table IV), the overall apps in the
market tend to have almost identical leakage scale (see column
9). This indicates such privacy leaks to third-party libraries
is a long-standing problem without noticed, due to the lack
effective discover tools like ClueFinder.
Library distribution and leakage patterns. ClueFinder dis-
covered that 3,502 libraries access private user data. To under-
stand what these libraries are and how they collect sensitive
information, we took a close look at the top 100 most popular
11
TABLE VI.
DISTRIBUTION OF TOP 100 THIRD-PARTY LIBRARIES
FROM PLAY-15 DATASET.
Library Category
Ads
Analytics
App Dev Framework
Utils
Social Network
Game Framework
% Libs % Apps
80.7%
35%
27%
68.9%
36.9%
26%
16.4%
21%
6.2%
14%
11%
9.6%
libraries from our datasets. Table VI summarizes our ﬁndings3,
where column 2 shows the percentage of libraries in different
category, and column 3 shows the percentage of apps contain
one of such libraries from all apps involved in privacy leakage.
As we see here, most of those gathering user data turn out to be
ad and analytical libraries (e.g., Inmobi, AppBrain, etc.). These
libraries do not enrich their hosting apps’ functionalities but
constitute the major source of information leaks.
From the ways these libraries interact with their hosting
apps, we can see that they are either given private information
by the apps through API calls or actively harvest information
(such as transferred location data, installed app list on device
and timestamps for speciﬁc events) from the apps, without
the app developer’s awareness. ClueFinder differentiates these
two scenarios by looking at where the identiﬁed sensitive state-
ments are located: if the statement is inside the hosting app’s
code, clearly the app’s developer intends to pass information to
a library, often for enriching the app’s functionalities or com-
municating with advertisers; Otherwise, when the statement is
found in the library code, apparently the library collects user
data without proper authorization. For example, the library
starts a service in background when app invokes one of its
public interface. We show the breakdown of these patterns in
Figure 7. Also, we present our ﬁndings about these cases in
Case Study (Section V-C).
Leaked content. Table VII presents prominent examples for
the data items exposed to the third-party, as discovered by
ClueFinder. It does not come as a surprise that several kinds
of identiﬁers are disclosed (e.g., facebook id), often together,
since they are often used in combination to track a user, even
when she re-installs the app or changes her device. Regarding
user proﬁles like gender and nick name, most of them are
from social networks like Facebook. Due to the extensive use
of mobile single-sign-on, once the user authenticates an app
with her social network account, an authorization of proﬁle
access on social network has also been granted to the app.
3One library can have multiple functionalities in different categories, as we
can see from the table.
Fig. 7. Distribution of leakage patterns in detected libraries
As a result, some of such data are open to other third-party
libraries the app integrates. We present a case study about such
a leakage in Section V-C.
Exposure of user
locations is another major source
leaks captured by ClueFinder. Unlike prior ﬁndings
of
location data are read directly through System APIs
that
(e.g.,getLastKnownLocation [42]),
interestingly most such
leaks reported by ClueFinder are caused by retrieving location-
related data from other, less sensitive sources, such as an
app’s persistent storage (e.g., SharedPreference, local database,
etc.). This new location acquisition strategy could attribute
to the enhancement of privacy protection on today’s Android
devices. Increasingly,
iOS-style runtime access control has
been adopted and even more ﬁne-grained control [10], such
as asking for the user consent for every location access. As a
result, third-party libraries tend to avoid frequently invoking
the sensitive System APIs, even when the app indeeds has
the location permission, and instead reuse the location data
collected when the app has a legitimate reason to do so,
e.g., when the app is just launched to the foreground. Also
we observed that some libraries even try to gather other
location-related information that does not need a location-
related permission to access. Examples include the BSSIDs
of Wi-Fi hotspots, which can be used to infer locations, as
reported by the prior research [41].
It is also worth noting that 12.0% of ﬂagged third-party
libraries gather the information about
installed apps on a
device. The list of installed apps can be used for different
purposes. For example, Ironsec [5] claims on its website,
“Using this platform, we’re able to accurately predict what
app a person will want to install next”. As another example, on
the website of MoPub [8], it states “User targeting allows you
to target users that have or don’t have speciﬁc applications”.
Besides, We found that some libraries, such as co.inset.sdk [1]
and ShareSDK [12], even persistently monitor app installation,
collecting package names and other data such as locations,
app-usage time etc. As reported by the prior studies [37], [18],
[22], linking installed apps to public auxiliary information can
lead to violation of user privacy: for example, the presence of
a gay dating app exposes the user’s sex orientation.
C. Case Study
Here we present some high-impact cases discovered in our
research with runtime veriﬁcation by intercepting their network
trafﬁc. As showed in Table VIII, these cases involve high-
proﬁle apps as well as popular libraries.
Case 1: Deliberate harvesting. The-Paper is a popular app
TABLE VII.
SELECTED PROMINENT LEAKAGE SAMPLES
Item
location
facebook id
gender
app list
nick name
oauth token
date-of-birth
% in Detected Apps % in Detected Libs
86.6%
26.7%
22.5%
15.9%
13.1%
10.4%
4.2%
90.5%
32.5%
32.6%
12.0%
10.9%
12.3%
3.1%
TABLE VIII.
APP & LIBRARY USED IN CASE STUDY
App Name Num.of Installs
The-Paper
16 million
Tinder
SnapTee
50-100 million
10-50 million
Library
Num.of.Apps
ShareSDK
AppBoy
MixPanel
13,468
419
7,284
focusing on Chinese political news with 16 million down-
loads [14]. Like many other news apps, it allows its users to
share news they read with any social networks (e.g. Weibo) or
friends using these networks. Inside the app, this function is
actually provided by ShareSDK, which acts as a syndicator that
integrates multiple social networks. The library is supposed to
serve as a “proxy”, accepting the user’s sharing request and
forwarding the content to the intended social network platform
(e.g., Weibo). However, ClueFinder found that this library
also accesses detailed user proﬁle data, which obviously goes
beyond the library’s stated functionality. Our manual review of
the app code further shows that ShareSDK actually deliberately
collects much more private data than necessary. By utilizing
the authorized permission for Sharing, ShareSDK also gains
the ability to read other data about the user on its social
network. As a result, it collects all user proﬁle information like
true name, gender, verify status, even education background
information. Also, it records such data and send them to its
own server. We list part of the sensitive information ShareSDK
collects in Table IX.
TABLE IX.
PRIVATE DATA WHICH COULD BE COLLECTED BY
SHARESDK
App Info
Weibo
Facebook
Others
top-task app list, app start timestamp,
app end timestamp, new install app,
new uninstall app info, etc.
Social Network Info
weibo id, nickname, true name, veriﬁed reason,
gender, sns url, resume, friendlist, shared posts,
latitude, longitude, liked posts, etc.
facebook id, nickname, gender, birthday, sns-url,
friend list (including accessible friend info),
verify status, education (school name, type, year),
work (company, employer, start & end date), etc.
tumblr, dropbox, pinterest, line, tencent qq,
tencent qzone, wechat (friend list), twitter,
net-ease microblog, evernote, google+, etc.
Our further investigation shows that ShareSDK is widely
integrated by most popular Chinese apps, each with more
than millions or even billions of downloads. However, the
library’s privacy harvesting behaviors have never been reported
12
and therefore are totally oblivious to the app users. Using
such proﬁle data, this SDK can track a user and identify
her personal characters from different vectors (e.g., what she
“liked” on Weibo, what posts she marked as favourite), as
well as her own social connections (e,g., friend list, followers,
working company, etc.). Also, since the library records the
user’s operations on its hosting apps (what she shared to social
network) and therefore knows a lot about her, for example, her
political stands.
Case 2: App data over-sharing. Tinder is a famous dating
app, with around 50-100 millions of downloads on the Google-
Play store [15]. The app integrates AppBoy [6] to collect
statistics information about its users. Each time a user takes
a certain action within the app, Tinder synchronizes its action
record to AppBoy, together with many sensitive data about
the user. As illustrated below, when a user refreshes a win-
dow to display other nearby users, Tinder sends her precise
location, bio information, dating targets, as well as her name
on Instagram to AppBoy. All such information disclosures are
unknown to the user, as showed below.
{"package_name":"com.tinder",
"extras":{"device":{"push_token":"..."},
"user":{"Seeking Distance":50, "gender":"f",
"Account Creation
Date":"2017-05-1*T16:56:32.163Z",
"Seeking Gender":1, "Has Work Info":true,
"Has Education Info":true,
"Instagram":"Susan_***", "Has Bio":true,
"Number of Profile Photos":15},
"sessions":[{"guid":"...",
"start_time":1.479401816693E9,
"events":[{"d":{"ll_accuracy":19.80900,
"longitude":-8*.4778, "latitude":3*.1615},}]}
Case 3: Social network data over-sharing. SnapTee (co.
snaptee.android) is a popular T-Shirt design app that allows
users to buy tees either customized by themselves or by other
designers. Also, users can share their designs with various
social networks (e.g., Facebook, Twitter) through the app. We
observed that when a user connects her SnapTee account with
a social network, Snaptee updates her proﬁle including full
name, email, account ID and other information collected from
the social network. Further, the app passes all such proﬁle
data to a data analytic library MixPanel [7]. From MixPanel’s
website, we found that the library is designed to “understand
who your users are, see what they do before or after they sign
up”. However, the user is kept in the dark when such data
collection and sharing happen. Following is the information
Snaptee shares with MixPanel.
{"$set":
{"$username":"p***t",
..,"$email":"li**PI:EMAIL",
..,"$first_name":"John",
"$last_name":"Smith",
"Twitter":"795**16"},
"$token":"f81d***cdf96",
"$time":"1479324910201",...}
}
13
VI. DISCUSSION
Android users have been suffering from privacy leak-
age issue for a long time. Fortunately, with the advent of
ClueFinder, the issue will be mitigated because developers
can track various types of sensitive data in a more efﬁcient
way. Speciﬁcally, the combination of semantic-based and code
structure based analysis makes precise localization against
private data possible, whereas traditional methods using ﬁxed
APIs can not label. With the help of more sensitive sources
found by ClueFinder, existing privacy leakage analysis tools
can be improved by taking advantage of better precision
and wider coverage of users’ sensitive data. For example,
ClueFinder can be employed with both static and dynamic
taint analysis [23] [16], by assigning data objects within the
statements as sensitive sources. It can also be applied in various
access control mechanisms [20] [19] for ﬁne grained control
over the sensitive data within the app.
Our measurement study against 445,668 apps helped us
to get a better understanding to the privacy-leakage issue
of Android apps. Although most of legitimate apps provides
information about how they manage users’ private data, includ-
ing what from third-party libraries, their vague descriptions