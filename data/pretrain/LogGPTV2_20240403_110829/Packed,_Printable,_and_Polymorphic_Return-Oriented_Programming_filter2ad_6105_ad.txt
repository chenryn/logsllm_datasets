location, we can simply read that memory location and write it to the word on the stack
from which %ecx is read. Implementing variable-bit shifts is a bit more difﬁcult, because
we must now come up with the mask corresponding to the shift bits. The easiest way to
achieve this is to store a 32-word lookup table of masks in the program.
We present a rotation gadget in Section A.2 in the Web-only appendix.
5.3 Control Flow
5.3.1 Unconditional Jump. As we noted in Section 4.1.4, an unconditional jump re-
quires simply changing the value of %esp to point to a new gadget, as with pop %esp; ret.
Figure 12 shows a gadget that causes an inﬁnite loop by jumping back on itself.
Loops in return-into-libc exploits have been considered before: see Gera’s “esoteric #2”
challenge [Richarte 2000; 2001].
5.3.2 Conditional Jumps. These are substantially trickier. Below we develop a method
for obtaining conditional jumps.
To begin, some review. The cmp instruction compares its operands and, based on their
relationship, sets a number of ﬂags in a register called %eﬂags.
In x86 programming,
it is often unnecessary to use cmp directly, because many operations set ﬂags as a side
ACM Journal Name, Vol. V, No. N, Month 20YY.
18
·
Ryan Roemer et al.
Fig. 12.
Inﬁnite loop via an unconditional jump.
Fig. 13. Conditional jumps, task two: Store either
1 or 0 in the data word labeled “CF goes here,”
depending on whether CF is set or not.
effect. The conditional jump instructions, jcc, cause a jump when the ﬂags satisfy certain
conditions. Because this jump is expressed as a change in the instruction pointer, the
conditional jump instructions are not useful for return-oriented programming: What we
need is a conditional change in the stack pointer.
The strategy we develop is in three parts, which we tackle in turn:
(1) Undertake some operation that sets (or clears) ﬂags of interest.
(2) Transfer the ﬂag of interest from %eﬂags to a general-purpose register.
(3) Use the ﬂag of interest to perturb %esp conditionally by the desired jump amount.
An alternative strategy would be to avoid %eﬂags altogether by implement our own com-
parisons as bit operations on registers.
For the ﬁrst task, we choose to use the carry ﬂag, CF, for reasons that will become clear
below. Employing just this ﬂag, we obtain the full complement of standard comparisons.
Most easily, we can test whether a value is zero by applying neg to it. The neg instruction
(and its variants) calculates two’s-complement and, as a side effect, clears CF if its operand
is zero and sets CF otherwise.
If we wish to test whether two values are equal, we can subtract one from the other and
test (using neg, as above) whether the result is zero. If we wish to test whether one value
is larger than another, we can, again, subtract the ﬁrst from the second; the sub instruction
(and its variants) set CF when the subtrahend is larger than the minuend.
For the second task, the natural way to proceed is the lahf instruction, which stores the
ﬁve arithmetic ﬂags in %ah. Unfortunately, this instruction is not available to us in the libc
sequences we found. Another way is the pushf instruction, which pushes a word containing
all of %eﬂags onto the stack. This instruction, like all “push-ret” sequences, is tricky to
use in a return-oriented setting.
Instead, we use the add with carry instruction, adc. Add with carry computes the sum
of its two operands and the carry ﬂag, which is useful in multiword addition algorithms. If
we take the two operands to be zero, the result is 1 or 0 depending on whether the carry
ﬂag is set — exactly what we need. This we can do quite easily by clearing %ecx and using
the instruction sequence adc %cl, %cl; ret. The process is detailed in Figure 13. We note,
ﬁnally, that we can evaluate complicated Boolean expressions by collecting CF values for
multiple tests and combining them with the logical operations described in Section 5.2.
For the third task, we proceed as follows. We have a word in memory that contains 1 or
0. We transform it to contain either esp delta or 0, where esp delta is the amount we’d
ACM Journal Name, Vol. V, No. N, Month 20YY.
%esppop%espret%esp(CFgoeshere)pop%ecxpop%edxret0x00000000adc%cl,%clretmovl%ecx,(%edx)retReturn-Oriented Programming
19
·
Fig. 14. Conditional jumps, task three, part one: Convert the word (labeled “CF here”) containing either 1 or 0
to contain either esp delta or 0. The data word labeled (scratch) is used for scratch.
like to perturb %esp by if the condition evaluates as true. One way to do this is given in
Figure 14. Now, we have the desired perturbation, and it is simple to apply it to the stack
pointer by means of the sequence
addl (%eax), %esp; addb %al, (%eax); addb %cl, 0(%eax); addb %al, (%eax); ret
with %eax pointing to the displacement. For completeness, we describe a gadget perform-
ing this task in Section A.2 in the Web-only appendix.
5.4 System Calls
To trap into the kernel, we could ﬁrst to load the desired arguments into registers and then
to make use of a “int 0x80; ret” or “sysenter; ret” sequence in libc. On Linux, we can
instead look for an lcall %gs:0x10(,0) instruction; this will invoke __kernel_vsyscall in
linux-gate.so.1, which in turn will issue the sysenter or int 0x80 instruction (cf. [Garg
2006b]).4 We detail, in Figure 15, a gadget that invokes a system call. Arguments could
be loaded ahead of time into the appropriate registers: in order, %ebx, %ecx, %edx, %esi,
%edi, and %ebp. We have left space in case the vsyscall function spills values onto the
stack, as the sysenter-based version does. Note that the word pointing to lcall would be
overwritten also; a repeatable version of this gadget would need to restore it each time.
5.5 Function Calls
Finally, we note that nothing prevents us from making calls to arbitrary functions in libc.
This is, in fact, the basis for previous return-into-libc exploits, and the required techniques
4The lcall sequence, unlike the others we use in this section, isn’t an unintended instruction sequence. We justify
this by noting that nearly all programs make system calls. Another option is to parse the ELF auxiliary vectors
(cf. [Garg 2006a].)
ACM Journal Name, Vol. V, No. N, Month 20YY.
%esp(CFhere)(scratch)pop%ebxret+94negl94(%ebx)pop%edipop%ebpmov%esi,%esiret(arbitrary)(arbitrary)pop%esiretespdeltapop%ecxpop%ebxret+0x5e5b6cc4andl%esi,(%ecx)rolb$0x5d,0x5e5b6cc4(%ebx)ret20
·
Ryan Roemer et al.
Fig. 15. System call.
Fig. 16. Shellcode.
are described in by Nergal [Nergal 2001]; the discussion of “frame faking” is of particular
interest. A special stack frame should be reserved for the called function, as discussed in
Section 6.6.
5.6 Shellcode
We now present a return-oriented shellcode. Our shellcode invokes the execve system call
to run a shell. This requires: (1) setting the system call index, in %eax, to 0xb; (2) setting
the path of the program to run, in %ebx, to the string “/bin/sh”; (3) setting the argument
vector argv, in %ecx, to an array of two pointers, the ﬁrst of which points to the string
“/bin/sh” and the second of which is null; and (4) setting the environment vector envp,
in %edx, to an array of one pointer, which is null. The shellcode is in Figure 16.
We store “/bin/sh” in the top two words of the shellcode; we use the next two words
for the argv array, and reuse the higher of these also for the envp array. We can set up the
appropriate pointers as part of the shellcode itself, but to avoid NUL bytes we must zero
out the null-pointer word after the shellcode has been injected.
The rest of the shellcode behaves as follows: Word 1 (from the bottom) sets %eax to
zero. Words 2–4 load into %edx the address of the second word in argv (minus 24; see
Section 5.1.2) and, in preparation for setting the system call index, load into %ecx the all-
0b word. Word 5 sets the second word in argv to zero. Word 6 sets %eax to 0x0b by
modifying its least signiﬁcant byte, %al. Words 7–8 point %ebx at the string “/bin/sh”.
Words 9–11 set %ecx to the address of the argv array and %edx to the address of the envp
array. Word 12 traps into the kernel.
Provided that the addresses of the libc instruction sequences pointed to and of the stack
addresses pointed to do not contain NUL bytes, this shellcode contains no NUL bytes ex-
cept for the terminator for the string “/bin/sh”. NUL bytes in the stack addresses can
be worked around by having the shellcode build these addresses at runtime by examining
%esp and operating on it; this would also allow the shellcode to be position-independent.
NUL bytes in libc addresses can be handled using well-known shellcoding techniques,
e.g., [Nergal 2001, Section 3.4].
ACM Journal Name, Vol. V, No. N, Month 20YY.
%esppop%eaxret(callindex)pop%espretlcall%gs:0x10(,0)ret%espxor%eax,%eaxretpop%ecxpop%edxret0x0b0b0b0b+24movl%eax,24(%edx)retadd%ch,%alretpop%ebxretpop%ecxpop%edxretlcall%gs:0x10(,0)ret(wordtozero)/bin/sh\0Return-Oriented Programming
21
·
Suppose that libc is loaded at base address 0x03000000 into some program. Suppose,
moreover, that this program has a function exploitable by buffer overﬂow, with return
address stored at 0x04ﬀﬀefc. In this case, the shellcode given above yields:
3e 78 03 03 07 7f 02 03 0b 0b 0b 0b 18 ff ff 4f
30 7f 02 03 4f 37 05 03 bd ad 06 03 34 ff ff 4f
07 7f 02 03 2c ff ff 4f 30 ff ff 4f 55 d7 08 03
34 ff ff 4f ad fb ca de 2f 62 69 6e 2f 73 68 00
Note that there is no NUL byte except the very last. Like all the other examples of return-
oriented code presented in this paper, this shellcode uses only code that is already present
in libc, and will function even in the presence of W⊕X.
6. SPARC GADGET CATALOG
In this section, we describe our set of SPARC gadgets using the Solaris standard C li-
brary. Our collection mirrors our x86 gadget catalog described in Section 5 and is sim-
ilarly Turing-complete on inspection. An attacker can create a return-oriented program
comprised of our gadgets with the full computational power of a real SPARC program. We
emphasize that our collection is not merely theoretical; every gadget discussed here is fully
implemented in our exploit compiler (discussed in Section 7).
Our gadgets are chosen to dovetail with the highly structured SPARC calling conven-
tion. When choosing instruction sequences to form gadgets, our chief concern is persisting
values (in registers or memory) across both individual instruction sequences as well as
entire gadgets. Because the ret, restore sufﬁx slides the register window after each
sequence, chaining computed values solely in registers is difﬁcult. Thus, for persistent
(gadget-to-gadget) storage, we rely exclusively on memory-based instruction sequences.
By pre-assigning memory locations for value storage, we effectively create variables for
use as operands in our gadgets.
For intermediate value passing (sequence-to-sequence), we use both register- and mem-
ory-based instruction sequences. For register-based value passing, we compute values into
the input %i[0-7] registers of one instruction sequence / exploit frame, so that they are
available in the next frame’s %o[0-7] registers (after the register window slide). Memory-
based value passing stores computed / loaded values from one sequence / frame into a
future exploit stack frame. When the future sequence / stack frame gains control, register
values are “restored” from the speciﬁc stack save locations written by previous sequences.
This approach is more complicated, but ultimately necessary for many of our gadgets.
We note in passing that the SPARC exploit techniques are far more restrictive than on
the x86, yet the ultimate attack is no less powerful.
We describe our gadget operations in terms of gadget variables, e.g., v1, v2, and v3,
where each variable refers to a addressable four-byte memory location that is read or mod-
iﬁed in the course of the instruction sequences comprising gadgets in an exploit. Thus, for
“v1 = v2 + v3”, an attacker pre-assigns memory locations for v1, v2 and v3, and the
gadget is responsible for loading values from the memory locations of v2 and v3, perform-
ing the addition, and storing the result into the memory location of v1. Gadget variable
addresses must be designated before exploit payload construction, reference valid memory,
and have no zero bytes (for string buffer encoding).
In our ﬁgures, the column “Inst. Seq.” describes a shorthand version of the effective
instruction sequence operation. The column “Preset” indicates information encoded in
ACM Journal Name, Vol. V, No. N, Month 20YY.
22
·
Ryan Roemer et al.
an overﬂow. E.g., “%i3 = &v2” means that the address of variable v2 is encoded in the
register save area for %i3 of an exploit stack frame. The notation “m[v2]” indicates access
to the memory stored at the address stored in variable v2. The column “Assembly” shows
the libc instruction sequence assembly code.
6.1 Memory
As gadget “variables” are stored in memory, all gadgets use loads and stores for variable
reads and writes. Thus, our “memory” gadgets describe operations using gadget variables
to manipulate other areas of process memory. Our memory gadget operations are mostly
analogous to C-style pointer operations, which load / store memory dereferenced from an
address stored in a pointer variable.
6.1.1 Address Assignment. Assigning the address of a gadget variable to another gad-
get variable (v1 = &v2) is done by using the constant assignment gadget, described in
Section 6.2.1.
6.1.2 Pointer Read. The pointer read gadget (v1 = *v2) uses two sequences and is
described in Figure 17. The ﬁrst sequence dereferences a gadget variable v2 and places the
pointed-to value into %i0 using two loads. The second takes the value (now in %o0 after
the register window slide) and stores it in the memory location of gadget variable v1.
Inst. Seq.
%i0 = m[v2]
v1 = m[v2]
Assembly
Preset
%i4 = &v2 ld [%i4], %i0
ld [%i0], %i0
ret
restore
%i3 = &v1 st %o0, [%i3]
ret
restore
Fig. 17. Pointer Read (v1 = *v2)
6.1.3 Pointer Write. The pointer write gadget (*v1 = v2) uses two sequences and is
described in Figure 18. The ﬁrst sequence loads the value of a gadget variable v2 into
register %i0. The second sequence stores the value (now in %o0) into the memory location
of the address stored in gadget variable v1.
Inst. Seq.
%i0 = v2
Preset
%l1 = &v2
Assembly
ld [%l1], %i0
ret
restore
%i0 = &v1-8 ld [%i0 + 0x8], %i1
m[v1] = v2
st %o0, [%i1]
ret
restore
Fig. 18. Pointer Write (*v1 = v2)
As the second instruction sequence indicates, we were not always able to ﬁnd completely
ideal assembly instructions in libc. Here, our load instruction (ld [%i0 + 0x8], %i1)
ACM Journal Name, Vol. V, No. N, Month 20YY.
Return-Oriented Programming
23
·
actually requires encoding the address of v1 minus eight into the save register area of the
exploit stack frame to pass the proper address value to the %i0 + 0x8 load.
6.2 Assignment
Our assignment gadgets store a value (from a constant or other gadget variable) into the
memory location corresponding to a gadget variable.
6.2.1 Constant Assignment. Assignment of a constant value to a gadget variable (v1
= Value ) ideally would simply entail encoding a constant value in an exploit stack frame
that is stored to memory with an instruction sequence. However, because all exploit frames
must pack into a string buffer overﬂow, we have to encode constant values to avoid zero
bytes. Our approach is to detect and mask any constant value zero bytes on encoding, and
then later re-zero the bytes.
Our basic constant assignment gadget for a value with no zero bytes is shown in 19.
Non-zero hexadecimal byte values are denoted with “**”.
Inst. Seq.
v1 = 0x********
Preset
%i0 = Value
%i3 = &v1
Assembly
st %i0, [%i3]
ret
restore
Fig. 19. Constant Assignment (v1 = 0x********)
For all other constants, we mask each zero byte with 0xff for encoding, then use clrb
(clear byte) instruction sequences to re-zero the bytes and restore the full constant. For
example, Figure 20 illustrates encoding for a value where the most signiﬁcant byte is zero.
Inst. Seq.
Preset
%i0 = Value |
Assembly
st %i0, [%i3]
v1 = 0xff******
0xff000000 ret
v1 = 0x00******
%i3 = &v1
%i0 = &v1