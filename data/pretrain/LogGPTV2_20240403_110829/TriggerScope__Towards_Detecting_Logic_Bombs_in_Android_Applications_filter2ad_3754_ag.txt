Proceedings of the Annual ACM Symposium on Applied Computing
(SAC), 2013.
[54] Symantec. Android Threat Set to Trigger On the End of Days, or the
Day’s End. http://www.symantec.com/connect/blogs/android-threat-set-
trigger-end-days-or-day-s-end, May 2011.
[55] K. Tam, S. Khan, A. Fattori, and L. Cavallaro. CopperDroid: Automatic
Reconstruction of Android Malware Behaviors. In Proceedings of the
Annual Symposium on Network and Distributed System Security (NDSS),
2015.
[56] The Guardian. Hacking Team hacked: ﬁrm sold spying tools to
http://www.theguardian.com/
repressive regimes, documents claim.
technology/2015/jul/06/hacking-team-hacked-ﬁrm-sold-spying-tools-
to-repressive-regimes-documents-claim.
[57] The Hufﬁngton Post. Hacking Team, Maker Of Government Surveil-
http://www.hufﬁngtonpost.com/
lance Software, Targeted In Attack.
2015/07/06/hacking-team n 7734926.html.
[58] The Register. Hacking Team’s snoopware ‘spied on anti-communist
activists in Vietnam’. http://www.theregister.co.uk/2015/07/13/hacking
team vietnam apt.
[59] U.S. Department of Homeland Security, U.S. Federal Bureau of In-
vestigation. Threats to Mobile Devices Using the Android Platform.
http://publicintelligence.net/dhs-fbi-android-threats/, August 2013.
[60] Veo Zhang, Trend Micro.
Spying Tool Listens
to Get
http://blog.trendmicro.com/trendlabs-security-intelligence/hacking-
team-rcsandroid-spying-tool-listens-to-calls-roots-devices-to-get-in/.
to Calls; Roots Devices
Hacking Team RCSAndroid
In.
[61] M. Y. Wong and D. Lie. IntelliDroid: A Targeted Input Generator for the
Dynamic Analysis of Android Malware. In Proceedings of the Annual
Symposium on Network and Distributed System Security (NDSS), 2016.
[62] W. Yang, X. Xiao, B. Andow, S. Li, T. Xie, and W. Enck. AppContext:
Differentiating Malicious and Benign Mobile App Behaviors Using
Context. In Proceedings of the International International Conference
on Software Engineering (ICSE), 2015.
[63] Y. Zhou and X. Jiang. Dissecting Android Malware: Characterization
and Evolution. In Proceedings of the IEEE Symposium on Security and
Privacy, 2012.
[64] Y. Zhou, Z. Wang, W. Zhou, and X. Jiang. Hey, You, Get Off of My
Market: Detecting Malicious Apps in Ofﬁcial and Alternative Android
Markets.
In Proceedings of the Annual Symposium on Network and
Distributed System Security (NDSS), 2012.
393393
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:49 UTC from IEEE Xplore.  Restrictions apply. 
A. Detailed Insights In Detected Suspicious Triggers
APPENDIX
Application Package Name
bvz.commutesms
com.BjrM
com.bigtincan.android.adfree
com.blogspot.markalcalaramos.android
com.ghostleopard.weathermaxlite
com.zyxsolutions.schedulersms
nz.co.mobiledevelopment.ProﬁleController
Application Package Name
com.mv.tdt
com.harmanbecker.csi.client
net.dotquasar.android.Imakokoroid
com.mv.mobie
jp.nekorl.rainnetwork
com.googlecode.androidcells
com.mv.tdtespana
jp.co.sha.YamagataMap
com.px3j.lso
com.sivartech.GoogleIO
com.vesperaNovus.app.StrayPhoneFinderFree Uses time as a source of randomness, by checking
Time-Triggered Behavior
Automatically sends text messages and customizes their content given the
hour of the day.
Writes different ﬁles to disk depending on the day of the week.
Checks for expiration date.
Automatically sends a text message 30 seconds after a missed call.
Customizes its GUI by selecting different icons depending on the hour of the
day.
Checks for expiration date.
Notiﬁcations for Google I/O events.
(1L & System.currentTimeMillis() / 1000L) == 0L.
Performs different SMS-related operations depending on the day of the week.
Checks for expiration date.
Location-Triggered Behavior
Checks the current location against a set of predeﬁned locations.
Checks whether the user’s location is within a speciﬁed area.
Compares the current location with a previously stored location.
Checks the current location against a set of predeﬁned locations.
Checks whether the current latitude is between -90 and 90, and whether the
current longitude is between -180 and 180. This is done as a sanity check,
and is easy to ﬁlter similar cases out if deemed uninteresting.
Compares the current location with a previously stored location.
Checks the current location against a set of predeﬁned locations.
Checks whether the device is in the vicinity of Yamagata Station, Japan. If
that is the case, the application displays “Welcome to Yamagata Station.”
The check is implemented by comparing the latitude and longitude against
hardcoded values.
Table IV: This table provides an overview of the samples our system ﬂagged as interesting. In particular, this table focuses on the time- and
location-related interesting triggers. For each of these apps, TRIGGERSCOPE returned precise and useful information about the
suspicious constraints. As an example, we consider the com.px3j.lso application. This application ﬁrst retrieves the current
date, and then compares it to a Date object that encodes the date May 10th, 2010. The comparison is performed by using the
Date.after() method. The tool annotates the guarded basic block with the following raw constraint: (!= (#now after
Date(2010/5/10 0:0:0)) 0). Note how the current date is symbolically represented by #now, how the tool precisely
models the involved APIs, and how it correctly identiﬁes the suspicious comparison.
394394
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:49 UTC from IEEE Xplore.  Restrictions apply. 
Application Package Name
se.oscar.skandiabankensms
mk.bisera.smslocator
com.messySMS.android free
tw.nicky.LockMyPhoneTrial
(RemoteLock)
com.app.publish
no.knowit.widgets.beta
com.innovationdroid.myremotephone
(MyRemotePhone)
sms.encryptor.v2.free
com.gallicsoft.shoppinglist
com.mobileglobe.android.MobileGlobe
com.counterpoint.dondeesta
com.care2wear.imhere
com.sophos.mobilecontrol.client.android
com.opticaller.opticaller
com.mobileiron.vodafone.MIClient
com.telenor.hu.ematrica
com.amine.aloto
SMS-Triggered Behavior
Online banking application that checks the sender number against the hardcoded
value +4781001001. This is part of the implementation of a two-factor authentica-
tion scheme.
It checks if the incoming SMS contains the string SMSLocator:. This is done to
determine whether the app should handle the received message. In such cases, the
message was probably sent by the same application (or a compatible one) running
on a different device.
It checks if the incoming SMS starts with the s:// string to determine whether the
app should handle it.
the
SMS
matches
with
checks
whether
incoming
the
It
adfbdfgertefvgdfgrehgjuiokhjgvbewruitkmbcvdfsgyhytdfsw string.
If
that is the case, the application unlocks the phone. This is the implementation of the
backdoor discussed in Section V.F.
It checks if the sender ﬁeld is set to the nothing passed in string. In this case,
the application checks the value of the ﬁeld against the default value, set to that
hardcoded string.
It checks if the incoming SMS starts with the Disponibelt: string to determine
whether the app should handle it.
It checks whether the incoming SMS contains the following two strings: MPS: and
gps. If that is the case, the application automatically sends an SMS to the original
sender containing the current GPS coordinates! We discussed this application in
detail in Section V.F.
It checks if the incoming SMS starts with !@! or !$!, to determine whether the app
should handle it.
It checks if the incoming SMS starts with the #SL# string to determine whether the
app should handle it.
It checks if the incoming SMS starts with (MobileGlobe) or (DirectGlobe), to
determine whether the app should handle it.
It checks if the incoming SMS is equal to "???". If that is the case, the application
automatically sends an SMS to the original sender containing the current GPS
coordinates. However, differently than MyRemotePhone, this application checks that
the sender of the message belongs to a set of trusted numbers.
This application implements the same functionality as the previous application.
However, it checks for the "?pos?" string (instead of "???"), and directly notiﬁes
the user about the request (instead of relying on a whitelist).
It checks if the incoming SMS starts with //sM/, to determine whether the app
should handle it.
It checks if the incoming SMS starts with *OCProvision* or *OCLic*, to deter-
mine whether the app should handle it.
It checks if the incoming SMS starts with MICtrlCmd:, to determine whether the
app should handle it. If that is the case, the application would parse the SMS to
determine which command must be executed.
It checks whether the sender is +36208100000 or +36208100100, to determine
whether the app should handle it.
It checks whether the sender is LOTO, to determine whether the app should handle
it.
Table V: This table provides an overview of the samples ﬂagged as interesting by TRIGGERSCOPE. In particular, this table focuses on the
triggers based on the content (or the sender) of incoming SMS messages.
395395
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:49 UTC from IEEE Xplore.  Restrictions apply. 
}
String str =
return true;
SendControlInformation(
if (str.length() > 7) {
ValueProvider.SaveBoolValue(
if (param.startsWith("/")) {
ExtractNumberFromMessage(param);
ExtractNumberFromMessage(param));
AlternativeControl(String param) {
if (param.startsWith("#")) {
1 public boolean
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23 }
Figure 8: The AlternativeControl method from the Zitmo
malware which implements SMS-based command-and-
control behavior. TRIGGERSCOPE automatically ﬂagged
the predicates involving startsWith and length
method invocations on SMS data as suspicious (lines 3,
9, and 12).
"AlternativeNumber", str);
SendControlInformation(str);
return true;
"AlternativeControl", true);
ValueProvider.SaveStringValue(
// ...
}
}
B. Relevant Code Snippets
return True
return True
return False
return False
return False
for b in blks:
for b in blocks:
if not isSuspicious(p):
if controlsSensitiveAction(p):
if controlsSensitiveAction(p2):
# Get all the objects that are
# (directly or indirectly)
# modified within this block.
for obj in b.getModifiedObjects():
# Get all the predicates that are
# related to an object.
preds = obj.getRelatedPredicates()
for p2 in preds:
# Get all blocks guarded by a given
# predicate.
blks = p.getGuardedBlocks()
if isSensitive(blks):
1 def isTrigger(p):
2
3
4
5
6
7
8 def controlsSensitiveAction(p):
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27 def isSensitive(blocks):
28
29
30
31
32
33
34
35
36
37
38
39
40 def isSuspicious(predicate):
41
42
43
44
45
46
47 def isSensitiveMethod(method):
48
49
50
51
52
Figure 7: Pseudocode of the isTrigger function (and related
ones). This function returns True if and only if the given
predicate matches our deﬁnition of trigger. The pseudocode
is simpliﬁed for clarity.
# It returns True iff the predicate’s
# structure and semantic match the
# definition of "suspicious" provided
# by the user.
...
# It returns True iff the target
# (framework) method matches the
# definition of "sensitive" provided
# by the user.
...
# Get all blocks of this method.
mblks = m.getBlocks()
if isSensitive(mblks):
# Get all invoked methods within
# this block.
for m in b.getInvokedMethods():
if isSensitiveMethod(m):
return True
return True
return True
return False
396396
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:49 UTC from IEEE Xplore.  Restrictions apply.