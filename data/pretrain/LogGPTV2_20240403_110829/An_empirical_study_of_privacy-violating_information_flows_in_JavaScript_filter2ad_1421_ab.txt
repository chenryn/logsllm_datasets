The url ﬁeld referenced above is a special ﬁeld added by our
framework to every object, indicating the URL of the script
that created the object. The above checking site therefore
ensures that no value tainted with “secret” is ever assigned
into an object created by a script that does not originate
from a.com.
Conﬁdentiality policies can be speciﬁed by injecting a spe-
cial “secret” taint to the getter-methods for conﬁdential vari-
ables, and checking that such taints do not ﬂow into the
inputs of the setter-methods for objects controlled by code
272originating at domains other than a.com. Such a policy could
be formally speciﬁed using (1) and (2) above.
Integrity policies can be speciﬁed by injecting special “un-
trusted” taints to getter-methods for untrusted variables,
and checking that such taints do not ﬂow into the inputs
of setter-methods for trusted variables. Such a policy could
be formally specifed as:
at $1.x if $1.url (cid:54)= “a.com” inject “untrusted”
at document.location = $1 block “untrusted” on $1
We can specify even ﬁner grained policies by reﬁning the
taints with information about individual URLs. The ex-
pressiveness of our policy language allows us to quickly ex-
periment with diﬀerent kinds of ﬂows within the same basic
framework, and could also lay the foundation for a browser-
based protection mechanism.
2.2 Policy Enforcement
The nature of JavaScript and dynamic code loading makes
precise static policy enforcement problematic, as it is im-
possible to predict what code will be loaded at run-time.
Thus, our approach is to carry out the enforcement in a fully
dynamic manner, by rewriting the code in order to inject,
propagate and checks taints appropriately.
Although there are known dangers to using rewriting-
based approaches for protection [20], our current goal is
actually not protection, bur rather to ﬁnd as many privacy-
violating ﬂows as possible. As such, one of our primary con-
cerns is ease of prototyping and ﬂexibility; in this setting,
rewrite-based approaches are very useful. In particular, im-
plementing our approach only required understanding the
browser’s AST data structure, and none of the complexities
of the JavaScript runtime, which allowed us to quickly build
and modify our prototype as needed. Furthermore, keeping
our framework clearly separate from the rest of the browser
gives us the ﬂexibility of quickly porting our approach to
new versions of Chrome, or even diﬀerent browsers.
Policy Enforcement Our
framework automatically
rewrites the code using the speciﬁed injection and checking
sites to ensure that taints are properly inserted, propagated
and checked in order to enforce the ﬂow policy. First, we
use the checking (resp.
injection) sites to synthesize wrap-
pers around the corresponding methods that ensure that
the inputs only contain (resp. outputs are tainted with)
the taints speciﬁed by the corresponding taint expressions
whenever the corresponding guard condition is met. Sec-
ond, we rewrite the code so that it (dynamically) propagates
the taints with the objects as they ﬂow through the pro-
gram via assignments, procedure calls etc.. We take special
care to ensure correct propagation in the presence of tricky
JavaScript features like eval, prototypes, and asynchronous
calls.
Rewriting Strategy Our strategy for enforcing ﬂow poli-
cies, is to extend the browser with a function that takes a
code string and the URL from which the string was loaded,
and returns a rewritten string which contains operations
that perform the injection, propagation and checking of
taints. Thus, to enforce the policy, we ensure that the code
on the web page is appropriately rewritten before it is eval-
uated. We ensure that “nested” eval-sites are properly han-
dled as follows. We implement our rewriting function as a
procedure in the browser source language (e.g., C++) that
//var initSettings = function(){...}
tmp0 = box(function(s){searchUrl = s;}, "a.com"),
var initSettings = tmp0;
//initSettings("a.com");
tmp1 = box("a.com", "a.com"),
initSettings(tmp1);
//var doSearch = function(){...}
var doSearch = box(function(){
var searchBox = getSearchBoxValue();
//var searchQry = searchBox + searchUrl;
var searchQry = TSET.direct.add(searchUrl),
tmp2 = unbox(searchUrl),
TSET.direct.add(searchBox),
tmp3 = unbox(searchBox),
tmp4 = tmp2 + tmp3,
TSET.boxAndTaint(tmp4, "a.com");
//document.location = searchQry;
check(searchQry, "untrusted"),
document.location = searchQry;
}, "a.com");
//eval(load("http://adserver.com/display.js"));
tmp5 = box("http://adserver.com/display.js", "a.com"),
tmp6 = box(load(tmp5), "www.a.com"),
tmp6.url = tmp5,
eval(RW(tmp6, tmp6.url));
Figure 2: Rewritten code from a.com. The comments
above each block denote the original version of the
rewritten block.
can be called from within JavaScript using the name RW and
the rewriter wraps the arguments of eval within a call to
RW to ensure they are (recursively) rewritten before evalua-
tion [32].
When the rewriting procedure is invoked on the code from
Figure 1 and the URL a.com, it emits the code shown in
Figure 2. The rewriting procedure rewrites each statement
and expression.
(In Figure 2, we write the original code
as a comment above the rewritten version.) Next, we step
through the rewritten code to illustrate how taints are in-
jected, checked and propagated, for the integrity property
that speciﬁes that document.location should only be inﬂu-
enced by a.com.
Injection To inject taints, we extend every object with two
special ﬁelds url and taint. To achieve this, we wrap all
object creations inside a call to a special function box which
takes a value and a url and creates a boxed version of the
value where the url ﬁeld is set to url indicating that the ob-
ject originated at url , and the taint ﬁeld is set to the empty
set of taints. We do this uniformly for all objects, including
functions (e.g., the one assigned to initSettings), liter-
als (e.g., the one passed as a parameter to initSettings),
etc.. Next, we use the speciﬁed injection sites to rewrite the
code in order to (conditionally) populate the taint ﬁelds at
method calls that match the sites. However, the integrity
injection site does not match anywhere in the code so far,
and so no taints are injected yet – they will be injected when
code gets loaded from the ad server.
273Checking Before each call site that matches a speciﬁed
check site, we insert a call to a special check function. The
call to check is predicated on the check site’s condition.
The function check is passed the checked expression V and
taint T corresponding to the matching check site. The func-
tion determines whether the taints on the checked expression
contain the prohibited taint, and if so, halts execution.
For example, consider the rewritten version of the assign-
ment to document.location in the body of doSearch which
matches the checking site from the integrity policy. The
rewrite inserts a call to check. At run-time, when this
call is executed it halts the program with a ﬂow-violation
message if searchQry.taint has a (taint) value of the form
“untrusted”.
Propagation Next, we consider how the rewriting instru-
ments the code to add instructions that propagate the taints.
• For assignments and function calls, as all objects are
boxed, the taints are carried over directly, once we have
created temporaries that hold boxed versions of values.
For example, the call to initSettings uses tmp0, the
boxed version of the argument, and hence passes the
taints into the function’s formals. The assignment to
searchBox is unchanged from before, as the right-hand
side is function call (whose result has already been
appropriately boxed).
• For binary operations, we must do a little more work,
as many binary operations (e.g., string concatena-
tion) require their arguments be unboxed. To handle
such operations, we extend the code with a new ob-
ject called the taint-set, named TSET. We use this
object to accumulate the taints of sub-expressions
of compound expressions. The object supports two
operations.
First, TSET.direct.add(x, url), which
adds the taints in x.taint to the taint-set. Second,
TSET.boxAndTaint(x, url), which creates a boxed ver-
sion of x (if it is not boxed), and the taints accumulated
on the taint-set, clears the taint-set, and returns the
boxed-and-tainted version of x. We use the direct
ﬁeld as there are several other uses for the TSET object
that are explained later. For example, consider the
rewritten version of searchBox + searchUrl. We add
the taints from searchBox (resp. searchUrl) to the
taint-set, and assign an unboxed version to the fresh
temporary tmp2 (resp. tmp3). Next, we concatenate
the unboxed strings, and assign the result to tmp4. Fi-
nally, we call TSET.boxAndTaint(tmp4, “a.com”), which
boxes tmp4, adds the taints for the sub-expressions
stored in the taint-set and returns the boxed-and-
tainted result.
• For code loading operations (modeled as load(·)), the
rewriting boxes the strings, and then adds a url ﬁeld
to the result that indicates the domain from which
the string was loaded. For example, consider the code
loaded from adserver.com. The name of the URL is
stored in the temporary tmp5, and the boxed result is
stored in a fresh temporary tmp6, to which we add a
url ﬁeld that holds the value of tmp5.
• For eval operations, our rewriting interposes code that
passes the string argument to eval and the URL from
which the string originated to the the rewriting func-
tion RW, thereby ensuring the code is rewritten before
it is evaluated. For example, consider the operation
at the last line of the code from Figure 1 which eval’s
the string loaded from adserver.com. In the rewritten
version, we have a boxed version of the string stored
in tmp6; the rewriting ensures that the string that gets
executed is actually tmp6 rewritten assuming it origi-
nated at tmp6.url, which will have the eﬀect of ensur-
ing that taints are properly injected, propagated and
checked within the dynamically loaded code.
The above code assumes, for ease of exposition, that the
ﬁelds taint and url are not read, written or removed by
any code other than was placed for tracking.
Attack Prevention Suppose that the load(·) operation re-
turns the string initSettings("evil.com"). The rewritten
code invokes the rewriting function RW on the string, and the
URL adserver.com yielding the string
tmp10 = box("evil.com", "adserver.com"),
if (tmp10.url != "a.com"){
tmp10.taint += ["untrusted"]
},
initSettings(tmp10);
The if-expression injects the taints to the value re-
turned by the implicit getter-call (i.e., the read of tmp10)
that yields the value passed to initSettings. Thus,
the argument passed to initSettings carries the taint
“untrusted”, which ﬂows into searchUrl when the as-
signment inside initSettings is executed. Finally, when
the button click triggers a call to doSearch, the taint
ﬂows through the taint-set into the value returned by the
call TSET.boxAndTaint(tmp4, “a.com”), and from there into
searchQry. Finally, the check (just before the assignment to
document.location) halts execution as the ﬂow violates the
integrity policy, thereby preventing the redirection attack.
Rewriting for Conﬁdentiality Policies The above exam-
ple illustrates how rewriting enforces integrity policies. The
case for conﬁdentiality policies diﬀers only in how taints are
injected and checked; the taints are propagated in an identi-
cal fashion. To inject taints, the rewriting adds a “secret”
taint to the results of each read from a conﬁdential object
(e.g., document.cookie.) To check taints, the rewriting in-
serts calls to check before any writes to variables (i.e., invo-
cations of setter methods) in code originating in untrusted
URLs. The check halts execution before any value with the
“secret” taint can ﬂow into an untrusted location.
Robustness Even though the primary purpose of our tool
so far has been to evaluate existing ﬂows (a scenario under
which we don’t need to worry about malicious code trying
to subvert our system), our framework does in fact protect
its internal data structures from being maliciously modiﬁed.
In particular, our tool disallows a user JavaScript program
from referencing any of the variables and ﬁelds used for taint
tracking such as TSET. More speciﬁcally, since our frame-
work tracks reads and writes to all variable and ﬁeld, it can
simply stop a program that tries to read or write to any of
the internal variables that we use to track information ﬂow.
2.3 Indirect Flows
Next, we look at how the rewriting handles indirect ﬂows
due to control dependencies. We start with the data struc-
ture that dynamically tracks indirect ﬂows, and then de-
scribe the key expressions that are aﬀected by indirect ﬂows.
274Indirect Taint Stack (TSET.indirect) To track indirect
ﬂows, we augment the taint set object with an indirect-taint
stack (named TSET.indirect). Our rewriting ensures that
indirect taints are added and removed from the indirect taint
stack as the code enters and leaves blocks with new control
dependences. The TSET.boxAndTaint(·,·) function, which
is used to gather the taints for the RHS of assignments,
embellishes the (RHS) object with the direct taints at the
top of the direct taint stack, and the indirect taints stored
throughout the indirect taint stack. The latter ensures that
at each assignment also propagates the indirect taints that
held at the point of the assignment.
Branches For branch expressions of the form if e1 e2 e2,
we ﬁrst assign the rewritten guard to a new temporary tmp1,
and push the taints on the guard onto the indirect taint
stack. These taints will reside on the indirect taint stack
when (either) branch is evaluated, thereby tainting the as-
signments that happen inside the branches. After the entire
branch expression has been evaluated, the rewritten code
pops the taints, thereby reverting the stack to the set of
indirect taints before the branch was evaluated.
Example
expression:
if (z) { x = 0 } To ensure that taints from z ﬂow
into x when the assignment occurs inside the then-branch,
the expression is rewritten to:
Consider
the
branch
tmp = z,
TSET.indirect.push(tmp),
if (unbox(tmp)){
x = TSET.boxAndTaint(box(0,...),...)
},
TSET.indirect.pop()
The ellipses denote the URL string passed to RW and we
omit the calls to check and TSET.direct.add(·,·) for brevity.
The rewrite ensures that the taints from the guard z are on
the indirect taint stack inside the branch, and these taints
are added to the (boxed version of) 0 that is used for the
assignment, thereby ﬂowing them into x. The pop after the
branch ﬁnishes reverts the indirect stack to the state prior
to the branch.
Indirect vs. Implicit Flows. The above example illus-
trates a limitation of our fully dynamic approach; we can
track indirect ﬂows induced by a taken branch (such as the
one above) but not implicit ﬂows that occur due to a not-
taken branch. For example, if the above branch was pre-
ceded by an assignment that initialized x with 1, then an
observer that saw that x had the value 1 after the branch
would be able to glean a bit of information about the value
of z. Our rewriting, and indeed, any fully dynamic analysis
[7] will fail to detect and prohibit such implicit ﬂows.
Function Calls Our rewriting adds an indirect taint pa-
rameter to each function deﬁnition. This parameter holds
the indirect taints that hold at the start of the function
body; the taints on it are pushed onto the indirect taint
stack when the function begins execution. Furthermore, the
rewriting ensures that at each function callsite, the indirect
taints (in the indirect taint stack) at the caller are passed
into the indirect taint parameter of the callee.
Event Handlers cause subtle information ﬂows. For ex-
ample, if foo is the handler for the MouseOver event, the
fact that foo is executed contains the information that the
mouse hovered over some part of the page. We capture these
ﬂows as indirect ﬂows triggered by the tests within the DOM
event dispatch loop
while(1){
e = getEvent();
if (e.isClick()) onClick(e);
if (e.isMouseOver()) onMouseOver(e);
if (e.isScroll()) onScroll(e);
...
}
to capture ﬂows
Thus,
triggered by a MouseOver
event, we simply inject a taint at the output of the
$1.isMouseOver(...). The if ensures that the taint ﬂows
into the indirect taint parameter of the registered handler
(bound to onMouseOver).
Full JavaScript The examples described in this section
have given a high-level overview of our rewriting-based ap-