        SNAPBUILD_START,  
        /*  
         * We have collected enough information to decode tuples in transactions  
         * that started after this.  
         *  
         * Once we reached this we start to collect changes. We cannot apply them  
         * yet because the might be based on transactions that were still running  
         * when we reached them yet.  
         */  
        SNAPBUILD_FULL_SNAPSHOT,  
        /*  
         * Found a point after hitting built_full_snapshot where all transactions  
         * that were running at that point finished. Till we reach that we hold  
         * off calling any commit callbacks.    
         */  
        SNAPBUILD_CONSISTENT  
} SnapBuildState;  
```  
从src/backend/replication/snapbuild.c截取出来的一张状态图，在创建snapshot时，经过的几个阶段和状态描述。  
![pic](20150908_01_pic_001.png)  
创建slot时，表示all running toplevel TXNs finished。  
所以在slot后，从XLOG解析到的ROW，都是整个事务的，不会出现部分事务的ROW。（当然，我们其实还有办法区分是不是部分事务的ROW，因为事务开始的信息也可以从XLOG获取，凡是没有事务开始信息的都可以认为是部分事务。）  
接下来要考虑的就是数据初始化的问题了，我们能不能向londiste3那样，记录snapshot时的XID，然后COPY数据，然后再从XLOG获取呢？（其实也可以，只是decode时，我们需要输出ROW对应的XID，同时在APPLY时过滤掉初始化数据时已经包含的XID）。  
但是PostgreSQL官方不建议我们这么做，它更倾向我们使用snapshot export，即创建slot时，使用同一个事务导出事务镜像，并使用这个事务镜像去导出数据，那么从这个SLOT解析出来的ROW都是我们在此次数据导出后需要APPLY的ROW。  
例子：  
[《PostgreSQL 9.5 new feature - pg_dump use --snapshot taken by another session (exp. slot, pg_export_snapshot())》](../201506/20150616_02.md)    
http://www.postgresql.org/docs/devel/static/logicaldecoding-explanation.html  
```  
46.2.4. Exported Snapshots  
When a new replication slot is created using the streaming replication interface,   
a snapshot is exported (see Section 9.26.5),   
which will show exactly the state of the database after which all changes will be included in the change stream.   
This can be used to create a new replica by using SET TRANSACTION SNAPSHOT to read the state   
of the database at the moment the slot was created.   
This transaction can then be used to dump the database's state at that point in time,   
which afterwards can be updated using the slot's contents without losing any changes.  
```  
slot需要记录已经读取到哪些XLOG OFFSET了，对于逻辑SLOT，还需要记录哪些XMIN是还没有DECODE的，在做垃圾回收时，这些XMIN以前的垃圾可以回收，以后的不能回收，因为可能需要用来转换relname, relattrname等(pg_class,pg_attr)。(XLOG中记录的是OID，所以decode必须要从数据库将OID转换为对应的表名，列名。)  
src/include/replication/slot.h  
```  
/*  
 * Shared memory state of a single replication slot.  
 */  
typedef struct ReplicationSlot  
{  
        /* lock, on same cacheline as effective_xmin */  
        slock_t         mutex;  
        /* is this slot defined */  
        bool            in_use;  
        /* is somebody streaming out changes for this slot */  
        bool            active;  
        /* any outstanding modifications? */  
        bool            just_dirtied;  
        bool            dirty;  
        /*  
         * For logical decoding, it's extremely important that we never remove any  
         * data that's still needed for decoding purposes, even after a crash;  
         * otherwise, decoding will produce wrong answers.  Ordinary streaming  
         * replication also needs to prevent old row versions from being removed  
         * too soon, but the worst consequence we might encounter there is  
         * unwanted query cancellations on the standby.  Thus, for logical  
         * decoding, this value represents the latest xmin that has actually been  
         * written to disk, whereas for streaming replication, it's just the same  
         * as the persistent value (data.xmin).  
         */  
        TransactionId effective_xmin;  
        TransactionId effective_catalog_xmin;  
        /* data surviving shutdowns and crashes */  
        ReplicationSlotPersistentData data;  
        /* is somebody performing io on this slot? */  
        LWLock     *io_in_progress_lock;  
        /* all the remaining data is only used for logical slots */  
        /* ----  
         * When the client has confirmed flushes >= candidate_xmin_lsn we can  
         * advance the catalog xmin, when restart_valid has been passed,  
         * restart_lsn can be increased.  
         * ----  
         */  
        TransactionId candidate_catalog_xmin;  
        XLogRecPtr      candidate_xmin_lsn;  
        XLogRecPtr      candidate_restart_valid;  
        XLogRecPtr      candidate_restart_lsn;  
} ReplicationSlot;  
```  
2nd开发的一个基于逻辑复制的decode插件  
https://github.com/2ndQuadrant/bdr/tree/bdr-plugin/REL0_9_STABLE  
有兴趣的同学可以试试，9.4分支如下。  
git clone -b REL0_9_STABLE https://github.com/2ndQuadrant/bdr   
## 参考  
1\. http://git.postgresql.org/gitweb/?p=skytools.git;a=summary  
2\. http://www.postgresql.org/docs/devel/static/logicaldecoding-explanation.html  
3\. http://www.postgresql.org/docs/devel/static/functions-info.html  
4\. [《PostgreSQL 9.5 new feature - pg_dump use --snapshot taken by another session (exp. slot, pg_export_snapshot())》](../201506/20150616_02.md)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")