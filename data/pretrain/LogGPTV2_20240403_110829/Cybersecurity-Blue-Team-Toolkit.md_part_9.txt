.pagebreak title="29" role="doc-pagebreak"}
```{=html}
```
::: {.top .hr}
------------------------------------------------------------------------
:::
::: {.section .feature3}
### [LAB 2.6](#c02.xhtml#R_c02-fea-0007){#c02.xhtml#c02-fea-0007 role="doc-backlink"}: ENABLING WINDOWS MASTER CONTROL PANEL {#c02.xhtml#head-2-27}
::: section
[]{#c02.xhtml#c02-sec-0014}
1.  [Make sure you are using an account with administrative
    privileges.]{#c02.xhtml#c02-li-0039}
2.  [Right‐click your Windows 7, 8.1, or 10 desktop and choose New ➪
    Folder.]{#c02.xhtml#c02-li-0040}
3.  [Name the folder
    **GodMode.{ED7BA470‐8E54‐465E‐825C‐99712043E01C}**.]{#c02.xhtml#c02-li-0041}
4.  [Press Enter and double‐click the Windows Master Control Panel icon
    to open the file.]{#c02.xhtml#c02-li-0042}
:::
::: {.bottom .hr}
------------------------------------------------------------------------
:::
:::
```{=html}
```
It\'s not quite as exciting as being completely invulnerable in *Doom*,
but as far as being in IT, having all these tools in one spot is pretty
awesome. Before you start experimenting with the wide assortment of
tools, you may want to consider taking a backup of your machine. As
shown in [Figure
2.9](#c02.xhtml#c02-fig-0009){#c02.xhtml#R_c02-fig-0009}, when you open
the `GodMode` folder, creating a backup and restore file will be one of
the first options you see.
![[**[Figure 2.9](#c02.xhtml#R_c02-fig-0009){#c02.xhtml#c02-fig-0009
role="doc-backlink"}:**]{.figureLabel} Just a few of the 260+ tools in
God mode](Images/c02f009.jpg){.center width="488" height="584"}
:::
:::
[]{#c03.xhtml}
::: {#c03.xhtml#sbo-rt-content}
# []{#c03.xhtml#Page_31 .pagebreak title="31" role="doc-pagebreak"}[]{#c03.xhtml#c03}[CHAPTER 3]{.chapterNumber} [Nmap---The Network Mapper]{.chapterTitle}
::: section
[]{#c03.xhtml#c03-sec-0001}
WHAT YOU WILL LEARN IN THIS CHAPTER:
-   [Ports]{#c03.xhtml#c03-li-1001}
-   [Protocols]{#c03.xhtml#c03-li-1002}
-   [Services]{#c03.xhtml#c03-li-1003}
-   [OS]{#c03.xhtml#c03-li-1004}
-   [ZenMap]{#c03.xhtml#c03-li-1005}
One of my favorite nonprofit organizations is the Center for Internet
Security (CIS). The mission of CIS is to "identify, develop, validate,
promote, and sustain best‐practice solutions for cyber defense and build
and lead communities to enable an environment of trust in cyberspace."
CIS is a collection of subject‐matter experts (SMEs) who are able to
work together to identify effective security measures for the good of
everyone. CIS has an important role in cybersecurity. One of its many
contributions is maintaining the most powerful and current cybersecurity
best‐practices documentation called the "CIS Controls Version 7."
The controls are divided into basic, foundational, and organizational
actions so that you can protect your organization and safeguard your
data from cyberattacks. Attackers all over the world are scanning
public‐facing IP addresses, attempting to find weaknesses in a network.
This chapter will focus on the top CIS‐recommended set of actions that
all organizations should take. The first is the inventory and control of
hardware assets, and the second is the inventory and control of software
on those assets. When you are able to track and manage devices and
software on your network, you ultimately prevent unauthorized devices
and software. You have increased your security posture.
One of the first things you will do to build a security program is
implement inventory control. The tool we will start this process with is
Nmap, an open []{#c03.xhtml#Page_32 .pagebreak title="32"
role="doc-pagebreak"}source network mapper. Many system administrators
find Nmap to be useful when they need to build their documentation
around network inventory and topology. In the background, Nmap
manipulates IP packets in several ways, attempting to determine what
assets are on the network. It will also attempt to find what services,
applications, and operating systems are on those assets.
Nmap was originally built as a command‐line tool you could execute
through a shell or terminal window. The goal was to build a flexible and
extremely powerful free open source tool. Originally built on Linux for
pure‐hearted system administrators, it evolved and is available for
Windows as well as in a graphical user interface (GUI) format, Zenmap.
There are more than 100 command‐line options in Nmap, and some of these
were never fully documented by the author, Gordon Lyon.
In any size network but especially large, dynamic networks, it is
vitally important to break down these complex networks and analyze
traffic, facilitate issues, and fix connection problems. Network
scanning is a process of finding assets that are alive or have a
heartbeat, communicating and then gathering as much vital information
about those assets as possible. Network scanning can be divided into
four stages:
-   [Network mapping]{#c03.xhtml#c03-li-0001}
-   [Open ports]{#c03.xhtml#c03-li-0002}
-   [Services running]{#c03.xhtml#c03-li-0003}
-   [Operating systems]{#c03.xhtml#c03-li-0004}
:::
::: section
[]{#c03.xhtml#c03-sec-0002}
## Network Mapping {#c03.xhtml#head-2-28}
Network mapping uses a process to discover and visualize assets by
actively probing them. Nmap sends both TCP and UDP packets to a targeted
machine. These are called *probe packets*. A probe packet is a packet
used in an active tool to collect information on a network segment of
interest. Data is collected after sending those probe packets that hop
from node to node and asset to asset, which returns that information to
Nmap.
If you were to scan 65,536 ports on every single machine in your
ecosystem, this scan could take an astronomically long time and is
really unnecessary. Occasionally, you may hear someone refer to a host
discovery scan as a ping scan. In Nmap, you could choose to skip the
ping itself and use other targeted methods to find the active hosts on
your network.
Network environments are all different; therefore, host discovery needs
are going to be very different. The hosts on your network serve multiple
purposes, and from a priority standpoint, not all assets are created
equal. Some assets are mission critical, while some are used only
occasionally and are not as important.
By default, Nmap starts its process by launching host discovery. By
default, Nmap will send an ICMP echo request, ICMP timestamp request,
and a TCP []{#c03.xhtml#Page_33 .pagebreak title="33"
role="doc-pagebreak"}packet to port 80 (HTTP) and a TCP packet to port
443 (HTTPS). There are several options you can add to a basic Nmap scan
to tailor it to your environment. You will definitely want to be using
administrator credentials to execute these commands to achieve the best
results. For example, Address Resolution Protocol (ARP) is enabled when
scanning networks when you are using administrator credentials. ARP is a
protocol for mapping an IP address to a physical address on a host
called a *Media Access Control (MAC) address*. The table that gets
created during an ARP request is called the ARP cache and matches a
host\'s network address with its physical address.
To launch a scan on a network segment, use the following command:
``` {#c03.xhtml#c03-code-0001}
>nmap -sn 
```
The results will include all active hosts that respond to the probes
sent by Nmap. The option `‐sn```{=html} disables port scanning
while leaving the discovery phase untouched. [Figure
3.1](#c03.xhtml#c03-fig-0001){#c03.xhtml#R_c03-fig-0001} shows how Nmap
does a ping sweep of assets, meaning you will see only the available
hosts that responded to the probes sent out. Most system administrators
find this option to be extremely useful and quick to verify which assets
are active on the network.
![[**[Figure 3.1](#c03.xhtml#R_c03-fig-0001){#c03.xhtml#c03-fig-0001
role="doc-backlink"}:**]{.figureLabel} ` nmap` ``{=html}
command](Images/c03f001.jpg){.center width="694" height="410"}
It is important to scan periodically for new assets that have been added
to your network without notification. Change management procedures are
not followed or, in a new business, not even written. New machines can
be added to networks without being scanned for vulnerabilities.
I had a situation once where the system administrator would scan systems
for vulnerabilities in the evenings and on weekends to avoid production
hours. Over the weekend, he would see a server pop up in his scans. When
this admin []{#c03.xhtml#Page_34 .pagebreak title="34"
role="doc-pagebreak"}would come back in on Monday, he couldn\'t ping
this server. It had disappeared. This happened for a couple weeks until
he finally found the problem. One of the networking support people who
were supposed to be working over the weekend had a gaming server under
his desk. They were having LAN wars instead of patching systems. When
they were done "working," the server was unplugged from the network.
:::
::: section
[]{#c03.xhtml#c03-sec-0003}
## Port Scanning {#c03.xhtml#head-2-29}
A port scan is a way to figure out which ports on a network are open and
which are listening and possibly show whether there are any security
devices such as firewalls between the sender and receiver. This process
is called *fingerprinting*.
Ports are numbered from 0 to 65,535, but the lower range of 0 to 1,023
consists of the "well‐known" ones. A port scan will carefully craft a
packet to each destination port. There are some basic techniques to
choose from, depending on the network topology and scanning goals.
-   [**Vanilla scan**: This is the most basic scan, fully connecting to
    65,536 ports. It\'s accurate but easily
    detectable.]{#c03.xhtml#c03-li-0005}
-   [**SYN scan**: This scan sends a SYN but does not wait for a
    response. It\'s faster, but you still learn if the port is
    open.]{#c03.xhtml#c03-li-0006}
-   [**Strobe scan**: This selectively attempts to connect to only a few
    ports, typically fewer than 20.]{#c03.xhtml#c03-li-0007}
There are some other techniques that penetration testers use, such as
Stealth, FTP Bounce, and XMAS, which are scans that were developed so
the sender could scan undetected. The sender\'s location can be
obfuscated so that an attacker can get the information while not being
tracked.
Now that you know a machine is alive on the network, it\'s time to
determine which ports are open on that host. From a security viewpoint,
it is vital to the health and well‐being of your network to know exactly
which of the 65,536 ports might be exposed. There are six port states
that are currently recognized by Nmap.
-   [**Open**: An application is actively listening for a
    connection.]{#c03.xhtml#c03-li-0008}
-   [**Closed**: A probe has been received, but no application is
    listening.]{#c03.xhtml#c03-li-0009}
-   [**Filtered**: It\'s unknown if port is open; packet filtering
    typically from a firewall has prevented a probe from reaching the
    port. Sometimes you get an error response, and sometimes filters
    will just drop the probe.]{#c03.xhtml#c03-li-0010}
-   [**Unfiltered**: A port is accessible, but Nmap hasn\'t a clue if
    the port is open or closed.]{#c03.xhtml#c03-li-0011}
-   [[]{#c03.xhtml#Page_35 .pagebreak title="35"
    role="doc-pagebreak"}**Open/filtered**: The port is filtered or
    open, but no state is established.]{#c03.xhtml#c03-li-0012}
-   [**Closed/filtered**: Nmap is unable to determine whether the port
    is closed or filtered.]{#c03.xhtml#c03-li-0013}
The most popular port scan to use by default is the
`‐sS```{=html}, or SYN, scan you see in [Figure
3.2](#c03.xhtml#c03-fig-0002){#c03.xhtml#R_c03-fig-0002}. It is a fast
scan, scanning thousands of ports per second relatively stealthily since
it\'s not waiting around for an acknowledgment.
![[**[Figure 3.2](#c03.xhtml#R_c03-fig-0002){#c03.xhtml#c03-fig-0002
role="doc-backlink"}:**]{.figureLabel} Nmap SYN
scan](Images/c03f002.jpg){.center width="678" height="777"}
To launch a port scan on a network segment, use the following command:
``` {#c03.xhtml#c03-code-0002}
>nmap -sS 
```
:::
::: section
[]{#c03.xhtml#c03-sec-0004}
## Services Running {#c03.xhtml#head-2-30}
Many moons ago, I taught the CompTIA classes for Iron Horse University
at Fort Carson in Colorado Springs. My soldiers would sit in my
classroom for two weeks of instruction and hands‐on learning. So, if
someone wanted to talk to one of my soldiers, they would come down the
hall and into classroom 4. They needed a specific person, so they would
go to that person\'s seat so they could talk to him or her.
As an example, let\'s say the soldier\'s name was Carla, who was seated
in seat 23. So, Carla\'s socket was classroom.4:23. A socket is a point
of ingress or egress. The combination of an IP address and a port is
called an *endpoint*. A socket is one of the endpoints in a two‐way
conversation between two programs communicating over a network. A socket
is bound to a port number so we know which application that data is
destined for.
The person sitting in seat 23 is like the program that is registered
with the operating system to listen at that port. What if Carla was
absent? What if someone else was sitting in seat 23? Programs listening
on a certain port may or may not be the usual listener. You need to know
whether Carla and Robert swapped seats. [Table
3.1](#c03.xhtml#c03-tbl-0001){#c03.xhtml#R_c03-tbl-0001} describes the
most common ports and the services that should be running on them.
```{=html}
```
```{=html}
```
[**[Table 3.1](#c03.xhtml#R_c03-tbl-0001){#c03.xhtml#c03-tbl-0001
role="doc-backlink"}:**]{.figureLabel} Top Ports Defined
```{=html}
```
  PORT NUMBER   NAME           DEFINED                              USED FOR
  ------------- -------------- ------------------------------------ -----------------------------------------------------------------------------------------------------------------------
  20            FTP‐data       File Transfer Protocol               Moving files between client and server
  21            FTP‐control    File Transfer Protocol               Control information for moving files
  22            SSH            Secure Shell                         Security for logging in and file transfer