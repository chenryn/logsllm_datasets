title:Doubly-Efficient zkSNARKs Without Trusted Setup
author:Riad S. Wahby and
Ioanna Tzialla and
Abhi Shelat and
Justin Thaler and
Michael Walfish
2018 IEEE Symposium on Security and Privacy
Riad S. Wahby(cid:2)
Doubly-eﬃcient zkSNARKs without trusted setup
Ioanna Tzialla◦
Justin Thaler‡
abhi shelat†
PI:EMAIL
PI:EMAIL
(cid:2)Stanford
PI:EMAIL
◦NYU †Northeastern
PI:EMAIL
‡Georgetown
Michael Walﬁsh◦
PI:EMAIL
Abstract. We present a zero-knowledge argument for NP with
low communication complexity, low concrete cost for both the
prover and the veriﬁer, and no trusted setup, based on standard
cryptographic assumptions. Communication is proportional to
d·log(G) (for d the depth and G the width of the verifying circuit)
plus the square root of the witness size. When applied to batched
or data-parallel statements, the prover’s runtime is linear and the
veriﬁer’s is sub-linear in the verifying circuit size, both with good
constants. In addition, witness-related communication can be
reduced, at the cost of increased veriﬁer runtime, by leveraging
a new commitment scheme for multilinear polynomials, which
may be of independent interest. These properties represent a
new point in the tradeoﬀs among setup, complexity assumptions,
proof size, and computational cost.
We apply the Fiat-Shamir heuristic to this argument to produce
a zero-knowledge succinct non-interactive argument of knowl-
edge (zkSNARK) in the random oracle model, based on the
discrete log assumption, which we call Hyrax. We implement
Hyrax and evaluate it against ﬁve state-of-the-art baseline sys-
tems. Our evaluation shows that, even for modest problem sizes,
Hyrax gives smaller proofs than all but the most computationally
costly baseline, and that its prover and veriﬁer are each faster
than three of the ﬁve baselines.
1
A zero-knowledge proof convinces a veriﬁer of a statement while
revealing nothing but its own validity. Since they were introduced
by Goldwasser, Micali, and Rackoﬀ [50], zero-knowledge (ZK)
proofs have found applications in domains as diverse as authenti-
cation and signature schemes [85, 90], secure encryption [40, 89],
and emerging blockchain technologies [12].
Introduction
A seminal result in the theory of interactive proofs and cryp-
tography is that any problem solvable by an interactive proof
(IP) is also solvable by a computational zero-knowledge proof
or perfect zero-knowledge argument [8]. This means that, given
an interactive proof for any NP-complete problem, one can
construct zero-knowledge proofs or arguments for any NP state-
ment. But existing instantiations of this paradigm have large
overheads: early techniques [22, 48] require many repetitions
to achieve negligible soundness error, and incur polynomial
blowups in prover work and communication. More recent work
[24, 27, 28, 30, 51, 52, 55] avoids those issues, but generally
entails many expensive cryptographic operations.1
Several other recent lines of work have sought to avoid these
overheads. As detailed in Section 2, however, these works still
yield costly protocols or come with signiﬁcant limitations. In
particular, state-of-the-art, general-purpose ZK protocols suﬀer
1Some works avoid these overheads by targeting speciﬁc problems with algebraic
structure and cryptographic signiﬁcance, most notably Schnorr-style proofs [90]
for languages related to statements about discrete logarithms of group elements.
© 2018, Riad S. Wahby. Under license to IEEE.
DOI 10.1109/SP.2018.00060
926
from one or more of the following problems: (a) they require proof
size that is linear or super-linear in the size of the computation
verifying an NP witness; (b) they require the prover or veriﬁer to
perform work that is super-linear in the time to verify a witness;
(c) they require a complex parameter setup to be performed
by a trusted party; (d) they rely on non-standard cryptographic
assumptions; or (e) they have very high concrete overheads.
These issues have limited the use of such general-purpose ZK
proof systems in many contexts.
Our goal in this work is to address the limitations of existing
general-purpose ZK proofs and arguments. Speciﬁcally, we would
like to take any computation for verifying an NP statement and
turn it into a zero-knowledge proof of the statement’s validity. In
addition to concrete eﬃciency, our desiderata are that:
• the proof should be succinct, that is, sub-linear in the size of
the statement and the witness to the statement’s validity;
• the veriﬁer should run in time linear in input plus proof size;
• the prover, given a witness to the statement’s validity, should
run in time linear in the cost of the NP veriﬁcation procedure;
• the scheme should not require a trusted setup phase or common
reference string; and
• soundness and zero-knowledge should each be either statistical
or based on standard cryptographic assumptions. Pragmatically,
security in the random oracle model [7] suﬃces.
Our approach transforms a state-of-the-art interactive proof
for arithmetic circuit (AC) satisﬁability into a zero-knowledge
argument by composing new ideas with existing techniques.
Ben-Or et al. [8] and Cramer and Damgård [37] show how to
transform IPs into computationally ZK proofs or perfectly ZK
arguments, using cryptographic commitment schemes. At a high
level, rather than sending its messages in the clear, the prover
sends cryptographic commitments corresponding to its messages.
These commitments are binding, ensuring that the prover cannot
cheat by equivocating about its messages. They are also hiding,
meaning that the veriﬁer cannot learn the committed value and
thus ensuring zero-knowledge. Finally, the commitment scheme
has a homomorphism property (§3.1) that allows the veriﬁer to
check the prover’s messages “underneath the commitments.”
Accepted wisdom is that such transformations introduce large
overheads (e.g., [33, §1.1]). In this paper, we challenge that
wisdom by constructing a protocol that meets our desiderata for
many cases of interest.
Our starting point is the Giraﬀe interactive proof [104] with
an optimization, adapted from Chiesa et al. [33], that reduces
communication complexity (§3.2). We transform this IP into a
ZK argument through a straightforward (but careful) applica-
tion of Cramer-Damgård techniques (§4). This argument uses
cryptographic operations (required by the commitment schemes)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:29:14 UTC from IEEE Xplore.  Restrictions apply. 
only for the witness and for the prover’s messages, which are
sub-linear in the size of the AC. (In contrast, many recent works
invoke cryptographic primitives for each gate in the verifying
circuit [12, 13, 16, 24, 30, 46, 79]; §2.) But the argument is not
succinct, and it has high concrete costs, especially for the veriﬁer.
We slash these costs with two key reﬁnements. First, we
exploit the IP’s structure by tightly integrating the veriﬁcation
procedure with a multi-commitment scheme and a Schnorr-style
proof [90] (§5); this reduces communication and computational
costs by 3–5× compared to the naive approach. Second, we
devise a new witness commitment scheme (§6), yielding a
succinct argument and asymptotically reducing the veriﬁer’s cost
associated with the witness.
Our protocol is public coin; we compile it into Hyrax, a
zero-knowledge succinct non-interactive argument of knowledge
(zkSNARK) [20] in the random oracle model [7], via the Fiat-
Shamir heuristic [41] (§7). We evaluate Hyrax and ﬁve state-of-
the-art baselines (BCCGP-sqrt [24], Bulletproofs [30], Ligero [1],
ZKB++ [32], and libSTARK [11]; §8). For modest problem sizes,
Hyrax gives smaller proofs than all but the most computationally
costly baseline; its prover and veriﬁer are each faster than three
of the ﬁve baselines; and its reﬁnements yield multiple-orders-
of-magnitude savings in proof size and veriﬁer runtime.
Contributions. We design, implement, and evaluate Hyrax,
a “doubly” (meaning for both prover and veriﬁer) concretely
eﬃcient zkSNARK. For input x, witness w, an AC C of width G
and depth d, and a design parameter ι ≥ 2 that controls a tradeoﬀ
between proof length and veriﬁer time:
• Hyrax’s proofs are succinct, i.e., sub-linear in |C| and |w|: they
require ≈10d log G + |w|1/ι group elements;
• its veriﬁer runs in time sub-linear in |C|, if C has suﬃcient
parallelism:2 O(|x| + d log G + |w|(ι−1)/ι), with good constants;
• its prover runs in time linear in |C|, with good constants, if
C has suﬃcient parallelism (practically, a few tens of paral-
lel instances suﬃces), and it requires only O(d log G + |w|)
cryptographic operations, also with good constants; and
• it requires no trusted setup, and it is secure under the discrete
log assumption in the random oracle model.
We also give a new commitment scheme tailored to multilinear
polynomials (§6), which may be of independent interest. This
scheme allows the prover to commit to a multilinear polynomial
m over F, and later to reveal (a commitment to) m(r) for any r
chosen by the veriﬁer. For ι ≥ 2, if |m| denotes the number of
monomials in m, then the commitment has size O(|m|1/ι), and
the time to verify a purported evaluation is O(|m|(ι−1)/ι).
2 Related work
ZK proofs. Over the past several years there has been signiﬁcant
interest in implementing ZK proof systems. In this section, we
discuss those eﬀorts, focusing on the theoretical underpinnings
and associated cryptographic assumptions; we compare Hyrax
with several of these works empirically in Section 8.
Gennaro et al. [46] present a linear probabilistically checkable
2Even without parallelism, the veriﬁer runs in time sub-linear in |C| if C’s wiring
pattern satisﬁes a technical “regularity” condition [35, 49] (Thm. 1, §3.2).
proof (PCP)3 and ZK transform that form the basis of many
recent zkSNARK implementations [4, 5, 12, 13, 15, 16, 29, 34,
36, 39, 42–44, 64, 76, 79, 105], including systems deployed in ap-
plications like ZCash [12, 107]. These implementations build on
theoretical work by Ishai et al. [59], Groth [53], Lipmaa [69], and
Bitansky et al. [21], as well as implementations and reﬁnements
in the non-ZK context [29, 91–93]. Such zkSNARKs give small,
constant-sized proofs (hundreds of bytes), and veriﬁer runtime
depends only on input size. But ZK systems in this line rely on
non-standard, non-falsiﬁable cryptographic assumptions, require
a trusted setup, and have massive prover overhead: runtime is
quasi-linear in the verifying circuit size, including a few public
key operations per gate, and memory consumption limits the
statement sizes these systems can handle in practice [105].
A line of work by Ben-Sasson et al. builds non-interactive ZK
arguments from short PCPs, following the seminal work of Kil-
ian [62, 63] and Micali [73], the landmark result of Ben-Sasson
and Sudan [17], and recent generalizations of PCPs [9, 14, 87].
The authors reduce the concrete overheads associated with these
approaches [10] and implement zero-knowledge scalable trans-
parent arguments of knowledge (zkSTARKs) [11]. zkSTARKs
need no trusted setup and no public-key cryptography, but their
soundness rests on a non-standard conjecture related to Reed-
Solomon codes [11, Appx. B]. Further, zkSTARKs are heavily
optimized for statements whose verifying circuits are expressed
as a sequence of state-machine transitions; this captures all of NP,
but can introduce signiﬁcant overhead in practice [105]. Both
proof size and veriﬁer runtime are logarithmic in circuit size
(hundreds of kilobytes and tens of milliseconds, respectively, in
practice), and prover runtime is quasi-linear.
Another approach due to Ishai, Kushilevitz, Ostrovsky, and
Sahai [60] (IKOS) transforms a secure multi-party computation
protocol into a ZK argument. Giacomelli et al. reﬁne this ap-
proach and construct ZKBoo [47], a ZK argument system for
Boolean circuits with no trusted setup from collision-resistant
hashes; ZKB++, by Chase et al. [32], reduces proof size by con-
stant factors. Both schemes are concretely inexpensive for small
circuits, but their costs scale linearly with circuit size. Ames et
al. [1] further reﬁne the IKOS transform and apply it to a more
sophisticated secure computation protocol. Their scheme, Ligero,
makes similar security assumptions to ZKBoo but proves an AC
|C|) and prover and veriﬁer
C’s satisﬁability with proof size ˜O(
work quasi-linear in |C| (where ˜O ignores polylog factors).
Bootle et al. [24] give two ZK arguments for AC satisﬁability
from the hardness of discrete logarithms, building on the work
O(√M) and quasi-linear prover and veriﬁer runtime for an AC
of Groth [52] and of Bayer and Groth [6]. The ﬁrst has proof size
with M multiplications. The second reduces this to O(logM) at
the cost of concretely longer prover and veriﬁer runtimes. Bünz et
al. [30] reduce proof size and runtimes in the log scheme by ≈3×.
|C|)
Bootle et al. [25] give a ZK argument with proof size O(
whose veriﬁer uses O(|C|) additions (which are less expensive
than multiplications), but the authors state that the constants are
large and do not recommend implementing as-is.
Most similar to our work, Zhang et al. [108] show how to com-
3The observation that the quadratic span programs of GGPR [46] can be viewed
as linear PCPs is due to Bitansky et al. [21] and Setty et al. [91].
927
(cid:2)
(cid:2)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:29:14 UTC from IEEE Xplore.  Restrictions apply. 
bine an interactive proof [35, 49, 97] and a veriﬁable polynomial
delegation scheme [61, 78] to construct a succinct, non-ZK inter-
active argument. A follow-up work [109] (concurrent with and
independent from ours) achieves ZK using the same commit-and-
prove approach that we use, with several key diﬀerences. First,
their commitment to the witness w has communication O(log |w|),
but has a trusted setup phase and relies on non-standard, non-
falsiﬁable assumptions. In contrast, our commitment protocol
(§6) has no trusted setup and is based on the discrete log as-
sumption, but has communication O(|w|1/ι), ι ≥ 2. Second, their
argument uses an IP that requires more communication than
ours (§3.2). Finally, our method of compiling the IP into a ZK
argument uses additional reﬁnements (§5) that reduce costs. Both
our IP and our reﬁnements apply to their work; we estimate that
they would reduce proof size by ≈3× and V runtime by ≈5×.
Polynomial commitment schemes were introduced by Kate et
al. [61], who gave a construction for univariate polynomials based
on pairing assumptions. Several follow-up works [78, 108–110]
extend this construction to multivariate polynomials; Libert et
al. [65] give a construction based on constant-size assumptions;
and Fujisaki et al. [45] give a construction for polynomial evalua-
tion based on the RSA problem that can be immediately adapted
to polynomial commitment. None of these schemes meet our
desiderata (§1) because of some combination of high cost, trusted
setup, and non-standard assumptions. Bootle et al. [25] and Boo-
tle and Groth [26] describe univariate polynomial commitment
schemes based on the discrete log assumption; our scheme is
closely related to these ideas and extends them to multilinear
polynomials. The second of these also presents a general frame-
work for proving simple relations between commitments and ﬁeld
elements; exploring these ideas in our context is future work.
3 Background
3.1 Deﬁnitions
We use (cid:6)A(za), B(zb)(cid:7)(x) to denote the random variable represent-
ing the (local) output of machine B when interacting with machine
A on common input x, when the random tapes for each machine
are uniformly and independently chosen, and A and B has auxil-
iary inputs za and zb respectively. We use tr(cid:6)A(za), B(zb)(cid:7)(x) to
denote the random variable representing the entire transcript of
the interaction between A and B, and View ((cid:6)A(za), B(zb)(cid:7)(x)) to
denote the distribution of the transcript. The symbol ≈c denotes
that two ensembles are computationally indistinguishable.
Arithmetic circuits
Section 3.2 considers the arithmetic circuit (AC) evaluation
problem. In this problem, one ﬁxes an arithmetic circuit C,
consisting of addition and multiplication gates over a ﬁnite ﬁeld
F. We assume throughout that C is layered, with all gates having
fan-in at most 2 (any arithmetic circuit can be made layered while
increasing the number of gates by a factor of at most the circuit
depth). C has depth d and input x with length |x|. The goal is
to evaluate C on input x. In an interactive proof or argument for
this problem, the prover sends the claimed outputs y of C on
input x, and must prove that y = C(x).
Our end goal in this work is to give eﬃcient protocols for the
arithmetic circuit satisﬁability problem. Let C(·, ·) be a layered
arithmetic circuit of fan-in two. Given an input x and outputs y,
the goal is to determine whether there exists a witness w such
that C(x, w) = y. The corresponding witness relation for this
problem is the natural one: R(x,y) = {w : C(x, w) = y}.
Interactive protocols and zero-knowledge
Deﬁnition 1 (Interactive arguments and proofs). A pair of prob-
abilistic interactive machines (cid:6)P, V(cid:7) is called an interactive
argument system for a language L if there exists a negligible
function η such that the following two conditions hold:
1. Completeness: For every x ∈ L there exists a string w s.t. for
2. Soundness: For every x (cid:2) L, every interactive PPT P∗, and
every z ∈ {0, 1}∗, Pr[(cid:6)P(w), V(z)(cid:7)(x)=1] ≥ 1 − η(|x|).
every w, z ∈ {0, 1}∗, Pr[(cid:6)P∗(w), V(z)(cid:7)(x)=1] ≤ η(|x|).
If soundness holds against computationally unbounded cheating