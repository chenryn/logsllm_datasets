m[nums[i]] =i
another := target - nums[i]
return []int{m[another]，i}
---
## Page 72
代码
后一位还需要额外计算，循环终止条件应该是 p!= nil。
head 不需要单独处理，直接 while 循环即可。另外判断循环终止的条件不用是 p.Next！= nil，这样最
为了处理方法统一，可以先建立一个虚拟头结点，这个虚拟头结点的 Next 指向真正的 head，这样 
极端情况，例如
需要注意的是各种进位问题。
解题思路
2个逆序的链表，要求从低位开始相加，得出结果也逆序输出，返回值是逆序结果链表的头结点。
题目大意
func addTwoNumbers(l1 *ListNode, 12 *ListNode) *ListNode {
package leetcode
 0 {
 current.Next = &ListNode{val: carry % 10, Next: nil}
if 12 != nil {
if l1 != nil {
current = current.Next 
current.Next = &ListNode{val: (x + y + carry) % 10, Next: nil}
 11 = l1.Next
y = 12.val
12 = 12.Next
---
## Page 74
代码
每次移动需要计算当前长度，并判断是否需要更新最大长度，最终最大的值就是题目中的所求。
符，就需要缩小左边界，直到重复的字符移出了左边界，然后继续移动滑动窗口的右边界。以此类推,
滑动窗口的右边界不断的右移，只要没有重复的字符，就持续向右扩大窗口边界。一旦出现了重复字
这一题和第 438 题，第3题，第76 题，第 567题类似，用的思想都是"滑动窗口"。
解题思路
在一个字符串重寻找没有重复字母的最长子串。
题目大意
func lengthofLongestsubstring(s string) int {
//解法一位图 
package leetcode
and not a substring.
Explanation: The answer is "wke", with the length of 3.
Output: 3 
Input: "pwwkew"
return result
var bitset [256]uint8
//扩展ASCII 码的位图表示（BitSet），共有256位
if len(s) == 
for left  nums2[midB]，说明 midA 这条线划分
足，切分线就需要调整。如果 nums1[midA] >1, 0, 0 
func findMedianSortedArrays(nums1 []int, nums2 []int) float64 {
package leetcode
if nums1Mid == 0 {
midLeft, midRight := O, 0
for low  len(nums2) {
// 假设 nums1 的长度小
low, high, k, numslmid, nums2Mid := O, len(nums1)
 midLeft = nums2[nums2Mid-1]
else if nums2Mid == 0 { 
} else{ 
} else if nums1Mid 
if nums1mid > 0 && nums1[nums1Mid-1] > nums2[nums2Mid] { // nums1 中的分界线
nums2Mid = k - nums1mid 
// nums2:
// numsl:
return findMedianSortedArrays(nums2, nums1)
nums1mid = 
break
//分为奇数偶数 2 种情况
//找到合适的划分了，需要输出最终结果了
 low = numslmid + 1
 high = nums1Mid - 1
：low＋（high-low)>>1 // 分界限右侧是 mid，分界线左侧是 mid－ 1 
 nums2[nums2Mid-1] 
 nums1[nums1mid-1] 
_=
山
:len(nums1) & nums1[nums1mid]  1 max { 
temp := width * high 
} else{ 
if height[start]< height[end] {
high := 0 
width := end - start
 max = temp
end--
high = height[end]
start++
high = height[start] 
Value 
1000
100
50
---
## Page 83
罗马数字包含以下七种字符:I，V，X，L，C，D和 M。
题目大意
 Example 5: 
Example 4: 
Example 3:
Example 2:
Example 1: 
1 to 3999.
Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from
as Ix. There are six instances where subtraction is used: 
five we subtract it making four. The same principle applies to the number nine, which is written 
for four is not IrrI. Instead, the number four is written as Iv. Because the one is before the 
Roman numerals are usually written largest to smallest from left to right. However, the numeral 
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.
Input: "MCMXCIV"
Explanation: L = 50, V= 5, III = 3.
Output: 58
6 :4ndano
Output: 1994
Input: "LVIII"
Input: "Ix"
Output: 4
Input: "Iv"
Output:3
Input:"III"
●I can be placed before V (5) and × (10) to make 4 and 9. 
C can be placed before D (500) and M (1000) to make 400 and 900.
X can be placed before L (50) and C (100) to make 40 and 90.