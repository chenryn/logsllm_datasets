nisms only; policy is implemented in user-space. On startup,
the kernel hands control to the initial user-level thread, which
has complete authority, and whose job it is to conﬁgure the
system including implementing any security policy that is to
be enforced by carefully distributing subsets of its authority
to the entities that it sets up.
This means that, when used as a separation kernel, the
initial thread is responsible for creating each of the partitions
and any communication channels between them. The initial
thread is then responsible for destroying itself, and once this
is completed correctly the system is conﬁgured to enforce
separation. It is from this state, after this conﬁguration has
occurred, that our proof of information ﬂow security applies.
Each partition spans both user-space and kernel-space: it
contains not just user memory mapped into the VSpaces of
the threads within the partition, but may also include kernel
objects that those threads have capabilities for. Concretely,
each partition will typically contain a number of thread
objects with associated page directories, page tables and
pages to implement their VSpaces, as well as a number of
CNode objects to implement their CSpaces, and any other
kernel objects used within the partition such as endpoints for
intra-partition messaging and capability transmission. The
partition may also contain Untyped Memory capabilities to
allow new objects to be created and intra-partition subsys-
tems to be destroyed. All kernel services, other than interrupt
delivery (see below), are available to partitions. This allows
partitions to host large and complex applications, not least a
paravirtualised version of Linux to host legacy applications.
As mentioned in Section I, shared memory and asyn-
chronous endpoints allow uni-directional communication
between partitions. These facilities must be set up by the
initial thread when partitions are created, which involves
distributing the necessary capabilities for these facilities to
each partition that is going to use them. This is because
capabilities cannot be transferred between partitions without
breaking authority conﬁnement [51], which is a necessary
condition for our information ﬂow security property.
Figure 1 depicts a small example system with two par-
titions,
that communicate via shared memory and asyn-
chronous endpoints. Partition 2 on the right has read access
to a shared page in Partition 1 on the left, and Partition 1 has
send rights to an asynchronous endpoint in Partition 2. This
allows information to ﬂow only from Partition 1 to Partition
2, in accordance with our information ﬂow theorem.
To implement separation in seL4, we had to extend
its existing priority-based scheduler to implement partition
Two special capability types are used to control the ker-
nel’s interrupt delivery mechanism. An InterruptControl ca-
pability confers the authority to create new InterruptHandler
capabilities for speciﬁc interrupt request (IRQ) numbers,
each of which confers the authority to receive an IRQ.
Interrupts are disabled in kernel mode to avoid in-kernel
concurrency. Low interrupt latencies are ensured by adding
preemption points to certain long-running system calls, such
417
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:53:26 UTC from IEEE Xplore.  Restrictions apply. 
Thread
PD
PT
Thread
CNode
Page
SPage
RW
R
PD
PT
Thread
Partition 1
AsyncSend
AEP
CNode
Recv
Partition 2
Figure 1. A small example system, with two partitions.
scheduling. Here, the scheduler follows a static round-robin
schedule between partitions, with ﬁxed-length time slices per
partition, while doing dynamic priority-based round-robin
scheduling of threads within each partition. This ensures that
the choice of which partition is currently running depends
only on this ﬁxed schedule, while the choice about which
thread is running in the current partition depends only on the
internal state of the current partition. Thus scheduler choices
do not leak information between partitions.
A limitation of the current implementation that we discuss
further in Section V is that partitions can overrun their time-
slices by performing system calls just before a partition
switch would have occurred. This happens because interrupts
are disabled in kernel mode, which prevents a partition
switch from being serviced until after the system call has
been handled or a preemption point has been reached. While
there exist obvious solutions to this problem, deciding on
the most appropriate ﬁx necessarily involves a trade-off
between performance and timing channel bandwidth which
can only be properly decided within the context of a speciﬁc
deployment scenario. For this reason, we have currently left
a general treatment of this limitation as future work. This
channel can trivially be drastically reduced by conﬁguring
seL4 to not permit any intra-partition system calls at all,
as in a traditional separation kernel; a classic “yellow-light”
mechanism, whereby kernel services are denied near the end
of a partition’s timeslice, based on a sound upper bound
for the worst-case execution time of the kernel [12] in this
conﬁguration could fully eliminate this channel.
thread must ensure that
Another limitation mentioned earlier in Section I is that
the initial
the kernel APIs for
interrupt delivery are not exposed to any partition. It does
so trivially by never giving any partition an InterruptControl
or InterruptHandler capability, and never using any such
capabilities that it might possess. As explained earlier, this
forces partitions to interact with devices solely through
memory-mapped IO.
C. Functional Correctness Proof
Our information ﬂow security proof builds upon two
earlier veriﬁcation results for the seL4 microkernel. The ﬁrst
is a proof of functional correctness [27], reported by Klein
et al. in 2009. The second is a proof of integrity enforcement
for seL4 [51], completed by Sewell et al. in 2011.
The functional correctness proof for seL4 is a classical
proof of reﬁnement [1], [15], showing that seL4’s C im-
plementation reﬁnes (or implements) an abstract speciﬁca-
tion of its functional behaviour, which we call simply the
abstract speciﬁcation. Each level is formalised as a state
machine whose transitions include processing an interrupt or
exception, performing a system call, and ordinary user-level
operations like reading and writing user-accessible memory.
For an automaton A and initial observable state s and
sequence of transitions as, let execution A s as denote the set
of observable states that can be reached by A performing as.
Then, an automaton C reﬁnes A, written A (cid:2) C, when C’s
behaviours are a subset of A’s.
A (cid:2) C ≡ ∀ s as. execution C s as ⊆ execution A s as
This proof took around 25 person-years to complete [27].
Much of that effort was devoted to proving invariants, which
the kernel maintains and which are necessary preconditions
in the reﬁnement proof. We make direct use of these
invariants when reasoning about information ﬂow in seL4.
Importantly, the functional correctness proof enabled us
to perform our information ﬂow security proof over the
abstract speciﬁcation, which is far simpler to reason about
than the kernel’s C code. The formulation of information
ﬂow security that we adopt is preserved by reﬁnement [36].
This means that once proved for the abstract speciﬁcation,
we can compose this result with the reﬁnement theorem to
derive information ﬂow control for the kernel’s C code.
By proving information ﬂow security over the abstract
speciﬁcation, we gain a substantial saving in effort (see Sec-
tion V-D) that we estimate is about an order of magnitude.
D. Integrity and Authority Conﬁnement
Sewell et al.’s proof of integrity and authority conﬁnement
for seL4 [51], also over the abstract speciﬁcation, provides
the second foundation for our proof of information ﬂow.
Roughly, the integrity result says that all changes to the sys-
tem state are authorised by the capabilities of the currently
running thread. Authority conﬁnement says that, in suitable
system conﬁgurations, no thread’s authority will increase.
A more formal account of both properties requires 1) an
access control policy that captures the subjects in a system,
and the authorities that each has to each of the others,
2) an abstraction function that partitions kernel objects and
memory locations between subjects in an access control
policy, and, 3) the wellformedness constraints necessary to
ensure that the authority of subjects cannot increase. We will
now describe each element in more detail.
An access control policy is essentially a directed graph
with subject labels on nodes and authority types on edges.
For example, the policy in Figure 2, derived from the system
depicted in Figure 1, shows subjects labelled ‘S1’ and
‘S2’, where S1 has Read and Write authority to itself and
418
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:53:26 UTC from IEEE Xplore.  Restrictions apply. 
Read
Write
S1
Read
AsyncSend
Receive
S2
Figure 2. Example access control policy.
P1
P2
PSched
Figure 3. Example information ﬂow policy.
AsyncSend authority to S2, and S2 has Receive authority
to itself and Read authority to S1; other self-edges are
implicit. The other possible authorities are Grant, SyncSend,
Reset, and Control. SyncSend and AsyncSend represent
the authority to send on synchronous and asynchronous
endpoints respectively. Reset represents the authority to reset
an object
to its original state. Control authority implies
complete control over a target subject; it exists, for instance,
when one subject has a thread capability to another, allowing
it to overwrite the other’s registers.
An abstraction function maps each kernel object and
memory location to a subject label, partitioning all system
resources between access control subjects. Integrity and
authority conﬁnement are formulated over a triple pas that
contains an access control Policy, an Abstraction function,
and the label of the currently active Subject. We often refer
to this triple as simply an access control policy.
Given a speciﬁc pas and a state s, pas-reﬁned pas s states
that pas both conservatively over-approximates the authority
distribution of s and that it meets certain wellformedness
constraints [51]. The wellformedness constraints include
standard requirements like assuming full reﬂexive authority
and the absence of Grant authority between distinct subjects,
which could trivially allow a subject’s authority to exceed
that prescribed by pas.
Given these elements, the proof of authority conﬁnement
shows that for all access control policies pas and states s
that satisfy the invariants of the abstract speciﬁcation, if
pas-reﬁned pas s holds, then for all states s(cid:2) directly reach-
able from s, pas-reﬁned pas s(cid:2) must also hold. In other
words, pas is an upper bound on authority within a system.
The integrity property, on the other hand, is captured by
the predicate integrity pas s s(cid:2) between any pair of states s
and s(cid:2). It shows that any modiﬁcation that the current subject
can perform is permitted by the authority represented in pas,
thus giving a bound on the differences between s and s(cid:2). The
main integrity theorem states that for all states s that satisfy
the invariants, if pas-reﬁned pas s holds, then for all directly
reachable states s(cid:2), integrity pas s s(cid:2) also holds. In terms of
the example of Figure 2, integrity says that whenever the
subject S2 executes, including during system calls it might
make, nothing in subject S1 changes, because S2 has only
Read authority to S1.
Combining the integrity and authority conﬁnement theo-
rems allows the conclusion that integrity is preserved across
all sequences of transitions (for wellformed access control
policies). This is important, because we use integrity to help
prove information ﬂow security for seL4.
IV. INFORMATION FLOW CONTROL FOR SEL4
In this section, we describe how information ﬂow control
was formalised for seL4 and discuss its formal proof.
A. Information Flow Policy
Our formulation of information ﬂow security builds on
the integrity and authority conﬁnement proofs for seL4. We
begin by mapping an access control policy to a correspond-
ing information ﬂow policy, which allows us to re-use the
integrity and authority conﬁnement results to help us prove
information ﬂow security.
Each access control subject Si induces a corresponding
information ﬂow partition Pi. We also include a parti-
tion PSched for the scheduler, as required by our formu-
lation of information ﬂow security [36]. The information
ﬂow policy (cid:2) is computed in two steps as follows.
We ﬁrst compute the extent of each partition Pi that is
not PSched. The extent of Pi is simply the set of all access
control subjects that Pi can directly infer information about.
This includes those that Pi can read directly as well as
those that the kernel reads during a system call and then
reveals to Pi in the results or effects of the system call. This
computation is a function of just the access control policy,
and is governed by a set of simple rules. For instance, subject
Si is necessarily in the extent of partition Pi; if subject Si
has Read authority to a subject Sj then Sj is in the extent
of partition Pi etc. Referring to Figure 2, the extent of the
partition P1 induced by subject S1 is simply the subject S1;
the extent of the partition P2 induced by subject S2 is both
subjects S1 and S2 because S2 has Read authority to S1.
the
information ﬂow policy (cid:2) is computed using the following
two rules. Here Pi and Pj are non-PSched partitions.
1) Pi (cid:2) Pj if the access control policy allows Si to affect
2) PSched (cid:2) Pi for all Pi, and PSched (cid:2) PSched.
The calculation of whether Si is allowed to affect some
subject Sk according to the access control policy is derived
from the integrity theorem: Si can affect Sk according to
policy pas whose current subject is Si, when there exist states
Having computed the extent of each partition Pi,
any subject in Pj’s extent.
419
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:53:26 UTC from IEEE Xplore.  Restrictions apply. 