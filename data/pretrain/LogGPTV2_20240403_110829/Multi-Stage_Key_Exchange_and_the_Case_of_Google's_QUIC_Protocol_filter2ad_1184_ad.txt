non-negligible advantage in GMulti-Stage,D
When simulating GKEi;Π for A, algorithm B forwards most KE-related queries to its game GMulti-Stage,D
while answering queries to the GΠ subgame on its own, using the stage-i keys received from GMulti-Stage,D
.
To this extent, B keeps a list with all stage-i session keys in use, denoted as a mapping SKEY : LABELS → D,
in order to simulate the Π instances using these keys. Additionally, B keeps a counter c, initialized as
c = 0, indicating the number of session keys replaced by random values so far. Queries related to KE
issued by A are handled by B as follows:
KEi;Π and Gλ
KE,B
KE,B
KE,B
.
• NewSession, NewTempKey, Reveal, and Corrupt queries are forwarded to GMulti-Stage,D
and the re-
sponses sent back to A. Note that, as KE is stage-j-forward-secret for j ≤ i, session keys in stage
i are established in a forward-secret manner and thus Corrupt queries do not aﬀect the security of
spawned Π instances at that stage. Moreover, as KE is key-independent, Reveal(label, i(cid:48)) queries
allowed for stages i(cid:48) (cid:54)= i in the composed game at no time aﬀect the state of session keys in stage i.
KE,B
14
KE,B
• Send(label, m) queries are forwarded to GMulti-Stage,D
as well and the responses sent back to A.
KE,B
changes to state acceptedi, the following steps are taken.
Additionally, if GMulti-Stage,D
First, B checks whether label is partnered with some other label label(cid:48). This is eﬃciently computable
In case label is partnered, SKEY(label) is set to
as KE allows for an eﬃcient session matching.
SKEY(label(cid:48)) and A provided with an identiﬁer for SKEY(label) in GΠ. Here, the Match security
of KE ensures that whenever two partnered sessions accept, the established keys are identical with
overwhelming probability.
If label is not partnered, B increases the counter value c by 1 and provides A with an identiﬁer for
SKEY(label) in GΠ, where this value is computed depending on the counter c:
– If c  λ, then issue a Reveal(label, i) query and store the resulting value in SKEY(label).
KE,B
Note that B checks for partnered sessions in stage i and thus never tests revealed keys (and vice versa).
In this way, it obeys condition 2 of GMulti-Stage,D
Eventually, A terminates. Algorithm B then terminates as well and outputs 1 if A has won in the
composed game (i.e., in the GΠ subgame that B simulates on its own) and 0 otherwise. That way, if the
Test query made by B returns the real session key, B perfectly simulates Gλ−1
KEi;Π for A, whereas, if a random
key is returned, B perfectly simulates Gλ
, B thus outputs
KEi;Π,A while, if btest = 1, B outputs the right bit with probability
KEi;Π. In the case that btest = 0 in GMulti-Stage,D
the wrong bit with probability Adv
in Deﬁnition 2.2.
Gλ−1
KEi;Π,A. Therefore, we can conclude that the advantage of B in winning the game GMulti-Stage,D
KEi;Π
KE,B
KE,B
Adv
Gλ
KEi;Π
is
(cid:3)
AdvMulti-Stage,D
KE,B
≥
Gλ−1
KEi;Π,A − Adv
KEi;Π
Gλ
KEi;Π
KEi;Π,A
(cid:12)(cid:12)(cid:12)(cid:12)Adv
(cid:12)(cid:12)(cid:12)(cid:12) .
It remains to show how an adversary in the hybrid game Gns
KEi;Π, where all session keys in the GΠ sub-
game are replaced by random ones, can be reduced to an adversary in security game GΠ of the symmetric-
key protocol.
Lemma 3.3 Let KE be a multi-stage key exchange protocol with stage i being ﬁnal. Let Π be a secure
symmetric-key protocol w.r.t. some game GΠ with a key generation algorithm that outputs keys with dis-
tribution D. Let ns be the maximum number of sessions in GKEi;Π. Then for any eﬃcient adversary A we
have
Adv
Gns
KEi;Π
KEi;Π,A ≤ AdvGΠ
Π,C
for some eﬃcient algorithm C.
Proof (Lemma 3.3). We let algorithm C simulate the entire composed game Gns
KEi;Π for A, computing the
outputs of the key exchange subgame on its own while forwarding any Π-related query to its game GΠ.
This is possible, as the keys established in the key exchange stage i are ﬁnal (i.e., unused in KE), hence
independent of the protocol part, and thus C is indeed able to provide a perfect simulation for A. In the
end, if A wins in the simulated game, C will have won in its game GΠ as well, establishing the desired
equation.
Formally, C only has to handle Send queries to the key exchange game in a special way. Although all
session keys used in the protocol stage are uniformly distributed, C needs to distinguish two cases when a
session key is accepted in the key exchange:
15
• If the accepting session is partnered, C instructs GΠ to register the same key as for the partnered
session and returns the according key identiﬁer to A.
• Otherwise, C simply queries GΠ for an identiﬁer of a new (randomly distributed) key chosen by GΠ,
which it relays to A.
All other queries are handled by C in an unmodiﬁed way, either by simulating them on its own (in the case
of key exchange queries) or by forwarding them to GΠ (in the case of protocol queries).
As GΠ samples keys randomly and C ensures consistency in the cases of partnered sessions, its simulation
KEi;Π for A is perfect. Since C forwards all protocol queries of A unaltered to GΠ, if A succeeds in the
(cid:3)
of Gns
composed game, C wins in GΠ.
Remark. Note that, although our composition result from Theorem 3.1 focuses on composition with a
single symmetric-key protocol at some (forward-secret) stage i, it readily extends to concurrent composition
with one (or several) such protocols at multiple forward-secret, ﬁnal stages. The reason for this is that
in the composition game GKEi;Π, the adversary is allowed to issue Reveal queries for all stages except i,
i.e., the game captures arbitrary compromises of session keys at other stages and therefore using a speciﬁc
symmetric-key protocol cannot endanger the stated compositional security.
Composition with unilateral authentication. As aforementioned, unilateral authentication in the
key exchange phase prevents our composition theorem to hold unconditionally. The reason for this is that,
when we are gradually replacing real by random keys in our proof, we depend on issuing Test queries for
those keys. However, a Test query is prohibited for responder sessions without partners in the case of
(responder-authenticated) unilateral authentication, as such queries would trivially rule out security in a
scenario where the adversary can impersonate the unauthenticated communication partner.
Since multi-stage key exchange protocols with unilateral authentication do not provide protection
against such attacks, our composition cannot consequently provide any protection either in these cases.
However, if one restricts the composition in such a way that sessions of the symmetric-key protocol cannot
be spawned in the trivial attack scenario (i.e., if the accepting session in stage i has role = responder, but
is not partnered with a genuine initiator), then Theorem 3.1 is easily adaptable to such a composition.
Particularly, in Lemma 3.2, the problematic Test queries are not needed anymore as the reduction does
not have to simulate a protocol session in these cases. Therefore, our composition result extends to this
case straightforwardly.
Barriers for generic composition results. Except for the mutual authentication requirement (which
can be relaxed to unilateral authentication as illustrated above), our composition theorem also relies on the
multi-stage key exchange protocol being both key-independent and stage-j-forward-secret. We were unable
to weaken these requirements and it seems to us hard to show general compositional security properties
without these properties, as we brieﬂy discuss in the following.
• Non-forward-secret stages: In our hybrid argument in the proof of Theorem 3.1, we depend on the
forward secrecy of stage i at which instances of the protocol Π are spawned. More precisely, this
property ensures, that Corrupt queries of adversary A do not aﬀect our simulation of Π instances
that have already been spawned, thus allowing us to gradually key these protocols with a random
instead of the real key.
If, in contrast, stage i would not be forward-secret, a Corrupt query would allow A to compute all
established session keys, including the one in stage i. Therefore, A could potentially immediately
check whether the respective Π session really uses the correct session key and abort, when it detects
that we replaced the key with a random one in our hybrid game, rendering our simulation invalid.
16
Client C
server’s static public key pkS , [nonceS ]
generate ephemeral keys eskC, epkC
generate nonceC
D1 = DH(eskC, pkS )
PRK1 = KDFext(D1, nonceC, [nonceS ])
K1 = KDFexp(PRK1, info1)
D2 = DH(eskC, tpkS )
PRK2 = KDFext(D2, nonceC, [nonceS ])
K2 = KDFexp(PRK2, info2)
nonceC, [nonceS ], auxC, epkC
{auxS , tpkS}K1
Server S
server’s static secret key skS
D1 = DH(epkC, skS )
PRK1 = KDFext(D1, nonceC, [nonceS ])
K1 = KDFexp(PRK1, info1)
use temporary keys tskS , tpkS
D2 = DH(epkC, tskS )
PRK2 = KDFext(D2, nonceC, [nonceS ])
K2 = KDFexp(PRK2, info2)
Figure 3: Expanded description of protocol run of Google’s QUIC with 0-RTT handshake.
• Key dependence: In the proof of our composition theorem, key independence of the multi-stage key
exchange guarantees that Reveal queries for session keys Ki(cid:48) of stages i(cid:48) (cid:54)= i do not aﬀect the session
keys in stage i, that we are gradually replacing by random ones.
Indeed, if the key exchange would be key-dependent, revealing a session key of stage i(cid:48) < i before the
key of stage i(cid:48) + 1 is established would lead to all keys in this session getting revealed, including the
to-be-replaced key Ki. Thus, when B replaces the real Ki by a randomly chosen one, A is potentially
able to determine this and abort, rendering our simulation invalid.
(cid:54)= i in
Note that, moreover, we cannot get rid of Reveal queries for session keys Ki(cid:48) of stages i(cid:48)
our simulation without sacriﬁcing concurrent composition of the multi-stage key exchange protocol
with several symmetric-key protocols at multiple stages. We can either implicitly obtain concurrent
composition by allowing A to arbitrarily compromise session keys of stages i(cid:48)
(cid:54)= i (which is what
we do) or explicitly simulate the composed symmetric-key protocol on each stage ourself. In the
latter case, though, in order to be able to correctly simulate the protocol for some stage, we would
need to reveal the according session key ourself, i.e., issue exactly those Reveal queries that required
key-independence in the ﬁrst place.
4 Security Analysis of Google’s QUIC Protocol
In this section we analyze the QUIC protocol from a cryptographic point of view. Before, we give a more
detailed description of QUIC and describe how protocol steps are reﬂected in our modeling of the protocol.
4.1 A QUIC Tour
Let us recall the typical protocol run of the QUIC handshake shown in Figure 1 and in an expanded form
in Figure 3. Recall that in the core protocol the client ﬁrst sends an ephemeral Diﬃe–Hellman (DH) key
from which the ﬁrst session key K1 is derived with the static DH key of the server, before the key K2 of
the second stage is derived when the server sends a temporary DH key over the K1-secured channel. The
key K2 is then computed as the DH key of the two ephemeral keys.
Channels. Note that the key K1 may be used to transmit payload data before it is used to establish K2.
In fact, the K1-protected channel may still be used after the server has sent its share for K2. The reason
is the unreliable transmission via UDP, i.e., the ephemeral key may be delivered later than expected or
17
even get lost. The actual channel protocol is not speciﬁed in [Ros13, LC13], only references to possible
authenticated encryption algorithms are given, supporting the usefulness of our composition theorem. We
also remark that it turns out that for the security of the key exchange protocol we only need authenticity
of the server’s hello message, not conﬁdentiality.
Certiﬁcation. The main protocol is surrounded by some means to ensure that the server’s static key
pair is available and certiﬁed. Binding of keys to server identities is ensured by certiﬁcation of public keys,
potentially including revocation mechanisms. For the sake of simplicity, and in compliance with various
similar eﬀorts, we leave this part out of the security proof.9 Hence, we presume that valid binding of static
keys is ensured as a part of the security game in the sense that the assignment of public keys to parties is
known by default.
If the client is currently not in possession of the server’s public key it may start the interaction with
an “inchoate” client hello. Upon receiving such a message, the server forwards its public conﬁguration,
possibly including the certiﬁcate and further information. We omit this part of the key retrieval in our
modeling of the protocol, since we assume known binding of public keys to servers anyway.
Format of handshake messages. To prevent replay attacks, QUIC employs the common countermea-
sure and uses nonces. However, because of the restriction of zero round-trip time, one cannot expect the
server to contribute to the nonce, and must rely on the user to generate good nonces. To sustain security,
QUIC assumes that the server uses a so-called “strike-register” in which previously seen nonces are stored.
Several severs within a so-called “orbit” are supposed to share such a register. A nonce is thus assumed
to consist of a time stamp, an orbit identiﬁer, and 20 random bytes; the designers of QUIC estimate that
32 bytes should be suﬃcient.
If a connection with a client-generated nonce fails, because the server ﬁnds an entry in the strike
register, then the server rejects, but provides a server-generated nonce, encrypted and authenticated under
some private server key. If the server then recognizes such a server nonce in a subsequent, fresh 0-RTT