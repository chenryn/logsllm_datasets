Boolean network tomography is to invert this Boolean linear
system to solve for w given R and c. Intuitively, node fail-
ures are identiﬁable if and only if (1) has a unique solution.
2.2 Deﬁnitions
Let a failure set F be a set of non-monitors (F ⊆ N ) that
may fail simultaneously. The challenge in failure localization
is that the solution to (1) is usually not unique, i.e., there
are multiple possible failure sets leading to the observed path
states. To reduce ambiguity, we limit the solution space to a
predetermined collection Ψ of likely failure sets and only seek
to ensure uniqueness within this collection. Let PF denote
the set of all measurement paths aﬀected by a failure set F
(i.e., traversing at least one node in F ). We now formally de-
ﬁne the notion of identiﬁability in node failure localization.
Definition 1. Given a network G, a set of measurement
paths P , and a collection Ψ of likely failure sets in G:
1. Two failure sets F1 and F2 in Ψ can be distinguished
from each other if and only if PF1 6= PF2 , i.e., ∃ a path
that traverses one and only one of F1 and F2.
2. In Ψ, failure set F is identiﬁable if and only if F can
be distinguished from every other failure set in Ψ.
3. Ψ is identiﬁable if and only if every failure set in Ψ is
1We use the terms network and graph interchangeably.
identiﬁable.
197It is clear from the deﬁnition that whether a failure set
is identiﬁable or not depends on the collection of potential
failure sets it is compared against. Furthermore, Ψ being
identiﬁable means that we can always uniquely localize node
failures as long as the set of failed nodes falls into Ψ. Since
a failure set may contain more than one node, we deﬁne
the following notions to characterize network capability in
localizing simultaneous node failures.
Definition 2. Given a network G and a set of measure-
ment paths P in G:
1. We say G is k-identiﬁable (0 ≤ k ≤ σ) if the collection
Ψ of all subsets of N with cardinality bounded by k is
identiﬁable, i.e., any failure of up to k nodes can be
uniquely localized.
2. The maximum identiﬁability of G, denoted by Ω(G), is
the maximum value of k such that G is k-identiﬁable.
The maximum identiﬁability of a network characterizes
its capability to localize failures in the worst case. That is,
no matter where the failures occur, as long as the number of
failed nodes is bounded by Ω, we can uniquely localize the
failures from observed path states. Note that it is possible to
uniquely localize a larger number of failures when they occur
at a particular set of nodes, but localization cannot be guar-
anteed if the failures occur elsewhere. Both k-identiﬁability
and maximum identiﬁability are deﬁned with respect to a
given P , which will be clear from the context.
2.3 Classiﬁcation of Probing Mechanisms
Given the topology G and the monitor locations M , the
probing mechanism plays a crucial role in failure localization
by determining the set of measurement paths P . Depending
on the ﬂexibility of probing and the cost of deployment, we
consider three families of probing mechanisms:
1. Controllable Arbitrary-path Probing (CAP): P includes
any path/cycle, allowing repeated nodes/links, as long
as each path/cycle starts and ends at monitors.
2. Controllable Simple-path Probing (CSP): P includes
any simple path between distinct monitors, not includ-
ing repeated nodes.
3. Uncontrollable Probing (UP): P is the set of paths
between monitors determined by the routing protocol
used by the network, not controllable by the monitors.
In particular, although CAP allows probes to traverse each
node/link an arbitrary number of times, it suﬃces for probes
to traverse each link at most once in either direction for the
sake of localizing node failures.
These probing mechanisms clearly provide decreasing ﬂex-
ibility to the monitors and therefore decreasing capability to
localize failures. Further, they also oﬀer decreasing deploy-
ment cost. At the IP layer, CAP is feasible only if (strict)
source routing (an IP option) [17] is enabled at all non-
monitors, which allows them to modify the source and the
destination addresses in packet headers hop by hop to probe
a path prescribed by the monitor initiating the measurement
probe2. If implemented at the application layer (e.g., to lo-
calize failures in overlay networks), CAP requires equivalent
“source routing” to be supported by the application. Simi-
larly, CSP is feasible under source routing (or equivalent ca-
pability at the application layer). It is also feasible under an
2The probe can follow the reverse path to return to the
original monitor, thus eﬀectively probing any path with at
least one end at a monitor.
v1
m2
m1
v3
m3
v2
v4
Figure 1: Sample network with three monitors: m1,
m2, and m3.
emerging networking paradigm called software-deﬁned net-
working (SDN) [18], where monitors can instruct the SDN
controller to set up arbitrary cycle-free paths for the prob-
ing traﬃc. Note that the cycle-free constraint is crucial in
SDN, as data forwarding is performed in a distributed man-
ner by switches according to forwarding tables conﬁgured
by the controller during route setup, which will encounter
forwarding loops if the path has cycles. In contrast, UP only
requires basic data forwarding and is generally feasible.
In this paper, we quantify how the ﬂexibility of probing
schemes aﬀects the network’s capability in failure localiza-
tion. Although concrete results are only provided for the
above families of probing mechanisms, our framework and
our abstract identiﬁability conditions (see Section 3) can
also be used to evaluate the failure localization capability of
other probing mechanisms.
2.4 Objective
Given a network topology G, a set of monitors M , and a
probing mechanism (CAP, CSP, or UP), we seek to answer
the following closely-related questions: (i) Given a bound
k on the number of simultaneous failures, can we uniquely
localize up to k failed nodes from observed path states? (ii)
What is the maximum number of simultaneous failures we
can localize? Clearly, answers to these questions require
algorithms that can eﬃciently test for k-identiﬁability and
determine the maximum identiﬁability.
2.5 Illustrative Example
Consider the sample network in Fig. 1 with three moni-
tors (m1–m3) and four non-monitors (v1–v4). Clearly, the
monitors’ capability to identify failures of the non-monitors
depends on the probing mechanism, i.e., which paths are
measurable between the monitors. In this example, we will
examine this capability and how it can be improved by re-
laxing constraints on measurement paths. Under UP, sup-
pose that the default routing protocol only allows the mon-
itors to probe the following paths: P1 = m1v2v1m2, P2 =
m1v2v4m3, and P3 = m2v3m3, which form a measurement
matrix RUP:
P1 = m1v2v1m2
P2 = m1v2v4m3
⇛ R
UP
=
P3 = m2v3m3
W1 W2 W3 W4
0
1
0
1
0
0
1
1
0
0
0
1
!
,
(2)
where RUP
ij = 1 if and only if node vj is on path Pi. Then we
have RUP⊙w = c, where c is the binary vector of path states
observed at the destination monitors. Based on Deﬁnition 1,
we can verify that any single node failure is identiﬁable, as
for every two non-monitors, there is a measurement path
traversing one and only one of them. However, these three
paths cannot identify simultaneous failures of two nodes.
This is because if node v2 fails, then we cannot determine if
v1 (or v4) fails or not. Identiﬁability can be improved if more
measurement paths are allowed. For example, under CSP,
198besides the three paths in (2), we can probe three additional
paths: P4 = m1v2v3m2, P5 = m1v1m2, and P6 = m2v4m3,
yielding an expanded measurement matrix in (3):
does not “contain” any other column3 [20]. In our problem,
the existence of a disjunct testing matrix translates into a
suﬃcient identiﬁability condition as follows.
P1 = m1v2v1m2
P2 = m1v2v4m3
P3 = m2v3m3
P4 = m1v2v3m2
P5 = m1v1m2
P6 = m2v4m3
⇛ R
CSP =
W1 W2 W3 W4
1
0
0
0
1
0
1
1
0
1
0
0
0
0
1
1
0
0
0
1
0
0
0
1
UP
) R
(3)
Using the six paths in (3), we can identify up to three
failed nodes, a notable improvement over UP. However, if
v1, v3, and v4 all fail, then there is no measurement path
under CSP that can be used to determine the state of v2.
Nevertheless, if CAP is supported, then we can send probes
along a cycle P7 = m1v2m1. In conjunction with the paths
in (3), this yields the measurement matrix in (4):
P5 = m1v1m2
P7 = m1v2m1
P3 = m2v3m3
P6 = m2v4m3
⇛ R
CAP =
W1 W2 W3 W4
0
0
0
1
1
0
0
0
0
1
0
0
0
0
1
0
(4)
Since the paths in (4) can independently determine the
state of each non-monitor, CAP achieves full identiﬁability
for the network in Fig. 1.
This example shows that in addition to the network topol-
ogy and the monitor placement, the probing mechanism also
signiﬁcantly aﬀects a network’s capability to localize failures.
In the rest of the paper, we will study this relationship both
theoretically and algorithmically.
3. ABSTRACT IDENTIFIABILITY
CONDI-TIONS
The deﬁnitions of identiﬁability in Deﬁnitions 1 and 2 are
based on the enumeration of all possible failure scenarios
and does not directly allow eﬃcient testing and characteri-
zation of identiﬁability. To address this issue, we need more
explicit identiﬁability conditions that can support eﬃcient
algorithm design. In this section, we will establish abstract
suﬃcient/necessary conditions for k-identiﬁability under an
arbitrary probing mechanism, which will later be developed
into more concrete conditions for speciﬁc families of probing
mechanisms.
Our suﬃcient condition is inspired by a result known in
a related ﬁeld called combinatorial group testing [19].
In
short, group testing aims to ﬁnd abnormal elements in a
given set by running tests on subsets of elements, each test
indicating whether any element in the subset is abnormal.
This is analogous to our problem where abnormal elements
are failed nodes and tests are conducted by probing mea-
surement paths. A subtle but critical diﬀerence is that in
our problem, the subsets of elements that can be tested to-
gether are limited by the set of measurement paths P , which
are in turn limited by the topology, probing mechanism, and
placement of monitors.
Most existing solutions for (nonadaptive) group testing
aim at constructing a disjunct testing matrix. Speciﬁcally,
a testing matrix R is a binary matrix, where Ri,j = 1 if
and only if element j is included in the i-th test. Then R
is called k-disjunct if the Boolean sum of any k columns
Lemma 3
(Abstract sufficient condition). Any set
of up to k failed nodes is identiﬁable if for any non-monitor
v and failure set F with |F | ≤ k (v 6∈ F ), there is a mea-
surement path going through v but no node in F .
Proof. Consider two distinct failure sets F and F ′, each
containing no more than k nodes. There exists a node v in
only one of these sets; suppose v ∈ F ′ \ F . By the condi-
tion in the lemma, ∃ a path p traversing v but not F , thus
distinguishing F from F ′.
Our necessary condition is based on the simple observation
that to identify k failures, we must be able to identify the
remaining k − s (1 ≤ s ≤ k − 1) failures after identifying
and removing s of the failed nodes from the network, which
leads to the following necessary condition.
Lemma 4
(Abstract necessary condition). Any set
of up to k failed nodes is identiﬁable only if for any set V ′ of
non-monitors with |V ′| < k, any set of up to k − |V ′| node
failures is identiﬁable in G − V ′.
Proof. Suppose that ∃ two non-empty sets V ′ and V ′′
of non-monitors, with V ′ ∩ V ′′ = ∅ and |V ′| + |V ′′| = k,
such that V ′′ is not identiﬁable in G − V ′. Then the union
F = V ′ ∪ V ′′ must be unidentiﬁable in G, as even if we have
identiﬁed failures in V ′, we still cannot identify the rest of
the failures.
Although neither of the above conditions directly lead to
eﬃcient testing algorithms, the signiﬁcance of these condi-
tions is that they are valid without relying on the probing
mechanism being used. Moreover, we will show in the next
section that these conditions provide theoretical foundations
for eﬃcient testing under speciﬁc families of probing mecha-
nisms (CAP, CSP, and UP). Eﬃcient testing for other fami-
lies of probing mechanisms can also be explored using these
abstract conditions.
4. VERIFIABLE IDENTIFIABILITY
CON-DITIONS
In this section, we develop the abstract conditions in Sec-
tion 3 into concrete conditions suitable for eﬃcient testing
for the three families of probing mechanisms in Section 2.3.
4.1 Conditions under CAP
Under CAP, we can essentially “ping” any node from a
monitor along any path. In the face of failures, this implies
that a monitor’s ability to determine the state of a node
depends on its connectivity to the monitors after removing
nodes that are known/hypothesized to have failed. This
observation allows us to translate the abstract conditions
in Section 3 into more concrete identiﬁability conditions as
follows.
Theorem 5
(k-identifiability under CAP). Network
G is k-identiﬁable under CAP:
a) if for any set V ′ of up to k non-monitors, each con-
nected component in G − V ′ contains a monitor;
3That is, for any subset of k column indices S and any other
column index j /∈ S, there exists a row index i such that
Ri,j = 1 and Ri,j ′ = 0 for all j′ ∈ S.
199N\N(M)
N(M)
M
N\N(M)
N(M)
N\N(M)
N(M)
m1
…
mi
…
μm
v1
v2
v3
v4