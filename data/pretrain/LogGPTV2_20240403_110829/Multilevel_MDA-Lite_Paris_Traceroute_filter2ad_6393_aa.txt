title:Multilevel MDA-Lite Paris Traceroute
author:Kevin Vermeulen and
Stephen D. Strowes and
Olivier Fourmaux and
Timur Friedman
Multilevel MDA-Lite Paris Traceroute
Kevin Vermeulen
Sorbonne Université
Olivier Fourmaux
Sorbonne Université
Stephen D. Strowes
RIPE NCC
Timur Friedman
Sorbonne Université
8
1
0
2
p
e
S
6
2
]
I
N
.
s
c
[
1
v
0
7
0
0
1
.
9
0
8
1
:
v
i
X
r
a
ABSTRACT
Since its introduction in 2006-2007, Paris Traceroute and its Multi-
path Detection Algorithm (MDA) have been used to conduct well
over a billion IP level multipath route traces from platforms such as
M-Lab. Unfortunately, the MDA requires a large number of packets
in order to trace an entire topology of load balanced paths between
a source and a destination, which makes it undesirable for plat-
forms that otherwise deploy Paris Traceroute, such as RIPE Atlas.
In this paper we present a major update to the Paris Traceroute tool.
Our contributions are: (1) MDA-Lite, an alternative to the MDA
that significantly cuts overhead while maintaining a low failure
probability; (2) Fakeroute, a simulator that enables validation of
a multipath route tracing tool’s adherence to its claimed failure
probability bounds; (3) multilevel multipath route tracing, with, for
the first time, a Traceroute tool that provides a router-level view of
multipath routes; and (4) surveys at both the IP and router levels
of multipath routing in the Internet, showing, among other things,
that load balancing topologies have increased in size well beyond
what has been previously reported as recently as 2016. The data
and the software underlying these results are publicly available.
CCS CONCEPTS
• Networks → Network measurement; Network monitoring;
Topology analysis and generation;
KEYWORDS
Active Internet Measurements; Traceroute, Alias Resolution
ACM Reference Format:
Kevin Vermeulen, Stephen D. Strowes, Olivier Fourmaux, and Timur Fried-
man. 2018. Multilevel MDA-Lite Paris Traceroute. In 2018 Internet Measure-
ment Conference (IMC ’18), October 31-November 2, 2018, Boston, MA, USA.
ACM, New York, NY, USA, 14 pages. https://doi.org/10.1145/3278532.3278536
1 INTRODUCTION
Since its introduction by Van Jacobson in 1988 [31], Traceroute has
become ubiquitous on both end-systems and routers for tracing
forward paths through the Internet between source and destination
at the IP level. Network operators use it for troubleshooting; the
network measurement community uses it in its studies; and vast
numbers of route traces are executed daily by long term Internet
survey infrastructure such as Ark [1], M-Lab [9, 25], and RIPE
Atlas [11, 40]. Two updates were proposed to Traceroute in 2006-
2007 to take into account the ever-increasing presence of load
balancing routers: the Paris technique [15, 48], for tracing a single
clean path through load balancers, and the Multipath Detection
Algorithm (MDA) [17, 47], for discovering all of the load balanced
paths at the IP level between source and destination. Well over a
billion route traces using the MDA have been executed by Ark and
M-Lab [23] in the intervening years, and the Paris technique is used
for route tracing on the over 10,000 RIPE Atlas probes.
A disincentive to deploying the MDA is the network overhead
that it requires. By way of example, suppose a given hop in a
route being traced is evenly load balanced across two interfaces.
If the MDA were to match the overhead of a typical command
line Traceroute tool and send just three probes per hop, the first
probe will find one interface and the subsequent two probes will
together have a 25% probability of missing the other interface. In
order to bring the probability of failing to discover both interfaces
under 1%, a total of eight probes would need to be sent to that hop.
Even for a single load balanced hop, we must more than double the
workload. To have a high degree of confidence in full discovery of
full load balanced topologies requires hundreds or even thousands
of packets. Our work is motivated by the aim of minimising this
overhead.
This paper makes four contributions that advance the state of the
art for multipath route tracing in the IPv4 Internet. First is MDA-Lite
(Sec. 2), a lower overhead alternative to the MDA that is tailored
to the most common load balanced topologies that we encounter
in the Internet. We identify a characteristic that we call “diamond
uniformity” that often holds and that can permit significant probe
savings. Second is Fakeroute (Sec. 3), which validates, to a high
degree of confidence, that a software tool’s implementation of its
multipath route detection algorithm performs as intended on a
variety of simulated test topologies. Third is Multilevel MDA-Lite
Paris Traceroute (Sec. 4), which, for the first time, integrates router-
level view of multipath routes, into a Traceroute tool. Until now this
has only been done by other tools once route tracing is complete.
Fourth, we provide new survey results (Sec. 5) for multipath routing
in the Internet, both at the IP level, and at the router level. We
report load balancing practices on a scale (up to 96 interfaces at a
single hop) never before described.
Both our code and our survey results are publicly available at
https://gitlab.planet-lab.eu/cartography/.
Publication rights licensed to ACM. ACM acknowledges that this contribution was
authored or co-authored by an employee, contractor or affiliate of a national govern-
ment. As such, the Government retains a nonexclusive, royalty-free right to publish or
reproduce this article, or to allow others to do so, for Government purposes only.
IMC ’18, October 31-November 2, 2018, Boston, MA, USA
© 2018 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-5619-0/18/10...$15.00
https://doi.org/10.1145/3278532.3278536
Preprint. To appear in Proc. ACM Internet Measurement Conference 2018
2 MDA-LITE
The idea behind the MDA-Lite is that we can take advantage of
prior knowledge of what a route trace is likely to encounter in order
to probe more efficiently. Experience tells us, and our survey in
Sec. 5.1 confirms, that some multipath route patterns are frequently
encountered in the Internet, whereas others are not. The MDA-Lite
algorithm operates on the assumption that a topological feature
that we call “uniformity” will be prevalent and that another feature
that we call “meshing” will be uncommon. It includes tests to detect
deviations from these assumptions. We detail these two topological
features in Sec. 2.2.
2.1 The MDA and possible probe savings
This section recalls how the MDA works, stepping us through
examples of the discovery of what are called “diamonds”, as shown
in Fig. 1. We see how a feature of the algorithm that we dub “node
control” requires large numbers of probes to be sent.
The MDA has evolved through 2006 and 2007 poster and work-
shop versions [16, 18] to its present form in an Infocom 2009
paper [47]. This latter publication describes an idealized formal
model for multipath route discovery [47, Sec. II.A], based upon a
set of assumptions about the Internet, and explains the adaptations
made [47, Sec. III.A], in crafting the MDA, to accommodate some
divergences assumptions and reality. These assumptions are: “(1)
No routing changes during the discovery process. [...] (2) There is
no per-packet load balancing. (As a result, we can manipulate a
probe packet’s flow identifier to cause it to pass through a chosen
node.) (3) Load balancing is uniform-at-random across successor
nodes. (4) All probes receive a response. (5) The effect of sending
one probe packet has no bearing on the result of any subsequent
probe. In particular, load balancers act independently.”
The MDA works on the basis of an open set of vertices [47,
Sec. II.A], each of which has been discovered but has not yet had its
successor vertices identified. A discovery round consists in choosing
a vertex v from the open set and trying to find all of its successors.
Where there is no load balancing, v has just one successor, but
if v is the responding interface of a load balancing router, there
will be two or more possible successors that can only be identified
by stochastic probing. In the case that concerns us, per-flow load
balancing, successors are found by varying the flow identifier from
one probe packet to the next. An extension [17, Sec. 3.2], that we do
not employ here, would allow us to measure per-destination load
balancing, the effects of which are identical to routing insofar as a
single destination is concerned.
The number of probe packets the MDA sends to discover all
successors of a vertex v is governed by a set of predetermined
stopping points, designated nk. If k successors to v have been
discovered then the MDA keeps sending probes until either the
number of probes equals nk or an additional successor has been
discovered. In the latter case, the new stopping point becomes nk +1.
Eventually, one of the stopping points will be reached. The stopping
points are set in such a way as to guarantee that the probability of
failing to discover all of the successors of a given vertex is bounded.
Combined with the assumption of a maximum number of branching
points, this implies a bound on the failure to discover an entire
topology. The MDA takes as a tunable parameter this global failure
probability bound and works backwards to calculate the failure
bound on discovering all the successors to a given vertex, which in
turn determines the values nk.
Diamond: As defined by Augustin et al. [19], a diamond is “a
subgraph delimited by a divergence point followed, two or more
hops later, by a convergence point, with the requirement that all
flows from source to destination flow through both points”. Fig. 1
provides examples of the MDA successfully discovering the full
topologies of two similar diamonds: each one has a divergence point
at hop 1, followed by four vertices at hop 2, two vertices at hop 3,
and a convergence point at hop 4. Each vertex represents an IP
interface, which is to say that these are IP level graphs, not router-
level graphs. The full diamonds are shown at steps 4 and 4′ in the
figure. We call the one at step 4 an “unmeshed” diamond and the
one at step 4′ “meshed”, the difference relating to the links between
hops 2 and 3. Sec. 2.2 provides a formal definition of meshing. Since
discovery is identical for hops 1 and 2, we show the first two steps
for the unmeshed diamond and do not repeat them for the meshed
one. A vertex at hop 2 of the unmeshed diamond is highlighted and
two hypothetical successors are shown in order to illustrate “node
control”, a concept described below.
Hop 1: The MDA sends a probe that discovers the single vertex
at hop 1. It continues by sending additional probes to that hop, each
with a different flow ID, until it reaches the stopping point of n1
probes, at which point it rules out the existence of a second vertex
at that hop. The annotation shows a total of n1 probes having been
sent to hop 1.
Hop 2: The MDA sends a probe that discovers a vertex at hop 2.
As with hop 1, it sends additional probes, each with a different
flow ID, but in this example it discovers a second vertex on or
before having sent n1 probes. Thus the limit becomes n2. Third and
fourth vertices are discovered before n2 and n3, respectively, are
met. When n4 is reached, no fifth vertex has been found and so the
MDA stops scanning this hop.
Node control: When a hop has more than one vertex, the MDA
works on the hypothesis that each of these vertices is a potential
divergence point with successors that are perhaps reachable only
via that vertex. It therefore employs what we dub here node control,