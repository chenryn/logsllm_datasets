COR are distinct. Thus, we have a collapse to two distinct notions
in the case of this policy.
6. UNWINDING
Unwinding is a useful technique for security proofs, which re-
duces the veriﬁcation of security to checking the existence of bi-
nary relations on states. In deterministic systems, unwinding is a
sound and complete technique for the proof of NI, and the exis-
tence of a weak form of unwinding relations is a sound technique
for IP-security and TA-security [8, 21, 24]. We deﬁne a generaliza-
tion of this method that is sound for our deﬁnitions of security in
nondeterministic systems.
equivalence relations on S. For X ⊆ U deﬁne ∼X =(cid:84)
Deﬁnition 12. Let M = (S, s0, A,−→, obs, dom) be a machine
for a security policy (U,(cid:55)→); let S = (∼u)u∈U be a family of
u∈X ∼u.
We say that S is a generalized weak unwinding on M with re-
spect to (cid:55)→ (or GWU) if the following conditions are met for all
s, s(cid:48), t ∈ S, u ∈ U, nonempty X ⊆ U, and a ∈ A:
s ∼u t ⇒ obsu(s) = obsu(t)
s a−→ t ⇒ s ∼dom(a)(cid:54)
(cid:48) ⇒ ∃t
(cid:55)→ t
t a−→ t
(cid:48)(cid:16)
OC
LR
(cid:48)(cid:17)
(cid:48) ∧ s
(cid:48) ∼X t
s ∼X t ∧ s ∼dom(a) t ∧ s a−→ s
GWSC
Condition OC (for “output consistency”) implies that coalition X
can distinguish states that some member can tell apart based on
its observation. Condition LR (for “local respect”) implies that
actions that are not allowed to interfere with anyone in the coali-
tion cannot change a state to another state that is distinguishable
to the coalition. According to GWSC (“generalized weak step
consistency”), if two states s and t can be distinguished neither by
876P-PCnTA
PCnTA
GWU
P-nTA
nTA
P-RCnTA
RCnTA
where N is a set, n : A × S → P(N ) and r : A × S × N → S,
such that the following properties hold:
∀s ∈ S, a ∈ A, c ∈ n(a, s)
s a−→ r(a, s, c)
(cid:16)
(cid:17)
CR1
(cid:16)
(cid:17)
Figure 9: Implications between notions deﬁned in this paper.
∀s, t ∈ S, a ∈ A
s a−→ t ⇒ ∃c ∈ n(a, s) (t = r(a, s, c))
coalition X nor by the domain of action a, then each state reach-
able from s by performing a is indistinguishable to X from some
state reachable via a from t. This condition is the main point of dif-
ference with the notion of weak unwinding from [21]: it adds to the
condition WSC the universal quantiﬁcation over X (which is just
a single domain u in WSC) and the existential quantiﬁcation over
t(cid:48) (this corresponds to the nondeterminism of the system, whereas
WSC is designed for deterministic systems.)
THEOREM 1. If there is a GWU on M w.r.t. (cid:55)→, then M is PC-
nTA and RCnTA w.r.t. (cid:55)→.
We may note that the deﬁnition of GWU is insensitive to the initial
state of the machine. Thus, if the existence of a GWU is sound
evidence for X-security, then it is also sound evidence for P-X-
security. Thus, we also have the following.
Corollary 1. If there is a GWU on M w.r.t. (cid:55)→, then M is both
P-PCnTA-secure and P-RCnTA-secure w.r.t. (cid:55)→.
Thus, by the corollary above and our previous results, the existence
of a GWU implies every single one of the security notions deﬁned
in this paper.
Fig. 9 summarizes the relationships we have found to hold be-
tween the various security deﬁnitions discussed above.
7. ACCESS CONTROL SYSTEMS
In the preceding sections, we developed deﬁnitions of security,
and showed that the notion of generalized weak unwinding pro-
vides a sound proof technique for showing that these deﬁnitions
hold in a system. Neither the deﬁnitions nor this proof technique
provide much concrete guidance for the engineer seeking to con-
struct a secure system, however. A result by Rushby [21] (and
reﬁned in [24]) shows that, in deterministic systems, intransitive
noninterference is guaranteed to hold in a system built from a col-
lection of objects subject to an access control discipline that satis-
ﬁes a simple static check that is essentially Bell and La Padula’s [2]
information ﬂow condition. In the present section, we show that it
is possible to generalize this result to nondeterministic systems.
We ﬁrst recall the notion of a machine with structured state [21].
This is a machine M (with states S) together with (we rename
some of the components) a set Obj of objects, a set V of values,
and functions contents : S × Obj → V , with contents(s, n)
interpreted as the value of object n in state s, observe, alter :
U → P(Obj), with observe(u) and alter(u) interpreted as the
set of objects that domain u can observe and alter, respectively.
For brevity, we write s(x) for contents(s, x). We call the pair
(observe, alter) the access control table of the machine.
Rushby introduced reference monitor conditions on such ma-
chines in order to capture formally the intuitions associated with
the pair (observe, alter) being an access control table that re-
stricts the ability of the actions to “read” and “write” the objects
Obj. In order to formulate a generalization of these conditions in
nondeterministic systems, we ﬁrst need to introduce some further
structure that constrains the nondeterminism in the system.
Deﬁne a choose-resolve characterization of nondeterminism in
a machine M with states S and actions A to be a tuple (N, n, r),
CR2
Intuitively, N represents the set of all possible nondeterministic
choices that can be made in the process of executing an action, n
restricts those choices as a function of the particular state and ac-
tion being executed, and r deterministically resolves the transition,
as a function of the state, action and nondeterministic choice made
in that context. Condition CR1 says that the resolution of every
possible nondeterministic choice, allowed in the context of a given
state and action, is in fact a state to which a transition is possible.
Conversely, CR2 says that every transition can be obtained by re-
solving some allowed nondeterministic choice.
Trivially, every nondeterministic machine has a choose-resolve
characterization of nondeterminism. (For, we can simply take N =
S, and deﬁne n(a, s) as { t| s a−→ t}, and r(a, s, t) = t, and CR1
and CR2 are then satisﬁed.) The following restrictions on the struc-
ture of the characterization make this notion more interesting.
Suppose the machine M has structured state, with objects Obj
and access control table (observe, alter). Write Val(x) for the
set of all possible values of x ∈ Obj. Say that the choose-resolve
characterization of nondeterminism (N, n, r) has local choices if
for each x ∈ Obj there exists a set Nx and a function nx : A ×
Val(x) → P(Nx) such that N = Πx∈ObjNx, and n(a, s) is the
set of c ∈ N such that for all x ∈ Obj, we have cx ∈ nx(a, s(x)).
That is, a choice of nondeterminism on performing action a in state
s is obtained by independently making a choice of nondetermin-
ism at each of the objects x ∈ Obj. Say that a machine has local
nondeterminism if it is a machine with structured state that has a
choose-resolve characterization with local choices.
u t to hold if s(x) =
t(x) for all x ∈ observe(u).
Intuitively, s ∼oc
u t says that u
could not distinguish s from t if all it knew were the content of
objects that it is permitted to observe. Similarly, for choices c, c(cid:48) ∈
Πx∈ObjNx, and u ∈ U we write c ∼oc
x for all x ∈
observe(u). The following conditions generalize the reference
monitor conditions to machines with local nondeterminism.
For states s, t and u ∈ U deﬁne s ∼oc
u c(cid:48) if cx = c(cid:48)
u t ⇒ obsu(s) = obsu(t)
s ∼oc
 c ∈ n(a, s) ∧ c(cid:48) ∈ n(a, t) ∧
s ∼oc
s(x) = t(x) ∧ cx = c(cid:48)
dom(a) t ∧ c ∼oc
dom(a) c(cid:48) ∧
x
 ⇒ r(a, s, c)(x) = r(a, t, c
LC-RM1
(cid:48)
)(x)
s a−→ t ∧ x (cid:54)∈ alter(dom(a)) ⇒ t(x) = s(x)
LC-RM2
LC-RM3
Intuitively, LC-RM1 says that the observations of domain u de-
pend only on the values of objects u is permitted to observe. Con-
dition LC-RM2 says that the value of object x after performing
action a depends only on the previous values of objects observable
to dom(a), nondeterministic choices made locally at those objects,
the previous value of x, and the nondeterministic choice made at
x. Condition LC-RM3 says that, for an action a, if dom(a) is not
permitted to alter the value of object x, then the value of x is in fact
unaffected when a is performed.
We also have a condition that relates the policy to the access
control structure, essentially that identiﬁed by Bell and La Padula
[2].
alter(u) ∩ observe(v) (cid:54)= ∅ ⇒ u (cid:55)→ v
AOI
877Intuitively, if there is an object x that can be altered by u and ob-
served by v, then x provides a channel through which information
can ﬂow from u to v. Thus, for the system to be secure, this ﬂow
must be permitted by the policy. The following result shows that
access control provides a design discipline that sufﬁces to enforce
our deﬁnitions of security.
THEOREM 2. If M is a machine with local nondeterminism
satisfying LC-RM1-LC-RM3 and AOI w.r.t. (cid:55)→ then there exists
a GWU on M w.r.t. (cid:55)→.
It follows that such a machine M satisﬁes all the security prop-
erties identiﬁed in this paper. The following example illustrates the
two theorems.
Example 8. Consider a system comprised of three domains, for
a sender S, a receiver R, communicating through an unreliable chan-
nel B. We have four objects Obj = {xS, xI, xO, xR}, representing
the state of the sender memory, buffer input queue, buffer output
queue, and receiver memory, respectively. That the channel is mod-
eled by two queues is motivated by the desire to separate the access
rights to the head of the queue from those for the tail. The function-
ality of the channel is thus limited to the transportation within the
buffer, shipping messages from the input queue to the output queue.
Letting Msg be a set of messages, we may suppose that Val(xS) =
Val(xR) = Msg, so that the memory of the sender or receiver
∗,
consists of a single message, and Val(xI) = Val(xO) = Msg
so that the states of the buffer queues are sequences of messages.
A state of the system as a whole may be represented as a tuple
(mS, w, v, mR) ∈ Msg × Msg
∗ × Msg. We suppose that the
sender has actions set(m) (setting its memory to message m) and
put (enqueue the current memory value to the buffer input queue),
the buffer has an action trans (dequeue a message from the input
queue and enqueue that message on the output queue), and the re-
ceiver has an action get (dequeue a message from the buffer output
queue and store it in the receiver’s memory).
∗ × Msg
We suppose that only the channel is unreliable. It may drop mes-
sages in transit from the head (modelled as xI) to the tail (xO). To
that end, we take NxO = {ok, drop} consisting of two choices
representing normal performance of the transmission action and
dropping off the associated message. This is the only nondeter-
mism we need, so we set NxI = NxS = NxR = {0}. Further-
more, we make all the nx(a, s) = {0} except for nxO(trans, s) =
{ok, drop}. The only interesting case of the resolve function is
r(trans, (mS, w · m, v, mR), (0, 0, f, 0)), which is deﬁned as the
value (mS, w, m · v, mR) if f = ok, and as (mS, w, v, mR) if
f = drop.
We deﬁne observations of the domains by obsS((mS, w, v, mR)) =
mS, obsB((mS, w, v, mR)) = (w, v), and obsR((mS, w, v, mR)) =
(v, mR). (We omit the discussion of minor issues such as no effects
will take place if R performs get in case the output queue is empty.)
Let the access control structure for the system be given by the
following table
xS
observe alter
xS, xI
xI, xO
xO, xR
xI, xO
xO, xR
S
B
R
R), from which it follows that obsR((mS, w, v, mR)) = (v, mR)
which is derived from the descriptions of the actions. Then we
have (mS, w, v, mR) ∼oc
R) just when (v, mR) =
(v(cid:48), m(cid:48)
= (v(cid:48), m(cid:48)
R) = obsR((m(cid:48)
R)), conﬁrming part of LC-
RM1. The reader may verify that the remainder of LC-RM1 holds
in this system, as do conditions LC-RM2 and LC-RM3. It is clear
(m(cid:48)
S, w(cid:48), v(cid:48), m(cid:48)
S, w(cid:48), v(cid:48), m(cid:48)
R
from the access control structure that the system also satisﬁes con-
dition AOI for the policy (cid:55)→ deﬁned by S (cid:55)→ B ↔ R.
P-PCnTA-secure w.r.t. (cid:55)→.
Thus, by Theorems 2 and 1 the system is P-RCnTA-secure and
We now give a sketch of how our results might apply to the ex-
ample of the introduction (Figure 1).
Example 9. Within each machine Mi, access control (monitored,
e.g., by a security kernel and by hardware access control features)
can be used to enforce the local portion of the policy. At this lower,
access control level, the system might contain objects chanu,v rep-
resenting communication channels for each of the pairs (u, v) in
{(Li, Hi), (Hi, Ei), (Ei, NIi), (Li, NIi), (NIi, N)}.
The details of the channels might be reliable or resemble the
lossy buffer of Example 8. (For example, one expects that E1 and