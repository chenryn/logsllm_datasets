metadata:
 name: proxy-chk
spec:
 containers:
 - name: centos
 image: centos
 command: ["/bin/sh", "-c", "while : ;do curl -L http://${GOOGLE_PROXY_SERVICE_HOST}:80/; sleep 10; done"]
// create the pod
# kubectl create -f 3-2-3_proxy-chk.yaml
pod "proxy-chk" created  
```
让我们从 Pod 中查看`stdout`:
```
// get logs from proxy-chk
# kubectl logs proxy-chk
% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                     Dload  Upload   Total   Spent    Left  Speed
100   219  100   219    0     0   2596      0 --:--:-- --:--:-- --:--:--  2607
100   258  100   258    0     0   1931      0 --:--:-- --:--:-- --:--:--  1931
 ...  
```
万岁！我们现在可以确认代理工作。服务的流量将被路由到我们指定的端点。如果不起作用，请确保将适当的入站规则添加到外部资源网络中。
端点不支持 DNS 作为源。或者，我们可以使用 ExternalName，它也没有选择器。它需要 kube-dns 版本> = 1.7。
In some use cases, users need neither load balancing nor proxy functionalities for the service. In that case, we can set `CluterIP = "None"` as so-called headless services. For more information, please refer to [https://kubernetes.io/docs/concepts/services-networking/service/#headless-services](https://kubernetes.io/docs/concepts/services-networking/service/#headless-services).
# 卷
容器是短暂的，它的磁盘也是。我们要么使用`docker commit [CONTAINER]`命令，要么将数据卷装入一个容器中([第 2 章](02.html#1CQAE0-6c8359cae3d4492eb9973d94ec3e4f1e)，*将数据卷装入容器*)。在 Kubernetes 的世界中，卷管理变得至关重要，因为 pods 可以在任何节点上运行。此外，确保同一容器中的容器可以共享相同的文件变得非常困难。这是 Kubernetes 的一个大话题。[第 4 章](04.html#3279U0-6c8359cae3d4492eb9973d94ec3e4f1e)、*使用存储和资源*介绍卷管理。
# 机密
Secret，就像它的名字一样，是一个以键值格式存储机密的对象，用于向 pods 提供敏感信息，可以是密码、访问密钥或令牌。机密没有落到磁盘上；相反，它存储在每个节点的`tmpfs`文件系统中。模式下的 Kubelet 将创建一个`tmpfs`文件系统来存储机密。出于存储管理方面的考虑，Secret 并不旨在存储大量数据。一个机密的当前大小限制是 1MB。
我们可以通过启动 kubectl 来创建一个机密命令，或者通过 spec，基于文件、目录或指定的文字值来创建一个机密。有三种类型的机密格式:通用(或不透明，如果编码的话)、docker 注册表和 TLS。
通用/不透明是我们将在应用中使用的文本。Docker 注册表用于存储私有 docker 注册表的凭据。TLS 机密用于存储用于群集管理的 CA 证书捆绑包。
The docker-registry type of secret is also called **imagePullSecrets**, which is used to pass the password of a private docker registry via kubelet when pulling the image. This comes in handy so that we don't need to do `docker login` for each provisioned node. The command is `kubectl create secret docker-registry` `` `--docker-server``= --docker-username=` `-``-docker-password= --docker-email=`
我们将从一个通用类型的示例开始，展示它是如何工作的:
```
// create a secret by command line
# kubectl create secret generic mypassword --from-file=./mypassword.txt
secret "mypassword" created  
```
The options for creating secrets based on directory and literal value are pretty similar with the file ones. If specifying a directory after `--from-file`, the files in the directory will be iterated, the file name will be the secret key if its a legal secret name, and other non-regular files will be ignored subdirectories, symlinks, devices, pipes. On the other hand, `--from-literal==` is the option if you want to specify plain text directly from the command, for example, `--from-literal=username=root`.
这里，我们从文件`mypassword.txt`中创建一个机密名称`mypassword`。默认情况下，机密的密钥是文件名，相当于`--from-file=mypassword=./mypassword.txt`选项。我们也可以追加多个`--from-file`。使用`kubectl get secret` `` `-o yaml`命令可以检查出机密的详细信息:
```
// get the detailed info of the secret
# kubectl get secret mypassword -o yaml
apiVersion: v1
data:
 mypassword: bXlwYXNzd29yZA==
kind: Secret
metadata:
 creationTimestamp: 2017-06-13T08:09:35Z
 name: mypassword
 namespace: default
 resourceVersion: "256749"
 selfLink: /api/v1/namespaces/default/secrets/mypassword
 uid: a33576b0-500f-11e7-9c45-080027cafd37
type: Opaque  
```
我们可以看到机密的类型变成`Opaque`，因为文本已经被 kubectl 加密了。它是 base64 编码的。我们可以使用一个简单的 bash 命令来解码它:
```
# echo "bXlwYXNzd29yZA==" | base64 --decode
mypassword  
```
PODS 有两种方法可以找回机密。第一种是通过文件，第二种是通过环境变量。第一种方法是按卷实现的。语法是在容器规格中添加`containers.volumeMounts`，并添加一个带有机密配置的卷部分。
**通过文件检索机密**
让我们先来看看如何从 pod 内的文件中读取机密:
```
// example for how a Pod retrieve secret 
# cat 3-2-3_pod_vol_secret.yaml 
apiVersion: v1 
kind: Pod 
metadata: 
  name: secret-access 
spec: 
  containers: 
  - name: centos 
    image: centos 
    command: ["/bin/sh", "-c", "cat /secret/password-example; done"] 
    volumeMounts: 
      - name: secret-vol 
        mountPath: /secret 
        readOnly: true 
  volumes: 
    - name: secret-vol 
      secret: 
        secretName: mypassword 
        # items are optional 
        items: 
        - key: mypassword  
          path: password-example 
// create the pod 
# kubectl create -f 3-2-3_pod_vol_secret.yaml 
pod "secret-access" created 
```
机密文件将安装在`//`中，而不指定 Pod 中的`items` `key`和`path`或`//`。这种情况下在`/secret/password-example`下面。如果我们描述这个 Pod ，我们可以发现在这个 Pod 中有两个挂载点。第一个是存储我们的机密的只读卷，第二个存储与 API 服务器通信的凭证，由 Kubernetes 创建和管理。我们将在[第 5 章](05.html#3O56S0-6c8359cae3d4492eb9973d94ec3e4f1e)、*网络和安全*中了解更多信息:
```
# kubectl describe pod secret-access
...
Mounts:
 /secret from secret-vol (ro)
 /var/run/secrets/kubernetes.io/serviceaccount from default-token-jd1dq (ro)
...  
```
我们可以使用`kubectl delete secret` ``命令删除一个机密。
描述完 Pod 后，我们可以发现一个`FailedMount`事件，因为体积不再存在:
```
# kubectl describe pod secret-access
...
FailedMount  MountVolume.SetUp failed for volume "kubernetes.io/secret/28889b1d-5015-11e7-9c45-080027cafd37-secret-vol" (spec.Name: "secret-vol") pod "28889b1d-5015-11e7-9c45-080027cafd37" (UID: "28889b1d-5015-11e7-9c45-080027cafd37") with: secrets "mypassword" not found
...  
```
同样的想法，如果 PODS 是在机密创建之前生成的，PODS 也会遇到失败。
我们现在将学习如何通过命令行创建一个机密。接下来，我们将简要介绍它的规格格式:
```
// secret example # cat 3-2-3_secret.yaml 
apiVersion: v1 
kind: Secret 
metadata:  
  name: mypassword 
type: Opaque 
data:  
  mypassword: bXlwYXNzd29yZA==
```
由于规范是纯文本，我们需要自己`echo -n ` `| base64`对机密进行编码。请注意这里的类型变成了`Opaque`。接下来的工作应该和我们通过命令行创建的一样。
**通过环境变量检索机密**
或者，我们可以使用环境变量来检索 secret，这对于短凭据(如密码)来说更灵活。这样，应用能够使用环境变量来检索数据库密码，而无需处理文件和卷:
Secret should always be created before the pods that need it. Otherwise the pods won't get launched successfully.
```
// example to use environment variable to retrieve the secret
# cat 3-2-3_pod_ev_secret.yaml
apiVersion: v1
kind: Pod
metadata:
 name: secret-access-ev
spec:
 containers:
 - name: centos
 image: centos
 command: ["/bin/sh", "-c", "while : ;do echo $MY_PASSWORD; sleep 10; done"]
 env:
 - name: MY_PASSWORD
 valueFrom:
 secretKeyRef:
 name: mypassword
 key: mypassword
// create the pod 
# kubectl create -f 3-2-3_pod_ev_secret.yaml
pod "secret-access-ev" created 
```
申报在`spec.containers[].env[]`下。我们需要机密名称和密钥名称。这种情况下两者都是`mypassword`。该示例应该与通过文件检索的示例相同。
# ConfigMap(配置地图)
配置映射是一种能够将您的配置留在 Docker 映像之外的方法。它将配置数据作为键值对注入 pods。它的属性类似于 secret，更具体地说，secret 用于存储敏感数据，如密码，ConfigMap 用于存储不敏感的配置数据。
与机密相同，配置映射可以基于文件、目录或指定的文字值。使用类似的带有机密的语法/命令，ConfigMap 使用`kubectl create configmap`代替:
```
// create configmap
# kubectl create configmap example --from-file=config/app.properties --from-file=config/database.properties
configmap "example" created  
```
由于两个`config`文件位于同一个文件夹名称`config`中，我们可以传递一个`config`文件夹，而不是逐个指定文件。在这种情况下，创建的等效命令是`kubectl create configmap example --from-file=config`。
如果我们描述配置映射，它将显示当前信息:
```
// check out detailed information for configmap
# kubectl describe configmap example
Name:    example
Namespace:  default
Labels:    
Annotations:  
Data
====
app.properties:
----
name=DevOps-with-Kubernetes
port=4420
database.properties:
----
endpoint=k8s.us-east-1.rds.amazonaws.com
port=1521  
```
我们可以使用`kubectl edit configmap` ``在创建后更新配置。
We also could use `literal` as the input. The equivalent commands for the preceding example will be `kubectl create configmap example --from-literal=app.properties.name=name=DevOps-with-Kubernetes` which is not always so practical when we have many configurations in an app.
让我们看看如何在 PODS 里利用它。在 pod 中使用 ConfigMap 也有两种方法:通过卷或环境变量。
# 通过卷使用配置映射
类似于机密部分前面的例子，我们用语法`configmap`挂载一个卷，并在容器模板中添加`volumeMounts`。`centos`中的命令将循环至`cat ${MOUNTPOINT}/$CONFIG_FILENAME`:
```
cat 3-2-3_pod_vol_configmap.yaml
apiVersion: v1
kind: Pod
metadata:
 name: configmap-vol
spec:
 containers:
 - name: configmap
 image: centos
 command: ["/bin/sh", "-c", "while : ;do cat /src/app/config/database.properties; sleep 10; done"]
 volumeMounts:
 - name: config-volume
 mountPath: /src/app/config
 volumes:
 - name: config-volume
 configMap:
 name: example
// create configmap
# kubectl create -f 3-2-3_pod_vol_configmap.yaml
pod "configmap-vol" created
// check out the logs
# kubectl logs -f configmap-vol
endpoint=k8s.us-east-1.rds.amazonaws.com
port=1521  
```
然后，我们可以使用这种方法将我们的非敏感配置注入到 pod 中。
# 通过环境变量使用配置映射
要在窗格中使用配置映射，您必须在`env`部分使用`configMapKeyRef`作为值源。它会将整个配置映射对填充到环境变量中:
```
# cat 3-2-3_pod_ev_configmap.yaml
apiVersion: v1
kind: Pod
metadata:
 name: config-ev
spec:
 containers:
 - name: centos
 image: centos
 command: ["/bin/sh", "-c", "while : ;do echo $DATABASE_ENDPOINT; sleep 10;    
   done"]
 env:
 - name: MY_PASSWORD
 valueFrom:
 secretKeyRef:
 name: mypassword
 key: mypassword
// create configmap
# kubectl create -f 3-2-3_pod_ev_configmap.yaml
pod "configmap-ev" created
// check out the logs
# kubectl logs configmap-ev
endpoint=k8s.us-east-1.rds.amazonaws.com port=1521  
```
Kubernetes 系统本身也利用 ConfigMap 进行一些身份验证。例如，kube-dns 使用它来放置客户端 CA 文件。在描述配置图时，可以通过添加`--namespace=kube-system`来检查系统配置图。
# 多容器编排
在本节中，我们将重新讨论我们的票务服务:作为前端的 kiosk web 服务，提供获取/放置门票的界面。有一个 Redis 作为缓存，管理我们有多少票。Redis 还充当发布者/订阅者通道。一旦门票售出，kiosk 将向其中发布活动。订阅者被称为记录者，它会写一个时间戳并将其记录到 MySQL 数据库中。详细的 Dockerfile 和 Docker compose 实现请参考[第 2 章](02.html#1CQAE0-6c8359cae3d4492eb9973d94ec3e4f1e)、*中的最后一节。我们将使用`Deployment`、`Service`、`Secret`、`Volume`和`ConfigMap`对象在 Kubernetes 中实现这个例子。源代码可以在[https://github . com/devo PS-wit-Kubernetes/examples/tree/master/chapter 3/3-3 _ kiosk](https://github.com/DevOps-with-Kubernetes/examples/tree/master/chapter3/3-3_kiosk)找到。*
![](img/00045.jpeg)
An example of kiosk in Kubernetes world
我们需要四种 PODS。部署是管理/部署 Pod 的最佳选择。它将通过其部署策略功能减少我们将来进行部署时的痛苦。由于 kiosk、Redis 和 MySQL 将被其他组件访问，我们将把服务与它们的 pods 相关联。MySQL 充当一个数据存储，为了简单起见，我们将在其中装入一个本地卷。请注意，Kubernetes 提供了很多选择。请查看[第 4 章](04.html#3279U0-6c8359cae3d4492eb9973d94ec3e4f1e)、*使用存储和资源*中的详细信息和示例。敏感信息，如我们的 MySQL 根目录和用户密码，我们希望它们存储在机密中。其他不敏感的配置，如数据库名称或数据库用户名，我们将留给配置映射。
我们将首先推出 MySQL，因为记录器依赖于它。在创建 MySQL 之前，我们必须先创建相应的`secret`和`ConfigMap`。要创建`secret`，我们需要生成 base64 加密数据: