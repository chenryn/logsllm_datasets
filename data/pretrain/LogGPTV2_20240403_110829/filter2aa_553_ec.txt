List movies;
movies代表的确切数据应该是接口层次不可见的实现细节。
例如，程序启动后应把头指针初始化为NULL。但是，不要使用下面这
样的代码：
movies = NULL;
为什么？因为稍后你会发现List类型的结构实现更好，所以应这样初始
化：
movies.next = NULL;
movies.size = 0;
使用List的人都不用担心这些细节，只要能使用下面的代码就行：
InitializeList(movies);
使用该类型的程序员只需知道用InitializeList()函数来初始化链表，不必
了解List类型变量的实现细节。这是数据隐藏的一个示例，数据隐藏是一种
从编程的更高层次隐藏数据表示细节的艺术。
为了指导用户使用，可以在函数原型前面提供以下注释：
/* 操作：初始化一个链表      */
/* 前提条件：plist指向一个链表*/
/* 后置条件：该链表初始化为空    */
void InitializeList(List * plist);
1325
这里要注意3点。第1，注释中的“前提条件”（precondition）是调用该函
数前应具备的条件。例如，需要一个待初始化的链表。第2，注释中的“后置
条件”（postcondition）是执行完该函数后的情况。第3，该函数的参数是一
个指向链表的指针，而不是一个链表。所以应该这样调用该函数：
InitializeList(&movies);
由于按值传递参数，所以该函数只能通过指向该变量的指针才能更改主
调程序传入的变量。这里，由于语言的限制使得接口和抽象描述略有区别。
C 语言把所有类型和函数的信息集合成一个软件包的方法是：把类型定
义和函数原型（包括前提条件和后置条件注释）放在一个头文件中。该文件
应该提供程序员使用该类型所需的所有信息。程序清单 17.3给出了一个简单
链表类型的头文件。该程序定义了一个特定的结构作为Item类型，然后根据
Item定义了Node，再根据Node定义了List。然后，把表示链表操作的函数设
计为接受Item类型和List类型的参数。如果函数要修改一个参数，那么该参
数的类型应是指向相应类型的指针，而不是该类型。在头文件中，把组成函
数名的每个单词的首字母大写，以这种方式表明这些函数是接口包的一部
分。另外，该文件使用第16章介绍的#ifndef指令，防止多次包含一个文件。
如果编译器不支持C99的bool类型，可以用下面的代码：
enum bool {false, true}; /* 把bool定义为类型，false和true是该类型的值 */
替换下面的头文件：
#include  /* C99特性 */
程序清单17.3 list.h接口头文件
/* list.h -- 简单链表类型的头文件 */
#ifndef LIST_H_
#define LIST_H_
1326
#include  /* C99特性      */
/* 特定程序的声明 */
#define TSIZE   45 /* 储存电影名的数组大小  */
struct film
{
char title[TSIZE];
int rating;
};
/* 一般类型定义 */
typedef struct film Item;
typedef struct node
{
Item item;
struct node * next;
} Node;
typedef Node * List;
/* 函数原型 */
/* 
操作：   初始化一个链
表                       */
1327
/* 
前提条件：  
plist指向一个链
表                     */
/* 
后置条件：  
链表初始化为
空                       */
void InitializeList(List * plist);
/* 
操作：   确定链表是否为空定义，plist指向一个已初始化的链
表        */
/* 
后置条件：  
如果链表为空，该函数返回true；否则返回
false         */
bool ListIsEmpty(const List *plist);
/* 
操作：   确定链表是否已满，plist指向一个已初始化的链
表         */
/* 
后置条件：  
如果链表已满，该函数返回真；否则返回
假             */
bool ListIsFull(const List *plist);
/* 
操作：   确定链表中的项数, 
plist指向一个已初始化的链
表         */
/* 
后置条件：  
该函数返回链表中的项
数                   */
unsigned int ListItemCount(const List *plist);
/* 
操作：   在链表的末尾添加
项                     */
1328
/* 前提条件：  item是一个待添加至链表的项, plist指向一个已初始化
的链表    */
/* 
后置条件：  
如果可以，该函数在链表末尾添加一个项，且返回
true；否则返回false */
bool AddItem(Item item, List * plist);
/* 
操作：   把函数作用于链表中的每一
项                  */
/*      plist指向一个已初始化的链
表                 */
/*      pfun指向一个函数，该函数接受一个Item类型的参数，
且无返回值   */
/* 
后置条件：  
pfun指向的函数作用于链表中的每一项一
次            */
void Traverse(const List *plist, void(*pfun)(Item item));
/* 
操作：   释放已分配的内存（如果有的
话）                */
/*      plist指向一个已初始化的链
表                 */
/* 
后置条件：  
释放了为链表分配的所有内存，链表设置为
空            */
void EmptyTheList(List * plist);
#endif
1329
只有InitializeList()、AddItem()和EmptyTheList()函数要修改链表，因此从
技术角度看，这些函数需要一个指针参数。然而，如果某些函数接受 List 类
型的变量作为参数，而其他函数却接受 List类型的地址作为参数，用户会很
困惑。因此，为了减轻用户的负担，所有的函数均使用指针参数。
头文件中的一个函数原型比其他原型复杂：
/* 
操作：   把函数作用于链表中的每一
项               */
/*      plist指向一个已初始化的链
表              */
/*      pfun指向一个函数，该函数接受一个Item类型的参数，
且无返回值 */
/* 
后置条件：  
pfun指向的函数作用于链表中的每一项一
次          */
void Traverse(const List *plist, void(*pfun)(Item item));
参数pfun是一个指向函数的指针，它指向的函数接受item值且无返回
值。第14章中介绍过，可以把函数指针作为参数传递给另一个函数，然后该
函数就可以使用这个被指针指向的函数。例如，该例中可以让pfun指向显示
链表项的函数。然后把Traverse()函数把该函数作用于链表中的每一项，显
示链表中的内容。
17.3.3 使用接口
我们的目标是，使用这个接口编写程序，但是不必知道具体的实现细节
（如，不知道函数的实现细节）。在编写具体函数之前，我们先编写电影程
序的一个新版本。由于接口要使用List和Item类型，所以该程序也应使用这
些类型。下面是编写该程序的一个伪代码方案。
1330
创建一个List类型的变量。
创建一个Item类型的变量。
初始化链表为空。
当链表未满且有输入时：
把输入读取到Item类型的变量中。
在链表末尾添加项。
访问链表中的每个项并显示它们。
程序清单 17.4 中的程序按照以上伪代码来编写，其中还加入了一些错
误检查。注意该程序利用了list.h（程序清单 17.3）中描述的接口。另外，还
需注意，链表中含有 
showmovies()函数的代码，它与Traverse()的原型一
致。因此，程序可以把指针showmovies传递给Traverse()，这样Traverse()可
以把showmovies()函数应用于链表中的每一项（回忆一下，函数名是指向该
函数的指针）。
程序清单17.4 films3.c程序
/* films3.c -- 使用抽象数据类型（ADT）风格的链表 */
/* 与list.c一起编译           */
#include 
#include   /* 提供exit()的原型 */
#include "list.h"   /* 定义List、Item */
void showmovies(Item item);
char * s_gets(char * st, int n);
1331
int main(void)
{
List movies;
Item temp;
/* 初始化   */
InitializeList(&movies);
if (ListIsFull(&movies))
{
fprintf(stderr, "No memory available! Bye!\n");
exit(1);
}
/* 获取用户输入并储存 */
puts("Enter first movie title:");
while (s_gets(temp.title, TSIZE) != NULL && 
temp.title[0] != '\0')
{
puts("Enter your rating :");
scanf("%d", &temp.rating);
while (getchar() != '\n')
1332
continue;
if (AddItem(temp, &movies) == false)
{
fprintf(stderr, "Problem allocating memory\n");
break;
}
if (ListIsFull(&movies))
{
puts("The list is now full.");
break;
}
puts("Enter next movie title (empty line to stop):");
}
/* 显示    */
if (ListIsEmpty(&movies))
printf("No data entered. ");
else
{
printf("Here is the movie list:\n");
1333
Traverse(&movies, showmovies);
}
printf("You entered %d movies.\n", ListItemCount(&movies));
/* 清理    */
EmptyTheList(&movies);
printf("Bye!\n");
return 0;
}
void showmovies(Item item)
{
printf("Movie: %s  Rating: %d\n", item.title,
item.rating);
}
char * s_gets(char * st, int n)
{
char * ret_val;
char * find;
ret_val = fgets(st, n, stdin);
if (ret_val)
1334
{
find = strchr(st, '\n');  // 查找换行符
if (find)           // 如果地址不是NULL，
*find = '\0';     // 在此处放置一个空字符
else
while (getchar() != '\n')
continue;      // 处理输入行的剩余内容
}
return ret_val;