After completing this coding task, the students also took part in a
semi-structured interview. Their findings suggest that enforcing
CSP usage per default in IDEs does not lead to increased security.
Notably, there is a discussion on how far students can be recruited
instead of developers for developer-centric topics [36, 37]. In our
case, this was not an option, as we heavily rely on real-world experi-
ence to uncover root causes for CSP’s poor adoption rate. However,
as Lazar et al. [32] point out, it can be challenging to recruit “spe-
cialized populations, such as highly trained domain specialists”, as
is the case with CSP knowledgeable Web developers. Hence, we
decided to conduct a controlled online coding task to mitigate the
impact of geographic location on our recruitment.
Drawing tasks can be powerful to visualize participants’ un-
derstanding of a system or concept [3]. If needed, for example, to
reduce the drawing effort in an online setting, the participant is
given a template to complete. Participants then explain their un-
derstanding of the system as they draw. In security and privacy
research, drawing tasks have, among other things, already been
used to explore user’s understanding of the internet [27], and end
users’ and administrators’ understanding of HTTPS [30].
3 METHODOLOGY
To uncover the underlying problems in the CSP deployment pro-
cess, we examine developers’ mental models of CSPs, as well as
their real-world experiences with the mechanism. We complement
the data with insights from a controlled coding task. Hence, we
provide in-depth qualitative results that fill the gaps of previous
quantitative studies [44]. Our findings can be used to improve
the mechanism and ultimately remove roadblocks to its successful
adoption. Accordingly, we answer the following research questions:
RQ1: What are the root causes of insecure practices when deploy-
RQ2: What strategies do developers adopt when creating a CSP?
RQ3: How well do developers understand the associated threat
ing a CSP?
models of CSP?
RQ4: What are the perceptions and motivations of developers in
terms of deploying a CSP?
We carefully designed our qualitative study to account for the
research questions. Thus, we combined semi-structured interviews
with a controlled coding task to cover both real-world experiences
and in-situation programming, which allows us to take a holistic
view of the topic. Our study consists of three parts: (1) a 3min
Session 11C: Software Development and Analysis CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3087screening survey that covers basic information about the partici-
pants’ demographics and their familiarity with the technologies
involved in CSP. We use this information to ensure that our set of
participants is as diverse as possible; (2) a 45min semi-structured
interview covering perceptions and prior experiences with CSP, as
well as a drawing task about associated threat models of CSP; (3) a
45min coding task in which participants created a CSP for a small
Web app in a programming language of their choice (Python, JS,
or PHP). The total financial cost of this study is 800€, each partici-
pant received 50€ compensation for participation, and the LinkedIn
campaign cost 200€. In the following sections we provide details on
each part of our methodology, the methods and choices regarding
study population and recruitment, as well as evaluation and ethical
considerations.
3.1 Recruitment and Participants
Our target population is real-world developers that actively de-
ployed, try to deploy, or are testing a CSP. To get in touch with this
group, we first tried to find participants using our national chapter
of the Open Web Application Security Project (OWASP) Founda-
tion. By using this channel, we are not only reaching developers
of big Web applications behind known companies but also small
development teams, which increases the diversity in our study pop-
ulation. In addition to the tweet of the OWASP, researchers of our
institution held a talk at an OWASP event and promoted our study
to all attendees. For the invitation via the OWASP, we created a
poster with all necessary information about our study (see Appen-
dix C). Those include the goal and the procedure of the study, as
well as the amount of time required for participation and the com-
pensation. In addition to that, we also used targeted advertisements
on the business social network LinkedIn. Similar to the poster for
the OWASP recruitment, we designed a sponsored content post
(see Appendix D) that includes the goal, the procedure, the time
required, and compensation. The advertisement was targeted to-
wards Web developers and associated with the official account of
our institution to underline the soundness of the invitation.
We also tried other recruitment techniques, which did not lead
to any new possible participant completing our screening survey.
We created a recruiting email (see Appendix E) that we sent to the
set of contact email addresses extracted from the WHOIS entries of
Alexa Top 10,000 sites that are using CSP. These invitation emails
were sent from an institutional email account to ensure that the
possible participants see this as a reliable offer. We also tried direct
recruiting people by calling Web development companies via phone.
Here we used an official phone number that is associated with our
institution in order to increase trust. In general, we can confirm that
the recruitment of a specialized population, such as Web developers,
who are knowledgeable in CSP, is very challenging [32].
3.2 Screening Survey
Our screening survey is a self-built and self-hosted Web applica-
tion, including a sane CSP. The self-hosting under a subdomain
of our research institution provides us exclusive and full control
over the data entered into the survey. The survey itself consists
of 16 questions, with the time required to answer them no more
than three minutes. The landing page of the survey also reminds
the participant about the number of questions and the time re-
quired to answers all questions (see Appendix A). In addition to
that, they are informed that all answers are optional (except for
the contact email), as well as the fact that the collected data will
be used for scientific purposes only. First, we ask questions about
security decisions within their working environment. Notably, we
also ask for which Web application the participant takes part in the
deployment or maintenance of CSP, asking them to supply a URL
if possible (see Appendix A.1). In case of inviting a participant to
our interview, we use this link to the Web application to customize
the semi-structured interview. We either focus on the root cause of
certain insecure expressions used in their CSP, or we ask the partic-
ipant how they arrived at their secure policy and what roadblocks
occurred during that process. Further, we ask questions regarding
technology perception and security awareness when using Web
applications (see Appendix A.2). Last, we ask for demographics
covering age, gender, profession, education, home country, and the
company size [53] (see Appendix A.3).
As soon as a candidate completes the questionnaire, assess if
they are suitable and send an invitation email. In doing so, we were
able to manually filtered out bots and pay particular attention to
prior experience with CSP. The invitation email (see Appendix F)
contained the following information: (1) a reminder about the study
compensation of 50 Euro (as an Amazon gift card) and the fact that
the study will be recorded; (2) a detailed description of the study
procedure including a schedule; (3) detailed choices about the cod-
ing task, as well as video conferencing systems. In our study, we
pay special attention to making the participants feel as comfortable
as possible and to replicating their usual programming environ-
ment as closely as possible. Therefore, we offer our participants
the greatest possible freedom concerning the configuration of the
coding task, choice of video conferencing software, and choice of
the study date [35].
3.3 Interview
The interview consists of three blocks: (1) General questions on
the participant’s work in the company and educational background.
These easy-to-answer questions provide an introduction to the in-
terview and also act as a warm-up. However, the questions are
designed in a way such that the participants might also give us
valuable information regarding their mindset about CSP, and how
they first got in contact with the mechanism. (2) Threat Model
covered by CSP: This block covers attacker capabilities, different
use cases for CSP, as well as the process of decision-making that
leads to a (secure) CSP. Those questions are supplemented by a
drawing task in which participants draw and explain a XSS attack
of their choice in detail. For this purpose, we provide the partici-
pants with a graphic containing four stakeholders: The attacker, the
victim, the vulnerable server, and an attacker-controlled server (see
Figure 1). The drawing is done either via Zoom’s Annotate feature
or alternatively with enabled screen sharing and diagrams.net [14].
After finishing the drawing, we ask the participants at which point
of this attack a CSP could successfully stop exploitation.
While Roth et al. [44] already hinted that XSS mitigation is the
prominent use-case for CSP deployment, this block of our inter-
view enables us to get a deeper understanding of the underlying
Session 11C: Software Development and Analysis CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3088development. The task is available in three different Web backend
languages. Here we looked up the most popular programming lan-
guages in 2020 and checked if there is a popular Web framework
in that language. As a result, we created the same Web applica-
tion in JavaScript (Express), Python (Django), and PHP (Twig). In
all cases, we build the functionality in a very similar way, e.g.,
by using the Jinja2 templating language for the HTML files in
all three cases. By doing so, we make sure that the choice of the
programming language is not interfering with the complexity of
the task. After choosing their preferred language, the participants
download the corresponding source code (<2MB) and ideally use
docker-compose to start the application. However, if they do not
want to use docker, we also provide alternatives like an install
script for Linux-based systems, which also includes the Windows
Subsystem for Linux (WSL), or downloading and importing a pre-
configured virtual machine for virtual box. In addition to that, we
offer the opportunity to remote control this VM using Zoom, or
alternatively use TeamViewer [16]. The source code changes of the
Web application can then be done in the participant’s favorite IDE,
such that they feel as comfortable as possible.
As laid out by several prior works [7, 58, 59] and more explic-
itly by Roth et al. [44] and Steffens et al. [49], deploying CSP is
made harder if certain constructs are used in a Web application, in
particular ever-changing third-party inclusions, inline scripts, and
inline event handlers. Since we aim to understand how developers
understand these roadblocks and find solutions, we build our appli-
cation with such roadblocks in place. The goal is to investigate if,
how, and why the participant resolves these issues. In most cases,
multiple solutions are possible, broadening the exploration space.
If the participant, for example, uses nonces to fix the inline JS, it
is interesting to see how the nonces are generated, as well as how
they are placed on the script tags. Overall, the goal of this coding
task is to enrich the data we got from the interview with real hands-
on coding experiences with CSP. By conducting this coding task,
participants can also recall roadblocks and challenges that they
forgot to mention during the interview such that the data that we
gather is as complete as possible. In essence the Web application is
a small app to log in and save notes, specifically designed to carry
the CSP-inhibiting patterns mentioned above. All three versions of
the Web application are available at the CISPA GitHub Repository
1.
3.5 Pre-Study
We conducted a pre-study to ensure that our interview guideline is
appropriate to provide answers to our research questions, to identify
errors and inconsistencies in the coding task and its setup, and, to
give the interviewer the opportunity to practice. The pre-study
consisted of two steps. First, we had the interview and coding task
tested separately, each by a person knowledgeable in the respective
area. A researcher created a persona representative of our study
population and took the role of this persona for the first interview
test. Another researcher familiar with CSP tested the coding task.
In the second step, we conducted three complete runs of interviews
followed by the coding task. We recruited two students and one
web developer who had experience with CSP. In doing so, we made
1https://github.com/cispa/12-angry-developers-web-applications
Figure 1: Template for XSS/CSP Drawing Task
threat model that developers have in mind when dealing with CSP.
Furthermore, it allows us to see which of the different use-cases
of CSP (XSS mitigation, framing control, TLS enforcement) is the
most prominent and how knowledgeable each participant is about
CSP’s full capabilities. The third part of the questions regarding
(3) Roadblocks for CSP is customized towards the participant.
In the screening questionnaire, we ask the participants for (a list
of) domains for which they took part in the deployment or main-
tenance of a CSP. If provided with a URL, we then rely on the live
and Internet Archive version of the said domain to determine if
this CSP is secure, insecure (i.e., trivially bypassable), or the com-
pany gave up on CSP by eventually dropping the header. While the
Internet Archive’s crawl, such as crawls in general, might not fully
reliable due to e.g. bot detection, prior work [44] has shown that
the validity of the Internet Archive regarding CSP headers. Also,
during the interview the CSP that was or is deployed on those pages
was lateron confirmed by the participants. Depending on which of
the three groups the study participant falls into, we ask different
questions. In essence, we ask participants that have worked on poli-
cies without any insecure practices, such as the unsafe keywords,
how they managed to achieve this and which roadblocks they faced
during this achievement. In contrast, we ask those with a trivially
bypassable policy what caused the usage of certain insecure prac-
tices in their CSP. Finally, for those who gave up on CSP, we ask
why they aborted their experiment of deploying a CSP and what
changes would be required before they would consider attempting
CSP deployment again. During this block of questions, we not only
want to hear about their stories of CSP deployment, but we also ask
about tools and consulting that helped them during this process.
The complete interview guideline can be found in Appendix B.
3.4 Coding Task
In the coding task, we ask each participant to create a CSP that
mitigates the effect of XSS attacks for a small Web application. We
inform the participants that they can use any resources throughout
the task to make sure that we are simulating their usual program-
ming behavior as closely as possible. During the procedure, the
participants are asked to share the screen such that we can observe
their coding behavior during the experiment. Furthermore, we ask
them to think aloud during the task, such that we not only see
what they are doing but also understand the decisions made during
VictimAttackervuln.comevil.comSession 11C: Software Development and Analysis CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3089sure to cover each programming language once. The results of the
pre-study are not included in the results of the main study. Based
on the pre-study, we slightly changed the order of the questions,
among other things, to ensure a more natural interview flow. We
also included code snippets in the coding task that could be used as
templates to programmatically add events. This was to ensure that
the participants had enough time to focus on creating the CSP, as
searching for the right syntax in the pre-study took a lot of time.
3.6 Data Analysis
We manually transcribed all collected data, including the coding
and drawing task. Afterward, we unitized [10] the transcript and
conducted open coding according to Strauss and Corbin [51] to
analyze the data. For the analysis of the drawing and coding task,
we additionally used the screen recordings to ensure no information
is missed. In total two coders (the core authors) were involved in
the coding process and construction of the codebook. The first
coder constructed an initial version of the codebook, taking into
account two interview transcripts. Based on the initial codebook,
both coders coded all interviews, resolving issues and adjusting
the codebook accordingly after each iteration. We continued with
the coding procedure until both coders agreed that saturation was
reached. In our case, this meant no new concepts emerged from the
newest two interviews. We calculated the intercoder reliability of
the different codebook versions before resolving issues. With the
saturated version of the codebook, we re-coded all interviews to
ensure that no information was missed during the initial coding.
The final codebook is attached in Appendix I.
Codes are partitioned into high-level primary codes and more
detailed secondary descriptions. For example: if a participant com-
plained during the interview about the false positives in CSP’s
report feature, the corresponding primary code is “Roadblock” and
the secondary code is “False Positive Reports”. Using this way of
assigning codes, we made sure that we can better evaluate which
roadblocks occurred, which strategies were used, and which moti-
vations and perceptions the participant had during working with
CSP. We applied thematic analysis [6] to the coded data to identify
emerging themes and patterns. Then we conducted axial coding [51]
to investigate the relationship between themes. To this end, we in-