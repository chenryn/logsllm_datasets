{"process.parent.args_count": {"dashed_name": "process-parent-args-count", "description": "Length of the process.args array.\nThis field can be useful for querying or performing bucket analysis on how many arguments were provided to start a process. More arguments may be an indication of suspicious activity.", "example": 4, "flat_name": "process.parent.args_count", "level": "extended", "name": "args_count", "normalize": [], "original_fieldset": "process", "short": "Length of the process.args array.", "type": "long"}}
{"process.parent.code_signature.digest_algorithm": {"dashed_name": "process-parent-code-signature-digest-algorithm", "description": "The hashing algorithm used to sign the process.\nThis value can distinguish signatures when a file is signed multiple times by the same signer but with a different digest algorithm.", "example": "sha256", "flat_name": "process.parent.code_signature.digest_algorithm", "ignore_above": 1024, "level": "extended", "name": "digest_algorithm", "normalize": [], "original_fieldset": "code_signature", "short": "Hashing algorithm used to sign the process."}}
{"process.parent.code_signature.exists": {"dashed_name": "process-parent-code-signature-exists", "description": "Boolean to capture if a signature is present.", "example": "true", "flat_name": "process.parent.code_signature.exists", "level": "core", "name": "exists", "normalize": [], "original_fieldset": "code_signature", "short": "Boolean to capture if a signature is present.", "type": "boolean"}}
{"process.parent.code_signature.signing_id": {"dashed_name": "process-parent-code-signature-signing-id", "description": "The identifier used to sign the process.\nThis is used to identify the application manufactured by a software vendor. The field is relevant to Apple *OS only.", "example": "com.apple.xpc.proxy", "flat_name": "process.parent.code_signature.signing_id", "ignore_above": 1024, "level": "extended", "name": "signing_id", "normalize": [], "original_fieldset": "code_signature", "short": "The identifier used to sign the process."}}
{"process.parent.code_signature.status": {"dashed_name": "process-parent-code-signature-status", "description": "Additional information about the certificate status.\nThis is useful for logging cryptographic errors with the certificate validity or trust status. Leave unpopulated if the validity or trust of the certificate was unchecked.", "example": "ERROR_UNTRUSTED_ROOT", "flat_name": "process.parent.code_signature.status", "ignore_above": 1024, "level": "extended", "name": "status", "normalize": [], "original_fieldset": "code_signature", "short": "Additional information about the certificate status."}}
{"process.parent.code_signature.subject_name": {"dashed_name": "process-parent-code-signature-subject-name", "description": "Subject name of the code signer", "example": "Microsoft Corporation", "flat_name": "process.parent.code_signature.subject_name", "ignore_above": 1024, "level": "core", "name": "subject_name", "normalize": [], "original_fieldset": "code_signature", "short": "Subject name of the code signer"}}
{"process.parent.code_signature.team_id": {"dashed_name": "process-parent-code-signature-team-id", "description": "The team identifier used to sign the process.\nThis is used to identify the team or vendor of a software product. The field is relevant to Apple *OS only.", "example": "EQHXZ8M8AV", "flat_name": "process.parent.code_signature.team_id", "ignore_above": 1024, "level": "extended", "name": "team_id", "normalize": [], "original_fieldset": "code_signature", "short": "The team identifier used to sign the process."}}
{"process.parent.code_signature.timestamp": {"dashed_name": "process-parent-code-signature-timestamp", "description": "Date and time when the code signature was generated and signed.", "example": "2021-01-01T12:10:30Z", "flat_name": "process.parent.code_signature.timestamp", "level": "extended", "name": "timestamp", "normalize": [], "original_fieldset": "code_signature", "short": "When the signature was generated and signed.", "type": "date"}}
{"process.parent.code_signature.trusted": {"dashed_name": "process-parent-code-signature-trusted", "description": "Stores the trust status of the certificate chain.\nValidating the trust of the certificate chain may be complicated, and this field should only be populated by tools that actively check the status.", "example": "true", "flat_name": "process.parent.code_signature.trusted", "level": "extended", "name": "trusted", "normalize": [], "original_fieldset": "code_signature", "short": "Stores the trust status of the certificate chain.", "type": "boolean"}}
{"process.parent.code_signature.valid": {"dashed_name": "process-parent-code-signature-valid", "description": "Boolean to capture if the digital signature is verified against the binary content.\nLeave unpopulated if a certificate was unchecked.", "example": "true", "flat_name": "process.parent.code_signature.valid", "level": "extended", "name": "valid", "normalize": [], "original_fieldset": "code_signature", "short": "Boolean to capture if the digital signature is verified against the binary content.", "type": "boolean"}}
{"process.parent.command_line": {"dashed_name": "process-parent-command-line", "description": "Full command line that started the process, including the absolute path to the executable, and all arguments.\nSome arguments may be filtered to protect sensitive information.", "example": "/usr/bin/ssh -l user 10.0.0.16", "flat_name": "process.parent.command_line", "level": "extended", "multi_fields": [{"flat_name": "process.parent.command_line.text", "name": "text", "type": "match_only_text"}], "name": "command_line", "normalize": [], "original_fieldset": "process", "short": "Full command line that started the process.", "type": "wildcard"}}
{"process.parent.elf.architecture": {"dashed_name": "process-parent-elf-architecture", "description": "Machine architecture of the ELF file.", "example": "x86-64", "flat_name": "process.parent.elf.architecture", "ignore_above": 1024, "level": "extended", "name": "architecture", "normalize": [], "original_fieldset": "elf", "short": "Machine architecture of the ELF file."}}
{"process.parent.elf.byte_order": {"dashed_name": "process-parent-elf-byte-order", "description": "Byte sequence of ELF file.", "example": "Little Endian", "flat_name": "process.parent.elf.byte_order", "ignore_above": 1024, "level": "extended", "name": "byte_order", "normalize": [], "original_fieldset": "elf", "short": "Byte sequence of ELF file."}}
{"process.parent.elf.cpu_type": {"dashed_name": "process-parent-elf-cpu-type", "description": "CPU type of the ELF file.", "example": "Intel", "flat_name": "process.parent.elf.cpu_type", "ignore_above": 1024, "level": "extended", "name": "cpu_type", "normalize": [], "original_fieldset": "elf", "short": "CPU type of the ELF file."}}
{"process.parent.elf.creation_date": {"dashed_name": "process-parent-elf-creation-date", "description": "Extracted when possible from the file's metadata. Indicates when it was built or compiled. It can also be faked by malware creators.", "flat_name": "process.parent.elf.creation_date", "level": "extended", "name": "creation_date", "normalize": [], "original_fieldset": "elf", "short": "Build or compile date.", "type": "date"}}
{"process.parent.elf.exports": {"dashed_name": "process-parent-elf-exports", "description": "List of exported element names and types.", "flat_name": "process.parent.elf.exports", "level": "extended", "name": "exports", "normalize": ["array"], "original_fieldset": "elf", "short": "List of exported element names and types.", "type": "flattened"}}
{"process.parent.elf.go_import_hash": {"dashed_name": "process-parent-elf-go-import-hash", "description": "A hash of the Go language imports in an ELF file excluding standard library imports. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.\nThe algorithm used to calculate the Go symbol hash and a reference implementation are available [here](https://github.com/elastic/toutoumomoma).", "example": "10bddcb4cee42080f76c88d9ff964491", "flat_name": "process.parent.elf.go_import_hash", "ignore_above": 1024, "level": "extended", "name": "go_import_hash", "normalize": [], "original_fieldset": "elf", "short": "A hash of the Go language imports in an ELF file."}}
{"process.parent.elf.go_imports": {"dashed_name": "process-parent-elf-go-imports", "description": "List of imported Go language element names and types.", "flat_name": "process.parent.elf.go_imports", "level": "extended", "name": "go_imports", "normalize": [], "original_fieldset": "elf", "short": "List of imported Go language element names and types.", "type": "flattened"}}
{"process.parent.elf.go_imports_names_entropy": {"dashed_name": "process-parent-elf-go-imports-names-entropy", "description": "Shannon entropy calculation from the list of Go imports.", "flat_name": "process.parent.elf.go_imports_names_entropy", "format": "number", "level": "extended", "name": "go_imports_names_entropy", "normalize": [], "original_fieldset": "elf", "short": "Shannon entropy calculation from the list of Go imports.", "type": "long"}}
{"process.parent.elf.go_imports_names_var_entropy": {"dashed_name": "process-parent-elf-go-imports-names-var-entropy", "description": "Variance for Shannon entropy calculation from the list of Go imports.", "flat_name": "process.parent.elf.go_imports_names_var_entropy", "format": "number", "level": "extended", "name": "go_imports_names_var_entropy", "normalize": [], "original_fieldset": "elf", "short": "Variance for Shannon entropy calculation from the list of Go imports.", "type": "long"}}
{"process.parent.elf.go_stripped": {"dashed_name": "process-parent-elf-go-stripped", "description": "Set to true if the file is a Go executable that has had its symbols stripped or obfuscated and false if an unobfuscated Go executable.", "flat_name": "process.parent.elf.go_stripped", "level": "extended", "name": "go_stripped", "normalize": [], "original_fieldset": "elf", "short": "Whether the file is a stripped or obfuscated Go executable.", "type": "boolean"}}
{"process.parent.elf.header.abi_version": {"dashed_name": "process-parent-elf-header-abi-version", "description": "Version of the ELF Application Binary Interface (ABI).", "flat_name": "process.parent.elf.header.abi_version", "ignore_above": 1024, "level": "extended", "name": "header.abi_version", "normalize": [], "original_fieldset": "elf", "short": "Version of the ELF Application Binary Interface (ABI)."}}
{"process.parent.elf.header.class": {"dashed_name": "process-parent-elf-header-class", "description": "Header class of the ELF file.", "flat_name": "process.parent.elf.header.class", "ignore_above": 1024, "level": "extended", "name": "header.class", "normalize": [], "original_fieldset": "elf", "short": "Header class of the ELF file."}}
{"process.parent.elf.header.data": {"dashed_name": "process-parent-elf-header-data", "description": "Data table of the ELF header.", "flat_name": "process.parent.elf.header.data", "ignore_above": 1024, "level": "extended", "name": "header.data", "normalize": [], "original_fieldset": "elf", "short": "Data table of the ELF header."}}
{"process.parent.elf.header.entrypoint": {"dashed_name": "process-parent-elf-header-entrypoint", "description": "Header entrypoint of the ELF file.", "flat_name": "process.parent.elf.header.entrypoint", "format": "string", "level": "extended", "name": "header.entrypoint", "normalize": [], "original_fieldset": "elf", "short": "Header entrypoint of the ELF file.", "type": "long"}}
{"process.parent.elf.header.object_version": {"dashed_name": "process-parent-elf-header-object-version", "description": "\"0x1\" for original ELF files.", "flat_name": "process.parent.elf.header.object_version", "ignore_above": 1024, "level": "extended", "name": "header.object_version", "normalize": [], "original_fieldset": "elf", "short": "\"0x1\" for original ELF files."}}
{"process.parent.elf.header.os_abi": {"dashed_name": "process-parent-elf-header-os-abi", "description": "Application Binary Interface (ABI) of the Linux OS.", "flat_name": "process.parent.elf.header.os_abi", "ignore_above": 1024, "level": "extended", "name": "header.os_abi", "normalize": [], "original_fieldset": "elf", "short": "Application Binary Interface (ABI) of the Linux OS."}}
{"process.parent.elf.header.type": {"dashed_name": "process-parent-elf-header-type", "description": "Header type of the ELF file.", "flat_name": "process.parent.elf.header.type", "ignore_above": 1024, "level": "extended", "name": "header.type", "normalize": [], "original_fieldset": "elf", "short": "Header type of the ELF file."}}
{"process.parent.elf.header.version": {"dashed_name": "process-parent-elf-header-version", "description": "Version of the ELF header.", "flat_name": "process.parent.elf.header.version", "ignore_above": 1024, "level": "extended", "name": "header.version", "normalize": [], "original_fieldset": "elf", "short": "Version of the ELF header."}}
{"process.parent.elf.import_hash": {"dashed_name": "process-parent-elf-import-hash", "description": "A hash of the imports in an ELF file. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.\nThis is an ELF implementation of the Windows PE imphash.", "example": "d41d8cd98f00b204e9800998ecf8427e", "flat_name": "process.parent.elf.import_hash", "ignore_above": 1024, "level": "extended", "name": "import_hash", "normalize": [], "original_fieldset": "elf", "short": "A hash of the imports in an ELF file."}}
{"process.parent.elf.imports": {"dashed_name": "process-parent-elf-imports", "description": "List of imported element names and types.", "flat_name": "process.parent.elf.imports", "level": "extended", "name": "imports", "normalize": ["array"], "original_fieldset": "elf", "short": "List of imported element names and types.", "type": "flattened"}}
{"process.parent.elf.imports_names_entropy": {"dashed_name": "process-parent-elf-imports-names-entropy", "description": "Shannon entropy calculation from the list of imported element names and types.", "flat_name": "process.parent.elf.imports_names_entropy", "format": "number", "level": "extended", "name": "imports_names_entropy", "normalize": [], "original_fieldset": "elf", "short": "Shannon entropy calculation from the list of imported element names and types.", "type": "long"}}
{"process.parent.elf.imports_names_var_entropy": {"dashed_name": "process-parent-elf-imports-names-var-entropy", "description": "Variance for Shannon entropy calculation from the list of imported element names and types.", "flat_name": "process.parent.elf.imports_names_var_entropy", "format": "number", "level": "extended", "name": "imports_names_var_entropy", "normalize": [], "original_fieldset": "elf", "short": "Variance for Shannon entropy calculation from the list of imported element names and types.", "type": "long"}}
{"process.parent.elf.sections": {"dashed_name": "process-parent-elf-sections", "description": "An array containing an object for each section of the ELF file.\nThe keys that should be present in these objects are defined by sub-fields underneath `elf.sections.*`.", "flat_name": "process.parent.elf.sections", "level": "extended", "name": "sections", "normalize": ["array"], "original_fieldset": "elf", "short": "Section information of the ELF file.", "type": "nested"}}
{"process.parent.elf.sections.chi2": {"dashed_name": "process-parent-elf-sections-chi2", "description": "Chi-square probability distribution of the section.", "flat_name": "process.parent.elf.sections.chi2", "format": "number", "level": "extended", "name": "sections.chi2", "normalize": [], "original_fieldset": "elf", "short": "Chi-square probability distribution of the section.", "type": "long"}}
{"process.parent.elf.sections.entropy": {"dashed_name": "process-parent-elf-sections-entropy", "description": "Shannon entropy calculation from the section.", "flat_name": "process.parent.elf.sections.entropy", "format": "number", "level": "extended", "name": "sections.entropy", "normalize": [], "original_fieldset": "elf", "short": "Shannon entropy calculation from the section.", "type": "long"}}