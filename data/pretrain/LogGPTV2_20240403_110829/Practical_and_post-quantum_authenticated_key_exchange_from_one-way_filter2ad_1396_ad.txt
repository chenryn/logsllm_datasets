2
2
2 
Now, we extend  the functions Cha and Mod2  to ring  Rq  by applying them  coefﬁcient-wise  to ring elements. 
Namely,  for  ring  element  v  =  (v0, . . . , vn−1)  ∈  Rq  and  binary-vector  b  =  (b0, . . . , bn−1)  ∈  {0, 1}n,  deﬁne 
(Mod2(v0, b0), . . . ,  Mod2(vn−1, bn−1)).  For  simplic­
Cha(v)  = 
C
ity, we slightly abuse the notations and still use Cha and Mod2  to denote C Mod2, respectively. Clearly, the 
(Cha(v0), . . . , Cha(vn−1))  and M =
Cha and M
Mod2(v, b) 
result in Lemma 3 still holds when extending to ring elements. 
In our AKE protocol, the two involved parties will use Cha and Mod2  to derive a common key material. Con­
cretely, the responder will publicly send the result of Cha on his own secret ring element to the initiator in order to 
compute a shared key material from two “closed” ring elements (by applying the Mod2 function). Ideally, for uniformly 
chosen element v from Rq  at random, we hope that the output of Mod2(v, Cha(v)) is uniformly distributed {0, 1} . 
n
However, this can never happen when q is a odd prime. Fortunately, we can show that the output of Mod2(v, Cha(v)) 
conditioned on Cha(v) has high min-entropy, thus can be used to extract an (almost) uniformly session key. Actually, 
we can prove a stronger result. 
Lemma 4.  Let q be any odd prime and Rq  be the ring deﬁned above. Then, for any b ∈ {0, 1}n and any vj ∈ Rq, the 
output distribution of Mod2(v +v , b) given Cha(v) has min-entropy at least −n log( 1 + 
), where v is uniformly 
chosen from Rq  at random. In particular, when q > 203, we have −n log( 1  + 
Proof. Since each coefﬁcient of v  is independently and uniformly chosen from Zq  at random, we can simplify the 
proof by focusing on the ﬁrst coefﬁcient of v. Formally, letting v  =  (v0, . . . , vn−1), v =  (v0, . . . , vn−1) and b  = 
(b0, . . . , bn−1), we condition on Cha(v0): 
|E|−1 
2 
) > 0.97n.
|E|−1 
j 
2 
j
j
j
1
1
9 
j
q−1
2 
q−1	 
2	 
–  If Cha(v0)  =  0, then v0  + v0  + b0 · 
j
is uniformly distributed over v0  + b0 · 
j , b0) will output either 0 or 1 with probability exactly  1 
•  If |E| is odd and wrap-around does occur, then the set v0  + b0 · 
Namely, the result of Mod2(v0 + v0, b0) has no bias. 
over {0, 1}. In other words, the Mod2(v0 + v0
+ E mod q. This shifted 
set has (q + 1)/2 elements, which are either consecutive integers—if the shift is small enough—or two sets of 
consecutive integers—if the shift is large enough to cause wrap-around. Thus, we must distinguish a few cases: 
•  If |E| is even and no wrap-around occurs, then the result of Mod2(v0  + v0
j , b0) is clearly uniform on {0, 1}. 
•  If |E| is odd and no wrap-around occurs, then the result of Mod2(v0 + v0
j , b0) has a bias with probability  2|1 
E| 
2  + 2|1 
E| . 
+ E mod q splits into two parts, one 
with an even number of elements, and one with an odd number of elements. This leads to the same situation 
as with no wrap-around. 
•  If |E| is even and wrap-around occurs, then our sample space is split into either two even-sized sets, or two 
odd sized sets. If both are even, then once again the result of Mod2(v0 + v0, b0) is uniform. If both are odd, it 
is easy to calculate that the result of Mod2(v0 + v0
–  If Cha(v0) = 1, v0  + v0  + b0 · 
+ E˜, where E˜ = Zq \ E. Now 
|E˜| = |E| − 1, so by splitting into the same cases as Cha(v0) = 0, the result of Mod2(v0 + v0
j , b) has a bias with 
probability |E|−1  over {0, 1}.
In all, we have that the result of Mod2(v0  + v0, b0) conditioned on Cha(v0) has min-entropy at least − log( 1  +2 
). Since the bits in the result of Mod2(v + v , b) are independent, we have that given Cha(v), the min­
|E|−1 
entropy H∞(Mod2(v + v , b)) ≥ −n log( 1  + 
). This completes the ﬁrst claim. The second claim directly 
follows from the fact that − log( 1  + 
D
is uniformly distributed over v0  + b0 · 
) > − log(0.51) > 0.97 when q > 203.	 
j , b0) has a bias with probability |E
1 |  over {0, 1}. 
1
|E|−1 
q−1 
2	 
j
q−1
2 
q−1
2 
j
j
j
j	 
1
1	 
j
j
j
2	 
1
|E|−1 
2	 
Remark 1  (On Uniformly Distributed Keys). It is known that randomness extractor can be used to obtain an almost 
uniformly distributed key from a biased bit-string with high min-entropy [18,64,65,27,4]. In practice, as recommended 
by NIST [5], one can actually use the standard cryptographic hash functions such as SHA-2 to derive a uniformly 
distributed key if the source string has at least 2κ min-entropy, where κ is the length of the cryptographic hash function. 
3.1  The Protocol 
We now describe our protocol in detail. Let  n be a power of  2, and  q  be an odd prime such that  q mod 2n  =  1. 
Take R = Z[x]/(xn + 1) and Rq  = Zq[x]/(xn + 1) as above. For γ ∈ R+, let H1 : {0, 1}∗ → χγ  = DZn,γ  be a hash 
function that always output invertible elements in Rq. 8  Let H2 : {0, 1}∗  →  {0, 1}κ  be the key derivation function, 
where κ is the bit-length of the ﬁnal shared key. We model both functions as random oracles [6]. Let χα, χβ  be two 
discrete Gaussian distributions with parameters α, β  ∈  R+. Let a  ∈  Rq  be the global public parameter uniformly 
chosen from Rq  at random, and M  be a constant determined by Theorem 1. Let pi  =  asi  + 2ei  ∈  Rq  be party i’s 
static public key, where (si, ei) is the corresponding static secret key; both si and ei are taken from the distribution χα. 
Similarly, party j has static public key pj  = asj  + 2ej  and static secret key (sj , ej ). 
Initiation  Party i proceeds as follows: 
1.  Sample ri, fi ←r  χβ  and compute xi  = ari + 2fi; 
2.  Compute c = H1(i, j, xi), rˆi  = sic + ri  and fˆ i  = eic + fi; 
3.  Letting z ∈ Z2n  be the coefﬁcient vector of rˆi  concatenated with the coefﬁcient vector of fˆ i, and z1  ∈ Z2n 
be the coefﬁcient vector of sic concatenated with the coefﬁcient vector of eic, repeat the steps 1 ∼  3 with
probability 1 − min 
4.  Send xi  to party j. 
1j.  Sample rj , fj  ←r  χβ  and compute yj  = arj  + 2fj ; 
Response	 After receiving xi  from party i, party j proceeds as follows: 
(z)
M DZ2n ,β ,z1 
(z) , 1  .
w 
DZ2n ,β
8  In practice, one can ﬁrst use a hash function such as SHA-2 to obtain a uniformly random string, and then use it to sample from 
DZn,γ . The algorithm output a sample only if it is invertible in Rq , otherwise, it tries another sample and repeats. By Lemma 10 
in [63], we can have a good probability to sample an invertible element in each trial for an appropriate choice of γ. 
10 
DZ2n ,β
(z)
M DZ2n ,β,z1 
(z) , 1  ;
2j.  Compute d = H1(j, i, yj , xi), rˆj  = sj d + rj  and fˆ j  = ej d + fj ; 
3j.  Letting z ∈ Z2n  be the coefﬁcient vector of rˆj  concatenated with the coefﬁcient vector of fˆ j , and z1  ∈ Z2n 
be the coefﬁcient vector of sj d concatenated with the coefﬁcient vector of ej d, repeat the steps 1j  ∼ 3j  with 
probability 1 − min 
w 
Finish  Party i receives the pair (yj , wj ) from party j, and proceeds as follows: 
4j.  Sample gj  ←r  χβ  and compute kj  = (pic + xi)ˆrj  + 2cgj  where c = H1(i, j, xi); 
5j.  Compute wj  = Cha(kj ) ∈ {0, 1}n  and send (yj , wj ) to party i; 
6j.  Compute σj  = Mod2(kj , wj ) and derive the session key skj  = H2(i, j, xi, yj , wj , σj ). 
5.  Sample gi ←r  χβ  and compute ki  = (pj d + yj ) ˆri + 2dgi  where d = H1(j, i, yj , xi); 
6.  Compute σi  = Mod2(ki, wj ) and derive the session key ski  = H2(i, j, xi, yj , wj , σi). 
In the above protocol, both parties will make use of rejection sampling, i.e., they will repeat the ﬁrst three steps 
with certain probability. By Theorem 1, the probability that each party will repeat the steps with probability about  M 
1
for some constant M  and appropriately chosen β. Thus, one can hope that both parties will send something to each 
other after an averaged M times repetitions of the ﬁrst three steps. In the following subsection, we will show that once 
they send something to each other, both parties will ﬁnally compute a shared session key. 
3.2  Correctness 
To show the correctness of our AKE protocol, i.e., that both parties compute the same session key ski  = skj , it sufﬁces 
to show that σi  =  σj . Since σi  and σj  are both the output of Mod2  with Cha(kj ) as the second argument, we need 
only to show that ki  and kj  are sufﬁciently close by Lemma 3. Note that the two parties will compute ki  and kj  as 
follows: 
ki	  = (pj d + yj )ˆri + 2dgi 
= arˆirˆj  + 2ggi 
kj  = (pic + xi)ˆrj  + 2cgj 
= arˆirˆj  + 2ggj 
= a(sj d + rj )ˆri + 2(ej d + fj )ˆri + 2dgi 
= a(sic + ri)ˆrj  + 2(eic + fi)ˆrj  + 2cgj 
where ggi  = fˆ j rˆi  + dgi, and ggj  = fˆ irˆj  + cgj . Then ki  = kj  + 2(ggi − ggj ), and we have σi  = σj  if 1ggi − ggj 1∞  < q/8 
by Lemma 3. 