ZKCP for purchasing Sudoku solutions. Using the template above,
the string fA is the solution of an n × n input Sudoku table (which
also specifies the verification algorithm VB). The main challenge of
course is the implementation of the ZK proof that the decryption
of ˆf under the preimage of s is indeed a valid Sudoku solution for
the input Sudoku table. They implemented this non-interactively,
using the ZK Succint Non-Interactive Arguments of Knowledge (ZK-
SNARK) based on Quadratic Arithmetic Programs [29, 40], using
the libsnark library [8, 11].
As with all NIZK proofs, QSP-based ZK-SNARGs require a com-
mon reference string (CRS) for the production and the verification
of the proof3. Such CRS should be selected by a trusted party in
advance, which is obviously non-ideal for ZKCP. The entire premise
of ZKCP is to perform fair-exchange over the blockchain in a trust-
less manner, and introducing a trusted third party would largely
defeat the purpose.
To get around this, it was noticed that unlike proofs which are
produced to be verified by the public, the ZK-proof in ZKCP only
need to convince a single person – the buyer. In ZKCP it was
therefore proposed that the buyer (i.e. the verifier) generate the
CRS, to ensure that the seller could not cheat.
However, having the buyer generate the CRS is problematic as it
only protects against a soundness adversary but not a zero-knowledge
adversary. With regards to the proof’s soundness property, the seller
is the adversary as the seller would benefit from producing an in-
correct proof. However, with regards to the proof’s zero-knowledge
property, the buyer is the adversary as the buyer would benefit
from learning some information about fA without paying for it. If
one generates the CRS maliciously, and (as we show below) the CRS
is not checked for “correctness", they can break both soundness
and zero-knowledge.
Because the ZKCP protocol does not check the correctness of
the CRS it only ensures that the seller can not cheat, but it allows
the buyer to cheat and extract information about the witness fA
without paying for it. In the next section we use this fact to show a
concrete attack on the ZKCP protocol that leaks information about
the value of a Sudoku cell before the buyer pays for the solution.
3 ATTACKS ON ZKCP WITH UNTRUSTED
CRS
In this section we show how allowing the Verifier to choose the CRS
in the QAP-based SNARK leads to a loss of the Zero-Knowledge
property. While it is a well known fact in the cryptographic liter-
ature that a trusted CRS is needed for zero-knowledge, the point
of this section is to demonstrate this insecurity by developing con-
crete attacks that allow one to learn information in the “Pay-to-
Sudoku” implementation, where the Verifier does indeed set the
CRS. Through our attack, the Verifier is able to verify if a particular
guess for a Sudoku cell is correct or not. This obviously break the
fairness of the protocol (as defined in Section 2.3) since the buyer
learns partial information about the seller’s input.
First we recall how Quadratic Arithmetic Span programs work,
since they are the proof backbone of the libsnark library used in
the implementation. Then we show our attacks, and describe our
implementation of the malicious verifier.
3.1 ZK-SNARKs from Quadratic Arithmetic
Programs
We recall here the notion of Quadratic Arithmetic Programs (QAPs)
[29, 40], using the notation of Ben-Sasson et al. [11].
Definition 3.1 ([29]). A QAP Q over a field F is defined by three
sets of polynomials A := {Ai (x )}m
i =0, C := {Ci (x )}m
i =0
: Fn →
and a target polynomial Z (x ). If we take a function f
Fn′, then we say that Q computes f if, given a valid assignment
3In the SNARKs literature, the CRS is sometimes referred to as the proving key and the
verifying key.
i =0, B := {Bi (x )}m
Session A5:  CryptocurrencyCCS’17, October 30-November 3, 2017, Dallas, TX, USA234(c1, . . . , cn+n′ ) of inputs and outputs of f , there exist coefficients
(cn+n′+1, . . . , cm ) such that Z (x ) divides the following polynomial
(4) Let
(cid:16)
p(x ) :=
A0(x ) +
(cid:17)
B0 (x ) +
ck · Bk (x )
+
m(cid:88)
−(cid:16)
k =1
(cid:17) ·(cid:16)
ck · Ak (x )
m(cid:88)
C0(x ) +
ck · Ck (x )
k =1
m(cid:88)
k =1
(cid:17)
In other words there must exists a polynomial H (x ) such that
p(x ) = H (x ) · Z (x ). We refer to m and the degree of Z (x ) as the
size and the degree of Q respectively.
д
(cid:89)
To build a QAP for a function f , we use an arithmetic cir-
cuit C representing f ; we then pick a distinct root rд for any of
its multiplicative gates. Then, we build the target polynomial as
(z − rд ), and we label each input of the circuit and each
Z (z) :=
output of a multiplicative gate with an index i ∈ [m] (grouping
together all the additive gates). We define the polynomials A, B, C in
a way that they respectively encode the left, right and output wire
of each gate: for example, Bi (rд ) = 1 if the i-th wire of the circuit is
a right input wire of the gate д, and Bi (rд ) = 0 (and similarly with
A and C with left input and output wires respectively). So, for any
gate д and its root rд, the condition above can be seen as:
(cid:17) ·(cid:16) m(cid:88)
(cid:16) m(cid:88)
ck · Ak (rд )
k =1
ck · Ak (rд )
(cid:17) ·(cid:16) (cid:88)
(cid:17)
ck · Bk (rд )
k =1
ck · Bk (rд )
(cid:17)
=
k∈IR
(cid:16) (cid:88)
k∈IL
=
which basically says that the output of a multiplication gate is the
multiplication between the values on the left and the right inputs
wire of the gate itself. Following the notation of [11], it is now
possible to use QAPs to build zk-SNARKs, as in [29, 40]:
= cдCk (rд ) = cд
Public Parameters: pp := (r , e, P1, P2, G1, G2, GT ) where
G1 := ⟨P1⟩, G2 := ⟨P2⟩, GT are groups of prime order r and
e : G1 × G2 → GT is a pairing.
Key Generation The key generation procedure is composed
by several steps, it takes in input a circuit C : Fn
r × Fh
r → Fℓ
r
and outputs a proving key pk and a verification key vk.
(1) Compute (A, B, C, Z ) with respect to the circuit C
and extend A := {Ai (x )}m
i =0, B := {Bi (x )}m
i =0, C :=
{Ci (x )}m
i =0 via Am+1 = Bm+2 = Cm+3 = Z, Am+2 =
Am+3 = Bm+1 = Bm+3 = Cm+1 = Cm+2 = 0.
$← Fr
A,i
(2) Sample τ , φA, φB , αA, αB , αC , β, γ
(3) For i = 0, . . . , m + 3, let
pkA,i := Ai (τ )φAP1, pk′
pkB,i := Bi (τ )φBP2, pk′
pkC,i := Ci (τ )φCP1, pk′
pkK,i := β (Ai (τ )φA + Bi (τ )φB + Ci (τ )αCφAφB )P1
and for i = 0, . . . , d let pkH,i := τ iP1. Set
pk := (C, pkA, pk′
:= Ai (τ )αAφAP1
:= Bi (τ )αBφBP1
:= Ci (τ )αCφAφBP1
C , pkK , pkH ).
B , pkC , pk′
A, pkB , pk′
C,i
B,i
2
γ β
1
γ β
:= γ βP1, vk
vkA := αAP2, vkB := αBP1, vkC := αCP2
vkγ := γP2, vk
:= γ βP2
vkZ := Z (τ )φAφBP2
{vkIC,i}n
i =0 := {Ai (τ )φAP1}n
i =0.
Set
1
vk := (vkA, vkB , vkC , vkγ , vk
γ β , vk
2
γ β , vkZ , vkIC ).
(5) Output (pk, vk )
Prover: On input a proving key pk, an input x ∈ Fn
a ∈ Fh
r , it outputs a proof π which is computed as follows:
(1) Compute (A, B, C, Z ) with respect to the circuit C.
(2) Compute the QAP witness s ∈ Fm with respect to
r , a witness
$← Fr .
(3) Sample δ1, δ2, δ3
(4) Compute the polynomial
H (z) := A(z )B (z )−C (z )
Z (z )
C, x, a.
where
A(z) := A0(z) +(cid:80)m
B(z) := B0 (z) +(cid:80)m
C (z) := C0(z) +(cid:80)m
i =1 si Ai (z) + δ1Z (z),
i =1 si Bi (z) + δ2Z (z),
i =1 siCi (z) + δ3Z (z).
r
r
(5) Set
and represent H (z) as (h0, . . . , hd ) ∈ Fd +1
˜pkA := (0n, pkA,n+1, . . . , pkA,m+3)
′
A := (0n, pk′
˜pk
A,n+1, . . . , pkA,m+3).
(6) Let c := (1, s, δ1, δ2, δ3) ∈ F4+m
, compute
′
π′
A⟩,
:= ⟨c, ˜pk
π′
:= ⟨c, pk′
B⟩,
A
:= ⟨c, pk′
π′
C⟩,
B
πH := ⟨h, pkK⟩.
C
B , πC , π′
C , πK , πH ).
Verifier: On input a verification key vk, an input x ∈ Fn
a proof π, the verifier proceeds as follows:
πA := ⟨c, ˜pkA⟩,
πB := ⟨c, pkB⟩,
πC := ⟨c, pkC⟩,
πK := ⟨c, pkK⟩,
A, πB , π′
(1) Compute vkx := vkIC,0 +(cid:80)m
A, P2),
(7) Output π := (πA, π′
i =1 xivkIC,i ∈ G1.
by checking:
e (πA, vkA) = e (π′
e (π′
B , P2),
e (vkB , πB ) =
C , P2).
(3) Verify that the same coefficients were used by checking:
γ β ) · e (vk
1
γ β , πB ).
e (πK , vkγ ) = e (vkx + πA + πC , vk
e (πC , vkC ) = e (π′
(2) Verify validity of knowledge commitments for A, B, C
r and
2
(4) Check QAP divisibility
e (vkx + πA, πB ) = e (πH , vkZ ) · e (πC , P2).
(5) Output 1 (accept) if and only if all the above checks are
satisfied.
Session A5:  CryptocurrencyCCS’17, October 30-November 3, 2017, Dallas, TX, USA2353.2 Learning Information by modifying the
CRS
If a possibly malicious Verifier is allowed to set the CRS (as in
the “Pay to Sudoku” (PtS) code [18]), then there are a variety of
attacks that can be attempted to learn information about the Sudoku
solution during the offline phase of the ZKCP (and therefore before
the payment phase is completed).
Changing the Circuit This is the easiest attack to consider. Recall
that the CRS of a QAP-based SNARK consists of an encoding of
a QAP encoding of the function f that verifies the NP witness
held by the prover. A malicious verifier could just replace the CRS
with the QAP encoding of a modified function ˜f whose output
directly leaks the needed information. In other words, the sets of
polynomials A, B, C and C, and the polynomial Z would be modified
to ˜A, ˜B, ˜C, ˜Z. Nevertheless this trivial attack does not work in a
libsnark implementation of QAP-based SNARKs. The reason is
that the QAP-encoding of a function f is a deterministic process,
and in libsnark both prover and verifier compute the polynomials
A, B, C, Z on their own directly from a description of the function
f , and this leads to a straightforward detection of any change.
Learning one wire is sufficient We now point out that in the PtS
implementation, for every Sudoku cell, there are n wires w1, . . . , wn
in the circuit C used in the SNARK, such that wj = 1 if the cell is
set to j in the solution, while all the other wires related to that cell
are set to 0. Therefore learning the value of the wire wj will allow
us to learn if that particular cell is set to j or not. Recall from the
previous section that the value of the wires of C are the coefficients
ci used to compute the linear combinations so it is sufficient to
learn cj. Note also that cj can only assume a binary value. We now