## []{#getting-started-with-nftables_securing-networks.html#limiting-the-number-of-connections-using-nftables_assembly_using-nftables-to-limit-the-amount-of-connections}使用 nftables 限制连接数量 {.title}
:::
`nft`{.literal} 工具的 `ct count`{.literal}
参数可让管理员限制连接数量。这个步骤描述了如何限制进入的连接的基本示例。
::: itemizedlist
**先决条件**
-   `example_table`{.literal} 中的基 `example_chain`{.literal} 存在。
:::
::: orderedlist
**流程**
1.  添加一条规则，该规则只允许从 IPv4 地址同时连接到 SSH
    端口（22），并从同一 IP 拒绝所有后续连接：
    ``` literallayout
    # nft add rule ip example_table example_chain tcp dport ssh meter example_meter { ip saddr ct count over 2 } counter reject
    ```
2.  另外，还可以显示上一步中创建的 meter：
    ``` literallayout
    # nft list meter ip example_table example_meter
    table ip example_table {
      meter example_meter {
        type ipv4_addr
        size 65535
        elements = { 192.0.2.1 : ct count over 2 , 192.0.2.2 : ct count over 2  }
      }
    }
    ```
    `elements`{.literal}
    条目显示目前与该规则匹配的地址。在本例中，`elements`{.literal}
    列出了与 SSH 端口有活动连接的 IP
    地址。请注意，输出不会显示活跃连接的数量，或者连接是否被拒绝。
:::
:::
::: section
::: titlepage
## []{#getting-started-with-nftables_securing-networks.html#blocking-ip-addresses-that-attempt-more-than-ten-new-incoming-tcp-connections-within-one-minute_assembly_using-nftables-to-limit-the-amount-of-connections}在一分钟内尝试超过十个进入的 TCP 连接的 IP 地址 {.title}
:::
`nftables`{.literal}
框架可让管理员动态更新集合。本节解释了如何使用这个功能临时阻止在一分钟内建立十个
IPv4 TCP 连接的主机。五分钟后，`nftables`{.literal}
会自动从拒绝列表中删除 IP 地址。
::: orderedlist
**流程**
1.  使用 `ip`{.literal} 地址系列创建 `filter`{.literal} 表：
    ``` literallayout
    # nft add table ip filter
    ```
2.  在 `filter`{.literal} 表中添加 `input`{.literal} 链：
    ``` literallayout
    # nft add chain ip filter input { type filter hook input priority 0 \; }
    ```
3.  在 `filter`{.literal} 表中添加名为 `denylist`{.literal} 的集合：
    ``` literallayout
    # nft add set ip filter denylist { type ipv4_addr \; flags dynamic, timeout \; timeout 5m \; }
    ```
    这个命令为 IPv4 地址创建动态设置。`timeout 5m`{.literal} 参数定义了
    `nftables`{.literal} 在 5 分钟后自动删除集合中的条目。
4.  添加一条规则，该规则会将在一分钟内试图建立十多个新 TCP
    连接的主机的源 IP 地址添加到 `denylist`{.literal} 集合中：
    ``` literallayout
    # nft add rule ip filter input ip protocol tcp ct state new, untracked limit rate over 10/minute add @denylist { ip saddr }
    ```
5.  添加一条规则，其丢弃来自 `denylist`{.literal} 集合中的 IP
    地址的所有连接：
    ``` literallayout
    # nft add rule ip filter input ip saddr @denylist drop
    ```
:::
::: itemizedlist
**其它资源**
-   [在 nftables
    中使用命名集](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_networking/getting-started-with-nftables_configuring-and-managing-networking#using-named-sets-in-nftables_using-sets-in-nftables-commands){.link}
:::
:::
:::
::: section
::: titlepage
# []{#getting-started-with-nftables_securing-networks.html#debugging-nftables-rules_getting-started-with-nftables}调试 nftables 规则 {.title}
:::
`nftables`{.literal}
框架为管理员提供了不同的选项来调试规则，以及数据包是否匹配规则。本节描述了这些选项。
::: section
::: titlepage
## []{#getting-started-with-nftables_securing-networks.html#creating-a-rule-with-a-counter_debugging-nftables-rules}创建带有计数器的规则 {.title}
:::
在识别规则是否匹配时，可以使用计数器。本节描述了如何创建带有计数器的新规则。
::: itemizedlist
-   有关在现有规则中添加计数器的步骤的更多信息，请参阅
    `配置和管理网络`{.literal} 中的
    [在现有规则中添加计数器](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_networking/getting-started-with-nftables_configuring-and-managing-networking#adding-a-counter-to-an-existing-rule_debugging-nftables-rules){.link}
:::
::: itemizedlist
**先决条件**
-   您要添加该规则的链已存在。
:::
::: orderedlist
**流程**
1.  在链中添加带有 `counter`{.literal}
    参数的新规则。以下示例添加一个带有计数器的规则，它允许端口 22 上的
    TCP 流量，并计算与这个规则匹配的数据包和网络数据的数量：
    ``` literallayout
    # nft add rule inet example_table example_chain tcp dport 22 counter accept
    ```
2.  显示计数器值：
    ``` literallayout
    # nft list ruleset
    table inet example_table {
      chain example_chain {
        type filter hook input priority filter; policy accept;
        tcp dport ssh counter packets 6872 bytes 105448565 accept
      }
    }
    ```
:::
:::
::: section
::: titlepage
## []{#getting-started-with-nftables_securing-networks.html#adding-a-counter-to-an-existing-rule_debugging-nftables-rules}在现有规则中添加计数器 {.title}
:::
在识别规则是否匹配时，可以使用计数器。本节论述了如何在现有规则中添加计数器。
::: itemizedlist
-   有关添加带有计数器的新规则的步骤的更多信息，请参阅
    `配置和管理网络`{.literal} 中的
    [创建带有计数器的规则](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_networking/getting-started-with-nftables_configuring-and-managing-networking#creating-a-rule-with-a-counter_debugging-nftables-rules){.link}
:::
::: itemizedlist
**先决条件**
-   您要添加计数器的规则已存在。
:::
::: orderedlist
**流程**
1.  在链中显示规则及其句柄：
    ``` literallayout
    # nft --handle list chain inet example_table example_chain
    table inet example_table {
      chain example_chain { # handle 1
        type filter hook input priority filter; policy accept;
        tcp dport ssh accept # handle 4
      }
    }
    ```
2.  通过将规则替换为 `counter`{.literal}
    参数来添加计数器。以下示例替换了上一步中显示的规则并添加计数器：
    ``` literallayout
    # nft replace rule inet example_table example_chain handle 4 tcp dport 22 counter accept
    ```
3.  显示计数器值：
    ``` literallayout
    # nft list ruleset
    table inet example_table {
      chain example_chain {
        type filter hook input priority filter; policy accept;
        tcp dport ssh counter packets 6872 bytes 105448565 accept
      }
    }
    ```
:::
:::
::: section
::: titlepage
## []{#getting-started-with-nftables_securing-networks.html#monitoring-packets-that-match-an-existing-rule_debugging-nftables-rules}监控与现有规则匹配的数据包 {.title}
:::
`nftables`{.literal} 中的追踪功能与 `nft monitor`{.literal}
命令相结合，可让管理员显示与规则匹配的数据包。该流程描述了如何为规则启用追踪以及与本规则匹配的监控数据包。
::: itemizedlist
**先决条件**
-   您要添加计数器的规则已存在。
:::
::: orderedlist
**流程**
1.  在链中显示规则及其句柄：
    ``` literallayout
    # nft --handle list chain inet example_table example_chain
    table inet example_table {
      chain example_chain { # handle 1
        type filter hook input priority filter; policy accept;
        tcp dport ssh accept # handle 4
      }
    }
    ```
2.  通过将规则替换为 `meta nftrace set 1`{.literal}
    参数来添加追踪功能。以下示例替换了上一步中显示的规则并启用追踪：
    ``` literallayout
    # nft replace rule inet example_table example_chain handle 4 tcp dport 22 meta nftrace set 1 accept
    ```
3.  使用 `nft monitor`{.literal}
    命令来显示追踪。以下示例过滤命令的输出，来显示只包含
    `inet example_table example_chain`{.literal} 的条目：
    ``` literallayout
    # nft monitor | grep "inet example_table example_chain"
    trace id 3c5eb15e inet example_table example_chain packet: iif "enp1s0" ether saddr 52:54:00:17:ff:e4 ether daddr 52:54:00:72:2f:6e ip saddr 192.0.2.1 ip daddr 192.0.2.2 ip dscp cs0 ip ecn not-ect ip ttl 64 ip id 49710 ip protocol tcp ip length 60 tcp sport 56728 tcp dport ssh tcp flags == syn tcp window 64240
    trace id 3c5eb15e inet example_table example_chain rule tcp dport ssh nftrace set 1 accept (verdict accept)
    ...
    ```
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    根据启用追踪的规则的数量以及匹配的流量数量，`nft monitor`{.literal}
    命令可能产生大量的输出。使用 `grep`{.literal} 或其他工具来过滤输出。
    :::
:::
:::
:::
::: section
::: titlepage
# []{#getting-started-with-nftables_securing-networks.html#backing-up-and-restoring-the-nftables-rule-set_getting-started-with-nftables}备份和恢复 nftables 规则集 {.title}
:::
本节描述了如何将 `nftables`{.literal}
规则备份到文件，以及如何从文件中恢复规则。
管理员可以使用具有规则的文件将规则传送到不同的服务器。
::: section
::: titlepage
## []{#getting-started-with-nftables_securing-networks.html#backing-up-the-nftables-rule-set-to-a-file_backing-up-and-restoring-the-nftables-rule-set}将 nftables 规则集备份到文件 {.title}
:::
本节描述了如何将 `nftables`{.literal} 规则集备份到文件。
::: itemizedlist
**流程**
-   备份 `nftables`{.literal} 规则：
    ::: itemizedlist
    -   `nft list ruleset`{.literal} 格式：
        ``` literallayout
        # nft list ruleset > file.nft
        ```
    -   JSON 格式：
        ``` literallayout
        # nft -j list ruleset > file.json
        ```
    :::
:::
:::
::: section
::: titlepage
## []{#getting-started-with-nftables_securing-networks.html#restoring-the-nftables-rule-set-from-a-file_backing-up-and-restoring-the-nftables-rule-set}从文件中恢复 nftables 规则集 {.title}
:::
本节描述了如何恢复 `nftables`{.literal} 规则集。
::: itemizedlist
**流程**
-   恢复 `nftables`{.literal} 规则：
    ::: itemizedlist
    -   如果要恢复的文件为 `nft list ruleset`{.literal} 格式，或者包含
        `nft`{.literal} 命令：
        ``` literallayout
        # nft -f file.nft
        ```
    -   如果要恢复的文件采用 JSON 格式：
        ``` literallayout
        # nft -j -f file.json
        ```
    :::
:::
:::
:::
::: section
::: titlepage
# []{#getting-started-with-nftables_securing-networks.html#_additional_resources_6}其它资源 {.title}
:::
::: itemizedlist
-   [在 Red Hat Enterprise Linux 8 中使用
    nftables](https://www.redhat.com/en/blog/using-nftables-red-hat-enterprise-linux-8){.link}
-   [iptables
    之后是什么？当然，它的继任者是：nftables](https://developers.redhat.com/blog/2016/10/28/what-comes-after-iptables-its-successor-of-course-nftables/){.link}
-   [Firewalld：未来是
    nftables](https://developers.redhat.com/blog/2018/08/10/firewalld-the-future-is-nftables/){.link}
:::
:::
:::