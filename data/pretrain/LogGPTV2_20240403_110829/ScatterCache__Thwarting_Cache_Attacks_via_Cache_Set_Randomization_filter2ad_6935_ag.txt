%
[
∆
e
t
a
R
t
i
H
)
r
e
t
t
e
b
s
i
r
e
h
g
i
h
(
0
gsm
dijkstra
adpcm
FFT
blowﬁsh
CRC32
bitcount
basicmath
jpeg
lame
sha
mean
qsort
typeset
susan
rijndael
patricia
stringsearch
tiff2rgba
mad
tiff2bw
tiffdither
tiffmedian
Figure 15: Cache hit rate, simulated with gem5, for MiBench
in large conﬁguration compared to random replacement.
BIP
LRU
SCv1
SCv2
]
%
[
∆
e
t
a
R
t
i
H
)
r
e
t
t
e
b
s
i
r
e
h
g
i
h
(
2
0
−2
−4
deepsjeng
exchange2
imagick
bwaves
cactuBSSN
fotonik3d
lbm
leela mcf
omnetpp
perlbench
nab
pop2
mean
roms
xalancbmk xz
x264
Figure 16: Average cache hit rate for SPEC CPU 2017 bench-
marks compared to random replacement over 10 runs.
SCATTERCACHE variants. The number of ways per set, total
cache size, number of slices, and cache line size are fully con-
ﬁgurable. Additionally, the simulator supports multiple levels
of inclusive caches, as well as a cache that is split for data
and instructions. All simulations were run on an inclusive two
level cache, where the L1 was separated into instruction and
data caches, both of which use LRU replacement. Figure 16
shows results for the cache conﬁguration, as described in Sec-
tion 5.1, as the difference in percentage points for last-level
hit rates when compared to random replacement. While we
can see large differences in individual tests, the mean shows
that both versions of SCATTERCACHE perform at least as
well as random replacement and very similar to LRU. Us-
ing the same cache conﬁguration but with 64 B cache lines,
we actually observe a mean advantage of 0.23± 0.76 pp of
SCATTERCACHE over random replacement, where LRU sees
a marginally worse result of −0.21 ± 1.02 pp. On a larger
conﬁguration with 64 B cache lines, 32 kB 8-way L1 and
2 MB 16-way LLC, the results show a slim improvement of
0.035± 0.10 pp for SCATTERCACHE and 0.37± 1.14 pp for
LRU over random replacement.
690    28th USENIX Security Symposium
USENIX Association
6 Conclusion
In this paper, we presented SCATTERCACHE, a novel cache
design to eliminate cache attacks that eliminates ﬁxed cache-
set congruences and, thus, makes eviction-based cache at-
tacks unpractical. We showed how skewed associative caches
when retroﬁtted with a keyed mapping function increase the
attack complexity so far that it exceeds practical scenarios
Furthermore, high-frequency attacks become infeasible. Our
evaluations show that the runtime performance of software
is not curtailed and SCATTERCACHE can even outperform
state-of-the-art caches for certain realistic workloads.
Acknowledgments
We want to thank the anonymous reviewers and especially
our shepherd, Yossi Oren, for their comments and suggestions
that substantially helped in improving the paper. This project
has received funding from the European Research Council
(ERC) under Horizon 2020 grant agreement No 681402. Ad-
ditional funding was provided by a generous gift from Intel.
Any opinions, ﬁndings, and conclusions or recommendations
expressed in this paper are those of the authors and do not
necessarily reﬂect the views of the funding parties.
References
[1] 7-cpu. ARM Cortex-A57. www.7-cpu.com/cpu/Cortex-A57.html.
[2] 7-cpu. Intel Skylake. www.7-cpu.com/cpu/Skylake.html.
[3] O. Aciiçmez, B. B. Brumley, and P. Grabher. New Results on Instruc-
tion Cache Attacks. In CHES, 2010.
[4] G. I. Apecechea, T. Eisenbarth, and B. Sunar. S$A: A Shared Cache
Attack That Works across Cores and Deﬁes VM Sandboxing - and Its
Application to AES. In S&P, 2015.
[5] G. I. Apecechea, M. S. Inci, T. Eisenbarth, and B. Sunar. Wait a Minute!
A fast, Cross-VM Attack on AES. In RAID, 2014.
[6] G. I. Apecechea, M. S. Inci, T. Eisenbarth, and B. Sunar. Lucky 13
Strikes Back. In CCS, 2015.
[7] V. Arribas, B. Bilgin, G. Petrides, S. Nikova, and V. Rijmen. Rhythmic
Keccak: SCA Security and Low Latency in HW. IACR Trans. Cryptogr.
Hardw. Embed. Syst., 2018.
[8] R. Avanzi. The QARMA Block Cipher Family. Almost MDS Matrices
Over Rings With Zero Divisors, Nearly Symmetric Even-Mansour Con-
structions With Non-Involutory Central Rounds, and Search Heuristics
for Low-Latency S-Boxes. IACR Trans. Symmetric Cryptol., 2017.
[9] S. Beamer, K. Asanovic, and D. A. Patterson. The GAP Benchmark
Suite. arXiv abs/1508.03619, 2015.
[10] D. J. Bernstein. Cache-Timing Attacks on AES. Technical report,
University of Illinois at Chicago, 2005.
[11] G. Bertoni, J. Daemen, M. Peeters, G. V. Assche, and R. V. Keer. Kec-
cak implementation overview, 2012.
[12] N. L. Binkert, B. M. Beckmann, G. Black, S. K. Reinhardt, A. G.
Saidi, A. Basu, J. Hestness, D. Hower, T. Krishna, S. Sardashti, R. Sen,
K. Sewell, M. S. B. Altaf, N. Vaish, M. D. Hill, and D. A. Wood. The
gem5 simulator. SIGARCH Comp. Arch. News, 39, 2011.
[13] J. Borghoff, A. Canteaut, T. Güneysu, E. B. Kavun, M. Knezevic, L. R.
Knudsen, G. Leander, V. Nikov, C. Paar, C. Rechberger, P. Rombouts,
S. S. Thomsen, and T. Yalçin. PRINCE - A Low-Latency Block Ci-
pher for Pervasive Computing Applications - Extended Abstract. In
ASIACRYPT, 2012.
[14] B. B. Brumley and R. M. Hakala. Cache-Timing Template Attacks. In
ASIACRYPT, 2009.
[15] J. V. Bulck, M. Minkin, O. Weisse, D. Genkin, B. Kasikci, F. Piessens,
M. Silberstein, T. F. Wenisch, Y. Yarom, and R. Strackx. Foreshadow:
Extracting the Keys to the Intel SGX Kingdom with Transient Out-of-
Order Execution. In USENIX Security, 2018.
[16] C. Celio, P. Chiu, K. Asanovic, B. Nikolic, and D. A. Patterson.
BROOM: An Open-Source Out-of-Order Processor With Resilient
Low-Voltage Operation in 28-nm CMOS. MICRO, 39, 2019.
[17] B. Coppens, I. Verbauwhede, K. D. Bosschere, and B. D. Sutter. Prac-
tical Mitigations for Timing-Based Side-Channel Attacks on Modern
x86 Processors. In S&P, 2009.
[18] S. Deng, W. Xiong, and J. Szefer. Analysis of Secure Caches and
Timing-Based Side-Channel Attacks. ePrint 2019/167.
[19] G. Doychev, D. Feld, B. Köpf, L. Mauborgne, and J. Reineke. CacheAu-
dit: A Tool for the Static Analysis of Cache Side Channels. In USENIX
Security, 2013.
[20] G. Doychev and B. Köpf. Rigorous analysis of software countermea-
sures against cache attacks. In PLDI, 2017.
[21] Europractice.
europractice-ic.com/libraries_TSMC.php.
TSMC Standard cell
libraries.
http://www.
[22] M. Gallagher, L. Biernacki, S. Chen, Z. B. Aweke, S. F. Yitbarek, M. T.
Aga, A. Harris, Z. Xu, B. Kasikci, V. Bertacco, S. Malik, M. Tiwari,
and T. M. Austin. Morpheus: A Vulnerability-Tolerant Secure Archi-
tecture Based on Ensembles of Moving Target Defenses with Churn.
In ASPLOS, 2019.
[23] B. Gras, K. Razavi, E. Bosman, H. Bos, and C. Giuffrida. ASLR on
the Line: Practical Cache Attacks on the MMU. In NDSS, 2017.
[24] D. Gruss, M. Lipp, M. Schwarz, D. Genkin, J. Jufﬁnger, S. O’Connell,
W. Schoechl, and Y. Yarom. Another Flip in the Wall of Rowhammer
Defenses. In S&P, 2018.
[25] D. Gruss, C. Maurice, A. Fogh, M. Lipp, and S. Mangard. Prefetch
Side-Channel Attacks: Bypassing SMAP and Kernel ASLR. In CCS,
2016.
[26] D. Gruss, C. Maurice, K. Wagner, and S. Mangard. Flush+Flush: A
Fast and Stealthy Cache Attack. In DIMVA, 2016.
[27] D. Gruss, R. Spreitzer, and S. Mangard. Cache Template Attacks:
In USENIX
Automating Attacks on Inclusive Last-Level Caches.
Security, 2015.
[28] D. Gullasch, E. Bangerter, and S. Krenn. Cache Games - Bringing
Access-Based Cache Attacks on AES to Practice. In S&P, 2011.
[29] B. Gülmezoglu, M. S. Inci, G. I. Apecechea, T. Eisenbarth, and B. Sunar.
A Faster and More Realistic Flush+Reload Attack on AES. In COSADE,
2015.
[30] M. R. Guthaus, J. S. Ringenberg, D. Ernst, T. M. Austin, T. Mudge, and
R. B. Brown. MiBench: A free, commercially representative embedded
benchmark suite. In WWC, 2001.
[31] R. Hund, C. Willems, and T. Holz. Practical Timing Side Channel
Attacks against Kernel Space ASLR. In S&P, 2013.
[32] M. S. Inci, B. Gülmezoglu, G. Irazoqui, T. Eisenbarth, and B. Sunar.
Cache Attacks Enable Bulk Key Recovery on the Cloud. In CHES,
2016.
[33] Intel Corporation.
Pin - A Dynamic Binary Instrumenta-
https://software.intel.com/en-us/articles/
tion Tool.
pin-a-dynamic-binary-instrumentation-tool.
USENIX Association
28th USENIX Security Symposium    691
[34] G. Irazoqui, K. Cong, X. Guo, H. Khattri, A. K. Kanuparthi, T. Eisen-
barth, and B. Sunar. Did we learn from LLC Side Channel At-
tacks? A Cache Leakage Detection Tool for Crypto Libraries. arXiv
abs/1709.01552, 2017.
[35] G. Irazoqui, T. Eisenbarth, and B. Sunar. Cross Processor Cache At-
tacks. In CCS, 2016.
[59] T. Ristenpart, E. Tromer, H. Shacham, and S. Savage. Hey, you, get
off of my cloud: exploring information leakage in third-party compute
clouds. In CCS, 2009.
[60] M. Schwarz, M. Lipp, D. Gruss, S. Weiser, C. Maurice, R. Spreitzer,
and S. Mangard. KeyDrown: Eliminating Software-Based Keystroke
Timing Side-Channel Attacks. In NDSS, 2018.
[36] Y. Jang, S. Lee, and T. Kim. Breaking Kernel Address Space Layout
Randomization with Intel TSX. In CCS, 2016.
[61] M. Schwarz, M. Schwarzl, M. Lipp, and D. Gruss. NetSpectre: Read
Arbitrary Memory over Network. arXiv abs/1807.10535, 2018.
[37] E. Käsper and P. Schwabe. Faster and Timing-Attack Resistant AES-
GCM. In CHES, 2009.
[38] P. Kocher, J. Horn, A. Fogh, D. Genkin, D. Gruss, W. Haas, M. Ham-
burg, M. Lipp, S. Mangard, T. Prescher, M. Schwarz, and Y. Yarom.
Spectre Attacks: Exploiting Speculative Execution. In S&P, 2019.
[62] M. Schwarz, S. Weiser, D. Gruss, C. Maurice, and S. Mangard. Malware
Guard Extension: Using SGX to Conceal Cache Attacks. In DIMVA,
2017.
[63] A. Seznec. A Case for Two-Way Skewed-Associative Caches. In ISCA,
1993.
[39] P. C. Kocher. Timing Attacks on Implementations of Difﬁe-Hellman,
RSA, DSS, and Other Systems. In CRYPTO, 1996.
[64] M. Spjuth, M. Karlsson, and E. Hagersten. Skewed caches from a
low-power perspective. In Computing Frontiers – CF, 2005.
[40] R. Könighofer. A Fast and Cache-Timing Resistant Implementation of
the AES. In CT-RSA, 2008.
[41] B. Köpf, L. Mauborgne, and M. Ochoa. Automatic Quantiﬁcation of
Cache Side-Channels. In CAV, 2012.
[42] M. Lipp, D. Gruss, R. Spreitzer, C. Maurice, and S. Mangard. AR-
Mageddon: Cache Attacks on Mobile Devices. In USENIX Security,
2016.
[43] M. Lipp, M. Schwarz, D. Gruss, T. Prescher, W. Haas, A. Fogh, J. Horn,
S. Mangard, P. Kocher, D. Genkin, Y. Yarom, and M. Hamburg. Melt-
down: Reading Kernel Memory from User Space. In USENIX Security,
2018.
[44] F. Liu, Y. Yarom, Q. Ge, G. Heiser, and R. B. Lee. Last-Level Cache
Side-Channel Attacks are Practical. In S&P, 2015.
[45] H. Mantel, A. Weber, and B. Köpf. A Systematic Study of Cache Side
Channels Across AES Implementations. In ESSoS, 2017.
[46] C. Maurice, C. Neumann, O. Heen, and A. Francillon. C5: Cross-Cores
Cache Covert Channel. In DIMVA, 2015.
[47] C. Maurice, N. L. Scouarnec, C. Neumann, O. Heen, and A. Francil-
lon. Reverse Engineering Intel Last-Level Cache Complex Addressing
Using Performance Counters. In RAID, 2015.
[48] C. Maurice, M. Weber, M. Schwarz, L. Giner, D. Gruss, C. A. Boano,
S. Mangard, and K. Römer. Hello from the Other Side: SSH over
Robust Cache Covert Channels in the Cloud. In NDSS, 2017.
[49] L. W. McVoy and C. Staelin. lmbench: Portable tools for performance
analysis. In USENIX Annual Technical Conference, 1996.
[50] Y. Oren, V. P. Kemerlis, S. Sethumadhavan, and A. D. Keromytis. The
Spy in the Sandbox: Practical Cache Attacks in JavaScript and their
Implications. In CCS, 2015.
[51] D. A. Osvik, A. Shamir, and E. Tromer. Cache Attacks and Counter-
measures: The Case of AES. In CT-RSA, 2006.
[52] D. Page. Theoretical Use of Cache Memory as a Cryptanalytic Side-
Channel. ePrint 2002/169.
[53] D. Page. Partitioned Cache Architecture as a Side-Channel Defence
Mechanism. ePrint 2005/280.
[54] C. Percival. Cache missing for fun and proﬁt. In BSDCan, 2005.
[55] M. K. Qureshi. CEASER: Mitigating Conﬂict-Based Cache Attacks
via Encrypted-Address and Remapping. In MICRO, 2018.
[56] M. K. Qureshi, A. Jaleel, Y. N. Patt, S. C. S. Jr., and J. S. Emer. Adaptive
insertion policies for high performance caching. In ISCA, 2007.
[57] H. Raj, R. Nathuji, A. Singh, and P. England. Resource management
for isolation enhanced cloud services. In CCSW, 2009.
[58] C. Rebeiro, A. D. Selvakumar, and A. S. L. Devi. Bitslice Implementa-
tion of AES. In CANS, 2006.
[65] R. Spreitzer and T. Plos. Cache-Access Pattern Attack on Disaligned
AES T-Tables. In COSADE, 2013.
[66] Standard Performance Evaluation Corporation. SPEC CPU 2017.
https://www.spec.org/cpu2017/.
[67] D. Trilla, C. Hernández, J. Abella, and F. J. Cazorla. Cache side-channel
attacks and time-predictability in high-performance critical real-time
systems. In DAC, 2018.
[68] Y. Tsunoo, T. Saito, T. Suzaki, M. Shigeri, and H. Miyauchi. Crypt-
analysis of DES Implemented on Computers with Cache. In CHES,
2003.
[69] Z. Wang and R. B. Lee. New cache designs for thwarting software
cache-based side channel attacks. In ISCA, 2007.
[70] Z. Wang and R. B. Lee. A novel cache architecture with enhanced
performance and security. In MICRO, 2008.
[71] S. Weiser, A. Zankl, R. Spreitzer, K. Miller, S. Mangard, and G. Sigl.
DATA - Differential Address Trace Analysis: Finding Address-based
Side-Channels in Binaries. In USENIX Security, 2018.
[72] Z. Wu, Z. Xu, and H. Wang. Whispers in the Hyper-space: High-speed
Covert Channel Attacks in the Cloud. In USENIX Security, 2012.
[73] Z. Wu, Z. Xu, and H. Wang. Whispers in the Hyper-Space: High-
Bandwidth and Reliable Covert Channel Attacks Inside the Cloud.
IEEE/ACM Trans. Netw., 23, 2015.
[74] Y. Xiao, M. Li, S. Chen, and Y. Zhang. STACCO: Differentially Ana-
lyzing Side-Channel Traces for Detecting SSL/TLS Vulnerabilities in
Secure Enclaves. In CCS, 2017.
[75] Y. Xu, M. Bailey, F. Jahanian, K. R. Joshi, M. A. Hiltunen, and R. D.
Schlichting. An exploration of L2 cache covert channels in virtualized
environments. In CCSW, 2011.
[76] Y. Yarom and K. Falkner. FLUSH+RELOAD: A High Resolution, Low
Noise, L3 Cache Side-Channel Attack. In USENIX Security, 2014.
[77] A. Zankl, J. Heyszl, and G. Sigl. Automated Detection of Instruction
Cache Leaks in Modular Exponentiation Software. In CARDIS, 2016.
[78] X. Zhang, Y. Xiao, and Y. Zhang. Return-Oriented Flush-Reload Side
Channels on ARM and Their Implications for Android Devices. In
CCS, 2016.
[79] Y. Zhang, A. Juels, A. Oprea, and M. K. Reiter. HomeAlone: Co-
residency Detection in the Cloud via Side-Channel Analysis. In S&P,
2011.
[80] Y. Zhang, A. Juels, M. K. Reiter, and T. Ristenpart. Cross-VM side
channels and their use to extract private keys. In CCS, 2012.
[81] Y. Zhang, A. Juels, M. K. Reiter, and T. Ristenpart. Cross-Tenant
Side-Channel Attacks in PaaS Clouds. In CCS, 2014.
692    28th USENIX Security Symposium
USENIX Association