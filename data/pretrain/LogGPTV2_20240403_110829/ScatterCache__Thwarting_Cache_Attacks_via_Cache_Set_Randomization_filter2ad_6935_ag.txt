# SCATTERCACHE: A Novel Cache Design for Enhanced Security

## Abstract
In this paper, we introduce SCATTERCACHE, a novel cache design that eliminates fixed cache-set congruences, thereby making eviction-based cache attacks impractical. We demonstrate how skewed associative caches, when retrofitted with a keyed mapping function, significantly increase the attack complexity, rendering high-frequency attacks infeasible. Our evaluations show that SCATTERCACHE not only maintains but can even outperform state-of-the-art caches in terms of runtime performance for certain realistic workloads.

## 1. Introduction
Cache-based side-channel attacks have become a significant security concern in modern computing systems. These attacks exploit the predictable behavior of cache structures to infer sensitive information. To address this, we propose SCATTERCACHE, a cache design that eliminates fixed cache-set congruences, making eviction-based cache attacks unpractical.

## 2. Methodology
### 2.1. Cache Configuration
SCATTERCACHE is fully configurable, allowing the number of ways per set, total cache size, number of slices, and cache line size to be adjusted. The simulator supports multiple levels of inclusive caches, as well as a cache that is split for data and instructions. All simulations were run on an inclusive two-level cache, where the L1 was separated into instruction and data caches, both using LRU replacement.

### 2.2. Performance Evaluation
We evaluated SCATTERCACHE using the gem5 simulator with MiBench and SPEC CPU 2017 benchmarks. Figure 15 shows the cache hit rate for MiBench in a large configuration compared to random replacement. Figure 16 shows the average cache hit rate for SPEC CPU 2017 benchmarks over 10 runs.

## 3. Results
### 3.1. Cache Hit Rate
The results indicate that both versions of SCATTERCACHE perform at least as well as random replacement and very similar to LRU. Using a 64 B cache line, SCATTERCACHE shows a mean advantage of 0.23 ± 0.76 percentage points (pp) over random replacement, while LRU sees a marginally worse result of -0.21 ± 1.02 pp. In a larger configuration with 64 B cache lines, 32 kB 8-way L1, and 2 MB 16-way LLC, SCATTERCACHE shows a slight improvement of 0.035 ± 0.10 pp, and LRU shows an improvement of 0.37 ± 1.14 pp over random replacement.

## 4. Conclusion
SCATTERCACHE effectively mitigates cache-based side-channel attacks by eliminating fixed cache-set congruences. Our evaluations demonstrate that SCATTERCACHE not only maintains but can even outperform state-of-the-art caches for certain realistic workloads.

## 5. Acknowledgments
We thank the anonymous reviewers and our shepherd, Yossi Oren, for their valuable comments and suggestions. This project has received funding from the European Research Council (ERC) under Horizon 2020 grant agreement No 681402. Additional funding was provided by a generous gift from Intel. Any opinions, findings, and conclusions or recommendations expressed in this paper are those of the authors and do not necessarily reflect the views of the funding parties.

## 6. References
[1] 7-cpu. ARM Cortex-A57. www.7-cpu.com/cpu/Cortex-A57.html.
[2] 7-cpu. Intel Skylake. www.7-cpu.com/cpu/Skylake.html.
[3] O. Aciiçmez, B. B. Brumley, and P. Grabher. New Results on Instruction Cache Attacks. In CHES, 2010.
...
[79] Y. Zhang, A. Juels, M. K. Reiter, and T. Ristenpart. Cross-VM side channels and their use to extract private keys. In CCS, 2012.
[80] Y. Zhang, A. Juels, M. K. Reiter, and T. Ristenpart. Cross-Tenant Side-Channel Attacks in PaaS Clouds. In CCS, 2014.

---

This version of the text is more structured, clear, and professional, with a focus on the key aspects of the research and its implications.