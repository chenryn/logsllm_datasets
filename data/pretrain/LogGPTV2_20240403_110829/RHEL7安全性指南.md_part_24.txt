`unbound`{.systemitem} 。这两者在默认情况下都使用 DNSSEC ，并用 DNSSEC
root 密钥进行配置。在服务器上使用 DNSSEC ，两者都可正常工作。然而，
`unbound`{.systemitem}
更常用于移动设备，如笔记本电脑。因为它允许本机用户对 DNSSEC
覆写动态重配置，无论是使用 [**dnssec-trigger**]{.application}
时无线热点所需求的， 亦或是使用 [**Libreswan**]{.application} 时 VPNs
所需求的。 `unbound`{.systemitem} 守护进程进一步支持对列入
`etc/unbound/*.d/`{.filename}目录的 DNSSEC
异常状况进行部署，这对服务器和移动设备都有用。
:::
:::
::: section
::: titlepage
## [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#sec-Security_Guide-Understanding_Dnssec-trigger}4.6.3. 了解 Dnssec-trigger {.title}
:::
::: para
一旦 `unbound`{.systemitem} 完成安装，并在
`/etc/resolv.conf`{.filename}下进行配置，则所有来自应用程序的
`DNS`{.systemitem} 查询都会通过
`unbound`{.systemitem}进行处理。[**dnssec-trigger**]{.application}
只有在被触发时，才会对 `unbound`{.systemitem}
解析器进行重配置。这大多数运用于漫游的客户机，如笔记本电脑，这种可连接到不同
Wi-Fi 网络的机器。其过程如下：
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    通过
    `动态主机配置协议（DHCP，Dynamic host configuration protocol）`{.systemitem}
    获取新的 `DNS`{.systemitem} 服务器时，则
    [**NetworkManager**]{.application} ["[会触发]{.quote}"]{.quote}
    [**dnssec-trigger**]{.application} 。
    :::
-   ::: para
    随后，[**Dnssec-trigger**]{.application}
    会对服务器执行一系列测试，判断其是否完全支持 DNSSEC 。
    :::
-   ::: para
    如果支持，那么 [**dnssec-trigger**]{.application} 会重配置
    `unbound`{.systemitem} ，以用于作为所有查询转发程序的
    `DNS`{.systemitem} 服务器。
    :::
-   ::: para
    如果测试失败，则[**dnssec-trigger**]{.application} 将忽略新的
    `DNS`{.systemitem} 服务器，并尝试一些可行的退却方法。
    :::
-   ::: para
    如果它判定一个不受限制的 53
    端口（`用户数据报协议（UDP，User Datagram Protocol）`{.systemitem}
    以及
    `传输控制协议（TCP，Transmission Control Protocol）`{.systemitem}）可以使用，则它将告知
    `unbound`{.systemitem} 可成为全递归 `DNS`{.systemitem}
    服务器，无需使用任何转发程序。
    :::
-   ::: para
    如果无法完成操作，如因 53
    端口被防火墙阻拦，此防火墙会阻挡除连接网络的 `DNS`{.systemitem}
    服务器之外的所有程序，则它将会尝试通过使用 `DNS`{.systemitem} 到 80
    端口，亦或通过使用 `DNS`{.systemitem} 封装的
    `安全传输层协议（TLS，Transport Layer Protocol）`{.systemitem} 到
    443 端口。在 80 端口和 443 端口运行 `DNS`{.systemitem} 的服务器可在
    `/etc/dnssec-trigger/dnssec-trigger.conf`{.filename}下进行配置。注释的范例可在默认配置文件中找到。
    :::
-   ::: para
    如果这些退却方法也失败了，则 [**dnssec-trigger**]{.application}
    将提供一种不安全的操作，这将完全忽略 DNSSEC ；亦或它将在
    ["[缓存专用]{.quote}"]{.quote} （cache
    only）模式下运行，此模式下它将不会尝试新的 `DNS`{.systemitem}
    查询，但将会应答所有已在缓存器中的数据。
    :::
:::
:::
::: para
无线热点更是常常在授予访问网络权限之前，重定向用户到登录页面。在探测上述编列期间，如果探测到重定向命令，则会提示用户，以询问是否通过要求登录来获取网络访问权限。`dnssec-trigger`{.systemitem}
守护进程将继续对 DNSSEC 解析器每十秒进行探测。关于使用
[**dnssec-trigger**]{.application} 图形化工具的更多信息，请参阅
[第 4.6.8 节 "使用
Dnssec-trigger"](#chap-Hardening_Your_System_with_Tools_and_Services.html#sec-Security_Guide-Using_Dnssec-trigger){.xref}。
:::
:::
::: section
::: titlepage
## [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#sec-VPN_Supplied_Domains_and_Name_Servers}4.6.4. 提供域和域名服务器的 VPN {.title}
:::
::: para
VPN 一些连接类型可传输域和一系列域名服务器， 可用于作为 VPN
隧道安装部分的域。在 [**红帽企业版 Linux**]{.application} 中，这是由
[**NetworkManager**]{.application} 所支持的。这就是说，
`unbound`{.systemitem}、 [**dnssec-trigger**]{.application} 和
[**NetworkManager**]{.application} 的结合产物能够完全支持 VPN
软件所提供的域和域名服务器。一旦 VPN
隧道完成，就可以清除关于所有接收域名的登录在本机的
`unbound`{.systemitem} 缓存，从而通过 VPN
获取的内部域名服务器中提取最新对域名名称的查询。终止 VPN
隧道时，则会再次清除 `unbound`{.systemitem}
缓存，以确保任何对域的查询会返回给公用 IP 地址，而不会返回到原先获取的
IP 地址。请参阅〈 [第 4.6.11 节 "对连接所提供的域进行 DNSSEC
验证配置"](#chap-Hardening_Your_System_with_Tools_and_Services.html#sec-Configuring_DNSSEC_Validation_for_Connection_Supplied_Domains){.xref}
〉。
:::
:::
::: section
::: titlepage
## [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#sec-Recommended_Naming_Practices}4.6.5. 建议的命名惯例 {.title}
:::
::: para
Red Hat 建议，静态域名和动态域名都要与用于 `DNS`{.systemitem} 机器的"
*完全合格域名*
"（``{=html}FQDN，fully-qualified domain
name``{=html}）相匹配，如 `host.example.com`{.systemitem}。
:::
::: para
互联网名称与数字地址分配机构（ICANN，The Internet Corporation for
Assigned Names and Numbers）有时会将原先未注册的顶级域名（TLD，
Top-Level Domain ）（如
`.yourcompany`{.systemitem}）添加到公共注册平台。因此，Red Hat
强烈建议，请勿使用不代表自己的域名，即使在专用网络。因为这可能导致同一域名根据网络配置进行不同的解析。结果，可能导致无法使用网络资源。使用一个不代表自己的域名也使
DNSSEC 的部署和维持更加困难，因为域名冲突需要手动配置才能启用 DNSSEC
验证。关于此问题的更多信息，请参阅〈 [ICANN 域名冲突的常见问题（ICANN
FAQ on domain name
collision）](http://www.icann.org/en/help/name-collision/faqs) 〉。
:::
:::
::: section
::: titlepage
## [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#sec-Security_Guide-Understanding_trust_anchors}4.6.6. 了解信任锚（Trust Anchor） {.title}
:::
::: para
信任锚由 `DNS`{.systemitem}
域名以及此域名相关的公用密钥（或公用密钥的散列值）组成。其表述为一个基本的
64 比特加密密钥。其类似于一种信息交换方式的证书，含有公用密钥，可用于对
`DNS`{.systemitem}
记录进行核实和身份验证。关于信任锚更加完整的定义，请参阅〈 [RFC
4033](http://tools.ietf.org/html/rfc4033#page-6) 〉。
:::
:::
::: section
::: titlepage
## [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#sec-Security_Guide-Installing_DNSSEC}4.6.7. 安装 DNSSEC {.title}
:::
::: section
::: titlepage
### [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#sec-Security_Guide-Installing_unbound}4.6.7.1. 安装 unbound {.title}
:::
::: para
要通过在本机上使用 DNSSEC 对 `DNS`{.systemitem} 进行验证，则必须安装
`DNS`{.systemitem} 解析器 `unbound`{.systemitem} （或
`bind`{.systemitem} ）。移动设备上只需安装
[**dnssec-trigger**]{.application}
。对于服务器而言，安装`unbound`{.systemitem}
就应当足够了，尽管根据服务器所在地（局域网（LAN，local area network） 或
Internet），可能会要求对本地域进行转发配置。
[**dnssec-trigger**]{.application} 当下只在全球公共 DNS
区域提供帮助。[**NetworkManager**]{.application}，[**dhclient**]{.application}，
以及 VPN 应用程序通常可以自动收集域列表（和域名服务器列表），但
[**dnssec-trigger**]{.application} 和 [**unbound**]{.application}
却不行。
:::
::: para
要安装 `unbound`{.systemitem} ，则须作为 `root`{.systemitem}
用户允许以下命令：
``` screen
~]# yum install unbound
```
:::
:::
::: section
::: titlepage
### [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#sec-Security_Guide-Checking_if_unbound_is_running}4.6.7.2. 检查 unbound 是否在运行 {.title}
:::
::: para
要判定 `unbound`{.systemitem} 守护进程是否在运行，则须输入以下命令：
``` screen
~]$ systemctl status unbound
 unbound.service - Unbound recursive Domain Name Server
	  Loaded: loaded (/usr/lib/systemd/system/unbound.service; disabled)
	  Active: active (running) since Wed 2013-03-13 01:19:30 CET; 6h ago
```
:::
::: para
`systemctl status`{.command} 命令将会报告 `unbound`{.systemitem}
`Active: inactive (dead)`{.computeroutput} ，若 `unbound`{.systemitem}
服务未在运行。
:::
:::
::: section
::: titlepage
### [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#sec-Security_Guide-Starting_unbound}4.6.7.3. 启动 unbound {.title}
:::
::: para
要启动 `unbound`{.systemitem} 守护进程用于当前会话，则须作为
`root`{.systemitem} 用户运行以下命令：
``` screen
~]# systemctl start unbound
```
:::
::: para
运行 `systemctl enable`{.command} 命令，以确保每次启动系统时，
`unbound`{.systemitem} 开始运行：
``` screen
~]# systemctl enable unbound
```
:::
::: para
`unbound`{.systemitem}
守护进程允许使用以下目录对本地数据或覆写进行配置：
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    `/etc/unbound/conf.d`{.filename}
    用于为特定的域名添加配置。这用于重定向域名查询到特定的
    `DNS`{.systemitem} 服务器。这通常用于只存在于企业广域网（WAN，wide
    area network）的子域。
    :::
-   ::: para
    `/etc/unbound/keys.d`{.filename}
    目录用于为特定的域名添加信任锚。这在 DNSSEC
    对内部专用域名进行签名时才需要，但并没有公用现有的 DS
    记录来建立信任途径。另一种使用情况是，当对内部域进行签名时，使用不同的
    DNSKEY ，而不是使用企业广域网之外可行的公用域名。
    :::
-   ::: para
    `/etc/unbound/local.d`{.filename} 目录用于添加特定的
    `DNS`{.systemitem}
    数据作为本地覆写。者可用于建立黑名单，或创建手动覆写。这个日期将会通过
    `unbound`{.systemitem} 返回给客户端，但是不会被标记为有 DNSSEC
    签名。
    :::
:::
[**NetworkManager**]{.application} 和一些 VPN
软件可改变动态配置。这些配置目录含有注释范例。更多信息请参阅
`unbound.conf(5)`{.filename} 手册页。
:::
:::
::: section
::: titlepage
### [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#sec-Security_Guide-Installing_Dnssec-trigger}4.6.7.4. 安装 Dnssec-trigger {.title}
:::
::: para
[**dnssec-trigger**]{.application} 应用程序作为
`dnssec-triggerd`{.systemitem}守护进程来运行。要安装
[**dnssec-trigger**]{.application} ，则须作为 `root`{.systemitem}
用户运行以下命令：
``` screen
~]# yum install dnssec-trigger
```
:::
:::
::: section
::: titlepage
### [⁠]{#chap-Hardening_Your_System_with_Tools_and_Services.html#sec-Security_Guide-Checking_if_the_Dnssec-trigger_daemon_is_running}4.6.7.5. 检查 Dnssec-trigger 守护进程是否在运行 {.title}
:::
::: para
要判定 `dnssec-triggerd`{.systemitem} 是否在运行，则须输入以下命令：
``` screen
~]$ systemctl status dnssec-triggerd
systemctl status dnssec-triggerd.service