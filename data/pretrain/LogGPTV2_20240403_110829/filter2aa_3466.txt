Go默认编译会自带一堆信息，通过这些信息基本可以还原Go的源码架构，
本文就是研究如何消除或者混淆这些信息，记录了这个研究过程，如果不想看可以直接跳到文章末尾，
文章末尾提供了一款工具，可以一键消除Go二进制中的这些敏感信息。
但还是推荐看看研究过程，可以明白这个工具的运行原理。
从逆向Go开始
先写一个简单的程序
我的go版本是
编译
它运行后会如下输出
go version go1.16.2 windows/amd64
package main
import (
    "fmt"
    "log"
    "math/rand"
)
func main() {
    fmt.Println("hello world!")
    log.SetFlags(log.Lshortfile | log.LstdFlags)
    for i:=0;i= 33 && mod[len(mod)-17] == '\n' {
        // Strip module framing.
        mod = mod[16 : len(mod)-16]
    } else {
        mod = ""
    }
    return
}
// readString returns the string at address addr in the executable x.
func readString(x exe, ptrSize int, readPtr func([]byte) uint64, addr uint64) 
string {
    hdr, err := x.ReadData(addr, uint64(2*ptrSize))
    if err != nil || len(hdr)  0 {
        } else {
            continue
        }
        b, _ := f.Bytes(uint64(addr), uint64(0x20))
        if b == nil {
            continue
        }
        r := bytes.NewReader(b)
        ptr, err := readUIntTo64(r, f.FileInfo.ByteOrder, is32)
        if err != nil {
            // Probably not the right instruction, so go to next.
            continue
        }
        l, err := readUIntTo64(r, f.FileInfo.ByteOrder, is32)
        if err != nil {
            // Probably not the right instruction, so go to next.
            continue
        }
        ver := string(bstr)
        if !IsASCII(ver) {
            return "", nil
        }
        return ver, nil
    }
    return "", nil
}
此外还要注意一个版本问题。 go1.16 以上版本的GoRoot是这样解析， go1.16 以下可以直接定位到
runtime_GoRoot 函数，再使用上述方式解析即可。
我也向GoRe提交了这部分代码 
https://github.com/boy-hack/gore
https://github.com/goretk/gore/pull/42/files
Go-Strip
GoRe可以读取Go二进制的信息，反过来，把读取的文本修改成替换文本，不就达到了消除/混淆go编译
信息的目的吗。
基于此写了一个工具，可以一键混淆Go编译的二进制里的信息。
还是以最开始的Go代码为例
编译
使用程序消除信息
package main
import (
    "fmt"
    "log"
    "math/rand"
)
func main() {
    fmt.Println("hello world!")
    log.SetFlags(log.Lshortfile | log.LstdFlags)
    for i:=0;i<10;i++{
        log.Println(rand.Intn(100))
    }
    panic("11")
}
go build -ldflags "-s -w" main.go
运行新的程序
运行没有问题，之前含有的文件信息都用随机字符串填充了。
用之前的IDA脚本查看
函数名称也都填充了。
与其他工具的对比
知名的Go混淆工具有 gobfuscate 、 garble
像 gobfuscate ,核心思想是将源码以及源码引入的包转移到一个随机目录，然后基于AST语法树修改代
码信息，但这样效率有很大问题。之前测试过 deimos-C2 和 sliver 的生成混淆，生成一个简单的源码
需要半个多小时甚至更长时间，并且混淆的不彻底，像Go的一些内置包也并没有混淆。
像 garble 采取的混淆中间语言的方法，但是也有混淆不彻底和效率的问题。
相比之下 go-strip 混淆更彻底，效率快，支持多个平台架构，能比较方便的消除Go编译的信息。
程序下载
https://github.com/boy-hack/go-strip
参考
Go语言逆向初探
https://bbs.pediy.com/thread-268042.htm
Go二进制文件逆向分析从基础到进阶——综述 - 安全客，安全资讯平台 
https://www.anquanke.com/post/id/214940
https://github.com/goretk/gore
https://github.com/goretk/redress