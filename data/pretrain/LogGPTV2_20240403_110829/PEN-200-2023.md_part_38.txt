D
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 284
Made in Morocco
Penetration Testing with Kali Linux
10 SQL Injection Attacks
In this Learning Module, we will cover the following Learning Units:
• SQL Theory and Database Types
• Manual SQL Exploitation
• SQL Attack Automation
SQL injection (SQLi) is a major web application vulnerability class prevalent in many web
applications. It is currently ranked third among OWASP’s Top10448 Application Security Risks.
In general, SQLi vulnerabilities enable attackers to meddle with SQL queries exchanged between
the web application and database. SQL vulnerabilities typically alloyw the attacker to extend the
original application query to include database tables that would normally be inaccessible.
k
In this Module, we are going to demonstrate both SQL enumeration and database fingerprinting,
along with manual and automated exploitation of SQLi.
s
10.1 SQL Theory and Databases
o
This Learning Unit covers the following Learning Objectives:
• Refresh SQL theory fundamentals n
• Learn different DB types
i
• Understand different SQL syntax
z
10.1.1 SQL Theory Refresher
D
Structured Query Language (SQL) has been developed specifically to manage and interact with
data stored inside relational databases.449 SQL can be employed to query, insert, modify, or even
delete data and, in some cases, execute operating system commands. Since the SQL instance
offers so many administrative privileges, we’ll soon observe how arbitrary SQL queries can pose a
significant security risk.
Modern web applications are usually designed around a user-facing interface referred to as the
frontend, which is typically created using different code blocks written in HTML, CSS, and
JavaScript.
After the client interacts with the frontend, it sends data to the backend application layer that is
running on the server. A number of different frameworks can be used to construct a backend
application, written in various languages including PHP, Java, and Python.
Next, the backend code interacts with the data residing in the database in various ways, such as
retrieving the password associated with a given username.
448 (OWASP, 2022), https://owasp.org/www-project-top-ten/
449 (Wikipedia, 2022),https://en.wikipedia.org/wiki/Relational_database
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 285
Made in Morocco
Penetration Testing with Kali Linux
SQL syntax, commands, and functions vary based on which relational database they were made
for. MySQL, Microsoft SQL Server, PostgreSQL, and Oracle are the most popular database
implementations, and we are going to inspect each variant’s characteristics.
As an example, let’s build a simple MySQL query to parse the users table and retrieve a specific
user entry.
We can use the SELECT statement to instruct the database that we want to retrieve all (*) the
records from a specific location defined via the FROM keyword and followed by the target, in this
case the users table. Finally, we’ll direct the database to filter only for records belonging to the
user leon.
SELECT * FROM users WHERE user_name='leon'
Listing 177 - SQL query that parses the users table
y
To automate functionality, web applications often embed SQL queries within their source code.
We can better understand this concept by examining the following backend PHP code portion
k
that is responsible for verifying user-submitted credentials during login:
s
Listing 178 - SQL Query Embedded in PHP Login Source Code
i
Highlighted above is a semi-precompiled SQL query that searches the users table for the provided
z
username and its respective password, which are saved into the 𝑢𝑛𝑎𝑚𝑒∗𝑎𝑛𝑑∗passwd variables.
The query string is then stored in sql_query and used to perform the query against the local
D
database through the mysqli_query450 function, which saves the result of query in $result.
Please note that the i inside the mysqli_query PHP function stands for improved
and should not be confused with the vulnerability (as the i in SQLi stands for
injection).
So far, we’ve described a very basic interaction between backend PHP code and the database.
Reviewing the above code snippet, we’ll notice that both the user_name and password variables
are retrieved from the user POST request and inserted directly in the sql_query string, without any
prior check. This means that an attacker could modify the final SQL statement before it is
executed by the SQL database.
An attacker could insert a SQL statement inside the user or password field to subvert the intended
application logic.
450 (The PHP Group, 2022), https://www.php.net/manual/en/mysqli.query.php
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 286
Made in Morocco
Penetration Testing with Kali Linux
Let’s consider an example. When the user types leon, the SQL server searches for the username
“leon” and returns the result. In order to search the database, the SQL server runs the query
SELECT * FROM users WHERE user_name= leon. If, instead, the user enters “leon ’+!@#$”, the
SQL server will run the query SELECT * FROM users WHERE user_name= leon’+!@#$. Nothing in
our code block checks for these special characters, and it’s this lack of filtering that causes the
vulnerability.
We’ll discover how these types of scenarios can be abused in the forthcoming sections.
10.1.2 DB Types and Characteristics
When testing a web application, we sometimes lack prior knowledge of the underlying database
system, so we should be prepared to interact with different SQL database variants.
There are many DB variants that differ in syntax, function, and features. In this section we are
y
going to focus on two of the most common database variants, MySQL and Microsoft SQL Server
(MSSQL).
k
s
The two SQL variants we’re exploring in this Module are not limited to on-premise
installations, as they can often be found in cloud deployments.
o
MySQL451 is one of the most commonly deployed database variants, along with MariaDB,452 an
n
open-source fork of MySQL.
To explore MySQL basics, we can iconnect to the remote MySQL instance from our local Kali
machine. z
Using the mysql command, we’ll connect to the remote SQL instance by specifying root as
D
username and password, along with the default MySQL server port 3306.
kali@kali:~$ mysql -u root -p'root' -h 192.168.50.16 -P 3306
Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.
Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.
MySQL [(none)]>
Listing 179 - Connecting to the remote MySQL instance
From the MySQL console shell, we can run the version() function to retrieve the version of the
running SQL instance.
MySQL [(none)]> select version();
+-----------+
| version() |
+-----------+
| 8.0.21 |
451 (Oracle, 2022), https://www.mysql.com/
452 (MariaDB Foundation, 2021), https://mariadb.org
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 287
Made in Morocco
Penetration Testing with Kali Linux
+-----------+
1 row in set (0.107 sec)
Listing 180 - Retrieving the version of a MySQL database
We can also verify the current database user for the ongoing session via the system_user()
function, which returns the current username and hostname for the MySQL connection.
MySQL [(none)]> select system_user();
+--------------------+
| system_user() |
+--------------------+
| PI:EMAIL |
+--------------------+
1 row in set (0.104 sec)
Listing 181 - Inspecting the current session’s user
y
The database query we ran confirmed that we are logged in as the database root user through a
remote connection from 192.168.20.50.
k
The root user in this example is the database-spsecific root user, not the the
system-wide administrative root user.
o
We can now collect a list of all databases running in the MySQL session by issuing the show
n
command, followed by the databases keyword.
MySQL [(none)]> show databases; i
+--------------------+
z
| Database |
+--------------------+
| information_schema | D
| mysql |
| performance_schema |
| sys |
| test |
+--------------------+
5 rows in set (0.107 sec)
Listing 182 - Listing all Available Databases
As an example, let’s retrieve the password of the offsec user present in the mysql database.
Within the mysql database, we’ll filter using a SELECT statement for the user and
authentication_string value belonging to the user table. Next, we’ll filter all the results via a
WHERE clause that matches only the offsec user.
MySQL [mysql]> SELECT user, authentication_string FROM mysql.user WHERE user =
'offsec';
+--------+------------------------------------------------------------------------+
| user | authentication_string |
+--------+------------------------------------------------------------------------+
| offsec | $A$005$?qvorPp8#lTKH1j54xuw4C5VsXe5IAa1cFUYdQMiBxQVEzZG9XWd/e6|
+--------+------------------------------------------------------------------------+
1 row in set (0.106 sec)
Listing 183 - Inspecting user’s encrypted password
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 288
Made in Morocco
Penetration Testing with Kali Linux
To improve its security, the user’s password is stored in the authentication_string field as a
Caching-SHA-256 algorithm.453
A password hash is a ciphered representation of the original plain-text password. In later
Modules, we’ll learn how password hashing is performed and how a hash can be reversed or
cracked to obtain the original password.
Having covered the basics of MySQL, let’s explore MSSQL. MSSQL454 is a database management
system that natively integrates into the Windows ecosystem.
A built-in command-line tool named SQLCMD455 allows SQL queries to be run through the
Windows command prompt or even remotely from another machine.
Kali Linux includes Impacket,456 a Python framework that enables network protocol interactions.
Among many other protocols, it supports Tabular Data Stream (TDS),457 the protocol adopted by
y
MSSQL that is implemented in the impacket-mssqlclient tool.
We can run impacket-mssqlclient to connect to the remote Wikndows machine running MSSQL by
providing a username, a password, and the remote IP, together with the -windows-auth keyword.
This forces NTLM authentication (as opposed to Kerberos). We’ll explore Windows authentication
s
in more depth in upcoming Modules.
kali@kali:~$ impacket-mssqlclient Administratoor:PI:EMAIL -windows-auth
Impacket v0.9.24 - Copyright 2021 SecureAuth Corporation
[*] Encryption required, switching to TnLS
[*] ENVCHANGE(DATABASE): Old Value: master, New Value: master
[*] ENVCHANGE(LANGUAGE): Old Value: , New Value: us_english
[*] ENVCHANGE(PACKETSIZE): Old Vialue: 4096, New Value: 16192
[*] INFO(SQL01\SQLEXPRESS): Lizne 1: Changed database context to 'master'.
[*] INFO(SQL01\SQLEXPRESS): Line 1: Changed language setting to us_english.
[*] ACK: Result: 1 - Microsoft SQL Server (150 7208)
D
[!] Press help for extra shell commands
SQL>
Listing 184 - Connecting to the Remote MSSQL instance via Impacket
To begin, let’s inspect the current version of the underlying operating system by selecting the
@@version.
Every database management system has its own syntax that we should take into
consideration when enumerating a target during a penetration test.
453 (Oracle, 2022), https://dev.mysql.com/doc/refman/8.0/en/caching-sha2-pluggable-authentication.html
454 (Microsoft, 2022), http://www.microsoft.com/sqlserver
455 (Microsoft, 2022), https://docs.microsoft.com/en-us/sql/tools/sqlcmd-utility
456 (SecureAuth. 2022), https://github.com/SecureAuthCorp/impacket
457 (Microsoft, 2022), https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-tds/893fcc7e-8a39-4b3c-815a-
773b7b982c50/
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 289
Made in Morocco
Penetration Testing with Kali Linux
SQL>SELECT @@version;
...
Microsoft SQL Server 2019 (RTM) - 15.0.2000.5 (X64)
Sep 24 2019 13:48:23
Copyright (C) 2019 Microsoft Corporation
Express Edition (64-bit) on Windows Server 2022 Standard 10.0  (Build 20348:
) (Hypervisor)
Listing 185 - Retrieving the Windows OS Version
Our query returned valuable information about the running version of the MSSQL server along
with the Windows Server version, including its build number.
When using a SQL Server command line tool like sqlcmd, we must submit our
y
SQL statement ending with a semicolon followed by GO on a separate line.
However, when running the command remotely, we can omit the GO statement
k
since it’s not part of the MSSQL TDS protocol.
s
To list all the available databases, we can select all names from the system catalog.
o
SQL>SELECT name FROM sys.databases;
name
... n
master
tempdb i
z
model
msdb D
offsec
SQL>
Listing 186 - Inspecting the Available Databases
Since master, tempdb, model, and msdb are default databases, we want to explore the custom
offsec database because it might contain data belonging to our target. We can review this
database by querying the tables table in the corresponding information_schema.
SQL>SELECT * FROM offsec.information_schema.tables;
TABLE_CATALOG
TABLE_SCHEMA
TABLE_NAME
TABLE_TYPE
--------------------------------------------------------------------------------------
------------------------------------------ -----------------------------------------
--------------------------------------------------------------------------------------
- ----------------------------------------------------------------------------------
---------------------------------------------- ----------
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 290
Made in Morocco
Penetration Testing with Kali Linux
offsec
dbo
users
b'BASE TABLE'
Listing 187 - Inspecting the Available Tables in the offsec Database
Our query returned the users table as the only one available in the database, so let’s inspect it by
selecting all of its records. We’ll need to specify the dbo table schema between the database and
the table names.
SQL>select * from offsec.dbo.users;
username password
---------- ----------
admin lab y
guest guest
k
Listing 188 - Exploring Users Table Records
The users table contains two columns, user and password, and two rows. Our query returned the
s
clear text password for both usernames.
Having covered the basic syntax peculiarities for oMySQL and MSSQL databases, next we’ll learn
how to manually exploit SQL injection vulnerabilities.
n