# NRPE Documentation
Copyright (c) 1999-2007 Ethan Galstad  
Last Updated: May 1, 2007

## Table of Contents
1. Introduction  
   a) Purpose  
   b) Design Overview  
2. Example Uses  
   a) Direct Checks  
   b) Indirect Checks  
3. Installation  
   a) Prerequisites  
   b) Remote Host Setup  
   c) Monitoring Host Setup  
4. Customizing Your Configuration  
5. Upgrading  
6. Troubleshooting  

## 1. Introduction
### a) Purpose
The NRPE (Nagios Remote Plugin Executor) addon is designed to allow the execution of Nagios plugins on remote Linux/Unix machines. This enables Nagios to monitor "local" resources (such as CPU load, memory usage, etc.) on these remote machines. Since these resources are not typically exposed to external machines, an agent like NRPE must be installed on the remote Linux/Unix machines.

**Note:** It is also possible to execute Nagios plugins on remote Linux/Unix machines through SSH using the `check_by_ssh` plugin. While this method is more secure, it imposes a higher CPU overhead on both the monitoring and remote machines, which can become problematic when monitoring hundreds or thousands of machines. Many Nagios administrators prefer the NRPE addon due to its lower resource consumption.

### b) Design Overview
The NRPE addon consists of two main components:
- **The `check_nrpe` plugin:** This resides on the local monitoring machine.
- **The NRPE daemon:** This runs on the remote Linux/Unix machine.

When Nagios needs to monitor a resource or service from a remote Linux/Unix machine:
1. Nagios executes the `check_nrpe` plugin and specifies the service to be checked.
2. The `check_nrpe` plugin contacts the NRPE daemon on the remote host over an (optionally) SSL-protected connection.
3. The NRPE daemon runs the appropriate Nagios plugin to check the service or resource.
4. The results from the service check are passed from the NRPE daemon back to the `check_nrpe` plugin, which then returns the check results to the Nagios process.

**Note:** The NRPE daemon requires that Nagios plugins be installed on the remote Linux/Unix host. Without these plugins, the daemon would not be able to monitor anything.

## 2. Example Uses
### a) Direct Checks
The most straightforward use of the NRPE addon is to monitor "local" or "private" resources on a remote Linux/Unix machine. This includes metrics such as CPU load, memory usage, swap usage, current users, disk usage, and process states.

### b) Indirect Checks
You can also use the NRPE addon to indirectly check "public" services and resources on remote servers that might not be directly reachable from the monitoring host. For example, if the remote host where the NRPE daemon and plugins are installed can communicate with a remote web server (but the monitoring host cannot), you can configure the NRPE daemon to monitor the remote web server indirectly. In this case, the NRPE daemon acts as a proxy.

## 3. Installation
To use the NRPE addon, you need to perform tasks on both the monitoring host and the remote Linux/Unix host where the NRPE daemon will be installed. These instructions are based on a remote host running Fedora Core 6. Naming conventions, commands, etc., may vary across different Linux distributions and Unix variants, so you may need to adjust these instructions for your specific environment. For OS/distribution-specific installation guides, HOWTOs, and other helpful documentation, visit the Nagios Community wiki at [http://www.nagioscommunity.org/wiki/](http://www.nagioscommunity.org/wiki/).

### a) Prerequisites
- Root access on the remote Linux/Unix host.
- Access to the `nagios` user account on the monitoring host.

### b) Assumptions
These instructions assume that you are installing the NRPE addon on a system that supports TCP wrappers and has the `xinetd` superserver installed. Most modern Linux distributions and Unix variants have these installed by default. If your system uses `inetd` instead of `xinetd` or does not support TCP wrappers, or if you want to run the NRPE daemon without `inetd` or `xinetd`, refer to the `README` and `SECURITY` files in the main directory of the NRPE distribution for additional information.

### c) Remote Host Setup
These steps should be completed on the remote Linux/Unix host where the NRPE daemon will be installed.

#### i. Create Account Information
1. Become the root user. On Ubuntu and other distributions, you may need to use `sudo -s`.
   ```sh
   su -l
   ```
2. Create a new `nagios` user account and set a password.
   ```sh
   /usr/sbin/useradd nagios
   passwd nagios
   ```

#### ii. Install the Nagios Plugins
1. Create a directory for storing the downloads.
   ```sh
   mkdir ~/downloads
   cd ~/downloads
   ```
2. Download the source code tarball of the Nagios plugins. Visit [http://www.nagios.org/download/](http://www.nagios.org/download/) for links to the latest versions. At the time of writing, the latest stable version was 1.4.6.
   ```sh
   wget http://osdn.dl.sourceforge.net/sourceforge/nagiosplug/nagios-plugins-1.4.6.tar.gz
   ```
3. Extract the Nagios plugins source code tarball.
   ```sh
   tar xzf nagios-plugins-1.4.6.tar.gz
   cd nagios-plugins-1.4.6
   ```
4. Compile and install the plugins.
   ```sh
   ./configure
   make
   make install
   ```
5. Fix the permissions on the plugin directory and the plugins.
   ```sh
   chown nagios.nagios /usr/local/nagios
   chown -R nagios.nagios /usr/local/nagios/libexec
   ```

#### iii. Install xinetd
Fedora Core 6 does not ship with `xinetd` installed by default, so install it with the following command:
```sh
yum install xinetd
```

#### iv. Install the NRPE Daemon
1. Download the source code tarball of the NRPE addon. Visit [http://www.nagios.org/download/](http://www.nagios.org/download/) for links to the latest versions. At the time of writing, the latest version was 2.8.
   ```sh
   cd ~/downloads
   wget http://osdn.dl.sourceforge.net/sourceforge/nagios/nrpe-2.8.tar.gz
   ```
2. Extract the NRPE source code tarball.
   ```sh
   tar xzf nrpe-2.8.tar.gz
   cd nrpe-2.8
   ```
3. Compile the NRPE addon.
   ```sh
   ./configure
   make all
   ```
4. Install the NRPE plugin (for testing), daemon, and sample daemon config file.
   ```sh
   make install-plugin
   make install-daemon
   make install-daemon-config
   ```
5. Install the NRPE daemon as a service under `xinetd`.
   ```sh
   make install-xinetd
   ```
6. Edit the `/etc/xinetd.d/nrpe` file and add the IP address of the monitoring server to the `only_from` directive.
   ```sh
   only_from = 127.0.0.1
   ```
7. Add the following entry for the NRPE daemon to the `/etc/services` file.
   ```sh
   nrpe 5666/tcp # NRPE
   ```
8. Restart the `xinetd` service.
   ```sh
   service xinetd restart
   ```

#### v. Test the NRPE Daemon Locally
1. Ensure the NRPE daemon is running under `xinetd`.
   ```sh
   netstat -at | grep nrpe
   ```
   The output should show something like:
   ```sh
   tcp 0 0 *:nrpe *:* LISTEN
   ```
   If it doesn't, check the following:
   - You added the `nrpe` entry to your `/etc/services` file.
   - The `only_from` directive in the `/etc/xinetd.d/nrpe` file contains an entry for `127.0.0.1`.
   - `xinetd` is installed and started.
   - Check the system log files for references about `xinetd` or `nrpe` and fix any reported problems.

2. Verify that the NRPE daemon is functioning properly by running the `check_nrpe` plugin.
   ```sh
   /usr/local/nagios/libexec/check_nrpe -H localhost
   ```
   You should get a response indicating the version of NRPE, such as:
   ```sh
   NRPE v2.8
   ```

#### vi. Open Firewall Rules
Ensure that the local firewall on the machine allows the NRPE daemon to be accessed from remote servers. Run the following `iptables` command. Note that the `RH-Firewall-1-INPUT` chain name is Fedora-specific and may differ on other Linux distributions.
```sh
iptables -I RH-Firewall-1-INPUT -p tcp -m tcp --dport 5666 -j ACCEPT
```
Save the new `iptables` rule to survive reboots.
```sh
service iptables save
```

#### vii. Customize NRPE Commands
The sample NRPE configuration file (`/usr/local/nagios/etc/nrpe.cfg`) contains several command definitions that you can use to monitor the machine. You can edit, add, or modify these commands by editing the NRPE configuration file.
```sh
vi /usr/local/nagios/etc/nrpe.cfg
```
For more information on customizing the commands, see the section "Customizing Your Configuration" on page 13.

Test some of the sample commands by running the following:
```sh
/usr/local/nagios/libexec/check_nrpe -H localhost -c check_users
/usr/local/nagios/libexec/check_nrpe -H localhost -c check_load
/usr/local/nagios/libexec/check_nrpe -H localhost -c check_hda1
/usr/local/nagios/libexec/check_nrpe -H localhost -c check_total_procs
/usr/local/nagios/libexec/check_nrpe -H localhost -c check_zombie_procs
```

At this point, you have completed the installation and configuration of NRPE on the remote host. Next, you need to install and configure a component on your monitoring server.

### d) Monitoring Host Setup
On the monitoring host (the machine that runs Nagios), you need to do the following:
- Install the `check_nrpe` plugin.
- Create a Nagios command definition for using the `check_nrpe` plugin.
- Create Nagios host and service definitions for monitoring the remote host.

These instructions assume that you have already installed Nagios on this machine according to the quickstart installation guide. The configuration examples reference templates defined in the sample `localhost.cfg` and `commands.cfg` files.

#### i. Install the `check_nrpe` Plugin
1. Become the root user. On Ubuntu and other distributions, you may need to use `sudo -s`.
   ```sh
   su -l
   ```
2. Create a directory for storing the downloads.
   ```sh
   mkdir ~/downloads
   cd ~/downloads
   ```
3. Download the source code tarball of the NRPE addon. Visit [http://www.nagios.org/download/](http://www.nagios.org/download/) for links to the latest versions. At the time of writing, the latest version was 2.8.
   ```sh
   wget http://osdn.dl.sourceforge.net/sourceforge/nagios/nrpe-2.8.tar.gz
   ```
4. Extract the NRPE source code tarball.
   ```sh
   tar xzf nrpe-2.8.tar.gz
   cd nrpe-2.8
   ```
5. Compile the NRPE addon.
   ```sh
   ./configure
   make all
   ```
6. Install the NRPE plugin.
   ```sh
   make install-plugin
   ```

#### ii. Test Communication with the NRPE Daemon
Verify that the `check_nrpe` plugin can communicate with the NRPE daemon on the remote host. Replace `192.168.0.1` with the IP address of the remote host.
```sh
/usr/local/nagios/libexec/check_nrpe -H 192.168.0.1
```
You should get a response indicating the version of NRPE, such as:
```sh
NRPE v2.8
```
If the plugin returns a timeout error, check the following:
- Ensure there isn't a firewall between the remote host and the monitoring server blocking communication.
- Verify that the NRPE daemon is installed properly under `xinetd`.
- Check that the remote host doesn't have local `iptables` firewall rules preventing the monitoring server from talking to the NRPE daemon.

#### iii. Create a Command Definition
Create a command definition in one of your Nagios object configuration files to use the `check_nrpe` plugin. Open the sample `commands.cfg` file for editing.
```sh
vi /usr/local/nagios/etc/commands.cfg
```
Add the following definition to the file:
```cfg
define command{
    command_name check_nrpe
    command_line $USER1$/check_nrpe -H $HOSTADDRESS$ -c $ARG1$
}
```

This completes the installation and configuration of the NRPE addon on both the remote and monitoring hosts.