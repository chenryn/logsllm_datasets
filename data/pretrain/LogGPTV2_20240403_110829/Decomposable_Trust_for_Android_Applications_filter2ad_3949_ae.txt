### System Call Interception and Blocking

- **Interception of System Calls**: 6.5% of the system calls on both the host and the CVM (e.g., `fork`, `mmap`) are intercepted, as described in Section III-D.
- **Blocking Malicious Calls**: 2.1% of system calls (e.g., module insertion, shutdown) are blocked because they are inherently malicious if executed by an app. This optimization reduces unnecessary round trips to the CVM, where these calls would have no effect.

### UI/Input System Exploits

- **Trusted UI System**: Anception trusts the UI system. The attack surface for the UI system is limited to the types of `ioctl` calls an application can invoke on the window managers.
- **No Known Attacks via IPC**: No attacks have been found through IPC calls to the UI/Input and lifecycle management services. However, exploits involving direct access to the frame buffer have been identified [31]. Such calls are redirected to the CVM, as shown in Section V-A.

### Anception Runtime

- **Marshaling and Unmarshaling**: A significant portion of Anception's code (46.7%) is dedicated to marshaling and unmarshaling data. Specifically, out of 5219 lines of C code, 2438 lines handle these tasks. The remaining lines manage process state and memory maps.
- **Automation Potential**: Automated techniques could be used to generate marshaling/unmarshaling code from an interface specification, potentially reducing manual coding effort.

### Deprivileged Lines of Code

- **Deprivileging Kernel and Framework Services**: Anception deprivileges a substantial part of the kernel and framework services. On Android 4.2 and Linux kernel 3.4, privileged framework services total 181,260 lines of code, with 72,542 lines related to UI, input, and lifecycle management.
- **Current Implementation**: Anception deprivileges approximately 60% (108,718 lines) of the Android privileged service code.
- **Kernel Code Deprivileging**: Rough estimates indicate that Anception deprivileges around 1.2 million lines of kernel code related to the file system and network. For example, `fs/ext4` contains 26,451 lines, `fs/` contains 725,466 lines, `net/ipv4` contains 59,166 lines, and `net/` contains 515,383 lines.

### Performance Evaluation

- **Benchmarking Tools**: We use popular benchmarks from the Play Store to measure Disk I/O, 2D/3D graphics, CPU, and memory performance. Microbenchmarks are also conducted to quantify the overhead introduced by system call interception and context switching between the host and guest (termed "world switching").
- **Test Environment**: All experiments are run on a Samsung Galaxy Tab 10.1 with Android 4.2, 1GB of RAM, a 1.6GHz processor, and 64MB of physical memory assigned to the CVM. Results are averaged over five runs unless specified otherwise.

#### Active-Set of Apps

- **Standard Apps**: Benchmarks are run concurrently with the standard set of Android 4.2 apps launched at boot, including the home screen, launcher, contacts, photo gallery, dialer, MMS, and settings. On our device, there were 23 active apps during testing.
- **Real-World Usage**: The active-set was not terminated to simulate real-world usage, where multiple apps are in the executing state.

### Microbenchmarks

- **Efficiency of ASIM**: The `getpid` syscall shows that ASIM introduces negligible overhead (0.76 μs).
- **Read and Write Syscalls**: The performance of read and write syscalls is measured to quantify the overhead due to world switching. The benchmark writes (reads) 16 MB of data to (from) the internal storage. The results show increased latency, partly due to chunking behavior in the data transfer channel, which uses 4096-byte packets.
- **UI-Related System Calls**: UI-related system calls, primarily `ioctl` calls, run at native speed since they are not redirected for security reasons. Using ProfileDroid [44], we found that 58.7% to 80.1% (average = 73.7%) of system calls made by popular apps are `ioctl` calls, with 81.35% of these being UI-related.

### Macrobenchmarks

- **AnTuTu Benchmark**: AnTuTu (v2.9.4) is used to evaluate Anception's performance on app-oriented DB workloads. Anception's score is only 3% lower than native Android, suggesting that the I/O performance hit at the microbenchmark level is largely masked by memory buffering.
- **SunSpider Benchmark**: Additional AnTuTu and SunSpider benchmarks test Anception's ability to run unmodified, graphics-rich applications. Anception's overall score is 2.8% less than native Android, with close performance on 2D and 3D tests. On the SunSpider benchmark, Anception's performance is indistinguishable from native Android.

### SQLite Benchmark

- **SQLite I/O Performance**: A benchmark that writes 10,000 rows (each row is 26 bytes) within a transaction shows that Anception's performance is virtually indistinguishable from native Android (86.67 μs vs. 86.55 μs).

### Memory Overhead

- **CVM Memory Allocation**: Assigning 64MB to the CVM allows proper operation, with 51% of the assigned memory available for proxy processes. The CVM runs a stock version of Android minus the UI code, using 25460 KB ± 524.54 KB out of 49228 KB available on average.

### Discussion

- **High Assurance Apps**: High assurance apps can store cryptographic keys in their read-only code, protected by Anception. Additionally, Anception can provide transparent encryption to any app using a per-app key for a cryptographic file system in the CVM.
- **Iago Attacks**: Anception does not rule out Iago attacks, but using an encryption wrapper for file system calls makes such attacks more difficult.

### Related Work

- **OS Virtualization**: Current research is bringing classical virtualization to smartphone hardware. Systems like Cells, AirBag, Overshadow, InkTag, and SP3 aim to provide virtual memory and disk data confidentiality. Anception differs by deprivileging a large chunk of the trusted base and delegating it to a container, running a headless OS in the container to reduce memory consumption.