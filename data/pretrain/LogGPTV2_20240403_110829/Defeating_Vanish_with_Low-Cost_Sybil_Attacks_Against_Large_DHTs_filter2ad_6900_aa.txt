title:Defeating Vanish with Low-Cost Sybil Attacks Against Large DHTs
author:Scott Wolchok and
Owen S. Hofmann and
Nadia Heninger and
Edward W. Felten and
J. Alex Halderman and
Christopher J. Rossbach and
Brent Waters and
Emmett Witchel
Defeating Vanish with Low-Cost Sybil Attacks Against Large DHTs
Scott Wolchok†1, Owen S. Hofmann†2, Nadia Heninger3, Edward W. Felten3,
J. Alex Halderman1, Christopher J. Rossbach2, Brent Waters2, and Emmett Witchel2
1The University of Michigan
{swolchok, jhalderm}@eecs.umich.edu
2The University of Texas at Austin
{osh, rossbach, bwaters, witchel}@cs.utexas.edu
3Princeton University
{nadiah, felten}@cs.princeton.edu
Abstract
1. Introduction
Researchers at the University of Washington recently pro-
posed Vanish [20], a system for creating messages that au-
tomatically “self-destruct” after a period of time. Vanish
works by encrypting each message with a random key and
storing shares of the key in a large, public distributed hash
table (DHT). DHTs expunge data older than a certain age;
after this happens to the key shares, the key is permanently
lost, and the encrypted data is permanently unreadable. Van-
ish is an interesting approach to an important privacy prob-
lem, but, in its current form, it is insecure. In this paper,
we defeat the deployed Vanish implementation, explain how
the original paper’s security analysis is ﬂawed, and draw
lessons for future system designs.
We present two Sybil attacks against the current Van-
ish implementation, which stores its encryption keys in the
million-node Vuze BitTorrent DHT. These attacks work by
continuously crawling the DHT and saving each stored value
before it ages out. They can efﬁciently recover keys for more
than 99% of Vanish messages. We show that the dominant
cost of these attacks is network data transfer, not memory us-
age as the Vanish authors expected, and that the total cost is
two orders of magnitude less than they estimated. While we
consider potential defenses, we conclude that public DHTs
like Vuze probably cannot provide strong security for Vanish.
† Both authors contributed equally.
As storage capacities increase and applications move into
the cloud, controlling the lifetime of sensitive data is becom-
ing increasingly difﬁcult. Even if users cleanse their local
ﬁles, copies may be retained long into the future by email
providers, backup systems, and other services, and these
may be targets of theft or subpoena. Geambasu, Kohno,
Levy, and Levy proposed the Vanish system [20] to address
this problem. Vanish encapsulates data objects so that they
“self-destruct” after a speciﬁed time, becoming permanently
unreadable. It encrypts the data using a randomly generated
key and then uses Shamir secret sharing [38] to break the
key into n shares of which k are needed to reconstruct the
key. Vanish stores these shares in random indices in a large,
pre-existing distributed hash table (DHT), a kind of peer-to-
peer network that holds key-value pairs. The encrypted data
object together with the list of random indices comprise a
“Vanishing Data Object” (VDO).
DHTs have a property that seemingly makes them ideal
for this application: they make room for new data by discard-
ing older data after a set time. The DHT policy to age out
data is what makes Vanish data vanish. A user in possession
of a VDO can retrieve the plaintext prior to the expiration
time T by simply reading the secret shares from at least k
indices in the DHT and reconstructing the decryption key.
When the expiration time passes, the DHT will expunge the
stored shares, and, the Vanish authors assert, the informa-
tion needed to reconstruct the key will be permanently lost.
The Vanish team released an implementation based on the
million-node Vuze DHT, which is used mainly for BitTorrent
tracking.
Vanish is an intriguing approach to an important prob-
lem1; unfortunately, in its present form, it is insecure. In this
paper, we show that data stored using the deployed Vanish
system can be recovered long after it is supposed to have
been destroyed, that such attacks can be carried out inex-
pensively, and that alternative approaches to building Vanish
are unlikely to be much safer. We also examine what was
wrong with the Vanish paper’s security analysis, which an-
ticipated attacks like ours but concluded that they would be
prohibitively expensive, and draw lessons for the design of
future systems.
Attacks Vanish’s security depends on the assumption that
an attacker cannot efﬁciently extract VDO key shares from
the DHT before they expire. Suppose an adversary could
continuously crawl the DHT and record a copy of everything
that gets stored. Later, if he wished to decrypt a Vanish
message, he could simply look up the key shares in his
logs. Such an attacker might even run a commercial service,
offering to provide the keys for any Vanish message for a
fee. Thus, a method of efﬁciently crawling the DHT enables
a major attack against Vanish.
The authors of this paper represent two groups of re-
searchers who simultaneously and independently developed
such attacks. (The Michigan and Princeton authors are one
group; the Texas authors are the other.) After discovering
that we had separately achieved similar results, we decided
to write a joint paper. We show that we can extract the con-
tents of the Vuze DHT using low-cost Sybil attacks.2 Vuze
DHT clients periodically replicate the data they store to other
peers that are close-by in the system’s ID space. In our at-
tacks, we participate in the network with a large number of
identities and record the data that is replicated to them.
The size of the Vuze DHT makes Sybil attacks challeng-
ing, as there are typically around a million peers. We investi-
gated a strategy for making our attacks more efﬁcient, which
we call “hopping”. Hopping signiﬁcantly reduced the cost
of the attacks—as well as the load they placed on the DHT—
while enabling us to record enough of the DHT’s contents to
enable near-complete VDO recovery. Additional optimiza-
tions in our implementations brought further savings in CPU,
memory, storage, and bandwidth consumption.
The Vanish authors explicitly considered Sybil attacks
against the DHT and estimated the cost to be around $860K
per year. In contrast, our most efﬁcient attack would cost
only $5900 per year to operate at a level that would recover
99% of VDOs. (Both ﬁgures are based on Amazon EC2
pricing [2].) Our optimizations drastically reduce the cost
1Vanish won Outstanding Student Paper at USENIX Security 2009.
2In a Sybil attack [16], a single entity assumes many identities within
a peer-to-peer network in order to gain control over a large fraction of the
system.
of crawling the Vuze DHT, illustrating that it is possible to
defeat Vanish without extraordinary ﬁnancial resources.
Analysis One of the goals of security research is to learn
how to build secure systems. It is instructive to study why
systems fail, particularly when those systems set out to pro-
vide well-deﬁned security properties. To this end, we ask
why Vanish failed and draw a number of lessons for future
systems.
We begin by examining the security analysis contained
in the Vanish paper and pointing out several shortcomings.
The authors dramatically overestimated the cost of running
Sybils, failed to anticipate the efﬁciency gains from opti-
mized attack strategies, and did not notice that recovery
scales with coverage in a way that favors attackers. These
errors caused the Vanish analysis to overestimate the cost of
a successful attack by more than two orders of magnitude.
The Vanish paper also overlooked previous work that
might have made Sybil attacks seem like a more credible
threat. Similar approaches for crawling DHTs have been
applied to other Kademlia-family networks in several mea-
surement studies [30, 40]. The Vanish authors apparently
were unaware of these studies, which we survey in Section 7.
There are a number of possible defenses that could be
applied to future versions of Vanish and Vuze, including
reducing replication, imposing further restrictions on node
IDs, and employing client puzzles. Changes like these might
make Sybil attacks more expensive, but probably not by a
large enough factor to provide strong security for Vanish.
Another approach would be to switch from a public DHT,
where anyone can serve as a peer, to a privately run system
like OpenDHT [37]. Though this would remove the threat
from Sybils, the private system would essentially act as a
trusted third party, which Vanish was designed to avoid.
Vanish’s weaknesses are not only of academic concern.
Since the Vanish prototype was released to the public amidst
widespread media coverage [27], users may already be treat-
ing it as a production system and entrusting it with sensitive
data. One might believe that this cannot make matters any
worse—the system provides an additional layer of protec-
tion, which, if compromised, is no worse than what the user
had in place originally. This argument assumes that users’
behavior will not be affected by the perceived beneﬁts that
Vanish delivers, which seems to us unlikely. For example,
a user might not feel compelled to delete an email if he be-
lieves that the Vanish system has expired the contents. Or a
user might be less scrupulous in the contents she adds, if she
thinks the contents will vanish in a few hours. “Why bother
to prune my own data,” the user may ask, “if Vanish is doing
it for me?”
Vanish, as it is deployed today, does not meet its goal
of providing self-destructing data. While Vanish’s general
approach may yet turn out to be viable, our results suggest
that implementing Vanish securely remains an open problem.
Organization The remainder of this paper is structured as
follows. Section 2 provides further background about Van-
ish and the Vuze DHT. Section 3 describes our attacks and
Section 4 evaluates their performance. We analyze problems
with the Vanish design and the Vanish paper’s security analy-
sis in Section 5. We consider possible defenses in Section 6,
survey related work in Section 7, and conclude in Section 8.
2. Background
This section provides a technical overview of the Vanish
system and the Vuze DHT. We refer the reader to the Vanish
paper [20] and the Vuze web site [45] for additional details.
2.1. Vanish
The television show Mission: Impossible famously began
with Jim Phelps receiving instructions from a recording that
subsequently self-destructs. Messages that self-destruct at
a predetermined time would be useful in a digital context
too—especially where privacy is important—though a self-
destruction feature is challenging to provide.
For example, the sender of an email might want the con-
tents discarded after the message is read. Even in circum-
stances where the receiver is agreeable to the sender’s wishes,
she may be unmotivated to put extra effort toward seeing
that those wishes are carried out. We call this model of user
behavior trustworthy, but lazy.
It has long been known that data retention can be man-
aged by encrypting data and then controlling the lifetime of
the decryption key, such as by scheduling the automatic dele-
tion of the key after a predetermined interval [6]. Geambasu,
Kohno, Levy, and Levy extend this idea in the Vanish sys-
tem [20] by employing an intriguing new technique to expire
keys. Vanish stores keys in a distributed hash table (DHT).
DHTs erase old data after a period of time to make room for
new stores. Vanish exploits this property to ensure that its
keys will expire at a predictable time with no intervention
from the user.
Vanish uses two principal mechanisms. The ﬁrst is an
encapsulate algorithm that takes a data object D as input
and produces a Vanishing Data Object (VDO) as output. The
second is a decapsulate algorithm that accepts as input a
VDO and reproduces the original data, with the caveat that
decapsulation must be done within a certain time T of the
VDO’s creation.
Encapsulate The encapsulation algorithm takes as in-
put data D. The algorithm generates a random
secret key K, and then encrypts the data D under
the key K to yield ciphertext C. Next, the algo-
rithm uses Shamir secret sharing [38] to split the
key K into n shares K1, . . . , Kn where k shares
are required to reconstruct the key. Shamir secret
sharing guarantees that k shares of K1, . . . , Kn
are sufﬁcient to reconstruct K, but no information
about the original key K can be recovered with
fewer than k shares.
Next, the algorithm chooses a random “access key”
L, which is used as a seed to a pseudorandom
number generator (PRNG). The algorithm runs the
PRNG to derive n indices Ii, . . . , In. For j =
1, . . . , n it stores key share Kj at index Ij in the
DHT. Finally, the VDO V is outputted as the tuple
V = (C, L).
Decapsulate The decapsulation algorithm accepts a
VDO V = (C, L) as input. The algorithm seeds
the PRNG with the access key L to retrieve n in-
dices I1, . . . , In. It then retrieves the data values
from the DHT at these indices. If fewer than k
values are retrieved, the algorithm outputs fail-
ure. Otherwise, it uses Shamir secret sharing on k
shares to reconstruct a key K(cid:48). Finally, it attempts
decryption of C using K(cid:48). The algorithm outputs
a failure if the decryption is not successful; other-
wise, it returns D, the result of the decryption.
Security model and assumptions The goal of Vanish is
to provide a type of forward security, where past objects
are secure if the VDO is compromised after its expiration
time. This is somewhat similar to forward secure signa-
tures [5, 23] and forward secure encryption [8]. However, in
these systems, a user’s machine is responsible for evolving
(updating) a private key. In Vanish, the goal is to achieve
security without requiring active deletion of the VDO from
the user’s machine. Instead, the system relies on the DHT
data retention policy to expire the shares of the key used to
encrypt the VDO.
Consider a user that creates a VDO V with expiration