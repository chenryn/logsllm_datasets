                        return;
                    }
                    this.logApiAccessFailure(isLogTestOnlyApiAllowed, request.getUri().getPath(), "testOnly");
                    break;
                case INTERNAL_ONLY:
                    request.setStatusCode(404);
                    this.failRequest(request, this.getUriNotRegisteredException(request));
                case NO_STATUS:
                case GA:
                    break;
                default:
                    this.failRequest(request, new IllegalStateException("Unknown API Availabilty type"));
                    return;
                }
            }
            CompletionHandler completion = new CompletionHandler() {
                public void completed(Void dummy) {
                    ForwarderPassThroughWorker.this.cloneAndForwardRequest(request, mapping);
                }
                public void failed(Exception exception, Void dummy) {
                    ForwarderPassThroughWorker.this.failRequest(request, exception);
                    AuditLog.auditLog(request, false);
                }
            };
            boolean isPasswordExpired = request.getAdditionalHeader("X-F5-New-Authtok-Reqd") != null && request.getAdditionalHeader("X-F5-New-Authtok-Reqd").equals("true");
            if (isPasswordExpired) {
                String expiredPasswordUriPath = request.getUri().getPath();
                boolean isPasswordRequestValid = this.passwordRequestIsOnlyToPermittedURI(expiredPasswordUriPath, request) && this.passwordRequestOnlyContainsPermittedFields(request) && this.userChangingSelfPassword(expiredPasswordUriPath, request);
                if (!isPasswordRequestValid) {
                    request.setStatusCode(401);
                    this.failRequest(request, new SecurityException(CHANGE_PASSWORD_NOTIFICATION));
                    this.logExpiredPassword(expiredPasswordUriPath);
                    return;
                }
            }
            boolean isRBACDisabled = this.getProperties().getAsBoolean("rest.common.RBAC.disabled");
            if (isRBACDisabled) {
                completion.completed((Object)null);
            } else {
                EvaluatePermissions.evaluatePermission(request, completion);
            }
        }
    }
经过动态调试，前边的分支都进不去，会进入EvaluatePermissions.evaluatePermission(request,
completion)
    public static void evaluatePermission(final RestOperation request, final CompletionHandler finalCompletion) {
        if (roleEval == null) {
            throw new IllegalArgumentException("roleEval may not be null.");
        } else {
            if (request.getReferer() == null) {
                request.setReferer(request.getRemoteSender());
            }
            String authToken = request.getXF5AuthToken();
            if (authToken == null) {
                completeEvaluatePermission(request, (AuthTokenItemState)null, finalCompletion);
            } else {
                RestRequestCompletion completion = new RestRequestCompletion() {
                    public void completed(RestOperation tokenRequest) {
                        AuthTokenItemState token = (AuthTokenItemState)tokenRequest.getTypedBody(AuthTokenItemState.class);
                        EvaluatePermissions.completeEvaluatePermission(request, token, finalCompletion);
                    }
                    public void failed(Exception exception, RestOperation tokenRequest) {
                        String error = "X-F5-Auth-Token does not exist.";
                        EvaluatePermissions.setStatusUnauthorized(request);
                        finalCompletion.failed(new SecurityException(error), (Object)null);
                    }
                };
                RestOperation tokenRequest = RestOperation.create().setUri(UrlHelper.extendUriSafe(UrlHelper.buildLocalUriSafe(authzTokenPort, new String[]{WellKnownPorts.AUTHZ_TOKEN_WORKER_URI_PATH}), new String[]{authToken})).setCompletion(completion);
                RestRequestSender.sendGet(tokenRequest);
            }
        }
    }
此处，获取到的authToken为null，所以会进入completeEvaluatePermission
    private static void completeEvaluatePermission(final RestOperation request, AuthTokenItemState token, final CompletionHandler finalCompletion) {
        if (token != null) {
            if (token.expirationMicros () {
                        public void completed(Boolean result) {
                            if (result) {
                                finalCompletion.completed((Object)null);
                            } else {
                                String error = "Authorization failed: user=" + userRef.link + " resource=" + path + " verb=" + verb + " uri:" + request.getUri() + " referrer:" + request.getReferer() + " sender:" + request.getRemoteSender();
                                EvaluatePermissions.setStatusUnauthorized(request);
                                finalCompletion.failed(new SecurityException(error), (Object)null);
                            }
                        }
                        public void failed(Exception ex, Boolean result) {
                            request.setBody((String)null);
                            request.setStatusCode(500);
                            String error = "Internal server error while authorizing request";
                            finalCompletion.failed(new Exception(error), (Object)null);
                        }
                    });
                }
            }
        }
    }
向下运行，会进入else if
(AuthzHelper.isDefaultAdminRef(userRef))这个判断，由于现有reference是根据admin这个username生成的，所以会进入这个判断，成功继续向下运行，绕过判断。
## 修复
使用idea可以针对两个jar包开展比对，选中两个jar包后按command+D即可
经比较，发现RestOperationIdentifier类中的setIdentityFromBasicAuth函数变化较大
原代码：
    private static boolean setIdentityFromBasicAuth(RestOperation request) {
            String authHeader = request.getBasicAuthorization();
            if (authHeader == null) {
                return false;
            } else {
                BasicAuthComponents components = AuthzHelper.decodeBasicAuth(authHeader);
                request.setIdentityData(components.userName, (RestReference)null, (RestReference[])null);
                return true;
            }
        }
更新后代码：
    private static boolean setIdentityFromBasicAuth(final RestOperation request, final Runnable runnable) {
            String authHeader = request.getBasicAuthorization();
            if (authHeader == null) {
                return false;
            } else {
                final BasicAuthComponents components = AuthzHelper.decodeBasicAuth(authHeader);
                String xForwardedHostHeaderValue = request.getAdditionalHeader("X-Forwarded-Host");
                if (xForwardedHostHeaderValue == null) {
                    request.setIdentityData(components.userName, (RestReference)null, (RestReference[])null);
                    if (runnable != null) {
                        runnable.run();
                    }
                    return true;
                } else {
                    String[] valueList = xForwardedHostHeaderValue.split(", ");
                    int valueIdx = valueList.length > 1 ? valueList.length - 1 : 0;
                    if (!valueList[valueIdx].contains("localhost") && !valueList[valueIdx].contains("127.0.0.1")) {
                        if (valueList[valueIdx].contains("127.4.2.1") && components.userName.equals("f5hubblelcdadmin")) {
                            request.setIdentityData(components.userName, (RestReference)null, (RestReference[])null);
                            if (runnable != null) {
                                runnable.run();
                            }
                            return true;
                        } else {
                            boolean isPasswordExpired = request.getAdditionalHeader("X-F5-New-Authtok-Reqd") != null && request.getAdditionalHeader("X-F5-New-Authtok-Reqd").equals("true");
                            if (PasswordUtil.isPasswordReset() && !isPasswordExpired) {
                                AuthProviderLoginState loginState = new AuthProviderLoginState();
                                loginState.username = components.userName;
                                loginState.password = components.password;
                                loginState.address = request.getRemoteSender();
                                RestRequestCompletion authCompletion = new RestRequestCompletion() {
                                    public void completed(RestOperation subRequest) {
                                        request.setIdentityData(components.userName, (RestReference)null, (RestReference[])null);
                                        if (runnable != null) {
                                            runnable.run();
                                        }
                                    }
                                    public void failed(Exception ex, RestOperation subRequest) {
                                        RestOperationIdentifier.LOGGER.warningFmt("Failed to validate %s", new Object[]{ex.getMessage()});
                                        if (ex.getMessage().contains("Password expired")) {
                                            request.fail(new SecurityException(ForwarderPassThroughWorker.CHANGE_PASSWORD_NOTIFICATION));
                                        }
                                        if (runnable != null) {
                                            runnable.run();
                                        }
                                    }
                                };
                                try {
                                    RestOperation subRequest = RestOperation.create().setBody(loginState).setUri(UrlHelper.makeLocalUri(new URI(TMOS_AUTH_LOGIN_PROVIDER_WORKER_URI_PATH), (Integer)null)).setCompletion(authCompletion);
                                    RestRequestSender.sendPost(subRequest);
                                } catch (URISyntaxException var11) {
                                    LOGGER.warningFmt("ERROR: URISyntaxEception %s", new Object[]{var11.getMessage()});
                                }
                                return true;
                            } else {
                                request.setIdentityData(components.userName, (RestReference)null, (RestReference[])null);
                                if (runnable != null) {
                                    runnable.run();
                                }
                                return true;
                            }
                        }
                    } else {
                        request.setIdentityData(components.userName, (RestReference)null, (RestReference[])null);
                        if (runnable != null) {
                            runnable.run();
                        }
                        return true;
                    }
                }
            }
        }
        static {
            TMOS_AUTH_LOGIN_PROVIDER_WORKER_URI_PATH = TmosAuthProviderCollectionWorker.WORKER_URI_PATH + "/" + TmosAuthProviderCollectionWorker.generatePrimaryKey("tmos") + "/login";
        }
    }
修复后的代码针对请求的ip做了筛选，如果是127.0.0.1，活着是127.4.2.1同时username是f5hubblelcdadmin,则依然可以通过认证，但是其他的请求则无法直接通过认证，会检查认证是否过期，如果过期则使用口令密码重新验证。
## 参考
[1] [CVE-2021-22986：F5 BIG-IP iControl
REST未授权远程命令执行漏洞分析](https://nosec.org/home/detail/4722.html)
[2]
[F5从认证绕过到远程代码执行漏洞分析](https://blog.riskivy.com/f5%e4%bb%8e%e8%ae%a4%e8%af%81%e7%bb%95%e8%bf%87%e5%88%b0%e8%bf%9c%e7%a8%8b%e4%bb%a3%e7%a0%81%e6%89%a7%e8%a1%8c%e6%bc%8f%e6%b4%9e%e5%88%86%e6%9e%90/)
[3] [F5 BIGIP iControl REST
CVE-2021-22986漏洞分析与利用](https://www.anquanke.com/post/id/236159)
[4] [从滥用HTTP hop by hop请求头看CVE-2022-1388](https://y4er.com/post/from-hop-by-hop-to-cve-2022-1388/)