        if (len = end) {
                *t++ = '\\';
                break;
            }
    ​        switch(*s) {
    ​            case 'n':
    ​                *t++ = '\n';
    ​                break;
    ​            case 'r':
    ​                *t++ = '\r';
    ​                break;
    ​            case 't':
    ​                *t++ = '\t';
    ​                break;
    ​            case 'f':
    ​                *t++ = '\f';
    ​                break;
    ​            case 'v':
    ​                *t++ = '\v';
    ​                break;
    ​            case 'e':
    #ifdef ZEND_WIN32
                        *t++ = VK_ESCAPE;
    #else
                        *t++ = '\e';
    #endif
                        break;
                    case '"':
                    case '`':
                        if (*s != quote_type) {
                            *t++ = '\\';
                            *t++ = *s;
                            break;
                        }
                        ZEND_FALLTHROUGH;
                    case '\\':
                    case '$':
                        *t++ = *s;
                        break;
                    case 'x':
                    case 'X':
                        if (ZEND_IS_HEX(*(s+1))) {
                            char hex_buf[3] = { 0, 0, 0 };
    ​                    hex_buf[0] = *(++s);
    ​                    if (ZEND_IS_HEX(*(s+1))) {
    ​                        hex_buf[1] = *(++s);
    ​                    }
    ​                    *t++ = (char) ZEND_STRTOL(hex_buf, NULL, 16);
    ​                } else {
    ​                    *t++ = '\\';
    ​                    *t++ = *s;
    ​                }
    ​                break;
    ​            /* UTF-8 codepoint escape, format: /\\u\{\x+\}/ */
    ​            case 'u':
    ​                {
    ​                    /* cache where we started so we can parse after validating */
    ​                    char *start = s + 1;
    ​                    size_t len = 0;
    ​                    bool valid = 1;
    ​                    unsigned long codepoint;
    ​                    if (*start != '{') {
    ​                        /* we silently let this pass to avoid breaking code
       * with JSON in string literals (e.g. "\"\u202e\""
                              */
                             *t++ = '\\';
                             *t++ = 'u';
                             break;
                         } else {
                             /* on the other hand, invalid \u{blah} errors */
                             s++;
                             len++;
                             s++;
                             while (*s != '}') {
                                 if (!ZEND_IS_HEX(*s)) {
                                     valid = 0;
                                     break;
                                 } else {
                                     len++;
                                 }
                                 s++;
                             }
                             if (*s == '}') {
                                 valid = 1;
                                 len++;
                             }
                         }
         ​                /* \u{} is invalid */
         ​                if (len  0x10FFFF || errno) {
         ​                    zend_throw_exception(zend_ce_parse_error,
         ​                        "Invalid UTF-8 codepoint escape sequence: Codepoint too large", 0);
         ​                    zval_ptr_dtor(zendlval);
         ​                    ZVAL_UNDEF(zendlval);
         ​                    return FAILURE;
         ​                }
         ​                /* based on https://en.wikipedia.org/wiki/UTF-8#Sample_code */
         ​                if (codepoint > 6) + 0xC0;
         ​                    *t++ = (codepoint & 0x3F) + 0x80;
         ​                } else if (codepoint > 12) + 0xE0;
         ​                    *t++ = ((codepoint >> 6) & 0x3F) + 0x80;
         ​                    *t++ = (codepoint & 0x3F) + 0x80;
         ​                } else if (codepoint > 18) + 0xF0;
         ​                    *t++ = ((codepoint >> 12) & 0x3F) + 0x80;
         ​                    *t++ = ((codepoint >> 6) & 0x3F) + 0x80;
         ​                    *t++ = (codepoint & 0x3F) + 0x80;
         ​                }
         ​            }
         ​            break;
         ​        default:
         ​            /* check for an octal */
         ​            if (ZEND_IS_OCT(*s)) {
         ​                char octal_buf[4] = { 0, 0, 0, 0 };
         ​                octal_buf[0] = *s;
         ​                if (ZEND_IS_OCT(*(s+1))) {
         ​                    octal_buf[1] = *(++s);
         ​                    if (ZEND_IS_OCT(*(s+1))) {
         ​                        octal_buf[2] = *(++s);
         ​                    }
         ​                }
         ​                if (octal_buf[2] && (octal_buf[0] > '3') && !SCNG(heredoc_scan_ahead)) {
         ​                    /* 3 octit values must not overflow 0xFF (\377) */
         ​                    zend_error(E_COMPILE_WARNING, "Octal escape sequence overflow \\%s is greater than \\377", octal_buf);
         ​                }
         ​                *t++ = (char) ZEND_STRTOL(octal_buf, NULL, 8);
         ​            } else {
         ​                *t++ = '\\';
         ​                *t++ = *s;
         ​            }
         ​            break;
         ​    }
         } else {
         ​    *t++ = *s;
         }
         if (*s == '\n' || (*s == '\r' && (*(s+1) != '\n'))) {
             CG(zend_lineno)++;
         }
         s++;
         }
         *t = 0;
         Z_STRLEN_P(zendlval) = t - Z_STRVAL_P(zendlval);
    skip_escape_conversion:
        if (SCNG(output_filter)) {
            size_t sz = 0;
            unsigned char *str;
            // TODO: avoid realocation ???
            s = Z_STRVAL_P(zendlval);
            SCNG(output_filter)(&str, &sz, (unsigned char *)s, (size_t)Z_STRLEN_P(zendlval));
            zval_ptr_dtor(zendlval);
            ZVAL_STRINGL(zendlval, (char *) str, sz);
            efree(str);
        }
        return SUCCESS;
    }
lex_scan首先对LNUM之类的数据使用正则定义其结构。再分别对exit之类的关键词定义其分析方法。
由于这一段的代码过于长，所以仅作出部分粘贴。
lex_scan是根据re2c得到语法分析
其定义了
    LNUM    [0-9]+(_[0-9]+)*
    DNUM    ({LNUM}?"."{LNUM})|({LNUM}"."{LNUM}?)
    EXPONENT_DNUM    (({LNUM}|{DNUM})[eE][+-]?{LNUM})
    HNUM    "0x"[0-9a-fA-F]+(_[0-9a-fA-F]+)*
    BNUM    "0b"[01]+(_[01]+)*
    ONUM    "0o"[0-7]+(_[0-7]+)*
    LABEL    [a-zA-Z_\x80-\xff][a-zA-Z0-9_\x80-\xff]*
    WHITESPACE [ \n\r\t]+
    TABS_AND_SPACES [ \t]*
    TOKENS [;:,.|^&+-/*=%!~$<>?@]
    ANY_CHAR [^]
    NEWLINE ("\r"|"\n"|"\r\n")
作为基础结构单元的正则表达式。
    "exit" {
        RETURN_TOKEN_WITH_IDENT(T_EXIT);
    }
    "die" {
        RETURN_TOKEN_WITH_IDENT(T_EXIT);
    }
    "fn" {
        RETURN_TOKEN_WITH_IDENT(T_FN);
    }
    "function" {
        RETURN_TOKEN_WITH_IDENT(T_FUNCTION);
    }
    "const" {
        RETURN_TOKEN_WITH_IDENT(T_CONST);
    }
    "return" {
        RETURN_TOKEN_WITH_IDENT(T_RETURN);
    }
    "#[" {
        enter_nesting('[');
        RETURN_TOKEN(T_ATTRIBUTE);
    }
    "yield"{WHITESPACE}"from"[^a-zA-Z0-9_\x80-\xff] {
        yyless(yyleng - 1);
        HANDLE_NEWLINES(yytext, yyleng);
        RETURN_TOKEN_WITH_IDENT(T_YIELD_FROM);
    }
对exit，die，fn做出分别定义，执行RETURN_TOKEN_WITH_IDENT
    #define RETURN_TOKEN_WITH_IDENT(_token) do { \
            token = _token; \
            goto emit_token_with_ident; \
        } while (0)
emit_token_with_ident
    emit_token_with_ident:
        if (PARSER_MODE()) {
            elem->ident = SCNG(yy_text);
        }
        if (SCNG(on_event)) {
            SCNG(on_event)(ON_TOKEN, token, start_line, yytext, yyleng, SCNG(on_event_context));
        }
        return token;
这一部分就是将代码抽象化后存储。
上面这一部分是对基本代码结构即一个表达式的组成元素，变量及其类型，命令式函数及其组成部分和类型进行分析。
下面我们对特殊语法结构进行分析
zend对特殊结构使用BNF进行分析，代码在zend_ini_parser中。
首先是对基本组成单元进行划分
    %expect 0
    %define api.prefix {ini_}
    %define api.pure full
    %define api.value.type {zval}
    %define parse.error verbose
    %token END 0 "end of file"
    %token TC_SECTION
    %token TC_RAW
    %token TC_CONSTANT
    %token TC_NUMBER
    %token TC_STRING
    %token TC_WHITESPACE
    %token TC_LABEL
    %token TC_OFFSET
    %token TC_DOLLAR_CURLY
    %token TC_VARNAME
    %token TC_QUOTED_STRING
    %token BOOL_TRUE
    %token BOOL_FALSE
    %token NULL_NULL
    %token END_OF_LINE
    %token '=' ':' ',' '.' '"' '\'' '^' '+' '-' '/' '*' '%' '$' '~' '' '?' '@' '{' '}'
    %left '|' '&' '^'
    %precedence '~' '!'
    %destructor { zval_ini_dtor(&$$); } TC_RAW TC_CONSTANT TC_NUMBER TC_STRING TC_WHITESPACE TC_LABEL TC_OFFSET TC_VARNAME BOOL_TRUE BOOL_FALSE NULL_NULL cfg_var_ref constant_literal constant_string encapsed_list expr option_offset section_string_or_value string_or_value var_string_list var_string_list_section
    %%
随后对语句进行抽象描述并一步一步划分成更小的单元。
    statement_list:
            statement_list statement
        |    %empty
    ;
    statement:
            TC_SECTION section_string_or_value ']' {
    #if DEBUG_CFG_PARSER
                printf("SECTION: [%s]\n", Z_STRVAL($2));
    #endif
                ZEND_INI_PARSER_CB(&$2, NULL, NULL, ZEND_INI_PARSER_SECTION, ZEND_INI_PARSER_ARG);
                zend_string_release(Z_STR($2));
            }
        |    TC_LABEL '=' string_or_value {
    #if DEBUG_CFG_PARSER
                printf("NORMAL: '%s' = '%s'\n", Z_STRVAL($1), Z_STRVAL($3));
    #endif
                ZEND_INI_PARSER_CB(&$1, &$3, NULL, ZEND_INI_PARSER_ENTRY, ZEND_INI_PARSER_ARG);
                zend_string_release(Z_STR($1));
                zval_ini_dtor(&$3);
            }
        |    TC_OFFSET option_offset ']' '=' string_or_value {
    #if DEBUG_CFG_PARSER
                printf("OFFSET: '%s'[%s] = '%s'\n", Z_STRVAL($1), Z_STRVAL($2), Z_STRVAL($5));
    #endif
                ZEND_INI_PARSER_CB(&$1, &$5, &$2, ZEND_INI_PARSER_POP_ENTRY, ZEND_INI_PARSER_ARG);
                zend_string_release(Z_STR($1));
                zval_ini_dtor(&$2);
                zval_ini_dtor(&$5);
            }
        |    TC_LABEL    { ZEND_INI_PARSER_CB(&$1, NULL, NULL, ZEND_INI_PARSER_ENTRY, ZEND_INI_PARSER_ARG); zend_string_release(Z_STR($1)); }
        |    END_OF_LINE
    ;
我们以switchcase为例
在zend_language_parser中，定义了switchcase的结构，如下图
    switch_case_list:
      669:         '{' case_list '}'                    { $$ = $2; }
      670:     |    '{' ';' case_list '}'                { $$ = $3; }
      671:     |    ':' case_list T_ENDSWITCH ';'        { $$ = $2; }
      672:     |    ':' ';' case_list T_ENDSWITCH ';'    { $$ = $3; }
      673  ;
switchcase可能存在单个case或者多个case。1是对单case的正则。2是对多个的正则。3是单case的结束判断，4是多case的结束判断。
其中T_ENDSWITCH在zend_language_parser定义，是关键词endswitch
case_list定义如下
    case_list:
      676:         %empty { $$ = zend_ast_create_list(0, ZEND_AST_SWITCH_LIST); }
      677      |    case_list T_CASE expr case_separator inner_statement_list
      678:             { $$ = zend_ast_list_add($1, zend_ast_create(ZEND_AST_SWITCH_CASE, $3, $5)); }
      679      |    case_list T_DEFAULT case_separator inner_statement_list
      680:             { $$ = zend_ast_list_add($1, zend_ast_create(ZEND_AST_SWITCH_CASE, NULL, $4)); }
      681  ;
根据结构empty case_list T_CASE expr case_separator inner_statement_list case_list
T_DEFAULT case_separator inner_statement_list分别进行存储。
其中expr case_separator
inner_statement_list分别在后面有定义，其中case_separator是对：；进行匹配。其他也是类似。分析就到此结束，lexical
scanner的抽象化方式是使用了re2c的正则匹配
## 最后
水平有限，欢迎指教
_作者：DR[@03](https://github.com/03 "@03")@星盟_