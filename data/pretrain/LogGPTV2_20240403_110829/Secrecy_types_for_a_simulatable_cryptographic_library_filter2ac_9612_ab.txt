be used for initial exchange of secrets). A particular ideal system
is the simulatable cryptographic library. It contains a structure for
each possible number n of honest parties, this structure is made up
of a single machine THn that has ports inui ? and outui ! for com-
municating with the i-th party and ports ina? and outa! for commu-
nicating with the adversary. The i-th party sends API calls to THn
on the channel inui and receives answers on outui. Also, when a
message is sent to the i-th party through THn then it also reaches
the party through the channel outui. In a corresponding real struc-
ture, there is a machine Mi for each party, these machines use real
cryptographic primitives [24, 45] for securing the messages.
The main component of THn is the database of terms. The
database records for each term its subterms and the parties that
“know” that term. The parties and the adversary access the terms
through handles that by itself are just consecutive integers; hence
they contain no information about the contents of the database. The
sending of messages from one party to another therefore has to be
done with the help of THn in translating the handles. The machine
THn offers to the honest parties and the adversary the functionality
to store (command store) “raw data” (i.e. arbitrary bit-strings) in-
side THn and to retrieve (command retrieve) them (by its handle);
to build up lists of terms (command list) and to take components
of lists (command list proj); to construct new nonces (gen nonce),
public encryption and private decryption keys (gen enc keypair),
and symmetric encryption/decryption keys (gen symenc key); to
encrypt (encrypt and sym encrypt) lists and to decrypt (decrypt
and sym decrypt) the resulting ciphertexts; to ﬁnd either the type
(get type) or the length (get len) of a term. Two terms may be
compared for equality, this is done by comparing their handles. A
party can also send a term, which must be a list, to another party ei-
ther over a secure, authentic or insecure channel. A term sent over
authentic channel is also sent to the adversary; a term sent over in-
secure channel is sent only to the adversary. The adversary can send
messages to honest parties over insecure channels. The adversary
can also insert “garbage” terms (command adv garbage) to the
database. As a departure from the Dolev-Yao model, one can de-
termine the public key from an asymmetric ciphertext (pk of enc)
or the identity of the key (not the key itself) from a symmetric ci-
phertext, so the encryption, as modeled by THn, is key-revealing
(type-3 in terms of [6]). Also, the adversary may create invalid ci-
phertexts (both symmetric (adv unknown symenc) and asymmet-
ric (adv invalid ciph)). For the symmetric encryption, the adver-
sary may later also ﬁx (adv (cid:12)x symenc content) the encryption
key and the plaintext, as long as it has a handle to both of them.
The cryptographic library also contains digital signatures and
symmetric authenticators, but as we are not going to handle them
in the current paper (although the necessary extensions should not
be difﬁcult), we will not describe them here.
Let us also describe the scheduling of machines. Only one ma-
chine runs at a time, and it processes a single input from a single
input port. Besides input and output ports the channels also have
clock ports, denoted c/! for a channel c. The messages currently
on a channel c are stored in a buffer, messages written to c! are
appended to this buffer. When a machine M runs, it may write an
integer to exactly one of the clock ports it has. If it does so (writes
i to c/!) and the buffer of c has at least i messages waiting then the
i-th message is removed from the buffer and passed to the machine
M 0 having the port c?, the machine M 0 will run next. Otherwise
the adversary will run next. The machine THn has clock ports for
channels outui and outa. Whenever it writes something to these
channels, it follows it by 1 on the corresponding clock port. The
parties are supposed to have the ports inui
/!, this allows THn to be
used as a subroutine when operating with terms. Note, however,
that when a party commands THn to send a message to someone
then the control is not returned to that party.
There is a caveat related to the simulatability of THn by the real
structure (M1; : : : ; Mn) — the user H may not be completely ar-
bitrary. For the simulatability to hold, a condition regarding the
usage of symmetric keys must be true. In [9] the condition, called
NoComm, states that H must ensure that a symmetric key k either
becomes known to the adversary before it is used, or that whenever
a term containing k is sent over a channel that the adversary can
read, the subterm containing k must be encrypted by some other
key k0 for which the adversary does not know the decryption key.
Moreover, to enable the use of hybrid argument [23, Chap. 3] in the
simulatability proof, it must be known statically which symmetric
key encrypts which one. In [9] this is formalized by ordering the
keys by their ﬁrst use as encryption keys and requiring that a key
may only be encrypted under keys whose ﬁrst use was earlier. We
formalize this by ﬁxing the “order” — a positive integer — of a
symmetric key when it is created and require that a key may only
be encrypted by keys of higher order. The order is ﬁxed by giv-
ing it as an argument to the command gen symmetric key of THn.
The machine THn is supposed to just discard that argument, but
its presence in the view of THn is necessary for the simulatability
proof. More precisely, the order given to symmetric keys allows us
to give an order to each term in the database — the order of lists is
the maximum order of their components, and the order of terms that
are neither symmetric keys nor lists is 0. We then require the order
of the symmetric key to be higher than the order of the plaintext.
4. THE PROCESS CALCULUS
The functionality of the protocol is provided to the users of the
protocol in the form of a structure Cn (for n users). The struc-
ture C consists of the machines Mi (1 (cid:20) i (cid:20) n) realizing the
cryptographic primitives for the i-th party, and of the machines Pi
that execute the instructions (of the i-th party) that make up the
actual protocol. The process calculus is used to program the par-
ticipants Pi of the protocol. The machine Pi must have the ports
/! to communicate with the machine Mi. We
inui !, outui ? and inui
let the communication with the i-th user to go over the channels
pinui and poutui in the form of API calls, i.e. these channels are
/!,
secure. The machine Pi has the ports pinui ?, poutui ! and poutui
all messages from Pi to the user are scheduled immediately.
The simulatability result for the cryptographic library [12, 9]
n consisting
n in the
states that Cn is at least as secure as the structure C 0
of THn and P1; : : : ; Pn. Hence we analyse the structure C 0
rest of the paper.
The process calculus is designed to be quite similar to the spi-
calculus [4]. As mentioned in the introduction, we make explicit
the selection of a thread for each incoming message. In some ap-
proaches where complexity-theoretic security deﬁnitions are used
and therefore nondeterminism cannot be employed, the adversary
is allowed to choose which thread handles the received message.
We think that this is not the right design decision because the infor-
mation that is available to the honest party, but not to the adversary,
should be able to inﬂuence which thread handles the incoming mes-
sage. I.e. the decision should be made by the honest party itself.
As a minimal addition supporting that decision-making we add the
“invalid input” command II to the calculus. When a thread ex-
ecutes the command II, its computations since the last input are
discarded and the received message is passed to the next thread.
The task of the semantics of the process calculus is to describe
how the state of C 0
n evolves in response to the inputs it may receive
from the users (over the ports pinui ?) and from the adversary (over
the port ina?). A state C of C 0
n consists of the following elements:
(cid:15) The contents O of the database of THn.
(cid:15) The states Si of the machines Pi.
(cid:15) The multisets of messages Li!j
on secure and authentic
channels that have not yet been delivered to their recipients
(the adversary schedules these channels as well). Here 1 (cid:20)
i; j (cid:20) n and c 2 fs; ag.
c
The possible actions are various inputs from the adversary and the
users (external actions), and the internal actions. The state of each
Pi contains a bit showing whether Pi is currently active or not; at
most one Pi can be active at any time. If there is an active Pi then
the next executed action is internal, otherwise it is external. Of
course, we have to make sure that the semantics, as we deﬁne it, is
actually executable by C 0
n.
In the following we deﬁne the expressions and the processes and
explain how an expression is evaluated and how a process evolves.
Afterwards we explain how the states Si, which consists mainly of
a list of processes, and the state C evolve. The omitted details can
be found in [34].
Let Var be the set of variables; it is a countable set. The values
of the variables will be integers, they may be interpreted either as
bit-strings (i.e. the “raw data” exchanged with the protocol user)
or term handles (the database of THn maps them to terms). In the
v ::= n j ?
e
::= n j keypair
x
j
j ? j gen symenc key(i)
j pubkey(e)
retrieve(e)
j
j privenc(ek; et)
j privdec(ek; et)
store(e)
j
j pubenc(ek; et)
j pubdec(ek; et)
list(e1; : : : ; ek)
j
j
list proj(e; i)
j gen nonce
Figure 1: Values and arithmetic expressions
keypair (cid:17) (cid:25)1(gen enc keypair())
pubkey(e) (cid:17) e + 1
pubenc(ek; et) (cid:17) encrypt(ek; list(et))
pubdec(ek; et) (cid:17) list proj(decrypt(ek; et); 1)
privenc(ek; et) (cid:17) sym encrypt(ek; list(et))
privdec(ek; et) (cid:17) list proj(sym decrypt(ek; et); 1)
Figure 2: Derived expressions
SIP ::= receivec(xp; x)
IP ::= SIP j
!SIP
::= IP :P
I
I (cid:3)
::= 0
P ::= I (cid:3)
j
j
I j I (cid:3)
II
j
sendc(ep; e):I (cid:3)
j
j
let x := e in P else P 0
if e = e0 then P else P 0
Figure 3: The process calculus
following we denote the elements of Var by x (with subscripts).
The values v, expressions e, processes P (corresponding to active
threads) and input processes I (corresponding to inactive threads)
are deﬁned in Fig. 1 and Fig. 3. Here n and i are integers. The
expressions that are not underlined directly correspond to the com-
mands of THn of the same name. The other expressions correspond
to certain sequences of commands, given in Fig. 2. The reason for
their introduction is to hide that THn only allows lists to be plain-
texts, and that gen enc keypair returns handles for both the secret
and the public key. Hence keypair actually returns the secret key.
The participant Pi evaluates a closed (i.e. without free variables)
expression e inductively over the expression structure, by sending
the respective commands to THn and getting back their values. If
the evaluation of any subexpression fails (i.e. returns ?; denoted #
in [12]) then the value of the whole expression is ?, too. In the full
paper we give a precise deﬁnition of the relation e O+i
O0 v meaning
that e, if evaluated by Pi with the contents O of the database of
THn, results in v and the contents of the database becomes O0.
As next, let us describe the execution of a process P by an active
Pi. Both I (cid:3) and II denote deactivated processes, but they are han-
dled differently by Pi. Let Chan (cid:18) N be the set of abstract chan-
nels. An abstract channel is used to group messages sent between
protocol participants, as well as between the protocol user and par-
ticipant (although the abstract channel does not alone determine the
sender and the receiver of a message). The set Chan is partitioned
into four parts, denoted Chanc, where c 2 fs; a; i; ug. If a mes-
sage is sent on an abstract channel from Chans [resp. Chana,
Chani] then it means that the message travels between protocol
participants over a secure (resp. authentic, insecure) channel. If a
message is sent on an abstract channel from Chanu then it travels
between the protocol user and the protocol participant (i.e. over one
of the channels pinui or poutui). Let us assume that jChanuj = 1,
because the type system has to handle all inputs from the user iden-
tically anyway. The process sendc(ep; e):I (cid:3) evaluates e as v and
ep as vp.
If neither of them is ? then it sends v to the partic-
ipant vp “over the abstract channel c” (unless c 2 Chanu, in
this case v is simply handed over to the user). This means that
list(store(c); v) is sent to vp over the secure / authentic / insecure
channel, depending on c. The process then becomes I (cid:3). The pro-
cess let x := e in P else P 0 evaluates e as v. If v 6= ? then
it becomes Px v otherwise it becomes P 0. I.e. here x is bound
in P but not in P 0. The process if e = e0 then P else P 0 eval-
uates both e and e0, compares them and becomes either P or P 0,
depending on the result.
The state Si of Pi can be inactive or active. An inactive Si is
just a list of closed input processes. It is activated by a message
arriving at the port outui ? or pinui ?. An active Si contains that
message; let cv be the abstract channel over which it arrived, u its
(apparent) sender, and m its contents. If the message read from
outui ? is not of the shape created by a send-command then Si is
immediately deactivated again. An active state also contains the list
of input processes I (cid:3)
pre that have already processed the message and
have rejected it, the currently running process (may be missing) and
the list of input processes I (cid:3)