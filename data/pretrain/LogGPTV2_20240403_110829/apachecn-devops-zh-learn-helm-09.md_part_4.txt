# 配置 RBAC 规则
Kubernetes 中认证用户执行操作的能力由一组 RBAC 策略控制。正如在*第 2 章*、*准备 Kubernetes 和 Helm 环境*中介绍的，策略(称为角色)可以与用户或服务帐户相关联，Kubernetes 包含几个可以关联的默认角色。从版本`1.6`开始，在 Kubernetes 中默认启用了 RBAC。在 Helm 用法的背景下考虑 Kubernetes RBAC 时，您需要考虑两个因素:
*   用户正在安装 Helm 图表
*   与运行工作负载的 pod 关联的服务帐户
在大多数情况下，负责安装 Helm 图表的个人与 Kubernetes 用户相关联。但是，可以通过其他方式安装 Helm 图表，例如由具有相关服务帐户的 Kubernetes 运营商安装。
默认情况下，用户和服务帐户在 Kubernetes 集群中具有最低权限。通过使用作用于单个命名空间的角色，或者在群集级别授予访问权限的群集角色，可以授予额外的权限。然后，根据目标策略的类型，使用角色绑定或集群角色绑定将它们与用户或服务帐户相关联。虽然 Kubernetes 有许多可以应用的角色，但是**最低权限访问**的概念应该尽可能地使用。最低权限访问指的是用户或应用仅被授予正常运行所需的最低权限集。比如我们之前开发的`guestbook`图。假设我们想要添加新的功能，可以在`guestbook`应用的名称空间中查询 pods 的元数据。
虽然 Kubernetes 包含一个名为**视图**的内置角色，该角色提供了在给定的命名空间中读取 pod 清单的必要权限，但它也提供了对其他资源的访问，例如配置地图和部署。为了最小化授予应用的访问级别，可以创建角色或集群角色形式的自定义策略，该策略仅提供应用所需的必要权限。由于 Kubernetes 集群的大多数典型用户无权在集群级别创建资源，因此让我们创建一个应用于 Helm 图表所部署的命名空间的角色。
要创建新角色，可以使用`kubectl create role`命令。基本角色包含两个关键要素:
*   针对 Kubernetes 应用编程接口的动作类型(动词)
*   要瞄准的 Kubernetes 资源列表
例如，为了演示如何在 Kubernetes 中配置 RBAC，让我们配置一组 RBAC 规则，以允许经过身份验证的用户查看命名空间中的 pods。
重要说明
如果您想在本地工作站上运行此示例，请确保首先通过运行`minikube start`启动 Minikube。
然后，您可以通过运行`kubectl create ns chapter9`来创建一个名为`chapter9`的新命名空间:
1.  Use the `kubectl` CLI to create a new role called `guestbook-pod-viewer`:
    ```
    $ kubectl create role guestbook-pod-viewer --resource=pods --verb=get,list -n chapter9
    ```
    创建这个新角色后，它需要与用户或服务帐户相关联。由于我们希望将其与在 Kubernetes 中运行的应用相关联，因此我们将把该角色应用于服务帐户。当一个 pod 被创建时，它使用一个名为`default`的服务帐户。当试图遵守最低权限访问原则时，建议使用单独的服务帐户。这是为了确保没有其他工作负载部署在与`guestbook`应用相同的名称空间中，因为它也将继承相同的权限。
2.  通过执行以下命令创建名为`guestbook`的新服务帐户:
    ```
    $ kubectl create sa guestbook -n chapter9
    ```
3.  Next, create a role binding called `guestbook-pod-viewers` to associate `guestbook-pod-viewer` with `guestbook ServiceAccount`:
    ```
    $ kubectl create rolebinding guestbook-pod-viewers --role=guestbook-pod-viewer --serviceaccount=chapter9:guestbook -n chapter9
    ```
    最后，要使用新创建的`guestbook` `ServiceAccount`运行`guestbook`应用本身，需要将服务帐户的名称应用到部署中。
    下图显示了`serviceAccount`配置在部署 YAML 中的显示方式:
    ```
    serviceAccountName: guestbook
    ```
    您可以通过使用您在 [*第 5 章*](05.html#_idTextAnchor265)*中创建的图表来轻松安装`guestbook`应用，或者通过使用位于 https://github.com/PacktPublishing/-Learn 帕克特存储库中的[图表来轻松安装](https://github.com/PacktPublishing/-Learn-Helm/tree/master/helm-charts/charts/guestbook)[应用。此图表显示了一组用于配置部署服务帐户的值。](https://github.com/PacktPublishing/-Learn-Helm/tree/master/helm-charts/charts/guestbook)*
4.  Install the `guestbook` Helm chart by running the following command:
    ```
    $ helm install my-guestbook Learn-Helm/helm-charts/charts/guestbook \
    --set serviceAccount.name=guestbook \
    --set serviceAccount.create=false \
    -n chapter9
    ```
    注意在*第 4 步*中，`serviceAccount.create`值被设置为`false`。当您使用`helm create`命令在 [*第 5 章*](05.html#_idTextAnchor265)*构建您的第一个 Helm 图表*时，提供了在图表安装时创建服务帐户的能力。由于您之前已经使用`kubectl`创建了服务帐户，因此不需要这样做。但是，在图表安装过程中创建与 RBAC 相关的其他资源的能力并不需要以创建服务帐户结束。事实上，如果 Helm 图表包含创建角色和角色绑定所需的 YAML 资源，您可以在单个图表安装中执行步骤 1、2 和 3。
5.  At this point, the `guestbook` application has the permissions necessary to list and get pods. To verify this assumption, `kubectl` has a command that queries whether a user or service account has the authority to perform an action. Execute the following command to verify that the `ServiceAccount` guestbook has access to query all the pods in the `guestbook` namespace:
    ```
    $ kubectl auth can-i list pods --as=system:serviceaccount:chapter9:guestbook -n chapter9
    ```
    `--as`标志利用 Kubernetes 中的用户模拟功能，允许调试授权策略。
6.  命令的结果应打印`yes`作为输出。要确认服务帐户无法访问它不应该能够访问的资源，例如列出部署，请执行以下命令:
    ```
    $ kubectl can-i list deployments --as=system:serviceaccount:guestbook:guestbook -n chapter9
    ```
7.  Feel free to delete your release with the `helm uninstall` command:
    ```
    $ helm uninstall my-guestbook -n chapter9
    ```
    您也可以停止您的 Minikube 实例，这在本章的剩余部分是不需要的:
    ```
    $ minikube stop
    ```
从`no`的输出可以看出，预期的政策已经到位。
当有效使用时，Kubernetes·RBAC 帮助为 Helm chart 开发人员提供实施最低权限访问所需的工具，保护用户和应用免受潜在的错误或恶意操作。
接下来，我们将讨论如何以增强 Helm 整体安全性的方式保护和访问图表存储库。
# 访问安全图表库
图表存储库提供了发现 Helm 图表并将其安装在你的 Kubernetes 集群上的能力。第 1 章**[*中介绍了存储库:理解 Kubernetes 和 Helm**理解 Kubernetes 和 Helm*，作为一个 HTTP 服务器，它包含一个`index.yaml`文件，其中包含与存储库中存在的图表相关的元数据。在前面的章节中，我们使用了来源于各种上游存储库的图表，并使用 GitHub Pages 实现了我们自己的存储库。这些存储库中的每一个都可以免费提供给任何感兴趣的人使用。但是，Helm 确实支持加入额外的安全措施来保护存储在存储库中的内容，包括以下内容:](01.html#_idTextAnchor017)**
 **   证明
*   **安全套接字层** / **传输层安全** ( **SSL** / **TLS** )加密
虽然大多数公共 Helm 存储库不需要任何形式的身份验证，但 Helm 确实允许用户针对安全的图表存储库执行基本的和基于证书的身份验证。对于基本身份验证，通过使用`--username`和`--password`标志，使用`helm repo add`命令添加存储库时，可以提供用户名和密码。例如，如果您想要访问使用基本身份验证保护的存储库，添加存储库将采用以下形式:
```
$ helm repo add $REPO_URL --username= --password=
```
然后，可以与存储库交互，而不需要重复提供凭证。
对于基于证书的身份验证，`helm repo add`命令提供了`--ca-file`、`--cert-file`和`--key-file`标志。`--ca-file`标志用于验证图表存储库的证书授权，而`--cert-file`和`--key-file`标志分别用于指定您的客户端证书和密钥。
对图表存储库本身启用基本身份验证和证书身份验证取决于所使用的存储库实现。例如，流行的图表存储库 ChartMuseum 提供了`--basic-auth-user`和`--basic-auth-pass`标志，可在启动时用于配置基本身份验证的用户名和密码。它还提供了`--tls-ca-cert`标志来配置**证书颁发机构** ( **CA** )证书进行证书认证。其他图表存储库实现可能会提供其他标志或要求您提供配置文件。
即使身份验证到位，安全地促进 HTTP 服务器和 Helm 客户端之间的传输也很重要。这可以使用基于安全套接字层(SSL) /传输层安全性(TLS)的加密来执行，以保护您的 Helm 客户端和您的 Helm 图表存储库之间的通信。虽然需要证书身份验证，但需要基本身份验证的存储库(和未经身份验证的存储库)仍然可以从加密网络流量中受益，因为这将保护身份验证尝试以及存储库的内容。与身份验证一样，在图表存储库中配置 TLS 取决于所使用的存储库实现。ChartMuseum 提供`--tls-cert`和`--tls-key`标志来提供证书链和密钥文件。更一般的网络服务器，如 NGINX，通常需要一个配置文件，提供服务器上证书和密钥文件的位置。GitHub Pages 等产品已经配置了顶级域名系统。
到目前为止，我们使用的每一个 Helm 存储库都使用了由公开可用的 ca 签名的证书，这些证书存储在您的网络浏览器和底层操作系统中。许多大型组织都有自己的 ca，可以用来生成图表存储库中配置的证书。由于该证书可能不是来自公共可用的证书颁发机构，Helm CLI 可能不信任该证书，添加存储库会导致以下错误:
```
Error: looks like '$REPO_URL' is not a valid chart repository or cannot be reached: Get $REPO_URL/index.yaml: x509: certificate signed by unknown authority
```
为了允许 Helm CLI 信任图表存储库的证书，可以将 CA 证书或包含多个证书的 CA 捆绑包添加到操作系统的信任存储中，或者使用`helm repo add`命令的`--ca-file`标志明确指定。这使得命令可以毫无错误地执行。
最后，根据图表存储库的配置方式，还可以获得额外的指标来执行请求级审核和日志记录，以确定谁试图访问存储库。
通过使用管理传输层的认证和管理证书，为韩恩实现了额外的功能覆盖了 Helm 存储库的安全足迹。
# 总结
在本章中，您了解了在使用 Helm 时需要考虑的一些不同的安全主题。首先，您学习了如何证明数据来源以及 Helm 版本和 Helm 图表的完整性。接下来，您学习了 Helm 图表安全性，以及图表开发人员如何利用安全性方面的最佳实践来编写稳定且安全的 Helm 图表。最后，您学习了如何使用 RBAC 来创建基于最低权限访问概念的环境，以及如何保护图表存储库以提供 HTTPS 加密并要求身份验证。现在，有了这些概念，您可以更好地创建一个 s ecure Helm 架构和工作环境。
# 进一步阅读
*   要了解更多关于 Helm c harts 环境中数据来源[和完整性的信息，请访问](https://helm.sh/docs/topics/provenance/)[https://helm.sh/docs/topics/provenance/](https://helm.sh/docs/topics/provenance/)。
*   要了解更多关于 Kubernetes RBAC 的信息，请查看 ubernetes.io/docs/reference/access-authn-authz/rbac/.Kubernetes 文档中的*使用 RBAC 授权* [*授权*页面](https://kubernetes.io/docs/reference/access-authn-authz/rbac/)
*   查看 Helm docu [中的图表存储库指南，了解更多关于图表存储库](https://helm.sh/docs/topics/chart_repository/)和 t[https://helm.sh/docs/topics/chart_repository/](https://helm.sh/docs/topics/chart_repository/)的信息。
# 问题
1.  什么是数据来源和完整性？数据来源和数据完整性有何不同？
2.  假设您想要证明 Helm 下载的数据来源和完整性。除了发布档案，用户需要从 Helm 的 GitHub 发布页面下载什么文件来完成这个任务？
3.  用户可以运行什么命令来验证 Helm 图表的数据来源和完整性？
4.  作为一名 Helm 图表开发人员，您可以做些什么来确保部署稳定的容器映像？
5.  为什么在你的 Helm 图表上设置资源限制很重要？还有哪些 Kubernetes 资源可以用来配置 pod 和命名空间的资源限制？
6.  最小权限访问的概念是什么？哪些 Kubernetes 资源允许您配置授权并帮助实现最低权限访问？
7.  什么命令和标志集可用于针对图表存储库进行身份验证？*