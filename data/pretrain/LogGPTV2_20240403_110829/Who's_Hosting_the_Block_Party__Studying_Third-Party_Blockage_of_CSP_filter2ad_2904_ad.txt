1,472
76
895
536
either
3,530
2,717
1,372
1,236
794
at
least one mode per category. We ﬁnd that business is
the most prevalent category for both compatibility modes,
again likely relating to advertisement. While IAB19 is again
second (as it was for inclusion of remote content), IAB14
(Society) is third-most prevalent overall, yet primarily for its
usage of inline scripts/event handlers. Taking a closer look
at the data, we ﬁnd that this is caused Twitter, whose scripts
from platform.twitter.com alone are responsible for
1,294 sites that require unsafe-inline. The results for
this analysis paint a similar picture for the one of included
host, conﬁrming the long-held beliefs that the advertisement
industry hinders CSP deployments with empirical evidence.
It
though,
is worth noting,
that simply blaming the ad
industry is unfair. While their code contributes to many
incompatibilities, we ﬁnd that removing the categories related
to advertisement, 6,213 sites contain other dependencies that
require the unsafe keywords. This highlights that simply
convincing the ad industry to programmatically add scripts
and event handlers as well as stop relying on eval does not
sufﬁce, but rather a coordinated effort of virtually all third-
party content providers is necessary to remedy the situation.
C. strict-dynamic
As indicated in Section VI-A, the parties and hosts included
in the sites we analyzed ﬂuctuates signiﬁcantly over time. This
observation unveils issues of approaches such as CSPAuto-
gen [24], which rely on a ﬁxed set of hosts to generate the
CSP. As outlined in Section II-B, strict-dynamic was de-
veloped to alleviate this burden, enabling trusted scripts to pro-
grammatically add additional scripts. Speciﬁcally, this means
that all scripts must be added via the programmatic creation
of script elements (through document.createElement)
and the programmatic addition to the DOM (e.g., through
element.appendChild). Based on our crawl, in which
we collected information about how scripts are added at
runtime, we ﬁnd that only 1,414/8,041 (18%) sites would be
hindered from properly using strict-dynamic due to third
parties not adhering to this paradigm when adding additional
scripts. Unfortunately, using strict-dynamic mandates
the usage of nonces or hashes, which in turn means unsafe-
inline is ignored. And while it is feasible to attach nonces to
inline scripts or allow them through their hash, event handlers
cannot be allowed in this fashion. The only solution for
these issues is to use unsafe-hashes [37], yet another
compatibility mode. Looking back at Table IV, speciﬁcally
10
at third-party induced inline event handlers, 5,977 sites could
not use strict-dynamic without losing the functionality
provided by these handlers. We only ﬁnd 1,894/8,041 sites
third-party event handlers and where third parties
without
only programmatically add scripts. Hence,
the remaining
6,147/8,041 could not deploy strict-dynamic.
To conclude our hypothetical scenario, we have seen that
even if developers would want to get rid of the compatibility
modes, for 6,041 and 4,911 sites, respectively, they would need
the cooperation of at least one code contributor, and most
likely even multiple ones. We have seen instances in which
those contributors are even included over trust delegations,
begging the question of whether there is even an incentive for
these parties – given the lack of a direct business relation –
to change the codebase. This inability imposed by the sites’
business needs is particularly problematic given recent ideas of
requiring security features, e.g., a strict CSP, to allow the site
to access newly introduced browser APIs [19] or even disallow
existing APIs to be used given the lack of the respective
security feature. While such changes would force developers
to act and deploy security mechanisms, our analysis shows
that this would still require the cooperation of other parties
and can only be tackled by all the stakeholders involved in
the Web platform.
D. Real-World Impact on Deployed CSPs
To understand if our hypothetical scenario can be founded
by empiricism, we now turn to analyze the policies which
we encountered during our crawls. Out of the investigated
8,041 sites we found 1,052 to be using a CSP with either
default-src or script-src, meaning that they make
use of CSP’s functionality to restrict which scripts end up
running within their sites. Out of those 1,052 sites, 1,006
incorporate unsafe-inline without nonces or hashes. We
found that 707/1,006 sites have third parties that introduce
inline scripts. Notwithstanding necessary changes to the ﬁrst-
party code, this means those sites are bound to use unsafe-
inline to preserve functionality due to third-party code.
Conﬁrming our insights from Table IV, all of those besides
one site, though, also have inline scripts in the ﬁrst-party code.
In addition, 860 sites make use of unsafe-eval. Of those,
540 are partially hindered due to third parties, and 174 solely
due to third parties, i.e., ﬁrst-party code did not use eval.
These results not only conﬁrm that over 95% of policies are
insecure [39], but more importantly that between 63% (for
unsafe-eval) and 70% (for unsafe-inline) of all sites
have third parties that require the unsafe keywords, making
policies trivially bypassable.
VII. IMPAIRING SUBRESOURCE INTEGRITY
An orthogonal threat to XSS is the compromise of widely-
included resources. By default, external scripts are only re-
ferred to by their URL. Hence, if an adversary manages to
compromise the network link to such an external resource or
the server hosting it, they can freely change the content to
include malicious code. As outlined in Section II-C, SRI is
the ﬁles related to Google (Youtube, Ad Services, their API
platform), the observed changes were related to versioning;
in these cases,
the included script would merely add the
latest version of another script. While this makes sense from
a functionality point of view, as site operators never have
to update their inclusion URLs, it nevertheless makes SRI
deployment impossible. Arguably, though, the level of security
for these high-proﬁle companies may sufﬁce to ensure the
integrity of the scripts; in addition all of them were loaded
over HTTPS, rendering a man-in-the-middle attack infeasible.
To also assess the effect of less prominent contributors on
SRI feasibility, we exclude any script from an eTLD+1 from
which the top 20 changing scripts originate. Figure 4 also
shows the result if we disregard scripts from those hosts.
Here, we ﬁnd that 3,530 sites include at least one scripting
resource which changed its content within one crawl. This
means that 828 applications could enable SRI if only the top
players would ﬁx their content. Yet, the majority of sites could
still not deploy SRI for all their third-party inclusions, having
to hope their included parties do not suffer a compromise.
1) Programmatically Enforcing SRI: When looking at the
average number of different versions for a script under the
same location, we found around twelve distinct versions within
a snapshot. While SRI does not permit
to have multiple
integrity tags, assuming that this set of script variants is ﬁnite
and stable, one could resort to programmatically trying to add
a given script with all its possible hashes until one inclusion
succeeds; essentially allowing the twelve different hashes for
a dynamic script.
Looking in more detail at
the ﬁndings from Figure 4
for such domains with ﬁve dynamic scripts, 1,197 ﬁt that
bill. Hence, those applications would, on average, need to
incorporate around 60 different hashes to account for all
possible script hashes which we could observe. There is a
particularly long tail with 132 applications requiring around
240 different hashes solely to allow for the dynamic scripts.
To even attempt curating such a list, the ﬁrst party would need
to be informed about any changes in third-party scripts in real-
time. This also mandates that the ﬁrst party can vet any such
change in real-time and subsequently incorporate the changes
(be it additions or deletions). Given that this seems to be a
highly unlikely scenario, we ﬁnd that SRI cannot be used to
constrain the behavior of third-party script resources on the
current Web.
2) Undermining SRI Through Additional Inclusions: Be-
sides non-stable script resources, a second hindering factor
for comprehensive, site-wide SRI deployment for third-party
scripts is subsequent script inclusions done by these scripts.
As the ﬁrst party has no control over this subsequent script
inclusion process, it also has no way to enforce SRI pinning
for the additional scripts. Within our dataset, out of the 7,643,
which include code from third-party entities, 3,276 sites only
include stable, hence SRI-compatible scripts. Of those, 2,780
are subject to at least one further script inclusion conducted by
a pinnable third party. Thus, the overall number of sites, which
hypothetical could leverage SRI to ensure only security-vetted
Fig. 4. Sites with Dynamic Scripts
meant to provide a site with enhanced control over external
scripts, through the unambiguous speciﬁcation of the script
code’s expected hash. Arguably, this may not be desired by
the third party (e.g., to avoid breakage when a new version
of an advertisement library is released). However, for the ﬁrst
party, this is the only viable option to ensure their included
resource has not been changed in a malicious fashion.
As we have shown in Section V, Web sites extensively rely
on third parties to provide functionality. However, this in turn
widens the attack surface of the including application, since
it needs to rely on all included parties remaining uncompro-
mised. To ensure that a third-party compromise does not have
an adverse effect on their application, it is in the ﬁrst party’s
best interest to pin as many third-party scripts as possible.
In the following we, use our eSP notion to identify third-
party scripts and examine to which degree SRI deployment is
feasible to mitigate compromised inclusions.
A. Feasibility of SRI Enforcement
Since our crawlers collect not only the links to included
resources, but also their content, we can ascertain which
scripts are unstable, i.e., return different content for subsequent
requests. Speciﬁcally, we analyzed our ﬁrst snapshot from
January 135, and extracted all
those scripts that within a
single crawl (which takes less than 12 hours) returned different
content under the same URL. Figure 4 shows the number of
sites that have at least one third-party script with changing
content. We ﬁnd that this pattern occurs frequently, with 4,358
sites including such an instable script. The graph also indicates
that there is a large body of sites on which there are numerous
dynamic scripts. In the long tail, there are 200 sites with 15
such inclusions, and 132 with at least 20.
Table VII in the appendix shows the 20 most commonly
occurring scripts. We compared the different versions of the
scripts and found that the seven scripts related to Facebook
merely differ in a comment that indicates the JIT compile
time. In this case, the change does not alter functionality, and
the most widely used script alone affects 789 applications,
which cannot SRI-pin the included SDK script. Similarly,
for Amazon, we found that their ad script was unchanged
except for a recompilation, which caused a new comment
with a timestamp as well as randomized identiﬁer names. For
5We checked other snapshots and the January 13 results generalize
11
135791113151719#dynamicscripts020004000#sitesallwithoutmajorplayersscripts, comes down to merely 496.
B. SRI in the Wild
As the DevTools Protocol provides no API that allows for
retrieval of information about a speciﬁc script’s SRI usage
we need to obtain this information from the DOM directly.
We utilize a MutationObserver, which allows us to record
changes on any DOM nodes during execution. We register
this observer before the page is parsed, allowing us to capture
all script additions. Whenever we observe that a script with
the integrity attribute is introduced, we log this to our
database.
While SRI is used on a total of 1,562 sites, we found
that 626 of these only used SRI to pin popular libraries,
virtually all of which were jQuery or Bootstrap (in line with
what Chapuis et al. [4] found). We attribute this fact mainly
to the inclusion advice on the homepages of both projects,
which supply HTML code snippets already,
including the
integrity attribute. Since these applications exclusively
use SRI on library inclusions, we suspect that developers
merely use this mechanism by accident. For other libraries
(as indicated by retire.js), we could not ﬁnd such hints
which explains their lack of SRI pins.
Of the remaining 936 sites, another 22 only pinned ﬁrst-
party resources, which, in terms of content restriction, does
not provide any security improvements for the ﬁrst party. If
an attacker would be able to change the pinned resource, they
would most likely also be able to change the associated pin,
since according to our notion of an extended Same Party, the
two resources are both hosted by the same entity. This leaves
us with 914 sites on which SRI was actively used to ensure
the integrity of a third-party resource.
On 67 sites, we found that an SRI-pinned script included an-
other script without adding an integrity attribute. This subverts
the desired effect of SRI, namely to restrict what script code
is loaded to what was vetted by the developer. Essentially,
an attacker compromising the third party can tamper with
the indirectly included script. Furthermore, in 52 cases, the
unpinned inclusion belonged to a different party. Essentially,
this means that the ﬁrst-party pins are meaningless, as an at-
tacker can compromise the indirect inclusions. While the lack
of understanding of the SRI mechanism has been documented
by Chapuis et al. [4], this gives rise to reconsidering how SRI
is supposed to operate, e.g., warning a developer through the
console that a pinned script conducts an unpinned inclusion.
VIII. DISCUSSION
The Web’s success is largely based on a ﬁrst party’s
ability to focus on their core business needs, while relying
on third parties to provide additional functionality. As we
have observed, 95% (7,628/8,041) sites in our dataset rely
on at least one third party. However, this reliance on others
also means that the ﬁrst party may be signiﬁcantly impaired
in deploying critical security mechanisms like CSP and SRI.
In our work, we underline the community’s long-held belief
that third parties may be major roadblocks to security header
12
deployment by showing that even if all ﬁrst parties were to
update their own code, the majority would still need to resort
to unsafe policies or break third-party functionality. While it is
a big ask for the ﬁrst party, there is little incentive for them to
start the process on their own code if third-party functionality
necessitates unsafe keywords or induces breakage.
For CSP, we ﬁnd that given the signiﬁcant ﬂuctuation in
included hosts (both by ﬁrst and third parties) makes a work-
ing, yet secure host-based allowlist infeasible. We could show
that 74% of all sites would have to remove sites introduced by
third parties from their CSP to keep it as tight as possible. On
the ﬂipside, 50% of all sites with ﬂuctuations are required to
add sites at least once in our 12-week experiment through
inclusions by third parties. Looking at
the situation w.r.t.
to unsafe keywords, the situation is even more dire; even
if ﬁrst parties were to remove all their usage of eval and
inline JavaScript, around 78% of our dataset would require
either unsafe keyword because of third parties which rely on
them. Importantly, while the notion of strict-dynamic as
proposed by Weichselbaum et al. [39] could alleviate some of
the problems of ever-changing inclusions, a majority of sites
with third-party code could not deploy it. This is because
of the adverse effect of inline event handlers, which cannot
be allowed through hashes or nonces. strict-dynamic,
however, requires trusted scripts to be allowed through hashes
or nonces, meaning a majority of the sites with third-party
code could not deploy it without breaking the third-party
functionality. Given that sites heavily have to rely on third
parties for monetization (be it through ads or reach via social
networks), they either have to leave their sites insecure or
attempt to rely on other parties to deliver the same service
as the incompatible ones. Speciﬁcally, for advertisement, to
understand if ﬁrst parties could not simply switch networks, we
analyzed all parties which own at least one domain related to
advertisement (according to Webshrinker) and were included
by at least 1% of our dataset (i.e., 100 sites). This yielded
a total of 26 parties, out of which only a single one would
not impair the ﬁrst party in deploying a CSP (i.e., does not
require unsafe-eval or unsafe-inline and does not
break with strict-dynamic). This was digitru.st, which
is not primarily serving ads, but rather helps multiple ad
companies synchronize tracking identiﬁers. This implies that
unless large ad networks generally adhere to CSP-compliant
coding practices, ﬁrst parties are left in a no-win situation
where they can either have revenue loss or insecure CSPs.
As far as SRI is concerned, we stipulate that while not all
resources should necessarily be pinnable, third parties should
avoid making them unpinnable through technically unneces-
sary randomization. In particular, the example of Facebook
shows that merely due to comments in the JavaScript ﬁle,
SRI is rendered inapplicable. As our analysis in Section VII
has shown, relying on programmatic cycling through observed
hashes of a given external resource is also infeasible due to the
large number of third-party inclusions and the average number
of different versions returned when requesting the same URL.
All this data is only based on a single snapshot, for which
the dynamic nature is even more surprising, given that one
crawl only takes around 12 hours. In addition, our real-world
analysis showed that SRI-pinned scripts might themselves in-
clude additional scripts without SRI; meaning that an attacker
may simply compromise the delegated inclusion to attack the
SRI-pinning site.
A. Call to Action for Third Parties
Third parties are in a unique position to affect the Web’s
overall security. As it stands now, they are a major roadblock
to the deployment of promising security measures like CSP.
Especially regarding the programmatic addition of scripts,
the necessary changes in the codebase are minimal. While
removing the reliance on event handlers and inline scripts
may be signiﬁcantly more engineering effort, widely-included
third parties have a massive ampliﬁer; i.e., they can affect
hundreds of sites’ ability to deploy CSP. While especially