### The Attack and Fee Considerations

For the attack to succeed, it must hold that \( v_{\text{dep}} > f_h + f \). By choosing a fee \( f_h \) adhering to the bounds, \( A \) can prevent \( B \) from paying a bribe \( b > f_h \) for the bribing transaction \( \text{tx}_h \). Specifically, if \( A \) offers at least \( f_h \) such that \( f_h > \lambda_{\text{min}} (v_{\text{dep}} - f) + f \), then \( B \)'s bribe will be insufficient.

### Myopic Miners

This bribery attack variant relies on all miners being rational, considering their utility at the game's conclusion rather than myopically optimizing for the next block. If a portion of the miners are myopic and any of them create a block during the first \( T - 1 \) rounds, they would include \( A \)'s transaction, and \( B \)'s bribery attempt would fail.

In such scenarios, the attack succeeds only with a certain probability—only if a myopic miner does not create a block in the first \( T - 1 \) rounds. The success probability decreases exponentially with \( T \). Therefore, to incentivize miners to support the attack, \( B \) has to increase the offered bribe exponentially with \( T \).

The analysis relies on assumptions about the mining power distribution, which is outside the scope of this work. Notably, for the simpler case where all other miners are myopic, miner \( i \) is incentivized to support the attack only when it is her dominant strategy, matching the upper bound of Winzer et al. [28].

### Non-Myopic Bribery-Accepting Miner Implementation

Aside from the Bitcoin-MEV infrastructure (§VI-B), we also implemented a simpler Bitcoin Core patch supporting the mentioned bribe attack on HTLC.

When the patched client receives transactions with an unexpired timeout (waiting transactions), it stores them in a data structure instead of discarding them. When creating a new block, the client first checks if any of the timeouts have elapsed, and if so, moves the relevant transactions to the mempool. When receiving conflicting transactions, instead of accepting the first and discarding the second, it accepts the transaction that offers a higher fee. In case of a conflict with a waiting transaction, it chooses based on the condition described in Theorem 2.

The simplicity of this patch (150 LoC, no external modules) demonstrates that miners can trivially achieve non-myopic transaction selection optimization.

### Real-World Numbers

We conclude this section by presenting three examples of HTLC being used in running systems and show the substantial costs to make them resistant against bribery attacks.

Table V presents for each example the HTLC tokens \( v_{\text{dep}} \), the base fee \( f \), and the ratio of required tokens for bribery resistance (Theorem 2) and the base fee \( \lambda_{\text{min}} (v_{\text{dep}} - f) + f \). To estimate the base fee, we conservatively take the actual paid fee, which is an upper bound. We conservatively estimate \( \lambda_{\text{min}} = 0.01 \) [87]; miners with lower mining power are less likely due to economy-of-scale [126].

#### Example 1: Bitcoin Lightning Channel
For a Bitcoin Lightning channel [127], [128], the required fee to secure the contract against a bribery attack is 13,400 times the actual fee. Plugging in $10K as the average Bitcoin price at the time [123], an attack requires about a $2 bribe for a payoff of over $25K. Note that this is just an arbitrary example, and there are plenty of such low-fee, high-capacity channels. A few dollars' bribe is sufficient to yield tens of thousands of dollars as a reward [127].

#### Example 2: Litecoin Atomic Swap
For a Litecoin atomic swap [129], the required fee to be secured against bribes is 436 times higher.

#### Example 3: Liquality Atomic Swap
The two sides of a BTC-ETH atomic swap conducted by Liquality [130] require more than 300X and 480X fees to be secure, respectively.

### Future Directions

We briefly present two future research directions. First, we discuss attacks and mitigations in a weaker model, where either \( A \) or \( B \) have significant mining power (§VIII-1). Then, we discuss how using MAD-HTLC can reduce latency in systems utilizing HTLC-Spec (§VIII-2).

#### Mining A or B
As in previous work [26], [28], the security analysis of MAD-HTLC assumes that \( A \) and \( B \) have no mining capabilities and do not collude with any miner. Acquiring mining capabilities (or forming collusion agreements) requires a significant investment, substantially higher than necessary for a simple bribe. Removing this assumption extends the game space considerably and brings in timing and probability considerations that are outside the scope of this work. Nevertheless, we briefly present the issue and a potential low-overhead modification that disincentivizes such attacks.

- **A with Mining Capabilities**: If \( A \) has mining capabilities and knows \( \text{pre}_a \), they can stall until the timeout elapses and \( B \) publishes \( \text{pre}_b \), and then redeem both MH-Dep (using either dep-A or dep-M) and MH-Col (using col-M). This requires \( A \) to create the block right after the timeout elapses, otherwise another miner would include \( B \)'s transactions. The potential profit is the \( v_{\text{col}} \) tokens, whose number is in the order of a transaction fee.
  
- **B with Mining Capabilities**: If \( B \) has mining capabilities and knows \( \text{pre}_a \), they can redeem MH-Dep (using dep-M) if they create the first block after the MAD-HTLC initiation. Otherwise, another miner would include \( A \)'s transaction. The potential damage for this case is similar to the HTLC bribery (Winzer et al. [28] and §VII-C), and note that any miner will be able to redeem MH-Col once the timeout elapses.

Both variants require the miner to reveal \( \text{pre}_a \) and \( \text{pre}_b \) by creating a block at a specific height, meaning they only succeed with some probability. As such, their profitability depends on the relative mining size of the miner, the deposit and collateral amounts, and the transaction fees.

To mitigate these vulnerabilities, we propose having multiple MH-Dep and MH-Col, all with the same digests \( \text{diga} \) and \( \text{digb} \), but each with a different timeout \( T \), and split \( v_{\text{dep}} \) and \( v_{\text{col}} \) among them. As one of the timeouts elapse, if the miner attacks, they lose their advantage because once they expose \( \text{pre}_a \) and \( \text{pre}_b \), any miner can compete for the remaining contracts. This mechanism diminishes the attack profitability.

#### Latency Reduction
Systems utilizing HTLC-Spec must set the timeout parameter \( T \), facing a trade-off. Too short timeouts result in a security risk—\( B \) might get the tokens unjustly because \( A \)'s transaction was not yet confirmed. Too long timeouts imply an opportunity cost due to the unavailability of the locked coins and increase susceptibility to various attacks [12], [132], [133].

MAD-HTLC can allow for significantly reduced timeouts compared to HTLC since instead of waiting for confirmation, it now suffices to consider transaction publication. The analysis depends on mempool and congestion properties that are outside the scope of this work.

### Conclusion

We introduce a novel approach of utilizing miners' rationality to secure smart contracts and use it to design MAD-HTLC, a contract implementing HTLC-Spec. We show using the UC framework and with game-theoretic analysis that MAD-HTLC is secure. We also show that the prevalent HTLC is vulnerable to cheap bribery attacks in a wider variety of systems and qualitatively tighten the known cost bound in the presence of rational miners. We demonstrate the efficacy of our approach by implementing and executing MAD-HTLC on Bitcoin and Ethereum. We also demonstrate the practicality of implementing a rational miner by patching the standard Bitcoin client.

Both the attack against HTLC and the secure alternative MAD-HTLC have direct impacts on a variety of contracts using the HTLC-Spec design pattern. As miners' incentives to act rationally increase, those systems will become vulnerable and can directly adopt MAD-HTLC as a plug-in alternative.

### Acknowledgments

We thank the anonymous reviewers, Sebastian Faust, and our shepherd Dominique Schröder for their valuable feedback and guidance. This research was supported by the Israel Science Foundation (grant No. 1641/18), an IC3 research grant, the US-Israel Binational Science Foundation (BSF), and the Technion Hiroshi Fujiwara cyber-security research center.