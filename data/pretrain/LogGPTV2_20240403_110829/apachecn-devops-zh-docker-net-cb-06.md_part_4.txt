由于容器之间的流量进入和离开`docker0`桥，这将允许容器间的连接:
```
user@docker1:~$ docker exec -it web1 ping 172.17.0.3 -c 2
PING 172.17.0.3 (172.17.0.3): 48 data bytes
56 bytes from 172.17.0.3: icmp_seq=0 ttl=64 time=0.092 ms
56 bytes from 172.17.0.3: icmp_seq=1 ttl=64 time=0.086 ms
--- 172.17.0.3 ping statistics ---
2 packets transmitted, 2 packets received, 0% packet loss
round-trip min/avg/max/stddev = 0.086/0.089/0.092/0.000 ms
user@docker1:~$
user@docker1:~$ docker exec -it web1 curl http://172.17.0.3
    Web Server #2 - Running on port 80
user@docker1:~$
```
剩下的唯一配置是提供一种发布端口的机制。我们可以这样做，首先在 Docker 主机本身上配置一个目标 NAT。即使 Docker 没有提供 NAT 规则，它仍然代表您跟踪端口分配。在容器运行时，如果您选择发布端口，Docker 将为您分配一个端口映射，即使它不处理发布。明智的做法是使用 Docker 分配的端口来防止重叠:
```
user@docker1:~$ docker port web1
80/tcp -> 0.0.0.0:32768
user@docker1:~$ docker port web2
80/tcp -> 0.0.0.0:32769
user@docker1:~$
user@docker1:~$ sudo iptables -t nat -A PREROUTING ! -i docker0 \
-p tcp -m tcp --dport 32768 -j DNAT --to-destination 172.17.0.2:80
user@docker1:~$ sudo iptables -t nat -A PREROUTING ! -i docker0 \
-p tcp -m tcp --dport 32769 -j DNAT --to-destination 172.17.0.3:80
user@docker1:~$
```
使用 Docker 分配的端口，我们可以为每个容器定义一个入站 NAT 规则，将到 Docker 主机上外部端口的入站连接转换为真正的容器 IP 和服务端口。最后，我们只需要允许入站流量:
```
user@docker1:~$ sudo iptables -A FORWARD -d 172.17.0.2/32 ! -i docker0 -o docker0 -p tcp -m tcp --dport 80 -j ACCEPT
user@docker1:~$ sudo iptables -A FORWARD -d 172.17.0.3/32 ! -i docker0 -o docker0 -p tcp -m tcp --dport 80 -j ACCEPT
```
配置完这些规则后，我们现在可以从 Docker 主机外部的已发布端口上测试连通性:
![Manually creating the required iptables rules](img/B05453_06_05.jpg)
# 创建自定义 iptables 规则
在之前的食谱中，我们介绍了 Docker 如何处理最常见的容器网络需求的`iptables`规则。但是，可能会有您希望扩展默认`iptables`配置以允许更多访问或限制连接范围的情况。在这个食谱中，我们将通过几个例子来展示如何实现定制的`iptables`规则。我们将重点关注限制连接到在您的容器上运行的服务的源的范围，以及允许 Docker 主机本身连接到这些服务。
### 注
后面提供的例子旨在演示配置`iptables`规则集的选项。这些示例中实现它们的方式在您的环境中可能有意义，也可能没有意义，并且可以根据您的安全需求以不同的方式和位置进行部署。
## 做好准备
我们将使用相同的 Docker 主机，其配置与之前的配方相同。Docker 服务应该配置`--iptables=false`服务选项，应该定义两个容器— `web1`和`web2`。如果你不确定如何达到这种状态，请查看之前的食谱。为了定义新的`iptables`策略，我们还需要清除 NAT 和 FILTER 表中所有现有的`iptables`规则。最简单的方法是重启主机。
### 注
当您的默认策略为拒绝时，刷新`iptables`规则将断开任何远程管理会话。如果您在没有控制台访问权限的情况下管理系统，请注意不要意外断开连接！
如果不想重启，可以将默认过滤策略改回`allow`。然后，按如下方式刷新过滤器和 NAT 表:
```
sudo iptables -P INPUT ACCEPT
sudo iptables -P FORWARD ACCEPT
sudo iptables -P OUTPUT ACCEPT
sudo iptables -t filter -F
sudo iptables -t nat -F
```
## 怎么做…
此时，您应该再次拥有一个运行两个容器的 Docker 主机和一个空的默认`iptables`策略。首先，让我们再次将默认过滤策略更改为`deny`，同时确保我们仍然允许通过 SSH 进行管理连接:
```
user@docker1:~$ sudo iptables -A INPUT -i eth0 -p tcp --dport 22 \
-m state --state NEW,ESTABLISHED -j ACCEPT
user@docker1:~$ sudo iptables -A OUTPUT -o eth0 -p tcp --sport 22 \
-m state --state ESTABLISHED -j ACCEPT
user@docker1:~$ sudo iptables -P INPUT DROP
user@docker1:~$ sudo iptables -P FORWARD DROP
user@docker1:~$ sudo iptables -P OUTPUT DROP
```
因为我们将围绕过滤器表关注策略，所以让我们在前面的配方中不变地加入 NAT 策略。这些 NAT 涵盖了每个容器中服务的目的 NAT 的出站伪装和入站伪装:
```
user@docker1:~$ sudo iptables -t nat -A POSTROUTING -s \
172.17.0.0/16 ! -o docker0 -j MASQUERADE
user@docker1:~$ sudo iptables -t nat -A PREROUTING ! -i docker0 \
-p tcp -m tcp --dport 32768 -j DNAT --to-destination 172.17.0.2:80
user@docker1:~$ sudo iptables -t nat -A PREROUTING ! -i docker0 \
-p tcp -m tcp --dport 32769 -j DNAT --to-destination 172.17.0.3:80
```
您可能感兴趣的配置项目之一是限制容器在外部网络上可以访问的范围。您会注意到，在前面的例子中，容器被允许与任何外部事物进行对话。这是允许的，因为过滤器规则相当通用:
```
sudo iptables -A FORWARD -i docker0 ! -o docker0 -j ACCEPT
```
这条规则允许容器通过除`docker0`之外的任何接口与任何东西对话。我们可以只指定希望允许出站的端口，而不是允许这样做。例如，如果我们发布端口`80`，我们就可以定义一个反向或出站规则，只允许特定的返回流量。让我们首先重新创建上一个示例中使用的入站规则:
```
user@docker1:~$ sudo iptables -A FORWARD -d 172.17.0.2/32 \
! -i docker0 -o docker0 -p tcp -m tcp --dport 80 -j ACCEPT
user@docker1:~$ sudo iptables -A FORWARD -d 172.17.0.3/32 \
! -i docker0 -o docker0 -p tcp -m tcp --dport 80 -j ACCEPT
```
现在，我们可以很容易地用只允许端口`80`上的返回流量的特定规则来替换更通用的出站规则。例如，让我们设置一个规则，允许容器`web1`仅在港口`80`返回流量:
```
user@docker1:~$ sudo iptables -A FORWARD -s 172.17.0.2/32 -i \
docker0 ! -o docker0 -p tcp -m tcp --sport 80 -j ACCEPT
```
如果我们检查，我们应该看到从外部网络我们可以到达`web1`上的服务:
![How to do it…](img/B05453_06_06.jpg)
然而，容器`web1`此时除了端口`80`之外，不能与外部网络上的任何东西进行通信，因为我们没有使用通用出站规则:
```
user@docker1:~$ docker exec -it web1 ping 4.2.2.2 -c 2
PING 4.2.2.2 (4.2.2.2): 48 data bytes
user@docker1:~$
```
为了解决这个问题，我们可以添加特定的规则来允许像 ICMP 这样的来自`web1`容器的东西:
```
user@docker1:~$ sudo iptables -A FORWARD -s 172.17.0.2/32 -i \
docker0 ! -o docker0 -p icmp -j ACCEPT
```
上面的规则加上来自先前配方的状态感知返回规则将允许 web1 容器启动和接收返回 ICMP 流量。
```
user@docker1:~$ sudo iptables -A FORWARD -o docker0 -m conntrack \
--ctstate RELATED,ESTABLISHED -j ACCEPT
```
```
user@docker1:~$ docker exec -it web1 ping 4.2.2.2 -c 2
PING 4.2.2.2 (4.2.2.2): 48 data bytes
56 bytes from 4.2.2.2: icmp_seq=0 ttl=50 time=33.892 ms
56 bytes from 4.2.2.2: icmp_seq=1 ttl=50 time=34.326 ms
--- 4.2.2.2 ping statistics ---
2 packets transmitted, 2 packets received, 0% packet loss
round-trip min/avg/max/stddev = 33.892/34.109/34.326/0.217 ms
user@docker1:~$
```
在`web2`容器的情况下，其网络服务器仍然不能从外部网络访问。如果我们希望限制可以与网络服务器对话的流量来源，我们可以通过更改入站端口`80`规则，或者通过在出站端口`80`规则中指定目的地来实现。例如，我们可以通过在出口规则中指定目的地，将流量源限制在外部网络的单个设备上:
```
user@docker1:~$ sudo iptables -A FORWARD -s 172.17.0.3/32 -d \
10.20.30.13 -i docker0 ! -o docker0 -p tcp -m tcp --sport 80 \
-j ACCEPT
```
现在，如果我们从外部网络上的实验室设备尝试使用`10.20.30.13`的 IP 地址，我们应该能够访问网络服务器:
```
[user@lab1 ~]# ip addr show dev eth0 | grep inet
    inet 10.20.30.13/24 brd 10.20.30.255 scope global eth0
 [user@lab2 ~]# curl http://docker1.lab.lab:32769
    Web Server #2 - Running on port 80
[user@lab1 ~]#
```
但是如果我们从不同的实验室服务器尝试使用不同的 IP 地址，连接将会失败:
```
[user@lab2 ~]# ip addr show dev eth0 | grep inet
    inet 10.20.30.14/24 brd 10.20.30.255 scope global eth0
[user@lab2 ~]# curl http://docker1.lab.lab:32769
[user@lab2 ~]#
```
同样，该规则可以实现为入站或出站规则。
当以这种方式管理`iptables`规则时，您可能已经注意到 Docker 主机本身不再能够连接到它们所承载的容器和服务:
```
user@docker1:~$ ping 172.17.0.2 -c 2
PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.
ping: sendmsg: Operation not permitted
ping: sendmsg: Operation not permitted
--- 172.17.0.2 ping statistics ---
2 packets transmitted, 0 received, 100% packet loss, time 999ms
user@docker1:~$
```
这是因为我们在筛选器表中编写的所有规则都在前向链中。前向链路仅适用于主机正在转发的流量，而不适用于源自或发往主机本身的流量。要解决这个问题，我们可以在过滤表的`INPUT`和`OUTPUT`链中放入规则。为了允许 ICMP 进出容器，我们可以指定如下规则: