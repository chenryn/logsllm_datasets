draws the mean reqs/sec and standard deviation as
measured by Apache’s benchmark utility ab.
Figure 3: MySQL test-insert benchmark. It measures
table creation, data insertion, and selection. The
ﬁgure draws total execution time as reported by the
benchmark utility.
on interpreted languages such as Perl, and later SQL [9].
Concurrently, Barrantes et al. [4] proposed a similar ran-
domization technique for binaries (RISE), which builds on
the Valgrind x86 emulator. RISE provides limited support
for shared libraries by creating randomized copies of the li-
braries for each process. As such, the libraries are not ac-
tually shared, and consume additional memory each time
they are loaded. Furthermore, Valgrind incurs a minimum
performance overhead of 400% [18], which makes its use im-
practical.
The work closest to ours is by Hu et al. [24]. They also
employ a virtual execution environment based on a dynamic
binary translation framework named STRATA. Their imple-
mentation uses AES encryption with a 128-bit key, which re-
quires that code segments are aligned at 128-bit blocks. Un-
like our implementation, they do not support self-modifying
code, and they produce randomized binaries that are signiﬁ-
cantly larger from the originals (e.g., the randomized version
of Apache was 77% larger than the original). Also, to the
best of our knowledge previous work on ISR does not ad-
dress the implications introduced by signal trampolines and
VDSO, nor does it investigate the costs involved with pro-
tecting the execution environment from the hosted process
(STRATA protects only a part of its data).
Address obfuscation is another approach based on ran-
domizing the execution environment (i.e., the locations of
code and data) to harden software against attacks [7, 33].
It can be performed at runtime by randomizing the layout
of a process (ASLR) including the stack, heap, dynamically
linked libraries, static data, and the process’s base address.
Additionally, it can be performed at compile time to also
randomize the location of program routines and variables.
Shacham et al. [38] show that ASLR may not be very ef-
fective on 32-bit systems, as they do not allow for suﬃcient
entropy. In contrast, Bhatkar et al. [8] argue that it is pos-
sible to introduce enough entropy for ASLR to be eﬀective.
Meanwhile, attackers have successfully exploited ASLR en-
abled systems by predicting process layout, exploiting ap-
plications to expose layout information [19], or using tech-
niques like heap spraying [16].
Hardware extensions such as the NoExecute (NX) bit in
modern processors [22, 33] can stop code-injection attacks
all together without impacting performance. This is accom-
plished by disallowing the execution of code from memory
pages that are marked with the NX bit. Unfortunately, its
eﬀectiveness is dependent on its proper use by software. For
instance, many applications like browsers do not set it on all
data segments. This can be due to backward compatibility
constraints (e.g., systems using signal trampolines), or even
just bad developing practice.
PointGuard [14] uses encryption to protect pointers from
buﬀer overﬂows.
It encrypts pointers in memory, and de-
crypts them only when they are loaded to a register. It is im-
plemented as a compiler extension, so it requires that source
code is available for recompilation. Also, while it is able to
deter buﬀer overﬂow attacks, it can be defeated by format
string attacks that frequently employ code-injection later
on. Other solutions implemented as compiler extensions in-
clude Stackguard [15] and ProPolice [21]. They operate by
introducing special secret values in the stack to identify and
prevent stack overﬂow attacks, but can be subverted [10].
Write integrity testing [2] uses static analysis and “guard”
values between variables to prevent memory corruption er-
rors, but static analysis alone cannot correctly classify all
program writes. CCured [30] is a source code transforma-
tion system that adds type safety to C programs, but it
incurs a signiﬁcant performance overhead and is unable to
statically handle some datatypes. Generally, solutions that
require recompilation of software are less practical, as source
code or parts of it (e.g., third-party libraries) are not always
available.
Dynamic binary instrumentation is used by many other
solutions to retroﬁt unmodiﬁed binaries with defenses against
Requests/sec500055006000NativePINISRISR−MPTotal Time (sec)050010001500200025003000NativeNullISRISR−MPremote attacks. For instance, dynamic taint analysis (DTA)
is used by many projects [31, 17, 13, 23], and is a able to de-
tect control hijacking and code-injection attacks, but incurs
large slowdowns (e.g., frequently 20x or more). Due to their
large overhead, dynamic solutions are mostly used for the
analysis of attacks and malware [6], and in honeypots [37].
6. CONCLUSIONS
We described a fast and practical implementation of ISR
based on Intel’s dynamic instrumentation tool PIN. Our im-
plementation works on commodity systems, and does not
require the recompilation or relinking of target applications.
Binaries are randomized at execution time, while shared li-
braries can be encoded beforehand and shared between the
processes executing using ISR. Moreover, we introduce a
simple management scheme to keep track of the random-
ized shared libraries and their associated keys.
Our solution operates with relatively small overhead that
makes it an attractive countermeasure to retroﬁt security
sensitive applications with. Applying it on the Apache web
server has negligible eﬀect on throughput for static HTML
loads, while MySQL performs approximately 75% slower.
Furthermore, we show that the overhead is largely attributed
to PIN, and can be easily mitigated when applied on long-
running I/O driven applications such as network services.
Acknowledgements
This work was supported by the United States Air Force Re-
search Laboratory (AFRL) through Contract FA8650-10-C-
7024 and by the National Science Foundation (NSF) through
Grant CNS-09-14845. Opinions, ﬁndings, conclusions and
recommendations expressed in this material are those of the
authors and do not necessarily reﬂect the views of the US
Government, the Air Force, or the NSF.
7. REFERENCES
[1] Adobe. Security advisory for ﬂash player, adobe
reader and acrobat. http://www.adobe.com/support/
security/advisories/apsa10-01.html, June 2010.
[2] P. Akritidis, C. Cadar, C. Raiciu, M. Costa, and
M. Castro. Preventing memory error exploits with
WIT. In Proceedings of the 2008 IEEE Symposium on
Security and Privacy, pages 263–277, May 2008.
[3] Aleph One. Smashing the stack for fun and proﬁt.
Phrack, 7(49), 1996.
[4] E. G. Barrantes, D. H. Ackley, S. Forrest, T. S.
Palmer, D. Stefanovic, and D. D. Zovi. Randomized
instruction set emulation to disrupt binary code
injection attacks. In Proceedings of the ACM
Conference on Computer and Communications
Security, pages 281–289, October 2003.
[5] E. G. Barrantes, D. H. Ackley, S. Forrest, and
D. Stefanovi´c. Randomized instruction set emulation.
ACM Trans. Inf. Syst. Secur., 8(1):3–40, 2005.
[6] U. Bayer, C. Kruegel, and E. Kirda. TTAnalyze: A
tool for analyzing malware. In Proceedings of the 15th
European Institute for Computer Antivirus Research
(EICAR) Annual Conference, April 2006.
[7] S. Bhatkar, D. C. DuVarney, and R. Sekar. Address
obfuscation: an eﬃcient approach to combat a broad
range of memory error exploits. In Proceedings of the
12th USENIX Security Symposium, pages 105–120,
August 2003.
[8] S. Bhatkar, R. Sekar, and D. C. DuVarney. Eﬃcient
techniques for comprehensive protection from memory
error exploits. In Proceedings of the 14th USENIX
Security Symposium, pages 255–270, August 2005.
[9] S. W. Boyd, G. S. Kc, M. E. Locasto, A. D.
Keromytis, and V. Prevelakis. On the general
applicability of instruction-set randomization. IEEE
Transactions on Dependable and Secure Computing,
99, 2008.
[10] Bulba and Kil3r. Bypassing StackGuard and
StackShield. Phrack, 5(56), May 2000.
[11] CERT advisory CA-2001-19: “Code Red” worm
exploiting buﬀer overﬂow in IIS indexing service DLL.
http://www.cert.org/advisories/CA-2001-19.html,
July 2001.
[12] Cert Advisory CA-2003-04: MS-SQL Server Worm.
http://www.cert.org/advisories/CA-2003-04.html,
January 2003.
[13] M. Costa, J. Crowcroft, M. Castro, and A. Rowstron.
Vigilante: End-to-end containment of internet worms.
In Proceedings of the ACM Symposium on Systems and
Operating Systems Principles (SOSP), October 2005.
[14] C. Cowan, S. Beattie, J. Johansen, and P. Wagle.
PointGuard: Protecting pointers from buﬀer overﬂow
vulnerabilities. In Proceedings of the 12th USENIX
Security Symposium, pages 91–104, August 2003.
[15] C. Cowan, C. Pu, D. Maier, H. Hinton, J. Walpole,
P. Bakke, S. Beattie, A. Grier, P. Wagle, and
Q. Zhang. StackGuard: Automatic adaptive detection
and prevention of buﬀer-overﬂow attacks. In
Proceedings of the 7th USENIX Security Symposium,
January 1998.
[16] DarkReading. Heap spraying: Attackers’ latest
weapon of choice. http://www.darkreading.com/
security/vulnerabilities/showArticle.jhtml?
articleID=221901428, November 2009.
[17] D. E. Denning. A lattice model of secure information
ﬂow. Commun. ACM, 19(5):236–243, 1976.
[18] V. Developers. Valgrind user manual – callgrind.
http://valgrind.org/docs/manual/cl-manual.html.
[19] T. Durden. Bypassing PaX ASLR protection. Phrack,
0x0b(0x3b), July 2002.
[20] C. W. Enumeration. CWE-416: use after free.
http://cwe.mitre.org/data/definitions/416.html,
April 2010.
[21] J. Etoh. GCC extension for protecting applications
from stack-smashing attacks.
http://www.trl.ibm.com/projects/security/ssp/,
June 2000.
[22] E. Hardware. CPU-based security: The NX bit.
http://hardware.earthweb.com/chips/article.
php/3358421, May 2004.
[23] A. Ho, M. Fetterman, C. Clark, A. Warﬁeld, and
S. Hand. Practical taint-based protection using
demand emulation. In Proceedings of the 1st ACM
EuroSys Conference, pages 29–41, April 2006.
[24] W. Hu, J. Hiser, D. Williams, A. Filipi, J. W.
Davidson, D. Evans, J. C. Knight, A. Nguyen-Tuong,
and J. Rowanhill. Secure and practical defense against
code-injection attacks using software dynamic
translation. In Proceedings of the 2nd International
Conference on Virtual Execution Environments
(VEE), pages 2–12, June 2006.
[25] G. S. Kc, A. D. Keromytis, and V. Prevelakis.
Countering code-injection attacks with instruction-set
randomization. In Proceedings of the 10th ACM
Conference on Computer and Communications
Security (CCS), October 2003.
[26] C.-K. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser,
G. Lowney, S. Wallace, V. J. Reddi, and
K. Hazelwood. Pin: Building customized program
analysis tools with dynamic instrumentation. In
Proceedings of Programming Language Design and
Implementation (PLDI), pages 190–200, June 2005.
[27] M. Conover and w00w00 Security Team. w00w00 on
heap overﬂows. http:
//www.w00w00.org/files/articles/heaptut.txt.
[28] Microsoft. Microsoft portable executable and common
object ﬁle format speciﬁcation.
http://www.microsoft.com/whdc/system/platform/
firmware/PECOFF.mspx.
[29] D. Moore, C. Shanning, and K. Claﬀy. Code-Red: a
case study on the spread and victims of an Internet
worm. In Proceedings of the 2nd Internet Measurement
Workshop (IMW), pages 273–284, November 2002.
[30] G. C. Necula, J. Condit, M. Harren, S. McPeak, and
W. Weimer. CCured: type-safe retroﬁtting of legacy
software. ACM Trans. Program. Lang. Syst.,
27(3):477–526, 2005.
[31] J. Newsome and D. Song. Dynamic taint analysis for
automatic detection, analysis, and signature
generation of exploits on commodity software. In
Proceedings of the 12th Annual Symposium on
Network and Distributed System Security (NDSS),
February 2005.
[32] M. Owens. Embedding an SQL database with SQLite.
Linux Journal, 2003(110):2, June 2003.
[33] PaX Home Page. http://pax.grsecurity.net/.
[34] PCWorld. Dangling pointers could be dangerous.
http://www.pcworld.com/article/134982/
dangling_pointers_could_be_dangerous.html, July
2007.
[35] J. Pincus and B. Baker. Beyond stack smashing:
Recent advances in exploiting buﬀer overﬂows. IEEE
Security & Privacy Magazine, 2(4):20–27,
July/August 2004.
[36] P. Porras, H. Saidi, and V. Yegneswaran. Conﬁcker C
analysis. Technical report, SRI International, 2009.
[37] G. Portokalidis, A. Slowinska, and H. Bos. Argos: an
emulator for ﬁngerprinting zero-day attacks. In
Proceedings of the 1st ACM EuroSys Conference, April
2006.
[38] H. Shacham, M. Page, B. Pfaﬀ, E. Goh, N. Modadugu,
and D. Boneh. On the eﬀectiveness of address-space
randomization. In Proceedings of the 11th ACM
Conference on Computer and Communications
Security (CCS), pages 298–307, October 2004.
[39] U. Shankar, K. Talwar, J. S. Foster, and D. Wagner.
Detecting format string vulnerabilities with type
qualiﬁers. In Proceedings of the 10th USENIX Security
Symposium, pages 201–216, August 2001.
[40] A. N. Sovarel, D. Evans, and N. Paul. Where’s the
FEEB? the eﬀectiveness of instruction set
randomization. In Proceedings of the 14th USENIX
Security Symposium, pages 145–160, August 2005.
[41] E. H. Spaﬀord. The Internet worm program: An
analysis. Technical Report CSD-TR-823, Purdue
University, 1988.
[42] Symantec. Analysis of a zero-day exploit for adobe
ﬂash and reader.
http://www.symantec.com/connect/blogs/
analysis-zero-day-exploit-adobe-flash-and-reader,
June 2010.
[43] D. Wagner, J. S. Foster, E. A. Brewer, and A. Aiken.
A ﬁrst step towards automated detection of buﬀer
overrun vulnerabilities. In Proceedings of the
Symposium on Network and Distributed System
Security (NDSS), pages 3–17, February 2000.
[44] C. C. Zou, W. Gong, and D. Towsley. Code Red worm
propagation modeling and analysis. In Proceedings of
the 9th ACM Conference on Computer and
Communications Security (CCS), pages 138–147,
November 2002.