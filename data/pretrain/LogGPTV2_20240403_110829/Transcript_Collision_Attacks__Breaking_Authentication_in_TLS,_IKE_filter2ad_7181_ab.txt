hash(m1| [gy(cid:48)|
(cid:124)
3
Fig. 2. Man-in-the-middle credential forwarding attack on SIGMA’.
The attacker creates a transcript collision by tampering with the
messages shown in red. At the end of the protocol, the client and
server have seemingly authenticated each other, but the attacker knows
both connection keys, and hence can read or write any data.
middle (MitM) intercepts messages sent between A and
(cid:48)
B. It sends its own message m(cid:48)
A to B and
(cid:48)
it sends it own response m(cid:48)
B to A. Suppose
it can choose these messages such that the authenticated
transcripts match:
1 = gx(cid:48)|info
2 = gy(cid:48)|info
hash(m1|m(cid:48)
2) = hash(m(cid:48)
1|m2)
this a transcript collision. Now, MitM can
We call
simply forward A’s signature over this transcript to B
and vice versa. A and B will accept the signatures
since the hashed transcripts match and the signing keys
are correct. However, the MitM knows the session keys
) on both connections (since it knows x(cid:48), y(cid:48)).
(gx(cid:48)y, gxy(cid:48)
Hence, the MitM has fully hijacked both connections
and can now send messages to B pretending to be A
and to A pretending to be B. This is an impersonation
attack that breaks peer authentication.
If the boundaries between the messages m1 and m2
are not clearly demarcated, there are a number of trivial
attacks that can ensure that m1|m(cid:48)
1|m2 with no
need for hash collisions. In the examples of this paper,
we will assume that each message (and each message
ﬁeld) is preﬁxed with its length, so that we can focus
on attacks that rely on weaknesses in the hash function.
2 = m(cid:48)
A Generic Transcript Collision The main challenge
in implementing the attack in Figure 2 is that the MitM
has to compute the messages m(cid:48)
2 after receiving
m1 but before the responder has sent its response m2.
The feasibility of the attack depends on the contents and
formats of these messages.
1 and m(cid:48)
Suppose the responder B always sends the same
message m2 for every request; that is, it uses the same
(static) Difﬁe-Hellman value gy and same parameters
infoB. (This situation occurs, for example in protocols
like QUIC, where the server uses a static conﬁguration.)
In that case, after receiving m1, the MitM can compute
That is, the MitM has obtained a transcript collision and
the impersonation attack succeeds.
The attack here exploits hash collisions in combi-
nation with ﬂexible protocol-speciﬁc message formats,
and as we will see, this is one of the main novel tricks
that we use to mount various attacks in this paper.
Other Transcript Collisions The transcript collisions
described above are not the only attacks possible on
such protocols. In some cases, MitM may not be able
to use its own Difﬁe-Hellman values gx(cid:48)
but it may
still be able to tamper with the protocol parameters (e.g.
(cid:48)
ciphersuites) in info
B. In such cases, the MitM
does not have full control over either connection (i.e. it
cannot impersonate A or B) because it does know the
session keys, but it may still be able to downgrade the
protocol parameters to use weak, breakable ciphers.
(cid:48)
A, info
, gy(cid:48)
In other cases, the message format may lend itself to
simpler common-preﬁx collisions that require even less
work than chosen-preﬁx collisions. Such collisions on
MD5 can be found in seconds even on standard desk-
tops. In the next section, we will discuss these different
types of collisions in more detail (some technical details
of previous results are given in the Appendix), and in the
remainder of the paper, we will exploit them to mount
transcript collision attacks on real-world protocols.
III. HASH FUNCTION CRYPTANALYSIS
A hash function H : {0, 1}∗ → {0, 1}N maps arbi-
trary length binary strings to strings of N bits. Broadly
speaking, a cryptographic hash function is expected
to behave like a randomly selected function from the
set of all functions from {0, 1}∗ to {0, 1}N ; building
input/output values with speciﬁc properties should be as
hard for H as for a random function. More concretely,
a cryptographic hash functions should meet four goals:
Preimage resistance: Given a target value H,
it should be hard to ﬁnd x such that H(x) = H
Second-preimage resistance: Given an input
x, it should be hard to ﬁnd a second input
x(cid:48) (cid:54)= x such that H(x(cid:48)) = H(x)
Chosen-preﬁx collision resistance: Given
preﬁxes P and P (cid:48), it should be hard to ﬁnd
a pair of values x, x(cid:48) such that H(P (cid:48)|x(cid:48)) =
H(P|x).
Collision resistance: For a hash function H, it
should be hard to ﬁnd a pair of inputs x (cid:54)= x(cid:48)
such that H(x(cid:48)) = H(x).
3)
4)
1)
2)
The expected security of a hash function is deﬁned
as the complexity of the best generic attack, i.e. the
best attack that works on any hash function, without
using any speciﬁc property of the design. For preimages
or second-preimages, the best attack is a brute-force
4
search: an adversary has to try about 2N random inputs
in order to ﬁnd a preimage. However, for collisions,
there is a generic attack with complexity 2N/2 because
of the birthday paradox. If an adversary computes the
images of a set of 2N/2 inputs, this deﬁnes about 2N
pairs of inputs, and there is a high probability that one
of these pairs is a collision.
Generic collision attacks While a naive collision at-
tack requires to store 2N/2 images of the hash function,
it is possible to mount a parallel and memory-less attack
with a very small overhead [37]. This generic collision
attack is very powerful: it can use meaningful messages,
and can easily be used for chosen-preﬁx collisions (see
details in Appendix).
Concatenation To strengthen protocols against colli-
sions in any one hash function, it may be tempting to
use a combination of two independent hash functions.
For example, TLS versions up to 1.1 use a concatenation
of MD5 and SHA-1. While the output length of this
construction is 288 bits, it does not offer the security
of a 288-bit hash function. In particular, Joux described
a multi-collision attack that breaks the concatenation
of two hash functions with roughly the same effort as
breaking the strongest one of the two [18].
Shortcut collision attacks
In the last decade, hash
function cryptanalysis has been a very active research
area, and more efﬁcient attacks have been discovered on
widely used hash functions. The (estimated) complexity
of the best attacks currently known against MD5 and
SHA-1 are the following:
MD5
SHA-1
MD5| SHA-1
Common-preﬁx collision: 216 [36]
Chosen-preﬁx collision: 239 [36]
Common-preﬁx collision: 261 [35]
Chosen-preﬁx collision: 277 [35]
Common-preﬁx collision: 267 [18]
Chosen-preﬁx collision: 277 [18]
Shortcut collision attack usually return messages with
random-looking blocks that are not controlled by the
adversary. This makes it harder to use these messages
in a real attack, but we will see that in many cases
we can still have meaningful messages by stufﬁng the
random blocks in non-signiﬁcant sections.
Implementation of attacks Since generic collision
attacks can be easily parallelized and require little
memory, they can efﬁciently be implemented in GPUs.
In particular, an attack against MD5 require 264 com-
putations. This is well within reach for a motivated
adversary: it would cost around $165 000 on Amazon
EC2 (using a spot price of 8 ¢/h for a g2.2xlarge instance
doing 2.5 GH/s). Dedicated hardware would be signiﬁ-
cantly more efﬁcient, but require a large investment. As
a point of comparison, the current Bitcoin network is
able to compute up to 259 SHA-256 hashes per second.
We have implemented this attack against the 96-bit
MAC used for the Finished message of TLS 1.1. Our
demo took 20 days using four Tesla K20Xm GPUs,
which is comparable to the expected time we can derive
from hash function benchmarks.
For a chosen-preﬁx collision, an important part of
the computation is spend constructed differential paths,
and this is much harder to parallelize on GPU. We
used the HashClash software [33] by Marc Stevens to
perform this computation. Stevens et al.’s estimate that
the chosen-collision attack should require 239 hash com-
putations, or 35 core-hours [36]. In order to build the
collision as fast as possible, we modiﬁed the software to
take better advantage of parallelism. The hashclash soft-
ware spends most of its time building differential paths,
with a forward step, a backward step, and a connection
step. We realized that the backward step uses a limited
number of potential starting points, and we precomputed
the results for all possible starting points. In addition,
we merged the forward and connection steps, in order to
avoid the serialization and deserialization of the result.
With these optimisations, we can build a chosen-preﬁx
collision in one hour with a 48 cores machine, using
a few gigabytes of RAM (the original code required
at least 3 hours). We believe the time can be further
reduced, but this will require a signiﬁcant rewrite of the
hashclash software to allow parallelism across several
machines, or to rewrite it for GPUs.
IV. THE TLS HANDSHAKE PROTOCOL
The Transport Layer Security protocol (TLS) [8] is
perhaps the most widely used secure channel protocol.
Many versions of TLS are used on the Internet; the latest
released version is TLS 1.2 [8], while TLS 1.3 [9] is
currently undergoing standardization at the IETF.
Figure 3 depicts a typical handshake in TLS (in
versions 1.0 to 1.2). The client ﬁrst sends a hello
message CH that contains a fresh random client nonce
nc and various protocol parameters exc, including the
protocol version, supported list of ciphersuites, and
various protocol extensions. Each extension is preﬁxed
by its length and can contain a payload of up to 216
bytes. Notably, the client hello may include extensions
that the server does not understand or support, and the
server will ignore them.
The server responds to the client hello with a series
of messages (from SH to SHD). The server hello SH
contains a fresh server nonce ns and parameters exs,
including the server’s chosen version, ciphersuite, and
protocol extensions. In most ciphersuites, the server then
sends its public-key certiﬁcate SC. In Ephemeral Difﬁe-
Hellman (DHE) ciphersuites, SC is followed by a server
Fig. 3. TLS 1.2: A mutually-authenticated DHE handshake. Fields
shown in red indicate parts of the handshake that can contain arbitrary-
length opaque data (useful for stufﬁng collision blocks). Handshake
transcripts (log 1, log 2, log 3) refer to the concatenation of all mes-
sages up to (and including) the current one. Messages SCR, CC, CCV are
optional and only appear when client certiﬁcate authentication is used.
NPN is optional and only appears when the client and server support
the next-protocol-negotiation extension. The tls-unique channel
binding is a connection identiﬁer that may be used by applications
to bind user authentication tokens, such as cookies and passwords, to
the underlying TLS channel to prevent credential forwarding.
key exchange message SKE that contains an ephemeral
public value gy along with a description of the Difﬁe-
Hellman group chosen by the server, including the prime
p and generator g. The server signs these values to
protect then from tampering and to prove that it knows
the private key (sk S) for the certiﬁcate:
sign(sk S, hash(nc|ns|p|g|gy))
The signature and hash algorithm used for this signature
is chosen by the server based on its certiﬁcate as well
as the supported algorithms indicated by the client
within an optional signature-algorithms extension
in the client hello. In TLS versions before 1.2, the hash
algorithm was ﬁxed to be MD5| SHA-1 but TLS 1.2
allows clients and servers to choose any hash algorithm
they both support (MD5, SHA-1, SHA-256, etc.) Hence
in TLS 1.2, each digital signature is preﬁxed with
identiﬁers for the chosen signature and hash algorithm.
If the server wants the client to authenticate itself
with a public-key certiﬁcate, it then sends a certiﬁcate
request message SCR indicating the certiﬁcate types and
signature algorithms it supports, as well as an optional
list of distinguished names dn for the client certiﬁcation
authorities that it trusts. As with hello extensions, each
distinguished name can be 216 bytes long and can
contain arbitrary data that the client will ignore if it does
not recognize the name. The server’s message ﬂight then
ends with the server hello done message SHD.
The client then sends its own certiﬁcate CC if the
5
server asked for it, and its own Difﬁe-Hellman key
share gx in a client key exchange message CKE. If the
client sent a certiﬁcate, it must prove that it knows the
private key sk C by sending a client certiﬁcate verify
CCV message with a signature over the full message log
up to this point in the protocol:
sign(sk C, hash(CH|SH|SC|SKE|SCR|SHD|CC|CKE))
(cid:125)
(cid:124)
(cid:123)(cid:122)
log 1
At this point, the client and server both derive a session
master secret ms and authenticated encryption keys
for both directions (k1, k2). The client sends a change
cipher spec message to indicate that the subsequent mes-
sages it sends will be encrypted (with k1.) This message
is not technically part of the handshake protocol and
does not appear in the authenticated transcript, and so
it is not shown in Figure 3.
If the client and server both indicate support for the
next-protocol-negotiation extension [24] in their hello
messages, the client then sends an encrypted extensions
message NPN containing a selected application layer
protocol (e.g. http/1.1 or spdy/3). The protocol
name is ASCII-encoded and then padded to the nearest
multiple of 32 bytes (to avoid leaking information via
the encrypted message length.)
The client then sends an encrypted ﬁnished message
CFIN containing a MAC of the full handshake log log 2
using the master secret ms. In TLS 1.0 and 1.1, this
MAC is computed using a combination of HMAC-MD5
and HMAC-SHA-1, whereas in TLS 1.2, it uses HMAC-
SHA-256. In all these versions, the result of the MAC
is then truncated to 12 bytes (96 bits):
mac96(ms, hash(CH|SH|SC|SKE|SCR|SHD|CC|CKE|CCV|NPN))
(cid:124)
(cid:123)(cid:122)
log 2
(cid:125)
When a server receives CFIN, it veriﬁes that the client
agrees with it on the full message log and on the master
secret. It responds by sending its own change cipher
spec message to turn on encryption and a server ﬁnished
message SFIN that contains a 96-bit MAC over the full
handshake log log 3 using the master secret ms.
At the end of the handshake, both client and server
have authenticated each other, proved knowledge of the
master secret, and agreed upon the message log. They
can now start encrypting application data to each other
using the connection keys (k1, k2).
In most common TLS usage scenarios, clients are
not authenticated using certiﬁcates. The handshake au-
thenticates only the server and the client-side user is
authenticated within the application using a challenge-
response protocol based on a password or some other