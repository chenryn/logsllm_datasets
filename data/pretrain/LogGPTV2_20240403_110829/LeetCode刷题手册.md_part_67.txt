这道题也是滑动窗口的题目，在窗口滑动的过程中不断累乘，直到乘积大于k，大于k的时候就缩小左
func numSubarrayProductLessThanK(nums []int, k int) int {
package leetcode
if len(nums) == 0 {
return res
for left  end Il node == nil ll end  end ll node == nil ll end < node.Start ll node.End < start {
lazyUpdate(node)
node.Lazy = 0 
if
 Interval 
return node.Tracked 
// segment completely covered by the update range
return true
if node.Start != node.End {
node.Tracked = track 
// segment completely covered by the update range
return
return
start <= node.Start && node.End <= end { 
} else { 
if track {
 node.Right.Lazy =
 node.Left.Lazy = 1
node.Right.Lazy = 
node.Left.Lazy =
[]int 
2
1
---
## Page 693
=
root.Interval[0]-1)}]
// func (this *RangeModule) delete(root *BSTNode, interval [lint) *BSTNode {
root.Interval[1]+l), interval[1]}]
二
二
root.Interval[0]-1]}]
// func (this *RangeModule)
=
=
// func (this *RangeModule) RemoveRange(left int, right int) {
=
// func (this *RangeModule) AddRange(left int, right int) {
二
root.Interval[1]+l], interval[1]}]
二
二
{ //
二
二
二
二
/
二
？
return RangeModule{}
 if root == nil {
 return root
 return query(this.Root,
interva] := []int{left, right － 1}
this.Root = insert(this.Root, interval)
 interval := []int{left,right － 1} 
if root.Interval[1] < interval[1] 
if interval[0] < root.Interva][O］ { 
if root.Interval[1] <interval[1]{
if interval[0] < root.Interval[O] {
if root.Interval[0] <= interva][O] && interva][1] <= root.Interva][1] {
if root == nil {
this.Root = delete(this.Root, interval)
Y
 root.Left = delete(root.Left, []int{interval[O], min(interval[1],
 return nil
Y
 root.Right = delete(root.Right, 
 root.Right = insert(root.Right, []int{max(interval[O],
 root.Left = insert(root.Left, []int{interval[O], min(interva][1],
 return root
 return &BSTNode{interval， nil， nil}
insert(root *BSTNode, interval []int） *BSTNode {
QueryRange(left int,right int) bool {
[]int{left, right －1})
[]int{max(interval[0]
3
---
## Page 694
// func （this *RangeModule) query(root *BSTNode, interval []int) bool {
=
=
川
/
二
二
//}
二
/
7
7
/
二
7
二
二
root.Right}
nil}
/
if interval[o] < root.Interval[o] {
if root.Interval[1] < interval[0]{
if interval[1] < root.Interval[O] {
if root == nil { 
return root
if root.Interval[1] <= interva][1]
if interva][0]
left := true
if root.Interval[O] < interval[0] && interva][1] < root.Interval[1] {
if interva][O] <= root.Interva][O] && root.Interval[1] <= interval[1] {
if interva][1] < root.Interva][O] ll root.Interva][1] < interva][O] {
 return query(root.Right, interval)
return query(root.Left, interval)
 return false
 root.Interva][0] = interva][1] + 
left = query(root.Left, []int{interval[O], root.Interval[O] － 1})
 root.Interval[1] = interval[o] -
return left
left.Right = right
 right := &BSTNode{[]int{interval[i] + l, root.Interval[1]}， nil,
 left := &BSTNode{[]int{root.Interval[O]， interval[O] - l}， root.Left
}else { 
} else if root.Right == nil {
if root.Left == nil {
return root
 return root.Left 
 return root.Right
return root 
root.Left = delete(root.Left, pred.Interval)
root.Interval = pred.Interval
for pred.Right != nil {
 pred = pred.Right
<= root.Interval[0]
T
---
## Page 695
 Example 2:
Example 1: 
bit character or not. The given string willalways end with a zero.
Note:
Now given a string represented by several bits. Return whether the last character must be a one-
We have two special characters. The first character can be represented by one bit O. The second
题目：
717. 1-bit and 2-bit Characters
●1 <= len(bits)<= 1000
last character is NoT one-bit character.
The only way to decode it is two-bit character and two-bit character. So the
Explanation: 
Output: False
bits = [1, 1, 1, 0]
Input:
last character is one-bit character.
The only way to decode it is two-bit character and one-bit character. So the
Explanation:
Output: True
bits = [1, 0, 0]
Input:
// }
二
二
二
 param_2 := obj.QueryRange(left,right);
 obj.AddRange(left,right);
obj := Constructor();
Your RangeModule object will be instantiated and called as such:
 return left && right
if root.Interval[1]<interval[1]{
right := true 
right = query(root.Right, []int{root.Interval[1] + l, interval[1]})
---
## Page 696
题目
718. Maximum Length of Repeated Subarray.
代码
解题思路
注意：
0结束。
现给一个由若干比特组成的字符串。问最后一个字符是否必定为一个一比特字符。给定的字符串总是由
有两种特殊字符。第一种字符可以用一比特0来表示。第二种字符可以用两比特(10 或11)来表示。
题目大意
·给出一个数组，
●bits[i] 总是0或 1．
● 1 <= len(bits)<= 1000.
●bits[i] is always O or 1.
func isoneBitCharacter(bits []int) bool{
package leetcode
return i == len(bits)-1
for i = O; i < len(bits)-l; i++ {
var i int 
下，说明 bits[len（bits）－ 1］== 1，这个时候最后一个 0一定属于第二类字符。
依题意，0的来源有2 处，可以是第一类字符，也可以是第二类字符，1的来源只有1处，一定
于第一类字符？
符，第一类字符是"0"，第二类字符是"11"和"10"，请判断这个数组最后一个元素是否一定是属