bcryptprimitives!validateMSCryptSymmKey+0x12:
00007ffa‘436a79be 488bc1
mov
rax,rcx
00007ffa‘436a79c1 c3
ret
Figure 4.3. Disassembled validateMSCryptSymmKey function (annotated)
It was inferred from this and other symbol names that MSSK likely stands
for “MicroSoft Symmetric Key” or “Microsoft Software Symmetric Key.” This
ﬁnding is in-line with discovery of the AES keys within the MSSK structure. The
AES key is actually repeated twice in close proximity, but bulk extractor (and, by
proxy, ﬁndaes) only identiﬁed one of the two keys. The reason is that the ﬁrst value
60
is the actual key, whereas the second “key” exists as part of the (much larger)
identiﬁed schedule. As mentioned, the “cold-boot attacks” paper discussed the
observation that schedule pre-calculation produces a large deterministic block as a
time-memory trade-o↵ which, while eﬃcient, also constitutes a security risk by
enabling the type of scanning employed here (Halderman et al., 2008).
Performing the same analysis on the ssl3 tag resolved the symbols listed in
Figure 4.4, all of which were inside of the “ncryptsslp” (Ncrypt SSL Provider)
module. There was no “validate” function for ssl3, but the combination of the
symbol names and close proxity to the AES keys provide corroborating
circumstantial evidence that 3lss could be a session key structure, or at the very
least another structure that requires a key (for instance the HMAC or the key used
for session ticket encryption / decryption). Note that the trailing symbols from the
“ln” command and miscellaneous hyperlinks have been removed from Figure 4.4 for
brevity.
0:000> .foreach(match {s -[1]a 00007ffa‘00000000 L?800000000000 3lss}){ln match}
(00007ffa‘3f172400)
ncryptsslp!TlsGenerateSessionKeys+0x251
(00007ffa‘3f172400)
ncryptsslp!TlsGenerateSessionKeys+0x2aa
(00007ffa‘3f173000)
ncryptsslp!SPSslDecryptPacket+0x43
(00007ffa‘3f1735c0)
ncryptsslp!SPSslEncryptPacket+0x43
(00007ffa‘3f173f20)
ncryptsslp!SPSslImportKey+0x19a
(00007ffa‘3f173f20)
ncryptsslp!SPSslImportKey+0x22b
(00007ffa‘3f1743b0)
ncryptsslp!SPSslExportKey+0x76
(00007ffa‘3f1743b0)
ncryptsslp!SPSslExportKey+0x103
(00007ffa‘3f175440)
ncryptsslp!SPSslFreeObject+0x1b
(00007ffa‘3f176b20)
ncryptsslp!guard_dispatch_icall_nop+0x1e07**
(00007ffa‘3f17c8d4)
ncryptsslp!Ssl2GenerateSessionKeys+0x22c
(00007ffa‘3f17c8d4)
ncryptsslp!Ssl2GenerateSessionKeys+0x294
**Missing Symbols for function, nop was closest symbol
Figure 4.4. ssl3 resolved symbols
The composition of the ssl3 structure and other SSL structures will be
discussed in Section 4.4 of this chapter. Brieﬂy, notice from Figure 4.2 that directly
61
after the ssl3 structure, the values “0x0303” and “0x0c28” appear, which match the
public connection parameters listed earlier. The value directly preceding the “ssl3”
magic is a dword indicating the size of the structure, which encompasses the MSSK
structure and adds weight to the supposition that the keys may in fact be session
keys when combined with the symbols, despite the lack of cross-host matches.
Returning to the literature review, it was conceived that, as Schannel is also
loaded into the process requesting the SSL/TLS connection, the 3lss structure may
still be the session key structure, and may be passed to the application after the key
exchange, even though LSASS performs the key isolation for longer-term keys. For
this reason, dumps were made of the RDP processes on either side of the
connection1. This yielded matching 3lss structures, solidifying the circumstantial
evidence that 3lss is the session key structure. The actual structure with the ’3lss’
tag was di↵erent in these processes than in LSASS, however. As anticipated, more
than one matching key was found between hosts, presumably for a client write and
server write key. Supporting this is a value which appears to be a ﬂag for read or
write that is set oppositely for matching keys on each side of the connection.
4.3 Public Connection Values
Scanning with the unique public connection values did return hits, but did
not immediately lead to a direct correlation with a key. The session ID and the
client/server random values both appeared in multiple locations in memory across
samples, but did not appear reliably linked to a key in the immediate context. As
will be discussed later, the session ID was eventually linked to the master key.
The client and server random values were seen to be stored concatenated
together, with the client random preceding the server random value. A loose
context for the random values was developed based on the hash suite list, possibly
1mstsc.exe on the client-side and the svchost process that contains the RDP Services on the
server-side of the connection
62
stored in the same structure or allocated at the same time. An example of this
relationship can be seen in Figure 4.5.
The hash suite list appears to be stored in multiple structures, so use of this
list to ﬁnd the random automatically would be more complex. Misses can be seen in
the output depicted in the ﬁgure. In x64 Windows 10 systems, the random values
appear to begin approximately 0xD2 bytes above the ﬁrst entry in some of the hash
suite lists.
There were also non-aligned instances of individual random values, where it
was stored in close proximity to the hash suite list, appearing alongside what could
be bu↵ered application data. No references to or from either nebulous hash suite list
“structures” were identiﬁed, which meant that this was a dead end for further
analysis during the time-frame available.
63
0:000> .foreach(hashSuite {s -[1w]b 0x0 L?800000000000 04 01 05 01 02 01 04 03 05 03 02 03 02 02}){db
${hashSuite}-D2 L40;.echo **}
0000005e‘e67623c0
56 ba 52 74 9b 13 80 53-02 dc f5 71 ca a5 0d 64
V.Rt...S...q...d
0000005e‘e67623d0
6a de d1 e5 d4 c7 30 46-98 88 83 90 b9 1b 50 b3
j.....0F......P.
0000005e‘e67623e0
56 ba 7c a4 b9 e0 c4 87-76 10 ee 27 be b3 33 11
V.|.....v..’..3.
0000005e‘e67623f0
cd 78 23 0d 4a 84 f8 51-d4 a8 28 1e 69 07 32 a6
.x#.J..Q..(.i.2.
**
0000005e‘e6767790
56 ba 52 74 41 ca a9 aa-d0 11 e0 7e e0 b7 67 02
V.RtA......~..g.
0000005e‘e67677a0
81 24 26 c0 c9 db 2d 2b-9d 0b 0d 34 04 bd ea 92
.$&...-+...4....
0000005e‘e67677b0
56 ba 7c a4 83 81 c0 60-a3 5f 3a 6d b3 4d c8 c8
V.|....‘._:m.M..
0000005e‘e67677c0
10 07 41 ff e5 ce ce 17-a0 25 76 4f 9f 20 e1 20
..A......%vO. .
**
0000005e‘e678a248
56 ba 7d 0c 3b 9a 75 54-02 e7 c1 5a c7 d6 d5 59
V.}.;.uT...Z...Y
0000005e‘e678a258
72 5d f4 12 98 b5 c5 5f-8c e1 6b 74 a5 6a 25 44
r]....._..kt.j%D
0000005e‘e678a268
56 ba 52 dc ce 0f fb 20-61 5d 40 cc 27 2d 33 8e
V.R.... a]@.’-3.
0000005e‘e678a278
1d c3 63 4d b7 ba 60 3b-89 ba 69 d3 2f d8 89 52
..cM..‘;..i./..R
**
0000005e‘e678aed8
56 ba 7c a7 f0 84 1d 9f-49 51 4a 61 41 58 97 bc
V.|.....IQJaAX..
0000005e‘e678aee8
40 a3 53 79 91 4d 8a cb-d1 c7 00 8a 77 f6 f5 c6
@.Sy.M......w...
0000005e‘e678aef8
56 ba 52 77 81 5f df 8d-95 4c 9f 6a d0 47 62 f7
V.Rw._...L.j.Gb.
0000005e‘e678af08
5a 2e 91 4f 5a 87 04 a0-6a 55 0a 01 20 a3 ba 11
Z..OZ...jU.. ...
**
0000005e‘e7245ca8
56 ba 7c ad 4b fb f3 07-29 00 30 b4 da 42 37 c5
V.|.K...).0..B7.
0000005e‘e7245cb8
ba 8b 58 40 e0 9b d9 e7-93 ae 92 2c b2 49 0d 8d
..X@.......,.I..
0000005e‘e7245cc8
56 ba 52 7d d6 76 9f 9b-d2 52 ce 18 64 e1 47 be
V.R}.v...R..d.G.
0000005e‘e7245cd8
9a 85 c4 cf 38 35 06 68-8f fb 89 58 f6 e6 ce 35
....85.h...X...5
**
0000005e‘e72483f0
eb 00 00 00 02 00 00 00-00 00 02 00 00 00 00 00
................
0000005e‘e7248400
eb 00 00 00 00 00 00 00-16 03 03 00 e6 01 00 00
................
0000005e‘e7248410
e2 03 03 56 ba 7d 0c 3b-9a 75 54 02 e7 c1 5a c7
...V.}.;.uT...Z.
0000005e‘e7248420
d6 d5 59 72 5d f4 12 98-b5 c5 5f 8c e1 6b 74 a5
..Yr]....._..kt.
**
0000005e‘e7258838
00 00 00 00 00 00 08 00-00 00 63 e6 5e 00 00 00
..........c.^...
0000005e‘e7258848
66 77 04 80 a1 ff ff ff-16 03 03 00 e6 01 00 00
fw..............
0000005e‘e7258858
e2 03 03 56 ba 7d 0c 3b-9a 75 54 02 e7 c1 5a c7
...V.}.;.uT...Z.
0000005e‘e7258868
d6 d5 59 72 5d f4 12 98-b5 c5 5f 8c e1 6b 74 a5
..Yr]....._..kt.
Figure 4.5. Client/Server random values in memory
Scanning with the common public values like TLS version and cipher suite
identiﬁer led to the discovery of another structure, which was later conﬁrmed to be
64
the master key structure. When the ssl3 tag was initially recognized, it seemed as
though it might be a reference to SSL v3, which is sometimes conﬂated with TLS.
This theory, however, changed rapidly upon scanning for other instances of the TLS
version number, which led to the discovery of the magic value “ssl5” (the master
key).
4.4 Identiﬁed SSL Structures
After discovery of the ssl3 and ssl5 tags, all loaded modules were scanned for
other appearances of the ASCII “ssl” appended with a number. This led to the
identiﬁcation of “ssl1” through “ssl7” inclusive, all of which were found in the
ncryptsslp module. These values were then used to scan writable memory for
instantiations, which yielded results for the majority of the magic values. Before
going on to explore those instances, the magic values in the module were
symbolically resolved to gain better insight into the meaning and utility of the
identiﬁed instances.
It was at this point that the “validate” functions came back into play; the
ncryptsslp symbols were ﬁltered to display those symbols that contain the phrase
“validate” and the results can be seen in Figure 4.6. All of these functions shared a
common ﬂow when disassembled:
1. accept a handle (always a pointer in this case)
2. check that the ﬁrst dword is a particular size value
3. check that the second dword is a speciﬁc magic value
This explicitly ties a given magic to a particular purpose/concept in the TLS
paradigm; further, it dictates the exact size of each structure and that the ﬁrst two
ﬁelds of each are a size followed by a magic. The disassembled
“ncryptsslp!SslpValidateMasterKeyHandle” function that illustrates this ﬂow can be
seen in Figure 4.7 and the magic values are mapped to the Validate function in
Table 4.1.
65
0:000> x /2 ncryptsslp!*validate*
00007ffa‘3f17b558 ncryptsslp!SslpValidateEphemeralHandle
00007ffa‘3f17b5b8 ncryptsslp!SslpValidateMasterKeyHandle
00007ffa‘3f1717ec ncryptsslp!SslpValidateProvHandle
00007ffa‘3f17b578 ncryptsslp!SslpValidateHashHandle
00007ffa‘3f17b598 ncryptsslp!SslpValidateKeyPairHandle
Figure 4.6. Ncryptsslp “Validate” function symbols
0:000> uf ncryptsslp!SslpValidateMasterKeyHandle
ncryptsslp!SslpValidateMasterKeyHandle:
00007ffa‘3f17b5b8 4885c9
test
rcx,rcx
00007ffa‘3f17b5bb 7412
je
ncryptsslp!SslpValidateMasterKeyHandle+0x17 (00007ffa‘3
f17b5cf)
Branch
ncryptsslp!SslpValidateMasterKeyHandle+0x5:
00007ffa‘3f17b5bd 833950
cmp
dword ptr [rcx],50h
00007ffa‘3f17b5c0 720d
jb
ncryptsslp!SslpValidateMasterKeyHandle+0x17 (00007ffa‘3
f17b5cf)
Branch
ncryptsslp!SslpValidateMasterKeyHandle+0xa:
00007ffa‘3f17b5c2 817904356c7373
cmp
dword ptr [rcx+4],73736C35h
00007ffa‘3f17b5c9 7504
jne
ncryptsslp!SslpValidateMasterKeyHandle+0x17 (00007ffa‘3
f17b5cf)
Branch
ncryptsslp!SslpValidateMasterKeyHandle+0x13:
00007ffa‘3f17b5cb 488bc1
mov
rax,rcx
00007ffa‘3f17b5ce c3
ret
ncryptsslp!SslpValidateMasterKeyHandle+0x17:
00007ffa‘3f17b5cf 33c0
xor
eax,eax
00007ffa‘3f17b5d1 c3
ret
Figure 4.7. Disassembled ValidateMasterKey function (x64)
The ssl3 and ssl7 magic values did not map to a “validate” function. The
supposed purpose of ssl3 was discussed previously in Section 4.2, and is likely the
session key structure. The ssl7 magic value symbolically resolved in three functions:
66
Table 4.1. Ncryptsslp magic values to function mapping
SSL Magic
Size (x86)
Size (x64)