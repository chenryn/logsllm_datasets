Function
ssl1
0xE4
0x130
SslpValidateProvHandle
ssl2
0x24
0x30
SslpValidateHashHandle
ssl3
?
?
ssl4
0x18
0x20
SslpValidateKeyPairHandle
ssl5
0x48
0x50
SslpValidateMasterKeyHandle
ssl6
0x18
0x20
SslpValidateEphemeralHandle
ssl7
?
?
“ncryptsslp!SPSslGeneratePreMasterKey,” “ncryptsslp!SPSslGenerateMasterKey,”
and “ncryptsslp!TlsDecryptMasterKey.” It also appeared in a fourth function for
which no symbols existed. Because it was not identiﬁed as regularly instantiated
during the various runs of the development phase, and because the master key
structure did regularly appear, this was not pursued within the scope of the analysis.
After enumerating the numbered SSL magics, scanning was performed on the
“C:\Windows\System32\” directory where the majority of operating system DLLs
reside. This was done with a rudimentary “ﬁndstr” command, simply to see if other
(non-loaded) libraries referenced these magic values. The only match returned on
the Windows 10 analysis machine was the ncryptsslp.dll ﬁle.
With the knowledge gained from the validate functions about the intended
size and purpose of the structures, the actual instantiations in memory were
analyzed to enumerate the members of those structures. The focus was on the
“keys,” beginning with the master key structure (ssl5) and including the presumed
session key structure (ssl3), the “KeyPair” structure (ssl4), and the “Ephemeral”
structure (ssl6).
The most salient, and therefore most explored, of these was the master key.
This structure was eventually leveraged to decrypt connections. Analysis performed
67
on the ssl3, ssl4, and ssl6 structures, was not as thorough or conclusive, but the
fruits of that analysis are also provided here as a basis for future work.
The master key instantiations were identiﬁed and dumped via the WinDbg
command in Figure 4.8. Using this method, every identiﬁed structure was displayed
separated by a series of asterisks, with the length determined by the size ﬁeld
(allowing the same command to be portable between x86 and x64 systems). Only
one example instantiation was included for demonstration of the output. All of the
resulting instances were then compared for similarities and known values.
0:000> .foreach(sslMK {s -[1w]d 0x0 L?800000000000 ’ssl5’}){db ${sslMK}-4 Ldwo(${sslMK}-4);.echo
************}
0000005e‘e72d2500
50 00 00 00 35 6c 73 73-03 03 00 00 00 00 00 00
P...5lss........
0000005e‘e72d2510
10 18 18 3f fa 7f 00 00-01 00 00 00 35 41 87 dd
...?........5A..
0000005e‘e72d2520
50 81 b2 18 5d b7 ff 7e-c9 db be a8 55 15 99 24
P...]..~....U..$
0000005e‘e72d2530
a7 cb 8a 3d bf 33 6c 0a-a9 57 19 bb 2b 51 3a 36
...=.3l..W..+Q:6
0000005e‘e72d2540
c7 7a 3a 9e e5 04 00 39-cd 05 a0 90 00 00 00 00
.z:....9........
************
Figure 4.8. SSL master key instance in memory (x64)
The TLS version was found stored as a dword next to the magic values. This
was veriﬁed through experimentation with the TLS version number during
connections. Speciﬁcally, by changing the supported server TLS version, one could
articulate the negotiated version for a connection. The version is changed by
modifying registry values located within “HKLM
SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL” under an
eponymous subkey, which must be manually created for each SSL or TLS version
desired (Microsoft, 2015e).
If the master key structure were to be represented as a C struct using
Hungarian Notation, as is used in much of the native code accessible on MSDN, it
would appear similar to Figure 4.9.
68
typedef struct _SSL5_Struct {
ULONG cbLength,
// The count in bytes (cb), of the structure
ULONG dwMagic,
// a dword (dw) of the ASCII value ’ssl5’ [stored as ’5lss’]
ULONG dwProtocol,
// One of the CNG SSL Provider Protocol Identifier values (TLS Version)
ULONG dwUnknown1,
// non-existent in x86 -> padding?
PVOID pvCipherSuite,
// a pointer to an ncryptsslp!CipherSuiteList entry
ULONG bIsClient,
// boolean value - 0 for server, 1 for client
UCHAR[48] MasterKey,
// the 48-byte master key
ULONG dwUnknown2
// always 0 -> reserved?
} SSL5_Struct, *PSSL5_Struct;
Figure 4.9. SSL master key (ssl5) C data structure
Viewable in the comments within Figure 4.9, there are two unknown
members. Speculatively, the ﬁrst unknown may have any number of explainations,
including:
• This could be padding for alignment, though the structure appears to be a
packed structure.
• The protocol ﬁeld may actually be a quadword (8 bytes) in x64 instead of a
dword. This seems unnecessary considering the type of value being stored
• It could be a dword only existing in x64, but this seems to be the least likely
of the three and the value remains zero across the limited samples observed.
The second unknown appears at the very end and was always observed to be zero.
There was one pointer within the structure, which pointed to a list of cipher
suites inside of the ncryptsslp binary. This list contained entries composed of the
numeric cipher suite identiﬁer (e.g. 0xc028) and a series of pointers to Unicode
strings the described the elements of the cipher suite. The ﬁrst pointer in the
structure is to the full cipher suite name (e.g.
TLS ECDHE RSA AES 256 CBC SHA384). This can be seen in Figure 4.10
69
0:000> dc 0000005e‘e73544d0 L2
0000005e‘e73544d0
00000050 73736c35
P...5lss
0:000> dps 0000005e‘e73544d0 Ldwo(0000005e‘e73544d0)/8
0000005e‘e73544d0
73736c35‘00000050
0000005e‘e73544d8
00000000‘00000303
0000005e‘e73544e0
00007ffa‘3f181810 ncryptsslp!CipherSuiteList+0x1300
0000005e‘e73544e8
2993e86c‘00000001
0000005e‘e73544f0
5d4a9b02‘4e8401f2
0000005e‘e73544f8
6bddd58d‘eb766f24
0000005e‘e7354500
ba53633b‘d4cdb1b9
0000005e‘e7354508
2d3b1142‘255cd666
0000005e‘e7354510
01a6a81c‘9af5559e
0000005e‘e7354518
00000000‘73f84d9e
0:000> dpu poi(0000005e‘e73544d0+10) L2
00007ffa‘3f181810
0000c028‘00000c00
00007ffa‘3f181818
00007ffa‘3f181fc0 "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384"
Figure 4.10. Dereference of CipherSuiteList entry from ssl5
The ssl3 structure maintained certain similarities with the master key
structure. There are substantially more unknown variables and assumptions, but
the ﬁrst three members are the same, and the fourth known member serves the
same purpose (identifying the cipher suite). Figure 4.11 provides the annotated
structure as observed, but the variables were not directly manipulated to assist in
identiﬁcation, so in most cases speculations are noted.
Interestingly, only AES keys were identiﬁed in this structure when valid,
likely because it is the preferred symmetric algorithm broadly in use. If more time
was available, attempts would be made to generate ssl3 structures with 3DES or
RC4 to observe di↵erences.
70
typedef struct _SSL3_Struct {
ULONG cbLength,
// the count in bytes (cb), of the structure (usually 0x027C on x64)
ULONG dwMagic,
// a dword (dw) of the ASCII value ’ssl3’ [stored as ’3lss’]
ULONG dwProtocol,
// One of the CNG SSL Provider Protocol Identifier values (TLS Version)
ULONG dwCipherSuite,
// numeric cipher suite identifier
ULONG dwUnknown1
// boolean value -- read or write key?
ULONG cbSymmKey
// this value observed to match the size value for MSSK
ULONG cbHashLength,
// the size of the ensuing hash, based on MAC algo
UCHAR[48] HashData,
// fixed field - if preceding length is not 48 bytes, then 0 padded
MSSK_Struct SymmKey
// the associated MSSK Structure
} SSL3_Struct, *PSSL3_Struct;
typedef struct _MSSK_Struct {
ULONG cbLength,
// the count in bytes (cb), of the structure (usually 0x0230 on x64)
ULONG dwKeyMagic,
// ’KSSM’ -> MS SK -> MicroSoft Symmetric Key
ULONG dwUnknown2,
// usually 0x02000100 -> 0x00010002 -> NCRYPT_SCHANNEL_INTERFACE?
ULONG dwUnknown3,
// Typically observed as 1
ULONG dwKeyBitLen,
// the length in bits of the AES key, usually 0x100 or 0x80
ULONG cbKeyLength,
// the count in bytes of the AES key (compliments below field)
UCHAR[32] AesKey,
// the AES key
ULONG dwUnknown4,
// always 0 -> padding?
UCHAR[448] KeySchedule, // fixed length - the AES Key Schedule or state for each round, 0 padded
ULONG dwUnknown5,
// Half of the length, equivalent to N_state * N_rounds
ULONG cbScheduleLen,
// Overall size of KeySchedule member
UCHAR[16] Unknown6
// Possibly an IV? this seems likely
} MSSK_Struct, *PMSSK_Struct;
Figure 4.11. LSASS SSL session key (ssl3) data structure
As discussed in the literature review, the key schedule size is ﬁxed for each
AES key size (176, 208, or 240 bytes). So, for an AES 256-bit key, the schedule is
240 bytes long; however, the length of the expanded key sequence that
bulk extractor identiﬁed is seemingly 448 bytes long for AES 256 and 320 for AES
128 keys, zero padded in the case of the latter. Incidentally, this was observed to be
32 bytes multiplied by the number of rounds, which would equate to twice the size
of the state for each round. The ﬁrst Nb(Nr + 1) ⇤ 4 bytes were determined to match
the key schedule by passing the identiﬁed key to an AES implementation and
printing the key schedule. This intuitively is why bulk extractor identiﬁed the keys
71
in the ﬁrst place. Still, this leaves 208 bytes remaining in the case of AES 256. Of
note is that the last 16 bytes (Nstate is always 128 bits) are always the ﬁrst 16 bytes
of the key (and by extension the ﬁrst 16 bytes of the key schedule).
It was also observed that two dwords typically followed the key schedule,
both of which were related to size. The ﬁrst dword containing the size of the
Nstate(Nrounds) and the second was double that value, coinciding with the size of the
full “KeySchedule” blob.
As noted earlier, the session key structure (3lss) was also found in the
requesting process memory, RDP in this case. This structure was similar to the one
found in LSASS, but varied in several obvious ways.
• The ﬁrst is that the cipher suite ID was replaced with a pointer to the
ncryptsslp!CipherSuiteList entry that the cipher suite ID appears in.
• The second was that the structure appeared far less sparse, with pointers that
referenced addresses within its own size value.
• The third was the the “RUUU” magic value appeared inside ssl3 and pointed
to the MSSK structure directly below it, also inside ssl3
An example of the ﬁrst 0x100 bytes of one of these entries can be seen in
Figure 4.12. Following that, the perceived structure, based on limited testing, is
depicted in the Volatility V-Type format in Figure 4.13.
72
0:000> .foreach(sessK {s -[1w]a 0 L?800000000000 3lss}){.echo **;db ${sessK}-4 L100}
**
000001ef‘b9d1a1e0
2e 0d 00 00 33 6c 73 73-03 03 00 00 00 00 00 00
....3lss........
000001ef‘b9d1a1f0
90 19 57 d8 fc 7f 00 00-01 00 00 00 00 00 00 00
..W.............
000001ef‘b9d1a200
50 a2 d1 b9 ef 01 00 00-00 00 00 00 00 00 00 00
P...............
000001ef‘b9d1a210
00 00 00 00 00 00 00 00-ff 1c 62 2b 00 00 00 00
..........b+....
000001ef‘b9d1a220
00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00
................
000001ef‘b9d1a230
00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00
................
000001ef‘b9d1a240
00 00 00 00 00 00 00 00-04 00 00 00 00 00 00 00
................
000001ef‘b9d1a250
be 0c 00 00 52 55 55 55-20 f4 c8 bb ef 01 00 00
....RUUU .......
000001ef‘b9d1a260
70 a2 d1 b9 ef 01 00 00-00 00 00 00 00 00 00 00
p...............
000001ef‘b9d1a270
80 0c 00 00 4b 53 53 4d-02 00 01 00 05 00 00 00
....KSSM........
000001ef‘b9d1a280
10 00 00 00 01 00 00 00-00 01 00 00 01 00 00 00
................
000001ef‘b9d1a290