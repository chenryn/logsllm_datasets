the recipient’s public key in the clear, users have to scan every
new transaction and perform various cryptographic operations
to check whether a transaction is intended for them.
User anonymity is guaranteed by untraceability and unlink-
ability. Since a transaction reveals nothing about the sender’s
or receiver’s public key, a user’s public key cannot be linked
to the P2P node that she uses to send or receive transactions.
Software deployments. Deployments of crypto-currency
software differ across projects (and among users of the same
currency). Various deployment choices greatly inﬂuence a
user’s vulnerability to the side-channel attacks we present.
We distinguish three types of software: (1) Nodes are P2P
clients that handle the blockchain’s consensus layer by ex-
changing and validating transactions and blocks; (2) A wallet
(possibly backed by a hardware module) stores a user’s keys
and UTXOs and connects to a node to send or receive transac-
tions. (3) A prover produces the zero-knowledge (ZK) proofs
required to privately spend a user’s UTXOs.
We consider the following common deployment modes,
which refer to the interaction between a user’s wallet and a
P2P node or prover.
1. Integrated. The wallet, node and prover functionalities
are all part of the same process. This is the current design
of the ofﬁcial Zcash client.
2. Local. Different components are run in separate processes
in a local network (this is Monero’s default for wallets
and nodes). Some hardware wallets also delegate the gen-
eration of cryptographic proofs to a local software.
3. Remote owned. Due to restricted computation power or
memory, a wallet may connect to a remote P2P node or
prover hosted by the user. Remote P2P nodes are com-
monly used, e.g., in Monero or Zcash’s mobile wallets.
Outsourcing cryptographic proofs is uncommon, but is
explicitly enabled in Zcash’s design [27] and was imple-
mented in an earlier protocol version [15].
4. Remote third-party. As running a P2P node is costly, users
may connect their wallet to a node hosted by a third party.
This is common in Monero: newly created wallets connect
to third party nodes while a local node downloads the
blockchain. Such a deployment is unlikely for ZK provers
as the third-party prover has to be trusted for privacy [27].
The anonymous transaction life-cycle. Figure 1 illus-
trates how anonymous transactions are created and shared
with nodes and wallets via a P2P network:
1. To send a new transaction, a user’s wallet selects some
UTXOs and produces a zero-knowledge proof of validity
for the transaction.
2. The transaction is sent to the P2P node connected to the
wallet and shared with the network. P2P nodes store these
transactions in their “Memory Pool” (Mempool).
3. P2P nodes share these transactions with connected wallets.
A wallet scans every new transaction to check whether it
is the transaction’s payee.
Steps 2 and 3 are also performed once a transaction is
included in a block. When a block is mined, the block and the
transactions it contains are propagated to all P2P nodes. The
block’s transactions are then shared with user wallets.
3 Overview of the Attacks
This section gives an overview of our attack strategies. Sec-
tion 4, 5 and 6 then describe instantiations and evaluations of
these attacks in both Zcash and Monero.
3.1 Threat Model
The attacks described in this paper are remote side-channel
attacks. We thus never assume that a victim’s software is com-
promised.2 In line with the software deployments described
in Section 2, we consider the following remote adversaries,
which are illustrated in Figure 1.
1. A network adversary (Adversary 1a and 1b in Figure 1)
passively monitors the encrypted trafﬁc between a vic-
tim’s wallet and a remote service (e.g., a node or prover).
2. A P2P adversary (Adversary 2) participates in the P2P
network. The attacker may deviate from the P2P protocol.
3. A remote node adversary (Adversary 3) controls a third-
party P2P node and passively monitors the (plaintext)
communication between a victim’s wallet and this node.
3.2 Attack Type I: Side-Channels at the Re-
ceiving Party
The most practical and pervasive side-channel attacks that we
discovered affect the last stage of the anonymous transaction
life-cycle depicted in Figure 1 — when a wallet processes
new transactions. These attacks enable remote adversaries to
break the system’s unlinkability and anonymity guarantees.
2An adversary co-located with a user’s wallet could resort to more power-
ful attacks (e.g., cache side-channel attacks). However, such adversaries are
explicitly outside of the threat model considered by Monero and Zcash [18].
2742    29th USENIX Security Symposium
USENIX Association
Our attacks exploit prevalent design ﬂaws in the way that
a user’s wallet periodically checks whether it is the payee of
any new transactions.
Attack goals. Our attacks target transaction unlinkability
and user anonymity. The attacker’s goals are thus to: (1) de-
termine whether two transactions pay the same address, and
(2) to determine how the user of a known address connects to
the P2P network.
Our attacks are tailored to common deployment of wallets
and P2P nodes. The actual goal achieved by all of our attacks
is to identify the P2P node that is being used by the payee of
a transaction. In a setting where multiple users connect their
local wallet to a shared remote P2P node, the attacks mounted
by a network adversary or by a remote node adversary further
recover the actual wallet used by the transaction payee.
We consider two different attack scenarios:
• The adversary knows an anonymous public key and sends
a transaction to this key to determine which P2P node (or
wallet) the key’s owner uses to receive transactions.
• An honest user sends a transaction for which the adversary
does not know the intended payee or her public key. The
adversary determines which P2P node (or wallet) is used
by the transaction’s payee.
The latter attack scenario subsumes the ﬁrst, as the adver-
sary can send honestly crafted transactions to a known public
key. The latter scenario directly leads to a break of transaction
unlinkability. Given two transactions sent into the network,
the adversary simply determines whether the payees of both
transactions use the same P2P node or wallet. In addition,
both attack scenarios represent a break of user anonymity and
can be bootstrapped for additional privacy violations:
• IP address recovery. The adversary can link a public key
to the IP address of the owner’s P2P node (or her wallet
if it connects to a remote node), unless the owner uses
anonymization tools such as Tor.3 This information can
be used to de-anonymize or geo-localize the victim.
• Diversiﬁed address linkability. Given two public keys, an
attacker can determine if they belong to the same user or
not. The attacker sends a transaction to each public key,
and checks if the same node or wallet is identiﬁed. This
breaks the unlinkability property of diversiﬁed addresses.
• Private key recovery. The vulnerabilities underlying some
of our attacks also open avenues for extracting a victim’s
secret “viewing” key via timing side-channels. Theft of
this key lets the adversary passively link all transactions
sent to the victim (but not steal the victim’s funds).
3An attacker who obtains a victim’s public key does not necessarily know
the victim’s IP address. The victim could have shared the key using a third
party messaging system or forum. An attacker might also have obtained some
public keys by hacking a service supporting anonymous transactions.
Attack strategies. Our attacks exploit a difference in the
way that a wallet processes a transaction when it is the payee
and when it is not. This difference is due to additional crypto-
graphic operations performed to retrieve received funds.
Such differences in wallet behavior are not an issue per se,
as a remote attacker cannot directly interact with a user’s wal-
let. Yet, we ﬁnd that due to various design ﬂaws, differences
in wallet behavior impact the interactions between the wallet
and its P2P node. In turn, we show that a remote attacker can
infer changes in the wallet-to-node interactions via various
side-channels. We develop two general attack strategies:
• Strategy 1: Trafﬁc analysis of wallet-to-node communica-
tion. If a wallet connects to a remote node, a network adver-
sary or remote node adversary can passively observe changes
in the wallet-to-node interaction.
• Strategy 2: Inferring wallet behavior from the P2P layer. If
the wallet and node are co-located, a remote adversary cannot
observe their interactions. Nevertheless, if changes in wallet
behavior impact the interactions between the user’s P2P node
and remote peers, information still leaks to the adversary.
Both strategies apply not only when a transaction is created
and sent into the P2P network, but also when it is included
in a block. At that point, the block and all its transactions are
shared with each peer, and wallets re-process the transactions
to ensure they are valid (e.g., they did not double spend).
3.3 Attack Type II: Side-Channels at
Sending Party
the
The attacks described in Section 3.2 — which break transac-
tion unlinkability and user anonymity — exploit ﬂaws in the
system design of P2P clients and wallets. As such, they do not
directly target any of the protocol’s cryptographic protections.
To broaden the scope of our investigation of side-channel vul-
nerabilities in anonymous transactions, we initiate a study of
attacks on the cryptographic tools that guarantee conﬁdential-
ity and untraceability at transaction creation-time — speciﬁ-
cally succinct zero-knowledge arguments (zk-SNARKs).
The attacks in this section are of a more conceptual nature.
While they are less likely to affect current users, these attacks
illustrate once more the importance of having side-channel-
free cryptographic implementations for future-proof and in-
depth security of anonymity-preserving systems.
Attack goals. The transaction sender is responsible for en-
suring conﬁdentiality and untraceability. As we argue below,
the most plausible target for a remote attack is to recover
transaction amounts — thereby breaking conﬁdentiality.
Challenges. Remote side-channel attacks on transaction
creation face a number of challenges:
USENIX Association
29th USENIX Security Symposium    2743
1. Non-interactivity: Users can create transactions without
interacting with any other parties.
2. Ephemeral secrets: Many transaction secrets (e.g., trans-
action amounts, and secrets related to UTXOs) are single-
use. Thus, even if a side-channel exists, an adversary gets
a single attempt at extracting these secrets.
3. High-entropy secrets: Long-lived secrets used in creating
transactions (e.g., the user’s secret key) have high-entropy,
and require a high-precision side-channel to be extracted.
We show that these challenges can be overcome by an
adversary that targets the proving phase of the transaction
creation process and that aims to (partially) recover a transac-
tion’s conﬁdential amount.
SNARKs in anonymous transactions. Zero-knowledge
proofs are a fundamental building block for anonymous trans-
actions. In a zk-SNARK protocol, a prover has some secret
input (called a witness), and convinces the veriﬁer that this
witness satisﬁes a given predicate, without revealing anything
else about the witness. In Zcash and Monero, such proofs cer-
tify the validity of transactions while preserving their privacy.
In Zcash for example, a proof witness contains a list of spent
UTXOs, a receiver address, and a transacted amount, and the
proof guarantees that these UTXOs exist and belong to the
spender, and that all funds are transferred to the receiver.
Timing side-channels in zk-SNARK provers. Our thesis
is that in current implementations, the time taken to produce
a proof leaks information about the prover’s secret witness—
and in particular about the amount of currency being spent.
Yet, as noted above, it may be hard for a remote adversary
to obtain a timing side-channel on the proof generation pro-
cess, due to the non-interactive nature of transaction creation.
Worse, timing a proof generation may be insufﬁcient to ex-
tract secrets that are ephemeral or have high-entropy. Despite
these challenges, we argue below that remote timing attacks
on zk-SNARK provers in anonymous crypto-currencies are
possible in some deployment scenarios, and we demonstrate
in Section 6 that the timing of a proof generation can leak
signiﬁcant information about secret transaction amounts.
Regarding non-interactivity, we make two observations:
• If a weak client (e.g., a mobile wallet) outsources proofs to
a remote service, a network adversary can time the prover.
While proof outsourcing is uncommon, the Zcash protocol
enables this feature [27] and remote proving services were
designed for early protocol versions [15]. Proof delegation
is also recommended for hardware wallets [16]. Some
users may opt for delegating proofs to a remote service.
• More generally, an adversary may get out-of-band infor-
mation on when the transaction creation process starts and
observe when it ends by monitoring the P2P network. For
example, a user could setup recurring payments, where
transactions are created at a ﬁxed time. An adversary may
also have the ability to trigger a transaction as part of
some outer protocol. We draw a connection to timing
side-channels for digital signatures. While signatures are
non-interactive, protocols that use them (e.g., TLS) can
introduce remote side-channels [8, 9].
Due to the high-entropy of many transaction secrets, our at-
tacks target the transacted amount, a non-cryptographic value
for which even a coarse approximation (as leaked by a single
timing measurement) constitutes a privacy breach.4
Attack strategy. We consider a cryptographic timing at-
tack that exploits timing variations in arithmetic operations
depending on the operands’ values. Such attacks have been
studied for many cryptographic primitives [8, 9, 29], but had
not been considered for zk-SNARKs prior to this work.
We exploit the fact that the time to produce a proof is cor-
related with the value of the prover’s witness. As the witness
contains the transaction amount, we expect this amount to be
correlated with the proof time. For example, Zcash’s proofs
decompose the transaction amount into bits and compute an
elliptic curve operation for each non-zero bit. The proof time
is thus strongly correlated with the Hamming weight of the
transaction amount, which is in turn correlated with its value.
4 Attacks on Unlinkability and Anonymity in
Zcash
We now evaluate the side-channel attacks on transaction pro-
cessing described in Section 3.2. We ﬁrst demonstrate attacks
against Zcash. Attacks on Monero are described in Section 5.
Our attacks on Zcash adopt the second strategy from Sec-
tion 3.2, that exploits a lack of isolation between a user’s
wallet and P2P node to leak wallet behaviors to a remote
P2P adversary. In the Zcash client, the two components are
part of a single process that sequentially processes received
messages (including new transactions). We describe two side-
channel attacks that exploit this tight coupling. Throughout
this section, we often use the term “node” to refer to the single
process that implements both a P2P client and a wallet.
4.1 Unlinkability in Zcash