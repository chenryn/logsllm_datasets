User: I am doing research on routing protocols.  Currently I perform simulations written in Python of a new protocol.  The next step would be to build a real prototype which can really run on top of a Linux-based operating system (as a routing daemon such as ospfd).
What would be a well-suited programming environment/language to quickly build a prototype of a routing protocol?  Anyone having experience with building distributed protocol prototypes?  
I would like to focus as much as possible on high-level protocol logic instead of on low-level machine-related instructions.  I am willing to learn new languages (such as Erlang or Haskell), in case they are better adapted for such a task.  Alternatively, I have read about the twisted framework available in Python (which would probably allow to re-use some code), but it is unclear to me if this only would help me in case I write client/server-based protocols.  
Does anyone know about an elegant tutorial or example implementation of a (distributed) protocol implementation?
Assistant: Erlang is very well suited for just a logical prototype without concrete implementation as well as implementing real world capable implementations of the protocols.
You don't need any other framework, just Erlang and OTP which comes with it is enough.
Even if you have to work down to packet level Erlang helps you with its binary patterns which are gread for working with protocol packets.
Even if you want high performance you can move the most time critical stuff into whats called "Ports" in Erlang implementing it in C or another low level language.