ulation trapdoor tk = {χi}2(cid:96)+4
i=1 of the underlying QA-
NIZK argument, he could produce valid signature so that
logg σ2 (cid:54)= logh σ3. Then, if the committer later needs to
proof knowledge of the received signature it then has to
use the sigma protocol of Section 3 where both σ2 and
σ3 only appear in committed form.
5. DYNAMIC GROUP SIGNATURES
We adapt the protocol of section 3 to build a dynamic
group signature [11, 36].
At a high level, each group
member obtains a membership certiﬁcate consisting of a
signature (σ1, σ2, σ3, π) on a message ID ∈ Zp which is
only known to the group member. During the joining
protocol, each group member thus obtains a signature
on a committed message ID ∈ Zp. Here, we use a de-
terministic commitment to ID, which suﬃces to ensure
security against framing attacks and allows for a better
eﬃciency. When signing a message, each group member
veriﬁably encrypts the components (σ1, π) of his mem-
bership certiﬁcate that depend on ID (and not σ2, σ3
which can be assumed to be honestly computed here,
unlike in the previous section). For the sake of eﬃciency,
we use a randomness re-using [8] variant of the Cramer-
Shoup encryption scheme [25] whereby σ1 and π are both
encrypted using the same encryption exponent θ ∈ Zp.
For public veriﬁability purposes, the validity of Cramer-
Shoup ciphertexts is demonstrated using Σ protocols and
the Fiat-Shamir heuristic [28] (somewhat in the fashion
of [48]) rather than designated veriﬁer NIZK proofs [25].
In the join protocol, the user proves knowledge of his
membership secret ID ∈ Zp in a zero-knowledge manner,
which restricts the group manager to sequentially inter-
act with prospective users. However, this limitation can
be removed using an extractable commitment as in [27].
Keygen(λ, N ): given λ ∈ N, and the maximum number
of users N ∈ poly(λ), choose asymmetric bilinear
groups cp = (G, ˆG, GT , p) of order p > 2λ.
1. Generate a key pair (pks, sks) for the scheme of
section 3 for a one-block message (i.e., (cid:96) = 1). The
secret key is sks = ω, while the public key is
pks =(cid:0)cp, g, h, ˆg, (cid:126)v = (v, w), Ω = hω, crs(cid:1),
where crs =(cid:0){zj}3
j=1, ˆgz,{ˆgi}6
(cid:1).
i=1
2. Pick xz, yz, xσ, yσ, xID, yID
R← Zp and set
that will be modeled as a random oracle.
Xz = gxz hyz , Xσ = gxσ hyσ , XID = gxID hyID .
3. Choose a hash function H : {0, 1}∗×G10×GT → Zp
(cid:9) to be the group
4. Deﬁne Y = (cid:8)pks, Xz, Xσ, XID
(cid:1).
vate key consists of SOA =(cid:0)xz, yz, xσ, yσ, xID, yID
public key. The group manager’s private key is
SGM = ω = sks whereas the opening authority’s pri-
Join(GM,Ui): The group manager GM, and the prospec-
tive user Ui run the following interactive protocol:
1. Ui chooses ID R← Zp and sends the following to GM:
(VID, ZID, ˆG2,ID, ˆG4,ID) = (vID, zID
2 , ˆgID
2 , ˆgID
4 )
2. GM checks that VID does not appear in any tran-
script of St and abort if it does. Otherwise (i.e., if
VID is fresh), GM veriﬁes that: for k = 2, 4,
e(VID, ˆg) ?= e(g, ˆGk,ID),
e(ZID, ˆg) ?= e(g, ˆG2,ID).
If all tests pass, samples a fresh index i ∈ Zp and
sends it to Ui, otherwise abort.
3. Ui runs an interactive zero-knowledge proof of
knowledge of ID = logv(VID) in interaction with
GM.
the 4-round protocol of
Cramer et al. [24] can be used for this purpose.
Let πK (ID) denote the interaction transcript.
4. GM uses VID = vID to sign ID using the scheme of
section 3: i.e., GM picks s R← Zp, and uses SGM = ω
to compute σ1 = gω · (VIDw)s = gω · (vID · w)s and
For instance,
σ2 = gs,
σ3 = hs.
Then GM uses ZID to generate the QA-NIZK proof
π ∈ G as
π = zω
2 · z3)s
and ﬁnally sends certi = (i, VID, σ1, σ2, σ3, π)
1 · (ZID · z3)s = zω
1 · (zID
5. Finally GM and Ui respectively store
(cid:16)(cid:0)ZID, ˆG2,ID, ˆG4,ID
(cid:17)
(cid:1), πK (ID), certi
and (certi, seci) =(cid:0)(i, VID, σ1, σ2, σ3, π), ID(cid:1).
transcripti =
(8)
Sign(Y, seci, certi, M ): Given a message M ∈ {0, 1}∗ and
a secret seci = ID, the user Ui does the following:
1. Re-randomize the certiﬁcate certi. Namely, choose
r R← Zp and compute ˜σ2 = σ2 · gr, ˜σ3 = σ3 · hr,
˜σ1 = σ1 · (vID · w)r, ˜π = π · (zID
2. Encrypt elements ˜π, ˜σ1 and vID from the mem-
bership certiﬁcate. Speciﬁcally, choose θ R← Zp
and compute the Cramer-Shoup ciphertext CCS =
(C1, C2, Cz, Cσ, CID), where C1 = gθ, C2 = hθ,
σ, CID = vID · X θ
ID.
z , Cσ = ˜σ1 · X θ
Cz = ˜π · X θ
2 · z3)r.
3. Then, prove knowledge of (ID, θ) ∈ Z2
p such that
CID = vID · X θ
ID,
C1 = gθ,
C2 = hθ,
(cid:0)e(Cz, ˆgz) · e(Cσ, ˆg1) · e(˜σ2, ˆg3) · e(˜σ3, ˆg5)(cid:1)
=(cid:0)e(Xz, ˆgz) · e(Xσ, ˆg1)(cid:1)θ ·(cid:0)e(˜σ2, ˆg2) · e(˜σ3, ˆg4)(cid:1)−ID.
R← Zp, compute
Namely, sample random rID, rθ
R1 = grθ , R2 = hrθ , R3 = vrID · X rθ
ID ,
R4 =(cid:0)e(Xz, ˆgz) · e(Xσ, ˆg1)(cid:1)rθ
·(cid:0)e(˜σ2, ˆg2) · e(˜σ3, ˆg4)(cid:1)−rID
and then c = H(M, CCS, ˜σ2, ˜σ3, R1, R2, R3, R4). Fi-
nally compute sθ = rθ + c· θ, sID = rID + c· ID in Zp.
4. Return the signature Σ which consists of
Σ = (CCS, ˜σ2, ˜σ3, c, sID, sθ) ∈ G7 × Z3
(9)
Verify(Y, M, Σ): Parse the signature Σ as in (9) and CCS
as (C1, C2, Cz, Cσ, CID). Then, output 1 if the the
zero-knowledge proof veriﬁes. Namely,
p
1. Compute the group elements R1, R2, R3 ∈ G as:
R1 = gsθ · C
1 , R2 = hsθ · C
−c
−c
2 ,
(10)
−c
ID ;
ID · C
R3 = vsID · X sθ
and the element R4 ∈ GT as
(cid:0)e(Xz, ˆgz) · e(Xσ, ˆg1)(cid:1)sθ ·(cid:0)e(˜σ2, ˆg2) · e(˜σ3, ˆg4)(cid:1)−sID
·(cid:0)e(Cz, ˆgz) · e(Cσ, ˆg1) · e(˜σ2, ˆg3) · e(˜σ3, ˆg5)(cid:1)−c.
2. Return 1 if c = H(M, CCS, ˜σ2, ˜σ3, R1, R2, R3, R4)
(11)
and 0 otherwise.
Open(Y,SOA, M, Σ): Given a pair (M, Σ) and the OA’s
private key SOA =(cid:0)xz, yz, xσ, yσ, xID, yID
(cid:1):
1. Decrypt CCS = (C1, C2, Cz, Cσ, CID) by computing
and
· C
σ1 = Cσ · C
VID = CID · C
−xσ
1
−xID
1
· C
C
−yσ
2
−yID
2
, π = Cz · C
.
(cid:0)˜σ1, ˜σ2, ˜σ3, ˜π(cid:1) for the committed value VID. If so,
2. Search VID in the database of joining transcripts (8)
and check that it corresponds to a valid signature
return the corresponding i, otherwise return ⊥.
−xz
1
−yz
2
It is possible to spare one group element in the sig-
nature by eliminating the encryption CID of vID which
is only used to open signatures in constant time. Then,
the opening algorithm has to check for each transcript if
(˜σ1, ˜σ2, ˜σ3, ˜π) corresponds to the identiﬁer ID embedded
in (σ1, ˆG2,ID, ˆG4,ID) by testing the relation
1 ?= e(˜π, ˆgz)·e(˜σ1, ˆg1)·e(˜σ2, ˆG2,ID·ˆg3)·e(˜σ3, ˆG4,ID·ˆg5)·e(Ω, ˆg6).
This results in a modiﬁed opening algorithm which takes
O(N ) in the worst-case. In applications where signature
openings are infrequent, this is acceptable.
5.1 Security
in (G, ˆG, GT ),
Theorem 3. If SXDH holds
the
scheme is CCA-anonymous in the random oracle model.
Proof. We use a sequence of games where, for each
i, Wi is the event that the adversary A wins in Game i.
At the ﬁrst transition, we need to rely on the security
of the computational soundness of the QA-NIZK argu-
ment of Section 2.2 which relies on the SXDH assump-
tion, since ˜σ2 and ˜σ3 appear un-encrypted in each group
signature.
Game 0: This is the real CCA-anonymity game.
In
the challenge phase, the adversary outputs two
valid membership certiﬁcates and membership se-
crets (cert(cid:63)
0), (cert(cid:63)
1) and obtains a chal-
lenge signature which the challenger computes us-
d), where d R← {0, 1}. We deﬁne W0
ing (cert(cid:63)
to be the event that the adversary outputs d(cid:48) = d.
d, sec(cid:63)
0, sec(cid:63)
1, sec(cid:63)
Game 1: This game is as Game 0,
2 , σ(cid:63)
except
0, cert(cid:63)
ing signatures(cid:0)σ(cid:63)
3 , π(cid:63)(cid:1) correctly veriﬁes but
that
the challenger B aborts in the event, which
we call F1, that A chooses membership certiﬁ-
cates cert(cid:63)
1 for which one of the underly-
1 , σ(cid:63)
2 ) (cid:54)= logh(σ(cid:63)
logg(σ(cid:63)
3 ). This implies that the vector
1 , σ(cid:63)ID
(σ(cid:63)
, σ(cid:63)
3 , Ω) is outside the row space
of the matrix M (1), so that F1 would contra-
dict the soundness of the QA-NIZK proof of [38]
(via the same arguments as in Theorem 9 of [41]
since the matrix can be witness-samplable here)
and thus the DDH assumption in ˆG. We have
[Pr[W1] − P [W0]| ≤ AdvDDH
2 , σ(cid:63)ID
(λ) .
, σ(cid:63)
2
3
ˆG
ID · C
Game 2: We change the way to generate the challenge
signature Σ(cid:63).
Instead of faithfully running the
Schnorr-like protocol, we use the HVZK-simulator
to produce the proofs sθ, sID without knowing the
R← Zp
witnesses θ, ID. Namely, we pick c, sθ, sID
1 , R2 = hsθ ·
at random and set R1 = gsθ · C
−c
ID as well as R4 ∈ GT
2 , R3 = vsID · X sθ
−c
−c
C
as in (11). Then, we program the random or-
acle and assign the output c to the hash value
H(M, CCS, ˜σ2, ˜σ3, R1, R2, R3, R4).
In the unlikely
event that this value was previously deﬁned (which
only happens with probability at most 1/p3), the
challenger aborts. Thus | Pr[W2] − Pr[W1]| ≤ 1/p3
Game 3: We modify again the generation of the chal-
lenge signature Σ(cid:63). Namely, the challenger com-
putes Cz, Cσ, CID using SOA as follows
Cz = ˜π · C xz
Cσ = ˜σ · C xσ
1
1
· C yz
2 ,
2 , CID = vID · C xID
· C yσ
1
· C yID
2 .
The distribution of (Cz, Cσ, CID) remains the same
and we have Pr[W3] = Pr[W2].
Game 4: Here, we modify the distribution of the chal-
lenge signature and replace C2 = hθ by C2 = hθ+θ(cid:48)
,
for a randomly chosen θ(cid:48) R← Zp. We prove in
Lemma 1 that |Pr[W4] − Pr[W3]| ≤ AdvDDHG
(λ).
Game 5: We introduce one more change.
Instead of
sampling h ∈R Zp, the challenger chooses a random
α R← Zp at the beginning of the game, sets h = gα
and retains the information α = logg(h) (note that
we are done with the DDH assumption and we can
henceforth use α = logg(h)). At each signature
opening query, the challenger returns ⊥ on any
signature Σ = (C1, C2, Cz, Cσ, CID, ˜σ2, ˜σ3, c, sID, sθ)
such that C2 (cid:54)= C α
1 . Game 5 remains the same
as Game 4. until the event E5 that A queries
the opening of a signature that properly veriﬁes
although C2 (cid:54)= C α
1 . Lemma 2 states that Pr[E5] ≤
qO·qH /p, where qO is the number of opening queries
and qH is the number of random oracle queries.
In Game 5, Σ(cid:63) perfectly hides (˜π, ˜σ1, vID). Indeed,
C1 = gθ, C2 = hθ+θ(cid:48)
Cσ = (˜σ1 · hθ(cid:48)·yσ ) · X θ
, Cz = (˜z · hθ(cid:48)·yz ) · X θ
z ,
σ, CID = (vID · hθ(cid:48)·yID ) · X θ
ID
and (yσ, yz, yID) ∈ Z3
p are completely independent of A’s
view. The only way for A to infer information about
(yσ, yz, yID) is to make opening queries on signatures such
that C2 (cid:54)= C α
1 . However, all such signatures are declared