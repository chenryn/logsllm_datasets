Smith
Walker
Daniels
Salary
$ 10,000
$ 15,000
$ 12,000
$ 18,000
of, e.g., 128. We keep the pair hJohn, 128i in the local state
and send the value 128 to the database server. The same for
Smith and 10.000, each with a ciphertext of 128. Now, we
add Jack, Smith, 15.000. The value Jack is lexicograph-
ically less than John, so it gets ciphertext 64. The value
Smith has already been added and the ciphertext 128 is re-
peated. The value 15, 000 is larger than 10, 000, so it gets
ciphertext 192. We add the pairs to the local state on the
client and send the ciphertexts to the database server. Note
that the state for last names does not need to be updated.
We repeat this for the other two columns.
Algorithm 1 Encryption
Input: xi
Output: yi
State: hxj1 , yj1 i, . . .
Initialization: h−1, −1i, hN, M i
1. Find hxjk , yjk i, hxjk+1 , yjk+1 i, such that xjk ≤ xi  1, then U pdate(xj1 , . . . , xj
⌊ i
2
).
⌋
3. If i > 2, then U pdate(xj
⌊ i
2
, . . . , xji ).
⌋+2
The decryption algorithm (Algorithm 3) is a simple lookup
in the state.
Algorithm 3 Decryption
Input: yi
Output: xi
State: hxj1 , yj1 i, . . .
1. Find hxi, yii.
2. Return xi.
3.3 Analysis
Our order-preserving encryption algorithm builds a binary
search tree as does Popa et al.’s. Diﬀerent from theirs, ours
is not necessarily balanced and relies on the uniformity as-
sumption about the input distribution. We only balance the
tree when necessary, i.e., then we perform an update oper-
ation. This enables us to maintain the dictionary on the
client and therefore achieve a signiﬁcant performance gain
and compatibility with adjustable onion encryption.
Recall the example from above: N = 16 and M = 256.
Let n = 5, x1 = 13, x2 = 5, x3 = 7, x4 = 5 and x5 =
12. Then m = 4, y1 = 128, y2 = 64, y3 = 96 and y5 =
112 (without necessity for any ciphertext modiﬁcation). We
can see the binary tree growing from the root in Figure 2
as we encrypt new plaintexts. Since our choice of M is a
power of 2, the path from the root to leaf forms the preﬁx
of the binary representation of the ciphertext. An edge to
a higher-order plaintext results in a 1; an edge to a lower-
order plaintext results in a 0. The postﬁx of the ciphertext
is 10⋆.
Our order-preserving encryption algorithm also forms a
monotonically increasing curve as does Boldyreva et al.’s (or
any order-preserving scheme). In diﬀerence to theirs, ours
is only monotonically increasing whereas theirs is strictly
monotonically increasing, since they consider every possible
input value. Also, our scheme encrypts the plaintexts on
the x-axis in random order, namely as they are encrypted,
whereas Boldyreva choose the mean remaining plaintext value
Figure 1: Monotonically Increasing Curve Plot for
Encryption Scheme
to encrypt. We choose the mean for the ciphertext, whereas
Boldyreva et al. choose the ciphertext uniform randomly in
the remaining image space. Figure 1 shows the curve from
our running example. On the one hand, since we are not
strictly monotonically increasing, we must modify the ci-
phertexts (rebalance the tree) when we run out of cipher-
text space. On the other hand, this enables to achieve IND-
OCPA ideal security. Since we reduce the number of updates
to be negligible in the average case, we can still achieve su-
perior performance compared to maintaining the dictionary
on the server as Popa et al. do.
3.4 Ideal Security
We ﬁrst give a proof that our encryption scheme is IND-
OCPA secure despite its update algorithm. This implies
that the update operation does not impact security.
We deﬁne the following security game between an encryp-
tor E and an adversary Adv based on the IND-OCPA deﬁ-
nition from [9] allowing for update operations.
1. The encryptor E chooses a random bit b.
2. The encryptor E and the adversary Adv engage in a
polynomial number of rounds in which the adversary
may be adaptive. At round i:
(a) The adversary Adv sends values x0
i , x1
i (0 ≤ x{0,1}
i
<
N to the encryptor E.
(b) The encryptor E returns Encrypt(xb
i). If the en-
cryptor E invokes U pdate(xj1, . . . , xji ), then the
adversary may observe the updated list yj1 , . . . , yji .
3. The adversary Adv outputs b′, its guess for b.
We say that the adversary Adv wins the game if its guess
is correct (b = b′) and the sequences x0
1, . . . have
the same order relation, i.e., for all i, j : x0
i < x1
j .
Let winAdv be the random variable indicating the success of
the adversary in the above game.
1, . . . and x1
i < x0
j ⇔ x1
Definition 1. An OPE scheme is (perfectly) IND-OCPA
secure if for all p.p.t. adversaries Adv P r[winAdv] = 1/2.
Theorem 2. Our OPE scheme is (perfectly) IND-OCPA
secure.
ϭϯ͗ϭϮϴс΀ϭϬϬϬϬϬϬϬ΁

сϭϯ
сϭϮϴ
ǆ

Ǉ

сϱ
сϲϰ
ǆ

Ǉ

Ϭ
ϱ ͗ϲϰс΀ϬϭϬϬϬϬϬϬ΁

сϳ
сϵϲ
ǆ

Ǉ

Ϭ
ϭ
ϳ͗ϵϲс΀ϬϭϭϬϬϬϬϬ΁

Ϭ
ϭ
ϭ
сϭϮ
сϭϭϮ
ǆ

Ǉ

ϭϮ͗ϭϭϮс΀ϬϭϭϭϬϬϬϬ΁

Figure 2: Search Trees for Insertion of 13, 5, 7, 12
Proof. Observe that our encryption algorithm (Algo-
rithm 1) will start with the same initial state independent
of b. We now state the following lemma.
Lemma 3. If the sequences of xb
1, . . . have the same order
relation, the state of the encryption will contain the same
yj1 , . . . independent of b.
Proof. We prove this by induction. Assume it holds for
round i. Then since the sequences have the same order re-
lation, the algorithm will ﬁnd pairs with the same yjk , yjk+1
in step 1 due to the induction assumption.
Step 2 is a check within one of the two sequences xb
1, . . .
and since they have the same order relation, the condition
will evaluate the same in both cases. Then, due to the in-
duction assumption the return value yjk will be the same
independent of b.
Updates are triggered in step 3 of Algorithm 1. Clearly,
the choice is only made by the values of yjk , yjk+1 . Due to
the induction assumption the choice is therefore independent