                return COORDICATE_IS_ILLEGAL;
     }
左右滑动查看完整代码
if (p->size() (admin_addresses.size()); ++i) {
        bool exists = CheckAccount(admin_addresses[i]);
        (void)exists;
      }
      CheckAccount(admin_core_contract_id);
左右滑动查看完整代码
CheckAccount() 检查了帐号有效性，但是未对返回值做处理，导致无论帐号是否有效都可以进入到后续的逻辑。这种问题在任何平台都可能出现，要全力避免。
### 3.2.3 未校验参数合法性/Illegal Parameter
跟外部调用注入不同之处在于，这一类别内外部接口的参数都需要校验。参数的合法性包括：参数个数，参数大小，参数结构，参数有效期等等。如果接口没有校验参数合法性，则会存在较大安全风险。
短地址漏洞 (short address) 成因之一是因为函数中没有校验传入的参数的 size 是否正确。攻击者调用其他合约的时候，特意选取以 00
结尾的地址，传入地址参数的时候省略最后的 00，EVM 在解析数量参数时候对参数错误的补
0，导致超额转出代币。如果校验了传入参数的合法性，则此问题可以避免。此漏洞发现后已很快被修复。
### 3.2.4 权限控制问题/Access Control
权限控制问题是安全设计类问题，每个平台都需要安全设计。若缺少安全设计，则合约会更容易暴露在攻击者面前。
#### 3.2.4.1 合约对用户无权限控制
敏感函数完全没有权限控制。敏感函数可以是转账类函数，修改全局变量类函数，查询敏感信息类函数。敏感函数无访问控制的问题平台无关，任何合约运行平台都可以存在。
如 2020 年 7 月 1 日，VETH 合约遭遇黑客攻击。此次攻击主要利用 Vether 合约中 changeExcluded 函数的可见性为
external 且未有权限限制，用户可以直接进行外部调用为攻击创造了必要的条件，最终盗走巨额的 VETH。
#### 3.2.4.2 合约对用户权限控制不当
这类问题比起完全无权限控制问题，提升了攻击门槛，但是处境并无差别，因为依然可以被攻破。属于设计上有安全设计，但是实际实现上没有达到预期。
· 以太坊一般使用 msg.sender 验证身份，如果错误地使用了 tx.origin
验证身份，就可以被绕过。具体案例可以查看[百万合约之母以太坊的漏洞攻防术（下集)](https://mp.weixin.qq.com/s/Fj6cZ21yuGXDT0qStLaopw