 dockeronwindows/ch05-nerd-dinner-api:2e;
```
现在当我加载 NerdDinner 网站时，我会浏览到端口`80`上的 Traefik 容器。我正在使用`Host`头部路由规则，所以我将把`http://nerddinner.local`放入我的浏览器。这是一个本地开发环境，因此我将这些值添加到了我的`hosts`文件中(在测试和生产环境中，将有一个真正的 DNS 系统解析主机名):
```
127.0.0.1  nerddinner.local
127.0.0.1  api.nerddinner.local
```
路径`/`的主页请求从主页容器中得到代理，我还为 CSS 文件指定了一个路由路径，这样我就可以看到新的主页完成样式:
![](img/a2acc8e6-3888-4052-b7ee-991a945b7e29.png)
该响应由主页容器生成，但由 Traefik 代理。我可以浏览到`api.nerddinner.local`并从新的 REST API 容器中看到 JSON 格式的所有晚餐:
![](img/7c905e8a-1c7a-402a-87be-8afb6fa9c156.png)
原来的 NerdDinner 应用还是一样的工作方式，但是当我浏览到`/Dinners`的时候，要显示的晚餐列表是从 API 中获取的，而不是直接从数据库中获取的:
![](img/4c9a8b38-967c-4e76-921a-b5f648d91eb8.png)
Working out the routing rules for the proxy is one of the harder parts of breaking up a monolith into multiple frontend containers. Microservice apps tend to be easier here, because they're designed to be different concerns running at different domain paths. You'll need a good understanding of Traefik's rules and of regular expressions when you start routing UI features to their own containers.
容器优先的设计让我不用完全重写就能实现 NerdDinner 架构的现代化。我正在使用企业级开源软件和 Docker 来支持以下三种模式来打破这种单一模式:
*   通过发布和订阅消息队列中的事件使功能异步
*   使用简单的现代技术栈，用 REST APIs 公开数据
*   跨多个容器拆分前端功能，并使用反向代理在它们之间进行路由
现在，我可以更加敏捷地交付对特性的改进，因为我不总是需要对整个应用进行回归测试。我也有从关键用户活动中发布的事件，这是向事件驱动架构迈出的一步。这让我可以在不改变任何现有代码的情况下添加全新的特性。
# 在容器中添加新功能
将整块建筑分解成小的组件并使建筑现代化有一个有益的副作用。我采用的方法引入了事件发布作为一个特性。我可以在此基础上添加新功能，再次采用容器优先的方法。
在网络中，只有一个数据存储，一个存储在 SQL Server 中的事务数据库。这对于网站服务来说没问题，但是当涉及到面向用户的功能时，比如报告，就受到了限制。没有用户友好的方法来搜索数据、构建仪表板或启用自助报告。
一个理想的解决方案是添加一个辅助数据存储，一个报告数据库，使用一种提供自助分析的技术。没有 Docker，这将是一个大项目，需要重新设计或增加基础设施，或者两者兼而有之。有了 Docker，我可以不去管现有的应用，在现有的服务器上添加在容器中运行的新特性。
Elasticsearch 是另一个企业级开源项目，在 Docker Hub 上以官方映像形式提供。Elasticsearch 是一个完整的搜索文档数据存储，与配套产品 Kibana 一起作为报告数据库运行良好，它提供了一个用户友好的网络前端。
我可以为 NerdDinner 中创建的晚餐添加自助分析，方法是在与其他容器相同的网络中的容器中运行 Elasticsearch 和 Kibana。当前的解决方案已经发布了带有晚餐详细信息的事件，因此要将晚餐添加到报告数据库中，我需要构建一个新的消息处理程序，该程序订阅现有事件并将详细信息保存在 Elasticsearch 中。
当新的报告功能准备就绪时，可以将其部署到生产环境中，而无需对正在运行的应用进行任何更改。零停机部署是容器优先设计的另一个好处。功能被构建为在解耦的单元中运行，因此单个容器可以在不影响其他容器的情况下启动或升级。
对于下一个特性，我将添加一个独立于解决方案其余部分的新消息处理程序。如果我需要替换保存晚餐处理程序的实现，我也可以在零停机时间内完成，在替换处理程序时使用消息队列来缓冲事件。
# 与 Docker 和一起使用弹性搜索。网
Elasticsearch 是一项非常有用的技术，值得仔细研究一下。这是一个 Java 应用，但是在 Docker 中运行时，您可以将其视为一个黑盒，并以与所有其他 Docker 工作负载相同的方式进行管理—您不需要安装 Java 或配置 JDK。Elasticsearch 公开了一个用于写入、读取和搜索数据的 REST API，所有主要语言中都有该 API 的客户端包装器。
Elasticsearch 中的数据存储为 JSON 文档，每个文档都可以完全索引，这样您就可以在任何字段中搜索任何值。这是一种集群技术，可以跨多个节点运行，以实现规模和弹性。在 Docker 中，您可以在一个单独的容器中运行每个节点，并将它们分布在您的服务器上，以获得规模和弹性，但是使用 Docker 很容易进行部署和管理。
同样的存储注意事项适用于 Elasticsearch，就像它们适用于任何有状态的工作负载一样——在开发中，您可以将数据保存在容器中，这样当容器被替换时，您就可以从一个新的数据库开始。在测试环境中，您可以使用装载到主机上的驱动器文件夹的 Docker 卷来保持容器外部的持久存储。在生产中，您可以将带有驱动程序的卷用于内部存储阵列或云存储服务。
Docker Hub 上有一个官方的 Elasticsearch 映像，但它目前只有 Linux 变体。我在 Docker Hub 上有自己的映像，它将 Elasticsearch 打包成 Windows Server 2019 Docker 映像。在 Docker 中运行 Elasticsearch 与启动任何容器相同。该命令公开端口`9200`，这是 REST 应用编程接口的默认端口:
```
 docker container run -d -p 9200 `
 --name elasticsearch ` --env ES_JAVA_OPTS='-Xms512m -Xmx512m' `
 sixeyed/elasticsearch:5.6.11-windowsservercore-ltsc2019
```
Elasticsearch 是一个需要大量内存的应用，默认情况下，它在启动时会分配 2 GB 的系统内存。在开发环境中，数据库不需要那么多内存。我可以通过设置`ES_JAVA_OPTS`环境变量来配置。在这个命令中，我将弹性搜索限制在 512 兆内存。
Elasticsearch is a cross-platform application, like NATS. There is no official Elasticsearch image for Windows, but you can check my Dockerfile on GitHub in the repository `sixeyed/dockerfiles-windows`. You'll see that I use the official OpenJDK Java image based on Windows Server Core 2019 for my Elasticsearch image.
弹性搜索有一个名为 **NEST** 的 NuGet 包，它是一个读写数据的应用编程接口客户端，面向.NET 框架和.NET 核心。我在一个新的.NET Core 控制台项目，`NerdDinner.MessageHandlers.IndexDinner`。新的控制台应用监听来自 NATS 的晚餐创建事件消息，并将晚餐细节作为文档写入弹性搜索。
连接到消息队列和订阅消息的代码与现有的消息处理程序相同。我有一个新的`Dinner`类，它代表了 Elasticsearch 文档，因此消息处理程序代码从`Dinner`实体映射到晚餐文档，并将其保存在 Elasticsearch 中:
```
var eventMessage = MessageHelper.FromData(e.Message.Data);
var dinner = Mapper.Map(eventMessage.Dinner);
var node = new Uri(Config.Current["Elasticsearch:Url"]);
var client = new ElasticClient(node);
client.Index(dinner, idx => idx.Index("dinners"));
```
Elasticsearch 将在一个容器中运行，新的文档消息处理程序将在一个容器中运行，所有这些都与 NerdDinner 解决方案的其余部分在同一个 Docker 网络中。我可以在现有解决方案运行时启动新的容器，因为对 web 应用或 SQL Server 消息处理程序没有任何更改。在 Docker 中添加这一新功能是零停机部署。
弹性搜索消息处理程序不依赖于 EF 或任何遗留代码，就像新的 REST 应用编程接口一样。我利用这一点编写了这些应用.NET Core，这让我可以在 Linux 或 Windows 主机上的 Docker 容器中自由运行它们。我的 Visual Studio 解决方案现在有了。. NET 框架.NET 标准，以及.NET 核心项目。代码库的一部分在.NET 框架和.NET 核心应用项目。我可以为每个应用 Dockerfile 使用多阶段构建，但这可能会在较大的项目中导致问题。
大的.NET 代码库往往采用多解决方案的方法，主解决方案包含 CI 服务器中使用的所有项目，应用的每个区域有不同的`.sln`文件，每个文件都有一个项目子集。这使得不同的团队可以在他们自己的代码库中工作，而无需每个开发人员将数百万行代码加载到 Visual Studio 中。它节省了大量开发人员的时间，但是它确实引入了风险，对共享组件的更改可能会破坏另一个团队的构建。
如果您为所有组件转移到多阶段构建，当您转移到 Docker 时，您仍然会遇到这个问题。在这种情况下，您可以使用一种替代方法，在一个 Dockerfile 中构建所有代码，这与 Visual Studio 的旧主解决方案非常相似。
# 建造混合动力车.NET 框架和。Docker 中的 NET 核心解决方案
到目前为止，您所看到的多阶段构建都使用了 Docker Hub 上的`microsoft/dotnet-framework:4.7.2-sdk`映像或`microsoft/dotnet:2.2-sdk`映像。这些映像提供了相关的.NET 运行时，以及用于恢复包、编译源代码和发布应用的 SDK 组件。
那个。. NET Framework 4.7.2 映像还包含.NET Core 2.1 SDK，所以如果您正在使用这些版本(或更早版本)，那么您可以同时构建这两个版本.NET 框架和.NET 核心应用。
In the first edition of this book, there was no official image that had both the .NET Framework and .NET Core SDKs, so I showed you how to build your own using quite a complex Dockerfile with lots of Chocolatey installs. I also wrote, "*I expect later releases of MSBuild and .NET Core will have integrated tooling, so the complexity of managing multiple toolchains will go away," *and I'm glad to say that's where we are right now, with Microsoft managing those toolchains in Docker for us.
# 编译混合 NerdDinner 解决方案
在本章中，我采用了一种不同的方法来构建 NerdDinner，如果您正在混合，这种方法非常适合 CI 流程.NET 核心和.NET Framework 项目(我在 [第 10 章](10.html)*中用 Docker 介绍了 CI 和 CD，用 Docker* 为持续部署管道提供动力)。我将在一个映像中编译整个解决方案，并将该映像用作我的应用 Dockerfiles 中二进制文件的源。
下图显示了如何使用 SDK 和构建器映像来打包本章的应用映像:
![](img/747a90e4-03ad-417c-ab18-06b37344e7ef.png)
我构建解决方案所需的所有工具都在微软的 SDK 中，所以`dockeronwindows/ch05-nerd-dinner-builder:2e`的 Dockerfile 很简单。它从 SDK 开始，在解决方案的源树中复制，并恢复依赖关系:
```
# escape=`
FROM microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-ltsc2019 AS builder
WORKDIR C:\src
COPY src .
RUN nuget restore
```
这将为 NerdDinner 解决方案文件运行`nuget restore`。这将恢复所有的。. NET 框架.NET 标准，以及。所有项目的核心参考。最后一条指令构建每个应用项目，为每个项目指定项目文件和单独的输出路径:
```
RUN msbuild ...\NerdDinner.csproj /p:OutputPath=c:\nerd-dinner-web; `
    msbuild ...\NerdDinner.MessageHandlers.SaveDinner.csproj /p:OutputPath=c:\save-handler; `
    dotnet publish -o C:\index-handler ...\NerdDinner.MessageHandlers.IndexDinner.csproj; `
    dotnet publish -o C:\dinner-api ...\NerdDinner.DinnerApi.csproj
```
您可以只对整个解决方案文件运行`msbuild`，但这将生成编译后的二进制文件，而不是完全发布的目录。这种方法意味着每个应用都已发布并准备打包，输出位于构建器映像中的已知位置。这也意味着整个应用都是从同一套源代码编译而来的，所以你会发现应用之间的依赖关系的任何重大问题。
这种方法的缺点是没有明智地使用 Docker 缓存。第一步是将整个源树复制到映像中。每当有代码更改时，即使包引用没有更改，构建也会更新包。您可以用不同的方式编写这个构建器，首先在恢复阶段复制`.sln`、`.csproj`和`package.config`文件，然后在构建阶段复制源代码的其余部分。
这将为您提供包缓存和更快的构建，代价是更脆弱的 Dockerfile—每次添加或删除项目时，您都需要编辑初始文件列表。
您可以选择最适合您的流程的方法。在比这更复杂的解决方案的情况下，开发人员可以从 Visual Studio 构建和运行应用，并且在签入代码之前只构建 Docker 映像来运行测试。在这种情况下，较慢的 Docker 映像构建不成问题(我在[第 11 章](11.html)、*调试和检测应用容器*中讨论了在 Docker 中运行应用的选项)。
关于这个形象是如何建立的，有一点是不同的。Dockerfile 复制在`src`文件夹中，该文件夹比 Dockerfile 所在的文件夹高一级。为了确保`src`文件夹包含在 Docker 上下文中，我需要从`ch05`文件夹运行`build image`命令，并使用`--file`选项指定 Docker 文件的路径:
```
docker image build `
 --tag dockeronwindows/ch05-nerd-dinner-builder `
 --file ch05-nerd-dinner-builder\Dockerfile .
```
构建映像会编译并打包所有项目，因此我可以将该映像用作应用 Dockerfiles 中已发布输出的来源。我只需要构建一次构建器，然后我就可以使用它来构建所有其他映像。
# 包装。Docker 中的 NET 核心控制台应用