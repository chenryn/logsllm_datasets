### 优化后的文本

#### 1. 利用注册表和进程绕过UAC
- **Windows 10系统**:
  - 将`djziapwzi`变量所赋的值（Powershell脚本）写入到`HKEY_CURRENT_USER\Software\Classes\ms-settings\shell\open\command`注册表项中。
  - 以隐藏窗口的形式传入`C:\Windows\fodhelper.exe`参数，打开`explorer.exe`，从而执行上述注册表中写入的命令。
  - 执行完毕后，删除相应的注册表项。

- **Windows 7系统**:
  - 将`djziapwzi`变量所赋的值（Powershell脚本）写入到`HKEY_CURRENT_USER\Software\Classes\mscfile\shell\open\command`注册表项中。
  - 以隐藏窗口的形式传入`C:\Windows\eventvwr.exe`参数，打开`explorer.exe`，从而执行上述注册表中写入的命令。
  - 执行完毕后，删除相应的注册表项。

#### 2. 绕过UAC并关闭Windows Defender
- 利用`eventvwr.exe`进程使`Powershell.exe`绕过UAC，进而关闭Windows Defender杀毒功能及强制结束`MSASCui.exe`服务程序。
- 检测是否存在`WdNisSvc`或`WinDefend`服务，如果存在则持续检测60秒。

#### 3. 解密后的Powershell脚本
- **主要功能**:
  - 查找Ahnlab安博士杀软的卸载程序，拷贝到指定位置后并执行。
  - 解密Payload并写入到`dsoyaltj.exe`文件中后执行。

#### 4. ProcessDoppelgänging与Process Hollowing技术
- **ProcessDoppelgänging攻击技术**:
  - 创建一个新事务并在该事务中创建一个新文件。
  - 将新创建的文件映射到进程新创建的section中。
  - 利用NTFS文件系统事务回滚机制，回滚到之前的无创建文件状态。
  - 跳转执行内存中的section部分的payload。

- **结合Process Hollowing技术**:
  - 申请空间并解密出PE文件。
  - 随机创建挂起原始文件状态的合法进程（如`wermgr.exe`或`svchost.exe`）。
  - 使用`NtCreateProcessEx` API创建新进程。
  - 新进程从特殊缓冲区（section）创建，而非原始文件。

#### 5. NTDLL加载技巧
- **加载新的NTDLL副本**:
  - 使用`ntdll.NtCreateFile`打开`ntdll.dll`文件。
  - 使用`ntdll.NtCreateSection`在`ntdll.dll`文件中创建一个section。
  - 使用`ntdll.ZwMapViewOfSection`将section映射到进程地址空间，从而使`ntdll.dll`模块文件映射进内存。
  - 通过这种方式，可以绕过各种安全产品的检测与拦截。

#### 6. 使用NTFS事务创建新文件
- **NTFS事务机制**:
  - 在事务内部创建文件时，在提交事务之前，外部任何人都无法访问它。
  - 创建一个新事务，在该事务中创建一个新文件（如`%TEMP%\Liebert.bmp`）。
  - 使用`ZwWriteFile`将缓冲区内容写入文件。
  - 事务调用`ZwRollbackTransaction`回滚到之前的状态，对文件的更改不会保存在磁盘上。

#### 7. 从section到Process
- **典型ProcessDoppelgänging技术**:
  - 将带有映射Payload的section直接创建进程的情况不会发生。
  - 回滚事务后调用以下函数：
    - `ntdll_1.ZwQuerySection`
    - `ntdll.NtClose`
    - `ntdll_1.ZwMapViewOfSection`
    - `ntdll_1.ZwProtectVirtualMemory`
    - `ntdll_1.ZwWriteVirtualMemory`
    - `ntdll_1.ZwResumeThread`

- **详细步骤**:
  1. 将新创建的section（PE文件）作为附加模块映射到新进程中。
  2. 修改内存属性后调用`ZwWriteVirtualMemory`重定向远程进程OEP处代码，跳转到注入模块的入口点。
  3. 修改内存属性，调用`ZwWriteVirtualMemory`重定向远程进程的PEB+8处代码（ImageBaseAddress），改为之前映射的section位置处：400000（PE文件）。
  4. 调用`ResumeThread`恢复远程进程，执行后运行的就是400000地址处PE文件OEP的代码。
  5. 如果修补入口点失败，则使用`ZwGetThreadContext`和`ZwSetThreadContext`设置新地址，这是Process Hollowing中使用的经典技术。

#### 总结
- 使用ProcessDoppelgänging技术的样本较为少见，本文详细介绍了该技术及其与Process Hollowing技术的结合使用方法。希望各位读者能够理解并提出宝贵意见。

#### 参考文章链接
- [JS样本源]
- [ProcessDoppelgänging技术相关]
- [BlackHat PPT链接]

这样优化后的文本更加清晰、连贯和专业，便于读者理解和阅读。