title:SoK: Fully Homomorphic Encryption Compilers
author:Alexander Viand and
Patrick Jattke and
Anwar Hithnawi
2021 IEEE Symposium on Security and Privacy (SP)
SoK: Fully Homomorphic Encryption Compilers
Alexander Viand
ETH Zurich
PI:EMAIL
Patrick Jattke
ETH Zurich
PI:EMAIL
Anwar Hithnawi
ETH Zurich
PI:EMAIL
8
6
0
0
0
.
1
2
0
2
.
1
0
0
0
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
5
-
4
3
9
8
-
1
8
2
7
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
1
2
0
2
Abstract—Fully Homomorphic Encryption (FHE) allows a
third party to perform arbitrary computations on encrypted
data, learning neither the inputs nor the computation results.
Hence, it provides resilience in situations where computations are
carried out by an untrusted or potentially compromised party.
This powerful concept was ﬁrst conceived by Rivest et al. in
the 1970s. However, it remained unrealized until Craig Gentry
presented the ﬁrst feasible FHE scheme in 2009.
The advent of the massive collection of sensitive data in cloud
services, coupled with a plague of data breaches, moved highly
regulated businesses to increasingly demand conﬁdential and
secure computing solutions. This demand, in turn, has led to a
recent surge in the development of FHE tools. To understand
the landscape of recent FHE tool developments, we conduct
an extensive survey and experimental evaluation to explore the
current state of the art and identify areas for future development.
In this paper, we survey, evaluate, and systematize FHE tools
and compilers. We perform experiments to evaluate these tools’
performance and usability aspects on a variety of applications.
We conclude with recommendations for developers intending
to develop FHE-based applications and a discussion on future
directions for FHE tools development.
I. INTRODUCTION
Recent years have seen unprecedented growth in the adop-
tion of cloud computing services. More and more highly reg-
ulated businesses and organizations (e.g., banks, governments,
insurances, health), where data security is paramount, move
their data and services to the cloud. This trend has led to
a surge in demand for secure and conﬁdential computing
solutions that protect data conﬁdentiality while in transit, rest,
and in-use. This is an amply justiﬁed and expected demand,
particularly in the light of the numerous reports of data
breaches [1], [2]. Fully Homomorphic Encryption (FHE) is
a key technological enabler for secure computation and has
recently matured to be practical for real-world use [3]–[9].
FHE allows arbitrary computations to be performed over
encrypted data, eliminating the need to decrypt the data and
expose it to potential risk while in use. While ﬁrst proposed
in the 1970s [10], FHE was long considered impossible or
impractical. However, thanks to advances in the underlying
theory, general hardware improvements, and more efﬁcient
implementations,
it has become increasingly practical. In
2009, breakthrough work from Craig Gentry proposed the
ﬁrst feasible FHE scheme [11]. In the last decade, FHE has
gone from a theoretical concept to reality, with performance
improving by up to ﬁve orders of magnitude. For example,
times for a multiplication between ciphertexts dropped from 30
minutes to less than 20 milliseconds. While this is still around
seven orders of magnitude slower than an IMUL instruction
on a modern CPU, it is sufﬁcient to make many applications
practical. Additionally, modern schemes introduced SIMD-
style parallelism, encoding thousands of plaintext values into
a single ciphertext to further improve throughput [12].
These advances have enabled a wide range of applications
covering a wide range of domains. These include mobile
applications, where FHE has been used to encrypt the back
end of a privacy-preserving ﬁtness app [13], while continuing
to provide a real-time experience. In the medical domain,
FHE has been used to enable privacy-preserving genome
analysis [14] applications over large datasets. More generally,
FHE has been used to solve various well-known problems
like Private Set Intersection (PSI) [15], outperforming previous
solutions by 2× in running time. In the domain of machine
learning, FHE has been used for tasks ranging from linear and
logistic regression [16] to Encrypted Neural Network infer-
ence [17], which can be used to run privacy-preserving ML-as-
a-Service applications, for example, for private phishing email
detection [18]. As a consequence, there has been increasing
interest in FHE-based secure computation solutions [3]–[9].
Gartner projects [19] that “by 2025, at least 20% of companies
will have a budget for projects that include fully homomorphic
encryption.”
Despite these recent breakthroughs, building secure and
efﬁcient FHE-based applications remains a challenging task.
This is largely attributed to the differences between traditional
programming paradigms and FHE’s computation model, which
poses unique challenges. For example, virtually all standard
programming paradigms rely on data-dependent branching,
e.g., if/else statements and loops. On the other hand, FHE
computations are, by deﬁnition, data-independent, or they
would violate the privacy guarantees. Working with FHE
also introduces signiﬁcant engineering challenges in practice.
Different schemes offer varying performance tradeoffs, and
optimal choices are heavily application-dependent. To address
some of the engineering challenges in this space, we have seen
a surge of work on tools that aim to improve accessibility and
reduce barriers to entry in this ﬁeld.
Without tool support, realizing FHE-based computations by
implementing the required mathematical operations directly or
using an arbitrary-precision arithmetic library is complex, re-
quiring considerable expertise in both cryptography and high-
performance numerical computation. Therefore, FHE libraries
like the Simple Encrypted Arithmetic Library (SEAL) [20]
or the Fast Fully Homomorphic Encryption Library over the
© 2021, Alexander Viand. Under license to IEEE.
DOI 10.1109/SP40001.2021.00068
1092
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:21 UTC from IEEE Xplore.  Restrictions apply. 
Figure 1: Overview of the FHE tool space.
Torus (TFHE) [21] implement the underlying cryptographic
operations and expose a higher-level API. In addition to key
generation, encryption, and decryption, these APIs also expose
at least homomorphic addition and multiplication.
In practice, however,
library APIs often include dozens
of additional functionalities for ciphertext maintenance and
manipulation. Since schemes vary in features,
these APIs
differ signiﬁcantly not just in their implementation but also
conceptually. Efforts are being made to standardize APIs
for FHE schemes [22] and, simultaneously, there are ﬁrst
steps towards interoperability via wrappers around existing
libraries [23]. However, achieving competitive performance
frequently still requires working with libraries directly.
While FHE libraries make the process of writing FHE-based
applications substantially more efﬁcient, they still require sig-
niﬁcant expertise and understanding of the underlying scheme
since they remain relatively low-level cryptographic libraries.
Therefore, recent years have seen the development of higher-
level tools, frequently known as FHE compilers, that aim to
translate standard programs into FHE-based implementations.
These tools focus on making FHE accessible to non-experts
by improving usability and increasingly offering advanced
optimizations previously accessible only to experts. Compilers
generally rely on FHE libraries to realize the actual en-
/decryption and homomorphic computation. FHE libraries, in
turn, frequently employ existing libraries for fast numerical
computations, parallelization, or other non-FHE-speciﬁc fea-
tures. Figure 1 depicts different FHE tools and where they ﬁt
into this dependency hierarchy.
While much work remains to be done, these tools have
signiﬁcantly eased the task of developing FHE applications.
For example, in the domain of machine learning, tools have
demonstrated accessibility and usability while also providing
state-of-the-art performance due to automatic optimizations
that signiﬁcantly outperform previous hand-crafted solutions
by experts. The nGraph-HE framework [24], for example,
converts neural networks into efﬁcient FHE-based implemen-
tations for private inference. Here, nearly all aspects related to
FHE are abstracted away, and the user experience is essentially
identical to working directly with TensorFlow.
Though there has been a surge of works on FHE tools and
accessibility, we currently lack a comprehensive overview of
the current state of FHE development. While it is clear that
both signiﬁcant advances have been made and many chal-
lenges remain open, there is no systematic understanding of
the remaining engineering challenges that need to be addressed
to help broaden FHE adoption.
Therefore, this paper aims to ﬁll in this knowledge gap
by studying and surveying the current state-of-the-art of FHE
tools. More concretely, this survey has two objectives: First, to
assist developers looking to develop FHE-based applications
in selecting a suitable approach and, second, to provide the
community with valuable insights on both successes and
remaining issues in this space.
Towards this goal, we conduct an extensive survey of
existing tools and highlight their features and characteristics.
Subsequently, we consider these tools in practice by experi-
mentally evaluating them across a range of case study applica-
tions, contrasting usability, expressiveness, and performance.
In our experimental evaluation, we consider a selection
of tools in more detail and provide an in-depth analysis of
their usability and expressiveness in practice. We implement
and benchmark three case-study applications that represent
different domains of FHE-based computation. Our benchmarks
allow us to study not only the overall performance of FHE for
these applications across tools but also the relative strengths
of different tools compared to each other.
Along with this paper, we provide an online repository1
that includes Docker images for all the tools we evaluate,
our automated benchmarking framework, and the example
applications. Additionally, it includes further benchmarks and
tool descriptions that we could not include in this paper due
to space limitations.
We conclude our paper with a discussion of the current state
of FHE and FHE tools. We discuss applications for which FHE
is likely practical today and show gaps between state-of-the-art
results and what non-expert users can realistically implement.
Based on the insights gained through our study, we highlight
successes in the FHE tool space and identify gaps that remain
to be addressed. Finally, we discuss a possible road map for
the next generation of FHE tools.
A. Related Work
This work is, to the best of our knowledge, the ﬁrst to
survey and study the space of FHE compilers. While previous
work has considered FHE libraries [25],
they did so by
contrasting different FHE schemes and their implementations
and considered only a small subset of the tools we consider.
This paper is similar in nature to an SoK by Hastings et
al. [26], which analyzed tools in the MPC domain. Practical
MPC constructions have been an active research area since
the 1980s. As a consequence, these tools are more mature
and more integrated into the research process. In their work,
Hastings et al. focus on the usability aspects of MPC tools
and did not consider performance. In contrast, we focus on
analyzing the expressiveness and performance of the existing
FHE tools and provide recommendations to developers in
choosing the correct tool for their target application.
1https://github.com/MarbleHE/SoK
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:21 UTC from IEEE Xplore.  Restrictions apply. 
1093
FHE CompilersALCHEMYCingulataMarbleRAMPARTSE3FHE LibrariesMaths& Other Libs.EVAPALISADESEALHElibTFHEΛ ￮λFLINTGMPMPFRMPIR…NTLABCBoostFFTWOpenMPuseCHETnGraph-HESEALionFHEWHEAANuseconcreteFV-NFLiblattigocuFHEnuFHENFLibII. FULLY HOMOMORPHIC ENCRYPTION
A homomorphic encryption scheme is an encryption scheme
where there exists a homomorphism between operations on the
plaintext and operations on the ciphertext. For example, the
Paillier encryption scheme [27] is additively homomorphic: