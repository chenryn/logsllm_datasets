按照这种算法计算出来的商就是各参数的算术平均值。 
换句话说，在调用变长参数函数时，调用方函数先把不确定长度的参数堆积为数组，再通过栈把这个
数组传递给变长函数参数。这就解释了为什么 cdecl 调用规范会要求将第一个参数最后一个推送入栈了。
因为如果不这样的话，被调用方函数会找不到第一个参数，这会导致 printf()这样的函数因为找不到格式化
字符串的地址而无法运行。 
46.1.2  基于寄存器的调用规范 
细心的读者也可能会问，那些优先利用寄存器传递参数的调用规范是什么情况？下面我们就来看看。 
指令清单 46.2  x64 下的 MSVC 2012 优化 
$SG3013 DB   
'%d', 0aH, 00H 
v$ = 8 
arith_mean PROC 
          mov  
DWORD PTR [rsp+8], ecx  
; 1st argument 
          mov  
QWORD PTR [rsp+16], rdx  ; 2nd argument 
          mov  
QWORD PTR [rsp+24], r8  
; 3rd argument 
          mov  
eax, ecx   
; sum = 1st argument 
          lea  
rcx, QWORD PTR v$[rsp+8]  ; pointer to the 2nd argument 
          mov  
QWORD PTR [rsp+32], r9  
; 4th argument 
          mov  
edx, DWORD PTR [rcx]  
; load 2nd argument 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
482 
逆向工程权威指南（上册） 
          mov  
r8d, 1  
; count=1 
          cmp  
edx, -1  
; 2nd argument is -1? 
          je   
SHORT $LN8@arith_mean  
; exit if so 
$LL3@arith_mean: 
          add  
eax, edx   
; sum = sum + loaded argument 
          mov  
edx, DWORD PTR [rcx+8]  
; load next argument 
          lea  
rcx, QWORD PTR [rcx+8]  
; shift pointer to point to the argument after next 
          inc  
r8d   
; count++ 
          cmp  
edx, -1  
; is loaded argument -1? 
          jne  
SHORT $LL3@arith_mean  
; go to loop begin if its not' 
$LN8@arith_mean: 
; calculate quotient 
          cdq 
          idiv  
r8d 
          ret  
0 
arith_mean ENDP 
main     PROC 
          sub  
rsp, 56 
          mov  
edx, 2 
          mov  
DWORD PTR [rsp+40], -1 
          mov  
DWORD PTR [rsp+32], 15 
          lea  
r9d, QWORD PTR [rdx+8] 
          lea  
r8d, QWORD PTR [rdx+5] 
          lea  
ecx, QWORD PTR [rdx-1] 
          call  
arith_mean 
          lea  
rcx, OFFSET FLAT:$SG3013 
          mov  
edx, eax 
          call  
printf 
          xor  
eax, eax 
          add  
rsp, 56 
          ret  
0 
main     ENDP 
在这个程序里，寄存器负责传递函数的前 4 个参数，栈用来传递其余的 2 个参数。函数 arith_mean()
首先将寄存器传递的 4 个参数存放在阴影空间里，把阴影空间和传递参数的栈合并成了统一而连续的参数数组！ 
GCC 会如何处理参数呢？与 MSVC 相比，GCC 在编译的时候略显画蛇添足。它会把函数分为两部分：
第一部分的指令将寄存器的值保存在“红色地带”，并在那里进行处理；而第二部分指令再处理栈的数据。 
指令清单 46.3  x64 下的 GCC 4.9.1 的优化 
arith_mean: 
          lea  
rax, [rsp+8] 
          ; save 6 input registers in "red zone" in the local stack 
          mov  
QWORD PTR [rsp-40], rsi 
          mov  
QWORD PTR [rsp-32], rdx 
          mov  
QWORD PTR [rsp-16], r8 
          mov  
QWORD PTR [rsp-24], rcx 
          mov  
esi, 8 
          mov  
QWORD PTR [rsp-64], rax 
          lea  
rax, [rsp-48] 
          mov  
QWORD PTR [rsp-8], r9 
          mov  
DWORD PTR [rsp-72], 8 
          lea  
rdx, [rsp+8] 
          mov  
r8d, 1 
          mov  
QWORD PTR [rsp-56], rax 
          jmp  
.L5 
.L7: 
          ; work out saved arguments 
          lea  
rax, [rsp-48] 
          mov  
ecx, esi 
          add  
esi, 8 
          add  
rcx, rax 
          mov  
ecx, DWORD PTR [rcx] 
          cmp  
ecx, -1 
          je   
.L4 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 46 章  变长参数函数 
483 
.L8: 
          add  
edi, ecx 
          add  
r8d, 1 
.L5: 
          ; decide, which part we will work out now. 
          ; is current argument number less or equal 6? 
          cmp  
esi, 47 
          jbe  
.L7   
; no, process saved arguments then 
          ; work out arguments from stack 
          mov  
rcx, rdx 
          add  
rdx, 8 
          mov  
ecx, DWORD PTR [rcx] 
          cmp  
ecx, -1 
          jne  
.L8 
.L4: 
          mov  
eax, edi 
          cdq 
          idiv  
r8d 
          ret 
.LC1: 
          .string "%d\n" 
main: 
          sub  
rsp, 8 
          mov  
edx, 7 
          mov  
esi, 2 
          mov  
edi, 1 
          mov  
r9d, -1 
          mov  
r8d, 15 
          mov  
ecx, 10 
          xor  
eax, eax 
          call  
arith_mean 
          mov  
esi, OFFSET FLAT:.LC1 
          mov  
edx, eax 
          mov  
edi, 1 
          xor  
eax, eax 
          add  
rsp, 8 
          jmp  
__printf_chk 
另外，本书第 64 章第 8 节介绍了阴影空间的另外一个案例。 
46.2  vprintf()函数例子 
在编写日志(logging)函数的时候，多数人都会自己构造一种与 printf 类似的、处理“格式化字符串＋一
系列（但是数量可变）的内容参数”的变长参数函数。 
另外一种常见的变长参数函数就是下文的这种 die()函数。这是一种在显示提示信息之后随即退出整个
程序的异常处理函数。它需要把不确定数量的输入参数打包、封装并传递给 printf()函数。如何实现呢？这
些函数名称前面有一个字母 v 的，这是因为它应当能够处理不确定数量（variable.可变的）的参数。以 die()
函数调用的 vprintf()函数为例，它的输入变量就可分为两部分：一部分是格式化字符串，另一部分是带有
多种类型数据变量列表 va_list 的指针。 
#include  
#include  
void die (const char * fmt, ...) 
{ 
          va_list va; 
          va_start (va, fmt); 
          vprintf (fmt, va); 
          exit(0); 
}; 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
484 
逆向工程权威指南（上册） 
仔细观察就会发现，va_list 是一个指向数组的指针。在编译后，这个特征非常明显： 
指令清单 46.4  MSVC 2010 下的程序优化 
_fmt$ = 8 
_die     PROC 
          ; load 1st argument (format-string) 
          mov  
ecx, DWORD PTR _fmt$[esp-4] 
          ; get pointer to the 2nd argument 
          lea  
eax, DWORD PTR _fmt$[esp] 
          push  
eax   
; pass pointer 
          push  
ecx 
          call  
_vprintf 
          add  
esp, 8 
          push  
0 
          call  
_exit 
$LN3@die: 
          int  
3 
_die     ENDP 
由此可知，die()函数实现的功能就是：取一个指向参数的指针，再将其传送给 vprintf()函数。变长参
数（序列）像数组那样被来回传递。 
指令清单 46.5  x64 下的 MSVC 2012 优化 
fmt$ = 48 
die      PROC 
          ; save first 4 arguments in Shadow Space 
          mov  
QWORD PTR [rsp+8], rcx 
          mov  
QWORD PTR [rsp+16], rdx 
          mov  
QWORD PTR [rsp+24], r8 
          mov  
QWORD PTR [rsp+32], r9 
          sub  
rsp, 40 
          lea  
rdx, QWORD PTR fmt$[rsp+8] ; pass pointer to the 1st argument 
          ; RCX here is still points to the 1st argument (format-string) of die() 
          ; so vprintf() will take it right from RCX 
          call  
vprintf 
          xor  
ecx, ecx 
          call  
exit 
          int  
3 
die      ENDP 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
分类建议： 计算机／软件开发／安全
人民邮电出版社网址：www.ptpress.com.cn
上册
上册
逆向工程权威指南
逆
向
工
程
权
威
指
南
逆向工程是一种分析目标系统的过程。
本书专注于软件逆向工程，即研究编译后的可执行程序。本书是写给初学者
的一本权威指南。全书共分为12个部分，共102章，涉及软件逆向工程相关
的众多技术话题，堪称是逆向工程技术百科全书。全书讲解详细，附带丰富
的代码示例，还给出了很多习题来帮助读者巩固所学的知识，附录部分给出
了习题的解答。
本书适合对逆向工程技术、操作系统底层技术、程序分析技术感兴趣的读者
阅读，也适合专业的程序开发人员参考。
“... 谨向这本出色的教程致以个人的敬意!”
—— Herbert Bos，阿姆斯特丹自由大学教授