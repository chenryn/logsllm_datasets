9 GET /resource
GET /resource
(access token)
(access token)
10 Response
Response
(resource)
(resource)
Browser (B)
Client (C)
Resource Server (RS)
Figure 1. Overview of the OAuth Authorization Code Flow
II. OAUTH AND NEW DEFENSE MECHANISMS
The OpenID Financial-grade API builds upon the OAuth 2.0
Authorization Framework [26]. Compared to the original
OAuth 2.0 protocol, the FAPI aims at providing a much higher
degree of security. For achieving this, the FAPI security proﬁles
incorporate mechanisms deﬁned in OpenID Connect [27]
(which itself builds upon OAuth 2.0), and importantly, security
extensions for OAuth 2.0 developed only recently by the IETF
and the OpenID Foundation.
In the following, we give a brief overview of both OAuth 2.0
and OpenID Connect, and their security extensions used
(among others) within the FAPI, namely Proof Key for Code
Exchange, JWS Client Assertions, OAuth 2.0 Mutual TLS for
Client Authentication and Certiﬁcate Bound Access Tokens,
OAuth 2.0 Token Binding and the JWT Secured Authorization
Response Mode. The FAPI itself is presented in Section III.
A. Fundamentals of OAuth 2.0 and OpenID Connect
OAuth 2.0 and OpenID Connect are widely used for various
authentication and authorization tasks. In what follows, we ﬁrst
explain OAuth 2.0 and then brieﬂy OpenID Connect, which
is based on OAuth 2.0.
1) OAuth 2.0: On a high level, OAuth 2.0 allows a resource
owner, or user, to enable a client, a website or an application,
to access her resources at some resource server. In order for
the user to grant the client access to her resources, the user
has to authenticate herself at an authorization server.
For example, in the context of the FAPI, resources include
the user’s account information (like balance and previous trans-
actions) at her bank or the initiation of a payment transaction
(cash transfer). The client can be a FinTech company which
wants to provide a ﬁnancial service to the user via access to
the user’s bank account. More speciﬁcally, the client might
be the website of such a company (web server client) or
the company’s app on the user’s device. The resource and
authorization servers would typically be run by the user’s bank.
One client can make use of several authorization and resource
servers.
RFC 6749 [26] deﬁnes multiple modes of operation for
OAuth 2.0, so-called grant
types. We here focus on the
authorization code grant since the other grant types are not
used in the FAPI.
Figure 1 shows the authorization code grant, which works
as follows: The user ﬁrst visits the client’s website or opens
(cid:21)(cid:22)(cid:22)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:17 UTC from IEEE Xplore.  Restrictions apply. 
the client’s app on her smartphone and selects to log in or to
give the client access to her resources (Step 1 ). The client
then redirects the user to the so-called authorization endpoint
at the authorization server (AS) in Steps 2 and 3 . (Endpoints
are URIs used in the OAuth ﬂow.) In this redirection, the client
passes several parameters to the AS, for example, the client
id which identiﬁes the client at the AS, a state value that
is used for CSRF protection,5 a scope parameter (not shown
in Figure 1) that describes the permissions requested by the
client, and a redirection URI explained below. Note that if
the client’s app is used, the redirection from the app to the
AS (Step 2 ) is done by opening the website of the AS in a
browser window. The AS authenticates the user (e.g., by the
user entering username and password) in Step 4 and asks for
her consent to give the client access to her resources. The
AS then creates a so-called authorization code (typically a
nonce) and redirects the user back to the so-called redirection
endpoint of the client via the user’s browser in Steps 5 and
6 . (If the client’s app is used, a special redirect URI scheme,
e.g., some-app://, is used which causes the operating system
to forward the URI to the client’s app.) At the AS, one or
more redirection endpoints for a client are preregistered.6 In
Step 2 , the client chooses one of these preregistered URIs. The
authorization response (Step 5 ) is a redirection to this URI,
with the authorization code, the state value from the request,
and optionally further values appended as URI parameters.
When receiving the request resulting from the redirection in
Step 6 , the client ﬁrst checks that the state value is the same
as the one in the authorization request, typically by looking
it up in the user’s session with the client. If it is not the
same, then the client suspects that an attacker tried to inject an
authorization code into the client’s session (cross-site request
forgery, CSRF) and aborts the ﬂow (see also Footnote 5).
Otherwise, the client now exchanges the code for an access
token at the so-called token endpoint of the AS in Steps 7 and
8 . For this purpose, the client might be required to authenticate
to the AS (see below). With this access token, the client can
ﬁnally access the resources at the resource server (RS), as
shown in Steps 9 and 10 .
The RS can use different methods to check the validity
of an access token presented by a client. The access token
can, for example, be a document signed by the AS containing
all necessary information. Often, the access token is not a
structured document but a nonce. In this case, the RS uses
Token Introspection [28], i.e., it sends the access token to the
introspection endpoint of the AS and receives the information
associated with the token from the AS. An RS typically has
only one (ﬁxed) AS, which means that when the RS receives
an access token, it sends the introspection request to this AS.
5The state value is a nonce. The client later ensures that it receives the same
nonce in the authorization response. Otherwise, an attacker could authenticate
to the AS with his own identity and use the corresponding authorization
response for logging in an honest user under the attacker’s identity with a
CSRF attack. This attack is also known as session swapping.
6Without preregistration, a malicious client starting a login ﬂow with the
client id of an honest client could receive a code associated with the honest
client.
(cid:21)(cid:22)(cid:23)
Public and Conﬁdential Clients: Depending on whether a
client can keep long-term secrets, it is either called a public
or a conﬁdential client. If the client is not able to maintain
secrets, as is typically the case for applications running on end-
user devices, the client is not required to authenticate itself
at the token endpoint of the AS. These kinds of clients are
called public clients. Clients able to maintain secrets, such as
web server clients, must authenticate to the token endpoint (in
Step 7 of Figure 1) and are called conﬁdential clients.
For conﬁdential clients, client authentication ensures that
only a legitimate client can exchange the authorization code
for an access token. OAuth 2.0 allows for several methods for
client authentication at the token endpoint, including sending
a password or proving possession of a secret [26, Section 2.3].
For public clients, other measures are available, such as PKCE
(see below), to obtain a sufﬁcient level of security.
2) OpenID Connect: OAuth 2.0 is built for authorization
only, i.e., the client gets access to the resources of the user
only if the user consented to this access. It does not per se
provide authentication, i.e., proving the identity of the user to
the client. This is what OpenID Connect [27] was developed
for. It adds an id token to OAuth 2.0 which is issued by the
AS and contains identity information about the end-user. ID
tokens can be issued in the response from the authorization
endpoint (Step 5 of Figure 1) and/or at the token endpoint
(Step 8 of Figure 1). They are signed by the AS and can be
bound to other parameters of the response, such as the hash
of authorization codes or access tokens. Therefore, they can
also be used to protect responses against modiﬁcation.
B. Proof Key for Code Exchange
The Proof Key for Code Exchange (PKCE) extension (RFC
7636) was initially created for OAuth public clients and
independently of the FAPI. Its goal is to protect against the use
of intercepted authorization codes. Before we explain how it
works, we introduce the attack scenario against which PKCE
should protect according to RFC 7636.
This attack starts with the leakage of the authorization
code after the browser receives it in the response from the
authorization endpoint (Step 5 of Figure 1). A multitude of
problems can lead to a leak of the code, even if TLS is used
to protect the network communication:
• On mobile operating systems, multiple apps can register
themselves onto the same custom URI scheme (e.g.,
some-app://redirection-response). When receiving the au-
thorization response, the operating system may forward
the response (and the code) to a malicious app instead of
the honest app (see [29, Section 1] and [30, Section 8.1]).
• Mix-up attacks, in which a different AS is used than the
client expects (see [6] for details), can be used to leak an
authorization code to a malicious server.
• As highlighted in [7], a Referer header can leak the code
to an adversary.
• The code can also appear in HTTP logs that can be
disclosed (accidentally) to third parties or (intentionally)
to administrators.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:17 UTC from IEEE Xplore.  Restrictions apply. 
In a setting with a public client (i.e., without client authenti-
cation at the token endpoint), an authorization code leaked to
the attacker can be redeemed directly by the attacker at the
authorization server to obtain an access token.
RFC 7636 aims to protect against such attacks even if not
only the authorization response leaks but also the authorization
request as well. Such leaks can happen, for example, from
HTTP logs (Precondition 4b of Section 1 of RFC 7636) or
unencrypted HTTP connections.
PKCE works as follows: Before sending the authorization
request, the client creates a random value called code veriﬁer.
The client then creates the code challenge by hashing the
veriﬁer7 and includes the challenge in the authorization request
(Step 2 of Figure 1). The AS associates the generated
authorization code with this challenge. Now, when the client
redeems the code in the request to the token endpoint (Step 7
of Figure 1), it includes the code veriﬁer in the token request.
This message is sent directly to the AS and protected by TLS,
which means that the veriﬁer cannot be intercepted. The idea is
that if the authorization code leaked to the attacker, the attacker
still cannot redeem the code to obtain the access token since
he does not know the code veriﬁer.
C. Client Authentication using JWS Client Assertions
As mentioned above, the goal of client authentication is to
bind an authorization code to a certain conﬁdential client such
that only this client can redeem the code at the AS. One method
for client authentication is the use of JWS Client Assertions
[27, Section 9], which requires proving possession of a key
instead of sending a password directly to the authorization
server, as in plain OAuth 2.0.
To this end, the client ﬁrst generates a short document
containing its client
identiﬁer and the URI of the token
endpoint. Now, depending on whether the client secret is a
private (asymmetric) or a symmetric key, the client either signs
or MACs this document. It is then appended to the token
request (Step 7 of Figure 1). As the document contains the URI
of the receiver, attacks in which the attacker tricks the client
into using a wrong URI are prevented, as the attacker cannot
reuse the document for the real endpoint (cf. Section III-C4).
Technically, the short document is encoded as a JSON Web
Token (JWT) [31] to which its signature/MAC is attached to
create a so-called JSON Web Signature (JWS) [32].
D. OAuth 2.0 Mutual TLS
OAuth 2.0 Mutual TLS for Client Authentication and Cer-
tiﬁcate Bound Access Tokens (mTLS) [33] provides a method
for both client authentication and token binding.
OAuth 2.0 Mutual TLS Client Authentication makes use of
TLS client authentication8 at the token endpoint (in Step 7
of Figure 1). In TLS client authentication, not only the server
7If it is assumed that the authorization request never leaks to the attacker,
it is sufﬁcient and allowed by RFC 7636 to use the veriﬁer as the challenge,
i.e., without hashing.
8As noted in [33], Section 5.1 this extension supports all TLS versions with
certiﬁcate-based client authentication.
authenticates to the client (as is common for TLS) but the client
also authenticates to the server. To this end, the client proves
that it knows the private key belonging to a certiﬁcate that is
either (a) self-signed and preconﬁgured at the respective AS
or that is (b) issued for the respective client id by a predeﬁned
certiﬁcate authority within a public key infrastructure (PKI).
Token binding means binding an access token to a client
such that only this client is able to use the access token at
the RS. To achieve this, the AS associates the access token
with the certiﬁcate used by the client for the TLS connection
to the token endpoint. In the TLS connection to the RS (in
Step 9 of Figure 1), the client then authenticates using the
same certiﬁcate. The RS accepts the access token only if the
client certiﬁcate is the one associated with the access token.9
E. OAuth 2.0 Token Binding
OAuth 2.0 Token Binding (OAUTB) [34] is used to bind
access tokens and/or authorization codes to certain TLS
connections. It is based on the Token Binding protocol [35]–
[38] and can be used with all TLS versions. In the following,
we ﬁrst sketch token binding in general before we explain
OAuth 2.0 Token Binding.
1) Basics: For simplicity of presentation, in the following,
we assume that a browser connects to a web server. The
protocol remains the same if the browser is replaced by another
server. (In the context of OAuth 2.0, in some settings in fact
the client takes the role of the browser as explained below.)
At its core, token binding works as follows: When a web
server indicates (during TLS connection establishment) that
it wants to use token binding, the browser making the HTTP
request over this TLS connection creates a public/private key
pair for the web server’s origin. It then sends the public key to
the server and proves possession of the private key by using
it to create a signature over a value unique to the current TLS
connection. Since the browser re-uses the same key pair for
future connections to the same origin, the web server will be
able to unambiguously recognize the browser in future visits.
Central for the security of token binding is that the private
key remains secret inside the browser. To prevent replay attacks,
the browser has to prove possession of the private key by
signing a value that is unique for each TLS session. To this
end, token binding uses the Exported Keying Material (EKM)
of the TLS connection, a value derived from data of the TLS
handshake between the two participants, as speciﬁed in [38].
As long as at least one party follows the protocol, the EKM
will be unique for each TLS connection.
We can now illustrate the usage of token binding in the
context of a simpliﬁed protocol in which a browser B requests
a token from a server S: First, B initiates a TLS connection
to S, where B and S use TLS extensions [36] to negotiate the
use of token binding and technical details thereof. Browser B
then creates a public/private key pair (kB,S,k
) for the origin
of S, unless such a key pair exists already. The public key kB,S
(cid:2)
B,S
9As mentioned above, the RS can read this information either directly from
the access token if it is a signed document, or uses token introspection to
retrieve the data from the AS.
(cid:21)(cid:22)(cid:24)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:17 UTC from IEEE Xplore.  Restrictions apply. 
(together with technical details about the key, such as its bit
length) is called Token Binding ID (for the speciﬁc origin).
When sending the ﬁrst HTTP request over the established
TLS connection, B includes in an HTTP header the so-called
Token Binding Message:
TB-Msg[kB,S, sig(EKM,k
(cid:2)
B,S)]