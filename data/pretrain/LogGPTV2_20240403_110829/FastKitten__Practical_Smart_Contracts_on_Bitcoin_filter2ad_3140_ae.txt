(Pdep) using a regular wallet. This concludes the setup phase,
and the smart contract gets executed (round).
The Graphene run-time environment enables FASTKITTEN to
support arbitrary Linux binaries, thus, can be used to imple-
ment smart contracts. However, instead of allowing binaries,
we use a scripting engine based on a Python interpreter in our
proof-of-concept implementation. First, this makes develop-
ment easier for contract developers, as they are not always
familiar with lower-level programming languages, and second,
USENIX Association
28th USENIX Security Symposium    811
this makes smart contracts less prone to memory corruption
vulnerabilities. Two use cases we implemented are presented
and evaluated in Section 8.
6.5 Denial of Service Protection
The protocol as described in Section 5 assumes instantaneous
contract execution meaning that the execution of a contract
inside a TEE takes no time. For most practical contracts, this
simplifying assumption is reasonable since executing a sim-
ple contract function inside a TEE is much faster than the
network/blockchain delay. However, this is not true when con-
sidering arbitrary contracts which might potentially contain
endless loops. Moreover, the halting problem states that it is
impossible to predict if a certain algorithm will halt within
a certain number of steps. A simple protection against end-
less loops and denial-of-service attacks, is letting the enclave
monitor the execution of the smart contract and terminate ex-
ecution if the number of execution steps exceeds a predeﬁned
limit. If the contract execution is aborted due to an execution
timeout, the enclave signs an outputs transaction txout which
returns deposited coins back to parties and to the operator.
7 Security
In this section we present the underlying security considera-
tions of FASTKITTEN.
7.1 Protocol Security
Due to limited space, we present our novel model in the ex-
tended version of this paper, where we also formally state
the security properties, the formal statement of the theorem
as well as the proof. Here we will only brieﬂy explain the
security properties.
In order to guarantee security for the protocol, we require
three security properties: correctness, fairness and operator
balance security.
Intuitively, correctness states that in case all parties behave
honestly (including the operator), every party Pi ∈ P outputs
the correct result and earns the amount of coins she is sup-
posed to get according to the correct contract execution. The
fairness property guarantees that if at least one party Pi ∈ P is
honest, then (i) either the protocol correctly completes an exe-
cution of the contract or (ii) all honest parties output setupFail
and stay ﬁnancially neutral or (iii) all honest parties output
abort, stay ﬁnancially neutral, and at least one corrupt party
must have been ﬁnancially punished. Finally, the operator bal-
ance security property says that in case the operator behaves
honestly, he cannot lose money.
Theorem 1 (Informal statement). The protocol πFASTKITTEN
as deﬁned in Section 5 satisﬁes correctness, fairness and
operator balance security property.
The most challenging part of the proof is the fairness prop-
erty. We need to show how honest parties reach consensus
on the result of the execution and prove that coins are always
distributed between parties according to this result (even if
malicious parties collude with the operator). In order to prove
the operator balance security, we show that an honest operator
has always enough time to publish a valid output transac-
tion which pays him back his deposit, before the time-locked
penalty transaction can be posted on the blockchain.
Incentive-driven adversary If we consider only incentive-
driven adversaries, then statement (iii) of the fairness property
is never true. Hence, if the setup phase completes successfully,
then the result of the protocol is a correct contract execution.
This follows directly from the fact, that when the protocol
aborts the misbehaving parties lose coins. By deﬁnition of
incentive-driven parties, losing coins is against their interest.
This is why the only possible outcome of the protocol is
correct execution of the contract. Moreover, when we consider
fees for positing transaction on the blockchain, parties are
additionally incentivized to prevent the challenge-response
transactions. These additional incentives enforce fast and
protocol compliant behavior of the parties.
7.2 Architecture Security
The main goal of FASTKITTEN is to enable efﬁcient execution
of general multi-round smart contracts. Hence, we analyze
the security of FASTKITTEN with regards to its system ar-
chitecture and implementation. Possible adversaries can be
malicious participants, a malicious operator, or a combination
of both.
We note that participating clients are only required to send
and receive transactions from the blockchain (e.g., to enter an
execution) and the ability to exchange protocol messages (e.g.,
to play rounds). Hence, client implementations can be based
on a diverse set of entirely different code bases in practice,
possibly using memory-safe languages such as Python, Go, or
Rust. Malicious participants are further limited to interacting
with other parties and the operator through the exchange of
messages as speciﬁed within our protocol, and hence, we
focus on the TEE-based execution facility in the following.
A malicious operator could deny execution, however, he is
incentivized to adhere to the protocol or lose money. Thus,
we assume that the goal of a malicious operator is to try
and exploit the execution facility at runtime. Since the opera-
tor already controls the host process, the main target would
be the enclave that executes the contract. Enclaves have a
well-deﬁned interface with the rest of the system, and any
attack has to be launched using this interface. By provid-
ing fake data through this interface, the attacker could try to
exploit a memory-corruption vulnerability in the low-level
enclave code to launch (a) a code-reuse attack, e.g., by ma-
nipulating enclave stack memory, or (b) a data-only attack,
e.g., to leak information about the game state or manipulate
Bitcoin addresses in contracts. As mentioned in Section 4,
for (a) we assume a standard code-reuse defense such as
control-ﬂow integrity [3, 15, 50, 62, 65] or ﬁne-grained code
randomization [21,23,30,42,53,61]. The core functionality of
812    28th USENIX Security Symposium
USENIX Association
FASTKITTEN additionally tackles both attack vectors by im-
plementing the main enclave code in Python, which provides
memory-safety features such as implicit bounds checking.
The only parts that are implemented in unsafe languages are
the initialization code of Graphene [17] and the Simple Pay-
ment Veriﬁcation (SPV) library [14]. FASTKITTEN actually
has no strong dependency on Graphene in principle, it was
mainly used to simplify and speed up prototype implementa-
tion. Finally, SPV represents a standard library used by most
blockchain clients and an adversary that is able to construct
a data-only attack against it would be able to exploit any of
those clients connected to the Bitcoin network using the same
data-only attack.
8 FASTKITTEN Contracts
In this section we take a look at applications and performance
through a number of benchmarks.
8.1 Complexity
The FASTKITTEN protocol consists of setup, round computa-
tion and ﬁnalize phases. During the setup phase, each party Pi
deposits a constant amount of coins ci. The operator needs to
deposit an amount ∑i∈[n] ci which equals the sum of all other
deposits from P together. To post the deposit transactions txis
and txQ, a total of n + 1 transactions is necessary.
During the round computation phase, in the optimistic case
FASTKITTEN can operate completely off-chain without any
blockchain interaction. Any user can force that challenge re-
sponse transactions are posted to attribute misbehavior of a
party, in any given round. If this (pessimistic) case occurs,
it can add 2 to another 2n transactions. In the worst case, a
challenge response transaction pair needs to be posted on the
blockchain for every party Pi at every round j ∈ [m] leading to
O(nm) blockchain interactions. In ﬁnalize phase, FASTKIT-
TEN requires one additional payout transaction txout to settle
money distribution among parties. Scenarios of missing de-
posit at the Setup phase or an abort by a party at the round
computation phase are dealt with by posting the refund trans-
action txout and the penalty transaction txp respectively.
Setup time In the optimistic case (which we have shown is
the standard case when considering incentive-driven parties)
the overall execution of the protocol only requires n + 2 trans-
actions on the blockchain. This also indicates at what speed
the protocol can be executed in this case. If all parties agree,
the setup phase can be ﬁnished in 2 blockchain rounds and
from that point on the protocol can be played off-chain. In the
next subsection we give some indication how fast this second
part can be achieved. Running the protocol as fast as possible
is in the interest of every party since it shortens the locking
time of the deposits.
8.2 Performance Evaluation
We performed a number of performance measurements to
demonstrate the practicality of FASTKITTEN using our lab
setup, which consists of three machines: First, an SGX-
enabled machine running Ubuntu 16.04.5 LTS with an In-
tel i7-7700 CPU clocked at 3.60GHz and 8GB RAM, where
we installed FASTKITTEN’s contract execution facility to
play the role of the operator’s server. Second, a machine run-
ning Ubuntu 14.04.4 LTS on an Intel i7-6700 CPU clocked
at 3.40GHz with 32GB RAM, which provides unmodiﬁed
blockchain nodes in a local test network using Bitcoin Core
version 0.16.1. Third, a laptop machine with macOS 10.13.6
on with Intel i7-4850HQ CPU clocked at 2.30GHz and 16GB
of RAM, which takes the role of the participants in the pro-
tocol. All three machines are connected through a Gigabit
Ethernet LAN. For tests involving the real Bitcoin network
the individual machines are connected through the Internet
using our Internet connection.
Block validation In our experiments, the enclave takes ap-
proximately 5 s to validate one block from the Bitcoin main
network, thus proving that it is capable of validating real
blocks in real time.
Enclave Startup The time to setup an enclave until it is
ready is 2 s, proving that instantiating enclaves on the ﬂy is
feasible.
End-to-end Time Assuming all parties are incentive-driven
and, thus, comply with the protocol, the total time required
by FASTKITTEN is the time of 2 blockchain interactions (see
Section 8.1), plus the computation time (a few milliseconds in
our use cases), plus the time required by the parties to choose
the next inputs.
8.3 Applications
FASTKITTEN allows to run complex smart contracts on top
of cryptocurrencies that would not natively support such con-
tracts, like Bitcoin. But in contrast to Turing-complete con-
tract execution platforms like Ethereum, a secure off-chain
execution such as FASTKITTEN puts some restrictions on the
contracts it can run:
• The number of parties interacting with the contract must
be known at the start of the protocol.
• It must be possible to estimate an upper bound on the
number of rounds and the maximum run time of any
round.
All of these restrictions make FASTKITTEN contracts differ-
ent from smart contracts running on Ethereum itself. The
restrictions above come from the fact that the contract can
be completely (and repeatedly) executed without blockchain
interactions. Other off-chain solutions (like state channels
[20,24,49]) come with similar caveats. By allowing additional
blockchain interaction we could get around those restrictions
but we would lose efﬁciency in the optimistic case (which is
also similar to state channel constructions).
FASTKITTEN has important features which are supported by
neither Bitcoin nor Ethereum — FASTKITTEN allows private
inputs and batched execution of user inputs. Overall, this leads
to cheaper, faster and private contract execution than what
USENIX Association
28th USENIX Security Symposium    813
is possible with on-chain contracts in Ethereum. Below, we
highlight these efﬁciency gains by presenting four concrete
use-cases in which FASTKITTEN outperforms contracts run
over Ethereum or in Ethereum state channels.
Lottery A lottery contract takes coins from every involved
party as input, and randomly selects one winner, who gets all
the coins. The key challenge for such a contract is to fairly
generate randomness to select the winner. In Ethereum or
Bitcoin the randomness is computed from user inputs through
an expensive commit-reveal scheme [48]. In FASTKITTEN,
all parties can immediately send their random inputs to the
enclave which will securely determine a winner. Hence, we
reduce the round complexity from O(logn) [48] to O(1).
Auctions Another interesting use-case for smart contracts
are auctions, where parties place bids on how much they are
willing to pay and the contract determines the ﬁnal price. In
a straightforward auction, the bids can be public, but more
fair versions, like second bid auctions, require the users not to
learn the other bids before they place their own. The privacy
features of FASTKITTEN can be used to reduce the round
complexity for such auctions which would otherwise require
complex cryptographic protocols [25].
Rock-paper-scissors We implemented the popular two-
party game rock-paper-scissors to show the feasibility of
FASTKITTEN contracts. Again, the privacy features allow
one match to be executed in a single round, which would
have required at least 3 rounds in Ethereum. The pure exe-
cution time in the optimistic case, excluding delays due to
human reaction times, is 12ms for one round (averaged over
100 matches). This demonstrates that off-chain protocols, like
FASTKITTEN, are highly efﬁcient when the same set of par-
ties wants to run complex contracts (like multiple matches of
a game).
Poker We also implemented a Texas Hold’em Poker game,
to prove that multi-party contracts which inherently require
multiple rounds can also be efﬁciently executed in FASTKIT-
TEN. In our implementation, each player starts with an equal
chip stack and participates in an initial betting round and in
additional rounds after the ﬂop, river, and turn have been dealt
by the enclave. If more than two players remain in the game
after the ﬁnal bets, the enclave reveals the winner and dis-
tributes the chips in the current pot to the winner. The game
continues until only one player remains. We measured 50
matches between 10 players resulting in an average time of
45ms per match (multiple betting rounds are included in each
match). The run time was measured starting from the moment
all deposits are committed to the blockchain.
Real-world Fees We generated examples of the transac-
tion types used in our protocol for a 10-player poker match.