      while ( 1 )
      {
        v5[v2++] = a1[v1];
        if ( v2 == 16 )
          break;
        v1 = v4[v2];
      }
      memcpy(a1, v5, 16);
    }
    void func2_rev(unsigned __int8 *a1) {
      __int64 v1; // rdx
      __int64 v2; // rax
      __int64 v3; // rdx
      int v4[16]; // [rsp+0h] [rbp-68h]
      char v5[16]; // [rsp+40h] [rbp-28h]
      unsigned __int64 v6; // [rsp+58h] [rbp-10h]
      v1 = 0LL;
      v2 = 0LL;
      v4[0] = 0;
      v4[1] = 5;
      v4[2] = 10;
      v4[3] = 15;
      v4[4] = 4;
      v4[5] = 9;
      v4[6] = 14;
      v4[7] = 3;
      v4[8] = 8;
      v4[9] = 13;
      v4[10] = 2;
      v4[11] = 7;
      v4[12] = 12;
      v4[13] = 1;
      v4[14] = 6;
      v4[15] = 11;
      while ( 1 )
      {
        // v5[v2++] = a1[v1];
        v5[v1] = a1[v2++];
        if ( v2 == 16 )
          break;
        v1 = v4[v2];
      }
      memcpy(a1, v5, 16);
    }
    void func1(unsigned __int8 *x, unsigned __int8 *a2);
    // 化简后的 func1 在上面
    void func1_rev(unsigned char* x) {
        unsigned int v5; // er12
        unsigned int v6; // eax
        unsigned int v7; // esi
        unsigned __int8 v8; // cl
        unsigned __int8 v9; // di
        unsigned __int8 v10; // cl
        unsigned __int8 v13; // di
        unsigned int v14; // eax
        unsigned int v15; // ecx
        unsigned int v16; // esi
        unsigned int v17; // er12
        unsigned int v21; // [rsp+4h] [rbp-134h]
        __int64 v25; // [rsp+10h] [rbp-128h]
        __int64 v26; // [rsp+18h] [rbp-120h]
        __int64 v27; // [rsp+20h] [rbp-118h]
        __int64 v28; // [rsp+28h] [rbp-110h]
        unsigned char* x_ptr;
        for (int j = 0; j = 0; i--) {
            for (int j = 3; j >= 0; j--) {
                v25 = (i * 16 + j * 4) > 24) & 0xff;
                x_ptr[1] = (value >> 16) & 0xff;
                x_ptr[2] = (value >> 8) & 0xff;
                x_ptr[3] = value & 0xff;
            }
            func2_rev(x);
        }
    }
    int main() {
        struct stat sb;
        int fd = open("./hello", O_RDONLY);
        if (fd < 0) {
            perror("open");
            exit(-1);
        }
        if (fstat(fd, &sb) == -1) {
            perror("fstat");
            exit(-1);
        }
        addr = (unsigned char*) mmap(0, sb.st_size, PROT_READ, MAP_SHARED, fd, 0);
        if (addr == (unsigned char*) -1) {
            perror("mmap");
            exit(-1);
        }
        table1 = (unsigned char*) (addr + 0x1D9EA0);
        table3 = (unsigned int*) (addr + 0x1B4EA0);
        table4 = (unsigned int*) (addr + 0x18CEA0);
        table5 = (unsigned char*) (addr + 0x156EA0);
        // 0123456789abcdeffedcba9876543210
        unsigned char src[] = {
            0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,
            0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10
        };
        unsigned char buf[16];
        unsigned char dst[] = {
            0xc9, 0xf7, 0x24, 0xd3, 0x1a, 0xe0, 0xf1, 0x83,
            0x70, 0x18, 0x02, 0x00, 0x11, 0xf3, 0x38, 0xba
        };
        /*
        func1(src, buf);
        for (int i = 0; i < 16; i++) {
            printf("0x%02x ", buf[i]);
            if ((i + 1) % 8 == 0) putchar('\n');
        }
        /**/
        /*
        0x50 0x6b 0x92 0xeb 0x8e 0xda 0x33 0xdf
        0x70 0xc8 0x48 0x62 0x48 0xec 0x30 0x1d
        /**/
        /*
        if (memcmp(buf, dst, 16) == 0) {
            puts("Right!");
        } else {
            puts("Wrong!");
        }
        /**/
        func1_rev(dst);
        for (int i = 0; i < 16; i++) {
            printf("0x%02x ", dst[i]);
            if ((i + 1) % 8 == 0) putchar('\n');
        }
        /*
        0xbc 0x94 0x60 0xb1 0x72 0x31 0xc7 0xe3
        0x74 0xbe 0x58 0x74 0x27 0xcc 0x3f 0x1a
        /**/
        //puts(dst);
        if (munmap(addr, sb.st_size) == -1) {
            perror("munmap");
            exit(-1);
        }
        return 0;
    }
跑几分钟就能得到结果了。
flag：`n1ctf{bc9460b17231c7e374be587427cc3f1a}`