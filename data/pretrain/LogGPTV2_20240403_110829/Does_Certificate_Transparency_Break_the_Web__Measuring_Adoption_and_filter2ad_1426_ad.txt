ence when users encounter frequent warnings on the web.
VII. RISKS
CT enforcement has not imposed widespread breakage on
end users so far, as discussed in Section V. However, the CT
ecosystem is young and end users could still be affected as CT
enforcement rolls out more broadly. In this section, we present
data and case studies to examine two risks of CT enforcement:
(1) log disqualiﬁcation or distrust, which might require website
owners or CAs to take action in order to avoid breakage for
end users, and (2) server-side SCT serving, which can cause
disruption if implemented improperly. Our aim is to assess
the size of the breakage that these risks might impose on end
users and uncover best practices for avoiding them.
A. Log distrust
Chrome requires logs to meet a set of requirements, such
as maintaining a certain uptime, incorporating certiﬁcates into
the log quickly, and always presenting consistent views of the
log [38]. When a log fails to meet these requirements, it might
be removed from Chrome’s list of logs and Chrome may stop
accepting its SCTs. As a result, websites using the log’s SCTs
might no longer comply with Chrome’s CT policy, leading
to warnings or breakage for end users. Chrome responds to
different types of log failures with different actions:
• For an unrecoverable security failure, such as a compro-
mise of a log’s private key, a log can be fully distrusted.
None of the log’s SCTs will be accepted as valid any-
more. This is the type of distrust that causes the most
(cid:19)(cid:18)(cid:26)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:26 UTC from IEEE Xplore.  Restrictions apply. 
breakage for end users because it can break existing
certiﬁcates; fortunately, so far it has occurred only once,
for a virtually unused log [39].
• When a log has a single security incident, it can be
disqualiﬁed. A certiﬁcate with an embedded SCT from
the disqualiﬁed log will continue to be accepted as valid
as long as the certiﬁcate has SCTs from other logs that
have not been distrusted or disqualiﬁed [12]. However,
SCTs delivered via TLS extension or OCSP response
must be replaced, and Chrome will not accept new SCTs
from the log. Log disqualiﬁcation can result in disruption
for end users – for example, if a server fails to update the
SCTs that it is serving in the TLS extension. However, a
log disqualiﬁcation is usually far less disruptive than full
distrust because it usually does not require many existing
certiﬁcates to be replaced.
• When a log has an operational incident that does not pose
a signiﬁcant security risk, the log can be frozen. Existing
SCTs from the log continue to be accepted exactly as
before, but the log cannot issue new SCTs. Log freezing
is usually done with the cooperation of the log operator
and poses minimal risk of negative impact to end users.
We focus on disqualiﬁcation when discussing log distrust
because it has happened often historically and can cause user
disruption. In contrast, log freezing happens often but does not
affect end users, and full distrust is nearly unheard-of so far.
1) Measuring disqualiﬁcation risk: A small number of CT
logs carry a disproportionate risk of causing negative impact
to end users.
When a log is disqualiﬁed,
there are two effects: (1)
websites serving the log’s SCTs in the TLS extension or
OCSP response must replace them, and (2) existing certiﬁcates
might need to be replaced, if multiple SCTs embedded in the
certiﬁcate come from logs that have been disqualiﬁed.
In practice, (2) is the larger risk to end users because it
requires site owners to take action even though they might
not have any knowledge of CT, having simply acquired a
certiﬁcate from a CA that embeds SCTs. Historically, users
encounter frequent certiﬁcate errors when browsers make
changes that require site owners to replace certiﬁcates. For
example, deprecated SHA-1 certiﬁcates accounted for 9.4% of
all certiﬁcate errors in Chrome in the two months after Chrome
began showing full-page certiﬁcate warnings for them [18].
We ﬁnd that a single pair of logs is disproportionately “load-
bearing”: if both of the logs were disqualiﬁed, a large number
of sites’ existing certiﬁcates would no longer be CT-compliant.
Table V shows the number of websites in the Alexa Top 10,000
with certiﬁcates that would no longer be accepted as valid if a
pair of logs were to be disqualiﬁed. The “Sites with affected
certs” column shows the number of sites with SCTs embedded
in certiﬁcates which would become noncompliant if the given
logs were disqualiﬁed. These sites would need to either update
their certiﬁcates or begin serving compliant SCTs via TLS
extension or OCSP response. If the Google Pilot and Symantec
CT logs were both disqualiﬁed, 458 websites – 12% of the
THE RISK OF LOG DISQUALIFICATIONS FOR THE ALEXA TOP 10,000 AS
OF FEBRUARY 2018. THE TABLE OMITS LOGS OR PAIRS OF LOGS THAT
TABLE V
WOULD NOT IMMEDIATELY AFFECT ANY EXISTING CERTIFICATES IF
DISQUALIFIED.
Disqualiﬁed logs
Google Pilot, Symantec CT
Google Pilot, Digicert CT2
Google Rocketeer, Symantec CT
Google Pilot, Digicert CT1
Google Skydiver, Digicert CT2
Google Rocketeer, Digicert CT2
Google Skydiver, Symantec CT
Google Pilot, Symantec Vega
Sites with affected certs
458
23
18
17
14
2
1
1
CT-compliant websites in the Alexa list – would no longer be
serving CT-compliant certiﬁcates.
Note that Table V simulates log disqualiﬁcations as of
February 1, 2018. Logs can also be retroactively disqualiﬁed,
which would affect certiﬁcates that had been issued since
the retroactive disqualiﬁcation date [40]. Depending on the
effective disqualiﬁcation date, retroactive disqualiﬁcations can
have an even bigger impact on end users, because newly-issued
certiﬁcates might need to be replaced.
2) Disqualiﬁcation incidents: To understand how log dis-
qualiﬁcation happens and can be avoided, we describe several
anecdotes about log failures and how they were addressed.
Unrecoverable incidents. In February 2017, the Venaﬁ log
presented two inconsistent views, violating the append-only
property of CT logs [41]. The incident was caused by an
Amazon Web Services outage, in which the log published a
view based on a backup out of sync with the log’s current set
of certiﬁcates. The log was retroactively disqualiﬁed from the
point at which it had published an inconsistent view [40].
In practice, this disqualiﬁcation appeared to have little neg-
ative impact on end users. The disqualiﬁcation was estimated
to affect fewer than 2,000 certiﬁcates [40]. CT accounted for
0.05% of all certiﬁcate errors in Chrome in the week ending
June 15, 2017, shortly after the disqualiﬁcation took effect in
Chrome’s Stable channel.
Vigilant monitoring and speedy reporting helped minimize
the impact on end users. The incident was noticed by CT
monitoring software written and operated by an external
researcher. Had the inconsistent views not been noticed and
acted on quickly, they might have been uncovered much later
on. A retroactive disqualiﬁcation might have then affected
many more certiﬁcates that had been issued in the meantime,
possibly causing greater disruption for end users if those
certiﬁcates were not replaced by site owners.
Recoverable incidents. At the time of writing, Cloudﬂare
is in the process of bringing up a new set of CT logs which
have recovered from two incidents of note.
In one incident, the log presented two subsequent, consistent
views, but failed to produce the full set of certiﬁcates between
the two views [42]. Further investigation revealed that the
published views were calculated using a set of certiﬁcates
which was different than the consensus view on which the
(cid:19)(cid:19)(cid:17)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:26 UTC from IEEE Xplore.  Restrictions apply. 
underlying datastore eventually settled. Fortunately, a redun-
dant datastore existed, allowing the log operators to reconstruct
the certiﬁcates corresponding to the published views. While
the main datastore (Kafka) did not allow the log operators to
reorder data, they modiﬁed their log implementation to spe-
cially handle the problematic certiﬁcates. This ﬁx reconciled
the situation, allowing the log to serve certiﬁcates matching
the published views. Since the published views were never
inconsistent with each other, the incident was not treated as
an unrecoverable failure.
In another pre-production incident, the log operators dis-
covered an implementation bug that resulted in publishing
inaccurate views of the log. To prevent a similar situation
from occurring in production, they produced two independent
implementations and now check the results against each other
before publishing them. This strategy helps prevent the logs
from publishing inconsistent or incorrect views.
Neither of these incidents affected users, because they
occurred during development or Chrome’s monitoring period
before accepting new logs [38]. The monitoring period is
useful not just for ensuring that logs uphold their security
properties but also for minimizing user-visible breakage, by
helping log operators discover and ﬁx operational problems.
B. Server-side SCT delivery
Some websites choose to serve SCTs themselves in the
TLS extension, rather than having their CAs provide SCTs
by embedding them in their certiﬁcates or serving them in
OCSP responses. A common reason to use the TLS extension
is to avoid sending SCTs to clients that don’t signal support
for them in the TLS handshake: it wastes bandwidth to send
SCTs to clients that don’t use them.
In some ways, the TLS extension can avoid negative impact
on end users. A site owner can serve SCTs via TLS extension
to react quickly to a log distrust event, rather than waiting for
their CA to provide a new certiﬁcate with valid SCTs.
However, if implemented improperly, server-side SCT deliv-
ery can pose risks to end users. For example, a server must use
up-to-date log metadata when obtaining its SCTs; otherwise,
it could serve an SCT from a log that has been distrusted,
causing users to see warnings or breakage on that website.
In this section, we measure the prevalence of server-side
SCT delivery and present an anecdote about SCT delivery
gone wrong.
1) Measuring server-side SCT delivery: Server-side SCT
delivery tends to be implemented by a small number of large
organizations, such as performance- and bandwidth-conscious
CDNs. The TLS extension accounts for a disproportionately
large percentage of SCTs on the web, despite the fact that most
individual site owners do not choose to serve SCTs themselves.
In the week ending February 1, 2018, 47.97% of SCTs
observed in Chrome came from the TLS extension. (0.01%
came from OCSP responses and 52.02% were embedded in
certiﬁcates.) 50% of CT-compliant websites in the Alexa Top
10,000 serve SCTs in the TLS extension. This compares to
30% in the Chrome User Experience Report and 44% in the
HTTP Archive. Prior work has also found that more popular
sites tend to serve SCTs themselves [43].
It is therefore important that implementations of SCT de-
livery solidify around best practices. Problems in server-side
SCT delivery could affect end users at a large scale.
2) Server-side SCT delivery incidents: In mid-2017, a com-
pany that owns a large set of websites brieﬂy served an SCT
via TLS extension that many Chrome clients did not accept,
accounting for the mid-2017 dip in valid SCTs in Fig. 4.
The incident occurred because the websites began using
a log that was trusted in the latest version of Chrome,
but that version had not yet been widely deployed to users
yet. For users with slightly out-of-date Chrome versions, the
websites appeared to be serving SCTs from an unknown log.
Fortunately, CT was not yet required for these websites and
the incident was not visible to end users.
This occurrence underscores the importance of adopting CT
gradually before it is fully required, so that problems can be
discovered and ﬁxed before incurring negative user impact.
We note that commodity implementations of server-side
TLS delivery do not yet exist. Implementations for servers
such as nginx and Apache are experimental, not well-tested,
and not solidiﬁed around best practices [44], [45]. Developing
mature implementations of server-side SCT delivery is there-
fore an important area of future work.
VIII. DISCUSSION: DESIGN PRINCIPLES
Our measurements show that CT has been adopted with
minimal breakage so far. In this section, we discuss three CT
design properties that have made this possible.
A. Small number of ﬁrst-movers
The burden of CT adoption currently falls largely on CAs.
Individual websites get the security beneﬁts of CT without
having to take action. For example, when Chrome began
requiring CT for EV certiﬁcates, CAs began embedding SCTs
into EV certiﬁcates so that the certiﬁcates would continue
to trigger the EV UI. If EV CT enforcement had required
individual site owners to take action, it is unlikely that the
noncompliance rate would have been as low as shown in
Fig. 5. Website owners can take action to improve the security
properties that they get from CT (for example, by deploying
the Expect-CT header), but by design they do not need to.
In contrast, we consider a web PKI technology that depends
on individual site owners to adopt: HTTP Public Key Pinning
(HPKP). HPKP allows sites to “pin” their connections to indi-
vidual public keys, mitigating the site’s vulnerability to a CA
compromise [46]. HPKP is notoriously difﬁcult for site owners
to implement correctly [47]–[49]. Perhaps as a result, HPKP
has seen very low adoption across the web [50], contributing
to Chrome’s recent decision to deprecate HPKP [51]. While
it can be tricky to adopt CT correctly, one CA or CDN can
do the work to protect all of its customers, leading to high
adoption without the involvement of individual site owners.
(cid:19)(cid:19)(cid:18)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:26 UTC from IEEE Xplore.  Restrictions apply. 
B. Staged enforcement
B. Large implementer investment
By rolling out CT enforcement in stages, ecosystem prob-
lems are ﬂushed out early and ﬁxed before they have a
bigger negative impact on end users. Moreover, each stage
of enforcement carries a smaller risk of breakage than if
enforcement were to be turned on universally at once.
For example, consider
the incident discussed in Sec-
tion V-A, where a number of websites stopped working
when Chrome rolled out CT enforcement for a large CA.
This mishap imposed some negative impact on end users,
accounting for 1.2% of certiﬁcate warnings in Chrome, but
the impact could have been much larger if multiple CAs had
been subject to enforcement at once.
To limit the impact of each stage, enforcement requirements
can be constrained by several strategies. For EV certiﬁcates,
Chrome shipped a whitelist of certiﬁcates that had been logged
but were not served with SCTs. This strategy accomplishes
the goal of the enforcement requirement – ensuring that all
relevant certiﬁcates are logged – and minimized the impact of
on end users. In July 2018, Chrome began requiring CT for
all certiﬁcates issued after April 2018. An issuance date cut-
off compromises on security because it does not require old
or backdated certiﬁcates to be logged, but it allows Chrome
to require CT for a broader class of certiﬁcates, for which a
whitelist would not be feasible, without widespread breakage.
C. Browser policy
Chrome’s CT policy is carefully chosen to mitigate the risks
of the early CT ecosystem. For example, the policy allows
logs to be frozen or disqualiﬁed rather than fully distrusted in
response to certain types of log failures (Section VII-A). In
recent months, freezing and disqualiﬁcation have been deemed
appropriate responses for several operational and security
incidents [52], [53]. This aspect of the policy beneﬁts users
because logs can be frozen or disqualiﬁed with less disruption
than a full distrust event.
IX. DISCUSSION: DEPLOYMENT HURDLES
In this section, we discuss aspects of CT that might present
roadblocks for future similar systems.
A. Sponsorship from major players
Successful CT deployment has relied heavily on sponsorship
and investment from major ecosystem players such as Google
and Cloudﬂare. For example, as discussed in Section V-B,
EV certiﬁcates were not widely logged until Chrome began
dropping the EV UI for noncompliant certiﬁcates. Moreover,
Cloudﬂare has driven a substantial portion of CT adoption
(Table II). It is unclear that CT would have been widely
adopted without the investment of these large organizations.
Future similar systems may not see successful deployment
without similar investment from major ecosystem players.
Part of CT’s success has been due to the fact
it
does not require individual site operators to take action (Sec-
tion VIII-A), but one of its challenges is that
it requires
substantial
implementation investment from other entities,
including browser vendors.
that
Browsers face a ﬁrst-mover risk when considering whether