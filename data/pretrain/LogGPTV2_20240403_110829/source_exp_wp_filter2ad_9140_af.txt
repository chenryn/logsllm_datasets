        boost::mt19937 rng_(rng);
        rng_.discard(num / 12);
        //这里相当于丢弃了num个随机结果
        if (rng_() != 3570126595) {
            _exit(0);
        }
        num -= (rng_() % 45);   // 45
    }
一个`unsigned short`传入，小于等于111，把它作为随机引擎的种子，丢弃掉`num % 12`个随机数，然后用一次随机引擎的拷贝构造
> 注意，这里拷贝构造会完全保留随机引擎的状态，而不是回归初始状态
>
> 在IDA中就表现为直接一个memcpy
接着再丢弃掉`num/12`个随机数
然后输出一个随机数要求等于`3570126595`，最后由于是引用，传入的数值被改变
后面第二段check没什么好说的
第三段check是我的锅
    if ((res.num3 % res.num1 != 12) && (res.num3 / res.num1) != 3) {
            //3 * 34 + 12 == 114
            std::cout  源代码`evil_boost.cpp`
>
> 附件`evil_boost.exe`
>
> 编译`compile.txt`
#### 分析
    #include
    #include
    #include
    #include
    namespace opt = boost::program_options;
    using namespace std;
    using namespace boost::spirit;
    using namespace phoenix;
    int main(int argc, char** argv) {
        std::cout ()->default_value(99), "your C++ grades")
            ("python,py", opt::value()->default_value(88), "your python grades")
            ("javascript,js", opt::value()->default_value(77), "your javascript grades")
            ("name", opt::value(), "your name")
            ("help", "produce help message");
        opt::variables_map vm;
        //解析命令行选项并把值存储到"vm"
        opt::store(opt::parse_command_line(argc, argv, desc), vm);
        opt::notify(vm);
如代码所示，解析命令行参数并存储
    if (vm.count("name")) {
            std::string __name = vm["name"].as();
            char c1 = vm["cplusplus"].as();
            char c2 = vm["python"].as();
            char c3 = vm["javascript"].as();
            if (vm["cplusplus"].as() == 999) {
                if (vm["python"].as() == 777) {
                    if (vm["javascript"].as() == 233) {
                        unsigned char enc_false_flag[25] = {
                            0x4c,0x70,0x71,0x6b,0x38,0x71,0x6b,0x38,0x6c,
                            0x70,0x7d,0x38,0x6f,0x6a,0x77,0x76,0x7f,0x38,
                            0x7e,0x74,0x79,0x7f,0x36,0x36,0x36
                        };
                        for (int i = 0; i  {
            member1 val;
        };
        //定义ContextT策略为calc_closure::context_t
        rule factor, term, exp;
        //直接使用phoenix的lambda表达式作为Actor
        factor = real_p[factor.val = arg1] | ('(' >> exp[factor.val = arg1] >> ')');
        term = factor[term.val = arg1] >> *(('*' >> factor[term.val *= arg1]) | ('/' >> factor[term.val /= arg1]));
        exp = term[exp.val = arg1] >> *(('+' >> term[exp.val += arg1]) | ('-' >> term[exp.val -= arg1]));
        const char* szExp = vm["name"].as().c_str();
        double result;
        parse_info<>r = parse(szExp, exp[assign_a(result)], space_p);
    // 5e0*(5-1/5)==24
        if (strlen(szExp) != 11) {
            _exit(strlen(szExp));
        }
        int count_num = 0;
        int count_alpha = 0;
        for (int i = 0; i = '0')) {
                count_num++;
            }
            else if ((szExp[i] > 'a') && (szExp[i]  'A') && (szExp[i]  'z')) {
                Sleep(10000000);
                std::cout  0.0000001) {
            std::cout ()  0.0000001)`很容易反推是在计算
24点，最后输入的name就是flag
## Signal vm + Signal vm Δ
通过异常进入各种handler，从而实现虚拟机。
参考了强网杯2018的题目 obf ，基于这道题的基础上魔改了一下。
我找不到官方wp了 ，所以只好把原题贴一下，感兴趣的可以看看。
#### 流程
先fork出一个子进程，父进程会调试子进程，子进程会进入各种由异常组成的bytecode，父进程根据异常的类型进行各种虚拟机操作。
Signal VM 和Signal VM Δ 不同的一点在于，第一题直接对父进程本身的数据进行操作，子进程只是起到传达code的作用
第二题使用PTRACE_PEEKTEXT 和PTRACE_POKETEXT，直接修改子进程的内存。
这样在我们调试父进程的时候，在第一题中可以直接监视VM寄存器和VM的内存，从而帮助我们理解指令。
而在第二题中，由于子进程已经被父进程调试了，我们无法附加上去，无法查看子进程的内存，只能查看父进程调试获取的数据，加大了理解指令的难度，分析解析指令这一部分更为重要。
#### 指令
指令大致分为三部分：opcode， 操作数类型，操作数
除了int 3断点，还添加了三种不同的异常
    signal    | machine code | handler
    -------------------------------------------    SIGILL    | 06           | mov, lea ...
    SIGTRAP   | CC           | add, sub, mul div ...
    SIGSEGV   | 00 00        | jcc
    SIGFPE    | 30 C0 F6 F8  | cmp
opcode之后有一个字节用来标识操作数的类型（除了jcc）
高 4 bit代表第一个操作数，低 4 bit代表第二个操作数，其中：
    0  register
    1  immediate
    2  address
地址只能是由寄存器指向，第一个操作数不能为立即数，立即数位32位
在这之后是两个操作数，应当根据操作数类型进行匹配。寄存器占一个字节，立即数占四个字节。
#### 算法
两道题的算法都不算难。
第一题为hill cipher
第二题可以参考
可以动态规划从下往上叠加，取相邻两个中的较大的一个，具体参考解题脚本。
构造数据的时候保证每行与最大值相邻的不会相等，这样排除了多解的情况。
#### 源代码
vm1.c和vm2.c是两道题的源代码，由于我比较菜，写的也比较仓促，代码质量可能不高。。。
hill.c和triangle.c是算法的源码
assembly1.txt和assembly2.txt是vm的汇编代码，我直接从x86汇编翻译过来的。。。
simulate1.py和simulate2.py是解析bytecode并模拟执行，然后把bytecode写进bytecode1 和bytecode2。
solve1.py和solve2.py是参考脚本。
#### 总结
虚拟机结构还有很多不足的地方。可以触发的异常比较少，因此指令不能设置太多。没有区分有符号与无符号数，总的来说还是太菜了。
第二题其实是第一天晚上临时起意改出来的，一开始没准备出两道题。最早不知道可以有修改子进程的方法，后来查了一些资料才了解到的，然后爆肝一晚改出了第二道题。原本第二题只有这一个算法的。。。如果直接放第二题可能效果会更好一点。。。
有任何问题可以tg联系我 [@Apeng7364](https://t.me/Apeng7364)