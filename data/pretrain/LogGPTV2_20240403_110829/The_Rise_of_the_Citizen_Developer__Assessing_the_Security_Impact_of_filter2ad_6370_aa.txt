title:The Rise of the Citizen Developer: Assessing the Security Impact of
Online App Generators
author:Marten Oltrogge and
Erik Derr and
Christian Stransky and
Yasemin Acar and
Sascha Fahl and
Christian Rossow and
Giancarlo Pellegrino and
Sven Bugiel and
Michael Backes
2018 IEEE Symposium on Security and Privacy
The Rise of the Citizen Developer: Assessing the
Security Impact of Online App Generators
Marten Oltrogge∗, Erik Derr∗, Christian Stranksy∗, Yasemin Acar‡, Sascha Fahl‡
Christian Rossow∗, Giancarlo Pellegrino∗†, Sven Bugiel∗ and Michael Backes∗
∗CISPA, Saarland University, †Stanford University, ‡Leibniz University Hannover
Abstract—Mobile apps are increasingly created using online
application generators (OAGs) that automate app development,
distribution, and maintenance. These tools signiﬁcantly lower
the level of technical skill that is required for app development,
which makes them particularly appealing to citizen developers,
i.e., developers with little or no software engineering background.
However, as the pervasiveness of these tools increases, so does
their overall
inﬂuence on the mobile ecosystem’s security, as
security lapses by such generators affect thousands of generated
apps. The security of such generated apps, as well as their impact
on the security of the overall app ecosystem, has not yet been
investigated.
We present the ﬁrst comprehensive classiﬁcation of commonly
used OAGs for Android and show how to ﬁngerprint uniquely
generated apps to link them back to their generator. We thereby
quantify the market penetration of these OAGs based on a corpus
of 2,291,898 free Android apps from Google Play and discover
that at least 11.1% of these apps were created using OAGs. Using
a combination of dynamic, static, and manual analysis, we ﬁnd
that the services’ app generation model is based on boilerplate
code that is prone to reconﬁguration attacks in 7/13 analyzed
OAGs. Moreover, we show that this boilerplate code includes
well-known security issues such as code injection vulnerabilities
and insecure WebViews. Given the tight coupling of generated
apps with their services’ backends, we further identify security
issues in their infrastructure. Due to the blackbox development
approach, citizen developers are unaware of these hidden prob-
lems that ultimately put the end-users sensitive data and privacy
at risk and violate the user’s trust assumption. A particular
worrisome result of our study is that OAGs indeed have a
signiﬁcant ampliﬁcation factor for those vulnerabilities, notably
harming the health of the overall mobile app ecosystem.
I. INTRODUCTION
The proliferation of online application generators (OAGs)
that automate development, distribution and maintenance of
mobile apps signiﬁcantly lowers the level of technical skill
that
is required for application development. As a conse-
quence, creating platform-speciﬁc apps becomes amenable to
a wide range of inexperienced developers. This trend that
developers with “little or no coding or software engineering
background” [19] create software with low-code or no-code
platforms has become known as citizen developers [19], [28]
and has recently received tremendous momentum across the
industry. Moreover, many OAGs additionally promise to de-
crease the app’s overall development and maintenance costs
since they offer functionality for taking care of various tasks
across all phases of an app’s life cycle.
However, this convenience comes at the cost of an opaque
generation process in which the user/developer has to fully
trust the generated code in terms of security and privacy. A
large body of literature has revealed various security problems
in mobile apps, such as permission management [37], insecure
SSL/TLS deployment [17], [36], misuse of cryptographic
APIs [15], and inter-process communication [12]. These ﬂaws
could be attributed to poorly trained app developers that
implemented application features in an insecure manner. With
the increasing use of OAGs the duty of generating secure code
shifts away from the app developer to the generator service.
This leaves the question whether OAGs can provide safe
and privacy-preserving default implementations of common
tasks to generate more secure apps at an unprecedented scale.
However, if they fail, their ampliﬁcation effect will have a
drastic negative impact on the already concerning state of
security in mobile apps. As of now, the security implications
of OAGs have not been systematically investigated yet, and,
in particular,
their impact on the security of the overall
app ecosystem remains an open question: “Do online app
generators have a positive or negative impact on the overall
app ecosystem?”
Our contribution—In this paper, we present the ﬁrst clas-
siﬁcation of commonly used OAGs for Android apps on
various characteristics including their supported workﬂows,
automation of the app development
life cycle and multi-
platform support. We proceed by showing how to uniquely
ﬁngerprint generated apps in order to link them back to their
generator. We thereby quantify the market penetration of these
OAGs based on a corpus of 2,291,898 free Android apps from
Google Play and discover that at least 11.1% of these apps
were created using online services. This noticeable market
penetration already shows that potential security mistakes
and misconduct by OAGs would impact thousands of apps
and impose a danger for the overall health of the Android
ecosystem.
Analyzing the security of OAGs is non-trivial due to the
absence of a documentation of the development process.
Instead, these services offer a fully-automated, opaque app
generation process without the possibility to write custom
code. App developers have to fully trust that the generated
code follows security best practices and does not violate the
end-users’ privacy. In order to shed light onto the black-
box generation process, we perform a comprehensive security
audit on apps created by these services using a combination
of dynamic, static, and manual analysis. This allows us to
© 2018, Marten Oltrogge. Under license to IEEE.
DOI 10.1109/SP.2018.00005
634
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:30:14 UTC from IEEE Xplore.  Restrictions apply. 
their internal workﬂow and to discover a new
document
app generation model based on boilerplate code. We then
demonstrate that 7 out of 13 analyzed online application
generators fail to defend against reconﬁguration attacks, thus
opening new attack surfaces of their generated apps. We
further analyze whether the generated boilerplate code adheres
to Android security best practices and whether it suffers from
known security vulnerabilities identiﬁed by prior research. Our
results, both on self-generated apps as well as apps randomly
picked from Google Play, suggest that OAGs are responsible
for producing vulnerable code including SSL/TLS veriﬁcation
errors,
insecure WebViews, code injection vulnerabilities
and misuse of cryptographic APIs. Within our data set, all
analyzed application generators suffer from at least one of
these vulnerabilities, combined affecting more than 250K apps
on Google Play. Finally, we have a dedicated look onto
the services’ infrastructure security. Online service-generated
apps are typically bound to their providers’ backend servers,
e.g. for license checks when the service charges a monthly
fee. In addition, some services even provide complete user-
management modules that require connections to backend
servers. Any of this functionality requires a secure client-
server communication since either sensitive (user) data is
exchanged or conﬁguration ﬁles for the boilerplate code is
transmitted. However, our analysis reveals that many services
build on an insecure and vulnerable infrastructure, e.g. by
using insecure SSL/TLS server conﬁgurations, mixed usage
of HTTP/HTTPS and usage of outdated SSL libraries.
We conclude with a thorough discussion of our ﬁndings,
including potential alleys worth pursuing in future research on
generating secure code for such module-based app builders. In
summary, we make the following tangible contributions:
● We present
the ﬁrst classiﬁcation of commonly used
OAGs for Android, accounting for various characteristics
such as the supported workﬂows, automation of the app
development life cycle, multi-platform support, and their
boilerplate-based app generation model.
● We show how to ﬁngerprint generated apps and how to
quantify the market penetration of OAGs by classifying
2,291,898 free apps from Google Play: at least 255,216
apps (11.1%) are generated using OAGs.
● We derive OAG-speciﬁc attacks, such as reconﬁguration
and infrastructure attacks and show how these services
fail in protecting against these attacks.
● We conduct a comprehensive security audit to show that
boilerplate code generated by any of the analyzed services
violates security best practices and contains severe secu-
rity vulnerabilities. To estimate the real-world impact, we
validate our ﬁndings on real, generated apps on Play.
Outline—This paper is organized as follows. We give a
general overview of mobile app generators in Section II and
a classiﬁcation of commonly used OAGs in Section III. We
describe the methodology of our security audit in Section IV,
present new, OAG-speciﬁc attack classes in Section V and
analyze known security issues in Section VI. Finally, we thor-
635
oughly discuss our ﬁndings in Section VII, before concluding
in Section VIII.
II. OVERVIEW OF MOBILE APPGENS
Application generators are tools for partially or even com-
pletely automating app development, distribution, and main-
tenance. The advantages of using application generators are
manifold. First, they enable developers to abstract away from
implementation aspects and to instead focus only on the
conceptual behavior of the application in terms of high-level
functionality. Second, they provide functionality beyond core
app generation, including support for app compilation, app
dissemination, and distribution of patched versions. Third,
they offer support for making an app equally applicable to
multiple competing architectures, such as Android and iOS.
Finally, they may even provide support for recurring, extended
app functionality such as user management, user login, and
data submission to back-end servers. In this section, we give
an overview of commonly used AppGen types within the
Android ecosystem based on their supported workﬂows. Our
investigation resulted in three distinct categories of applica-
tion generators: standalone frameworks, online services, and
software development services that we dub Developer-as-a-
Service as explained in the following.
A. Standalone frameworks
Standalone frameworks constitute tools that offer a core set
of abstract application functionality which are then reﬁned by
additional code from the app developer. These frameworks
typically expect a program written in a platform-independent
language as input, e.g., JavaScript and HTML, or C#, and
then package user-provided code together with an execution
engine into a native app. Many of those frameworks offer
plugins that provide commonly used functionality (e.g., in-
app browsers or advertisement) or even skeletons for entire
apps, which are provided by plugin developers. While these
frameworks assist in the creation of an app, they offer little
to no support for further phases of an app’s life cycle such
as app dissemination and distribution of patched versions. To
date, these unsupported tasks are typically performed by the
app developer. Prominent examples of standalone frameworks
are Xamarin, Apache Cordova, and PhoneGap.
B. Online Services
Online services or online application generators (OAGs)
enable app development using wizard-like, point-and-click
web interfaces in which developers only need to add and
suitably interconnect UI elements that represent application
components (e.g., email or login forms, in-app browser, QR
scanner, social networking widgets, etc.). There is no need
and typically also no option to write custom code. For some
of these components, they may even provide the necessary
infrastructure such as user management, user login, and data
submission to back-end servers maintained by the service
provider. These online service tools are thus accessible even
for laymen developers that lack any prior experience in app
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:30:14 UTC from IEEE Xplore.  Restrictions apply. 
development. Moreover, online services offer support for au-
tomatically distributing apps over popular channels such as
the Google Play Store. In addition to extensively supporting
core tasks of the software development life cycle, online ser-
vices provide business intelligence and analysis features such
as audience reports and dashboard for analytics. Prominent
examples of online services are Andromo and Biznessapps.
C. Developer-as-a-Service
Developer-as-a-Service does not even expect developers to
contribute to the technical development of an app. Instead,
the developer rather acts as a customer that orders the whole
app creation from a contracted app development service,
which then delegates the app creation to a team of app
developers that are expected to develop the application based
on a set of explicitly spelled out customer requirements.
Such requirements are typically collected over the phone or
via emails. Widely known examples are CrowdCompass and
QuickMobile, services specialized to create customized event
and conference apps.
III. ONLINE APP GENERATORS
This section presents a classiﬁcation of apps of commonly
used OAGs and an analysis of market penetration and charac-
terization of OAG-generated apps.
A. Classiﬁcation
We used Google search queries to identify a rich set of
common application generators. More concretely, we simu-
lated a user who is searching for an application generator using
search terms including but not limited to: “app maker android”,
“android generate app”, and “{business, free, diy, mobile}
(android) app {generator, creator, maker}”. For each result,
we selected the ﬁrst ﬁve entries after removing duplicates.
We also issued queries to online resources that offer technical
and popularity reviews of application generators such as Ap-
pindex1, Werockyourweb2, Quora3, and Businessnewsdaily4.
We excluded non-online-services and application generators
from our analysis, when we were not able to meaningfully
assess their market penetration, i.e., we could not determine
whether any available app was generated using these particular
application generators, see Section III-B.
We have classiﬁed all application generators along four
dimensions: freeware, multi-platform support, components,
and publishing, see the columns on “Classiﬁcation” in Table 1.
Freeware—Some application generators can be freely used
( ), while others require a monetary investment ( ).
Multi-platform support—While traditional app development
requires developers to write distinct apps for each mobile
iOS, and Windows Mobile, many
platform like Android,
1http://appindex.com/blog/app-builders-app-makers-list/
2http://www.werockyourweb.com/mobile-app-builder/
3https://www.quora.com/What-are-the-best-mobile-app-creators-for-non-
coders-both-free-and-paid
4http://www.businessnewsdaily.com/4901-best-app-makers-creators.html
application generators allow developers to develop for one
platform and then automatically generate “native” apps for
additional platforms ( ). We write ( ) if this multi-platform
functionality is not provided.
Components—Many application generators offer supplemen-
tary components for common tasks such as ads, app analytics,
crash reporting, and user management. We write ( ) if features
can be conveniently added via simple web forms, e.g. by
means of checkboxes; ( ) if users have to rely on visual
programming interfaces to add and remove features; and ( )
if supplementary components are not offered.
Publishing support—Conventional app development requires
developers to write code, compile, and sign an APK, and then
distribute it to their users. While writing code, compiling and
signing an APK is arguably a smooth process using dedicated
IDEs (e.g., Android Studio), app distribution usually requires
further manual effort: register a Google Play account (or
an account for an alternative market), upload the app, add
description text and publish. Some application generators offer
to automate this complete chain from producing and signing
an app to publishing it on one or multiple markets ( ) , while
others only automate parts of this support chain( ) or do not
offer support at all ( ).
B. Fingerprinting Application Generators
Once we established and classiﬁed our set of online ser-
vices, we aimed at quantifying the market penetration of the
individual application generators. To do this in a meaningful
manner without relying on bold marketing claims, we identify
the number of Android apps generated by the individual
application generators. To this end, we ﬁrst identiﬁed unique
features of application generators as ﬁngerprints, and then