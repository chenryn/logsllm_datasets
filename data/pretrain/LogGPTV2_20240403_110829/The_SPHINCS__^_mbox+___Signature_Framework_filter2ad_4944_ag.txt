– in contrast to the oracles discussed above – the adversary controls
all inputs as well as a description of the function (in case of ROs, the
description would be the publicly available code of the hash function
used to instantiate it). Consequently, adversaries (and reductions)
have to be granted quantum access to these oracles. Formally, this
means that for the case of an RO F, executions of the unitaries
describing the adversary are interleaved with executions of an or-
x ,y αx ,y|x⟩|y ⊕ f (x)⟩ , i.e.,
the adversary is described by a sequence of unitaries U0, . . . , Uq
and executed as UqOf Uq−1Of . . . Of U0|0⟩ . For more details on
the QROM see the original paper [13]. In addition to introducing
the QROM, the authors of [13] also showed that history-free ROM
reductions imply a reduction in the QROM. The observation made
there is that if the reduction finishes all possibly necessary manip-
ulations of the RO before the adversary is executed, the RO can
efficiently be simulated.
Post-quantum EU-CMA security. The standard security notion
for digital signature schemes is existential unforgeability under
adaptive chosen-message attacks (EU-CMA) [28]. The notion is
defined using the following experiment for signature scheme SIG.
In the experiment, the adversary A is given access to a signing
oracle Sign(sk, ·) which is initialized with the target secret key. The
q queries to Sign(sk, ·) are denoted {Mi}qs
1 . Following the reasoning
above, even quantum adversaries are limited to classical queries to
this oracle as it simulates an honest and hence classical user.
Experiment ExpEU-CMA
(A)
SIG
(sk, pk) ← kg()
(M⋆, σ ⋆) ← Asign(sk,·)(pk)
Return 1 iff vf(pk, M⋆, σ ⋆) = 1 and M⋆ (cid:60) {Mi}qs
1 .
Definition 24 (pq-eu-cma). Let SIG be a digital signature scheme.
We define the success probability of an adversary A against the
EU-CMA security of SIG as the probability that the above experi-
ment outputs 1: Succeu-cma
(A) = Pr(cid:2)ExpEU-CMA
x ,y αx ,y|x⟩|y⟩ →
(A) = 1(cid:3) .
SIG
SIG
2On a meta-level, another exception would be cryptographic primitives used to simu-
late idealized primitives in a reduction but that is not relevant for the work at hand.
We define the pq-eu-cma insecurity of a signature scheme SIG
against qs-query, time-ξ adversaries as the maximum advantage of
any possibly quantum adversary that runs in time ξ and makes no
more then qs queries to its signing oracle:
InSecpq-eu-cma (SIG; ξ , qs) = maxA(cid:8)Succeu-cma
(A)(cid:9) .
SIG
Post-quantum PRF security. In the following we give the defini-
tion for PRF security of a keyed function F : K × {0, 1}α → {0, 1}n.
In the definition of the PRF distinguishing advantage the adversary
A gets (classical) oracle access to either FK for a uniformly random
key K ∈ K or to a function G drawn from the uniform distribution
over the set G(α, n) of all functions with domain {0, 1}α and range
{0, 1}n. The goal of A is to distinguish both cases.
(cid:12)(cid:12)(cid:12)(cid:12) Pr
(cid:104)AFK = 1
Definition 25 (pq-prf). Let F be defined as above. We define the
PRF distinguishing advantage of an adversary A as
(cid:105)(cid:12)(cid:12)(cid:12)(cid:12) .
(cid:104)AG = 1
(A)(cid:9) .
q queries to its oracle: InSecpq-prf (F; ξ , q) = maxA(cid:8)Advprf
We define the pq-prf insecurity of a keyed function F against
q-query, time-ξ adversaries as the maximum advantage of any possi-
bly quantum adversary that runs in time ξ and makes no more then
G←R G(m,n)
(cid:105) −
K←R K
Advprf
F
(A) =
Pr
F
B HARDNESS OF PQ-MM-SPR AND
PQ-DM-SPR
In Definition 8 we defined dm-spr and explained the difference
with mm-spr. In Section 5 we discuss that the query complexity
of generic attacks against these two notions is the same. In the
following we formally prove this.
The following result on the hardness of mm-spr is shown in [33]:3
Lemma 26 ([33]). For any q-query quantum adversary A, it holds
that Succmm-sprHn
(A) ≤ 8(2q + 1)2/2n .
The proof follows a framework that starts with an average case
search problem. The problem makes use of the following distribu-
tion Dλ over boolean functions.
Definition 27 ([33]). Let F def
= { f : {0, 1}m → {0, 1}} be the col-
lection of all boolean functions on {0, 1}m. Let λ ∈ [0, 1] and ε > 0.
Define a family of distributions Dλ on F such that f ←R Dλ
satisfies
(cid:26) 1
0
f : x (cid:55)→
for any x ∈ {0, 1}m.
with prob. λ,
with prob. 1 − λ
Using this distribution we can define the average case search
problem Avg-Searchλ as the problem that given oracle access to
f ← Dλ, finds an x such that f (x) = 1. For any q-query quantum
algorithm A SuccAvg-Searchλ (A) := Prf ←Dλ[f (x) = 1 : x ←
Af (·)] . For this average case search problem the authors give a
quantum query bound.
Lemma 28 ([33]). For any quantum algorithm A with q queries it
holds that SuccAvg-Searchλ (A) ≤ 8λ(q + 1)2.
The reduction then generates the mm-spr challenge as described
in Figure 4.
3The bound stated in [33] actually was 16(q + 1)2/2n. This missed that the factor 2
overhead in queries also gets squared.
Session 9D: SignaturesCCS ’19, November 11–15, 2019, London, United Kingdom2143Given: f ← Dλ : [p] × {0, 1}α → {0, 1}, λ = 1/2n.
(1) For i = 1, . . . , p, sample xi ← {0, 1}α and yi ←
{0, 1}n independently and uniformly at random. De-
note S = {xi}p
1 .
: {0, 1}α → {0, 1}n\{yi} be
: {0, 1}α →
˜Hi
a random function. We construct
{0, 1}n as follows: for any x ∈ {0, 1}α
(2) For i = 1, . . . , p, let дi
 yi
yi
дi(x)
x (cid:55)→
if x = xi
if x (cid:44) xi ∧ f (i∥x) = 1
otherwise.
Output: mm-spr instance (S, { ˜Hi}p
i =1). Namely an adversary
is given xi and oracle access to ˜Hi, and the goal is to find
(i∗, x∗) such that x∗ (cid:44) xi∗ and ˜Hi∗(x∗) = ˜Hi∗(xi∗) = yi∗.
Figure 4: Reducing Avg-Search to mm-spr.
We will now show that the same bound applies for dm-spr:
Theorem 29. For any q-query quantum adversary A, it holds
that Succdm-sprH,p
(A) ≤ 8(2q + 1)2/2n .
The proof of Theorem 29 is a straightforward combination of
Lemma 28 and the following Lemma.
Lemma 30. Let Hn as defined above be a family of random func-
tions. Any quantum adversary A that solves dm-spr making q quan-
tum queries to Hn can be used to construct a quantum adversary
B that makes 2q queries to its oracle and solves Avg-Search 1
with
success probability
2n
SuccAvg-Search 1
2n (B) ≥ Succdm-sprH,p
(A) .
The reduction B generates function (family)
When A1 returns the target key set {Ki}q
Proof. In general the proof follows exactly the same reasoning,
as the mm-spr proof. For dm-spr things are in general slightly more
complicated when considering a random function family. The rea-
son is that we have to give both A2 and A1 oracle access to the
function family to select the target functions.
Hence, B has to simulate the full function family. Although we
are interested in query complexity, we decided to give a reduction B
that simulates the function family efficiently. The random functions
e0, e1, and д can be efficiently simulated using 2q-wise independent
hash functions as discussed in [33].
˜H as shown in
Figure 5. Then it runs A1 with ˜H as oracle.
1 , B completes the
dm-spr challenge adding e0(Ki) to each Ki. Then B runs A2 on
input {Ki , e0(Ki)}q
1 , again giving oracle access to ˜H. When A2
returns (j, x′), B outputs Kj ∥x′.
Per construction, f (Kj ∥X ′) = 1 whenever (j, X ′) is a valid
dm-spr solution. Moreover, the combined distribution of ˜H and
{Ki , e0(Ki)}q
1 is exactly that of a dm-spr challenge. Hence, B suc-
ceeds exactly with A’s success probability in the dm-spr game. B
makes twice the number of oracle queries as it has to uncompute
□
the oracle results after use.
C PROOF OF Theorem 11
The proof of Theorem 11 is a straightforward combination of
Lemma 28 and the following Lemma.
Given: f ← Dλ : K × {0, 1}α → {0, 1}, λ = 1
2n .
(1) Let e0 : K → {0, 1}α and e1 : K → {0, 1}n be two
random functions.
(2) Let д = {дK : {0, 1}α → {0, 1}n\{e1(K)} | K ∈ K}
be a family of random functions. We construct ˜HK :
{0, 1}α → {0, 1}n as follows: for any X ∈ {0, 1}α
if X = e0(K)
if X (cid:44) e0(K) ∧ f (K∥X) = 1
otherwise.
 e1(K)
e1(K)
дK(X)
x (cid:55)→
Output: Function family ˜H, e0, e1.
Figure 5: Reducing Avg-Search to dm-spr.
Lemma 31. Let Th be the tweakable hash function as given by
Construction 7. Any quantum adversary A that solves sm-tcr making
q quantum queries to Th can be used to construct a quantum adversary
B that makes 2q queries to its oracle and solves Avg-Search 1
with
success probability
2n
SuccAvg-Search 1
2n (B) ≥ Succsm-tcr
Th,p
(A) .
Proof. The proof follows exactly the same outline, as the previ-
ous proofs. For sm-tcr things are more complicated as we have an
initial challenge generation phase, interacting with A1.
However, the interaction with A1 is straight forward. For every
query(Mi ,Ti), B samples a random output MDi and stores the tuple
(Mi ,Ti , MDi) in a list. When A1 did all its p queries, B samples a
random P ←R P and generates(cid:102)Th as shown in Figure 6.
(1) For i = 1, . . . , p, let дi
Given: f ← Dλ : [p] × {0, 1}α → {0, 1}, λ = 1
{(Mi ,Ti , MDi)}p
1 .
(cid:102)Th : P × T × {0, 1}α → {0, 1}n as follows. On input
2n , P ∈ P,
: {0, 1}α → {0, 1}n\{MDi}
be a random function. Let h : P × T × {0, 1}α →
{0, 1}n be another random function. We construct
(P∗,T∗, M∗) ∈ P × T × {0, 1}α
(a) If T∗
if M∗
∗) (cid:55)→
∗
if M∗ (cid:44) Mi ∧ f (i∥M) = 1
otherwise.
 MDi
Output: Function family(cid:102)Th.
(b) If T∗ (cid:44) Ti ∨ P∗ (cid:44) P
= Ti ∧ P∗
∗
∗
,T
, M
∗)
∗) (cid:55)→ h(P
MDi
дi(M)
∗
(P
∗
(P
,T
, M
,T
, M
= Mi
= P
∗
Figure 6: Reducing Avg-Search to sm-tcr.
□
The construction essentially assigns a manipulated random func-
tion to every combination of P with a tweak used by A1 and a
uniformly random function to any other combination of public-
parameters and tweak. The manipulated random functions are
manipulated in essentially the same way as in Figure 4. When(cid:102)Th
Session 9D: SignaturesCCS ’19, November 11–15, 2019, London, United Kingdom2144is generated, B runs A2 on input ({(Ti , Mi)}p
access to(cid:102)Th. When A2 returns (j, M), B outputs j∥M.
solution. The distribution of(cid:102)Th and ({(Ti , Mi)}p
i =1 , P), giving oracle
Per construction, f (j∥M) = 1 whenever (j, M) is a valid sm-tcr
i =1 , P) is exactly
that of a sm-tcr challenge. Hence, B succeeds exactly with A’s
success probability in the sm-tcr game. B makes twice the number
of oracle queries as it has to uncompute the oracle results after use.
D PROOFS OF CLAIMS IN SECTION 4.2
(cid:12)(cid:12)(cid:12)SuccGAME.1 (A) − SuccGAME.0 (A)(cid:12)(cid:12)(cid:12) ≤ InSecpq-prf (PRF; ξ , q1) .
Claim 19.
Proof. For any forger A, the difference in success probability
between playing in GAME.0 and GAME.1 is bounded by the PRF in-
security of PRF, InSecpq-prf (PRF; ξ , q1), where q1 < 2h+1(kt +len)
is the number of PRF outputs used for one SPHINCS+ keypair. Oth-
erwise, we could use A to break the prf security of PRF with a
success probability greater InSecpq-prf (PRF; ξ , q1). For this, we re-
place PRF in GAME.0 by the oracle provided by the PRF game and
output 1 whenever A succeeds. The two cases to be distinguished
in the PRF game differ by the function implemented by the pro-
vided oracle. In one case, the oracle is the real function PRF keyed
with a random secret key. For A, replacing PRF with this oracle
is identical to GAME.0. In the other case, the oracle is a truly ran-
dom function. Replacing PRF with this oracle is exactly GAME.1.
Given that the addresses used to generate the secret key values of
WOTS+ and FORS are all distinct by construction, the outputs of
a random function on these addresses leads to independent, uni-
formly distributed random values. Consequently, the difference of
the probabilities that the reduction outputs one in either of the two
cases is exactly the difference of the success probabilities of A in
□
the two games.
(cid:12)(cid:12)(cid:12)SuccGAME.2 (A) − SuccGAME.1 (A)(cid:12)(cid:12)(cid:12) ≤ InSecpq-prf(cid:0)PRFmsg; ξ , qs
(cid:1) .