and program execution proceeds to other statements
in the user’s code.
4. Line 9 obfuscates the branch outcome. The ﬁrst
time the obfuscate() function returns, it stores 0
in r3, and control is transferred to the statement at
line 13, where the tx write() function call updates
the transaction buffer. Non-transactional memory
is updated only if this path corresponds to the real
path.
The second time the obfuscate() function returns,
it stores 1 in r3, and control is transferred to the
statement at line 11, again calling the tx write()
function to update the transaction buffer. Again,
non-transactional memory is updated only if this
path corresponds to the real path.
5 Security Evaluation
In this section, we ﬁrst demonstrate that the control-ﬂows
and data-ﬂows in obfuscated programs are correct and
that they are independent of the secret value. Then, us-
ing type-rules that track information ﬂows, we argue that
Raccoon’s own code does not leak secret information.
We then illustrate Raccoon’s defenses against termina-
tion channels by reasoning about exceptions in x86 pro-
cessors. Finally, we evaluate Raccoon’s ability to prevent
side-channel attacks via the /proc ﬁlesystem.
5.1 Security of Obfuscated Code
In this section, we argue that the obfuscated control-
ﬂows and data-ﬂows (1) preserve the original program’s
6The C99 standard states that any “any expression referring to [a
volatile object] shall be evaluated strictly according to the rules of the
abstract machine”, and the abstract machine is deﬁned in a manner that
considers that “issues of optimization are irrelevant”.
USENIX Association  
24th USENIX Security Symposium  437
7
dependences and (2) do not reveal any secret informa-
tion. We only describe scalar loads and stores, since
all array-loads and array-stores are obfuscated by simply
streaming over the array. To simplify the explanation,
the following arguments describe a top-level (i.e. a non-
nested) branch. The same arguments can be extended
to nested branches by maintaining a stack of transaction
buffers.
Correctness of Obfuscated Data-Flow. To ensure
correct data-ﬂow, Raccoon uses a combination of trans-
action buffers and non-transactional storage (i.e. main
memory). Raccoon sets up a fresh transaction buffer for
each thread that executes a new path. Figure 4 shows the
implementation of buffered load and store operations
for use with transactions. The store operations along
real paths write to both transaction buffers and non-
transactional storage (since threads cannot share data that
is stored in thread-local transaction buffers).
Consider a non-obfuscated program that stores a value
to a memory location m in line 10 and loads a value from
the same location in line 20. We now consider four pos-
sible arrangements of these two load and store oper-
ations in the obfuscated program, where each operation
may reside either inside or outside a transaction. Our
goal is to ensure that the load operation always reads
the correct value, whether the correct value resides in a
transactional buffer or in non-transactional storage.
• store outside transaction, load inside transac-
tion: This implies that there is no store operation
on m within the transaction. Thus, the transaction
buffer does not contain an entry for m, and the load
operation reads the value from the non-transactional
storage.
• store inside transaction, load inside transac-
tion: Since the transaction has previously written
to m, the transaction buffer contains an entry for m,
and the load operation fetches the value from the
transaction buffer.
• store inside transaction, load outside transac-
tion: This implies that the store operation must
lie along the real path. Real-path execution up-
dates non-transactional storage. Since load opera-
tions outside of transactions always fetch from non-
transactional storage, the load operation reads the
correct value of m.
• store outside transaction, load outside transac-
tion: Raccoon does not change load or store op-
erations that are located outside of the transactions.
Hence the non-obfuscated reaching deﬁnition re-
mains unperturbed.
Raccoon correctly obfuscates multi-threaded code as
well. In programs obfuscated by Raccoon, decoy paths
only update transactional buffers. Thus, only the store
operations on real path affect reaching deﬁnitions of the
obfuscated program. Furthermore, store (or load) op-
erations along real path immediately update (or fetch)
non-transactional storage and do not wait until the trans-
action execution ends. Thus, memory updates from
execution of real paths are immediately visible to all
threads, ensuring that inter-thread dependences are not
masked by transactional execution. Finally, all transac-
tional load and store operations use locks to ensure
that these accesses are atomic. Put together, load and
store operations on real paths are atomic and globally-
visible, whereas store operations on decoy paths are
only locally-visible and get discarded upon transaction
termination. We thus conclude that the obfuscated code
maintains correct data-ﬂows for both single- and multi-
threaded programs.
Concealing Obfuscated Data-Flow. Raccoon always
performs two store operations for every transactional
write operation, regardless of whether the write opera-
tion belongs to a real path or a decoy path. Moreover, by
leveraging the oblivious store operation, Raccoon hides
the speciﬁc value written to the transactional buffer or to
the non-transactional storage. Although the tx read()
function uses an if-statement, the predicate of the if-
statement is not secret, since an adversary can simply
inspect the code and differentiate between repeated and
ﬁrst-time memory accesses. Thus, we conclude that the
data-ﬂows exposed to the adversary do not leak secret
information.
Concealing Obfuscated Control-Flow. Raccoon con-
verts control ﬂow that depends on secret values into static
(i.e. deterministically repeatable) control-ﬂow that does
not depend on secret values. Given a conditional branch
instruction and two branch targets in the LLVM Inter-
mediate Representation (IR), Raccoon always forces ex-
ecution along the ﬁrst target and then the second target.
Thus, the sequence of executed branch targets depends
on the (static) encoding of the branch instruction and not
on the secret predicate.
5.2 Security of Obfuscation Code
Raccoon’s own code should never leak secret informa-
tion, so in this section, we demonstrate the security of the
secret information maintained by Raccoon. Because the
Raccoon code exposes only a handful of APIs (Table 1)
to user applications, we can perform a detailed analysis
of the code’s entry- and exit-points to ensure that these
438  24th USENIX Security Symposium 
USENIX Association
8
T-LOAD
lr(p) =L, A = pts(p),m = max
la(a)
a∈A
(cid:30)x = loadp;c,la,lr(cid:29) → (cid:30)c,la,lr[x (cid:27)→ m](cid:29)
T-STORE
T-BINOP (cid:30)v = binary-op(x,y);c,la,lr(cid:29) → (cid:30)c,la,lr[v (cid:27)→ max(lr(x),lr(y))](cid:29)
T-BRANCH
lr(p) =L, (cid:30)ct;c,la,lr(cid:29) → (cid:30)c,la(cid:26),lr(cid:26)(cid:29),(cid:30)c f ;c,la,lr(cid:29) → (cid:30)c,la(cid:26)(cid:26),lr(cid:26)(cid:26)(cid:29)
(cid:30)branch(p,ct ,c f );c,la,lr(cid:29) → (cid:30)c,M(la(cid:26),la(cid:26)(cid:26)),M(lr(cid:26),lr(cid:26)(cid:26))(cid:29)
T-SKIP (cid:30)v = skip;c,la,lr(cid:29) → (cid:30)c,la,lr(cid:29)
M(l(cid:26),l(cid:26)(cid:26)) =∀ x ∈ {K(l(cid:26)) ∪ K(l(cid:26)(cid:26))} (x, max(l(cid:26)(x),l(cid:26)(cid:26)(x)))
K(l) ={x | (x,s) ∈ l}
lr(p) = L,A = pts(p)
(cid:30)store(x, p);c,la,lr(cid:29) → (cid:30)c,(cid:31)a∈A
T-UNOP (cid:30)v = unary-op(x);c,la,lr(cid:29) → (cid:30)c,la,lr[v (cid:27)→ lr(x)](cid:29)
la[a (cid:27)→ max(la(a),lr(x)),lr](cid:29)
T-CMOV (cid:30)v = cmov(p,t, f );c,la,lr(cid:29) → (cid:30)c,la,lr[v (cid:27)→ L](cid:29)
T-SEQUENCE
(cid:30)c0,la,lr(cid:29) → (cid:30)c0(cid:26),la(cid:26),lr(cid:26)(cid:29)
(cid:30)c0;c1,la,lr(cid:29) → (cid:30)c0(cid:26);c1,la(cid:26),lr(cid:26)(cid:29)
Figure 6: Typing rules and supporting functions that check security of Raccoon’s code.
Category
Control-ﬂow
obfuscation.
Wrapper functions
for unsafe operations.
Registering stack and
array information.
Initialization and
clean-up functions.
Functions
obfuscate(),
epilog().
stream load(),
stream store(),
div wrapper().
reg memory(),
reg stack base().
init handler(),
exit handler().
-
-
Secret info.
Predicate value
Array index,
division operands.
coon passes the secret information through the declassi-
ﬁer (cmov) before executing a load, store, or branch
operation with a secret value. Due to its oblivious na-
ture, the cmov operation resets the security label of its
destination to L.
Table 1: Entry-points of Raccoon’s library.
interfaces never spill secret information outside of Rac-
coon’s own code.
Type System for Tracking Information Flows. Fig-
ure 6 shows a subset of the typing rules used for check-
ing the IR of Raccoon’s own code. These rules express
small-step semantics that track security labels. We as-
sume the existence of a functions lr : ν → γ and la : ∆ → γ
that map LLVM’s virtual registers (ν) and addresses (∆)
to security labels (γ), respectively. Security labels can be
of two types: L represents low-context (or public) infor-
mation, while H represents high-context (or secret) infor-
mation. Secret information listed in Table 1 is assigned
the H security label, while all other information is as-
signed the L security label. We also assume the existence
of a function pts : r → {∆} that returns the points-to set
for a given virtual register r.
Our goal is to ensure that Raccoon does not leak secret
information either through control-ﬂow (branch instruc-
tions) or data-ﬂow (load and store instructions). The
typing rules in Figure 6 verify that information labeled
as secret never appears as an address in a load or store
instruction and never appears as a predicate in a branch
instruction. Otherwise, the typing rules would result in
a stuck transition. To prevent information leaks, Rac-
Security Evaluation of the cmov Operation. The tiny
code size of the cmov operation (Figure 3) permits us to
thoroughly inspect each instruction for possible informa-
tion leaks. We use the Intel 64 Architecture Software De-
veloper’s Manual to understand the side-effects of each
instruction.
Since the code operates on the processor registers
only and never accesses memory, it operates within the
(trusted) boundary of the sealed processor chip. The se-
cret predicate is loaded into the %1 register. The mov in-
struction in line 4 initializes the destination register with
t val. The test instruction at line 5 checks if pred is
zero and updates the Zero ﬂag (ZF), Sign ﬂag (SF), and
the Parity ﬂag (PF) to reﬂect the comparison. The subse-
quent cmovz instruction copies f val into the destination
register only if pred is zero. At this point, ZF, SF, and PF
still contain the results of the comparison. The test in-
struction at line 7 overwrites these ﬂags by comparing
known non-secret values.
Since none of the instructions ever accesses mem-
ory, these instructions can never raise a General Pro-
tection Fault, Page Fault, Stack Exception Fault, Seg-
ment Not Present exception, or Alignment Check excep-
tion. None of these instructions uses the LOCK preﬁx, so
they will never generate an Invalid Opcode (#UD) excep-
tion. As per the Intel Software Developer’s Manual, the
above instructions cannot raise any other exception be-
sides the ones listed above. Through a manual analysis
of the descriptions of 253 performance events7 supported
7Intel 64 and IA-32 Architectures Software Developers Manual,
Section 19.5.
9
USENIX Association  
24th USENIX Security Symposium  439
by our target platform, we discovered that only two
performance events are directly relevant to the code in
Figure 3: PARTIAL RAT STALLS.FLAGS MERGE UOP and
UOPS RETIRED.ALL. The ﬁrst event (FLAGS MERGE UOP),
which counts the number of performance-sensitive ﬂags-
merging micro-operations, produces the same value for
our code, no matter whether the predicate is true or false.
The second event (UOPS RETIRED.ALL) counts the num-
ber of retired micro-operations. Since details of micro-
operation counts for x86 instructions are not publicly
available, we used an unofﬁcial source of instruction ta-
bles8 to verify that the micro-operation count for a cmov
instruction is independent of the instruction’s predicate.
We thus conclude that the code in Figure 3 does not leak
the secret predicate value.
Category
Arithmetic errors
Memory access
interrupts
Debugging interrupts
Privileged operations
Coprocessor (legacy)
interrupts
Other
Interrupt list
Division by zero, invalid operands,
overﬂow, underﬂow, inexact results.
Stack exception fault,
general protection fault, page fault.
Single-step, breakpoint.
Invalid TSS, segment not present.
No coprocessor, coprocessor overrun,
coprocessor error.
Non-maskable interrupt,
invalid opcode, double-fault abort.
Table 2: Categorized list of x86 hardware exceptions.
5.3 Termination Leaks
In Section 4.7, we explained how Raccoon patches divi-
sion operations and memory access instructions to pre-
vent the program from crashing along decoy paths. We
now explain why these patches are sufﬁcient in prevent-
ing the introduction of new termination leaks. Table 2
shows a categorized list of exception conditions arising
in Intel x86 processors9 that may terminate programs.
Among these interrupts, Raccoon transparently handles
arithmetic and memory access interrupts.
Debugging interrupts are irrelevant for the program
safety discussion because they do not cause the program
to terminate. Our threat model does not apply obfus-
cation to OS or kernel code. Since we do not expect
user programs to contain privileged instructions, Rac-
coon does not need to mask interrupts from privileged
operations. Coprocessor interrupts are relevant to Nu-
meric Processor eXtensions (NPX), which are no longer
used today. Non-maskable interrupts are not caused by
software events and thus need not be hidden by Rac-
coon. Branches in Raccoon always jump to the start of
valid basic blocks, so invalid opcodes can never occur in
an obfuscated version of a correct program. A double-
fault exception occurs when the processor encounters an
exception while invoking the handler for a previous ex-
ception. Aborts due to double-fault need not be hidden
by Raccoon because none of the primary exceptions in
an obfuscated program will leak secret information. In
conclusion, Raccoon prevents abnormal program termi-
nation, thus guaranteeing that Raccoon’s execution of de-
coy paths will never cause information leaks over the ter-
mination channel.
5.4 Defense Against Side-Channel Attacks
We have argued in Sections 5.1 and 5.2 that Raccoon
closes digital side-channels. We now show a concrete ex-
ample of a simple but powerful side-channel attack, and
we use basic machine-learning techniques to visually il-
lustrate Raccoon’s defense against this attack. We model
the adversary as a process that observes the instruction
pointer (IP) values of the victim process. Both the vic-
tim process and the adversary process run on the same
machine. The driver process starts the victim process
and immediately pauses the victim process by sending
a SIGSTOP signal. The driver process then starts the
adversary process and sends it the process ID of the
paused victim process. This adversary process polls
for the instruction pointer of the victim process every
5ms via the kstkeip ﬁeld in /proc/pid/stat. When
the victim process ﬁnishes execution, the driver pro-
cess sends a SIGINT signal to the adversary process,
signalling it to save its collection of instruction pointers
to a ﬁle. We run the victim programs with various se-
cret inputs and each run produces a (sampled) trace of
instruction pointers. Each such trace is labelled with the
name of the program and an identiﬁer for the secret in-
put. We collect 300 traces for each label. For the sake
of brevity, we show results for only three programs from
our benchmark suite.
The labelled traces are then passed through a Support
Vector Machine for k-fold cross-validation (we choose
k = 10) using LIBSVM v3.18. Using the prediction data,
we construct a confusion matrix for each program, which
conveys the accuracy of a classiﬁcation system by count-
ing the number of correctly-predicted and mis-predicted
values (see Figure 7). The confusion matrices show that
for the non-secure executions, the classiﬁer is able to la-
bel instruction pointer traces with high accuracy. By con-
trast, when using traces from obfuscated execution, the
classiﬁer’s accuracy is signiﬁcantly lower.
6 Performance Evaluation
8http://www.agner.org/optimize/instruction tables.pdf
9http://www.x86-64.org/documentation/abi.pdf