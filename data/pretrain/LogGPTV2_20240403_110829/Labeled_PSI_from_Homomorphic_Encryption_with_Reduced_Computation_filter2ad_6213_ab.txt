𝑛(log 𝑞)2) to the
noise of the input ciphertext.
To sum up, the most costly homomorphic operation both in
running time and in noise growth is non-scalar multiplication. We
therefore measure the runtime complexity of our algorithms in
terms of the number of non-scalar multiplications. We also measure
the depth of our circuits in relation to non-scalar multiplications. We
say, then, that one (sequential) non-scalar multiplication consumes
one multiplicative level.
Note that non-scalar multiplications can sometimes be replaced
by the Frobenius operation when computing ciphertext powers.
Since the Frobenius operation introduces only additive noise, we
say that the Frobenius operation consumes no multiplicative levels,
i.e., it is depth-free.
3 UNLABELED PSI
Our basic PSI protocol follows closely the frameworks of Chen et
al. [13, 14], which are based on ideas from [49].
Input. The receiver has an input set 𝑌 of size |𝑌|. The sender’s
input is a set 𝑋 of size |𝑋|. Both sets contain bit strings of length 𝜎.
The values of |𝑌|, |𝑋| and 𝜎 are public.
Output. The receiver outputs 𝑋 ∩ 𝑌.
Setup. The receiver and the sender agree on an SHE scheme with
the plaintext space being a finite field F. They also publicly choose
the number (typically three) of hash functions ℎ𝑖 : {0, 1}𝜎 → [𝑀],
where 𝑀 is a positive integer. Finally, they agree an OPRF function
𝐹k : 𝑋 ∪ 𝑌 → F.
The receiver generates the public and the secret keys of the
SHE scheme. The sender samples an OPRF key k and computes
𝑋 ′ := {𝐹k(𝑥) | 𝑥 ∈ 𝑋}. Then, both parties interact to apply the
OPRF to the receiver’s set, whereby the receiver obtains 𝑌 ′ :=
{𝐹k(𝑦) | 𝑦 ∈ 𝑌}. Now computing 𝑋 ∩ 𝑌 amounts to computing
𝑋 ′ ∩ 𝑌 ′.
We note that there are multiple benefits in using OPRF values
instead of the original items. Most importantly, it is necessary to
provide security against a malicious receiver, because homomorphic
encryption does not automatically provide input privacy for the
sender’s input. To address this issue, [14] used a noise flooding
technique to prove security against a semi-honest receiver, but
their approach does not extend to the malicious case. Another
reason is discussed more below in Section 3.1: using OPRF values
allows us to completely avoid costly extension field arithmetic.
Next, the receiver places each 𝑦 ∈ 𝑌 ′ into a cuckoo hash table 𝐵𝑅
with bin size 1. Specifically, it will construct a table 𝐵𝑅 such that no
bin in 𝐵𝑅 has more than one element, and for all 𝑦 ∈ 𝑌 ′ there is an
𝑖 such that 𝐵𝑅[ℎ𝑖(𝑦)] = 𝑦. The sender creates a cuckoo hash table
𝐵𝑆 with bin size potentially greater than 1. For all 𝑥 ∈ 𝑋 ′ and all
𝑖, the sender places 𝑥 into 𝐵𝑆 [ℎ𝑖(𝑥)], again, allowing for multiple
𝑥 per bin. It is shown in [14] that if |𝑋| ≫ 𝑀, then each bin of the
sender contains 𝑂(|𝑋|/𝑀) values with high probability. This setup
ensures that the intersection of 𝑋 ′ and 𝑌 ′ is equal to the union of
the respective bin intersections, namely,
𝐵𝑅[ 𝑗] ∩ 𝐵𝑆 [ 𝑗] =
{𝑦 𝑗} ∩ 𝐵𝑆 [ 𝑗],
𝑋 ′ ∩ 𝑌 ′ =


𝑗 ∈[𝑀]
𝑗 ∈[𝑀]
where 𝑦 𝑗 denotes the 𝑦 value at 𝐵𝑅[ 𝑗]. Both parties encode their
respective bins into the plaintext field F. The receiver encrypts all
its bins and sends them to the sender.
Intersection. Given the encryption(cid:74)𝑦 𝑗(cid:75) of the bin 𝐵𝑅[ 𝑗], the
sender computes the intersection polynomial

(1)
(cid:74)𝑧 𝑗(cid:75) := 𝑃((cid:74)𝑦 𝑗(cid:75)) =
((cid:74)𝑦 𝑗(cid:75) − 𝑥)
𝑥∈𝐵𝑆 [ 𝑗]
encrypts some non-zero value in F, depending on 𝑌 ′. This non-zero
value does not leak any information about 𝑌, due to the OPRF step.
If 𝑦 𝑗 ∈ 𝐵𝑆 [ 𝑗], then(cid:74)𝑧 𝑗(cid:75) is an encryption of zero. Otherwise,(cid:74)𝑧 𝑗(cid:75)
The sender sends(cid:74)𝑧 𝑗(cid:75) to the receiver, who decrypts it and checks
whether 𝑧 𝑗 = 0.
Security. As shown in [13], the OPRF step makes the above PSI
protocol secure against a malicious receiver and provides privacy
against a malicious sender in the random oracle model. Our protocol
differs from [13] in algorithmic aspects; the security guarantees
and the security proof remain the same as in [13], i.e., the protocol
guarantees security against a malicious receiver and privacy against
a malicious sender [30]. With a small extra computational overhead
the protocol can be upgraded to provide further protection against
a malicious sender, as is described in [13].
3.1 Optimizations
In this section we discuss various optimization techniques to make
the above protocol practical. Some of these (SIMD packing, parti-
tioning, and windowing) have been discussed in the past in [13, 14]
and remain essential to our protocol. We improve the SIMD pack-
ing technique to use only more efficient and flexible prime fields,
although this mainly presents challenges in the labeled case dis-
cussed below in Section 4. We utilize the Paterson-Stockmeyer
algorithm [47] to improve the computational complexity and en-
able new communication-computation trade-offs. We change the
Session 4C: Private Set Intersection CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1138windowing technique to use more efficient extremal postage-stamp
bases [10, 11], which reduces our communication cost significantly
in many cases. We show how many powers of the receiver’s input
can be computed with zero multiplicative depth, resulting in a vari-
ant of the protocol with extremely low communication cost. Finally,
we adapt the Elligator 2 [5] map for the FourQ elliptic curve [17]
for a fast hash-to-curve implementation, which is needed for the
OMGDH-based OPRF protocol.
Permutation-based hashing [49] can be applied immediately in
our work to reduce the item lengths by a few bits. But this technique
will have only a marginal performance impact compared to our
other techniques, so we do not include it this work.
SIMD packing. As discussed in Section 2.3, we can pack mul-
3.1.1
tiple data values into one ciphertext, such that these values can
be simultaneously processed with homomorphic operations. Us-
ing this method, the receiver can essentially treat the slots in a
ciphertext as bins of the cuckoo hash table 𝐵𝑅, and thus encode
multiple values 𝑦 𝑗 ∈ 𝑌 ′ in a single ciphertext. The sender can sub-
sequently compute several intersection circuits (eq. (1)) in parallel,
which results in a significant improvement in both computation
and communication cost.
In [13] the authors were able to support arbitrary-length items
by first hashing them down to a smaller domain and, using SIMD
packing with extension field values that are large enough to hold
the hash values. Unfortunately, extension field arithmetic can have
a devastating effect on performance; this effect is particularly promi-
nent in the labeled mode. Furthermore, the extension fields must
have certain size characteristics to be useful, which in some cases
leads to suboptimal parameter choices.
We observe that it is possible to not use extension fields at all,
and instead use SIMD packing only over prime fields. Since the
element hashes are larger than a single SIMD slot, we simply split
the hash values to occupy several sequential slots. This was not
possible in [13], because the authors considered the OPRF step as
optional: since the individual SIMD slot values are small, they can
be guessed, and even a semi-honest adversary can learn information
about partially matching items with non-negligible probability. This
problem is resolved by always performing the OPRF step, which
randomizes the items and protects the sender’s dataset from partial
item leakage. A few issues remain in the labeled case, which we
will discuss and resolve in Section 4.
3.1.2 Partitioning. To reduce the depth of computation, [14] pro-
posed to split every sender’s bin into 𝛼 subsets and then compute
intersection on each of these subsets separately. If 𝐵 is the maximal
size of a sender’s bin, then this method reduces the circuit depth
from ⌈log 𝐵⌉ to ⌈log ⌈𝐵/𝛼⌉⌉ at the cost of increasing the number of
ciphertexts sent by the sender to the receiver by a factor of 𝛼.
To compute the intersection polynomial 𝑃((cid:74)𝑦(cid:75)) of degree 𝐵, the
sender can first compute all the monomial powers(cid:74)𝑦(cid:75)2, . . . ,(cid:74)𝑦(cid:75)⌈𝐵/𝛼⌉
using ⌈𝐵/𝛼⌉ − 1 non-scalar multiplications. These powers can be
used repeatedly to compute the intersection circuits for each of the
𝛼 partitions. Another advantage of partitioning: after the monomial
powers have been computed once, they can be used for each parti-
tion, i.e., 𝛼 times, in relatively cheap scalar multiplication operations
to evaluate the intersection circuits.
3.1.3 Paterson-Stockmeyer algorithm. One issue with partitioning
is that in many situations it is advantageous to take 𝐵 to be relatively
large (say, in the few thousands), requiring ⌈𝐵/𝛼⌉ − 1 non-scalar
multiplications, while 𝛼 remains relatively small (say, 10). In such
a case the computational cost of the non-scalar multiplications
may dominate the online running time. We suggest applying the
Paterson-Stockmeyer algorithm [47] to compute the intersection
polynomial in O(√
𝐵) non-scalar multiplications instead. We now
𝐿 ≈ √︁2(𝐵 + 1). The sender starts by computing the low powers
explain how this works.
First, pick positive integers 𝐿 and 𝐻 such that 𝐵 = 𝐿𝐻 − 1 and
(cid:74)𝑦(cid:75)2,(cid:74)𝑦(cid:75)3, . . . ,(cid:74)𝑦(cid:75)𝐿−1 and the high powers(cid:74)𝑦(cid:75)𝐿,(cid:74)𝑦(cid:75)2𝐿,(cid:74)𝑦(cid:75)3𝐿, . . . ,
(cid:74)𝑦(cid:75)(𝐻−1)𝐿 of the receiver’s ciphertext(cid:74)𝑦(cid:75). Then the intersection
polynomial can be rewritten as
𝐻−1∑︁
𝑖=0(cid:74)𝑦(cid:75)𝑖𝐿
𝑃((cid:74)𝑦(cid:75)) =
𝐿−1∑︁
𝑗=0
𝑎𝑖𝐿+𝑗(cid:74)𝑦(cid:75)𝑗 ,
(2)
𝐿 − 2 + 2(𝐻 − 1) = 𝐿 + 2𝐻 − 4
where 𝑎𝑘 is the 𝑘-th coefficient of 𝑃. The internal sums can be
computed by scalar multiplications and additions from the low
powers. Non-scalar multiplications are only needed to multiply
these internal sums by the high powers. The total computation
complexity of computing 𝑃((cid:74)𝑦(cid:75)) is equal to
𝐵) is achieved when 𝐿 ≈√︁2(𝐵 + 1).
(3)
non-scalar multiplications. The minimal non-scalar complexity
O(√
In fact, Paterson and Stockmeyer designed a slightly faster al-
gorithm with the same asymptotic complexity. Unfortunately, it
cannot be directly exploited in our work as it relies on the fact
that the coefficient ring of an evaluated polynomial is a Euclidean
domain. The coefficients of 𝑃((cid:74)𝑦(cid:75)) are plaintexts from the ring 𝑅𝑡,
If the partitioning technique is used, then 𝑃((cid:74)𝑦(cid:75)) is replaced
by 𝛼 polynomials 𝑃𝑖((cid:74)𝑦(cid:75)), 𝑖 ∈ [𝛼] of degree ⌈𝐵/𝛼⌉. Select positive
integers 𝐿𝛼, 𝐻𝛼 such that ⌈𝐵/𝛼⌉ = 𝐿𝛼 𝐻𝛼 − 1. To evaluate each 𝑃𝑖,
the sender precomputes 𝐿𝛼 low powers and 𝐻𝛼 high powers and
computes each 𝑃𝑖 as in eq. (2). Multiplication by the high powers
is performed for each 𝑃𝑖, i.e., 𝛼(𝐻𝛼 − 1) times. It implies that the
non-scalar multiplicative complexity of evaluating every 𝑃𝑖 is equal
to
which is not Euclidean.
𝐿𝛼 − 2 + 𝐻𝛼 − 1 + 𝛼(𝐻𝛼 − 1) = 𝐿𝛼 + (𝛼 + 1)𝐻𝛼 − (𝛼 + 3).
achieved by taking 𝐿𝛼 ≈√︁(𝛼 + 1) (⌈𝐵/𝛼⌉ + 1).
Similar to eq. (3), the minimal non-scalar complexity O(√
(4)
𝐵) is
Example 1. Consider a bin of size 𝐵 = 81. Depending on the
number of partitions, 𝛼, we can compute the intersection either
with the Paterson-Stockmeyer method or with a naïve method, that
precomputes all the powers(cid:74)𝑦2(cid:75), . . . ,(cid:74)𝑦 ⌈𝐵/𝛼⌉(cid:75). When 𝛼 ≤ 5, the
Paterson-Stockmeyer method requires fewer non-scalar multiplica-
tions, as demonstrated in the following table:
𝛼
P.-S. mult.
Naïve mult.
1
23
80
2
18
40
3
16
26
4
14
20
5
14
16
6
15
13
7
16
11
Session 4C: Private Set Intersection CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1139+ 3
2 .
log(𝐵 + 1)
In Appendix A, we show how to identify from 𝛼 and 𝐵 whether
the Paterson-Stockmeyer method with partitioning outperforms
the naïve method.
3.1.4 Windowing. In modern leveled FHE schemes, encryption
parameters are set depending on the multiplicative depth of com-
putation: higher multiplicative depth requires larger parameters.
Unfortunately, larger parameters increase both the communication
and computation complexity.
The multiplicative depth of the Paterson-Stockmeyer algorithm
(as in eq. (2)) is equal to ⌈log((𝐻 − 1)𝐿 + 1)⌉ + 1, which is at most
one bigger than the depth of computing a polynomial of degree
𝐵 = 𝐿𝐻 − 1. To reduce the depth, the receiver can send encryptions
depth max{⌈log(𝐻 − 1)⌉ , ⌈log(𝐿 − 1)⌉}+1. Since the multiplicative
complexity is minimal when 𝐿 > 𝐻 (eq. (3)), the depth of computing
the intersection polynomial (2) is equal to
of additional precomputed powers of 𝑦. For example, if(cid:74)𝑦(cid:75) and
(cid:74)𝑦𝐿(cid:75) are given to the sender, it can compute eq. (2) with a circuit of
⌈log(𝐿 − 1)⌉ + 1 ≈ log√︁2(𝐵 + 1) + 1 =
Sending more additional powers reduces multiplicative depth.
𝑏 > 1, namely 𝐵 =⌊log𝑏 𝐵⌋
The windowing technique, as described in [14], relies on the fact
that any integer 𝐵 > 0 can be represented uniquely in some base
that 𝑦𝐵 =⌊log𝑏 𝐵⌋
𝐵𝑖𝑏𝑖 with 𝐵𝑖 ∈ [0, 𝑏 − 1]. This means
𝑖=0
𝑦𝐵𝑖𝑏𝑖 . If all the powers 𝑦𝑖𝑏 𝑗 with 𝑖 ∈ [𝑏 − 1]
and 𝑗 ∈ [0, ⌊log𝑏 𝐵⌋] are precomputed, then 𝑦𝐵 can be obtained by
a circuit of depth ⌈log(⌊log𝑏 𝐵⌋ + 1)⌉. As a result, the receiver can
send encryptions of these (𝑏 − 1)(⌊log𝑏 𝐵⌋ + 1) additional powers
such that the sender can compute all the powers(cid:74)𝑦(cid:75)2, . . . ,(cid:74)𝑦(cid:75)𝐵 with
the aforementioned depth.
In practice, it is convenient to fix a multiplicative depth 𝐷 and
derive 𝑏 from it. Since the function (𝑏−1)(⌊log𝑏 𝐵⌋+1) is increasing
with 𝑏, the smallest possible 𝑏 supporting depth 𝐷 results in the
minimal number of ciphertexts sent from the receiver to the sender.
𝐷 =(cid:6)log(cid:0)(cid:4)log𝑏 𝐵(cid:5) + 1(cid:1)(cid:7) ≥ log(cid:0)(cid:4)log𝑏 𝐵(cid:5) + 1(cid:1) .
Hence, we obtain 2𝐷 − 1 ≥(cid:4)log𝑏 𝐵(cid:5) > log𝑏 𝐵 − 1 and thus 2𝐷 >
(𝑏 − 1)(cid:0)(cid:4)log𝑏 𝐵(cid:5) + 1(cid:1) ≤ (𝑏 − 1)(cid:0)log𝑏 𝐵 + 1(cid:1)  𝐵2−𝐷 , or
𝑏 = ⌊𝐵2−𝐷 +1⌋. The number of powers that must be sent is therefore
bounded by
Let 𝐷 be the target depth. This means that 𝐷 should satisfy
𝑖=0
2
While using the Paterson-Stockmeyer algorithm, the sender
should compute low and high powers and then multiply linear
combinations of the low powers by the high powers as in eq. (2).
This means that to achieve a target depth 𝐷 while computing the
intersection polynomial, the sender should be able to compute both
sets of powers with depth at most 𝐷 − 1.3
Following the discussion above, we obtain that the receiver
should send (𝑏𝐿 − 1)(⌊log𝑏𝐿 (𝐿 − 1)⌋ + 1) encryptions of pow-
ers of 𝑦 for the sender to compute the low powers with the base
3The low powers need to be further scalar-multiplied by the polynomial coefficients,
which increases noise comparably to the non-scalar multiplications for some parame-
terizations. Thus, in some cases we require that high powers are compted with depth
𝐷 − 1 and low powers with depth 𝐷 − 2.
𝑏𝐿 = ⌊(𝐿 − 1)2−(𝐷−1) + 1⌋. To compute the high powers with the
same depth, the sender needs only (𝑏𝐻 − 1)(⌊log𝑏𝐻 (𝐻 − 1)⌋ + 1)
encryptions of powers of 𝑦𝐿 with the base 𝑏𝐻 = ⌊(𝐻 −1)2−(𝐷−1) +1⌋.
The upper bound on the number of powers that the receiver needs
to send is defined by the following lemma.
the multiplicative depth 𝐷 ≥ 0 using the Paterson-Stockmeyer method,
Lemma 2. To compute a polynomial 𝑃((cid:74)𝑦(cid:75)) of degree 𝐵 > 0 with
the sender needs fewer than 3(𝐵 + 1)2−𝐷 (2𝐷−1 + 1) powers of(cid:74)𝑦(cid:75).
The proof can be found in Appendix B.
3.1.5 Extremal postage-stamp bases. The windowing technique
of [14] described above is easy to use: the receiver always knows
exactly which powers to send. Unfortunately, it is far from optimal.
To demonstrate this point, consider a case where 𝐵 = 26. The user
could choose to encrypt and send powers {1, 2, 4, 8, 16} of their
query, which the sender can use to compute all powers up to 26 in a
depth-two computation, as illustrated by the first graph of Figure 1.
However, the second graph of Figure 1 demonstrates an alternative
computation, also of depth two, but with only three source pow-
ers: {1, 5, 8}. This immediately translates to a 40% reduction in the
receiver-to-sender communication.
More generally, we would like to answer the question: which
powers of the query should be sent so that the sender can compute
all powers of the query up to as large of a bound 𝐵 as possible,
without exceeding a target depth.
This problem can be viewed as a variant of the global postage-
stamp problem [10, 11]:
Definition 3 (Global postage-stamp problem). Given positive
integers ℎ and 𝑘, determine a set of 𝑘 positive integers 𝐴𝑘 = {𝑎1 =
1 < 𝑎2 < . . . < 𝑎𝑘} such that all integers 1, 2, . . . , 𝑛 can be written as
a sum of ℎ or fewer of the 𝑎 𝑗 , and 𝑛 is as large as possible. The set 𝐴𝑘
is called an extremal postage-stamp basis.
The connection to our problem is clear. In the notation of Defi-
nition 3, if the receiver sends encrypted powers {(cid:74)𝑦𝑎1(cid:75),(cid:74)𝑦𝑎2(cid:75), . . .,
(cid:74)𝑦𝑎𝑛(cid:75)} to the sender, then the sender can compute all powers up
to 𝐵 = 𝑛 in multiplicative depth ⌈log2 ℎ⌉. Concretely, consider the
powers {1, 5, 8} used in Figure 1. Upon receiving {(cid:74)𝑦(cid:75),(cid:74)𝑦5(cid:75),(cid:74)𝑦8(cid:75)},
the sender iterates (in order) over all integers up to 𝐵 = 26, and for
each power that it has not yet computed (or received), it chooses
a depth-optimal way of computing it as a product of two lower
powers. This is exactly how the graphs in Figure 1 were generated.
In fact, the basis {1, 5, 8} is a unique extremal postage-stamp basis
for ℎ = 4, 𝑘 = 3 [10].
No simple way of finding extremal postage-stamp bases is known,
nor is the complexity class of the global postage-stamp problem
known. Furthermore, extremal solutions are often unique (or almost
unique) and quickly become hard to find. Fortunately we only need
solutions for small instances of the problem, which have been brute-
forced and are presented in [11].
Extremal postage-stamp bases can be used in two ways with the
Paterson-Stockmeyer algorithm. Recall that in this case the sender
must compute all powers of the receiver’s query up to some positive
integer 𝐿 − 1, and all powers that are multiples of 𝐿 not exceeding
the bin size 𝐵.
Session 4C: Private Set Intersection CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1140Figure 1: Graphs depicting two possible ways for the sender to compute all powers up to 26 of the receiver’s query from a given
set of source powers. The two arrows pointing out from a node indicate which lower powers need to be multiplied together to
produce the power indicated in the node label.
Naturally, an extremal postage-stamp basis with 𝑛 = 𝐿−1 can be
used to achieve the first goal. For enabling the sender to compute as
many powers of 𝐿 as possible from as few source powers as possible,
the receiver can apply a (possibly different) extremal postage-stamp
basis, but this time multiply the exponents by 𝐿.
For example, consider again the extremal postage-stamp basis
{1, 5, 8} in Figure 1. This works great for Paterson-Stockmeyer,
when 𝐿−1 = 26. To use Paterson-Stockmeyer, we could additionally
send powers {𝐿, 5𝐿, 8𝐿} = {27, 135, 216}, which would allow the
server to compute polynomials up to degree 26𝐿 + 26 = 728 with a
depth 3 circuit.