some order, where the order is given by non-deterministic
choices. The encoding of the static gates is straightforward.
PANDs are non-inclusive (simultaneous failures do not occur),
FDEPs propagate their failures of the triggers to the dependent
elements. Both triggers as well as dependent elements can
be subtrees. Dependent gates are resolved by extra internal
transitions which are alike extra BEs connected to an OR-gate,
as discussed in III-C. SPAREs have independent subtrees as
spare modules. Nested SPAREs are allowed and follow the
late claiming regime with early failure mechanism. SEQs are
not included. Tool-support is given by DFTCalc [43], which
includes support for evidence by replacing BEs with constants.
F. Algebraic encoding
Gate failures are ordered, as synchronisation between the
elements is done via placing tokens, the effect of any element
This section is dedicated to a formalisation of DFTs by
an algebraic description, as described in [12], [44], [13].
308
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:23 UTC from IEEE Xplore.  Restrictions apply. 
TABLE III.
LIST OF CASE STUDIES AND POTENTIAL ISSUES.
Name
AHRS
B3
CAS
FTTP
FDS
HECS
MAS
MCS
NDWP
RC
SAP
SF
SSS
Source
Spare races
OFC
FSG
SEQs
Evidence
[49], [10]
[49], [1]
[9], [43], [6]
[47]
[48]
[1]
[22]
[2]
[10]
[50]
[51]
[52]
[20]









()






Similar efforts can be found in [45], [20] and [46]. However,
those formalisations do not include SPAREs and are therefore
excluded here. SFTs are trivially embedded into Boolean
algebra. In [12], the authors extend Boolean algebra with tem-
poral operators for before, inclusive before and simultaneous
to formalise “priority DFTs with repeated events”, in fact
SFTs with PANDs and FDEPs. “Repeated events” are used to
emphasise that the underlying graph is not necessarily a tree.
Although the formalisation method supports both inclusive and
exclusive PANDs, the authors choose the inclusive variant as
it “seems more coherent with the designers’ expectations”.
Failure propagation is immediate. Furthermore, each DFT is
given a canonical representation in the algebra which extends
MCSs with ordering information over all BEs, as well as a
scheme for deducing the top-level failure distribution given
fault distributions of the BEs. In [44], the authors use the
same algebra for SPAREs. The considered SPAREs only allow
BEs as children. It is assumed that the BEs do not occur
simultaneously, which excludes common cause failures in
SPAREs. Activation is realised by considering two events,
one with a warm and one with a hot failure rate thereby
explicitly excluding the occurrence of both failures. SEQs are
not included. Constant failures are not presented, although
present in the algebra.
V. DFTS: BENCHMARKS
So far we have discussed the several issues of DFTs on the
basis of small illustrative examples. The question rises whether
these phenomena also occur in realistic DFTs. To answer this
question (afﬁrmatively), we studied several DFT benchmarks
from the literature, see Table III. The spare race column marks
the benchmarks in which spare races occur and inﬂuence the
reliability of the DFT. In some other benchmarks, spare races
only occur after the DFT has failed. The OFC column lists
benchmarks in which ordered failure combination yields pos-
sibly wrong results—this also relates to inclusive vs. exclusive
priority gates. FSG indicates that only in the MCS benchmark,
the behaviour of failed spare gates is relevant. SEQs occur
in MAS and FTTP, and should have been included in SF
(see below). The column evidence indicates that including a
constant failure yields ambiguities. Evidences then give rise
to more issue in presence spare modules and (including vs.
excluding) priority gates.
A few remarks are in order. Most benchmarks, except
MAS and FTPP, were presented in the literature to show
the feasibility of some particular approach. These DFTs are
therefore often compact and have only a small static fragment.
However, with the current state-of-the-art, much larger DFTs
309
could be analysed. Our experience with industrial partners
indicate that most DFTs are indeed largely static, i.e. the vast
majority of gates is static, presumably even the vast majority
of subtrees. This is backed also by [46], [50], [24]. Most
DFTs accompanying DFT analysis tools do not match the
guidelines [2] for hierarchically constructed FTs—it seems
that many constructs are crafted to match the system, but
not following a hierarchical approach. Furthermore, SEQs
were only used in older versions of some DFTs to model
the spare management. With existing tool support for the
warm SPARE, SEQs are not present anymore. In the SF
benchmarks, the PANDs are (wrongly) used as SEQs. We
ﬁnally observe that (correct usage) of priority gates is mostly
used to model reconﬁguration. This applies to SSS, FDS, as
it gives more freedom than SPAREs. Without SPAREs, warm
spares modules can only be modelled via a combination of
extra basic events and SEQs, as e.g. in MAS.
that
In all benchmarks, the spare modules are BEs—none of the
benchmarks contains subtrees, or spares, as spare modules.
This is justiﬁed by the fact
the analysis support for
this has received scant attention so far. More succinct and
comprehensible DFTs for the HECS and AHRS benchmarks
could be obtained by relaxing the restriction on spare modules
being BEs. SPARE gates in general yield more compact DFTs,
e.g. the DFTs to FTTP and MAS were signiﬁcantly simpliﬁed
by exploiting SPARE gates.
VI. CONCLUSION
A detailed discussion of existing DFT features and their
possible (mis-)interpretations was presented. Problems of the
various DFT dialects were described, approaches for solving
these problems were suggested, and distinctive features with
respect to the variants’ syntactical and semantic aspects were
elaborated. The interplay between temporal and causal de-
pendencies makes DFTs complex and intricate to understand.
Classical concepts like cut sets are difﬁcult to generalise to
DFTs. The bottom line of this thorough investigation is that
despite their seeming simplicity, DFTs are complex objects.
Engineers should be aware of the various subtleties and
nuances of interpretation so as to interpret the DFT analysis
results in an appropriate way.
ACKNOWLEDGEMENT
This work has been partially supported by the STW-ProRail
partnership program ExploRail under the project ArRangeer
(12238), CDZ project CAP (GZ 1023), and the EU FP7 grant
agreement no. 318003 (TREsPASS). We thank Enno Ruijters
for the inspiring discussions and the anonymous reviewers for
their extensive feedback.
REFERENCES
[1]
J. B. Dugan, S. J. Bavuso, and M. A. Boyd, “Dynamic fault-tree models
for fault-tolerant computer systems,” IEEE Trans. Rel., vol. 41, no. 3,
pp. 363–377, 1992.
[2] W. Vesely and M. Stamatelatos, “Fault tree handbook with aerospace
applications,” NASA Headquarters, USA, Tech. Rep., 2002.
[3] E. Ruijters and M. Stoelinga, “Fault tree analysis: A survey of the state-
of-the-art in modeling, analysis and tools,” Computer Science Review,
vol. 15, pp. 29–62, 2015.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:23 UTC from IEEE Xplore.  Restrictions apply. 
[4] D. Coppit, K. J. Sullivan, and J. B. Dugan, “Formal semantics of models
for computational engineering: a case study on Dynamic Fault Trees,”
in Proc. of ISSRE.
IEEE Computer Society, 2000, pp. 270–282.
[5] H. Boudali and J. B. Dugan, “A continuous-time Bayesian network
reliability modeling and analysis framework,” IEEE Trans. Rel., vol. 55,
no. 1, pp. 86–97, 2006.
[6] S. Montani, L. Portinale, A. Bobbio, and D. Codetta-Raiteri, “Automat-
ically translating dynamic fault trees into dynamic Bayesian networks
by means of a software tool,” in Proc. of ARES, 2006, pp. 804–810.
[7] ——, “Radyban: A tool for reliability analysis of dynamic fault trees
through conversion into dynamic Bayesian networks,” Rel. Eng. & Sys.
Safety, vol. 93, no. 7, pp. 922–932, 2008.
[8] A. Bobbio and D. Codetta-Raiteri, “Parametric fault trees with dynamic
gates and repair boxes,” in Proc. of RAMS, 2004, pp. 459–465.
[9] D. Codetta-Raiteri, “The conversion of dynamic fault trees to stochastic
Petri nets, as a case of graph transformation,” in Proc. of PNGT, vol.
127, no. 2, 2005, pp. 45 – 60.
[10] H. Boudali, P. Crouzen, and M. Stoelinga, “A Compositional Semantics
for Dynamic Fault Trees in Terms of Interactive Markov Chains,” in
Proc. of ATVA, ser. LNCS, vol. 4762. Springer, 2007, pp. 441–456.
[11] ——, “A rigorous, compositional, and extensible framework for dy-
namic fault tree analysis,” IEEE Trans. Dependable Secure Computing,
vol. 7, no. 2, pp. 128–143, 2010.
[12] G. Merle, J.-M. Roussel, J.-J. Lesage, and A. Bobbio, “Probabilistic
algebraic analysis of fault trees with priority dynamic gates and repeated
events,” IEEE Trans. Rel., vol. 59, no. 1, pp. 250–261, 2010.
[13] G. Merle, J.-M. Roussel, and J.-J. Lesage, “Quantitative analysis of
trees based on the structure function,” Quality and
dynamic fault
Reliability Engineering International, vol. 30, no. 1, pp. 143–156, 2014.
[14] H. Boudali, P. Crouzen, and M. Stoelinga, “Dynamic fault tree analysis
IEEE
using input/output interactive Markov chains,” in Proc. of DSN.
Computer Society, 2007, pp. 708–717.
“Fault tree analysis (FTA),” Norm IEC 60050:2006, 2007.
[15]
[16] D. Codetta-Raiteri, “Integrating several formalisms in order to increase
fault trees’ modeling power,” Rel. Eng. & Sys. Safety, vol. 96, no. 5,
pp. 534 – 544, 2011.
[17] S. Contini, G. Cojazzi, and G. Renda, “On the use of non-coherent fault
trees in safety and security studies,” in Proc. of ESREL, vol. 93, no. 12.
Elsevier, 2008, pp. 1886 – 1895.
[18] T. Yuge and S. Yanagi, “Quantitative analysis of a fault tree with priority
AND gates,” Rel. Eng. & Sys. Safety, vol. 93, no. 11, pp. 1577–83, 2008.
J. Xiang, F. Machida, K. Tadano, K. Yanoo, W. Sun, and Y. Maeno, “A
static analysis of dynamic fault trees with priority-and gates,” in Proc.
of LADC.
IEEE Computer Society, 2013, pp. 58–67.
[19]
[20] M. Walker and Y. Papadopoulos, “A hierarchical method for the
reduction of temporal expressions in pandora,” in Proc. of DYADEM-
FTS. ACM Press, 2010, pp. 7–12.
[21] ——, “Qualitative temporal analysis: Towards a full implementation of
the fault tree handbook,” Control Engineering Practice, vol. 17, no. 10,
pp. 1115 – 1125, 2009.
[22] E. Edifor, M. Walker, and N. Gordon, “Quantiﬁcation of priority-or
gates in temporal fault trees,” in Proc. of SAFECOMP, ser. LNCS.
Springer, 2012, vol. 7612, pp. 99–110.
[23] S. Montani, L. Portinale, A. Bobbio, M. Varesio, and D. Codetta-Raiteri,
“A tool for automatically translating dynamic fault trees into dynamic
Bayesian networks,” in Proc. of RAMS, 2006, pp. 434–441.
[24] Z. Tang and J. B. Dugan, “Minimal cut set/sequence generation for
dynamic fault trees,” in Proc. of RAMS, Jan 2004, pp. 207–213.
[25] D. Liu, W. Xing, C. Zhang, R. Li, and H. Li, “Cut sequence set
generation for fault tree analysis,” in Embedded Software and Systems,
ser. LNCS. Springer, 2007, vol. 4523, pp. 592–603.
[26] T. Chu and G. Apostolakis, “Methods for probabilistic analysis of
noncoherent fault trees,” IEEE Trans. Rel., vol. R-29, no. 5, pp. 354–
360, 1980.
J. B. Dugan, S. J. Bavuso, and M. Boyd, “Fault trees and sequence
dependencies,” in Proc. of RAMS, 1990, pp. 286–293.
[27]
[28] H. Boudali, A. Nijmeijer, and M. Stoelinga, “DFTSim: A Simulation
Tool for Extended Dynamic Fault Trees,” in Proc. of ANSS, 2009, p. 31.
310
[29] F. Chiacchio, L. Compagno, D. D’Urso, G. Manno, and N. Trapani,
“An open-source application to model and solve dynamic fault tree of
real industrial systems,” in Proc. of SKIMA.
IEEE, 2011, pp. 1–8.
[30] R. Gulati and J. B. Dugan, “A modular approach for analyzing static
and dynamic fault trees,” in Reliability and Maintainability Symposium.
1997 Proceedings, Annual.
IEEE, 1997, pp. 57–63.
[31] S. Junges, D. Guck, J.-P. Katoen, A. Rensink, and M. Stoelinga, “Fault
trees on a diet - automated reduction by graph rewriting,” ser. LNCS,
vol. 9409. Springer, 2015, pp. 3–18.
[32]
J. Spivey, The Z Notation: A Reference Manual. Prentice Hall, 1992.
[33] K. Sullivan, J. B. Dugan, and D. Coppit, “The Galileo fault tree analysis
tool,” in Proc. of FTCS, 1999, pp. 232–235.
[34] R. Manian, D. W. Coppit, K. J. Sullivan, and J. B. Dugan, “Bridging
the gap between systems and dynamic fault tree models,” in Proc. of
RAMS, 1999, pp. 105–111.
J. Pearl, Probabilistic Reasoning in Intelligent Systems: Networks of
Plausible Inference. Morgan Kaufmann Publishers Inc., 1988.
[35]
[36] H. Boudali and J. B. Dugan, “A discrete-time Bayesian network
reliability modeling and analysis framework,” Rel. Eng. & Sys. Safety,
vol. 87, pp. 337–349, 2005.
[37] Z. Ghahramani, “Learning dynamic Bayesian networks,” in Adaptive
Proc. of Sequences and Data Structures. Springer, 1998, pp. 168–197.
[38] G. Chiola, C. Dutheillet, G. Franceschinis, and S. Haddad, “Stochastic
well-formed colored nets and symmetric modeling applications,” Trans.
Computing, vol. 42, no. 11, pp. 1343–1360, 1993.
[39] A. Bobbio, G. Franceschinis, R. Gaeta, and L. Portinale, “Parametric
fault tree for the dependability analysis of redundant systems and its
high-level Petri net semantics,” IEEE TSE, vol. 29, no. 3, pp. 270–287,
2003.
[40] M. A. Marsan, G. Balbo, G. Conte, S. Donatelli, and G. Franceschinis,
Modelling with Generalized Stochastic Petri Nets, 1st ed. Wiley, 1994.
[41] G. Balbo, “Introduction to generalized stochastic Petri nets,” in Formal
Springer, 2007, vol. 4486, pp.
Methods for Perf. Eval., ser. LNCS.
83–131.
[42] H. Hermanns, “Interactive Markov Chains: And the Quest for Quantiﬁed
Quality,” LNCS, 2002.
[43] F. Arnold, A. Belinfante, F. van der Berg, D. Guck, and M. Stoelinga,
“DFTCalc: A tool for efﬁcient fault tree analysis,” in Proc. of SAFE-
COMP, ser. LNCS. Springer, 2013, vol. 8153, pp. 293–301.
[44] G. Merle, J.-M. Roussel, J.-J. Lesage, and N. Vayatis, “Analytical
calculation of failure probabilities in dynamic fault trees including spare
gates,” in Proc. of ESREL, 2010, pp. 794–801.
[45] M. D. Walker, “Pandora: a logic for the qualitative analysis of temporal
fault trees,” Ph.D. dissertation, University of Hull, 2009.
[46] S. Schilling, “Beitrag zur dynamischen Fehlerbaumanalyse ohne Mod-
ulbildung und zustandsbasierte Erweiterungen,” Ph.D. dissertation, Uni-
versit¨at Wuppertal, 2009.
[47] H. Boudali and J. B. Dugan, “A new Bayesian network approach to
solve dynamic fault trees,” in Proc. of RAMS, 2005, pp. 451–456.
[48] H. Zhu, S. Zhou, J. B. Dugan, and K. Sullivan, “A benchmark for
quantitative fault tree reliability analysis,” in Proc. of RAMS, 2001, pp.
86–93.
[49] K. Vemuri, J. B. Dugan, and K. Sullivan, “Automatic synthesis of fault
trees for computer-based systems,” IEEE Trans. Rel., vol. 48, no. 4, pp.
394–402, 1999.
[50] D. Guck, J.-P. Katoen, M. Stoelinga, T. Luiten, and J. Romijn, “Smart
railroad maintenance engineering with stochastic model checking,” in
Proc. of RAILWAYS, ser. Civil-Comp Proceedings, vol. 104.
Civil-
Comp Press, 2014, p. 299.
[51] F. Chiacchio, L. Compagno, D. D’Urso, G. Manno, and N. Trapani,
“Dynamic fault trees resolution: A conscious trade-off between analyti-
cal and simulative approaches,” Rel. Eng. & Sys. Safety, vol. 96, no. 11,
pp. 1515 – 1526, 2011.
[52] M. Bozzano, R. Cavada, A. Cimatti, J.-P. Katoen, V. Y. Nguyen, T. Noll,
and X. Olive, “Formal veriﬁcation and validation of AADL models,”
in Proc. of ERTS, 2010.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:23 UTC from IEEE Xplore.  Restrictions apply.