title:Cache-Based Application Detection in the Cloud Using Machine Learning
author:Berk G&quot;ulmezoglu and
Thomas Eisenbarth and
Berk Sunar
Cache-Based Application Detection in the Cloud
Using Machine Learning
Berk Gulmezoglu, Thomas Eisenbarth, and Berk Sunar
Worcester Polytechnic Institute, Worcester, MA, USA
bgulmezoglu,teisenbarth,PI:EMAIL
Abstract. Cross-VM attacks have emerged as a major threat on com-
mercial clouds. These attacks commonly exploit hardware level leakages
on shared physical servers. A co-located machine can readily feel the pres-
ence of a co-located instance with a heavy computational load through
performance degradation due to contention on shared resources. Shared
cache architectures such as the last level cache (LLC) have become a
popular leakage source to mount cross-VM attack. By exploiting LLC
leakages, researchers have already shown that it is possible to recover
ﬁne grain information such as cryptographic keys from popular software
libraries. This makes it essential to verify implementations that handle
sensitive data across the many versions and numerous target platforms,
a task too complicated, error prone and costly to be handled by human
beings.
Here we propose a machine learning based technique to classify applica-
tions according to their cache access proﬁles. We show that with minimal
and simple manual processing steps feature vectors can be used to train
models using support vector machines to classify the applications with
a high degree of success. The proﬁling and training steps are completely
automated and do not require any inspection or study of the code to be
classiﬁed. In native execution, we achieve a successful classiﬁcation rate
as high as 98% (L1 cache) and 78% (LLC) over 40 benchmark applica-
tions in the Phoronix suite with mild training. In the cross-VM setting
on the noisy Amazon EC2 the success rate drops to 60% for a suite of 25
applications. With this initial study we demonstrate that it is possible
to train meaningful models to successfully predict applications running
in co-located instances.
Keywords: Cross-VM Attacks, Machine Learning, SVM, Prime&Probe.
1 Motivation
In the last decade the cloud infrastructure has matured to the point where
companies, government agencies, hospitals and schools alike have outsourced
their infrastructure to cloud service providers. The main beneﬁt of moving to
the cloud is the reduction of money spent on IT by pooling servers and storages in
bigger cloud services. In many cases, rented servers are instances shared through
2
virtualization among many users. Sharing is the basis for the reduction in the
IT costs. Despite the clear cost beneﬁt, given the vast amount of personal and
sensitive information kept on shared resources, rightfully security concerns have
been steadily growing among cloud customers.
Naturally, the cloud infrastructure has come under the scrutiny of security
researchers. The ﬁrst breakthrough result was reported by Ristenpart et al. [30]
who showed that it is possible to co-locate in a controlled manner with possi-
ble target instances on commercial public clouds, e.g. Amazon EC2. This work
opened the door to a series of investigations that examined the threats from an
attacker, i.e. a legitimate cloud user, exploiting cross VM leakage to steal sensi-
tive information. A number of methods have been proposed to steal private keys
or valuable information between VMs in IaaS and PaaS clouds [21,18,15,37,38].
In these works, the cryptographic keys and other sensitive information are stolen
by attacker by exploiting leakages at the microarchitectural level, i.e. through
the shared cache architecture. Especially, the shared last-level cache (LLC) is a
dangerous information leakage source in public clouds. IaaS instance allocation
policy commonly allocate an instance per core. This means that the LLC is a
shared resource among multiple user instances. Thus by timing his own LLC ac-
cess times, a user can gleam information on another user’s co-located instance’s
cache access behavior. LLC attacks proliferated to the point that the most recent
LLC Prime&Probe attacks do not depend on the de-duplication feature [19,24]
to be enabled to mount cross core cache attacks in public commercial clouds.
Cross-VM leakage attacks are extremely destructive in nature. They require
almost no privileges. Anyone can rent an instance on EC2 for a small fee and
run an attack code on an instance co-located typically with multiple target
instances out of potentially millions of targets. The attack code does only le-
gitimate accesses, e.g. collection of cache access times, for accesses in its own
memory/application space. Thus, Cross-VM attacks pose a great threat. Po-
tentially, one could automate the attack and mine the entire compute cloud
for cryptographic keys. There are practical diﬃculties in carrying out such at-
tacks on a mass scale. Cross-VM security attacks on public clouds require a
sophisticated methodology to extract the sensitive information from data. For
instance, the cache pattern is extracted and by using personal eﬀort the relation
between pattern and key is established [18]. This makes discovery of vulnerabili-
ties, a manual process, rather costly and time-consuming. Cryptographic library
designers experience a similar diﬃculty. Cryptographic libraries are constantly
patched for newly discovered leakages and emerging vulnerabilities. This in itself
is a painstaking process requiring careful inspection of the code for any potential
leakage for a target platform1. Software bugs may result in secondary leakages
confounding the problem further. Thus, in practice, even constant execution
ﬂow/time implementation may be compromised due to bugs.
With the growing complexity of cryptographic libraries, or more broadly of
code that handles sensitive data, it becomes impossible to manually verify the
1 A code that is considered secure on one platform, may not be on another due to
microarchitectural diﬀerences.
3
code for leakages across the numerous platforms exhaustively. Clearly, there is
a great need for automated veriﬁcation and testing of sensitive code against
leakages. Firstly, Brumley et al. [10] proposed vector quantization and HMM to
classify ECC ops with respect to L1-D cache. Then, an automated proﬁling at-
tack on LLC was introduced by Gruss et al. [13]. In this work, the access pattern
of diﬀerent events are ﬁrst extracted in a non-virtualized (less noisy) environ-
ment. The attacker learns the cache access templates from the cache. During an
attack the new data is compared against the learned templates. While this is
a worthy eﬀort, machine learning (ML) algorithms have advanced to the point
where they oﬀer sophisticated solutions to complicated recognition, classiﬁcation,
clustering, and regression problems. For instance, image and speech recognition,
sense extraction in text and speech [28], recommendation systems and search
engines, as well as malicious behavior detection [11]. Further, cryptographers re-
cently started to consider machine learning algorithms for side channel analysis,
[23,16].
In this work we take another step in this direction. We are motivated by the
need for automation in cross-VM leakage analysis. Our goal is to minimize the
need for human involvement in formulating an attack. While more sophisticated
techniques such as deep neural networks can solve more complicated problems,
they require signiﬁcantly more training data and take longer. Instead here we
focus on more traditional ML techniques for classiﬁcation. In particular, we are
interested in automating classiﬁcation of applications through their cache leak-
age proﬁles in the Cross-VM setting. A successful classiﬁcation technique would
not only compromise the privacy of a co-located user, but could also serve as
the initial discovery phase for a more advanced follow-up high precision attack
to extract sensitive information. To this end, in this work we ﬁrst proﬁle the
cache ﬁngerprints of representative benchmark applications, we then identify
the minimal processing steps required to extract robust features. We train these
features using support vector machines and report success rates across the stud-
ied benchmarks for experiments repeated for L1 and LLC. Finally, we take the
attack to AWS EC2 to solve a speciﬁc problem, i.e. we use the classiﬁcation
technique to show that it is possible to detect other co-located VMs. We achieve
this by sending ping requests to open ports by simultaneously monitoring LLC
on Amazon EC2. If the ping receiver code is detected running on the co-located
instance we infer co-location with the targeted IP.
Our Contribution
We present a study in automation of cache attacks in modern processors using
machine learning algorithms. In order to extract ﬁne grain information from
cache access patterns, we apply frequency transformation on data to extracted
ﬁngerprints to obtain features. To classify a suite of representative applications
we train a model using a support vector machine. This eliminates the need for
manually identifying patterns and crafting processing steps in the formulation of
the cache attack. In our experimental work, we classify the applications bundled
4
in the Phoronix Test Suite. Note that we do not have any information about the
content of the code and nor have we studied any internal execution patterns.
In summary, this work
– for the ﬁrst time implements machine learning algorithm, i.e. SVM, to proﬁle
the activity of other users on the cloud
– extracts the feature vectors from cache access data for diﬀerent types of
applications using a straightforward FFT computation,
– demonstrates that there is no need for synchronization between spy and
target to proﬁle an application while SVM based approach is implemented,
– shows that targeted co-location is achievable by sending ping requests on
Amazon EC2 if the targeted IP is known by spy
The rest of the study is divided as follows. We ﬁrst review the related work
and give the background knowledge in Section 2. The approach is presented in
Section 3. The experiment setup and results are explained in Section 4 and the
paper is concluded in Section 6
2 Background
In this section we give a brief overview of the related work in terms of cache
attacks and several implementations of machine learning techniques in diﬀerent
side channel analysis.
2.1 Related Work
Co-location detection techniques: In 2009, Ristenpart et al. [30] demon-
strated the possibility of the co-location between attacker and victim in public
IaaS clouds. After two years, Zhang et al. [36] detected the co-location by simply
monitoring the L2 cache if attacker and victim reside on the same core. In 2012,
Bates et al. [6] showed that if the network traﬃc is analyzed it is possible to
detect the co-location. In 2014, it is shown that deduplication enables the co-
location detection in Paas clouds by Zhang et al. [38]. Recently, Varadarajan et
al. [33] and Inci et al. [17] showed that the co-location detection is still possible
on Amazon EC2, Google Compute Engine and Microsoft Azure using memory
bus locking.
Cache Attacks: Cache attacks are widely used to extract information from
cryptographic libraries. In 2003, Tsunoo et al. [32] presented a cache attack
on DES using cryptanalysis. In 2004, AES cache attacks were ﬁrstly presented
by Bernstein [7] using microarchitectual timing diﬀerences for diﬀerent look-
up table positions in cache. In the same year, Osvik et al. [27] implemented
two new cache attacks (Evict+Reload and Prime&Probe) on AES. Both attacks
recovered the AES encryption key with diﬀerent number of encryption. After
it is shown that it is possible to recover AES encryption key the community
focused on analyzing the potential thread of cache attacks on both AES and
RSA.
5
In 2006, Bonneau et al. [8] implemented cache collision attacks in the last
round of AES. In 2007, the similar collision attacks are exploited by Acıicmez
et al. [3]. In the same year, Acıicmez et al. [4] the ﬁrst attack against RSA
was implemented by monitoring instruction cache accesses. In 2011, Gullasch et
al. [14] presented a new cache attack on AES namely, Flush and Reload.
With the increasing popularity of cloud computing systems, the attacks are
implemented on public clouds. In 2012, Zhang et al. [37] presented the ﬁrst cache
attack on cloud by recovering an ElGamal encryption key in the same core.
In 2013, the ﬁrst cross-core cache attacks are studied. Yarom et al. [34] used
the same technique in [14] to recover a full RSA key in LLC. In 2014, Irazoqui
et al. [22] recovered ﬁrst AES key among cross-VM scenario using Flush and
Reload. The Flush and Reload attack is also implemented in diﬀerent scenarios
such as on PaaS clouds and cache template attacks [38,13].
However, the Flush and Reload attack is applicable if deduplication is enabled
among VMs. It is known that deduplication is disabled on public clouds. In order
to overcome this diﬃculty, Liu et al. [24] and Irazoqui et al. [19] implemented a
new Prime&Probe attack in the LLC by using hugepages. Recently, Inci et al. [18]
showed the applicability of this attack by stealing 2048 bit RSA key on Amazon
EC2 cloud. At the same time, Oren et al. [26] implemented Prime&Probe attack
in javascript to monitor diﬀerent web browser scenarios.
Exploiting cache slice selection methods: In Intel processors there are two
types of slice selection methods. The ﬁrst one is the linear slice selection al-
gorithm where the same lines can be used to create eviction sets by simply
changing the set number. The recovering techniques for linear cache selection
was presented in Irazoqui et al. [20] and Maurice et al. [25] using the coincidence
of the functions across processors. Recently, Yarom et al. [35] recovered a 6 core
slice selection algorithm using the time diﬀerences of cache in diﬀerent cores.
Finally, 10-core Intel architecture is reverse engineered in [18] by creating many
lines and analyzing the possible algorithms.
Machine Learning Techniques on side channel analysis: Firstly, machine
learning techniques were applied to side channel analysis in 2011 by Lerman
et al. [23]. In this work, the relation between 3DES encryption and power con-
sumption was studied using dimensionality reduction and model selection. For
dimensionality reduction classical Principal Component Analysis (PCA) was im-
plemented and for model selection Self Organizing Map (SOM), Support Vector
Machine (SVM) and Random Forest (RF) techniques were compared. In the
same year, Hospodar et al. [16] applied Least Square Support Vector Machine
(LS-SVM) to extract information from power consumption of AES. In 2012,
Zhang et al. [37] implements SVM to classify multiplication, modular reduction
and square operations to extract the ElGamal decryption key. In this work, Hid-
den Markov Model (HMM) is applied to probably estimates of SVM to reduce
the noise and the success rate becomes higher.
6
2.2 Prime&Probe Technique
In the modern computer architecture, it is not possible for users to see the
physical address of a line because of the security issues. Therefore, the virtual
address is translated from the physical address and it is visible to users. In
virtual address the ﬁrst 12 bits are exactly same with the ﬁrst 12 bits of physical
address. However, this is not enough to ﬁnd the corresponding cache set for the
line in LLC. Thus, it is not possible to create an eviction set with regular 4KB
pages in LLC.
The Prime&Probe technique is the most widely applicable proﬁling technique
on the cloud since all major Cloud Service Providers (CSPs) have disabled dedu-
plication, making Flush and Reload attacks infeasible. To achieve an eviction set
in LLC the spy needs to know more than 12 bits of the physical line. If Huge
pages (2MB) are allocated by the spy, it is possible to know the ﬁrst 21 bits
of the line which is enough to know the corresponding set in LLC. After ﬁnd-
ing the eviction set for the desired set, the eviction can be implemented. The
Prime&Probe proﬁling is divided into three main stages:
1. Prime stage: This stage is used to create an eviction set. To create an
eviction set the spy generates distinct lines which reside on the monitored
set. The number of lines in the eviction set is equal to number of ways in the
monitored set. After all lines accessed by the spy the eviction set is ready.
2. Waiting stage: In this stage, the spy waits for the target to evict some lines
from the primed set. The waiting time is crucial to determine the resolution
of the proﬁling. While the time is increasing the frequency and resolution
are getting lower.
3. Probe stage: In the probe stage, the spy accesses the addresses used in the
prime stage. If the monitored set was not accessed by another process, no
data has been evicted; all accesses result in a cache hit, giving a low access
time. If another process has accessed the monitored set, its data must have
evicted at least one of the lines of the spy’s data. Hence, the probe access
will include accesses to memory, resulting in measurably higher access times.
In native and cloud environment experiments we used non-linear slice selec-
tion algorithm since EC2 Cloud uses 10 core non-linear slice selection algorithm.
In non-linear slice selection algorithm for each set the eviction set should be
created by implementing the algorithm. This makes the process harder because
to ﬁnd the eviction set for all sets in LLC by hand takes huge amount of time.
Therefore, the algorithm in [15] is implemented in 10 core machine to create
LLC eviction sets faster. The ratio of noisy sets should remain the same for
linear and non-linear slice selection algorithms. Hence, we believe the proposed
work is applicable to all Intel Ivy bridge processors.
2.3 Support Vector Machine (SVM)
SVM is a data classiﬁcation technique used in many areas such as speech recog-
nition, image recognition and so on [28,5]. The aim of SVM is to produce a model
based on the training data and give classiﬁcation results for testing data.
Firstly, SVM is built for binary classiﬁcation. For a training set of instance-
label pairs (xi, yi), i = 1, . . . , k where xi ∈ Rn and y ∈ {1,−1}k, SVM require
the solution of the following optimization problem: