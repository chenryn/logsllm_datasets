# Your Peripheral Has Planted Malware: An Exploit of NXP SOCs Vulnerability

## Authors
Yuwei ZHENG, Shaokun CAO, Yunding JIAN, Mingchuang QIN  
UnicornTeam, 360 Technology  
Presented at Defcon 26

## About Us
- **360 Technology**: A leading Internet security company in China, known for its anti-virus security software for PCs and cellphones.
- **UnicornTeam (https://unicorn.360.com/)**: Established in 2014, this group focuses on security issues in various wireless telecommunication systems.
- **Highlighted Works**:
  - Low-cost GPS spoofing research (DEFCON 23)
  - LTE redirection attack (DEFCON 24)
  - Attack on power line communication (Black Hat USA 2016)

## Agenda
- Motivation
- About Secure Boot
- Different Implementations of Secure Boot
- Secure Boot and Anti-Cloning
- Details of the Vulnerability
- Exploitation
- Countermeasures

## Motivation
- Investigate Secure Boot implementations in cost-constrained systems.
- Assess the anti-cloning strength of embedded SoCs.
- Explore a common method to inject malware into peripherals.

## About Secure Boot
### Public Key-Based Binary Signing and Verification
- **Signing**:
  1. Generate a key pair, K-priv and K-pub (Certificate).
  2. Calculate the binary image’s hash.
  3. Encrypt the hash with K-priv, resulting in the Signature.
  4. Attach the Certificate (K-pub) and Signature to the binary image.
- **Verification**:
  1. Calculate the binary image’s hash.
  2. Decrypt the Signature with K-pub (Certificate), obtaining the original Hash.
  3. If the two hashes match, the Signature is valid, indicating that the binary has not been illegally modified.

### Secure Boot Process
- **Primary Boot Loader (PBL)**: Verifies and loads the secondary boot loader (SBL).
- **Secondary Boot Loader (SBL)**: Verifies and loads the OS kernel.
- **Operating System (OS)**: Verifies and loads drivers and applications.

### Use Cases for Secure Boot
- **Prevent Firmware Infection or Unauthorized Modifications**:
  - Example: Injecting malicious features into a 4G LTE modem ([1] Black Hat US 2014, "Attacking Mobile Broadband Modems Like A Criminal Would").
  - Example: Modifying femtocell firmware to eavesdrop on cellular users ([2] DEFCON 23, "Hacking Femtocells").
- **Protect Intellectual Property of Product Manufacturers**.

## Different Implementations of Secure Boot
- **UEFI and Secure Boot**
- **Secure Boot in Smartphones**
- **Secure Boot in Non-TrustZone SOCs**

### Secure Boot in Non-TrustZone SOCs
- **Bootloader with In-Application Programming (IAP)**
- **Code Read Protection**

## The Underground Piracy Industry
- **One-Time Costs**:
  - Reverse PCB: $20 - $200
  - Crack Fuse: $200 - $5,000
- **Process**:
  - Reverse engineer the PCB and components.
  - Crack the fuse/OTP to read out the firmware.
  - Purchase the same components.
  - Reproduce the PCBA.
  - Batch clone target products.

### Unique ID with Secure Boot
- **Reverse Engineering Costs**:
  - Reverse PCB: $20 - $100
  - Crack Fuse: $200 - $5,000
  - Reverse Firmware and Patch: $5,000 - $50,000 (must be paid again when firmware is updated)
- **Bypassing Secure Boot Verification**:
  - **Patch**: Requires heavy reverse analysis work. Firmware code is strongly position-dependent, and patches will be replaced after firmware updates.
  - **Hook**: Easier in high-level OS. Changes the behavior of firmware without modifying it.

### Accessing the Unique ID
- **Normal Procedure**:
  - In NXP's Cortex-M3 and Cortex-M4 SoCs, a series of ROM API functions are exported, including the function for reading the Unique ID.
  - Code Snippet:
    ```c
    #define IAP_LOCATION *(volatile unsigned int *)(0x104000100);
    typedef void (*IAP)(unsigned int [], unsigned int[]);
    IAP iap_entry = (IAP)IAP_LOCATION;
    iap_entry(command, result);
    ```
  - To read the Unique ID, use `command = 58`.

### Hooking Functions in IoT Firmware
- **Cortex M3/M4 Remapping**:
  - Provides a way to remap an address to a new region of flash, allowing patching of the ROM API entry.

### Flash Patch and Breakpoint (FPB)
- **Functions**:
  1. Generate hardware breakpoints.
  2. Remap literal data or instructions to specified memory.
- **Registers**:
  - FP_COMP0 – 5: Used to replace instructions.
  - FP_COMP6 – 7: Used to replace literal data.
  - FP_CTRL: Flash Patch Control Register.
  - FP_REMAP: Flash Patch Remap Register.

### How FPB Works
- **Example**:
  - Normal execution: `r0 = 0x8000000, r4 = 0`.
  - With FPB enabled: `r1 = 0x10000, r4 = 0xffffffff`.

### Key Points for Using FPB
- The remap table must be aligned to 32 bytes.
- The remap table must be placed in SRAM range (0x20000000-0x30000000).
- Ensure the remap table is never replaced by placing it in the stack area and adjusting the stack pointer.

### Code Example (Replacing Literal Data)
```c
typedef struct {
    __IO uint32_t CTRL;
    __IO uint32_t REMAP;
    __IO uint32_t CODE_COMP[6];
    __IO uint32_t LIT_COMP[2];
} FPB_Type;

#define FPB ((FPB_Type *)0xE0002000)
#define FPB_DATA ((volatile int*)0x2000bfe0)
static const int data = -1;

void main() {
    FPB->REMAP = 0x2000bfe0;
    FPB->LIT_COMP[0] = (uint32_t)&data;
    FPB_DATA[6] = 0;
    FPB->CTRL = 0x00000003;
    printf("%d\n", data);
}
```

## Exploitation
### Exploitation I: Changing the Unique ID
- **Steps**:
  1. Patch the `__FPB_FUNC` and `FakeIAP` code to the blank area of the flash.
  2. Patch the ResetHandler to trigger the `__FPB_FUNC` function.
  3. Do not modify the Application area to keep the signature valid.

### Exploitation Code
- **Original Vector Table**:
  ```c
  __vector_table
  DCD     sfe(CSTACK)
  DCD     Reset_Handler
  DCD     NMI_Handler
  ...
  ```
- **Patched Vector Table**:
  ```c
  __vector_table
  DCD     sfe(CSTACK)
  DCD     __FPB_func
  DCD     NMI_Handler
  ...
  ```

- **Function**:
  ```c
  void _FPB_FUNC() {
      set_fpb_regs();
      GoToJumpAddress(Reset_Handler);
  }
  ```

- **Fake IAP Function**:
  ```c
  void fake_iap(unsigned int para, unsigned int *rp_value) {
      if (para[0] == 58) {
          rp_value[0] = 0; // success
          rp_value[1] = NEW_UID_0;
          rp_value[2] = NEW_UID_1;
          rp_value[3] = NEW_UID_3;
          rp_value[4] = NEW_UID_4;
      } else {
          IAP iap_entry = (IAP)(OLD_ENTRY);
          iap_entry(para, rp_value);
      }
      return;
  }
  ```

### Exploitation II: Injecting Hardware Trojan into J-Link Debugger
- **J-Link**: A powerful debug tool for ARM embedded software developers, with an USB port, making it a potential carrier for hardware Trojans.
- **Trojan Injection**:
  - J-Link-v10 uses an NXP LPC4322 chip, which is based on the Cortex-M4 core and is vulnerable.
  - The chip has 512K internal flash, with the lower 256K used by J-Link firmware, leaving enough space for the Trojan.

### Adding BadUSB to J-Link
- **Modification**:
  - Modify J-Link into a BadUSB gadget while keeping its normal functions unchanged.
  - **Trigger Mechanism**:
    - Two sets of firmware: J-Link application firmware and BadUSB Trojan firmware.
    - Ensure J-Link firmware runs normally most of the time.
    - Trigger the BadUSB Trojan by hooking the timer interrupt entry.

### Implementation Details
- **Fake Timer Handler**:
  - Check if the timer has reached the target value.
  - Set the attack flag and reset the chip.
  - Call the original TimerHandler.
  - Power up and jump to the ResetHandler of the J-Link bootloader.
  - Check if the attack flag is enabled.
  - Set FPB registers to hook ROM API and TimerInterruptHandler.
  - Jump to the BadUSB firmware and clear the attack flag.

## Vulnerability Mitigation Measures
- Do not leak your firmware.
- Disable the FPB before calling ROM API.
- Do not leave any blank flash area.
- Pad the firmware to set the blank flash area to specific values, such as 'jmp to reset'.
- Always verify the signature for the entire flash area.

## Affected Chips
- Almost all Cortex-M3 and Cortex-M4 chips from NXP, including LPC13XX, LPC15XX, LPC17XX, LPC18XX, LPC40XX, and LPC43XX series.
- Other vendors also have chips with UID features, but the UID cannot be replaced by programming FPB.

## Advice from PSIRT of NXP
- **Code Read Protection (CRP) Setting**:
  - Set CRP level to CRP3 to disable JTAG and ISP.
  - This disables firmware updates via JTAG or ISP, so design a secure IAP if you need to update firmware after product shipment.

## Countermeasure
- Avoid placing ROM APIs in address regions that can be remapped. SoC vendors should prohibit remapping of ROM APIs in future products.

## References
1. Andreas Lindh, "Attacking Mobile Broadband Modems Like A Criminal Would." [Link](https://www.blackhat.com/docs/us-14/materials/us-14-Lindh-Attacking-Mobile-Broadband-Modems-Like-A-Criminal-Would.pdf)
2. Yuwei Zheng, Haoqi Shan, "Build a Cellular Traffic Sniffer with Femtocell." [Link](https://media.defcon.org/DEF%20CON%2023/DEF%20CON%2023%20presentations/DEFCON-23-Yuwei-Zheng-Haoqi-Shan-Build-a-Free-Cellular-Traffic-Capture-Tool-with-a-VxWorks-Based-Femto.pdf)
3. LPC4300/LPC43S00 User Manual. [Link](https://www.nxp.com/docs/en/user-guide/UM10503.pdf)
4. Cortex M3 Technical Reference Manual. [Link](http://infocenter.arm.com/help/topic/com.arm.doc.ddi0337h/DDI0337H_cortex_m3_r2p0_trm.pdf)

Thank You!