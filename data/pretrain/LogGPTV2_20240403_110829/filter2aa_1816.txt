使用静态代码检测微服务越权、未授权访问漏洞 
作者：xsser 
背景 
现在的互联网很多都是来自阿里那一套，公司的整体的应用的架构都
是微服务，在微服务下基于 spring boot 之类的搭建了 一套开发体
系。在历史的发展下，微服务一般发展成这样的架构 
安全做为一个属性，需要深入契合这个框架。为什么要讲微服务呢？
因为有统一的框架，可以通过静态代码去一些事情。外购的系统，不
能接入到微服务里的，我们没办法拿到源代码，也自然无法做静态代
码的事情。 
难以解决的安全问题 
当今在越来越完善的 SDLC 安全建设之下，很多安全问题已经逐步变
少，例如 SQLI、RCE 等，企业的安全建设在研发安全方面已经逐步完
善，常见的 WEB 漏洞已经开始降低，但是有一种漏洞难以解决，且
是常见的 SRC 的高分漏洞，那就是越权漏洞。 
2 
使用静态代码工具的数据流来检测越权漏洞 
相比传统的静态代码检查工具，例如 sonar、pmd 等，现代的静态代
码检查工具多了一些比如数据流的能力，通过图结构的数据查询使得
发现安全漏洞成为了新的能力，传统的静态代码扫描工具仅仅是对代
码质量的检测，检查固定格式的代码。 
下面我就以 CodeQL 这个现代化的静态代码扫描工具来举例： 
首先。我们从业务角度去思考一个越权的特征： 
1) 请求包中的 GET 参数或者 POST 参数中带有”*Id”字样 
2) 未使用“用户微服务”对 request 的 id 解析 
3) 查询敏感数据或更新数据中的 SQL 语句和 id 等进行了拼接 
对这样的场景的抽象，我们就不难写出一个 QL。 
第 1 条很好理解，在 ql 里有一个来自 remoteFlowSource 的类可以满
足这个需求； 
第 2 条“没有使用用户微服务”是什么意思呢？其实就是当一个参数
传递进来并且没有数据流经过用户服务，换句话就是未使用用户服务
团队提供的 request 解析 api 进行解析(一般用户服务会提供一些 api
来解析 request 的登陆态，并返回这个 request 的 id 值)，这里既然没
雨用到用户服务的解析，自然就不会拿到 id； 
第 3 条是说这个应用有数据库查询功能，比如更新订单、查询订单的
敏感信息，也就是常见的 CURD。在这个查询中，一般会带一个条
件，就是“where id = ?”，这里的 id 就是从用户传递过来的对象中
拿到的，而非“用户服务”解析出来的； 
如何编写这样的 QL 呢？ 
首先我们肯定需要 dataflow 模块； 
然后我们需要 remoteflowSource； 
然后需要描述 remoteflowsource->用户服务这个这个数据流的关系； 
再然后我们需要描述 remoteflowsource->*query(“sql”+id)中的 id 和
remoteflowsource 之间的关系； 
3 
最后把上面的步骤通过 and 或者 or 组合起来就可以正确的表达了，
最后我简单的画个图来表达我的思路 
看到这里是不是觉得越权也可以实现，并不是很难？ 
其实只要用关系性图数据库查询就可以解决漏洞了，把越权抽象出
来，通过图语言去描述这个过程即可。 
使用静态代码工具的数据流来检测未授权访问漏洞 
看过上面的越权检测，相信这个未授权访问非常容易检测。 
首先抽象未授权访问的过程： 
1) 未使用了用户服务，例如@getLoginIdWithReq 
2) 使用了*query 的 jdbc 查询 
3) 查询的 sql 中包含 email、phone 等字段 
满足以上这样的抽象条件的接口可能不需要登陆就可以返回敏感信
息，导致信息泄露。 
所以我们的 QL 应该这样写： 
1. 用到 remoteflowsource 类； 
2. 查询那些没有@ getLoginIdWithReq 的方法； 
4 
3. 且方法里有各种 dao，dao 里有 sql 模板拼接 email 或 phone 或其
他敏感信息字段 
效果如何 
本人在抽空实践中成功实现了一个标准的微服务下的越权检测(通过
src 的漏洞)； 
朋友经过和我的讨论也实现了这个方法，在不精细的检测中实现了
8K 个随机接口挖到了 150 个越权； 
可能存在的坑 
数据流断开。我 一般使用 2 分法定位断开，不过现在 CodeQL 有更好
的测试方法了，网上也有人公开了其检测方法； 
缺乏 source、sink。这个就不说了 自己去发现和积累； 
常见的 不准确的静态代码扫描的坑。这个可以通过长期的反复复盘
积累一定的 isAddtionalStep 去手动链接断点，这个对 ql 语言熟悉程
度有较高的要求，在复杂对象结构下要精准描述，还要带上上下文去
描述，有的时候甚至多个 flow，会比较麻烦，还要精简 ql，否则规则
复杂会导致查询变慢 
缺点 
较长的查询时间。这个也是常见的静态代码扫描的问题，毕竟复杂的
表达式摆在那 
说说我是如何思考的 
其实我就是简单的去思考这个越权的过程，和其他漏洞的差异，无非
就是把这个业务的逻辑说清楚，那么整个逻辑图(图结构)就可以满足
描述这个过程，微服务下的越权有统一的框架，会用到用户服务，这
就让越权检测变得简单了。 
5 
其实我在这里想说，使用 iast 去检测越权也是一样的，只是 iast 需要
流量，套用刚才上面我思考的方法，通过 iast 的堆栈(可以理解成一
个单链的图)也是可以实现越权检测的，但是 iast 跨服务检测比较不
稳定