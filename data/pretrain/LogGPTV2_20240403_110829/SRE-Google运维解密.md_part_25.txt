<10
---
## Page 138
Borgmon 同时还为每个监控目标记录了一些自动生成的“合成指标”，以便区分以下几
Borgmon 能够自动将每个目标的收集工作均匀地分散在整个周期内。在多级Borgmon 的
Borgmon 按照配置规定的周期,定时抓取/varz URI。将得到的信息解码,存储在内存中。
用来自动校验Borgmon规则的正确性，注4从而很大程度上避免了这个问题。
96
践经验告诉我们这不是一个问题。注&整套监控系统已经可以很好地应对网络和物理服务器
文献[Mic03]）。利用HTTP协议收集监控信息好像和这个设计理念正好相反。但是，实
计中需要最简单的传输协议支持，保障在其他网络应用失败的时候也能正常工作（参见
很有趣的一点是，Varz体系和SNMP（简单网络监控协议）非常不同。SNMP协议在设
这些自动生成的监控指标，可以用在检测被监控任务不可用状态的规则编写中。
种情况：
配置中,这样做可以避免上游Borgmon总是在同一个时间间隔抓取下游Borgmon的信息。
可以降低监控系统的配置维护难度，允许监控系统自动扩展。
地址解析服务支持的格式。
首先，Borgmon实例的配置文件中配置了需要收集的目标列表，
注注注
注5
监控指标的收集
注4
8
言中的expvar标准库注6和它的JSON输出格式也提供了类似的API。
者可以随后对这个变量进行简单地增加操作，或者直接修改这个变量的值。Go语
编程语言都提供了一个编程接口可以自动注册暴露指定的程序变量。软件服务器作
Google内部产生的每个二进制文件中都默认包含一个HTTP服务，注5同时每种主流
很多非SRE团队（研发团队，
见第6章提到的针对现象和针对原因的报警
很多应用程序使用自定义协议来暴露内
）数据收集成功结束的时间点。
目标是否响应了一次健康检查请求。
目标是否响应了一次收集请求。
目标地址是否成功解析为IP和端口。
第10章基于时间序列数据进行有效报警
如何将内部变量暴露给监控系统
。注7这个目标列表通常是动态变化的，
Google很多软件项目并没有SRE参与）使用一个自动生成器来生成
部状态。
例如，
OpenLDAP使用cn=Monitor来暴露内部信息。
，所以一套服务发现体系
目标位置可以使用各种
---
## Page 139
注912小时这个神奇的数字既能保障在线排错时有足够的历史数据，也能避免内存占用量过大。
TSDB 获取历史数据。虽然TSDB 容量要比Borgmon 内存更便宜，也更大，但是查询速
Borgmon 会定时将内存状态归档至一个外部数据库（TSDB）。Borgmon可以通过查询
据，仅需17GB内存。
以存放100万个time-series，每个time-series 每分钟一个数据点，同时保存12小时的数
游的数据收集Borgmon，可以存放得更少。每一个数据点大概占用24字节的内存，所
和全局Borgmon中一般至少需要存放12小时左右的数据量，以便渲染图表使用。注9下
据地平线距离代表了在内存中存放了多久的历史数据可供查询。通常情况下，数据中心
内存中清除。time-series中最老和最新的数据间隔称之为数据地平线距离（horizon）。数
存放区（arena）。time-series存放区存满后，同时有一个垃圾回收器，将过期的数据从
在实际实现中，这个数据接口存放在一个固定大小的内存块中，我们称之为time-series
图10-1：从不同服务器上收集到的错误监控变量的存储形式
我们给time-series加上各种标签时，这个矩阵就变成多维矩阵了。
如图10-1所示，
series。同时，每个time-series链表用一组唯一的标签命名（name=value）。
类似（timestamp，value）的格式存储在一个按时间排序的链表里，该链表称为Time-
Borgmon将所有数据保存在一个内存数据库中，定时保存到硬盘上。这些数据都是以
Borgmon需要将所有收集到的信息统一整理存储，同时允许灵活地查询相关数据。
时间序列数据的存储
故障，同时Borgmon还允许开发者使用上文提到的合成监控指标写出更好的报警规则。
度会更慢。
一个服务通常由很多软件服务器组成，运行在分布于很多集群的物理服务器上。
"http_requests"
一个time-series链表实际上是一个单维数字矩阵，以时间为Y轴。
now-△t
now-2△t
now
0000000000
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0101
10
时间序列数据的存储
0
0
0
6
鼎
112
---
## Page 140
那么所有符合这个标签集合的time-series都会被查询出来，形成一个向量返回。举例说明，
当对time-series进行查询时，不一定要指定所有的标签。如果查询中指定了一个标签集合，
{var=http_requests,job=webserver,instance=hosto:80,service=web,zone=us-west}
这4条综合起来形成了一个完整的变量表达式（variable expression）：
zone
service
job
识一个time-series的标签必须同时有以下几个标签：
个分类，重要的标签会建有特殊索引，可加快查找速度）。在time-series 数据库中，标
在实现中，有一些标签被标记为重要的（important）标签（这里更多的是指代码中的一
的集合。其中一个标签是变量名称，也就是varz页面中显示的键名。
time-series的名字称为标签集合（labelset），因为它的实现方式就是一个标签（key=value）
var
图10-2:time-series示范数据
1s，还是10s，相邻的值的时间差是固定的。
这个数据结构时，忽略时间戳。因为序列中的每个值都是按照固定间隔插入的，不管是
中的多维矩阵中的某一列，或者是某一个对角线数值串。理论上来说，我们可以在描述
向量（vector）。就像线性代数中的向量一样，这些向量是一个存放在time-series存放区
正如图10-2的示范数据所示，time-series是按照时间戳和值的序列存放的，我们称之为
标签与向量
数据中心名称赋值）。
Google定义的一个惯例名称，代表收集该条信息的 Borgmon所在的位置（一般以
类
一个松散定义的软件服务器类型组名，可以按对外名称分类，也可以按对内名称分
被监控的软件服务器类型名。
代表变量名称。
oldest
第10章基于时间序列数据进行有效报警
2
2333 4 44555
mostrecent
---
## Page 141
注10这里为了节省空间，没有写出 service和zone标签，实际返回是有的。
产生报警信息。数据收集部分和存储部分都是为这个可编程计算器而服务的。
Borgmon从本质上来说，是一个可编程计算器，并且加入了一些语法糖，从而可以让它
Borg规则计算
标，那么应该每条记录获得10个数值点：注10
该条查询返回过去10分钟内，所有满足条件的time-series。如果每分钟收集一次监控指
{var=http_requests,job=webserver,service=web,zone=us-west}[10m]
series值：
同时，通过在变量表达式后面增加一个时间参数，可以查询一段时间内的全部time-
标签的来源有：
{var=http_requests,job=webserver,instance=host4:80,service=web,zone=us-west} 10
{var=http_requests,job=webserver,instance=host3:80,service=web,zone=us-west}
[var=http_requests,job=webserver,instance=host2:80,service=web,zone=us-west}
{var=http_requests,job=webserver,instance=hostl:80,service=web,zone=us-west}
{var=http_requests,job=webserver,instance=host0:80,service=web,zone=us-west}
查询结果将会是一个向量，其中包含了每个符合条件的time-series 的最后一个数值
{var=http_requests,job=webserver,service=web,zone=us-west}
如果在一个集群中，有超过一个任务实例，那么下面的查询会返回多个结果：
{var=http_requests,job=webserver,instance=host4:80,...} 01 2 3 4567 8 910
{var=http requests,job=webserver,instance=host1:80,
{var=http_requests,job=webserver,instance=host0:80,
Borgmon规则。
Borgmon配置文件，其中可以添加和替换标签。
监控目标自行提供，如提供的Map类型变量。
监控目标的名称，如job和 instance来源于任务名和实例地址。
1.}01234456789
Borg规则计算
11
9
10
114
---
## Page 142
115
译注3
注12
注11通过计算变化率的总和（sum of rates）而不是总和的变化率（rate of sums），可以防止结果受到实例
有请求的速率总和超过某个数值的时候，发出报警。
时候产生报警。具体来说，就是集群中所有实例的非HTTP200回复的速率总和除以所
举例来说，针对一个Web服务器，我们想在Web服务器返回错误回复超过一定比例的
计数器注Ⅱ的变化率的总和生来计算。
务的所有实例中的某个time-series相加。通过计算总数，我们就可以计算整体速率（rate）。
汇总计算（aggregation），是分布式环境中不可缺少的一环。汇总计算过程可以将一个任
Borgmon还提供了一系列内部规则计算的详细监控指标。
Borgmon的运行速度可以通过增加新的CPU资源而提高。为了帮助深入分析性能问题，
规则的输出。每个查询表达式的结果向量大小决定了这条规则的执行速度。一般来说
Borgmon 规则一般运行在一个线程池中，但是这受限于规则定义的输入是否包含前序
同时应用在很多个不同的time-series（空间维度）上。