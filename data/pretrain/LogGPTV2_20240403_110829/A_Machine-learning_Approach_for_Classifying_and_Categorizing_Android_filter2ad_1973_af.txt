SUSI in comparison to Merlin does not need any information
about the client program or application. It instead analyzes the
Android framework code alone to generate a list of categorized
sources and sinks. Furthermore, purely string-based approaches
ﬁt a web application scenario, while SuSi focuses on privacy-
related aspects of Android where data is usually not of type
string (e.g., the longitude and latitude information is of type
double).
Privacy violations through leaks of sensitive data in Android
applications are well known in the community. To protect the
user’s privacy, different kinds of taint-tracking approaches have
been proposed, both static [1]–[13] and dynamic [14], [15], [17].
As already described in Section I, such approaches are only
as good as the source and sink lists they are conﬁgured with.
In Section V-E we have shown that all approaches we have
evaluated only consider a few sensitive methods for sources and
sinks. With the support of our categorized list of sources and
sinks, we argue that all of them could be improved to detect
more data leaks that are a security problem for the mobile
device user.
More generic policy enforcement approaches such as
AppGuard [16] also require comprehensive lists of sensitive
information sources. AppGuard, for instance, provides the user
with the ability to revoke permissions after app-installation
time. The implementation inserts additional permission checks
into the application (not the framework). This requires the
identiﬁcation of relevant methods at the API level for which
such checks are required. Our list of sources and sinks includes
many methods that require permissions and access sensitive
information (e.g., phone identiﬁer, location information, etc.)
but are not considered by AppGuard (evaluated version 1.0.3).
Applying machine learning for security has already been
done for automatic spam detection [43] or anomaly detection
in network trafﬁc [44]). Sarma et al. [45] and Peng et al.
[46] successfully used various machine-learning approaches to
detect malicious Android applications. MAST [47] is a machine-
learning approach based on Multiple Correspondence Analysis
(MCA) for automatically identifying malicious applications
from various Android markets. The tool aims at ranking apps for
inspection by a human security analyst, thereby giving priority
to those applications that look suspicious. For classifying
sources and sinks, we use SMO instead of MCA since MCA
requires a logical ordering of records which is not applicable to
our scenario. SUSI instead works on discrete and independent
classes.
VIII. CONCLUSIONS
In this paper, we have shown that privacy-enhancing
technologies for Android are threatened by the fact that they
come with largely incomplete lists of sources and sinks of
13
private information, thereby allowing attackers to circumvent
their measures with ease. We have presented SUSI, a novel
automated machine-learning guided approach for identifying
sources and sinks in the Android framework and pre-installed
apps. The approach is capable of automatically categorizing
ﬁndings according to the type of data being processed, for
instance to distinguish between sources providing unique
identiﬁers and sources providing ﬁle data.
A ten-fold cross validation showed our approach to have an
average precision and recall of more than 92%. On Android 4.2,
SUSI ﬁnds hundreds of sources and sinks. A manual comparison
with existing hand-written (categorized) lists shows that, while
SUSI ﬁnds all sources and sinks of the existing lists it also
ﬁnds many more that were previously unknown, thus greatly
reducing the risk for analysis tools to miss privacy violations.
We showed that these previously missed sources and sinks
are already used in existing malware samples which are thus
not detected by state-of-the-art analysis tools. Furthermore, we
showed that current approaches based on permission checks
alone are inadequate as permission checks are, contrary to
popular belief, not a good indicator for a method’s relevance.
Additionally, we have shown that new versions of the Android
operating system come with new sources and sinks. While static
hand-crafted lists usually do not contain such methods, as the
manual effort for keeping the lists current is impractically high,
SUSI can automatically infer them whenever a new Android
version is released.
As future work, we aim to apply our approach to interfaces
for automatically ﬁnding and classifying sensitive callbacks.
We also want to further investigate how our approach can be
applied to other environments than Android, e.g., J2EE. We
are conﬁdent that the same concepts can also be applied to
identify sources and sinks in other procedural programming
languages such as C#, C++ or PHP.
Acknowledgements: We would like to thank Christian
Wirth of the Knowledge Engineering Group at TU Darmstadt
for his support in the ﬁeld of machine learning and for his
support with WEKA. Thanks to Damien Octeau for helping
us to identify sources and sinks used by TaintDroid. This
work was supported by a Google Faculty Research Award,
by the BMBF within EC SPRIDE, by the Hessian LOEWE
excellence initiative within CASED, and by the DFG within
the project RUNSECURE, which is associated with the DFG
priority program 1496 “Reliably Secure Software Systems -
RS3”.
REFERENCES
[1]
J. Hoffmann, M. Ussath, M. Spreitzenbarth, and T. Holz, “Slicing Droids:
Program Slicing for Smali Code,” in Proceedings of the 28th Symposium
On Applied Computing, ACM, Ed., 2013, pp. 0–0.
[2] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang, “Chex: statically vetting
android apps for component hijacking vulnerabilities,” in Proceedings of
the 2012 ACM conference on Computer and communications security,
ser. CCS ’12. New York, NY, USA: ACM, 2012, pp. 229–240.
[Online]. Available: http://doi.acm.org/10.1145/2382196.2382223
[3] Z. Yang and M. Yang, “Leakminer: Detect information leakage on
android with static taint analysis,” in Third World Congress on Software
Engineering (WCSE 2012), 2012, pp. 101–104.
[4] W. Enck, D. Octeau, P. McDaniel, and S. Chaudhuri, “A study
the 20th
Berkeley, CA,
of android application security,” in Proceedings of
USENIX conference on Security,
ser. SEC’11.
14
USA: USENIX Association, 2011, pp. 21–21. [Online]. Available:
http://dl.acm.org/citation.cfm?id=2028067.2028088
[6]
[5] A. P. Fuchs, A. Chaudhuri, and J. S. Foster, “Scandroid: Automated
security certiﬁcation of android applications,” Manuscript, Univ. of
Maryland, http://www. cs. umd. edu/˜ avik/projects/scandroidascaa, 2009.
J. Kim, Y. Yoon, K. Yi, and J. Shin, “ScanDal: Static analyzer for
detecting privacy leaks in android applications,” in MoST 2012: Mobile
Security Technologies 2012, H. Chen, L. Koved, and D. S. Wallach,
Eds. Los Alamitos, CA, USA: IEEE, May 2012. [Online]. Available:
http://ropas.snu.ac.kr/scandal/
[7] C. Gibler, J. Crussell, J. Erickson, and H. Chen, “Androidleaks:
automatically detecting potential privacy leaks in android applications
on a large scale,” in Proceedings of the 5th international conference
on Trust and Trustworthy Computing, ser. TRUST’12. Berlin,
Heidelberg: Springer-Verlag, 2012, pp. 291–307. [Online]. Available:
http://dx.doi.org/10.1007/978-3-642-30921-2 17
[8] L. Batyuk, M. Herpich, S. A. Camtepe, K. Raddatz, A.-D.
Schmidt, and S. Albayrak, “Using static analysis for automatic
assessment and mitigation of unwanted and malicious activities within
android applications,” in Proceedings of the 2011 6th International
Conference on Malicious and Unwanted Software, ser. MALWARE
’11. Washington, DC, USA: IEEE Computer Society, 2011, pp. 66–72.
[Online]. Available: http://dx.doi.org/10.1109/MALWARE.2011.6112328
[9] C. Mann and A. Starostin, “A framework for static detection of
privacy leaks in android applications,” in Proceedings of the 27th
Annual ACM Symposium on Applied Computing, ser. SAC ’12. New
York, NY, USA: ACM, 2012, pp. 1457–1462. [Online]. Available:
http://doi.acm.org/10.1145/2231936.2232009
[10] Z. Zhao and F. C. C. Osorio, “”trustdroid;”: Preventing the use of
smartphones for information leaking in corporate networks through the
used of static analysis taint tracking,” in MALWARE, 2012, pp. 135–143.
[11] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner, “Analyzing
inter-application communication in android,” in Proceedings of the 9th
international conference on Mobile systems, applications, and services,
ser. MobiSys ’11. New York, NY, USA: ACM, 2011, pp. 239–252.
[Online]. Available: http://doi.acm.org/10.1145/1999995.2000018
“Fortify
Apr.
solutions/software.html?compURI=1214365#.UW6CVKuAtfQ.
“Ibm
Apr.
01.ibm.com/software/de/rational/appscan/.
(sca),”
http://www8.hp.com/us/en/software-
http://www-
appscan,”
analyzer
rational
source
2013,
360
2013,
[12]
[13]
code
[14] W. Enck, P. Gilbert, B. gon Chun, L. P. Cox, J. Jung, P. McDaniel, and
A. Sheth, “Taintdroid: An information-ﬂow tracking system for realtime
privacy monitoring on smartphones,” in OSDI, 2010, pp. 393–407.
[15] R. Xu, H. Sa¨ıdi, and R. Anderson, “Aurasium: practical policy
enforcement for android applications,” in Proceedings of the 21st
USENIX conference on Security symposium, ser. Security’12. Berkeley,
CA, USA: USENIX Association, 2012, pp. 27–27. [Online]. Available:
http://dl.acm.org/citation.cfm?id=2362793.2362820
[17]
[16] M. Backes, S. Gerling, C. Hammer, M. Maffei, and P. von
Styp-Rekowsky, “Appguard: enforcing user requirements on android
apps,” in Proceedings of the 19th international conference on Tools
and Algorithms for the Construction and Analysis of Systems, ser.
TACAS’13. Berlin, Heidelberg: Springer-Verlag, 2013, pp. 543–548.
[Online]. Available: http://dx.doi.org/10.1007/978-3-642-36742-7 39
J. Jeon, K. K. Micinski, J. A. Vaughan, A. Fogel, N. Reddy, J. S. Foster,
and T. Millstein, “Dr. android and mr. hide: ﬁne-grained permissions in
android applications,” in Proceedings of the second ACM workshop on
Security and privacy in smartphones and mobile devices, ser. SPSM
’12. New York, NY, USA: ACM, 2012, pp. 3–14. [Online]. Available:
http://doi.acm.org/10.1145/2381934.2381938
“Google mirror
google-api-java-client/wiki/APIs#Google Mirror API.
“Google glass,” aug 2013, https://developers.google.com/glass/.
“Google cast,” aug 2013, https://developers.google.com/cast.
“Virus share,” aug 2013, http://virusshare.com/.
[19]
[20]
[21]
[22] K. W. Y. Au, Y. F. Zhou, Z. Huang, and D. Lie, “Pscout: analyzing the
android permission speciﬁcation,” in Proceedings of the 2012 ACM
conference on Computer and communications security, ser. CCS ’12.
https://code.google.com/p/
2013,
api,”
[18]
aug
New York, NY, USA: ACM, 2012, pp. 217–228. [Online]. Available:
http://doi.acm.org/10.1145/2382196.2382222
[23] A. Bartel, J. Klein, Y. Le Traon, and M. Monperrus, “Automatically
securing permission-based software by reducing the attack surface:
an application to android,” in Proceedings of the 27th IEEE/ACM
International Conference on Automated Software Engineering, ser. ASE
2012. New York, NY, USA: ACM, 2012, pp. 274–277. [Online].
Available: http://doi.acm.org/10.1145/2351676.2351722
[24] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner, “Android
permissions demystiﬁed,” in Proceedings of the 18th ACM conference
on Computer and communications security, ser. CCS ’11. New
York, NY, USA: ACM, 2011, pp. 627–638. [Online]. Available:
http://doi.acm.org/10.1145/2046707.2046779
J. C. Platt, “Advances in kernel methods,” B. Sch¨olkopf, C. J. C.
Burges, and A. J. Smola, Eds. Cambridge, MA, USA: MIT
Press, 1999, ch. Fast
training of support vector machines using
sequential minimal optimization, pp. 185–208. [Online]. Available:
http://dl.acm.org/citation.cfm?id=299094.299105
[25]
[26] M. Hall, E. Frank, G. Holmes, B. Pfahringer, P. Reutemann, and I. H.
Witten, “The weka data mining software: an update,” ACM SIGKDD
Explorations Newsletter, vol. 11, no. 1, pp. 10–18, 2009.
J. R. Quinlan, C4.5: programs for machine learning. San Francisco,
CA, USA: Morgan Kaufmann Publishers Inc., 1993.
[27]
[28] H. Zhang, “The Optimality of Naive Bayes.” in FLAIRS Conference,
V. Barr and Z. Markov, Eds. AAAI Press, 2004. [Online]. Available:
http://www.cs.unb.ca/profs/hzhang/publications/FLAIRS04ZhangH.pdf
[29] P. Lam, E. Bodden, O. Lhot´ak, and L. Hendren, “The soot framework
for java program analysis: a retrospective,” in Cetus Users and Compiler
Infastructure Workshop (CETUS 2011), 2011.
[30] R. Kohavi, “A study of cross-validation and bootstrap for accuracy
estimation and model selection.” Morgan Kaufmann, 1995, pp. 1137–
1143.
[31] Y. Zhou and X. Jiang, “Dissecting android malware: Characterization
and evolution,” in Proceedings of
the 2012 IEEE Symposium
on Security and Privacy, ser. SP ’12. Washington, DC, USA:
IEEE Computer Society, 2012, pp. 95–109.
[Online]. Available:
http://dx.doi.org/10.1109/SP.2012.16
[32] M. C. Grace, W. Zhou, X. Jiang, and A.-R. Sadeghi, “Unsafe exposure
analysis of mobile in-app advertisements,” in Proceedings of the ﬁfth
ACM conference on Security and Privacy in Wireless and Mobile
Networks, ser. WISEC ’12. New York, NY, USA: ACM, 2012, pp. 101–
112. [Online]. Available: http://doi.acm.org/10.1145/2185448.2185464
“The
2013,
https://developers.google.com/maps/documentation/business/geolocation/.
“Android
2013,
https://developer.android.com/sdk/api diff/9/changes.html.
geolocation
differences
report,”
google
maps
api,”
aug
[33]
[34]
api
aug
[35]
[36]
api
differences
“Android
aug
https://developer.android.com/sdk/api diff/17/changes.html.
“Android
aug
https://developer.android.com/sdk/api diff/18/changes.html.
differences
report,”
report,”
api
2013,
2013,
[38]
[39]
[37] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner, “Android
permissions demystiﬁed,” in Proceedings of the 18th ACM conference
on Computer and communications security, ser. CCS ’11. New
York, NY, USA: ACM, 2011, pp. 627–638. [Online]. Available:
http://doi.acm.org/10.1145/2046707.2046779
“Scandroid,” apr 2013, https://github.com/SCanDroid.
“A study of android application security - fortify rules,” Apr. 2013,
http://www.enck.org/tools/fsca rules-ﬁnal.xml.
“cyanogenmod,” Apr. 2013, http://www.cyanogenmod.org/.
[40]
[41] C. Fritz, S. Arzt, S. Rasthofer, and E. Bodden, “Flowdroid: Precise
context-, ﬂow-, object-sensitive and lifecycle-aware taint analysis for
android apps,” in Submitted to ACM CCS 2013.
[42] B. Livshits, A. V. Nori, S. K. Rajamani, and A. Banerjee, “Merlin:
Speciﬁcation inference for explicit
information ﬂow problems,”
SIGPLAN Not., vol. 44, no. 6, pp. 75–86, Jun. 2009. [Online]. Available:
http://doi.acm.org/10.1145/1543135.1542485
[43] K.-M. Schneider, “A comparison of event models for naive bayes
anti-spam e-mail ﬁltering,” in Proceedings of the tenth conference on
European chapter of the Association for Computational Linguistics -
Volume 1, ser. EACL ’03. Stroudsburg, PA, USA: Association for
Computational Linguistics, 2003, pp. 307–314. [Online]. Available:
http://dx.doi.org/10.3115/1067807.1067848
[44] A. A. Sebyala, T. Olukemi, L. Sacks, and D. L. Sacks, “Active platform
security through intrusion detection using naive bayesian network for
anomaly detection,” in In: Proceedings of London communications
symposium, 2002.
[45] B. P. Sarma, N. Li, C. Gates, R. Potharaju, C. Nita-Rotaru, and I. Molloy,
“Android permissions: a perspective combining risks and beneﬁts,” in
Proceedings of the 17th ACM symposium on Access Control Models and
Technologies, ser. SACMAT ’12. New York, NY, USA: ACM, 2012, pp.
13–22. [Online]. Available: http://doi.acm.org/10.1145/2295136.2295141
[46] H. Peng, C. Gates, B. Sarma, N. Li, Y. Qi, R. Potharaju, C. Nita-Rotaru,
and I. Molloy, “Using probabilistic generative models for ranking
risks of android apps,” in Proceedings of the 2012 ACM conference
on Computer and communications security, ser. CCS ’12. New
York, NY, USA: ACM, 2012, pp. 241–252. [Online]. Available:
http://doi.acm.org/10.1145/2382196.2382224
[47] S. Chakradeo, B. Reaves, P. Traynor, and W. Enck, “Mast: triage
for market-scale mobile malware analysis,” in Proceedings of the
sixth ACM conference on Security and privacy in wireless and mobile
networks, ser. WiSec ’13. New York, NY, USA: ACM, 2013, pp.
13–24. [Online]. Available: http://doi.acm.org/10.1145/2462096.2462100
15