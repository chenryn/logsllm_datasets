### Comparison of SUSI and Merlin

SUSI, in contrast to Merlin, does not require any information about the client program or application. Instead, it analyzes the Android framework code independently to generate a categorized list of sources and sinks. While purely string-based approaches are more suitable for web applications, SUSI focuses on privacy-related aspects of Android, where data is often not in string format (e.g., longitude and latitude information, which are typically double-precision floating-point numbers).

### Privacy Violations and Taint-Tracking Approaches

Privacy violations through the leakage of sensitive data in Android applications are well-documented. To protect user privacy, various taint-tracking approaches have been proposed, both static [1]–[13] and dynamic [14], [15], [17]. As discussed in Section I, the effectiveness of these approaches depends heavily on the quality of their source and sink lists. In Section V-E, we demonstrated that the evaluated approaches only consider a limited number of sensitive methods as sources and sinks. By utilizing our categorized list, these approaches could be enhanced to detect a broader range of data leaks, thereby improving security for mobile device users.

### Policy Enforcement and AppGuard

More generic policy enforcement approaches, such as AppGuard [16], also require comprehensive lists of sensitive information sources. For example, AppGuard allows users to revoke permissions after app installation by inserting additional permission checks into the application (not the framework). This requires identifying relevant API-level methods that need such checks. Our list includes many methods that access sensitive information (e.g., phone identifiers, location information) but are not considered by AppGuard (version 1.0.3).

### Machine Learning in Security

Machine learning has been applied to security for tasks like automatic spam detection [43] and anomaly detection in network traffic [44]. Sarma et al. [45] and Peng et al. [46] successfully used machine learning to detect malicious Android applications. MAST [47] is a machine-learning approach based on Multiple Correspondence Analysis (MCA) for automatically identifying malicious applications from various Android markets. MAST aims to prioritize suspicious apps for human security analysts. However, for classifying sources and sinks, we use Sequential Minimal Optimization (SMO) instead of MCA, as MCA requires a logical ordering of records, which is not applicable to our scenario. SUSI works with discrete and independent classes.

### Conclusions

In this paper, we highlighted that privacy-enhancing technologies for Android are compromised by incomplete lists of sources and sinks, allowing attackers to easily bypass their measures. We introduced SUSI, an automated machine-learning-guided approach for identifying and categorizing sources and sinks in the Android framework and pre-installed apps. SUSI can automatically categorize findings based on the type of data processed, distinguishing between sources providing unique identifiers and those providing file data.

A ten-fold cross-validation showed that our approach achieves an average precision and recall of over 92%. On Android 4.2, SUSI identifies hundreds of sources and sinks. A manual comparison with existing hand-written (categorized) lists revealed that while SUSI finds all the sources and sinks listed, it also discovers many previously unknown ones, significantly reducing the risk of missing privacy violations. We demonstrated that these previously missed sources and sinks are already exploited in existing malware samples, which current state-of-the-art analysis tools fail to detect. Additionally, we showed that approaches based solely on permission checks are inadequate, as permission checks are not a reliable indicator of a method's relevance. New versions of the Android operating system introduce new sources and sinks, which static hand-crafted lists often do not include due to the impracticality of manual updates. SUSI can automatically infer these new methods whenever a new Android version is released.

### Future Work

As future work, we aim to apply our approach to interfaces for automatically finding and classifying sensitive callbacks. We also plan to investigate how our approach can be applied to other environments, such as J2EE. We are confident that the same concepts can be applied to identify sources and sinks in other procedural programming languages, such as C#, C++, or PHP.

### Acknowledgements

We would like to thank Christian Wirth of the Knowledge Engineering Group at TU Darmstadt for his support in the field of machine learning and with WEKA. Thanks to Damien Octeau for helping us identify sources and sinks used by TaintDroid. This work was supported by a Google Faculty Research Award, by the BMBF within EC SPRIDE, by the Hessian LOEWE excellence initiative within CASED, and by the DFG within the project RUNSECURE, which is associated with the DFG priority program 1496 “Reliably Secure Software Systems - RS3”.

### References

[References remain unchanged as they are already well-structured and detailed.]