title:DEFInit: An Analysis of Exposed Android Init Routines
author:Yuede Ji and
Mohamed Elsabagh and
Ryan Johnson and
Angelos Stavrou
DEFInIt: An Analysis of Exposed Android Init Routines
Yuede Ji, University of North Texas; Mohamed Elsabagh, Ryan Johnson, and 
Angelos Stavrou, Kryptowire
https://www.usenix.org/conference/usenixsecurity21/presentation/ji
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.DEFINIT: An Analysis of Exposed Android Init Routines
Yuede Ji∗
PI:EMAIL
University of North Texas
Mohamed Elsabagh
PI:EMAIL
Kryptowire
Abstract
During the booting process of an Android device, a special
daemon called Init is launched by the kernel as the ﬁrst user-
space process. Android allows vendors to extend the behavior
of Init by introducing custom routines in .rc ﬁles. These Init
routines can also be triggered by privileged pre-installed apps
in a certain manner to accomplish privileged functionalities.
However, as these pre-installed apps may fail to properly pro-
tect access to code sites triggering these Init routines, the
capabilities of these routines may leak to unprivileged apps,
resulting in crossing security boundaries set by the system.
To this end, this study aims at investigating the prevalence
of these Init routines and their security impact. We present
DEFINIT as a tool to help automate the process of identifying
Init routines exposed by pre-installed apps and estimating
their potential security impact. Our ﬁndings are alarming. We
found that custom Init routines added by vendors were sub-
stantial and had signiﬁcant security impact. On a data set of
259 ﬁrmware from the top 21 vendors worldwide, we iden-
tiﬁed 1,947 exposed custom Init routines in 101 ﬁrmware
from 13 vendors. Of these routines, 515 performed at least
one sensitive action. We veriﬁed 89 instances spanning 30
ﬁrmware from 6 vendors, allowing unprivileged apps to per-
form sensitive functionalities without user interaction, includ-
ing disabling SELinux enforcement, snifﬁng network trafﬁc,
reading system logs, among others.
1 Introduction
Android is open source and freely available to vendors to
customize and port to different platforms. Owing to its open-
source nature, Android has dominated the global smartphone
market, holding more than 72% of the market share as of De-
cember 2020 [1]. The Android ecosystem is vast and versatile
in supporting various platforms such as TVs, wearables, info-
tainment systems, and IoT devices. Android is built on top of a
Ryan Johnson
Kryptowire
PI:EMAIL
Angelos Stavrou
PI:EMAIL
Kryptowire
modiﬁed Linux with several changes at the kernel and user lev-
els. Perhaps the most substantial of those is Android’s process
isolation and permission model: Android apps run in isolated
processes, receive private storage spaces on the ﬁlesystem,
can communicate using Android-speciﬁc secure inter-process
communication (IPC) mechanisms, and require permission
to access OS resources. This has also been the most studied
aspect of Android from a security perspective [2–12].
Less studied are Android changes to Linux that are not nec-
essarily visible to app developers and users. Few prior works
have looked at the security risks stemming from Android cus-
tomizations to boot loaders [13], kernel drivers [14], memory
management [15], and SELinux policies [13,16]. Other areas,
such as changes to user-space daemons, received little to no
attention. Of particular interest to us are changes made to
the “Init” process, the ﬁrst user-space process launched by
the kernel after booting. Similar to Linux, Init on Android
initializes the user space by mounting ﬁlesystems, initializ-
ing hardware, setting security policies, and loading essential
system components. Different from Linux though, Init on An-
droid is also the system property store where it keeps global
system properties (in the form of key-value pairs) set by Init
itself and other privileged Android processes.
More importantly, Android Init can execute custom rou-
tines in response to changing system properties. Android ven-
dors can introduce privileged apps and executables to support
certain vendor-speciﬁc hardware (e.g., sensors and custom
partitions) and introduce value-added software services (e.g.,
custom pin-locked storage for vendor apps). These custom
Init routines are deﬁned in .rc ﬁles in the form of what An-
droid Init calls “actions” and “services” using the Android
Init Language [17] and execute with higher privileges than
available to regular processes.1
Our work focuses on these vendor modiﬁcations to Init
and attempts to assess their prevalence and potential security
impact. Speciﬁcally, we are interested in studying security
threats stemming from privileged apps exposing access to
∗This work was done while the ﬁrst author was interning at Kryptowire.
1Unless otherwise stated, in the rest of this document we use the term
“Init routine” to collectively refer to Init actions and services.
USENIX Association
30th USENIX Security Symposium    3685
Init routines that perform sensitive functionality. To this end,
we propose an analysis system called DEFINIT to help us
systematically analyze Android ﬁrmware images, map out
the behaviors of custom Init routines, identify their necessary
trigger conditions, analyze the privileged apps triggering them,
and highlight sensitive routines exposed by privileged apps.2
We applied DEFINIT to 259 Android ﬁrmware from the
top 21 vendors worldwide containing a total of 64,632 pre-
installed apps and identiﬁed 1,947 exposed Init routines, all of
which were added by vendors. Of these routines, 515 perform
at least one sensitive action, impacting 101 ﬁrmware from
13 vendors. We further identiﬁed and veriﬁed 89 instances
spanning 30 ﬁrmware from 6 vendors, allowing unprivileged
apps to perform sensitive functionalities, such as disabling
SELinux enforcement, capturing network trafﬁc, reading sys-
tem logs, recording the device screen, among others. Our
ﬁndings highlight the signiﬁcant security risks posed by ven-
dor customizations to the Init process that are visible at the
application layer, an area that has been previously unexplored.
To summarize, we make the following contributions:
• Novel System. We propose DEFINIT, an automated
practical system to process Android ﬁrmware images
and identify Init routines, estimate their behavior, iden-
tify routines exposed by privileged apps, and highlight
interesting routines that potentially pose a security risk.
• Systematic Study. We present the ﬁrst comprehensive
study on vendor customization to Android Init routines
triggerable from privileged apps using a corpus of 259
ﬁrmware covering Android versions 8 to 11 from the top
21 vendors worldwide.
• New Findings. We provide new insights into the preva-
lence and security impact of customized Init routines and
highlight multiple concrete exploitable instances with
severe security and privacy impact to end users.
2 Background
2.1 Android Firmware Customization
We use the term Android ﬁrmware to refer to Android OS
images that can be ﬂashed to a device. An Android ﬁrmware
contains all ﬁles necessary for the device to operate, and
typically includes a bootloader, kernel, boot ﬁles, security
policies, OS ﬁles, and pre-installed apps bundled by the device
vendor. These ﬁles are packed as a set of partition blocks, and
the ﬁrmware itself is delivered as a compressed archive (the
exact ﬁle structure differs among vendors).
Android vendors customize their devices by including ad-
ditional hardware and software to differentiate themselves by
providing a unique, branded experience. The vendors take the
ofﬁcial version of Android from the Android Open Source
2DEFINIT stands for Detecting Exposed Functionalities from Init.
Project (AOSP) to make modiﬁcations and integrate their
code. These modiﬁcations often touch many parts of the sys-
tem, including boot ﬁles and OS components. It is possible
to identify the base AOSP version a ﬁrmware image was
forked from by inspecting the /build.prop ﬁle in a ﬁrmware
root ﬁlesystem. Once identiﬁed, one can identify vendor cus-
tomization by difﬁng ﬁles from a vendor ﬁrmware with their
counterparts, if present, in the ﬁrmware base AOSP image.
Vendors also often include apps from their partners, hard-
ware manufacturers, and carriers. Android apps are classi-
ﬁed by type and an app’s type limits the actions the app
can perform on the device. A third-party app is an app that
does not originate from the device vendor and is generally
directly installed by the user through an app marketplace. A
pre-installed app is an app that the vendor has included in
the device ﬁrmware. Pre-installed apps are often necessary
for proper system functionality. Pre-installed apps, by their
nature of being selected by the vendor, can obtain permissions
and capabilities that are not available to third-party apps. A
pre-installed app in this regard is considered privileged versus
third-party apps installed from the market.
2.2 Android Init
Like all Unix-like systems, Android has a special daemon
process named Init (short for initialization) that executes ﬁrst
in user space once the kernel has ﬁnished booting. The Init
process runs as root and acts as the progenitor to all other user
space processes. The Init process is responsible for starting
up the system, setting up directories and their permissions,
mounting partitions, initializing peripherals, and setting up
various system settings. On Android, the Init binary is located
at /init at the root ﬁlesystem.
Android Init, however, diverges from traditional Unix-like
systems in multiple ways. For instance, Init implements the
system property store where it provides global read access to
system properties to other processes (e.g., via the getprop
command) and provides privileged processes with write ac-
cess to system properties (e.g., via the setprop command).
Android Init also acts as the device event handler (e.g., when
the device is connected to USB).
Most importantly, device vendors can conﬁgure and extend
the behavior of Android Init by deﬁning custom Init routines
in Init Resource Files (.rc ﬁles for short) that Init loads at boot
time. These .rc ﬁles can be stored on different partitions, such
as /system and /vendor. Init starts by loading the /init.rc
ﬁle which further imports other .rc ﬁles. Init routines are
implemented in the form of “actions” and “services” written
in the Android Init Language [17]. An Android Init action is
a named sequence of internal Init commands. An Init service
speciﬁes an external program for Init to launch, and potentially
restart, with different runtime settings and security contexts.
Android Init can execute an Init routine at any point while
the system is running when its corresponding “trigger” is
3686    30th USENIX Security Symposium
USENIX Association
matched. A trigger is a conditional statement that starts with
“on” followed by a strictly conjunctive expression over Init
event names (called Event Triggers) or system property values
(called Property Triggers). Property Triggers use the word
"property:" followed by a property name and expected value
(e.g., "on property:service.adb.root=1"). Once the con-
ditions for a trigger are satisﬁed at runtime, the associated
actions for the trigger are executed.
Init recognizes several special property preﬁxes, includ-
ing "ro.*" for read-only properties, "persist.*" for prop-
erties that survive reboots, and "sys.usb.*" for device
USB attachment settings, among others. Init also recog-
nizes two custom properties, "ctl.start=" and
"ctl.stop=", that can be set by privileged apps to
directly start and stop Init services without necessarily need-
ing to satisfy their triggers.
Init property triggers use global system properties that
can only be set by privileged apps and processes using in-
ternal Android commands and APIs, such as android.os.
SystemProperties.set and setprop, that are not available
to third-party apps. In this regard, privileged apps can be
thought of as deputies as they can act on the request of an
unprivileged app and invoke an Init routine by setting system
properties. This can allow an unprivileged app to indirectly
launch a sensitive Init routine through an open interface in a
privileged app, resulting in crossing the security boundaries
set by the system as the capabilities of the exposed Init routine
are effectively leaked to the unprivileged app.
3 Threat Model and Assumptions
Our threat model assumes the users have installed an attacker-
controlled, third-party app on their devices. This attack app
will attempt to escalate its privileges by interacting with priv-
ileged pre-installed apps that have the capability to modify
system properties that start Init routines.
We assume the attack app will interact with a privileged
app by sending crafted inter-process communication (IPC)
messages to exported (i.e., callable by other apps) components
in the privileged app. This is a standard threat model speciﬁc
to the Android ecosystem where apps are sandboxed and pre-
installed apps can be granted permissions and capabilities
not available to third-party apps [2–8, 10–12]. These methods
allow the attack app to indirectly invoke code sites within
a privileged app that cause the setting of system properties,
launching an Init routine that performs a functionality that a
third-party cannot perform given its limited privileges.
We only consider pre-installed apps as the access vector to
Init routines. Analyzing other potential access vectors intro-
duced by vendors is outside the scope of this work. Finally, we
consider only Android versions 8.0 and higher since versions
prior to 8.0 no longer receive system updates nor security
patches as of this writing.
Figure 1: A simpliﬁed example based on a real-world case identiﬁed
by DEFINIT for disabling SELinux enforcement through an Init
service exposed by a pre-installed app.
4 Overview
4.1 Motivating Example
A real-world example of an exposed sensitive Init routine
detected by DEFINIT is shown in Figure 1, where an unprivi-
leged app disables SELinux policy enforcement on the device
for all processes by exploiting a privileged app invoking a
sensitive Init service. The ﬁgure shows the interactions be-
tween the attack third-party app, the privileged system app,
the Init process, and the shell script invoked by a custom Init
service to disable SELinux. A third-party attack app broad-
casts a message (called an Intent in the context of Android)
with an action of "wiﬁtest" in step 1 . The Intent is received
by an exported component in a privileged system app that
registered to receive that action. Once received, the privi-
leged app sets the system properties "a" to "1" and "b" to
"true" in step 2 . These two system properties trigger an Init
action (i.e., satisfy its conditions) that starts the wiﬁtest ser-
vice in step 3 . The wiﬁtest service in turn executes a shell
script /bin/wiﬁtest.sh, in step 4 , as the root user. Finally,
the script executes the setenforce 0 command that disables
the system-wide enforcement of Mandatory Access Control
(MAC) SELinux policies (the main defense mechanism An-
droid systems depend on to establish mandatory privilege
boundaries among processes).
4.2 Challenges and Key Insights
This study aims to identify potential security weaknesses
stemming from Init routines exposed to unprivileged apps.
We propose DEFINIT as a system that helps automatically
highlight these potential issues for an analyst. DEFINIT has
to handle multiple challenges concerned with processing Init
ﬁles, understanding the behaviors of Init routines and their
potential security impact, capturing dependencies and trigger
conditions, identifying privileged apps invoking these rou-
tines, and detecting sensitive routines exposed to unprivileged
actors. We discuss these challenges in the following.
USENIX Association
30th USENIX Security Symposium    3687
...setenforce0.../bin/wifitest.shvoid onReceive(...) {...setprop(“a”, “1”);setprop(“b”, “true”);...}System App (privileged)void exploit() {v0= new Intent(“wifitest”);sendBroadcast(v0);...}Attack App (unprivileged)Initon property:a=1 &&property:b=true...start wifitest...service wifitest/bin/wifitest.shuser root...1243C1: Processing Init ﬁles. While the Android Init Language
is documented at [17], Init itself loads and processes .rc ﬁles
dynamically in the presence of extra sources of information,
such as system properties preloaded at boot time. Init .rc ﬁles
can also reference Init sections deﬁned in other ﬁles (using an
import statement) and service deﬁnitions are polymorphic
(i.e., a service can override its parent deﬁnition by using an
override modiﬁer). Since DEFINIT is static, we needed to
implement a parser for .rc ﬁles that closely mimics the dy-
namism of Init. By studying the source code of Init, we found
that we can start parsing at the root /init.rc ﬁle and nest into
included ﬁles in depth-ﬁrst order to mimic the behavior of
Init. We discuss this in more detail in §5.1.
C2: Determining action and service behaviors.
Init rou-
tines can execute programs represented as Init commands,
ELF binaries, and shell scripts. DEFINIT needs to be able to
determine the behavior of these programs to identify which
routines perform security-relevant functionalities and the sen-
sitivity of these functionalities. While the behaviors of individ-
ual commands and standard Android APIs are documented,
the problem of automatically determining the behavior of ar-
bitrary programs is undecidable as it can be reduced to the
halting problem [18]. Nevertheless, the behavior of a pro-
gram can be estimated based on information present in the
executable program ﬁle that could indicate its behavior.
In DEFINIT, we estimate the behavior of routines by ex-
tracting code traces (including hardcoded parameter values)
from their binaries and estimating the behavior of these traces
using a compiled list of behaviors of potentially sensitive
commands and standard Android APIs. This process maps a
routine to a vector of behavioral categories, allowing an ana-
lyst to get an idea of its estimated general behavior. We also
used static rules in our evaluation to help highlight speciﬁc
behaviors by looking in the traces for certain call patterns. For
example, if an Init service calls a system command to dump
system logs to a ﬁle followed by a command that moves ﬁles
to external storage, then it can be estimated that the service
leaks the system logs to external storage. The speciﬁcs of
behavior estimation vary depending on the kind of program
executable being analyzed, which we detail out in §5.2.
C3: Modeling trigger conditions. There exist multiple in-
terdependencies between Init actions, services, and Android
commands and APIs. For instance, an action could start a
service that runs a program that itself starts another Init ser-
vice by setting an Init property to which a property trigger
is registered. Actions could also start multiple services and
commands. Trigger conditions can be composed of proper-
ties set by disjoint routines, making it difﬁcult to identify the
necessary trigger sequences to get Init to launch a certain
routine. Therefore, DEFINIT needs to capture these depen-
dencies (including transitive ones) to be able to reason about
the conditions necessary to trigger a certain behavior via Init
routines. To capture these interdependencies, DEFINIT builds
a graph that we refer to as Init Dependency Graph (IDG). In
an IDG, nodes represent Init triggers, Init services, and exe-
cutables called by routines. (An executable here can be an
Init command, a shell command, or an ELF binary.) Edges in
an IDG represent call edges between triggers, services, and
executables; and conjunction relationships between conjuncts
in a composite property trigger. Using an IDG, we can ef-
ﬁciently extract relationships between Init actions, services,
triggers, and the conditions necessary to execute a certain Init
action or service. We discuss IDGs in §5.3.
C4: Identifying exposed routines and behaviors. On
Android, Init properties can only be set by privileged
apps (including privileged native binaries) by using inter-
nal APIs, such as android.os.SystemProperties.set and
__system_property_set, that are not available to third-
party apps. Privileged apps here can be thought of as deputies
that control access to Init routines. Privileged apps that invoke
sensitive Init routines based on requests from unprivileged
apps can be subject to confused-deputy attacks where the
capabilities performed by Init leak to the unprivileged apps.
Identifying privileged apps invoking Init routines requires
identifying app call sites that invoke APIs setting system prop-
erties, and resolving the parameter values of these APIs to
identify the properties being set and their corresponding val-
ues at each call site. In DEFINIT, we developed a technique to
identify the property keys being read/written and the mapping
between each property key and its corresponding value in a
context- (i.e., taking the callee stacks at each relevant API call
site into consideration) and ﬂow-sensitive (i.e., taking state-
ments execution order into consideration) manner. We then
identify exposed routines by looking for control-ﬂow paths
from exported app entry points to relevant code sites. We tune
our analysis to avoid false positives from dynamic bytecode
constructs (e.g., virtual calls) at the expense of soundness (i.e.,
missing some valid ﬂows). More details are provided in §5.4.
5 Detailed Design
Figure 2 shows the workﬂow of DEFINIT. Given an An-
droid ﬁrmware image as input, DEFINIT unpacks it to extract
needed ﬁles. It then processes Init .rc ﬁles to identify custom
Init routines. We consider a service to be custom, i.e., a re-
sult of vendor modiﬁcation, if it references an executable that
was not present in the base AOSP image of the ﬁrmware. We
consider an action as custom if its trigger is not found in the
base AOSP image. DEFINIT then estimates the behavior of
these routines and assesses their security impact. Following
that, DEFINIT identiﬁes privileged apps exposing access to
these sensitive routines and generates a report containing a
listing of the exposed routines, their estimated behaviors and
3688    30th USENIX Security Symposium
USENIX Association
of the trigger at runtime). The output of this step is an enu-
meration of the effective set of Init routines (i.e., the subset of
routines that are live at runtime) and their associated triggers,
SELinux modiﬁers, and other attributes as deﬁned in [17].
5.2 Estimating Behaviors of Init Routines
The goal of this step is to estimate the behavior of executables
invoked by Init when a trigger is ﬁred. Init can invoke three
kinds of executables in response to a trigger: Init actions, shell
scripts, and ELF binaries. We discuss how we collect code
traces from each executable kind in the following.
Init actions are deﬁned by the Init Language [17] as
a named sequence of predeﬁned Init commands, therefore
DEFINIT extracts Init action traces from the action deﬁnitions
in .rc ﬁles as a list of Init commands, substituting hardcoded
property values as needed from .prop ﬁles.
For shell scripts, DEFINIT employs a custom shell tracer
that dry-runs shell scripts inside a sandbox built on top of
Bash trace mode (see bash -x option at [19]) to collect their
command traces. Since these scripts are executed in a for-
eign environment, it is expected that they would incur runtime
errors due to missing dependencies from their execution en-
vironment. Therefore, DEFINIT needs to carefully control
their execution to maximize coverage. Speciﬁcally, DEFINIT
taints environment and command-line arguments available
at a shell script invocation site in an .rc ﬁle, and evaluates
only conditional statements in the script that depend on (i.e.,
directly uses or derived from) these arguments. Additionally,
DEFINIT ignores “sleep” statements and masks return codes
of invoked shell commands to avoid prematurely exiting the
script due to missing commands.
For ELF binaries, DEFINIT collects static traces of called
APIs by traversing simple paths in the binary inter-procedural
control-ﬂow graph (ICFG) in depth-ﬁrst order, starting at
the binary entry point function and ignoring control ﬂows
through basic blocks not calling any APIs. For relevant APIs
with potentially sensitive arguments, DEFINIT performs inter-
procedural Def-Use analysis to propagate constant character
strings and numerical deﬁnitions to API call sites to identify
arguments at each call site of interest. In addition, DEFINIT
extracts strings from the binary that resemble system com-
mands by matching the ﬁrst token of strings to executable
ﬁle names and paths available in the input ROM. This whole
process is done recursively through the ELF executable and
its dynamically linked functions.
DEFINIT then uses the traces for each Init routine to an-
notate the routine with behavioral categories based on the
curated list of behaviors of security-sensitive APIs and com-
mands shown in Table 1. We collected these by, ﬁrst, automat-
ically enumerating all the commands in AOSP images and
the APIs in Bionic libc. This resulted in 473 commands and
4,259 APIs. Then, we ﬁltered out the obviously non-security-
relevant ones, leaving us with 137 commands and 64 APIs.
Figure 2: Workﬂow of DEFINIT.
security impact, privileged apps exposing them and how, and
Init trigger conditions needed to invoke these routines. We
discuss the details of these steps in the following.3
5.1 Extracting Init Routine Deﬁnitions
DEFINIT processes .rc ﬁles to extract Init routines and the
commands or executables they invoke. Parsing occurs ac-
cording to the syntax of the Android Init Language [17] in
a way that mimics the runtime behavior of Init. Speciﬁcally,
DEFINIT parses each .rc ﬁle line by line, starting at the root
/init.rc ﬁle, then nests into imported ﬁles in depth-ﬁrst or-