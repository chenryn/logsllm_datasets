function h, e.g., from |q|=2 to |q|, which may bring negative impact on the performance of HMQV.
(2) Add random nonces into the input of d and e, or, put the message to be signed also into HK,
which may increase the system complexity.
• The generation of the sOAKE-HDR signature uses minimal (i.e., only one) hashing operation (in
computing the value of e).
• The HMQV-HDR signature is actually an XCR signature w.r.t. the challenge XAd. In compar-
ison, (s,r)OAKE-HDR in general cannot be viewed as a structure of XCR w.r.t. some challenge
f (X; A) for some function f .
• As we shall see, the special protocol structure of (s,r)OAKE-HDR also much simpliﬁes, in certain
scenarios, the security analysis of (s,r)OAKE in the CK-framework.
Now, we proceed to prove the security of (s,r)OAKE-HDR signatures. As we shall see, the security
of (s,r)OAKE-HDR holds also w.r.t. public-key free versions where the public-keys A and B are removed
from the input of c; d; e. But, putting the public-keys into the input of c; d; e is useful for the security
of (s,r)OAKE beyond the CK-framework (e.g., security in the public computation model, session-key
computational fairness, etc).
Theorem G.1 Under the GDH assumption, (public-key free) (s)OAKE-HDR signatures of ˆB, with
oﬄine pre-computed and exposable (y; Y; Acy), are strongly secure in the random oracle model, with
respect to any uncorrupted player other than the signer ˆB itself even if the forger is given the private
keys of all uncorrupted players in the system other than the secret-key b of ˆB.
Proof (of Theorem G.1). Given an eﬃcient and successful forger F against (s)OAKE-HDR, i.e., F
wins the forgery game in Figure 2 with respect to some uncorrupted player ˆA ̸= ˆB with non-negligible
probability, we build an eﬃcient solver C for the GDH problem also with non-negligible probability. The
algorithm C for OAKE-HDR is presented in Figure 3 (page 26), and the algorithm C for sOAKE-HDR
is presented in Figure 4 (page 27).
Below, we focus on the analysis of OAKE-HDR. The analysis of sOAKE-HDR is similar and is
actually simpler. For the description of C in Figure 3, suppose F makes Qh RO queries to h, QH queries
to HK, Qs signing oracle queries, where Qh, QH , Qs are polynomial in the security parameter l (i.e.,
the output length of h). We have the following observations:
• The signature simulation at steps S1-S3 is perfect.
• Now, suppose F outputs a successful forgery ( ˆA; A; m1; m0; X0; Y0; r0), which particularly implies
that r0 should be HK((cid:27)0), where (cid:27)0 = Ay0c0X bd0+y0e0
, X0 = U , Y0 = gy0, c0 = h(m1; ˆA; A; Y0),
d0 = h(m0; ˆB; B; X0) and e0 = h(X0; Y0). We investigate the probability that C aborts at step
0
F3. We have the following observations:
1
2l−1 + 2
– With probability at most
−k + QH =2k, F can succeed with undeﬁned any one of
2l−1 is the probability that F guesses (cid:27)0 with undeﬁned c0 or d0 or e0,
{c0; d0; e0}. Here,
−k is the probability that F simply guesses the value r0, and QH =2k is the probability
2
upper-bound that r0 = HK((cid:27)0) collides with some HK-answers.
– With deﬁned c0 and d0 and e0, there are two cases for F to succeed without querying HK((cid:27)0):
1
Case-1. F simply guesses the value r0. This probability is 2
Case-2. r0 is the value r set by C at one of S3.1 steps, where r is supposed to be HK((cid:27))
w.r.t. a stored vector ( ˆZ; Z; m ^Z; m ^B; X; y; Y; Zcy; r). Recall that for the value r set at
step S3.1, C does not know (cid:27) (as it does not know b), and thus in this case both C
and F may not make the RO-query HK((cid:27)0) = HK((cid:27)). In this case, by the birthday
paradox with probability at least 1− Q2
= ZcyX db+ey,
−k, (cid:27)0 = (cid:27), i.e., Ac0y0X d0b+e0y0
−k.
H =2
0
25
Building the CDH solver C from the OAKE-HDR forger F
Setup: The inputs to C are random elements U = gu; V = gv in G, and its goal is to compute CDH(U; V ) = guv with
oracle access to a DDH oracle O. To this end, C sets B = V and X0 = U , and sets the public-keys and secret-keys for
all other uncorrupted players in the system. C runs the forger F on input (B; X0) against the signer ˆB of public-key
B. C provides F with a random tape, and provides the secret-keys of all uncorrupted players other than the signer ˆB
itself (the attacker F may register arbitrary public-keys for corrupted players, based on the public-keys and secret-keys
of uncorrupted players).
Signature query simulation: Each time F queries ˆB for a signature on values ( ˆZ; Z; m ^B; m ^A), C answers the query
for ˆB as follows (note that C does not know b):
S1. C generates y ∈R Z
q , Y = gy and Z cy, where c = h(m ^Z ; ˆZ; Z; Y ) (that may be pre-deﬁned, otherwise C deﬁnes c
∗
with the RO h). Actually, (y; Y; Z cy) can be pre-computed by C and leaked to F prior to the session. Then, C
responds (y; Y = gy; Z cy) to F, and stores the vector ( ˆZ; Z; m ^Z ; m ^B; y; Y; Acy) as an “incomplete session”.
S2. F presents C with ( ˆZ; Z; m ^Z ; m ^B; Y ), and a challenge X.
S3. ˆB checks that X ∈ G \ 1G (if not, it aborts) and that ( ˆZ; Z; m ^Z ; m ^B; Y ) is in one of its incomplete sessions (if not,
it ignores the query). Then, C checks for every value (cid:27) ∈ G \ 1G previously used by F as input to HK whether
(cid:27) = Z cyX bd+ye, where d = h(m ^B; ˆB; B; X) and e = h(X; Y ) (in case d; e undeﬁned, C deﬁnes them with h): it
does so using the DDH-oracle O, speciﬁcally, by checking whether CDH(X; B) = ((cid:27)=Z cyX ye)d
is positive, then C sets r to the already determined value of HK ((cid:27)).
S3.1. In any other cases, r is set to be a random value in {0; 1}k, where k is the output length of HK . Note that,
in this case, C does not know (cid:27) = Z cyX db+ey, as it does not know b, which also implies that C does not
make (actually realize) the RO-query HK ((cid:27)) even if the value (cid:27) has been well-de(cid:12)ned and known to F .
. If the answer
−1
C marks
Finally,
( ˆZ; Z; m ^Z ; m ^B; X; y; Y; Z cy; r) and responds ( ˆZ; Z; m ^Z ; m ^B; X; Y; r) to F .
( ˆZ; Z; m ^Z ; m ^B; X; y; Y; Z cy)
the
vector
as
a
“complete
session”,
stores
RO queries: C provides random answers to queries to the random oracles h and HK (made by F ), under the limitation
that if the same RO-query is presented more than once, C answers it with the same response as in the ﬁrst time. But, for
each new query (cid:27) to HK , C checks whether (cid:27) = Z cyX db+ey for any one of the stored vectors ( ˆZ; Z; m ^Z ; m ^B; X; y; Y; Z cy; r)
(as before, this check is done using the DDH-oracle).
predeﬁned HK ((cid:27)), otherwise a random r is returned.
Upon F ’s termination. When F halts, C checks whether the following conditions hold:
F1. F outputs a valid HDR-signature ( ˆA; A; m1; m0; X0; Y0; r0), where ˆA ̸= ˆB is an uncorrupted player. In particular,
, Y0 = gy0 (chosen by F ), c0 = h(m1; ˆA; A; Y0),
If equality holds then the corresponding r is returned as the
it implies that r0 should be HK ((cid:27)0), where (cid:27)0 = Ay0c0 X bd0+y0e0
d0 = h(m0; ˆB; B; X0) and e0 = h(X0; Y0).
0
value HK ((cid:27)0) was queried from HK being posterior to the queries c0; d0; e0. Otherwise, C aborts.
F2. ( ˆA; A; m1; m0; X0; Y0) did not appear in any of the above responses of the simulated OAKE-HDR signatures.
F3. The values c0 = h(m1; ˆA; A; Y0), d0 = h(m0; ˆB; B; X0) and e0 = h(X0; Y0) were queried from the RO h, and the
If these three conditions hold, C proceeds to the “repeat experiments” below, else it aborts.
The repeat experiments. C runs F again for a second time, under the same input (B; X0) and using the same coins
for F. There are two cases according to the order of the queries of h(m0; ˆB; B; X0) and h(X0; Y0)
C1. h(m0; ˆB; B; X0) posterior to h(X0; Y0): C rewinds F to the point of making the RO query h(m0; ˆB; B; X0),
0 ∈R {0; 1}l. All subsequent actions of C (including random an-
′
If in this repeated run F outputs a
0) satisfying the conditions F1-F3 (otherwise, C aborts), which par-
′
′
′
1; m0; X0; Y0; r
; A
; m
′
, C computes CDH(U; V ) = CDH(X0; B) =
′
′y0c
′
′
′
0 X bd
0+y0e0
0 = A
0), (cid:27)
0 = HK ((cid:27)
0
′
(diﬀerent
, where a and a
′
′
1) need not necessarily to equal ( ˆA; A; m1).
; m
; A
C2. h(X0; Y0) posterior to h(m0; ˆB; B; X0): C rewinds F to the point of making the RO query h(X0; Y0), re-
If in this repeated run F outputs a successful forgery
0) satisfying the conditions F1-F3 (otherwise, C aborts), which particularly implies that
′
′
1; m0; X0; Y0; r
; m
′
′
′
′y0c
))(e0−e
0 X bd0+y0e
0), and then CDH(U; V ) =
0
0 )e0 · Y ac0
responds back a new independent value d
swers to subsequent RO queries) are independent of the ﬁrst run.
′
successful forgery ( ˆA
ticularly implies that r
[((cid:27)0=Y ac0
from ˆB, which are assumed to be known to C). Note that ( ˆA
′
sponds back a new independent value e
′
( ˆA
′
r
0 = HK ((cid:27)
CDH(X0; B) = ((cid:27)0=((X y0
0 ∈R {0; 1}l.
′
, C computes X y0
))d
′
are the private keys of the uncorrupted ˆA and ˆA
0 = (((cid:27)0=Y ac0
′
)](d0−d
0)
′
′
0=Y a
′
0=Y a
0
′
0), (cid:27)
′
0 = A
−1
0 .
′
; A
)=((cid:27)
)=((cid:27)
′
′
c
0
′
0
c