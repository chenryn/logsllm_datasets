信息，延伸“10.5.1 pillar的定义”的例子，将data.sls修改成如下形式，其中，“if·else…
式为“{pillar变量}”，例如：
10.5.2
完成pilar配置后，接下来介绍使用方法。我们可以在 state、模板文件中引用，模板格
通过查看被控主机的 pilr数据，可以看到maxcpu的差异，如图10-14所示。
appname:website
首先通过结合grains的id信息来区分不同id的 maxcpu的值，其次进行引用观察匹配的
flow:
2.结合grains处理数据的差异性
SN2013-08-022:
SN2013-08-021:
#salt-I'appname:website' test.ping
见10.5.1节，通过-I选项来使用pillar来匹配被控主机：
1.操作目标主机
pillar.get('flow:appname',())
pillar['flow]['maxconn']
Python API格式如下：
({pillar['flow][maxconn]}（二级字典）或（Hsalt[pillar.get]（flow:‘maxconn'，{1）}}
[（pillar['appname]1}（一级字典）
{%endif%]
maxcpu:
[%ifgrains['id']==SN2013-08-022'%}
maxcpu:8
maxconn:30000
True
True
pillar的使用
Linux公社 www.linuxidc.com
第10章集中化管理平台Saltstack详解173
---
## Page 201
10.6.1state 的定义
系统用户（user）等，更多状态对象见http://docs.saltstack.com/ref/states/all/index.html。
行状态管理，支持包括程序包（pkg）文件（fle）网络配置（network）、系统服务（service）
10.6
174第二部分高级篇
state是Saltstack最核心的功能，通过预先定制好的 sls（salt state file）文件对被控主机进
官网提供的示例如下：
Sstate:states，定制对象的状态。
$State，须管理对象的类型，详见http://docs.saltstack.com/ref/states/all/index.html;
口SID，定义 state 的名称，通常采用与描述的对象保持一致的方法，如 apache、nginx等；
state 的定义是通过 sls 文件进行描述的，支持 YAML语法，定义的规则如下：
其中：
SID:
$state:
state介绍
-$state:states
Linux公社www.linuxidc.com
N2013-08-022:
0oteSN2013-08-020~#saltSN2013-08-022
fLow:
fLow:
maxconn:
maxcpu:
naxconn:
图10-14不同主机产生的pillar数据差异
30000
3000
---
## Page 202
sls；另一种是创建 apache 目录，再引用目录中的 init.sls 文件，两者效果是一样的。为了规
apache环境的任务。
面扩展10.5.1节定义的范例，结合 grains与pillar，实现一个根据不同操作系统类型部署
pillar 引用等，在 state 的逻辑层次定义完成后，再通过 salt"* state.highstate执行生效。下
saltstackbase定义的目录下，默认为/srv/salt。state描述配置.sls支持jinjia模板、grains及
例要求软件包应当处于已安装状态，服务必须运行，如未安装将会被安装并启动。
系统本地的软件包管理器（yum或apt）管理将要安装的软件，service 管理系统守护进程。
装；检查服务 apache 进程是否处于运行状态。下面详细进行说明：
10.6.2
state 的人口文件与 pillar一样，文件名称都是 top.sls，但 state 要求 sls 文件必须存放在
第3行和第5行是要执行的方法。这些方法定义了apache 软件包和服务目标状态，此示
在 top.sls中引用二级配置有两种方式：一种是直接引用，如本示例中直接引用apache.
【 /srv/pillar/top.sls 】
1.定义pillar
第6行是关键字 require，它确保了apache 服务只有在成功安装软件包后才会启动。
第2行和第4行表示 state声明开始，使用了pkg和 service 这两个状态对象。pkg使用
base:
第1行用于定义 state 的名称，此示例为 apache，当然也可以取其他相关的名称。
上述代码检查 apache 软件包是否已安装状态，如果未安装，将通过 yum或 apt进行安
1 apache:
象；watch：在检查某个state发生变化时运行此模块。
require：在运行此 state 前，先运行依赖的 state关系检查，
-apache
state的使用
service:
pkg:
pkg:apache
-running
-installed
Linux公社 www.linuxidc.com
第10章
集中化管理平台Saltstack详解175
可配置多个state依赖对
---
## Page 203
httpd start)。
安装（yum-y install httpd），同时检查 apache服务是否已经启动，没有则启动（/etc/init.d/
据，笔者的环境为CentOS，故将匹配为httpd，检查目标主机是否已经安装，没有则进行
范起见，笔者建议采用二级配置形式，同理，state的top.sls 也采用如此方式。
176第二部分高级篇
在配置中，{{pillar[pkgs]['apache]}将引用匹配到操作系统发行版对应的pillar数
apache:
【/srv/salt/apache/init.sls】
base:
【 /srv/salt/top.sls 】
2.定义 state
SN2013-08-021:
测试pillar数据，执行 salt "* pilr.data pkgs，结果返回以下信息，说明配置已生效。
(%endif%）
pkgs:
【 /srv/pillar/apache/init.sls 】
#mkidr/srv/pillar/apache
pkg:
apache:apache
{%elifgrains['os']=='Arch'%)
apache:httpd
(% elif grains['os_family'] =='RedHat%}
apache:apache2
service.running:
一
pkgs:
apache
---------
-pkg:{{pillar['pkgs']['apache']}}
require:
name:{（pillar['pkgs]['apache'] }
installed
apache:
Linux公社 www.linuxidc.com
httpd
#创建apache目录
---
## Page 204
10.7.2
grains_module、pillar、state、jinja（template）等组件。
的差异化，动态产生适合本机环境的Nginx 配置文件。本示例结合了 Saltstack 的 grains、
10.7.1
10.7
果是自动部署apache2.2.15环境并启动服务。
本示例实现一个集中化的Nginx配置管理，根据业务不同设备型号、分区、内核参数
【/etc/salt/master】配置片段）
master主配置文件的关键配置项如下：
具体对照表10-1环境说明表，此处省略。
从图10-15中可以看出，结果返回两种对象类型结果，分别为 pkg与 service，执行的结
nodegroups:
执行state及返回结果信息见图10-15。
3.执行state
weblgroup:
示例：基于Saltstack实现的配置集中化管理
主控端配置说明
环境说明
Linux公社 www.linuxidc.com
L@SN2012-07-010,SN2012-07-011,SN2012-07-012
dme
ouI
Result:
esult:
installeo
httpd
图10-15执行state的结果信息
httpd:True
irue
ihe.
rue
2.2.15-29.e16.
state.highstate
第10章集中化管理平台Saltstack详解177
httpd
---
## Page 205
参数的值，具体代码如下：
为 ulimit-n 的结果，以便动态生成Nginx.conf 中的 worker_rlimit_nofile、worker_connections
178第二部分高级篇
def NginxGrains():
import os,sys,commands
使用Python 编写 grains_module，实现动态配置被控主机 grains 的 max_open_file 键，值
定义的pillar、module api、state目录结构，如图10-16所示。
pillar_roots:
file_roots:
base:
base:
grains['max_open_file']=max_open_file
if getulimit[0]==0:
max_open_file=65536
-/srv/salt
except Exception,e:
ry:
grains={}
/srv/pillar
max_open_file=int(getulimit[1])
pass
getulimit=commands.getstatusoutput('source /etc/profile;ulimit -n')
return Nginx configgrains value
Linux公社 www.linuxidc.com
direct
salt
国
ories
run.py
nginx.conf
nginx _config.py
8files
图10-16示例目录结构
---
## Page 206
分条件例子：
行区分，除了属性值为 nodegroup 外，还支持 grain、pillar等形式。以下是使用 grain 作为区
10.7.3
本示例使用分组规则定义pillar，即不同分组引用各自的sls属性，使用match属性值进
【 /srv/pillar/top.sls 】
本示例通过/etc/salt/master中定义好的组信息，如web1group与web2group与业务组，
base:
验证max_open_flekey的key操作命令见图10-17。
刷新模块（让minion编译模块)，运行：
同步grains模块，运行：
weblgroup:
'os:Debian':
-weblserver
-match:nodegroup
配置pillar
return grains
servers
match: grain
Linux公社www.linuxidc.com
max_open_file:65535
12012-07-010
nax
图10-17校验max_open_file key的key信息
file:65535
le:65535
第10章集中化管理平台Saltstack详解179
---
## Page 207
chkconfig nginx on 命令“reload:True”，表示服务支持 reload 操作，不加则会默认执行 restart 
文件位置，-enable:True 检查服务是否在开机自启动服务队列中，如果不在则加上，等价于
10.7.4
进行定制，格式为 python字典形式，即"key:value"。
180第二部分高级篇
定义人口 top.sls:
【 /srv/pillar/web1server.sls 】
【 /srv/salt/top.sls】
通过查看不同分组主机的pilar信息来验证配置结果，如图10-18所示。
【/srv/pillar/web2server.sls】
nginx:
定义私有配置。本示例通过pillar 来配置web_root的数据，当然，也可以根据不同需求
base:
nginx:
web2group:
-nginx
root:/data
root:/www
配置state
web2server
match:nodegroup
[rootesN2013-08-020~]#salt'SN2012-07-010'pillar.data nginx
Linux公社 www.linuxidc.com
rooteSN2013-08-020~]#salt
2012-07-010:
nginx:
nginx:
root:
root:
图10-18不同分组的pillar差异信息
'SN2013-08-021'
---
## Page 208
操作。watch一则检测/etc/nginx/nginx.conf 是否发生变化，二则确保nginx已安装成功。
.【 /srv/salt/nginx.sls 】
error_log
worker_rlimit_nofile({ grains['max_open_file'] 1};
0100000010000000;
worker_cpu_affinity00000001 0000001000000100 00001000 00010000 00100000
#For moreinformation on configuration,see
root 参数为定制的 pillar['nginx]'root]值。
(%else%)
worker_processes
user
worker_cpu_affinity分配多核CPU，根据当前设备核数进行匹配，分别为2、4、8、
worker_processes参数采用grains['num_cpus]上报值（与设备CPU核数一致);
定制Nginx 配置文件jinja模板，各参数的引用规则如下：
[%ifgrains['num_cpus']==2%}
nginx:
核或其他；
endif
service.running:
file.managed:
pkg:
elif
enable:True
-file:/etc/nginx/nginx.conf
watch:
reload:True
template:jinja
mode:644
group:root
user:root
name:/etc/nginx/nginx.conf
source: salt://nginx/nginx.conf
installed
pkg:nginx
/var/log/nginx/error.log;
Linux公社 www.linuxidc.com
[{grains['num_cpus']}};
nginx;
==4%}
第10章集中化管理平台Saltstack详解181
---
## Page 209
182第二部分高级篇
http(
events(
pid
#error_log
#error_log
default_type
worker_connections
#include
#gzip
keepalive_timeout
#keepalive_timeout
#tcp_nopush
sendfile
access_log
log_format
server{
include
error_page
location=/404.html{
error_page
location
#access_log
#charset
server_name
listen
redirect server error pages to the static page /50x.html
Linux公社
on;
/var/run/nginx.pid;
root
root
/etc/nginx/conf.d/*.conf;
/var/log/nginx/error.log
/var/log/nginx/error.1og
index
main
koi8-r;
/var/log/nginx/access.1og
application/octet-stream;
/etc/nginx/mime.types;
/usr/share/nginx/html;
index.htmlindex.htm;
{{pillar['nginx'][root'] }};
404
uo
!uc
500502503504