    };
    interface LoggerProvider {
      GetLogger(Logger& logger);
    };
如此我们就可以使用ReceiverSet去绑定多个Looger pending receiver到单个implement实例
    class LogManager : public system::mojom::LoggerProvider,
                       public system::mojom::Logger {
     public:
      explicit LogManager(mojo::PendingReceiver receiver)
          : provider_receiver_(this, std::move(receiver)) {}
      ~LogManager() {}
      // system::mojom::LoggerProvider:
      void GetLogger(mojo::PendingReceiver receiver) override {
        logger_receivers_.Add(this, std::move(receiver));
      }
      // system::mojom::Logger:
      void Log(const std::string& message) override {
        LOG(ERROR)  provider_receiver_;
      mojo::ReceiverSet logger_receivers_;
    };
##### Remote Sets
同理，有时维护一组Remotes很有用，例如一组观察某些事件的client。
    module db.mojom;
    interface TableListener {
      OnRowAdded(int32 key, string data);
    };
    interface Table {
      AddRow(int32 key, string data);
      AddListener(pending_remote listener);
    };
Table的实现可能是这样的
    class TableImpl : public db::mojom::Table {
     public:
      TableImpl() {}
      ~TableImpl() override {}
      // db::mojom::Table:
      void AddRow(int32_t key, const std::string& data) override {
        rows_.insert({key, data});
        listeners_.ForEach([key, &data](db::mojom::TableListener* listener) {
          listener->OnRowAdded(key, data);
        });
      }
      void AddListener(mojo::PendingRemote listener) {
        listeners_.Add(std::move(listener));
      }
     private:
      mojo::RemoteSet listeners_;
      std::map rows_;
    };
#### Associated Interfaces
  * 允许在message pipe上运行多个interface，同时保留message的顺序
  * 使receiver可以从多个sequence访问单个message pipe  
##### Mojom  
引入新的类型pending_associated_remote和pending_associated_receiver  
```c++  
interface Bar {};
struct Qux {  
pending_associated_remote bar;  
};
interface Foo {  
// Uses associated remote.  
PassBarRemote(pending_associated_remote bar);  
// Uses associated receiver.  
PassBarReceiver(pending_associated_receiver bar);  
// Passes a struct with associated interface pointer.  
PassQux(Qux qux);  
// Uses associated interface pointer in callback.  
AsyncGetBar() => (pending_associated_remote bar);  
};
    在每个interface impl/client将使用相同的message pipe，通过传递associated remote/receiver进行通信
    ##### Passing pending associated receivers
    假设你已经有了一个`Remote foo`，你想要去call `PassBarReceiver`，你可以这样:
    ```c++
    mojo::PendingAssociatedRemote pending_bar;
    mojo::PendingAssociatedReceiver bar_receiver = pending_bar.InitWithNewEndpointAndPassReceiver();
    foo->PassBarReceiver(std::move(bar_receiver));
    mojo::AssociatedRemote bar;
    bar.Bind(std::move(pending_bar));
    bar->DoSomething();
首先代码创建一个Bar类型的associated
interface，和之前我们创建的不同在于，associated的两端(bar_receiver和pending_bar)之一，必须通过另一个interface发送，这就是接口和现有message
pipe关联的方式。
应该注意的是，在传递bar_receiver之前不能调用`bar->DoSomething()`,需要满足FIFO:  
在接收方，当DoSomething调用的消息到达时，我们希望在处理任何后续消息之前将其分派到对应的`AssociatedReceiver`，如果bar_receiver在后续的消息里，那么消息调度就将陷入死锁。  
另一方面，一旦发送了`bar_receiver`，bar就可以使用，而无须等待bar_receiver绑定到具体的implemention。  
上面的代码也可以写成这样，包一层语法糖
    mojo::AssociatedRemote bar;
    foo->PassBarReceiver(bar.BindNewEndpointAndPassReceiver());
    bar->DoSomething();
Foo的impl实现如下:
    class FooImpl : public Foo {
      ...
      void PassBarReceiver(mojo::AssociatedReceiver bar) override {
        bar_receiver_.Bind(std::move(bar));
        ...
      }
      ...
      Receiver foo_receiver_;
      AssociatedReceiver bar_receiver_;
    };
在这个例子里,bar_receiver_的生命周期和FooImpl息息相关，但是你不必这样做。  
你可以将bar2传递到另一个序列，然后在那里绑定`AssociatedReceiver`。
##### Passing associated remotes
同理
    mojo::AssociatedReceiver bar_receiver(some_bar_impl);
    mojo::PendingAssociatedRemote bar;
    mojo::PendingAssociatedReceiver bar_pending_receiver = bar.InitWithNewEndpointAndPassReceiver();
    foo->PassBarRemote(std::move(bar));
    bar_receiver.Bind(std::move(bar_pending_receiver));
    mojo::AssociatedReceiver bar_receiver(some_bar_impl);
    mojo::PendingAssociatedRemote bar;
    bar_receiver.Bind(bar.InitWithNewPipeAndPassReceiver());
    foo->PassBarRemote(std::move(bar));
### Mojo JavaScript Bindings API
#### Getting Started
bindings API被定义在mojo
namespace里，其实现在[mojo_bindings.js](https://source.chromium.org/chromium/chromium/src/+/master:out/Debug/gen/mojo/public/js/mojo_bindings.js)  
当bindings generator处理mojom IDL文件时，将会生成对应的mojom.js文件。  
假设我们创建一个`//services/echo/public/interfaces/echo.mojom`文件和`//services/echo/public/interfaces/BUILD.gn`
    module test.echo.mojom;
    interface Echo {
      EchoInteger(int32 value) => (int32 result);
    };
    import("//mojo/public/tools/bindings/mojom.gni")
    mojom("interfaces") {
      sources = [
        "echo.mojom",
      ]
    }
通过构建如下生成target，来生成bindings。
  * foo_js JavaScript bindings; 被用在compile-time dependency.
  * foo_js_data_deps JavaScript bindings; 被用在run-time dependency.
如果我们编译这个target,这将生成几个source file
    ninja -C out/r services/echo/public/interfaces:interfaces_js
其中与js binding相关的是
    out/gen/services/echo/public/interfaces/echo.mojom.js
为了使用echo.mojom中的定义，您将需要使用``标签在html页面中包括两个文件：
  * mojo_bindings.js: 注意这个文件必须放在所有的`.mojom.js`文件之前。
  * echo.mojom.js
#### Interfaces
和C++ bindings API相同的是，我们有
  * `mojo.InterfacePtrInfo`和`mojo.InterfaceRequest`封装message pipe的两端，他们分别代表interface连接的client端和service端
  * 对于每个Mojom interface Foo，这也生成一个FooPtr类，它保存一个InterfacePtrInfo，提供了使用InterfacePtrInfo中的message pipe handle发送interface call的方法。
  * `mojo.Binding`保存一个InterfaceRequest。 它侦听message pipe handle，并将传入的message分发到user-defined的interface实现。
让我们考虑上面的echo.mojom示例。下面显示了如何创建Echo interface connection和使用它进行call。
##### Interface Pointer and Request
在上面的示例中,test.echo.mojom.EchoPtr是一个interface pointer类，它代表interface
connection的client。对于Echo
Mojom接口中的方法EchoInteger，在EchoPtr中定义了相应的echoInteger方法（注意，生成的method
name的格式为camelCaseWithLowerInitial,即小驼峰,第一个字母小写)  
这就是实际生成的[echo.mojom.js](https://source.chromium.org/chromium/chromium/src/+/master:out/win-Debug/gen/mojo/public/interfaces/bindings/tests/echo.mojom.js)  
在上面的实例中，echoServiceRequest是一个InterfaceRequest实例，它代表接口连接的server。  
mojo.makeRequest创建一个message
pipe，用pipe的一端填充output参数（可以是InterfacePtrInfo或interface
pointer）,返回包装在InterfaceRequest实例中的另一端。
    // |output| could be an interface pointer, InterfacePtrInfo or
      // AssociatedInterfacePtrInfo.
      function makeRequest(output) {
        if (output instanceof mojo.AssociatedInterfacePtrInfo) {
          var {handle0, handle1} = internal.createPairPendingAssociation();
          output.interfaceEndpointHandle = handle0;
          output.version = 0;
          return new mojo.AssociatedInterfaceRequest(handle1);
        }
        if (output instanceof mojo.InterfacePtrInfo) {
          var pipe = Mojo.createMessagePipe();
          output.handle = pipe.handle0;
          output.version = 0;
          return new mojo.InterfaceRequest(pipe.handle1);
        }
        var pipe = Mojo.createMessagePipe();
        output.ptr.bind(new mojo.InterfacePtrInfo(pipe.handle0, 0));
        return new mojo.InterfaceRequest(pipe.handle1);
      }
##### Binding an InterfaceRequest
mojo.Binding桥接了interface的实现和message pipe的一端，从而将传入的message从server端分派到该实现。  
在上面的示例中，echoServiceBinding侦听message
pipe上的传入的EchoInteger方法调用，并将这些调用分派到EchoImpl实例。
    // ---------------------------------------------------------------------------    
      // |request| could be omitted and passed into bind() later.
      //
      // Example:
      //
      //    // FooImpl implements mojom.Foo.
      //    function FooImpl() { ... }
      //    FooImpl.prototype.fooMethod1 = function() { ... }
      //    FooImpl.prototype.fooMethod2 = function() { ... }
      //
      //    var fooPtr = new mojom.FooPtr();
      //    var request = makeRequest(fooPtr);
      //    var binding = new Binding(mojom.Foo, new FooImpl(), request);
      //    fooPtr.fooMethod1();
      function Binding(interfaceType, impl, requestOrHandle) {
        this.interfaceType_ = interfaceType;
        this.impl_ = impl;
        this.router_ = null;