EAX 
AX 
AH 
AL 
main()函数的返回值是整数类型的零，但是出于兼容性和可移植性的考虑，C 语言的编译器仍将使用 32
位的零。换而言之，即使是 64 位的应用程序，在程序结束时 EAX 的值是零，而 RAX 的值不一定会是零。 
此时，数据栈的对应空间里仍留有 40 字节的数据。这部分数据空间有个专用的名词，即阴影空间
异步社区会员 dearfuture(15918834820) 专享 尊重版权
12 
逆向工程权威指南（上册） 
（shadow space）。本书将在 8.2.1 节里更详细地介绍它。 
3.2.2 GCC－x86-64 
我们使用 64 位 Linux 的 GCC 编译器编译上述程序，可得到如下所示的指令。 
指令清单 3.8  GCC 4.4.6 x64 
.string "hello, world\n" 
main: 
         sub      rsp, 8 
         mov      edi, OFFSET FLAT:.LC0 ; "hello, world" 
         xor      eax, eax  ; number of vector registers passed 
         call     printf 
         xor      eax, eax 
         add      rsp, 8 
         ret 
Linux、BSD和Mac OS X系统中的应用程序，会优先使用RDI、RSI、RDX、RCX、R8、R9 这 6 个寄
存器传递函数所需的头 6 个参数，然后使用数据栈传递其余的参数。
①
需要注意的是，64 位汇编指令MOV在写入R-寄存器的低 32 位地址位的时候，即对E-寄存器进行写操
作的时候，会同时清除R寄存器中的高 32 位地址位
因此，64 位的 GCC 编译器使用 EDI 寄存器（寄存器的 32 位）存储字符串指针。EDI 不过是 RDI 寄
存器中地址位较低的 32 位地址部分。为何 GCC 不直接使用整个 RDI 寄存器？ 
②
如果打开GCC生成的obj文件，我们就能看见全部的opcode。
。所以, “MOV EAX, 011223344h”能够对RAX寄存
器进行正确的赋值操作，因为该指令会清除（置零）高地址位的内容。 
③
在调用printf()之前，程序清空了EAX寄存器，这是x86-64 框架的系统规范决定的。在系统与应用程序
接口的规范中，EAX寄存器用来保存用过的向量寄存器(vector registers)。
指令清单 3.9  GCC 4.4.6 x64 
.text:00000000004004D0                   main  proc near 
.text:00000000004004D0 48 83 EC 08     sub     rsp, 8 
.text:00000000004004D4 BF E8 05 40 00  mov     edi, offset format ; "hello, world\n" 
.text:00000000004004D9 31 C0            xor     eax, eax 
.text:00000000004004DB E8 D8 FE FF FF  call    _printf 
.text:00000000004004E0 31 C0            xor     eax, eax 
.text:00000000004004E2 48 83 C4 08     add     rsp, 8 
.text:00000000004004E6 C3                retn 
.text:00000000004004E6               
  main  endp 
在地址 0x4004D4 处，程序对 EDI 进行了写操作，这部分代码的 opcode 占用了 5 个字节；相比之下，对
RDI 进行写操作的 opcode 则会占用 7 个字节。显然，出于空间方面的考虑，GCC 进行了相应的优化处理。此
外，因为 32 位地址（指针）能够描述的地址不超过 4GB，我们可据此判断这个程序的数据段地址不会超过 4GB。 
④
3.3 GCC 的其他特性 
只要 C 语言代码里使用了字符串型常量（可参照 3.1.1 节的范例），编译器就会把这个字符串常量置于
常量字段，以保证其内容不会发生变化。不过 GCC 有个有趣的特征：它可能会把字符串拆出来单独使用。 
我们来看下面这段程序： 
#include  
int f1()  
{ 
① 参考 Mit13。 
② 参考 Int13。 
③ 可通过菜单“Options Number of opcode bytes”启用有关选项。 
④ 请参考 Mit13。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 3 章  Hello，world！ 
13 
         printf ("world\n"); 
}; 
int f2()  
{ 
         printf ("hello world\n"); 
}; 
int main()  
{ 
         f1(); 
         f2();  
}; 
多数的 C/C++编译器（包括 MSVC 编译器）会分配出两个直接对应的字符串，不过 GCC 4.8.1 的编译
结果则更为可圈可点。 
指令清单 3.10  在 IDA 中观察 GCC 4.8.1 的汇编指令 
f1            
proc near 
s              
= dword ptr -1Ch 
sub     esp, 1Ch 
mov     [esp+1Ch+s], offset s ; "world\n" 
call    _puts 
add     esp, 1Ch 
retn 
f1               
endp 
f2               
proc near 
s                
= dword ptr -1Ch 
sub     esp, 1Ch 
mov     [esp+1Ch+s], offset aHello ; "hello " 
call    _puts 
add     esp, 1Ch 
retn 
f2               
endp 
aHello           db  'hello' 
s                 db  'world', 0xa, 0 
在打印字符串“hello world”的时候，这两个词的指针地址实际上是前后相邻的。在调用 puts()函数进
行输出时，函数本身不知道它所输出的字符串分为两个部分。实际上我们在汇编指令清单中可以看到，这
两个字符串没有被“切实”分开。 
在 f1()函数调用 puts()函数时，它输出字符串“world”和外加结束符（数值为零的 1 个字节），因为 puts()
函数并不知道字符串可以和前面的字符串连起来形成新的字符串。 
GCC 编译器会充分这种技术来节省内存。 
3.4 ARM 
根据我个人的经验，本书将通过以下几个主流的 ARM 编译器进行演示。 
 2013 年 6 月版本的 Keil 编译器。 
 Apple Xcode 4.6.3 IDE (含LLVM-GCC 4.2 编译器) 。
①
除非特别标注，否则本书中的 ARM 程序都是 32 位 ARM 程序。在介绍 64 位的 ARM 程序时，本书会
 面向 ARM64 的 GCC 4.9 (Linaro)，其 32 位的 Windows 程序可由下述网址下载：http://www.linaro.org/ 
projects/armv8/。 
① Apple 公司的 Xcode 4.6.3 使用的前段编译器是开源的 GCC 程序，代码生成程序（code generator）使用的是 LLVM。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
14 
逆向工程权威指南（上册） 
称其为 ARM64 程序。 
3.4.1 Keil 6/2013——未启用优化功能的 ARM 模式 
请使用下述指令，用 Keil 编译器把 hello world 程序编译为 ARM 指令集架构的汇编程序： 
armcc.exe --arm --c90 -O0 1.c 
虽然armcc编译器生成的汇编指令清单同样采用了Intel语体，但是程序所使用的宏却极具ARM处理器
的特色
①
现在回顾上面的代码，第一句“STMFD   SP!, {R4,LR}”
。眼见为实，我们一起用IDA来看看它们的本来面目吧。 
指令清单 3.11  使用 IDA 观察 Non-optimizing Keil 6/2013 (ARM 模式) 
.text:00000000               main 
.text:00000000 10 40 2D E9    STMFD   SP!, {R4,LR} 
.text:00000004 1E 0E 8F E2    ADR     R0, aHelloWorld ; "hello, world" 
.text:00000008 15 19 00 EB    BL      __2printf 
.text:0000000C 00 00 A0 E3    MOV     R0, #0 
.text:00000010 10 80 BD E8    LDMFD   SP!, {R4,PC} 
.text:000001EC 68 65 6C 6C+aHelloWorld  DCB "hello, world",0    ; DATA XREF: main+4 
在本节的例子里，每条指令都占用 4 个字节。正如您所见到，我们确实要把源程序编译为 ARM 模式
指令集的应用程序，而不是把它编译为以 Thumb 模式的应用程序。 
②
这条指令首先将SP
相当于x86 的PUSH指令。它把R4 寄存器
和LR(Link Register)寄存器的数值放到数据栈中。此处，本文的措辞是“相当于”，而非“完全是”。这是因
为ARM模式的指令集里没有PUSH指令，只有Thumb模式里的指令集里才有“PUSH/POP”指令。在IDA中
可以清除地看到这种差别，所以本书推荐使用IDA分析上述程序。 
③
接下来的指令是“ADR R0, aHelloWorld”。它首先对PC
递减，在栈中分配一个新的空间以便存储R4 和LR的值。 
STMFD 指令能够一次存储多个寄存器的值，Thumb 模式的 PUSH 指令也可以这样使用。实际上 x86
指令集中并没有这样方便的指令。STMFD 指令可看作是增强版本的 PUSH 指令，它不仅能够存储 SP 的值，
也能够存储任何寄存器的值。换句话说，STMFD 可用来在指定的内存空间存储多个寄存器的值。 
④进行取值操作，然后把“hello, world”字符串的
偏移量（可能题值）与PC的值相加，将其结果存储到R0 之中。有些读者可能不明白此处PC寄存器的作用。
严谨地说，编译器通常帮助PC把某些指令强制变为“位置无关代码/position-independent code”。在（多数）操
作系统把程序加载在内存里的时候，OS分配给程序代码的内存地址是不固定的；但是程序内部既定指令和数
据常量之间的偏移量是固定的（由二进制程序文件决定）。这种情况下，要在程序内部进行指令寻址（例如跳
转等情况），就需要借助PC指针
⑤
“BL  __2printf”
。ADR将当前指令的地址与字符串指针地址的差值（偏移量）传递给R0。
程序借助PC指针可找到字符串指针的偏移地址，从而使操作系统确定字符串常量在内存里的绝对地址。 
⑥
这便是 CISC（复杂指令集）处理器与 RISC（精简指令集）处理器在工作模式上的区别。在拥有复杂
调用printf()函数。BL实施的具体操作实际上是： 
 将下一条指令的地址，即地址 0xC 处“MOV R0, #0”的地址，写入 LR 寄存器。 
 然后将 printf()函数的地址写入 PC 寄存器，以引导系统执行该函数。 
当 printf()完成工作之后，计算机必须知道返回地址，即它应当从哪里开始继续执行下一条指令。所以，
每次使用 BL 指令调用其他函数之前，都要把 BL 指令的下一个指令的地址存储到 LR 寄存器。 
① 例如，ARM 模式的指令集里没有 PUSH/POP 指令。 
② STMFD 是 Storage Multiple Full Descending 的缩写。 
③ stack pointer，栈指针。x86/x64 框架中的 SP 是 SP/ESP/RSP，而 ARM 框架的 SP 就是 SP。 
④ Program Counter，中文叫做指令指针或程序计数器。x86/x64 里的 PC 叫作 IP/EIP/RIP，ARM 里它就叫 PC。 
⑤ 本书介绍操作系统的部分有更详细的说明。在不同框架的汇编语言中，PC 很少会是当前指令的指针地址＋1，这和 CPU 的
流水/pipeline 模式有关。如需完整的官方介绍，请参阅 http://www.arm.com/pdfs/comparison-arm7-arm9-v1.pdf。 
⑥ BL 是 Branch with Link 的缩写，相当于 x86 的 call 指令。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 3 章  Hello，world！ 
15 
指令集的 x86 体系里，操作系统可以利用栈存储返回地址。 
顺便说一下，ARM模式跳转指令的寻址能力确实存在局限性。单条ARM模式的指令必须是 32 位/4 字节，
所以BL指令无法调用 32 位绝对地址或 32 位相对地址（容纳不下），它只能编入 24 位的偏移量。不过，既然每
条指令的opcode必须是 4 字节，则指令地址必须在 4n处，即偏移地址的最后两位必定为零，可在opcode里省略。
在处理ARM模式的转移指令时，处理器将指令中的opcode的低 24 位左移 2 位，形成 26 位偏移量，再进行跳转。
由此可知，转移指令B/BL的跳转指令的目标地址，大约在当前位置的±32MB区间之内
①
最后到了“LDMFD SP!, R4,PC”这一条指令
。 
下一条指令“MOV R0，＃0”将 R0 寄存器置零。Hello World 的 C 代码中，主函数返回零。该指令把
返回值写在 R0 寄存器中。 
②
3.4.2 Thumb 模式下、未开启优化选项的 Keil 
。它与STMFD成对出现，做的工作相反。它将栈中的数
值取出，依次赋值给R4 和PC，并且会调整栈指针SP。可以说这条指令与POP指令很相似。main()函数的第
一条指令就是STMFD指令，它将R4 寄存器和LR寄存器存储在栈中。main()函数在结尾处使用LDMFD指令，
其作用是把栈里存储的PC的值和R4 寄存器的值恢复回来。 
前面提到过，程序在调用其他函数之前，必须把返回地址保存在 LR 寄存器里。因为在调用 printf()函
数之后 LR 寄存器的值会发生改变，所以主函数的第一条指令就要负责保存 LR 寄存器的值。在被调用的
函数结束后，LR 寄存器中存储的值会被赋值给 PC，以便程序返回调用者函数继续运行。当 C/C++的主函数
main()结束之后，程序的控制权将返回给 OS loader，或者 CRT 中的某个指针，或者作用相似的其他地址。 
数据段中的 DCB 是汇编语言中定义 ASCII 字符数组/字节数组的指令，相当于 x86 汇编中的 DB 指令。 
现在以 Thumb 模式编译前面的源代码： 
armcc.exe --thumb --c90 -O0 1.c 
我们会在 IDA 中看到如下指令。 
指令清单 3.12  使用 IDA 观察 Non-optimizing Keil 6/2013 (Thumb 模式) 
.text:00000000              main 
.text:00000000 10 B5          PUSH  
{R4,LR} 
.text:00000002 C0 A0          ADR  
R0, aHelloWorld;"hello, world" 
.text:00000004 06 F0 2E F9   BL   
_2printf 
.text:00000008 00 20          MOVS  
R0, #0 
.text:0000000A 10 BD          POP  
{R4, PC} 
.text:00000304 68 65 6C 6C  +aHelloWorld  DCB "hello, world",0    ; DATA XREF: main+2 
Thumb 模式程序的每条指令，都对应着 2 个字节/16 位的 opcode，这是 Thumb 模式程序的特征。但是 Thumb
模式的跳转指令 BL“看上去”占用了 4 个字节的 opcode，实际上它是由 2 条指令组成的。单条 16 位 opcode 传递
的信息太有限，不足以向被调用函数传递 PC 和偏移量信息。所以，上面 BL 指令分为 2 条 16 位 opcode。第一条
16 位指令可以传递偏移量的高10 位，第二条指令可以传递偏移量的低11 位。而 Thumb 模式的opcode 都是固定的
2 个字节长，目标地址位最后一个位必定是0（Thumb 模式的opcode 的启始地址位必须是2n），因而会被省略。在
执行 Thumb 模式的转移指令时，处理器会将目标地址左移1 位，形成22 位的偏移量。即 Thumb 的BL 跳转指令将
无法跳到奇数地址，而且跳转指令仅仅能偏移到到当前地址 ±2MB（22 位有符号整数的取值区间）附近的范围之内。 
程序主函数的其他指令，PUSH 和 POP 工作方式与 STMFD/LDMFD 相似。虽然表面上看不出来，但是实际
上它们也会调整 SP 指针。ADR 指令与前文的作用相同。而 MOVS 指令负责把返回值（R0 寄存器）置零。 
3.4.3 ARM 模式下、开启优化选项的 Xcode 
如果不启用优化选项，Xcode 4.6.3 将会产生大量的冗余代码，所以不妨开启优化选项，让其生成最优
① 这是二进制里 26 位有符号整型数据（26 bits signed int）的数值范围。 
② LDMFD 是 Load Multiple Full Descending 的缩写。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
16 
逆向工程权威指南（上册） 
的代码。请指定编译选项-O3，使用 Xcode（启用优化选项-O3）编译 Hello world 程序。这将会得到如下所
示的汇编代码。 
指令清单 3.13  Optimizing Xcode 4.6.3 (LLVM) (ARM 模式) 
__text:000028C4               _helloworld 
__text:000028C4 80 40 2D E9   STMFD   
SP!, {R7, LR} 
__text:000028C8 86 06 01 E3   MOV     
R0, #0x1686 
__text:000028CC 0D 70 A0 E1   MOV     
R7, SP 
__text:000028D0 00 00 40 E3   MOVT    
R0, #0 
__text:000028D4 00 00 8F E0   ADD     
R0, PC, R0 
__text:000028D8 C3 05 00 EB   BL     
_puts 
__text:000028DC 00 00 A0 E3   MOV     
R0, #0 
__text:000028E0 80 80 BD E8   LDMFD   
SP!, {R7, PC} 
__cstring:00003F62 48 65 6C 6C+aHelloWorld_0  DCB "Hello World!", 0 
我们就不再重复介绍 STMFD/LDMFD 指令了。 
第一个 MOV 指令将字符串“Hello World！”的偏移量，0x1686 赋值到 R0 寄存器。 
根据Apple ABI 函数接口规范
①
然后，程序通过BL指令调用puts()函数，而没有像前文那样调用printf()函数。这种差异来自于GCC编
译器
，R7 寄存器担当帧指针（frame pointer）寄存器。 
“MOVT R0, #0”将0 写到R0 寄存器的高16 位地址。在ARM 模式里，常规的MOV 指令只能操作寄存器的低
16 位地址，而单条ARM 指令最多是32 位/4 字节。当然，寄存器之间传递数据没有这种限制。所以，对寄存器的高
位（第 16 位到第 31 位）进行赋值操作的 MOVT 指令应运而生。然而此处的这条 MOVT 指令可有可无，因为在执
行下一条指令“MOV R0, #0x1686”时，R0 寄存器的高16 位本来就会被清零。这或许就是编译器智能方面的缺陷吧。 
“ADD R0，PC，R0”将 PC 和 R0 进行求和，计算得出字符串的绝对地址。前文介绍过了“位置无关
代码”，我们知道程序运行之后的启始地址并不固定。此处，程序对这个地址进行了必要的修正。 
②
为什么GCC编译器会做这种替换？大概是由于这种情况下puts()的效率更高吧。由于puts()函数不处理
控制符（%）、只是把各个字符输出到stdout设备上，所以puts()函数的运行速度更快
，编译器将第一个printf()函数替换为puts()函数（这两个函数的作用几乎相同）。 
所谓“几乎”就意味着它们还存在差别事实上，如 printf()函数支持“%”开头的控制符，而 puts()函数则不
支持这类格式化字符串。如果参数里有这类控制符，那么这两个函数的输出结果还会不同。 
③
3.4.4 Thumb-2 模式下、开启优化选项的 Xcode（LLVM） 
。 
后面的“MOV R0, #0”指令将 R0 寄存器置零。 
默认情况下，Xcode 4.6.3 会启用优化模式，并以 Thumb-2 模式编译源程序。 
指令清单 3.14  Optimizing Xcode 4.6.3 (LLVM) (Thumb-2 模式) 
   __text:00002B6C                    
   __text:00002B6C 80 B5          
   _hello_world 
PUSH 
{R7,LR} 
   __text:00002B6E 41 F2 D8 30     MOVW 
R0, #0x13D8 
   __text:00002B72 6F 46 
MOV 
R7, SP 
   __text:00002B74 C0 F2 00 00 
MOVT.W 
R0, #0 
   __text:00002B78 78 44          
ADD 
R0, PC 
   __text:00002B7A 01 F0 38 EA 
BLX 
_puts 
   __text:00002B7E 00 20           
MOVS 
R0, #0 
   __text:00002B80 80 BD           
   ... 
POP 
{R7, PC} 
   __cstring:00003E70 48 65 6C 
6F 20+aHelloWorld 
DCB "Hello word!",0xA,0 
① 参照参考文献 App10。 
② Xcode 4.6.3 是基于 GCC 的编译器。 
③ 请参考 http://www.ciselant.de/projects/gcc_printf/gcc_printf.html。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 3 章  Hello，world！ 
17 
上文提到过，thumb 模式的 BLX 和 BL 指令以 2 个 16 位指令的形式成对出现的。在 Thumb-2 模式下，
BL 和 BLX 指令对应的伪 opcode 有明显的 32 位指令特征，其对应的 opcode 都以 0xFx 或者 0xEx 开头。 
在显示 Thumb 和 Thumb-2 模式程序的 opcode 时，IDA 会以两个字节为单位对调。在显示 ARM 模式
的指令时，IDA 以字节为单位、依次逆序显示其 opcode。这是字节序的排版差异。 