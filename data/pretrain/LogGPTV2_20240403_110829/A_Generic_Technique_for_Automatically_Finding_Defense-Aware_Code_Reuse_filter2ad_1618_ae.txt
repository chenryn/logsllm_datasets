in the library. When the actual program has not been compiled as position independent
code, attackers can use the procedure linkage table (PLT), which will be located at a ﬁxed
17
StackAddress of G1XOR EAX, EBXRETADD EBX, EDXRETDIV EDX, 0x02ADD EDX, 0x01RETGadget 1Gadget 2Gadget n...Address of G2Address of G1Address of Gn...Direction of stack growthDirection of gadget runaddress, to return into the beginnings of functions, as shown by Nergal [27].
Even when more ﬁne grained randomization is in place, a class of vulnerabilities known
as memory disclosure vulnerabilities allow attackers to read values from memory [38]
which can then be used to build payloads. Snow, et. al [37] demonstrate a technique
for constructing ROP payloads in randomized system that takes advantage of a memory
disclosure vulnerability which allows them to read code pages from the program space.
Their tool follows pointers found in the code to ﬁnd the locations of other code pages and
scans the code to ﬁnd gadgets and compile payloads.
18
Chapter 3
Existing Defenses
Many defenses have been propsed to prevent code reuse attacks. These defenses, described
in detail below, can be divided into several, high-level categories: buffer overﬂow preven-
tion, data execution prevention, address space randomization, code rewriting, control ﬂow
protection and unused code removal. The defenses have varying performance and imple-
mentation tradeoffs, which are included in the descriptions. Some of these systems have
been widely deployed and others are still proofs of concepts.
Buffer Overﬂow Prevention The full extent of buffer overﬂow defenses is outside the
scope of this paper, but we will list protections that are included in Microsoft Visual Studio
and GCC. Propolice [15] is an extension for the GCC compiler that provides stack canaries
and protection for saved registers and function arguments. Microsoft Visual Studio also
provides buffer overﬂow protection with the /GS ﬂag [7]. When /GS is enabled, it generates
security cookies on the stack to protect return addresses, exception handlers and function
parameters.
Data Execution Prevention To prevent code injection attacks, Windows [33] and Linux
[42] have both integrated data execution prevention (DEP) to ensure that data pages are
marked non-executable and programs will fault if they attempt to execute data. These sys-
tems do not protect against code-reuse attacks where attackers build malware out of pro-
gram code rather than through code injection. DEP is incompatible with some applications,
19
such as Just-In-Time (JIT) compilers. It is also possible to disable it.
Address Space Randomization Many systems have been proposed that use random-
ization (of either the code or the address space) to reduce the amount of knowledge that
attackers have about running programs. Depending on what is randomized, these systems
reduce the attacker’s knowledge about the program in different ways. Randomization sys-
tems are usually run in conjunction with data execution prevention. The Windows kernel
[33] includes an implementation of ASLR that randomizes the locations of the base ad-
dresses of each section of the executable at load time. PAX ASLR [39] is a kernel module
for GNU/Linux that randomizes the locations of the base addresses of executables and li-
braries. Binary Stirring [44] is a binary rewriter and modiﬁed loader that randomizes the
locations of functional blocks within the program space. Dynamic Offset Randomization
[45] randomizes the locations of functions within shared libraries. It also only maps the
addresses of functions that will be used by the program. Instruction Layout Randomization
(ILR) [18] uses an emulation layer to randomize the addresses of most instructions within
an executable. The emulation layer translates each address at runtime. ASLP [23] rewrites
ELF binaries to randomize the base address of shared libraries, executable, stack and heap.
Code Rewriting and Gadget Removal Other defenses use compiler tools and binary
rewriting to create binaries that are difﬁcult to exploit with ROP attacks by preventing
the program from jumping into the middle of functions or instructions and by removing the
ret instructions used to chain gadgets together. G-Free [28] is a compiler tool with several
protections aimed at preventing ROP attacks. It uses encrypted return addresses to prevent
attackers from overwriting control ﬂow data. It also inserts NOPs before instructions that
contain bytes that could be interpreted as ret to create alignment sleds that prevent attack-
ers from using unaligned instructions as ROP gadgets. Li et. al. [26] rewrite kernel binaries
to minimize the number of ret instructions and prevent ROP attacks targeting the kernel.
Control Flow Enforcement Control ﬂow enforcement systems prevent attackers from
redirecting the program execution by protecting the return addresses and other control ﬂow
data from malicious modiﬁcations and ensuring that indirect branches only target valid
20
locations. These systems work in conjunction with W(cid:8)X enforcement, because otherwise
attackers could overwrite the code at the valid addresses.
PointGuard [12] protects pointer data in Windows programs by encrypting pointers
stored in memory and only decrypting them when they are loaded into registers.
Transparent runtime shadow stack (TRUSS) [36] uses binary instrumentation to main-
tain a shadow stack of return addresses and veriﬁes each return with the shadow stack.
The instrumentation and checks implemented by TRUSS impose average overheads on the
order of 25-50% depending on the operating system and conﬁguration.
Control ﬂow enforcement systems [2] [47] analyze binaries to build an expected control
ﬂow graph (CFG) and then add instrumentation to check that the program execution does
not deviate from the intended CFG.
Practical Control Flow Integrity and Randomization for Binary Executables [47] is a
binary rewriting system that protects indirect calls and return statements. It creates new
sections (called springboards) in Windows Portable Executable (PE) ﬁles for calls and re-
turns. All indirect transfers are redirected through tables of the valid targets.
Control Flow Integrity [2] is a binary rewriting system that protects indirect control
transfers (calls, returns and indirect jumps) by tagging control transfers and valid destina-
tions with 32-bit identiﬁer strings. A control transfer can only jump to an address if the tag
at the destination matches the tag at the control transfer. Each control transfer may have
many potential targets, which will all have identical tags. Any transfers that target the same
address will also have identical tags.
Branch Regulation [21] prevents jumps across function boundaries except for jumps to
the beginning of functions to prevent attackers from modifying the addresses of indirect
jumps. It also duplicates the call stack and checks every return to prevent attackers from
modifying return addresses.
Remove Unused Code From Linked Libraries The library randomization technique
described by Xu and Chapin [45] also ensures that only functions that have entries in the
global offset table are available in the program space. This means that the functions avail-
able to return-into-libc attacks are limited to the ones actually used in the program.
21
22
Chapter 4
Systematic Analysis
The lack of a unifying threat model among code reuse defense papers makes it difﬁcult to
evaluate the effectiveness of defenses. The models chosen frequently overlap, but differ
enough that defenses are difﬁcult to compare. New defenses are created to respond to spe-
ciﬁc new attacks without considering the complete space of existing attacks and defenses.
While useful for mitigating speciﬁc threats (such as ROP gadgets in binaries), it is not clear
how these point defenses compose to provide a comprehensive defense.
This lack of standardized threat models and the lack of formalization of the problem
domain has made it difﬁcult to answer critical questions about the interoperability and
efﬁcacy of existing defensive techniques. Speciﬁcally, it is difﬁcult to reason about how
multiple defenses compose with one another when deployed on the same system and how
useful any defensive technique is. Frequently, for example, a defense (e.g. a form of
gadget elimination) eliminates some avenues of attack, but does not address others (e.g.
return-into-libc). Can another system be deployed to stop these? Which one? What is
the smallest set of such defenses which should be deployed to protect against every known
avenue of code reuse? Furthermore, how do these defenses change when speciﬁc scenarios
render defense prerequisites (e.g. virtualization, recompilation, or access to source code)
unavailable?
To answer these, and other questions about the code reuse attack space, in this chapter
we develop a formal model, based on satisﬁablity to represent the relationship between
attacker capabilities and requirements and the defenses that try to stop them. We use the
23
model to evaluate the effectiveness of real and proposed defenses.
4.1 Attack Space Model
Our model of the code reuse attack space uses propositional logic formulas to encode
known avenues of attack as dependencies on statements about a process image, and de-
fenses as negative implications for these statements. We use both academic literature and
the exploit development community as a corpus from which to draw attacks and defenses.
SAT-solvers (or SMT-solvers to generate minimal solutions) can be used to automate the
search for attacks in an environment where certain defenses are deployed and certain vul-
nerabilities are accessible to attackers.
The model consists of a static context of attacker dependencies, possible defenses and
the requirements for implementing those defenses. The inputs to the model are scenario
constraints which specify system-speciﬁc facts including the set of defenses that are imple-
mented, as well as system-speciﬁc constraints that affect both attacks and defenses. The
system-speciﬁc constraints include the use of Just-In-Time compilers, which preclude the
use of DEP, access to the program’s source code for both the attacker and the defender and
the ability for an attacker to make repeated attacks on the same system. The model output
is either a list of attacker capabilities that could be used to deploy malware or a statement
of security that no malware can deployed using known attack techniques within the context
of the attack space.
The evaluation is conducted by initializing the value of the variable corresponding to
successful malware deployment to be true along with the other values corresponding to at-
tacks and defenses as discussed above. If the model is satisﬁable, then a satisfying instance
corresponds to a speciﬁc potential attack.
It is also necessary to encode system-speciﬁc constraints which limit the set of de-
ployable defenses. For example, it is not possible to deploy DEP on a system that re-
lies on Just-In-Time compilers because executable code is generated and written at run-
time. To account for this, each defense is represented by two variables. The ﬁrst variable,
defense_implemented, represents whether the defense is available on a particular
24
system and is initialized before the model is run. The second variable, defense_deployed,
represents whether or not it is actually possible to deploy the defense, given the con-
straints on the entire system. The defense_deployed variable is true if and only if
the defense_implemented variable is true and all of the defense constraints are true.
This allows for the analysis of concrete, real-world scenarios in which machine role or
workload limit the possible defenses which can be deployed. It also enables us to highlight
system constraints that make it difﬁcult to secure a system. For example, systems that rely
on proprietary binaries or legacy code cannot take advantage of compiler-based tools and
systems using Just-In-Time compilers cannot use DEP.
4.1.1 Model Deﬁnition and Scope
An attack space model is an instance of propositional satisﬁability (PSAT) (cid:30) such that:
(cid:15) Atomsf(cid:30)g consists of statements about the process image
(cid:15) The literal m 2 Atomsf(cid:30)g is true if and only if a malware payload can be deployed
in the process image
(cid:15) There is some valuation (cid:22) j= (cid:30) if and only if (cid:22)m = >
(cid:15) (cid:30) is a compound formula consisting of the intersection of three kinds of sub-formula:
1. A dependency ai ! (cid:31) establishes the dependency of a the literal ai 2 Atomsf(cid:30)g,
a statement about the process image, on the sub-formula (cid:31), which may itself
be a dependency
2. A defense point ai (cid:0) deployed ! :aj establishes that if the literal ai, repre-
senting the deployment of a speciﬁc defense in the process image, is true, then
the vulnerability-related statement aj is necessarily false. That is, ai protects
against attacks relying on aj.
3. A scenario constraint ai = > or ai =? ﬁxes the valuation of the literal ai,
representing a non-negotiable fact about the process image.
The model is implemented using the Z3 [13] SMT solver. The complete model is
approximately 200 lines of code, and can easily be updated as new attacks and defenses
evolve. Note that while satisﬁability checking is NP-Complete in the general case, mod-
25
ern SAT solvers can employ a variety of heuristics and optimization to rapidly solve SAT
instances up to millions of variables and clauses [20]. In this paper, we focus on investi-
gating scenario-speciﬁc questions and on possible defense bypasses, but other approaches
using this model could also provide valuable insights. It is possible, for example, to rank
the importance of attacker dependencies (that is, some set of literals) by quantifying the
number of paths to malware deployment which rely on those literals, via analysis of the
DAG-representation of (cid:30).
As a concrete example of how our model can be used, consider the G-Free [28] de-
fense, which targets several key capabilities necessary for ROP attacks. ROP gadgets are
machine code segments ending in free-branch instructions, a class of instruction which
allows indirect jumps with respect to the instruction pointer. By controlling the memory
elements used in this indirection, gadgets can be chained together into larger ROP pro-
grams. G-Free removes free-branch instructions and prevents mid-instruction jumps using
semantics-preserving code transformations at the function level.
A portion of the attack space dealing with ROP attacks is shown in Figure 4-1 as propo-
sitional statements formalizing the dependencies between attacker capabilities. This por-
tion of the space describes the different ways attackers can locate and chain together ROP
gadgets. Each atom corresponds to a speciﬁc capability, from the list of attacker capabilities
described in section 4.2.
G-Free’s effect on this space is formalized as (gfree deployed ! :(free branch _
midfunction jmp). The atoms free branch and midfunction jmp represent free branch
If G-Free valuates True (deployed),
instructions and mid-function jumps, respectively.
these atoms will now valuate False (unavailable to an attacker). The question, then, is
whether an attack can still succeed.
Figure 4-2 provides an example of how our analysis proceeds. Note that this is not how
the solver operates, but is a high-level, human-readable view of the relationship between
attacks and defenses. The model is represented as a propositional directed acyclic graph
(PDAG) [43], where the ability to produce malware is a function of the attacker prerequi-
sites and the deployed defenses. The symbols in the diagram represent the following parts
of the model:
26
^
syscall gadgets ! (rop ^ (syscall bin _ syscall lib))
rop ! (gadgets exist ^ gadget semantics known ^ gadget loc) ^
gadgets exist ! (free branch ^ midfunction jmp)
^
free branch ! (ret _ ulbinsn _ dispatcher gadget)
^
dispatcher gadget ! (gadgets exist ^ g semantics known)
Figure 4-1: A portion of the ROP attack space
(cid:15) (cid:13) corresponds to the literals from the model which will be initialized to true or
false depending on the actual conﬁguration. These literals represent the presence of
prerequisites for an attack (vulnerabilities) or defenses that can be enabled.
(cid:15) 5 corresponds to logical OR
(cid:15) 4 corresponds to logical AND
(cid:15) (cid:5) corresponds to logical NOT. When defenses are included in the model, the attack
assumptions they prevent depend on the defense not being enabled.
The edges in the graph indicate a “depends on” relationship. For example, disabling
DEP depends on the existence of return-into-libc or ROP.
Figure 4-2 depicts one component of the larger model (including the attack space por-
tion described in Figure 4-1), illustrating G-Free [28] and its relationship to ROP. The
shaded components highlight the effect that implementing G-Free has on the rest of the
space: ROP attacks are disabled due to key pre-requisites being rendered unavailable, but
return-into-libc attacks are still possible.
All of our model’s static context (the attacks, defenses, and other constraints) are drawn
from current academic literature, documentation from popular commercial and open source
systems, and documented attacks. The attacks are discussed below, in 4.2. The defenses
and their constraints are discussed in chapter 3. The information about defenses in the
model is included with the assumption that the defenses are implemented as described in
their speciﬁcations. Testing the implementations of each defense was beyond the scope of
this project. However, a model of a particular system will highlight which defense features
are most important, and where efforts to test defense implementations should be focused.
27
Figure 4-2: Graph of G-Free’s Effects on the Code Reuse Attack Space
28
MalwareMidfuncJumpsAddressSpaceLayoutKnownUsefulFuncsSyscallinlibSyscallinexeG-FreeRetsDispatcherGadgetROPReturn-to-libcDisableDEPFreeBranchFigure 4-3 shows a PDAG with the all of the attacks and defenses included in the model.
Due to space considerations, constraints on the defenses are not included.
4.2 Attacker Assumptions
In this section we discuss the assumptions and vulnerabilities that attackers use when build-
ing malware. We discuss common vulnerabilities and knowledge that may be available in
a running system, the causes of those vulnerabilities and the methods used to turn those
vulnerabilities into malware. Each of these vulnerabilities alone does not necessarily allow
an attacker to execute malware, but attackers can combine them to construct a complete
attack.
Ablility to Overwrite Memory All the attacks discussed in this paper rely on the at-
tacker’s ability to overwrite memory on the stack or heap. In C, the default memory copy-
ing functions do not check that the source buffers ﬁt into the destination buffers. When
the source buffer is larger than the destination buffer, the excess data is copied anyway,
overwriting memory adjacent to the destination. This means that when programmers read
user-supplied data or strings into buffers without checking that the data ﬁts into the memory
allocated, attackers can supply carefully crafted inputs that overwrite important data [29].
Since control ﬂow data like function pointers and return addresses are stored on the stack
with the rest of the program data, an attacker with the ability to overwrite memory can also
gain the ability to control the program ﬂow.
Ability to Read Process Memory Buffer overread vulnerabilities and format string vul-
nerabilities [38] allow attackers to read values from memory. Attackers can use these vul-
nerabilites to ﬁnd randomized addresses [37] and read stack cookies, encryption keys and
other randomized data that is incorporated into defense systems.
Knowledge of Address Space Layout Attackers can predict the address space layout of
broadly distributed applications when operating systems load identical binaries at the same
addresses every time. Attackers can use this knowledge to jump to the correct address of
29
Figure 4-3: PDAG of Entire Systematic Model
30
ROPReturn-to-libcGadgets LocatedMidfuncJumpsDispatch GadgetFree BranchGadgetsExistMemLocatedUsefulFuncsAddrknownFuncsincludedASLRBrokenMemoryDisclosureSyscallgadgetG-FreeSyscallfilteringBinaryStirringCodeinjectionNX MemDeROPReturnlesskernelsRetsBranch regulationPaXASLRISRGadgetsemanticsknownGadgetSmashingCodeIslandsASLPMalwareSyscallsin programBruteforcepossibleinjected code [29] and to ﬁnd addresses of the functions and gadgets used as part of code
reuse attacks [34].
Partial Knowledge of Address Space Attackers can also take advantage of an incom-
plete knowledge of the address space. For example, knowledge of relative addresses within
sections of the executable can be used in combination with the ability to learn a selected
address to calculate the complete address space [35]. Furthermore, attackers that know the
contents of the Global Offset Table (GOT) or locations of a subset of the function headers
can develop a code reuse attack that chains together entire functions.
Knowledge of Instruction Set Syntax Some ROP gadgets are a result of “unintended
instructions” [34] [19] found by jumping into the middle of an instruction and executing
from there. Identifying these unintended instructions requires knowledge of the opcodes
used for each instruction. In order to predict the instruction set syntax, attackers need to
know which processor the target machine is using.
Knowledge of Gadget Semantics When ROP gadgets are smaller than complete func-
tions, their semantics can depend on the exact instructions and ordering from the exe-
cutable. This means that the gadgets available can vary for programs that are semantically
equivalent when run as intended. Finding these smaller gadgets requires knowledge of the
assembly code for the target binary.
Ability to Make Multiple Probes Some programs allow attackers to send multiple in-
puts interactively, depending on the response. This allows them to develop multi-stage
attacks that take advantage of memory secrecy violations to learn more information about
the address space [38] [37] or launch brute force attacks against randomization systems
[35]. servers
Execute Stack or Heap Data When the pages of memory on the stack or heap are
marked executable, attackers can inject code directly into memory and run it. This makes
31
it easy for attackers to run arbitrary code and to reuse the same attacks on different ap-
plications. To take advantage of executable data, attackers need to be able to write their
malicious code at a known address and then redirect the control ﬂow to that address [29].
Redirect Control Flow All the attacks we examine require diverting the control ﬂow of
the vulnerable application to an arbitrary address at least once. This is accomplished by
using a buffer overﬂow to overwrite a return address or function pointer on the stack or
heap. When the function returns or the function pointer is called, the program jumps to the
address speciﬁed by the attacker. In the case of a code injection attack, the program jumps
to the address of the code that the attacker just injected [29]. In the case of a code reuse
attack, the program jumps to an address within the executable or linked libraries.
ROP attacks rely on more detailed assumptions about the attackers’ ability to redirect
the control ﬂow; for example, jumping to gadgets that start in the middle of functions or
even in the middle of instructions [19] [34]. ROP attacks also use ret instructions or other
control ﬂow transfers to chain gadgets together and build complex attacks [9].
Large Codebase Linked C programs all link to a version of the C standard library (libc),
which provides an API for programmers to access system functions like printing to the
screen and allocating memory. Libc also provides many functions that can be useful to
attackers, like exec, which runs any program and system, which runs shell commands.
Any program that links to libc will have all of the functions in the library mapped in its
address space. Return-into-libc attacks take advantage of the fact that these functions are
available in the program space by redirecting the program control ﬂow and calling them.
4.3 Defensive Scenario Analysis
To demonstrate using our model to analyze defense conﬁgurations, we look at two appli-
cations, a closed-source web server for example, Oracle, and an open-source document
viewer, running on a server running Ubuntu Server 12.10 with standard security features
[4]. The defenses enabled by Ubuntu that apply to our code reuse model are ASLR, W(cid:8)X
32
memory and system call ﬁltering. We initialize the model with the defenses that are pos-
sible with each application and run the SAT-solver to see which (if any) attacks are still
possible.
Web Server The ﬁrst application, the web server has the following system constraints:
(cid:15) The source code is not available.
(cid:15) The sever needs to make dangerous system calls to access the network, open ﬁles
and run scripts.
(cid:15) The server will respond to multiple requests.
Based on these constraints, the model shows that it is not possible to deploy the system
call ﬁltering defense, because system call ﬁltering prevents programs from making system
calls that are not normally used. It also requires recompiling the program. The model also
shows that attacks relying on making multiple probes such as brute force attacks and attacks
exploiting memory vulnerabilities will be possible, because of the fact that the server will
respond to repeated requests from the attacker.
With these initial conditions, running the SAT-solver shows that the possibility of brute-
force attacks to break ASLR means that using return-into-libc and ROP are both possible,
while the W(cid:8)X memory prevents code injection attacks.
Document Viewer The second application, the document viewer has fewer system con-
straints than the web server so it is compatible with a larger set of defenses. Since the
source code is available and it does not require access to dangerous system calls, it can be
built with syscall ﬁltering. Like the web server, ASLR and non-executable data will be en-
abled. In the case of the document viewer, the syscall ﬁltering prevents both return-to-libc
and ROP attacks and the nonexecutable data prevents code injection attacks. Given the set
of atttacker requirements included in the model, it is not possible to deploy malware using
known attack techniques targeting the document viewer.
33
4.4 Defense Bypasses
In this section, we demonstrate how our model can be used to identify possible attack ex-
tensions which, should they exist, enable the complete bypassing of a defense (as opposed
to an attack which breaks the defense directly and invalidates its security guarantees). Not
all of these bypasses need to be entirely novel, in the sense that they have never been pro-
posed before. Rather, they are intended to highlight the weakness of even the strongest
incarnation of a defense: with a small number of added capabilities, an attacker can use
an incrementally more powerful attack to render useless a strong defense. All of our re-
sults are currently restricted to Linux environments. As future work, we intend to construct
similar bypasses for the Windows platform.
4.4.1 Pure ROP Payloads
In the wild, malware normally uses ROP to disable DEP and then injects code normally
[14], despite the fact that academic literature has posited that ROP is sufﬁcient to write full
payloads [34]. A recent Adobe Reader exploit based purely on ROP attacks supports this
notion [5]. Should this be the case, code injection is unnecessary for real malware.
The relevant model section is shown in Figure 4-4. Note that if we set the constraint
that dep broken=False, the SAT solver will be unable to ﬁnd any instance in which
malware can be deployed despite ROP being available. Speciﬁcally, in this version of the
model, code injection is a prerequisite for malware, but unbreakable DEP renders code
injection impossible.
This model conﬁguration is consistent with real-world malware, but not the academic
community’s view of ROP. Hypothetically, there is some path (illustrated as the dotted line
in Figure 4-4) which allows ROP alone to enable malware deployment.
This is indeed the case, as we prove below. The model can be updated with a path to
malware deployment from ROP which requires one added capability: the presence of a
system call gadget in the process address space. This is shown in Figure 4-5, along with a
now satisfying instance of the model in which malware is enabled alongside unbreakable
DEP.
34
Figure 4-4: ROP as an enabler of code injection
Figure 4-5: ROP as a malware deployment technique
35
DEPMALWARECODE INJECTIONDEPBROKENROPDEPMALWARECODE INJECTIONDEPBROKENROPSyscallGadgetThe proof by construction considers a successful malware deployment to consist of any
one of the following payloads: