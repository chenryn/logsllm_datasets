# Practical Over-Threshold Multi-Party Private Set Intersection

## Authors
Rasoul Akhavan Mahdavi, Thomas Humphries, Bailey Kacsmar, Simeon Krastnikov, Nils Lukas, John A. Premkumar, Masoumeh Shafieinejad, Simon Oya, Florian Kerschbaum, Erik-Oliver Blass

## Abstract
We introduce a new paradigm for multi-party private set intersection (PSI) that enables n parties to compute the intersection of their datasets without revealing any additional information. Our protocols avoid computationally expensive public-key operations and are secure in the presence of any number of semi-honest participants, even without an honest majority.

We demonstrate the practicality of our protocols through an implementation. To the best of our knowledge, this is the first implementation of a multi-party PSI protocol. For 5 parties with datasets of \(2^{20}\) items each, our protocol requires only 72 seconds. In an optimized version with slightly weaker security (augmented semi-honest model), the same task requires only 22 seconds.

The technical core of our protocol is the oblivious evaluation of a programmable pseudorandom function (OPPRF), which we instantiate in three different ways. We believe our new OPPRF abstraction and constructions may be of independent interest.

## 1. Introduction
In the problem of private set intersection (PSI), several parties each hold a set of items and wish to learn the intersection of these sets while revealing nothing else. Today, two-party PSI is a practical primitive, with extremely fast cryptographically secure implementations [PSSZ15, KKRT16, PSZ16]. These implementations are only a small factor slower than the naive and insecure method of exchanging hashed values.

Among the specific functions of interest in secure multiparty computation (MPC), PSI is one of the most strongly motivated by practical applications. Companies such as Facebook routinely use PSI to share and mine shared information [Ops13, Yun15]. In 2012, some of this sharing was performed with insecure naive hashing, where players send and compare hashes of their set elements. Today, companies are willing to tolerate a reasonable performance penalty to achieve stronger security [Yun15].

We refer the reader to [PSZ14, PSSZ15, PSZ16] for additional discussion and motivation of PSI. In our work, we consider multi-party PSI in the semi-honest model, where more than two parties wish to compute the intersection of their private datasets. This is a natural generalization of the two-party PSI, creating opportunities for richer data sharing. For example, multiple organizations like Facebook, an advertiser, and a third-party data provider can combine their data to find a target audience for an ad campaign. Another application involves enterprises with private audit logs of network connections, wishing to identify similar activities across all networks.

*Full version of a paper published in ACM CCS 2017. The first author was supported by the Office of Naval Research (ONR) contract number N00014-14-C-0113. The second and third authors were supported by the BIU Center for Research in Applied Cryptography and Cyber Security in conjunction with the Israel National Cyber Bureau in the Prime Minister’s Office. The fourth and fifth authors were partially supported by NSF awards #1149647 and #1617197.

### 1.1 State of the Art for Two-Party PSI
We focus on the state-of-the-art semi-honest PSI protocols. The earliest PSI protocols, based on Diffie-Hellman assumptions, date back to the 1980s [Sha80, Mea86, HFH99]. Protocols based on oblivious transfer extension have proven to be the fastest in practice, though they do not have the lowest communication cost. In settings where communication is at a premium, the best protocols are found in [RA17, KLS+17, CLR17]. However, these protocols require a number of exponentiations proportional to the number of items, making them slow in practice. [PSSZ15] found Diffie-Hellman-based protocols to be over 200× slower than OT-based ones.

Current state-of-the-art semi-honest PSI protocols in the two-party setting are [KKRT16, PSZ16]. They both use bucketing to reduce the number of comparisons and rely on oblivious PRF evaluation. Until our work, these ideas were not used in multi-party PSI protocols.

Most efficient PSI constructions are in the random oracle model, with security against semi-honest adversaries. Some notable exceptions include [FNP04, JL09, HL10] in the standard model and [FNP04, DCKT10, DSMRY12, FHNP16, RR17a, PSS16, RR17b] with security against malicious adversaries.

### 1.2 State of the Art for Multi-party PSI
A multi-party PSI protocol was first proposed by Freedman, Nissim, and Pinkas [FNP04], based on oblivious polynomial evaluation (OPE) using additively homomorphic encryption. Kissner and Song [KS05] proposed a multi-party PSI protocol with quadratic computation and communication complexity. The overhead was reduced to linear in the number of participants in [SS08], based on bilinear groups. An efficient solution with quasi-linear complexity in the size of the dataset is proposed in [CJS12]. Recent work [HV17] describes new protocols over a star network topology, secure in the standard model against either semi-honest or malicious adversaries. The main building block in [HV17] is an additively homomorphic public-key encryption scheme with threshold decryption. Our main building block is based on Oblivious Transfer extensions, where the number of exponentiations does not depend on the dataset size. We expect our protocols to be much faster due to the use of symmetric primitives.

### 1.3 Our Contributions
We design a modular approach for multi-party PSI that is secure against an arbitrary number of colluding semi-honest parties. Our approach can be instantiated in various ways, providing trade-offs for security, computation, and communication costs.

We implemented several instantiations of our PSI approach. To our knowledge, this is the first implementation of multi-party PSI. Our protocol is practical for sets with a million items held by around 15 parties, and even for larger instances. The high performance is due to the use of fast symmetric-key primitives. Our implementation will be made available on GitHub.

### 1.4 Main Building Block: Oblivious Programmable PRF (OPPRF)
The main building block of our protocol is the oblivious, programmable PRF (OPPRF). Recall that an oblivious PRF (OPRF) is a 2-party protocol where the sender learns a PRF key k and the receiver learns F(k, r), where F is a PRF and r is the receiver’s input. In an OPPRF, the PRF F allows the sender to "program" the output of F on a limited number of inputs. The receiver learns the PRF output but does not learn whether their input was one of the programmed points. We propose three OPPRF constructions with different trade-offs in communication, computation, and the number of points that can be programmed.

### 1.5 Basic Idea
Our PSI protocol consists of two major phases. First, in the conditional zero-sharing phase, the parties collectively and securely generate additive sharings of zero. Each party Pi obtains, for each of its items xj, a share of zero, denoted si_j = 0. If all parties have xj in their sets, the sum of their obtained shares is zero; otherwise, the sum is non-zero. In the second phase, parties perform conditional reconstruction of their shares. Each Pi programs an instance of OPPRF to output its share si_j when evaluated on input xj. If all parties evaluate the corresponding OPPRFs on the same value xj, the sum of the OPPRF outputs is zero, indicating that xj is in the intersection. Otherwise, the shares sum to a random value.

This brief overview ignores many important details, particularly how the parties coordinate shares and items without revealing the identity of the items. We propose several ways to realize each of the two PSI phases, resulting in a suite of possible instantiations. We then discuss the strengths and weaknesses of different instantiations.

A more detailed overview of the approach and the two phases is presented in Section 5, prior to the full protocol presentation.