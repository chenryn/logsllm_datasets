I'm doing some research on how to enable use of custom materials with
THREE.Sprite.
Currently in THREE.SpritePlugin uniform binding is hardcoded. Why aren't the
methods from WebGLRenderer used for this task? Is it because of incompatible
uniforms?
If THREE.SpritePlugin used standard material infrastructure custom materials
could be easily enabled just by checking material instance type in
THREE.SpritePlugin.render(). Somehow like this:
    for( i = 0; i < nSprites; i ++ ) {
        sprite = sprites[ i ];
        material = sprite.material;
        if(typeof material == 'THREE.SpriteMaterial') {
            //render using default material
        } else {
            //render using custom material
        }
    }
Usage of common material infrastructure would be appropriate to avoid too much
code duplication in separate branches of that if-statement.