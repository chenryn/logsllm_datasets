I was trying to write a unit test which relied on code that was intended to
run during `ngOnChanges`,
    it('should emit an event when the message has changed', injectAsync([TestComponentBuilder], (tcb) => {
      return tcb.createAsync(MyComponent, (fixture) => 
        var result = fixture.componentInstance.change.first().toPromise().then((change) => {
           //expectations
        });
       fixture.componentInstance.message = 'some message';
       fixture.detectChanges();
       return result;   
    });
However this does nothing as the change detector will not detect that the
input property has changed, since I'm modifying the value on the child
component.
I eventually solved the issue by wrapping the test component in another
component as follows:
    @ng.Component({
       selector: 'my-component-host'
       template: '
       directives: [MyComponent]
    }) 
    class MyComponentHost {
       message: string;
       onChange = new EventEmitter();
    }
And then ran the test on the host component instead. However, this is
needlessly cumbersome and verbose for what should be a simple unit test.
Would it be possible to add a method like `ComponentFixture.bindInput(input:
string, toValue: any)` which would modify one of the component's input
properties so that the change is detected during change detection?