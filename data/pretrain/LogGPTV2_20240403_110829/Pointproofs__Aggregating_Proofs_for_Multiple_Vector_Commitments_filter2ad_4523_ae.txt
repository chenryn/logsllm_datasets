validator
Figure 1: Using Pointproofs for smart-contract-based transactions txa.
• A transaction T that reads and/or modi(cid:128)es ma at locations S must be submi(cid:139)ed with (S, ma[S])
and the proof ˆπ for these values (computed using Prove and Aggregate). (cid:145)is proof can be generated
by the owner of a (or the computation may be delegated to someone else).
• A block proposer generates a block B of (cid:96) transactions, and cross-commitment aggregates all (cid:96)
proofs into a single proof π by running AggregateAcross algorithm.
(If transactions need to be
veri(cid:128)ed before being included in a block—for example, to protect against denial of service a(cid:139)acks—
this is done by using Verify to check the correctness of ma[S], and then running P .) (cid:145)e block
B includes {T, S, ma[S]} and the single aggregated proof π, but single-commitment proofs ˆπ are
omi(cid:139)ed. (cid:145)e block is then passed to the validators speci(cid:128)ed by the consensus.
• Each validator receives ({T, S, ma[S]}, π) and checks the correctness of all ma[S] values using the
aggregate proof π by calling VerifyAcross. Each validator then veri(cid:128)es all individual transactions T
in the block using the relevant smart contracts Pa and the already veri(cid:128)ed values ma[S].
• Once the block is agreed upon (whatever consensus mechanism is used), validators update the
commitments for all accounts a(cid:130)ected by the transactions in the block, by running the transactions
to (cid:128)gure out the new memory values m(cid:48)
a[S] and using UpdateCommit.
5.2 Alternative Approaches
We brie(cid:131)y summarize how our design compares with two alternative designs for smart contracts.
• Naive Approach: all validators store cleartext data ma for all accounts. (cid:145)e main advantage of this
approach is that there are zero bandwidth and computation overheads. In this design, the validators’
storage grows signi(cid:128)cantly with the total number of accounts. In Table 4, we show an example with
the total storage for 108 accounts at almost 3 TB.
20
• One global commitment: in this design, all validators store a single commitment for all accounts
memories: C = Commit({ma}). Also, there is a single entity (or a collection of entities) that is
responsible for generating proofs for individual transactions. (cid:145)at is, when a user of an account
a wants to submit a transaction T that depends on ma[S], the user requests a proof π from the
central entity and submits the tuple (T, ma[S], S, π) to the network. (cid:145)e validators check the
transaction and update the global commitment. One could use a variety of commitment schemes,
such as Merkle Trees, [LM19] or [BBF19] commitments. (cid:145)e advantage of this design is the minimal
storage requirements from the validators: they store one short commitment to the entire state of
the system. However, a major drawback of this design is that it relies on a central entity to generate
proofs for all users. In the solution we described above, where validators store one commitment per
account, we already reduce the validators’ storage to a few gigabytes (4.5 GB using Pointproofs for
108 accounts), which is small enough for most modern computers. We believe it is not justi(cid:128)ed to
reduce this storage even further at the expense of introducing a central entity to the system that
must be trusted for data availability.
5.3 Evaluation
We implemented Pointproofs in Rust [Alg20b] and evaluated their performance. Our timing benchmarks
were on Ubuntu running on Intel(R) Xeon(R) CPU E5-2686 v4 at 2.30 GHz. Our implementation is single-
threaded, but all functions can easily be parallelized over multiple threads. For algebraic operations we
enhanced [Alg20a] the Rust pairing library [ZkC19]. More recent implementation of pairings (such as
[SL20] and [Sup20]) are likely to provide a noticeable speed-up to our benchmarks.
Storage. We start by evaluating the storage savings introduced, applying Pointproofs to commit to
accounts memory as described in Section 5.1.
In all experiments, we assume every account memory
holds N = 1000 variables. Each variable stores a 32 bytes value. We compare the schemes of
Lai and Malavolta [LM19] over pairing and class-groups (LM-CDH, LM-CG), scheme of Boneh, B¨unz,
and Fisch [BBF19] based on RSA (BBF), and Pointproofs. For LM-CDH and Pointproofs, we place the
commitment and proofs in G1, since that results in smaller commitments and proof sizes. Table 3 shows
the sizes of commitments, openings, and public parameters of various schemes. For class groups, we use
a 2048-bit group. For pairing groups, we use BLS12-381.
Table 4 shows the storage requirements for storing all data in the clear vs.
replacing it with a
Scheme
Merkle Tree
BBF [BBF19]
LM-CG [LM19, Fig 1]
LM-CDH [LM19, Fig 2]
Pointproofs (this work)
Opening size Commitment size
320
1312
256
48
48
32
256
256
48
48
Public parameters
–
2 · 256 = 512
1002 · 256 ≈ 257 × 103
10002 · 48 + 1000 · 96 ≈ 48 × 106
1999 · 48 + 1000 · 96 ≈ 192 × 103
Table 3: Concrete lengths (in bytes) at 128-bit security for N = 1000 and 256-bit messages. For class
groups, we use a 2048-bit group. (A BBF proof consists of 5 group elements [BBF19, Section 1.1] and a
256-bit integer [BBF18, Section 3.3].) We omit eis from LM-CG parameters, as they can be reconstructed
by anyone. For pairing groups, we use BLS12-381. For Merkle Trees we assume paths of length 10 and
256-bit hashes.
21
Scheme
Plaintext
BBF and LM-CG
LM-CDH and Pointproofs
106 accounts
29.8
0.2
0.04
107 accounts
298.0
2.4
0.45
108 accounts
2980.2
23.8
4.5
savings
–
99.2%
99.8%
Table 4: Storage requirements (in GB) for storing plaintext data vs. commitments for various number of
accounts in the system. Each account memory has N = 1000 locations storing 32-bytes values.
commitment per account. In a naive solution, users store
# accounts · 1000 variables · 32 bytes.
With commitments, the storage requirements are reduced to
# accounts · |C|,
where |C| is the size of a commitment. All commitment schemes reduce storage requirements signi(cid:128)cantly
(over 99%).
Bandwidth. Figure 2 measures block bandwidth overheads for stateless blockchain model for subvector
openings of size 1 with respect to each commitment (i.e., |Sa| = 1). Assuming there are (cid:96) transactions in
a block, applying a commitment scheme that supports subvector openings (such as LM-CDH, LM-CG, or
BBF) results in overheads of
(cid:96) · |π| + (cid:96) · |ma[Sa]| · |Sa|.
Pointproofs result in the smallest overheads since (cid:96) proofs across transactions can be aggregated into a
single proof.
1,281
250
2,563
500
3,844
750
5,125 1,000
)
B
K
(
s
d
a
e
h
r
e
v
O
h
t
d
i
w
d
n
a
B
100
80
60
40
20
B
47
31
31
31
31
D
C
H
P
o i n t p
o f s
o
r
F
B
G
C
L M -
L M -
1000 Txs
200
150
100
50
63
F
B
B
94
63
63
63
o f s
o
r
H
P
o i n t p
G
C
D
C
L M -
L M -
2000 Txs
300
250
200
150
100
94
F
B
B
141
94
94
94
400
300
200
100
188
125
125
125
125
G
C
D
C
L M -
L M -
3000 Txs
o f s
o
r
H
P
o i n t p
F
B
B
o f s
o
r
H
P
o i n t p
G
C
D
C
L M -
L M -
4000 Txs
Figure 2: Per block bandwidth overhead between a block proposer and validators in stateless blockchain
for retrieving ma[Sa] and corresponding proofs, assuming |Sa| = 1. (cid:145)e four plots represent a di(cid:130)erent
number of transactions in a block (cid:96). (cid:145)e bo(cid:139)om part of each graph (blue) corresponds to cleartext
overheads for transmi(cid:139)ing ma[Sa], and the top part (red) corresponds to overheads for proofs. Pointproofs
add only 48 bytes to the cleartext data that must be transmi(cid:139)ed (and hence are invisible on the plots).
Note that if |Sa| grows, the blue bar will grow proportionately as the amount of transmi(cid:139)ed cleartext data
increases, while the red bar will remain the same, thus reducing the relative cost of proofs.
Computation. We now turn our a(cid:139)ention to running times (as already mentioned, more recent
implementations of the underlying algebra, such as [SL20], will likely provide a noticeable speed-up).
22
Prove + Aggregate
One-shot aggregated proof given S
Verify
213
211
29
27
25
23
)
s
m
(
e
m
i
t
n
u
r
20 21 22 23 24 25 26 27 28
Size of set S
Figure 3: Total runtime for proving (separately
followed by aggregation, or all at once) and
veri(cid:128)cation algorithms with respect to a single
commitment for various sizes of S. (cid:145)e runtime
of the (cid:128)rst and last algorithms grows roughly
linearly with |S|, while for all-at-once proving
it does not grow much.
AggregateAcross |S| = 1
AggregateAcross |S| = 8
Verify |S| = 1
Verify |S| = 8
)
s
m
(
e
m
i
t
n
u
r
214
213
212
211
28
27
26
1,000 2,000 3,000 4,000
# of commitments
Figure 4: Total runtime of cross-commitment
aggregation AggregateAcross and Verify algo-
rithms for the various number of commitments
(cid:96) (= # transactions in a block). (cid:145)e plots for
AggregateAcross function for |S| = 1 and |S| =
8 overlap since its runtime is independent of the
size of S.
• (cid:145)e initial Commit to 1000 values representing the memory m of a single account (done by the
account owner) runs in 54 ms.
• (cid:145)e combined cost of Prove and Aggregate to produce ˆπ for ma[S] for |S| = 1 (done during
submission of the transaction) is 54 ms. For |S| = 8, it goes up to 280 ms, which means the per-value
cost goes down to 35 ms. (cid:145)e cost of computing a same-commitment aggregated proof all at once