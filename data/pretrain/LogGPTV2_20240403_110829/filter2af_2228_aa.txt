## 前言
在复现fastjson的过程中看到rmi、LDAP等机制的使用，但一直模模糊糊搞不懂，想来搞清楚这些东西。
但是发现RMI在fastjson中的利用，只是JNDI注入的其中一种利用手段；与RMI本身的反序列化并不是很有关系。
原本想在一篇中整理清楚，由于JNDI注入知识点太过杂糅，将新起一篇说明。
此篇，我们以RMI服务入手，从基础使用开始再到反序列化利用。
## RMI
RMI（Remote Method
Invocation），远程方法调用。跟RPC差不多，是java独立实现的一种机制。实际上就是在一个java虚拟机上调用另一个java虚拟机的对象上的方法。
RMI依赖的通信协议为JRMP(Java Remote Message Protocol ，Java
远程消息交换协议)，该协议为Java定制，要求服务端与客户端都为Java编写。这个协议就像HTTP协议一样，规定了客户端和服务端通信要满足的规范。（我们可以再之后数据包中看到该协议特征）
在RMI中对象是通过序列化方式进行编码传输的。（我们将在之后证实）
RMI分为三个主体部分：
  * Client-客户端：客户端调用服务端的方法
  * Server-服务端：远程调用方法对象的提供者，也是代码真正执行的地方，执行结束会返回给客户端一个方法执行的结果。
  * Registry-注册中心：其实本质就是一个map，相当于是字典一样，用于客户端查询要调用的方法的引用。
总体RMI的调用实现目的就是调用远程机器的类跟调用一个写在自己的本地的类一样。
唯一区别就是RMI服务端提供的方法，被调用的时候该方法是 **执行在服务端** 。
> 这一点一开始搞不清楚，在攻击利用中糊涂的话会很难受，被调用的方法实际上是在RMI服务端执行。  
>
> 之前认为这一点跟fastjson利用RMI攻击相冲突，因为fastjson的payload是写在攻击者RMI服务器中，但是在实际上是在客户端执行。于RMI反序列化利用完全相反  
>  但实际上这两种利用方式发生在完全不同的流程中。我们保持疑问先放一放，将在接下来解答。
### RMI远程对象部署-调用流程
要利用先使用。
Server部署：
  1. Server向Registry注册远程对象，远程对象绑定在一个`//hostL:port/objectname`上，形成一个映射表（Service-Stub）。
Client调用：
  1. Client向Registry通过RMI地址查询对应的远程引用（Stub）。这个远程引用包含了一个服务器主机名和端口号。
  2. Client拿着Registry给它的远程引用，照着上面的服务器主机名、端口去连接提供服务的远程RMI服务器
  3. Client传送给Server需要调用函数的输入参数，Server执行远程方法，并返回给Client执行结果。
### RMI服务端与客户端实现
  1. 服务端编写一个远程接口
    public interface IRemoteHelloWorld extends Remote {
            public String hello(String a) throws RemoteException;
        }
这个接口需要
  * 使用public声明，否则客户端在尝试加载实现远程接口的远程对象时会出错。（如果客户端、服务端放一起没关系）
  * 同时需要继承Remote接口
  * 接口的方法需要生命java.rmi.RemoteException报错
  * 服务端实现这个远程接口
    public class RemoteHelloWorld extends UnicastRemoteObject implements IRemoteHelloWorld {
            protected RemoteHelloWorld() throws RemoteException {
                super();
                System.out.println("构造函数中");
            }
            public String hello(String a) throws RemoteException {
                System.out.println("call from");
                return "Hello world";
            }
        }
这个实现类需要
  * 实现远程接口
  * 继承UnicastRemoteObject类，貌似继承了之后会使用默认socket进行通讯，并且该实现类会一直运行在服务器上。  
（如果不继承UnicastRemoteObject类，则需要手工初始化远程对象，在远程对象的构造方法的调用UnicastRemoteObject.exportObject()静态方法。）
  * 构造函数需要抛出一个RemoteException错误
  * 实现类中使用的对象必须都可序列化，即都继承java.io.Serializable
  * 注册远程对象
    public class RMIServer {
        //远程接口
        public interface IRemoteHelloWorld extends Remote {
            ...
        }
        //远程接口的实现
        public class RemoteHelloWorld extends UnicastRemoteObject implements IRemoteHelloWorld{
            ...
        }
        //注册远程对象
        private void start() throws Exception {
            //远程对象实例
            RemoteHelloWorld h = new RemoteHelloWorld();
            //创建注册中心
            LocateRegistry.createRegistry(1099);
            //绑定对象实例到注册中心
            Naming.rebind("//127.0.0.1/Hello", h);
        }
        //main函数
        public static void main(String[] args) throws Exception {
            new RMIServer().start();
        }
        }
  * 关于绑定的地址很多博客会 _rmi://ip:port/Objectname_ 的形式  
实际上看rebind源码就知道 _RMI:_ 写不写都行;  
port如果默认是1099，不写会自动补上，其他端口必须写
> 这里就会想一个问题：注册中心跟服务端可以分离么??????  
>  个人感觉在分布式环境下是可以分离的，但是网上看到的代码都没见到分离的，以及官方文档是这么说的：
>
>
> _出于安全原因，应用程序只能绑定或取消绑定到在同一主机上运行的注册中心。这样可以防止客户端删除或覆盖服务器的远程注册表中的条目。但是，查找操作是任意主机都可以进行的。_
>
> 那么就是一般来说注册中心跟服务端是不能分离的。但是个人感觉一些实际分布式管理下应该是可以的，这对我们攻击流程不影响，不纠结与此。
那么服务端就部署好了，来看客户端
  1. 客户端部署
    package rmi;
    import java.rmi.Naming;
    import java.rmi.NotBoundException;
    public class TrainMain {
        public static void main(String[] args) throws Exception {
            RMIServer.IRemoteHelloWorld hello = (RMIServer.IRemoteHelloWorld) Naming.lookup("rmi://127.0.0.1:1099/Hello");
            String ret = hello.hello("input!gogogogo");
            System.out.println( ret);
        }
    }
  * 需要使用远程接口（此处是直接引用服务端的类，客户端不知道这个类的源代码也是可以的，重点是包名，类名必须一致，serialVersionUID一致）
  * Naming.lookup查找远程对象， _rmi:_ 也可省略
那么先运行服务端，再运行客户端，就可以完成调用
### 通讯细节-反序列化
但是我们需要分析具体通讯细节，来加深了解RMI的过程：  
下面使用wireshark抓包查看数据。
由于自己抓包有混淆数据进入，不好看，总体流程引用`java安全漫谈-RMI篇`的数据流程图，再自己补充细节
我把总体数据包，分成以下四块：
  1. 客户端与注册中心（1099端口）建立通讯；  
客户端查询需要调用的函数的远程引用，注册中心返回远程引用和提供该服务的服务端IP与端口
> `AC ED 00 05`是常见的java反序列化16进制特征  
>  注意以上两个关键步骤都是使用序列化语句
  1. 客户端新起一个端口与服务端建立TCP通讯  
客户端发送远程引用给服务端，服务端返回函数唯一标识符，来确认可以被调用(此处返回结果的含义打上问号，猜测大概是这个意思)
同样使用序列化的传输形式
以上两个过程对应的代码是这一句（未确定）
    RMIServer.IRemoteHelloWorld hello = (RMIServer.IRemoteHelloWorld) Naming.lookup("rmi://127.0.0.1:1099/Hello");
这里会返回一个PROXY类型函数（由于是之后补的图，代码不一样）
  1. 客户端与注册中心（1099端口）通讯，不知道在做啥
  2. 客户端序列化传输调用函数的输入参数至服务端  
服务端返回序列化的执行结果至客户端
以上调用通讯过程对应的代码是这一句
    String ret = hello.hello("input!gogogogo");
可以看出所有的数据流都是使用序列化传输的，我们尝试从代码中找到对应的反序列化语句
RMI客户端发送调用函数输入参数的序列化过程，接受服务端返回内容的反序列化语句位置分别如下：
RMI服务端与客户端readObject其实位置是同一个地方，只是调用栈不同，位置如下：
### RMI利用点
那么我们可以确定RMI是一个基于序列化的java远程方法调用机制。我们来思考这个过程存在的漏洞点：
  1. 控制？或探测可利用RMI服务
可以看到我们可以使用rebind、 bind、unbind等方法，去在注册中心中注册调用方法。那我们是不是可以恶意去注册中心注册恶意的远程服务呢？