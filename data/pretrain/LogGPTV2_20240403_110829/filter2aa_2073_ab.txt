### Major Categories of Public-Key Post-Quantum Systems

1. **Code-Based Encryption:**
   - **McEliece Cryptosystem:** This system has been in use since 1978 and is known for its short ciphertexts and large public keys. Its security is based on the difficulty of decoding error-correcting codes.

2. **Hash-Based Signatures:**
   - These signatures offer strong security and small public keys, requiring only a secure hash function (e.g., SHA3-512) to ensure the hardness of finding second preimages.

3. **Isogeny-Based Encryption:**
   - A relatively new approach, it promises short keys and ciphertexts, along with non-interactive key exchange. The security is based on the difficulty of finding isogenies between elliptic curves over finite fields.

4. **Lattice-Based Encryption and Signatures:**
   - These systems provide a balance in key and ciphertext sizes. Their security relies on the difficulty of finding short vectors in specific lattices.

5. **Multivariate-Quadratic Signatures:**
   - Known for their short signatures and large public keys, the security of these systems is based on the difficulty of solving systems of multivariate equations over finite fields.

**References:**
- Daniel J. Bernstein & Tanja Lange
- Post-Quantum Cryptography

### Post-Quantum Public-Key Signatures

#### Secret Key and Public Key
- **Secret Key:** 
- **Public Key:**

**References:**
- Daniel J. Bernstein & Tanja Lange
- Post-Quantum Cryptography

### Post-Quantum Public-Key Signatures: Hash-Based

- **Secret Key:**
- **Public Key:**
- **Prerequisites:** A good hash function, such as SHA3-512, which maps long strings to fixed-length strings.
- **Security Impact of Quantum Computers:** Quantum computers affect the hardness marginally (Grover's algorithm, not Shor's).
- **Historical Context:** The idea dates back to 1979 with Lamport one-time signatures and Merkle's extension to multiple signatures.

**References:**
- Daniel J. Bernstein & Tanja Lange
- Post-Quantum Cryptography

### On the Fast Track: Stateful Hash-Based Signatures

- **CFRG Publications:**
  - RFC 8391
  - RFC 8554
- **NIST Input Rounds:**
  - NIST has conducted two rounds of public input, with most responses positive and recommending standardization of XMSS and LMS. The primary concern is about statefulness in general.
- **ISO SC27 JTC1 WG2:**
  - A study period on stateful hash-based signatures has been initiated.

**References:**
- Daniel J. Bernstein & Tanja Lange
- Post-Quantum Cryptography

### A Signature Scheme for Empty Messages: Key Generation

- **Python Code Example:**
  ```python
  import os
  import hashlib

  def sha3_256(data):
      return hashlib.sha3_256(data).digest()

  def keypair():
      secret = sha3_256(os.urandom(32))
      public = sha3_256(secret)
      return public, secret
  ```

- **Example Usage:**
  ```python
  >>> import signempty
  >>> import binascii
  >>> pk, sk = signempty.keypair()
  >>> binascii.hexlify(pk)
  b'a447bc8d7c661f85defcf1bbf8bad77bfc6191068a8b658c99c7ef4cbe37cf9f'
  >>> binascii.hexlify(sk)
  b'a4a1334a6926d04c4aa7cd98231f4b644be90303e4090c358f2946f1c257687a'
  ```

**References:**
- Daniel J. Bernstein & Tanja Lange
- Post-Quantum Cryptography

### A Signature Scheme for Empty Messages: Signing and Verification

- **Python Code Example:**
  ```python
  def sign(message, secret):
      if message != '':
          raise Exception('nonempty message')
      signed_message = secret
      return signed_message

  def verify(signed_message, public):
      if sha3_256(signed_message) != public:
          raise Exception('bad signature')
      message = ''
      return message
  ```

- **Example Usage:**
  ```python
  >>> sm = signempty.sign('', sk)
  >>> signempty.verify(sm, pk)
  ''
  ```

- **Further Information:**
  - For more details, see Tanja’s talks page and code snippets from the PQC Mini-School at Academia Sinica.

**References:**
- Daniel J. Bernstein & Tanja Lange
- Post-Quantum Cryptography

### Best Post-Quantum Systems in Round 3 of the NIST Competition

- **Classic McEliece:**
  - Code-based encryption.
  - [Website](https://classic.mceliece.org)

- **Rainbow:**
  - Multivariate-quadratic signatures.
  - [Website](https://www.pqcrainbow.org)

- **NTRU Prime:**
  - Lattice-based encryption.
  - [Website](https://ntruprime.cr.yp.to)

- **SPHINCS+ :**
  - Hash-based signatures.
  - [Website](https://sphincs.org)

**References:**
- Daniel J. Bernstein & Tanja Lange
- Post-Quantum Cryptography

### Further Information

- **Overview Page:**
  - [PQCrypto Overview](https://pqcrypto.org)
- **Conferences:**
  - PQCrypto 2016, 2017, 2018 (with slides from talks)
  - PQCrypto 2020 (September 21-23, online, free registration)
- **EU Project:**
  - [PQCRYPTO EU Project](https://pqcrypto.eu.org)
- **Recommendations:**
  - PQCRYPTO recommendations
- **Software Libraries:**
  - libpqcrypto, pqm4, pqhw
- **Reports and Articles:**
  - Many reports, scientific articles, and overview talks
- **Summer School:**
  - [PQCRYPTO Summer School](https://2017.pqcrypto.org/school) with 21 lectures on video, slides, and exercises
- **Executive School:**
  - [Executive School](https://2017.pqcrypto.org/exec) and [PQCSchool](https://pqcschool.org/index.html) (less math, more perspective)
- **Quantum Threat Timeline:**
  - [Global Risk Institute, 2019](https://globalriskinstitute.org/publications/quantum-threat-timeline/)
- **NIST PQC Competition:**
  - [NIST Post-Quantum Cryptography Standardization](https://csrc.nist.gov/Projects/post-quantum-cryptography/Post-Quantum-Cryptography-Standardization)

**References:**
- Daniel J. Bernstein & Tanja Lange
- Post-Quantum Cryptography

### Bonus Slides

#### A Signature Scheme for 1-Bit Messages: Key Generation and Signing

- **Python Code Example:**
  ```python
  import signempty

  def keypair():
      p0, s0 = signempty.keypair()
      p1, s1 = signempty.keypair()
      return p0 + p1, s0 + s1

  def sign(message, secret):
      if message == 0:
          return ('0', signempty.sign('', secret[:32]))
      if message == 1:
          return ('1', signempty.sign('', secret[32:64]))
      raise Exception('message must be 0 or 1')
  ```

- **Example Usage:**
  ```python
  >>> import signbit
  >>> pk, sk = signbit.keypair()
  >>> sm = signbit.sign(1, sk)
  >>> signbit.verify(sm, pk)
  1
  ```

**References:**
- Daniel J. Bernstein & Tanja Lange
- Post-Quantum Cryptography

#### A Signature Scheme for 1-Bit Messages: Verification

- **Python Code Example:**
  ```python
  def verify(signed_message, public):
      if signed_message[0] == '0':
          signempty.verify(signed_message[1], public[:32])
          return 0
      if signed_message[0] == '1':
          signempty.verify(signed_message[1], public[32:64])
          return 1
      raise Exception('message must be 0 or 1')
  ```

**References:**
- Daniel J. Bernstein & Tanja Lange
- Post-Quantum Cryptography

#### A Signature Scheme for 4-Bit Messages: Key Generation

- **Python Code Example:**
  ```python
  import signbit

  def keypair():
      p0, s0 = signbit.keypair()
      p1, s1 = signbit.keypair()
      p2, s2 = signbit.keypair()
      p3, s3 = signbit.keypair()
      return p0 + p1 + p2 + p3, s0 + s1 + s2 + s3
  ```

**References:**
- Daniel J. Bernstein & Tanja Lange
- Post-Quantum Cryptography

#### A Signature Scheme for 4-Bit Messages: Signing and Verification

- **Python Code Example:**
  ```python
  def sign(m, secret):
      if type(m) != int:
          raise Exception('message must be int')
      if m < 0 or m > 15:
          raise Exception('message must be between 0 and 15')
      sm0 = signbit.sign(1 & (m >> 0), secret[:64])
      sm1 = signbit.sign(1 & (m >> 1), secret[64:128])
      sm2 = signbit.sign(1 & (m >> 2), secret[128:192])
      sm3 = signbit.sign(1 & (m >> 3), secret[192:256])
      return sm0 + sm1 + sm2 + sm3

  def verify(sm, public):
      m0 = signbit.verify(sm[:2], public[:64])
      m1 = signbit.verify(sm[2:4], public[64:128])
      m2 = signbit.verify(sm[4:6], public[128:192])
      m3 = signbit.verify(sm[6:], public[192:256])
      return m0 + 2 * m1 + 4 * m2 + 8 * m3
  ```

- **Example Usage:**
  ```python
  >>> import sign4bits
  >>> pk, sk = sign4bits.keypair()
  >>> sm11 = sign4bits.sign(11, sk)
  >>> sign4bits.verify(sm11, pk)
  11
  >>> sm7 = sign4bits.sign(7, sk)
  >>> sign4bits.verify(sm7, pk)
  7
  >>> forgery = sm7[:6] + sm11[6:]
  >>> sign4bits.verify(forgery, pk)
  15
  ```

**References:**
- Daniel J. Bernstein & Tanja Lange
- Post-Quantum Cryptography

#### Do Not Use One Secret Key to Sign Two Messages!

- **Example:**
  ```python
  >>> import sign4bits
  >>> pk, sk = sign4bits.keypair()
  >>> sm11 = sign4bits.sign(11, sk)
  >>> sign4bits.verify(sm11, pk)
  11
  >>> sm7 = sign4bits.sign(7, sk)
  >>> sign4bits.verify(sm7, pk)
  7
  >>> forgery = sm7[:6] + sm11[6:]
  >>> sign4bits.verify(forgery, pk)
  15
  ```

**References:**
- Daniel J. Bernstein & Tanja Lange
- Post-Quantum Cryptography

#### Lamport’s 1-Time Signature System

- **Python Code Example:**
  ```python
  def keypair():
      keys = [signbit.keypair() for _ in range(256)]
      public, secret = zip(*keys)
      return public, secret

  def sign(message, secret):
      msg = message.to_bytes(200, byteorder="little")
      h = sha3_256(msg)
      hbits = [1 & (h[i // 8]) >> (i % 8) for i in range(256)]
      sigs = [signbit.sign(hbits[i], secret[i]) for i in range(256)]
      return sigs, message

  def verify(sm, public):
      message = sm[1]
      msg = message.to_bytes(200, byteorder="little")
      h = sha3_256(msg)
      hbits = [1 & (h[i // 8]) >> (i % 8) for i in range(256)]
      for i in range(256):
          if hbits[i] != signbit.verify(sm[0][i], public[i]):
              raise Exception(f'bit {i} of hash does not match')
      return message
  ```

**References:**
- Daniel J. Bernstein & Tanja Lange
- Post-Quantum Cryptography