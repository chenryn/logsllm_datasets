13
Major categories of public-key post-quantum systems
▶ Code-based encryption: McEliece cryptosystem has survived since 1978. Short ciphertexts
and large public keys. Security relies on hardness of decoding error-correcting codes.
▶ Hash-based signatures: very solid security and small public keys. Require only a secure
hash function (hard to ﬁnd second preimages).
▶ Isogeny-based encryption: new kid on the block, promising short keys and ciphertexts
and non-interactive key exchange. Security relies on hardness of ﬁnding isogenies between
elliptic curves over ﬁnite ﬁelds.
▶ Lattice-based encryption and signatures: possibility for balanced sizes. Security relies on
hardness of ﬁnding short vectors in some (typically special) lattice.
▶ Multivariate-quadratic signatures: short signatures and large public keys. Security relies
on hardness of solving systems of multivariate equations over ﬁnite ﬁelds.
Daniel J. Bernstein & Tanja Lange
Post-quantum cryptography
14
Post-quantum public-key signatures
▶ Secret key
, public key
.
Daniel J. Bernstein & Tanja Lange
Post-quantum cryptography
15
Post-quantum public-key signatures
?
▶ Secret key
, public key
.
Daniel J. Bernstein & Tanja Lange
Post-quantum cryptography
15
Post-quantum public-key signatures: hash-based
▶ Secret key
, public key
.
▶ Only one prerequisite: a good hash function, e.g. SHA3-512, . . .
Hash functions map long strings to ﬁxed-length strings. H : {0, 1}∗ → {0, 1}n.
Signature schemes use hash functions in handling
.
▶ Quantum computers aﬀect the hardness only marginally (Grover, not Shor).
▶ Old idea: 1979 Lamport one-time signatures; 1979 Merkle extends to more signatures.
Daniel J. Bernstein & Tanja Lange
Post-quantum cryptography
15
On the fast track: stateful hash-based signatures
▶ CFRG has published 2 RFCs: RFC 8391 and RFC 8554
Daniel J. Bernstein & Tanja Lange
Post-quantum cryptography
16
On the fast track: stateful hash-based signatures
▶ CFRG has published 2 RFCs: RFC 8391 and RFC 8554
▶ NIST has gone through two rounds of requests for public input, most are positive and
recommend standardizing XMSS and LMS. Only concern is about statefulness in general.
Daniel J. Bernstein & Tanja Lange
Post-quantum cryptography
16
On the fast track: stateful hash-based signatures
▶ CFRG has published 2 RFCs: RFC 8391 and RFC 8554
▶ NIST has gone through two rounds of requests for public input, most are positive and
recommend standardizing XMSS and LMS. Only concern is about statefulness in general.
▶ ISO SC27 JTC1 WG2 has started a study period on stateful hash-based signatures.
Daniel J. Bernstein & Tanja Lange
Post-quantum cryptography
16
A signature scheme for empty messages: key generation
Daniel J. Bernstein & Tanja Lange
Post-quantum cryptography
17
A signature scheme for empty messages: key generation
First part of signempty.py
import os
import hashlib
def keypair():
secret = sha3_256(os.urandom(32))
public = sha3_256(secret)
return public,secret
Daniel J. Bernstein & Tanja Lange
Post-quantum cryptography
17
A signature scheme for empty messages: key generation
First part of signempty.py
import os
import hashlib
def keypair():
secret = sha3_256(os.urandom(32))
public = sha3_256(secret)
return public,secret
>>> import signempty
>>> import binascii
>>> pk,sk = signempty.keypair()
>>> binascii.hexlify(pk)
b’a447bc8d7c661f85defcf1bbf8bad77bfc6191068a8b658c99c7ef4cbe37cf9f’
>>> binascii.hexlify(sk)
b’a4a1334a6926d04c4aa7cd98231f4b644be90303e4090c358f2946f1c257687a’
Daniel J. Bernstein & Tanja Lange
Post-quantum cryptography
17
A signature scheme for empty messages: signing, veriﬁcation
Rest of signempty.py
def sign(message,secret):
if message != ’’: raise Exception(’nonempty message’)
signedmessage = secret
return signedmessage
def open(signedmessage,public):
if sha3_256(signedmessage) != public:
raise Exception(’bad signature’)
message = ’’
return message
Daniel J. Bernstein & Tanja Lange
Post-quantum cryptography
18
A signature scheme for empty messages: signing, veriﬁcation
Rest of signempty.py
def sign(message,secret):
if message != ’’: raise Exception(’nonempty message’)
signedmessage = secret
return signedmessage
def open(signedmessage,public):
if sha3_256(signedmessage) != public:
raise Exception(’bad signature’)
message = ’’
return message
>>> sm = signempty.sign(’’,sk)
>>> signempty.open(sm,pk)
’’
For more see Tanja’s talks page for lecture on hash-based signatures and code snippets
(some included here as bonus slides) at PQC Mini-School @Academia Sinica.
Daniel J. Bernstein & Tanja Lange
Post-quantum cryptography
18
The best post-quantum systems in round 3 of the NIST competition
(= systems from us and from our colleagues at Academia Sinica)
▶ https://classic.mceliece.org: Classic McEliece.
Code-based encryption.
▶ https://www.pqcrainbow.org: Rainbow.
Multivariate-quadratic signatures.
▶ https://ntruprime.cr.yp.to: NTRU Prime.
Lattice-based encryption.
▶ https://sphincs.org: SPHINCS+.
Hash-based signatures.
Daniel J. Bernstein & Tanja Lange
Post-quantum cryptography
19
Further information
▶ https://pqcrypto.org our overview page.
▶ PQCrypto 2016, PQCrypto 2017, PQCrypto 2018 all with slides from the talks;
PQCrypto 2020 (21–23 September) online, free registration.
▶ https://pqcrypto.eu.org: PQCRYPTO EU Project.
▶ PQCRYPTO recommendations.
▶ Free software libraries (libpqcrypto, pqm4, pqhw).
▶ Many reports, scientiﬁc articles, (overview) talks.
▶ https://2017.pqcrypto.org/school: PQCRYPTO summer school
with 21 lectures on video, slides, and exercises.
▶ https://2017.pqcrypto.org/exec and https://pqcschool.org/index.html:
Executive school (less math, more perspective).
▶ Quantum Threat Timeline from Global Risk Institute, 2019.
▶ https://csrc.nist.gov/Projects/post-quantum-cryptography/
Post-Quantum-Cryptography-Standardization: NIST PQC competition.
Daniel J. Bernstein & Tanja Lange
Post-quantum cryptography
20
Bonus slides
A signature scheme for 1-bit messages: key generation, signing
Daniel J. Bernstein & Tanja Lange
Post-quantum cryptography
22
A signature scheme for 1-bit messages: key generation, signing
First part of signbit.py
import signempty
def keypair():
p0,s0 = signempty.keypair()
p1,s1 = signempty.keypair()
return p0+p1,s0+s1
def sign(message,secret):
if message == 0:
return (’0’ , signempty.sign(’’,secret[0:32]))
if message == 1:
return (’1’ , signempty.sign(’’,secret[32:64]))
raise Exception(’message must be 0 or 1’)
Daniel J. Bernstein & Tanja Lange
Post-quantum cryptography
22
A signature scheme for 1-bit messages: veriﬁcation
Rest of signbit.py
def open(signedmessage,public):
if signedmessage[0] == ’0’:
signempty.open(signedmessage[1],public[0:32])
return 0
if signedmessage[0] == ’1’:
signempty.open(signedmessage[1],public[32:64])
return 1
raise Exception(’message must be 0 or 1’)
Daniel J. Bernstein & Tanja Lange
Post-quantum cryptography
23
A signature scheme for 1-bit messages: veriﬁcation
Rest of signbit.py
def open(signedmessage,public):
if signedmessage[0] == ’0’:
signempty.open(signedmessage[1],public[0:32])
return 0
if signedmessage[0] == ’1’:
signempty.open(signedmessage[1],public[32:64])
return 1
raise Exception(’message must be 0 or 1’)
>>> import signbit
>>> pk,sk = signbit.keypair()
>>> sm = signbit.sign(1,sk)
>>> signbit.open(sm,pk)
1
Daniel J. Bernstein & Tanja Lange
Post-quantum cryptography
23
A signature scheme for 4-bit messages: key generation
First part of sign4bits.py
import signbit
def keypair():
p0,s0 = signbit.keypair()
p1,s1 = signbit.keypair()
p2,s2 = signbit.keypair()
p3,s3 = signbit.keypair()
return p0+p1+p2+p3,s0+s1+s2+s3
Daniel J. Bernstein & Tanja Lange
Post-quantum cryptography
24
A signature scheme for 4-bit messages: sign & verify
Rest of sign4bits.py
def sign(m,secret):
if type(m) != int: raise Exception(’message must be int’)
if m  15:
raise Exception(’message must be between 0 and 15’)
sm0 = signbit.sign(1 & (m >> 0),secret[0:64])
sm1 = signbit.sign(1 & (m >> 1),secret[64:128])
sm2 = signbit.sign(1 & (m >> 2),secret[128:192])
sm3 = signbit.sign(1 & (m >> 3),secret[192:256])
return sm0+sm1+sm2+sm3
def open(sm,public):
m0 = signbit.open(sm[0:2],public[0:64])
m1 = signbit.open(sm[2:4],public[64:128])
m2 = signbit.open(sm[4:6],public[128:192])
m3 = signbit.open(sm[6:],public[192:256])
return m0 + 2*m1 + 4*m2 + 8*m3
Daniel J. Bernstein & Tanja Lange
Post-quantum cryptography
25
Do not use one secret key to sign two messages!
>>> import sign4bits
>>> pk,sk = sign4bits.keypair()
>>> sm11 = sign4bits.sign(11,sk)
>>> sign4bits.open(sm11,pk)
11
>>> sm7 = sign4bits.sign(7,sk)
>>> sign4bits.open(sm7,pk)
7
>>> forgery = sm7[:6] + sm11[6:]
>>> sign4bits.open(forgery,pk)
15
Daniel J. Bernstein & Tanja Lange
Post-quantum cryptography
26
Lamport’s 1-time signature system
Sign arbitrary-length message by signing its 256-bit hash:
def keypair():
keys = [signbit.keypair() for n in range(256)]
public,secret = zip(*keys)
return
public,secret
def sign(message,secret):
msg = message.to_bytes(200, byteorder="little")
h = sha3_256(msg)
hbits = [1 & (h[i//8])>>(i%8) for i in range(256)]
sigs = [signbit.sign(hbits[i],secret[i]) for i in range(256)]
return sigs, message
def open(sm,public):
message = sm[1]
msg = message.to_bytes(200, byteorder="little")
h = sha3_256(msg)
hbits = [1 & (h[i//8])>>(i%8) for i in range(256)]
for i in range(256):
if hbits[i] != signbit.open(sm[0][i],public[i]):
raise Exception(’bit %d of hash does not match’ % i)
return message
Daniel J. Bernstein & Tanja Lange
Post-quantum cryptography
27