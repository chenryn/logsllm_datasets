---
## Page 152
JavaScript
if (/regex pattern/.test(subject)(
// Successful match
}else {
// Match attenpt failed
PHP
1f (preg_match(/regex pattern/',$subject)) {
# Successful match
}else {
# Match attenpt failed
{
Perl
With the subject string held in the special variable $_:
1f (m/regex pattern/) {
# Successful match
}else {
# Match attenpt failed
With the subject string held in the variable $subject:
if ($subject =~ m/regex pattern/) {
# Successful match
}else {
# Match attenpt failed
Using a precompiled regular expression:
$regex = qr/regex pattern/;
1f ($subject =~ $regex) {
# Successful match
}else {
# Match attenpt failed
Python
For quick one-oftests, you can use the global function:
if re.search(*regex pattern", subject):
#Successful match
else:
# Match attenpt failed
136 | Chapter 3: Programming with RegularExpressions
---
## Page 153
To use the same regex repeatedly, use a compiled object:
reobj = re.compile("regex pattern°)
1f reobj -search(subject) :
# Successful match
else:
# Match attenpt failed
Ruby
1f subject =~ /regex pattern/
# Successful match
else
# Match attenpt failed
end
This code does exactly the same thing:
if /regex pattern/ =~ subject
# Successful match
else
# Match attenpt failed
end
Discussion
The most basic task for a regular expression is to check whether a string matches the
regex. In most programming languages, a partial match is sufficient for the match
function to retum true. The match function will scan through the entire subject string
to see whether the regular expression matches any part of it. The function returns true
as soon as a match is found. It retums false only when it reaches the end of the string
without finding any matches.
The code examples in this recipe are useful for checking whether a string contains
certain data. If you want to check whether a string fits a certain pattern in its entirety
(e.g., for input validation), use the next recipe instead.
C# and VB.NET
The Regex class provides four overloaded versions of the IsMatch() method, two of
which are static. This makes it possible to call IsMatch() with different parameters. The
subject string is always the first parameter. This is the string in which the regular ex-
pression will try to find a match. The first parameter must not be nul1. Otherwise,
IsMatch() will throw an ArgumentNullException.
You can perform the test in a single line of code by calling Regex, IsMatch() without
constructing a Regex object. Simply pass the regular expression as the second parameter
and pass regex options as an optional third parameter. If your regular expression has
a syntax error, an ArgumentException will be thrown by IsMatch(). If your regex is valid,
3.5 Test Ifa Match Can Be Found Within a Subjet String I 137
---
## Page 154
the call will retum true if a partial match was found, or false if no match could be
found at all.
If you want to use the same regular expression on many strings, you can make your
code more efficient by constructing a Regex object first, and calling IsMatch() on that
object. The first parameter, which holds the subject string, is then the only required
parameter. You can specify an optional second parameter to indicate the character
index at which the regular expression should begin the check. Essentially, the number
you pass as the second parameter is the number of characters at the start of your subject
string that the regular expression should ignore. This can be useful when you’ve already
processed the string up to a point, and you want to check whether the remainder should
be processed further. If you specify a number, it must be greater than or equal to zero
and less than or equal to the length of the subject string. Otherwise, IsMatch() throws
an AxgumentoutofRangeException.
Java
To test whether a regex matches a string partially or entirely, instantiate a Matcher object
as explained in Recipe 3.3. Then call the find() method on your newly created or newly
reset matcher.
Do not call String,matches(), Pattern,natches(), or atcher,natches(). Those all re-
quire the regex to match the whole string.
iduosene
To test whether a regular expression can match part of a string, call the test () method
on your regular expression. Pass the subject string as the only parameter.
regexp.test() returns true if the regular expression matches part or all of the subject
string, and false if it does not.
PHP
The preg_match() function can be used for a variety of purposes. The most basic way
to call it is with only the two required parameters: the string with your regular
expression, and the string with the subject text you want the regex to search through.
preg_match() returns 1 if a match can be found and o when the regex cannot match the
subject at all.
Later recipes in this chapter explain the optional parameters you can pass to
preg_match()
Perl
In Perl, m// is in fact a regular expression operator, not a mere regular expression con-
tainer. If you use m// by itself, it uses the $_ variable as the subject string.
138 | Chapter3: Programming with RegularExpressions
---
## Page 155
If you want to use the matching operator on the contents of another variable, use the
=α binding operator to associate the regex operator with your variable. Binding the
regex to a string immediately executes the regex. The patterm-matching operator returms
true if the regex matches part of the subject string, and false if it doesn’t match at all.
If you want to check whether a regular expression does not match a string, you can
use I~, which is the negated version of =α.
Python
The search() function in the re module searches through a string to find whether the
regular expression matches part of it. Pass your regular expression as the first parameter
and the subject string as the second parameter. You can pass the regular expression
options in the optional third parameter.
The re.search() function calls re.conpile(), and then calls the search() method on
the compiled regular expression object. This method takes just one parameter: the
subject string.
If the regular expression finds a match, search() returns a Matchobject instance. If the
regex fails to match, search() returns None. When you evaluate the returned value in
an If statement, the Matchobject evaluates to True, whereas None evaluates to False.
Later recipes in this chapter show how to use the information stored by Matchobject.
Don’t confuse search() with match(). You cannot use ratch() to find a
match in the middle of a string, The next recipe uses match().
Ruby
The =α operator is the patterm-matching operator. Place it berween a regular expression
and a string to find the first regular expression match. The operator returns an integer
with the position at which the regex match begins in the string. It returns nil if no
match can be found.
This operator is implemented in both the Regexp and String classes. In Ruby 1.8, it
doesn't matter which class you place to the left and which to the right of the operator.
In Ruby 1.9, doing so has a special side effect involving named capruring groups.
Recipe 3.9 explains this.
In all the other Ruby code snippets in this book, we place the subject
rihThisssistyfwhi
string to the left of the =α operator and the regular expression to the
the =~ syntax, and avoids the Ruby 1.9 magic with named capturing
groups that people might not expect.
3.5 Test Ifa Match Can Be Found Within a SubjectString I139
---
## Page 156
See Also
Recipe 3.6 shows code to test whether a regex matches a subject string entirely
Recipe 3.7 shows code to get the text that was actually matched by the regex.
3.6TestWhetheraRegexMatchestheSubjectStringEntirely
Problem
You want to check whether a string fits a certain pattern in its entirety. That is, you
want to check that the regular expression holding the patterm can match the string from
start to end. For instance, if your regex is regex*pattern>, it will match input text
punot aq ues uxaed xagax au1 Bus iauo aunounq uxaed xasax jo ussuos
Solution
C#
For quick one-off tests, you can use the static call:
bool foundMatch = Regex, IsMatch(subjectString, @"\Aregex pottern\Z");
To use the same regex repeatedly, construct a Regex object:
Regex regex0bj = new Regex(é*\Aregex pottern\Z");
bool foundMatch = regexObj . IsMatch(subjectString);
VB.NET
For quick one-off tests, you can use the static call:
(z\uxaod xaay。 *3uxasaqns)upest*xadag = ytepuno wo
To use the same regex repeatedly, construct a Regex object:
Dim RegexObj As New Regex("\Aregex pottern\Z")
Dim FoundMatch = Regexobj -IsMatch(SubjectString)
The IsMatch( ) call should have SubectString as the only parameter, and the callshould
be made on the Regexobj instance rather than the Regex class:
Dim FoundMatch = RegexObj -IsMatch(SubjectString)
Java
If you want to test just one string, you can use the static call:
boolean foundMatch = subjectString,matches("regex pattern*);
If you want to use the same regex on multiple strings, compile your regex and create a
matcher:
140 |  Chapter 3: Programming with RegularExpressions
---
## Page 157
Pattern regex = Pattern.compile(“regex pottern");
Matcher regexMatcher = regex,matcher(subjectString);
boolean foundMatch = regexMatcher,matches(subjectString);
JavaScript
if (/^regex patterms/ .test(subject)) {
// Successful match
}else {
// Match attenpt failed
PHP
if (preg_match(′/\Aregex pottern\Z/′, $subject)) {
# Successful match
}else {
# Match attenpt failed
Perl
if ($subject =~ m/\Aregex pattern\Z/) {
# Successful match
}else {
# Match attenpt failed
Python
For quick one-off tests, you can use the global function:
if re,match(x*regex pottern\z", subject):
# Successful match
else:
# Match attenpt failed
To use the same regex repeatedly, use a compiled object:
xaod xabaxx)aduooax =qox
if reobj -match(subject):
# Successful match
else:
# Match attenpt failed
Ruby
if subject =~ /\Aregex pottern\Z/
# Successfu1 match
else
 sai s xaagea g
---
## Page 158
# Match attenpt failed
end
Discussion
Normally, a successful regular expresson match tells you that the pattem you want is
somewhere within the subject text. In many situations you also want to make sure it
completely matches, with nothing else in the subject text. Probably the most common
situation calling for a complete match is validating input. Ifa user enters a phone num-
ber or IP address but includes extraneous characters, you want to reject the input.
The solutions that use the anchors $ and \Z also work when youre processing a file
line by line (Recipe 3.21), and the mechanism you're using to retrieve the lines leaves
the line breaks at the end of the line. As Recipe 2.5 explains, these anchors also match
before a final line break, essentially allowing the final line break to be ignored.
In the following subsections, we explain the solutions for various languages in detail.
C# and VB.NET
The Regex class in the .NET Framework does not have a function for testing whether
a regex matches a string entirely. The solution is to add the start-of-string anchor A
to the start of your regular expression, and the end-of-string anchor , make sure to group the alternation before adding the anchors:  to the end of
your regular expression. Make sure that you do not set the /n flag for your regular
expression. Only without /m do the caret and dollar match only at the start and end of
the subject string. When you set /m, they also match at line breaks in the middle of the
string-
With the anchors added to your regular expression, you can use the same
regexp .test() method described in the previous recipe.
PHP
PHP does not have a function for testing whether a regex matches a string entirely. The
solution is to add the start-of-string anchor <^A to the start of your regular expression,
and the end-of-string anchor \Z to the end of your regular expression. This way, the
regular expression can only match a string either in its entirety or not at all. If your
regular expression uses alternation, as in cone |tao|three, make sure to group the al-
ternation before adding the anchors: <\A(? :one |tuo |three)\Z
With youregular expression amended to match whole srings, you can use the same
preg_match() function as described in the previous recipe.
Perl
Perl has only one pattern-matching operator, which is satisfied with partial matches. If
you want to check whether your regex matches the whole subject string, add the
Start-of-string anchor \A to the start of your regular expression, and the end-of-string
anchor \Z to the end of your regular expression. This way, the regular expresson can
only match a string either in its entirety or not at all. If your regular expression uses
altermation, as in cone |tuo|three), make sure to group the altemation before adding
the anchors: <\A(? :one |two |three)\Z).
With your regular expression amended to match whole strings, use it as described in
the previous recipe.
3.6 Test Whether aRegex Matches the Subject String Entirely | 143
---
## Page 160