title:Identifying Open-Source License Violation and 1-day Security Risk
at Large Scale
author:Ruian Duan and
Ashish Bijlani and
Meng Xu and
Taesoo Kim and
Wenke Lee
Identifying Open-Source License Violation and 1-day Security
Risk at Large Scale
Ruian Duan∗
Ashish Bijlani∗
Meng Xu
Georgia Institute of Technology
Georgia Institute of Technology
Georgia Institute of Technology
Taesoo Kim
Georgia Institute of Technology
ABSTRACT
With millions of apps available to users, the mobile app market is
rapidly becoming very crowded. Given the intense competition, the
time to market is a critical factor for the success and profitability
of an app. In order to shorten the development cycle, developers
often focus their efforts on the unique features and workflows of
their apps and rely on third-party Open Source Software (OSS) for
the common features. Unfortunately, despite their benefits, care-
less use of OSS can introduce significant legal and security risks,
which if ignored can not only jeopardize security and privacy of
end users, but can also cause app developers high financial loss.
However, tracking OSS components, their versions, and interde-
pendencies can be very tedious and error-prone, particularly if an
OSS is imported with little to no knowledge of its provenance.
We therefore propose OSSPolice, a scalable and fully-automated
tool for mobile app developers to quickly analyze their apps and
identify free software license violations as well as usage of known
vulnerable versions of OSS. OSSPolice introduces a novel hierarchi-
cal indexing scheme to achieve both high scalability and accuracy,
and is capable of efficiently comparing similarities of app binaries
against a database of hundreds of thousands of OSS sources (billions
of lines of code). We populated OSSPolice with 60K C/C++ and
77K Java OSS sources and analyzed 1.6M free Google Play Store
apps. Our results show that 1) over 40K apps potentially violate
GPL/AGPL licensing terms, and 2) over 100K of apps use known
vulnerable versions of OSS. Further analysis shows that developers
violate GPL/AGPL licensing terms due to lack of alternatives, and
use vulnerable versions of OSS despite efforts from companies like
Google to improve app security. OSSPolice is available on GitHub.
∗Co-first authors with equal contribution.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
© 2017 Association for Computing Machinery.
ACM ISBN 978-1-4503-4946-8/17/10...$15.00
https://doi.org/10.1145/3133956.3134048
1
Wenke Lee
Georgia Institute of Technology
CCS CONCEPTS
• Security and privacy → Software security engineering; Dig-
ital rights management; • Software and its engineering → Soft-
ware libraries and repositories;
KEYWORDS
Application Security; License Violation; Code Clone Detection
1 INTRODUCTION
The mobile app market is rapidly becoming crowded. According
to AppBrain, there are 2.6 million apps on Google Play Store alone
[5]. To stand out in such a crowded field, developers build unique
features and functions for their apps, but more importantly, they
try to bring their apps to the market as fast as possible for the first-
mover advantage and the subsequent network effect. A common
development practice is to use open-source software (OSS) for the
necessary but “common” components so that developers can focus
on the unique features and workflows. With the emergence of public
source code hosting services such as GitHub [34] and Bitbucket [6],
using OSS for faster app development has never been easier. As of
October 2016, GitHub [34] reported hosting over 46 million source
repositories (repos), making it the largest source hosting service in
the world.
Despite their benefits, OSS must be used with care. Based on our
study, two common issues that arise from the careless use of OSS
are software license violations and security risks.
License violations. The use of OSS code in apps can lead to
complex license compliance issues. OSS are released under a vari-
ety of licenses, ranging from the highly permissive BSD and MIT
licenses to the highly restrictive ones: General Public License (GPL),
and Affero General Public License (AGPL). Use of OSS implicitly
bounds the developer to the associated licensing terms, which are
protected under the copyright laws. Consequently, failure to com-
ply with those terms could have legal ramifications. For example,
Cisco and VMWare were involved in legal disputes for failing to
comply with the licensing terms of Linux kernel [69, 85].
Security risks. OSS may also contain exploitable vulnerabilities.
For instance, recently reported vulnerabilities in Facebook and
Dropbox SDKs [2, 53] could be exploited to hijack users’ Facebook
accounts and link their devices to attacker-controlled Dropbox
Session J3:  Problematic PatchesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2169accounts, respectively. Vulnerabilities found in OSS are typically
patched in subsequent releases while apps using old, unpatched
versions can put end users’ security and privacy in jeopardy.
To obviate such issues, app developers must diligently manage
all OSS components in their apps. In particular, developers not only
need to track all OSS components being used and regularly update
them with security fixes, but also comply with the license policies
and best practices in all OSS components and follow license changes
across versions.
However, manually managing multiple OSS components, their
versions, and interdependencies can quickly become very tedious
and error-prone, particularly if an OSS is imported with little to
no knowledge of its provenance. Moreover, license engineering
and compliance require both legal as well as technical expertise,
which given the diversity of software licenses, can prove costly and
time-consuming. Consequently, while some developers may ignore
the need for managing OSS to avoid additional overheads, others
may fail to correctly manage them due to ignorance or lack of tools
and expertise, thereby inadvertently introducing security risks and
license violations.
We have developed OSSPolice, a scalable and fully-automated
tool to quickly analyze app binaries to identify potential software
license violations and usage of known vulnerable OSS versions.
OSSPolice uses software similarity comparison to detect OSS reuse
in app binaries. Specifically, it extracts inherent characteristic fea-
tures (a.k.a. software birthmarks [37]) from the target app binary
and efficiently compares them against a database of features ex-
tracted from hundreds of thousands of OSS sources in order to
accurately detect OSS versions being used. In the event that the
correct version is missing from our database, or if two versions have
no distinct features, in line with our findings, the closest version of
OSS is detected.
Based on the detected usage of OSS versions, the ones containing
known software security vulnerabilities or under restrictive free
software licensing terms are reported. OSSPolice polls the Com-
mon Vulnerabilities and Exposures (CVE) database to track OSS
versions affected with security vulnerabilities. We also include vul-
nerabilities found by Google’s App Security Improvement program
(ASIP) [41]. In this work, we only track OSS usage under GPL and
AGPL licenses due to their wide usage and highly restrictive terms
(e.g. require derivatives works to open-source) and flag detected
cases as potential violations if app sources are not found. It is worth
noting that OSSPolice focuses solely on the technical aspects of
license compliance, not the legal issues. Although OSSPolice does
perform extra validation before reporting an app, such as check-
ing whether its source code is publicly available on the developer
website or popular code hosting webservices (e.g., GitHub), raising
legal claims is not a goal of OSSPolice.
The current prototype of OSSPolice has been designed to work
with Android apps due to its popularity and market dominance.
Nevertheless, the techniques used can also easily be applied to iOS,
Windows, and Linux apps. OSSPolice can analyze both types of An-
droid binaries: C/C++ native libraries and Java Dalvik executables
(dex).
A number of code reuse detection approaches have been pro-
posed, but each presents its own set of limitations when applied
2
to our problem setting. For instance, whereas some assume avail-
ability of app source code [8, 9, 45, 49, 51], others either support
only a subset of languages (C [39], Java [7, 10, 82]) or use compu-
tationally expensive birthmark features to address software theft
[23, 59, 65, 66, 90, 91], known bugs [28, 30] and malware detection
[25, 93, 96]. In contrast, the goal of OSSPolice is not to detect de-
liberate repackaging, software theft, or malware; rather it is a tool
for developers to quickly identify inadvertent license violations
and vulnerable OSS usage in their apps. To this end, we assume
that app binaries have not been tampered with in any specific way
to evade OSS reuse detection. Based on this assumption, we trade
accuracy in the face of code transformations to gain performance
and scalability in the design space. We use syntactical features,
such as string literals and exported functions when matching na-
tive libraries against OSS sources. This is because these features are
easy to extract and preserved even across stripped libraries. How-
ever, since Java code in Android apps is commonly obfuscated with
identifier renaming, OSSPolice has been designed to be resilient to
such simple code transformations. To match dex files against Java
OSS, we rely on string constants and proven obfuscation-resilient
features, such as normalized classes [7] and function centroids [22]
as features.
OSSPolice maintains an indexing database of features extracted
from OSS sources for efficient lookup during software similarity
detection. One approach to build such a database, as adopted by BAT
[39], is to create a direct (inverted) mapping of features to the target
OSS. However, this approach fails to consider large code duplication
across OSS sources [62] and, hence, suffers from low detection
accuracy and poor scalability (§3.4.1). Indexing multiple versions of
OSS further adds to the problem. OSSPolice, therefore, uses a novel
hierarchical indexing scheme that taps into the structured layout
(i.e., a tree of files and directories) of OSS sources to apply multiple
heuristics for improving both, the scalability and the detection
accuracy of the system (§3.4.3).
Our experiments show that OSSPolice is capable of efficiently
searching through hundreds of thousands of source repos (billions
of lines of code). We evaluated the accuracy of OSSPolice using
open-source Android apps on FDroid [29] with manually labeled
ground truth. OSSPolice achieves a recall of 82% and a precision
of 87% when detecting C/C++ OSS usage and a recall of 89% and a
precision of 92% when detecting Java OSS usage, which outperforms
both BAT [39] and LibScout [7]. For version pinpointing, OSSPolice
is capable of detecting 65% more OSS versions than LibScout [7].
In summary, we contribute as follows:
• We identify the challenges in accurately comparing an app
binary against hundreds of thousands of OSS source code
repos and propose a novel hierarchical indexing scheme to
achieve both the accuracy and scalability goals.
• We present the design and implementation of OSSPolice, a
scalable and fully-automated system for OSS presence de-
tection in Android apps, and further use the presence infor-
mation to identify potential license violations and usage of
vulnerable OSS versions in Android apps.
• We apply OSSPolice to analyze over 1.6 million free Android
apps from Google Play Store and compare their similarity
Session J3:  Problematic PatchesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2170to 60K C/C++ and 77K Java OSS versions. To the best of our
knowledge, this is the first large-scale study to do so. We
present our findings, highlighting over 40K cases of potential
GPL/AGPL violations and over 100K apps using vulnerable
OSS versions (§6).
• We conduct further analysis on the detected results and
find that developers violate GPL/AGPL licensing terms due
to lack of choice, and use vulnerable OSS versions despite
efforts from companies like Google to improve app security.
2 RELATED WORK
Previous efforts related to OSSPolice can be categorized into the
two lines of work.
Software similarity detection. Software similarity detection
techniques compare one software to another to measure their simi-
larity. Various such techniques have been studied and applied in
across domains. However, none of those are suitable for our prob-
lem setting, i.e. comparing Java dex files as well as fused C/C++
libraries in Android apps against hundreds of thousands of source
code repos §3.4.1.
Code clone detection. One such technique is code clone detection
that identifies the reuse of code fragments across source repos. It
was historically used to improve software maintainability [8, 9, 11,
27, 47–49, 52], but has also been studied to detect software theft (or
plagiarism) [1, 59, 65, 66, 74] and cloned bugs [32, 45, 57]. These
methods assume the availability of app source code. OSSPolice, on
the other hand, detects OSS code reuse in app binaries since their
sources may not be available.
Java/Dalvik bytecode clone detection. Some works have studied
similarity detection in Java bytecode code. Baker and Manber [10]
Tamada et al. [82] proposed birthmarking to detect software theft.
Techniques to detect app cloning have also been studied to
identify malicious and pirated apps. They computed similarity be-
tween apps using code-based similarity techniques [22, 38, 96] or
by extracting semantic features from program dependency graphs
[25, 26]. Other approaches have also studied third-party library
detection on Android, ranging from naïve package name based
[16, 36] whitelisting, to code clustering [26, 56, 61, 88] and machine
learning [67] based approaches. In particular, WuKong [88] auto-
matically identify third-party library uses with no prior knowledge
with code clustering techniques, LibRadar [61] extended it by gen-
erating a unique profile for each cluster identified, and LibD [56]
further adopted feature hashing algorithm to achieve scalability.
However, these approaches are either not scalable or rely on the
assumption that the third-party code is used by many apps without
modification, which might not always hold true [79].
In contrast, LibScout [7] considered unused code removal and
proposed a different feature: normalized class, as a summary of ac-
tual class to detect third-party libraries with obfuscation resiliency.
However, LibScout [7] doesn’t scale to a large number of OSS, be-
cause they iterate over all the third-party libraries to find matches
for candidate apps.
OSSPolice, however, does not assume that the OSS binaries can be
built from sources or obtained.
There are also approaches proposed to detect OSS code reuse in
binaries [39, 50]. [50] computes signatures of functions present in
both source and binary using the size of arguments and local vari-
ables, then employs k-gram method to perform similarity analysis.
Similarly, Binary Analysis Tool (BAT) [39] extracts strings in bi-
nary files and compares them with information extracted from OSS
source repos to perform similarity measurement analysis. However,
both of them have not been designed to scale to the amount of
repos OSSPolice faces. Moreover, they suffer from low detection
accuracy due to inability to handle internal code cloning across
OSS sources §3.4.1.
Commercial services. A number of commercial services, such as
Black Duck Software’s Protex [15], OpenLogic [72], Protecode [81],
and Antelink [3] are also available that assist enterprises in manag-
ing OSS license compliance and identifying security risks. However,
they scan source code to detect OSS code clones by comparing
against their own database of OSS sources.
Third-party component security. [68] presented a threat sce-
nario that target WebView apps and [63] further found that 28%
of apps that uses embedded web browsers have at least one vul-
nerability, either due to use of insecure code or careless mistakes.
[21, 89, 97] vetted the assumptions and implementations for au-
thentication protocols in third-party SDKs and found that three
popular SDKs are vulnerable. They further verified that many apps
that relies on these SDKs are vulnerable too.
While similar in the final goal, these works actively test whether
an app violates the specified protocols/procedures while OSSPolice
only passively test whether an app is vulnerable by inferring from
the presence of vulnerable versions of OSS components. [13] is also
a passive approach, however, given a specific vulnerable version of
OSS component, it uses dynamic driving to trigger the buggy code
while OSSPolice is purely static.
Given the wide spread of vulnerable third-party components in
mobile apps, researchers have also proposed various mechanisms
to isolate untrusted third-party code from the code originated from
app developers. [80] isolated components in native code; [76, 94]
isolated operation of ad libraries from the rest of the app; [71, 92]
provided ways to achieve access control on untrusted code. These