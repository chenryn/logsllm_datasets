Diversification
Code diversification is a defense technique that probabilistically
limits the impact of an attack to a known target [48]. For example,
randomizing the instructions in a binary program can prevent a
wide range of code-reuse attacks which rely on prior knowledge
of the layout of the victim binary code. Moreover, ROP attacks
often chain together gadgets in binaries to construct attack pay-
loads which are also sensitive to the layout of the binaries. Code
diversification, which randomizes the layout of a binary, can signif-
icantly reduce the success rate of these attacks by randomizing the
locations of code (and ROP gadgets) in the binary [46].
In this case study, we show the application of RevARM on fine-
grained code diversification. Specifically, we used RevARM to per-
form instruction-level diversification on the ArduPilot firmware
and four different iOS apps, including Gmail, Twitter, Amazon, and
PerformanceTest Mobile benchmarking app [30]. Specifically, we
inserted an increasing number of NOP instructions at arbitrary lo-
cations in the binaries and verified that all of the programs run
correctly. To test the code diversification with the finest granularity,
we inserted a NOP instruction before every instruction in the target
binary. The details of the experiment is summarized in Table 4.
Table 5: List of real-world bugs in ArduPilot. We patch these
bugs in the stripped firmware binary using RevARM with-
out using any symbol information.
Target
Memory
Memory
Memory
Memory
File system
File system
Description
Bug ID Module
String null-terminated bug
B1 [13] ArduCopter
Double free bug — Heap corruption
PX4 driver
B2 [8]
Potential integer overflow
PX4 driver
B3 [7]
B4 [14]
Parsing bug — Buffer overflow
PX4 driver
B5 [5] ArduCopter Duplicated directory creation
B6 [3] NuttX
File system clustering
4.2 Case Study II: Vulnerable Function
Patching
In this section, we show that RevARM can patch vulnerable func-
tions in a stripped ArduPilot firmware binary. Vulnerable iOS apps
are removed by Apple from App Store without an official announce-
ment, but ArduPilot vulnerabilities can lead to property damage or
even personal injury. Thus, we choose to demonstrate patching the
ArduPilot firmware.
The target bugs we patched using RevARM are listed in Table 5.
B1 is a null-terminated string bug in the GCS_MAVLink module in
the ArduPilot firmware. The buggy function incorrectly uses the
communication protocol between the UAV and the GCS. Specifically,
it can send a wrong status report to the GCS and cause the GCS
to send back an invalid command. B2 is a double free bug in a
device driver, called i2C. A device pointer is not assigned null after
heap deallocation by mistake. This leads to a heap corruption when
later code tries to illegally deallocate the same heap memory again,
which was already deallocated previously. The B3 case is an integer
overflow bug in an I/O device driver. The driver computes a float
actuator state value and an unregulated computation of the value
causes an integer overflow, which leads to an unexpected flight
control state. For B4, the bug is a stack buffer overflow in i2C.
This target function calls the sscanf function to copy an input
string to a fixed-size local buffer. Before our patch was deployed,
there was no string length checking. Therefore, it can lead to a
stack overflow which allows an attacker to hijack the control flow
via manipulation of a return address. On the other hand, B5 is
a file system bug in ArduPilot. The module DataFlash_File is
responsible for logging UAV operation information on an SD card.
This bug leads to SD card corruption by creating two directories
for logging because this function did not check whether a logging
directory was previously created. B6 is a second file system bug
in the NuttX RTOS. Two vulnerable functions are responsible for
file read and write respectively. However, they do not check file
system cluster boundaries when reading and writing file system,
which leads to file content corruption.
Patching the above cases require two steps, extract and embed-
ding functions. In the extraction step, we used a patched binary
and let RevARM extract the functions’ instructions, data, and refer-
ence information. However, there are two types of data we should
handle: RevARM first must store all data referred by any instruc-
tion that belongs to a function, and second, if this data is a pointer
value, RevARM must also preserve its reference information. Then,
RevARM stores extracted function information in an instrumenta-
tion specification file. In the embedding step, RevARM interprets
the instrumentation specification file and replaces/inserts the code
and data. RevARM basically replaces each instruction with a new
instruction. Any remaining instructions are inserted between the
end of the code and the start of the data. Then, RevARM rebuilds
reference relationships based on the instrumentation specification.
However, there are a few cases to handle when patching data: If
new data belongs to a function, then RevARM inserts it into the
code section. However, the original location of some data does not
belong within a function. We can see this example in B4. B4 regu-
lates stack overflow by changing the destination string of sscanf.
Although we can replace such unpatched string with a new string,
there is a possibility that the string is reused by other functions.
Therefore, we insert such data at the end of its original section.
Other than the above cases, there are a substantial number of
patched bugs in the ArduPilot repository. RevARM assumes that
there is no open source repository for its target (as with many
commercial UAVs), and we only leverage this information to identify
which functions are vulnerable and their locations. This technique
is also applicable to library patches since libraries for UAVs are
statically compiled in their firmware. If other UAVs are patched and
the patched vulnerabilities are in commonly used libraries, we also
can utilize them for patches across other vulnerable systems.
4.3 Case Study III: Preventing Private API
Abuses via SFI
Abusing private APIs has been shown to be an iOS specific attack
vector [19, 63]. Unlike public APIs, which Apple allows developers
to freely use, private APIs are undocumented functions that third-
party developers are not allowed to directly use. This is because
many of the private APIs are security-critical, which could allow
an attacker to leak the user’s private information and maliciously
control the device.
Several works have attempted to prevent the abuse of private
APIs, such as MoCFI [40] and XiOS [38]. However, these have
technical limitations. For example, MoCFI [40] requires jailbreaking
the target iOS platform for instrumentation. Similarly, XiOS [38]
provides limited protection on private APIs [42] by preventing
attackers from inferring the addresses of the private APIs.
To resolve the above issues, RevARM applies SFI to prevent
the code section (__text) from accessing private APIs and sym-
bol address modifications. To enable this, RevARM modifies the
code sections to block write access to symbol pointers and indirect
branch to library codes directly. We note that RevARM allows the
stub code section to access both sections to preserve the correct-
ness of the program because the stub code section is responsible
for accessing symbol pointers and library functions.
In order to enforce SFI, RevARM also needs to modify the bi-
nary layout and inserts SFI instructions. To modify a binary lay-
out, RevARM modifies sizes of segments and sections in the input
binary. For SFI instruction insertions, we insert SFI instructions
(described in NaCl for ARM [56]). However, SFI does not work well
simply with SFI instruction insertions. Control flows must execute
SFI instructions before potentially vulnerable instructions. Con-
sequently, it requires aligning each SFI instruction and function
address, since some attacks can directly jump to target instructions
without executing SFI instructions. In order to adjust this alignment,
we inserted padding instructions to forcibly fit the alignment.
Lastly, in order to evaluate the efficiency of our added SFI pro-
tection, we implemented two attack cases. Private API calls using
inferred and actual API addresses. The first attack we implemented
was described earlier in XiOS [38]: The private API addresses can be
inferred by a statically loaded symbol, (dyld_stub_binder) before
app execution. Attackers can abuse this symbol with some offset
to call private APIs. We implemented this attack case by calling
a dynamic library loading function, which is a private API and
can load arbitrary libraries including private libraries. However,
our SFI enforcement does not allow to access such symbol sec-
tion directly from code sections. Therefore, our SFI enforced app is
protected against attacks which try to infer private API addresses.
The second attack is calling private APIs using direct addresses
via signature-based scanning to find target private APIs [42]. XiOS
cannot prevent such attack because XiOS only hides symbol values
— not preventing the call to a private API. On the other hand, our
added app protections do prevent such attacks because SFI prevents
malicious accesses to private APIs.
4.4 Case Study IV: Control System Status
Monitoring
Control systems heavily depend on parameters, commands of the
ground control station (GCS), sensor inputs, control status and
control model. Out of such factors, such a control system deter-
mines a new system status based on dynamic variables, including
sensor input, command, current control status and control model.
In order to prevent and observe unexpected behavior within such
a system, it is necessary to observe such dynamic variables. As a
case study of monitoring these variables, we insert our monitoring
instrumentation into a UAV’s firmware.
An adversary can cause an anomalous system status by changing
dynamic control variables into exceptional values, which leads
to system disruption or crash. Such system disruption has been
achieved by sensor attacks via intentional ultrasonic signals [58]
and control hijacks [9] via wireless communication modules. In
order to prevent such attacks, we inserted control variable status
monitoring as the first step of anomaly system status regulation.
Our instrumentation lets UAVs trace status variables and sends
these traces to a remote UAV managing system.
We summarize our target functions in Table 6. All of them are
related directly to the above attack scenarios. For example, in the
’intentional ultrasonic signals’ case, our target UAV utilizes multiple
sensors some of which are vulnerable to intentional ultrasonic
signals [58]. Furthermore, a communication protocol vulnerability
can be abused by malicious attackers. One demonstrative example
Table 6: List of ArduPilot functions instrumented for the
run-time status monitoring of the flight controller.
Class
AC_PID
AP_Mount_Servo
AC_AttitudeControl
AC_PosControl
AP_InertialNav_NavEKF
AP_GPS
AP_InertialSensor
None (OS C Function)
GCS_MAVLINK
Purpose of instrumentation
Get PID control values
Get the desired motor speed
Get 3-axis attitude for balancing
Get the target position of the UAV
Function
get_p, get_i, get_d
move_servo
rate_bf_roll_pitch_yaw, etc
set_pos_target
get_altitude, get_latitude, etc Get estimated geometric information
Get estimated velocity and location
velocity, location, etc
Get estimated inertial sensor values
get_gyro, get_accel
Get shell commands
nsh_parse
handleMessage
Handle MAVLink messages from GCS
Figure 8: Run-time and space overhead with CoreMark.
is the SynerComm A-Team’s work [9] which shows how to hijack
a UAV using MAVLink. This communication protocol is widely
used in UAVs including ours. With our status variable monitoring,
security investigators are able to determine which functions are
vulnerable or involved in an anomalous system status. Then, they
can not only test but also limit anomaly values by adding robust
control functions based on the status variable monitoring.
4.5 Run-time and Space Overhead
In this section, we evaluate any run-time and space overhead in-
duced by RevARM on our two target platforms: iOS and UAV. In
order to measure the instrumented ArduPilot firmware overhead,
we ported the CoreMark [26] benchmark to the firmware as an
application run on NuttX. Then, we performed four general instru-
mentation cases: NOP, null function call, insertion-based function
counting and function call-based function counting. In the NOP case,
we inserted a NOP instruction to the entry of every function. A null
function call involves executing two branch instructions. There are
two function counting scenarios in our experiments: First is func-
tion counting on the function start addresses directly. The other is
performed by counting at the call site of each function.
Fig. 8 presents both run-time and space overhead measurements
for these four cases. In terms of run-time overhead, NOP, null func-
tion call, insertion-based function counting and function call-based
function counting respectively show 1.13%, 2.57%, 3.2% and 5.9% run-
time overhead and 1.23%, 1.31%, 1.37% and 1.28% space overhead.
Among the above tests, the two function counting experiments best
show the trade-off between run-time and space overhead. Insertion-
based function counting shows smaller run-time overhead then
function call-based function counting because function call-based
function counting is similar to trampoline-based instrumentation.
Such approach introduces additional expensive control transitions
unlike our insertion-based approach.
To measure instrumented iOS app run-time overhead, we used
the PerformanceTest Mobile benchmarking app [30] on an iPhone
5s. Unlike the above experiments, here we applied our SFI to this app
Figure 9: Run-time overhead of RevARM-based SFI on iOS.
and ran it to measure the overhead. The PerformanceTest Mobile
performs benchmarks into five different areas: CPU, Disk, Mem-
ory, 2D and 3D graphics consisting of 17 sub-experiments. Then,
it shows scores for each experiment area. Using this benchmark,
we tested SFI on this app to measure their overhead. This result is
shown in Fig. 9. CPU, disk, storage, and memory showed smaller
run-time overhead: 3.4%, 2.8%, and 6.3%, respectively. The highest
overhead was the memory test due to more frequent memory ac-
cesses. On the other hand, 2D and 3D show negligible run-time over-
head (< 0.5%) since their performance depends largely on graphic
libraries. We also experimented with enforcing SFI on real appli-
cations (such as Amazon, Gmail, Twitter) and found an increase
in 31.3% on average. Make sure that both run-time and space SFI
overhead includes both SFI codes and our tool’s overhead in this
case. We show our tool’s own overhead in Fig. 8.
5 RELATED WORK
Static Binary Instrumentation: There are many existing static
instrumentation techniques developed for x86. A number of tech-
niques leverage symbolic information to accurately locate and
rewrite binary code [41, 44, 54, 55]. Detour-based approaches [45,
54] are incapable of instrumenting instructions at arbitrary loca-
tions but the inserted code for trampoline and control transfers
incur additional run-time and spatial overhead. Unlike detour-based
approaches, patch-based approaches [49, 64, 68] duplicate the orig-
inal code and patching the duplicated code. However, such code
duplication causes large space overhead. Dyninst [39] utilizes both
approaches depending on the specific instrumentation task.
More similar to RevARM, insertion-based approaches directly
insert into or replace instructions and data in a target binary with-
out adding a control transition. BISTRO [43] inserts code into a
stretched binary. Also, it supports function patching as our work
does. REINS [65] is a machine-verifiable binary rewriting technique
that protects a target program from unsafe branch targets by in-
serting code into the binary. Uroboros [62] is based on an advanced
disassembling technique [61] to convert a binary into their own
internal representations and perform instrumentation on those.
All of the above techniques are designed for the x86 architecture.
Due to the unique challenges in handling ARM-specific instruc-
tions (§3), their approaches are limited to supporting x86 only and
can hardly be applied to ARM binary instrumentation. Dyninst
is going to support for rewriting only 64-bit ARM binaries as an
experimental feature, but not 32-bit, due to the specific challenges
0123456NOPNullFunction CallFunction Counting(Insertion)Function Counting(Function Call)Overhead (%)Run-timeSpace0.90.920.940.960.981Int MathFP MathPrime NumString SortEncryptionCompressionWriteReadWriteReadSolid VectorTrans VectorComplex VectorImg RenderingImg FilteringSimpleComplexCPUStorageMemory2D3DNormalized Run-time Overheadrelated to rewriting 32-bit ARM binaries. Rewriting 32-bit ARM
binaries is much more challenging than 64-bit ARM binaries since it
requires handling: (1) both 16-bit and 32-bit instructions, (2) much
more diverse branch instructions, (3) instructions with a limited
address dereference distance, and (4) dynamically switching ARM
and Thumb instruction modes. RevARM enables 32-bit ARM binary
rewriting by addressing these fundamental challenges that existing
works (including Dyninst) do not solve. Furthermore, RevARM is
capable of rewriting Mach-O binaries while all existing approaches