# 原文链接
# 
# ptmalloc介绍
`ptmalloc`是在libc里用的内存分配及，我打算分两个部分细致的阐述一下`ptmalloc`的相关内容，这篇文章是第一部分。在这篇文章里，我会介绍`ptmalloc`里使用到的数据结构，并且展示在`ptmalloc`里分配过程的工作流程。在第二部分，我会展示释放过程和重分配过程，另外，我还会列出在`ptmalloc`当中用到的安全检查，这里我使用`libc-2.25`的代码来做解释。
## Ptmalloc Chunk 块
在`ptmalloc`中最基本的分配单位是`malloc_chunk`，包括6个元数据域。如下所示，每一个元数据在`x86`平台下为4字节长，在`x64`平台下为8字节长。在这篇文章接下来的部分，我们只考虑`x86`平台下的情况。
    #ifndef INTERNAL_SIZE_T
    # define INTERNAL_SIZE_T size_t
    #endif
    #define SIZE_SZ (sizeof (INTERNAL_SIZE_T))
    struct malloc_chunk;
    typedef struct malloc_chunk* mchunkptr;
    struct malloc_chunk {
      INTERNAL_SIZE_T      mchunk_prev_size;  /* Size of previous chunk (if free).  前一块为释放状态时的大小 */
      INTERNAL_SIZE_T      mchunk_size;       /* Size in bytes, including overhead. 大小，以字节为单位，包括额外内容 */
      struct malloc_chunk* fd;         /* double links -- used only if free. 双链表，只在为释放状态是使用 */
      struct malloc_chunk* bk;
      /* Only used for large blocks: pointer to next larger size.  */
      /* 只在large块时使用：指向下一个更大大小的指针 */
      struct malloc_chunk* fd_nextsize; /* double links -- used only if free. */
      struct malloc_chunk* bk_nextsize;
    };
为了避免混淆，我们首先需要强调一下`chunk`（块）的概念。在`ptmalloc`里，一个块指的是通过内存管理分配器分配的一段内存区域，用来储存元数据和应用数据。
在`ptmalloc`里，一共有三种基本类型的块：
  * 已分配块(allocated chunk)
  * 释放块(freed chunk)
  * top块(top chunk)
在介绍这三种块之前，我们首先来看一下块的操作，通过这些操作，我们可以观察到在`mchunk_size`中的最后三位分别用来表示了chunk的状态：
  * A: 当chunk由非main arena获取时被设置为1
  * M: 当chunk由mmap获取时设置为1
  * P: 当前一个邻接的chunk被使用时设置为1
在CTF的堆利用题目中我们大多数时候只需要关注`P`位(0x1)，这里P在前一个邻接块被使用时为1，而前一个邻接块被释放时为0。前一个邻接块在这里主要指在当前块位置前面的块，这个概念与
**前块** (forward chunk)不同，前块的相关内容将会在后面块管理部分讨论。
    /* conversion from malloc headers to user pointers, and back */
    #define chunk2mem(p)   ((void*)((char*)(p) + 2*SIZE_SZ))
    #define mem2chunk(mem) ((mchunkptr)((char*)(mem) - 2*SIZE_SZ))
    /* size field is or'ed with PREV_INUSE when previous adjacent chunk in use */
    #define PREV_INUSE 0x1
    /* extract inuse bit of previous chunk */
    #define prev_inuse(p)       ((p)->mchunk_size & PREV_INUSE)
    /* size field is or'ed with IS_MMAPPED if the chunk was obtained with mmap() */
    #define IS_MMAPPED 0x2
    /* check for mmap()'ed chunk */
    #define chunk_is_mmapped(p) ((p)->mchunk_size & IS_MMAPPED)
    /* size field is or'ed with NON_MAIN_ARENA if the chunk was obtained
       from a non-main arena.  This is only set immediately before handing
       the chunk to the user, if necessary.  */
    #define NON_MAIN_ARENA 0x4
    /* Check for chunk from main arena.  */
    #define chunk_main_arena(p) (((p)->mchunk_size & NON_MAIN_ARENA) == 0)
    /* Mark a chunk as not being on the main arena.  */
    #define set_non_main_arena(p) ((p)->mchunk_size |= NON_MAIN_ARENA)
    #define SIZE_BITS (PREV_INUSE | IS_MMAPPED | NON_MAIN_ARENA)
    /* Get size, ignoring use bits */
    #define chunksize(p) (chunksize_nomask (p) & ~(SIZE_BITS))
    /* Like chunksize, but do not mask SIZE_BITS.  */
    #define chunksize_nomask(p)         ((p)->mchunk_size)
    /* Ptr to next physical malloc_chunk. */
    #define next_chunk(p) ((mchunkptr) (((char *) (p)) + chunksize (p)))
    /* Size of the chunk below P.  Only valid if prev_inuse (P).  */
    #define prev_size(p) ((p)->mchunk_prev_size)
    /* Set the size of the chunk below P.  Only valid if prev_inuse (P).  */
    #define set_prev_size(p, sz) ((p)->mchunk_prev_size = (sz))
    /* Ptr to previous physical malloc_chunk.  Only valid if prev_inuse (P).  */
    #define prev_chunk(p) ((mchunkptr) (((char *) (p)) - prev_size (p)))
    /* Treat space at ptr + offset as a chunk */
    #define chunk_at_offset(p, s)  ((mchunkptr) (((char *) (p)) + (s)))
    /* extract p's inuse bit */
    #define inuse(p)                                  \
      ((((mchunkptr) (((char *) (p)) + chunksize (p)))->mchunk_size) & PREV_INUSE)
    /* set/clear chunk as being inuse without otherwise disturbing */
    #define set_inuse(p)                                  \
      ((mchunkptr) (((char *) (p)) + chunksize (p)))->mchunk_size |= PREV_INUSE
    #define clear_inuse(p)                                \
      ((mchunkptr) (((char *) (p)) + chunksize (p)))->mchunk_size &= ~(PREV_INUSE)
    /* check/set/clear inuse bits in known places */
    #define inuse_bit_at_offset(p, s)                         \
      (((mchunkptr) (((char *) (p)) + (s)))->mchunk_size & PREV_INUSE)
    #define set_inuse_bit_at_offset(p, s)                         \
      (((mchunkptr) (((char *) (p)) + (s)))->mchunk_size |= PREV_INUSE)
    #define clear_inuse_bit_at_offset(p, s)                       \
      (((mchunkptr) (((char *) (p)) + (s)))->mchunk_size &= ~(PREV_INUSE))
    /* Set size at head, without disturbing its use bit */
    #define set_head_size(p, s)  ((p)->mchunk_size = (((p)->mchunk_size & SIZE_BITS) | (s)))
    /* Set size/use field */
    #define set_head(p, s)       ((p)->mchunk_size = (s))
    /* Set size at footer (only when chunk is not in use) */
    #define set_foot(p, s)       (((mchunkptr) ((char *) (p) + (s)))->mchunk_prev_size = (s))
### 已分配块
对于一个已分配块，其size域中上一个块（previous
chunk）将在其邻接前块是被释放的状态，而且`P`位为设置时会被设置。在下一个邻接块中，`P`位将会被设置。需要注意的一点是如果当前的块为已分配块时，`mchunk_prev_size`域将会被用于存储应用数据，这个特性总是被用到CTF中，与`off-by-one`漏洞结合。
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |             Size of previous chunk                            | 2 * SIZE_SZ)
    #define MIN_LARGE_SIZE    ((NSMALLBINS - SMALLBIN_CORRECTION) * SMALLBIN_WIDTH)
    #define in_smallbin_range(sz)  \
      ((unsigned long) (sz) < (unsigned long) MIN_LARGE_SIZE)
    #ifndef DEFAULT_MXFAST
    #define DEFAULT_MXFAST     (64 * SIZE_SZ / 4)
    #endif
    #define set_max_fast(s) \
      global_max_fast = (((s) == 0)                           \
                         ? SMALLBIN_WIDTH : ((s + SIZE_SZ) & ~MALLOC_ALIGN_MASK))
    #define get_max_fast() global_max_fast
    malloc_init_state (mstate av)
    {
      int i;
      mbinptr bin;
      /* Establish circular links for normal bins */
      for (i = 1; i < NBINS; ++i)
        {
          bin = bin_at (av, i);