value to be the average throughput of the entry-to-client (and respective server-to-exit)
interval that covers this time point, obtained by dividing the total bytes transferred in the
corresponding interval by the length of that interval. Unaligned time points are ignored.
Finally, we compute the correlation of throughput values of the two aligned sets.
4 Experimental Evaluation
To evaluate our attack using data obtained from public Tor relays we used the set-up
shown in Figure 1. Victim clients were hosted on three different PlanetLab locations:
Texas (US), Leuven (Belgium) and Corfu (Greece). The clients communicated via Tor
circuits through our relay to a server under our control in Spain.
Flow Collection using NetFlow Tools: In our ﬁrst set of experiments, the ﬂow records
were obtained from the server and the entry node using the open source ﬂow genera-
tion and capture tools mentioned in the previous section. We conﬁgured the active and
inactive timers to 5 seconds each. This resulted in a uniform view of the trafﬁc with an
adequate number of samples for accurately computing correlation. The ﬁrst experiment
involved the server injecting a “square-wave” like trafﬁc pattern having an amplitude
252
S. Chakravarty et al.
)
s
/
t
i
b
M
(
t
u
p
h
g
u
o
r
h
T
 4
 3.5
 3
 2.5
 2
 1.5
 1
 0.5
 0
Victim Traffic - Server to Exit Node
Entry to Client 974 (Victim)
Entry to Client 995
Entry to Client 677 
Entry to Client 895
Entry to Client 255
)
s
/
t
i
b
M
(
t
u
p
h
g
u
o
r
h
T
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
38:00 39:00 40:00 41:00 42:00 43:00
Time (MM:SS)
(a) Square-wave pattern
Victim Traffic
Entry to Client 122(Victim Client)
Entry to Client 93
Entry to Client 264
Entry to Client 246
Entry to Client 72
0
0
1
3
:
0
0
3
3
:
0
0
4
3
:
0
0
6
3
:
0
0
7
3
:
0
0
9
3
:
0
0
0
4
:
0
0
2
4
:
Time (MM:SS)
(b) Step pattern
Fig. 2. A victim ﬂow with a server-induced “square-wave” (a) and “step” (b) pattern. The remain-
ing points correspond to the non-victim ﬂows with the four highest correlation coefﬁcients.
of roughly 2 Mbit/s, achieved by switching the server-to-exit trafﬁc bandwidth between
2 Mbit/s and 30 Kbit/s, every 20 seconds. Figure 2(a) shows sample trafﬁc throughput
variations for ﬁve ﬂows, from one such experiment. These ﬁve ﬂows are the ones with
the highest correlation to the server-to-exit ﬂow (solid line) that carries the injected traf-
ﬁc pattern. The victim ﬂow had the highest correlation coefﬁcient of 0.83 (among 1100
other clients), while the second-highest correlation, for to a non-victim client, was 0.17.
We repeated similar experiments with the server injecting a more complex “step”
like pattern, achieved by switching the server-to-exit trafﬁc throughput between roughly
1 Mbit/s, 50 Kbit/s, 300 Kbit/s and 100 Kbit/s, every 20 seconds. This pattern was again
repeated several times. Figure 2(b) shows one such sample where the server injected
the “step” like pattern. The victim ﬂow had the highest correlation coefﬁcient of 0.84
(among 874 other clients), while the second-highest correlation, corresponding to a non-
victim client, was 0.25. In general, we observe higher correlation of the server-to-exit
and the victim trafﬁc, when the server injects the “step” like pattern.
These experiments were repeated 90 times (15 times for each trafﬁc pattern, for each
of the three client location). The average correlation between the server-to-exit and
entry-to-victim trafﬁc statistics (corresponding to the ﬂows that were most correlated to
the ﬂow carrying the trafﬁc pattern) was higher than the average correlation to the non-
victim client statistics, as shown in Figures 3(a) and 3(b). We were able to correctly
identify the victim in 76 out of the 90 tests. The average correlation of the injected
pattern for the victim trafﬁc was lower than those for in-lab tests. This happens because
the trafﬁc pattern is distorted when it leaves the Tor entry node and proceeds towards
the victim, reducing the victim’s correlation coefﬁcient.
We also found four instances where the correlation of the injected trafﬁc pattern with
the victim client trafﬁc was lower compared to some other non-victim clients’ trafﬁc.
Such false positives are primarily a combined effect of the background network con-
gestion and routing in Tor relays, which attempts to equally distribute the available
bandwidth among all circuits. To deal with such inaccuracies, we also computed the
average throughput of the clients’ trafﬁc (over the duration of the experiment), and sub-
tracted it from the average throughput of the server-to-exit trafﬁc. For the victim trafﬁc,
On the Effectiveness of Trafﬁc Analysis against Anonymity Networks
253
 1
 0.8
n
o
 0.6
Correlation for Victim
Correlation for Non-Victim
 1
 0.8
n
o
 0.6
Correlation for Victim
Correlation for Non-Victim
i
t
l
a
e
r
r
o
C
 0.4
 0.2
 0
i
t
l
a
e
r
r
o
C
 0.4
 0.2
 0
Location 1
(US)
Location 2
(BE)
Location 3
(GR)
Location 1
(US)
Location 2
(BE)
Location 3
(GR)
(a) Average correlation: Square-wave pattern
(b) Average correlation: Step pattern
Fig. 3. (a) Average Pearson’s Correlation between server injected “square-wave” like pattern and
the victim and non-victim ﬂows for the different planetlab client locations. (b) Average Pearson’s
Correlation between server injected “step” pattern and the victim and non-victim ﬂows for the
different planetlab client locations.
this difference is often amongst the smallest. This difference between the victim trafﬁc
and server-to-exit trafﬁc can be used to ﬁlter out ﬂows that could lead to inaccurate cor-
relation coefﬁcients arising from an inadequate number of ﬂow samples. We used this
observation in the experiments that involved sparse data from Cisco routers, to remove
ﬂows where the average throughput was not comparable to that of the victim’s.
Flow Collection from Cisco Router: To evaluate the attack effectiveness when using
data from our institutional edge router, we used the same experimental set-up that we
used to test our attack using data obtained from open source packages. However, the
entry-node-to-client trafﬁc statistics were gathered from our institutional router. The
router was conﬁgured with an active and inactive timeouts of 60 and 15 seconds respec-
tively. We conﬁgured the NetFlow packages on the server with the same values. But,
from our initial experience, we realized that the data obtained from the router was sparse
and non-uniformly aligned, compared to the ﬂow records from server-to-exit. We thus
applied our rectiﬁcation strategy (described previously) to align the ﬂows. The rectiﬁed
ﬂow values were then directly used as input to the correlation coefﬁcient formula.
These experiments were essentially the same as those described in the previous sub-
section. The ﬁrst experiment involved the server injecting a “square-wave” like trafﬁc
pattern with an amplitude of about 1 Mbit/s. However, here the server switched the
throughput every 30 seconds, instead of 20 seconds, enabling us to capture adequate
(≥ 10) samples for computing the correlation coefﬁcient1. Figure 4(a) presents a sam-
ple bandwidth variation pattern for the server-to-exit trafﬁc and the entry-node-to-client
trafﬁc. It shows server-to-exit trafﬁc with more data points and fewer entry-to-client
points. Figure 4(b) presents the same data pattern after it has been rectiﬁed.
As mentioned previously, we eliminated ﬂows whose average of the trafﬁc through-
put was not comparable to that of the server-to-exit throughput variation. We computed
1 This was done solely to compensate for the lack of samples obtained when the experiments
ran for a shorter duration of 20 seconds (as previously).
254
S. Chakravarty et al.
)
s
/
t
i
b