### WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.101
#### 1.2.2.1 Simple Rules to Bypass WAFs
##### Cross-Site Scripting (XSS)
- **Instead of using:** `alert('xss')`
- **Best choice:** `prompt('xss')`

- **Instead of using:** `alert(1)`
- **Best choice:** `prompt(8)`

- **Alternative choices:**
  - `confirm('xss')`
  - `confirm(8)`
  - `alert(/xss/.source)`
  - `window[/alert/.source](8)`

### WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.102
#### 1.2.2.1 Simple Rules to Bypass WAFs
##### Cross-Site Scripting (XSS)
- **Instead of using:** `alert(document.cookie)`
- **Best choices:**
  - `with(document) alert(cookie)`
  - `alert(document['cookie'])`
  - `alert(document[/cookie/.source])`
  - `alert(document[/coo/.source + /kie/.source])`

### WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.103
#### 1.2.2.1 Simple Rules to Bypass WAFs
##### Cross-Site Scripting (XSS)
- **Best choices:**
  - `javascript:alert(document.cookie)`
  - `data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4=`

### WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.104
#### 1.2.2.1 Simple Rules to Bypass WAFs
##### Blind SQL Injection
- **Instead of using:** `' or 1=1`
- **Best choices:**
  - `' or 6=6`
  - `' or 0x47=0x47`
  - `or char(32)=' '`
  - `or 6 is not null`

### WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.105
#### 1.2.2.1 Simple Rules to Bypass WAFs
##### SQL Injection
- **Instead of using:** `UNION SELECT`
- **Best choice:** `UNION ALL SELECT`

### WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.106
#### 1.2.2.1 Simple Rules to Bypass WAFs
##### Directory Traversal
- **Instead of using:** `/etc/passwd`
- **Best choices:**
  - `/too/../etc/far/../passwd`
  - `/etc//passwd`
  - `/etc/ignore/../passwd`
  - `/etc/passwd.......`

### WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.107
#### 1.2.2.1 Simple Rules to Bypass WAFs
##### Web Shell
- **Best choices:**
  - `c99.php`
  - `augh.php`
  - `r57.php`
  - `shell.aspx`
  - `cmd.jsp`
  - `CmdAsp.asp`

### WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.108
#### 1.2.2.2 WAF Detection and Fingerprinting
Web Application Firewalls (WAFs) typically operate in either passive mode, reactive mode, or both, depending on the deployment period. In passive mode, they reduce false positives and avoid blocking the application, while in production, they are often reactive.

Before testing a web application, it is crucial to determine if a WAF is present and identify its type. WAFs leave several footprints that can be used for detection. Here are some techniques:

### WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.109
#### 1.2.2.2 WAF Detection and Fingerprinting
##### Cookie Values
Some WAFs reveal their presence through cookies. They set specific cookies during HTTP communications.

### WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.110
#### 1.2.2.2 WAF Detection and Fingerprinting
##### Cookie Values
- **Citrix Netscaler** uses cookies like `ns_af`, `citrix_ns_id`, and `NSC_`.
- **F5 BIG-IP ASM** uses cookies starting with `TS` followed by a string matching the regex: `^TS[a-zA-Z0-9]{3,6}`.
- **Barracuda** uses cookies `barra_counter_session` and `BNI__BARRACUDA_LB_COOKIE`.

Example:
```
HTTP/1.1 200 OK
Cache-Control: no-cache
Pragma: no-cache
Content-Length: 8543
Content-Type: text/html
Expires: Tue, 08 Apr 2014 08:56:45 GMT
Server: Microsoft-IIS/6.0
X-Powered-By: ASP.NET
Date: Tue, 08 Apr 2014 08:57:44 GMT
Set-Cookie: BNI__BARRACUDA_LB_COOKIE=000000000000000000000000c400000a0000bb20; Path=/
```

### WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.112
#### 1.2.2.2 WAF Detection and Fingerprinting
##### Header Rewrite
Some WAFs modify HTTP headers to deceive attackers. For example, they may rewrite the `Server` header or remove it in response to a malicious request.

### WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.113
#### 1.2.2.2 WAF Detection and Fingerprinting
##### Header Rewrite: Example – Rewrite Server Header
- **Non-hostile request:**
  ```
  HTTP/1.1 200 OK
  Date: Mon, 7 Apr 2014 10:10:50 GMT
  Server: Apache (Unix)
  Content-Type: text/html
  Content-Length: 2506
  ```

- **Hostile request:**
  ```
  HTTP/1.1 404 Not Found
  Date: Mon, 7 Apr 2014 10:11:06 GMT
  Server: Netscape-Enterprise/6.1
  Content-Type: text/html;
  Content-Length: 158
  ```

### WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.114
#### 1.2.2.2 WAF Detection and Fingerprinting
##### HTTP Response Code
Some WAFs modify the HTTP response codes for hostile requests:
- **mod_security:** `406 Not Acceptable`
- **AQTRONIX WebKnight:** `999 No Hacking`

### WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.116
#### 1.2.2.2 WAF Detection and Fingerprinting
##### HTTP Response Body
The presence of a WAF can also be detected in the response body.

### WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.117
#### 1.2.2.2 WAF Detection and Fingerprinting
##### HTTP Response Body: mod_security
```
HTTP/1.1 406 Not Acceptable
Date: Mon, 7 Apr 2014 11:10:50 GMT
Server: Apache
Content-Length: 226
Keep-Alive: timeout=10, max=30
Connection: Keep-Alive
Content-Type: text/html; charset=iso-8859-1

Not Acceptable! An appropriate representation of the requested resource could not be found on this server.
This error was generated by Mod_Security.
```

### WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.118
#### 1.2.2.2 WAF Detection and Fingerprinting
##### HTTP Response Body: AQTRONIX WebKnight

### WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.119
#### 1.2.2.2 WAF Detection and Fingerprinting
##### HTTP Response Body: dotDefender

### WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.120
#### 1.2.2.2 WAF Detection and Fingerprinting
##### Close Connection
Some WAFs support the feature of closing the connection when a malicious request is detected.

### WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.121
#### 1.2.2.2 WAF Detection and Fingerprinting
##### Close Connection: mod_security
Example implementation with mod_security to detect a brute force attack:
```
SecAction phase:1,id:109,initcol:ip=%{REMOTE_ADDR},nolog
SecRule ARGS:login "!^$"
"nolog,phase:1,id:110,setvar:ip.auth_attempt=+1,deprecatevar:ip.auth_attempt=20/120"
SecRule IP:AUTH_ATTEMPT "@gt 25"
"log,drop,phase:1,id:111,msg:'Possible Brute Force Attack'"
```
Source and Meaning: [ModSecurity Reference Manual](https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual#drop)

### WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.122
#### 1.2.2.2 WAF Detection and Fingerprinting
Many penetration testing tools have features to detect the presence of a WAF. These features help in understanding how to craft payloads and whether obfuscation or specific bypasses are needed.

### WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.123
#### 1.2.2.2 WAF Detection and Fingerprinting
One well-known tool is **wafw00f**, developed by Sandro Gauci and Wendel G. Henrique. It is a Python-based tool that can detect up to 20 different WAF products.

[Project Page: waffit](https://code.google.com/p/waffit/)

### WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.124
#### 1.2.2.2 WAF Detection and Fingerprinting
The techniques used to detect a WAF include:
1. Cookies
2. Server Cloaking
3. Response Codes
4. Drop Action
5. Pre-Built-In Rules

### WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.125
#### 1.2.2.2 WAF Detection and Fingerprinting
Scanning a website with wafw00f is straightforward. The following image confirms its simplicity.

### WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.126
#### 1.2.2.2 WAF Detection and Fingerprinting
Another useful tool is Nmap, which includes a script (`http-waf-fingerprint`) authored by Hani Benhabiles to detect the presence, type, and version of a WAF.

[Nmap Script Documentation: http-waf-fingerprint](http://nmap.org/nsedoc/scripts/http-waf-fingerprint.html)

### WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.127
#### 1.2.2.2 WAF Detection and Fingerprinting
Scanning a website with Nmap is as simple as running wafw00f. Just include the script name in the command.

### WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.128
#### 1.2.2.2 WAF Detection and Fingerprinting
Another resource is **imperva-detect** by Lamar Spells. This utility focuses on detecting Imperva WAFs and runs 6 tests, including one baseline and five additional tests.

[Project Page: imperva-detect](https://code.google.com/p/imperva-detect/)

### WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.129
#### 1.2.2.2 WAF Detection and Fingerprinting
The following image shows an example of how to run imperva-detect test scripts.

### WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.130
#### 1.2.3 Client-Side Filters
Web Application Firewalls and libraries are filtering solutions used to block web attacks at the server-side. Over the years, this has become the "classic" and consolidated approach. However, in the last decade, a new approach has emerged, focusing on client-side defenses within web browsers.

### WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.131
#### 1.2.3 Client-Side Filters
Client-side defenses aim to protect users against vulnerabilities in web applications. These defenses must be generic enough to always be enabled without becoming blockers for the browsers and their users.

From an attacker's perspective, understanding these mechanisms and how to bypass them is crucial to target users who would otherwise be protected.

### WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.132
#### 1.2.3.1 Browser Add-ons
The first browser protection began in the open-source community. Giorgio Maone introduced the NoScript Security Suite extension for Firefox in late 2005.

[NoScript Extension Page](https://addons.mozilla.org/it/firefox/addon/noscript/)

### WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.133
#### 1.2.3.1 Browser Add-ons
NoScript is a whitelist-based security tool that disables all executable web content (JavaScript, Java, Flash, Silverlight, etc.) and allows the user to choose trusted sites, enabling the use of these technologies.

### WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.134
#### 1.2.3.1 Browser Add-ons
NoScript is user-friendly and supports an extensive list of security features, making it a powerful tool.

### WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.135
#### 1.2.3.1 Browser Add-ons
Among its features, the strong and effective anti-XSS protection is one of the most robust browser-based solutions to prevent targeted malicious web attacks.

[NoScript Anti-XSS Features](http://noscript.net/features#xss)

### WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.136
#### 1.2.3.2 Native Browser Filters
##### History
Microsoft introduced the XSS Filter in Internet Explorer 8, which blocks reflected XSS attacks by applying regular expressions to response data.

[Microsoft Blog: IE8 Security Part IV - The XSS Filter](http://blogs.msdn.com/b/ie/archive/2008/07/02/ie8-security-part-iv-the-xss-filter.aspx)

### WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020 | p.137
#### 1.2.3.2 Native Browser Filters
##### History
Google Chrome later introduced the XSS Auditor, which is integrated into WebKit/Blink, the rendering engines, and operates differently from IE's XSS Filter and NoScript.