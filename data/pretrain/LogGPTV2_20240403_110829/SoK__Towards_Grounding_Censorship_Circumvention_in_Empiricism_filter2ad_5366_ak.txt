y
b
e
g
a
s
u
y
r
o
m
e
M
e
c
n
a
m
r
o
f
r
e
p
t
n
e
i
l
C
s
r
e
s
u
y
b
e
g
a
s
u
U
P
C
s
e
c
i
v
r
e
s
l
a
n
r
e
t
x
e
f
o
t
s
o
C
t
s
o
c
e
r
u
t
c
u
r
t
s
a
r
f
n
I
e
m
i
t
p
u
t
r
a
t
S
y
t
i
l
i
b
a
s
U
e
g
a
p
b
e
w
r
e
p
s
r
o
r
r
e
f
o
r
e
b
m
u
N
e
l
ﬁ
d
a
o
l
n
w
o
d
l
l
a
m
S
n
o
i
t
a
t
n
e
m
u
c
o
d
f
o
y
t
i
l
i
b
a
l
i
a
v
A
t
r
o
p
p
u
s
n
o
i
t
a
c
i
l
p
p
A
n
o
i
t
a
z
i
l
a
c
o
L
y
t
i
l
i
b
a
t
r
o
P
s
n
o
i
t
c
e
n
n
o
c
e
u
q
i
n
u
s
r
e
s
u
I
U
G
a
s
a
H
e
g
a
s
U
f
o
f
o
r
e
b
m
u
N
r
e
b
m
u
N
n
o
i
t
a
t
i
m
i
l
e
g
a
s
u
o
N
s
e
t
a
d
p
u
e
r
a
w
t
f
o
S
n
o
i
t
a
l
l
a
t
s
n
i
o
N
l
l
a
t
s
n
i
n
u
n
a
e
l
C
t
s
o
c
w
o
l
/
e
e
r
F
d
a
e
h
r
e
v
o
d
a
e
h
r
e
v
o
e
m
T
i
e
t
y
B
y
c
n
e
t
a
L
t
n
e
m
p
o
l
e
v
e
d
d
n
a
k
r
o
w
t
e
n
e
c
r
u
o
s
n
e
p
O
e
l
b
a
n
i
a
t
s
u
S
s
t
r
e
p
x
e
y
b
d
e
p
o
l
e
v
e
D
n
g
i
s
e
d
f
o
s
s
e
n
n
e
p
O
t
n
e
m
y
o
l
p
e
d
t
s
e
T
932932
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:11:18 UTC from IEEE Xplore.  Restrictions apply. 
Ignore invalid connections (DoS): Whether an approach ignores invalid
connections to avoid denial of service attacks.
Independent deployment: Can deploy the circumvention approach without
needing the help of third-parties, such as friendly ISPs.
Indirect connection to forwarder: The circumventor’s computer connects
indirectly to the circumvention network’s forwarders through an innocuous
server.
Infrastructure cost: Assesses the cost of infrastructure required to deploy an
approach in real world.
Inter-packet timing: Measures the distribution of packet timing (interpacket
times or packet rates) to assess whether it is unlike that of a blocked protocol,
or like that of an allowed protocol.
Latency: Assesses the round-trip time for a request.
Limit service to each user ID (DoS): Avoid DoS by limiting the amount of
service the approach will provide to each user.
Localization: Assesses whether the software and documentation are localized
to relevant languages.
Matching allowed n-gram distribution: Considers the distribution of con-
secutive strings of symbols, for example bytes. This includes 1-grams (e.g.,
distribution of single byte values).
Memory usage by users: Assesses the memory requirements to run the
system.
Network performance: Assesses the system’s performance in terms of
goodput, latency and overhead.
No installation: Using the tool does not require installing special software.
No usage limitation: Assesses whether an approach artiﬁcially limits who
can use it and for which service.
Number of HTTP requests/responses: Measures the total number of HTTP
request-response pairs per TCP connection.
Number of errors per webpage: This criterion is speciﬁc to link-rewriting
web proxies like CGIProxy that actually have to interpret HTML and
JavaScript and change links so they point back into the proxy and not to
their original location.
Number of proxies: The number of proxies usable with the tool.
Number of requests needed to retrieve data: Assesses the number of
requests that a requester must make to retrieve hidden messages.
Number of unique connections: Discusses the number unique of IP addresses
that connect to the system on a daily basis.
Number of users: The number of users the tool has.
Open source: The tool’s source code is open.
Openness of design: Assesses whether the source code available (client and
server) and whether the design public or relies on security through obscurity.
Packet size distribution: Measures the distribution of packet lengths to assess
wehether it is unlike that of a blocked protocol, or like that of an allowed
protocol.
Portability: Assesses the system’s portability to diﬀerent operating systems
and devices.
Protocol misclassiﬁcation rate: Assesses the misclassiﬁcation rate of the
protocol classiﬁers to see how well the tool can evade the classiﬁers.
Rate of proxy churn: Measures or estimates the rate at which new proxies
appear and old proxies go away.
Registration performance: Some systems need to apply a special distin-
guisher or mark to traﬃc destined for circumvention. For example, end-to-
middle proxying systems need to tag ﬂows at the client side and recognize
them at the station. This criterion considers the performance of the registration
method.
Resistance to active probing: Active probing attacks involve the censor
initiating connections to hosts to determine whether the host runs a given
circumvention protocol, typically then blocking the host’s IP address upon
ﬁnding that it does. A system is resistant to active probing if an adversary
cannot discover the use of the system using this technique.
Resistance to blocking: A system resists blocking if it is hard to block the
protocol or IP address of the infrastructure that the approach uses, even given
a method of identifying it. For example, if blocking would cause substantial
collateral damage.
Resistance to insider attacks: Considers whether the system continues to
work even if the censor joins the circumvention network and attempts to
disrupt it.
Resistance to security attacks: This criterion considers diﬀerent measures
that a paper uses to avoid security attacks such as man-in-the-middle, denial
of service, malicious proxy, key reuse and replay attack.
Resistance to traﬃc analysis: An approach is resistant to traﬃc analysis if
an adversary cannot statically use properties of the traﬃc generated by the
approach to detect it. (Some of the metrics used for this goal can also be used
for active probing, but they are not inherently active.)
Resistance to traﬃc manipulation: Evaluates the system’s resistance to
modiﬁcation of packets, or injecting or dropping packets. This criterion is
concerned only with manipulation of client-initiated ﬂows.
is
Respond to probes like something else: When probed, respond similar to
how some allowed server would respond so that a censor deciding to block
such responses will incur false positives.
Self promotion: Evaluates whether an approach or tool promotes itself in a
way that is likely to attract harmful attention (from the media or from the
censor, for example).
Serial connection count: Counted the number of connections made in a row
to a server.
Server obfuscation: Keeping the server used as a forwarder by the circum-
vention network hidden from the censor.
Small download ﬁle: The size of the tool’s client program ﬁle is small.
Software updates: Assesses the availability of software updates.
Speed of downloading a webpage: Assesses the time required to download
a webpage. This is really a combination of goodput and latency, but it is
speciﬁcally applied so often that we made it its own criterion.
Stability of decoy hosts: Examines how long a decoy host is available to
carry on a conversation.
Startup time: Measures how quickly client software starts up.
Sustainable network and development: Whether the system has funds and
other resources to continue operating for the long term.
TLS characteristics: Prevents detection by TLS characteristics, like TLS
nonce, clienthello or serverhello messages.
Test deployment: An approach proposed in an academic paper that
deployed in the real world and used by users.
Throughput: The amount of throughput/bandwidth the tool enables.
Time overhead: How much extra time it takes to use the tool.
Time to create an adaptation: The amount of time it takes some programmer
to create a new adaptation of the protocol.
Total TCP connection: The total number of TCP connections per session
does not stick out.
Total payload length: The total payload length produced by the tool does
not stick out.
Usability: Assesses the additional eﬀort that the circumvention tool client
user must expand to use the system.
Usage: Assesses real world usage of an approach.
Use TLS for conﬁdentiality: Whether an approach uses TLS to provide
conﬁdentiality.
Use TLS for integrity: Whether an approach uses TLS to provide integrity.
Use UDP with reliability: Whether an approach uses UDP with reliability.
Use a popular protocol: Whether an approach sends traﬃc using a popular
protocol, such as the Skype protocol, to force the censor to either block a
popular protocol or identify the circumventing usage of the protocol from
normal usage.
Use authenticated key exchange (MITM): Whether an approach uses
authenticated key exchange.
Use authentication: Whether a client needs authentication to connect to the
server.
Use block cipher (key reuse): Whether an approach uses block cipher to
resist key reuse attack.
Use certiﬁcate pinning (MITM): Whether an approach uses certiﬁcate
pinning to avoid MiTM.
Use client puzzle (DoS): Require clients to solve a puzzle to prevent DoS.
Use encryption for conﬁdentiality: Whether an approach uses encryption
for conﬁdentiality (and/or integrity).
Use encryption to resist traﬃc analysis: Whether an approach uses encryp-
tion to resist traﬃc analysis.
Use error correcting codes: Whether an approach uses error correcting codes.
Use many access points: Whether an approach uses too many hosts to make
it hard for a censor to block all of them.
Use network infrastructure: Whether an approach uses infrastructure within
a network, e.g., router, to avoid address blocking.
Use popular hosts: Whether an approach uses popular hosts, such as Skype
nodes and CDNs, to resist address blocking.
Use random port: Use a random port number for communications.
Use shared secret (MITM): Whether an approach uses shared secret to resist
man-in-the-middle attacks.
Use strong third-party service (DoS): A censor would have to overcome
not just the circumvention deployment, but some third-party that hosts the
deployment.
Use timestamp (replay): Whether an approach uses timestamp to resist replay
attack.
Use trustworthy proxy: By using a trustworthy proxy as the forwarder, the
approach avoids the risks of a malicious proxy (as long as the proxy remains
trustworthy).
Veracity of claims: Evaluates whether the claims of about an approach by
the its provider match reality.
933933
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:11:18 UTC from IEEE Xplore.  Restrictions apply.