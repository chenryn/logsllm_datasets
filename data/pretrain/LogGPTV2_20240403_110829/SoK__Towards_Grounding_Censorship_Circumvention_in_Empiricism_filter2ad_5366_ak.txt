### Evaluation Criteria for Circumvention Approaches

The following criteria are used to evaluate the effectiveness, security, and usability of various circumvention approaches. Each criterion is described in detail below.

#### Security and Robustness
1. **Ignore Invalid Connections (DoS)**: The approach should ignore invalid connections to prevent denial-of-service (DoS) attacks.
2. **Independent Deployment**: The circumvention approach can be deployed without the need for third-party assistance, such as friendly ISPs.
3. **Indirect Connection to Forwarder**: The user's computer connects indirectly to the circumvention network’s forwarders through an innocuous server.
4. **Infrastructure Cost**: Evaluates the cost of infrastructure required to deploy the approach in real-world scenarios.
5. **Inter-Packet Timing**: Measures the distribution of packet timing to assess whether it mimics allowed protocols or differs from blocked ones.
6. **Latency**: Assesses the round-trip time for a request.
7. **Limit Service to Each User ID (DoS)**: Limits the amount of service provided to each user to avoid DoS attacks.
8. **Localization**: Evaluates whether the software and documentation are available in relevant languages.
9. **Matching Allowed n-gram Distribution**: Considers the distribution of consecutive strings of symbols, such as bytes, to match allowed protocols.
10. **Memory Usage by Users**: Assesses the memory requirements to run the system.
11. **Network Performance**: Evaluates the system’s performance in terms of goodput, latency, and overhead.
12. **No Installation**: Using the tool does not require installing special software.
13. **No Usage Limitation**: Evaluates whether the approach artificially limits who can use it and for which services.
14. **Number of HTTP Requests/Responses**: Measures the total number of HTTP request-response pairs per TCP connection.
15. **Number of Errors per Webpage**: Specific to link-rewriting web proxies like CGIProxy, this criterion measures errors in interpreting and rewriting HTML and JavaScript.
16. **Number of Proxies**: The number of proxies usable with the tool.
17. **Number of Requests Needed to Retrieve Data**: Assesses the number of requests a requester must make to retrieve hidden messages.
18. **Number of Unique Connections**: Discusses the number of unique IP addresses that connect to the system daily.
19. **Number of Users**: The number of users the tool has.
20. **Open Source**: The tool’s source code is open.
21. **Openness of Design**: Evaluates whether the source code (client and server) is available and whether the design is public or relies on security through obscurity.
22. **Packet Size Distribution**: Measures the distribution of packet lengths to assess whether it mimics allowed protocols or differs from blocked ones.
23. **Portability**: Assesses the system’s portability to different operating systems and devices.
24. **Protocol Misclassification Rate**: Evaluates the misclassification rate of protocol classifiers to see how well the tool can evade them.
25. **Rate of Proxy Churn**: Measures or estimates the rate at which new proxies appear and old proxies go away.
26. **Registration Performance**: Evaluates the performance of the registration method for systems that need to apply a special distinguisher or mark to traffic.
27. **Resistance to Active Probing**: The system resists active probing if an adversary cannot discover its use by initiating connections to hosts.
28. **Resistance to Blocking**: The system resists blocking if it is hard to block the protocol or IP address of the infrastructure, even given a method of identifying it.
29. **Resistance to Insider Attacks**: Evaluates whether the system continues to work even if the censor joins the circumvention network and attempts to disrupt it.
30. **Resistance to Security Attacks**: Considers different measures to avoid security attacks such as man-in-the-middle, denial of service, malicious proxy, key reuse, and replay attack.
31. **Resistance to Traffic Analysis**: The approach is resistant to traffic analysis if an adversary cannot use static properties of the traffic to detect it.
32. **Resistance to Traffic Manipulation**: Evaluates the system’s resistance to modification, injection, or dropping of packets.
33. **Respond to Probes Like Something Else**: When probed, the system responds similarly to an allowed server to avoid false positives.
34. **Self Promotion**: Evaluates whether the approach or tool promotes itself in a way that attracts harmful attention.
35. **Serial Connection Count**: Counts the number of connections made in a row to a server.
36. **Server Obfuscation**: Keeps the server used as a forwarder hidden from the censor.
37. **Small Download File**: The size of the tool’s client program file is small.
38. **Software Updates**: Assesses the availability of software updates.
39. **Speed of Downloading a Webpage**: Assesses the time required to download a webpage, considering goodput and latency.
40. **Stability of Decoy Hosts**: Examines how long a decoy host is available to carry on a conversation.
41. **Startup Time**: Measures how quickly the client software starts up.
42. **Sustainable Network and Development**: Evaluates whether the system has funds and resources to continue operating long-term.
43. **TLS Characteristics**: Prevents detection by TLS characteristics, such as nonce, clienthello, or serverhello messages.
44. **Test Deployment**: The approach has been deployed in the real world and used by users.
45. **Throughput**: The amount of throughput/bandwidth the tool enables.
46. **Time Overhead**: The extra time it takes to use the tool.
47. **Time to Create an Adaptation**: The amount of time it takes for a programmer to create a new adaptation of the protocol.
48. **Total TCP Connection**: The total number of TCP connections per session does not stand out.
49. **Total Payload Length**: The total payload length produced by the tool does not stand out.
50. **Usability**: Assesses the additional effort required for the user to use the system.
51. **Usage**: Assesses real-world usage of the approach.
52. **Use TLS for Confidentiality**: Whether the approach uses TLS to provide confidentiality.
53. **Use TLS for Integrity**: Whether the approach uses TLS to provide integrity.
54. **Use UDP with Reliability**: Whether the approach uses UDP with reliability.
55. **Use a Popular Protocol**: Whether the approach sends traffic using a popular protocol, such as Skype, to force the censor to either block a popular protocol or identify the circumventing usage.
56. **Use Authenticated Key Exchange (MITM)**: Whether the approach uses authenticated key exchange.
57. **Use Authentication**: Whether a client needs authentication to connect to the server.
58. **Use Block Cipher (Key Reuse)**: Whether the approach uses block cipher to resist key reuse attacks.
59. **Use Certificate Pinning (MITM)**: Whether the approach uses certificate pinning to avoid man-in-the-middle attacks.
60. **Use Client Puzzle (DoS)**: Requires clients to solve a puzzle to prevent DoS.
61. **Use Encryption for Confidentiality**: Whether the approach uses encryption for confidentiality (and/or integrity).
62. **Use Encryption to Resist Traffic Analysis**: Whether the approach uses encryption to resist traffic analysis.
63. **Use Error Correcting Codes**: Whether the approach uses error correcting codes.
64. **Use Many Access Points**: Whether the approach uses many hosts to make it hard for a censor to block all of them.
65. **Use Network Infrastructure**: Whether the approach uses infrastructure within a network, such as routers, to avoid address blocking.
66. **Use Popular Hosts**: Whether the approach uses popular hosts, such as Skype nodes and CDNs, to resist address blocking.
67. **Use Random Port**: Uses a random port number for communications.
68. **Use Shared Secret (MITM)**: Whether the approach uses shared secret to resist man-in-the-middle attacks.
69. **Use Strong Third-Party Service (DoS)**: A censor would have to overcome not just the circumvention deployment but also a strong third-party hosting the deployment.
70. **Use Timestamp (Replay)**: Whether the approach uses timestamps to resist replay attacks.
71. **Use Trustworthy Proxy**: By using a trustworthy proxy as the forwarder, the approach avoids the risks of a malicious proxy.
72. **Veracity of Claims**: Evaluates whether the claims about the approach by its provider match reality.

This comprehensive list of criteria ensures a thorough evaluation of circumvention approaches, covering aspects of security, performance, and usability.