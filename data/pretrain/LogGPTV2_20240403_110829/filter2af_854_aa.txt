**作者：evilpan  
原文链接：**
国庆几天在家写了个用于辅助 JNI 接口逆向分析的工具，同时支持 Ghidra、IDA 以及
Radare2。本文即是对这个工具的简单介绍，以及一些编写插件的体验记录。
# 前言
平时进行安卓逆向时，一个常见的场景就是目标把关键逻辑放到 Native 代码中，使用 JNI
接口进行实现。进行分析一般是把对应的动态库`so`拖进逆向工具中，然后定位具体的 Native 实现，再对参数类型、JNI
调用等逻辑进行一些优化方便对反汇编/反编译代码的理解。比如对于大家常用的 IDA-Pro 就是 `Parse C Header` 加载
`jni_all.h`，然后修改 JNI 接口的函数原型和变量结构。
这对于少量代码来说不是大问题，但显然是一种重复性的劳动，因此我们可以对这个过程进行一定的自动化。目前已经有了一些优秀的项目，比如 aryx 的
[JNIAnalyzer](https://github.com/Ayrx/JNIAnalyzer)，这是一个 Ghidra 插件，支持从 apk 中提取
JNI 接口并批量修改动态库的函数原型。但是这些项目都存在一些问题，而且缺乏拓展性，所以为了方便自己使用就构建了 [JNI
Helper](https://github.com/evilpan/jni_helper) 项目，支持各类日常使用的逆向工具。
# JNI Helper
该项目的详细介绍可以参考 [Github](https://github.com/evilpan/jni_helper)，其主要特性有下面这些:
  * 基于 [Jadx](https://github.com/skylot/jadx) api 提供一个独立的 Java 可执行程序 `JadxFindJNI.jar`，用来分析 apk 并提取其中的 JNI 接口信息，并产出一个 JSON 文件；
  * 同时支持 C 和 C++ 类型的 JNI 接口实现；
  * 支持重载的 JNI 函数；
  * 分别实现了 Ghidra、IDA 和 Radare2 的插件用来加载 `JadxFindJNI.jar` 生成的 JSON 文件；
## JadxFindJNI.jar
得益于 Jadx 项目整洁的函数接口，我们可以很方便在其基础上实现自己的功能，如下所示:
    JadxArgs jadxArgs = new JadxArgs(); jadxArgs.setDebugInfo(false); jadxArgs.setSkipResources(true); jadxArgs.getInputFiles().add(new File(args[0])); JadxDecompiler jadx = new JadxDecompiler(jadxArgs); jadx.load(); 
我们需要实现的主要功能就是调用 Jadx 分析目标 apk，然后迭代每个类和其中的 **native** 方法。只是有一些需要注意的点，比如对于重载的
JNI 函数。根据 [Oracle
的文档](https://docs.oracle.com/javase/1.5.0/docs/guide/jni/spec/design.html)，JNI
native 函数的命名由以下方式组成:
  * 以`Java_`为前缀；
  * 格式化的类名完整路径；
  * 下划线分隔符`_`；
  * 格式化的函数名称；
  * 对于重载函数，需要加双下划线`__`并跟着参数签名；
  * 对于特殊的字符需要进行转义，比如`_`、`;`和`]`需要分别转义成`_1`、`_2`和`_3`等；
对于使用者而言，无需关心内部细节:
    $ java -jar JadxFindJNI/JadxFindJNI.jar Usage: JadxFindJNI.jar   
我在仓库中上传了一个编译好的 [demo/app-debug.apk](https://github.com/evilpan/jni_helper/blob/master/demo/app-debug.apk)，所生成的 JNI 签名信息如下:
    {  "Java_com_evilpan_demojni_MainActivity_testOverload__I": {    "argumentSignature": "I",    "argumentTypes": [      "jint"    ],    "returnType": "jint",    "isStatic": false  },  "Java_com_evilpan_demojni_MainActivity_testStatic": {    "argumentSignature": "I",    "argumentTypes": [      "jint"    ],    "returnType": "jint",    "isStatic": true  },  "Java_com_evilpan_demojni_MainActivity_stringFromJNI": {    "argumentSignature": "",    "argumentTypes": [],    "returnType": "jstring",    "isStatic": false  },  "Java_com_evilpan_demojni_MainActivity_c_1testArray": {    "argumentSignature": "[I",    "argumentTypes": [      "jintArray"    ],    "returnType": "void",    "isStatic": false  },  ... } 
该 JSON 函数签名文件以 JNI 函数的 native 名称为键，可以方便地在各种语言中反序列化为哈希表，从而方便函数的查找。
`JadxFindJNI.jar`可以自己编译，也可以使用[打包好的版本](https://github.com/evilpan/jni_helper/releases/)。
## 实现效果
只要有了函数签名信息，就很方便在各种逆向工具中进行自动化处理了，这里选取的是我比较常用的几个逆向工具，Ghidra、IDA 和
Radare2。这几个工具的插件都是使用 Python 编写的，感兴趣可以直接查看源码，优化前后的反编译代码如下图所示。
Ghidra 优化前:
Ghidra 优化后: 
IDA-Pro 优化前:
IDA-Pro 优化后:
详见 
# 插件编写体验
在实现 [JNI Helper](https://github.com/evilpan/jni_helper)
的过程中，摸索了一遍不同逆向工具的拓展功能，所以这里谈谈编写过程中的一些感受，正好也可以作为一次横向对比。
## Ghidra
Ghidra 作为 NSA
出品的工具，拥有丰富的内部资料，开发文档非常整洁规范。虽然说是机缘巧合之下泄露出来才开源的版本，但其质量可以和许多商业工具相媲美，甚至在很多方面还稍胜一筹。使用下来发现
Ghidra 有很多在线文档和资料，可以很方便地实现指定功能，这个跟后面的两个工具可以说形成鲜明对比。
由于 Ghidra 是使用 Java 进行开发的，因此一个明显的问题是运行分析速度相对较慢。这个问题我的一个解决办法是通过
`headlessAnalyzer` 在性能较好的云服务器后台对目标先进行分析，导出 `.gzf` 项目文件再在本地导入。本地的 Ghidra 插件通常使用
Java 进行开发，但可以通过 JPython 使用 Python 脚本编写。
得益于开源软件的特性，开源社区中对于 Ghidra
插件和资料的贡献一直呈爆发式增长。当然这也是因为软件本身投入了很多国家经费被打磨过很长时间，另外一个开源逆向工具 Radare2 就相形见绌了，后面会说到。
一些比较有用的 Ghidra 相关参考资料如下: