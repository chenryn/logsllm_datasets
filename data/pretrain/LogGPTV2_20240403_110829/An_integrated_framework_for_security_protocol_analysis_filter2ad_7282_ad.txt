abstract model. Only in such a scenario we would be able to test 
all the features of our integrated framework. 
The  have  selected  the  PBK  protocol,  since  there  is  a  standard 
Internet Draft specification document available for it [25] and one 
of  the  past  versions  (revision  6)  of  the  protocol  had  been  found 
defective by the AVISPA project team [26]. 
84
5.1  Analysis 
For this case study we used CSP/Casper and AVISPA. Of course, 
in  case  of  the  latter  method  our  formal  model  was  created 
completely independently from the one prepared by the AVISPA 
project  team  in  their  experiments.  Specifications  for  both 
AVISPA  and  CSP/Casper  were  created  based  on  a  shared  UML 
model in accordance to the analytical procedure and formalization 
rules  included  in  the  framework.  One  of  the  UML  diagrams 
modeling the protocol, in this case showing the protocol dynamics 
is presented in Figure 12. 
The  purpose  of  Purpose-Build  Keys  protocol  is  to  guarantee 
authentication  of  origin  of  the  Request  sent  from  the  Initiator  to 
the Responder. For each protocol session, the Initiator generates a 
fresh  public/secret  key  pair  and  uses  the  secret  key  to  sign  the 
Request  sent  in  message  two.  The  public  part  of  the  key  pair  is 
transmitted  to  the  Responder  in  the  first  message.  It  is  crucial 
however that this first transmission reached the responder reliably 
(message integrity and authentication of origin must be ensured), 
there  is  no  other  way  to  bind  the  key  to  the  Initiator’s  identity. 
This requirement is explicitly stated in protocol specification and 
resulted  in  an  assumption  A_secure_initialization  shown  on  our 
model as well as a special stereotype > for the 
first  protocol  message.  After  the  Request  is  sent  there  is  an 
additional  Challenge-Response  exchange  to  confirm  that  the 
originating  agent  is  indeed  the  holder  of  the  private  key  sent 
during the initialization. 
5.2  Results 
This  protocol  has  an  anomaly  which  arguably  may  become  a 
vulnerability.  The  problem  comes  from  messages  three  and  four. 
The Responder is expected to sign the Challenge which is chosen 
arbitrarily  by  the  Initiator.  This  is  a  violation  of  the  “don’t  sign 
random strings of bits” rule of protocol design. In fact the intruder 
can  use  an  unsuspecting  honest  agent  as  an  oracle  by  providing 
him  a  faked  Request  to  sign  as  a  seemingly  “random”  challenge. 
Then he can use the signed faked Request during another session 
thus violating authentication of origin. 
We  attempted  to  rediscover  this  attack  using  CSP/Caper  and 
AVISPA.  The  first  result  was  that  this  protocol  can  not  be 
successfully  analyzed  using  CSP/Casper.  This  fact  became 
apparent  during  formalization  phase,  when  it  became  clear  that 
authentication  of  origin  requirement  can  not  be  expressed  in  the 
language of Casper – it only supports entity authentication. Entity 
authentication is too restrictive for this protocol and would result 
in finding “dummy” attacks. 
between 
(specifically 
{Request}{PrivKey} 
AVISPA  has  somewhat  greater  flexibility  in  terms  of  what 
security  goals  can  be  verified  and  we  managed  to  rediscover  the 
attack  using  this  formal  method.  However,  the  only  reason  this 
attack  is  successful  is  the  type  flaw  between  messages  two  and 
four 
and 
{Challenge}{PrivKey}).  The  original Internet Draft specification 
states that “If replay protection is necessary, a nonce value (...) or 
timestamp may be included with the operation request.” [25]. That 
means  the  attack  can  be  successful  only  if  we  assume  that  the 
Request  is  sent  without  the  nonce  and  model  the  protocol 
accordingly. 
the 
A_request_is_signed_without_nonce  assumption  in  the  analysis 
report  and  also  put  it  in  the  model  shown  in  Figure  12.  This 
additional information allows to trace back the reason for the  
included 
have 
We 
theInitiator / Initiator 
: Node 
>
PubKey, PrivKey
> 
Request
> 
theInitiator: 
knows theResponder
knows theInitiator 
knows h()
theResponder: 
knows theInitiator 
knows theResponder
knows h()
theResponder / 
Responder : Node
> 1. h(PubKey), PubKey
>
A_secure_initialization
>
PubKey = h(PubKey)
2. Request, h(PubKey), {Request}{PrivKey} 
>
A_request_signed_without_nonce 
> 
Challenge 
3. Challenge
4. {Challenge}{PrivKey}
>
OriginAuthentication( theInitiator, [Request] )
>
Challenge
Figure 12. Protocol dynamics of the PBK 
attack to a modeling decision that was made earlier in the process, 
even  before  formalization.  This  assumption  was  not  given 
explicitly  by  the  team  at  AVISPA  project  that  analyzed  this 
protocol. 
To  summarize:  we  managed  to  rediscover  the  attack  through 
independent modeling and analysis. The problems we came across 
with CSP/Casper show that diversity of formal methods available 
at hand in any given project may become indispensable. A simple 
example of an important assumption present in the PBK protocol 
model  demonstrates  the  added  value  offered  by  assumption 
traceability. 
6.  Conclusions  
The  paper  introduced  a  framework  that  integrates  object  and 
formal  modeling  in  order  to  support  the  process  of  analysis  of 
security  protocols.  The  framework  uses  extended  (by  means  of 
stereotyping and profiling) UML for object modeling and several 
formal  model  checking  methods.  The  transition  between  UML 
models  and  formal  specifications  is  facilitated  by  using  a  set  of 
UML  modeling  patterns  and  formalization  rules.  The  process  of 
modeling and analysis is well supported by existing tools, such as 
UML  CASE  tools  and  others  depending  on  the  formal  methods 
applied:  AVISPA,  Casper  compiler  and  FDR  model  checker  or 
AutoFocus. 
The  framework  encompasses  a  formalized  analytical  procedure 
which guides a user through a sequence of well defined steps. The 
process  is  supported  by  a  set  of  documentation  templates  and 
patterns  with  a  particular  attention  on 
identifying  and 
documenting  the  security  objectives  and  all  the  assumptions  that 
condition  the  results  of  the  analyses.  We  have  found  that  such 
explicit  and  comprehensive  documentation  of  all  identified 
assumptions  (including  their  motivation,  rationale  and  possible 
consequences) together with easy to understand UML models was 
very  effective 
first  was  establishing 
communication  between  the  analysts  and  the  protocol  designers, 
and the second was tracing back all the analytical decisions made 
throughout the procedure. 
two  areas.  The 
in 
The  biggest  challenge  in  applying  the  framework  is  still  the  size 
and  complexity  of  formal  models  for  industry  security  protocols, 
such  as  the  one  analyzed  within  the  distributed digital signatures 
case study. Our experience in analyzing the protocol with FOCUS 
and  CSP/Casper  (results  reported  in  [22])  is  that  it  involves 
specialized  techniques  for managing complexity, such as proving 
smaller properties first and applying the outcomes to simplify the 
main  model.  This  requires  extensive  experience  with  protocol 
analysis as well as expert knowledge of the tools. Our framework 
is  not  a  “push-button”  technology.  However,  the  more  complex 
the  analysis  process  becomes,  the  greater  value  there  is  to  be 
gained by having a system for controlling the focus and scope of 
formal  modeling  and  for  documenting  and  communicating  the 
results. 
In  the  nearest  future  we  plan  for  further  development  of  the 
framework  and  for  running  more  case  studies,  perhaps  with 
additional  formal  techniques.  We  are  also  developing  a  software 
tool which will support the workflow of our analytical procedure 
85
and  assist  with  managing  all  the  artifacts  created  during  the 
analysis. 
Unified Modelling Language (UML): Beyond the Notation, 
1998. 
7.  REFERENCES 
[1]  C. Fidge, “A Survey of Verification Techniques for Security 
Protocols Technical Report 01-22”, Software Verification 
Research Centre, School of Information Technology, The 
University of Queensland, 2001. 
[14] E. Boiten, M. Bujorianu, “Exploring UML Refinement 
through Unification”, Critical Systems Development with 
UML - Proceedings of the UML'03 workshop, number 
TUM-I0323, pages 47-62, Technische Universitat Munchen, 
September 2003. 
[15] J. Jurjens, “Secure Systems Development with UML”, 
[2]  R. Anderson, “Security Engineering”, Wiley, ISBN: 0-471-
Springer, ISBN: 3-540-00701-6, 2004. 
38922-6, 2001. 
[16] CASENET, European Union 5th Framework Program 
[3]  C. A. Meadows, “Formal Verification of Cryptographic 
project, IST-2001-32446 
Protocols: A Survey”, ASIACRYPT: Advances in 
Cryptology,1995. 
[4]  M. Burrows, M. Abadi, R. Needham, “A logic of 
authentication. Technical Report TR 39”, Digital Equipment 
Corporation, February 1989. 
[5]  L. Paulson, “The inductive approach to verifying 
cryptographic protocols”, University of Cambridge 
Computer Laboratory, December 1998. 
[6]  A. Armando, D. Basin, Y. Boichut, Y. Chevalier, L. 
Compagna, J. Cuellar, P. Hankes Drielsma, P.C. Heám, O. 
Kouchnarenko, J. Mantovani, S. Mödersheim, D. von 
Oheimb, M. Rusinowitch, J. Santiago, M. Turuani, L. 
Viganò, L. Vigneron, “The Avispa Tool for the automated 
validation of internet security protocols and applications”, 
Computer Aided Verification, LNCS 3576, 2005. 
[7]  F. J. Thayer, J.C. Herzog, J.D. Guttman, “Strand spaces: 
Why is a security protocol correct?”, Proceedings of 1998 
IEEE Symposium on Security and Privacy, 1998. 
[8]  A.W. Roscoe, “The Theory and Practice of Concurrency”, 
Prentice-Hall, International Series in Computer Science, 
ISBN 0-13-674409-5, 1998. 
[9]  B. Broy, F. Dederichs, M. Fuchs, T.F. Gritzner, R. Weber, 
“The Design of Distributed Systems – An Introduction to 
FOCUS”, SFB-Report 342/2-2/92 A, Technical University of 
Munich, 1993. 
[10] M. Abadi, A. D. Gordon, “A calculus for cryptographic 
protocols: The Spi Calculus”, In Proceedings of the 4th 
ACM Conference on Computer and Communications 
Security, ACM Press, 1997. 
[11] L. Vigneron, “Specification Languages for Internet Security 
Protocols”, Workshop on Automated Validation of Internet 
Security Protocols and Applications, 2004. 
[17] J. Rumbaugh, I. Jacobson, G. Booch, “TheUnified Modelling 
Language Reference Manual (2nd Edition)”, Addison-
Wesley, 2005. 
[18] S. Johnston, “Rational UML Profile for business modeling”, 
IBM Corp. whitepaper, 2004. 
[19] B. Selic, “Unified Modeling Language version 2.0”, IBM 
Corp. whitepaper, 2005. 
[20] W. Chocianowicz, J. Pejas, A. Rucinski, “The Proposal of 
Protocol for Electronic Signature Creation in Public 
Environment”, in Enhanced Methods in Computer Security, 
Biometric and Artificial Intelligence Systems, Kluwer 
Academic Publishers, ISBN 1-4020-7776-9, 2005. 
[21] W. Chocianowicz, W. Mackow, A. Skrobek, P. Sukiennik, J. 
Pejas, Project No. 6 T11 2003 C/0 6280 – Technical Report 
7:  “Design and implementation of an universal module for 
reliable presentation of a document to be signed or verified”, 
Szczecin University of Technology, 2004. 
[22] M. Olszewski, “A Model-based Aproach to Analysis of 
Security Protocols – A Case Study”, Proceedings of the 
Technologies for Homeland Security and Safety Conference, 
Poland, 2005. 
[23] J. Jurjens, G. Wimmel, “Formally Testing Fail-Safety of 
Electronic Purse Protocols”, 2001. 
[24] J. Grunbauer, H. Hollmann, J. Jurjens, G. Wimmel, 
“Modelling and Verification of Layered Security Protocols: 
A Bank Application”, Computer Safety, Reliability, and 
Security, 22nd International Conference SAFECOMP, 2003. 
[25] S. Bradner, A. Mankin, J. Schiller, "A Framework for 
Purpose-Built Keys (PBK)", IETF Internet-Draft: draft-
bradner-pbk-frame-06.txt, 2003. 
[26] The AVISPA Library of protocols, http://www.avispa-
project.org/, AVISPA project: IST-2001-39252 
[12] J. M. Bruel, “Integrating Formal and Informal Specification 
Techniques. Why? How?”, Second IEEE Workshop on 
Industrial Strength Formal Specification Techniques, 1998. 
[13] J. M. Bruel, R. B. France, “Transforming UML models to 
Formal Specifications”, International Conference on the 
86