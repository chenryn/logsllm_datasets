CFBundleIdentifier
com.apple.driver.iPodDriver
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 35 of 79
IOClass
com_apple_driver_iPod
IOProviderClass
IOSCSIPeripheralDeviceNub
Peripheral Device Type
14
Product Identification
iPod
Vendor Identification
Apple
iPodDriverIniter
CFBundleIdentifier
com.apple.iokit.SCSITaskUserClient
IOClass
SCSITaskUserClientIniter
...
IOProviderClass
com_apple_driver_iPodNub
...
...
The base class for most I/O Kit families and drivers is IOService. We will also subclass IOService to
implement com_osxbook_driver_DummyDriver. Our driver's source references two macros that are defined
by the I/O Kit.
 OSDeclareDefaultStructors() declares C++ constructors and is conventionally inserted as the first
element of the class declaration in a driver header file.
OSDefineMetaClassAndStructors(), which is used in the driver's class implementation, defines the
constructors and destructors, implements the OSMetaClass allocation member function for the class,
and supplies the metaclass RTTI information for the RTTI system.
In general, all subclasses of OSObject use these macros or variants of them.
We implement several class methods in our dummy driver to examine when and in which order they are
called. However, we need not implement any logic in these methodswe can simply log a message and
forward the invocation to the corresponding superclass method.
Figure 1019 shows the contents of DummyDriver.h.
Figure 1019. Header file for the DummyDriver I/O Kit driver
// DummyDriver.h
#include 
class com_osxbook_driver_DummyDriver : public IOService
{
OSDeclareDefaultStructors(com_osxbook_driver_DummyDriver)
public:
virtual bool init(OSDictionary *dictionary = 0);
virtual void free(void);
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 36 of 79
virtual bool attach(IOService *provider);
virtual IOService *probe(IOService *provider, SInt32 *score);
virtual void detach(IOService *provider);
virtual bool start(IOService *provider);
virtual void stop(IOService *provider);
};
Figure 1020 shows the contents of DummyDriver.cpp. Note how the OSDefineMetaClassAndStructors()
macro is used: The first argument is the literal name of the driver's class (the same as the value of the
IOClass property in the personality), and the second argument is the literal name of the driver's superclass.
Figure 1020. Implementation of the DummyDriver I/O Kit driver's class
// DummyDriver.cpp
#include 
#include "DummyDriver.h"
#define super IOService
OSDefineMetaClassAndStructors(com_osxbook_driver_DummyDriver, IOService)
bool
com_osxbook_driver_DummyDriver::init(OSDictionary *dict)
{
bool result = super::init(dict);
IOLog("init\n");
return result;
}
void
com_osxbook_driver_DummyDriver::free(void)
{
IOLog("free\n");
super::free();
}
IOService *
com_osxbook_driver_DummyDriver::probe(IOService *provider, SInt32 *score)
{
IOService *result = super::probe(provider, score);
IOLog("probe\n");
return result;
}
bool
com_osxbook_driver_DummyDriver::start(IOService *provider)
{
bool result = super::start(provider);
IOLog("start\n");
return result;
}
void
com_osxbook_driver_DummyDriver::stop(IOService *provider)
{
IOLog("stop\n");
super::stop(provider);
}
bool
com_osxbook_driver_DummyDriver::attach(IOService *provider)
{
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 37 of 79
bool result = super::attach(provider);
IOLog("attach\n");
return result;
}
void
com_osxbook_driver_DummyDriver::detach(IOService *provider)
{
IOLog("detach\n");
super::detach(provider);
}
Let us load the driver manually using kextload and unload it using kextunload.
$ sudo kextload -v DummyDriver.kext
kextload: extension DummyDriver.kext appears to be valid
kextload: notice: extension DummyDriver.kext has debug properties set
kextload: loading extension DummyDriver.kext
kextload: DummyDriver.kext loaded successfully
kextload: loading personalities named:
kextload: DummyPersonality_0
kextload: sending 1 personality to the kernel
kextload: matching started for DummyDriver.kext
$ sudo kextunload -v /tmp/DummyDriver.kext
kextunload: unload kext /tmp/DummyDriver.kext succeeded
We can now look in /var/log/system.log for messages logged by DummyDriver. The following excerpt
from the log shows the sequence in which the I/O Kit calls the driver's methods.
init # kextload
attach
probe
detach
attach
start
...
stop # kextunload
detach
free
We see active matching in action as the I/O Kit calls attach(), probe(), and detach(), in that order. Since
our probe() implementation returns success, the I/O Kit proceeds to start the driver. Had we returned a
failure from probe(), the next method to be called would have been free().
Figure 1021 shows a more general view of how the I/O Kit calls driver methods in a driver's lifecycle.
Figure 1021. The sequence of I/O Kit driver methods called in a driver's lifecycle
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 38 of 79
While debugging an I/O Kit driver, it is possible to only load the kext and defer the matching phase. The -l
option instructs kextload not to start the matching process. Moreover, the -s option can be used to instruct
kextload to create symbol files for the kext and its dependencies.[10] This allows the programmer to set up
the debugger before initiating the matching process, which can be performed later using the -m option of
kextload. If the matching succeeds, the driver will be started eventually. Section 10.8.4 provides an
example of this debugging approach.
[10] When a kext is loaded, its symbols are relocated.
Providing User-Space Information to an I/O Kit Driver
A driver kext can retrieve information from the kext's property list file, which provides a load-
time mechanism for providing information to a driver from user space. However, there is an
important caveat: Because kext property lists are normally cached, modifying a property list
will take effect only when the caches are updated.
Drivers can access user-space memory by creating an IOMemoryDescriptor instance based on
a virtual address in a given task and then preparing and mapping the descriptor.
The user client interface is a convenient mechanismprovided the driver in question supports
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 39 of 79
itfor exchanging arbitrary information between a driver and a user program.
Some drivers implement the setProperty() method, which allows user programs to set
properties of I/O Registry entry objects through I/O Kit library functions, namely,
IORegistryEntrySetCFProperty() and IORegistryEntrySetCFProperties().
10.7. A Programming Tour of the I/O Kit's Functionality
In this section, we will look at a variety of examples of programmatic interaction with the I/O Kit, both from
user space and within the kernel.
10.7.1. Rotating a Framebuffer
The IOServiceRequestProbe() function in the I/O Kit framework can be used to request a bus to be
rescanned for family-specific device changes. The function takes two arguments: an IOService object to be
used to request the scan and an options mask that is interpreted by the object's family. In this example, we
will use IOServiceRequestProbe() to rotate the framebuffer corresponding to a display (that is, the
displayed desktop) in its entirety. We will use CGDisplayIOServicePort() to retrieve the I/O Kit service
port of the displaythe port represents the IOService object of interest. The options mask is constructed
based on the desired angle of rotation. Figure 1022 shows how a user-program invocation of
IOServiceRequestProbe() is communicated to the appropriate familyIOGraphics in this case.
Figure 1022. Processing involved in user-program-induced framebuffer rotation
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 40 of 79
As Figure 1022 shows, the 32-bit options mask value for framebuffer rotation (and in general, for a
supported framebuffer transform) consists of the constant kIOFBSetTransform in its lower 16 bits and an
encoding of the desired transform in the upper 16 bits. For example, the constants kIOScaleRotate90,
kIOScaleRotate180, and kIOScaleRotate270 rotate the framebuffer by 90, 180, and 270 degrees,
respectively, while scaling it appropriately.
The program shown in Figure 1023 rotates the specified display by the given angle, which must be a
multiple of 90 degrees. The target display is specified to the program by the display's unique ID assigned by
the Quartz layer. The program's -l option can be used to list the display ID and resolution of each online
display. Moreover, specifying 0 as the display ID rotates the main display.
Figure 1023. Programmatically rotating a framebuffer
// fb-rotate.c
#include 
#include 
#include 
#define PROGNAME "fb-rotate"
#define MAX_DISPLAYS 16
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 41 of 79
// kIOFBSetTransform comes from 
// in the source for the IOGraphics family
enum {
kIOFBSetTransform = 0x00000400,
};
void
usage(void)
{
fprintf(stderr, "usage: %s -l\n"
" %s -d  -r \n",
PROGNAME, PROGNAME);
exit(1);
}
void
listDisplays(void)
{
CGDisplayErr dErr;
CGDisplayCount displayCount, i;
CGDirectDisplayID mainDisplay;
CGDisplayCount maxDisplays = MAX_DISPLAYS;
CGDirectDisplayID onlineDisplays[MAX_DISPLAYS];
mainDisplay = CGMainDisplayID();
dErr = CGGetOnlineDisplayList(maxDisplays, onlineDisplays, &displayCount);
if (dErr != kCGErrorSuccess) {
fprintf(stderr, "CGGetOnlineDisplayList: error %d.\n", dErr);
exit(1);
}
printf("Display ID Resolution\n");
for (i = 0; i < displayCount; i++) {
CGDirectDisplayID dID = onlineDisplays[i];
printf("%-16p %lux%lu %32s", dID,
CGDisplayPixelsWide(dID), CGDisplayPixelsHigh(dID),
(dID == mainDisplay) ? "[main display]\n" : "\n");
}
exit(0);
}
IOOptionBits
angle2options(long angle)
{
static IOOptionBits anglebits[] = {
(kIOFBSetTransform | (kIOScaleRotate0) << 16),
(kIOFBSetTransform | (kIOScaleRotate90) << 16),
(kIOFBSetTransform | (kIOScaleRotate180) << 16),
(kIOFBSetTransform | (kIOScaleRotate270) << 16)
};
if ((angle % 90) != 0) // Map arbitrary angles to a rotation reset
return anglebits[0];
return anglebits[(angle / 90) % 4];
}
int
main(int argc, char **argv)
{
int i;
long angle = 0;
io_service_t service;
CGDisplayErr dErr;
CGDirectDisplayID targetDisplay = 0;
IOOptionBits options;
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 42 of 79
while ((i = getopt(argc, argv, "d:lr:")) != -1) {
switch (i) {
case 'd':
targetDisplay = (CGDirectDisplayID)strtol(optarg, NULL, 16);
if (targetDisplay == 0)
targetDisplay = CGMainDisplayID();
break;
case 'l':
listDisplays();
break;
case 'r':
angle = strtol(optarg, NULL, 10);
break;
default:
break;
}
}
if (targetDisplay == 0)
usage();
options = angle2options(angle);
// Get the I/O Kit service port of the target display
// Since the port is owned by the graphics system, we should not destroy it
service = CGDisplayIOServicePort(targetDisplay);
// We will get an error if the target display doesn't support the
// kIOFBSetTransform option for IOServiceRequestProbe()
dErr = IOServiceRequestProbe(service, options);
if (dErr != kCGErrorSuccess) {
fprintf(stderr, "IOServiceRequestProbe: error %d\n", dErr);
exit(1);
}
exit(0);
}
$ gcc -Wall -o fb-rotate fb-rotate.c -framework IOKit \
-framework ApplicationServices
$ ./fb-rotate -l
Display ID Resolution
0x4248edd 1920x1200 [main display]
0x74880f18 1600x1200