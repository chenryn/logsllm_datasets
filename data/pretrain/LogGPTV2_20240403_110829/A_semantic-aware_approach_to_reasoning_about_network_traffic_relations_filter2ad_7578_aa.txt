# Title: A Semantic-Aware Approach to Reasoning about Network Traffic Relations

# Authors:
Hao Zhang, Danfeng (Daphne) Yao, and Naren Ramakrishnan  
Department of Computer Science, Virginia Tech  
Blacksburg, VA, USA  
{haozhang, danfeng, naren}@cs.vt.edu

## Abstract
This paper addresses the challenge of inferring causal relationships between network packets on a host or within a network. Our approach involves discovering these causal relations and using the relational structure of network events to identify anomalous activities that cannot be attributed to legitimate causes. The key insight driving our method is that higher-order information, such as the underlying relations of events, is valuable for human experts in making informed decisions. We introduce a novel pairing method that generates specialized pairwise features, enabling efficient discovery of these relations using existing binary classification techniques. Preliminary experiments with real-world HTTP and DNS traffic demonstrate the effectiveness of our semantic-aware approach in inferring network traffic relations.

## Categories and Subject Descriptors
C.2.0 [General]: Security and protection

## Keywords
Network Security, Anomaly Detection, Classification

## 1. Introduction
This paper focuses on the problem of reasoning about network traffic relations. Our goal is to develop a traffic monitoring tool that can identify anomalous network events, which may result from misconfigured hosts, infected hosts, or external attackers. The core idea behind our approach is that higher-level information, such as the underlying relations or semantics of events, is crucial for human experts in cybersecurity. Analyzing these relations can provide important insights into identifying network anomalies. In this work, we concentrate on discovering the causal relations among network packets.

**Acknowledgments:** This research was partially supported by NSF grants CAREER CNS-0953638 and CCF-0937133.

**Copyright Notice:** Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage, and that copies bear this notice and the full citation on the first page. Copyrights for third-party components of this work must be honored. For all other uses, contact the owner/author(s). Copyright is held by the author/owner(s).

**CCS'13, November 4â€“8, 2013, Berlin, Germany.**  
ACM 978-1-4503-2477-9/13/11.  
http://dx.doi.org/10.1145/2508859.2512504.

Most current network analysis methods, which focus on filtering individual packets or aggregating statistics, do not effectively discover event relations. Some advanced solutions, such as those by Gu et al. [4] and King et al. [6], have shown the effectiveness of correlation analysis across multiple hosts and the construction of directed graphs from logs to dissect attack sequences. These approaches primarily rely on domain knowledge of networked systems or attack behaviors.

We present a new learning-based method and demonstrate through experiments that it is feasible to discover fine-grained causality in network traffic. The causality of network packets provides contextual interpretations of system and network behaviors, explaining why sequences of events occur and how they relate to each other. By leveraging transitivity, the problem of discovering packet dependencies among a set of events can be transformed into discovering the dependency of pairs of events, which we define as pairwise relations.

There are currently no general techniques for learning and recognizing directional causal relations of network traffic events. Most existing learning-based security studies focus on binary classification problems, where an unknown instance (e.g., email, code, or network packet) is classified as either legitimate or suspicious. Our relation discovery work differs from existing service dependency analysis (e.g., [1, 7]) due to its finer granularity (request vs. flow) and different relation semantics.

## 2. Proposed Approach
Our analysis aims to infer the causality of packets and detect anomalies by enforcing specific security policies. The main operations in our analysis include Data Collection, Pairing, Data Labeling, Training, Classification, and Security Policy Enforcement. The Data Labeling, Training, and Classification steps are standard in machine learning-based methods.

### 2.1 Pairing Operation
The Pairing operation extracts features of event pairs. Event attributes can be numeric, nominal, string, or composite. Various comparison functions are chosen based on the attribute types:

- **Numeric Attributes:** Compared by computing their difference, e.g., the time interval `TimeDiff` between two network events.
- **Nominal Attributes:** Categorized properties of an event, compared using string comparisons like substring or equality tests.
- **String Attributes:** Similarity measures, such as normalized edit distance, are used to compute the similarity of attribute values.
- **Composite Attributes:** Contain multiple values, e.g., a destination address. Comparison is made by comparing sub-attribute values separately, and a bitmap is defined to store the comparison results.

To reduce complexity, we only pair events whose timestamps differ by less than a certain threshold \( \tau \), avoiding meaningless pairs for packets with large time differences.

### 2.2 Security Policy Enforcement
We use the root-trigger policy as an example for security policy enforcement. This policy determines the legitimacy of an activity based on the legitimacy of its initial cause, i.e., the root trigger. Anomalous events are those without a valid root trigger, which may indicate malware activities or host/server misconfiguration. A valid root trigger should be related to user activities, such as function calls to retrieve user inputs, mouse clicks, or keyboard inputs. Events without any valid root triggers are referred to as vagabond events.

**Algorithm 1: Find-root Algorithm**
- **Input:** Set of event pairs \(\{(e_i \rightarrow e_j)\}\) and an event \(e_k\).
- **Output:** A set of roots, where each root is a valid root trigger of \(e_k\).

1. Define a set `roots` to store the results.
2. Define a queue `Q` and enqueue \(e_k\) onto `Q`.

This algorithm helps in identifying the root triggers of events, which is essential for enforcing the root-trigger policy and detecting anomalous activities.