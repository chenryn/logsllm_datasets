title:A semantic-aware approach to reasoning about network traffic relations
author:Hao Zhang and
Danfeng (Daphne) Yao and
Naren Ramakrishnan
POSTER: A Semantic-aware Approach to Reasoning
about Network Trafﬁc Relations∗
Hao Zhang, Danfeng (Daphne) Yao, and Naren Ramakrishnan
Department of Computer Science, Virginia Tech
Blacksburg, VA, USA
{haozhang, danfeng, naren}@cs.vt.edu
ABSTRACT
This paper addresses the problem of reasoning about rela-
tions between network packets on a host or in a network.
Our analysis approach is to discover the causal relations
among network packets, and use the relational structure of
network events to identify anomalous activities that cannot
be attributed to a legitimate cause. The key insight that
motivates our traﬃc-analysis approach is that higher-order
information such as the underlying relations of events is use-
ful for human experts’ cognition and decision making. We
design a new pairing method that produces special pairwise
features, so that the discovery problem can be eﬃciently
solved with existing binary classiﬁcation methods. Prelimi-
nary experiments involving real world HTTP and DNS traf-
ﬁc show promising evidence of the accuracy of inferring the
network traﬃc relations using our semantic-aware approach.
Categories and Subject Descriptors
C.2.0 [General]: Security and protection
Keywords
Network Security, Anomaly Detection, Classiﬁcation
1.
INTRODUCTION
This paper addresses the issue of reasoning about network
traﬃc relations. We aim to develop a traﬃc monitoring tool
that helps identify anomalous network traﬃc events, which
may be caused by misconﬁgured hosts, infected hosts, or
external attackers. The key insight that motivates our ap-
proach is that higher-level information such as the under-
lying relations or semantics of events is useful for human
experts’ cognition, reasoning, and decision making in cy-
ber security [3]. Thus, analyzing relations among network
events may provide important insights for identifying net-
work anomalies. We focus on discovering the causal relations
of network packets in this work.
∗This work has been supported in part by NSF grants CAREER
CNS-0953638 and CCF-0937133.
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage, and that copies bear this notice and the full ci-
tation on the ﬁrst page. Copyrights for third-party components of this work must be
honored. For all other uses, contact the owner/author(s). Copyright is held by the
author/owner(s).
CCS’13, November 4–8, 2013, Berlin, Germany.
ACM 978-1-4503-2477-9/13/11.
http://dx.doi.org/10.1145/2508859.2512504.
Most network analysis methods for ﬁltering individual
packets or aggregation statistics fail to fulﬁll this goal of
event-relation discovery, with some exceptions. The most
advanced solutions today aim to identify correlating traﬃc
events or attributes (e.g., IP addresses). Gu et al. demon-
strated the eﬀectiveness of correlation analysis across multi-
ple hosts of a network in detecting similarly infected bots [4].
King et al. constructed directed graphs from logs to show
network connections for dissecting attack sequences [6]. These
solutions mainly leverage domain knowledge of networked
systems (e.g., protocol or system speciﬁcations) or attack
behaviors (e.g., botnet command and control).
We present a new learning-based method and demonstrate
with experiments that discovering ﬁne-grained causality in
network traﬃc is feasible. The causality of network pack-
ets provide contextual interpretations to the behaviors of
systems and networks, illustrating why sequences of events
occur and how they relate to each other. Because of the tran-
sitivity, the problem of discovering the packet dependencies
among a set of events may be transformed into discover-
ing the dependency of pairs of events, which we deﬁned as
pairwise relation.
General techniques for learning and recognizing directional
causal relations of network traﬃc events do not exist. Most
of the existing learning-based security studies are on binary
classiﬁcation problems, where an unknown instance (e.g.,
email, code, or network packet) needs to be classiﬁed into
two classes – legitimate or suspicious. Our relation discovery
work also diﬀers from existing service dependency analysis
(e.g., [1, 7]), because of i) our ﬁner granularity (request vs.
ﬂow) and ii) diﬀerent relation semantics.
2. THE PROPOSED APPROACH
The goal of our analysis is to infer the causality of the
packets and infer the anomalies by enforcing speciﬁc security
policy. The main operations in our analysis are Data Col-
lection, Pairing, Data Labeling, Training, Classifi-
cation, and Security Policy Enforcement. The Data
Labeling, Training, and Classification operations are
standard for machine learning based methods.
We introduce a new feature extraction method referred
to as Pairing. This operation converts individual network
events into event pairs with comparable pairwise attributes,
so that conventional binary classiﬁcation techniques can then
be applied to discover the relations between packets. We
also present the use of root-trigger policy in security policy
enforcement to report anomalies.
A overview of our approach follows.
1375• Data Collection is intended to record and store the
events to be analyzed. Each event e has one or more
attributes (A1, . . . , Am) describing its properties.
• Pairing is used to extract pairwise comparison re-
sults of events’ attributes.
Its inputs are two events
e = (A1, . . . , Am) and e(cid:48) = (A(cid:48)
1, . . . , A(cid:48)
m). The output
is the event pair (e, e(cid:48)) with m pairwise attribute values
(B1, . . . , Bm), where a pairwise attribute Bi(i ∈ [1, m])
represents the comparison result of attributes Ai and
A(cid:48)
i. That is, Bi = fi(Ai, A(cid:48)
i), where fi() is a com-
parison function (e.g., isEqual, isGreaterThan, isWith-
inThreshold, isSubstring, etc.) for the type of the i-th
attribute in the events.
• Data Labeling is the operation that produces the
correct causal relations for the event pairs in a small
training dataset. We choose a binary label (1 or 0) to
indicate the existence or non-existence of any causal
relation in an event pair, e.g.,  represents
that event e triggers e(cid:48).
• Training is the operation that produces a machine
learning model with labelled training data. We adopt
two feature selection methods (Information Gain and
Gain Ratio) to ﬁnd an optimal set that could improve
the eﬀectiveness of machine learning classiﬁers.
• Classification is the operation to use the trained ma-
chine learning model to predict causal relations on new
event pairs {Pij = (ei, ej)}. We build and compare
three common supervised machine learning classiﬁers
– Naive Bayes, a Bayesian network, and a support vec-
tor machine (SVM) [2].
• Security Policy Enforcement is the operation in-
tended to apply security policies to the classiﬁcation
results and report anomalous events.
2.1 Pairing Operation
The Pairing operation extracts features of event pairs.
An event attribute may be of the numeric, nominal, string,
or composite type. Various comparison functions are chosen
based on the attribute types.
• Numeric attributes can be compared by computing
their diﬀerence, e.g., the interval TimeDiff between the
timestamps of two network events, i.e. Bi = Ai − A(cid:48)
i.
• A nominal attribute (e.g., ﬁle type, protocol type) cat-
egorizes the property of an event. Comparing nominal
attributes usually involves string comparison, e.g., sub-
string or equality tests.
• For the string type of attributes, we compute the sim-
ilarity of the attribute values as the pairing attribute
value. That is, Bi = fs(Ai, A(cid:48)
i), where function fs
is a similarity measure, e.g., normalized edit distance.
Taking HTTP packets as an example, we can compute
a pairwise attribute HostSim by measuring the similar-
ities between two host ﬁelds in the HTTP headers.
• A composite attribute contains multiple values, e.g., a
destination address is composed of four octets for the
IP address and an integer for the port. The compari-
son of two composite values is made by comparing the
sub-attribute values separately. Therefore, we deﬁne
a bitmap to store the comparison between the source
and destination IPs. Each bit refers to the diﬀerence
between one octet of two IPs or between two ports.
To reduce the complexity of the analysis, a heuristic is to
pair up events whose timestamps are close.
In our study,
only the events whose timestamps diﬀer by less than a cer-
tain threshold τ are compared. The purpose is to avoid
making meaningless pairs for packets whose time diﬀerence
is greater than τ .
2.2 Security Policy Enforcement
We use root-trigger policy as an example to explain the
security policy enforcement. This policy is to determine
whether the activity is legitimate or not based on the legit-
imacy of the initial cause of the event, i.e., the root trigger
of the event. According to this deﬁnition, anomalous events
are the events that do not have a valid root trigger. These
events may be due to malware activities or host/server mis-
conﬁguration. A speciﬁc root-trigger security deﬁnition is
based on user intention [8], where a valid root trigger should
be related to a user activity (e.g., a function call to retrieve
user inputs, mouse clicks, or keyboard inputs). In what fol-
lows, we refer to the events that do not have any valid root
triggers as vagabond events.
Algorithm 1 Find-root Algorithm.
Input: set = {(ei → ej)} and an event ek.
Output: a set roots, where each in roots is a root of ek.
1: deﬁne a set roots to store the results
2: deﬁne a queue Q and enqueue ek onto Q