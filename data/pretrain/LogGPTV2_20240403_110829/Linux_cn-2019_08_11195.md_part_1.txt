---
author: Gregory Bartholomew
category: 技术
comments_data:
- date: '2019-08-09 14:44:57'
  message: 奇淫巧技啊~~
  postip: 61.49.113.210
  username: CommandNotFound [Chrome 75.0|Windows 10]
count:
  commentnum: 1
  favtimes: 3
  likes: 0
  sharetimes: 0
  viewnum: 7957
date: '2019-08-07 07:00:17'
editorchoice: false
excerpt: 本文包含一些示例命令，向你展示如何使用 dd 命令粗略估计硬盘驱动器和 RAID 阵列的性能。
fromurl: https://fedoramagazine.org/check-storage-performance-with-dd/
id: 11195
islctt: true
largepic: /data/attachment/album/201908/07/070020iea912i3lzl2b6eu.jpg
permalink: /article-11195-1.html
pic: /data/attachment/album/201908/07/070020iea912i3lzl2b6eu.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 本文包含一些示例命令，向你展示如何使用 dd 命令粗略估计硬盘驱动器和 RAID 阵列的性能。
tags:
- 存储
- dd
thumb: false
title: 使用 dd 检查存储性能
titlepic: true
translator: wxy
updated: '2019-08-07 07:00:17'
---
![](/data/attachment/album/201908/07/070020iea912i3lzl2b6eu.jpg)
本文包含一些示例命令，向你展示如何使用 `dd` 命令*粗略*估计硬盘驱动器和 RAID 阵列的性能。准确的测量必须考虑诸如[写入放大](https://www.ibm.com/developerworks/community/blogs/ibmnas/entry/misalignment_can_be_twice_the_cost1?lang=en)和[系统调用开销](https://eklitzke.org/efficient-file-copying-on-linux)之类的事情，本指南不会考虑这些。对于可能提供更准确结果的工具，你可能需要考虑使用 [hdparm](https://en.wikipedia.org/wiki/Hdparm)。
为了分解与文件系统相关的性能问题，这些示例显示了如何通过直接读取和写入块设备来在块级测试驱动器和阵列的性能。**警告**：*写入*测试将会销毁用来运行测试的块设备上的所有数据。**不要对包含你想要保留的数据的任何设备运行这些测试！**
### 四个测试
下面是四个示例 `dd` 命令，可用于测试块设备的性能：
1、 从 `$MY_DISK` 读取的一个进程：
```
# dd if=$MY_DISK of=/dev/null bs=1MiB count=200 iflag=nocache
```
2、写入到 `$MY_DISK` 的一个进程：
```
# dd if=/dev/zero of=$MY_DISK bs=1MiB count=200 oflag=direct
```
3、从 `$MY_DISK` 并发读取的两个进程：
```
# (dd if=$MY_DISK of=/dev/null bs=1MiB count=200 iflag=nocache &); (dd if=$MY_DISK of=/dev/null bs=1MiB count=200 iflag=nocache skip=200 &)
```
4、 并发写入到 `$MY_DISK` 的两个进程：
```
# (dd if=/dev/zero of=$MY_DISK bs=1MiB count=200 oflag=direct &); (dd if=/dev/zero of=$MY_DISK bs=1MiB count=200 oflag=direct skip=200 &)
```
* 执行读写测试时，相应的 `iflag=nocache` 和 `oflag=direct` 参数非常重要，因为没有它们，`dd` 命令有时会显示从[内存](https://en.wikipedia.org/wiki/Random-access_memory)中传输数据的结果速度，而不是从硬盘。
* `bs` 和 `count` 参数的值有些随意，我选择的值应足够大，以便在大多数情况下为当前硬件提供合适的平均值。
* `null` 和 `zero` 设备在读写测试中分别用于目标和源，因为它们足够快，不会成为性能测试中的限制因素。
* 并发读写测试中第二个 `dd` 命令的 `skip=200` 参数是为了确保 `dd` 的两个副本在硬盘驱动器的不同区域上运行。
### 16 个示例
下面是演示，显示针对以下四个块设备中之一运行上述四个测试中的各个结果：
1. `MY_DISK=/dev/sda2`（用在示例 1-X 中）
2. `MY_DISK=/dev/sdb2`（用在示例 2-X 中）
3. `MY_DISK=/dev/md/stripped`（用在示例 3-X 中）
4. `MY_DISK=/dev/md/mirrored`（用在示例 4-X 中）
首先将计算机置于*救援*模式，以减少后台服务的磁盘 I/O 随机影响测试结果的可能性。**警告**：这将关闭所有非必要的程序和服务。在运行这些命令之前，请务必保存你的工作。你需要知道 `root` 密码才能进入救援模式。`passwd` 命令以 `root` 用户身份运行时，将提示你（重新）设置 `root` 帐户密码。
```
$ sudo -i
# passwd
# setenforce 0
# systemctl rescue
```
你可能还想暂时禁止将日志记录到磁盘：
```
# sed -r -i.bak 's/^#?Storage=.*/Storage=none/' /etc/systemd/journald.conf
# systemctl restart systemd-journald.service
```
如果你有交换设备，可以暂时禁用它并用于执行后面的测试：
```
# swapoff -a
# MY_DEVS=$(mdadm --detail /dev/md/swap | grep active | grep -o "/dev/sd.*")
# mdadm --stop /dev/md/swap
# mdadm --zero-superblock $MY_DEVS
```
#### 示例 1-1 （从 sda 读取）
```
# MY_DISK=$(echo $MY_DEVS | cut -d ' ' -f 1)
# dd if=$MY_DISK of=/dev/null bs=1MiB count=200 iflag=nocache
```
```
200+0 records in
200+0 records out
209715200 bytes (210 MB, 200 MiB) copied, 1.7003 s, 123 MB/s
```
#### 示例 1-2 （写入到 sda）
```
# MY_DISK=$(echo $MY_DEVS | cut -d ' ' -f 1)
# dd if=/dev/zero of=$MY_DISK bs=1MiB count=200 oflag=direct
```
```
200+0 records in
200+0 records out
209715200 bytes (210 MB, 200 MiB) copied, 1.67117 s, 125 MB/s
```
#### 示例 1-3 （从 sda 并发读取）
```
# MY_DISK=$(echo $MY_DEVS | cut -d ' ' -f 1)
# (dd if=$MY_DISK of=/dev/null bs=1MiB count=200 iflag=nocache &); (dd if=$MY_DISK of=/dev/null bs=1MiB count=200 iflag=nocache skip=200 &)
```
```
200+0 records in
200+0 records out
209715200 bytes (210 MB, 200 MiB) copied, 3.42875 s, 61.2 MB/s
200+0 records in
200+0 records out
209715200 bytes (210 MB, 200 MiB) copied, 3.52614 s, 59.5 MB/s
```
#### 示例 1-4 （并发写入到 sda）
```
# MY_DISK=$(echo $MY_DEVS | cut -d ' ' -f 1)
# (dd if=/dev/zero of=$MY_DISK bs=1MiB count=200 oflag=direct &); (dd if=/dev/zero of=$MY_DISK bs=1MiB count=200 oflag=direct skip=200 &)
```
```
200+0 records out
209715200 bytes (210 MB, 200 MiB) copied, 3.2435 s, 64.7 MB/s
200+0 records in
200+0 records out
209715200 bytes (210 MB, 200 MiB) copied, 3.60872 s, 58.1 MB/s
```
#### 示例 2-1 （从 sdb 读取）
```
# MY_DISK=$(echo $MY_DEVS | cut -d ' ' -f 2)
# dd if=$MY_DISK of=/dev/null bs=1MiB count=200 iflag=nocache
```
```
200+0 records in
200+0 records out
209715200 bytes (210 MB, 200 MiB) copied, 1.67285 s, 125 MB/s
```
#### 示例 2-2 （写入到 sdb）
```
# MY_DISK=$(echo $MY_DEVS | cut -d ' ' -f 2)
# dd if=/dev/zero of=$MY_DISK bs=1MiB count=200 oflag=direct
```
```
200+0 records in
200+0 records out
209715200 bytes (210 MB, 200 MiB) copied, 1.67198 s, 125 MB/s
```
#### 示例 2-3 （从 sdb 并发读取）
```
# MY_DISK=$(echo $MY_DEVS | cut -d ' ' -f 2)
# (dd if=$MY_DISK of=/dev/null bs=1MiB count=200 iflag=nocache &); (dd if=$MY_DISK of=/dev/null bs=1MiB count=200 iflag=nocache skip=200 &)
```
```
200+0 records in
200+0 records out
209715200 bytes (210 MB, 200 MiB) copied, 3.52808 s, 59.4 MB/s
200+0 records in
200+0 records out
209715200 bytes (210 MB, 200 MiB) copied, 3.57736 s, 58.6 MB/s
```
#### 示例 2-4 （并发写入到 sdb）