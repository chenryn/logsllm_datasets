```
kubectl get nodes
```
与 EKS 一样，您应该会看到所有已调配节点的列表。成功！最后，让我们来看看 Azure 的托管产品。
# 微软 Azure–Azure Kubernetes 服务
微软 Azure 的托管 Kubernetes 服务叫做 AKS。在 AKS 上创建集群可以通过 Azure CLI 完成。
## 开始
要在 AKS 上创建集群，您可以使用 Azure CLI 工具并运行以下命令来创建服务主体(集群将用于访问 Azure 资源的角色):
```
az ad sp create-for-rbac --skip-assignment --name myClusterPrincipal
```
这个命令的结果将是一个包含服务主体信息的 JSON 对象，我们将在下一步中使用它。这个 JSON 对象如下所示:
```
{
  "appId": "559513bd-0d99-4c1a-87cd-851a26afgf88",
  "displayName": "myClusterPrincipal",
  "name": "http://myClusterPrincipal",
  "password": "e763725a-5eee-892o-a466-dc88d980f415",
  "tenant": "72f988bf-90jj-41af-91ab-2d7cd011db48"
}
```
现在，您可以使用上一个 JSON 命令中的值来实际创建您的 AKS 集群:
Aks-create-cluster.sh
```
az aks create \
    --resource-group devResourceGroup \
    --name myCluster \
    --node-count 2 \
    --service-principal  \
    --client-secret  \
    --generate-ssh-keys
```
该命令假设一个名为`devResourceGroup`的资源组和一个名为`devCluster`的集群。对于`appId`和`password`，使用服务主体创建步骤中的值。
最后，要在您的机器上生成正确的`kubectl`配置，您可以运行以下命令:
```
az aks get-credentials --resource-group devResourceGroup --name myCluster
```
此时，您应该能够正确运行`kubectl`命令。使用`kubectl get nodes`命令测试配置。
# 程序化集群创建工具
有几种工具可以在各种非托管环境中引导 Kubernetes 集群。我们将重点介绍三种最受欢迎的产品:Kubeadm、Kops 和 Kubespray。每个工具都针对不同的用例，并且通常以不同的方法工作。
## 立方体
Kubeadm 是由 Kubernetes 社区创建的工具，用于简化已经配置好的基础设施上的集群创建。与 Kops 不同，Kubeadm 不具备在云服务上调配基础设施的能力。它只是创建了一个最佳实践集群，将通过 Kubernetes 一致性测试。Kubeadm 对基础设施是不可知的——它应该可以在任何可以运行 Linux 虚拟机的地方工作。
## 科普斯
Kops 是一个流行的集群配置工具。它为您的集群提供底层基础设施，安装所有集群组件，并验证您的集群的功能。它还可以用于执行各种集群操作，如升级、节点轮换等。Kops 目前支持 AWS，其中(截至撰写本书时)beta 版支持 Google Compute Engine 和 OpenStack，alpha 版支持 VMware vSphere 和 DigitalOcean。
## 库柏拉伊
库贝斯雷与 Kops 和库贝达姆都不一样。与 Kops 不同，Kubespray 本身并不提供集群资源。相反，Kubespray 允许您在 Ansible 和游民之间进行选择，以便执行资源调配、编排和节点设置。
与 kube dam 相比，Kubespray 的集成集群创建和生命周期流程要少得多。Kubespray 的较新版本允许您在节点设置后专门为集群创建使用 Kubeadm。
重要说明
由于用库贝斯雷创建集群需要一些特定于 Ansible 的领域知识，我们将在本书中不讨论这个问题——但是可以在[https://github . com/kubernetes-sigs/kubestray/blob/master/docs/get-starting . MD](https://github.com/kubernetes-sigs/kubespray/blob/master/docs/getting-started.md)上找到库贝斯雷的所有内容的指南。
# 用 Kubeadm 创建集群
要使用 Kubeadm 创建集群，您将需要提前配置您的节点。与任何其他 Kubernetes 集群一样，我们需要运行 Linux 的虚拟机或裸机服务器。
出于本书的目的，我们将展示如何仅使用单个主节点引导 Kubeadm 集群。对于高可用性设置，您需要在其他主节点上运行额外的 join 命令，这些命令可以在[https://kubernetes . io/docs/setup/production-environment/tools/kube dam/high-availability/](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/)找到。
## 安装 Kubeadm
首先，您需要在所有节点上安装 kubedam。每个支持的操作系统的安装说明可以在[https://kubernetes . io/docs/setup/production-environment/tools/kube dam/install-kube dam](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm)上找到。
对于每个节点，还要确保所有必需的端口都是打开的，并且已经安装了预期的容器运行时。
## 启动主节点
要使用 Kubeadm 快速启动主节点，只需运行一个命令:
```
kubeadm init
```
该初始化命令可以包含几个可选参数，根据您首选的集群设置、网络等，您可能需要使用它们。
在`init`命令的输出中，你会看到一个`kubeadm join`命令。请确保保存此命令。
## 启动工作节点
为了引导工作节点，您需要运行您保存的`join`命令。该命令的形式如下:
```
kubeadm join --token [TOKEN] [IP ON MASTER]:[PORT ON MASTER] --discovery-token-ca-cert-hash sha256:[HASH VALUE]
```
该命令中的令牌是引导令牌。它用于相互验证节点，并将新节点加入集群。有了对这个令牌的访问，就有了将新节点加入集群的能力，所以要这样对待它。
## 设置库必妥
有了 Kubeadm，kubectl 将已经在主节点上正确设置。但是，要从任何其他计算机或集群之外使用 kubectl，您可以将配置从主计算机复制到本地计算机:
```
scp root@[IP OF MASTER]:/etc/kubernetes/admin.conf .
kubectl --kubeconfig ./admin.conf get nodes 
```
这个`kubeconfig`将是集群管理员配置——为了指定其他用户(和权限)，您需要添加新的服务帐户，并为他们生成`kubeconfig`文件。
# 用 Kops 创建集群
由于 Kops 将为您提供基础设施，因此无需预先创建任何节点。所有你需要做的就是安装 Kops，确保你的云平台凭证工作，一次创建你的集群。Kops 可以安装在 Linux、macOS 和 Windows 上。
在本教程中，我们将在 AWS 上创建一个集群，但是您可以在 https://github.com/kubernetes/kops/tree/master/docs 的 Kops 文档中找到其他受支持的 Kops 平台的说明。
## 安装在 macOS 上
在 OS X，安装 Kops 最简单的方法是使用自制软件:
```
brew update && brew install kops
```
或者，你可以在[https://github.com/kubernetes/kops/releases/tag/1.12.3](https://github.com/kubernetes/kops/releases/tag/1.12.3)从 Kops GitHub 页面获取最新稳定的 Kops 二进制文件。
## 安装在 Linux 上
在 Linux 上，可以通过以下命令安装 Kops :
Kops-linux-install.sh
```
curl -LO https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64
chmod +x kops-linux-amd64
sudo mv kops-linux-amd64 /usr/local/bin/kops
```
## 安装在窗户上
要在 Windows 上安装 Kops ，您需要从[https://github.com/kubernetes/kops/releases/latest](https://github.com/kubernetes/kops/releases/latest)下载最新的 Windows 版本，将其重命名为`kops.exe`，并将其添加到您的`path`变量中。
## 为 Kops 设置凭证
为了让 Kops 工作，您需要在您的机器上有一些必需的 IAM 权限的 AWS 凭据。为了安全地做到这一点，您需要专门为 Kops 创建一个 IAM 用户。
首先，为`kops`用户创建一个 IAM 组:
```
aws iam create-group --group-name kops_users
```
然后，为`kops_users`组附加所需的角色。为了正常运行，Kops 将需要`AmazonEC2FullAccess`、`AmazonRoute53FullAccess`、`AmazonS3FullAccess`、`IAMFullAccess`和`AmazonVPCFullAccess`。我们可以通过运行以下命令来实现这一点:
Provide-aws-policies-to-kops.sh
```
aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonEC2FullAccess --group-name kops
aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonRoute53FullAccess --group-name kops
aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonS3FullAccess --group-name kops
aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/IAMFullAccess --group-name kops
aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonVPCFullAccess --group-name kops
```
最后，创建`kops`用户，将其添加到`kops_users`组，并创建编程访问键，您应该保存:
```
aws iam create-user --user-name kops
aws iam add-user-to-group --user-name kops --group-name kops_users
aws iam create-access-key --user-name kops
```
要允许 Kops 访问您的新 IAM 凭据，您可以使用以下命令，使用上一个命令(`create-access-key`)中的访问密钥和密码配置您的 AWS 命令行界面:
```
aws configure
export AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id)
export AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key)
```
## 设置状态存储
设置好适当的凭证后，我们就可以开始创建集群了。在这种情况下，我们将构建一个简单的基于流言蜚语的集群，这样我们就不需要乱搞域名系统了。要查看可能的域名系统设置，您可以查看 Kops 文档([https://github.com/kubernetes/kops/tree/master/docs](https://github.com/kubernetes/kops/tree/master/docs))。
首先，我们需要一个位置来存储我们的集群规范。S3 非常适合这个，因为我们在 AWS 上。
和 S3 一样，桶名必须是唯一的。您可以使用 AWS SDK 轻松创建一个桶(确保将`my-domain-dev-state-store`替换为您想要的 S3 桶名称):
```
aws s3api create-bucket \
    --bucket my-domain-dev-state-store \
    --region us-east-1
```
启用桶加密和版本控制也是最佳做法:
```
aws s3api put-bucket-versioning --bucket prefix-example-com-state-store  --versioning-configuration Status=Enabled
aws s3api put-bucket-encryption --bucket prefix-example-com-state-store --server-side-encryption-configuration '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}'
```
最后，要为 Kops 设置变量，请使用以下命令:
```
export NAME=devcluster.k8s.local
export KOPS_STATE_STORE=s3://my-domain-dev-cluster-state-store
```
重要说明
Kops 支持多个州级存储位置，如 AWS S3、谷歌云存储、Kubernetes、DigitalOcean、OpenStack Swift、阿里巴巴云和 memfs。但是，您可以将 Kops 状态保存到本地文件中，并使用它。拥有基于云的状态存储的好处是多个基础架构开发人员能够使用版本控制来访问和更新它。