measurement MRENCLAVE as input, so that the sealed data could only
be unsealed and accessed by the IssueE, preventing other enclaves
signed by the same OPERA-SV from accessing the issuing key.
After the IssueE either creates or loads an issuer context, IssueE
validation process needs to be performed. We implemented two
ECall functions for this task:
• request_gvcert() takes the current timestamp as input, gener-
ates a nonce, and outputs a report with the hash of the group veri-
fication certificate as the report data, along with the pseManife-
st. The OPERA Server software asks Intel’s quoting enclave to
sign the report and sends the resulting quote and pseManifest
to IAS via an OPERA-SV frontend for verification.
Session 10B: TEE IICCS ’19, November 11–15, 2019, London, United Kingdom2324• produce_gvcert() takes the returned IAS verification report,
the corresponding report signature, and the report signing cer-
tificate chain as input, checks its validity, and outputs a gvCert
accordingly. The root certificate, i.e., the Attestation Report Sign-
ing CA Certificate, is hard-coded into the enclave.
We also implemented two ECall functions to support the EPID
provisioning process between the IssueE and the AttestE as de-
scribed in Sec. 3.2: gen_nonce() generates and outputs a nonce, i.e.,
Msg 2, upon receiving a join request, i.e., Msg 1. certify_member()
takes as input Msg 3, and output Msg 4. We implemented two ECall
functions for revocation: revoke_priv() and revoke_sig() are
used for revoking compromised EPID member private keys and
signatures linked with abnormal behaviors. When either revocation
list is updated, the monotonic counter will be increased. The up-
dated issuer context and monotonic counter value will be re-sealed
to reflect this change.
SGX Platform Software and AttestE. Applications running
5.1.2
on the SGX platform are responsible for launching AttestE and
handling the communication between the AttestE and its exter-
nal world. To support the EPID provisioning process between
the IssueE and the AttestE as described in Sec. 3.2, we imple-
mented two ECall functions in AttestE: join_request() takes
as input the nonce received from Msg 2, and generates Msg 3.
create_member() takes as input the Msg 4 and finalize the cre-
ation of a new member private key. Another two ECall func-
tions, seal_member() and unseal_member(), were implemented
for saving and restoring existing member private keys. Note that
the seal key is derived using the AttestE’s enclave measurement
MRENCLAVE, in order to prevent other enclaves signed by the same
OPERA-SV from accessing the sealed secrets.
Two ECall functions were developed for AttestE validation
(i.e., updating its internal timestamp):
• ts_update_request() generates a nonce, and outputs a report
and pseManifest accordingly. The SGX platform software asks
Intel’s quoting enclave to sign the report and sends the resulting
quote and pseManifest to IAS via an OPERA-SV frontend for
verification.
• ts_update_response() verifies the returned IAS verification
report, report signature and report signing certificate chain, and
update its timestamp accordingly.
For OPERA attestation, we implemented an ECall function, opera
_gen_quote(), to generate OPERA quote for remote attestation. Par-
ticularly, it takes as input a report provided by an attested enclave,
and signs a data blob including the attested enclave’s report, its
internal timestamp and pseManifest status using the member pri-
vate key. The resulting OPERA quote, along with the gvCert and
revocation lists will be returned for proving the identities of the
attested enclaves and integrity of the report data.
OPERA-SV Frontend Software. The OPERA-SV frontend is im-
5.1.3
plemented using cURL to communicate with IAS to verify IAS
quotes. We implemented one function for this task: get_ias_repo-
rt() receives IAS quotes and optionally pseManifest from either
Table 3: The latency evaluation
EPID SDK
EpidSignBasic
EpidVerifyBasicSig
Intel’s Remote Attestation
sgx_get_quote
send quote to IAS and receive report
Open Remote Attestation
get OPERA quote via IPC socket
verify OPERA quote
Latency (ms)
5.09
13.77
Latency (ms)
8.46
195.25
Latency (ms)
5.17
13.81
IssueEs or AttestEs, forwards them to IAS, receives the IAS verifi-
cation reports to be returned to the requesting OPERA enclaves. Com-
munication between OPERA-SV frontend server and other servers is
implemented using Internet sockets.
IsvE development tools. We implemented tools for IsvE de-
5.1.4
velopers to adopt OPERA. Specifically, we implemented a function
generate_report() which can be called within the IsvE to gener-
ate a report of attesting message to be signed later. We implemented
a function opera_get_quote() to be used by IsvE host program to
communicate with AttestE for generating OPERA quote. On the ISV
client side, we implemented a function opera_verify_quote() for
OPERA quote verification.
5.1.5 Example IsvE and ISV client. We also implemented an exam-
ple IsvE to demonstrate how to use OPERA. The IsvE has one ECall
function, gen_report() which generates a report. An OPERA quote
is generated by its host program and sent along with the report
to the SGX platform software using inter-process communication
mechanisms (e.g., IPC socket).
With the returned OPERA quote and the group verification cer-
tificate, we implemented two example ISV clients (one written in
C++ and the other in Python) which can verify the validity of the
OPERA quote and determine the identity the IsvE and the integrity
of its report data.
5.2 Evaluation
In this section, we evaluate the performance of OPERA. All exper-
iments were conducted on a Dell Latitude 5480 laptop equipped
with an Intel Core i7-7820HQ processor and 8GB memory. The CPU
has 4 physical cores and 8 logical cores. Wi-Fi is used for communi-
cation between different servers and access to IAS. Evaluation was
conducted with empty revocation lists.
Latency. We first measured the latencies of different operations.
The results shown in Table 3 are average measurements over 10, 000
runs.
To set up a baseline for our evaluation, we first measured the exe-
cution time of the two basic EPID operations that were implemented
in Intel SGX SDK, i.e., EpidSignBasic() and EpidVerifyBasic-
Sig(). The former is used to sign an enclave quote and generate
an EPID signature, and the latter is used to verify an EPID sig-
nature. Both these operations are computationally intensive. By
running the two operations 10, 000 times and calculating the av-
erage, we found the execution time of the two operations were
Session 10B: TEE IICCS ’19, November 11–15, 2019, London, United Kingdom2325Figure 8: Latency of OPERA attestation with multiple
AttestEs
5.09ms and 13.77ms, respectively. We then measured the latency
of Intel’s Remote Attestation operations as a control experiment.
sgx_get_quote() is an API provided by Intel SGX SDK for gener-
ating a quote using Intel’s quoting enclave. Its execution time is
around 8.46ms (average over 10, 000 runs). We also measured the
time taken to send the signed quote to IAS and receive the verifica-
tion report. The average latency (including the network latency)
was 195.25ms.
We then measured the latency of our implemented OPERA. First
of all, the latency of obtaining an OPERA quote, which measures
the time it takes to send a report generated by an IsvE to AttestE
and receive an OPERA quote through an IPC socket, is 5.17ms (over
10, 000 runs). The latency is very close to that of EpidSignBasic()
(i.e., 5.09ms). It means the majority of the time is consumed by the
EpidSignBasic() operations, and the overhead of inter-process
communication is by contrast extremely small.
We also evaluated the latency of attestation with OPERA when
using multiple AttestEs on the same machine. Particularly, we
increase the number of AttestEs from 1 to 8, and assigned these
AttestEs to run on logical CPU core 0, core 1, ..., core 7 in order.
Each logical core i (i ∈ [0, 1, 2, 3]) is on the same physical core as
core i + 4. In Fig. 8, we show the attestation latency of the AttestE
running on core 0 and how the latency is affected by running more
AttestEs on other CPU cores concurrently. It can be seen that re-
source contention due to Hyper-Threading is much more significant
than contention from other physical cores. Nevertheless, OPERA can
be parallelized with multiple AttestEs on the same machine (up
to the number of logical cores) to improve its scalability.
Next, the latency of verifying the received OPERA quote, which in-
volves verification of a chain of certificates, is around 13.81ms. Com-
pared with the execution time of EpidVerifyBasicSig(), which
is 13.77ms, we can see that the group signature verification is dom-
inating the verification latency.
Compared with the attestation with IAS, OPERA attestation is
significantly faster (5.17+13.81ms vs. 8.46+195.25ms). To make the
comparison fair, it is worthy noting that Intel’s remote attestation
involves not only an extra round-trip network communication,
but also reconstructing an EPID context after unsealing the EPID
private key and a verification of the EPID signature at IAS. However,
Figure 9: Throughput of OPERA attestation
Table 4: OPERA overhead
One-time setup
Per re-validation
IssueE
279.05ms
219.17ms
AttestE
397.01ms
376.10ms
these overheads are unnecessary for frequent attestation requests,
thus can be avoided by OPERA.
Throughput. We measured the number of attestation requests per
second that could be processed by OPERA on the same SGX platform.
Intuitively, the more logical cores running AttestEs that provide
attestation services concurrently, the higher the throughput. The
results are shown in Fig. 9. The throughput ranges from 193.32
requests per second to 878.39 requests per second. In comparison,
sgx_get_quote() generates 118.18 IAS quotes per second1. The
throughput of OPERA can be much higher than that of IAS.
Overhead. We evaluated the overhead of our implemented OPERA.
The overhead consists of two parts: one time setup overhead and
periodic re-validation overhead. The results shown in Table 4 are
average measurements over 1, 000 runs. For IssueE, we measured
an averaged setup time of 279.05ms, consisting of generating a
new EPID issuing key and the corresponding group public key, and
registering a monotonic counter for the replay protected policy. To
measure the validation time, i.e., generating a refreshed gvCert, we
run a frontend on the same machine as the IssueE to access IAS.
The averaged time for IssueE validation is 219.17ms.
To measure the overhead of setting up AttestE, we run an
IssueE and a frontend on another laptop, a Lenovo Thinkpad X1
Carbon (4th Gen) laptop with an Intel Core i5-6200U processor and
8GB memory. The setup time of an AttestE was 397.01ms, includ-
ing running the provisioning protocol with the IssueE and one
round of Intel’s remote attestation via the frontend. The periodic re-
validation of AttestE includes retrieving a refreshed gvCert and
one round of Intel’s remote attestation. We measured an averaged
validation time of 376.10ms.
1This result is measured with only one quoting enclave. As Intel’s Architectural Enclave
Service Manager (AESM) implementation launches only one quoting enclave, which
is ensured to be singled threaded (the number of TCS of the quoting enclave is set to
1), hence its throughput would not increase with more logical cores.
 0 2 4 6 8 1012345678Latency on core 0 (ms)Number of logical cores running attestation service5.175.415.646.058.718.818.939.07 0 100 200 300 400 500 600 700 800 90012345678Number of requests per secondNumber of logical cores running attestation service193.32368.70531.23659.58702.46763.08822.22878.39Session 10B: TEE IICCS ’19, November 11–15, 2019, London, United Kingdom2326While the setup overhead is incurred only once and thus not
critical, the periodic re-validation cost depends on the re-validation
frequency. For example, when the re-validation is needed per hour,
the overhead could be insignificant (≈ 0.01%).
Other Evaluations. IssueE contains 1705 lines of code (including
the EPID issuer implemented by ourselves) and AttestE contains
780 lines of code. The binary sizes of an IssueE and an AttestE are
1.08MB and 1.09MB, respectively. Multiple IssueEs and AttestEs
could be launched on the same machine (even with 128MB EPC).
6 DISCUSSION
6.1 Application Scenarios
OPERA is a generic attestation framework that fits both centralized
and decentralized attestation model.
OPERA can support centralized attestation as in the case of confi-
dential cloud computing [2, 31] and privacy-preserving blockchains
[13, 50], the cloud provider or the blockchain operator may serve
as the OPERA-SV and launch IssueEs and AttestEs for the hosted
applications. Users of such cloud services may use OPERA so they do
not even need to use IAS. Scalability of attestation and privacy of
the execution can be provided by OPERA. As SGX requires enclaves
to be launched with a valid MRSIGNER, the hosted applications may
request the cloud provider or blockchain operator to sign the appli-
cations and run with the providers’ MRSIGNER. Alternatively, if the
SGX platforms support Flexible Launch Control (FLC) feature [19],
the providers may implement customized launch enclaves to allow
the hosted applications to run without registering with Intel.
OPERA can also be implemented to support decentralized attesta-
tion, in which enclave programs on the same SGX platform attest
one another. When an ISV launches her enclave on a SGX plat-
form and requests remote attestation through OPERA. If there is
no AttestE already launched on that SGX platform, the ISV could
launch an AttestE herself to provide attestation service to her own
enclaves and other enclaves to be launched later on the SGX plat-
form. The AttestE will search for an IssueE to join. If no IssueE
is found, the ISV may launch an IssueE somewhere to support
her own AttestE and others’ AttestEs. Since the source code of
OPERA enclaves are publicly available, and the measurements are
calculated unrelated to who signs and/or launches the enclaves.
Therefore, the IssueE setup by one ISV would allow AttestEs from
other ISVs to join.
6.2 Alternative Design Options
Supporting multiple IssueEs. In our design, if the OPERA Server
that runs IssueE goes offline, all associated AttestEs can only pro-
vide attestation service till the current group public key certificate
expires (e.g., after a day or a month). In our current design, OPERA
may launch more than one AttestEs that are associated with dif-
ferent IssueEs on each SGX platform. In this way, an SGX platform
may always find a working AttestE to conduct attestation. An
alternative design is to launch IssueEs that share the same issuing
key on multiple OPERA Servers to eliminate single-point-of-failure.
To do so, these IssueEs must authenticate each other through IAS
attestation process to verify their identities and synchronize the
issuing keys and revocation lists among all these IssueEs.