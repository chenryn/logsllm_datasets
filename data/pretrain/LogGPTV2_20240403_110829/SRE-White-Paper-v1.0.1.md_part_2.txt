决于组织的规模、业务需求和文化。以下是一些常见的 SRE 团队的
存在形式：
1. 中心化 SRE 团队： 一个专门的 SRE 团队负责支持整个组
织的可靠性工作。这种模式有助于集中专业知识，确保在整个组
织中实施一致的最佳实践。
2. 嵌入式 SRE 团队： SRE 团队成员被嵌入到各个产品或服
务团队中，与开发团队紧密合作。这种模式有助于更好地集成可
靠性工作到产品开发的全过程中。
3. 混合模式： 一些组织采取混合模式，既有中心化的 SRE
团队，又在一些关键项目中嵌入 SRE 角色。这种方式能够兼顾专
业化和贴近业务的优势。
每种存在形式都有其优势和适用场景，关键在于根据组织的需
求选择最合适的模式。不论哪种方式，SRE 的目标都是通过自动化
和工程方法提高系统的可靠性和效率。
下面是国内某几家一线互联网 SRE 团队在组织架构中的设置模
式。
⽹址：SRE-Elite.com 7 微信：SRE精英联盟
SRE实践白皮书（2023年）
⽹址：SRE-Elite.com 8 微信：SRE精英联盟
SRE实践白皮书（2023年）
参考以上各个公司 SRE 团队在组织架构中的位置，通常 SRE 团
队需要承担以下几类职责：监控、事故响应、事后回顾、测试与发
布、容量规划、工具开发和可用性改进等。
由于各个公司的业务形态的不同，SRE 团队在组织架构中也有
不同的定位和名称，包括：SRE 产品运维、互联网 SRE 组、AIoT
SRE 组、信息技术 SRE 组、业务 SRE 组等。
⽹址：SRE-Elite.com 9 微信：SRE精英联盟
SRE实践白皮书（2023年）
3 SRE 的流程
3.1 可靠性构架设计
可靠性架构设计是指在进行系统架构设计的过程中，根据系统
的可靠性需求，采用分布式设计、解耦设计、冗余设计等高可靠性
的架构设计方案，以提升系统的可靠性。
在进行可靠性架构设计的过程中，SRE 团队需要将应用架构设
计流程完全融入其中，并与研发团队共同参与架构设计和评审工
作。在系统设计阶段，应尽量消除可能出现的单点、容量等潜在风
险，并提前为可能出现的系统架构风险做好应急准备。
3.1.1 应用韧性架构
3.1.1.1 分布式设计
在系统中，存在被划分为职责明确、粒度合适且易于管理的组
件，这些组件（如计算资源、业务部分、数据等）都可以进行分布
式的部署和运行。组件之间相互独立、互不干扰，通过分布式设计
可以提高开发效率和可靠性。组件的拆分和分布可以通过复制、根
⽹址：SRE-Elite.com 10 微信：SRE精英联盟
SRE实践白皮书（2023年）
据功能进行垂直拆分、或根据用户与访问模式水平拆分等形式。
在设计时应该充分考虑到组件间可能存在的相互干扰以及如何
平衡不同组件之间的负载，并将系统所承受的压力进行均匀分配，
以减轻压力对系统整体性能的不良影响。
3.1.1.2 解耦设计
在架构设计过程中，可以将各种逻辑功能划分为不同的服务模
块，确保不同模块的故障对其他模块的影响是最小的，从而最大限
度地降低模块之间的耦合度。通过这种方式，可以将系统划分为多
个相互独立的功能模块来实现。尤其值得注意的是，业务的主要逻
辑与其他非核心模块是独立的，因此业务非核心模块的故障并不会
对业务的核心功能产生负面影响。
3.1.1.3 冗余设计
为了确保资源有足够的安全余量，每一个组件都需要有足够和
合理的冗余实例，以确保单一组件实例的失效不会对业务的正常运
行造成影响。对于不同类型的组件，我们需要明确地定义冗余量和
冗余类型。在实际应用中，由于设备故障或者操作不当等原因导致
服务器出现性能下降或崩溃现象时，系统会出现异常状态并产生大
量信息。应用程序可能部署多个机房，当这些机房中有数据冗余
时，一个位置的错误可以通过另一个位置的数据进行修正，确保整
个系统的连续性和可靠性。为了提高系统可靠性，通常采用读-写分
离的技术进行数据的冗余管理。读写分离是一种冗余的设计方式，
缓存和数据库之间存在数据冗余，当缓存服务宕机时，可以从数据
⽹址：SRE-Elite.com 11 微信：SRE精英联盟
SRE实践白皮书（2023年）
库回源到缓存。
3.1.1.4 熔断设计
熔断机制是应对雪崩效应的一种微服务链路保护机制，如果目
标服务的调用速度较慢或超时次数较多，则此时会熔断该服务的调
用。对于后续的调用请求，不再继续对目标服务进行调用，直接返
回预期设置好的结果，可以快速释放资源。一般来说，熔断需要设
置不同的恢复策略，如果目标服务条件改善，则恢复。
3.1.1.5 限流设计
限流是一种系统设计技术，用于控制访问应用程序或服务的流
量，防止资源过载。常见的限流策略包括固定窗口、滑动日志、漏
桶和令牌桶算法。这些方法可以帮助系统应对高流量，保持稳定性
和可靠性。在实施时，通常需要结合其他系统保护措施，如队列、
缓存、服务降级和熔断，以实现全面的流量控制和系统保护。
当流量被限制后，系统通常会采取以下几种反应之一：拒绝多
余的请求、将请求排队等待处理、返回错误码（如 HTTP 429 Too
Many Requests）、 或 者提 供 一个 降级 的 服务响 应。这 些措 施可以 缓 解
服务器压力。
3.1.1.6 降级设计
降级机制是当服务器压力剧增的情况下，根据当前业务情况及
流量对一些服务和页面有策略 地降级，以此缓解服务器资源的压
力，释放服务器资源以保证核心任务的正常运行。从降级配置方式
上，降级一般可以分为主动降级和自动降级。主动降级是提前配
⽹址：SRE-Elite.com 12 微信：SRE精英联盟
SRE实践白皮书（2023年）
置，自动降级则是系统发生故障时，如超时或者频繁失败，自动降
级。其中，自动降级可分为超时降级、失败次数降级、故障降级。
3.1.1.7 可观测设计
为了保证系统的透明性并迅速定位问题，采用可观测的设计方
法变得尤为关键。可观测设计涵盖了日志记录、实时监控、追踪以
及度量等多个方面，从而实现了系统状态和行为的可量化以及可分
析性。在可观测的设计中，日志应当详细地记录所有的关键事件，
监控系统需要能够实时捕获关键的性能指标，跟踪机制应具备跨服
务请求的追踪能力，度量指标则应全方位地反映系统的健康状态。
另外，健康检查机制需要自动地对系统组件状态进行评估，当出现
异常指标时，告警机制会立即告知相关的工作人员。通过这些措
施，我们可以清晰地观察到系统的运行状态，从而为后续的维 护和
优化工作奠定了稳固的基础。
3.1.2 基础设施保障
3.1.2.1 机房多活
系统所部署的机器或所在地需具备一定的冗余性。包括同机房
多活、同城多活和异地多活等不同级别。将要建设的机房要求具有
独立性，尤其是网络环境，机房之间通过专线来进行连接。
3.1.2.2 网络容灾
数据中心之间的互联网络是DC之间业务连接的重要载体，对存
储灾备网络的时延要求较低、带宽较大、可靠性较高；业务灾备网
络需要实现链路备份和快速的路由收敛。
⽹址：SRE-Elite.com 13 微信：SRE精英联盟
SRE实践白皮书（2023年）
3.1.3 数据灾备
3.1.3.1 数据备份
即对核心数据进行备份和恢复的能力。需对核心数据进行实时
备份，并具备快速容灾切换的能力。需对备份恢复的能力进行周期
性地验证。
3.1.3.2 数据回滚
在系统出现异常情况下，迅速有效地恢复故障前数据状态，减
少了故障给业务系统带来的冲击。回滚是否有效取决于回滚执行过
程和回滚决策是否及时。
3.2 研发保障
研发阶段的可靠性是指，以 SRE 理论驱动研发的可用性建设，
提升研发管线的工业化水平，保障版本能够按正常周期迭代，从而
实现高质量持续交付有效价值的目标；
为了实现满足版本迭代周期要求这个总体的可用性目标，将研
发阶段拆解为代码可靠性、代码仓库可靠性、构建可靠性和制品可
靠性四个方面，每个阶段分别对其可靠性进行定义并提出相应的改
善措施；
3.2.1 代码可靠性
代码是基于一定需求实现，用于构建对应软件的文件集合。代
码质量从基础上决定了软件的成败，是软件开发过程中不可忽视的
一环。在软件版本快速迭代的今天，如何构建高质量的代码更显得
至关重要。
⽹址：SRE-Elite.com 14 微信：SRE精英联盟
SRE实践白皮书（2023年）
代码可靠性的落地仅靠宣导或者文档还远远不够，需要建设完
善的检查工具并量化效果，一般由平台 SRE 建设相关的工具，因此
需要平台 SRE 需要深入了解影响代码可靠性的常见问题及提升措
施，不断完善代码检查工具的能力；
3.2.1.1 代码缺陷
代码缺陷是指影响代码稳定运行的问题，或者未达到设计时的
预期功能。缺陷产生的原因有多种，比如：软件的复杂性、编写的
错误、需求歧义等。代码缺陷的及时发现与修复，对项目进度与工
程质量至关重要。
代码缺陷检测，一般可采用静态分析法或动态分析法。
静态代码分析是指无需运行被测代码，通过词法分析、语法分
析、控制流、数据流分析等技术对程序代码进行扫描，找出代码隐
藏的错误和缺陷，如参数不匹配，有歧义的嵌套语句，错误的递
归，非法计算，可能出现的空指针引用等等。
动态分析方法则一般应用于软件的测试运行阶段，在软件程序
运行过程中，通过分析动态调试器中程序的状态、执行路径等信息
来发现缺陷。
1．代码缺陷规避措施
代码缺陷种类较多，无法完全罗列，这里选取部分最为常见的
缺陷并介绍对应的规避办法：
1）指针错误使用
指针的错误使用，一般要避免空指针、野指针，避免指针类型
⽹址：SRE-Elite.com 15 微信：SRE精英联盟
SRE实践白皮书（2023年）
不匹配，不返回局部变量的指针。
2）内存非法访问