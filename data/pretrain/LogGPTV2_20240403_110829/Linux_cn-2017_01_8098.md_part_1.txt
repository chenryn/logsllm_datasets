---
author: Linode
category: 系统运维
comments_data:
- date: '2017-01-08 04:31:17'
  message: y ouwdadhwa
  postip: 183.193.177.218
  username: 来自上海的 Firefox 45.0|GNU/Linux 用户
- date: '2017-01-13 16:29:20'
  message: 赞一个
  postip: 203.110.178.189
  username: 来自上海的 Chrome 45.0|Windows 10 用户
- date: '2019-01-11 10:21:12'
  message: 感谢，好文！
  postip: 58.48.166.70
  username: 来自湖北武汉的 Chrome 71.0|Windows 10 用户
- date: '2019-06-18 16:08:04'
  message: 教程非常好，感谢
  postip: 113.110.72.15
  username: 来自广东湛江的 Firefox 67.0|Windows 10 用户
- date: '2020-04-10 17:08:04'
  message: 好文章
  postip: 123.147.246.137
  username: aishangLinux [Chrome 80.0|Windows 10]
count:
  commentnum: 5
  favtimes: 13
  likes: 0
  sharetimes: 0
  viewnum: 42912
date: '2017-01-07 08:56:00'
editorchoice: false
excerpt: FirewallD 是 iptables 的前端控制器，用于实现持久的网络流量规则。它提供命令行和图形界面，在大多数 Linux 发行版的仓库中都有。
fromurl: https://www.linode.com/docs/security/firewalls/introduction-to-firewalld-on-centos
id: 8098
islctt: true
largepic: /data/attachment/album/201701/06/211008tqx6x9jqqm2m4q4q.jpg
permalink: /article-8098-1.html
pic: /data/attachment/album/201701/06/211008tqx6x9jqqm2m4q4q.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 8076
- displayorder: 1
  raid: 8087
reviewer: ''
selector: ''
summary: FirewallD 是 iptables 的前端控制器，用于实现持久的网络流量规则。它提供命令行和图形界面，在大多数 Linux 发行版的仓库中都有。
tags:
- 安全
- 防火墙
- UFW
- FirewallD
thumb: false
title: CentOS 上的 FirewallD 简明指南
titlepic: true
translator: geekpi
updated: '2017-01-07 08:56:00'
---
![](/data/attachment/album/201701/06/211008tqx6x9jqqm2m4q4q.jpg)
[FirewallD](http://www.firewalld.org/) 是 iptables 的前端控制器，用于实现持久的网络流量规则。它提供命令行和图形界面，在大多数 Linux 发行版的仓库中都有。与直接控制 iptables 相比，使用 FirewallD 有两个主要区别：
1. FirewallD 使用区域和服务而不是链式规则。
2. 它动态管理规则集，允许更新规则而不破坏现有会话和连接。
> 
> FirewallD 是 iptables 的一个封装，可以让你更容易地管理 iptables 规则 - 它并*不是* iptables 的替代品。虽然 iptables 命令仍可用于 FirewallD，但建议使用 FirewallD 时仅使用 FirewallD 命令。
> 
> 
> 
本指南将向您介绍 FirewallD 的区域和服务的概念，以及一些基本的配置步骤。
### 安装与管理 FirewallD
CentOS 7 和 Fedora 20+ 已经包含了 FirewallD，但是默认没有激活。可以像其它的 systemd 单元那样控制它。
1、 启动服务，并在系统引导时启动该服务：
```
sudo systemctl start firewalld
sudo systemctl enable firewalld
```
要停止并禁用：
```
sudo systemctl stop firewalld
sudo systemctl disable firewalld
```
2、 检查防火墙状态。输出应该是 `running` 或者 `not running`。
```
sudo firewall-cmd --state
```
3、 要查看 FirewallD 守护进程的状态：
```
sudo systemctl status firewalld
```
示例输出
```
firewalld.service - firewalld - dynamic firewall daemon
   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled)
   Active: active (running) since Wed 2015-09-02 18:03:22 UTC; 1min 12s ago
 Main PID: 11954 (firewalld)
   CGroup: /system.slice/firewalld.service
   └─11954 /usr/bin/python -Es /usr/sbin/firewalld --nofork --nopid
```
4、 重新加载 FirewallD 配置：
```
sudo firewall-cmd --reload
```
### 配置 FirewallD
FirewallD 使用 XML 进行配置。除非是非常特殊的配置，你不必处理它们，而应该使用 `firewall-cmd`。
配置文件位于两个目录中：
* `/usr/lib/FirewallD` 下保存默认配置，如默认区域和公用服务。 避免修改它们，因为每次 firewall 软件包更新时都会覆盖这些文件。
* `/etc/firewalld` 下保存系统配置文件。 这些文件将覆盖默认配置。
#### 配置集
FirewallD 使用两个*配置集*：“运行时”和“持久”。 在系统重新启动或重新启动 FirewallD 时，不会保留运行时的配置更改，而对持久配置集的更改不会应用于正在运行的系统。
默认情况下，`firewall-cmd` 命令适用于运行时配置，但使用 `--permanent` 标志将保存到持久配置中。要添加和激活持久性规则，你可以使用两种方法之一。
1、 将规则同时添加到持久规则集和运行时规则集中。 
```
sudo firewall-cmd --zone=public --add-service=http --permanent
sudo firewall-cmd --zone=public --add-service=http
```
2、 将规则添加到持久规则集中并重新加载 FirewallD。 
```
sudo firewall-cmd --zone=public --add-service=http --permanent
sudo firewall-cmd --reload
```
> 
> `reload` 命令会删除所有运行时配置并应用永久配置。因为 firewalld 动态管理规则集，所以它不会破坏现有的连接和会话。
> 
> 
> 
### 防火墙的区域
“区域”是针对给定位置或场景（例如家庭、公共、受信任等）可能具有的各种信任级别的预构建规则集。不同的区域允许不同的网络服务和入站流量类型，而拒绝其他任何流量。 首次启用 FirewallD 后，`public` 将是默认区域。
区域也可以用于不同的网络接口。例如，要分离内部网络和互联网的接口，你可以在 `internal` 区域上允许 DHCP，但在`external` 区域仅允许 HTTP 和 SSH。未明确设置为特定区域的任何接口将添加到默认区域。
要找到默认区域： 
```
sudo firewall-cmd --get-default-zone
```
要修改默认区域：
```
sudo firewall-cmd --set-default-zone=internal
```
要查看你网络接口使用的区域：
```
sudo firewall-cmd --get-active-zones
```
示例输出：
```
public
  interfaces: eth0
```
要得到特定区域的所有配置：
```
sudo firewall-cmd --zone=public --list-all
```
示例输出：
```
public (default, active)
  interfaces: ens160
  sources:
  services: dhcpv6-client http ssh
  ports: 12345/tcp
  masquerade: no
  forward-ports:
  icmp-blocks:
  rich rules:
```
要得到所有区域的配置： 