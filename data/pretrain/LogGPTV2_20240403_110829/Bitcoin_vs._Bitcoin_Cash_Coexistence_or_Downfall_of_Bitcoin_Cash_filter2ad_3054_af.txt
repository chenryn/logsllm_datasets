and
of ABC to that for BTC. Figure 10 depicts the data history of
BSV like Figure 9. These ﬁgures show that the state (rF , rB)
in the two games was above the state (0, k
1+k ) during the hash
war period.
Moreover,
to determine the movement of the state for
the hash war period, we investigate the history of ABC
computational power distribution among miners from Nov.
1, 2018 to Dec. 20, 2018 and that for BSV from Nov. 15,
2018 to Dec. 20, 2018. This is because it would be hard
to determine the movement of the state through just
the
Figure 13. This ﬁgure describes the movement of state for hash war period
and the movement of state before and after war.
mining power history (i.e., Figure 9 and 10) because cstick
signiﬁcantly changed during this period. Figure 11 and 12
represent the changes in the mining power distribution of
ABC and BSV over time, respectively. To do this, we crawled
coinbase transactions and analyzed the number of blocks
mined by each miner among previous 100 blocks. In these
ﬁgures, each miner corresponds to one color, and the length
of one colored bar represents the number of blocks generated
by the corresponding miner among 100 blocks. Therefore, the
number of colors in the entire bar indicates the number of
active miners at the corresponding time. Note that only names
of ten miners are presented in Figure 11.
First, we consider the game between BTC and ABC. One
can see that the state (rF , rB) jumps to a point above ( k
k+1 , 0)
for the hash war preparation period (from Nov. 13, 2018
to Nov.15, 2018) through Figure 9. Such an increase in the
ABC mining power may be explained because the mining
power of BSV factions such as CoinGeek, svpool, BMG pool,
and Mempool increased from the hash war preparation [39]
as shown in Figure 11. In other words, the increase in the
ABC mining power for the hash war preparation is because
cstick increased. On the other hand, Figure 11 shows that
some miners left the ABC system during the war preparation
(the colors that appeared at the top of the ﬁgure before the
war preparation period disappeared from the war preparation
period). This fact indicates that the state moves toward the
line rB = cstick in the case that cstick is large. Note that the
reason why the ABC mining power decreases at the end of the
hash war preparation period (i.e., the start of the hash war) is
that BSV factions move to the BSV system.
Next, for the hash war period, the ABC mining power
increased because the ABC factions such as Bitcoin.com
increased their mining power (i.e., cstick increased) [35].
However, there were only a few loyal ABC miners during this
period. For example, at the start of the hash war, only ﬁve
miners exist: Bitcoin.com, BTC.com, AntPool, ViaBTC, and
BTC.TOP. Note that all of them are the ABC factions (ViaBTC
and BTC.TOP announced that they support ABC [40], [41]).
As a result, we can see that this state is close to the state
rB = cstick, which represents a lack of BCH loyal miners.
This state makes the ABC system severely centralized. In
(cid:26)(cid:21)(cid:24)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:45:16 UTC from IEEE Xplore.  Restrictions apply. 
particular, one miner (Bitcoin.com) possessed about 60 % of
the total computational power in some cases, which indicates
the breakage of censorship resistance. Meanwhile, after the
k
hash war (i.e., when cstick is less than
k+1), one can see
that more other miners gradually enter the ABC system (see
the increase in the number of colors after the hash war in
Figure 11). In addition, Figure 9 shows that the state is close
k
k+1 after the hash war. As a result, the state moves as
to
shown in Figure 13.
Second, we describe the game between BTC and BSV
through Figure 10 and 12. As shown in Figure 10, the state
is above (0, k
k+1 ) for the hash war period because cstick is
signiﬁcantly high. This fact is also presented in Figure 12.
Note that CoinGeek, svpool, BMG, and Mempool are BSV
factions. Therefore, the state was close to rB = cstick at the
time. Similar to ABC, BSV also suffered from the severe
centralization due to a lack of loyal miners. However, the
other miners have entered the BSV system after the hash war,
and the state became close to (0, k
k+1 ). Therefore, Figure 13
represents the state movement, and this result empirically
conﬁrms our theoretical analysis.
Here, note that when the state is located above
k
k+1 , Ωstick
suffers a loss. This fact makes the state cstick > k
k+1 would
not last for a long time. Therefore, the hash war was also not
able to continue for a long time, and the hash war ended with
BSV’s surrender [42].
VIII. BROADER IMPLICATIONS
In this section, we describe broader implications of our
game model. More precisely, we ﬁrst describe the risk of
automatic mining, and then explain how one coin can exploit
this risk to intentionally steal the loyal miners from other less
valued coins with negligible efforts and resources.
A. A potential risk of automatic mining
As described above, the current state of Bitcoin is close
to coexistence between BTC and BCH because faster BCH
mining difﬁculty adjustment makes manual ﬁckle mining
inconvenient. We introduce another possible mining scheme
called automatic mining, which can be less affected by faster
mining difﬁculty adjustment. Automatic mining is designed for
miners to automatically switch the coin to mine to the likely
most proﬁtable one of the compatible coins by analyzing their
mining difﬁculty and coin prices in real time unlike ﬁckle min-
ing. Here, note that all automatic miners almost simultaneously
change their coin when not only mining difﬁculty but also coin
prices changes. Indeed, automatic mining can be considered
to be automatically choosing the most proﬁtable one among
three strategies, F, A, and B in real time. Automatic mining
has been executed in the Bitcoin system [43] and has already
become popular in the altcoin system [44]. Indeed, mining
power increases and decreases by more than a factor of four
in most altcoins several times a day [45]. We describe a simple
implementation of automatic mining below.
Currently, many mining pools,
including BTC.com,
Antpool, and ViaBTC, support interactive user interfaces for
Figure 14. One-button switching mining in Antpool
switching the coin to mine by just clicking one button.
Figure 14 represents the one-button switching mining feature
provided by Antpool. This feature makes automatic mining
easier without technical difﬁculties in implementing this ap-
proach. For example, a miner can conduct automatic mining
in Antpool as follows.
1) First, the miner saves an HTTP header with its cookies
to maintain the login session.
2) To determine which coin is more proﬁtable, the miner
calculates the mining proﬁtability of BTC and BCH. In
real-world settings, this can be simply implemented by
using real-time coin prices [46], [47] and the coin mining
difﬁculty.
3) If BTC mining is more proﬁtable than BCH mining, the
miner sends an HTTP request, which includes the saved
HTTP header and data for switching to BTC mining.
Otherwise, the miner sends an HTTP request to conduct
BCH mining.
4) The above steps are repeated.
As shown in the code [48], this automatic mining can be
executed within about 50 lines in Python.
Large-scale automatic mining makes the state of the coin
system enter Zone3. As a simple example, we can consider
an extreme case wherein the entire computational power is
involved in automatic mining. In this case, any initial state
except for (0, k
k+1 ) immediately reaches the equilibrium rB =
cstick as soon as all miners start automatic mining. This is
because all automatic miners should simultaneously choose
the same coin and would eventually mine coinA when the
mining difﬁculty of coinB increases.
Then, we have the following question: What ratio of auto-
matic mining power is needed to reach the lack of coinB-loyal
miners? As shown in Figure 4, the state (rF , rB) cannot be
in Zone2 when rF is not less than k. Therefore, (rF , rB)
where rF ≥ k would move in the decreasing direction of rB.
Further, even manual miners who do not conduct automatic
mining would prefer coinA rather than coinB at states in Zone3
where rF ≥ k because coinA-only mining is more proﬁtable
than coinB-only mining at the states; loyal miners of coinB
should generate blocks with high difﬁculty. Therefore, when
a fraction k of the total mining power is involved in the
automatic ﬁckle mining, the state moves towards a lack of
coinB-loyal miners. As of Dec. 2018, because k in the Bitcoin
(cid:26)(cid:21)(cid:25)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:45:16 UTC from IEEE Xplore.  Restrictions apply. 
system is about 0.05, if 5% of the total mining power in the
Bitcoin system is involved in automatic mining, the automatic
miners would conduct (automatic) ﬁckle mining and the state
would enters Zone3. Note that if automatic miners of which
the total mining power is 5% conduct coinA-only (or coinB-
only) mining, the state would enter Zone2 (or Zone1). This
is contradiction because the automatic miners should choose
the most proﬁtable strategy. As a result, when only 5% of the
total mining power is involved in the automatic mining, the
number of BCH loyal miners decreases and the BCH system
is ﬁnally becoming more centralized.
B. Injuring rivalry coins
In Section VI, we explained how our game G(c, cstick) can
be applied to the Bitcoin system regardless of the BCH mining
difﬁculty adjustment algorithm. To generalize our game model,
we here consider two types of possible mining difﬁculty
adjustment algorithms: The ﬁrst type of algorithm is to adjust
the mining difﬁculty in a long time period (e.g., two weeks)
while the second type of algorithm is to adjust the mining
difﬁculty every block or in a short time period in order to
promptly respond to the changes in the mining power. In the
real-world, both types of these mining difﬁculty adjustment
algorithms are mostly used. For example, BTC and Litecoin
are the cryptocurrency systems using the ﬁrst type, while
many altcoins including BCH, Ethereum (ETH), and Ethereum
Classic (ETC) are currently using the second type.
We can generalize our game model to any coin system
satisfying the following conditions.
1) Two existing coins share the same mining hardware.
2) The more valued coin coinA between those coins has the
ﬁrst type of mining difﬁculty adjustment algorithm.
We note that there is no restriction on the mining difﬁculty
adjustment algorithm for the less valued coinB in our game
model G∞. When coinB has the ﬁrst type of mining difﬁculty
adjustment algorithm, our model can be applied according to
Section IV. Note that we modeled our game in Section IV,
assuming that coinB has the ﬁrst type of mining difﬁculty
adjustment algorithm. In addition, in Section VI, we described
why our game can be applied to when coinB has the second
type of mining difﬁculty adjustment algorithm. Therefore,
regardless of coinB mining difﬁculty adjustment algorithm,
in the coin system satisfying the above two conditions, the
coinB-loyal miners would leave if at least k fraction of the
total mining power is involved in automatic mining.
Next, we explain how the more valued coin can steal
loyal miners from the other less valued rivalry coin. If coinA
utilizes the ﬁrst type of mining difﬁculty adjustment algorithm,
the number of coinB-loyal miners would naturally decrease
due to the automatic mining. Again note that this situation
periodically weakens the health of the coinB system in terms
of security and decentralization. On one hand, if coinA has
a mining difﬁculty adjustment algorithm different from the
ﬁrst type (i.e., different from that in Assumption 3), our game
model may not be applied. For example, when considering
the Ethereum system consisting of ETH and ETC, ETH
corresponding to coinA has a different difﬁculty adjustment
algorithm from that which we assumed in our game. In this
case, even if rB = 0, the complete downfall of coinB (e.g.,
ETC) may not occur and the mining power of coinA and coinB
would ﬂuctuate heavily. Therefore, to follow our game and
so steal the loyal miners from coinB, coinA should change its
mining difﬁculty adjustment algorithm through a hard fork. We
can see that some cryptocurrency systems (e.g., BCH, ETH,
and ETC) have often performed hard forks to change their
mining difﬁculty adjustment algorithms [49], [50], [51]. This
indicates that cryptocurrency systems can practically update
their mining difﬁculty adjustment algorithms if needed.
In conclusion, if the mining difﬁculty adjustment algorithm
for coinA is changed to the ﬁrst type of mining difﬁculty
adjustment algorithms, a lack of loyal miners for coinB might
be reached due to automatic mining.
IX. DISCUSSION
In this section, we ﬁrst discuss how coinB can maintain
its loyal miners and consider environmental factors that may
affect our game analysis results.
A. Maintenance of coinB-loyal miners
As described in Section VIII-B, coinB cannot prevent the
rivalry coin from stealing loyal miners by changing its difﬁ-
culty adjustment algorithm alone. Surely, the most straight-
forward way to avoid the risk is to not use the mining
hardware compatible with coinA. That is, a proprietary mining
algorithm, requiring customized mining hardware which is
not compatible with coinA, should be introduced for coinB.
However, this solution is not applicable in practice for small
and medium-sized mining operators because it is expensive to
develop customized mining hardware (e.g., ASICs). In fact,
because many altcoins use a mining algorithm that can be
implemented in CPU or GPU, automatic mining endangers
their mining power, weakening their security.
The second way is to use auxiliary proof-of-work (or
merged mining), which makes a miner conduct mining more
than two coins at the same time [52]. Therefore, our ﬁrst
assumption in Section IV is not satisﬁed by merged mining,
and our game results would not be applied. This is also
regarded as a potential solution to 51% attacks because it
signiﬁcantly increases mining power of altcoins [53]. However,
despite of such deﬁnite advantages, most projects do not adopt