### Spawned Backends and Connection Pooling

PostgreSQL does not have built-in functionality for managing spawned backends, so third-party solutions are necessary. These solutions can be either pooling managers integrated into the application server or external tools like PgBouncer or Odyssey. This approach typically means that each server backend can handle transactions from different clients sequentially. This imposes some restrictions on application development, as it is only allowed to use resources that are local to a transaction, not to the entire session.

### Client-Server Communication

For a client and server to communicate effectively, they must use the same interfacing protocol. This protocol is usually based on the standard `libpq` library, although there are other custom implementations available. In general terms, the protocol allows clients to connect to the server and execute queries.

A connection is always established to a specific database on behalf of a specific role or user. Although the server supports a database cluster, a separate connection must be established for each database you wish to use in your application. At this point, authentication is performed: the backend process verifies the user's identity (e.g., by asking for a password) and checks whether the user has the right to connect to the server and the specified database.

Queries are passed to the backend process as text strings. The process parses the text, optimizes the query, executes it, and returns the result to the client.

### Isolation and MVCC

#### 2.1. Consistency

The key feature of relational databases is their ability to ensure data consistency, which means data correctness. At the database level, it is possible to create integrity constraints such as primary keys or foreign keys. The database system ensures that these constraints are never broken, thus maintaining data integrity.

If all required constraints could be formulated at the database level, consistency would be guaranteed. However, some conditions are too complex, such as those involving multiple tables. Even if a constraint can be defined in the database but is not, it does not mean that the constraint can be violated.

Data consistency is stricter than integrity, but the database system has no idea what "consistency" actually means. If an application breaks consistency without breaking integrity, the database system cannot detect it. Therefore, the application must define the criteria for data consistency, and we must trust that it is written correctly and will not have any errors.

#### 2.2. Isolation Levels and Anomalies Defined by the SQL Standard

The SQL standard specifies four isolation levels, which are defined by the list of anomalies that may or may not occur during concurrent transaction execution. These levels are:

- **Read Uncommitted**: Allows dirty reads.
- **Read Committed**: Prevents dirty reads but allows non-repeatable reads.
- **Repeatable Read**: Prevents dirty and non-repeatable reads but allows phantom reads.
- **Serializable**: Prevents all anomalies.

##### Lost Update
A lost update anomaly occurs when two transactions read the same table row, one updates it, and the other updates it without considering the first transaction's changes. For example, two transactions might try to increase the balance of the same account, leading to the second transaction overwriting the first transaction's update.

##### Dirty Reads
A dirty read anomaly occurs when a transaction reads uncommitted changes made by another transaction. For instance, a transaction might transfer money to an empty account but not commit the change, while another transaction reads the updated but uncommitted state and allows the customer to withdraw the money.

##### Non-Repeatable Reads
A non-repeatable read anomaly occurs when a transaction reads the same row twice, and another transaction updates (or deletes) the row between the reads and commits the change. For example, a transaction might check an account balance, decide to reduce it, but another transaction withdraws all the money, causing an overdraft.

##### Phantom Reads
A phantom read anomaly occurs when a transaction executes two identical queries returning a set of rows that satisfy a particular condition, and another transaction adds new rows satisfying the condition and commits the changes. For example, a transaction might check how many accounts a customer has, decide to open a new account, but another transaction also opens a new account, leading to more than the allowed number of accounts.

### Isolation Levels in PostgreSQL

Over time, lock-based protocols for transaction management have been replaced with the Snapshot Isolation (SI) protocol. The idea behind SI is that each transaction accesses a consistent snapshot of data as it appeared at a particular point in time. Snapshot isolation minimizes the number of required locks, and operations can be executed concurrently.

PostgreSQL uses a multiversion flavor of the SI protocol, known as Multiversion Concurrency Control (MVCC). This implies that at any moment, the database system can contain several versions of the same row, allowing PostgreSQL to include an appropriate version in the snapshot rather than aborting transactions that attempt to read stale data.

Based on snapshots, PostgreSQL's isolation differs from the requirements specified in the standardâ€”it is even stricter. Dirty reads are forbidden by design. Technically, you can specify the `Read Uncommitted` level, but its behavior will be the same as `Read Committed`.

#### Read Committed
- No dirty reads.
- Non-repeatable reads and phantom reads are allowed.

#### Repeatable Read
- No dirty, non-repeatable, or phantom reads.
- Other anomalies are still possible.

#### Serializable
- Prevents all anomalies.

### Example: Isolation Levels in Practice

To illustrate these concepts, let's create an `accounts` table and insert some data:

```sql
CREATE TABLE accounts (
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    client text,
    amount numeric
);

INSERT INTO accounts VALUES
(1, 'alice', 1000.00), (2, 'bob', 100.00), (3, 'bob', 900.00);
```

#### Read Committed
No dirty reads. To check, start a transaction with the default `Read Committed` isolation level:

```sql
BEGIN;
SHOW transaction_isolation;
-- Output: read committed

-- Default isolation level
SHOW default_transaction_isolation;
-- Output: read committed
```

The opened transaction withdraws some funds from the customer's account but does not commit the change. Another transaction should not see the uncommitted changes.