spawned backends. Postgre has no such built-in functionality,so we have to
rely on third-party solutions: pooling managers integrated into the application
serverorexternaltools(suchasPgBouncer1 orOdyssey2). Thisapproachusually
meansthateachserverbackendcanexecutetransactionsofdifferentclients,one
after another. It imposes some restrictions on application development since it
is only allowed to use resources that are local to a transaction,not to the whole
session.
Tounderstandeachother,aclientandaservermustuseoneandthesameinter-
facingprotocol.3 Itisusuallybasedonthestandardlibpqlibrary,buttherearealso
othercustomimplementations.
Speakinginthemostgeneralterms,theprotocolallowsclientstoconnecttothe
serverandexecutequeries.
Aconnectionisalwaysestablishedtoaparticulardatabaseonbehalfofaparticu-
larrole,oruser. Althoughtheserversupportsadatabasecluster,itisrequiredto
establishaseparateconnectiontoeachdatabasethatyouwouldliketouseinyour
1 pgbouncer.org
2 github.com/yandex/odyssey
3 postgresql.org/docs/14/protocol.html
32
1.3. ClientsandtheClient-ServerProtocol
application.Atthispoint,authenticationisperformed:thebackendprocessverifies
theuser’sidentity(forexample,byaskingforthepassword)andcheckswhether
thisuserhastherighttoconnecttotheserverandtothespecifieddatabase.
Squeriesarepassedtothebackendprocessastextstrings. Theprocessparses
thetext,optimizesthequery,executesit,andreturnstheresulttotheclient.
33
Part I
Isolation
and MVCC
2
Isolation
2.1. Consistency
The key feature of relational databases is their ability to ensure data consistency,
thatis,datacorrectness.
It is a known fact that at the database level it is possible to create integrity con-
straints,suchasor. Thedatabasesystemensuresthatthesecon-
straintsareneverbroken,sodataintegrityisnevercompromised.
If all the required constraints could be formulated at the database level, consis-
tency would be guaranteed. But some conditions are too complex for that, for
example,theytouchuponseveraltablesatonce. Andevenifaconstraintcanbe
definedin the database,butforsome reason it is not,it does notmean that this
constraintmaybeviolated.
Thus,data consistency is stricter than integrity,but the database system has no
ideawhat“consistency”actuallymeans. Ifanapplicationbreaksitwithoutbreak-
ingtheintegrity,thereisnowayforthedatabasesystemtofindout.Consequently,
it is the application that must lay down the criteria for data consistency,and we
havetobelievethatitiswrittencorrectlyandwillneverhaveanyerrors.
Butiftheapplicationalwaysexecutesonlycorrectsequencesofoperators,where
doesthedatabasesystemcomeintoplay?
Firstofall,acorrectsequenceofoperatorscantemporarilybreakdataconsistency,
and—strangeasitmayseem—itisperfectlynormal.
Ahackneyedbutclearexampleisatransferoffundsfromoneaccounttoanother.A
consistencyrulemaysoundasfollows: amoneytransfermustneverchangethetotal
37
Chapter2. Isolation
balanceoftheaffectedaccounts.Itisquitedifficult(althoughpossible)toformulate
thisruleasanintegrityconstraintin,solet’sassumethatitisdefinedatthe
applicationlevelandremainsopaquetothedatabasesystem.Atransferconsistsof
twooperations:thefirstonedrawssomemoneyfromoneoftheaccounts,whereas
thesecondoneaddsthissumtoanotheraccount. Thefirstoperationbreaksdata
consistency,whereasthesecondonerestoresit.
Ifthefirstoperationsucceeds,butthesecondonedoesnot(becauseofsomefail-
ure),dataconsistencywillbebroken.Suchsituationsareunacceptable,butittakes
agreatdealofefforttodetectandaddressthemattheapplicationlevel. Luckily
itisnotrequired—theproblemcanbecompletelysolvedbythedatabasesystem
itselfifitknowsthatthesetwooperationsconstituteanindivisiblewhole,thatis,
atransaction.
Butthereisalsoamoresubtleaspecthere. Beingabsolutelycorrectontheirown,
transactionscanstartoperatingincorrectlywhenruninparallel. That’sbecause
operationsbelongingtodifferenttransactionsoftengetintermixed. Therewould
benosuchissuesifthedatabasesystemfirstcompletedalloperationsofonetrans-
actionandthenmovedontothenextone,butperformanceofsequentialexecution
wouldbeimplausiblylow.
Atrulysimultaneousexecutionoftransactionscanonlybeachievedonsystemswithsuit-
able hardware: a multi-core processor,a diskarray,and so on. But the same reasoning
isalsotrueforaserverthatexecutescommandssequentiallyinthetime-sharingmode.
Forgeneralizationpurposes,boththesesituationsaresometimesreferredtoasconcurrent
execution.
Correct transactions that behave incorrectly when run together result in concur-
rencyanomalies,orphenomena.
Hereis asimple example. Toget consistentdata fromthe database,the applica-
tion must not see any changes made by other uncommitted transactions, at the
veryminimum. Otherwise(ifsometransactionsarerolledback),itwouldseethe
databasestatethathasneverexisted.Suchananomalyiscalledadirtyread. There
arealsomanyotheranomalies,whicharemorecomplex.
When running transactions concurrently, the database must guarantee that the
resultofsuchexecutionwillbethesameastheoutcomeofoneofthepossiblese-
38
2.2. IsolationLevelsandAnomaliesDefinedbytheSQLStandard
quentialexecutions.Inotherwords,itmustisolatetransactionsfromoneanother,
thustakingcareofanypossibleanomalies.
Tosumitup,atransactionisasetofoperationsthattakesthedatabasefromone
correctstatetoanothercorrectstate(consistency),providedthatitisexecutedin
full (atomicity) and without being affected by other transactions (isolation). This
definitioncombinestherequirementsimpliedbythefirstthreelettersofthe
acronym.Theyaresointertwinedthatitmakessensetodiscussthemtogether.In
fact,thedurabilityrequirementishardlypossibletosplitoffeither: afteracrash, p.
the system may still contain some changes made by uncommitted transactions,
andyouhavetodosomethingaboutittorestoredataconsistency.
Thus,thedatabasesystemhelpstheapplicationmaintaindataconsistencybytak-
ingtransactionboundariesintoaccount,eventhoughithasnoideaabouttheim-
pliedconsistencyrules.
Unfortunately, full isolation is hard to implement and can negatively affect per-
formance. Mostreal-lifesystemsuseweakerisolationlevels,whichpreventsome
anomalies,butnotallofthem. Itmeansthatthejobofmaintainingdataconsis-
tencypartiallyfallsontheapplication.Andthat’sexactlywhyitisveryimportant
to understand which isolation level is used in the system,what is guaranteed at
thislevelandwhatisnot,andhowtoensurethatyourcodewillbecorrectinsuch
conditions.
2.2. Isolation Levels and Anomalies Defined by the SQL
Standard
Thestandardspecifiesfourisolationlevels.1 Theselevelsaredefinedbythelist
ofanomaliesthatmayormaynotoccurduringconcurrenttransactionexecution.
Sowhentalkingaboutisolationlevels,wehavetostartwithanomalies.
Weshouldbearinmindthatthestandardisatheoreticalconstruct: itaffectsthe
practice,but the practice still diverges from it in lots of ways. That’s why all ex-
1 postgresql.org/docs/14/transaction-iso.html
39
Chapter2. Isolation
ampleshereareratherhypothetical. Dealingwithtransactionsonbankaccounts,
theseexamplesarequiteself-explanatory,butIhavetoadmitthattheyhavenoth-
ingtodowithrealbankingoperations.
Itisinterestingthattheactualdatabasetheoryalsodivergesfromthestandard: it
wasdevelopedafterthestandardhadbeenadopted,andthepracticewasalready
wellahead.
Lost Update
Thelostupdateanomalyoccurswhentwotransactionsreadoneandthesametable
row,thenoneofthetransactionsupdatesthisrow,andfinallytheothertransaction
updatesthesamerowwithouttakingintoaccountanychangesmadebythefirst
transaction.
Suppose that two transactions are going to increase the balance of one and the
sameaccountby$.Thefirsttransactionreadsthecurrentvalue($,),then
the second transaction reads the same value. The first transaction increases the
balance(makingit$,)andwritesthenewvalueintothedatabase.Thesecond
transactiondoesthesame: itgets$,afterincreasingthebalanceandwrites
thisvalue.Asaresult,thecustomerloses$.
Lostupdatesareforbiddenbythestandardatallisolationlevels.
DirtyReads and Read Uncommitted
The dirty read anomaly occurs when a transaction reads uncommitted changes
madebyanothertransaction.
Forexample,thefirsttransactiontransfers$toanemptyaccountbutdoesnot
committhischange.Anothertransactionreadstheaccountstate(whichhasbeen
updated but not committed) and allows the customer to withdraw the money—
eventhoughthefirsttransactiongetsinterruptedanditschangesarerolledback,
sotheaccountisempty.
ThestandardallowsdirtyreadsattheReadUncommittedlevel.
40
2.2. IsolationLevelsandAnomaliesDefinedbytheSQLStandard
Non-Repeatable Reads and Read Committed
The non-repeatable read anomaly occurs when a transaction reads one and the
samerowtwice,whereasanothertransactionupdates(ordeletes)thisrowbetween
thesereadsandcommitsthechange.Asaresult,thefirsttransactiongetsdifferent
results.
Forexample,supposethereisaconsistencyrulethatforbidshavinganegativebal-
anceinbankaccounts.Thefirsttransactionisgoingtoreducetheaccountbalance
by$. Itchecksthecurrentvalue,gets$,,anddecidesthatthisoperation
ispossible. Atthesametime,anothertransactionwithdrawsallthemoneyfrom
this account and commits the changes. If the first transaction checked the bal-
anceagainatthispoint,itwouldget$(butthedecisiontowithdrawthemoney
isalreadytaken,andthisoperationcausesanoverdraft).
Thestandardallowsnon-repeatablereadsattheReadUncommittedandReadCom-
mittedlevels.
Phantom Reads and Repeatable Read
Thephantomreadanomalyoccurswhenoneandthesametransactionexecutestwo
identicalqueriesreturningasetofrowsthatsatisfyaparticularcondition,while
anothertransactionaddssomeotherrowssatisfyingthisconditionandcommits
thechangesinthetimeintervalbetweenthesequeries.Asaresult,thefirsttrans-
actiongetstwodifferentsetsofrows.
For example, suppose there is a consistency rule that forbids a customer to have
more than three accounts. The first transaction is going to open a new account,
soitcheckshowmanyaccountsarecurrentlyavailable(let’ssaytherearetwoof
them)anddecidesthatthisoperationispossible.Atthisverymoment,thesecond
transactionalsoopensanewaccountforthisclientandcommitsthechanges. If
the first transaction double-checked the number of open accounts, it would get
three (but it is already opening another account, and the client ends up having
fourofthem).
ThestandardallowsphantomreadsattheReadUncommitted,ReadCommitted,and
RepeatableReadisolationlevels.
41
Chapter2. Isolation
NoAnomalies and Serializable
ThestandardalsodefinestheSerializablelevel,whichdoesnotallowanyanoma-
lies. Itisnotthesameasthebanonlostupdatesanddirty,non-repeatable,and
phantomreads. Infact,thereisamuchhighernumberofknownanomaliesthan
thestandardspecifies,andanunknownnumberofstillunknownones.
TheSerializablelevelmustpreventany anomalies. Itmeansthattheapplication
developer does not have to take isolation into account. If transactions execute
correctoperatorsequenceswhenrunontheirown,concurrentexecutioncannot
breakdataconsistencyeither.
Toillustratethisidea,Iwilluseawell-knowntableprovidedinthestandard;the
lastcolumnisaddedhereforclarity:
lost dirty non-repeatable phantom other
update read read read anomalies
ReadUncommitted — yes yes yes yes
ReadCommitted — — yes yes yes
RepeatableRead — — — yes yes
Serializable — — — — —
WhyTheseAnomalies?
Ofallthepossibleanomalies,whydoesthestandardmentionsonlysome,andwhy
exactlytheseones?
Nooneseemstoknowitforsure. Butitisnotunlikelythatotheranomalieswere
simply not considered when the first versions of the standard were adopted, as
theorywasfarbehindpracticeatthattime.
Besides,itwasassumedthatisolationhadtobebasedonlocks. Thewidelyused
two-phaselockingprotocol()requirestransactionstolocktheaffectedrowsdur-
ingexecutionandreleasethelocksuponcompletion.Insimplisticterms,themore
locksatransactionacquires,thebetteritisisolatedfromothertransactions. And
consequently,theworseisthesystemperformance,astransactionsstartqueuing
togetaccesstothesamerowsinsteadofrunningconcurrently.
42
2.3. IsolationLevelsinPostgreSQL
Ibelievethattoagreatextentthedifferencebetweenthestandardisolationlevels
isdefinedbythenumberoflocksrequiredfortheirimplementation.
Iftherowstobeupdatedarelockedforwritesbutnotforreads,wegettheRead
Uncommittedisolationlevel,whichallowsreadingdatabeforeitiscommitted.
If the rows to be updated are locked for both reads and writes, we get the Read
Committedlevel: itisforbiddentoreaduncommitteddata,butaquerycanreturn
differentvaluesifitisrunmorethanonce(non-repeatablereads).
Lockingtherowstobe readand tobeupdated forall operationsgivesusthe Re-
peatableReadlevel: arepeatedquerywillreturnthesameresult.
However,theSerializablelevelposesaproblem: itisimpossibletolockarowthat
doesnotexistyet. Itleavesanopportunityforphantomreadstooccur: atransac-
tioncanaddarowthatsatisfiestheconditionofthepreviousquery,andthisrow
willappearinthenextqueryresult.
Thus,regularlockscannotprovidefullisolation: toachieveit,wehavetolockcon-
ditions(predicates)ratherthanrows.Suchpredicatelockswereintroducedasearly
aswhenSystemRwasbeingdeveloped;however,theirpracticalapplicability
islimitedtosimpleconditionsforwhichitisclearwhethertwodifferentpredicates
mayconflict. AsfarasIknow,predicatelocksintheirintendedformhavenever
beenimplementedinanysystem.
2.3. Isolation Levels in PostgreSQL
Overtime,lock-basedprotocolsfortransactionmanagementgotreplacedwiththe
SnapshotIsolation()protocol. Theideabehindthisapproachisthateachtrans-
actionaccessesaconsistentsnapshotofdataasitappearedataparticularpointin
time. The snapshotincludes all the current changes committedbeforethe snap-
shotwastaken.
Snapshotisolationminimizesthenumberofrequiredlocks. Infact,arowwillbe
lockedonlybyconcurrentupdateattempts. Inallothercases,operationscanbe
executedconcurrently: writesneverlockreads,andreadsneverlockanything.
43
Chapter2. Isolation
Postgreusesamultiversionflavoroftheprotocol. Multiversionconcurrency
controlimpliesthatatanymomentthedatabasesystemcancontainseveralver-
sionsofoneandthesamerow,soPostgrecanincludeanappropriateversion
intothesnapshotratherthanaborttransactionsthatattempttoreadstaledata.
Basedonsnapshots,Postgreisolationdiffersfromtherequirementsspecified
in the standard—in fact, it is even stricter. Dirty reads are forbidden by design.
Technically,youcanspecifytheReadUncommittedlevel,butitsbehaviorwillbethe
sameasthatofReadCommitted,soIamnotgoingtomentionthislevelanymore.
p. Repeatable Read allows neither non-repeatable nor phantom reads (even though
it does not guarantee full isolation). But in some cases, there is a risk of losing
changesattheReadCommittedlevel.
lost dirty non-repeatable phantom other
updates reads reads reads anomalies
ReadCommitted yes — yes yes yes
RepeatableRead — — — — yes
Serializable — — — — —
p. Before exploring the internal mechanisms of isolation, let’s discuss each of the
threeisolationlevelsfromtheuser’sperspective.
Forthispurpose,wearegoingtocreatetheaccountstable;AliceandBobwillhave
$,each,butBobwillhavetwoaccounts:
=> CREATE TABLE accounts(
id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
client text,
amount numeric
);
=> INSERT INTO accounts VALUES
(1, 'alice', 1000.00), (2, 'bob', 100.00), (3, 'bob', 900.00);
Read Committed
Nodirtyreads. Itiseasytocheckthatreadingdirtydataisnotallowed.Let’sstart
atransaction.Bydefault,itusestheReadCommitted1isolationlevel:
1 postgresql.org/docs/14/transaction-iso.html#XACT-READ-COMMITTED
44
2.3. IsolationLevelsinPostgreSQL
=> BEGIN;
=> SHOW transaction_isolation;
transaction_isolation
−−−−−−−−−−−−−−−−−−−−−−−
read committed
(1 row)
Tobemoreexact,thedefaultlevelissetbythefollowingparameter,whichcanbe
changedasrequired:
=> SHOW default_transaction_isolation;
default_transaction_isolation
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
read committed
(1 row)
Theopenedtransactionwithdrawssomefundsfromthecustomeraccountbutdoes