# Using `pushd` and `popd` Commands

First, let's create some temporary directories and push them onto the directory stack:

```bash
# Create temporary directories
mkdir /tmp/dir1
mkdir /tmp/dir2
mkdir /tmp/dir3
mkdir /tmp/dir4

# Navigate to the first directory and push it onto the stack
cd /tmp/dir1
pushd .

# Navigate to the second directory and push it onto the stack
cd /tmp/dir2
pushd .

# Navigate to the third directory and push it onto the stack
cd /tmp/dir3
pushd .

# Navigate to the fourth directory and push it onto the stack
cd /tmp/dir4
pushd .
```

At this point, the directory stack contains the following directories:
- `/tmp/dir4`
- `/tmp/dir3`
- `/tmp/dir2`
- `/tmp/dir1`

The last directory pushed onto the stack (`/tmp/dir4`) is at the top. When you perform `popd`, it will change the current directory to the top directory in the stack and remove it from the stack. Here’s how it works:

```bash
# Display the current directory stack
dirs
# Output: /tmp/dir4 /tmp/dir3 /tmp/dir2 /tmp/dir1

# Perform popd
popd
pwd
# Output: /tmp/dir4

# After the above popd, the directory stack contains:
# /tmp/dir3
# /tmp/dir2
# /tmp/dir1

# Perform popd again
popd
pwd
# Output: /tmp/dir3

# After the above popd, the directory stack contains:
# /tmp/dir2
# /tmp/dir1

# Perform popd again
popd
pwd
# Output: /tmp/dir2

# After the above popd, the directory stack contains:
# /tmp/dir1

# Perform popd again
popd
pwd
# Output: /tmp/dir1

# After the above popd, the directory stack is empty
popd
# Output: -bash: popd: directory stack empty
```

## Hack 6: Use `shopt -s cdspell` to Automatically Correct Mistyped Directory Names

You can use `shopt -s cdspell` to automatically correct typos in the `cd` command. This is especially helpful if you frequently make typing mistakes.

```bash
# Attempt to change to a non-existent directory
cd /etc/mall
# Output: -bash: cd: /etc/mall: No such file or directory

# Enable cdspell
shopt -s cdspell

# Attempt to change to the same directory again
cd /etc/mall
pwd
# Output: /etc/mail

# Note: The typo "mall" was automatically corrected to "mail"
```

## Chapter 2: Date Manipulation

### Hack 7: Set System Date and Time

To change the system date, use the `date` command with the following format:

```bash
date {mmddhhmiyyyy.ss}
- mm: Month
- dd: Day
- hh: Hour (24-hour format)
- mi: Minutes
- yyyy: Year
- ss: Seconds
```

For example, to set the system date to January 31st, 2008, at 10:19 PM and 53 seconds:

```bash
date 013122192008.53
```

You can also use the `-s` option to set the date and time in different formats:

```bash
date +%Y%m%d -s "20080131"
date -s "01/31/2008 22:19:53"
date -s "31 JAN 2008 22:19:53"
date -s "31 JAN 2008 22:19:53"
```

To set only the time:

```bash
date +%T -s "22:19:53"
date +%T%p -s "10:19:53PM"
```

### Hack 8: Set Hardware Date and Time

Before setting the hardware date and time, ensure the OS date and time are correctly set. Then, use the `hwclock` command to set the hardware clock based on the system clock:

```bash
# Set the hardware clock to the system clock
hwclock --systohc
# Set the hardware clock to the system clock in UTC
hwclock --systohc --utc

# View the current hardware clock
hwclock

# Check the clock file to verify the system is set for UTC
cat /etc/sysconfig/clock
# Example output:
# ZONE="America/Los_Angeles"
# UTC=false
# ARC=false
```

### Hack 9: Display Current Date and Time in a Specific Format

You can display the current date and time in various formats using the `date` command. Here are some examples:

```bash
# Default format
date
# Output: Thu Jan 1 08:19:23 PST 2009

# Same as default
date --date="now"
# Output: Thu Jan 1 08:20:05 PST 2009

# Same as default
date --date="today"
# Output: Thu Jan 1 08:20:12 PST 2009

# Unix timestamp
date --date='1970-01-01 00:00:01 UTC +5 hours' +%s
# Output: 18001

# Custom format
date '+Current Date: %m/%d/%y%nCurrent Time:%H:%M:%S'
# Output: Current Date: 01/01/09
#         Current Time:08:21:41

# Different format options
date +"%d-%m-%Y"
# Output: 01-01-2009

date +"%d/%m/%Y"
# Output: 01/01/2009

date +"%A,%B %d %Y"
# Output: Thursday,January 01 2009
```

Format options for the `date` command include:
- `%D`: date (mm/dd/yy)
- `%d`: day of month (01..31)
- `%m`: month (01..12)
- `%y`: last two digits of year (00..99)
- `%a`: locale’s abbreviated weekday name (Sun..Sat)
- `%A`: locale’s full weekday name, variable length (Sunday..Saturday)
- `%b`: locale’s abbreviated month name (Jan..Dec)
- `%B`: locale’s full month name, variable length (January..December)
- `%H`: hour (00..23)
- `%I`: hour (01..12)
- `%Y`: year (1970...)

### Hack 10: Display Past Date and Time

You can display past dates and times using the `--date` option with relative time specifications:

```bash
# 3 seconds ago
date --date='3 seconds ago'
# Output: Thu Jan 1 08:27:00 PST 2009

# 1 day ago
date --date="1 day ago"
# Output: Wed Dec 31 08:27:13 PST 2008

# 1 month ago
date --date="1 month ago"
# Output: Mon Dec 1 08:27:23 PST 2008

# 1 year ago
date --date="1 year ago"
# Output: Tue Jan 1 08:27:28 PST 2008

# Yesterday
date --date="yesterday"
# Output: Wed Dec 31 08:27:34 PST 2008

# 10 months and 2 days ago
date --date="10 months 2 day ago"
# Output: Thu Feb 28 08:27:41 PST 2008
```

### Hack 11: Display Future Date and Time

You can display future dates and times using the `--date` option with relative time specifications:

```bash
# 3 seconds from now
date --date='3 seconds'
# Output: Thu Jan 1 08:30:12 PST 2009

# 4 hours from now
date --date='4 hours'
# Output: Thu Jan 1 12:30:17 PST 2009

# Tomorrow
date --date='tomorrow'
# Output: Fri Jan 2 08:30:25 PST 2009

# 1 day from now
date --date="1 day"
# Output: Fri Jan 2 08:30:31 PST 2009

# 2 days from now
date --date="2 days"
# Output: Sat Jan 3 08:30:43 PST 2009

# 1 month from now
date --date='1 month'
# Output: Sun Feb 1 08:30:48 PST 2009

# 1 week from now
date --date='1 week'
# Output: Thu Jan 8 08:30:53 PST 2009

# 2 months from now
date --date="2 months"
# Output: Sun Mar 1 08:30:58 PST 2009

# 2 years from now
date --date="2 years"
# Output: Sat Jan 1 08:31:03 PST 2011

# Next day
date --date="next day"
# Output: Fri Jan 2 08:31:10 PST 2009

# 1 day ago
date --date="-1 days ago"
# Output: Fri Jan 2 08:31:15 PST 2009

# This Wednesday
date --date="this Wednesday"
# Output: Wed Jan 7 00:00:00 PST 2009
```

## Chapter 3: SSH Client Commands

### Hack 12: Identify SSH Client Version

To identify the version of the SSH client, use the `ssh -V` command. For example:

```bash
# OpenSSH version
ssh -V
# Output: OpenSSH_3.9p1, OpenSSL 0.9.7a Feb 19 2003

# SSH2 version
ssh -V
# Output: ssh: SSH Secure Shell 3.2.9.1 (non-commercial version) on i686-pc-linux-gnu
```

### Hack 13: Login to Remote Host Using SSH

When you log in to a remote host for the first time, you may see a message about the host key not being found. You can add the host key to your known hosts list by answering "yes" to the prompt.

```bash
# First-time login
ssh -l jsmith remotehost.example.com
# Output:
# Host key not found from database.
# Key fingerprint: xabie-dezbc-manud-bartd-satsy-limit-nexiu-jambl-title-jarde-tuxum
# Are you sure you want to continue connecting (yes/no)? Yes
# Host key saved to /home/jsmith/.ssh2/hostkeys/key_22_remotehost.example.com.pub
# PI:EMAIL password:
# remotehost.example.com$

# Subsequent logins
ssh -l jsmith remotehost.example.com
# Output:
# PI:EMAIL password:
# remotehost.example.com$
```

If the host key changes after the first login, you will receive a warning. It is advisable to contact your system administrator to verify the new key.

```bash
# Warning message
ssh -l jsmith remotehost.example.com
# Output:
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# @ WARNING: HOST IDENTIFICATION HAS CHANGED! @
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!
# Someone could be eavesdropping on you right now (man-in-the-middle attack)!
# It is also possible that the host key has just been changed.
# Please contact your system administrator.
# Add correct host key to "/home/jsmith/.ssh2/hostkeys/key_22_remotehost.example.com.pub"
# to get rid of this message.
# Received server key's fingerprint: xabie-dezbc-manud-bartd-satsy-limit-nexiu-jambl-title-arde-tuxum
# Are you sure you want to continue connecting (yes/no)? yes
# Do you want to change the host key on disk (yes/no)? yes
# Host key saved to /home/jsmith/.ssh2/hostkeys/key_22_remotehost.example.com.pub
# jsmith @remotehost.example.com’s password:
# remotehost$
```

### Hack 14: Debug SSH Client Session

To view debug messages for troubleshooting SSH connection issues, use the `-v` option with the `ssh` command.

```bash
# Without debug messages
ssh -l jsmith remotehost.example.com
# Output: warning: Connecting to remotehost.example.com failed: No address associated to the name

# With debug messages
ssh -v -l jsmith remotehost.example.com
# Output:
# debug: SshConfig/sshconfig.c:2838/ssh2_parse_config_ext: Metaconfig parsing stopped at line 3.
# debug: SshConfig/sshconfig.c:637/ssh_config_set_param_verbose: Setting variable ‘VerboseMode’ to ‘FALSE’.
# debug: SshConfig/sshconfig.c:3130/ssh_config_read_file_ext: Read 17 params from config file.
# debug: Ssh2/ssh2.c:1707/main: User config file not found, using defaults. (Looked for ‘/home/jsmith/.ssh2/ssh2_config’)
# debug: Connecting to remotehost.example.com, port 22… (SOCKS not used)
# warning: Connecting to remotehost.example.com failed: No address associated to the name
```

### Hack 15: Toggle SSH Session Using SSH Escape Character

You can temporarily return to the local host while keeping the SSH session active by using the escape character `~` followed by `Control-Z`.

```bash
# Log in to the remote host
ssh -l jsmith remotehost

# On the remote host
remotehost$ ~^Z
[1]+ Stopped ssh -l jsmith remotehost
localhost$

# Check the background job
jobs
# Output: [1]+ Stopped ssh -l jsmith remotehost

# Bring the SSH session back to the foreground
fg %1
ssh -l jsmith remotehost
remotehost$
```

### Hack 16: SSH Session Statistics Using SSH Escape Character

To get statistics about the current SSH session, use the escape character `~` followed by `s` on the remote host. This works only on SSH2 clients.

```bash
# Log in to the remote host
ssh -l jsmith remotehost

# On the remote host
remotehost$ ~s
# Output:
# remote host: remotehost
# local host: localhost
# remote version: SSH-1.99-OpenSSH_3.9p1
```

This will display useful statistics about the current SSH connection.