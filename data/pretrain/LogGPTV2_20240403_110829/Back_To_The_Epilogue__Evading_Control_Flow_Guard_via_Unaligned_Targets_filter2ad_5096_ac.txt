BATE (Section V-A), followed by a discussion of the speciﬁc
weaknesses we exploit (Section V-B). Then, we deﬁne pop-
ret gadgets (Section V-C), which are a central part of our
technique, and how we exploit them to gain ﬂow control
on 32-bit systems (Section V-D). We then introduce spiller
gadgets (Section V-E), which work as helpers for pop-ret
gadgets on 64-bit. Finally, we show to combine pop-ret and
spiller gadgets to mount a 64-bit attack (Section V-F).
A. Overview
At the high level, BATE works by exploiting a design
assumption about
the alignment of valid CFG targets.
Whenever target functions are not correctly 16-byte aligned,
we are able to jump to code that surrounds the entry point
of these functions. In particular, we jump to code sequences
we call pop-ret (PR) gadgets, that are contained within the
epilogue of a function preceding a valid unaligned target.
Those gadgets modify the stack pointer and allow us to
transfer control to any location, provided that we control a
value reasonably close to the top of the stack.
The described attack can be easily done on 32-bit code
by controlling an argument to an hijacked indirect call. On
64-bit, controlling a value near the stack top is more difﬁcult
than on 32-bit. To make PR gadgets work, we need control
over a zone on the stack known as Register Parameter
Area (RPA). For this reason we introduce spiller (S) gadgets,
which spill attacker-controlled values to this area. We then
combine S and PR gadgets to form an S-PR chain, which
gives us ﬂow control. Since many S gadgets take the spilled
values from arguments, we regain the ease of exploitation
via arguments we had on 32-bit.
B. Exploited Weaknesses
We exploit three weaknesses in CFG: presence of un-
aligned targets coupled with design assumptions about
target alignment, lack of backward-edge protection, and that
the bitmap is process-wide.
Unaligned Targets. CFG is able to precisely mark a valid
target only if it is the only target in its address range and it is
16-byte aligned. In that case, the state will be 10. However,
if a target is not aligned, or there are multiple targets in the
same range, then the state will have to be set to 11, which
allows branches to any address in the range. In other words,
we can freely alter the lower 4 bits of a valid unaligned
target and the result will still be a valid target. This enables
us to reach code located near a unaligned function’s entry
point, which leads to interesting code sequences we call PR
gadgets. Note that if multiple targets are in the same range
at least one has to be unaligned, so we will not distinguish
between the two and just refer to unaligned targets. This
design assumption would not impact CFG’s security if the
compiler always aligned targets. However, in practice, we
were able to ﬁnd unaligned targets in code commonly used
by applications.
Lack of backward-edge CFI. CFG does not check return
addresses. Our technique eventually returns to an attacker-
controlled value, thus successfully escaping from CFG. We
achieve return address control by modifying the stack
pointer before a return instruction. As previously noted,
32-bit CFG can include stack pointer checks. However, we
take control of execution before these checks run, effectively
neutering them.
Process-wide bitmap. Since CFG keeps a single bitmap
for the whole process, a valid target is allowed for any
indirect branch in any module. Thus, we can improve the
feasibility of our attack by extending the search for gadgets
to all loaded modules. This is particularly interesting when
gadgets are in system libraries: all processes that load a
library with our gadgets in it automatically become exposed
to BATE. Since system libraries can potentially be loaded
by a large number of applications, we get a more universal
bypass.
C. PR gadgets
Due to the imprecision around unaligned targets, we can
jump in the neighborhood of a valid unaligned function’s
entry point. We now need to look for sequences of instruc-
tions that perform interesting operations from an attacker’s
point of view. At the low level, a function is typically made
of three parts:
1)
2)
3)
Prologue. It spills (i.e., saves) callee-saved registers
to the stack and sets up the stack frame for the
function.
Body. It performs the actual work deﬁned by the
programmer at the higher levels.
Epilogue. It deallocates the stack frame and re-
stores callee-saved registers.
Since a function’s prologue is placed at its entry point,
and the compiler lays out functions one after the other in
the binary, the epilogue of a function is close to the entry
point of the subsequent function. We show an example of
this situation in Figure 3: func2, at 0x1007, is a valid
CFG target but it is not 16-byte aligned. Therefore, the
entire aligned 16-byte range (0x1000-0x100f, represented
by the shadowed cells in the picture) around func2 is
valid. This code range, between dashed lines in the ﬁgure,
includes the epilogue of func1, or at least a part of it.
Memory addresses
. . .
Unaligned
valid target
0x0fff
0x1000
0x1001
. . .
0x1007
. . .
0x100e
0x100f
0x1010
. . .
Code
func1:
···
add rsp, 0x40
pop rdi
pop rbx
ret
func2:
P80R0
push rsi
sub rsp, 0x20
mov rsi, [rcx+0x8]
···
Fig. 3. An unaligned valid target at 0x1007 (func2) makes the whole
0x1000-0x100f range valid. A P80R0 gadget is generated from the
epilogue of func1.
A typical epilogue performs the following operations:
1)
2)
3)
Stack frame deallocation. The stack frame was
allocated in the prologue by subtracting its size
from the stack pointer. Deallocation is done by
either adding the stack frame size to the stack
pointer, or by setting the stack pointer to the base
pointer, which keeps track of the stack frame base.
The latter can only be used if the base pointer is
not being treated as a general-purpose registers,
which is a common optimization.
Register restoration. The original values for callee-
saved registers were pushed to the stack during the
prologue. The epilogue pops them to restore their
value for the caller.
Return. The ret instruction pops the return ad-
dress from the stack and branches to it. There is
also an alternative ret opcode that accepts a 16-
bit immediate operand, which will be added to the
stack pointer after popping the return address.
All operations done by the epilogue, excluding deallocation
if the base pointer is used, increment the stack pointer by
a ﬁxed amount. A pop-ret (PR) gadget is a sequence of
consecutive instructions that increment the stack pointer
and return. Due to the predictability of compiler-generated
epilogues, it is easy to deﬁne the exact structure of PR gad-
gets generated from epilogues. Each PR gadget is described
by two parameters, p and r , denoted as PpRr , and satisﬁes
the following properties:
PR.1 The gadget is a valid target for CFG.
PR.2 The gadget is composed by the following
sequence of instructions:
•
•
7
1)
2)
3)
An optional add {e,r}sp, m instruction.
If not present, let m = 0.
An optional sequence of n pop instructions,
excluding pop {e,r}sp, since it would
change the stack pointer to a value that is
not necessarily controlled. If not present, let
n = 0.
Either a ret instruction, in which case let
r = 0, or a ret r instruction.
•
PR.3 p = m + wn ≥ w, where w is the native word
size in bytes (4 on 32-bit, 8 on 64-bit).
In our example in Figure 3 the epilogue of func1, which is
reachable because func2 is an unaligned valid target, gen-
erates a P80R0 gadget (w = 8, m = 64, n = 2). PR gadgets are
relative ROP stack pivots: they increment the stack pointer
by p bytes and return. Optionally, they can increment the
stack pointer by another r bytes before returning, but after
popping the return address.
The main insight behind BATE is that PR.1 is often sat-
isﬁable. Since we exploit the imprecision around unaligned
targets, PR gadgets must be in the 16-byte CFG range for
the unaligned target, otherwise they will fail the CFG check.
More precisely, since PR gadgets precede the unaligned tar-
get, our search window is restricted to the lower part of the
range, which extends from the lowest address in the range
(i.e., the unaligned target rounded down to a multiple of
16) to the unaligned target, excluded. Assuming an uniform
distribution for the unaligned targets, this window will on
average be 8 bytes. However, pop and ret instructions
are small (1 or 2 bytes for pop, 1 or 3 bytes for ret),
so useful PR gadgets can be very short and ﬁt into this
space. Moreover, a single epilogue can generate multiple PR
gadgets. For example, the epilogue of func1 in Figure 3 also
contains the subsequences pop/pop/ret and pop/ret,
which are respectively P16R0 and P8R0 gadgets.
Since every instruction in a PR gadget increments the
stack pointer, p grows as we get farther from ret. Big pivots
typically come from having an add instruction, which is
before all pops, and therefore quite far from the return.
However, the distance between the gadget entry point and
ret is limited, because the entry point has to lay within
the lower part of the 16-byte CFG range for the unaligned
valid target in order to pass CFG checks. Assuming the
offsets of unaligned targets within their ranges are uniformly
distributed, we can expect gadgets with big p values to be
rarer than ones with small p. We show that this is indeed
the case in Section VI.
D. Exploiting PR gadgets
To further explain how to use PR gadgets, we refer to
the sample stack we depict in Figure 4. The x86 stack grows
backwards, towards lower memory addresses. We refer to
the lowest address, which the stack pointer points to, as
the top of the stack.
Figure 4a shows the stack layout immediately after a
call instruction for 32-bit calling conventions [24]. Before
the call, the caller pushes the arguments to the stack,
bringing the stack pointer to sp0. The return address is
= sp0
= sp1
then pushed to the stack before branching to the call target,
− w. For our
so that the new stack pointer is sp1
attack, we corrupt an indirect call and redirect it to a PpRr
gadget. The gadget will increase the stack pointer by p bytes
+ p be the stack pointer
before returning. Let spr
when the gadget reaches its ret instruction. By PR.3 we
≥ sp0, meaning that the return address will be
have that spr
fetched from the caller’s stack frame. Return addresses are
not checked by CFG, so by controlling this location one can
make the program branch to an arbitrary destination. Once
execution jumps to the attacker’s target, the stack pointer
− w + r . As an example, consider Figure 4b,
will be spr
where an indirect call has been hijacked to a P2w Rr gadget.
The gadget will take its return address from the second
argument to the callee, which is an attacker-controlled value
within our threat model.
Clearly, a PR gadget with a big p value could set the
return address further down the stack frame, for example
in the local variables or in the registers spilled by the
caller, both of which an attacker might be able to control.
However, big pivots are rarer than small ones, so we focus
on controlled arguments as they are closer to the stack
top. We also note that, since PR gadgets pop registers, an
attacker that controls more than just the word at spr can
use them to control registers as a side effect. While we
do not make use of this in our proof-of-concept, it can
aid exploitation since follow-up techniques such as stack
pivoting often require a controlled register.
Difﬁculties on 64-bit. While this technique works on 32-bit
code, it is not as easy to apply on 64-bit. Figure 4c shows
the stack layout after a call instruction for the Microsoft
64-bit calling convention [25]. The ﬁrst four arguments are
passed in registers and subsequent ones via the stack. This
immediately reduces the impact of PR gadgets, because
many functions do not take more than four arguments. Also,
a Register Parameter Area (RPA) is inserted at the top of the
caller’s stack frame. The RPA is allocated by the caller for
the callee to spill registers into, and is 4 registers (32 bytes)
in size. Reaching below this zone would require PR gadgets
with p ≥ 40, which are rare. Therefore, we aim at using PR
gadgets that pivot into the RPA, which requires control over
its contents.
E. S gadgets
The RPA is typically used for argument registers, al-
though other registers may be spilled into it. When argu-
ments are spilled, they are in left-to-right order in memory.
While the RPA can be used by the caller for temporary
storage between calls, in most case it is left untouched.
Driving spr into the RPA would access uninitialized stack
data.
While stack data used before initialization can be con-
trolled, for example as shown for the Linux kernel [21], it
requires a complex setup and signiﬁcant effort. Instead,
we exploit a common compiler optimization to control
the RPA: the replacement of tail calls with tail jumps. A
function ending in a tail call would have that call as the
last instruction in its body, followed by the epilogue and
the return. This is often optimized by ﬁrst executing the
8
Low
memory
h
t
w
o
r
g
k
c
a
t
S
Caller
frame
High
memory
...
Return address
Argument 1
Argument 2
...
Locals
Spilled registers
Return address
...
sp1
sp0
Caller
frame
...
Return address
Argument 1
Argument 2
...
Locals
Spilled registers
Return address
...
sp1
sp0
spr
Caller
frame
sp1
sp0
...
Return address
RPA
Argument 5
...
Locals
Spilled registers
Return address
...
(a) 32-bit stack layout after call.
(b) 32-bit stack layout after a P2w Rr
gadget.
(c) 64-bit stack layout after call.
Fig. 4. On 32-bit, the stack pointer after a call (sp1) is close to the arguments and the caller’s locals, so the stack pointer when a PR gadget returns
(spr ) can be pivoted into attacker-controlled arguments. On 64-bit bit, the register parameter area is uninitialized and distances sp1 from the caller’s