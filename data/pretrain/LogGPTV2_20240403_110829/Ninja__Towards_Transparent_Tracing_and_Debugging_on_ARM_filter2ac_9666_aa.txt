title:Ninja: Towards Transparent Tracing and Debugging on ARM
author:Zhenyu Ning and
Fengwei Zhang
Ninja: Towards Transparent Tracing and 
Debugging on ARM
Zhenyu Ning and Fengwei Zhang, Wayne State University
https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/ning
This paper is included in the Proceedings of the 26th USENIX Security SymposiumAugust 16–18, 2017 • Vancouver, BC, CanadaISBN 978-1-931971-40-9Open access to the Proceedings of the 26th USENIX Security Symposium is sponsored by USENIXNinja: Towards Transparent Tracing and Debugging on ARM
Zhenyu Ning and Fengwei Zhang
Wayne State University
{zhenyu.ning, fengwei}@wayne.edu
Abstract
Existing malware analysis platforms leave detectable ﬁn-
gerprints like uncommon string properties in QEMU,
signatures in Android Java virtual machine, and arti-
facts in Linux kernel proﬁles. Since these ﬁngerprints
provide the malware a chance to split its behavior de-
pending on whether the analysis system is present or
not, existing analysis systems are not sufﬁcient to ana-
lyze the sophisticated malware. In this paper, we pro-
pose NINJA, a transparent malware analysis framework
on ARM platform with low artifacts. NINJA leverages a
hardware-assisted isolated execution environment Trust-
Zone to transparently trace and debug a target applica-
tion with the help of Performance Monitor Unit and Em-
bedded Trace Macrocell. NINJA does not modify system
software and is OS-agnostic on ARM platform. We im-
plement a prototype of NINJA (i.e., tracing and debug-
ging subsystems), and the experiment results show that
NINJA is efﬁcient and transparent for malware analysis.
1
Introduction
Malware on the mobile platform exhibits an explosive
growth in recent years. To solve the threat of the mali-
cious applications, a variety of tools have been proposed
for malware detection and analysis [18, 22, 37, 44, 45,
52, 55, 56]. However, sophisticated malware, which is
also known as evasive malware, is able to evade the anal-
ysis by collecting the artifacts of the execution environ-
ment or the analysis tool, and refuses to perform any ma-
licious behavior if an analysis system is detected.
As most of the existing mobile malware analysis sys-
tems [18, 45, 52] are based on emulation or virtual-
ization technology, a series of anti-emulation and anti-
virtualization techniques [29, 36, 48] have been devel-
oped to challenge them. These techniques show that
the emulation or virtualization can be easily detected
by footprints like string properties, absence of particu-
lar hardware components, and performance slowdown.
The hardware-assisted virtualization technique [17, 50]
can improve the transparency of the virtualization-based
systems; however, this approach still leaves artifacts on
basic instruction execution semantics that could be easily
detected by malware [39].
To address this challenge, researchers study the mal-
ware on bare-metal devices via modifying the system
software [22, 37, 44, 55] or leveraging OS APIs [15, 56]
to monitor the runtime behavior of malware. Although
bare-metal based approaches eliminate the detection of
the emulator or hypervisor, the artifacts introduced by the
analysis tool itself are still detectable by malware. More-
over, privileged malware can even manipulate the anal-
ysis tool since they run in the same environment. How
to build a transparent mobile malware analysis system is
still a challenging problem.
This transparency problem has been well studied in
the traditional x86 architecture, and similar milestones
have been made from emulation-based analysis sys-
tems [2, 40] to hardware-assisted virtualization analysis
systems [19, 20, 32], and then to bare-metal analysis sys-
tems [30, 31, 41, 54]. However, this problem still chal-
lenges the state-of-the-art malware analysis systems.
We consider that an analysis system consists of an En-
vironment (e.g., operating system, emulator, hypervisor,
or sandbox) and an Analyzer (e.g., instruction analyzer,
API tracer, or application debugger). The Environment
provides the Analyzer with the access to the states of the
target malware, and the Analyzer is responsible for the
further analysis of the states. Consider an analysis sys-
tem that leverages the emulator to record the system call
sequence and sends the sequence to a remote server for
further analysis. In this system, the Environment is the
emulator, which provides access to the system call se-
quence, and both the system call recorder and the remote
server belong to the Analyzer. Evasive malware can de-
tect this analysis system via anti-emulation techniques
and evade the analysis.
USENIX Association
26th USENIX Security Symposium    33
To build a transparent analysis system, we propose
three requirements. Firstly, the Environment must be iso-
lated. Otherwise, the Environment itself can be manip-
ulated by the malware. Secondly, the Environment ex-
ists on an off-the-shelf (OTS) bare-metal platform with-
out modifying the software or hardware (e.g., emulation
and virtualization are not). Although studying the anti-
emulation and anti-virtualization techniques [29, 36, 39,
48] helps us to build a more transparent system by ﬁx-
ing the imperfections of the Environment, we consider
perfect emulation or virtualization is impractical due to
the complexity of the software. Instead, if the Environ-
ment already exists in the OTS bare-metal platform, mal-
ware cannot detect the analysis system by the presence of
the Environment. Finally, the Analyzer should not leave
any detectable footprints (e.g., ﬁles, memory, registers,
or code) to the outside of the Environment. An Analyzer
violating this requirement can be detected.
In light of the three requirements, we present NINJA 1,
a transparent malware analysis framework on ARM plat-
form based on hardware features including TrustZone
technology, Performance Monitoring Unit (PMU), and
Embedded Trace Macrocell (ETM). We implement a
prototype of NINJA that embodies a trace subsystem
with different tracing granularities and a debug subsys-
tem with a GDB-like debugging protocol on ARM Juno
development board. Additionally, hardware-based traps
and memory protection are leveraged to keep the use of
system registers transparent to the target application. The
experimental results show that our framework can trans-
parently monitor and analyze the behavior of the mal-
ware samples. Moreover, NINJA introduces reasonable
overhead. We evaluate the performance of the trace sub-
system with several popular benchmarks, and the result
shows that the overheads of the instruction trace and sys-
tem call trace are less than 1% and the Android API trace
introduces 4 to 154 times slowdown.
The main contributions of this work include:
• We present a hardware-assisted analysis framework,
named NINJA, on ARM platform with low artifacts.
It does not rely on emulation, virtualization, or sys-
tem software, and is OS-agnostic. NINJA resides
in a hardware isolation execution environment, and
thus is transparent to the analyzed malware.
• NINJA eliminates its footprints by novel techniques
including hardware traps, memory mapping inter-
ception, and timer adjusting. The evaluation result
demonstrates the effectiveness of the mitigation and
NINJA achieves a high level of transparency. More-
over, we evaluate the instruction-skid problem and
show that it has little inﬂuence on our system.
1A NINJA in feudal Japan has invisibility and transparency ability
Figure 1: The ARMv8 and ARMv7 Architectures.
• We implement debugging and tracing subsystems
with a variety of program analysis functionalities.
NINJA is capable of studying kernel- or hypervisor-
level malware. The tracing subsystem exhibits a low
performance overhead and the instruction and sys-
tem call tracing is immune to timing attacks.
2 Background
2.1 TrustZone and Trusted Firmware
ARM TrustZone technology [12] introduces a hardware-
assisted security concept that divides the execution envi-
ronment into two isolated domains, i.e., secure domain
and non-secure domain. Due to security concerns, the
secure domain could access the resources (e.g., mem-
ory and registers) of the non-secure domain, but not vice
versa. In ARMv8 architecture, the only way to switch
from normal domain to secure domain is to trigger a
secure exception [8], and the exception return instruc-
tion eret is used to switch back to the normal domain
from the secure domain after the exception is handled.
Figure 1 shows the difference between the ARMv8
and the ARMv7 architectures. In the new architecture,
ARM removes the execution modes in ARMv7 and re-
names the Privilege Level (PL) to Exception Level (EL).
The term EL indicates the level where an exception can
be handled and all ELs except EL0 can handle excep-
tions. Any exception occurs in a certain level could only
be handled in the same level or a higher level.
The names of the system registers in 64-bit ARMv8
architecture contain a sufﬁx that indicating the lowest
EL at which the register can be accessed. For example,
the name of the PMEVCNTR EL0 register indicates that the
lowest EL to access this register is EL0. Similarly, the
registers with sufﬁx EL3 can only be accessed in EL3.
ARM Trusted Firmware [7] (ATF) is an ofﬁcial im-
plementation of secure domain provided by ARM, and
it supports an array of hardware platforms and emula-
tors. While entering the secure domain, the ATF saves
the context of the normal domain and dispatches the se-
cure exception to the corresponding exception handler.
After the handler ﬁnishes the handling process, the ATF
34    26th USENIX Security Symposium
USENIX Association
EL0ApplicationsEL1Rich OSEL2HypervisorNon-Secure stateEL0ApplicationsEL1Secure OSEL3Secure monitorSecure stateARMv7 modes and PLs64-bit ARMv8 Exception Levelsusr mode (PL0)ﬁq/irq/svc/abt/und/sys mode (PL1)ﬁq/irq/svc/mon/abt/und/sys mode (PL3)hyp mode (PL2)restores the context of the normal domain and switches
back with eret instruction. ATF also provides a trusted
boot path by authenticating the ﬁrmware image with sev-
eral approaches like signatures and public keys.
2.2 PMU and ETM
The Performance Monitors Unit (PMU) [8] is a fea-
ture widely implemented in both x86 and ARM architec-
tures [42], which leverages a set of performance counter
registers to calculate CPU events. Each architecture
speciﬁes a list of common events by event numbers,
and different CPUs may also maintain additional event
numbers. A Performance Monitor Interrupt (PMI) can
be triggered while a performance counter register over-
ﬂows. Note that the PMU is a non-invasive debug feature
that does not affect the performance of the CPU.
The Embedded Trace Macrocell (ETM) [11] is another
non-invasive debug component in ARM architecture. It
traces instructions and data by monitoring instruction
and data buses with low performance impact. Actually,
ARM expects that ETM has no effect on the functional
performance of the processor. The ETM generates an
element for executed signpost instructions that could be
further used to reconstruct all the executed instructions.
The generated elements are encoded into a trace stream
and sent to a pre-allocated buffer on the chip.
According to Futuremark [23], 21 of the most popu-
lar 50 smartphones and tablets are equipped with ARM
Cortex-A5x or Cortex-A7x series processors, in which
the PMU and ETM components are included.
3 Related Work
3.1 Transparent Malware Analysis on x86
Ether [20] leverages hardware virtualization to build a
malware analysis system and achieves high transparency.
Spider [19] is also based on hardware virtualization, and
it focuses on both applicability and transparency while
using memory page instrument to gain higher efﬁciency.
Since the hardware virtualization has transparency is-
sues, these systems are naturally not transparent. LO-
PHI [41] leverages additional hardware sensors to moni-
tor the disk operation and periodically poll memory snap-
shots, and it achieves a higher transparency at the cost of
incomplete view of system states.
MalT [54] increases the transparency by involving
System Manage Mode (SMM), a special CPU mode in
x86 architecture. It leverages PMU to monitor the pro-
gram execution and switch into SMM for analysis. Com-
paring with MalT, NINJA improves in the following as-
pects: 1) The PMU registers on MalT are accessible by
privileged malware, which breaks the transparency by
checking the values of these registers. By leveraging
TrustZone technology, NINJA conﬁgures needed PMU
registers as secure ones so that even the privileged mal-
ware in the normal domain cannot access them. 2) MalT
is built on SMM. However, SMM is not designed for se-
curity purpose such as transparent debugging (originally
for power management); frequent CPU mode switching
introduces a high performance overhead (12 µs is re-
quired for a SMM switch [54]). NINJA is based on Trust-
Zone, a dedicated security extension on ARM. The do-
main switching only needs 0.34 µs (see Appendix B). 3)
Besides a debugging system, NINJA develops a transpar-
ent tracing system with existing hardware. The instruc-
tion and system call tracing introduce negligible over-
head, which is immune to timing attacks while MalT suf-
fers from external timing attack.
BareCloud [31] and MalGene [30] focus on detect-
ing evasive malware by executing malware in different
environments and comparing their behavior. There are
limitations to this approach. Firstly, it fails to transpar-
ently fetch the malware runtime behavior (e.g., system
calls and modiﬁcations to memory/registers) on a bare-
metal environment. Secondly, it assumes that the eva-
sive malware shows the malicious behavior in at least
one of the analysis platforms. However, sophisticated
malware may be able to detect all the analysis platforms
and refuse to exhibit any malicious behavior during the
analysis. Lastly, after these tools identify the evasive
malware from the large-scale malware samples, they still
need a transparent malware analysis tool which is able to
analyze these evasive samples transparently. NINJA pro-
vides a transparent framework to study the evasive mal-
ware and plays a complementary role for these systems.
3.2 Dynamic Analysis Tools on ARM
Emulation-based systems. DroidScope [52] rebuilds
the semantic information of both the Android OS and
the Dalvik virtual machine based on QEMU. Copper-
Droid [45] is a VMI-based analysis tool that automati-
cally reconstructs the behavior of Android malware in-
cluding inter-process communication (IPC) and remote
procedure call interaction. DroidScibe [18] uses Cop-
perDroid [45] to collect behavior proﬁles of Android
malware, and automatically classiﬁes them into differ-
ent families. Since the emulator leaves footprints, these
systems are natural not transparent.
Hardware virtualization. Xen on ARM [50] mi-
grates the hardware virtualization based hypervisor Xen
to ARM architecture and makes the analysis based
on hardware virtualization feasible on mobile devices.
KVM/ARM [17] uses standard Linux components to im-
prove the performance of the hypervisor. Although the
hardware virtualization based solution is considered to
USENIX Association
26th USENIX Security Symposium    35
be more transparent than the emulation or traditional vir-
tualization based solution, it still leaves some detectable
footprints on CPU semantics while executing speciﬁc in-
structions [39].
Bare-metal systems. TaintDroid [22] is a system-wide
information ﬂow tracking tool. It provides variable-level,
message-level, method-level, and ﬁle-level taint propa-