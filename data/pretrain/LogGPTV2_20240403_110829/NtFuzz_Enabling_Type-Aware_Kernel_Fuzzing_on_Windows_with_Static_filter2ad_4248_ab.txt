specifying an odd length (Length), and an invalid memory
pointer (Buffer). This vulnerability allows an attacker to
access the kernel memory and gain escalated privilege by
carefully crafting the input ﬁelds.
From this example, we can make the following important
observations.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:11 UTC from IEEE Xplore.  Restrictions apply. 
678
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
// Syscall in kernel-mode.
NtUserRegisterWindowMessage(UNICODE_STRING* arg) {
... // Sanitize ’arg’.
unsigned short len = arg->Length;
wchar_t* buf = arg->Buffer;
if ( len & 1 ) {
LogError(...); // Does not abort.
}
else {
return;
tmp = ((char*)buf) + len + 2;
if (tmp >= 0x7fff0000 || tmp <= buf || ... ) {
}
}
... // Access ’buf’.
}
// API function in user-mode.
RegisterWindowMessage(char* s) {
UNICODE_STRING str;
str.Buffer = malloc(2 * strlen(s) + 2);
str.Length = 2 * strlen(s);
...
NtUserRegisterWindowMessage(&str);
}
Fig. 2. Simpliﬁed pseudo-code of CVE-2020-0792 found by NTFUZZ.
First, it is difﬁcult for fuzzers to trigger the bug without rec-
ognizing the type of NtUserRegisterWindowMessage.
A fuzzer needs to know that the input argument of the syscall
is a pointer, and that it should point to a structure of type
UNICODE_STRING. Let us assume that the fuzzer blindly
generates a value without knowing the type information.
It
is unlikely for the generated value to have a desired
UNICODE_STRING structure where the Length ﬁeld is odd
and the Buffer ﬁeld points to an invalid memory region.
Second, undocumented syscalls are often related to doc-
functions. RegisterWindowMessage in
umented API
our example is documented in Microsoft Docs [58], while
NtUserRegisterWindowMessage is not. However, we
can infer the type of this syscall via known type information
of the documented API function. For instance, we can ob-
serve how RegisterWindowMessage initializes the local
UNICODE_STRING structure, using its char* argument.
Third, API-function-level fuzzing may not trigger critical
bugs, even if API functions eventually invoke syscalls. Note
that the caller of RegisterWindowMessage cannot fully
control the input to NtUserRegisterWindowMessage
because RegisterWindowMessage always
the
Length ﬁeld with an even number in Line 21. As a result, the
bug in the syscall will never be triggered if we only fuzz the
API function. This highlights the importance of direct syscall
fuzzing.
sets
IV. OVERVIEW
In this section, we ﬁrst describe the overall architecture of
NTFUZZ (§IV-A). We then present an overview of our modular
analysis (§IV-B) and our running example (§IV-C).
A. NTFUZZ Architecture
Figure 3 illustrates the overall architecture of NTFUZZ,
which comprises two core components: (1) the static analyzer,
Fig. 3. Architecture of NTFUZZ.
and (2) the kernel fuzzer. At a high level, the static analyzer
takes in a set of system binaries and API speciﬁcations
as input, and outputs syscall type information by analyzing
the binaries. The kernel fuzzer then repeatedly runs a seed
application1 while mutating the arguments of the invoked
syscalls based on the type information gathered.
1) Static Analyzer: The static analyzer consists of three
major components. First, the front-end lifts system binaries
into intermediate representations and constructs Control-Flow
Graphs (CFGs). It also parses the given API speciﬁcation—
the type information of documented API functions—and turns
it into a suitable form for analysis (see §V-A).
Next,
the modular analysis engine traverses the inter-
procedural CFGs and observes how the system binaries con-
struct syscall arguments. Speciﬁcally, it analyzes how each
argument of documented API functions ﬂows into syscalls.
We sketch the key idea of modular analysis in §IV-B, and
present the detailed design in §V-B.
Finally, the type inferrer decides the argument types of each
syscall based on the analyzed behavior of the binaries. To
improve the accuracy of analysis, we aggregate the information
obtained from multiple callsites of syscalls, and decide the
ﬁnal argument types (see §V-C).
2) Kernel Fuzzer: This module runs by repeating the fol-
lowing three steps. First, the launcher prepares for syscall
hooking and runs a given seed application. The mutator
then mutates the argument values of each syscall during the
execution of the application. This mutation process is based on
the type information obtained from the static analyzer. Finally,
the crash detector checks if the kernel crashes, and if so, it
retrieves the corresponding memory dump. Otherwise, it does
nothing. These steps iterate until a timeout is reached. We
describe the design details of each component in §VI.
B. Modular Analysis Algorithm
The key aspect of NTFUZZ is the use of modular analy-
sis [2], [15] to infer syscall types. At a high level, modular
analysis computes the whole program behavior by (1) splitting
the target program into multiple modules, and (2) assembling
the analysis results of each component. NTFUZZ divides
the
a program into multiple functions. For each function,
1Note our seed is different than seed inputs used in regular fuzzers [80].
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:11 UTC from IEEE Xplore.  Restrictions apply. 
679
NTFUZZSeed App.Front-endModular AnalyzerType InferrerLauncherMutatorBugsKernel Fuzzer(§VI)Static Analyzer (§V)System Bins.API Spec.CDLLCFGApprox.behaviorSyscallsSyscalls’SyscallType Info.CrashDetectorAlgorithm 1: Modular Analysis Algorithm.
1 function Analyze(CFGs, callGraph, APISpec)
2
3
4
5
6
7
summaries ← {}
typeInfo ← ∅
for f in TopoSortReverse(callGraph) do
s ← Summarize(CFGs[f ], summaries, APISpec)
summaries[f ] ← s
typeInfo ← typeInfo ∪ CollectType(s)
8
return DecideType(typeInfo)
1
2
3
4
5
6
7
8
9
10
11
12
13
// Documented API.
void f(HANDLE x) {
p = (char *)malloc(8);
h(p, x);
h(p + 4, 10);
g(p);
}
void g(y) {
syscall(20, y);
}
void h(a, b) {
*a = b;
}
f
h
g
(b) Call Graph.
/* struct begin */
+0: HANDLE
+4: int
/* struct end */
(c) Inferred struct y.
analyzer investigates its semantics and constructs a summary
to capture its behavior. When a summarized function is later
called by another function, we refer to this summary instead
of analyzing the callee again. This way, the behavior of the
whole program is composed in a bottom-up style.
Algorithm 1 describes the pseudo-algorithm of our mod-
ular analysis for syscall type inference. The analysis takes
in CFGs (CFGs), an inter-binary call graph (callGraph),
and a parsed API speciﬁcation (APISpec) as input, and
returns inferred syscall type information. The algorithm ﬁrst
topologically sorts the call graph in Line 4, and traverses it
starting from the leaf nodes. Each function in the call graph
is then summarized with the abstract interpretation framework
(see §V-B) in Line 5. A summary of a function f captures (1)
which syscalls are invoked by f with which arguments, and
(2) how the memory state varies by running f. Note that we
run this analysis from the leaf nodes in order to reuse their
function summaries in the callers. In Line 8, DecideType
emits the ﬁnal syscall types using the information accumulated
from each function within the loop (see §V-C).
There are several beneﬁts of using the modular analysis.
First, our analysis is naturally inter-procedural and context-
sensitive [73], [85] as we utilize function summaries. Second,
our analysis operates on each function only once. This can
greatly reduce the cost of analysis compared to traditional
global analyses [9], [72], which can potentially analyze the
same function multiple times [71].
Of course, such beneﬁts come at a price. For example, as
modular analysis requires callees to be analyzed before the
caller, it cannot soundly handle recursive calls or indirect calls.
This is an inherent limitation of this technique, and other
modular analysis tools, e.g., Infer [15], suffer from the same
issue. In our implementation, recursive calls or unresolved
indirect calls are unsoundly ignored as NOPs. However, the
evaluation in §VII-B indicates that our analyzer can still collect
meaningful information and yield a fair degree of accuracy
despite such problems.
C. Running Example
We now present a running example to give a brief overview
of our modular analysis. Figure 4 shows our running example,
which consists of three functions. We assume that the function
f is the only documented API function. That is, we know
the exact type of f. For simplicity, we consider malloc
and syscall as built-in primitive functions for memory
allocation and syscall invocation, respectively. Note that we
(a) Example in C.
Fig. 4. Running example for modular analysis.
show this example in C for ease of explanation, but our actual
analysis runs on a binary. Therefore, the types of the arguments
and variables are not known. To indicate this, we deliberately
omit type notations for g and h.
Our goal here is to ﬁgure out the types of the syscall
arguments in Line 9.
1) Walk-Through: NTFUZZ starts by topologically sorting
the call graph in Figure 4b and traverses the sorted nodes
in a reverse order starting from leaf nodes. There are two
possible orders: either h → g → f or g → h → f. Assume
that NTFUZZ selects the former. It will ﬁrstly analyze h and
produce a summary including the information about the side
effect “*a = b”, which means the memory location pointed
to by the ﬁrst argument (a) is updated with the value of the
second argument (b).
Next, NTFUZZ produces a summary for g, which contains
a syscall with a constant 10 as its ﬁrst argument and y
as its second argument. In this case, there is no side effect
to summarize for g. Note that our function summaries are
parameterized. That is, a summary can be concretized later
into different instances based on the provided arguments.
We now compute the summary of f by reusing the existing
summaries for h and g. First, we obtain the type of f from
the given API speciﬁcation. We then instantiate and apply the
summarized side effect of h, and ﬁnd out how the heap object
generated in Line 3 is updated via function calls (Line 4–
5). When p is passed as an argument to g in Line 6, we
instantiate the summarized syscall information of g, which
reveals that the second argument of the syscall, in Line 9, is
a pointer to a structure. The structure has a HANDLE ﬁeld at
the offset zero (Line 4), and an integer ﬁeld at the offset four
(Line 5). Therefore, we can identify the type of the second
syscall argument as in Figure 4c. Note that the type of the ﬁrst
argument is already known during the analysis of g. Thus, at
this point, we have complete type information for the syscall.
2) Challenges: Although the running example is deliber-
ately simpliﬁed, accurately inferring the syscall type is not
trivial for the following reasons.
First, our analysis should be able to trace data ﬂows across
function boundaries. In particular, it should understand data
ﬂows from f to g in order to correctly identify the syscall
type: we should realize that the argument y of syscall is
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:11 UTC from IEEE Xplore.  Restrictions apply. 
680
from p in Line 3.
Furthermore, our analysis should be able to track the
memory states along program executions in an inter-procedural
manner. For example, it should know how the heap object,
which is pointed to by p, is allocated and how its contents
are set via h. In this case, the function h has an assignment
to a pointer, which produces a memory side effect. Therefore,
binary analysis tools that only support register data ﬂows or
intra-procedural analyses cannot handle this.
V. STATIC ANALYZER DESIGN
This section presents our design of the static analyzer
module, which is responsible for syscall type inference.
A. Front-End
The primary role of the front-end is to parse Windows
system binaries and documented API speciﬁcations for our
modular analysis.
We use B2R2 [36] to parse and lift binaries, which is fast
enough to deal with large system binaries. B2R2 lifts binary
code into intermediate representations (IRs), which describe
semantics of binary code using only a few primitive operations.
Figure 5 shows a simpliﬁed syntax of B2R2 IR. Note, we
deliberately omitted many expressions for ease of explanation.
For example, we removed unary operations and even branch
statements except for call statements as their semantics are
straightforward. The lifting process runs recursively by fol-
lowing jump targets and constructs a CFG for each function.
With these CFGs, we build an inter-binary call graph.
To reduce the size of the call graph, we ﬁlter out unneces-
sary nodes, i.e., functions, from it. First, we identify syscall
stub functions that execute a sysenter instruction, and then
traverse back the call graph from the identiﬁed stub functions
up to a documented API function. Note we stop the traversal at
a documented API function because we already have complete
type information for documented functions, and there is no
beneﬁt from further analyzing their callers. We accumulate all
the functions encountered, including the stub functions, and
denote them as S1.
Next, we collect all reachable functions from S1 and let the
resulting set be S2. This is to fully capture side effects incurred
by the functions called from S1. Finally, we prune the original
call graph by leaving only the functions that belong to S1∪S2.
The front-end is also responsible for parsing Windows API
speciﬁcations. Currently, the speciﬁcations are obtained from
the header ﬁles in Windows 10 SDK [65]. We parse the
function declarations in these ﬁles and obtain type information
for each function. The declarations also include useful annota-
tions written in Source Annotation Language (SAL) [63]. For